00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic051.p2asm"
00000                 | con
00000                 | 	_clkfreq = 338695652
00000                 | 	_clkmode = 28773115
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 49
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_cogstop = 207
00000                 | 	token_memlo = 208
00000                 | 	token_memtop = 209
00000                 | 	token_setcolor = 210
00000                 | 	token_getcolor = 211
00000                 | 	token_restorepalette = 212
00000                 | 	token_pads = 213
00000                 | 	token_padw = 214
00000                 | 	token_findfirst = 215
00000                 | 	token_findnext = 216
00000                 | 	token_defchar = 217
00000                 | 	token_setamode = 218
00000                 | 	token_getrealfreq = 219
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 338695652
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1b70afb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 7A 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 03 90 5D |  if_ne	jmp	#spininit
0040c 002 3C F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 02 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 85 DB 80 FF 
00420 007 00 F0 65 FD | 	hubset	##28773112
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 85 DB 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##28773115
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 0A 18 8A FF 
00440 00f 14 C8 6F FC | 	wrlong	##338695652, #20
00444 010 BC 02 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
006fc 0be 00 00 00 00 
00700 0bf 00 00 00 00 | 	orgf	192
00704 0c0             | skip_clock_set_
00704 0c0 2C 14 A2 FD | 	call	#_program
00708 0c1             | cogexit
00708 0c1 38 01 80 FF 
0070c 0c2 1F 00 66 FD | 	waitx	##160000
00710 0c3 01 92 62 FD | 	cogid	arg01
00714 0c4 03 92 62 FD | 	cogstop	arg01
00718 0c5             | spininit
00718 0c5 61 65 06 FB | 	rdlong	objptr, ptra++
0071c 0c6 61 7B 06 FB | 	rdlong	result1, ptra++
00720 0c7 28 06 64 FD | 	setq	#3
00724 0c8 00 93 06 FB | 	rdlong	arg01, ptra
00728 0c9 04 F0 87 F1 | 	sub	ptra, #4
0072c 0ca 2D 7A 62 FD | 	call	result1
00730 0cb D4 FF 9F FD | 	jmp	#cogexit
00734 0cc             | FCACHE_LOAD_
00734 0cc F9 AD 01 F6 |     mov	fcache_tmpb_,ptrb
00738 0cd 2B F2 63 FD |     pop	ptrb
0073c 0ce D5 EC 8B F9 |     altd	pa,ret_instr_
00740 0cf D5 00 00 F6 |     mov	 0-0, ret_instr_
00744 0d0 28 EC 63 FD |     setq	pa
00748 0d1 E1 01 04 FB |     rdlong	$0, ptrb++
0074c 0d2 2A F2 63 FD |     push	ptrb
00750 0d3 D6 F2 03 F6 |     mov ptrb,fcache_tmpb_
00754 0d4 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00758 0d5             | ret_instr_
00758 0d5 00 FE 07 02 |     _ret_ cmp inb,#0
0075c 0d6             | fcache_tmpb_
0075c 0d6 00 00 00 00 |     long 0
00760 0d7             | fcache_load_ptr_
00760 0d7 CC 00 00 00 |     long FCACHE_LOAD_
00764 0d8             | builtin_bytefill_
00764 0d8 01 96 56 F0 |         shr	arg03, #1 wc
00768 0d9 49 95 42 CC |  if_c   wrbyte	arg02, arg01
0076c 0da 01 92 06 C1 |  if_c   add	arg01, #1
00770 0db 00 94 FE F9 |         movbyts	arg02, #0
00774 0dc             | builtin_wordfill_
00774 0dc 01 96 56 F0 |         shr	arg03, #1 wc
00778 0dd 49 95 52 CC |  if_c   wrword	arg02, arg01
0077c 0de 02 92 06 C1 |  if_c   add	arg01, #2
00780 0df 4A 95 2A F9 |         setword	arg02, arg02, #1
00784 0e0             | builtin_longfill_
00784 0e0 49 01 88 FC |         wrfast	#0,arg01
00788 0e1 00 96 0E F2 |         cmp	arg03, #0 wz
0078c 0e2 4B 03 D8 5C |  if_nz  rep	#1, arg03
00790 0e3 17 94 62 5D |  if_nz  wflong	arg02
00794 0e4 2D 00 64 FD |         ret
00798 0e5             | COUNT_
00798 0e5 00 00 00 00 |     long 0
0079c 0e6             | RETADDR_
0079c 0e6 00 00 00 00 |     long 0
007a0 0e7             | fp
007a0 0e7 00 00 00 00 |     long 0
007a4 0e8             | pushregs_
007a4 0e8 2B EC 63 FD |     pop  pa
007a8 0e9 2B CC 61 FD |     pop  RETADDR_
007ac 0ea 03 CA 95 FB |     tjz  COUNT_, #pushregs_done_
007b0 0eb FF CB 8D F9 |     altd  COUNT_, #511
007b4 0ec 28 00 64 FD |     setq #0-0
007b8 0ed 61 A7 66 FC |     wrlong local01, ptra++
007bc 0ee             | pushregs_done_
007bc 0ee 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
007c0 0ef 61 CB 65 FC |     wrlong COUNT_, ptra++
007c4 0f0 F8 CF 01 F6 |     mov    fp, ptra
007c8 0f1 2C EC 63 FD |     jmp  pa
007cc 0f2             |  popregs_
007cc 0f2 2B EC 63 FD |     pop    pa
007d0 0f3 28 04 64 FD |     setq   #2
007d4 0f4 5F CB 05 FB |     rdlong COUNT_, --ptra
007d8 0f5 02 CA 75 FB |     djf    COUNT_, #popregs__ret
007dc 0f6 28 CA 61 FD |     setq   COUNT_
007e0 0f7 5F A7 06 FB |     rdlong local01, --ptra
007e4 0f8             | popregs__ret
007e4 0f8 2A CC 61 FD |     push   RETADDR_
007e8 0f9 2C EC 63 FD |     jmp    pa
007ec 0fa             | 
007ec 0fa             | divide_
007ec 0fa 88 11 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
007f0 0fb 6C 62 62 FD |        wrc     itmp2_                         'store sign of y
007f4 0fc 87 0F 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
007f8 0fd 88 0F 13 FD |        qdiv    muldiva_, muldivb_             'queue divide
007fc 0fe 01 62 66 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00800 0ff 18 10 63 FD |        getqx   muldivb_                       'get quotient
00804 100 19 0E 63 FD |        getqy   muldiva_                       'get remainder
00808 101 87 0F 83 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0080c 102 00 62 16 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00810 103 88 11 83 06 |  _ret_ negc    muldivb_,muldivb_     
00814 104             | __pc long 0
00814 104 00 00 00 00 
00818 105             | __setjmp
00818 105 2B 08 62 FD |     pop __pc
0081c 106 00 7A 06 F6 |     mov result1, #0
00820 107 00 7C 06 F6 |     mov result2, #0
00824 108 49 5D 02 F6 |     mov abortchain, arg01
00828 109 49 CF 61 FC |     wrlong fp, arg01
0082c 10a 04 92 06 F1 |     add arg01, #4
00830 10b 49 F1 63 FC |     wrlong ptra, arg01
00834 10c 04 92 06 F1 |     add arg01, #4
00838 10d 49 65 62 FC |     wrlong objptr, arg01
0083c 10e 04 92 06 F1 |     add arg01, #4
00840 10f 49 09 62 FC |     wrlong __pc, arg01
00844 110 2C 08 62 FD |     jmp __pc
00848 111             | __unwind_pc long 0
00848 111 00 00 00 00 
0084c 112             | __unwind_stack
0084c 112 2B 22 62 FD |    pop  __unwind_pc
00850 113             | __unwind_loop
00850 113 4A 93 0A F2 |    cmp  arg01, arg02 wz
00854 114 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00858 115 49 F1 03 F6 |    mov   ptra, arg01
0085c 116 6C FF BF FD |    call  #popregs_
00860 117 E7 92 02 F6 |    mov   arg01, fp
00864 118 E8 FF 9F FD |    jmp   #__unwind_loop
00868 119             | __unwind_stack_ret
00868 119 2C 22 62 FD |    jmp  __unwind_pc
0086c 11a             | __longjmp
0086c 11a 2B 08 62 FD |     pop __pc
00870 11b 00 92 0E F2 |     cmp    arg01, #0 wz
00874 11c 30 00 90 AD |  if_z jmp #nocatch
00878 11d 4A 7B 02 F6 |     mov result1, arg02
0087c 11e 01 7C 06 F6 |     mov result2, #1
00880 11f 49 95 02 FB |     rdlong arg02, arg01
00884 120 04 92 06 F1 |     add arg01, #4
00888 121 49 F1 03 FB |     rdlong ptra, arg01
0088c 122 04 92 06 F1 |     add arg01, #4
00890 123 49 65 02 FB |     rdlong objptr, arg01
00894 124 04 92 06 F1 |     add arg01, #4
00898 125 49 09 02 FB |     rdlong __pc, arg01
0089c 126 E7 92 02 F6 |     mov arg01, fp
008a0 127 A8 FF BF FD |     call #__unwind_stack
008a4 128             | __longjmp_ret
008a4 128 2C 08 62 FD |     jmp  __pc
008a8 129             | nocatch
008a8 129 00 96 0E F2 |     cmp arg03, #0 wz
008ac 12a 58 FE 9F AD |  if_z jmp #cogexit
008b0 12b F0 FF 9F FD |     jmp #__longjmp_ret
008b4 12c             | 
008b4 12c             | __heap_ptr
008b4 12c 90 F6 03 00 | 	long	@__heap_base
008b8 12d             | __methods__
008b8 12d 2C F3 03 00 | 	long	@__methodtable__
008bc 12e             | abortchain
008bc 12e 00 00 00 00 | 	long	0
008c0 12f             | entryptr__
008c0 12f 04 04 00 00 | 	long	@entry
008c4 130             | itmp1_
008c4 130 00 00 00 00 | 	long	0
008c8 131             | itmp2_
008c8 131 00 00 00 00 | 	long	0
008cc 132             | objptr
008cc 132 98 6D 05 00 | 	long	@objmem
008d0 133             | ptr__Audio2_003_spin2_dat__
008d0 133 80 E2 03 00 | 	long	@_Audio2_003_spin2_dat_
008d4 134             | ptr___system__dat__
008d4 134 54 E6 03 00 | 	long	@__system__dat_
008d8 135             | ptr__dat__
008d8 135 50 37 03 00 | 	long	@_dat_
008dc 136             | ptr__fatfs_cc_dat__
008dc 136 9C ED 03 00 | 	long	@_fatfs_cc_dat_
008e0 137             | ptr__hg010b_spin2_dat__
008e0 137 B8 68 03 00 | 	long	@_hg010b_spin2_dat_
008e4 138             | ptr__housekeeper_
008e4 138 FC 15 00 00 | 	long	@_housekeeper
008e8 139             | ptr__psram16drv_spin2_dat__
008e8 139 68 A8 03 00 | 	long	@_psram16drv_spin2_dat_
008ec 13a             | ptr__psram_spin2_dat__
008ec 13a 20 A6 03 00 | 	long	@_psram_spin2_dat_
008f0 13b             | ptr__usbnew_spin2_dat__
008f0 13b F8 B7 03 00 | 	long	@_usbnew_spin2_dat_
008f4 13c             | ptr_stackspace_
008f4 13c 10 15 06 00 | 	long	@stackspace
008f8 13d             | result1
008f8 13d 00 00 00 00 | 	long	0
008fc 13e             | result2
008fc 13e 01 00 00 00 | 	long	1
00900 13f             | result3
00900 13f 02 00 00 00 | 	long	2
00904 140             | COG_BSS_START
00904 140             | 	fit	480
00904                 | 	orgh
00904                 | hubentry
00904                 | 
00904                 | ' 
00904                 | ' '-------------------------------------------------------------------------------------------------------- 
00904                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00904                 | ' '--------------------------------------------------------------------------------------------------------
00904                 | ' 
00904                 | ' ''-------------------------------------------------------------------------------------------------------
00904                 | ' '                     A full screen editor for programming and entering data
00904                 | ' ''-------------------------------------------------------------------------------------------------------
00904                 | ' 
00904                 | ' function edit() as string
00904                 | _edit
00904     1B CA 05 F6 | 	mov	COUNT_, #27
00908     E8 00 A0 FD | 	call	#pushregs_
0090c     00 A6 06 F6 | 	mov	local01, #0
00910     00 A8 06 F6 | 	mov	local02, #0
00914     00 AA 06 F6 | 	mov	local03, #0
00918     00 AC 06 F6 | 	mov	local04, #0
0091c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0091c                 | ' do
0091c                 | LR__0001
0091c     01 92 06 F6 | 	mov	arg01, #1
00920     24 24 B2 FD | 	call	#_hg010b_spin2_waitvbl
00924     8C 38 B2 FD | 	call	#_usbnew_spin2_get_key
00928     3D AF 02 F6 | 	mov	local05, result1
0092c                 | '   return hkbd_led_rep
0092c     13 00 00 FF 
00930     E0 77 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10208
00934     3B 7B C2 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00938     13 00 00 FF 
0093c     E0 77 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10208
00940     53 00 00 FF 
00944     38 65 06 F1 | 	add	objptr, ##42808
00948     32 7B 62 FC | 	wrlong	result1, objptr
0094c     53 00 00 FF 
00950     38 65 86 F1 | 	sub	objptr, ##42808
00954                 | ' if key>0 andalso key<4 andalso keyclick=1 then audio.play16(7,@atari2_spl,43,4096,1758,0,300) : audio.stop(7)
00954     01 AE 16 F2 | 	cmp	local05, #1 wc
00958     88 00 90 CD |  if_b	jmp	#LR__0002
0095c     04 AE 16 F2 | 	cmp	local05, #4 wc
00960     80 00 90 3D |  if_ae	jmp	#LR__0002
00964     51 00 00 FF 
00968     5C 65 06 F1 | 	add	objptr, ##41820
0096c     32 B1 02 FB | 	rdlong	local06, objptr
00970     51 00 00 FF 
00974     5C 65 86 F1 | 	sub	objptr, ##41820
00978     01 B0 0E F2 | 	cmp	local06, #1 wz
0097c     64 00 90 5D |  if_ne	jmp	#LR__0002
00980     35 95 02 F6 | 	mov	arg02, ptr__dat__
00984     04 00 00 FF 
00988     A4 94 06 F1 | 	add	arg02, ##2212
0098c     2B B2 06 F6 | 	mov	local07, #43
00990     0C B4 C6 F9 | 	decod	local08, #12
00994     03 00 00 FF 
00998     DE B6 06 F6 | 	mov	local09, ##1758
0099c     00 B8 06 F6 | 	mov	local10, #0
009a0     2C BB 06 F6 | 	mov	local11, #300
009a4     07 92 06 F6 | 	mov	arg01, #7
009a8     2B 96 06 F6 | 	mov	arg03, #43
009ac     0C 98 C6 F9 | 	decod	arg04, #12
009b0     03 00 00 FF 
009b4     DE 9A 06 F6 | 	mov	arg05, ##1758
009b8     00 9C 06 F6 | 	mov	arg06, #0
009bc     2C 9F 06 F6 | 	mov	arg07, #300
009c0     0B 00 00 FF 
009c4     CC 64 06 F1 | 	add	objptr, ##5836
009c8     4C 3C B2 FD | 	call	#_Audio2_003_spin2_play16
009cc     07 B0 06 F6 | 	mov	local06, #7
009d0                 | ' 
009d0                 | ' base2:=@channel0[0]+64*channel
009d0     32 BD 02 F6 | 	mov	local12, objptr
009d4                 | ' word[base2+32]:=0
009d4     EC BD 06 F1 | 	add	local12, #492
009d8     5E 01 58 FC | 	wrword	#0, local12
009dc     0B 00 00 FF 
009e0     CC 64 86 F1 | 	sub	objptr, ##5836
009e4                 | LR__0002
009e4                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
009e4     04 AE 16 F2 | 	cmp	local05, #4 wc
009e8     20 00 90 CD |  if_b	jmp	#LR__0003
009ec     00 00 40 FF 
009f0     00 AE 16 F2 | 	cmp	local05, ##-2147483648 wc
009f4     57 B1 02 C6 |  if_b	mov	local06, local05
009f8     58 B1 E2 C8 |  if_b	getbyte	local06, local06, #0
009fc     E0 B0 16 C2 |  if_b	cmp	local06, #224 wc
00a00     57 AB 02 C6 |  if_b	mov	local03, local05
00a04     01 A6 06 C6 |  if_b	mov	local01, #1
00a08     55 AD 02 C6 |  if_b	mov	local04, local03
00a0c                 | LR__0003
00a0c                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00a0c     00 00 40 FF 
00a10     01 AE 16 F2 | 	cmp	local05, ##-2147483647 wc
00a14     00 A8 06 36 |  if_ae	mov	local02, #0
00a18     00 A6 06 36 |  if_ae	mov	local01, #0
00a1c                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00a1c     00 AE 0E F2 | 	cmp	local05, #0 wz
00a20     01 A6 0E A2 |  if_e	cmp	local01, #1 wz
00a24     01 A8 06 A1 |  if_e	add	local02, #1
00a28                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00a28     00 00 40 FF 
00a2c     00 AE 16 F2 | 	cmp	local05, ##-2147483648 wc
00a30     19 A8 0E C2 |  if_b	cmp	local02, #25 wz
00a34     55 AD 02 86 |  if_c_and_z	mov	local04, local03
00a38     15 A8 06 86 |  if_c_and_z	mov	local02, #21
00a3c                 | ' 
00a3c                 | ' '' there is a key pressed and it needs to be processed
00a3c                 | ' 
00a3c                 | ' if key3<>0 then
00a3c     00 AC 0E F2 | 	cmp	local04, #0 wz
00a40     D8 FE 9F AD |  if_e	jmp	#LR__0001
00a44                 | '   if keyclick=1 then audio.play16(7,keyclick_spl,43,4096,spl_len,spl_len,0) ' make a click
00a44     51 00 00 FF 
00a48     5C 65 06 F1 | 	add	objptr, ##41820
00a4c     32 B1 02 FB | 	rdlong	local06, objptr
00a50     51 00 00 FF 
00a54     5C 65 86 F1 | 	sub	objptr, ##41820
00a58     01 B0 0E F2 | 	cmp	local06, #1 wz
00a5c     50 00 90 5D |  if_ne	jmp	#LR__0004
00a60     53 00 00 FF 
00a64     FC 64 06 F1 | 	add	objptr, ##42748
00a68     32 95 02 FB | 	rdlong	arg02, objptr
00a6c     2B B2 06 F6 | 	mov	local07, #43
00a70     0C B4 C6 F9 | 	decod	local08, #12
00a74     04 64 86 F1 | 	sub	objptr, #4
00a78     32 B9 02 FB | 	rdlong	local10, objptr
00a7c     5C B7 02 F6 | 	mov	local09, local10
00a80     00 BA 06 F6 | 	mov	local11, #0
00a84     07 92 06 F6 | 	mov	arg01, #7
00a88     2B 96 06 F6 | 	mov	arg03, #43
00a8c     0C 98 C6 F9 | 	decod	arg04, #12
00a90     5B 9B 02 F6 | 	mov	arg05, local09
00a94     5C 9D 02 F6 | 	mov	arg06, local10
00a98     00 9E 06 F6 | 	mov	arg07, #0
00a9c     48 00 00 FF 
00aa0     2C 64 86 F1 | 	sub	objptr, ##36908
00aa4     70 3B B2 FD | 	call	#_Audio2_003_spin2_play16
00aa8     0B 00 00 FF 
00aac     CC 64 86 F1 | 	sub	objptr, ##5836
00ab0                 | LR__0004
00ab0     56 93 02 F6 | 	mov	arg01, local04
00ab4     D0 08 B2 FD | 	call	#_scantochar
00ab8     3D BF 02 F6 | 	mov	local13, result1
00abc                 | '   if leds and 2 = 2 then 						' caps lock
00abc     53 00 00 FF 
00ac0     38 65 06 F1 | 	add	objptr, ##42808
00ac4     32 C1 02 FB | 	rdlong	local14, objptr
00ac8     53 00 00 FF 
00acc     38 65 86 F1 | 	sub	objptr, ##42808
00ad0     60 B1 0A F6 | 	mov	local06, local14 wz
00ad4     4C 00 90 AD |  if_e	jmp	#LR__0012
00ad8                 | '     if key4>96 andalso key4<123 then                 
00ad8     61 BE 16 F2 | 	cmp	local13, #97 wc
00adc     0C 00 90 CD |  if_b	jmp	#LR__0005
00ae0     7B BE 16 F2 | 	cmp	local13, #123 wc
00ae4     20 BE 86 C1 |  if_b	sub	local13, #32
00ae8     38 00 90 CD |  if_b	jmp	#LR__0011
00aec                 | LR__0005
00aec     41 BE 16 F2 | 	cmp	local13, #65 wc
00af0     0C 00 90 CD |  if_b	jmp	#LR__0006
00af4     5B BE 16 F2 | 	cmp	local13, #91 wc
00af8     20 BE 06 C1 |  if_b	add	local13, #32
00afc     24 00 90 CD |  if_b	jmp	#LR__0010
00b00                 | LR__0006
00b00     17 BE 16 F2 | 	cmp	local13, #23 wc
00b04     0C 00 90 CD |  if_b	jmp	#LR__0007
00b08     20 BE 16 F2 | 	cmp	local13, #32 wc
00b0c     09 BE 86 C1 |  if_b	sub	local13, #9
00b10     10 00 90 CD |  if_b	jmp	#LR__0009
00b14                 | LR__0007
00b14     0E BE 16 F2 | 	cmp	local13, #14 wc
00b18     08 00 90 CD |  if_b	jmp	#LR__0008
00b1c     17 BE 16 F2 | 	cmp	local13, #23 wc
00b20     27 BE 06 C1 |  if_b	add	local13, #39
00b24                 | LR__0008
00b24                 | LR__0009
00b24                 | LR__0010
00b24                 | LR__0011
00b24                 | LR__0012
00b24                 | '  
00b24                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00b24     01 BE 16 F2 | 	cmp	local13, #1 wc
00b28     BC 01 90 CD |  if_b	jmp	#LR__0017
00b2c     7F BE 16 F2 | 	cmp	local13, #127 wc
00b30     3C 64 06 C1 |  if_b	add	objptr, #60
00b34     32 B1 E2 CA |  if_b	rdword	local06, objptr
00b38     3C 64 86 C1 |  if_b	sub	objptr, #60
00b3c     FE B0 16 C2 |  if_b	cmp	local06, #254 wc
00b40     A4 01 90 3D |  if_ae	jmp	#LR__0017
00b44                 | '     if do_insert then							' move the characters right
00b44     53 00 00 FF 
00b48     20 65 06 F1 | 	add	objptr, ##42784
00b4c     32 B1 0A FB | 	rdlong	local06, objptr wz
00b50     53 00 00 FF 
00b54     20 65 86 F1 | 	sub	objptr, ##42784
00b58     84 01 90 AD |  if_e	jmp	#LR__0016
00b5c                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00b5c     3E 64 06 F1 | 	add	objptr, #62
00b60     32 B3 C2 FA | 	rdbyte	local07, objptr
00b64     59 B5 E2 F8 | 	getbyte	local08, local07, #0
00b68     07 B4 66 F0 | 	shl	local08, #7
00b6c     3A 64 86 F1 | 	sub	objptr, #58
00b70     32 C3 02 FB | 	rdlong	local15, objptr
00b74     61 C5 02 F6 | 	mov	local16, local15
00b78     5A C5 02 F1 | 	add	local16, local08
00b7c     7F C4 06 F1 | 	add	local16, #127
00b80     59 B3 E2 F8 | 	getbyte	local07, local07, #0
00b84     07 B2 66 F0 | 	shl	local07, #7
00b88     59 C3 02 F1 | 	add	local15, local07
00b8c     38 64 06 F1 | 	add	objptr, #56
00b90     32 B7 E2 FA | 	rdword	local09, objptr
00b94     3C 64 86 F1 | 	sub	objptr, #60
00b98     5B BB 52 F6 | 	abs	local11, local09 wc
00b9c     01 BA 46 F0 | 	shr	local11, #1
00ba0     5D C3 82 F3 | 	sumc	local15, local11
00ba4     01 C2 06 F1 | 	add	local15, #1
00ba8                 | LR__0013
00ba8     62 C7 02 F6 | 	mov	local17, local16
00bac     01 C6 86 F1 | 	sub	local17, #1
00bb0     63 93 02 F6 | 	mov	arg01, local17
00bb4     F8 06 B2 FD | 	call	#_pspeek
00bb8     3D C9 02 F6 | 	mov	local18, result1
00bbc     64 CB E2 F8 | 	getbyte	local19, local18, #0
00bc0     65 CD 02 F6 | 	mov	local20, local19
00bc4     62 93 02 F6 | 	mov	arg01, local16
00bc8     66 95 02 F6 | 	mov	arg02, local20
00bcc     98 06 B2 FD | 	call	#_pspoke
00bd0     01 C4 86 F1 | 	sub	local16, #1
00bd4     61 C5 52 F2 | 	cmps	local16, local15 wc
00bd8     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00bdc     53 00 00 FF 
00be0     40 65 06 F1 | 	add	objptr, ##42816
00be4     32 01 68 FC | 	wrlong	#0, objptr
00be8     53 00 00 FF 
00bec     02 65 86 F1 | 	sub	objptr, ##42754
00bf0     32 B3 C2 FA | 	rdbyte	local07, objptr
00bf4     59 B5 E2 F8 | 	getbyte	local08, local07, #0
00bf8     07 B4 66 F0 | 	shl	local08, #7
00bfc     3A 64 86 F1 | 	sub	objptr, #58
00c00     32 B7 02 FB | 	rdlong	local09, objptr
00c04     5B C5 02 F6 | 	mov	local16, local09
00c08     5A C5 02 F1 | 	add	local16, local08
00c0c     38 64 06 F1 | 	add	objptr, #56
00c10     32 BB E2 FA | 	rdword	local11, objptr
00c14     5D B9 32 F9 | 	getword	local10, local11, #0
00c18     5C CF 52 F6 | 	abs	local21, local10 wc
00c1c     01 CE 46 F0 | 	shr	local21, #1
00c20     67 CF 82 F6 | 	negc	local21, local21
00c24     67 C5 02 F1 | 	add	local16, local21
00c28     59 B3 E2 F8 | 	getbyte	local07, local07, #0
00c2c     07 B2 66 F0 | 	shl	local07, #7
00c30     5B B5 02 F6 | 	mov	local08, local09
00c34     3C 64 86 F1 | 	sub	objptr, #60
00c38     5A D1 02 F6 | 	mov	local22, local08
00c3c     59 D1 02 F1 | 	add	local22, local07
00c40     80 D0 06 F1 | 	add	local22, #128
00c44                 | LR__0014
00c44     68 C5 52 F2 | 	cmps	local16, local22 wc
00c48     94 00 90 3D |  if_ae	jmp	#LR__0015
00c4c     3C 64 06 F1 | 	add	objptr, #60
00c50     32 B1 E2 FA | 	rdword	local06, objptr
00c54     53 00 00 FF 
00c58     04 65 06 F1 | 	add	objptr, ##42756
00c5c     32 B5 02 FB | 	rdlong	local08, objptr
00c60     01 B4 66 F0 | 	shl	local08, #1
00c64     5A B1 02 F1 | 	add	local06, local08
00c68     53 00 00 FF 
00c6c     02 65 86 F1 | 	sub	objptr, ##42754
00c70     32 C1 C2 FA | 	rdbyte	local14, objptr
00c74     3E 64 86 F1 | 	sub	objptr, #62
00c78     04 C0 66 F0 | 	shl	local14, #4
00c7c     04 C0 06 F1 | 	add	local14, #4
00c80     62 93 02 F6 | 	mov	arg01, local16
00c84     28 06 B2 FD | 	call	#_pspeek
00c88     3D B3 E2 F8 | 	getbyte	local07, result1, #0
00c8c     41 64 06 F1 | 	add	objptr, #65
00c90     32 B5 02 FB | 	rdlong	local08, objptr
00c94     04 64 06 F1 | 	add	objptr, #4
00c98     32 B9 02 FB | 	rdlong	local10, objptr
00c9c     45 64 86 F1 | 	sub	objptr, #69
00ca0     5C B7 02 F6 | 	mov	local09, local10
00ca4     58 93 02 F6 | 	mov	arg01, local06
00ca8     60 95 02 F6 | 	mov	arg02, local14
00cac     59 97 02 F6 | 	mov	arg03, local07
00cb0     5A 99 02 F6 | 	mov	arg04, local08
00cb4     5B 9B 02 F6 | 	mov	arg05, local09
00cb8     40 1E B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00cbc     53 00 00 FF 
00cc0     40 65 06 F1 | 	add	objptr, ##42816
00cc4     32 B1 02 FB | 	rdlong	local06, objptr
00cc8     01 B0 06 F1 | 	add	local06, #1
00ccc     32 B1 62 FC | 	wrlong	local06, objptr
00cd0     53 00 00 FF 
00cd4     40 65 86 F1 | 	sub	objptr, ##42816
00cd8     01 C4 06 F1 | 	add	local16, #1
00cdc     64 FF 9F FD | 	jmp	#LR__0014
00ce0                 | LR__0015
00ce0                 | LR__0016
00ce0     5F 93 02 F6 | 	mov	arg01, local13
00ce4     C8 21 B2 FD | 	call	#_hg010b_spin2_putchar
00ce8                 | LR__0017
00ce8                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then
00ce8     01 BE 16 F2 | 	cmp	local13, #1 wc
00cec     9C 00 90 CD |  if_b	jmp	#LR__0018
00cf0     7F BE 16 F2 | 	cmp	local13, #127 wc
00cf4     94 00 90 3D |  if_ae	jmp	#LR__0018
00cf8     3C 64 06 F1 | 	add	objptr, #60
00cfc     32 B1 E2 FA | 	rdword	local06, objptr
00d00     3C 64 86 F1 | 	sub	objptr, #60
00d04     FE B0 0E F2 | 	cmp	local06, #254 wz
00d08     51 00 00 AF 
00d0c     5C 65 06 A1 |  if_e	add	objptr, ##41820
00d10     32 B5 02 AB |  if_e	rdlong	local08, objptr
00d14     51 00 00 AF 
00d18     5C 65 86 A1 |  if_e	sub	objptr, ##41820
00d1c     5A B3 02 A6 |  if_e	mov	local07, local08
00d20     01 B2 0E A2 |  if_e	cmp	local07, #1 wz
00d24     64 00 90 5D |  if_ne	jmp	#LR__0018
00d28     35 95 02 F6 | 	mov	arg02, ptr__dat__
00d2c     04 00 00 FF 
00d30     A4 94 06 F1 | 	add	arg02, ##2212
00d34     2B B2 06 F6 | 	mov	local07, #43
00d38     0C B4 C6 F9 | 	decod	local08, #12
00d3c     03 00 00 FF 
00d40     DE B6 06 F6 | 	mov	local09, ##1758
00d44     00 B8 06 F6 | 	mov	local10, #0
00d48     2C BB 06 F6 | 	mov	local11, #300
00d4c     07 92 06 F6 | 	mov	arg01, #7
00d50     2B 96 06 F6 | 	mov	arg03, #43
00d54     0C 98 C6 F9 | 	decod	arg04, #12
00d58     03 00 00 FF 
00d5c     DE 9A 06 F6 | 	mov	arg05, ##1758
00d60     00 9C 06 F6 | 	mov	arg06, #0
00d64     2C 9F 06 F6 | 	mov	arg07, #300
00d68     0B 00 00 FF 
00d6c     CC 64 06 F1 | 	add	objptr, ##5836
00d70     A4 38 B2 FD | 	call	#_Audio2_003_spin2_play16
00d74                 | ' 
00d74                 | ' base2:=@channel0[0]+64*channel
00d74     32 BD 02 F6 | 	mov	local12, objptr
00d78     C0 93 06 F6 | 	mov	arg01, #448
00d7c                 | ' word[base2+32]:=0
00d7c     EC BD 06 F1 | 	add	local12, #492
00d80     5E 01 58 FC | 	wrword	#0, local12
00d84     0B 00 00 FF 
00d88     CC 64 86 F1 | 	sub	objptr, ##5836
00d8c                 | LR__0018
00d8c                 | '     
00d8c                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00d8c     8D BE 0E F2 | 	cmp	local13, #141 wz
00d90     B0 00 90 5D |  if_ne	jmp	#LR__0022
00d94     92 01 00 FF 
00d98     22 D3 06 F6 | 	mov	local23, ##@LR__5487
00d9c                 | '     line$="" 
00d9c                 | '     for i=editor_spaces to 127
00d9c     38 00 00 FF 
00da0     54 64 06 F1 | 	add	objptr, ##28756
00da4     32 C5 02 FB | 	rdlong	local16, objptr
00da8     38 00 00 FF 
00dac     54 64 86 F1 | 	sub	objptr, ##28756
00db0                 | LR__0019
00db0     80 C4 56 F2 | 	cmps	local16, #128 wc
00db4     44 00 90 3D |  if_ae	jmp	#LR__0020
00db8     3E 64 06 F1 | 	add	objptr, #62
00dbc     32 BB C2 FA | 	rdbyte	local11, objptr
00dc0     07 BA 66 F0 | 	shl	local11, #7
00dc4     3A 64 86 F1 | 	sub	objptr, #58
00dc8     32 93 02 FB | 	rdlong	arg01, objptr
00dcc     04 64 86 F1 | 	sub	objptr, #4
00dd0     5D 93 02 F1 | 	add	arg01, local11
00dd4     62 93 02 F1 | 	add	arg01, local16
00dd8     D4 04 B2 FD | 	call	#_pspeek
00ddc     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
00de0     40 56 B2 FD | 	call	#__system__Chr_S
00de4     3D 95 02 F6 | 	mov	arg02, result1
00de8     69 93 02 F6 | 	mov	arg01, local23
00dec     24 3C B2 FD | 	call	#__system___string_concat
00df0     3D D3 02 F6 | 	mov	local23, result1
00df4     01 C4 06 F1 | 	add	local16, #1
00df8     B4 FF 9F FD | 	jmp	#LR__0019
00dfc                 | LR__0020
00dfc                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00dfc     53 00 00 FF 
00e00     20 65 06 F1 | 	add	objptr, ##42784
00e04     32 B1 0A FB | 	rdlong	local06, objptr wz
00e08     53 00 00 FF 
00e0c     20 65 86 F1 | 	sub	objptr, ##42784
00e10     24 00 90 AD |  if_e	jmp	#LR__0021
00e14     3E 64 06 F1 | 	add	objptr, #62
00e18     32 B3 C2 FA | 	rdbyte	local07, objptr
00e1c     3E 64 86 F1 | 	sub	objptr, #62
00e20     23 B2 16 F2 | 	cmp	local07, #35 wc
00e24     3E 64 06 C1 |  if_b	add	objptr, #62
00e28     32 93 C2 CA |  if_b	rdbyte	arg01, objptr
00e2c     3E 64 86 C1 |  if_b	sub	objptr, #62
00e30     01 92 06 C1 |  if_b	add	arg01, #1
00e34     00 26 B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00e38                 | LR__0021
00e38     00 28 B2 FD | 	call	#_hg010b_spin2_crlf
00e3c                 | '     v.crlf() 
00e3c                 | '     return  line$
00e3c     69 7B 02 F6 | 	mov	result1, local23
00e40     AC 07 90 FD | 	jmp	#LR__0049
00e44                 | LR__0022
00e44     56 BF E2 F8 | 	getbyte	local13, local04, #0
00e48                 | '   
00e48                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then audio.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): audio.stop(0)  	' tab
00e48     2B BE 0E F2 | 	cmp	local13, #43 wz
00e4c     B0 00 90 5D |  if_ne	jmp	#LR__0023
00e50     3C 64 06 F1 | 	add	objptr, #60
00e54     32 B1 E2 FA | 	rdword	local06, objptr
00e58     3C 64 86 F1 | 	sub	objptr, #60
00e5c     F0 B0 16 F2 | 	cmp	local06, #240 wc
00e60     9C 00 90 CD |  if_b	jmp	#LR__0023
00e64     51 00 00 FF 
00e68     5C 65 06 F1 | 	add	objptr, ##41820
00e6c     32 B5 02 FB | 	rdlong	local08, objptr
00e70     51 00 00 FF 
00e74     5C 65 86 F1 | 	sub	objptr, ##41820
00e78     5A B3 02 F6 | 	mov	local07, local08
00e7c     01 B2 0E F2 | 	cmp	local07, #1 wz
00e80     7C 00 90 5D |  if_ne	jmp	#LR__0023
00e84     35 95 02 F6 | 	mov	arg02, ptr__dat__
00e88     04 00 00 FF 
00e8c     A4 94 06 F1 | 	add	arg02, ##2212
00e90     56 00 00 FF 
00e94     44 B2 06 F6 | 	mov	local07, ##44100
00e98     0E B4 C6 F9 | 	decod	local08, #14
00e9c     00 B6 06 F6 | 	mov	local09, #0
00ea0     03 00 00 FF 
00ea4     DE B8 06 F6 | 	mov	local10, ##1758
00ea8     00 92 06 F6 | 	mov	arg01, #0
00eac     56 00 00 FF 
00eb0     44 96 06 F6 | 	mov	arg03, ##44100
00eb4     0E 98 C6 F9 | 	decod	arg04, #14
00eb8     00 9A 06 F6 | 	mov	arg05, #0
00ebc     03 00 00 FF 
00ec0     DE 9C 06 F6 | 	mov	arg06, ##1758
00ec4     0B 00 00 FF 
00ec8     CC 64 06 F1 | 	add	objptr, ##5836
00ecc     38 36 B2 FD | 	call	#_Audio2_003_spin2_play
00ed0     0B 00 00 FF 
00ed4     CC 64 86 F1 | 	sub	objptr, ##5836
00ed8     2C 93 06 F6 | 	mov	arg01, #300
00edc     CC 3D B2 FD | 	call	#__system___waitms
00ee0     0B 00 00 FF 
00ee4     CC 64 06 F1 | 	add	objptr, ##5836
00ee8                 | ' 
00ee8                 | ' base2:=@channel0[0]+64*channel
00ee8     32 BD 02 F6 | 	mov	local12, objptr
00eec     00 92 06 F6 | 	mov	arg01, #0
00ef0                 | ' word[base2+32]:=0
00ef0     2C BC 06 F1 | 	add	local12, #44
00ef4     5E 01 58 FC | 	wrword	#0, local12
00ef8     0B 00 00 FF 
00efc     CC 64 86 F1 | 	sub	objptr, ##5836
00f00                 | LR__0023
00f00                 | '   if key4=77 then i=127 : do: 															' end
00f00     4D BE 0E F2 | 	cmp	local13, #77 wz
00f04     90 00 90 5D |  if_ne	jmp	#LR__0028
00f08     7F C4 06 F6 | 	mov	local16, #127
00f0c                 | LR__0024
00f0c                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00f0c     3E 64 06 F1 | 	add	objptr, #62
00f10     32 B7 C2 FA | 	rdbyte	local09, objptr
00f14     5B B5 E2 F8 | 	getbyte	local08, local09, #0
00f18     5A B9 02 F6 | 	mov	local10, local08
00f1c     07 B8 66 F0 | 	shl	local10, #7
00f20     3A 64 86 F1 | 	sub	objptr, #58
00f24     32 BB 02 FB | 	rdlong	local11, objptr
00f28     04 64 86 F1 | 	sub	objptr, #4
00f2c     5D B3 02 F6 | 	mov	local07, local11
00f30     5C B3 02 F1 | 	add	local07, local10
00f34     62 B3 02 F1 | 	add	local07, local16
00f38     59 93 02 F6 | 	mov	arg01, local07
00f3c     70 03 B2 FD | 	call	#_pspeek
00f40     3D B1 E2 F8 | 	getbyte	local06, result1, #0
00f44     20 B0 0E F2 | 	cmp	local06, #32 wz
00f48     2C 00 90 AD |  if_e	jmp	#LR__0026
00f4c                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00f4c     7F C4 56 F2 | 	cmps	local16, #127 wc
00f50     18 00 90 3D |  if_ae	jmp	#LR__0025
00f54     62 B3 02 F6 | 	mov	local07, local16
00f58     01 B2 66 F0 | 	shl	local07, #1
00f5c     59 93 02 F6 | 	mov	arg01, local07
00f60     02 92 06 F1 | 	add	arg01, #2
00f64     80 1D B2 FD | 	call	#_hg010b_spin2_setcursorx
00f68     2C 00 90 FD | 	jmp	#LR__0027
00f6c                 | LR__0025
00f6c     FE 92 06 F6 | 	mov	arg01, #254
00f70     74 1D B2 FD | 	call	#_hg010b_spin2_setcursorx
00f74     20 00 90 FD | 	jmp	#LR__0027
00f78                 | LR__0026
00f78     01 C4 86 F1 | 	sub	local16, #1
00f7c     38 00 00 FF 
00f80     54 64 06 F1 | 	add	objptr, ##28756
00f84     32 B1 02 FB | 	rdlong	local06, objptr
00f88     38 00 00 FF 
00f8c     54 64 86 F1 | 	sub	objptr, ##28756
00f90     58 C5 0A F2 | 	cmp	local16, local06 wz
00f94     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00f98                 | LR__0027
00f98                 | LR__0028
00f98                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00f98     38 00 00 FF 
00f9c     54 64 06 F1 | 	add	objptr, ##28756
00fa0     32 C1 02 FB | 	rdlong	local14, objptr
00fa4     38 00 00 FF 
00fa8     54 64 86 F1 | 	sub	objptr, ##28756
00fac     60 B1 02 F6 | 	mov	local06, local14
00fb0     58 C5 0A F2 | 	cmp	local16, local06 wz
00fb4     2C 00 90 5D |  if_ne	jmp	#LR__0029
00fb8     38 00 00 FF 
00fbc     54 64 06 F1 | 	add	objptr, ##28756
00fc0     32 B5 02 FB | 	rdlong	local08, objptr
00fc4     38 00 00 FF 
00fc8     54 64 86 F1 | 	sub	objptr, ##28756
00fcc     5A B3 02 F6 | 	mov	local07, local08
00fd0     59 C1 02 F6 | 	mov	local14, local07
00fd4     01 C0 66 F0 | 	shl	local14, #1
00fd8     60 B1 02 F6 | 	mov	local06, local14
00fdc     58 93 02 F6 | 	mov	arg01, local06
00fe0     04 1D B2 FD | 	call	#_hg010b_spin2_setcursorx
00fe4                 | LR__0029
00fe4                 | '     
00fe4                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00fe4     4A BE 0E F2 | 	cmp	local13, #74 wz
00fe8     2C 00 90 5D |  if_ne	jmp	#LR__0030
00fec     38 00 00 FF 
00ff0     54 64 06 F1 | 	add	objptr, ##28756
00ff4     32 B5 02 FB | 	rdlong	local08, objptr
00ff8     38 00 00 FF 
00ffc     54 64 86 F1 | 	sub	objptr, ##28756
01000     5A B3 02 F6 | 	mov	local07, local08
01004     59 C1 02 F6 | 	mov	local14, local07
01008     01 C0 66 F0 | 	shl	local14, #1
0100c     60 B1 02 F6 | 	mov	local06, local14
01010     58 93 02 F6 | 	mov	arg01, local06
01014     D0 1C B2 FD | 	call	#_hg010b_spin2_setcursorx
01018                 | LR__0030
01018                 | '   if key4=75 then v.setcursory(0)														' pgup
01018     4B BE 0E F2 | 	cmp	local13, #75 wz
0101c     00 B0 06 A6 |  if_e	mov	local06, #0
01020     00 92 06 A6 |  if_e	mov	arg01, #0
01024     F0 1C B2 AD |  if_e	call	#_hg010b_spin2_setcursory
01028                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
01028     4E BE 0E F2 | 	cmp	local13, #78 wz
0102c     24 B0 06 A6 |  if_e	mov	local06, #36
01030     24 92 06 A6 |  if_e	mov	arg01, #36
01034     E0 1C B2 AD |  if_e	call	#_hg010b_spin2_setcursory
01038                 | '   if key4=76 then 																' del
01038     4C BE 0E F2 | 	cmp	local13, #76 wz
0103c     AC 01 90 5D |  if_ne	jmp	#LR__0035
01040                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01040     3E 64 06 F1 | 	add	objptr, #62
01044     32 B3 C2 FA | 	rdbyte	local07, objptr
01048     59 B5 E2 F8 | 	getbyte	local08, local07, #0
0104c     07 B4 66 F0 | 	shl	local08, #7
01050     3A 64 86 F1 | 	sub	objptr, #58
01054     32 D5 02 FB | 	rdlong	local24, objptr
01058     6A C5 02 F6 | 	mov	local16, local24
0105c     5A C5 02 F1 | 	add	local16, local08
01060     38 64 06 F1 | 	add	objptr, #56
01064     32 B9 E2 FA | 	rdword	local10, objptr
01068     5C CF 52 F6 | 	abs	local21, local10 wc
0106c     01 CE 46 F0 | 	shr	local21, #1
01070     67 C5 82 F3 | 	sumc	local16, local21
01074     59 B3 E2 F8 | 	getbyte	local07, local07, #0
01078     07 B2 66 F0 | 	shl	local07, #7
0107c     3C 64 86 F1 | 	sub	objptr, #60
01080     59 D5 02 F1 | 	add	local24, local07
01084     80 D4 06 F1 | 	add	local24, #128
01088                 | LR__0031
01088     6A C5 52 F2 | 	cmps	local16, local24 wc
0108c     20 00 90 3D |  if_ae	jmp	#LR__0032
01090     62 93 02 F6 | 	mov	arg01, local16
01094     01 92 06 F1 | 	add	arg01, #1
01098     14 02 B2 FD | 	call	#_pspeek
0109c     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
010a0     62 93 02 F6 | 	mov	arg01, local16
010a4     C0 01 B2 FD | 	call	#_pspoke
010a8     01 C4 06 F1 | 	add	local16, #1
010ac     D8 FF 9F FD | 	jmp	#LR__0031
010b0                 | LR__0032
010b0     3E 64 06 F1 | 	add	objptr, #62
010b4     32 B7 C2 FA | 	rdbyte	local09, objptr
010b8     07 B6 66 F0 | 	shl	local09, #7
010bc     3A 64 86 F1 | 	sub	objptr, #58
010c0     32 93 02 FB | 	rdlong	arg01, objptr
010c4     04 64 86 F1 | 	sub	objptr, #4
010c8     5B 93 02 F1 | 	add	arg01, local09
010cc     7F 92 06 F1 | 	add	arg01, #127
010d0     20 94 06 F6 | 	mov	arg02, #32
010d4     90 01 B2 FD | 	call	#_pspoke
010d8     53 00 00 FF 
010dc     40 65 06 F1 | 	add	objptr, ##42816
010e0     32 01 68 FC | 	wrlong	#0, objptr
010e4     53 00 00 FF 
010e8     02 65 86 F1 | 	sub	objptr, ##42754
010ec     32 C1 C2 FA | 	rdbyte	local14, objptr
010f0     60 B5 E2 F8 | 	getbyte	local08, local14, #0
010f4     07 B4 66 F0 | 	shl	local08, #7
010f8     3A 64 86 F1 | 	sub	objptr, #58
010fc     32 B7 02 FB | 	rdlong	local09, objptr
01100     5B C5 02 F6 | 	mov	local16, local09
01104     5A C5 02 F1 | 	add	local16, local08
01108     38 64 06 F1 | 	add	objptr, #56
0110c     32 BB E2 FA | 	rdword	local11, objptr
01110     5D B9 32 F9 | 	getword	local10, local11, #0
01114     5C CF 52 F6 | 	abs	local21, local10 wc
01118     01 CE 46 F0 | 	shr	local21, #1
0111c     67 CF 82 F6 | 	negc	local21, local21
01120     67 C5 02 F1 | 	add	local16, local21
01124     60 B1 E2 F8 | 	getbyte	local06, local14, #0
01128     58 B3 02 F6 | 	mov	local07, local06
0112c     07 B2 66 F0 | 	shl	local07, #7
01130     5B B5 02 F6 | 	mov	local08, local09
01134     3C 64 86 F1 | 	sub	objptr, #60
01138     5A D7 02 F6 | 	mov	local25, local08
0113c     59 D7 02 F1 | 	add	local25, local07
01140     80 D6 06 F1 | 	add	local25, #128
01144                 | LR__0033
01144     6B C5 52 F2 | 	cmps	local16, local25 wc
01148     A0 00 90 3D |  if_ae	jmp	#LR__0034
0114c     3C 64 06 F1 | 	add	objptr, #60
01150     32 B1 E2 FA | 	rdword	local06, objptr
01154     53 00 00 FF 
01158     04 65 06 F1 | 	add	objptr, ##42756
0115c     32 B5 02 FB | 	rdlong	local08, objptr
01160     01 B4 66 F0 | 	shl	local08, #1
01164     5A B1 02 F1 | 	add	local06, local08
01168     53 00 00 FF 
0116c     02 65 86 F1 | 	sub	objptr, ##42754
01170     32 C1 C2 FA | 	rdbyte	local14, objptr
01174     3E 64 86 F1 | 	sub	objptr, #62
01178     04 C0 66 F0 | 	shl	local14, #4
0117c     04 C0 06 F1 | 	add	local14, #4
01180     62 93 02 F6 | 	mov	arg01, local16
01184     28 01 B2 FD | 	call	#_pspeek
01188     3D B3 E2 F8 | 	getbyte	local07, result1, #0
0118c     41 64 06 F1 | 	add	objptr, #65
01190     32 B5 02 FB | 	rdlong	local08, objptr
01194     04 64 06 F1 | 	add	objptr, #4
01198     32 B9 02 FB | 	rdlong	local10, objptr
0119c     45 64 86 F1 | 	sub	objptr, #69
011a0     5C B7 02 F6 | 	mov	local09, local10
011a4     58 93 02 F6 | 	mov	arg01, local06
011a8     60 95 02 F6 | 	mov	arg02, local14
011ac     59 97 02 F6 | 	mov	arg03, local07
011b0     5A 99 02 F6 | 	mov	arg04, local08
011b4     5B 9B 02 F6 | 	mov	arg05, local09
011b8     40 19 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
011bc     53 00 00 FF 
011c0     40 65 06 F1 | 	add	objptr, ##42816
011c4     32 B1 02 FB | 	rdlong	local06, objptr
011c8     01 B0 06 F1 | 	add	local06, #1
011cc     32 B1 62 FC | 	wrlong	local06, objptr
011d0     53 00 00 FF 
011d4     40 65 86 F1 | 	sub	objptr, ##42816
011d8     62 B1 02 F6 | 	mov	local06, local16
011dc     62 C1 02 F6 | 	mov	local14, local16
011e0     01 C0 06 F1 | 	add	local14, #1
011e4     60 C5 02 F6 | 	mov	local16, local14
011e8     58 FF 9F FD | 	jmp	#LR__0033
011ec                 | LR__0034
011ec                 | LR__0035
011ec                 | ' 
011ec                 | '   if key4 = 42 then  'backspace
011ec     2A BE 0E F2 | 	cmp	local13, #42 wz
011f0     14 02 90 5D |  if_ne	jmp	#LR__0041
011f4                 | '     if v.cursor_x>editor_spaces*2 then 
011f4     3C 64 06 F1 | 	add	objptr, #60
011f8     32 C1 E2 FA | 	rdword	local14, objptr
011fc     60 B1 32 F9 | 	getword	local06, local14, #0
01200     38 00 00 FF 
01204     18 64 06 F1 | 	add	objptr, ##28696
01208     32 B7 02 FB | 	rdlong	local09, objptr
0120c     38 00 00 FF 
01210     54 64 86 F1 | 	sub	objptr, ##28756
01214     5B B5 02 F6 | 	mov	local08, local09
01218     5A B3 02 F6 | 	mov	local07, local08
0121c     01 B2 66 F0 | 	shl	local07, #1
01220     59 B1 5A F2 | 	cmps	local06, local07 wcz
01224     C8 01 90 ED |  if_be	jmp	#LR__0039
01228     3C 64 06 F1 | 	add	objptr, #60
0122c     32 93 E2 FA | 	rdword	arg01, objptr
01230     02 92 86 F1 | 	sub	arg01, #2
01234     02 64 06 F1 | 	add	objptr, #2
01238     32 95 C2 FA | 	rdbyte	arg02, objptr
0123c     3E 64 86 F1 | 	sub	objptr, #62
01240     58 1A B2 FD | 	call	#_hg010b_spin2_setcursorpos
01244                 | '       position v.cursor_x-2,v.cursor_y
01244                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01244     3E 64 06 F1 | 	add	objptr, #62
01248     32 B3 C2 FA | 	rdbyte	local07, objptr
0124c     59 B5 E2 F8 | 	getbyte	local08, local07, #0
01250     07 B4 66 F0 | 	shl	local08, #7
01254     3A 64 86 F1 | 	sub	objptr, #58
01258     32 D9 02 FB | 	rdlong	local26, objptr
0125c     6C C5 02 F6 | 	mov	local16, local26
01260     5A C5 02 F1 | 	add	local16, local08
01264     38 64 06 F1 | 	add	objptr, #56
01268     32 B9 E2 FA | 	rdword	local10, objptr
0126c     5C CF 52 F6 | 	abs	local21, local10 wc
01270     01 CE 46 F0 | 	shr	local21, #1
01274     67 C5 82 F3 | 	sumc	local16, local21
01278     59 B3 E2 F8 | 	getbyte	local07, local07, #0
0127c     07 B2 66 F0 | 	shl	local07, #7
01280     3C 64 86 F1 | 	sub	objptr, #60
01284     59 D9 02 F1 | 	add	local26, local07
01288     80 D8 06 F1 | 	add	local26, #128
0128c                 | LR__0036
0128c     6C C5 52 F2 | 	cmps	local16, local26 wc
01290     20 00 90 3D |  if_ae	jmp	#LR__0037
01294     62 93 02 F6 | 	mov	arg01, local16
01298     01 92 06 F1 | 	add	arg01, #1
0129c     10 00 B2 FD | 	call	#_pspeek
012a0     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
012a4     62 93 02 F6 | 	mov	arg01, local16
012a8     BC FF B1 FD | 	call	#_pspoke
012ac     01 C4 06 F1 | 	add	local16, #1
012b0     D8 FF 9F FD | 	jmp	#LR__0036
012b4                 | LR__0037
012b4     3E 64 06 F1 | 	add	objptr, #62
012b8     32 B7 C2 FA | 	rdbyte	local09, objptr
012bc     07 B6 66 F0 | 	shl	local09, #7
012c0     3A 64 86 F1 | 	sub	objptr, #58
012c4     32 93 02 FB | 	rdlong	arg01, objptr
012c8     04 64 86 F1 | 	sub	objptr, #4
012cc     5B 93 02 F1 | 	add	arg01, local09
012d0     7F 92 06 F1 | 	add	arg01, #127
012d4     20 94 06 F6 | 	mov	arg02, #32
012d8     8C FF B1 FD | 	call	#_pspoke
012dc     53 00 00 FF 
012e0     40 65 06 F1 | 	add	objptr, ##42816
012e4     32 01 68 FC | 	wrlong	#0, objptr
012e8     53 00 00 FF 
012ec     02 65 86 F1 | 	sub	objptr, ##42754
012f0     32 C1 C2 FA | 	rdbyte	local14, objptr
012f4     60 B5 E2 F8 | 	getbyte	local08, local14, #0
012f8     07 B4 66 F0 | 	shl	local08, #7
012fc     3A 64 86 F1 | 	sub	objptr, #58
01300     32 B7 02 FB | 	rdlong	local09, objptr
01304     5B C5 02 F6 | 	mov	local16, local09
01308     5A C5 02 F1 | 	add	local16, local08
0130c     38 64 06 F1 | 	add	objptr, #56
01310     32 BB E2 FA | 	rdword	local11, objptr
01314     5D B9 32 F9 | 	getword	local10, local11, #0
01318     5C CF 52 F6 | 	abs	local21, local10 wc
0131c     01 CE 46 F0 | 	shr	local21, #1
01320     67 CF 82 F6 | 	negc	local21, local21
01324     67 C5 02 F1 | 	add	local16, local21
01328     60 B1 E2 F8 | 	getbyte	local06, local14, #0
0132c     58 B3 02 F6 | 	mov	local07, local06
01330     07 B2 66 F0 | 	shl	local07, #7
01334     5B B5 02 F6 | 	mov	local08, local09
01338     3C 64 86 F1 | 	sub	objptr, #60
0133c     5A DB 02 F6 | 	mov	local27, local08
01340     59 DB 02 F1 | 	add	local27, local07
01344     80 DA 06 F1 | 	add	local27, #128
01348                 | LR__0038
01348     6D C5 52 F2 | 	cmps	local16, local27 wc
0134c     B8 00 90 3D |  if_ae	jmp	#LR__0040
01350     3C 64 06 F1 | 	add	objptr, #60
01354     32 B1 E2 FA | 	rdword	local06, objptr
01358     53 00 00 FF 
0135c     04 65 06 F1 | 	add	objptr, ##42756
01360     32 B5 02 FB | 	rdlong	local08, objptr
01364     01 B4 66 F0 | 	shl	local08, #1
01368     5A B1 02 F1 | 	add	local06, local08
0136c     53 00 00 FF 
01370     02 65 86 F1 | 	sub	objptr, ##42754
01374     32 C1 C2 FA | 	rdbyte	local14, objptr
01378     3E 64 86 F1 | 	sub	objptr, #62
0137c     04 C0 66 F0 | 	shl	local14, #4
01380     04 C0 06 F1 | 	add	local14, #4
01384     62 93 02 F6 | 	mov	arg01, local16
01388     24 FF B1 FD | 	call	#_pspeek
0138c     3D B3 E2 F8 | 	getbyte	local07, result1, #0
01390     41 64 06 F1 | 	add	objptr, #65
01394     32 B5 02 FB | 	rdlong	local08, objptr
01398     04 64 06 F1 | 	add	objptr, #4
0139c     32 B9 02 FB | 	rdlong	local10, objptr
013a0     45 64 86 F1 | 	sub	objptr, #69
013a4     5C B7 02 F6 | 	mov	local09, local10
013a8     58 93 02 F6 | 	mov	arg01, local06
013ac     60 95 02 F6 | 	mov	arg02, local14
013b0     59 97 02 F6 | 	mov	arg03, local07
013b4     5A 99 02 F6 | 	mov	arg04, local08
013b8     5B 9B 02 F6 | 	mov	arg05, local09
013bc     3C 17 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
013c0     53 00 00 FF 
013c4     40 65 06 F1 | 	add	objptr, ##42816
013c8     32 B1 02 FB | 	rdlong	local06, objptr
013cc     01 B0 06 F1 | 	add	local06, #1
013d0     32 B1 62 FC | 	wrlong	local06, objptr
013d4     53 00 00 FF 
013d8     40 65 86 F1 | 	sub	objptr, ##42816
013dc     62 B1 02 F6 | 	mov	local06, local16
013e0     62 C1 02 F6 | 	mov	local14, local16
013e4     01 C0 06 F1 | 	add	local14, #1
013e8     60 C5 02 F6 | 	mov	local16, local14
013ec     58 FF 9F FD | 	jmp	#LR__0038
013f0                 | LR__0039
013f0     92 01 00 FF 
013f4     23 D3 06 F6 | 	mov	local23, ##@LR__5488
013f8     04 B0 06 F6 | 	mov	local06, #4
013fc     3C 64 06 F1 | 	add	objptr, #60
01400     32 09 58 FC | 	wrword	#4, objptr
01404     3C 64 86 F1 | 	sub	objptr, #60
01408                 | LR__0040
01408                 | LR__0041
01408                 | ' 
01408                 | '   if key4=82 then 						' arrow up
01408     52 BE 0E F2 | 	cmp	local13, #82 wz
0140c     58 00 90 5D |  if_ne	jmp	#LR__0042
01410                 | ' return cursor_y
01410     3E 64 06 F1 | 	add	objptr, #62
01414     32 7B C2 FA | 	rdbyte	result1, objptr
01418     01 7A 86 F1 | 	sub	result1, #1
0141c     53 00 00 FF 
01420     E6 64 06 F1 | 	add	objptr, ##42726
01424     32 7B 62 FC | 	wrlong	result1, objptr
01428                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
01428     53 00 00 FF 
0142c     24 65 86 F1 | 	sub	objptr, ##42788
01430     00 7A 56 F2 | 	cmps	result1, #0 wc
01434     53 00 00 CF 
01438     24 65 06 C1 |  if_b	add	objptr, ##42788
0143c     32 01 68 CC |  if_b	wrlong	#0, objptr
01440     53 00 00 CF 
01444     24 65 86 C1 |  if_b	sub	objptr, ##42788
01448     53 00 00 FF 
0144c     24 65 06 F1 | 	add	objptr, ##42788
01450     32 C1 02 FB | 	rdlong	local14, objptr
01454     53 00 00 FF 
01458     24 65 86 F1 | 	sub	objptr, ##42788
0145c     60 B1 02 F6 | 	mov	local06, local14
01460     58 93 02 F6 | 	mov	arg01, local06
01464     B0 18 B2 FD | 	call	#_hg010b_spin2_setcursory
01468                 | LR__0042
01468                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
01468     51 BE 0E F2 | 	cmp	local13, #81 wz
0146c     58 00 90 5D |  if_ne	jmp	#LR__0043
01470                 | ' return cursor_y
01470     3E 64 06 F1 | 	add	objptr, #62
01474     32 7B C2 FA | 	rdbyte	result1, objptr
01478     01 7A 06 F1 | 	add	result1, #1
0147c     53 00 00 FF 
01480     E6 64 06 F1 | 	add	objptr, ##42726
01484     32 7B 62 FC | 	wrlong	result1, objptr
01488                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
01488     53 00 00 FF 
0148c     24 65 86 F1 | 	sub	objptr, ##42788
01490     25 7A 56 F2 | 	cmps	result1, #37 wc
01494     53 00 00 3F 
01498     24 65 06 31 |  if_ae	add	objptr, ##42788
0149c     32 49 68 3C |  if_ae	wrlong	#36, objptr
014a0     53 00 00 3F 
014a4     24 65 86 31 |  if_ae	sub	objptr, ##42788
014a8     53 00 00 FF 
014ac     24 65 06 F1 | 	add	objptr, ##42788
014b0     32 C1 02 FB | 	rdlong	local14, objptr
014b4     53 00 00 FF 
014b8     24 65 86 F1 | 	sub	objptr, ##42788
014bc     60 B1 02 F6 | 	mov	local06, local14
014c0     58 93 02 F6 | 	mov	arg01, local06
014c4     50 18 B2 FD | 	call	#_hg010b_spin2_setcursory
014c8                 | LR__0043
014c8                 | '   if key4=80 then
014c8     50 BE 0E F2 | 	cmp	local13, #80 wz
014cc     74 00 90 5D |  if_ne	jmp	#LR__0044
014d0                 | ' return cursor_x
014d0     3C 64 06 F1 | 	add	objptr, #60
014d4     32 B1 E2 FA | 	rdword	local06, objptr
014d8     02 B0 86 F1 | 	sub	local06, #2
014dc     53 00 00 FF 
014e0     EC 64 06 F1 | 	add	objptr, ##42732
014e4     32 B1 62 FC | 	wrlong	local06, objptr
014e8                 | '     cx=v.getcursorx()-2 					' arrow left
014e8                 | '     if cx<editor_spaces then cx=editor_spaces			
014e8     1B 00 00 FF 
014ec     D4 64 86 F1 | 	sub	objptr, ##14036
014f0     32 B5 02 FB | 	rdlong	local08, objptr
014f4     38 00 00 FF 
014f8     54 64 86 F1 | 	sub	objptr, ##28756
014fc     5A B3 02 F6 | 	mov	local07, local08
01500     59 B1 52 F2 | 	cmps	local06, local07 wc
01504     38 00 00 CF 
01508     54 64 06 C1 |  if_b	add	objptr, ##28756
0150c     32 B1 02 CB |  if_b	rdlong	local06, objptr
01510     1B 00 00 CF 
01514     D4 64 06 C1 |  if_b	add	objptr, ##14036
01518     32 B1 62 CC |  if_b	wrlong	local06, objptr
0151c     53 00 00 CF 
01520     28 65 86 C1 |  if_b	sub	objptr, ##42792
01524     53 00 00 FF 
01528     28 65 06 F1 | 	add	objptr, ##42792
0152c     32 C1 02 FB | 	rdlong	local14, objptr
01530     53 00 00 FF 
01534     28 65 86 F1 | 	sub	objptr, ##42792
01538     60 B1 02 F6 | 	mov	local06, local14
0153c     58 93 02 F6 | 	mov	arg01, local06
01540     A4 17 B2 FD | 	call	#_hg010b_spin2_setcursorx
01544                 | LR__0044
01544                 | '   if key4=79 then						' arrow right
01544     4F BE 0E F2 | 	cmp	local13, #79 wz
01548     54 00 90 5D |  if_ne	jmp	#LR__0045
0154c                 | ' return cursor_x
0154c     3C 64 06 F1 | 	add	objptr, #60
01550     32 7B E2 FA | 	rdword	result1, objptr
01554     02 7A 06 F1 | 	add	result1, #2
01558     53 00 00 FF 
0155c     EC 64 06 F1 | 	add	objptr, ##42732
01560     32 7B 62 FC | 	wrlong	result1, objptr
01564                 | '     cx=v.getcursorx()+2 
01564                 | '     if cx>254  then cx=254 
01564     53 00 00 FF 
01568     28 65 86 F1 | 	sub	objptr, ##42792
0156c     FF 7A 56 F2 | 	cmps	result1, #255 wc
01570     53 00 00 3F 
01574     28 65 06 31 |  if_ae	add	objptr, ##42792
01578     32 FD 69 3C |  if_ae	wrlong	#254, objptr
0157c     53 00 00 3F 
01580     28 65 86 31 |  if_ae	sub	objptr, ##42792
01584     53 00 00 FF 
01588     28 65 06 F1 | 	add	objptr, ##42792
0158c     32 B1 02 FB | 	rdlong	local06, objptr
01590     53 00 00 FF 
01594     28 65 86 F1 | 	sub	objptr, ##42792
01598     58 93 02 F6 | 	mov	arg01, local06
0159c     48 17 B2 FD | 	call	#_hg010b_spin2_setcursorx
015a0                 | LR__0045
015a0                 | ' 
015a0                 | '   if key4=73 then 						' ins
015a0     49 BE 0E F2 | 	cmp	local13, #73 wz
015a4     40 00 90 5D |  if_ne	jmp	#LR__0048
015a8     53 00 00 FF 
015ac     20 65 06 F1 | 	add	objptr, ##42784
015b0     32 B1 02 FB | 	rdlong	local06, objptr
015b4     58 C1 22 F6 | 	not	local14, local06
015b8     32 C1 62 FC | 	wrlong	local14, objptr
015bc                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
015bc     53 00 00 FF 
015c0     20 65 86 F1 | 	sub	objptr, ##42784
015c4     00 C0 0E F2 | 	cmp	local14, #0 wz
015c8     10 00 90 AD |  if_e	jmp	#LR__0046
015cc     0E B0 06 F6 | 	mov	local06, #14
015d0     0E 92 06 F6 | 	mov	arg01, #14
015d4     68 05 B2 FD | 	call	#_hg010b_spin2_setcursorshape
015d8     0C 00 90 FD | 	jmp	#LR__0047
015dc                 | LR__0046
015dc     00 B0 06 F6 | 	mov	local06, #0
015e0     00 92 06 F6 | 	mov	arg01, #0
015e4     58 05 B2 FD | 	call	#_hg010b_spin2_setcursorshape
015e8                 | LR__0047
015e8                 | LR__0048
015e8     00 AC 06 F6 | 	mov	local04, #0
015ec     2C F3 9F FD | 	jmp	#LR__0001
015f0                 | LR__0049
015f0     E7 F0 03 F6 | 	mov	ptra, fp
015f4     F2 00 A0 FD | 	call	#popregs_
015f8                 | _edit_ret
015f8     2D 00 64 FD | 	ret
015fc                 | 
015fc                 | ' 
015fc                 | ' ''-----------------------------------------------------------------------------------------------------------
015fc                 | ' ' 					A housekeepeer.
015fc                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
015fc                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
015fc                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
015fc                 | ' ''-----------------------------------------------------------------------------------------------------------
015fc                 | ' 
015fc                 | ' sub housekeeper
015fc                 | _housekeeper
015fc                 | ' 
015fc                 | ' do
015fc                 | LR__0050
015fc                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
015fc     49 64 06 F1 | 	add	objptr, #73
01600                 | LR__0051
01600     32 93 02 FB | 	rdlong	arg01, objptr
01604     01 92 0E F2 | 	cmp	arg01, #1 wz
01608     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
0160c     53 00 00 FF 
01610     A3 64 06 F1 | 	add	objptr, ##42659
01614     32 93 02 FB | 	rdlong	arg01, objptr
01618     01 92 06 F1 | 	add	arg01, #1
0161c     32 93 62 FC | 	wrlong	arg01, objptr
01620     53 00 00 FF 
01624     EC 64 86 F1 | 	sub	objptr, ##42732
01628     80 00 B0 FD | 	call	#_gethdi
0162c     05 92 06 F6 | 	mov	arg01, #5
01630     78 36 B2 FD | 	call	#__system___waitms
01634     53 00 00 FF 
01638     EC 64 06 F1 | 	add	objptr, ##42732
0163c     32 93 02 FB | 	rdlong	arg01, objptr
01640     01 92 06 F1 | 	add	arg01, #1
01644     32 93 62 FC | 	wrlong	arg01, objptr
01648     53 00 00 FF 
0164c     EC 64 86 F1 | 	sub	objptr, ##42732
01650     58 00 B0 FD | 	call	#_gethdi
01654     05 92 06 F6 | 	mov	arg01, #5
01658     50 36 B2 FD | 	call	#__system___waitms
0165c     53 00 00 FF 
01660     EC 64 06 F1 | 	add	objptr, ##42732
01664     32 93 02 FB | 	rdlong	arg01, objptr
01668     01 92 06 F1 | 	add	arg01, #1
0166c     32 93 62 FC | 	wrlong	arg01, objptr
01670     53 00 00 FF 
01674     EC 64 86 F1 | 	sub	objptr, ##42732
01678     30 00 B0 FD | 	call	#_gethdi
0167c     05 92 06 F6 | 	mov	arg01, #5
01680     28 36 B2 FD | 	call	#__system___waitms
01684     53 00 00 FF 
01688     EC 64 06 F1 | 	add	objptr, ##42732
0168c     32 93 02 FB | 	rdlong	arg01, objptr
01690     01 92 06 F1 | 	add	arg01, #1
01694     32 93 62 FC | 	wrlong	arg01, objptr
01698     53 00 00 FF 
0169c     EC 64 86 F1 | 	sub	objptr, ##42732
016a0     08 00 B0 FD | 	call	#_gethdi
016a4     54 FF 9F FD | 	jmp	#LR__0050
016a8                 | _housekeeper_ret
016a8     2D 00 64 FD | 	ret
016ac                 | 
016ac                 | ' 
016ac                 | ' '----------------------------------------------------------------------------------------------------------
016ac                 | ' ' gethdi is called from the houseekeeper to read HDI related values
016ac                 | ' '----------------------------------------------------------------------------------------------------------
016ac                 | ' 
016ac                 | ' sub gethdi
016ac                 | _gethdi
016ac     0A CA 05 F6 | 	mov	COUNT_, #10
016b0     E8 00 A0 FD | 	call	#pushregs_
016b4                 | '   x := mouse_xacc
016b4     14 00 00 FF 
016b8     E1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
016bc     3B 95 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
016c0                 | '   y := mouse_yacc
016c0     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
016c4     3B 93 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
016c8     52 00 00 FF 
016cc     68 65 06 F1 | 	add	objptr, ##42344
016d0     32 95 62 FC | 	wrlong	arg02, objptr
016d4     04 64 06 F1 | 	add	objptr, #4
016d8     32 93 62 FC | 	wrlong	arg01, objptr
016dc                 | '   x := 0
016dc                 | '   y := mouse_zacc
016dc     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
016e0     3B 7B 02 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
016e4     08 64 06 F1 | 	add	objptr, #8
016e8     32 7B 62 FC | 	wrlong	result1, objptr
016ec                 | '   return mouse_bstate
016ec     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
016f0     3B 7B C2 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
016f4     14 00 00 FF 
016f8     ED 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10477
016fc     04 64 86 F1 | 	sub	objptr, #4
01700     32 7B 62 FC | 	wrlong	result1, objptr
01704     52 00 00 FF 
01708     70 65 86 F1 | 	sub	objptr, ##42352
0170c     00 A6 06 F6 | 	mov	local01, #0
01710                 | ' 
01710                 | ' mousex,mousey=kbm.mouse_xy()
01710                 | ' dummy,mousew=kbm.mouse_scroll()
01710                 | ' mousek=kbm.mouse_buttons()
01710                 | ' i=0
01710                 | ' for j=0 to 6
01710     00 A8 06 F6 | 	mov	local02, #0
01714                 | LR__0060
01714                 | '   if kbm.hidpad_id(j)>0 then
01714     54 93 02 F6 | 	mov	arg01, local02
01718                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
01718     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
0171c     13 00 00 FF 
01720     F8 7B 06 F1 | 	add	result1, ##10232
01724     05 92 66 F0 | 	shl	arg01, #5
01728     49 7B 02 F1 | 	add	result1, arg01
0172c     3D 7B 02 FB | 	rdlong	result1, result1
01730     01 7A 56 F2 | 	cmps	result1, #1 wc
01734     C8 01 90 CD |  if_b	jmp	#LR__0061
01738     54 93 02 F6 | 	mov	arg01, local02
0173c     00 94 06 F6 | 	mov	arg02, #0
01740     74 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01744     3D AB 02 F6 | 	mov	local03, result1
01748     54 93 02 F6 | 	mov	arg01, local02
0174c     01 94 06 F6 | 	mov	arg02, #1
01750     64 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01754     3D AD 02 F6 | 	mov	local04, result1
01758     54 93 02 F6 | 	mov	arg01, local02
0175c     02 94 06 F6 | 	mov	arg02, #2
01760     54 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01764     3D AF 02 F6 | 	mov	local05, result1
01768     54 93 02 F6 | 	mov	arg01, local02
0176c     00 94 06 F6 | 	mov	arg02, #0
01770     80 2B B2 FD | 	call	#_usbnew_spin2_hidpad_hat
01774     3D B1 02 F6 | 	mov	local06, result1
01778     54 93 02 F6 | 	mov	arg01, local02
0177c     03 94 06 F6 | 	mov	arg02, #3
01780     34 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01784     3D B3 02 F6 | 	mov	local07, result1
01788     54 93 02 F6 | 	mov	arg01, local02
0178c     04 94 06 F6 | 	mov	arg02, #4
01790     24 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01794     3D B5 02 F6 | 	mov	local08, result1
01798     54 93 02 F6 | 	mov	arg01, local02
0179c     05 94 06 F6 | 	mov	arg02, #5
017a0     14 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
017a4     3D B7 02 F6 | 	mov	local09, result1
017a8     54 93 02 F6 | 	mov	arg01, local02
017ac     06 94 06 F6 | 	mov	arg02, #6
017b0     04 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
017b4     3D B9 02 F6 | 	mov	local10, result1
017b8     54 93 02 F6 | 	mov	arg01, local02
017bc     07 94 06 F6 | 	mov	arg02, #7
017c0     F4 2A B2 FD | 	call	#_usbnew_spin2_hidpad_axis
017c4     53 93 02 F6 | 	mov	arg01, local01
017c8     02 92 66 F0 | 	shl	arg01, #2
017cc     52 00 00 FF 
017d0     78 65 06 F1 | 	add	objptr, ##42360
017d4     32 93 02 F1 | 	add	arg01, objptr
017d8     49 AB 62 FC | 	wrlong	local03, arg01
017dc     53 93 02 F6 | 	mov	arg01, local01
017e0     02 92 66 F0 | 	shl	arg01, #2
017e4     1C 64 06 F1 | 	add	objptr, #28
017e8     32 93 02 F1 | 	add	arg01, objptr
017ec     49 AD 62 FC | 	wrlong	local04, arg01
017f0     53 93 02 F6 | 	mov	arg01, local01
017f4     02 92 66 F0 | 	shl	arg01, #2
017f8     1C 64 06 F1 | 	add	objptr, #28
017fc     32 93 02 F1 | 	add	arg01, objptr
01800     49 AF 62 FC | 	wrlong	local05, arg01
01804     53 AF 02 F6 | 	mov	local05, local01
01808     02 AE 66 F0 | 	shl	local05, #2
0180c     1C 64 06 F1 | 	add	objptr, #28
01810     32 AF 02 F1 | 	add	local05, objptr
01814     57 B1 62 FC | 	wrlong	local06, local05
01818     53 B1 02 F6 | 	mov	local06, local01
0181c     02 B0 66 F0 | 	shl	local06, #2
01820     1C 64 06 F1 | 	add	objptr, #28
01824     32 B1 02 F1 | 	add	local06, objptr
01828     58 B3 62 FC | 	wrlong	local07, local06
0182c     53 B3 02 F6 | 	mov	local07, local01
01830     02 B2 66 F0 | 	shl	local07, #2
01834     1C 64 06 F1 | 	add	objptr, #28
01838     32 B3 02 F1 | 	add	local07, objptr
0183c     59 B5 62 FC | 	wrlong	local08, local07
01840     53 B5 02 F6 | 	mov	local08, local01
01844     02 B4 66 F0 | 	shl	local08, #2
01848     1C 64 06 F1 | 	add	objptr, #28
0184c     32 B5 02 F1 | 	add	local08, objptr
01850     5A B7 62 FC | 	wrlong	local09, local08
01854     53 B7 02 F6 | 	mov	local09, local01
01858     02 B6 66 F0 | 	shl	local09, #2
0185c     1C 64 06 F1 | 	add	objptr, #28
01860     32 B7 02 F1 | 	add	local09, objptr
01864     5B B9 62 FC | 	wrlong	local10, local09
01868     53 B9 02 F6 | 	mov	local10, local01
0186c     02 B8 66 F0 | 	shl	local10, #2
01870     1C 64 06 F1 | 	add	objptr, #28
01874     32 B9 02 F1 | 	add	local10, objptr
01878     5C 7B 62 FC | 	wrlong	result1, local10
0187c     60 00 00 FF 
01880     00 AA 06 F1 | 	add	local03, ##49152
01884     0F AA 46 F0 | 	shr	local03, #15
01888     01 B8 06 F6 | 	mov	local10, #1
0188c     55 B9 02 F1 | 	add	local10, local03
01890     60 00 00 FF 
01894     00 AC 06 F1 | 	add	local04, ##49152
01898     0F AC 46 F0 | 	shr	local04, #15
0189c     01 B6 06 F6 | 	mov	local09, #1
018a0     56 B7 02 F1 | 	add	local09, local04
018a4     53 B5 02 F6 | 	mov	local08, local01
018a8     02 B4 66 F0 | 	shl	local08, #2
018ac     1C 64 06 F1 | 	add	objptr, #28
018b0     32 B5 02 F1 | 	add	local08, objptr
018b4     02 B6 66 F0 | 	shl	local09, #2
018b8     5B B9 02 F1 | 	add	local10, local09
018bc     5A B9 62 FC | 	wrlong	local10, local08
018c0     53 B9 02 F6 | 	mov	local10, local01
018c4     02 B8 66 F0 | 	shl	local10, #2
018c8     1C 64 06 F1 | 	add	objptr, #28
018cc     32 B9 02 F1 | 	add	local10, objptr
018d0     54 93 02 F6 | 	mov	arg01, local02
018d4     53 00 00 FF 
018d8     90 64 86 F1 | 	sub	objptr, ##42640
018dc                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6]
018dc     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
018e0     13 00 00 FF 
018e4     F8 7B 06 F1 | 	add	result1, ##10232
018e8     05 92 66 F0 | 	shl	arg01, #5
018ec     49 7B 02 F1 | 	add	result1, arg01
018f0     18 7A 06 F1 | 	add	result1, #24
018f4     3D 7B 02 FB | 	rdlong	result1, result1
018f8     5C 7B 62 FC | 	wrlong	result1, local10
018fc     01 A6 06 F1 | 	add	local01, #1
01900                 | LR__0061
01900     01 A8 06 F1 | 	add	local02, #1
01904     07 A8 16 F2 | 	cmp	local02, #7 wc
01908     08 FE 9F CD |  if_b	jmp	#LR__0060
0190c     D7 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
01910                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
01910                 | LR__0062
01910     07 A6 16 F2 | 	cmp	local01, #7 wc
01914     3C 00 90 3D |  if_ae	jmp	#LR__0064
01918     53 B9 02 F6 | 	mov	local10, local01
0191c     02 B8 66 F0 | 	shl	local10, #2
01920     53 00 00 FF 
01924     74 64 06 F1 | 	add	objptr, ##42612
01928     32 B9 02 F1 | 	add	local10, objptr
0192c     5C 01 68 FC | 	wrlong	#0, local10
01930     53 B9 02 F6 | 	mov	local10, local01
01934     02 B8 66 F0 | 	shl	local10, #2
01938     1C 64 06 F1 | 	add	objptr, #28
0193c     32 B9 02 F1 | 	add	local10, objptr
01940     5C 01 68 FC | 	wrlong	#0, local10
01944     01 A6 06 F1 | 	add	local01, #1
01948     53 00 00 FF 
0194c     90 64 86 F1 | 	sub	objptr, ##42640
01950     BC FF 9F FD | 	jmp	#LR__0062
01954                 | LR__0063
01954                 | LR__0064
01954     E7 F0 03 F6 | 	mov	ptra, fp
01958     F2 00 A0 FD | 	call	#popregs_
0195c                 | _gethdi_ret
0195c     2D 00 64 FD | 	ret
01960                 | 
01960                 | ' 
01960                 | ' '-------------------------------------------------------------------------------------------------------------
01960                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01960                 | ' '-------------------------------------------------------------------------------------------------------------
01960                 | ' 
01960                 | ' '-------------------------------------------------------------------------------------------------------------
01960                 | ' '
01960                 | ' '                                     LINE INTERPRETER/TOKENIZER
01960                 | ' '
01960                 | ' '-------------------------------------------------------------------------------------------------------------
01960                 | ' 
01960                 | ' 
01960                 | ' sub interpret
01960                 | _interpret
01960     34 CA 05 F6 | 	mov	COUNT_, #52
01964     E8 00 A0 FD | 	call	#pushregs_
01968     01 00 00 FF 
0196c     80 F0 07 F1 | 	add	ptra, ##640
01970     38 00 00 FF 
01974     3C 64 06 F1 | 	add	objptr, ##28732
01978     32 93 02 FB | 	rdlong	arg01, objptr
0197c     38 00 00 FF 
01980     3C 64 86 F1 | 	sub	objptr, ##28732
01984     68 4D B2 FD | 	call	#__system__RTrim_S
01988     3D 93 02 F6 | 	mov	arg01, result1
0198c     A0 4C B2 FD | 	call	#__system__LTrim_S
01990     38 00 00 FF 
01994     40 64 06 F1 | 	add	objptr, ##28736
01998     32 7B 62 FC | 	wrlong	result1, objptr
0199c     04 64 06 F1 | 	add	objptr, #4
019a0     FF FF FF FF 
019a4     32 FF 6B FC | 	wrlong	##-1, objptr
019a8     1B 00 00 FF 
019ac     C4 64 06 F1 | 	add	objptr, ##14020
019b0     32 01 68 FC | 	wrlong	#0, objptr
019b4     08 00 00 FF 
019b8     6C 64 86 F1 | 	sub	objptr, ##4204
019bc     32 01 68 FC | 	wrlong	#0, objptr
019c0     4B 00 00 FF 
019c4     9C 64 86 F1 | 	sub	objptr, ##38556
019c8     00 A6 06 F6 | 	mov	local01, #0
019cc                 | LR__0070
019cc                 | ' 
019cc                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
019cc                 | ' 
019cc                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
019cc                 | ' 
019cc                 | ' 108 
019cc                 | ' for i=0 to 125: separators(i)=0 :next i
019cc     00 A8 06 F6 | 	mov	local02, #0
019d0     38 CE 05 F1 | 	add	fp, #56
019d4     D7 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
019d8                 | LR__0071
019d8     54 AB 02 F6 | 	mov	local03, local02
019dc     02 AA 66 F0 | 	shl	local03, #2
019e0     E7 AA 02 F1 | 	add	local03, fp
019e4     55 01 68 FC | 	wrlong	#0, local03
019e8     01 A8 06 F1 | 	add	local02, #1
019ec     7E A8 56 F2 | 	cmps	local02, #126 wc
019f0     E4 FF 9F CD |  if_b	jmp	#LR__0071
019f4                 | LR__0072
019f4     38 CE 85 F1 | 	sub	fp, #56
019f8                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
019f8     00 A8 06 F6 | 	mov	local02, #0
019fc     36 00 00 FF 
01a00     2C 64 06 F1 | 	add	objptr, ##27692
01a04     D7 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
01a08                 | LR__0073
01a08     54 AD 02 F6 | 	mov	local04, local02
01a0c     03 AC 66 F0 | 	shl	local04, #3
01a10     32 AD 02 F1 | 	add	local04, objptr
01a14     92 01 00 FF 
01a18     24 97 06 F6 | 	mov	arg03, ##@LR__5489
01a1c     56 97 62 FC | 	wrlong	arg03, local04
01a20     54 AD 02 F6 | 	mov	local04, local02
01a24     03 AC 66 F0 | 	shl	local04, #3
01a28     32 AF 02 F6 | 	mov	local05, objptr
01a2c     32 AD 02 F1 | 	add	local04, objptr
01a30     00 B0 06 F6 | 	mov	local06, #0
01a34     04 AC 06 F1 | 	add	local04, #4
01a38     56 01 68 FC | 	wrlong	#0, local04
01a3c     01 A8 06 F1 | 	add	local02, #1
01a40     7E A8 56 F2 | 	cmps	local02, #126 wc
01a44     C0 FF 9F CD |  if_b	jmp	#LR__0073
01a48                 | LR__0074
01a48     02 00 00 FF 
01a4c     10 64 06 F1 | 	add	objptr, ##1040
01a50     32 93 02 FB | 	rdlong	arg01, objptr
01a54     38 00 00 FF 
01a58     3C 64 86 F1 | 	sub	objptr, ##28732
01a5c     90 4C B2 FD | 	call	#__system__RTrim_S
01a60     3D 93 02 F6 | 	mov	arg01, result1
01a64     C8 4B B2 FD | 	call	#__system__LTrim_S
01a68     38 00 00 FF 
01a6c     3C 64 06 F1 | 	add	objptr, ##28732
01a70     32 7B 62 FC | 	wrlong	result1, objptr
01a74     92 01 00 FF 
01a78     25 AD 06 F6 | 	mov	local04, ##@LR__5490
01a7c     1B 00 00 FF 
01a80     08 65 06 F1 | 	add	objptr, ##14088
01a84     32 AD 62 FC | 	wrlong	local04, objptr
01a88     1B 00 00 FF 
01a8c     08 65 86 F1 | 	sub	objptr, ##14088
01a90     32 93 02 FB | 	rdlong	arg01, objptr
01a94     38 00 00 FF 
01a98     3C 64 86 F1 | 	sub	objptr, ##28732
01a9c     49 B3 02 F6 | 	mov	local07, arg01
01aa0     D7 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
01aa4                 | LR__0075
01aa4     59 7B CA FA | 	rdbyte	result1, local07 wz
01aa8     01 B2 06 51 |  if_ne	add	local07, #1
01aac     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01ab0                 | LR__0076
01ab0     49 B3 8A F1 | 	sub	local07, arg01 wz
01ab4     53 00 00 FF 
01ab8     48 65 06 F1 | 	add	objptr, ##42824
01abc     32 B3 62 FC | 	wrlong	local07, objptr
01ac0                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
01ac0     53 00 00 FF 
01ac4     48 65 86 F1 | 	sub	objptr, ##42824
01ac8     E4 28 90 AD |  if_e	jmp	#LR__0210
01acc     00 B4 06 F6 | 	mov	local08, #0
01ad0                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
01ad0                 | ' for i=1 to len(line$)
01ad0     01 A8 06 F6 | 	mov	local02, #1
01ad4     38 00 00 FF 
01ad8     3C 64 06 F1 | 	add	objptr, ##28732
01adc     32 93 02 FB | 	rdlong	arg01, objptr
01ae0     38 00 00 FF 
01ae4     3C 64 86 F1 | 	sub	objptr, ##28732
01ae8     49 B3 02 F6 | 	mov	local07, arg01
01aec     D7 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
01af0                 | LR__0077
01af0     59 7B CA FA | 	rdbyte	result1, local07 wz
01af4     01 B2 06 51 |  if_ne	add	local07, #1
01af8     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
01afc                 | LR__0078
01afc     49 B3 82 F1 | 	sub	local07, arg01
01b00     59 B7 02 F6 | 	mov	local09, local07
01b04     01 B6 06 F1 | 	add	local09, #1
01b08                 | LR__0079
01b08     5B A9 52 F2 | 	cmps	local02, local09 wc
01b0c     A4 00 90 3D |  if_ae	jmp	#LR__0081
01b10                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
01b10     38 00 00 FF 
01b14     3C 64 06 F1 | 	add	objptr, ##28732
01b18     32 93 02 FB | 	rdlong	arg01, objptr
01b1c     38 00 00 FF 
01b20     3C 64 86 F1 | 	sub	objptr, ##28732
01b24     54 95 02 F6 | 	mov	arg02, local02
01b28     01 96 06 F6 | 	mov	arg03, #1
01b2c     48 48 B2 FD | 	call	#__system__Mid_S
01b30     3D 93 02 F6 | 	mov	arg01, result1
01b34     92 01 00 FF 
01b38     26 95 06 F6 | 	mov	arg02, ##@LR__5491
01b3c     A0 2E B2 FD | 	call	#__system___string_cmp
01b40     00 7A 0E F2 | 	cmp	result1, #0 wz
01b44     00 B4 0E A2 |  if_e	cmp	local08, #0 wz
01b48     01 B4 06 A6 |  if_e	mov	local08, #1
01b4c     3C 00 90 AD |  if_e	jmp	#LR__0080
01b50     38 00 00 FF 
01b54     3C 64 06 F1 | 	add	objptr, ##28732
01b58     32 93 02 FB | 	rdlong	arg01, objptr
01b5c     38 00 00 FF 
01b60     3C 64 86 F1 | 	sub	objptr, ##28732
01b64     54 95 02 F6 | 	mov	arg02, local02
01b68     01 96 06 F6 | 	mov	arg03, #1
01b6c     08 48 B2 FD | 	call	#__system__Mid_S
01b70     3D 93 02 F6 | 	mov	arg01, result1
01b74     92 01 00 FF 
01b78     28 95 06 F6 | 	mov	arg02, ##@LR__5492
01b7c     60 2E B2 FD | 	call	#__system___string_cmp
01b80     00 7A 0E F2 | 	cmp	result1, #0 wz
01b84     01 B4 0E A2 |  if_e	cmp	local08, #1 wz
01b88     00 B4 06 A6 |  if_e	mov	local08, #0
01b8c                 | LR__0080
01b8c     54 AD 02 F6 | 	mov	local04, local02
01b90     03 AC 66 F0 | 	shl	local04, #3
01b94     32 AF 02 F6 | 	mov	local05, objptr
01b98     36 00 00 FF 
01b9c     2C AE 06 F1 | 	add	local05, ##27692
01ba0     57 AD 02 F1 | 	add	local04, local05
01ba4     04 AC 06 F1 | 	add	local04, #4
01ba8     56 B5 62 FC | 	wrlong	local08, local04
01bac     01 A8 06 F1 | 	add	local02, #1
01bb0     54 FF 9F FD | 	jmp	#LR__0079
01bb4                 | LR__0081
01bb4     01 A8 06 F6 | 	mov	local02, #1
01bb8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01bb8                 | LR__0082
01bb8     38 00 00 FF 
01bbc     3C 64 06 F1 | 	add	objptr, ##28732
01bc0     32 93 02 FB | 	rdlong	arg01, objptr
01bc4     38 00 00 FF 
01bc8     3C 64 86 F1 | 	sub	objptr, ##28732
01bcc     54 95 02 F6 | 	mov	arg02, local02
01bd0     01 96 06 F6 | 	mov	arg03, #1
01bd4     A0 47 B2 FD | 	call	#__system__Mid_S
01bd8     3D 93 02 F6 | 	mov	arg01, result1
01bdc     92 01 00 FF 
01be0     2A B9 06 F6 | 	mov	local10, ##@LR__5493
01be4     5C 95 02 F6 | 	mov	arg02, local10
01be8     F4 2D B2 FD | 	call	#__system___string_cmp
01bec     00 7A 0E F2 | 	cmp	result1, #0 wz
01bf0     2C 00 90 5D |  if_ne	jmp	#LR__0083
01bf4     54 AF 02 F6 | 	mov	local05, local02
01bf8     03 AE 66 F0 | 	shl	local05, #3
01bfc     32 B1 02 F6 | 	mov	local06, objptr
01c00     36 00 00 FF 
01c04     2C B0 06 F1 | 	add	local06, ##27692
01c08     58 AF 02 F1 | 	add	local05, local06
01c0c     04 AE 06 F1 | 	add	local05, #4
01c10     57 BB 02 FB | 	rdlong	local11, local05
01c14     04 AE 86 F1 | 	sub	local05, #4
01c18     5D BD 0A F6 | 	mov	local12, local11 wz
01c1c     24 00 90 AD |  if_e	jmp	#LR__0084
01c20                 | LR__0083
01c20     53 00 00 FF 
01c24     48 65 06 F1 | 	add	objptr, ##42824
01c28     32 BF 02 FB | 	rdlong	local13, objptr
01c2c     53 00 00 FF 
01c30     48 65 86 F1 | 	sub	objptr, ##42824
01c34     5F C1 02 F6 | 	mov	local14, local13
01c38     60 A9 52 F2 | 	cmps	local02, local14 wc
01c3c     01 A8 06 C1 |  if_b	add	local02, #1
01c40     74 FF 9F CD |  if_b	jmp	#LR__0082
01c44                 | LR__0084
01c44                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01c44     53 00 00 FF 
01c48     48 65 06 F1 | 	add	objptr, ##42824
01c4c     32 AD 02 FB | 	rdlong	local04, objptr
01c50     53 00 00 FF 
01c54     48 65 86 F1 | 	sub	objptr, ##42824
01c58     56 A9 52 F2 | 	cmps	local02, local04 wc
01c5c     A8 00 90 3D |  if_ae	jmp	#LR__0087
01c60     38 00 00 FF 
01c64     3C 64 06 F1 | 	add	objptr, ##28732
01c68     32 B1 02 FB | 	rdlong	local06, objptr
01c6c     38 00 00 FF 
01c70     3C 64 86 F1 | 	sub	objptr, ##28732
01c74     58 93 02 F6 | 	mov	arg01, local06
01c78     49 B3 02 F6 | 	mov	local07, arg01
01c7c     D7 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01c80                 | LR__0085
01c80     59 7B CA FA | 	rdbyte	result1, local07 wz
01c84     01 B2 06 51 |  if_ne	add	local07, #1
01c88     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01c8c                 | LR__0086
01c8c     49 B3 82 F1 | 	sub	local07, arg01
01c90     59 AF 02 F6 | 	mov	local05, local07
01c94     57 95 02 F6 | 	mov	arg02, local05
01c98     54 95 82 F1 | 	sub	arg02, local02
01c9c     58 93 02 F6 | 	mov	arg01, local06
01ca0     44 46 B2 FD | 	call	#__system__Right_S
01ca4     3D 93 02 F6 | 	mov	arg01, result1
01ca8     44 4A B2 FD | 	call	#__system__RTrim_S
01cac     3D 93 02 F6 | 	mov	arg01, result1
01cb0     7C 49 B2 FD | 	call	#__system__LTrim_S
01cb4     53 00 00 FF 
01cb8     4C 65 06 F1 | 	add	objptr, ##42828
01cbc     32 7B 62 FC | 	wrlong	result1, objptr
01cc0     1B 00 00 FF 
01cc4     10 65 86 F1 | 	sub	objptr, ##14096
01cc8     32 93 02 FB | 	rdlong	arg01, objptr
01ccc     38 00 00 FF 
01cd0     3C 64 86 F1 | 	sub	objptr, ##28732
01cd4     01 A8 86 F1 | 	sub	local02, #1
01cd8     54 95 02 F6 | 	mov	arg02, local02
01cdc     80 45 B2 FD | 	call	#__system__Left_S
01ce0     3D 93 02 F6 | 	mov	arg01, result1
01ce4     08 4A B2 FD | 	call	#__system__RTrim_S
01ce8     3D 93 02 F6 | 	mov	arg01, result1
01cec     40 49 B2 FD | 	call	#__system__LTrim_S
01cf0     38 00 00 FF 
01cf4     3C 64 06 F1 | 	add	objptr, ##28732
01cf8     32 7B 62 FC | 	wrlong	result1, objptr
01cfc     38 00 00 FF 
01d00     3C 64 86 F1 | 	sub	objptr, ##28732
01d04     1C 00 90 FD | 	jmp	#LR__0088
01d08                 | LR__0087
01d08     92 01 00 FF 
01d0c     2C AD 06 F6 | 	mov	local04, ##@LR__5494
01d10     53 00 00 FF 
01d14     4C 65 06 F1 | 	add	objptr, ##42828
01d18     32 AD 62 FC | 	wrlong	local04, objptr
01d1c     53 00 00 FF 
01d20     4C 65 86 F1 | 	sub	objptr, ##42828
01d24                 | LR__0088
01d24                 | ' 
01d24                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01d24     38 00 00 FF 
01d28     44 64 06 F1 | 	add	objptr, ##28740
01d2c     32 AD 02 FB | 	rdlong	local04, objptr
01d30     38 00 00 FF 
01d34     44 64 86 F1 | 	sub	objptr, ##28740
01d38     FF FF 7F FF 
01d3c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
01d40     40 00 90 5D |  if_ne	jmp	#LR__0089
01d44     53 00 00 FF 
01d48     4C 65 06 F1 | 	add	objptr, ##42828
01d4c     32 93 02 FB | 	rdlong	arg01, objptr
01d50     53 00 00 FF 
01d54     4C 65 86 F1 | 	sub	objptr, ##42828
01d58     92 01 00 FF 
01d5c     2D B1 06 F6 | 	mov	local06, ##@LR__5495
01d60     58 95 02 F6 | 	mov	arg02, local06
01d64     78 2C B2 FD | 	call	#__system___string_cmp
01d68     00 7A 0E F2 | 	cmp	result1, #0 wz
01d6c     38 00 00 5F 
01d70     44 64 06 51 |  if_ne	add	objptr, ##28740
01d74     32 01 68 5C |  if_ne	wrlong	#0, objptr
01d78     38 00 00 5F 
01d7c     44 64 86 51 |  if_ne	sub	objptr, ##28740
01d80     08 01 90 5D |  if_ne	jmp	#LR__0093
01d84                 | LR__0089
01d84                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01d84     38 00 00 FF 
01d88     44 64 06 F1 | 	add	objptr, ##28740
01d8c     32 AD 02 FB | 	rdlong	local04, objptr
01d90     38 00 00 FF 
01d94     44 64 86 F1 | 	sub	objptr, ##28740
01d98     FF FF 7F FF 
01d9c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
01da0     3C 00 90 5D |  if_ne	jmp	#LR__0090
01da4     53 00 00 FF 
01da8     4C 65 06 F1 | 	add	objptr, ##42828
01dac     32 93 02 FB | 	rdlong	arg01, objptr
01db0     53 00 00 FF 
01db4     4C 65 86 F1 | 	sub	objptr, ##42828
01db8     92 01 00 FF 
01dbc     2E 95 06 F6 | 	mov	arg02, ##@LR__5496
01dc0     1C 2C B2 FD | 	call	#__system___string_cmp
01dc4     00 7A 0E F2 | 	cmp	result1, #0 wz
01dc8     38 00 00 AF 
01dcc     44 64 06 A1 |  if_e	add	objptr, ##28740
01dd0     32 07 68 AC |  if_e	wrlong	#3, objptr
01dd4     38 00 00 AF 
01dd8     44 64 86 A1 |  if_e	sub	objptr, ##28740
01ddc     AC 00 90 AD |  if_e	jmp	#LR__0093
01de0                 | LR__0090
01de0                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01de0     38 00 00 FF 
01de4     44 64 06 F1 | 	add	objptr, ##28740
01de8     32 AD 02 FB | 	rdlong	local04, objptr
01dec     38 00 00 FF 
01df0     44 64 86 F1 | 	sub	objptr, ##28740
01df4     04 AC 0E F2 | 	cmp	local04, #4 wz
01df8     3C 00 90 5D |  if_ne	jmp	#LR__0091
01dfc     53 00 00 FF 
01e00     4C 65 06 F1 | 	add	objptr, ##42828
01e04     32 93 02 FB | 	rdlong	arg01, objptr
01e08     53 00 00 FF 
01e0c     4C 65 86 F1 | 	sub	objptr, ##42828
01e10     92 01 00 FF 
01e14     2F 95 06 F6 | 	mov	arg02, ##@LR__5497
01e18     C4 2B B2 FD | 	call	#__system___string_cmp
01e1c     00 7A 0E F2 | 	cmp	result1, #0 wz
01e20     38 00 00 5F 
01e24     44 64 06 51 |  if_ne	add	objptr, ##28740
01e28     32 03 68 5C |  if_ne	wrlong	#1, objptr
01e2c     38 00 00 5F 
01e30     44 64 86 51 |  if_ne	sub	objptr, ##28740
01e34     54 00 90 5D |  if_ne	jmp	#LR__0093
01e38                 | LR__0091
01e38                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01e38     38 00 00 FF 
01e3c     44 64 06 F1 | 	add	objptr, ##28740
01e40     32 AD 02 FB | 	rdlong	local04, objptr
01e44     38 00 00 FF 
01e48     44 64 86 F1 | 	sub	objptr, ##28740
01e4c     04 AC 0E F2 | 	cmp	local04, #4 wz
01e50     38 00 90 5D |  if_ne	jmp	#LR__0092
01e54     53 00 00 FF 
01e58     4C 65 06 F1 | 	add	objptr, ##42828
01e5c     32 93 02 FB | 	rdlong	arg01, objptr
01e60     53 00 00 FF 
01e64     4C 65 86 F1 | 	sub	objptr, ##42828
01e68     92 01 00 FF 
01e6c     30 95 06 F6 | 	mov	arg02, ##@LR__5498
01e70     6C 2B B2 FD | 	call	#__system___string_cmp
01e74     00 7A 0E F2 | 	cmp	result1, #0 wz
01e78     38 00 00 AF 
01e7c     44 64 06 A1 |  if_e	add	objptr, ##28740
01e80     32 05 68 AC |  if_e	wrlong	#2, objptr
01e84     38 00 00 AF 
01e88     44 64 86 A1 |  if_e	sub	objptr, ##28740
01e8c                 | LR__0092
01e8c                 | LR__0093
01e8c     38 CE 05 F1 | 	add	fp, #56
01e90     E7 00 68 FC | 	wrlong	#0, fp
01e94     38 CE 85 F1 | 	sub	fp, #56
01e98     00 A8 06 F6 | 	mov	local02, #0
01e9c     01 C2 06 F6 | 	mov	local15, #1
01ea0                 | ' 
01ea0                 | ' ' 1b: find separators
01ea0                 | ' 
01ea0                 | ' 107
01ea0                 | ' separators(0)=0
01ea0                 | ' i=0: j=1
01ea0                 | ' do: 
01ea0                 | LR__0094
01ea0     01 A8 06 F1 | 	add	local02, #1
01ea4     38 00 00 FF 
01ea8     3C 64 06 F1 | 	add	objptr, ##28732
01eac     32 93 02 FB | 	rdlong	arg01, objptr
01eb0     38 00 00 FF 
01eb4     3C 64 86 F1 | 	sub	objptr, ##28732
01eb8     54 95 02 F6 | 	mov	arg02, local02
01ebc     01 96 06 F6 | 	mov	arg03, #1
01ec0     B4 44 B2 FD | 	call	#__system__Mid_S
01ec4     3D C5 02 F6 | 	mov	local16, result1
01ec8                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01ec8     62 93 02 F6 | 	mov	arg01, local16
01ecc     48 2D B0 FD | 	call	#_isseparator
01ed0     00 7A 0E F2 | 	cmp	result1, #0 wz
01ed4     1C 00 90 AD |  if_e	jmp	#LR__0095
01ed8     61 AB 02 F6 | 	mov	local03, local15
01edc     02 AA 66 F0 | 	shl	local03, #2
01ee0     E7 B8 02 F6 | 	mov	local10, fp
01ee4     38 B8 06 F1 | 	add	local10, #56
01ee8     5C AB 02 F1 | 	add	local03, local10
01eec     55 A9 62 FC | 	wrlong	local02, local03
01ef0     01 C2 06 F1 | 	add	local15, #1
01ef4                 | LR__0095
01ef4     53 00 00 FF 
01ef8     48 65 06 F1 | 	add	objptr, ##42824
01efc     32 AD 02 FB | 	rdlong	local04, objptr
01f00     53 00 00 FF 
01f04     48 65 86 F1 | 	sub	objptr, ##42824
01f08     56 A9 5A F2 | 	cmps	local02, local04 wcz
01f0c     90 FF 9F ED |  if_be	jmp	#LR__0094
01f10     61 AB 02 F6 | 	mov	local03, local15
01f14     02 AA 66 F0 | 	shl	local03, #2
01f18     E7 B8 02 F6 | 	mov	local10, fp
01f1c     38 B8 06 F1 | 	add	local10, #56
01f20     5C AB 02 F1 | 	add	local03, local10
01f24     55 A9 62 FC | 	wrlong	local02, local03
01f28     00 C6 06 F6 | 	mov	local17, #0
01f2c                 | ' for i=0 to j-1 
01f2c     00 A8 06 F6 | 	mov	local02, #0
01f30     61 C9 02 F6 | 	mov	local18, local15
01f34                 | LR__0096
01f34     64 A9 52 F2 | 	cmps	local02, local18 wc
01f38     48 01 90 3D |  if_ae	jmp	#LR__0100
01f3c     54 AB 02 F6 | 	mov	local03, local02
01f40     02 AA 66 F0 | 	shl	local03, #2
01f44     38 CE 05 F1 | 	add	fp, #56
01f48     E7 AA 02 F1 | 	add	local03, fp
01f4c     55 AF 02 FB | 	rdlong	local05, local03
01f50     53 00 00 FF 
01f54     54 65 06 F1 | 	add	objptr, ##42836
01f58     32 AF 62 FC | 	wrlong	local05, objptr
01f5c     54 AB 02 F6 | 	mov	local03, local02
01f60     01 AA 06 F1 | 	add	local03, #1
01f64     02 AA 66 F0 | 	shl	local03, #2
01f68     E7 B8 02 F6 | 	mov	local10, fp
01f6c     E7 AA 02 F1 | 	add	local03, fp
01f70     55 AF 02 FB | 	rdlong	local05, local03
01f74     04 64 06 F1 | 	add	objptr, #4
01f78     32 AF 62 FC | 	wrlong	local05, objptr
01f7c                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f7c     04 64 86 F1 | 	sub	objptr, #4
01f80     32 AD 02 FB | 	rdlong	local04, objptr
01f84     53 00 00 FF 
01f88     54 65 86 F1 | 	sub	objptr, ##42836
01f8c     01 AC 56 F2 | 	cmps	local04, #1 wc
01f90     38 CE 85 F1 | 	sub	fp, #56
01f94     64 00 90 CD |  if_b	jmp	#LR__0098
01f98     38 00 00 FF 
01f9c     3C 64 06 F1 | 	add	objptr, ##28732
01fa0     32 93 02 FB | 	rdlong	arg01, objptr
01fa4     1B 00 00 FF 
01fa8     18 65 06 F1 | 	add	objptr, ##14104
01fac     32 95 02 FB | 	rdlong	arg02, objptr
01fb0     53 00 00 FF 
01fb4     54 65 86 F1 | 	sub	objptr, ##42836
01fb8     01 96 06 F6 | 	mov	arg03, #1
01fbc     B8 43 B2 FD | 	call	#__system__Mid_S
01fc0     3D CB 02 F6 | 	mov	local19, result1
01fc4     92 01 00 FF 
01fc8     31 95 06 F6 | 	mov	arg02, ##@LR__5499
01fcc     65 93 02 F6 | 	mov	arg01, local19
01fd0     0C 2A B2 FD | 	call	#__system___string_cmp
01fd4     00 7A 0E F2 | 	cmp	result1, #0 wz
01fd8     20 00 90 AD |  if_e	jmp	#LR__0097
01fdc     63 B9 02 F6 | 	mov	local10, local17
01fe0     03 B8 66 F0 | 	shl	local10, #3
01fe4     32 AF 02 F6 | 	mov	local05, objptr
01fe8     36 00 00 FF 
01fec     2C AE 06 F1 | 	add	local05, ##27692
01ff0     57 B9 02 F1 | 	add	local10, local05
01ff4     5C CB 62 FC | 	wrlong	local19, local10
01ff8     01 C6 06 F1 | 	add	local17, #1
01ffc                 | LR__0097
01ffc                 | LR__0098
01ffc     38 00 00 FF 
02000     3C 64 06 F1 | 	add	objptr, ##28732
02004     32 93 02 FB | 	rdlong	arg01, objptr
02008     1B 00 00 FF 
0200c     18 65 06 F1 | 	add	objptr, ##14104
02010     32 95 02 FB | 	rdlong	arg02, objptr
02014     01 94 06 F1 | 	add	arg02, #1
02018     04 64 06 F1 | 	add	objptr, #4
0201c     32 97 02 FB | 	rdlong	arg03, objptr
02020     04 64 86 F1 | 	sub	objptr, #4
02024     32 BB 02 FB | 	rdlong	local11, objptr
02028     53 00 00 FF 
0202c     54 65 86 F1 | 	sub	objptr, ##42836
02030     5D BD 02 F6 | 	mov	local12, local11
02034     5E 97 82 F1 | 	sub	arg03, local12
02038     01 96 86 F1 | 	sub	arg03, #1
0203c     38 43 B2 FD | 	call	#__system__Mid_S
02040     3D CB 02 F6 | 	mov	local19, result1
02044                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
02044     92 01 00 FF 
02048     32 95 06 F6 | 	mov	arg02, ##@LR__5500
0204c     65 93 02 F6 | 	mov	arg01, local19
02050     8C 29 B2 FD | 	call	#__system___string_cmp
02054     00 7A 0E F2 | 	cmp	result1, #0 wz
02058     20 00 90 AD |  if_e	jmp	#LR__0099
0205c     63 B9 02 F6 | 	mov	local10, local17
02060     03 B8 66 F0 | 	shl	local10, #3
02064     32 AF 02 F6 | 	mov	local05, objptr
02068     36 00 00 FF 
0206c     2C AE 06 F1 | 	add	local05, ##27692
02070     57 B9 02 F1 | 	add	local10, local05
02074     5C CB 62 FC | 	wrlong	local19, local10
02078     01 C6 06 F1 | 	add	local17, #1
0207c                 | LR__0099
0207c     01 A8 06 F1 | 	add	local02, #1
02080     B0 FE 9F FD | 	jmp	#LR__0096
02084                 | LR__0100
02084                 | ' 
02084                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
02084                 | ' 
02084                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
02084     38 00 00 FF 
02088     44 64 06 F1 | 	add	objptr, ##28740
0208c     32 AD 0A FB | 	rdlong	local04, objptr wz
02090     38 00 00 FF 
02094     44 64 86 F1 | 	sub	objptr, ##28740
02098     38 00 00 5F 
0209c     44 64 06 51 |  if_ne	add	objptr, ##28740
020a0     32 B9 02 5B |  if_ne	rdlong	local10, objptr
020a4     38 00 00 5F 
020a8     44 64 86 51 |  if_ne	sub	objptr, ##28740
020ac     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
020b0     C0 00 90 5D |  if_ne	jmp	#LR__0103
020b4     36 00 00 FF 
020b8     2C 64 06 F1 | 	add	objptr, ##27692
020bc     32 BB 02 FB | 	rdlong	local11, objptr
020c0     36 00 00 FF 
020c4     2C 64 86 F1 | 	sub	objptr, ##27692
020c8     5D 93 02 F6 | 	mov	arg01, local11
020cc     2C 50 B0 FD | 	call	#_isdec
020d0     3D BD 02 F6 | 	mov	local12, result1
020d4     5E B1 02 F6 | 	mov	local06, local12
020d8     07 B0 66 F7 | 	signx	local06, #7
020dc     58 B1 22 F6 | 	not	local06, local06
020e0     00 B0 0E F2 | 	cmp	local06, #0 wz
020e4     8C 00 90 AD |  if_e	jmp	#LR__0103
020e8     63 A9 02 F6 | 	mov	local02, local17
020ec     36 00 00 FF 
020f0     2C 64 06 F1 | 	add	objptr, ##27692
020f4     D7 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
020f8                 | LR__0101
020f8     54 AF 02 F6 | 	mov	local05, local02
020fc     01 AE 86 F1 | 	sub	local05, #1
02100     03 AE 66 F0 | 	shl	local05, #3
02104     32 AF 02 F1 | 	add	local05, objptr
02108     57 AD 02 FB | 	rdlong	local04, local05
0210c     54 B1 02 F6 | 	mov	local06, local02
02110     01 B0 86 F1 | 	sub	local06, #1
02114     03 B0 66 F0 | 	shl	local06, #3
02118     32 B1 02 F1 | 	add	local06, objptr
0211c     04 B0 06 F1 | 	add	local06, #4
02120     58 AB 02 FB | 	rdlong	local03, local06
02124     54 B1 02 F6 | 	mov	local06, local02
02128     03 B0 66 F0 | 	shl	local06, #3
0212c     32 BD 02 F6 | 	mov	local12, objptr
02130     32 B1 02 F1 | 	add	local06, objptr
02134     58 AD 62 FC | 	wrlong	local04, local06
02138     54 BB 02 F6 | 	mov	local11, local02
0213c     5D BF 02 F6 | 	mov	local13, local11
02140     03 BE 66 F0 | 	shl	local13, #3
02144     32 BF 02 F1 | 	add	local13, objptr
02148     04 BE 06 F1 | 	add	local13, #4
0214c     5F AB 62 FC | 	wrlong	local03, local13
02150     01 A8 86 F1 | 	sub	local02, #1
02154     01 A8 56 F2 | 	cmps	local02, #1 wc
02158     9C FF 9F 3D |  if_ae	jmp	#LR__0101
0215c                 | LR__0102
0215c     92 01 00 FF 
02160     33 AD 06 F6 | 	mov	local04, ##@LR__5501
02164     32 AD 62 FC | 	wrlong	local04, objptr
02168     36 00 00 FF 
0216c     2C 64 86 F1 | 	sub	objptr, ##27692
02170     01 C6 06 F1 | 	add	local17, #1
02174                 | LR__0103
02174     00 A8 06 F6 | 	mov	local02, #0
02178                 | ' 
02178                 | ' ' 1e : find strings
02178                 | ' 
02178                 | ' i=0
02178                 | ' do
02178                 | LR__0104
02178                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
02178     54 AF 02 F6 | 	mov	local05, local02
0217c     03 AE 66 F0 | 	shl	local05, #3
02180     32 B1 02 F6 | 	mov	local06, objptr
02184     36 00 00 FF 
02188     2C B0 06 F1 | 	add	local06, ##27692
0218c     58 AF 02 F1 | 	add	local05, local06
02190     57 93 02 FB | 	rdlong	arg01, local05
02194     92 01 00 FF 
02198     35 95 06 F6 | 	mov	arg02, ##@LR__5502
0219c     40 28 B2 FD | 	call	#__system___string_cmp
021a0     00 7A 0E F2 | 	cmp	result1, #0 wz
021a4     01 A8 06 51 |  if_ne	add	local02, #1
021a8     20 01 90 5D |  if_ne	jmp	#LR__0109
021ac     54 CD 02 F6 | 	mov	local20, local02
021b0                 | LR__0105
021b0     54 B9 02 F6 | 	mov	local10, local02
021b4     01 B8 06 F1 | 	add	local10, #1
021b8     03 B8 66 F0 | 	shl	local10, #3
021bc     36 00 00 FF 
021c0     2C 64 06 F1 | 	add	objptr, ##27692
021c4     32 B9 02 F1 | 	add	local10, objptr
021c8     5C CB 02 FB | 	rdlong	local19, local10
021cc     66 B9 02 F6 | 	mov	local10, local20
021d0     03 B8 66 F0 | 	shl	local10, #3
021d4     32 B9 02 F1 | 	add	local10, objptr
021d8     66 BB 02 F6 | 	mov	local11, local20
021dc     5D C1 02 F6 | 	mov	local14, local11
021e0     03 C0 66 F0 | 	shl	local14, #3
021e4     32 C1 02 F1 | 	add	local14, objptr
021e8     60 93 02 FB | 	rdlong	arg01, local14
021ec     65 BD 02 F6 | 	mov	local12, local19
021f0     5E 95 02 F6 | 	mov	arg02, local12
021f4     36 00 00 FF 
021f8     2C 64 86 F1 | 	sub	objptr, ##27692
021fc     14 28 B2 FD | 	call	#__system___string_concat
02200     5C 7B 62 FC | 	wrlong	result1, local10
02204     54 C3 02 F6 | 	mov	local15, local02
02208     01 C2 06 F1 | 	add	local15, #1
0220c     63 CF 02 F6 | 	mov	local21, local17
02210     01 CE 06 F1 | 	add	local21, #1
02214     D7 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02218                 | LR__0106
02218     67 C3 52 F2 | 	cmps	local15, local21 wc
0221c     70 00 90 3D |  if_ae	jmp	#LR__0108
02220     61 AF 02 F6 | 	mov	local05, local15
02224     01 AE 06 F1 | 	add	local05, #1
02228     03 AE 66 F0 | 	shl	local05, #3
0222c     36 00 00 FF 
02230     2C 64 06 F1 | 	add	objptr, ##27692
02234     32 AF 02 F1 | 	add	local05, objptr
02238     57 AD 02 FB | 	rdlong	local04, local05
0223c     61 B1 02 F6 | 	mov	local06, local15
02240     01 B0 06 F1 | 	add	local06, #1
02244     03 B0 66 F0 | 	shl	local06, #3
02248     32 B1 02 F1 | 	add	local06, objptr
0224c     04 B0 06 F1 | 	add	local06, #4
02250     58 AB 02 FB | 	rdlong	local03, local06
02254     61 B1 02 F6 | 	mov	local06, local15
02258     03 B0 66 F0 | 	shl	local06, #3
0225c     32 BD 02 F6 | 	mov	local12, objptr
02260     32 B1 02 F1 | 	add	local06, objptr
02264     58 AD 62 FC | 	wrlong	local04, local06
02268     61 BB 02 F6 | 	mov	local11, local15
0226c     5D BF 02 F6 | 	mov	local13, local11
02270     03 BE 66 F0 | 	shl	local13, #3
02274     32 BF 02 F1 | 	add	local13, objptr
02278     04 BE 06 F1 | 	add	local13, #4
0227c     5F AB 62 FC | 	wrlong	local03, local13
02280     01 C2 06 F1 | 	add	local15, #1
02284     36 00 00 FF 
02288     2C 64 86 F1 | 	sub	objptr, ##27692
0228c     88 FF 9F FD | 	jmp	#LR__0106
02290                 | LR__0107
02290                 | LR__0108
02290     01 C6 86 F1 | 	sub	local17, #1
02294     92 01 00 FF 
02298     37 95 06 F6 | 	mov	arg02, ##@LR__5503
0229c     65 93 02 F6 | 	mov	arg01, local19
022a0     3C 27 B2 FD | 	call	#__system___string_cmp
022a4     00 7A 0E F2 | 	cmp	result1, #0 wz
022a8     63 A9 52 52 |  if_ne	cmps	local02, local17 wc
022ac     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
022b0                 | '   if p$<>"""" then k+=1:i+=1
022b0     92 01 00 FF 
022b4     39 95 06 F6 | 	mov	arg02, ##@LR__5504
022b8     65 93 02 F6 | 	mov	arg01, local19
022bc     20 27 B2 FD | 	call	#__system___string_cmp
022c0     00 7A 0E F2 | 	cmp	result1, #0 wz
022c4     01 C6 06 51 |  if_ne	add	local17, #1
022c8     01 A8 06 51 |  if_ne	add	local02, #1
022cc                 | LR__0109
022cc     63 A9 52 F2 | 	cmps	local02, local17 wc
022d0     A4 FE 9F CD |  if_b	jmp	#LR__0104
022d4     00 A8 06 F6 | 	mov	local02, #0
022d8                 | ' 
022d8                 | ' ' 1f : concatenate strings if "" detected between
022d8                 | '  
022d8                 | ' i=0
022d8                 | ' do
022d8                 | LR__0110
022d8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
022d8     54 AF 02 F6 | 	mov	local05, local02
022dc     03 AE 66 F0 | 	shl	local05, #3
022e0     32 B1 02 F6 | 	mov	local06, objptr
022e4     36 00 00 FF 
022e8     2C B0 06 F1 | 	add	local06, ##27692
022ec     58 AF 02 F1 | 	add	local05, local06
022f0     57 93 02 FB | 	rdlong	arg01, local05
022f4     01 94 06 F6 | 	mov	arg02, #1
022f8     EC 3F B2 FD | 	call	#__system__Right_S
022fc     3D 93 02 F6 | 	mov	arg01, result1
02300     92 01 00 FF 
02304     3B 95 06 F6 | 	mov	arg02, ##@LR__5505
02308     D4 26 B2 FD | 	call	#__system___string_cmp
0230c     00 7A 0E F2 | 	cmp	result1, #0 wz
02310     74 01 90 5D |  if_ne	jmp	#LR__0116
02314     54 B1 02 F6 | 	mov	local06, local02
02318     01 B0 06 F1 | 	add	local06, #1
0231c     03 B0 66 F0 | 	shl	local06, #3
02320     32 BD 02 F6 | 	mov	local12, objptr
02324     36 00 00 FF 
02328     2C BC 06 F1 | 	add	local12, ##27692
0232c     5E B1 02 F1 | 	add	local06, local12
02330     58 93 02 FB | 	rdlong	arg01, local06
02334     01 94 06 F6 | 	mov	arg02, #1
02338     24 3F B2 FD | 	call	#__system__Left_S
0233c     3D 93 02 F6 | 	mov	arg01, result1
02340     92 01 00 FF 
02344     3D 95 06 F6 | 	mov	arg02, ##@LR__5506
02348     94 26 B2 FD | 	call	#__system___string_cmp
0234c     00 7A 0E F2 | 	cmp	result1, #0 wz
02350     34 01 90 5D |  if_ne	jmp	#LR__0116
02354     54 B9 02 F6 | 	mov	local10, local02
02358     03 B8 66 F0 | 	shl	local10, #3
0235c     36 00 00 FF 
02360     2C 64 06 F1 | 	add	objptr, ##27692
02364     32 B9 02 F1 | 	add	local10, objptr
02368     54 C1 02 F6 | 	mov	local14, local02
0236c     03 C0 66 F0 | 	shl	local14, #3
02370     32 C1 02 F1 | 	add	local14, objptr
02374     60 B1 02 FB | 	rdlong	local06, local14
02378     54 BF 02 F6 | 	mov	local13, local02
0237c     01 BE 06 F1 | 	add	local13, #1
02380     03 BE 66 F0 | 	shl	local13, #3
02384     32 BF 02 F1 | 	add	local13, objptr
02388     5F BD 02 FB | 	rdlong	local12, local13
0238c     54 D1 02 F6 | 	mov	local22, local02
02390     01 D0 06 F1 | 	add	local22, #1
02394     68 D3 02 F6 | 	mov	local23, local22
02398     03 D2 66 F0 | 	shl	local23, #3
0239c     32 D5 02 F6 | 	mov	local24, objptr
023a0     32 D3 02 F1 | 	add	local23, objptr
023a4     69 93 02 FB | 	rdlong	arg01, local23
023a8     36 00 00 FF 
023ac     2C 64 86 F1 | 	sub	objptr, ##27692
023b0     49 B3 02 F6 | 	mov	local07, arg01
023b4     D7 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
023b8                 | LR__0111
023b8     59 7B CA FA | 	rdbyte	result1, local07 wz
023bc     01 B2 06 51 |  if_ne	add	local07, #1
023c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
023c4                 | LR__0112
023c4     49 B3 82 F1 | 	sub	local07, arg01
023c8     59 BB 02 F6 | 	mov	local11, local07
023cc     01 BA 86 F1 | 	sub	local11, #1
023d0     5E 93 02 F6 | 	mov	arg01, local12
023d4     5D 95 02 F6 | 	mov	arg02, local11
023d8     0C 3F B2 FD | 	call	#__system__Right_S
023dc     3D BD 02 F6 | 	mov	local12, result1
023e0     58 93 02 F6 | 	mov	arg01, local06
023e4     5E 95 02 F6 | 	mov	arg02, local12
023e8     28 26 B2 FD | 	call	#__system___string_concat
023ec     3D B1 02 F6 | 	mov	local06, result1
023f0     5C B1 62 FC | 	wrlong	local06, local10
023f4                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
023f4     54 C3 02 F6 | 	mov	local15, local02
023f8     01 C2 06 F1 | 	add	local15, #1
023fc     63 D7 02 F6 | 	mov	local25, local17
02400     01 D6 06 F1 | 	add	local25, #1
02404     D7 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02408                 | LR__0113
02408     6B C3 52 F2 | 	cmps	local15, local25 wc
0240c     70 00 90 3D |  if_ae	jmp	#LR__0115
02410     61 AF 02 F6 | 	mov	local05, local15
02414     01 AE 06 F1 | 	add	local05, #1
02418     03 AE 66 F0 | 	shl	local05, #3
0241c     36 00 00 FF 
02420     2C 64 06 F1 | 	add	objptr, ##27692
02424     32 AF 02 F1 | 	add	local05, objptr
02428     57 AD 02 FB | 	rdlong	local04, local05
0242c     61 B1 02 F6 | 	mov	local06, local15
02430     01 B0 06 F1 | 	add	local06, #1
02434     03 B0 66 F0 | 	shl	local06, #3
02438     32 B1 02 F1 | 	add	local06, objptr
0243c     04 B0 06 F1 | 	add	local06, #4
02440     58 AB 02 FB | 	rdlong	local03, local06
02444     61 B1 02 F6 | 	mov	local06, local15
02448     03 B0 66 F0 | 	shl	local06, #3
0244c     32 BD 02 F6 | 	mov	local12, objptr
02450     32 B1 02 F1 | 	add	local06, objptr
02454     58 AD 62 FC | 	wrlong	local04, local06
02458     61 BB 02 F6 | 	mov	local11, local15
0245c     5D BF 02 F6 | 	mov	local13, local11
02460     03 BE 66 F0 | 	shl	local13, #3
02464     32 BF 02 F1 | 	add	local13, objptr
02468     04 BE 06 F1 | 	add	local13, #4
0246c     5F AB 62 FC | 	wrlong	local03, local13
02470     01 C2 06 F1 | 	add	local15, #1
02474     36 00 00 FF 
02478     2C 64 86 F1 | 	sub	objptr, ##27692
0247c     88 FF 9F FD | 	jmp	#LR__0113
02480                 | LR__0114
02480                 | LR__0115
02480     01 A8 86 F1 | 	sub	local02, #1
02484     01 C6 86 F1 | 	sub	local17, #1
02488                 | LR__0116
02488     01 A8 06 F1 | 	add	local02, #1
0248c     63 A9 52 F2 | 	cmps	local02, local17 wc
02490     44 FE 9F CD |  if_b	jmp	#LR__0110
02494     00 A8 06 F6 | 	mov	local02, #0
02498                 | '  
02498                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
02498                 | '  
02498                 | ' i=0 
02498                 | ' do
02498                 | LR__0117
02498     54 B9 02 F6 | 	mov	local10, local02
0249c     03 B8 66 F0 | 	shl	local10, #3
024a0     36 00 00 FF 
024a4     2C 64 06 F1 | 	add	objptr, ##27692
024a8     32 B9 02 F1 | 	add	local10, objptr
024ac     5C D9 02 FB | 	rdlong	local26, local10
024b0     54 B9 02 F6 | 	mov	local10, local02
024b4     01 B8 06 F1 | 	add	local10, #1
024b8     03 B8 66 F0 | 	shl	local10, #3
024bc     32 B9 02 F1 | 	add	local10, objptr
024c0     5C DB 02 FB | 	rdlong	local27, local10
024c4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
024c4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
024c4     92 01 00 FF 
024c8     3F 95 06 F6 | 	mov	arg02, ##@LR__5507
024cc     6C 93 02 F6 | 	mov	arg01, local26
024d0     36 00 00 FF 
024d4     2C 64 86 F1 | 	sub	objptr, ##27692
024d8     04 25 B2 FD | 	call	#__system___string_cmp
024dc     00 7A 0E F2 | 	cmp	result1, #0 wz
024e0     A8 00 90 AD |  if_e	jmp	#LR__0118
024e4     92 01 00 FF 
024e8     41 95 06 F6 | 	mov	arg02, ##@LR__5508
024ec     6C 93 02 F6 | 	mov	arg01, local26
024f0     EC 24 B2 FD | 	call	#__system___string_cmp
024f4     3D AB 0A F6 | 	mov	local03, result1 wz
024f8     90 00 90 AD |  if_e	jmp	#LR__0118
024fc     92 01 00 FF 
02500     43 B1 06 F6 | 	mov	local06, ##@LR__5509
02504     6C 93 02 F6 | 	mov	arg01, local26
02508     58 95 02 F6 | 	mov	arg02, local06
0250c     D0 24 B2 FD | 	call	#__system___string_cmp
02510     00 7A 0E F2 | 	cmp	result1, #0 wz
02514     74 00 90 AD |  if_e	jmp	#LR__0118
02518     92 01 00 FF 
0251c     45 BD 06 F6 | 	mov	local12, ##@LR__5510
02520     6C 93 02 F6 | 	mov	arg01, local26
02524     5E 95 02 F6 | 	mov	arg02, local12
02528     B4 24 B2 FD | 	call	#__system___string_cmp
0252c     00 7A 0E F2 | 	cmp	result1, #0 wz
02530     58 00 90 AD |  if_e	jmp	#LR__0118
02534     92 01 00 FF 
02538     47 BB 06 F6 | 	mov	local11, ##@LR__5511
0253c     5D BD 02 F6 | 	mov	local12, local11
02540     6C 93 02 F6 | 	mov	arg01, local26
02544     5E 95 02 F6 | 	mov	arg02, local12
02548     94 24 B2 FD | 	call	#__system___string_cmp
0254c     3D B1 0A F6 | 	mov	local06, result1 wz
02550     38 00 90 AD |  if_e	jmp	#LR__0118
02554     92 01 00 FF 
02558     49 BB 06 F6 | 	mov	local11, ##@LR__5512
0255c     6C 93 02 F6 | 	mov	arg01, local26
02560     5D 95 02 F6 | 	mov	arg02, local11
02564     78 24 B2 FD | 	call	#__system___string_cmp
02568     3D BD 0A F6 | 	mov	local12, result1 wz
0256c     1C 00 90 AD |  if_e	jmp	#LR__0118
02570     92 01 00 FF 
02574     4B C1 06 F6 | 	mov	local14, ##@LR__5513
02578     6C 93 02 F6 | 	mov	arg01, local26
0257c     60 95 02 F6 | 	mov	arg02, local14
02580     5C 24 B2 FD | 	call	#__system___string_cmp
02584     3D BB 0A F6 | 	mov	local11, result1 wz
02588     20 00 90 5D |  if_ne	jmp	#LR__0119
0258c                 | LR__0118
0258c     92 01 00 FF 
02590     4D DD 06 F6 | 	mov	local28, ##@LR__5514
02594     6E BF 02 F6 | 	mov	local13, local28
02598     6D 93 02 F6 | 	mov	arg01, local27
0259c     5F 95 02 F6 | 	mov	arg02, local13
025a0     3C 24 B2 FD | 	call	#__system___string_cmp
025a4     3D C1 0A F6 | 	mov	local14, result1 wz
025a8     B8 00 90 AD |  if_e	jmp	#LR__0122
025ac                 | LR__0119
025ac     92 01 00 FF 
025b0     4F DD 06 F6 | 	mov	local28, ##@LR__5515
025b4     6C 93 02 F6 | 	mov	arg01, local26
025b8     6E 95 02 F6 | 	mov	arg02, local28
025bc     20 24 B2 FD | 	call	#__system___string_cmp
025c0     3D BF 0A F6 | 	mov	local13, result1 wz
025c4     20 00 90 5D |  if_ne	jmp	#LR__0120
025c8     92 01 00 FF 
025cc     51 D3 06 F6 | 	mov	local23, ##@LR__5516
025d0     69 D1 02 F6 | 	mov	local22, local23
025d4     6D 93 02 F6 | 	mov	arg01, local27
025d8     68 95 02 F6 | 	mov	arg02, local22
025dc     00 24 B2 FD | 	call	#__system___string_cmp
025e0     3D DD 0A F6 | 	mov	local28, result1 wz
025e4     7C 00 90 AD |  if_e	jmp	#LR__0122
025e8                 | LR__0120
025e8     92 01 00 FF 
025ec     53 D3 06 F6 | 	mov	local23, ##@LR__5517
025f0     6C 93 02 F6 | 	mov	arg01, local26
025f4     69 95 02 F6 | 	mov	arg02, local23
025f8     E4 23 B2 FD | 	call	#__system___string_cmp
025fc     3D D1 0A F6 | 	mov	local22, result1 wz
02600     20 00 90 5D |  if_ne	jmp	#LR__0121
02604     92 01 00 FF 
02608     55 DF 06 F6 | 	mov	local29, ##@LR__5518
0260c     6F D5 02 F6 | 	mov	local24, local29
02610     6D 93 02 F6 | 	mov	arg01, local27
02614     6A 95 02 F6 | 	mov	arg02, local24
02618     C4 23 B2 FD | 	call	#__system___string_cmp
0261c     3D D3 0A F6 | 	mov	local23, result1 wz
02620     40 00 90 AD |  if_e	jmp	#LR__0122
02624                 | LR__0121
02624     92 01 00 FF 
02628     57 E1 06 F6 | 	mov	local30, ##@LR__5519
0262c     70 DF 02 F6 | 	mov	local29, local30
02630     6C 93 02 F6 | 	mov	arg01, local26
02634     6F 95 02 F6 | 	mov	arg02, local29
02638     A4 23 B2 FD | 	call	#__system___string_cmp
0263c     3D D5 0A F6 | 	mov	local24, result1 wz
02640     EC 00 90 5D |  if_ne	jmp	#LR__0126
02644     92 01 00 FF 
02648     59 E3 06 F6 | 	mov	local31, ##@LR__5520
0264c     71 E1 02 F6 | 	mov	local30, local31
02650     6D 93 02 F6 | 	mov	arg01, local27
02654     70 95 02 F6 | 	mov	arg02, local30
02658     84 23 B2 FD | 	call	#__system___string_cmp
0265c     3D DF 0A F6 | 	mov	local29, result1 wz
02660     CC 00 90 5D |  if_ne	jmp	#LR__0126
02664                 | LR__0122
02664     54 B9 02 F6 | 	mov	local10, local02
02668     03 B8 66 F0 | 	shl	local10, #3
0266c     32 AF 02 F6 | 	mov	local05, objptr
02670     36 00 00 FF 
02674     2C AE 06 F1 | 	add	local05, ##27692
02678     57 B9 02 F1 | 	add	local10, local05
0267c     6D BD 02 F6 | 	mov	local12, local27
02680     6C 93 02 F6 | 	mov	arg01, local26
02684     5E 95 02 F6 | 	mov	arg02, local12
02688     88 23 B2 FD | 	call	#__system___string_concat
0268c     5C 7B 62 FC | 	wrlong	result1, local10
02690                 | '     lparts(i).part$=s1$+s2$
02690                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02690     54 C3 02 F6 | 	mov	local15, local02
02694     01 C2 06 F1 | 	add	local15, #1
02698     63 E5 02 F6 | 	mov	local32, local17
0269c     01 E4 06 F1 | 	add	local32, #1
026a0     D7 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
026a4                 | LR__0123
026a4     72 C3 52 F2 | 	cmps	local15, local32 wc
026a8     7C 00 90 3D |  if_ae	jmp	#LR__0125
026ac     61 AF 02 F6 | 	mov	local05, local15
026b0     01 AE 06 F1 | 	add	local05, #1
026b4     03 AE 66 F0 | 	shl	local05, #3
026b8     36 00 00 FF 
026bc     2C 64 06 F1 | 	add	objptr, ##27692
026c0     32 AF 02 F1 | 	add	local05, objptr
026c4     57 AD 02 FB | 	rdlong	local04, local05
026c8     61 B1 02 F6 | 	mov	local06, local15
026cc     01 B0 06 F1 | 	add	local06, #1
026d0     03 B0 66 F0 | 	shl	local06, #3
026d4     32 B1 02 F1 | 	add	local06, objptr
026d8     04 B0 06 F1 | 	add	local06, #4
026dc     58 AB 02 FB | 	rdlong	local03, local06
026e0     61 B1 02 F6 | 	mov	local06, local15
026e4     03 B0 66 F0 | 	shl	local06, #3
026e8     32 BD 02 F6 | 	mov	local12, objptr
026ec     32 B1 02 F1 | 	add	local06, objptr
026f0     58 AD 62 FC | 	wrlong	local04, local06
026f4     61 BB 02 F6 | 	mov	local11, local15
026f8     5D C1 02 F6 | 	mov	local14, local11
026fc     60 BF 02 F6 | 	mov	local13, local14
02700     03 BE 66 F0 | 	shl	local13, #3
02704     32 DD 02 F6 | 	mov	local28, objptr
02708     32 BF 02 F1 | 	add	local13, objptr
0270c     04 BE 06 F1 | 	add	local13, #4
02710     5F AB 62 FC | 	wrlong	local03, local13
02714     04 BE 86 F1 | 	sub	local13, #4
02718     01 C2 06 F1 | 	add	local15, #1
0271c     36 00 00 FF 
02720     2C 64 86 F1 | 	sub	objptr, ##27692
02724     7C FF 9F FD | 	jmp	#LR__0123
02728                 | LR__0124
02728                 | LR__0125
02728     01 A8 86 F1 | 	sub	local02, #1
0272c     01 C6 86 F1 | 	sub	local17, #1
02730                 | LR__0126
02730     01 A8 06 F1 | 	add	local02, #1
02734     63 A9 52 F2 | 	cmps	local02, local17 wc
02738     5C FD 9F CD |  if_b	jmp	#LR__0117
0273c                 | '  
0273c                 | ' ' 1h : now remove parts that are spaces
0273c                 | ' 
0273c                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
0273c     00 A8 06 F6 | 	mov	local02, #0
02740     63 E7 02 F6 | 	mov	local33, local17
02744     01 E6 06 F1 | 	add	local33, #1
02748                 | LR__0127
02748     73 A9 52 F2 | 	cmps	local02, local33 wc
0274c     50 00 90 3D |  if_ae	jmp	#LR__0128
02750     54 B9 02 F6 | 	mov	local10, local02
02754     03 B8 66 F0 | 	shl	local10, #3
02758     36 00 00 FF 
0275c     2C 64 06 F1 | 	add	objptr, ##27692
02760     32 B9 02 F1 | 	add	local10, objptr
02764     54 BD 02 F6 | 	mov	local12, local02
02768     5E BB 02 F6 | 	mov	local11, local12
0276c     5D C1 02 F6 | 	mov	local14, local11
02770     03 C0 66 F0 | 	shl	local14, #3
02774     32 BF 02 F6 | 	mov	local13, objptr
02778     32 C1 02 F1 | 	add	local14, objptr
0277c     60 93 02 FB | 	rdlong	arg01, local14
02780     36 00 00 FF 
02784     2C 64 86 F1 | 	sub	objptr, ##27692
02788     64 3F B2 FD | 	call	#__system__RTrim_S
0278c     3D 93 02 F6 | 	mov	arg01, result1
02790     9C 3E B2 FD | 	call	#__system__LTrim_S
02794     5C 7B 62 FC | 	wrlong	result1, local10
02798     01 A8 06 F1 | 	add	local02, #1
0279c     A8 FF 9F FD | 	jmp	#LR__0127
027a0                 | LR__0128
027a0     00 A8 06 F6 | 	mov	local02, #0
027a4     D7 86 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
027a8                 | ' i=0
027a8                 | ' do 
027a8                 | LR__0129
027a8                 | '   if len(lparts(i).part$)=0 then 
027a8     54 AF 02 F6 | 	mov	local05, local02
027ac     03 AE 66 F0 | 	shl	local05, #3
027b0     32 B1 02 F6 | 	mov	local06, objptr
027b4     36 00 00 FF 
027b8     2C B0 06 F1 | 	add	local06, ##27692
027bc     58 AF 02 F1 | 	add	local05, local06
027c0     57 93 02 FB | 	rdlong	arg01, local05
027c4     49 B3 02 F6 | 	mov	local07, arg01
027c8                 | LR__0130
027c8     59 7B CA FA | 	rdbyte	result1, local07 wz
027cc     01 B2 06 51 |  if_ne	add	local07, #1
027d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
027d4     49 B3 8A F1 | 	sub	local07, arg01 wz
027d8     C4 00 90 5D |  if_ne	jmp	#LR__0134
027dc                 | '     if i=k-1 then k-=1  :  exit
027dc     63 AD 02 F6 | 	mov	local04, local17
027e0     01 AC 86 F1 | 	sub	local04, #1
027e4     56 A9 0A F2 | 	cmp	local02, local04 wz
027e8     01 C6 86 A1 |  if_e	sub	local17, #1
027ec     C4 00 90 AD |  if_e	jmp	#LR__0136
027f0                 | '     if i<k-1 then 
027f0     63 AD 02 F6 | 	mov	local04, local17
027f4     01 AC 86 F1 | 	sub	local04, #1
027f8     56 A9 52 F2 | 	cmps	local02, local04 wc
027fc     A0 00 90 3D |  if_ae	jmp	#LR__0133
02800                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02800     54 C3 02 F6 | 	mov	local15, local02
02804     63 E9 02 F6 | 	mov	local34, local17
02808     01 E8 86 F1 | 	sub	local34, #1
0280c                 | LR__0131
0280c     74 C3 52 F2 | 	cmps	local15, local34 wc
02810     80 00 90 3D |  if_ae	jmp	#LR__0132
02814     61 AF 02 F6 | 	mov	local05, local15
02818     01 AE 06 F1 | 	add	local05, #1
0281c     03 AE 66 F0 | 	shl	local05, #3
02820     36 00 00 FF 
02824     2C 64 06 F1 | 	add	objptr, ##27692
02828     32 AF 02 F1 | 	add	local05, objptr
0282c     57 AD 02 FB | 	rdlong	local04, local05
02830     61 B1 02 F6 | 	mov	local06, local15
02834     01 B0 06 F1 | 	add	local06, #1
02838     03 B0 66 F0 | 	shl	local06, #3
0283c     32 B1 02 F1 | 	add	local06, objptr
02840     04 B0 06 F1 | 	add	local06, #4
02844     58 AB 02 FB | 	rdlong	local03, local06
02848     61 B9 02 F6 | 	mov	local10, local15
0284c     5C B1 02 F6 | 	mov	local06, local10
02850     03 B0 66 F0 | 	shl	local06, #3
02854     32 BD 02 F6 | 	mov	local12, objptr
02858     32 B1 02 F1 | 	add	local06, objptr
0285c     58 AD 62 FC | 	wrlong	local04, local06
02860     61 BB 02 F6 | 	mov	local11, local15
02864     5D C1 02 F6 | 	mov	local14, local11
02868     60 BF 02 F6 | 	mov	local13, local14
0286c     03 BE 66 F0 | 	shl	local13, #3
02870     32 DD 02 F6 | 	mov	local28, objptr
02874     32 BF 02 F1 | 	add	local13, objptr
02878     04 BE 06 F1 | 	add	local13, #4
0287c     5F AB 62 FC | 	wrlong	local03, local13
02880     04 BE 86 F1 | 	sub	local13, #4
02884     01 C2 06 F1 | 	add	local15, #1
02888     36 00 00 FF 
0288c     2C 64 86 F1 | 	sub	objptr, ##27692
02890     78 FF 9F FD | 	jmp	#LR__0131
02894                 | LR__0132
02894     01 C6 86 F1 | 	sub	local17, #1
02898                 | '       if i>0 then i-=1 
02898     01 A8 56 F2 | 	cmps	local02, #1 wc
0289c     01 A8 86 31 |  if_ae	sub	local02, #1
028a0                 | LR__0133
028a0                 | LR__0134
028a0     01 A8 06 F1 | 	add	local02, #1
028a4     63 AD 02 F6 | 	mov	local04, local17
028a8     01 AC 86 F1 | 	sub	local04, #1
028ac     56 A9 5A F2 | 	cmps	local02, local04 wcz
028b0     F4 FE 9F ED |  if_be	jmp	#LR__0129
028b4                 | LR__0135
028b4                 | LR__0136
028b4                 | ' 
028b4                 | ' ' 1i: lowercase all that is not a string
028b4                 | ' 
028b4                 | ' for j=0 to k-1
028b4     00 C2 06 F6 | 	mov	local15, #0
028b8     63 EB 02 F6 | 	mov	local35, local17
028bc                 | LR__0137
028bc     75 C3 52 F2 | 	cmps	local15, local35 wc
028c0     C0 00 90 3D |  if_ae	jmp	#LR__0140
028c4                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
028c4     61 AF 02 F6 | 	mov	local05, local15
028c8     03 AE 66 F0 | 	shl	local05, #3
028cc     32 B1 02 F6 | 	mov	local06, objptr
028d0     36 00 00 FF 
028d4     2C B0 06 F1 | 	add	local06, ##27692
028d8     58 AF 02 F1 | 	add	local05, local06
028dc     57 93 02 FB | 	rdlong	arg01, local05
028e0     01 94 06 F6 | 	mov	arg02, #1
028e4     78 39 B2 FD | 	call	#__system__Left_S
028e8     3D 93 02 F6 | 	mov	arg01, result1
028ec     92 01 00 FF 
028f0     5B 95 06 F6 | 	mov	arg02, ##@LR__5521
028f4     E8 20 B2 FD | 	call	#__system___string_cmp
028f8     00 7A 0E F2 | 	cmp	result1, #0 wz
028fc     3C 00 90 5D |  if_ne	jmp	#LR__0138
02900     61 B1 02 F6 | 	mov	local06, local15
02904     03 B0 66 F0 | 	shl	local06, #3
02908     32 BD 02 F6 | 	mov	local12, objptr
0290c     36 00 00 FF 
02910     2C BC 06 F1 | 	add	local12, ##27692
02914     5E B1 02 F1 | 	add	local06, local12
02918     58 93 02 FB | 	rdlong	arg01, local06
0291c     01 94 06 F6 | 	mov	arg02, #1
02920     C4 39 B2 FD | 	call	#__system__Right_S
02924     3D 93 02 F6 | 	mov	arg01, result1
02928     92 01 00 FF 
0292c     5D 95 06 F6 | 	mov	arg02, ##@LR__5522
02930     AC 20 B2 FD | 	call	#__system___string_cmp
02934     00 7A 0E F2 | 	cmp	result1, #0 wz
02938     40 00 90 AD |  if_e	jmp	#LR__0139
0293c                 | LR__0138
0293c     61 B9 02 F6 | 	mov	local10, local15
02940     03 B8 66 F0 | 	shl	local10, #3
02944     36 00 00 FF 
02948     2C 64 06 F1 | 	add	objptr, ##27692
0294c     32 B9 02 F1 | 	add	local10, objptr
02950     61 BD 02 F6 | 	mov	local12, local15
02954     5E BB 02 F6 | 	mov	local11, local12
02958     5D C1 02 F6 | 	mov	local14, local11
0295c     03 C0 66 F0 | 	shl	local14, #3
02960     32 BF 02 F6 | 	mov	local13, objptr
02964     32 C1 02 F1 | 	add	local14, objptr
02968     60 93 02 FB | 	rdlong	arg01, local14
0296c     36 00 00 FF 
02970     2C 64 86 F1 | 	sub	objptr, ##27692
02974     F8 3B B2 FD | 	call	#__system__LCase_S
02978     5C 7B 62 FC | 	wrlong	result1, local10
0297c                 | LR__0139
0297c     01 C2 06 F1 | 	add	local15, #1
02980     38 FF 9F FD | 	jmp	#LR__0137
02984                 | LR__0140
02984                 | ' 
02984                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
02984                 | ' 
02984                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
02984     00 A8 06 F6 | 	mov	local02, #0
02988     63 ED 02 F6 | 	mov	local36, local17
0298c     01 EC 06 F1 | 	add	local36, #1
02990     D7 1A 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
02994                 | LR__0141
02994     76 A9 52 F2 | 	cmps	local02, local36 wc
02998     2C 00 90 3D |  if_ae	jmp	#LR__0143
0299c     54 B9 02 F6 | 	mov	local10, local02
029a0     03 B8 66 F0 | 	shl	local10, #3
029a4     32 AF 02 F6 | 	mov	local05, objptr
029a8     36 00 00 FF 
029ac     2C AE 06 F1 | 	add	local05, ##27692
029b0     57 B9 02 F1 | 	add	local10, local05
029b4     04 B8 06 F1 | 	add	local10, #4
029b8     FF FF FF FF 
029bc     5C FF 6B FC | 	wrlong	##-1, local10
029c0     01 A8 06 F1 | 	add	local02, #1
029c4     CC FF 9F FD | 	jmp	#LR__0141
029c8                 | LR__0142
029c8                 | LR__0143
029c8                 | ' 
029c8                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
029c8     36 00 00 FF 
029cc     2C 64 06 F1 | 	add	objptr, ##27692
029d0     32 93 02 FB | 	rdlong	arg01, objptr
029d4     36 00 00 FF 
029d8     2C 64 86 F1 | 	sub	objptr, ##27692
029dc     1C 47 B0 FD | 	call	#_isdec
029e0     00 7A 0E F2 | 	cmp	result1, #0 wz
029e4     01 EE 06 56 |  if_ne	mov	local37, #1
029e8     00 EE 06 A6 |  if_e	mov	local37, #0
029ec                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
029ec     36 00 00 FF 
029f0     2C 64 06 F1 | 	add	objptr, ##27692
029f4     32 93 02 FB | 	rdlong	arg01, objptr
029f8     36 00 00 FF 
029fc     2C 64 86 F1 | 	sub	objptr, ##27692
02a00     92 01 00 FF 
02a04     5F 95 06 F6 | 	mov	arg02, ##@LR__5523
02a08     D4 1F B2 FD | 	call	#__system___string_cmp
02a0c     00 7A 0E F2 | 	cmp	result1, #0 wz
02a10     01 EE 06 A6 |  if_e	mov	local37, #1
02a14     00 A8 06 F6 | 	mov	local02, #0
02a18                 | ' i=0 : do 
02a18                 | LR__0144
02a18                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02a18     54 AF 02 F6 | 	mov	local05, local02
02a1c     03 AE 66 F0 | 	shl	local05, #3
02a20     32 B1 02 F6 | 	mov	local06, objptr
02a24     36 00 00 FF 
02a28     2C B0 06 F1 | 	add	local06, ##27692
02a2c     58 AF 02 F1 | 	add	local05, local06
02a30     57 93 02 FB | 	rdlong	arg01, local05
02a34     92 01 00 FF 
02a38     64 95 06 F6 | 	mov	arg02, ##@LR__5524
02a3c     A0 1F B2 FD | 	call	#__system___string_cmp
02a40     00 7A 0E F2 | 	cmp	result1, #0 wz
02a44     0C 00 90 AD |  if_e	jmp	#LR__0145
02a48     01 A8 06 F1 | 	add	local02, #1
02a4c     63 A9 5A F2 | 	cmps	local02, local17 wcz
02a50     C4 FF 9F ED |  if_be	jmp	#LR__0144
02a54                 | LR__0145
02a54                 | ' if i<k then addptr=i+1	 							' then found
02a54     63 A9 52 F2 | 	cmps	local02, local17 wc
02a58     54 EF 02 C6 |  if_b	mov	local37, local02
02a5c     01 EE 06 C1 |  if_b	add	local37, #1
02a60     36 00 00 FF 
02a64     2C 64 06 F1 | 	add	objptr, ##27692
02a68                 | ' lp$=lparts(addptr).part$ 
02a68                 | ' 
02a68                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a68     77 AF 02 F6 | 	mov	local05, local37
02a6c     03 AE 66 F0 | 	shl	local05, #3
02a70     32 AF 02 F1 | 	add	local05, objptr
02a74     57 93 02 FB | 	rdlong	arg01, local05
02a78     01 94 06 F6 | 	mov	arg02, #1
02a7c     36 00 00 FF 
02a80     2C 64 86 F1 | 	sub	objptr, ##27692
02a84     D8 37 B2 FD | 	call	#__system__Left_S
02a88     3D 93 02 F6 | 	mov	arg01, result1
02a8c     92 01 00 FF 
02a90     69 95 06 F6 | 	mov	arg02, ##@LR__5525
02a94     48 1F B2 FD | 	call	#__system___string_cmp
02a98     00 7A 0E F2 | 	cmp	result1, #0 wz
02a9c     58 01 90 5D |  if_ne	jmp	#LR__0152
02aa0     77 B1 02 F6 | 	mov	local06, local37
02aa4     03 B0 66 F0 | 	shl	local06, #3
02aa8     32 BD 02 F6 | 	mov	local12, objptr
02aac     36 00 00 FF 
02ab0     2C BC 06 F1 | 	add	local12, ##27692
02ab4     5E B1 02 F1 | 	add	local06, local12
02ab8     58 93 02 FB | 	rdlong	arg01, local06
02abc     49 B3 02 F6 | 	mov	local07, arg01
02ac0     D7 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
02ac4                 | LR__0146
02ac4     59 7B CA FA | 	rdbyte	result1, local07 wz
02ac8     01 B2 06 51 |  if_ne	add	local07, #1
02acc     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
02ad0                 | LR__0147
02ad0     49 B3 82 F1 | 	sub	local07, arg01
02ad4     02 B2 56 F2 | 	cmps	local07, #2 wc
02ad8     1C 01 90 CD |  if_b	jmp	#LR__0152
02adc     01 C6 06 F1 | 	add	local17, #1
02ae0                 | '   k+=1
02ae0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02ae0     63 A9 02 F6 | 	mov	local02, local17
02ae4     77 F1 02 F6 | 	mov	local38, local37
02ae8     01 F0 06 F1 | 	add	local38, #1
02aec     36 00 00 FF 
02af0     2C 64 06 F1 | 	add	objptr, ##27692
02af4     D7 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02af8                 | LR__0148
02af8     54 AF 02 F6 | 	mov	local05, local02
02afc     01 AE 86 F1 | 	sub	local05, #1
02b00     03 AE 66 F0 | 	shl	local05, #3
02b04     32 AF 02 F1 | 	add	local05, objptr
02b08     57 AD 02 FB | 	rdlong	local04, local05
02b0c     54 B1 02 F6 | 	mov	local06, local02
02b10     01 B0 86 F1 | 	sub	local06, #1
02b14     03 B0 66 F0 | 	shl	local06, #3
02b18     32 B1 02 F1 | 	add	local06, objptr
02b1c     04 B0 06 F1 | 	add	local06, #4
02b20     58 AB 02 FB | 	rdlong	local03, local06
02b24     54 B1 02 F6 | 	mov	local06, local02
02b28     03 B0 66 F0 | 	shl	local06, #3
02b2c     32 B1 02 F1 | 	add	local06, objptr
02b30     58 AD 62 FC | 	wrlong	local04, local06
02b34     54 BF 02 F6 | 	mov	local13, local02
02b38     03 BE 66 F0 | 	shl	local13, #3
02b3c     32 BF 02 F1 | 	add	local13, objptr
02b40     04 BE 06 F1 | 	add	local13, #4
02b44     5F AB 62 FC | 	wrlong	local03, local13
02b48     01 A8 86 F1 | 	sub	local02, #1
02b4c     78 A9 52 F2 | 	cmps	local02, local38 wc
02b50     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02b54                 | LR__0149
02b54     77 B9 02 F6 | 	mov	local10, local37
02b58     01 B8 06 F1 | 	add	local10, #1
02b5c     03 B8 66 F0 | 	shl	local10, #3
02b60     32 B9 02 F1 | 	add	local10, objptr
02b64     77 C1 02 F6 | 	mov	local14, local37
02b68     03 C0 66 F0 | 	shl	local14, #3
02b6c     32 C1 02 F1 | 	add	local14, objptr
02b70     60 B1 02 FB | 	rdlong	local06, local14
02b74     77 BF 02 F6 | 	mov	local13, local37
02b78     5F DD 02 F6 | 	mov	local28, local13
02b7c     6E D1 02 F6 | 	mov	local22, local28
02b80     03 D0 66 F0 | 	shl	local22, #3
02b84     32 D3 02 F6 | 	mov	local23, objptr
02b88     32 D1 02 F1 | 	add	local22, objptr
02b8c     68 93 02 FB | 	rdlong	arg01, local22
02b90     36 00 00 FF 
02b94     2C 64 86 F1 | 	sub	objptr, ##27692
02b98     49 B3 02 F6 | 	mov	local07, arg01
02b9c     D7 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02ba0                 | LR__0150
02ba0     59 7B CA FA | 	rdbyte	result1, local07 wz
02ba4     01 B2 06 51 |  if_ne	add	local07, #1
02ba8     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02bac                 | LR__0151
02bac     49 B3 82 F1 | 	sub	local07, arg01
02bb0     59 C1 02 F6 | 	mov	local14, local07
02bb4     60 BB 02 F6 | 	mov	local11, local14
02bb8     01 BA 86 F1 | 	sub	local11, #1
02bbc     5D BD 02 F6 | 	mov	local12, local11
02bc0     58 93 02 F6 | 	mov	arg01, local06
02bc4     5E 95 02 F6 | 	mov	arg02, local12
02bc8     1C 37 B2 FD | 	call	#__system__Right_S
02bcc     5C 7B 62 FC | 	wrlong	result1, local10
02bd0     77 B9 02 F6 | 	mov	local10, local37
02bd4     03 B8 66 F0 | 	shl	local10, #3
02bd8     32 AF 02 F6 | 	mov	local05, objptr
02bdc     36 00 00 FF 
02be0     2C AE 06 F1 | 	add	local05, ##27692
02be4     57 B9 02 F1 | 	add	local10, local05
02be8     92 01 00 FF 
02bec     6B B1 06 F6 | 	mov	local06, ##@LR__5526
02bf0     5C B1 62 FC | 	wrlong	local06, local10
02bf4     9C 01 90 FD | 	jmp	#LR__0160
02bf8                 | LR__0152
02bf8     77 B1 02 F6 | 	mov	local06, local37
02bfc     03 B0 66 F0 | 	shl	local06, #3
02c00     32 BD 02 F6 | 	mov	local12, objptr
02c04     36 00 00 FF 
02c08     2C BC 06 F1 | 	add	local12, ##27692
02c0c     5E B1 02 F1 | 	add	local06, local12
02c10     58 95 02 FB | 	rdlong	arg02, local06
02c14     92 01 00 FF 
02c18     6D 97 06 F6 | 	mov	arg03, ##@LR__5527
02c1c     01 92 06 F6 | 	mov	arg01, #1
02c20     84 3B B2 FD | 	call	#__system__Instr
02c24     3D F3 02 F6 | 	mov	local39, result1
02c28                 | ' 
02c28                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02c28                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02c28     01 F2 56 F2 | 	cmps	local39, #1 wc
02c2c     64 01 90 CD |  if_b	jmp	#LR__0159
02c30     77 AF 02 F6 | 	mov	local05, local37
02c34     03 AE 66 F0 | 	shl	local05, #3
02c38     32 B1 02 F6 | 	mov	local06, objptr
02c3c     36 00 00 FF 
02c40     2C B0 06 F1 | 	add	local06, ##27692
02c44     58 AF 02 F1 | 	add	local05, local06
02c48     57 93 02 FB | 	rdlong	arg01, local05
02c4c     49 B3 02 F6 | 	mov	local07, arg01
02c50     D7 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02c54                 | LR__0153
02c54     59 7B CA FA | 	rdbyte	result1, local07 wz
02c58     01 B2 06 51 |  if_ne	add	local07, #1
02c5c     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02c60                 | LR__0154
02c60     49 B3 82 F1 | 	sub	local07, arg01
02c64     59 F3 52 F2 | 	cmps	local39, local07 wc
02c68     28 01 90 3D |  if_ae	jmp	#LR__0159
02c6c     01 C6 06 F1 | 	add	local17, #1
02c70                 | '   k+=1
02c70                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02c70     63 A9 02 F6 | 	mov	local02, local17
02c74     77 F5 02 F6 | 	mov	local40, local37
02c78     01 F4 06 F1 | 	add	local40, #1
02c7c     36 00 00 FF 
02c80     2C 64 06 F1 | 	add	objptr, ##27692
02c84     D7 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02c88                 | LR__0155
02c88     54 AF 02 F6 | 	mov	local05, local02
02c8c     01 AE 86 F1 | 	sub	local05, #1
02c90     03 AE 66 F0 | 	shl	local05, #3
02c94     32 AF 02 F1 | 	add	local05, objptr
02c98     57 AD 02 FB | 	rdlong	local04, local05
02c9c     54 B1 02 F6 | 	mov	local06, local02
02ca0     01 B0 86 F1 | 	sub	local06, #1
02ca4     03 B0 66 F0 | 	shl	local06, #3
02ca8     32 B1 02 F1 | 	add	local06, objptr
02cac     04 B0 06 F1 | 	add	local06, #4
02cb0     58 AB 02 FB | 	rdlong	local03, local06
02cb4     54 B1 02 F6 | 	mov	local06, local02
02cb8     03 B0 66 F0 | 	shl	local06, #3
02cbc     32 B1 02 F1 | 	add	local06, objptr
02cc0     58 AD 62 FC | 	wrlong	local04, local06
02cc4     54 BF 02 F6 | 	mov	local13, local02
02cc8     03 BE 66 F0 | 	shl	local13, #3
02ccc     32 BF 02 F1 | 	add	local13, objptr
02cd0     04 BE 06 F1 | 	add	local13, #4
02cd4     5F AB 62 FC | 	wrlong	local03, local13
02cd8     01 A8 86 F1 | 	sub	local02, #1
02cdc     7A A9 52 F2 | 	cmps	local02, local40 wc
02ce0     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02ce4                 | LR__0156
02ce4     77 B9 02 F6 | 	mov	local10, local37
02ce8     01 B8 06 F1 | 	add	local10, #1
02cec     03 B8 66 F0 | 	shl	local10, #3
02cf0     32 B9 02 F1 | 	add	local10, objptr
02cf4     77 C1 02 F6 | 	mov	local14, local37
02cf8     03 C0 66 F0 | 	shl	local14, #3
02cfc     32 C1 02 F1 | 	add	local14, objptr
02d00     60 B1 02 FB | 	rdlong	local06, local14
02d04     77 DD 02 F6 | 	mov	local28, local37
02d08     6E D1 02 F6 | 	mov	local22, local28
02d0c     03 D0 66 F0 | 	shl	local22, #3
02d10     32 D3 02 F6 | 	mov	local23, objptr
02d14     32 D1 02 F1 | 	add	local22, objptr
02d18     68 93 02 FB | 	rdlong	arg01, local22
02d1c     36 00 00 FF 
02d20     2C 64 86 F1 | 	sub	objptr, ##27692
02d24     49 B3 02 F6 | 	mov	local07, arg01
02d28     D7 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02d2c                 | LR__0157
02d2c     59 7B CA FA | 	rdbyte	result1, local07 wz
02d30     01 B2 06 51 |  if_ne	add	local07, #1
02d34     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02d38                 | LR__0158
02d38     49 B3 82 F1 | 	sub	local07, arg01
02d3c     59 95 02 F6 | 	mov	arg02, local07
02d40     79 95 82 F1 | 	sub	arg02, local39
02d44     58 93 02 F6 | 	mov	arg01, local06
02d48     9C 35 B2 FD | 	call	#__system__Right_S
02d4c     5C 7B 62 FC | 	wrlong	result1, local10
02d50     77 B9 02 F6 | 	mov	local10, local37
02d54     03 B8 66 F0 | 	shl	local10, #3
02d58     36 00 00 FF 
02d5c     2C 64 06 F1 | 	add	objptr, ##27692
02d60     32 B9 02 F1 | 	add	local10, objptr
02d64     77 BB 02 F6 | 	mov	local11, local37
02d68     5D C1 02 F6 | 	mov	local14, local11
02d6c     03 C0 66 F0 | 	shl	local14, #3
02d70     32 BF 02 F6 | 	mov	local13, objptr
02d74     32 C1 02 F1 | 	add	local14, objptr
02d78     60 93 02 FB | 	rdlong	arg01, local14
02d7c     79 BD 02 F6 | 	mov	local12, local39
02d80     5E 95 02 F6 | 	mov	arg02, local12
02d84     36 00 00 FF 
02d88     2C 64 86 F1 | 	sub	objptr, ##27692
02d8c     D0 34 B2 FD | 	call	#__system__Left_S
02d90     5C 7B 62 FC | 	wrlong	result1, local10
02d94                 | LR__0159
02d94                 | LR__0160
02d94     77 B9 02 F6 | 	mov	local10, local37
02d98     03 B8 66 F0 | 	shl	local10, #3
02d9c     32 AF 02 F6 | 	mov	local05, objptr
02da0     36 00 00 FF 
02da4     2C AE 06 F1 | 	add	local05, ##27692
02da8     57 B9 02 F1 | 	add	local10, local05
02dac     5C F7 02 FB | 	rdlong	local41, local10
02db0                 | ' 
02db0                 | ' 825
02db0                 | ' lp$=lparts(addptr).part$ 
02db0                 | ' 
02db0                 | ' ' process mouse/cursor/click on/off
02db0                 | ' 
02db0                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02db0     92 01 00 FF 
02db4     6F 95 06 F6 | 	mov	arg02, ##@LR__5528
02db8     7B 93 02 F6 | 	mov	arg01, local41
02dbc     20 1C B2 FD | 	call	#__system___string_cmp
02dc0     00 7A 0E F2 | 	cmp	result1, #0 wz
02dc4     30 00 90 AD |  if_e	jmp	#LR__0161
02dc8     92 01 00 FF 
02dcc     75 95 06 F6 | 	mov	arg02, ##@LR__5529
02dd0     7B 93 02 F6 | 	mov	arg01, local41
02dd4     08 1C B2 FD | 	call	#__system___string_cmp
02dd8     00 7A 0E F2 | 	cmp	result1, #0 wz
02ddc     18 00 90 AD |  if_e	jmp	#LR__0161
02de0     92 01 00 FF 
02de4     7C 95 06 F6 | 	mov	arg02, ##@LR__5530
02de8     7B 93 02 F6 | 	mov	arg01, local41
02dec     F0 1B B2 FD | 	call	#__system___string_cmp
02df0     00 7A 0E F2 | 	cmp	result1, #0 wz
02df4     D8 00 90 5D |  if_ne	jmp	#LR__0164
02df8                 | LR__0161
02df8                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02df8     77 AF 02 F6 | 	mov	local05, local37
02dfc     01 AE 06 F1 | 	add	local05, #1
02e00     03 AE 66 F0 | 	shl	local05, #3
02e04     32 B1 02 F6 | 	mov	local06, objptr
02e08     36 00 00 FF 
02e0c     2C B0 06 F1 | 	add	local06, ##27692
02e10     58 AF 02 F1 | 	add	local05, local06
02e14     57 93 02 FB | 	rdlong	arg01, local05
02e18     92 01 00 FF 
02e1c     82 95 06 F6 | 	mov	arg02, ##@LR__5531
02e20     BC 1B B2 FD | 	call	#__system___string_cmp
02e24     00 7A 0E F2 | 	cmp	result1, #0 wz
02e28     38 00 90 5D |  if_ne	jmp	#LR__0162
02e2c     77 B9 02 F6 | 	mov	local10, local37
02e30     01 B8 06 F1 | 	add	local10, #1
02e34     03 B8 66 F0 | 	shl	local10, #3
02e38     36 00 00 FF 
02e3c     2C 64 06 F1 | 	add	objptr, ##27692
02e40     32 B9 02 F1 | 	add	local10, objptr
02e44     92 01 00 FF 
02e48     85 B1 06 F6 | 	mov	local06, ##@LR__5532
02e4c     5C B1 62 FC | 	wrlong	local06, local10
02e50     14 64 06 F1 | 	add	objptr, #20
02e54     01 00 80 FF 
02e58     32 01 68 FC | 	wrlong	##512, objptr
02e5c     36 00 00 FF 
02e60     40 64 86 F1 | 	sub	objptr, ##27712
02e64                 | LR__0162
02e64                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02e64     77 AF 02 F6 | 	mov	local05, local37
02e68     01 AE 06 F1 | 	add	local05, #1
02e6c     03 AE 66 F0 | 	shl	local05, #3
02e70     32 B1 02 F6 | 	mov	local06, objptr
02e74     36 00 00 FF 
02e78     2C B0 06 F1 | 	add	local06, ##27692
02e7c     58 AF 02 F1 | 	add	local05, local06
02e80     57 93 02 FB | 	rdlong	arg01, local05
02e84     92 01 00 FF 
02e88     87 95 06 F6 | 	mov	arg02, ##@LR__5533
02e8c     50 1B B2 FD | 	call	#__system___string_cmp
02e90     00 7A 0E F2 | 	cmp	result1, #0 wz
02e94     38 00 90 5D |  if_ne	jmp	#LR__0163
02e98     77 B9 02 F6 | 	mov	local10, local37
02e9c     01 B8 06 F1 | 	add	local10, #1
02ea0     03 B8 66 F0 | 	shl	local10, #3
02ea4     36 00 00 FF 
02ea8     2C 64 06 F1 | 	add	objptr, ##27692
02eac     32 B9 02 F1 | 	add	local10, objptr
02eb0     92 01 00 FF 
02eb4     8B B1 06 F6 | 	mov	local06, ##@LR__5534
02eb8     5C B1 62 FC | 	wrlong	local06, local10
02ebc     14 64 06 F1 | 	add	objptr, #20
02ec0     01 00 80 FF 
02ec4     32 01 68 FC | 	wrlong	##512, objptr
02ec8     36 00 00 FF 
02ecc     40 64 86 F1 | 	sub	objptr, ##27712
02ed0                 | LR__0163
02ed0                 | LR__0164
02ed0                 | ' 		
02ed0                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02ed0                 | ' 
02ed0                 | ' if (lp$="mode" orelse lp$="m.") then 
02ed0     92 01 00 FF 
02ed4     8D 95 06 F6 | 	mov	arg02, ##@LR__5535
02ed8     7B 93 02 F6 | 	mov	arg01, local41
02edc     00 1B B2 FD | 	call	#__system___string_cmp
02ee0     00 7A 0E F2 | 	cmp	result1, #0 wz
02ee4     18 00 90 AD |  if_e	jmp	#LR__0165
02ee8     92 01 00 FF 
02eec     92 95 06 F6 | 	mov	arg02, ##@LR__5536
02ef0     7B 93 02 F6 | 	mov	arg01, local41
02ef4     E8 1A B2 FD | 	call	#__system___string_cmp
02ef8     00 7A 0E F2 | 	cmp	result1, #0 wz
02efc     28 02 90 5D |  if_ne	jmp	#LR__0172
02f00                 | LR__0165
02f00                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02f00     77 AF 02 F6 | 	mov	local05, local37
02f04     01 AE 06 F1 | 	add	local05, #1
02f08     03 AE 66 F0 | 	shl	local05, #3
02f0c     32 B1 02 F6 | 	mov	local06, objptr
02f10     36 00 00 FF 
02f14     2C B0 06 F1 | 	add	local06, ##27692
02f18     58 AF 02 F1 | 	add	local05, local06
02f1c     57 93 02 FB | 	rdlong	arg01, local05
02f20     92 01 00 FF 
02f24     95 95 06 F6 | 	mov	arg02, ##@LR__5537
02f28     B4 1A B2 FD | 	call	#__system___string_cmp
02f2c     00 7A 0E F2 | 	cmp	result1, #0 wz
02f30     28 00 90 5D |  if_ne	jmp	#LR__0166
02f34     77 B9 02 F6 | 	mov	local10, local37
02f38     01 B8 06 F1 | 	add	local10, #1
02f3c     03 B8 66 F0 | 	shl	local10, #3
02f40     32 AF 02 F6 | 	mov	local05, objptr
02f44     36 00 00 FF 
02f48     2C AE 06 F1 | 	add	local05, ##27692
02f4c     57 B9 02 F1 | 	add	local10, local05
02f50     92 01 00 FF 
02f54     9B B1 06 F6 | 	mov	local06, ##@LR__5538
02f58     5C B1 62 FC | 	wrlong	local06, local10
02f5c                 | LR__0166
02f5c                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02f5c     77 AF 02 F6 | 	mov	local05, local37
02f60     01 AE 06 F1 | 	add	local05, #1
02f64     03 AE 66 F0 | 	shl	local05, #3
02f68     32 B1 02 F6 | 	mov	local06, objptr
02f6c     36 00 00 FF 
02f70     2C B0 06 F1 | 	add	local06, ##27692
02f74     58 AF 02 F1 | 	add	local05, local06
02f78     57 93 02 FB | 	rdlong	arg01, local05
02f7c     92 01 00 FF 
02f80     9D 95 06 F6 | 	mov	arg02, ##@LR__5539
02f84     58 1A B2 FD | 	call	#__system___string_cmp
02f88     00 7A 0E F2 | 	cmp	result1, #0 wz
02f8c     28 00 90 5D |  if_ne	jmp	#LR__0167
02f90     77 B9 02 F6 | 	mov	local10, local37
02f94     01 B8 06 F1 | 	add	local10, #1
02f98     03 B8 66 F0 | 	shl	local10, #3
02f9c     32 AF 02 F6 | 	mov	local05, objptr
02fa0     36 00 00 FF 
02fa4     2C AE 06 F1 | 	add	local05, ##27692
02fa8     57 B9 02 F1 | 	add	local10, local05
02fac     92 01 00 FF 
02fb0     A6 B1 06 F6 | 	mov	local06, ##@LR__5540
02fb4     5C B1 62 FC | 	wrlong	local06, local10
02fb8                 | LR__0167
02fb8                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02fb8     77 AF 02 F6 | 	mov	local05, local37
02fbc     01 AE 06 F1 | 	add	local05, #1
02fc0     03 AE 66 F0 | 	shl	local05, #3
02fc4     32 B1 02 F6 | 	mov	local06, objptr
02fc8     36 00 00 FF 
02fcc     2C B0 06 F1 | 	add	local06, ##27692
02fd0     58 AF 02 F1 | 	add	local05, local06
02fd4     57 93 02 FB | 	rdlong	arg01, local05
02fd8     92 01 00 FF 
02fdc     A8 95 06 F6 | 	mov	arg02, ##@LR__5541
02fe0     FC 19 B2 FD | 	call	#__system___string_cmp
02fe4     00 7A 0E F2 | 	cmp	result1, #0 wz
02fe8     28 00 90 5D |  if_ne	jmp	#LR__0168
02fec     77 B9 02 F6 | 	mov	local10, local37
02ff0     01 B8 06 F1 | 	add	local10, #1
02ff4     03 B8 66 F0 | 	shl	local10, #3
02ff8     32 AF 02 F6 | 	mov	local05, objptr
02ffc     36 00 00 FF 
03000     2C AE 06 F1 | 	add	local05, ##27692
03004     57 B9 02 F1 | 	add	local10, local05
03008     92 01 00 FF 
0300c     B1 B1 06 F6 | 	mov	local06, ##@LR__5542
03010     5C B1 62 FC | 	wrlong	local06, local10
03014                 | LR__0168
03014                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
03014     77 AF 02 F6 | 	mov	local05, local37
03018     01 AE 06 F1 | 	add	local05, #1
0301c     03 AE 66 F0 | 	shl	local05, #3
03020     32 B1 02 F6 | 	mov	local06, objptr
03024     36 00 00 FF 
03028     2C B0 06 F1 | 	add	local06, ##27692
0302c     58 AF 02 F1 | 	add	local05, local06
03030     57 93 02 FB | 	rdlong	arg01, local05
03034     92 01 00 FF 
03038     B3 95 06 F6 | 	mov	arg02, ##@LR__5543
0303c     A0 19 B2 FD | 	call	#__system___string_cmp
03040     00 7A 0E F2 | 	cmp	result1, #0 wz
03044     28 00 90 5D |  if_ne	jmp	#LR__0169
03048     77 B9 02 F6 | 	mov	local10, local37
0304c     01 B8 06 F1 | 	add	local10, #1
03050     03 B8 66 F0 | 	shl	local10, #3
03054     32 AF 02 F6 | 	mov	local05, objptr
03058     36 00 00 FF 
0305c     2C AE 06 F1 | 	add	local05, ##27692
03060     57 B9 02 F1 | 	add	local10, local05
03064     92 01 00 FF 
03068     BC B1 06 F6 | 	mov	local06, ##@LR__5544
0306c     5C B1 62 FC | 	wrlong	local06, local10
03070                 | LR__0169
03070                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
03070     77 AF 02 F6 | 	mov	local05, local37
03074     01 AE 06 F1 | 	add	local05, #1
03078     03 AE 66 F0 | 	shl	local05, #3
0307c     32 B1 02 F6 | 	mov	local06, objptr
03080     36 00 00 FF 
03084     2C B0 06 F1 | 	add	local06, ##27692
03088     58 AF 02 F1 | 	add	local05, local06
0308c     57 93 02 FB | 	rdlong	arg01, local05
03090     92 01 00 FF 
03094     BE 95 06 F6 | 	mov	arg02, ##@LR__5545
03098     44 19 B2 FD | 	call	#__system___string_cmp
0309c     00 7A 0E F2 | 	cmp	result1, #0 wz
030a0     28 00 90 5D |  if_ne	jmp	#LR__0170
030a4     77 B9 02 F6 | 	mov	local10, local37
030a8     01 B8 06 F1 | 	add	local10, #1
030ac     03 B8 66 F0 | 	shl	local10, #3
030b0     32 AF 02 F6 | 	mov	local05, objptr
030b4     36 00 00 FF 
030b8     2C AE 06 F1 | 	add	local05, ##27692
030bc     57 B9 02 F1 | 	add	local10, local05
030c0     92 01 00 FF 
030c4     C1 B1 06 F6 | 	mov	local06, ##@LR__5546
030c8     5C B1 62 FC | 	wrlong	local06, local10
030cc                 | LR__0170
030cc                 | '   if lparts(addptr+1).part$="amiga" then lparts(addptr+1).part$="5"  
030cc     77 AF 02 F6 | 	mov	local05, local37
030d0     01 AE 06 F1 | 	add	local05, #1
030d4     03 AE 66 F0 | 	shl	local05, #3
030d8     32 B1 02 F6 | 	mov	local06, objptr
030dc     36 00 00 FF 
030e0     2C B0 06 F1 | 	add	local06, ##27692
030e4     58 AF 02 F1 | 	add	local05, local06
030e8     57 93 02 FB | 	rdlong	arg01, local05
030ec     92 01 00 FF 
030f0     C3 95 06 F6 | 	mov	arg02, ##@LR__5547
030f4     E8 18 B2 FD | 	call	#__system___string_cmp
030f8     00 7A 0E F2 | 	cmp	result1, #0 wz
030fc     28 00 90 5D |  if_ne	jmp	#LR__0171
03100     77 B9 02 F6 | 	mov	local10, local37
03104     01 B8 06 F1 | 	add	local10, #1
03108     03 B8 66 F0 | 	shl	local10, #3
0310c     32 AF 02 F6 | 	mov	local05, objptr
03110     36 00 00 FF 
03114     2C AE 06 F1 | 	add	local05, ##27692
03118     57 B9 02 F1 | 	add	local10, local05
0311c     92 01 00 FF 
03120     C9 B1 06 F6 | 	mov	local06, ##@LR__5548
03124     5C B1 62 FC | 	wrlong	local06, local10
03128                 | LR__0171
03128                 | LR__0172
03128                 | ' 
03128                 | ' ' find part types 
03128                 | ' 
03128                 | ' for i=0 to k-1
03128     00 A8 06 F6 | 	mov	local02, #0
0312c     63 F9 02 F6 | 	mov	local42, local17
03130                 | LR__0173
03130     7C A9 52 F2 | 	cmps	local02, local42 wc
03134     58 07 90 3D |  if_ae	jmp	#LR__0185
03138     54 B9 02 F6 | 	mov	local10, local02
0313c     03 B8 66 F0 | 	shl	local10, #3
03140     36 00 00 FF 
03144     2C 64 06 F1 | 	add	objptr, ##27692
03148     32 B9 02 F1 | 	add	local10, objptr
0314c     54 BB 02 F6 | 	mov	local11, local02
03150     5D C1 02 F6 | 	mov	local14, local11
03154     60 BF 02 F6 | 	mov	local13, local14
03158     03 BE 66 F0 | 	shl	local13, #3
0315c     32 BF 02 F1 | 	add	local13, objptr
03160     5F 93 02 FB | 	rdlong	arg01, local13
03164     36 00 00 FF 
03168     2C 64 86 F1 | 	sub	objptr, ##27692
0316c     A8 1A B0 FD | 	call	#_isseparator
03170     3D 7B E2 F8 | 	getbyte	result1, result1, #0
03174     04 B8 06 F1 | 	add	local10, #4
03178     5C 7B 62 FC | 	wrlong	result1, local10
0317c                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0317c     54 B9 02 F6 | 	mov	local10, local02
03180     03 B8 66 F0 | 	shl	local10, #3
03184     32 AF 02 F6 | 	mov	local05, objptr
03188     36 00 00 FF 
0318c     2C AE 06 F1 | 	add	local05, ##27692
03190     57 B9 02 F1 | 	add	local10, local05
03194     04 B8 06 F1 | 	add	local10, #4
03198     5C BD 02 FB | 	rdlong	local12, local10
0319c     01 BC 56 F2 | 	cmps	local12, #1 wc
031a0     E4 06 90 3D |  if_ae	jmp	#LR__0184
031a4     54 B9 02 F6 | 	mov	local10, local02
031a8     03 B8 66 F0 | 	shl	local10, #3
031ac     36 00 00 FF 
031b0     2C 64 06 F1 | 	add	objptr, ##27692
031b4     32 B9 02 F1 | 	add	local10, objptr
031b8     54 BB 02 F6 | 	mov	local11, local02
031bc     5D C1 02 F6 | 	mov	local14, local11
031c0     60 BF 02 F6 | 	mov	local13, local14
031c4     03 BE 66 F0 | 	shl	local13, #3
031c8     32 BF 02 F1 | 	add	local13, objptr
031cc     5F 93 02 FB | 	rdlong	arg01, local13
031d0     36 00 00 FF 
031d4     2C 64 86 F1 | 	sub	objptr, ##27692
031d8     88 12 B0 FD | 	call	#_isoperator
031dc     3D 7B E2 F8 | 	getbyte	result1, result1, #0
031e0     04 B8 06 F1 | 	add	local10, #4
031e4     5C 7B 62 FC | 	wrlong	result1, local10
031e8                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031e8     54 B9 02 F6 | 	mov	local10, local02
031ec     03 B8 66 F0 | 	shl	local10, #3
031f0     32 AF 02 F6 | 	mov	local05, objptr
031f4     36 00 00 FF 
031f8     2C AE 06 F1 | 	add	local05, ##27692
031fc     57 B9 02 F1 | 	add	local10, local05
03200     04 B8 06 F1 | 	add	local10, #4
03204     5C BD 02 FB | 	rdlong	local12, local10
03208     01 BC 56 F2 | 	cmps	local12, #1 wc
0320c     78 06 90 3D |  if_ae	jmp	#LR__0184
03210     54 B9 02 F6 | 	mov	local10, local02
03214     03 B8 66 F0 | 	shl	local10, #3
03218     36 00 00 FF 
0321c     2C 64 06 F1 | 	add	objptr, ##27692
03220     32 B9 02 F1 | 	add	local10, objptr
03224     54 BB 02 F6 | 	mov	local11, local02
03228     5D C1 02 F6 | 	mov	local14, local11
0322c     60 BF 02 F6 | 	mov	local13, local14
03230     03 BE 66 F0 | 	shl	local13, #3
03234     32 BF 02 F1 | 	add	local13, objptr
03238     5F 93 02 FB | 	rdlong	arg01, local13
0323c     36 00 00 FF 
03240     2C 64 86 F1 | 	sub	objptr, ##27692
03244                 | ' 
03244                 | ' select case s
03244     93 01 00 FF 
03248     CE 94 06 F6 | 	mov	arg02, ##@LR__5639
0324c     90 17 B2 FD | 	call	#__system___string_cmp
03250     00 7A 0E F2 | 	cmp	result1, #0 wz
03254     1B 7A 06 A6 |  if_e	mov	result1, #27
03258     00 7A 06 56 |  if_ne	mov	result1, #0
0325c     3D 7B E2 F8 | 	getbyte	result1, result1, #0
03260     04 B8 06 F1 | 	add	local10, #4
03264     5C 7B 62 FC | 	wrlong	result1, local10
03268                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03268     54 B9 02 F6 | 	mov	local10, local02
0326c     03 B8 66 F0 | 	shl	local10, #3
03270     32 AF 02 F6 | 	mov	local05, objptr
03274     36 00 00 FF 
03278     2C AE 06 F1 | 	add	local05, ##27692
0327c     57 B9 02 F1 | 	add	local10, local05
03280     04 B8 06 F1 | 	add	local10, #4
03284     5C BD 02 FB | 	rdlong	local12, local10
03288     01 BC 56 F2 | 	cmps	local12, #1 wc
0328c     F8 05 90 3D |  if_ae	jmp	#LR__0184
03290     54 B9 02 F6 | 	mov	local10, local02
03294     03 B8 66 F0 | 	shl	local10, #3
03298     36 00 00 FF 
0329c     2C 64 06 F1 | 	add	objptr, ##27692
032a0     32 B9 02 F1 | 	add	local10, objptr
032a4     54 BB 02 F6 | 	mov	local11, local02
032a8     5D C1 02 F6 | 	mov	local14, local11
032ac     60 BF 02 F6 | 	mov	local13, local14
032b0     03 BE 66 F0 | 	shl	local13, #3
032b4     32 BF 02 F1 | 	add	local13, objptr
032b8     5F 93 02 FB | 	rdlong	arg01, local13
032bc     36 00 00 FF 
032c0     2C 64 86 F1 | 	sub	objptr, ##27692
032c4     50 1B B0 FD | 	call	#_iscommand
032c8     3D 7B E2 F8 | 	getbyte	result1, result1, #0
032cc     04 B8 06 F1 | 	add	local10, #4
032d0     5C 7B 62 FC | 	wrlong	result1, local10
032d4                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
032d4     54 B9 02 F6 | 	mov	local10, local02
032d8     03 B8 66 F0 | 	shl	local10, #3
032dc     32 AF 02 F6 | 	mov	local05, objptr
032e0     36 00 00 FF 
032e4     2C AE 06 F1 | 	add	local05, ##27692
032e8     57 B9 02 F1 | 	add	local10, local05
032ec     04 B8 06 F1 | 	add	local10, #4
032f0     5C BD 02 FB | 	rdlong	local12, local10
032f4     01 BC 56 F2 | 	cmps	local12, #1 wc
032f8     8C 05 90 3D |  if_ae	jmp	#LR__0184
032fc     54 B9 02 F6 | 	mov	local10, local02
03300     03 B8 66 F0 | 	shl	local10, #3
03304     36 00 00 FF 
03308     2C 64 06 F1 | 	add	objptr, ##27692
0330c     32 B9 02 F1 | 	add	local10, objptr
03310     54 BB 02 F6 | 	mov	local11, local02
03314     5D C1 02 F6 | 	mov	local14, local11
03318     60 BF 02 F6 | 	mov	local13, local14
0331c     03 BE 66 F0 | 	shl	local13, #3
03320     32 DD 02 F6 | 	mov	local28, objptr
03324     32 BF 02 F1 | 	add	local13, objptr
03328     5F 93 02 FB | 	rdlong	arg01, local13
0332c     36 00 00 FF 
03330     2C 64 86 F1 | 	sub	objptr, ##27692
03334     A0 2C B0 FD | 	call	#_isfunction
03338     3D 7B E2 F8 | 	getbyte	result1, result1, #0
0333c     04 B8 06 F1 | 	add	local10, #4
03340     5C 7B 62 FC | 	wrlong	result1, local10
03344                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03344     54 B9 02 F6 | 	mov	local10, local02
03348     03 B8 66 F0 | 	shl	local10, #3
0334c     32 AF 02 F6 | 	mov	local05, objptr
03350     36 00 00 FF 
03354     2C AE 06 F1 | 	add	local05, ##27692
03358     57 B9 02 F1 | 	add	local10, local05
0335c     04 B8 06 F1 | 	add	local10, #4
03360     5C BD 02 FB | 	rdlong	local12, local10
03364     01 BC 56 F2 | 	cmps	local12, #1 wc
03368     1C 05 90 3D |  if_ae	jmp	#LR__0184
0336c     54 B9 02 F6 | 	mov	local10, local02
03370     03 B8 66 F0 | 	shl	local10, #3
03374     36 00 00 FF 
03378     2C 64 06 F1 | 	add	objptr, ##27692
0337c     32 B9 02 F1 | 	add	local10, objptr
03380     54 BB 02 F6 | 	mov	local11, local02
03384     5D C1 02 F6 | 	mov	local14, local11
03388     03 C0 66 F0 | 	shl	local14, #3
0338c     32 BF 02 F6 | 	mov	local13, objptr
03390     32 C1 02 F1 | 	add	local14, objptr
03394     60 93 02 FB | 	rdlong	arg01, local14
03398     36 00 00 FF 
0339c     2C 64 86 F1 | 	sub	objptr, ##27692
033a0     08 15 B0 FD | 	call	#_isnotename
033a4     04 B8 06 F1 | 	add	local10, #4
033a8     5C 7B 62 FC | 	wrlong	result1, local10
033ac                 | ' lparts(i).token=isnotename(lparts(i).part$) 
033ac                 | ' if lparts(i).token>0 then 
033ac     54 B9 02 F6 | 	mov	local10, local02
033b0     03 B8 66 F0 | 	shl	local10, #3
033b4     32 AF 02 F6 | 	mov	local05, objptr
033b8     36 00 00 FF 
033bc     2C AE 06 F1 | 	add	local05, ##27692
033c0     57 B9 02 F1 | 	add	local10, local05
033c4     04 B8 06 F1 | 	add	local10, #4
033c8     5C B1 02 FB | 	rdlong	local06, local10
033cc     01 B0 56 F2 | 	cmps	local06, #1 wc
033d0     80 00 90 CD |  if_b	jmp	#LR__0174
033d4     54 AF 02 F6 | 	mov	local05, local02
033d8     03 AE 66 F0 | 	shl	local05, #3
033dc     32 B1 02 F6 | 	mov	local06, objptr
033e0     36 00 00 FF 
033e4     2C B0 06 F1 | 	add	local06, ##27692
033e8     58 AF 02 F1 | 	add	local05, local06
033ec     04 AE 06 F1 | 	add	local05, #4
033f0     57 BD 02 FB | 	rdlong	local12, local05
033f4     5E 93 02 F6 | 	mov	arg01, local12
033f8     24 3E B0 FD | 	call	#_getnoteval
033fc     3D FB 02 F6 | 	mov	local43, result1
03400     54 B9 02 F6 | 	mov	local10, local02
03404     03 B8 66 F0 | 	shl	local10, #3
03408     32 AF 02 F6 | 	mov	local05, objptr
0340c     36 00 00 FF 
03410     2C AE 06 F1 | 	add	local05, ##27692
03414     57 B9 02 F1 | 	add	local10, local05
03418     7D 93 02 F6 | 	mov	arg01, local43
0341c     38 30 B2 FD | 	call	#__system__str_S
03420     5C 7B 62 FC | 	wrlong	result1, local10
03424     54 AD 02 F6 | 	mov	local04, local02
03428     56 AB 02 F6 | 	mov	local03, local04
0342c     55 B9 02 F6 | 	mov	local10, local03
03430     03 B8 66 F0 | 	shl	local10, #3
03434     32 AF 02 F6 | 	mov	local05, objptr
03438     36 00 00 FF 
0343c     2C AE 06 F1 | 	add	local05, ##27692
03440     57 B9 02 F1 | 	add	local10, local05
03444     04 B8 06 F1 | 	add	local10, #4
03448     01 00 80 FF 
0344c     5C 05 68 FC | 	wrlong	##514, local10
03450     34 04 90 FD | 	jmp	#LR__0184
03454                 | LR__0174
03454     54 B9 02 F6 | 	mov	local10, local02
03458     03 B8 66 F0 | 	shl	local10, #3
0345c     36 00 00 FF 
03460     2C 64 06 F1 | 	add	objptr, ##27692
03464     32 B9 02 F1 | 	add	local10, objptr
03468     54 C1 02 F6 | 	mov	local14, local02
0346c     03 C0 66 F0 | 	shl	local14, #3
03470     32 C1 02 F1 | 	add	local14, objptr
03474     60 93 02 FB | 	rdlong	arg01, local14
03478     36 00 00 FF 
0347c     2C 64 86 F1 | 	sub	objptr, ##27692
03480     C0 12 B0 FD | 	call	#_ischannel
03484     04 B8 06 F1 | 	add	local10, #4
03488     5C 7B 62 FC | 	wrlong	result1, local10
0348c                 | ' 
0348c                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
0348c                 | ' 
0348c                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
0348c     54 B9 02 F6 | 	mov	local10, local02
03490     03 B8 66 F0 | 	shl	local10, #3
03494     32 AF 02 F6 | 	mov	local05, objptr
03498     36 00 00 FF 
0349c     2C AE 06 F1 | 	add	local05, ##27692
034a0     57 B9 02 F1 | 	add	local10, local05
034a4     04 B8 06 F1 | 	add	local10, #4
034a8     5C B1 02 FB | 	rdlong	local06, local10
034ac     01 B0 56 F2 | 	cmps	local06, #1 wc
034b0     70 00 90 CD |  if_b	jmp	#LR__0175
034b4     54 B9 02 F6 | 	mov	local10, local02
034b8     03 B8 66 F0 | 	shl	local10, #3
034bc     36 00 00 FF 
034c0     2C 64 06 F1 | 	add	objptr, ##27692
034c4     32 B9 02 F1 | 	add	local10, objptr
034c8     54 BB 02 F6 | 	mov	local11, local02
034cc     5D C1 02 F6 | 	mov	local14, local11
034d0     03 C0 66 F0 | 	shl	local14, #3
034d4     32 BF 02 F6 | 	mov	local13, objptr
034d8     32 C1 02 F1 | 	add	local14, objptr
034dc     60 93 02 FB | 	rdlong	arg01, local14
034e0     01 BC 06 F6 | 	mov	local12, #1
034e4     01 94 06 F6 | 	mov	arg02, #1
034e8     36 00 00 FF 
034ec     2C 64 86 F1 | 	sub	objptr, ##27692
034f0     F4 2D B2 FD | 	call	#__system__Right_S
034f4     5C 7B 62 FC | 	wrlong	result1, local10
034f8     54 AD 02 F6 | 	mov	local04, local02
034fc     56 AB 02 F6 | 	mov	local03, local04
03500     55 B9 02 F6 | 	mov	local10, local03
03504     03 B8 66 F0 | 	shl	local10, #3
03508     32 AF 02 F6 | 	mov	local05, objptr
0350c     36 00 00 FF 
03510     2C AE 06 F1 | 	add	local05, ##27692
03514     57 B9 02 F1 | 	add	local10, local05
03518     04 B8 06 F1 | 	add	local10, #4
0351c     5C 59 68 FC | 	wrlong	#44, local10
03520     64 03 90 FD | 	jmp	#LR__0184
03524                 | LR__0175
03524     54 B9 02 F6 | 	mov	local10, local02
03528     03 B8 66 F0 | 	shl	local10, #3
0352c     36 00 00 FF 
03530     2C 64 06 F1 | 	add	objptr, ##27692
03534     32 B9 02 F1 | 	add	local10, objptr
03538     54 BB 02 F6 | 	mov	local11, local02
0353c     5D C1 02 F6 | 	mov	local14, local11
03540     03 C0 66 F0 | 	shl	local14, #3
03544     32 BF 02 F6 | 	mov	local13, objptr
03548     32 C1 02 F1 | 	add	local14, objptr
0354c     60 93 02 FB | 	rdlong	arg01, local14
03550     36 00 00 FF 
03554     2C 64 86 F1 | 	sub	objptr, ##27692
03558     D0 12 B0 FD | 	call	#_isconstant
0355c     04 B8 06 F1 | 	add	local10, #4
03560     5C 7B 62 FC | 	wrlong	result1, local10
03564                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
03564     54 B9 02 F6 | 	mov	local10, local02
03568     03 B8 66 F0 | 	shl	local10, #3
0356c     32 AF 02 F6 | 	mov	local05, objptr
03570     36 00 00 FF 
03574     2C AE 06 F1 | 	add	local05, ##27692
03578     57 B9 02 F1 | 	add	local10, local05
0357c     04 B8 06 F1 | 	add	local10, #4
03580     5C B1 02 FB | 	rdlong	local06, local10
03584     01 B0 56 F2 | 	cmps	local06, #1 wc
03588     90 00 90 CD |  if_b	jmp	#LR__0176
0358c     54 B9 02 F6 | 	mov	local10, local02
03590     03 B8 66 F0 | 	shl	local10, #3
03594     36 00 00 FF 
03598     2C 64 06 F1 | 	add	objptr, ##27692
0359c     32 B9 02 F1 | 	add	local10, objptr
035a0     54 BD 02 F6 | 	mov	local12, local02
035a4     5E BB 02 F6 | 	mov	local11, local12
035a8     5D C1 02 F6 | 	mov	local14, local11
035ac     03 C0 66 F0 | 	shl	local14, #3
035b0     32 BF 02 F6 | 	mov	local13, objptr
035b4     32 C1 02 F1 | 	add	local14, objptr
035b8     04 C0 06 F1 | 	add	local14, #4
035bc     60 93 02 FB | 	rdlong	arg01, local14
035c0     04 C0 86 F1 | 	sub	local14, #4
035c4     36 00 00 FF 
035c8     2C 64 86 F1 | 	sub	objptr, ##27692
035cc     49 93 52 F6 | 	abs	arg01, arg01 wc
035d0     1F FC C6 C9 |  if_b	decod	local44, #31
035d4     00 FC 06 36 |  if_ae	mov	local44, #0
035d8     A8 36 B2 FD | 	call	#__system___float_fromuns
035dc     7E 7B 62 F5 | 	xor	result1, local44
035e0     3D 93 02 F6 | 	mov	arg01, result1
035e4     70 2E B2 FD | 	call	#__system__str_S
035e8     5C 7B 62 FC | 	wrlong	result1, local10
035ec     54 AD 02 F6 | 	mov	local04, local02
035f0     56 AB 02 F6 | 	mov	local03, local04
035f4     55 B9 02 F6 | 	mov	local10, local03
035f8     03 B8 66 F0 | 	shl	local10, #3
035fc     32 AF 02 F6 | 	mov	local05, objptr
03600     36 00 00 FF 
03604     2C AE 06 F1 | 	add	local05, ##27692
03608     57 B9 02 F1 | 	add	local10, local05
0360c     04 B8 06 F1 | 	add	local10, #4
03610     01 00 80 FF 
03614     5C 03 68 FC | 	wrlong	##513, local10
03618     6C 02 90 FD | 	jmp	#LR__0184
0361c                 | LR__0176
0361c     54 B1 02 F6 | 	mov	local06, local02
03620     03 B0 66 F0 | 	shl	local06, #3
03624     32 BD 02 F6 | 	mov	local12, objptr
03628     36 00 00 FF 
0362c     2C BC 06 F1 | 	add	local12, ##27692
03630     5E B1 02 F1 | 	add	local06, local12
03634     58 93 02 FB | 	rdlong	arg01, local06
03638     30 34 B0 FD | 	call	#_isnum
0363c     3D FF 02 F6 | 	mov	local45, result1
03640     07 FE 66 F7 | 	signx	local45, #7
03644     54 B1 02 F6 | 	mov	local06, local02
03648     03 B0 66 F0 | 	shl	local06, #3
0364c     32 BD 02 F6 | 	mov	local12, objptr
03650     36 00 00 FF 
03654     2C BC 06 F1 | 	add	local12, ##27692
03658     5E B1 02 F1 | 	add	local06, local12
0365c     58 93 02 FB | 	rdlong	arg01, local06
03660     F4 37 B0 FD | 	call	#_isint
03664     3D 01 03 F6 | 	mov	local46, result1
03668     07 00 67 F7 | 	signx	local46, #7
0366c     54 B1 02 F6 | 	mov	local06, local02
03670     03 B0 66 F0 | 	shl	local06, #3
03674     32 BD 02 F6 | 	mov	local12, objptr
03678     36 00 00 FF 
0367c     2C BC 06 F1 | 	add	local12, ##27692
03680     5E B1 02 F1 | 	add	local06, local12
03684     58 93 02 FB | 	rdlong	arg01, local06
03688     70 3A B0 FD | 	call	#_isdec
0368c     07 7A 66 F7 | 	signx	result1, #7
03690     3D 03 03 F6 | 	mov	local47, result1
03694                 | ' 
03694                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
03694                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
03694     00 FE 0E F2 | 	cmp	local45, #0 wz
03698     00 00 0F 52 |  if_ne	cmp	local46, #0 wz
0369c     00 02 0F 52 |  if_ne	cmp	local47, #0 wz
036a0     30 00 90 AD |  if_e	jmp	#LR__0177
036a4     54 AD 02 F6 | 	mov	local04, local02
036a8     56 AB 02 F6 | 	mov	local03, local04
036ac     55 B9 02 F6 | 	mov	local10, local03
036b0     03 B8 66 F0 | 	shl	local10, #3
036b4     32 AF 02 F6 | 	mov	local05, objptr
036b8     36 00 00 FF 
036bc     2C AE 06 F1 | 	add	local05, ##27692
036c0     57 B9 02 F1 | 	add	local10, local05
036c4     04 B8 06 F1 | 	add	local10, #4
036c8     01 00 80 FF 
036cc     5C 01 68 FC | 	wrlong	##512, local10
036d0     B4 01 90 FD | 	jmp	#LR__0184
036d4                 | LR__0177
036d4                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
036d4     00 FE 0E F2 | 	cmp	local45, #0 wz
036d8     00 00 0F 52 |  if_ne	cmp	local46, #0 wz
036dc     81 AD 22 56 |  if_ne	not	local04, local47
036e0     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
036e4     30 00 90 AD |  if_e	jmp	#LR__0178
036e8     54 AD 02 F6 | 	mov	local04, local02
036ec     56 AB 02 F6 | 	mov	local03, local04
036f0     55 B9 02 F6 | 	mov	local10, local03
036f4     03 B8 66 F0 | 	shl	local10, #3
036f8     32 AF 02 F6 | 	mov	local05, objptr
036fc     36 00 00 FF 
03700     2C AE 06 F1 | 	add	local05, ##27692
03704     57 B9 02 F1 | 	add	local10, local05
03708     04 B8 06 F1 | 	add	local10, #4
0370c     01 00 80 FF 
03710     5C 03 68 FC | 	wrlong	##513, local10
03714     70 01 90 FD | 	jmp	#LR__0184
03718                 | LR__0178
03718                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03718     00 FE 0E F2 | 	cmp	local45, #0 wz
0371c     80 AD 22 56 |  if_ne	not	local04, local46
03720     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
03724     81 AB 22 56 |  if_ne	not	local03, local47
03728     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
0372c     30 00 90 AD |  if_e	jmp	#LR__0179
03730     54 AD 02 F6 | 	mov	local04, local02
03734     56 AB 02 F6 | 	mov	local03, local04
03738     55 B9 02 F6 | 	mov	local10, local03
0373c     03 B8 66 F0 | 	shl	local10, #3
03740     32 AF 02 F6 | 	mov	local05, objptr
03744     36 00 00 FF 
03748     2C AE 06 F1 | 	add	local05, ##27692
0374c     57 B9 02 F1 | 	add	local10, local05
03750     04 B8 06 F1 | 	add	local10, #4
03754     01 00 80 FF 
03758     5C 05 68 FC | 	wrlong	##514, local10
0375c     28 01 90 FD | 	jmp	#LR__0184
03760                 | LR__0179
03760                 | ' 
03760                 | ' if isstring(lparts(i).part$) then 
03760     54 AF 02 F6 | 	mov	local05, local02
03764     03 AE 66 F0 | 	shl	local05, #3
03768     32 B1 02 F6 | 	mov	local06, objptr
0376c     36 00 00 FF 
03770     2C B0 06 F1 | 	add	local06, ##27692
03774     58 AF 02 F1 | 	add	local05, local06
03778     57 93 02 FB | 	rdlong	arg01, local05
0377c     3C 3A B0 FD | 	call	#_isstring
03780     00 7A 0E F2 | 	cmp	result1, #0 wz
03784     A8 00 90 AD |  if_e	jmp	#LR__0182
03788     54 B9 02 F6 | 	mov	local10, local02
0378c     03 B8 66 F0 | 	shl	local10, #3
03790     36 00 00 FF 
03794     2C 64 06 F1 | 	add	objptr, ##27692
03798     32 B9 02 F1 | 	add	local10, objptr
0379c     04 B8 06 F1 | 	add	local10, #4
037a0     01 00 80 FF 
037a4     5C 07 68 FC | 	wrlong	##515, local10
037a8     54 AD 02 F6 | 	mov	local04, local02
037ac     56 AB 02 F6 | 	mov	local03, local04
037b0     55 B9 02 F6 | 	mov	local10, local03
037b4     03 B8 66 F0 | 	shl	local10, #3
037b8     32 B9 02 F1 | 	add	local10, objptr
037bc     54 C1 02 F6 | 	mov	local14, local02
037c0     03 C0 66 F0 | 	shl	local14, #3
037c4     32 C1 02 F1 | 	add	local14, objptr
037c8     60 B1 02 FB | 	rdlong	local06, local14
037cc     02 BC 06 F6 | 	mov	local12, #2
037d0     54 D1 02 F6 | 	mov	local22, local02
037d4     68 D3 02 F6 | 	mov	local23, local22
037d8     03 D2 66 F0 | 	shl	local23, #3
037dc     32 D5 02 F6 | 	mov	local24, objptr
037e0     32 D3 02 F1 | 	add	local23, objptr
037e4     69 93 02 FB | 	rdlong	arg01, local23
037e8     36 00 00 FF 
037ec     2C 64 86 F1 | 	sub	objptr, ##27692
037f0     49 B3 02 F6 | 	mov	local07, arg01
037f4     D7 06 48 FB | 	callpa	#(@LR__0181-@LR__0180)>>2,fcache_load_ptr_
037f8                 | LR__0180
037f8     59 7B CA FA | 	rdbyte	result1, local07 wz
037fc     01 B2 06 51 |  if_ne	add	local07, #1
03800     F4 FF 9F 5D |  if_ne	jmp	#LR__0180
03804                 | LR__0181
03804     49 B3 82 F1 | 	sub	local07, arg01
03808     59 BF 02 F6 | 	mov	local13, local07
0380c     5F C1 02 F6 | 	mov	local14, local13
03810     02 C0 86 F1 | 	sub	local14, #2
03814     60 BB 02 F6 | 	mov	local11, local14
03818     58 93 02 F6 | 	mov	arg01, local06
0381c     5E 95 02 F6 | 	mov	arg02, local12
03820     5D 97 02 F6 | 	mov	arg03, local11
03824     50 2B B2 FD | 	call	#__system__Mid_S
03828     5C 7B 62 FC | 	wrlong	result1, local10
0382c     58 00 90 FD | 	jmp	#LR__0184
03830                 | LR__0182
03830                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03830     54 AB 02 F6 | 	mov	local03, local02
03834     55 AF 02 F6 | 	mov	local05, local03
03838     03 AE 66 F0 | 	shl	local05, #3
0383c     32 B1 02 F6 | 	mov	local06, objptr
03840     36 00 00 FF 
03844     2C B0 06 F1 | 	add	local06, ##27692
03848     58 AF 02 F1 | 	add	local05, local06
0384c     57 93 02 FB | 	rdlong	arg01, local05
03850     A4 2F B0 FD | 	call	#_isname
03854     3D AD 0A F6 | 	mov	local04, result1 wz
03858     2C 00 90 AD |  if_e	jmp	#LR__0183
0385c     54 AD 02 F6 | 	mov	local04, local02
03860     56 AB 02 F6 | 	mov	local03, local04
03864     55 B9 02 F6 | 	mov	local10, local03
03868     03 B8 66 F0 | 	shl	local10, #3
0386c     32 AF 02 F6 | 	mov	local05, objptr
03870     36 00 00 FF 
03874     2C AE 06 F1 | 	add	local05, ##27692
03878     57 B9 02 F1 | 	add	local10, local05
0387c     04 B8 06 F1 | 	add	local10, #4
03880     01 00 80 FF 
03884     5C 09 68 FC | 	wrlong	##516, local10
03888                 | LR__0183
03888                 | LR__0184
03888     01 A8 06 F1 | 	add	local02, #1
0388c     A0 F8 9F FD | 	jmp	#LR__0173
03890                 | LR__0185
03890     63 B9 02 F6 | 	mov	local10, local17
03894     03 B8 66 F0 | 	shl	local10, #3
03898     36 00 00 FF 
0389c     2C 64 06 F1 | 	add	objptr, ##27692
038a0     32 B9 02 F1 | 	add	local10, objptr
038a4     04 B8 06 F1 | 	add	local10, #4
038a8     5C FD 6B FC | 	wrlong	#510, local10
038ac     63 B9 02 F6 | 	mov	local10, local17
038b0     03 B8 66 F0 | 	shl	local10, #3
038b4     32 B9 02 F1 | 	add	local10, objptr
038b8     92 01 00 FF 
038bc     CB B1 06 F6 | 	mov	local06, ##@LR__5549
038c0     5C B1 62 FC | 	wrlong	local06, local10
038c4     10 00 00 FF 
038c8     54 64 06 F1 | 	add	objptr, ##8276
038cc     32 C7 62 FC | 	wrlong	local17, objptr
038d0     46 00 00 FF 
038d4     80 64 86 F1 | 	sub	objptr, ##35968
038d8                 | ' 
038d8                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
038d8                 | ' 
038d8                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
038d8                 | '  
038d8                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
038d8     92 01 00 FF 
038dc     CC 95 06 F6 | 	mov	arg02, ##@LR__5550
038e0     7B 93 02 F6 | 	mov	arg01, local41
038e4     F8 10 B2 FD | 	call	#__system___string_cmp
038e8     00 7A 0E F2 | 	cmp	result1, #0 wz
038ec     F0 00 90 AD |  if_e	jmp	#LR__0186
038f0     92 01 00 FF 
038f4     D1 95 06 F6 | 	mov	arg02, ##@LR__5551
038f8     7B 93 02 F6 | 	mov	arg01, local41
038fc     E0 10 B2 FD | 	call	#__system___string_cmp
03900     00 7A 0E F2 | 	cmp	result1, #0 wz
03904     D8 00 90 AD |  if_e	jmp	#LR__0186
03908     92 01 00 FF 
0390c     D6 B1 06 F6 | 	mov	local06, ##@LR__5552
03910     7B 93 02 F6 | 	mov	arg01, local41
03914     58 95 02 F6 | 	mov	arg02, local06
03918     C4 10 B2 FD | 	call	#__system___string_cmp
0391c     00 7A 0E F2 | 	cmp	result1, #0 wz
03920     BC 00 90 AD |  if_e	jmp	#LR__0186
03924     92 01 00 FF 
03928     DB BD 06 F6 | 	mov	local12, ##@LR__5553
0392c     5E B1 02 F6 | 	mov	local06, local12
03930     7B 93 02 F6 | 	mov	arg01, local41
03934     58 95 02 F6 | 	mov	arg02, local06
03938     A4 10 B2 FD | 	call	#__system___string_cmp
0393c     00 7A 0E F2 | 	cmp	result1, #0 wz
03940     9C 00 90 AD |  if_e	jmp	#LR__0186
03944     92 01 00 FF 
03948     DF BB 06 F6 | 	mov	local11, ##@LR__5554
0394c     5D BD 02 F6 | 	mov	local12, local11
03950     7B 93 02 F6 | 	mov	arg01, local41
03954     5E 95 02 F6 | 	mov	arg02, local12
03958     84 10 B2 FD | 	call	#__system___string_cmp
0395c     3D B1 0A F6 | 	mov	local06, result1 wz
03960     7C 00 90 AD |  if_e	jmp	#LR__0186
03964     92 01 00 FF 
03968     E3 C1 06 F6 | 	mov	local14, ##@LR__5555
0396c     60 BB 02 F6 | 	mov	local11, local14
03970     7B 93 02 F6 | 	mov	arg01, local41
03974     5D 95 02 F6 | 	mov	arg02, local11
03978     64 10 B2 FD | 	call	#__system___string_cmp
0397c     3D BD 0A F6 | 	mov	local12, result1 wz
03980     5C 00 90 AD |  if_e	jmp	#LR__0186
03984     92 01 00 FF 
03988     E6 BF 06 F6 | 	mov	local13, ##@LR__5556
0398c     5F C1 02 F6 | 	mov	local14, local13
03990     7B 93 02 F6 | 	mov	arg01, local41
03994     60 95 02 F6 | 	mov	arg02, local14
03998     44 10 B2 FD | 	call	#__system___string_cmp
0399c     3D BB 0A F6 | 	mov	local11, result1 wz
039a0     3C 00 90 AD |  if_e	jmp	#LR__0186
039a4     92 01 00 FF 
039a8     EA BF 06 F6 | 	mov	local13, ##@LR__5557
039ac     7B 93 02 F6 | 	mov	arg01, local41
039b0     5F 95 02 F6 | 	mov	arg02, local13
039b4     28 10 B2 FD | 	call	#__system___string_cmp
039b8     3D C1 0A F6 | 	mov	local14, result1 wz
039bc     20 00 90 AD |  if_e	jmp	#LR__0186
039c0     92 01 00 FF 
039c4     F0 D1 06 F6 | 	mov	local22, ##@LR__5558
039c8     68 DD 02 F6 | 	mov	local28, local22
039cc     7B 93 02 F6 | 	mov	arg01, local41
039d0     6E 95 02 F6 | 	mov	arg02, local28
039d4     08 10 B2 FD | 	call	#__system___string_cmp
039d8     3D BF 0A F6 | 	mov	local13, result1 wz
039dc     B8 00 90 5D |  if_ne	jmp	#LR__0187
039e0                 | LR__0186
039e0     77 DD 02 F6 | 	mov	local28, local37
039e4     01 DC 06 F1 | 	add	local28, #1
039e8     6E D1 02 F6 | 	mov	local22, local28
039ec     68 D3 02 F6 | 	mov	local23, local22
039f0     03 D2 66 F0 | 	shl	local23, #3
039f4     32 D5 02 F6 | 	mov	local24, objptr
039f8     36 00 00 FF 
039fc     2C D4 06 F1 | 	add	local24, ##27692
03a00     6A D3 02 F1 | 	add	local23, local24
03a04     04 D2 06 F1 | 	add	local23, #4
03a08     69 E1 02 FB | 	rdlong	local30, local23
03a0c     04 D2 86 F1 | 	sub	local23, #4
03a10     70 DF 02 F6 | 	mov	local29, local30
03a14     01 00 00 FF 
03a18     04 DE 0E F2 | 	cmp	local29, ##516 wz
03a1c     78 00 90 5D |  if_ne	jmp	#LR__0187
03a20     77 05 03 F6 | 	mov	local48, local37
03a24     01 04 07 F1 | 	add	local48, #1
03a28     03 04 67 F0 | 	shl	local48, #3
03a2c     32 07 03 F6 | 	mov	local49, objptr
03a30     36 00 00 FF 
03a34     2C 06 07 F1 | 	add	local49, ##27692
03a38     83 05 03 F1 | 	add	local48, local49
03a3c     82 93 02 FB | 	rdlong	arg01, local48
03a40     01 94 06 F6 | 	mov	arg02, #1
03a44     A0 28 B2 FD | 	call	#__system__Right_S
03a48     3D 93 02 F6 | 	mov	arg01, result1
03a4c     92 01 00 FF 
03a50     F3 09 07 F6 | 	mov	local50, ##@LR__5559
03a54     84 0B 03 F6 | 	mov	local51, local50
03a58     85 95 02 F6 | 	mov	arg02, local51
03a5c     80 0F B2 FD | 	call	#__system___string_cmp
03a60     3D E3 0A F6 | 	mov	local31, result1 wz
03a64     30 00 90 AD |  if_e	jmp	#LR__0187
03a68     77 B9 02 F6 | 	mov	local10, local37
03a6c     01 B8 06 F1 | 	add	local10, #1
03a70     03 B8 66 F0 | 	shl	local10, #3
03a74     32 AF 02 F6 | 	mov	local05, objptr
03a78     36 00 00 FF 
03a7c     2C AE 06 F1 | 	add	local05, ##27692
03a80     57 B9 02 F1 | 	add	local10, local05
03a84     01 00 00 FF 
03a88     03 B0 06 F6 | 	mov	local06, ##515
03a8c     04 B8 06 F1 | 	add	local10, #4
03a90     01 00 80 FF 
03a94     5C 07 68 FC | 	wrlong	##515, local10
03a98                 | LR__0187
03a98                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03a98     92 01 00 FF 
03a9c     F5 95 06 F6 | 	mov	arg02, ##@LR__5560
03aa0     7B 93 02 F6 | 	mov	arg01, local41
03aa4     38 0F B2 FD | 	call	#__system___string_cmp
03aa8     00 7A 0E F2 | 	cmp	result1, #0 wz
03aac     1C 00 90 AD |  if_e	jmp	#LR__0188
03ab0     92 01 00 FF 
03ab4     FC AF 06 F6 | 	mov	local05, ##@LR__5561
03ab8     7B 93 02 F6 | 	mov	arg01, local41
03abc     57 95 02 F6 | 	mov	arg02, local05
03ac0     1C 0F B2 FD | 	call	#__system___string_cmp
03ac4     00 7A 0E F2 | 	cmp	result1, #0 wz
03ac8     B4 00 90 5D |  if_ne	jmp	#LR__0189
03acc                 | LR__0188
03acc     77 AF 02 F6 | 	mov	local05, local37
03ad0     01 AE 06 F1 | 	add	local05, #1
03ad4     57 B1 02 F6 | 	mov	local06, local05
03ad8     03 B0 66 F0 | 	shl	local06, #3
03adc     32 BD 02 F6 | 	mov	local12, objptr
03ae0     36 00 00 FF 
03ae4     2C BC 06 F1 | 	add	local12, ##27692
03ae8     5E B1 02 F1 | 	add	local06, local12
03aec     04 B0 06 F1 | 	add	local06, #4
03af0     58 C1 02 FB | 	rdlong	local14, local06
03af4     04 B0 86 F1 | 	sub	local06, #4
03af8     60 BB 02 F6 | 	mov	local11, local14
03afc     01 00 00 FF 
03b00     04 BA 0E F2 | 	cmp	local11, ##516 wz
03b04     78 00 90 5D |  if_ne	jmp	#LR__0189
03b08     77 D3 02 F6 | 	mov	local23, local37
03b0c     01 D2 06 F1 | 	add	local23, #1
03b10     03 D2 66 F0 | 	shl	local23, #3
03b14     32 D5 02 F6 | 	mov	local24, objptr
03b18     36 00 00 FF 
03b1c     2C D4 06 F1 | 	add	local24, ##27692
03b20     6A D3 02 F1 | 	add	local23, local24
03b24     69 93 02 FB | 	rdlong	arg01, local23
03b28     01 94 06 F6 | 	mov	arg02, #1
03b2c     B8 27 B2 FD | 	call	#__system__Right_S
03b30     3D 93 02 F6 | 	mov	arg01, result1
03b34     93 01 00 FF 
03b38     02 D0 06 F6 | 	mov	local22, ##@LR__5562
03b3c     68 DD 02 F6 | 	mov	local28, local22
03b40     6E 95 02 F6 | 	mov	arg02, local28
03b44     98 0E B2 FD | 	call	#__system___string_cmp
03b48     3D BF 0A F6 | 	mov	local13, result1 wz
03b4c     30 00 90 AD |  if_e	jmp	#LR__0189
03b50     77 B9 02 F6 | 	mov	local10, local37
03b54     01 B8 06 F1 | 	add	local10, #1
03b58     03 B8 66 F0 | 	shl	local10, #3
03b5c     32 AF 02 F6 | 	mov	local05, objptr
03b60     36 00 00 FF 
03b64     2C AE 06 F1 | 	add	local05, ##27692
03b68     57 B9 02 F1 | 	add	local10, local05
03b6c     01 00 00 FF 
03b70     03 B0 06 F6 | 	mov	local06, ##515
03b74     04 B8 06 F1 | 	add	local10, #4
03b78     01 00 80 FF 
03b7c     5C 07 68 FC | 	wrlong	##515, local10
03b80                 | LR__0189
03b80                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03b80     93 01 00 FF 
03b84     04 94 06 F6 | 	mov	arg02, ##@LR__5563
03b88     7B 93 02 F6 | 	mov	arg01, local41
03b8c     50 0E B2 FD | 	call	#__system___string_cmp
03b90     00 7A 0E F2 | 	cmp	result1, #0 wz
03b94     B0 00 90 5D |  if_ne	jmp	#LR__0190
03b98     77 AF 02 F6 | 	mov	local05, local37
03b9c     01 AE 06 F1 | 	add	local05, #1
03ba0     03 AE 66 F0 | 	shl	local05, #3
03ba4     32 B1 02 F6 | 	mov	local06, objptr
03ba8     36 00 00 FF 
03bac     2C B0 06 F1 | 	add	local06, ##27692
03bb0     58 AF 02 F1 | 	add	local05, local06
03bb4     04 AE 06 F1 | 	add	local05, #4
03bb8     57 BB 02 FB | 	rdlong	local11, local05
03bbc     04 AE 86 F1 | 	sub	local05, #4
03bc0     5D BD 02 F6 | 	mov	local12, local11
03bc4     01 00 00 FF 
03bc8     04 BC 0E F2 | 	cmp	local12, ##516 wz
03bcc     78 00 90 5D |  if_ne	jmp	#LR__0190
03bd0     77 D1 02 F6 | 	mov	local22, local37
03bd4     01 D0 06 F1 | 	add	local22, #1
03bd8     03 D0 66 F0 | 	shl	local22, #3
03bdc     32 D3 02 F6 | 	mov	local23, objptr
03be0     36 00 00 FF 
03be4     2C D2 06 F1 | 	add	local23, ##27692
03be8     69 D1 02 F1 | 	add	local22, local23
03bec     68 93 02 FB | 	rdlong	arg01, local22
03bf0     01 94 06 F6 | 	mov	arg02, #1
03bf4     F0 26 B2 FD | 	call	#__system__Right_S
03bf8     3D 93 02 F6 | 	mov	arg01, result1
03bfc     93 01 00 FF 
03c00     09 DC 06 F6 | 	mov	local28, ##@LR__5564
03c04     6E BF 02 F6 | 	mov	local13, local28
03c08     5F 95 02 F6 | 	mov	arg02, local13
03c0c     D0 0D B2 FD | 	call	#__system___string_cmp
03c10     3D C1 0A F6 | 	mov	local14, result1 wz
03c14     30 00 90 AD |  if_e	jmp	#LR__0190
03c18     77 B9 02 F6 | 	mov	local10, local37
03c1c     01 B8 06 F1 | 	add	local10, #1
03c20     03 B8 66 F0 | 	shl	local10, #3
03c24     32 AF 02 F6 | 	mov	local05, objptr
03c28     36 00 00 FF 
03c2c     2C AE 06 F1 | 	add	local05, ##27692
03c30     57 B9 02 F1 | 	add	local10, local05
03c34     01 00 00 FF 
03c38     03 B0 06 F6 | 	mov	local06, ##515
03c3c     04 B8 06 F1 | 	add	local10, #4
03c40     01 00 80 FF 
03c44     5C 07 68 FC | 	wrlong	##515, local10
03c48                 | LR__0190
03c48                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03c48     93 01 00 FF 
03c4c     0B 94 06 F6 | 	mov	arg02, ##@LR__5565
03c50     7B 93 02 F6 | 	mov	arg01, local41
03c54     88 0D B2 FD | 	call	#__system___string_cmp
03c58     00 7A 0E F2 | 	cmp	result1, #0 wz
03c5c     B0 00 90 5D |  if_ne	jmp	#LR__0191
03c60     77 AF 02 F6 | 	mov	local05, local37
03c64     03 AE 06 F1 | 	add	local05, #3
03c68     03 AE 66 F0 | 	shl	local05, #3
03c6c     32 B1 02 F6 | 	mov	local06, objptr
03c70     36 00 00 FF 
03c74     2C B0 06 F1 | 	add	local06, ##27692
03c78     58 AF 02 F1 | 	add	local05, local06
03c7c     04 AE 06 F1 | 	add	local05, #4
03c80     57 BB 02 FB | 	rdlong	local11, local05
03c84     04 AE 86 F1 | 	sub	local05, #4
03c88     5D BD 02 F6 | 	mov	local12, local11
03c8c     01 00 00 FF 
03c90     04 BC 0E F2 | 	cmp	local12, ##516 wz
03c94     78 00 90 5D |  if_ne	jmp	#LR__0191
03c98     77 D1 02 F6 | 	mov	local22, local37
03c9c     03 D0 06 F1 | 	add	local22, #3
03ca0     03 D0 66 F0 | 	shl	local22, #3
03ca4     32 D3 02 F6 | 	mov	local23, objptr
03ca8     36 00 00 FF 
03cac     2C D2 06 F1 | 	add	local23, ##27692
03cb0     69 D1 02 F1 | 	add	local22, local23
03cb4     68 93 02 FB | 	rdlong	arg01, local22
03cb8     01 94 06 F6 | 	mov	arg02, #1
03cbc     28 26 B2 FD | 	call	#__system__Right_S
03cc0     3D 93 02 F6 | 	mov	arg01, result1
03cc4     93 01 00 FF 
03cc8     10 DC 06 F6 | 	mov	local28, ##@LR__5566
03ccc     6E BF 02 F6 | 	mov	local13, local28
03cd0     5F 95 02 F6 | 	mov	arg02, local13
03cd4     08 0D B2 FD | 	call	#__system___string_cmp
03cd8     3D C1 0A F6 | 	mov	local14, result1 wz
03cdc     30 00 90 AD |  if_e	jmp	#LR__0191
03ce0     77 B9 02 F6 | 	mov	local10, local37
03ce4     03 B8 06 F1 | 	add	local10, #3
03ce8     03 B8 66 F0 | 	shl	local10, #3
03cec     32 AF 02 F6 | 	mov	local05, objptr
03cf0     36 00 00 FF 
03cf4     2C AE 06 F1 | 	add	local05, ##27692
03cf8     57 B9 02 F1 | 	add	local10, local05
03cfc     01 00 00 FF 
03d00     03 B0 06 F6 | 	mov	local06, ##515
03d04     04 B8 06 F1 | 	add	local10, #4
03d08     01 00 80 FF 
03d0c     5C 07 68 FC | 	wrlong	##515, local10
03d10                 | LR__0191
03d10                 | ' 
03d10                 | ' ' cd needs special treatment..
03d10                 | ' 
03d10                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03d10     93 01 00 FF 
03d14     12 94 06 F6 | 	mov	arg02, ##@LR__5567
03d18     7B 93 02 F6 | 	mov	arg01, local41
03d1c     C0 0C B2 FD | 	call	#__system___string_cmp
03d20     00 7A 0E F2 | 	cmp	result1, #0 wz
03d24     30 00 90 5D |  if_ne	jmp	#LR__0192
03d28     77 B9 02 F6 | 	mov	local10, local37
03d2c     01 B8 06 F1 | 	add	local10, #1
03d30     03 B8 66 F0 | 	shl	local10, #3
03d34     32 AF 02 F6 | 	mov	local05, objptr
03d38     36 00 00 FF 
03d3c     2C AE 06 F1 | 	add	local05, ##27692
03d40     57 B9 02 F1 | 	add	local10, local05
03d44     01 00 00 FF 
03d48     03 B0 06 F6 | 	mov	local06, ##515
03d4c     04 B8 06 F1 | 	add	local10, #4
03d50     01 00 80 FF 
03d54     5C 07 68 FC | 	wrlong	##515, local10
03d58                 | LR__0192
03d58                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03d58     93 01 00 FF 
03d5c     15 94 06 F6 | 	mov	arg02, ##@LR__5568
03d60     7B 93 02 F6 | 	mov	arg01, local41
03d64     78 0C B2 FD | 	call	#__system___string_cmp
03d68     00 7A 0E F2 | 	cmp	result1, #0 wz
03d6c     9C 00 90 5D |  if_ne	jmp	#LR__0193
03d70     77 B1 02 F6 | 	mov	local06, local37
03d74     01 B0 06 F1 | 	add	local06, #1
03d78     03 B0 66 F0 | 	shl	local06, #3
03d7c     32 BD 02 F6 | 	mov	local12, objptr
03d80     36 00 00 FF 
03d84     2C BC 06 F1 | 	add	local12, ##27692
03d88     5E B1 02 F1 | 	add	local06, local12
03d8c     58 93 02 FB | 	rdlong	arg01, local06
03d90     93 01 00 FF 
03d94     19 AE 06 F6 | 	mov	local05, ##@LR__5569
03d98     57 95 02 F6 | 	mov	arg02, local05
03d9c     40 0C B2 FD | 	call	#__system___string_cmp
03da0     00 7A 0E F2 | 	cmp	result1, #0 wz
03da4     64 00 90 5D |  if_ne	jmp	#LR__0193
03da8     77 B9 02 F6 | 	mov	local10, local37
03dac     01 B8 06 F1 | 	add	local10, #1
03db0     03 B8 66 F0 | 	shl	local10, #3
03db4     36 00 00 FF 
03db8     2C 64 06 F1 | 	add	objptr, ##27692
03dbc     32 B9 02 F1 | 	add	local10, objptr
03dc0     04 B8 06 F1 | 	add	local10, #4
03dc4     01 00 80 FF 
03dc8     5C 07 68 FC | 	wrlong	##515, local10
03dcc     77 B9 02 F6 | 	mov	local10, local37
03dd0     01 B8 06 F1 | 	add	local10, #1
03dd4     03 B8 66 F0 | 	shl	local10, #3
03dd8     32 B9 02 F1 | 	add	local10, objptr
03ddc     93 01 00 FF 
03de0     1B B0 06 F6 | 	mov	local06, ##@LR__5570
03de4     5C B1 62 FC | 	wrlong	local06, local10
03de8     77 B9 02 F6 | 	mov	local10, local37
03dec     03 B8 66 F0 | 	shl	local10, #3
03df0     32 AF 02 F6 | 	mov	local05, objptr
03df4     32 B9 02 F1 | 	add	local10, objptr
03df8     C3 B0 06 F6 | 	mov	local06, #195
03dfc     04 B8 06 F1 | 	add	local10, #4
03e00     5C 87 69 FC | 	wrlong	#195, local10
03e04     36 00 00 FF 
03e08     2C 64 86 F1 | 	sub	objptr, ##27692
03e0c                 | LR__0193
03e0c                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03e0c     93 01 00 FF 
03e10     1E B8 06 F6 | 	mov	local10, ##@LR__5571
03e14     7B 93 02 F6 | 	mov	arg01, local41
03e18     5C 95 02 F6 | 	mov	arg02, local10
03e1c     C0 0B B2 FD | 	call	#__system___string_cmp
03e20     00 7A 0E F2 | 	cmp	result1, #0 wz
03e24     F4 00 90 5D |  if_ne	jmp	#LR__0196
03e28     77 B1 02 F6 | 	mov	local06, local37
03e2c     01 B0 06 F1 | 	add	local06, #1
03e30     03 B0 66 F0 | 	shl	local06, #3
03e34     32 BD 02 F6 | 	mov	local12, objptr
03e38     36 00 00 FF 
03e3c     2C BC 06 F1 | 	add	local12, ##27692
03e40     5E B1 02 F1 | 	add	local06, local12
03e44     58 93 02 FB | 	rdlong	arg01, local06
03e48     93 01 00 FF 
03e4c     21 AE 06 F6 | 	mov	local05, ##@LR__5572
03e50     57 B9 02 F6 | 	mov	local10, local05
03e54     5C 95 02 F6 | 	mov	arg02, local10
03e58     84 0B B2 FD | 	call	#__system___string_cmp
03e5c     00 7A 0E F2 | 	cmp	result1, #0 wz
03e60     B8 00 90 5D |  if_ne	jmp	#LR__0196
03e64     77 B9 02 F6 | 	mov	local10, local37
03e68     01 B8 06 F1 | 	add	local10, #1
03e6c     03 B8 66 F0 | 	shl	local10, #3
03e70     32 AF 02 F6 | 	mov	local05, objptr
03e74     36 00 00 FF 
03e78     2C AE 06 F1 | 	add	local05, ##27692
03e7c     57 B9 02 F1 | 	add	local10, local05
03e80     01 00 00 FF 
03e84     03 B0 06 F6 | 	mov	local06, ##515
03e88     04 B8 06 F1 | 	add	local10, #4
03e8c     01 00 80 FF 
03e90     5C 07 68 FC | 	wrlong	##515, local10
03e94     04 B8 86 F1 | 	sub	local10, #4
03e98     77 A9 02 F6 | 	mov	local02, local37
03e9c     02 A8 06 F1 | 	add	local02, #2
03ea0     63 0D 03 F6 | 	mov	local52, local17
03ea4     01 0C 07 F1 | 	add	local52, #1
03ea8                 | LR__0194
03ea8     86 A9 52 F2 | 	cmps	local02, local52 wc
03eac     6C 00 90 3D |  if_ae	jmp	#LR__0195
03eb0     77 B9 02 F6 | 	mov	local10, local37
03eb4     01 B8 06 F1 | 	add	local10, #1
03eb8     03 B8 66 F0 | 	shl	local10, #3
03ebc     36 00 00 FF 
03ec0     2C 64 06 F1 | 	add	objptr, ##27692
03ec4     32 AF 02 F6 | 	mov	local05, objptr
03ec8     32 B9 02 F1 | 	add	local10, objptr
03ecc     77 C1 02 F6 | 	mov	local14, local37
03ed0     01 C0 06 F1 | 	add	local14, #1
03ed4     03 C0 66 F0 | 	shl	local14, #3
03ed8     32 C1 02 F1 | 	add	local14, objptr
03edc     60 93 02 FB | 	rdlong	arg01, local14
03ee0     54 BB 02 F6 | 	mov	local11, local02
03ee4     5D C1 02 F6 | 	mov	local14, local11
03ee8     60 BF 02 F6 | 	mov	local13, local14
03eec     03 BE 66 F0 | 	shl	local13, #3
03ef0     32 DD 02 F6 | 	mov	local28, objptr
03ef4     32 BF 02 F1 | 	add	local13, objptr
03ef8     5F BD 02 FB | 	rdlong	local12, local13
03efc     5E 95 02 F6 | 	mov	arg02, local12
03f00     36 00 00 FF 
03f04     2C 64 86 F1 | 	sub	objptr, ##27692
03f08     08 0B B2 FD | 	call	#__system___string_concat
03f0c     3D B1 02 F6 | 	mov	local06, result1
03f10     5C B1 62 FC | 	wrlong	local06, local10
03f14     01 A8 06 F1 | 	add	local02, #1
03f18     8C FF 9F FD | 	jmp	#LR__0194
03f1c                 | LR__0195
03f1c                 | LR__0196
03f1c                 | ' 
03f1c                 | ' ' determine a type of the line and compile it
03f1c                 | ' 
03f1c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03f1c     36 00 00 FF 
03f20     2C 64 06 F1 | 	add	objptr, ##27692
03f24     32 93 02 FB | 	rdlong	arg01, objptr
03f28     36 00 00 FF 
03f2c     2C 64 86 F1 | 	sub	objptr, ##27692
03f30     C8 31 B0 FD | 	call	#_isdec
03f34     00 7A 0E F2 | 	cmp	result1, #0 wz
03f38     30 00 90 AD |  if_e	jmp	#LR__0197
03f3c     36 00 00 FF 
03f40     2C 64 06 F1 | 	add	objptr, ##27692
03f44     32 93 02 FB | 	rdlong	arg01, objptr
03f48     36 00 00 FF 
03f4c     2C 64 86 F1 | 	sub	objptr, ##27692
03f50     00 94 06 F6 | 	mov	arg02, #0
03f54     B4 37 B2 FD | 	call	#__system____builtin_atoi
03f58     53 00 00 FF 
03f5c     08 65 06 F1 | 	add	objptr, ##42760
03f60     32 7B 62 FC | 	wrlong	result1, objptr
03f64     53 00 00 FF 
03f68     08 65 86 F1 | 	sub	objptr, ##42760
03f6c                 | LR__0197
03f6c                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03f6c     53 00 00 FF 
03f70     08 65 06 F1 | 	add	objptr, ##42760
03f74     32 AD 02 FB | 	rdlong	local04, objptr
03f78     53 00 00 FF 
03f7c     08 65 86 F1 | 	sub	objptr, ##42760
03f80     01 AC 16 F2 | 	cmp	local04, #1 wc
03f84     40 00 90 CD |  if_b	jmp	#LR__0198
03f88     01 C6 0E F2 | 	cmp	local17, #1 wz
03f8c     38 00 00 AF 
03f90     44 64 06 A1 |  if_e	add	objptr, ##28740
03f94     32 AF 02 AB |  if_e	rdlong	local05, objptr
03f98     38 00 00 AF 
03f9c     44 64 86 A1 |  if_e	sub	objptr, ##28740
03fa0     57 B9 02 A6 |  if_e	mov	local10, local05
03fa4     03 B8 0E A2 |  if_e	cmp	local10, #3 wz
03fa8     1C 00 90 5D |  if_ne	jmp	#LR__0198
03fac     53 00 00 FF 
03fb0     08 65 06 F1 | 	add	objptr, ##42760
03fb4     32 93 02 FB | 	rdlong	arg01, objptr
03fb8     53 00 00 FF 
03fbc     08 65 86 F1 | 	sub	objptr, ##42760
03fc0     E0 32 B0 FD | 	call	#_deleteline
03fc4     C8 03 90 FD | 	jmp	#LR__0209
03fc8                 | LR__0198
03fc8                 | ' 
03fc8                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03fc8     38 00 00 FF 
03fcc     44 64 06 F1 | 	add	objptr, ##28740
03fd0     32 AD 0A FB | 	rdlong	local04, objptr wz
03fd4     38 00 00 FF 
03fd8     44 64 86 F1 | 	sub	objptr, ##28740
03fdc     20 00 90 AD |  if_e	jmp	#LR__0199
03fe0     38 00 00 FF 
03fe4     44 64 06 F1 | 	add	objptr, ##28740
03fe8     32 AF 02 FB | 	rdlong	local05, objptr
03fec     38 00 00 FF 
03ff0     44 64 86 F1 | 	sub	objptr, ##28740
03ff4     57 B9 02 F6 | 	mov	local10, local05
03ff8     03 B8 0E F2 | 	cmp	local10, #3 wz
03ffc     C0 00 90 5D |  if_ne	jmp	#LR__0201
04000                 | LR__0199
04000     36 00 00 FF 
04004     40 64 06 F1 | 	add	objptr, ##27712
04008     32 BD 02 FB | 	rdlong	local12, objptr
0400c     36 00 00 FF 
04010     40 64 86 F1 | 	sub	objptr, ##27712
04014     1B BC 0E F2 | 	cmp	local12, #27 wz
04018     A4 00 90 AD |  if_e	jmp	#LR__0201
0401c     53 00 00 FF 
04020     08 65 06 F1 | 	add	objptr, ##42760
04024     32 93 02 FB | 	rdlong	arg01, objptr
04028     1B 00 00 FF 
0402c     C4 64 86 F1 | 	sub	objptr, ##14020
04030     32 97 02 FB | 	rdlong	arg03, objptr
04034     38 00 00 FF 
04038     44 64 86 F1 | 	sub	objptr, ##28740
0403c     00 94 06 F6 | 	mov	arg02, #0
04040     38 46 B0 FD | 	call	#_compile
04044     3D A7 0A F6 | 	mov	local01, result1 wz
04048                 | '   err=compile(linenum,0,cont) 
04048                 | '   if err<>0 then printerror(err,linenum): goto 101
04048     20 00 90 AD |  if_e	jmp	#LR__0200
0404c     53 00 00 FF 
04050     08 65 06 F1 | 	add	objptr, ##42760
04054     32 95 02 FB | 	rdlong	arg02, objptr
04058     53 00 00 FF 
0405c     08 65 86 F1 | 	sub	objptr, ##42760
04060     53 93 02 F6 | 	mov	arg01, local01
04064     D4 CF B1 FD | 	call	#_printerror
04068     44 03 90 FD | 	jmp	#LR__0210
0406c                 | LR__0200
0406c                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
0406c     53 00 00 FF 
04070     4C 65 06 F1 | 	add	objptr, ##42828
04074     32 93 02 FB | 	rdlong	arg01, objptr
04078     53 00 00 FF 
0407c     4C 65 86 F1 | 	sub	objptr, ##42828
04080     93 01 00 FF 
04084     23 94 06 F6 | 	mov	arg02, ##@LR__5573
04088     54 09 B2 FD | 	call	#__system___string_cmp
0408c     00 7A 0E F2 | 	cmp	result1, #0 wz
04090     FC 02 90 AD |  if_e	jmp	#LR__0209
04094     53 00 00 FF 
04098     4C 65 06 F1 | 	add	objptr, ##42828
0409c     32 AD 02 FB | 	rdlong	local04, objptr
040a0     1B 00 00 FF 
040a4     10 65 86 F1 | 	sub	objptr, ##14096
040a8     32 AD 62 FC | 	wrlong	local04, objptr
040ac     08 64 06 F1 | 	add	objptr, #8
040b0     32 09 68 FC | 	wrlong	#4, objptr
040b4     38 00 00 FF 
040b8     44 64 86 F1 | 	sub	objptr, ##28740
040bc     0C D9 9F FD | 	jmp	#LR__0070
040c0                 | LR__0201
040c0                 | '       							
040c0                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
040c0     38 00 00 FF 
040c4     44 64 06 F1 | 	add	objptr, ##28740
040c8     32 AD 02 FB | 	rdlong	local04, objptr
040cc     38 00 00 FF 
040d0     44 64 86 F1 | 	sub	objptr, ##28740
040d4     01 AC 0E F2 | 	cmp	local04, #1 wz
040d8     38 00 00 5F 
040dc     44 64 06 51 |  if_ne	add	objptr, ##28740
040e0     32 B9 02 5B |  if_ne	rdlong	local10, objptr
040e4     38 00 00 5F 
040e8     44 64 86 51 |  if_ne	sub	objptr, ##28740
040ec     02 B8 0E 52 |  if_ne	cmp	local10, #2 wz
040f0     C0 00 90 5D |  if_ne	jmp	#LR__0203
040f4     36 00 00 FF 
040f8     38 64 06 F1 | 	add	objptr, ##27704
040fc     32 BD 02 FB | 	rdlong	local12, objptr
04100     36 00 00 FF 
04104     38 64 86 F1 | 	sub	objptr, ##27704
04108     1B BC 0E F2 | 	cmp	local12, #27 wz
0410c     A4 00 90 AD |  if_e	jmp	#LR__0203
04110     53 00 00 FF 
04114     08 65 06 F1 | 	add	objptr, ##42760
04118     32 93 02 FB | 	rdlong	arg01, objptr
0411c     1B 00 00 FF 
04120     C4 64 86 F1 | 	sub	objptr, ##14020
04124     32 97 02 FB | 	rdlong	arg03, objptr
04128     38 00 00 FF 
0412c     44 64 86 F1 | 	sub	objptr, ##28740
04130     00 94 06 F6 | 	mov	arg02, #0
04134     44 45 B0 FD | 	call	#_compile
04138     3D A7 0A F6 | 	mov	local01, result1 wz
0413c                 | '   err=compile(linenum,0,cont) 
0413c                 | '   if err<>0 then printerror(err,linenum): goto 101
0413c     20 00 90 AD |  if_e	jmp	#LR__0202
04140     53 00 00 FF 
04144     08 65 06 F1 | 	add	objptr, ##42760
04148     32 95 02 FB | 	rdlong	arg02, objptr
0414c     53 00 00 FF 
04150     08 65 86 F1 | 	sub	objptr, ##42760
04154     53 93 02 F6 | 	mov	arg01, local01
04158     E0 CE B1 FD | 	call	#_printerror
0415c     50 02 90 FD | 	jmp	#LR__0210
04160                 | LR__0202
04160                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
04160     53 00 00 FF 
04164     4C 65 06 F1 | 	add	objptr, ##42828
04168     32 93 02 FB | 	rdlong	arg01, objptr
0416c     53 00 00 FF 
04170     4C 65 86 F1 | 	sub	objptr, ##42828
04174     93 01 00 FF 
04178     24 94 06 F6 | 	mov	arg02, ##@LR__5574
0417c     60 08 B2 FD | 	call	#__system___string_cmp
04180     00 7A 0E F2 | 	cmp	result1, #0 wz
04184     08 02 90 AD |  if_e	jmp	#LR__0209
04188     53 00 00 FF 
0418c     4C 65 06 F1 | 	add	objptr, ##42828
04190     32 AD 02 FB | 	rdlong	local04, objptr
04194     1B 00 00 FF 
04198     10 65 86 F1 | 	sub	objptr, ##14096
0419c     32 AD 62 FC | 	wrlong	local04, objptr
041a0     08 64 06 F1 | 	add	objptr, #8
041a4     32 09 68 FC | 	wrlong	#4, objptr
041a8     38 00 00 FF 
041ac     44 64 86 F1 | 	sub	objptr, ##28740
041b0     18 D8 9F FD | 	jmp	#LR__0070
041b4                 | LR__0203
041b4                 | ' 							 
041b4                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
041b4     38 00 00 FF 
041b8     44 64 06 F1 | 	add	objptr, ##28740
041bc     32 AD 0A FB | 	rdlong	local04, objptr wz
041c0     38 00 00 FF 
041c4     44 64 86 F1 | 	sub	objptr, ##28740
041c8     38 00 00 5F 
041cc     44 64 06 51 |  if_ne	add	objptr, ##28740
041d0     32 B9 02 5B |  if_ne	rdlong	local10, objptr
041d4     38 00 00 5F 
041d8     44 64 86 51 |  if_ne	sub	objptr, ##28740
041dc     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
041e0     36 00 00 AF 
041e4     40 64 06 A1 |  if_e	add	objptr, ##27712
041e8     32 BD 02 AB |  if_e	rdlong	local12, objptr
041ec     36 00 00 AF 
041f0     40 64 86 A1 |  if_e	sub	objptr, ##27712
041f4     1B BC 0E A2 |  if_e	cmp	local12, #27 wz
041f8     A4 00 90 5D |  if_ne	jmp	#LR__0205
041fc     53 00 00 FF 
04200     08 65 06 F1 | 	add	objptr, ##42760
04204     32 93 02 FB | 	rdlong	arg01, objptr
04208     1B 00 00 FF 
0420c     C4 64 86 F1 | 	sub	objptr, ##14020
04210     32 97 02 FB | 	rdlong	arg03, objptr
04214     38 00 00 FF 
04218     44 64 86 F1 | 	sub	objptr, ##28740
0421c     00 94 06 F6 | 	mov	arg02, #0
04220     20 45 B0 FD | 	call	#_compile_assign
04224     3D A7 0A F6 | 	mov	local01, result1 wz
04228                 | '   err=compile_assign(linenum,0,cont)
04228                 | '   if err<>0 then printerror(err,linenum): goto 101
04228     20 00 90 AD |  if_e	jmp	#LR__0204
0422c     53 00 00 FF 
04230     08 65 06 F1 | 	add	objptr, ##42760
04234     32 95 02 FB | 	rdlong	arg02, objptr
04238     53 00 00 FF 
0423c     08 65 86 F1 | 	sub	objptr, ##42760
04240     53 93 02 F6 | 	mov	arg01, local01
04244     F4 CD B1 FD | 	call	#_printerror
04248     64 01 90 FD | 	jmp	#LR__0210
0424c                 | LR__0204
0424c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
0424c     53 00 00 FF 
04250     4C 65 06 F1 | 	add	objptr, ##42828
04254     32 93 02 FB | 	rdlong	arg01, objptr
04258     53 00 00 FF 
0425c     4C 65 86 F1 | 	sub	objptr, ##42828
04260     93 01 00 FF 
04264     25 94 06 F6 | 	mov	arg02, ##@LR__5575
04268     74 07 B2 FD | 	call	#__system___string_cmp
0426c     00 7A 0E F2 | 	cmp	result1, #0 wz
04270     1C 01 90 AD |  if_e	jmp	#LR__0209
04274     53 00 00 FF 
04278     4C 65 06 F1 | 	add	objptr, ##42828
0427c     32 AD 02 FB | 	rdlong	local04, objptr
04280     1B 00 00 FF 
04284     10 65 86 F1 | 	sub	objptr, ##14096
04288     32 AD 62 FC | 	wrlong	local04, objptr
0428c     08 64 06 F1 | 	add	objptr, #8
04290     32 09 68 FC | 	wrlong	#4, objptr
04294     38 00 00 FF 
04298     44 64 86 F1 | 	sub	objptr, ##28740
0429c     2C D7 9F FD | 	jmp	#LR__0070
042a0                 | LR__0205
042a0                 | '     							 
042a0                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
042a0     38 00 00 FF 
042a4     44 64 06 F1 | 	add	objptr, ##28740
042a8     32 AD 02 FB | 	rdlong	local04, objptr
042ac     38 00 00 FF 
042b0     44 64 86 F1 | 	sub	objptr, ##28740
042b4     01 AC 0E F2 | 	cmp	local04, #1 wz
042b8     38 00 00 5F 
042bc     44 64 06 51 |  if_ne	add	objptr, ##28740
042c0     32 B9 02 5B |  if_ne	rdlong	local10, objptr
042c4     38 00 00 5F 
042c8     44 64 86 51 |  if_ne	sub	objptr, ##28740
042cc     02 B8 0E 52 |  if_ne	cmp	local10, #2 wz
042d0     36 00 00 AF 
042d4     38 64 06 A1 |  if_e	add	objptr, ##27704
042d8     32 BD 02 AB |  if_e	rdlong	local12, objptr
042dc     36 00 00 AF 
042e0     38 64 86 A1 |  if_e	sub	objptr, ##27704
042e4     1B BC 0E A2 |  if_e	cmp	local12, #27 wz
042e8     A4 00 90 5D |  if_ne	jmp	#LR__0208
042ec     53 00 00 FF 
042f0     08 65 06 F1 | 	add	objptr, ##42760
042f4     32 93 02 FB | 	rdlong	arg01, objptr
042f8     1B 00 00 FF 
042fc     C4 64 86 F1 | 	sub	objptr, ##14020
04300     32 97 02 FB | 	rdlong	arg03, objptr
04304     38 00 00 FF 
04308     44 64 86 F1 | 	sub	objptr, ##28740
0430c     00 94 06 F6 | 	mov	arg02, #0
04310     30 44 B0 FD | 	call	#_compile_assign
04314     3D A7 0A F6 | 	mov	local01, result1 wz
04318                 | '   err=compile_assign(linenum,0,cont) 
04318                 | '   if err<>0 then printerror(err,linenum): goto 101
04318     20 00 90 AD |  if_e	jmp	#LR__0206
0431c     53 00 00 FF 
04320     08 65 06 F1 | 	add	objptr, ##42760
04324     32 95 02 FB | 	rdlong	arg02, objptr
04328     53 00 00 FF 
0432c     08 65 86 F1 | 	sub	objptr, ##42760
04330     53 93 02 F6 | 	mov	arg01, local01
04334     04 CD B1 FD | 	call	#_printerror
04338     74 00 90 FD | 	jmp	#LR__0210
0433c                 | LR__0206
0433c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
0433c     53 00 00 FF 
04340     4C 65 06 F1 | 	add	objptr, ##42828
04344     32 93 02 FB | 	rdlong	arg01, objptr
04348     53 00 00 FF 
0434c     4C 65 86 F1 | 	sub	objptr, ##42828
04350     93 01 00 FF 
04354     26 94 06 F6 | 	mov	arg02, ##@LR__5576
04358     84 06 B2 FD | 	call	#__system___string_cmp
0435c     00 7A 4E F2 | 	cmps	result1, #0 wz
04360     2C 00 90 AD |  if_e	jmp	#LR__0207
04364     53 00 00 FF 
04368     4C 65 06 F1 | 	add	objptr, ##42828
0436c     32 AD 02 FB | 	rdlong	local04, objptr
04370     1B 00 00 FF 
04374     10 65 86 F1 | 	sub	objptr, ##14096
04378     32 AD 62 FC | 	wrlong	local04, objptr
0437c     08 64 06 F1 | 	add	objptr, #8
04380     32 09 68 FC | 	wrlong	#4, objptr
04384     38 00 00 FF 
04388     44 64 86 F1 | 	sub	objptr, ##28740
0438c     3C D6 9F FD | 	jmp	#LR__0070
04390                 | LR__0207
04390                 | LR__0208
04390                 | LR__0209
04390                 | ' 
04390                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
04390     53 00 00 FF 
04394     08 65 06 F1 | 	add	objptr, ##42760
04398     32 AD 0A FB | 	rdlong	local04, objptr wz
0439c     53 00 00 FF 
043a0     08 65 86 F1 | 	sub	objptr, ##42760
043a4     B0 00 90 5D |  if_ne	jmp	#LR__0213
043a8     02 92 06 F6 | 	mov	arg01, #2
043ac     D4 91 B0 FD | 	call	#_execute_line
043b0                 | LR__0210
043b0                 | '   execute_line(2)
043b0                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
043b0     53 00 00 FF 
043b4     2C 65 06 F1 | 	add	objptr, ##42796
043b8     32 AD 0A FB | 	rdlong	local04, objptr wz
043bc     53 00 00 FF 
043c0     2C 65 86 F1 | 	sub	objptr, ##42796
043c4     20 00 90 5D |  if_ne	jmp	#LR__0211
043c8     93 01 00 FF 
043cc     27 92 06 F6 | 	mov	arg01, ##@LR__5577
043d0                 | ' 
043d0                 | ' write(text)
043d0     C8 ED B1 FD | 	call	#_hg010b_spin2_write
043d4                 | ' crlf
043d4     64 F2 B1 FD | 	call	#_hg010b_spin2_crlf
043d8     93 01 00 FF 
043dc     28 92 06 F6 | 	mov	arg01, ##@LR__5578
043e0                 | ' 
043e0                 | ' write(text)
043e0     B8 ED B1 FD | 	call	#_hg010b_spin2_write
043e4                 | ' crlf
043e4     54 F2 B1 FD | 	call	#_hg010b_spin2_crlf
043e8                 | LR__0211
043e8                 | '     if inload=1 andalso err>0 then print fullline$
043e8     53 00 00 FF 
043ec     2C 65 06 F1 | 	add	objptr, ##42796
043f0     32 AD 02 FB | 	rdlong	local04, objptr
043f4     53 00 00 FF 
043f8     2C 65 86 F1 | 	sub	objptr, ##42796
043fc     01 AC 0E F2 | 	cmp	local04, #1 wz
04400     54 00 90 5D |  if_ne	jmp	#LR__0212
04404     01 A6 56 F2 | 	cmps	local01, #1 wc
04408     4C 00 90 CD |  if_b	jmp	#LR__0212
0440c     00 92 06 F6 | 	mov	arg01, #0
04410     28 5B B2 FD | 	call	#__system___getiolock_0622
04414     3D 93 02 F6 | 	mov	arg01, result1
04418     9C 05 B2 FD | 	call	#__system___lockmem
0441c     38 00 00 FF 
04420     40 64 06 F1 | 	add	objptr, ##28736
04424     32 95 02 FB | 	rdlong	arg02, objptr
04428     38 00 00 FF 
0442c     40 64 86 F1 | 	sub	objptr, ##28736
04430     00 92 06 F6 | 	mov	arg01, #0
04434     00 96 06 F6 | 	mov	arg03, #0
04438     70 12 B2 FD | 	call	#__system___basic_print_string
0443c     00 92 06 F6 | 	mov	arg01, #0
04440     0A 94 06 F6 | 	mov	arg02, #10
04444     00 96 06 F6 | 	mov	arg03, #0
04448     08 12 B2 FD | 	call	#__system___basic_print_char
0444c     00 92 06 F6 | 	mov	arg01, #0
04450     E8 5A B2 FD | 	call	#__system___getiolock_0622
04454     3D 01 68 FC | 	wrlong	#0, result1
04458                 | LR__0212
04458                 | LR__0213
04458     E7 F0 03 F6 | 	mov	ptra, fp
0445c     F2 00 A0 FD | 	call	#popregs_
04460                 | _interpret_ret
04460     2D 00 64 FD | 	ret
04464                 | 
04464                 | ' 
04464                 | ' '---------------------------------------------------------------------------------------------------------------------
04464                 | ' '
04464                 | ' '                          END OF TOKENIZER MAIN CODE
04464                 | ' '
04464                 | ' '---------------------------------------------------------------------------------------------------------------------
04464                 | ' 
04464                 | ' '---------------------------------------------------------------------------------------------------------------------
04464                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
04464                 | ' '---------------------------------------------------------------------------------------------------------------------
04464                 | ' 
04464                 | ' ' Check if the part is an operator, return a token or 0 if not found
04464                 | ' 
04464                 | ' function isoperator(s as string) as ubyte
04464                 | _isoperator
04464     01 CA 05 F6 | 	mov	COUNT_, #1
04468     E8 00 A0 FD | 	call	#pushregs_
0446c                 | ' 
0446c                 | ' select case s
0446c     49 A7 02 F6 | 	mov	local01, arg01
04470     93 01 00 FF 
04474     2E 94 06 F6 | 	mov	arg02, ##@LR__5579
04478     53 93 02 F6 | 	mov	arg01, local01
0447c     60 05 B2 FD | 	call	#__system___string_cmp
04480     00 7A 0E F2 | 	cmp	result1, #0 wz
04484     FC 01 90 AD |  if_e	jmp	#LR__0220
04488     93 01 00 FF 
0448c     30 94 06 F6 | 	mov	arg02, ##@LR__5580
04490     53 93 02 F6 | 	mov	arg01, local01
04494     48 05 B2 FD | 	call	#__system___string_cmp
04498     00 7A 0E F2 | 	cmp	result1, #0 wz
0449c     EC 01 90 AD |  if_e	jmp	#LR__0221
044a0     93 01 00 FF 
044a4     32 94 06 F6 | 	mov	arg02, ##@LR__5581
044a8     53 93 02 F6 | 	mov	arg01, local01
044ac     30 05 B2 FD | 	call	#__system___string_cmp
044b0     00 7A 0E F2 | 	cmp	result1, #0 wz
044b4     DC 01 90 AD |  if_e	jmp	#LR__0222
044b8     93 01 00 FF 
044bc     35 94 06 F6 | 	mov	arg02, ##@LR__5582
044c0     53 93 02 F6 | 	mov	arg01, local01
044c4     18 05 B2 FD | 	call	#__system___string_cmp
044c8     00 7A 0E F2 | 	cmp	result1, #0 wz
044cc     CC 01 90 AD |  if_e	jmp	#LR__0223
044d0     93 01 00 FF 
044d4     39 94 06 F6 | 	mov	arg02, ##@LR__5583
044d8     53 93 02 F6 | 	mov	arg01, local01
044dc     00 05 B2 FD | 	call	#__system___string_cmp
044e0     00 7A 0E F2 | 	cmp	result1, #0 wz
044e4     BC 01 90 AD |  if_e	jmp	#LR__0224
044e8     93 01 00 FF 
044ec     3B 94 06 F6 | 	mov	arg02, ##@LR__5584
044f0     53 93 02 F6 | 	mov	arg01, local01
044f4     E8 04 B2 FD | 	call	#__system___string_cmp
044f8     00 7A 0E F2 | 	cmp	result1, #0 wz
044fc     AC 01 90 AD |  if_e	jmp	#LR__0225
04500     93 01 00 FF 
04504     3D 94 06 F6 | 	mov	arg02, ##@LR__5585
04508     53 93 02 F6 | 	mov	arg01, local01
0450c     D0 04 B2 FD | 	call	#__system___string_cmp
04510     00 7A 0E F2 | 	cmp	result1, #0 wz
04514     9C 01 90 AD |  if_e	jmp	#LR__0226
04518     93 01 00 FF 
0451c     41 94 06 F6 | 	mov	arg02, ##@LR__5586
04520     53 93 02 F6 | 	mov	arg01, local01
04524     B8 04 B2 FD | 	call	#__system___string_cmp
04528     00 7A 0E F2 | 	cmp	result1, #0 wz
0452c     8C 01 90 AD |  if_e	jmp	#LR__0227
04530     93 01 00 FF 
04534     45 94 06 F6 | 	mov	arg02, ##@LR__5587
04538     53 93 02 F6 | 	mov	arg01, local01
0453c     A0 04 B2 FD | 	call	#__system___string_cmp
04540     00 7A 0E F2 | 	cmp	result1, #0 wz
04544     7C 01 90 AD |  if_e	jmp	#LR__0228
04548     93 01 00 FF 
0454c     49 94 06 F6 | 	mov	arg02, ##@LR__5588
04550     53 93 02 F6 | 	mov	arg01, local01
04554     88 04 B2 FD | 	call	#__system___string_cmp
04558     00 7A 0E F2 | 	cmp	result1, #0 wz
0455c     6C 01 90 AD |  if_e	jmp	#LR__0229
04560     93 01 00 FF 
04564     4D 94 06 F6 | 	mov	arg02, ##@LR__5589
04568     53 93 02 F6 | 	mov	arg01, local01
0456c     70 04 B2 FD | 	call	#__system___string_cmp
04570     00 7A 0E F2 | 	cmp	result1, #0 wz
04574     5C 01 90 AD |  if_e	jmp	#LR__0230
04578     93 01 00 FF 
0457c     51 94 06 F6 | 	mov	arg02, ##@LR__5590
04580     53 93 02 F6 | 	mov	arg01, local01
04584     58 04 B2 FD | 	call	#__system___string_cmp
04588     00 7A 0E F2 | 	cmp	result1, #0 wz
0458c     4C 01 90 AD |  if_e	jmp	#LR__0231
04590     93 01 00 FF 
04594     53 94 06 F6 | 	mov	arg02, ##@LR__5591
04598     53 93 02 F6 | 	mov	arg01, local01
0459c     40 04 B2 FD | 	call	#__system___string_cmp
045a0     00 7A 0E F2 | 	cmp	result1, #0 wz
045a4     3C 01 90 AD |  if_e	jmp	#LR__0232
045a8     93 01 00 FF 
045ac     57 94 06 F6 | 	mov	arg02, ##@LR__5592
045b0     53 93 02 F6 | 	mov	arg01, local01
045b4     28 04 B2 FD | 	call	#__system___string_cmp
045b8     00 7A 0E F2 | 	cmp	result1, #0 wz
045bc     2C 01 90 AD |  if_e	jmp	#LR__0233
045c0     93 01 00 FF 
045c4     59 94 06 F6 | 	mov	arg02, ##@LR__5593
045c8     53 93 02 F6 | 	mov	arg01, local01
045cc     10 04 B2 FD | 	call	#__system___string_cmp
045d0     00 7A 0E F2 | 	cmp	result1, #0 wz
045d4     1C 01 90 AD |  if_e	jmp	#LR__0234
045d8     93 01 00 FF 
045dc     5B 94 06 F6 | 	mov	arg02, ##@LR__5594
045e0     53 93 02 F6 | 	mov	arg01, local01
045e4     F8 03 B2 FD | 	call	#__system___string_cmp
045e8     00 7A 0E F2 | 	cmp	result1, #0 wz
045ec     0C 01 90 AD |  if_e	jmp	#LR__0235
045f0     93 01 00 FF 
045f4     5E 94 06 F6 | 	mov	arg02, ##@LR__5595
045f8     53 93 02 F6 | 	mov	arg01, local01
045fc     E0 03 B2 FD | 	call	#__system___string_cmp
04600     00 7A 0E F2 | 	cmp	result1, #0 wz
04604     FC 00 90 AD |  if_e	jmp	#LR__0236
04608     93 01 00 FF 
0460c     61 94 06 F6 | 	mov	arg02, ##@LR__5596
04610     53 93 02 F6 | 	mov	arg01, local01
04614     C8 03 B2 FD | 	call	#__system___string_cmp
04618     00 7A 0E F2 | 	cmp	result1, #0 wz
0461c     EC 00 90 AD |  if_e	jmp	#LR__0237
04620     93 01 00 FF 
04624     63 94 06 F6 | 	mov	arg02, ##@LR__5597
04628     53 93 02 F6 | 	mov	arg01, local01
0462c     B0 03 B2 FD | 	call	#__system___string_cmp
04630     00 7A 0E F2 | 	cmp	result1, #0 wz
04634     DC 00 90 AD |  if_e	jmp	#LR__0238
04638     93 01 00 FF 
0463c     65 94 06 F6 | 	mov	arg02, ##@LR__5598
04640     53 93 02 F6 | 	mov	arg01, local01
04644     98 03 B2 FD | 	call	#__system___string_cmp
04648     00 7A 0E F2 | 	cmp	result1, #0 wz
0464c     CC 00 90 AD |  if_e	jmp	#LR__0239
04650     93 01 00 FF 
04654     68 94 06 F6 | 	mov	arg02, ##@LR__5599
04658     53 93 02 F6 | 	mov	arg01, local01
0465c     80 03 B2 FD | 	call	#__system___string_cmp
04660     00 7A 0E F2 | 	cmp	result1, #0 wz
04664     BC 00 90 AD |  if_e	jmp	#LR__0240
04668     93 01 00 FF 
0466c     6B 94 06 F6 | 	mov	arg02, ##@LR__5600
04670     53 93 02 F6 | 	mov	arg01, local01
04674     68 03 B2 FD | 	call	#__system___string_cmp
04678     00 7A 0E F2 | 	cmp	result1, #0 wz
0467c     AC 00 90 AD |  if_e	jmp	#LR__0241
04680     B0 00 90 FD | 	jmp	#LR__0242
04684                 | LR__0220
04684     01 7A 06 F6 | 	mov	result1, #1
04688     AC 00 90 FD | 	jmp	#LR__0243
0468c                 | LR__0221
0468c     02 7A 06 F6 | 	mov	result1, #2
04690     A4 00 90 FD | 	jmp	#LR__0243
04694                 | LR__0222
04694     03 7A 06 F6 | 	mov	result1, #3
04698     9C 00 90 FD | 	jmp	#LR__0243
0469c                 | LR__0223
0469c     04 7A 06 F6 | 	mov	result1, #4
046a0     94 00 90 FD | 	jmp	#LR__0243
046a4                 | LR__0224
046a4     05 7A 06 F6 | 	mov	result1, #5
046a8     8C 00 90 FD | 	jmp	#LR__0243
046ac                 | LR__0225
046ac     06 7A 06 F6 | 	mov	result1, #6
046b0     84 00 90 FD | 	jmp	#LR__0243
046b4                 | LR__0226
046b4     07 7A 06 F6 | 	mov	result1, #7
046b8     7C 00 90 FD | 	jmp	#LR__0243
046bc                 | LR__0227
046bc     08 7A 06 F6 | 	mov	result1, #8
046c0     74 00 90 FD | 	jmp	#LR__0243
046c4                 | LR__0228
046c4     09 7A 06 F6 | 	mov	result1, #9
046c8     6C 00 90 FD | 	jmp	#LR__0243
046cc                 | LR__0229
046cc     0A 7A 06 F6 | 	mov	result1, #10
046d0     64 00 90 FD | 	jmp	#LR__0243
046d4                 | LR__0230
046d4     0B 7A 06 F6 | 	mov	result1, #11
046d8     5C 00 90 FD | 	jmp	#LR__0243
046dc                 | LR__0231
046dc     0C 7A 06 F6 | 	mov	result1, #12
046e0     54 00 90 FD | 	jmp	#LR__0243
046e4                 | LR__0232
046e4     0D 7A 06 F6 | 	mov	result1, #13
046e8     4C 00 90 FD | 	jmp	#LR__0243
046ec                 | LR__0233
046ec     0E 7A 06 F6 | 	mov	result1, #14
046f0     44 00 90 FD | 	jmp	#LR__0243
046f4                 | LR__0234
046f4     1B 7A 06 F6 | 	mov	result1, #27
046f8     3C 00 90 FD | 	jmp	#LR__0243
046fc                 | LR__0235
046fc     27 7A 06 F6 | 	mov	result1, #39
04700     34 00 90 FD | 	jmp	#LR__0243
04704                 | LR__0236
04704     26 7A 06 F6 | 	mov	result1, #38
04708     2C 00 90 FD | 	jmp	#LR__0243
0470c                 | LR__0237
0470c     10 7A 06 F6 | 	mov	result1, #16
04710     24 00 90 FD | 	jmp	#LR__0243
04714                 | LR__0238
04714     0F 7A 06 F6 | 	mov	result1, #15
04718     1C 00 90 FD | 	jmp	#LR__0243
0471c                 | LR__0239
0471c     2A 7A 06 F6 | 	mov	result1, #42
04720     14 00 90 FD | 	jmp	#LR__0243
04724                 | LR__0240
04724     28 7A 06 F6 | 	mov	result1, #40
04728     0C 00 90 FD | 	jmp	#LR__0243
0472c                 | LR__0241
0472c     29 7A 06 F6 | 	mov	result1, #41
04730     04 00 90 FD | 	jmp	#LR__0243
04734                 | LR__0242
04734     00 7A 06 F6 | 	mov	result1, #0
04738                 | LR__0243
04738     E7 F0 03 F6 | 	mov	ptra, fp
0473c     F2 00 A0 FD | 	call	#popregs_
04740                 | _isoperator_ret
04740     2D 00 64 FD | 	ret
04744                 | 
04744                 | ' 
04744                 | ' ' Check if the part is a channel#, return a token or 0 if not found
04744                 | ' 
04744                 | ' function ischannel(s as string) as ulong
04744                 | _ischannel
04744     02 CA 05 F6 | 	mov	COUNT_, #2
04748     E8 00 A0 FD | 	call	#pushregs_
0474c                 | ' if left$(s,1)<>"#" then return 0
0474c     49 A7 02 F6 | 	mov	local01, arg01
04750     01 94 06 F6 | 	mov	arg02, #1
04754     08 1B B2 FD | 	call	#__system__Left_S
04758     3D 93 02 F6 | 	mov	arg01, result1
0475c     93 01 00 FF 
04760     6E 94 06 F6 | 	mov	arg02, ##@LR__5601
04764     78 02 B2 FD | 	call	#__system___string_cmp
04768     00 7A 0E F2 | 	cmp	result1, #0 wz
0476c     00 7A 06 56 |  if_ne	mov	result1, #0
04770     AC 00 90 5D |  if_ne	jmp	#LR__0254
04774                 | ' if len(s)<>2 then return 0
04774     53 93 02 F6 | 	mov	arg01, local01
04778     49 A9 02 F6 | 	mov	local02, arg01
0477c     D7 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
04780                 | LR__0250
04780     54 7B CA FA | 	rdbyte	result1, local02 wz
04784     01 A8 06 51 |  if_ne	add	local02, #1
04788     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
0478c                 | LR__0251
0478c     49 A9 82 F1 | 	sub	local02, arg01
04790     54 7B 02 F6 | 	mov	result1, local02
04794     02 7A 0E F2 | 	cmp	result1, #2 wz
04798     00 7A 06 56 |  if_ne	mov	result1, #0
0479c     80 00 90 5D |  if_ne	jmp	#LR__0254
047a0                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
047a0     53 93 02 F6 | 	mov	arg01, local01
047a4     01 94 06 F6 | 	mov	arg02, #1
047a8     3C 1B B2 FD | 	call	#__system__Right_S
047ac     3D 93 02 F6 | 	mov	arg01, result1
047b0     93 01 00 FF 
047b4     70 94 06 F6 | 	mov	arg02, ##@LR__5602
047b8     24 02 B2 FD | 	call	#__system___string_cmp
047bc     00 7A 56 F2 | 	cmps	result1, #0 wc
047c0     24 00 90 CD |  if_b	jmp	#LR__0252
047c4     53 93 02 F6 | 	mov	arg01, local01
047c8     01 94 06 F6 | 	mov	arg02, #1
047cc     18 1B B2 FD | 	call	#__system__Right_S
047d0     3D 93 02 F6 | 	mov	arg01, result1
047d4     93 01 00 FF 
047d8     72 94 06 F6 | 	mov	arg02, ##@LR__5603
047dc     00 02 B2 FD | 	call	#__system___string_cmp
047e0     01 7A 56 F2 | 	cmps	result1, #1 wc
047e4     08 00 90 CD |  if_b	jmp	#LR__0253
047e8                 | LR__0252
047e8     00 7A 06 F6 | 	mov	result1, #0
047ec     30 00 90 FD | 	jmp	#LR__0254
047f0                 | LR__0253
047f0                 | ' return token_channel+val(right$(s,1))
047f0     53 93 02 F6 | 	mov	arg01, local01
047f4     01 94 06 F6 | 	mov	arg02, #1
047f8     EC 1A B2 FD | 	call	#__system__Right_S
047fc     3D 93 02 F6 | 	mov	arg01, result1
04800     A0 30 B2 FD | 	call	#__system____builtin_atof
04804     3D 95 02 F6 | 	mov	arg02, result1
04808     00 18 21 FF 
0480c     00 92 06 F6 | 	mov	arg01, ##1110441984
04810     A4 24 B2 FD | 	call	#__system___float_add
04814     3D 93 02 F6 | 	mov	arg01, result1
04818     00 94 06 F6 | 	mov	arg02, #0
0481c     30 2D B2 FD | 	call	#__system___float_tointeger
04820                 | LR__0254
04820     E7 F0 03 F6 | 	mov	ptra, fp
04824     F2 00 A0 FD | 	call	#popregs_
04828                 | _ischannel_ret
04828     2D 00 64 FD | 	ret
0482c                 | 
0482c                 | ' 
0482c                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
0482c                 | ' ' todo: add spin2/pasm constants for pin control
0482c                 | ' 
0482c                 | ' function isconstant(s as string) as integer
0482c                 | _isconstant
0482c     01 CA 05 F6 | 	mov	COUNT_, #1
04830     E8 00 A0 FD | 	call	#pushregs_
04834                 | ' 
04834                 | ' select case s
04834     49 A7 02 F6 | 	mov	local01, arg01
04838     93 01 00 FF 
0483c     74 94 06 F6 | 	mov	arg02, ##@LR__5604
04840     53 93 02 F6 | 	mov	arg01, local01
04844     98 01 B2 FD | 	call	#__system___string_cmp
04848     00 7A 0E F2 | 	cmp	result1, #0 wz
0484c     34 00 90 AD |  if_e	jmp	#LR__0260
04850     93 01 00 FF 
04854     7A 94 06 F6 | 	mov	arg02, ##@LR__5605
04858     53 93 02 F6 | 	mov	arg01, local01
0485c     80 01 B2 FD | 	call	#__system___string_cmp
04860     00 7A 0E F2 | 	cmp	result1, #0 wz
04864     24 00 90 AD |  if_e	jmp	#LR__0261
04868     93 01 00 FF 
0486c     81 94 06 F6 | 	mov	arg02, ##@LR__5606
04870     53 93 02 F6 | 	mov	arg01, local01
04874     68 01 B2 FD | 	call	#__system___string_cmp
04878     00 7A 0E F2 | 	cmp	result1, #0 wz
0487c     14 00 90 AD |  if_e	jmp	#LR__0262
04880     18 00 90 FD | 	jmp	#LR__0263
04884                 | LR__0260
04884     01 7A 06 F6 | 	mov	result1, #1
04888     14 00 90 FD | 	jmp	#LR__0264
0488c                 | LR__0261
0488c     02 7A 06 F6 | 	mov	result1, #2
04890     0C 00 90 FD | 	jmp	#LR__0264
04894                 | LR__0262
04894     04 7A 06 F6 | 	mov	result1, #4
04898     04 00 90 FD | 	jmp	#LR__0264
0489c                 | LR__0263
0489c     00 7A 06 F6 | 	mov	result1, #0
048a0                 | LR__0264
048a0     E7 F0 03 F6 | 	mov	ptra, fp
048a4     F2 00 A0 FD | 	call	#popregs_
048a8                 | _isconstant_ret
048a8     2D 00 64 FD | 	ret
048ac                 | 
048ac                 | ' 
048ac                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
048ac                 | ' 
048ac                 | ' function isnotename(s as string) as ulong
048ac                 | _isnotename
048ac     07 CA 05 F6 | 	mov	COUNT_, #7
048b0     E8 00 A0 FD | 	call	#pushregs_
048b4                 | ' if left$(s,1)<>"#" then return 0
048b4     49 A7 02 F6 | 	mov	local01, arg01
048b8     01 94 06 F6 | 	mov	arg02, #1
048bc     A0 19 B2 FD | 	call	#__system__Left_S
048c0     3D 93 02 F6 | 	mov	arg01, result1
048c4     93 01 00 FF 
048c8     89 94 06 F6 | 	mov	arg02, ##@LR__5607
048cc     10 01 B2 FD | 	call	#__system___string_cmp
048d0     00 7A 0E F2 | 	cmp	result1, #0 wz
048d4     00 7A 06 56 |  if_ne	mov	result1, #0
048d8     30 03 90 5D |  if_ne	jmp	#LR__0293
048dc                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
048dc     53 93 02 F6 | 	mov	arg01, local01
048e0     03 94 06 F6 | 	mov	arg02, #3
048e4     01 96 06 F6 | 	mov	arg03, #1
048e8     8C 1A B2 FD | 	call	#__system__Mid_S
048ec     3D 93 02 F6 | 	mov	arg01, result1
048f0     93 01 00 FF 
048f4     8B 94 06 F6 | 	mov	arg02, ##@LR__5608
048f8     E4 00 B2 FD | 	call	#__system___string_cmp
048fc     00 7A 0E F2 | 	cmp	result1, #0 wz
04900     18 00 90 5D |  if_ne	jmp	#LR__0270
04904     53 93 02 F6 | 	mov	arg01, local01
04908     02 94 06 F6 | 	mov	arg02, #2
0490c     02 96 06 F6 | 	mov	arg03, #2
04910     64 1A B2 FD | 	call	#__system__Mid_S
04914     3D A9 02 F6 | 	mov	local02, result1
04918     14 00 90 FD | 	jmp	#LR__0271
0491c                 | LR__0270
0491c     53 93 02 F6 | 	mov	arg01, local01
04920     02 94 06 F6 | 	mov	arg02, #2
04924     01 96 06 F6 | 	mov	arg03, #1
04928     4C 1A B2 FD | 	call	#__system__Mid_S
0492c     3D A9 02 F6 | 	mov	local02, result1
04930                 | LR__0271
04930                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
04930     53 93 02 F6 | 	mov	arg01, local01
04934     49 AB 02 F6 | 	mov	local03, arg01
04938     D7 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
0493c                 | LR__0272
0493c     55 7B CA FA | 	rdbyte	result1, local03 wz
04940     01 AA 06 51 |  if_ne	add	local03, #1
04944     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
04948                 | LR__0273
04948     49 AB 82 F1 | 	sub	local03, arg01
0494c     55 95 02 F6 | 	mov	arg02, local03
04950     01 94 86 F1 | 	sub	arg02, #1
04954     53 93 02 F6 | 	mov	arg01, local01
04958     01 96 06 F6 | 	mov	arg03, #1
0495c     18 1A B2 FD | 	call	#__system__Mid_S
04960     3D 93 02 F6 | 	mov	arg01, result1
04964     93 01 00 FF 
04968     8D 94 06 F6 | 	mov	arg02, ##@LR__5609
0496c     70 00 B2 FD | 	call	#__system___string_cmp
04970     00 7A 0E F2 | 	cmp	result1, #0 wz
04974     28 00 90 AD |  if_e	jmp	#LR__0274
04978     53 93 02 F6 | 	mov	arg01, local01
0497c     01 94 06 F6 | 	mov	arg02, #1
04980     64 19 B2 FD | 	call	#__system__Right_S
04984     3D 93 02 F6 | 	mov	arg01, result1
04988     18 2F B2 FD | 	call	#__system____builtin_atof
0498c     3D 93 02 F6 | 	mov	arg01, result1
04990     00 94 06 F6 | 	mov	arg02, #0
04994     B8 2B B2 FD | 	call	#__system___float_tointeger
04998     3D AD 02 F6 | 	mov	local04, result1
0499c     34 00 90 FD | 	jmp	#LR__0275
049a0                 | LR__0274
049a0     53 93 02 F6 | 	mov	arg01, local01
049a4     01 94 06 F6 | 	mov	arg02, #1
049a8     3C 19 B2 FD | 	call	#__system__Right_S
049ac     3D 93 02 F6 | 	mov	arg01, result1
049b0     F0 2E B2 FD | 	call	#__system____builtin_atof
049b4     3D 95 02 F6 | 	mov	arg02, result1
049b8     00 C0 5F FF 
049bc     00 92 06 F6 | 	mov	arg01, ##-1082130432
049c0     C4 26 B2 FD | 	call	#__system___float_mul
049c4     3D 93 02 F6 | 	mov	arg01, result1
049c8     00 94 06 F6 | 	mov	arg02, #0
049cc     80 2B B2 FD | 	call	#__system___float_tointeger
049d0     3D AD 02 F6 | 	mov	local04, result1
049d4                 | LR__0275
049d4                 | ' 
049d4                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
049d4     00 AC 0E F2 | 	cmp	local04, #0 wz
049d8     24 00 90 5D |  if_ne	jmp	#LR__0276
049dc     53 93 02 F6 | 	mov	arg01, local01
049e0     01 94 06 F6 | 	mov	arg02, #1
049e4     00 19 B2 FD | 	call	#__system__Right_S
049e8     3D 93 02 F6 | 	mov	arg01, result1
049ec     93 01 00 FF 
049f0     8F 94 06 F6 | 	mov	arg02, ##@LR__5610
049f4     E8 FF B1 FD | 	call	#__system___string_cmp
049f8     00 7A 0E F2 | 	cmp	result1, #0 wz
049fc     04 AC 06 56 |  if_ne	mov	local04, #4
04a00                 | LR__0276
04a00                 | ' 
04a00                 | ' select case s1
04a00     54 AF 02 F6 | 	mov	local05, local02
04a04     93 01 00 FF 
04a08     91 94 06 F6 | 	mov	arg02, ##@LR__5611
04a0c     57 93 02 F6 | 	mov	arg01, local05
04a10     CC FF B1 FD | 	call	#__system___string_cmp
04a14     00 7A 0E F2 | 	cmp	result1, #0 wz
04a18     24 01 90 AD |  if_e	jmp	#LR__0277
04a1c     93 01 00 FF 
04a20     93 94 06 F6 | 	mov	arg02, ##@LR__5612
04a24     57 93 02 F6 | 	mov	arg01, local05
04a28     B4 FF B1 FD | 	call	#__system___string_cmp
04a2c     00 7A 0E F2 | 	cmp	result1, #0 wz
04a30     18 01 90 AD |  if_e	jmp	#LR__0278
04a34     93 01 00 FF 
04a38     96 94 06 F6 | 	mov	arg02, ##@LR__5613
04a3c     57 93 02 F6 | 	mov	arg01, local05
04a40     9C FF B1 FD | 	call	#__system___string_cmp
04a44     00 7A 0E F2 | 	cmp	result1, #0 wz
04a48     0C 01 90 AD |  if_e	jmp	#LR__0279
04a4c     93 01 00 FF 
04a50     98 94 06 F6 | 	mov	arg02, ##@LR__5614
04a54     57 93 02 F6 | 	mov	arg01, local05
04a58     84 FF B1 FD | 	call	#__system___string_cmp
04a5c     00 7A 0E F2 | 	cmp	result1, #0 wz
04a60     00 01 90 AD |  if_e	jmp	#LR__0280
04a64     93 01 00 FF 
04a68     9B 94 06 F6 | 	mov	arg02, ##@LR__5615
04a6c     57 93 02 F6 | 	mov	arg01, local05
04a70     6C FF B1 FD | 	call	#__system___string_cmp
04a74     00 7A 0E F2 | 	cmp	result1, #0 wz
04a78     F4 00 90 AD |  if_e	jmp	#LR__0281
04a7c     93 01 00 FF 
04a80     9D 94 06 F6 | 	mov	arg02, ##@LR__5616
04a84     57 93 02 F6 | 	mov	arg01, local05
04a88     54 FF B1 FD | 	call	#__system___string_cmp
04a8c     00 7A 0E F2 | 	cmp	result1, #0 wz
04a90     E8 00 90 AD |  if_e	jmp	#LR__0282
04a94     93 01 00 FF 
04a98     9F 94 06 F6 | 	mov	arg02, ##@LR__5617
04a9c     57 93 02 F6 | 	mov	arg01, local05
04aa0     3C FF B1 FD | 	call	#__system___string_cmp
04aa4     00 7A 0E F2 | 	cmp	result1, #0 wz
04aa8     DC 00 90 AD |  if_e	jmp	#LR__0283
04aac     93 01 00 FF 
04ab0     A2 94 06 F6 | 	mov	arg02, ##@LR__5618
04ab4     57 93 02 F6 | 	mov	arg01, local05
04ab8     24 FF B1 FD | 	call	#__system___string_cmp
04abc     00 7A 0E F2 | 	cmp	result1, #0 wz
04ac0     D0 00 90 AD |  if_e	jmp	#LR__0284
04ac4     93 01 00 FF 
04ac8     A4 94 06 F6 | 	mov	arg02, ##@LR__5619
04acc     57 93 02 F6 | 	mov	arg01, local05
04ad0     0C FF B1 FD | 	call	#__system___string_cmp
04ad4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ad8     C4 00 90 AD |  if_e	jmp	#LR__0285
04adc     93 01 00 FF 
04ae0     A7 94 06 F6 | 	mov	arg02, ##@LR__5620
04ae4     57 93 02 F6 | 	mov	arg01, local05
04ae8     F4 FE B1 FD | 	call	#__system___string_cmp
04aec     00 7A 0E F2 | 	cmp	result1, #0 wz
04af0     B8 00 90 AD |  if_e	jmp	#LR__0286
04af4     93 01 00 FF 
04af8     A9 94 06 F6 | 	mov	arg02, ##@LR__5621
04afc     57 93 02 F6 | 	mov	arg01, local05
04b00     DC FE B1 FD | 	call	#__system___string_cmp
04b04     00 7A 0E F2 | 	cmp	result1, #0 wz
04b08     AC 00 90 AD |  if_e	jmp	#LR__0287
04b0c     93 01 00 FF 
04b10     AC 94 06 F6 | 	mov	arg02, ##@LR__5622
04b14     57 93 02 F6 | 	mov	arg01, local05
04b18     C4 FE B1 FD | 	call	#__system___string_cmp
04b1c     00 7A 0E F2 | 	cmp	result1, #0 wz
04b20     A0 00 90 AD |  if_e	jmp	#LR__0288
04b24     93 01 00 FF 
04b28     AE 94 06 F6 | 	mov	arg02, ##@LR__5623
04b2c     57 93 02 F6 | 	mov	arg01, local05
04b30     AC FE B1 FD | 	call	#__system___string_cmp
04b34     00 7A 0E F2 | 	cmp	result1, #0 wz
04b38     94 00 90 AD |  if_e	jmp	#LR__0289
04b3c     9C 00 90 FD | 	jmp	#LR__0290
04b40                 | LR__0277
04b40     01 00 00 FF 
04b44     00 B1 06 F6 | 	mov	local06, ##768
04b48     98 00 90 FD | 	jmp	#LR__0291
04b4c                 | LR__0278
04b4c     01 00 00 FF 
04b50     01 B1 06 F6 | 	mov	local06, ##769
04b54     8C 00 90 FD | 	jmp	#LR__0291
04b58                 | LR__0279
04b58     01 00 00 FF 
04b5c     02 B1 06 F6 | 	mov	local06, ##770
04b60     80 00 90 FD | 	jmp	#LR__0291
04b64                 | LR__0280
04b64     01 00 00 FF 
04b68     03 B1 06 F6 | 	mov	local06, ##771
04b6c     74 00 90 FD | 	jmp	#LR__0291
04b70                 | LR__0281
04b70     01 00 00 FF 
04b74     04 B1 06 F6 | 	mov	local06, ##772
04b78     68 00 90 FD | 	jmp	#LR__0291
04b7c                 | LR__0282
04b7c     01 00 00 FF 
04b80     05 B1 06 F6 | 	mov	local06, ##773
04b84     5C 00 90 FD | 	jmp	#LR__0291
04b88                 | LR__0283
04b88     01 00 00 FF 
04b8c     06 B1 06 F6 | 	mov	local06, ##774
04b90     50 00 90 FD | 	jmp	#LR__0291
04b94                 | LR__0284
04b94     01 00 00 FF 
04b98     07 B1 06 F6 | 	mov	local06, ##775
04b9c     44 00 90 FD | 	jmp	#LR__0291
04ba0                 | LR__0285
04ba0     01 00 00 FF 
04ba4     08 B1 06 F6 | 	mov	local06, ##776
04ba8     38 00 90 FD | 	jmp	#LR__0291
04bac                 | LR__0286
04bac     01 00 00 FF 
04bb0     09 B1 06 F6 | 	mov	local06, ##777
04bb4     2C 00 90 FD | 	jmp	#LR__0291
04bb8                 | LR__0287
04bb8     01 00 00 FF 
04bbc     0A B1 06 F6 | 	mov	local06, ##778
04bc0     20 00 90 FD | 	jmp	#LR__0291
04bc4                 | LR__0288
04bc4     01 00 00 FF 
04bc8     0B B1 06 F6 | 	mov	local06, ##779
04bcc     14 00 90 FD | 	jmp	#LR__0291
04bd0                 | LR__0289
04bd0     01 00 00 FF 
04bd4     0B B1 06 F6 | 	mov	local06, ##779
04bd8     08 00 90 FD | 	jmp	#LR__0291
04bdc                 | LR__0290
04bdc     00 7A 06 F6 | 	mov	result1, #0
04be0     28 00 90 FD | 	jmp	#LR__0293
04be4                 | LR__0291
04be4                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04be4     FF FF 7F FF 
04be8     FF AD 56 F2 | 	cmps	local04, ##-1 wc
04bec     18 00 90 CD |  if_b	jmp	#LR__0292
04bf0     0A AC 56 F2 | 	cmps	local04, #10 wc
04bf4     56 B3 02 C6 |  if_b	mov	local07, local04
04bf8     01 B2 66 C0 |  if_b	shl	local07, #1
04bfc     56 B3 02 C1 |  if_b	add	local07, local04
04c00     02 B2 66 C0 |  if_b	shl	local07, #2
04c04     59 B1 02 C1 |  if_b	add	local06, local07
04c08                 | LR__0292
04c08                 | ' return token
04c08     58 7B 02 F6 | 	mov	result1, local06
04c0c                 | LR__0293
04c0c     E7 F0 03 F6 | 	mov	ptra, fp
04c10     F2 00 A0 FD | 	call	#popregs_
04c14                 | _isnotename_ret
04c14     2D 00 64 FD | 	ret
04c18                 | 
04c18                 | ' 
04c18                 | ' ' Check if the part is a separator, return a token or 0 if not found
04c18                 | ' 
04c18                 | ' function isseparator(s as string) as ubyte
04c18                 | _isseparator
04c18     01 CA 05 F6 | 	mov	COUNT_, #1
04c1c     E8 00 A0 FD | 	call	#pushregs_
04c20                 | ' 
04c20                 | ' select case s
04c20     49 A7 02 F6 | 	mov	local01, arg01
04c24     93 01 00 FF 
04c28     B0 94 06 F6 | 	mov	arg02, ##@LR__5624
04c2c     53 93 02 F6 | 	mov	arg01, local01
04c30     AC FD B1 FD | 	call	#__system___string_cmp
04c34     00 7A 0E F2 | 	cmp	result1, #0 wz
04c38     54 01 90 AD |  if_e	jmp	#LR__0300
04c3c     93 01 00 FF 
04c40     B2 94 06 F6 | 	mov	arg02, ##@LR__5625
04c44     53 93 02 F6 | 	mov	arg01, local01
04c48     94 FD B1 FD | 	call	#__system___string_cmp
04c4c     00 7A 0E F2 | 	cmp	result1, #0 wz
04c50     44 01 90 AD |  if_e	jmp	#LR__0301
04c54     93 01 00 FF 
04c58     B4 94 06 F6 | 	mov	arg02, ##@LR__5626
04c5c     53 93 02 F6 | 	mov	arg01, local01
04c60     7C FD B1 FD | 	call	#__system___string_cmp
04c64     00 7A 0E F2 | 	cmp	result1, #0 wz
04c68     34 01 90 AD |  if_e	jmp	#LR__0302
04c6c     93 01 00 FF 
04c70     B6 94 06 F6 | 	mov	arg02, ##@LR__5627
04c74     53 93 02 F6 | 	mov	arg01, local01
04c78     64 FD B1 FD | 	call	#__system___string_cmp
04c7c     00 7A 0E F2 | 	cmp	result1, #0 wz
04c80     24 01 90 AD |  if_e	jmp	#LR__0303
04c84     93 01 00 FF 
04c88     B8 94 06 F6 | 	mov	arg02, ##@LR__5628
04c8c     53 93 02 F6 | 	mov	arg01, local01
04c90     4C FD B1 FD | 	call	#__system___string_cmp
04c94     00 7A 0E F2 | 	cmp	result1, #0 wz
04c98     14 01 90 AD |  if_e	jmp	#LR__0304
04c9c     93 01 00 FF 
04ca0     BA 94 06 F6 | 	mov	arg02, ##@LR__5629
04ca4     53 93 02 F6 | 	mov	arg01, local01
04ca8     34 FD B1 FD | 	call	#__system___string_cmp
04cac     00 7A 0E F2 | 	cmp	result1, #0 wz
04cb0     04 01 90 AD |  if_e	jmp	#LR__0305
04cb4     93 01 00 FF 
04cb8     BC 94 06 F6 | 	mov	arg02, ##@LR__5630
04cbc     53 93 02 F6 | 	mov	arg01, local01
04cc0     1C FD B1 FD | 	call	#__system___string_cmp
04cc4     00 7A 0E F2 | 	cmp	result1, #0 wz
04cc8     F4 00 90 AD |  if_e	jmp	#LR__0306
04ccc     93 01 00 FF 
04cd0     BE 94 06 F6 | 	mov	arg02, ##@LR__5631
04cd4     53 93 02 F6 | 	mov	arg01, local01
04cd8     04 FD B1 FD | 	call	#__system___string_cmp
04cdc     00 7A 0E F2 | 	cmp	result1, #0 wz
04ce0     E4 00 90 AD |  if_e	jmp	#LR__0307
04ce4     93 01 00 FF 
04ce8     C0 94 06 F6 | 	mov	arg02, ##@LR__5632
04cec     53 93 02 F6 | 	mov	arg01, local01
04cf0     EC FC B1 FD | 	call	#__system___string_cmp
04cf4     00 7A 0E F2 | 	cmp	result1, #0 wz
04cf8     D4 00 90 AD |  if_e	jmp	#LR__0308
04cfc     93 01 00 FF 
04d00     C2 94 06 F6 | 	mov	arg02, ##@LR__5633
04d04     53 93 02 F6 | 	mov	arg01, local01
04d08     D4 FC B1 FD | 	call	#__system___string_cmp
04d0c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d10     C4 00 90 AD |  if_e	jmp	#LR__0309
04d14     93 01 00 FF 
04d18     C4 94 06 F6 | 	mov	arg02, ##@LR__5634
04d1c     53 93 02 F6 | 	mov	arg01, local01
04d20     BC FC B1 FD | 	call	#__system___string_cmp
04d24     00 7A 0E F2 | 	cmp	result1, #0 wz
04d28     B4 00 90 AD |  if_e	jmp	#LR__0310
04d2c     93 01 00 FF 
04d30     C6 94 06 F6 | 	mov	arg02, ##@LR__5635
04d34     53 93 02 F6 | 	mov	arg01, local01
04d38     A4 FC B1 FD | 	call	#__system___string_cmp
04d3c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d40     A4 00 90 AD |  if_e	jmp	#LR__0311
04d44     93 01 00 FF 
04d48     C8 94 06 F6 | 	mov	arg02, ##@LR__5636
04d4c     53 93 02 F6 | 	mov	arg01, local01
04d50     8C FC B1 FD | 	call	#__system___string_cmp
04d54     00 7A 0E F2 | 	cmp	result1, #0 wz
04d58     94 00 90 AD |  if_e	jmp	#LR__0312
04d5c     93 01 00 FF 
04d60     CA 94 06 F6 | 	mov	arg02, ##@LR__5637
04d64     53 93 02 F6 | 	mov	arg01, local01
04d68     74 FC B1 FD | 	call	#__system___string_cmp
04d6c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d70     84 00 90 AD |  if_e	jmp	#LR__0313
04d74     93 01 00 FF 
04d78     CC 94 06 F6 | 	mov	arg02, ##@LR__5638
04d7c     53 93 02 F6 | 	mov	arg01, local01
04d80     5C FC B1 FD | 	call	#__system___string_cmp
04d84     00 7A 0E F2 | 	cmp	result1, #0 wz
04d88     74 00 90 AD |  if_e	jmp	#LR__0314
04d8c     78 00 90 FD | 	jmp	#LR__0315
04d90                 | LR__0300
04d90     01 7A 06 F6 | 	mov	result1, #1
04d94     74 00 90 FD | 	jmp	#LR__0316
04d98                 | LR__0301
04d98     02 7A 06 F6 | 	mov	result1, #2
04d9c     6C 00 90 FD | 	jmp	#LR__0316
04da0                 | LR__0302
04da0     1B 7A 06 F6 | 	mov	result1, #27
04da4     64 00 90 FD | 	jmp	#LR__0316
04da8                 | LR__0303
04da8     11 7A 06 F6 | 	mov	result1, #17
04dac     5C 00 90 FD | 	jmp	#LR__0316
04db0                 | LR__0304
04db0     05 7A 06 F6 | 	mov	result1, #5
04db4     54 00 90 FD | 	jmp	#LR__0316
04db8                 | LR__0305
04db8     06 7A 06 F6 | 	mov	result1, #6
04dbc     4C 00 90 FD | 	jmp	#LR__0316
04dc0                 | LR__0306
04dc0     12 7A 06 F6 | 	mov	result1, #18
04dc4     44 00 90 FD | 	jmp	#LR__0316
04dc8                 | LR__0307
04dc8     13 7A 06 F6 | 	mov	result1, #19
04dcc     3C 00 90 FD | 	jmp	#LR__0316
04dd0                 | LR__0308
04dd0     0C 7A 06 F6 | 	mov	result1, #12
04dd4     34 00 90 FD | 	jmp	#LR__0316
04dd8                 | LR__0309
04dd8     14 7A 06 F6 | 	mov	result1, #20
04ddc     2C 00 90 FD | 	jmp	#LR__0316
04de0                 | LR__0310
04de0     15 7A 06 F6 | 	mov	result1, #21
04de4     24 00 90 FD | 	jmp	#LR__0316
04de8                 | LR__0311
04de8     16 7A 06 F6 | 	mov	result1, #22
04dec     1C 00 90 FD | 	jmp	#LR__0316
04df0                 | LR__0312
04df0     FF 7B 06 F6 | 	mov	result1, #511
04df4     14 00 90 FD | 	jmp	#LR__0316
04df8                 | LR__0313
04df8     0F 7A 06 F6 | 	mov	result1, #15
04dfc     0C 00 90 FD | 	jmp	#LR__0316
04e00                 | LR__0314
04e00     10 7A 06 F6 | 	mov	result1, #16
04e04     04 00 90 FD | 	jmp	#LR__0316
04e08                 | LR__0315
04e08     00 7A 06 F6 | 	mov	result1, #0
04e0c                 | LR__0316
04e0c     E7 F0 03 F6 | 	mov	ptra, fp
04e10     F2 00 A0 FD | 	call	#popregs_
04e14                 | _isseparator_ret
04e14     2D 00 64 FD | 	ret
04e18                 | 
04e18                 | ' 
04e18                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04e18                 | ' 
04e18                 | ' function iscommand(s as string) as ubyte
04e18                 | _iscommand
04e18     01 CA 05 F6 | 	mov	COUNT_, #1
04e1c     E8 00 A0 FD | 	call	#pushregs_
04e20                 | ' 
04e20                 | ' select case s
04e20     49 A7 02 F6 | 	mov	local01, arg01
04e24     93 01 00 FF 
04e28     D0 94 06 F6 | 	mov	arg02, ##@LR__5640
04e2c     53 93 02 F6 | 	mov	arg01, local01
04e30     AC FB B1 FD | 	call	#__system___string_cmp
04e34     00 7A 0E F2 | 	cmp	result1, #0 wz
04e38     24 0D 90 AD |  if_e	jmp	#LR__0320
04e3c     93 01 00 FF 
04e40     D5 94 06 F6 | 	mov	arg02, ##@LR__5641
04e44     53 93 02 F6 | 	mov	arg01, local01
04e48     94 FB B1 FD | 	call	#__system___string_cmp
04e4c     00 7A 0E F2 | 	cmp	result1, #0 wz
04e50     14 0D 90 AD |  if_e	jmp	#LR__0321
04e54     93 01 00 FF 
04e58     D8 94 06 F6 | 	mov	arg02, ##@LR__5642
04e5c     53 93 02 F6 | 	mov	arg01, local01
04e60     7C FB B1 FD | 	call	#__system___string_cmp
04e64     00 7A 0E F2 | 	cmp	result1, #0 wz
04e68     04 0D 90 AD |  if_e	jmp	#LR__0322
04e6c     93 01 00 FF 
04e70     DD 94 06 F6 | 	mov	arg02, ##@LR__5643
04e74     53 93 02 F6 | 	mov	arg01, local01
04e78     64 FB B1 FD | 	call	#__system___string_cmp
04e7c     00 7A 0E F2 | 	cmp	result1, #0 wz
04e80     F4 0C 90 AD |  if_e	jmp	#LR__0323
04e84     93 01 00 FF 
04e88     E1 94 06 F6 | 	mov	arg02, ##@LR__5644
04e8c     53 93 02 F6 | 	mov	arg01, local01
04e90     4C FB B1 FD | 	call	#__system___string_cmp
04e94     00 7A 0E F2 | 	cmp	result1, #0 wz
04e98     E4 0C 90 AD |  if_e	jmp	#LR__0324
04e9c     93 01 00 FF 
04ea0     E6 94 06 F6 | 	mov	arg02, ##@LR__5645
04ea4     53 93 02 F6 | 	mov	arg01, local01
04ea8     34 FB B1 FD | 	call	#__system___string_cmp
04eac     00 7A 0E F2 | 	cmp	result1, #0 wz
04eb0     D4 0C 90 AD |  if_e	jmp	#LR__0325
04eb4     93 01 00 FF 
04eb8     EA 94 06 F6 | 	mov	arg02, ##@LR__5646
04ebc     53 93 02 F6 | 	mov	arg01, local01
04ec0     1C FB B1 FD | 	call	#__system___string_cmp
04ec4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ec8     C4 0C 90 AD |  if_e	jmp	#LR__0326
04ecc     93 01 00 FF 
04ed0     ED 94 06 F6 | 	mov	arg02, ##@LR__5647
04ed4     53 93 02 F6 | 	mov	arg01, local01
04ed8     04 FB B1 FD | 	call	#__system___string_cmp
04edc     00 7A 0E F2 | 	cmp	result1, #0 wz
04ee0     B4 0C 90 AD |  if_e	jmp	#LR__0327
04ee4     93 01 00 FF 
04ee8     F8 94 06 F6 | 	mov	arg02, ##@LR__5648
04eec     53 93 02 F6 | 	mov	arg01, local01
04ef0     EC FA B1 FD | 	call	#__system___string_cmp
04ef4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ef8     A4 0C 90 AD |  if_e	jmp	#LR__0328
04efc     93 01 00 FF 
04f00     FC 94 06 F6 | 	mov	arg02, ##@LR__5649
04f04     53 93 02 F6 | 	mov	arg01, local01
04f08     D4 FA B1 FD | 	call	#__system___string_cmp
04f0c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f10     94 0C 90 AD |  if_e	jmp	#LR__0329
04f14     93 01 00 FF 
04f18     06 95 06 F6 | 	mov	arg02, ##@LR__5650
04f1c     53 93 02 F6 | 	mov	arg01, local01
04f20     BC FA B1 FD | 	call	#__system___string_cmp
04f24     00 7A 0E F2 | 	cmp	result1, #0 wz
04f28     84 0C 90 AD |  if_e	jmp	#LR__0330
04f2c     93 01 00 FF 
04f30     0A 95 06 F6 | 	mov	arg02, ##@LR__5651
04f34     53 93 02 F6 | 	mov	arg01, local01
04f38     A4 FA B1 FD | 	call	#__system___string_cmp
04f3c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f40     74 0C 90 AD |  if_e	jmp	#LR__0331
04f44     93 01 00 FF 
04f48     14 95 06 F6 | 	mov	arg02, ##@LR__5652
04f4c     53 93 02 F6 | 	mov	arg01, local01
04f50     8C FA B1 FD | 	call	#__system___string_cmp
04f54     00 7A 0E F2 | 	cmp	result1, #0 wz
04f58     64 0C 90 AD |  if_e	jmp	#LR__0332
04f5c     93 01 00 FF 
04f60     18 95 06 F6 | 	mov	arg02, ##@LR__5653
04f64     53 93 02 F6 | 	mov	arg01, local01
04f68     74 FA B1 FD | 	call	#__system___string_cmp
04f6c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f70     54 0C 90 AD |  if_e	jmp	#LR__0333
04f74     93 01 00 FF 
04f78     23 95 06 F6 | 	mov	arg02, ##@LR__5654
04f7c     53 93 02 F6 | 	mov	arg01, local01
04f80     5C FA B1 FD | 	call	#__system___string_cmp
04f84     00 7A 0E F2 | 	cmp	result1, #0 wz
04f88     44 0C 90 AD |  if_e	jmp	#LR__0334
04f8c     93 01 00 FF 
04f90     27 95 06 F6 | 	mov	arg02, ##@LR__5655
04f94     53 93 02 F6 | 	mov	arg01, local01
04f98     44 FA B1 FD | 	call	#__system___string_cmp
04f9c     00 7A 0E F2 | 	cmp	result1, #0 wz
04fa0     34 0C 90 AD |  if_e	jmp	#LR__0335
04fa4     93 01 00 FF 
04fa8     2E 95 06 F6 | 	mov	arg02, ##@LR__5656
04fac     53 93 02 F6 | 	mov	arg01, local01
04fb0     2C FA B1 FD | 	call	#__system___string_cmp
04fb4     00 7A 0E F2 | 	cmp	result1, #0 wz
04fb8     24 0C 90 AD |  if_e	jmp	#LR__0336
04fbc     93 01 00 FF 
04fc0     32 95 06 F6 | 	mov	arg02, ##@LR__5657
04fc4     53 93 02 F6 | 	mov	arg01, local01
04fc8     14 FA B1 FD | 	call	#__system___string_cmp
04fcc     00 7A 0E F2 | 	cmp	result1, #0 wz
04fd0     14 0C 90 AD |  if_e	jmp	#LR__0337
04fd4     93 01 00 FF 
04fd8     38 95 06 F6 | 	mov	arg02, ##@LR__5658
04fdc     53 93 02 F6 | 	mov	arg01, local01
04fe0     FC F9 B1 FD | 	call	#__system___string_cmp
04fe4     00 7A 0E F2 | 	cmp	result1, #0 wz
04fe8     04 0C 90 AD |  if_e	jmp	#LR__0338
04fec     93 01 00 FF 
04ff0     3E 95 06 F6 | 	mov	arg02, ##@LR__5659
04ff4     53 93 02 F6 | 	mov	arg01, local01
04ff8     E4 F9 B1 FD | 	call	#__system___string_cmp
04ffc     00 7A 0E F2 | 	cmp	result1, #0 wz
05000     F4 0B 90 AD |  if_e	jmp	#LR__0339
05004     93 01 00 FF 
05008     42 95 06 F6 | 	mov	arg02, ##@LR__5660
0500c     53 93 02 F6 | 	mov	arg01, local01
05010     CC F9 B1 FD | 	call	#__system___string_cmp
05014     00 7A 0E F2 | 	cmp	result1, #0 wz
05018     E4 0B 90 AD |  if_e	jmp	#LR__0340
0501c     93 01 00 FF 
05020     4A 95 06 F6 | 	mov	arg02, ##@LR__5661
05024     53 93 02 F6 | 	mov	arg01, local01
05028     B4 F9 B1 FD | 	call	#__system___string_cmp
0502c     00 7A 0E F2 | 	cmp	result1, #0 wz
05030     D4 0B 90 AD |  if_e	jmp	#LR__0341
05034     93 01 00 FF 
05038     50 95 06 F6 | 	mov	arg02, ##@LR__5662
0503c     53 93 02 F6 | 	mov	arg01, local01
05040     9C F9 B1 FD | 	call	#__system___string_cmp
05044     00 7A 0E F2 | 	cmp	result1, #0 wz
05048     C4 0B 90 AD |  if_e	jmp	#LR__0342
0504c     93 01 00 FF 
05050     53 95 06 F6 | 	mov	arg02, ##@LR__5663
05054     53 93 02 F6 | 	mov	arg01, local01
05058     84 F9 B1 FD | 	call	#__system___string_cmp
0505c     00 7A 0E F2 | 	cmp	result1, #0 wz
05060     B4 0B 90 AD |  if_e	jmp	#LR__0343
05064     93 01 00 FF 
05068     58 95 06 F6 | 	mov	arg02, ##@LR__5664
0506c     53 93 02 F6 | 	mov	arg01, local01
05070     6C F9 B1 FD | 	call	#__system___string_cmp
05074     00 7A 0E F2 | 	cmp	result1, #0 wz
05078     A4 0B 90 AD |  if_e	jmp	#LR__0344
0507c     93 01 00 FF 
05080     5F 95 06 F6 | 	mov	arg02, ##@LR__5665
05084     53 93 02 F6 | 	mov	arg01, local01
05088     54 F9 B1 FD | 	call	#__system___string_cmp
0508c     00 7A 0E F2 | 	cmp	result1, #0 wz
05090     94 0B 90 AD |  if_e	jmp	#LR__0345
05094     93 01 00 FF 
05098     64 95 06 F6 | 	mov	arg02, ##@LR__5666
0509c     53 93 02 F6 | 	mov	arg01, local01
050a0     3C F9 B1 FD | 	call	#__system___string_cmp
050a4     00 7A 0E F2 | 	cmp	result1, #0 wz
050a8     84 0B 90 AD |  if_e	jmp	#LR__0346
050ac     93 01 00 FF 
050b0     6C 95 06 F6 | 	mov	arg02, ##@LR__5667
050b4     53 93 02 F6 | 	mov	arg01, local01
050b8     24 F9 B1 FD | 	call	#__system___string_cmp
050bc     00 7A 0E F2 | 	cmp	result1, #0 wz
050c0     74 0B 90 AD |  if_e	jmp	#LR__0347
050c4     93 01 00 FF 
050c8     73 95 06 F6 | 	mov	arg02, ##@LR__5668
050cc     53 93 02 F6 | 	mov	arg01, local01
050d0     0C F9 B1 FD | 	call	#__system___string_cmp
050d4     00 7A 0E F2 | 	cmp	result1, #0 wz
050d8     64 0B 90 AD |  if_e	jmp	#LR__0348
050dc     93 01 00 FF 
050e0     7A 95 06 F6 | 	mov	arg02, ##@LR__5669
050e4     53 93 02 F6 | 	mov	arg01, local01
050e8     F4 F8 B1 FD | 	call	#__system___string_cmp
050ec     00 7A 0E F2 | 	cmp	result1, #0 wz
050f0     54 0B 90 AD |  if_e	jmp	#LR__0349
050f4     93 01 00 FF 
050f8     84 95 06 F6 | 	mov	arg02, ##@LR__5670
050fc     53 93 02 F6 | 	mov	arg01, local01
05100     DC F8 B1 FD | 	call	#__system___string_cmp
05104     00 7A 0E F2 | 	cmp	result1, #0 wz
05108     44 0B 90 AD |  if_e	jmp	#LR__0350
0510c     93 01 00 FF 
05110     88 95 06 F6 | 	mov	arg02, ##@LR__5671
05114     53 93 02 F6 | 	mov	arg01, local01
05118     C4 F8 B1 FD | 	call	#__system___string_cmp
0511c     00 7A 0E F2 | 	cmp	result1, #0 wz
05120     34 0B 90 AD |  if_e	jmp	#LR__0351
05124     93 01 00 FF 
05128     8C 95 06 F6 | 	mov	arg02, ##@LR__5672
0512c     53 93 02 F6 | 	mov	arg01, local01
05130     AC F8 B1 FD | 	call	#__system___string_cmp
05134     00 7A 0E F2 | 	cmp	result1, #0 wz
05138     24 0B 90 AD |  if_e	jmp	#LR__0352
0513c     93 01 00 FF 
05140     93 95 06 F6 | 	mov	arg02, ##@LR__5673
05144     53 93 02 F6 | 	mov	arg01, local01
05148     94 F8 B1 FD | 	call	#__system___string_cmp
0514c     00 7A 0E F2 | 	cmp	result1, #0 wz
05150     14 0B 90 AD |  if_e	jmp	#LR__0353
05154     93 01 00 FF 
05158     97 95 06 F6 | 	mov	arg02, ##@LR__5674
0515c     53 93 02 F6 | 	mov	arg01, local01
05160     7C F8 B1 FD | 	call	#__system___string_cmp
05164     00 7A 0E F2 | 	cmp	result1, #0 wz
05168     04 0B 90 AD |  if_e	jmp	#LR__0354
0516c     93 01 00 FF 
05170     9B 95 06 F6 | 	mov	arg02, ##@LR__5675
05174     53 93 02 F6 | 	mov	arg01, local01
05178     64 F8 B1 FD | 	call	#__system___string_cmp
0517c     00 7A 0E F2 | 	cmp	result1, #0 wz
05180     F4 0A 90 AD |  if_e	jmp	#LR__0355
05184     93 01 00 FF 
05188     A1 95 06 F6 | 	mov	arg02, ##@LR__5676
0518c     53 93 02 F6 | 	mov	arg01, local01
05190     4C F8 B1 FD | 	call	#__system___string_cmp
05194     00 7A 0E F2 | 	cmp	result1, #0 wz
05198     E4 0A 90 AD |  if_e	jmp	#LR__0356
0519c     93 01 00 FF 
051a0     A6 95 06 F6 | 	mov	arg02, ##@LR__5677
051a4     53 93 02 F6 | 	mov	arg01, local01
051a8     34 F8 B1 FD | 	call	#__system___string_cmp
051ac     00 7A 0E F2 | 	cmp	result1, #0 wz
051b0     D4 0A 90 AD |  if_e	jmp	#LR__0357
051b4     93 01 00 FF 
051b8     AD 95 06 F6 | 	mov	arg02, ##@LR__5678
051bc     53 93 02 F6 | 	mov	arg01, local01
051c0     1C F8 B1 FD | 	call	#__system___string_cmp
051c4     00 7A 0E F2 | 	cmp	result1, #0 wz
051c8     C4 0A 90 AD |  if_e	jmp	#LR__0358
051cc     93 01 00 FF 
051d0     B1 95 06 F6 | 	mov	arg02, ##@LR__5679
051d4     53 93 02 F6 | 	mov	arg01, local01
051d8     04 F8 B1 FD | 	call	#__system___string_cmp
051dc     00 7A 0E F2 | 	cmp	result1, #0 wz
051e0     B4 0A 90 AD |  if_e	jmp	#LR__0359
051e4     93 01 00 FF 
051e8     B6 95 06 F6 | 	mov	arg02, ##@LR__5680
051ec     53 93 02 F6 | 	mov	arg01, local01
051f0     EC F7 B1 FD | 	call	#__system___string_cmp
051f4     00 7A 0E F2 | 	cmp	result1, #0 wz
051f8     A4 0A 90 AD |  if_e	jmp	#LR__0360
051fc     93 01 00 FF 
05200     BA 95 06 F6 | 	mov	arg02, ##@LR__5681
05204     53 93 02 F6 | 	mov	arg01, local01
05208     D4 F7 B1 FD | 	call	#__system___string_cmp
0520c     00 7A 0E F2 | 	cmp	result1, #0 wz
05210     94 0A 90 AD |  if_e	jmp	#LR__0361
05214     93 01 00 FF 
05218     C0 95 06 F6 | 	mov	arg02, ##@LR__5682
0521c     53 93 02 F6 | 	mov	arg01, local01
05220     BC F7 B1 FD | 	call	#__system___string_cmp
05224     00 7A 0E F2 | 	cmp	result1, #0 wz
05228     84 0A 90 AD |  if_e	jmp	#LR__0362
0522c     93 01 00 FF 
05230     C3 95 06 F6 | 	mov	arg02, ##@LR__5683
05234     53 93 02 F6 | 	mov	arg01, local01
05238     A4 F7 B1 FD | 	call	#__system___string_cmp
0523c     00 7A 0E F2 | 	cmp	result1, #0 wz
05240     74 0A 90 AD |  if_e	jmp	#LR__0363
05244     93 01 00 FF 
05248     CB 95 06 F6 | 	mov	arg02, ##@LR__5684
0524c     53 93 02 F6 | 	mov	arg01, local01
05250     8C F7 B1 FD | 	call	#__system___string_cmp
05254     00 7A 0E F2 | 	cmp	result1, #0 wz
05258     64 0A 90 AD |  if_e	jmp	#LR__0364
0525c     93 01 00 FF 
05260     CF 95 06 F6 | 	mov	arg02, ##@LR__5685
05264     53 93 02 F6 | 	mov	arg01, local01
05268     74 F7 B1 FD | 	call	#__system___string_cmp
0526c     00 7A 0E F2 | 	cmp	result1, #0 wz
05270     54 0A 90 AD |  if_e	jmp	#LR__0365
05274     93 01 00 FF 
05278     D4 95 06 F6 | 	mov	arg02, ##@LR__5686
0527c     53 93 02 F6 | 	mov	arg01, local01
05280     5C F7 B1 FD | 	call	#__system___string_cmp
05284     00 7A 0E F2 | 	cmp	result1, #0 wz
05288     44 0A 90 AD |  if_e	jmp	#LR__0366
0528c     93 01 00 FF 
05290     D8 95 06 F6 | 	mov	arg02, ##@LR__5687
05294     53 93 02 F6 | 	mov	arg01, local01
05298     44 F7 B1 FD | 	call	#__system___string_cmp
0529c     00 7A 0E F2 | 	cmp	result1, #0 wz
052a0     34 0A 90 AD |  if_e	jmp	#LR__0367
052a4     93 01 00 FF 
052a8     DD 95 06 F6 | 	mov	arg02, ##@LR__5688
052ac     53 93 02 F6 | 	mov	arg01, local01
052b0     2C F7 B1 FD | 	call	#__system___string_cmp
052b4     00 7A 0E F2 | 	cmp	result1, #0 wz
052b8     24 0A 90 AD |  if_e	jmp	#LR__0368
052bc     93 01 00 FF 
052c0     E1 95 06 F6 | 	mov	arg02, ##@LR__5689
052c4     53 93 02 F6 | 	mov	arg01, local01
052c8     14 F7 B1 FD | 	call	#__system___string_cmp
052cc     00 7A 0E F2 | 	cmp	result1, #0 wz
052d0     14 0A 90 AD |  if_e	jmp	#LR__0369
052d4     93 01 00 FF 
052d8     E4 95 06 F6 | 	mov	arg02, ##@LR__5690
052dc     53 93 02 F6 | 	mov	arg01, local01
052e0     FC F6 B1 FD | 	call	#__system___string_cmp
052e4     00 7A 0E F2 | 	cmp	result1, #0 wz
052e8     04 0A 90 AD |  if_e	jmp	#LR__0370
052ec     93 01 00 FF 
052f0     EA 95 06 F6 | 	mov	arg02, ##@LR__5691
052f4     53 93 02 F6 | 	mov	arg01, local01
052f8     E4 F6 B1 FD | 	call	#__system___string_cmp
052fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05300     F4 09 90 AD |  if_e	jmp	#LR__0371
05304     93 01 00 FF 
05308     EE 95 06 F6 | 	mov	arg02, ##@LR__5692
0530c     53 93 02 F6 | 	mov	arg01, local01
05310     CC F6 B1 FD | 	call	#__system___string_cmp
05314     00 7A 0E F2 | 	cmp	result1, #0 wz
05318     E4 09 90 AD |  if_e	jmp	#LR__0372
0531c     93 01 00 FF 
05320     F2 95 06 F6 | 	mov	arg02, ##@LR__5693
05324     53 93 02 F6 | 	mov	arg01, local01
05328     B4 F6 B1 FD | 	call	#__system___string_cmp
0532c     00 7A 0E F2 | 	cmp	result1, #0 wz
05330     D4 09 90 AD |  if_e	jmp	#LR__0373
05334     93 01 00 FF 
05338     F8 95 06 F6 | 	mov	arg02, ##@LR__5694
0533c     53 93 02 F6 | 	mov	arg01, local01
05340     9C F6 B1 FD | 	call	#__system___string_cmp
05344     00 7A 0E F2 | 	cmp	result1, #0 wz
05348     C4 09 90 AD |  if_e	jmp	#LR__0374
0534c     93 01 00 FF 
05350     FD 95 06 F6 | 	mov	arg02, ##@LR__5695
05354     53 93 02 F6 | 	mov	arg01, local01
05358     84 F6 B1 FD | 	call	#__system___string_cmp
0535c     00 7A 0E F2 | 	cmp	result1, #0 wz
05360     B4 09 90 AD |  if_e	jmp	#LR__0375
05364     94 01 00 FF 
05368     00 94 06 F6 | 	mov	arg02, ##@LR__5696
0536c     53 93 02 F6 | 	mov	arg01, local01
05370     6C F6 B1 FD | 	call	#__system___string_cmp
05374     00 7A 0E F2 | 	cmp	result1, #0 wz
05378     A4 09 90 AD |  if_e	jmp	#LR__0376
0537c     94 01 00 FF 
05380     03 94 06 F6 | 	mov	arg02, ##@LR__5697
05384     53 93 02 F6 | 	mov	arg01, local01
05388     54 F6 B1 FD | 	call	#__system___string_cmp
0538c     00 7A 0E F2 | 	cmp	result1, #0 wz
05390     94 09 90 AD |  if_e	jmp	#LR__0377
05394     94 01 00 FF 
05398     07 94 06 F6 | 	mov	arg02, ##@LR__5698
0539c     53 93 02 F6 | 	mov	arg01, local01
053a0     3C F6 B1 FD | 	call	#__system___string_cmp
053a4     00 7A 0E F2 | 	cmp	result1, #0 wz
053a8     84 09 90 AD |  if_e	jmp	#LR__0378
053ac     94 01 00 FF 
053b0     0A 94 06 F6 | 	mov	arg02, ##@LR__5699
053b4     53 93 02 F6 | 	mov	arg01, local01
053b8     24 F6 B1 FD | 	call	#__system___string_cmp
053bc     00 7A 0E F2 | 	cmp	result1, #0 wz
053c0     74 09 90 AD |  if_e	jmp	#LR__0379
053c4     94 01 00 FF 
053c8     10 94 06 F6 | 	mov	arg02, ##@LR__5700
053cc     53 93 02 F6 | 	mov	arg01, local01
053d0     0C F6 B1 FD | 	call	#__system___string_cmp
053d4     00 7A 0E F2 | 	cmp	result1, #0 wz
053d8     64 09 90 AD |  if_e	jmp	#LR__0380
053dc     94 01 00 FF 
053e0     15 94 06 F6 | 	mov	arg02, ##@LR__5701
053e4     53 93 02 F6 | 	mov	arg01, local01
053e8     F4 F5 B1 FD | 	call	#__system___string_cmp
053ec     00 7A 0E F2 | 	cmp	result1, #0 wz
053f0     54 09 90 AD |  if_e	jmp	#LR__0381
053f4     94 01 00 FF 
053f8     18 94 06 F6 | 	mov	arg02, ##@LR__5702
053fc     53 93 02 F6 | 	mov	arg01, local01
05400     DC F5 B1 FD | 	call	#__system___string_cmp
05404     00 7A 0E F2 | 	cmp	result1, #0 wz
05408     44 09 90 AD |  if_e	jmp	#LR__0382
0540c     94 01 00 FF 
05410     1D 94 06 F6 | 	mov	arg02, ##@LR__5703
05414     53 93 02 F6 | 	mov	arg01, local01
05418     C4 F5 B1 FD | 	call	#__system___string_cmp
0541c     00 7A 0E F2 | 	cmp	result1, #0 wz
05420     34 09 90 AD |  if_e	jmp	#LR__0383
05424     94 01 00 FF 
05428     21 94 06 F6 | 	mov	arg02, ##@LR__5704
0542c     53 93 02 F6 | 	mov	arg01, local01
05430     AC F5 B1 FD | 	call	#__system___string_cmp
05434     00 7A 0E F2 | 	cmp	result1, #0 wz
05438     24 09 90 AD |  if_e	jmp	#LR__0384
0543c     94 01 00 FF 
05440     27 94 06 F6 | 	mov	arg02, ##@LR__5705
05444     53 93 02 F6 | 	mov	arg01, local01
05448     94 F5 B1 FD | 	call	#__system___string_cmp
0544c     00 7A 0E F2 | 	cmp	result1, #0 wz
05450     14 09 90 AD |  if_e	jmp	#LR__0385
05454     94 01 00 FF 
05458     2D 94 06 F6 | 	mov	arg02, ##@LR__5706
0545c     53 93 02 F6 | 	mov	arg01, local01
05460     7C F5 B1 FD | 	call	#__system___string_cmp
05464     00 7A 0E F2 | 	cmp	result1, #0 wz
05468     04 09 90 AD |  if_e	jmp	#LR__0386
0546c     94 01 00 FF 
05470     32 94 06 F6 | 	mov	arg02, ##@LR__5707
05474     53 93 02 F6 | 	mov	arg01, local01
05478     64 F5 B1 FD | 	call	#__system___string_cmp
0547c     00 7A 0E F2 | 	cmp	result1, #0 wz
05480     F4 08 90 AD |  if_e	jmp	#LR__0387
05484     94 01 00 FF 
05488     35 94 06 F6 | 	mov	arg02, ##@LR__5708
0548c     53 93 02 F6 | 	mov	arg01, local01
05490     4C F5 B1 FD | 	call	#__system___string_cmp
05494     00 7A 0E F2 | 	cmp	result1, #0 wz
05498     E4 08 90 AD |  if_e	jmp	#LR__0388
0549c     94 01 00 FF 
054a0     3B 94 06 F6 | 	mov	arg02, ##@LR__5709
054a4     53 93 02 F6 | 	mov	arg01, local01
054a8     34 F5 B1 FD | 	call	#__system___string_cmp
054ac     00 7A 0E F2 | 	cmp	result1, #0 wz
054b0     D4 08 90 AD |  if_e	jmp	#LR__0389
054b4     94 01 00 FF 
054b8     3F 94 06 F6 | 	mov	arg02, ##@LR__5710
054bc     53 93 02 F6 | 	mov	arg01, local01
054c0     1C F5 B1 FD | 	call	#__system___string_cmp
054c4     00 7A 0E F2 | 	cmp	result1, #0 wz
054c8     C4 08 90 AD |  if_e	jmp	#LR__0390
054cc     94 01 00 FF 
054d0     44 94 06 F6 | 	mov	arg02, ##@LR__5711
054d4     53 93 02 F6 | 	mov	arg01, local01
054d8     04 F5 B1 FD | 	call	#__system___string_cmp
054dc     00 7A 0E F2 | 	cmp	result1, #0 wz
054e0     B4 08 90 AD |  if_e	jmp	#LR__0391
054e4     94 01 00 FF 
054e8     47 94 06 F6 | 	mov	arg02, ##@LR__5712
054ec     53 93 02 F6 | 	mov	arg01, local01
054f0     EC F4 B1 FD | 	call	#__system___string_cmp
054f4     00 7A 0E F2 | 	cmp	result1, #0 wz
054f8     A4 08 90 AD |  if_e	jmp	#LR__0392
054fc     94 01 00 FF 
05500     4A 94 06 F6 | 	mov	arg02, ##@LR__5713
05504     53 93 02 F6 | 	mov	arg01, local01
05508     D4 F4 B1 FD | 	call	#__system___string_cmp
0550c     00 7A 0E F2 | 	cmp	result1, #0 wz
05510     94 08 90 AD |  if_e	jmp	#LR__0393
05514     94 01 00 FF 
05518     4F 94 06 F6 | 	mov	arg02, ##@LR__5714
0551c     53 93 02 F6 | 	mov	arg01, local01
05520     BC F4 B1 FD | 	call	#__system___string_cmp
05524     00 7A 0E F2 | 	cmp	result1, #0 wz
05528     84 08 90 AD |  if_e	jmp	#LR__0394
0552c     94 01 00 FF 
05530     55 94 06 F6 | 	mov	arg02, ##@LR__5715
05534     53 93 02 F6 | 	mov	arg01, local01
05538     A4 F4 B1 FD | 	call	#__system___string_cmp
0553c     00 7A 0E F2 | 	cmp	result1, #0 wz
05540     74 08 90 AD |  if_e	jmp	#LR__0395
05544     94 01 00 FF 
05548     59 94 06 F6 | 	mov	arg02, ##@LR__5716
0554c     53 93 02 F6 | 	mov	arg01, local01
05550     8C F4 B1 FD | 	call	#__system___string_cmp
05554     00 7A 0E F2 | 	cmp	result1, #0 wz
05558     64 08 90 AD |  if_e	jmp	#LR__0396
0555c     94 01 00 FF 
05560     62 94 06 F6 | 	mov	arg02, ##@LR__5717
05564     53 93 02 F6 | 	mov	arg01, local01
05568     74 F4 B1 FD | 	call	#__system___string_cmp
0556c     00 7A 0E F2 | 	cmp	result1, #0 wz
05570     54 08 90 AD |  if_e	jmp	#LR__0397
05574     94 01 00 FF 
05578     68 94 06 F6 | 	mov	arg02, ##@LR__5718
0557c     53 93 02 F6 | 	mov	arg01, local01
05580     5C F4 B1 FD | 	call	#__system___string_cmp
05584     00 7A 0E F2 | 	cmp	result1, #0 wz
05588     44 08 90 AD |  if_e	jmp	#LR__0398
0558c     94 01 00 FF 
05590     6E 94 06 F6 | 	mov	arg02, ##@LR__5719
05594     53 93 02 F6 | 	mov	arg01, local01
05598     44 F4 B1 FD | 	call	#__system___string_cmp
0559c     00 7A 0E F2 | 	cmp	result1, #0 wz
055a0     34 08 90 AD |  if_e	jmp	#LR__0399
055a4     94 01 00 FF 
055a8     77 94 06 F6 | 	mov	arg02, ##@LR__5720
055ac     53 93 02 F6 | 	mov	arg01, local01
055b0     2C F4 B1 FD | 	call	#__system___string_cmp
055b4     00 7A 0E F2 | 	cmp	result1, #0 wz
055b8     24 08 90 AD |  if_e	jmp	#LR__0400
055bc     94 01 00 FF 
055c0     81 94 06 F6 | 	mov	arg02, ##@LR__5721
055c4     53 93 02 F6 | 	mov	arg01, local01
055c8     14 F4 B1 FD | 	call	#__system___string_cmp
055cc     00 7A 0E F2 | 	cmp	result1, #0 wz
055d0     14 08 90 AD |  if_e	jmp	#LR__0401
055d4     94 01 00 FF 
055d8     8A 94 06 F6 | 	mov	arg02, ##@LR__5722
055dc     53 93 02 F6 | 	mov	arg01, local01
055e0     FC F3 B1 FD | 	call	#__system___string_cmp
055e4     00 7A 0E F2 | 	cmp	result1, #0 wz
055e8     04 08 90 AD |  if_e	jmp	#LR__0402
055ec     94 01 00 FF 
055f0     8F 94 06 F6 | 	mov	arg02, ##@LR__5723
055f4     53 93 02 F6 | 	mov	arg01, local01
055f8     E4 F3 B1 FD | 	call	#__system___string_cmp
055fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05600     F4 07 90 AD |  if_e	jmp	#LR__0403
05604     94 01 00 FF 
05608     92 94 06 F6 | 	mov	arg02, ##@LR__5724
0560c     53 93 02 F6 | 	mov	arg01, local01
05610     CC F3 B1 FD | 	call	#__system___string_cmp
05614     00 7A 0E F2 | 	cmp	result1, #0 wz
05618     E4 07 90 AD |  if_e	jmp	#LR__0404
0561c     94 01 00 FF 
05620     97 94 06 F6 | 	mov	arg02, ##@LR__5725
05624     53 93 02 F6 | 	mov	arg01, local01
05628     B4 F3 B1 FD | 	call	#__system___string_cmp
0562c     00 7A 0E F2 | 	cmp	result1, #0 wz
05630     D4 07 90 AD |  if_e	jmp	#LR__0405
05634     94 01 00 FF 
05638     9B 94 06 F6 | 	mov	arg02, ##@LR__5726
0563c     53 93 02 F6 | 	mov	arg01, local01
05640     9C F3 B1 FD | 	call	#__system___string_cmp
05644     00 7A 0E F2 | 	cmp	result1, #0 wz
05648     C4 07 90 AD |  if_e	jmp	#LR__0406
0564c     94 01 00 FF 
05650     A0 94 06 F6 | 	mov	arg02, ##@LR__5727
05654     53 93 02 F6 | 	mov	arg01, local01
05658     84 F3 B1 FD | 	call	#__system___string_cmp
0565c     00 7A 0E F2 | 	cmp	result1, #0 wz
05660     B4 07 90 AD |  if_e	jmp	#LR__0407
05664     94 01 00 FF 
05668     A4 94 06 F6 | 	mov	arg02, ##@LR__5728
0566c     53 93 02 F6 | 	mov	arg01, local01
05670     6C F3 B1 FD | 	call	#__system___string_cmp
05674     00 7A 0E F2 | 	cmp	result1, #0 wz
05678     A4 07 90 AD |  if_e	jmp	#LR__0408
0567c     94 01 00 FF 
05680     AD 94 06 F6 | 	mov	arg02, ##@LR__5729
05684     53 93 02 F6 | 	mov	arg01, local01
05688     54 F3 B1 FD | 	call	#__system___string_cmp
0568c     00 7A 0E F2 | 	cmp	result1, #0 wz
05690     94 07 90 AD |  if_e	jmp	#LR__0409
05694     94 01 00 FF 
05698     B2 94 06 F6 | 	mov	arg02, ##@LR__5730
0569c     53 93 02 F6 | 	mov	arg01, local01
056a0     3C F3 B1 FD | 	call	#__system___string_cmp
056a4     00 7A 0E F2 | 	cmp	result1, #0 wz
056a8     84 07 90 AD |  if_e	jmp	#LR__0410
056ac     94 01 00 FF 
056b0     B8 94 06 F6 | 	mov	arg02, ##@LR__5731
056b4     53 93 02 F6 | 	mov	arg01, local01
056b8     24 F3 B1 FD | 	call	#__system___string_cmp
056bc     00 7A 0E F2 | 	cmp	result1, #0 wz
056c0     74 07 90 AD |  if_e	jmp	#LR__0411
056c4     94 01 00 FF 
056c8     BA 94 06 F6 | 	mov	arg02, ##@LR__5732
056cc     53 93 02 F6 | 	mov	arg01, local01
056d0     0C F3 B1 FD | 	call	#__system___string_cmp
056d4     00 7A 0E F2 | 	cmp	result1, #0 wz
056d8     64 07 90 AD |  if_e	jmp	#LR__0412
056dc     94 01 00 FF 
056e0     BE 94 06 F6 | 	mov	arg02, ##@LR__5733
056e4     53 93 02 F6 | 	mov	arg01, local01
056e8     F4 F2 B1 FD | 	call	#__system___string_cmp
056ec     00 7A 0E F2 | 	cmp	result1, #0 wz
056f0     54 07 90 AD |  if_e	jmp	#LR__0413
056f4     94 01 00 FF 
056f8     C2 94 06 F6 | 	mov	arg02, ##@LR__5734
056fc     53 93 02 F6 | 	mov	arg01, local01
05700     DC F2 B1 FD | 	call	#__system___string_cmp
05704     00 7A 0E F2 | 	cmp	result1, #0 wz
05708     44 07 90 AD |  if_e	jmp	#LR__0414
0570c     94 01 00 FF 
05710     C7 94 06 F6 | 	mov	arg02, ##@LR__5735
05714     53 93 02 F6 | 	mov	arg01, local01
05718     C4 F2 B1 FD | 	call	#__system___string_cmp
0571c     00 7A 0E F2 | 	cmp	result1, #0 wz
05720     34 07 90 AD |  if_e	jmp	#LR__0415
05724     94 01 00 FF 
05728     CF 94 06 F6 | 	mov	arg02, ##@LR__5736
0572c     53 93 02 F6 | 	mov	arg01, local01
05730     AC F2 B1 FD | 	call	#__system___string_cmp
05734     00 7A 0E F2 | 	cmp	result1, #0 wz
05738     24 07 90 AD |  if_e	jmp	#LR__0416
0573c     94 01 00 FF 
05740     D3 94 06 F6 | 	mov	arg02, ##@LR__5737
05744     53 93 02 F6 | 	mov	arg01, local01
05748     94 F2 B1 FD | 	call	#__system___string_cmp
0574c     00 7A 0E F2 | 	cmp	result1, #0 wz
05750     14 07 90 AD |  if_e	jmp	#LR__0417
05754     94 01 00 FF 
05758     D5 94 06 F6 | 	mov	arg02, ##@LR__5738
0575c     53 93 02 F6 | 	mov	arg01, local01
05760     7C F2 B1 FD | 	call	#__system___string_cmp
05764     00 7A 0E F2 | 	cmp	result1, #0 wz
05768     04 07 90 AD |  if_e	jmp	#LR__0418
0576c     94 01 00 FF 
05770     DD 94 06 F6 | 	mov	arg02, ##@LR__5739
05774     53 93 02 F6 | 	mov	arg01, local01
05778     64 F2 B1 FD | 	call	#__system___string_cmp
0577c     00 7A 0E F2 | 	cmp	result1, #0 wz
05780     F4 06 90 AD |  if_e	jmp	#LR__0419
05784     94 01 00 FF 
05788     EC 94 06 F6 | 	mov	arg02, ##@LR__5740
0578c     53 93 02 F6 | 	mov	arg01, local01
05790     4C F2 B1 FD | 	call	#__system___string_cmp
05794     00 7A 0E F2 | 	cmp	result1, #0 wz
05798     E4 06 90 AD |  if_e	jmp	#LR__0420
0579c     94 01 00 FF 
057a0     F0 94 06 F6 | 	mov	arg02, ##@LR__5741
057a4     53 93 02 F6 | 	mov	arg01, local01
057a8     34 F2 B1 FD | 	call	#__system___string_cmp
057ac     00 7A 0E F2 | 	cmp	result1, #0 wz
057b0     D4 06 90 AD |  if_e	jmp	#LR__0421
057b4     94 01 00 FF 
057b8     F7 94 06 F6 | 	mov	arg02, ##@LR__5742
057bc     53 93 02 F6 | 	mov	arg01, local01
057c0     1C F2 B1 FD | 	call	#__system___string_cmp
057c4     00 7A 0E F2 | 	cmp	result1, #0 wz
057c8     C4 06 90 AD |  if_e	jmp	#LR__0422
057cc     94 01 00 FF 
057d0     FB 94 06 F6 | 	mov	arg02, ##@LR__5743
057d4     53 93 02 F6 | 	mov	arg01, local01
057d8     04 F2 B1 FD | 	call	#__system___string_cmp
057dc     00 7A 0E F2 | 	cmp	result1, #0 wz
057e0     B4 06 90 AD |  if_e	jmp	#LR__0423
057e4     94 01 00 FF 
057e8     FE 94 06 F6 | 	mov	arg02, ##@LR__5744
057ec     53 93 02 F6 | 	mov	arg01, local01
057f0     EC F1 B1 FD | 	call	#__system___string_cmp
057f4     00 7A 0E F2 | 	cmp	result1, #0 wz
057f8     A4 06 90 AD |  if_e	jmp	#LR__0424
057fc     94 01 00 FF 
05800     03 95 06 F6 | 	mov	arg02, ##@LR__5745
05804     53 93 02 F6 | 	mov	arg01, local01
05808     D4 F1 B1 FD | 	call	#__system___string_cmp
0580c     00 7A 0E F2 | 	cmp	result1, #0 wz
05810     94 06 90 AD |  if_e	jmp	#LR__0425
05814     94 01 00 FF 
05818     06 95 06 F6 | 	mov	arg02, ##@LR__5746
0581c     53 93 02 F6 | 	mov	arg01, local01
05820     BC F1 B1 FD | 	call	#__system___string_cmp
05824     00 7A 0E F2 | 	cmp	result1, #0 wz
05828     84 06 90 AD |  if_e	jmp	#LR__0426
0582c     94 01 00 FF 
05830     0F 95 06 F6 | 	mov	arg02, ##@LR__5747
05834     53 93 02 F6 | 	mov	arg01, local01
05838     A4 F1 B1 FD | 	call	#__system___string_cmp
0583c     00 7A 0E F2 | 	cmp	result1, #0 wz
05840     74 06 90 AD |  if_e	jmp	#LR__0427
05844     94 01 00 FF 
05848     13 95 06 F6 | 	mov	arg02, ##@LR__5748
0584c     53 93 02 F6 | 	mov	arg01, local01
05850     8C F1 B1 FD | 	call	#__system___string_cmp
05854     00 7A 0E F2 | 	cmp	result1, #0 wz
05858     64 06 90 AD |  if_e	jmp	#LR__0428
0585c     94 01 00 FF 
05860     1C 95 06 F6 | 	mov	arg02, ##@LR__5749
05864     53 93 02 F6 | 	mov	arg01, local01
05868     74 F1 B1 FD | 	call	#__system___string_cmp
0586c     00 7A 0E F2 | 	cmp	result1, #0 wz
05870     54 06 90 AD |  if_e	jmp	#LR__0429
05874     94 01 00 FF 
05878     20 95 06 F6 | 	mov	arg02, ##@LR__5750
0587c     53 93 02 F6 | 	mov	arg01, local01
05880     5C F1 B1 FD | 	call	#__system___string_cmp
05884     00 7A 0E F2 | 	cmp	result1, #0 wz
05888     44 06 90 AD |  if_e	jmp	#LR__0430
0588c     94 01 00 FF 
05890     29 95 06 F6 | 	mov	arg02, ##@LR__5751
05894     53 93 02 F6 | 	mov	arg01, local01
05898     44 F1 B1 FD | 	call	#__system___string_cmp
0589c     00 7A 0E F2 | 	cmp	result1, #0 wz
058a0     34 06 90 AD |  if_e	jmp	#LR__0431
058a4     94 01 00 FF 
058a8     2D 95 06 F6 | 	mov	arg02, ##@LR__5752
058ac     53 93 02 F6 | 	mov	arg01, local01
058b0     2C F1 B1 FD | 	call	#__system___string_cmp
058b4     00 7A 0E F2 | 	cmp	result1, #0 wz
058b8     24 06 90 AD |  if_e	jmp	#LR__0432
058bc     94 01 00 FF 
058c0     34 95 06 F6 | 	mov	arg02, ##@LR__5753
058c4     53 93 02 F6 | 	mov	arg01, local01
058c8     14 F1 B1 FD | 	call	#__system___string_cmp
058cc     00 7A 0E F2 | 	cmp	result1, #0 wz
058d0     14 06 90 AD |  if_e	jmp	#LR__0433
058d4     94 01 00 FF 
058d8     38 95 06 F6 | 	mov	arg02, ##@LR__5754
058dc     53 93 02 F6 | 	mov	arg01, local01
058e0     FC F0 B1 FD | 	call	#__system___string_cmp
058e4     00 7A 0E F2 | 	cmp	result1, #0 wz
058e8     04 06 90 AD |  if_e	jmp	#LR__0434
058ec     94 01 00 FF 
058f0     3F 95 06 F6 | 	mov	arg02, ##@LR__5755
058f4     53 93 02 F6 | 	mov	arg01, local01
058f8     E4 F0 B1 FD | 	call	#__system___string_cmp
058fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05900     F4 05 90 AD |  if_e	jmp	#LR__0435
05904     94 01 00 FF 
05908     43 95 06 F6 | 	mov	arg02, ##@LR__5756
0590c     53 93 02 F6 | 	mov	arg01, local01
05910     CC F0 B1 FD | 	call	#__system___string_cmp
05914     00 7A 0E F2 | 	cmp	result1, #0 wz
05918     E4 05 90 AD |  if_e	jmp	#LR__0436
0591c     94 01 00 FF 
05920     4A 95 06 F6 | 	mov	arg02, ##@LR__5757
05924     53 93 02 F6 | 	mov	arg01, local01
05928     B4 F0 B1 FD | 	call	#__system___string_cmp
0592c     00 7A 0E F2 | 	cmp	result1, #0 wz
05930     D4 05 90 AD |  if_e	jmp	#LR__0437
05934     94 01 00 FF 
05938     4E 95 06 F6 | 	mov	arg02, ##@LR__5758
0593c     53 93 02 F6 | 	mov	arg01, local01
05940     9C F0 B1 FD | 	call	#__system___string_cmp
05944     00 7A 0E F2 | 	cmp	result1, #0 wz
05948     C4 05 90 AD |  if_e	jmp	#LR__0438
0594c     94 01 00 FF 
05950     59 95 06 F6 | 	mov	arg02, ##@LR__5759
05954     53 93 02 F6 | 	mov	arg01, local01
05958     84 F0 B1 FD | 	call	#__system___string_cmp
0595c     00 7A 0E F2 | 	cmp	result1, #0 wz
05960     B4 05 90 AD |  if_e	jmp	#LR__0439
05964     94 01 00 FF 
05968     5D 95 06 F6 | 	mov	arg02, ##@LR__5760
0596c     53 93 02 F6 | 	mov	arg01, local01
05970     6C F0 B1 FD | 	call	#__system___string_cmp
05974     00 7A 0E F2 | 	cmp	result1, #0 wz
05978     A4 05 90 AD |  if_e	jmp	#LR__0440
0597c     94 01 00 FF 
05980     64 95 06 F6 | 	mov	arg02, ##@LR__5761
05984     53 93 02 F6 | 	mov	arg01, local01
05988     54 F0 B1 FD | 	call	#__system___string_cmp
0598c     00 7A 0E F2 | 	cmp	result1, #0 wz
05990     94 05 90 AD |  if_e	jmp	#LR__0441
05994     94 01 00 FF 
05998     68 95 06 F6 | 	mov	arg02, ##@LR__5762
0599c     53 93 02 F6 | 	mov	arg01, local01
059a0     3C F0 B1 FD | 	call	#__system___string_cmp
059a4     00 7A 0E F2 | 	cmp	result1, #0 wz
059a8     84 05 90 AD |  if_e	jmp	#LR__0442
059ac     94 01 00 FF 
059b0     70 95 06 F6 | 	mov	arg02, ##@LR__5763
059b4     53 93 02 F6 | 	mov	arg01, local01
059b8     24 F0 B1 FD | 	call	#__system___string_cmp
059bc     00 7A 0E F2 | 	cmp	result1, #0 wz
059c0     74 05 90 AD |  if_e	jmp	#LR__0443
059c4     94 01 00 FF 
059c8     74 95 06 F6 | 	mov	arg02, ##@LR__5764
059cc     53 93 02 F6 | 	mov	arg01, local01
059d0     0C F0 B1 FD | 	call	#__system___string_cmp
059d4     00 7A 0E F2 | 	cmp	result1, #0 wz
059d8     64 05 90 AD |  if_e	jmp	#LR__0444
059dc     94 01 00 FF 
059e0     7B 95 06 F6 | 	mov	arg02, ##@LR__5765
059e4     53 93 02 F6 | 	mov	arg01, local01
059e8     F4 EF B1 FD | 	call	#__system___string_cmp
059ec     00 7A 0E F2 | 	cmp	result1, #0 wz
059f0     54 05 90 AD |  if_e	jmp	#LR__0445
059f4     94 01 00 FF 
059f8     82 95 06 F6 | 	mov	arg02, ##@LR__5766
059fc     53 93 02 F6 | 	mov	arg01, local01
05a00     DC EF B1 FD | 	call	#__system___string_cmp
05a04     00 7A 0E F2 | 	cmp	result1, #0 wz
05a08     44 05 90 AD |  if_e	jmp	#LR__0446
05a0c     94 01 00 FF 
05a10     86 95 06 F6 | 	mov	arg02, ##@LR__5767
05a14     53 93 02 F6 | 	mov	arg01, local01
05a18     C4 EF B1 FD | 	call	#__system___string_cmp
05a1c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a20     34 05 90 AD |  if_e	jmp	#LR__0447
05a24     94 01 00 FF 
05a28     8C 95 06 F6 | 	mov	arg02, ##@LR__5768
05a2c     53 93 02 F6 | 	mov	arg01, local01
05a30     AC EF B1 FD | 	call	#__system___string_cmp
05a34     00 7A 0E F2 | 	cmp	result1, #0 wz
05a38     24 05 90 AD |  if_e	jmp	#LR__0448
05a3c     94 01 00 FF 
05a40     90 95 06 F6 | 	mov	arg02, ##@LR__5769
05a44     53 93 02 F6 | 	mov	arg01, local01
05a48     94 EF B1 FD | 	call	#__system___string_cmp
05a4c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a50     14 05 90 AD |  if_e	jmp	#LR__0449
05a54     94 01 00 FF 
05a58     97 95 06 F6 | 	mov	arg02, ##@LR__5770
05a5c     53 93 02 F6 | 	mov	arg01, local01
05a60     7C EF B1 FD | 	call	#__system___string_cmp
05a64     00 7A 0E F2 | 	cmp	result1, #0 wz
05a68     04 05 90 AD |  if_e	jmp	#LR__0450
05a6c     94 01 00 FF 
05a70     9C 95 06 F6 | 	mov	arg02, ##@LR__5771
05a74     53 93 02 F6 | 	mov	arg01, local01
05a78     64 EF B1 FD | 	call	#__system___string_cmp
05a7c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a80     F4 04 90 AD |  if_e	jmp	#LR__0451
05a84     94 01 00 FF 
05a88     A1 95 06 F6 | 	mov	arg02, ##@LR__5772
05a8c     53 93 02 F6 | 	mov	arg01, local01
05a90     4C EF B1 FD | 	call	#__system___string_cmp
05a94     00 7A 0E F2 | 	cmp	result1, #0 wz
05a98     E4 04 90 AD |  if_e	jmp	#LR__0452
05a9c     94 01 00 FF 
05aa0     A8 95 06 F6 | 	mov	arg02, ##@LR__5773
05aa4     53 93 02 F6 | 	mov	arg01, local01
05aa8     34 EF B1 FD | 	call	#__system___string_cmp
05aac     00 7A 0E F2 | 	cmp	result1, #0 wz
05ab0     D4 04 90 AD |  if_e	jmp	#LR__0453
05ab4     94 01 00 FF 
05ab8     AB 95 06 F6 | 	mov	arg02, ##@LR__5774
05abc     53 93 02 F6 | 	mov	arg01, local01
05ac0     1C EF B1 FD | 	call	#__system___string_cmp
05ac4     00 7A 0E F2 | 	cmp	result1, #0 wz
05ac8     C4 04 90 AD |  if_e	jmp	#LR__0454
05acc     94 01 00 FF 
05ad0     B5 95 06 F6 | 	mov	arg02, ##@LR__5775
05ad4     53 93 02 F6 | 	mov	arg01, local01
05ad8     04 EF B1 FD | 	call	#__system___string_cmp
05adc     00 7A 0E F2 | 	cmp	result1, #0 wz
05ae0     B4 04 90 AD |  if_e	jmp	#LR__0455
05ae4     94 01 00 FF 
05ae8     B9 95 06 F6 | 	mov	arg02, ##@LR__5776
05aec     53 93 02 F6 | 	mov	arg01, local01
05af0     EC EE B1 FD | 	call	#__system___string_cmp
05af4     00 7A 0E F2 | 	cmp	result1, #0 wz
05af8     A4 04 90 AD |  if_e	jmp	#LR__0456
05afc     94 01 00 FF 
05b00     C1 95 06 F6 | 	mov	arg02, ##@LR__5777
05b04     53 93 02 F6 | 	mov	arg01, local01
05b08     D4 EE B1 FD | 	call	#__system___string_cmp
05b0c     00 7A 0E F2 | 	cmp	result1, #0 wz
05b10     94 04 90 AD |  if_e	jmp	#LR__0457
05b14     94 01 00 FF 
05b18     C5 95 06 F6 | 	mov	arg02, ##@LR__5778
05b1c     53 93 02 F6 | 	mov	arg01, local01
05b20     BC EE B1 FD | 	call	#__system___string_cmp
05b24     00 7A 0E F2 | 	cmp	result1, #0 wz
05b28     84 04 90 AD |  if_e	jmp	#LR__0458
05b2c     94 01 00 FF 
05b30     CB 95 06 F6 | 	mov	arg02, ##@LR__5779
05b34     53 93 02 F6 | 	mov	arg01, local01
05b38     A4 EE B1 FD | 	call	#__system___string_cmp
05b3c     00 7A 0E F2 | 	cmp	result1, #0 wz
05b40     74 04 90 AD |  if_e	jmp	#LR__0459
05b44     94 01 00 FF 
05b48     D1 95 06 F6 | 	mov	arg02, ##@LR__5780
05b4c     53 93 02 F6 | 	mov	arg01, local01
05b50     8C EE B1 FD | 	call	#__system___string_cmp
05b54     00 7A 0E F2 | 	cmp	result1, #0 wz
05b58     64 04 90 AD |  if_e	jmp	#LR__0460
05b5c     68 04 90 FD | 	jmp	#LR__0461
05b60                 | LR__0320
05b60     5C 7A 06 F6 | 	mov	result1, #92
05b64     64 04 90 FD | 	jmp	#LR__0462
05b68                 | LR__0321
05b68     5C 7A 06 F6 | 	mov	result1, #92
05b6c     5C 04 90 FD | 	jmp	#LR__0462
05b70                 | LR__0322
05b70     B9 7A 06 F6 | 	mov	result1, #185
05b74     54 04 90 FD | 	jmp	#LR__0462
05b78                 | LR__0323
05b78     47 7A 06 F6 | 	mov	result1, #71
05b7c     4C 04 90 FD | 	jmp	#LR__0462
05b80                 | LR__0324
05b80     59 7A 06 F6 | 	mov	result1, #89
05b84     44 04 90 FD | 	jmp	#LR__0462
05b88                 | LR__0325
05b88     59 7A 06 F6 | 	mov	result1, #89
05b8c     3C 04 90 FD | 	jmp	#LR__0462
05b90                 | LR__0326
05b90     C3 7A 06 F6 | 	mov	result1, #195
05b94     34 04 90 FD | 	jmp	#LR__0462
05b98                 | LR__0327
05b98     AE 7A 06 F6 | 	mov	result1, #174
05b9c     2C 04 90 FD | 	jmp	#LR__0462
05ba0                 | LR__0328
05ba0     AE 7A 06 F6 | 	mov	result1, #174
05ba4     24 04 90 FD | 	jmp	#LR__0462
05ba8                 | LR__0329
05ba8     B1 7A 06 F6 | 	mov	result1, #177
05bac     1C 04 90 FD | 	jmp	#LR__0462
05bb0                 | LR__0330
05bb0     B1 7A 06 F6 | 	mov	result1, #177
05bb4     14 04 90 FD | 	jmp	#LR__0462
05bb8                 | LR__0331
05bb8     AF 7A 06 F6 | 	mov	result1, #175
05bbc     0C 04 90 FD | 	jmp	#LR__0462
05bc0                 | LR__0332
05bc0     AF 7A 06 F6 | 	mov	result1, #175
05bc4     04 04 90 FD | 	jmp	#LR__0462
05bc8                 | LR__0333
05bc8     B0 7A 06 F6 | 	mov	result1, #176
05bcc     FC 03 90 FD | 	jmp	#LR__0462
05bd0                 | LR__0334
05bd0     B0 7A 06 F6 | 	mov	result1, #176
05bd4     F4 03 90 FD | 	jmp	#LR__0462
05bd8                 | LR__0335
05bd8     45 7A 06 F6 | 	mov	result1, #69
05bdc     EC 03 90 FD | 	jmp	#LR__0462
05be0                 | LR__0336
05be0     45 7A 06 F6 | 	mov	result1, #69
05be4     E4 03 90 FD | 	jmp	#LR__0462
05be8                 | LR__0337
05be8     69 7A 06 F6 | 	mov	result1, #105
05bec     DC 03 90 FD | 	jmp	#LR__0462
05bf0                 | LR__0338
05bf0     B4 7A 06 F6 | 	mov	result1, #180
05bf4     D4 03 90 FD | 	jmp	#LR__0462
05bf8                 | LR__0339
05bf8     40 7A 06 F6 | 	mov	result1, #64
05bfc     CC 03 90 FD | 	jmp	#LR__0462
05c00                 | LR__0340
05c00     CF 7A 06 F6 | 	mov	result1, #207
05c04     C4 03 90 FD | 	jmp	#LR__0462
05c08                 | LR__0341
05c08     49 7A 06 F6 | 	mov	result1, #73
05c0c     BC 03 90 FD | 	jmp	#LR__0462
05c10                 | LR__0342
05c10     49 7A 06 F6 | 	mov	result1, #73
05c14     B4 03 90 FD | 	jmp	#LR__0462
05c18                 | LR__0343
05c18     C4 7A 06 F6 | 	mov	result1, #196
05c1c     AC 03 90 FD | 	jmp	#LR__0462
05c20                 | LR__0344
05c20     68 7A 06 F6 | 	mov	result1, #104
05c24     A4 03 90 FD | 	jmp	#LR__0462
05c28                 | LR__0345
05c28     B7 7A 06 F6 | 	mov	result1, #183
05c2c     9C 03 90 FD | 	jmp	#LR__0462
05c30                 | LR__0346
05c30     D9 7A 06 F6 | 	mov	result1, #217
05c34     94 03 90 FD | 	jmp	#LR__0462
05c38                 | LR__0347
05c38     73 7A 06 F6 | 	mov	result1, #115
05c3c     8C 03 90 FD | 	jmp	#LR__0462
05c40                 | LR__0348
05c40     74 7A 06 F6 | 	mov	result1, #116
05c44     84 03 90 FD | 	jmp	#LR__0462
05c48                 | LR__0349
05c48     6C 7A 06 F6 | 	mov	result1, #108
05c4c     7C 03 90 FD | 	jmp	#LR__0462
05c50                 | LR__0350
05c50     6C 7A 06 F6 | 	mov	result1, #108
05c54     74 03 90 FD | 	jmp	#LR__0462
05c58                 | LR__0351
05c58     89 7A 06 F6 | 	mov	result1, #137
05c5c     6C 03 90 FD | 	jmp	#LR__0462
05c60                 | LR__0352
05c60     C2 7A 06 F6 | 	mov	result1, #194
05c64     64 03 90 FD | 	jmp	#LR__0462
05c68                 | LR__0353
05c68     72 7A 06 F6 | 	mov	result1, #114
05c6c     5C 03 90 FD | 	jmp	#LR__0462
05c70                 | LR__0354
05c70     5D 7A 06 F6 | 	mov	result1, #93
05c74     54 03 90 FD | 	jmp	#LR__0462
05c78                 | LR__0355
05c78     96 7A 06 F6 | 	mov	result1, #150
05c7c     4C 03 90 FD | 	jmp	#LR__0462
05c80                 | LR__0356
05c80     43 7A 06 F6 | 	mov	result1, #67
05c84     44 03 90 FD | 	jmp	#LR__0462
05c88                 | LR__0357
05c88     43 7A 06 F6 | 	mov	result1, #67
05c8c     3C 03 90 FD | 	jmp	#LR__0462
05c90                 | LR__0358
05c90     43 7A 06 F6 | 	mov	result1, #67
05c94     34 03 90 FD | 	jmp	#LR__0462
05c98                 | LR__0359
05c98     5A 7A 06 F6 | 	mov	result1, #90
05c9c     2C 03 90 FD | 	jmp	#LR__0462
05ca0                 | LR__0360
05ca0     AB 7A 06 F6 | 	mov	result1, #171
05ca4     24 03 90 FD | 	jmp	#LR__0462
05ca8                 | LR__0361
05ca8     BD 7A 06 F6 | 	mov	result1, #189
05cac     1C 03 90 FD | 	jmp	#LR__0462
05cb0                 | LR__0362
05cb0     BD 7A 06 F6 | 	mov	result1, #189
05cb4     14 03 90 FD | 	jmp	#LR__0462
05cb8                 | LR__0363
05cb8     46 7A 06 F6 | 	mov	result1, #70
05cbc     0C 03 90 FD | 	jmp	#LR__0462
05cc0                 | LR__0364
05cc0     46 7A 06 F6 | 	mov	result1, #70
05cc4     04 03 90 FD | 	jmp	#LR__0462
05cc8                 | LR__0365
05cc8     71 7A 06 F6 | 	mov	result1, #113
05ccc     FC 02 90 FD | 	jmp	#LR__0462
05cd0                 | LR__0366
05cd0     71 7A 06 F6 | 	mov	result1, #113
05cd4     F4 02 90 FD | 	jmp	#LR__0462
05cd8                 | LR__0367
05cd8     60 7A 06 F6 | 	mov	result1, #96
05cdc     EC 02 90 FD | 	jmp	#LR__0462
05ce0                 | LR__0368
05ce0     4A 7A 06 F6 | 	mov	result1, #74
05ce4     E4 02 90 FD | 	jmp	#LR__0462
05ce8                 | LR__0369
05ce8     4A 7A 06 F6 | 	mov	result1, #74
05cec     DC 02 90 FD | 	jmp	#LR__0462
05cf0                 | LR__0370
05cf0     48 7A 06 F6 | 	mov	result1, #72
05cf4     D4 02 90 FD | 	jmp	#LR__0462
05cf8                 | LR__0371
05cf8     48 7A 06 F6 | 	mov	result1, #72
05cfc     CC 02 90 FD | 	jmp	#LR__0462
05d00                 | LR__0372
05d00     BB 7A 06 F6 | 	mov	result1, #187
05d04     C4 02 90 FD | 	jmp	#LR__0462
05d08                 | LR__0373
05d08     A9 7A 06 F6 | 	mov	result1, #169
05d0c     BC 02 90 FD | 	jmp	#LR__0462
05d10                 | LR__0374
05d10     4E 7A 06 F6 | 	mov	result1, #78
05d14     B4 02 90 FD | 	jmp	#LR__0462
05d18                 | LR__0375
05d18     4E 7A 06 F6 | 	mov	result1, #78
05d1c     AC 02 90 FD | 	jmp	#LR__0462
05d20                 | LR__0376
05d20     58 7A 06 F6 | 	mov	result1, #88
05d24     A4 02 90 FD | 	jmp	#LR__0462
05d28                 | LR__0377
05d28     5F 7A 06 F6 | 	mov	result1, #95
05d2c     9C 02 90 FD | 	jmp	#LR__0462
05d30                 | LR__0378
05d30     5F 7A 06 F6 | 	mov	result1, #95
05d34     94 02 90 FD | 	jmp	#LR__0462
05d38                 | LR__0379
05d38     B5 7A 06 F6 | 	mov	result1, #181
05d3c     8C 02 90 FD | 	jmp	#LR__0462
05d40                 | LR__0380
05d40     4C 7A 06 F6 | 	mov	result1, #76
05d44     84 02 90 FD | 	jmp	#LR__0462
05d48                 | LR__0381
05d48     4C 7A 06 F6 | 	mov	result1, #76
05d4c     7C 02 90 FD | 	jmp	#LR__0462
05d50                 | LR__0382
05d50     52 7A 06 F6 | 	mov	result1, #82
05d54     74 02 90 FD | 	jmp	#LR__0462
05d58                 | LR__0383
05d58     52 7A 06 F6 | 	mov	result1, #82
05d5c     6C 02 90 FD | 	jmp	#LR__0462
05d60                 | LR__0384
05d60     97 7A 06 F6 | 	mov	result1, #151
05d64     64 02 90 FD | 	jmp	#LR__0462
05d68                 | LR__0385
05d68     C6 7A 06 F6 | 	mov	result1, #198
05d6c     5C 02 90 FD | 	jmp	#LR__0462
05d70                 | LR__0386
05d70     61 7A 06 F6 | 	mov	result1, #97
05d74     54 02 90 FD | 	jmp	#LR__0462
05d78                 | LR__0387
05d78     61 7A 06 F6 | 	mov	result1, #97
05d7c     4C 02 90 FD | 	jmp	#LR__0462
05d80                 | LR__0388
05d80     63 7A 06 F6 | 	mov	result1, #99
05d84     44 02 90 FD | 	jmp	#LR__0462
05d88                 | LR__0389
05d88     41 7A 06 F6 | 	mov	result1, #65
05d8c     3C 02 90 FD | 	jmp	#LR__0462
05d90                 | LR__0390
05d90     4B 7A 06 F6 | 	mov	result1, #75
05d94     34 02 90 FD | 	jmp	#LR__0462
05d98                 | LR__0391
05d98     4B 7A 06 F6 | 	mov	result1, #75
05d9c     2C 02 90 FD | 	jmp	#LR__0462
05da0                 | LR__0392
05da0     C1 7A 06 F6 | 	mov	result1, #193
05da4     24 02 90 FD | 	jmp	#LR__0462
05da8                 | LR__0393
05da8     B3 7A 06 F6 | 	mov	result1, #179
05dac     1C 02 90 FD | 	jmp	#LR__0462
05db0                 | LR__0394
05db0     5E 7A 06 F6 | 	mov	result1, #94
05db4     14 02 90 FD | 	jmp	#LR__0462
05db8                 | LR__0395
05db8     5E 7A 06 F6 | 	mov	result1, #94
05dbc     0C 02 90 FD | 	jmp	#LR__0462
05dc0                 | LR__0396
05dc0     7C 7A 06 F6 | 	mov	result1, #124
05dc4     04 02 90 FD | 	jmp	#LR__0462
05dc8                 | LR__0397
05dc8     7E 7A 06 F6 | 	mov	result1, #126
05dcc     FC 01 90 FD | 	jmp	#LR__0462
05dd0                 | LR__0398
05dd0     7D 7A 06 F6 | 	mov	result1, #125
05dd4     F4 01 90 FD | 	jmp	#LR__0462
05dd8                 | LR__0399
05dd8     7F 7A 06 F6 | 	mov	result1, #127
05ddc     EC 01 90 FD | 	jmp	#LR__0462
05de0                 | LR__0400
05de0     80 7A 06 F6 | 	mov	result1, #128
05de4     E4 01 90 FD | 	jmp	#LR__0462
05de8                 | LR__0401
05de8     55 7A 06 F6 | 	mov	result1, #85
05dec     DC 01 90 FD | 	jmp	#LR__0462
05df0                 | LR__0402
05df0     75 7A 06 F6 | 	mov	result1, #117
05df4     D4 01 90 FD | 	jmp	#LR__0462
05df8                 | LR__0403
05df8     75 7A 06 F6 | 	mov	result1, #117
05dfc     CC 01 90 FD | 	jmp	#LR__0462
05e00                 | LR__0404
05e00     42 7A 06 F6 | 	mov	result1, #66
05e04     C4 01 90 FD | 	jmp	#LR__0462
05e08                 | LR__0405
05e08     42 7A 06 F6 | 	mov	result1, #66
05e0c     BC 01 90 FD | 	jmp	#LR__0462
05e10                 | LR__0406
05e10     95 7A 06 F6 | 	mov	result1, #149
05e14     B4 01 90 FD | 	jmp	#LR__0462
05e18                 | LR__0407
05e18     AC 7A 06 F6 | 	mov	result1, #172
05e1c     AC 01 90 FD | 	jmp	#LR__0462
05e20                 | LR__0408
05e20     81 7A 06 F6 | 	mov	result1, #129
05e24     A4 01 90 FD | 	jmp	#LR__0462
05e28                 | LR__0409
05e28     81 7A 06 F6 | 	mov	result1, #129
05e2c     9C 01 90 FD | 	jmp	#LR__0462
05e30                 | LR__0410
05e30     44 7A 06 F6 | 	mov	result1, #68
05e34     94 01 90 FD | 	jmp	#LR__0462
05e38                 | LR__0411
05e38     44 7A 06 F6 | 	mov	result1, #68
05e3c     8C 01 90 FD | 	jmp	#LR__0462
05e40                 | LR__0412
05e40     BC 7A 06 F6 | 	mov	result1, #188
05e44     84 01 90 FD | 	jmp	#LR__0462
05e48                 | LR__0413
05e48     88 7A 06 F6 | 	mov	result1, #136
05e4c     7C 01 90 FD | 	jmp	#LR__0462
05e50                 | LR__0414
05e50     B6 7A 06 F6 | 	mov	result1, #182
05e54     74 01 90 FD | 	jmp	#LR__0462
05e58                 | LR__0415
05e58     92 7A 06 F6 | 	mov	result1, #146
05e5c     6C 01 90 FD | 	jmp	#LR__0462
05e60                 | LR__0416
05e60     BE 7A 06 F6 | 	mov	result1, #190
05e64     64 01 90 FD | 	jmp	#LR__0462
05e68                 | LR__0417
05e68     BE 7A 06 F6 | 	mov	result1, #190
05e6c     5C 01 90 FD | 	jmp	#LR__0462
05e70                 | LR__0418
05e70     C7 7A 06 F6 | 	mov	result1, #199
05e74     54 01 90 FD | 	jmp	#LR__0462
05e78                 | LR__0419
05e78     D4 7A 06 F6 | 	mov	result1, #212
05e7c     4C 01 90 FD | 	jmp	#LR__0462
05e80                 | LR__0420
05e80     D4 7A 06 F6 | 	mov	result1, #212
05e84     44 01 90 FD | 	jmp	#LR__0462
05e88                 | LR__0421
05e88     AA 7A 06 F6 | 	mov	result1, #170
05e8c     3C 01 90 FD | 	jmp	#LR__0462
05e90                 | LR__0422
05e90     4D 7A 06 F6 | 	mov	result1, #77
05e94     34 01 90 FD | 	jmp	#LR__0462
05e98                 | LR__0423
05e98     4D 7A 06 F6 | 	mov	result1, #77
05e9c     2C 01 90 FD | 	jmp	#LR__0462
05ea0                 | LR__0424
05ea0     51 7A 06 F6 | 	mov	result1, #81
05ea4     24 01 90 FD | 	jmp	#LR__0462
05ea8                 | LR__0425
05ea8     51 7A 06 F6 | 	mov	result1, #81
05eac     1C 01 90 FD | 	jmp	#LR__0462
05eb0                 | LR__0426
05eb0     D2 7A 06 F6 | 	mov	result1, #210
05eb4     14 01 90 FD | 	jmp	#LR__0462
05eb8                 | LR__0427
05eb8     D2 7A 06 F6 | 	mov	result1, #210
05ebc     0C 01 90 FD | 	jmp	#LR__0462
05ec0                 | LR__0428
05ec0     DA 7A 06 F6 | 	mov	result1, #218
05ec4     04 01 90 FD | 	jmp	#LR__0462
05ec8                 | LR__0429
05ec8     DA 7A 06 F6 | 	mov	result1, #218
05ecc     FC 00 90 FD | 	jmp	#LR__0462
05ed0                 | LR__0430
05ed0     8E 7A 06 F6 | 	mov	result1, #142
05ed4     F4 00 90 FD | 	jmp	#LR__0462
05ed8                 | LR__0431
05ed8     8E 7A 06 F6 | 	mov	result1, #142
05edc     EC 00 90 FD | 	jmp	#LR__0462
05ee0                 | LR__0432
05ee0     90 7A 06 F6 | 	mov	result1, #144
05ee4     E4 00 90 FD | 	jmp	#LR__0462
05ee8                 | LR__0433
05ee8     90 7A 06 F6 | 	mov	result1, #144
05eec     DC 00 90 FD | 	jmp	#LR__0462
05ef0                 | LR__0434
05ef0     8D 7A 06 F6 | 	mov	result1, #141
05ef4     D4 00 90 FD | 	jmp	#LR__0462
05ef8                 | LR__0435
05ef8     8D 7A 06 F6 | 	mov	result1, #141
05efc     CC 00 90 FD | 	jmp	#LR__0462
05f00                 | LR__0436
05f00     8C 7A 06 F6 | 	mov	result1, #140
05f04     C4 00 90 FD | 	jmp	#LR__0462
05f08                 | LR__0437
05f08     8C 7A 06 F6 | 	mov	result1, #140
05f0c     BC 00 90 FD | 	jmp	#LR__0462
05f10                 | LR__0438
05f10     91 7A 06 F6 | 	mov	result1, #145
05f14     B4 00 90 FD | 	jmp	#LR__0462
05f18                 | LR__0439
05f18     91 7A 06 F6 | 	mov	result1, #145
05f1c     AC 00 90 FD | 	jmp	#LR__0462
05f20                 | LR__0440
05f20     8B 7A 06 F6 | 	mov	result1, #139
05f24     A4 00 90 FD | 	jmp	#LR__0462
05f28                 | LR__0441
05f28     8B 7A 06 F6 | 	mov	result1, #139
05f2c     9C 00 90 FD | 	jmp	#LR__0462
05f30                 | LR__0442
05f30     8F 7A 06 F6 | 	mov	result1, #143
05f34     94 00 90 FD | 	jmp	#LR__0462
05f38                 | LR__0443
05f38     8F 7A 06 F6 | 	mov	result1, #143
05f3c     8C 00 90 FD | 	jmp	#LR__0462
05f40                 | LR__0444
05f40     8F 7A 06 F6 | 	mov	result1, #143
05f44     84 00 90 FD | 	jmp	#LR__0462
05f48                 | LR__0445
05f48     B2 7A 06 F6 | 	mov	result1, #178
05f4c     7C 00 90 FD | 	jmp	#LR__0462
05f50                 | LR__0446
05f50     B2 7A 06 F6 | 	mov	result1, #178
05f54     74 00 90 FD | 	jmp	#LR__0462
05f58                 | LR__0447
05f58     75 7A 06 F6 | 	mov	result1, #117
05f5c     6C 00 90 FD | 	jmp	#LR__0462
05f60                 | LR__0448
05f60     75 7A 06 F6 | 	mov	result1, #117
05f64     64 00 90 FD | 	jmp	#LR__0462
05f68                 | LR__0449
05f68     6D 7A 06 F6 | 	mov	result1, #109
05f6c     5C 00 90 FD | 	jmp	#LR__0462
05f70                 | LR__0450
05f70     6D 7A 06 F6 | 	mov	result1, #109
05f74     54 00 90 FD | 	jmp	#LR__0462
05f78                 | LR__0451
05f78     5B 7A 06 F6 | 	mov	result1, #91
05f7c     4C 00 90 FD | 	jmp	#LR__0462
05f80                 | LR__0452
05f80     56 7A 06 F6 | 	mov	result1, #86
05f84     44 00 90 FD | 	jmp	#LR__0462
05f88                 | LR__0453
05f88     56 7A 06 F6 | 	mov	result1, #86
05f8c     3C 00 90 FD | 	jmp	#LR__0462
05f90                 | LR__0454
05f90     70 7A 06 F6 | 	mov	result1, #112
05f94     34 00 90 FD | 	jmp	#LR__0462
05f98                 | LR__0455
05f98     70 7A 06 F6 | 	mov	result1, #112
05f9c     2C 00 90 FD | 	jmp	#LR__0462
05fa0                 | LR__0456
05fa0     57 7A 06 F6 | 	mov	result1, #87
05fa4     24 00 90 FD | 	jmp	#LR__0462
05fa8                 | LR__0457
05fa8     57 7A 06 F6 | 	mov	result1, #87
05fac     1C 00 90 FD | 	jmp	#LR__0462
05fb0                 | LR__0458
05fb0     79 7A 06 F6 | 	mov	result1, #121
05fb4     14 00 90 FD | 	jmp	#LR__0462
05fb8                 | LR__0459
05fb8     77 7A 06 F6 | 	mov	result1, #119
05fbc     0C 00 90 FD | 	jmp	#LR__0462
05fc0                 | LR__0460
05fc0     78 7A 06 F6 | 	mov	result1, #120
05fc4     04 00 90 FD | 	jmp	#LR__0462
05fc8                 | LR__0461
05fc8     00 7A 06 F6 | 	mov	result1, #0
05fcc                 | LR__0462
05fcc     E7 F0 03 F6 | 	mov	ptra, fp
05fd0     F2 00 A0 FD | 	call	#popregs_
05fd4                 | _iscommand_ret
05fd4     2D 00 64 FD | 	ret
05fd8                 | 
05fd8                 | ' 
05fd8                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05fd8                 | ' 
05fd8                 | ' function isfunction(s as string) as ubyte
05fd8                 | _isfunction
05fd8     01 CA 05 F6 | 	mov	COUNT_, #1
05fdc     E8 00 A0 FD | 	call	#pushregs_
05fe0                 | ' 
05fe0                 | ' select case s
05fe0     49 A7 02 F6 | 	mov	local01, arg01
05fe4     94 01 00 FF 
05fe8     D7 95 06 F6 | 	mov	arg02, ##@LR__5781
05fec     53 93 02 F6 | 	mov	arg01, local01
05ff0     EC E9 B1 FD | 	call	#__system___string_cmp
05ff4     00 7A 0E F2 | 	cmp	result1, #0 wz
05ff8     EC 05 90 AD |  if_e	jmp	#LR__0470
05ffc     94 01 00 FF 
06000     DB 95 06 F6 | 	mov	arg02, ##@LR__5782
06004     53 93 02 F6 | 	mov	arg01, local01
06008     D4 E9 B1 FD | 	call	#__system___string_cmp
0600c     00 7A 0E F2 | 	cmp	result1, #0 wz
06010     DC 05 90 AD |  if_e	jmp	#LR__0471
06014     94 01 00 FF 
06018     E0 95 06 F6 | 	mov	arg02, ##@LR__5783
0601c     53 93 02 F6 | 	mov	arg01, local01
06020     BC E9 B1 FD | 	call	#__system___string_cmp
06024     00 7A 0E F2 | 	cmp	result1, #0 wz
06028     CC 05 90 AD |  if_e	jmp	#LR__0472
0602c     94 01 00 FF 
06030     E4 95 06 F6 | 	mov	arg02, ##@LR__5784
06034     53 93 02 F6 | 	mov	arg01, local01
06038     A4 E9 B1 FD | 	call	#__system___string_cmp
0603c     00 7A 0E F2 | 	cmp	result1, #0 wz
06040     BC 05 90 AD |  if_e	jmp	#LR__0473
06044     94 01 00 FF 
06048     E9 95 06 F6 | 	mov	arg02, ##@LR__5785
0604c     53 93 02 F6 | 	mov	arg01, local01
06050     8C E9 B1 FD | 	call	#__system___string_cmp
06054     00 7A 0E F2 | 	cmp	result1, #0 wz
06058     AC 05 90 AD |  if_e	jmp	#LR__0474
0605c     94 01 00 FF 
06060     ED 95 06 F6 | 	mov	arg02, ##@LR__5786
06064     53 93 02 F6 | 	mov	arg01, local01
06068     74 E9 B1 FD | 	call	#__system___string_cmp
0606c     00 7A 0E F2 | 	cmp	result1, #0 wz
06070     9C 05 90 AD |  if_e	jmp	#LR__0475
06074     94 01 00 FF 
06078     F2 95 06 F6 | 	mov	arg02, ##@LR__5787
0607c     53 93 02 F6 | 	mov	arg01, local01
06080     5C E9 B1 FD | 	call	#__system___string_cmp
06084     00 7A 0E F2 | 	cmp	result1, #0 wz
06088     8C 05 90 AD |  if_e	jmp	#LR__0476
0608c     94 01 00 FF 
06090     F6 95 06 F6 | 	mov	arg02, ##@LR__5788
06094     53 93 02 F6 | 	mov	arg01, local01
06098     44 E9 B1 FD | 	call	#__system___string_cmp
0609c     00 7A 0E F2 | 	cmp	result1, #0 wz
060a0     7C 05 90 AD |  if_e	jmp	#LR__0477
060a4     94 01 00 FF 
060a8     FB 95 06 F6 | 	mov	arg02, ##@LR__5789
060ac     53 93 02 F6 | 	mov	arg01, local01
060b0     2C E9 B1 FD | 	call	#__system___string_cmp
060b4     00 7A 0E F2 | 	cmp	result1, #0 wz
060b8     6C 05 90 AD |  if_e	jmp	#LR__0478
060bc     95 01 00 FF 
060c0     00 94 06 F6 | 	mov	arg02, ##@LR__5790
060c4     53 93 02 F6 | 	mov	arg01, local01
060c8     14 E9 B1 FD | 	call	#__system___string_cmp
060cc     00 7A 0E F2 | 	cmp	result1, #0 wz
060d0     5C 05 90 AD |  if_e	jmp	#LR__0479
060d4     95 01 00 FF 
060d8     08 94 06 F6 | 	mov	arg02, ##@LR__5791
060dc     53 93 02 F6 | 	mov	arg01, local01
060e0     FC E8 B1 FD | 	call	#__system___string_cmp
060e4     00 7A 0E F2 | 	cmp	result1, #0 wz
060e8     4C 05 90 AD |  if_e	jmp	#LR__0480
060ec     95 01 00 FF 
060f0     0C 94 06 F6 | 	mov	arg02, ##@LR__5792
060f4     53 93 02 F6 | 	mov	arg01, local01
060f8     E4 E8 B1 FD | 	call	#__system___string_cmp
060fc     00 7A 0E F2 | 	cmp	result1, #0 wz
06100     3C 05 90 AD |  if_e	jmp	#LR__0481
06104     95 01 00 FF 
06108     12 94 06 F6 | 	mov	arg02, ##@LR__5793
0610c     53 93 02 F6 | 	mov	arg01, local01
06110     CC E8 B1 FD | 	call	#__system___string_cmp
06114     00 7A 0E F2 | 	cmp	result1, #0 wz
06118     2C 05 90 AD |  if_e	jmp	#LR__0482
0611c     95 01 00 FF 
06120     1C 94 06 F6 | 	mov	arg02, ##@LR__5794
06124     53 93 02 F6 | 	mov	arg01, local01
06128     B4 E8 B1 FD | 	call	#__system___string_cmp
0612c     00 7A 0E F2 | 	cmp	result1, #0 wz
06130     1C 05 90 AD |  if_e	jmp	#LR__0483
06134     95 01 00 FF 
06138     25 94 06 F6 | 	mov	arg02, ##@LR__5795
0613c     53 93 02 F6 | 	mov	arg01, local01
06140     9C E8 B1 FD | 	call	#__system___string_cmp
06144     00 7A 0E F2 | 	cmp	result1, #0 wz
06148     0C 05 90 AD |  if_e	jmp	#LR__0484
0614c     95 01 00 FF 
06150     2E 94 06 F6 | 	mov	arg02, ##@LR__5796
06154     53 93 02 F6 | 	mov	arg01, local01
06158     84 E8 B1 FD | 	call	#__system___string_cmp
0615c     00 7A 0E F2 | 	cmp	result1, #0 wz
06160     FC 04 90 AD |  if_e	jmp	#LR__0485
06164     95 01 00 FF 
06168     32 94 06 F6 | 	mov	arg02, ##@LR__5797
0616c     53 93 02 F6 | 	mov	arg01, local01
06170     6C E8 B1 FD | 	call	#__system___string_cmp
06174     00 7A 0E F2 | 	cmp	result1, #0 wz
06178     EC 04 90 AD |  if_e	jmp	#LR__0486
0617c     95 01 00 FF 
06180     36 94 06 F6 | 	mov	arg02, ##@LR__5798
06184     53 93 02 F6 | 	mov	arg01, local01
06188     54 E8 B1 FD | 	call	#__system___string_cmp
0618c     00 7A 0E F2 | 	cmp	result1, #0 wz
06190     DC 04 90 AD |  if_e	jmp	#LR__0487
06194     95 01 00 FF 
06198     3A 94 06 F6 | 	mov	arg02, ##@LR__5799
0619c     53 93 02 F6 | 	mov	arg01, local01
061a0     3C E8 B1 FD | 	call	#__system___string_cmp
061a4     00 7A 0E F2 | 	cmp	result1, #0 wz
061a8     CC 04 90 AD |  if_e	jmp	#LR__0488
061ac     95 01 00 FF 
061b0     43 94 06 F6 | 	mov	arg02, ##@LR__5800
061b4     53 93 02 F6 | 	mov	arg01, local01
061b8     24 E8 B1 FD | 	call	#__system___string_cmp
061bc     00 7A 0E F2 | 	cmp	result1, #0 wz
061c0     BC 04 90 AD |  if_e	jmp	#LR__0489
061c4     95 01 00 FF 
061c8     4C 94 06 F6 | 	mov	arg02, ##@LR__5801
061cc     53 93 02 F6 | 	mov	arg01, local01
061d0     0C E8 B1 FD | 	call	#__system___string_cmp
061d4     00 7A 0E F2 | 	cmp	result1, #0 wz
061d8     AC 04 90 AD |  if_e	jmp	#LR__0490
061dc     95 01 00 FF 
061e0     50 94 06 F6 | 	mov	arg02, ##@LR__5802
061e4     53 93 02 F6 | 	mov	arg01, local01
061e8     F4 E7 B1 FD | 	call	#__system___string_cmp
061ec     00 7A 0E F2 | 	cmp	result1, #0 wz
061f0     9C 04 90 AD |  if_e	jmp	#LR__0491
061f4     95 01 00 FF 
061f8     5E 94 06 F6 | 	mov	arg02, ##@LR__5803
061fc     53 93 02 F6 | 	mov	arg01, local01
06200     DC E7 B1 FD | 	call	#__system___string_cmp
06204     00 7A 0E F2 | 	cmp	result1, #0 wz
06208     8C 04 90 AD |  if_e	jmp	#LR__0492
0620c     95 01 00 FF 
06210     6B 94 06 F6 | 	mov	arg02, ##@LR__5804
06214     53 93 02 F6 | 	mov	arg01, local01
06218     C4 E7 B1 FD | 	call	#__system___string_cmp
0621c     00 7A 0E F2 | 	cmp	result1, #0 wz
06220     7C 04 90 AD |  if_e	jmp	#LR__0493
06224     95 01 00 FF 
06228     77 94 06 F6 | 	mov	arg02, ##@LR__5805
0622c     53 93 02 F6 | 	mov	arg01, local01
06230     AC E7 B1 FD | 	call	#__system___string_cmp
06234     00 7A 0E F2 | 	cmp	result1, #0 wz
06238     6C 04 90 AD |  if_e	jmp	#LR__0494
0623c     95 01 00 FF 
06240     7F 94 06 F6 | 	mov	arg02, ##@LR__5806
06244     53 93 02 F6 | 	mov	arg01, local01
06248     94 E7 B1 FD | 	call	#__system___string_cmp
0624c     00 7A 0E F2 | 	cmp	result1, #0 wz
06250     5C 04 90 AD |  if_e	jmp	#LR__0495
06254     95 01 00 FF 
06258     83 94 06 F6 | 	mov	arg02, ##@LR__5807
0625c     53 93 02 F6 | 	mov	arg01, local01
06260     7C E7 B1 FD | 	call	#__system___string_cmp
06264     00 7A 0E F2 | 	cmp	result1, #0 wz
06268     4C 04 90 AD |  if_e	jmp	#LR__0496
0626c     95 01 00 FF 
06270     88 94 06 F6 | 	mov	arg02, ##@LR__5808
06274     53 93 02 F6 | 	mov	arg01, local01
06278     64 E7 B1 FD | 	call	#__system___string_cmp
0627c     00 7A 0E F2 | 	cmp	result1, #0 wz
06280     3C 04 90 AD |  if_e	jmp	#LR__0497
06284     95 01 00 FF 
06288     8F 94 06 F6 | 	mov	arg02, ##@LR__5809
0628c     53 93 02 F6 | 	mov	arg01, local01
06290     4C E7 B1 FD | 	call	#__system___string_cmp
06294     00 7A 0E F2 | 	cmp	result1, #0 wz
06298     2C 04 90 AD |  if_e	jmp	#LR__0498
0629c     95 01 00 FF 
062a0     93 94 06 F6 | 	mov	arg02, ##@LR__5810
062a4     53 93 02 F6 | 	mov	arg01, local01
062a8     34 E7 B1 FD | 	call	#__system___string_cmp
062ac     00 7A 0E F2 | 	cmp	result1, #0 wz
062b0     1C 04 90 AD |  if_e	jmp	#LR__0499
062b4     95 01 00 FF 
062b8     99 94 06 F6 | 	mov	arg02, ##@LR__5811
062bc     53 93 02 F6 | 	mov	arg01, local01
062c0     1C E7 B1 FD | 	call	#__system___string_cmp
062c4     00 7A 0E F2 | 	cmp	result1, #0 wz
062c8     0C 04 90 AD |  if_e	jmp	#LR__0500
062cc     95 01 00 FF 
062d0     9D 94 06 F6 | 	mov	arg02, ##@LR__5812
062d4     53 93 02 F6 | 	mov	arg01, local01
062d8     04 E7 B1 FD | 	call	#__system___string_cmp
062dc     00 7A 0E F2 | 	cmp	result1, #0 wz
062e0     FC 03 90 AD |  if_e	jmp	#LR__0501
062e4     95 01 00 FF 
062e8     A1 94 06 F6 | 	mov	arg02, ##@LR__5813
062ec     53 93 02 F6 | 	mov	arg01, local01
062f0     EC E6 B1 FD | 	call	#__system___string_cmp
062f4     00 7A 0E F2 | 	cmp	result1, #0 wz
062f8     EC 03 90 AD |  if_e	jmp	#LR__0502
062fc     95 01 00 FF 
06300     A7 94 06 F6 | 	mov	arg02, ##@LR__5814
06304     53 93 02 F6 | 	mov	arg01, local01
06308     D4 E6 B1 FD | 	call	#__system___string_cmp
0630c     00 7A 0E F2 | 	cmp	result1, #0 wz
06310     DC 03 90 AD |  if_e	jmp	#LR__0503
06314     95 01 00 FF 
06318     AE 94 06 F6 | 	mov	arg02, ##@LR__5815
0631c     53 93 02 F6 | 	mov	arg01, local01
06320     BC E6 B1 FD | 	call	#__system___string_cmp
06324     00 7A 0E F2 | 	cmp	result1, #0 wz
06328     CC 03 90 AD |  if_e	jmp	#LR__0504
0632c     95 01 00 FF 
06330     B4 94 06 F6 | 	mov	arg02, ##@LR__5816
06334     53 93 02 F6 | 	mov	arg01, local01
06338     A4 E6 B1 FD | 	call	#__system___string_cmp
0633c     00 7A 0E F2 | 	cmp	result1, #0 wz
06340     BC 03 90 AD |  if_e	jmp	#LR__0505
06344     95 01 00 FF 
06348     B9 94 06 F6 | 	mov	arg02, ##@LR__5817
0634c     53 93 02 F6 | 	mov	arg01, local01
06350     8C E6 B1 FD | 	call	#__system___string_cmp
06354     00 7A 0E F2 | 	cmp	result1, #0 wz
06358     AC 03 90 AD |  if_e	jmp	#LR__0506
0635c     95 01 00 FF 
06360     C0 94 06 F6 | 	mov	arg02, ##@LR__5818
06364     53 93 02 F6 | 	mov	arg01, local01
06368     74 E6 B1 FD | 	call	#__system___string_cmp
0636c     00 7A 0E F2 | 	cmp	result1, #0 wz
06370     9C 03 90 AD |  if_e	jmp	#LR__0507
06374     95 01 00 FF 
06378     C7 94 06 F6 | 	mov	arg02, ##@LR__5819
0637c     53 93 02 F6 | 	mov	arg01, local01
06380     5C E6 B1 FD | 	call	#__system___string_cmp
06384     00 7A 0E F2 | 	cmp	result1, #0 wz
06388     8C 03 90 AD |  if_e	jmp	#LR__0508
0638c     95 01 00 FF 
06390     CE 94 06 F6 | 	mov	arg02, ##@LR__5820
06394     53 93 02 F6 | 	mov	arg01, local01
06398     44 E6 B1 FD | 	call	#__system___string_cmp
0639c     00 7A 0E F2 | 	cmp	result1, #0 wz
063a0     7C 03 90 AD |  if_e	jmp	#LR__0509
063a4     95 01 00 FF 
063a8     D5 94 06 F6 | 	mov	arg02, ##@LR__5821
063ac     53 93 02 F6 | 	mov	arg01, local01
063b0     2C E6 B1 FD | 	call	#__system___string_cmp
063b4     00 7A 0E F2 | 	cmp	result1, #0 wz
063b8     6C 03 90 AD |  if_e	jmp	#LR__0510
063bc     95 01 00 FF 
063c0     DA 94 06 F6 | 	mov	arg02, ##@LR__5822
063c4     53 93 02 F6 | 	mov	arg01, local01
063c8     14 E6 B1 FD | 	call	#__system___string_cmp
063cc     00 7A 0E F2 | 	cmp	result1, #0 wz
063d0     5C 03 90 AD |  if_e	jmp	#LR__0511
063d4     95 01 00 FF 
063d8     DF 94 06 F6 | 	mov	arg02, ##@LR__5823
063dc     53 93 02 F6 | 	mov	arg01, local01
063e0     FC E5 B1 FD | 	call	#__system___string_cmp
063e4     00 7A 0E F2 | 	cmp	result1, #0 wz
063e8     4C 03 90 AD |  if_e	jmp	#LR__0512
063ec     95 01 00 FF 
063f0     E4 94 06 F6 | 	mov	arg02, ##@LR__5824
063f4     53 93 02 F6 | 	mov	arg01, local01
063f8     E4 E5 B1 FD | 	call	#__system___string_cmp
063fc     00 7A 0E F2 | 	cmp	result1, #0 wz
06400     3C 03 90 AD |  if_e	jmp	#LR__0513
06404     95 01 00 FF 
06408     E9 94 06 F6 | 	mov	arg02, ##@LR__5825
0640c     53 93 02 F6 | 	mov	arg01, local01
06410     CC E5 B1 FD | 	call	#__system___string_cmp
06414     00 7A 0E F2 | 	cmp	result1, #0 wz
06418     2C 03 90 AD |  if_e	jmp	#LR__0514
0641c     95 01 00 FF 
06420     EE 94 06 F6 | 	mov	arg02, ##@LR__5826
06424     53 93 02 F6 | 	mov	arg01, local01
06428     B4 E5 B1 FD | 	call	#__system___string_cmp
0642c     00 7A 0E F2 | 	cmp	result1, #0 wz
06430     1C 03 90 AD |  if_e	jmp	#LR__0515
06434     95 01 00 FF 
06438     F4 94 06 F6 | 	mov	arg02, ##@LR__5827
0643c     53 93 02 F6 | 	mov	arg01, local01
06440     9C E5 B1 FD | 	call	#__system___string_cmp
06444     00 7A 0E F2 | 	cmp	result1, #0 wz
06448     0C 03 90 AD |  if_e	jmp	#LR__0516
0644c     95 01 00 FF 
06450     FA 94 06 F6 | 	mov	arg02, ##@LR__5828
06454     53 93 02 F6 | 	mov	arg01, local01
06458     84 E5 B1 FD | 	call	#__system___string_cmp
0645c     00 7A 0E F2 | 	cmp	result1, #0 wz
06460     FC 02 90 AD |  if_e	jmp	#LR__0517
06464     95 01 00 FF 
06468     00 95 06 F6 | 	mov	arg02, ##@LR__5829
0646c     53 93 02 F6 | 	mov	arg01, local01
06470     6C E5 B1 FD | 	call	#__system___string_cmp
06474     00 7A 0E F2 | 	cmp	result1, #0 wz
06478     EC 02 90 AD |  if_e	jmp	#LR__0518
0647c     95 01 00 FF 
06480     05 95 06 F6 | 	mov	arg02, ##@LR__5830
06484     53 93 02 F6 | 	mov	arg01, local01
06488     54 E5 B1 FD | 	call	#__system___string_cmp
0648c     00 7A 0E F2 | 	cmp	result1, #0 wz
06490     DC 02 90 AD |  if_e	jmp	#LR__0519
06494     95 01 00 FF 
06498     0A 95 06 F6 | 	mov	arg02, ##@LR__5831
0649c     53 93 02 F6 | 	mov	arg01, local01
064a0     3C E5 B1 FD | 	call	#__system___string_cmp
064a4     00 7A 0E F2 | 	cmp	result1, #0 wz
064a8     CC 02 90 AD |  if_e	jmp	#LR__0520
064ac     95 01 00 FF 
064b0     12 95 06 F6 | 	mov	arg02, ##@LR__5832
064b4     53 93 02 F6 | 	mov	arg01, local01
064b8     24 E5 B1 FD | 	call	#__system___string_cmp
064bc     00 7A 0E F2 | 	cmp	result1, #0 wz
064c0     BC 02 90 AD |  if_e	jmp	#LR__0521
064c4     95 01 00 FF 
064c8     18 95 06 F6 | 	mov	arg02, ##@LR__5833
064cc     53 93 02 F6 | 	mov	arg01, local01
064d0     0C E5 B1 FD | 	call	#__system___string_cmp
064d4     00 7A 0E F2 | 	cmp	result1, #0 wz
064d8     AC 02 90 AD |  if_e	jmp	#LR__0522
064dc     95 01 00 FF 
064e0     1F 95 06 F6 | 	mov	arg02, ##@LR__5834
064e4     53 93 02 F6 | 	mov	arg01, local01
064e8     F4 E4 B1 FD | 	call	#__system___string_cmp
064ec     00 7A 0E F2 | 	cmp	result1, #0 wz
064f0     9C 02 90 AD |  if_e	jmp	#LR__0523
064f4     95 01 00 FF 
064f8     25 95 06 F6 | 	mov	arg02, ##@LR__5835
064fc     53 93 02 F6 | 	mov	arg01, local01
06500     DC E4 B1 FD | 	call	#__system___string_cmp
06504     00 7A 0E F2 | 	cmp	result1, #0 wz
06508     8C 02 90 AD |  if_e	jmp	#LR__0524
0650c     95 01 00 FF 
06510     2B 95 06 F6 | 	mov	arg02, ##@LR__5836
06514     53 93 02 F6 | 	mov	arg01, local01
06518     C4 E4 B1 FD | 	call	#__system___string_cmp
0651c     00 7A 0E F2 | 	cmp	result1, #0 wz
06520     7C 02 90 AD |  if_e	jmp	#LR__0525
06524     95 01 00 FF 
06528     2F 95 06 F6 | 	mov	arg02, ##@LR__5837
0652c     53 93 02 F6 | 	mov	arg01, local01
06530     AC E4 B1 FD | 	call	#__system___string_cmp
06534     00 7A 0E F2 | 	cmp	result1, #0 wz
06538     6C 02 90 AD |  if_e	jmp	#LR__0526
0653c     95 01 00 FF 
06540     33 95 06 F6 | 	mov	arg02, ##@LR__5838
06544     53 93 02 F6 | 	mov	arg01, local01
06548     94 E4 B1 FD | 	call	#__system___string_cmp
0654c     00 7A 0E F2 | 	cmp	result1, #0 wz
06550     5C 02 90 AD |  if_e	jmp	#LR__0527
06554     95 01 00 FF 
06558     37 95 06 F6 | 	mov	arg02, ##@LR__5839
0655c     53 93 02 F6 | 	mov	arg01, local01
06560     7C E4 B1 FD | 	call	#__system___string_cmp
06564     00 7A 0E F2 | 	cmp	result1, #0 wz
06568     4C 02 90 AD |  if_e	jmp	#LR__0528
0656c     95 01 00 FF 
06570     3D 95 06 F6 | 	mov	arg02, ##@LR__5840
06574     53 93 02 F6 | 	mov	arg01, local01
06578     64 E4 B1 FD | 	call	#__system___string_cmp
0657c     00 7A 0E F2 | 	cmp	result1, #0 wz
06580     3C 02 90 AD |  if_e	jmp	#LR__0529
06584     95 01 00 FF 
06588     43 95 06 F6 | 	mov	arg02, ##@LR__5841
0658c     53 93 02 F6 | 	mov	arg01, local01
06590     4C E4 B1 FD | 	call	#__system___string_cmp
06594     00 7A 0E F2 | 	cmp	result1, #0 wz
06598     2C 02 90 AD |  if_e	jmp	#LR__0530
0659c     95 01 00 FF 
065a0     48 95 06 F6 | 	mov	arg02, ##@LR__5842
065a4     53 93 02 F6 | 	mov	arg01, local01
065a8     34 E4 B1 FD | 	call	#__system___string_cmp
065ac     00 7A 0E F2 | 	cmp	result1, #0 wz
065b0     1C 02 90 AD |  if_e	jmp	#LR__0531
065b4     95 01 00 FF 
065b8     4C 95 06 F6 | 	mov	arg02, ##@LR__5843
065bc     53 93 02 F6 | 	mov	arg01, local01
065c0     1C E4 B1 FD | 	call	#__system___string_cmp
065c4     00 7A 0E F2 | 	cmp	result1, #0 wz
065c8     0C 02 90 AD |  if_e	jmp	#LR__0532
065cc     95 01 00 FF 
065d0     50 95 06 F6 | 	mov	arg02, ##@LR__5844
065d4     53 93 02 F6 | 	mov	arg01, local01
065d8     04 E4 B1 FD | 	call	#__system___string_cmp
065dc     00 7A 0E F2 | 	cmp	result1, #0 wz
065e0     FC 01 90 AD |  if_e	jmp	#LR__0533
065e4     00 02 90 FD | 	jmp	#LR__0534
065e8                 | LR__0470
065e8     9E 7A 06 F6 | 	mov	result1, #158
065ec     FC 01 90 FD | 	jmp	#LR__0535
065f0                 | LR__0471
065f0     85 7A 06 F6 | 	mov	result1, #133
065f4     F4 01 90 FD | 	jmp	#LR__0535
065f8                 | LR__0472
065f8     9B 7A 06 F6 | 	mov	result1, #155
065fc     EC 01 90 FD | 	jmp	#LR__0535
06600                 | LR__0473
06600     9B 7A 06 F6 | 	mov	result1, #155
06604     E4 01 90 FD | 	jmp	#LR__0535
06608                 | LR__0474
06608     A7 7A 06 F6 | 	mov	result1, #167
0660c     DC 01 90 FD | 	jmp	#LR__0535
06610                 | LR__0475
06610     84 7A 06 F6 | 	mov	result1, #132
06614     D4 01 90 FD | 	jmp	#LR__0535
06618                 | LR__0476
06618     86 7A 06 F6 | 	mov	result1, #134
0661c     CC 01 90 FD | 	jmp	#LR__0535
06620                 | LR__0477
06620     A2 7A 06 F6 | 	mov	result1, #162
06624     C4 01 90 FD | 	jmp	#LR__0535
06628                 | LR__0478
06628     9F 7A 06 F6 | 	mov	result1, #159
0662c     BC 01 90 FD | 	jmp	#LR__0535
06630                 | LR__0479
06630     C0 7A 06 F6 | 	mov	result1, #192
06634     B4 01 90 FD | 	jmp	#LR__0535
06638                 | LR__0480
06638     82 7A 06 F6 | 	mov	result1, #130
0663c     AC 01 90 FD | 	jmp	#LR__0535
06640                 | LR__0481
06640     99 7A 06 F6 | 	mov	result1, #153
06644     A4 01 90 FD | 	jmp	#LR__0535
06648                 | LR__0482
06648     D7 7A 06 F6 | 	mov	result1, #215
0664c     9C 01 90 FD | 	jmp	#LR__0535
06650                 | LR__0483
06650     D8 7A 06 F6 | 	mov	result1, #216
06654     94 01 90 FD | 	jmp	#LR__0535
06658                 | LR__0484
06658     C5 7A 06 F6 | 	mov	result1, #197
0665c     8C 01 90 FD | 	jmp	#LR__0535
06660                 | LR__0485
06660     C5 7A 06 F6 | 	mov	result1, #197
06664     84 01 90 FD | 	jmp	#LR__0535
06668                 | LR__0486
06668     9C 7A 06 F6 | 	mov	result1, #156
0666c     7C 01 90 FD | 	jmp	#LR__0535
06670                 | LR__0487
06670     D3 7A 06 F6 | 	mov	result1, #211
06674     74 01 90 FD | 	jmp	#LR__0535
06678                 | LR__0488
06678     D3 7A 06 F6 | 	mov	result1, #211
0667c     6C 01 90 FD | 	jmp	#LR__0535
06680                 | LR__0489
06680     6F 7A 06 F6 | 	mov	result1, #111
06684     64 01 90 FD | 	jmp	#LR__0535
06688                 | LR__0490
06688     6F 7A 06 F6 | 	mov	result1, #111
0668c     5C 01 90 FD | 	jmp	#LR__0535
06690                 | LR__0491
06690     93 7A 06 F6 | 	mov	result1, #147
06694     54 01 90 FD | 	jmp	#LR__0535
06698                 | LR__0492
06698     94 7A 06 F6 | 	mov	result1, #148
0669c     4C 01 90 FD | 	jmp	#LR__0535
066a0                 | LR__0493
066a0     DB 7A 06 F6 | 	mov	result1, #219
066a4     44 01 90 FD | 	jmp	#LR__0535
066a8                 | LR__0494
066a8     62 7A 06 F6 | 	mov	result1, #98
066ac     3C 01 90 FD | 	jmp	#LR__0535
066b0                 | LR__0495
066b0     62 7A 06 F6 | 	mov	result1, #98
066b4     34 01 90 FD | 	jmp	#LR__0535
066b8                 | LR__0496
066b8     A3 7A 06 F6 | 	mov	result1, #163
066bc     2C 01 90 FD | 	jmp	#LR__0535
066c0                 | LR__0497
066c0     9D 7A 06 F6 | 	mov	result1, #157
066c4     24 01 90 FD | 	jmp	#LR__0535
066c8                 | LR__0498
066c8     8A 7A 06 F6 | 	mov	result1, #138
066cc     1C 01 90 FD | 	jmp	#LR__0535
066d0                 | LR__0499
066d0     A4 7A 06 F6 | 	mov	result1, #164
066d4     14 01 90 FD | 	jmp	#LR__0535
066d8                 | LR__0500
066d8     A8 7A 06 F6 | 	mov	result1, #168
066dc     0C 01 90 FD | 	jmp	#LR__0535
066e0                 | LR__0501
066e0     AD 7A 06 F6 | 	mov	result1, #173
066e4     04 01 90 FD | 	jmp	#LR__0535
066e8                 | LR__0502
066e8     9A 7A 06 F6 | 	mov	result1, #154
066ec     FC 00 90 FD | 	jmp	#LR__0535
066f0                 | LR__0503
066f0     D1 7A 06 F6 | 	mov	result1, #209
066f4     F4 00 90 FD | 	jmp	#LR__0535
066f8                 | LR__0504
066f8     D0 7A 06 F6 | 	mov	result1, #208
066fc     EC 00 90 FD | 	jmp	#LR__0535
06700                 | LR__0505
06700     A6 7A 06 F6 | 	mov	result1, #166
06704     E4 00 90 FD | 	jmp	#LR__0535
06708                 | LR__0506
06708     66 7A 06 F6 | 	mov	result1, #102
0670c     DC 00 90 FD | 	jmp	#LR__0535
06710                 | LR__0507
06710     67 7A 06 F6 | 	mov	result1, #103
06714     D4 00 90 FD | 	jmp	#LR__0535
06718                 | LR__0508
06718     64 7A 06 F6 | 	mov	result1, #100
0671c     CC 00 90 FD | 	jmp	#LR__0535
06720                 | LR__0509
06720     65 7A 06 F6 | 	mov	result1, #101
06724     C4 00 90 FD | 	jmp	#LR__0535
06728                 | LR__0510
06728     D5 7A 06 F6 | 	mov	result1, #213
0672c     BC 00 90 FD | 	jmp	#LR__0535
06730                 | LR__0511
06730     D6 7A 06 F6 | 	mov	result1, #214
06734     B4 00 90 FD | 	jmp	#LR__0535
06738                 | LR__0512
06738     C8 7A 06 F6 | 	mov	result1, #200
0673c     AC 00 90 FD | 	jmp	#LR__0535
06740                 | LR__0513
06740     C9 7A 06 F6 | 	mov	result1, #201
06744     A4 00 90 FD | 	jmp	#LR__0535
06748                 | LR__0514
06748     CA 7A 06 F6 | 	mov	result1, #202
0674c     9C 00 90 FD | 	jmp	#LR__0535
06750                 | LR__0515
06750     CC 7A 06 F6 | 	mov	result1, #204
06754     94 00 90 FD | 	jmp	#LR__0535
06758                 | LR__0516
06758     CD 7A 06 F6 | 	mov	result1, #205
0675c     8C 00 90 FD | 	jmp	#LR__0535
06760                 | LR__0517
06760     CE 7A 06 F6 | 	mov	result1, #206
06764     84 00 90 FD | 	jmp	#LR__0535
06768                 | LR__0518
06768     CB 7A 06 F6 | 	mov	result1, #203
0676c     7C 00 90 FD | 	jmp	#LR__0535
06770                 | LR__0519
06770     98 7A 06 F6 | 	mov	result1, #152
06774     74 00 90 FD | 	jmp	#LR__0535
06778                 | LR__0520
06778     7B 7A 06 F6 | 	mov	result1, #123
0677c     6C 00 90 FD | 	jmp	#LR__0535
06780                 | LR__0521
06780     76 7A 06 F6 | 	mov	result1, #118
06784     64 00 90 FD | 	jmp	#LR__0535
06788                 | LR__0522
06788     A5 7A 06 F6 | 	mov	result1, #165
0678c     5C 00 90 FD | 	jmp	#LR__0535
06790                 | LR__0523
06790     7A 7A 06 F6 | 	mov	result1, #122
06794     54 00 90 FD | 	jmp	#LR__0535
06798                 | LR__0524
06798     BF 7A 06 F6 | 	mov	result1, #191
0679c     4C 00 90 FD | 	jmp	#LR__0535
067a0                 | LR__0525
067a0     54 7A 06 F6 | 	mov	result1, #84
067a4     44 00 90 FD | 	jmp	#LR__0535
067a8                 | LR__0526
067a8     6B 7A 06 F6 | 	mov	result1, #107
067ac     3C 00 90 FD | 	jmp	#LR__0535
067b0                 | LR__0527
067b0     87 7A 06 F6 | 	mov	result1, #135
067b4     34 00 90 FD | 	jmp	#LR__0535
067b8                 | LR__0528
067b8     6A 7A 06 F6 | 	mov	result1, #106
067bc     2C 00 90 FD | 	jmp	#LR__0535
067c0                 | LR__0529
067c0     6E 7A 06 F6 | 	mov	result1, #110
067c4     24 00 90 FD | 	jmp	#LR__0535
067c8                 | LR__0530
067c8     A1 7A 06 F6 | 	mov	result1, #161
067cc     1C 00 90 FD | 	jmp	#LR__0535
067d0                 | LR__0531
067d0     83 7A 06 F6 | 	mov	result1, #131
067d4     14 00 90 FD | 	jmp	#LR__0535
067d8                 | LR__0532
067d8     A0 7A 06 F6 | 	mov	result1, #160
067dc     0C 00 90 FD | 	jmp	#LR__0535
067e0                 | LR__0533
067e0     9B 7A 06 F6 | 	mov	result1, #155
067e4     04 00 90 FD | 	jmp	#LR__0535
067e8                 | LR__0534
067e8     00 7A 06 F6 | 	mov	result1, #0
067ec                 | LR__0535
067ec     E7 F0 03 F6 | 	mov	ptra, fp
067f0     F2 00 A0 FD | 	call	#popregs_
067f4                 | _isfunction_ret
067f4     2D 00 64 FD | 	ret
067f8                 | 
067f8                 | ' 
067f8                 | ' ' Check if the part is a name
067f8                 | ' 
067f8                 | ' function isname(s as string) as boolean
067f8                 | _isname
067f8     0D CA 05 F6 | 	mov	COUNT_, #13
067fc     E8 00 A0 FD | 	call	#pushregs_
06800     49 A7 02 F6 | 	mov	local01, arg01
06804     49 A9 02 F6 | 	mov	local02, arg01
06808     D7 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
0680c                 | LR__0540
0680c     54 7B CA FA | 	rdbyte	result1, local02 wz
06810     01 A8 06 51 |  if_ne	add	local02, #1
06814     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06818                 | LR__0541
06818     49 A9 82 F1 | 	sub	local02, arg01
0681c     54 7B 02 F6 | 	mov	result1, local02
06820     3D AB 0A F6 | 	mov	local03, result1 wz
06824     00 7A 06 A6 |  if_e	mov	result1, #0
06828     34 02 90 AD |  if_e	jmp	#LR__0553
0682c     53 93 02 F6 | 	mov	arg01, local01
06830     01 94 06 F6 | 	mov	arg02, #1
06834     01 96 06 F6 | 	mov	arg03, #1
06838     3C FB B1 FD | 	call	#__system__Mid_S
0683c     3D AD 02 F6 | 	mov	local04, result1
06840                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
06840     95 01 00 FF 
06844     57 95 06 F6 | 	mov	arg02, ##@LR__5845
06848     56 93 02 F6 | 	mov	arg01, local04
0684c     90 E1 B1 FD | 	call	#__system___string_cmp
06850     00 7A 56 F2 | 	cmps	result1, #0 wc
06854     18 00 90 CD |  if_b	jmp	#LR__0542
06858     95 01 00 FF 
0685c     59 95 06 F6 | 	mov	arg02, ##@LR__5846
06860     56 93 02 F6 | 	mov	arg01, local04
06864     78 E1 B1 FD | 	call	#__system___string_cmp
06868     01 7A 56 F2 | 	cmps	result1, #1 wc
0686c     1C 00 90 CD |  if_b	jmp	#LR__0543
06870                 | LR__0542
06870     95 01 00 FF 
06874     5B 95 06 F6 | 	mov	arg02, ##@LR__5847
06878     56 93 02 F6 | 	mov	arg01, local04
0687c     60 E1 B1 FD | 	call	#__system___string_cmp
06880     00 7A 0E F2 | 	cmp	result1, #0 wz
06884     00 7A 06 56 |  if_ne	mov	result1, #0
06888     D4 01 90 5D |  if_ne	jmp	#LR__0553
0688c                 | LR__0543
0688c                 | ' if l>2 then 
0688c     03 AA 56 F2 | 	cmps	local03, #3 wc
06890     C8 01 90 CD |  if_b	jmp	#LR__0552
06894                 | '   for i=2 to l
06894     02 AE 06 F6 | 	mov	local05, #2
06898     55 B1 02 F6 | 	mov	local06, local03
0689c     01 B0 06 F1 | 	add	local06, #1
068a0                 | LR__0544
068a0     58 AF 52 F2 | 	cmps	local05, local06 wc
068a4     B4 01 90 3D |  if_ae	jmp	#LR__0551
068a8     53 93 02 F6 | 	mov	arg01, local01
068ac     57 95 02 F6 | 	mov	arg02, local05
068b0     01 96 06 F6 | 	mov	arg03, #1
068b4     C0 FA B1 FD | 	call	#__system__Mid_S
068b8     3D AD 02 F6 | 	mov	local04, result1
068bc                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
068bc     55 AF 52 F2 | 	cmps	local05, local03 wc
068c0     9C 00 90 3D |  if_ae	jmp	#LR__0547
068c4     95 01 00 FF 
068c8     5D 95 06 F6 | 	mov	arg02, ##@LR__5848
068cc     56 93 02 F6 | 	mov	arg01, local04
068d0     0C E1 B1 FD | 	call	#__system___string_cmp
068d4     00 7A 56 F2 | 	cmps	result1, #0 wc
068d8     18 00 90 CD |  if_b	jmp	#LR__0545
068dc     95 01 00 FF 
068e0     5F 95 06 F6 | 	mov	arg02, ##@LR__5849
068e4     56 93 02 F6 | 	mov	arg01, local04
068e8     F4 E0 B1 FD | 	call	#__system___string_cmp
068ec     01 7A 56 F2 | 	cmps	result1, #1 wc
068f0     6C 00 90 CD |  if_b	jmp	#LR__0547
068f4                 | LR__0545
068f4     95 01 00 FF 
068f8     61 95 06 F6 | 	mov	arg02, ##@LR__5850
068fc     56 93 02 F6 | 	mov	arg01, local04
06900     DC E0 B1 FD | 	call	#__system___string_cmp
06904     00 7A 56 F2 | 	cmps	result1, #0 wc
06908     18 00 90 CD |  if_b	jmp	#LR__0546
0690c     95 01 00 FF 
06910     63 95 06 F6 | 	mov	arg02, ##@LR__5851
06914     56 93 02 F6 | 	mov	arg01, local04
06918     C4 E0 B1 FD | 	call	#__system___string_cmp
0691c     01 7A 56 F2 | 	cmps	result1, #1 wc
06920     3C 00 90 CD |  if_b	jmp	#LR__0547
06924                 | LR__0546
06924     95 01 00 FF 
06928     65 B3 06 F6 | 	mov	local07, ##@LR__5852
0692c     56 93 02 F6 | 	mov	arg01, local04
06930     59 95 02 F6 | 	mov	arg02, local07
06934     A8 E0 B1 FD | 	call	#__system___string_cmp
06938     00 7A 0E F2 | 	cmp	result1, #0 wz
0693c     20 00 90 AD |  if_e	jmp	#LR__0547
06940     95 01 00 FF 
06944     67 B5 06 F6 | 	mov	local08, ##@LR__5853
06948     56 93 02 F6 | 	mov	arg01, local04
0694c     5A 95 02 F6 | 	mov	arg02, local08
06950     8C E0 B1 FD | 	call	#__system___string_cmp
06954     3D B7 0A F6 | 	mov	local09, result1 wz
06958     00 7A 06 56 |  if_ne	mov	result1, #0
0695c     00 01 90 5D |  if_ne	jmp	#LR__0553
06960                 | LR__0547
06960                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06960     55 AF 0A F2 | 	cmp	local05, local03 wz
06964     EC 00 90 5D |  if_ne	jmp	#LR__0550
06968     95 01 00 FF 
0696c     69 B9 06 F6 | 	mov	local10, ##@LR__5854
06970     56 93 02 F6 | 	mov	arg01, local04
06974     5C 95 02 F6 | 	mov	arg02, local10
06978     64 E0 B1 FD | 	call	#__system___string_cmp
0697c     3D BB 02 F6 | 	mov	local11, result1
06980     00 BA 56 F2 | 	cmps	local11, #0 wc
06984     1C 00 90 CD |  if_b	jmp	#LR__0548
06988     95 01 00 FF 
0698c     6B 95 06 F6 | 	mov	arg02, ##@LR__5855
06990     56 93 02 F6 | 	mov	arg01, local04
06994     48 E0 B1 FD | 	call	#__system___string_cmp
06998     3D B9 02 F6 | 	mov	local10, result1
0699c     01 B8 56 F2 | 	cmps	local10, #1 wc
069a0     B0 00 90 CD |  if_b	jmp	#LR__0550
069a4                 | LR__0548
069a4     95 01 00 FF 
069a8     6D 95 06 F6 | 	mov	arg02, ##@LR__5856
069ac     56 93 02 F6 | 	mov	arg01, local04
069b0     2C E0 B1 FD | 	call	#__system___string_cmp
069b4     00 7A 56 F2 | 	cmps	result1, #0 wc
069b8     1C 00 90 CD |  if_b	jmp	#LR__0549
069bc     95 01 00 FF 
069c0     6F B7 06 F6 | 	mov	local09, ##@LR__5857
069c4     56 93 02 F6 | 	mov	arg01, local04
069c8     5B 95 02 F6 | 	mov	arg02, local09
069cc     10 E0 B1 FD | 	call	#__system___string_cmp
069d0     01 7A 56 F2 | 	cmps	result1, #1 wc
069d4     7C 00 90 CD |  if_b	jmp	#LR__0550
069d8                 | LR__0549
069d8     95 01 00 FF 
069dc     71 B7 06 F6 | 	mov	local09, ##@LR__5858
069e0     56 93 02 F6 | 	mov	arg01, local04
069e4     5B 95 02 F6 | 	mov	arg02, local09
069e8     F4 DF B1 FD | 	call	#__system___string_cmp
069ec     00 7A 4E F2 | 	cmps	result1, #0 wz
069f0     60 00 90 AD |  if_e	jmp	#LR__0550
069f4     95 01 00 FF 
069f8     73 B5 06 F6 | 	mov	local08, ##@LR__5859
069fc     56 93 02 F6 | 	mov	arg01, local04
06a00     5A 95 02 F6 | 	mov	arg02, local08
06a04     D8 DF B1 FD | 	call	#__system___string_cmp
06a08     3D B7 0A F6 | 	mov	local09, result1 wz
06a0c     44 00 90 AD |  if_e	jmp	#LR__0550
06a10     95 01 00 FF 
06a14     75 BD 06 F6 | 	mov	local12, ##@LR__5860
06a18     5E B5 02 F6 | 	mov	local08, local12
06a1c     56 93 02 F6 | 	mov	arg01, local04
06a20     5A 95 02 F6 | 	mov	arg02, local08
06a24     B8 DF B1 FD | 	call	#__system___string_cmp
06a28     3D B3 0A F6 | 	mov	local07, result1 wz
06a2c     24 00 90 AD |  if_e	jmp	#LR__0550
06a30     95 01 00 FF 
06a34     77 BF 06 F6 | 	mov	local13, ##@LR__5861
06a38     5F BD 02 F6 | 	mov	local12, local13
06a3c     56 93 02 F6 | 	mov	arg01, local04
06a40     5E 95 02 F6 | 	mov	arg02, local12
06a44     98 DF B1 FD | 	call	#__system___string_cmp
06a48     3D B5 0A F6 | 	mov	local08, result1 wz
06a4c     00 7A 06 56 |  if_ne	mov	result1, #0
06a50     0C 00 90 5D |  if_ne	jmp	#LR__0553
06a54                 | LR__0550
06a54     01 AE 06 F1 | 	add	local05, #1
06a58     44 FE 9F FD | 	jmp	#LR__0544
06a5c                 | LR__0551
06a5c                 | LR__0552
06a5c                 | ' return true
06a5c     01 7A 66 F6 | 	neg	result1, #1
06a60                 | LR__0553
06a60     E7 F0 03 F6 | 	mov	ptra, fp
06a64     F2 00 A0 FD | 	call	#popregs_
06a68                 | _isname_ret
06a68     2D 00 64 FD | 	ret
06a6c                 | 
06a6c                 | ' 
06a6c                 | ' ' Check if the part is a number.  
06a6c                 | ' 
06a6c                 | ' function isnum(s as string) as boolean 
06a6c                 | _isnum
06a6c     13 CA 05 F6 | 	mov	COUNT_, #19
06a70     E8 00 A0 FD | 	call	#pushregs_
06a74     49 A7 02 F6 | 	mov	local01, arg01
06a78     00 A8 06 F6 | 	mov	local02, #0
06a7c     00 AA 06 F6 | 	mov	local03, #0
06a80     53 93 02 F6 | 	mov	arg01, local01
06a84     49 AD 02 F6 | 	mov	local04, arg01
06a88     D7 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
06a8c                 | LR__0560
06a8c     56 7B CA FA | 	rdbyte	result1, local04 wz
06a90     01 AC 06 51 |  if_ne	add	local04, #1
06a94     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
06a98                 | LR__0561
06a98     49 AD 82 F1 | 	sub	local04, arg01
06a9c     56 7B 02 F6 | 	mov	result1, local04
06aa0     3D AF 0A F6 | 	mov	local05, result1 wz
06aa4     00 7A 06 A6 |  if_e	mov	result1, #0
06aa8     A0 03 90 AD |  if_e	jmp	#LR__0576
06aac     53 93 02 F6 | 	mov	arg01, local01
06ab0     01 94 06 F6 | 	mov	arg02, #1
06ab4     01 96 06 F6 | 	mov	arg03, #1
06ab8     BC F8 B1 FD | 	call	#__system__Mid_S
06abc     3D B1 02 F6 | 	mov	local06, result1
06ac0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06ac0     95 01 00 FF 
06ac4     79 95 06 F6 | 	mov	arg02, ##@LR__5862
06ac8     58 93 02 F6 | 	mov	arg01, local06
06acc     10 DF B1 FD | 	call	#__system___string_cmp
06ad0     00 7A 56 F2 | 	cmps	result1, #0 wc
06ad4     1C 00 90 CD |  if_b	jmp	#LR__0562
06ad8     95 01 00 FF 
06adc     7B B3 06 F6 | 	mov	local07, ##@LR__5863
06ae0     58 93 02 F6 | 	mov	arg01, local06
06ae4     59 95 02 F6 | 	mov	arg02, local07
06ae8     F4 DE B1 FD | 	call	#__system___string_cmp
06aec     01 7A 56 F2 | 	cmps	result1, #1 wc
06af0     84 00 90 CD |  if_b	jmp	#LR__0563
06af4                 | LR__0562
06af4     95 01 00 FF 
06af8     7D B5 06 F6 | 	mov	local08, ##@LR__5864
06afc     5A B3 02 F6 | 	mov	local07, local08
06b00     58 93 02 F6 | 	mov	arg01, local06
06b04     59 95 02 F6 | 	mov	arg02, local07
06b08     D4 DE B1 FD | 	call	#__system___string_cmp
06b0c     00 7A 0E F2 | 	cmp	result1, #0 wz
06b10     64 00 90 AD |  if_e	jmp	#LR__0563
06b14     95 01 00 FF 
06b18     7F B7 06 F6 | 	mov	local09, ##@LR__5865
06b1c     5B B5 02 F6 | 	mov	local08, local09
06b20     58 93 02 F6 | 	mov	arg01, local06
06b24     5A 95 02 F6 | 	mov	arg02, local08
06b28     B4 DE B1 FD | 	call	#__system___string_cmp
06b2c     3D B3 0A F6 | 	mov	local07, result1 wz
06b30     44 00 90 AD |  if_e	jmp	#LR__0563
06b34     95 01 00 FF 
06b38     81 B9 06 F6 | 	mov	local10, ##@LR__5866
06b3c     5C B7 02 F6 | 	mov	local09, local10
06b40     58 93 02 F6 | 	mov	arg01, local06
06b44     5B 95 02 F6 | 	mov	arg02, local09
06b48     94 DE B1 FD | 	call	#__system___string_cmp
06b4c     3D B5 0A F6 | 	mov	local08, result1 wz
06b50     24 00 90 AD |  if_e	jmp	#LR__0563
06b54     95 01 00 FF 
06b58     83 BB 06 F6 | 	mov	local11, ##@LR__5867
06b5c     5D B9 02 F6 | 	mov	local10, local11
06b60     58 93 02 F6 | 	mov	arg01, local06
06b64     5C 95 02 F6 | 	mov	arg02, local10
06b68     74 DE B1 FD | 	call	#__system___string_cmp
06b6c     3D B7 0A F6 | 	mov	local09, result1 wz
06b70     00 7A 06 56 |  if_ne	mov	result1, #0
06b74     D4 02 90 5D |  if_ne	jmp	#LR__0576
06b78                 | LR__0563
06b78                 | ' if m$="." then ds=1
06b78     95 01 00 FF 
06b7c     85 95 06 F6 | 	mov	arg02, ##@LR__5868
06b80     58 93 02 F6 | 	mov	arg01, local06
06b84     58 DE B1 FD | 	call	#__system___string_cmp
06b88     00 7A 0E F2 | 	cmp	result1, #0 wz
06b8c     01 A8 06 A6 |  if_e	mov	local02, #1
06b90                 | ' if m$="$" then hex=1 else hex=0
06b90     95 01 00 FF 
06b94     87 95 06 F6 | 	mov	arg02, ##@LR__5869
06b98     58 93 02 F6 | 	mov	arg01, local06
06b9c     40 DE B1 FD | 	call	#__system___string_cmp
06ba0     00 7A 0E F2 | 	cmp	result1, #0 wz
06ba4     01 BC 06 A6 |  if_e	mov	local12, #1
06ba8     00 BC 06 56 |  if_ne	mov	local12, #0
06bac                 | ' if m$="%" then bin=1 else bin=0
06bac     95 01 00 FF 
06bb0     89 95 06 F6 | 	mov	arg02, ##@LR__5870
06bb4     58 93 02 F6 | 	mov	arg01, local06
06bb8     24 DE B1 FD | 	call	#__system___string_cmp
06bbc     00 7A 0E F2 | 	cmp	result1, #0 wz
06bc0     01 BE 06 A6 |  if_e	mov	local13, #1
06bc4     00 BE 06 56 |  if_ne	mov	local13, #0
06bc8                 | ' if l>1 then 
06bc8     02 AE 56 F2 | 	cmps	local05, #2 wc
06bcc     78 02 90 CD |  if_b	jmp	#LR__0575
06bd0                 | '   for i=2 to l
06bd0     02 C0 06 F6 | 	mov	local14, #2
06bd4     57 C3 02 F6 | 	mov	local15, local05
06bd8     01 C2 06 F1 | 	add	local15, #1
06bdc                 | LR__0564
06bdc     61 C1 52 F2 | 	cmps	local14, local15 wc
06be0     64 02 90 3D |  if_ae	jmp	#LR__0574
06be4     53 93 02 F6 | 	mov	arg01, local01
06be8     60 95 02 F6 | 	mov	arg02, local14
06bec     01 96 06 F6 | 	mov	arg03, #1
06bf0     84 F7 B1 FD | 	call	#__system__Mid_S
06bf4     3D B1 02 F6 | 	mov	local06, result1
06bf8     00 C4 06 F6 | 	mov	local16, #0
06bfc                 | '     m$=mid$(s,i,1) : b=false
06bfc                 | '     if m$>="0" andalso m$<="9" then b=true  
06bfc     95 01 00 FF 
06c00     8B 95 06 F6 | 	mov	arg02, ##@LR__5871
06c04     58 93 02 F6 | 	mov	arg01, local06
06c08     D4 DD B1 FD | 	call	#__system___string_cmp
06c0c     00 7A 56 F2 | 	cmps	result1, #0 wc
06c10     1C 00 90 CD |  if_b	jmp	#LR__0565
06c14     95 01 00 FF 
06c18     8D B3 06 F6 | 	mov	local07, ##@LR__5872
06c1c     58 93 02 F6 | 	mov	arg01, local06
06c20     59 95 02 F6 | 	mov	arg02, local07
06c24     B8 DD B1 FD | 	call	#__system___string_cmp
06c28     01 7A 56 F2 | 	cmps	result1, #1 wc
06c2c     01 C4 66 C6 |  if_b	neg	local16, #1
06c30                 | LR__0565
06c30                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06c30     95 01 00 FF 
06c34     8F 95 06 F6 | 	mov	arg02, ##@LR__5873
06c38     58 93 02 F6 | 	mov	arg01, local06
06c3c     A0 DD B1 FD | 	call	#__system___string_cmp
06c40     00 7A 0E F2 | 	cmp	result1, #0 wz
06c44     7C 00 90 AD |  if_e	jmp	#LR__0566
06c48     95 01 00 FF 
06c4c     91 B3 06 F6 | 	mov	local07, ##@LR__5874
06c50     58 93 02 F6 | 	mov	arg01, local06
06c54     59 95 02 F6 | 	mov	arg02, local07
06c58     84 DD B1 FD | 	call	#__system___string_cmp
06c5c     00 7A 0E F2 | 	cmp	result1, #0 wz
06c60     60 00 90 AD |  if_e	jmp	#LR__0566
06c64     95 01 00 FF 
06c68     93 B5 06 F6 | 	mov	local08, ##@LR__5875
06c6c     5A B3 02 F6 | 	mov	local07, local08
06c70     58 93 02 F6 | 	mov	arg01, local06
06c74     59 95 02 F6 | 	mov	arg02, local07
06c78     64 DD B1 FD | 	call	#__system___string_cmp
06c7c     00 7A 0E F2 | 	cmp	result1, #0 wz
06c80     40 00 90 AD |  if_e	jmp	#LR__0566
06c84     95 01 00 FF 
06c88     95 B7 06 F6 | 	mov	local09, ##@LR__5876
06c8c     5B B5 02 F6 | 	mov	local08, local09
06c90     58 93 02 F6 | 	mov	arg01, local06
06c94     5A 95 02 F6 | 	mov	arg02, local08
06c98     44 DD B1 FD | 	call	#__system___string_cmp
06c9c     3D B3 0A F6 | 	mov	local07, result1 wz
06ca0     20 00 90 AD |  if_e	jmp	#LR__0566
06ca4     95 01 00 FF 
06ca8     97 B9 06 F6 | 	mov	local10, ##@LR__5877
06cac     5C B7 02 F6 | 	mov	local09, local10
06cb0     58 93 02 F6 | 	mov	arg01, local06
06cb4     5B 95 02 F6 | 	mov	arg02, local09
06cb8     24 DD B1 FD | 	call	#__system___string_cmp
06cbc     3D B5 0A F6 | 	mov	local08, result1 wz
06cc0     04 00 90 5D |  if_ne	jmp	#LR__0567
06cc4                 | LR__0566
06cc4     01 C4 66 F6 | 	neg	local16, #1
06cc8                 | LR__0567
06cc8                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06cc8     01 BC 0E F2 | 	cmp	local12, #1 wz
06ccc     34 00 90 5D |  if_ne	jmp	#LR__0568
06cd0     95 01 00 FF 
06cd4     99 95 06 F6 | 	mov	arg02, ##@LR__5878
06cd8     58 93 02 F6 | 	mov	arg01, local06
06cdc     00 DD B1 FD | 	call	#__system___string_cmp
06ce0     00 7A 56 F2 | 	cmps	result1, #0 wc
06ce4     1C 00 90 CD |  if_b	jmp	#LR__0568
06ce8     95 01 00 FF 
06cec     9B B3 06 F6 | 	mov	local07, ##@LR__5879
06cf0     58 93 02 F6 | 	mov	arg01, local06
06cf4     59 95 02 F6 | 	mov	arg02, local07
06cf8     E4 DC B1 FD | 	call	#__system___string_cmp
06cfc     01 7A 56 F2 | 	cmps	result1, #1 wc
06d00     01 C4 66 C6 |  if_b	neg	local16, #1
06d04                 | LR__0568
06d04                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06d04     01 BE 0E F2 | 	cmp	local13, #1 wz
06d08     58 00 90 5D |  if_ne	jmp	#LR__0570
06d0c     95 01 00 FF 
06d10     9D 95 06 F6 | 	mov	arg02, ##@LR__5880
06d14     58 93 02 F6 | 	mov	arg01, local06
06d18     C4 DC B1 FD | 	call	#__system___string_cmp
06d1c     00 7A 56 F2 | 	cmps	result1, #0 wc
06d20     1C 00 90 CD |  if_b	jmp	#LR__0569
06d24     95 01 00 FF 
06d28     9F B3 06 F6 | 	mov	local07, ##@LR__5881
06d2c     58 93 02 F6 | 	mov	arg01, local06
06d30     59 95 02 F6 | 	mov	arg02, local07
06d34     A8 DC B1 FD | 	call	#__system___string_cmp
06d38     01 7A 56 F2 | 	cmps	result1, #1 wc
06d3c     24 00 90 CD |  if_b	jmp	#LR__0570
06d40                 | LR__0569
06d40     95 01 00 FF 
06d44     A1 B5 06 F6 | 	mov	local08, ##@LR__5882
06d48     5A B3 02 F6 | 	mov	local07, local08
06d4c     58 93 02 F6 | 	mov	arg01, local06
06d50     59 95 02 F6 | 	mov	arg02, local07
06d54     88 DC B1 FD | 	call	#__system___string_cmp
06d58     00 7A 0E F2 | 	cmp	result1, #0 wz
06d5c     00 7A 06 56 |  if_ne	mov	result1, #0
06d60     E8 00 90 5D |  if_ne	jmp	#LR__0576
06d64                 | LR__0570
06d64                 | '     if not b then return false
06d64     62 C5 22 F6 | 	not	local16, local16
06d68     00 C4 0E F2 | 	cmp	local16, #0 wz
06d6c     00 7A 06 56 |  if_ne	mov	result1, #0
06d70     D8 00 90 5D |  if_ne	jmp	#LR__0576
06d74                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06d74     95 01 00 FF 
06d78     A3 95 06 F6 | 	mov	arg02, ##@LR__5883
06d7c     58 93 02 F6 | 	mov	arg01, local06
06d80     5C DC B1 FD | 	call	#__system___string_cmp
06d84     00 7A 0E F2 | 	cmp	result1, #0 wz
06d88     3C 00 90 5D |  if_ne	jmp	#LR__0571
06d8c     60 95 02 F6 | 	mov	arg02, local14
06d90     01 94 86 F1 | 	sub	arg02, #1
06d94     53 93 02 F6 | 	mov	arg01, local01
06d98     01 96 06 F6 | 	mov	arg03, #1
06d9c     D8 F5 B1 FD | 	call	#__system__Mid_S
06da0     3D 93 02 F6 | 	mov	arg01, result1
06da4     C8 F7 B1 FD | 	call	#__system__LCase_S
06da8     3D 93 02 F6 | 	mov	arg01, result1
06dac     95 01 00 FF 
06db0     A5 B3 06 F6 | 	mov	local07, ##@LR__5884
06db4     59 95 02 F6 | 	mov	arg02, local07
06db8     24 DC B1 FD | 	call	#__system___string_cmp
06dbc     00 7A 0E F2 | 	cmp	result1, #0 wz
06dc0     00 7A 06 56 |  if_ne	mov	result1, #0
06dc4     84 00 90 5D |  if_ne	jmp	#LR__0576
06dc8                 | LR__0571
06dc8                 | '     if m$="." then ds+=1: if ds>1 then return false
06dc8     95 01 00 FF 
06dcc     A7 95 06 F6 | 	mov	arg02, ##@LR__5885
06dd0     58 93 02 F6 | 	mov	arg01, local06
06dd4     08 DC B1 FD | 	call	#__system___string_cmp
06dd8     00 7A 0E F2 | 	cmp	result1, #0 wz
06ddc     01 A8 06 A1 |  if_e	add	local02, #1
06de0     02 A8 56 A2 |  if_e	cmps	local02, #2 wc
06de4     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
06de8     60 00 90 2D |  if_nc_and_z	jmp	#LR__0576
06dec                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06dec     95 01 00 FF 
06df0     A9 C7 06 F6 | 	mov	local17, ##@LR__5886
06df4     63 C9 02 F6 | 	mov	local18, local17
06df8     58 93 02 F6 | 	mov	arg01, local06
06dfc     64 95 02 F6 | 	mov	arg02, local18
06e00     DC DB B1 FD | 	call	#__system___string_cmp
06e04     3D CB 0A F6 | 	mov	local19, result1 wz
06e08     20 00 90 AD |  if_e	jmp	#LR__0572
06e0c     95 01 00 FF 
06e10     AB B3 06 F6 | 	mov	local07, ##@LR__5887
06e14     59 C7 02 F6 | 	mov	local17, local07
06e18     58 93 02 F6 | 	mov	arg01, local06
06e1c     63 95 02 F6 | 	mov	arg02, local17
06e20     BC DB B1 FD | 	call	#__system___string_cmp
06e24     3D C9 0A F6 | 	mov	local18, result1 wz
06e28     14 00 90 5D |  if_ne	jmp	#LR__0573
06e2c                 | LR__0572
06e2c     01 AA 06 F1 | 	add	local03, #1
06e30     00 BC 0E F2 | 	cmp	local12, #0 wz
06e34     02 AA 56 A2 |  if_e	cmps	local03, #2 wc
06e38     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
06e3c     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0576
06e40                 | LR__0573
06e40     01 C0 06 F1 | 	add	local14, #1
06e44     94 FD 9F FD | 	jmp	#LR__0564
06e48                 | LR__0574
06e48                 | LR__0575
06e48                 | ' return true
06e48     01 7A 66 F6 | 	neg	result1, #1
06e4c                 | LR__0576
06e4c     E7 F0 03 F6 | 	mov	ptra, fp
06e50     F2 00 A0 FD | 	call	#popregs_
06e54                 | _isnum_ret
06e54     2D 00 64 FD | 	ret
06e58                 | 
06e58                 | '   
06e58                 | ' ' Check if the part is an integer number.    
06e58                 | '   
06e58                 | ' function isint(s as string) as boolean
06e58                 | _isint
06e58     0E CA 05 F6 | 	mov	COUNT_, #14
06e5c     E8 00 A0 FD | 	call	#pushregs_
06e60     49 A7 02 F6 | 	mov	local01, arg01
06e64     49 A9 02 F6 | 	mov	local02, arg01
06e68     D7 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06e6c                 | LR__0580
06e6c     54 7B CA FA | 	rdbyte	result1, local02 wz
06e70     01 A8 06 51 |  if_ne	add	local02, #1
06e74     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06e78                 | LR__0581
06e78     49 A9 82 F1 | 	sub	local02, arg01
06e7c     54 7B 02 F6 | 	mov	result1, local02
06e80     3D AB 0A F6 | 	mov	local03, result1 wz
06e84     00 7A 06 A6 |  if_e	mov	result1, #0
06e88     64 02 90 AD |  if_e	jmp	#LR__0594
06e8c     53 93 02 F6 | 	mov	arg01, local01
06e90     01 94 06 F6 | 	mov	arg02, #1
06e94     01 96 06 F6 | 	mov	arg03, #1
06e98     DC F4 B1 FD | 	call	#__system__Mid_S
06e9c     3D AD 02 F6 | 	mov	local04, result1
06ea0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06ea0     95 01 00 FF 
06ea4     AD 95 06 F6 | 	mov	arg02, ##@LR__5888
06ea8     56 93 02 F6 | 	mov	arg01, local04
06eac     30 DB B1 FD | 	call	#__system___string_cmp
06eb0     00 7A 56 F2 | 	cmps	result1, #0 wc
06eb4     1C 00 90 CD |  if_b	jmp	#LR__0582
06eb8     95 01 00 FF 
06ebc     AF AF 06 F6 | 	mov	local05, ##@LR__5889
06ec0     56 93 02 F6 | 	mov	arg01, local04
06ec4     57 95 02 F6 | 	mov	arg02, local05
06ec8     14 DB B1 FD | 	call	#__system___string_cmp
06ecc     01 7A 56 F2 | 	cmps	result1, #1 wc
06ed0     64 00 90 CD |  if_b	jmp	#LR__0583
06ed4                 | LR__0582
06ed4     95 01 00 FF 
06ed8     B1 B1 06 F6 | 	mov	local06, ##@LR__5890
06edc     58 AF 02 F6 | 	mov	local05, local06
06ee0     56 93 02 F6 | 	mov	arg01, local04
06ee4     57 95 02 F6 | 	mov	arg02, local05
06ee8     F4 DA B1 FD | 	call	#__system___string_cmp
06eec     00 7A 0E F2 | 	cmp	result1, #0 wz
06ef0     44 00 90 AD |  if_e	jmp	#LR__0583
06ef4     95 01 00 FF 
06ef8     B3 B3 06 F6 | 	mov	local07, ##@LR__5891
06efc     59 B1 02 F6 | 	mov	local06, local07
06f00     56 93 02 F6 | 	mov	arg01, local04
06f04     58 95 02 F6 | 	mov	arg02, local06
06f08     D4 DA B1 FD | 	call	#__system___string_cmp
06f0c     3D AF 0A F6 | 	mov	local05, result1 wz
06f10     24 00 90 AD |  if_e	jmp	#LR__0583
06f14     95 01 00 FF 
06f18     B5 B5 06 F6 | 	mov	local08, ##@LR__5892
06f1c     5A B3 02 F6 | 	mov	local07, local08
06f20     56 93 02 F6 | 	mov	arg01, local04
06f24     59 95 02 F6 | 	mov	arg02, local07
06f28     B4 DA B1 FD | 	call	#__system___string_cmp
06f2c     3D B1 0A F6 | 	mov	local06, result1 wz
06f30     00 7A 06 56 |  if_ne	mov	result1, #0
06f34     B8 01 90 5D |  if_ne	jmp	#LR__0594
06f38                 | LR__0583
06f38                 | ' if m$="$" then hex=1 else hex=0
06f38     95 01 00 FF 
06f3c     B7 95 06 F6 | 	mov	arg02, ##@LR__5893
06f40     56 93 02 F6 | 	mov	arg01, local04
06f44     98 DA B1 FD | 	call	#__system___string_cmp
06f48     00 7A 0E F2 | 	cmp	result1, #0 wz
06f4c     01 B6 06 A6 |  if_e	mov	local09, #1
06f50     00 B6 06 56 |  if_ne	mov	local09, #0
06f54                 | ' if m$="%" then bin=1 else bin=0
06f54     95 01 00 FF 
06f58     B9 95 06 F6 | 	mov	arg02, ##@LR__5894
06f5c     56 93 02 F6 | 	mov	arg01, local04
06f60     7C DA B1 FD | 	call	#__system___string_cmp
06f64     00 7A 0E F2 | 	cmp	result1, #0 wz
06f68     01 B8 06 A6 |  if_e	mov	local10, #1
06f6c     00 B8 06 56 |  if_ne	mov	local10, #0
06f70                 | ' if l>1 then 
06f70     02 AA 56 F2 | 	cmps	local03, #2 wc
06f74     74 01 90 CD |  if_b	jmp	#LR__0593
06f78                 | '   for i=2 to l
06f78     02 BA 06 F6 | 	mov	local11, #2
06f7c     55 BD 02 F6 | 	mov	local12, local03
06f80     01 BC 06 F1 | 	add	local12, #1
06f84                 | LR__0584
06f84     5E BB 52 F2 | 	cmps	local11, local12 wc
06f88     60 01 90 3D |  if_ae	jmp	#LR__0592
06f8c     53 93 02 F6 | 	mov	arg01, local01
06f90     5D 95 02 F6 | 	mov	arg02, local11
06f94     01 96 06 F6 | 	mov	arg03, #1
06f98     DC F3 B1 FD | 	call	#__system__Mid_S
06f9c     3D AD 02 F6 | 	mov	local04, result1
06fa0                 | '     m$=mid$(s,i,1) 
06fa0                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06fa0     00 B6 0E F2 | 	cmp	local09, #0 wz
06fa4     50 00 90 5D |  if_ne	jmp	#LR__0586
06fa8     95 01 00 FF 
06fac     BB 95 06 F6 | 	mov	arg02, ##@LR__5895
06fb0     56 93 02 F6 | 	mov	arg01, local04
06fb4     28 DA B1 FD | 	call	#__system___string_cmp
06fb8     00 7A 56 F2 | 	cmps	result1, #0 wc
06fbc     18 00 90 CD |  if_b	jmp	#LR__0585
06fc0     95 01 00 FF 
06fc4     BD 95 06 F6 | 	mov	arg02, ##@LR__5896
06fc8     56 93 02 F6 | 	mov	arg01, local04
06fcc     10 DA B1 FD | 	call	#__system___string_cmp
06fd0     01 7A 56 F2 | 	cmps	result1, #1 wc
06fd4     20 00 90 CD |  if_b	jmp	#LR__0586
06fd8                 | LR__0585
06fd8     95 01 00 FF 
06fdc     BF B1 06 F6 | 	mov	local06, ##@LR__5897
06fe0     56 93 02 F6 | 	mov	arg01, local04
06fe4     58 95 02 F6 | 	mov	arg02, local06
06fe8     F4 D9 B1 FD | 	call	#__system___string_cmp
06fec     00 7A 0E F2 | 	cmp	result1, #0 wz
06ff0     00 7A 06 56 |  if_ne	mov	result1, #0
06ff4     F8 00 90 5D |  if_ne	jmp	#LR__0594
06ff8                 | LR__0586
06ff8                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06ff8     01 B6 0E F2 | 	cmp	local09, #1 wz
06ffc     90 00 90 5D |  if_ne	jmp	#LR__0589
07000     95 01 00 FF 
07004     C1 95 06 F6 | 	mov	arg02, ##@LR__5898
07008     56 93 02 F6 | 	mov	arg01, local04
0700c     D0 D9 B1 FD | 	call	#__system___string_cmp
07010     00 7A 56 F2 | 	cmps	result1, #0 wc
07014     1C 00 90 CD |  if_b	jmp	#LR__0587
07018     95 01 00 FF 
0701c     C3 95 06 F6 | 	mov	arg02, ##@LR__5899
07020     56 93 02 F6 | 	mov	arg01, local04
07024     B8 D9 B1 FD | 	call	#__system___string_cmp
07028     3D BF 02 F6 | 	mov	local13, result1
0702c     01 BE 56 F2 | 	cmps	local13, #1 wc
07030     5C 00 90 CD |  if_b	jmp	#LR__0589
07034                 | LR__0587
07034     95 01 00 FF 
07038     C5 AF 06 F6 | 	mov	local05, ##@LR__5900
0703c     56 93 02 F6 | 	mov	arg01, local04
07040     57 95 02 F6 | 	mov	arg02, local05
07044     98 D9 B1 FD | 	call	#__system___string_cmp
07048     3D C1 02 F6 | 	mov	local14, result1
0704c     00 C0 56 F2 | 	cmps	local14, #0 wc
07050     1C 00 90 CD |  if_b	jmp	#LR__0588
07054     95 01 00 FF 
07058     C7 B3 06 F6 | 	mov	local07, ##@LR__5901
0705c     56 93 02 F6 | 	mov	arg01, local04
07060     59 95 02 F6 | 	mov	arg02, local07
07064     78 D9 B1 FD | 	call	#__system___string_cmp
07068     01 7A 56 F2 | 	cmps	result1, #1 wc
0706c     20 00 90 CD |  if_b	jmp	#LR__0589
07070                 | LR__0588
07070     95 01 00 FF 
07074     C9 B5 06 F6 | 	mov	local08, ##@LR__5902
07078     56 93 02 F6 | 	mov	arg01, local04
0707c     5A 95 02 F6 | 	mov	arg02, local08
07080     5C D9 B1 FD | 	call	#__system___string_cmp
07084     00 7A 0E F2 | 	cmp	result1, #0 wz
07088     00 7A 06 56 |  if_ne	mov	result1, #0
0708c     60 00 90 5D |  if_ne	jmp	#LR__0594
07090                 | LR__0589
07090                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
07090     01 B8 0E F2 | 	cmp	local10, #1 wz
07094     4C 00 90 5D |  if_ne	jmp	#LR__0591
07098     95 01 00 FF 
0709c     CB 95 06 F6 | 	mov	arg02, ##@LR__5903
070a0     56 93 02 F6 | 	mov	arg01, local04
070a4     38 D9 B1 FD | 	call	#__system___string_cmp
070a8     00 7A 56 F2 | 	cmps	result1, #0 wc
070ac     18 00 90 CD |  if_b	jmp	#LR__0590
070b0     95 01 00 FF 
070b4     CD 95 06 F6 | 	mov	arg02, ##@LR__5904
070b8     56 93 02 F6 | 	mov	arg01, local04
070bc     20 D9 B1 FD | 	call	#__system___string_cmp
070c0     01 7A 56 F2 | 	cmps	result1, #1 wc
070c4     1C 00 90 CD |  if_b	jmp	#LR__0591
070c8                 | LR__0590
070c8     95 01 00 FF 
070cc     CF 95 06 F6 | 	mov	arg02, ##@LR__5905
070d0     56 93 02 F6 | 	mov	arg01, local04
070d4     08 D9 B1 FD | 	call	#__system___string_cmp
070d8     00 7A 0E F2 | 	cmp	result1, #0 wz
070dc     00 7A 06 56 |  if_ne	mov	result1, #0
070e0     0C 00 90 5D |  if_ne	jmp	#LR__0594
070e4                 | LR__0591
070e4     01 BA 06 F1 | 	add	local11, #1
070e8     98 FE 9F FD | 	jmp	#LR__0584
070ec                 | LR__0592
070ec                 | LR__0593
070ec                 | ' return true
070ec     01 7A 66 F6 | 	neg	result1, #1
070f0                 | LR__0594
070f0     E7 F0 03 F6 | 	mov	ptra, fp
070f4     F2 00 A0 FD | 	call	#popregs_
070f8                 | _isint_ret
070f8     2D 00 64 FD | 	ret
070fc                 | 
070fc                 | ' 
070fc                 | ' ' Check if the part is a positive decimal number.  
070fc                 | ' 
070fc                 | ' function isdec(s as string) as boolean
070fc                 | _isdec
070fc     05 CA 05 F6 | 	mov	COUNT_, #5
07100     E8 00 A0 FD | 	call	#pushregs_
07104     49 A7 02 F6 | 	mov	local01, arg01
07108     49 A9 02 F6 | 	mov	local02, arg01
0710c     D7 06 48 FB | 	callpa	#(@LR__0601-@LR__0600)>>2,fcache_load_ptr_
07110                 | LR__0600
07110     54 7B CA FA | 	rdbyte	result1, local02 wz
07114     01 A8 06 51 |  if_ne	add	local02, #1
07118     F4 FF 9F 5D |  if_ne	jmp	#LR__0600
0711c                 | LR__0601
0711c     49 A9 82 F1 | 	sub	local02, arg01
07120     54 7B 02 F6 | 	mov	result1, local02
07124     3D A9 0A F6 | 	mov	local02, result1 wz
07128     00 7A 06 A6 |  if_e	mov	result1, #0
0712c     80 00 90 AD |  if_e	jmp	#LR__0606
07130                 | ' for i=1 to l
07130     01 AA 06 F6 | 	mov	local03, #1
07134     54 AD 02 F6 | 	mov	local04, local02
07138     01 AC 06 F1 | 	add	local04, #1
0713c                 | LR__0602
0713c     56 AB 52 F2 | 	cmps	local03, local04 wc
07140     68 00 90 3D |  if_ae	jmp	#LR__0605
07144     53 93 02 F6 | 	mov	arg01, local01
07148     55 95 02 F6 | 	mov	arg02, local03
0714c     01 96 06 F6 | 	mov	arg03, #1
07150     24 F2 B1 FD | 	call	#__system__Mid_S
07154     3D AF 02 F6 | 	mov	local05, result1
07158                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
07158     95 01 00 FF 
0715c     D1 95 06 F6 | 	mov	arg02, ##@LR__5906
07160     57 93 02 F6 | 	mov	arg01, local05
07164     78 D8 B1 FD | 	call	#__system___string_cmp
07168     00 7A 56 F2 | 	cmps	result1, #0 wc
0716c     18 00 90 CD |  if_b	jmp	#LR__0603
07170     95 01 00 FF 
07174     D3 95 06 F6 | 	mov	arg02, ##@LR__5907
07178     57 93 02 F6 | 	mov	arg01, local05
0717c     60 D8 B1 FD | 	call	#__system___string_cmp
07180     01 7A 56 F2 | 	cmps	result1, #1 wc
07184     1C 00 90 CD |  if_b	jmp	#LR__0604
07188                 | LR__0603
07188     95 01 00 FF 
0718c     D5 95 06 F6 | 	mov	arg02, ##@LR__5908
07190     57 93 02 F6 | 	mov	arg01, local05
07194     48 D8 B1 FD | 	call	#__system___string_cmp
07198     00 7A 0E F2 | 	cmp	result1, #0 wz
0719c     00 7A 06 56 |  if_ne	mov	result1, #0
071a0     0C 00 90 5D |  if_ne	jmp	#LR__0606
071a4                 | LR__0604
071a4     01 AA 06 F1 | 	add	local03, #1
071a8     90 FF 9F FD | 	jmp	#LR__0602
071ac                 | LR__0605
071ac                 | ' return true
071ac     01 7A 66 F6 | 	neg	result1, #1
071b0                 | LR__0606
071b0     E7 F0 03 F6 | 	mov	ptra, fp
071b4     F2 00 A0 FD | 	call	#popregs_
071b8                 | _isdec_ret
071b8     2D 00 64 FD | 	ret
071bc                 | 
071bc                 | ' 
071bc                 | ' ' Check if the part is a string.  
071bc                 | ' 
071bc                 | ' function isstring(s as string) as boolean
071bc                 | _isstring
071bc     01 CA 05 F6 | 	mov	COUNT_, #1
071c0     E8 00 A0 FD | 	call	#pushregs_
071c4                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
071c4     49 A7 02 F6 | 	mov	local01, arg01
071c8     01 94 06 F6 | 	mov	arg02, #1
071cc     90 F0 B1 FD | 	call	#__system__Left_S
071d0     3D 93 02 F6 | 	mov	arg01, result1
071d4     95 01 00 FF 
071d8     D7 95 06 F6 | 	mov	arg02, ##@LR__5909
071dc     00 D8 B1 FD | 	call	#__system___string_cmp
071e0     00 7A 4E F2 | 	cmps	result1, #0 wz
071e4     28 00 90 5D |  if_ne	jmp	#LR__0610
071e8     53 93 02 F6 | 	mov	arg01, local01
071ec     01 94 06 F6 | 	mov	arg02, #1
071f0     F4 F0 B1 FD | 	call	#__system__Right_S
071f4     3D 93 02 F6 | 	mov	arg01, result1
071f8     95 01 00 FF 
071fc     D9 95 06 F6 | 	mov	arg02, ##@LR__5910
07200     DC D7 B1 FD | 	call	#__system___string_cmp
07204     00 7A 4E F2 | 	cmps	result1, #0 wz
07208     01 7A 66 A6 |  if_e	neg	result1, #1
0720c     04 00 90 AD |  if_e	jmp	#LR__0611
07210                 | LR__0610
07210     00 7A 06 F6 | 	mov	result1, #0
07214                 | LR__0611
07214     E7 F0 03 F6 | 	mov	ptra, fp
07218     F2 00 A0 FD | 	call	#popregs_
0721c                 | _isstring_ret
0721c     2D 00 64 FD | 	ret
07220                 | 
07220                 | ' 
07220                 | ' ' getnoteval. Returns the frequency of note token
07220                 | ' 
07220                 | ' function getnoteval(token) as single
07220                 | _getnoteval
07220     02 CA 05 F6 | 	mov	COUNT_, #2
07224     E8 00 A0 FD | 	call	#pushregs_
07228     01 00 00 FF 
0722c     00 93 86 F1 | 	sub	arg01, ##768
07230     49 95 52 F6 | 	abs	arg02, arg01 wc
07234     0C 94 16 FD | 	qdiv	arg02, #12
07238     32 95 02 F6 | 	mov	arg02, objptr
0723c     15 00 00 FF 
07240     D8 94 06 F1 | 	add	arg02, ##10968
07244     19 7A 62 FD | 	getqy	result1
07248     3D 7B 82 F6 | 	negc	result1, result1
0724c     02 7A 66 F0 | 	shl	result1, #2
07250     4A 7B 02 F1 | 	add	result1, arg02
07254     49 95 52 F6 | 	abs	arg02, arg01 wc
07258     0C 94 16 FD | 	qdiv	arg02, #12
0725c     3D A7 02 FB | 	rdlong	local01, result1
07260     01 92 06 F6 | 	mov	arg01, #1
07264                 | ' noteexp=1+(note/12) 
07264                 | ' return (2.0^noteexp)*notebase
07264     18 94 62 FD | 	getqx	arg02
07268     4A 93 82 F3 | 	sumc	arg01, arg02
0726c     49 93 52 F6 | 	abs	arg01, arg01 wc
07270     1F A8 C6 C9 |  if_b	decod	local02, #31
07274     00 A8 06 36 |  if_ae	mov	local02, #0
07278     08 FA B1 FD | 	call	#__system___float_fromuns
0727c     54 7B 62 F5 | 	xor	result1, local02
07280     3D 95 02 F6 | 	mov	arg02, result1
07284     1E 92 C6 F9 | 	decod	arg01, #30
07288     14 0D B2 FD | 	call	#__system____builtin_powf
0728c     3D 93 02 F6 | 	mov	arg01, result1
07290     53 95 02 F6 | 	mov	arg02, local01
07294     F0 FD B1 FD | 	call	#__system___float_mul
07298     E7 F0 03 F6 | 	mov	ptra, fp
0729c     F2 00 A0 FD | 	call	#popregs_
072a0                 | _getnoteval_ret
072a0     2D 00 64 FD | 	ret
072a4                 | 
072a4                 | ' 
072a4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072a4                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
072a4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072a4                 | ' 
072a4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072a4                 | ' '
072a4                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
072a4                 | ' '
072a4                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
072a4                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
072a4                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
072a4                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
072a4                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
072a4                 | ' ' 
072a4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072a4                 | ' 
072a4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072a4                 | ' ' Helper functions to manage program lines
072a4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072a4                 | ' 
072a4                 | ' '----- delete a line from a program
072a4                 | ' 
072a4                 | ' function deleteline(aline as ulong) as integer
072a4                 | _deleteline
072a4     05 CA 05 F6 | 	mov	COUNT_, #5
072a8     E8 00 A0 FD | 	call	#pushregs_
072ac     2C F0 07 F1 | 	add	ptra, #44
072b0     49 A7 02 F6 | 	mov	local01, arg01
072b4     4B 00 00 FF 
072b8     A8 64 06 F1 | 	add	objptr, ##38568
072bc     32 A9 02 FB | 	rdlong	local02, objptr
072c0                 | ' 
072c0                 | ' searchptr=programstart
072c0                 | ' do
072c0     3F 00 00 FF 
072c4     DC 65 86 F1 | 	sub	objptr, ##32732
072c8                 | LR__0620
072c8     E7 92 02 F6 | 	mov	arg01, fp
072cc     14 92 06 F1 | 	add	arg01, #20
072d0     54 95 02 F6 | 	mov	arg02, local02
072d4     18 96 06 F6 | 	mov	arg03, #24
072d8     BC CA B1 FD | 	call	#_psram_spin2_read1
072dc     54 97 02 F6 | 	mov	arg03, local02
072e0     28 CE 05 F1 | 	add	fp, #40
072e4     E7 A8 02 FB | 	rdlong	local02, fp
072e8     14 CE 85 F1 | 	sub	fp, #20
072ec     E7 94 02 FB | 	rdlong	arg02, fp
072f0     14 CE 85 F1 | 	sub	fp, #20
072f4     53 95 12 F2 | 	cmp	arg02, local01 wc
072f8     28 CE 05 C1 |  if_b	add	fp, #40
072fc     E7 AA 02 CB |  if_b	rdlong	local03, fp
07300     28 CE 85 C1 |  if_b	sub	fp, #40
07304     FF FF 3F CF 
07308     FF AB 0E C2 |  if_b	cmp	local03, ##2147483647 wz
0730c     B8 FF 9F 4D |  if_c_and_nz	jmp	#LR__0620
07310     0B 00 00 FF 
07314     CC 64 86 F1 | 	sub	objptr, ##5836
07318                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
07318     14 CE 05 F1 | 	add	fp, #20
0731c     E7 AA 02 FB | 	rdlong	local03, fp
07320     14 CE 85 F1 | 	sub	fp, #20
07324     53 AB 0A F2 | 	cmp	local03, local01 wz
07328     01 7A 66 56 |  if_ne	neg	result1, #1
0732c     2C 02 90 5D |  if_ne	jmp	#LR__0625
07330     4B 93 02 F6 | 	mov	arg01, arg03
07334     01 94 66 F6 | 	neg	arg02, #1
07338     9C 9E B1 FD | 	call	#_pslpoke
0733c                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
0733c                 | ' 
0733c                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
0733c     28 CE 05 F1 | 	add	fp, #40
07340     E7 96 02 FB | 	rdlong	arg03, fp
07344     28 CE 85 F1 | 	sub	fp, #40
07348     FF FF 3F FF 
0734c     FF 97 0E F2 | 	cmp	arg03, ##2147483647 wz
07350     24 CE 05 A1 |  if_e	add	fp, #36
07354     E7 AC 02 AB |  if_e	rdlong	local04, fp
07358     24 CE 85 A1 |  if_e	sub	fp, #36
0735c     FF FF 7F AF 
07360     FF AD 0E A2 |  if_e	cmp	local04, ##-1 wz
07364     88 00 90 5D |  if_ne	jmp	#LR__0621
07368     4B 00 00 FF 
0736c     A8 64 06 F1 | 	add	objptr, ##38568
07370     00 04 80 FF 
07374     32 01 68 FC | 	wrlong	##524288, objptr
07378     07 00 00 FF 
0737c     2C 64 86 F1 | 	sub	objptr, ##3628
07380     00 04 80 FF 
07384     32 01 68 FC | 	wrlong	##524288, objptr
07388     07 00 00 FF 
0738c     30 64 06 F1 | 	add	objptr, ##3632
07390     32 01 68 FC | 	wrlong	#0, objptr
07394     04 64 06 F1 | 	add	objptr, #4
07398     FF FF FF FF 
0739c     32 FF 6B FC | 	wrlong	##-1, objptr
073a0     4B 00 00 FF 
073a4     B0 64 86 F1 | 	sub	objptr, ##38576
073a8     00 92 06 F6 | 	mov	arg01, #0
073ac     01 94 66 F6 | 	neg	arg02, #1
073b0     24 9E B1 FD | 	call	#_pslpoke
073b4     10 92 06 F6 | 	mov	arg01, #16
073b8     01 94 66 F6 | 	neg	arg02, #1
073bc     18 9E B1 FD | 	call	#_pslpoke
073c0     14 92 06 F6 | 	mov	arg01, #20
073c4     1E 94 CE F9 | 	bmask	arg02, #30
073c8     0C 9E B1 FD | 	call	#_pslpoke
073cc     51 00 00 FF 
073d0     D8 64 06 F1 | 	add	objptr, ##41688
073d4     00 04 80 FF 
073d8     32 01 68 FC | 	wrlong	##524288, objptr
073dc     04 64 06 F1 | 	add	objptr, #4
073e0     00 04 80 FF 
073e4     32 01 68 FC | 	wrlong	##524288, objptr
073e8     51 00 00 FF 
073ec     DC 64 86 F1 | 	sub	objptr, ##41692
073f0                 | LR__0621
073f0                 | ' 
073f0                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
073f0     28 CE 05 F1 | 	add	fp, #40
073f4     E7 AE 02 FB | 	rdlong	local05, fp
073f8     28 CE 85 F1 | 	sub	fp, #40
073fc     FF FF 3F FF 
07400     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
07404     74 00 90 5D |  if_ne	jmp	#LR__0622
07408     24 CE 05 F1 | 	add	fp, #36
0740c     E7 AC 02 FB | 	rdlong	local04, fp
07410     24 CE 85 F1 | 	sub	fp, #36
07414     FF FF 7F FF 
07418     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0741c     5C 00 90 AD |  if_e	jmp	#LR__0622
07420     24 CE 05 F1 | 	add	fp, #36
07424     E7 92 02 FB | 	rdlong	arg01, fp
07428     24 CE 85 F1 | 	sub	fp, #36
0742c     14 92 06 F1 | 	add	arg01, #20
07430     1E 94 CE F9 | 	bmask	arg02, #30
07434     A0 9D B1 FD | 	call	#_pslpoke
07438     24 CE 05 F1 | 	add	fp, #36
0743c     E7 AE 02 FB | 	rdlong	local05, fp
07440     4B 00 00 FF 
07444     B0 64 06 F1 | 	add	objptr, ##38576
07448     32 AF 62 FC | 	wrlong	local05, objptr
0744c     4B 00 00 FF 
07450     B0 64 86 F1 | 	sub	objptr, ##38576
07454     E7 92 02 FB | 	rdlong	arg01, fp
07458     24 CE 85 F1 | 	sub	fp, #36
0745c     98 9E B1 FD | 	call	#_pslpeek
07460     4B 00 00 FF 
07464     AC 64 06 F1 | 	add	objptr, ##38572
07468     32 7B 62 FC | 	wrlong	result1, objptr
0746c     4B 00 00 FF 
07470     AC 64 86 F1 | 	sub	objptr, ##38572
07474                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
07474                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
07474                 | '   lastline=pslpeek(header(4))
07474                 | '   return 0
07474     00 7A 06 F6 | 	mov	result1, #0
07478     E0 00 90 FD | 	jmp	#LR__0625
0747c                 | LR__0622
0747c                 | ' 
0747c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
0747c     28 CE 05 F1 | 	add	fp, #40
07480     E7 AE 02 FB | 	rdlong	local05, fp
07484     28 CE 85 F1 | 	sub	fp, #40
07488     FF FF 3F FF 
0748c     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
07490     58 00 90 AD |  if_e	jmp	#LR__0623
07494     24 CE 05 F1 | 	add	fp, #36
07498     E7 AC 02 FB | 	rdlong	local04, fp
0749c     24 CE 85 F1 | 	sub	fp, #36
074a0     FF FF 7F FF 
074a4     FF AD 0E F2 | 	cmp	local04, ##-1 wz
074a8     40 00 90 5D |  if_ne	jmp	#LR__0623
074ac     28 CE 05 F1 | 	add	fp, #40
074b0     E7 92 02 FB | 	rdlong	arg01, fp
074b4     28 CE 85 F1 | 	sub	fp, #40
074b8     10 92 06 F1 | 	add	arg01, #16
074bc     01 94 66 F6 | 	neg	arg02, #1
074c0     14 9D B1 FD | 	call	#_pslpoke
074c4     28 CE 05 F1 | 	add	fp, #40
074c8     E7 AE 02 FB | 	rdlong	local05, fp
074cc     28 CE 85 F1 | 	sub	fp, #40
074d0     4B 00 00 FF 
074d4     A8 64 06 F1 | 	add	objptr, ##38568
074d8     32 AF 62 FC | 	wrlong	local05, objptr
074dc     4B 00 00 FF 
074e0     A8 64 86 F1 | 	sub	objptr, ##38568
074e4                 | ' '   print "deleted first line"
074e4                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
074e4                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
074e4                 | '   return 0
074e4     00 7A 06 F6 | 	mov	result1, #0
074e8     70 00 90 FD | 	jmp	#LR__0625
074ec                 | LR__0623
074ec                 | ' 
074ec                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
074ec     28 CE 05 F1 | 	add	fp, #40
074f0     E7 AE 02 FB | 	rdlong	local05, fp
074f4     28 CE 85 F1 | 	sub	fp, #40
074f8     FF FF 3F FF 
074fc     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
07500     24 CE 05 51 |  if_ne	add	fp, #36
07504     E7 AC 02 5B |  if_ne	rdlong	local04, fp
07508     24 CE 85 51 |  if_ne	sub	fp, #36
0750c     FF FF 7F 5F 
07510     FF AD 0E 52 |  if_ne	cmp	local04, ##-1 wz
07514     40 00 90 AD |  if_e	jmp	#LR__0624
07518     28 CE 05 F1 | 	add	fp, #40
0751c     E7 92 02 FB | 	rdlong	arg01, fp
07520     10 92 06 F1 | 	add	arg01, #16
07524     04 CE 85 F1 | 	sub	fp, #4
07528     E7 94 02 FB | 	rdlong	arg02, fp
0752c     24 CE 85 F1 | 	sub	fp, #36
07530     A4 9C B1 FD | 	call	#_pslpoke
07534     24 CE 05 F1 | 	add	fp, #36
07538     E7 92 02 FB | 	rdlong	arg01, fp
0753c     14 92 06 F1 | 	add	arg01, #20
07540     04 CE 05 F1 | 	add	fp, #4
07544     E7 94 02 FB | 	rdlong	arg02, fp
07548     28 CE 85 F1 | 	sub	fp, #40
0754c     88 9C B1 FD | 	call	#_pslpoke
07550                 | '    pslpoke(header(5)+16,header(4))  
07550                 | '    pslpoke(header(4)+20, header(5))
07550                 | '    return 0
07550     00 7A 06 F6 | 	mov	result1, #0
07554     04 00 90 FD | 	jmp	#LR__0625
07558                 | LR__0624
07558     00 7A 06 F6 | 	mov	result1, #0
0755c                 | LR__0625
0755c     E7 F0 03 F6 | 	mov	ptra, fp
07560     F2 00 A0 FD | 	call	#popregs_
07564                 | _deleteline_ret
07564     2D 00 64 FD | 	ret
07568                 | 
07568                 | ' 
07568                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
07568                 | ' 
07568                 | ' sub save_line
07568                 | _save_line
07568     03 CA 05 F6 | 	mov	COUNT_, #3
0756c     E8 00 A0 FD | 	call	#pushregs_
07570     4B 00 00 FF 
07574     9C 64 06 F1 | 	add	objptr, ##38556
07578     32 97 02 FB | 	rdlong	arg03, objptr
0757c     01 96 06 F1 | 	add	arg03, #1
07580     05 00 00 FF 
07584     18 64 86 F1 | 	sub	objptr, ##2584
07588     32 95 02 FB | 	rdlong	arg02, objptr
0758c     4B 95 02 FD | 	qmul	arg02, arg03
07590     0E 00 00 FF 
07594     44 64 86 F1 | 	sub	objptr, ##7236
07598     32 93 02 FB | 	rdlong	arg01, objptr
0759c     38 00 00 FF 
075a0     40 64 86 F1 | 	sub	objptr, ##28736
075a4     49 A7 02 F6 | 	mov	local01, arg01
075a8     18 A8 62 FD | 	getqx	local02
075ac     D7 06 48 FB | 	callpa	#(@LR__0631-@LR__0630)>>2,fcache_load_ptr_
075b0                 | LR__0630
075b0     53 7B CA FA | 	rdbyte	result1, local01 wz
075b4     01 A6 06 51 |  if_ne	add	local01, #1
075b8     F4 FF 9F 5D |  if_ne	jmp	#LR__0630
075bc                 | LR__0631
075bc     49 A7 82 F1 | 	sub	local01, arg01
075c0     03 A6 CE F7 | 	test	local01, #3 wz
075c4     02 A6 46 50 |  if_ne	shr	local01, #2
075c8     01 A6 06 51 |  if_ne	add	local01, #1
075cc     02 A6 66 50 |  if_ne	shl	local01, #2
075d0     54 AB 02 F6 | 	mov	local03, local02
075d4     53 AB 02 F1 | 	add	local03, local01
075d8     44 00 00 FF 
075dc     7C 64 06 F1 | 	add	objptr, ##34940
075e0     32 97 02 FB | 	rdlong	arg03, objptr
075e4     54 97 02 F1 | 	add	arg03, local02
075e8     04 00 00 FF 
075ec     28 64 06 F1 | 	add	objptr, ##2088
075f0     32 97 62 FC | 	wrlong	arg03, objptr
075f4     04 64 06 F1 | 	add	objptr, #4
075f8     32 A7 62 FC | 	wrlong	local01, objptr
075fc     0C 64 86 F1 | 	sub	objptr, #12
07600     32 93 02 F6 | 	mov	arg01, objptr
07604     04 00 00 FF 
07608     20 64 86 F1 | 	sub	objptr, ##2080
0760c     32 95 02 FB | 	rdlong	arg02, objptr
07610     54 97 02 F6 | 	mov	arg03, local02
07614     38 00 00 FF 
07618     B0 65 86 F1 | 	sub	objptr, ##29104
0761c     14 C8 B1 FD | 	call	#_psram_spin2_write
07620     2C 00 00 FF 
07624     74 65 06 F1 | 	add	objptr, ##22900
07628     32 93 02 FB | 	rdlong	arg01, objptr
0762c     0C 00 00 FF 
07630     3C 64 06 F1 | 	add	objptr, ##6204
07634     32 95 02 FB | 	rdlong	arg02, objptr
07638     54 95 02 F1 | 	add	arg02, local02
0763c     53 97 02 F6 | 	mov	arg03, local01
07640     38 00 00 FF 
07644     B0 65 86 F1 | 	sub	objptr, ##29104
07648     E8 C7 B1 FD | 	call	#_psram_spin2_write
0764c     38 00 00 FF 
07650     B0 65 06 F1 | 	add	objptr, ##29104
07654     32 A7 02 FB | 	rdlong	local01, objptr
07658     55 A7 02 F1 | 	add	local01, local03
0765c     32 A7 62 FC | 	wrlong	local01, objptr
07660     44 00 00 FF 
07664     7C 64 86 F1 | 	sub	objptr, ##34940
07668     E7 F0 03 F6 | 	mov	ptra, fp
0766c     F2 00 A0 FD | 	call	#popregs_
07670                 | _save_line_ret
07670     2D 00 64 FD | 	ret
07674                 | 
07674                 | ' 
07674                 | ' '----- Insert a new line into the middle of the program
07674                 | ' 
07674                 | ' function insertline(aline as ulong) as integer
07674                 | _insertline
07674     04 CA 05 F6 | 	mov	COUNT_, #4
07678     E8 00 A0 FD | 	call	#pushregs_
0767c     28 F0 07 F1 | 	add	ptra, #40
07680     49 A7 02 F6 | 	mov	local01, arg01
07684     4B 00 00 FF 
07688     A8 64 06 F1 | 	add	objptr, ##38568
0768c     32 A9 02 FB | 	rdlong	local02, objptr
07690                 | ' 
07690                 | ' do
07690     3F 00 00 FF 
07694     DC 65 86 F1 | 	sub	objptr, ##32732
07698                 | LR__0640
07698     E7 92 02 F6 | 	mov	arg01, fp
0769c     10 92 06 F1 | 	add	arg01, #16
076a0     54 95 02 F6 | 	mov	arg02, local02
076a4     18 96 06 F6 | 	mov	arg03, #24
076a8     EC C6 B1 FD | 	call	#_psram_spin2_read1
076ac     54 AB 02 F6 | 	mov	local03, local02
076b0     24 CE 05 F1 | 	add	fp, #36
076b4     E7 A8 02 FB | 	rdlong	local02, fp
076b8     14 CE 85 F1 | 	sub	fp, #20
076bc     E7 96 02 FB | 	rdlong	arg03, fp
076c0     10 CE 85 F1 | 	sub	fp, #16
076c4     53 97 12 F2 | 	cmp	arg03, local01 wc
076c8     24 CE 05 C1 |  if_b	add	fp, #36
076cc     E7 AC 02 CB |  if_b	rdlong	local04, fp
076d0     24 CE 85 C1 |  if_b	sub	fp, #36
076d4     FF FF 3F CF 
076d8     FF AD 0E C2 |  if_b	cmp	local04, ##2147483647 wz
076dc     B8 FF 9F 4D |  if_c_and_nz	jmp	#LR__0640
076e0     0B 00 00 FF 
076e4     CC 64 86 F1 | 	sub	objptr, ##5836
076e8                 | ' 
076e8                 | ' if header(0)=aline then return -1 				' delete it first
076e8     10 CE 05 F1 | 	add	fp, #16
076ec     E7 AC 02 FB | 	rdlong	local04, fp
076f0     10 CE 85 F1 | 	sub	fp, #16
076f4     53 AD 0A F2 | 	cmp	local04, local01 wz
076f8     01 7A 66 A6 |  if_e	neg	result1, #1
076fc     24 01 90 AD |  if_e	jmp	#LR__0643
07700                 | ' if header(0)<aline then return -2 				' end of program reached
07700     10 CE 05 F1 | 	add	fp, #16
07704     E7 AC 02 FB | 	rdlong	local04, fp
07708     10 CE 85 F1 | 	sub	fp, #16
0770c     53 AD 12 F2 | 	cmp	local04, local01 wc
07710     02 7A 66 C6 |  if_b	neg	result1, #2
07714     0C 01 90 CD |  if_b	jmp	#LR__0643
07718                 | ' 
07718                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
07718     20 CE 05 F1 | 	add	fp, #32
0771c     E7 AC 02 FB | 	rdlong	local04, fp
07720     20 CE 85 F1 | 	sub	fp, #32
07724     FF FF 7F FF 
07728     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0772c     64 00 90 5D |  if_ne	jmp	#LR__0641
07730     44 00 00 FF 
07734     7C 64 06 F1 | 	add	objptr, ##34940
07738     32 AD 02 FB | 	rdlong	local04, objptr
0773c     07 00 00 FF 
07740     2C 64 06 F1 | 	add	objptr, ##3628
07744     32 AD 62 FC | 	wrlong	local04, objptr
07748     55 93 02 F6 | 	mov	arg01, local03
0774c     10 92 06 F1 | 	add	arg01, #16
07750     07 00 00 FF 
07754     2C 64 86 F1 | 	sub	objptr, ##3628
07758     32 95 02 FB | 	rdlong	arg02, objptr
0775c     44 00 00 FF 
07760     7C 64 86 F1 | 	sub	objptr, ##34940
07764     70 9A B1 FD | 	call	#_pslpoke
07768     48 00 00 FF 
0776c     AC 64 06 F1 | 	add	objptr, ##37036
07770     FF FF FF FF 
07774     32 FF 6B FC | 	wrlong	##-1, objptr
07778     04 64 06 F1 | 	add	objptr, #4
0777c     32 AB 62 FC | 	wrlong	local03, objptr
07780     48 00 00 FF 
07784     B0 64 86 F1 | 	sub	objptr, ##37040
07788     DC FD BF FD | 	call	#_save_line
0778c                 | '   programstart=programptr
0778c                 | '   pslpoke(lineptr2+16,programptr)
0778c                 | '   ucompiledline(4)=$FFFF_FFFF
0778c                 | '   ucompiledline(5)=lineptr2
0778c                 | '   save_line
0778c                 | '   return 0
0778c     00 7A 06 F6 | 	mov	result1, #0
07790     90 00 90 FD | 	jmp	#LR__0643
07794                 | LR__0641
07794                 | ' 
07794                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
07794     20 CE 05 F1 | 	add	fp, #32
07798     E7 AC 02 FB | 	rdlong	local04, fp
0779c     20 CE 85 F1 | 	sub	fp, #32
077a0     FF FF 7F FF 
077a4     FF AD 0E F2 | 	cmp	local04, ##-1 wz
077a8     74 00 90 AD |  if_e	jmp	#LR__0642
077ac     20 CE 05 F1 | 	add	fp, #32
077b0     E7 AC 02 FB | 	rdlong	local04, fp
077b4     20 CE 85 F1 | 	sub	fp, #32
077b8     48 00 00 FF 
077bc     AC 64 06 F1 | 	add	objptr, ##37036
077c0     32 AD 62 FC | 	wrlong	local04, objptr
077c4     04 64 06 F1 | 	add	objptr, #4
077c8     32 AB 62 FC | 	wrlong	local03, objptr
077cc     10 AA 06 F1 | 	add	local03, #16
077d0     04 00 00 FF 
077d4     34 64 86 F1 | 	sub	objptr, ##2100
077d8     32 95 02 FB | 	rdlong	arg02, objptr
077dc     44 00 00 FF 
077e0     7C 64 86 F1 | 	sub	objptr, ##34940
077e4     55 93 02 F6 | 	mov	arg01, local03
077e8     EC 99 B1 FD | 	call	#_pslpoke
077ec     20 CE 05 F1 | 	add	fp, #32
077f0     E7 92 02 FB | 	rdlong	arg01, fp
077f4     20 CE 85 F1 | 	sub	fp, #32
077f8     14 92 06 F1 | 	add	arg01, #20
077fc     44 00 00 FF 
07800     7C 64 06 F1 | 	add	objptr, ##34940
07804     32 95 02 FB | 	rdlong	arg02, objptr
07808     44 00 00 FF 
0780c     7C 64 86 F1 | 	sub	objptr, ##34940
07810     C4 99 B1 FD | 	call	#_pslpoke
07814     50 FD BF FD | 	call	#_save_line
07818                 | '   ucompiledline(4)=header(4)
07818                 | '   ucompiledline(5)=lineptr2
07818                 | '   pslpoke(lineptr2+16,programptr)
07818                 | '   pslpoke(header(4)+20,programptr)
07818                 | '   save_line
07818                 | '   return 0
07818     00 7A 06 F6 | 	mov	result1, #0
0781c     04 00 90 FD | 	jmp	#LR__0643
07820                 | LR__0642
07820     00 7A 06 F6 | 	mov	result1, #0
07824                 | LR__0643
07824     E7 F0 03 F6 | 	mov	ptra, fp
07828     F2 00 A0 FD | 	call	#popregs_
0782c                 | _insertline_ret
0782c     2D 00 64 FD | 	ret
07830                 | 
07830                 | ' 
07830                 | ' '----- Adds a new line at the end of the program
07830                 | ' 
07830                 | ' sub add_line_at_end(aline) 
07830                 | _add_line_at_end
07830     4B 00 00 FF 
07834     AC 64 06 F1 | 	add	objptr, ##38572
07838     32 93 62 FC | 	wrlong	arg01, objptr
0783c     04 64 06 F1 | 	add	objptr, #4
07840     32 95 02 FB | 	rdlong	arg02, objptr
07844     03 00 00 FF 
07848     04 64 86 F1 | 	sub	objptr, ##1540
0784c     32 95 62 FC | 	wrlong	arg02, objptr
07850     03 00 00 FF 
07854     04 64 06 F1 | 	add	objptr, ##1540
07858     32 93 02 FB | 	rdlong	arg01, objptr
0785c     14 92 06 F1 | 	add	arg01, #20
07860     07 00 00 FF 
07864     34 64 86 F1 | 	sub	objptr, ##3636
07868     32 95 02 FB | 	rdlong	arg02, objptr
0786c     44 00 00 FF 
07870     7C 64 86 F1 | 	sub	objptr, ##34940
07874     60 99 B1 FD | 	call	#_pslpoke
07878     44 00 00 FF 
0787c     7C 64 06 F1 | 	add	objptr, ##34940
07880     32 95 02 FB | 	rdlong	arg02, objptr
07884     07 00 00 FF 
07888     34 64 06 F1 | 	add	objptr, ##3636
0788c     32 95 62 FC | 	wrlong	arg02, objptr
07890     03 00 00 FF 
07894     00 64 86 F1 | 	sub	objptr, ##1536
07898     FF FF BF FF 
0789c     32 FF 6B FC | 	wrlong	##2147483647, objptr
078a0                 | ' 
078a0                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
078a0                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
078a0     04 00 00 FF 
078a4     34 64 86 F1 | 	sub	objptr, ##2100
078a8     32 95 02 FB | 	rdlong	arg02, objptr
078ac     44 00 00 FF 
078b0     7C 64 86 F1 | 	sub	objptr, ##34940
078b4     00 04 00 FF 
078b8     00 94 0E F2 | 	cmp	arg02, ##524288 wz
078bc     48 00 00 AF 
078c0     AC 64 06 A1 |  if_e	add	objptr, ##37036
078c4     FF FF FF AF 
078c8     32 FF 6B AC |  if_e	wrlong	##-1, objptr
078cc     48 00 00 AF 
078d0     AC 64 86 A1 |  if_e	sub	objptr, ##37036
078d4     90 FC BF FD | 	call	#_save_line
078d8     44 00 00 FF 
078dc     7C 64 06 F1 | 	add	objptr, ##34940
078e0     32 93 02 FB | 	rdlong	arg01, objptr
078e4     44 00 00 FF 
078e8     7C 64 86 F1 | 	sub	objptr, ##34940
078ec     01 94 66 F6 | 	neg	arg02, #1
078f0     E4 98 B1 FD | 	call	#_pslpoke
078f4                 | _add_line_at_end_ret
078f4     2D 00 64 FD | 	ret
078f8                 | 
078f8                 | ' 
078f8                 | ' '--------------------------------------------------------------------------------------------------------------------------
078f8                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
078f8                 | ' '--------------------------------------------------------------------------------------------------------------------------
078f8                 | ' 
078f8                 | ' '--------------------------------------------------------------------------------------------------------------------------
078f8                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
078f8                 | ' '--------------------------------------------------------------------------------------------------------------------------
078f8                 | ' 
078f8                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
078f8                 | ' 
078f8                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
078f8                 | _compile_immediate
078f8     0A CA 05 F6 | 	mov	COUNT_, #10
078fc     E8 00 A0 FD | 	call	#pushregs_
07900                 | _compile_immediate_enter
07900     49 AD 02 F6 | 	mov	local04, arg01
07904     4A AF 02 F6 | 	mov	local05, arg02
07908     00 B0 06 F6 | 	mov	local06, #0
0790c     00 B2 06 F6 | 	mov	local07, #0
07910     00 B4 06 F6 | 	mov	local08, #0
07914                 | ' 
07914                 | ' ' linetype=cont+1
07914                 | ' ' 1 : this is the first part of the line that will continue
07914                 | ' ' 2 - this is the continuation of the line
07914                 | ' ' 3 - this is the last continued line
07914                 | ' ' 4 - this is the one and only part
07914                 | ' ' 5 - continued after if/else
07914                 | ' 
07914                 | ' err=0
07914                 | ' cmd=0
07914                 | ' vars=0
07914                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
07914     02 AC 0E F2 | 	cmp	local04, #2 wz
07918     03 AC 0E 52 |  if_ne	cmp	local04, #3 wz
0791c     36 00 00 AF 
07920     30 64 06 A1 |  if_e	add	objptr, ##27696
07924     32 B3 02 AB |  if_e	rdlong	local07, objptr
07928     02 00 00 AF 
0792c     34 64 06 A1 |  if_e	add	objptr, ##1076
07930     32 03 68 AC |  if_e	wrlong	#1, objptr
07934     38 00 00 AF 
07938     64 64 86 A1 |  if_e	sub	objptr, ##28772
0793c                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
0793c     04 AC 0E F2 | 	cmp	local04, #4 wz
07940     01 AC 0E 52 |  if_ne	cmp	local04, #1 wz
07944     2C 00 90 5D |  if_ne	jmp	#LR__0650
07948     36 00 00 FF 
0794c     38 64 06 F1 | 	add	objptr, ##27704
07950     32 B3 02 FB | 	rdlong	local07, objptr
07954     02 00 00 FF 
07958     2C 64 06 F1 | 	add	objptr, ##1068
0795c     32 05 68 FC | 	wrlong	#2, objptr
07960     13 00 00 FF 
07964     38 64 06 F1 | 	add	objptr, ##9784
07968     32 05 68 FC | 	wrlong	#2, objptr
0796c     4B 00 00 FF 
07970     9C 64 86 F1 | 	sub	objptr, ##38556
07974                 | LR__0650
07974                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07974     05 AC 0E F2 | 	cmp	local04, #5 wz
07978     40 00 90 5D |  if_ne	jmp	#LR__0651
0797c     38 00 00 FF 
07980     64 64 06 F1 | 	add	objptr, ##28772
07984     32 7D 02 FB | 	rdlong	result2, objptr
07988     3E B7 02 F6 | 	mov	local09, result2
0798c     03 B6 66 F0 | 	shl	local09, #3
07990     02 00 00 FF 
07994     38 64 86 F1 | 	sub	objptr, ##1080
07998     32 B7 02 F1 | 	add	local09, objptr
0799c     04 B6 06 F1 | 	add	local09, #4
079a0     5B B3 02 FB | 	rdlong	local07, local09
079a4     01 7C 06 F1 | 	add	result2, #1
079a8     02 00 00 FF 
079ac     38 64 06 F1 | 	add	objptr, ##1080
079b0     32 7D 62 FC | 	wrlong	result2, objptr
079b4     38 00 00 FF 
079b8     64 64 86 F1 | 	sub	objptr, ##28772
079bc                 | LR__0651
079bc                 | ' 
079bc                 | ' 'print  "In compile_immediate cmd=:", cmd
079bc                 | ' 451 select case cmd
079bc     5C B2 0E F2 | 	cmp	local07, #92 wz
079c0     E8 02 90 AD |  if_e	jmp	#LR__0652
079c4     B9 B2 0E F2 | 	cmp	local07, #185 wz
079c8     EC 02 90 AD |  if_e	jmp	#LR__0653
079cc     47 B2 0E F2 | 	cmp	local07, #71 wz
079d0     F4 02 90 AD |  if_e	jmp	#LR__0654
079d4     59 B2 0E F2 | 	cmp	local07, #89 wz
079d8     FC 02 90 AD |  if_e	jmp	#LR__0655
079dc     C3 B2 0E F2 | 	cmp	local07, #195 wz
079e0     04 03 90 AD |  if_e	jmp	#LR__0656
079e4     45 B2 0E F2 | 	cmp	local07, #69 wz
079e8     08 03 90 AD |  if_e	jmp	#LR__0657
079ec     69 B2 0E F2 | 	cmp	local07, #105 wz
079f0     10 03 90 AD |  if_e	jmp	#LR__0658
079f4     40 B2 0E F2 | 	cmp	local07, #64 wz
079f8     18 07 90 AD |  if_e	jmp	#LR__0735
079fc     B4 B2 0E F2 | 	cmp	local07, #180 wz
07a00     0C 03 90 AD |  if_e	jmp	#LR__0659
07a04     49 B2 0E F2 | 	cmp	local07, #73 wz
07a08     10 03 90 AD |  if_e	jmp	#LR__0660
07a0c     C4 B2 0E F2 | 	cmp	local07, #196 wz
07a10     14 03 90 AD |  if_e	jmp	#LR__0661
07a14     AE B2 0E F2 | 	cmp	local07, #174 wz
07a18     18 03 90 AD |  if_e	jmp	#LR__0662
07a1c     B0 B2 0E F2 | 	cmp	local07, #176 wz
07a20     1C 03 90 AD |  if_e	jmp	#LR__0663
07a24     AF B2 0E F2 | 	cmp	local07, #175 wz
07a28     20 03 90 AD |  if_e	jmp	#LR__0664
07a2c     B1 B2 0E F2 | 	cmp	local07, #177 wz
07a30     24 03 90 AD |  if_e	jmp	#LR__0665
07a34     CF B2 0E F2 | 	cmp	local07, #207 wz
07a38     28 03 90 AD |  if_e	jmp	#LR__0666
07a3c     68 B2 0E F2 | 	cmp	local07, #104 wz
07a40     2C 03 90 AD |  if_e	jmp	#LR__0667
07a44     B7 B2 0E F2 | 	cmp	local07, #183 wz
07a48     C8 06 90 AD |  if_e	jmp	#LR__0735
07a4c     D9 B2 0E F2 | 	cmp	local07, #217 wz
07a50     28 03 90 AD |  if_e	jmp	#LR__0668
07a54     74 B2 0E F2 | 	cmp	local07, #116 wz
07a58     2C 03 90 AD |  if_e	jmp	#LR__0669
07a5c     73 B2 0E F2 | 	cmp	local07, #115 wz
07a60     34 03 90 AD |  if_e	jmp	#LR__0670
07a64     6C B2 0E F2 | 	cmp	local07, #108 wz
07a68     3C 03 90 AD |  if_e	jmp	#LR__0671
07a6c     89 B2 0E F2 | 	cmp	local07, #137 wz
07a70     A0 06 90 AD |  if_e	jmp	#LR__0735
07a74     C2 B2 0E F2 | 	cmp	local07, #194 wz
07a78     3C 03 90 AD |  if_e	jmp	#LR__0672
07a7c     72 B2 0E F2 | 	cmp	local07, #114 wz
07a80     40 03 90 AD |  if_e	jmp	#LR__0673
07a84     5D B2 0E F2 | 	cmp	local07, #93 wz
07a88     44 03 90 AD |  if_e	jmp	#LR__0674
07a8c     96 B2 0E F2 | 	cmp	local07, #150 wz
07a90     4C 03 90 AD |  if_e	jmp	#LR__0675
07a94     43 B2 0E F2 | 	cmp	local07, #67 wz
07a98     50 03 90 AD |  if_e	jmp	#LR__0676
07a9c     5A B2 0E F2 | 	cmp	local07, #90 wz
07aa0     58 03 90 AD |  if_e	jmp	#LR__0677
07aa4     AB B2 0E F2 | 	cmp	local07, #171 wz
07aa8     68 06 90 AD |  if_e	jmp	#LR__0735
07aac     BD B2 0E F2 | 	cmp	local07, #189 wz
07ab0     58 03 90 AD |  if_e	jmp	#LR__0678
07ab4     BB B2 0E F2 | 	cmp	local07, #187 wz
07ab8     60 03 90 AD |  if_e	jmp	#LR__0679
07abc     4E B2 0E F2 | 	cmp	local07, #78 wz
07ac0     68 03 90 AD |  if_e	jmp	#LR__0680
07ac4     A9 B2 0E F2 | 	cmp	local07, #169 wz
07ac8     80 03 90 AD |  if_e	jmp	#LR__0682
07acc     46 B2 0E F2 | 	cmp	local07, #70 wz
07ad0     98 03 90 AD |  if_e	jmp	#LR__0684
07ad4     71 B2 0E F2 | 	cmp	local07, #113 wz
07ad8     A0 03 90 AD |  if_e	jmp	#LR__0685
07adc     60 B2 0E F2 | 	cmp	local07, #96 wz
07ae0     A4 03 90 AD |  if_e	jmp	#LR__0686
07ae4     4A B2 0E F2 | 	cmp	local07, #74 wz
07ae8     A8 03 90 AD |  if_e	jmp	#LR__0687
07aec     48 B2 0E F2 | 	cmp	local07, #72 wz
07af0     AC 03 90 AD |  if_e	jmp	#LR__0688
07af4     58 B2 0E F2 | 	cmp	local07, #88 wz
07af8     B4 03 90 AD |  if_e	jmp	#LR__0689
07afc     5F B2 0E F2 | 	cmp	local07, #95 wz
07b00     BC 03 90 AD |  if_e	jmp	#LR__0690
07b04     B5 B2 0E F2 | 	cmp	local07, #181 wz
07b08     C0 03 90 AD |  if_e	jmp	#LR__0691
07b0c     8A B2 0E F2 | 	cmp	local07, #138 wz
07b10     C8 03 90 AD |  if_e	jmp	#LR__0692
07b14     4C B2 0E F2 | 	cmp	local07, #76 wz
07b18     CC 03 90 AD |  if_e	jmp	#LR__0693
07b1c     52 B2 0E F2 | 	cmp	local07, #82 wz
07b20     D4 03 90 AD |  if_e	jmp	#LR__0694
07b24     97 B2 0E F2 | 	cmp	local07, #151 wz
07b28     DC 03 90 AD |  if_e	jmp	#LR__0695
07b2c     C6 B2 0E F2 | 	cmp	local07, #198 wz
07b30     E0 03 90 AD |  if_e	jmp	#LR__0696
07b34     61 B2 0E F2 | 	cmp	local07, #97 wz
07b38     E4 03 90 AD |  if_e	jmp	#LR__0697
07b3c     63 B2 0E F2 | 	cmp	local07, #99 wz
07b40     E8 03 90 AD |  if_e	jmp	#LR__0698
07b44     41 B2 0E F2 | 	cmp	local07, #65 wz
07b48     C8 05 90 AD |  if_e	jmp	#LR__0735
07b4c     4B B2 0E F2 | 	cmp	local07, #75 wz
07b50     E4 03 90 AD |  if_e	jmp	#LR__0699
07b54     C1 B2 0E F2 | 	cmp	local07, #193 wz
07b58     E8 03 90 AD |  if_e	jmp	#LR__0700
07b5c     B3 B2 0E F2 | 	cmp	local07, #179 wz
07b60     EC 03 90 AD |  if_e	jmp	#LR__0701
07b64     5E B2 0E F2 | 	cmp	local07, #94 wz
07b68     F0 03 90 AD |  if_e	jmp	#LR__0702
07b6c     7C B2 0E F2 | 	cmp	local07, #124 wz
07b70     F4 03 90 AD |  if_e	jmp	#LR__0703
07b74     7D B2 0E F2 | 	cmp	local07, #125 wz
07b78     F8 03 90 AD |  if_e	jmp	#LR__0704
07b7c     7E B2 0E F2 | 	cmp	local07, #126 wz
07b80     FC 03 90 AD |  if_e	jmp	#LR__0705
07b84     7F B2 0E F2 | 	cmp	local07, #127 wz
07b88     00 04 90 AD |  if_e	jmp	#LR__0706
07b8c     80 B2 0E F2 | 	cmp	local07, #128 wz
07b90     04 04 90 AD |  if_e	jmp	#LR__0707
07b94     55 B2 0E F2 | 	cmp	local07, #85 wz
07b98     08 04 90 AD |  if_e	jmp	#LR__0708
07b9c     75 B2 0E F2 | 	cmp	local07, #117 wz
07ba0     0C 04 90 AD |  if_e	jmp	#LR__0709
07ba4     42 B2 0E F2 | 	cmp	local07, #66 wz
07ba8     14 04 90 AD |  if_e	jmp	#LR__0710
07bac     95 B2 0E F2 | 	cmp	local07, #149 wz
07bb0     1C 04 90 AD |  if_e	jmp	#LR__0711
07bb4     AC B2 0E F2 | 	cmp	local07, #172 wz
07bb8     58 05 90 AD |  if_e	jmp	#LR__0735
07bbc     81 B2 0E F2 | 	cmp	local07, #129 wz
07bc0     18 04 90 AD |  if_e	jmp	#LR__0712
07bc4     44 B2 0E F2 | 	cmp	local07, #68 wz
07bc8     1C 04 90 AD |  if_e	jmp	#LR__0713
07bcc     BC B2 0E F2 | 	cmp	local07, #188 wz
07bd0     20 04 90 AD |  if_e	jmp	#LR__0714
07bd4     88 B2 0E F2 | 	cmp	local07, #136 wz
07bd8     38 05 90 AD |  if_e	jmp	#LR__0735
07bdc     B6 B2 0E F2 | 	cmp	local07, #182 wz
07be0     20 04 90 AD |  if_e	jmp	#LR__0715
07be4     92 B2 0E F2 | 	cmp	local07, #146 wz
07be8     28 04 90 AD |  if_e	jmp	#LR__0716
07bec     BE B2 0E F2 | 	cmp	local07, #190 wz
07bf0     DC 05 90 AD |  if_e	jmp	#LR__0736
07bf4     C7 B2 0E F2 | 	cmp	local07, #199 wz
07bf8     D4 B2 0E 52 |  if_ne	cmp	local07, #212 wz
07bfc     AA B2 0E 52 |  if_ne	cmp	local07, #170 wz
07c00     10 05 90 AD |  if_e	jmp	#LR__0735
07c04     4D B2 0E F2 | 	cmp	local07, #77 wz
07c08     14 04 90 AD |  if_e	jmp	#LR__0717
07c0c     51 B2 0E F2 | 	cmp	local07, #81 wz
07c10     1C 04 90 AD |  if_e	jmp	#LR__0718
07c14     DA B2 0E F2 | 	cmp	local07, #218 wz
07c18     24 04 90 AD |  if_e	jmp	#LR__0719
07c1c     D2 B2 0E F2 | 	cmp	local07, #210 wz
07c20     28 04 90 AD |  if_e	jmp	#LR__0720
07c24     8E B2 0E F2 | 	cmp	local07, #142 wz
07c28     30 04 90 AD |  if_e	jmp	#LR__0721
07c2c     90 B2 0E F2 | 	cmp	local07, #144 wz
07c30     34 04 90 AD |  if_e	jmp	#LR__0722
07c34     8D B2 0E F2 | 	cmp	local07, #141 wz
07c38     38 04 90 AD |  if_e	jmp	#LR__0723
07c3c     8C B2 0E F2 | 	cmp	local07, #140 wz
07c40     3C 04 90 AD |  if_e	jmp	#LR__0724
07c44     91 B2 0E F2 | 	cmp	local07, #145 wz
07c48     40 04 90 AD |  if_e	jmp	#LR__0725
07c4c     8B B2 0E F2 | 	cmp	local07, #139 wz
07c50     44 04 90 AD |  if_e	jmp	#LR__0726
07c54     8F B2 0E F2 | 	cmp	local07, #143 wz
07c58     48 04 90 AD |  if_e	jmp	#LR__0727
07c5c     B2 B2 0E F2 | 	cmp	local07, #178 wz
07c60     4C 04 90 AD |  if_e	jmp	#LR__0728
07c64     6D B2 0E F2 | 	cmp	local07, #109 wz
07c68     54 04 90 AD |  if_e	jmp	#LR__0729
07c6c     70 B2 0E F2 | 	cmp	local07, #112 wz
07c70     A0 04 90 AD |  if_e	jmp	#LR__0735
07c74     56 B2 0E F2 | 	cmp	local07, #86 wz
07c78     50 04 90 AD |  if_e	jmp	#LR__0730
07c7c     57 B2 0E F2 | 	cmp	local07, #87 wz
07c80     90 04 90 AD |  if_e	jmp	#LR__0735
07c84     79 B2 0E F2 | 	cmp	local07, #121 wz
07c88     4C 04 90 AD |  if_e	jmp	#LR__0731
07c8c     77 B2 0E F2 | 	cmp	local07, #119 wz
07c90     50 04 90 AD |  if_e	jmp	#LR__0732
07c94     78 B2 0E F2 | 	cmp	local07, #120 wz
07c98     54 04 90 AD |  if_e	jmp	#LR__0733
07c9c     01 00 00 FF 
07ca0     04 B2 0E F2 | 	cmp	local07, ##516 wz
07ca4     54 04 90 AD |  if_e	jmp	#LR__0734
07ca8     24 05 90 FD | 	jmp	#LR__0736
07cac                 | LR__0652
07cac     54 0B B0 FD | 	call	#_compile_fun_2p
07cb0     3D B1 02 F6 | 	mov	local06, result1
07cb4     5C 04 90 FD | 	jmp	#LR__0735
07cb8                 | LR__0653
07cb8     18 0E B0 FD | 	call	#_compile_fun_varp
07cbc     3D B5 02 F6 | 	mov	local08, result1
07cc0     3E B1 02 F6 | 	mov	local06, result2
07cc4     4C 04 90 FD | 	jmp	#LR__0735
07cc8                 | LR__0654
07cc8     08 0E B0 FD | 	call	#_compile_fun_varp
07ccc     3D B5 02 F6 | 	mov	local08, result1
07cd0     3E B1 02 F6 | 	mov	local06, result2
07cd4     3C 04 90 FD | 	jmp	#LR__0735
07cd8                 | LR__0655
07cd8     F8 0D B0 FD | 	call	#_compile_fun_varp
07cdc     3D B5 02 F6 | 	mov	local08, result1
07ce0     3E B1 02 F6 | 	mov	local06, result2
07ce4     2C 04 90 FD | 	jmp	#LR__0735
07ce8                 | LR__0656
07ce8                 | ' return expr()
07ce8     84 41 B0 FD | 	call	#_expr
07cec     3D B1 02 F6 | 	mov	local06, result1
07cf0     20 04 90 FD | 	jmp	#LR__0735
07cf4                 | LR__0657
07cf4     DC 0D B0 FD | 	call	#_compile_fun_varp
07cf8     3D B5 02 F6 | 	mov	local08, result1
07cfc     3E B1 02 F6 | 	mov	local06, result2
07d00     10 04 90 FD | 	jmp	#LR__0735
07d04                 | LR__0658
07d04                 | ' return expr()
07d04     68 41 B0 FD | 	call	#_expr
07d08     3D B1 02 F6 | 	mov	local06, result1
07d0c     04 04 90 FD | 	jmp	#LR__0735
07d10                 | LR__0659
07d10                 | ' return expr()
07d10     5C 41 B0 FD | 	call	#_expr
07d14     3D B1 02 F6 | 	mov	local06, result1
07d18     F8 03 90 FD | 	jmp	#LR__0735
07d1c                 | LR__0660
07d1c                 | ' return expr()
07d1c     50 41 B0 FD | 	call	#_expr
07d20     3D B1 02 F6 | 	mov	local06, result1
07d24     EC 03 90 FD | 	jmp	#LR__0735
07d28                 | LR__0661
07d28     D8 0A B0 FD | 	call	#_compile_fun_2p
07d2c     3D B1 02 F6 | 	mov	local06, result1
07d30     E0 03 90 FD | 	jmp	#LR__0735
07d34                 | LR__0662
07d34     CC 0A B0 FD | 	call	#_compile_fun_2p
07d38     3D B1 02 F6 | 	mov	local06, result1
07d3c     D4 03 90 FD | 	jmp	#LR__0735
07d40                 | LR__0663
07d40     C0 0A B0 FD | 	call	#_compile_fun_2p
07d44     3D B1 02 F6 | 	mov	local06, result1
07d48     C8 03 90 FD | 	jmp	#LR__0735
07d4c                 | LR__0664
07d4c     B4 0A B0 FD | 	call	#_compile_fun_2p
07d50     3D B1 02 F6 | 	mov	local06, result1
07d54     BC 03 90 FD | 	jmp	#LR__0735
07d58                 | LR__0665
07d58     A8 0A B0 FD | 	call	#_compile_fun_2p
07d5c     3D B1 02 F6 | 	mov	local06, result1
07d60     B0 03 90 FD | 	jmp	#LR__0735
07d64                 | LR__0666
07d64                 | ' return expr()
07d64     08 41 B0 FD | 	call	#_expr
07d68     3D B1 02 F6 | 	mov	local06, result1
07d6c     A4 03 90 FD | 	jmp	#LR__0735
07d70                 | LR__0667
07d70                 | ' return expr()
07d70     FC 40 B0 FD | 	call	#_expr
07d74     3D B1 02 F6 | 	mov	local06, result1
07d78     98 03 90 FD | 	jmp	#LR__0735
07d7c                 | LR__0668
07d7c     84 0A B0 FD | 	call	#_compile_fun_2p
07d80     3D B1 02 F6 | 	mov	local06, result1
07d84     8C 03 90 FD | 	jmp	#LR__0735
07d88                 | LR__0669
07d88     48 0D B0 FD | 	call	#_compile_fun_varp
07d8c     3D B5 02 F6 | 	mov	local08, result1
07d90     3E B1 02 F6 | 	mov	local06, result2
07d94     7C 03 90 FD | 	jmp	#LR__0735
07d98                 | LR__0670
07d98     38 0D B0 FD | 	call	#_compile_fun_varp
07d9c     3D B5 02 F6 | 	mov	local08, result1
07da0     3E B1 02 F6 | 	mov	local06, result2
07da4     6C 03 90 FD | 	jmp	#LR__0735
07da8                 | LR__0671
07da8     28 0D B0 FD | 	call	#_compile_fun_varp
07dac     3D B5 02 F6 | 	mov	local08, result1
07db0     3E B1 02 F6 | 	mov	local06, result2
07db4     5C 03 90 FD | 	jmp	#LR__0735
07db8                 | LR__0672
07db8                 | ' return expr()
07db8     B4 40 B0 FD | 	call	#_expr
07dbc     3D B1 02 F6 | 	mov	local06, result1
07dc0     50 03 90 FD | 	jmp	#LR__0735
07dc4                 | LR__0673
07dc4     2C 22 B0 FD | 	call	#_compile_dim
07dc8     3D B1 02 F6 | 	mov	local06, result1
07dcc     00 04 90 FD | 	jmp	#LR__0736
07dd0                 | LR__0674
07dd0     00 0D B0 FD | 	call	#_compile_fun_varp
07dd4     3D B5 02 F6 | 	mov	local08, result1
07dd8     3E B1 02 F6 | 	mov	local06, result2
07ddc     34 03 90 FD | 	jmp	#LR__0735
07de0                 | LR__0675
07de0     20 0A B0 FD | 	call	#_compile_fun_2p
07de4     3D B1 02 F6 | 	mov	local06, result1
07de8     28 03 90 FD | 	jmp	#LR__0735
07dec                 | LR__0676
07dec     E4 0C B0 FD | 	call	#_compile_fun_varp
07df0     3D B5 02 F6 | 	mov	local08, result1
07df4     3E B1 02 F6 | 	mov	local06, result2
07df8     18 03 90 FD | 	jmp	#LR__0735
07dfc                 | LR__0677
07dfc     57 93 02 F6 | 	mov	arg01, local05
07e00     B8 20 B0 FD | 	call	#_compile_else
07e04     3D B1 02 F6 | 	mov	local06, result1
07e08     C4 03 90 FD | 	jmp	#LR__0736
07e0c                 | LR__0678
07e0c     C4 0C B0 FD | 	call	#_compile_fun_varp
07e10     3D B5 02 F6 | 	mov	local08, result1
07e14     3E B1 02 F6 | 	mov	local06, result2
07e18     F8 02 90 FD | 	jmp	#LR__0735
07e1c                 | LR__0679
07e1c     B4 0C B0 FD | 	call	#_compile_fun_varp
07e20     3D B5 02 F6 | 	mov	local08, result1
07e24     3E B1 02 F6 | 	mov	local06, result2
07e28     E8 02 90 FD | 	jmp	#LR__0735
07e2c                 | LR__0680
07e2c     01 AE 16 F2 | 	cmp	local05, #1 wc
07e30     08 00 90 CD |  if_b	jmp	#LR__0681
07e34     40 33 B0 FD | 	call	#_compile_goto
07e38     94 03 90 FD | 	jmp	#LR__0736
07e3c                 | LR__0681
07e3c     19 92 06 F6 | 	mov	arg01, #25
07e40     00 94 06 F6 | 	mov	arg02, #0
07e44     F4 91 B1 FD | 	call	#_printerror
07e48     84 03 90 FD | 	jmp	#LR__0736
07e4c                 | LR__0682
07e4c     01 AE 16 F2 | 	cmp	local05, #1 wc
07e50     08 00 90 CD |  if_b	jmp	#LR__0683
07e54     BC 32 B0 FD | 	call	#_compile_gosub
07e58     74 03 90 FD | 	jmp	#LR__0736
07e5c                 | LR__0683
07e5c     19 92 06 F6 | 	mov	arg01, #25
07e60     00 94 06 F6 | 	mov	arg02, #0
07e64     D4 91 B1 FD | 	call	#_printerror
07e68     64 03 90 FD | 	jmp	#LR__0736
07e6c                 | LR__0684
07e6c     64 0C B0 FD | 	call	#_compile_fun_varp
07e70     3D B5 02 F6 | 	mov	local08, result1
07e74     3E B1 02 F6 | 	mov	local06, result2
07e78     98 02 90 FD | 	jmp	#LR__0735
07e7c                 | LR__0685
07e7c     FC 0A B0 FD | 	call	#_compile_fun_4p
07e80     3D B1 02 F6 | 	mov	local06, result1
07e84     8C 02 90 FD | 	jmp	#LR__0735
07e88                 | LR__0686
07e88                 | ' return expr()
07e88     E4 3F B0 FD | 	call	#_expr
07e8c     3D B1 02 F6 | 	mov	local06, result1
07e90     80 02 90 FD | 	jmp	#LR__0735
07e94                 | LR__0687
07e94     10 28 B0 FD | 	call	#_compile_for
07e98     3D B1 02 F6 | 	mov	local06, result1
07e9c     30 03 90 FD | 	jmp	#LR__0736
07ea0                 | LR__0688
07ea0     30 0C B0 FD | 	call	#_compile_fun_varp
07ea4     3D B5 02 F6 | 	mov	local08, result1
07ea8     3E B1 02 F6 | 	mov	local06, result2
07eac     64 02 90 FD | 	jmp	#LR__0735
07eb0                 | LR__0689
07eb0     57 93 02 F6 | 	mov	arg01, local05
07eb4     7C 1E B0 FD | 	call	#_compile_if
07eb8     3D B1 02 F6 | 	mov	local06, result1
07ebc     10 03 90 FD | 	jmp	#LR__0736
07ec0                 | LR__0690
07ec0                 | ' return expr()
07ec0     AC 3F B0 FD | 	call	#_expr
07ec4     3D B1 02 F6 | 	mov	local06, result1
07ec8     48 02 90 FD | 	jmp	#LR__0735
07ecc                 | LR__0691
07ecc     D0 0D B0 FD | 	call	#_compile_input
07ed0     3D B5 02 F6 | 	mov	local08, result1
07ed4     3E B1 02 F6 | 	mov	local06, result2
07ed8     38 02 90 FD | 	jmp	#LR__0735
07edc                 | LR__0692
07edc                 | ' return expr()
07edc     90 3F B0 FD | 	call	#_expr
07ee0     3D B1 02 F6 | 	mov	local06, result1
07ee4     2C 02 90 FD | 	jmp	#LR__0735
07ee8                 | LR__0693
07ee8     E8 0B B0 FD | 	call	#_compile_fun_varp
07eec     3D B5 02 F6 | 	mov	local08, result1
07ef0     3E B1 02 F6 | 	mov	local06, result2
07ef4     1C 02 90 FD | 	jmp	#LR__0735
07ef8                 | LR__0694
07ef8     D8 0B B0 FD | 	call	#_compile_fun_varp
07efc     3D B5 02 F6 | 	mov	local08, result1
07f00     3E B1 02 F6 | 	mov	local06, result2
07f04     0C 02 90 FD | 	jmp	#LR__0735
07f08                 | LR__0695
07f08     F8 08 B0 FD | 	call	#_compile_fun_2p
07f0c     3D B1 02 F6 | 	mov	local06, result1
07f10     00 02 90 FD | 	jmp	#LR__0735
07f14                 | LR__0696
07f14                 | ' return expr()
07f14     58 3F B0 FD | 	call	#_expr
07f18     3D B1 02 F6 | 	mov	local06, result1
07f1c     F4 01 90 FD | 	jmp	#LR__0735
07f20                 | LR__0697
07f20                 | ' return expr()
07f20     4C 3F B0 FD | 	call	#_expr
07f24     3D B1 02 F6 | 	mov	local06, result1
07f28     E8 01 90 FD | 	jmp	#LR__0735
07f2c                 | LR__0698
07f2c                 | ' return expr()
07f2c     40 3F B0 FD | 	call	#_expr
07f30     3D B1 02 F6 | 	mov	local06, result1
07f34     DC 01 90 FD | 	jmp	#LR__0735
07f38                 | LR__0699
07f38     44 30 B0 FD | 	call	#_compile_next
07f3c     3D B1 02 F6 | 	mov	local06, result1
07f40     8C 02 90 FD | 	jmp	#LR__0736
07f44                 | LR__0700
07f44     A4 35 B0 FD | 	call	#_compile_on
07f48     3D B1 02 F6 | 	mov	local06, result1
07f4c     80 02 90 FD | 	jmp	#LR__0736
07f50                 | LR__0701
07f50     38 09 B0 FD | 	call	#_compile_fun_3p
07f54     3D B1 02 F6 | 	mov	local06, result1
07f58     B8 01 90 FD | 	jmp	#LR__0735
07f5c                 | LR__0702
07f5c                 | ' return expr()
07f5c     10 3F B0 FD | 	call	#_expr
07f60     3D B1 02 F6 | 	mov	local06, result1
07f64     AC 01 90 FD | 	jmp	#LR__0735
07f68                 | LR__0703
07f68                 | ' return expr()
07f68     04 3F B0 FD | 	call	#_expr
07f6c     3D B1 02 F6 | 	mov	local06, result1
07f70     A0 01 90 FD | 	jmp	#LR__0735
07f74                 | LR__0704
07f74                 | ' return expr()
07f74     F8 3E B0 FD | 	call	#_expr
07f78     3D B1 02 F6 | 	mov	local06, result1
07f7c     94 01 90 FD | 	jmp	#LR__0735
07f80                 | LR__0705
07f80                 | ' return expr()
07f80     EC 3E B0 FD | 	call	#_expr
07f84     3D B1 02 F6 | 	mov	local06, result1
07f88     88 01 90 FD | 	jmp	#LR__0735
07f8c                 | LR__0706
07f8c     EC 09 B0 FD | 	call	#_compile_fun_4p
07f90     3D B1 02 F6 | 	mov	local06, result1
07f94     7C 01 90 FD | 	jmp	#LR__0735
07f98                 | LR__0707
07f98                 | ' return expr()
07f98     D4 3E B0 FD | 	call	#_expr
07f9c     3D B1 02 F6 | 	mov	local06, result1
07fa0     70 01 90 FD | 	jmp	#LR__0735
07fa4                 | LR__0708
07fa4     5C 08 B0 FD | 	call	#_compile_fun_2p
07fa8     3D B1 02 F6 | 	mov	local06, result1
07fac     64 01 90 FD | 	jmp	#LR__0735
07fb0                 | LR__0709
07fb0     20 0B B0 FD | 	call	#_compile_fun_varp
07fb4     3D B5 02 F6 | 	mov	local08, result1
07fb8     3E B1 02 F6 | 	mov	local06, result2
07fbc     54 01 90 FD | 	jmp	#LR__0735
07fc0                 | LR__0710
07fc0     10 0B B0 FD | 	call	#_compile_fun_varp
07fc4     3D B5 02 F6 | 	mov	local08, result1
07fc8     3E B1 02 F6 | 	mov	local06, result2
07fcc     44 01 90 FD | 	jmp	#LR__0735
07fd0                 | LR__0711
07fd0     30 08 B0 FD | 	call	#_compile_fun_2p
07fd4     3D B1 02 F6 | 	mov	local06, result1
07fd8     38 01 90 FD | 	jmp	#LR__0735
07fdc                 | LR__0712
07fdc     24 08 B0 FD | 	call	#_compile_fun_2p
07fe0     3D B1 02 F6 | 	mov	local06, result1
07fe4     2C 01 90 FD | 	jmp	#LR__0735
07fe8                 | LR__0713
07fe8     70 16 B0 FD | 	call	#_compile_print
07fec     3D B1 02 F6 | 	mov	local06, result1
07ff0     DC 01 90 FD | 	jmp	#LR__0736
07ff4                 | LR__0714
07ff4     DC 0A B0 FD | 	call	#_compile_fun_varp
07ff8     3D B5 02 F6 | 	mov	local08, result1
07ffc     3E B1 02 F6 | 	mov	local06, result2
08000     10 01 90 FD | 	jmp	#LR__0735
08004                 | LR__0715
08004     A8 0B B0 FD | 	call	#_compile_read
08008     3D B5 02 F6 | 	mov	local08, result1
0800c     3E B1 02 F6 | 	mov	local06, result2
08010     00 01 90 FD | 	jmp	#LR__0735
08014                 | LR__0716
08014                 | ' return expr()
08014     58 3E B0 FD | 	call	#_expr
08018     3D B1 02 F6 | 	mov	local06, result1
0801c     F4 00 90 FD | 	jmp	#LR__0735
08020                 | LR__0717
08020     B0 0A B0 FD | 	call	#_compile_fun_varp
08024     3D B5 02 F6 | 	mov	local08, result1
08028     3E B1 02 F6 | 	mov	local06, result2
0802c     E4 00 90 FD | 	jmp	#LR__0735
08030                 | LR__0718
08030     A0 0A B0 FD | 	call	#_compile_fun_varp
08034     3D B5 02 F6 | 	mov	local08, result1
08038     3E B1 02 F6 | 	mov	local06, result2
0803c     D4 00 90 FD | 	jmp	#LR__0735
08040                 | LR__0719
08040     C0 07 B0 FD | 	call	#_compile_fun_2p
08044     3D B1 02 F6 | 	mov	local06, result1
08048     C8 00 90 FD | 	jmp	#LR__0735
0804c                 | LR__0720
0804c     84 0A B0 FD | 	call	#_compile_fun_varp
08050     3D B5 02 F6 | 	mov	local08, result1
08054     3E B1 02 F6 | 	mov	local06, result2
08058     B8 00 90 FD | 	jmp	#LR__0735
0805c                 | LR__0721
0805c     A4 07 B0 FD | 	call	#_compile_fun_2p
08060     3D B1 02 F6 | 	mov	local06, result1
08064     AC 00 90 FD | 	jmp	#LR__0735
08068                 | LR__0722
08068     98 07 B0 FD | 	call	#_compile_fun_2p
0806c     3D B1 02 F6 | 	mov	local06, result1
08070     A0 00 90 FD | 	jmp	#LR__0735
08074                 | LR__0723
08074     8C 07 B0 FD | 	call	#_compile_fun_2p
08078     3D B1 02 F6 | 	mov	local06, result1
0807c     94 00 90 FD | 	jmp	#LR__0735
08080                 | LR__0724
08080     80 07 B0 FD | 	call	#_compile_fun_2p
08084     3D B1 02 F6 | 	mov	local06, result1
08088     88 00 90 FD | 	jmp	#LR__0735
0808c                 | LR__0725
0808c     74 07 B0 FD | 	call	#_compile_fun_2p
08090     3D B1 02 F6 | 	mov	local06, result1
08094     7C 00 90 FD | 	jmp	#LR__0735
08098                 | LR__0726
08098     68 07 B0 FD | 	call	#_compile_fun_2p
0809c     3D B1 02 F6 | 	mov	local06, result1
080a0     70 00 90 FD | 	jmp	#LR__0735
080a4                 | LR__0727
080a4     5C 07 B0 FD | 	call	#_compile_fun_2p
080a8     3D B1 02 F6 | 	mov	local06, result1
080ac     64 00 90 FD | 	jmp	#LR__0735
080b0                 | LR__0728
080b0     20 0A B0 FD | 	call	#_compile_fun_varp
080b4     3D B5 02 F6 | 	mov	local08, result1
080b8     3E B1 02 F6 | 	mov	local06, result2
080bc     54 00 90 FD | 	jmp	#LR__0735
080c0                 | LR__0729
080c0     C8 07 B0 FD | 	call	#_compile_fun_3p
080c4     3D B1 02 F6 | 	mov	local06, result1
080c8     48 00 90 FD | 	jmp	#LR__0735
080cc                 | LR__0730
080cc                 | ' return expr()
080cc     A0 3D B0 FD | 	call	#_expr
080d0     3D B1 02 F6 | 	mov	local06, result1
080d4     3C 00 90 FD | 	jmp	#LR__0735
080d8                 | LR__0731
080d8     28 07 B0 FD | 	call	#_compile_fun_2p
080dc     3D B1 02 F6 | 	mov	local06, result1
080e0     30 00 90 FD | 	jmp	#LR__0735
080e4                 | LR__0732
080e4     1C 07 B0 FD | 	call	#_compile_fun_2p
080e8     3D B1 02 F6 | 	mov	local06, result1
080ec     24 00 90 FD | 	jmp	#LR__0735
080f0                 | LR__0733
080f0     10 07 B0 FD | 	call	#_compile_fun_2p
080f4     3D B1 02 F6 | 	mov	local06, result1
080f8     18 00 90 FD | 	jmp	#LR__0735
080fc                 | LR__0734
080fc     00 13 B0 FD | 	call	#_compile_array_assign
08100     3D B1 02 F6 | 	mov	local06, result1
08104     0E B0 0E F2 | 	cmp	local06, #14 wz
08108     C4 00 90 5D |  if_ne	jmp	#LR__0736
0810c                 | ' return 23
0810c     17 B0 06 F6 | 	mov	local06, #23
08110     BC 00 90 FD | 	jmp	#LR__0736
08114                 | ' return 23
08114                 | LR__0735
08114     59 AB 02 F6 | 	mov	local03, local07
08118     5A A7 02 F6 | 	mov	local01, local08
0811c     53 B7 02 F6 | 	mov	local09, local01
08120     54 B9 02 F6 | 	mov	local10, local02
08124     55 B3 02 F6 | 	mov	local07, local03
08128     4B 00 00 FF 
0812c     9C 64 06 F1 | 	add	objptr, ##38556
08130     32 A7 02 FB | 	rdlong	local01, objptr
08134     53 B5 02 F6 | 	mov	local08, local01
08138     01 B4 66 F0 | 	shl	local08, #1
0813c     53 B5 02 F1 | 	add	local08, local01
08140     02 B4 66 F0 | 	shl	local08, #2
08144     03 00 00 FF 
08148     00 64 86 F1 | 	sub	objptr, ##1536
0814c     32 B5 02 F1 | 	add	local08, objptr
08150     5A B7 62 FC | 	wrlong	local09, local08
08154     03 00 00 FF 
08158     00 64 06 F1 | 	add	objptr, ##1536
0815c     32 A7 02 FB | 	rdlong	local01, objptr
08160     53 B7 02 F6 | 	mov	local09, local01
08164     01 B6 66 F0 | 	shl	local09, #1
08168     53 B7 02 F1 | 	add	local09, local01
0816c     02 B6 66 F0 | 	shl	local09, #2
08170     03 00 00 FF 
08174     00 64 86 F1 | 	sub	objptr, ##1536
08178     32 B7 02 F1 | 	add	local09, objptr
0817c     04 B6 06 F1 | 	add	local09, #4
08180     5B B9 62 FC | 	wrlong	local10, local09
08184     03 00 00 FF 
08188     00 64 06 F1 | 	add	objptr, ##1536
0818c     32 A7 02 FB | 	rdlong	local01, objptr
08190     53 B9 02 F6 | 	mov	local10, local01
08194     01 B8 66 F0 | 	shl	local10, #1
08198     53 B9 02 F1 | 	add	local10, local01
0819c     02 B8 66 F0 | 	shl	local10, #2
081a0     03 00 00 FF 
081a4     00 64 86 F1 | 	sub	objptr, ##1536
081a8     32 B9 02 F1 | 	add	local10, objptr
081ac     08 B8 06 F1 | 	add	local10, #8
081b0     5C B3 62 FC | 	wrlong	local07, local10
081b4     03 00 00 FF 
081b8     00 64 06 F1 | 	add	objptr, ##1536
081bc     32 B7 02 FB | 	rdlong	local09, objptr
081c0     01 B6 06 F1 | 	add	local09, #1
081c4     32 B7 62 FC | 	wrlong	local09, objptr
081c8     4B 00 00 FF 
081cc     9C 64 86 F1 | 	sub	objptr, ##38556
081d0                 | LR__0736
081d0                 | ' 
081d0                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
081d0                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
081d0     03 AC 0E F2 | 	cmp	local04, #3 wz
081d4     04 AC 0E 52 |  if_ne	cmp	local04, #4 wz
081d8     38 00 90 5D |  if_ne	jmp	#LR__0737
081dc     4B 00 00 FF 
081e0     9C 64 06 F1 | 	add	objptr, ##38556
081e4     32 B9 02 FB | 	rdlong	local10, objptr
081e8     5C A7 02 F6 | 	mov	local01, local10
081ec     01 A6 66 F0 | 	shl	local01, #1
081f0     5C A7 02 F1 | 	add	local01, local10
081f4     02 A6 66 F0 | 	shl	local01, #2
081f8     03 00 00 FF 
081fc     00 64 86 F1 | 	sub	objptr, ##1536
08200     32 A7 02 F1 | 	add	local01, objptr
08204     08 A6 06 F1 | 	add	local01, #8
08208     53 FD 6B FC | 	wrlong	#510, local01
0820c     48 00 00 FF 
08210     9C 64 86 F1 | 	sub	objptr, ##37020
08214                 | LR__0737
08214                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
08214                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08214     4B 00 00 FF 
08218     9C 64 06 F1 | 	add	objptr, ##38556
0821c     32 A7 02 FB | 	rdlong	local01, objptr
08220     4B 00 00 FF 
08224     9C 64 86 F1 | 	sub	objptr, ##38556
08228     D7 52 48 FB | 	callpa	#(@LR__0740-@LR__0738)>>2,fcache_load_ptr_
0822c                 | LR__0738
0822c     53 B7 02 F6 | 	mov	local09, local01
08230     01 B6 66 F0 | 	shl	local09, #1
08234     53 B7 02 F1 | 	add	local09, local01
08238     02 B6 66 F0 | 	shl	local09, #2
0823c     32 B9 02 F6 | 	mov	local10, objptr
08240     48 00 00 FF 
08244     9C B8 06 F1 | 	add	local10, ##37020
08248     5C B7 02 F1 | 	add	local09, local10
0824c     08 B6 06 F1 | 	add	local09, #8
08250     5B B7 02 FB | 	rdlong	local09, local09
08254     9B B6 0E F2 | 	cmp	local09, #155 wz
08258     68 00 90 5D |  if_ne	jmp	#LR__0739
0825c     53 B7 02 F6 | 	mov	local09, local01
08260     01 B6 86 F1 | 	sub	local09, #1
08264     5B B9 02 F6 | 	mov	local10, local09
08268     01 B8 66 F0 | 	shl	local10, #1
0826c     5B B9 02 F1 | 	add	local10, local09
08270     02 B8 66 F0 | 	shl	local10, #2
08274     32 B7 02 F6 | 	mov	local09, objptr
08278     48 00 00 FF 
0827c     9C B6 06 F1 | 	add	local09, ##37020
08280     5B B9 02 F1 | 	add	local10, local09
08284     08 B8 06 F1 | 	add	local10, #8
08288     5C B9 02 FB | 	rdlong	local10, local10
0828c     11 B8 0E F2 | 	cmp	local10, #17 wz
08290     30 00 90 5D |  if_ne	jmp	#LR__0739
08294     53 B7 02 F6 | 	mov	local09, local01
08298     01 B6 86 F1 | 	sub	local09, #1
0829c     5B B9 02 F6 | 	mov	local10, local09
082a0     01 B8 66 F0 | 	shl	local10, #1
082a4     5B B9 02 F1 | 	add	local10, local09
082a8     02 B8 66 F0 | 	shl	local10, #2
082ac     32 B7 02 F6 | 	mov	local09, objptr
082b0     48 00 00 FF 
082b4     9C B6 06 F1 | 	add	local09, ##37020
082b8     5B B9 02 F1 | 	add	local10, local09
082bc     08 B8 06 F1 | 	add	local10, #8
082c0     5C 25 68 FC | 	wrlong	#18, local10
082c4                 | LR__0739
082c4     01 A6 86 F1 | 	sub	local01, #1
082c8     01 A6 56 F2 | 	cmps	local01, #1 wc
082cc     5C FF 9F 3D |  if_ae	jmp	#LR__0738
082d0                 | LR__0740
082d0                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
082d0                 | ' return err
082d0     58 7B 02 F6 | 	mov	result1, local06
082d4     E7 F0 03 F6 | 	mov	ptra, fp
082d8     F2 00 A0 FD | 	call	#popregs_
082dc                 | _compile_immediate_ret
082dc     2D 00 64 FD | 	ret
082e0                 | 
082e0                 | ' 
082e0                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
082e0                 | ' 
082e0                 | ' function compile_immediate_assign(linetype as ulong) as ulong
082e0                 | _compile_immediate_assign
082e0     0C CA 05 F6 | 	mov	COUNT_, #12
082e4     E8 00 A0 FD | 	call	#pushregs_
082e8     49 AD 02 F6 | 	mov	local04, arg01
082ec     FF AA 06 F6 | 	mov	local03, #255
082f0     01 AE 66 F6 | 	neg	local05, #1
082f4     00 B0 06 F6 | 	mov	local06, #0
082f8                 | ' 
082f8                 | ' t1.result_type=result_error : t1.result.uresult=0
082f8                 | ' i=-1: j=-1 : err=0
082f8                 | ' 
082f8                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
082f8     02 AC 0E F2 | 	cmp	local04, #2 wz
082fc     03 AC 0E 52 |  if_ne	cmp	local04, #3 wz
08300     36 00 00 AF 
08304     2C 64 06 A1 |  if_e	add	objptr, ##27692
08308     32 B3 02 AB |  if_e	rdlong	local07, objptr
0830c     02 00 00 AF 
08310     38 64 06 A1 |  if_e	add	objptr, ##1080
08314     32 05 68 AC |  if_e	wrlong	#2, objptr
08318     38 00 00 AF 
0831c     64 64 86 A1 |  if_e	sub	objptr, ##28772
08320                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
08320     04 AC 0E F2 | 	cmp	local04, #4 wz
08324     01 AC 0E 52 |  if_ne	cmp	local04, #1 wz
08328     2C 00 90 5D |  if_ne	jmp	#LR__0750
0832c     36 00 00 FF 
08330     34 64 06 F1 | 	add	objptr, ##27700
08334     32 B3 02 FB | 	rdlong	local07, objptr
08338     02 00 00 FF 
0833c     30 64 06 F1 | 	add	objptr, ##1072
08340     32 07 68 FC | 	wrlong	#3, objptr
08344     13 00 00 FF 
08348     38 64 06 F1 | 	add	objptr, ##9784
0834c     32 05 68 FC | 	wrlong	#2, objptr
08350     4B 00 00 FF 
08354     9C 64 86 F1 | 	sub	objptr, ##38556
08358                 | LR__0750
08358                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
08358     05 AC 0E F2 | 	cmp	local04, #5 wz
0835c     3C 00 90 5D |  if_ne	jmp	#LR__0751
08360     38 00 00 FF 
08364     64 64 06 F1 | 	add	objptr, ##28772
08368     32 7B 02 FB | 	rdlong	result1, objptr
0836c     3D B3 02 F6 | 	mov	local07, result1
08370     03 B2 66 F0 | 	shl	local07, #3
08374     02 00 00 FF 
08378     38 64 86 F1 | 	sub	objptr, ##1080
0837c     32 B3 02 F1 | 	add	local07, objptr
08380     59 B3 02 FB | 	rdlong	local07, local07
08384     02 7A 06 F1 | 	add	result1, #2
08388     02 00 00 FF 
0838c     38 64 06 F1 | 	add	objptr, ##1080
08390     32 7B 62 FC | 	wrlong	result1, objptr
08394     38 00 00 FF 
08398     64 64 86 F1 | 	sub	objptr, ##28772
0839c                 | LR__0751
0839c     59 93 02 F6 | 	mov	arg01, local07
083a0     01 94 06 F6 | 	mov	arg02, #1
083a4     40 DF B1 FD | 	call	#__system__Right_S
083a8     3D B5 02 F6 | 	mov	local08, result1
083ac     C0 3A B0 FD | 	call	#_expr
083b0                 | ' 
083b0                 | ' suffix2$=right$(varname2$,1)
083b0                 | ' expr()
083b0                 | ' if varnum>0 then					' try to find a variable
083b0     36 00 00 FF 
083b4     28 64 06 F1 | 	add	objptr, ##27688
083b8     32 B7 02 FB | 	rdlong	local09, objptr
083bc     36 00 00 FF 
083c0     28 64 86 F1 | 	sub	objptr, ##27688
083c4     01 B6 56 F2 | 	cmps	local09, #1 wc
083c8     54 00 90 CD |  if_b	jmp	#LR__0754
083cc                 | '   for i=0 to varnum-1
083cc     00 B8 06 F6 | 	mov	local10, #0
083d0     36 00 00 FF 
083d4     28 64 06 F1 | 	add	objptr, ##27688
083d8     32 BB 02 FB | 	rdlong	local11, objptr
083dc     36 00 00 FF 
083e0     28 64 86 F1 | 	sub	objptr, ##27688
083e4                 | LR__0752
083e4     5D B9 52 F2 | 	cmps	local10, local11 wc
083e8     34 00 90 3D |  if_ae	jmp	#LR__0753
083ec                 | '     if variables(i).name=varname2$ then j=i : exit
083ec     5C B7 02 F6 | 	mov	local09, local10
083f0     04 B6 66 F0 | 	shl	local09, #4
083f4     32 95 02 F6 | 	mov	arg02, objptr
083f8     16 00 00 FF 
083fc     18 94 06 F1 | 	add	arg02, ##11288
08400     4A B7 02 F1 | 	add	local09, arg02
08404     5B 93 02 FB | 	rdlong	arg01, local09
08408     59 95 02 F6 | 	mov	arg02, local07
0840c     D0 C5 B1 FD | 	call	#__system___string_cmp
08410     00 7A 0E F2 | 	cmp	result1, #0 wz
08414     5C AF 02 A6 |  if_e	mov	local05, local10
08418     01 B8 06 51 |  if_ne	add	local10, #1
0841c     C4 FF 9F 5D |  if_ne	jmp	#LR__0752
08420                 | LR__0753
08420                 | LR__0754
08420                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
08420     FF FF 7F FF 
08424     FF AF 0E F2 | 	cmp	local05, ##-1 wz
08428     60 00 90 5D |  if_ne	jmp	#LR__0755
0842c     36 00 00 FF 
08430     28 64 06 F1 | 	add	objptr, ##27688
08434     32 B7 02 FB | 	rdlong	local09, objptr
08438     36 00 00 FF 
0843c     28 64 86 F1 | 	sub	objptr, ##27688
08440     02 00 00 FF 
08444     00 B6 56 F2 | 	cmps	local09, ##1024 wc
08448     40 00 90 3D |  if_ae	jmp	#LR__0755
0844c     36 00 00 FF 
08450     28 64 06 F1 | 	add	objptr, ##27688
08454     32 BB 02 FB | 	rdlong	local11, objptr
08458     04 BA 66 F0 | 	shl	local11, #4
0845c     20 00 00 FF 
08460     10 64 86 F1 | 	sub	objptr, ##16400
08464     32 BB 02 F1 | 	add	local11, objptr
08468     5D B3 62 FC | 	wrlong	local07, local11
0846c     20 00 00 FF 
08470     10 64 06 F1 | 	add	objptr, ##16400
08474     32 B7 02 FB | 	rdlong	local09, objptr
08478     5B AF 02 F6 | 	mov	local05, local09
0847c     01 B6 06 F1 | 	add	local09, #1
08480     32 B7 62 FC | 	wrlong	local09, objptr
08484     36 00 00 FF 
08488     28 64 86 F1 | 	sub	objptr, ##27688
0848c                 | LR__0755
0848c                 | ' if varnum>=maxvars then
0848c     36 00 00 FF 
08490     28 64 06 F1 | 	add	objptr, ##27688
08494     32 B7 02 FB | 	rdlong	local09, objptr
08498     36 00 00 FF 
0849c     28 64 86 F1 | 	sub	objptr, ##27688
084a0     02 00 00 FF 
084a4     00 B6 56 F2 | 	cmps	local09, ##1024 wc
084a8     2D B0 06 36 |  if_ae	mov	local06, #45
084ac     BC 01 90 3D |  if_ae	jmp	#LR__0760
084b0     57 A7 02 F6 | 	mov	local01, local05
084b4     17 AA 06 F6 | 	mov	local03, #23
084b8     53 B7 02 F6 | 	mov	local09, local01
084bc     54 BD 02 F6 | 	mov	local12, local02
084c0     55 A7 02 F6 | 	mov	local01, local03
084c4     4B 00 00 FF 
084c8     9C 64 06 F1 | 	add	objptr, ##38556
084cc     32 BB 02 FB | 	rdlong	local11, objptr
084d0     5D B9 02 F6 | 	mov	local10, local11
084d4     01 B8 66 F0 | 	shl	local10, #1
084d8     5D B9 02 F1 | 	add	local10, local11
084dc     02 B8 66 F0 | 	shl	local10, #2
084e0     03 00 00 FF 
084e4     00 64 86 F1 | 	sub	objptr, ##1536
084e8     32 B9 02 F1 | 	add	local10, objptr
084ec     5C B7 62 FC | 	wrlong	local09, local10
084f0     03 00 00 FF 
084f4     00 64 06 F1 | 	add	objptr, ##1536
084f8     32 B7 02 FB | 	rdlong	local09, objptr
084fc     5B BB 02 F6 | 	mov	local11, local09
08500     01 BA 66 F0 | 	shl	local11, #1
08504     5B BB 02 F1 | 	add	local11, local09
08508     02 BA 66 F0 | 	shl	local11, #2
0850c     03 00 00 FF 
08510     00 64 86 F1 | 	sub	objptr, ##1536
08514     32 BB 02 F1 | 	add	local11, objptr
08518     04 BA 06 F1 | 	add	local11, #4
0851c     5D BD 62 FC | 	wrlong	local12, local11
08520     03 00 00 FF 
08524     00 64 06 F1 | 	add	objptr, ##1536
08528     32 B7 02 FB | 	rdlong	local09, objptr
0852c     5B BD 02 F6 | 	mov	local12, local09
08530     01 BC 66 F0 | 	shl	local12, #1
08534     5B BD 02 F1 | 	add	local12, local09
08538     02 BC 66 F0 | 	shl	local12, #2
0853c     03 00 00 FF 
08540     00 64 86 F1 | 	sub	objptr, ##1536
08544     32 BD 02 F1 | 	add	local12, objptr
08548     08 BC 06 F1 | 	add	local12, #8
0854c     5E A7 62 FC | 	wrlong	local01, local12
08550     03 00 00 FF 
08554     00 64 06 F1 | 	add	objptr, ##1536
08558     32 B7 02 FB | 	rdlong	local09, objptr
0855c     01 B6 06 F1 | 	add	local09, #1
08560     32 B7 62 FC | 	wrlong	local09, objptr
08564     4B 00 00 FF 
08568     9C 64 86 F1 | 	sub	objptr, ##38556
0856c                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
0856c                 | '   compiledline(lineptr)=t1:  lineptr+=1 
0856c                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
0856c     03 AC 0E F2 | 	cmp	local04, #3 wz
08570     04 AC 0E 52 |  if_ne	cmp	local04, #4 wz
08574     38 00 90 5D |  if_ne	jmp	#LR__0756
08578     4B 00 00 FF 
0857c     9C 64 06 F1 | 	add	objptr, ##38556
08580     32 BD 02 FB | 	rdlong	local12, objptr
08584     5E A7 02 F6 | 	mov	local01, local12
08588     01 A6 66 F0 | 	shl	local01, #1
0858c     5E A7 02 F1 | 	add	local01, local12
08590     02 A6 66 F0 | 	shl	local01, #2
08594     03 00 00 FF 
08598     00 64 86 F1 | 	sub	objptr, ##1536
0859c     32 A7 02 F1 | 	add	local01, objptr
085a0     08 A6 06 F1 | 	add	local01, #8
085a4     53 FD 6B FC | 	wrlong	#510, local01
085a8     48 00 00 FF 
085ac     9C 64 86 F1 | 	sub	objptr, ##37020
085b0                 | LR__0756
085b0                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
085b0     4B 00 00 FF 
085b4     9C 64 06 F1 | 	add	objptr, ##38556
085b8     32 B9 02 FB | 	rdlong	local10, objptr
085bc     4B 00 00 FF 
085c0     9C 64 86 F1 | 	sub	objptr, ##38556
085c4     D7 52 48 FB | 	callpa	#(@LR__0759-@LR__0757)>>2,fcache_load_ptr_
085c8                 | LR__0757
085c8     5C BD 02 F6 | 	mov	local12, local10
085cc     01 BC 66 F0 | 	shl	local12, #1
085d0     5C BD 02 F1 | 	add	local12, local10
085d4     02 BC 66 F0 | 	shl	local12, #2
085d8     32 A7 02 F6 | 	mov	local01, objptr
085dc     48 00 00 FF 
085e0     9C A6 06 F1 | 	add	local01, ##37020
085e4     53 BD 02 F1 | 	add	local12, local01
085e8     08 BC 06 F1 | 	add	local12, #8
085ec     5E BD 02 FB | 	rdlong	local12, local12
085f0     9B BC 0E F2 | 	cmp	local12, #155 wz
085f4     68 00 90 5D |  if_ne	jmp	#LR__0758
085f8     5C BD 02 F6 | 	mov	local12, local10
085fc     01 BC 86 F1 | 	sub	local12, #1
08600     5E A7 02 F6 | 	mov	local01, local12
08604     01 A6 66 F0 | 	shl	local01, #1
08608     5E A7 02 F1 | 	add	local01, local12
0860c     02 A6 66 F0 | 	shl	local01, #2
08610     32 BD 02 F6 | 	mov	local12, objptr
08614     48 00 00 FF 
08618     9C BC 06 F1 | 	add	local12, ##37020
0861c     5E A7 02 F1 | 	add	local01, local12
08620     08 A6 06 F1 | 	add	local01, #8
08624     53 A7 02 FB | 	rdlong	local01, local01
08628     11 A6 0E F2 | 	cmp	local01, #17 wz
0862c     30 00 90 5D |  if_ne	jmp	#LR__0758
08630     5C BD 02 F6 | 	mov	local12, local10
08634     01 BC 86 F1 | 	sub	local12, #1
08638     5E A7 02 F6 | 	mov	local01, local12
0863c     01 A6 66 F0 | 	shl	local01, #1
08640     5E A7 02 F1 | 	add	local01, local12
08644     02 A6 66 F0 | 	shl	local01, #2
08648     32 BD 02 F6 | 	mov	local12, objptr
0864c     48 00 00 FF 
08650     9C BC 06 F1 | 	add	local12, ##37020
08654     5E A7 02 F1 | 	add	local01, local12
08658     08 A6 06 F1 | 	add	local01, #8
0865c     53 25 68 FC | 	wrlong	#18, local01
08660                 | LR__0758
08660     01 B8 86 F1 | 	sub	local10, #1
08664     01 B8 56 F2 | 	cmps	local10, #1 wc
08668     5C FF 9F 3D |  if_ae	jmp	#LR__0757
0866c                 | LR__0759
0866c                 | LR__0760
0866c                 | ' return err
0866c     58 7B 02 F6 | 	mov	result1, local06
08670     E7 F0 03 F6 | 	mov	ptra, fp
08674     F2 00 A0 FD | 	call	#popregs_
08678                 | _compile_immediate_assign_ret
08678     2D 00 64 FD | 	ret
0867c                 | 
0867c                 | ' 
0867c                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
0867c                 | ' 
0867c                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
0867c                 | _compile
0867c     03 CA 05 F6 | 	mov	COUNT_, #3
08680     E8 00 A0 FD | 	call	#pushregs_
08684     49 A7 02 F6 | 	mov	local01, arg01
08688     4B A9 02 F6 | 	mov	local02, arg03
0868c     48 00 00 FF 
08690     9C 64 06 F1 | 	add	objptr, ##37020
08694     32 A7 62 FC | 	wrlong	local01, objptr
08698     04 64 06 F1 | 	add	objptr, #4
0869c     32 95 62 FC | 	wrlong	arg02, objptr
086a0     48 00 00 FF 
086a4     A0 64 86 F1 | 	sub	objptr, ##37024
086a8     54 93 02 F6 | 	mov	arg01, local02
086ac     01 92 06 F1 | 	add	arg01, #1
086b0     53 95 02 F6 | 	mov	arg02, local01
086b4     40 F2 BF FD | 	call	#_compile_immediate
086b8     3D AB 0A F6 | 	mov	local03, result1 wz
086bc                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
086bc                 | ' ucompiledline(0)=alinemajor
086bc                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
086bc                 | ' 
086bc                 | ' ' cont: 
086bc                 | ' ' 0 - this is the first part of the line that will continue
086bc                 | ' ' 1 - this is the continuation of the line
086bc                 | ' ' 2 - this is the last continued line
086bc                 | ' ' 3 - this is the one and only part
086bc                 | ' 
086bc                 | ' err=compile_immediate(cont+1,alinemajor) 
086bc                 | ' if err=0 andalso alinemajor>0 then
086bc     74 00 90 5D |  if_ne	jmp	#LR__0775
086c0     01 A6 16 F2 | 	cmp	local01, #1 wc
086c4     6C 00 90 CD |  if_b	jmp	#LR__0775
086c8                 | '   if cont=3 orelse cont=2 then 
086c8     03 A8 0E F2 | 	cmp	local02, #3 wz
086cc     02 A8 0E 52 |  if_ne	cmp	local02, #2 wz
086d0     60 00 90 5D |  if_ne	jmp	#LR__0774
086d4                 | '     if alinemajor >lastline then 
086d4     4B 00 00 FF 
086d8     AC 64 06 F1 | 	add	objptr, ##38572
086dc     32 95 02 FB | 	rdlong	arg02, objptr
086e0     4B 00 00 FF 
086e4     AC 64 86 F1 | 	sub	objptr, ##38572
086e8     4A A7 1A F2 | 	cmp	local01, arg02 wcz
086ec     0C 00 90 ED |  if_be	jmp	#LR__0770
086f0     53 93 02 F6 | 	mov	arg01, local01
086f4     38 F1 BF FD | 	call	#_add_line_at_end
086f8     38 00 90 FD | 	jmp	#LR__0773
086fc                 | LR__0770
086fc     53 93 02 F6 | 	mov	arg01, local01
08700     A0 EB BF FD | 	call	#_deleteline
08704                 | '       deleteline(alinemajor)  
08704                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
08704     4B 00 00 FF 
08708     AC 64 06 F1 | 	add	objptr, ##38572
0870c     32 95 02 FB | 	rdlong	arg02, objptr
08710     4B 00 00 FF 
08714     AC 64 86 F1 | 	sub	objptr, ##38572
08718     4A A7 1A F2 | 	cmp	local01, arg02 wcz
0871c     0C 00 90 ED |  if_be	jmp	#LR__0771
08720     53 93 02 F6 | 	mov	arg01, local01
08724     08 F1 BF FD | 	call	#_add_line_at_end
08728     08 00 90 FD | 	jmp	#LR__0772
0872c                 | LR__0771
0872c     53 93 02 F6 | 	mov	arg01, local01
08730     40 EF BF FD | 	call	#_insertline
08734                 | LR__0772
08734                 | LR__0773
08734                 | LR__0774
08734                 | LR__0775
08734                 | ' return err
08734     55 7B 02 F6 | 	mov	result1, local03
08738     E7 F0 03 F6 | 	mov	ptra, fp
0873c     F2 00 A0 FD | 	call	#popregs_
08740                 | _compile_ret
08740     2D 00 64 FD | 	ret
08744                 | 
08744                 | ' 
08744                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
08744                 | ' 
08744                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
08744                 | _compile_assign
08744     03 CA 05 F6 | 	mov	COUNT_, #3
08748     E8 00 A0 FD | 	call	#pushregs_
0874c     49 A7 02 F6 | 	mov	local01, arg01
08750     4B A9 02 F6 | 	mov	local02, arg03
08754     48 00 00 FF 
08758     9C 64 06 F1 | 	add	objptr, ##37020
0875c     32 A7 62 FC | 	wrlong	local01, objptr
08760     04 64 06 F1 | 	add	objptr, #4
08764     32 95 62 FC | 	wrlong	arg02, objptr
08768     48 00 00 FF 
0876c     A0 64 86 F1 | 	sub	objptr, ##37024
08770     54 93 02 F6 | 	mov	arg01, local02
08774     01 92 06 F1 | 	add	arg01, #1
08778     64 FB BF FD | 	call	#_compile_immediate_assign
0877c     3D AB 02 F6 | 	mov	local03, result1
08780                 | ' 
08780                 | ' ucompiledline(0)=alinemajor
08780                 | ' ucompiledline(1)=alineminor
08780                 | ' 
08780                 | ' err=compile_immediate_assign(cont+1) 
08780                 | ' if alinemajor>0 then
08780     01 A6 16 F2 | 	cmp	local01, #1 wc
08784     6C 00 90 CD |  if_b	jmp	#LR__0785
08788                 | '   if cont=3 orelse cont=2 then 
08788     03 A8 0E F2 | 	cmp	local02, #3 wz
0878c     02 A8 0E 52 |  if_ne	cmp	local02, #2 wz
08790     60 00 90 5D |  if_ne	jmp	#LR__0784
08794                 | '     if alinemajor >lastline then 
08794     4B 00 00 FF 
08798     AC 64 06 F1 | 	add	objptr, ##38572
0879c     32 95 02 FB | 	rdlong	arg02, objptr
087a0     4B 00 00 FF 
087a4     AC 64 86 F1 | 	sub	objptr, ##38572
087a8     4A A7 1A F2 | 	cmp	local01, arg02 wcz
087ac     0C 00 90 ED |  if_be	jmp	#LR__0780
087b0     53 93 02 F6 | 	mov	arg01, local01
087b4     78 F0 BF FD | 	call	#_add_line_at_end
087b8     38 00 90 FD | 	jmp	#LR__0783
087bc                 | LR__0780
087bc     53 93 02 F6 | 	mov	arg01, local01
087c0     E0 EA BF FD | 	call	#_deleteline
087c4                 | '       deleteline(alinemajor)  
087c4                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
087c4     4B 00 00 FF 
087c8     AC 64 06 F1 | 	add	objptr, ##38572
087cc     32 95 02 FB | 	rdlong	arg02, objptr
087d0     4B 00 00 FF 
087d4     AC 64 86 F1 | 	sub	objptr, ##38572
087d8     4A A7 1A F2 | 	cmp	local01, arg02 wcz
087dc     0C 00 90 ED |  if_be	jmp	#LR__0781
087e0     53 93 02 F6 | 	mov	arg01, local01
087e4     48 F0 BF FD | 	call	#_add_line_at_end
087e8     08 00 90 FD | 	jmp	#LR__0782
087ec                 | LR__0781
087ec     53 93 02 F6 | 	mov	arg01, local01
087f0     80 EE BF FD | 	call	#_insertline
087f4                 | LR__0782
087f4                 | LR__0783
087f4                 | LR__0784
087f4                 | LR__0785
087f4                 | ' return err
087f4     55 7B 02 F6 | 	mov	result1, local03
087f8     E7 F0 03 F6 | 	mov	ptra, fp
087fc     F2 00 A0 FD | 	call	#popregs_
08800                 | _compile_assign_ret
08800     2D 00 64 FD | 	ret
08804                 | 
08804                 | ' 
08804                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
08804                 | ' 
08804                 | ' function compile_fun_2p() as ulong
08804                 | _compile_fun_2p
08804     01 CA 05 F6 | 	mov	COUNT_, #1
08808     E8 00 A0 FD | 	call	#pushregs_
0880c     60 36 B0 FD | 	call	#_expr
08810     3D A7 02 F6 | 	mov	local01, result1
08814                 | ' err=expr() : if err>0 then return err
08814     01 A6 16 F2 | 	cmp	local01, #1 wc
08818     53 7B 02 36 |  if_ae	mov	result1, local01
0881c     60 00 90 3D |  if_ae	jmp	#LR__0790
08820                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08820     38 00 00 FF 
08824     64 64 06 F1 | 	add	objptr, ##28772
08828     32 A7 02 FB | 	rdlong	local01, objptr
0882c     03 A6 66 F0 | 	shl	local01, #3
08830     02 00 00 FF 
08834     38 64 86 F1 | 	sub	objptr, ##1080
08838     32 A7 02 F1 | 	add	local01, objptr
0883c     04 A6 06 F1 | 	add	local01, #4
08840     53 A7 02 FB | 	rdlong	local01, local01
08844     11 A6 0E F2 | 	cmp	local01, #17 wz
08848     36 00 00 FF 
0884c     2C 64 86 F1 | 	sub	objptr, ##27692
08850     15 7A 06 56 |  if_ne	mov	result1, #21
08854     28 00 90 5D |  if_ne	jmp	#LR__0790
08858     38 00 00 FF 
0885c     64 64 06 F1 | 	add	objptr, ##28772
08860     32 A7 02 FB | 	rdlong	local01, objptr
08864     01 A6 06 F1 | 	add	local01, #1
08868     32 A7 62 FC | 	wrlong	local01, objptr
0886c     38 00 00 FF 
08870     64 64 86 F1 | 	sub	objptr, ##28772
08874     F8 35 B0 FD | 	call	#_expr
08878                 | ' err=expr() : if err>0 then return err
08878     01 7A 16 F2 | 	cmp	result1, #1 wc
0887c                 | ' return 0
0887c     00 7A 06 C6 |  if_b	mov	result1, #0
08880                 | LR__0790
08880     E7 F0 03 F6 | 	mov	ptra, fp
08884     F2 00 A0 FD | 	call	#popregs_
08888                 | _compile_fun_2p_ret
08888     2D 00 64 FD | 	ret
0888c                 | 
0888c                 | ' 
0888c                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
0888c                 | ' 
0888c                 | ' function compile_fun_3p() as ulong
0888c                 | _compile_fun_3p
0888c     01 CA 05 F6 | 	mov	COUNT_, #1
08890     E8 00 A0 FD | 	call	#pushregs_
08894     D8 35 B0 FD | 	call	#_expr
08898     3D A7 02 F6 | 	mov	local01, result1
0889c                 | ' err=expr() : if err>0 then return err
0889c     01 A6 16 F2 | 	cmp	local01, #1 wc
088a0     53 7B 02 36 |  if_ae	mov	result1, local01
088a4     C8 00 90 3D |  if_ae	jmp	#LR__0800
088a8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
088a8     38 00 00 FF 
088ac     64 64 06 F1 | 	add	objptr, ##28772
088b0     32 A7 02 FB | 	rdlong	local01, objptr
088b4     03 A6 66 F0 | 	shl	local01, #3
088b8     02 00 00 FF 
088bc     38 64 86 F1 | 	sub	objptr, ##1080
088c0     32 A7 02 F1 | 	add	local01, objptr
088c4     04 A6 06 F1 | 	add	local01, #4
088c8     53 A7 02 FB | 	rdlong	local01, local01
088cc     11 A6 0E F2 | 	cmp	local01, #17 wz
088d0     36 00 00 FF 
088d4     2C 64 86 F1 | 	sub	objptr, ##27692
088d8     15 7A 06 56 |  if_ne	mov	result1, #21
088dc     90 00 90 5D |  if_ne	jmp	#LR__0800
088e0     38 00 00 FF 
088e4     64 64 06 F1 | 	add	objptr, ##28772
088e8     32 A7 02 FB | 	rdlong	local01, objptr
088ec     01 A6 06 F1 | 	add	local01, #1
088f0     32 A7 62 FC | 	wrlong	local01, objptr
088f4     38 00 00 FF 
088f8     64 64 86 F1 | 	sub	objptr, ##28772
088fc     70 35 B0 FD | 	call	#_expr
08900     3D A7 02 F6 | 	mov	local01, result1
08904                 | ' err=expr() : if err>0 then return err
08904     01 A6 16 F2 | 	cmp	local01, #1 wc
08908     53 7B 02 36 |  if_ae	mov	result1, local01
0890c     60 00 90 3D |  if_ae	jmp	#LR__0800
08910                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08910     38 00 00 FF 
08914     64 64 06 F1 | 	add	objptr, ##28772
08918     32 A7 02 FB | 	rdlong	local01, objptr
0891c     03 A6 66 F0 | 	shl	local01, #3
08920     02 00 00 FF 
08924     38 64 86 F1 | 	sub	objptr, ##1080
08928     32 A7 02 F1 | 	add	local01, objptr
0892c     04 A6 06 F1 | 	add	local01, #4
08930     53 A7 02 FB | 	rdlong	local01, local01
08934     11 A6 0E F2 | 	cmp	local01, #17 wz
08938     36 00 00 FF 
0893c     2C 64 86 F1 | 	sub	objptr, ##27692
08940     15 7A 06 56 |  if_ne	mov	result1, #21
08944     28 00 90 5D |  if_ne	jmp	#LR__0800
08948     38 00 00 FF 
0894c     64 64 06 F1 | 	add	objptr, ##28772
08950     32 A7 02 FB | 	rdlong	local01, objptr
08954     01 A6 06 F1 | 	add	local01, #1
08958     32 A7 62 FC | 	wrlong	local01, objptr
0895c     38 00 00 FF 
08960     64 64 86 F1 | 	sub	objptr, ##28772
08964     08 35 B0 FD | 	call	#_expr
08968                 | ' err=expr() : if err>0 then return err
08968     01 7A 16 F2 | 	cmp	result1, #1 wc
0896c                 | ' return 0
0896c     00 7A 06 C6 |  if_b	mov	result1, #0
08970                 | LR__0800
08970     E7 F0 03 F6 | 	mov	ptra, fp
08974     F2 00 A0 FD | 	call	#popregs_
08978                 | _compile_fun_3p_ret
08978     2D 00 64 FD | 	ret
0897c                 | 
0897c                 | ' 
0897c                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
0897c                 | ' 
0897c                 | ' function compile_fun_4p() as ulong
0897c                 | _compile_fun_4p
0897c     01 CA 05 F6 | 	mov	COUNT_, #1
08980     E8 00 A0 FD | 	call	#pushregs_
08984     E8 34 B0 FD | 	call	#_expr
08988     3D A7 02 F6 | 	mov	local01, result1
0898c                 | ' err=expr() : if err>0 then return err
0898c     01 A6 16 F2 | 	cmp	local01, #1 wc
08990     53 7B 02 36 |  if_ae	mov	result1, local01
08994     30 01 90 3D |  if_ae	jmp	#LR__0810
08998                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08998     38 00 00 FF 
0899c     64 64 06 F1 | 	add	objptr, ##28772
089a0     32 A7 02 FB | 	rdlong	local01, objptr
089a4     03 A6 66 F0 | 	shl	local01, #3
089a8     02 00 00 FF 
089ac     38 64 86 F1 | 	sub	objptr, ##1080
089b0     32 A7 02 F1 | 	add	local01, objptr
089b4     04 A6 06 F1 | 	add	local01, #4
089b8     53 A7 02 FB | 	rdlong	local01, local01
089bc     11 A6 0E F2 | 	cmp	local01, #17 wz
089c0     36 00 00 FF 
089c4     2C 64 86 F1 | 	sub	objptr, ##27692
089c8     15 7A 06 56 |  if_ne	mov	result1, #21
089cc     F8 00 90 5D |  if_ne	jmp	#LR__0810
089d0     38 00 00 FF 
089d4     64 64 06 F1 | 	add	objptr, ##28772
089d8     32 A7 02 FB | 	rdlong	local01, objptr
089dc     01 A6 06 F1 | 	add	local01, #1
089e0     32 A7 62 FC | 	wrlong	local01, objptr
089e4     38 00 00 FF 
089e8     64 64 86 F1 | 	sub	objptr, ##28772
089ec     80 34 B0 FD | 	call	#_expr
089f0     3D A7 02 F6 | 	mov	local01, result1
089f4                 | ' err=expr() : if err>0 then return err
089f4     01 A6 16 F2 | 	cmp	local01, #1 wc
089f8     53 7B 02 36 |  if_ae	mov	result1, local01
089fc     C8 00 90 3D |  if_ae	jmp	#LR__0810
08a00                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08a00     38 00 00 FF 
08a04     64 64 06 F1 | 	add	objptr, ##28772
08a08     32 A7 02 FB | 	rdlong	local01, objptr
08a0c     03 A6 66 F0 | 	shl	local01, #3
08a10     02 00 00 FF 
08a14     38 64 86 F1 | 	sub	objptr, ##1080
08a18     32 A7 02 F1 | 	add	local01, objptr
08a1c     04 A6 06 F1 | 	add	local01, #4
08a20     53 A7 02 FB | 	rdlong	local01, local01
08a24     11 A6 0E F2 | 	cmp	local01, #17 wz
08a28     36 00 00 FF 
08a2c     2C 64 86 F1 | 	sub	objptr, ##27692
08a30     15 7A 06 56 |  if_ne	mov	result1, #21
08a34     90 00 90 5D |  if_ne	jmp	#LR__0810
08a38     38 00 00 FF 
08a3c     64 64 06 F1 | 	add	objptr, ##28772
08a40     32 A7 02 FB | 	rdlong	local01, objptr
08a44     01 A6 06 F1 | 	add	local01, #1
08a48     32 A7 62 FC | 	wrlong	local01, objptr
08a4c     38 00 00 FF 
08a50     64 64 86 F1 | 	sub	objptr, ##28772
08a54     18 34 B0 FD | 	call	#_expr
08a58     3D A7 02 F6 | 	mov	local01, result1
08a5c                 | ' err=expr() : if err>0 then return err
08a5c     01 A6 16 F2 | 	cmp	local01, #1 wc
08a60     53 7B 02 36 |  if_ae	mov	result1, local01
08a64     60 00 90 3D |  if_ae	jmp	#LR__0810
08a68                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08a68     38 00 00 FF 
08a6c     64 64 06 F1 | 	add	objptr, ##28772
08a70     32 A7 02 FB | 	rdlong	local01, objptr
08a74     03 A6 66 F0 | 	shl	local01, #3
08a78     02 00 00 FF 
08a7c     38 64 86 F1 | 	sub	objptr, ##1080
08a80     32 A7 02 F1 | 	add	local01, objptr
08a84     04 A6 06 F1 | 	add	local01, #4
08a88     53 A7 02 FB | 	rdlong	local01, local01
08a8c     11 A6 0E F2 | 	cmp	local01, #17 wz
08a90     36 00 00 FF 
08a94     2C 64 86 F1 | 	sub	objptr, ##27692
08a98     15 7A 06 56 |  if_ne	mov	result1, #21
08a9c     28 00 90 5D |  if_ne	jmp	#LR__0810
08aa0     38 00 00 FF 
08aa4     64 64 06 F1 | 	add	objptr, ##28772
08aa8     32 A7 02 FB | 	rdlong	local01, objptr
08aac     01 A6 06 F1 | 	add	local01, #1
08ab0     32 A7 62 FC | 	wrlong	local01, objptr
08ab4     38 00 00 FF 
08ab8     64 64 86 F1 | 	sub	objptr, ##28772
08abc     B0 33 B0 FD | 	call	#_expr
08ac0                 | ' err=expr() : if err>0 then return err
08ac0     01 7A 16 F2 | 	cmp	result1, #1 wc
08ac4                 | ' return 0
08ac4     00 7A 06 C6 |  if_b	mov	result1, #0
08ac8                 | LR__0810
08ac8     E7 F0 03 F6 | 	mov	ptra, fp
08acc     F2 00 A0 FD | 	call	#popregs_
08ad0                 | _compile_fun_4p_ret
08ad0     2D 00 64 FD | 	ret
08ad4                 | 
08ad4                 | ' 
08ad4                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08ad4                 | ' 
08ad4                 | ' function compile_fun_varp() as ulong,ulong 
08ad4                 | _compile_fun_varp
08ad4     03 CA 05 F6 | 	mov	COUNT_, #3
08ad8     E8 00 A0 FD | 	call	#pushregs_
08adc     00 A6 06 F6 | 	mov	local01, #0
08ae0                 | ' 
08ae0                 | ' i=0 : err=0
08ae0                 | ' if lparts(ct).token<>token_end then
08ae0     38 00 00 FF 
08ae4     64 64 06 F1 | 	add	objptr, ##28772
08ae8     32 A9 02 FB | 	rdlong	local02, objptr
08aec     03 A8 66 F0 | 	shl	local02, #3
08af0     02 00 00 FF 
08af4     38 64 86 F1 | 	sub	objptr, ##1080
08af8     32 A9 02 F1 | 	add	local02, objptr
08afc     04 A8 06 F1 | 	add	local02, #4
08b00     54 A9 02 FB | 	rdlong	local02, local02
08b04     FE A9 0E F2 | 	cmp	local02, #510 wz
08b08     36 00 00 FF 
08b0c     2C 64 86 F1 | 	sub	objptr, ##27692
08b10     88 00 90 AD |  if_e	jmp	#LR__0821
08b14                 | '   do
08b14                 | LR__0820
08b14     58 33 B0 FD | 	call	#_expr
08b18     01 A6 06 F1 | 	add	local01, #1
08b1c                 | '     expr()
08b1c                 | '     i+=1
08b1c                 | '     if lparts(ct).token=token_comma then ct+=1
08b1c     38 00 00 FF 
08b20     64 64 06 F1 | 	add	objptr, ##28772
08b24     32 A9 02 FB | 	rdlong	local02, objptr
08b28     03 A8 66 F0 | 	shl	local02, #3
08b2c     02 00 00 FF 
08b30     38 64 86 F1 | 	sub	objptr, ##1080
08b34     32 A9 02 F1 | 	add	local02, objptr
08b38     04 A8 06 F1 | 	add	local02, #4
08b3c     54 A9 02 FB | 	rdlong	local02, local02
08b40     11 A8 0E F2 | 	cmp	local02, #17 wz
08b44     36 00 00 FF 
08b48     2C 64 86 F1 | 	sub	objptr, ##27692
08b4c     38 00 00 AF 
08b50     64 64 06 A1 |  if_e	add	objptr, ##28772
08b54     32 AB 02 AB |  if_e	rdlong	local03, objptr
08b58     01 AA 06 A1 |  if_e	add	local03, #1
08b5c     32 AB 62 AC |  if_e	wrlong	local03, objptr
08b60     38 00 00 AF 
08b64     64 64 86 A1 |  if_e	sub	objptr, ##28772
08b68                 | '     if lparts(ct).token=token_end then exit loop
08b68     38 00 00 FF 
08b6c     64 64 06 F1 | 	add	objptr, ##28772
08b70     32 A9 02 FB | 	rdlong	local02, objptr
08b74     03 A8 66 F0 | 	shl	local02, #3
08b78     02 00 00 FF 
08b7c     38 64 86 F1 | 	sub	objptr, ##1080
08b80     32 A9 02 F1 | 	add	local02, objptr
08b84     04 A8 06 F1 | 	add	local02, #4
08b88     54 A9 02 FB | 	rdlong	local02, local02
08b8c     FE A9 0E F2 | 	cmp	local02, #510 wz
08b90     36 00 00 FF 
08b94     2C 64 86 F1 | 	sub	objptr, ##27692
08b98     78 FF 9F 5D |  if_ne	jmp	#LR__0820
08b9c                 | LR__0821
08b9c                 | ' return i,err
08b9c     53 7B 02 F6 | 	mov	result1, local01
08ba0     00 7C 06 F6 | 	mov	result2, #0
08ba4     E7 F0 03 F6 | 	mov	ptra, fp
08ba8     F2 00 A0 FD | 	call	#popregs_
08bac                 | _compile_fun_varp_ret
08bac     2D 00 64 FD | 	ret
08bb0                 | 
08bb0                 | ' 
08bb0                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08bb0                 | ' 
08bb0                 | ' function compile_read() as ulong,ulong 
08bb0                 | _compile_read
08bb0     04 CA 05 F6 | 	mov	COUNT_, #4
08bb4     E8 00 A0 FD | 	call	#pushregs_
08bb8     00 A6 06 F6 | 	mov	local01, #0
08bbc                 | ' 
08bbc                 | ' i=0 : err=0
08bbc                 | ' if lparts(ct).token<>token_end then
08bbc     38 00 00 FF 
08bc0     64 64 06 F1 | 	add	objptr, ##28772
08bc4     32 A9 02 FB | 	rdlong	local02, objptr
08bc8     03 A8 66 F0 | 	shl	local02, #3
08bcc     02 00 00 FF 
08bd0     38 64 86 F1 | 	sub	objptr, ##1080
08bd4     32 A9 02 F1 | 	add	local02, objptr
08bd8     04 A8 06 F1 | 	add	local02, #4
08bdc     54 A9 02 FB | 	rdlong	local02, local02
08be0     FE A9 0E F2 | 	cmp	local02, #510 wz
08be4     36 00 00 FF 
08be8     2C 64 86 F1 | 	sub	objptr, ##27692
08bec     98 00 90 AD |  if_e	jmp	#LR__0831
08bf0                 | '   do
08bf0                 | LR__0830
08bf0     EC 2E B0 FD | 	call	#_getaddr
08bf4     3D AB 02 F6 | 	mov	local03, result1
08bf8     38 00 00 FF 
08bfc     64 64 06 F1 | 	add	objptr, ##28772
08c00     32 A9 02 FB | 	rdlong	local02, objptr
08c04     01 A8 06 F1 | 	add	local02, #1
08c08     32 A9 62 FC | 	wrlong	local02, objptr
08c0c     01 A6 06 F1 | 	add	local01, #1
08c10                 | '     err=getaddr() :ct+=1
08c10                 | '     i+=1 
08c10                 | '     if lparts(ct).token=token_comma then ct+=1 
08c10     03 A8 66 F0 | 	shl	local02, #3
08c14     02 00 00 FF 
08c18     38 64 86 F1 | 	sub	objptr, ##1080
08c1c     32 A9 02 F1 | 	add	local02, objptr
08c20     04 A8 06 F1 | 	add	local02, #4
08c24     54 A9 02 FB | 	rdlong	local02, local02
08c28     11 A8 0E F2 | 	cmp	local02, #17 wz
08c2c     36 00 00 FF 
08c30     2C 64 86 F1 | 	sub	objptr, ##27692
08c34     38 00 00 AF 
08c38     64 64 06 A1 |  if_e	add	objptr, ##28772
08c3c     32 AD 02 AB |  if_e	rdlong	local04, objptr
08c40     01 AC 06 A1 |  if_e	add	local04, #1
08c44     32 AD 62 AC |  if_e	wrlong	local04, objptr
08c48     38 00 00 AF 
08c4c     64 64 86 A1 |  if_e	sub	objptr, ##28772
08c50                 | '     if lparts(ct).token=token_end then exit loop
08c50     38 00 00 FF 
08c54     64 64 06 F1 | 	add	objptr, ##28772
08c58     32 A9 02 FB | 	rdlong	local02, objptr
08c5c     03 A8 66 F0 | 	shl	local02, #3
08c60     02 00 00 FF 
08c64     38 64 86 F1 | 	sub	objptr, ##1080
08c68     32 A9 02 F1 | 	add	local02, objptr
08c6c     04 A8 06 F1 | 	add	local02, #4
08c70     54 A9 02 FB | 	rdlong	local02, local02
08c74     FE A9 0E F2 | 	cmp	local02, #510 wz
08c78     36 00 00 FF 
08c7c     2C 64 86 F1 | 	sub	objptr, ##27692
08c80     08 00 90 AD |  if_e	jmp	#LR__0832
08c84     68 FF 9F FD | 	jmp	#LR__0830
08c88                 | LR__0831
08c88     36 AA 06 F6 | 	mov	local03, #54
08c8c                 | LR__0832
08c8c                 | ' return i,err
08c8c     53 7B 02 F6 | 	mov	result1, local01
08c90     55 7D 02 F6 | 	mov	result2, local03
08c94     E7 F0 03 F6 | 	mov	ptra, fp
08c98     F2 00 A0 FD | 	call	#popregs_
08c9c                 | _compile_read_ret
08c9c     2D 00 64 FD | 	ret
08ca0                 | 
08ca0                 | ' 
08ca0                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08ca0                 | ' 
08ca0                 | ' function compile_input() as ulong,ulong 
08ca0                 | _compile_input
08ca0     0F CA 05 F6 | 	mov	COUNT_, #15
08ca4     E8 00 A0 FD | 	call	#pushregs_
08ca8                 | ' 
08ca8                 | ' if lparts(ct).token=token_string then
08ca8     38 00 00 FF 
08cac     64 64 06 F1 | 	add	objptr, ##28772
08cb0     32 97 02 FB | 	rdlong	arg03, objptr
08cb4     03 96 66 F0 | 	shl	arg03, #3
08cb8     02 00 00 FF 
08cbc     38 64 86 F1 | 	sub	objptr, ##1080
08cc0     32 97 02 F1 | 	add	arg03, objptr
08cc4     04 96 06 F1 | 	add	arg03, #4
08cc8     4B 7D 02 FB | 	rdlong	result2, arg03
08ccc     01 00 00 FF 
08cd0     03 7C 0E F2 | 	cmp	result2, ##515 wz
08cd4     36 00 00 FF 
08cd8     2C 64 86 F1 | 	sub	objptr, ##27692
08cdc     38 06 90 5D |  if_ne	jmp	#LR__0847
08ce0     38 00 00 FF 
08ce4     64 64 06 F1 | 	add	objptr, ##28772
08ce8     32 95 02 FB | 	rdlong	arg02, objptr
08cec     03 94 66 F0 | 	shl	arg02, #3
08cf0     02 00 00 FF 
08cf4     38 64 86 F1 | 	sub	objptr, ##1080
08cf8     32 95 02 F1 | 	add	arg02, objptr
08cfc     4A 93 02 FB | 	rdlong	arg01, arg02
08d00     36 00 00 FF 
08d04     2C 64 86 F1 | 	sub	objptr, ##27692
08d08     49 AD 02 F6 | 	mov	local04, arg01
08d0c     D7 06 48 FB | 	callpa	#(@LR__0841-@LR__0840)>>2,fcache_load_ptr_
08d10                 | LR__0840
08d10     56 7B CA FA | 	rdbyte	result1, local04 wz
08d14     01 AC 06 51 |  if_ne	add	local04, #1
08d18     F4 FF 9F 5D |  if_ne	jmp	#LR__0840
08d1c                 | LR__0841
08d1c     49 AD 82 F1 | 	sub	local04, arg01
08d20     56 7B 02 F6 | 	mov	result1, local04
08d24     53 00 00 FF 
08d28     48 65 06 F1 | 	add	objptr, ##42824
08d2c     32 7B 62 FC | 	wrlong	result1, objptr
08d30     58 64 86 F1 | 	sub	objptr, #88
08d34     32 93 02 FB | 	rdlong	arg01, objptr
08d38     3D 93 82 F1 | 	sub	arg01, result1
08d3c     04 92 86 F1 | 	sub	arg01, #4
08d40     03 92 26 F5 | 	andn	arg01, #3
08d44     32 93 62 FC | 	wrlong	arg01, objptr
08d48     58 64 06 F1 | 	add	objptr, #88
08d4c     32 95 02 FB | 	rdlong	arg02, objptr
08d50     53 00 00 FF 
08d54     48 65 86 F1 | 	sub	objptr, ##42824
08d58     7C 84 B1 FD | 	call	#_pslpoke
08d5c                 | '   pslpoke memtop,l
08d5c                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08d5c     01 AE 06 F6 | 	mov	local05, #1
08d60     53 00 00 FF 
08d64     48 65 06 F1 | 	add	objptr, ##42824
08d68     32 B1 02 FB | 	rdlong	local06, objptr
08d6c     53 00 00 FF 
08d70     48 65 86 F1 | 	sub	objptr, ##42824
08d74     01 B0 06 F1 | 	add	local06, #1
08d78                 | LR__0842
08d78     58 AF 52 F2 | 	cmps	local05, local06 wc
08d7c     5C 00 90 3D |  if_ae	jmp	#LR__0843
08d80     53 00 00 FF 
08d84     F0 64 06 F1 | 	add	objptr, ##42736
08d88     32 B3 02 FB | 	rdlong	local07, objptr
08d8c     03 B2 06 F1 | 	add	local07, #3
08d90     57 B3 02 F1 | 	add	local07, local05
08d94     1B 00 00 FF 
08d98     8C 64 86 F1 | 	sub	objptr, ##13964
08d9c     32 95 02 FB | 	rdlong	arg02, objptr
08da0     03 94 66 F0 | 	shl	arg02, #3
08da4     02 00 00 FF 
08da8     38 64 86 F1 | 	sub	objptr, ##1080
08dac     32 95 02 F1 | 	add	arg02, objptr
08db0     4A 93 02 FB | 	rdlong	arg01, arg02
08db4     57 95 02 F6 | 	mov	arg02, local05
08db8     01 96 06 F6 | 	mov	arg03, #1
08dbc     36 00 00 FF 
08dc0     2C 64 86 F1 | 	sub	objptr, ##27692
08dc4     B0 D5 B1 FD | 	call	#__system__Mid_S
08dc8     3D 95 C2 FA | 	rdbyte	arg02, result1
08dcc     59 93 02 F6 | 	mov	arg01, local07
08dd0     94 84 B1 FD | 	call	#_pspoke
08dd4     01 AE 06 F1 | 	add	local05, #1
08dd8     9C FF 9F FD | 	jmp	#LR__0842
08ddc                 | LR__0843
08ddc     53 00 00 FF 
08de0     F0 64 06 F1 | 	add	objptr, ##42736
08de4     32 A7 02 FB | 	rdlong	local01, objptr
08de8     2B AA 06 F6 | 	mov	local03, #43
08dec     53 B5 02 F6 | 	mov	local08, local01
08df0     54 B3 02 F6 | 	mov	local07, local02
08df4     55 B7 02 F6 | 	mov	local09, local03
08df8     08 00 00 FF 
08dfc     54 64 86 F1 | 	sub	objptr, ##4180
08e00     32 B1 02 FB | 	rdlong	local06, objptr
08e04     58 AF 02 F6 | 	mov	local05, local06
08e08     01 AE 66 F0 | 	shl	local05, #1
08e0c     58 AF 02 F1 | 	add	local05, local06
08e10     02 AE 66 F0 | 	shl	local05, #2
08e14     03 00 00 FF 
08e18     00 64 86 F1 | 	sub	objptr, ##1536
08e1c     32 AF 02 F1 | 	add	local05, objptr
08e20     57 B5 62 FC | 	wrlong	local08, local05
08e24     03 00 00 FF 
08e28     00 64 06 F1 | 	add	objptr, ##1536
08e2c     32 B5 02 FB | 	rdlong	local08, objptr
08e30     5A B1 02 F6 | 	mov	local06, local08
08e34     01 B0 66 F0 | 	shl	local06, #1
08e38     5A B1 02 F1 | 	add	local06, local08
08e3c     02 B0 66 F0 | 	shl	local06, #2
08e40     03 00 00 FF 
08e44     00 64 86 F1 | 	sub	objptr, ##1536
08e48     32 B1 02 F1 | 	add	local06, objptr
08e4c     04 B0 06 F1 | 	add	local06, #4
08e50     58 B3 62 FC | 	wrlong	local07, local06
08e54     03 00 00 FF 
08e58     00 64 06 F1 | 	add	objptr, ##1536
08e5c     32 B5 02 FB | 	rdlong	local08, objptr
08e60     5A B3 02 F6 | 	mov	local07, local08
08e64     01 B2 66 F0 | 	shl	local07, #1
08e68     5A B3 02 F1 | 	add	local07, local08
08e6c     02 B2 66 F0 | 	shl	local07, #2
08e70     03 00 00 FF 
08e74     00 64 86 F1 | 	sub	objptr, ##1536
08e78     32 B3 02 F1 | 	add	local07, objptr
08e7c     08 B2 06 F1 | 	add	local07, #8
08e80     59 B7 62 FC | 	wrlong	local09, local07
08e84     03 00 00 FF 
08e88     00 64 06 F1 | 	add	objptr, ##1536
08e8c     32 B5 02 FB | 	rdlong	local08, objptr
08e90     01 B4 06 F1 | 	add	local08, #1
08e94     32 B5 62 FC | 	wrlong	local08, objptr
08e98     13 00 00 FF 
08e9c     38 64 86 F1 | 	sub	objptr, ##9784
08ea0     32 B5 02 FB | 	rdlong	local08, objptr
08ea4     01 B4 06 F1 | 	add	local08, #1
08ea8     32 B5 62 FC | 	wrlong	local08, objptr
08eac                 | '   t1.result.uresult=memtop
08eac                 | '   t1.result_type=result_string2  
08eac                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08eac                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08eac     03 B4 66 F0 | 	shl	local08, #3
08eb0     02 00 00 FF 
08eb4     38 64 86 F1 | 	sub	objptr, ##1080
08eb8     32 B5 02 F1 | 	add	local08, objptr
08ebc     04 B4 06 F1 | 	add	local08, #4
08ec0     5A B5 02 FB | 	rdlong	local08, local08
08ec4     11 B4 0E F2 | 	cmp	local08, #17 wz
08ec8     36 00 00 FF 
08ecc     2C 64 86 F1 | 	sub	objptr, ##27692
08ed0     60 01 90 5D |  if_ne	jmp	#LR__0844
08ed4     21 AA 06 F6 | 	mov	local03, #33
08ed8     53 B5 02 F6 | 	mov	local08, local01
08edc     54 B3 02 F6 | 	mov	local07, local02
08ee0     55 B9 02 F6 | 	mov	local10, local03
08ee4     4B 00 00 FF 
08ee8     9C 64 06 F1 | 	add	objptr, ##38556
08eec     32 BB 02 FB | 	rdlong	local11, objptr
08ef0     5D BD 02 F6 | 	mov	local12, local11
08ef4     01 BC 66 F0 | 	shl	local12, #1
08ef8     5D BD 02 F1 | 	add	local12, local11
08efc     02 BC 66 F0 | 	shl	local12, #2
08f00     03 00 00 FF 
08f04     00 64 86 F1 | 	sub	objptr, ##1536
08f08     32 BD 02 F1 | 	add	local12, objptr
08f0c     5E B5 62 FC | 	wrlong	local08, local12
08f10     03 00 00 FF 
08f14     00 64 06 F1 | 	add	objptr, ##1536
08f18     32 BF 02 FB | 	rdlong	local13, objptr
08f1c     5F B5 02 F6 | 	mov	local08, local13
08f20     01 B4 66 F0 | 	shl	local08, #1
08f24     5F B5 02 F1 | 	add	local08, local13
08f28     02 B4 66 F0 | 	shl	local08, #2
08f2c     03 00 00 FF 
08f30     00 64 86 F1 | 	sub	objptr, ##1536
08f34     32 B5 02 F1 | 	add	local08, objptr
08f38     04 B4 06 F1 | 	add	local08, #4
08f3c     5A B3 62 FC | 	wrlong	local07, local08
08f40     03 00 00 FF 
08f44     00 64 06 F1 | 	add	objptr, ##1536
08f48     32 B5 02 FB | 	rdlong	local08, objptr
08f4c     5A C1 02 F6 | 	mov	local14, local08
08f50     01 C0 66 F0 | 	shl	local14, #1
08f54     5A C1 02 F1 | 	add	local14, local08
08f58     02 C0 66 F0 | 	shl	local14, #2
08f5c     03 00 00 FF 
08f60     00 64 86 F1 | 	sub	objptr, ##1536
08f64     32 C1 02 F1 | 	add	local14, objptr
08f68     08 C0 06 F1 | 	add	local14, #8
08f6c     60 B9 62 FC | 	wrlong	local10, local14
08f70     03 00 00 FF 
08f74     00 64 06 F1 | 	add	objptr, ##1536
08f78     32 B5 02 FB | 	rdlong	local08, objptr
08f7c     01 B4 06 F1 | 	add	local08, #1
08f80     32 B5 62 FC | 	wrlong	local08, objptr
08f84     44 AA 06 F6 | 	mov	local03, #68
08f88     53 B5 02 F6 | 	mov	local08, local01
08f8c     54 B3 02 F6 | 	mov	local07, local02
08f90     55 B9 02 F6 | 	mov	local10, local03
08f94     32 C1 02 FB | 	rdlong	local14, objptr
08f98     60 BF 02 F6 | 	mov	local13, local14
08f9c     01 BE 66 F0 | 	shl	local13, #1
08fa0     60 BF 02 F1 | 	add	local13, local14
08fa4     02 BE 66 F0 | 	shl	local13, #2
08fa8     03 00 00 FF 
08fac     00 64 86 F1 | 	sub	objptr, ##1536
08fb0     32 BF 02 F1 | 	add	local13, objptr
08fb4     5F B5 62 FC | 	wrlong	local08, local13
08fb8     03 00 00 FF 
08fbc     00 64 06 F1 | 	add	objptr, ##1536
08fc0     32 C1 02 FB | 	rdlong	local14, objptr
08fc4     60 BF 02 F6 | 	mov	local13, local14
08fc8     01 BE 66 F0 | 	shl	local13, #1
08fcc     60 BF 02 F1 | 	add	local13, local14
08fd0     02 BE 66 F0 | 	shl	local13, #2
08fd4     03 00 00 FF 
08fd8     00 64 86 F1 | 	sub	objptr, ##1536
08fdc     32 BF 02 F1 | 	add	local13, objptr
08fe0     04 BE 06 F1 | 	add	local13, #4
08fe4     5F B3 62 FC | 	wrlong	local07, local13
08fe8     03 00 00 FF 
08fec     00 64 06 F1 | 	add	objptr, ##1536
08ff0     32 BF 02 FB | 	rdlong	local13, objptr
08ff4     5F C1 02 F6 | 	mov	local14, local13
08ff8     01 C0 66 F0 | 	shl	local14, #1
08ffc     5F C1 02 F1 | 	add	local14, local13
09000     02 C0 66 F0 | 	shl	local14, #2
09004     03 00 00 FF 
09008     00 64 86 F1 | 	sub	objptr, ##1536
0900c     32 C1 02 F1 | 	add	local14, objptr
09010     08 C0 06 F1 | 	add	local14, #8
09014     60 B9 62 FC | 	wrlong	local10, local14
09018     03 00 00 FF 
0901c     00 64 06 F1 | 	add	objptr, ##1536
09020     32 B5 02 FB | 	rdlong	local08, objptr
09024     01 B4 06 F1 | 	add	local08, #1
09028     32 B5 62 FC | 	wrlong	local08, objptr
0902c     4B 00 00 FF 
09030     9C 64 86 F1 | 	sub	objptr, ##38556
09034                 | LR__0844
09034                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09034     38 00 00 FF 
09038     64 64 06 F1 | 	add	objptr, ##28772
0903c     32 B5 02 FB | 	rdlong	local08, objptr
09040     03 B4 66 F0 | 	shl	local08, #3
09044     02 00 00 FF 
09048     38 64 86 F1 | 	sub	objptr, ##1080
0904c     32 B5 02 F1 | 	add	local08, objptr
09050     04 B4 06 F1 | 	add	local08, #4
09054     5A C1 02 FB | 	rdlong	local14, local08
09058     12 C0 0E F2 | 	cmp	local14, #18 wz
0905c     36 00 00 FF 
09060     2C 64 86 F1 | 	sub	objptr, ##27692
09064     60 01 90 5D |  if_ne	jmp	#LR__0845
09068     22 AA 06 F6 | 	mov	local03, #34
0906c     53 B5 02 F6 | 	mov	local08, local01
09070     54 B3 02 F6 | 	mov	local07, local02
09074     55 B9 02 F6 | 	mov	local10, local03
09078     4B 00 00 FF 
0907c     9C 64 06 F1 | 	add	objptr, ##38556
09080     32 C1 02 FB | 	rdlong	local14, objptr
09084     60 BF 02 F6 | 	mov	local13, local14
09088     01 BE 66 F0 | 	shl	local13, #1
0908c     60 BF 02 F1 | 	add	local13, local14
09090     02 BE 66 F0 | 	shl	local13, #2
09094     03 00 00 FF 
09098     00 64 86 F1 | 	sub	objptr, ##1536
0909c     32 BF 02 F1 | 	add	local13, objptr
090a0     5F B5 62 FC | 	wrlong	local08, local13
090a4     03 00 00 FF 
090a8     00 64 06 F1 | 	add	objptr, ##1536
090ac     32 C1 02 FB | 	rdlong	local14, objptr
090b0     60 B5 02 F6 | 	mov	local08, local14
090b4     01 B4 66 F0 | 	shl	local08, #1
090b8     60 B5 02 F1 | 	add	local08, local14
090bc     02 B4 66 F0 | 	shl	local08, #2
090c0     03 00 00 FF 
090c4     00 64 86 F1 | 	sub	objptr, ##1536
090c8     32 B5 02 F1 | 	add	local08, objptr
090cc     04 B4 06 F1 | 	add	local08, #4
090d0     5A B3 62 FC | 	wrlong	local07, local08
090d4     03 00 00 FF 
090d8     00 64 06 F1 | 	add	objptr, ##1536
090dc     32 B5 02 FB | 	rdlong	local08, objptr
090e0     5A C1 02 F6 | 	mov	local14, local08
090e4     01 C0 66 F0 | 	shl	local14, #1
090e8     5A C1 02 F1 | 	add	local14, local08
090ec     02 C0 66 F0 | 	shl	local14, #2
090f0     03 00 00 FF 
090f4     00 64 86 F1 | 	sub	objptr, ##1536
090f8     32 C1 02 F1 | 	add	local14, objptr
090fc     08 C0 06 F1 | 	add	local14, #8
09100     60 B9 62 FC | 	wrlong	local10, local14
09104     03 00 00 FF 
09108     00 64 06 F1 | 	add	objptr, ##1536
0910c     32 B5 02 FB | 	rdlong	local08, objptr
09110     01 B4 06 F1 | 	add	local08, #1
09114     32 B5 62 FC | 	wrlong	local08, objptr
09118     44 AA 06 F6 | 	mov	local03, #68
0911c     53 B5 02 F6 | 	mov	local08, local01
09120     54 B3 02 F6 | 	mov	local07, local02
09124     55 B9 02 F6 | 	mov	local10, local03
09128     32 C1 02 FB | 	rdlong	local14, objptr
0912c     60 BF 02 F6 | 	mov	local13, local14
09130     01 BE 66 F0 | 	shl	local13, #1
09134     60 BF 02 F1 | 	add	local13, local14
09138     02 BE 66 F0 | 	shl	local13, #2
0913c     03 00 00 FF 
09140     00 64 86 F1 | 	sub	objptr, ##1536
09144     32 BF 02 F1 | 	add	local13, objptr
09148     5F B5 62 FC | 	wrlong	local08, local13
0914c     03 00 00 FF 
09150     00 64 06 F1 | 	add	objptr, ##1536
09154     32 C1 02 FB | 	rdlong	local14, objptr
09158     60 BF 02 F6 | 	mov	local13, local14
0915c     01 BE 66 F0 | 	shl	local13, #1
09160     60 BF 02 F1 | 	add	local13, local14
09164     02 BE 66 F0 | 	shl	local13, #2
09168     03 00 00 FF 
0916c     00 64 86 F1 | 	sub	objptr, ##1536
09170     32 BF 02 F1 | 	add	local13, objptr
09174     04 BE 06 F1 | 	add	local13, #4
09178     5F B3 62 FC | 	wrlong	local07, local13
0917c     03 00 00 FF 
09180     00 64 06 F1 | 	add	objptr, ##1536
09184     32 BF 02 FB | 	rdlong	local13, objptr
09188     5F C1 02 F6 | 	mov	local14, local13
0918c     01 C0 66 F0 | 	shl	local14, #1
09190     5F C1 02 F1 | 	add	local14, local13
09194     02 C0 66 F0 | 	shl	local14, #2
09198     03 00 00 FF 
0919c     00 64 86 F1 | 	sub	objptr, ##1536
091a0     32 C1 02 F1 | 	add	local14, objptr
091a4     08 C0 06 F1 | 	add	local14, #8
091a8     60 B9 62 FC | 	wrlong	local10, local14
091ac     03 00 00 FF 
091b0     00 64 06 F1 | 	add	objptr, ##1536
091b4     32 B5 02 FB | 	rdlong	local08, objptr
091b8     01 B4 06 F1 | 	add	local08, #1
091bc     32 B5 62 FC | 	wrlong	local08, objptr
091c0     4B 00 00 FF 
091c4     9C 64 86 F1 | 	sub	objptr, ##38556
091c8                 | LR__0845
091c8                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
091c8     38 00 00 FF 
091cc     64 64 06 F1 | 	add	objptr, ##28772
091d0     32 B5 02 FB | 	rdlong	local08, objptr
091d4     03 B4 66 F0 | 	shl	local08, #3
091d8     02 00 00 FF 
091dc     38 64 86 F1 | 	sub	objptr, ##1080
091e0     32 B5 02 F1 | 	add	local08, objptr
091e4     04 B4 06 F1 | 	add	local08, #4
091e8     5A C1 02 FB | 	rdlong	local14, local08
091ec     12 C0 0E F2 | 	cmp	local14, #18 wz
091f0     36 00 00 FF 
091f4     2C 64 86 F1 | 	sub	objptr, ##27692
091f8     00 01 90 AD |  if_e	jmp	#LR__0846
091fc     38 00 00 FF 
09200     64 64 06 F1 | 	add	objptr, ##28772
09204     32 B5 02 FB | 	rdlong	local08, objptr
09208     03 B4 66 F0 | 	shl	local08, #3
0920c     02 00 00 FF 
09210     38 64 86 F1 | 	sub	objptr, ##1080
09214     32 B5 02 F1 | 	add	local08, objptr
09218     04 B4 06 F1 | 	add	local08, #4
0921c     5A C1 02 FB | 	rdlong	local14, local08
09220     11 C0 0E F2 | 	cmp	local14, #17 wz
09224     36 00 00 FF 
09228     2C 64 86 F1 | 	sub	objptr, ##27692
0922c     CC 00 90 AD |  if_e	jmp	#LR__0846
09230     44 AA 06 F6 | 	mov	local03, #68
09234     53 B5 02 F6 | 	mov	local08, local01
09238     54 B3 02 F6 | 	mov	local07, local02
0923c     55 B9 02 F6 | 	mov	local10, local03
09240     4B 00 00 FF 
09244     9C 64 06 F1 | 	add	objptr, ##38556
09248     32 C1 02 FB | 	rdlong	local14, objptr
0924c     60 BF 02 F6 | 	mov	local13, local14
09250     01 BE 66 F0 | 	shl	local13, #1
09254     60 BF 02 F1 | 	add	local13, local14
09258     02 BE 66 F0 | 	shl	local13, #2
0925c     03 00 00 FF 
09260     00 64 86 F1 | 	sub	objptr, ##1536
09264     32 BF 02 F1 | 	add	local13, objptr
09268     5F B5 62 FC | 	wrlong	local08, local13
0926c     03 00 00 FF 
09270     00 64 06 F1 | 	add	objptr, ##1536
09274     32 C1 02 FB | 	rdlong	local14, objptr
09278     60 BF 02 F6 | 	mov	local13, local14
0927c     01 BE 66 F0 | 	shl	local13, #1
09280     60 BF 02 F1 | 	add	local13, local14
09284     02 BE 66 F0 | 	shl	local13, #2
09288     03 00 00 FF 
0928c     00 64 86 F1 | 	sub	objptr, ##1536
09290     32 BF 02 F1 | 	add	local13, objptr
09294     04 BE 06 F1 | 	add	local13, #4
09298     5F B3 62 FC | 	wrlong	local07, local13
0929c     03 00 00 FF 
092a0     00 64 06 F1 | 	add	objptr, ##1536
092a4     32 BF 02 FB | 	rdlong	local13, objptr
092a8     5F C1 02 F6 | 	mov	local14, local13
092ac     01 C0 66 F0 | 	shl	local14, #1
092b0     5F C1 02 F1 | 	add	local14, local13
092b4     02 C0 66 F0 | 	shl	local14, #2
092b8     03 00 00 FF 
092bc     00 64 86 F1 | 	sub	objptr, ##1536
092c0     32 C1 02 F1 | 	add	local14, objptr
092c4     08 C0 06 F1 | 	add	local14, #8
092c8     60 B9 62 FC | 	wrlong	local10, local14
092cc     03 00 00 FF 
092d0     00 64 06 F1 | 	add	objptr, ##1536
092d4     32 B5 02 FB | 	rdlong	local08, objptr
092d8     01 B4 06 F1 | 	add	local08, #1
092dc     32 B5 62 FC | 	wrlong	local08, objptr
092e0     13 00 00 FF 
092e4     38 64 86 F1 | 	sub	objptr, ##9784
092e8     32 B5 02 FB | 	rdlong	local08, objptr
092ec     01 B4 86 F1 | 	sub	local08, #1
092f0     32 B5 62 FC | 	wrlong	local08, objptr
092f4     38 00 00 FF 
092f8     64 64 86 F1 | 	sub	objptr, ##28772
092fc                 | LR__0846
092fc     38 00 00 FF 
09300     64 64 06 F1 | 	add	objptr, ##28772
09304     32 B5 02 FB | 	rdlong	local08, objptr
09308     01 B4 06 F1 | 	add	local08, #1
0930c     32 B5 62 FC | 	wrlong	local08, objptr
09310     38 00 00 FF 
09314     64 64 86 F1 | 	sub	objptr, ##28772
09318                 | LR__0847
09318     00 AE 06 F6 | 	mov	local05, #0
0931c                 | ' i=0 : err=0
0931c                 | ' if lparts(ct).token<>token_end then
0931c     38 00 00 FF 
09320     64 64 06 F1 | 	add	objptr, ##28772
09324     32 C1 02 FB | 	rdlong	local14, objptr
09328     03 C0 66 F0 | 	shl	local14, #3
0932c     02 00 00 FF 
09330     38 64 86 F1 | 	sub	objptr, ##1080
09334     32 C1 02 F1 | 	add	local14, objptr
09338     04 C0 06 F1 | 	add	local14, #4
0933c     60 C1 02 FB | 	rdlong	local14, local14
09340     FE C1 0E F2 | 	cmp	local14, #510 wz
09344     36 00 00 FF 
09348     2C 64 86 F1 | 	sub	objptr, ##27692
0934c     98 00 90 AD |  if_e	jmp	#LR__0849
09350                 | '   do
09350                 | LR__0848
09350     8C 27 B0 FD | 	call	#_getaddr
09354     3D C3 02 F6 | 	mov	local15, result1
09358     38 00 00 FF 
0935c     64 64 06 F1 | 	add	objptr, ##28772
09360     32 C1 02 FB | 	rdlong	local14, objptr
09364     01 C0 06 F1 | 	add	local14, #1
09368     32 C1 62 FC | 	wrlong	local14, objptr
0936c     01 AE 06 F1 | 	add	local05, #1
09370                 | '     err=getaddr() :ct+=1
09370                 | '     i+=1 
09370                 | '     if lparts(ct).token=token_comma then ct+=1 
09370     03 C0 66 F0 | 	shl	local14, #3
09374     02 00 00 FF 
09378     38 64 86 F1 | 	sub	objptr, ##1080
0937c     32 C1 02 F1 | 	add	local14, objptr
09380     04 C0 06 F1 | 	add	local14, #4
09384     60 C1 02 FB | 	rdlong	local14, local14
09388     11 C0 0E F2 | 	cmp	local14, #17 wz
0938c     36 00 00 FF 
09390     2C 64 86 F1 | 	sub	objptr, ##27692
09394     38 00 00 AF 
09398     64 64 06 A1 |  if_e	add	objptr, ##28772
0939c     32 B5 02 AB |  if_e	rdlong	local08, objptr
093a0     01 B4 06 A1 |  if_e	add	local08, #1
093a4     32 B5 62 AC |  if_e	wrlong	local08, objptr
093a8     38 00 00 AF 
093ac     64 64 86 A1 |  if_e	sub	objptr, ##28772
093b0                 | '     if lparts(ct).token=token_end then exit loop
093b0     38 00 00 FF 
093b4     64 64 06 F1 | 	add	objptr, ##28772
093b8     32 C1 02 FB | 	rdlong	local14, objptr
093bc     03 C0 66 F0 | 	shl	local14, #3
093c0     02 00 00 FF 
093c4     38 64 86 F1 | 	sub	objptr, ##1080
093c8     32 C1 02 F1 | 	add	local14, objptr
093cc     04 C0 06 F1 | 	add	local14, #4
093d0     60 C1 02 FB | 	rdlong	local14, local14
093d4     FE C1 0E F2 | 	cmp	local14, #510 wz
093d8     36 00 00 FF 
093dc     2C 64 86 F1 | 	sub	objptr, ##27692
093e0     08 00 90 AD |  if_e	jmp	#LR__0850
093e4     68 FF 9F FD | 	jmp	#LR__0848
093e8                 | LR__0849
093e8     36 C2 06 F6 | 	mov	local15, #54
093ec                 | LR__0850
093ec                 | ' return i,err
093ec     57 7B 02 F6 | 	mov	result1, local05
093f0     61 7D 02 F6 | 	mov	result2, local15
093f4     E7 F0 03 F6 | 	mov	ptra, fp
093f8     F2 00 A0 FD | 	call	#popregs_
093fc                 | _compile_input_ret
093fc     2D 00 64 FD | 	ret
09400                 | 
09400                 | ' 
09400                 | ' '----- compile assign to an array element
09400                 | ' 
09400                 | ' function compile_array_assign() as ulong 
09400                 | _compile_array_assign
09400     0B CA 05 F6 | 	mov	COUNT_, #11
09404     E8 00 A0 FD | 	call	#pushregs_
09408     00 AC 06 F6 | 	mov	local04, #0
0940c     00 AE 06 F6 | 	mov	local05, #0
09410     38 00 00 FF 
09414     64 64 06 F1 | 	add	objptr, ##28772
09418     32 B1 02 FB | 	rdlong	local06, objptr
0941c     58 7B 02 F6 | 	mov	result1, local06
09420     01 7A 86 F1 | 	sub	result1, #1
09424     03 7A 66 F0 | 	shl	result1, #3
09428     02 00 00 FF 
0942c     38 64 86 F1 | 	sub	objptr, ##1080
09430     32 7B 02 F1 | 	add	result1, objptr
09434     3D B3 02 FB | 	rdlong	local07, result1
09438                 | ' numpar=0 : err=0
09438                 | ' varname$=lparts(ct-1).part$
09438                 | ' if lparts(ct).token=token_lpar then
09438     03 B0 66 F0 | 	shl	local06, #3
0943c     32 B1 02 F1 | 	add	local06, objptr
09440     04 B0 06 F1 | 	add	local06, #4
09444     58 B1 02 FB | 	rdlong	local06, local06
09448     15 B0 0E F2 | 	cmp	local06, #21 wz
0944c     36 00 00 FF 
09450     2C 64 86 F1 | 	sub	objptr, ##27692
09454     F0 01 90 5D |  if_ne	jmp	#LR__0864
09458     38 00 00 FF 
0945c     64 64 06 F1 | 	add	objptr, ##28772
09460     32 B5 02 FB | 	rdlong	local08, objptr
09464     01 B4 06 F1 | 	add	local08, #1
09468     32 B5 62 FC | 	wrlong	local08, objptr
0946c     38 00 00 FF 
09470     64 64 86 F1 | 	sub	objptr, ##28772
09474                 | '   ct+=1 											' omit this lpar, this is for expr list
09474                 | '   do
09474                 | LR__0860
09474     F8 29 B0 FD | 	call	#_expr
09478     38 00 00 FF 
0947c     64 64 06 F1 | 	add	objptr, ##28772
09480     32 B1 02 FB | 	rdlong	local06, objptr
09484     01 B0 06 F1 | 	add	local06, #1
09488     32 B1 62 FC | 	wrlong	local06, objptr
0948c     01 AC 06 F1 | 	add	local04, #1
09490     01 B0 86 F1 | 	sub	local06, #1
09494     03 B0 66 F0 | 	shl	local06, #3
09498     02 00 00 FF 
0949c     38 64 86 F1 | 	sub	objptr, ##1080
094a0     32 B1 02 F1 | 	add	local06, objptr
094a4     04 B0 06 F1 | 	add	local06, #4
094a8     58 B5 02 FB | 	rdlong	local08, local06
094ac     14 B4 0E F2 | 	cmp	local08, #20 wz
094b0     36 00 00 FF 
094b4     2C 64 86 F1 | 	sub	objptr, ##27692
094b8     34 00 90 AD |  if_e	jmp	#LR__0861
094bc     38 00 00 FF 
094c0     64 64 06 F1 | 	add	objptr, ##28772
094c4     32 B5 02 FB | 	rdlong	local08, objptr
094c8     03 B4 66 F0 | 	shl	local08, #3
094cc     02 00 00 FF 
094d0     38 64 86 F1 | 	sub	objptr, ##1080
094d4     32 B5 02 F1 | 	add	local08, objptr
094d8     04 B4 06 F1 | 	add	local08, #4
094dc     5A B5 02 FB | 	rdlong	local08, local08
094e0     FE B5 0E F2 | 	cmp	local08, #510 wz
094e4     36 00 00 FF 
094e8     2C 64 86 F1 | 	sub	objptr, ##27692
094ec     84 FF 9F 5D |  if_ne	jmp	#LR__0860
094f0                 | LR__0861
094f0     38 00 00 FF 
094f4     64 64 06 F1 | 	add	objptr, ##28772
094f8     32 B5 02 FB | 	rdlong	local08, objptr
094fc     01 B4 06 F1 | 	add	local08, #1
09500     32 B5 62 FC | 	wrlong	local08, objptr
09504     38 00 00 FF 
09508     64 64 86 F1 | 	sub	objptr, ##28772
0950c     60 29 B0 FD | 	call	#_expr
09510     01 B6 66 F6 | 	neg	local09, #1
09514     00 B8 06 F6 | 	mov	local10, #0
09518                 | '   ct+=1 : expr()
09518                 | '   j=-1 : i=0 
09518                 | '   do 
09518                 | LR__0862
09518                 | '     if variables(i).name=varname$ then j=i: exit loop
09518     5C B1 02 F6 | 	mov	local06, local10
0951c     04 B0 66 F0 | 	shl	local06, #4
09520     32 B5 02 F6 | 	mov	local08, objptr
09524     16 00 00 FF 
09528     18 B4 06 F1 | 	add	local08, ##11288
0952c     5A B1 02 F1 | 	add	local06, local08
09530     58 93 02 FB | 	rdlong	arg01, local06
09534     59 95 02 F6 | 	mov	arg02, local07
09538     A4 B4 B1 FD | 	call	#__system___string_cmp
0953c     00 7A 0E F2 | 	cmp	result1, #0 wz
09540     5C B7 02 A6 |  if_e	mov	local09, local10
09544     20 00 90 AD |  if_e	jmp	#LR__0863
09548     01 B8 06 F1 | 	add	local10, #1
0954c     36 00 00 FF 
09550     28 64 06 F1 | 	add	objptr, ##27688
09554     32 B5 02 FB | 	rdlong	local08, objptr
09558     36 00 00 FF 
0955c     28 64 86 F1 | 	sub	objptr, ##27688
09560     5A B9 5A F2 | 	cmps	local10, local08 wcz
09564     B0 FF 9F ED |  if_be	jmp	#LR__0862
09568                 | LR__0863
09568     5B A7 02 F6 | 	mov	local01, local09
0956c     56 A9 02 F6 | 	mov	local02, local04
09570     17 AA 06 F6 | 	mov	local03, #23
09574     53 B5 02 F6 | 	mov	local08, local01
09578     54 BB 02 F6 | 	mov	local11, local02
0957c     55 B3 02 F6 | 	mov	local07, local03
09580     4B 00 00 FF 
09584     9C 64 06 F1 | 	add	objptr, ##38556
09588     32 A7 02 FB | 	rdlong	local01, objptr
0958c     53 B7 02 F6 | 	mov	local09, local01
09590     01 B6 66 F0 | 	shl	local09, #1
09594     53 B7 02 F1 | 	add	local09, local01
09598     02 B6 66 F0 | 	shl	local09, #2
0959c     03 00 00 FF 
095a0     00 64 86 F1 | 	sub	objptr, ##1536
095a4     32 B7 02 F1 | 	add	local09, objptr
095a8     5B B5 62 FC | 	wrlong	local08, local09
095ac     03 00 00 FF 
095b0     00 64 06 F1 | 	add	objptr, ##1536
095b4     32 A7 02 FB | 	rdlong	local01, objptr
095b8     53 B7 02 F6 | 	mov	local09, local01
095bc     01 B6 66 F0 | 	shl	local09, #1
095c0     53 B7 02 F1 | 	add	local09, local01
095c4     02 B6 66 F0 | 	shl	local09, #2
095c8     03 00 00 FF 
095cc     00 64 86 F1 | 	sub	objptr, ##1536
095d0     32 B7 02 F1 | 	add	local09, objptr
095d4     04 B6 06 F1 | 	add	local09, #4
095d8     5B BB 62 FC | 	wrlong	local11, local09
095dc     03 00 00 FF 
095e0     00 64 06 F1 | 	add	objptr, ##1536
095e4     32 BB 02 FB | 	rdlong	local11, objptr
095e8     5D A7 02 F6 | 	mov	local01, local11
095ec     01 A6 66 F0 | 	shl	local01, #1
095f0     5D A7 02 F1 | 	add	local01, local11
095f4     02 A6 66 F0 | 	shl	local01, #2
095f8     03 00 00 FF 
095fc     00 64 86 F1 | 	sub	objptr, ##1536
09600     32 A7 02 F1 | 	add	local01, objptr
09604     08 A6 06 F1 | 	add	local01, #8
09608     53 B3 62 FC | 	wrlong	local07, local01
0960c     03 00 00 FF 
09610     00 64 06 F1 | 	add	objptr, ##1536
09614     32 B5 02 FB | 	rdlong	local08, objptr
09618     01 B4 06 F1 | 	add	local08, #1
0961c     32 B5 62 FC | 	wrlong	local08, objptr
09620                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
09620                 | '   if numpar>3 then err=45
09620     04 AC 16 F2 | 	cmp	local04, #4 wc
09624     2D AE 06 36 |  if_ae	mov	local05, #45
09628                 | '   if i>varnum then err=20
09628     15 00 00 FF 
0962c     74 64 86 F1 | 	sub	objptr, ##10868
09630     32 B5 02 FB | 	rdlong	local08, objptr
09634     36 00 00 FF 
09638     28 64 86 F1 | 	sub	objptr, ##27688
0963c     5A B9 5A F2 | 	cmps	local10, local08 wcz
09640     14 AE 06 16 |  if_a	mov	local05, #20
09644     04 00 90 FD | 	jmp	#LR__0865
09648                 | LR__0864
09648     0E AE 06 F6 | 	mov	local05, #14
0964c                 | LR__0865
0964c                 | ' return err
0964c     57 7B 02 F6 | 	mov	result1, local05
09650     E7 F0 03 F6 | 	mov	ptra, fp
09654     F2 00 A0 FD | 	call	#popregs_
09658                 | _compile_array_assign_ret
09658     2D 00 64 FD | 	ret
0965c                 | 
0965c                 | ' 
0965c                 | ' '----- compile print command with its ";" and "," modifiers
0965c                 | ' 
0965c                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
0965c                 | _compile_print
0965c     0B CA 05 F6 | 	mov	COUNT_, #11
09660     E8 00 A0 FD | 	call	#pushregs_
09664     00 A6 06 F6 | 	mov	local01, #0
09668     1D AA 06 F6 | 	mov	local03, #29
0966c                 | ' t1.result.uresult=0 : t1.result_type=result_uint
0966c                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
0966c     38 00 00 FF 
09670     64 64 06 F1 | 	add	objptr, ##28772
09674     32 AD 02 FB | 	rdlong	local04, objptr
09678     03 AC 66 F0 | 	shl	local04, #3
0967c     02 00 00 FF 
09680     38 64 86 F1 | 	sub	objptr, ##1080
09684     32 AD 02 F1 | 	add	local04, objptr
09688     04 AC 06 F1 | 	add	local04, #4
0968c     56 AD 02 FB | 	rdlong	local04, local04
09690     FE AD 0E F2 | 	cmp	local04, #510 wz
09694     36 00 00 FF 
09698     2C 64 86 F1 | 	sub	objptr, ##27692
0969c     68 01 90 5D |  if_ne	jmp	#LR__0870
096a0     20 AA 06 F6 | 	mov	local03, #32
096a4     53 AF 02 F6 | 	mov	local05, local01
096a8     54 B1 02 F6 | 	mov	local06, local02
096ac     55 B3 02 F6 | 	mov	local07, local03
096b0     4B 00 00 FF 
096b4     9C 64 06 F1 | 	add	objptr, ##38556
096b8     32 B5 02 FB | 	rdlong	local08, objptr
096bc     5A B7 02 F6 | 	mov	local09, local08
096c0     01 B6 66 F0 | 	shl	local09, #1
096c4     5A B7 02 F1 | 	add	local09, local08
096c8     02 B6 66 F0 | 	shl	local09, #2
096cc     03 00 00 FF 
096d0     00 64 86 F1 | 	sub	objptr, ##1536
096d4     32 B7 02 F1 | 	add	local09, objptr
096d8     5B AF 62 FC | 	wrlong	local05, local09
096dc     03 00 00 FF 
096e0     00 64 06 F1 | 	add	objptr, ##1536
096e4     32 AF 02 FB | 	rdlong	local05, objptr
096e8     57 B9 02 F6 | 	mov	local10, local05
096ec     01 B8 66 F0 | 	shl	local10, #1
096f0     57 B9 02 F1 | 	add	local10, local05
096f4     02 B8 66 F0 | 	shl	local10, #2
096f8     03 00 00 FF 
096fc     00 64 86 F1 | 	sub	objptr, ##1536
09700     32 B9 02 F1 | 	add	local10, objptr
09704     04 B8 06 F1 | 	add	local10, #4
09708     5C B1 62 FC | 	wrlong	local06, local10
0970c     03 00 00 FF 
09710     00 64 06 F1 | 	add	objptr, ##1536
09714     32 AF 02 FB | 	rdlong	local05, objptr
09718     57 BB 02 F6 | 	mov	local11, local05
0971c     01 BA 66 F0 | 	shl	local11, #1
09720     57 BB 02 F1 | 	add	local11, local05
09724     02 BA 66 F0 | 	shl	local11, #2
09728     03 00 00 FF 
0972c     00 64 86 F1 | 	sub	objptr, ##1536
09730     32 BB 02 F1 | 	add	local11, objptr
09734     08 BA 06 F1 | 	add	local11, #8
09738     5D B3 62 FC | 	wrlong	local07, local11
0973c     03 00 00 FF 
09740     00 64 06 F1 | 	add	objptr, ##1536
09744     32 AF 02 FB | 	rdlong	local05, objptr
09748     01 AE 06 F1 | 	add	local05, #1
0974c     32 AF 62 FC | 	wrlong	local05, objptr
09750     44 AA 06 F6 | 	mov	local03, #68
09754     53 AF 02 F6 | 	mov	local05, local01
09758     54 B1 02 F6 | 	mov	local06, local02
0975c     55 B3 02 F6 | 	mov	local07, local03
09760     32 B5 02 FB | 	rdlong	local08, objptr
09764     5A B7 02 F6 | 	mov	local09, local08
09768     01 B6 66 F0 | 	shl	local09, #1
0976c     5A B7 02 F1 | 	add	local09, local08
09770     02 B6 66 F0 | 	shl	local09, #2
09774     03 00 00 FF 
09778     00 64 86 F1 | 	sub	objptr, ##1536
0977c     32 B7 02 F1 | 	add	local09, objptr
09780     5B AF 62 FC | 	wrlong	local05, local09
09784     03 00 00 FF 
09788     00 64 06 F1 | 	add	objptr, ##1536
0978c     32 BB 02 FB | 	rdlong	local11, objptr
09790     5D B9 02 F6 | 	mov	local10, local11
09794     01 B8 66 F0 | 	shl	local10, #1
09798     5D B9 02 F1 | 	add	local10, local11
0979c     02 B8 66 F0 | 	shl	local10, #2
097a0     03 00 00 FF 
097a4     00 64 86 F1 | 	sub	objptr, ##1536
097a8     32 B9 02 F1 | 	add	local10, objptr
097ac     04 B8 06 F1 | 	add	local10, #4
097b0     5C B1 62 FC | 	wrlong	local06, local10
097b4     03 00 00 FF 
097b8     00 64 06 F1 | 	add	objptr, ##1536
097bc     32 B9 02 FB | 	rdlong	local10, objptr
097c0     5C BB 02 F6 | 	mov	local11, local10
097c4     01 BA 66 F0 | 	shl	local11, #1
097c8     5C BB 02 F1 | 	add	local11, local10
097cc     02 BA 66 F0 | 	shl	local11, #2
097d0     03 00 00 FF 
097d4     00 64 86 F1 | 	sub	objptr, ##1536
097d8     32 BB 02 F1 | 	add	local11, objptr
097dc     08 BA 06 F1 | 	add	local11, #8
097e0     5D B3 62 FC | 	wrlong	local07, local11
097e4     03 00 00 FF 
097e8     00 64 06 F1 | 	add	objptr, ##1536
097ec     32 AF 02 FB | 	rdlong	local05, objptr
097f0     01 AE 06 F1 | 	add	local05, #1
097f4     32 AF 62 FC | 	wrlong	local05, objptr
097f8     4B 00 00 FF 
097fc     9C 64 86 F1 | 	sub	objptr, ##38556
09800     00 7A 06 F6 | 	mov	result1, #0
09804     20 05 90 FD | 	jmp	#LR__0877
09808                 | LR__0870
09808                 | ' do
09808                 | LR__0871
09808     64 26 B0 FD | 	call	#_expr
0980c                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
0980c                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0980c     38 00 00 FF 
09810     64 64 06 F1 | 	add	objptr, ##28772
09814     32 AD 02 FB | 	rdlong	local04, objptr
09818     03 AC 66 F0 | 	shl	local04, #3
0981c     02 00 00 FF 
09820     38 64 86 F1 | 	sub	objptr, ##1080
09824     32 AD 02 F1 | 	add	local04, objptr
09828     04 AC 06 F1 | 	add	local04, #4
0982c     56 B5 02 FB | 	rdlong	local08, local04
09830     11 B4 0E F2 | 	cmp	local08, #17 wz
09834     36 00 00 FF 
09838     2C 64 86 F1 | 	sub	objptr, ##27692
0983c     60 01 90 5D |  if_ne	jmp	#LR__0872
09840     21 AA 06 F6 | 	mov	local03, #33
09844     53 AF 02 F6 | 	mov	local05, local01
09848     54 B1 02 F6 | 	mov	local06, local02
0984c     55 B3 02 F6 | 	mov	local07, local03
09850     4B 00 00 FF 
09854     9C 64 06 F1 | 	add	objptr, ##38556
09858     32 B5 02 FB | 	rdlong	local08, objptr
0985c     5A B7 02 F6 | 	mov	local09, local08
09860     01 B6 66 F0 | 	shl	local09, #1
09864     5A B7 02 F1 | 	add	local09, local08
09868     02 B6 66 F0 | 	shl	local09, #2
0986c     03 00 00 FF 
09870     00 64 86 F1 | 	sub	objptr, ##1536
09874     32 B7 02 F1 | 	add	local09, objptr
09878     5B AF 62 FC | 	wrlong	local05, local09
0987c     03 00 00 FF 
09880     00 64 06 F1 | 	add	objptr, ##1536
09884     32 BB 02 FB | 	rdlong	local11, objptr
09888     5D B9 02 F6 | 	mov	local10, local11
0988c     01 B8 66 F0 | 	shl	local10, #1
09890     5D B9 02 F1 | 	add	local10, local11
09894     02 B8 66 F0 | 	shl	local10, #2
09898     03 00 00 FF 
0989c     00 64 86 F1 | 	sub	objptr, ##1536
098a0     32 B9 02 F1 | 	add	local10, objptr
098a4     04 B8 06 F1 | 	add	local10, #4
098a8     5C B1 62 FC | 	wrlong	local06, local10
098ac     03 00 00 FF 
098b0     00 64 06 F1 | 	add	objptr, ##1536
098b4     32 AF 02 FB | 	rdlong	local05, objptr
098b8     57 BB 02 F6 | 	mov	local11, local05
098bc     01 BA 66 F0 | 	shl	local11, #1
098c0     57 BB 02 F1 | 	add	local11, local05
098c4     02 BA 66 F0 | 	shl	local11, #2
098c8     03 00 00 FF 
098cc     00 64 86 F1 | 	sub	objptr, ##1536
098d0     32 BB 02 F1 | 	add	local11, objptr
098d4     08 BA 06 F1 | 	add	local11, #8
098d8     5D B3 62 FC | 	wrlong	local07, local11
098dc     03 00 00 FF 
098e0     00 64 06 F1 | 	add	objptr, ##1536
098e4     32 AF 02 FB | 	rdlong	local05, objptr
098e8     01 AE 06 F1 | 	add	local05, #1
098ec     32 AF 62 FC | 	wrlong	local05, objptr
098f0     44 AA 06 F6 | 	mov	local03, #68
098f4     53 AF 02 F6 | 	mov	local05, local01
098f8     54 B1 02 F6 | 	mov	local06, local02
098fc     55 B3 02 F6 | 	mov	local07, local03
09900     32 B5 02 FB | 	rdlong	local08, objptr
09904     5A B7 02 F6 | 	mov	local09, local08
09908     01 B6 66 F0 | 	shl	local09, #1
0990c     5A B7 02 F1 | 	add	local09, local08
09910     02 B6 66 F0 | 	shl	local09, #2
09914     03 00 00 FF 
09918     00 64 86 F1 | 	sub	objptr, ##1536
0991c     32 B7 02 F1 | 	add	local09, objptr
09920     5B AF 62 FC | 	wrlong	local05, local09
09924     03 00 00 FF 
09928     00 64 06 F1 | 	add	objptr, ##1536
0992c     32 BB 02 FB | 	rdlong	local11, objptr
09930     5D B9 02 F6 | 	mov	local10, local11
09934     01 B8 66 F0 | 	shl	local10, #1
09938     5D B9 02 F1 | 	add	local10, local11
0993c     02 B8 66 F0 | 	shl	local10, #2
09940     03 00 00 FF 
09944     00 64 86 F1 | 	sub	objptr, ##1536
09948     32 B9 02 F1 | 	add	local10, objptr
0994c     04 B8 06 F1 | 	add	local10, #4
09950     5C B1 62 FC | 	wrlong	local06, local10
09954     03 00 00 FF 
09958     00 64 06 F1 | 	add	objptr, ##1536
0995c     32 B9 02 FB | 	rdlong	local10, objptr
09960     5C BB 02 F6 | 	mov	local11, local10
09964     01 BA 66 F0 | 	shl	local11, #1
09968     5C BB 02 F1 | 	add	local11, local10
0996c     02 BA 66 F0 | 	shl	local11, #2
09970     03 00 00 FF 
09974     00 64 86 F1 | 	sub	objptr, ##1536
09978     32 BB 02 F1 | 	add	local11, objptr
0997c     08 BA 06 F1 | 	add	local11, #8
09980     5D B3 62 FC | 	wrlong	local07, local11
09984     03 00 00 FF 
09988     00 64 06 F1 | 	add	objptr, ##1536
0998c     32 AF 02 FB | 	rdlong	local05, objptr
09990     01 AE 06 F1 | 	add	local05, #1
09994     32 AF 62 FC | 	wrlong	local05, objptr
09998     4B 00 00 FF 
0999c     9C 64 86 F1 | 	sub	objptr, ##38556
099a0                 | LR__0872
099a0                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
099a0     38 00 00 FF 
099a4     64 64 06 F1 | 	add	objptr, ##28772
099a8     32 AD 02 FB | 	rdlong	local04, objptr
099ac     03 AC 66 F0 | 	shl	local04, #3
099b0     02 00 00 FF 
099b4     38 64 86 F1 | 	sub	objptr, ##1080
099b8     32 AD 02 F1 | 	add	local04, objptr
099bc     04 AC 06 F1 | 	add	local04, #4
099c0     56 B5 02 FB | 	rdlong	local08, local04
099c4     12 B4 0E F2 | 	cmp	local08, #18 wz
099c8     36 00 00 FF 
099cc     2C 64 86 F1 | 	sub	objptr, ##27692
099d0     60 01 90 5D |  if_ne	jmp	#LR__0873
099d4     22 AA 06 F6 | 	mov	local03, #34
099d8     53 AF 02 F6 | 	mov	local05, local01
099dc     54 B1 02 F6 | 	mov	local06, local02
099e0     55 B3 02 F6 | 	mov	local07, local03
099e4     4B 00 00 FF 
099e8     9C 64 06 F1 | 	add	objptr, ##38556
099ec     32 B5 02 FB | 	rdlong	local08, objptr
099f0     5A B7 02 F6 | 	mov	local09, local08
099f4     01 B6 66 F0 | 	shl	local09, #1
099f8     5A B7 02 F1 | 	add	local09, local08
099fc     02 B6 66 F0 | 	shl	local09, #2
09a00     03 00 00 FF 
09a04     00 64 86 F1 | 	sub	objptr, ##1536
09a08     32 B7 02 F1 | 	add	local09, objptr
09a0c     5B AF 62 FC | 	wrlong	local05, local09
09a10     03 00 00 FF 
09a14     00 64 06 F1 | 	add	objptr, ##1536
09a18     32 BB 02 FB | 	rdlong	local11, objptr
09a1c     5D B9 02 F6 | 	mov	local10, local11
09a20     01 B8 66 F0 | 	shl	local10, #1
09a24     5D B9 02 F1 | 	add	local10, local11
09a28     02 B8 66 F0 | 	shl	local10, #2
09a2c     03 00 00 FF 
09a30     00 64 86 F1 | 	sub	objptr, ##1536
09a34     32 B9 02 F1 | 	add	local10, objptr
09a38     04 B8 06 F1 | 	add	local10, #4
09a3c     5C B1 62 FC | 	wrlong	local06, local10
09a40     03 00 00 FF 
09a44     00 64 06 F1 | 	add	objptr, ##1536
09a48     32 AF 02 FB | 	rdlong	local05, objptr
09a4c     57 BB 02 F6 | 	mov	local11, local05
09a50     01 BA 66 F0 | 	shl	local11, #1
09a54     57 BB 02 F1 | 	add	local11, local05
09a58     02 BA 66 F0 | 	shl	local11, #2
09a5c     03 00 00 FF 
09a60     00 64 86 F1 | 	sub	objptr, ##1536
09a64     32 BB 02 F1 | 	add	local11, objptr
09a68     08 BA 06 F1 | 	add	local11, #8
09a6c     5D B3 62 FC | 	wrlong	local07, local11
09a70     03 00 00 FF 
09a74     00 64 06 F1 | 	add	objptr, ##1536
09a78     32 AF 02 FB | 	rdlong	local05, objptr
09a7c     01 AE 06 F1 | 	add	local05, #1
09a80     32 AF 62 FC | 	wrlong	local05, objptr
09a84     44 AA 06 F6 | 	mov	local03, #68
09a88     53 AF 02 F6 | 	mov	local05, local01
09a8c     54 B1 02 F6 | 	mov	local06, local02
09a90     55 B3 02 F6 | 	mov	local07, local03
09a94     32 B5 02 FB | 	rdlong	local08, objptr
09a98     5A B7 02 F6 | 	mov	local09, local08
09a9c     01 B6 66 F0 | 	shl	local09, #1
09aa0     5A B7 02 F1 | 	add	local09, local08
09aa4     02 B6 66 F0 | 	shl	local09, #2
09aa8     03 00 00 FF 
09aac     00 64 86 F1 | 	sub	objptr, ##1536
09ab0     32 B7 02 F1 | 	add	local09, objptr
09ab4     5B AF 62 FC | 	wrlong	local05, local09
09ab8     03 00 00 FF 
09abc     00 64 06 F1 | 	add	objptr, ##1536
09ac0     32 BB 02 FB | 	rdlong	local11, objptr
09ac4     5D B9 02 F6 | 	mov	local10, local11
09ac8     01 B8 66 F0 | 	shl	local10, #1
09acc     5D B9 02 F1 | 	add	local10, local11
09ad0     02 B8 66 F0 | 	shl	local10, #2
09ad4     03 00 00 FF 
09ad8     00 64 86 F1 | 	sub	objptr, ##1536
09adc     32 B9 02 F1 | 	add	local10, objptr
09ae0     04 B8 06 F1 | 	add	local10, #4
09ae4     5C B1 62 FC | 	wrlong	local06, local10
09ae8     03 00 00 FF 
09aec     00 64 06 F1 | 	add	objptr, ##1536
09af0     32 B9 02 FB | 	rdlong	local10, objptr
09af4     5C BB 02 F6 | 	mov	local11, local10
09af8     01 BA 66 F0 | 	shl	local11, #1
09afc     5C BB 02 F1 | 	add	local11, local10
09b00     02 BA 66 F0 | 	shl	local11, #2
09b04     03 00 00 FF 
09b08     00 64 86 F1 | 	sub	objptr, ##1536
09b0c     32 BB 02 F1 | 	add	local11, objptr
09b10     08 BA 06 F1 | 	add	local11, #8
09b14     5D B3 62 FC | 	wrlong	local07, local11
09b18     03 00 00 FF 
09b1c     00 64 06 F1 | 	add	objptr, ##1536
09b20     32 AF 02 FB | 	rdlong	local05, objptr
09b24     01 AE 06 F1 | 	add	local05, #1
09b28     32 AF 62 FC | 	wrlong	local05, objptr
09b2c     4B 00 00 FF 
09b30     9C 64 86 F1 | 	sub	objptr, ##38556
09b34                 | LR__0873
09b34                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09b34     38 00 00 FF 
09b38     64 64 06 F1 | 	add	objptr, ##28772
09b3c     32 AD 02 FB | 	rdlong	local04, objptr
09b40     03 AC 66 F0 | 	shl	local04, #3
09b44     02 00 00 FF 
09b48     38 64 86 F1 | 	sub	objptr, ##1080
09b4c     32 AD 02 F1 | 	add	local04, objptr
09b50     04 AC 06 F1 | 	add	local04, #4
09b54     56 B5 02 FB | 	rdlong	local08, local04
09b58     FE B5 0E F2 | 	cmp	local08, #510 wz
09b5c     36 00 00 FF 
09b60     2C 64 86 F1 | 	sub	objptr, ##27692
09b64     B8 00 90 5D |  if_ne	jmp	#LR__0874
09b68     44 AA 06 F6 | 	mov	local03, #68
09b6c     53 AF 02 F6 | 	mov	local05, local01
09b70     54 B1 02 F6 | 	mov	local06, local02
09b74     55 B3 02 F6 | 	mov	local07, local03
09b78     4B 00 00 FF 
09b7c     9C 64 06 F1 | 	add	objptr, ##38556
09b80     32 B5 02 FB | 	rdlong	local08, objptr
09b84     5A B7 02 F6 | 	mov	local09, local08
09b88     01 B6 66 F0 | 	shl	local09, #1
09b8c     5A B7 02 F1 | 	add	local09, local08
09b90     02 B6 66 F0 | 	shl	local09, #2
09b94     03 00 00 FF 
09b98     00 64 86 F1 | 	sub	objptr, ##1536
09b9c     32 B7 02 F1 | 	add	local09, objptr
09ba0     5B AF 62 FC | 	wrlong	local05, local09
09ba4     03 00 00 FF 
09ba8     00 64 06 F1 | 	add	objptr, ##1536
09bac     32 BB 02 FB | 	rdlong	local11, objptr
09bb0     5D B9 02 F6 | 	mov	local10, local11
09bb4     01 B8 66 F0 | 	shl	local10, #1
09bb8     5D B9 02 F1 | 	add	local10, local11
09bbc     02 B8 66 F0 | 	shl	local10, #2
09bc0     03 00 00 FF 
09bc4     00 64 86 F1 | 	sub	objptr, ##1536
09bc8     32 B9 02 F1 | 	add	local10, objptr
09bcc     04 B8 06 F1 | 	add	local10, #4
09bd0     5C B1 62 FC | 	wrlong	local06, local10
09bd4     03 00 00 FF 
09bd8     00 64 06 F1 | 	add	objptr, ##1536
09bdc     32 B9 02 FB | 	rdlong	local10, objptr
09be0     5C BB 02 F6 | 	mov	local11, local10
09be4     01 BA 66 F0 | 	shl	local11, #1
09be8     5C BB 02 F1 | 	add	local11, local10
09bec     02 BA 66 F0 | 	shl	local11, #2
09bf0     03 00 00 FF 
09bf4     00 64 86 F1 | 	sub	objptr, ##1536
09bf8     32 BB 02 F1 | 	add	local11, objptr
09bfc     08 BA 06 F1 | 	add	local11, #8
09c00     5D B3 62 FC | 	wrlong	local07, local11
09c04     03 00 00 FF 
09c08     00 64 06 F1 | 	add	objptr, ##1536
09c0c     32 AF 02 FB | 	rdlong	local05, objptr
09c10     01 AE 06 F1 | 	add	local05, #1
09c14     32 AF 62 FC | 	wrlong	local05, objptr
09c18     4B 00 00 FF 
09c1c     9C 64 86 F1 | 	sub	objptr, ##38556
09c20                 | LR__0874
09c20                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09c20     38 00 00 FF 
09c24     64 64 06 F1 | 	add	objptr, ##28772
09c28     32 AD 02 FB | 	rdlong	local04, objptr
09c2c     03 AC 66 F0 | 	shl	local04, #3
09c30     02 00 00 FF 
09c34     38 64 86 F1 | 	sub	objptr, ##1080
09c38     32 AD 02 F1 | 	add	local04, objptr
09c3c     04 AC 06 F1 | 	add	local04, #4
09c40     56 B5 02 FB | 	rdlong	local08, local04
09c44     11 B4 0E F2 | 	cmp	local08, #17 wz
09c48     36 00 00 FF 
09c4c     2C 64 86 F1 | 	sub	objptr, ##27692
09c50     6C 00 90 AD |  if_e	jmp	#LR__0875
09c54     38 00 00 FF 
09c58     64 64 06 F1 | 	add	objptr, ##28772
09c5c     32 B5 02 FB | 	rdlong	local08, objptr
09c60     03 B4 66 F0 | 	shl	local08, #3
09c64     02 00 00 FF 
09c68     38 64 86 F1 | 	sub	objptr, ##1080
09c6c     32 B5 02 F1 | 	add	local08, objptr
09c70     04 B4 06 F1 | 	add	local08, #4
09c74     5A B5 02 FB | 	rdlong	local08, local08
09c78     12 B4 0E F2 | 	cmp	local08, #18 wz
09c7c     36 00 00 FF 
09c80     2C 64 86 F1 | 	sub	objptr, ##27692
09c84     38 00 90 AD |  if_e	jmp	#LR__0875
09c88     38 00 00 FF 
09c8c     64 64 06 F1 | 	add	objptr, ##28772
09c90     32 BB 02 FB | 	rdlong	local11, objptr
09c94     03 BA 66 F0 | 	shl	local11, #3
09c98     02 00 00 FF 
09c9c     38 64 86 F1 | 	sub	objptr, ##1080
09ca0     32 BB 02 F1 | 	add	local11, objptr
09ca4     04 BA 06 F1 | 	add	local11, #4
09ca8     5D BB 02 FB | 	rdlong	local11, local11
09cac     FE BB 0E F2 | 	cmp	local11, #510 wz
09cb0     36 00 00 FF 
09cb4     2C 64 86 F1 | 	sub	objptr, ##27692
09cb8     16 7A 06 56 |  if_ne	mov	result1, #22
09cbc     68 00 90 5D |  if_ne	jmp	#LR__0877
09cc0                 | LR__0875
09cc0     38 00 00 FF 
09cc4     64 64 06 F1 | 	add	objptr, ##28772
09cc8     32 AD 02 FB | 	rdlong	local04, objptr
09ccc     01 AC 06 F1 | 	add	local04, #1
09cd0     32 AD 62 FC | 	wrlong	local04, objptr
09cd4     03 AC 66 F0 | 	shl	local04, #3
09cd8     02 00 00 FF 
09cdc     38 64 86 F1 | 	sub	objptr, ##1080
09ce0     32 AD 02 F1 | 	add	local04, objptr
09ce4     04 AC 06 F1 | 	add	local04, #4
09ce8     56 B5 02 FB | 	rdlong	local08, local04
09cec     FE B5 0E F2 | 	cmp	local08, #510 wz
09cf0     36 00 00 FF 
09cf4     2C 64 86 F1 | 	sub	objptr, ##27692
09cf8     28 00 90 AD |  if_e	jmp	#LR__0876
09cfc     38 00 00 FF 
09d00     64 64 06 F1 | 	add	objptr, ##28772
09d04     32 BB 02 FB | 	rdlong	local11, objptr
09d08     0E 00 00 FF 
09d0c     1C 64 06 F1 | 	add	objptr, ##7196
09d10     32 B9 02 FB | 	rdlong	local10, objptr
09d14     46 00 00 FF 
09d18     80 64 86 F1 | 	sub	objptr, ##35968
09d1c     5C BB 52 F2 | 	cmps	local11, local10 wc
09d20     E4 FA 9F CD |  if_b	jmp	#LR__0871
09d24                 | LR__0876
09d24                 | ' return 0
09d24     00 7A 06 F6 | 	mov	result1, #0
09d28                 | LR__0877
09d28     E7 F0 03 F6 | 	mov	ptra, fp
09d2c     F2 00 A0 FD | 	call	#popregs_
09d30                 | _compile_print_ret
09d30     2D 00 64 FD | 	ret
09d34                 | 
09d34                 | ' 
09d34                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09d34                 | ' 
09d34                 | ' function compile_if(aline as ulong) as ulong  
09d34                 | _compile_if
09d34     09 CA 05 F6 | 	mov	COUNT_, #9
09d38     E8 00 A0 FD | 	call	#pushregs_
09d3c                 | _compile_if_enter
09d3c     49 AD 02 F6 | 	mov	local04, arg01
09d40                 | ' return expr()
09d40     2C 21 B0 FD | 	call	#_expr
09d44     38 00 00 FF 
09d48     64 64 06 F1 | 	add	objptr, ##28772
09d4c     32 95 02 FB | 	rdlong	arg02, objptr
09d50     4A AF 02 F6 | 	mov	local05, arg02
09d54     03 AE 66 F0 | 	shl	local05, #3
09d58     02 00 00 FF 
09d5c     38 64 86 F1 | 	sub	objptr, ##1080
09d60     32 AF 02 F1 | 	add	local05, objptr
09d64     04 AE 06 F1 | 	add	local05, #4
09d68     57 AF 02 FB | 	rdlong	local05, local05
09d6c     01 94 06 F1 | 	add	arg02, #1
09d70     02 00 00 FF 
09d74     38 64 06 F1 | 	add	objptr, ##1080
09d78     32 95 62 FC | 	wrlong	arg02, objptr
09d7c     38 00 00 FF 
09d80     64 64 86 F1 | 	sub	objptr, ##28772
09d84                 | ' 
09d84                 | ' err=compile_fun_1p()
09d84                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09d84     5B AE 0E F2 | 	cmp	local05, #91 wz
09d88     34 7A 06 56 |  if_ne	mov	result1, #52
09d8c     20 01 90 5D |  if_ne	jmp	#LR__0882
09d90     58 AA 06 F6 | 	mov	local03, #88
09d94     53 B1 02 F6 | 	mov	local06, local01
09d98     54 B3 02 F6 | 	mov	local07, local02
09d9c     55 95 02 F6 | 	mov	arg02, local03
09da0     4B 00 00 FF 
09da4     9C 64 06 F1 | 	add	objptr, ##38556
09da8     32 93 02 FB | 	rdlong	arg01, objptr
09dac     49 B5 02 F6 | 	mov	local08, arg01
09db0     01 B4 66 F0 | 	shl	local08, #1
09db4     49 B5 02 F1 | 	add	local08, arg01
09db8     02 B4 66 F0 | 	shl	local08, #2
09dbc     03 00 00 FF 
09dc0     00 64 86 F1 | 	sub	objptr, ##1536
09dc4     32 B5 02 F1 | 	add	local08, objptr
09dc8     5A B1 62 FC | 	wrlong	local06, local08
09dcc     03 00 00 FF 
09dd0     00 64 06 F1 | 	add	objptr, ##1536
09dd4     32 B1 02 FB | 	rdlong	local06, objptr
09dd8     58 93 02 F6 | 	mov	arg01, local06
09ddc     01 92 66 F0 | 	shl	arg01, #1
09de0     58 93 02 F1 | 	add	arg01, local06
09de4     02 92 66 F0 | 	shl	arg01, #2
09de8     03 00 00 FF 
09dec     00 64 86 F1 | 	sub	objptr, ##1536
09df0     32 93 02 F1 | 	add	arg01, objptr
09df4     04 92 06 F1 | 	add	arg01, #4
09df8     49 B3 62 FC | 	wrlong	local07, arg01
09dfc     03 00 00 FF 
09e00     00 64 06 F1 | 	add	objptr, ##1536
09e04     32 B1 02 FB | 	rdlong	local06, objptr
09e08     58 93 02 F6 | 	mov	arg01, local06
09e0c     01 92 66 F0 | 	shl	arg01, #1
09e10     58 93 02 F1 | 	add	arg01, local06
09e14     02 92 66 F0 | 	shl	arg01, #2
09e18     03 00 00 FF 
09e1c     00 64 86 F1 | 	sub	objptr, ##1536
09e20     32 93 02 F1 | 	add	arg01, objptr
09e24     08 92 06 F1 | 	add	arg01, #8
09e28     49 95 62 FC | 	wrlong	arg02, arg01
09e2c     03 00 00 FF 
09e30     00 64 06 F1 | 	add	objptr, ##1536
09e34     32 B1 02 FB | 	rdlong	local06, objptr
09e38     01 B0 06 F1 | 	add	local06, #1
09e3c     32 B1 62 FC | 	wrlong	local06, objptr
09e40                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09e40                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09e40     13 00 00 FF 
09e44     38 64 86 F1 | 	sub	objptr, ##9784
09e48     32 95 02 FB | 	rdlong	arg02, objptr
09e4c     01 94 06 F1 | 	add	arg02, #1
09e50     03 94 66 F0 | 	shl	arg02, #3
09e54     02 00 00 FF 
09e58     38 64 86 F1 | 	sub	objptr, ##1080
09e5c     32 95 02 F1 | 	add	arg02, objptr
09e60     4A 93 02 FB | 	rdlong	arg01, arg02
09e64     36 00 00 FF 
09e68     2C 64 86 F1 | 	sub	objptr, ##27692
09e6c                 | ' 
09e6c                 | ' select case s
09e6c     93 01 00 FF 
09e70     CE 94 06 F6 | 	mov	arg02, ##@LR__5639
09e74     68 AB B1 FD | 	call	#__system___string_cmp
09e78     00 7A 0E F2 | 	cmp	result1, #0 wz
09e7c     1B 7A 06 A6 |  if_e	mov	result1, #27
09e80     00 7A 06 56 |  if_ne	mov	result1, #0
09e84     00 7A 0E F2 | 	cmp	result1, #0 wz
09e88     10 00 90 AD |  if_e	jmp	#LR__0880
09e8c     05 92 06 F6 | 	mov	arg01, #5
09e90     4C E4 BF FD | 	call	#_compile_immediate_assign
09e94     3D B7 02 F6 | 	mov	local09, result1
09e98     10 00 90 FD | 	jmp	#LR__0881
09e9c                 | LR__0880
09e9c     05 92 06 F6 | 	mov	arg01, #5
09ea0     56 95 02 F6 | 	mov	arg02, local04
09ea4     50 DA BF FD | 	call	#_compile_immediate
09ea8     3D B7 02 F6 | 	mov	local09, result1
09eac                 | LR__0881
09eac                 | ' return err
09eac     5B 7B 02 F6 | 	mov	result1, local09
09eb0                 | LR__0882
09eb0     E7 F0 03 F6 | 	mov	ptra, fp
09eb4     F2 00 A0 FD | 	call	#popregs_
09eb8                 | _compile_if_ret
09eb8     2D 00 64 FD | 	ret
09ebc                 | 
09ebc                 | ' 
09ebc                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09ebc                 | ' 
09ebc                 | ' function compile_else(aline as ulong) as ulong  
09ebc                 | _compile_else
09ebc     07 CA 05 F6 | 	mov	COUNT_, #7
09ec0     E8 00 A0 FD | 	call	#pushregs_
09ec4                 | _compile_else_enter
09ec4     49 AD 02 F6 | 	mov	local04, arg01
09ec8     5A AA 06 F6 | 	mov	local03, #90
09ecc     53 AF 02 F6 | 	mov	local05, local01
09ed0     54 B1 02 F6 | 	mov	local06, local02
09ed4     55 A7 02 F6 | 	mov	local01, local03
09ed8     4B 00 00 FF 
09edc     9C 64 06 F1 | 	add	objptr, ##38556
09ee0     32 95 02 FB | 	rdlong	arg02, objptr
09ee4     4A 93 02 F6 | 	mov	arg01, arg02
09ee8     01 92 66 F0 | 	shl	arg01, #1
09eec     4A 93 02 F1 | 	add	arg01, arg02
09ef0     02 92 66 F0 | 	shl	arg01, #2
09ef4     03 00 00 FF 
09ef8     00 64 86 F1 | 	sub	objptr, ##1536
09efc     32 93 02 F1 | 	add	arg01, objptr
09f00     49 AF 62 FC | 	wrlong	local05, arg01
09f04     03 00 00 FF 
09f08     00 64 06 F1 | 	add	objptr, ##1536
09f0c     32 AF 02 FB | 	rdlong	local05, objptr
09f10     57 95 02 F6 | 	mov	arg02, local05
09f14     01 94 66 F0 | 	shl	arg02, #1
09f18     57 95 02 F1 | 	add	arg02, local05
09f1c     02 94 66 F0 | 	shl	arg02, #2
09f20     03 00 00 FF 
09f24     00 64 86 F1 | 	sub	objptr, ##1536
09f28     32 95 02 F1 | 	add	arg02, objptr
09f2c     04 94 06 F1 | 	add	arg02, #4
09f30     4A B1 62 FC | 	wrlong	local06, arg02
09f34     03 00 00 FF 
09f38     00 64 06 F1 | 	add	objptr, ##1536
09f3c     32 B1 02 FB | 	rdlong	local06, objptr
09f40     58 AF 02 F6 | 	mov	local05, local06
09f44     01 AE 66 F0 | 	shl	local05, #1
09f48     58 AF 02 F1 | 	add	local05, local06
09f4c     02 AE 66 F0 | 	shl	local05, #2
09f50     03 00 00 FF 
09f54     00 64 86 F1 | 	sub	objptr, ##1536
09f58     32 AF 02 F1 | 	add	local05, objptr
09f5c     08 AE 06 F1 | 	add	local05, #8
09f60     57 A7 62 FC | 	wrlong	local01, local05
09f64     03 00 00 FF 
09f68     00 64 06 F1 | 	add	objptr, ##1536
09f6c     32 AF 02 FB | 	rdlong	local05, objptr
09f70     01 AE 06 F1 | 	add	local05, #1
09f74     32 AF 62 FC | 	wrlong	local05, objptr
09f78                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09f78                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09f78     13 00 00 FF 
09f7c     38 64 86 F1 | 	sub	objptr, ##9784
09f80     32 B1 02 FB | 	rdlong	local06, objptr
09f84     01 B0 06 F1 | 	add	local06, #1
09f88     03 B0 66 F0 | 	shl	local06, #3
09f8c     02 00 00 FF 
09f90     38 64 86 F1 | 	sub	objptr, ##1080
09f94     32 B1 02 F1 | 	add	local06, objptr
09f98     58 93 02 FB | 	rdlong	arg01, local06
09f9c     36 00 00 FF 
09fa0     2C 64 86 F1 | 	sub	objptr, ##27692
09fa4                 | ' 
09fa4                 | ' select case s
09fa4     93 01 00 FF 
09fa8     CE 94 06 F6 | 	mov	arg02, ##@LR__5639
09fac     30 AA B1 FD | 	call	#__system___string_cmp
09fb0     00 7A 0E F2 | 	cmp	result1, #0 wz
09fb4     1B 7A 06 A6 |  if_e	mov	result1, #27
09fb8     00 7A 06 56 |  if_ne	mov	result1, #0
09fbc     00 7A 0E F2 | 	cmp	result1, #0 wz
09fc0     10 00 90 AD |  if_e	jmp	#LR__0890
09fc4     05 92 06 F6 | 	mov	arg01, #5
09fc8     14 E3 BF FD | 	call	#_compile_immediate_assign
09fcc     3D B3 02 F6 | 	mov	local07, result1
09fd0     10 00 90 FD | 	jmp	#LR__0891
09fd4                 | LR__0890
09fd4     05 92 06 F6 | 	mov	arg01, #5
09fd8     56 95 02 F6 | 	mov	arg02, local04
09fdc     18 D9 BF FD | 	call	#_compile_immediate
09fe0     3D B3 02 F6 | 	mov	local07, result1
09fe4                 | LR__0891
09fe4                 | ' return err
09fe4     59 7B 02 F6 | 	mov	result1, local07
09fe8     E7 F0 03 F6 | 	mov	ptra, fp
09fec     F2 00 A0 FD | 	call	#popregs_
09ff0                 | _compile_else_ret
09ff0     2D 00 64 FD | 	ret
09ff4                 | 
09ff4                 | ' 
09ff4                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09ff4                 | ' 
09ff4                 | ' function compile_dim() as ulong  
09ff4                 | _compile_dim
09ff4     11 CA 05 F6 | 	mov	COUNT_, #17
09ff8     E8 00 A0 FD | 	call	#pushregs_
09ffc     01 A6 06 F6 | 	mov	local01, #1
0a000     01 A8 06 F6 | 	mov	local02, #1
0a004     01 AA 06 F6 | 	mov	local03, #1
0a008                 | ' 
0a008                 | ' dims(0)=1: dims(1)=1: dims(2)=1
0a008                 | ' if isname(lparts(ct).part$) then 
0a008     38 00 00 FF 
0a00c     64 64 06 F1 | 	add	objptr, ##28772
0a010     32 99 02 FB | 	rdlong	arg04, objptr
0a014     03 98 66 F0 | 	shl	arg04, #3
0a018     02 00 00 FF 
0a01c     38 64 86 F1 | 	sub	objptr, ##1080
0a020     32 99 02 F1 | 	add	arg04, objptr
0a024     4C 93 02 FB | 	rdlong	arg01, arg04
0a028     36 00 00 FF 
0a02c     2C 64 86 F1 | 	sub	objptr, ##27692
0a030     C4 C7 BF FD | 	call	#_isname
0a034     00 7A 0E F2 | 	cmp	result1, #0 wz
0a038     58 05 90 AD |  if_e	jmp	#LR__0923
0a03c     38 00 00 FF 
0a040     64 64 06 F1 | 	add	objptr, ##28772
0a044     32 AD 02 FB | 	rdlong	local04, objptr
0a048     03 AC 66 F0 | 	shl	local04, #3
0a04c     02 00 00 FF 
0a050     38 64 86 F1 | 	sub	objptr, ##1080
0a054     32 AD 02 F1 | 	add	local04, objptr
0a058     56 AF 02 FB | 	rdlong	local05, local04
0a05c     01 B0 66 F6 | 	neg	local06, #1
0a060                 | '   varname2$=lparts(ct).part$ 
0a060                 | '   j=-1
0a060                 | '   if varnum>0 then
0a060     04 64 86 F1 | 	sub	objptr, #4
0a064     32 B3 02 FB | 	rdlong	local07, objptr
0a068     36 00 00 FF 
0a06c     28 64 86 F1 | 	sub	objptr, ##27688
0a070     01 B2 56 F2 | 	cmps	local07, #1 wc
0a074     54 00 90 CD |  if_b	jmp	#LR__0902
0a078                 | '     for i=0 to varnum-1
0a078     00 B4 06 F6 | 	mov	local08, #0
0a07c     36 00 00 FF 
0a080     28 64 06 F1 | 	add	objptr, ##27688
0a084     32 B7 02 FB | 	rdlong	local09, objptr
0a088     36 00 00 FF 
0a08c     28 64 86 F1 | 	sub	objptr, ##27688
0a090                 | LR__0900
0a090     5B B5 52 F2 | 	cmps	local08, local09 wc
0a094     34 00 90 3D |  if_ae	jmp	#LR__0901
0a098                 | '       if variables(i).name=varname2$ then j=i : exit
0a098     5A AD 02 F6 | 	mov	local04, local08
0a09c     04 AC 66 F0 | 	shl	local04, #4
0a0a0     32 95 02 F6 | 	mov	arg02, objptr
0a0a4     16 00 00 FF 
0a0a8     18 94 06 F1 | 	add	arg02, ##11288
0a0ac     4A AD 02 F1 | 	add	local04, arg02
0a0b0     56 93 02 FB | 	rdlong	arg01, local04
0a0b4     57 95 02 F6 | 	mov	arg02, local05
0a0b8     24 A9 B1 FD | 	call	#__system___string_cmp
0a0bc     00 7A 0E F2 | 	cmp	result1, #0 wz
0a0c0     5A B1 02 A6 |  if_e	mov	local06, local08
0a0c4     01 B4 06 51 |  if_ne	add	local08, #1
0a0c8     C4 FF 9F 5D |  if_ne	jmp	#LR__0900
0a0cc                 | LR__0901
0a0cc                 | LR__0902
0a0cc                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
0a0cc     FF FF 7F FF 
0a0d0     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0a0d4     36 00 00 AF 
0a0d8     28 64 06 A1 |  if_e	add	objptr, ##27688
0a0dc     32 B1 02 AB |  if_e	rdlong	local06, objptr
0a0e0     36 00 00 AF 
0a0e4     28 64 86 A1 |  if_e	sub	objptr, ##27688
0a0e8     78 00 90 AD |  if_e	jmp	#LR__0903
0a0ec     00 92 06 F6 | 	mov	arg01, #0
0a0f0     48 FE B1 FD | 	call	#__system___getiolock_0622
0a0f4     3D 93 02 F6 | 	mov	arg01, result1
0a0f8     BC A8 B1 FD | 	call	#__system___lockmem
0a0fc     95 01 00 FF 
0a100     DB 95 06 F6 | 	mov	arg02, ##@LR__5911
0a104     00 92 06 F6 | 	mov	arg01, #0
0a108     00 96 06 F6 | 	mov	arg03, #0
0a10c     9C B5 B1 FD | 	call	#__system___basic_print_string
0a110     53 00 00 FF 
0a114     08 65 06 F1 | 	add	objptr, ##42760
0a118     32 95 02 FB | 	rdlong	arg02, objptr
0a11c     53 00 00 FF 
0a120     08 65 86 F1 | 	sub	objptr, ##42760
0a124     00 92 06 F6 | 	mov	arg01, #0
0a128     00 96 06 F6 | 	mov	arg03, #0
0a12c     0A 98 06 F6 | 	mov	arg04, #10
0a130     FC B5 B1 FD | 	call	#__system___basic_print_unsigned
0a134     95 01 00 FF 
0a138     E9 95 06 F6 | 	mov	arg02, ##@LR__5912
0a13c     00 92 06 F6 | 	mov	arg01, #0
0a140     00 96 06 F6 | 	mov	arg03, #0
0a144     64 B5 B1 FD | 	call	#__system___basic_print_string
0a148     00 92 06 F6 | 	mov	arg01, #0
0a14c     0A 94 06 F6 | 	mov	arg02, #10
0a150     00 96 06 F6 | 	mov	arg03, #0
0a154     FC B4 B1 FD | 	call	#__system___basic_print_char
0a158     00 92 06 F6 | 	mov	arg01, #0
0a15c     DC FD B1 FD | 	call	#__system___getiolock_0622
0a160     3D 01 68 FC | 	wrlong	#0, result1
0a164                 | LR__0903
0a164                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
0a164     38 00 00 FF 
0a168     64 64 06 F1 | 	add	objptr, ##28772
0a16c     32 95 02 FB | 	rdlong	arg02, objptr
0a170     01 94 06 F1 | 	add	arg02, #1
0a174     03 94 66 F0 | 	shl	arg02, #3
0a178     02 00 00 FF 
0a17c     38 64 86 F1 | 	sub	objptr, ##1080
0a180     32 95 02 F1 | 	add	arg02, objptr
0a184     4A 93 02 FB | 	rdlong	arg01, arg02
0a188     96 01 00 FF 
0a18c     0A 94 06 F6 | 	mov	arg02, ##@LR__5913
0a190     36 00 00 FF 
0a194     2C 64 86 F1 | 	sub	objptr, ##27692
0a198     44 A8 B1 FD | 	call	#__system___string_cmp
0a19c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a1a0     44 00 90 AD |  if_e	jmp	#LR__0904
0a1a4     38 00 00 FF 
0a1a8     64 64 06 F1 | 	add	objptr, ##28772
0a1ac     32 B7 02 FB | 	rdlong	local09, objptr
0a1b0     01 B6 06 F1 | 	add	local09, #1
0a1b4     03 B6 66 F0 | 	shl	local09, #3
0a1b8     02 00 00 FF 
0a1bc     38 64 86 F1 | 	sub	objptr, ##1080
0a1c0     32 B7 02 F1 | 	add	local09, objptr
0a1c4     5B 93 02 FB | 	rdlong	arg01, local09
0a1c8     96 01 00 FF 
0a1cc     0C 94 06 F6 | 	mov	arg02, ##@LR__5914
0a1d0     36 00 00 FF 
0a1d4     2C 64 86 F1 | 	sub	objptr, ##27692
0a1d8     04 A8 B1 FD | 	call	#__system___string_cmp
0a1dc     00 7A 0E F2 | 	cmp	result1, #0 wz
0a1e0     2B 7A 06 56 |  if_ne	mov	result1, #43
0a1e4     B4 04 90 5D |  if_ne	jmp	#LR__0925
0a1e8                 | LR__0904
0a1e8                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
0a1e8     38 00 00 FF 
0a1ec     64 64 06 F1 | 	add	objptr, ##28772
0a1f0     32 95 02 FB | 	rdlong	arg02, objptr
0a1f4     01 94 06 F1 | 	add	arg02, #1
0a1f8     03 94 66 F0 | 	shl	arg02, #3
0a1fc     02 00 00 FF 
0a200     38 64 86 F1 | 	sub	objptr, ##1080
0a204     32 95 02 F1 | 	add	arg02, objptr
0a208     4A 93 02 FB | 	rdlong	arg01, arg02
0a20c     96 01 00 FF 
0a210     0F 94 06 F6 | 	mov	arg02, ##@LR__5915
0a214     36 00 00 FF 
0a218     2C 64 86 F1 | 	sub	objptr, ##27692
0a21c     C0 A7 B1 FD | 	call	#__system___string_cmp
0a220     00 7A 0E F2 | 	cmp	result1, #0 wz
0a224     38 00 00 AF 
0a228     64 64 06 A1 |  if_e	add	objptr, ##28772
0a22c     32 B9 02 AB |  if_e	rdlong	local10, objptr
0a230     38 00 00 AF 
0a234     64 64 86 A1 |  if_e	sub	objptr, ##28772
0a238     01 B8 06 A1 |  if_e	add	local10, #1
0a23c     48 01 90 AD |  if_e	jmp	#LR__0909
0a240     38 00 00 FF 
0a244     64 64 06 F1 | 	add	objptr, ##28772
0a248     32 B9 02 FB | 	rdlong	local10, objptr
0a24c     38 00 00 FF 
0a250     64 64 86 F1 | 	sub	objptr, ##28772
0a254     02 B8 06 F1 | 	add	local10, #2
0a258     00 BA 06 F6 | 	mov	local11, #0
0a25c                 | '   l=ct+2 : m=0 : do
0a25c                 | LR__0905
0a25c                 | '   if isdec(lparts(l).part$) then 
0a25c     5C AD 02 F6 | 	mov	local04, local10
0a260     03 AC 66 F0 | 	shl	local04, #3
0a264     32 B7 02 F6 | 	mov	local09, objptr
0a268     36 00 00 FF 
0a26c     2C B6 06 F1 | 	add	local09, ##27692
0a270     5B AD 02 F1 | 	add	local04, local09
0a274     56 93 02 FB | 	rdlong	arg01, local04
0a278     80 CE BF FD | 	call	#_isdec
0a27c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a280     40 00 90 AD |  if_e	jmp	#LR__0906
0a284     5D BD 02 F6 | 	mov	local12, local11
0a288     53 BD 06 F1 | 	add	local12, #local01
0a28c     5C B7 02 F6 | 	mov	local09, local10
0a290     03 B6 66 F0 | 	shl	local09, #3
0a294     32 B5 02 F6 | 	mov	local08, objptr
0a298     36 00 00 FF 
0a29c     2C B4 06 F1 | 	add	local08, ##27692
0a2a0     5A B7 02 F1 | 	add	local09, local08
0a2a4     5B 93 02 FB | 	rdlong	arg01, local09
0a2a8     00 94 06 F6 | 	mov	arg02, #0
0a2ac     5C D4 B1 FD | 	call	#__system____builtin_atoi
0a2b0     3D BF 02 F6 | 	mov	local13, result1
0a2b4                 | 	'.live	local13
0a2b4                 | 	'.live	local12
0a2b4     00 BC 8E F9 | 	altd	local12, #0
0a2b8     5F BD 02 F6 | 	mov	local12, local13
0a2bc     01 BA 06 F1 | 	add	local11, #1
0a2c0     08 00 90 FD | 	jmp	#LR__0907
0a2c4                 | LR__0906
0a2c4                 | '     return(17)
0a2c4     11 7A 06 F6 | 	mov	result1, #17
0a2c8     D0 03 90 FD | 	jmp	#LR__0925
0a2cc                 | LR__0907
0a2cc                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a2cc     5C AD 02 F6 | 	mov	local04, local10
0a2d0     01 AC 06 F1 | 	add	local04, #1
0a2d4     03 AC 66 F0 | 	shl	local04, #3
0a2d8     32 BF 02 F6 | 	mov	local13, objptr
0a2dc     36 00 00 FF 
0a2e0     2C BE 06 F1 | 	add	local13, ##27692
0a2e4     5F AD 02 F1 | 	add	local04, local13
0a2e8     56 93 02 FB | 	rdlong	arg01, local04
0a2ec     96 01 00 FF 
0a2f0     12 94 06 F6 | 	mov	arg02, ##@LR__5916
0a2f4     E8 A6 B1 FD | 	call	#__system___string_cmp
0a2f8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a2fc     38 00 90 AD |  if_e	jmp	#LR__0908
0a300     5C BF 02 F6 | 	mov	local13, local10
0a304     01 BE 06 F1 | 	add	local13, #1
0a308     03 BE 66 F0 | 	shl	local13, #3
0a30c     32 BD 02 F6 | 	mov	local12, objptr
0a310     36 00 00 FF 
0a314     2C BC 06 F1 | 	add	local12, ##27692
0a318     5E BF 02 F1 | 	add	local13, local12
0a31c     5F 93 02 FB | 	rdlong	arg01, local13
0a320     96 01 00 FF 
0a324     14 94 06 F6 | 	mov	arg02, ##@LR__5917
0a328     B4 A6 B1 FD | 	call	#__system___string_cmp
0a32c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a330     2C 7A 06 56 |  if_ne	mov	result1, #44
0a334     64 03 90 5D |  if_ne	jmp	#LR__0925
0a338                 | LR__0908
0a338     02 B8 06 F1 | 	add	local10, #2
0a33c     5C AD 02 F6 | 	mov	local04, local10
0a340     01 AC 86 F1 | 	sub	local04, #1
0a344     03 AC 66 F0 | 	shl	local04, #3
0a348     32 BF 02 F6 | 	mov	local13, objptr
0a34c     36 00 00 FF 
0a350     2C BE 06 F1 | 	add	local13, ##27692
0a354     5F AD 02 F1 | 	add	local04, local13
0a358     56 93 02 FB | 	rdlong	arg01, local04
0a35c     96 01 00 FF 
0a360     16 94 06 F6 | 	mov	arg02, ##@LR__5918
0a364     78 A6 B1 FD | 	call	#__system___string_cmp
0a368     00 7A 0E F2 | 	cmp	result1, #0 wz
0a36c     03 BA 56 52 |  if_ne	cmps	local11, #3 wc
0a370     E8 FE 9F 4D |  if_c_and_nz	jmp	#LR__0905
0a374                 | '   if m>3 then return 45
0a374     04 BA 56 F2 | 	cmps	local11, #4 wc
0a378     2D 7A 06 36 |  if_ae	mov	result1, #45
0a37c     1C 03 90 3D |  if_ae	jmp	#LR__0925
0a380     00 C1 06 F6 | 	mov	local14, #256
0a384     0C C2 06 F6 | 	mov	local15, #12
0a388                 | LR__0909
0a388                 | '   arraytype=array_no_type : esize=12
0a388                 | ' 1350 
0a388                 | '   if lparts(l).part$="as" then
0a388     5C AD 02 F6 | 	mov	local04, local10
0a38c     03 AC 66 F0 | 	shl	local04, #3
0a390     32 BF 02 F6 | 	mov	local13, objptr
0a394     36 00 00 FF 
0a398     2C BE 06 F1 | 	add	local13, ##27692
0a39c     5F AD 02 F1 | 	add	local04, local13
0a3a0     56 93 02 FB | 	rdlong	arg01, local04
0a3a4     96 01 00 FF 
0a3a8     18 94 06 F6 | 	mov	arg02, ##@LR__5919
0a3ac     30 A6 B1 FD | 	call	#__system___string_cmp
0a3b0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a3b4     E4 01 90 5D |  if_ne	jmp	#LR__0924
0a3b8                 | '     select case lparts(l+1).part$
0a3b8     5C BD 02 F6 | 	mov	local12, local10
0a3bc     01 BC 06 F1 | 	add	local12, #1
0a3c0     03 BC 66 F0 | 	shl	local12, #3
0a3c4     32 AD 02 F6 | 	mov	local04, objptr
0a3c8     36 00 00 FF 
0a3cc     2C AC 06 F1 | 	add	local04, ##27692
0a3d0     56 BD 02 F1 | 	add	local12, local04
0a3d4     5E C5 02 FB | 	rdlong	local16, local12
0a3d8     96 01 00 FF 
0a3dc     1B 94 06 F6 | 	mov	arg02, ##@LR__5920
0a3e0     62 93 02 F6 | 	mov	arg01, local16
0a3e4     F8 A5 B1 FD | 	call	#__system___string_cmp
0a3e8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a3ec     0C 01 90 AD |  if_e	jmp	#LR__0910
0a3f0     96 01 00 FF 
0a3f4     20 94 06 F6 | 	mov	arg02, ##@LR__5921
0a3f8     62 93 02 F6 | 	mov	arg01, local16
0a3fc     E0 A5 B1 FD | 	call	#__system___string_cmp
0a400     00 7A 0E F2 | 	cmp	result1, #0 wz
0a404     00 01 90 AD |  if_e	jmp	#LR__0911
0a408     96 01 00 FF 
0a40c     26 94 06 F6 | 	mov	arg02, ##@LR__5922
0a410     62 93 02 F6 | 	mov	arg01, local16
0a414     C8 A5 B1 FD | 	call	#__system___string_cmp
0a418     00 7A 0E F2 | 	cmp	result1, #0 wz
0a41c     F4 00 90 AD |  if_e	jmp	#LR__0912
0a420     96 01 00 FF 
0a424     2C 94 06 F6 | 	mov	arg02, ##@LR__5923
0a428     62 93 02 F6 | 	mov	arg01, local16
0a42c     B0 A5 B1 FD | 	call	#__system___string_cmp
0a430     00 7A 0E F2 | 	cmp	result1, #0 wz
0a434     E8 00 90 AD |  if_e	jmp	#LR__0913
0a438     96 01 00 FF 
0a43c     33 94 06 F6 | 	mov	arg02, ##@LR__5924
0a440     62 93 02 F6 | 	mov	arg01, local16
0a444     98 A5 B1 FD | 	call	#__system___string_cmp
0a448     00 7A 0E F2 | 	cmp	result1, #0 wz
0a44c     DC 00 90 AD |  if_e	jmp	#LR__0914
0a450     96 01 00 FF 
0a454     38 94 06 F6 | 	mov	arg02, ##@LR__5925
0a458     62 93 02 F6 | 	mov	arg01, local16
0a45c     80 A5 B1 FD | 	call	#__system___string_cmp
0a460     00 7A 0E F2 | 	cmp	result1, #0 wz
0a464     D0 00 90 AD |  if_e	jmp	#LR__0915
0a468     96 01 00 FF 
0a46c     40 94 06 F6 | 	mov	arg02, ##@LR__5926
0a470     62 93 02 F6 | 	mov	arg01, local16
0a474     68 A5 B1 FD | 	call	#__system___string_cmp
0a478     00 7A 0E F2 | 	cmp	result1, #0 wz
0a47c     C4 00 90 AD |  if_e	jmp	#LR__0916
0a480     96 01 00 FF 
0a484     46 94 06 F6 | 	mov	arg02, ##@LR__5927
0a488     62 93 02 F6 | 	mov	arg01, local16
0a48c     50 A5 B1 FD | 	call	#__system___string_cmp
0a490     00 7A 0E F2 | 	cmp	result1, #0 wz
0a494     B8 00 90 AD |  if_e	jmp	#LR__0917
0a498     96 01 00 FF 
0a49c     4C 94 06 F6 | 	mov	arg02, ##@LR__5928
0a4a0     62 93 02 F6 | 	mov	arg01, local16
0a4a4     38 A5 B1 FD | 	call	#__system___string_cmp
0a4a8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4ac     AC 00 90 AD |  if_e	jmp	#LR__0918
0a4b0     96 01 00 FF 
0a4b4     53 94 06 F6 | 	mov	arg02, ##@LR__5929
0a4b8     62 93 02 F6 | 	mov	arg01, local16
0a4bc     20 A5 B1 FD | 	call	#__system___string_cmp
0a4c0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4c4     A0 00 90 AD |  if_e	jmp	#LR__0919
0a4c8     96 01 00 FF 
0a4cc     5A 94 06 F6 | 	mov	arg02, ##@LR__5930
0a4d0     62 93 02 F6 | 	mov	arg01, local16
0a4d4     08 A5 B1 FD | 	call	#__system___string_cmp
0a4d8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4dc     94 00 90 AD |  if_e	jmp	#LR__0920
0a4e0     96 01 00 FF 
0a4e4     61 94 06 F6 | 	mov	arg02, ##@LR__5931
0a4e8     62 93 02 F6 | 	mov	arg01, local16
0a4ec     F0 A4 B1 FD | 	call	#__system___string_cmp
0a4f0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4f4     88 00 90 AD |  if_e	jmp	#LR__0921
0a4f8     90 00 90 FD | 	jmp	#LR__0922
0a4fc                 | LR__0910
0a4fc     01 C1 06 F6 | 	mov	local14, #257
0a500     01 C2 06 F6 | 	mov	local15, #1
0a504     94 00 90 FD | 	jmp	#LR__0924
0a508                 | LR__0911
0a508     02 C1 06 F6 | 	mov	local14, #258
0a50c     01 C2 06 F6 | 	mov	local15, #1
0a510     88 00 90 FD | 	jmp	#LR__0924
0a514                 | LR__0912
0a514     03 C1 06 F6 | 	mov	local14, #259
0a518     02 C2 06 F6 | 	mov	local15, #2
0a51c     7C 00 90 FD | 	jmp	#LR__0924
0a520                 | LR__0913
0a520     04 C1 06 F6 | 	mov	local14, #260
0a524     02 C2 06 F6 | 	mov	local15, #2
0a528     70 00 90 FD | 	jmp	#LR__0924
0a52c                 | LR__0914
0a52c     05 C1 06 F6 | 	mov	local14, #261
0a530     04 C2 06 F6 | 	mov	local15, #4
0a534     64 00 90 FD | 	jmp	#LR__0924
0a538                 | LR__0915
0a538     05 C1 06 F6 | 	mov	local14, #261
0a53c     04 C2 06 F6 | 	mov	local15, #4
0a540     58 00 90 FD | 	jmp	#LR__0924
0a544                 | LR__0916
0a544     06 C1 06 F6 | 	mov	local14, #262
0a548     04 C2 06 F6 | 	mov	local15, #4
0a54c     4C 00 90 FD | 	jmp	#LR__0924
0a550                 | LR__0917
0a550     07 C1 06 F6 | 	mov	local14, #263
0a554     08 C2 06 F6 | 	mov	local15, #8
0a558     40 00 90 FD | 	jmp	#LR__0924
0a55c                 | LR__0918
0a55c     08 C1 06 F6 | 	mov	local14, #264
0a560     08 C2 06 F6 | 	mov	local15, #8
0a564     34 00 90 FD | 	jmp	#LR__0924
0a568                 | LR__0919
0a568     09 C1 06 F6 | 	mov	local14, #265
0a56c     04 C2 06 F6 | 	mov	local15, #4
0a570     28 00 90 FD | 	jmp	#LR__0924
0a574                 | LR__0920
0a574     0A C1 06 F6 | 	mov	local14, #266
0a578     08 C2 06 F6 | 	mov	local15, #8
0a57c     1C 00 90 FD | 	jmp	#LR__0924
0a580                 | LR__0921
0a580     0B C1 06 F6 | 	mov	local14, #267
0a584     04 C2 06 F6 | 	mov	local15, #4
0a588     10 00 90 FD | 	jmp	#LR__0924
0a58c                 | LR__0922
0a58c     2F 7A 06 F6 | 	mov	result1, #47
0a590     08 01 90 FD | 	jmp	#LR__0925
0a594                 | LR__0923
0a594                 | '   return 46
0a594     2E 7A 06 F6 | 	mov	result1, #46
0a598     00 01 90 FD | 	jmp	#LR__0925
0a59c                 | LR__0924
0a59c     53 C3 02 FD | 	qmul	local15, local01
0a5a0     18 B2 62 FD | 	getqx	local07
0a5a4     54 B3 02 FD | 	qmul	local07, local02
0a5a8     18 C4 62 FD | 	getqx	local16
0a5ac     55 C5 02 FD | 	qmul	local16, local03
0a5b0     53 00 00 FF 
0a5b4     F0 64 06 F1 | 	add	objptr, ##42736
0a5b8     32 C7 02 FB | 	rdlong	local17, objptr
0a5bc     60 95 02 F6 | 	mov	arg02, local14
0a5c0     18 C4 62 FD | 	getqx	local16
0a5c4     62 C7 82 F1 | 	sub	local17, local16
0a5c8     10 C6 86 F1 | 	sub	local17, #16
0a5cc     0F C6 26 F5 | 	andn	local17, #15
0a5d0     32 C7 62 FC | 	wrlong	local17, objptr
0a5d4     53 00 00 FF 
0a5d8     F0 64 86 F1 | 	sub	objptr, ##42736
0a5dc     63 93 02 F6 | 	mov	arg01, local17
0a5e0     3C 6C B1 FD | 	call	#_psdpoke
0a5e4     63 93 02 F6 | 	mov	arg01, local17
0a5e8     02 92 06 F1 | 	add	arg01, #2
0a5ec     61 95 02 F6 | 	mov	arg02, local15
0a5f0     2C 6C B1 FD | 	call	#_psdpoke
0a5f4     63 93 02 F6 | 	mov	arg01, local17
0a5f8     04 92 06 F1 | 	add	arg01, #4
0a5fc     53 95 02 F6 | 	mov	arg02, local01
0a600     D4 6B B1 FD | 	call	#_pslpoke
0a604     63 93 02 F6 | 	mov	arg01, local17
0a608     08 92 06 F1 | 	add	arg01, #8
0a60c     54 95 02 F6 | 	mov	arg02, local02
0a610     C4 6B B1 FD | 	call	#_pslpoke
0a614     63 93 02 F6 | 	mov	arg01, local17
0a618     0C 92 06 F1 | 	add	arg01, #12
0a61c     55 95 02 F6 | 	mov	arg02, local03
0a620     B4 6B B1 FD | 	call	#_pslpoke
0a624     58 BD 02 F6 | 	mov	local12, local06
0a628     04 BC 66 F0 | 	shl	local12, #4
0a62c     16 00 00 FF 
0a630     18 64 06 F1 | 	add	objptr, ##11288
0a634     32 BD 02 F1 | 	add	local12, objptr
0a638     5E AF 62 FC | 	wrlong	local05, local12
0a63c     58 BD 02 F6 | 	mov	local12, local06
0a640     04 BC 66 F0 | 	shl	local12, #4
0a644     32 BD 02 F1 | 	add	local12, objptr
0a648     04 BC 06 F1 | 	add	local12, #4
0a64c     5E C7 62 FC | 	wrlong	local17, local12
0a650     58 BD 02 F6 | 	mov	local12, local06
0a654     04 BC 66 F0 | 	shl	local12, #4
0a658     32 BD 02 F1 | 	add	local12, objptr
0a65c     0C BC 06 F1 | 	add	local12, #12
0a660     5E C1 62 FC | 	wrlong	local14, local12
0a664                 | ' memtop=arrayptr
0a664                 | ' psdpoke arrayptr,arraytype 
0a664                 | ' psdpoke arrayptr+2,esize 
0a664                 | ' pslpoke arrayptr+4,dims(0)
0a664                 | ' pslpoke arrayptr+8,dims(1)
0a664                 | ' pslpoke arrayptr+12,dims(2)
0a664                 | ' variables(j).name=varname2$
0a664                 | ' variables(j).value.uresult=arrayptr
0a664                 | ' variables(j).vartype=arraytype
0a664                 | ' if j=varnum then varnum+=1
0a664     20 00 00 FF 
0a668     10 64 06 F1 | 	add	objptr, ##16400
0a66c     32 B3 02 FB | 	rdlong	local07, objptr
0a670     36 00 00 FF 
0a674     28 64 86 F1 | 	sub	objptr, ##27688
0a678     59 B1 0A F2 | 	cmp	local06, local07 wz
0a67c     36 00 00 AF 
0a680     28 64 06 A1 |  if_e	add	objptr, ##27688
0a684     32 B3 02 AB |  if_e	rdlong	local07, objptr
0a688     01 B2 06 A1 |  if_e	add	local07, #1
0a68c     32 B3 62 AC |  if_e	wrlong	local07, objptr
0a690     36 00 00 AF 
0a694     28 64 86 A1 |  if_e	sub	objptr, ##27688
0a698                 | ' return 0
0a698     00 7A 06 F6 | 	mov	result1, #0
0a69c                 | LR__0925
0a69c     E7 F0 03 F6 | 	mov	ptra, fp
0a6a0     F2 00 A0 FD | 	call	#popregs_
0a6a4                 | _compile_dim_ret
0a6a4     2D 00 64 FD | 	ret
0a6a8                 | 
0a6a8                 | ' 
0a6a8                 | ' '----- compile 'for' command. 
0a6a8                 | ' 
0a6a8                 | ' function compile_for() as ulong  
0a6a8                 | _compile_for
0a6a8     0F CA 05 F6 | 	mov	COUNT_, #15
0a6ac     E8 00 A0 FD | 	call	#pushregs_
0a6b0                 | ' 
0a6b0                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a6b0     38 00 00 FF 
0a6b4     64 64 06 F1 | 	add	objptr, ##28772
0a6b8     32 95 02 FB | 	rdlong	arg02, objptr
0a6bc     01 94 06 F1 | 	add	arg02, #1
0a6c0     03 94 66 F0 | 	shl	arg02, #3
0a6c4     02 00 00 FF 
0a6c8     38 64 86 F1 | 	sub	objptr, ##1080
0a6cc     32 95 02 F1 | 	add	arg02, objptr
0a6d0     4A 93 02 FB | 	rdlong	arg01, arg02
0a6d4     36 00 00 FF 
0a6d8     2C 64 86 F1 | 	sub	objptr, ##27692
0a6dc                 | ' 
0a6dc                 | ' select case s
0a6dc     93 01 00 FF 
0a6e0     CE 94 06 F6 | 	mov	arg02, ##@LR__5639
0a6e4     F8 A2 B1 FD | 	call	#__system___string_cmp
0a6e8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a6ec     1B 7A 06 A6 |  if_e	mov	result1, #27
0a6f0     00 7A 06 56 |  if_ne	mov	result1, #0
0a6f4     00 7A 0E F2 | 	cmp	result1, #0 wz
0a6f8     0C 00 90 AD |  if_e	jmp	#LR__0930
0a6fc     05 92 06 F6 | 	mov	arg01, #5
0a700     DC DB BF FD | 	call	#_compile_immediate_assign
0a704     08 00 90 FD | 	jmp	#LR__0931
0a708                 | LR__0930
0a708     20 7A 06 F6 | 	mov	result1, #32
0a70c     64 08 90 FD | 	jmp	#LR__0947
0a710                 | LR__0931
0a710     4B 00 00 FF 
0a714     9C 64 06 F1 | 	add	objptr, ##38556
0a718     32 95 02 FB | 	rdlong	arg02, objptr
0a71c     4A 93 02 F6 | 	mov	arg01, arg02
0a720     01 92 86 F1 | 	sub	arg01, #1
0a724     49 AD 02 F6 | 	mov	local04, arg01
0a728     01 AC 66 F0 | 	shl	local04, #1
0a72c     49 AD 02 F1 | 	add	local04, arg01
0a730     02 AC 66 F0 | 	shl	local04, #2
0a734     03 00 00 FF 
0a738     00 64 86 F1 | 	sub	objptr, ##1536
0a73c     32 AD 02 F1 | 	add	local04, objptr
0a740     56 A7 02 FB | 	rdlong	local01, local04
0a744     04 AC 06 F1 | 	add	local04, #4
0a748     56 AF 02 FB | 	rdlong	local05, local04
0a74c     01 94 86 F1 | 	sub	arg02, #1
0a750     4A B1 02 F6 | 	mov	local06, arg02
0a754     01 B0 66 F0 | 	shl	local06, #1
0a758     4A B1 02 F1 | 	add	local06, arg02
0a75c     02 B0 66 F0 | 	shl	local06, #2
0a760     32 B3 02 F6 | 	mov	local07, objptr
0a764     32 B1 02 F1 | 	add	local06, objptr
0a768     08 B0 06 F1 | 	add	local06, #8
0a76c     58 AD 02 FB | 	rdlong	local04, local06
0a770     57 A9 02 F6 | 	mov	local02, local05
0a774     56 AB 02 F6 | 	mov	local03, local04
0a778                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a778     17 AA 0E F2 | 	cmp	local03, #23 wz
0a77c     48 00 00 FF 
0a780     9C 64 86 F1 | 	sub	objptr, ##37020
0a784     22 7A 06 56 |  if_ne	mov	result1, #34
0a788     E8 07 90 5D |  if_ne	jmp	#LR__0947
0a78c     53 B5 02 F6 | 	mov	local08, local01
0a790                 | ' varnum=t1.result.uresult
0a790                 | ' if lparts(ct).part$<>"to" then return 33
0a790     38 00 00 FF 
0a794     64 64 06 F1 | 	add	objptr, ##28772
0a798     32 AD 02 FB | 	rdlong	local04, objptr
0a79c     03 AC 66 F0 | 	shl	local04, #3
0a7a0     02 00 00 FF 
0a7a4     38 64 86 F1 | 	sub	objptr, ##1080
0a7a8     32 AD 02 F1 | 	add	local04, objptr
0a7ac     56 93 02 FB | 	rdlong	arg01, local04
0a7b0     96 01 00 FF 
0a7b4     68 94 06 F6 | 	mov	arg02, ##@LR__5932
0a7b8     36 00 00 FF 
0a7bc     2C 64 86 F1 | 	sub	objptr, ##27692
0a7c0     1C A2 B1 FD | 	call	#__system___string_cmp
0a7c4     00 7A 0E F2 | 	cmp	result1, #0 wz
0a7c8     21 7A 06 56 |  if_ne	mov	result1, #33
0a7cc     A4 07 90 5D |  if_ne	jmp	#LR__0947
0a7d0     38 00 00 FF 
0a7d4     64 64 06 F1 | 	add	objptr, ##28772
0a7d8     32 B7 02 FB | 	rdlong	local09, objptr
0a7dc     01 B6 06 F1 | 	add	local09, #1
0a7e0     32 B7 62 FC | 	wrlong	local09, objptr
0a7e4     38 00 00 FF 
0a7e8     64 64 86 F1 | 	sub	objptr, ##28772
0a7ec     80 16 B0 FD | 	call	#_expr
0a7f0                 | ' ct+=1
0a7f0                 | ' expr()  										' there is "to" value pushed on the stack
0a7f0                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a7f0     38 00 00 FF 
0a7f4     64 64 06 F1 | 	add	objptr, ##28772
0a7f8     32 AD 02 FB | 	rdlong	local04, objptr
0a7fc     03 AC 66 F0 | 	shl	local04, #3
0a800     02 00 00 FF 
0a804     38 64 86 F1 | 	sub	objptr, ##1080
0a808     32 AD 02 F1 | 	add	local04, objptr
0a80c     56 93 02 FB | 	rdlong	arg01, local04
0a810     96 01 00 FF 
0a814     6B 94 06 F6 | 	mov	arg02, ##@LR__5933
0a818     36 00 00 FF 
0a81c     2C 64 86 F1 | 	sub	objptr, ##27692
0a820     BC A1 B1 FD | 	call	#__system___string_cmp
0a824     00 7A 0E F2 | 	cmp	result1, #0 wz
0a828     48 00 90 AD |  if_e	jmp	#LR__0932
0a82c     38 00 00 FF 
0a830     64 64 06 F1 | 	add	objptr, ##28772
0a834     32 AD 02 FB | 	rdlong	local04, objptr
0a838     03 AC 66 F0 | 	shl	local04, #3
0a83c     02 00 00 FF 
0a840     38 64 86 F1 | 	sub	objptr, ##1080
0a844     32 AD 02 F1 | 	add	local04, objptr
0a848     56 93 02 FB | 	rdlong	arg01, local04
0a84c     02 94 06 F6 | 	mov	arg02, #2
0a850     36 00 00 FF 
0a854     2C 64 86 F1 | 	sub	objptr, ##27692
0a858     04 BA B1 FD | 	call	#__system__Left_S
0a85c     3D 93 02 F6 | 	mov	arg01, result1
0a860     96 01 00 FF 
0a864     70 94 06 F6 | 	mov	arg02, ##@LR__5934
0a868     74 A1 B1 FD | 	call	#__system___string_cmp
0a86c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a870     A8 05 90 5D |  if_ne	jmp	#LR__0945
0a874                 | LR__0932
0a874                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a874     38 00 00 FF 
0a878     64 64 06 F1 | 	add	objptr, ##28772
0a87c     32 AD 02 FB | 	rdlong	local04, objptr
0a880     03 AC 66 F0 | 	shl	local04, #3
0a884     02 00 00 FF 
0a888     38 64 86 F1 | 	sub	objptr, ##1080
0a88c     32 AD 02 F1 | 	add	local04, objptr
0a890     56 93 02 FB | 	rdlong	arg01, local04
0a894     02 94 06 F6 | 	mov	arg02, #2
0a898     36 00 00 FF 
0a89c     2C 64 86 F1 | 	sub	objptr, ##27692
0a8a0     BC B9 B1 FD | 	call	#__system__Left_S
0a8a4     3D 93 02 F6 | 	mov	arg01, result1
0a8a8     96 01 00 FF 
0a8ac     73 94 06 F6 | 	mov	arg02, ##@LR__5935
0a8b0     2C A1 B1 FD | 	call	#__system___string_cmp
0a8b4     00 7A 0E F2 | 	cmp	result1, #0 wz
0a8b8     3C 05 90 5D |  if_ne	jmp	#LR__0944
0a8bc     38 00 00 FF 
0a8c0     64 64 06 F1 | 	add	objptr, ##28772
0a8c4     32 AD 02 FB | 	rdlong	local04, objptr
0a8c8     03 AC 66 F0 | 	shl	local04, #3
0a8cc     02 00 00 FF 
0a8d0     38 64 86 F1 | 	sub	objptr, ##1080
0a8d4     32 AD 02 F1 | 	add	local04, objptr
0a8d8     56 93 02 FB | 	rdlong	arg01, local04
0a8dc     36 00 00 FF 
0a8e0     2C 64 86 F1 | 	sub	objptr, ##27692
0a8e4     49 B9 02 F6 | 	mov	local10, arg01
0a8e8     D7 06 48 FB | 	callpa	#(@LR__0934-@LR__0933)>>2,fcache_load_ptr_
0a8ec                 | LR__0933
0a8ec     5C 7B CA FA | 	rdbyte	result1, local10 wz
0a8f0     01 B8 06 51 |  if_ne	add	local10, #1
0a8f4     F4 FF 9F 5D |  if_ne	jmp	#LR__0933
0a8f8                 | LR__0934
0a8f8     49 B9 82 F1 | 	sub	local10, arg01
0a8fc     03 B8 56 F2 | 	cmps	local10, #3 wc
0a900     F4 04 90 CD |  if_b	jmp	#LR__0944
0a904     38 00 00 FF 
0a908     64 64 06 F1 | 	add	objptr, ##28772
0a90c     32 AD 02 FB | 	rdlong	local04, objptr
0a910     56 BB 02 F6 | 	mov	local11, local04
0a914     03 BA 66 F0 | 	shl	local11, #3
0a918     02 00 00 FF 
0a91c     38 64 86 F1 | 	sub	objptr, ##1080
0a920     32 BB 02 F1 | 	add	local11, objptr
0a924     03 AC 66 F0 | 	shl	local04, #3
0a928     32 AD 02 F1 | 	add	local04, objptr
0a92c     56 AD 02 FB | 	rdlong	local04, local04
0a930     02 00 00 FF 
0a934     38 64 06 F1 | 	add	objptr, ##1080
0a938     32 93 02 FB | 	rdlong	arg01, objptr
0a93c     03 92 66 F0 | 	shl	arg01, #3
0a940     02 00 00 FF 
0a944     38 64 86 F1 | 	sub	objptr, ##1080
0a948     32 93 02 F1 | 	add	arg01, objptr
0a94c     49 93 02 FB | 	rdlong	arg01, arg01
0a950     36 00 00 FF 
0a954     2C 64 86 F1 | 	sub	objptr, ##27692
0a958     49 B9 02 F6 | 	mov	local10, arg01
0a95c     D7 06 48 FB | 	callpa	#(@LR__0936-@LR__0935)>>2,fcache_load_ptr_
0a960                 | LR__0935
0a960     5C 7B CA FA | 	rdbyte	result1, local10 wz
0a964     01 B8 06 51 |  if_ne	add	local10, #1
0a968     F4 FF 9F 5D |  if_ne	jmp	#LR__0935
0a96c                 | LR__0936
0a96c     49 B9 82 F1 | 	sub	local10, arg01
0a970     5C 95 02 F6 | 	mov	arg02, local10
0a974     02 94 86 F1 | 	sub	arg02, #2
0a978     56 93 02 F6 | 	mov	arg01, local04
0a97c     68 B9 B1 FD | 	call	#__system__Right_S
0a980     5D 7B 62 FC | 	wrlong	result1, local11
0a984     38 00 00 FF 
0a988     64 64 06 F1 | 	add	objptr, ##28772
0a98c     32 AD 02 FB | 	rdlong	local04, objptr
0a990     56 BB 02 F6 | 	mov	local11, local04
0a994     03 BA 66 F0 | 	shl	local11, #3
0a998     02 00 00 FF 
0a99c     38 64 86 F1 | 	sub	objptr, ##1080
0a9a0     32 BB 02 F1 | 	add	local11, objptr
0a9a4     03 AC 66 F0 | 	shl	local04, #3
0a9a8     32 AD 02 F1 | 	add	local04, objptr
0a9ac     56 93 02 FB | 	rdlong	arg01, local04
0a9b0     36 00 00 FF 
0a9b4     2C 64 86 F1 | 	sub	objptr, ##27692
0a9b8     1C B6 BF FD | 	call	#_isfunction
0a9bc     3D 7B E2 F8 | 	getbyte	result1, result1, #0
0a9c0     04 BA 06 F1 | 	add	local11, #4
0a9c4     5D 7B 62 FC | 	wrlong	result1, local11
0a9c8                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0a9c8     38 00 00 FF 
0a9cc     64 64 06 F1 | 	add	objptr, ##28772
0a9d0     32 BB 02 FB | 	rdlong	local11, objptr
0a9d4     03 BA 66 F0 | 	shl	local11, #3
0a9d8     02 00 00 FF 
0a9dc     38 64 86 F1 | 	sub	objptr, ##1080
0a9e0     32 BB 02 F1 | 	add	local11, objptr
0a9e4     04 BA 06 F1 | 	add	local11, #4
0a9e8     5D AD 02 FB | 	rdlong	local04, local11
0a9ec     01 AC 56 F2 | 	cmps	local04, #1 wc
0a9f0     36 00 00 FF 
0a9f4     2C 64 86 F1 | 	sub	objptr, ##27692
0a9f8     E0 03 90 3D |  if_ae	jmp	#LR__0943
0a9fc     38 00 00 FF 
0aa00     64 64 06 F1 | 	add	objptr, ##28772
0aa04     32 AD 02 FB | 	rdlong	local04, objptr
0aa08     56 BB 02 F6 | 	mov	local11, local04
0aa0c     03 BA 66 F0 | 	shl	local11, #3
0aa10     02 00 00 FF 
0aa14     38 64 86 F1 | 	sub	objptr, ##1080
0aa18     32 BB 02 F1 | 	add	local11, objptr
0aa1c     03 AC 66 F0 | 	shl	local04, #3
0aa20     32 AD 02 F1 | 	add	local04, objptr
0aa24     56 93 02 FB | 	rdlong	arg01, local04
0aa28     36 00 00 FF 
0aa2c     2C 64 86 F1 | 	sub	objptr, ##27692
0aa30     78 9E BF FD | 	call	#_isnotename
0aa34     04 BA 06 F1 | 	add	local11, #4
0aa38     5D 7B 62 FC | 	wrlong	result1, local11
0aa3c                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0aa3c                 | '     if lparts(ct).token>0 then 
0aa3c     38 00 00 FF 
0aa40     64 64 06 F1 | 	add	objptr, ##28772
0aa44     32 BB 02 FB | 	rdlong	local11, objptr
0aa48     03 BA 66 F0 | 	shl	local11, #3
0aa4c     02 00 00 FF 
0aa50     38 64 86 F1 | 	sub	objptr, ##1080
0aa54     32 BB 02 F1 | 	add	local11, objptr
0aa58     04 BA 06 F1 | 	add	local11, #4
0aa5c     5D AD 02 FB | 	rdlong	local04, local11
0aa60     01 AC 56 F2 | 	cmps	local04, #1 wc
0aa64     36 00 00 FF 
0aa68     2C 64 86 F1 | 	sub	objptr, ##27692
0aa6c     94 00 90 CD |  if_b	jmp	#LR__0937
0aa70     38 00 00 FF 
0aa74     64 64 06 F1 | 	add	objptr, ##28772
0aa78     32 BB 02 FB | 	rdlong	local11, objptr
0aa7c     03 BA 66 F0 | 	shl	local11, #3
0aa80     02 00 00 FF 
0aa84     38 64 86 F1 | 	sub	objptr, ##1080
0aa88     32 BB 02 F1 | 	add	local11, objptr
0aa8c     04 BA 06 F1 | 	add	local11, #4
0aa90     5D 93 02 FB | 	rdlong	arg01, local11
0aa94     36 00 00 FF 
0aa98     2C 64 86 F1 | 	sub	objptr, ##27692
0aa9c     80 C7 BF FD | 	call	#_getnoteval
0aaa0     3D 93 02 F6 | 	mov	arg01, result1
0aaa4     38 00 00 FF 
0aaa8     64 64 06 F1 | 	add	objptr, ##28772
0aaac     32 BB 02 FB | 	rdlong	local11, objptr
0aab0     03 BA 66 F0 | 	shl	local11, #3
0aab4     02 00 00 FF 
0aab8     38 64 86 F1 | 	sub	objptr, ##1080
0aabc     32 BB 02 F1 | 	add	local11, objptr
0aac0     36 00 00 FF 
0aac4     2C 64 86 F1 | 	sub	objptr, ##27692
0aac8     8C B9 B1 FD | 	call	#__system__str_S
0aacc     5D 7B 62 FC | 	wrlong	result1, local11
0aad0     38 00 00 FF 
0aad4     64 64 06 F1 | 	add	objptr, ##28772
0aad8     32 BB 02 FB | 	rdlong	local11, objptr
0aadc     03 BA 66 F0 | 	shl	local11, #3
0aae0     02 00 00 FF 
0aae4     38 64 86 F1 | 	sub	objptr, ##1080
0aae8     32 BB 02 F1 | 	add	local11, objptr
0aaec     04 BA 06 F1 | 	add	local11, #4
0aaf0     01 00 80 FF 
0aaf4     5D 05 68 FC | 	wrlong	##514, local11
0aaf8     36 00 00 FF 
0aafc     2C 64 86 F1 | 	sub	objptr, ##27692
0ab00     D8 02 90 FD | 	jmp	#LR__0943
0ab04                 | LR__0937
0ab04     38 00 00 FF 
0ab08     64 64 06 F1 | 	add	objptr, ##28772
0ab0c     32 AD 02 FB | 	rdlong	local04, objptr
0ab10     56 BB 02 F6 | 	mov	local11, local04
0ab14     03 BA 66 F0 | 	shl	local11, #3
0ab18     02 00 00 FF 
0ab1c     38 64 86 F1 | 	sub	objptr, ##1080
0ab20     32 BB 02 F1 | 	add	local11, objptr
0ab24     03 AC 66 F0 | 	shl	local04, #3
0ab28     32 AD 02 F1 | 	add	local04, objptr
0ab2c     56 93 02 FB | 	rdlong	arg01, local04
0ab30     36 00 00 FF 
0ab34     2C 64 86 F1 | 	sub	objptr, ##27692
0ab38     F0 9C BF FD | 	call	#_isconstant
0ab3c     04 BA 06 F1 | 	add	local11, #4
0ab40     5D 7B 62 FC | 	wrlong	result1, local11
0ab44                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0ab44     38 00 00 FF 
0ab48     64 64 06 F1 | 	add	objptr, ##28772
0ab4c     32 BB 02 FB | 	rdlong	local11, objptr
0ab50     03 BA 66 F0 | 	shl	local11, #3
0ab54     02 00 00 FF 
0ab58     38 64 86 F1 | 	sub	objptr, ##1080
0ab5c     32 BB 02 F1 | 	add	local11, objptr
0ab60     04 BA 06 F1 | 	add	local11, #4
0ab64     5D AD 02 FB | 	rdlong	local04, local11
0ab68     01 AC 56 F2 | 	cmps	local04, #1 wc
0ab6c     36 00 00 FF 
0ab70     2C 64 86 F1 | 	sub	objptr, ##27692
0ab74     8C 00 90 CD |  if_b	jmp	#LR__0938
0ab78     38 00 00 FF 
0ab7c     64 64 06 F1 | 	add	objptr, ##28772
0ab80     32 B7 02 FB | 	rdlong	local09, objptr
0ab84     5B BB 02 F6 | 	mov	local11, local09
0ab88     03 BA 66 F0 | 	shl	local11, #3
0ab8c     02 00 00 FF 
0ab90     38 64 86 F1 | 	sub	objptr, ##1080
0ab94     32 BB 02 F1 | 	add	local11, objptr
0ab98     03 B6 66 F0 | 	shl	local09, #3
0ab9c     32 B7 02 F1 | 	add	local09, objptr
0aba0     04 B6 06 F1 | 	add	local09, #4
0aba4     5B 93 02 FB | 	rdlong	arg01, local09
0aba8     36 00 00 FF 
0abac     2C 64 86 F1 | 	sub	objptr, ##27692
0abb0     49 93 52 F6 | 	abs	arg01, arg01 wc
0abb4     1F BC C6 C9 |  if_b	decod	local12, #31
0abb8     00 BC 06 36 |  if_ae	mov	local12, #0
0abbc     C4 C0 B1 FD | 	call	#__system___float_fromuns
0abc0     5E 7B 62 F5 | 	xor	result1, local12
0abc4     3D 93 02 F6 | 	mov	arg01, result1
0abc8     8C B8 B1 FD | 	call	#__system__str_S
0abcc     5D 7B 62 FC | 	wrlong	result1, local11
0abd0     38 00 00 FF 
0abd4     64 64 06 F1 | 	add	objptr, ##28772
0abd8     32 BB 02 FB | 	rdlong	local11, objptr
0abdc     03 BA 66 F0 | 	shl	local11, #3
0abe0     02 00 00 FF 
0abe4     38 64 86 F1 | 	sub	objptr, ##1080
0abe8     32 BB 02 F1 | 	add	local11, objptr
0abec     04 BA 06 F1 | 	add	local11, #4
0abf0     01 00 80 FF 
0abf4     5D 03 68 FC | 	wrlong	##513, local11
0abf8     36 00 00 FF 
0abfc     2C 64 86 F1 | 	sub	objptr, ##27692
0ac00     D8 01 90 FD | 	jmp	#LR__0943
0ac04                 | LR__0938
0ac04     38 00 00 FF 
0ac08     64 64 06 F1 | 	add	objptr, ##28772
0ac0c     32 AD 02 FB | 	rdlong	local04, objptr
0ac10     03 AC 66 F0 | 	shl	local04, #3
0ac14     02 00 00 FF 
0ac18     38 64 86 F1 | 	sub	objptr, ##1080
0ac1c     32 AD 02 F1 | 	add	local04, objptr
0ac20     56 93 02 FB | 	rdlong	arg01, local04
0ac24     36 00 00 FF 
0ac28     2C 64 86 F1 | 	sub	objptr, ##27692
0ac2c     3C BE BF FD | 	call	#_isnum
0ac30     3D BF 02 F6 | 	mov	local13, result1
0ac34     07 BE 66 F7 | 	signx	local13, #7
0ac38     38 00 00 FF 
0ac3c     64 64 06 F1 | 	add	objptr, ##28772
0ac40     32 AD 02 FB | 	rdlong	local04, objptr
0ac44     03 AC 66 F0 | 	shl	local04, #3
0ac48     02 00 00 FF 
0ac4c     38 64 86 F1 | 	sub	objptr, ##1080
0ac50     32 AD 02 F1 | 	add	local04, objptr
0ac54     56 93 02 FB | 	rdlong	arg01, local04
0ac58     36 00 00 FF 
0ac5c     2C 64 86 F1 | 	sub	objptr, ##27692
0ac60     F4 C1 BF FD | 	call	#_isint
0ac64     3D C1 02 F6 | 	mov	local14, result1
0ac68     07 C0 66 F7 | 	signx	local14, #7
0ac6c     38 00 00 FF 
0ac70     64 64 06 F1 | 	add	objptr, ##28772
0ac74     32 AD 02 FB | 	rdlong	local04, objptr
0ac78     03 AC 66 F0 | 	shl	local04, #3
0ac7c     02 00 00 FF 
0ac80     38 64 86 F1 | 	sub	objptr, ##1080
0ac84     32 AD 02 F1 | 	add	local04, objptr
0ac88     56 93 02 FB | 	rdlong	arg01, local04
0ac8c     36 00 00 FF 
0ac90     2C 64 86 F1 | 	sub	objptr, ##27692
0ac94     64 C4 BF FD | 	call	#_isdec
0ac98     07 7A 66 F7 | 	signx	result1, #7
0ac9c     3D C3 02 F6 | 	mov	local15, result1
0aca0                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0aca0                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0aca0     00 BE 0E F2 | 	cmp	local13, #0 wz
0aca4     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0aca8     00 C2 0E 52 |  if_ne	cmp	local15, #0 wz
0acac     34 00 90 AD |  if_e	jmp	#LR__0939
0acb0     38 00 00 FF 
0acb4     64 64 06 F1 | 	add	objptr, ##28772
0acb8     32 BB 02 FB | 	rdlong	local11, objptr
0acbc     03 BA 66 F0 | 	shl	local11, #3
0acc0     02 00 00 FF 
0acc4     38 64 86 F1 | 	sub	objptr, ##1080
0acc8     32 BB 02 F1 | 	add	local11, objptr
0accc     04 BA 06 F1 | 	add	local11, #4
0acd0     01 00 80 FF 
0acd4     5D 01 68 FC | 	wrlong	##512, local11
0acd8     36 00 00 FF 
0acdc     2C 64 86 F1 | 	sub	objptr, ##27692
0ace0     F8 00 90 FD | 	jmp	#LR__0943
0ace4                 | LR__0939
0ace4                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0ace4     00 BE 0E F2 | 	cmp	local13, #0 wz
0ace8     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0acec     61 B7 22 56 |  if_ne	not	local09, local15
0acf0     00 B6 0E 52 |  if_ne	cmp	local09, #0 wz
0acf4     34 00 90 AD |  if_e	jmp	#LR__0940
0acf8     38 00 00 FF 
0acfc     64 64 06 F1 | 	add	objptr, ##28772
0ad00     32 BB 02 FB | 	rdlong	local11, objptr
0ad04     03 BA 66 F0 | 	shl	local11, #3
0ad08     02 00 00 FF 
0ad0c     38 64 86 F1 | 	sub	objptr, ##1080
0ad10     32 BB 02 F1 | 	add	local11, objptr
0ad14     04 BA 06 F1 | 	add	local11, #4
0ad18     01 00 80 FF 
0ad1c     5D 03 68 FC | 	wrlong	##513, local11
0ad20     36 00 00 FF 
0ad24     2C 64 86 F1 | 	sub	objptr, ##27692
0ad28     B0 00 90 FD | 	jmp	#LR__0943
0ad2c                 | LR__0940
0ad2c                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0ad2c     00 BE 0E F2 | 	cmp	local13, #0 wz
0ad30     60 C1 22 56 |  if_ne	not	local14, local14
0ad34     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0ad38     61 C3 22 56 |  if_ne	not	local15, local15
0ad3c     00 C2 0E 52 |  if_ne	cmp	local15, #0 wz
0ad40     34 00 90 AD |  if_e	jmp	#LR__0941
0ad44     38 00 00 FF 
0ad48     64 64 06 F1 | 	add	objptr, ##28772
0ad4c     32 BB 02 FB | 	rdlong	local11, objptr
0ad50     03 BA 66 F0 | 	shl	local11, #3
0ad54     02 00 00 FF 
0ad58     38 64 86 F1 | 	sub	objptr, ##1080
0ad5c     32 BB 02 F1 | 	add	local11, objptr
0ad60     04 BA 06 F1 | 	add	local11, #4
0ad64     01 00 80 FF 
0ad68     5D 05 68 FC | 	wrlong	##514, local11
0ad6c     36 00 00 FF 
0ad70     2C 64 86 F1 | 	sub	objptr, ##27692
0ad74     64 00 90 FD | 	jmp	#LR__0943
0ad78                 | LR__0941
0ad78                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0ad78     38 00 00 FF 
0ad7c     64 64 06 F1 | 	add	objptr, ##28772
0ad80     32 BB 02 FB | 	rdlong	local11, objptr
0ad84     03 BA 66 F0 | 	shl	local11, #3
0ad88     02 00 00 FF 
0ad8c     38 64 86 F1 | 	sub	objptr, ##1080
0ad90     32 BB 02 F1 | 	add	local11, objptr
0ad94     5D 93 02 FB | 	rdlong	arg01, local11
0ad98     36 00 00 FF 
0ad9c     2C 64 86 F1 | 	sub	objptr, ##27692
0ada0     54 BA BF FD | 	call	#_isname
0ada4     00 7A 0E F2 | 	cmp	result1, #0 wz
0ada8     30 00 90 AD |  if_e	jmp	#LR__0942
0adac     38 00 00 FF 
0adb0     64 64 06 F1 | 	add	objptr, ##28772
0adb4     32 BB 02 FB | 	rdlong	local11, objptr
0adb8     03 BA 66 F0 | 	shl	local11, #3
0adbc     02 00 00 FF 
0adc0     38 64 86 F1 | 	sub	objptr, ##1080
0adc4     32 BB 02 F1 | 	add	local11, objptr
0adc8     04 BA 06 F1 | 	add	local11, #4
0adcc     01 00 80 FF 
0add0     5D 09 68 FC | 	wrlong	##516, local11
0add4     36 00 00 FF 
0add8     2C 64 86 F1 | 	sub	objptr, ##27692
0addc                 | LR__0942
0addc                 | LR__0943
0addc     38 00 00 FF 
0ade0     64 64 06 F1 | 	add	objptr, ##28772
0ade4     32 B7 02 FB | 	rdlong	local09, objptr
0ade8     01 B6 86 F1 | 	sub	local09, #1
0adec     32 B7 62 FC | 	wrlong	local09, objptr
0adf0     38 00 00 FF 
0adf4     64 64 86 F1 | 	sub	objptr, ##28772
0adf8                 | LR__0944
0adf8     38 00 00 FF 
0adfc     64 64 06 F1 | 	add	objptr, ##28772
0ae00     32 B7 02 FB | 	rdlong	local09, objptr
0ae04     01 B6 06 F1 | 	add	local09, #1
0ae08     32 B7 62 FC | 	wrlong	local09, objptr
0ae0c     38 00 00 FF 
0ae10     64 64 86 F1 | 	sub	objptr, ##28772
0ae14     58 10 B0 FD | 	call	#_expr
0ae18     78 00 90 FD | 	jmp	#LR__0946
0ae1c                 | LR__0945
0ae1c     4B 00 00 FF 
0ae20     9C 64 06 F1 | 	add	objptr, ##38556
0ae24     32 C3 02 FB | 	rdlong	local15, objptr
0ae28     61 BB 02 F6 | 	mov	local11, local15
0ae2c     01 BA 66 F0 | 	shl	local11, #1
0ae30     61 BB 02 F1 | 	add	local11, local15
0ae34     02 BA 66 F0 | 	shl	local11, #2
0ae38     03 00 00 FF 
0ae3c     00 64 86 F1 | 	sub	objptr, ##1536
0ae40     32 BB 02 F1 | 	add	local11, objptr
0ae44     08 BA 06 F1 | 	add	local11, #8
0ae48     5D 39 68 FC | 	wrlong	#28, local11
0ae4c     03 00 00 FF 
0ae50     00 64 06 F1 | 	add	objptr, ##1536
0ae54     32 C3 02 FB | 	rdlong	local15, objptr
0ae58     61 BB 02 F6 | 	mov	local11, local15
0ae5c     01 BA 66 F0 | 	shl	local11, #1
0ae60     61 BB 02 F1 | 	add	local11, local15
0ae64     02 BA 66 F0 | 	shl	local11, #2
0ae68     03 00 00 FF 
0ae6c     00 64 86 F1 | 	sub	objptr, ##1536
0ae70     32 BB 02 F1 | 	add	local11, objptr
0ae74     5D 03 68 FC | 	wrlong	#1, local11
0ae78     03 00 00 FF 
0ae7c     00 64 06 F1 | 	add	objptr, ##1536
0ae80     32 B7 02 FB | 	rdlong	local09, objptr
0ae84     01 B6 06 F1 | 	add	local09, #1
0ae88     32 B7 62 FC | 	wrlong	local09, objptr
0ae8c     4B 00 00 FF 
0ae90     9C 64 86 F1 | 	sub	objptr, ##38556
0ae94                 | LR__0946
0ae94     4B 00 00 FF 
0ae98     9C 64 06 F1 | 	add	objptr, ##38556
0ae9c     32 C3 02 FB | 	rdlong	local15, objptr
0aea0     61 BB 02 F6 | 	mov	local11, local15
0aea4     01 BA 66 F0 | 	shl	local11, #1
0aea8     61 BB 02 F1 | 	add	local11, local15
0aeac     02 BA 66 F0 | 	shl	local11, #2
0aeb0     03 00 00 FF 
0aeb4     00 64 86 F1 | 	sub	objptr, ##1536
0aeb8     32 BB 02 F1 | 	add	local11, objptr
0aebc     08 BA 06 F1 | 	add	local11, #8
0aec0     5D 39 68 FC | 	wrlong	#28, local11
0aec4     03 00 00 FF 
0aec8     00 64 06 F1 | 	add	objptr, ##1536
0aecc     32 C3 02 FB | 	rdlong	local15, objptr
0aed0     61 BB 02 F6 | 	mov	local11, local15
0aed4     01 BA 66 F0 | 	shl	local11, #1
0aed8     61 BB 02 F1 | 	add	local11, local15
0aedc     02 BA 66 F0 | 	shl	local11, #2
0aee0     03 00 00 FF 
0aee4     00 64 86 F1 | 	sub	objptr, ##1536
0aee8     32 BB 02 F1 | 	add	local11, objptr
0aeec     5D B5 62 FC | 	wrlong	local08, local11
0aef0     03 00 00 FF 
0aef4     00 64 06 F1 | 	add	objptr, ##1536
0aef8     32 C3 02 FB | 	rdlong	local15, objptr
0aefc     01 C2 06 F1 | 	add	local15, #1
0af00     32 C3 62 FC | 	wrlong	local15, objptr
0af04     61 BB 02 F6 | 	mov	local11, local15
0af08     01 BA 66 F0 | 	shl	local11, #1
0af0c     61 BB 02 F1 | 	add	local11, local15
0af10     02 BA 66 F0 | 	shl	local11, #2
0af14     03 00 00 FF 
0af18     00 64 86 F1 | 	sub	objptr, ##1536
0af1c     32 BB 02 F1 | 	add	local11, objptr
0af20     08 BA 06 F1 | 	add	local11, #8
0af24     5D 95 68 FC | 	wrlong	#74, local11
0af28     03 00 00 FF 
0af2c     00 64 06 F1 | 	add	objptr, ##1536
0af30     32 C3 02 FB | 	rdlong	local15, objptr
0af34     61 BB 02 F6 | 	mov	local11, local15
0af38     01 BA 66 F0 | 	shl	local11, #1
0af3c     61 BB 02 F1 | 	add	local11, local15
0af40     02 BA 66 F0 | 	shl	local11, #2
0af44     03 00 00 FF 
0af48     00 64 86 F1 | 	sub	objptr, ##1536
0af4c     32 BB 02 F1 | 	add	local11, objptr
0af50     5D 01 68 FC | 	wrlong	#0, local11
0af54     03 00 00 FF 
0af58     00 64 06 F1 | 	add	objptr, ##1536
0af5c     32 B7 02 FB | 	rdlong	local09, objptr
0af60     01 B6 06 F1 | 	add	local09, #1
0af64     32 B7 62 FC | 	wrlong	local09, objptr
0af68     4B 00 00 FF 
0af6c     9C 64 86 F1 | 	sub	objptr, ##38556
0af70                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0af70                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0af70                 | ' return 0
0af70     00 7A 06 F6 | 	mov	result1, #0
0af74                 | LR__0947
0af74     E7 F0 03 F6 | 	mov	ptra, fp
0af78     F2 00 A0 FD | 	call	#popregs_
0af7c                 | _compile_for_ret
0af7c     2D 00 64 FD | 	ret
0af80                 | 
0af80                 | ' 
0af80                 | ' '----- compile 'next' command. 
0af80                 | ' 
0af80                 | ' function compile_next() as ulong
0af80                 | _compile_next
0af80     04 CA 05 F6 | 	mov	COUNT_, #4
0af84     E8 00 A0 FD | 	call	#pushregs_
0af88     38 00 00 FF 
0af8c     64 64 06 F1 | 	add	objptr, ##28772
0af90     32 93 02 FB | 	rdlong	arg01, objptr
0af94     03 92 66 F0 | 	shl	arg01, #3
0af98     02 00 00 FF 
0af9c     38 64 86 F1 | 	sub	objptr, ##1080
0afa0     32 93 02 F1 | 	add	arg01, objptr
0afa4     49 A7 02 FB | 	rdlong	local01, arg01
0afa8                 | ' 
0afa8                 | ' varname$=lparts(ct).part$ 
0afa8                 | ' if varnum=0 then return 35
0afa8     04 64 86 F1 | 	sub	objptr, #4
0afac     32 93 0A FB | 	rdlong	arg01, objptr wz
0afb0     36 00 00 FF 
0afb4     28 64 86 F1 | 	sub	objptr, ##27688
0afb8     23 7A 06 A6 |  if_e	mov	result1, #35
0afbc     48 01 90 AD |  if_e	jmp	#LR__0952
0afc0     01 A8 66 F6 | 	neg	local02, #1
0afc4                 | ' j=-1
0afc4                 | ' for i=0 to varnum-1
0afc4     00 AA 06 F6 | 	mov	local03, #0
0afc8     36 00 00 FF 
0afcc     28 64 06 F1 | 	add	objptr, ##27688
0afd0     32 AD 02 FB | 	rdlong	local04, objptr
0afd4     36 00 00 FF 
0afd8     28 64 86 F1 | 	sub	objptr, ##27688
0afdc                 | LR__0950
0afdc     56 AB 12 F2 | 	cmp	local03, local04 wc
0afe0     34 00 90 3D |  if_ae	jmp	#LR__0951
0afe4                 | '   if variables(i).name=varname$ then j=i : exit
0afe4     55 93 02 F6 | 	mov	arg01, local03
0afe8     04 92 66 F0 | 	shl	arg01, #4
0afec     32 95 02 F6 | 	mov	arg02, objptr
0aff0     16 00 00 FF 
0aff4     18 94 06 F1 | 	add	arg02, ##11288
0aff8     4A 93 02 F1 | 	add	arg01, arg02
0affc     49 93 02 FB | 	rdlong	arg01, arg01
0b000     53 95 02 F6 | 	mov	arg02, local01
0b004     D8 99 B1 FD | 	call	#__system___string_cmp
0b008     00 7A 0E F2 | 	cmp	result1, #0 wz
0b00c     55 A9 02 A6 |  if_e	mov	local02, local03
0b010     01 AA 06 51 |  if_ne	add	local03, #1
0b014     C4 FF 9F 5D |  if_ne	jmp	#LR__0950
0b018                 | LR__0951
0b018                 | ' if j=-1 then return 35
0b018     FF FF 7F FF 
0b01c     FF A9 0E F2 | 	cmp	local02, ##-1 wz
0b020     23 7A 06 A6 |  if_e	mov	result1, #35
0b024     E0 00 90 AD |  if_e	jmp	#LR__0952
0b028     4B 00 00 FF 
0b02c     9C 64 06 F1 | 	add	objptr, ##38556
0b030     32 AD 02 FB | 	rdlong	local04, objptr
0b034     56 AB 02 F6 | 	mov	local03, local04
0b038     01 AA 66 F0 | 	shl	local03, #1
0b03c     56 AB 02 F1 | 	add	local03, local04
0b040     02 AA 66 F0 | 	shl	local03, #2
0b044     03 00 00 FF 
0b048     00 64 86 F1 | 	sub	objptr, ##1536
0b04c     32 AB 02 F1 | 	add	local03, objptr
0b050     08 AA 06 F1 | 	add	local03, #8
0b054     55 39 68 FC | 	wrlong	#28, local03
0b058     03 00 00 FF 
0b05c     00 64 06 F1 | 	add	objptr, ##1536
0b060     32 AD 02 FB | 	rdlong	local04, objptr
0b064     56 AB 02 F6 | 	mov	local03, local04
0b068     01 AA 66 F0 | 	shl	local03, #1
0b06c     56 AB 02 F1 | 	add	local03, local04
0b070     02 AA 66 F0 | 	shl	local03, #2
0b074     03 00 00 FF 
0b078     00 64 86 F1 | 	sub	objptr, ##1536
0b07c     32 AB 02 F1 | 	add	local03, objptr
0b080     55 A9 62 FC | 	wrlong	local02, local03
0b084     03 00 00 FF 
0b088     00 64 06 F1 | 	add	objptr, ##1536
0b08c     32 AD 02 FB | 	rdlong	local04, objptr
0b090     01 AC 06 F1 | 	add	local04, #1
0b094     32 AD 62 FC | 	wrlong	local04, objptr
0b098     56 AB 02 F6 | 	mov	local03, local04
0b09c     01 AA 66 F0 | 	shl	local03, #1
0b0a0     56 AB 02 F1 | 	add	local03, local04
0b0a4     02 AA 66 F0 | 	shl	local03, #2
0b0a8     03 00 00 FF 
0b0ac     00 64 86 F1 | 	sub	objptr, ##1536
0b0b0     32 AB 02 F1 | 	add	local03, objptr
0b0b4     08 AA 06 F1 | 	add	local03, #8
0b0b8     55 97 68 FC | 	wrlong	#75, local03
0b0bc     03 00 00 FF 
0b0c0     00 64 06 F1 | 	add	objptr, ##1536
0b0c4     32 AD 02 FB | 	rdlong	local04, objptr
0b0c8     56 AB 02 F6 | 	mov	local03, local04
0b0cc     01 AA 66 F0 | 	shl	local03, #1
0b0d0     56 AB 02 F1 | 	add	local03, local04
0b0d4     02 AA 66 F0 | 	shl	local03, #2
0b0d8     03 00 00 FF 
0b0dc     00 64 86 F1 | 	sub	objptr, ##1536
0b0e0     32 AB 02 F1 | 	add	local03, objptr
0b0e4     55 01 68 FC | 	wrlong	#0, local03
0b0e8     03 00 00 FF 
0b0ec     00 64 06 F1 | 	add	objptr, ##1536
0b0f0     32 AD 02 FB | 	rdlong	local04, objptr
0b0f4     01 AC 06 F1 | 	add	local04, #1
0b0f8     32 AD 62 FC | 	wrlong	local04, objptr
0b0fc     4B 00 00 FF 
0b100     9C 64 86 F1 | 	sub	objptr, ##38556
0b104                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0b104                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0b104                 | ' return 0
0b104     00 7A 06 F6 | 	mov	result1, #0
0b108                 | LR__0952
0b108     E7 F0 03 F6 | 	mov	ptra, fp
0b10c     F2 00 A0 FD | 	call	#popregs_
0b110                 | _compile_next_ret
0b110     2D 00 64 FD | 	ret
0b114                 | 
0b114                 | ' 
0b114                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0b114                 | ' 
0b114                 | ' function compile_gosub() as ulong
0b114                 | _compile_gosub
0b114     02 CA 05 F6 | 	mov	COUNT_, #2
0b118     E8 00 A0 FD | 	call	#pushregs_
0b11c     4B 00 00 FF 
0b120     9C 64 06 F1 | 	add	objptr, ##38556
0b124     32 A7 02 FB | 	rdlong	local01, objptr
0b128     53 A9 02 F6 | 	mov	local02, local01
0b12c     01 A8 66 F0 | 	shl	local02, #1
0b130     53 A9 02 F1 | 	add	local02, local01
0b134     02 A8 66 F0 | 	shl	local02, #2
0b138     03 00 00 FF 
0b13c     00 64 86 F1 | 	sub	objptr, ##1536
0b140     32 A9 02 F1 | 	add	local02, objptr
0b144     08 A8 06 F1 | 	add	local02, #8
0b148     54 53 69 FC | 	wrlong	#169, local02
0b14c     03 00 00 FF 
0b150     00 64 06 F1 | 	add	objptr, ##1536
0b154     32 A9 02 FB | 	rdlong	local02, objptr
0b158     01 A8 06 F1 | 	add	local02, #1
0b15c     32 A9 62 FC | 	wrlong	local02, objptr
0b160     4B 00 00 FF 
0b164     9C 64 86 F1 | 	sub	objptr, ##38556
0b168     0C 00 B0 FD | 	call	#_compile_goto
0b16c                 | ' compiledline(lineptr).result_type=token_gosub
0b16c                 | ' lineptr+=1
0b16c                 | ' err=compile_goto()
0b16c                 | ' return err
0b16c     E7 F0 03 F6 | 	mov	ptra, fp
0b170     F2 00 A0 FD | 	call	#popregs_
0b174                 | _compile_gosub_ret
0b174     2D 00 64 FD | 	ret
0b178                 | 
0b178                 | ' 
0b178                 | ' '----- compile 'goto' 
0b178                 | ' 
0b178                 | ' function compile_goto() as ulong
0b178                 | _compile_goto
0b178     0A CA 05 F6 | 	mov	COUNT_, #10
0b17c     E8 00 A0 FD | 	call	#pushregs_
0b180     34 F0 07 F1 | 	add	ptra, #52
0b184                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0b184     38 00 00 FF 
0b188     64 64 06 F1 | 	add	objptr, ##28772
0b18c     32 97 02 FB | 	rdlong	arg03, objptr
0b190     03 96 66 F0 | 	shl	arg03, #3
0b194     02 00 00 FF 
0b198     38 64 86 F1 | 	sub	objptr, ##1080
0b19c     32 97 02 F1 | 	add	arg03, objptr
0b1a0     04 96 06 F1 | 	add	arg03, #4
0b1a4     4B 97 02 FB | 	rdlong	arg03, arg03
0b1a8     01 00 00 FF 
0b1ac     00 96 0E F2 | 	cmp	arg03, ##512 wz
0b1b0     36 00 00 FF 
0b1b4     2C 64 86 F1 | 	sub	objptr, ##27692
0b1b8     64 02 90 5D |  if_ne	jmp	#LR__0963
0b1bc     38 00 00 FF 
0b1c0     64 64 06 F1 | 	add	objptr, ##28772
0b1c4     32 97 02 FB | 	rdlong	arg03, objptr
0b1c8     01 96 06 F1 | 	add	arg03, #1
0b1cc     03 96 66 F0 | 	shl	arg03, #3
0b1d0     02 00 00 FF 
0b1d4     38 64 86 F1 | 	sub	objptr, ##1080
0b1d8     32 97 02 F1 | 	add	arg03, objptr
0b1dc     04 96 06 F1 | 	add	arg03, #4
0b1e0     4B 97 02 FB | 	rdlong	arg03, arg03
0b1e4     FE 97 0E F2 | 	cmp	arg03, #510 wz
0b1e8     36 00 00 FF 
0b1ec     2C 64 86 F1 | 	sub	objptr, ##27692
0b1f0     2C 02 90 5D |  if_ne	jmp	#LR__0963
0b1f4     38 00 00 FF 
0b1f8     64 64 06 F1 | 	add	objptr, ##28772
0b1fc     32 97 02 FB | 	rdlong	arg03, objptr
0b200     03 96 66 F0 | 	shl	arg03, #3
0b204     02 00 00 FF 
0b208     38 64 86 F1 | 	sub	objptr, ##1080
0b20c     32 97 02 F1 | 	add	arg03, objptr
0b210     4B 93 02 FB | 	rdlong	arg01, arg03
0b214     00 94 06 F6 | 	mov	arg02, #0
0b218     36 00 00 FF 
0b21c     2C 64 86 F1 | 	sub	objptr, ##27692
0b220     E8 C4 B1 FD | 	call	#__system____builtin_atoi
0b224     3D AD 02 F6 | 	mov	local04, result1
0b228     4B 00 00 FF 
0b22c     9C 64 06 F1 | 	add	objptr, ##38556
0b230     32 AF 02 FB | 	rdlong	local05, objptr
0b234     57 B1 02 F6 | 	mov	local06, local05
0b238     01 B0 66 F0 | 	shl	local06, #1
0b23c     57 B1 02 F1 | 	add	local06, local05
0b240     02 B0 66 F0 | 	shl	local06, #2
0b244     03 00 00 FF 
0b248     00 64 86 F1 | 	sub	objptr, ##1536
0b24c     32 B3 02 F6 | 	mov	local07, objptr
0b250     32 B1 02 F1 | 	add	local06, objptr
0b254     08 B0 06 F1 | 	add	local06, #8
0b258     58 9D 68 FC | 	wrlong	#78, local06
0b25c     03 00 00 FF 
0b260     0C 64 06 F1 | 	add	objptr, ##1548
0b264     32 B5 02 FB | 	rdlong	local08, objptr
0b268                 | '   gotoline=val%(lparts(ct).part$) 
0b268                 | '   compiledline(lineptr).result_type=token_fast_goto
0b268                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b268                 | '   do
0b268     3F 00 00 FF 
0b26c     DC 65 86 F1 | 	sub	objptr, ##32732
0b270                 | LR__0960
0b270     E7 92 02 F6 | 	mov	arg01, fp
0b274     10 92 06 F1 | 	add	arg01, #16
0b278     5A 95 02 F6 | 	mov	arg02, local08
0b27c     18 96 06 F6 | 	mov	arg03, #24
0b280     14 8B B1 FD | 	call	#_psram_spin2_read1
0b284                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b284                 | '     if gotoheader(0)<>$FFFFFFFF then
0b284     10 CE 05 F1 | 	add	fp, #16
0b288     E7 B0 02 FB | 	rdlong	local06, fp
0b28c     10 CE 85 F1 | 	sub	fp, #16
0b290     FF FF 7F FF 
0b294     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0b298     5A B7 02 56 |  if_ne	mov	local09, local08
0b29c     24 CE 05 51 |  if_ne	add	fp, #36
0b2a0     E7 B4 02 5B |  if_ne	rdlong	local08, fp
0b2a4     24 CE 85 51 |  if_ne	sub	fp, #36
0b2a8     24 CE 05 F1 | 	add	fp, #36
0b2ac     E7 B0 02 FB | 	rdlong	local06, fp
0b2b0     24 CE 85 F1 | 	sub	fp, #36
0b2b4     FF FF 3F FF 
0b2b8     FF B1 0E F2 | 	cmp	local06, ##2147483647 wz
0b2bc     10 CE 05 51 |  if_ne	add	fp, #16
0b2c0     E7 AE 02 5B |  if_ne	rdlong	local05, fp
0b2c4     10 CE 85 51 |  if_ne	sub	fp, #16
0b2c8     FF FF 7F 5F 
0b2cc     FF AF 0E 52 |  if_ne	cmp	local05, ##-1 wz
0b2d0     10 CE 05 51 |  if_ne	add	fp, #16
0b2d4     57 B3 02 56 |  if_ne	mov	local07, local05
0b2d8     10 CE 85 51 |  if_ne	sub	fp, #16
0b2dc     56 B3 0A 52 |  if_ne	cmp	local07, local04 wz
0b2e0     8C FF 9F 5D |  if_ne	jmp	#LR__0960
0b2e4     0B 00 00 FF 
0b2e8     CC 64 86 F1 | 	sub	objptr, ##5836
0b2ec                 | '   if gotoheader(0)=gotoline then
0b2ec     10 CE 05 F1 | 	add	fp, #16
0b2f0     E7 B0 02 FB | 	rdlong	local06, fp
0b2f4     10 CE 85 F1 | 	sub	fp, #16
0b2f8     56 B1 0A F2 | 	cmp	local06, local04 wz
0b2fc     68 00 90 5D |  if_ne	jmp	#LR__0961
0b300     4B 00 00 FF 
0b304     9C 64 06 F1 | 	add	objptr, ##38556
0b308     32 AF 02 FB | 	rdlong	local05, objptr
0b30c     57 B1 02 F6 | 	mov	local06, local05
0b310     01 B0 66 F0 | 	shl	local06, #1
0b314     57 B1 02 F1 | 	add	local06, local05
0b318     02 B0 66 F0 | 	shl	local06, #2
0b31c     03 00 00 FF 
0b320     00 64 86 F1 | 	sub	objptr, ##1536
0b324     32 B1 02 F1 | 	add	local06, objptr
0b328     58 B7 62 FC | 	wrlong	local09, local06
0b32c     03 00 00 FF 
0b330     00 64 06 F1 | 	add	objptr, ##1536
0b334     32 AF 02 FB | 	rdlong	local05, objptr
0b338     57 B1 02 F6 | 	mov	local06, local05
0b33c     01 B0 66 F0 | 	shl	local06, #1
0b340     57 B1 02 F1 | 	add	local06, local05
0b344     02 B0 66 F0 | 	shl	local06, #2
0b348     03 00 00 FF 
0b34c     00 64 86 F1 | 	sub	objptr, ##1536
0b350     32 B1 02 F1 | 	add	local06, objptr
0b354     04 B0 06 F1 | 	add	local06, #4
0b358     58 AD 62 FC | 	wrlong	local04, local06
0b35c     48 00 00 FF 
0b360     9C 64 86 F1 | 	sub	objptr, ##37020
0b364     98 00 90 FD | 	jmp	#LR__0962
0b368                 | LR__0961
0b368     4B 00 00 FF 
0b36c     9C 64 06 F1 | 	add	objptr, ##38556
0b370     32 AF 02 FB | 	rdlong	local05, objptr
0b374     57 B1 02 F6 | 	mov	local06, local05
0b378     01 B0 66 F0 | 	shl	local06, #1
0b37c     57 B1 02 F1 | 	add	local06, local05
0b380     02 B0 66 F0 | 	shl	local06, #2
0b384     03 00 00 FF 
0b388     00 64 86 F1 | 	sub	objptr, ##1536
0b38c     32 B1 02 F1 | 	add	local06, objptr
0b390     00 00 C0 FF 
0b394     58 01 68 FC | 	wrlong	##-2147483648, local06
0b398     03 00 00 FF 
0b39c     00 64 06 F1 | 	add	objptr, ##1536
0b3a0     32 AF 02 FB | 	rdlong	local05, objptr
0b3a4     57 B1 02 F6 | 	mov	local06, local05
0b3a8     01 B0 66 F0 | 	shl	local06, #1
0b3ac     57 B1 02 F1 | 	add	local06, local05
0b3b0     02 B0 66 F0 | 	shl	local06, #2
0b3b4     03 00 00 FF 
0b3b8     00 64 86 F1 | 	sub	objptr, ##1536
0b3bc     32 B1 02 F1 | 	add	local06, objptr
0b3c0     04 B0 06 F1 | 	add	local06, #4
0b3c4     58 AD 62 FC | 	wrlong	local04, local06
0b3c8     03 00 00 FF 
0b3cc     00 64 06 F1 | 	add	objptr, ##1536
0b3d0     32 AF 02 FB | 	rdlong	local05, objptr
0b3d4     57 B1 02 F6 | 	mov	local06, local05
0b3d8     01 B0 66 F0 | 	shl	local06, #1
0b3dc     57 B1 02 F1 | 	add	local06, local05
0b3e0     02 B0 66 F0 | 	shl	local06, #2
0b3e4     03 00 00 FF 
0b3e8     00 64 86 F1 | 	sub	objptr, ##1536
0b3ec     32 B1 02 F1 | 	add	local06, objptr
0b3f0     08 B0 06 F1 | 	add	local06, #8
0b3f4     58 A7 68 FC | 	wrlong	#83, local06
0b3f8     48 00 00 FF 
0b3fc     9C 64 86 F1 | 	sub	objptr, ##37020
0b400                 | LR__0962
0b400     4B 00 00 FF 
0b404     9C 64 06 F1 | 	add	objptr, ##38556
0b408     32 B7 02 FB | 	rdlong	local09, objptr
0b40c     01 B6 06 F1 | 	add	local09, #1
0b410     32 B7 62 FC | 	wrlong	local09, objptr
0b414     4B 00 00 FF 
0b418     9C 64 86 F1 | 	sub	objptr, ##38556
0b41c     BC 00 90 FD | 	jmp	#LR__0964
0b420                 | LR__0963
0b420     4C 0A B0 FD | 	call	#_expr
0b424     4F AA 06 F6 | 	mov	local03, #79
0b428     00 A6 06 F6 | 	mov	local01, #0
0b42c     54 B9 02 F6 | 	mov	local10, local02
0b430     55 AF 02 F6 | 	mov	local05, local03
0b434     4B 00 00 FF 
0b438     9C 64 06 F1 | 	add	objptr, ##38556
0b43c     32 A7 02 FB | 	rdlong	local01, objptr
0b440     53 B7 02 F6 | 	mov	local09, local01
0b444     01 B6 66 F0 | 	shl	local09, #1
0b448     53 B7 02 F1 | 	add	local09, local01
0b44c     02 B6 66 F0 | 	shl	local09, #2
0b450     03 00 00 FF 
0b454     00 64 86 F1 | 	sub	objptr, ##1536
0b458     32 B7 02 F1 | 	add	local09, objptr
0b45c     5B 01 68 FC | 	wrlong	#0, local09
0b460     03 00 00 FF 
0b464     00 64 06 F1 | 	add	objptr, ##1536
0b468     32 A7 02 FB | 	rdlong	local01, objptr
0b46c     53 B7 02 F6 | 	mov	local09, local01
0b470     01 B6 66 F0 | 	shl	local09, #1
0b474     53 B7 02 F1 | 	add	local09, local01
0b478     02 B6 66 F0 | 	shl	local09, #2
0b47c     03 00 00 FF 
0b480     00 64 86 F1 | 	sub	objptr, ##1536
0b484     32 B7 02 F1 | 	add	local09, objptr
0b488     04 B6 06 F1 | 	add	local09, #4
0b48c     5B B9 62 FC | 	wrlong	local10, local09
0b490     03 00 00 FF 
0b494     00 64 06 F1 | 	add	objptr, ##1536
0b498     32 B9 02 FB | 	rdlong	local10, objptr
0b49c     5C A7 02 F6 | 	mov	local01, local10
0b4a0     01 A6 66 F0 | 	shl	local01, #1
0b4a4     5C A7 02 F1 | 	add	local01, local10
0b4a8     02 A6 66 F0 | 	shl	local01, #2
0b4ac     03 00 00 FF 
0b4b0     00 64 86 F1 | 	sub	objptr, ##1536
0b4b4     32 A7 02 F1 | 	add	local01, objptr
0b4b8     08 A6 06 F1 | 	add	local01, #8
0b4bc     53 AF 62 FC | 	wrlong	local05, local01
0b4c0     03 00 00 FF 
0b4c4     00 64 06 F1 | 	add	objptr, ##1536
0b4c8     32 B9 02 FB | 	rdlong	local10, objptr
0b4cc     01 B8 06 F1 | 	add	local10, #1
0b4d0     32 B9 62 FC | 	wrlong	local10, objptr
0b4d4     4B 00 00 FF 
0b4d8     9C 64 86 F1 | 	sub	objptr, ##38556
0b4dc                 | LR__0964
0b4dc                 | ' return 0
0b4dc     00 7A 06 F6 | 	mov	result1, #0
0b4e0     E7 F0 03 F6 | 	mov	ptra, fp
0b4e4     F2 00 A0 FD | 	call	#popregs_
0b4e8                 | _compile_goto_ret
0b4e8     2D 00 64 FD | 	ret
0b4ec                 | 
0b4ec                 | ' 
0b4ec                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b4ec                 | ' 
0b4ec                 | ' function compile_on() as ulong
0b4ec                 | _compile_on
0b4ec     04 CA 05 F6 | 	mov	COUNT_, #4
0b4f0     E8 00 A0 FD | 	call	#pushregs_
0b4f4     78 09 B0 FD | 	call	#_expr
0b4f8     00 A6 06 F6 | 	mov	local01, #0
0b4fc     4B 00 00 FF 
0b500     9C 64 06 F1 | 	add	objptr, ##38556
0b504     32 95 02 FB | 	rdlong	arg02, objptr
0b508     4A 93 02 F6 | 	mov	arg01, arg02
0b50c     01 92 66 F0 | 	shl	arg01, #1
0b510     4A 93 02 F1 | 	add	arg01, arg02
0b514     02 92 66 F0 | 	shl	arg01, #2
0b518     03 00 00 FF 
0b51c     00 64 86 F1 | 	sub	objptr, ##1536
0b520     32 93 02 F1 | 	add	arg01, objptr
0b524     08 92 06 F1 | 	add	arg01, #8
0b528     49 83 69 FC | 	wrlong	#193, arg01
0b52c     03 00 00 FF 
0b530     00 64 06 F1 | 	add	objptr, ##1536
0b534     32 95 02 FB | 	rdlong	arg02, objptr
0b538     4A A9 02 F6 | 	mov	local02, arg02
0b53c     01 94 06 F1 | 	add	arg02, #1
0b540     32 95 62 FC | 	wrlong	arg02, objptr
0b544                 | ' expr()
0b544                 | ' 'print lparts(ct).part$ 'ok
0b544                 | ' numpar=0
0b544                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b544                 | ' if lparts(ct).part$="goto" then
0b544     13 00 00 FF 
0b548     38 64 86 F1 | 	sub	objptr, ##9784
0b54c     32 95 02 FB | 	rdlong	arg02, objptr
0b550     03 94 66 F0 | 	shl	arg02, #3
0b554     02 00 00 FF 
0b558     38 64 86 F1 | 	sub	objptr, ##1080
0b55c     32 95 02 F1 | 	add	arg02, objptr
0b560     4A 93 02 FB | 	rdlong	arg01, arg02
0b564     96 01 00 FF 
0b568     76 94 06 F6 | 	mov	arg02, ##@LR__5936
0b56c     36 00 00 FF 
0b570     2C 64 86 F1 | 	sub	objptr, ##27692
0b574     68 94 B1 FD | 	call	#__system___string_cmp
0b578     00 7A 0E F2 | 	cmp	result1, #0 wz
0b57c     FC 01 90 5D |  if_ne	jmp	#LR__0975
0b580     38 00 00 FF 
0b584     64 64 06 F1 | 	add	objptr, ##28772
0b588     32 AB 02 FB | 	rdlong	local03, objptr
0b58c     38 00 00 FF 
0b590     64 64 86 F1 | 	sub	objptr, ##28772
0b594     01 AA 06 F1 | 	add	local03, #1
0b598                 | '   i=ct+1
0b598                 | '   do
0b598                 | LR__0970
0b598                 | '     if lparts(i).token=token_decimal then
0b598     55 7B 02 F6 | 	mov	result1, local03
0b59c     03 7A 66 F0 | 	shl	result1, #3
0b5a0     32 95 02 F6 | 	mov	arg02, objptr
0b5a4     36 00 00 FF 
0b5a8     2C 94 06 F1 | 	add	arg02, ##27692
0b5ac     4A 7B 02 F1 | 	add	result1, arg02
0b5b0     04 7A 06 F1 | 	add	result1, #4
0b5b4     3D 7B 02 FB | 	rdlong	result1, result1
0b5b8     01 00 00 FF 
0b5bc     00 7A 0E F2 | 	cmp	result1, ##512 wz
0b5c0     DC 00 90 5D |  if_ne	jmp	#LR__0971
0b5c4     4B 00 00 FF 
0b5c8     9C 64 06 F1 | 	add	objptr, ##38556
0b5cc     32 7B 02 FB | 	rdlong	result1, objptr
0b5d0     3D 95 02 F6 | 	mov	arg02, result1
0b5d4     01 94 66 F0 | 	shl	arg02, #1
0b5d8     3D 95 02 F1 | 	add	arg02, result1
0b5dc     02 94 66 F0 | 	shl	arg02, #2
0b5e0     03 00 00 FF 
0b5e4     00 64 86 F1 | 	sub	objptr, ##1536
0b5e8     32 95 02 F1 | 	add	arg02, objptr
0b5ec     00 00 C0 FF 
0b5f0     4A 01 68 FC | 	wrlong	##-2147483648, arg02
0b5f4     03 00 00 FF 
0b5f8     00 64 06 F1 | 	add	objptr, ##1536
0b5fc     32 95 02 FB | 	rdlong	arg02, objptr
0b600     4A AD 02 F6 | 	mov	local04, arg02
0b604     01 AC 66 F0 | 	shl	local04, #1
0b608     4A AD 02 F1 | 	add	local04, arg02
0b60c     02 AC 66 F0 | 	shl	local04, #2
0b610     03 00 00 FF 
0b614     00 64 86 F1 | 	sub	objptr, ##1536
0b618     32 AD 02 F1 | 	add	local04, objptr
0b61c     55 95 02 F6 | 	mov	arg02, local03
0b620     03 94 66 F0 | 	shl	arg02, #3
0b624     12 00 00 FF 
0b628     70 64 86 F1 | 	sub	objptr, ##9328
0b62c     32 95 02 F1 | 	add	arg02, objptr
0b630     4A 93 02 FB | 	rdlong	arg01, arg02
0b634     00 94 06 F6 | 	mov	arg02, #0
0b638     36 00 00 FF 
0b63c     2C 64 86 F1 | 	sub	objptr, ##27692
0b640     C8 C0 B1 FD | 	call	#__system____builtin_atoi
0b644     04 AC 06 F1 | 	add	local04, #4
0b648     56 7B 62 FC | 	wrlong	result1, local04
0b64c     4B 00 00 FF 
0b650     9C 64 06 F1 | 	add	objptr, ##38556
0b654     32 95 02 FB | 	rdlong	arg02, objptr
0b658     4A AD 02 F6 | 	mov	local04, arg02
0b65c     01 AC 66 F0 | 	shl	local04, #1
0b660     4A AD 02 F1 | 	add	local04, arg02
0b664     02 AC 66 F0 | 	shl	local04, #2
0b668     03 00 00 FF 
0b66c     00 64 86 F1 | 	sub	objptr, ##1536
0b670     32 AD 02 F1 | 	add	local04, objptr
0b674     08 AC 06 F1 | 	add	local04, #8
0b678     56 A7 68 FC | 	wrlong	#83, local04
0b67c     03 00 00 FF 
0b680     00 64 06 F1 | 	add	objptr, ##1536
0b684     32 AD 02 FB | 	rdlong	local04, objptr
0b688     01 AC 06 F1 | 	add	local04, #1
0b68c     32 AD 62 FC | 	wrlong	local04, objptr
0b690     4B 00 00 FF 
0b694     9C 64 86 F1 | 	sub	objptr, ##38556
0b698     01 A6 06 F1 | 	add	local01, #1
0b69c     08 00 90 FD | 	jmp	#LR__0972
0b6a0                 | LR__0971
0b6a0                 | '       return 17
0b6a0     11 7A 06 F6 | 	mov	result1, #17
0b6a4     2C 04 90 FD | 	jmp	#LR__0985
0b6a8                 | LR__0972
0b6a8     01 AA 06 F1 | 	add	local03, #1
0b6ac                 | '     i+=1
0b6ac                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b6ac     55 93 02 F6 | 	mov	arg01, local03
0b6b0     03 92 66 F0 | 	shl	arg01, #3
0b6b4     32 AD 02 F6 | 	mov	local04, objptr
0b6b8     36 00 00 FF 
0b6bc     2C AC 06 F1 | 	add	local04, ##27692
0b6c0     56 93 02 F1 | 	add	arg01, local04
0b6c4     04 92 06 F1 | 	add	arg01, #4
0b6c8     49 93 02 FB | 	rdlong	arg01, arg01
0b6cc     11 92 0E F2 | 	cmp	arg01, #17 wz
0b6d0     2C 00 90 AD |  if_e	jmp	#LR__0973
0b6d4     55 93 02 F6 | 	mov	arg01, local03
0b6d8     03 92 66 F0 | 	shl	arg01, #3
0b6dc     32 AD 02 F6 | 	mov	local04, objptr
0b6e0     36 00 00 FF 
0b6e4     2C AC 06 F1 | 	add	local04, ##27692
0b6e8     56 93 02 F1 | 	add	arg01, local04
0b6ec     04 92 06 F1 | 	add	arg01, #4
0b6f0     49 AD 02 FB | 	rdlong	local04, arg01
0b6f4     FE AD 0E F2 | 	cmp	local04, #510 wz
0b6f8     15 7A 06 56 |  if_ne	mov	result1, #21
0b6fc     D4 03 90 5D |  if_ne	jmp	#LR__0985
0b700                 | LR__0973
0b700                 | '     if lparts(i).token=token_end then exit loop
0b700     55 7B 02 F6 | 	mov	result1, local03
0b704     03 7A 66 F0 | 	shl	result1, #3
0b708     32 AD 02 F6 | 	mov	local04, objptr
0b70c     36 00 00 FF 
0b710     2C AC 06 F1 | 	add	local04, ##27692
0b714     56 7B 02 F1 | 	add	result1, local04
0b718     04 7A 06 F1 | 	add	result1, #4
0b71c     3D 7B 02 FB | 	rdlong	result1, result1
0b720     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b724     2C 00 90 AD |  if_e	jmp	#LR__0974
0b728     01 AA 06 F1 | 	add	local03, #1
0b72c     55 7B 02 F6 | 	mov	result1, local03
0b730     03 7A 66 F0 | 	shl	result1, #3
0b734     32 AD 02 F6 | 	mov	local04, objptr
0b738     36 00 00 FF 
0b73c     2C AC 06 F1 | 	add	local04, ##27692
0b740     56 7B 02 F1 | 	add	result1, local04
0b744     04 7A 06 F1 | 	add	result1, #4
0b748     3D 7B 02 FB | 	rdlong	result1, result1
0b74c     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b750     44 FE 9F 5D |  if_ne	jmp	#LR__0970
0b754                 | LR__0974
0b754     54 AB 02 F6 | 	mov	local03, local02
0b758     01 AA 66 F0 | 	shl	local03, #1
0b75c     54 AB 02 F1 | 	add	local03, local02
0b760     02 AA 66 F0 | 	shl	local03, #2
0b764     32 AD 02 F6 | 	mov	local04, objptr
0b768     48 00 00 FF 
0b76c     9C AC 06 F1 | 	add	local04, ##37020
0b770     56 AB 02 F1 | 	add	local03, local04
0b774     04 AA 06 F1 | 	add	local03, #4
0b778     55 03 68 FC | 	wrlong	#1, local03
0b77c                 | LR__0975
0b77c                 | ' 
0b77c                 | ' if lparts(ct).part$="gosub" then
0b77c     38 00 00 FF 
0b780     64 64 06 F1 | 	add	objptr, ##28772
0b784     32 AB 02 FB | 	rdlong	local03, objptr
0b788     03 AA 66 F0 | 	shl	local03, #3
0b78c     02 00 00 FF 
0b790     38 64 86 F1 | 	sub	objptr, ##1080
0b794     32 AB 02 F1 | 	add	local03, objptr
0b798     55 93 02 FB | 	rdlong	arg01, local03
0b79c     96 01 00 FF 
0b7a0     7B 94 06 F6 | 	mov	arg02, ##@LR__5937
0b7a4     36 00 00 FF 
0b7a8     2C 64 86 F1 | 	sub	objptr, ##27692
0b7ac     30 92 B1 FD | 	call	#__system___string_cmp
0b7b0     00 7A 0E F2 | 	cmp	result1, #0 wz
0b7b4     6C 02 90 5D |  if_ne	jmp	#LR__0981
0b7b8     38 00 00 FF 
0b7bc     64 64 06 F1 | 	add	objptr, ##28772
0b7c0     32 AB 02 FB | 	rdlong	local03, objptr
0b7c4     38 00 00 FF 
0b7c8     64 64 86 F1 | 	sub	objptr, ##28772
0b7cc     01 AA 06 F1 | 	add	local03, #1
0b7d0                 | '   i=ct+1
0b7d0                 | '   do
0b7d0                 | LR__0976
0b7d0                 | '     if lparts(i).token=token_decimal then
0b7d0     55 7B 02 F6 | 	mov	result1, local03
0b7d4     03 7A 66 F0 | 	shl	result1, #3
0b7d8     32 AD 02 F6 | 	mov	local04, objptr
0b7dc     36 00 00 FF 
0b7e0     2C AC 06 F1 | 	add	local04, ##27692
0b7e4     56 7B 02 F1 | 	add	result1, local04
0b7e8     04 7A 06 F1 | 	add	result1, #4
0b7ec     3D 7B 02 FB | 	rdlong	result1, result1
0b7f0     01 00 00 FF 
0b7f4     00 7A 0E F2 | 	cmp	result1, ##512 wz
0b7f8     4C 01 90 5D |  if_ne	jmp	#LR__0977
0b7fc     4B 00 00 FF 
0b800     9C 64 06 F1 | 	add	objptr, ##38556
0b804     32 7B 02 FB | 	rdlong	result1, objptr
0b808     3D AD 02 F6 | 	mov	local04, result1
0b80c     01 AC 66 F0 | 	shl	local04, #1
0b810     3D AD 02 F1 | 	add	local04, result1
0b814     02 AC 66 F0 | 	shl	local04, #2
0b818     03 00 00 FF 
0b81c     00 64 86 F1 | 	sub	objptr, ##1536
0b820     32 AD 02 F1 | 	add	local04, objptr
0b824     08 AC 06 F1 | 	add	local04, #8
0b828     56 53 69 FC | 	wrlong	#169, local04
0b82c     03 00 00 FF 
0b830     00 64 06 F1 | 	add	objptr, ##1536
0b834     32 7B 02 FB | 	rdlong	result1, objptr
0b838     01 7A 06 F1 | 	add	result1, #1
0b83c     32 7B 62 FC | 	wrlong	result1, objptr
0b840     3D AD 02 F6 | 	mov	local04, result1
0b844     01 AC 66 F0 | 	shl	local04, #1
0b848     3D AD 02 F1 | 	add	local04, result1
0b84c     02 AC 66 F0 | 	shl	local04, #2
0b850     03 00 00 FF 
0b854     00 64 86 F1 | 	sub	objptr, ##1536
0b858     32 AD 02 F1 | 	add	local04, objptr
0b85c     00 00 C0 FF 
0b860     56 01 68 FC | 	wrlong	##-2147483648, local04
0b864     03 00 00 FF 
0b868     00 64 06 F1 | 	add	objptr, ##1536
0b86c     32 7B 02 FB | 	rdlong	result1, objptr
0b870     3D AD 02 F6 | 	mov	local04, result1
0b874     01 AC 66 F0 | 	shl	local04, #1
0b878     3D AD 02 F1 | 	add	local04, result1
0b87c     02 AC 66 F0 | 	shl	local04, #2
0b880     03 00 00 FF 
0b884     00 64 86 F1 | 	sub	objptr, ##1536
0b888     32 AD 02 F1 | 	add	local04, objptr
0b88c     55 93 02 F6 | 	mov	arg01, local03
0b890     03 92 66 F0 | 	shl	arg01, #3
0b894     12 00 00 FF 
0b898     70 64 86 F1 | 	sub	objptr, ##9328
0b89c     32 93 02 F1 | 	add	arg01, objptr
0b8a0     49 93 02 FB | 	rdlong	arg01, arg01
0b8a4     00 94 06 F6 | 	mov	arg02, #0
0b8a8     36 00 00 FF 
0b8ac     2C 64 86 F1 | 	sub	objptr, ##27692
0b8b0     58 BE B1 FD | 	call	#__system____builtin_atoi
0b8b4     04 AC 06 F1 | 	add	local04, #4
0b8b8     56 7B 62 FC | 	wrlong	result1, local04
0b8bc     4B 00 00 FF 
0b8c0     9C 64 06 F1 | 	add	objptr, ##38556
0b8c4     32 93 02 FB | 	rdlong	arg01, objptr
0b8c8     49 AD 02 F6 | 	mov	local04, arg01
0b8cc     01 AC 66 F0 | 	shl	local04, #1
0b8d0     49 AD 02 F1 | 	add	local04, arg01
0b8d4     02 AC 66 F0 | 	shl	local04, #2
0b8d8     03 00 00 FF 
0b8dc     00 64 86 F1 | 	sub	objptr, ##1536
0b8e0     32 AD 02 F1 | 	add	local04, objptr
0b8e4     08 AC 06 F1 | 	add	local04, #8
0b8e8     56 A7 68 FC | 	wrlong	#83, local04
0b8ec     03 00 00 FF 
0b8f0     00 64 06 F1 | 	add	objptr, ##1536
0b8f4     32 93 02 FB | 	rdlong	arg01, objptr
0b8f8     01 92 06 F1 | 	add	arg01, #1
0b8fc     32 93 62 FC | 	wrlong	arg01, objptr
0b900     01 A6 06 F1 | 	add	local01, #1
0b904     49 AD 02 F6 | 	mov	local04, arg01
0b908     01 AC 66 F0 | 	shl	local04, #1
0b90c     49 AD 02 F1 | 	add	local04, arg01
0b910     02 AC 66 F0 | 	shl	local04, #2
0b914     03 00 00 FF 
0b918     00 64 86 F1 | 	sub	objptr, ##1536
0b91c     32 AD 02 F1 | 	add	local04, objptr
0b920     08 AC 06 F1 | 	add	local04, #8
0b924     56 5B 68 FC | 	wrlong	#45, local04
0b928     03 00 00 FF 
0b92c     00 64 06 F1 | 	add	objptr, ##1536
0b930     32 AD 02 FB | 	rdlong	local04, objptr
0b934     01 AC 06 F1 | 	add	local04, #1
0b938     32 AD 62 FC | 	wrlong	local04, objptr
0b93c     4B 00 00 FF 
0b940     9C 64 86 F1 | 	sub	objptr, ##38556
0b944     08 00 90 FD | 	jmp	#LR__0978
0b948                 | LR__0977
0b948                 | '       return 17
0b948     11 7A 06 F6 | 	mov	result1, #17
0b94c     84 01 90 FD | 	jmp	#LR__0985
0b950                 | LR__0978
0b950     01 AA 06 F1 | 	add	local03, #1
0b954                 | '     i+=1
0b954                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b954     55 93 02 F6 | 	mov	arg01, local03
0b958     03 92 66 F0 | 	shl	arg01, #3
0b95c     32 AD 02 F6 | 	mov	local04, objptr
0b960     36 00 00 FF 
0b964     2C AC 06 F1 | 	add	local04, ##27692
0b968     56 93 02 F1 | 	add	arg01, local04
0b96c     04 92 06 F1 | 	add	arg01, #4
0b970     49 93 02 FB | 	rdlong	arg01, arg01
0b974     11 92 0E F2 | 	cmp	arg01, #17 wz
0b978     2C 00 90 AD |  if_e	jmp	#LR__0979
0b97c     55 93 02 F6 | 	mov	arg01, local03
0b980     03 92 66 F0 | 	shl	arg01, #3
0b984     32 AD 02 F6 | 	mov	local04, objptr
0b988     36 00 00 FF 
0b98c     2C AC 06 F1 | 	add	local04, ##27692
0b990     56 93 02 F1 | 	add	arg01, local04
0b994     04 92 06 F1 | 	add	arg01, #4
0b998     49 93 02 FB | 	rdlong	arg01, arg01
0b99c     FE 93 0E F2 | 	cmp	arg01, #510 wz
0b9a0     15 7A 06 56 |  if_ne	mov	result1, #21
0b9a4     2C 01 90 5D |  if_ne	jmp	#LR__0985
0b9a8                 | LR__0979
0b9a8                 | '     if lparts(i).token=token_end then exit loop
0b9a8     55 7B 02 F6 | 	mov	result1, local03
0b9ac     03 7A 66 F0 | 	shl	result1, #3
0b9b0     32 AD 02 F6 | 	mov	local04, objptr
0b9b4     36 00 00 FF 
0b9b8     2C AC 06 F1 | 	add	local04, ##27692
0b9bc     56 7B 02 F1 | 	add	result1, local04
0b9c0     04 7A 06 F1 | 	add	result1, #4
0b9c4     3D 7B 02 FB | 	rdlong	result1, result1
0b9c8     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b9cc     2C 00 90 AD |  if_e	jmp	#LR__0980
0b9d0     01 AA 06 F1 | 	add	local03, #1
0b9d4     55 7B 02 F6 | 	mov	result1, local03
0b9d8     03 7A 66 F0 | 	shl	result1, #3
0b9dc     32 AD 02 F6 | 	mov	local04, objptr
0b9e0     36 00 00 FF 
0b9e4     2C AC 06 F1 | 	add	local04, ##27692
0b9e8     56 7B 02 F1 | 	add	result1, local04
0b9ec     04 7A 06 F1 | 	add	result1, #4
0b9f0     3D 7B 02 FB | 	rdlong	result1, result1
0b9f4     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b9f8     D4 FD 9F 5D |  if_ne	jmp	#LR__0976
0b9fc                 | LR__0980
0b9fc     54 AB 02 F6 | 	mov	local03, local02
0ba00     01 AA 66 F0 | 	shl	local03, #1
0ba04     54 AB 02 F1 | 	add	local03, local02
0ba08     02 AA 66 F0 | 	shl	local03, #2
0ba0c     32 AD 02 F6 | 	mov	local04, objptr
0ba10     48 00 00 FF 
0ba14     9C AC 06 F1 | 	add	local04, ##37020
0ba18     56 AB 02 F1 | 	add	local03, local04
0ba1c     04 AA 06 F1 | 	add	local03, #4
0ba20     55 07 68 FC | 	wrlong	#3, local03
0ba24                 | LR__0981
0ba24     54 AB 02 F6 | 	mov	local03, local02
0ba28     01 AA 66 F0 | 	shl	local03, #1
0ba2c     54 AB 02 F1 | 	add	local03, local02
0ba30     02 AA 66 F0 | 	shl	local03, #2
0ba34     48 00 00 FF 
0ba38     9C 64 06 F1 | 	add	objptr, ##37020
0ba3c     32 AB 02 F1 | 	add	local03, objptr
0ba40     55 A7 62 FC | 	wrlong	local01, local03
0ba44                 | ' compiledline(onlineptr).result.uresult=numpar
0ba44                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0ba44     03 00 00 FF 
0ba48     00 64 06 F1 | 	add	objptr, ##1536
0ba4c     32 AB 02 FB | 	rdlong	local03, objptr
0ba50     4B 00 00 FF 
0ba54     9C 64 86 F1 | 	sub	objptr, ##38556
0ba58     D7 3A 48 FB | 	callpa	#(@LR__0984-@LR__0982)>>2,fcache_load_ptr_
0ba5c                 | LR__0982
0ba5c     55 AD 02 F6 | 	mov	local04, local03
0ba60     01 AC 66 F0 | 	shl	local04, #1
0ba64     55 AD 02 F1 | 	add	local04, local03
0ba68     02 AC 66 F0 | 	shl	local04, #2
0ba6c     32 A7 02 F6 | 	mov	local01, objptr
0ba70     48 00 00 FF 
0ba74     9C A6 06 F1 | 	add	local01, ##37020
0ba78     53 AD 02 F1 | 	add	local04, local01
0ba7c     08 AC 06 F1 | 	add	local04, #8
0ba80     56 AD 02 FB | 	rdlong	local04, local04
0ba84     2D AC 0E F2 | 	cmp	local04, #45 wz
0ba88     38 00 90 5D |  if_ne	jmp	#LR__0983
0ba8c     55 AD 02 F6 | 	mov	local04, local03
0ba90     01 AC 66 F0 | 	shl	local04, #1
0ba94     55 AD 02 F1 | 	add	local04, local03
0ba98     02 AC 66 F0 | 	shl	local04, #2
0ba9c     48 00 00 FF 
0baa0     9C 64 06 F1 | 	add	objptr, ##37020
0baa4     32 AD 02 F1 | 	add	local04, objptr
0baa8     03 00 00 FF 
0baac     00 64 06 F1 | 	add	objptr, ##1536
0bab0     32 A7 02 FB | 	rdlong	local01, objptr
0bab4     4B 00 00 FF 
0bab8     9C 64 86 F1 | 	sub	objptr, ##38556
0babc     02 A6 86 F1 | 	sub	local01, #2
0bac0     56 A7 62 FC | 	wrlong	local01, local04
0bac4                 | LR__0983
0bac4     01 AA 86 F1 | 	sub	local03, #1
0bac8     54 AB 52 F2 | 	cmps	local03, local02 wc
0bacc     8C FF 9F 3D |  if_ae	jmp	#LR__0982
0bad0                 | LR__0984
0bad0                 | ' return 0
0bad0     00 7A 06 F6 | 	mov	result1, #0
0bad4                 | LR__0985
0bad4     E7 F0 03 F6 | 	mov	ptra, fp
0bad8     F2 00 A0 FD | 	call	#popregs_
0badc                 | _compile_on_ret
0badc     2D 00 64 FD | 	ret
0bae0                 | 
0bae0                 | ' 
0bae0                 | ' '----- A helper for compile_input and compile_read
0bae0                 | '  
0bae0                 | ' function getaddr() as ulong
0bae0                 | _getaddr
0bae0     0B CA 05 F6 | 	mov	COUNT_, #11
0bae4     E8 00 A0 FD | 	call	#pushregs_
0bae8     38 00 00 FF 
0baec     64 64 06 F1 | 	add	objptr, ##28772
0baf0     32 AD 02 FB | 	rdlong	local04, objptr
0baf4     03 AC 66 F0 | 	shl	local04, #3
0baf8     02 00 00 FF 
0bafc     38 64 86 F1 | 	sub	objptr, ##1080
0bb00     32 AD 02 F1 | 	add	local04, objptr
0bb04     56 AF 02 FB | 	rdlong	local05, local04
0bb08     01 B0 66 F6 | 	neg	local06, #1
0bb0c                 | ' 
0bb0c                 | ' varname$=lparts(ct).part$
0bb0c                 | ' j=-1
0bb0c                 | ' 
0bb0c                 | ' for i=0 to varnum-1
0bb0c     00 B2 06 F6 | 	mov	local07, #0
0bb10     04 64 86 F1 | 	sub	objptr, #4
0bb14     32 B5 02 FB | 	rdlong	local08, objptr
0bb18     36 00 00 FF 
0bb1c     28 64 86 F1 | 	sub	objptr, ##27688
0bb20                 | LR__0990
0bb20     5A B3 52 F2 | 	cmps	local07, local08 wc
0bb24     34 00 90 3D |  if_ae	jmp	#LR__0991
0bb28                 | '   if variables(i).name=varname$ then j=i : exit
0bb28     59 AD 02 F6 | 	mov	local04, local07
0bb2c     04 AC 66 F0 | 	shl	local04, #4
0bb30     32 95 02 F6 | 	mov	arg02, objptr
0bb34     16 00 00 FF 
0bb38     18 94 06 F1 | 	add	arg02, ##11288
0bb3c     4A AD 02 F1 | 	add	local04, arg02
0bb40     56 93 02 FB | 	rdlong	arg01, local04
0bb44     57 95 02 F6 | 	mov	arg02, local05
0bb48     94 8E B1 FD | 	call	#__system___string_cmp
0bb4c     00 7A 0E F2 | 	cmp	result1, #0 wz
0bb50     59 B1 02 A6 |  if_e	mov	local06, local07
0bb54     01 B2 06 51 |  if_ne	add	local07, #1
0bb58     C4 FF 9F 5D |  if_ne	jmp	#LR__0990
0bb5c                 | LR__0991
0bb5c                 | ' if  j=-1 andalso varnum<maxvars then   
0bb5c     FF FF 7F FF 
0bb60     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0bb64     A8 00 90 5D |  if_ne	jmp	#LR__0992
0bb68     36 00 00 FF 
0bb6c     28 64 06 F1 | 	add	objptr, ##27688
0bb70     32 B5 02 FB | 	rdlong	local08, objptr
0bb74     36 00 00 FF 
0bb78     28 64 86 F1 | 	sub	objptr, ##27688
0bb7c     02 00 00 FF 
0bb80     00 B4 56 F2 | 	cmps	local08, ##1024 wc
0bb84     88 00 90 3D |  if_ae	jmp	#LR__0992
0bb88     36 00 00 FF 
0bb8c     28 64 06 F1 | 	add	objptr, ##27688
0bb90     32 AD 02 FB | 	rdlong	local04, objptr
0bb94     04 AC 66 F0 | 	shl	local04, #4
0bb98     20 00 00 FF 
0bb9c     10 64 86 F1 | 	sub	objptr, ##16400
0bba0     32 AD 02 F1 | 	add	local04, objptr
0bba4     56 AF 62 FC | 	wrlong	local05, local04
0bba8     20 00 00 FF 
0bbac     10 64 06 F1 | 	add	objptr, ##16400
0bbb0     32 AD 02 FB | 	rdlong	local04, objptr
0bbb4     04 AC 66 F0 | 	shl	local04, #4
0bbb8     20 00 00 FF 
0bbbc     10 64 86 F1 | 	sub	objptr, ##16400
0bbc0     32 AD 02 F1 | 	add	local04, objptr
0bbc4     04 AC 06 F1 | 	add	local04, #4
0bbc8     56 01 68 FC | 	wrlong	#0, local04
0bbcc     20 00 00 FF 
0bbd0     10 64 06 F1 | 	add	objptr, ##16400
0bbd4     32 AD 02 FB | 	rdlong	local04, objptr
0bbd8     04 AC 66 F0 | 	shl	local04, #4
0bbdc     20 00 00 FF 
0bbe0     10 64 86 F1 | 	sub	objptr, ##16400
0bbe4     32 AD 02 F1 | 	add	local04, objptr
0bbe8     0C AC 06 F1 | 	add	local04, #12
0bbec     56 39 68 FC | 	wrlong	#28, local04
0bbf0     20 00 00 FF 
0bbf4     10 64 06 F1 | 	add	objptr, ##16400
0bbf8     32 B5 02 FB | 	rdlong	local08, objptr
0bbfc     5A B1 02 F6 | 	mov	local06, local08
0bc00     01 B4 06 F1 | 	add	local08, #1
0bc04     32 B5 62 FC | 	wrlong	local08, objptr
0bc08     36 00 00 FF 
0bc0c     28 64 86 F1 | 	sub	objptr, ##27688
0bc10                 | LR__0992
0bc10     00 B2 06 F6 | 	mov	local07, #0
0bc14                 | ' numpar=0
0bc14                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0bc14     38 00 00 FF 
0bc18     64 64 06 F1 | 	add	objptr, ##28772
0bc1c     32 AD 02 FB | 	rdlong	local04, objptr
0bc20     01 AC 06 F1 | 	add	local04, #1
0bc24     03 AC 66 F0 | 	shl	local04, #3
0bc28     02 00 00 FF 
0bc2c     38 64 86 F1 | 	sub	objptr, ##1080
0bc30     32 AD 02 F1 | 	add	local04, objptr
0bc34     04 AC 06 F1 | 	add	local04, #4
0bc38     56 B5 02 FB | 	rdlong	local08, local04
0bc3c     15 B4 0E F2 | 	cmp	local08, #21 wz
0bc40     36 00 00 FF 
0bc44     2C 64 86 F1 | 	sub	objptr, ##27692
0bc48     54 01 90 5D |  if_ne	jmp	#LR__0997
0bc4c     38 00 00 FF 
0bc50     64 64 06 F1 | 	add	objptr, ##28772
0bc54     32 B7 02 FB | 	rdlong	local09, objptr
0bc58     01 B6 06 F1 | 	add	local09, #1
0bc5c     32 B7 62 FC | 	wrlong	local09, objptr
0bc60     38 00 00 FF 
0bc64     64 64 86 F1 | 	sub	objptr, ##28772
0bc68                 | '   ct+=1 											' omit this lpar, this is for expr list
0bc68                 | '   do
0bc68                 | LR__0993
0bc68     38 00 00 FF 
0bc6c     64 64 06 F1 | 	add	objptr, ##28772
0bc70     32 AD 02 FB | 	rdlong	local04, objptr
0bc74     01 AC 06 F1 | 	add	local04, #1
0bc78     32 AD 62 FC | 	wrlong	local04, objptr
0bc7c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0bc7c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0bc7c     03 AC 66 F0 | 	shl	local04, #3
0bc80     02 00 00 FF 
0bc84     38 64 86 F1 | 	sub	objptr, ##1080
0bc88     32 AD 02 F1 | 	add	local04, objptr
0bc8c     04 AC 06 F1 | 	add	local04, #4
0bc90     56 B7 02 FB | 	rdlong	local09, local04
0bc94     15 B6 0E F2 | 	cmp	local09, #21 wz
0bc98     36 00 00 FF 
0bc9c     2C 64 86 F1 | 	sub	objptr, ##27692
0bca0     44 00 90 5D |  if_ne	jmp	#LR__0994
0bca4     38 00 00 FF 
0bca8     64 64 06 F1 | 	add	objptr, ##28772
0bcac     32 B7 02 FB | 	rdlong	local09, objptr
0bcb0     01 B6 06 F1 | 	add	local09, #1
0bcb4     32 B7 62 FC | 	wrlong	local09, objptr
0bcb8     38 00 00 FF 
0bcbc     64 64 86 F1 | 	sub	objptr, ##28772
0bcc0     AC 01 B0 FD | 	call	#_expr
0bcc4     3D B9 02 F6 | 	mov	local10, result1
0bcc8     38 00 00 FF 
0bccc     64 64 06 F1 | 	add	objptr, ##28772
0bcd0     32 B7 02 FB | 	rdlong	local09, objptr
0bcd4     01 B6 06 F1 | 	add	local09, #1
0bcd8     32 B7 62 FC | 	wrlong	local09, objptr
0bcdc     38 00 00 FF 
0bce0     64 64 86 F1 | 	sub	objptr, ##28772
0bce4     08 00 90 FD | 	jmp	#LR__0995
0bce8                 | LR__0994
0bce8     84 01 B0 FD | 	call	#_expr
0bcec     3D B9 02 F6 | 	mov	local10, result1
0bcf0                 | LR__0995
0bcf0                 | '     if err>0 then return err
0bcf0     01 B8 56 F2 | 	cmps	local10, #1 wc
0bcf4     5C 7B 02 36 |  if_ae	mov	result1, local10
0bcf8     68 01 90 3D |  if_ae	jmp	#LR__0998
0bcfc     01 B2 06 F1 | 	add	local07, #1
0bd00     38 00 00 FF 
0bd04     64 64 06 F1 | 	add	objptr, ##28772
0bd08     32 AD 02 FB | 	rdlong	local04, objptr
0bd0c     03 AC 66 F0 | 	shl	local04, #3
0bd10     02 00 00 FF 
0bd14     38 64 86 F1 | 	sub	objptr, ##1080
0bd18     32 AD 02 F1 | 	add	local04, objptr
0bd1c     04 AC 06 F1 | 	add	local04, #4
0bd20     56 B9 02 FB | 	rdlong	local10, local04
0bd24     14 B8 0E F2 | 	cmp	local10, #20 wz
0bd28     36 00 00 FF 
0bd2c     2C 64 86 F1 | 	sub	objptr, ##27692
0bd30     34 00 90 AD |  if_e	jmp	#LR__0996
0bd34     38 00 00 FF 
0bd38     64 64 06 F1 | 	add	objptr, ##28772
0bd3c     32 B9 02 FB | 	rdlong	local10, objptr
0bd40     03 B8 66 F0 | 	shl	local10, #3
0bd44     02 00 00 FF 
0bd48     38 64 86 F1 | 	sub	objptr, ##1080
0bd4c     32 B9 02 F1 | 	add	local10, objptr
0bd50     04 B8 06 F1 | 	add	local10, #4
0bd54     5C B9 02 FB | 	rdlong	local10, local10
0bd58     FE B9 0E F2 | 	cmp	local10, #510 wz
0bd5c     36 00 00 FF 
0bd60     2C 64 86 F1 | 	sub	objptr, ##27692
0bd64     00 FF 9F 5D |  if_ne	jmp	#LR__0993
0bd68                 | LR__0996
0bd68                 | '     if lparts(ct).token=token_end then return 14
0bd68     38 00 00 FF 
0bd6c     64 64 06 F1 | 	add	objptr, ##28772
0bd70     32 AD 02 FB | 	rdlong	local04, objptr
0bd74     03 AC 66 F0 | 	shl	local04, #3
0bd78     02 00 00 FF 
0bd7c     38 64 86 F1 | 	sub	objptr, ##1080
0bd80     32 AD 02 F1 | 	add	local04, objptr
0bd84     04 AC 06 F1 | 	add	local04, #4
0bd88     56 B9 02 FB | 	rdlong	local10, local04
0bd8c     FE B9 0E F2 | 	cmp	local10, #510 wz
0bd90     36 00 00 FF 
0bd94     2C 64 86 F1 | 	sub	objptr, ##27692
0bd98     0E 7A 06 A6 |  if_e	mov	result1, #14
0bd9c     C4 00 90 AD |  if_e	jmp	#LR__0998
0bda0                 | LR__0997
0bda0     59 A9 02 F6 | 	mov	local02, local07
0bda4     12 AA 06 F6 | 	mov	local03, #18
0bda8     58 A7 02 F6 | 	mov	local01, local06
0bdac     53 B7 02 F6 | 	mov	local09, local01
0bdb0     54 BB 02 F6 | 	mov	local11, local02
0bdb4     55 A7 02 F6 | 	mov	local01, local03
0bdb8     4B 00 00 FF 
0bdbc     9C 64 06 F1 | 	add	objptr, ##38556
0bdc0     32 B9 02 FB | 	rdlong	local10, objptr
0bdc4     5C B3 02 F6 | 	mov	local07, local10
0bdc8     01 B2 66 F0 | 	shl	local07, #1
0bdcc     5C B3 02 F1 | 	add	local07, local10
0bdd0     02 B2 66 F0 | 	shl	local07, #2
0bdd4     03 00 00 FF 
0bdd8     00 64 86 F1 | 	sub	objptr, ##1536
0bddc     32 B3 02 F1 | 	add	local07, objptr
0bde0     59 B7 62 FC | 	wrlong	local09, local07
0bde4     03 00 00 FF 
0bde8     00 64 06 F1 | 	add	objptr, ##1536
0bdec     32 B9 02 FB | 	rdlong	local10, objptr
0bdf0     5C B7 02 F6 | 	mov	local09, local10
0bdf4     01 B6 66 F0 | 	shl	local09, #1
0bdf8     5C B7 02 F1 | 	add	local09, local10
0bdfc     02 B6 66 F0 | 	shl	local09, #2
0be00     03 00 00 FF 
0be04     00 64 86 F1 | 	sub	objptr, ##1536
0be08     32 B7 02 F1 | 	add	local09, objptr
0be0c     04 B6 06 F1 | 	add	local09, #4
0be10     5B BB 62 FC | 	wrlong	local11, local09
0be14     03 00 00 FF 
0be18     00 64 06 F1 | 	add	objptr, ##1536
0be1c     32 BB 02 FB | 	rdlong	local11, objptr
0be20     5D B9 02 F6 | 	mov	local10, local11
0be24     01 B8 66 F0 | 	shl	local10, #1
0be28     5D B9 02 F1 | 	add	local10, local11
0be2c     02 B8 66 F0 | 	shl	local10, #2
0be30     03 00 00 FF 
0be34     00 64 86 F1 | 	sub	objptr, ##1536
0be38     32 B9 02 F1 | 	add	local10, objptr
0be3c     08 B8 06 F1 | 	add	local10, #8
0be40     5C A7 62 FC | 	wrlong	local01, local10
0be44     03 00 00 FF 
0be48     00 64 06 F1 | 	add	objptr, ##1536
0be4c     32 B7 02 FB | 	rdlong	local09, objptr
0be50     01 B6 06 F1 | 	add	local09, #1
0be54     32 B7 62 FC | 	wrlong	local09, objptr
0be58     4B 00 00 FF 
0be5c     9C 64 86 F1 | 	sub	objptr, ##38556
0be60                 | ' t2.result.twowords(1)=numpar
0be60                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0be60                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0be60                 | ' return 0
0be60     00 7A 06 F6 | 	mov	result1, #0
0be64                 | LR__0998
0be64     E7 F0 03 F6 | 	mov	ptra, fp
0be68     F2 00 A0 FD | 	call	#popregs_
0be6c                 | _getaddr_ret
0be6c     2D 00 64 FD | 	ret
0be70                 | 
0be70                 | ' 
0be70                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0be70                 | ' '--------------------------------------------- 
0be70                 | ' 
0be70                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be70                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0be70                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be70                 | ' 
0be70                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be70                 | ' '
0be70                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0be70                 | ' '
0be70                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be70                 | ' 
0be70                 | ' function expr() as ulong 
0be70                 | _expr
0be70     07 CA 05 F6 | 	mov	COUNT_, #7
0be74     E8 00 A0 FD | 	call	#pushregs_
0be78                 | _expr_enter
0be78     38 00 00 FF 
0be7c     64 64 06 F1 | 	add	objptr, ##28772
0be80     32 AD 02 FB | 	rdlong	local04, objptr
0be84     03 AC 66 F0 | 	shl	local04, #3
0be88     02 00 00 FF 
0be8c     38 64 86 F1 | 	sub	objptr, ##1080
0be90     32 AD 02 F1 | 	add	local04, objptr
0be94     04 AC 06 F1 | 	add	local04, #4
0be98     56 AF 02 FB | 	rdlong	local05, local04
0be9c                 | ' 
0be9c                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0be9c     FE AF 0E F2 | 	cmp	local05, #510 wz
0bea0     36 00 00 FF 
0bea4     2C 64 86 F1 | 	sub	objptr, ##27692
0bea8     C4 00 90 5D |  if_ne	jmp	#LR__1000
0beac     1D A6 06 F6 | 	mov	local01, #29
0beb0     FF AA 06 F6 | 	mov	local03, #255
0beb4     53 B1 02 F6 | 	mov	local06, local01
0beb8     54 B3 02 F6 | 	mov	local07, local02
0bebc     55 A7 02 F6 | 	mov	local01, local03
0bec0     4B 00 00 FF 
0bec4     9C 64 06 F1 | 	add	objptr, ##38556
0bec8     32 AF 02 FB | 	rdlong	local05, objptr
0becc     57 AD 02 F6 | 	mov	local04, local05
0bed0     01 AC 66 F0 | 	shl	local04, #1
0bed4     57 AD 02 F1 | 	add	local04, local05
0bed8     02 AC 66 F0 | 	shl	local04, #2
0bedc     03 00 00 FF 
0bee0     00 64 86 F1 | 	sub	objptr, ##1536
0bee4     32 AD 02 F1 | 	add	local04, objptr
0bee8     56 B1 62 FC | 	wrlong	local06, local04
0beec     03 00 00 FF 
0bef0     00 64 06 F1 | 	add	objptr, ##1536
0bef4     32 B1 02 FB | 	rdlong	local06, objptr
0bef8     58 AF 02 F6 | 	mov	local05, local06
0befc     01 AE 66 F0 | 	shl	local05, #1
0bf00     58 AF 02 F1 | 	add	local05, local06
0bf04     02 AE 66 F0 | 	shl	local05, #2
0bf08     03 00 00 FF 
0bf0c     00 64 86 F1 | 	sub	objptr, ##1536
0bf10     32 AF 02 F1 | 	add	local05, objptr
0bf14     04 AE 06 F1 | 	add	local05, #4
0bf18     57 B3 62 FC | 	wrlong	local07, local05
0bf1c     03 00 00 FF 
0bf20     00 64 06 F1 | 	add	objptr, ##1536
0bf24     32 B3 02 FB | 	rdlong	local07, objptr
0bf28     59 B1 02 F6 | 	mov	local06, local07
0bf2c     01 B0 66 F0 | 	shl	local06, #1
0bf30     59 B1 02 F1 | 	add	local06, local07
0bf34     02 B0 66 F0 | 	shl	local06, #2
0bf38     03 00 00 FF 
0bf3c     00 64 86 F1 | 	sub	objptr, ##1536
0bf40     32 B1 02 F1 | 	add	local06, objptr
0bf44     08 B0 06 F1 | 	add	local06, #8
0bf48     58 A7 62 FC | 	wrlong	local01, local06
0bf4c     03 00 00 FF 
0bf50     00 64 06 F1 | 	add	objptr, ##1536
0bf54     32 B1 02 FB | 	rdlong	local06, objptr
0bf58     01 B0 06 F1 | 	add	local06, #1
0bf5c     32 B1 62 FC | 	wrlong	local06, objptr
0bf60     4B 00 00 FF 
0bf64     9C 64 86 F1 | 	sub	objptr, ##38556
0bf68     1D 7A 06 F6 | 	mov	result1, #29
0bf6c     64 01 90 FD | 	jmp	#LR__1003
0bf70                 | LR__1000
0bf70     00 A6 06 F6 | 	mov	local01, #0
0bf74     68 01 B0 FD | 	call	#_addsub
0bf78                 | ' t3.result.uresult=0
0bf78                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0bf78                 | ' if err>0 then return err
0bf78     01 7A 16 F2 | 	cmp	result1, #1 wc
0bf7c     54 01 90 3D |  if_ae	jmp	#LR__1003
0bf80     38 00 00 FF 
0bf84     64 64 06 F1 | 	add	objptr, ##28772
0bf88     32 AD 02 FB | 	rdlong	local04, objptr
0bf8c     03 AC 66 F0 | 	shl	local04, #3
0bf90     02 00 00 FF 
0bf94     38 64 86 F1 | 	sub	objptr, ##1080
0bf98     32 AD 02 F1 | 	add	local04, objptr
0bf9c     04 AC 06 F1 | 	add	local04, #4
0bfa0     56 AF 02 FB | 	rdlong	local05, local04
0bfa4                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0bfa4                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0bfa4     36 00 00 FF 
0bfa8     2C 64 86 F1 | 	sub	objptr, ##27692
0bfac                 | LR__1001
0bfac     1B AE 0E F2 | 	cmp	local05, #27 wz
0bfb0     0F AE 0E 52 |  if_ne	cmp	local05, #15 wz
0bfb4     10 AE 0E 52 |  if_ne	cmp	local05, #16 wz
0bfb8     27 AE 0E 52 |  if_ne	cmp	local05, #39 wz
0bfbc     26 AE 0E 52 |  if_ne	cmp	local05, #38 wz
0bfc0     2A AE 0E 52 |  if_ne	cmp	local05, #42 wz
0bfc4     08 01 90 5D |  if_ne	jmp	#LR__1002
0bfc8     38 00 00 FF 
0bfcc     64 64 06 F1 | 	add	objptr, ##28772
0bfd0     32 B1 02 FB | 	rdlong	local06, objptr
0bfd4     01 B0 06 F1 | 	add	local06, #1
0bfd8     32 B1 62 FC | 	wrlong	local06, objptr
0bfdc     38 00 00 FF 
0bfe0     64 64 86 F1 | 	sub	objptr, ##28772
0bfe4     F8 00 B0 FD | 	call	#_addsub
0bfe8                 | '   ct+=1
0bfe8                 | '   err=addsub() : if err>0 then return err
0bfe8     01 7A 16 F2 | 	cmp	result1, #1 wc
0bfec     E4 00 90 3D |  if_ae	jmp	#LR__1003
0bff0     57 AB 02 F6 | 	mov	local03, local05
0bff4     53 B1 02 F6 | 	mov	local06, local01
0bff8     54 B3 02 F6 | 	mov	local07, local02
0bffc     55 AF 02 F6 | 	mov	local05, local03
0c000     4B 00 00 FF 
0c004     9C 64 06 F1 | 	add	objptr, ##38556
0c008     32 AD 02 FB | 	rdlong	local04, objptr
0c00c     56 7B 02 F6 | 	mov	result1, local04
0c010     01 7A 66 F0 | 	shl	result1, #1
0c014     56 7B 02 F1 | 	add	result1, local04
0c018     02 7A 66 F0 | 	shl	result1, #2
0c01c     03 00 00 FF 
0c020     00 64 86 F1 | 	sub	objptr, ##1536
0c024     32 7B 02 F1 | 	add	result1, objptr
0c028     3D B1 62 FC | 	wrlong	local06, result1
0c02c     03 00 00 FF 
0c030     00 64 06 F1 | 	add	objptr, ##1536
0c034     32 B1 02 FB | 	rdlong	local06, objptr
0c038     58 AD 02 F6 | 	mov	local04, local06
0c03c     01 AC 66 F0 | 	shl	local04, #1
0c040     58 AD 02 F1 | 	add	local04, local06
0c044     02 AC 66 F0 | 	shl	local04, #2
0c048     03 00 00 FF 
0c04c     00 64 86 F1 | 	sub	objptr, ##1536
0c050     32 AD 02 F1 | 	add	local04, objptr
0c054     04 AC 06 F1 | 	add	local04, #4
0c058     56 B3 62 FC | 	wrlong	local07, local04
0c05c     03 00 00 FF 
0c060     00 64 06 F1 | 	add	objptr, ##1536
0c064     32 B3 02 FB | 	rdlong	local07, objptr
0c068     59 B1 02 F6 | 	mov	local06, local07
0c06c     01 B0 66 F0 | 	shl	local06, #1
0c070     59 B1 02 F1 | 	add	local06, local07
0c074     02 B0 66 F0 | 	shl	local06, #2
0c078     03 00 00 FF 
0c07c     00 64 86 F1 | 	sub	objptr, ##1536
0c080     32 B1 02 F1 | 	add	local06, objptr
0c084     08 B0 06 F1 | 	add	local06, #8
0c088     58 AF 62 FC | 	wrlong	local05, local06
0c08c     03 00 00 FF 
0c090     00 64 06 F1 | 	add	objptr, ##1536
0c094     32 B1 02 FB | 	rdlong	local06, objptr
0c098     01 B0 06 F1 | 	add	local06, #1
0c09c     32 B1 62 FC | 	wrlong	local06, objptr
0c0a0     13 00 00 FF 
0c0a4     38 64 86 F1 | 	sub	objptr, ##9784
0c0a8     32 AD 02 FB | 	rdlong	local04, objptr
0c0ac     03 AC 66 F0 | 	shl	local04, #3
0c0b0     02 00 00 FF 
0c0b4     38 64 86 F1 | 	sub	objptr, ##1080
0c0b8     32 AD 02 F1 | 	add	local04, objptr
0c0bc     04 AC 06 F1 | 	add	local04, #4
0c0c0     56 AF 02 FB | 	rdlong	local05, local04
0c0c4     36 00 00 FF 
0c0c8     2C 64 86 F1 | 	sub	objptr, ##27692
0c0cc     DC FE 9F FD | 	jmp	#LR__1001
0c0d0                 | LR__1002
0c0d0                 | ' return 0  
0c0d0     00 7A 06 F6 | 	mov	result1, #0
0c0d4                 | LR__1003
0c0d4     E7 F0 03 F6 | 	mov	ptra, fp
0c0d8     F2 00 A0 FD | 	call	#popregs_
0c0dc                 | _expr_ret
0c0dc     2D 00 64 FD | 	ret
0c0e0                 | 
0c0e0                 | ' 
0c0e0                 | ' ' Second level operators : add, sub, logic
0c0e0                 | ' 
0c0e0                 | ' function addsub() as ulong
0c0e0                 | _addsub
0c0e0     07 CA 05 F6 | 	mov	COUNT_, #7
0c0e4     E8 00 A0 FD | 	call	#pushregs_
0c0e8                 | _addsub_enter
0c0e8     00 A6 06 F6 | 	mov	local01, #0
0c0ec     60 01 B0 FD | 	call	#_muldiv
0c0f0                 | ' 
0c0f0                 | ' t3.result.uresult=0
0c0f0                 | ' err=muldiv() : if err>0 then return err           			 
0c0f0     01 7A 16 F2 | 	cmp	result1, #1 wc
0c0f4     4C 01 90 3D |  if_ae	jmp	#LR__1012
0c0f8     38 00 00 FF 
0c0fc     64 64 06 F1 | 	add	objptr, ##28772
0c100     32 AD 02 FB | 	rdlong	local04, objptr
0c104     03 AC 66 F0 | 	shl	local04, #3
0c108     02 00 00 FF 
0c10c     38 64 86 F1 | 	sub	objptr, ##1080
0c110     32 AD 02 F1 | 	add	local04, objptr
0c114     04 AC 06 F1 | 	add	local04, #4
0c118     56 AF 02 FB | 	rdlong	local05, local04
0c11c                 | ' op = lparts(ct).token				 
0c11c                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0c11c     36 00 00 FF 
0c120     2C 64 86 F1 | 	sub	objptr, ##27692
0c124                 | LR__1010
0c124     01 AE 0E F2 | 	cmp	local05, #1 wz
0c128     02 AE 0E 52 |  if_ne	cmp	local05, #2 wz
0c12c     07 AE 0E 52 |  if_ne	cmp	local05, #7 wz
0c130     03 AE 0E 52 |  if_ne	cmp	local05, #3 wz
0c134     08 01 90 5D |  if_ne	jmp	#LR__1011
0c138     38 00 00 FF 
0c13c     64 64 06 F1 | 	add	objptr, ##28772
0c140     32 AD 02 FB | 	rdlong	local04, objptr
0c144     01 AC 06 F1 | 	add	local04, #1
0c148     32 AD 62 FC | 	wrlong	local04, objptr
0c14c     38 00 00 FF 
0c150     64 64 86 F1 | 	sub	objptr, ##28772
0c154     F8 00 B0 FD | 	call	#_muldiv
0c158                 | '   ct+=1
0c158                 | '   err=muldiv() : if err>0 then return err   
0c158     01 7A 16 F2 | 	cmp	result1, #1 wc
0c15c     E4 00 90 3D |  if_ae	jmp	#LR__1012
0c160     57 AB 02 F6 | 	mov	local03, local05
0c164     53 B1 02 F6 | 	mov	local06, local01
0c168     54 B3 02 F6 | 	mov	local07, local02
0c16c     55 AF 02 F6 | 	mov	local05, local03
0c170     4B 00 00 FF 
0c174     9C 64 06 F1 | 	add	objptr, ##38556
0c178     32 AD 02 FB | 	rdlong	local04, objptr
0c17c     56 7B 02 F6 | 	mov	result1, local04
0c180     01 7A 66 F0 | 	shl	result1, #1
0c184     56 7B 02 F1 | 	add	result1, local04
0c188     02 7A 66 F0 | 	shl	result1, #2
0c18c     03 00 00 FF 
0c190     00 64 86 F1 | 	sub	objptr, ##1536
0c194     32 7B 02 F1 | 	add	result1, objptr
0c198     3D B1 62 FC | 	wrlong	local06, result1
0c19c     03 00 00 FF 
0c1a0     00 64 06 F1 | 	add	objptr, ##1536
0c1a4     32 B1 02 FB | 	rdlong	local06, objptr
0c1a8     58 AD 02 F6 | 	mov	local04, local06
0c1ac     01 AC 66 F0 | 	shl	local04, #1
0c1b0     58 AD 02 F1 | 	add	local04, local06
0c1b4     02 AC 66 F0 | 	shl	local04, #2
0c1b8     03 00 00 FF 
0c1bc     00 64 86 F1 | 	sub	objptr, ##1536
0c1c0     32 AD 02 F1 | 	add	local04, objptr
0c1c4     04 AC 06 F1 | 	add	local04, #4
0c1c8     56 B3 62 FC | 	wrlong	local07, local04
0c1cc     03 00 00 FF 
0c1d0     00 64 06 F1 | 	add	objptr, ##1536
0c1d4     32 B3 02 FB | 	rdlong	local07, objptr
0c1d8     59 B1 02 F6 | 	mov	local06, local07
0c1dc     01 B0 66 F0 | 	shl	local06, #1
0c1e0     59 B1 02 F1 | 	add	local06, local07
0c1e4     02 B0 66 F0 | 	shl	local06, #2
0c1e8     03 00 00 FF 
0c1ec     00 64 86 F1 | 	sub	objptr, ##1536
0c1f0     32 B1 02 F1 | 	add	local06, objptr
0c1f4     08 B0 06 F1 | 	add	local06, #8
0c1f8     58 AF 62 FC | 	wrlong	local05, local06
0c1fc     03 00 00 FF 
0c200     00 64 06 F1 | 	add	objptr, ##1536
0c204     32 B1 02 FB | 	rdlong	local06, objptr
0c208     01 B0 06 F1 | 	add	local06, #1
0c20c     32 B1 62 FC | 	wrlong	local06, objptr
0c210     13 00 00 FF 
0c214     38 64 86 F1 | 	sub	objptr, ##9784
0c218     32 AD 02 FB | 	rdlong	local04, objptr
0c21c     03 AC 66 F0 | 	shl	local04, #3
0c220     02 00 00 FF 
0c224     38 64 86 F1 | 	sub	objptr, ##1080
0c228     32 AD 02 F1 | 	add	local04, objptr
0c22c     04 AC 06 F1 | 	add	local04, #4
0c230     56 AF 02 FB | 	rdlong	local05, local04
0c234     36 00 00 FF 
0c238     2C 64 86 F1 | 	sub	objptr, ##27692
0c23c     E4 FE 9F FD | 	jmp	#LR__1010
0c240                 | LR__1011
0c240                 | ' return 0
0c240     00 7A 06 F6 | 	mov	result1, #0
0c244                 | LR__1012
0c244     E7 F0 03 F6 | 	mov	ptra, fp
0c248     F2 00 A0 FD | 	call	#popregs_
0c24c                 | _addsub_ret
0c24c     2D 00 64 FD | 	ret
0c250                 | 
0c250                 | ' 
0c250                 | ' ' Third level operators : mul,div,shift,power
0c250                 | ' 
0c250                 | ' function muldiv() as ulong
0c250                 | _muldiv
0c250     07 CA 05 F6 | 	mov	COUNT_, #7
0c254     E8 00 A0 FD | 	call	#pushregs_
0c258                 | _muldiv_enter
0c258     00 A6 06 F6 | 	mov	local01, #0
0c25c     6C 01 B0 FD | 	call	#_getvalue
0c260                 | ' 
0c260                 | ' t3.result.uresult=0
0c260                 | ' err=getvalue() : if err>0 then return err     
0c260     01 7A 16 F2 | 	cmp	result1, #1 wc
0c264     58 01 90 3D |  if_ae	jmp	#LR__1022
0c268     38 00 00 FF 
0c26c     64 64 06 F1 | 	add	objptr, ##28772
0c270     32 AD 02 FB | 	rdlong	local04, objptr
0c274     03 AC 66 F0 | 	shl	local04, #3
0c278     02 00 00 FF 
0c27c     38 64 86 F1 | 	sub	objptr, ##1080
0c280     32 AD 02 F1 | 	add	local04, objptr
0c284     04 AC 06 F1 | 	add	local04, #4
0c288     56 AF 02 FB | 	rdlong	local05, local04
0c28c                 | ' op = lparts(ct).token
0c28c                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c28c     36 00 00 FF 
0c290     2C 64 86 F1 | 	sub	objptr, ##27692
0c294                 | LR__1020
0c294     05 AE 0E F2 | 	cmp	local05, #5 wz
0c298     08 AE 0E 52 |  if_ne	cmp	local05, #8 wz
0c29c     06 AE 0E 52 |  if_ne	cmp	local05, #6 wz
0c2a0     09 AE 0E 52 |  if_ne	cmp	local05, #9 wz
0c2a4     0A AE 0E 52 |  if_ne	cmp	local05, #10 wz
0c2a8     0B AE 0E 52 |  if_ne	cmp	local05, #11 wz
0c2ac     0C AE 0E 52 |  if_ne	cmp	local05, #12 wz
0c2b0     08 01 90 5D |  if_ne	jmp	#LR__1021
0c2b4     38 00 00 FF 
0c2b8     64 64 06 F1 | 	add	objptr, ##28772
0c2bc     32 AD 02 FB | 	rdlong	local04, objptr
0c2c0     01 AC 06 F1 | 	add	local04, #1
0c2c4     32 AD 62 FC | 	wrlong	local04, objptr
0c2c8     38 00 00 FF 
0c2cc     64 64 86 F1 | 	sub	objptr, ##28772
0c2d0     F8 00 B0 FD | 	call	#_getvalue
0c2d4                 | '   ct+=1
0c2d4                 | '   err=getvalue() :if err>0 then return err   
0c2d4     01 7A 16 F2 | 	cmp	result1, #1 wc
0c2d8     E4 00 90 3D |  if_ae	jmp	#LR__1022
0c2dc     57 AB 02 F6 | 	mov	local03, local05
0c2e0     53 B1 02 F6 | 	mov	local06, local01
0c2e4     54 B3 02 F6 | 	mov	local07, local02
0c2e8     55 AF 02 F6 | 	mov	local05, local03
0c2ec     4B 00 00 FF 
0c2f0     9C 64 06 F1 | 	add	objptr, ##38556
0c2f4     32 AD 02 FB | 	rdlong	local04, objptr
0c2f8     56 7B 02 F6 | 	mov	result1, local04
0c2fc     01 7A 66 F0 | 	shl	result1, #1
0c300     56 7B 02 F1 | 	add	result1, local04
0c304     02 7A 66 F0 | 	shl	result1, #2
0c308     03 00 00 FF 
0c30c     00 64 86 F1 | 	sub	objptr, ##1536
0c310     32 7B 02 F1 | 	add	result1, objptr
0c314     3D B1 62 FC | 	wrlong	local06, result1
0c318     03 00 00 FF 
0c31c     00 64 06 F1 | 	add	objptr, ##1536
0c320     32 B1 02 FB | 	rdlong	local06, objptr
0c324     58 AD 02 F6 | 	mov	local04, local06
0c328     01 AC 66 F0 | 	shl	local04, #1
0c32c     58 AD 02 F1 | 	add	local04, local06
0c330     02 AC 66 F0 | 	shl	local04, #2
0c334     03 00 00 FF 
0c338     00 64 86 F1 | 	sub	objptr, ##1536
0c33c     32 AD 02 F1 | 	add	local04, objptr
0c340     04 AC 06 F1 | 	add	local04, #4
0c344     56 B3 62 FC | 	wrlong	local07, local04
0c348     03 00 00 FF 
0c34c     00 64 06 F1 | 	add	objptr, ##1536
0c350     32 B3 02 FB | 	rdlong	local07, objptr
0c354     59 B1 02 F6 | 	mov	local06, local07
0c358     01 B0 66 F0 | 	shl	local06, #1
0c35c     59 B1 02 F1 | 	add	local06, local07
0c360     02 B0 66 F0 | 	shl	local06, #2
0c364     03 00 00 FF 
0c368     00 64 86 F1 | 	sub	objptr, ##1536
0c36c     32 B1 02 F1 | 	add	local06, objptr
0c370     08 B0 06 F1 | 	add	local06, #8
0c374     58 AF 62 FC | 	wrlong	local05, local06
0c378     03 00 00 FF 
0c37c     00 64 06 F1 | 	add	objptr, ##1536
0c380     32 B1 02 FB | 	rdlong	local06, objptr
0c384     01 B0 06 F1 | 	add	local06, #1
0c388     32 B1 62 FC | 	wrlong	local06, objptr
0c38c     13 00 00 FF 
0c390     38 64 86 F1 | 	sub	objptr, ##9784
0c394     32 AD 02 FB | 	rdlong	local04, objptr
0c398     03 AC 66 F0 | 	shl	local04, #3
0c39c     02 00 00 FF 
0c3a0     38 64 86 F1 | 	sub	objptr, ##1080
0c3a4     32 AD 02 F1 | 	add	local04, objptr
0c3a8     04 AC 06 F1 | 	add	local04, #4
0c3ac     56 AF 02 FB | 	rdlong	local05, local04
0c3b0     36 00 00 FF 
0c3b4     2C 64 86 F1 | 	sub	objptr, ##27692
0c3b8     D8 FE 9F FD | 	jmp	#LR__1020
0c3bc                 | LR__1021
0c3bc                 | ' return 0
0c3bc     00 7A 06 F6 | 	mov	result1, #0
0c3c0                 | LR__1022
0c3c0     E7 F0 03 F6 | 	mov	ptra, fp
0c3c4     F2 00 A0 FD | 	call	#popregs_
0c3c8                 | _muldiv_ret
0c3c8     2D 00 64 FD | 	ret
0c3cc                 | 
0c3cc                 | ' 
0c3cc                 | ' ' Get a value for operations
0c3cc                 | ' 
0c3cc                 | ' function getvalue()  as ulong
0c3cc                 | _getvalue
0c3cc     0B CA 05 F6 | 	mov	COUNT_, #11
0c3d0     E8 00 A0 FD | 	call	#pushregs_
0c3d4                 | _getvalue_enter
0c3d4     01 AC 06 F6 | 	mov	local04, #1
0c3d8     00 A6 06 F6 | 	mov	local01, #0
0c3dc     1D AA 06 F6 | 	mov	local03, #29
0c3e0     38 00 00 FF 
0c3e4     64 64 06 F1 | 	add	objptr, ##28772
0c3e8     32 97 02 FB | 	rdlong	arg03, objptr
0c3ec     03 96 66 F0 | 	shl	arg03, #3
0c3f0     02 00 00 FF 
0c3f4     38 64 86 F1 | 	sub	objptr, ##1080
0c3f8     32 97 02 F1 | 	add	arg03, objptr
0c3fc     04 96 06 F1 | 	add	arg03, #4
0c400     4B AF 02 FB | 	rdlong	local05, arg03
0c404                 | ' 
0c404                 | ' m=1											' for negative numbers
0c404                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c404                 | ' op=lparts(ct).token
0c404                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c404     02 AE 0E F2 | 	cmp	local05, #2 wz
0c408     36 00 00 FF 
0c40c     2C 64 86 F1 | 	sub	objptr, ##27692
0c410     38 00 90 5D |  if_ne	jmp	#LR__1030
0c414     01 AC 66 F6 | 	neg	local04, #1
0c418     38 00 00 FF 
0c41c     64 64 06 F1 | 	add	objptr, ##28772
0c420     32 AF 02 FB | 	rdlong	local05, objptr
0c424     01 AE 06 F1 | 	add	local05, #1
0c428     32 AF 62 FC | 	wrlong	local05, objptr
0c42c     03 AE 66 F0 | 	shl	local05, #3
0c430     02 00 00 FF 
0c434     38 64 86 F1 | 	sub	objptr, ##1080
0c438     32 AF 02 F1 | 	add	local05, objptr
0c43c     04 AE 06 F1 | 	add	local05, #4
0c440     57 AF 02 FB | 	rdlong	local05, local05
0c444     36 00 00 FF 
0c448     2C 64 86 F1 | 	sub	objptr, ##27692
0c44c                 | LR__1030
0c44c                 | ' select case op
0c44c     01 00 00 FF 
0c450     00 AE 0E F2 | 	cmp	local05, ##512 wz
0c454     44 00 90 AD |  if_e	jmp	#LR__1031
0c458     01 00 00 FF 
0c45c     01 AE 0E F2 | 	cmp	local05, ##513 wz
0c460     90 01 90 AD |  if_e	jmp	#LR__1034
0c464     01 00 00 FF 
0c468     02 AE 0E F2 | 	cmp	local05, ##514 wz
0c46c     44 04 90 AD |  if_e	jmp	#LR__1041
0c470     01 00 00 FF 
0c474     03 AE 0E F2 | 	cmp	local05, ##515 wz
0c478     A8 05 90 AD |  if_e	jmp	#LR__1044
0c47c     2C AE 0E F2 | 	cmp	local05, #44 wz
0c480     78 07 90 AD |  if_e	jmp	#LR__1049
0c484     01 00 00 FF 
0c488     04 AE 0E F2 | 	cmp	local05, ##516 wz
0c48c     70 08 90 AD |  if_e	jmp	#LR__1050
0c490     15 AE 0E F2 | 	cmp	local05, #21 wz
0c494     98 08 90 AD |  if_e	jmp	#LR__1051
0c498     10 09 90 FD | 	jmp	#LR__1052
0c49c                 | LR__1031
0c49c                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c49c     01 AC 0E F2 | 	cmp	local04, #1 wz
0c4a0     3C 00 90 5D |  if_ne	jmp	#LR__1032
0c4a4     38 00 00 FF 
0c4a8     64 64 06 F1 | 	add	objptr, ##28772
0c4ac     32 AF 02 FB | 	rdlong	local05, objptr
0c4b0     03 AE 66 F0 | 	shl	local05, #3
0c4b4     02 00 00 FF 
0c4b8     38 64 86 F1 | 	sub	objptr, ##1080
0c4bc     32 AF 02 F1 | 	add	local05, objptr
0c4c0     57 93 02 FB | 	rdlong	arg01, local05
0c4c4     00 94 06 F6 | 	mov	arg02, #0
0c4c8     36 00 00 FF 
0c4cc     2C 64 86 F1 | 	sub	objptr, ##27692
0c4d0     38 B2 B1 FD | 	call	#__system____builtin_atoi
0c4d4     3D AD 02 FD | 	qmul	local04, result1
0c4d8     18 A6 62 FD | 	getqx	local01
0c4dc     1C AA 06 F6 | 	mov	local03, #28
0c4e0                 | LR__1032
0c4e0                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c4e0     FF FF 7F FF 
0c4e4     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0c4e8     3C 00 90 5D |  if_ne	jmp	#LR__1033
0c4ec     38 00 00 FF 
0c4f0     64 64 06 F1 | 	add	objptr, ##28772
0c4f4     32 AF 02 FB | 	rdlong	local05, objptr
0c4f8     03 AE 66 F0 | 	shl	local05, #3
0c4fc     02 00 00 FF 
0c500     38 64 86 F1 | 	sub	objptr, ##1080
0c504     32 AF 02 F1 | 	add	local05, objptr
0c508     57 93 02 FB | 	rdlong	arg01, local05
0c50c     00 94 06 F6 | 	mov	arg02, #0
0c510     36 00 00 FF 
0c514     2C 64 86 F1 | 	sub	objptr, ##27692
0c518     F0 B1 B1 FD | 	call	#__system____builtin_atoi
0c51c     3D AD 02 FD | 	qmul	local04, result1
0c520     18 A6 62 FD | 	getqx	local01
0c524     1C AA 06 F6 | 	mov	local03, #28
0c528                 | LR__1033
0c528     53 B1 02 F6 | 	mov	local06, local01
0c52c     54 B3 02 F6 | 	mov	local07, local02
0c530     55 AF 02 F6 | 	mov	local05, local03
0c534     4B 00 00 FF 
0c538     9C 64 06 F1 | 	add	objptr, ##38556
0c53c     32 A7 02 FB | 	rdlong	local01, objptr
0c540     53 AD 02 F6 | 	mov	local04, local01
0c544     01 AC 66 F0 | 	shl	local04, #1
0c548     53 AD 02 F1 | 	add	local04, local01
0c54c     02 AC 66 F0 | 	shl	local04, #2
0c550     03 00 00 FF 
0c554     00 64 86 F1 | 	sub	objptr, ##1536
0c558     32 AD 02 F1 | 	add	local04, objptr
0c55c     56 B1 62 FC | 	wrlong	local06, local04
0c560     03 00 00 FF 
0c564     00 64 06 F1 | 	add	objptr, ##1536
0c568     32 B1 02 FB | 	rdlong	local06, objptr
0c56c     58 A7 02 F6 | 	mov	local01, local06
0c570     01 A6 66 F0 | 	shl	local01, #1
0c574     58 A7 02 F1 | 	add	local01, local06
0c578     02 A6 66 F0 | 	shl	local01, #2
0c57c     03 00 00 FF 
0c580     00 64 86 F1 | 	sub	objptr, ##1536
0c584     32 A7 02 F1 | 	add	local01, objptr
0c588     04 A6 06 F1 | 	add	local01, #4
0c58c     53 B3 62 FC | 	wrlong	local07, local01
0c590     03 00 00 FF 
0c594     00 64 06 F1 | 	add	objptr, ##1536
0c598     32 B3 02 FB | 	rdlong	local07, objptr
0c59c     59 B1 02 F6 | 	mov	local06, local07
0c5a0     01 B0 66 F0 | 	shl	local06, #1
0c5a4     59 B1 02 F1 | 	add	local06, local07
0c5a8     02 B0 66 F0 | 	shl	local06, #2
0c5ac     03 00 00 FF 
0c5b0     00 64 86 F1 | 	sub	objptr, ##1536
0c5b4     32 B1 02 F1 | 	add	local06, objptr
0c5b8     08 B0 06 F1 | 	add	local06, #8
0c5bc     58 AF 62 FC | 	wrlong	local05, local06
0c5c0     03 00 00 FF 
0c5c4     00 64 06 F1 | 	add	objptr, ##1536
0c5c8     32 B1 02 FB | 	rdlong	local06, objptr
0c5cc     01 B0 06 F1 | 	add	local06, #1
0c5d0     32 B1 62 FC | 	wrlong	local06, objptr
0c5d4     13 00 00 FF 
0c5d8     38 64 86 F1 | 	sub	objptr, ##9784
0c5dc     32 B1 02 FB | 	rdlong	local06, objptr
0c5e0     01 B0 06 F1 | 	add	local06, #1
0c5e4     32 B1 62 FC | 	wrlong	local06, objptr
0c5e8     38 00 00 FF 
0c5ec     64 64 86 F1 | 	sub	objptr, ##28772
0c5f0     E4 07 90 FD | 	jmp	#LR__1053
0c5f4                 | LR__1034
0c5f4                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c5f4     38 00 00 FF 
0c5f8     64 64 06 F1 | 	add	objptr, ##28772
0c5fc     32 97 02 FB | 	rdlong	arg03, objptr
0c600     03 96 66 F0 | 	shl	arg03, #3
0c604     02 00 00 FF 
0c608     38 64 86 F1 | 	sub	objptr, ##1080
0c60c     32 97 02 F1 | 	add	arg03, objptr
0c610     4B 93 02 FB | 	rdlong	arg01, arg03
0c614     01 94 06 F6 | 	mov	arg02, #1
0c618     36 00 00 FF 
0c61c     2C 64 86 F1 | 	sub	objptr, ##27692
0c620     3C 9C B1 FD | 	call	#__system__Left_S
0c624     3D 93 02 F6 | 	mov	arg01, result1
0c628     96 01 00 FF 
0c62c     81 94 06 F6 | 	mov	arg02, ##@LR__5938
0c630     AC 83 B1 FD | 	call	#__system___string_cmp
0c634     00 7A 0E F2 | 	cmp	result1, #0 wz
0c638     94 00 90 5D |  if_ne	jmp	#LR__1037
0c63c     38 00 00 FF 
0c640     64 64 06 F1 | 	add	objptr, ##28772
0c644     32 B3 02 FB | 	rdlong	local07, objptr
0c648     59 B1 02 F6 | 	mov	local06, local07
0c64c     03 B0 66 F0 | 	shl	local06, #3
0c650     02 00 00 FF 
0c654     38 64 86 F1 | 	sub	objptr, ##1080
0c658     32 B1 02 F1 | 	add	local06, objptr
0c65c     96 01 00 FF 
0c660     83 AE 06 F6 | 	mov	local05, ##@LR__5939
0c664     03 B2 66 F0 | 	shl	local07, #3
0c668     32 B3 02 F1 | 	add	local07, objptr
0c66c     59 B3 02 FB | 	rdlong	local07, local07
0c670     02 00 00 FF 
0c674     38 64 06 F1 | 	add	objptr, ##1080
0c678     32 A7 02 FB | 	rdlong	local01, objptr
0c67c     03 A6 66 F0 | 	shl	local01, #3
0c680     02 00 00 FF 
0c684     38 64 86 F1 | 	sub	objptr, ##1080
0c688     32 A7 02 F1 | 	add	local01, objptr
0c68c     53 93 02 FB | 	rdlong	arg01, local01
0c690     36 00 00 FF 
0c694     2C 64 86 F1 | 	sub	objptr, ##27692
0c698     49 B5 02 F6 | 	mov	local08, arg01
0c69c     D7 06 48 FB | 	callpa	#(@LR__1036-@LR__1035)>>2,fcache_load_ptr_
0c6a0                 | LR__1035
0c6a0     5A 7B CA FA | 	rdbyte	result1, local08 wz
0c6a4     01 B4 06 51 |  if_ne	add	local08, #1
0c6a8     F4 FF 9F 5D |  if_ne	jmp	#LR__1035
0c6ac                 | LR__1036
0c6ac     49 B5 82 F1 | 	sub	local08, arg01
0c6b0     5A 95 02 F6 | 	mov	arg02, local08
0c6b4     01 94 86 F1 | 	sub	arg02, #1
0c6b8     59 93 02 F6 | 	mov	arg01, local07
0c6bc     28 9C B1 FD | 	call	#__system__Right_S
0c6c0     3D 95 02 F6 | 	mov	arg02, result1
0c6c4     57 93 02 F6 | 	mov	arg01, local05
0c6c8     48 83 B1 FD | 	call	#__system___string_concat
0c6cc     58 7B 62 FC | 	wrlong	result1, local06
0c6d0                 | LR__1037
0c6d0                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c6d0     38 00 00 FF 
0c6d4     64 64 06 F1 | 	add	objptr, ##28772
0c6d8     32 97 02 FB | 	rdlong	arg03, objptr
0c6dc     03 96 66 F0 | 	shl	arg03, #3
0c6e0     02 00 00 FF 
0c6e4     38 64 86 F1 | 	sub	objptr, ##1080
0c6e8     32 97 02 F1 | 	add	arg03, objptr
0c6ec     4B 93 02 FB | 	rdlong	arg01, arg03
0c6f0     01 94 06 F6 | 	mov	arg02, #1
0c6f4     36 00 00 FF 
0c6f8     2C 64 86 F1 | 	sub	objptr, ##27692
0c6fc     60 9B B1 FD | 	call	#__system__Left_S
0c700     3D 93 02 F6 | 	mov	arg01, result1
0c704     96 01 00 FF 
0c708     86 94 06 F6 | 	mov	arg02, ##@LR__5940
0c70c     D0 82 B1 FD | 	call	#__system___string_cmp
0c710     00 7A 0E F2 | 	cmp	result1, #0 wz
0c714     94 00 90 5D |  if_ne	jmp	#LR__1040
0c718     38 00 00 FF 
0c71c     64 64 06 F1 | 	add	objptr, ##28772
0c720     32 B3 02 FB | 	rdlong	local07, objptr
0c724     59 B1 02 F6 | 	mov	local06, local07
0c728     03 B0 66 F0 | 	shl	local06, #3
0c72c     02 00 00 FF 
0c730     38 64 86 F1 | 	sub	objptr, ##1080
0c734     32 B1 02 F1 | 	add	local06, objptr
0c738     96 01 00 FF 
0c73c     88 AE 06 F6 | 	mov	local05, ##@LR__5941
0c740     03 B2 66 F0 | 	shl	local07, #3
0c744     32 B3 02 F1 | 	add	local07, objptr
0c748     59 B3 02 FB | 	rdlong	local07, local07
0c74c     02 00 00 FF 
0c750     38 64 06 F1 | 	add	objptr, ##1080
0c754     32 A7 02 FB | 	rdlong	local01, objptr
0c758     03 A6 66 F0 | 	shl	local01, #3
0c75c     02 00 00 FF 
0c760     38 64 86 F1 | 	sub	objptr, ##1080
0c764     32 A7 02 F1 | 	add	local01, objptr
0c768     53 93 02 FB | 	rdlong	arg01, local01
0c76c     36 00 00 FF 
0c770     2C 64 86 F1 | 	sub	objptr, ##27692
0c774     49 B5 02 F6 | 	mov	local08, arg01
0c778     D7 06 48 FB | 	callpa	#(@LR__1039-@LR__1038)>>2,fcache_load_ptr_
0c77c                 | LR__1038
0c77c     5A 7B CA FA | 	rdbyte	result1, local08 wz
0c780     01 B4 06 51 |  if_ne	add	local08, #1
0c784     F4 FF 9F 5D |  if_ne	jmp	#LR__1038
0c788                 | LR__1039
0c788     49 B5 82 F1 | 	sub	local08, arg01
0c78c     5A 95 02 F6 | 	mov	arg02, local08
0c790     01 94 86 F1 | 	sub	arg02, #1
0c794     59 93 02 F6 | 	mov	arg01, local07
0c798     4C 9B B1 FD | 	call	#__system__Right_S
0c79c     3D 95 02 F6 | 	mov	arg02, result1
0c7a0     57 93 02 F6 | 	mov	arg01, local05
0c7a4     6C 82 B1 FD | 	call	#__system___string_concat
0c7a8     58 7B 62 FC | 	wrlong	result1, local06
0c7ac                 | LR__1040
0c7ac     38 00 00 FF 
0c7b0     64 64 06 F1 | 	add	objptr, ##28772
0c7b4     32 B1 02 FB | 	rdlong	local06, objptr
0c7b8     03 B0 66 F0 | 	shl	local06, #3
0c7bc     02 00 00 FF 
0c7c0     38 64 86 F1 | 	sub	objptr, ##1080
0c7c4     32 B1 02 F1 | 	add	local06, objptr
0c7c8     58 93 02 FB | 	rdlong	arg01, local06
0c7cc     00 94 06 F6 | 	mov	arg02, #0
0c7d0     36 00 00 FF 
0c7d4     2C 64 86 F1 | 	sub	objptr, ##27692
0c7d8     30 AF B1 FD | 	call	#__system____builtin_atoi
0c7dc     3D AD 02 FD | 	qmul	local04, result1
0c7e0     4B 00 00 FF 
0c7e4     9C 64 06 F1 | 	add	objptr, ##38556
0c7e8     32 B1 02 FB | 	rdlong	local06, objptr
0c7ec     58 B7 02 F6 | 	mov	local09, local06
0c7f0     01 B6 66 F0 | 	shl	local09, #1
0c7f4     58 B7 02 F1 | 	add	local09, local06
0c7f8     02 B6 66 F0 | 	shl	local09, #2
0c7fc     03 00 00 FF 
0c800     00 64 86 F1 | 	sub	objptr, ##1536
0c804     32 B7 02 F1 | 	add	local09, objptr
0c808     03 00 00 FF 
0c80c     00 64 06 F1 | 	add	objptr, ##1536
0c810     18 A6 62 FD | 	getqx	local01
0c814     1C AA 06 F6 | 	mov	local03, #28
0c818     53 B1 02 F6 | 	mov	local06, local01
0c81c     54 B3 02 F6 | 	mov	local07, local02
0c820     5B B1 62 FC | 	wrlong	local06, local09
0c824     55 B7 02 F6 | 	mov	local09, local03
0c828     32 B1 02 FB | 	rdlong	local06, objptr
0c82c     58 AF 02 F6 | 	mov	local05, local06
0c830     01 AE 66 F0 | 	shl	local05, #1
0c834     58 AF 02 F1 | 	add	local05, local06
0c838     02 AE 66 F0 | 	shl	local05, #2
0c83c     03 00 00 FF 
0c840     00 64 86 F1 | 	sub	objptr, ##1536
0c844     32 AF 02 F1 | 	add	local05, objptr
0c848     04 AE 06 F1 | 	add	local05, #4
0c84c     57 B3 62 FC | 	wrlong	local07, local05
0c850     03 00 00 FF 
0c854     00 64 06 F1 | 	add	objptr, ##1536
0c858     32 B3 02 FB | 	rdlong	local07, objptr
0c85c     59 B1 02 F6 | 	mov	local06, local07
0c860     01 B0 66 F0 | 	shl	local06, #1
0c864     59 B1 02 F1 | 	add	local06, local07
0c868     02 B0 66 F0 | 	shl	local06, #2
0c86c     03 00 00 FF 
0c870     00 64 86 F1 | 	sub	objptr, ##1536
0c874     32 B1 02 F1 | 	add	local06, objptr
0c878     08 B0 06 F1 | 	add	local06, #8
0c87c     58 B7 62 FC | 	wrlong	local09, local06
0c880     03 00 00 FF 
0c884     00 64 06 F1 | 	add	objptr, ##1536
0c888     32 B1 02 FB | 	rdlong	local06, objptr
0c88c     01 B0 06 F1 | 	add	local06, #1
0c890     32 B1 62 FC | 	wrlong	local06, objptr
0c894     13 00 00 FF 
0c898     38 64 86 F1 | 	sub	objptr, ##9784
0c89c     32 B1 02 FB | 	rdlong	local06, objptr
0c8a0     01 B0 06 F1 | 	add	local06, #1
0c8a4     32 B1 62 FC | 	wrlong	local06, objptr
0c8a8     38 00 00 FF 
0c8ac     64 64 86 F1 | 	sub	objptr, ##28772
0c8b0     24 05 90 FD | 	jmp	#LR__1053
0c8b4                 | LR__1041
0c8b4                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0c8b4     01 AC 0E F2 | 	cmp	local04, #1 wz
0c8b8     48 00 90 5D |  if_ne	jmp	#LR__1042
0c8bc     00 C0 1F FF 
0c8c0     00 B0 06 F6 | 	mov	local06, ##1065353216
0c8c4     38 00 00 FF 
0c8c8     64 64 06 F1 | 	add	objptr, ##28772
0c8cc     32 B7 02 FB | 	rdlong	local09, objptr
0c8d0     03 B6 66 F0 | 	shl	local09, #3
0c8d4     02 00 00 FF 
0c8d8     38 64 86 F1 | 	sub	objptr, ##1080
0c8dc     32 B7 02 F1 | 	add	local09, objptr
0c8e0     5B 93 02 FB | 	rdlong	arg01, local09
0c8e4     36 00 00 FF 
0c8e8     2C 64 86 F1 | 	sub	objptr, ##27692
0c8ec     B4 AF B1 FD | 	call	#__system____builtin_atof
0c8f0     3D 95 02 F6 | 	mov	arg02, result1
0c8f4     58 93 02 F6 | 	mov	arg01, local06
0c8f8     8C A7 B1 FD | 	call	#__system___float_mul
0c8fc     3D A7 02 F6 | 	mov	local01, result1
0c900     1E AA 06 F6 | 	mov	local03, #30
0c904                 | LR__1042
0c904                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0c904     FF FF 7F FF 
0c908     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0c90c     48 00 90 5D |  if_ne	jmp	#LR__1043
0c910     00 C0 5F FF 
0c914     00 B0 06 F6 | 	mov	local06, ##-1082130432
0c918     38 00 00 FF 
0c91c     64 64 06 F1 | 	add	objptr, ##28772
0c920     32 B7 02 FB | 	rdlong	local09, objptr
0c924     03 B6 66 F0 | 	shl	local09, #3
0c928     02 00 00 FF 
0c92c     38 64 86 F1 | 	sub	objptr, ##1080
0c930     32 B7 02 F1 | 	add	local09, objptr
0c934     5B 93 02 FB | 	rdlong	arg01, local09
0c938     36 00 00 FF 
0c93c     2C 64 86 F1 | 	sub	objptr, ##27692
0c940     60 AF B1 FD | 	call	#__system____builtin_atof
0c944     3D 95 02 F6 | 	mov	arg02, result1
0c948     58 93 02 F6 | 	mov	arg01, local06
0c94c     38 A7 B1 FD | 	call	#__system___float_mul
0c950     3D A7 02 F6 | 	mov	local01, result1
0c954     1E AA 06 F6 | 	mov	local03, #30
0c958                 | LR__1043
0c958     53 B1 02 F6 | 	mov	local06, local01
0c95c     54 B3 02 F6 | 	mov	local07, local02
0c960     55 AF 02 F6 | 	mov	local05, local03
0c964     4B 00 00 FF 
0c968     9C 64 06 F1 | 	add	objptr, ##38556
0c96c     32 A7 02 FB | 	rdlong	local01, objptr
0c970     53 B7 02 F6 | 	mov	local09, local01
0c974     01 B6 66 F0 | 	shl	local09, #1
0c978     53 B7 02 F1 | 	add	local09, local01
0c97c     02 B6 66 F0 | 	shl	local09, #2
0c980     03 00 00 FF 
0c984     00 64 86 F1 | 	sub	objptr, ##1536
0c988     32 B7 02 F1 | 	add	local09, objptr
0c98c     5B B1 62 FC | 	wrlong	local06, local09
0c990     03 00 00 FF 
0c994     00 64 06 F1 | 	add	objptr, ##1536
0c998     32 B7 02 FB | 	rdlong	local09, objptr
0c99c     5B B1 02 F6 | 	mov	local06, local09
0c9a0     01 B0 66 F0 | 	shl	local06, #1
0c9a4     5B B1 02 F1 | 	add	local06, local09
0c9a8     02 B0 66 F0 | 	shl	local06, #2
0c9ac     03 00 00 FF 
0c9b0     00 64 86 F1 | 	sub	objptr, ##1536
0c9b4     32 B1 02 F1 | 	add	local06, objptr
0c9b8     04 B0 06 F1 | 	add	local06, #4
0c9bc     58 B3 62 FC | 	wrlong	local07, local06
0c9c0     03 00 00 FF 
0c9c4     00 64 06 F1 | 	add	objptr, ##1536
0c9c8     32 B7 02 FB | 	rdlong	local09, objptr
0c9cc     5B B3 02 F6 | 	mov	local07, local09
0c9d0     01 B2 66 F0 | 	shl	local07, #1
0c9d4     5B B3 02 F1 | 	add	local07, local09
0c9d8     02 B2 66 F0 | 	shl	local07, #2
0c9dc     03 00 00 FF 
0c9e0     00 64 86 F1 | 	sub	objptr, ##1536
0c9e4     32 B3 02 F1 | 	add	local07, objptr
0c9e8     08 B2 06 F1 | 	add	local07, #8
0c9ec     59 AF 62 FC | 	wrlong	local05, local07
0c9f0     03 00 00 FF 
0c9f4     00 64 06 F1 | 	add	objptr, ##1536
0c9f8     32 B1 02 FB | 	rdlong	local06, objptr
0c9fc     01 B0 06 F1 | 	add	local06, #1
0ca00     32 B1 62 FC | 	wrlong	local06, objptr
0ca04     13 00 00 FF 
0ca08     38 64 86 F1 | 	sub	objptr, ##9784
0ca0c     32 B1 02 FB | 	rdlong	local06, objptr
0ca10     01 B0 06 F1 | 	add	local06, #1
0ca14     32 B1 62 FC | 	wrlong	local06, objptr
0ca18     38 00 00 FF 
0ca1c     64 64 86 F1 | 	sub	objptr, ##28772
0ca20     B4 03 90 FD | 	jmp	#LR__1053
0ca24                 | LR__1044
0ca24     38 00 00 FF 
0ca28     64 64 06 F1 | 	add	objptr, ##28772
0ca2c     32 97 02 FB | 	rdlong	arg03, objptr
0ca30     03 96 66 F0 | 	shl	arg03, #3
0ca34     02 00 00 FF 
0ca38     38 64 86 F1 | 	sub	objptr, ##1080
0ca3c     32 97 02 F1 | 	add	arg03, objptr
0ca40     4B 93 02 FB | 	rdlong	arg01, arg03
0ca44     36 00 00 FF 
0ca48     2C 64 86 F1 | 	sub	objptr, ##27692
0ca4c     49 B5 02 F6 | 	mov	local08, arg01
0ca50     D7 06 48 FB | 	callpa	#(@LR__1046-@LR__1045)>>2,fcache_load_ptr_
0ca54                 | LR__1045
0ca54     5A 7B CA FA | 	rdbyte	result1, local08 wz
0ca58     01 B4 06 51 |  if_ne	add	local08, #1
0ca5c     F4 FF 9F 5D |  if_ne	jmp	#LR__1045
0ca60                 | LR__1046
0ca60     49 B5 82 F1 | 	sub	local08, arg01
0ca64     5A 7B 02 F6 | 	mov	result1, local08
0ca68     53 00 00 FF 
0ca6c     48 65 06 F1 | 	add	objptr, ##42824
0ca70     32 7B 62 FC | 	wrlong	result1, objptr
0ca74     58 64 86 F1 | 	sub	objptr, #88
0ca78     32 93 02 FB | 	rdlong	arg01, objptr
0ca7c     3D 93 82 F1 | 	sub	arg01, result1
0ca80     04 92 86 F1 | 	sub	arg01, #4
0ca84     03 92 26 F5 | 	andn	arg01, #3
0ca88     32 93 62 FC | 	wrlong	arg01, objptr
0ca8c     58 64 06 F1 | 	add	objptr, #88
0ca90     32 95 02 FB | 	rdlong	arg02, objptr
0ca94     53 00 00 FF 
0ca98     48 65 86 F1 | 	sub	objptr, ##42824
0ca9c     38 47 B1 FD | 	call	#_pslpoke
0caa0                 | '     pslpoke memtop,l
0caa0                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0caa0     01 B8 06 F6 | 	mov	local10, #1
0caa4     53 00 00 FF 
0caa8     48 65 06 F1 | 	add	objptr, ##42824
0caac     32 BB 02 FB | 	rdlong	local11, objptr
0cab0     53 00 00 FF 
0cab4     48 65 86 F1 | 	sub	objptr, ##42824
0cab8     01 BA 06 F1 | 	add	local11, #1
0cabc                 | LR__1047
0cabc     5D B9 52 F2 | 	cmps	local10, local11 wc
0cac0     5C 00 90 3D |  if_ae	jmp	#LR__1048
0cac4     53 00 00 FF 
0cac8     F0 64 06 F1 | 	add	objptr, ##42736
0cacc     32 B3 02 FB | 	rdlong	local07, objptr
0cad0     03 B2 06 F1 | 	add	local07, #3
0cad4     5C B3 02 F1 | 	add	local07, local10
0cad8     1B 00 00 FF 
0cadc     8C 64 86 F1 | 	sub	objptr, ##13964
0cae0     32 B7 02 FB | 	rdlong	local09, objptr
0cae4     03 B6 66 F0 | 	shl	local09, #3
0cae8     02 00 00 FF 
0caec     38 64 86 F1 | 	sub	objptr, ##1080
0caf0     32 B7 02 F1 | 	add	local09, objptr
0caf4     5B 93 02 FB | 	rdlong	arg01, local09
0caf8     5C 95 02 F6 | 	mov	arg02, local10
0cafc     01 96 06 F6 | 	mov	arg03, #1
0cb00     36 00 00 FF 
0cb04     2C 64 86 F1 | 	sub	objptr, ##27692
0cb08     6C 98 B1 FD | 	call	#__system__Mid_S
0cb0c     3D 95 C2 FA | 	rdbyte	arg02, result1
0cb10     59 93 02 F6 | 	mov	arg01, local07
0cb14     50 47 B1 FD | 	call	#_pspoke
0cb18     01 B8 06 F1 | 	add	local10, #1
0cb1c     9C FF 9F FD | 	jmp	#LR__1047
0cb20                 | LR__1048
0cb20     53 00 00 FF 
0cb24     F0 64 06 F1 | 	add	objptr, ##42736
0cb28     32 A7 02 FB | 	rdlong	local01, objptr
0cb2c     2B AA 06 F6 | 	mov	local03, #43
0cb30     53 B1 02 F6 | 	mov	local06, local01
0cb34     54 B3 02 F6 | 	mov	local07, local02
0cb38     55 BB 02 F6 | 	mov	local11, local03
0cb3c     08 00 00 FF 
0cb40     54 64 86 F1 | 	sub	objptr, ##4180
0cb44     32 B9 02 FB | 	rdlong	local10, objptr
0cb48     5C B7 02 F6 | 	mov	local09, local10
0cb4c     01 B6 66 F0 | 	shl	local09, #1
0cb50     5C B7 02 F1 | 	add	local09, local10
0cb54     02 B6 66 F0 | 	shl	local09, #2
0cb58     03 00 00 FF 
0cb5c     00 64 86 F1 | 	sub	objptr, ##1536
0cb60     32 B7 02 F1 | 	add	local09, objptr
0cb64     5B B1 62 FC | 	wrlong	local06, local09
0cb68     03 00 00 FF 
0cb6c     00 64 06 F1 | 	add	objptr, ##1536
0cb70     32 B9 02 FB | 	rdlong	local10, objptr
0cb74     5C B7 02 F6 | 	mov	local09, local10
0cb78     01 B6 66 F0 | 	shl	local09, #1
0cb7c     5C B7 02 F1 | 	add	local09, local10
0cb80     02 B6 66 F0 | 	shl	local09, #2
0cb84     03 00 00 FF 
0cb88     00 64 86 F1 | 	sub	objptr, ##1536
0cb8c     32 B7 02 F1 | 	add	local09, objptr
0cb90     04 B6 06 F1 | 	add	local09, #4
0cb94     5B B3 62 FC | 	wrlong	local07, local09
0cb98     03 00 00 FF 
0cb9c     00 64 06 F1 | 	add	objptr, ##1536
0cba0     32 B9 02 FB | 	rdlong	local10, objptr
0cba4     5C B7 02 F6 | 	mov	local09, local10
0cba8     01 B6 66 F0 | 	shl	local09, #1
0cbac     5C B7 02 F1 | 	add	local09, local10
0cbb0     02 B6 66 F0 | 	shl	local09, #2
0cbb4     03 00 00 FF 
0cbb8     00 64 86 F1 | 	sub	objptr, ##1536
0cbbc     32 B7 02 F1 | 	add	local09, objptr
0cbc0     08 B6 06 F1 | 	add	local09, #8
0cbc4     5B BB 62 FC | 	wrlong	local11, local09
0cbc8     03 00 00 FF 
0cbcc     00 64 06 F1 | 	add	objptr, ##1536
0cbd0     32 B1 02 FB | 	rdlong	local06, objptr
0cbd4     01 B0 06 F1 | 	add	local06, #1
0cbd8     32 B1 62 FC | 	wrlong	local06, objptr
0cbdc     13 00 00 FF 
0cbe0     38 64 86 F1 | 	sub	objptr, ##9784
0cbe4     32 B1 02 FB | 	rdlong	local06, objptr
0cbe8     01 B0 06 F1 | 	add	local06, #1
0cbec     32 B1 62 FC | 	wrlong	local06, objptr
0cbf0     38 00 00 FF 
0cbf4     64 64 86 F1 | 	sub	objptr, ##28772
0cbf8     DC 01 90 FD | 	jmp	#LR__1053
0cbfc                 | LR__1049
0cbfc     2C AA 06 F6 | 	mov	local03, #44
0cc00     38 00 00 FF 
0cc04     64 64 06 F1 | 	add	objptr, ##28772
0cc08     32 B1 02 FB | 	rdlong	local06, objptr
0cc0c     03 B0 66 F0 | 	shl	local06, #3
0cc10     02 00 00 FF 
0cc14     38 64 86 F1 | 	sub	objptr, ##1080
0cc18     32 B1 02 F1 | 	add	local06, objptr
0cc1c     58 93 02 FB | 	rdlong	arg01, local06
0cc20     00 94 06 F6 | 	mov	arg02, #0
0cc24     36 00 00 FF 
0cc28     2C 64 86 F1 | 	sub	objptr, ##27692
0cc2c     DC AA B1 FD | 	call	#__system____builtin_atoi
0cc30     3D A7 02 F6 | 	mov	local01, result1
0cc34     53 B1 02 F6 | 	mov	local06, local01
0cc38     54 B3 02 F6 | 	mov	local07, local02
0cc3c     55 BB 02 F6 | 	mov	local11, local03
0cc40     4B 00 00 FF 
0cc44     9C 64 06 F1 | 	add	objptr, ##38556
0cc48     32 B9 02 FB | 	rdlong	local10, objptr
0cc4c     5C B7 02 F6 | 	mov	local09, local10
0cc50     01 B6 66 F0 | 	shl	local09, #1
0cc54     5C B7 02 F1 | 	add	local09, local10
0cc58     02 B6 66 F0 | 	shl	local09, #2
0cc5c     03 00 00 FF 
0cc60     00 64 86 F1 | 	sub	objptr, ##1536
0cc64     32 B7 02 F1 | 	add	local09, objptr
0cc68     5B B1 62 FC | 	wrlong	local06, local09
0cc6c     03 00 00 FF 
0cc70     00 64 06 F1 | 	add	objptr, ##1536
0cc74     32 B9 02 FB | 	rdlong	local10, objptr
0cc78     5C B7 02 F6 | 	mov	local09, local10
0cc7c     01 B6 66 F0 | 	shl	local09, #1
0cc80     5C B7 02 F1 | 	add	local09, local10
0cc84     02 B6 66 F0 | 	shl	local09, #2
0cc88     03 00 00 FF 
0cc8c     00 64 86 F1 | 	sub	objptr, ##1536
0cc90     32 B7 02 F1 | 	add	local09, objptr
0cc94     04 B6 06 F1 | 	add	local09, #4
0cc98     5B B3 62 FC | 	wrlong	local07, local09
0cc9c     03 00 00 FF 
0cca0     00 64 06 F1 | 	add	objptr, ##1536
0cca4     32 B9 02 FB | 	rdlong	local10, objptr
0cca8     5C B7 02 F6 | 	mov	local09, local10
0ccac     01 B6 66 F0 | 	shl	local09, #1
0ccb0     5C B7 02 F1 | 	add	local09, local10
0ccb4     02 B6 66 F0 | 	shl	local09, #2
0ccb8     03 00 00 FF 
0ccbc     00 64 86 F1 | 	sub	objptr, ##1536
0ccc0     32 B7 02 F1 | 	add	local09, objptr
0ccc4     08 B6 06 F1 | 	add	local09, #8
0ccc8     5B BB 62 FC | 	wrlong	local11, local09
0cccc     03 00 00 FF 
0ccd0     00 64 06 F1 | 	add	objptr, ##1536
0ccd4     32 B1 02 FB | 	rdlong	local06, objptr
0ccd8     01 B0 06 F1 | 	add	local06, #1
0ccdc     32 B1 62 FC | 	wrlong	local06, objptr
0cce0     13 00 00 FF 
0cce4     38 64 86 F1 | 	sub	objptr, ##9784
0cce8     32 B1 02 FB | 	rdlong	local06, objptr
0ccec     01 B0 06 F1 | 	add	local06, #1
0ccf0     32 B1 62 FC | 	wrlong	local06, objptr
0ccf4     38 00 00 FF 
0ccf8     64 64 86 F1 | 	sub	objptr, ##28772
0ccfc     D8 00 90 FD | 	jmp	#LR__1053
0cd00                 | LR__1050
0cd00     56 93 02 F6 | 	mov	arg01, local04
0cd04     24 04 B0 FD | 	call	#_getvar
0cd08     38 00 00 FF 
0cd0c     64 64 06 F1 | 	add	objptr, ##28772
0cd10     32 B1 02 FB | 	rdlong	local06, objptr
0cd14     01 B0 06 F1 | 	add	local06, #1
0cd18     32 B1 62 FC | 	wrlong	local06, objptr
0cd1c     38 00 00 FF 
0cd20     64 64 86 F1 | 	sub	objptr, ##28772
0cd24                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0cd24     01 7A 56 F2 | 	cmps	result1, #1 wc
0cd28     B0 00 90 3D |  if_ae	jmp	#LR__1054
0cd2c     A8 00 90 FD | 	jmp	#LR__1053
0cd30                 | LR__1051
0cd30     38 00 00 FF 
0cd34     64 64 06 F1 | 	add	objptr, ##28772
0cd38     32 B1 02 FB | 	rdlong	local06, objptr
0cd3c     01 B0 06 F1 | 	add	local06, #1
0cd40     32 B1 62 FC | 	wrlong	local06, objptr
0cd44     38 00 00 FF 
0cd48     64 64 86 F1 | 	sub	objptr, ##28772
0cd4c     20 F1 BF FD | 	call	#_expr
0cd50                 | '     ct+=1
0cd50                 | '     err=expr() : if err>0 then return err 
0cd50     01 7A 56 F2 | 	cmps	result1, #1 wc
0cd54     84 00 90 3D |  if_ae	jmp	#LR__1054
0cd58                 | '     if lparts(ct).token=token_rpar then ct+=1
0cd58     38 00 00 FF 
0cd5c     64 64 06 F1 | 	add	objptr, ##28772
0cd60     32 BB 02 FB | 	rdlong	local11, objptr
0cd64     03 BA 66 F0 | 	shl	local11, #3
0cd68     02 00 00 FF 
0cd6c     38 64 86 F1 | 	sub	objptr, ##1080
0cd70     32 BB 02 F1 | 	add	local11, objptr
0cd74     04 BA 06 F1 | 	add	local11, #4
0cd78     5D BB 02 FB | 	rdlong	local11, local11
0cd7c     14 BA 0E F2 | 	cmp	local11, #20 wz
0cd80     36 00 00 FF 
0cd84     2C 64 86 F1 | 	sub	objptr, ##27692
0cd88     4C 00 90 5D |  if_ne	jmp	#LR__1053
0cd8c     38 00 00 FF 
0cd90     64 64 06 F1 | 	add	objptr, ##28772
0cd94     32 B1 02 FB | 	rdlong	local06, objptr
0cd98     01 B0 06 F1 | 	add	local06, #1
0cd9c     32 B1 62 FC | 	wrlong	local06, objptr
0cda0     38 00 00 FF 
0cda4     64 64 86 F1 | 	sub	objptr, ##28772
0cda8     2C 00 90 FD | 	jmp	#LR__1053
0cdac                 | LR__1052
0cdac     56 93 02 F6 | 	mov	arg01, local04
0cdb0     34 00 B0 FD | 	call	#_getfun
0cdb4     38 00 00 FF 
0cdb8     64 64 06 F1 | 	add	objptr, ##28772
0cdbc     32 B1 02 FB | 	rdlong	local06, objptr
0cdc0     01 B0 06 F1 | 	add	local06, #1
0cdc4     32 B1 62 FC | 	wrlong	local06, objptr
0cdc8     38 00 00 FF 
0cdcc     64 64 86 F1 | 	sub	objptr, ##28772
0cdd0                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0cdd0     01 7A 56 F2 | 	cmps	result1, #1 wc
0cdd4     04 00 90 3D |  if_ae	jmp	#LR__1054
0cdd8                 | LR__1053
0cdd8                 | ' return 0  
0cdd8     00 7A 06 F6 | 	mov	result1, #0
0cddc                 | LR__1054
0cddc     E7 F0 03 F6 | 	mov	ptra, fp
0cde0     F2 00 A0 FD | 	call	#popregs_
0cde4                 | _getvalue_ret
0cde4     2D 00 64 FD | 	ret
0cde8                 | 
0cde8                 | ' 
0cde8                 | ' ' Get a function result 
0cde8                 | ' 
0cde8                 | ' function getfun(m as integer) as ulong
0cde8                 | _getfun
0cde8     0F CA 05 F6 | 	mov	COUNT_, #15
0cdec     E8 00 A0 FD | 	call	#pushregs_
0cdf0                 | _getfun_enter
0cdf0     49 AD 02 F6 | 	mov	local04, arg01
0cdf4     38 00 00 FF 
0cdf8     64 64 06 F1 | 	add	objptr, ##28772
0cdfc     32 AF 02 FB | 	rdlong	local05, objptr
0ce00     57 B1 02 F6 | 	mov	local06, local05
0ce04     00 B2 06 F6 | 	mov	local07, #0
0ce08                 | ' oldct=ct
0ce08                 | ' numpar=0
0ce08                 | ' if lparts(ct+1).token=token_lpar then
0ce08     01 AE 06 F1 | 	add	local05, #1
0ce0c     03 AE 66 F0 | 	shl	local05, #3
0ce10     02 00 00 FF 
0ce14     38 64 86 F1 | 	sub	objptr, ##1080
0ce18     32 AF 02 F1 | 	add	local05, objptr
0ce1c     04 AE 06 F1 | 	add	local05, #4
0ce20     57 AF 02 FB | 	rdlong	local05, local05
0ce24     15 AE 0E F2 | 	cmp	local05, #21 wz
0ce28     36 00 00 FF 
0ce2c     2C 64 86 F1 | 	sub	objptr, ##27692
0ce30     54 01 90 5D |  if_ne	jmp	#LR__1064
0ce34     38 00 00 FF 
0ce38     64 64 06 F1 | 	add	objptr, ##28772
0ce3c     32 B5 02 FB | 	rdlong	local08, objptr
0ce40     01 B4 06 F1 | 	add	local08, #1
0ce44     32 B5 62 FC | 	wrlong	local08, objptr
0ce48     38 00 00 FF 
0ce4c     64 64 86 F1 | 	sub	objptr, ##28772
0ce50                 | '   ct+=1 											' omit this lpar, this is for expr list
0ce50                 | '   do
0ce50                 | LR__1060
0ce50     38 00 00 FF 
0ce54     64 64 06 F1 | 	add	objptr, ##28772
0ce58     32 AF 02 FB | 	rdlong	local05, objptr
0ce5c     01 AE 06 F1 | 	add	local05, #1
0ce60     32 AF 62 FC | 	wrlong	local05, objptr
0ce64                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0ce64                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0ce64     03 AE 66 F0 | 	shl	local05, #3
0ce68     02 00 00 FF 
0ce6c     38 64 86 F1 | 	sub	objptr, ##1080
0ce70     32 AF 02 F1 | 	add	local05, objptr
0ce74     04 AE 06 F1 | 	add	local05, #4
0ce78     57 B5 02 FB | 	rdlong	local08, local05
0ce7c     15 B4 0E F2 | 	cmp	local08, #21 wz
0ce80     36 00 00 FF 
0ce84     2C 64 86 F1 | 	sub	objptr, ##27692
0ce88     44 00 90 5D |  if_ne	jmp	#LR__1061
0ce8c     38 00 00 FF 
0ce90     64 64 06 F1 | 	add	objptr, ##28772
0ce94     32 B5 02 FB | 	rdlong	local08, objptr
0ce98     01 B4 06 F1 | 	add	local08, #1
0ce9c     32 B5 62 FC | 	wrlong	local08, objptr
0cea0     38 00 00 FF 
0cea4     64 64 86 F1 | 	sub	objptr, ##28772
0cea8     C4 EF BF FD | 	call	#_expr
0ceac     3D B7 02 F6 | 	mov	local09, result1
0ceb0     38 00 00 FF 
0ceb4     64 64 06 F1 | 	add	objptr, ##28772
0ceb8     32 B5 02 FB | 	rdlong	local08, objptr
0cebc     01 B4 06 F1 | 	add	local08, #1
0cec0     32 B5 62 FC | 	wrlong	local08, objptr
0cec4     38 00 00 FF 
0cec8     64 64 86 F1 | 	sub	objptr, ##28772
0cecc     08 00 90 FD | 	jmp	#LR__1062
0ced0                 | LR__1061
0ced0     9C EF BF FD | 	call	#_expr
0ced4     3D B7 02 F6 | 	mov	local09, result1
0ced8                 | LR__1062
0ced8                 | '     if err>0 then return err
0ced8     01 B6 16 F2 | 	cmp	local09, #1 wc
0cedc     5B 7B 02 36 |  if_ae	mov	result1, local09
0cee0     3C 02 90 3D |  if_ae	jmp	#LR__1066
0cee4     01 B2 06 F1 | 	add	local07, #1
0cee8     38 00 00 FF 
0ceec     64 64 06 F1 | 	add	objptr, ##28772
0cef0     32 AF 02 FB | 	rdlong	local05, objptr
0cef4     03 AE 66 F0 | 	shl	local05, #3
0cef8     02 00 00 FF 
0cefc     38 64 86 F1 | 	sub	objptr, ##1080
0cf00     32 AF 02 F1 | 	add	local05, objptr
0cf04     04 AE 06 F1 | 	add	local05, #4
0cf08     57 B7 02 FB | 	rdlong	local09, local05
0cf0c     14 B6 0E F2 | 	cmp	local09, #20 wz
0cf10     36 00 00 FF 
0cf14     2C 64 86 F1 | 	sub	objptr, ##27692
0cf18     34 00 90 AD |  if_e	jmp	#LR__1063
0cf1c     38 00 00 FF 
0cf20     64 64 06 F1 | 	add	objptr, ##28772
0cf24     32 B7 02 FB | 	rdlong	local09, objptr
0cf28     03 B6 66 F0 | 	shl	local09, #3
0cf2c     02 00 00 FF 
0cf30     38 64 86 F1 | 	sub	objptr, ##1080
0cf34     32 B7 02 F1 | 	add	local09, objptr
0cf38     04 B6 06 F1 | 	add	local09, #4
0cf3c     5B B7 02 FB | 	rdlong	local09, local09
0cf40     FE B7 0E F2 | 	cmp	local09, #510 wz
0cf44     36 00 00 FF 
0cf48     2C 64 86 F1 | 	sub	objptr, ##27692
0cf4c     00 FF 9F 5D |  if_ne	jmp	#LR__1060
0cf50                 | LR__1063
0cf50                 | '   if lparts(ct).token=token_end then return 14
0cf50     38 00 00 FF 
0cf54     64 64 06 F1 | 	add	objptr, ##28772
0cf58     32 AF 02 FB | 	rdlong	local05, objptr
0cf5c     03 AE 66 F0 | 	shl	local05, #3
0cf60     02 00 00 FF 
0cf64     38 64 86 F1 | 	sub	objptr, ##1080
0cf68     32 AF 02 F1 | 	add	local05, objptr
0cf6c     04 AE 06 F1 | 	add	local05, #4
0cf70     57 B7 02 FB | 	rdlong	local09, local05
0cf74     FE B7 0E F2 | 	cmp	local09, #510 wz
0cf78     36 00 00 FF 
0cf7c     2C 64 86 F1 | 	sub	objptr, ##27692
0cf80     0E 7A 06 A6 |  if_e	mov	result1, #14
0cf84     98 01 90 AD |  if_e	jmp	#LR__1066
0cf88                 | LR__1064
0cf88     59 A7 02 F6 | 	mov	local01, local07
0cf8c     03 B0 66 F0 | 	shl	local06, #3
0cf90     36 00 00 FF 
0cf94     2C 64 06 F1 | 	add	objptr, ##27692
0cf98     32 B1 02 F1 | 	add	local06, objptr
0cf9c     04 B0 06 F1 | 	add	local06, #4
0cfa0     58 AB 02 FB | 	rdlong	local03, local06
0cfa4     53 B5 02 F6 | 	mov	local08, local01
0cfa8     54 B9 02 F6 | 	mov	local10, local02
0cfac     55 BB 02 F6 | 	mov	local11, local03
0cfb0     15 00 00 FF 
0cfb4     70 64 06 F1 | 	add	objptr, ##10864
0cfb8     32 BD 02 FB | 	rdlong	local12, objptr
0cfbc     5E BF 02 F6 | 	mov	local13, local12
0cfc0     01 BE 66 F0 | 	shl	local13, #1
0cfc4     5E BF 02 F1 | 	add	local13, local12
0cfc8     02 BE 66 F0 | 	shl	local13, #2
0cfcc     03 00 00 FF 
0cfd0     00 64 86 F1 | 	sub	objptr, ##1536
0cfd4     32 BF 02 F1 | 	add	local13, objptr
0cfd8     5F B5 62 FC | 	wrlong	local08, local13
0cfdc     03 00 00 FF 
0cfe0     00 64 06 F1 | 	add	objptr, ##1536
0cfe4     32 B5 02 FB | 	rdlong	local08, objptr
0cfe8     5A C1 02 F6 | 	mov	local14, local08
0cfec     01 C0 66 F0 | 	shl	local14, #1
0cff0     5A C1 02 F1 | 	add	local14, local08
0cff4     02 C0 66 F0 | 	shl	local14, #2
0cff8     03 00 00 FF 
0cffc     00 64 86 F1 | 	sub	objptr, ##1536
0d000     32 C1 02 F1 | 	add	local14, objptr
0d004     04 C0 06 F1 | 	add	local14, #4
0d008     60 B9 62 FC | 	wrlong	local10, local14
0d00c     03 00 00 FF 
0d010     00 64 06 F1 | 	add	objptr, ##1536
0d014     32 B5 02 FB | 	rdlong	local08, objptr
0d018     5A C3 02 F6 | 	mov	local15, local08
0d01c     01 C2 66 F0 | 	shl	local15, #1
0d020     5A C3 02 F1 | 	add	local15, local08
0d024     02 C2 66 F0 | 	shl	local15, #2
0d028     03 00 00 FF 
0d02c     00 64 86 F1 | 	sub	objptr, ##1536
0d030     32 C3 02 F1 | 	add	local15, objptr
0d034     08 C2 06 F1 | 	add	local15, #8
0d038     61 BB 62 FC | 	wrlong	local11, local15
0d03c     03 00 00 FF 
0d040     00 64 06 F1 | 	add	objptr, ##1536
0d044     32 B5 02 FB | 	rdlong	local08, objptr
0d048     01 B4 06 F1 | 	add	local08, #1
0d04c     32 B5 62 FC | 	wrlong	local08, objptr
0d050     4B 00 00 FF 
0d054     9C 64 86 F1 | 	sub	objptr, ##38556
0d058                 | ' t2.result.uresult=numpar
0d058                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0d058                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d058                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d058     FF FF 7F FF 
0d05c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0d060     B8 00 90 5D |  if_ne	jmp	#LR__1065
0d064     15 AA 06 F6 | 	mov	local03, #21
0d068     53 B5 02 F6 | 	mov	local08, local01
0d06c     54 B9 02 F6 | 	mov	local10, local02
0d070     55 BB 02 F6 | 	mov	local11, local03
0d074     4B 00 00 FF 
0d078     9C 64 06 F1 | 	add	objptr, ##38556
0d07c     32 BD 02 FB | 	rdlong	local12, objptr
0d080     5E BF 02 F6 | 	mov	local13, local12
0d084     01 BE 66 F0 | 	shl	local13, #1
0d088     5E BF 02 F1 | 	add	local13, local12
0d08c     02 BE 66 F0 | 	shl	local13, #2
0d090     03 00 00 FF 
0d094     00 64 86 F1 | 	sub	objptr, ##1536
0d098     32 BF 02 F1 | 	add	local13, objptr
0d09c     5F B5 62 FC | 	wrlong	local08, local13
0d0a0     03 00 00 FF 
0d0a4     00 64 06 F1 | 	add	objptr, ##1536
0d0a8     32 C3 02 FB | 	rdlong	local15, objptr
0d0ac     61 C1 02 F6 | 	mov	local14, local15
0d0b0     01 C0 66 F0 | 	shl	local14, #1
0d0b4     61 C1 02 F1 | 	add	local14, local15
0d0b8     02 C0 66 F0 | 	shl	local14, #2
0d0bc     03 00 00 FF 
0d0c0     00 64 86 F1 | 	sub	objptr, ##1536
0d0c4     32 C1 02 F1 | 	add	local14, objptr
0d0c8     04 C0 06 F1 | 	add	local14, #4
0d0cc     60 B9 62 FC | 	wrlong	local10, local14
0d0d0     03 00 00 FF 
0d0d4     00 64 06 F1 | 	add	objptr, ##1536
0d0d8     32 C1 02 FB | 	rdlong	local14, objptr
0d0dc     60 C3 02 F6 | 	mov	local15, local14
0d0e0     01 C2 66 F0 | 	shl	local15, #1
0d0e4     60 C3 02 F1 | 	add	local15, local14
0d0e8     02 C2 66 F0 | 	shl	local15, #2
0d0ec     03 00 00 FF 
0d0f0     00 64 86 F1 | 	sub	objptr, ##1536
0d0f4     32 C3 02 F1 | 	add	local15, objptr
0d0f8     08 C2 06 F1 | 	add	local15, #8
0d0fc     61 BB 62 FC | 	wrlong	local11, local15
0d100     03 00 00 FF 
0d104     00 64 06 F1 | 	add	objptr, ##1536
0d108     32 B5 02 FB | 	rdlong	local08, objptr
0d10c     01 B4 06 F1 | 	add	local08, #1
0d110     32 B5 62 FC | 	wrlong	local08, objptr
0d114     4B 00 00 FF 
0d118     9C 64 86 F1 | 	sub	objptr, ##38556
0d11c                 | LR__1065
0d11c                 | ' return 0
0d11c     00 7A 06 F6 | 	mov	result1, #0
0d120                 | LR__1066
0d120     E7 F0 03 F6 | 	mov	ptra, fp
0d124     F2 00 A0 FD | 	call	#popregs_
0d128                 | _getfun_ret
0d128     2D 00 64 FD | 	ret
0d12c                 | 
0d12c                 | '   
0d12c                 | '   
0d12c                 | ' function getvar(m as integer) as ulong
0d12c                 | _getvar
0d12c     11 CA 05 F6 | 	mov	COUNT_, #17
0d130     E8 00 A0 FD | 	call	#pushregs_
0d134                 | _getvar_enter
0d134     49 AD 02 F6 | 	mov	local04, arg01
0d138     38 00 00 FF 
0d13c     64 64 06 F1 | 	add	objptr, ##28772
0d140     32 AF 02 FB | 	rdlong	local05, objptr
0d144     03 AE 66 F0 | 	shl	local05, #3
0d148     02 00 00 FF 
0d14c     38 64 86 F1 | 	sub	objptr, ##1080
0d150     32 AF 02 F1 | 	add	local05, objptr
0d154     57 B1 02 FB | 	rdlong	local06, local05
0d158     01 B2 66 F6 | 	neg	local07, #1
0d15c                 | ' 
0d15c                 | ' varname$=lparts(ct).part$
0d15c                 | ' j=-1
0d15c                 | ' 
0d15c                 | ' for i=0 to varnum-1
0d15c     00 B4 06 F6 | 	mov	local08, #0
0d160     04 64 86 F1 | 	sub	objptr, #4
0d164     32 B7 02 FB | 	rdlong	local09, objptr
0d168     36 00 00 FF 
0d16c     28 64 86 F1 | 	sub	objptr, ##27688
0d170                 | LR__1070
0d170     5B B5 52 F2 | 	cmps	local08, local09 wc
0d174     34 00 90 3D |  if_ae	jmp	#LR__1071
0d178                 | '   if variables(i).name=varname$ then j=i : exit
0d178     5A AF 02 F6 | 	mov	local05, local08
0d17c     04 AE 66 F0 | 	shl	local05, #4
0d180     32 95 02 F6 | 	mov	arg02, objptr
0d184     16 00 00 FF 
0d188     18 94 06 F1 | 	add	arg02, ##11288
0d18c     4A AF 02 F1 | 	add	local05, arg02
0d190     57 93 02 FB | 	rdlong	arg01, local05
0d194     58 95 02 F6 | 	mov	arg02, local06
0d198     44 78 B1 FD | 	call	#__system___string_cmp
0d19c     00 7A 0E F2 | 	cmp	result1, #0 wz
0d1a0     5A B3 02 A6 |  if_e	mov	local07, local08
0d1a4     01 B4 06 51 |  if_ne	add	local08, #1
0d1a8     C4 FF 9F 5D |  if_ne	jmp	#LR__1070
0d1ac                 | LR__1071
0d1ac                 | ' if  j=-1 andalso varnum<maxvars then   
0d1ac     FF FF 7F FF 
0d1b0     FF B3 0E F2 | 	cmp	local07, ##-1 wz
0d1b4     A8 00 90 5D |  if_ne	jmp	#LR__1072
0d1b8     36 00 00 FF 
0d1bc     28 64 06 F1 | 	add	objptr, ##27688
0d1c0     32 B7 02 FB | 	rdlong	local09, objptr
0d1c4     36 00 00 FF 
0d1c8     28 64 86 F1 | 	sub	objptr, ##27688
0d1cc     02 00 00 FF 
0d1d0     00 B6 56 F2 | 	cmps	local09, ##1024 wc
0d1d4     88 00 90 3D |  if_ae	jmp	#LR__1072
0d1d8     36 00 00 FF 
0d1dc     28 64 06 F1 | 	add	objptr, ##27688
0d1e0     32 AF 02 FB | 	rdlong	local05, objptr
0d1e4     04 AE 66 F0 | 	shl	local05, #4
0d1e8     20 00 00 FF 
0d1ec     10 64 86 F1 | 	sub	objptr, ##16400
0d1f0     32 AF 02 F1 | 	add	local05, objptr
0d1f4     57 B1 62 FC | 	wrlong	local06, local05
0d1f8     20 00 00 FF 
0d1fc     10 64 06 F1 | 	add	objptr, ##16400
0d200     32 AF 02 FB | 	rdlong	local05, objptr
0d204     04 AE 66 F0 | 	shl	local05, #4
0d208     20 00 00 FF 
0d20c     10 64 86 F1 | 	sub	objptr, ##16400
0d210     32 AF 02 F1 | 	add	local05, objptr
0d214     04 AE 06 F1 | 	add	local05, #4
0d218     57 01 68 FC | 	wrlong	#0, local05
0d21c     20 00 00 FF 
0d220     10 64 06 F1 | 	add	objptr, ##16400
0d224     32 AF 02 FB | 	rdlong	local05, objptr
0d228     04 AE 66 F0 | 	shl	local05, #4
0d22c     20 00 00 FF 
0d230     10 64 86 F1 | 	sub	objptr, ##16400
0d234     32 AF 02 F1 | 	add	local05, objptr
0d238     0C AE 06 F1 | 	add	local05, #12
0d23c     57 39 68 FC | 	wrlong	#28, local05
0d240     20 00 00 FF 
0d244     10 64 06 F1 | 	add	objptr, ##16400
0d248     32 B7 02 FB | 	rdlong	local09, objptr
0d24c     5B B3 02 F6 | 	mov	local07, local09
0d250     01 B6 06 F1 | 	add	local09, #1
0d254     32 B7 62 FC | 	wrlong	local09, objptr
0d258     36 00 00 FF 
0d25c     28 64 86 F1 | 	sub	objptr, ##27688
0d260                 | LR__1072
0d260     00 B4 06 F6 | 	mov	local08, #0
0d264                 | ' numpar=0
0d264                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d264     38 00 00 FF 
0d268     64 64 06 F1 | 	add	objptr, ##28772
0d26c     32 AF 02 FB | 	rdlong	local05, objptr
0d270     01 AE 06 F1 | 	add	local05, #1
0d274     03 AE 66 F0 | 	shl	local05, #3
0d278     02 00 00 FF 
0d27c     38 64 86 F1 | 	sub	objptr, ##1080
0d280     32 AF 02 F1 | 	add	local05, objptr
0d284     04 AE 06 F1 | 	add	local05, #4
0d288     57 B7 02 FB | 	rdlong	local09, local05
0d28c     15 B6 0E F2 | 	cmp	local09, #21 wz
0d290     36 00 00 FF 
0d294     2C 64 86 F1 | 	sub	objptr, ##27692
0d298     54 01 90 5D |  if_ne	jmp	#LR__1077
0d29c     38 00 00 FF 
0d2a0     64 64 06 F1 | 	add	objptr, ##28772
0d2a4     32 B9 02 FB | 	rdlong	local10, objptr
0d2a8     01 B8 06 F1 | 	add	local10, #1
0d2ac     32 B9 62 FC | 	wrlong	local10, objptr
0d2b0     38 00 00 FF 
0d2b4     64 64 86 F1 | 	sub	objptr, ##28772
0d2b8                 | '   ct+=1 											' omit this lpar, this is for expr list
0d2b8                 | '   do
0d2b8                 | LR__1073
0d2b8     38 00 00 FF 
0d2bc     64 64 06 F1 | 	add	objptr, ##28772
0d2c0     32 AF 02 FB | 	rdlong	local05, objptr
0d2c4     01 AE 06 F1 | 	add	local05, #1
0d2c8     32 AF 62 FC | 	wrlong	local05, objptr
0d2cc                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d2cc                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d2cc     03 AE 66 F0 | 	shl	local05, #3
0d2d0     02 00 00 FF 
0d2d4     38 64 86 F1 | 	sub	objptr, ##1080
0d2d8     32 AF 02 F1 | 	add	local05, objptr
0d2dc     04 AE 06 F1 | 	add	local05, #4
0d2e0     57 B9 02 FB | 	rdlong	local10, local05
0d2e4     15 B8 0E F2 | 	cmp	local10, #21 wz
0d2e8     36 00 00 FF 
0d2ec     2C 64 86 F1 | 	sub	objptr, ##27692
0d2f0     44 00 90 5D |  if_ne	jmp	#LR__1074
0d2f4     38 00 00 FF 
0d2f8     64 64 06 F1 | 	add	objptr, ##28772
0d2fc     32 B9 02 FB | 	rdlong	local10, objptr
0d300     01 B8 06 F1 | 	add	local10, #1
0d304     32 B9 62 FC | 	wrlong	local10, objptr
0d308     38 00 00 FF 
0d30c     64 64 86 F1 | 	sub	objptr, ##28772
0d310     5C EB BF FD | 	call	#_expr
0d314     3D BB 02 F6 | 	mov	local11, result1
0d318     38 00 00 FF 
0d31c     64 64 06 F1 | 	add	objptr, ##28772
0d320     32 B9 02 FB | 	rdlong	local10, objptr
0d324     01 B8 06 F1 | 	add	local10, #1
0d328     32 B9 62 FC | 	wrlong	local10, objptr
0d32c     38 00 00 FF 
0d330     64 64 86 F1 | 	sub	objptr, ##28772
0d334     08 00 90 FD | 	jmp	#LR__1075
0d338                 | LR__1074
0d338     34 EB BF FD | 	call	#_expr
0d33c     3D BB 02 F6 | 	mov	local11, result1
0d340                 | LR__1075
0d340                 | '     if err>0 then return err
0d340     01 BA 56 F2 | 	cmps	local11, #1 wc
0d344     5D 7B 02 36 |  if_ae	mov	result1, local11
0d348     2C 02 90 3D |  if_ae	jmp	#LR__1079
0d34c     01 B4 06 F1 | 	add	local08, #1
0d350     38 00 00 FF 
0d354     64 64 06 F1 | 	add	objptr, ##28772
0d358     32 AF 02 FB | 	rdlong	local05, objptr
0d35c     03 AE 66 F0 | 	shl	local05, #3
0d360     02 00 00 FF 
0d364     38 64 86 F1 | 	sub	objptr, ##1080
0d368     32 AF 02 F1 | 	add	local05, objptr
0d36c     04 AE 06 F1 | 	add	local05, #4
0d370     57 BB 02 FB | 	rdlong	local11, local05
0d374     14 BA 0E F2 | 	cmp	local11, #20 wz
0d378     36 00 00 FF 
0d37c     2C 64 86 F1 | 	sub	objptr, ##27692
0d380     34 00 90 AD |  if_e	jmp	#LR__1076
0d384     38 00 00 FF 
0d388     64 64 06 F1 | 	add	objptr, ##28772
0d38c     32 BB 02 FB | 	rdlong	local11, objptr
0d390     03 BA 66 F0 | 	shl	local11, #3
0d394     02 00 00 FF 
0d398     38 64 86 F1 | 	sub	objptr, ##1080
0d39c     32 BB 02 F1 | 	add	local11, objptr
0d3a0     04 BA 06 F1 | 	add	local11, #4
0d3a4     5D BB 02 FB | 	rdlong	local11, local11
0d3a8     FE BB 0E F2 | 	cmp	local11, #510 wz
0d3ac     36 00 00 FF 
0d3b0     2C 64 86 F1 | 	sub	objptr, ##27692
0d3b4     00 FF 9F 5D |  if_ne	jmp	#LR__1073
0d3b8                 | LR__1076
0d3b8                 | '     if lparts(ct).token=token_end then return 14
0d3b8     38 00 00 FF 
0d3bc     64 64 06 F1 | 	add	objptr, ##28772
0d3c0     32 AF 02 FB | 	rdlong	local05, objptr
0d3c4     03 AE 66 F0 | 	shl	local05, #3
0d3c8     02 00 00 FF 
0d3cc     38 64 86 F1 | 	sub	objptr, ##1080
0d3d0     32 AF 02 F1 | 	add	local05, objptr
0d3d4     04 AE 06 F1 | 	add	local05, #4
0d3d8     57 BB 02 FB | 	rdlong	local11, local05
0d3dc     FE BB 0E F2 | 	cmp	local11, #510 wz
0d3e0     36 00 00 FF 
0d3e4     2C 64 86 F1 | 	sub	objptr, ##27692
0d3e8     0E 7A 06 A6 |  if_e	mov	result1, #14
0d3ec     88 01 90 AD |  if_e	jmp	#LR__1079
0d3f0                 | LR__1077
0d3f0     5A A9 02 F6 | 	mov	local02, local08
0d3f4     11 AA 06 F6 | 	mov	local03, #17
0d3f8     59 A7 02 F6 | 	mov	local01, local07
0d3fc     53 B9 02 F6 | 	mov	local10, local01
0d400     54 BD 02 F6 | 	mov	local12, local02
0d404     55 BF 02 F6 | 	mov	local13, local03
0d408     4B 00 00 FF 
0d40c     9C 64 06 F1 | 	add	objptr, ##38556
0d410     32 C1 02 FB | 	rdlong	local14, objptr
0d414     60 C3 02 F6 | 	mov	local15, local14
0d418     01 C2 66 F0 | 	shl	local15, #1
0d41c     60 C3 02 F1 | 	add	local15, local14
0d420     02 C2 66 F0 | 	shl	local15, #2
0d424     03 00 00 FF 
0d428     00 64 86 F1 | 	sub	objptr, ##1536
0d42c     32 C3 02 F1 | 	add	local15, objptr
0d430     61 B9 62 FC | 	wrlong	local10, local15
0d434     03 00 00 FF 
0d438     00 64 06 F1 | 	add	objptr, ##1536
0d43c     32 B9 02 FB | 	rdlong	local10, objptr
0d440     5C C5 02 F6 | 	mov	local16, local10
0d444     01 C4 66 F0 | 	shl	local16, #1
0d448     5C C5 02 F1 | 	add	local16, local10
0d44c     02 C4 66 F0 | 	shl	local16, #2
0d450     03 00 00 FF 
0d454     00 64 86 F1 | 	sub	objptr, ##1536
0d458     32 C5 02 F1 | 	add	local16, objptr
0d45c     04 C4 06 F1 | 	add	local16, #4
0d460     62 BD 62 FC | 	wrlong	local12, local16
0d464     03 00 00 FF 
0d468     00 64 06 F1 | 	add	objptr, ##1536
0d46c     32 B9 02 FB | 	rdlong	local10, objptr
0d470     5C C7 02 F6 | 	mov	local17, local10
0d474     01 C6 66 F0 | 	shl	local17, #1
0d478     5C C7 02 F1 | 	add	local17, local10
0d47c     02 C6 66 F0 | 	shl	local17, #2
0d480     03 00 00 FF 
0d484     00 64 86 F1 | 	sub	objptr, ##1536
0d488     32 C7 02 F1 | 	add	local17, objptr
0d48c     08 C6 06 F1 | 	add	local17, #8
0d490     63 BF 62 FC | 	wrlong	local13, local17
0d494     03 00 00 FF 
0d498     00 64 06 F1 | 	add	objptr, ##1536
0d49c     32 B9 02 FB | 	rdlong	local10, objptr
0d4a0     01 B8 06 F1 | 	add	local10, #1
0d4a4     32 B9 62 FC | 	wrlong	local10, objptr
0d4a8     4B 00 00 FF 
0d4ac     9C 64 86 F1 | 	sub	objptr, ##38556
0d4b0                 | ' t2.result.twowords(1)=numpar
0d4b0                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d4b0                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d4b0                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d4b0     FF FF 7F FF 
0d4b4     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0d4b8     B8 00 90 5D |  if_ne	jmp	#LR__1078
0d4bc     15 AA 06 F6 | 	mov	local03, #21
0d4c0     53 B9 02 F6 | 	mov	local10, local01
0d4c4     54 BD 02 F6 | 	mov	local12, local02
0d4c8     55 BF 02 F6 | 	mov	local13, local03
0d4cc     4B 00 00 FF 
0d4d0     9C 64 06 F1 | 	add	objptr, ##38556
0d4d4     32 C1 02 FB | 	rdlong	local14, objptr
0d4d8     60 C3 02 F6 | 	mov	local15, local14
0d4dc     01 C2 66 F0 | 	shl	local15, #1
0d4e0     60 C3 02 F1 | 	add	local15, local14
0d4e4     02 C2 66 F0 | 	shl	local15, #2
0d4e8     03 00 00 FF 
0d4ec     00 64 86 F1 | 	sub	objptr, ##1536
0d4f0     32 C3 02 F1 | 	add	local15, objptr
0d4f4     61 B9 62 FC | 	wrlong	local10, local15
0d4f8     03 00 00 FF 
0d4fc     00 64 06 F1 | 	add	objptr, ##1536
0d500     32 C7 02 FB | 	rdlong	local17, objptr
0d504     63 C5 02 F6 | 	mov	local16, local17
0d508     01 C4 66 F0 | 	shl	local16, #1
0d50c     63 C5 02 F1 | 	add	local16, local17
0d510     02 C4 66 F0 | 	shl	local16, #2
0d514     03 00 00 FF 
0d518     00 64 86 F1 | 	sub	objptr, ##1536
0d51c     32 C5 02 F1 | 	add	local16, objptr
0d520     04 C4 06 F1 | 	add	local16, #4
0d524     62 BD 62 FC | 	wrlong	local12, local16
0d528     03 00 00 FF 
0d52c     00 64 06 F1 | 	add	objptr, ##1536
0d530     32 C5 02 FB | 	rdlong	local16, objptr
0d534     62 C7 02 F6 | 	mov	local17, local16
0d538     01 C6 66 F0 | 	shl	local17, #1
0d53c     62 C7 02 F1 | 	add	local17, local16
0d540     02 C6 66 F0 | 	shl	local17, #2
0d544     03 00 00 FF 
0d548     00 64 86 F1 | 	sub	objptr, ##1536
0d54c     32 C7 02 F1 | 	add	local17, objptr
0d550     08 C6 06 F1 | 	add	local17, #8
0d554     63 BF 62 FC | 	wrlong	local13, local17
0d558     03 00 00 FF 
0d55c     00 64 06 F1 | 	add	objptr, ##1536
0d560     32 B9 02 FB | 	rdlong	local10, objptr
0d564     01 B8 06 F1 | 	add	local10, #1
0d568     32 B9 62 FC | 	wrlong	local10, objptr
0d56c     4B 00 00 FF 
0d570     9C 64 86 F1 | 	sub	objptr, ##38556
0d574                 | LR__1078
0d574                 | ' return 0
0d574     00 7A 06 F6 | 	mov	result1, #0
0d578                 | LR__1079
0d578     E7 F0 03 F6 | 	mov	ptra, fp
0d57c     F2 00 A0 FD | 	call	#popregs_
0d580                 | _getvar_ret
0d580     2D 00 64 FD | 	ret
0d584                 | 
0d584                 | ' 
0d584                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d584                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d584                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d584                 | ' 
0d584                 | ' 
0d584                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d584                 | ' '                                                                                                                                       -
0d584                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d584                 | ' '                                                                                                                                       -
0d584                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d584                 | ' 
0d584                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d584                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d584                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d584                 | ' 
0d584                 | ' function execute_line (astart=0 as integer) as integer
0d584                 | _execute_line
0d584     04 CA 05 F6 | 	mov	COUNT_, #4
0d588     E8 00 A0 FD | 	call	#pushregs_
0d58c     51 00 00 FF 
0d590     DC 64 06 F1 | 	add	objptr, ##41692
0d594     32 01 68 FC | 	wrlong	#0, objptr
0d598                 | ' 
0d598                 | ' runptr2=0
0d598                 | ' for lineptr_e=astart to lineptr-1
0d598     06 00 00 FF 
0d59c     3C 64 86 F1 | 	sub	objptr, ##3132
0d5a0     32 93 62 FC | 	wrlong	arg01, objptr
0d5a4     04 64 86 F1 | 	sub	objptr, #4
0d5a8     32 A7 02 FB | 	rdlong	local01, objptr
0d5ac     4B 00 00 FF 
0d5b0     9C 64 86 F1 | 	sub	objptr, ##38556
0d5b4                 | LR__1080
0d5b4     4B 00 00 FF 
0d5b8     A0 64 06 F1 | 	add	objptr, ##38560
0d5bc     32 7B 02 FB | 	rdlong	result1, objptr
0d5c0     4B 00 00 FF 
0d5c4     A0 64 86 F1 | 	sub	objptr, ##38560
0d5c8     53 7B 52 F2 | 	cmps	result1, local01 wc
0d5cc     98 00 90 3D |  if_ae	jmp	#LR__1081
0d5d0     4B 00 00 FF 
0d5d4     A0 64 06 F1 | 	add	objptr, ##38560
0d5d8     32 7B 02 FB | 	rdlong	result1, objptr
0d5dc     3D A9 02 F6 | 	mov	local02, result1
0d5e0     01 A8 66 F0 | 	shl	local02, #1
0d5e4     3D A9 02 F1 | 	add	local02, result1
0d5e8     02 A8 66 F0 | 	shl	local02, #2
0d5ec     03 00 00 FF 
0d5f0     04 64 86 F1 | 	sub	objptr, ##1540
0d5f4     32 A9 02 F1 | 	add	local02, objptr
0d5f8     08 A8 06 F1 | 	add	local02, #8
0d5fc     54 A9 02 FB | 	rdlong	local02, local02
0d600     54 A9 E2 F8 | 	getbyte	local02, local02, #0
0d604     02 A8 66 F0 | 	shl	local02, #2
0d608     04 00 00 FF 
0d60c     1C 64 86 F1 | 	sub	objptr, ##2076
0d610     32 A9 02 F1 | 	add	local02, objptr
0d614     54 A9 02 FB | 	rdlong	local02, local02
0d618     54 AB 02 F6 | 	mov	local03, local02
0d61c     13 A8 46 F7 | 	zerox	local02, #19
0d620     14 AA 46 F0 | 	shr	local03, #20
0d624     02 AA 66 F0 | 	shl	local03, #2
0d628     2D AB 02 F1 | 	add	local03, __methods__
0d62c     55 AB 02 FB | 	rdlong	local03, local03
0d630     44 00 00 FF 
0d634     80 64 86 F1 | 	sub	objptr, ##34944
0d638     32 AD 02 F6 | 	mov	local04, objptr
0d63c     54 65 02 F6 | 	mov	objptr, local02
0d640     2D AA 62 FD | 	call	local03
0d644     56 65 02 F6 | 	mov	objptr, local04
0d648     4B 00 00 FF 
0d64c     A0 64 06 F1 | 	add	objptr, ##38560
0d650     32 AD 02 FB | 	rdlong	local04, objptr
0d654     01 AC 06 F1 | 	add	local04, #1
0d658     32 AD 62 FC | 	wrlong	local04, objptr
0d65c     4B 00 00 FF 
0d660     A0 64 86 F1 | 	sub	objptr, ##38560
0d664     4C FF 9F FD | 	jmp	#LR__1080
0d668                 | LR__1081
0d668                 | ' return runptr2
0d668     51 00 00 FF 
0d66c     DC 64 06 F1 | 	add	objptr, ##41692
0d670     32 7B 02 FB | 	rdlong	result1, objptr
0d674     51 00 00 FF 
0d678     DC 64 86 F1 | 	sub	objptr, ##41692
0d67c     E7 F0 03 F6 | 	mov	ptra, fp
0d680     F2 00 A0 FD | 	call	#popregs_
0d684                 | _execute_line_ret
0d684     2D 00 64 FD | 	ret
0d688                 | 
0d688                 | ' 
0d688                 | ' 
0d688                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d688                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d688                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d688                 | ' 
0d688                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d688                 | ' 
0d688                 | ' function pop() as expr_result
0d688                 | _pop
0d688                 | ' if stackpointer=0 then
0d688     44 00 00 FF 
0d68c     78 64 06 F1 | 	add	objptr, ##34936
0d690     32 7B 0A FB | 	rdlong	result1, objptr wz
0d694     44 00 00 FF 
0d698     78 64 86 F1 | 	sub	objptr, ##34936
0d69c     FF 84 06 A6 |  if_e	mov	_var03, #255
0d6a0     18 80 06 A6 |  if_e	mov	_var01, #24
0d6a4     60 00 90 AD |  if_e	jmp	#LR__1090
0d6a8     44 00 00 FF 
0d6ac     78 64 06 F1 | 	add	objptr, ##34936
0d6b0     32 7B 02 FB | 	rdlong	result1, objptr
0d6b4     01 7A 86 F1 | 	sub	result1, #1
0d6b8     32 7B 62 FC | 	wrlong	result1, objptr
0d6bc     3D 7F 02 F6 | 	mov	result3, result1
0d6c0     01 7E 66 F0 | 	shl	result3, #1
0d6c4     3D 7F 02 F1 | 	add	result3, result1
0d6c8     02 7E 66 F0 | 	shl	result3, #2
0d6cc     0C 00 00 FF 
0d6d0     0C 64 86 F1 | 	sub	objptr, ##6156
0d6d4     32 7F 02 F1 | 	add	result3, objptr
0d6d8     3F 81 02 FB | 	rdlong	_var01, result3
0d6dc     04 7E 06 F1 | 	add	result3, #4
0d6e0     3F 83 02 FB | 	rdlong	_var02, result3
0d6e4     3D 7D 02 F6 | 	mov	result2, result1
0d6e8     01 7C 66 F0 | 	shl	result2, #1
0d6ec     3D 7D 02 F1 | 	add	result2, result1
0d6f0     02 7C 66 F0 | 	shl	result2, #2
0d6f4     32 7D 02 F1 | 	add	result2, objptr
0d6f8     08 7C 06 F1 | 	add	result2, #8
0d6fc     3E 85 02 FB | 	rdlong	_var03, result2
0d700     38 00 00 FF 
0d704     6C 64 86 F1 | 	sub	objptr, ##28780
0d708                 | LR__1090
0d708                 | ' return t1
0d708     41 7D 02 F6 | 	mov	result2, _var02
0d70c     42 7F 02 F6 | 	mov	result3, _var03
0d710     40 7B 02 F6 | 	mov	result1, _var01
0d714                 | _pop_ret
0d714     2D 00 64 FD | 	ret
0d718                 | 
0d718                 | ' 
0d718                 | ' sub push(t1 as expr_result )
0d718                 | _push
0d718                 | ' if stackpointer<maxstack then 
0d718     44 00 00 FF 
0d71c     78 64 06 F1 | 	add	objptr, ##34936
0d720     32 81 02 FB | 	rdlong	_var01, objptr
0d724     44 00 00 FF 
0d728     78 64 86 F1 | 	sub	objptr, ##34936
0d72c     01 00 00 FF 
0d730     00 80 56 F2 | 	cmps	_var01, ##512 wc
0d734     BC 00 90 3D |  if_ae	jmp	#LR__1100
0d738     49 81 02 FB | 	rdlong	_var01, arg01
0d73c     04 92 06 F1 | 	add	arg01, #4
0d740     49 83 02 FB | 	rdlong	_var02, arg01
0d744     04 92 06 F1 | 	add	arg01, #4
0d748     49 93 02 FB | 	rdlong	arg01, arg01
0d74c     44 00 00 FF 
0d750     78 64 06 F1 | 	add	objptr, ##34936
0d754     32 85 02 FB | 	rdlong	_var03, objptr
0d758     42 87 02 F6 | 	mov	_var04, _var03
0d75c     01 86 66 F0 | 	shl	_var04, #1
0d760     42 87 02 F1 | 	add	_var04, _var03
0d764     02 86 66 F0 | 	shl	_var04, #2
0d768     0C 00 00 FF 
0d76c     0C 64 86 F1 | 	sub	objptr, ##6156
0d770     32 87 02 F1 | 	add	_var04, objptr
0d774     43 81 62 FC | 	wrlong	_var01, _var04
0d778     0C 00 00 FF 
0d77c     0C 64 06 F1 | 	add	objptr, ##6156
0d780     32 87 02 FB | 	rdlong	_var04, objptr
0d784     43 85 02 F6 | 	mov	_var03, _var04
0d788     01 84 66 F0 | 	shl	_var03, #1
0d78c     43 85 02 F1 | 	add	_var03, _var04
0d790     02 84 66 F0 | 	shl	_var03, #2
0d794     0C 00 00 FF 
0d798     0C 64 86 F1 | 	sub	objptr, ##6156
0d79c     32 85 02 F1 | 	add	_var03, objptr
0d7a0     04 84 06 F1 | 	add	_var03, #4
0d7a4     42 83 62 FC | 	wrlong	_var02, _var03
0d7a8     0C 00 00 FF 
0d7ac     0C 64 06 F1 | 	add	objptr, ##6156
0d7b0     32 87 02 FB | 	rdlong	_var04, objptr
0d7b4     43 85 02 F6 | 	mov	_var03, _var04
0d7b8     01 84 66 F0 | 	shl	_var03, #1
0d7bc     43 85 02 F1 | 	add	_var03, _var04
0d7c0     02 84 66 F0 | 	shl	_var03, #2
0d7c4     0C 00 00 FF 
0d7c8     0C 64 86 F1 | 	sub	objptr, ##6156
0d7cc     32 85 02 F1 | 	add	_var03, objptr
0d7d0     08 84 06 F1 | 	add	_var03, #8
0d7d4     42 93 62 FC | 	wrlong	arg01, _var03
0d7d8     0C 00 00 FF 
0d7dc     0C 64 06 F1 | 	add	objptr, ##6156
0d7e0     32 81 02 FB | 	rdlong	_var01, objptr
0d7e4     01 80 06 F1 | 	add	_var01, #1
0d7e8     32 81 62 FC | 	wrlong	_var01, objptr
0d7ec     44 00 00 FF 
0d7f0     78 64 86 F1 | 	sub	objptr, ##34936
0d7f4                 | LR__1100
0d7f4                 | _push_ret
0d7f4     2D 00 64 FD | 	ret
0d7f8                 | 
0d7f8                 | ' 
0d7f8                 | ' ' -------------------------------- Runtime converting functions
0d7f8                 | ' 
0d7f8                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d7f8                 | ' 
0d7f8                 | ' function  convertstring(psaddr as ulong) as string
0d7f8                 | _convertstring
0d7f8     04 CA 05 F6 | 	mov	COUNT_, #4
0d7fc     E8 00 A0 FD | 	call	#pushregs_
0d800     49 A7 02 F6 | 	mov	local01, arg01
0d804     F0 3A B1 FD | 	call	#_pslpeek
0d808     3D A9 02 F6 | 	mov	local02, result1
0d80c     96 01 00 FF 
0d810     8B AA 06 F6 | 	mov	local03, ##@LR__5942
0d814                 | ' l=pslpeek(psaddr) 
0d814                 | ' s="" 
0d814                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d814     01 AC 06 F6 | 	mov	local04, #1
0d818     01 A8 06 F1 | 	add	local02, #1
0d81c                 | LR__1110
0d81c     54 AD 52 F2 | 	cmps	local04, local02 wc
0d820     30 00 90 3D |  if_ae	jmp	#LR__1111
0d824     53 93 02 F6 | 	mov	arg01, local01
0d828     03 92 06 F1 | 	add	arg01, #3
0d82c     56 93 02 F1 | 	add	arg01, local04
0d830     7C 3A B1 FD | 	call	#_pspeek
0d834     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
0d838     E8 8B B1 FD | 	call	#__system__Chr_S
0d83c     3D 95 02 F6 | 	mov	arg02, result1
0d840     55 93 02 F6 | 	mov	arg01, local03
0d844     CC 71 B1 FD | 	call	#__system___string_concat
0d848     3D AB 02 F6 | 	mov	local03, result1
0d84c     01 AC 06 F1 | 	add	local04, #1
0d850     C8 FF 9F FD | 	jmp	#LR__1110
0d854                 | LR__1111
0d854                 | ' return s
0d854     55 7B 02 F6 | 	mov	result1, local03
0d858     E7 F0 03 F6 | 	mov	ptra, fp
0d85c     F2 00 A0 FD | 	call	#popregs_
0d860                 | _convertstring_ret
0d860     2D 00 64 FD | 	ret
0d864                 | 
0d864                 | ' 
0d864                 | ' ' converts a variable to an integer
0d864                 | ' 
0d864                 | ' function converttoint (t1 as expr_result) as integer 
0d864                 | _converttoint
0d864     02 CA 05 F6 | 	mov	COUNT_, #2
0d868     E8 00 A0 FD | 	call	#pushregs_
0d86c     49 A7 02 F6 | 	mov	local01, arg01
0d870                 | ' 
0d870                 | ' select case t1.result_type
0d870     08 A6 06 F1 | 	add	local01, #8
0d874     53 A9 02 FB | 	rdlong	local02, local01
0d878     08 A6 86 F1 | 	sub	local01, #8
0d87c     1C A8 0E F2 | 	cmp	local02, #28 wz
0d880     2C 00 90 AD |  if_e	jmp	#LR__1120
0d884     1D A8 0E F2 | 	cmp	local02, #29 wz
0d888     2C 00 90 AD |  if_e	jmp	#LR__1121
0d88c     1E A8 0E F2 | 	cmp	local02, #30 wz
0d890     2C 00 90 AD |  if_e	jmp	#LR__1122
0d894     1F A8 0E F2 | 	cmp	local02, #31 wz
0d898     34 00 90 AD |  if_e	jmp	#LR__1123
0d89c     2B A8 0E F2 | 	cmp	local02, #43 wz
0d8a0     44 00 90 AD |  if_e	jmp	#LR__1124
0d8a4     2C A8 0E F2 | 	cmp	local02, #44 wz
0d8a8     5C 00 90 AD |  if_e	jmp	#LR__1125
0d8ac     60 00 90 FD | 	jmp	#LR__1126
0d8b0                 | LR__1120
0d8b0     53 7B 02 FB | 	rdlong	result1, local01
0d8b4     5C 00 90 FD | 	jmp	#LR__1127
0d8b8                 | LR__1121
0d8b8     53 7B 02 FB | 	rdlong	result1, local01
0d8bc     54 00 90 FD | 	jmp	#LR__1127
0d8c0                 | LR__1122
0d8c0     53 93 02 FB | 	rdlong	arg01, local01
0d8c4     01 94 06 F6 | 	mov	arg02, #1
0d8c8     84 9C B1 FD | 	call	#__system___float_tointeger
0d8cc     44 00 90 FD | 	jmp	#LR__1127
0d8d0                 | LR__1123
0d8d0     53 93 02 FB | 	rdlong	arg01, local01
0d8d4     CC 9F B1 FD | 	call	#__system____builtin_atof
0d8d8     3D 93 02 F6 | 	mov	arg01, result1
0d8dc     01 94 06 F6 | 	mov	arg02, #1
0d8e0     6C 9C B1 FD | 	call	#__system___float_tointeger
0d8e4     2C 00 90 FD | 	jmp	#LR__1127
0d8e8                 | LR__1124
0d8e8     53 93 02 FB | 	rdlong	arg01, local01
0d8ec     08 FF BF FD | 	call	#_convertstring
0d8f0     3D 93 02 F6 | 	mov	arg01, result1
0d8f4     AC 9F B1 FD | 	call	#__system____builtin_atof
0d8f8     3D 93 02 F6 | 	mov	arg01, result1
0d8fc     01 94 06 F6 | 	mov	arg02, #1
0d900     4C 9C B1 FD | 	call	#__system___float_tointeger
0d904     0C 00 90 FD | 	jmp	#LR__1127
0d908                 | LR__1125
0d908     53 7B 02 FB | 	rdlong	result1, local01
0d90c     04 00 90 FD | 	jmp	#LR__1127
0d910                 | LR__1126
0d910     00 7A 06 F6 | 	mov	result1, #0
0d914                 | LR__1127
0d914     E7 F0 03 F6 | 	mov	ptra, fp
0d918     F2 00 A0 FD | 	call	#popregs_
0d91c                 | _converttoint_ret
0d91c     2D 00 64 FD | 	ret
0d920                 | 
0d920                 | ' 
0d920                 | ' ' converts a variable to float
0d920                 | ' 
0d920                 | ' function converttofloat (t1 as expr_result) as single
0d920                 | _converttofloat
0d920     03 CA 05 F6 | 	mov	COUNT_, #3
0d924     E8 00 A0 FD | 	call	#pushregs_
0d928     49 A7 02 F6 | 	mov	local01, arg01
0d92c                 | ' 
0d92c                 | ' select case t1.result_type
0d92c     08 A6 06 F1 | 	add	local01, #8
0d930     53 A9 02 FB | 	rdlong	local02, local01
0d934     08 A6 86 F1 | 	sub	local01, #8
0d938     1C A8 0E F2 | 	cmp	local02, #28 wz
0d93c     24 00 90 AD |  if_e	jmp	#LR__1130
0d940     1D A8 0E F2 | 	cmp	local02, #29 wz
0d944     38 00 90 AD |  if_e	jmp	#LR__1131
0d948     1E A8 0E F2 | 	cmp	local02, #30 wz
0d94c     3C 00 90 AD |  if_e	jmp	#LR__1132
0d950     1F A8 0E F2 | 	cmp	local02, #31 wz
0d954     3C 00 90 AD |  if_e	jmp	#LR__1133
0d958     2B A8 0E F2 | 	cmp	local02, #43 wz
0d95c     40 00 90 AD |  if_e	jmp	#LR__1134
0d960     50 00 90 FD | 	jmp	#LR__1135
0d964                 | LR__1130
0d964     53 93 02 FB | 	rdlong	arg01, local01
0d968     49 93 52 F6 | 	abs	arg01, arg01 wc
0d96c     1F AA C6 C9 |  if_b	decod	local03, #31
0d970     00 AA 06 36 |  if_ae	mov	local03, #0
0d974     0C 93 B1 FD | 	call	#__system___float_fromuns
0d978     55 7B 62 F5 | 	xor	result1, local03
0d97c     38 00 90 FD | 	jmp	#LR__1136
0d980                 | LR__1131
0d980     53 93 02 FB | 	rdlong	arg01, local01
0d984     FC 92 B1 FD | 	call	#__system___float_fromuns
0d988     2C 00 90 FD | 	jmp	#LR__1136
0d98c                 | LR__1132
0d98c     53 7B 02 FB | 	rdlong	result1, local01
0d990     24 00 90 FD | 	jmp	#LR__1136
0d994                 | LR__1133
0d994     53 93 02 FB | 	rdlong	arg01, local01
0d998     08 9F B1 FD | 	call	#__system____builtin_atof
0d99c     18 00 90 FD | 	jmp	#LR__1136
0d9a0                 | LR__1134
0d9a0     53 93 02 FB | 	rdlong	arg01, local01
0d9a4     50 FE BF FD | 	call	#_convertstring
0d9a8     3D 93 02 F6 | 	mov	arg01, result1
0d9ac     F4 9E B1 FD | 	call	#__system____builtin_atof
0d9b0     04 00 90 FD | 	jmp	#LR__1136
0d9b4                 | LR__1135
0d9b4     00 7A 06 F6 | 	mov	result1, #0
0d9b8                 | LR__1136
0d9b8     E7 F0 03 F6 | 	mov	ptra, fp
0d9bc     F2 00 A0 FD | 	call	#popregs_
0d9c0                 | _converttofloat_ret
0d9c0     2D 00 64 FD | 	ret
0d9c4                 | 
0d9c4                 | ' 
0d9c4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9c4                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d9c4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9c4                 | ' 
0d9c4                 | ' 
0d9c4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9c4                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d9c4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9c4                 | ' 
0d9c4                 | ' '-------------------- abs
0d9c4                 | ' 
0d9c4                 | ' sub do_abs
0d9c4                 | _do_abs
0d9c4     01 CA 05 F6 | 	mov	COUNT_, #1
0d9c8     E8 00 A0 FD | 	call	#pushregs_
0d9cc     0C F0 07 F1 | 	add	ptra, #12
0d9d0     B4 FC BF FD | 	call	#_pop
0d9d4     3F A7 02 F6 | 	mov	local01, result3
0d9d8     E7 7A 62 FC | 	wrlong	result1, fp
0d9dc     04 CE 05 F1 | 	add	fp, #4
0d9e0     E7 7C 62 FC | 	wrlong	result2, fp
0d9e4     04 CE 05 F1 | 	add	fp, #4
0d9e8     E7 A6 62 FC | 	wrlong	local01, fp
0d9ec                 | ' 
0d9ec                 | ' t1=pop()
0d9ec                 | ' if t1.result_type=result_int then 
0d9ec     08 CE 85 F1 | 	sub	fp, #8
0d9f0     1C A6 0E F2 | 	cmp	local01, #28 wz
0d9f4     E7 92 02 AB |  if_e	rdlong	arg01, fp
0d9f8     49 A7 42 A6 |  if_e	abs	local01, arg01
0d9fc     E7 A6 62 AC |  if_e	wrlong	local01, fp
0da00     2C 00 90 AD |  if_e	jmp	#LR__1140
0da04     08 CE 05 F1 | 	add	fp, #8
0da08     E7 A6 02 FB | 	rdlong	local01, fp
0da0c     08 CE 85 F1 | 	sub	fp, #8
0da10     1E A6 0E F2 | 	cmp	local01, #30 wz
0da14     E7 7A 02 AB |  if_e	rdlong	result1, fp
0da18     1F 7A 06 A4 |  if_e	bitl	result1, #31
0da1c     E7 7A 62 AC |  if_e	wrlong	result1, fp
0da20     08 CE 05 51 |  if_ne	add	fp, #8
0da24     E7 FE 69 5C |  if_ne	wrlong	#255, fp
0da28     08 CE 85 51 |  if_ne	sub	fp, #8
0da2c     E7 50 68 5C |  if_ne	wrlong	#40, fp
0da30                 | LR__1140
0da30     E7 92 02 F6 | 	mov	arg01, fp
0da34     E0 FC BF FD | 	call	#_push
0da38     E7 F0 03 F6 | 	mov	ptra, fp
0da3c     F2 00 A0 FD | 	call	#popregs_
0da40                 | _do_abs_ret
0da40     2D 00 64 FD | 	ret
0da44                 | 
0da44                 | ' 
0da44                 | ' '-------------------- acos
0da44                 | ' 
0da44                 | ' sub do_acos
0da44                 | _do_acos
0da44     00 CA 05 F6 | 	mov	COUNT_, #0
0da48     E8 00 A0 FD | 	call	#pushregs_
0da4c     10 F0 07 F1 | 	add	ptra, #16
0da50     4B 00 00 FF 
0da54     A0 64 06 F1 | 	add	objptr, ##38560
0da58     32 97 02 FB | 	rdlong	arg03, objptr
0da5c     4B 95 02 F6 | 	mov	arg02, arg03
0da60     01 94 66 F0 | 	shl	arg02, #1
0da64     4B 95 02 F1 | 	add	arg02, arg03
0da68     02 94 66 F0 | 	shl	arg02, #2
0da6c     03 00 00 FF 
0da70     04 64 86 F1 | 	sub	objptr, ##1540
0da74     32 95 02 F1 | 	add	arg02, objptr
0da78     4A 97 02 FB | 	rdlong	arg03, arg02
0da7c                 | ' 
0da7c                 | ' numpar=compiledline(lineptr_e).result.uresult
0da7c                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0da7c     02 96 16 F2 | 	cmp	arg03, #2 wc
0da80     48 00 00 FF 
0da84     9C 64 86 F1 | 	sub	objptr, ##37020
0da88     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0da8c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0da90     00 92 06 F6 | 	mov	arg01, #0
0da94     A4 C4 B1 FD | 	call	#__system___getiolock_0622
0da98     3D 93 02 F6 | 	mov	arg01, result1
0da9c     18 6F B1 FD | 	call	#__system___lockmem
0daa0     96 01 00 FF 
0daa4     8C 94 06 F6 | 	mov	arg02, ##@LR__5943
0daa8     00 92 06 F6 | 	mov	arg01, #0
0daac     00 96 06 F6 | 	mov	arg03, #0
0dab0     F8 7B B1 FD | 	call	#__system___basic_print_string
0dab4     00 92 06 F6 | 	mov	arg01, #0
0dab8     80 C4 B1 FD | 	call	#__system___getiolock_0622
0dabc     3D 01 68 FC | 	wrlong	#0, result1
0dac0     27 92 06 F6 | 	mov	arg01, #39
0dac4     00 94 06 F6 | 	mov	arg02, #0
0dac8     70 35 B1 FD | 	call	#_printerror
0dacc     64 00 90 FD | 	jmp	#LR__1151
0dad0                 | LR__1150
0dad0     B4 FB BF FD | 	call	#_pop
0dad4     3F 97 02 F6 | 	mov	arg03, result3
0dad8     E7 7A 62 FC | 	wrlong	result1, fp
0dadc     04 CE 05 F1 | 	add	fp, #4
0dae0     E7 7C 62 FC | 	wrlong	result2, fp
0dae4     04 CE 05 F1 | 	add	fp, #4
0dae8     E7 96 62 FC | 	wrlong	arg03, fp
0daec     08 CE 85 F1 | 	sub	fp, #8
0daf0     E7 92 02 F6 | 	mov	arg01, fp
0daf4     28 FE BF FD | 	call	#_converttofloat
0daf8     3D 93 02 F6 | 	mov	arg01, result1
0dafc     D8 A0 B1 FD | 	call	#__system____builtin_acosf
0db00     3D 93 02 F6 | 	mov	arg01, result1
0db04     53 00 00 FF 
0db08     04 65 06 F1 | 	add	objptr, ##42756
0db0c     32 95 02 FB | 	rdlong	arg02, objptr
0db10     53 00 00 FF 
0db14     04 65 86 F1 | 	sub	objptr, ##42756
0db18     6C 95 B1 FD | 	call	#__system___float_mul
0db1c     E7 7A 62 FC | 	wrlong	result1, fp
0db20     08 CE 05 F1 | 	add	fp, #8
0db24     E7 3C 68 FC | 	wrlong	#30, fp
0db28     08 CE 85 F1 | 	sub	fp, #8
0db2c     E7 92 02 F6 | 	mov	arg01, fp
0db30     E4 FB BF FD | 	call	#_push
0db34                 | LR__1151
0db34     E7 F0 03 F6 | 	mov	ptra, fp
0db38     F2 00 A0 FD | 	call	#popregs_
0db3c                 | _do_acos_ret
0db3c     2D 00 64 FD | 	ret
0db40                 | 
0db40                 | ' 
0db40                 | ' '-------------------- asc
0db40                 | ' 
0db40                 | ' sub do_asc
0db40                 | _do_asc
0db40     00 CA 05 F6 | 	mov	COUNT_, #0
0db44     E8 00 A0 FD | 	call	#pushregs_
0db48     14 F0 07 F1 | 	add	ptra, #20
0db4c     4B 00 00 FF 
0db50     A0 64 06 F1 | 	add	objptr, ##38560
0db54     32 97 02 FB | 	rdlong	arg03, objptr
0db58     4B 95 02 F6 | 	mov	arg02, arg03
0db5c     01 94 66 F0 | 	shl	arg02, #1
0db60     4B 95 02 F1 | 	add	arg02, arg03
0db64     02 94 66 F0 | 	shl	arg02, #2
0db68     03 00 00 FF 
0db6c     04 64 86 F1 | 	sub	objptr, ##1540
0db70     32 95 02 F1 | 	add	arg02, objptr
0db74     4A 97 02 FB | 	rdlong	arg03, arg02
0db78                 | ' 
0db78                 | ' numpar=compiledline(lineptr_e).result.uresult
0db78                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0db78     02 96 16 F2 | 	cmp	arg03, #2 wc
0db7c     48 00 00 FF 
0db80     9C 64 86 F1 | 	sub	objptr, ##37020
0db84     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0db88     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0db8c     00 92 06 F6 | 	mov	arg01, #0
0db90     A8 C3 B1 FD | 	call	#__system___getiolock_0622
0db94     3D 93 02 F6 | 	mov	arg01, result1
0db98     1C 6E B1 FD | 	call	#__system___lockmem
0db9c     96 01 00 FF 
0dba0     93 94 06 F6 | 	mov	arg02, ##@LR__5944
0dba4     00 92 06 F6 | 	mov	arg01, #0
0dba8     00 96 06 F6 | 	mov	arg03, #0
0dbac     FC 7A B1 FD | 	call	#__system___basic_print_string
0dbb0     00 92 06 F6 | 	mov	arg01, #0
0dbb4     84 C3 B1 FD | 	call	#__system___getiolock_0622
0dbb8     3D 01 68 FC | 	wrlong	#0, result1
0dbbc     27 92 06 F6 | 	mov	arg01, #39
0dbc0     00 94 06 F6 | 	mov	arg02, #0
0dbc4     74 34 B1 FD | 	call	#_printerror
0dbc8     B4 00 90 FD | 	jmp	#LR__1163
0dbcc                 | LR__1160
0dbcc     B8 FA BF FD | 	call	#_pop
0dbd0     3F 97 02 F6 | 	mov	arg03, result3
0dbd4     E7 7A 62 FC | 	wrlong	result1, fp
0dbd8     04 CE 05 F1 | 	add	fp, #4
0dbdc     E7 7C 62 FC | 	wrlong	result2, fp
0dbe0     04 CE 05 F1 | 	add	fp, #4
0dbe4     E7 96 62 FC | 	wrlong	arg03, fp
0dbe8                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0dbe8     08 CE 85 F1 | 	sub	fp, #8
0dbec     2B 96 0E F2 | 	cmp	arg03, #43 wz
0dbf0     18 00 90 5D |  if_ne	jmp	#LR__1161
0dbf4     E7 92 02 FB | 	rdlong	arg01, fp
0dbf8     FC FB BF FD | 	call	#_convertstring
0dbfc     E7 7A 62 FC | 	wrlong	result1, fp
0dc00     08 CE 05 F1 | 	add	fp, #8
0dc04     E7 3E 68 FC | 	wrlong	#31, fp
0dc08     08 CE 85 F1 | 	sub	fp, #8
0dc0c                 | LR__1161
0dc0c                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0dc0c     08 CE 05 F1 | 	add	fp, #8
0dc10     E7 96 02 FB | 	rdlong	arg03, fp
0dc14     08 CE 85 F1 | 	sub	fp, #8
0dc18     1F 96 0E F2 | 	cmp	arg03, #31 wz
0dc1c     40 00 90 AD |  if_e	jmp	#LR__1162
0dc20     00 92 06 F6 | 	mov	arg01, #0
0dc24     14 C3 B1 FD | 	call	#__system___getiolock_0622
0dc28     3D 93 02 F6 | 	mov	arg01, result1
0dc2c     88 6D B1 FD | 	call	#__system___lockmem
0dc30     96 01 00 FF 
0dc34     99 94 06 F6 | 	mov	arg02, ##@LR__5945
0dc38     00 92 06 F6 | 	mov	arg01, #0
0dc3c     00 96 06 F6 | 	mov	arg03, #0
0dc40     68 7A B1 FD | 	call	#__system___basic_print_string
0dc44     00 92 06 F6 | 	mov	arg01, #0
0dc48     F0 C2 B1 FD | 	call	#__system___getiolock_0622
0dc4c     3D 01 68 FC | 	wrlong	#0, result1
0dc50     0F 92 06 F6 | 	mov	arg01, #15
0dc54     00 94 06 F6 | 	mov	arg02, #0
0dc58     E0 33 B1 FD | 	call	#_printerror
0dc5c     20 00 90 FD | 	jmp	#LR__1163
0dc60                 | LR__1162
0dc60     E7 7C 02 FB | 	rdlong	result2, fp
0dc64     3E 7D C2 FA | 	rdbyte	result2, result2
0dc68     E7 7C 62 FC | 	wrlong	result2, fp
0dc6c     08 CE 05 F1 | 	add	fp, #8
0dc70     E7 38 68 FC | 	wrlong	#28, fp
0dc74     08 CE 85 F1 | 	sub	fp, #8
0dc78     E7 92 02 F6 | 	mov	arg01, fp
0dc7c     98 FA BF FD | 	call	#_push
0dc80                 | LR__1163
0dc80     E7 F0 03 F6 | 	mov	ptra, fp
0dc84     F2 00 A0 FD | 	call	#popregs_
0dc88                 | _do_asc_ret
0dc88     2D 00 64 FD | 	ret
0dc8c                 | 
0dc8c                 | ' 
0dc8c                 | ' '-------------------- asin
0dc8c                 | ' 
0dc8c                 | ' sub do_asin
0dc8c                 | _do_asin
0dc8c     00 CA 05 F6 | 	mov	COUNT_, #0
0dc90     E8 00 A0 FD | 	call	#pushregs_
0dc94     10 F0 07 F1 | 	add	ptra, #16
0dc98     4B 00 00 FF 
0dc9c     A0 64 06 F1 | 	add	objptr, ##38560
0dca0     32 97 02 FB | 	rdlong	arg03, objptr
0dca4     4B 95 02 F6 | 	mov	arg02, arg03
0dca8     01 94 66 F0 | 	shl	arg02, #1
0dcac     4B 95 02 F1 | 	add	arg02, arg03
0dcb0     02 94 66 F0 | 	shl	arg02, #2
0dcb4     03 00 00 FF 
0dcb8     04 64 86 F1 | 	sub	objptr, ##1540
0dcbc     32 95 02 F1 | 	add	arg02, objptr
0dcc0     4A 97 02 FB | 	rdlong	arg03, arg02
0dcc4                 | ' 
0dcc4                 | ' numpar=compiledline(lineptr_e).result.uresult
0dcc4                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0dcc4     02 96 16 F2 | 	cmp	arg03, #2 wc
0dcc8     48 00 00 FF 
0dccc     9C 64 86 F1 | 	sub	objptr, ##37020
0dcd0     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0dcd4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0dcd8     00 92 06 F6 | 	mov	arg01, #0
0dcdc     5C C2 B1 FD | 	call	#__system___getiolock_0622
0dce0     3D 93 02 F6 | 	mov	arg01, result1
0dce4     D0 6C B1 FD | 	call	#__system___lockmem
0dce8     96 01 00 FF 
0dcec     9F 94 06 F6 | 	mov	arg02, ##@LR__5946
0dcf0     00 92 06 F6 | 	mov	arg01, #0
0dcf4     00 96 06 F6 | 	mov	arg03, #0
0dcf8     B0 79 B1 FD | 	call	#__system___basic_print_string
0dcfc     00 92 06 F6 | 	mov	arg01, #0
0dd00     38 C2 B1 FD | 	call	#__system___getiolock_0622
0dd04     3D 01 68 FC | 	wrlong	#0, result1
0dd08     27 92 06 F6 | 	mov	arg01, #39
0dd0c     00 94 06 F6 | 	mov	arg02, #0
0dd10     28 33 B1 FD | 	call	#_printerror
0dd14     64 00 90 FD | 	jmp	#LR__1171
0dd18                 | LR__1170
0dd18     6C F9 BF FD | 	call	#_pop
0dd1c     3F 97 02 F6 | 	mov	arg03, result3
0dd20     E7 7A 62 FC | 	wrlong	result1, fp
0dd24     04 CE 05 F1 | 	add	fp, #4
0dd28     E7 7C 62 FC | 	wrlong	result2, fp
0dd2c     04 CE 05 F1 | 	add	fp, #4
0dd30     E7 96 62 FC | 	wrlong	arg03, fp
0dd34     08 CE 85 F1 | 	sub	fp, #8
0dd38     E7 92 02 F6 | 	mov	arg01, fp
0dd3c     E0 FB BF FD | 	call	#_converttofloat
0dd40     3D 93 02 F6 | 	mov	arg01, result1
0dd44     44 9E B1 FD | 	call	#__system____builtin_asinf
0dd48     3D 93 02 F6 | 	mov	arg01, result1
0dd4c     53 00 00 FF 
0dd50     04 65 06 F1 | 	add	objptr, ##42756
0dd54     32 95 02 FB | 	rdlong	arg02, objptr
0dd58     53 00 00 FF 
0dd5c     04 65 86 F1 | 	sub	objptr, ##42756
0dd60     24 93 B1 FD | 	call	#__system___float_mul
0dd64     E7 7A 62 FC | 	wrlong	result1, fp
0dd68     08 CE 05 F1 | 	add	fp, #8
0dd6c     E7 3C 68 FC | 	wrlong	#30, fp
0dd70     08 CE 85 F1 | 	sub	fp, #8
0dd74     E7 92 02 F6 | 	mov	arg01, fp
0dd78     9C F9 BF FD | 	call	#_push
0dd7c                 | LR__1171
0dd7c     E7 F0 03 F6 | 	mov	ptra, fp
0dd80     F2 00 A0 FD | 	call	#popregs_
0dd84                 | _do_asin_ret
0dd84     2D 00 64 FD | 	ret
0dd88                 | 
0dd88                 | ' 
0dd88                 | ' '-------------------- atn
0dd88                 | ' 
0dd88                 | ' sub do_atn
0dd88                 | _do_atn
0dd88     00 CA 05 F6 | 	mov	COUNT_, #0
0dd8c     E8 00 A0 FD | 	call	#pushregs_
0dd90     10 F0 07 F1 | 	add	ptra, #16
0dd94     4B 00 00 FF 
0dd98     A0 64 06 F1 | 	add	objptr, ##38560
0dd9c     32 97 02 FB | 	rdlong	arg03, objptr
0dda0     4B 95 02 F6 | 	mov	arg02, arg03
0dda4     01 94 66 F0 | 	shl	arg02, #1
0dda8     4B 95 02 F1 | 	add	arg02, arg03
0ddac     02 94 66 F0 | 	shl	arg02, #2
0ddb0     03 00 00 FF 
0ddb4     04 64 86 F1 | 	sub	objptr, ##1540
0ddb8     32 95 02 F1 | 	add	arg02, objptr
0ddbc     4A 97 02 FB | 	rdlong	arg03, arg02
0ddc0                 | ' 
0ddc0                 | ' numpar=compiledline(lineptr_e).result.uresult
0ddc0                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0ddc0     02 96 16 F2 | 	cmp	arg03, #2 wc
0ddc4     48 00 00 FF 
0ddc8     9C 64 86 F1 | 	sub	objptr, ##37020
0ddcc     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0ddd0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1180
0ddd4     00 92 06 F6 | 	mov	arg01, #0
0ddd8     60 C1 B1 FD | 	call	#__system___getiolock_0622
0dddc     3D 93 02 F6 | 	mov	arg01, result1
0dde0     D4 6B B1 FD | 	call	#__system___lockmem
0dde4     96 01 00 FF 
0dde8     A6 94 06 F6 | 	mov	arg02, ##@LR__5947
0ddec     00 92 06 F6 | 	mov	arg01, #0
0ddf0     00 96 06 F6 | 	mov	arg03, #0
0ddf4     B4 78 B1 FD | 	call	#__system___basic_print_string
0ddf8     00 92 06 F6 | 	mov	arg01, #0
0ddfc     3C C1 B1 FD | 	call	#__system___getiolock_0622
0de00     3D 01 68 FC | 	wrlong	#0, result1
0de04     27 92 06 F6 | 	mov	arg01, #39
0de08     00 94 06 F6 | 	mov	arg02, #0
0de0c     2C 32 B1 FD | 	call	#_printerror
0de10     6C 00 90 FD | 	jmp	#LR__1181
0de14                 | LR__1180
0de14     70 F8 BF FD | 	call	#_pop
0de18     3F 97 02 F6 | 	mov	arg03, result3
0de1c     E7 7A 62 FC | 	wrlong	result1, fp
0de20     04 CE 05 F1 | 	add	fp, #4
0de24     E7 7C 62 FC | 	wrlong	result2, fp
0de28     04 CE 05 F1 | 	add	fp, #4
0de2c     E7 96 62 FC | 	wrlong	arg03, fp
0de30     08 CE 85 F1 | 	sub	fp, #8
0de34     E7 92 02 F6 | 	mov	arg01, fp
0de38     E4 FA BF FD | 	call	#_converttofloat
0de3c     3D 93 02 F6 | 	mov	arg01, result1
0de40     00 C0 1F FF 
0de44     00 94 06 F6 | 	mov	arg02, ##1065353216
0de48     D8 9D B1 FD | 	call	#__system____builtin_atan2f
0de4c     3D 93 02 F6 | 	mov	arg01, result1
0de50     53 00 00 FF 
0de54     04 65 06 F1 | 	add	objptr, ##42756
0de58     32 95 02 FB | 	rdlong	arg02, objptr
0de5c     53 00 00 FF 
0de60     04 65 86 F1 | 	sub	objptr, ##42756
0de64     20 92 B1 FD | 	call	#__system___float_mul
0de68     E7 7A 62 FC | 	wrlong	result1, fp
0de6c     08 CE 05 F1 | 	add	fp, #8
0de70     E7 3C 68 FC | 	wrlong	#30, fp
0de74     08 CE 85 F1 | 	sub	fp, #8
0de78     E7 92 02 F6 | 	mov	arg01, fp
0de7c     98 F8 BF FD | 	call	#_push
0de80                 | LR__1181
0de80     E7 F0 03 F6 | 	mov	ptra, fp
0de84     F2 00 A0 FD | 	call	#popregs_
0de88                 | _do_atn_ret
0de88     2D 00 64 FD | 	ret
0de8c                 | 
0de8c                 | ' 
0de8c                 | ' '-------------------- beep
0de8c                 | ' 
0de8c                 | ' sub do_beep
0de8c                 | _do_beep
0de8c     02 CA 05 F6 | 	mov	COUNT_, #2
0de90     E8 00 A0 FD | 	call	#pushregs_
0de94     20 F0 07 F1 | 	add	ptra, #32
0de98     EC F7 BF FD | 	call	#_pop
0de9c     3D 9D 02 F6 | 	mov	arg06, result1
0dea0     3E 9B 02 F6 | 	mov	arg05, result2
0dea4     3F A7 02 F6 | 	mov	local01, result3
0dea8     0C CE 05 F1 | 	add	fp, #12
0deac     E7 9C 62 FC | 	wrlong	arg06, fp
0deb0     04 CE 05 F1 | 	add	fp, #4
0deb4     E7 9A 62 FC | 	wrlong	arg05, fp
0deb8     04 CE 05 F1 | 	add	fp, #4
0debc     E7 A6 62 FC | 	wrlong	local01, fp
0dec0     14 CE 85 F1 | 	sub	fp, #20
0dec4     C0 F7 BF FD | 	call	#_pop
0dec8     E7 7A 62 FC | 	wrlong	result1, fp
0decc     04 CE 05 F1 | 	add	fp, #4
0ded0     E7 7C 62 FC | 	wrlong	result2, fp
0ded4     04 CE 05 F1 | 	add	fp, #4
0ded8     E7 7E 62 FC | 	wrlong	result3, fp
0dedc                 | ' 
0dedc                 | ' t2=pop()
0dedc                 | ' t1=pop()
0dedc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0dedc     3F 9D 02 F6 | 	mov	arg06, result3
0dee0     08 CE 85 F1 | 	sub	fp, #8
0dee4     1C 9C 0E F2 | 	cmp	arg06, #28 wz
0dee8     08 CE 05 51 |  if_ne	add	fp, #8
0deec     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0def0     08 CE 85 51 |  if_ne	sub	fp, #8
0def4     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0def8     E7 A8 02 AB |  if_e	rdlong	local02, fp
0defc     0C 00 90 AD |  if_e	jmp	#LR__1190
0df00     E7 92 02 F6 | 	mov	arg01, fp
0df04     5C F9 BF FD | 	call	#_converttoint
0df08     3D A9 02 F6 | 	mov	local02, result1
0df0c                 | LR__1190
0df0c     1C CE 05 F1 | 	add	fp, #28
0df10     E7 FE 48 FC | 	wrbyte	#127, fp
0df14     01 CE 05 F1 | 	add	fp, #1
0df18     E7 00 49 FC | 	wrbyte	#128, fp
0df1c     01 CE 85 F1 | 	sub	fp, #1
0df20     E7 94 02 F6 | 	mov	arg02, fp
0df24     1C CE 85 F1 | 	sub	fp, #28
0df28     01 A8 66 F0 | 	shl	local02, #1
0df2c     07 92 06 F6 | 	mov	arg01, #7
0df30     54 97 02 F6 | 	mov	arg03, local02
0df34     0E 98 C6 F9 | 	decod	arg04, #14
0df38     02 9A 06 F6 | 	mov	arg05, #2
0df3c     00 9C 06 F6 | 	mov	arg06, #0
0df40     0B 00 00 FF 
0df44     CC 64 06 F1 | 	add	objptr, ##5836
0df48     2C 66 B1 FD | 	call	#_Audio2_003_spin2_play8
0df4c     0B 00 00 FF 
0df50     CC 64 86 F1 | 	sub	objptr, ##5836
0df54     E7 92 02 F6 | 	mov	arg01, fp
0df58     0C 92 06 F1 | 	add	arg01, #12
0df5c     B8 F7 BF FD | 	call	#_push
0df60     BC D7 B0 FD | 	call	#_do_waitms
0df64     0B 00 00 FF 
0df68     CC 64 06 F1 | 	add	objptr, ##5836
0df6c                 | ' 
0df6c                 | ' base2:=@channel0[0]+64*channel
0df6c     32 A9 02 F6 | 	mov	local02, objptr
0df70                 | ' word[base2+32]:=0
0df70     EC A9 06 F1 | 	add	local02, #492
0df74     54 01 58 FC | 	wrword	#0, local02
0df78     0B 00 00 FF 
0df7c     CC 64 86 F1 | 	sub	objptr, ##5836
0df80     E7 F0 03 F6 | 	mov	ptra, fp
0df84     F2 00 A0 FD | 	call	#popregs_
0df88                 | _do_beep_ret
0df88     2D 00 64 FD | 	ret
0df8c                 | 
0df8c                 | ' 
0df8c                 | ' '-------------------- blit
0df8c                 | ' 
0df8c                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0df8c                 | ' sub do_blit
0df8c                 | _do_blit
0df8c     03 CA 05 F6 | 	mov	COUNT_, #3
0df90     E8 00 A0 FD | 	call	#pushregs_
0df94     3C F0 07 F1 | 	add	ptra, #60
0df98     4B 00 00 FF 
0df9c     A0 64 06 F1 | 	add	objptr, ##38560
0dfa0     32 A5 02 FB | 	rdlong	arg10, objptr
0dfa4     52 A3 02 F6 | 	mov	arg09, arg10
0dfa8     01 A2 66 F0 | 	shl	arg09, #1
0dfac     52 A3 02 F1 | 	add	arg09, arg10
0dfb0     02 A2 66 F0 | 	shl	arg09, #2
0dfb4     03 00 00 FF 
0dfb8     04 64 86 F1 | 	sub	objptr, ##1540
0dfbc     32 A3 02 F1 | 	add	arg09, objptr
0dfc0     51 A7 02 FB | 	rdlong	local01, arg09
0dfc4                 | ' 
0dfc4                 | ' numpar=compiledline(lineptr_e).result.uresult
0dfc4                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0dfc4     0A A6 0E F2 | 	cmp	local01, #10 wz
0dfc8     48 00 00 FF 
0dfcc     9C 64 86 F1 | 	sub	objptr, ##37020
0dfd0     06 A6 0E 52 |  if_ne	cmp	local01, #6 wz
0dfd4     50 00 90 AD |  if_e	jmp	#LR__1200
0dfd8     00 92 06 F6 | 	mov	arg01, #0
0dfdc     5C BF B1 FD | 	call	#__system___getiolock_0622
0dfe0     3D 93 02 F6 | 	mov	arg01, result1
0dfe4     D0 69 B1 FD | 	call	#__system___lockmem
0dfe8     96 01 00 FF 
0dfec     AC 94 06 F6 | 	mov	arg02, ##@LR__5948
0dff0     00 92 06 F6 | 	mov	arg01, #0
0dff4     00 96 06 F6 | 	mov	arg03, #0
0dff8     B0 76 B1 FD | 	call	#__system___basic_print_string
0dffc     00 92 06 F6 | 	mov	arg01, #0
0e000     38 BF B1 FD | 	call	#__system___getiolock_0622
0e004     3D 01 68 FC | 	wrlong	#0, result1
0e008     51 00 00 FF 
0e00c     10 65 06 F1 | 	add	objptr, ##41744
0e010     32 95 02 FB | 	rdlong	arg02, objptr
0e014     51 00 00 FF 
0e018     10 65 86 F1 | 	sub	objptr, ##41744
0e01c     27 92 06 F6 | 	mov	arg01, #39
0e020     18 30 B1 FD | 	call	#_printerror
0e024     04 01 90 FD | 	jmp	#LR__1205
0e028                 | LR__1200
0e028                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0e028     53 A9 02 F6 | 	mov	local02, local01
0e02c     01 A8 86 F1 | 	sub	local02, #1
0e030                 | LR__1201
0e030     53 A5 02 F6 | 	mov	arg10, local01
0e034     01 A4 86 F1 | 	sub	arg10, #1
0e038     52 A9 1A F2 | 	cmp	local02, arg10 wcz
0e03c     40 00 90 1D |  if_a	jmp	#LR__1202
0e040     44 F6 BF FD | 	call	#_pop
0e044     E7 7A 62 FC | 	wrlong	result1, fp
0e048     04 CE 05 F1 | 	add	fp, #4
0e04c     E7 7C 62 FC | 	wrlong	result2, fp
0e050     04 CE 05 F1 | 	add	fp, #4
0e054     E7 7E 62 FC | 	wrlong	result3, fp
0e058     54 AB 02 F6 | 	mov	local03, local02
0e05c     02 AA 66 F0 | 	shl	local03, #2
0e060     04 CE 05 F1 | 	add	fp, #4
0e064     E7 AA 02 F1 | 	add	local03, fp
0e068     0C CE 85 F1 | 	sub	fp, #12
0e06c     E7 92 02 F6 | 	mov	arg01, fp
0e070     F0 F7 BF FD | 	call	#_converttoint
0e074     55 7B 62 FC | 	wrlong	result1, local03
0e078     01 A8 86 F1 | 	sub	local02, #1
0e07c     B0 FF 9F FD | 	jmp	#LR__1201
0e080                 | LR__1202
0e080                 | ' if numpar=10 then 
0e080     0A A6 0E F2 | 	cmp	local01, #10 wz
0e084     5C 00 90 5D |  if_ne	jmp	#LR__1203
0e088     0C CE 05 F1 | 	add	fp, #12
0e08c     E7 92 02 FB | 	rdlong	arg01, fp
0e090     04 CE 05 F1 | 	add	fp, #4
0e094     E7 94 02 FB | 	rdlong	arg02, fp
0e098     04 CE 05 F1 | 	add	fp, #4
0e09c     E7 96 02 FB | 	rdlong	arg03, fp
0e0a0     04 CE 05 F1 | 	add	fp, #4
0e0a4     E7 98 02 FB | 	rdlong	arg04, fp
0e0a8     04 CE 05 F1 | 	add	fp, #4
0e0ac     E7 9A 02 FB | 	rdlong	arg05, fp
0e0b0     04 CE 05 F1 | 	add	fp, #4
0e0b4     E7 9C 02 FB | 	rdlong	arg06, fp
0e0b8     04 CE 05 F1 | 	add	fp, #4
0e0bc     E7 9E 02 FB | 	rdlong	arg07, fp
0e0c0     04 CE 05 F1 | 	add	fp, #4
0e0c4     E7 A0 02 FB | 	rdlong	arg08, fp
0e0c8     04 CE 05 F1 | 	add	fp, #4
0e0cc     E7 A2 02 FB | 	rdlong	arg09, fp
0e0d0     04 CE 05 F1 | 	add	fp, #4
0e0d4     E7 A4 02 FB | 	rdlong	arg10, fp
0e0d8     30 CE 85 F1 | 	sub	fp, #48
0e0dc     08 57 B1 FD | 	call	#_hg010b_spin2_blit
0e0e0     48 00 90 FD | 	jmp	#LR__1204
0e0e4                 | LR__1203
0e0e4     32 9F 02 FB | 	rdlong	arg07, objptr
0e0e8     0C CE 05 F1 | 	add	fp, #12
0e0ec     E7 94 02 FB | 	rdlong	arg02, fp
0e0f0     04 CE 05 F1 | 	add	fp, #4
0e0f4     E7 96 02 FB | 	rdlong	arg03, fp
0e0f8     04 CE 05 F1 | 	add	fp, #4
0e0fc     E7 98 02 FB | 	rdlong	arg04, fp
0e100     04 CE 05 F1 | 	add	fp, #4
0e104     E7 9A 02 FB | 	rdlong	arg05, fp
0e108     04 CE 05 F1 | 	add	fp, #4
0e10c     E7 A0 02 FB | 	rdlong	arg08, fp
0e110     04 CE 05 F1 | 	add	fp, #4
0e114     E7 A2 02 FB | 	rdlong	arg09, fp
0e118     20 CE 85 F1 | 	sub	fp, #32
0e11c     4F 93 02 F6 | 	mov	arg01, arg07
0e120     0A 9C C6 F9 | 	decod	arg06, #10
0e124     0A A4 C6 F9 | 	decod	arg10, #10
0e128     BC 56 B1 FD | 	call	#_hg010b_spin2_blit
0e12c                 | LR__1204
0e12c                 | LR__1205
0e12c     E7 F0 03 F6 | 	mov	ptra, fp
0e130     F2 00 A0 FD | 	call	#popregs_
0e134                 | _do_blit_ret
0e134     2D 00 64 FD | 	ret
0e138                 | 
0e138                 | ' 
0e138                 | ' 
0e138                 | ' '-------------------- bin$
0e138                 | ' 
0e138                 | ' sub do_bin
0e138                 | _do_bin
0e138     02 CA 05 F6 | 	mov	COUNT_, #2
0e13c     E8 00 A0 FD | 	call	#pushregs_
0e140     18 F0 07 F1 | 	add	ptra, #24
0e144     4B 00 00 FF 
0e148     A0 64 06 F1 | 	add	objptr, ##38560
0e14c     32 97 02 FB | 	rdlong	arg03, objptr
0e150     4B 95 02 F6 | 	mov	arg02, arg03
0e154     01 94 66 F0 | 	shl	arg02, #1
0e158     4B 95 02 F1 | 	add	arg02, arg03
0e15c     02 94 66 F0 | 	shl	arg02, #2
0e160     03 00 00 FF 
0e164     04 64 86 F1 | 	sub	objptr, ##1540
0e168     32 95 02 F1 | 	add	arg02, objptr
0e16c     4A A7 02 FB | 	rdlong	local01, arg02
0e170                 | ' 
0e170                 | ' numpar=compiledline(lineptr_e).result.uresult
0e170                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e170     03 A6 16 F2 | 	cmp	local01, #3 wc
0e174     48 00 00 FF 
0e178     9C 64 86 F1 | 	sub	objptr, ##37020
0e17c     00 A6 0E C2 |  if_b	cmp	local01, #0 wz
0e180     40 00 90 4D |  if_c_and_nz	jmp	#LR__1210
0e184     00 92 06 F6 | 	mov	arg01, #0
0e188     B0 BD B1 FD | 	call	#__system___getiolock_0622
0e18c     3D 93 02 F6 | 	mov	arg01, result1
0e190     24 68 B1 FD | 	call	#__system___lockmem
0e194     96 01 00 FF 
0e198     B3 94 06 F6 | 	mov	arg02, ##@LR__5949
0e19c     00 92 06 F6 | 	mov	arg01, #0
0e1a0     00 96 06 F6 | 	mov	arg03, #0
0e1a4     04 75 B1 FD | 	call	#__system___basic_print_string
0e1a8     00 92 06 F6 | 	mov	arg01, #0
0e1ac     8C BD B1 FD | 	call	#__system___getiolock_0622
0e1b0     3D 01 68 FC | 	wrlong	#0, result1
0e1b4     27 92 06 F6 | 	mov	arg01, #39
0e1b8     00 94 06 F6 | 	mov	arg02, #0
0e1bc     7C 2E B1 FD | 	call	#_printerror
0e1c0     8C 00 90 FD | 	jmp	#LR__1213
0e1c4                 | LR__1210
0e1c4                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e1c4     02 A6 0E F2 | 	cmp	local01, #2 wz
0e1c8     30 00 90 5D |  if_ne	jmp	#LR__1211
0e1cc     B8 F4 BF FD | 	call	#_pop
0e1d0     3F A7 02 F6 | 	mov	local01, result3
0e1d4     E7 7A 62 FC | 	wrlong	result1, fp
0e1d8     04 CE 05 F1 | 	add	fp, #4
0e1dc     E7 7C 62 FC | 	wrlong	result2, fp
0e1e0     04 CE 05 F1 | 	add	fp, #4
0e1e4     E7 A6 62 FC | 	wrlong	local01, fp
0e1e8     08 CE 85 F1 | 	sub	fp, #8
0e1ec     E7 92 02 F6 | 	mov	arg01, fp
0e1f0     70 F6 BF FD | 	call	#_converttoint
0e1f4     3D A9 02 F6 | 	mov	local02, result1
0e1f8     04 00 90 FD | 	jmp	#LR__1212
0e1fc                 | LR__1211
0e1fc     00 A8 06 F6 | 	mov	local02, #0
0e200                 | LR__1212
0e200     84 F4 BF FD | 	call	#_pop
0e204     3F A7 02 F6 | 	mov	local01, result3
0e208     E7 7A 62 FC | 	wrlong	result1, fp
0e20c     04 CE 05 F1 | 	add	fp, #4
0e210     E7 7C 62 FC | 	wrlong	result2, fp
0e214     04 CE 05 F1 | 	add	fp, #4
0e218     E7 A6 62 FC | 	wrlong	local01, fp
0e21c     08 CE 85 F1 | 	sub	fp, #8
0e220     E7 92 02 F6 | 	mov	arg01, fp
0e224     3C F6 BF FD | 	call	#_converttoint
0e228     3D 93 02 F6 | 	mov	arg01, result1
0e22c     54 95 02 F6 | 	mov	arg02, local02
0e230     02 96 06 F6 | 	mov	arg03, #2
0e234     7C 82 B1 FD | 	call	#__system__Number_S
0e238     E7 7A 62 FC | 	wrlong	result1, fp
0e23c     08 CE 05 F1 | 	add	fp, #8
0e240     E7 3E 68 FC | 	wrlong	#31, fp
0e244     08 CE 85 F1 | 	sub	fp, #8
0e248     E7 92 02 F6 | 	mov	arg01, fp
0e24c     C8 F4 BF FD | 	call	#_push
0e250                 | LR__1213
0e250     E7 F0 03 F6 | 	mov	ptra, fp
0e254     F2 00 A0 FD | 	call	#popregs_
0e258                 | _do_bin_ret
0e258     2D 00 64 FD | 	ret
0e25c                 | 
0e25c                 | ' 
0e25c                 | ' '-------------------- box
0e25c                 | ' 
0e25c                 | ' sub do_box
0e25c                 | _do_box
0e25c     03 CA 05 F6 | 	mov	COUNT_, #3
0e260     E8 00 A0 FD | 	call	#pushregs_
0e264     30 F0 07 F1 | 	add	ptra, #48
0e268     1C F4 BF FD | 	call	#_pop
0e26c     3D 9B 02 F6 | 	mov	arg05, result1
0e270     3E 99 02 F6 | 	mov	arg04, result2
0e274     3F 97 02 F6 | 	mov	arg03, result3
0e278     24 CE 05 F1 | 	add	fp, #36
0e27c     E7 9A 62 FC | 	wrlong	arg05, fp
0e280     04 CE 05 F1 | 	add	fp, #4
0e284     E7 98 62 FC | 	wrlong	arg04, fp
0e288     04 CE 05 F1 | 	add	fp, #4
0e28c     E7 96 62 FC | 	wrlong	arg03, fp
0e290     2C CE 85 F1 | 	sub	fp, #44
0e294     F0 F3 BF FD | 	call	#_pop
0e298     3D 9B 02 F6 | 	mov	arg05, result1
0e29c     3E 99 02 F6 | 	mov	arg04, result2
0e2a0     3F 97 02 F6 | 	mov	arg03, result3
0e2a4     18 CE 05 F1 | 	add	fp, #24
0e2a8     E7 9A 62 FC | 	wrlong	arg05, fp
0e2ac     04 CE 05 F1 | 	add	fp, #4
0e2b0     E7 98 62 FC | 	wrlong	arg04, fp
0e2b4     04 CE 05 F1 | 	add	fp, #4
0e2b8     E7 96 62 FC | 	wrlong	arg03, fp
0e2bc     20 CE 85 F1 | 	sub	fp, #32
0e2c0     C4 F3 BF FD | 	call	#_pop
0e2c4     3D 9B 02 F6 | 	mov	arg05, result1
0e2c8     3E 99 02 F6 | 	mov	arg04, result2
0e2cc     3F A7 02 F6 | 	mov	local01, result3
0e2d0     0C CE 05 F1 | 	add	fp, #12
0e2d4     E7 9A 62 FC | 	wrlong	arg05, fp
0e2d8     04 CE 05 F1 | 	add	fp, #4
0e2dc     E7 98 62 FC | 	wrlong	arg04, fp
0e2e0     04 CE 05 F1 | 	add	fp, #4
0e2e4     E7 A6 62 FC | 	wrlong	local01, fp
0e2e8     14 CE 85 F1 | 	sub	fp, #20
0e2ec     98 F3 BF FD | 	call	#_pop
0e2f0     E7 7A 62 FC | 	wrlong	result1, fp
0e2f4     04 CE 05 F1 | 	add	fp, #4
0e2f8     E7 7C 62 FC | 	wrlong	result2, fp
0e2fc     04 CE 05 F1 | 	add	fp, #4
0e300     E7 7E 62 FC | 	wrlong	result3, fp
0e304                 | ' 
0e304                 | ' t4=pop()
0e304                 | ' t3=pop()
0e304                 | ' t2=pop()
0e304                 | ' t1=pop()
0e304                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e304     3F 9B 02 F6 | 	mov	arg05, result3
0e308     08 CE 85 F1 | 	sub	fp, #8
0e30c     1C 9A 0E F2 | 	cmp	arg05, #28 wz
0e310     08 CE 05 51 |  if_ne	add	fp, #8
0e314     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0e318     08 CE 85 51 |  if_ne	sub	fp, #8
0e31c     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0e320     A8 00 90 5D |  if_ne	jmp	#LR__1220
0e324     14 CE 05 F1 | 	add	fp, #20
0e328     E7 A6 02 FB | 	rdlong	local01, fp
0e32c     14 CE 85 F1 | 	sub	fp, #20
0e330     1C A6 0E F2 | 	cmp	local01, #28 wz
0e334     14 CE 05 51 |  if_ne	add	fp, #20
0e338     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e33c     14 CE 85 51 |  if_ne	sub	fp, #20
0e340     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e344     84 00 90 5D |  if_ne	jmp	#LR__1220
0e348     20 CE 05 F1 | 	add	fp, #32
0e34c     E7 A6 02 FB | 	rdlong	local01, fp
0e350     20 CE 85 F1 | 	sub	fp, #32
0e354     1C A6 0E F2 | 	cmp	local01, #28 wz
0e358     20 CE 05 51 |  if_ne	add	fp, #32
0e35c     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e360     20 CE 85 51 |  if_ne	sub	fp, #32
0e364     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e368     60 00 90 5D |  if_ne	jmp	#LR__1220
0e36c     2C CE 05 F1 | 	add	fp, #44
0e370     E7 A6 02 FB | 	rdlong	local01, fp
0e374     2C CE 85 F1 | 	sub	fp, #44
0e378     1C A6 0E F2 | 	cmp	local01, #28 wz
0e37c     2C CE 05 51 |  if_ne	add	fp, #44
0e380     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e384     2C CE 85 51 |  if_ne	sub	fp, #44
0e388     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e38c     3C 00 90 5D |  if_ne	jmp	#LR__1220
0e390     E7 92 02 FB | 	rdlong	arg01, fp
0e394     0C CE 05 F1 | 	add	fp, #12
0e398     E7 94 02 FB | 	rdlong	arg02, fp
0e39c     0C CE 05 F1 | 	add	fp, #12
0e3a0     E7 96 02 FB | 	rdlong	arg03, fp
0e3a4     0C CE 05 F1 | 	add	fp, #12
0e3a8     E7 98 02 FB | 	rdlong	arg04, fp
0e3ac     24 CE 85 F1 | 	sub	fp, #36
0e3b0     38 00 00 FF 
0e3b4     48 64 06 F1 | 	add	objptr, ##28744
0e3b8     32 9B 02 FB | 	rdlong	arg05, objptr
0e3bc     38 00 00 FF 
0e3c0     48 64 86 F1 | 	sub	objptr, ##28744
0e3c4     E0 46 B1 FD | 	call	#_hg010b_spin2_box
0e3c8                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e3c8     60 00 90 FD | 	jmp	#LR__1221
0e3cc                 | LR__1220
0e3cc     E7 92 02 F6 | 	mov	arg01, fp
0e3d0     90 F4 BF FD | 	call	#_converttoint
0e3d4     3D A9 02 F6 | 	mov	local02, result1
0e3d8     E7 92 02 F6 | 	mov	arg01, fp
0e3dc     0C 92 06 F1 | 	add	arg01, #12
0e3e0     80 F4 BF FD | 	call	#_converttoint
0e3e4     3D AB 02 F6 | 	mov	local03, result1
0e3e8     E7 92 02 F6 | 	mov	arg01, fp
0e3ec     18 92 06 F1 | 	add	arg01, #24
0e3f0     70 F4 BF FD | 	call	#_converttoint
0e3f4     3D A7 02 F6 | 	mov	local01, result1
0e3f8     E7 92 02 F6 | 	mov	arg01, fp
0e3fc     24 92 06 F1 | 	add	arg01, #36
0e400     60 F4 BF FD | 	call	#_converttoint
0e404     3D 99 02 F6 | 	mov	arg04, result1
0e408     38 00 00 FF 
0e40c     48 64 06 F1 | 	add	objptr, ##28744
0e410     32 9B 02 FB | 	rdlong	arg05, objptr
0e414     38 00 00 FF 
0e418     48 64 86 F1 | 	sub	objptr, ##28744
0e41c     54 93 02 F6 | 	mov	arg01, local02
0e420     55 95 02 F6 | 	mov	arg02, local03
0e424     53 97 02 F6 | 	mov	arg03, local01
0e428     7C 46 B1 FD | 	call	#_hg010b_spin2_box
0e42c                 | LR__1221
0e42c     E7 F0 03 F6 | 	mov	ptra, fp
0e430     F2 00 A0 FD | 	call	#popregs_
0e434                 | _do_box_ret
0e434     2D 00 64 FD | 	ret
0e438                 | 
0e438                 | ' 
0e438                 | ' '-------------------- brun
0e438                 | ' 
0e438                 | ' sub do_brun
0e438                 | _do_brun
0e438     08 CA 05 F6 | 	mov	COUNT_, #8
0e43c     E8 00 A0 FD | 	call	#pushregs_
0e440     44 F2 BF FD | 	call	#_pop
0e444     3E 9B 02 F6 | 	mov	arg05, result2
0e448     3F 99 02 F6 | 	mov	arg04, result3
0e44c     3D A7 02 F6 | 	mov	local01, result1
0e450     4D A9 02 F6 | 	mov	local02, arg05
0e454     4C AB 02 F6 | 	mov	local03, arg04
0e458                 | ' 
0e458                 | ' t1=pop() 
0e458                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e458     2B AA 0E F2 | 	cmp	local03, #43 wz
0e45c     10 00 90 5D |  if_ne	jmp	#LR__1230
0e460     53 93 02 F6 | 	mov	arg01, local01
0e464     90 F3 BF FD | 	call	#_convertstring
0e468     3D A7 02 F6 | 	mov	local01, result1
0e46c     1F AA 06 F6 | 	mov	local03, #31
0e470                 | LR__1230
0e470                 | ' if t1.result_type=result_string then
0e470     1F AA 0E F2 | 	cmp	local03, #31 wz
0e474     EC 01 90 5D |  if_ne	jmp	#LR__1234
0e478     53 AD 02 F6 | 	mov	local04, local01
0e47c                 | '   filename=t1.result.sresult
0e47c                 | '   if left$(filename,1)="/" then 
0e47c     56 93 02 F6 | 	mov	arg01, local04
0e480     01 94 06 F6 | 	mov	arg02, #1
0e484     D8 7D B1 FD | 	call	#__system__Left_S
0e488     3D 93 02 F6 | 	mov	arg01, result1
0e48c     96 01 00 FF 
0e490     BA 94 06 F6 | 	mov	arg02, ##@LR__5950
0e494     48 65 B1 FD | 	call	#__system___string_cmp
0e498     00 7A 0E F2 | 	cmp	result1, #0 wz
0e49c     56 AF 02 A6 |  if_e	mov	local05, local04
0e4a0     14 00 90 AD |  if_e	jmp	#LR__1231
0e4a4     96 01 00 FF 
0e4a8     BC 92 06 F6 | 	mov	arg01, ##@LR__5951
0e4ac     56 95 02 F6 | 	mov	arg02, local04
0e4b0     60 65 B1 FD | 	call	#__system___string_concat
0e4b4     3D AF 02 F6 | 	mov	local05, result1
0e4b8                 | LR__1231
0e4b8                 | '   open fullfilename for input as #9
0e4b8     09 92 06 F6 | 	mov	arg01, #9
0e4bc     57 95 02 F6 | 	mov	arg02, local05
0e4c0     00 96 06 F6 | 	mov	arg03, #0
0e4c4     A0 70 B1 FD | 	call	#__system___basic_open_string
0e4c8     20 68 06 F1 | 	add	ptr___system__dat__, #32
0e4cc     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e4d0     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e4d4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0e4d8     3D B1 0A F6 | 	mov	local06, result1 wz
0e4dc                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e4dc     8C 00 90 AD |  if_e	jmp	#LR__1232
0e4e0     00 92 06 F6 | 	mov	arg01, #0
0e4e4     54 BA B1 FD | 	call	#__system___getiolock_0622
0e4e8     3D 93 02 F6 | 	mov	arg01, result1
0e4ec     C8 64 B1 FD | 	call	#__system___lockmem
0e4f0     96 01 00 FF 
0e4f4     C5 94 06 F6 | 	mov	arg02, ##@LR__5952
0e4f8     00 92 06 F6 | 	mov	arg01, #0
0e4fc     00 96 06 F6 | 	mov	arg03, #0
0e500     A8 71 B1 FD | 	call	#__system___basic_print_string
0e504     00 92 06 F6 | 	mov	arg01, #0
0e508     58 95 02 F6 | 	mov	arg02, local06
0e50c     00 96 06 F6 | 	mov	arg03, #0
0e510     0A 98 06 F6 | 	mov	arg04, #10
0e514     D8 71 B1 FD | 	call	#__system___basic_print_integer
0e518     96 01 00 FF 
0e51c     D3 94 06 F6 | 	mov	arg02, ##@LR__5953
0e520     00 92 06 F6 | 	mov	arg01, #0
0e524     00 96 06 F6 | 	mov	arg03, #0
0e528     80 71 B1 FD | 	call	#__system___basic_print_string
0e52c     58 93 02 F6 | 	mov	arg01, local06
0e530     34 86 B1 FD | 	call	#__system___strerror
0e534     3D 95 02 F6 | 	mov	arg02, result1
0e538     00 92 06 F6 | 	mov	arg01, #0
0e53c     00 96 06 F6 | 	mov	arg03, #0
0e540     68 71 B1 FD | 	call	#__system___basic_print_string
0e544     00 92 06 F6 | 	mov	arg01, #0
0e548     0A 94 06 F6 | 	mov	arg02, #10
0e54c     00 96 06 F6 | 	mov	arg03, #0
0e550     00 71 B1 FD | 	call	#__system___basic_print_char
0e554     00 92 06 F6 | 	mov	arg01, #0
0e558     E0 B9 B1 FD | 	call	#__system___getiolock_0622
0e55c     3D 01 68 FC | 	wrlong	#0, result1
0e560     09 92 06 F6 | 	mov	arg01, #9
0e564     2C B0 B1 FD | 	call	#__system__close
0e568     F8 00 90 FD | 	jmp	#LR__1235
0e56c                 | LR__1232
0e56c     01 B2 06 F6 | 	mov	local07, #1
0e570     00 B4 06 F6 | 	mov	local08, #0
0e574                 | '   do
0e574                 | LR__1233
0e574                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e574     32 97 02 F6 | 	mov	arg03, objptr
0e578     4F 00 00 FF 
0e57c     D4 96 06 F1 | 	add	arg03, ##40660
0e580     09 92 06 F6 | 	mov	arg01, #9
0e584     59 95 02 F6 | 	mov	arg02, local07
0e588     0A 98 C6 F9 | 	decod	arg04, #10
0e58c     01 9A 06 F6 | 	mov	arg05, #1
0e590     A0 72 B1 FD | 	call	#__system___basic_get
0e594     3D B1 02 F6 | 	mov	local06, result1
0e598     3D B3 02 F1 | 	add	local07, result1
0e59c     32 93 02 F6 | 	mov	arg01, objptr
0e5a0     4F 00 00 FF 
0e5a4     D4 92 06 F1 | 	add	arg01, ##40660
0e5a8     5A 95 02 F6 | 	mov	arg02, local08
0e5ac     0A 96 C6 F9 | 	decod	arg03, #10
0e5b0     0B 00 00 FF 
0e5b4     CC 64 06 F1 | 	add	objptr, ##5836
0e5b8     78 58 B1 FD | 	call	#_psram_spin2_write
0e5bc     0B 00 00 FF 
0e5c0     CC 64 86 F1 | 	sub	objptr, ##5836
0e5c4     58 B5 02 F1 | 	add	local08, local06
0e5c8     02 00 00 FF 
0e5cc     00 B0 0E F2 | 	cmp	local06, ##1024 wz
0e5d0     E0 03 00 AF 
0e5d4     00 B4 56 A2 |  if_e	cmps	local08, ##507904 wc
0e5d8     98 FF 9F 8D |  if_c_and_z	jmp	#LR__1233
0e5dc     38 00 00 FF 
0e5e0     1C 64 06 F1 | 	add	objptr, ##28700
0e5e4     32 93 02 FB | 	rdlong	arg01, objptr
0e5e8     03 92 62 FD | 	cogstop	arg01
0e5ec     04 64 06 F1 | 	add	objptr, #4
0e5f0     32 93 02 FB | 	rdlong	arg01, objptr
0e5f4     03 92 62 FD | 	cogstop	arg01
0e5f8     04 64 06 F1 | 	add	objptr, #4
0e5fc     32 93 02 FB | 	rdlong	arg01, objptr
0e600     03 92 62 FD | 	cogstop	arg01
0e604     19 00 00 FF 
0e608     3C 65 06 F1 | 	add	objptr, ##13116
0e60c     32 93 02 FB | 	rdlong	arg01, objptr
0e610     51 00 00 FF 
0e614     60 65 86 F1 | 	sub	objptr, ##41824
0e618     03 92 62 FD | 	cogstop	arg01
0e61c     35 95 02 F6 | 	mov	arg02, ptr__dat__
0e620     18 00 00 FF 
0e624     CC 94 06 F1 | 	add	arg02, ##12492
0e628     32 97 02 F6 | 	mov	arg03, objptr
0e62c     38 00 00 FF 
0e630     2C 96 06 F1 | 	add	arg03, ##28716
0e634     1E B4 06 F6 | 	mov	local08, #30
0e638     28 96 62 FD | 	setq	arg03
0e63c     4A B5 F2 FC | 	coginit	local08, arg02 wc
0e640     01 B4 66 C6 |  if_b	neg	local08, #1
0e644     53 00 00 FF 
0e648     70 65 06 F1 | 	add	objptr, ##42864
0e64c     32 B5 62 FC | 	wrlong	local08, objptr
0e650     53 00 00 FF 
0e654     70 65 86 F1 | 	sub	objptr, ##42864
0e658     00 92 06 F6 | 	mov	arg01, #0
0e65c     01 92 62 FD | 	cogid	arg01
0e660     03 92 62 FD | 	cogstop	arg01
0e664                 | LR__1234
0e664                 | LR__1235
0e664     E7 F0 03 F6 | 	mov	ptra, fp
0e668     F2 00 A0 FD | 	call	#popregs_
0e66c                 | _do_brun_ret
0e66c     2D 00 64 FD | 	ret
0e670                 | 
0e670                 | ' 
0e670                 | ' '-------------------- cd
0e670                 | ' 
0e670                 | ' sub do_cd
0e670                 | _do_cd
0e670     06 CA 05 F6 | 	mov	COUNT_, #6
0e674     E8 00 A0 FD | 	call	#pushregs_
0e678     96 01 00 FF 
0e67c     D6 92 06 F6 | 	mov	arg01, ##@LR__5954
0e680     31 94 06 F6 | 	mov	arg02, #49
0e684     6C BA B1 FD | 	call	#__system___basic_dir
0e688     FC EF BF FD | 	call	#_pop
0e68c     3E 99 02 F6 | 	mov	arg04, result2
0e690     3F 97 02 F6 | 	mov	arg03, result3
0e694     3D A7 02 F6 | 	mov	local01, result1
0e698     4C A9 02 F6 | 	mov	local02, arg04
0e69c     4B AB 02 F6 | 	mov	local03, arg03
0e6a0                 | ' t1=pop()
0e6a0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e6a0     2B AA 0E F2 | 	cmp	local03, #43 wz
0e6a4     10 00 90 5D |  if_ne	jmp	#LR__1240
0e6a8     53 93 02 F6 | 	mov	arg01, local01
0e6ac     48 F1 BF FD | 	call	#_convertstring
0e6b0     3D A7 02 F6 | 	mov	local01, result1
0e6b4     1F AA 06 F6 | 	mov	local03, #31
0e6b8                 | LR__1240
0e6b8                 | ' if t1.result_type<>result_string then printerror(15): return
0e6b8     1F AA 0E F2 | 	cmp	local03, #31 wz
0e6bc     10 00 90 AD |  if_e	jmp	#LR__1241
0e6c0     0F 92 06 F6 | 	mov	arg01, #15
0e6c4     00 94 06 F6 | 	mov	arg02, #0
0e6c8     70 29 B1 FD | 	call	#_printerror
0e6cc     54 05 90 FD | 	jmp	#LR__1259
0e6d0                 | LR__1241
0e6d0     53 AD 02 F6 | 	mov	local04, local01
0e6d4                 | ' newdir$=t1.result.sresult
0e6d4                 | ' if newdir$=".." then 
0e6d4     96 01 00 FF 
0e6d8     D8 94 06 F6 | 	mov	arg02, ##@LR__5955
0e6dc     56 93 02 F6 | 	mov	arg01, local04
0e6e0     FC 62 B1 FD | 	call	#__system___string_cmp
0e6e4     00 7A 0E F2 | 	cmp	result1, #0 wz
0e6e8     C8 01 90 5D |  if_ne	jmp	#LR__1248
0e6ec     4B 00 00 FF 
0e6f0     B4 64 06 F1 | 	add	objptr, ##38580
0e6f4     32 93 02 FB | 	rdlong	arg01, objptr
0e6f8     4B 00 00 FF 
0e6fc     B4 64 86 F1 | 	sub	objptr, ##38580
0e700     49 AF 02 F6 | 	mov	local05, arg01
0e704     D7 06 48 FB | 	callpa	#(@LR__1243-@LR__1242)>>2,fcache_load_ptr_
0e708                 | LR__1242
0e708     57 7B CA FA | 	rdbyte	result1, local05 wz
0e70c     01 AE 06 51 |  if_ne	add	local05, #1
0e710     F4 FF 9F 5D |  if_ne	jmp	#LR__1242
0e714                 | LR__1243
0e714     57 93 C2 F2 | 	subr	arg01, local05
0e718     4B 00 00 FF 
0e71c     B4 64 06 F1 | 	add	objptr, ##38580
0e720     32 95 02 FB | 	rdlong	arg02, objptr
0e724     4B 00 00 FF 
0e728     B4 64 86 F1 | 	sub	objptr, ##38580
0e72c     96 01 00 FF 
0e730     DB 96 06 F6 | 	mov	arg03, ##@LR__5956
0e734     74 81 B1 FD | 	call	#__system__InstrRev
0e738     3D AD 02 F6 | 	mov	local04, result1
0e73c                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e73c     02 AC 56 F2 | 	cmps	local04, #2 wc
0e740     28 00 90 CD |  if_b	jmp	#LR__1244
0e744     4B 00 00 FF 
0e748     B4 64 06 F1 | 	add	objptr, ##38580
0e74c     32 93 02 FB | 	rdlong	arg01, objptr
0e750     4B 00 00 FF 
0e754     B4 64 86 F1 | 	sub	objptr, ##38580
0e758     01 AC 86 F1 | 	sub	local04, #1
0e75c     56 95 02 F6 | 	mov	arg02, local04
0e760     FC 7A B1 FD | 	call	#__system__Left_S
0e764     3D AD 02 F6 | 	mov	local04, result1
0e768     08 00 90 FD | 	jmp	#LR__1245
0e76c                 | LR__1244
0e76c     96 01 00 FF 
0e770     DD AC 06 F6 | 	mov	local04, ##@LR__5957
0e774                 | LR__1245
0e774     56 93 02 F6 | 	mov	arg01, local04
0e778     CC 68 B1 FD | 	call	#__system___chdir
0e77c     20 68 06 F1 | 	add	ptr___system__dat__, #32
0e780     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e784     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e788     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0e78c     3D B1 0A F6 | 	mov	local06, result1 wz
0e790                 | '   chdir newdir$
0e790                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e790     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0e794     A4 00 90 AD |  if_e	jmp	#LR__1246
0e798     00 92 06 F6 | 	mov	arg01, #0
0e79c     9C B7 B1 FD | 	call	#__system___getiolock_0622
0e7a0     3D 93 02 F6 | 	mov	arg01, result1
0e7a4     10 62 B1 FD | 	call	#__system___lockmem
0e7a8     96 01 00 FF 
0e7ac     DF 94 06 F6 | 	mov	arg02, ##@LR__5958
0e7b0     00 92 06 F6 | 	mov	arg01, #0
0e7b4     00 96 06 F6 | 	mov	arg03, #0
0e7b8     F0 6E B1 FD | 	call	#__system___basic_print_string
0e7bc     00 92 06 F6 | 	mov	arg01, #0
0e7c0     58 95 02 F6 | 	mov	arg02, local06
0e7c4     00 96 06 F6 | 	mov	arg03, #0
0e7c8     0A 98 06 F6 | 	mov	arg04, #10
0e7cc     20 6F B1 FD | 	call	#__system___basic_print_integer
0e7d0     96 01 00 FF 
0e7d4     ED 94 06 F6 | 	mov	arg02, ##@LR__5959
0e7d8     00 92 06 F6 | 	mov	arg01, #0
0e7dc     00 96 06 F6 | 	mov	arg03, #0
0e7e0     C8 6E B1 FD | 	call	#__system___basic_print_string
0e7e4     46 00 00 FF 
0e7e8     70 65 06 F1 | 	add	objptr, ##36208
0e7ec     32 95 02 FB | 	rdlong	arg02, objptr
0e7f0     46 00 00 FF 
0e7f4     70 65 86 F1 | 	sub	objptr, ##36208
0e7f8     00 92 06 F6 | 	mov	arg01, #0
0e7fc     00 96 06 F6 | 	mov	arg03, #0
0e800     A8 6E B1 FD | 	call	#__system___basic_print_string
0e804     00 92 06 F6 | 	mov	arg01, #0
0e808     0A 94 06 F6 | 	mov	arg02, #10
0e80c     00 96 06 F6 | 	mov	arg03, #0
0e810     40 6E B1 FD | 	call	#__system___basic_print_char
0e814     00 92 06 F6 | 	mov	arg01, #0
0e818     20 B7 B1 FD | 	call	#__system___getiolock_0622
0e81c     3D 01 68 FC | 	wrlong	#0, result1
0e820     4B 00 00 FF 
0e824     B4 64 06 F1 | 	add	objptr, ##38580
0e828     32 93 02 FB | 	rdlong	arg01, objptr
0e82c     4B 00 00 FF 
0e830     B4 64 86 F1 | 	sub	objptr, ##38580
0e834     10 68 B1 FD | 	call	#__system___chdir
0e838     14 00 90 FD | 	jmp	#LR__1247
0e83c                 | LR__1246
0e83c     4B 00 00 FF 
0e840     B4 64 06 F1 | 	add	objptr, ##38580
0e844     32 AD 62 FC | 	wrlong	local04, objptr
0e848     4B 00 00 FF 
0e84c     B4 64 86 F1 | 	sub	objptr, ##38580
0e850                 | LR__1247
0e850                 | '   print "Current directory: ";currentdir$
0e850     00 92 06 F6 | 	mov	arg01, #0
0e854     E4 B6 B1 FD | 	call	#__system___getiolock_0622
0e858     3D 93 02 F6 | 	mov	arg01, result1
0e85c     58 61 B1 FD | 	call	#__system___lockmem
0e860     96 01 00 FF 
0e864     F0 94 06 F6 | 	mov	arg02, ##@LR__5960
0e868     00 92 06 F6 | 	mov	arg01, #0
0e86c     00 96 06 F6 | 	mov	arg03, #0
0e870     38 6E B1 FD | 	call	#__system___basic_print_string
0e874     4B 00 00 FF 
0e878     B4 64 06 F1 | 	add	objptr, ##38580
0e87c     32 95 02 FB | 	rdlong	arg02, objptr
0e880     4B 00 00 FF 
0e884     B4 64 86 F1 | 	sub	objptr, ##38580
0e888     00 92 06 F6 | 	mov	arg01, #0
0e88c     00 96 06 F6 | 	mov	arg03, #0
0e890     18 6E B1 FD | 	call	#__system___basic_print_string
0e894     00 92 06 F6 | 	mov	arg01, #0
0e898     0A 94 06 F6 | 	mov	arg02, #10
0e89c     00 96 06 F6 | 	mov	arg03, #0
0e8a0     B0 6D B1 FD | 	call	#__system___basic_print_char
0e8a4     00 92 06 F6 | 	mov	arg01, #0
0e8a8     90 B6 B1 FD | 	call	#__system___getiolock_0622
0e8ac     3D 01 68 FC | 	wrlong	#0, result1
0e8b0                 | '   return
0e8b0     70 03 90 FD | 	jmp	#LR__1259
0e8b4                 | LR__1248
0e8b4                 | ' if left$(newdir$,1)="/" then 
0e8b4     56 93 02 F6 | 	mov	arg01, local04
0e8b8     01 94 06 F6 | 	mov	arg02, #1
0e8bc     A0 79 B1 FD | 	call	#__system__Left_S
0e8c0     3D 93 02 F6 | 	mov	arg01, result1
0e8c4     96 01 00 FF 
0e8c8     04 95 06 F6 | 	mov	arg02, ##@LR__5961
0e8cc     10 61 B1 FD | 	call	#__system___string_cmp
0e8d0     00 7A 0E F2 | 	cmp	result1, #0 wz
0e8d4     40 01 90 5D |  if_ne	jmp	#LR__1251
0e8d8     56 93 02 F6 | 	mov	arg01, local04
0e8dc     68 67 B1 FD | 	call	#__system___chdir
0e8e0     20 68 06 F1 | 	add	ptr___system__dat__, #32
0e8e4     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e8e8     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e8ec     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0e8f0     3D B1 0A F6 | 	mov	local06, result1 wz
0e8f4                 | '   chdir(newdir$)
0e8f4                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e8f4     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0e8f8     A4 00 90 AD |  if_e	jmp	#LR__1249
0e8fc     00 92 06 F6 | 	mov	arg01, #0
0e900     38 B6 B1 FD | 	call	#__system___getiolock_0622
0e904     3D 93 02 F6 | 	mov	arg01, result1
0e908     AC 60 B1 FD | 	call	#__system___lockmem
0e90c     96 01 00 FF 
0e910     06 95 06 F6 | 	mov	arg02, ##@LR__5962
0e914     00 92 06 F6 | 	mov	arg01, #0
0e918     00 96 06 F6 | 	mov	arg03, #0
0e91c     8C 6D B1 FD | 	call	#__system___basic_print_string
0e920     00 92 06 F6 | 	mov	arg01, #0
0e924     58 95 02 F6 | 	mov	arg02, local06
0e928     00 96 06 F6 | 	mov	arg03, #0
0e92c     0A 98 06 F6 | 	mov	arg04, #10
0e930     BC 6D B1 FD | 	call	#__system___basic_print_integer
0e934     96 01 00 FF 
0e938     14 95 06 F6 | 	mov	arg02, ##@LR__5963
0e93c     00 92 06 F6 | 	mov	arg01, #0
0e940     00 96 06 F6 | 	mov	arg03, #0
0e944     64 6D B1 FD | 	call	#__system___basic_print_string
0e948     46 00 00 FF 
0e94c     70 65 06 F1 | 	add	objptr, ##36208
0e950     32 95 02 FB | 	rdlong	arg02, objptr
0e954     46 00 00 FF 
0e958     70 65 86 F1 | 	sub	objptr, ##36208
0e95c     00 92 06 F6 | 	mov	arg01, #0
0e960     00 96 06 F6 | 	mov	arg03, #0
0e964     44 6D B1 FD | 	call	#__system___basic_print_string
0e968     00 92 06 F6 | 	mov	arg01, #0
0e96c     0A 94 06 F6 | 	mov	arg02, #10
0e970     00 96 06 F6 | 	mov	arg03, #0
0e974     DC 6C B1 FD | 	call	#__system___basic_print_char
0e978     00 92 06 F6 | 	mov	arg01, #0
0e97c     BC B5 B1 FD | 	call	#__system___getiolock_0622
0e980     3D 01 68 FC | 	wrlong	#0, result1
0e984     4B 00 00 FF 
0e988     B4 64 06 F1 | 	add	objptr, ##38580
0e98c     32 93 02 FB | 	rdlong	arg01, objptr
0e990     4B 00 00 FF 
0e994     B4 64 86 F1 | 	sub	objptr, ##38580
0e998     AC 66 B1 FD | 	call	#__system___chdir
0e99c     14 00 90 FD | 	jmp	#LR__1250
0e9a0                 | LR__1249
0e9a0     4B 00 00 FF 
0e9a4     B4 64 06 F1 | 	add	objptr, ##38580
0e9a8     32 AD 62 FC | 	wrlong	local04, objptr
0e9ac     4B 00 00 FF 
0e9b0     B4 64 86 F1 | 	sub	objptr, ##38580
0e9b4                 | LR__1250
0e9b4                 | '   print "Current directory: ";currentdir$
0e9b4     00 92 06 F6 | 	mov	arg01, #0
0e9b8     80 B5 B1 FD | 	call	#__system___getiolock_0622
0e9bc     3D 93 02 F6 | 	mov	arg01, result1
0e9c0     F4 5F B1 FD | 	call	#__system___lockmem
0e9c4     96 01 00 FF 
0e9c8     17 95 06 F6 | 	mov	arg02, ##@LR__5964
0e9cc     00 92 06 F6 | 	mov	arg01, #0
0e9d0     00 96 06 F6 | 	mov	arg03, #0
0e9d4     D4 6C B1 FD | 	call	#__system___basic_print_string
0e9d8     4B 00 00 FF 
0e9dc     B4 64 06 F1 | 	add	objptr, ##38580
0e9e0     32 95 02 FB | 	rdlong	arg02, objptr
0e9e4     4B 00 00 FF 
0e9e8     B4 64 86 F1 | 	sub	objptr, ##38580
0e9ec     00 92 06 F6 | 	mov	arg01, #0
0e9f0     00 96 06 F6 | 	mov	arg03, #0
0e9f4     B4 6C B1 FD | 	call	#__system___basic_print_string
0e9f8     00 92 06 F6 | 	mov	arg01, #0
0e9fc     0A 94 06 F6 | 	mov	arg02, #10
0ea00     00 96 06 F6 | 	mov	arg03, #0
0ea04     4C 6C B1 FD | 	call	#__system___basic_print_char
0ea08     00 92 06 F6 | 	mov	arg01, #0
0ea0c     2C B5 B1 FD | 	call	#__system___getiolock_0622
0ea10     3D 01 68 FC | 	wrlong	#0, result1
0ea14                 | '   return
0ea14     0C 02 90 FD | 	jmp	#LR__1259
0ea18                 | LR__1251
0ea18                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0ea18     4B 00 00 FF 
0ea1c     B4 64 06 F1 | 	add	objptr, ##38580
0ea20     32 93 02 FB | 	rdlong	arg01, objptr
0ea24     4B 00 00 FF 
0ea28     B4 64 86 F1 | 	sub	objptr, ##38580
0ea2c     96 01 00 FF 
0ea30     2B 95 06 F6 | 	mov	arg02, ##@LR__5965
0ea34     A8 5F B1 FD | 	call	#__system___string_cmp
0ea38     00 7A 0E F2 | 	cmp	result1, #0 wz
0ea3c     34 00 90 AD |  if_e	jmp	#LR__1252
0ea40     4B 00 00 FF 
0ea44     B4 64 06 F1 | 	add	objptr, ##38580
0ea48     32 93 02 FB | 	rdlong	arg01, objptr
0ea4c     4B 00 00 FF 
0ea50     B4 64 86 F1 | 	sub	objptr, ##38580
0ea54     96 01 00 FF 
0ea58     2D 95 06 F6 | 	mov	arg02, ##@LR__5966
0ea5c     B4 5F B1 FD | 	call	#__system___string_concat
0ea60     3D 93 02 F6 | 	mov	arg01, result1
0ea64     56 95 02 F6 | 	mov	arg02, local04
0ea68     A8 5F B1 FD | 	call	#__system___string_concat
0ea6c     3D AD 02 F6 | 	mov	local04, result1
0ea70     20 00 90 FD | 	jmp	#LR__1253
0ea74                 | LR__1252
0ea74     4B 00 00 FF 
0ea78     B4 64 06 F1 | 	add	objptr, ##38580
0ea7c     32 93 02 FB | 	rdlong	arg01, objptr
0ea80     4B 00 00 FF 
0ea84     B4 64 86 F1 | 	sub	objptr, ##38580
0ea88     56 95 02 F6 | 	mov	arg02, local04
0ea8c     84 5F B1 FD | 	call	#__system___string_concat
0ea90     3D AD 02 F6 | 	mov	local04, result1
0ea94                 | LR__1253
0ea94                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0ea94     56 93 02 F6 | 	mov	arg01, local04
0ea98     01 94 06 F6 | 	mov	arg02, #1
0ea9c     48 78 B1 FD | 	call	#__system__Right_S
0eaa0     3D 93 02 F6 | 	mov	arg01, result1
0eaa4     96 01 00 FF 
0eaa8     2F 95 06 F6 | 	mov	arg02, ##@LR__5967
0eaac     30 5F B1 FD | 	call	#__system___string_cmp
0eab0     00 7A 0E F2 | 	cmp	result1, #0 wz
0eab4     30 00 90 5D |  if_ne	jmp	#LR__1256
0eab8     56 93 02 F6 | 	mov	arg01, local04
0eabc     49 AF 02 F6 | 	mov	local05, arg01
0eac0     D7 06 48 FB | 	callpa	#(@LR__1255-@LR__1254)>>2,fcache_load_ptr_
0eac4                 | LR__1254
0eac4     57 7B CA FA | 	rdbyte	result1, local05 wz
0eac8     01 AE 06 51 |  if_ne	add	local05, #1
0eacc     F4 FF 9F 5D |  if_ne	jmp	#LR__1254
0ead0                 | LR__1255
0ead0     49 AF 82 F1 | 	sub	local05, arg01
0ead4     57 95 02 F6 | 	mov	arg02, local05
0ead8     01 94 86 F1 | 	sub	arg02, #1
0eadc     56 93 02 F6 | 	mov	arg01, local04
0eae0     7C 77 B1 FD | 	call	#__system__Left_S
0eae4     3D AD 02 F6 | 	mov	local04, result1
0eae8                 | LR__1256
0eae8     56 93 02 F6 | 	mov	arg01, local04
0eaec     58 65 B1 FD | 	call	#__system___chdir
0eaf0     20 68 06 F1 | 	add	ptr___system__dat__, #32
0eaf4     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0eaf8     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0eafc     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0eb00     3D B1 0A F6 | 	mov	local06, result1 wz
0eb04                 | '   chdir(newdir$)
0eb04                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0eb04     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0eb08     A4 00 90 AD |  if_e	jmp	#LR__1257
0eb0c     00 92 06 F6 | 	mov	arg01, #0
0eb10     28 B4 B1 FD | 	call	#__system___getiolock_0622
0eb14     3D 93 02 F6 | 	mov	arg01, result1
0eb18     9C 5E B1 FD | 	call	#__system___lockmem
0eb1c     96 01 00 FF 
0eb20     31 95 06 F6 | 	mov	arg02, ##@LR__5968
0eb24     00 92 06 F6 | 	mov	arg01, #0
0eb28     00 96 06 F6 | 	mov	arg03, #0
0eb2c     7C 6B B1 FD | 	call	#__system___basic_print_string
0eb30     00 92 06 F6 | 	mov	arg01, #0
0eb34     58 95 02 F6 | 	mov	arg02, local06
0eb38     00 96 06 F6 | 	mov	arg03, #0
0eb3c     0A 98 06 F6 | 	mov	arg04, #10
0eb40     AC 6B B1 FD | 	call	#__system___basic_print_integer
0eb44     96 01 00 FF 
0eb48     3F 95 06 F6 | 	mov	arg02, ##@LR__5969
0eb4c     00 92 06 F6 | 	mov	arg01, #0
0eb50     00 96 06 F6 | 	mov	arg03, #0
0eb54     54 6B B1 FD | 	call	#__system___basic_print_string
0eb58     46 00 00 FF 
0eb5c     70 65 06 F1 | 	add	objptr, ##36208
0eb60     32 95 02 FB | 	rdlong	arg02, objptr
0eb64     46 00 00 FF 
0eb68     70 65 86 F1 | 	sub	objptr, ##36208
0eb6c     00 92 06 F6 | 	mov	arg01, #0
0eb70     00 96 06 F6 | 	mov	arg03, #0
0eb74     34 6B B1 FD | 	call	#__system___basic_print_string
0eb78     00 92 06 F6 | 	mov	arg01, #0
0eb7c     0A 94 06 F6 | 	mov	arg02, #10
0eb80     00 96 06 F6 | 	mov	arg03, #0
0eb84     CC 6A B1 FD | 	call	#__system___basic_print_char
0eb88     00 92 06 F6 | 	mov	arg01, #0
0eb8c     AC B3 B1 FD | 	call	#__system___getiolock_0622
0eb90     3D 01 68 FC | 	wrlong	#0, result1
0eb94     4B 00 00 FF 
0eb98     B4 64 06 F1 | 	add	objptr, ##38580
0eb9c     32 93 02 FB | 	rdlong	arg01, objptr
0eba0     4B 00 00 FF 
0eba4     B4 64 86 F1 | 	sub	objptr, ##38580
0eba8     9C 64 B1 FD | 	call	#__system___chdir
0ebac     14 00 90 FD | 	jmp	#LR__1258
0ebb0                 | LR__1257
0ebb0     4B 00 00 FF 
0ebb4     B4 64 06 F1 | 	add	objptr, ##38580
0ebb8     32 AD 62 FC | 	wrlong	local04, objptr
0ebbc     4B 00 00 FF 
0ebc0     B4 64 86 F1 | 	sub	objptr, ##38580
0ebc4                 | LR__1258
0ebc4                 | '   print "Current directory: ";currentdir$
0ebc4     00 92 06 F6 | 	mov	arg01, #0
0ebc8     70 B3 B1 FD | 	call	#__system___getiolock_0622
0ebcc     3D 93 02 F6 | 	mov	arg01, result1
0ebd0     E4 5D B1 FD | 	call	#__system___lockmem
0ebd4     96 01 00 FF 
0ebd8     42 95 06 F6 | 	mov	arg02, ##@LR__5970
0ebdc     00 92 06 F6 | 	mov	arg01, #0
0ebe0     00 96 06 F6 | 	mov	arg03, #0
0ebe4     C4 6A B1 FD | 	call	#__system___basic_print_string
0ebe8     4B 00 00 FF 
0ebec     B4 64 06 F1 | 	add	objptr, ##38580
0ebf0     32 95 02 FB | 	rdlong	arg02, objptr
0ebf4     4B 00 00 FF 
0ebf8     B4 64 86 F1 | 	sub	objptr, ##38580
0ebfc     00 92 06 F6 | 	mov	arg01, #0
0ec00     00 96 06 F6 | 	mov	arg03, #0
0ec04     A4 6A B1 FD | 	call	#__system___basic_print_string
0ec08     00 92 06 F6 | 	mov	arg01, #0
0ec0c     0A 94 06 F6 | 	mov	arg02, #10
0ec10     00 96 06 F6 | 	mov	arg03, #0
0ec14     3C 6A B1 FD | 	call	#__system___basic_print_char
0ec18     00 92 06 F6 | 	mov	arg01, #0
0ec1c     1C B3 B1 FD | 	call	#__system___getiolock_0622
0ec20     3D 01 68 FC | 	wrlong	#0, result1
0ec24                 | LR__1259
0ec24     E7 F0 03 F6 | 	mov	ptra, fp
0ec28     F2 00 A0 FD | 	call	#popregs_
0ec2c                 | _do_cd_ret
0ec2c     2D 00 64 FD | 	ret
0ec30                 | 
0ec30                 | ' 
0ec30                 | ' '-------------------- changefreq
0ec30                 | ' 
0ec30                 | ' sub do_changefreq
0ec30                 | _do_changefreq
0ec30     0A CA 05 F6 | 	mov	COUNT_, #10
0ec34     E8 00 A0 FD | 	call	#pushregs_
0ec38     2C F0 07 F1 | 	add	ptra, #44
0ec3c     48 EA BF FD | 	call	#_pop
0ec40     3F 95 02 F6 | 	mov	arg02, result3
0ec44     E7 7A 62 FC | 	wrlong	result1, fp
0ec48     04 CE 05 F1 | 	add	fp, #4
0ec4c     E7 7C 62 FC | 	wrlong	result2, fp
0ec50     04 CE 05 F1 | 	add	fp, #4
0ec54     E7 94 62 FC | 	wrlong	arg02, fp
0ec58     08 CE 85 F1 | 	sub	fp, #8
0ec5c     E7 92 02 F6 | 	mov	arg01, fp
0ec60     BC EC BF FD | 	call	#_converttofloat
0ec64     3D A7 02 F6 | 	mov	local01, result1
0ec68     1C EA BF FD | 	call	#_pop
0ec6c     3F 95 02 F6 | 	mov	arg02, result3
0ec70     E7 7A 62 FC | 	wrlong	result1, fp
0ec74     04 CE 05 F1 | 	add	fp, #4
0ec78     E7 7C 62 FC | 	wrlong	result2, fp
0ec7c     04 CE 05 F1 | 	add	fp, #4
0ec80     E7 94 62 FC | 	wrlong	arg02, fp
0ec84     08 CE 85 F1 | 	sub	fp, #8
0ec88     E7 92 02 F6 | 	mov	arg01, fp
0ec8c     D4 EB BF FD | 	call	#_converttoint
0ec90     3D A9 52 F6 | 	abs	local02, result1 wc
0ec94     07 A8 06 F5 | 	and	local02, #7
0ec98     54 A9 82 F6 | 	negc	local02, local02
0ec9c     54 95 02 F6 | 	mov	arg02, local02
0eca0     03 94 66 F0 | 	shl	arg02, #3
0eca4     54 95 82 F1 | 	sub	arg02, local02
0eca8     02 94 66 F0 | 	shl	arg02, #2
0ecac     32 93 02 F6 | 	mov	arg01, objptr
0ecb0     15 00 00 FF 
0ecb4     38 93 06 F1 | 	add	arg01, ##11064
0ecb8     49 95 02 F1 | 	add	arg02, arg01
0ecbc     16 94 06 F1 | 	add	arg02, #22
0ecc0     4A AB E2 FA | 	rdword	local03, arg02
0ecc4                 | ' amode=channels(channel).amode
0ecc4                 | ' if amode>0 then
0ecc4     01 AA 56 F2 | 	cmps	local03, #1 wc
0ecc8     AC 01 90 CD |  if_b	jmp	#LR__1262
0eccc     53 95 02 F6 | 	mov	arg02, local01
0ecd0     FC 16 20 FF 
0ecd4     54 92 06 F6 | 	mov	arg01, ##1076754516
0ecd8     8C 93 B1 FD | 	call	#__system____builtin_logbase
0ecdc     3D AD 02 F6 | 	mov	local04, result1
0ece0     1E 94 C6 F9 | 	decod	arg02, #30
0ece4     FC 16 20 FF 
0ece8     54 92 06 F6 | 	mov	arg01, ##1076754516
0ecec     78 93 B1 FD | 	call	#__system____builtin_logbase
0ecf0     3D 95 02 F6 | 	mov	arg02, result1
0ecf4     56 93 02 F6 | 	mov	arg01, local04
0ecf8     90 85 B1 FD | 	call	#__system___float_div
0ecfc     3D 93 02 F6 | 	mov	arg01, result1
0ed00     00 94 06 F6 | 	mov	arg02, #0
0ed04     48 88 B1 FD | 	call	#__system___float_tointeger
0ed08     3D AF 02 F6 | 	mov	local05, result1
0ed0c     1E AC C6 F9 | 	decod	local04, #30
0ed10     57 93 02 F6 | 	mov	arg01, local05
0ed14     55 93 02 F1 | 	add	arg01, local03
0ed18     49 93 52 F6 | 	abs	arg01, arg01 wc
0ed1c     1F B0 C6 C9 |  if_b	decod	local06, #31
0ed20     00 B0 06 36 |  if_ae	mov	local06, #0
0ed24     5C 7F B1 FD | 	call	#__system___float_fromuns
0ed28     58 7B 62 F5 | 	xor	result1, local06
0ed2c     3D 95 02 F6 | 	mov	arg02, result1
0ed30     56 93 02 F6 | 	mov	arg01, local04
0ed34     68 92 B1 FD | 	call	#__system____builtin_powf
0ed38     3D 93 02 F6 | 	mov	arg01, result1
0ed3c     01 94 06 F6 | 	mov	arg02, #1
0ed40     0C 88 B1 FD | 	call	#__system___float_tointeger
0ed44     3D B3 02 F6 | 	mov	local07, result1
0ed48                 | '   skip=round(2^(lfreq+amode))                     '''' this const + const 2 lines lower=18
0ed48                 | '   if skip>32768 then i=skip/32768: skip=32768 else i=1
0ed48     40 00 00 FF 
0ed4c     01 B2 56 F2 | 	cmps	local07, ##32769 wc
0ed50     14 00 90 CD |  if_b	jmp	#LR__1260
0ed54     59 B5 52 F6 | 	abs	local08, local07 wc
0ed58     0F B4 46 F0 | 	shr	local08, #15
0ed5c     5A B5 82 F6 | 	negc	local08, local08
0ed60     0F B2 C6 F9 | 	decod	local07, #15
0ed64     04 00 90 FD | 	jmp	#LR__1261
0ed68                 | LR__1260
0ed68     01 B4 06 F6 | 	mov	local08, #1
0ed6c                 | LR__1261
0ed6c     AA 2B 25 FF 
0ed70     00 93 06 F6 | 	mov	arg01, ##1247237376
0ed74     53 95 02 F6 | 	mov	arg02, local01
0ed78     10 85 B1 FD | 	call	#__system___float_div
0ed7c     3D AD 02 F6 | 	mov	local04, result1
0ed80     5A 93 52 F6 | 	abs	arg01, local08 wc
0ed84     1F B0 C6 C9 |  if_b	decod	local06, #31
0ed88     00 B0 06 36 |  if_ae	mov	local06, #0
0ed8c     F4 7E B1 FD | 	call	#__system___float_fromuns
0ed90     58 7B 62 F5 | 	xor	result1, local06
0ed94     3D B5 02 F6 | 	mov	local08, result1
0ed98     1E B6 C6 F9 | 	decod	local09, #30
0ed9c     12 92 06 F6 | 	mov	arg01, #18
0eda0     55 93 82 F1 | 	sub	arg01, local03
0eda4     57 93 82 F1 | 	sub	arg01, local05
0eda8     49 93 52 F6 | 	abs	arg01, arg01 wc
0edac     1F B0 C6 C9 |  if_b	decod	local06, #31
0edb0     00 B0 06 36 |  if_ae	mov	local06, #0
0edb4     CC 7E B1 FD | 	call	#__system___float_fromuns
0edb8     58 7B 62 F5 | 	xor	result1, local06
0edbc     3D 95 02 F6 | 	mov	arg02, result1
0edc0     5B 93 02 F6 | 	mov	arg01, local09
0edc4     D8 91 B1 FD | 	call	#__system____builtin_powf
0edc8     3D 95 02 F6 | 	mov	arg02, result1
0edcc     5A 93 02 F6 | 	mov	arg01, local08
0edd0     B4 82 B1 FD | 	call	#__system___float_mul
0edd4     3D 95 02 F6 | 	mov	arg02, result1
0edd8     56 93 02 F6 | 	mov	arg01, local04
0eddc     AC 84 B1 FD | 	call	#__system___float_div
0ede0     3D 93 02 F6 | 	mov	arg01, result1
0ede4     01 94 06 F6 | 	mov	arg02, #1
0ede8     64 87 B1 FD | 	call	#__system___float_tointeger
0edec     3D B9 02 F6 | 	mov	local10, result1
0edf0     54 B7 02 F6 | 	mov	local09, local02
0edf4     03 B6 66 F0 | 	shl	local09, #3
0edf8     54 B7 82 F1 | 	sub	local09, local02
0edfc     02 B6 66 F0 | 	shl	local09, #2
0ee00     32 B5 02 F6 | 	mov	local08, objptr
0ee04     15 00 00 FF 
0ee08     38 B5 06 F1 | 	add	local08, ##11064
0ee0c     5A B7 02 F1 | 	add	local09, local08
0ee10     AA 2B 25 FF 
0ee14     00 B5 06 F6 | 	mov	local08, ##1247237376
0ee18     5C 93 52 F6 | 	abs	arg01, local10 wc
0ee1c     1F B0 C6 C9 |  if_b	decod	local06, #31
0ee20     00 B0 06 36 |  if_ae	mov	local06, #0
0ee24     5C 7E B1 FD | 	call	#__system___float_fromuns
0ee28     58 7B 62 F5 | 	xor	result1, local06
0ee2c     3D 95 02 F6 | 	mov	arg02, result1
0ee30     5A 93 02 F6 | 	mov	arg01, local08
0ee34     54 84 B1 FD | 	call	#__system___float_div
0ee38     3D B5 02 F6 | 	mov	local08, result1
0ee3c     59 93 52 F6 | 	abs	arg01, local07 wc
0ee40     1F B0 C6 C9 |  if_b	decod	local06, #31
0ee44     00 B0 06 36 |  if_ae	mov	local06, #0
0ee48     38 7E B1 FD | 	call	#__system___float_fromuns
0ee4c     58 7B 62 F5 | 	xor	result1, local06
0ee50     3D 93 02 F6 | 	mov	arg01, result1
0ee54     00 40 24 FF 
0ee58     00 94 06 F6 | 	mov	arg02, ##1216348160
0ee5c     2C 84 B1 FD | 	call	#__system___float_div
0ee60     3D 95 02 F6 | 	mov	arg02, result1
0ee64     5A 93 02 F6 | 	mov	arg01, local08
0ee68     1C 82 B1 FD | 	call	#__system___float_mul
0ee6c     18 B6 06 F1 | 	add	local09, #24
0ee70     5B 7B 62 FC | 	wrlong	result1, local09
0ee74     BC 00 90 FD | 	jmp	#LR__1263
0ee78                 | LR__1262
0ee78     18 B8 06 F6 | 	mov	local10, #24
0ee7c     00 40 24 FF 
0ee80     00 AC 06 F6 | 	mov	local04, ##1216348160
0ee84     53 93 02 F6 | 	mov	arg01, local01
0ee88     C7 07 24 FF 
0ee8c     00 94 06 F6 | 	mov	arg02, ##1208978944
0ee90     F8 83 B1 FD | 	call	#__system___float_div
0ee94     3D 95 02 F6 | 	mov	arg02, result1
0ee98     56 93 02 F6 | 	mov	arg01, local04
0ee9c     E8 81 B1 FD | 	call	#__system___float_mul
0eea0     3D 93 02 F6 | 	mov	arg01, result1
0eea4     01 94 06 F6 | 	mov	arg02, #1
0eea8     A4 86 B1 FD | 	call	#__system___float_tointeger
0eeac     3D B3 02 F6 | 	mov	local07, result1
0eeb0     54 B7 02 F6 | 	mov	local09, local02
0eeb4     03 B6 66 F0 | 	shl	local09, #3
0eeb8     54 B7 82 F1 | 	sub	local09, local02
0eebc     02 B6 66 F0 | 	shl	local09, #2
0eec0     32 B5 02 F6 | 	mov	local08, objptr
0eec4     15 00 00 FF 
0eec8     38 B5 06 F1 | 	add	local08, ##11064
0eecc     5A B7 02 F1 | 	add	local09, local08
0eed0     AA 2B 25 FF 
0eed4     00 B5 06 F6 | 	mov	local08, ##1247237376
0eed8     5C 93 52 F6 | 	abs	arg01, local10 wc
0eedc     1F B0 C6 C9 |  if_b	decod	local06, #31
0eee0     00 B0 06 36 |  if_ae	mov	local06, #0
0eee4     9C 7D B1 FD | 	call	#__system___float_fromuns
0eee8     58 7B 62 F5 | 	xor	result1, local06
0eeec     3D 95 02 F6 | 	mov	arg02, result1
0eef0     5A 93 02 F6 | 	mov	arg01, local08
0eef4     94 83 B1 FD | 	call	#__system___float_div
0eef8     3D B5 02 F6 | 	mov	local08, result1
0eefc     59 93 52 F6 | 	abs	arg01, local07 wc
0ef00     1F B0 C6 C9 |  if_b	decod	local06, #31
0ef04     00 B0 06 36 |  if_ae	mov	local06, #0
0ef08     78 7D B1 FD | 	call	#__system___float_fromuns
0ef0c     58 7B 62 F5 | 	xor	result1, local06
0ef10     3D 93 02 F6 | 	mov	arg01, result1
0ef14     00 40 24 FF 
0ef18     00 94 06 F6 | 	mov	arg02, ##1216348160
0ef1c     6C 83 B1 FD | 	call	#__system___float_div
0ef20     3D 95 02 F6 | 	mov	arg02, result1
0ef24     5A 93 02 F6 | 	mov	arg01, local08
0ef28     5C 81 B1 FD | 	call	#__system___float_mul
0ef2c     18 B6 06 F1 | 	add	local09, #24
0ef30     5B 7B 62 FC | 	wrlong	result1, local09
0ef34                 | LR__1263
0ef34     10 B2 66 F0 | 	shl	local07, #16
0ef38     5C B3 02 F1 | 	add	local07, local10
0ef3c                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0ef3c     38 00 00 FF 
0ef40     30 64 06 F1 | 	add	objptr, ##28720
0ef44     32 93 02 FB | 	rdlong	arg01, objptr
0ef48     38 00 00 FF 
0ef4c     30 64 86 F1 | 	sub	objptr, ##28720
0ef50     54 B9 02 F6 | 	mov	local10, local02
0ef54     06 B8 66 F0 | 	shl	local10, #6
0ef58     5C 93 02 F1 | 	add	arg01, local10
0ef5c     08 92 06 F1 | 	add	arg01, #8
0ef60     49 7B 02 FB | 	rdlong	result1, arg01
0ef64     1B 7A 2E F4 | 	testbn	result1, #27 wz
0ef68     28 00 90 5D |  if_ne	jmp	#LR__1264
0ef6c     38 00 00 FF 
0ef70     30 64 06 F1 | 	add	objptr, ##28720
0ef74     32 93 02 FB | 	rdlong	arg01, objptr
0ef78     38 00 00 FF 
0ef7c     30 64 86 F1 | 	sub	objptr, ##28720
0ef80     06 A8 66 F0 | 	shl	local02, #6
0ef84     54 93 02 F1 | 	add	arg01, local02
0ef88     18 92 06 F1 | 	add	arg01, #24
0ef8c     49 B3 62 FC | 	wrlong	local07, arg01
0ef90     68 00 90 FD | 	jmp	#LR__1265
0ef94                 | LR__1264
0ef94     38 00 00 FF 
0ef98     30 64 06 F1 | 	add	objptr, ##28720
0ef9c     32 AD 02 FB | 	rdlong	local04, objptr
0efa0     38 00 00 FF 
0efa4     30 64 86 F1 | 	sub	objptr, ##28720
0efa8     54 B9 02 F6 | 	mov	local10, local02
0efac     06 B8 66 F0 | 	shl	local10, #6
0efb0     5C AD 02 F1 | 	add	local04, local10
0efb4     18 AC 06 F1 | 	add	local04, #24
0efb8     3E 2C 25 FF 
0efbc     3C 92 06 F6 | 	mov	arg01, ##1247312956
0efc0     53 95 02 F6 | 	mov	arg02, local01
0efc4     C4 82 B1 FD | 	call	#__system___float_div
0efc8     3D 93 02 F6 | 	mov	arg01, result1
0efcc     01 94 06 F6 | 	mov	arg02, #1
0efd0     7C 85 B1 FD | 	call	#__system___float_tointeger
0efd4     56 7B 52 FC | 	wrword	result1, local04
0efd8     38 00 00 FF 
0efdc     30 64 06 F1 | 	add	objptr, ##28720
0efe0     32 93 02 FB | 	rdlong	arg01, objptr
0efe4     38 00 00 FF 
0efe8     30 64 86 F1 | 	sub	objptr, ##28720
0efec     06 A8 66 F0 | 	shl	local02, #6
0eff0     54 93 02 F1 | 	add	arg01, local02
0eff4     1A 92 06 F1 | 	add	arg01, #26
0eff8     49 01 5A FC | 	wrword	#256, arg01
0effc                 | LR__1265
0effc     E7 F0 03 F6 | 	mov	ptra, fp
0f000     F2 00 A0 FD | 	call	#popregs_
0f004                 | _do_changefreq_ret
0f004     2D 00 64 FD | 	ret
0f008                 | 
0f008                 | ' 
0f008                 | ' '-------------------- changepan
0f008                 | ' 
0f008                 | ' sub do_changepan
0f008                 | _do_changepan
0f008     02 CA 05 F6 | 	mov	COUNT_, #2
0f00c     E8 00 A0 FD | 	call	#pushregs_
0f010     14 F0 07 F1 | 	add	ptra, #20
0f014     70 E6 BF FD | 	call	#_pop
0f018     E7 7A 62 FC | 	wrlong	result1, fp
0f01c     04 CE 05 F1 | 	add	fp, #4
0f020     E7 7C 62 FC | 	wrlong	result2, fp
0f024     04 CE 05 F1 | 	add	fp, #4
0f028     E7 7E 62 FC | 	wrlong	result3, fp
0f02c     08 CE 85 F1 | 	sub	fp, #8
0f030     00 00 23 FF 
0f034     00 A6 06 F6 | 	mov	local01, ##1174405120
0f038     E7 92 02 F6 | 	mov	arg01, fp
0f03c     E0 E8 BF FD | 	call	#_converttofloat
0f040     3D 95 02 F6 | 	mov	arg02, result1
0f044     53 93 02 F6 | 	mov	arg01, local01
0f048     3C 80 B1 FD | 	call	#__system___float_mul
0f04c     3D 93 02 F6 | 	mov	arg01, result1
0f050     01 94 06 F6 | 	mov	arg02, #1
0f054     F8 84 B1 FD | 	call	#__system___float_tointeger
0f058     3D A7 02 F6 | 	mov	local01, result1
0f05c     0D A8 C6 F9 | 	decod	local02, #13
0f060     53 A9 02 F1 | 	add	local02, local01
0f064                 | ' 
0f064                 | ' t1=pop()
0f064                 | ' pan=8192+round(8192*converttofloat(t1)) 
0f064                 | ' if pan<0 then pan=0
0f064     00 A8 56 F2 | 	cmps	local02, #0 wc
0f068     00 A8 06 C6 |  if_b	mov	local02, #0
0f06c                 | ' if pan>16384 then pan=16384
0f06c     20 00 00 FF 
0f070     01 A8 56 F2 | 	cmps	local02, ##16385 wc
0f074     0E A8 C6 39 |  if_ae	decod	local02, #14
0f078     0C E6 BF FD | 	call	#_pop
0f07c     3F A7 02 F6 | 	mov	local01, result3
0f080     E7 7A 62 FC | 	wrlong	result1, fp
0f084     04 CE 05 F1 | 	add	fp, #4
0f088     E7 7C 62 FC | 	wrlong	result2, fp
0f08c     04 CE 05 F1 | 	add	fp, #4
0f090     E7 A6 62 FC | 	wrlong	local01, fp
0f094     08 CE 85 F1 | 	sub	fp, #8
0f098     E7 92 02 F6 | 	mov	arg01, fp
0f09c     C4 E7 BF FD | 	call	#_converttoint
0f0a0     3D A7 52 F6 | 	abs	local01, result1 wc
0f0a4     07 A6 06 F5 | 	and	local01, #7
0f0a8     53 A7 82 F6 | 	negc	local01, local01
0f0ac     38 00 00 FF 
0f0b0     30 64 06 F1 | 	add	objptr, ##28720
0f0b4     32 93 02 FB | 	rdlong	arg01, objptr
0f0b8     38 00 00 FF 
0f0bc     30 64 86 F1 | 	sub	objptr, ##28720
0f0c0     06 A6 66 F0 | 	shl	local01, #6
0f0c4     53 93 02 F1 | 	add	arg01, local01
0f0c8     16 92 06 F1 | 	add	arg01, #22
0f0cc     49 A9 52 FC | 	wrword	local02, arg01
0f0d0     E7 F0 03 F6 | 	mov	ptra, fp
0f0d4     F2 00 A0 FD | 	call	#popregs_
0f0d8                 | _do_changepan_ret
0f0d8     2D 00 64 FD | 	ret
0f0dc                 | 
0f0dc                 | ' 
0f0dc                 | ' '-------------------- changevol
0f0dc                 | ' 
0f0dc                 | ' sub do_changevol
0f0dc                 | _do_changevol
0f0dc     01 CA 05 F6 | 	mov	COUNT_, #1
0f0e0     E8 00 A0 FD | 	call	#pushregs_
0f0e4     14 F0 07 F1 | 	add	ptra, #20
0f0e8     9C E5 BF FD | 	call	#_pop
0f0ec     3F 95 02 F6 | 	mov	arg02, result3
0f0f0     E7 7A 62 FC | 	wrlong	result1, fp
0f0f4     04 CE 05 F1 | 	add	fp, #4
0f0f8     E7 7C 62 FC | 	wrlong	result2, fp
0f0fc     04 CE 05 F1 | 	add	fp, #4
0f100     E7 94 62 FC | 	wrlong	arg02, fp
0f104     08 CE 85 F1 | 	sub	fp, #8
0f108     E7 92 02 F6 | 	mov	arg01, fp
0f10c     10 E8 BF FD | 	call	#_converttofloat
0f110     3D 93 02 F6 | 	mov	arg01, result1
0f114     00 3D 22 FF 
0f118     00 94 06 F6 | 	mov	arg02, ##1148846080
0f11c     68 7F B1 FD | 	call	#__system___float_mul
0f120     3D 93 02 F6 | 	mov	arg01, result1
0f124     01 94 06 F6 | 	mov	arg02, #1
0f128     24 84 B1 FD | 	call	#__system___float_tointeger
0f12c     3D 95 52 F6 | 	abs	arg02, result1 wc
0f130     0D 94 46 F7 | 	zerox	arg02, #13
0f134     4A A7 82 F6 | 	negc	local01, arg02
0f138     4C E5 BF FD | 	call	#_pop
0f13c     3F 95 02 F6 | 	mov	arg02, result3
0f140     E7 7A 62 FC | 	wrlong	result1, fp
0f144     04 CE 05 F1 | 	add	fp, #4
0f148     E7 7C 62 FC | 	wrlong	result2, fp
0f14c     04 CE 05 F1 | 	add	fp, #4
0f150     E7 94 62 FC | 	wrlong	arg02, fp
0f154     08 CE 85 F1 | 	sub	fp, #8
0f158     E7 92 02 F6 | 	mov	arg01, fp
0f15c     04 E7 BF FD | 	call	#_converttoint
0f160     3D 95 52 F6 | 	abs	arg02, result1 wc
0f164     07 94 06 F5 | 	and	arg02, #7
0f168     4A 95 82 F6 | 	negc	arg02, arg02
0f16c     38 00 00 FF 
0f170     30 64 06 F1 | 	add	objptr, ##28720
0f174     32 93 02 FB | 	rdlong	arg01, objptr
0f178     38 00 00 FF 
0f17c     30 64 86 F1 | 	sub	objptr, ##28720
0f180     06 94 66 F0 | 	shl	arg02, #6
0f184     4A 93 02 F1 | 	add	arg01, arg02
0f188     14 92 06 F1 | 	add	arg01, #20
0f18c     49 A7 52 FC | 	wrword	local01, arg01
0f190     E7 F0 03 F6 | 	mov	ptra, fp
0f194     F2 00 A0 FD | 	call	#popregs_
0f198                 | _do_changevol_ret
0f198     2D 00 64 FD | 	ret
0f19c                 | 
0f19c                 | ' 
0f19c                 | ' '-------------------- changewav
0f19c                 | ' 
0f19c                 | ' sub do_changewav
0f19c                 | _do_changewav
0f19c     01 CA 05 F6 | 	mov	COUNT_, #1
0f1a0     E8 00 A0 FD | 	call	#pushregs_
0f1a4     14 F0 07 F1 | 	add	ptra, #20
0f1a8     DC E4 BF FD | 	call	#_pop
0f1ac     3F 95 02 F6 | 	mov	arg02, result3
0f1b0     E7 7A 62 FC | 	wrlong	result1, fp
0f1b4     04 CE 05 F1 | 	add	fp, #4
0f1b8     E7 7C 62 FC | 	wrlong	result2, fp
0f1bc     04 CE 05 F1 | 	add	fp, #4
0f1c0     E7 94 62 FC | 	wrlong	arg02, fp
0f1c4     08 CE 85 F1 | 	sub	fp, #8
0f1c8     E7 92 02 F6 | 	mov	arg01, fp
0f1cc     94 E6 BF FD | 	call	#_converttoint
0f1d0     3D A7 02 F6 | 	mov	local01, result1
0f1d4                 | ' 
0f1d4                 | ' t1=pop()
0f1d4                 | ' wave=converttoint(t1)
0f1d4                 | ' if wave<0 then wave=0
0f1d4     00 A6 56 F2 | 	cmps	local01, #0 wc
0f1d8     00 A6 06 C6 |  if_b	mov	local01, #0
0f1dc     A8 E4 BF FD | 	call	#_pop
0f1e0     3F 95 02 F6 | 	mov	arg02, result3
0f1e4     E7 7A 62 FC | 	wrlong	result1, fp
0f1e8     04 CE 05 F1 | 	add	fp, #4
0f1ec     E7 7C 62 FC | 	wrlong	result2, fp
0f1f0     04 CE 05 F1 | 	add	fp, #4
0f1f4     E7 94 62 FC | 	wrlong	arg02, fp
0f1f8     08 CE 85 F1 | 	sub	fp, #8
0f1fc     E7 92 02 F6 | 	mov	arg01, fp
0f200     60 E6 BF FD | 	call	#_converttoint
0f204     3D 7D 52 F6 | 	abs	result2, result1 wc
0f208     07 7C 06 F5 | 	and	result2, #7
0f20c     3E 7D 82 F6 | 	negc	result2, result2
0f210                 | ' if wave <32 then 
0f210     20 A6 56 F2 | 	cmps	local01, #32 wc
0f214     34 00 90 3D |  if_ae	jmp	#LR__1270
0f218     38 00 00 FF 
0f21c     30 64 06 F1 | 	add	objptr, ##28720
0f220     32 93 02 FB | 	rdlong	arg01, objptr
0f224     38 00 00 FF 
0f228     30 64 86 F1 | 	sub	objptr, ##28720
0f22c     06 7C 66 F0 | 	shl	result2, #6
0f230     3E 93 02 F1 | 	add	arg01, result2
0f234     08 92 06 F1 | 	add	arg01, #8
0f238     0B A6 66 F0 | 	shl	local01, #11
0f23c     00 00 40 FF 
0f240     00 A6 06 F1 | 	add	local01, ##-2147483648
0f244     49 A7 62 FC | 	wrlong	local01, arg01
0f248     28 00 90 FD | 	jmp	#LR__1271
0f24c                 | LR__1270
0f24c     38 00 00 FF 
0f250     30 64 06 F1 | 	add	objptr, ##28720
0f254     32 93 02 FB | 	rdlong	arg01, objptr
0f258     38 00 00 FF 
0f25c     30 64 86 F1 | 	sub	objptr, ##28720
0f260     06 7C 66 F0 | 	shl	result2, #6
0f264     3E 93 02 F1 | 	add	arg01, result2
0f268     08 92 06 F1 | 	add	arg01, #8
0f26c     00 00 C4 FF 
0f270     49 01 68 FC | 	wrlong	##-2013265920, arg01
0f274                 | LR__1271
0f274     E7 F0 03 F6 | 	mov	ptra, fp
0f278     F2 00 A0 FD | 	call	#popregs_
0f27c                 | _do_changewav_ret
0f27c     2D 00 64 FD | 	ret
0f280                 | 
0f280                 | ' 
0f280                 | ' '-------------------- chr$
0f280                 | ' 
0f280                 | ' sub do_chr
0f280                 | _do_chr
0f280     00 CA 05 F6 | 	mov	COUNT_, #0
0f284     E8 00 A0 FD | 	call	#pushregs_
0f288     14 F0 07 F1 | 	add	ptra, #20
0f28c     4B 00 00 FF 
0f290     A0 64 06 F1 | 	add	objptr, ##38560
0f294     32 97 02 FB | 	rdlong	arg03, objptr
0f298     4B 95 02 F6 | 	mov	arg02, arg03
0f29c     01 94 66 F0 | 	shl	arg02, #1
0f2a0     4B 95 02 F1 | 	add	arg02, arg03
0f2a4     02 94 66 F0 | 	shl	arg02, #2
0f2a8     03 00 00 FF 
0f2ac     04 64 86 F1 | 	sub	objptr, ##1540
0f2b0     32 95 02 F1 | 	add	arg02, objptr
0f2b4     4A 97 02 FB | 	rdlong	arg03, arg02
0f2b8                 | ' 
0f2b8                 | ' numpar=compiledline(lineptr_e).result.uresult
0f2b8                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f2b8     02 96 16 F2 | 	cmp	arg03, #2 wc
0f2bc     48 00 00 FF 
0f2c0     9C 64 86 F1 | 	sub	objptr, ##37020
0f2c4     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0f2c8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1280
0f2cc     00 92 06 F6 | 	mov	arg01, #0
0f2d0     68 AC B1 FD | 	call	#__system___getiolock_0622
0f2d4     3D 93 02 F6 | 	mov	arg01, result1
0f2d8     DC 56 B1 FD | 	call	#__system___lockmem
0f2dc     96 01 00 FF 
0f2e0     56 95 06 F6 | 	mov	arg02, ##@LR__5971
0f2e4     00 92 06 F6 | 	mov	arg01, #0
0f2e8     00 96 06 F6 | 	mov	arg03, #0
0f2ec     BC 63 B1 FD | 	call	#__system___basic_print_string
0f2f0     00 92 06 F6 | 	mov	arg01, #0
0f2f4     44 AC B1 FD | 	call	#__system___getiolock_0622
0f2f8     3D 01 68 FC | 	wrlong	#0, result1
0f2fc     27 92 06 F6 | 	mov	arg01, #39
0f300     00 94 06 F6 | 	mov	arg02, #0
0f304     34 1D B1 FD | 	call	#_printerror
0f308     48 00 90 FD | 	jmp	#LR__1281
0f30c                 | LR__1280
0f30c     78 E3 BF FD | 	call	#_pop
0f310     3F 97 02 F6 | 	mov	arg03, result3
0f314     E7 7A 62 FC | 	wrlong	result1, fp
0f318     04 CE 05 F1 | 	add	fp, #4
0f31c     E7 7C 62 FC | 	wrlong	result2, fp
0f320     04 CE 05 F1 | 	add	fp, #4
0f324     E7 96 62 FC | 	wrlong	arg03, fp
0f328     08 CE 85 F1 | 	sub	fp, #8
0f32c     E7 92 02 F6 | 	mov	arg01, fp
0f330     30 E5 BF FD | 	call	#_converttoint
0f334     3D 93 02 F6 | 	mov	arg01, result1
0f338     E8 70 B1 FD | 	call	#__system__Chr_S
0f33c     E7 7A 62 FC | 	wrlong	result1, fp
0f340     08 CE 05 F1 | 	add	fp, #8
0f344     E7 3E 68 FC | 	wrlong	#31, fp
0f348     08 CE 85 F1 | 	sub	fp, #8
0f34c     E7 92 02 F6 | 	mov	arg01, fp
0f350     C4 E3 BF FD | 	call	#_push
0f354                 | LR__1281
0f354     E7 F0 03 F6 | 	mov	ptra, fp
0f358     F2 00 A0 FD | 	call	#popregs_
0f35c                 | _do_chr_ret
0f35c     2D 00 64 FD | 	ret
0f360                 | 
0f360                 | ' 
0f360                 | ' '-------------------- circle
0f360                 | ' 
0f360                 | ' sub do_circle
0f360                 | _do_circle
0f360     02 CA 05 F6 | 	mov	COUNT_, #2
0f364     E8 00 A0 FD | 	call	#pushregs_
0f368     24 F0 07 F1 | 	add	ptra, #36
0f36c     18 E3 BF FD | 	call	#_pop
0f370     3D 99 02 F6 | 	mov	arg04, result1
0f374     3E 97 02 F6 | 	mov	arg03, result2
0f378     3F 95 02 F6 | 	mov	arg02, result3
0f37c     18 CE 05 F1 | 	add	fp, #24
0f380     E7 98 62 FC | 	wrlong	arg04, fp
0f384     04 CE 05 F1 | 	add	fp, #4
0f388     E7 96 62 FC | 	wrlong	arg03, fp
0f38c     04 CE 05 F1 | 	add	fp, #4
0f390     E7 94 62 FC | 	wrlong	arg02, fp
0f394     20 CE 85 F1 | 	sub	fp, #32
0f398     EC E2 BF FD | 	call	#_pop
0f39c     3D 99 02 F6 | 	mov	arg04, result1
0f3a0     3E 97 02 F6 | 	mov	arg03, result2
0f3a4     3F A7 02 F6 | 	mov	local01, result3
0f3a8     0C CE 05 F1 | 	add	fp, #12
0f3ac     E7 98 62 FC | 	wrlong	arg04, fp
0f3b0     04 CE 05 F1 | 	add	fp, #4
0f3b4     E7 96 62 FC | 	wrlong	arg03, fp
0f3b8     04 CE 05 F1 | 	add	fp, #4
0f3bc     E7 A6 62 FC | 	wrlong	local01, fp
0f3c0     14 CE 85 F1 | 	sub	fp, #20
0f3c4     C0 E2 BF FD | 	call	#_pop
0f3c8     E7 7A 62 FC | 	wrlong	result1, fp
0f3cc     04 CE 05 F1 | 	add	fp, #4
0f3d0     E7 7C 62 FC | 	wrlong	result2, fp
0f3d4     04 CE 05 F1 | 	add	fp, #4
0f3d8     E7 7E 62 FC | 	wrlong	result3, fp
0f3dc                 | ' 
0f3dc                 | ' t3=pop()
0f3dc                 | ' t2=pop()
0f3dc                 | ' t1=pop()
0f3dc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f3dc     3F 99 02 F6 | 	mov	arg04, result3
0f3e0     08 CE 85 F1 | 	sub	fp, #8
0f3e4     1C 98 0E F2 | 	cmp	arg04, #28 wz
0f3e8     08 CE 05 51 |  if_ne	add	fp, #8
0f3ec     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0f3f0     08 CE 85 51 |  if_ne	sub	fp, #8
0f3f4     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0f3f8     7C 00 90 5D |  if_ne	jmp	#LR__1290
0f3fc     14 CE 05 F1 | 	add	fp, #20
0f400     E7 A6 02 FB | 	rdlong	local01, fp
0f404     14 CE 85 F1 | 	sub	fp, #20
0f408     1C A6 0E F2 | 	cmp	local01, #28 wz
0f40c     14 CE 05 51 |  if_ne	add	fp, #20
0f410     E7 98 02 5B |  if_ne	rdlong	arg04, fp
0f414     14 CE 85 51 |  if_ne	sub	fp, #20
0f418     1D 98 0E 52 |  if_ne	cmp	arg04, #29 wz
0f41c     58 00 90 5D |  if_ne	jmp	#LR__1290
0f420     20 CE 05 F1 | 	add	fp, #32
0f424     E7 A6 02 FB | 	rdlong	local01, fp
0f428     20 CE 85 F1 | 	sub	fp, #32
0f42c     1C A6 0E F2 | 	cmp	local01, #28 wz
0f430     20 CE 05 51 |  if_ne	add	fp, #32
0f434     E7 98 02 5B |  if_ne	rdlong	arg04, fp
0f438     20 CE 85 51 |  if_ne	sub	fp, #32
0f43c     1D 98 0E 52 |  if_ne	cmp	arg04, #29 wz
0f440     34 00 90 5D |  if_ne	jmp	#LR__1290
0f444     E7 92 02 FB | 	rdlong	arg01, fp
0f448     0C CE 05 F1 | 	add	fp, #12
0f44c     E7 94 02 FB | 	rdlong	arg02, fp
0f450     0C CE 05 F1 | 	add	fp, #12
0f454     E7 96 02 FB | 	rdlong	arg03, fp
0f458     18 CE 85 F1 | 	sub	fp, #24
0f45c     38 00 00 FF 
0f460     48 64 06 F1 | 	add	objptr, ##28744
0f464     32 99 02 FB | 	rdlong	arg04, objptr
0f468     38 00 00 FF 
0f46c     48 64 86 F1 | 	sub	objptr, ##28744
0f470     68 34 B1 FD | 	call	#_hg010b_spin2_circle
0f474                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f474     4C 00 90 FD | 	jmp	#LR__1291
0f478                 | LR__1290
0f478     E7 92 02 F6 | 	mov	arg01, fp
0f47c     E4 E3 BF FD | 	call	#_converttoint
0f480     3D A7 02 F6 | 	mov	local01, result1
0f484     E7 92 02 F6 | 	mov	arg01, fp
0f488     0C 92 06 F1 | 	add	arg01, #12
0f48c     D4 E3 BF FD | 	call	#_converttoint
0f490     3D A9 02 F6 | 	mov	local02, result1
0f494     E7 92 02 F6 | 	mov	arg01, fp
0f498     18 92 06 F1 | 	add	arg01, #24
0f49c     C4 E3 BF FD | 	call	#_converttoint
0f4a0     3D 97 02 F6 | 	mov	arg03, result1
0f4a4     38 00 00 FF 
0f4a8     48 64 06 F1 | 	add	objptr, ##28744
0f4ac     32 99 02 FB | 	rdlong	arg04, objptr
0f4b0     38 00 00 FF 
0f4b4     48 64 86 F1 | 	sub	objptr, ##28744
0f4b8     53 93 02 F6 | 	mov	arg01, local01
0f4bc     54 95 02 F6 | 	mov	arg02, local02
0f4c0     18 34 B1 FD | 	call	#_hg010b_spin2_circle
0f4c4                 | LR__1291
0f4c4     E7 F0 03 F6 | 	mov	ptra, fp
0f4c8     F2 00 A0 FD | 	call	#popregs_
0f4cc                 | _do_circle_ret
0f4cc     2D 00 64 FD | 	ret
0f4d0                 | 
0f4d0                 | ' 
0f4d0                 | ' '-------------------- click
0f4d0                 | ' 
0f4d0                 | ' sub do_click
0f4d0                 | _do_click
0f4d0     B4 E1 BF FD | 	call	#_pop
0f4d4     00 7A 4E F2 | 	cmps	result1, #0 wz
0f4d8                 | ' 
0f4d8                 | ' t1=pop()
0f4d8                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f4d8     51 00 00 AF 
0f4dc     5C 65 06 A1 |  if_e	add	objptr, ##41820
0f4e0     32 01 68 AC |  if_e	wrlong	#0, objptr
0f4e4     51 00 00 FF 
0f4e8     5C 65 C6 F3 | 	sumz	objptr, ##41820
0f4ec     32 03 68 5C |  if_ne	wrlong	#1, objptr
0f4f0     51 00 00 5F 
0f4f4     5C 65 86 51 |  if_ne	sub	objptr, ##41820
0f4f8                 | _do_click_ret
0f4f8     2D 00 64 FD | 	ret
0f4fc                 | 
0f4fc                 | ' 
0f4fc                 | ' '-------------------- close
0f4fc                 | ' 
0f4fc                 | ' sub do_close
0f4fc                 | _do_close
0f4fc     03 CA 05 F6 | 	mov	COUNT_, #3
0f500     E8 00 A0 FD | 	call	#pushregs_
0f504     80 E1 BF FD | 	call	#_pop
0f508     3D A7 02 F6 | 	mov	local01, result1
0f50c     3F 97 02 F6 | 	mov	arg03, result3
0f510     3E A9 02 F6 | 	mov	local02, result2
0f514     4B AB 02 F6 | 	mov	local03, arg03
0f518                 | ' 
0f518                 | ' numpar=compiledline(lineptr_e).result.uresult
0f518                 | ' t1=pop()
0f518                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f518     2C AA 0E F2 | 	cmp	local03, #44 wz
0f51c     44 00 90 AD |  if_e	jmp	#LR__1300
0f520     00 92 06 F6 | 	mov	arg01, #0
0f524     14 AA B1 FD | 	call	#__system___getiolock_0622
0f528     3D 93 02 F6 | 	mov	arg01, result1
0f52c     88 54 B1 FD | 	call	#__system___lockmem
0f530     96 01 00 FF 
0f534     5D 95 06 F6 | 	mov	arg02, ##@LR__5972
0f538     00 92 06 F6 | 	mov	arg01, #0
0f53c     00 96 06 F6 | 	mov	arg03, #0
0f540     68 61 B1 FD | 	call	#__system___basic_print_string
0f544     00 92 06 F6 | 	mov	arg01, #0
0f548     0A 94 06 F6 | 	mov	arg02, #10
0f54c     00 96 06 F6 | 	mov	arg03, #0
0f550     00 61 B1 FD | 	call	#__system___basic_print_char
0f554     00 92 06 F6 | 	mov	arg01, #0
0f558     E0 A9 B1 FD | 	call	#__system___getiolock_0622
0f55c     3D 01 68 FC | 	wrlong	#0, result1
0f560     08 00 90 FD | 	jmp	#LR__1301
0f564                 | LR__1300
0f564                 | ' channel  = t1.result.iresult
0f564                 | ' close #channel
0f564     53 93 02 F6 | 	mov	arg01, local01
0f568     28 A0 B1 FD | 	call	#__system__close
0f56c                 | LR__1301
0f56c     E7 F0 03 F6 | 	mov	ptra, fp
0f570     F2 00 A0 FD | 	call	#popregs_
0f574                 | _do_close_ret
0f574     2D 00 64 FD | 	ret
0f578                 | 
0f578                 | ' 
0f578                 | ' '-------------------- cls
0f578                 | ' 
0f578                 | ' sub do_cls
0f578                 | _do_cls
0f578     38 00 00 FF 
0f57c     5C 64 06 F1 | 	add	objptr, ##28764
0f580     32 93 02 FB | 	rdlong	arg01, objptr
0f584     04 64 86 F1 | 	sub	objptr, #4
0f588     32 95 02 FB | 	rdlong	arg02, objptr
0f58c     38 00 00 FF 
0f590     58 64 86 F1 | 	sub	objptr, ##28760
0f594     50 38 B1 FD | 	call	#_hg010b_spin2_cls
0f598     38 00 00 FF 
0f59c     5C 64 06 F1 | 	add	objptr, ##28764
0f5a0     32 95 02 FB | 	rdlong	arg02, objptr
0f5a4     14 64 86 F1 | 	sub	objptr, #20
0f5a8     32 95 62 FC | 	wrlong	arg02, objptr
0f5ac     38 00 00 FF 
0f5b0     48 64 86 F1 | 	sub	objptr, ##28744
0f5b4                 | _do_cls_ret
0f5b4     2D 00 64 FD | 	ret
0f5b8                 | 
0f5b8                 | ' 
0f5b8                 | ' sub do_coginit
0f5b8                 | _do_coginit
0f5b8     05 CA 05 F6 | 	mov	COUNT_, #5
0f5bc     E8 00 A0 FD | 	call	#pushregs_
0f5c0     08 00 00 FF 
0f5c4     1C F0 07 F1 | 	add	ptra, ##4124
0f5c8     4B 00 00 FF 
0f5cc     A0 64 06 F1 | 	add	objptr, ##38560
0f5d0     32 A7 02 FB | 	rdlong	local01, objptr
0f5d4     53 A9 02 F6 | 	mov	local02, local01
0f5d8     01 A8 66 F0 | 	shl	local02, #1
0f5dc     53 A9 02 F1 | 	add	local02, local01
0f5e0     02 A8 66 F0 | 	shl	local02, #2
0f5e4     03 00 00 FF 
0f5e8     04 64 86 F1 | 	sub	objptr, ##1540
0f5ec     32 A9 02 F1 | 	add	local02, objptr
0f5f0     54 A9 02 FB | 	rdlong	local02, local02
0f5f4                 | ' numpar=compiledline(lineptr_e).result.uresult
0f5f4                 | ' if numpar<2 orelse numpar>3 then print "coginit: "; : printerror(39) : return
0f5f4     02 A8 56 F2 | 	cmps	local02, #2 wc
0f5f8     48 00 00 FF 
0f5fc     9C 64 86 F1 | 	sub	objptr, ##37020
0f600     08 00 90 CD |  if_b	jmp	#LR__1310
0f604     04 A8 56 F2 | 	cmps	local02, #4 wc
0f608     40 00 90 CD |  if_b	jmp	#LR__1311
0f60c                 | LR__1310
0f60c     00 92 06 F6 | 	mov	arg01, #0
0f610     28 A9 B1 FD | 	call	#__system___getiolock_0622
0f614     3D 93 02 F6 | 	mov	arg01, result1
0f618     9C 53 B1 FD | 	call	#__system___lockmem
0f61c     96 01 00 FF 
0f620     6F 95 06 F6 | 	mov	arg02, ##@LR__5973
0f624     00 92 06 F6 | 	mov	arg01, #0
0f628     00 96 06 F6 | 	mov	arg03, #0
0f62c     7C 60 B1 FD | 	call	#__system___basic_print_string
0f630     00 92 06 F6 | 	mov	arg01, #0
0f634     04 A9 B1 FD | 	call	#__system___getiolock_0622
0f638     3D 01 68 FC | 	wrlong	#0, result1
0f63c     27 92 06 F6 | 	mov	arg01, #39
0f640     00 94 06 F6 | 	mov	arg02, #0
0f644     F4 19 B1 FD | 	call	#_printerror
0f648     2C 01 90 FD | 	jmp	#LR__1315
0f64c                 | LR__1311
0f64c     38 E0 BF FD | 	call	#_pop
0f650     3F A7 02 F6 | 	mov	local01, result3
0f654     08 00 00 FF 
0f658     10 CE 05 F1 | 	add	fp, ##4112
0f65c     E7 7A 62 FC | 	wrlong	result1, fp
0f660     04 CE 05 F1 | 	add	fp, #4
0f664     E7 7C 62 FC | 	wrlong	result2, fp
0f668     04 CE 05 F1 | 	add	fp, #4
0f66c     E7 A6 62 FC | 	wrlong	local01, fp
0f670     08 CE 85 F1 | 	sub	fp, #8
0f674     E7 92 02 F6 | 	mov	arg01, fp
0f678     08 00 00 FF 
0f67c     10 CE 85 F1 | 	sub	fp, ##4112
0f680     E0 E1 BF FD | 	call	#_converttoint
0f684     3D AB 02 F6 | 	mov	local03, result1
0f688     FC DF BF FD | 	call	#_pop
0f68c     3F A7 02 F6 | 	mov	local01, result3
0f690     08 00 00 FF 
0f694     10 CE 05 F1 | 	add	fp, ##4112
0f698     E7 7A 62 FC | 	wrlong	result1, fp
0f69c     04 CE 05 F1 | 	add	fp, #4
0f6a0     E7 7C 62 FC | 	wrlong	result2, fp
0f6a4     04 CE 05 F1 | 	add	fp, #4
0f6a8     E7 A6 62 FC | 	wrlong	local01, fp
0f6ac     08 CE 85 F1 | 	sub	fp, #8
0f6b0     E7 92 02 F6 | 	mov	arg01, fp
0f6b4     08 00 00 FF 
0f6b8     10 CE 85 F1 | 	sub	fp, ##4112
0f6bc     A4 E1 BF FD | 	call	#_converttoint
0f6c0     3D AD 02 F6 | 	mov	local04, result1
0f6c4                 | ' t1=pop()
0f6c4                 | ' ptra_val=converttoint(t1)
0f6c4                 | ' t1=pop()
0f6c4                 | ' addrval=converttoint(t1)
0f6c4                 | ' if numpar=3 then 
0f6c4     03 A8 0E F2 | 	cmp	local02, #3 wz
0f6c8     40 00 90 5D |  if_ne	jmp	#LR__1312
0f6cc     B8 DF BF FD | 	call	#_pop
0f6d0     3F A7 02 F6 | 	mov	local01, result3
0f6d4     08 00 00 FF 
0f6d8     10 CE 05 F1 | 	add	fp, ##4112
0f6dc     E7 7A 62 FC | 	wrlong	result1, fp
0f6e0     04 CE 05 F1 | 	add	fp, #4
0f6e4     E7 7C 62 FC | 	wrlong	result2, fp
0f6e8     04 CE 05 F1 | 	add	fp, #4
0f6ec     E7 A6 62 FC | 	wrlong	local01, fp
0f6f0     08 CE 85 F1 | 	sub	fp, #8
0f6f4     E7 92 02 F6 | 	mov	arg01, fp
0f6f8     08 00 00 FF 
0f6fc     10 CE 85 F1 | 	sub	fp, ##4112
0f700     60 E1 BF FD | 	call	#_converttoint
0f704     3D AF 02 F6 | 	mov	local05, result1
0f708     04 00 90 FD | 	jmp	#LR__1313
0f70c                 | LR__1312
0f70c     10 AE 06 F6 | 	mov	local05, #16
0f710                 | LR__1313
0f710                 | '     
0f710                 | ' if addrval>$80000 then psram.read1(varptr(tempbuf(0)),addrval,4096) : addrval=varptr(tempbuf(0))
0f710     00 04 00 FF 
0f714     01 AC 56 F2 | 	cmps	local04, ##524289 wc
0f718     2C 00 90 CD |  if_b	jmp	#LR__1314
0f71c     E7 92 02 F6 | 	mov	arg01, fp
0f720     10 92 06 F1 | 	add	arg01, #16
0f724     56 95 02 F6 | 	mov	arg02, local04
0f728     0C 96 C6 F9 | 	decod	arg03, #12
0f72c     0B 00 00 FF 
0f730     CC 64 06 F1 | 	add	objptr, ##5836
0f734     60 46 B1 FD | 	call	#_psram_spin2_read1
0f738     0B 00 00 FF 
0f73c     CC 64 86 F1 | 	sub	objptr, ##5836
0f740     E7 AC 02 F6 | 	mov	local04, fp
0f744     10 AC 06 F1 | 	add	local04, #16
0f748                 | LR__1314
0f748                 | ' 
0f748                 | '  asm
0f748     28 AA 62 FD | 	setq	local03
0f74c     56 AF F2 FC | 	coginit	local05, local04 wc
0f750                 | '  
0f750                 | ' return cog 
0f750     08 00 00 FF 
0f754     10 CE 05 F1 | 	add	fp, ##4112
0f758     E7 AE 62 FC | 	wrlong	local05, fp
0f75c     08 CE 05 F1 | 	add	fp, #8
0f760     E7 38 68 FC | 	wrlong	#28, fp
0f764     08 CE 85 F1 | 	sub	fp, #8
0f768     E7 92 02 F6 | 	mov	arg01, fp
0f76c     08 00 00 FF 
0f770     10 CE 85 F1 | 	sub	fp, ##4112
0f774     A0 DF BF FD | 	call	#_push
0f778                 | LR__1315
0f778     E7 F0 03 F6 | 	mov	ptra, fp
0f77c     F2 00 A0 FD | 	call	#popregs_
0f780                 | _do_coginit_ret
0f780     2D 00 64 FD | 	ret
0f784                 | 
0f784                 | ' 
0f784                 | ' '-------------------- cogstop
0f784                 | ' 
0f784                 | ' sub do_cogstop
0f784                 | _do_cogstop
0f784     00 CA 05 F6 | 	mov	COUNT_, #0
0f788     E8 00 A0 FD | 	call	#pushregs_
0f78c     0C F0 07 F1 | 	add	ptra, #12
0f790     F4 DE BF FD | 	call	#_pop
0f794     E7 7A 62 FC | 	wrlong	result1, fp
0f798     04 CE 05 F1 | 	add	fp, #4
0f79c     E7 7C 62 FC | 	wrlong	result2, fp
0f7a0     04 CE 05 F1 | 	add	fp, #4
0f7a4     E7 7E 62 FC | 	wrlong	result3, fp
0f7a8     08 CE 85 F1 | 	sub	fp, #8
0f7ac     E7 92 02 F6 | 	mov	arg01, fp
0f7b0     B0 E0 BF FD | 	call	#_converttoint
0f7b4     03 7A 62 FD | 	cogstop	result1
0f7b8     E7 F0 03 F6 | 	mov	ptra, fp
0f7bc     F2 00 A0 FD | 	call	#popregs_
0f7c0                 | _do_cogstop_ret
0f7c0     2D 00 64 FD | 	ret
0f7c4                 | 
0f7c4                 | ' 
0f7c4                 | ' '-------------------- color
0f7c4                 | ' 
0f7c4                 | ' sub do_color
0f7c4                 | _do_color
0f7c4     03 CA 05 F6 | 	mov	COUNT_, #3
0f7c8     E8 00 A0 FD | 	call	#pushregs_
0f7cc     B8 DE BF FD | 	call	#_pop
0f7d0     3D A7 02 F6 | 	mov	local01, result1
0f7d4     3E A9 02 F6 | 	mov	local02, result2
0f7d8     3F AB 02 F6 | 	mov	local03, result3
0f7dc     38 00 00 FF 
0f7e0     48 64 06 F1 | 	add	objptr, ##28744
0f7e4     32 A7 62 FC | 	wrlong	local01, objptr
0f7e8     38 00 00 FF 
0f7ec     48 64 86 F1 | 	sub	objptr, ##28744
0f7f0     E7 F0 03 F6 | 	mov	ptra, fp
0f7f4     F2 00 A0 FD | 	call	#popregs_
0f7f8                 | _do_color_ret
0f7f8     2D 00 64 FD | 	ret
0f7fc                 | 
0f7fc                 | ' 
0f7fc                 | ' '-------------------- copy
0f7fc                 | ' 
0f7fc                 | ' sub do_copy
0f7fc                 | _do_copy
0f7fc     08 CA 05 F6 | 	mov	COUNT_, #8
0f800     E8 00 A0 FD | 	call	#pushregs_
0f804     80 DE BF FD | 	call	#_pop
0f808     3D A7 02 F6 | 	mov	local01, result1
0f80c     3E 9B 02 F6 | 	mov	arg05, result2
0f810     3F 99 02 F6 | 	mov	arg04, result3
0f814     4D A9 02 F6 | 	mov	local02, arg05
0f818     4C AB 02 F6 | 	mov	local03, arg04
0f81c     68 DE BF FD | 	call	#_pop
0f820     3E 9B 02 F6 | 	mov	arg05, result2
0f824     3F 99 02 F6 | 	mov	arg04, result3
0f828     3D AD 02 F6 | 	mov	local04, result1
0f82c     4D AF 02 F6 | 	mov	local05, arg05
0f830     4C B1 02 F6 | 	mov	local06, arg04
0f834                 | ' 
0f834                 | ' t1=pop()
0f834                 | ' t2=pop()
0f834                 | ' if t2.result_type=result_string2 then 
0f834     2B B0 0E F2 | 	cmp	local06, #43 wz
0f838     10 00 90 5D |  if_ne	jmp	#LR__1320
0f83c     56 93 02 F6 | 	mov	arg01, local04
0f840     B4 DF BF FD | 	call	#_convertstring
0f844     3D B3 02 F6 | 	mov	local07, result1
0f848     2C 00 90 FD | 	jmp	#LR__1322
0f84c                 | LR__1320
0f84c     1F B0 0E F2 | 	cmp	local06, #31 wz
0f850     56 B3 02 A6 |  if_e	mov	local07, local04
0f854     20 00 90 AD |  if_e	jmp	#LR__1321
0f858     51 00 00 FF 
0f85c     10 65 06 F1 | 	add	objptr, ##41744
0f860     32 95 02 FB | 	rdlong	arg02, objptr
0f864     51 00 00 FF 
0f868     10 65 86 F1 | 	sub	objptr, ##41744
0f86c     0F 92 06 F6 | 	mov	arg01, #15
0f870     C8 17 B1 FD | 	call	#_printerror
0f874                 | '   printerror(15,runheader(0)) : return
0f874     50 03 90 FD | 	jmp	#LR__1329
0f878                 | LR__1321
0f878                 | LR__1322
0f878                 | ' if t1.result_type=result_string2 then 
0f878     2B AA 0E F2 | 	cmp	local03, #43 wz
0f87c     10 00 90 5D |  if_ne	jmp	#LR__1323
0f880     53 93 02 F6 | 	mov	arg01, local01
0f884     70 DF BF FD | 	call	#_convertstring
0f888     3D B5 02 F6 | 	mov	local08, result1
0f88c     2C 00 90 FD | 	jmp	#LR__1325
0f890                 | LR__1323
0f890     1F AA 0E F2 | 	cmp	local03, #31 wz
0f894     53 B5 02 A6 |  if_e	mov	local08, local01
0f898     20 00 90 AD |  if_e	jmp	#LR__1324
0f89c     51 00 00 FF 
0f8a0     10 65 06 F1 | 	add	objptr, ##41744
0f8a4     32 95 02 FB | 	rdlong	arg02, objptr
0f8a8     51 00 00 FF 
0f8ac     10 65 86 F1 | 	sub	objptr, ##41744
0f8b0     0F 92 06 F6 | 	mov	arg01, #15
0f8b4     84 17 B1 FD | 	call	#_printerror
0f8b8                 | '   printerror(15,runheader(0)) : return
0f8b8     0C 03 90 FD | 	jmp	#LR__1329
0f8bc                 | LR__1324
0f8bc                 | LR__1325
0f8bc                 | ' 
0f8bc                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0f8bc     09 92 06 F6 | 	mov	arg01, #9
0f8c0     59 95 02 F6 | 	mov	arg02, local07
0f8c4     00 96 06 F6 | 	mov	arg03, #0
0f8c8     9C 5C B1 FD | 	call	#__system___basic_open_string
0f8cc     20 68 06 F1 | 	add	ptr___system__dat__, #32
0f8d0     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
0f8d4     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0f8d8     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0f8dc     53 00 00 FF 
0f8e0     30 65 06 F1 | 	add	objptr, ##42800
0f8e4     32 7B 62 FC | 	wrlong	result1, objptr
0f8e8     53 00 00 FF 
0f8ec     30 65 86 F1 | 	sub	objptr, ##42800
0f8f0     0C 01 90 AD |  if_e	jmp	#LR__1326
0f8f4     00 92 06 F6 | 	mov	arg01, #0
0f8f8     40 A6 B1 FD | 	call	#__system___getiolock_0622
0f8fc     3D 93 02 F6 | 	mov	arg01, result1
0f900     B4 50 B1 FD | 	call	#__system___lockmem
0f904     96 01 00 FF 
0f908     79 95 06 F6 | 	mov	arg02, ##@LR__5974
0f90c     00 92 06 F6 | 	mov	arg01, #0
0f910     00 96 06 F6 | 	mov	arg03, #0
0f914     94 5D B1 FD | 	call	#__system___basic_print_string
0f918     53 00 00 FF 
0f91c     30 65 06 F1 | 	add	objptr, ##42800
0f920     32 95 02 FB | 	rdlong	arg02, objptr
0f924     53 00 00 FF 
0f928     30 65 86 F1 | 	sub	objptr, ##42800
0f92c     00 92 06 F6 | 	mov	arg01, #0
0f930     00 96 06 F6 | 	mov	arg03, #0
0f934     0A 98 06 F6 | 	mov	arg04, #10
0f938     B4 5D B1 FD | 	call	#__system___basic_print_integer
0f93c     96 01 00 FF 
0f940     89 95 06 F6 | 	mov	arg02, ##@LR__5975
0f944     00 92 06 F6 | 	mov	arg01, #0
0f948     00 96 06 F6 | 	mov	arg03, #0
0f94c     5C 5D B1 FD | 	call	#__system___basic_print_string
0f950     51 00 00 FF 
0f954     10 65 06 F1 | 	add	objptr, ##41744
0f958     32 95 02 FB | 	rdlong	arg02, objptr
0f95c     51 00 00 FF 
0f960     10 65 86 F1 | 	sub	objptr, ##41744
0f964     00 92 06 F6 | 	mov	arg01, #0
0f968     00 96 06 F6 | 	mov	arg03, #0
0f96c     0A 98 06 F6 | 	mov	arg04, #10
0f970     BC 5D B1 FD | 	call	#__system___basic_print_unsigned
0f974     96 01 00 FF 
0f978     93 95 06 F6 | 	mov	arg02, ##@LR__5976
0f97c     00 92 06 F6 | 	mov	arg01, #0
0f980     00 96 06 F6 | 	mov	arg03, #0
0f984     24 5D B1 FD | 	call	#__system___basic_print_string
0f988     00 B4 06 F6 | 	mov	local08, #0
0f98c     53 00 00 FF 
0f990     30 65 06 F1 | 	add	objptr, ##42800
0f994     32 93 02 FB | 	rdlong	arg01, objptr
0f998     53 00 00 FF 
0f99c     30 65 86 F1 | 	sub	objptr, ##42800
0f9a0     C4 71 B1 FD | 	call	#__system___strerror
0f9a4     3D 95 02 F6 | 	mov	arg02, result1
0f9a8     5A 93 02 F6 | 	mov	arg01, local08
0f9ac     00 96 06 F6 | 	mov	arg03, #0
0f9b0     F8 5C B1 FD | 	call	#__system___basic_print_string
0f9b4     96 01 00 FF 
0f9b8     96 95 06 F6 | 	mov	arg02, ##@LR__5977
0f9bc     00 92 06 F6 | 	mov	arg01, #0
0f9c0     00 96 06 F6 | 	mov	arg03, #0
0f9c4     E4 5C B1 FD | 	call	#__system___basic_print_string
0f9c8     00 92 06 F6 | 	mov	arg01, #0
0f9cc     59 95 02 F6 | 	mov	arg02, local07
0f9d0     00 96 06 F6 | 	mov	arg03, #0
0f9d4     D4 5C B1 FD | 	call	#__system___basic_print_string
0f9d8     00 92 06 F6 | 	mov	arg01, #0
0f9dc     0A 94 06 F6 | 	mov	arg02, #10
0f9e0     00 96 06 F6 | 	mov	arg03, #0
0f9e4     6C 5C B1 FD | 	call	#__system___basic_print_char
0f9e8     00 92 06 F6 | 	mov	arg01, #0
0f9ec     4C A5 B1 FD | 	call	#__system___getiolock_0622
0f9f0     3D 01 68 FC | 	wrlong	#0, result1
0f9f4     09 92 06 F6 | 	mov	arg01, #9
0f9f8     98 9B B1 FD | 	call	#__system__close
0f9fc     C8 01 90 FD | 	jmp	#LR__1329
0fa00                 | LR__1326
0fa00                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0fa00     08 92 06 F6 | 	mov	arg01, #8
0fa04     5A 95 02 F6 | 	mov	arg02, local08
0fa08     0D 96 06 F6 | 	mov	arg03, #13
0fa0c     58 5B B1 FD | 	call	#__system___basic_open_string
0fa10     20 68 06 F1 | 	add	ptr___system__dat__, #32
0fa14     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
0fa18     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0fa1c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0fa20     53 00 00 FF 
0fa24     30 65 06 F1 | 	add	objptr, ##42800
0fa28     32 7B 62 FC | 	wrlong	result1, objptr
0fa2c     53 00 00 FF 
0fa30     30 65 86 F1 | 	sub	objptr, ##42800
0fa34     0C 01 90 AD |  if_e	jmp	#LR__1327
0fa38     00 92 06 F6 | 	mov	arg01, #0
0fa3c     FC A4 B1 FD | 	call	#__system___getiolock_0622
0fa40     3D 93 02 F6 | 	mov	arg01, result1
0fa44     70 4F B1 FD | 	call	#__system___lockmem
0fa48     96 01 00 FF 
0fa4c     A4 95 06 F6 | 	mov	arg02, ##@LR__5978
0fa50     00 92 06 F6 | 	mov	arg01, #0
0fa54     00 96 06 F6 | 	mov	arg03, #0
0fa58     50 5C B1 FD | 	call	#__system___basic_print_string
0fa5c     53 00 00 FF 
0fa60     30 65 06 F1 | 	add	objptr, ##42800
0fa64     32 95 02 FB | 	rdlong	arg02, objptr
0fa68     53 00 00 FF 
0fa6c     30 65 86 F1 | 	sub	objptr, ##42800
0fa70     00 92 06 F6 | 	mov	arg01, #0
0fa74     00 96 06 F6 | 	mov	arg03, #0
0fa78     0A 98 06 F6 | 	mov	arg04, #10
0fa7c     70 5C B1 FD | 	call	#__system___basic_print_integer
0fa80     96 01 00 FF 
0fa84     B4 95 06 F6 | 	mov	arg02, ##@LR__5979
0fa88     00 92 06 F6 | 	mov	arg01, #0
0fa8c     00 96 06 F6 | 	mov	arg03, #0
0fa90     18 5C B1 FD | 	call	#__system___basic_print_string
0fa94     51 00 00 FF 
0fa98     10 65 06 F1 | 	add	objptr, ##41744
0fa9c     32 95 02 FB | 	rdlong	arg02, objptr
0faa0     51 00 00 FF 
0faa4     10 65 86 F1 | 	sub	objptr, ##41744
0faa8     00 92 06 F6 | 	mov	arg01, #0
0faac     00 96 06 F6 | 	mov	arg03, #0
0fab0     0A 98 06 F6 | 	mov	arg04, #10
0fab4     78 5C B1 FD | 	call	#__system___basic_print_unsigned
0fab8     96 01 00 FF 
0fabc     BE 95 06 F6 | 	mov	arg02, ##@LR__5980
0fac0     00 92 06 F6 | 	mov	arg01, #0
0fac4     00 96 06 F6 | 	mov	arg03, #0
0fac8     E0 5B B1 FD | 	call	#__system___basic_print_string
0facc     00 B2 06 F6 | 	mov	local07, #0
0fad0     53 00 00 FF 
0fad4     30 65 06 F1 | 	add	objptr, ##42800
0fad8     32 93 02 FB | 	rdlong	arg01, objptr
0fadc     53 00 00 FF 
0fae0     30 65 86 F1 | 	sub	objptr, ##42800
0fae4     80 70 B1 FD | 	call	#__system___strerror
0fae8     3D 95 02 F6 | 	mov	arg02, result1
0faec     59 93 02 F6 | 	mov	arg01, local07
0faf0     00 96 06 F6 | 	mov	arg03, #0
0faf4     B4 5B B1 FD | 	call	#__system___basic_print_string
0faf8     96 01 00 FF 
0fafc     C1 95 06 F6 | 	mov	arg02, ##@LR__5981
0fb00     00 92 06 F6 | 	mov	arg01, #0
0fb04     00 96 06 F6 | 	mov	arg03, #0
0fb08     A0 5B B1 FD | 	call	#__system___basic_print_string
0fb0c     00 92 06 F6 | 	mov	arg01, #0
0fb10     5A 95 02 F6 | 	mov	arg02, local08
0fb14     00 96 06 F6 | 	mov	arg03, #0
0fb18     90 5B B1 FD | 	call	#__system___basic_print_string
0fb1c     00 92 06 F6 | 	mov	arg01, #0
0fb20     0A 94 06 F6 | 	mov	arg02, #10
0fb24     00 96 06 F6 | 	mov	arg03, #0
0fb28     28 5B B1 FD | 	call	#__system___basic_print_char
0fb2c     00 92 06 F6 | 	mov	arg01, #0
0fb30     08 A4 B1 FD | 	call	#__system___getiolock_0622
0fb34     3D 01 68 FC | 	wrlong	#0, result1
0fb38     08 92 06 F6 | 	mov	arg01, #8
0fb3c     54 9A B1 FD | 	call	#__system__close
0fb40     84 00 90 FD | 	jmp	#LR__1329
0fb44                 | LR__1327
0fb44                 | ' 
0fb44                 | ' do
0fb44                 | LR__1328
0fb44                 | '   get #9,,block(0),1024,r
0fb44     32 97 02 F6 | 	mov	arg03, objptr
0fb48     4F 00 00 FF 
0fb4c     D4 96 06 F1 | 	add	arg03, ##40660
0fb50     09 92 06 F6 | 	mov	arg01, #9
0fb54     00 94 06 F6 | 	mov	arg02, #0
0fb58     0A 98 C6 F9 | 	decod	arg04, #10
0fb5c     01 9A 06 F6 | 	mov	arg05, #1
0fb60     D0 5C B1 FD | 	call	#__system___basic_get
0fb64     53 00 00 FF 
0fb68     68 65 06 F1 | 	add	objptr, ##42856
0fb6c     32 7B 62 FC | 	wrlong	result1, objptr
0fb70                 | '   put #8,,block(0),r
0fb70     04 00 00 FF 
0fb74     94 64 86 F1 | 	sub	objptr, ##2196
0fb78     32 97 02 F6 | 	mov	arg03, objptr
0fb7c     3D 99 02 F6 | 	mov	arg04, result1
0fb80     4F 00 00 FF 
0fb84     D4 64 86 F1 | 	sub	objptr, ##40660
0fb88     08 92 06 F6 | 	mov	arg01, #8
0fb8c     00 94 06 F6 | 	mov	arg02, #0
0fb90     01 9A 06 F6 | 	mov	arg05, #1
0fb94     24 5C B1 FD | 	call	#__system___basic_put
0fb98     53 00 00 FF 
0fb9c     68 65 06 F1 | 	add	objptr, ##42856
0fba0     32 B5 02 FB | 	rdlong	local08, objptr
0fba4     53 00 00 FF 
0fba8     68 65 86 F1 | 	sub	objptr, ##42856
0fbac     02 00 00 FF 
0fbb0     00 B4 0E F2 | 	cmp	local08, ##1024 wz
0fbb4     8C FF 9F AD |  if_e	jmp	#LR__1328
0fbb8                 | ' close #8
0fbb8     08 92 06 F6 | 	mov	arg01, #8
0fbbc     D4 99 B1 FD | 	call	#__system__close
0fbc0                 | ' close #9
0fbc0     09 92 06 F6 | 	mov	arg01, #9
0fbc4     CC 99 B1 FD | 	call	#__system__close
0fbc8                 | LR__1329
0fbc8     E7 F0 03 F6 | 	mov	ptra, fp
0fbcc     F2 00 A0 FD | 	call	#popregs_
0fbd0                 | _do_copy_ret
0fbd0     2D 00 64 FD | 	ret
0fbd4                 | 
0fbd4                 | ' 
0fbd4                 | ' '-------------------- cos
0fbd4                 | ' 
0fbd4                 | ' sub do_cos
0fbd4                 | _do_cos
0fbd4     01 CA 05 F6 | 	mov	COUNT_, #1
0fbd8     E8 00 A0 FD | 	call	#pushregs_
0fbdc     10 F0 07 F1 | 	add	ptra, #16
0fbe0     4B 00 00 FF 
0fbe4     A0 64 06 F1 | 	add	objptr, ##38560
0fbe8     32 97 02 FB | 	rdlong	arg03, objptr
0fbec     4B 95 02 F6 | 	mov	arg02, arg03
0fbf0     01 94 66 F0 | 	shl	arg02, #1
0fbf4     4B 95 02 F1 | 	add	arg02, arg03
0fbf8     02 94 66 F0 | 	shl	arg02, #2
0fbfc     03 00 00 FF 
0fc00     04 64 86 F1 | 	sub	objptr, ##1540
0fc04     32 95 02 F1 | 	add	arg02, objptr
0fc08     4A 97 02 FB | 	rdlong	arg03, arg02
0fc0c                 | ' 
0fc0c                 | ' numpar=compiledline(lineptr_e).result.uresult
0fc0c                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0fc0c     02 96 16 F2 | 	cmp	arg03, #2 wc
0fc10     48 00 00 FF 
0fc14     9C 64 86 F1 | 	sub	objptr, ##37020
0fc18     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0fc1c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1330
0fc20     00 92 06 F6 | 	mov	arg01, #0
0fc24     14 A3 B1 FD | 	call	#__system___getiolock_0622
0fc28     3D 93 02 F6 | 	mov	arg01, result1
0fc2c     88 4D B1 FD | 	call	#__system___lockmem
0fc30     96 01 00 FF 
0fc34     CF 95 06 F6 | 	mov	arg02, ##@LR__5982
0fc38     00 92 06 F6 | 	mov	arg01, #0
0fc3c     00 96 06 F6 | 	mov	arg03, #0
0fc40     68 5A B1 FD | 	call	#__system___basic_print_string
0fc44     00 92 06 F6 | 	mov	arg01, #0
0fc48     F0 A2 B1 FD | 	call	#__system___getiolock_0622
0fc4c     3D 01 68 FC | 	wrlong	#0, result1
0fc50     27 92 06 F6 | 	mov	arg01, #39
0fc54     00 94 06 F6 | 	mov	arg02, #0
0fc58     E0 13 B1 FD | 	call	#_printerror
0fc5c     78 00 90 FD | 	jmp	#LR__1331
0fc60                 | LR__1330
0fc60     24 DA BF FD | 	call	#_pop
0fc64     E7 7A 62 FC | 	wrlong	result1, fp
0fc68     04 CE 05 F1 | 	add	fp, #4
0fc6c     E7 7C 62 FC | 	wrlong	result2, fp
0fc70     04 CE 05 F1 | 	add	fp, #4
0fc74     E7 7E 62 FC | 	wrlong	result3, fp
0fc78     08 CE 85 F1 | 	sub	fp, #8
0fc7c     53 00 00 FF 
0fc80     00 65 06 F1 | 	add	objptr, ##42752
0fc84     32 A7 02 FB | 	rdlong	local01, objptr
0fc88     53 00 00 FF 
0fc8c     00 65 86 F1 | 	sub	objptr, ##42752
0fc90     E7 92 02 F6 | 	mov	arg01, fp
0fc94     88 DC BF FD | 	call	#_converttofloat
0fc98     3D 95 02 F6 | 	mov	arg02, result1
0fc9c     53 93 02 F6 | 	mov	arg01, local01
0fca0     E4 73 B1 FD | 	call	#__system___float_mul
0fca4     3D 95 02 F6 | 	mov	arg02, result1
0fca8     87 E4 1F FF 
0fcac     DB 93 06 F6 | 	mov	arg01, ##1070141403
0fcb0     1F 94 E6 F4 | 	bitnot	arg02, #31
0fcb4     00 70 B1 FD | 	call	#__system___float_add
0fcb8     3D 93 02 F6 | 	mov	arg01, result1
0fcbc     38 7D B1 FD | 	call	#__system____builtin_sinf
0fcc0     E7 7A 62 FC | 	wrlong	result1, fp
0fcc4     08 CE 05 F1 | 	add	fp, #8
0fcc8     E7 3C 68 FC | 	wrlong	#30, fp
0fccc     08 CE 85 F1 | 	sub	fp, #8
0fcd0     E7 92 02 F6 | 	mov	arg01, fp
0fcd4     40 DA BF FD | 	call	#_push
0fcd8                 | LR__1331
0fcd8     E7 F0 03 F6 | 	mov	ptra, fp
0fcdc     F2 00 A0 FD | 	call	#popregs_
0fce0                 | _do_cos_ret
0fce0     2D 00 64 FD | 	ret
0fce4                 | 
0fce4                 | ' 
0fce4                 | ' '-------------------- cursor
0fce4                 | ' 
0fce4                 | ' sub do_cursor
0fce4                 | _do_cursor
0fce4     A0 D9 BF FD | 	call	#_pop
0fce8     00 7A 4E F2 | 	cmps	result1, #0 wz
0fcec                 | ' t1=pop()
0fcec                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0fcec     14 00 90 5D |  if_ne	jmp	#LR__1340
0fcf0     11 92 06 F6 | 	mov	arg01, #17
0fcf4     00 94 06 F6 | 	mov	arg02, #0
0fcf8     00 96 06 F6 | 	mov	arg03, #0
0fcfc     50 23 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fd00     10 00 90 FD | 	jmp	#LR__1341
0fd04                 | LR__1340
0fd04     11 92 06 F6 | 	mov	arg01, #17
0fd08     08 94 06 F6 | 	mov	arg02, #8
0fd0c     10 96 06 F6 | 	mov	arg03, #16
0fd10     3C 23 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fd14                 | LR__1341
0fd14                 | _do_cursor_ret
0fd14     2D 00 64 FD | 	ret
0fd18                 | 
0fd18                 | ' 
0fd18                 | ' '-------------------- defchar
0fd18                 | ' 
0fd18                 | ' sub do_defchar
0fd18                 | _do_defchar
0fd18     04 CA 05 F6 | 	mov	COUNT_, #4
0fd1c     E8 00 A0 FD | 	call	#pushregs_
0fd20     28 F0 07 F1 | 	add	ptra, #40
0fd24     60 D9 BF FD | 	call	#_pop
0fd28     3F 95 02 F6 | 	mov	arg02, result3
0fd2c     E7 7A 62 FC | 	wrlong	result1, fp
0fd30     04 CE 05 F1 | 	add	fp, #4
0fd34     E7 7C 62 FC | 	wrlong	result2, fp
0fd38     04 CE 05 F1 | 	add	fp, #4
0fd3c     E7 94 62 FC | 	wrlong	arg02, fp
0fd40     08 CE 85 F1 | 	sub	fp, #8
0fd44     E7 92 02 F6 | 	mov	arg01, fp
0fd48     18 DB BF FD | 	call	#_converttoint
0fd4c     3D A7 02 F6 | 	mov	local01, result1
0fd50     34 D9 BF FD | 	call	#_pop
0fd54     3F 95 02 F6 | 	mov	arg02, result3
0fd58     E7 7A 62 FC | 	wrlong	result1, fp
0fd5c     04 CE 05 F1 | 	add	fp, #4
0fd60     E7 7C 62 FC | 	wrlong	result2, fp
0fd64     04 CE 05 F1 | 	add	fp, #4
0fd68     E7 94 62 FC | 	wrlong	arg02, fp
0fd6c     08 CE 85 F1 | 	sub	fp, #8
0fd70     E7 92 02 F6 | 	mov	arg01, fp
0fd74     EC DA BF FD | 	call	#_converttoint
0fd78     3D A9 02 F6 | 	mov	local02, result1
0fd7c                 | ' 
0fd7c                 | ' t1=pop() : cptr=converttoint(t1)
0fd7c                 | ' t1=pop() : c=converttoint(t1)
0fd7c                 | ' if cptr<$80000 then 
0fd7c     00 04 00 FF 
0fd80     00 A6 16 F2 | 	cmp	local01, ##524288 wc
0fd84     10 00 90 3D |  if_ae	jmp	#LR__1350
0fd88     54 93 02 F6 | 	mov	arg01, local02
0fd8c     53 95 02 F6 | 	mov	arg02, local01
0fd90     C4 2E B1 FD | 	call	#_hg010b_spin2_defchar
0fd94     40 00 90 FD | 	jmp	#LR__1352
0fd98                 | LR__1350
0fd98                 | '   for i=0 to 15: buf(i)=pspeek(cptr+i): next i
0fd98     00 AA 06 F6 | 	mov	local03, #0
0fd9c                 | LR__1351
0fd9c     55 AD 02 F6 | 	mov	local04, local03
0fda0     E7 94 02 F6 | 	mov	arg02, fp
0fda4     14 94 06 F1 | 	add	arg02, #20
0fda8     4A AD 02 F1 | 	add	local04, arg02
0fdac     53 93 02 F6 | 	mov	arg01, local01
0fdb0     55 93 02 F1 | 	add	arg01, local03
0fdb4     F8 14 B1 FD | 	call	#_pspeek
0fdb8     56 7B 42 FC | 	wrbyte	result1, local04
0fdbc     01 AA 06 F1 | 	add	local03, #1
0fdc0     10 AA 56 F2 | 	cmps	local03, #16 wc
0fdc4     D4 FF 9F CD |  if_b	jmp	#LR__1351
0fdc8     E7 94 02 F6 | 	mov	arg02, fp
0fdcc     14 94 06 F1 | 	add	arg02, #20
0fdd0     54 93 02 F6 | 	mov	arg01, local02
0fdd4     80 2E B1 FD | 	call	#_hg010b_spin2_defchar
0fdd8                 | LR__1352
0fdd8     E7 F0 03 F6 | 	mov	ptra, fp
0fddc     F2 00 A0 FD | 	call	#popregs_
0fde0                 | _do_defchar_ret
0fde0     2D 00 64 FD | 	ret
0fde4                 | 
0fde4                 | ' 
0fde4                 | ' '-------------------- defenv
0fde4                 | ' 
0fde4                 | ' sub do_defenv
0fde4                 | _do_defenv
0fde4     14 CA 05 F6 | 	mov	COUNT_, #20
0fde8     E8 00 A0 FD | 	call	#pushregs_
0fdec     58 F0 07 F1 | 	add	ptra, #88
0fdf0     4B 00 00 FF 
0fdf4     A0 64 06 F1 | 	add	objptr, ##38560
0fdf8     32 9B 02 FB | 	rdlong	arg05, objptr
0fdfc     4D 99 02 F6 | 	mov	arg04, arg05
0fe00     01 98 66 F0 | 	shl	arg04, #1
0fe04     4D 99 02 F1 | 	add	arg04, arg05
0fe08     02 98 66 F0 | 	shl	arg04, #2
0fe0c     03 00 00 FF 
0fe10     04 64 86 F1 | 	sub	objptr, ##1540
0fe14     32 99 02 F1 | 	add	arg04, objptr
0fe18     4C A7 02 FB | 	rdlong	local01, arg04
0fe1c                 | ' 
0fe1c                 | ' numpar=compiledline(lineptr_e).result.uresult
0fe1c                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0fe1c     02 A6 0E F2 | 	cmp	local01, #2 wz
0fe20     48 00 00 FF 
0fe24     9C 64 86 F1 | 	sub	objptr, ##37020
0fe28     05 A6 0E 52 |  if_ne	cmp	local01, #5 wz
0fe2c     50 07 90 5D |  if_ne	jmp	#LR__1380
0fe30                 | ' 
0fe30                 | ' if numpar=2 then						' env from .h2 or from a pointer
0fe30     02 A6 0E F2 | 	cmp	local01, #2 wz
0fe34     1C 03 90 5D |  if_ne	jmp	#LR__1372
0fe38     4C D8 BF FD | 	call	#_pop
0fe3c     3F 9B 02 F6 | 	mov	arg05, result3
0fe40     40 CE 05 F1 | 	add	fp, #64
0fe44     E7 7A 62 FC | 	wrlong	result1, fp
0fe48     04 CE 05 F1 | 	add	fp, #4
0fe4c     E7 7C 62 FC | 	wrlong	result2, fp
0fe50     04 CE 05 F1 | 	add	fp, #4
0fe54     E7 9A 62 FC | 	wrlong	arg05, fp
0fe58                 | '   t1=pop()
0fe58                 | '   if t1.result_type=result_string2 then 
0fe58     48 CE 85 F1 | 	sub	fp, #72
0fe5c     2B 9A 0E F2 | 	cmp	arg05, #43 wz
0fe60     18 00 90 5D |  if_ne	jmp	#LR__1360
0fe64     40 CE 05 F1 | 	add	fp, #64
0fe68     E7 92 02 FB | 	rdlong	arg01, fp
0fe6c     40 CE 85 F1 | 	sub	fp, #64
0fe70     84 D9 BF FD | 	call	#_convertstring
0fe74     3D A9 02 F6 | 	mov	local02, result1
0fe78     38 00 90 FD | 	jmp	#LR__1362
0fe7c                 | LR__1360
0fe7c     48 CE 05 F1 | 	add	fp, #72
0fe80     E7 9A 02 FB | 	rdlong	arg05, fp
0fe84     48 CE 85 F1 | 	sub	fp, #72
0fe88     1F 9A 0E F2 | 	cmp	arg05, #31 wz
0fe8c     40 CE 05 A1 |  if_e	add	fp, #64
0fe90     E7 A8 02 AB |  if_e	rdlong	local02, fp
0fe94     40 CE 85 A1 |  if_e	sub	fp, #64
0fe98     18 00 90 AD |  if_e	jmp	#LR__1361
0fe9c     96 01 00 FF 
0fea0     D5 A9 06 F6 | 	mov	local02, ##@LR__5983
0fea4     E7 92 02 F6 | 	mov	arg01, fp
0fea8     40 92 06 F1 | 	add	arg01, #64
0feac     B4 D9 BF FD | 	call	#_converttoint
0feb0     3D AB 02 F6 | 	mov	local03, result1
0feb4                 | LR__1361
0feb4                 | LR__1362
0feb4                 | '   if s1<>"" then 
0feb4     96 01 00 FF 
0feb8     D6 95 06 F6 | 	mov	arg02, ##@LR__5984
0febc     54 93 02 F6 | 	mov	arg01, local02
0fec0     1C 4B B1 FD | 	call	#__system___string_cmp
0fec4     00 7A 0E F2 | 	cmp	result1, #0 wz
0fec8     BC 01 90 AD |  if_e	jmp	#LR__1366
0fecc     B8 D7 BF FD | 	call	#_pop
0fed0     3F 9B 02 F6 | 	mov	arg05, result3
0fed4     40 CE 05 F1 | 	add	fp, #64
0fed8     E7 7A 62 FC | 	wrlong	result1, fp
0fedc     04 CE 05 F1 | 	add	fp, #4
0fee0     E7 7C 62 FC | 	wrlong	result2, fp
0fee4     04 CE 05 F1 | 	add	fp, #4
0fee8     E7 9A 62 FC | 	wrlong	arg05, fp
0feec     08 CE 85 F1 | 	sub	fp, #8
0fef0     E7 92 02 F6 | 	mov	arg01, fp
0fef4     40 CE 85 F1 | 	sub	fp, #64
0fef8     68 D9 BF FD | 	call	#_converttoint
0fefc     3D AD 02 F6 | 	mov	local04, result1
0ff00                 | '     t1=pop()
0ff00                 | '     channel=converttoint(t1) 
0ff00                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0ff00     09 92 06 F6 | 	mov	arg01, #9
0ff04     8C 96 B1 FD | 	call	#__system__close
0ff08     09 AE 06 F6 | 	mov	local05, #9
0ff0c     96 01 00 FF 
0ff10     D7 93 06 F6 | 	mov	arg01, ##@LR__5985
0ff14     54 95 02 F6 | 	mov	arg02, local02
0ff18     F8 4A B1 FD | 	call	#__system___string_concat
0ff1c     3D 95 02 F6 | 	mov	arg02, result1
0ff20     57 93 02 F6 | 	mov	arg01, local05
0ff24     00 96 06 F6 | 	mov	arg03, #0
0ff28     3C 56 B1 FD | 	call	#__system___basic_open_string
0ff2c     20 68 06 F1 | 	add	ptr___system__dat__, #32
0ff30     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0ff34     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0ff38     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0ff3c     3D B1 0A F6 | 	mov	local06, result1 wz
0ff40                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0ff40     8C 00 90 AD |  if_e	jmp	#LR__1363
0ff44     00 92 06 F6 | 	mov	arg01, #0
0ff48     F0 9F B1 FD | 	call	#__system___getiolock_0622
0ff4c     3D 93 02 F6 | 	mov	arg01, result1
0ff50     64 4A B1 FD | 	call	#__system___lockmem
0ff54     96 01 00 FF 
0ff58     E4 95 06 F6 | 	mov	arg02, ##@LR__5986
0ff5c     00 92 06 F6 | 	mov	arg01, #0
0ff60     00 96 06 F6 | 	mov	arg03, #0
0ff64     44 57 B1 FD | 	call	#__system___basic_print_string
0ff68     00 92 06 F6 | 	mov	arg01, #0
0ff6c     58 95 02 F6 | 	mov	arg02, local06
0ff70     00 96 06 F6 | 	mov	arg03, #0
0ff74     0A 98 06 F6 | 	mov	arg04, #10
0ff78     74 57 B1 FD | 	call	#__system___basic_print_integer
0ff7c     96 01 00 FF 
0ff80     F2 95 06 F6 | 	mov	arg02, ##@LR__5987
0ff84     00 92 06 F6 | 	mov	arg01, #0
0ff88     00 96 06 F6 | 	mov	arg03, #0
0ff8c     1C 57 B1 FD | 	call	#__system___basic_print_string
0ff90     58 93 02 F6 | 	mov	arg01, local06
0ff94     D0 6B B1 FD | 	call	#__system___strerror
0ff98     3D 95 02 F6 | 	mov	arg02, result1
0ff9c     00 92 06 F6 | 	mov	arg01, #0
0ffa0     00 96 06 F6 | 	mov	arg03, #0
0ffa4     04 57 B1 FD | 	call	#__system___basic_print_string
0ffa8     00 92 06 F6 | 	mov	arg01, #0
0ffac     0A 94 06 F6 | 	mov	arg02, #10
0ffb0     00 96 06 F6 | 	mov	arg03, #0
0ffb4     9C 56 B1 FD | 	call	#__system___basic_print_char
0ffb8     00 92 06 F6 | 	mov	arg01, #0
0ffbc     7C 9F B1 FD | 	call	#__system___getiolock_0622
0ffc0     3D 01 68 FC | 	wrlong	#0, result1
0ffc4     09 92 06 F6 | 	mov	arg01, #9
0ffc8     C8 95 B1 FD | 	call	#__system__close
0ffcc     B0 05 90 FD | 	jmp	#LR__1380
0ffd0                 | LR__1363
0ffd0                 | '     get #9,17,envbuf8(channel,0),256
0ffd0     56 97 02 F6 | 	mov	arg03, local04
0ffd4     09 96 66 F0 | 	shl	arg03, #9
0ffd8     56 97 02 F1 | 	add	arg03, local04
0ffdc     32 9B 02 F6 | 	mov	arg05, objptr
0ffe0     0D 00 00 FF 
0ffe4     D8 9A 06 F1 | 	add	arg05, ##6872
0ffe8     4D 97 02 F1 | 	add	arg03, arg05
0ffec     09 92 06 F6 | 	mov	arg01, #9
0fff0     11 94 06 F6 | 	mov	arg02, #17
0fff4     00 99 06 F6 | 	mov	arg04, #256
0fff8     01 9A 06 F6 | 	mov	arg05, #1
0fffc     34 58 B1 FD | 	call	#__system___basic_get
10000                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
10000     FF B2 06 F6 | 	mov	local07, #255
10004     0D 00 00 FF 
10008     D8 64 06 F1 | 	add	objptr, ##6872
1000c     D7 24 48 FB | 	callpa	#(@LR__1365-@LR__1364)>>2,fcache_load_ptr_
10010                 | LR__1364
10010     56 B1 02 F6 | 	mov	local06, local04
10014     09 B0 66 F0 | 	shl	local06, #9
10018     32 B1 02 F1 | 	add	local06, objptr
1001c     59 AF 02 F6 | 	mov	local05, local07
10020     01 AE 66 F0 | 	shl	local05, #1
10024     58 AF 02 F1 | 	add	local05, local06
10028     56 AB 02 F6 | 	mov	local03, local04
1002c     09 AA 66 F0 | 	shl	local03, #9
10030     56 AB 02 F1 | 	add	local03, local04
10034     32 AB 02 F1 | 	add	local03, objptr
10038     59 B1 02 F6 | 	mov	local06, local07
1003c     55 B1 02 F1 | 	add	local06, local03
10040     58 B1 C2 FA | 	rdbyte	local06, local06
10044     08 B0 66 F0 | 	shl	local06, #8
10048     57 B1 52 FC | 	wrword	local06, local05
1004c     01 B2 86 F1 | 	sub	local07, #1
10050     00 B2 56 F2 | 	cmps	local07, #0 wc
10054     B8 FF 9F 3D |  if_ae	jmp	#LR__1364
10058                 | LR__1365
10058     0D 00 00 FF 
1005c     D8 64 86 F1 | 	sub	objptr, ##6872
10060                 | '     close #9
10060     09 92 06 F6 | 	mov	arg01, #9
10064     2C 95 B1 FD | 	call	#__system__close
10068     09 AC 66 F0 | 	shl	local04, #9
1006c     32 B3 02 F6 | 	mov	local07, objptr
10070     0D 00 00 FF 
10074     D8 B2 06 F1 | 	add	local07, ##6872
10078     59 AD 02 F1 | 	add	local04, local07
1007c     FE AD 06 F1 | 	add	local04, #510
10080     56 01 58 FC | 	wrword	#0, local04
10084                 | '     envbuf(channel,255)=0                                                              
10084                 | '     return
10084     F8 04 90 FD | 	jmp	#LR__1380
10088                 | LR__1366
10088                 | '     if wptr < $80000 then 
10088     00 04 00 FF 
1008c     00 AA 56 F2 | 	cmps	local03, ##524288 wc
10090     54 00 90 3D |  if_ae	jmp	#LR__1369
10094                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
10094     00 B2 06 F6 | 	mov	local07, #0
10098     D7 24 48 FB | 	callpa	#(@LR__1368-@LR__1367)>>2,fcache_load_ptr_
1009c                 | LR__1367
1009c     56 B1 02 F6 | 	mov	local06, local04
100a0     09 B0 66 F0 | 	shl	local06, #9
100a4     32 AF 02 F6 | 	mov	local05, objptr
100a8     0D 00 00 FF 
100ac     D8 AE 06 F1 | 	add	local05, ##6872
100b0     57 B1 02 F1 | 	add	local06, local05
100b4     59 AF 02 F6 | 	mov	local05, local07
100b8     01 AE 66 F0 | 	shl	local05, #1
100bc     58 AF 02 F1 | 	add	local05, local06
100c0     55 93 02 F6 | 	mov	arg01, local03
100c4     59 B1 02 F6 | 	mov	local06, local07
100c8     01 B0 66 F0 | 	shl	local06, #1
100cc     58 93 02 F1 | 	add	arg01, local06
100d0     49 7B E2 FA | 	rdword	result1, arg01
100d4     57 7B 52 FC | 	wrword	result1, local05
100d8     01 B2 06 F1 | 	add	local07, #1
100dc     00 B3 56 F2 | 	cmps	local07, #256 wc
100e0     B8 FF 9F CD |  if_b	jmp	#LR__1367
100e4                 | LR__1368
100e4     4C 00 90 FD | 	jmp	#LR__1371
100e8                 | LR__1369
100e8                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
100e8     00 B2 06 F6 | 	mov	local07, #0
100ec                 | LR__1370
100ec     56 B1 02 F6 | 	mov	local06, local04
100f0     09 B0 66 F0 | 	shl	local06, #9
100f4     32 AF 02 F6 | 	mov	local05, objptr
100f8     0D 00 00 FF 
100fc     D8 AE 06 F1 | 	add	local05, ##6872
10100     57 B1 02 F1 | 	add	local06, local05
10104     59 AF 02 F6 | 	mov	local05, local07
10108     01 AE 66 F0 | 	shl	local05, #1
1010c     58 AF 02 F1 | 	add	local05, local06
10110     55 93 02 F6 | 	mov	arg01, local03
10114     59 B1 02 F6 | 	mov	local06, local07
10118     01 B0 66 F0 | 	shl	local06, #1
1011c     58 93 02 F1 | 	add	arg01, local06
10120     1C 12 B1 FD | 	call	#_psdpeek
10124     57 7B 52 FC | 	wrword	result1, local05
10128     01 B2 06 F1 | 	add	local07, #1
1012c     00 B3 56 F2 | 	cmps	local07, #256 wc
10130     B8 FF 9F CD |  if_b	jmp	#LR__1370
10134                 | LR__1371
10134     09 AC 66 F0 | 	shl	local04, #9
10138     32 B3 02 F6 | 	mov	local07, objptr
1013c     0D 00 00 FF 
10140     D8 B2 06 F1 | 	add	local07, ##6872
10144     59 AD 02 F1 | 	add	local04, local07
10148     FE AD 06 F1 | 	add	local04, #510
1014c     56 01 58 FC | 	wrword	#0, local04
10150                 | '     envbuf(channel,255)=0
10150                 | '     return   
10150     2C 04 90 FD | 	jmp	#LR__1380
10154                 | LR__1372
10154                 | ' 
10154                 | ' if numpar=5 then   						 'simple adsr
10154     05 A6 0E F2 | 	cmp	local01, #5 wz
10158     08 04 90 5D |  if_ne	jmp	#LR__1379
1015c     28 D5 BF FD | 	call	#_pop
10160     3F B3 02 F6 | 	mov	local07, result3
10164     40 CE 05 F1 | 	add	fp, #64
10168     E7 7A 62 FC | 	wrlong	result1, fp
1016c     04 CE 05 F1 | 	add	fp, #4
10170     E7 7C 62 FC | 	wrlong	result2, fp
10174     04 CE 05 F1 | 	add	fp, #4
10178     E7 B2 62 FC | 	wrlong	local07, fp
1017c     08 CE 85 F1 | 	sub	fp, #8
10180     E7 92 02 F6 | 	mov	arg01, fp
10184     40 CE 85 F1 | 	sub	fp, #64
10188     94 D7 BF FD | 	call	#_converttofloat
1018c     3D B3 02 F6 | 	mov	local07, result1
10190     F4 D4 BF FD | 	call	#_pop
10194     3F B1 02 F6 | 	mov	local06, result3
10198     40 CE 05 F1 | 	add	fp, #64
1019c     E7 7A 62 FC | 	wrlong	result1, fp
101a0     04 CE 05 F1 | 	add	fp, #4
101a4     E7 7C 62 FC | 	wrlong	result2, fp
101a8     04 CE 05 F1 | 	add	fp, #4
101ac     E7 B0 62 FC | 	wrlong	local06, fp
101b0     08 CE 85 F1 | 	sub	fp, #8
101b4     E7 92 02 F6 | 	mov	arg01, fp
101b8     40 CE 85 F1 | 	sub	fp, #64
101bc     60 D7 BF FD | 	call	#_converttofloat
101c0     3D B5 02 F6 | 	mov	local08, result1
101c4     C0 D4 BF FD | 	call	#_pop
101c8     3F B1 02 F6 | 	mov	local06, result3
101cc     40 CE 05 F1 | 	add	fp, #64
101d0     E7 7A 62 FC | 	wrlong	result1, fp
101d4     04 CE 05 F1 | 	add	fp, #4
101d8     E7 7C 62 FC | 	wrlong	result2, fp
101dc     04 CE 05 F1 | 	add	fp, #4
101e0     E7 B0 62 FC | 	wrlong	local06, fp
101e4     08 CE 85 F1 | 	sub	fp, #8
101e8     E7 92 02 F6 | 	mov	arg01, fp
101ec     40 CE 85 F1 | 	sub	fp, #64
101f0     2C D7 BF FD | 	call	#_converttofloat
101f4     3D B1 02 F6 | 	mov	local06, result1
101f8     8C D4 BF FD | 	call	#_pop
101fc     3F AF 02 F6 | 	mov	local05, result3
10200     40 CE 05 F1 | 	add	fp, #64
10204     E7 7A 62 FC | 	wrlong	result1, fp
10208     04 CE 05 F1 | 	add	fp, #4
1020c     E7 7C 62 FC | 	wrlong	result2, fp
10210     04 CE 05 F1 | 	add	fp, #4
10214     E7 AE 62 FC | 	wrlong	local05, fp
10218     08 CE 85 F1 | 	sub	fp, #8
1021c     E7 92 02 F6 | 	mov	arg01, fp
10220     40 CE 85 F1 | 	sub	fp, #64
10224     F8 D6 BF FD | 	call	#_converttofloat
10228     3D AF 02 F6 | 	mov	local05, result1
1022c     58 D4 BF FD | 	call	#_pop
10230     3F AD 02 F6 | 	mov	local04, result3
10234     40 CE 05 F1 | 	add	fp, #64
10238     E7 7A 62 FC | 	wrlong	result1, fp
1023c     04 CE 05 F1 | 	add	fp, #4
10240     E7 7C 62 FC | 	wrlong	result2, fp
10244     04 CE 05 F1 | 	add	fp, #4
10248     E7 AC 62 FC | 	wrlong	local04, fp
1024c     08 CE 85 F1 | 	sub	fp, #8
10250     E7 92 02 F6 | 	mov	arg01, fp
10254     40 CE 85 F1 | 	sub	fp, #64
10258     08 D6 BF FD | 	call	#_converttoint
1025c     3D AD 02 F6 | 	mov	local04, result1
10260                 | '   t1=pop() : rr=converttofloat(t1)
10260                 | '   t1=pop() : ss=converttofloat(t1) 
10260                 | '   t1=pop() : dd=converttofloat(t1)
10260                 | '   t1=pop() : aa=converttofloat(t1)
10260                 | '   t1=pop() : channel=converttoint(t1)
10260                 | '   if ss<0.0 then ss=0.0 
10260     5A 93 02 F6 | 	mov	arg01, local08
10264     00 94 06 F6 | 	mov	arg02, #0
10268     01 96 06 F6 | 	mov	arg03, #1
1026c     4C 72 B1 FD | 	call	#__system___float_cmp
10270     00 7A 56 F2 | 	cmps	result1, #0 wc
10274     00 B4 06 C6 |  if_b	mov	local08, #0
10278                 | '   if ss>1.0 then ss=1.0
10278     5A 93 02 F6 | 	mov	arg01, local08
1027c     00 C0 1F FF 
10280     00 94 06 F6 | 	mov	arg02, ##1065353216
10284     01 96 66 F6 | 	neg	arg03, #1
10288     30 72 B1 FD | 	call	#__system___float_cmp
1028c     01 7A 56 F2 | 	cmps	result1, #1 wc
10290     00 C0 1F 3F 
10294     00 B4 06 36 |  if_ae	mov	local08, ##1065353216
10298     57 93 02 F6 | 	mov	arg01, local05
1029c     58 95 02 F6 | 	mov	arg02, local06
102a0     14 6A B1 FD | 	call	#__system___float_add
102a4     3D 93 02 F6 | 	mov	arg01, result1
102a8     59 95 02 F6 | 	mov	arg02, local07
102ac     08 6A B1 FD | 	call	#__system___float_add
102b0     3D 95 02 F6 | 	mov	arg02, result1
102b4     00 C0 21 FF 
102b8     00 92 06 F6 | 	mov	arg01, ##1132462080
102bc     CC 6F B1 FD | 	call	#__system___float_div
102c0     3D B7 02 F6 | 	mov	local09, result1
102c4     57 93 02 F6 | 	mov	arg01, local05
102c8     5B 95 02 F6 | 	mov	arg02, local09
102cc     B8 6D B1 FD | 	call	#__system___float_mul
102d0     3D 93 02 F6 | 	mov	arg01, result1
102d4     01 94 06 F6 | 	mov	arg02, #1
102d8     74 72 B1 FD | 	call	#__system___float_tointeger
102dc     3D B9 02 F6 | 	mov	local10, result1
102e0     58 93 02 F6 | 	mov	arg01, local06
102e4     5B 95 02 F6 | 	mov	arg02, local09
102e8     9C 6D B1 FD | 	call	#__system___float_mul
102ec     3D 93 02 F6 | 	mov	arg01, result1
102f0     01 94 06 F6 | 	mov	arg02, #1
102f4     58 72 B1 FD | 	call	#__system___float_tointeger
102f8     3D BB 02 F6 | 	mov	local11, result1
102fc     59 93 02 F6 | 	mov	arg01, local07
10300     5B 95 02 F6 | 	mov	arg02, local09
10304     80 6D B1 FD | 	call	#__system___float_mul
10308     3D 93 02 F6 | 	mov	arg01, result1
1030c     01 94 06 F6 | 	mov	arg02, #1
10310     3C 72 B1 FD | 	call	#__system___float_tointeger
10314     3D B1 02 F6 | 	mov	local06, result1
10318     F8 BF 23 FF 
1031c     00 AE 06 F6 | 	mov	local05, ##1199566848
10320     5C 93 52 F6 | 	abs	arg01, local10 wc
10324     1F BC C6 C9 |  if_b	decod	local12, #31
10328     00 BC 06 36 |  if_ae	mov	local12, #0
1032c     54 69 B1 FD | 	call	#__system___float_fromuns
10330     5E 7B 62 F5 | 	xor	result1, local12
10334     3D 95 02 F6 | 	mov	arg02, result1
10338     57 93 02 F6 | 	mov	arg01, local05
1033c     4C 6F B1 FD | 	call	#__system___float_div
10340     3D BF 02 F6 | 	mov	local13, result1
10344     F8 BF 23 FF 
10348     00 AE 06 F6 | 	mov	local05, ##1199566848
1034c     F8 BF 23 FF 
10350     00 92 06 F6 | 	mov	arg01, ##1199566848
10354     5A 95 02 F6 | 	mov	arg02, local08
10358     2C 6D B1 FD | 	call	#__system___float_mul
1035c     3D 95 02 F6 | 	mov	arg02, result1
10360     57 93 02 F6 | 	mov	arg01, local05
10364     1F 94 E6 F4 | 	bitnot	arg02, #31
10368     4C 69 B1 FD | 	call	#__system___float_add
1036c     3D AF 02 F6 | 	mov	local05, result1
10370     5D 93 52 F6 | 	abs	arg01, local11 wc
10374     1F BC C6 C9 |  if_b	decod	local12, #31
10378     00 BC 06 36 |  if_ae	mov	local12, #0
1037c     04 69 B1 FD | 	call	#__system___float_fromuns
10380     5E 7B 62 F5 | 	xor	result1, local12
10384     3D 95 02 F6 | 	mov	arg02, result1
10388     57 93 02 F6 | 	mov	arg01, local05
1038c     FC 6E B1 FD | 	call	#__system___float_div
10390     3D C1 02 F6 | 	mov	local14, result1
10394     F8 BF 23 FF 
10398     00 92 06 F6 | 	mov	arg01, ##1199566848
1039c     5A 95 02 F6 | 	mov	arg02, local08
103a0     E4 6C B1 FD | 	call	#__system___float_mul
103a4     3D AF 02 F6 | 	mov	local05, result1
103a8     58 93 52 F6 | 	abs	arg01, local06 wc
103ac     1F BC C6 C9 |  if_b	decod	local12, #31
103b0     00 BC 06 36 |  if_ae	mov	local12, #0
103b4     CC 68 B1 FD | 	call	#__system___float_fromuns
103b8     5E 7B 62 F5 | 	xor	result1, local12
103bc     3D 95 02 F6 | 	mov	arg02, result1
103c0     57 93 02 F6 | 	mov	arg01, local05
103c4     C4 6E B1 FD | 	call	#__system___float_div
103c8     3D C3 02 F6 | 	mov	local15, result1
103cc     56 B3 02 F6 | 	mov	local07, local04
103d0     01 B2 66 F0 | 	shl	local07, #1
103d4     32 C5 02 F6 | 	mov	local16, objptr
103d8     53 00 00 FF 
103dc     0C C5 06 F1 | 	add	local16, ##42764
103e0     62 B3 02 F1 | 	add	local07, local16
103e4     5C C7 02 F6 | 	mov	local17, local10
103e8     5D C7 02 F1 | 	add	local17, local11
103ec     59 C7 52 FC | 	wrword	local17, local07
103f0     00 C8 06 F6 | 	mov	local18, #0
103f4                 | '   fulltime=aa+dd+rr
103f4                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
103f4                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
103f4                 | '   suspoints(channel)=a+d
103f4                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
103f4     00 B2 06 F6 | 	mov	local07, #0
103f8     5C CB 02 F6 | 	mov	local19, local10
103fc                 | LR__1373
103fc     65 B3 52 F2 | 	cmps	local07, local19 wc
10400     4C 00 90 3D |  if_ae	jmp	#LR__1374
10404     56 C7 02 F6 | 	mov	local17, local04
10408     09 C6 66 F0 | 	shl	local17, #9
1040c     32 C5 02 F6 | 	mov	local16, objptr
10410     0D 00 00 FF 
10414     D8 C4 06 F1 | 	add	local16, ##6872
10418     62 C7 02 F1 | 	add	local17, local16
1041c     59 C5 02 F6 | 	mov	local16, local07
10420     01 C4 66 F0 | 	shl	local16, #1
10424     63 C5 02 F1 | 	add	local16, local17
10428     64 93 02 F6 | 	mov	arg01, local18
1042c     01 94 06 F6 | 	mov	arg02, #1
10430     1C 71 B1 FD | 	call	#__system___float_tointeger
10434     62 7B 52 FC | 	wrword	result1, local16
10438     5F 95 02 F6 | 	mov	arg02, local13
1043c     64 93 02 F6 | 	mov	arg01, local18
10440     74 68 B1 FD | 	call	#__system___float_add
10444     3D C9 02 F6 | 	mov	local18, result1
10448     01 B2 06 F1 | 	add	local07, #1
1044c     AC FF 9F FD | 	jmp	#LR__1373
10450                 | LR__1374
10450                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
10450     5C B3 02 F6 | 	mov	local07, local10
10454     5C CD 02 F6 | 	mov	local20, local10
10458     5D CD 02 F1 | 	add	local20, local11
1045c                 | LR__1375
1045c     66 B3 52 F2 | 	cmps	local07, local20 wc
10460     68 00 90 3D |  if_ae	jmp	#LR__1376
10464     56 CB 02 F6 | 	mov	local19, local04
10468     09 CA 66 F0 | 	shl	local19, #9
1046c     32 C5 02 F6 | 	mov	local16, objptr
10470     0D 00 00 FF 
10474     D8 C4 06 F1 | 	add	local16, ##6872
10478     62 CB 02 F1 | 	add	local19, local16
1047c     59 C7 02 F6 | 	mov	local17, local07
10480     01 C6 66 F0 | 	shl	local17, #1
10484     65 C7 02 F1 | 	add	local17, local19
10488     64 93 02 F6 | 	mov	arg01, local18
1048c     01 94 06 F6 | 	mov	arg02, #1
10490     BC 70 B1 FD | 	call	#__system___float_tointeger
10494     63 7B 52 FC | 	wrword	result1, local17
10498     64 93 02 F6 | 	mov	arg01, local18
1049c     60 95 02 F6 | 	mov	arg02, local14
104a0     1F 94 E6 F4 | 	bitnot	arg02, #31
104a4     10 68 B1 FD | 	call	#__system___float_add
104a8     3D C9 02 F6 | 	mov	local18, result1
104ac     64 93 02 F6 | 	mov	arg01, local18
104b0     00 94 06 F6 | 	mov	arg02, #0
104b4     01 96 06 F6 | 	mov	arg03, #1
104b8     00 70 B1 FD | 	call	#__system___float_cmp
104bc     00 7A 56 F2 | 	cmps	result1, #0 wc
104c0     00 C8 06 C6 |  if_b	mov	local18, #0
104c4     01 B2 06 F1 | 	add	local07, #1
104c8     90 FF 9F FD | 	jmp	#LR__1375
104cc                 | LR__1376
104cc                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
104cc     5C B3 02 F6 | 	mov	local07, local10
104d0     5D B3 02 F1 | 	add	local07, local11
104d4                 | LR__1377
104d4     00 B3 56 F2 | 	cmps	local07, #256 wc
104d8     68 00 90 3D |  if_ae	jmp	#LR__1378
104dc     56 CD 02 F6 | 	mov	local20, local04
104e0     09 CC 66 F0 | 	shl	local20, #9
104e4     32 C7 02 F6 | 	mov	local17, objptr
104e8     0D 00 00 FF 
104ec     D8 C6 06 F1 | 	add	local17, ##6872
104f0     63 CD 02 F1 | 	add	local20, local17
104f4     59 CB 02 F6 | 	mov	local19, local07
104f8     01 CA 66 F0 | 	shl	local19, #1
104fc     66 CB 02 F1 | 	add	local19, local20
10500     64 93 02 F6 | 	mov	arg01, local18
10504     01 94 06 F6 | 	mov	arg02, #1
10508     44 70 B1 FD | 	call	#__system___float_tointeger
1050c     65 7B 52 FC | 	wrword	result1, local19
10510     64 93 02 F6 | 	mov	arg01, local18
10514     61 95 02 F6 | 	mov	arg02, local15
10518     1F 94 E6 F4 | 	bitnot	arg02, #31
1051c     98 67 B1 FD | 	call	#__system___float_add
10520     3D C9 02 F6 | 	mov	local18, result1
10524     64 93 02 F6 | 	mov	arg01, local18
10528     00 94 06 F6 | 	mov	arg02, #0
1052c     01 96 06 F6 | 	mov	arg03, #1
10530     88 6F B1 FD | 	call	#__system___float_cmp
10534     00 7A 56 F2 | 	cmps	result1, #0 wc
10538     00 C8 06 C6 |  if_b	mov	local18, #0
1053c     01 B2 06 F1 | 	add	local07, #1
10540     90 FF 9F FD | 	jmp	#LR__1377
10544                 | LR__1378
10544     56 CD 02 F6 | 	mov	local20, local04
10548     09 CC 66 F0 | 	shl	local20, #9
1054c     32 C5 02 F6 | 	mov	local16, objptr
10550     0D 00 00 FF 
10554     D8 C4 06 F1 | 	add	local16, ##6872
10558     62 CD 02 F1 | 	add	local20, local16
1055c     FE CD 06 F1 | 	add	local20, #510
10560     66 01 58 FC | 	wrword	#0, local20
10564                 | LR__1379
10564     09 AC 66 F0 | 	shl	local04, #9
10568     32 C5 02 F6 | 	mov	local16, objptr
1056c     0D 00 00 FF 
10570     D8 C4 06 F1 | 	add	local16, ##6872
10574     62 AD 02 F1 | 	add	local04, local16
10578     FE AD 06 F1 | 	add	local04, #510
1057c     56 01 58 FC | 	wrword	#0, local04
10580                 | LR__1380
10580     E7 F0 03 F6 | 	mov	ptra, fp
10584     F2 00 A0 FD | 	call	#popregs_
10588                 | _do_defenv_ret
10588     2D 00 64 FD | 	ret
1058c                 | 
1058c                 | ' 
1058c                 | ' '-------------------- defsnd
1058c                 | ' 
1058c                 | ' sub do_defsnd
1058c                 | _do_defsnd
1058c     0D CA 05 F6 | 	mov	COUNT_, #13
10590     E8 00 A0 FD | 	call	#pushregs_
10594     80 F0 07 F1 | 	add	ptra, #128
10598     4B 00 00 FF 
1059c     A0 64 06 F1 | 	add	objptr, ##38560
105a0     32 9B 02 FB | 	rdlong	arg05, objptr
105a4     4D 99 02 F6 | 	mov	arg04, arg05
105a8     01 98 66 F0 | 	shl	arg04, #1
105ac     4D 99 02 F1 | 	add	arg04, arg05
105b0     02 98 66 F0 | 	shl	arg04, #2
105b4     03 00 00 FF 
105b8     04 64 86 F1 | 	sub	objptr, ##1540
105bc     32 99 02 F1 | 	add	arg04, objptr
105c0     4C A7 02 FB | 	rdlong	local01, arg04
105c4                 | ' 
105c4                 | ' numpar=compiledline(lineptr_e).result.uresult
105c4                 | ' 
105c4                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
105c4                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
105c4                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
105c4                 | ' ' defsnd channel, oneint - loads the wave from the pointer
105c4                 | ' 
105c4                 | ' if numpar<2 then return
105c4     02 A6 56 F2 | 	cmps	local01, #2 wc
105c8     48 00 00 FF 
105cc     9C 64 86 F1 | 	sub	objptr, ##37020
105d0     88 06 90 CD |  if_b	jmp	#LR__1411
105d4                 | '  
105d4                 | ' if numpar=2 then
105d4     02 A6 0E F2 | 	cmp	local01, #2 wz
105d8     E4 02 90 5D |  if_ne	jmp	#LR__1399
105dc     A8 D0 BF FD | 	call	#_pop
105e0     3F 9B 02 F6 | 	mov	arg05, result3
105e4     2C CE 05 F1 | 	add	fp, #44
105e8     E7 7A 62 FC | 	wrlong	result1, fp
105ec     04 CE 05 F1 | 	add	fp, #4
105f0     E7 7C 62 FC | 	wrlong	result2, fp
105f4     04 CE 05 F1 | 	add	fp, #4
105f8     E7 9A 62 FC | 	wrlong	arg05, fp
105fc                 | '   t1=pop()
105fc                 | '   if t1.result_type=result_string2 then 
105fc     34 CE 85 F1 | 	sub	fp, #52
10600     2B 9A 0E F2 | 	cmp	arg05, #43 wz
10604     18 00 90 5D |  if_ne	jmp	#LR__1390
10608     2C CE 05 F1 | 	add	fp, #44
1060c     E7 92 02 FB | 	rdlong	arg01, fp
10610     2C CE 85 F1 | 	sub	fp, #44
10614     E0 D1 BF FD | 	call	#_convertstring
10618     3D A9 02 F6 | 	mov	local02, result1
1061c     38 00 90 FD | 	jmp	#LR__1392
10620                 | LR__1390
10620     34 CE 05 F1 | 	add	fp, #52
10624     E7 9A 02 FB | 	rdlong	arg05, fp
10628     34 CE 85 F1 | 	sub	fp, #52
1062c     1F 9A 0E F2 | 	cmp	arg05, #31 wz
10630     2C CE 05 A1 |  if_e	add	fp, #44
10634     E7 A8 02 AB |  if_e	rdlong	local02, fp
10638     2C CE 85 A1 |  if_e	sub	fp, #44
1063c     18 00 90 AD |  if_e	jmp	#LR__1391
10640     96 01 00 FF 
10644     F5 A9 06 F6 | 	mov	local02, ##@LR__5988
10648     E7 92 02 F6 | 	mov	arg01, fp
1064c     2C 92 06 F1 | 	add	arg01, #44
10650     10 D2 BF FD | 	call	#_converttoint
10654     3D AB 02 F6 | 	mov	local03, result1
10658                 | LR__1391
10658                 | LR__1392
10658                 | '   if s<>"" then 
10658     96 01 00 FF 
1065c     F6 95 06 F6 | 	mov	arg02, ##@LR__5989
10660     54 93 02 F6 | 	mov	arg01, local02
10664     78 43 B1 FD | 	call	#__system___string_cmp
10668     00 7A 0E F2 | 	cmp	result1, #0 wz
1066c     B0 01 90 AD |  if_e	jmp	#LR__1395
10670     14 D0 BF FD | 	call	#_pop
10674     3F 9B 02 F6 | 	mov	arg05, result3
10678     2C CE 05 F1 | 	add	fp, #44
1067c     E7 7A 62 FC | 	wrlong	result1, fp
10680     04 CE 05 F1 | 	add	fp, #4
10684     E7 7C 62 FC | 	wrlong	result2, fp
10688     04 CE 05 F1 | 	add	fp, #4
1068c     E7 9A 62 FC | 	wrlong	arg05, fp
10690     08 CE 85 F1 | 	sub	fp, #8
10694     E7 92 02 F6 | 	mov	arg01, fp
10698     2C CE 85 F1 | 	sub	fp, #44
1069c     C4 D1 BF FD | 	call	#_converttoint
106a0     3D AD 02 F6 | 	mov	local04, result1
106a4                 | '     t1=pop()
106a4                 | '     channel=converttoint(t1) : if channel>31 then return
106a4     20 AC 56 F2 | 	cmps	local04, #32 wc
106a8     B0 05 90 3D |  if_ae	jmp	#LR__1411
106ac                 | '     close #9 : open "/sd/media/s/"+s for input as #9
106ac     09 92 06 F6 | 	mov	arg01, #9
106b0     E0 8E B1 FD | 	call	#__system__close
106b4     09 AA 06 F6 | 	mov	local03, #9
106b8     96 01 00 FF 
106bc     F7 93 06 F6 | 	mov	arg01, ##@LR__5990
106c0     54 95 02 F6 | 	mov	arg02, local02
106c4     4C 43 B1 FD | 	call	#__system___string_concat
106c8     3D 95 02 F6 | 	mov	arg02, result1
106cc     55 93 02 F6 | 	mov	arg01, local03
106d0     00 96 06 F6 | 	mov	arg03, #0
106d4     90 4E B1 FD | 	call	#__system___basic_open_string
106d8     20 68 06 F1 | 	add	ptr___system__dat__, #32
106dc     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
106e0     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
106e4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
106e8     53 00 00 FF 
106ec     68 65 06 F1 | 	add	objptr, ##42856
106f0     32 7B 62 FC | 	wrlong	result1, objptr
106f4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
106f4     53 00 00 FF 
106f8     68 65 86 F1 | 	sub	objptr, ##42856
106fc     B0 00 90 AD |  if_e	jmp	#LR__1393
10700     00 92 06 F6 | 	mov	arg01, #0
10704     34 98 B1 FD | 	call	#__system___getiolock_0622
10708     3D 93 02 F6 | 	mov	arg01, result1
1070c     A8 42 B1 FD | 	call	#__system___lockmem
10710     97 01 00 FF 
10714     04 94 06 F6 | 	mov	arg02, ##@LR__5991
10718     00 92 06 F6 | 	mov	arg01, #0
1071c     00 96 06 F6 | 	mov	arg03, #0
10720     88 4F B1 FD | 	call	#__system___basic_print_string
10724     53 00 00 FF 
10728     68 65 06 F1 | 	add	objptr, ##42856
1072c     32 95 02 FB | 	rdlong	arg02, objptr
10730     53 00 00 FF 
10734     68 65 86 F1 | 	sub	objptr, ##42856
10738     00 92 06 F6 | 	mov	arg01, #0
1073c     00 96 06 F6 | 	mov	arg03, #0
10740     0A 98 06 F6 | 	mov	arg04, #10
10744     A8 4F B1 FD | 	call	#__system___basic_print_integer
10748     97 01 00 FF 
1074c     12 94 06 F6 | 	mov	arg02, ##@LR__5992
10750     00 92 06 F6 | 	mov	arg01, #0
10754     00 96 06 F6 | 	mov	arg03, #0
10758     50 4F B1 FD | 	call	#__system___basic_print_string
1075c     00 AC 06 F6 | 	mov	local04, #0
10760     53 00 00 FF 
10764     68 65 06 F1 | 	add	objptr, ##42856
10768     32 93 02 FB | 	rdlong	arg01, objptr
1076c     53 00 00 FF 
10770     68 65 86 F1 | 	sub	objptr, ##42856
10774     F0 63 B1 FD | 	call	#__system___strerror
10778     3D 95 02 F6 | 	mov	arg02, result1
1077c     56 93 02 F6 | 	mov	arg01, local04
10780     00 96 06 F6 | 	mov	arg03, #0
10784     24 4F B1 FD | 	call	#__system___basic_print_string
10788     00 92 06 F6 | 	mov	arg01, #0
1078c     0A 94 06 F6 | 	mov	arg02, #10
10790     00 96 06 F6 | 	mov	arg03, #0
10794     BC 4E B1 FD | 	call	#__system___basic_print_char
10798     00 92 06 F6 | 	mov	arg01, #0
1079c     9C 97 B1 FD | 	call	#__system___getiolock_0622
107a0     3D 01 68 FC | 	wrlong	#0, result1
107a4     09 92 06 F6 | 	mov	arg01, #9
107a8     E8 8D B1 FD | 	call	#__system__close
107ac     AC 04 90 FD | 	jmp	#LR__1411
107b0                 | LR__1393
107b0                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
107b0     00 AE 06 F6 | 	mov	local05, #0
107b4                 | LR__1394
107b4     57 AB 02 F6 | 	mov	local03, local05
107b8     01 AA 66 F0 | 	shl	local03, #1
107bc     11 94 06 F6 | 	mov	arg02, #17
107c0     55 95 02 F1 | 	add	arg02, local03
107c4     E7 96 02 F6 | 	mov	arg03, fp
107c8     7C 96 06 F1 | 	add	arg03, #124
107cc     09 92 06 F6 | 	mov	arg01, #9
107d0     01 98 06 F6 | 	mov	arg04, #1
107d4     02 9A 06 F6 | 	mov	arg05, #2
107d8     58 50 B1 FD | 	call	#__system___basic_get
107dc     56 93 02 F6 | 	mov	arg01, local04
107e0     0B 92 66 F0 | 	shl	arg01, #11
107e4     57 AB 02 F6 | 	mov	local03, local05
107e8     01 AA 66 F0 | 	shl	local03, #1
107ec     55 93 02 F1 | 	add	arg01, local03
107f0     7C CE 05 F1 | 	add	fp, #124
107f4     E7 94 E2 FA | 	rdword	arg02, fp
107f8     7C CE 85 F1 | 	sub	fp, #124
107fc     0F 94 66 F7 | 	signx	arg02, #15
10800     1C 0A B1 FD | 	call	#_psdpoke
10804     01 AE 06 F1 | 	add	local05, #1
10808     02 00 00 FF 
1080c     01 AE 56 F2 | 	cmps	local05, ##1025 wc
10810     A0 FF 9F CD |  if_b	jmp	#LR__1394
10814                 | '     close #9
10814     09 92 06 F6 | 	mov	arg01, #9
10818     78 8D B1 FD | 	call	#__system__close
1081c                 | '     return
1081c     3C 04 90 FD | 	jmp	#LR__1411
10820                 | LR__1395
10820                 | '     if wptr < ($80000 - 2048) then 
10820     FC 03 00 FF 
10824     00 AA 56 F2 | 	cmps	local03, ##522240 wc
10828     48 00 90 3D |  if_ae	jmp	#LR__1397
1082c                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
1082c     00 AE 06 F6 | 	mov	local05, #0
10830                 | LR__1396
10830     56 A7 02 F6 | 	mov	local01, local04
10834     0B A6 66 F0 | 	shl	local01, #11
10838     57 A9 02 F6 | 	mov	local02, local05
1083c     01 A8 66 F0 | 	shl	local02, #1
10840     54 A7 02 F1 | 	add	local01, local02
10844     55 93 02 F6 | 	mov	arg01, local03
10848     57 A9 02 F6 | 	mov	local02, local05
1084c     01 A8 66 F0 | 	shl	local02, #1
10850     54 93 02 F1 | 	add	arg01, local02
10854     49 95 E2 FA | 	rdword	arg02, arg01
10858     53 93 02 F6 | 	mov	arg01, local01
1085c     C0 09 B1 FD | 	call	#_psdpoke
10860     01 AE 06 F1 | 	add	local05, #1
10864     02 00 00 FF 
10868     00 AE 56 F2 | 	cmps	local05, ##1024 wc
1086c     C0 FF 9F CD |  if_b	jmp	#LR__1396
10870     E8 03 90 FD | 	jmp	#LR__1411
10874                 | LR__1397
10874                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
10874     00 AE 06 F6 | 	mov	local05, #0
10878                 | LR__1398
10878     56 A7 02 F6 | 	mov	local01, local04
1087c     0B A6 66 F0 | 	shl	local01, #11
10880     57 A9 02 F6 | 	mov	local02, local05
10884     01 A8 66 F0 | 	shl	local02, #1
10888     54 A7 02 F1 | 	add	local01, local02
1088c     55 93 02 F6 | 	mov	arg01, local03
10890     57 A9 02 F6 | 	mov	local02, local05
10894     01 A8 66 F0 | 	shl	local02, #1
10898     54 93 02 F1 | 	add	arg01, local02
1089c     A0 0A B1 FD | 	call	#_psdpeek
108a0     3D 95 02 F6 | 	mov	arg02, result1
108a4     53 93 02 F6 | 	mov	arg01, local01
108a8     74 09 B1 FD | 	call	#_psdpoke
108ac     01 AE 06 F1 | 	add	local05, #1
108b0     02 00 00 FF 
108b4     00 AE 56 F2 | 	cmps	local05, ##1024 wc
108b8     BC FF 9F CD |  if_b	jmp	#LR__1398
108bc                 | '     return 
108bc     9C 03 90 FD | 	jmp	#LR__1411
108c0                 | '   return
108c0                 | LR__1399
108c0                 | ' for i=0 to 15 : harm(i)=0: next i  
108c0     00 AE 06 F6 | 	mov	local05, #0
108c4     3C CE 05 F1 | 	add	fp, #60
108c8     D7 0E 48 FB | 	callpa	#(@LR__1401-@LR__1400)>>2,fcache_load_ptr_
108cc                 | LR__1400
108cc     57 B1 02 F6 | 	mov	local06, local05
108d0     02 B0 66 F0 | 	shl	local06, #2
108d4     E7 B0 02 F1 | 	add	local06, fp
108d8     58 01 68 FC | 	wrlong	#0, local06
108dc     01 AE 06 F1 | 	add	local05, #1
108e0     10 AE 56 F2 | 	cmps	local05, #16 wc
108e4     E4 FF 9F CD |  if_b	jmp	#LR__1400
108e8                 | LR__1401
108e8     3C CE 85 F1 | 	sub	fp, #60
108ec                 | ' for i=numpar to 2 step -1 
108ec     53 AF 02 F6 | 	mov	local05, local01
108f0                 | LR__1402
108f0     94 CD BF FD | 	call	#_pop
108f4     2C CE 05 F1 | 	add	fp, #44
108f8     E7 7A 62 FC | 	wrlong	result1, fp
108fc     04 CE 05 F1 | 	add	fp, #4
10900     E7 7C 62 FC | 	wrlong	result2, fp
10904     04 CE 05 F1 | 	add	fp, #4
10908     E7 7E 62 FC | 	wrlong	result3, fp
1090c     57 B1 02 F6 | 	mov	local06, local05
10910     02 B0 86 F1 | 	sub	local06, #2
10914     02 B0 66 F0 | 	shl	local06, #2
10918     08 CE 05 F1 | 	add	fp, #8
1091c     E7 B0 02 F1 | 	add	local06, fp
10920     10 CE 85 F1 | 	sub	fp, #16
10924     E7 92 02 F6 | 	mov	arg01, fp
10928     2C CE 85 F1 | 	sub	fp, #44
1092c     F0 CF BF FD | 	call	#_converttofloat
10930     58 7B 62 FC | 	wrlong	result1, local06
10934     01 AE 86 F1 | 	sub	local05, #1
10938     02 AE 56 F2 | 	cmps	local05, #2 wc
1093c     B0 FF 9F 3D |  if_ae	jmp	#LR__1402
10940     44 CD BF FD | 	call	#_pop
10944     3F AF 02 F6 | 	mov	local05, result3
10948     2C CE 05 F1 | 	add	fp, #44
1094c     E7 7A 62 FC | 	wrlong	result1, fp
10950     04 CE 05 F1 | 	add	fp, #4
10954     E7 7C 62 FC | 	wrlong	result2, fp
10958     04 CE 05 F1 | 	add	fp, #4
1095c     E7 AE 62 FC | 	wrlong	local05, fp
10960     08 CE 85 F1 | 	sub	fp, #8
10964     E7 92 02 F6 | 	mov	arg01, fp
10968     2C CE 85 F1 | 	sub	fp, #44
1096c     F4 CE BF FD | 	call	#_converttoint
10970     3D AD 02 F6 | 	mov	local04, result1
10974                 | ' t1=pop()
10974                 | ' channel=converttoint(t1) : : if channel>31 then return
10974     20 AC 56 F2 | 	cmps	local04, #32 wc
10978     E0 02 90 3D |  if_ae	jmp	#LR__1411
1097c     00 B2 06 F6 | 	mov	local07, #0
10980                 | ' max=0
10980                 | ' if harm(0)<0 then
10980     3C CE 05 F1 | 	add	fp, #60
10984     E7 92 02 FB | 	rdlong	arg01, fp
10988     3C CE 85 F1 | 	sub	fp, #60
1098c     00 94 06 F6 | 	mov	arg02, #0
10990     01 96 06 F6 | 	mov	arg03, #1
10994     24 6B B1 FD | 	call	#__system___float_cmp
10998     00 7A 56 F2 | 	cmps	result1, #0 wc
1099c     C0 00 90 3D |  if_ae	jmp	#LR__1405
109a0     3C CE 05 F1 | 	add	fp, #60
109a4     E7 B4 02 FB | 	rdlong	local08, fp
109a8     1F B4 06 F4 | 	bitl	local08, #31
109ac     04 CE 05 F1 | 	add	fp, #4
109b0     E7 B6 02 FB | 	rdlong	local09, fp
109b4     1F B6 06 F4 | 	bitl	local09, #31
109b8     04 CE 85 F1 | 	sub	fp, #4
109bc     00 C0 9F FF 
109c0     E7 00 68 FC | 	wrlong	##1065353216, fp
109c4     04 CE 05 F1 | 	add	fp, #4
109c8     E7 B4 62 FC | 	wrlong	local08, fp
109cc     04 CE 05 F1 | 	add	fp, #4
109d0     E7 B6 62 FC | 	wrlong	local09, fp
109d4     44 CE 85 F1 | 	sub	fp, #68
109d8                 | '   harm(0)=1
109d8                 | '   harm(1)=even
109d8                 | '   harm(2)=odd
109d8                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
109d8     03 AE 06 F6 | 	mov	local05, #3
109dc                 | LR__1403
109dc     57 B1 02 F6 | 	mov	local06, local05
109e0     02 B0 66 F0 | 	shl	local06, #2
109e4     3C CE 05 F1 | 	add	fp, #60
109e8     E7 B0 02 F1 | 	add	local06, fp
109ec     57 9B 02 F6 | 	mov	arg05, local05
109f0     02 9A 86 F1 | 	sub	arg05, #2
109f4     02 9A 66 F0 | 	shl	arg05, #2
109f8     E7 9A 02 F1 | 	add	arg05, fp
109fc     4D 93 02 FB | 	rdlong	arg01, arg05
10a00     5A 95 02 F6 | 	mov	arg02, local08
10a04     3C CE 85 F1 | 	sub	fp, #60
10a08     7C 66 B1 FD | 	call	#__system___float_mul
10a0c     58 7B 62 FC | 	wrlong	result1, local06
10a10     02 AE 06 F1 | 	add	local05, #2
10a14     10 AE 56 F2 | 	cmps	local05, #16 wc
10a18     C0 FF 9F CD |  if_b	jmp	#LR__1403
10a1c                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
10a1c     04 AE 06 F6 | 	mov	local05, #4
10a20                 | LR__1404
10a20     57 B1 02 F6 | 	mov	local06, local05
10a24     02 B0 66 F0 | 	shl	local06, #2
10a28     3C CE 05 F1 | 	add	fp, #60
10a2c     E7 B0 02 F1 | 	add	local06, fp
10a30     57 B5 02 F6 | 	mov	local08, local05
10a34     02 B4 86 F1 | 	sub	local08, #2
10a38     02 B4 66 F0 | 	shl	local08, #2
10a3c     E7 B4 02 F1 | 	add	local08, fp
10a40     5A 93 02 FB | 	rdlong	arg01, local08
10a44     5B 95 02 F6 | 	mov	arg02, local09
10a48     3C CE 85 F1 | 	sub	fp, #60
10a4c     38 66 B1 FD | 	call	#__system___float_mul
10a50     58 7B 62 FC | 	wrlong	result1, local06
10a54     02 AE 06 F1 | 	add	local05, #2
10a58     0F AE 56 F2 | 	cmps	local05, #15 wc
10a5c     C0 FF 9F CD |  if_b	jmp	#LR__1404
10a60                 | LR__1405
10a60                 | ' if harm(0)>=0 then ' synthesize with harmonics
10a60     3C CE 05 F1 | 	add	fp, #60
10a64     E7 92 02 FB | 	rdlong	arg01, fp
10a68     3C CE 85 F1 | 	sub	fp, #60
10a6c     00 94 06 F6 | 	mov	arg02, #0
10a70     01 96 66 F6 | 	neg	arg03, #1
10a74     44 6A B1 FD | 	call	#__system___float_cmp
10a78     00 7A 56 F2 | 	cmps	result1, #0 wc
10a7c     DC 01 90 CD |  if_b	jmp	#LR__1410
10a80                 | '   for i=0 to 1023
10a80     00 AE 06 F6 | 	mov	local05, #0
10a84                 | LR__1406
10a84     00 B8 06 F6 | 	mov	local10, #0
10a88                 | '     spl=0
10a88                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
10a88     00 BA 06 F6 | 	mov	local11, #0
10a8c                 | LR__1407
10a8c     5D B1 02 F6 | 	mov	local06, local11
10a90     02 B0 66 F0 | 	shl	local06, #2
10a94     E7 9A 02 F6 | 	mov	arg05, fp
10a98     3C 9A 06 F1 | 	add	arg05, #60
10a9c     4D B1 02 F1 | 	add	local06, arg05
10aa0     58 B1 02 FB | 	rdlong	local06, local06
10aa4     87 E4 1D FF 
10aa8     DB B7 06 F6 | 	mov	local09, ##1003032539
10aac     57 93 52 F6 | 	abs	arg01, local05 wc
10ab0     1F BC C6 C9 |  if_b	decod	local12, #31
10ab4     00 BC 06 36 |  if_ae	mov	local12, #0
10ab8     C8 61 B1 FD | 	call	#__system___float_fromuns
10abc     5E 7B 62 F5 | 	xor	result1, local12
10ac0     3D 95 02 F6 | 	mov	arg02, result1
10ac4     5B 93 02 F6 | 	mov	arg01, local09
10ac8     BC 65 B1 FD | 	call	#__system___float_mul
10acc     3D BF 02 F6 | 	mov	local13, result1
10ad0     5D 93 02 F6 | 	mov	arg01, local11
10ad4     01 92 06 F1 | 	add	arg01, #1
10ad8     49 93 52 F6 | 	abs	arg01, arg01 wc
10adc     1F BC C6 C9 |  if_b	decod	local12, #31
10ae0     00 BC 06 36 |  if_ae	mov	local12, #0
10ae4     9C 61 B1 FD | 	call	#__system___float_fromuns
10ae8     5E 7B 62 F5 | 	xor	result1, local12
10aec     3D 95 02 F6 | 	mov	arg02, result1
10af0     5F 93 02 F6 | 	mov	arg01, local13
10af4     90 65 B1 FD | 	call	#__system___float_mul
10af8     3D 93 02 F6 | 	mov	arg01, result1
10afc     F8 6E B1 FD | 	call	#__system____builtin_sinf
10b00     3D 95 02 F6 | 	mov	arg02, result1
10b04     58 93 02 F6 | 	mov	arg01, local06
10b08     7C 65 B1 FD | 	call	#__system___float_mul
10b0c     3D 95 02 F6 | 	mov	arg02, result1
10b10     5C 93 02 F6 | 	mov	arg01, local10
10b14     A0 61 B1 FD | 	call	#__system___float_add
10b18     3D B9 02 F6 | 	mov	local10, result1
10b1c     01 BA 06 F1 | 	add	local11, #1
10b20     10 BA 56 F2 | 	cmps	local11, #16 wc
10b24     64 FF 9F CD |  if_b	jmp	#LR__1407
10b28                 | '     if abs(spl)>max then max=abs(spl)  
10b28     5C 93 02 F6 | 	mov	arg01, local10
10b2c     1F 92 06 F4 | 	bitl	arg01, #31
10b30     59 95 02 F6 | 	mov	arg02, local07
10b34     01 96 66 F6 | 	neg	arg03, #1
10b38     80 69 B1 FD | 	call	#__system___float_cmp
10b3c     01 7A 56 F2 | 	cmps	result1, #1 wc
10b40     1F B8 06 34 |  if_ae	bitl	local10, #31
10b44     5C B3 02 36 |  if_ae	mov	local07, local10
10b48     01 AE 06 F1 | 	add	local05, #1
10b4c     02 00 00 FF 
10b50     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10b54     2C FF 9F CD |  if_b	jmp	#LR__1406
10b58                 | '   for i=0 to 1023
10b58     00 AE 06 F6 | 	mov	local05, #0
10b5c                 | LR__1408
10b5c     00 B8 06 F6 | 	mov	local10, #0
10b60                 | '     spl=0
10b60                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
10b60     00 BA 06 F6 | 	mov	local11, #0
10b64                 | LR__1409
10b64     5D BF 02 F6 | 	mov	local13, local11
10b68     02 BE 66 F0 | 	shl	local13, #2
10b6c     E7 B6 02 F6 | 	mov	local09, fp
10b70     3C B6 06 F1 | 	add	local09, #60
10b74     5B BF 02 F1 | 	add	local13, local09
10b78     5F B1 02 FB | 	rdlong	local06, local13
10b7c     58 7F 23 FF 
10b80     00 92 06 F6 | 	mov	arg01, ##1191096320
10b84     59 95 02 F6 | 	mov	arg02, local07
10b88     00 67 B1 FD | 	call	#__system___float_div
10b8c     3D 95 02 F6 | 	mov	arg02, result1
10b90     58 93 02 F6 | 	mov	arg01, local06
10b94     F0 64 B1 FD | 	call	#__system___float_mul
10b98     3D B1 02 F6 | 	mov	local06, result1
10b9c     87 E4 1D FF 
10ba0     DB BF 06 F6 | 	mov	local13, ##1003032539
10ba4     57 93 52 F6 | 	abs	arg01, local05 wc
10ba8     1F BC C6 C9 |  if_b	decod	local12, #31
10bac     00 BC 06 36 |  if_ae	mov	local12, #0
10bb0     D0 60 B1 FD | 	call	#__system___float_fromuns
10bb4     5E 7B 62 F5 | 	xor	result1, local12
10bb8     3D 95 02 F6 | 	mov	arg02, result1
10bbc     5F 93 02 F6 | 	mov	arg01, local13
10bc0     C4 64 B1 FD | 	call	#__system___float_mul
10bc4     3D BF 02 F6 | 	mov	local13, result1
10bc8     5D 93 02 F6 | 	mov	arg01, local11
10bcc     01 92 06 F1 | 	add	arg01, #1
10bd0     49 93 52 F6 | 	abs	arg01, arg01 wc
10bd4     1F BC C6 C9 |  if_b	decod	local12, #31
10bd8     00 BC 06 36 |  if_ae	mov	local12, #0
10bdc     A4 60 B1 FD | 	call	#__system___float_fromuns
10be0     5E 7B 62 F5 | 	xor	result1, local12
10be4     3D 95 02 F6 | 	mov	arg02, result1
10be8     5F 93 02 F6 | 	mov	arg01, local13
10bec     98 64 B1 FD | 	call	#__system___float_mul
10bf0     3D 93 02 F6 | 	mov	arg01, result1
10bf4     00 6E B1 FD | 	call	#__system____builtin_sinf
10bf8     3D 95 02 F6 | 	mov	arg02, result1
10bfc     58 93 02 F6 | 	mov	arg01, local06
10c00     84 64 B1 FD | 	call	#__system___float_mul
10c04     3D 95 02 F6 | 	mov	arg02, result1
10c08     5C 93 02 F6 | 	mov	arg01, local10
10c0c     A8 60 B1 FD | 	call	#__system___float_add
10c10     3D B9 02 F6 | 	mov	local10, result1
10c14     01 BA 06 F1 | 	add	local11, #1
10c18     10 BA 56 F2 | 	cmps	local11, #16 wc
10c1c     44 FF 9F CD |  if_b	jmp	#LR__1409
10c20     56 BB 02 F6 | 	mov	local11, local04
10c24     0B BA 66 F0 | 	shl	local11, #11
10c28     57 BF 02 F6 | 	mov	local13, local05
10c2c     01 BE 66 F0 | 	shl	local13, #1
10c30     5F BB 02 F1 | 	add	local11, local13
10c34     5C 93 02 F6 | 	mov	arg01, local10
10c38     01 94 06 F6 | 	mov	arg02, #1
10c3c     10 69 B1 FD | 	call	#__system___float_tointeger
10c40     3D 95 02 F6 | 	mov	arg02, result1
10c44     5D 93 02 F6 | 	mov	arg01, local11
10c48     D4 05 B1 FD | 	call	#_psdpoke
10c4c     01 AE 06 F1 | 	add	local05, #1
10c50     02 00 00 FF 
10c54     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10c58     00 FF 9F CD |  if_b	jmp	#LR__1408
10c5c                 | LR__1410
10c5c                 | LR__1411
10c5c     E7 F0 03 F6 | 	mov	ptra, fp
10c60     F2 00 A0 FD | 	call	#popregs_
10c64                 | _do_defsnd_ret
10c64     2D 00 64 FD | 	ret
10c68                 | 
10c68                 | ' 
10c68                 | ' '-------------------- defsprite
10c68                 | ' 
10c68                 | ' sub do_defsprite
10c68                 | _do_defsprite
10c68     0B CA 05 F6 | 	mov	COUNT_, #11
10c6c     E8 00 A0 FD | 	call	#pushregs_
10c70     60 F0 07 F1 | 	add	ptra, #96
10c74     10 CA BF FD | 	call	#_pop
10c78     3D 97 02 F6 | 	mov	arg03, result1
10c7c     3E 95 02 F6 | 	mov	arg02, result2
10c80     3F 93 02 F6 | 	mov	arg01, result3
10c84     30 CE 05 F1 | 	add	fp, #48
10c88     E7 96 62 FC | 	wrlong	arg03, fp
10c8c     04 CE 05 F1 | 	add	fp, #4
10c90     E7 94 62 FC | 	wrlong	arg02, fp
10c94     04 CE 05 F1 | 	add	fp, #4
10c98     E7 92 62 FC | 	wrlong	arg01, fp
10c9c     38 CE 85 F1 | 	sub	fp, #56
10ca0     E4 C9 BF FD | 	call	#_pop
10ca4     3D 97 02 F6 | 	mov	arg03, result1
10ca8     3E 95 02 F6 | 	mov	arg02, result2
10cac     3F 93 02 F6 | 	mov	arg01, result3
10cb0     24 CE 05 F1 | 	add	fp, #36
10cb4     E7 96 62 FC | 	wrlong	arg03, fp
10cb8     04 CE 05 F1 | 	add	fp, #4
10cbc     E7 94 62 FC | 	wrlong	arg02, fp
10cc0     04 CE 05 F1 | 	add	fp, #4
10cc4     E7 92 62 FC | 	wrlong	arg01, fp
10cc8     2C CE 85 F1 | 	sub	fp, #44
10ccc     B8 C9 BF FD | 	call	#_pop
10cd0     3D 97 02 F6 | 	mov	arg03, result1
10cd4     3E 95 02 F6 | 	mov	arg02, result2
10cd8     3F 93 02 F6 | 	mov	arg01, result3
10cdc     18 CE 05 F1 | 	add	fp, #24
10ce0     E7 96 62 FC | 	wrlong	arg03, fp
10ce4     04 CE 05 F1 | 	add	fp, #4
10ce8     E7 94 62 FC | 	wrlong	arg02, fp
10cec     04 CE 05 F1 | 	add	fp, #4
10cf0     E7 92 62 FC | 	wrlong	arg01, fp
10cf4     20 CE 85 F1 | 	sub	fp, #32
10cf8     8C C9 BF FD | 	call	#_pop
10cfc     3D 97 02 F6 | 	mov	arg03, result1
10d00     3E 95 02 F6 | 	mov	arg02, result2
10d04     3F 93 02 F6 | 	mov	arg01, result3
10d08     0C CE 05 F1 | 	add	fp, #12
10d0c     E7 96 62 FC | 	wrlong	arg03, fp
10d10     04 CE 05 F1 | 	add	fp, #4
10d14     E7 94 62 FC | 	wrlong	arg02, fp
10d18     04 CE 05 F1 | 	add	fp, #4
10d1c     E7 92 62 FC | 	wrlong	arg01, fp
10d20     14 CE 85 F1 | 	sub	fp, #20
10d24     60 C9 BF FD | 	call	#_pop
10d28     3F 97 02 F6 | 	mov	arg03, result3
10d2c     E7 7A 62 FC | 	wrlong	result1, fp
10d30     04 CE 05 F1 | 	add	fp, #4
10d34     E7 7C 62 FC | 	wrlong	result2, fp
10d38     04 CE 05 F1 | 	add	fp, #4
10d3c     E7 96 62 FC | 	wrlong	arg03, fp
10d40     08 CE 85 F1 | 	sub	fp, #8
10d44     E7 92 02 F6 | 	mov	arg01, fp
10d48     18 CB BF FD | 	call	#_converttoint
10d4c     3D A7 02 F6 | 	mov	local01, result1
10d50     E7 92 02 F6 | 	mov	arg01, fp
10d54     0C 92 06 F1 | 	add	arg01, #12
10d58     08 CB BF FD | 	call	#_converttoint
10d5c     3D A9 02 F6 | 	mov	local02, result1
10d60     E7 92 02 F6 | 	mov	arg01, fp
10d64     18 92 06 F1 | 	add	arg01, #24
10d68     F8 CA BF FD | 	call	#_converttoint
10d6c     3D AB 02 F6 | 	mov	local03, result1
10d70     E7 92 02 F6 | 	mov	arg01, fp
10d74     24 92 06 F1 | 	add	arg01, #36
10d78     E8 CA BF FD | 	call	#_converttoint
10d7c     3D AD 02 F6 | 	mov	local04, result1
10d80     E7 92 02 F6 | 	mov	arg01, fp
10d84     30 92 06 F1 | 	add	arg01, #48
10d88     D8 CA BF FD | 	call	#_converttoint
10d8c     3D AF 02 F6 | 	mov	local05, result1
10d90                 | ' 
10d90                 | ' t5=pop()
10d90                 | ' t4=pop()
10d90                 | ' t3=pop()
10d90                 | ' t2=pop()
10d90                 | ' t1=pop()
10d90                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
10d90                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
10d90     53 97 02 F6 | 	mov	arg03, local01
10d94     02 96 66 F0 | 	shl	arg03, #2
10d98     32 95 02 F6 | 	mov	arg02, objptr
10d9c     53 00 00 FF 
10da0     AC 94 06 F1 | 	add	arg02, ##42668
10da4     4A 97 02 F1 | 	add	arg03, arg02
10da8     4B 97 0A FB | 	rdlong	arg03, arg03 wz
10dac     20 00 90 AD |  if_e	jmp	#LR__1420
10db0     53 97 02 F6 | 	mov	arg03, local01
10db4     02 96 66 F0 | 	shl	arg03, #2
10db8     32 95 02 F6 | 	mov	arg02, objptr
10dbc     53 00 00 FF 
10dc0     AC 94 06 F1 | 	add	arg02, ##42668
10dc4     4A 97 02 F1 | 	add	arg03, arg02
10dc8     4B 93 02 FB | 	rdlong	arg01, arg03
10dcc     24 77 B1 FD | 	call	#__system___gc_free
10dd0                 | LR__1420
10dd0     57 AD 02 FD | 	qmul	local04, local05
10dd4     53 B1 02 F6 | 	mov	local06, local01
10dd8     02 B0 66 F0 | 	shl	local06, #2
10ddc     32 97 02 F6 | 	mov	arg03, objptr
10de0     53 00 00 FF 
10de4     AC 96 06 F1 | 	add	arg03, ##42668
10de8     4B B1 02 F1 | 	add	local06, arg03
10dec     18 92 62 FD | 	getqx	arg01
10df0     CC 75 B1 FD | 	call	#__system___gc_alloc_managed
10df4     58 7B 62 FC | 	wrlong	result1, local06
10df8                 | ' for y=a3 to a3+a5-1
10df8     55 B3 02 F6 | 	mov	local07, local03
10dfc     55 B5 02 F6 | 	mov	local08, local03
10e00     57 B5 02 F1 | 	add	local08, local05
10e04                 | LR__1421
10e04     5A B3 52 F2 | 	cmps	local07, local08 wc
10e08     7C 00 90 3D |  if_ae	jmp	#LR__1424
10e0c                 | '   for x=a2 to a4+a2-1
10e0c     54 B7 02 F6 | 	mov	local09, local02
10e10     56 B9 02 F6 | 	mov	local10, local04
10e14     54 B9 02 F1 | 	add	local10, local02
10e18                 | LR__1422
10e18     5C B7 52 F2 | 	cmps	local09, local10 wc
10e1c     60 00 90 3D |  if_ae	jmp	#LR__1423
10e20     59 B1 02 F6 | 	mov	local06, local07
10e24     55 B1 82 F1 | 	sub	local06, local03
10e28     56 B1 02 FD | 	qmul	local06, local04
10e2c     53 B1 02 F6 | 	mov	local06, local01
10e30     02 B0 66 F0 | 	shl	local06, #2
10e34     32 97 02 F6 | 	mov	arg03, objptr
10e38     53 00 00 FF 
10e3c     AC 96 06 F1 | 	add	arg03, ##42668
10e40     4B B1 02 F1 | 	add	local06, arg03
10e44     58 B1 02 FB | 	rdlong	local06, local06
10e48     5B BB 02 F6 | 	mov	local11, local09
10e4c     54 BB 82 F1 | 	sub	local11, local02
10e50     32 93 02 FB | 	rdlong	arg01, objptr
10e54     5B 93 02 F1 | 	add	arg01, local09
10e58     59 97 02 F6 | 	mov	arg03, local07
10e5c     0A 96 66 F0 | 	shl	arg03, #10
10e60     4B 93 02 F1 | 	add	arg01, arg03
10e64     18 96 62 FD | 	getqx	arg03
10e68     4B BB 02 F1 | 	add	local11, arg03
10e6c     58 BB 02 F1 | 	add	local11, local06
10e70     3C 04 B1 FD | 	call	#_pspeek
10e74     5D 7B 42 FC | 	wrbyte	result1, local11
10e78     01 B6 06 F1 | 	add	local09, #1
10e7c     98 FF 9F FD | 	jmp	#LR__1422
10e80                 | LR__1423
10e80     01 B2 06 F1 | 	add	local07, #1
10e84     7C FF 9F FD | 	jmp	#LR__1421
10e88                 | LR__1424
10e88     53 BB 02 F6 | 	mov	local11, local01
10e8c     02 BA 66 F0 | 	shl	local11, #2
10e90     32 B9 02 F6 | 	mov	local10, objptr
10e94     53 00 00 FF 
10e98     AC B8 06 F1 | 	add	local10, ##42668
10e9c     5C BB 02 F1 | 	add	local11, local10
10ea0     5D 95 02 FB | 	rdlong	arg02, local11
10ea4     53 93 02 F6 | 	mov	arg01, local01
10ea8     18 11 B1 FD | 	call	#_hg010b_spin2_setspriteptr
10eac     53 93 02 F6 | 	mov	arg01, local01
10eb0     56 95 02 F6 | 	mov	arg02, local04
10eb4     57 97 02 F6 | 	mov	arg03, local05
10eb8     94 11 B1 FD | 	call	#_hg010b_spin2_setspritesize
10ebc     E7 F0 03 F6 | 	mov	ptra, fp
10ec0     F2 00 A0 FD | 	call	#popregs_
10ec4                 | _do_defsprite_ret
10ec4     2D 00 64 FD | 	ret
10ec8                 | 
10ec8                 | ' 
10ec8                 | ' '-------------------- deg
10ec8                 | ' 
10ec8                 | ' sub do_deg
10ec8                 | _do_deg
10ec8     53 00 00 FF 
10ecc     00 65 06 F1 | 	add	objptr, ##42752
10ed0     7D 47 9E FF 
10ed4     32 6B 68 FC | 	wrlong	##1016003125, objptr
10ed8     04 64 06 F1 | 	add	objptr, #4
10edc     97 32 A1 FF 
10ee0     32 C3 69 FC | 	wrlong	##1113927393, objptr
10ee4     53 00 00 FF 
10ee8     04 65 86 F1 | 	sub	objptr, ##42756
10eec                 | _do_deg_ret
10eec     2D 00 64 FD | 	ret
10ef0                 | 
10ef0                 | ' 
10ef0                 | ' '-------------------- delete
10ef0                 | ' 
10ef0                 | ' sub do_delete
10ef0                 | _do_delete
10ef0     05 CA 05 F6 | 	mov	COUNT_, #5
10ef4     E8 00 A0 FD | 	call	#pushregs_
10ef8     8C C7 BF FD | 	call	#_pop
10efc     3E 99 02 F6 | 	mov	arg04, result2
10f00     3F 97 02 F6 | 	mov	arg03, result3
10f04     3D A7 02 F6 | 	mov	local01, result1
10f08     4C A9 02 F6 | 	mov	local02, arg04
10f0c     4B AB 02 F6 | 	mov	local03, arg03
10f10                 | ' 
10f10                 | ' t1=pop()
10f10                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10f10     2B AA 0E F2 | 	cmp	local03, #43 wz
10f14     10 00 90 5D |  if_ne	jmp	#LR__1430
10f18     53 93 02 F6 | 	mov	arg01, local01
10f1c     D8 C8 BF FD | 	call	#_convertstring
10f20     3D A7 02 F6 | 	mov	local01, result1
10f24     1F AA 06 F6 | 	mov	local03, #31
10f28                 | LR__1430
10f28                 | ' if t1.result_type<>result_string then printerror(15): return
10f28     1F AA 0E F2 | 	cmp	local03, #31 wz
10f2c     10 00 90 AD |  if_e	jmp	#LR__1431
10f30     0F 92 06 F6 | 	mov	arg01, #15
10f34     00 94 06 F6 | 	mov	arg02, #0
10f38     00 01 B1 FD | 	call	#_printerror
10f3c     E4 00 90 FD | 	jmp	#LR__1435
10f40                 | LR__1431
10f40                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
10f40     4B 00 00 FF 
10f44     B4 64 06 F1 | 	add	objptr, ##38580
10f48     32 93 02 FB | 	rdlong	arg01, objptr
10f4c     4B 00 00 FF 
10f50     B4 64 86 F1 | 	sub	objptr, ##38580
10f54     97 01 00 FF 
10f58     15 94 06 F6 | 	mov	arg02, ##@LR__5993
10f5c     80 3A B1 FD | 	call	#__system___string_cmp
10f60     00 7A 0E F2 | 	cmp	result1, #0 wz
10f64     34 00 90 AD |  if_e	jmp	#LR__1432
10f68     4B 00 00 FF 
10f6c     B4 64 06 F1 | 	add	objptr, ##38580
10f70     32 93 02 FB | 	rdlong	arg01, objptr
10f74     4B 00 00 FF 
10f78     B4 64 86 F1 | 	sub	objptr, ##38580
10f7c     97 01 00 FF 
10f80     17 94 06 F6 | 	mov	arg02, ##@LR__5994
10f84     8C 3A B1 FD | 	call	#__system___string_concat
10f88     3D 93 02 F6 | 	mov	arg01, result1
10f8c     53 95 02 F6 | 	mov	arg02, local01
10f90     80 3A B1 FD | 	call	#__system___string_concat
10f94     3D AD 02 F6 | 	mov	local04, result1
10f98     14 00 90 FD | 	jmp	#LR__1433
10f9c                 | LR__1432
10f9c     97 01 00 FF 
10fa0     19 92 06 F6 | 	mov	arg01, ##@LR__5995
10fa4     53 95 02 F6 | 	mov	arg02, local01
10fa8     68 3A B1 FD | 	call	#__system___string_concat
10fac     3D AD 02 F6 | 	mov	local04, result1
10fb0                 | LR__1433
10fb0     56 93 02 F6 | 	mov	arg01, local04
10fb4     F8 59 B1 FD | 	call	#__system___remove
10fb8     20 68 06 F1 | 	add	ptr___system__dat__, #32
10fbc     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
10fc0     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
10fc4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
10fc8     3D AF 0A F6 | 	mov	local05, result1 wz
10fcc                 | ' kill filename$
10fcc                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
10fcc     54 00 90 AD |  if_e	jmp	#LR__1434
10fd0     00 92 06 F6 | 	mov	arg01, #0
10fd4     64 8F B1 FD | 	call	#__system___getiolock_0622
10fd8     3D 93 02 F6 | 	mov	arg01, result1
10fdc     D8 39 B1 FD | 	call	#__system___lockmem
10fe0     97 01 00 FF 
10fe4     1B 94 06 F6 | 	mov	arg02, ##@LR__5996
10fe8     00 92 06 F6 | 	mov	arg01, #0
10fec     00 96 06 F6 | 	mov	arg03, #0
10ff0     B8 46 B1 FD | 	call	#__system___basic_print_string
10ff4     00 92 06 F6 | 	mov	arg01, #0
10ff8     57 95 02 F6 | 	mov	arg02, local05
10ffc     00 96 06 F6 | 	mov	arg03, #0
11000     0A 98 06 F6 | 	mov	arg04, #10
11004     E8 46 B1 FD | 	call	#__system___basic_print_integer
11008     00 92 06 F6 | 	mov	arg01, #0
1100c     0A 94 06 F6 | 	mov	arg02, #10
11010     00 96 06 F6 | 	mov	arg03, #0
11014     3C 46 B1 FD | 	call	#__system___basic_print_char
11018     00 92 06 F6 | 	mov	arg01, #0
1101c     1C 8F B1 FD | 	call	#__system___getiolock_0622
11020     3D 01 68 FC | 	wrlong	#0, result1
11024                 | LR__1434
11024                 | LR__1435
11024     E7 F0 03 F6 | 	mov	ptra, fp
11028     F2 00 A0 FD | 	call	#popregs_
1102c                 | _do_delete_ret
1102c     2D 00 64 FD | 	ret
11030                 | 
11030                 | ' 
11030                 | ' '-------------------- dir
11030                 | ' 
11030                 | ' sub do_dir
11030                 | _do_dir
11030     13 CA 05 F6 | 	mov	COUNT_, #19
11034     E8 00 A0 FD | 	call	#pushregs_
11038     01 00 00 FF 
1103c     38 F0 07 F1 | 	add	ptra, ##568
11040                 | ' 
11040                 | ' print "Current directory: "; currentdir$ 
11040     00 92 06 F6 | 	mov	arg01, #0
11044     F4 8E B1 FD | 	call	#__system___getiolock_0622
11048     3D 93 02 F6 | 	mov	arg01, result1
1104c     68 39 B1 FD | 	call	#__system___lockmem
11050     97 01 00 FF 
11054     53 94 06 F6 | 	mov	arg02, ##@LR__5997
11058     00 92 06 F6 | 	mov	arg01, #0
1105c     00 96 06 F6 | 	mov	arg03, #0
11060     48 46 B1 FD | 	call	#__system___basic_print_string
11064     4B 00 00 FF 
11068     B4 64 06 F1 | 	add	objptr, ##38580
1106c     32 95 02 FB | 	rdlong	arg02, objptr
11070     4B 00 00 FF 
11074     B4 64 86 F1 | 	sub	objptr, ##38580
11078     00 92 06 F6 | 	mov	arg01, #0
1107c     00 96 06 F6 | 	mov	arg03, #0
11080     28 46 B1 FD | 	call	#__system___basic_print_string
11084     00 92 06 F6 | 	mov	arg01, #0
11088     0A 94 06 F6 | 	mov	arg02, #10
1108c     00 96 06 F6 | 	mov	arg03, #0
11090     C0 45 B1 FD | 	call	#__system___basic_print_char
11094     01 A6 06 F6 | 	mov	local01, #1
11098     00 92 06 F6 | 	mov	arg01, #0
1109c     9C 8E B1 FD | 	call	#__system___getiolock_0622
110a0     3D 01 68 FC | 	wrlong	#0, result1
110a4     00 A8 06 F6 | 	mov	local02, #0
110a8     00 AA 06 F6 | 	mov	local03, #0
110ac                 | ' px=0
110ac                 | ' for i=0 to 127: filelist(i)="" : next i
110ac     00 AC 06 F6 | 	mov	local04, #0
110b0     1C CE 05 F1 | 	add	fp, #28
110b4     D7 12 48 FB | 	callpa	#(@LR__1441-@LR__1440)>>2,fcache_load_ptr_
110b8                 | LR__1440
110b8     56 AF 02 F6 | 	mov	local05, local04
110bc     02 AE 66 F0 | 	shl	local05, #2
110c0     E7 AE 02 F1 | 	add	local05, fp
110c4     97 01 00 FF 
110c8     67 B0 06 F6 | 	mov	local06, ##@LR__5998
110cc     57 B1 62 FC | 	wrlong	local06, local05
110d0     01 AC 06 F1 | 	add	local04, #1
110d4     80 AC 56 F2 | 	cmps	local04, #128 wc
110d8     DC FF 9F CD |  if_b	jmp	#LR__1440
110dc                 | LR__1441
110dc     1C CE 85 F1 | 	sub	fp, #28
110e0     97 01 00 FF 
110e4     68 92 06 F6 | 	mov	arg01, ##@LR__5999
110e8     10 94 06 F6 | 	mov	arg02, #16
110ec     04 90 B1 FD | 	call	#__system___basic_dir
110f0     3D B3 02 F6 | 	mov	local07, result1
110f4     00 B4 06 F6 | 	mov	local08, #0
110f8                 | ' filename=dir$("*", fbDirectory)
110f8                 | ' n=0
110f8                 | ' while filename <> "" andalso filename <> nil andalso n<128
110f8                 | LR__1442
110f8     97 01 00 FF 
110fc     6A B6 06 F6 | 	mov	local09, ##@LR__6000
11100     59 93 02 F6 | 	mov	arg01, local07
11104     5B 95 02 F6 | 	mov	arg02, local09
11108     D4 38 B1 FD | 	call	#__system___string_cmp
1110c     00 7A 0E F2 | 	cmp	result1, #0 wz
11110     68 00 90 AD |  if_e	jmp	#LR__1443
11114     00 B6 06 F6 | 	mov	local09, #0
11118     59 93 02 F6 | 	mov	arg01, local07
1111c     00 94 06 F6 | 	mov	arg02, #0
11120     BC 38 B1 FD | 	call	#__system___string_cmp
11124     00 7A 0E F2 | 	cmp	result1, #0 wz
11128     50 00 90 AD |  if_e	jmp	#LR__1443
1112c     80 B4 56 F2 | 	cmps	local08, #128 wc
11130     48 00 90 3D |  if_ae	jmp	#LR__1443
11134     97 01 00 FF 
11138     6B 92 06 F6 | 	mov	arg01, ##@LR__6001
1113c     59 95 02 F6 | 	mov	arg02, local07
11140     D0 38 B1 FD | 	call	#__system___string_concat
11144     3D B3 02 F6 | 	mov	local07, result1
11148     5A AF 02 F6 | 	mov	local05, local08
1114c     02 AE 66 F0 | 	shl	local05, #2
11150     E7 B6 02 F6 | 	mov	local09, fp
11154     1C B6 06 F1 | 	add	local09, #28
11158     5B AF 02 F1 | 	add	local05, local09
1115c     57 B3 62 FC | 	wrlong	local07, local05
11160     01 B4 06 F1 | 	add	local08, #1
11164     00 AE 06 F6 | 	mov	local05, #0
11168     00 92 06 F6 | 	mov	arg01, #0
1116c     00 94 06 F6 | 	mov	arg02, #0
11170     80 8F B1 FD | 	call	#__system___basic_dir
11174     3D B3 02 F6 | 	mov	local07, result1
11178     7C FF 9F FD | 	jmp	#LR__1442
1117c                 | LR__1443
1117c                 | ' for i=0 to n-1			' now sort this
1117c     00 AC 06 F6 | 	mov	local04, #0
11180     5A B9 02 F6 | 	mov	local10, local08
11184                 | LR__1444
11184     5C AD 52 F2 | 	cmps	local04, local10 wc
11188     DC 00 90 3D |  if_ae	jmp	#LR__1448
1118c     00 BA 06 F6 | 	mov	local11, #0
11190                 | '   swapped=false
11190                 | '   for j=0 to n-i-2
11190     00 BC 06 F6 | 	mov	local12, #0
11194     5A BF 02 F6 | 	mov	local13, local08
11198     56 BF 82 F1 | 	sub	local13, local04
1119c     01 BE 86 F1 | 	sub	local13, #1
111a0                 | LR__1445
111a0     5F BD 52 F2 | 	cmps	local12, local13 wc
111a4     B0 00 90 3D |  if_ae	jmp	#LR__1447
111a8                 | '     if filelist(j) > filelist(j+1) then
111a8     5E B7 02 F6 | 	mov	local09, local12
111ac     02 B6 66 F0 | 	shl	local09, #2
111b0     1C CE 05 F1 | 	add	fp, #28
111b4     E7 B6 02 F1 | 	add	local09, fp
111b8     5B 93 02 FB | 	rdlong	arg01, local09
111bc     5E B7 02 F6 | 	mov	local09, local12
111c0     01 B6 06 F1 | 	add	local09, #1
111c4     5B B1 02 F6 | 	mov	local06, local09
111c8     02 B0 66 F0 | 	shl	local06, #2
111cc     E7 A6 02 F6 | 	mov	local01, fp
111d0     E7 B0 02 F1 | 	add	local06, fp
111d4     58 AF 02 FB | 	rdlong	local05, local06
111d8     57 95 02 F6 | 	mov	arg02, local05
111dc     1C CE 85 F1 | 	sub	fp, #28
111e0     FC 37 B1 FD | 	call	#__system___string_cmp
111e4     01 7A 56 F2 | 	cmps	result1, #1 wc
111e8     64 00 90 CD |  if_b	jmp	#LR__1446
111ec     5E B7 02 F6 | 	mov	local09, local12
111f0     01 B6 06 F1 | 	add	local09, #1
111f4     02 B6 66 F0 | 	shl	local09, #2
111f8     1C CE 05 F1 | 	add	fp, #28
111fc     E7 B6 02 F1 | 	add	local09, fp
11200     5B BB 02 FB | 	rdlong	local11, local09
11204     5E B1 02 F6 | 	mov	local06, local12
11208     02 B0 66 F0 | 	shl	local06, #2
1120c     E7 B0 02 F1 | 	add	local06, fp
11210     58 AF 02 FB | 	rdlong	local05, local06
11214     5E B7 02 F6 | 	mov	local09, local12
11218     5B B1 02 F6 | 	mov	local06, local09
1121c     02 B0 66 F0 | 	shl	local06, #2
11220     E7 A6 02 F6 | 	mov	local01, fp
11224     E7 B0 02 F1 | 	add	local06, fp
11228     58 BB 62 FC | 	wrlong	local11, local06
1122c     5E A9 02 F6 | 	mov	local02, local12
11230     01 A8 06 F1 | 	add	local02, #1
11234     54 C1 02 F6 | 	mov	local14, local02
11238     02 C0 66 F0 | 	shl	local14, #2
1123c     E7 C2 02 F6 | 	mov	local15, fp
11240     E7 C0 02 F1 | 	add	local14, fp
11244     60 AF 62 FC | 	wrlong	local05, local14
11248     01 BA 66 F6 | 	neg	local11, #1
1124c     1C CE 85 F1 | 	sub	fp, #28
11250                 | LR__1446
11250     01 BC 06 F1 | 	add	local12, #1
11254     48 FF 9F FD | 	jmp	#LR__1445
11258                 | LR__1447
11258                 | ' if not swapped then exit for
11258     5D C5 22 F6 | 	not	local16, local11
1125c     00 C4 0E F2 | 	cmp	local16, #0 wz
11260     01 AC 06 A1 |  if_e	add	local04, #1
11264     1C FF 9F AD |  if_e	jmp	#LR__1444
11268                 | LR__1448
11268                 | ' for i=0 to n-1
11268     00 AC 06 F6 | 	mov	local04, #0
1126c     5A C7 02 F6 | 	mov	local17, local08
11270                 | LR__1449
11270     63 AD 52 F2 | 	cmps	local04, local17 wc
11274     90 00 90 3D |  if_ae	jmp	#LR__1451
11278                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11278     00 92 06 F6 | 	mov	arg01, #0
1127c     BC 8C B1 FD | 	call	#__system___getiolock_0622
11280     3D 93 02 F6 | 	mov	arg01, result1
11284     30 37 B1 FD | 	call	#__system___lockmem
11288     56 A9 02 F6 | 	mov	local02, local04
1128c     02 A8 66 F0 | 	shl	local02, #2
11290     E7 C0 02 F6 | 	mov	local14, fp
11294     1C C0 06 F1 | 	add	local14, #28
11298     60 A9 02 F1 | 	add	local02, local14
1129c     54 95 02 FB | 	rdlong	arg02, local02
112a0     00 A6 06 F6 | 	mov	local01, #0
112a4     00 92 06 F6 | 	mov	arg01, #0
112a8     00 96 06 F6 | 	mov	arg03, #0
112ac     FC 43 B1 FD | 	call	#__system___basic_print_string
112b0     00 92 06 F6 | 	mov	arg01, #0
112b4     84 8C B1 FD | 	call	#__system___getiolock_0622
112b8     3D 01 68 FC | 	wrlong	#0, result1
112bc     40 AA 06 F1 | 	add	local03, #64
112c0     55 93 02 F6 | 	mov	arg01, local03
112c4     20 1A B1 FD | 	call	#_hg010b_spin2_setcursorx
112c8     00 AB 56 F2 | 	cmps	local03, #256 wc
112cc     30 00 90 CD |  if_b	jmp	#LR__1450
112d0     00 AA 06 F6 | 	mov	local03, #0
112d4     00 92 06 F6 | 	mov	arg01, #0
112d8     60 8C B1 FD | 	call	#__system___getiolock_0622
112dc     3D 93 02 F6 | 	mov	arg01, result1
112e0     D4 36 B1 FD | 	call	#__system___lockmem
112e4     00 92 06 F6 | 	mov	arg01, #0
112e8     0A 94 06 F6 | 	mov	arg02, #10
112ec     00 96 06 F6 | 	mov	arg03, #0
112f0     60 43 B1 FD | 	call	#__system___basic_print_char
112f4     00 92 06 F6 | 	mov	arg01, #0
112f8     40 8C B1 FD | 	call	#__system___getiolock_0622
112fc     3D 01 68 FC | 	wrlong	#0, result1
11300                 | LR__1450
11300     01 AC 06 F1 | 	add	local04, #1
11304     68 FF 9F FD | 	jmp	#LR__1449
11308                 | LR__1451
11308                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11308     80 B4 56 F2 | 	cmps	local08, #128 wc
1130c     44 00 90 CD |  if_b	jmp	#LR__1452
11310     00 92 06 F6 | 	mov	arg01, #0
11314     24 8C B1 FD | 	call	#__system___getiolock_0622
11318     3D 93 02 F6 | 	mov	arg01, result1
1131c     98 36 B1 FD | 	call	#__system___lockmem
11320     97 01 00 FF 
11324     72 94 06 F6 | 	mov	arg02, ##@LR__6002
11328     00 92 06 F6 | 	mov	arg01, #0
1132c     00 96 06 F6 | 	mov	arg03, #0
11330     78 43 B1 FD | 	call	#__system___basic_print_string
11334     00 92 06 F6 | 	mov	arg01, #0
11338     0A 94 06 F6 | 	mov	arg02, #10
1133c     00 96 06 F6 | 	mov	arg03, #0
11340     10 43 B1 FD | 	call	#__system___basic_print_char
11344     00 92 06 F6 | 	mov	arg01, #0
11348     F0 8B B1 FD | 	call	#__system___getiolock_0622
1134c     3D 01 68 FC | 	wrlong	#0, result1
11350     00 A6 06 F6 | 	mov	local01, #0
11354                 | LR__1452
11354                 | ' print
11354     00 92 06 F6 | 	mov	arg01, #0
11358     E0 8B B1 FD | 	call	#__system___getiolock_0622
1135c     3D 93 02 F6 | 	mov	arg01, result1
11360     54 36 B1 FD | 	call	#__system___lockmem
11364     00 92 06 F6 | 	mov	arg01, #0
11368     0A 94 06 F6 | 	mov	arg02, #10
1136c     00 96 06 F6 | 	mov	arg03, #0
11370     E0 42 B1 FD | 	call	#__system___basic_print_char
11374     00 92 06 F6 | 	mov	arg01, #0
11378     C0 8B B1 FD | 	call	#__system___getiolock_0622
1137c     3D 01 68 FC | 	wrlong	#0, result1
11380     00 B0 06 F6 | 	mov	local06, #0
11384     00 B4 06 F6 | 	mov	local08, #0
11388     00 AA 06 F6 | 	mov	local03, #0
1138c                 | ' return cursor_y
1138c     3E 64 06 F1 | 	add	objptr, #62
11390     32 C9 C2 FA | 	rdbyte	local18, objptr
11394     3E 64 86 F1 | 	sub	objptr, #62
11398     97 01 00 FF 
1139c     A4 92 06 F6 | 	mov	arg01, ##@LR__6003
113a0     21 94 06 F6 | 	mov	arg02, #33
113a4     4C 8D B1 FD | 	call	#__system___basic_dir
113a8     3D B3 02 F6 | 	mov	local07, result1
113ac                 | ' n=0
113ac                 | ' px=0: py=v.getcursory()
113ac                 | ' filename = dir$("*", fbNormal )   
113ac                 | ' do while filename <> "" andalso filename <> nil andalso n<128
113ac                 | LR__1453
113ac     97 01 00 FF 
113b0     A6 B6 06 F6 | 	mov	local09, ##@LR__6004
113b4     59 93 02 F6 | 	mov	arg01, local07
113b8     5B 95 02 F6 | 	mov	arg02, local09
113bc     20 36 B1 FD | 	call	#__system___string_cmp
113c0     00 7A 0E F2 | 	cmp	result1, #0 wz
113c4     54 00 90 AD |  if_e	jmp	#LR__1454
113c8     00 B6 06 F6 | 	mov	local09, #0
113cc     59 93 02 F6 | 	mov	arg01, local07
113d0     00 94 06 F6 | 	mov	arg02, #0
113d4     08 36 B1 FD | 	call	#__system___string_cmp
113d8     00 7A 0E F2 | 	cmp	result1, #0 wz
113dc     3C 00 90 AD |  if_e	jmp	#LR__1454
113e0     80 B4 56 F2 | 	cmps	local08, #128 wc
113e4     34 00 90 3D |  if_ae	jmp	#LR__1454
113e8     5A AF 02 F6 | 	mov	local05, local08
113ec     02 AE 66 F0 | 	shl	local05, #2
113f0     E7 B6 02 F6 | 	mov	local09, fp
113f4     1C B6 06 F1 | 	add	local09, #28
113f8     5B AF 02 F1 | 	add	local05, local09
113fc     57 B3 62 FC | 	wrlong	local07, local05
11400     01 B4 06 F1 | 	add	local08, #1
11404     00 AE 06 F6 | 	mov	local05, #0
11408     00 92 06 F6 | 	mov	arg01, #0
1140c     00 94 06 F6 | 	mov	arg02, #0
11410     E0 8C B1 FD | 	call	#__system___basic_dir
11414     3D B3 02 F6 | 	mov	local07, result1
11418     90 FF 9F FD | 	jmp	#LR__1453
1141c                 | LR__1454
1141c                 | ' for i =0 to n-1
1141c     00 AC 06 F6 | 	mov	local04, #0
11420                 | LR__1455
11420     5A AD 52 F2 | 	cmps	local04, local08 wc
11424     D8 00 90 3D |  if_ae	jmp	#LR__1459
11428     00 BA 06 F6 | 	mov	local11, #0
1142c                 | '   swapped=false
1142c                 | '   for j=0 to n-i-2
1142c     00 BC 06 F6 | 	mov	local12, #0
11430     5A CB 02 F6 | 	mov	local19, local08
11434     56 CB 82 F1 | 	sub	local19, local04
11438     01 CA 86 F1 | 	sub	local19, #1
1143c                 | LR__1456
1143c     65 BD 52 F2 | 	cmps	local12, local19 wc
11440     AC 00 90 3D |  if_ae	jmp	#LR__1458
11444                 | '     if filelist(j) > filelist(j+1) then
11444     5E B7 02 F6 | 	mov	local09, local12
11448     02 B6 66 F0 | 	shl	local09, #2
1144c     1C CE 05 F1 | 	add	fp, #28
11450     E7 B6 02 F1 | 	add	local09, fp
11454     5B 93 02 FB | 	rdlong	arg01, local09
11458     5E B7 02 F6 | 	mov	local09, local12
1145c     01 B6 06 F1 | 	add	local09, #1
11460     5B B1 02 F6 | 	mov	local06, local09
11464     02 B0 66 F0 | 	shl	local06, #2
11468     E7 A6 02 F6 | 	mov	local01, fp
1146c     E7 B0 02 F1 | 	add	local06, fp
11470     58 AF 02 FB | 	rdlong	local05, local06
11474     57 95 02 F6 | 	mov	arg02, local05
11478     1C CE 85 F1 | 	sub	fp, #28
1147c     60 35 B1 FD | 	call	#__system___string_cmp
11480     01 7A 56 F2 | 	cmps	result1, #1 wc
11484     60 00 90 CD |  if_b	jmp	#LR__1457
11488     5E B7 02 F6 | 	mov	local09, local12
1148c     01 B6 06 F1 | 	add	local09, #1
11490     02 B6 66 F0 | 	shl	local09, #2
11494     1C CE 05 F1 | 	add	fp, #28
11498     E7 B6 02 F1 | 	add	local09, fp
1149c     5B C5 02 FB | 	rdlong	local16, local09
114a0     5E B1 02 F6 | 	mov	local06, local12
114a4     02 B0 66 F0 | 	shl	local06, #2
114a8     E7 B0 02 F1 | 	add	local06, fp
114ac     58 AF 02 FB | 	rdlong	local05, local06
114b0     5E B7 02 F6 | 	mov	local09, local12
114b4     5B B1 02 F6 | 	mov	local06, local09
114b8     02 B0 66 F0 | 	shl	local06, #2
114bc     E7 A6 02 F6 | 	mov	local01, fp
114c0     E7 B0 02 F1 | 	add	local06, fp
114c4     58 C5 62 FC | 	wrlong	local16, local06
114c8     5E C1 02 F6 | 	mov	local14, local12
114cc     01 C0 06 F1 | 	add	local14, #1
114d0     02 C0 66 F0 | 	shl	local14, #2
114d4     E7 C2 02 F6 | 	mov	local15, fp
114d8     E7 C0 02 F1 | 	add	local14, fp
114dc     60 AF 62 FC | 	wrlong	local05, local14
114e0     01 BA 66 F6 | 	neg	local11, #1
114e4     1C CE 85 F1 | 	sub	fp, #28
114e8                 | LR__1457
114e8     01 BC 06 F1 | 	add	local12, #1
114ec     4C FF 9F FD | 	jmp	#LR__1456
114f0                 | LR__1458
114f0                 | ' if not swapped then exit for
114f0     5D C5 22 F6 | 	not	local16, local11
114f4     00 C4 0E F2 | 	cmp	local16, #0 wz
114f8     01 AC 06 A1 |  if_e	add	local04, #1
114fc     20 FF 9F AD |  if_e	jmp	#LR__1455
11500                 | LR__1459
11500                 | ' for i=0 to n-1
11500     00 AC 06 F6 | 	mov	local04, #0
11504                 | LR__1460
11504     5A AD 52 F2 | 	cmps	local04, local08 wc
11508     8C 00 90 3D |  if_ae	jmp	#LR__1462
1150c                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1150c     00 92 06 F6 | 	mov	arg01, #0
11510     28 8A B1 FD | 	call	#__system___getiolock_0622
11514     3D 93 02 F6 | 	mov	arg01, result1
11518     9C 34 B1 FD | 	call	#__system___lockmem
1151c     56 A9 02 F6 | 	mov	local02, local04
11520     02 A8 66 F0 | 	shl	local02, #2
11524     E7 C0 02 F6 | 	mov	local14, fp
11528     1C C0 06 F1 | 	add	local14, #28
1152c     60 A9 02 F1 | 	add	local02, local14
11530     54 95 02 FB | 	rdlong	arg02, local02
11534     00 92 06 F6 | 	mov	arg01, #0
11538     00 96 06 F6 | 	mov	arg03, #0
1153c     6C 41 B1 FD | 	call	#__system___basic_print_string
11540     00 92 06 F6 | 	mov	arg01, #0
11544     F4 89 B1 FD | 	call	#__system___getiolock_0622
11548     3D 01 68 FC | 	wrlong	#0, result1
1154c     40 AA 06 F1 | 	add	local03, #64
11550     55 93 02 F6 | 	mov	arg01, local03
11554     90 17 B1 FD | 	call	#_hg010b_spin2_setcursorx
11558     00 AB 56 F2 | 	cmps	local03, #256 wc
1155c     30 00 90 CD |  if_b	jmp	#LR__1461
11560     00 AA 06 F6 | 	mov	local03, #0
11564     00 92 06 F6 | 	mov	arg01, #0
11568     D0 89 B1 FD | 	call	#__system___getiolock_0622
1156c     3D 93 02 F6 | 	mov	arg01, result1
11570     44 34 B1 FD | 	call	#__system___lockmem
11574     00 92 06 F6 | 	mov	arg01, #0
11578     0A 94 06 F6 | 	mov	arg02, #10
1157c     00 96 06 F6 | 	mov	arg03, #0
11580     D0 40 B1 FD | 	call	#__system___basic_print_char
11584     00 92 06 F6 | 	mov	arg01, #0
11588     B0 89 B1 FD | 	call	#__system___getiolock_0622
1158c     3D 01 68 FC | 	wrlong	#0, result1
11590                 | LR__1461
11590     01 AC 06 F1 | 	add	local04, #1
11594     6C FF 9F FD | 	jmp	#LR__1460
11598                 | LR__1462
11598                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11598     80 B4 56 F2 | 	cmps	local08, #128 wc
1159c     40 00 90 CD |  if_b	jmp	#LR__1463
115a0     00 92 06 F6 | 	mov	arg01, #0
115a4     94 89 B1 FD | 	call	#__system___getiolock_0622
115a8     3D 93 02 F6 | 	mov	arg01, result1
115ac     08 34 B1 FD | 	call	#__system___lockmem
115b0     97 01 00 FF 
115b4     A7 94 06 F6 | 	mov	arg02, ##@LR__6005
115b8     00 92 06 F6 | 	mov	arg01, #0
115bc     00 96 06 F6 | 	mov	arg03, #0
115c0     E8 40 B1 FD | 	call	#__system___basic_print_string
115c4     00 92 06 F6 | 	mov	arg01, #0
115c8     0A 94 06 F6 | 	mov	arg02, #10
115cc     00 96 06 F6 | 	mov	arg03, #0
115d0     80 40 B1 FD | 	call	#__system___basic_print_char
115d4     00 92 06 F6 | 	mov	arg01, #0
115d8     60 89 B1 FD | 	call	#__system___getiolock_0622
115dc     3D 01 68 FC | 	wrlong	#0, result1
115e0                 | LR__1463
115e0                 | ' print
115e0     00 92 06 F6 | 	mov	arg01, #0
115e4     54 89 B1 FD | 	call	#__system___getiolock_0622
115e8     3D 93 02 F6 | 	mov	arg01, result1
115ec     C8 33 B1 FD | 	call	#__system___lockmem
115f0     00 92 06 F6 | 	mov	arg01, #0
115f4     0A 94 06 F6 | 	mov	arg02, #10
115f8     00 96 06 F6 | 	mov	arg03, #0
115fc     54 40 B1 FD | 	call	#__system___basic_print_char
11600     00 92 06 F6 | 	mov	arg01, #0
11604     34 89 B1 FD | 	call	#__system___getiolock_0622
11608     3D 01 68 FC | 	wrlong	#0, result1
1160c     E7 F0 03 F6 | 	mov	ptra, fp
11610     F2 00 A0 FD | 	call	#popregs_
11614                 | _do_dir_ret
11614     2D 00 64 FD | 	ret
11618                 | 
11618                 | ' 
11618                 | ' '-------------------- dpeek
11618                 | ' 
11618                 | ' sub do_dpeek
11618                 | _do_dpeek
11618     01 CA 05 F6 | 	mov	COUNT_, #1
1161c     E8 00 A0 FD | 	call	#pushregs_
11620     14 F0 07 F1 | 	add	ptra, #20
11624     60 C0 BF FD | 	call	#_pop
11628     E7 7A 62 FC | 	wrlong	result1, fp
1162c     04 CE 05 F1 | 	add	fp, #4
11630     E7 7C 62 FC | 	wrlong	result2, fp
11634     04 CE 05 F1 | 	add	fp, #4
11638     E7 7E 62 FC | 	wrlong	result3, fp
1163c     08 CE 85 F1 | 	sub	fp, #8
11640     E7 92 02 F6 | 	mov	arg01, fp
11644     1C C2 BF FD | 	call	#_converttoint
11648     3D 93 02 F6 | 	mov	arg01, result1
1164c                 | ' 
1164c                 | ' t1=pop()
1164c                 | ' a=converttoint(t1)
1164c                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
1164c     00 04 00 FF 
11650     00 92 16 F2 | 	cmp	arg01, ##524288 wc
11654     49 A7 E2 CA |  if_b	rdword	local01, arg01
11658     08 00 90 CD |  if_b	jmp	#LR__1470
1165c     E0 FC B0 FD | 	call	#_psdpeek
11660     3D A7 02 F6 | 	mov	local01, result1
11664                 | LR__1470
11664     08 CE 05 F1 | 	add	fp, #8
11668     E7 3A 68 FC | 	wrlong	#29, fp
1166c     08 CE 85 F1 | 	sub	fp, #8
11670     E7 A6 62 FC | 	wrlong	local01, fp
11674     E7 92 02 F6 | 	mov	arg01, fp
11678     9C C0 BF FD | 	call	#_push
1167c     E7 F0 03 F6 | 	mov	ptra, fp
11680     F2 00 A0 FD | 	call	#popregs_
11684                 | _do_dpeek_ret
11684     2D 00 64 FD | 	ret
11688                 | 
11688                 | ' 
11688                 | ' '-------------------- dpoke
11688                 | ' 
11688                 | ' sub do_dpoke
11688                 | _do_dpoke
11688     02 CA 05 F6 | 	mov	COUNT_, #2
1168c     E8 00 A0 FD | 	call	#pushregs_
11690     20 F0 07 F1 | 	add	ptra, #32
11694     F0 BF BF FD | 	call	#_pop
11698     3D 95 02 F6 | 	mov	arg02, result1
1169c     3E 93 02 F6 | 	mov	arg01, result2
116a0     3F A7 02 F6 | 	mov	local01, result3
116a4     E7 94 62 FC | 	wrlong	arg02, fp
116a8     04 CE 05 F1 | 	add	fp, #4
116ac     E7 92 62 FC | 	wrlong	arg01, fp
116b0     04 CE 05 F1 | 	add	fp, #4
116b4     E7 A6 62 FC | 	wrlong	local01, fp
116b8     08 CE 85 F1 | 	sub	fp, #8
116bc     C8 BF BF FD | 	call	#_pop
116c0     3F A7 02 F6 | 	mov	local01, result3
116c4     0C CE 05 F1 | 	add	fp, #12
116c8     E7 7A 62 FC | 	wrlong	result1, fp
116cc     04 CE 05 F1 | 	add	fp, #4
116d0     E7 7C 62 FC | 	wrlong	result2, fp
116d4     04 CE 05 F1 | 	add	fp, #4
116d8     E7 A6 62 FC | 	wrlong	local01, fp
116dc     08 CE 85 F1 | 	sub	fp, #8
116e0     E7 92 02 F6 | 	mov	arg01, fp
116e4     0C CE 85 F1 | 	sub	fp, #12
116e8     78 C1 BF FD | 	call	#_converttoint
116ec     3D A7 02 F6 | 	mov	local01, result1
116f0     E7 92 02 F6 | 	mov	arg01, fp
116f4     6C C1 BF FD | 	call	#_converttoint
116f8     3D A9 02 F6 | 	mov	local02, result1
116fc                 | ' 
116fc                 | ' t1=pop() 'value
116fc                 | ' t2=pop() 
116fc                 | ' a=converttoint(t2) : v=converttoint(t1)
116fc                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
116fc     00 04 00 FF 
11700     00 A6 16 F2 | 	cmp	local01, ##524288 wc
11704     53 A9 52 CC |  if_b	wrword	local02, local01
11708     53 93 02 36 |  if_ae	mov	arg01, local01
1170c     54 95 02 36 |  if_ae	mov	arg02, local02
11710     0C FB B0 3D |  if_ae	call	#_psdpoke
11714     E7 F0 03 F6 | 	mov	ptra, fp
11718     F2 00 A0 FD | 	call	#popregs_
1171c                 | _do_dpoke_ret
1171c     2D 00 64 FD | 	ret
11720                 | 
11720                 | ' '-------------------- draw
11720                 | ' 
11720                 | ' sub do_draw
11720                 | _do_draw
11720     02 CA 05 F6 | 	mov	COUNT_, #2
11724     E8 00 A0 FD | 	call	#pushregs_
11728     20 F0 07 F1 | 	add	ptra, #32
1172c     58 BF BF FD | 	call	#_pop
11730     3D 99 02 F6 | 	mov	arg04, result1
11734     3E 97 02 F6 | 	mov	arg03, result2
11738     3F 9B 02 F6 | 	mov	arg05, result3
1173c     0C CE 05 F1 | 	add	fp, #12
11740     E7 98 62 FC | 	wrlong	arg04, fp
11744     04 CE 05 F1 | 	add	fp, #4
11748     E7 96 62 FC | 	wrlong	arg03, fp
1174c     04 CE 05 F1 | 	add	fp, #4
11750     E7 9A 62 FC | 	wrlong	arg05, fp
11754     14 CE 85 F1 | 	sub	fp, #20
11758     2C BF BF FD | 	call	#_pop
1175c     3F 99 02 F6 | 	mov	arg04, result3
11760     E7 7A 62 FC | 	wrlong	result1, fp
11764     04 CE 05 F1 | 	add	fp, #4
11768     E7 7C 62 FC | 	wrlong	result2, fp
1176c     04 CE 05 F1 | 	add	fp, #4
11770     E7 98 62 FC | 	wrlong	arg04, fp
11774     08 CE 85 F1 | 	sub	fp, #8
11778     E7 92 02 F6 | 	mov	arg01, fp
1177c     E4 C0 BF FD | 	call	#_converttoint
11780     3D A7 02 F6 | 	mov	local01, result1
11784     E7 92 02 F6 | 	mov	arg01, fp
11788     0C 92 06 F1 | 	add	arg01, #12
1178c     D4 C0 BF FD | 	call	#_converttoint
11790     3D A9 02 F6 | 	mov	local02, result1
11794     38 00 00 FF 
11798     4C 64 06 F1 | 	add	objptr, ##28748
1179c     32 93 02 FB | 	rdlong	arg01, objptr
117a0     04 64 06 F1 | 	add	objptr, #4
117a4     32 95 02 FB | 	rdlong	arg02, objptr
117a8     08 64 86 F1 | 	sub	objptr, #8
117ac     32 9B 02 FB | 	rdlong	arg05, objptr
117b0     38 00 00 FF 
117b4     48 64 86 F1 | 	sub	objptr, ##28744
117b8     53 97 02 F6 | 	mov	arg03, local01
117bc     54 99 02 F6 | 	mov	arg04, local02
117c0     88 0B B1 FD | 	call	#_hg010b_spin2_draw
117c4     38 00 00 FF 
117c8     4C 64 06 F1 | 	add	objptr, ##28748
117cc     32 A7 62 FC | 	wrlong	local01, objptr
117d0     04 64 06 F1 | 	add	objptr, #4
117d4     32 A9 62 FC | 	wrlong	local02, objptr
117d8     38 00 00 FF 
117dc     50 64 86 F1 | 	sub	objptr, ##28752
117e0     E7 F0 03 F6 | 	mov	ptra, fp
117e4     F2 00 A0 FD | 	call	#popregs_
117e8                 | _do_draw_ret
117e8     2D 00 64 FD | 	ret
117ec                 | 
117ec                 | ' 
117ec                 | ' '-------------------- else
117ec                 | ' 
117ec                 | ' sub do_else
117ec                 | _do_else
117ec     4B 00 00 FF 
117f0     9C 64 06 F1 | 	add	objptr, ##38556
117f4     32 81 02 FB | 	rdlong	_var01, objptr
117f8     01 80 86 F1 | 	sub	_var01, #1
117fc     04 64 06 F1 | 	add	objptr, #4
11800     32 81 62 FC | 	wrlong	_var01, objptr
11804     4B 00 00 FF 
11808     A0 64 86 F1 | 	sub	objptr, ##38560
1180c                 | _do_else_ret
1180c     2D 00 64 FD | 	ret
11810                 | 
11810                 | ' 
11810                 | ' '-------------------- end
11810                 | ' 
11810                 | ' sub do_end
11810                 | _do_end
11810     4B 00 00 FF 
11814     9C 64 06 F1 | 	add	objptr, ##38556
11818     32 81 02 FB | 	rdlong	_var01, objptr
1181c     01 80 86 F1 | 	sub	_var01, #1
11820     04 64 06 F1 | 	add	objptr, #4
11824     32 81 62 FC | 	wrlong	_var01, objptr
11828     06 00 00 FF 
1182c     38 64 06 F1 | 	add	objptr, ##3128
11830     FF FF BF FF 
11834     32 FF 6B FC | 	wrlong	##2147483647, objptr
11838     51 00 00 FF 
1183c     D8 64 86 F1 | 	sub	objptr, ##41688
11840                 | _do_end_ret
11840     2D 00 64 FD | 	ret
11844                 | 
11844                 | ' 
11844                 | ' '-------------------- enter
11844                 | ' 
11844                 | ' sub do_enter
11844                 | _do_enter
11844     02 00 00 FF 
11848     D2 92 06 F6 | 	mov	arg01, ##1234
1184c     98 2D B0 FD | 	call	#_do_load
11850                 | _do_enter_ret
11850     2D 00 64 FD | 	ret
11854                 | 
11854                 | ' 
11854                 | ' '------------------- error processing
11854                 | ' 
11854                 | ' sub do_error
11854                 | _do_error
11854     01 CA 05 F6 | 	mov	COUNT_, #1
11858     E8 00 A0 FD | 	call	#pushregs_
1185c     4B 00 00 FF 
11860     A0 64 06 F1 | 	add	objptr, ##38560
11864     32 99 02 FB | 	rdlong	arg04, objptr
11868     4C 97 02 F6 | 	mov	arg03, arg04
1186c     01 96 66 F0 | 	shl	arg03, #1
11870     4C 97 02 F1 | 	add	arg03, arg04
11874     02 96 66 F0 | 	shl	arg03, #2
11878     03 00 00 FF 
1187c     04 64 86 F1 | 	sub	objptr, ##1540
11880     32 97 02 F1 | 	add	arg03, objptr
11884     4B A7 02 FB | 	rdlong	local01, arg03
11888                 | ' r=compiledline(lineptr_e).result.uresult
11888                 | ' print "Error ";r;": ";errors$(r)
11888     00 92 06 F6 | 	mov	arg01, #0
1188c     48 00 00 FF 
11890     9C 64 86 F1 | 	sub	objptr, ##37020
11894     A4 86 B1 FD | 	call	#__system___getiolock_0622
11898     3D 93 02 F6 | 	mov	arg01, result1
1189c     18 31 B1 FD | 	call	#__system___lockmem
118a0     97 01 00 FF 
118a4     D9 94 06 F6 | 	mov	arg02, ##@LR__6006
118a8     00 92 06 F6 | 	mov	arg01, #0
118ac     00 96 06 F6 | 	mov	arg03, #0
118b0     F8 3D B1 FD | 	call	#__system___basic_print_string
118b4     00 92 06 F6 | 	mov	arg01, #0
118b8     53 95 02 F6 | 	mov	arg02, local01
118bc     00 96 06 F6 | 	mov	arg03, #0
118c0     0A 98 06 F6 | 	mov	arg04, #10
118c4     68 3E B1 FD | 	call	#__system___basic_print_unsigned
118c8     97 01 00 FF 
118cc     E0 94 06 F6 | 	mov	arg02, ##@LR__6007
118d0     00 92 06 F6 | 	mov	arg01, #0
118d4     00 96 06 F6 | 	mov	arg03, #0
118d8     D0 3D B1 FD | 	call	#__system___basic_print_string
118dc     02 A6 66 F0 | 	shl	local01, #2
118e0     32 99 02 F6 | 	mov	arg04, objptr
118e4     46 00 00 FF 
118e8     9C 98 06 F1 | 	add	arg04, ##35996
118ec     4C A7 02 F1 | 	add	local01, arg04
118f0     53 95 02 FB | 	rdlong	arg02, local01
118f4     00 92 06 F6 | 	mov	arg01, #0
118f8     00 96 06 F6 | 	mov	arg03, #0
118fc     AC 3D B1 FD | 	call	#__system___basic_print_string
11900     00 92 06 F6 | 	mov	arg01, #0
11904     0A 94 06 F6 | 	mov	arg02, #10
11908     00 96 06 F6 | 	mov	arg03, #0
1190c     44 3D B1 FD | 	call	#__system___basic_print_char
11910     00 92 06 F6 | 	mov	arg01, #0
11914     24 86 B1 FD | 	call	#__system___getiolock_0622
11918     3D 01 68 FC | 	wrlong	#0, result1
1191c     E7 F0 03 F6 | 	mov	ptra, fp
11920     F2 00 A0 FD | 	call	#popregs_
11924                 | _do_error_ret
11924     2D 00 64 FD | 	ret
11928                 | 
11928                 | ' 
11928                 | ' '-------------------- fcircle
11928                 | ' 
11928                 | ' sub do_fcircle
11928                 | _do_fcircle
11928     02 CA 05 F6 | 	mov	COUNT_, #2
1192c     E8 00 A0 FD | 	call	#pushregs_
11930     24 F0 07 F1 | 	add	ptra, #36
11934     50 BD BF FD | 	call	#_pop
11938     3D 95 02 F6 | 	mov	arg02, result1
1193c     3E 99 02 F6 | 	mov	arg04, result2
11940     3F 97 02 F6 | 	mov	arg03, result3
11944     18 CE 05 F1 | 	add	fp, #24
11948     E7 94 62 FC | 	wrlong	arg02, fp
1194c     04 CE 05 F1 | 	add	fp, #4
11950     E7 98 62 FC | 	wrlong	arg04, fp
11954     04 CE 05 F1 | 	add	fp, #4
11958     E7 96 62 FC | 	wrlong	arg03, fp
1195c     20 CE 85 F1 | 	sub	fp, #32
11960     24 BD BF FD | 	call	#_pop
11964     3D 95 02 F6 | 	mov	arg02, result1
11968     3E 99 02 F6 | 	mov	arg04, result2
1196c     3F 97 02 F6 | 	mov	arg03, result3
11970     0C CE 05 F1 | 	add	fp, #12
11974     E7 94 62 FC | 	wrlong	arg02, fp
11978     04 CE 05 F1 | 	add	fp, #4
1197c     E7 98 62 FC | 	wrlong	arg04, fp
11980     04 CE 05 F1 | 	add	fp, #4
11984     E7 96 62 FC | 	wrlong	arg03, fp
11988     14 CE 85 F1 | 	sub	fp, #20
1198c     F8 BC BF FD | 	call	#_pop
11990     3F 95 02 F6 | 	mov	arg02, result3
11994     E7 7A 62 FC | 	wrlong	result1, fp
11998     04 CE 05 F1 | 	add	fp, #4
1199c     E7 7C 62 FC | 	wrlong	result2, fp
119a0     04 CE 05 F1 | 	add	fp, #4
119a4     E7 94 62 FC | 	wrlong	arg02, fp
119a8     08 CE 85 F1 | 	sub	fp, #8
119ac     E7 92 02 F6 | 	mov	arg01, fp
119b0     B0 BE BF FD | 	call	#_converttoint
119b4     3D A7 02 F6 | 	mov	local01, result1
119b8     E7 92 02 F6 | 	mov	arg01, fp
119bc     0C 92 06 F1 | 	add	arg01, #12
119c0     A0 BE BF FD | 	call	#_converttoint
119c4     3D A9 02 F6 | 	mov	local02, result1
119c8     E7 92 02 F6 | 	mov	arg01, fp
119cc     18 92 06 F1 | 	add	arg01, #24
119d0     90 BE BF FD | 	call	#_converttoint
119d4     3D 97 02 F6 | 	mov	arg03, result1
119d8     38 00 00 FF 
119dc     48 64 06 F1 | 	add	objptr, ##28744
119e0     32 99 02 FB | 	rdlong	arg04, objptr
119e4     38 00 00 FF 
119e8     48 64 86 F1 | 	sub	objptr, ##28744
119ec     53 93 02 F6 | 	mov	arg01, local01
119f0     54 95 02 F6 | 	mov	arg02, local02
119f4     D8 0D B1 FD | 	call	#_hg010b_spin2_fcircle
119f8     E7 F0 03 F6 | 	mov	ptra, fp
119fc     F2 00 A0 FD | 	call	#popregs_
11a00                 | _do_fcircle_ret
11a00     2D 00 64 FD | 	ret
11a04                 | 
11a04                 | ' 
11a04                 | ' '-------------------- fill
11a04                 | ' 
11a04                 | ' sub do_fill
11a04                 | _do_fill
11a04     03 CA 05 F6 | 	mov	COUNT_, #3
11a08     E8 00 A0 FD | 	call	#pushregs_
11a0c     30 F0 07 F1 | 	add	ptra, #48
11a10     74 BC BF FD | 	call	#_pop
11a14     3D 97 02 F6 | 	mov	arg03, result1
11a18     3E 95 02 F6 | 	mov	arg02, result2
11a1c     3F 99 02 F6 | 	mov	arg04, result3
11a20     24 CE 05 F1 | 	add	fp, #36
11a24     E7 96 62 FC | 	wrlong	arg03, fp
11a28     04 CE 05 F1 | 	add	fp, #4
11a2c     E7 94 62 FC | 	wrlong	arg02, fp
11a30     04 CE 05 F1 | 	add	fp, #4
11a34     E7 98 62 FC | 	wrlong	arg04, fp
11a38     2C CE 85 F1 | 	sub	fp, #44
11a3c     48 BC BF FD | 	call	#_pop
11a40     3D 97 02 F6 | 	mov	arg03, result1
11a44     3E 95 02 F6 | 	mov	arg02, result2
11a48     3F 99 02 F6 | 	mov	arg04, result3
11a4c     18 CE 05 F1 | 	add	fp, #24
11a50     E7 96 62 FC | 	wrlong	arg03, fp
11a54     04 CE 05 F1 | 	add	fp, #4
11a58     E7 94 62 FC | 	wrlong	arg02, fp
11a5c     04 CE 05 F1 | 	add	fp, #4
11a60     E7 98 62 FC | 	wrlong	arg04, fp
11a64     20 CE 85 F1 | 	sub	fp, #32
11a68     1C BC BF FD | 	call	#_pop
11a6c     3D 97 02 F6 | 	mov	arg03, result1
11a70     3E 95 02 F6 | 	mov	arg02, result2
11a74     3F 99 02 F6 | 	mov	arg04, result3
11a78     0C CE 05 F1 | 	add	fp, #12
11a7c     E7 96 62 FC | 	wrlong	arg03, fp
11a80     04 CE 05 F1 | 	add	fp, #4
11a84     E7 94 62 FC | 	wrlong	arg02, fp
11a88     04 CE 05 F1 | 	add	fp, #4
11a8c     E7 98 62 FC | 	wrlong	arg04, fp
11a90     14 CE 85 F1 | 	sub	fp, #20
11a94     F0 BB BF FD | 	call	#_pop
11a98     3F 97 02 F6 | 	mov	arg03, result3
11a9c     E7 7A 62 FC | 	wrlong	result1, fp
11aa0     04 CE 05 F1 | 	add	fp, #4
11aa4     E7 7C 62 FC | 	wrlong	result2, fp
11aa8     04 CE 05 F1 | 	add	fp, #4
11aac     E7 96 62 FC | 	wrlong	arg03, fp
11ab0     08 CE 85 F1 | 	sub	fp, #8
11ab4     E7 92 02 F6 | 	mov	arg01, fp
11ab8     A8 BD BF FD | 	call	#_converttoint
11abc     3D A7 02 F6 | 	mov	local01, result1
11ac0     E7 92 02 F6 | 	mov	arg01, fp
11ac4     0C 92 06 F1 | 	add	arg01, #12
11ac8     98 BD BF FD | 	call	#_converttoint
11acc     3D A9 02 F6 | 	mov	local02, result1
11ad0     E7 92 02 F6 | 	mov	arg01, fp
11ad4     18 92 06 F1 | 	add	arg01, #24
11ad8     88 BD BF FD | 	call	#_converttoint
11adc     3D AB 02 F6 | 	mov	local03, result1
11ae0     E7 92 02 F6 | 	mov	arg01, fp
11ae4     24 92 06 F1 | 	add	arg01, #36
11ae8     78 BD BF FD | 	call	#_converttoint
11aec     3D 99 02 F6 | 	mov	arg04, result1
11af0     53 93 02 F6 | 	mov	arg01, local01
11af4     54 95 02 F6 | 	mov	arg02, local02
11af8     55 97 02 F6 | 	mov	arg03, local03
11afc     3C 0A B1 FD | 	call	#_hg010b_spin2_fill
11b00     E7 F0 03 F6 | 	mov	ptra, fp
11b04     F2 00 A0 FD | 	call	#popregs_
11b08                 | _do_fill_ret
11b08     2D 00 64 FD | 	ret
11b0c                 | 
11b0c                 | ' 
11b0c                 | ' '-------------------- findfirst
11b0c                 | ' 
11b0c                 | ' sub do_findfirst
11b0c                 | _do_findfirst
11b0c     04 CA 05 F6 | 	mov	COUNT_, #4
11b10     E8 00 A0 FD | 	call	#pushregs_
11b14     1C F0 07 F1 | 	add	ptra, #28
11b18     4B 00 00 FF 
11b1c     A0 64 06 F1 | 	add	objptr, ##38560
11b20     32 97 02 FB | 	rdlong	arg03, objptr
11b24     4B 95 02 F6 | 	mov	arg02, arg03
11b28     01 94 66 F0 | 	shl	arg02, #1
11b2c     4B 95 02 F1 | 	add	arg02, arg03
11b30     02 94 66 F0 | 	shl	arg02, #2
11b34     03 00 00 FF 
11b38     04 64 86 F1 | 	sub	objptr, ##1540
11b3c     32 95 02 F1 | 	add	arg02, objptr
11b40     4A A7 02 FB | 	rdlong	local01, arg02
11b44                 | ' 
11b44                 | ' numpar=compiledline(lineptr_e).result.uresult
11b44                 | ' if numpar=2 then
11b44     02 A6 0E F2 | 	cmp	local01, #2 wz
11b48     48 00 00 FF 
11b4c     9C 64 86 F1 | 	sub	objptr, ##37020
11b50     48 01 90 5D |  if_ne	jmp	#LR__1484
11b54     30 BB BF FD | 	call	#_pop
11b58     3F 97 02 F6 | 	mov	arg03, result3
11b5c     08 CE 05 F1 | 	add	fp, #8
11b60     E7 7A 62 FC | 	wrlong	result1, fp
11b64     04 CE 05 F1 | 	add	fp, #4
11b68     E7 7C 62 FC | 	wrlong	result2, fp
11b6c     04 CE 05 F1 | 	add	fp, #4
11b70     E7 96 62 FC | 	wrlong	arg03, fp
11b74                 | '   t1=pop()
11b74                 | '   if t1.result_type=result_string2 then 
11b74     10 CE 85 F1 | 	sub	fp, #16
11b78     2B 96 0E F2 | 	cmp	arg03, #43 wz
11b7c     18 00 90 5D |  if_ne	jmp	#LR__1480
11b80     08 CE 05 F1 | 	add	fp, #8
11b84     E7 92 02 FB | 	rdlong	arg01, fp
11b88     08 CE 85 F1 | 	sub	fp, #8
11b8c     68 BC BF FD | 	call	#_convertstring
11b90     3D A9 02 F6 | 	mov	local02, result1
11b94     60 00 90 FD | 	jmp	#LR__1482
11b98                 | LR__1480
11b98     10 CE 05 F1 | 	add	fp, #16
11b9c     E7 96 02 FB | 	rdlong	arg03, fp
11ba0     10 CE 85 F1 | 	sub	fp, #16
11ba4     1F 96 0E F2 | 	cmp	arg03, #31 wz
11ba8     08 CE 05 A1 |  if_e	add	fp, #8
11bac     E7 A8 02 AB |  if_e	rdlong	local02, fp
11bb0     08 CE 85 A1 |  if_e	sub	fp, #8
11bb4     40 00 90 AD |  if_e	jmp	#LR__1481
11bb8                 | '     print "findfirst: "; : printerror(30) : return  
11bb8     00 92 06 F6 | 	mov	arg01, #0
11bbc     7C 83 B1 FD | 	call	#__system___getiolock_0622
11bc0     3D 93 02 F6 | 	mov	arg01, result1
11bc4     F0 2D B1 FD | 	call	#__system___lockmem
11bc8     97 01 00 FF 
11bcc     E3 94 06 F6 | 	mov	arg02, ##@LR__6008
11bd0     00 92 06 F6 | 	mov	arg01, #0
11bd4     00 96 06 F6 | 	mov	arg03, #0
11bd8     D0 3A B1 FD | 	call	#__system___basic_print_string
11bdc     00 92 06 F6 | 	mov	arg01, #0
11be0     58 83 B1 FD | 	call	#__system___getiolock_0622
11be4     3D 01 68 FC | 	wrlong	#0, result1
11be8     1E 92 06 F6 | 	mov	arg01, #30
11bec     00 94 06 F6 | 	mov	arg02, #0
11bf0     48 F4 B0 FD | 	call	#_printerror
11bf4     08 02 90 FD | 	jmp	#LR__1492
11bf8                 | LR__1481
11bf8                 | LR__1482
11bf8     8C BA BF FD | 	call	#_pop
11bfc     3F 97 02 F6 | 	mov	arg03, result3
11c00     08 CE 05 F1 | 	add	fp, #8
11c04     E7 7A 62 FC | 	wrlong	result1, fp
11c08     04 CE 05 F1 | 	add	fp, #4
11c0c     E7 7C 62 FC | 	wrlong	result2, fp
11c10     04 CE 05 F1 | 	add	fp, #4
11c14     E7 96 62 FC | 	wrlong	arg03, fp
11c18                 | '   t1=pop()
11c18                 | '   if t1.result_type=result_string2 then 
11c18     10 CE 85 F1 | 	sub	fp, #16
11c1c     2B 96 0E F2 | 	cmp	arg03, #43 wz
11c20     18 00 90 5D |  if_ne	jmp	#LR__1483
11c24     08 CE 05 F1 | 	add	fp, #8
11c28     E7 92 02 FB | 	rdlong	arg01, fp
11c2c     08 CE 85 F1 | 	sub	fp, #8
11c30     C4 BB BF FD | 	call	#_convertstring
11c34     3D AB 02 F6 | 	mov	local03, result1
11c38     58 01 90 FD | 	jmp	#LR__1490
11c3c                 | LR__1483
11c3c     10 CE 05 F1 | 	add	fp, #16
11c40     E7 A6 02 FB | 	rdlong	local01, fp
11c44     10 CE 85 F1 | 	sub	fp, #16
11c48     1F A6 0E F2 | 	cmp	local01, #31 wz
11c4c     08 CE 05 A1 |  if_e	add	fp, #8
11c50     E7 AA 02 AB |  if_e	rdlong	local03, fp
11c54     08 CE 85 A1 |  if_e	sub	fp, #8
11c58     38 01 90 AD |  if_e	jmp	#LR__1490
11c5c                 | '     print "findfirst: "; : printerror(30) : return  
11c5c     00 92 06 F6 | 	mov	arg01, #0
11c60     D8 82 B1 FD | 	call	#__system___getiolock_0622
11c64     3D 93 02 F6 | 	mov	arg01, result1
11c68     4C 2D B1 FD | 	call	#__system___lockmem
11c6c     97 01 00 FF 
11c70     EF 94 06 F6 | 	mov	arg02, ##@LR__6009
11c74     00 92 06 F6 | 	mov	arg01, #0
11c78     00 96 06 F6 | 	mov	arg03, #0
11c7c     2C 3A B1 FD | 	call	#__system___basic_print_string
11c80     00 92 06 F6 | 	mov	arg01, #0
11c84     B4 82 B1 FD | 	call	#__system___getiolock_0622
11c88     3D 01 68 FC | 	wrlong	#0, result1
11c8c     1E 92 06 F6 | 	mov	arg01, #30
11c90     00 94 06 F6 | 	mov	arg02, #0
11c94     A4 F3 B0 FD | 	call	#_printerror
11c98     64 01 90 FD | 	jmp	#LR__1492
11c9c                 | LR__1484
11c9c     01 A6 0E F2 | 	cmp	local01, #1 wz
11ca0     B0 00 90 5D |  if_ne	jmp	#LR__1488
11ca4     E0 B9 BF FD | 	call	#_pop
11ca8     3F 97 02 F6 | 	mov	arg03, result3
11cac     08 CE 05 F1 | 	add	fp, #8
11cb0     E7 7A 62 FC | 	wrlong	result1, fp
11cb4     04 CE 05 F1 | 	add	fp, #4
11cb8     E7 7C 62 FC | 	wrlong	result2, fp
11cbc     04 CE 05 F1 | 	add	fp, #4
11cc0     E7 96 62 FC | 	wrlong	arg03, fp
11cc4                 | '   t1=pop()
11cc4                 | '   if t1.result_type=result_string2 then 
11cc4     10 CE 85 F1 | 	sub	fp, #16
11cc8     2B 96 0E F2 | 	cmp	arg03, #43 wz
11ccc     18 00 90 5D |  if_ne	jmp	#LR__1485
11cd0     08 CE 05 F1 | 	add	fp, #8
11cd4     E7 92 02 FB | 	rdlong	arg01, fp
11cd8     08 CE 85 F1 | 	sub	fp, #8
11cdc     18 BB BF FD | 	call	#_convertstring
11ce0     3D AB 02 F6 | 	mov	local03, result1
11ce4     60 00 90 FD | 	jmp	#LR__1487
11ce8                 | LR__1485
11ce8     10 CE 05 F1 | 	add	fp, #16
11cec     E7 96 02 FB | 	rdlong	arg03, fp
11cf0     10 CE 85 F1 | 	sub	fp, #16
11cf4     1F 96 0E F2 | 	cmp	arg03, #31 wz
11cf8     08 CE 05 A1 |  if_e	add	fp, #8
11cfc     E7 AA 02 AB |  if_e	rdlong	local03, fp
11d00     08 CE 85 A1 |  if_e	sub	fp, #8
11d04     40 00 90 AD |  if_e	jmp	#LR__1486
11d08                 | '     print "findfirst: "; : printerror(30) : return  
11d08     00 92 06 F6 | 	mov	arg01, #0
11d0c     2C 82 B1 FD | 	call	#__system___getiolock_0622
11d10     3D 93 02 F6 | 	mov	arg01, result1
11d14     A0 2C B1 FD | 	call	#__system___lockmem
11d18     97 01 00 FF 
11d1c     FB 94 06 F6 | 	mov	arg02, ##@LR__6010
11d20     00 92 06 F6 | 	mov	arg01, #0
11d24     00 96 06 F6 | 	mov	arg03, #0
11d28     80 39 B1 FD | 	call	#__system___basic_print_string
11d2c     00 92 06 F6 | 	mov	arg01, #0
11d30     08 82 B1 FD | 	call	#__system___getiolock_0622
11d34     3D 01 68 FC | 	wrlong	#0, result1
11d38     1E 92 06 F6 | 	mov	arg01, #30
11d3c     00 94 06 F6 | 	mov	arg02, #0
11d40     F8 F2 B0 FD | 	call	#_printerror
11d44     B8 00 90 FD | 	jmp	#LR__1492
11d48                 | LR__1486
11d48                 | LR__1487
11d48     97 01 00 FF 
11d4c     07 A9 06 F6 | 	mov	local02, ##@LR__6011
11d50     40 00 90 FD | 	jmp	#LR__1489
11d54                 | LR__1488
11d54                 | '   print "findfirst: "; : printerror(39) : return     
11d54     00 92 06 F6 | 	mov	arg01, #0
11d58     E0 81 B1 FD | 	call	#__system___getiolock_0622
11d5c     3D 93 02 F6 | 	mov	arg01, result1
11d60     54 2C B1 FD | 	call	#__system___lockmem
11d64     97 01 00 FF 
11d68     08 95 06 F6 | 	mov	arg02, ##@LR__6012
11d6c     00 92 06 F6 | 	mov	arg01, #0
11d70     00 96 06 F6 | 	mov	arg03, #0
11d74     34 39 B1 FD | 	call	#__system___basic_print_string
11d78     00 92 06 F6 | 	mov	arg01, #0
11d7c     BC 81 B1 FD | 	call	#__system___getiolock_0622
11d80     3D 01 68 FC | 	wrlong	#0, result1
11d84     27 92 06 F6 | 	mov	arg01, #39
11d88     00 94 06 F6 | 	mov	arg02, #0
11d8c     AC F2 B0 FD | 	call	#_printerror
11d90     6C 00 90 FD | 	jmp	#LR__1492
11d94                 | LR__1489
11d94                 | LR__1490
11d94                 | ' 
11d94                 | ' if s2="" then
11d94     97 01 00 FF 
11d98     14 95 06 F6 | 	mov	arg02, ##@LR__6013
11d9c     54 93 02 F6 | 	mov	arg01, local02
11da0     3C 2C B1 FD | 	call	#__system___string_cmp
11da4     00 7A 0E F2 | 	cmp	result1, #0 wz
11da8     31 AC 06 A6 |  if_e	mov	local04, #49
11dac     24 00 90 AD |  if_e	jmp	#LR__1491
11db0     54 93 02 F6 | 	mov	arg01, local02
11db4     B8 47 B1 FD | 	call	#__system__LCase_S
11db8     3D 93 02 F6 | 	mov	arg01, result1
11dbc     97 01 00 FF 
11dc0     15 95 06 F6 | 	mov	arg02, ##@LR__6014
11dc4     18 2C B1 FD | 	call	#__system___string_cmp
11dc8     00 7A 0E F2 | 	cmp	result1, #0 wz
11dcc     10 AC 06 A6 |  if_e	mov	local04, #16
11dd0     21 AC 06 56 |  if_ne	mov	local04, #33
11dd4                 | LR__1491
11dd4     55 93 02 F6 | 	mov	arg01, local03
11dd8     56 95 02 F6 | 	mov	arg02, local04
11ddc     14 83 B1 FD | 	call	#__system___basic_dir
11de0     3D A9 02 F6 | 	mov	local02, result1
11de4     10 CE 05 F1 | 	add	fp, #16
11de8     E7 3E 68 FC | 	wrlong	#31, fp
11dec     08 CE 85 F1 | 	sub	fp, #8
11df0     E7 A8 62 FC | 	wrlong	local02, fp
11df4     E7 92 02 F6 | 	mov	arg01, fp
11df8     08 CE 85 F1 | 	sub	fp, #8
11dfc     18 B9 BF FD | 	call	#_push
11e00                 | LR__1492
11e00     E7 F0 03 F6 | 	mov	ptra, fp
11e04     F2 00 A0 FD | 	call	#popregs_
11e08                 | _do_findfirst_ret
11e08     2D 00 64 FD | 	ret
11e0c                 | 
11e0c                 | ' 
11e0c                 | ' '-------------------- findnext
11e0c                 | ' 
11e0c                 | ' sub do_findnext
11e0c                 | _do_findnext
11e0c     00 CA 05 F6 | 	mov	COUNT_, #0
11e10     E8 00 A0 FD | 	call	#pushregs_
11e14     10 F0 07 F1 | 	add	ptra, #16
11e18                 | ' 
11e18                 | ' if compiledline(lineptr_e).result.uresult>0 then print "findnext: "; : printerror(39) : return    
11e18     4B 00 00 FF 
11e1c     A0 64 06 F1 | 	add	objptr, ##38560
11e20     32 97 02 FB | 	rdlong	arg03, objptr
11e24     4B 95 02 F6 | 	mov	arg02, arg03
11e28     01 94 66 F0 | 	shl	arg02, #1
11e2c     4B 95 02 F1 | 	add	arg02, arg03
11e30     02 94 66 F0 | 	shl	arg02, #2
11e34     03 00 00 FF 
11e38     04 64 86 F1 | 	sub	objptr, ##1540
11e3c     32 95 02 F1 | 	add	arg02, objptr
11e40     4A 7B 02 FB | 	rdlong	result1, arg02
11e44     01 7A 16 F2 | 	cmp	result1, #1 wc
11e48     48 00 00 FF 
11e4c     9C 64 86 F1 | 	sub	objptr, ##37020
11e50     40 00 90 CD |  if_b	jmp	#LR__1500
11e54     00 92 06 F6 | 	mov	arg01, #0
11e58     E0 80 B1 FD | 	call	#__system___getiolock_0622
11e5c     3D 93 02 F6 | 	mov	arg01, result1
11e60     54 2B B1 FD | 	call	#__system___lockmem
11e64     97 01 00 FF 
11e68     19 95 06 F6 | 	mov	arg02, ##@LR__6015
11e6c     00 92 06 F6 | 	mov	arg01, #0
11e70     00 96 06 F6 | 	mov	arg03, #0
11e74     34 38 B1 FD | 	call	#__system___basic_print_string
11e78     00 92 06 F6 | 	mov	arg01, #0
11e7c     BC 80 B1 FD | 	call	#__system___getiolock_0622
11e80     3D 01 68 FC | 	wrlong	#0, result1
11e84     27 92 06 F6 | 	mov	arg01, #39
11e88     00 94 06 F6 | 	mov	arg02, #0
11e8c     AC F1 B0 FD | 	call	#_printerror
11e90     28 00 90 FD | 	jmp	#LR__1501
11e94                 | LR__1500
11e94     00 92 06 F6 | 	mov	arg01, #0
11e98     00 94 06 F6 | 	mov	arg02, #0
11e9c     54 82 B1 FD | 	call	#__system___basic_dir
11ea0     3D 97 02 F6 | 	mov	arg03, result1
11ea4     08 CE 05 F1 | 	add	fp, #8
11ea8     E7 3E 68 FC | 	wrlong	#31, fp
11eac     08 CE 85 F1 | 	sub	fp, #8
11eb0     E7 96 62 FC | 	wrlong	arg03, fp
11eb4     E7 92 02 F6 | 	mov	arg01, fp
11eb8     5C B8 BF FD | 	call	#_push
11ebc                 | LR__1501
11ebc     E7 F0 03 F6 | 	mov	ptra, fp
11ec0     F2 00 A0 FD | 	call	#popregs_
11ec4                 | _do_findnext_ret
11ec4     2D 00 64 FD | 	ret
11ec8                 | 
11ec8                 | ' 
11ec8                 | ' '-------------------- font
11ec8                 | ' 
11ec8                 | ' sub do_font
11ec8                 | _do_font
11ec8     03 CA 05 F6 | 	mov	COUNT_, #3
11ecc     E8 00 A0 FD | 	call	#pushregs_
11ed0     B4 B7 BF FD | 	call	#_pop
11ed4     3D A7 02 F6 | 	mov	local01, result1
11ed8     3E A9 02 F6 | 	mov	local02, result2
11edc     3F AB 02 F6 | 	mov	local03, result3
11ee0                 | ' 
11ee0                 | ' t1=pop() 
11ee0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
11ee0     1E AA 0E F2 | 	cmp	local03, #30 wz
11ee4     10 00 90 5D |  if_ne	jmp	#LR__1510
11ee8     53 93 02 F6 | 	mov	arg01, local01
11eec     00 94 06 F6 | 	mov	arg02, #0
11ef0     5C 56 B1 FD | 	call	#__system___float_tointeger
11ef4     3D A7 02 F6 | 	mov	local01, result1
11ef8                 | LR__1510
11ef8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
11ef8     1F AA 0E F2 | 	cmp	local03, #31 wz
11efc     18 00 90 5D |  if_ne	jmp	#LR__1511
11f00     53 93 02 F6 | 	mov	arg01, local01
11f04     9C 59 B1 FD | 	call	#__system____builtin_atof
11f08     3D 93 02 F6 | 	mov	arg01, result1
11f0c     00 94 06 F6 | 	mov	arg02, #0
11f10     3C 56 B1 FD | 	call	#__system___float_tointeger
11f14     3D A7 02 F6 | 	mov	local01, result1
11f18                 | LR__1511
11f18     38 00 00 FF 
11f1c     60 64 06 F1 | 	add	objptr, ##28768
11f20     32 A7 62 FC | 	wrlong	local01, objptr
11f24     38 00 00 FF 
11f28     60 64 86 F1 | 	sub	objptr, ##28768
11f2c     02 A6 66 F0 | 	shl	local01, #2
11f30     53 93 02 F6 | 	mov	arg01, local01
11f34     E4 0C B1 FD | 	call	#_hg010b_spin2_setfontfamily
11f38     E7 F0 03 F6 | 	mov	ptra, fp
11f3c     F2 00 A0 FD | 	call	#popregs_
11f40                 | _do_font_ret
11f40     2D 00 64 FD | 	ret
11f44                 | 
11f44                 | ' 
11f44                 | ' '-------------------- for
11f44                 | ' 
11f44                 | ' sub do_for()
11f44                 | _do_for
11f44     01 CA 05 F6 | 	mov	COUNT_, #1
11f48     E8 00 A0 FD | 	call	#pushregs_
11f4c     10 F0 07 F1 | 	add	ptra, #16
11f50     51 00 00 FF 
11f54     50 65 06 F1 | 	add	objptr, ##41808
11f58     32 93 02 FB | 	rdlong	arg01, objptr
11f5c     01 92 06 F1 | 	add	arg01, #1
11f60     32 93 62 FC | 	wrlong	arg01, objptr
11f64     51 00 00 FF 
11f68     50 65 86 F1 | 	sub	objptr, ##41808
11f6c     18 B7 BF FD | 	call	#_pop
11f70     E7 7A 62 FC | 	wrlong	result1, fp
11f74     04 CE 05 F1 | 	add	fp, #4
11f78     E7 7C 62 FC | 	wrlong	result2, fp
11f7c     04 CE 05 F1 | 	add	fp, #4
11f80     E7 7E 62 FC | 	wrlong	result3, fp
11f84     08 CE 85 F1 | 	sub	fp, #8
11f88     51 00 00 FF 
11f8c     50 65 06 F1 | 	add	objptr, ##41808
11f90     32 93 02 FB | 	rdlong	arg01, objptr
11f94     49 A7 02 F6 | 	mov	local01, arg01
11f98     02 A6 66 F0 | 	shl	local01, #2
11f9c     49 A7 02 F1 | 	add	local01, arg01
11fa0     02 A6 66 F0 | 	shl	local01, #2
11fa4     06 00 00 FF 
11fa8     98 64 86 F1 | 	sub	objptr, ##3224
11fac     32 A7 02 F1 | 	add	local01, objptr
11fb0     E7 92 02 FB | 	rdlong	arg01, fp
11fb4     08 A6 06 F1 | 	add	local01, #8
11fb8     53 93 62 FC | 	wrlong	arg01, local01
11fbc     4B 00 00 FF 
11fc0     B8 64 86 F1 | 	sub	objptr, ##38584
11fc4     C0 B6 BF FD | 	call	#_pop
11fc8     E7 7A 62 FC | 	wrlong	result1, fp
11fcc     04 CE 05 F1 | 	add	fp, #4
11fd0     E7 7C 62 FC | 	wrlong	result2, fp
11fd4     04 CE 05 F1 | 	add	fp, #4
11fd8     E7 7E 62 FC | 	wrlong	result3, fp
11fdc     08 CE 85 F1 | 	sub	fp, #8
11fe0     51 00 00 FF 
11fe4     50 65 06 F1 | 	add	objptr, ##41808
11fe8     32 93 02 FB | 	rdlong	arg01, objptr
11fec     49 A7 02 F6 | 	mov	local01, arg01
11ff0     02 A6 66 F0 | 	shl	local01, #2
11ff4     49 A7 02 F1 | 	add	local01, arg01
11ff8     02 A6 66 F0 | 	shl	local01, #2
11ffc     06 00 00 FF 
12000     98 64 86 F1 | 	sub	objptr, ##3224
12004     32 A7 02 F1 | 	add	local01, objptr
12008     E7 92 02 F6 | 	mov	arg01, fp
1200c     4B 00 00 FF 
12010     B8 64 86 F1 | 	sub	objptr, ##38584
12014     4C B8 BF FD | 	call	#_converttoint
12018     3D 93 02 F6 | 	mov	arg01, result1
1201c     0C A6 06 F1 | 	add	local01, #12
12020     53 93 62 FC | 	wrlong	arg01, local01
12024     60 B6 BF FD | 	call	#_pop
12028     E7 7A 62 FC | 	wrlong	result1, fp
1202c     04 CE 05 F1 | 	add	fp, #4
12030     E7 7C 62 FC | 	wrlong	result2, fp
12034     04 CE 05 F1 | 	add	fp, #4
12038     E7 7E 62 FC | 	wrlong	result3, fp
1203c     08 CE 85 F1 | 	sub	fp, #8
12040     51 00 00 FF 
12044     50 65 06 F1 | 	add	objptr, ##41808
12048     32 93 02 FB | 	rdlong	arg01, objptr
1204c     49 A7 02 F6 | 	mov	local01, arg01
12050     02 A6 66 F0 | 	shl	local01, #2
12054     49 A7 02 F1 | 	add	local01, arg01
12058     02 A6 66 F0 | 	shl	local01, #2
1205c     06 00 00 FF 
12060     98 64 86 F1 | 	sub	objptr, ##3224
12064     32 A7 02 F1 | 	add	local01, objptr
12068     E7 92 02 F6 | 	mov	arg01, fp
1206c     4B 00 00 FF 
12070     B8 64 86 F1 | 	sub	objptr, ##38584
12074     EC B7 BF FD | 	call	#_converttoint
12078     10 A6 06 F1 | 	add	local01, #16
1207c     53 7B 62 FC | 	wrlong	result1, local01
12080                 | ' fortop+=1
12080                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
12080                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
12080                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
12080                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
12080     4B 00 00 FF 
12084     A0 64 06 F1 | 	add	objptr, ##38560
12088     32 93 02 FB | 	rdlong	arg01, objptr
1208c     49 A7 02 F6 | 	mov	local01, arg01
12090     01 A6 66 F0 | 	shl	local01, #1
12094     49 A7 02 F1 | 	add	local01, arg01
12098     02 A6 66 F0 | 	shl	local01, #2
1209c     03 00 00 FF 
120a0     04 64 86 F1 | 	sub	objptr, ##1540
120a4     32 A7 02 F1 | 	add	local01, objptr
120a8     08 A6 06 F1 | 	add	local01, #8
120ac     53 A7 02 FB | 	rdlong	local01, local01
120b0     FE A7 0E F2 | 	cmp	local01, #510 wz
120b4     48 00 00 FF 
120b8     9C 64 86 F1 | 	sub	objptr, ##37020
120bc     70 00 90 5D |  if_ne	jmp	#LR__1520
120c0     51 00 00 FF 
120c4     50 65 06 F1 | 	add	objptr, ##41808
120c8     32 93 02 FB | 	rdlong	arg01, objptr
120cc     49 A7 02 F6 | 	mov	local01, arg01
120d0     02 A6 66 F0 | 	shl	local01, #2
120d4     49 A7 02 F1 | 	add	local01, arg01
120d8     02 A6 66 F0 | 	shl	local01, #2
120dc     06 00 00 FF 
120e0     98 64 86 F1 | 	sub	objptr, ##3224
120e4     32 A7 02 F1 | 	add	local01, objptr
120e8     06 00 00 FF 
120ec     20 64 06 F1 | 	add	objptr, ##3104
120f0     32 93 02 FB | 	rdlong	arg01, objptr
120f4     53 93 62 FC | 	wrlong	arg01, local01
120f8     78 64 06 F1 | 	add	objptr, #120
120fc     32 93 02 FB | 	rdlong	arg01, objptr
12100     49 A7 02 F6 | 	mov	local01, arg01
12104     02 A6 66 F0 | 	shl	local01, #2
12108     49 A7 02 F1 | 	add	local01, arg01
1210c     02 A6 66 F0 | 	shl	local01, #2
12110     06 00 00 FF 
12114     98 64 86 F1 | 	sub	objptr, ##3224
12118     32 A7 02 F1 | 	add	local01, objptr
1211c     04 A6 06 F1 | 	add	local01, #4
12120     53 01 68 FC | 	wrlong	#0, local01
12124     4B 00 00 FF 
12128     B8 64 86 F1 | 	sub	objptr, ##38584
1212c     78 00 90 FD | 	jmp	#LR__1521
12130                 | LR__1520
12130     51 00 00 FF 
12134     50 65 06 F1 | 	add	objptr, ##41808
12138     32 93 02 FB | 	rdlong	arg01, objptr
1213c     49 A7 02 F6 | 	mov	local01, arg01
12140     02 A6 66 F0 | 	shl	local01, #2
12144     49 A7 02 F1 | 	add	local01, arg01
12148     02 A6 66 F0 | 	shl	local01, #2
1214c     06 00 00 FF 
12150     98 64 86 F1 | 	sub	objptr, ##3224
12154     32 A7 02 F1 | 	add	local01, objptr
12158     06 00 00 FF 
1215c     28 64 06 F1 | 	add	objptr, ##3112
12160     32 93 02 FB | 	rdlong	arg01, objptr
12164     53 93 62 FC | 	wrlong	arg01, local01
12168     70 64 06 F1 | 	add	objptr, #112
1216c     32 93 02 FB | 	rdlong	arg01, objptr
12170     49 A7 02 F6 | 	mov	local01, arg01
12174     02 A6 66 F0 | 	shl	local01, #2
12178     49 A7 02 F1 | 	add	local01, arg01
1217c     02 A6 66 F0 | 	shl	local01, #2
12180     06 00 00 FF 
12184     98 64 86 F1 | 	sub	objptr, ##3224
12188     32 A7 02 F1 | 	add	local01, objptr
1218c     18 64 86 F1 | 	sub	objptr, #24
12190     32 93 02 FB | 	rdlong	arg01, objptr
12194     4B 00 00 FF 
12198     A0 64 86 F1 | 	sub	objptr, ##38560
1219c     01 92 06 F1 | 	add	arg01, #1
121a0     04 A6 06 F1 | 	add	local01, #4
121a4     53 93 62 FC | 	wrlong	arg01, local01
121a8                 | LR__1521
121a8     E7 F0 03 F6 | 	mov	ptra, fp
121ac     F2 00 A0 FD | 	call	#popregs_
121b0                 | _do_for_ret
121b0     2D 00 64 FD | 	ret
121b4                 | 
121b4                 | ' 
121b4                 | ' '-------------------- frame
121b4                 | ' 
121b4                 | ' sub do_frame
121b4                 | _do_frame
121b4     03 CA 05 F6 | 	mov	COUNT_, #3
121b8     E8 00 A0 FD | 	call	#pushregs_
121bc     30 F0 07 F1 | 	add	ptra, #48
121c0     C4 B4 BF FD | 	call	#_pop
121c4     3D 97 02 F6 | 	mov	arg03, result1
121c8     3E 95 02 F6 | 	mov	arg02, result2
121cc     3F 9B 02 F6 | 	mov	arg05, result3
121d0     24 CE 05 F1 | 	add	fp, #36
121d4     E7 96 62 FC | 	wrlong	arg03, fp
121d8     04 CE 05 F1 | 	add	fp, #4
121dc     E7 94 62 FC | 	wrlong	arg02, fp
121e0     04 CE 05 F1 | 	add	fp, #4
121e4     E7 9A 62 FC | 	wrlong	arg05, fp
121e8     2C CE 85 F1 | 	sub	fp, #44
121ec     98 B4 BF FD | 	call	#_pop
121f0     3D 97 02 F6 | 	mov	arg03, result1
121f4     3E 95 02 F6 | 	mov	arg02, result2
121f8     3F 9B 02 F6 | 	mov	arg05, result3
121fc     18 CE 05 F1 | 	add	fp, #24
12200     E7 96 62 FC | 	wrlong	arg03, fp
12204     04 CE 05 F1 | 	add	fp, #4
12208     E7 94 62 FC | 	wrlong	arg02, fp
1220c     04 CE 05 F1 | 	add	fp, #4
12210     E7 9A 62 FC | 	wrlong	arg05, fp
12214     20 CE 85 F1 | 	sub	fp, #32
12218     6C B4 BF FD | 	call	#_pop
1221c     3D 97 02 F6 | 	mov	arg03, result1
12220     3E 95 02 F6 | 	mov	arg02, result2
12224     3F 9B 02 F6 | 	mov	arg05, result3
12228     0C CE 05 F1 | 	add	fp, #12
1222c     E7 96 62 FC | 	wrlong	arg03, fp
12230     04 CE 05 F1 | 	add	fp, #4
12234     E7 94 62 FC | 	wrlong	arg02, fp
12238     04 CE 05 F1 | 	add	fp, #4
1223c     E7 9A 62 FC | 	wrlong	arg05, fp
12240     14 CE 85 F1 | 	sub	fp, #20
12244     40 B4 BF FD | 	call	#_pop
12248     3F 97 02 F6 | 	mov	arg03, result3
1224c     E7 7A 62 FC | 	wrlong	result1, fp
12250     04 CE 05 F1 | 	add	fp, #4
12254     E7 7C 62 FC | 	wrlong	result2, fp
12258     04 CE 05 F1 | 	add	fp, #4
1225c     E7 96 62 FC | 	wrlong	arg03, fp
12260     08 CE 85 F1 | 	sub	fp, #8
12264     E7 92 02 F6 | 	mov	arg01, fp
12268     F8 B5 BF FD | 	call	#_converttoint
1226c     3D A7 02 F6 | 	mov	local01, result1
12270     E7 92 02 F6 | 	mov	arg01, fp
12274     0C 92 06 F1 | 	add	arg01, #12
12278     E8 B5 BF FD | 	call	#_converttoint
1227c     3D A9 02 F6 | 	mov	local02, result1
12280     E7 92 02 F6 | 	mov	arg01, fp
12284     18 92 06 F1 | 	add	arg01, #24
12288     D8 B5 BF FD | 	call	#_converttoint
1228c     3D AB 02 F6 | 	mov	local03, result1
12290     E7 92 02 F6 | 	mov	arg01, fp
12294     24 92 06 F1 | 	add	arg01, #36
12298     C8 B5 BF FD | 	call	#_converttoint
1229c     3D 99 02 F6 | 	mov	arg04, result1
122a0     38 00 00 FF 
122a4     48 64 06 F1 | 	add	objptr, ##28744
122a8     32 9B 02 FB | 	rdlong	arg05, objptr
122ac     38 00 00 FF 
122b0     48 64 86 F1 | 	sub	objptr, ##28744
122b4     53 93 02 F6 | 	mov	arg01, local01
122b8     54 95 02 F6 | 	mov	arg02, local02
122bc     55 97 02 F6 | 	mov	arg03, local03
122c0     64 07 B1 FD | 	call	#_hg010b_spin2_frame
122c4     E7 F0 03 F6 | 	mov	ptra, fp
122c8     F2 00 A0 FD | 	call	#popregs_
122cc                 | _do_frame_ret
122cc     2D 00 64 FD | 	ret
122d0                 | 
122d0                 | ' 
122d0                 | ' '-------------------- framebuf
122d0                 | ' 
122d0                 | ' sub do_framebuf
122d0                 | _do_framebuf
122d0     00 CA 05 F6 | 	mov	COUNT_, #0
122d4     E8 00 A0 FD | 	call	#pushregs_
122d8     0C F0 07 F1 | 	add	ptra, #12
122dc     08 CE 05 F1 | 	add	fp, #8
122e0     E7 3A 68 FC | 	wrlong	#29, fp
122e4     32 93 02 FB | 	rdlong	arg01, objptr
122e8     08 CE 85 F1 | 	sub	fp, #8
122ec     E7 92 62 FC | 	wrlong	arg01, fp
122f0     E7 92 02 F6 | 	mov	arg01, fp
122f4     20 B4 BF FD | 	call	#_push
122f8     E7 F0 03 F6 | 	mov	ptra, fp
122fc     F2 00 A0 FD | 	call	#popregs_
12300                 | _do_framebuf_ret
12300     2D 00 64 FD | 	ret
12304                 | 
12304                 | ' '-------------------- fre
12304                 | ' 
12304                 | ' sub do_fre
12304                 | _do_fre
12304     01 CA 05 F6 | 	mov	COUNT_, #1
12308     E8 00 A0 FD | 	call	#pushregs_
1230c     0C F0 07 F1 | 	add	ptra, #12
12310     53 00 00 FF 
12314     F0 64 06 F1 | 	add	objptr, ##42736
12318     32 93 02 FB | 	rdlong	arg01, objptr
1231c     0F 00 00 FF 
12320     74 64 86 F1 | 	sub	objptr, ##7796
12324     32 A7 02 FB | 	rdlong	local01, objptr
12328     53 93 82 F1 | 	sub	arg01, local01
1232c     0F 00 00 FF 
12330     EC 64 06 F1 | 	add	objptr, ##7916
12334     32 93 62 FC | 	wrlong	arg01, objptr
12338     08 CE 05 F1 | 	add	fp, #8
1233c     E7 3A 68 FC | 	wrlong	#29, fp
12340     08 CE 85 F1 | 	sub	fp, #8
12344     32 A7 02 FB | 	rdlong	local01, objptr
12348     53 00 00 FF 
1234c     68 65 86 F1 | 	sub	objptr, ##42856
12350     E7 A6 62 FC | 	wrlong	local01, fp
12354     E7 92 02 F6 | 	mov	arg01, fp
12358     BC B3 BF FD | 	call	#_push
1235c     E7 F0 03 F6 | 	mov	ptra, fp
12360     F2 00 A0 FD | 	call	#popregs_
12364                 | _do_fre_ret
12364     2D 00 64 FD | 	ret
12368                 | 
12368                 | ' 
12368                 | ' '-------------------- get
12368                 | ' 
12368                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
12368                 | _do_get
12368     10 CA 05 F6 | 	mov	COUNT_, #16
1236c     E8 00 A0 FD | 	call	#pushregs_
12370     40 F0 07 F1 | 	add	ptra, #64
12374     4B 00 00 FF 
12378     A0 64 06 F1 | 	add	objptr, ##38560
1237c     32 9B 02 FB | 	rdlong	arg05, objptr
12380     4D A7 02 F6 | 	mov	local01, arg05
12384     01 A6 66 F0 | 	shl	local01, #1
12388     4D A7 02 F1 | 	add	local01, arg05
1238c     02 A6 66 F0 | 	shl	local01, #2
12390     03 00 00 FF 
12394     04 64 86 F1 | 	sub	objptr, ##1540
12398     32 A9 02 F6 | 	mov	local02, objptr
1239c     32 A7 02 F1 | 	add	local01, objptr
123a0     53 AB 02 FB | 	rdlong	local03, local01
123a4                 | ' 
123a4                 | ' numpar=compiledline(lineptr_e).result.uresult
123a4                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
123a4     04 AA 0E F2 | 	cmp	local03, #4 wz
123a8     48 00 00 FF 
123ac     9C 64 86 F1 | 	sub	objptr, ##37020
123b0     48 00 90 5D |  if_ne	jmp	#LR__1530
123b4     D0 B2 BF FD | 	call	#_pop
123b8     3F 9B 02 F6 | 	mov	arg05, result3
123bc     1C CE 05 F1 | 	add	fp, #28
123c0     E7 7A 62 FC | 	wrlong	result1, fp
123c4     04 CE 05 F1 | 	add	fp, #4
123c8     E7 7C 62 FC | 	wrlong	result2, fp
123cc     04 CE 05 F1 | 	add	fp, #4
123d0     E7 9A 62 FC | 	wrlong	arg05, fp
123d4     08 CE 85 F1 | 	sub	fp, #8
123d8     E7 92 02 F6 | 	mov	arg01, fp
123dc     1C CE 85 F1 | 	sub	fp, #28
123e0     80 B4 BF FD | 	call	#_converttoint
123e4     53 00 00 FF 
123e8     64 65 06 F1 | 	add	objptr, ##42852
123ec     32 7B 62 FC | 	wrlong	result1, objptr
123f0     53 00 00 FF 
123f4     64 65 86 F1 | 	sub	objptr, ##42852
123f8     18 00 90 FD | 	jmp	#LR__1531
123fc                 | LR__1530
123fc     53 00 00 FF 
12400     64 65 06 F1 | 	add	objptr, ##42852
12404     FF FF FF FF 
12408     32 FF 6B FC | 	wrlong	##-1, objptr
1240c     53 00 00 FF 
12410     64 65 86 F1 | 	sub	objptr, ##42852
12414                 | LR__1531
12414                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
12414     03 AA 56 F2 | 	cmps	local03, #3 wc
12418     38 00 90 CD |  if_b	jmp	#LR__1532
1241c     68 B2 BF FD | 	call	#_pop
12420     3F A7 02 F6 | 	mov	local01, result3
12424     1C CE 05 F1 | 	add	fp, #28
12428     E7 7A 62 FC | 	wrlong	result1, fp
1242c     04 CE 05 F1 | 	add	fp, #4
12430     E7 7C 62 FC | 	wrlong	result2, fp
12434     04 CE 05 F1 | 	add	fp, #4
12438     E7 A6 62 FC | 	wrlong	local01, fp
1243c     08 CE 85 F1 | 	sub	fp, #8
12440     E7 92 02 F6 | 	mov	arg01, fp
12444     1C CE 85 F1 | 	sub	fp, #28
12448     18 B4 BF FD | 	call	#_converttoint
1244c     3D AD 02 F6 | 	mov	local04, result1
12450     04 00 90 FD | 	jmp	#LR__1533
12454                 | LR__1532
12454     01 AC 06 F6 | 	mov	local04, #1
12458                 | LR__1533
12458                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
12458     02 AA 56 F2 | 	cmps	local03, #2 wc
1245c     34 00 90 CD |  if_b	jmp	#LR__1534
12460     24 B2 BF FD | 	call	#_pop
12464     3F A9 02 F6 | 	mov	local02, result3
12468     1C CE 05 F1 | 	add	fp, #28
1246c     E7 7A 62 FC | 	wrlong	result1, fp
12470     04 CE 05 F1 | 	add	fp, #4
12474     E7 7C 62 FC | 	wrlong	result2, fp
12478     04 CE 05 F1 | 	add	fp, #4
1247c     E7 A8 62 FC | 	wrlong	local02, fp
12480     08 CE 85 F1 | 	sub	fp, #8
12484     E7 92 02 F6 | 	mov	arg01, fp
12488     1C CE 85 F1 | 	sub	fp, #28
1248c     D4 B3 BF FD | 	call	#_converttoint
12490     3D AF 02 F6 | 	mov	local05, result1
12494                 | LR__1534
12494     F0 B1 BF FD | 	call	#_pop
12498     3F 9B 02 F6 | 	mov	arg05, result3
1249c     1C CE 05 F1 | 	add	fp, #28
124a0     E7 7A 62 FC | 	wrlong	result1, fp
124a4     04 CE 05 F1 | 	add	fp, #4
124a8     E7 7C 62 FC | 	wrlong	result2, fp
124ac     04 CE 05 F1 | 	add	fp, #4
124b0     E7 9A 62 FC | 	wrlong	arg05, fp
124b4     08 CE 85 F1 | 	sub	fp, #8
124b8     E7 92 02 F6 | 	mov	arg01, fp
124bc     1C CE 85 F1 | 	sub	fp, #28
124c0     A0 B3 BF FD | 	call	#_converttoint
124c4     3D B1 02 F6 | 	mov	local06, result1
124c8     02 B2 66 F0 | 	shl	local07, #2
124cc     51 00 00 FF 
124d0     E4 64 06 F1 | 	add	objptr, ##41700
124d4     32 B3 02 F1 | 	add	local07, objptr
124d8     59 01 68 FC | 	wrlong	#0, local07
124dc                 | ' t1=pop() : channel=converttoint(t1)
124dc                 | ' getres(j)=0
124dc                 | ' if pos>=0 then
124dc     02 00 00 FF 
124e0     80 64 06 F1 | 	add	objptr, ##1152
124e4     32 B5 02 FB | 	rdlong	local08, objptr
124e8     53 00 00 FF 
124ec     64 65 86 F1 | 	sub	objptr, ##42852
124f0     00 B4 56 F2 | 	cmps	local08, #0 wc
124f4     28 01 90 CD |  if_b	jmp	#LR__1541
124f8                 | '   for i=0 to  amount/1024
124f8     00 B6 06 F6 | 	mov	local09, #0
124fc     56 B9 52 F6 | 	abs	local10, local04 wc
12500     0A B8 46 F0 | 	shr	local10, #10
12504     5C B9 82 F6 | 	negc	local10, local10
12508     01 B8 06 F1 | 	add	local10, #1
1250c                 | LR__1535
1250c     5C B7 52 F2 | 	cmps	local09, local10 wc
12510     20 02 90 3D |  if_ae	jmp	#LR__1549
12514                 | '     get #channel,pos+1,block(0),amount,r
12514     53 00 00 FF 
12518     64 65 06 F1 | 	add	objptr, ##42852
1251c     32 95 02 FB | 	rdlong	arg02, objptr
12520     01 94 06 F1 | 	add	arg02, #1
12524     04 00 00 FF 
12528     90 64 86 F1 | 	sub	objptr, ##2192
1252c     32 97 02 F6 | 	mov	arg03, objptr
12530     4F 00 00 FF 
12534     D4 64 86 F1 | 	sub	objptr, ##40660
12538     56 99 02 F6 | 	mov	arg04, local04
1253c     58 93 02 F6 | 	mov	arg01, local06
12540     01 9A 06 F6 | 	mov	arg05, #1
12544     EC 32 B1 FD | 	call	#__system___basic_get
12548     3D BB 02 F6 | 	mov	local11, result1
1254c                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
1254c     00 04 00 FF 
12550     00 AE 56 F2 | 	cmps	local05, ##524288 wc
12554     48 00 90 3D |  if_ae	jmp	#LR__1537
12558     00 B2 06 F6 | 	mov	local07, #0
1255c     5D BD 02 F6 | 	mov	local12, local11
12560                 | LR__1536
12560     5E B3 52 F2 | 	cmps	local07, local12 wc
12564     80 00 90 3D |  if_ae	jmp	#LR__1540
12568     57 93 02 F6 | 	mov	arg01, local05
1256c     5B B5 02 F6 | 	mov	local08, local09
12570     0A B4 66 F0 | 	shl	local08, #10
12574     5A 93 02 F1 | 	add	arg01, local08
12578     59 93 02 F1 | 	add	arg01, local07
1257c     59 A9 02 F6 | 	mov	local02, local07
12580     32 B5 02 F6 | 	mov	local08, objptr
12584     4F 00 00 FF 
12588     D4 B4 06 F1 | 	add	local08, ##40660
1258c     5A A9 02 F1 | 	add	local02, local08
12590     54 95 C2 FA | 	rdbyte	arg02, local02
12594     49 95 42 FC | 	wrbyte	arg02, arg01
12598     01 B2 06 F1 | 	add	local07, #1
1259c     C0 FF 9F FD | 	jmp	#LR__1536
125a0                 | LR__1537
125a0     00 B2 06 F6 | 	mov	local07, #0
125a4     5D BF 02 F6 | 	mov	local13, local11
125a8                 | LR__1538
125a8     5F B3 52 F2 | 	cmps	local07, local13 wc
125ac     38 00 90 3D |  if_ae	jmp	#LR__1539
125b0     57 93 02 F6 | 	mov	arg01, local05
125b4     5B BD 02 F6 | 	mov	local12, local09
125b8     0A BC 66 F0 | 	shl	local12, #10
125bc     5E 93 02 F1 | 	add	arg01, local12
125c0     59 93 02 F1 | 	add	arg01, local07
125c4     59 A9 02 F6 | 	mov	local02, local07
125c8     32 BD 02 F6 | 	mov	local12, objptr
125cc     4F 00 00 FF 
125d0     D4 BC 06 F1 | 	add	local12, ##40660
125d4     5E A9 02 F1 | 	add	local02, local12
125d8     54 95 C2 FA | 	rdbyte	arg02, local02
125dc     88 EC B0 FD | 	call	#_pspoke
125e0     01 B2 06 F1 | 	add	local07, #1
125e4     C0 FF 9F FD | 	jmp	#LR__1538
125e8                 | LR__1539
125e8                 | LR__1540
125e8     59 BF 02 F6 | 	mov	local13, local07
125ec     02 BE 66 F0 | 	shl	local13, #2
125f0     51 00 00 FF 
125f4     E4 64 06 F1 | 	add	objptr, ##41700
125f8     32 BF 02 F1 | 	add	local13, objptr
125fc     02 B2 66 F0 | 	shl	local07, #2
12600     32 B3 02 F1 | 	add	local07, objptr
12604     59 A7 02 FB | 	rdlong	local01, local07
12608     5D A7 02 F1 | 	add	local01, local11
1260c     5F A7 62 FC | 	wrlong	local01, local13
12610     01 B6 06 F1 | 	add	local09, #1
12614     51 00 00 FF 
12618     E4 64 86 F1 | 	sub	objptr, ##41700
1261c     EC FE 9F FD | 	jmp	#LR__1535
12620                 | LR__1541
12620                 | '   for i=0 to  amount/1024
12620     00 B6 06 F6 | 	mov	local09, #0
12624     56 C1 52 F6 | 	abs	local14, local04 wc
12628     0A C0 46 F0 | 	shr	local14, #10
1262c     60 C1 82 F6 | 	negc	local14, local14
12630     01 C0 06 F1 | 	add	local14, #1
12634                 | LR__1542
12634     60 B7 52 F2 | 	cmps	local09, local14 wc
12638     F8 00 90 3D |  if_ae	jmp	#LR__1548
1263c                 | '     get #channel,,block(0),amount,r
1263c     32 97 02 F6 | 	mov	arg03, objptr
12640     4F 00 00 FF 
12644     D4 96 06 F1 | 	add	arg03, ##40660
12648     56 99 02 F6 | 	mov	arg04, local04
1264c     58 93 02 F6 | 	mov	arg01, local06
12650     00 94 06 F6 | 	mov	arg02, #0
12654     01 9A 06 F6 | 	mov	arg05, #1
12658     D8 31 B1 FD | 	call	#__system___basic_get
1265c     3D BB 02 F6 | 	mov	local11, result1
12660                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12660     00 04 00 FF 
12664     00 AE 56 F2 | 	cmps	local05, ##524288 wc
12668     48 00 90 3D |  if_ae	jmp	#LR__1544
1266c     00 B2 06 F6 | 	mov	local07, #0
12670     5D C3 02 F6 | 	mov	local15, local11
12674                 | LR__1543
12674     61 B3 52 F2 | 	cmps	local07, local15 wc
12678     80 00 90 3D |  if_ae	jmp	#LR__1547
1267c     57 93 02 F6 | 	mov	arg01, local05
12680     5B BF 02 F6 | 	mov	local13, local09
12684     0A BE 66 F0 | 	shl	local13, #10
12688     5F 93 02 F1 | 	add	arg01, local13
1268c     59 93 02 F1 | 	add	arg01, local07
12690     59 A9 02 F6 | 	mov	local02, local07
12694     32 BF 02 F6 | 	mov	local13, objptr
12698     4F 00 00 FF 
1269c     D4 BE 06 F1 | 	add	local13, ##40660
126a0     5F A9 02 F1 | 	add	local02, local13
126a4     54 95 C2 FA | 	rdbyte	arg02, local02
126a8     49 95 42 FC | 	wrbyte	arg02, arg01
126ac     01 B2 06 F1 | 	add	local07, #1
126b0     C0 FF 9F FD | 	jmp	#LR__1543
126b4                 | LR__1544
126b4     00 B2 06 F6 | 	mov	local07, #0
126b8     5D C5 02 F6 | 	mov	local16, local11
126bc                 | LR__1545
126bc     62 B3 52 F2 | 	cmps	local07, local16 wc
126c0     38 00 90 3D |  if_ae	jmp	#LR__1546
126c4     57 93 02 F6 | 	mov	arg01, local05
126c8     5B C3 02 F6 | 	mov	local15, local09
126cc     0A C2 66 F0 | 	shl	local15, #10
126d0     61 93 02 F1 | 	add	arg01, local15
126d4     59 93 02 F1 | 	add	arg01, local07
126d8     59 A9 02 F6 | 	mov	local02, local07
126dc     32 C3 02 F6 | 	mov	local15, objptr
126e0     4F 00 00 FF 
126e4     D4 C2 06 F1 | 	add	local15, ##40660
126e8     61 A9 02 F1 | 	add	local02, local15
126ec     54 95 C2 FA | 	rdbyte	arg02, local02
126f0     74 EB B0 FD | 	call	#_pspoke
126f4     01 B2 06 F1 | 	add	local07, #1
126f8     C0 FF 9F FD | 	jmp	#LR__1545
126fc                 | LR__1546
126fc                 | LR__1547
126fc     59 C5 02 F6 | 	mov	local16, local07
12700     02 C4 66 F0 | 	shl	local16, #2
12704     51 00 00 FF 
12708     E4 64 06 F1 | 	add	objptr, ##41700
1270c     32 C5 02 F1 | 	add	local16, objptr
12710     02 B2 66 F0 | 	shl	local07, #2
12714     32 B3 02 F1 | 	add	local07, objptr
12718     59 A7 02 FB | 	rdlong	local01, local07
1271c     5D A7 02 F1 | 	add	local01, local11
12720     62 A7 62 FC | 	wrlong	local01, local16
12724     01 B6 06 F1 | 	add	local09, #1
12728     51 00 00 FF 
1272c     E4 64 86 F1 | 	sub	objptr, ##41700
12730     00 FF 9F FD | 	jmp	#LR__1542
12734                 | LR__1548
12734                 | LR__1549
12734     E7 F0 03 F6 | 	mov	ptra, fp
12738     F2 00 A0 FD | 	call	#popregs_
1273c                 | _do_get_ret
1273c     2D 00 64 FD | 	ret
12740                 | 
12740                 | ' 
12740                 | ' '-------------------- getcolor
12740                 | ' 
12740                 | ' sub do_getcolor
12740                 | _do_getcolor
12740     00 CA 05 F6 | 	mov	COUNT_, #0
12744     E8 00 A0 FD | 	call	#pushregs_
12748     10 F0 07 F1 | 	add	ptra, #16
1274c     4B 00 00 FF 
12750     A0 64 06 F1 | 	add	objptr, ##38560
12754     32 97 02 FB | 	rdlong	arg03, objptr
12758     4B 95 02 F6 | 	mov	arg02, arg03
1275c     01 94 66 F0 | 	shl	arg02, #1
12760     4B 95 02 F1 | 	add	arg02, arg03
12764     02 94 66 F0 | 	shl	arg02, #2
12768     03 00 00 FF 
1276c     04 64 86 F1 | 	sub	objptr, ##1540
12770     32 95 02 F1 | 	add	arg02, objptr
12774     4A 97 02 FB | 	rdlong	arg03, arg02
12778                 | ' 
12778                 | ' numpar=compiledline(lineptr_e).result.uresult
12778                 | ' if numpar>1 orelse numpar=0 then print "getcolor "; : printerror(39) : return
12778     02 96 16 F2 | 	cmp	arg03, #2 wc
1277c     48 00 00 FF 
12780     9C 64 86 F1 | 	sub	objptr, ##37020
12784     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
12788     40 00 90 4D |  if_c_and_nz	jmp	#LR__1550
1278c     00 92 06 F6 | 	mov	arg01, #0
12790     A8 77 B1 FD | 	call	#__system___getiolock_0622
12794     3D 93 02 F6 | 	mov	arg01, result1
12798     1C 22 B1 FD | 	call	#__system___lockmem
1279c     97 01 00 FF 
127a0     24 95 06 F6 | 	mov	arg02, ##@LR__6016
127a4     00 92 06 F6 | 	mov	arg01, #0
127a8     00 96 06 F6 | 	mov	arg03, #0
127ac     FC 2E B1 FD | 	call	#__system___basic_print_string
127b0     00 92 06 F6 | 	mov	arg01, #0
127b4     84 77 B1 FD | 	call	#__system___getiolock_0622
127b8     3D 01 68 FC | 	wrlong	#0, result1
127bc     27 92 06 F6 | 	mov	arg01, #39
127c0     00 94 06 F6 | 	mov	arg02, #0
127c4     74 E8 B0 FD | 	call	#_printerror
127c8     60 00 90 FD | 	jmp	#LR__1551
127cc                 | LR__1550
127cc     B8 AE BF FD | 	call	#_pop
127d0     E7 7A 62 FC | 	wrlong	result1, fp
127d4     04 CE 05 F1 | 	add	fp, #4
127d8     E7 7C 62 FC | 	wrlong	result2, fp
127dc     04 CE 05 F1 | 	add	fp, #4
127e0     E7 7E 62 FC | 	wrlong	result3, fp
127e4     08 CE 85 F1 | 	sub	fp, #8
127e8     E7 92 02 F6 | 	mov	arg01, fp
127ec     74 B0 BF FD | 	call	#_converttoint
127f0     3D 93 02 F6 | 	mov	arg01, result1
127f4                 | ' 
127f4                 | ' return long[palette_ptr+4*color]
127f4     1C 64 06 F1 | 	add	objptr, #28
127f8     32 7B 02 FB | 	rdlong	result1, objptr
127fc     1C 64 86 F1 | 	sub	objptr, #28
12800     02 92 66 F0 | 	shl	arg01, #2
12804     49 7B 02 F1 | 	add	result1, arg01
12808     3D 7B 02 FB | 	rdlong	result1, result1
1280c     08 7A C6 F0 | 	sar	result1, #8
12810     F8 7A 06 F4 | 	bitl	result1, #248
12814     E7 7A 62 FC | 	wrlong	result1, fp
12818     08 CE 05 F1 | 	add	fp, #8
1281c     E7 3A 68 FC | 	wrlong	#29, fp
12820     08 CE 85 F1 | 	sub	fp, #8
12824     E7 92 02 F6 | 	mov	arg01, fp
12828     EC AE BF FD | 	call	#_push
1282c                 | LR__1551
1282c     E7 F0 03 F6 | 	mov	ptra, fp
12830     F2 00 A0 FD | 	call	#popregs_
12834                 | _do_getcolor_ret
12834     2D 00 64 FD | 	ret
12838                 | 
12838                 | ' 
12838                 | ' '-------------------- getenvsustain
12838                 | ' 
12838                 | ' sub do_getenvsustain
12838                 | _do_getenvsustain
12838     00 CA 05 F6 | 	mov	COUNT_, #0
1283c     E8 00 A0 FD | 	call	#pushregs_
12840     10 F0 07 F1 | 	add	ptra, #16
12844     4B 00 00 FF 
12848     A0 64 06 F1 | 	add	objptr, ##38560
1284c     32 97 02 FB | 	rdlong	arg03, objptr
12850     4B 95 02 F6 | 	mov	arg02, arg03
12854     01 94 66 F0 | 	shl	arg02, #1
12858     4B 95 02 F1 | 	add	arg02, arg03
1285c     02 94 66 F0 | 	shl	arg02, #2
12860     03 00 00 FF 
12864     04 64 86 F1 | 	sub	objptr, ##1540
12868     32 95 02 F1 | 	add	arg02, objptr
1286c     4A 97 02 FB | 	rdlong	arg03, arg02
12870                 | ' 
12870                 | ' numpar=compiledline(lineptr_e).result.uresult
12870                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12870     02 96 16 F2 | 	cmp	arg03, #2 wc
12874     48 00 00 FF 
12878     9C 64 86 F1 | 	sub	objptr, ##37020
1287c     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
12880     40 00 90 4D |  if_c_and_nz	jmp	#LR__1560
12884     00 92 06 F6 | 	mov	arg01, #0
12888     B0 76 B1 FD | 	call	#__system___getiolock_0622
1288c     3D 93 02 F6 | 	mov	arg01, result1
12890     24 21 B1 FD | 	call	#__system___lockmem
12894     97 01 00 FF 
12898     2E 95 06 F6 | 	mov	arg02, ##@LR__6017
1289c     00 92 06 F6 | 	mov	arg01, #0
128a0     00 96 06 F6 | 	mov	arg03, #0
128a4     04 2E B1 FD | 	call	#__system___basic_print_string
128a8     00 92 06 F6 | 	mov	arg01, #0
128ac     8C 76 B1 FD | 	call	#__system___getiolock_0622
128b0     3D 01 68 FC | 	wrlong	#0, result1
128b4     27 92 06 F6 | 	mov	arg01, #39
128b8     00 94 06 F6 | 	mov	arg02, #0
128bc     7C E7 B0 FD | 	call	#_printerror
128c0     60 00 90 FD | 	jmp	#LR__1561
128c4                 | LR__1560
128c4     C0 AD BF FD | 	call	#_pop
128c8     3D 97 02 F6 | 	mov	arg03, result1
128cc     3E 95 02 F6 | 	mov	arg02, result2
128d0     E7 96 62 FC | 	wrlong	arg03, fp
128d4     04 CE 05 F1 | 	add	fp, #4
128d8     E7 94 62 FC | 	wrlong	arg02, fp
128dc     04 CE 05 F1 | 	add	fp, #4
128e0     E7 7E 62 FC | 	wrlong	result3, fp
128e4     08 CE 85 F1 | 	sub	fp, #8
128e8     E7 92 02 F6 | 	mov	arg01, fp
128ec     74 AF BF FD | 	call	#_converttoint
128f0     3D 97 02 F6 | 	mov	arg03, result1
128f4     01 96 66 F0 | 	shl	arg03, #1
128f8     32 95 02 F6 | 	mov	arg02, objptr
128fc     53 00 00 FF 
12900     0C 95 06 F1 | 	add	arg02, ##42764
12904     4A 97 02 F1 | 	add	arg03, arg02
12908     4B 7F E2 FA | 	rdword	result3, arg03
1290c     E7 7E 62 FC | 	wrlong	result3, fp
12910     08 CE 05 F1 | 	add	fp, #8
12914     E7 38 68 FC | 	wrlong	#28, fp
12918     08 CE 85 F1 | 	sub	fp, #8
1291c     E7 92 02 F6 | 	mov	arg01, fp
12920     F4 AD BF FD | 	call	#_push
12924                 | LR__1561
12924     E7 F0 03 F6 | 	mov	ptra, fp
12928     F2 00 A0 FD | 	call	#popregs_
1292c                 | _do_getenvsustain_ret
1292c     2D 00 64 FD | 	ret
12930                 | 
12930                 | ' 
12930                 | ' '-------------------- getnotevalue
12930                 | ' 
12930                 | ' sub do_getnotevalue
12930                 | _do_getnotevalue
12930     02 CA 05 F6 | 	mov	COUNT_, #2
12934     E8 00 A0 FD | 	call	#pushregs_
12938     1C F0 07 F1 | 	add	ptra, #28
1293c     48 AD BF FD | 	call	#_pop
12940     3F 95 02 F6 | 	mov	arg02, result3
12944     10 CE 05 F1 | 	add	fp, #16
12948     E7 7A 62 FC | 	wrlong	result1, fp
1294c     04 CE 05 F1 | 	add	fp, #4
12950     E7 7C 62 FC | 	wrlong	result2, fp
12954     04 CE 05 F1 | 	add	fp, #4
12958     E7 94 62 FC | 	wrlong	arg02, fp
1295c     08 CE 85 F1 | 	sub	fp, #8
12960     E7 92 02 F6 | 	mov	arg01, fp
12964     10 CE 85 F1 | 	sub	fp, #16
12968     F8 AE BF FD | 	call	#_converttoint
1296c     3D 93 52 F6 | 	abs	arg01, result1 wc
12970     0C 92 16 FD | 	qdiv	arg01, #12
12974     32 93 02 F6 | 	mov	arg01, objptr
12978     15 00 00 FF 
1297c     D8 92 06 F1 | 	add	arg01, ##10968
12980     19 7C 62 FD | 	getqy	result2
12984     3E 7D 82 F6 | 	negc	result2, result2
12988     3D 7B 52 F6 | 	abs	result1, result1 wc
1298c     0C 7A 16 FD | 	qdiv	result1, #12
12990     02 7C 66 F0 | 	shl	result2, #2
12994     49 7D 02 F1 | 	add	result2, arg01
12998     3E A7 02 FB | 	rdlong	local01, result2
1299c     18 94 62 FD | 	getqx	arg02
129a0     4A 93 82 F6 | 	negc	arg01, arg02
129a4     49 93 52 F6 | 	abs	arg01, arg01 wc
129a8     1F A8 C6 C9 |  if_b	decod	local02, #31
129ac     00 A8 06 36 |  if_ae	mov	local02, #0
129b0     D0 42 B1 FD | 	call	#__system___float_fromuns
129b4     54 7B 62 F5 | 	xor	result1, local02
129b8     3D 95 02 F6 | 	mov	arg02, result1
129bc     1E 92 C6 F9 | 	decod	arg01, #30
129c0     DC 55 B1 FD | 	call	#__system____builtin_powf
129c4     3D 93 02 F6 | 	mov	arg01, result1
129c8     53 95 02 F6 | 	mov	arg02, local01
129cc     B8 46 B1 FD | 	call	#__system___float_mul
129d0     3D A7 02 F6 | 	mov	local01, result1
129d4     10 CE 05 F1 | 	add	fp, #16
129d8     E7 A6 62 FC | 	wrlong	local01, fp
129dc     08 CE 05 F1 | 	add	fp, #8
129e0     E7 3C 68 FC | 	wrlong	#30, fp
129e4     08 CE 85 F1 | 	sub	fp, #8
129e8     E7 92 02 F6 | 	mov	arg01, fp
129ec     10 CE 85 F1 | 	sub	fp, #16
129f0     24 AD BF FD | 	call	#_push
129f4     E7 F0 03 F6 | 	mov	ptra, fp
129f8     F2 00 A0 FD | 	call	#popregs_
129fc                 | _do_getnotevalue_ret
129fc     2D 00 64 FD | 	ret
12a00                 | 
12a00                 | ' 
12a00                 | ' '-------------------- getpixel
12a00                 | ' 
12a00                 | ' sub do_getpixel
12a00                 | _do_getpixel
12a00     01 CA 05 F6 | 	mov	COUNT_, #1
12a04     E8 00 A0 FD | 	call	#pushregs_
12a08     24 F0 07 F1 | 	add	ptra, #36
12a0c     4B 00 00 FF 
12a10     A0 64 06 F1 | 	add	objptr, ##38560
12a14     32 97 02 FB | 	rdlong	arg03, objptr
12a18     4B 95 02 F6 | 	mov	arg02, arg03
12a1c     01 94 66 F0 | 	shl	arg02, #1
12a20     4B 95 02 F1 | 	add	arg02, arg03
12a24     02 94 66 F0 | 	shl	arg02, #2
12a28     03 00 00 FF 
12a2c     04 64 86 F1 | 	sub	objptr, ##1540
12a30     32 95 02 F1 | 	add	arg02, objptr
12a34     4A 97 02 FB | 	rdlong	arg03, arg02
12a38                 | ' 
12a38                 | ' numpar=compiledline(lineptr_e).result.uresult
12a38                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
12a38     02 96 0E F2 | 	cmp	arg03, #2 wz
12a3c     48 00 00 FF 
12a40     9C 64 86 F1 | 	sub	objptr, ##37020
12a44     40 00 90 AD |  if_e	jmp	#LR__1570
12a48     00 92 06 F6 | 	mov	arg01, #0
12a4c     EC 74 B1 FD | 	call	#__system___getiolock_0622
12a50     3D 93 02 F6 | 	mov	arg01, result1
12a54     60 1F B1 FD | 	call	#__system___lockmem
12a58     97 01 00 FF 
12a5c     3E 95 06 F6 | 	mov	arg02, ##@LR__6018
12a60     00 92 06 F6 | 	mov	arg01, #0
12a64     00 96 06 F6 | 	mov	arg03, #0
12a68     40 2C B1 FD | 	call	#__system___basic_print_string
12a6c     00 92 06 F6 | 	mov	arg01, #0
12a70     C8 74 B1 FD | 	call	#__system___getiolock_0622
12a74     3D 01 68 FC | 	wrlong	#0, result1
12a78     27 92 06 F6 | 	mov	arg01, #39
12a7c     00 94 06 F6 | 	mov	arg02, #0
12a80     B8 E5 B0 FD | 	call	#_printerror
12a84     98 00 90 FD | 	jmp	#LR__1571
12a88                 | LR__1570
12a88     FC AB BF FD | 	call	#_pop
12a8c     3D 97 02 F6 | 	mov	arg03, result1
12a90     3E 95 02 F6 | 	mov	arg02, result2
12a94     3F 93 02 F6 | 	mov	arg01, result3
12a98     0C CE 05 F1 | 	add	fp, #12
12a9c     E7 96 62 FC | 	wrlong	arg03, fp
12aa0     04 CE 05 F1 | 	add	fp, #4
12aa4     E7 94 62 FC | 	wrlong	arg02, fp
12aa8     04 CE 05 F1 | 	add	fp, #4
12aac     E7 92 62 FC | 	wrlong	arg01, fp
12ab0     14 CE 85 F1 | 	sub	fp, #20
12ab4     D0 AB BF FD | 	call	#_pop
12ab8     3F 97 02 F6 | 	mov	arg03, result3
12abc     E7 7A 62 FC | 	wrlong	result1, fp
12ac0     04 CE 05 F1 | 	add	fp, #4
12ac4     E7 7C 62 FC | 	wrlong	result2, fp
12ac8     04 CE 05 F1 | 	add	fp, #4
12acc     E7 96 62 FC | 	wrlong	arg03, fp
12ad0     08 CE 85 F1 | 	sub	fp, #8
12ad4     E7 92 02 F6 | 	mov	arg01, fp
12ad8     88 AD BF FD | 	call	#_converttoint
12adc     3D A7 02 F6 | 	mov	local01, result1
12ae0     E7 92 02 F6 | 	mov	arg01, fp
12ae4     0C 92 06 F1 | 	add	arg01, #12
12ae8     78 AD BF FD | 	call	#_converttoint
12aec     3D 97 02 F6 | 	mov	arg03, result1
12af0     32 93 02 FB | 	rdlong	arg01, objptr
12af4     53 93 02 F1 | 	add	arg01, local01
12af8     0A 96 66 F0 | 	shl	arg03, #10
12afc     4B 93 02 F1 | 	add	arg01, arg03
12b00     AC E7 B0 FD | 	call	#_pspeek
12b04     3D 7B E2 F8 | 	getbyte	result1, result1, #0
12b08     E7 7A 62 FC | 	wrlong	result1, fp
12b0c     08 CE 05 F1 | 	add	fp, #8
12b10     E7 3A 68 FC | 	wrlong	#29, fp
12b14     08 CE 85 F1 | 	sub	fp, #8
12b18     E7 92 02 F6 | 	mov	arg01, fp
12b1c     F8 AB BF FD | 	call	#_push
12b20                 | LR__1571
12b20     E7 F0 03 F6 | 	mov	ptra, fp
12b24     F2 00 A0 FD | 	call	#popregs_
12b28                 | _do_getpixel_ret
12b28     2D 00 64 FD | 	ret
12b2c                 | 
12b2c                 | ' 
12b2c                 | ' 
12b2c                 | ' sub do_getrealfreq
12b2c                 | _do_getrealfreq
12b2c     00 CA 05 F6 | 	mov	COUNT_, #0
12b30     E8 00 A0 FD | 	call	#pushregs_
12b34     14 F0 07 F1 | 	add	ptra, #20
12b38     4B 00 00 FF 
12b3c     A0 64 06 F1 | 	add	objptr, ##38560
12b40     32 97 02 FB | 	rdlong	arg03, objptr
12b44     4B 95 02 F6 | 	mov	arg02, arg03
12b48     01 94 66 F0 | 	shl	arg02, #1
12b4c     4B 95 02 F1 | 	add	arg02, arg03
12b50     02 94 66 F0 | 	shl	arg02, #2
12b54     03 00 00 FF 
12b58     04 64 86 F1 | 	sub	objptr, ##1540
12b5c     32 95 02 F1 | 	add	arg02, objptr
12b60     4A 97 02 FB | 	rdlong	arg03, arg02
12b64                 | ' 
12b64                 | ' numpar=compiledline(lineptr_e).result.uresult
12b64                 | ' if numpar<>1 then print "getrealfreq: "; : printerror(39) : return
12b64     01 96 0E F2 | 	cmp	arg03, #1 wz
12b68     48 00 00 FF 
12b6c     9C 64 86 F1 | 	sub	objptr, ##37020
12b70     40 00 90 AD |  if_e	jmp	#LR__1580
12b74     00 92 06 F6 | 	mov	arg01, #0
12b78     C0 73 B1 FD | 	call	#__system___getiolock_0622
12b7c     3D 93 02 F6 | 	mov	arg01, result1
12b80     34 1E B1 FD | 	call	#__system___lockmem
12b84     97 01 00 FF 
12b88     49 95 06 F6 | 	mov	arg02, ##@LR__6019
12b8c     00 92 06 F6 | 	mov	arg01, #0
12b90     00 96 06 F6 | 	mov	arg03, #0
12b94     14 2B B1 FD | 	call	#__system___basic_print_string
12b98     00 92 06 F6 | 	mov	arg01, #0
12b9c     9C 73 B1 FD | 	call	#__system___getiolock_0622
12ba0     3D 01 68 FC | 	wrlong	#0, result1
12ba4     27 92 06 F6 | 	mov	arg01, #39
12ba8     00 94 06 F6 | 	mov	arg02, #0
12bac     8C E4 B0 FD | 	call	#_printerror
12bb0     78 00 90 FD | 	jmp	#LR__1581
12bb4                 | LR__1580
12bb4     D0 AA BF FD | 	call	#_pop
12bb8     3D 97 02 F6 | 	mov	arg03, result1
12bbc     04 CE 05 F1 | 	add	fp, #4
12bc0     E7 96 62 FC | 	wrlong	arg03, fp
12bc4     04 CE 05 F1 | 	add	fp, #4
12bc8     E7 7C 62 FC | 	wrlong	result2, fp
12bcc     04 CE 05 F1 | 	add	fp, #4
12bd0     E7 7E 62 FC | 	wrlong	result3, fp
12bd4     08 CE 85 F1 | 	sub	fp, #8
12bd8     E7 92 02 F6 | 	mov	arg01, fp
12bdc     04 CE 85 F1 | 	sub	fp, #4
12be0     80 AC BF FD | 	call	#_converttoint
12be4     3D 95 02 F6 | 	mov	arg02, result1
12be8     03 94 66 F0 | 	shl	arg02, #3
12bec     3D 95 82 F1 | 	sub	arg02, result1
12bf0     02 94 66 F0 | 	shl	arg02, #2
12bf4     32 97 02 F6 | 	mov	arg03, objptr
12bf8     15 00 00 FF 
12bfc     38 97 06 F1 | 	add	arg03, ##11064
12c00     4B 95 02 F1 | 	add	arg02, arg03
12c04     18 94 06 F1 | 	add	arg02, #24
12c08     4A 97 02 FB | 	rdlong	arg03, arg02
12c0c     04 CE 05 F1 | 	add	fp, #4
12c10     E7 96 62 FC | 	wrlong	arg03, fp
12c14     08 CE 05 F1 | 	add	fp, #8
12c18     E7 3C 68 FC | 	wrlong	#30, fp
12c1c     08 CE 85 F1 | 	sub	fp, #8
12c20     E7 92 02 F6 | 	mov	arg01, fp
12c24     04 CE 85 F1 | 	sub	fp, #4
12c28     EC AA BF FD | 	call	#_push
12c2c                 | LR__1581
12c2c     E7 F0 03 F6 | 	mov	ptra, fp
12c30     F2 00 A0 FD | 	call	#popregs_
12c34                 | _do_getrealfreq_ret
12c34     2D 00 64 FD | 	ret
12c38                 | 
12c38                 | ' 
12c38                 | ' 
12c38                 | ' '-------------------- gettime
12c38                 | ' 
12c38                 | ' sub do_gettime
12c38                 | _do_gettime
12c38     02 CA 05 F6 | 	mov	COUNT_, #2
12c3c     E8 00 A0 FD | 	call	#pushregs_
12c40     14 F0 07 F1 | 	add	ptra, #20
12c44                 | ' 
12c44                 | ' const asm 
12c44     1A A6 72 FD | 	getct	local01 wc
12c48     1A A8 62 FD | 	getct	local02
12c4c                 | ' return hi1, lo1
12c4c     54 7D 02 F6 | 	mov	result2, local02
12c50     53 7B 02 F6 | 	mov	result1, local01
12c54     10 CE 05 F1 | 	add	fp, #16
12c58     E7 3A 68 FC | 	wrlong	#29, fp
12c5c     08 CE 85 F1 | 	sub	fp, #8
12c60     E7 7C 62 FC | 	wrlong	result2, fp
12c64     04 CE 05 F1 | 	add	fp, #4
12c68     E7 7A 62 FC | 	wrlong	result1, fp
12c6c     04 CE 85 F1 | 	sub	fp, #4
12c70     E7 92 02 F6 | 	mov	arg01, fp
12c74     08 CE 85 F1 | 	sub	fp, #8
12c78     9C AA BF FD | 	call	#_push
12c7c     E7 F0 03 F6 | 	mov	ptra, fp
12c80     F2 00 A0 FD | 	call	#popregs_
12c84                 | _do_gettime_ret
12c84     2D 00 64 FD | 	ret
12c88                 | 
12c88                 | ' 
12c88                 | ' '-------------------- gosub
12c88                 | ' 
12c88                 | ' sub do_gosub()
12c88                 | _do_gosub
12c88     51 00 00 FF 
12c8c     54 65 06 F1 | 	add	objptr, ##41812
12c90     32 81 02 FB | 	rdlong	_var01, objptr
12c94     01 80 06 F1 | 	add	_var01, #1
12c98     32 81 62 FC | 	wrlong	_var01, objptr
12c9c                 | ' gosubtop+=1
12c9c                 | ' if compiledline(lineptr_e+1).result_type=token_end then
12c9c     06 00 00 FF 
12ca0     B4 64 86 F1 | 	sub	objptr, ##3252
12ca4     32 81 02 FB | 	rdlong	_var01, objptr
12ca8     01 80 06 F1 | 	add	_var01, #1
12cac     40 83 02 F6 | 	mov	_var02, _var01
12cb0     01 82 66 F0 | 	shl	_var02, #1
12cb4     40 83 02 F1 | 	add	_var02, _var01
12cb8     02 82 66 F0 | 	shl	_var02, #2
12cbc     03 00 00 FF 
12cc0     04 64 86 F1 | 	sub	objptr, ##1540
12cc4     32 83 02 F1 | 	add	_var02, objptr
12cc8     08 82 06 F1 | 	add	_var02, #8
12ccc     41 83 02 FB | 	rdlong	_var02, _var02
12cd0     FE 83 0E F2 | 	cmp	_var02, #510 wz
12cd4     48 00 00 FF 
12cd8     9C 64 86 F1 | 	sub	objptr, ##37020
12cdc     58 00 90 5D |  if_ne	jmp	#LR__1590
12ce0     51 00 00 FF 
12ce4     54 65 06 F1 | 	add	objptr, ##41812
12ce8     32 83 02 FB | 	rdlong	_var02, objptr
12cec     03 82 66 F0 | 	shl	_var02, #3
12cf0     03 00 00 FF 
12cf4     88 65 86 F1 | 	sub	objptr, ##1928
12cf8     32 83 02 F1 | 	add	_var02, objptr
12cfc     03 00 00 FF 
12d00     0C 65 06 F1 | 	add	objptr, ##1804
12d04     32 81 02 FB | 	rdlong	_var01, objptr
12d08     41 81 62 FC | 	wrlong	_var01, _var02
12d0c     7C 64 06 F1 | 	add	objptr, #124
12d10     32 83 02 FB | 	rdlong	_var02, objptr
12d14     03 82 66 F0 | 	shl	_var02, #3
12d18     03 00 00 FF 
12d1c     88 65 86 F1 | 	sub	objptr, ##1928
12d20     32 83 02 F1 | 	add	_var02, objptr
12d24     04 82 06 F1 | 	add	_var02, #4
12d28     41 01 68 FC | 	wrlong	#0, _var02
12d2c     4D 00 00 FF 
12d30     CC 65 86 F1 | 	sub	objptr, ##39884
12d34     64 00 90 FD | 	jmp	#LR__1591
12d38                 | LR__1590
12d38     51 00 00 FF 
12d3c     54 65 06 F1 | 	add	objptr, ##41812
12d40     32 83 02 FB | 	rdlong	_var02, objptr
12d44     03 82 66 F0 | 	shl	_var02, #3
12d48     03 00 00 FF 
12d4c     88 65 86 F1 | 	sub	objptr, ##1928
12d50     32 83 02 F1 | 	add	_var02, objptr
12d54     03 00 00 FF 
12d58     14 65 06 F1 | 	add	objptr, ##1812
12d5c     32 81 02 FB | 	rdlong	_var01, objptr
12d60     41 81 62 FC | 	wrlong	_var01, _var02
12d64     74 64 06 F1 | 	add	objptr, #116
12d68     32 83 02 FB | 	rdlong	_var02, objptr
12d6c     03 82 66 F0 | 	shl	_var02, #3
12d70     03 00 00 FF 
12d74     88 65 86 F1 | 	sub	objptr, ##1928
12d78     32 83 02 F1 | 	add	_var02, objptr
12d7c     02 00 00 FF 
12d80     2C 65 86 F1 | 	sub	objptr, ##1324
12d84     32 81 02 FB | 	rdlong	_var01, objptr
12d88     4B 00 00 FF 
12d8c     A0 64 86 F1 | 	sub	objptr, ##38560
12d90     02 80 06 F1 | 	add	_var01, #2
12d94     04 82 06 F1 | 	add	_var02, #4
12d98     41 81 62 FC | 	wrlong	_var01, _var02
12d9c                 | LR__1591
12d9c                 | _do_gosub_ret
12d9c     2D 00 64 FD | 	ret
12da0                 | 
12da0                 | ' 
12da0                 | ' '--------------------- goto
12da0                 | ' 
12da0                 | ' '------- fast goto
12da0                 | ' 
12da0                 | ' sub do_fast_goto
12da0                 | _do_fast_goto
12da0     02 CA 05 F6 | 	mov	COUNT_, #2
12da4     E8 00 A0 FD | 	call	#pushregs_
12da8                 | _do_fast_goto_enter
12da8     4B 00 00 FF 
12dac     A0 64 06 F1 | 	add	objptr, ##38560
12db0     32 93 02 FB | 	rdlong	arg01, objptr
12db4     49 A7 02 F6 | 	mov	local01, arg01
12db8     01 A6 66 F0 | 	shl	local01, #1
12dbc     49 A7 02 F1 | 	add	local01, arg01
12dc0     02 A6 66 F0 | 	shl	local01, #2
12dc4     03 00 00 FF 
12dc8     04 64 86 F1 | 	sub	objptr, ##1540
12dcc     32 A7 02 F1 | 	add	local01, objptr
12dd0     53 A9 02 FB | 	rdlong	local02, local01
12dd4     54 93 02 F6 | 	mov	arg01, local02
12dd8     48 00 00 FF 
12ddc     9C 64 86 F1 | 	sub	objptr, ##37020
12de0     14 E5 B0 FD | 	call	#_pslpeek
12de4     3D 93 02 F6 | 	mov	arg01, result1
12de8                 | ' 
12de8                 | ' testptr=compiledline(lineptr_e).result.uresult
12de8                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
12de8                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
12de8     4B 00 00 FF 
12dec     A0 64 06 F1 | 	add	objptr, ##38560
12df0     32 7B 02 FB | 	rdlong	result1, objptr
12df4     3D A7 02 F6 | 	mov	local01, result1
12df8     01 A6 66 F0 | 	shl	local01, #1
12dfc     3D A7 02 F1 | 	add	local01, result1
12e00     02 A6 66 F0 | 	shl	local01, #2
12e04     03 00 00 FF 
12e08     04 64 86 F1 | 	sub	objptr, ##1540
12e0c     32 A7 02 F1 | 	add	local01, objptr
12e10     04 A6 06 F1 | 	add	local01, #4
12e14     53 A7 02 FB | 	rdlong	local01, local01
12e18     53 93 0A F2 | 	cmp	arg01, local01 wz
12e1c     48 00 00 FF 
12e20     9C 64 86 F1 | 	sub	objptr, ##37020
12e24     58 00 90 5D |  if_ne	jmp	#LR__1600
12e28     51 00 00 FF 
12e2c     D8 64 06 F1 | 	add	objptr, ##41688
12e30     32 A9 62 FC | 	wrlong	local02, objptr
12e34     06 00 00 FF 
12e38     3C 64 86 F1 | 	sub	objptr, ##3132
12e3c     32 A9 02 FB | 	rdlong	local02, objptr
12e40     01 A8 86 F1 | 	sub	local02, #1
12e44     04 64 06 F1 | 	add	objptr, #4
12e48     32 A9 62 FC | 	wrlong	local02, objptr
12e4c                 | '   runptr=testptr
12e4c                 | '   lineptr_e=lineptr-1
12e4c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
12e4c     06 00 00 FF 
12e50     84 64 06 F1 | 	add	objptr, ##3204
12e54     32 A9 02 FB | 	rdlong	local02, objptr
12e58     51 00 00 FF 
12e5c     24 65 86 F1 | 	sub	objptr, ##41764
12e60     FF FF 3F FF 
12e64     FF A9 0E F2 | 	cmp	local02, ##2147483647 wz
12e68     51 00 00 AF 
12e6c     24 65 06 A1 |  if_e	add	objptr, ##41764
12e70     32 01 68 AC |  if_e	wrlong	#0, objptr
12e74     51 00 00 AF 
12e78     24 65 86 A1 |  if_e	sub	objptr, ##41764
12e7c     04 00 90 FD | 	jmp	#LR__1601
12e80                 | LR__1600
12e80     0C 00 B0 FD | 	call	#_do_find_goto
12e84                 | LR__1601
12e84     E7 F0 03 F6 | 	mov	ptra, fp
12e88     F2 00 A0 FD | 	call	#popregs_
12e8c                 | _do_fast_goto_ret
12e8c     2D 00 64 FD | 	ret
12e90                 | 
12e90                 | ' 
12e90                 | ' '------- find goto  
12e90                 | ' 
12e90                 | ' sub do_find_goto
12e90                 | _do_find_goto
12e90     06 CA 05 F6 | 	mov	COUNT_, #6
12e94     E8 00 A0 FD | 	call	#pushregs_
12e98     24 F0 07 F1 | 	add	ptra, #36
12e9c                 | _do_find_goto_enter
12e9c     4B 00 00 FF 
12ea0     A0 64 06 F1 | 	add	objptr, ##38560
12ea4     32 A7 02 FB | 	rdlong	local01, objptr
12ea8     53 A9 02 F6 | 	mov	local02, local01
12eac     01 A8 66 F0 | 	shl	local02, #1
12eb0     53 A9 02 F1 | 	add	local02, local01
12eb4     02 A8 66 F0 | 	shl	local02, #2
12eb8     03 00 00 FF 
12ebc     04 64 86 F1 | 	sub	objptr, ##1540
12ec0     32 AB 02 F6 | 	mov	local03, objptr
12ec4     32 A9 02 F1 | 	add	local02, objptr
12ec8     04 A8 06 F1 | 	add	local02, #4
12ecc     54 AD 02 FB | 	rdlong	local04, local02
12ed0     03 00 00 FF 
12ed4     0C 64 06 F1 | 	add	objptr, ##1548
12ed8     32 AF 02 FB | 	rdlong	local05, objptr
12edc                 | ' 
12edc                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
12edc                 | ' gotoptr=programstart
12edc                 | ' do
12edc     3F 00 00 FF 
12ee0     DC 65 86 F1 | 	sub	objptr, ##32732
12ee4                 | LR__1610
12ee4     E7 92 02 F6 | 	mov	arg01, fp
12ee8     0C 92 06 F1 | 	add	arg01, #12
12eec     57 95 02 F6 | 	mov	arg02, local05
12ef0     18 96 06 F6 | 	mov	arg03, #24
12ef4     A0 0E B1 FD | 	call	#_psram_spin2_read1
12ef8                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12ef8                 | '   if gotoheader(0)<>$FFFFFFFF then
12ef8     0C CE 05 F1 | 	add	fp, #12
12efc     E7 A8 02 FB | 	rdlong	local02, fp
12f00     0C CE 85 F1 | 	sub	fp, #12
12f04     FF FF 7F FF 
12f08     FF A9 0E F2 | 	cmp	local02, ##-1 wz
12f0c     57 B1 02 56 |  if_ne	mov	local06, local05
12f10     20 CE 05 51 |  if_ne	add	fp, #32
12f14     E7 AE 02 5B |  if_ne	rdlong	local05, fp
12f18     20 CE 85 51 |  if_ne	sub	fp, #32
12f1c     20 CE 05 F1 | 	add	fp, #32
12f20     E7 A8 02 FB | 	rdlong	local02, fp
12f24     20 CE 85 F1 | 	sub	fp, #32
12f28     FF FF 3F FF 
12f2c     FF A9 0E F2 | 	cmp	local02, ##2147483647 wz
12f30     0C CE 05 51 |  if_ne	add	fp, #12
12f34     E7 A6 02 5B |  if_ne	rdlong	local01, fp
12f38     0C CE 85 51 |  if_ne	sub	fp, #12
12f3c     FF FF 7F 5F 
12f40     FF A7 0E 52 |  if_ne	cmp	local01, ##-1 wz
12f44     0C CE 05 51 |  if_ne	add	fp, #12
12f48     53 AB 02 56 |  if_ne	mov	local03, local01
12f4c     0C CE 85 51 |  if_ne	sub	fp, #12
12f50     56 AB 0A 52 |  if_ne	cmp	local03, local04 wz
12f54     8C FF 9F 5D |  if_ne	jmp	#LR__1610
12f58     0B 00 00 FF 
12f5c     CC 64 86 F1 | 	sub	objptr, ##5836
12f60                 | ' 
12f60                 | ' if gotoheader(0)=gotoline then
12f60     0C CE 05 F1 | 	add	fp, #12
12f64     E7 AE 02 FB | 	rdlong	local05, fp
12f68     0C CE 85 F1 | 	sub	fp, #12
12f6c     56 AF 0A F2 | 	cmp	local05, local04 wz
12f70     CC 00 90 5D |  if_ne	jmp	#LR__1611
12f74     4B 00 00 FF 
12f78     A0 64 06 F1 | 	add	objptr, ##38560
12f7c     32 A7 02 FB | 	rdlong	local01, objptr
12f80     53 A9 02 F6 | 	mov	local02, local01
12f84     01 A8 66 F0 | 	shl	local02, #1
12f88     53 A9 02 F1 | 	add	local02, local01
12f8c     02 A8 66 F0 | 	shl	local02, #2
12f90     03 00 00 FF 
12f94     04 64 86 F1 | 	sub	objptr, ##1540
12f98     32 A9 02 F1 | 	add	local02, objptr
12f9c     54 B1 62 FC | 	wrlong	local06, local02
12fa0     03 00 00 FF 
12fa4     04 64 06 F1 | 	add	objptr, ##1540
12fa8     32 A7 02 FB | 	rdlong	local01, objptr
12fac     53 A9 02 F6 | 	mov	local02, local01
12fb0     01 A8 66 F0 | 	shl	local02, #1
12fb4     53 A9 02 F1 | 	add	local02, local01
12fb8     02 A8 66 F0 | 	shl	local02, #2
12fbc     03 00 00 FF 
12fc0     04 64 86 F1 | 	sub	objptr, ##1540
12fc4     32 A9 02 F1 | 	add	local02, objptr
12fc8     08 A8 06 F1 | 	add	local02, #8
12fcc     54 9D 68 FC | 	wrlong	#78, local02
12fd0     03 00 00 FF 
12fd4     04 64 06 F1 | 	add	objptr, ##1540
12fd8     32 B1 02 FB | 	rdlong	local06, objptr
12fdc     58 93 02 F6 | 	mov	arg01, local06
12fe0     01 92 66 F0 | 	shl	arg01, #1
12fe4     58 93 02 F1 | 	add	arg01, local06
12fe8     02 92 66 F0 | 	shl	arg01, #2
12fec     03 00 00 FF 
12ff0     04 64 86 F1 | 	sub	objptr, ##1540
12ff4     32 93 02 F1 | 	add	arg01, objptr
12ff8     09 00 00 FF 
12ffc     44 64 06 F1 | 	add	objptr, ##4676
13000     32 95 02 FB | 	rdlong	arg02, objptr
13004     02 AA 06 F6 | 	mov	local03, #2
13008     58 AB 02 F1 | 	add	local03, local06
1300c     0B 00 00 FF 
13010     5C 64 86 F1 | 	sub	objptr, ##5724
13014     32 97 02 FB | 	rdlong	arg03, objptr
13018     4B AB 02 FD | 	qmul	local03, arg03
1301c     3A 00 00 FF 
13020     B8 65 86 F1 | 	sub	objptr, ##30136
13024     18 B0 62 FD | 	getqx	local06
13028     58 95 02 F1 | 	add	arg02, local06
1302c     04 0E B1 FD | 	call	#_psram_spin2_write
13030     0B 00 00 FF 
13034     CC 64 86 F1 | 	sub	objptr, ##5836
13038     64 FD BF FD | 	call	#_do_fast_goto
1303c     0C 00 90 FD | 	jmp	#LR__1612
13040                 | LR__1611
13040     26 92 06 F6 | 	mov	arg01, #38
13044     00 94 06 F6 | 	mov	arg02, #0
13048     F0 DF B0 FD | 	call	#_printerror
1304c                 | LR__1612
1304c     E7 F0 03 F6 | 	mov	ptra, fp
13050     F2 00 A0 FD | 	call	#popregs_
13054                 | _do_find_goto_ret
13054     2D 00 64 FD | 	ret
13058                 | 
13058                 | ' 
13058                 | ' '------- slow goto  
13058                 | ' 
13058                 | ' sub do_slow_goto
13058                 | _do_slow_goto
13058     05 CA 05 F6 | 	mov	COUNT_, #5
1305c     E8 00 A0 FD | 	call	#pushregs_
13060     30 F0 07 F1 | 	add	ptra, #48
13064     20 A6 BF FD | 	call	#_pop
13068     3F A7 02 F6 | 	mov	local01, result3
1306c     24 CE 05 F1 | 	add	fp, #36
13070     E7 7A 62 FC | 	wrlong	result1, fp
13074     04 CE 05 F1 | 	add	fp, #4
13078     E7 7C 62 FC | 	wrlong	result2, fp
1307c     04 CE 05 F1 | 	add	fp, #4
13080     E7 A6 62 FC | 	wrlong	local01, fp
13084     08 CE 85 F1 | 	sub	fp, #8
13088     E7 92 02 F6 | 	mov	arg01, fp
1308c     24 CE 85 F1 | 	sub	fp, #36
13090     D0 A7 BF FD | 	call	#_converttoint
13094     3D A9 02 F6 | 	mov	local02, result1
13098     4B 00 00 FF 
1309c     A8 64 06 F1 | 	add	objptr, ##38568
130a0     32 AB 02 FB | 	rdlong	local03, objptr
130a4                 | ' 
130a4                 | ' t1=pop() : gotoline=converttoint(t1)
130a4                 | ' gotoptr=programstart
130a4                 | ' do
130a4     3F 00 00 FF 
130a8     DC 65 86 F1 | 	sub	objptr, ##32732
130ac                 | LR__1620
130ac     E7 92 02 F6 | 	mov	arg01, fp
130b0     0C 92 06 F1 | 	add	arg01, #12
130b4     55 95 02 F6 | 	mov	arg02, local03
130b8     18 96 06 F6 | 	mov	arg03, #24
130bc     D8 0C B1 FD | 	call	#_psram_spin2_read1
130c0                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
130c0                 | '   if gotoheader(0)<>$FFFFFFFF then
130c0     0C CE 05 F1 | 	add	fp, #12
130c4     E7 96 02 FB | 	rdlong	arg03, fp
130c8     0C CE 85 F1 | 	sub	fp, #12
130cc     FF FF 7F FF 
130d0     FF 97 0E F2 | 	cmp	arg03, ##-1 wz
130d4     55 AD 02 56 |  if_ne	mov	local04, local03
130d8     20 CE 05 51 |  if_ne	add	fp, #32
130dc     E7 AA 02 5B |  if_ne	rdlong	local03, fp
130e0     20 CE 85 51 |  if_ne	sub	fp, #32
130e4     20 CE 05 F1 | 	add	fp, #32
130e8     E7 96 02 FB | 	rdlong	arg03, fp
130ec     20 CE 85 F1 | 	sub	fp, #32
130f0     FF FF 3F FF 
130f4     FF 97 0E F2 | 	cmp	arg03, ##2147483647 wz
130f8     0C CE 05 51 |  if_ne	add	fp, #12
130fc     E7 A6 02 5B |  if_ne	rdlong	local01, fp
13100     0C CE 85 51 |  if_ne	sub	fp, #12
13104     FF FF 7F 5F 
13108     FF A7 0E 52 |  if_ne	cmp	local01, ##-1 wz
1310c     0C CE 05 51 |  if_ne	add	fp, #12
13110     53 AF 02 56 |  if_ne	mov	local05, local01
13114     0C CE 85 51 |  if_ne	sub	fp, #12
13118     54 AF 0A 52 |  if_ne	cmp	local05, local02 wz
1311c     8C FF 9F 5D |  if_ne	jmp	#LR__1620
13120     0B 00 00 FF 
13124     CC 64 86 F1 | 	sub	objptr, ##5836
13128                 | ' if gotoheader(0)=gotoline then  
13128     0C CE 05 F1 | 	add	fp, #12
1312c     E7 AE 02 FB | 	rdlong	local05, fp
13130     0C CE 85 F1 | 	sub	fp, #12
13134     54 AF 0A F2 | 	cmp	local05, local02 wz
13138     54 00 90 5D |  if_ne	jmp	#LR__1621
1313c     51 00 00 FF 
13140     D8 64 06 F1 | 	add	objptr, ##41688
13144     32 AD 62 FC | 	wrlong	local04, objptr
13148     06 00 00 FF 
1314c     3C 64 86 F1 | 	sub	objptr, ##3132
13150     32 AF 02 FB | 	rdlong	local05, objptr
13154     01 AE 86 F1 | 	sub	local05, #1
13158     04 64 06 F1 | 	add	objptr, #4
1315c     32 AF 62 FC | 	wrlong	local05, objptr
13160                 | '    runptr=oldgotoptr
13160                 | '    lineptr_e=lineptr-1
13160                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
13160     06 00 00 FF 
13164     84 64 06 F1 | 	add	objptr, ##3204
13168     32 AF 02 FB | 	rdlong	local05, objptr
1316c     51 00 00 FF 
13170     24 65 86 F1 | 	sub	objptr, ##41764
13174     FF FF 3F FF 
13178     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
1317c     51 00 00 AF 
13180     24 65 06 A1 |  if_e	add	objptr, ##41764
13184     32 01 68 AC |  if_e	wrlong	#0, objptr
13188     51 00 00 AF 
1318c     24 65 86 A1 |  if_e	sub	objptr, ##41764
13190                 | LR__1621
13190     E7 F0 03 F6 | 	mov	ptra, fp
13194     F2 00 A0 FD | 	call	#popregs_
13198                 | _do_slow_goto_ret
13198     2D 00 64 FD | 	ret
1319c                 | 
1319c                 | ' 
1319c                 | ' ' ----------------  hex$
1319c                 | ' 
1319c                 | ' sub do_hex
1319c                 | _do_hex
1319c     02 CA 05 F6 | 	mov	COUNT_, #2
131a0     E8 00 A0 FD | 	call	#pushregs_
131a4     18 F0 07 F1 | 	add	ptra, #24
131a8     4B 00 00 FF 
131ac     A0 64 06 F1 | 	add	objptr, ##38560
131b0     32 97 02 FB | 	rdlong	arg03, objptr
131b4     4B 95 02 F6 | 	mov	arg02, arg03
131b8     01 94 66 F0 | 	shl	arg02, #1
131bc     4B 95 02 F1 | 	add	arg02, arg03
131c0     02 94 66 F0 | 	shl	arg02, #2
131c4     03 00 00 FF 
131c8     04 64 86 F1 | 	sub	objptr, ##1540
131cc     32 95 02 F1 | 	add	arg02, objptr
131d0     4A A7 02 FB | 	rdlong	local01, arg02
131d4                 | ' 
131d4                 | ' numpar=compiledline(lineptr_e).result.uresult
131d4                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
131d4     03 A6 16 F2 | 	cmp	local01, #3 wc
131d8     48 00 00 FF 
131dc     9C 64 86 F1 | 	sub	objptr, ##37020
131e0     00 A6 0E C2 |  if_b	cmp	local01, #0 wz
131e4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1630
131e8     00 92 06 F6 | 	mov	arg01, #0
131ec     4C 6D B1 FD | 	call	#__system___getiolock_0622
131f0     3D 93 02 F6 | 	mov	arg01, result1
131f4     C0 17 B1 FD | 	call	#__system___lockmem
131f8     97 01 00 FF 
131fc     57 95 06 F6 | 	mov	arg02, ##@LR__6020
13200     00 92 06 F6 | 	mov	arg01, #0
13204     00 96 06 F6 | 	mov	arg03, #0
13208     A0 24 B1 FD | 	call	#__system___basic_print_string
1320c     00 92 06 F6 | 	mov	arg01, #0
13210     28 6D B1 FD | 	call	#__system___getiolock_0622
13214     3D 01 68 FC | 	wrlong	#0, result1
13218     27 92 06 F6 | 	mov	arg01, #39
1321c     00 94 06 F6 | 	mov	arg02, #0
13220     18 DE B0 FD | 	call	#_printerror
13224     8C 00 90 FD | 	jmp	#LR__1633
13228                 | LR__1630
13228                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
13228     02 A6 0E F2 | 	cmp	local01, #2 wz
1322c     30 00 90 5D |  if_ne	jmp	#LR__1631
13230     54 A4 BF FD | 	call	#_pop
13234     3F A7 02 F6 | 	mov	local01, result3
13238     E7 7A 62 FC | 	wrlong	result1, fp
1323c     04 CE 05 F1 | 	add	fp, #4
13240     E7 7C 62 FC | 	wrlong	result2, fp
13244     04 CE 05 F1 | 	add	fp, #4
13248     E7 A6 62 FC | 	wrlong	local01, fp
1324c     08 CE 85 F1 | 	sub	fp, #8
13250     E7 92 02 F6 | 	mov	arg01, fp
13254     0C A6 BF FD | 	call	#_converttoint
13258     3D A9 02 F6 | 	mov	local02, result1
1325c     04 00 90 FD | 	jmp	#LR__1632
13260                 | LR__1631
13260     08 A8 06 F6 | 	mov	local02, #8
13264                 | LR__1632
13264     20 A4 BF FD | 	call	#_pop
13268     3F A7 02 F6 | 	mov	local01, result3
1326c     E7 7A 62 FC | 	wrlong	result1, fp
13270     04 CE 05 F1 | 	add	fp, #4
13274     E7 7C 62 FC | 	wrlong	result2, fp
13278     04 CE 05 F1 | 	add	fp, #4
1327c     E7 A6 62 FC | 	wrlong	local01, fp
13280     08 CE 85 F1 | 	sub	fp, #8
13284     E7 92 02 F6 | 	mov	arg01, fp
13288     D8 A5 BF FD | 	call	#_converttoint
1328c     3D 93 02 F6 | 	mov	arg01, result1
13290     54 95 02 F6 | 	mov	arg02, local02
13294     10 96 06 F6 | 	mov	arg03, #16
13298     18 32 B1 FD | 	call	#__system__Number_S
1329c     E7 7A 62 FC | 	wrlong	result1, fp
132a0     08 CE 05 F1 | 	add	fp, #8
132a4     E7 3E 68 FC | 	wrlong	#31, fp
132a8     08 CE 85 F1 | 	sub	fp, #8
132ac     E7 92 02 F6 | 	mov	arg01, fp
132b0     64 A4 BF FD | 	call	#_push
132b4                 | LR__1633
132b4     E7 F0 03 F6 | 	mov	ptra, fp
132b8     F2 00 A0 FD | 	call	#popregs_
132bc                 | _do_hex_ret
132bc     2D 00 64 FD | 	ret
132c0                 | 
132c0                 | ' 
132c0                 | ' ' ----------------  if
132c0                 | ' 
132c0                 | ' sub do_if
132c0                 | _do_if
132c0     05 CA 05 F6 | 	mov	COUNT_, #5
132c4     E8 00 A0 FD | 	call	#pushregs_
132c8     BC A3 BF FD | 	call	#_pop
132cc     3D A7 0A F6 | 	mov	local01, result1 wz
132d0     3E A9 02 F6 | 	mov	local02, result2
132d4     3F AB 02 F6 | 	mov	local03, result3
132d8                 | ' t1=pop()
132d8                 | ' ' if uresult=0, jump over else
132d8                 | ' if t1.result.uresult = 0 then 
132d8     BC 00 90 5D |  if_ne	jmp	#LR__1642
132dc                 | '   for i=lineptr_e to lineptr-1
132dc     4B 00 00 FF 
132e0     A0 64 06 F1 | 	add	objptr, ##38560
132e4     32 AD 02 FB | 	rdlong	local04, objptr
132e8     04 64 86 F1 | 	sub	objptr, #4
132ec     32 AF 02 FB | 	rdlong	local05, objptr
132f0     4B 00 00 FF 
132f4     9C 64 86 F1 | 	sub	objptr, ##38556
132f8                 | LR__1640
132f8     57 AD 52 F2 | 	cmps	local04, local05 wc
132fc     78 00 90 3D |  if_ae	jmp	#LR__1641
13300     56 7F 02 F6 | 	mov	result3, local04
13304     01 7E 66 F0 | 	shl	result3, #1
13308     56 7F 02 F1 | 	add	result3, local04
1330c     02 7E 66 F0 | 	shl	result3, #2
13310     48 00 00 FF 
13314     9C 64 06 F1 | 	add	objptr, ##37020
13318     32 7F 02 F1 | 	add	result3, objptr
1331c     3F A7 02 FB | 	rdlong	local01, result3
13320     04 7E 06 F1 | 	add	result3, #4
13324     3F 7D 02 FB | 	rdlong	result2, result3
13328     56 7F 02 F6 | 	mov	result3, local04
1332c     01 7E 66 F0 | 	shl	result3, #1
13330     56 7F 02 F1 | 	add	result3, local04
13334     02 7E 66 F0 | 	shl	result3, #2
13338     32 7F 02 F1 | 	add	result3, objptr
1333c     08 7E 06 F1 | 	add	result3, #8
13340     3F 7F 02 FB | 	rdlong	result3, result3
13344     3E A9 02 F6 | 	mov	local02, result2
13348     3F AB 02 F6 | 	mov	local03, result3
1334c                 | '     t1=compiledline(i)
1334c                 | '     if t1.result_type=token_else then lineptr_e=i : return
1334c     5A AA 0E F2 | 	cmp	local03, #90 wz
13350     48 00 00 FF 
13354     9C 64 86 F1 | 	sub	objptr, ##37020
13358     4B 00 00 AF 
1335c     A0 64 06 A1 |  if_e	add	objptr, ##38560
13360     32 AD 62 AC |  if_e	wrlong	local04, objptr
13364     4B 00 00 AF 
13368     A0 64 86 A1 |  if_e	sub	objptr, ##38560
1336c     28 00 90 AD |  if_e	jmp	#LR__1643
13370     01 AC 06 F1 | 	add	local04, #1
13374     80 FF 9F FD | 	jmp	#LR__1640
13378                 | LR__1641
13378     4B 00 00 FF 
1337c     9C 64 06 F1 | 	add	objptr, ##38556
13380     32 AF 02 FB | 	rdlong	local05, objptr
13384     01 AE 86 F1 | 	sub	local05, #1
13388     04 64 06 F1 | 	add	objptr, #4
1338c     32 AF 62 FC | 	wrlong	local05, objptr
13390     4B 00 00 FF 
13394     A0 64 86 F1 | 	sub	objptr, ##38560
13398                 | LR__1642
13398                 | LR__1643
13398     E7 F0 03 F6 | 	mov	ptra, fp
1339c     F2 00 A0 FD | 	call	#popregs_
133a0                 | _do_if_ret
133a0     2D 00 64 FD | 	ret
133a4                 | 
133a4                 | ' 
133a4                 | ' ' ----------------  inkey$
133a4                 | ' 
133a4                 | ' sub do_inkey
133a4                 | _do_inkey
133a4     02 CA 05 F6 | 	mov	COUNT_, #2
133a8     E8 00 A0 FD | 	call	#pushregs_
133ac     0C F0 07 F1 | 	add	ptra, #12
133b0     00 0E B1 FD | 	call	#_usbnew_spin2_get_key
133b4     46 00 00 FF 
133b8     94 64 06 F1 | 	add	objptr, ##35988
133bc     32 7B 62 FC | 	wrlong	result1, objptr
133c0                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
133c0     46 00 00 FF 
133c4     94 64 86 F1 | 	sub	objptr, ##35988
133c8     00 7A 0E F2 | 	cmp	result1, #0 wz
133cc     94 00 90 AD |  if_e	jmp	#LR__1651
133d0     46 00 00 FF 
133d4     94 64 06 F1 | 	add	objptr, ##35988
133d8     32 9D 02 FB | 	rdlong	arg06, objptr
133dc     46 00 00 FF 
133e0     94 64 86 F1 | 	sub	objptr, ##35988
133e4     00 00 40 FF 
133e8     00 9C 16 F2 | 	cmp	arg06, ##-2147483648 wc
133ec     46 00 00 CF 
133f0     94 64 06 C1 |  if_b	add	objptr, ##35988
133f4     32 A7 02 CB |  if_b	rdlong	local01, objptr
133f8     46 00 00 CF 
133fc     94 64 86 C1 |  if_b	sub	objptr, ##35988
13400     53 A7 E2 C8 |  if_b	getbyte	local01, local01, #0
13404     E0 A6 16 C2 |  if_b	cmp	local01, #224 wc
13408     58 00 90 3D |  if_ae	jmp	#LR__1651
1340c                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len) 
1340c     51 00 00 FF 
13410     5C 65 06 F1 | 	add	objptr, ##41820
13414     32 9D 02 FB | 	rdlong	arg06, objptr
13418     51 00 00 FF 
1341c     5C 65 86 F1 | 	sub	objptr, ##41820
13420     01 9C 0E F2 | 	cmp	arg06, #1 wz
13424     3C 00 90 5D |  if_ne	jmp	#LR__1650
13428     53 00 00 FF 
1342c     FC 64 06 F1 | 	add	objptr, ##42748
13430     32 95 02 FB | 	rdlong	arg02, objptr
13434     04 64 86 F1 | 	sub	objptr, #4
13438     32 9B 02 FB | 	rdlong	arg05, objptr
1343c     07 92 06 F6 | 	mov	arg01, #7
13440     56 00 00 FF 
13444     44 96 06 F6 | 	mov	arg03, ##44100
13448     0C 98 C6 F9 | 	decod	arg04, #12
1344c     01 9C 66 F6 | 	neg	arg06, #1
13450     48 00 00 FF 
13454     2C 64 86 F1 | 	sub	objptr, ##36908
13458     AC 10 B1 FD | 	call	#_Audio2_003_spin2_play
1345c     0B 00 00 FF 
13460     CC 64 86 F1 | 	sub	objptr, ##5836
13464                 | LR__1650
13464                 | LR__1651
13464                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
13464     46 00 00 FF 
13468     94 64 06 F1 | 	add	objptr, ##35988
1346c     32 9D 0A FB | 	rdlong	arg06, objptr wz
13470     46 00 00 FF 
13474     94 64 86 F1 | 	sub	objptr, ##35988
13478     D4 01 90 AD |  if_e	jmp	#LR__1660
1347c     46 00 00 FF 
13480     94 64 06 F1 | 	add	objptr, ##35988
13484     32 9D 02 FB | 	rdlong	arg06, objptr
13488     46 00 00 FF 
1348c     94 64 86 F1 | 	sub	objptr, ##35988
13490     00 00 40 FF 
13494     00 9C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13498     46 00 00 CF 
1349c     94 64 06 C1 |  if_b	add	objptr, ##35988
134a0     32 A7 02 CB |  if_b	rdlong	local01, objptr
134a4     46 00 00 CF 
134a8     94 64 86 C1 |  if_b	sub	objptr, ##35988
134ac     53 A7 E2 C8 |  if_b	getbyte	local01, local01, #0
134b0     E0 A6 16 C2 |  if_b	cmp	local01, #224 wc
134b4     98 01 90 3D |  if_ae	jmp	#LR__1660
134b8                 | '   if leds and 2 = 2 then 
134b8     53 00 00 FF 
134bc     38 65 06 F1 | 	add	objptr, ##42808
134c0     32 A7 0A FB | 	rdlong	local01, objptr wz
134c4     53 00 00 FF 
134c8     38 65 86 F1 | 	sub	objptr, ##42808
134cc     58 01 90 AD |  if_e	jmp	#LR__1659
134d0                 | '     if key>96 andalso key<123 then
134d0     46 00 00 FF 
134d4     94 64 06 F1 | 	add	objptr, ##35988
134d8     32 A7 02 FB | 	rdlong	local01, objptr
134dc     46 00 00 FF 
134e0     94 64 86 F1 | 	sub	objptr, ##35988
134e4     61 A6 16 F2 | 	cmp	local01, #97 wc
134e8     3C 00 90 CD |  if_b	jmp	#LR__1652
134ec     46 00 00 FF 
134f0     94 64 06 F1 | 	add	objptr, ##35988
134f4     32 A7 02 FB | 	rdlong	local01, objptr
134f8     46 00 00 FF 
134fc     94 64 86 F1 | 	sub	objptr, ##35988
13500     7B A6 16 F2 | 	cmp	local01, #123 wc
13504     20 00 90 3D |  if_ae	jmp	#LR__1652
13508     46 00 00 FF 
1350c     94 64 06 F1 | 	add	objptr, ##35988
13510     32 A7 02 FB | 	rdlong	local01, objptr
13514     20 A6 86 F1 | 	sub	local01, #32
13518     32 A7 62 FC | 	wrlong	local01, objptr
1351c     46 00 00 FF 
13520     94 64 86 F1 | 	sub	objptr, ##35988
13524     00 01 90 FD | 	jmp	#LR__1658
13528                 | LR__1652
13528     46 00 00 FF 
1352c     94 64 06 F1 | 	add	objptr, ##35988
13530     32 A7 02 FB | 	rdlong	local01, objptr
13534     46 00 00 FF 
13538     94 64 86 F1 | 	sub	objptr, ##35988
1353c     41 A6 16 F2 | 	cmp	local01, #65 wc
13540     3C 00 90 CD |  if_b	jmp	#LR__1653
13544     46 00 00 FF 
13548     94 64 06 F1 | 	add	objptr, ##35988
1354c     32 A7 02 FB | 	rdlong	local01, objptr
13550     46 00 00 FF 
13554     94 64 86 F1 | 	sub	objptr, ##35988
13558     5B A6 16 F2 | 	cmp	local01, #91 wc
1355c     20 00 90 3D |  if_ae	jmp	#LR__1653
13560     46 00 00 FF 
13564     94 64 06 F1 | 	add	objptr, ##35988
13568     32 A7 02 FB | 	rdlong	local01, objptr
1356c     20 A6 06 F1 | 	add	local01, #32
13570     32 A7 62 FC | 	wrlong	local01, objptr
13574     46 00 00 FF 
13578     94 64 86 F1 | 	sub	objptr, ##35988
1357c     A8 00 90 FD | 	jmp	#LR__1657
13580                 | LR__1653
13580     46 00 00 FF 
13584     94 64 06 F1 | 	add	objptr, ##35988
13588     32 A7 02 FB | 	rdlong	local01, objptr
1358c     46 00 00 FF 
13590     94 64 86 F1 | 	sub	objptr, ##35988
13594     17 A6 16 F2 | 	cmp	local01, #23 wc
13598     3C 00 90 CD |  if_b	jmp	#LR__1654
1359c     46 00 00 FF 
135a0     94 64 06 F1 | 	add	objptr, ##35988
135a4     32 A7 02 FB | 	rdlong	local01, objptr
135a8     46 00 00 FF 
135ac     94 64 86 F1 | 	sub	objptr, ##35988
135b0     20 A6 16 F2 | 	cmp	local01, #32 wc
135b4     20 00 90 3D |  if_ae	jmp	#LR__1654
135b8     46 00 00 FF 
135bc     94 64 06 F1 | 	add	objptr, ##35988
135c0     32 A7 02 FB | 	rdlong	local01, objptr
135c4     09 A6 86 F1 | 	sub	local01, #9
135c8     32 A7 62 FC | 	wrlong	local01, objptr
135cc     46 00 00 FF 
135d0     94 64 86 F1 | 	sub	objptr, ##35988
135d4     50 00 90 FD | 	jmp	#LR__1656
135d8                 | LR__1654
135d8     46 00 00 FF 
135dc     94 64 06 F1 | 	add	objptr, ##35988
135e0     32 A9 02 FB | 	rdlong	local02, objptr
135e4     46 00 00 FF 
135e8     94 64 86 F1 | 	sub	objptr, ##35988
135ec     0E A8 16 F2 | 	cmp	local02, #14 wc
135f0     34 00 90 CD |  if_b	jmp	#LR__1655
135f4     46 00 00 FF 
135f8     94 64 06 F1 | 	add	objptr, ##35988
135fc     32 A7 02 FB | 	rdlong	local01, objptr
13600     46 00 00 FF 
13604     94 64 86 F1 | 	sub	objptr, ##35988
13608     17 A6 16 F2 | 	cmp	local01, #23 wc
1360c     53 00 00 CF 
13610     3C 65 06 C1 |  if_b	add	objptr, ##42812
13614     32 A9 02 CB |  if_b	rdlong	local02, objptr
13618     27 A8 06 C1 |  if_b	add	local02, #39
1361c     32 A9 62 CC |  if_b	wrlong	local02, objptr
13620     53 00 00 CF 
13624     3C 65 86 C1 |  if_b	sub	objptr, ##42812
13628                 | LR__1655
13628                 | LR__1656
13628                 | LR__1657
13628                 | LR__1658
13628                 | LR__1659
13628     46 00 00 FF 
1362c     94 64 06 F1 | 	add	objptr, ##35988
13630     32 93 02 FB | 	rdlong	arg01, objptr
13634     46 00 00 FF 
13638     94 64 86 F1 | 	sub	objptr, ##35988
1363c     48 DD B0 FD | 	call	#_scantochar
13640     3D 93 02 F6 | 	mov	arg01, result1
13644     DC 2D B1 FD | 	call	#__system__Chr_S
13648     E7 7A 62 FC | 	wrlong	result1, fp
1364c     0C 00 90 FD | 	jmp	#LR__1661
13650                 | LR__1660
13650     97 01 00 FF 
13654     5E A9 06 F6 | 	mov	local02, ##@LR__6021
13658     E7 A8 62 FC | 	wrlong	local02, fp
1365c                 | LR__1661
1365c     08 CE 05 F1 | 	add	fp, #8
13660     E7 3E 68 FC | 	wrlong	#31, fp
13664     08 CE 85 F1 | 	sub	fp, #8
13668     E7 92 02 F6 | 	mov	arg01, fp
1366c     A8 A0 BF FD | 	call	#_push
13670     E7 F0 03 F6 | 	mov	ptra, fp
13674     F2 00 A0 FD | 	call	#popregs_
13678                 | _do_inkey_ret
13678     2D 00 64 FD | 	ret
1367c                 | 
1367c                 | ' 
1367c                 | ' ' ----------------  ink
1367c                 | ' 
1367c                 | ' sub do_ink
1367c                 | _do_ink
1367c     00 CA 05 F6 | 	mov	COUNT_, #0
13680     E8 00 A0 FD | 	call	#pushregs_
13684     0C F0 07 F1 | 	add	ptra, #12
13688     FC 9F BF FD | 	call	#_pop
1368c     3F 95 02 F6 | 	mov	arg02, result3
13690     E7 7A 62 FC | 	wrlong	result1, fp
13694     04 CE 05 F1 | 	add	fp, #4
13698     E7 7C 62 FC | 	wrlong	result2, fp
1369c     04 CE 05 F1 | 	add	fp, #4
136a0     E7 94 62 FC | 	wrlong	arg02, fp
136a4     08 CE 85 F1 | 	sub	fp, #8
136a8     E7 92 02 F6 | 	mov	arg01, fp
136ac     B4 A1 BF FD | 	call	#_converttoint
136b0     38 00 00 FF 
136b4     5C 64 06 F1 | 	add	objptr, ##28764
136b8     32 7B 62 FC | 	wrlong	result1, objptr
136bc     04 64 86 F1 | 	sub	objptr, #4
136c0     32 95 02 FB | 	rdlong	arg02, objptr
136c4                 | ' 
136c4                 | ' write_color:=ff
136c4     38 00 00 FF 
136c8     17 64 86 F1 | 	sub	objptr, ##28695
136cc     32 7B 62 FC | 	wrlong	result1, objptr
136d0                 | ' write_background:=bb
136d0     04 64 06 F1 | 	add	objptr, #4
136d4     32 95 62 FC | 	wrlong	arg02, objptr
136d8     38 00 00 FF 
136dc     17 64 06 F1 | 	add	objptr, ##28695
136e0     32 93 02 FB | 	rdlong	arg01, objptr
136e4     38 00 00 FF 
136e8     5C 64 86 F1 | 	sub	objptr, ##28764
136ec     0C E5 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
136f0     E7 F0 03 F6 | 	mov	ptra, fp
136f4     F2 00 A0 FD | 	call	#popregs_
136f8                 | _do_ink_ret
136f8     2D 00 64 FD | 	ret
136fc                 | 
136fc                 | ' 
136fc                 | ' ' ----------------  int
136fc                 | ' 
136fc                 | ' sub do_int
136fc                 | _do_int
136fc     02 CA 05 F6 | 	mov	COUNT_, #2
13700     E8 00 A0 FD | 	call	#pushregs_
13704     10 F0 07 F1 | 	add	ptra, #16
13708     7C 9F BF FD | 	call	#_pop
1370c     3E A7 02 F6 | 	mov	local01, result2
13710     3F A9 02 F6 | 	mov	local02, result3
13714     E7 7A 62 FC | 	wrlong	result1, fp
13718     04 CE 05 F1 | 	add	fp, #4
1371c     E7 A6 62 FC | 	wrlong	local01, fp
13720     04 CE 05 F1 | 	add	fp, #4
13724     E7 A8 62 FC | 	wrlong	local02, fp
13728                 | ' 
13728                 | ' t1=pop()
13728                 | ' select case t1.result_type
13728     08 CE 85 F1 | 	sub	fp, #8
1372c     1E A8 0E F2 | 	cmp	local02, #30 wz
13730     14 00 90 AD |  if_e	jmp	#LR__1670
13734     1F A8 0E F2 | 	cmp	local02, #31 wz
13738     20 00 90 AD |  if_e	jmp	#LR__1671
1373c     2B A8 0E F2 | 	cmp	local02, #43 wz
13740     34 00 90 AD |  if_e	jmp	#LR__1672
13744     50 00 90 FD | 	jmp	#LR__1673
13748                 | LR__1670
13748     E7 92 02 FB | 	rdlong	arg01, fp
1374c     00 94 06 F6 | 	mov	arg02, #0
13750     FC 3D B1 FD | 	call	#__system___float_tointeger
13754     E7 7A 62 FC | 	wrlong	result1, fp
13758     3C 00 90 FD | 	jmp	#LR__1673
1375c                 | LR__1671
1375c     E7 92 02 FB | 	rdlong	arg01, fp
13760     40 41 B1 FD | 	call	#__system____builtin_atof
13764     3D 93 02 F6 | 	mov	arg01, result1
13768     00 94 06 F6 | 	mov	arg02, #0
1376c     E0 3D B1 FD | 	call	#__system___float_tointeger
13770     E7 7A 62 FC | 	wrlong	result1, fp
13774     20 00 90 FD | 	jmp	#LR__1673
13778                 | LR__1672
13778     E7 92 02 FB | 	rdlong	arg01, fp
1377c     78 A0 BF FD | 	call	#_convertstring
13780     3D 93 02 F6 | 	mov	arg01, result1
13784     1C 41 B1 FD | 	call	#__system____builtin_atof
13788     3D 93 02 F6 | 	mov	arg01, result1
1378c     00 94 06 F6 | 	mov	arg02, #0
13790     BC 3D B1 FD | 	call	#__system___float_tointeger
13794     E7 7A 62 FC | 	wrlong	result1, fp
13798                 | LR__1673
13798     08 CE 05 F1 | 	add	fp, #8
1379c     E7 38 68 FC | 	wrlong	#28, fp
137a0     08 CE 85 F1 | 	sub	fp, #8
137a4     E7 92 02 F6 | 	mov	arg01, fp
137a8     6C 9F BF FD | 	call	#_push
137ac     E7 F0 03 F6 | 	mov	ptra, fp
137b0     F2 00 A0 FD | 	call	#popregs_
137b4                 | _do_int_ret
137b4     2D 00 64 FD | 	ret
137b8                 | 
137b8                 | ' 
137b8                 | ' ' ----------------  input
137b8                 | ' 
137b8                 | ' sub do_input
137b8                 | _do_input
137b8     1A CA 05 F6 | 	mov	COUNT_, #26
137bc     E8 00 A0 FD | 	call	#pushregs_
137c0     50 F1 07 F1 | 	add	ptra, #336
137c4     4B 00 00 FF 
137c8     A0 64 06 F1 | 	add	objptr, ##38560
137cc     32 AD 02 FB | 	rdlong	local04, objptr
137d0     56 AF 02 F6 | 	mov	local05, local04
137d4     01 AE 66 F0 | 	shl	local05, #1
137d8     56 AF 02 F1 | 	add	local05, local04
137dc     02 AE 66 F0 | 	shl	local05, #2
137e0     03 00 00 FF 
137e4     04 64 86 F1 | 	sub	objptr, ##1540
137e8     32 B1 02 F6 | 	mov	local06, objptr
137ec     32 AF 02 F1 | 	add	local05, objptr
137f0     57 B3 02 FB | 	rdlong	local07, local05
137f4                 | ' 
137f4                 | ' numpar=compiledline(lineptr_e).result.uresult
137f4                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
137f4     01 B2 16 F2 | 	cmp	local07, #1 wc
137f8     48 00 00 FF 
137fc     9C 64 86 F1 | 	sub	objptr, ##37020
13800     08 00 90 CD |  if_b	jmp	#LR__1680
13804     41 B2 16 F2 | 	cmp	local07, #65 wc
13808     50 00 90 CD |  if_b	jmp	#LR__1681
1380c                 | LR__1680
1380c     00 92 06 F6 | 	mov	arg01, #0
13810     28 67 B1 FD | 	call	#__system___getiolock_0622
13814     3D 93 02 F6 | 	mov	arg01, result1
13818     9C 11 B1 FD | 	call	#__system___lockmem
1381c     97 01 00 FF 
13820     5F 95 06 F6 | 	mov	arg02, ##@LR__6022
13824     00 92 06 F6 | 	mov	arg01, #0
13828     00 96 06 F6 | 	mov	arg03, #0
1382c     7C 1E B1 FD | 	call	#__system___basic_print_string
13830     00 92 06 F6 | 	mov	arg01, #0
13834     04 67 B1 FD | 	call	#__system___getiolock_0622
13838     3D 01 68 FC | 	wrlong	#0, result1
1383c     51 00 00 FF 
13840     10 65 06 F1 | 	add	objptr, ##41744
13844     32 95 02 FB | 	rdlong	arg02, objptr
13848     51 00 00 FF 
1384c     10 65 86 F1 | 	sub	objptr, ##41744
13850     27 92 06 F6 | 	mov	arg01, #39
13854     E4 D7 B0 FD | 	call	#_printerror
13858     5C 08 90 FD | 	jmp	#LR__1727
1385c                 | LR__1681
1385c     59 B5 02 F6 | 	mov	local08, local07
13860     01 B4 86 F1 | 	sub	local08, #1
13864     3C 64 06 F1 | 	add	objptr, #60
13868     32 AD E2 FA | 	rdword	local04, objptr
1386c     56 B7 52 F6 | 	abs	local09, local04 wc
13870     01 B6 46 F0 | 	shr	local09, #1
13874     5B B7 82 F6 | 	negc	local09, local09
13878     02 64 06 F1 | 	add	objptr, #2
1387c     32 B9 C2 FA | 	rdbyte	local10, objptr
13880     3E 64 86 F1 | 	sub	objptr, #62
13884                 | ' i=numpar-1
13884                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13884                 | ' do
13884                 | LR__1682
13884     7C D0 BE FD | 	call	#_edit
13888     3D BB 02 F6 | 	mov	local11, result1
1388c                 | ' 
1388c                 | '   line$=edit()
1388c                 | ' 
1388c                 | '   if v.cursor_y=cpy+1 then
1388c     3E 64 06 F1 | 	add	objptr, #62
13890     32 97 C2 FA | 	rdbyte	arg03, objptr
13894     3E 64 86 F1 | 	sub	objptr, #62
13898     5C AD 02 F6 | 	mov	local04, local10
1389c     01 AC 06 F1 | 	add	local04, #1
138a0     56 97 0A F2 | 	cmp	arg03, local04 wz
138a4     5C 00 90 5D |  if_ne	jmp	#LR__1685
138a8     5D 93 02 F6 | 	mov	arg01, local11
138ac     49 BD 02 F6 | 	mov	local12, arg01
138b0     D7 06 48 FB | 	callpa	#(@LR__1684-@LR__1683)>>2,fcache_load_ptr_
138b4                 | LR__1683
138b4     5E 7B CA FA | 	rdbyte	result1, local12 wz
138b8     01 BC 06 51 |  if_ne	add	local12, #1
138bc     F4 FF 9F 5D |  if_ne	jmp	#LR__1683
138c0                 | LR__1684
138c0     49 BD 82 F1 | 	sub	local12, arg01
138c4     5E 95 02 F6 | 	mov	arg02, local12
138c8     5B 95 82 F1 | 	sub	arg02, local09
138cc     38 00 00 FF 
138d0     54 64 06 F1 | 	add	objptr, ##28756
138d4     32 AD 02 FB | 	rdlong	local04, objptr
138d8     38 00 00 FF 
138dc     54 64 86 F1 | 	sub	objptr, ##28756
138e0     56 95 02 F1 | 	add	arg02, local04
138e4     5D 93 02 F6 | 	mov	arg01, local11
138e8     FC 29 B1 FD | 	call	#__system__Right_S
138ec     3D 93 02 F6 | 	mov	arg01, result1
138f0     FC 2D B1 FD | 	call	#__system__RTrim_S
138f4     3D 93 02 F6 | 	mov	arg01, result1
138f8     34 2D B1 FD | 	call	#__system__LTrim_S
138fc     3D BB 02 F6 | 	mov	local11, result1
13900     14 00 90 FD | 	jmp	#LR__1686
13904                 | LR__1685
13904     5D 93 02 F6 | 	mov	arg01, local11
13908     E4 2D B1 FD | 	call	#__system__RTrim_S
1390c     3D 93 02 F6 | 	mov	arg01, result1
13910     1C 2D B1 FD | 	call	#__system__LTrim_S
13914     3D BB 02 F6 | 	mov	local11, result1
13918                 | LR__1686
13918                 | '   do
13918                 | LR__1687
13918     97 01 00 FF 
1391c     6A 97 06 F6 | 	mov	arg03, ##@LR__6023
13920     01 92 06 F6 | 	mov	arg01, #1
13924     5D 95 02 F6 | 	mov	arg02, local11
13928     7C 2E B1 FD | 	call	#__system__Instr
1392c     3D BF 02 F6 | 	mov	local13, result1
13930                 | '    comma=instr(1,line$,",")  
13930                 | '    if comma>0  then 
13930     01 BE 16 F2 | 	cmp	local13, #1 wc
13934     48 00 90 CD |  if_b	jmp	#LR__1690
13938     5F 95 02 F6 | 	mov	arg02, local13
1393c     01 94 86 F1 | 	sub	arg02, #1
13940     5D 93 02 F6 | 	mov	arg01, local11
13944     18 29 B1 FD | 	call	#__system__Left_S
13948     3D C1 02 F6 | 	mov	local14, result1
1394c     5D 93 02 F6 | 	mov	arg01, local11
13950     49 BD 02 F6 | 	mov	local12, arg01
13954     D7 06 48 FB | 	callpa	#(@LR__1689-@LR__1688)>>2,fcache_load_ptr_
13958                 | LR__1688
13958     5E 7B CA FA | 	rdbyte	result1, local12 wz
1395c     01 BC 06 51 |  if_ne	add	local12, #1
13960     F4 FF 9F 5D |  if_ne	jmp	#LR__1688
13964                 | LR__1689
13964     49 BD 82 F1 | 	sub	local12, arg01
13968     5E 95 02 F6 | 	mov	arg02, local12
1396c     5F 95 82 F1 | 	sub	arg02, local13
13970     5D 93 02 F6 | 	mov	arg01, local11
13974     70 29 B1 FD | 	call	#__system__Right_S
13978     3D BB 02 F6 | 	mov	local11, result1
1397c     1C 00 90 FD | 	jmp	#LR__1691
13980                 | LR__1690
13980     5D 93 02 F6 | 	mov	arg01, local11
13984     68 2D B1 FD | 	call	#__system__RTrim_S
13988     3D 93 02 F6 | 	mov	arg01, result1
1398c     A0 2C B1 FD | 	call	#__system__LTrim_S
13990     3D C1 02 F6 | 	mov	local14, result1
13994     97 01 00 FF 
13998     6C BB 06 F6 | 	mov	local11, ##@LR__6024
1399c                 | LR__1691
1399c     5A 95 02 F6 | 	mov	arg02, local08
139a0     02 94 66 F0 | 	shl	arg02, #2
139a4     E7 AC 02 F6 | 	mov	local04, fp
139a8     2C AC 06 F1 | 	add	local04, #44
139ac     56 95 02 F1 | 	add	arg02, local04
139b0     4A C1 62 FC | 	wrlong	local14, arg02
139b4     01 B4 86 F1 | 	sub	local08, #1
139b8     00 B4 56 F2 | 	cmps	local08, #0 wc
139bc     18 00 90 CD |  if_b	jmp	#LR__1692
139c0     97 01 00 FF 
139c4     6D 95 06 F6 | 	mov	arg02, ##@LR__6025
139c8     5D 93 02 F6 | 	mov	arg01, local11
139cc     10 10 B1 FD | 	call	#__system___string_cmp
139d0     00 7A 0E F2 | 	cmp	result1, #0 wz
139d4     40 FF 9F 5D |  if_ne	jmp	#LR__1687
139d8                 | LR__1692
139d8     00 B4 56 F2 | 	cmps	local08, #0 wc
139dc     A4 FE 9F 3D |  if_ae	jmp	#LR__1682
139e0                 | ' 
139e0                 | ' for i=0 to numpar-1
139e0     00 B4 06 F6 | 	mov	local08, #0
139e4     59 C3 02 F6 | 	mov	local15, local07
139e8                 | LR__1693
139e8     61 B5 52 F2 | 	cmps	local08, local15 wc
139ec     C8 06 90 3D |  if_ae	jmp	#LR__1726
139f0                 | ' 
139f0                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
139f0     5A AF 02 F6 | 	mov	local05, local08
139f4     02 AE 66 F0 | 	shl	local05, #2
139f8     E7 B0 02 F6 | 	mov	local06, fp
139fc     2C B0 06 F1 | 	add	local06, #44
13a00     58 AF 02 F1 | 	add	local05, local06
13a04     57 93 02 FB | 	rdlong	arg01, local05
13a08     60 30 BF FD | 	call	#_isnum
13a0c     3D B1 02 F6 | 	mov	local06, result1
13a10     5A C5 02 F6 | 	mov	local16, local08
13a14     02 C4 66 F0 | 	shl	local16, #2
13a18     E7 C6 02 F6 | 	mov	local17, fp
13a1c     2C C6 06 F1 | 	add	local17, #44
13a20     63 C5 02 F1 | 	add	local16, local17
13a24     62 93 02 FB | 	rdlong	arg01, local16
13a28     2C 34 BF FD | 	call	#_isint
13a2c     07 7A 66 F7 | 	signx	result1, #7
13a30     3D B1 2A F5 | 	andn	local06, result1 wz
13a34     53 00 00 5F 
13a38     68 65 06 51 |  if_ne	add	objptr, ##42856
13a3c     32 3D 68 5C |  if_ne	wrlong	#30, objptr
13a40     53 00 00 5F 
13a44     68 65 86 51 |  if_ne	sub	objptr, ##42856
13a48                 | '   if isint(args(i)) then r=result_int 
13a48     5A AD 02 F6 | 	mov	local04, local08
13a4c     02 AC 66 F0 | 	shl	local04, #2
13a50     E7 AE 02 F6 | 	mov	local05, fp
13a54     2C AE 06 F1 | 	add	local05, #44
13a58     57 AD 02 F1 | 	add	local04, local05
13a5c     56 93 02 FB | 	rdlong	arg01, local04
13a60     F4 33 BF FD | 	call	#_isint
13a64     00 7A 0E F2 | 	cmp	result1, #0 wz
13a68     53 00 00 5F 
13a6c     68 65 06 51 |  if_ne	add	objptr, ##42856
13a70     32 39 68 5C |  if_ne	wrlong	#28, objptr
13a74     53 00 00 5F 
13a78     68 65 86 51 |  if_ne	sub	objptr, ##42856
13a7c                 | '   if isdec(args(i)) then r=result_uint 
13a7c     5A AD 02 F6 | 	mov	local04, local08
13a80     02 AC 66 F0 | 	shl	local04, #2
13a84     E7 AE 02 F6 | 	mov	local05, fp
13a88     2C AE 06 F1 | 	add	local05, #44
13a8c     57 AD 02 F1 | 	add	local04, local05
13a90     56 93 02 FB | 	rdlong	arg01, local04
13a94     64 36 BF FD | 	call	#_isdec
13a98     00 7A 0E F2 | 	cmp	result1, #0 wz
13a9c     53 00 00 5F 
13aa0     68 65 06 51 |  if_ne	add	objptr, ##42856
13aa4     32 3B 68 5C |  if_ne	wrlong	#29, objptr
13aa8     53 00 00 5F 
13aac     68 65 86 51 |  if_ne	sub	objptr, ##42856
13ab0                 | '   if not isnum(args(i)) then 
13ab0     5A AF 02 F6 | 	mov	local05, local08
13ab4     02 AE 66 F0 | 	shl	local05, #2
13ab8     E7 B0 02 F6 | 	mov	local06, fp
13abc     2C B0 06 F1 | 	add	local06, #44
13ac0     58 AF 02 F1 | 	add	local05, local06
13ac4     57 93 02 FB | 	rdlong	arg01, local05
13ac8     A0 2F BF FD | 	call	#_isnum
13acc     07 7A 66 F7 | 	signx	result1, #7
13ad0     3D 7B 22 F6 | 	not	result1, result1
13ad4     00 7A 0E F2 | 	cmp	result1, #0 wz
13ad8     E8 00 90 AD |  if_e	jmp	#LR__1698
13adc     53 00 00 FF 
13ae0     68 65 06 F1 | 	add	objptr, ##42856
13ae4     32 57 68 FC | 	wrlong	#43, objptr
13ae8     53 00 00 FF 
13aec     68 65 86 F1 | 	sub	objptr, ##42856
13af0     60 93 02 F6 | 	mov	arg01, local14
13af4     49 BD 02 F6 | 	mov	local12, arg01
13af8     D7 06 48 FB | 	callpa	#(@LR__1695-@LR__1694)>>2,fcache_load_ptr_
13afc                 | LR__1694
13afc     5E 7B CA FA | 	rdbyte	result1, local12 wz
13b00     01 BC 06 51 |  if_ne	add	local12, #1
13b04     F4 FF 9F 5D |  if_ne	jmp	#LR__1694
13b08                 | LR__1695
13b08     49 BD 82 F1 | 	sub	local12, arg01
13b0c     5E C9 02 F6 | 	mov	local18, local12
13b10     53 00 00 FF 
13b14     F0 64 06 F1 | 	add	objptr, ##42736
13b18     32 93 02 FB | 	rdlong	arg01, objptr
13b1c     64 93 82 F1 | 	sub	arg01, local18
13b20     04 92 86 F1 | 	sub	arg01, #4
13b24     03 92 26 F5 | 	andn	arg01, #3
13b28     32 93 62 FC | 	wrlong	arg01, objptr
13b2c     53 00 00 FF 
13b30     F0 64 86 F1 | 	sub	objptr, ##42736
13b34     64 95 02 F6 | 	mov	arg02, local18
13b38     9C D6 B0 FD | 	call	#_pslpoke
13b3c                 | '     pslpoke memtop,l
13b3c                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
13b3c     01 CA 06 F6 | 	mov	local19, #1
13b40     64 CD 02 F6 | 	mov	local20, local18
13b44     01 CC 06 F1 | 	add	local20, #1
13b48                 | LR__1696
13b48     66 CB 52 F2 | 	cmps	local19, local20 wc
13b4c     60 00 90 3D |  if_ae	jmp	#LR__1697
13b50     53 00 00 FF 
13b54     F0 64 06 F1 | 	add	objptr, ##42736
13b58     32 AD 02 FB | 	rdlong	local04, objptr
13b5c     53 00 00 FF 
13b60     F0 64 86 F1 | 	sub	objptr, ##42736
13b64     03 AC 06 F1 | 	add	local04, #3
13b68     65 AD 02 F1 | 	add	local04, local19
13b6c     5A C5 02 F6 | 	mov	local16, local08
13b70     02 C4 66 F0 | 	shl	local16, #2
13b74     E7 C6 02 F6 | 	mov	local17, fp
13b78     2C C6 06 F1 | 	add	local17, #44
13b7c     63 C5 02 F1 | 	add	local16, local17
13b80     62 93 02 FB | 	rdlong	arg01, local16
13b84     65 B1 02 F6 | 	mov	local06, local19
13b88     01 C4 06 F6 | 	mov	local16, #1
13b8c     58 95 02 F6 | 	mov	arg02, local06
13b90     01 96 06 F6 | 	mov	arg03, #1
13b94     E0 27 B1 FD | 	call	#__system__Mid_S
13b98     3D AF 02 F6 | 	mov	local05, result1
13b9c     57 95 C2 FA | 	rdbyte	arg02, local05
13ba0     56 93 02 F6 | 	mov	arg01, local04
13ba4     C0 D6 B0 FD | 	call	#_pspoke
13ba8     01 CA 06 F1 | 	add	local19, #1
13bac     98 FF 9F FD | 	jmp	#LR__1696
13bb0                 | LR__1697
13bb0     53 00 00 FF 
13bb4     F0 64 06 F1 | 	add	objptr, ##42736
13bb8     32 CF 02 FB | 	rdlong	local21, objptr
13bbc     53 00 00 FF 
13bc0     F0 64 86 F1 | 	sub	objptr, ##42736
13bc4                 | LR__1698
13bc4     C0 9A BF FD | 	call	#_pop
13bc8     3D D1 02 F6 | 	mov	local22, result1
13bcc     3E D3 02 F6 | 	mov	local23, result2
13bd0     3F AD 02 F6 | 	mov	local04, result3
13bd4     68 A7 02 F6 | 	mov	local01, local22
13bd8     69 A9 02 F6 | 	mov	local02, local23
13bdc     56 AB 02 F6 | 	mov	local03, local04
13be0     54 D5 02 F6 | 	mov	local24, local02
13be4                 | '   t1=pop() : vartype=t1.result.twowords(1)
13be4                 | '   select case vartype
13be4     6A D7 0A F6 | 	mov	local25, local24 wz
13be8     64 00 90 AD |  if_e	jmp	#LR__1699
13bec     00 D7 0E F2 | 	cmp	local25, #256 wz
13bf0     64 00 90 AD |  if_e	jmp	#LR__1700
13bf4     01 D7 0E F2 | 	cmp	local25, #257 wz
13bf8     64 00 90 AD |  if_e	jmp	#LR__1701
13bfc     02 D7 0E F2 | 	cmp	local25, #258 wz
13c00     64 00 90 AD |  if_e	jmp	#LR__1702
13c04     03 D7 0E F2 | 	cmp	local25, #259 wz
13c08     64 00 90 AD |  if_e	jmp	#LR__1703
13c0c     04 D7 0E F2 | 	cmp	local25, #260 wz
13c10     64 00 90 AD |  if_e	jmp	#LR__1704
13c14     05 D7 0E F2 | 	cmp	local25, #261 wz
13c18     64 00 90 AD |  if_e	jmp	#LR__1705
13c1c     06 D7 0E F2 | 	cmp	local25, #262 wz
13c20     64 00 90 AD |  if_e	jmp	#LR__1706
13c24     07 D7 0E F2 | 	cmp	local25, #263 wz
13c28     64 00 90 AD |  if_e	jmp	#LR__1707
13c2c     08 D7 0E F2 | 	cmp	local25, #264 wz
13c30     64 00 90 AD |  if_e	jmp	#LR__1708
13c34     09 D7 0E F2 | 	cmp	local25, #265 wz
13c38     64 00 90 AD |  if_e	jmp	#LR__1709
13c3c     0A D7 0E F2 | 	cmp	local25, #266 wz
13c40     64 00 90 AD |  if_e	jmp	#LR__1710
13c44     0B D7 0E F2 | 	cmp	local25, #267 wz
13c48     64 00 90 AD |  if_e	jmp	#LR__1711
13c4c     68 00 90 FD | 	jmp	#LR__1712
13c50                 | LR__1699
13c50     0C D8 06 F6 | 	mov	local26, #12
13c54     64 00 90 FD | 	jmp	#LR__1713
13c58                 | LR__1700
13c58     0C D8 06 F6 | 	mov	local26, #12
13c5c     5C 00 90 FD | 	jmp	#LR__1713
13c60                 | LR__1701
13c60     01 D8 06 F6 | 	mov	local26, #1
13c64     54 00 90 FD | 	jmp	#LR__1713
13c68                 | LR__1702
13c68     01 D8 06 F6 | 	mov	local26, #1
13c6c     4C 00 90 FD | 	jmp	#LR__1713
13c70                 | LR__1703
13c70     02 D8 06 F6 | 	mov	local26, #2
13c74     44 00 90 FD | 	jmp	#LR__1713
13c78                 | LR__1704
13c78     02 D8 06 F6 | 	mov	local26, #2
13c7c     3C 00 90 FD | 	jmp	#LR__1713
13c80                 | LR__1705
13c80     04 D8 06 F6 | 	mov	local26, #4
13c84     34 00 90 FD | 	jmp	#LR__1713
13c88                 | LR__1706
13c88     04 D8 06 F6 | 	mov	local26, #4
13c8c     2C 00 90 FD | 	jmp	#LR__1713
13c90                 | LR__1707
13c90     08 D8 06 F6 | 	mov	local26, #8
13c94     24 00 90 FD | 	jmp	#LR__1713
13c98                 | LR__1708
13c98     08 D8 06 F6 | 	mov	local26, #8
13c9c     1C 00 90 FD | 	jmp	#LR__1713
13ca0                 | LR__1709
13ca0     06 D8 06 F6 | 	mov	local26, #6
13ca4     14 00 90 FD | 	jmp	#LR__1713
13ca8                 | LR__1710
13ca8     08 D8 06 F6 | 	mov	local26, #8
13cac     0C 00 90 FD | 	jmp	#LR__1713
13cb0                 | LR__1711
13cb0     05 D8 06 F6 | 	mov	local26, #5
13cb4     04 00 90 FD | 	jmp	#LR__1713
13cb8                 | LR__1712
13cb8     0C D8 06 F6 | 	mov	local26, #12
13cbc                 | LR__1713
13cbc                 | '   if esize=12 andalso t1.result.uresult<$80000 then
13cbc     0C D8 0E F2 | 	cmp	local26, #12 wz
13cc0     34 01 90 5D |  if_ne	jmp	#LR__1717
13cc4     00 04 00 FF 
13cc8     00 A6 16 F2 | 	cmp	local01, ##524288 wc
13ccc     28 01 90 3D |  if_ae	jmp	#LR__1717
13cd0                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
13cd0     53 00 00 FF 
13cd4     68 65 06 F1 | 	add	objptr, ##42856
13cd8     32 D1 02 FB | 	rdlong	local22, objptr
13cdc     53 00 00 FF 
13ce0     68 65 86 F1 | 	sub	objptr, ##42856
13ce4     1C D0 0E F2 | 	cmp	local22, #28 wz
13ce8     2C 00 90 5D |  if_ne	jmp	#LR__1714
13cec     5A AF 02 F6 | 	mov	local05, local08
13cf0     02 AE 66 F0 | 	shl	local05, #2
13cf4     E7 B0 02 F6 | 	mov	local06, fp
13cf8     2C B0 06 F1 | 	add	local06, #44
13cfc     58 AF 02 F1 | 	add	local05, local06
13d00     57 93 02 FB | 	rdlong	arg01, local05
13d04     00 94 06 F6 | 	mov	arg02, #0
13d08     00 3A B1 FD | 	call	#__system____builtin_atoi
13d0c     3D 95 02 F6 | 	mov	arg02, result1
13d10     53 93 02 F6 | 	mov	arg01, local01
13d14     49 95 62 FC | 	wrlong	arg02, arg01
13d18                 | LR__1714
13d18                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
13d18     53 00 00 FF 
13d1c     68 65 06 F1 | 	add	objptr, ##42856
13d20     32 D1 02 FB | 	rdlong	local22, objptr
13d24     53 00 00 FF 
13d28     68 65 86 F1 | 	sub	objptr, ##42856
13d2c     1D D0 0E F2 | 	cmp	local22, #29 wz
13d30     2C 00 90 5D |  if_ne	jmp	#LR__1715
13d34     5A AF 02 F6 | 	mov	local05, local08
13d38     02 AE 66 F0 | 	shl	local05, #2
13d3c     E7 B0 02 F6 | 	mov	local06, fp
13d40     2C B0 06 F1 | 	add	local06, #44
13d44     58 AF 02 F1 | 	add	local05, local06
13d48     57 93 02 FB | 	rdlong	arg01, local05
13d4c     00 94 06 F6 | 	mov	arg02, #0
13d50     B8 39 B1 FD | 	call	#__system____builtin_atoi
13d54     3D 95 02 F6 | 	mov	arg02, result1
13d58     53 93 02 F6 | 	mov	arg01, local01
13d5c     49 95 62 FC | 	wrlong	arg02, arg01
13d60                 | LR__1715
13d60                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
13d60     53 00 00 FF 
13d64     68 65 06 F1 | 	add	objptr, ##42856
13d68     32 D1 02 FB | 	rdlong	local22, objptr
13d6c     53 00 00 FF 
13d70     68 65 86 F1 | 	sub	objptr, ##42856
13d74     1E D0 0E F2 | 	cmp	local22, #30 wz
13d78     3C 00 90 5D |  if_ne	jmp	#LR__1716
13d7c     5A AD 02 F6 | 	mov	local04, local08
13d80     02 AC 66 F0 | 	shl	local04, #2
13d84     E7 AE 02 F6 | 	mov	local05, fp
13d88     2C AE 06 F1 | 	add	local05, #44
13d8c     57 AD 02 F1 | 	add	local04, local05
13d90     56 93 02 FB | 	rdlong	arg01, local04
13d94     0C 3B B1 FD | 	call	#__system____builtin_atof
13d98     28 CE 05 F1 | 	add	fp, #40
13d9c     E7 7A 62 FC | 	wrlong	result1, fp
13da0     E7 92 02 F6 | 	mov	arg01, fp
13da4     28 CE 85 F1 | 	sub	fp, #40
13da8     49 7B 02 FB | 	rdlong	result1, arg01
13dac     3D 95 02 F6 | 	mov	arg02, result1
13db0     53 93 02 F6 | 	mov	arg01, local01
13db4     49 95 62 FC | 	wrlong	arg02, arg01
13db8                 | LR__1716
13db8                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
13db8     53 00 00 FF 
13dbc     68 65 06 F1 | 	add	objptr, ##42856
13dc0     32 D1 02 FB | 	rdlong	local22, objptr
13dc4     2B D0 0E F2 | 	cmp	local22, #43 wz
13dc8     53 93 02 A6 |  if_e	mov	arg01, local01
13dcc     67 95 02 A6 |  if_e	mov	arg02, local21
13dd0     49 95 62 AC |  if_e	wrlong	arg02, arg01
13dd4     53 D1 02 F6 | 	mov	local22, local01
13dd8     08 D0 06 F1 | 	add	local22, #8
13ddc     32 AD 02 FB | 	rdlong	local04, objptr
13de0     53 00 00 FF 
13de4     68 65 86 F1 | 	sub	objptr, ##42856
13de8     56 D3 02 F6 | 	mov	local23, local04
13dec     68 93 02 F6 | 	mov	arg01, local22
13df0     69 95 02 F6 | 	mov	arg02, local23
13df4     49 95 62 FC | 	wrlong	arg02, arg01
13df8                 | LR__1717
13df8                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
13df8     0C D8 0E F2 | 	cmp	local26, #12 wz
13dfc     38 01 90 5D |  if_ne	jmp	#LR__1721
13e00     00 04 00 FF 
13e04     00 A6 16 F2 | 	cmp	local01, ##524288 wc
13e08     2C 01 90 CD |  if_b	jmp	#LR__1721
13e0c                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
13e0c     53 00 00 FF 
13e10     68 65 06 F1 | 	add	objptr, ##42856
13e14     32 D1 02 FB | 	rdlong	local22, objptr
13e18     53 00 00 FF 
13e1c     68 65 86 F1 | 	sub	objptr, ##42856
13e20     1C D0 0E F2 | 	cmp	local22, #28 wz
13e24     2C 00 90 5D |  if_ne	jmp	#LR__1718
13e28     5A AF 02 F6 | 	mov	local05, local08
13e2c     02 AE 66 F0 | 	shl	local05, #2
13e30     E7 B0 02 F6 | 	mov	local06, fp
13e34     2C B0 06 F1 | 	add	local06, #44
13e38     58 AF 02 F1 | 	add	local05, local06
13e3c     57 93 02 FB | 	rdlong	arg01, local05
13e40     00 94 06 F6 | 	mov	arg02, #0
13e44     C4 38 B1 FD | 	call	#__system____builtin_atoi
13e48     3D 95 02 F6 | 	mov	arg02, result1
13e4c     53 93 02 F6 | 	mov	arg01, local01
13e50     84 D3 B0 FD | 	call	#_pslpoke
13e54                 | LR__1718
13e54                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
13e54     53 00 00 FF 
13e58     68 65 06 F1 | 	add	objptr, ##42856
13e5c     32 D1 02 FB | 	rdlong	local22, objptr
13e60     53 00 00 FF 
13e64     68 65 86 F1 | 	sub	objptr, ##42856
13e68     1D D0 0E F2 | 	cmp	local22, #29 wz
13e6c     2C 00 90 5D |  if_ne	jmp	#LR__1719
13e70     5A AF 02 F6 | 	mov	local05, local08
13e74     02 AE 66 F0 | 	shl	local05, #2
13e78     E7 B0 02 F6 | 	mov	local06, fp
13e7c     2C B0 06 F1 | 	add	local06, #44
13e80     58 AF 02 F1 | 	add	local05, local06
13e84     57 93 02 FB | 	rdlong	arg01, local05
13e88     00 94 06 F6 | 	mov	arg02, #0
13e8c     7C 38 B1 FD | 	call	#__system____builtin_atoi
13e90     3D 95 02 F6 | 	mov	arg02, result1
13e94     53 93 02 F6 | 	mov	arg01, local01
13e98     3C D3 B0 FD | 	call	#_pslpoke
13e9c                 | LR__1719
13e9c                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13e9c     53 00 00 FF 
13ea0     68 65 06 F1 | 	add	objptr, ##42856
13ea4     32 D1 02 FB | 	rdlong	local22, objptr
13ea8     53 00 00 FF 
13eac     68 65 86 F1 | 	sub	objptr, ##42856
13eb0     1E D0 0E F2 | 	cmp	local22, #30 wz
13eb4     38 00 90 5D |  if_ne	jmp	#LR__1720
13eb8     5A AD 02 F6 | 	mov	local04, local08
13ebc     02 AC 66 F0 | 	shl	local04, #2
13ec0     E7 AE 02 F6 | 	mov	local05, fp
13ec4     2C AE 06 F1 | 	add	local05, #44
13ec8     57 AD 02 F1 | 	add	local04, local05
13ecc     56 93 02 FB | 	rdlong	arg01, local04
13ed0     D0 39 B1 FD | 	call	#__system____builtin_atof
13ed4     28 CE 05 F1 | 	add	fp, #40
13ed8     E7 7A 62 FC | 	wrlong	result1, fp
13edc     E7 92 02 F6 | 	mov	arg01, fp
13ee0     28 CE 85 F1 | 	sub	fp, #40
13ee4     49 95 02 FB | 	rdlong	arg02, arg01
13ee8     53 93 02 F6 | 	mov	arg01, local01
13eec     E8 D2 B0 FD | 	call	#_pslpoke
13ef0                 | LR__1720
13ef0                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
13ef0     53 00 00 FF 
13ef4     68 65 06 F1 | 	add	objptr, ##42856
13ef8     32 D1 02 FB | 	rdlong	local22, objptr
13efc     53 00 00 FF 
13f00     68 65 86 F1 | 	sub	objptr, ##42856
13f04     2B D0 0E F2 | 	cmp	local22, #43 wz
13f08     53 93 02 A6 |  if_e	mov	arg01, local01
13f0c     67 95 02 A6 |  if_e	mov	arg02, local21
13f10     C4 D2 B0 AD |  if_e	call	#_pslpoke
13f14     53 93 02 F6 | 	mov	arg01, local01
13f18     08 92 06 F1 | 	add	arg01, #8
13f1c     53 00 00 FF 
13f20     68 65 06 F1 | 	add	objptr, ##42856
13f24     32 D3 02 FB | 	rdlong	local23, objptr
13f28     53 00 00 FF 
13f2c     68 65 86 F1 | 	sub	objptr, ##42856
13f30     69 95 02 F6 | 	mov	arg02, local23
13f34     A0 D2 B0 FD | 	call	#_pslpoke
13f38                 | LR__1721
13f38                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
13f38     05 D8 0E F2 | 	cmp	local26, #5 wz
13f3c     53 00 00 AF 
13f40     68 65 06 A1 |  if_e	add	objptr, ##42856
13f44     32 D3 02 AB |  if_e	rdlong	local23, objptr
13f48     53 00 00 AF 
13f4c     68 65 86 A1 |  if_e	sub	objptr, ##42856
13f50     2B D2 0E A2 |  if_e	cmp	local23, #43 wz
13f54     67 D3 02 A6 |  if_e	mov	local23, local21
13f58     53 93 02 A6 |  if_e	mov	arg01, local01
13f5c     69 95 02 A6 |  if_e	mov	arg02, local23
13f60     74 D2 B0 AD |  if_e	call	#_pslpoke
13f64                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
13f64     04 D8 0E F2 | 	cmp	local26, #4 wz
13f68     48 00 90 5D |  if_ne	jmp	#LR__1722
13f6c     53 00 00 FF 
13f70     68 65 06 F1 | 	add	objptr, ##42856
13f74     32 D3 02 FB | 	rdlong	local23, objptr
13f78     53 00 00 FF 
13f7c     68 65 86 F1 | 	sub	objptr, ##42856
13f80     2B D2 0E F2 | 	cmp	local23, #43 wz
13f84     2C 00 90 AD |  if_e	jmp	#LR__1722
13f88     5A AF 02 F6 | 	mov	local05, local08
13f8c     02 AE 66 F0 | 	shl	local05, #2
13f90     E7 B0 02 F6 | 	mov	local06, fp
13f94     2C B0 06 F1 | 	add	local06, #44
13f98     58 AF 02 F1 | 	add	local05, local06
13f9c     57 93 02 FB | 	rdlong	arg01, local05
13fa0     00 94 06 F6 | 	mov	arg02, #0
13fa4     64 37 B1 FD | 	call	#__system____builtin_atoi
13fa8     3D 95 02 F6 | 	mov	arg02, result1
13fac     53 93 02 F6 | 	mov	arg01, local01
13fb0     24 D2 B0 FD | 	call	#_pslpoke
13fb4                 | LR__1722
13fb4                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
13fb4     02 D8 0E F2 | 	cmp	local26, #2 wz
13fb8     48 00 90 5D |  if_ne	jmp	#LR__1723
13fbc     53 00 00 FF 
13fc0     68 65 06 F1 | 	add	objptr, ##42856
13fc4     32 D3 02 FB | 	rdlong	local23, objptr
13fc8     53 00 00 FF 
13fcc     68 65 86 F1 | 	sub	objptr, ##42856
13fd0     2B D2 0E F2 | 	cmp	local23, #43 wz
13fd4     2C 00 90 AD |  if_e	jmp	#LR__1723
13fd8     5A AF 02 F6 | 	mov	local05, local08
13fdc     02 AE 66 F0 | 	shl	local05, #2
13fe0     E7 B0 02 F6 | 	mov	local06, fp
13fe4     2C B0 06 F1 | 	add	local06, #44
13fe8     58 AF 02 F1 | 	add	local05, local06
13fec     57 93 02 FB | 	rdlong	arg01, local05
13ff0     00 94 06 F6 | 	mov	arg02, #0
13ff4     14 37 B1 FD | 	call	#__system____builtin_atoi
13ff8     3D 95 02 F6 | 	mov	arg02, result1
13ffc     53 93 02 F6 | 	mov	arg01, local01
14000     1C D2 B0 FD | 	call	#_psdpoke
14004                 | LR__1723
14004                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
14004     01 D8 0E F2 | 	cmp	local26, #1 wz
14008     48 00 90 5D |  if_ne	jmp	#LR__1724
1400c     53 00 00 FF 
14010     68 65 06 F1 | 	add	objptr, ##42856
14014     32 D3 02 FB | 	rdlong	local23, objptr
14018     53 00 00 FF 
1401c     68 65 86 F1 | 	sub	objptr, ##42856
14020     2B D2 0E F2 | 	cmp	local23, #43 wz
14024     2C 00 90 AD |  if_e	jmp	#LR__1724
14028     5A AF 02 F6 | 	mov	local05, local08
1402c     02 AE 66 F0 | 	shl	local05, #2
14030     E7 B0 02 F6 | 	mov	local06, fp
14034     2C B0 06 F1 | 	add	local06, #44
14038     58 AF 02 F1 | 	add	local05, local06
1403c     57 93 02 FB | 	rdlong	arg01, local05
14040     00 94 06 F6 | 	mov	arg02, #0
14044     C4 36 B1 FD | 	call	#__system____builtin_atoi
14048     3D 95 02 F6 | 	mov	arg02, result1
1404c     53 93 02 F6 | 	mov	arg01, local01
14050     14 D2 B0 FD | 	call	#_pspoke
14054                 | LR__1724
14054                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
14054     06 D8 0E F2 | 	cmp	local26, #6 wz
14058     54 00 90 5D |  if_ne	jmp	#LR__1725
1405c     53 00 00 FF 
14060     68 65 06 F1 | 	add	objptr, ##42856
14064     32 D3 02 FB | 	rdlong	local23, objptr
14068     53 00 00 FF 
1406c     68 65 86 F1 | 	sub	objptr, ##42856
14070     2B D2 0E F2 | 	cmp	local23, #43 wz
14074     38 00 90 AD |  if_e	jmp	#LR__1725
14078     5A AD 02 F6 | 	mov	local04, local08
1407c     02 AC 66 F0 | 	shl	local04, #2
14080     E7 AE 02 F6 | 	mov	local05, fp
14084     2C AE 06 F1 | 	add	local05, #44
14088     57 AD 02 F1 | 	add	local04, local05
1408c     56 93 02 FB | 	rdlong	arg01, local04
14090     10 38 B1 FD | 	call	#__system____builtin_atof
14094     28 CE 05 F1 | 	add	fp, #40
14098     E7 7A 62 FC | 	wrlong	result1, fp
1409c     E7 92 02 F6 | 	mov	arg01, fp
140a0     28 CE 85 F1 | 	sub	fp, #40
140a4     49 95 02 FB | 	rdlong	arg02, arg01
140a8     53 93 02 F6 | 	mov	arg01, local01
140ac     28 D1 B0 FD | 	call	#_pslpoke
140b0                 | LR__1725
140b0     01 B4 06 F1 | 	add	local08, #1
140b4     30 F9 9F FD | 	jmp	#LR__1693
140b8                 | LR__1726
140b8                 | LR__1727
140b8     E7 F0 03 F6 | 	mov	ptra, fp
140bc     F2 00 A0 FD | 	call	#popregs_
140c0                 | _do_input_ret
140c0     2D 00 64 FD | 	ret
140c4                 | 
140c4                 | ' 
140c4                 | ' ' ----------------  left$
140c4                 | ' 
140c4                 | ' sub do_left
140c4                 | _do_left
140c4     01 CA 05 F6 | 	mov	COUNT_, #1
140c8     E8 00 A0 FD | 	call	#pushregs_
140cc     14 F0 07 F1 | 	add	ptra, #20
140d0     4B 00 00 FF 
140d4     A0 64 06 F1 | 	add	objptr, ##38560
140d8     32 97 02 FB | 	rdlong	arg03, objptr
140dc     4B 95 02 F6 | 	mov	arg02, arg03
140e0     01 94 66 F0 | 	shl	arg02, #1
140e4     4B 95 02 F1 | 	add	arg02, arg03
140e8     02 94 66 F0 | 	shl	arg02, #2
140ec     03 00 00 FF 
140f0     04 64 86 F1 | 	sub	objptr, ##1540
140f4     32 95 02 F1 | 	add	arg02, objptr
140f8     4A 97 02 FB | 	rdlong	arg03, arg02
140fc                 | ' 
140fc                 | ' numpar=compiledline(lineptr_e).result.uresult
140fc                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
140fc     02 96 0E F2 | 	cmp	arg03, #2 wz
14100     48 00 00 FF 
14104     9C 64 86 F1 | 	sub	objptr, ##37020
14108     40 00 90 AD |  if_e	jmp	#LR__1730
1410c     00 92 06 F6 | 	mov	arg01, #0
14110     28 5E B1 FD | 	call	#__system___getiolock_0622
14114     3D 93 02 F6 | 	mov	arg01, result1
14118     9C 08 B1 FD | 	call	#__system___lockmem
1411c     97 01 00 FF 
14120     6E 95 06 F6 | 	mov	arg02, ##@LR__6026
14124     00 92 06 F6 | 	mov	arg01, #0
14128     00 96 06 F6 | 	mov	arg03, #0
1412c     7C 15 B1 FD | 	call	#__system___basic_print_string
14130     00 92 06 F6 | 	mov	arg01, #0
14134     04 5E B1 FD | 	call	#__system___getiolock_0622
14138     3D 01 68 FC | 	wrlong	#0, result1
1413c     27 92 06 F6 | 	mov	arg01, #39
14140     00 94 06 F6 | 	mov	arg02, #0
14144     F4 CE B0 FD | 	call	#_printerror
14148     D8 00 90 FD | 	jmp	#LR__1733
1414c                 | LR__1730
1414c     38 95 BF FD | 	call	#_pop
14150     3F 97 02 F6 | 	mov	arg03, result3
14154     E7 7A 62 FC | 	wrlong	result1, fp
14158     04 CE 05 F1 | 	add	fp, #4
1415c     E7 7C 62 FC | 	wrlong	result2, fp
14160     04 CE 05 F1 | 	add	fp, #4
14164     E7 96 62 FC | 	wrlong	arg03, fp
14168     08 CE 85 F1 | 	sub	fp, #8
1416c     E7 92 02 F6 | 	mov	arg01, fp
14170     F0 96 BF FD | 	call	#_converttoint
14174     3D A7 02 F6 | 	mov	local01, result1
14178     0C 95 BF FD | 	call	#_pop
1417c     3F 97 02 F6 | 	mov	arg03, result3
14180     E7 7A 62 FC | 	wrlong	result1, fp
14184     04 CE 05 F1 | 	add	fp, #4
14188     E7 7C 62 FC | 	wrlong	result2, fp
1418c     04 CE 05 F1 | 	add	fp, #4
14190     E7 96 62 FC | 	wrlong	arg03, fp
14194                 | ' t1=pop() : arg=converttoint(t1)
14194                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14194     08 CE 85 F1 | 	sub	fp, #8
14198     2B 96 0E F2 | 	cmp	arg03, #43 wz
1419c     18 00 90 5D |  if_ne	jmp	#LR__1731
141a0     E7 92 02 FB | 	rdlong	arg01, fp
141a4     50 96 BF FD | 	call	#_convertstring
141a8     E7 7A 62 FC | 	wrlong	result1, fp
141ac     08 CE 05 F1 | 	add	fp, #8
141b0     E7 3E 68 FC | 	wrlong	#31, fp
141b4     08 CE 85 F1 | 	sub	fp, #8
141b8                 | LR__1731
141b8                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
141b8     08 CE 05 F1 | 	add	fp, #8
141bc     E7 96 02 FB | 	rdlong	arg03, fp
141c0     08 CE 85 F1 | 	sub	fp, #8
141c4     1F 96 0E F2 | 	cmp	arg03, #31 wz
141c8     40 00 90 AD |  if_e	jmp	#LR__1732
141cc     00 92 06 F6 | 	mov	arg01, #0
141d0     68 5D B1 FD | 	call	#__system___getiolock_0622
141d4     3D 93 02 F6 | 	mov	arg01, result1
141d8     DC 07 B1 FD | 	call	#__system___lockmem
141dc     97 01 00 FF 
141e0     76 95 06 F6 | 	mov	arg02, ##@LR__6027
141e4     00 92 06 F6 | 	mov	arg01, #0
141e8     00 96 06 F6 | 	mov	arg03, #0
141ec     BC 14 B1 FD | 	call	#__system___basic_print_string
141f0     00 92 06 F6 | 	mov	arg01, #0
141f4     44 5D B1 FD | 	call	#__system___getiolock_0622
141f8     3D 01 68 FC | 	wrlong	#0, result1
141fc     0F 92 06 F6 | 	mov	arg01, #15
14200     00 94 06 F6 | 	mov	arg02, #0
14204     34 CE B0 FD | 	call	#_printerror
14208     18 00 90 FD | 	jmp	#LR__1733
1420c                 | LR__1732
1420c     E7 92 02 FB | 	rdlong	arg01, fp
14210     53 95 02 F6 | 	mov	arg02, local01
14214     48 20 B1 FD | 	call	#__system__Left_S
14218     E7 7A 62 FC | 	wrlong	result1, fp
1421c     E7 92 02 F6 | 	mov	arg01, fp
14220     F4 94 BF FD | 	call	#_push
14224                 | LR__1733
14224     E7 F0 03 F6 | 	mov	ptra, fp
14228     F2 00 A0 FD | 	call	#popregs_
1422c                 | _do_left_ret
1422c     2D 00 64 FD | 	ret
14230                 | 
14230                 | ' 
14230                 | ' ' ----------------  len
14230                 | ' 
14230                 | ' sub do_len
14230                 | _do_len
14230     01 CA 05 F6 | 	mov	COUNT_, #1
14234     E8 00 A0 FD | 	call	#pushregs_
14238     14 F0 07 F1 | 	add	ptra, #20
1423c     4B 00 00 FF 
14240     A0 64 06 F1 | 	add	objptr, ##38560
14244     32 97 02 FB | 	rdlong	arg03, objptr
14248     4B 95 02 F6 | 	mov	arg02, arg03
1424c     01 94 66 F0 | 	shl	arg02, #1
14250     4B 95 02 F1 | 	add	arg02, arg03
14254     02 94 66 F0 | 	shl	arg02, #2
14258     03 00 00 FF 
1425c     04 64 86 F1 | 	sub	objptr, ##1540
14260     32 95 02 F1 | 	add	arg02, objptr
14264     4A 97 02 FB | 	rdlong	arg03, arg02
14268                 | ' 
14268                 | ' numpar=compiledline(lineptr_e).result.uresult
14268                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
14268     02 96 16 F2 | 	cmp	arg03, #2 wc
1426c     48 00 00 FF 
14270     9C 64 86 F1 | 	sub	objptr, ##37020
14274     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
14278     40 00 90 4D |  if_c_and_nz	jmp	#LR__1740
1427c     00 92 06 F6 | 	mov	arg01, #0
14280     B8 5C B1 FD | 	call	#__system___getiolock_0622
14284     3D 93 02 F6 | 	mov	arg01, result1
14288     2C 07 B1 FD | 	call	#__system___lockmem
1428c     97 01 00 FF 
14290     7E 95 06 F6 | 	mov	arg02, ##@LR__6028
14294     00 92 06 F6 | 	mov	arg01, #0
14298     00 96 06 F6 | 	mov	arg03, #0
1429c     0C 14 B1 FD | 	call	#__system___basic_print_string
142a0     00 92 06 F6 | 	mov	arg01, #0
142a4     94 5C B1 FD | 	call	#__system___getiolock_0622
142a8     3D 01 68 FC | 	wrlong	#0, result1
142ac     27 92 06 F6 | 	mov	arg01, #39
142b0     00 94 06 F6 | 	mov	arg02, #0
142b4     84 CD B0 FD | 	call	#_printerror
142b8     C8 00 90 FD | 	jmp	#LR__1745
142bc                 | LR__1740
142bc     C8 93 BF FD | 	call	#_pop
142c0     3F 97 02 F6 | 	mov	arg03, result3
142c4     E7 7A 62 FC | 	wrlong	result1, fp
142c8     04 CE 05 F1 | 	add	fp, #4
142cc     E7 7C 62 FC | 	wrlong	result2, fp
142d0     04 CE 05 F1 | 	add	fp, #4
142d4     E7 96 62 FC | 	wrlong	arg03, fp
142d8                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
142d8     08 CE 85 F1 | 	sub	fp, #8
142dc     2B 96 0E F2 | 	cmp	arg03, #43 wz
142e0     18 00 90 5D |  if_ne	jmp	#LR__1741
142e4     E7 92 02 FB | 	rdlong	arg01, fp
142e8     0C 95 BF FD | 	call	#_convertstring
142ec     E7 7A 62 FC | 	wrlong	result1, fp
142f0     08 CE 05 F1 | 	add	fp, #8
142f4     E7 3E 68 FC | 	wrlong	#31, fp
142f8     08 CE 85 F1 | 	sub	fp, #8
142fc                 | LR__1741
142fc                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
142fc     08 CE 05 F1 | 	add	fp, #8
14300     E7 96 02 FB | 	rdlong	arg03, fp
14304     08 CE 85 F1 | 	sub	fp, #8
14308     1F 96 0E F2 | 	cmp	arg03, #31 wz
1430c     40 00 90 AD |  if_e	jmp	#LR__1742
14310     00 92 06 F6 | 	mov	arg01, #0
14314     24 5C B1 FD | 	call	#__system___getiolock_0622
14318     3D 93 02 F6 | 	mov	arg01, result1
1431c     98 06 B1 FD | 	call	#__system___lockmem
14320     97 01 00 FF 
14324     84 95 06 F6 | 	mov	arg02, ##@LR__6029
14328     00 92 06 F6 | 	mov	arg01, #0
1432c     00 96 06 F6 | 	mov	arg03, #0
14330     78 13 B1 FD | 	call	#__system___basic_print_string
14334     00 92 06 F6 | 	mov	arg01, #0
14338     00 5C B1 FD | 	call	#__system___getiolock_0622
1433c     3D 01 68 FC | 	wrlong	#0, result1
14340     0F 92 06 F6 | 	mov	arg01, #15
14344     00 94 06 F6 | 	mov	arg02, #0
14348     F0 CC B0 FD | 	call	#_printerror
1434c     34 00 90 FD | 	jmp	#LR__1745
14350                 | LR__1742
14350     E7 92 02 FB | 	rdlong	arg01, fp
14354     49 A7 02 F6 | 	mov	local01, arg01
14358     D7 06 48 FB | 	callpa	#(@LR__1744-@LR__1743)>>2,fcache_load_ptr_
1435c                 | LR__1743
1435c     53 7B CA FA | 	rdbyte	result1, local01 wz
14360     01 A6 06 51 |  if_ne	add	local01, #1
14364     F4 FF 9F 5D |  if_ne	jmp	#LR__1743
14368                 | LR__1744
14368     49 A7 82 F1 | 	sub	local01, arg01
1436c     E7 A6 62 FC | 	wrlong	local01, fp
14370     08 CE 05 F1 | 	add	fp, #8
14374     E7 38 68 FC | 	wrlong	#28, fp
14378     08 CE 85 F1 | 	sub	fp, #8
1437c     E7 92 02 F6 | 	mov	arg01, fp
14380     94 93 BF FD | 	call	#_push
14384                 | LR__1745
14384     E7 F0 03 F6 | 	mov	ptra, fp
14388     F2 00 A0 FD | 	call	#popregs_
1438c                 | _do_len_ret
1438c     2D 00 64 FD | 	ret
14390                 | 
14390                 | ' 
14390                 | ' ' ----------------  list
14390                 | ' 
14390                 | ' sub do_list
14390                 | _do_list
14390     04 CA 05 F6 | 	mov	COUNT_, #4
14394     E8 00 A0 FD | 	call	#pushregs_
14398     B8 F0 07 F1 | 	add	ptra, #184
1439c     00 A6 06 F6 | 	mov	local01, #0
143a0     1E A8 CE F9 | 	bmask	local02, #30
143a4     4B 00 00 FF 
143a8     A0 64 06 F1 | 	add	objptr, ##38560
143ac     32 AB 02 FB | 	rdlong	local03, objptr
143b0     55 97 02 F6 | 	mov	arg03, local03
143b4     01 96 66 F0 | 	shl	arg03, #1
143b8     55 97 02 F1 | 	add	arg03, local03
143bc     02 96 66 F0 | 	shl	arg03, #2
143c0     03 00 00 FF 
143c4     04 64 86 F1 | 	sub	objptr, ##1540
143c8     32 97 02 F1 | 	add	arg03, objptr
143cc     4B AD 02 FB | 	rdlong	local04, arg03
143d0                 | ' 
143d0                 | ' startline=0 : endline=$7FFFFFFF
143d0                 | ' numpar=compiledline(lineptr_e).result.uresult
143d0                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
143d0     01 AC 0E F2 | 	cmp	local04, #1 wz
143d4     48 00 00 FF 
143d8     9C 64 86 F1 | 	sub	objptr, ##37020
143dc     34 00 90 5D |  if_ne	jmp	#LR__1750
143e0     A4 92 BF FD | 	call	#_pop
143e4     3F AB 02 F6 | 	mov	local03, result3
143e8     0C CE 05 F1 | 	add	fp, #12
143ec     E7 7A 62 FC | 	wrlong	result1, fp
143f0     04 CE 05 F1 | 	add	fp, #4
143f4     E7 7C 62 FC | 	wrlong	result2, fp
143f8     04 CE 05 F1 | 	add	fp, #4
143fc     E7 AA 62 FC | 	wrlong	local03, fp
14400     08 CE 85 F1 | 	sub	fp, #8
14404     E7 92 02 F6 | 	mov	arg01, fp
14408     0C CE 85 F1 | 	sub	fp, #12
1440c     54 94 BF FD | 	call	#_converttoint
14410     3D A7 02 F6 | 	mov	local01, result1
14414                 | LR__1750
14414                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
14414     02 AC 0E F2 | 	cmp	local04, #2 wz
14418     68 00 90 5D |  if_ne	jmp	#LR__1751
1441c     68 92 BF FD | 	call	#_pop
14420     3F AB 02 F6 | 	mov	local03, result3
14424     0C CE 05 F1 | 	add	fp, #12
14428     E7 7A 62 FC | 	wrlong	result1, fp
1442c     04 CE 05 F1 | 	add	fp, #4
14430     E7 7C 62 FC | 	wrlong	result2, fp
14434     04 CE 05 F1 | 	add	fp, #4
14438     E7 AA 62 FC | 	wrlong	local03, fp
1443c     08 CE 85 F1 | 	sub	fp, #8
14440     E7 92 02 F6 | 	mov	arg01, fp
14444     0C CE 85 F1 | 	sub	fp, #12
14448     18 94 BF FD | 	call	#_converttoint
1444c     3D A9 02 F6 | 	mov	local02, result1
14450     34 92 BF FD | 	call	#_pop
14454     3F AB 02 F6 | 	mov	local03, result3
14458     0C CE 05 F1 | 	add	fp, #12
1445c     E7 7A 62 FC | 	wrlong	result1, fp
14460     04 CE 05 F1 | 	add	fp, #4
14464     E7 7C 62 FC | 	wrlong	result2, fp
14468     04 CE 05 F1 | 	add	fp, #4
1446c     E7 AA 62 FC | 	wrlong	local03, fp
14470     08 CE 85 F1 | 	sub	fp, #8
14474     E7 92 02 F6 | 	mov	arg01, fp
14478     0C CE 85 F1 | 	sub	fp, #12
1447c     E4 93 BF FD | 	call	#_converttoint
14480     3D A7 02 F6 | 	mov	local01, result1
14484                 | LR__1751
14484                 | ' 
14484                 | ' 
14484                 | ' print
14484     00 92 06 F6 | 	mov	arg01, #0
14488     B0 5A B1 FD | 	call	#__system___getiolock_0622
1448c     3D 93 02 F6 | 	mov	arg01, result1
14490     24 05 B1 FD | 	call	#__system___lockmem
14494     00 92 06 F6 | 	mov	arg01, #0
14498     0A 94 06 F6 | 	mov	arg02, #10
1449c     00 96 06 F6 | 	mov	arg03, #0
144a0     B0 11 B1 FD | 	call	#__system___basic_print_char
144a4     00 92 06 F6 | 	mov	arg01, #0
144a8     90 5A B1 FD | 	call	#__system___getiolock_0622
144ac     3D 01 68 FC | 	wrlong	#0, result1
144b0     4B 00 00 FF 
144b4     A8 64 06 F1 | 	add	objptr, ##38568
144b8     32 AD 02 FB | 	rdlong	local04, objptr
144bc     08 00 00 FF 
144c0     CC 64 06 F1 | 	add	objptr, ##4300
144c4     32 AD 62 FC | 	wrlong	local04, objptr
144c8     53 00 00 FF 
144cc     74 65 86 F1 | 	sub	objptr, ##42868
144d0                 | ' do 
144d0                 | LR__1752
144d0     E7 92 02 F6 | 	mov	arg01, fp
144d4     20 92 06 F1 | 	add	arg01, #32
144d8     53 00 00 FF 
144dc     74 65 06 F1 | 	add	objptr, ##42868
144e0     32 95 02 FB | 	rdlong	arg02, objptr
144e4     18 96 06 F6 | 	mov	arg03, #24
144e8     48 00 00 FF 
144ec     A8 64 86 F1 | 	sub	objptr, ##37032
144f0     A4 F8 B0 FD | 	call	#_psram_spin2_read1
144f4     0B 00 00 FF 
144f8     CC 64 86 F1 | 	sub	objptr, ##5836
144fc                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
144fc                 | '   
144fc                 | '   if header(0)<> $FFFFFFFF then
144fc     20 CE 05 F1 | 	add	fp, #32
14500     E7 AC 02 FB | 	rdlong	local04, fp
14504     20 CE 85 F1 | 	sub	fp, #32
14508     FF FF 7F FF 
1450c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
14510     9C 00 90 AD |  if_e	jmp	#LR__1754
14514     E7 92 02 F6 | 	mov	arg01, fp
14518     38 92 06 F1 | 	add	arg01, #56
1451c     3F 96 06 F6 | 	mov	arg03, #63
14520     28 96 62 FD | 	setq	arg03
14524     49 01 68 FC | 	wrlong	#0, arg01
14528     E7 92 02 F6 | 	mov	arg01, fp
1452c     38 92 06 F1 | 	add	arg01, #56
14530     28 CE 05 F1 | 	add	fp, #40
14534     E7 94 02 FB | 	rdlong	arg02, fp
14538     04 CE 05 F1 | 	add	fp, #4
1453c     E7 96 02 FB | 	rdlong	arg03, fp
14540     2C CE 85 F1 | 	sub	fp, #44
14544     0B 00 00 FF 
14548     CC 64 06 F1 | 	add	objptr, ##5836
1454c     48 F8 B0 FD | 	call	#_psram_spin2_read1
14550     0B 00 00 FF 
14554     CC 64 86 F1 | 	sub	objptr, ##5836
14558                 | '     longfill(linebuf,0,64)
14558                 | '     psram.read1(varptr(linebuf),header(2),header(3))
14558                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
14558     20 CE 05 F1 | 	add	fp, #32
1455c     E7 AC 02 FB | 	rdlong	local04, fp
14560     20 CE 85 F1 | 	sub	fp, #32
14564     53 AD 52 F2 | 	cmps	local04, local01 wc
14568     24 00 90 CD |  if_b	jmp	#LR__1753
1456c     20 CE 05 F1 | 	add	fp, #32
14570     E7 AA 02 FB | 	rdlong	local03, fp
14574     20 CE 85 F1 | 	sub	fp, #32
14578     54 AB 5A F2 | 	cmps	local03, local02 wcz
1457c     10 00 90 1D |  if_a	jmp	#LR__1753
14580     E7 92 02 F6 | 	mov	arg01, fp
14584     38 92 06 F1 | 	add	arg01, #56
14588                 | ' 
14588                 | ' write(text)
14588     10 EC B0 FD | 	call	#_hg010b_spin2_write
1458c                 | ' crlf
1458c     AC F0 B0 FD | 	call	#_hg010b_spin2_crlf
14590                 | LR__1753
14590     34 CE 05 F1 | 	add	fp, #52
14594     E7 AC 02 FB | 	rdlong	local04, fp
14598     34 CE 85 F1 | 	sub	fp, #52
1459c     53 00 00 FF 
145a0     74 65 06 F1 | 	add	objptr, ##42868
145a4     32 AD 62 FC | 	wrlong	local04, objptr
145a8     53 00 00 FF 
145ac     74 65 86 F1 | 	sub	objptr, ##42868
145b0                 | LR__1754
145b0     34 CE 05 F1 | 	add	fp, #52
145b4     E7 AC 02 FB | 	rdlong	local04, fp
145b8     34 CE 85 F1 | 	sub	fp, #52
145bc     FF FF 3F FF 
145c0     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
145c4     20 CE 05 51 |  if_ne	add	fp, #32
145c8     E7 AA 02 5B |  if_ne	rdlong	local03, fp
145cc     20 CE 85 51 |  if_ne	sub	fp, #32
145d0     FF FF 7F 5F 
145d4     FF AB 0E 52 |  if_ne	cmp	local03, ##-1 wz
145d8     F4 FE 9F 5D |  if_ne	jmp	#LR__1752
145dc     E7 F0 03 F6 | 	mov	ptra, fp
145e0     F2 00 A0 FD | 	call	#popregs_
145e4                 | _do_list_ret
145e4     2D 00 64 FD | 	ret
145e8                 | 
145e8                 | ' 
145e8                 | ' '-------------------- load
145e8                 | ' 
145e8                 | ' sub do_load(amode=0 as integer)  
145e8                 | _do_load
145e8     07 CA 05 F6 | 	mov	COUNT_, #7
145ec     E8 00 A0 FD | 	call	#pushregs_
145f0     AC F0 07 F1 | 	add	ptra, #172
145f4     49 AD 02 F6 | 	mov	local04, arg01
145f8     53 00 00 FF 
145fc     2C 65 06 F1 | 	add	objptr, ##42796
14600     32 03 68 FC | 	wrlong	#1, objptr
14604     08 00 00 FF 
14608     8C 64 86 F1 | 	sub	objptr, ##4236
1460c     32 95 02 FB | 	rdlong	arg02, objptr
14610     4A 93 02 F6 | 	mov	arg01, arg02
14614     01 92 66 F0 | 	shl	arg01, #1
14618     4A 93 02 F1 | 	add	arg01, arg02
1461c     02 92 66 F0 | 	shl	arg01, #2
14620     03 00 00 FF 
14624     04 64 86 F1 | 	sub	objptr, ##1540
14628     32 93 02 F1 | 	add	arg01, objptr
1462c     49 AF 02 FB | 	rdlong	local05, arg01
14630     E7 92 02 F6 | 	mov	arg01, fp
14634     A8 92 06 F1 | 	add	arg01, #168
14638     48 00 00 FF 
1463c     9C 64 86 F1 | 	sub	objptr, ##37020
14640     E7 94 02 F6 | 	mov	arg02, fp
14644     28 94 06 F1 | 	add	arg02, #40
14648     49 95 62 FC | 	wrlong	arg02, arg01
1464c                 | ' 
1464c                 | ' inload=1
1464c                 | ' numpar=compiledline(lineptr_e).result.uresult
1464c                 | ' lpoke varptr(line2$),varptr(line2)
1464c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1464c     01 AE 56 F2 | 	cmps	local05, #1 wc
14650     14 00 90 CD |  if_b	jmp	#LR__1760
14654     30 90 BF FD | 	call	#_pop
14658     3D A7 02 F6 | 	mov	local01, result1
1465c     3E A9 02 F6 | 	mov	local02, result2
14660     3F AB 02 F6 | 	mov	local03, result3
14664     18 00 90 FD | 	jmp	#LR__1761
14668                 | LR__1760
14668     53 00 00 FF 
1466c     1C 65 06 F1 | 	add	objptr, ##42780
14670     32 A7 02 FB | 	rdlong	local01, objptr
14674     53 00 00 FF 
14678     1C 65 86 F1 | 	sub	objptr, ##42780
1467c     1F AA 06 F6 | 	mov	local03, #31
14680                 | LR__1761
14680                 | ' 'print "popped "; t1.result.uresult, t1.result_type
14680                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
14680     2B AA 0E F2 | 	cmp	local03, #43 wz
14684     10 00 90 5D |  if_ne	jmp	#LR__1762
14688     53 93 02 F6 | 	mov	arg01, local01
1468c     68 91 BF FD | 	call	#_convertstring
14690     3D A7 02 F6 | 	mov	local01, result1
14694     1F AA 06 F6 | 	mov	local03, #31
14698                 | LR__1762
14698                 | ' if t1.result_type=result_string then
14698     1F AA 0E F2 | 	cmp	local03, #31 wz
1469c     7C 02 90 5D |  if_ne	jmp	#LR__1766
146a0                 | '   if amode<>1234 then do_new
146a0     02 00 00 FF 
146a4     D2 AC 0E F2 | 	cmp	local04, ##1234 wz
146a8     D8 0D B0 5D |  if_ne	call	#_do_new
146ac                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
146ac     97 01 00 FF 
146b0     8A 95 06 F6 | 	mov	arg02, ##@LR__6030
146b4     53 93 02 F6 | 	mov	arg01, local01
146b8     24 03 B1 FD | 	call	#__system___string_cmp
146bc     00 7A 0E F2 | 	cmp	result1, #0 wz
146c0     53 00 00 AF 
146c4     1C 65 06 A1 |  if_e	add	objptr, ##42780
146c8     32 A7 02 AB |  if_e	rdlong	local01, objptr
146cc     53 00 00 FF 
146d0     1C 65 C6 F3 | 	sumz	objptr, ##42780
146d4     32 A7 62 5C |  if_ne	wrlong	local01, objptr
146d8     53 00 00 5F 
146dc     1C 65 86 51 |  if_ne	sub	objptr, ##42780
146e0                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
146e0     09 92 06 F6 | 	mov	arg01, #9
146e4     AC 4E B1 FD | 	call	#__system__close
146e8     09 AE 06 F6 | 	mov	local05, #9
146ec     4B 00 00 FF 
146f0     B4 64 06 F1 | 	add	objptr, ##38580
146f4     32 93 02 FB | 	rdlong	arg01, objptr
146f8     4B 00 00 FF 
146fc     B4 64 86 F1 | 	sub	objptr, ##38580
14700     97 01 00 FF 
14704     8B 95 06 F6 | 	mov	arg02, ##@LR__6031
14708     08 03 B1 FD | 	call	#__system___string_concat
1470c     3D 93 02 F6 | 	mov	arg01, result1
14710     53 95 02 F6 | 	mov	arg02, local01
14714     FC 02 B1 FD | 	call	#__system___string_concat
14718     3D 95 02 F6 | 	mov	arg02, result1
1471c     57 93 02 F6 | 	mov	arg01, local05
14720     00 96 06 F6 | 	mov	arg03, #0
14724     40 0E B1 FD | 	call	#__system___basic_open_string
14728     20 68 06 F1 | 	add	ptr___system__dat__, #32
1472c     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
14730     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
14734     20 68 86 F1 | 	sub	ptr___system__dat__, #32
14738                 | '   r=geterr() 
14738                 | '   if r then 
14738     30 01 90 AD |  if_e	jmp	#LR__1764
1473c                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
1473c     09 92 06 F6 | 	mov	arg01, #9
14740     50 4E B1 FD | 	call	#__system__close
14744     09 B0 06 F6 | 	mov	local06, #9
14748     4B 00 00 FF 
1474c     B4 64 06 F1 | 	add	objptr, ##38580
14750     32 93 02 FB | 	rdlong	arg01, objptr
14754     4B 00 00 FF 
14758     B4 64 86 F1 | 	sub	objptr, ##38580
1475c     97 01 00 FF 
14760     8D 95 06 F6 | 	mov	arg02, ##@LR__6032
14764     AC 02 B1 FD | 	call	#__system___string_concat
14768     3D 93 02 F6 | 	mov	arg01, result1
1476c     53 95 02 F6 | 	mov	arg02, local01
14770     A0 02 B1 FD | 	call	#__system___string_concat
14774     3D 93 02 F6 | 	mov	arg01, result1
14778     97 01 00 FF 
1477c     8F 95 06 F6 | 	mov	arg02, ##@LR__6033
14780     90 02 B1 FD | 	call	#__system___string_concat
14784     3D 95 02 F6 | 	mov	arg02, result1
14788     58 93 02 F6 | 	mov	arg01, local06
1478c     00 96 06 F6 | 	mov	arg03, #0
14790     D4 0D B1 FD | 	call	#__system___basic_open_string
14794     20 68 06 F1 | 	add	ptr___system__dat__, #32
14798     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
1479c     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
147a0     20 68 86 F1 | 	sub	ptr___system__dat__, #32
147a4     3D B3 0A F6 | 	mov	local07, result1 wz
147a8                 | '     r=geterr() 
147a8                 | '     if r then 
147a8     8C 00 90 AD |  if_e	jmp	#LR__1763
147ac                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
147ac     00 92 06 F6 | 	mov	arg01, #0
147b0     88 57 B1 FD | 	call	#__system___getiolock_0622
147b4     3D 93 02 F6 | 	mov	arg01, result1
147b8     FC 01 B1 FD | 	call	#__system___lockmem
147bc     97 01 00 FF 
147c0     94 95 06 F6 | 	mov	arg02, ##@LR__6034
147c4     00 92 06 F6 | 	mov	arg01, #0
147c8     00 96 06 F6 | 	mov	arg03, #0
147cc     DC 0E B1 FD | 	call	#__system___basic_print_string
147d0     00 92 06 F6 | 	mov	arg01, #0
147d4     59 95 02 F6 | 	mov	arg02, local07
147d8     00 96 06 F6 | 	mov	arg03, #0
147dc     0A 98 06 F6 | 	mov	arg04, #10
147e0     0C 0F B1 FD | 	call	#__system___basic_print_integer
147e4     97 01 00 FF 
147e8     A2 95 06 F6 | 	mov	arg02, ##@LR__6035
147ec     00 92 06 F6 | 	mov	arg01, #0
147f0     00 96 06 F6 | 	mov	arg03, #0
147f4     B4 0E B1 FD | 	call	#__system___basic_print_string
147f8     59 93 02 F6 | 	mov	arg01, local07
147fc     68 23 B1 FD | 	call	#__system___strerror
14800     3D 95 02 F6 | 	mov	arg02, result1
14804     00 92 06 F6 | 	mov	arg01, #0
14808     00 96 06 F6 | 	mov	arg03, #0
1480c     9C 0E B1 FD | 	call	#__system___basic_print_string
14810     00 92 06 F6 | 	mov	arg01, #0
14814     0A 94 06 F6 | 	mov	arg02, #10
14818     00 96 06 F6 | 	mov	arg03, #0
1481c     34 0E B1 FD | 	call	#__system___basic_print_char
14820     00 92 06 F6 | 	mov	arg01, #0
14824     14 57 B1 FD | 	call	#__system___getiolock_0622
14828     3D 01 68 FC | 	wrlong	#0, result1
1482c     09 92 06 F6 | 	mov	arg01, #9
14830     60 4D B1 FD | 	call	#__system__close
14834     94 01 90 FD | 	jmp	#LR__1768
14838                 | LR__1763
14838     53 00 00 FF 
1483c     1C 65 06 F1 | 	add	objptr, ##42780
14840     32 93 02 FB | 	rdlong	arg01, objptr
14844     53 00 00 FF 
14848     1C 65 86 F1 | 	sub	objptr, ##42780
1484c     97 01 00 FF 
14850     A5 95 06 F6 | 	mov	arg02, ##@LR__6036
14854     BC 01 B1 FD | 	call	#__system___string_concat
14858     53 00 00 FF 
1485c     1C 65 06 F1 | 	add	objptr, ##42780
14860     32 7B 62 FC | 	wrlong	result1, objptr
14864     53 00 00 FF 
14868     1C 65 86 F1 | 	sub	objptr, ##42780
1486c                 | LR__1764
1486c                 | '   close #9: open currentdir$+"/"+loadname for input as #9
1486c     09 92 06 F6 | 	mov	arg01, #9
14870     20 4D B1 FD | 	call	#__system__close
14874     09 B0 06 F6 | 	mov	local06, #9
14878     4B 00 00 FF 
1487c     B4 64 06 F1 | 	add	objptr, ##38580
14880     32 93 02 FB | 	rdlong	arg01, objptr
14884     4B 00 00 FF 
14888     B4 64 86 F1 | 	sub	objptr, ##38580
1488c     97 01 00 FF 
14890     AA 95 06 F6 | 	mov	arg02, ##@LR__6037
14894     7C 01 B1 FD | 	call	#__system___string_concat
14898     3D 93 02 F6 | 	mov	arg01, result1
1489c     53 00 00 FF 
148a0     1C 65 06 F1 | 	add	objptr, ##42780
148a4     32 95 02 FB | 	rdlong	arg02, objptr
148a8     53 00 00 FF 
148ac     1C 65 86 F1 | 	sub	objptr, ##42780
148b0     60 01 B1 FD | 	call	#__system___string_concat
148b4     3D 95 02 F6 | 	mov	arg02, result1
148b8     58 93 02 F6 | 	mov	arg01, local06
148bc     00 96 06 F6 | 	mov	arg03, #0
148c0     A4 0C B1 FD | 	call	#__system___basic_open_string
148c4                 | '   do
148c4                 | LR__1765
148c4     09 92 06 F6 | 	mov	arg01, #9
148c8     F8 02 B1 FD | 	call	#__system___basic_read_line
148cc     3D B1 02 F6 | 	mov	local06, result1
148d0     38 00 00 FF 
148d4     3C 64 06 F1 | 	add	objptr, ##28732
148d8     32 B1 62 FC | 	wrlong	local06, objptr
148dc     38 00 00 FF 
148e0     3C 64 86 F1 | 	sub	objptr, ##28732
148e4     78 D0 BE FD | 	call	#_interpret
148e8     38 00 00 FF 
148ec     3C 64 06 F1 | 	add	objptr, ##28732
148f0     32 93 02 FB | 	rdlong	arg01, objptr
148f4     38 00 00 FF 
148f8     3C 64 86 F1 | 	sub	objptr, ##28732
148fc     97 01 00 FF 
14900     AC 95 06 F6 | 	mov	arg02, ##@LR__6038
14904     D8 00 B1 FD | 	call	#__system___string_cmp
14908     00 7A 0E F2 | 	cmp	result1, #0 wz
1490c     B4 FF 9F 5D |  if_ne	jmp	#LR__1765
14910                 | '   close #9   
14910     09 92 06 F6 | 	mov	arg01, #9
14914     7C 4C B1 FD | 	call	#__system__close
14918     0C 00 90 FD | 	jmp	#LR__1767
1491c                 | LR__1766
1491c     1E 92 06 F6 | 	mov	arg01, #30
14920     00 94 06 F6 | 	mov	arg02, #0
14924     14 C7 B0 FD | 	call	#_printerror
14928                 | LR__1767
14928                 | ' print "Loaded ";currentdir$+"/"+loadname
14928     00 92 06 F6 | 	mov	arg01, #0
1492c     0C 56 B1 FD | 	call	#__system___getiolock_0622
14930     3D 93 02 F6 | 	mov	arg01, result1
14934     80 00 B1 FD | 	call	#__system___lockmem
14938     97 01 00 FF 
1493c     AD 95 06 F6 | 	mov	arg02, ##@LR__6039
14940     00 92 06 F6 | 	mov	arg01, #0
14944     00 96 06 F6 | 	mov	arg03, #0
14948     60 0D B1 FD | 	call	#__system___basic_print_string
1494c     00 B2 06 F6 | 	mov	local07, #0
14950     4B 00 00 FF 
14954     B4 64 06 F1 | 	add	objptr, ##38580
14958     32 93 02 FB | 	rdlong	arg01, objptr
1495c     4B 00 00 FF 
14960     B4 64 86 F1 | 	sub	objptr, ##38580
14964     97 01 00 FF 
14968     B5 95 06 F6 | 	mov	arg02, ##@LR__6040
1496c     A4 00 B1 FD | 	call	#__system___string_concat
14970     3D 93 02 F6 | 	mov	arg01, result1
14974     53 00 00 FF 
14978     1C 65 06 F1 | 	add	objptr, ##42780
1497c     32 95 02 FB | 	rdlong	arg02, objptr
14980     53 00 00 FF 
14984     1C 65 86 F1 | 	sub	objptr, ##42780
14988     88 00 B1 FD | 	call	#__system___string_concat
1498c     3D 95 02 F6 | 	mov	arg02, result1
14990     59 93 02 F6 | 	mov	arg01, local07
14994     00 96 06 F6 | 	mov	arg03, #0
14998     10 0D B1 FD | 	call	#__system___basic_print_string
1499c     00 92 06 F6 | 	mov	arg01, #0
149a0     0A 94 06 F6 | 	mov	arg02, #10
149a4     00 96 06 F6 | 	mov	arg03, #0
149a8     A8 0C B1 FD | 	call	#__system___basic_print_char
149ac     00 92 06 F6 | 	mov	arg01, #0
149b0     88 55 B1 FD | 	call	#__system___getiolock_0622
149b4     3D 01 68 FC | 	wrlong	#0, result1
149b8     53 00 00 FF 
149bc     2C 65 06 F1 | 	add	objptr, ##42796
149c0     32 01 68 FC | 	wrlong	#0, objptr
149c4     53 00 00 FF 
149c8     2C 65 86 F1 | 	sub	objptr, ##42796
149cc                 | LR__1768
149cc     E7 F0 03 F6 | 	mov	ptra, fp
149d0     F2 00 A0 FD | 	call	#popregs_
149d4                 | _do_load_ret
149d4     2D 00 64 FD | 	ret
149d8                 | 
149d8                 | ' 
149d8                 | ' '-------------------- log
149d8                 | ' 
149d8                 | ' sub do_log
149d8                 | _do_log
149d8     02 CA 05 F6 | 	mov	COUNT_, #2
149dc     E8 00 A0 FD | 	call	#pushregs_
149e0     14 F0 07 F1 | 	add	ptra, #20
149e4     4B 00 00 FF 
149e8     A0 64 06 F1 | 	add	objptr, ##38560
149ec     32 97 02 FB | 	rdlong	arg03, objptr
149f0     4B 95 02 F6 | 	mov	arg02, arg03
149f4     01 94 66 F0 | 	shl	arg02, #1
149f8     4B 95 02 F1 | 	add	arg02, arg03
149fc     02 94 66 F0 | 	shl	arg02, #2
14a00     03 00 00 FF 
14a04     04 64 86 F1 | 	sub	objptr, ##1540
14a08     32 95 02 F1 | 	add	arg02, objptr
14a0c     4A A7 0A FB | 	rdlong	local01, arg02 wz
14a10                 | ' 
14a10                 | ' numpar=compiledline(lineptr_e).result.uresult
14a10                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
14a10     48 00 00 FF 
14a14     9C 64 86 F1 | 	sub	objptr, ##37020
14a18     03 A6 16 52 |  if_ne	cmp	local01, #3 wc
14a1c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1770
14a20     00 92 06 F6 | 	mov	arg01, #0
14a24     14 55 B1 FD | 	call	#__system___getiolock_0622
14a28     3D 93 02 F6 | 	mov	arg01, result1
14a2c     88 FF B0 FD | 	call	#__system___lockmem
14a30     97 01 00 FF 
14a34     B7 95 06 F6 | 	mov	arg02, ##@LR__6041
14a38     00 92 06 F6 | 	mov	arg01, #0
14a3c     00 96 06 F6 | 	mov	arg03, #0
14a40     68 0C B1 FD | 	call	#__system___basic_print_string
14a44     00 92 06 F6 | 	mov	arg01, #0
14a48     F0 54 B1 FD | 	call	#__system___getiolock_0622
14a4c     3D 01 68 FC | 	wrlong	#0, result1
14a50     27 92 06 F6 | 	mov	arg01, #39
14a54     00 94 06 F6 | 	mov	arg02, #0
14a58     E0 C5 B0 FD | 	call	#_printerror
14a5c     AC 00 90 FD | 	jmp	#LR__1773
14a60                 | LR__1770
14a60                 | ' if numpar=2 then 
14a60     02 A6 0E F2 | 	cmp	local01, #2 wz
14a64     40 00 90 5D |  if_ne	jmp	#LR__1771
14a68     1C 8C BF FD | 	call	#_pop
14a6c     3F A7 02 F6 | 	mov	local01, result3
14a70     E7 7A 62 FC | 	wrlong	result1, fp
14a74     04 CE 05 F1 | 	add	fp, #4
14a78     E7 7C 62 FC | 	wrlong	result2, fp
14a7c     04 CE 05 F1 | 	add	fp, #4
14a80     E7 A6 62 FC | 	wrlong	local01, fp
14a84     08 CE 85 F1 | 	sub	fp, #8
14a88     E7 92 02 F6 | 	mov	arg01, fp
14a8c     90 8E BF FD | 	call	#_converttofloat
14a90     3D 95 02 F6 | 	mov	arg02, result1
14a94     FC 16 20 FF 
14a98     54 92 06 F6 | 	mov	arg01, ##1076754516
14a9c     C8 35 B1 FD | 	call	#__system____builtin_logbase
14aa0     3D A9 02 F6 | 	mov	local02, result1
14aa4     08 00 90 FD | 	jmp	#LR__1772
14aa8                 | LR__1771
14aa8     00 C0 1F FF 
14aac     00 A8 06 F6 | 	mov	local02, ##1065353216
14ab0                 | LR__1772
14ab0     D4 8B BF FD | 	call	#_pop
14ab4     3F A7 02 F6 | 	mov	local01, result3
14ab8     E7 7A 62 FC | 	wrlong	result1, fp
14abc     04 CE 05 F1 | 	add	fp, #4
14ac0     E7 7C 62 FC | 	wrlong	result2, fp
14ac4     04 CE 05 F1 | 	add	fp, #4
14ac8     E7 A6 62 FC | 	wrlong	local01, fp
14acc     08 CE 85 F1 | 	sub	fp, #8
14ad0     E7 92 02 F6 | 	mov	arg01, fp
14ad4     48 8E BF FD | 	call	#_converttofloat
14ad8     3D 95 02 F6 | 	mov	arg02, result1
14adc     FC 16 20 FF 
14ae0     54 92 06 F6 | 	mov	arg01, ##1076754516
14ae4     80 35 B1 FD | 	call	#__system____builtin_logbase
14ae8     3D 93 02 F6 | 	mov	arg01, result1
14aec     54 95 02 F6 | 	mov	arg02, local02
14af0     98 27 B1 FD | 	call	#__system___float_div
14af4     E7 7A 62 FC | 	wrlong	result1, fp
14af8     08 CE 05 F1 | 	add	fp, #8
14afc     E7 3C 68 FC | 	wrlong	#30, fp
14b00     08 CE 85 F1 | 	sub	fp, #8
14b04     E7 92 02 F6 | 	mov	arg01, fp
14b08     0C 8C BF FD | 	call	#_push
14b0c                 | LR__1773
14b0c     E7 F0 03 F6 | 	mov	ptra, fp
14b10     F2 00 A0 FD | 	call	#popregs_
14b14                 | _do_log_ret
14b14     2D 00 64 FD | 	ret
14b18                 | 
14b18                 | ' 
14b18                 | ' '-------------------- lpeek
14b18                 | ' 
14b18                 | ' sub do_lpeek
14b18                 | _do_lpeek
14b18     01 CA 05 F6 | 	mov	COUNT_, #1
14b1c     E8 00 A0 FD | 	call	#pushregs_
14b20     14 F0 07 F1 | 	add	ptra, #20
14b24     60 8B BF FD | 	call	#_pop
14b28     E7 7A 62 FC | 	wrlong	result1, fp
14b2c     04 CE 05 F1 | 	add	fp, #4
14b30     E7 7C 62 FC | 	wrlong	result2, fp
14b34     04 CE 05 F1 | 	add	fp, #4
14b38     E7 7E 62 FC | 	wrlong	result3, fp
14b3c     08 CE 85 F1 | 	sub	fp, #8
14b40     E7 92 02 F6 | 	mov	arg01, fp
14b44     1C 8D BF FD | 	call	#_converttoint
14b48     3D 93 02 F6 | 	mov	arg01, result1
14b4c                 | ' 
14b4c                 | ' t1=pop()
14b4c                 | ' a=converttoint(t1)
14b4c                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
14b4c     00 04 00 FF 
14b50     00 92 16 F2 | 	cmp	arg01, ##524288 wc
14b54     49 A7 02 CB |  if_b	rdlong	local01, arg01
14b58     08 00 90 CD |  if_b	jmp	#LR__1780
14b5c     98 C7 B0 FD | 	call	#_pslpeek
14b60     3D A7 02 F6 | 	mov	local01, result1
14b64                 | LR__1780
14b64     08 CE 05 F1 | 	add	fp, #8
14b68     E7 3A 68 FC | 	wrlong	#29, fp
14b6c     08 CE 85 F1 | 	sub	fp, #8
14b70     E7 A6 62 FC | 	wrlong	local01, fp
14b74     E7 92 02 F6 | 	mov	arg01, fp
14b78     9C 8B BF FD | 	call	#_push
14b7c     E7 F0 03 F6 | 	mov	ptra, fp
14b80     F2 00 A0 FD | 	call	#popregs_
14b84                 | _do_lpeek_ret
14b84     2D 00 64 FD | 	ret
14b88                 | 
14b88                 | ' 
14b88                 | ' '-------------------- lpoke
14b88                 | ' 
14b88                 | ' sub do_lpoke
14b88                 | _do_lpoke
14b88     02 CA 05 F6 | 	mov	COUNT_, #2
14b8c     E8 00 A0 FD | 	call	#pushregs_
14b90     20 F0 07 F1 | 	add	ptra, #32
14b94     F0 8A BF FD | 	call	#_pop
14b98     3D 95 02 F6 | 	mov	arg02, result1
14b9c     3E 93 02 F6 | 	mov	arg01, result2
14ba0     3F A7 02 F6 | 	mov	local01, result3
14ba4     E7 94 62 FC | 	wrlong	arg02, fp
14ba8     04 CE 05 F1 | 	add	fp, #4
14bac     E7 92 62 FC | 	wrlong	arg01, fp
14bb0     04 CE 05 F1 | 	add	fp, #4
14bb4     E7 A6 62 FC | 	wrlong	local01, fp
14bb8     08 CE 85 F1 | 	sub	fp, #8
14bbc     C8 8A BF FD | 	call	#_pop
14bc0     3F A7 02 F6 | 	mov	local01, result3
14bc4     0C CE 05 F1 | 	add	fp, #12
14bc8     E7 7A 62 FC | 	wrlong	result1, fp
14bcc     04 CE 05 F1 | 	add	fp, #4
14bd0     E7 7C 62 FC | 	wrlong	result2, fp
14bd4     04 CE 05 F1 | 	add	fp, #4
14bd8     E7 A6 62 FC | 	wrlong	local01, fp
14bdc     08 CE 85 F1 | 	sub	fp, #8
14be0     E7 92 02 F6 | 	mov	arg01, fp
14be4     0C CE 85 F1 | 	sub	fp, #12
14be8     78 8C BF FD | 	call	#_converttoint
14bec     3D A7 02 F6 | 	mov	local01, result1
14bf0     E7 92 02 F6 | 	mov	arg01, fp
14bf4     6C 8C BF FD | 	call	#_converttoint
14bf8     3D A9 02 F6 | 	mov	local02, result1
14bfc                 | ' 
14bfc                 | ' t1=pop() 'value
14bfc                 | ' t2=pop() 
14bfc                 | ' a=converttoint(t2) : v=converttoint(t1)
14bfc                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
14bfc     00 04 00 FF 
14c00     00 A6 16 F2 | 	cmp	local01, ##524288 wc
14c04     53 A9 62 CC |  if_b	wrlong	local02, local01
14c08     53 93 02 36 |  if_ae	mov	arg01, local01
14c0c     54 95 02 36 |  if_ae	mov	arg02, local02
14c10     C4 C5 B0 3D |  if_ae	call	#_pslpoke
14c14     E7 F0 03 F6 | 	mov	ptra, fp
14c18     F2 00 A0 FD | 	call	#popregs_
14c1c                 | _do_lpoke_ret
14c1c     2D 00 64 FD | 	ret
14c20                 | 
14c20                 | ' 
14c20                 | ' '-------------------- memlo
14c20                 | ' 
14c20                 | ' sub do_memlo
14c20                 | _do_memlo
14c20     00 CA 05 F6 | 	mov	COUNT_, #0
14c24     E8 00 A0 FD | 	call	#pushregs_
14c28     0C F0 07 F1 | 	add	ptra, #12
14c2c     44 00 00 FF 
14c30     7C 64 06 F1 | 	add	objptr, ##34940
14c34     32 93 02 FB | 	rdlong	arg01, objptr
14c38     44 00 00 FF 
14c3c     7C 64 86 F1 | 	sub	objptr, ##34940
14c40     E7 92 62 FC | 	wrlong	arg01, fp
14c44     08 CE 05 F1 | 	add	fp, #8
14c48     E7 3A 68 FC | 	wrlong	#29, fp
14c4c     08 CE 85 F1 | 	sub	fp, #8
14c50     E7 92 02 F6 | 	mov	arg01, fp
14c54     C0 8A BF FD | 	call	#_push
14c58     E7 F0 03 F6 | 	mov	ptra, fp
14c5c     F2 00 A0 FD | 	call	#popregs_
14c60                 | _do_memlo_ret
14c60     2D 00 64 FD | 	ret
14c64                 | 
14c64                 | ' 
14c64                 | ' '-------------------- memtop
14c64                 | ' 
14c64                 | ' sub do_memtop
14c64                 | _do_memtop
14c64     00 CA 05 F6 | 	mov	COUNT_, #0
14c68     E8 00 A0 FD | 	call	#pushregs_
14c6c     0C F0 07 F1 | 	add	ptra, #12
14c70     53 00 00 FF 
14c74     F0 64 06 F1 | 	add	objptr, ##42736
14c78     32 93 02 FB | 	rdlong	arg01, objptr
14c7c     53 00 00 FF 
14c80     F0 64 86 F1 | 	sub	objptr, ##42736
14c84     E7 92 62 FC | 	wrlong	arg01, fp
14c88     08 CE 05 F1 | 	add	fp, #8
14c8c     E7 3A 68 FC | 	wrlong	#29, fp
14c90     08 CE 85 F1 | 	sub	fp, #8
14c94     E7 92 02 F6 | 	mov	arg01, fp
14c98     7C 8A BF FD | 	call	#_push
14c9c     E7 F0 03 F6 | 	mov	ptra, fp
14ca0     F2 00 A0 FD | 	call	#popregs_
14ca4                 | _do_memtop_ret
14ca4     2D 00 64 FD | 	ret
14ca8                 | 
14ca8                 | ' 
14ca8                 | ' '-------------------- mid$
14ca8                 | ' 
14ca8                 | ' sub do_mid
14ca8                 | _do_mid
14ca8     02 CA 05 F6 | 	mov	COUNT_, #2
14cac     E8 00 A0 FD | 	call	#pushregs_
14cb0     18 F0 07 F1 | 	add	ptra, #24
14cb4     4B 00 00 FF 
14cb8     A0 64 06 F1 | 	add	objptr, ##38560
14cbc     32 97 02 FB | 	rdlong	arg03, objptr
14cc0     4B 95 02 F6 | 	mov	arg02, arg03
14cc4     01 94 66 F0 | 	shl	arg02, #1
14cc8     4B 95 02 F1 | 	add	arg02, arg03
14ccc     02 94 66 F0 | 	shl	arg02, #2
14cd0     03 00 00 FF 
14cd4     04 64 86 F1 | 	sub	objptr, ##1540
14cd8     32 95 02 F1 | 	add	arg02, objptr
14cdc     4A 97 02 FB | 	rdlong	arg03, arg02
14ce0                 | ' 
14ce0                 | ' numpar=compiledline(lineptr_e).result.uresult
14ce0                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
14ce0     03 96 0E F2 | 	cmp	arg03, #3 wz
14ce4     48 00 00 FF 
14ce8     9C 64 86 F1 | 	sub	objptr, ##37020
14cec     40 00 90 AD |  if_e	jmp	#LR__1790
14cf0     00 92 06 F6 | 	mov	arg01, #0
14cf4     44 52 B1 FD | 	call	#__system___getiolock_0622
14cf8     3D 93 02 F6 | 	mov	arg01, result1
14cfc     B8 FC B0 FD | 	call	#__system___lockmem
14d00     97 01 00 FF 
14d04     BD 95 06 F6 | 	mov	arg02, ##@LR__6042
14d08     00 92 06 F6 | 	mov	arg01, #0
14d0c     00 96 06 F6 | 	mov	arg03, #0
14d10     98 09 B1 FD | 	call	#__system___basic_print_string
14d14     00 92 06 F6 | 	mov	arg01, #0
14d18     20 52 B1 FD | 	call	#__system___getiolock_0622
14d1c     3D 01 68 FC | 	wrlong	#0, result1
14d20     27 92 06 F6 | 	mov	arg01, #39
14d24     00 94 06 F6 | 	mov	arg02, #0
14d28     10 C3 B0 FD | 	call	#_printerror
14d2c     08 01 90 FD | 	jmp	#LR__1793
14d30                 | LR__1790
14d30     54 89 BF FD | 	call	#_pop
14d34     3F 97 02 F6 | 	mov	arg03, result3
14d38     E7 7A 62 FC | 	wrlong	result1, fp
14d3c     04 CE 05 F1 | 	add	fp, #4
14d40     E7 7C 62 FC | 	wrlong	result2, fp
14d44     04 CE 05 F1 | 	add	fp, #4
14d48     E7 96 62 FC | 	wrlong	arg03, fp
14d4c     08 CE 85 F1 | 	sub	fp, #8
14d50     E7 92 02 F6 | 	mov	arg01, fp
14d54     0C 8B BF FD | 	call	#_converttoint
14d58     3D A7 02 F6 | 	mov	local01, result1
14d5c     28 89 BF FD | 	call	#_pop
14d60     3F 97 02 F6 | 	mov	arg03, result3
14d64     E7 7A 62 FC | 	wrlong	result1, fp
14d68     04 CE 05 F1 | 	add	fp, #4
14d6c     E7 7C 62 FC | 	wrlong	result2, fp
14d70     04 CE 05 F1 | 	add	fp, #4
14d74     E7 96 62 FC | 	wrlong	arg03, fp
14d78     08 CE 85 F1 | 	sub	fp, #8
14d7c     E7 92 02 F6 | 	mov	arg01, fp
14d80     E0 8A BF FD | 	call	#_converttoint
14d84     3D A9 02 F6 | 	mov	local02, result1
14d88     FC 88 BF FD | 	call	#_pop
14d8c     3F 97 02 F6 | 	mov	arg03, result3
14d90     E7 7A 62 FC | 	wrlong	result1, fp
14d94     04 CE 05 F1 | 	add	fp, #4
14d98     E7 7C 62 FC | 	wrlong	result2, fp
14d9c     04 CE 05 F1 | 	add	fp, #4
14da0     E7 96 62 FC | 	wrlong	arg03, fp
14da4                 | ' t1=pop() : arg2=converttoint(t1)
14da4                 | ' t1=pop() : arg1=converttoint(t1)
14da4                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14da4     08 CE 85 F1 | 	sub	fp, #8
14da8     2B 96 0E F2 | 	cmp	arg03, #43 wz
14dac     18 00 90 5D |  if_ne	jmp	#LR__1791
14db0     E7 92 02 FB | 	rdlong	arg01, fp
14db4     40 8A BF FD | 	call	#_convertstring
14db8     E7 7A 62 FC | 	wrlong	result1, fp
14dbc     08 CE 05 F1 | 	add	fp, #8
14dc0     E7 3E 68 FC | 	wrlong	#31, fp
14dc4     08 CE 85 F1 | 	sub	fp, #8
14dc8                 | LR__1791
14dc8                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
14dc8     08 CE 05 F1 | 	add	fp, #8
14dcc     E7 96 02 FB | 	rdlong	arg03, fp
14dd0     08 CE 85 F1 | 	sub	fp, #8
14dd4     1F 96 0E F2 | 	cmp	arg03, #31 wz
14dd8     40 00 90 AD |  if_e	jmp	#LR__1792
14ddc     00 92 06 F6 | 	mov	arg01, #0
14de0     58 51 B1 FD | 	call	#__system___getiolock_0622
14de4     3D 93 02 F6 | 	mov	arg01, result1
14de8     CC FB B0 FD | 	call	#__system___lockmem
14dec     97 01 00 FF 
14df0     C4 95 06 F6 | 	mov	arg02, ##@LR__6043
14df4     00 92 06 F6 | 	mov	arg01, #0
14df8     00 96 06 F6 | 	mov	arg03, #0
14dfc     AC 08 B1 FD | 	call	#__system___basic_print_string
14e00     00 92 06 F6 | 	mov	arg01, #0
14e04     34 51 B1 FD | 	call	#__system___getiolock_0622
14e08     3D 01 68 FC | 	wrlong	#0, result1
14e0c     0F 92 06 F6 | 	mov	arg01, #15
14e10     00 94 06 F6 | 	mov	arg02, #0
14e14     24 C2 B0 FD | 	call	#_printerror
14e18     1C 00 90 FD | 	jmp	#LR__1793
14e1c                 | LR__1792
14e1c     E7 92 02 FB | 	rdlong	arg01, fp
14e20     54 95 02 F6 | 	mov	arg02, local02
14e24     53 97 02 F6 | 	mov	arg03, local01
14e28     4C 15 B1 FD | 	call	#__system__Mid_S
14e2c     E7 7A 62 FC | 	wrlong	result1, fp
14e30     E7 92 02 F6 | 	mov	arg01, fp
14e34     E0 88 BF FD | 	call	#_push
14e38                 | LR__1793
14e38     E7 F0 03 F6 | 	mov	ptra, fp
14e3c     F2 00 A0 FD | 	call	#popregs_
14e40                 | _do_mid_ret
14e40     2D 00 64 FD | 	ret
14e44                 | 
14e44                 | ' 
14e44                 | ' '-------------------- mkdir
14e44                 | ' 
14e44                 | ' sub do_mkdir
14e44                 | _do_mkdir
14e44     04 CA 05 F6 | 	mov	COUNT_, #4
14e48     E8 00 A0 FD | 	call	#pushregs_
14e4c     38 88 BF FD | 	call	#_pop
14e50     3E 99 02 F6 | 	mov	arg04, result2
14e54     3F 97 02 F6 | 	mov	arg03, result3
14e58     3D A7 02 F6 | 	mov	local01, result1
14e5c     4C A9 02 F6 | 	mov	local02, arg04
14e60     4B AB 02 F6 | 	mov	local03, arg03
14e64                 | ' 
14e64                 | ' t1=pop()
14e64                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14e64     2B AA 0E F2 | 	cmp	local03, #43 wz
14e68     10 00 90 5D |  if_ne	jmp	#LR__1800
14e6c     53 93 02 F6 | 	mov	arg01, local01
14e70     84 89 BF FD | 	call	#_convertstring
14e74     3D A7 02 F6 | 	mov	local01, result1
14e78     1F AA 06 F6 | 	mov	local03, #31
14e7c                 | LR__1800
14e7c                 | ' if t1.result_type<>result_string then printerror(15): return
14e7c     1F AA 0E F2 | 	cmp	local03, #31 wz
14e80     10 00 90 AD |  if_e	jmp	#LR__1801
14e84     0F 92 06 F6 | 	mov	arg01, #15
14e88     00 94 06 F6 | 	mov	arg02, #0
14e8c     AC C1 B0 FD | 	call	#_printerror
14e90     64 00 90 FD | 	jmp	#LR__1803
14e94                 | LR__1801
14e94     53 93 02 F6 | 	mov	arg01, local01
14e98     14 1C B1 FD | 	call	#__system___mkdir
14e9c     3D AD 0A F6 | 	mov	local04, result1 wz
14ea0                 | ' filename$=t1.result.sresult
14ea0                 | ' err=mkdir(filename$)
14ea0                 | ' 'err=geterr() : 
14ea0                 | ' if err<>0 then print "Cannot create a directory: system error "; err
14ea0     54 00 90 AD |  if_e	jmp	#LR__1802
14ea4     00 92 06 F6 | 	mov	arg01, #0
14ea8     90 50 B1 FD | 	call	#__system___getiolock_0622
14eac     3D 93 02 F6 | 	mov	arg01, result1
14eb0     04 FB B0 FD | 	call	#__system___lockmem
14eb4     97 01 00 FF 
14eb8     CB 95 06 F6 | 	mov	arg02, ##@LR__6044
14ebc     00 92 06 F6 | 	mov	arg01, #0
14ec0     00 96 06 F6 | 	mov	arg03, #0
14ec4     E4 07 B1 FD | 	call	#__system___basic_print_string
14ec8     00 92 06 F6 | 	mov	arg01, #0
14ecc     56 95 02 F6 | 	mov	arg02, local04
14ed0     00 96 06 F6 | 	mov	arg03, #0
14ed4     0A 98 06 F6 | 	mov	arg04, #10
14ed8     14 08 B1 FD | 	call	#__system___basic_print_integer
14edc     00 92 06 F6 | 	mov	arg01, #0
14ee0     0A 94 06 F6 | 	mov	arg02, #10
14ee4     00 96 06 F6 | 	mov	arg03, #0
14ee8     68 07 B1 FD | 	call	#__system___basic_print_char
14eec     00 92 06 F6 | 	mov	arg01, #0
14ef0     48 50 B1 FD | 	call	#__system___getiolock_0622
14ef4     3D 01 68 FC | 	wrlong	#0, result1
14ef8                 | LR__1802
14ef8                 | LR__1803
14ef8     E7 F0 03 F6 | 	mov	ptra, fp
14efc     F2 00 A0 FD | 	call	#popregs_
14f00                 | _do_mkdir_ret
14f00     2D 00 64 FD | 	ret
14f04                 | 
14f04                 | ' 
14f04                 | ' '-------------------- mode
14f04                 | ' 
14f04                 | ' sub do_mode
14f04                 | _do_mode
14f04     05 CA 05 F6 | 	mov	COUNT_, #5
14f08     E8 00 A0 FD | 	call	#pushregs_
14f0c     78 87 BF FD | 	call	#_pop
14f10     3D A7 02 F6 | 	mov	local01, result1
14f14     3E A9 02 F6 | 	mov	local02, result2
14f18     3F AB 02 F6 | 	mov	local03, result3
14f1c                 | ' t1=pop() 
14f1c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
14f1c     1E AA 0E F2 | 	cmp	local03, #30 wz
14f20     10 00 90 5D |  if_ne	jmp	#LR__1810
14f24     53 93 02 F6 | 	mov	arg01, local01
14f28     00 94 06 F6 | 	mov	arg02, #0
14f2c     20 26 B1 FD | 	call	#__system___float_tointeger
14f30     3D A7 02 F6 | 	mov	local01, result1
14f34                 | LR__1810
14f34                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
14f34     1F AA 0E F2 | 	cmp	local03, #31 wz
14f38     18 00 90 5D |  if_ne	jmp	#LR__1811
14f3c     53 93 02 F6 | 	mov	arg01, local01
14f40     60 29 B1 FD | 	call	#__system____builtin_atof
14f44     3D 93 02 F6 | 	mov	arg01, result1
14f48     00 94 06 F6 | 	mov	arg02, #0
14f4c     00 26 B1 FD | 	call	#__system___float_tointeger
14f50     3D A7 02 F6 | 	mov	local01, result1
14f54                 | LR__1811
14f54                 | ' select case t1.result.iresult
14f54     53 AD 02 F6 | 	mov	local04, local01
14f58     06 AC 26 F3 | 	fle	local04, #6
14f5c     30 AC 62 FD | 	jmprel	local04
14f60                 | LR__1812
14f60     18 00 90 FD | 	jmp	#LR__1813
14f64     A8 00 90 FD | 	jmp	#LR__1814
14f68     10 01 90 FD | 	jmp	#LR__1815
14f6c     78 01 90 FD | 	jmp	#LR__1816
14f70     E0 01 90 FD | 	jmp	#LR__1817
14f74     70 02 90 FD | 	jmp	#LR__1818
14f78     FC 02 90 FD | 	jmp	#LR__1819
14f7c                 | LR__1813
14f7c     38 00 00 FF 
14f80     60 64 06 F1 | 	add	objptr, ##28768
14f84     32 03 68 FC | 	wrlong	#1, objptr
14f88     04 64 86 F1 | 	sub	objptr, #4
14f8c     32 35 69 FC | 	wrlong	#154, objptr
14f90     19 00 00 FF 
14f94     00 65 06 F1 | 	add	objptr, ##13056
14f98     32 03 68 FC | 	wrlong	#1, objptr
14f9c     19 00 00 FF 
14fa0     04 65 86 F1 | 	sub	objptr, ##13060
14fa4     32 27 69 FC | 	wrlong	#147, objptr
14fa8     38 00 00 FF 
14fac     58 64 86 F1 | 	sub	objptr, ##28760
14fb0     04 92 06 F6 | 	mov	arg01, #4
14fb4     64 DC B0 FD | 	call	#_hg010b_spin2_setfontfamily
14fb8     38 00 00 FF 
14fbc     5C 64 06 F1 | 	add	objptr, ##28764
14fc0     32 93 02 FB | 	rdlong	arg01, objptr
14fc4     04 64 86 F1 | 	sub	objptr, #4
14fc8     32 95 02 FB | 	rdlong	arg02, objptr
14fcc                 | ' 
14fcc                 | ' write_color:=ff
14fcc     38 00 00 FF 
14fd0     17 64 86 F1 | 	sub	objptr, ##28695
14fd4     32 93 62 FC | 	wrlong	arg01, objptr
14fd8                 | ' write_background:=bb
14fd8     04 64 06 F1 | 	add	objptr, #4
14fdc     32 95 62 FC | 	wrlong	arg02, objptr
14fe0     35 AD 02 F6 | 	mov	local04, ptr__dat__
14fe4     01 00 00 FF 
14fe8     00 AC 06 F1 | 	add	local04, ##512
14fec     53 00 00 FF 
14ff0     B7 64 06 F1 | 	add	objptr, ##42679
14ff4     32 AD 62 FC | 	wrlong	local04, objptr
14ff8     04 64 86 F1 | 	sub	objptr, #4
14ffc     03 00 80 FF 
15000     32 31 69 FC | 	wrlong	##1688, objptr
15004     53 00 00 FF 
15008     F8 64 86 F1 | 	sub	objptr, ##42744
1500c     68 02 90 FD | 	jmp	#LR__1819
15010                 | LR__1814
15010     38 00 00 FF 
15014     60 64 06 F1 | 	add	objptr, ##28768
15018     32 01 68 FC | 	wrlong	#0, objptr
1501c     04 64 86 F1 | 	sub	objptr, #4
15020     32 2F 68 FC | 	wrlong	#23, objptr
15024     19 00 00 FF 
15028     00 65 06 F1 | 	add	objptr, ##13056
1502c     32 01 68 FC | 	wrlong	#0, objptr
15030     19 00 00 FF 
15034     04 65 86 F1 | 	sub	objptr, ##13060
15038     32 01 68 FC | 	wrlong	#0, objptr
1503c     38 00 00 FF 
15040     58 64 86 F1 | 	sub	objptr, ##28760
15044     00 92 06 F6 | 	mov	arg01, #0
15048     D0 DB B0 FD | 	call	#_hg010b_spin2_setfontfamily
1504c     38 00 00 FF 
15050     5C 64 06 F1 | 	add	objptr, ##28764
15054     32 93 02 FB | 	rdlong	arg01, objptr
15058     04 64 86 F1 | 	sub	objptr, #4
1505c     32 95 02 FB | 	rdlong	arg02, objptr
15060                 | ' 
15060                 | ' write_color:=ff
15060     38 00 00 FF 
15064     17 64 86 F1 | 	sub	objptr, ##28695
15068     32 93 62 FC | 	wrlong	arg01, objptr
1506c                 | ' write_background:=bb
1506c     04 64 06 F1 | 	add	objptr, #4
15070     32 95 62 FC | 	wrlong	arg02, objptr
15074     45 64 86 F1 | 	sub	objptr, #69
15078     FC 01 90 FD | 	jmp	#LR__1819
1507c                 | LR__1815
1507c     38 00 00 FF 
15080     60 64 06 F1 | 	add	objptr, ##28768
15084     32 01 68 FC | 	wrlong	#0, objptr
15088     04 64 86 F1 | 	sub	objptr, #4
1508c     32 6B 69 FC | 	wrlong	#181, objptr
15090     19 00 00 FF 
15094     00 65 06 F1 | 	add	objptr, ##13056
15098     32 01 68 FC | 	wrlong	#0, objptr
1509c     19 00 00 FF 
150a0     04 65 86 F1 | 	sub	objptr, ##13060
150a4     32 01 68 FC | 	wrlong	#0, objptr
150a8     38 00 00 FF 
150ac     58 64 86 F1 | 	sub	objptr, ##28760
150b0     00 92 06 F6 | 	mov	arg01, #0
150b4     64 DB B0 FD | 	call	#_hg010b_spin2_setfontfamily
150b8     38 00 00 FF 
150bc     5C 64 06 F1 | 	add	objptr, ##28764
150c0     32 93 02 FB | 	rdlong	arg01, objptr
150c4     04 64 86 F1 | 	sub	objptr, #4
150c8     32 95 02 FB | 	rdlong	arg02, objptr
150cc                 | ' 
150cc                 | ' write_color:=ff
150cc     38 00 00 FF 
150d0     17 64 86 F1 | 	sub	objptr, ##28695
150d4     32 93 62 FC | 	wrlong	arg01, objptr
150d8                 | ' write_background:=bb
150d8     04 64 06 F1 | 	add	objptr, #4
150dc     32 95 62 FC | 	wrlong	arg02, objptr
150e0     45 64 86 F1 | 	sub	objptr, #69
150e4     90 01 90 FD | 	jmp	#LR__1819
150e8                 | LR__1816
150e8     38 00 00 FF 
150ec     60 64 06 F1 | 	add	objptr, ##28768
150f0     32 01 68 FC | 	wrlong	#0, objptr
150f4     04 64 86 F1 | 	sub	objptr, #4
150f8     32 1F 68 FC | 	wrlong	#15, objptr
150fc     19 00 00 FF 
15100     00 65 06 F1 | 	add	objptr, ##13056
15104     32 01 68 FC | 	wrlong	#0, objptr
15108     19 00 00 FF 
1510c     04 65 86 F1 | 	sub	objptr, ##13060
15110     32 01 68 FC | 	wrlong	#0, objptr
15114     38 00 00 FF 
15118     58 64 86 F1 | 	sub	objptr, ##28760
1511c     00 92 06 F6 | 	mov	arg01, #0
15120     F8 DA B0 FD | 	call	#_hg010b_spin2_setfontfamily
15124     38 00 00 FF 
15128     5C 64 06 F1 | 	add	objptr, ##28764
1512c     32 93 02 FB | 	rdlong	arg01, objptr
15130     04 64 86 F1 | 	sub	objptr, #4
15134     32 95 02 FB | 	rdlong	arg02, objptr
15138                 | ' 
15138                 | ' write_color:=ff
15138     38 00 00 FF 
1513c     17 64 86 F1 | 	sub	objptr, ##28695
15140     32 93 62 FC | 	wrlong	arg01, objptr
15144                 | ' write_background:=bb
15144     04 64 06 F1 | 	add	objptr, #4
15148     32 95 62 FC | 	wrlong	arg02, objptr
1514c     45 64 86 F1 | 	sub	objptr, #69
15150     24 01 90 FD | 	jmp	#LR__1819
15154                 | LR__1817
15154     38 00 00 FF 
15158     60 64 06 F1 | 	add	objptr, ##28768
1515c     32 03 68 FC | 	wrlong	#1, objptr
15160     04 64 86 F1 | 	sub	objptr, #4
15164     32 03 68 FC | 	wrlong	#1, objptr
15168     19 00 00 FF 
1516c     00 65 06 F1 | 	add	objptr, ##13056
15170     32 03 68 FC | 	wrlong	#1, objptr
15174     19 00 00 FF 
15178     04 65 86 F1 | 	sub	objptr, ##13060
1517c     32 1D 68 FC | 	wrlong	#14, objptr
15180     38 00 00 FF 
15184     58 64 86 F1 | 	sub	objptr, ##28760
15188     04 92 06 F6 | 	mov	arg01, #4
1518c     8C DA B0 FD | 	call	#_hg010b_spin2_setfontfamily
15190     38 00 00 FF 
15194     5C 64 06 F1 | 	add	objptr, ##28764
15198     32 93 02 FB | 	rdlong	arg01, objptr
1519c     04 64 86 F1 | 	sub	objptr, #4
151a0     32 95 02 FB | 	rdlong	arg02, objptr
151a4                 | ' 
151a4                 | ' write_color:=ff
151a4     38 00 00 FF 
151a8     17 64 86 F1 | 	sub	objptr, ##28695
151ac     32 93 62 FC | 	wrlong	arg01, objptr
151b0                 | ' write_background:=bb
151b0     04 64 06 F1 | 	add	objptr, #4
151b4     32 95 62 FC | 	wrlong	arg02, objptr
151b8     35 AF 02 F6 | 	mov	local05, ptr__dat__
151bc     07 00 00 FF 
151c0     82 AF 06 F1 | 	add	local05, ##3970
151c4     53 00 00 FF 
151c8     B7 64 06 F1 | 	add	objptr, ##42679
151cc     32 AF 62 FC | 	wrlong	local05, objptr
151d0     04 64 86 F1 | 	sub	objptr, #4
151d4     03 00 80 FF 
151d8     32 31 69 FC | 	wrlong	##1688, objptr
151dc     53 00 00 FF 
151e0     F8 64 86 F1 | 	sub	objptr, ##42744
151e4     90 00 90 FD | 	jmp	#LR__1819
151e8                 | LR__1818
151e8     38 00 00 FF 
151ec     60 64 06 F1 | 	add	objptr, ##28768
151f0     32 05 68 FC | 	wrlong	#2, objptr
151f4     04 64 86 F1 | 	sub	objptr, #4
151f8     32 03 68 FC | 	wrlong	#1, objptr
151fc     19 00 00 FF 
15200     00 65 06 F1 | 	add	objptr, ##13056
15204     32 03 68 FC | 	wrlong	#1, objptr
15208     19 00 00 FF 
1520c     04 65 86 F1 | 	sub	objptr, ##13060
15210     32 0F 68 FC | 	wrlong	#7, objptr
15214     38 00 00 FF 
15218     58 64 86 F1 | 	sub	objptr, ##28760
1521c     08 92 06 F6 | 	mov	arg01, #8
15220     F8 D9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15224     38 00 00 FF 
15228     5C 64 06 F1 | 	add	objptr, ##28764
1522c     32 93 02 FB | 	rdlong	arg01, objptr
15230     04 64 86 F1 | 	sub	objptr, #4
15234     32 95 02 FB | 	rdlong	arg02, objptr
15238                 | ' 
15238                 | ' write_color:=ff
15238     38 00 00 FF 
1523c     17 64 86 F1 | 	sub	objptr, ##28695
15240     32 93 62 FC | 	wrlong	arg01, objptr
15244                 | ' write_background:=bb
15244     04 64 06 F1 | 	add	objptr, #4
15248     32 95 62 FC | 	wrlong	arg02, objptr
1524c     35 AF 02 F6 | 	mov	local05, ptr__dat__
15250     07 00 00 FF 
15254     82 AF 06 F1 | 	add	local05, ##3970
15258     53 00 00 FF 
1525c     B7 64 06 F1 | 	add	objptr, ##42679
15260     32 AF 62 FC | 	wrlong	local05, objptr
15264     04 64 86 F1 | 	sub	objptr, #4
15268     03 00 80 FF 
1526c     32 31 69 FC | 	wrlong	##1688, objptr
15270     53 00 00 FF 
15274     F8 64 86 F1 | 	sub	objptr, ##42744
15278                 | LR__1819
15278     53 00 00 FF 
1527c     F4 64 06 F1 | 	add	objptr, ##42740
15280     32 A7 62 FC | 	wrlong	local01, objptr
15284     04 64 86 F1 | 	sub	objptr, #4
15288     32 93 02 FB | 	rdlong	arg01, objptr
1528c     0F 00 00 FF 
15290     74 64 86 F1 | 	sub	objptr, ##7796
15294     32 AF 02 FB | 	rdlong	local05, objptr
15298     44 00 00 FF 
1529c     7C 64 86 F1 | 	sub	objptr, ##34940
152a0     57 93 82 F1 | 	sub	arg01, local05
152a4     00 94 06 F6 | 	mov	arg02, #0
152a8     0A 96 06 F6 | 	mov	arg03, #10
152ac     04 12 B1 FD | 	call	#__system__Number_S
152b0     3D 93 02 F6 | 	mov	arg01, result1
152b4     97 01 00 FF 
152b8     F4 95 06 F6 | 	mov	arg02, ##@LR__6045
152bc     54 F7 B0 FD | 	call	#__system___string_concat
152c0     51 00 00 FF 
152c4     58 65 06 F1 | 	add	objptr, ##41816
152c8     32 7B 62 FC | 	wrlong	result1, objptr
152cc     19 00 00 FF 
152d0     FC 64 86 F1 | 	sub	objptr, ##13052
152d4     32 93 02 FB | 	rdlong	arg01, objptr
152d8     04 64 86 F1 | 	sub	objptr, #4
152dc     32 95 02 FB | 	rdlong	arg02, objptr
152e0     38 00 00 FF 
152e4     58 64 86 F1 | 	sub	objptr, ##28760
152e8     FC DA B0 FD | 	call	#_hg010b_spin2_cls
152ec     98 01 00 FF 
152f0     06 92 06 F6 | 	mov	arg01, ##@LR__6046
152f4                 | ' 
152f4                 | ' write(text)
152f4     A4 DE B0 FD | 	call	#_hg010b_spin2_write
152f8                 | ' crlf
152f8     40 E3 B0 FD | 	call	#_hg010b_spin2_crlf
152fc     18 00 00 FF 
15300     40 6B 06 F1 | 	add	ptr__dat__, ##12608
15304     35 93 02 FB | 	rdlong	arg01, ptr__dat__
15308     18 00 00 FF 
1530c     40 6B 86 F1 | 	sub	ptr__dat__, ##12608
15310                 | ' 
15310                 | ' write(text)
15310     88 DE B0 FD | 	call	#_hg010b_spin2_write
15314                 | ' crlf
15314     24 E3 B0 FD | 	call	#_hg010b_spin2_crlf
15318     51 00 00 FF 
1531c     58 65 06 F1 | 	add	objptr, ##41816
15320     32 93 02 FB | 	rdlong	arg01, objptr
15324     51 00 00 FF 
15328     58 65 86 F1 | 	sub	objptr, ##41816
1532c                 | ' 
1532c                 | ' write(text)
1532c     6C DE B0 FD | 	call	#_hg010b_spin2_write
15330                 | ' crlf
15330     08 E3 B0 FD | 	call	#_hg010b_spin2_crlf
15334     E7 F0 03 F6 | 	mov	ptra, fp
15338     F2 00 A0 FD | 	call	#popregs_
1533c                 | _do_mode_ret
1533c     2D 00 64 FD | 	ret
15340                 | 
15340                 | ' 
15340                 | ' '-------------------- mouse
15340                 | ' 
15340                 | ' sub do_mouse
15340                 | _do_mouse
15340     44 83 BF FD | 	call	#_pop
15344     00 7A 4E F2 | 	cmps	result1, #0 wz
15348                 | ' 
15348                 | ' t1=pop()
15348                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
15348     14 00 90 5D |  if_ne	jmp	#LR__1820
1534c     10 92 06 F6 | 	mov	arg01, #16
15350     00 94 06 F6 | 	mov	arg02, #0
15354     00 96 06 F6 | 	mov	arg03, #0
15358     F4 CC B0 FD | 	call	#_hg010b_spin2_setspritesize
1535c     10 00 90 FD | 	jmp	#LR__1821
15360                 | LR__1820
15360     10 92 06 F6 | 	mov	arg01, #16
15364     20 94 06 F6 | 	mov	arg02, #32
15368     20 96 06 F6 | 	mov	arg03, #32
1536c     E0 CC B0 FD | 	call	#_hg010b_spin2_setspritesize
15370                 | LR__1821
15370                 | _do_mouse_ret
15370     2D 00 64 FD | 	ret
15374                 | 
15374                 | ' 
15374                 | ' '-------------------- mousek
15374                 | ' 
15374                 | ' sub do_mousek
15374                 | _do_mousek
15374     00 CA 05 F6 | 	mov	COUNT_, #0
15378     E8 00 A0 FD | 	call	#pushregs_
1537c     0C F0 07 F1 | 	add	ptra, #12
15380     08 CE 05 F1 | 	add	fp, #8
15384     E7 3A 68 FC | 	wrlong	#29, fp
15388     08 CE 85 F1 | 	sub	fp, #8
1538c     52 00 00 FF 
15390     70 65 06 F1 | 	add	objptr, ##42352
15394     32 93 02 FB | 	rdlong	arg01, objptr
15398     52 00 00 FF 
1539c     70 65 86 F1 | 	sub	objptr, ##42352
153a0     E7 92 62 FC | 	wrlong	arg01, fp
153a4     E7 92 02 F6 | 	mov	arg01, fp
153a8     6C 83 BF FD | 	call	#_push
153ac     E7 F0 03 F6 | 	mov	ptra, fp
153b0     F2 00 A0 FD | 	call	#popregs_
153b4                 | _do_mousek_ret
153b4     2D 00 64 FD | 	ret
153b8                 | 
153b8                 | ' 
153b8                 | ' '-------------------- mousew
153b8                 | ' 
153b8                 | ' sub do_mousew
153b8                 | _do_mousew
153b8     00 CA 05 F6 | 	mov	COUNT_, #0
153bc     E8 00 A0 FD | 	call	#pushregs_
153c0     0C F0 07 F1 | 	add	ptra, #12
153c4     08 CE 05 F1 | 	add	fp, #8
153c8     E7 38 68 FC | 	wrlong	#28, fp
153cc     08 CE 85 F1 | 	sub	fp, #8
153d0     52 00 00 FF 
153d4     74 65 06 F1 | 	add	objptr, ##42356
153d8     32 93 02 FB | 	rdlong	arg01, objptr
153dc     52 00 00 FF 
153e0     74 65 86 F1 | 	sub	objptr, ##42356
153e4     E7 92 62 FC | 	wrlong	arg01, fp
153e8     E7 92 02 F6 | 	mov	arg01, fp
153ec     28 83 BF FD | 	call	#_push
153f0     E7 F0 03 F6 | 	mov	ptra, fp
153f4     F2 00 A0 FD | 	call	#popregs_
153f8                 | _do_mousew_ret
153f8     2D 00 64 FD | 	ret
153fc                 | 
153fc                 | ' 
153fc                 | ' '-------------------- mousex
153fc                 | ' 
153fc                 | ' sub do_mousex
153fc                 | _do_mousex
153fc     00 CA 05 F6 | 	mov	COUNT_, #0
15400     E8 00 A0 FD | 	call	#pushregs_
15404     0C F0 07 F1 | 	add	ptra, #12
15408     08 CE 05 F1 | 	add	fp, #8
1540c     E7 3A 68 FC | 	wrlong	#29, fp
15410     08 CE 85 F1 | 	sub	fp, #8
15414     52 00 00 FF 
15418     68 65 06 F1 | 	add	objptr, ##42344
1541c     32 93 02 FB | 	rdlong	arg01, objptr
15420     52 00 00 FF 
15424     68 65 86 F1 | 	sub	objptr, ##42344
15428     E7 92 62 FC | 	wrlong	arg01, fp
1542c     E7 92 02 F6 | 	mov	arg01, fp
15430     E4 82 BF FD | 	call	#_push
15434     E7 F0 03 F6 | 	mov	ptra, fp
15438     F2 00 A0 FD | 	call	#popregs_
1543c                 | _do_mousex_ret
1543c     2D 00 64 FD | 	ret
15440                 | 
15440                 | ' 
15440                 | ' '-------------------- mousey
15440                 | ' 
15440                 | ' sub do_mousey
15440                 | _do_mousey
15440     00 CA 05 F6 | 	mov	COUNT_, #0
15444     E8 00 A0 FD | 	call	#pushregs_
15448     0C F0 07 F1 | 	add	ptra, #12
1544c     08 CE 05 F1 | 	add	fp, #8
15450     E7 3A 68 FC | 	wrlong	#29, fp
15454     08 CE 85 F1 | 	sub	fp, #8
15458     52 00 00 FF 
1545c     6C 65 06 F1 | 	add	objptr, ##42348
15460     32 93 02 FB | 	rdlong	arg01, objptr
15464     52 00 00 FF 
15468     6C 65 86 F1 | 	sub	objptr, ##42348
1546c     E7 92 62 FC | 	wrlong	arg01, fp
15470     E7 92 02 F6 | 	mov	arg01, fp
15474     A0 82 BF FD | 	call	#_push
15478     E7 F0 03 F6 | 	mov	ptra, fp
1547c     F2 00 A0 FD | 	call	#popregs_
15480                 | _do_mousey_ret
15480     2D 00 64 FD | 	ret
15484                 | 
15484                 | ' 
15484                 | ' '------------------ new
15484                 | ' 
15484                 | ' sub do_new
15484                 | _do_new
15484     03 CA 05 F6 | 	mov	COUNT_, #3
15488     E8 00 A0 FD | 	call	#pushregs_
1548c                 | ' 
1548c                 | ' if inrun=1 then inrun=2
1548c     51 00 00 FF 
15490     0C 65 06 F1 | 	add	objptr, ##41740
15494     32 97 02 FB | 	rdlong	arg03, objptr
15498     51 00 00 FF 
1549c     0C 65 86 F1 | 	sub	objptr, ##41740
154a0     01 96 0E F2 | 	cmp	arg03, #1 wz
154a4     51 00 00 AF 
154a8     0C 65 06 A1 |  if_e	add	objptr, ##41740
154ac     32 05 68 AC |  if_e	wrlong	#2, objptr
154b0     51 00 00 AF 
154b4     0C 65 86 A1 |  if_e	sub	objptr, ##41740
154b8     13 92 C6 F9 | 	decod	arg01, #19
154bc     01 94 66 F6 | 	neg	arg02, #1
154c0     14 BD B0 FD | 	call	#_pslpoke
154c4     36 00 00 FF 
154c8     28 64 06 F1 | 	add	objptr, ##27688
154cc     32 01 68 FC | 	wrlong	#0, objptr
154d0                 | ' pslpoke(memlo,$FFFFFFFF)
154d0                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
154d0     00 A6 06 F6 | 	mov	local01, #0
154d4     20 00 00 FF 
154d8     10 64 86 F1 | 	sub	objptr, ##16400
154dc     D7 1E 48 FB | 	callpa	#(@LR__1831-@LR__1830)>>2,fcache_load_ptr_
154e0                 | LR__1830
154e0     53 97 02 F6 | 	mov	arg03, local01
154e4     04 96 66 F0 | 	shl	arg03, #4
154e8     32 97 02 F1 | 	add	arg03, objptr
154ec     98 01 00 FF 
154f0     07 94 06 F6 | 	mov	arg02, ##@LR__6047
154f4     4B 95 62 FC | 	wrlong	arg02, arg03
154f8     53 A9 02 F6 | 	mov	local02, local01
154fc     04 A8 66 F0 | 	shl	local02, #4
15500     32 A9 02 F1 | 	add	local02, objptr
15504     0C A8 06 F1 | 	add	local02, #12
15508     54 01 68 FC | 	wrlong	#0, local02
1550c     01 A6 06 F1 | 	add	local01, #1
15510     02 00 00 FF 
15514     01 A6 56 F2 | 	cmps	local01, ##1025 wc
15518     C4 FF 9F CD |  if_b	jmp	#LR__1830
1551c                 | LR__1831
1551c     35 00 00 FF 
15520     90 64 06 F1 | 	add	objptr, ##27280
15524     00 04 80 FF 
15528     32 01 68 FC | 	wrlong	##524288, objptr
1552c     06 00 00 FF 
15530     30 64 06 F1 | 	add	objptr, ##3120
15534     00 04 80 FF 
15538     32 01 68 FC | 	wrlong	##524288, objptr
1553c     04 64 06 F1 | 	add	objptr, #4
15540     00 04 80 FF 
15544     32 01 68 FC | 	wrlong	##524288, objptr
15548     0D 00 00 FF 
1554c     64 64 86 F1 | 	sub	objptr, ##6756
15550     32 01 68 FC | 	wrlong	#0, objptr
15554     07 00 00 FF 
15558     24 64 06 F1 | 	add	objptr, ##3620
1555c     32 01 68 FC | 	wrlong	#0, objptr
15560     07 00 00 FF 
15564     20 64 86 F1 | 	sub	objptr, ##3616
15568     00 04 80 FF 
1556c     32 01 68 FC | 	wrlong	##524288, objptr
15570     0D 00 00 FF 
15574     D0 64 06 F1 | 	add	objptr, ##6864
15578     32 01 68 FC | 	wrlong	#0, objptr
1557c     98 01 00 FF 
15580     08 AA 06 F6 | 	mov	local03, ##@LR__6048
15584     01 00 00 FF 
15588     E8 65 06 F1 | 	add	objptr, ##1000
1558c     32 AB 62 FC | 	wrlong	local03, objptr
15590     08 00 00 FF 
15594     88 64 86 F1 | 	sub	objptr, ##4232
15598     32 01 68 FC | 	wrlong	#0, objptr
1559c     04 64 06 F1 | 	add	objptr, #4
155a0     FF FF FF FF 
155a4     32 FF 6B FC | 	wrlong	##-1, objptr
155a8     06 00 00 FF 
155ac     A0 64 06 F1 | 	add	objptr, ##3232
155b0     32 01 68 FC | 	wrlong	#0, objptr
155b4     04 64 06 F1 | 	add	objptr, #4
155b8     32 01 68 FC | 	wrlong	#0, objptr
155bc                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
155bc                 | ' stackpointer=0
155bc                 | ' lineptr=0 
155bc                 | ' programptr=memlo ': stringptr=0
155bc                 | ' dataptr=0 : readline=""
155bc                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
155bc                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
155bc     00 A6 06 F6 | 	mov	local01, #0
155c0     06 00 00 FF 
155c4     9C 64 86 F1 | 	sub	objptr, ##3228
155c8     D7 16 48 FB | 	callpa	#(@LR__1833-@LR__1832)>>2,fcache_load_ptr_
155cc                 | LR__1832
155cc     53 A9 02 F6 | 	mov	local02, local01
155d0     02 A8 66 F0 | 	shl	local02, #2
155d4     53 A9 02 F1 | 	add	local02, local01
155d8     02 A8 66 F0 | 	shl	local02, #2
155dc     32 A9 02 F1 | 	add	local02, objptr
155e0     08 A8 06 F1 | 	add	local02, #8
155e4     FF FF FF FF 
155e8     54 FF 6B FC | 	wrlong	##-1, local02
155ec     01 A6 06 F1 | 	add	local01, #1
155f0     41 A6 56 F2 | 	cmps	local01, #65 wc
155f4     D4 FF 9F CD |  if_b	jmp	#LR__1832
155f8                 | LR__1833
155f8     4B 00 00 FF 
155fc     B8 64 86 F1 | 	sub	objptr, ##38584
15600                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
15600     00 A6 06 F6 | 	mov	local01, #0
15604                 | LR__1834
15604     53 97 02 F6 | 	mov	arg03, local01
15608     02 96 66 F0 | 	shl	arg03, #2
1560c     32 A9 02 F6 | 	mov	local02, objptr
15610     53 00 00 FF 
15614     AC A8 06 F1 | 	add	local02, ##42668
15618     54 97 02 F1 | 	add	arg03, local02
1561c     4B AB 0A FB | 	rdlong	local03, arg03 wz
15620     30 00 90 AD |  if_e	jmp	#LR__1835
15624     53 93 02 F6 | 	mov	arg01, local01
15628     00 94 06 F6 | 	mov	arg02, #0
1562c     00 96 06 F6 | 	mov	arg03, #0
15630     1C CA B0 FD | 	call	#_hg010b_spin2_setspritesize
15634     53 A9 02 F6 | 	mov	local02, local01
15638     02 A8 66 F0 | 	shl	local02, #2
1563c     32 AB 02 F6 | 	mov	local03, objptr
15640     53 00 00 FF 
15644     AC AA 06 F1 | 	add	local03, ##42668
15648     55 A9 02 F1 | 	add	local02, local03
1564c     54 93 02 FB | 	rdlong	arg01, local02
15650     A0 2E B1 FD | 	call	#__system___gc_free
15654                 | LR__1835
15654     01 A6 06 F1 | 	add	local01, #1
15658     10 A6 56 F2 | 	cmps	local01, #16 wc
1565c     A4 FF 9F CD |  if_b	jmp	#LR__1834
15660     53 00 00 FF 
15664     00 65 06 F1 | 	add	objptr, ##42752
15668     00 C0 9F FF 
1566c     32 01 68 FC | 	wrlong	##1065353216, objptr
15670     04 64 06 F1 | 	add	objptr, #4
15674     00 C0 9F FF 
15678     32 01 68 FC | 	wrlong	##1065353216, objptr
1567c     53 00 00 FF 
15680     00 65 86 F1 | 	sub	objptr, ##42752
15684     32 AB 02 FB | 	rdlong	local03, objptr
15688     53 00 00 FF 
1568c     EC 64 06 F1 | 	add	objptr, ##42732
15690     32 AB 62 FC | 	wrlong	local03, objptr
15694     53 00 00 FF 
15698     F0 64 86 F1 | 	sub	objptr, ##42736
1569c     11 92 06 F6 | 	mov	arg01, #17
156a0     08 94 06 F6 | 	mov	arg02, #8
156a4     10 96 06 F6 | 	mov	arg03, #16
156a8     A4 C9 B0 FD | 	call	#_hg010b_spin2_setspritesize
156ac     10 92 06 F6 | 	mov	arg01, #16
156b0     20 94 06 F6 | 	mov	arg02, #32
156b4     20 96 06 F6 | 	mov	arg03, #32
156b8     94 C9 B0 FD | 	call	#_hg010b_spin2_setspritesize
156bc     98 01 00 FF 
156c0     09 AA 06 F6 | 	mov	local03, ##@LR__6049
156c4     53 00 00 FF 
156c8     1C 65 06 F1 | 	add	objptr, ##42780
156cc     32 AB 62 FC | 	wrlong	local03, objptr
156d0     53 00 00 FF 
156d4     1C 65 86 F1 | 	sub	objptr, ##42780
156d8     3C AD B0 FD | 	call	#_init_audio
156dc     E7 F0 03 F6 | 	mov	ptra, fp
156e0     F2 00 A0 FD | 	call	#popregs_
156e4                 | _do_new_ret
156e4     2D 00 64 FD | 	ret
156e8                 | 
156e8                 | ' 
156e8                 | ' '-------------------- next
156e8                 | ' 
156e8                 | ' sub do_next()
156e8                 | _do_next
156e8     04 CA 05 F6 | 	mov	COUNT_, #4
156ec     E8 00 A0 FD | 	call	#pushregs_
156f0     94 7F BF FD | 	call	#_pop
156f4     3D A7 02 F6 | 	mov	local01, result1
156f8     3E A9 02 F6 | 	mov	local02, result2
156fc     3F AB 02 F6 | 	mov	local03, result3
15700                 | ' t1=pop() :varnum=t1.result.uresult
15700                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
15700     51 00 00 FF 
15704     50 65 06 F1 | 	add	objptr, ##41808
15708     32 95 02 FB | 	rdlong	arg02, objptr
1570c     4A 93 02 F6 | 	mov	arg01, arg02
15710     02 92 66 F0 | 	shl	arg01, #2
15714     4A 93 02 F1 | 	add	arg01, arg02
15718     02 92 66 F0 | 	shl	arg01, #2
1571c     06 00 00 FF 
15720     98 64 86 F1 | 	sub	objptr, ##3224
15724     32 93 02 F1 | 	add	arg01, objptr
15728     08 92 06 F1 | 	add	arg01, #8
1572c     49 95 02 FB | 	rdlong	arg02, arg01
15730     53 95 0A F2 | 	cmp	arg02, local01 wz
15734     4B 00 00 FF 
15738     B8 64 86 F1 | 	sub	objptr, ##38584
1573c     10 00 90 AD |  if_e	jmp	#LR__1840
15740     25 92 06 F6 | 	mov	arg01, #37
15744     00 94 06 F6 | 	mov	arg02, #0
15748     F0 B8 B0 FD | 	call	#_printerror
1574c     50 03 90 FD | 	jmp	#LR__1847
15750                 | LR__1840
15750                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
15750     53 95 02 F6 | 	mov	arg02, local01
15754     04 94 66 F0 | 	shl	arg02, #4
15758     32 93 02 F6 | 	mov	arg01, objptr
1575c     16 00 00 FF 
15760     18 92 06 F1 | 	add	arg01, ##11288
15764     49 95 02 F1 | 	add	arg02, arg01
15768     0C 94 06 F1 | 	add	arg02, #12
1576c     4A 95 02 FB | 	rdlong	arg02, arg02
15770     1E 94 0E F2 | 	cmp	arg02, #30 wz
15774     54 00 90 5D |  if_ne	jmp	#LR__1841
15778     53 95 02 F6 | 	mov	arg02, local01
1577c     04 94 66 F0 | 	shl	arg02, #4
15780     16 00 00 FF 
15784     18 64 06 F1 | 	add	objptr, ##11288
15788     32 95 02 F1 | 	add	arg02, objptr
1578c     0C 94 06 F1 | 	add	arg02, #12
15790     4A 39 68 FC | 	wrlong	#28, arg02
15794     53 AD 02 F6 | 	mov	local04, local01
15798     04 AC 66 F0 | 	shl	local04, #4
1579c     32 AD 02 F1 | 	add	local04, objptr
157a0     53 95 02 F6 | 	mov	arg02, local01
157a4     04 94 66 F0 | 	shl	arg02, #4
157a8     32 95 02 F1 | 	add	arg02, objptr
157ac     04 94 06 F1 | 	add	arg02, #4
157b0     4A 93 02 FB | 	rdlong	arg01, arg02
157b4     16 00 00 FF 
157b8     18 64 86 F1 | 	sub	objptr, ##11288
157bc     01 94 06 F6 | 	mov	arg02, #1
157c0     8C 1D B1 FD | 	call	#__system___float_tointeger
157c4     04 AC 06 F1 | 	add	local04, #4
157c8     56 7B 62 FC | 	wrlong	result1, local04
157cc                 | LR__1841
157cc     53 AD 02 F6 | 	mov	local04, local01
157d0     04 AC 66 F0 | 	shl	local04, #4
157d4     16 00 00 FF 
157d8     18 64 06 F1 | 	add	objptr, ##11288
157dc     32 AD 02 F1 | 	add	local04, objptr
157e0     53 95 02 F6 | 	mov	arg02, local01
157e4     04 94 66 F0 | 	shl	arg02, #4
157e8     32 95 02 F1 | 	add	arg02, objptr
157ec     3B 00 00 FF 
157f0     38 65 06 F1 | 	add	objptr, ##30520
157f4     32 93 02 FB | 	rdlong	arg01, objptr
157f8     49 7F 02 F6 | 	mov	result3, arg01
157fc     02 7E 66 F0 | 	shl	result3, #2
15800     49 7F 02 F1 | 	add	result3, arg01
15804     02 7E 66 F0 | 	shl	result3, #2
15808     06 00 00 FF 
1580c     98 64 86 F1 | 	sub	objptr, ##3224
15810     32 7F 02 F1 | 	add	result3, objptr
15814     04 94 06 F1 | 	add	arg02, #4
15818     4A 93 02 FB | 	rdlong	arg01, arg02
1581c     0C 7E 06 F1 | 	add	result3, #12
15820     3F 7F 02 FB | 	rdlong	result3, result3
15824     3F 93 02 F1 | 	add	arg01, result3
15828     04 AC 06 F1 | 	add	local04, #4
1582c     56 93 62 FC | 	wrlong	arg01, local04
15830                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
15830                 | ' if fortable(fortop).stepval>=0 then
15830     06 00 00 FF 
15834     98 64 06 F1 | 	add	objptr, ##3224
15838     32 AD 02 FB | 	rdlong	local04, objptr
1583c     56 93 02 F6 | 	mov	arg01, local04
15840     02 92 66 F0 | 	shl	arg01, #2
15844     56 93 02 F1 | 	add	arg01, local04
15848     02 92 66 F0 | 	shl	arg01, #2
1584c     06 00 00 FF 
15850     98 64 86 F1 | 	sub	objptr, ##3224
15854     32 93 02 F1 | 	add	arg01, objptr
15858     0C 92 06 F1 | 	add	arg01, #12
1585c     49 93 02 FB | 	rdlong	arg01, arg01
15860     00 92 56 F2 | 	cmps	arg01, #0 wc
15864     4B 00 00 FF 
15868     B8 64 86 F1 | 	sub	objptr, ##38584
1586c     78 00 90 CD |  if_b	jmp	#LR__1842
15870                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
15870     04 A6 66 F0 | 	shl	local01, #4
15874     16 00 00 FF 
15878     18 64 06 F1 | 	add	objptr, ##11288
1587c     32 A7 02 F1 | 	add	local01, objptr
15880     3B 00 00 FF 
15884     38 65 06 F1 | 	add	objptr, ##30520
15888     32 93 02 FB | 	rdlong	arg01, objptr
1588c     49 AD 02 F6 | 	mov	local04, arg01
15890     02 AC 66 F0 | 	shl	local04, #2
15894     49 AD 02 F1 | 	add	local04, arg01
15898     02 AC 66 F0 | 	shl	local04, #2
1589c     06 00 00 FF 
158a0     98 64 86 F1 | 	sub	objptr, ##3224
158a4     32 AD 02 F1 | 	add	local04, objptr
158a8     04 A6 06 F1 | 	add	local01, #4
158ac     53 A7 02 FB | 	rdlong	local01, local01
158b0     10 AC 06 F1 | 	add	local04, #16
158b4     56 AD 02 FB | 	rdlong	local04, local04
158b8     56 A7 5A F2 | 	cmps	local01, local04 wcz
158bc     4B 00 00 FF 
158c0     B8 64 86 F1 | 	sub	objptr, ##38584
158c4     9C 00 90 ED |  if_be	jmp	#LR__1844
158c8     51 00 00 FF 
158cc     50 65 06 F1 | 	add	objptr, ##41808
158d0     32 AD 02 FB | 	rdlong	local04, objptr
158d4     01 AC 86 F1 | 	sub	local04, #1
158d8     32 AD 62 FC | 	wrlong	local04, objptr
158dc     51 00 00 FF 
158e0     50 65 86 F1 | 	sub	objptr, ##41808
158e4     B8 01 90 FD | 	jmp	#LR__1847
158e8                 | LR__1842
158e8                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
158e8     53 AD 02 F6 | 	mov	local04, local01
158ec     04 AC 66 F0 | 	shl	local04, #4
158f0     16 00 00 FF 
158f4     18 64 06 F1 | 	add	objptr, ##11288
158f8     32 AD 02 F1 | 	add	local04, objptr
158fc     3B 00 00 FF 
15900     38 65 06 F1 | 	add	objptr, ##30520
15904     32 A7 02 FB | 	rdlong	local01, objptr
15908     53 93 02 F6 | 	mov	arg01, local01
1590c     02 92 66 F0 | 	shl	arg01, #2
15910     53 93 02 F1 | 	add	arg01, local01
15914     02 92 66 F0 | 	shl	arg01, #2
15918     06 00 00 FF 
1591c     98 64 86 F1 | 	sub	objptr, ##3224
15920     32 93 02 F1 | 	add	arg01, objptr
15924     04 AC 06 F1 | 	add	local04, #4
15928     56 AD 02 FB | 	rdlong	local04, local04
1592c     10 92 06 F1 | 	add	arg01, #16
15930     49 93 02 FB | 	rdlong	arg01, arg01
15934     49 AD 52 F2 | 	cmps	local04, arg01 wc
15938     4B 00 00 FF 
1593c     B8 64 86 F1 | 	sub	objptr, ##38584
15940     20 00 90 3D |  if_ae	jmp	#LR__1843
15944     51 00 00 FF 
15948     50 65 06 F1 | 	add	objptr, ##41808
1594c     32 AD 02 FB | 	rdlong	local04, objptr
15950     01 AC 86 F1 | 	sub	local04, #1
15954     32 AD 62 FC | 	wrlong	local04, objptr
15958     51 00 00 FF 
1595c     50 65 86 F1 | 	sub	objptr, ##41808
15960     3C 01 90 FD | 	jmp	#LR__1847
15964                 | LR__1843
15964                 | LR__1844
15964                 | ' ' if not returned, goto pointer 
15964                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
15964     51 00 00 FF 
15968     0C 65 06 F1 | 	add	objptr, ##41740
1596c     32 AD 02 FB | 	rdlong	local04, objptr
15970     51 00 00 FF 
15974     0C 65 86 F1 | 	sub	objptr, ##41740
15978     01 AC 16 F2 | 	cmp	local04, #1 wc
1597c     DC 00 90 CD |  if_b	jmp	#LR__1845
15980     51 00 00 FF 
15984     50 65 06 F1 | 	add	objptr, ##41808
15988     32 AD 02 FB | 	rdlong	local04, objptr
1598c     56 A7 02 F6 | 	mov	local01, local04
15990     02 A6 66 F0 | 	shl	local01, #2
15994     56 A7 02 F1 | 	add	local01, local04
15998     02 A6 66 F0 | 	shl	local01, #2
1599c     06 00 00 FF 
159a0     98 64 86 F1 | 	sub	objptr, ##3224
159a4     32 A7 02 F1 | 	add	local01, objptr
159a8     06 00 00 FF 
159ac     20 64 06 F1 | 	add	objptr, ##3104
159b0     32 AD 02 FB | 	rdlong	local04, objptr
159b4     51 00 00 FF 
159b8     D8 64 86 F1 | 	sub	objptr, ##41688
159bc     53 A7 02 FB | 	rdlong	local01, local01
159c0     53 AD 0A F2 | 	cmp	local04, local01 wz
159c4     94 00 90 AD |  if_e	jmp	#LR__1845
159c8     51 00 00 FF 
159cc     50 65 06 F1 | 	add	objptr, ##41808
159d0     32 AD 02 FB | 	rdlong	local04, objptr
159d4     56 A7 02 F6 | 	mov	local01, local04
159d8     02 A6 66 F0 | 	shl	local01, #2
159dc     56 A7 02 F1 | 	add	local01, local04
159e0     02 A6 66 F0 | 	shl	local01, #2
159e4     06 00 00 FF 
159e8     98 64 86 F1 | 	sub	objptr, ##3224
159ec     32 A7 02 F1 | 	add	local01, objptr
159f0     53 A7 02 FB | 	rdlong	local01, local01
159f4     06 00 00 FF 
159f8     20 64 06 F1 | 	add	objptr, ##3104
159fc     32 A7 62 FC | 	wrlong	local01, objptr
15a00     78 64 06 F1 | 	add	objptr, #120
15a04     32 AD 02 FB | 	rdlong	local04, objptr
15a08     56 A7 02 F6 | 	mov	local01, local04
15a0c     02 A6 66 F0 | 	shl	local01, #2
15a10     56 A7 02 F1 | 	add	local01, local04
15a14     02 A6 66 F0 | 	shl	local01, #2
15a18     06 00 00 FF 
15a1c     98 64 86 F1 | 	sub	objptr, ##3224
15a20     32 A7 02 F1 | 	add	local01, objptr
15a24     04 A6 06 F1 | 	add	local01, #4
15a28     53 A7 02 FB | 	rdlong	local01, local01
15a2c     06 00 00 FF 
15a30     24 64 06 F1 | 	add	objptr, ##3108
15a34     32 A7 62 FC | 	wrlong	local01, objptr
15a38     06 00 00 FF 
15a3c     40 64 86 F1 | 	sub	objptr, ##3136
15a40     32 AD 02 FB | 	rdlong	local04, objptr
15a44     01 AC 86 F1 | 	sub	local04, #1
15a48     04 64 06 F1 | 	add	objptr, #4
15a4c     32 AD 62 FC | 	wrlong	local04, objptr
15a50     4B 00 00 FF 
15a54     A0 64 86 F1 | 	sub	objptr, ##38560
15a58     44 00 90 FD | 	jmp	#LR__1846
15a5c                 | LR__1845
15a5c     51 00 00 FF 
15a60     50 65 06 F1 | 	add	objptr, ##41808
15a64     32 AD 02 FB | 	rdlong	local04, objptr
15a68     56 A7 02 F6 | 	mov	local01, local04
15a6c     02 A6 66 F0 | 	shl	local01, #2
15a70     56 A7 02 F1 | 	add	local01, local04
15a74     02 A6 66 F0 | 	shl	local01, #2
15a78     06 00 00 FF 
15a7c     98 64 86 F1 | 	sub	objptr, ##3224
15a80     32 A7 02 F1 | 	add	local01, objptr
15a84     04 A6 06 F1 | 	add	local01, #4
15a88     53 A7 02 FB | 	rdlong	local01, local01
15a8c     01 A6 86 F1 | 	sub	local01, #1
15a90     18 64 86 F1 | 	sub	objptr, #24
15a94     32 A7 62 FC | 	wrlong	local01, objptr
15a98     4B 00 00 FF 
15a9c     A0 64 86 F1 | 	sub	objptr, ##38560
15aa0                 | LR__1846
15aa0                 | LR__1847
15aa0     E7 F0 03 F6 | 	mov	ptra, fp
15aa4     F2 00 A0 FD | 	call	#popregs_
15aa8                 | _do_next_ret
15aa8     2D 00 64 FD | 	ret
15aac                 | 
15aac                 | ' 
15aac                 | ' '-------------------- no command (print "Unknown command")
15aac                 | ' 
15aac                 | ' sub do_no_command
15aac                 | _do_no_command
15aac     51 00 00 FF 
15ab0     10 65 06 F1 | 	add	objptr, ##41744
15ab4     32 95 02 FB | 	rdlong	arg02, objptr
15ab8     51 00 00 FF 
15abc     10 65 86 F1 | 	sub	objptr, ##41744
15ac0     17 92 06 F6 | 	mov	arg01, #23
15ac4     74 B5 B0 FD | 	call	#_printerror
15ac8                 | _do_no_command_ret
15ac8     2D 00 64 FD | 	ret
15acc                 | 
15acc                 | ' 
15acc                 | ' '-------------------- nothing
15acc                 | ' 
15acc                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
15acc                 | _do_nothing
15acc                 | _do_nothing_ret
15acc     2D 00 64 FD | 	ret
15ad0                 | 
15ad0                 | ' 
15ad0                 | ' '-------------------- on
15ad0                 | ' 
15ad0                 | ' sub do_on
15ad0                 | _do_on
15ad0     02 CA 05 F6 | 	mov	COUNT_, #2
15ad4     E8 00 A0 FD | 	call	#pushregs_
15ad8     18 F0 07 F1 | 	add	ptra, #24
15adc     4B 00 00 FF 
15ae0     A0 64 06 F1 | 	add	objptr, ##38560
15ae4     32 93 02 FB | 	rdlong	arg01, objptr
15ae8     49 7D 02 F6 | 	mov	result2, arg01
15aec     01 7C 66 F0 | 	shl	result2, #1
15af0     49 7D 02 F1 | 	add	result2, arg01
15af4     02 7C 66 F0 | 	shl	result2, #2
15af8     03 00 00 FF 
15afc     04 64 86 F1 | 	sub	objptr, ##1540
15b00     32 7D 02 F1 | 	add	result2, objptr
15b04     3E A7 02 FB | 	rdlong	local01, result2
15b08     49 A9 02 F6 | 	mov	local02, arg01
15b0c     01 A8 66 F0 | 	shl	local02, #1
15b10     49 A9 02 F1 | 	add	local02, arg01
15b14     02 A8 66 F0 | 	shl	local02, #2
15b18     32 A9 02 F1 | 	add	local02, objptr
15b1c     04 A8 06 F1 | 	add	local02, #4
15b20     54 A9 02 FB | 	rdlong	local02, local02
15b24     48 00 00 FF 
15b28     9C 64 86 F1 | 	sub	objptr, ##37020
15b2c     58 7B BF FD | 	call	#_pop
15b30     E7 7A 62 FC | 	wrlong	result1, fp
15b34     04 CE 05 F1 | 	add	fp, #4
15b38     E7 7C 62 FC | 	wrlong	result2, fp
15b3c     04 CE 05 F1 | 	add	fp, #4
15b40     E7 7E 62 FC | 	wrlong	result3, fp
15b44     08 CE 85 F1 | 	sub	fp, #8
15b48     E7 92 02 F6 | 	mov	arg01, fp
15b4c     14 7D BF FD | 	call	#_converttoint
15b50                 | ' 
15b50                 | ' numpar=compiledline(lineptr_e).result.uresult
15b50                 | ' skip=compiledline(lineptr_e).result.twowords(1)
15b50                 | ' t1=pop()
15b50                 | ' t=converttoint(t1)
15b50                 | ' if t<1 orelse t>numpar then return
15b50     01 7A 56 F2 | 	cmps	result1, #1 wc
15b54     30 00 90 CD |  if_b	jmp	#LR__1850
15b58     53 7B 5A F2 | 	cmps	result1, local01 wcz
15b5c     28 00 90 1D |  if_a	jmp	#LR__1850
15b60     01 7A 86 F1 | 	sub	result1, #1
15b64     3D A9 02 FD | 	qmul	local02, result1
15b68     4B 00 00 FF 
15b6c     A0 64 06 F1 | 	add	objptr, ##38560
15b70     32 A7 02 FB | 	rdlong	local01, objptr
15b74     18 A8 62 FD | 	getqx	local02
15b78     54 A7 02 F1 | 	add	local01, local02
15b7c     32 A7 62 FC | 	wrlong	local01, objptr
15b80     4B 00 00 FF 
15b84     A0 64 86 F1 | 	sub	objptr, ##38560
15b88                 | LR__1850
15b88     E7 F0 03 F6 | 	mov	ptra, fp
15b8c     F2 00 A0 FD | 	call	#popregs_
15b90                 | _do_on_ret
15b90     2D 00 64 FD | 	ret
15b94                 | 
15b94                 | ' 
15b94                 | ' '-------------------- open
15b94                 | ' 
15b94                 | ' sub do_open
15b94                 | _do_open
15b94     04 CA 05 F6 | 	mov	COUNT_, #4
15b98     E8 00 A0 FD | 	call	#pushregs_
15b9c     20 F0 07 F1 | 	add	ptra, #32
15ba0     E4 7A BF FD | 	call	#_pop
15ba4     3F 97 02 F6 | 	mov	arg03, result3
15ba8     E7 7A 62 FC | 	wrlong	result1, fp
15bac     04 CE 05 F1 | 	add	fp, #4
15bb0     E7 7C 62 FC | 	wrlong	result2, fp
15bb4     04 CE 05 F1 | 	add	fp, #4
15bb8     E7 96 62 FC | 	wrlong	arg03, fp
15bbc                 | ' 
15bbc                 | ' numpar=compiledline(lineptr_e).result.uresult
15bbc                 | ' 
15bbc                 | ' t1=pop()
15bbc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15bbc     08 CE 85 F1 | 	sub	fp, #8
15bc0     2B 96 0E F2 | 	cmp	arg03, #43 wz
15bc4     18 00 90 5D |  if_ne	jmp	#LR__1860
15bc8     E7 92 02 FB | 	rdlong	arg01, fp
15bcc     28 7C BF FD | 	call	#_convertstring
15bd0     E7 7A 62 FC | 	wrlong	result1, fp
15bd4     08 CE 05 F1 | 	add	fp, #8
15bd8     E7 3E 68 FC | 	wrlong	#31, fp
15bdc     08 CE 85 F1 | 	sub	fp, #8
15be0                 | LR__1860
15be0                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
15be0     08 CE 05 F1 | 	add	fp, #8
15be4     E7 96 02 FB | 	rdlong	arg03, fp
15be8     08 CE 85 F1 | 	sub	fp, #8
15bec     1F 96 0E F2 | 	cmp	arg03, #31 wz
15bf0     44 00 90 AD |  if_e	jmp	#LR__1861
15bf4     00 92 06 F6 | 	mov	arg01, #0
15bf8     40 43 B1 FD | 	call	#__system___getiolock_0622
15bfc     3D 93 02 F6 | 	mov	arg01, result1
15c00     B4 ED B0 FD | 	call	#__system___lockmem
15c04     98 01 00 FF 
15c08     14 94 06 F6 | 	mov	arg02, ##@LR__6050
15c0c     00 92 06 F6 | 	mov	arg01, #0
15c10     00 96 06 F6 | 	mov	arg03, #0
15c14     94 FA B0 FD | 	call	#__system___basic_print_string
15c18     00 92 06 F6 | 	mov	arg01, #0
15c1c     0A 94 06 F6 | 	mov	arg02, #10
15c20     00 96 06 F6 | 	mov	arg03, #0
15c24     2C FA B0 FD | 	call	#__system___basic_print_char
15c28     00 92 06 F6 | 	mov	arg01, #0
15c2c     0C 43 B1 FD | 	call	#__system___getiolock_0622
15c30     3D 01 68 FC | 	wrlong	#0, result1
15c34     C4 01 90 FD | 	jmp	#LR__1872
15c38                 | LR__1861
15c38     E7 A6 02 FB | 	rdlong	local01, fp
15c3c     48 7A BF FD | 	call	#_pop
15c40     3F 97 02 F6 | 	mov	arg03, result3
15c44     E7 7A 62 FC | 	wrlong	result1, fp
15c48     04 CE 05 F1 | 	add	fp, #4
15c4c     E7 7C 62 FC | 	wrlong	result2, fp
15c50     04 CE 05 F1 | 	add	fp, #4
15c54     E7 96 62 FC | 	wrlong	arg03, fp
15c58                 | ' filename=t1.result.sresult
15c58                 | ' t1=pop()
15c58                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15c58     08 CE 85 F1 | 	sub	fp, #8
15c5c     2B 96 0E F2 | 	cmp	arg03, #43 wz
15c60     18 00 90 5D |  if_ne	jmp	#LR__1862
15c64     E7 92 02 FB | 	rdlong	arg01, fp
15c68     8C 7B BF FD | 	call	#_convertstring
15c6c     E7 7A 62 FC | 	wrlong	result1, fp
15c70     08 CE 05 F1 | 	add	fp, #8
15c74     E7 3E 68 FC | 	wrlong	#31, fp
15c78     08 CE 85 F1 | 	sub	fp, #8
15c7c                 | LR__1862
15c7c     00 A8 06 F6 | 	mov	local02, #0
15c80                 | ' mode=0
15c80                 | ' if t1.result_type=result_string then
15c80     08 CE 05 F1 | 	add	fp, #8
15c84     E7 94 02 FB | 	rdlong	arg02, fp
15c88     08 CE 85 F1 | 	sub	fp, #8
15c8c     1F 94 0E F2 | 	cmp	arg02, #31 wz
15c90     4C 00 90 5D |  if_ne	jmp	#LR__1863
15c94                 | '   if t1.result.sresult="read" then mode=1
15c94     E7 92 02 FB | 	rdlong	arg01, fp
15c98     98 01 00 FF 
15c9c     26 94 06 F6 | 	mov	arg02, ##@LR__6051
15ca0     3C ED B0 FD | 	call	#__system___string_cmp
15ca4     00 7A 0E F2 | 	cmp	result1, #0 wz
15ca8     01 A8 06 A6 |  if_e	mov	local02, #1
15cac                 | '   if t1.result.sresult="write" then mode=2
15cac     E7 92 02 FB | 	rdlong	arg01, fp
15cb0     98 01 00 FF 
15cb4     2B 94 06 F6 | 	mov	arg02, ##@LR__6052
15cb8     24 ED B0 FD | 	call	#__system___string_cmp
15cbc     00 7A 0E F2 | 	cmp	result1, #0 wz
15cc0     02 A8 06 A6 |  if_e	mov	local02, #2
15cc4                 | '   if t1.result.sresult="append" then mode=4
15cc4     E7 92 02 FB | 	rdlong	arg01, fp
15cc8     98 01 00 FF 
15ccc     31 94 06 F6 | 	mov	arg02, ##@LR__6053
15cd0     0C ED B0 FD | 	call	#__system___string_cmp
15cd4     00 7A 0E F2 | 	cmp	result1, #0 wz
15cd8     04 A8 06 A6 |  if_e	mov	local02, #4
15cdc     0C 00 90 FD | 	jmp	#LR__1864
15ce0                 | LR__1863
15ce0     E7 92 02 F6 | 	mov	arg01, fp
15ce4     7C 7B BF FD | 	call	#_converttoint
15ce8     3D A9 02 F6 | 	mov	local02, result1
15cec                 | LR__1864
15cec     98 79 BF FD | 	call	#_pop
15cf0     3F 97 02 F6 | 	mov	arg03, result3
15cf4     E7 7A 62 FC | 	wrlong	result1, fp
15cf8     04 CE 05 F1 | 	add	fp, #4
15cfc     E7 7C 62 FC | 	wrlong	result2, fp
15d00     04 CE 05 F1 | 	add	fp, #4
15d04     E7 96 62 FC | 	wrlong	arg03, fp
15d08                 | ' t1=pop()
15d08                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
15d08     08 CE 85 F1 | 	sub	fp, #8
15d0c     2C 96 0E F2 | 	cmp	arg03, #44 wz
15d10     44 00 90 AD |  if_e	jmp	#LR__1865
15d14     00 92 06 F6 | 	mov	arg01, #0
15d18     20 42 B1 FD | 	call	#__system___getiolock_0622
15d1c     3D 93 02 F6 | 	mov	arg01, result1
15d20     94 EC B0 FD | 	call	#__system___lockmem
15d24     98 01 00 FF 
15d28     38 94 06 F6 | 	mov	arg02, ##@LR__6054
15d2c     00 92 06 F6 | 	mov	arg01, #0
15d30     00 96 06 F6 | 	mov	arg03, #0
15d34     74 F9 B0 FD | 	call	#__system___basic_print_string
15d38     00 92 06 F6 | 	mov	arg01, #0
15d3c     0A 94 06 F6 | 	mov	arg02, #10
15d40     00 96 06 F6 | 	mov	arg03, #0
15d44     0C F9 B0 FD | 	call	#__system___basic_print_char
15d48     00 92 06 F6 | 	mov	arg01, #0
15d4c     EC 41 B1 FD | 	call	#__system___getiolock_0622
15d50     3D 01 68 FC | 	wrlong	#0, result1
15d54     A4 00 90 FD | 	jmp	#LR__1872
15d58                 | LR__1865
15d58     E7 AA 02 FB | 	rdlong	local03, fp
15d5c                 | ' channel  = t1.result.iresult
15d5c                 | ' select case  mode
15d5c     54 AD 02 F6 | 	mov	local04, local02
15d60     01 AC 86 F1 | 	sub	local04, #1
15d64     04 AC 26 F3 | 	fle	local04, #4
15d68     30 AC 62 FD | 	jmprel	local04
15d6c                 | LR__1866
15d6c     10 00 90 FD | 	jmp	#LR__1867
15d70     20 00 90 FD | 	jmp	#LR__1868
15d74     44 00 90 FD | 	jmp	#LR__1870
15d78     2C 00 90 FD | 	jmp	#LR__1869
15d7c     3C 00 90 FD | 	jmp	#LR__1870
15d80                 | LR__1867
15d80     55 93 02 F6 | 	mov	arg01, local03
15d84     53 95 02 F6 | 	mov	arg02, local01
15d88     00 96 06 F6 | 	mov	arg03, #0
15d8c     D8 F7 B0 FD | 	call	#__system___basic_open_string
15d90     68 00 90 FD | 	jmp	#LR__1871
15d94                 | LR__1868
15d94     55 93 02 F6 | 	mov	arg01, local03
15d98     53 95 02 F6 | 	mov	arg02, local01
15d9c     0D 96 06 F6 | 	mov	arg03, #13
15da0     C4 F7 B0 FD | 	call	#__system___basic_open_string
15da4     54 00 90 FD | 	jmp	#LR__1871
15da8                 | LR__1869
15da8     55 93 02 F6 | 	mov	arg01, local03
15dac     53 95 02 F6 | 	mov	arg02, local01
15db0     25 96 06 F6 | 	mov	arg03, #37
15db4     B0 F7 B0 FD | 	call	#__system___basic_open_string
15db8     40 00 90 FD | 	jmp	#LR__1871
15dbc                 | LR__1870
15dbc     00 92 06 F6 | 	mov	arg01, #0
15dc0     78 41 B1 FD | 	call	#__system___getiolock_0622
15dc4     3D 93 02 F6 | 	mov	arg01, result1
15dc8     EC EB B0 FD | 	call	#__system___lockmem
15dcc     98 01 00 FF 
15dd0     4A 94 06 F6 | 	mov	arg02, ##@LR__6055
15dd4     00 92 06 F6 | 	mov	arg01, #0
15dd8     00 96 06 F6 | 	mov	arg03, #0
15ddc     CC F8 B0 FD | 	call	#__system___basic_print_string
15de0     00 92 06 F6 | 	mov	arg01, #0
15de4     0A 94 06 F6 | 	mov	arg02, #10
15de8     00 96 06 F6 | 	mov	arg03, #0
15dec     64 F8 B0 FD | 	call	#__system___basic_print_char
15df0     00 92 06 F6 | 	mov	arg01, #0
15df4     44 41 B1 FD | 	call	#__system___getiolock_0622
15df8     3D 01 68 FC | 	wrlong	#0, result1
15dfc                 | LR__1871
15dfc                 | LR__1872
15dfc     E7 F0 03 F6 | 	mov	ptra, fp
15e00     F2 00 A0 FD | 	call	#popregs_
15e04                 | _do_open_ret
15e04     2D 00 64 FD | 	ret
15e08                 | 
15e08                 | ' 
15e08                 | ' ' ------------------ padrx
15e08                 | ' 
15e08                 | ' sub do_padrx
15e08                 | _do_padrx
15e08     04 CA 05 F6 | 	mov	COUNT_, #4
15e0c     E8 00 A0 FD | 	call	#pushregs_
15e10     14 F0 07 F1 | 	add	ptra, #20
15e14     4B 00 00 FF 
15e18     A0 64 06 F1 | 	add	objptr, ##38560
15e1c     32 A7 02 FB | 	rdlong	local01, objptr
15e20     53 97 02 F6 | 	mov	arg03, local01
15e24     01 96 66 F0 | 	shl	arg03, #1
15e28     53 97 02 F1 | 	add	arg03, local01
15e2c     02 96 66 F0 | 	shl	arg03, #2
15e30     03 00 00 FF 
15e34     04 64 86 F1 | 	sub	objptr, ##1540
15e38     32 97 02 F1 | 	add	arg03, objptr
15e3c     4B A9 02 FB | 	rdlong	local02, arg03
15e40                 | ' 
15e40                 | ' numpar=compiledline(lineptr_e).result.uresult
15e40                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
15e40     02 A8 16 F2 | 	cmp	local02, #2 wc
15e44     48 00 00 FF 
15e48     9C 64 86 F1 | 	sub	objptr, ##37020
15e4c     40 00 90 CD |  if_b	jmp	#LR__1880
15e50     00 92 06 F6 | 	mov	arg01, #0
15e54     E4 40 B1 FD | 	call	#__system___getiolock_0622
15e58     3D 93 02 F6 | 	mov	arg01, result1
15e5c     58 EB B0 FD | 	call	#__system___lockmem
15e60     98 01 00 FF 
15e64     5D 94 06 F6 | 	mov	arg02, ##@LR__6056
15e68     00 92 06 F6 | 	mov	arg01, #0
15e6c     00 96 06 F6 | 	mov	arg03, #0
15e70     38 F8 B0 FD | 	call	#__system___basic_print_string
15e74     00 92 06 F6 | 	mov	arg01, #0
15e78     C0 40 B1 FD | 	call	#__system___getiolock_0622
15e7c     3D 01 68 FC | 	wrlong	#0, result1
15e80     27 92 06 F6 | 	mov	arg01, #39
15e84     00 94 06 F6 | 	mov	arg02, #0
15e88     B0 B1 B0 FD | 	call	#_printerror
15e8c     A0 01 90 FD | 	jmp	#LR__1884
15e90                 | LR__1880
15e90                 | ' if numpar=0 then 
15e90     00 A8 0E F2 | 	cmp	local02, #0 wz
15e94     8C 00 90 5D |  if_ne	jmp	#LR__1881
15e98     00 C0 1B FF 
15e9c     00 A8 06 F6 | 	mov	local02, ##931135488
15ea0     52 00 00 FF 
15ea4     E8 65 06 F1 | 	add	objptr, ##42472
15ea8     32 93 02 FB | 	rdlong	arg01, objptr
15eac     52 00 00 FF 
15eb0     E8 65 86 F1 | 	sub	objptr, ##42472
15eb4     49 93 52 F6 | 	abs	arg01, arg01 wc
15eb8     1F AA C6 C9 |  if_b	decod	local03, #31
15ebc     00 AA 06 36 |  if_ae	mov	local03, #0
15ec0     C0 0D B1 FD | 	call	#__system___float_fromuns
15ec4     55 7B 62 F5 | 	xor	result1, local03
15ec8     3D 93 02 F6 | 	mov	arg01, result1
15ecc     FF 7F 23 FF 
15ed0     00 94 06 F6 | 	mov	arg02, ##1191181824
15ed4     B4 13 B1 FD | 	call	#__system___float_div
15ed8     3D 95 02 F6 | 	mov	arg02, result1
15edc     54 93 02 F6 | 	mov	arg01, local02
15ee0     D4 0D B1 FD | 	call	#__system___float_add
15ee4     3D AD 02 F6 | 	mov	local04, result1
15ee8                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
15ee8     56 93 02 F6 | 	mov	arg01, local04
15eec     1F 92 06 F4 | 	bitl	arg01, #31
15ef0     89 41 1D FF 
15ef4     6F 94 06 F6 | 	mov	arg02, ##981668463
15ef8     01 96 06 F6 | 	mov	arg03, #1
15efc     BC 15 B1 FD | 	call	#__system___float_cmp
15f00     00 7A 56 F2 | 	cmps	result1, #0 wc
15f04     00 AC 06 C6 |  if_b	mov	local04, #0
15f08     E7 AC 62 FC | 	wrlong	local04, fp
15f0c     08 CE 05 F1 | 	add	fp, #8
15f10     E7 3C 68 FC | 	wrlong	#30, fp
15f14     08 CE 85 F1 | 	sub	fp, #8
15f18     E7 92 02 F6 | 	mov	arg01, fp
15f1c     F8 77 BF FD | 	call	#_push
15f20                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
15f20     0C 01 90 FD | 	jmp	#LR__1884
15f24                 | LR__1881
15f24     60 77 BF FD | 	call	#_pop
15f28     E7 7A 62 FC | 	wrlong	result1, fp
15f2c     04 CE 05 F1 | 	add	fp, #4
15f30     E7 7C 62 FC | 	wrlong	result2, fp
15f34     04 CE 05 F1 | 	add	fp, #4
15f38     E7 7E 62 FC | 	wrlong	result3, fp
15f3c                 | ' t1=pop()
15f3c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
15f3c     08 CE 85 F1 | 	sub	fp, #8
15f40     1C 7E 0E F2 | 	cmp	result3, #28 wz
15f44     08 CE 05 51 |  if_ne	add	fp, #8
15f48     E7 A6 02 5B |  if_ne	rdlong	local01, fp
15f4c     08 CE 85 51 |  if_ne	sub	fp, #8
15f50     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
15f54     CC 00 90 5D |  if_ne	jmp	#LR__1883
15f58     E7 AC 02 FB | 	rdlong	local04, fp
15f5c     53 00 00 FF 
15f60     60 65 06 F1 | 	add	objptr, ##42848
15f64     32 AD 62 FC | 	wrlong	local04, objptr
15f68                 | '   q=t1.result.uresult
15f68                 | '   if q<7 then 
15f68     53 00 00 FF 
15f6c     60 65 86 F1 | 	sub	objptr, ##42848
15f70     07 AC 56 F2 | 	cmps	local04, #7 wc
15f74     9C 00 90 3D |  if_ae	jmp	#LR__1882
15f78     00 C0 1B FF 
15f7c     00 AC 06 F6 | 	mov	local04, ##931135488
15f80     53 00 00 FF 
15f84     60 65 06 F1 | 	add	objptr, ##42848
15f88     32 A9 02 FB | 	rdlong	local02, objptr
15f8c     02 A8 66 F0 | 	shl	local02, #2
15f90     78 65 86 F1 | 	sub	objptr, #376
15f94     32 A9 02 F1 | 	add	local02, objptr
15f98     54 93 02 FB | 	rdlong	arg01, local02
15f9c     52 00 00 FF 
15fa0     E8 65 86 F1 | 	sub	objptr, ##42472
15fa4     49 93 52 F6 | 	abs	arg01, arg01 wc
15fa8     1F AA C6 C9 |  if_b	decod	local03, #31
15fac     00 AA 06 36 |  if_ae	mov	local03, #0
15fb0     D0 0C B1 FD | 	call	#__system___float_fromuns
15fb4     55 7B 62 F5 | 	xor	result1, local03
15fb8     3D 93 02 F6 | 	mov	arg01, result1
15fbc     FF 7F 23 FF 
15fc0     00 94 06 F6 | 	mov	arg02, ##1191181824
15fc4     C4 12 B1 FD | 	call	#__system___float_div
15fc8     3D 95 02 F6 | 	mov	arg02, result1
15fcc     56 93 02 F6 | 	mov	arg01, local04
15fd0     E4 0C B1 FD | 	call	#__system___float_add
15fd4     3D AD 02 F6 | 	mov	local04, result1
15fd8                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
15fd8     56 93 02 F6 | 	mov	arg01, local04
15fdc     1F 92 06 F4 | 	bitl	arg01, #31
15fe0     89 41 1D FF 
15fe4     6F 94 06 F6 | 	mov	arg02, ##981668463
15fe8     01 96 06 F6 | 	mov	arg03, #1
15fec     CC 14 B1 FD | 	call	#__system___float_cmp
15ff0     00 7A 56 F2 | 	cmps	result1, #0 wc
15ff4     00 AC 06 C6 |  if_b	mov	local04, #0
15ff8     E7 AC 62 FC | 	wrlong	local04, fp
15ffc     08 CE 05 F1 | 	add	fp, #8
16000     E7 3C 68 FC | 	wrlong	#30, fp
16004     08 CE 85 F1 | 	sub	fp, #8
16008     E7 92 02 F6 | 	mov	arg01, fp
1600c     08 77 BF FD | 	call	#_push
16010                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16010     1C 00 90 FD | 	jmp	#LR__1884
16014                 | LR__1882
16014     29 92 06 F6 | 	mov	arg01, #41
16018     00 94 06 F6 | 	mov	arg02, #0
1601c     1C B0 B0 FD | 	call	#_printerror
16020                 | '      printerror(41) : return
16020     0C 00 90 FD | 	jmp	#LR__1884
16024                 | LR__1883
16024     29 92 06 F6 | 	mov	arg01, #41
16028     00 94 06 F6 | 	mov	arg02, #0
1602c     0C B0 B0 FD | 	call	#_printerror
16030                 | LR__1884
16030     E7 F0 03 F6 | 	mov	ptra, fp
16034     F2 00 A0 FD | 	call	#popregs_
16038                 | _do_padrx_ret
16038     2D 00 64 FD | 	ret
1603c                 | 
1603c                 | ' 
1603c                 | ' ' ------------------ padry
1603c                 | ' 
1603c                 | ' sub do_padry
1603c                 | _do_padry
1603c     04 CA 05 F6 | 	mov	COUNT_, #4
16040     E8 00 A0 FD | 	call	#pushregs_
16044     14 F0 07 F1 | 	add	ptra, #20
16048     4B 00 00 FF 
1604c     A0 64 06 F1 | 	add	objptr, ##38560
16050     32 A7 02 FB | 	rdlong	local01, objptr
16054     53 97 02 F6 | 	mov	arg03, local01
16058     01 96 66 F0 | 	shl	arg03, #1
1605c     53 97 02 F1 | 	add	arg03, local01
16060     02 96 66 F0 | 	shl	arg03, #2
16064     03 00 00 FF 
16068     04 64 86 F1 | 	sub	objptr, ##1540
1606c     32 97 02 F1 | 	add	arg03, objptr
16070     4B A9 02 FB | 	rdlong	local02, arg03
16074                 | ' 
16074                 | ' numpar=compiledline(lineptr_e).result.uresult
16074                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
16074     02 A8 16 F2 | 	cmp	local02, #2 wc
16078     48 00 00 FF 
1607c     9C 64 86 F1 | 	sub	objptr, ##37020
16080     40 00 90 CD |  if_b	jmp	#LR__1890
16084     00 92 06 F6 | 	mov	arg01, #0
16088     B0 3E B1 FD | 	call	#__system___getiolock_0622
1608c     3D 93 02 F6 | 	mov	arg01, result1
16090     24 E9 B0 FD | 	call	#__system___lockmem
16094     98 01 00 FF 
16098     65 94 06 F6 | 	mov	arg02, ##@LR__6057
1609c     00 92 06 F6 | 	mov	arg01, #0
160a0     00 96 06 F6 | 	mov	arg03, #0
160a4     04 F6 B0 FD | 	call	#__system___basic_print_string
160a8     00 92 06 F6 | 	mov	arg01, #0
160ac     8C 3E B1 FD | 	call	#__system___getiolock_0622
160b0     3D 01 68 FC | 	wrlong	#0, result1
160b4     27 92 06 F6 | 	mov	arg01, #39
160b8     00 94 06 F6 | 	mov	arg02, #0
160bc     7C AF B0 FD | 	call	#_printerror
160c0     A0 01 90 FD | 	jmp	#LR__1894
160c4                 | LR__1890
160c4                 | ' if numpar=0 then 
160c4     00 A8 0E F2 | 	cmp	local02, #0 wz
160c8     8C 00 90 5D |  if_ne	jmp	#LR__1891
160cc     00 C0 1B FF 
160d0     00 A8 06 F6 | 	mov	local02, ##931135488
160d4     53 00 00 FF 
160d8     04 64 06 F1 | 	add	objptr, ##42500
160dc     32 93 02 FB | 	rdlong	arg01, objptr
160e0     53 00 00 FF 
160e4     04 64 86 F1 | 	sub	objptr, ##42500
160e8     49 93 52 F6 | 	abs	arg01, arg01 wc
160ec     1F AA C6 C9 |  if_b	decod	local03, #31
160f0     00 AA 06 36 |  if_ae	mov	local03, #0
160f4     8C 0B B1 FD | 	call	#__system___float_fromuns
160f8     55 7B 62 F5 | 	xor	result1, local03
160fc     3D 93 02 F6 | 	mov	arg01, result1
16100     FF 7F 23 FF 
16104     00 94 06 F6 | 	mov	arg02, ##1191181824
16108     80 11 B1 FD | 	call	#__system___float_div
1610c     3D 95 02 F6 | 	mov	arg02, result1
16110     54 93 02 F6 | 	mov	arg01, local02
16114     A0 0B B1 FD | 	call	#__system___float_add
16118     3D AD 02 F6 | 	mov	local04, result1
1611c                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1611c     56 93 02 F6 | 	mov	arg01, local04
16120     1F 92 06 F4 | 	bitl	arg01, #31
16124     89 41 1D FF 
16128     6F 94 06 F6 | 	mov	arg02, ##981668463
1612c     01 96 06 F6 | 	mov	arg03, #1
16130     88 13 B1 FD | 	call	#__system___float_cmp
16134     00 7A 56 F2 | 	cmps	result1, #0 wc
16138     00 AC 06 C6 |  if_b	mov	local04, #0
1613c     E7 AC 62 FC | 	wrlong	local04, fp
16140     08 CE 05 F1 | 	add	fp, #8
16144     E7 3C 68 FC | 	wrlong	#30, fp
16148     08 CE 85 F1 | 	sub	fp, #8
1614c     E7 92 02 F6 | 	mov	arg01, fp
16150     C4 75 BF FD | 	call	#_push
16154                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16154     0C 01 90 FD | 	jmp	#LR__1894
16158                 | LR__1891
16158     2C 75 BF FD | 	call	#_pop
1615c     E7 7A 62 FC | 	wrlong	result1, fp
16160     04 CE 05 F1 | 	add	fp, #4
16164     E7 7C 62 FC | 	wrlong	result2, fp
16168     04 CE 05 F1 | 	add	fp, #4
1616c     E7 7E 62 FC | 	wrlong	result3, fp
16170                 | ' t1=pop()
16170                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16170     08 CE 85 F1 | 	sub	fp, #8
16174     1C 7E 0E F2 | 	cmp	result3, #28 wz
16178     08 CE 05 51 |  if_ne	add	fp, #8
1617c     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16180     08 CE 85 51 |  if_ne	sub	fp, #8
16184     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16188     CC 00 90 5D |  if_ne	jmp	#LR__1893
1618c     E7 AC 02 FB | 	rdlong	local04, fp
16190     53 00 00 FF 
16194     60 65 06 F1 | 	add	objptr, ##42848
16198     32 AD 62 FC | 	wrlong	local04, objptr
1619c                 | '   q=t1.result.uresult
1619c                 | '   if q<7 then 
1619c     53 00 00 FF 
161a0     60 65 86 F1 | 	sub	objptr, ##42848
161a4     07 AC 56 F2 | 	cmps	local04, #7 wc
161a8     9C 00 90 3D |  if_ae	jmp	#LR__1892
161ac     00 C0 1B FF 
161b0     00 AC 06 F6 | 	mov	local04, ##931135488
161b4     53 00 00 FF 
161b8     60 65 06 F1 | 	add	objptr, ##42848
161bc     32 A9 02 FB | 	rdlong	local02, objptr
161c0     02 A8 66 F0 | 	shl	local02, #2
161c4     5C 65 86 F1 | 	sub	objptr, #348
161c8     32 A9 02 F1 | 	add	local02, objptr
161cc     54 93 02 FB | 	rdlong	arg01, local02
161d0     53 00 00 FF 
161d4     04 64 86 F1 | 	sub	objptr, ##42500
161d8     49 93 52 F6 | 	abs	arg01, arg01 wc
161dc     1F AA C6 C9 |  if_b	decod	local03, #31
161e0     00 AA 06 36 |  if_ae	mov	local03, #0
161e4     9C 0A B1 FD | 	call	#__system___float_fromuns
161e8     55 7B 62 F5 | 	xor	result1, local03
161ec     3D 93 02 F6 | 	mov	arg01, result1
161f0     FF 7F 23 FF 
161f4     00 94 06 F6 | 	mov	arg02, ##1191181824
161f8     90 10 B1 FD | 	call	#__system___float_div
161fc     3D 95 02 F6 | 	mov	arg02, result1
16200     56 93 02 F6 | 	mov	arg01, local04
16204     B0 0A B1 FD | 	call	#__system___float_add
16208     3D AD 02 F6 | 	mov	local04, result1
1620c                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1620c     56 93 02 F6 | 	mov	arg01, local04
16210     1F 92 06 F4 | 	bitl	arg01, #31
16214     89 41 1D FF 
16218     6F 94 06 F6 | 	mov	arg02, ##981668463
1621c     01 96 06 F6 | 	mov	arg03, #1
16220     98 12 B1 FD | 	call	#__system___float_cmp
16224     00 7A 56 F2 | 	cmps	result1, #0 wc
16228     00 AC 06 C6 |  if_b	mov	local04, #0
1622c     E7 AC 62 FC | 	wrlong	local04, fp
16230     08 CE 05 F1 | 	add	fp, #8
16234     E7 3C 68 FC | 	wrlong	#30, fp
16238     08 CE 85 F1 | 	sub	fp, #8
1623c     E7 92 02 F6 | 	mov	arg01, fp
16240     D4 74 BF FD | 	call	#_push
16244                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16244     1C 00 90 FD | 	jmp	#LR__1894
16248                 | LR__1892
16248     29 92 06 F6 | 	mov	arg01, #41
1624c     00 94 06 F6 | 	mov	arg02, #0
16250     E8 AD B0 FD | 	call	#_printerror
16254                 | '      printerror(41) : return
16254     0C 00 90 FD | 	jmp	#LR__1894
16258                 | LR__1893
16258     29 92 06 F6 | 	mov	arg01, #41
1625c     00 94 06 F6 | 	mov	arg02, #0
16260     D8 AD B0 FD | 	call	#_printerror
16264                 | LR__1894
16264     E7 F0 03 F6 | 	mov	ptra, fp
16268     F2 00 A0 FD | 	call	#popregs_
1626c                 | _do_padry_ret
1626c     2D 00 64 FD | 	ret
16270                 | 
16270                 | ' 
16270                 | ' ' ------------------ padrz
16270                 | ' 
16270                 | ' sub do_padrz
16270                 | _do_padrz
16270     04 CA 05 F6 | 	mov	COUNT_, #4
16274     E8 00 A0 FD | 	call	#pushregs_
16278     14 F0 07 F1 | 	add	ptra, #20
1627c     4B 00 00 FF 
16280     A0 64 06 F1 | 	add	objptr, ##38560
16284     32 A7 02 FB | 	rdlong	local01, objptr
16288     53 97 02 F6 | 	mov	arg03, local01
1628c     01 96 66 F0 | 	shl	arg03, #1
16290     53 97 02 F1 | 	add	arg03, local01
16294     02 96 66 F0 | 	shl	arg03, #2
16298     03 00 00 FF 
1629c     04 64 86 F1 | 	sub	objptr, ##1540
162a0     32 97 02 F1 | 	add	arg03, objptr
162a4     4B A9 02 FB | 	rdlong	local02, arg03
162a8                 | ' 
162a8                 | ' numpar=compiledline(lineptr_e).result.uresult
162a8                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
162a8     02 A8 16 F2 | 	cmp	local02, #2 wc
162ac     48 00 00 FF 
162b0     9C 64 86 F1 | 	sub	objptr, ##37020
162b4     40 00 90 CD |  if_b	jmp	#LR__1900
162b8     00 92 06 F6 | 	mov	arg01, #0
162bc     7C 3C B1 FD | 	call	#__system___getiolock_0622
162c0     3D 93 02 F6 | 	mov	arg01, result1
162c4     F0 E6 B0 FD | 	call	#__system___lockmem
162c8     98 01 00 FF 
162cc     6D 94 06 F6 | 	mov	arg02, ##@LR__6058
162d0     00 92 06 F6 | 	mov	arg01, #0
162d4     00 96 06 F6 | 	mov	arg03, #0
162d8     D0 F3 B0 FD | 	call	#__system___basic_print_string
162dc     00 92 06 F6 | 	mov	arg01, #0
162e0     58 3C B1 FD | 	call	#__system___getiolock_0622
162e4     3D 01 68 FC | 	wrlong	#0, result1
162e8     27 92 06 F6 | 	mov	arg01, #39
162ec     00 94 06 F6 | 	mov	arg02, #0
162f0     48 AD B0 FD | 	call	#_printerror
162f4     A0 01 90 FD | 	jmp	#LR__1904
162f8                 | LR__1900
162f8                 | ' if numpar=0 then 
162f8     00 A8 0E F2 | 	cmp	local02, #0 wz
162fc     8C 00 90 5D |  if_ne	jmp	#LR__1901
16300     00 C0 1B FF 
16304     00 A8 06 F6 | 	mov	local02, ##931135488
16308     53 00 00 FF 
1630c     20 64 06 F1 | 	add	objptr, ##42528
16310     32 93 02 FB | 	rdlong	arg01, objptr
16314     53 00 00 FF 
16318     20 64 86 F1 | 	sub	objptr, ##42528
1631c     49 93 52 F6 | 	abs	arg01, arg01 wc
16320     1F AA C6 C9 |  if_b	decod	local03, #31
16324     00 AA 06 36 |  if_ae	mov	local03, #0
16328     58 09 B1 FD | 	call	#__system___float_fromuns
1632c     55 7B 62 F5 | 	xor	result1, local03
16330     3D 93 02 F6 | 	mov	arg01, result1
16334     FF 7F 23 FF 
16338     00 94 06 F6 | 	mov	arg02, ##1191181824
1633c     4C 0F B1 FD | 	call	#__system___float_div
16340     3D 95 02 F6 | 	mov	arg02, result1
16344     54 93 02 F6 | 	mov	arg01, local02
16348     6C 09 B1 FD | 	call	#__system___float_add
1634c     3D AD 02 F6 | 	mov	local04, result1
16350                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16350     56 93 02 F6 | 	mov	arg01, local04
16354     1F 92 06 F4 | 	bitl	arg01, #31
16358     89 41 1D FF 
1635c     6F 94 06 F6 | 	mov	arg02, ##981668463
16360     01 96 06 F6 | 	mov	arg03, #1
16364     54 11 B1 FD | 	call	#__system___float_cmp
16368     00 7A 56 F2 | 	cmps	result1, #0 wc
1636c     00 AC 06 C6 |  if_b	mov	local04, #0
16370     E7 AC 62 FC | 	wrlong	local04, fp
16374     08 CE 05 F1 | 	add	fp, #8
16378     E7 3C 68 FC | 	wrlong	#30, fp
1637c     08 CE 85 F1 | 	sub	fp, #8
16380     E7 92 02 F6 | 	mov	arg01, fp
16384     90 73 BF FD | 	call	#_push
16388                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16388     0C 01 90 FD | 	jmp	#LR__1904
1638c                 | LR__1901
1638c     F8 72 BF FD | 	call	#_pop
16390     E7 7A 62 FC | 	wrlong	result1, fp
16394     04 CE 05 F1 | 	add	fp, #4
16398     E7 7C 62 FC | 	wrlong	result2, fp
1639c     04 CE 05 F1 | 	add	fp, #4
163a0     E7 7E 62 FC | 	wrlong	result3, fp
163a4                 | ' t1=pop()
163a4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
163a4     08 CE 85 F1 | 	sub	fp, #8
163a8     1C 7E 0E F2 | 	cmp	result3, #28 wz
163ac     08 CE 05 51 |  if_ne	add	fp, #8
163b0     E7 A6 02 5B |  if_ne	rdlong	local01, fp
163b4     08 CE 85 51 |  if_ne	sub	fp, #8
163b8     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
163bc     CC 00 90 5D |  if_ne	jmp	#LR__1903
163c0     E7 AC 02 FB | 	rdlong	local04, fp
163c4     53 00 00 FF 
163c8     60 65 06 F1 | 	add	objptr, ##42848
163cc     32 AD 62 FC | 	wrlong	local04, objptr
163d0                 | '   q=t1.result.uresult
163d0                 | '   if q<7 then 
163d0     53 00 00 FF 
163d4     60 65 86 F1 | 	sub	objptr, ##42848
163d8     07 AC 56 F2 | 	cmps	local04, #7 wc
163dc     9C 00 90 3D |  if_ae	jmp	#LR__1902
163e0     00 C0 1B FF 
163e4     00 AC 06 F6 | 	mov	local04, ##931135488
163e8     53 00 00 FF 
163ec     60 65 06 F1 | 	add	objptr, ##42848
163f0     32 A9 02 FB | 	rdlong	local02, objptr
163f4     02 A8 66 F0 | 	shl	local02, #2
163f8     40 65 86 F1 | 	sub	objptr, #320
163fc     32 A9 02 F1 | 	add	local02, objptr
16400     54 93 02 FB | 	rdlong	arg01, local02
16404     53 00 00 FF 
16408     20 64 86 F1 | 	sub	objptr, ##42528
1640c     49 93 52 F6 | 	abs	arg01, arg01 wc
16410     1F AA C6 C9 |  if_b	decod	local03, #31
16414     00 AA 06 36 |  if_ae	mov	local03, #0
16418     68 08 B1 FD | 	call	#__system___float_fromuns
1641c     55 7B 62 F5 | 	xor	result1, local03
16420     3D 93 02 F6 | 	mov	arg01, result1
16424     FF 7F 23 FF 
16428     00 94 06 F6 | 	mov	arg02, ##1191181824
1642c     5C 0E B1 FD | 	call	#__system___float_div
16430     3D 95 02 F6 | 	mov	arg02, result1
16434     56 93 02 F6 | 	mov	arg01, local04
16438     7C 08 B1 FD | 	call	#__system___float_add
1643c     3D AD 02 F6 | 	mov	local04, result1
16440                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16440     56 93 02 F6 | 	mov	arg01, local04
16444     1F 92 06 F4 | 	bitl	arg01, #31
16448     89 41 1D FF 
1644c     6F 94 06 F6 | 	mov	arg02, ##981668463
16450     01 96 06 F6 | 	mov	arg03, #1
16454     64 10 B1 FD | 	call	#__system___float_cmp
16458     00 7A 56 F2 | 	cmps	result1, #0 wc
1645c     00 AC 06 C6 |  if_b	mov	local04, #0
16460     E7 AC 62 FC | 	wrlong	local04, fp
16464     08 CE 05 F1 | 	add	fp, #8
16468     E7 3C 68 FC | 	wrlong	#30, fp
1646c     08 CE 85 F1 | 	sub	fp, #8
16470     E7 92 02 F6 | 	mov	arg01, fp
16474     A0 72 BF FD | 	call	#_push
16478                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16478     1C 00 90 FD | 	jmp	#LR__1904
1647c                 | LR__1902
1647c     29 92 06 F6 | 	mov	arg01, #41
16480     00 94 06 F6 | 	mov	arg02, #0
16484     B4 AB B0 FD | 	call	#_printerror
16488                 | '      printerror(41) : return
16488     0C 00 90 FD | 	jmp	#LR__1904
1648c                 | LR__1903
1648c     29 92 06 F6 | 	mov	arg01, #41
16490     00 94 06 F6 | 	mov	arg02, #0
16494     A4 AB B0 FD | 	call	#_printerror
16498                 | LR__1904
16498     E7 F0 03 F6 | 	mov	ptra, fp
1649c     F2 00 A0 FD | 	call	#popregs_
164a0                 | _do_padrz_ret
164a0     2D 00 64 FD | 	ret
164a4                 | 
164a4                 | ' 
164a4                 | ' ' ------------------ pads
164a4                 | ' 
164a4                 | ' sub do_pads
164a4                 | _do_pads
164a4     04 CA 05 F6 | 	mov	COUNT_, #4
164a8     E8 00 A0 FD | 	call	#pushregs_
164ac     14 F0 07 F1 | 	add	ptra, #20
164b0     4B 00 00 FF 
164b4     A0 64 06 F1 | 	add	objptr, ##38560
164b8     32 A7 02 FB | 	rdlong	local01, objptr
164bc     53 97 02 F6 | 	mov	arg03, local01
164c0     01 96 66 F0 | 	shl	arg03, #1
164c4     53 97 02 F1 | 	add	arg03, local01
164c8     02 96 66 F0 | 	shl	arg03, #2
164cc     03 00 00 FF 
164d0     04 64 86 F1 | 	sub	objptr, ##1540
164d4     32 97 02 F1 | 	add	arg03, objptr
164d8     4B A9 02 FB | 	rdlong	local02, arg03
164dc                 | ' 
164dc                 | ' numpar=compiledline(lineptr_e).result.uresult
164dc                 | ' if numpar>1 then print "pads: "; : printerror(39) : return
164dc     02 A8 16 F2 | 	cmp	local02, #2 wc
164e0     48 00 00 FF 
164e4     9C 64 86 F1 | 	sub	objptr, ##37020
164e8     40 00 90 CD |  if_b	jmp	#LR__1910
164ec     00 92 06 F6 | 	mov	arg01, #0
164f0     48 3A B1 FD | 	call	#__system___getiolock_0622
164f4     3D 93 02 F6 | 	mov	arg01, result1
164f8     BC E4 B0 FD | 	call	#__system___lockmem
164fc     98 01 00 FF 
16500     75 94 06 F6 | 	mov	arg02, ##@LR__6059
16504     00 92 06 F6 | 	mov	arg01, #0
16508     00 96 06 F6 | 	mov	arg03, #0
1650c     9C F1 B0 FD | 	call	#__system___basic_print_string
16510     00 92 06 F6 | 	mov	arg01, #0
16514     24 3A B1 FD | 	call	#__system___getiolock_0622
16518     3D 01 68 FC | 	wrlong	#0, result1
1651c     27 92 06 F6 | 	mov	arg01, #39
16520     00 94 06 F6 | 	mov	arg02, #0
16524     14 AB B0 FD | 	call	#_printerror
16528     A0 01 90 FD | 	jmp	#LR__1914
1652c                 | LR__1910
1652c                 | ' if numpar=0 then 
1652c     00 A8 0E F2 | 	cmp	local02, #0 wz
16530     8C 00 90 5D |  if_ne	jmp	#LR__1911
16534     00 C0 1B FF 
16538     00 A8 06 F6 | 	mov	local02, ##931135488
1653c     53 00 00 FF 
16540     3C 64 06 F1 | 	add	objptr, ##42556
16544     32 93 02 FB | 	rdlong	arg01, objptr
16548     53 00 00 FF 
1654c     3C 64 86 F1 | 	sub	objptr, ##42556
16550     49 93 52 F6 | 	abs	arg01, arg01 wc
16554     1F AA C6 C9 |  if_b	decod	local03, #31
16558     00 AA 06 36 |  if_ae	mov	local03, #0
1655c     24 07 B1 FD | 	call	#__system___float_fromuns
16560     55 7B 62 F5 | 	xor	result1, local03
16564     3D 93 02 F6 | 	mov	arg01, result1
16568     FF 7F 23 FF 
1656c     00 94 06 F6 | 	mov	arg02, ##1191181824
16570     18 0D B1 FD | 	call	#__system___float_div
16574     3D 95 02 F6 | 	mov	arg02, result1
16578     54 93 02 F6 | 	mov	arg01, local02
1657c     38 07 B1 FD | 	call	#__system___float_add
16580     3D AD 02 F6 | 	mov	local04, result1
16584                 | '   fpad=(1.0/65536.0)+pads(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16584     56 93 02 F6 | 	mov	arg01, local04
16588     1F 92 06 F4 | 	bitl	arg01, #31
1658c     89 41 1D FF 
16590     6F 94 06 F6 | 	mov	arg02, ##981668463
16594     01 96 06 F6 | 	mov	arg03, #1
16598     20 0F B1 FD | 	call	#__system___float_cmp
1659c     00 7A 56 F2 | 	cmps	result1, #0 wc
165a0     00 AC 06 C6 |  if_b	mov	local04, #0
165a4     E7 AC 62 FC | 	wrlong	local04, fp
165a8     08 CE 05 F1 | 	add	fp, #8
165ac     E7 3C 68 FC | 	wrlong	#30, fp
165b0     08 CE 85 F1 | 	sub	fp, #8
165b4     E7 92 02 F6 | 	mov	arg01, fp
165b8     5C 71 BF FD | 	call	#_push
165bc                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
165bc     0C 01 90 FD | 	jmp	#LR__1914
165c0                 | LR__1911
165c0     C4 70 BF FD | 	call	#_pop
165c4     E7 7A 62 FC | 	wrlong	result1, fp
165c8     04 CE 05 F1 | 	add	fp, #4
165cc     E7 7C 62 FC | 	wrlong	result2, fp
165d0     04 CE 05 F1 | 	add	fp, #4
165d4     E7 7E 62 FC | 	wrlong	result3, fp
165d8                 | ' t1=pop()
165d8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
165d8     08 CE 85 F1 | 	sub	fp, #8
165dc     1C 7E 0E F2 | 	cmp	result3, #28 wz
165e0     08 CE 05 51 |  if_ne	add	fp, #8
165e4     E7 A6 02 5B |  if_ne	rdlong	local01, fp
165e8     08 CE 85 51 |  if_ne	sub	fp, #8
165ec     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
165f0     CC 00 90 5D |  if_ne	jmp	#LR__1913
165f4     E7 AC 02 FB | 	rdlong	local04, fp
165f8     53 00 00 FF 
165fc     60 65 06 F1 | 	add	objptr, ##42848
16600     32 AD 62 FC | 	wrlong	local04, objptr
16604                 | '   q=t1.result.uresult
16604                 | '   if q<7 then 
16604     53 00 00 FF 
16608     60 65 86 F1 | 	sub	objptr, ##42848
1660c     07 AC 56 F2 | 	cmps	local04, #7 wc
16610     9C 00 90 3D |  if_ae	jmp	#LR__1912
16614     00 C0 1B FF 
16618     00 AC 06 F6 | 	mov	local04, ##931135488
1661c     53 00 00 FF 
16620     60 65 06 F1 | 	add	objptr, ##42848
16624     32 A9 02 FB | 	rdlong	local02, objptr
16628     02 A8 66 F0 | 	shl	local02, #2
1662c     24 65 86 F1 | 	sub	objptr, #292
16630     32 A9 02 F1 | 	add	local02, objptr
16634     54 93 02 FB | 	rdlong	arg01, local02
16638     53 00 00 FF 
1663c     3C 64 86 F1 | 	sub	objptr, ##42556
16640     49 93 52 F6 | 	abs	arg01, arg01 wc
16644     1F AA C6 C9 |  if_b	decod	local03, #31
16648     00 AA 06 36 |  if_ae	mov	local03, #0
1664c     34 06 B1 FD | 	call	#__system___float_fromuns
16650     55 7B 62 F5 | 	xor	result1, local03
16654     3D 93 02 F6 | 	mov	arg01, result1
16658     FF 7F 23 FF 
1665c     00 94 06 F6 | 	mov	arg02, ##1191181824
16660     28 0C B1 FD | 	call	#__system___float_div
16664     3D 95 02 F6 | 	mov	arg02, result1
16668     56 93 02 F6 | 	mov	arg01, local04
1666c     48 06 B1 FD | 	call	#__system___float_add
16670     3D AD 02 F6 | 	mov	local04, result1
16674                 | '     fpad=(1.0/65536.0)+pads(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16674     56 93 02 F6 | 	mov	arg01, local04
16678     1F 92 06 F4 | 	bitl	arg01, #31
1667c     89 41 1D FF 
16680     6F 94 06 F6 | 	mov	arg02, ##981668463
16684     01 96 06 F6 | 	mov	arg03, #1
16688     30 0E B1 FD | 	call	#__system___float_cmp
1668c     00 7A 56 F2 | 	cmps	result1, #0 wc
16690     00 AC 06 C6 |  if_b	mov	local04, #0
16694     E7 AC 62 FC | 	wrlong	local04, fp
16698     08 CE 05 F1 | 	add	fp, #8
1669c     E7 3C 68 FC | 	wrlong	#30, fp
166a0     08 CE 85 F1 | 	sub	fp, #8
166a4     E7 92 02 F6 | 	mov	arg01, fp
166a8     6C 70 BF FD | 	call	#_push
166ac                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
166ac     1C 00 90 FD | 	jmp	#LR__1914
166b0                 | LR__1912
166b0     29 92 06 F6 | 	mov	arg01, #41
166b4     00 94 06 F6 | 	mov	arg02, #0
166b8     80 A9 B0 FD | 	call	#_printerror
166bc                 | '      printerror(41) : return
166bc     0C 00 90 FD | 	jmp	#LR__1914
166c0                 | LR__1913
166c0     29 92 06 F6 | 	mov	arg01, #41
166c4     00 94 06 F6 | 	mov	arg02, #0
166c8     70 A9 B0 FD | 	call	#_printerror
166cc                 | LR__1914
166cc     E7 F0 03 F6 | 	mov	ptra, fp
166d0     F2 00 A0 FD | 	call	#popregs_
166d4                 | _do_pads_ret
166d4     2D 00 64 FD | 	ret
166d8                 | 
166d8                 | ' 
166d8                 | ' ' ------------------ padw
166d8                 | ' 
166d8                 | ' sub do_padw
166d8                 | _do_padw
166d8     04 CA 05 F6 | 	mov	COUNT_, #4
166dc     E8 00 A0 FD | 	call	#pushregs_
166e0     14 F0 07 F1 | 	add	ptra, #20
166e4     4B 00 00 FF 
166e8     A0 64 06 F1 | 	add	objptr, ##38560
166ec     32 A7 02 FB | 	rdlong	local01, objptr
166f0     53 97 02 F6 | 	mov	arg03, local01
166f4     01 96 66 F0 | 	shl	arg03, #1
166f8     53 97 02 F1 | 	add	arg03, local01
166fc     02 96 66 F0 | 	shl	arg03, #2
16700     03 00 00 FF 
16704     04 64 86 F1 | 	sub	objptr, ##1540
16708     32 97 02 F1 | 	add	arg03, objptr
1670c     4B A9 02 FB | 	rdlong	local02, arg03
16710                 | ' 
16710                 | ' numpar=compiledline(lineptr_e).result.uresult
16710                 | ' if numpar>1 then print "padw: "; : printerror(39) : return
16710     02 A8 16 F2 | 	cmp	local02, #2 wc
16714     48 00 00 FF 
16718     9C 64 86 F1 | 	sub	objptr, ##37020
1671c     40 00 90 CD |  if_b	jmp	#LR__1920
16720     00 92 06 F6 | 	mov	arg01, #0
16724     14 38 B1 FD | 	call	#__system___getiolock_0622
16728     3D 93 02 F6 | 	mov	arg01, result1
1672c     88 E2 B0 FD | 	call	#__system___lockmem
16730     98 01 00 FF 
16734     7C 94 06 F6 | 	mov	arg02, ##@LR__6060
16738     00 92 06 F6 | 	mov	arg01, #0
1673c     00 96 06 F6 | 	mov	arg03, #0
16740     68 EF B0 FD | 	call	#__system___basic_print_string
16744     00 92 06 F6 | 	mov	arg01, #0
16748     F0 37 B1 FD | 	call	#__system___getiolock_0622
1674c     3D 01 68 FC | 	wrlong	#0, result1
16750     27 92 06 F6 | 	mov	arg01, #39
16754     00 94 06 F6 | 	mov	arg02, #0
16758     E0 A8 B0 FD | 	call	#_printerror
1675c     A0 01 90 FD | 	jmp	#LR__1924
16760                 | LR__1920
16760                 | ' if numpar=0 then 
16760     00 A8 0E F2 | 	cmp	local02, #0 wz
16764     8C 00 90 5D |  if_ne	jmp	#LR__1921
16768     00 C0 1B FF 
1676c     00 A8 06 F6 | 	mov	local02, ##931135488
16770     53 00 00 FF 
16774     58 64 06 F1 | 	add	objptr, ##42584
16778     32 93 02 FB | 	rdlong	arg01, objptr
1677c     53 00 00 FF 
16780     58 64 86 F1 | 	sub	objptr, ##42584
16784     49 93 52 F6 | 	abs	arg01, arg01 wc
16788     1F AA C6 C9 |  if_b	decod	local03, #31
1678c     00 AA 06 36 |  if_ae	mov	local03, #0
16790     F0 04 B1 FD | 	call	#__system___float_fromuns
16794     55 7B 62 F5 | 	xor	result1, local03
16798     3D 93 02 F6 | 	mov	arg01, result1
1679c     FF 7F 23 FF 
167a0     00 94 06 F6 | 	mov	arg02, ##1191181824
167a4     E4 0A B1 FD | 	call	#__system___float_div
167a8     3D 95 02 F6 | 	mov	arg02, result1
167ac     54 93 02 F6 | 	mov	arg01, local02
167b0     04 05 B1 FD | 	call	#__system___float_add
167b4     3D AD 02 F6 | 	mov	local04, result1
167b8                 | '   fpad=(1.0/65536.0)+padw(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
167b8     56 93 02 F6 | 	mov	arg01, local04
167bc     1F 92 06 F4 | 	bitl	arg01, #31
167c0     89 41 1D FF 
167c4     6F 94 06 F6 | 	mov	arg02, ##981668463
167c8     01 96 06 F6 | 	mov	arg03, #1
167cc     EC 0C B1 FD | 	call	#__system___float_cmp
167d0     00 7A 56 F2 | 	cmps	result1, #0 wc
167d4     00 AC 06 C6 |  if_b	mov	local04, #0
167d8     E7 AC 62 FC | 	wrlong	local04, fp
167dc     08 CE 05 F1 | 	add	fp, #8
167e0     E7 3C 68 FC | 	wrlong	#30, fp
167e4     08 CE 85 F1 | 	sub	fp, #8
167e8     E7 92 02 F6 | 	mov	arg01, fp
167ec     28 6F BF FD | 	call	#_push
167f0                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
167f0     0C 01 90 FD | 	jmp	#LR__1924
167f4                 | LR__1921
167f4     90 6E BF FD | 	call	#_pop
167f8     E7 7A 62 FC | 	wrlong	result1, fp
167fc     04 CE 05 F1 | 	add	fp, #4
16800     E7 7C 62 FC | 	wrlong	result2, fp
16804     04 CE 05 F1 | 	add	fp, #4
16808     E7 7E 62 FC | 	wrlong	result3, fp
1680c                 | ' t1=pop()
1680c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1680c     08 CE 85 F1 | 	sub	fp, #8
16810     1C 7E 0E F2 | 	cmp	result3, #28 wz
16814     08 CE 05 51 |  if_ne	add	fp, #8
16818     E7 A6 02 5B |  if_ne	rdlong	local01, fp
1681c     08 CE 85 51 |  if_ne	sub	fp, #8
16820     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16824     CC 00 90 5D |  if_ne	jmp	#LR__1923
16828     E7 AC 02 FB | 	rdlong	local04, fp
1682c     53 00 00 FF 
16830     60 65 06 F1 | 	add	objptr, ##42848
16834     32 AD 62 FC | 	wrlong	local04, objptr
16838                 | '   q=t1.result.uresult
16838                 | '   if q<7 then 
16838     53 00 00 FF 
1683c     60 65 86 F1 | 	sub	objptr, ##42848
16840     07 AC 56 F2 | 	cmps	local04, #7 wc
16844     9C 00 90 3D |  if_ae	jmp	#LR__1922
16848     00 C0 1B FF 
1684c     00 AC 06 F6 | 	mov	local04, ##931135488
16850     53 00 00 FF 
16854     60 65 06 F1 | 	add	objptr, ##42848
16858     32 A9 02 FB | 	rdlong	local02, objptr
1685c     02 A8 66 F0 | 	shl	local02, #2
16860     08 65 86 F1 | 	sub	objptr, #264
16864     32 A9 02 F1 | 	add	local02, objptr
16868     54 93 02 FB | 	rdlong	arg01, local02
1686c     53 00 00 FF 
16870     58 64 86 F1 | 	sub	objptr, ##42584
16874     49 93 52 F6 | 	abs	arg01, arg01 wc
16878     1F AA C6 C9 |  if_b	decod	local03, #31
1687c     00 AA 06 36 |  if_ae	mov	local03, #0
16880     00 04 B1 FD | 	call	#__system___float_fromuns
16884     55 7B 62 F5 | 	xor	result1, local03
16888     3D 93 02 F6 | 	mov	arg01, result1
1688c     FF 7F 23 FF 
16890     00 94 06 F6 | 	mov	arg02, ##1191181824
16894     F4 09 B1 FD | 	call	#__system___float_div
16898     3D 95 02 F6 | 	mov	arg02, result1
1689c     56 93 02 F6 | 	mov	arg01, local04
168a0     14 04 B1 FD | 	call	#__system___float_add
168a4     3D AD 02 F6 | 	mov	local04, result1
168a8                 | '     fpad=(1.0/65536.0)+padw(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
168a8     56 93 02 F6 | 	mov	arg01, local04
168ac     1F 92 06 F4 | 	bitl	arg01, #31
168b0     89 41 1D FF 
168b4     6F 94 06 F6 | 	mov	arg02, ##981668463
168b8     01 96 06 F6 | 	mov	arg03, #1
168bc     FC 0B B1 FD | 	call	#__system___float_cmp
168c0     00 7A 56 F2 | 	cmps	result1, #0 wc
168c4     00 AC 06 C6 |  if_b	mov	local04, #0
168c8     E7 AC 62 FC | 	wrlong	local04, fp
168cc     08 CE 05 F1 | 	add	fp, #8
168d0     E7 3C 68 FC | 	wrlong	#30, fp
168d4     08 CE 85 F1 | 	sub	fp, #8
168d8     E7 92 02 F6 | 	mov	arg01, fp
168dc     38 6E BF FD | 	call	#_push
168e0                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
168e0     1C 00 90 FD | 	jmp	#LR__1924
168e4                 | LR__1922
168e4     29 92 06 F6 | 	mov	arg01, #41
168e8     00 94 06 F6 | 	mov	arg02, #0
168ec     4C A7 B0 FD | 	call	#_printerror
168f0                 | '      printerror(41) : return
168f0     0C 00 90 FD | 	jmp	#LR__1924
168f4                 | LR__1923
168f4     29 92 06 F6 | 	mov	arg01, #41
168f8     00 94 06 F6 | 	mov	arg02, #0
168fc     3C A7 B0 FD | 	call	#_printerror
16900                 | LR__1924
16900     E7 F0 03 F6 | 	mov	ptra, fp
16904     F2 00 A0 FD | 	call	#popregs_
16908                 | _do_padw_ret
16908     2D 00 64 FD | 	ret
1690c                 | 
1690c                 | ' 
1690c                 | ' ' ------------------ padx
1690c                 | ' 
1690c                 | ' sub do_padx
1690c                 | _do_padx
1690c     04 CA 05 F6 | 	mov	COUNT_, #4
16910     E8 00 A0 FD | 	call	#pushregs_
16914     14 F0 07 F1 | 	add	ptra, #20
16918     4B 00 00 FF 
1691c     A0 64 06 F1 | 	add	objptr, ##38560
16920     32 A7 02 FB | 	rdlong	local01, objptr
16924     53 97 02 F6 | 	mov	arg03, local01
16928     01 96 66 F0 | 	shl	arg03, #1
1692c     53 97 02 F1 | 	add	arg03, local01
16930     02 96 66 F0 | 	shl	arg03, #2
16934     03 00 00 FF 
16938     04 64 86 F1 | 	sub	objptr, ##1540
1693c     32 97 02 F1 | 	add	arg03, objptr
16940     4B A9 02 FB | 	rdlong	local02, arg03
16944                 | ' 
16944                 | ' numpar=compiledline(lineptr_e).result.uresult
16944                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
16944     02 A8 16 F2 | 	cmp	local02, #2 wc
16948     48 00 00 FF 
1694c     9C 64 86 F1 | 	sub	objptr, ##37020
16950     40 00 90 CD |  if_b	jmp	#LR__1930
16954     00 92 06 F6 | 	mov	arg01, #0
16958     E0 35 B1 FD | 	call	#__system___getiolock_0622
1695c     3D 93 02 F6 | 	mov	arg01, result1
16960     54 E0 B0 FD | 	call	#__system___lockmem
16964     98 01 00 FF 
16968     83 94 06 F6 | 	mov	arg02, ##@LR__6061
1696c     00 92 06 F6 | 	mov	arg01, #0
16970     00 96 06 F6 | 	mov	arg03, #0
16974     34 ED B0 FD | 	call	#__system___basic_print_string
16978     00 92 06 F6 | 	mov	arg01, #0
1697c     BC 35 B1 FD | 	call	#__system___getiolock_0622
16980     3D 01 68 FC | 	wrlong	#0, result1
16984     27 92 06 F6 | 	mov	arg01, #39
16988     00 94 06 F6 | 	mov	arg02, #0
1698c     AC A6 B0 FD | 	call	#_printerror
16990     A0 01 90 FD | 	jmp	#LR__1934
16994                 | LR__1930
16994                 | ' if numpar=0 then 
16994     00 A8 0E F2 | 	cmp	local02, #0 wz
16998     8C 00 90 5D |  if_ne	jmp	#LR__1931
1699c     00 C0 1B FF 
169a0     00 A8 06 F6 | 	mov	local02, ##931135488
169a4     52 00 00 FF 
169a8     78 65 06 F1 | 	add	objptr, ##42360
169ac     32 93 02 FB | 	rdlong	arg01, objptr
169b0     52 00 00 FF 
169b4     78 65 86 F1 | 	sub	objptr, ##42360
169b8     49 93 52 F6 | 	abs	arg01, arg01 wc
169bc     1F AA C6 C9 |  if_b	decod	local03, #31
169c0     00 AA 06 36 |  if_ae	mov	local03, #0
169c4     BC 02 B1 FD | 	call	#__system___float_fromuns
169c8     55 7B 62 F5 | 	xor	result1, local03
169cc     3D 93 02 F6 | 	mov	arg01, result1
169d0     FF 7F 23 FF 
169d4     00 94 06 F6 | 	mov	arg02, ##1191181824
169d8     B0 08 B1 FD | 	call	#__system___float_div
169dc     3D 95 02 F6 | 	mov	arg02, result1
169e0     54 93 02 F6 | 	mov	arg01, local02
169e4     D0 02 B1 FD | 	call	#__system___float_add
169e8     3D AD 02 F6 | 	mov	local04, result1
169ec                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
169ec     56 93 02 F6 | 	mov	arg01, local04
169f0     1F 92 06 F4 | 	bitl	arg01, #31
169f4     89 41 1D FF 
169f8     6F 94 06 F6 | 	mov	arg02, ##981668463
169fc     01 96 06 F6 | 	mov	arg03, #1
16a00     B8 0A B1 FD | 	call	#__system___float_cmp
16a04     00 7A 56 F2 | 	cmps	result1, #0 wc
16a08     00 AC 06 C6 |  if_b	mov	local04, #0
16a0c     E7 AC 62 FC | 	wrlong	local04, fp
16a10     08 CE 05 F1 | 	add	fp, #8
16a14     E7 3C 68 FC | 	wrlong	#30, fp
16a18     08 CE 85 F1 | 	sub	fp, #8
16a1c     E7 92 02 F6 | 	mov	arg01, fp
16a20     F4 6C BF FD | 	call	#_push
16a24                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16a24     0C 01 90 FD | 	jmp	#LR__1934
16a28                 | LR__1931
16a28     5C 6C BF FD | 	call	#_pop
16a2c     E7 7A 62 FC | 	wrlong	result1, fp
16a30     04 CE 05 F1 | 	add	fp, #4
16a34     E7 7C 62 FC | 	wrlong	result2, fp
16a38     04 CE 05 F1 | 	add	fp, #4
16a3c     E7 7E 62 FC | 	wrlong	result3, fp
16a40                 | ' t1=pop()
16a40                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16a40     08 CE 85 F1 | 	sub	fp, #8
16a44     1C 7E 0E F2 | 	cmp	result3, #28 wz
16a48     08 CE 05 51 |  if_ne	add	fp, #8
16a4c     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16a50     08 CE 85 51 |  if_ne	sub	fp, #8
16a54     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16a58     CC 00 90 5D |  if_ne	jmp	#LR__1933
16a5c     E7 AC 02 FB | 	rdlong	local04, fp
16a60     53 00 00 FF 
16a64     60 65 06 F1 | 	add	objptr, ##42848
16a68     32 AD 62 FC | 	wrlong	local04, objptr
16a6c                 | '   q=t1.result.uresult
16a6c                 | '   if q<7 then 
16a6c     53 00 00 FF 
16a70     60 65 86 F1 | 	sub	objptr, ##42848
16a74     07 AC 56 F2 | 	cmps	local04, #7 wc
16a78     9C 00 90 3D |  if_ae	jmp	#LR__1932
16a7c     00 C0 1B FF 
16a80     00 AC 06 F6 | 	mov	local04, ##931135488
16a84     53 00 00 FF 
16a88     60 65 06 F1 | 	add	objptr, ##42848
16a8c     32 A9 02 FB | 	rdlong	local02, objptr
16a90     02 A8 66 F0 | 	shl	local02, #2
16a94     E8 65 86 F1 | 	sub	objptr, #488
16a98     32 A9 02 F1 | 	add	local02, objptr
16a9c     54 93 02 FB | 	rdlong	arg01, local02
16aa0     52 00 00 FF 
16aa4     78 65 86 F1 | 	sub	objptr, ##42360
16aa8     49 93 52 F6 | 	abs	arg01, arg01 wc
16aac     1F AA C6 C9 |  if_b	decod	local03, #31
16ab0     00 AA 06 36 |  if_ae	mov	local03, #0
16ab4     CC 01 B1 FD | 	call	#__system___float_fromuns
16ab8     55 7B 62 F5 | 	xor	result1, local03
16abc     3D 93 02 F6 | 	mov	arg01, result1
16ac0     FF 7F 23 FF 
16ac4     00 94 06 F6 | 	mov	arg02, ##1191181824
16ac8     C0 07 B1 FD | 	call	#__system___float_div
16acc     3D 95 02 F6 | 	mov	arg02, result1
16ad0     56 93 02 F6 | 	mov	arg01, local04
16ad4     E0 01 B1 FD | 	call	#__system___float_add
16ad8     3D AD 02 F6 | 	mov	local04, result1
16adc                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16adc     56 93 02 F6 | 	mov	arg01, local04
16ae0     1F 92 06 F4 | 	bitl	arg01, #31
16ae4     89 41 1D FF 
16ae8     6F 94 06 F6 | 	mov	arg02, ##981668463
16aec     01 96 06 F6 | 	mov	arg03, #1
16af0     C8 09 B1 FD | 	call	#__system___float_cmp
16af4     00 7A 56 F2 | 	cmps	result1, #0 wc
16af8     00 AC 06 C6 |  if_b	mov	local04, #0
16afc     E7 AC 62 FC | 	wrlong	local04, fp
16b00     08 CE 05 F1 | 	add	fp, #8
16b04     E7 3C 68 FC | 	wrlong	#30, fp
16b08     08 CE 85 F1 | 	sub	fp, #8
16b0c     E7 92 02 F6 | 	mov	arg01, fp
16b10     04 6C BF FD | 	call	#_push
16b14                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16b14     1C 00 90 FD | 	jmp	#LR__1934
16b18                 | LR__1932
16b18     29 92 06 F6 | 	mov	arg01, #41
16b1c     00 94 06 F6 | 	mov	arg02, #0
16b20     18 A5 B0 FD | 	call	#_printerror
16b24                 | '      printerror(41) : return
16b24     0C 00 90 FD | 	jmp	#LR__1934
16b28                 | LR__1933
16b28     29 92 06 F6 | 	mov	arg01, #41
16b2c     00 94 06 F6 | 	mov	arg02, #0
16b30     08 A5 B0 FD | 	call	#_printerror
16b34                 | LR__1934
16b34     E7 F0 03 F6 | 	mov	ptra, fp
16b38     F2 00 A0 FD | 	call	#popregs_
16b3c                 | _do_padx_ret
16b3c     2D 00 64 FD | 	ret
16b40                 | 
16b40                 | ' 
16b40                 | ' ' ------------------ pady
16b40                 | ' 
16b40                 | ' sub do_pady
16b40                 | _do_pady
16b40     04 CA 05 F6 | 	mov	COUNT_, #4
16b44     E8 00 A0 FD | 	call	#pushregs_
16b48     14 F0 07 F1 | 	add	ptra, #20
16b4c     4B 00 00 FF 
16b50     A0 64 06 F1 | 	add	objptr, ##38560
16b54     32 A7 02 FB | 	rdlong	local01, objptr
16b58     53 97 02 F6 | 	mov	arg03, local01
16b5c     01 96 66 F0 | 	shl	arg03, #1
16b60     53 97 02 F1 | 	add	arg03, local01
16b64     02 96 66 F0 | 	shl	arg03, #2
16b68     03 00 00 FF 
16b6c     04 64 86 F1 | 	sub	objptr, ##1540
16b70     32 97 02 F1 | 	add	arg03, objptr
16b74     4B A9 02 FB | 	rdlong	local02, arg03
16b78                 | ' 
16b78                 | ' numpar=compiledline(lineptr_e).result.uresult
16b78                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
16b78     02 A8 16 F2 | 	cmp	local02, #2 wc
16b7c     48 00 00 FF 
16b80     9C 64 86 F1 | 	sub	objptr, ##37020
16b84     40 00 90 CD |  if_b	jmp	#LR__1940
16b88     00 92 06 F6 | 	mov	arg01, #0
16b8c     AC 33 B1 FD | 	call	#__system___getiolock_0622
16b90     3D 93 02 F6 | 	mov	arg01, result1
16b94     20 DE B0 FD | 	call	#__system___lockmem
16b98     98 01 00 FF 
16b9c     8A 94 06 F6 | 	mov	arg02, ##@LR__6062
16ba0     00 92 06 F6 | 	mov	arg01, #0
16ba4     00 96 06 F6 | 	mov	arg03, #0
16ba8     00 EB B0 FD | 	call	#__system___basic_print_string
16bac     00 92 06 F6 | 	mov	arg01, #0
16bb0     88 33 B1 FD | 	call	#__system___getiolock_0622
16bb4     3D 01 68 FC | 	wrlong	#0, result1
16bb8     27 92 06 F6 | 	mov	arg01, #39
16bbc     00 94 06 F6 | 	mov	arg02, #0
16bc0     78 A4 B0 FD | 	call	#_printerror
16bc4     A0 01 90 FD | 	jmp	#LR__1944
16bc8                 | LR__1940
16bc8                 | ' if numpar=0 then 
16bc8     00 A8 0E F2 | 	cmp	local02, #0 wz
16bcc     8C 00 90 5D |  if_ne	jmp	#LR__1941
16bd0     00 C0 1B FF 
16bd4     00 A8 06 F6 | 	mov	local02, ##931135488
16bd8     52 00 00 FF 
16bdc     94 65 06 F1 | 	add	objptr, ##42388
16be0     32 93 02 FB | 	rdlong	arg01, objptr
16be4     52 00 00 FF 
16be8     94 65 86 F1 | 	sub	objptr, ##42388
16bec     49 93 52 F6 | 	abs	arg01, arg01 wc
16bf0     1F AA C6 C9 |  if_b	decod	local03, #31
16bf4     00 AA 06 36 |  if_ae	mov	local03, #0
16bf8     88 00 B1 FD | 	call	#__system___float_fromuns
16bfc     55 7B 62 F5 | 	xor	result1, local03
16c00     3D 93 02 F6 | 	mov	arg01, result1
16c04     FF 7F 23 FF 
16c08     00 94 06 F6 | 	mov	arg02, ##1191181824
16c0c     7C 06 B1 FD | 	call	#__system___float_div
16c10     3D 95 02 F6 | 	mov	arg02, result1
16c14     54 93 02 F6 | 	mov	arg01, local02
16c18     9C 00 B1 FD | 	call	#__system___float_add
16c1c     3D AD 02 F6 | 	mov	local04, result1
16c20                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16c20     56 93 02 F6 | 	mov	arg01, local04
16c24     1F 92 06 F4 | 	bitl	arg01, #31
16c28     89 41 1D FF 
16c2c     6F 94 06 F6 | 	mov	arg02, ##981668463
16c30     01 96 06 F6 | 	mov	arg03, #1
16c34     84 08 B1 FD | 	call	#__system___float_cmp
16c38     00 7A 56 F2 | 	cmps	result1, #0 wc
16c3c     00 AC 06 C6 |  if_b	mov	local04, #0
16c40     E7 AC 62 FC | 	wrlong	local04, fp
16c44     08 CE 05 F1 | 	add	fp, #8
16c48     E7 3C 68 FC | 	wrlong	#30, fp
16c4c     08 CE 85 F1 | 	sub	fp, #8
16c50     E7 92 02 F6 | 	mov	arg01, fp
16c54     C0 6A BF FD | 	call	#_push
16c58                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16c58     0C 01 90 FD | 	jmp	#LR__1944
16c5c                 | LR__1941
16c5c     28 6A BF FD | 	call	#_pop
16c60     E7 7A 62 FC | 	wrlong	result1, fp
16c64     04 CE 05 F1 | 	add	fp, #4
16c68     E7 7C 62 FC | 	wrlong	result2, fp
16c6c     04 CE 05 F1 | 	add	fp, #4
16c70     E7 7E 62 FC | 	wrlong	result3, fp
16c74                 | ' t1=pop()
16c74                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16c74     08 CE 85 F1 | 	sub	fp, #8
16c78     1C 7E 0E F2 | 	cmp	result3, #28 wz
16c7c     08 CE 05 51 |  if_ne	add	fp, #8
16c80     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16c84     08 CE 85 51 |  if_ne	sub	fp, #8
16c88     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16c8c     CC 00 90 5D |  if_ne	jmp	#LR__1943
16c90     E7 AC 02 FB | 	rdlong	local04, fp
16c94     53 00 00 FF 
16c98     60 65 06 F1 | 	add	objptr, ##42848
16c9c     32 AD 62 FC | 	wrlong	local04, objptr
16ca0                 | '   q=t1.result.uresult
16ca0                 | '   if q<7 then 
16ca0     53 00 00 FF 
16ca4     60 65 86 F1 | 	sub	objptr, ##42848
16ca8     07 AC 56 F2 | 	cmps	local04, #7 wc
16cac     9C 00 90 3D |  if_ae	jmp	#LR__1942
16cb0     00 C0 1B FF 
16cb4     00 AC 06 F6 | 	mov	local04, ##931135488
16cb8     53 00 00 FF 
16cbc     60 65 06 F1 | 	add	objptr, ##42848
16cc0     32 A9 02 FB | 	rdlong	local02, objptr
16cc4     02 A8 66 F0 | 	shl	local02, #2
16cc8     CC 65 86 F1 | 	sub	objptr, #460
16ccc     32 A9 02 F1 | 	add	local02, objptr
16cd0     54 93 02 FB | 	rdlong	arg01, local02
16cd4     52 00 00 FF 
16cd8     94 65 86 F1 | 	sub	objptr, ##42388
16cdc     49 93 52 F6 | 	abs	arg01, arg01 wc
16ce0     1F AA C6 C9 |  if_b	decod	local03, #31
16ce4     00 AA 06 36 |  if_ae	mov	local03, #0
16ce8     98 FF B0 FD | 	call	#__system___float_fromuns
16cec     55 7B 62 F5 | 	xor	result1, local03
16cf0     3D 93 02 F6 | 	mov	arg01, result1
16cf4     FF 7F 23 FF 
16cf8     00 94 06 F6 | 	mov	arg02, ##1191181824
16cfc     8C 05 B1 FD | 	call	#__system___float_div
16d00     3D 95 02 F6 | 	mov	arg02, result1
16d04     56 93 02 F6 | 	mov	arg01, local04
16d08     AC FF B0 FD | 	call	#__system___float_add
16d0c     3D AD 02 F6 | 	mov	local04, result1
16d10                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16d10     56 93 02 F6 | 	mov	arg01, local04
16d14     1F 92 06 F4 | 	bitl	arg01, #31
16d18     89 41 1D FF 
16d1c     6F 94 06 F6 | 	mov	arg02, ##981668463
16d20     01 96 06 F6 | 	mov	arg03, #1
16d24     94 07 B1 FD | 	call	#__system___float_cmp
16d28     00 7A 56 F2 | 	cmps	result1, #0 wc
16d2c     00 AC 06 C6 |  if_b	mov	local04, #0
16d30     E7 AC 62 FC | 	wrlong	local04, fp
16d34     08 CE 05 F1 | 	add	fp, #8
16d38     E7 3C 68 FC | 	wrlong	#30, fp
16d3c     08 CE 85 F1 | 	sub	fp, #8
16d40     E7 92 02 F6 | 	mov	arg01, fp
16d44     D0 69 BF FD | 	call	#_push
16d48                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16d48     1C 00 90 FD | 	jmp	#LR__1944
16d4c                 | LR__1942
16d4c     29 92 06 F6 | 	mov	arg01, #41
16d50     00 94 06 F6 | 	mov	arg02, #0
16d54     E4 A2 B0 FD | 	call	#_printerror
16d58                 | '      printerror(41) : return
16d58     0C 00 90 FD | 	jmp	#LR__1944
16d5c                 | LR__1943
16d5c     29 92 06 F6 | 	mov	arg01, #41
16d60     00 94 06 F6 | 	mov	arg02, #0
16d64     D4 A2 B0 FD | 	call	#_printerror
16d68                 | LR__1944
16d68     E7 F0 03 F6 | 	mov	ptra, fp
16d6c     F2 00 A0 FD | 	call	#popregs_
16d70                 | _do_pady_ret
16d70     2D 00 64 FD | 	ret
16d74                 | 
16d74                 | ' 
16d74                 | ' ' ------------------ padz
16d74                 | ' 
16d74                 | ' sub do_padz
16d74                 | _do_padz
16d74     04 CA 05 F6 | 	mov	COUNT_, #4
16d78     E8 00 A0 FD | 	call	#pushregs_
16d7c     14 F0 07 F1 | 	add	ptra, #20
16d80     4B 00 00 FF 
16d84     A0 64 06 F1 | 	add	objptr, ##38560
16d88     32 A7 02 FB | 	rdlong	local01, objptr
16d8c     53 97 02 F6 | 	mov	arg03, local01
16d90     01 96 66 F0 | 	shl	arg03, #1
16d94     53 97 02 F1 | 	add	arg03, local01
16d98     02 96 66 F0 | 	shl	arg03, #2
16d9c     03 00 00 FF 
16da0     04 64 86 F1 | 	sub	objptr, ##1540
16da4     32 97 02 F1 | 	add	arg03, objptr
16da8     4B A9 02 FB | 	rdlong	local02, arg03
16dac                 | ' 
16dac                 | ' numpar=compiledline(lineptr_e).result.uresult
16dac                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
16dac     02 A8 16 F2 | 	cmp	local02, #2 wc
16db0     48 00 00 FF 
16db4     9C 64 86 F1 | 	sub	objptr, ##37020
16db8     40 00 90 CD |  if_b	jmp	#LR__1950
16dbc     00 92 06 F6 | 	mov	arg01, #0
16dc0     78 31 B1 FD | 	call	#__system___getiolock_0622
16dc4     3D 93 02 F6 | 	mov	arg01, result1
16dc8     EC DB B0 FD | 	call	#__system___lockmem
16dcc     98 01 00 FF 
16dd0     91 94 06 F6 | 	mov	arg02, ##@LR__6063
16dd4     00 92 06 F6 | 	mov	arg01, #0
16dd8     00 96 06 F6 | 	mov	arg03, #0
16ddc     CC E8 B0 FD | 	call	#__system___basic_print_string
16de0     00 92 06 F6 | 	mov	arg01, #0
16de4     54 31 B1 FD | 	call	#__system___getiolock_0622
16de8     3D 01 68 FC | 	wrlong	#0, result1
16dec     27 92 06 F6 | 	mov	arg01, #39
16df0     00 94 06 F6 | 	mov	arg02, #0
16df4     44 A2 B0 FD | 	call	#_printerror
16df8     A0 01 90 FD | 	jmp	#LR__1954
16dfc                 | LR__1950
16dfc                 | ' if numpar=0 then 
16dfc     00 A8 0E F2 | 	cmp	local02, #0 wz
16e00     8C 00 90 5D |  if_ne	jmp	#LR__1951
16e04     00 C0 1B FF 
16e08     00 A8 06 F6 | 	mov	local02, ##931135488
16e0c     52 00 00 FF 
16e10     B0 65 06 F1 | 	add	objptr, ##42416
16e14     32 93 02 FB | 	rdlong	arg01, objptr
16e18     52 00 00 FF 
16e1c     B0 65 86 F1 | 	sub	objptr, ##42416
16e20     49 93 52 F6 | 	abs	arg01, arg01 wc
16e24     1F AA C6 C9 |  if_b	decod	local03, #31
16e28     00 AA 06 36 |  if_ae	mov	local03, #0
16e2c     54 FE B0 FD | 	call	#__system___float_fromuns
16e30     55 7B 62 F5 | 	xor	result1, local03
16e34     3D 93 02 F6 | 	mov	arg01, result1
16e38     FF 7F 23 FF 
16e3c     00 94 06 F6 | 	mov	arg02, ##1191181824
16e40     48 04 B1 FD | 	call	#__system___float_div
16e44     3D 95 02 F6 | 	mov	arg02, result1
16e48     54 93 02 F6 | 	mov	arg01, local02
16e4c     68 FE B0 FD | 	call	#__system___float_add
16e50     3D AD 02 F6 | 	mov	local04, result1
16e54                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16e54     56 93 02 F6 | 	mov	arg01, local04
16e58     1F 92 06 F4 | 	bitl	arg01, #31
16e5c     89 41 1D FF 
16e60     6F 94 06 F6 | 	mov	arg02, ##981668463
16e64     01 96 06 F6 | 	mov	arg03, #1
16e68     50 06 B1 FD | 	call	#__system___float_cmp
16e6c     00 7A 56 F2 | 	cmps	result1, #0 wc
16e70     00 AC 06 C6 |  if_b	mov	local04, #0
16e74     E7 AC 62 FC | 	wrlong	local04, fp
16e78     08 CE 05 F1 | 	add	fp, #8
16e7c     E7 3C 68 FC | 	wrlong	#30, fp
16e80     08 CE 85 F1 | 	sub	fp, #8
16e84     E7 92 02 F6 | 	mov	arg01, fp
16e88     8C 68 BF FD | 	call	#_push
16e8c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16e8c     0C 01 90 FD | 	jmp	#LR__1954
16e90                 | LR__1951
16e90     F4 67 BF FD | 	call	#_pop
16e94     E7 7A 62 FC | 	wrlong	result1, fp
16e98     04 CE 05 F1 | 	add	fp, #4
16e9c     E7 7C 62 FC | 	wrlong	result2, fp
16ea0     04 CE 05 F1 | 	add	fp, #4
16ea4     E7 7E 62 FC | 	wrlong	result3, fp
16ea8                 | ' t1=pop()
16ea8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16ea8     08 CE 85 F1 | 	sub	fp, #8
16eac     1C 7E 0E F2 | 	cmp	result3, #28 wz
16eb0     08 CE 05 51 |  if_ne	add	fp, #8
16eb4     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16eb8     08 CE 85 51 |  if_ne	sub	fp, #8
16ebc     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16ec0     CC 00 90 5D |  if_ne	jmp	#LR__1953
16ec4     E7 AC 02 FB | 	rdlong	local04, fp
16ec8     53 00 00 FF 
16ecc     60 65 06 F1 | 	add	objptr, ##42848
16ed0     32 AD 62 FC | 	wrlong	local04, objptr
16ed4                 | '   q=t1.result.uresult
16ed4                 | '   if q<7 then 
16ed4     53 00 00 FF 
16ed8     60 65 86 F1 | 	sub	objptr, ##42848
16edc     07 AC 56 F2 | 	cmps	local04, #7 wc
16ee0     9C 00 90 3D |  if_ae	jmp	#LR__1952
16ee4     00 C0 1B FF 
16ee8     00 AC 06 F6 | 	mov	local04, ##931135488
16eec     53 00 00 FF 
16ef0     60 65 06 F1 | 	add	objptr, ##42848
16ef4     32 A9 02 FB | 	rdlong	local02, objptr
16ef8     02 A8 66 F0 | 	shl	local02, #2
16efc     B0 65 86 F1 | 	sub	objptr, #432
16f00     32 A9 02 F1 | 	add	local02, objptr
16f04     54 93 02 FB | 	rdlong	arg01, local02
16f08     52 00 00 FF 
16f0c     B0 65 86 F1 | 	sub	objptr, ##42416
16f10     49 93 52 F6 | 	abs	arg01, arg01 wc
16f14     1F AA C6 C9 |  if_b	decod	local03, #31
16f18     00 AA 06 36 |  if_ae	mov	local03, #0
16f1c     64 FD B0 FD | 	call	#__system___float_fromuns
16f20     55 7B 62 F5 | 	xor	result1, local03
16f24     3D 93 02 F6 | 	mov	arg01, result1
16f28     FF 7F 23 FF 
16f2c     00 94 06 F6 | 	mov	arg02, ##1191181824
16f30     58 03 B1 FD | 	call	#__system___float_div
16f34     3D 95 02 F6 | 	mov	arg02, result1
16f38     56 93 02 F6 | 	mov	arg01, local04
16f3c     78 FD B0 FD | 	call	#__system___float_add
16f40     3D AD 02 F6 | 	mov	local04, result1
16f44                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16f44     56 93 02 F6 | 	mov	arg01, local04
16f48     1F 92 06 F4 | 	bitl	arg01, #31
16f4c     89 41 1D FF 
16f50     6F 94 06 F6 | 	mov	arg02, ##981668463
16f54     01 96 06 F6 | 	mov	arg03, #1
16f58     60 05 B1 FD | 	call	#__system___float_cmp
16f5c     00 7A 56 F2 | 	cmps	result1, #0 wc
16f60     00 AC 06 C6 |  if_b	mov	local04, #0
16f64     E7 AC 62 FC | 	wrlong	local04, fp
16f68     08 CE 05 F1 | 	add	fp, #8
16f6c     E7 3C 68 FC | 	wrlong	#30, fp
16f70     08 CE 85 F1 | 	sub	fp, #8
16f74     E7 92 02 F6 | 	mov	arg01, fp
16f78     9C 67 BF FD | 	call	#_push
16f7c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16f7c     1C 00 90 FD | 	jmp	#LR__1954
16f80                 | LR__1952
16f80     29 92 06 F6 | 	mov	arg01, #41
16f84     00 94 06 F6 | 	mov	arg02, #0
16f88     B0 A0 B0 FD | 	call	#_printerror
16f8c                 | '      printerror(41) : return
16f8c     0C 00 90 FD | 	jmp	#LR__1954
16f90                 | LR__1953
16f90     29 92 06 F6 | 	mov	arg01, #41
16f94     00 94 06 F6 | 	mov	arg02, #0
16f98     A0 A0 B0 FD | 	call	#_printerror
16f9c                 | LR__1954
16f9c     E7 F0 03 F6 | 	mov	ptra, fp
16fa0     F2 00 A0 FD | 	call	#popregs_
16fa4                 | _do_padz_ret
16fa4     2D 00 64 FD | 	ret
16fa8                 | 
16fa8                 | ' 
16fa8                 | ' '-------------------- paper
16fa8                 | ' 
16fa8                 | ' sub do_paper
16fa8                 | _do_paper
16fa8     03 CA 05 F6 | 	mov	COUNT_, #3
16fac     E8 00 A0 FD | 	call	#pushregs_
16fb0     D4 66 BF FD | 	call	#_pop
16fb4     3D A7 02 F6 | 	mov	local01, result1
16fb8     3E A9 02 F6 | 	mov	local02, result2
16fbc     3F AB 02 F6 | 	mov	local03, result3
16fc0                 | ' t1=pop() 
16fc0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16fc0     1E AA 0E F2 | 	cmp	local03, #30 wz
16fc4     10 00 90 5D |  if_ne	jmp	#LR__1960
16fc8     53 93 02 F6 | 	mov	arg01, local01
16fcc     00 94 06 F6 | 	mov	arg02, #0
16fd0     7C 05 B1 FD | 	call	#__system___float_tointeger
16fd4     3D A7 02 F6 | 	mov	local01, result1
16fd8                 | LR__1960
16fd8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16fd8     1F AA 0E F2 | 	cmp	local03, #31 wz
16fdc     18 00 90 5D |  if_ne	jmp	#LR__1961
16fe0     53 93 02 F6 | 	mov	arg01, local01
16fe4     BC 08 B1 FD | 	call	#__system____builtin_atof
16fe8     3D 93 02 F6 | 	mov	arg01, result1
16fec     00 94 06 F6 | 	mov	arg02, #0
16ff0     5C 05 B1 FD | 	call	#__system___float_tointeger
16ff4     3D A7 02 F6 | 	mov	local01, result1
16ff8                 | LR__1961
16ff8     38 00 00 FF 
16ffc     58 64 06 F1 | 	add	objptr, ##28760
17000     32 A7 62 FC | 	wrlong	local01, objptr
17004     04 64 06 F1 | 	add	objptr, #4
17008     32 93 02 FB | 	rdlong	arg01, objptr
1700c                 | ' 
1700c                 | ' write_color:=ff
1700c     38 00 00 FF 
17010     1B 64 86 F1 | 	sub	objptr, ##28699
17014     32 93 62 FC | 	wrlong	arg01, objptr
17018                 | ' write_background:=bb
17018     04 64 06 F1 | 	add	objptr, #4
1701c     32 A7 62 FC | 	wrlong	local01, objptr
17020     45 64 86 F1 | 	sub	objptr, #69
17024     E7 F0 03 F6 | 	mov	ptra, fp
17028     F2 00 A0 FD | 	call	#popregs_
1702c                 | _do_paper_ret
1702c     2D 00 64 FD | 	ret
17030                 | 
17030                 | ' 
17030                 | ' '-------------------- peek
17030                 | ' 
17030                 | ' sub do_peek
17030                 | _do_peek
17030     01 CA 05 F6 | 	mov	COUNT_, #1
17034     E8 00 A0 FD | 	call	#pushregs_
17038     14 F0 07 F1 | 	add	ptra, #20
1703c     48 66 BF FD | 	call	#_pop
17040     E7 7A 62 FC | 	wrlong	result1, fp
17044     04 CE 05 F1 | 	add	fp, #4
17048     E7 7C 62 FC | 	wrlong	result2, fp
1704c     04 CE 05 F1 | 	add	fp, #4
17050     E7 7E 62 FC | 	wrlong	result3, fp
17054     08 CE 85 F1 | 	sub	fp, #8
17058     E7 92 02 F6 | 	mov	arg01, fp
1705c     04 68 BF FD | 	call	#_converttoint
17060     3D 93 02 F6 | 	mov	arg01, result1
17064                 | ' 
17064                 | ' t1=pop()
17064                 | ' a=converttoint(t1)
17064                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
17064     00 04 00 FF 
17068     00 92 16 F2 | 	cmp	arg01, ##524288 wc
1706c     49 A7 C2 CA |  if_b	rdbyte	local01, arg01
17070     08 00 90 CD |  if_b	jmp	#LR__1970
17074     38 A2 B0 FD | 	call	#_pspeek
17078     3D A7 E2 F8 | 	getbyte	local01, result1, #0
1707c                 | LR__1970
1707c     08 CE 05 F1 | 	add	fp, #8
17080     E7 3A 68 FC | 	wrlong	#29, fp
17084     08 CE 85 F1 | 	sub	fp, #8
17088     E7 A6 62 FC | 	wrlong	local01, fp
1708c     E7 92 02 F6 | 	mov	arg01, fp
17090     84 66 BF FD | 	call	#_push
17094     E7 F0 03 F6 | 	mov	ptra, fp
17098     F2 00 A0 FD | 	call	#popregs_
1709c                 | _do_peek_ret
1709c     2D 00 64 FD | 	ret
170a0                 | 
170a0                 | ' 
170a0                 | ' '-------------------- pinfloat
170a0                 | ' 
170a0                 | ' sub do_pinfloat
170a0                 | _do_pinfloat
170a0     00 CA 05 F6 | 	mov	COUNT_, #0
170a4     E8 00 A0 FD | 	call	#pushregs_
170a8     0C F0 07 F1 | 	add	ptra, #12
170ac     D8 65 BF FD | 	call	#_pop
170b0     E7 7A 62 FC | 	wrlong	result1, fp
170b4     04 CE 05 F1 | 	add	fp, #4
170b8     E7 7C 62 FC | 	wrlong	result2, fp
170bc     04 CE 05 F1 | 	add	fp, #4
170c0     E7 7E 62 FC | 	wrlong	result3, fp
170c4     08 CE 85 F1 | 	sub	fp, #8
170c8     E7 92 02 F6 | 	mov	arg01, fp
170cc     94 67 BF FD | 	call	#_converttoint
170d0     50 7A 62 FD | 	fltl	result1
170d4     E7 F0 03 F6 | 	mov	ptra, fp
170d8     F2 00 A0 FD | 	call	#popregs_
170dc                 | _do_pinfloat_ret
170dc     2D 00 64 FD | 	ret
170e0                 | 
170e0                 | ' 
170e0                 | ' '-------------------- pinhi
170e0                 | ' 
170e0                 | ' sub do_pinhi
170e0                 | _do_pinhi
170e0     00 CA 05 F6 | 	mov	COUNT_, #0
170e4     E8 00 A0 FD | 	call	#pushregs_
170e8     0C F0 07 F1 | 	add	ptra, #12
170ec     98 65 BF FD | 	call	#_pop
170f0     E7 7A 62 FC | 	wrlong	result1, fp
170f4     04 CE 05 F1 | 	add	fp, #4
170f8     E7 7C 62 FC | 	wrlong	result2, fp
170fc     04 CE 05 F1 | 	add	fp, #4
17100     E7 7E 62 FC | 	wrlong	result3, fp
17104     08 CE 85 F1 | 	sub	fp, #8
17108     E7 92 02 F6 | 	mov	arg01, fp
1710c     54 67 BF FD | 	call	#_converttoint
17110     59 7A 62 FD | 	drvh	result1
17114     E7 F0 03 F6 | 	mov	ptra, fp
17118     F2 00 A0 FD | 	call	#popregs_
1711c                 | _do_pinhi_ret
1711c     2D 00 64 FD | 	ret
17120                 | 
17120                 | ' 
17120                 | ' '-------------------- pinlo
17120                 | ' 
17120                 | ' sub do_pinlo
17120                 | _do_pinlo
17120     00 CA 05 F6 | 	mov	COUNT_, #0
17124     E8 00 A0 FD | 	call	#pushregs_
17128     0C F0 07 F1 | 	add	ptra, #12
1712c     58 65 BF FD | 	call	#_pop
17130     E7 7A 62 FC | 	wrlong	result1, fp
17134     04 CE 05 F1 | 	add	fp, #4
17138     E7 7C 62 FC | 	wrlong	result2, fp
1713c     04 CE 05 F1 | 	add	fp, #4
17140     E7 7E 62 FC | 	wrlong	result3, fp
17144     08 CE 85 F1 | 	sub	fp, #8
17148     E7 92 02 F6 | 	mov	arg01, fp
1714c     14 67 BF FD | 	call	#_converttoint
17150     58 7A 62 FD | 	drvl	result1
17154     E7 F0 03 F6 | 	mov	ptra, fp
17158     F2 00 A0 FD | 	call	#popregs_
1715c                 | _do_pinlo_ret
1715c     2D 00 64 FD | 	ret
17160                 | 
17160                 | ' 
17160                 | ' '-------------------- pinread
17160                 | ' 
17160                 | ' sub do_pinread
17160                 | _do_pinread
17160     00 CA 05 F6 | 	mov	COUNT_, #0
17164     E8 00 A0 FD | 	call	#pushregs_
17168     0C F0 07 F1 | 	add	ptra, #12
1716c     18 65 BF FD | 	call	#_pop
17170     E7 7A 62 FC | 	wrlong	result1, fp
17174     04 CE 05 F1 | 	add	fp, #4
17178     E7 7C 62 FC | 	wrlong	result2, fp
1717c     04 CE 05 F1 | 	add	fp, #4
17180     E7 7E 62 FC | 	wrlong	result3, fp
17184     08 CE 85 F1 | 	sub	fp, #8
17188     E7 92 02 F6 | 	mov	arg01, fp
1718c     D4 66 BF FD | 	call	#_converttoint
17190     3D 93 02 F6 | 	mov	arg01, result1
17194     20 92 CE F7 | 	test	arg01, #32 wz
17198     FF 7B 02 56 |  if_ne	mov	result1, inb
1719c     FE 7B 02 A6 |  if_e	mov	result1, ina
171a0     49 7B 42 F0 | 	shr	result1, arg01
171a4     06 92 46 F0 | 	shr	arg01, #6
171a8     49 7B 42 F7 | 	zerox	result1, arg01
171ac     53 00 00 FF 
171b0     68 65 06 F1 | 	add	objptr, ##42856
171b4     32 7B 62 FC | 	wrlong	result1, objptr
171b8     53 00 00 FF 
171bc     68 65 86 F1 | 	sub	objptr, ##42856
171c0     08 CE 05 F1 | 	add	fp, #8
171c4     E7 3A 68 FC | 	wrlong	#29, fp
171c8     08 CE 85 F1 | 	sub	fp, #8
171cc     E7 08 68 FC | 	wrlong	#4, fp
171d0     E7 92 02 F6 | 	mov	arg01, fp
171d4     40 65 BF FD | 	call	#_push
171d8     E7 F0 03 F6 | 	mov	ptra, fp
171dc     F2 00 A0 FD | 	call	#popregs_
171e0                 | _do_pinread_ret
171e0     2D 00 64 FD | 	ret
171e4                 | 
171e4                 | ' 
171e4                 | ' '-------------------- pinstart
171e4                 | ' 
171e4                 | ' sub do_pinstart
171e4                 | _do_pinstart
171e4     03 CA 05 F6 | 	mov	COUNT_, #3
171e8     E8 00 A0 FD | 	call	#pushregs_
171ec     30 F0 07 F1 | 	add	ptra, #48
171f0     94 64 BF FD | 	call	#_pop
171f4     3D 97 02 F6 | 	mov	arg03, result1
171f8     3E 95 02 F6 | 	mov	arg02, result2
171fc     3F 99 02 F6 | 	mov	arg04, result3
17200     E7 96 62 FC | 	wrlong	arg03, fp
17204     04 CE 05 F1 | 	add	fp, #4
17208     E7 94 62 FC | 	wrlong	arg02, fp
1720c     04 CE 05 F1 | 	add	fp, #4
17210     E7 98 62 FC | 	wrlong	arg04, fp
17214     08 CE 85 F1 | 	sub	fp, #8
17218     6C 64 BF FD | 	call	#_pop
1721c     3D 97 02 F6 | 	mov	arg03, result1
17220     3E 95 02 F6 | 	mov	arg02, result2
17224     3F 99 02 F6 | 	mov	arg04, result3
17228     0C CE 05 F1 | 	add	fp, #12
1722c     E7 96 62 FC | 	wrlong	arg03, fp
17230     04 CE 05 F1 | 	add	fp, #4
17234     E7 94 62 FC | 	wrlong	arg02, fp
17238     04 CE 05 F1 | 	add	fp, #4
1723c     E7 98 62 FC | 	wrlong	arg04, fp
17240     14 CE 85 F1 | 	sub	fp, #20
17244     40 64 BF FD | 	call	#_pop
17248     3D 97 02 F6 | 	mov	arg03, result1
1724c     3E 95 02 F6 | 	mov	arg02, result2
17250     3F 99 02 F6 | 	mov	arg04, result3
17254     18 CE 05 F1 | 	add	fp, #24
17258     E7 96 62 FC | 	wrlong	arg03, fp
1725c     04 CE 05 F1 | 	add	fp, #4
17260     E7 94 62 FC | 	wrlong	arg02, fp
17264     04 CE 05 F1 | 	add	fp, #4
17268     E7 98 62 FC | 	wrlong	arg04, fp
1726c     20 CE 85 F1 | 	sub	fp, #32
17270     14 64 BF FD | 	call	#_pop
17274     3F 97 02 F6 | 	mov	arg03, result3
17278     24 CE 05 F1 | 	add	fp, #36
1727c     E7 7A 62 FC | 	wrlong	result1, fp
17280     04 CE 05 F1 | 	add	fp, #4
17284     E7 7C 62 FC | 	wrlong	result2, fp
17288     04 CE 05 F1 | 	add	fp, #4
1728c     E7 96 62 FC | 	wrlong	arg03, fp
17290     08 CE 85 F1 | 	sub	fp, #8
17294     E7 92 02 F6 | 	mov	arg01, fp
17298     24 CE 85 F1 | 	sub	fp, #36
1729c     C4 65 BF FD | 	call	#_converttoint
172a0     3D A7 02 F6 | 	mov	local01, result1
172a4     E7 92 02 F6 | 	mov	arg01, fp
172a8     18 92 06 F1 | 	add	arg01, #24
172ac     B4 65 BF FD | 	call	#_converttoint
172b0     3D A9 02 F6 | 	mov	local02, result1
172b4     E7 92 02 F6 | 	mov	arg01, fp
172b8     0C 92 06 F1 | 	add	arg01, #12
172bc     A4 65 BF FD | 	call	#_converttoint
172c0     3D AB 02 F6 | 	mov	local03, result1
172c4     E7 92 02 F6 | 	mov	arg01, fp
172c8     98 65 BF FD | 	call	#_converttoint
172cc     40 A6 62 FD | 	dirl	local01
172d0     53 A9 02 FC | 	wrpin	local02, local01
172d4     53 AB 12 FC | 	wxpin	local03, local01
172d8     53 7B 22 FC | 	wypin	result1, local01
172dc     41 A6 62 FD | 	dirh	local01
172e0     E7 F0 03 F6 | 	mov	ptra, fp
172e4     F2 00 A0 FD | 	call	#popregs_
172e8                 | _do_pinstart_ret
172e8     2D 00 64 FD | 	ret
172ec                 | 
172ec                 | ' 
172ec                 | ' '-------------------- pintoggle
172ec                 | ' 
172ec                 | ' sub do_pintoggle
172ec                 | _do_pintoggle
172ec     00 CA 05 F6 | 	mov	COUNT_, #0
172f0     E8 00 A0 FD | 	call	#pushregs_
172f4     0C F0 07 F1 | 	add	ptra, #12
172f8     8C 63 BF FD | 	call	#_pop
172fc     E7 7A 62 FC | 	wrlong	result1, fp
17300     04 CE 05 F1 | 	add	fp, #4
17304     E7 7C 62 FC | 	wrlong	result2, fp
17308     04 CE 05 F1 | 	add	fp, #4
1730c     E7 7E 62 FC | 	wrlong	result3, fp
17310     08 CE 85 F1 | 	sub	fp, #8
17314     E7 92 02 F6 | 	mov	arg01, fp
17318     48 65 BF FD | 	call	#_converttoint
1731c     5F 7A 62 FD | 	drvnot	result1
17320     E7 F0 03 F6 | 	mov	ptra, fp
17324     F2 00 A0 FD | 	call	#popregs_
17328                 | _do_pintoggle_ret
17328     2D 00 64 FD | 	ret
1732c                 | 
1732c                 | ' 
1732c                 | ' '-------------------- pinwrite
1732c                 | ' 
1732c                 | ' sub do_pinwrite
1732c                 | _do_pinwrite
1732c     01 CA 05 F6 | 	mov	COUNT_, #1
17330     E8 00 A0 FD | 	call	#pushregs_
17334     18 F0 07 F1 | 	add	ptra, #24
17338     4C 63 BF FD | 	call	#_pop
1733c     3D 95 02 F6 | 	mov	arg02, result1
17340     3E 93 02 F6 | 	mov	arg01, result2
17344     3F A7 02 F6 | 	mov	local01, result3
17348     E7 94 62 FC | 	wrlong	arg02, fp
1734c     04 CE 05 F1 | 	add	fp, #4
17350     E7 92 62 FC | 	wrlong	arg01, fp
17354     04 CE 05 F1 | 	add	fp, #4
17358     E7 A6 62 FC | 	wrlong	local01, fp
1735c     08 CE 85 F1 | 	sub	fp, #8
17360     24 63 BF FD | 	call	#_pop
17364     3F A7 02 F6 | 	mov	local01, result3
17368     0C CE 05 F1 | 	add	fp, #12
1736c     E7 7A 62 FC | 	wrlong	result1, fp
17370     04 CE 05 F1 | 	add	fp, #4
17374     E7 7C 62 FC | 	wrlong	result2, fp
17378     04 CE 05 F1 | 	add	fp, #4
1737c     E7 A6 62 FC | 	wrlong	local01, fp
17380     08 CE 85 F1 | 	sub	fp, #8
17384     E7 92 02 F6 | 	mov	arg01, fp
17388     0C CE 85 F1 | 	sub	fp, #12
1738c     D4 64 BF FD | 	call	#_converttoint
17390     3D A7 02 F6 | 	mov	local01, result1
17394     E7 92 02 F6 | 	mov	arg01, fp
17398     C8 64 BF FD | 	call	#_converttoint
1739c     3D 95 02 F6 | 	mov	arg02, result1
173a0     53 93 02 F6 | 	mov	arg01, local01
173a4     C4 D7 B0 FD | 	call	#__system___pinwrite
173a8     E7 F0 03 F6 | 	mov	ptra, fp
173ac     F2 00 A0 FD | 	call	#popregs_
173b0                 | _do_pinwrite_ret
173b0     2D 00 64 FD | 	ret
173b4                 | 
173b4                 | ' 
173b4                 | ' '-------------------- play
173b4                 | ' 
173b4                 | ' sub do_play
173b4                 | _do_play
173b4     15 CA 05 F6 | 	mov	COUNT_, #21
173b8     E8 00 A0 FD | 	call	#pushregs_
173bc     84 F0 07 F1 | 	add	ptra, #132
173c0     77 CC 21 FF 
173c4     BE A7 06 F6 | 	mov	local01, ##1134096318
173c8                 | ' speed_coeff=305.873
173c8                 | ' 
173c8                 | ' for i=0 to 9 : params(i)=-2.0 : next i
173c8     00 A8 06 F6 | 	mov	local02, #0
173cc     3C CE 05 F1 | 	add	fp, #60
173d0     D7 10 48 FB | 	callpa	#(@LR__1981-@LR__1980)>>2,fcache_load_ptr_
173d4                 | LR__1980
173d4     54 AB 02 F6 | 	mov	local03, local02
173d8     02 AA 66 F0 | 	shl	local03, #2
173dc     E7 AA 02 F1 | 	add	local03, fp
173e0     00 00 E0 FF 
173e4     55 01 68 FC | 	wrlong	##-1073741824, local03
173e8     01 A8 06 F1 | 	add	local02, #1
173ec     0A A8 56 F2 | 	cmps	local02, #10 wc
173f0     E0 FF 9F CD |  if_b	jmp	#LR__1980
173f4                 | LR__1981
173f4     3C CE 85 F1 | 	sub	fp, #60
173f8     4B 00 00 FF 
173fc     A0 64 06 F1 | 	add	objptr, ##38560
17400     32 A9 02 FB | 	rdlong	local02, objptr
17404     54 AD 02 F6 | 	mov	local04, local02
17408     01 AC 66 F0 | 	shl	local04, #1
1740c     54 AD 02 F1 | 	add	local04, local02
17410     02 AC 66 F0 | 	shl	local04, #2
17414     03 00 00 FF 
17418     04 64 86 F1 | 	sub	objptr, ##1540
1741c     32 AD 02 F1 | 	add	local04, objptr
17420     56 AF 02 FB | 	rdlong	local05, local04
17424                 | ' numpar=compiledline(lineptr_e).result.uresult
17424                 | ' for i=numpar to 1 step -1 
17424     57 A9 02 F6 | 	mov	local02, local05
17428     48 00 00 FF 
1742c     9C 64 86 F1 | 	sub	objptr, ##37020
17430                 | LR__1982
17430     54 62 BF FD | 	call	#_pop
17434     64 CE 05 F1 | 	add	fp, #100
17438     E7 7A 62 FC | 	wrlong	result1, fp
1743c     04 CE 05 F1 | 	add	fp, #4
17440     E7 7C 62 FC | 	wrlong	result2, fp
17444     04 CE 05 F1 | 	add	fp, #4
17448     E7 7E 62 FC | 	wrlong	result3, fp
1744c     54 AB 02 F6 | 	mov	local03, local02
17450     01 AA 86 F1 | 	sub	local03, #1
17454     02 AA 66 F0 | 	shl	local03, #2
17458     30 CE 85 F1 | 	sub	fp, #48
1745c     E7 AA 02 F1 | 	add	local03, fp
17460     28 CE 05 F1 | 	add	fp, #40
17464     E7 B0 02 F6 | 	mov	local06, fp
17468     58 93 02 F6 | 	mov	arg01, local06
1746c     64 CE 85 F1 | 	sub	fp, #100
17470     AC 64 BF FD | 	call	#_converttofloat
17474     55 7B 62 FC | 	wrlong	result1, local03
17478     01 A8 86 F1 | 	sub	local02, #1
1747c     01 A8 56 F2 | 	cmps	local02, #1 wc
17480     AC FF 9F 3D |  if_ae	jmp	#LR__1982
17484                 | ' 
17484                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
17484     3C CE 05 F1 | 	add	fp, #60
17488     E7 92 02 FB | 	rdlong	arg01, fp
1748c     3C CE 85 F1 | 	sub	fp, #60
17490     00 94 06 F6 | 	mov	arg02, #0
17494     01 96 06 F6 | 	mov	arg03, #1
17498     20 00 B1 FD | 	call	#__system___float_cmp
1749c     00 7A 56 F2 | 	cmps	result1, #0 wc
174a0     00 B2 06 C6 |  if_b	mov	local07, #0
174a4     20 00 90 CD |  if_b	jmp	#LR__1983
174a8     3C CE 05 F1 | 	add	fp, #60
174ac     E7 92 02 FB | 	rdlong	arg01, fp
174b0     3C CE 85 F1 | 	sub	fp, #60
174b4     01 94 06 F6 | 	mov	arg02, #1
174b8     94 00 B1 FD | 	call	#__system___float_tointeger
174bc     3D B3 52 F6 | 	abs	local07, result1 wc
174c0     07 B2 06 F5 | 	and	local07, #7
174c4     59 B3 82 F6 | 	negc	local07, local07
174c8                 | LR__1983
174c8                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
174c8     40 CE 05 F1 | 	add	fp, #64
174cc     E7 92 02 FB | 	rdlong	arg01, fp
174d0     40 CE 85 F1 | 	sub	fp, #64
174d4     00 94 06 F6 | 	mov	arg02, #0
174d8     01 96 06 F6 | 	mov	arg03, #1
174dc     DC FF B0 FD | 	call	#__system___float_cmp
174e0     00 7A 56 F2 | 	cmps	result1, #0 wc
174e4     28 00 90 3D |  if_ae	jmp	#LR__1984
174e8     59 97 02 F6 | 	mov	arg03, local07
174ec     03 96 66 F0 | 	shl	arg03, #3
174f0     59 97 82 F1 | 	sub	arg03, local07
174f4     02 96 66 F0 | 	shl	arg03, #2
174f8     32 AD 02 F6 | 	mov	local04, objptr
174fc     15 00 00 FF 
17500     38 AD 06 F1 | 	add	local04, ##11064
17504     56 97 02 F1 | 	add	arg03, local04
17508     4B B5 02 FB | 	rdlong	local08, arg03
1750c     30 00 90 FD | 	jmp	#LR__1985
17510                 | LR__1984
17510     40 CE 05 F1 | 	add	fp, #64
17514     E7 B4 02 FB | 	rdlong	local08, fp
17518     40 CE 85 F1 | 	sub	fp, #64
1751c     59 97 02 F6 | 	mov	arg03, local07
17520     03 96 66 F0 | 	shl	arg03, #3
17524     59 97 82 F1 | 	sub	arg03, local07
17528     02 96 66 F0 | 	shl	arg03, #2
1752c     32 AD 02 F6 | 	mov	local04, objptr
17530     15 00 00 FF 
17534     38 AD 06 F1 | 	add	local04, ##11064
17538     56 97 02 F1 | 	add	arg03, local04
1753c     4B B5 62 FC | 	wrlong	local08, arg03
17540                 | LR__1985
17540                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
17540     44 CE 05 F1 | 	add	fp, #68
17544     E7 92 02 FB | 	rdlong	arg01, fp
17548     44 CE 85 F1 | 	sub	fp, #68
1754c     00 94 06 F6 | 	mov	arg02, #0
17550     01 96 06 F6 | 	mov	arg03, #1
17554     64 FF B0 FD | 	call	#__system___float_cmp
17558     00 7A 56 F2 | 	cmps	result1, #0 wc
1755c     24 00 90 CD |  if_b	jmp	#LR__1986
17560     44 CE 05 F1 | 	add	fp, #68
17564     E7 92 02 FB | 	rdlong	arg01, fp
17568     44 CE 85 F1 | 	sub	fp, #68
1756c     20 0E 23 FF 
17570     00 94 06 F6 | 	mov	arg02, ##1176256512
17574     01 96 66 F6 | 	neg	arg03, #1
17578     40 FF B0 FD | 	call	#__system___float_cmp
1757c     01 7A 56 F2 | 	cmps	result1, #1 wc
17580     30 00 90 CD |  if_b	jmp	#LR__1987
17584                 | LR__1986
17584     59 AD 02 F6 | 	mov	local04, local07
17588     03 AC 66 F0 | 	shl	local04, #3
1758c     59 AD 82 F1 | 	sub	local04, local07
17590     02 AC 66 F0 | 	shl	local04, #2
17594     32 B1 02 F6 | 	mov	local06, objptr
17598     15 00 00 FF 
1759c     38 B1 06 F1 | 	add	local06, ##11064
175a0     58 AD 02 F1 | 	add	local04, local06
175a4     06 AC 06 F1 | 	add	local04, #6
175a8     56 B7 E2 FA | 	rdword	local09, local04
175ac     5B B9 32 F9 | 	getword	local10, local09, #0
175b0     40 00 90 FD | 	jmp	#LR__1988
175b4                 | LR__1987
175b4     44 CE 05 F1 | 	add	fp, #68
175b8     E7 92 02 FB | 	rdlong	arg01, fp
175bc     44 CE 85 F1 | 	sub	fp, #68
175c0     01 94 06 F6 | 	mov	arg02, #1
175c4     88 FF B0 FD | 	call	#__system___float_tointeger
175c8     3D B9 02 F6 | 	mov	local10, result1
175cc     59 97 02 F6 | 	mov	arg03, local07
175d0     03 96 66 F0 | 	shl	arg03, #3
175d4     59 97 82 F1 | 	sub	arg03, local07
175d8     02 96 66 F0 | 	shl	arg03, #2
175dc     32 AD 02 F6 | 	mov	local04, objptr
175e0     15 00 00 FF 
175e4     38 AD 06 F1 | 	add	local04, ##11064
175e8     56 97 02 F1 | 	add	arg03, local04
175ec     06 96 06 F1 | 	add	arg03, #6
175f0     4B B9 52 FC | 	wrword	local10, arg03
175f4                 | LR__1988
175f4                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
175f4     48 CE 05 F1 | 	add	fp, #72
175f8     E7 92 02 FB | 	rdlong	arg01, fp
175fc     48 CE 85 F1 | 	sub	fp, #72
17600     00 94 06 F6 | 	mov	arg02, #0
17604     01 96 06 F6 | 	mov	arg03, #1
17608     B0 FE B0 FD | 	call	#__system___float_cmp
1760c     00 7A 56 F2 | 	cmps	result1, #0 wc
17610     24 00 90 CD |  if_b	jmp	#LR__1989
17614     48 CE 05 F1 | 	add	fp, #72
17618     E7 92 02 FB | 	rdlong	arg01, fp
1761c     48 CE 85 F1 | 	sub	fp, #72
17620     89 C1 20 FF 
17624     6F 94 06 F6 | 	mov	arg02, ##1099108975
17628     01 96 66 F6 | 	neg	arg03, #1
1762c     8C FE B0 FD | 	call	#__system___float_cmp
17630     01 7A 56 F2 | 	cmps	result1, #1 wc
17634     2C 00 90 CD |  if_b	jmp	#LR__1990
17638                 | LR__1989
17638     59 B1 02 F6 | 	mov	local06, local07
1763c     03 B0 66 F0 | 	shl	local06, #3
17640     59 B1 82 F1 | 	sub	local06, local07
17644     02 B0 66 F0 | 	shl	local06, #2
17648     32 AD 02 F6 | 	mov	local04, objptr
1764c     15 00 00 FF 
17650     38 AD 06 F1 | 	add	local04, ##11064
17654     56 B1 02 F1 | 	add	local06, local04
17658     0C B0 06 F1 | 	add	local06, #12
1765c     58 BB 02 FB | 	rdlong	local11, local06
17660     34 00 90 FD | 	jmp	#LR__1991
17664                 | LR__1990
17664     48 CE 05 F1 | 	add	fp, #72
17668     E7 BA 02 FB | 	rdlong	local11, fp
1766c     48 CE 85 F1 | 	sub	fp, #72
17670     59 97 02 F6 | 	mov	arg03, local07
17674     03 96 66 F0 | 	shl	arg03, #3
17678     59 97 82 F1 | 	sub	arg03, local07
1767c     02 96 66 F0 | 	shl	arg03, #2
17680     32 AD 02 F6 | 	mov	local04, objptr
17684     15 00 00 FF 
17688     38 AD 06 F1 | 	add	local04, ##11064
1768c     56 97 02 F1 | 	add	arg03, local04
17690     0C 96 06 F1 | 	add	arg03, #12
17694     4B BB 62 FC | 	wrlong	local11, arg03
17698                 | LR__1991
17698                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
17698     4C CE 05 F1 | 	add	fp, #76
1769c     E7 92 02 FB | 	rdlong	arg01, fp
176a0     4C CE 85 F1 | 	sub	fp, #76
176a4     00 94 06 F6 | 	mov	arg02, #0
176a8     01 96 06 F6 | 	mov	arg03, #1
176ac     0C FE B0 FD | 	call	#__system___float_cmp
176b0     00 7A 56 F2 | 	cmps	result1, #0 wc
176b4     24 00 90 CD |  if_b	jmp	#LR__1992
176b8     4C CE 05 F1 | 	add	fp, #76
176bc     E7 92 02 FB | 	rdlong	arg01, fp
176c0     4C CE 85 F1 | 	sub	fp, #76
176c4     00 00 21 FF 
176c8     00 94 06 F6 | 	mov	arg02, ##1107296256
176cc     01 96 66 F6 | 	neg	arg03, #1
176d0     E8 FD B0 FD | 	call	#__system___float_cmp
176d4     01 7A 56 F2 | 	cmps	result1, #1 wc
176d8     30 00 90 CD |  if_b	jmp	#LR__1993
176dc                 | LR__1992
176dc     59 AD 02 F6 | 	mov	local04, local07
176e0     03 AC 66 F0 | 	shl	local04, #3
176e4     59 AD 82 F1 | 	sub	local04, local07
176e8     02 AC 66 F0 | 	shl	local04, #2
176ec     32 B1 02 F6 | 	mov	local06, objptr
176f0     15 00 00 FF 
176f4     38 B1 06 F1 | 	add	local06, ##11064
176f8     58 AD 02 F1 | 	add	local04, local06
176fc     04 AC 06 F1 | 	add	local04, #4
17700     56 B7 C2 FA | 	rdbyte	local09, local04
17704     5B BD E2 F8 | 	getbyte	local12, local09, #0
17708     40 00 90 FD | 	jmp	#LR__1994
1770c                 | LR__1993
1770c     4C CE 05 F1 | 	add	fp, #76
17710     E7 92 02 FB | 	rdlong	arg01, fp
17714     4C CE 85 F1 | 	sub	fp, #76
17718     01 94 06 F6 | 	mov	arg02, #1
1771c     30 FE B0 FD | 	call	#__system___float_tointeger
17720     3D BD 02 F6 | 	mov	local12, result1
17724     59 97 02 F6 | 	mov	arg03, local07
17728     03 96 66 F0 | 	shl	arg03, #3
1772c     59 97 82 F1 | 	sub	arg03, local07
17730     02 96 66 F0 | 	shl	arg03, #2
17734     32 AD 02 F6 | 	mov	local04, objptr
17738     15 00 00 FF 
1773c     38 AD 06 F1 | 	add	local04, ##11064
17740     56 97 02 F1 | 	add	arg03, local04
17744     04 96 06 F1 | 	add	arg03, #4
17748     4B BD 42 FC | 	wrbyte	local12, arg03
1774c                 | LR__1994
1774c                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
1774c     50 CE 05 F1 | 	add	fp, #80
17750     E7 92 02 FB | 	rdlong	arg01, fp
17754     50 CE 85 F1 | 	sub	fp, #80
17758     00 94 06 F6 | 	mov	arg02, #0
1775c     01 96 06 F6 | 	mov	arg03, #1
17760     58 FD B0 FD | 	call	#__system___float_cmp
17764     00 7A 56 F2 | 	cmps	result1, #0 wc
17768     24 00 90 CD |  if_b	jmp	#LR__1995
1776c     50 CE 05 F1 | 	add	fp, #80
17770     E7 92 02 FB | 	rdlong	arg01, fp
17774     50 CE 85 F1 | 	sub	fp, #80
17778     00 80 20 FF 
1777c     00 94 06 F6 | 	mov	arg02, ##1090519040
17780     01 96 66 F6 | 	neg	arg03, #1
17784     34 FD B0 FD | 	call	#__system___float_cmp
17788     01 7A 56 F2 | 	cmps	result1, #1 wc
1778c     30 00 90 CD |  if_b	jmp	#LR__1996
17790                 | LR__1995
17790     59 AD 02 F6 | 	mov	local04, local07
17794     03 AC 66 F0 | 	shl	local04, #3
17798     59 AD 82 F1 | 	sub	local04, local07
1779c     02 AC 66 F0 | 	shl	local04, #2
177a0     32 B1 02 F6 | 	mov	local06, objptr
177a4     15 00 00 FF 
177a8     38 B1 06 F1 | 	add	local06, ##11064
177ac     58 AD 02 F1 | 	add	local04, local06
177b0     05 AC 06 F1 | 	add	local04, #5
177b4     56 B7 C2 FA | 	rdbyte	local09, local04
177b8     5B BF E2 F8 | 	getbyte	local13, local09, #0
177bc     40 00 90 FD | 	jmp	#LR__1997
177c0                 | LR__1996
177c0     50 CE 05 F1 | 	add	fp, #80
177c4     E7 92 02 FB | 	rdlong	arg01, fp
177c8     50 CE 85 F1 | 	sub	fp, #80
177cc     01 94 06 F6 | 	mov	arg02, #1
177d0     7C FD B0 FD | 	call	#__system___float_tointeger
177d4     3D BF 02 F6 | 	mov	local13, result1
177d8     59 97 02 F6 | 	mov	arg03, local07
177dc     03 96 66 F0 | 	shl	arg03, #3
177e0     59 97 82 F1 | 	sub	arg03, local07
177e4     02 96 66 F0 | 	shl	arg03, #2
177e8     32 AD 02 F6 | 	mov	local04, objptr
177ec     15 00 00 FF 
177f0     38 AD 06 F1 | 	add	local04, ##11064
177f4     56 97 02 F1 | 	add	arg03, local04
177f8     05 96 06 F1 | 	add	arg03, #5
177fc     4B BF 42 FC | 	wrbyte	local13, arg03
17800                 | LR__1997
17800                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
17800     54 CE 05 F1 | 	add	fp, #84
17804     E7 92 02 FB | 	rdlong	arg01, fp
17808     54 CE 85 F1 | 	sub	fp, #84
1780c     00 94 06 F6 | 	mov	arg02, #0
17810     01 96 06 F6 | 	mov	arg03, #1
17814     A4 FC B0 FD | 	call	#__system___float_cmp
17818     00 7A 56 F2 | 	cmps	result1, #0 wc
1781c     24 00 90 CD |  if_b	jmp	#LR__1998
17820     54 CE 05 F1 | 	add	fp, #84
17824     E7 92 02 FB | 	rdlong	arg01, fp
17828     54 CE 85 F1 | 	sub	fp, #84
1782c     00 3D 22 FF 
17830     00 94 06 F6 | 	mov	arg02, ##1148846080
17834     01 96 66 F6 | 	neg	arg03, #1
17838     80 FC B0 FD | 	call	#__system___float_cmp
1783c     01 7A 56 F2 | 	cmps	result1, #1 wc
17840     2C 00 90 CD |  if_b	jmp	#LR__1999
17844                 | LR__1998
17844     59 B1 02 F6 | 	mov	local06, local07
17848     03 B0 66 F0 | 	shl	local06, #3
1784c     59 B1 82 F1 | 	sub	local06, local07
17850     02 B0 66 F0 | 	shl	local06, #2
17854     32 AD 02 F6 | 	mov	local04, objptr
17858     15 00 00 FF 
1785c     38 AD 06 F1 | 	add	local04, ##11064
17860     56 B1 02 F1 | 	add	local06, local04
17864     08 B0 06 F1 | 	add	local06, #8
17868     58 C1 02 FB | 	rdlong	local14, local06
1786c     34 00 90 FD | 	jmp	#LR__2000
17870                 | LR__1999
17870     54 CE 05 F1 | 	add	fp, #84
17874     E7 C0 02 FB | 	rdlong	local14, fp
17878     54 CE 85 F1 | 	sub	fp, #84
1787c     59 B1 02 F6 | 	mov	local06, local07
17880     03 B0 66 F0 | 	shl	local06, #3
17884     59 B1 82 F1 | 	sub	local06, local07
17888     02 B0 66 F0 | 	shl	local06, #2
1788c     32 AD 02 F6 | 	mov	local04, objptr
17890     15 00 00 FF 
17894     38 AD 06 F1 | 	add	local04, ##11064
17898     56 B1 02 F1 | 	add	local06, local04
1789c     08 B0 06 F1 | 	add	local06, #8
178a0     58 C1 62 FC | 	wrlong	local14, local06
178a4                 | LR__2000
178a4                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
178a4     58 CE 05 F1 | 	add	fp, #88
178a8     E7 92 02 FB | 	rdlong	arg01, fp
178ac     58 CE 85 F1 | 	sub	fp, #88
178b0     00 C0 5F FF 
178b4     00 94 06 F6 | 	mov	arg02, ##-1082130432
178b8     01 96 06 F6 | 	mov	arg03, #1
178bc     FC FB B0 FD | 	call	#__system___float_cmp
178c0     00 7A 56 F2 | 	cmps	result1, #0 wc
178c4     24 00 90 CD |  if_b	jmp	#LR__2001
178c8     58 CE 05 F1 | 	add	fp, #88
178cc     E7 92 02 FB | 	rdlong	arg01, fp
178d0     58 CE 85 F1 | 	sub	fp, #88
178d4     00 C0 1F FF 
178d8     00 94 06 F6 | 	mov	arg02, ##1065353216
178dc     01 96 66 F6 | 	neg	arg03, #1
178e0     D8 FB B0 FD | 	call	#__system___float_cmp
178e4     01 7A 56 F2 | 	cmps	result1, #1 wc
178e8     2C 00 90 CD |  if_b	jmp	#LR__2002
178ec                 | LR__2001
178ec     59 B1 02 F6 | 	mov	local06, local07
178f0     03 B0 66 F0 | 	shl	local06, #3
178f4     59 B1 82 F1 | 	sub	local06, local07
178f8     02 B0 66 F0 | 	shl	local06, #2
178fc     32 AD 02 F6 | 	mov	local04, objptr
17900     15 00 00 FF 
17904     38 AD 06 F1 | 	add	local04, ##11064
17908     56 B1 02 F1 | 	add	local06, local04
1790c     10 B0 06 F1 | 	add	local06, #16
17910     58 C3 02 FB | 	rdlong	local15, local06
17914     34 00 90 FD | 	jmp	#LR__2003
17918                 | LR__2002
17918     58 CE 05 F1 | 	add	fp, #88
1791c     E7 C2 02 FB | 	rdlong	local15, fp
17920     58 CE 85 F1 | 	sub	fp, #88
17924     59 B1 02 F6 | 	mov	local06, local07
17928     03 B0 66 F0 | 	shl	local06, #3
1792c     59 B1 82 F1 | 	sub	local06, local07
17930     02 B0 66 F0 | 	shl	local06, #2
17934     32 AD 02 F6 | 	mov	local04, objptr
17938     15 00 00 FF 
1793c     38 AD 06 F1 | 	add	local04, ##11064
17940     56 B1 02 F1 | 	add	local06, local04
17944     10 B0 06 F1 | 	add	local06, #16
17948     58 C3 62 FC | 	wrlong	local15, local06
1794c                 | LR__2003
1794c                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
1794c     5C CE 05 F1 | 	add	fp, #92
17950     E7 92 02 FB | 	rdlong	arg01, fp
17954     5C CE 85 F1 | 	sub	fp, #92
17958     00 94 06 F6 | 	mov	arg02, #0
1795c     01 96 06 F6 | 	mov	arg03, #1
17960     58 FB B0 FD | 	call	#__system___float_cmp
17964     00 7A 56 F2 | 	cmps	result1, #0 wc
17968     24 00 90 CD |  if_b	jmp	#LR__2004
1796c     5C CE 05 F1 | 	add	fp, #92
17970     E7 92 02 FB | 	rdlong	arg01, fp
17974     5C CE 85 F1 | 	sub	fp, #92
17978     80 BF 21 FF 
1797c     00 94 06 F6 | 	mov	arg02, ##1132396544
17980     01 96 66 F6 | 	neg	arg03, #1
17984     34 FB B0 FD | 	call	#__system___float_cmp
17988     01 7A 56 F2 | 	cmps	result1, #1 wc
1798c     2C 00 90 CD |  if_b	jmp	#LR__2005
17990                 | LR__2004
17990     59 AD 02 F6 | 	mov	local04, local07
17994     03 AC 66 F0 | 	shl	local04, #3
17998     59 AD 82 F1 | 	sub	local04, local07
1799c     02 AC 66 F0 | 	shl	local04, #2
179a0     32 B1 02 F6 | 	mov	local06, objptr
179a4     15 00 00 FF 
179a8     38 B1 06 F1 | 	add	local06, ##11064
179ac     58 AD 02 F1 | 	add	local04, local06
179b0     14 AC 06 F1 | 	add	local04, #20
179b4     56 C5 E2 FA | 	rdword	local16, local04
179b8     40 00 90 FD | 	jmp	#LR__2006
179bc                 | LR__2005
179bc     5C CE 05 F1 | 	add	fp, #92
179c0     E7 92 02 FB | 	rdlong	arg01, fp
179c4     5C CE 85 F1 | 	sub	fp, #92
179c8     01 94 06 F6 | 	mov	arg02, #1
179cc     80 FB B0 FD | 	call	#__system___float_tointeger
179d0     3D C5 02 F6 | 	mov	local16, result1
179d4     59 B1 02 F6 | 	mov	local06, local07
179d8     03 B0 66 F0 | 	shl	local06, #3
179dc     59 B1 82 F1 | 	sub	local06, local07
179e0     02 B0 66 F0 | 	shl	local06, #2
179e4     32 AD 02 F6 | 	mov	local04, objptr
179e8     15 00 00 FF 
179ec     38 AD 06 F1 | 	add	local04, ##11064
179f0     56 B1 02 F1 | 	add	local06, local04
179f4     14 B0 06 F1 | 	add	local06, #20
179f8     58 C5 52 FC | 	wrword	local16, local06
179fc                 | LR__2006
179fc                 | ' if params(9)<0 orelse params(8)>255 then amode=channels(channel).amode else amode= round(params(9)) : channels(channel).amode=amode
179fc     60 CE 05 F1 | 	add	fp, #96
17a00     E7 92 02 FB | 	rdlong	arg01, fp
17a04     60 CE 85 F1 | 	sub	fp, #96
17a08     00 94 06 F6 | 	mov	arg02, #0
17a0c     01 96 06 F6 | 	mov	arg03, #1
17a10     A8 FA B0 FD | 	call	#__system___float_cmp
17a14     00 7A 56 F2 | 	cmps	result1, #0 wc
17a18     24 00 90 CD |  if_b	jmp	#LR__2007
17a1c     5C CE 05 F1 | 	add	fp, #92
17a20     E7 92 02 FB | 	rdlong	arg01, fp
17a24     5C CE 85 F1 | 	sub	fp, #92
17a28     80 BF 21 FF 
17a2c     00 94 06 F6 | 	mov	arg02, ##1132396544
17a30     01 96 66 F6 | 	neg	arg03, #1
17a34     84 FA B0 FD | 	call	#__system___float_cmp
17a38     01 7A 56 F2 | 	cmps	result1, #1 wc
17a3c     2C 00 90 CD |  if_b	jmp	#LR__2008
17a40                 | LR__2007
17a40     59 AD 02 F6 | 	mov	local04, local07
17a44     03 AC 66 F0 | 	shl	local04, #3
17a48     59 AD 82 F1 | 	sub	local04, local07
17a4c     02 AC 66 F0 | 	shl	local04, #2
17a50     32 B1 02 F6 | 	mov	local06, objptr
17a54     15 00 00 FF 
17a58     38 B1 06 F1 | 	add	local06, ##11064
17a5c     58 AD 02 F1 | 	add	local04, local06
17a60     16 AC 06 F1 | 	add	local04, #22
17a64     56 C7 E2 FA | 	rdword	local17, local04
17a68     40 00 90 FD | 	jmp	#LR__2009
17a6c                 | LR__2008
17a6c     60 CE 05 F1 | 	add	fp, #96
17a70     E7 92 02 FB | 	rdlong	arg01, fp
17a74     60 CE 85 F1 | 	sub	fp, #96
17a78     01 94 06 F6 | 	mov	arg02, #1
17a7c     D0 FA B0 FD | 	call	#__system___float_tointeger
17a80     3D C7 02 F6 | 	mov	local17, result1
17a84     59 B7 02 F6 | 	mov	local09, local07
17a88     03 B6 66 F0 | 	shl	local09, #3
17a8c     59 B7 82 F1 | 	sub	local09, local07
17a90     02 B6 66 F0 | 	shl	local09, #2
17a94     32 AD 02 F6 | 	mov	local04, objptr
17a98     15 00 00 FF 
17a9c     38 AD 06 F1 | 	add	local04, ##11064
17aa0     56 B7 02 F1 | 	add	local09, local04
17aa4     16 B6 06 F1 | 	add	local09, #22
17aa8     5B C7 52 FC | 	wrword	local17, local09
17aac                 | LR__2009
17aac                 | ' 
17aac                 | ' 
17aac                 | ' if amode>0 then
17aac     01 C6 56 F2 | 	cmps	local17, #1 wc
17ab0     AC 01 90 CD |  if_b	jmp	#LR__2012
17ab4     5A 95 02 F6 | 	mov	arg02, local08
17ab8     FC 16 20 FF 
17abc     54 92 06 F6 | 	mov	arg01, ##1076754516
17ac0     A4 05 B1 FD | 	call	#__system____builtin_logbase
17ac4     3D B7 02 F6 | 	mov	local09, result1
17ac8     1E 94 C6 F9 | 	decod	arg02, #30
17acc     FC 16 20 FF 
17ad0     54 92 06 F6 | 	mov	arg01, ##1076754516
17ad4     90 05 B1 FD | 	call	#__system____builtin_logbase
17ad8     3D 95 02 F6 | 	mov	arg02, result1
17adc     5B 93 02 F6 | 	mov	arg01, local09
17ae0     A8 F7 B0 FD | 	call	#__system___float_div
17ae4     3D 93 02 F6 | 	mov	arg01, result1
17ae8     00 94 06 F6 | 	mov	arg02, #0
17aec     60 FA B0 FD | 	call	#__system___float_tointeger
17af0     3D C9 02 F6 | 	mov	local18, result1
17af4     1E A8 C6 F9 | 	decod	local02, #30
17af8     64 93 02 F6 | 	mov	arg01, local18
17afc     63 93 02 F1 | 	add	arg01, local17
17b00     49 93 52 F6 | 	abs	arg01, arg01 wc
17b04     1F CA C6 C9 |  if_b	decod	local19, #31
17b08     00 CA 06 36 |  if_ae	mov	local19, #0
17b0c     74 F1 B0 FD | 	call	#__system___float_fromuns
17b10     65 7B 62 F5 | 	xor	result1, local19
17b14     3D 95 02 F6 | 	mov	arg02, result1
17b18     54 93 02 F6 | 	mov	arg01, local02
17b1c     80 04 B1 FD | 	call	#__system____builtin_powf
17b20     3D 93 02 F6 | 	mov	arg01, result1
17b24     01 94 06 F6 | 	mov	arg02, #1
17b28     24 FA B0 FD | 	call	#__system___float_tointeger
17b2c     3D CD 02 F6 | 	mov	local20, result1
17b30                 | '   skip=round(2^(lfreq+amode))                     '''' this const + const 2 lines lower=18
17b30                 | '   if skip>32768 then i=skip/32768: skip=32768 else i=1
17b30     40 00 00 FF 
17b34     01 CC 56 F2 | 	cmps	local20, ##32769 wc
17b38     14 00 90 CD |  if_b	jmp	#LR__2010
17b3c     66 A9 52 F6 | 	abs	local02, local20 wc
17b40     0F A8 46 F0 | 	shr	local02, #15
17b44     54 A9 82 F6 | 	negc	local02, local02
17b48     0F CC C6 F9 | 	decod	local20, #15
17b4c     04 00 90 FD | 	jmp	#LR__2011
17b50                 | LR__2010
17b50     01 A8 06 F6 | 	mov	local02, #1
17b54                 | LR__2011
17b54     AA 2B 25 FF 
17b58     00 93 06 F6 | 	mov	arg01, ##1247237376
17b5c     5A 95 02 F6 | 	mov	arg02, local08
17b60     28 F7 B0 FD | 	call	#__system___float_div
17b64     3D B7 02 F6 | 	mov	local09, result1
17b68     54 93 52 F6 | 	abs	arg01, local02 wc
17b6c     1F CA C6 C9 |  if_b	decod	local19, #31
17b70     00 CA 06 36 |  if_ae	mov	local19, #0
17b74     0C F1 B0 FD | 	call	#__system___float_fromuns
17b78     65 7B 62 F5 | 	xor	result1, local19
17b7c     3D AB 02 F6 | 	mov	local03, result1
17b80     1E B0 C6 F9 | 	decod	local06, #30
17b84     12 92 06 F6 | 	mov	arg01, #18
17b88     63 93 82 F1 | 	sub	arg01, local17
17b8c     64 93 82 F1 | 	sub	arg01, local18
17b90     49 93 52 F6 | 	abs	arg01, arg01 wc
17b94     1F CA C6 C9 |  if_b	decod	local19, #31
17b98     00 CA 06 36 |  if_ae	mov	local19, #0
17b9c     E4 F0 B0 FD | 	call	#__system___float_fromuns
17ba0     65 7B 62 F5 | 	xor	result1, local19
17ba4     3D 95 02 F6 | 	mov	arg02, result1
17ba8     58 93 02 F6 | 	mov	arg01, local06
17bac     F0 03 B1 FD | 	call	#__system____builtin_powf
17bb0     3D 95 02 F6 | 	mov	arg02, result1
17bb4     55 93 02 F6 | 	mov	arg01, local03
17bb8     CC F4 B0 FD | 	call	#__system___float_mul
17bbc     3D 95 02 F6 | 	mov	arg02, result1
17bc0     5B 93 02 F6 | 	mov	arg01, local09
17bc4     C4 F6 B0 FD | 	call	#__system___float_div
17bc8     3D 93 02 F6 | 	mov	arg01, result1
17bcc     01 94 06 F6 | 	mov	arg02, #1
17bd0     7C F9 B0 FD | 	call	#__system___float_tointeger
17bd4     3D CF 02 F6 | 	mov	local21, result1
17bd8     59 C9 02 F6 | 	mov	local18, local07
17bdc     03 C8 66 F0 | 	shl	local18, #3
17be0     59 C9 82 F1 | 	sub	local18, local07
17be4     02 C8 66 F0 | 	shl	local18, #2
17be8     32 AD 02 F6 | 	mov	local04, objptr
17bec     15 00 00 FF 
17bf0     38 AD 06 F1 | 	add	local04, ##11064
17bf4     56 C9 02 F1 | 	add	local18, local04
17bf8     AA 2B 25 FF 
17bfc     00 B1 06 F6 | 	mov	local06, ##1247237376
17c00     67 93 52 F6 | 	abs	arg01, local21 wc
17c04     1F CA C6 C9 |  if_b	decod	local19, #31
17c08     00 CA 06 36 |  if_ae	mov	local19, #0
17c0c     74 F0 B0 FD | 	call	#__system___float_fromuns
17c10     65 7B 62 F5 | 	xor	result1, local19
17c14     3D 95 02 F6 | 	mov	arg02, result1
17c18     58 93 02 F6 | 	mov	arg01, local06
17c1c     6C F6 B0 FD | 	call	#__system___float_div
17c20     3D B1 02 F6 | 	mov	local06, result1
17c24     66 93 52 F6 | 	abs	arg01, local20 wc
17c28     1F CA C6 C9 |  if_b	decod	local19, #31
17c2c     00 CA 06 36 |  if_ae	mov	local19, #0
17c30     50 F0 B0 FD | 	call	#__system___float_fromuns
17c34     65 7B 62 F5 | 	xor	result1, local19
17c38     3D 93 02 F6 | 	mov	arg01, result1
17c3c     00 40 24 FF 
17c40     00 94 06 F6 | 	mov	arg02, ##1216348160
17c44     44 F6 B0 FD | 	call	#__system___float_div
17c48     3D 95 02 F6 | 	mov	arg02, result1
17c4c     58 93 02 F6 | 	mov	arg01, local06
17c50     34 F4 B0 FD | 	call	#__system___float_mul
17c54     18 C8 06 F1 | 	add	local18, #24
17c58     64 7B 62 FC | 	wrlong	result1, local18
17c5c     BC 00 90 FD | 	jmp	#LR__2013
17c60                 | LR__2012
17c60     18 CE 06 F6 | 	mov	local21, #24
17c64     00 40 24 FF 
17c68     00 CC 06 F6 | 	mov	local20, ##1216348160
17c6c     5A 93 02 F6 | 	mov	arg01, local08
17c70     C7 07 24 FF 
17c74     00 94 06 F6 | 	mov	arg02, ##1208978944
17c78     10 F6 B0 FD | 	call	#__system___float_div
17c7c     3D 95 02 F6 | 	mov	arg02, result1
17c80     66 93 02 F6 | 	mov	arg01, local20
17c84     00 F4 B0 FD | 	call	#__system___float_mul
17c88     3D 93 02 F6 | 	mov	arg01, result1
17c8c     01 94 06 F6 | 	mov	arg02, #1
17c90     BC F8 B0 FD | 	call	#__system___float_tointeger
17c94     3D CD 02 F6 | 	mov	local20, result1
17c98     59 C9 02 F6 | 	mov	local18, local07
17c9c     03 C8 66 F0 | 	shl	local18, #3
17ca0     59 C9 82 F1 | 	sub	local18, local07
17ca4     02 C8 66 F0 | 	shl	local18, #2
17ca8     32 AD 02 F6 | 	mov	local04, objptr
17cac     15 00 00 FF 
17cb0     38 AD 06 F1 | 	add	local04, ##11064
17cb4     56 C9 02 F1 | 	add	local18, local04
17cb8     AA 2B 25 FF 
17cbc     00 B1 06 F6 | 	mov	local06, ##1247237376
17cc0     67 93 52 F6 | 	abs	arg01, local21 wc
17cc4     1F CA C6 C9 |  if_b	decod	local19, #31
17cc8     00 CA 06 36 |  if_ae	mov	local19, #0
17ccc     B4 EF B0 FD | 	call	#__system___float_fromuns
17cd0     65 7B 62 F5 | 	xor	result1, local19
17cd4     3D 95 02 F6 | 	mov	arg02, result1
17cd8     58 93 02 F6 | 	mov	arg01, local06
17cdc     AC F5 B0 FD | 	call	#__system___float_div
17ce0     3D B1 02 F6 | 	mov	local06, result1
17ce4     66 93 52 F6 | 	abs	arg01, local20 wc
17ce8     1F CA C6 C9 |  if_b	decod	local19, #31
17cec     00 CA 06 36 |  if_ae	mov	local19, #0
17cf0     90 EF B0 FD | 	call	#__system___float_fromuns
17cf4     65 7B 62 F5 | 	xor	result1, local19
17cf8     3D 93 02 F6 | 	mov	arg01, result1
17cfc     00 40 24 FF 
17d00     00 94 06 F6 | 	mov	arg02, ##1216348160
17d04     84 F5 B0 FD | 	call	#__system___float_div
17d08     3D 95 02 F6 | 	mov	arg02, result1
17d0c     58 93 02 F6 | 	mov	arg01, local06
17d10     74 F3 B0 FD | 	call	#__system___float_mul
17d14     18 C8 06 F1 | 	add	local18, #24
17d18     64 7B 62 FC | 	wrlong	result1, local18
17d1c                 | LR__2013
17d1c     77 CC 21 FF 
17d20     BE 93 06 F6 | 	mov	arg01, ##1134096318
17d24     60 95 02 F6 | 	mov	arg02, local14
17d28     60 F5 B0 FD | 	call	#__system___float_div
17d2c     3D 93 02 F6 | 	mov	arg01, result1
17d30     01 94 06 F6 | 	mov	arg02, #1
17d34     18 F8 B0 FD | 	call	#__system___float_tointeger
17d38     3D C9 02 F6 | 	mov	local18, result1
17d3c     00 00 23 FF 
17d40     00 92 06 F6 | 	mov	arg01, ##1174405120
17d44     61 95 02 F6 | 	mov	arg02, local15
17d48     3C F3 B0 FD | 	call	#__system___float_mul
17d4c     3D 93 02 F6 | 	mov	arg01, result1
17d50     01 94 06 F6 | 	mov	arg02, #1
17d54     F8 F7 B0 FD | 	call	#__system___float_tointeger
17d58     0D C6 C6 F9 | 	decod	local17, #13
17d5c     3D C7 02 F1 | 	add	local17, result1
17d60     00 3D 22 FF 
17d64     00 92 06 F6 | 	mov	arg01, ##1148846080
17d68     5D 95 02 F6 | 	mov	arg02, local11
17d6c     18 F3 B0 FD | 	call	#__system___float_mul
17d70     3D 93 02 F6 | 	mov	arg01, result1
17d74     01 94 06 F6 | 	mov	arg02, #1
17d78     D4 F7 B0 FD | 	call	#__system___float_tointeger
17d7c     3D C3 02 F6 | 	mov	local15, result1
17d80     38 00 00 FF 
17d84     30 64 06 F1 | 	add	objptr, ##28720
17d88     32 C1 02 FB | 	rdlong	local14, objptr
17d8c     38 00 00 FF 
17d90     30 64 86 F1 | 	sub	objptr, ##28720
17d94     06 B2 66 F0 | 	shl	local07, #6
17d98     59 C1 02 F1 | 	add	local14, local07
17d9c                 | ' 
17d9c                 | ' speed=round(speed_coeff/slen)
17d9c                 | ' ipan=8192+round(8192*pan)
17d9c                 | ' ivol=round(1000.0*vol)
17d9c                 | ' base2=base+64*channel
17d9c                 | ' if wave <32 then 
17d9c     20 BC 56 F2 | 	cmps	local12, #32 wc
17da0     20 00 90 3D |  if_ae	jmp	#LR__2014
17da4     60 93 02 F6 | 	mov	arg01, local14
17da8     08 92 06 F1 | 	add	arg01, #8
17dac     5E 95 02 F6 | 	mov	arg02, local12
17db0     0B 94 66 F0 | 	shl	arg02, #11
17db4     00 00 60 FF 
17db8     00 94 06 F1 | 	add	arg02, ##-1073741824
17dbc     49 95 62 FC | 	wrlong	arg02, arg01
17dc0     10 00 90 FD | 	jmp	#LR__2015
17dc4                 | LR__2014
17dc4     60 93 02 F6 | 	mov	arg01, local14
17dc8     08 92 06 F1 | 	add	arg01, #8
17dcc     00 00 E4 FF 
17dd0     49 01 68 FC | 	wrlong	##-939524096, arg01
17dd4                 | LR__2015
17dd4     60 93 02 F6 | 	mov	arg01, local14
17dd8     10 92 06 F1 | 	add	arg01, #16
17ddc     04 00 80 FF 
17de0     49 01 68 FC | 	wrlong	##2048, arg01
17de4     60 93 02 F6 | 	mov	arg01, local14
17de8     0C 92 06 F1 | 	add	arg01, #12
17dec     49 01 68 FC | 	wrlong	#0, arg01
17df0     60 93 02 F6 | 	mov	arg01, local14
17df4     14 92 06 F1 | 	add	arg01, #20
17df8     49 C3 52 FC | 	wrword	local15, arg01
17dfc     60 93 02 F6 | 	mov	arg01, local14
17e00     16 92 06 F1 | 	add	arg01, #22
17e04     49 C7 52 FC | 	wrword	local17, arg01
17e08                 | ' lpoke base2+16,2048
17e08                 | ' lpoke base2+12,0
17e08                 | ' dpoke base2+20,ivol 
17e08                 | ' dpoke base2+22,ipan 
17e08                 | ' if wave<32 then
17e08     20 BC 56 F2 | 	cmps	local12, #32 wc
17e0c     1C 00 90 3D |  if_ae	jmp	#LR__2016
17e10     60 93 02 F6 | 	mov	arg01, local14
17e14     18 92 06 F1 | 	add	arg01, #24
17e18     49 CF 52 FC | 	wrword	local21, arg01
17e1c     60 93 02 F6 | 	mov	arg01, local14
17e20     1A 92 06 F1 | 	add	arg01, #26
17e24     49 CD 52 FC | 	wrword	local20, arg01
17e28     34 00 90 FD | 	jmp	#LR__2017
17e2c                 | LR__2016
17e2c     60 CF 02 F6 | 	mov	local21, local14
17e30     18 CE 06 F1 | 	add	local21, #24
17e34     3E 2C 25 FF 
17e38     3C 92 06 F6 | 	mov	arg01, ##1247312956
17e3c     5A 95 02 F6 | 	mov	arg02, local08
17e40     48 F4 B0 FD | 	call	#__system___float_div
17e44     3D 93 02 F6 | 	mov	arg01, result1
17e48     01 94 06 F6 | 	mov	arg02, #1
17e4c     00 F7 B0 FD | 	call	#__system___float_tointeger
17e50     67 7B 52 FC | 	wrword	result1, local21
17e54     60 93 02 F6 | 	mov	arg01, local14
17e58     1A 92 06 F1 | 	add	arg01, #26
17e5c     49 01 5A FC | 	wrword	#256, arg01
17e60                 | LR__2017
17e60     60 93 02 F6 | 	mov	arg01, local14
17e64     1C 92 06 F1 | 	add	arg01, #28
17e68     49 01 68 FC | 	wrlong	#0, arg01
17e6c     60 93 02 F6 | 	mov	arg01, local14
17e70     20 92 06 F1 | 	add	arg01, #32
17e74     49 01 68 FC | 	wrlong	#0, arg01
17e78                 | ' lpoke base2+28,$0000_0000
17e78                 | ' lpoke base2+32,0 
17e78                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
17e78     08 BE 0E F2 | 	cmp	local13, #8 wz
17e7c     60 93 02 A6 |  if_e	mov	arg01, local14
17e80     24 92 06 A1 |  if_e	add	arg01, #36
17e84     49 01 68 AC |  if_e	wrlong	#0, arg01
17e88     20 00 90 AD |  if_e	jmp	#LR__2018
17e8c     60 93 02 F6 | 	mov	arg01, local14
17e90     24 92 06 F1 | 	add	arg01, #36
17e94     09 BE 66 F0 | 	shl	local13, #9
17e98     32 B7 02 F6 | 	mov	local09, objptr
17e9c     0D 00 00 FF 
17ea0     D8 B6 06 F1 | 	add	local09, ##6872
17ea4     5B BF 02 F1 | 	add	local13, local09
17ea8     49 BF 62 FC | 	wrlong	local13, arg01
17eac                 | LR__2018
17eac     60 93 02 F6 | 	mov	arg01, local14
17eb0     28 92 06 F1 | 	add	arg01, #40
17eb4     49 C9 62 FC | 	wrlong	local18, arg01
17eb8     2C C0 06 F1 | 	add	local14, #44
17ebc     60 93 02 F6 | 	mov	arg01, local14
17ec0     49 C5 62 FC | 	wrlong	local16, arg01
17ec4                 | ' lpoke base2+40,speed 
17ec4                 | ' lpoke base2+44,sus 
17ec4                 | ' if delay>0 then waitms(delay) 
17ec4     01 B8 56 F2 | 	cmps	local10, #1 wc
17ec8     5C 93 02 36 |  if_ae	mov	arg01, local10
17ecc     DC CD B0 3D |  if_ae	call	#__system___waitms
17ed0     E7 F0 03 F6 | 	mov	ptra, fp
17ed4     F2 00 A0 FD | 	call	#popregs_
17ed8                 | _do_play_ret
17ed8     2D 00 64 FD | 	ret
17edc                 | 
17edc                 | ' 
17edc                 | ' '-------------------- plot
17edc                 | ' 
17edc                 | ' sub do_plot
17edc                 | _do_plot
17edc     01 CA 05 F6 | 	mov	COUNT_, #1
17ee0     E8 00 A0 FD | 	call	#pushregs_
17ee4     20 F0 07 F1 | 	add	ptra, #32
17ee8     9C 57 BF FD | 	call	#_pop
17eec     3D 97 02 F6 | 	mov	arg03, result1
17ef0     3E 95 02 F6 | 	mov	arg02, result2
17ef4     3F 93 02 F6 | 	mov	arg01, result3
17ef8     0C CE 05 F1 | 	add	fp, #12
17efc     E7 96 62 FC | 	wrlong	arg03, fp
17f00     04 CE 05 F1 | 	add	fp, #4
17f04     E7 94 62 FC | 	wrlong	arg02, fp
17f08     04 CE 05 F1 | 	add	fp, #4
17f0c     E7 92 62 FC | 	wrlong	arg01, fp
17f10     14 CE 85 F1 | 	sub	fp, #20
17f14     70 57 BF FD | 	call	#_pop
17f18     3F 97 02 F6 | 	mov	arg03, result3
17f1c     E7 7A 62 FC | 	wrlong	result1, fp
17f20     04 CE 05 F1 | 	add	fp, #4
17f24     E7 7C 62 FC | 	wrlong	result2, fp
17f28     04 CE 05 F1 | 	add	fp, #4
17f2c     E7 96 62 FC | 	wrlong	arg03, fp
17f30     08 CE 85 F1 | 	sub	fp, #8
17f34     E7 92 02 F6 | 	mov	arg01, fp
17f38     28 59 BF FD | 	call	#_converttoint
17f3c     3D A7 02 F6 | 	mov	local01, result1
17f40     E7 92 02 F6 | 	mov	arg01, fp
17f44     0C 92 06 F1 | 	add	arg01, #12
17f48     18 59 BF FD | 	call	#_converttoint
17f4c     3D 95 02 F6 | 	mov	arg02, result1
17f50     38 00 00 FF 
17f54     4C 64 06 F1 | 	add	objptr, ##28748
17f58     32 A7 62 FC | 	wrlong	local01, objptr
17f5c     04 64 06 F1 | 	add	objptr, #4
17f60     32 95 62 FC | 	wrlong	arg02, objptr
17f64     04 64 86 F1 | 	sub	objptr, #4
17f68     32 93 02 FB | 	rdlong	arg01, objptr
17f6c     04 64 86 F1 | 	sub	objptr, #4
17f70     32 97 02 FB | 	rdlong	arg03, objptr
17f74     38 00 00 FF 
17f78     48 64 86 F1 | 	sub	objptr, ##28744
17f7c     1C A1 B0 FD | 	call	#_hg010b_spin2_putpixel
17f80     E7 F0 03 F6 | 	mov	ptra, fp
17f84     F2 00 A0 FD | 	call	#popregs_
17f88                 | _do_plot_ret
17f88     2D 00 64 FD | 	ret
17f8c                 | 
17f8c                 | ' 
17f8c                 | ' '-------------------- poke
17f8c                 | ' 
17f8c                 | ' sub do_poke
17f8c                 | _do_poke
17f8c     02 CA 05 F6 | 	mov	COUNT_, #2
17f90     E8 00 A0 FD | 	call	#pushregs_
17f94     20 F0 07 F1 | 	add	ptra, #32
17f98     EC 56 BF FD | 	call	#_pop
17f9c     3D 95 02 F6 | 	mov	arg02, result1
17fa0     3E 93 02 F6 | 	mov	arg01, result2
17fa4     3F A7 02 F6 | 	mov	local01, result3
17fa8     E7 94 62 FC | 	wrlong	arg02, fp
17fac     04 CE 05 F1 | 	add	fp, #4
17fb0     E7 92 62 FC | 	wrlong	arg01, fp
17fb4     04 CE 05 F1 | 	add	fp, #4
17fb8     E7 A6 62 FC | 	wrlong	local01, fp
17fbc     08 CE 85 F1 | 	sub	fp, #8
17fc0     C4 56 BF FD | 	call	#_pop
17fc4     3F A7 02 F6 | 	mov	local01, result3
17fc8     0C CE 05 F1 | 	add	fp, #12
17fcc     E7 7A 62 FC | 	wrlong	result1, fp
17fd0     04 CE 05 F1 | 	add	fp, #4
17fd4     E7 7C 62 FC | 	wrlong	result2, fp
17fd8     04 CE 05 F1 | 	add	fp, #4
17fdc     E7 A6 62 FC | 	wrlong	local01, fp
17fe0     08 CE 85 F1 | 	sub	fp, #8
17fe4     E7 92 02 F6 | 	mov	arg01, fp
17fe8     0C CE 85 F1 | 	sub	fp, #12
17fec     74 58 BF FD | 	call	#_converttoint
17ff0     3D A7 02 F6 | 	mov	local01, result1
17ff4     E7 92 02 F6 | 	mov	arg01, fp
17ff8     68 58 BF FD | 	call	#_converttoint
17ffc     3D A9 02 F6 | 	mov	local02, result1
18000                 | ' t1=pop() 'value
18000                 | ' t2=pop() 
18000                 | ' a=converttoint(t2) : v=converttoint(t1)
18000                 | ' if a<$80000 then poke a,v else pspoke a,v
18000     00 04 00 FF 
18004     00 A6 16 F2 | 	cmp	local01, ##524288 wc
18008     53 A9 42 CC |  if_b	wrbyte	local02, local01
1800c     53 93 02 36 |  if_ae	mov	arg01, local01
18010     54 95 02 36 |  if_ae	mov	arg02, local02
18014     50 92 B0 3D |  if_ae	call	#_pspoke
18018     E7 F0 03 F6 | 	mov	ptra, fp
1801c     F2 00 A0 FD | 	call	#popregs_
18020                 | _do_poke_ret
18020     2D 00 64 FD | 	ret
18024                 | 
18024                 | ' 
18024                 | ' '-------------------- pop
18024                 | ' 
18024                 | ' sub do_pop()
18024                 | _do_pop
18024                 | ' if gosubtop>0 then  gosubtop -=1 
18024     51 00 00 FF 
18028     54 65 06 F1 | 	add	objptr, ##41812
1802c     32 81 02 FB | 	rdlong	_var01, objptr
18030     51 00 00 FF 
18034     54 65 86 F1 | 	sub	objptr, ##41812
18038     01 80 56 F2 | 	cmps	_var01, #1 wc
1803c     51 00 00 3F 
18040     54 65 06 31 |  if_ae	add	objptr, ##41812
18044     32 81 02 3B |  if_ae	rdlong	_var01, objptr
18048     01 80 86 31 |  if_ae	sub	_var01, #1
1804c     32 81 62 3C |  if_ae	wrlong	_var01, objptr
18050     51 00 00 3F 
18054     54 65 86 31 |  if_ae	sub	objptr, ##41812
18058                 | _do_pop_ret
18058     2D 00 64 FD | 	ret
1805c                 | 
1805c                 | ' 
1805c                 | ' '-------------------- position
1805c                 | ' 
1805c                 | ' sub do_position
1805c                 | _do_position
1805c     01 CA 05 F6 | 	mov	COUNT_, #1
18060     E8 00 A0 FD | 	call	#pushregs_
18064     18 F0 07 F1 | 	add	ptra, #24
18068     1C 56 BF FD | 	call	#_pop
1806c     3D 95 02 F6 | 	mov	arg02, result1
18070     3E 93 02 F6 | 	mov	arg01, result2
18074     3F A7 02 F6 | 	mov	local01, result3
18078     E7 94 62 FC | 	wrlong	arg02, fp
1807c     04 CE 05 F1 | 	add	fp, #4
18080     E7 92 62 FC | 	wrlong	arg01, fp
18084     04 CE 05 F1 | 	add	fp, #4
18088     E7 A6 62 FC | 	wrlong	local01, fp
1808c     08 CE 85 F1 | 	sub	fp, #8
18090     F4 55 BF FD | 	call	#_pop
18094     3F A7 02 F6 | 	mov	local01, result3
18098     0C CE 05 F1 | 	add	fp, #12
1809c     E7 7A 62 FC | 	wrlong	result1, fp
180a0     04 CE 05 F1 | 	add	fp, #4
180a4     E7 7C 62 FC | 	wrlong	result2, fp
180a8     04 CE 05 F1 | 	add	fp, #4
180ac     E7 A6 62 FC | 	wrlong	local01, fp
180b0     08 CE 85 F1 | 	sub	fp, #8
180b4     E7 92 02 F6 | 	mov	arg01, fp
180b8     0C CE 85 F1 | 	sub	fp, #12
180bc     A4 57 BF FD | 	call	#_converttoint
180c0     3D A7 02 F6 | 	mov	local01, result1
180c4     E7 92 02 F6 | 	mov	arg01, fp
180c8     98 57 BF FD | 	call	#_converttoint
180cc     3D 95 02 F6 | 	mov	arg02, result1
180d0     53 93 02 F6 | 	mov	arg01, local01
180d4     C4 AB B0 FD | 	call	#_hg010b_spin2_setcursorpos
180d8     E7 F0 03 F6 | 	mov	ptra, fp
180dc     F2 00 A0 FD | 	call	#popregs_
180e0                 | _do_position_ret
180e0     2D 00 64 FD | 	ret
180e4                 | 
180e4                 | ' 
180e4                 | ' '-------------------- print
180e4                 | ' 
180e4                 | ' sub do_print  
180e4                 | _do_print
180e4     0B CA 05 F6 | 	mov	COUNT_, #11
180e8     E8 00 A0 FD | 	call	#pushregs_
180ec     00 AC 06 F6 | 	mov	local04, #0
180f0     94 55 BF FD | 	call	#_pop
180f4     3D AF 02 F6 | 	mov	local05, result1
180f8     3E B1 02 F6 | 	mov	local06, result2
180fc     3F B3 02 F6 | 	mov	local07, result3
18100     57 A7 02 F6 | 	mov	local01, local05
18104     58 A9 02 F6 | 	mov	local02, local06
18108     59 AB 02 F6 | 	mov	local03, local07
1810c                 | '  
1810c                 | ' r=0
1810c                 | ' t1=pop() 
1810c                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
1810c     21 AA 0E F2 | 	cmp	local03, #33 wz
18110     22 AA 0E 52 |  if_ne	cmp	local03, #34 wz
18114     20 00 90 5D |  if_ne	jmp	#LR__2020
18118     55 AD 02 F6 | 	mov	local04, local03
1811c     68 55 BF FD | 	call	#_pop
18120     3D AF 02 F6 | 	mov	local05, result1
18124     3E B1 02 F6 | 	mov	local06, result2
18128     3F B3 02 F6 | 	mov	local07, result3
1812c     57 A7 02 F6 | 	mov	local01, local05
18130     58 A9 02 F6 | 	mov	local02, local06
18134     59 AB 02 F6 | 	mov	local03, local07
18138                 | LR__2020
18138                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
18138     20 AA 0E F2 | 	cmp	local03, #32 wz
1813c     55 AD 02 A6 |  if_e	mov	local04, local03
18140                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
18140     FF AA 0E F2 | 	cmp	local03, #255 wz
18144     10 00 90 5D |  if_ne	jmp	#LR__2021
18148     53 93 02 F6 | 	mov	arg01, local01
1814c     00 94 06 F6 | 	mov	arg02, #0
18150     E8 8E B0 FD | 	call	#_printerror
18154     D4 04 90 FD | 	jmp	#LR__2040
18158                 | LR__2021
18158                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
18158     2B AA 0E F2 | 	cmp	local03, #43 wz
1815c     14 00 90 5D |  if_ne	jmp	#LR__2022
18160     53 93 02 F6 | 	mov	arg01, local01
18164     90 56 BF FD | 	call	#_convertstring
18168     3D AF 02 F6 | 	mov	local05, result1
1816c     57 A7 02 F6 | 	mov	local01, local05
18170     1F AA 06 F6 | 	mov	local03, #31
18174                 | LR__2022
18174                 | ' 
18174                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
18174     2C AA 0E F2 | 	cmp	local03, #44 wz
18178     80 00 90 5D |  if_ne	jmp	#LR__2023
1817c     00 92 06 F6 | 	mov	arg01, #0
18180     B8 1D B1 FD | 	call	#__system___getiolock_0622
18184     3D 93 02 F6 | 	mov	arg01, result1
18188     2C C8 B0 FD | 	call	#__system___lockmem
1818c     98 01 00 FF 
18190     98 94 06 F6 | 	mov	arg02, ##@LR__6064
18194     00 92 06 F6 | 	mov	arg01, #0
18198     00 96 06 F6 | 	mov	arg03, #0
1819c     0C D5 B0 FD | 	call	#__system___basic_print_string
181a0     0A B4 06 F6 | 	mov	local08, #10
181a4     00 92 06 F6 | 	mov	arg01, #0
181a8     53 95 02 F6 | 	mov	arg02, local01
181ac     00 96 06 F6 | 	mov	arg03, #0
181b0     0A 98 06 F6 | 	mov	arg04, #10
181b4     38 D5 B0 FD | 	call	#__system___basic_print_integer
181b8     3D B7 02 F6 | 	mov	local09, result1
181bc     00 92 06 F6 | 	mov	arg01, #0
181c0     0A 94 06 F6 | 	mov	arg02, #10
181c4     00 96 06 F6 | 	mov	arg03, #0
181c8     88 D4 B0 FD | 	call	#__system___basic_print_char
181cc     01 B8 06 F6 | 	mov	local10, #1
181d0     00 92 06 F6 | 	mov	arg01, #0
181d4     64 1D B1 FD | 	call	#__system___getiolock_0622
181d8     3D 01 68 FC | 	wrlong	#0, result1
181dc     00 BA 06 F6 | 	mov	local11, #0
181e0     A4 54 BF FD | 	call	#_pop
181e4     3D AF 02 F6 | 	mov	local05, result1
181e8     3E B1 02 F6 | 	mov	local06, result2
181ec     3F B3 02 F6 | 	mov	local07, result3
181f0     57 A7 02 F6 | 	mov	local01, local05
181f4     58 A9 02 F6 | 	mov	local02, local06
181f8     59 AB 02 F6 | 	mov	local03, local07
181fc                 | LR__2023
181fc                 | ' 
181fc                 | ' if r=print_mod_comma  then
181fc     21 AC 0E F2 | 	cmp	local04, #33 wz
18200     AC 01 90 5D |  if_ne	jmp	#LR__2028
18204                 | '   if t1.result_type=result_int then print t1.result.iresult,
18204     1C AA 0E F2 | 	cmp	local03, #28 wz
18208     64 00 90 5D |  if_ne	jmp	#LR__2024
1820c     00 92 06 F6 | 	mov	arg01, #0
18210     28 1D B1 FD | 	call	#__system___getiolock_0622
18214     3D 93 02 F6 | 	mov	arg01, result1
18218     9C C7 B0 FD | 	call	#__system___lockmem
1821c     00 B0 06 F6 | 	mov	local06, #0
18220     00 92 06 F6 | 	mov	arg01, #0
18224     53 95 02 F6 | 	mov	arg02, local01
18228     00 96 06 F6 | 	mov	arg03, #0
1822c     0A 98 06 F6 | 	mov	arg04, #10
18230     BC D4 B0 FD | 	call	#__system___basic_print_integer
18234     3D B3 02 F6 | 	mov	local07, result1
18238     58 AF 02 F6 | 	mov	local05, local06
1823c     59 AF 02 F1 | 	add	local05, local07
18240     00 BA 06 F6 | 	mov	local11, #0
18244     00 92 06 F6 | 	mov	arg01, #0
18248     09 94 06 F6 | 	mov	arg02, #9
1824c     00 96 06 F6 | 	mov	arg03, #0
18250     00 D4 B0 FD | 	call	#__system___basic_print_char
18254     3D B7 02 F6 | 	mov	local09, result1
18258     3D AF 02 F1 | 	add	local05, result1
1825c     00 92 06 F6 | 	mov	arg01, #0
18260     D8 1C B1 FD | 	call	#__system___getiolock_0622
18264     3D 01 68 FC | 	wrlong	#0, result1
18268     00 7A 06 F6 | 	mov	result1, #0
1826c     00 B8 06 F6 | 	mov	local10, #0
18270                 | LR__2024
18270                 | '   if t1.result_type=result_uint then print t1.result.uresult,
18270     1D AA 0E F2 | 	cmp	local03, #29 wz
18274     64 00 90 5D |  if_ne	jmp	#LR__2025
18278     00 92 06 F6 | 	mov	arg01, #0
1827c     BC 1C B1 FD | 	call	#__system___getiolock_0622
18280     3D 93 02 F6 | 	mov	arg01, result1
18284     30 C7 B0 FD | 	call	#__system___lockmem
18288     00 B0 06 F6 | 	mov	local06, #0
1828c     00 92 06 F6 | 	mov	arg01, #0
18290     53 95 02 F6 | 	mov	arg02, local01
18294     00 96 06 F6 | 	mov	arg03, #0
18298     0A 98 06 F6 | 	mov	arg04, #10
1829c     90 D4 B0 FD | 	call	#__system___basic_print_unsigned
182a0     3D B3 02 F6 | 	mov	local07, result1
182a4     58 AF 02 F6 | 	mov	local05, local06
182a8     59 AF 02 F1 | 	add	local05, local07
182ac     00 BA 06 F6 | 	mov	local11, #0
182b0     00 92 06 F6 | 	mov	arg01, #0
182b4     09 94 06 F6 | 	mov	arg02, #9
182b8     00 96 06 F6 | 	mov	arg03, #0
182bc     94 D3 B0 FD | 	call	#__system___basic_print_char
182c0     3D B7 02 F6 | 	mov	local09, result1
182c4     3D AF 02 F1 | 	add	local05, result1
182c8     00 92 06 F6 | 	mov	arg01, #0
182cc     6C 1C B1 FD | 	call	#__system___getiolock_0622
182d0     3D 01 68 FC | 	wrlong	#0, result1
182d4     00 7A 06 F6 | 	mov	result1, #0
182d8     00 B8 06 F6 | 	mov	local10, #0
182dc                 | LR__2025
182dc                 | '   if t1.result_type=result_float then print t1.result.fresult,
182dc     1E AA 0E F2 | 	cmp	local03, #30 wz
182e0     64 00 90 5D |  if_ne	jmp	#LR__2026
182e4     00 92 06 F6 | 	mov	arg01, #0
182e8     50 1C B1 FD | 	call	#__system___getiolock_0622
182ec     3D 93 02 F6 | 	mov	arg01, result1
182f0     C4 C6 B0 FD | 	call	#__system___lockmem
182f4     00 B0 06 F6 | 	mov	local06, #0
182f8     00 92 06 F6 | 	mov	arg01, #0
182fc     53 95 02 F6 | 	mov	arg02, local01
18300     00 96 06 F6 | 	mov	arg03, #0
18304     23 98 06 F6 | 	mov	arg04, #35
18308     A0 F3 B0 FD | 	call	#__system___basic_print_float
1830c     3D B3 02 F6 | 	mov	local07, result1
18310     58 AF 02 F6 | 	mov	local05, local06
18314     59 AF 02 F1 | 	add	local05, local07
18318     00 BA 06 F6 | 	mov	local11, #0
1831c     00 92 06 F6 | 	mov	arg01, #0
18320     09 94 06 F6 | 	mov	arg02, #9
18324     00 96 06 F6 | 	mov	arg03, #0
18328     28 D3 B0 FD | 	call	#__system___basic_print_char
1832c     3D B7 02 F6 | 	mov	local09, result1
18330     3D AF 02 F1 | 	add	local05, result1
18334     00 92 06 F6 | 	mov	arg01, #0
18338     00 1C B1 FD | 	call	#__system___getiolock_0622
1833c     3D 01 68 FC | 	wrlong	#0, result1
18340     00 7A 06 F6 | 	mov	result1, #0
18344     00 B8 06 F6 | 	mov	local10, #0
18348                 | LR__2026
18348                 | '   if t1.result_type=result_string then print t1.result.sresult,
18348     1F AA 0E F2 | 	cmp	local03, #31 wz
1834c     60 00 90 5D |  if_ne	jmp	#LR__2027
18350     00 92 06 F6 | 	mov	arg01, #0
18354     E4 1B B1 FD | 	call	#__system___getiolock_0622
18358     3D 93 02 F6 | 	mov	arg01, result1
1835c     58 C6 B0 FD | 	call	#__system___lockmem
18360     00 B0 06 F6 | 	mov	local06, #0
18364     00 92 06 F6 | 	mov	arg01, #0
18368     53 95 02 F6 | 	mov	arg02, local01
1836c     00 96 06 F6 | 	mov	arg03, #0
18370     38 D3 B0 FD | 	call	#__system___basic_print_string
18374     3D B3 02 F6 | 	mov	local07, result1
18378     58 AF 02 F6 | 	mov	local05, local06
1837c     59 AF 02 F1 | 	add	local05, local07
18380     00 BA 06 F6 | 	mov	local11, #0
18384     00 92 06 F6 | 	mov	arg01, #0
18388     09 94 06 F6 | 	mov	arg02, #9
1838c     00 96 06 F6 | 	mov	arg03, #0
18390     C0 D2 B0 FD | 	call	#__system___basic_print_char
18394     3D B7 02 F6 | 	mov	local09, result1
18398     3D AF 02 F1 | 	add	local05, result1
1839c     00 92 06 F6 | 	mov	arg01, #0
183a0     98 1B B1 FD | 	call	#__system___getiolock_0622
183a4     3D 01 68 FC | 	wrlong	#0, result1
183a8     00 7A 06 F6 | 	mov	result1, #0
183ac     00 B8 06 F6 | 	mov	local10, #0
183b0                 | LR__2027
183b0                 | LR__2028
183b0                 | ' if r=print_mod_semicolon then 
183b0     22 AC 0E F2 | 	cmp	local04, #34 wz
183b4     1C 01 90 5D |  if_ne	jmp	#LR__2033
183b8                 | '   if t1.result_type=result_int then print t1.result.iresult;
183b8     1C AA 0E F2 | 	cmp	local03, #28 wz
183bc     50 00 90 5D |  if_ne	jmp	#LR__2029
183c0     00 92 06 F6 | 	mov	arg01, #0
183c4     74 1B B1 FD | 	call	#__system___getiolock_0622
183c8     3D 93 02 F6 | 	mov	arg01, result1
183cc     E8 C5 B0 FD | 	call	#__system___lockmem
183d0     00 B0 06 F6 | 	mov	local06, #0
183d4     00 B8 06 F6 | 	mov	local10, #0
183d8     0A BA 06 F6 | 	mov	local11, #10
183dc     00 92 06 F6 | 	mov	arg01, #0
183e0     53 95 02 F6 | 	mov	arg02, local01
183e4     00 96 06 F6 | 	mov	arg03, #0
183e8     0A 98 06 F6 | 	mov	arg04, #10
183ec     00 D3 B0 FD | 	call	#__system___basic_print_integer
183f0     3D B3 02 F6 | 	mov	local07, result1
183f4     58 AF 02 F6 | 	mov	local05, local06
183f8     59 AF 02 F1 | 	add	local05, local07
183fc     00 92 06 F6 | 	mov	arg01, #0
18400     38 1B B1 FD | 	call	#__system___getiolock_0622
18404     3D 01 68 FC | 	wrlong	#0, result1
18408     00 7A 06 F6 | 	mov	result1, #0
1840c     00 B6 06 F6 | 	mov	local09, #0
18410                 | LR__2029
18410                 | '   if t1.result_type=result_uint then print t1.result.uresult;
18410     1D AA 0E F2 | 	cmp	local03, #29 wz
18414     50 00 90 5D |  if_ne	jmp	#LR__2030
18418     00 92 06 F6 | 	mov	arg01, #0
1841c     1C 1B B1 FD | 	call	#__system___getiolock_0622
18420     3D 93 02 F6 | 	mov	arg01, result1
18424     90 C5 B0 FD | 	call	#__system___lockmem
18428     00 B0 06 F6 | 	mov	local06, #0
1842c     00 B8 06 F6 | 	mov	local10, #0
18430     0A BA 06 F6 | 	mov	local11, #10
18434     00 92 06 F6 | 	mov	arg01, #0
18438     53 95 02 F6 | 	mov	arg02, local01
1843c     00 96 06 F6 | 	mov	arg03, #0
18440     0A 98 06 F6 | 	mov	arg04, #10
18444     E8 D2 B0 FD | 	call	#__system___basic_print_unsigned
18448     3D B3 02 F6 | 	mov	local07, result1
1844c     58 AF 02 F6 | 	mov	local05, local06
18450     59 AF 02 F1 | 	add	local05, local07
18454     00 92 06 F6 | 	mov	arg01, #0
18458     E0 1A B1 FD | 	call	#__system___getiolock_0622
1845c     3D 01 68 FC | 	wrlong	#0, result1
18460     00 7A 06 F6 | 	mov	result1, #0
18464     00 B6 06 F6 | 	mov	local09, #0
18468                 | LR__2030
18468                 | '   if t1.result_type=result_float then print t1.result.fresult;
18468     1E AA 0E F2 | 	cmp	local03, #30 wz
1846c     30 00 90 5D |  if_ne	jmp	#LR__2031
18470     00 92 06 F6 | 	mov	arg01, #0
18474     C4 1A B1 FD | 	call	#__system___getiolock_0622
18478     3D 93 02 F6 | 	mov	arg01, result1
1847c     38 C5 B0 FD | 	call	#__system___lockmem
18480     00 92 06 F6 | 	mov	arg01, #0
18484     53 95 02 F6 | 	mov	arg02, local01
18488     00 96 06 F6 | 	mov	arg03, #0
1848c     23 98 06 F6 | 	mov	arg04, #35
18490     18 F2 B0 FD | 	call	#__system___basic_print_float
18494     00 92 06 F6 | 	mov	arg01, #0
18498     A0 1A B1 FD | 	call	#__system___getiolock_0622
1849c     3D 01 68 FC | 	wrlong	#0, result1
184a0                 | LR__2031
184a0                 | '   if t1.result_type=result_string then print t1.result.sresult;
184a0     1F AA 0E F2 | 	cmp	local03, #31 wz
184a4     2C 00 90 5D |  if_ne	jmp	#LR__2032
184a8     00 92 06 F6 | 	mov	arg01, #0
184ac     8C 1A B1 FD | 	call	#__system___getiolock_0622
184b0     3D 93 02 F6 | 	mov	arg01, result1
184b4     00 C5 B0 FD | 	call	#__system___lockmem
184b8     00 92 06 F6 | 	mov	arg01, #0
184bc     53 95 02 F6 | 	mov	arg02, local01
184c0     00 96 06 F6 | 	mov	arg03, #0
184c4     E4 D1 B0 FD | 	call	#__system___basic_print_string
184c8     00 92 06 F6 | 	mov	arg01, #0
184cc     6C 1A B1 FD | 	call	#__system___getiolock_0622
184d0     3D 01 68 FC | 	wrlong	#0, result1
184d4                 | LR__2032
184d4                 | LR__2033
184d4                 | ' if r=0 then 
184d4     00 AC 0E F2 | 	cmp	local04, #0 wz
184d8     1C 01 90 5D |  if_ne	jmp	#LR__2038
184dc                 | '   if t1.result_type=result_int then print t1.result.iresult
184dc     1C AA 0E F2 | 	cmp	local03, #28 wz
184e0     40 00 90 5D |  if_ne	jmp	#LR__2034
184e4     00 92 06 F6 | 	mov	arg01, #0
184e8     50 1A B1 FD | 	call	#__system___getiolock_0622
184ec     3D 93 02 F6 | 	mov	arg01, result1
184f0     C4 C4 B0 FD | 	call	#__system___lockmem
184f4     00 92 06 F6 | 	mov	arg01, #0
184f8     53 95 02 F6 | 	mov	arg02, local01
184fc     00 96 06 F6 | 	mov	arg03, #0
18500     0A 98 06 F6 | 	mov	arg04, #10
18504     E8 D1 B0 FD | 	call	#__system___basic_print_integer
18508     00 92 06 F6 | 	mov	arg01, #0
1850c     0A 94 06 F6 | 	mov	arg02, #10
18510     00 96 06 F6 | 	mov	arg03, #0
18514     3C D1 B0 FD | 	call	#__system___basic_print_char
18518     00 92 06 F6 | 	mov	arg01, #0
1851c     1C 1A B1 FD | 	call	#__system___getiolock_0622
18520     3D 01 68 FC | 	wrlong	#0, result1
18524                 | LR__2034
18524                 | '   if t1.result_type=result_uint then print t1.result.uresult
18524     1D AA 0E F2 | 	cmp	local03, #29 wz
18528     40 00 90 5D |  if_ne	jmp	#LR__2035
1852c     00 92 06 F6 | 	mov	arg01, #0
18530     08 1A B1 FD | 	call	#__system___getiolock_0622
18534     3D 93 02 F6 | 	mov	arg01, result1
18538     7C C4 B0 FD | 	call	#__system___lockmem
1853c     00 92 06 F6 | 	mov	arg01, #0
18540     53 95 02 F6 | 	mov	arg02, local01
18544     00 96 06 F6 | 	mov	arg03, #0
18548     0A 98 06 F6 | 	mov	arg04, #10
1854c     E0 D1 B0 FD | 	call	#__system___basic_print_unsigned
18550     00 92 06 F6 | 	mov	arg01, #0
18554     0A 94 06 F6 | 	mov	arg02, #10
18558     00 96 06 F6 | 	mov	arg03, #0
1855c     F4 D0 B0 FD | 	call	#__system___basic_print_char
18560     00 92 06 F6 | 	mov	arg01, #0
18564     D4 19 B1 FD | 	call	#__system___getiolock_0622
18568     3D 01 68 FC | 	wrlong	#0, result1
1856c                 | LR__2035
1856c                 | '   if t1.result_type=result_float then print t1.result.fresult
1856c     1E AA 0E F2 | 	cmp	local03, #30 wz
18570     40 00 90 5D |  if_ne	jmp	#LR__2036
18574     00 92 06 F6 | 	mov	arg01, #0
18578     C0 19 B1 FD | 	call	#__system___getiolock_0622
1857c     3D 93 02 F6 | 	mov	arg01, result1
18580     34 C4 B0 FD | 	call	#__system___lockmem
18584     00 92 06 F6 | 	mov	arg01, #0
18588     53 95 02 F6 | 	mov	arg02, local01
1858c     00 96 06 F6 | 	mov	arg03, #0
18590     23 98 06 F6 | 	mov	arg04, #35
18594     14 F1 B0 FD | 	call	#__system___basic_print_float
18598     00 92 06 F6 | 	mov	arg01, #0
1859c     0A 94 06 F6 | 	mov	arg02, #10
185a0     00 96 06 F6 | 	mov	arg03, #0
185a4     AC D0 B0 FD | 	call	#__system___basic_print_char
185a8     00 92 06 F6 | 	mov	arg01, #0
185ac     8C 19 B1 FD | 	call	#__system___getiolock_0622
185b0     3D 01 68 FC | 	wrlong	#0, result1
185b4                 | LR__2036
185b4                 | '   if t1.result_type=result_string then print t1.result.sresult
185b4     1F AA 0E F2 | 	cmp	local03, #31 wz
185b8     3C 00 90 5D |  if_ne	jmp	#LR__2037
185bc     00 92 06 F6 | 	mov	arg01, #0
185c0     78 19 B1 FD | 	call	#__system___getiolock_0622
185c4     3D 93 02 F6 | 	mov	arg01, result1
185c8     EC C3 B0 FD | 	call	#__system___lockmem
185cc     00 92 06 F6 | 	mov	arg01, #0
185d0     53 95 02 F6 | 	mov	arg02, local01
185d4     00 96 06 F6 | 	mov	arg03, #0
185d8     D0 D0 B0 FD | 	call	#__system___basic_print_string
185dc     00 92 06 F6 | 	mov	arg01, #0
185e0     0A 94 06 F6 | 	mov	arg02, #10
185e4     00 96 06 F6 | 	mov	arg03, #0
185e8     68 D0 B0 FD | 	call	#__system___basic_print_char
185ec     00 92 06 F6 | 	mov	arg01, #0
185f0     48 19 B1 FD | 	call	#__system___getiolock_0622
185f4     3D 01 68 FC | 	wrlong	#0, result1
185f8                 | LR__2037
185f8                 | LR__2038
185f8                 | ' if r=print_mod_empty then print
185f8     20 AC 0E F2 | 	cmp	local04, #32 wz
185fc     2C 00 90 5D |  if_ne	jmp	#LR__2039
18600     00 92 06 F6 | 	mov	arg01, #0
18604     34 19 B1 FD | 	call	#__system___getiolock_0622
18608     3D 93 02 F6 | 	mov	arg01, result1
1860c     A8 C3 B0 FD | 	call	#__system___lockmem
18610     00 92 06 F6 | 	mov	arg01, #0
18614     0A 94 06 F6 | 	mov	arg02, #10
18618     00 96 06 F6 | 	mov	arg03, #0
1861c     34 D0 B0 FD | 	call	#__system___basic_print_char
18620     00 92 06 F6 | 	mov	arg01, #0
18624     14 19 B1 FD | 	call	#__system___getiolock_0622
18628     3D 01 68 FC | 	wrlong	#0, result1
1862c                 | LR__2039
1862c                 | LR__2040
1862c     E7 F0 03 F6 | 	mov	ptra, fp
18630     F2 00 A0 FD | 	call	#popregs_
18634                 | _do_print_ret
18634     2D 00 64 FD | 	ret
18638                 | 
18638                 | ' 
18638                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
18638                 | ' 
18638                 | ' sub do_push
18638                 | _do_push
18638                 | ' if stackpointer<maxstack then 
18638     44 00 00 FF 
1863c     78 64 06 F1 | 	add	objptr, ##34936
18640     32 81 02 FB | 	rdlong	_var01, objptr
18644     44 00 00 FF 
18648     78 64 86 F1 | 	sub	objptr, ##34936
1864c     01 00 00 FF 
18650     00 80 56 F2 | 	cmps	_var01, ##512 wc
18654     F8 00 90 3D |  if_ae	jmp	#LR__2050
18658     4B 00 00 FF 
1865c     A0 64 06 F1 | 	add	objptr, ##38560
18660     32 83 02 FB | 	rdlong	_var02, objptr
18664     41 85 02 F6 | 	mov	_var03, _var02
18668     01 84 66 F0 | 	shl	_var03, #1
1866c     41 85 02 F1 | 	add	_var03, _var02
18670     02 84 66 F0 | 	shl	_var03, #2
18674     03 00 00 FF 
18678     04 64 86 F1 | 	sub	objptr, ##1540
1867c     32 85 02 F1 | 	add	_var03, objptr
18680     42 81 02 FB | 	rdlong	_var01, _var03
18684     04 84 06 F1 | 	add	_var03, #4
18688     42 87 02 FB | 	rdlong	_var04, _var03
1868c     41 85 02 F6 | 	mov	_var03, _var02
18690     01 84 66 F0 | 	shl	_var03, #1
18694     41 85 02 F1 | 	add	_var03, _var02
18698     02 84 66 F0 | 	shl	_var03, #2
1869c     32 85 02 F1 | 	add	_var03, objptr
186a0     08 84 06 F1 | 	add	_var03, #8
186a4     42 83 02 FB | 	rdlong	_var02, _var03
186a8     04 00 00 FF 
186ac     24 64 86 F1 | 	sub	objptr, ##2084
186b0     32 85 02 FB | 	rdlong	_var03, objptr
186b4     42 89 02 F6 | 	mov	_var05, _var03
186b8     01 88 66 F0 | 	shl	_var05, #1
186bc     42 89 02 F1 | 	add	_var05, _var03
186c0     02 88 66 F0 | 	shl	_var05, #2
186c4     0C 00 00 FF 
186c8     0C 64 86 F1 | 	sub	objptr, ##6156
186cc     32 89 02 F1 | 	add	_var05, objptr
186d0     44 81 62 FC | 	wrlong	_var01, _var05
186d4     0C 00 00 FF 
186d8     0C 64 06 F1 | 	add	objptr, ##6156
186dc     32 89 02 FB | 	rdlong	_var05, objptr
186e0     44 85 02 F6 | 	mov	_var03, _var05
186e4     01 84 66 F0 | 	shl	_var03, #1
186e8     44 85 02 F1 | 	add	_var03, _var05
186ec     02 84 66 F0 | 	shl	_var03, #2
186f0     0C 00 00 FF 
186f4     0C 64 86 F1 | 	sub	objptr, ##6156
186f8     32 85 02 F1 | 	add	_var03, objptr
186fc     04 84 06 F1 | 	add	_var03, #4
18700     42 87 62 FC | 	wrlong	_var04, _var03
18704     0C 00 00 FF 
18708     0C 64 06 F1 | 	add	objptr, ##6156
1870c     32 89 02 FB | 	rdlong	_var05, objptr
18710     44 87 02 F6 | 	mov	_var04, _var05
18714     01 86 66 F0 | 	shl	_var04, #1
18718     44 87 02 F1 | 	add	_var04, _var05
1871c     02 86 66 F0 | 	shl	_var04, #2
18720     0C 00 00 FF 
18724     0C 64 86 F1 | 	sub	objptr, ##6156
18728     32 87 02 F1 | 	add	_var04, objptr
1872c     08 86 06 F1 | 	add	_var04, #8
18730     43 83 62 FC | 	wrlong	_var02, _var04
18734     0C 00 00 FF 
18738     0C 64 06 F1 | 	add	objptr, ##6156
1873c     32 81 02 FB | 	rdlong	_var01, objptr
18740     01 80 06 F1 | 	add	_var01, #1
18744     32 81 62 FC | 	wrlong	_var01, objptr
18748     44 00 00 FF 
1874c     78 64 86 F1 | 	sub	objptr, ##34936
18750                 | LR__2050
18750                 | _do_push_ret
18750     2D 00 64 FD | 	ret
18754                 | 
18754                 | ' 
18754                 | ' '-------------------- put
18754                 | ' 
18754                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
18754                 | _do_put
18754     07 CA 05 F6 | 	mov	COUNT_, #7
18758     E8 00 A0 FD | 	call	#pushregs_
1875c     28 F0 07 F1 | 	add	ptra, #40
18760     4B 00 00 FF 
18764     A0 64 06 F1 | 	add	objptr, ##38560
18768     32 9B 02 FB | 	rdlong	arg05, objptr
1876c     4D 99 02 F6 | 	mov	arg04, arg05
18770     01 98 66 F0 | 	shl	arg04, #1
18774     4D 99 02 F1 | 	add	arg04, arg05
18778     02 98 66 F0 | 	shl	arg04, #2
1877c     03 00 00 FF 
18780     04 64 86 F1 | 	sub	objptr, ##1540
18784     32 99 02 F1 | 	add	arg04, objptr
18788     4C A7 02 FB | 	rdlong	local01, arg04
1878c                 | ' 
1878c                 | ' numpar=compiledline(lineptr_e).result.uresult
1878c                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
1878c     04 A6 0E F2 | 	cmp	local01, #4 wz
18790     48 00 00 FF 
18794     9C 64 86 F1 | 	sub	objptr, ##37020
18798     48 00 90 5D |  if_ne	jmp	#LR__2060
1879c     E8 4E BF FD | 	call	#_pop
187a0     3F 9B 02 F6 | 	mov	arg05, result3
187a4     1C CE 05 F1 | 	add	fp, #28
187a8     E7 7A 62 FC | 	wrlong	result1, fp
187ac     04 CE 05 F1 | 	add	fp, #4
187b0     E7 7C 62 FC | 	wrlong	result2, fp
187b4     04 CE 05 F1 | 	add	fp, #4
187b8     E7 9A 62 FC | 	wrlong	arg05, fp
187bc     08 CE 85 F1 | 	sub	fp, #8
187c0     E7 92 02 F6 | 	mov	arg01, fp
187c4     1C CE 85 F1 | 	sub	fp, #28
187c8     98 50 BF FD | 	call	#_converttoint
187cc     53 00 00 FF 
187d0     64 65 06 F1 | 	add	objptr, ##42852
187d4     32 7B 62 FC | 	wrlong	result1, objptr
187d8     53 00 00 FF 
187dc     64 65 86 F1 | 	sub	objptr, ##42852
187e0     18 00 90 FD | 	jmp	#LR__2061
187e4                 | LR__2060
187e4     53 00 00 FF 
187e8     64 65 06 F1 | 	add	objptr, ##42852
187ec     FF FF FF FF 
187f0     32 FF 6B FC | 	wrlong	##-1, objptr
187f4     53 00 00 FF 
187f8     64 65 86 F1 | 	sub	objptr, ##42852
187fc                 | LR__2061
187fc                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
187fc     03 A6 56 F2 | 	cmps	local01, #3 wc
18800     38 00 90 CD |  if_b	jmp	#LR__2062
18804     80 4E BF FD | 	call	#_pop
18808     3F 9B 02 F6 | 	mov	arg05, result3
1880c     1C CE 05 F1 | 	add	fp, #28
18810     E7 7A 62 FC | 	wrlong	result1, fp
18814     04 CE 05 F1 | 	add	fp, #4
18818     E7 7C 62 FC | 	wrlong	result2, fp
1881c     04 CE 05 F1 | 	add	fp, #4
18820     E7 9A 62 FC | 	wrlong	arg05, fp
18824     08 CE 85 F1 | 	sub	fp, #8
18828     E7 92 02 F6 | 	mov	arg01, fp
1882c     1C CE 85 F1 | 	sub	fp, #28
18830     30 50 BF FD | 	call	#_converttoint
18834     3D A9 02 F6 | 	mov	local02, result1
18838     04 00 90 FD | 	jmp	#LR__2063
1883c                 | LR__2062
1883c     01 A8 06 F6 | 	mov	local02, #1
18840                 | LR__2063
18840                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
18840     02 A6 56 F2 | 	cmps	local01, #2 wc
18844     34 00 90 CD |  if_b	jmp	#LR__2064
18848     3C 4E BF FD | 	call	#_pop
1884c     3F A7 02 F6 | 	mov	local01, result3
18850     1C CE 05 F1 | 	add	fp, #28
18854     E7 7A 62 FC | 	wrlong	result1, fp
18858     04 CE 05 F1 | 	add	fp, #4
1885c     E7 7C 62 FC | 	wrlong	result2, fp
18860     04 CE 05 F1 | 	add	fp, #4
18864     E7 A6 62 FC | 	wrlong	local01, fp
18868     08 CE 85 F1 | 	sub	fp, #8
1886c     E7 92 02 F6 | 	mov	arg01, fp
18870     1C CE 85 F1 | 	sub	fp, #28
18874     EC 4F BF FD | 	call	#_converttoint
18878     3D AB 02 F6 | 	mov	local03, result1
1887c                 | LR__2064
1887c     08 4E BF FD | 	call	#_pop
18880     3F A7 02 F6 | 	mov	local01, result3
18884     1C CE 05 F1 | 	add	fp, #28
18888     E7 7A 62 FC | 	wrlong	result1, fp
1888c     04 CE 05 F1 | 	add	fp, #4
18890     E7 7C 62 FC | 	wrlong	result2, fp
18894     04 CE 05 F1 | 	add	fp, #4
18898     E7 A6 62 FC | 	wrlong	local01, fp
1889c     08 CE 85 F1 | 	sub	fp, #8
188a0     E7 92 02 F6 | 	mov	arg01, fp
188a4     1C CE 85 F1 | 	sub	fp, #28
188a8     B8 4F BF FD | 	call	#_converttoint
188ac     3D AD 02 F6 | 	mov	local04, result1
188b0     02 AE 66 F0 | 	shl	local05, #2
188b4     51 00 00 FF 
188b8     E4 64 06 F1 | 	add	objptr, ##41700
188bc     32 AF 02 F1 | 	add	local05, objptr
188c0     57 01 68 FC | 	wrlong	#0, local05
188c4                 | ' t1=pop() : channel=converttoint(t1)
188c4                 | ' getres(j)=0
188c4                 | ' if pos>=0 then
188c4     02 00 00 FF 
188c8     80 64 06 F1 | 	add	objptr, ##1152
188cc     32 B1 02 FB | 	rdlong	local06, objptr
188d0     53 00 00 FF 
188d4     64 65 86 F1 | 	sub	objptr, ##42852
188d8     00 B0 56 F2 | 	cmps	local06, #0 wc
188dc     08 01 90 CD |  if_b	jmp	#LR__2070
188e0     00 B2 06 F6 | 	mov	local07, #0
188e4                 | '    i=0: do
188e4                 | LR__2065
188e4     00 AE 06 F6 | 	mov	local05, #0
188e8                 | '    j=0: do    
188e8                 | LR__2066
188e8                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
188e8     00 04 00 FF 
188ec     00 AA 56 F2 | 	cmps	local03, ##524288 wc
188f0     34 00 90 3D |  if_ae	jmp	#LR__2067
188f4     57 B1 02 F6 | 	mov	local06, local05
188f8     32 A7 02 F6 | 	mov	local01, objptr
188fc     4F 00 00 FF 
18900     D4 A6 06 F1 | 	add	local01, ##40660
18904     53 B1 02 F1 | 	add	local06, local01
18908     55 93 02 F6 | 	mov	arg01, local03
1890c     59 A7 02 F6 | 	mov	local01, local07
18910     0A A6 66 F0 | 	shl	local01, #10
18914     53 93 02 F1 | 	add	arg01, local01
18918     57 93 02 F1 | 	add	arg01, local05
1891c     49 7B C2 FA | 	rdbyte	result1, arg01
18920     58 7B 42 FC | 	wrbyte	result1, local06
18924     30 00 90 FD | 	jmp	#LR__2068
18928                 | LR__2067
18928     57 B1 02 F6 | 	mov	local06, local05
1892c     32 A7 02 F6 | 	mov	local01, objptr
18930     4F 00 00 FF 
18934     D4 A6 06 F1 | 	add	local01, ##40660
18938     53 B1 02 F1 | 	add	local06, local01
1893c     55 93 02 F6 | 	mov	arg01, local03
18940     59 A7 02 F6 | 	mov	local01, local07
18944     0A A6 66 F0 | 	shl	local01, #10
18948     53 93 02 F1 | 	add	arg01, local01
1894c     57 93 02 F1 | 	add	arg01, local05
18950     5C 89 B0 FD | 	call	#_pspeek
18954     58 7B 42 FC | 	wrbyte	result1, local06
18958                 | LR__2068
18958     01 AE 06 F1 | 	add	local05, #1
1895c     02 00 00 FF 
18960     00 AE 56 F2 | 	cmps	local05, ##1024 wc
18964     14 00 90 3D |  if_ae	jmp	#LR__2069
18968     59 B1 02 F6 | 	mov	local06, local07
1896c     0A B0 66 F0 | 	shl	local06, #10
18970     57 B1 02 F1 | 	add	local06, local05
18974     54 B1 5A F2 | 	cmps	local06, local02 wcz
18978     6C FF 9F ED |  if_be	jmp	#LR__2066
1897c                 | LR__2069
1897c                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
1897c     53 00 00 FF 
18980     64 65 06 F1 | 	add	objptr, ##42852
18984     32 95 02 FB | 	rdlong	arg02, objptr
18988     01 94 06 F1 | 	add	arg02, #1
1898c     04 00 00 FF 
18990     90 64 86 F1 | 	sub	objptr, ##2192
18994     32 97 02 F6 | 	mov	arg03, objptr
18998     4F 00 00 FF 
1899c     D4 64 86 F1 | 	sub	objptr, ##40660
189a0     54 99 02 F6 | 	mov	arg04, local02
189a4     56 93 02 F6 | 	mov	arg01, local04
189a8     01 9A 06 F6 | 	mov	arg05, #1
189ac     0C CE B0 FD | 	call	#__system___basic_put
189b0     56 B1 02 F6 | 	mov	local06, local04
189b4     02 B0 66 F0 | 	shl	local06, #2
189b8     32 A7 02 F6 | 	mov	local01, objptr
189bc     51 00 00 FF 
189c0     E4 A6 06 F1 | 	add	local01, ##41700
189c4     53 B1 02 F1 | 	add	local06, local01
189c8     58 7B 62 FC | 	wrlong	result1, local06
189cc                 | '    if 1024*i+j>amount then exit loop
189cc     59 B1 02 F6 | 	mov	local06, local07
189d0     0A B0 66 F0 | 	shl	local06, #10
189d4     57 B1 02 F1 | 	add	local06, local05
189d8     54 B1 5A F2 | 	cmps	local06, local02 wcz
189dc     F8 00 90 1D |  if_a	jmp	#LR__2076
189e0     01 B2 06 F1 | 	add	local07, #1
189e4     FC FE 9F FD | 	jmp	#LR__2065
189e8                 | LR__2070
189e8     00 B2 06 F6 | 	mov	local07, #0
189ec                 | '    i=0: do
189ec                 | LR__2071
189ec     00 AE 06 F6 | 	mov	local05, #0
189f0                 | '    j=0: do  
189f0                 | LR__2072
189f0                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
189f0     00 04 00 FF 
189f4     00 AA 56 F2 | 	cmps	local03, ##524288 wc
189f8     34 00 90 3D |  if_ae	jmp	#LR__2073
189fc     57 B1 02 F6 | 	mov	local06, local05
18a00     32 A7 02 F6 | 	mov	local01, objptr
18a04     4F 00 00 FF 
18a08     D4 A6 06 F1 | 	add	local01, ##40660
18a0c     53 B1 02 F1 | 	add	local06, local01
18a10     55 93 02 F6 | 	mov	arg01, local03
18a14     59 A7 02 F6 | 	mov	local01, local07
18a18     0A A6 66 F0 | 	shl	local01, #10
18a1c     53 93 02 F1 | 	add	arg01, local01
18a20     57 93 02 F1 | 	add	arg01, local05
18a24     49 7B C2 FA | 	rdbyte	result1, arg01
18a28     58 7B 42 FC | 	wrbyte	result1, local06
18a2c     30 00 90 FD | 	jmp	#LR__2074
18a30                 | LR__2073
18a30     57 B1 02 F6 | 	mov	local06, local05
18a34     32 A7 02 F6 | 	mov	local01, objptr
18a38     4F 00 00 FF 
18a3c     D4 A6 06 F1 | 	add	local01, ##40660
18a40     53 B1 02 F1 | 	add	local06, local01
18a44     55 93 02 F6 | 	mov	arg01, local03
18a48     59 A7 02 F6 | 	mov	local01, local07
18a4c     0A A6 66 F0 | 	shl	local01, #10
18a50     53 93 02 F1 | 	add	arg01, local01
18a54     57 93 02 F1 | 	add	arg01, local05
18a58     54 88 B0 FD | 	call	#_pspeek
18a5c     58 7B 42 FC | 	wrbyte	result1, local06
18a60                 | LR__2074
18a60     01 AE 06 F1 | 	add	local05, #1
18a64     02 00 00 FF 
18a68     00 AE 56 F2 | 	cmps	local05, ##1024 wc
18a6c     14 00 90 3D |  if_ae	jmp	#LR__2075
18a70     59 B1 02 F6 | 	mov	local06, local07
18a74     0A B0 66 F0 | 	shl	local06, #10
18a78     57 B1 02 F1 | 	add	local06, local05
18a7c     54 B1 5A F2 | 	cmps	local06, local02 wcz
18a80     6C FF 9F ED |  if_be	jmp	#LR__2072
18a84                 | LR__2075
18a84                 | '    put #channel,,block(0),amount, r : getres(channel)=r
18a84     32 97 02 F6 | 	mov	arg03, objptr
18a88     4F 00 00 FF 
18a8c     D4 96 06 F1 | 	add	arg03, ##40660
18a90     54 99 02 F6 | 	mov	arg04, local02
18a94     56 93 02 F6 | 	mov	arg01, local04
18a98     00 94 06 F6 | 	mov	arg02, #0
18a9c     01 9A 06 F6 | 	mov	arg05, #1
18aa0     18 CD B0 FD | 	call	#__system___basic_put
18aa4     56 B1 02 F6 | 	mov	local06, local04
18aa8     02 B0 66 F0 | 	shl	local06, #2
18aac     32 A7 02 F6 | 	mov	local01, objptr
18ab0     51 00 00 FF 
18ab4     E4 A6 06 F1 | 	add	local01, ##41700
18ab8     53 B1 02 F1 | 	add	local06, local01
18abc     58 7B 62 FC | 	wrlong	result1, local06
18ac0                 | '    if 1024*i+j>amount then exit loop
18ac0     59 B1 02 F6 | 	mov	local06, local07
18ac4     0A B0 66 F0 | 	shl	local06, #10
18ac8     57 B1 02 F1 | 	add	local06, local05
18acc     54 B1 5A F2 | 	cmps	local06, local02 wcz
18ad0     01 B2 06 E1 |  if_be	add	local07, #1
18ad4     14 FF 9F ED |  if_be	jmp	#LR__2071
18ad8                 | LR__2076
18ad8     E7 F0 03 F6 | 	mov	ptra, fp
18adc     F2 00 A0 FD | 	call	#popregs_
18ae0                 | _do_put_ret
18ae0     2D 00 64 FD | 	ret
18ae4                 | 
18ae4                 | ' 
18ae4                 | ' '-------------------- rad
18ae4                 | ' 
18ae4                 | ' sub do_rad
18ae4                 | _do_rad
18ae4     53 00 00 FF 
18ae8     00 65 06 F1 | 	add	objptr, ##42752
18aec     00 C0 9F FF 
18af0     32 01 68 FC | 	wrlong	##1065353216, objptr
18af4     04 64 06 F1 | 	add	objptr, #4
18af8     00 C0 9F FF 
18afc     32 01 68 FC | 	wrlong	##1065353216, objptr
18b00     53 00 00 FF 
18b04     04 65 86 F1 | 	sub	objptr, ##42756
18b08                 | _do_rad_ret
18b08     2D 00 64 FD | 	ret
18b0c                 | 
18b0c                 | ' 
18b0c                 | ' '-------------------- rdpin
18b0c                 | ' 
18b0c                 | ' sub do_rdpin
18b0c                 | _do_rdpin
18b0c     00 CA 05 F6 | 	mov	COUNT_, #0
18b10     E8 00 A0 FD | 	call	#pushregs_
18b14     0C F0 07 F1 | 	add	ptra, #12
18b18     6C 4B BF FD | 	call	#_pop
18b1c     E7 7A 62 FC | 	wrlong	result1, fp
18b20     04 CE 05 F1 | 	add	fp, #4
18b24     E7 7C 62 FC | 	wrlong	result2, fp
18b28     04 CE 05 F1 | 	add	fp, #4
18b2c     E7 7E 62 FC | 	wrlong	result3, fp
18b30     08 CE 85 F1 | 	sub	fp, #8
18b34     E7 92 02 F6 | 	mov	arg01, fp
18b38     28 4D BF FD | 	call	#_converttoint
18b3c     3D 7B 8A FA | 	rdpin	result1, result1
18b40     53 00 00 FF 
18b44     68 65 06 F1 | 	add	objptr, ##42856
18b48     32 7B 62 FC | 	wrlong	result1, objptr
18b4c     53 00 00 FF 
18b50     68 65 86 F1 | 	sub	objptr, ##42856
18b54     08 CE 05 F1 | 	add	fp, #8
18b58     E7 3A 68 FC | 	wrlong	#29, fp
18b5c     08 CE 85 F1 | 	sub	fp, #8
18b60     E7 08 68 FC | 	wrlong	#4, fp
18b64     E7 92 02 F6 | 	mov	arg01, fp
18b68     AC 4B BF FD | 	call	#_push
18b6c     E7 F0 03 F6 | 	mov	ptra, fp
18b70     F2 00 A0 FD | 	call	#popregs_
18b74                 | _do_rdpin_ret
18b74     2D 00 64 FD | 	ret
18b78                 | 
18b78                 | ' 
18b78                 | ' ' ----------------  read
18b78                 | ' 
18b78                 | ' function read_next_line() as string
18b78                 | _read_next_line
18b78     07 CA 05 F6 | 	mov	COUNT_, #7
18b7c     E8 00 A0 FD | 	call	#pushregs_
18b80                 | ' if dataptr=$7FFFFFFF then return("")
18b80     51 00 00 FF 
18b84     4C 65 06 F1 | 	add	objptr, ##41804
18b88     32 A7 02 FB | 	rdlong	local01, objptr
18b8c     51 00 00 FF 
18b90     4C 65 86 F1 | 	sub	objptr, ##41804
18b94     FF FF 3F FF 
18b98     FF A7 0E F2 | 	cmp	local01, ##2147483647 wz
18b9c     98 01 00 AF 
18ba0     BF 7A 06 A6 |  if_e	mov	result1, ##@LR__6065
18ba4     C0 01 90 AD |  if_e	jmp	#LR__2087
18ba8                 | ' do
18ba8                 | LR__2080
18ba8     32 93 02 F6 | 	mov	arg01, objptr
18bac     51 00 00 FF 
18bb0     28 93 06 F1 | 	add	arg01, ##41768
18bb4     51 00 00 FF 
18bb8     4C 65 06 F1 | 	add	objptr, ##41804
18bbc     32 95 02 FB | 	rdlong	arg02, objptr
18bc0     24 96 06 F6 | 	mov	arg03, #36
18bc4     46 00 00 FF 
18bc8     80 64 86 F1 | 	sub	objptr, ##35968
18bcc     C8 B1 B0 FD | 	call	#_psram_spin2_read1
18bd0                 | '  ' print dataptr
18bd0                 | '   psram.read1(varptr(dataheader),dataptr,36) 
18bd0                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
18bd0     46 00 00 FF 
18bd4     5C 64 06 F1 | 	add	objptr, ##35932
18bd8     32 A7 02 FB | 	rdlong	local01, objptr
18bdc     51 00 00 FF 
18be0     28 65 86 F1 | 	sub	objptr, ##41768
18be4     FF FF 7F FF 
18be8     FF A7 0E F2 | 	cmp	local01, ##-1 wz
18bec     51 00 00 5F 
18bf0     3C 65 06 51 |  if_ne	add	objptr, ##41788
18bf4     32 A7 02 5B |  if_ne	rdlong	local01, objptr
18bf8     10 64 06 51 |  if_ne	add	objptr, #16
18bfc     32 A7 62 5C |  if_ne	wrlong	local01, objptr
18c00     51 00 00 5F 
18c04     4C 65 86 51 |  if_ne	sub	objptr, ##41804
18c08     51 00 00 FF 
18c0c     3C 65 06 F1 | 	add	objptr, ##41788
18c10     32 A7 02 FB | 	rdlong	local01, objptr
18c14     51 00 00 FF 
18c18     3C 65 86 F1 | 	sub	objptr, ##41788
18c1c     FF FF 3F FF 
18c20     FF A7 0E F2 | 	cmp	local01, ##2147483647 wz
18c24     51 00 00 5F 
18c28     28 65 06 51 |  if_ne	add	objptr, ##41768
18c2c     32 A9 02 5B |  if_ne	rdlong	local02, objptr
18c30     51 00 00 5F 
18c34     28 65 86 51 |  if_ne	sub	objptr, ##41768
18c38     FF FF 7F 5F 
18c3c     FF A9 0E 52 |  if_ne	cmp	local02, ##-1 wz
18c40     51 00 00 5F 
18c44     48 65 06 51 |  if_ne	add	objptr, ##41800
18c48     32 AB 02 5B |  if_ne	rdlong	local03, objptr
18c4c     51 00 00 5F 
18c50     48 65 86 51 |  if_ne	sub	objptr, ##41800
18c54     B7 AA 0E 52 |  if_ne	cmp	local03, #183 wz
18c58     4C FF 9F 5D |  if_ne	jmp	#LR__2080
18c5c                 | ' if dataheader(8)=token_data then 
18c5c     51 00 00 FF 
18c60     48 65 06 F1 | 	add	objptr, ##41800
18c64     32 A7 02 FB | 	rdlong	local01, objptr
18c68     51 00 00 FF 
18c6c     48 65 86 F1 | 	sub	objptr, ##41800
18c70     B7 A6 0E F2 | 	cmp	local01, #183 wz
18c74     E0 00 90 5D |  if_ne	jmp	#LR__2085
18c78     51 00 00 FF 
18c7c     30 65 06 F1 | 	add	objptr, ##41776
18c80     32 A7 02 FB | 	rdlong	local01, objptr
18c84     02 00 00 FF 
18c88     18 64 06 F1 | 	add	objptr, ##1048
18c8c     32 A7 62 FC | 	wrlong	local01, objptr
18c90     02 00 00 FF 
18c94     14 64 86 F1 | 	sub	objptr, ##1044
18c98     32 AD 02 FB | 	rdlong	local04, objptr
18c9c     02 00 00 FF 
18ca0     0C 64 06 F1 | 	add	objptr, ##1036
18ca4     32 AD 62 FC | 	wrlong	local04, objptr
18ca8                 | '  'print "data found at line "; dataheader(0)
18ca8                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
18ca8     00 AE 06 F6 | 	mov	local05, #0
18cac     53 00 00 FF 
18cb0     40 65 86 F1 | 	sub	objptr, ##42816
18cb4                 | LR__2081
18cb4     56 AF 52 F2 | 	cmps	local05, local04 wc
18cb8     3C 00 90 3D |  if_ae	jmp	#LR__2082
18cbc     53 00 00 FF 
18cc0     48 65 06 F1 | 	add	objptr, ##42824
18cc4     32 93 02 FB | 	rdlong	arg01, objptr
18cc8     53 00 00 FF 
18ccc     48 65 86 F1 | 	sub	objptr, ##42824
18cd0     57 93 02 F1 | 	add	arg01, local05
18cd4     D8 85 B0 FD | 	call	#_pspeek
18cd8     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
18cdc     44 D7 B0 FD | 	call	#__system__Chr_S
18ce0     3D 95 02 F6 | 	mov	arg02, result1
18ce4     58 93 02 F6 | 	mov	arg01, local06
18ce8     28 BD B0 FD | 	call	#__system___string_concat
18cec     3D B1 02 F6 | 	mov	local06, result1
18cf0     01 AE 06 F1 | 	add	local05, #1
18cf4     BC FF 9F FD | 	jmp	#LR__2081
18cf8                 | LR__2082
18cf8     98 01 00 FF 
18cfc     C0 96 06 F6 | 	mov	arg03, ##@LR__6066
18d00     01 92 06 F6 | 	mov	arg01, #1
18d04     58 95 02 F6 | 	mov	arg02, local06
18d08     9C DA B0 FD | 	call	#__system__Instr
18d0c     3D AF 02 F6 | 	mov	local05, result1
18d10     58 93 02 F6 | 	mov	arg01, local06
18d14     49 B3 02 F6 | 	mov	local07, arg01
18d18     D7 06 48 FB | 	callpa	#(@LR__2084-@LR__2083)>>2,fcache_load_ptr_
18d1c                 | LR__2083
18d1c     59 7B CA FA | 	rdbyte	result1, local07 wz
18d20     01 B2 06 51 |  if_ne	add	local07, #1
18d24     F4 FF 9F 5D |  if_ne	jmp	#LR__2083
18d28                 | LR__2084
18d28     49 B3 82 F1 | 	sub	local07, arg01
18d2c     59 95 02 F6 | 	mov	arg02, local07
18d30     57 95 82 F1 | 	sub	arg02, local05
18d34     04 94 86 F1 | 	sub	arg02, #4
18d38     58 93 02 F6 | 	mov	arg01, local06
18d3c     A8 D5 B0 FD | 	call	#__system__Right_S
18d40     3D 93 02 F6 | 	mov	arg01, result1
18d44     A8 D9 B0 FD | 	call	#__system__RTrim_S
18d48     3D 93 02 F6 | 	mov	arg01, result1
18d4c     E0 D8 B0 FD | 	call	#__system__LTrim_S
18d50     3D B1 02 F6 | 	mov	local06, result1
18d54     0C 00 90 FD | 	jmp	#LR__2086
18d58                 | LR__2085
18d58                 | '   return ("") 'todo proper err
18d58     98 01 00 FF 
18d5c     C5 7A 06 F6 | 	mov	result1, ##@LR__6067
18d60     04 00 90 FD | 	jmp	#LR__2087
18d64                 | LR__2086
18d64                 | ' return readline
18d64     58 7B 02 F6 | 	mov	result1, local06
18d68                 | LR__2087
18d68     E7 F0 03 F6 | 	mov	ptra, fp
18d6c     F2 00 A0 FD | 	call	#popregs_
18d70                 | _read_next_line_ret
18d70     2D 00 64 FD | 	ret
18d74                 | 
18d74                 | ' 
18d74                 | ' sub do_read
18d74                 | _do_read
18d74     17 CA 05 F6 | 	mov	COUNT_, #23
18d78     E8 00 A0 FD | 	call	#pushregs_
18d7c     58 F1 07 F1 | 	add	ptra, #344
18d80     4B 00 00 FF 
18d84     A0 64 06 F1 | 	add	objptr, ##38560
18d88     32 AD 02 FB | 	rdlong	local04, objptr
18d8c     56 AF 02 F6 | 	mov	local05, local04
18d90     01 AE 66 F0 | 	shl	local05, #1
18d94     56 AF 02 F1 | 	add	local05, local04
18d98     02 AE 66 F0 | 	shl	local05, #2
18d9c     03 00 00 FF 
18da0     04 64 86 F1 | 	sub	objptr, ##1540
18da4     32 B1 02 F6 | 	mov	local06, objptr
18da8     32 AF 02 F1 | 	add	local05, objptr
18dac     57 B3 02 FB | 	rdlong	local07, local05
18db0                 | ' 
18db0                 | ' 
18db0                 | ' numpar=compiledline(lineptr_e).result.uresult
18db0                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
18db0     01 B2 16 F2 | 	cmp	local07, #1 wc
18db4     48 00 00 FF 
18db8     9C 64 86 F1 | 	sub	objptr, ##37020
18dbc     08 00 90 CD |  if_b	jmp	#LR__2090
18dc0     41 B2 16 F2 | 	cmp	local07, #65 wc
18dc4     50 00 90 CD |  if_b	jmp	#LR__2091
18dc8                 | LR__2090
18dc8     00 92 06 F6 | 	mov	arg01, #0
18dcc     6C 11 B1 FD | 	call	#__system___getiolock_0622
18dd0     3D 93 02 F6 | 	mov	arg01, result1
18dd4     E0 BB B0 FD | 	call	#__system___lockmem
18dd8     98 01 00 FF 
18ddc     C6 94 06 F6 | 	mov	arg02, ##@LR__6068
18de0     00 92 06 F6 | 	mov	arg01, #0
18de4     00 96 06 F6 | 	mov	arg03, #0
18de8     C0 C8 B0 FD | 	call	#__system___basic_print_string
18dec     00 92 06 F6 | 	mov	arg01, #0
18df0     48 11 B1 FD | 	call	#__system___getiolock_0622
18df4     3D 01 68 FC | 	wrlong	#0, result1
18df8     51 00 00 FF 
18dfc     10 65 06 F1 | 	add	objptr, ##41744
18e00     32 95 02 FB | 	rdlong	arg02, objptr
18e04     51 00 00 FF 
18e08     10 65 86 F1 | 	sub	objptr, ##41744
18e0c     27 92 06 F6 | 	mov	arg01, #39
18e10     28 82 B0 FD | 	call	#_printerror
18e14     A8 09 90 FD | 	jmp	#LR__2138
18e18                 | LR__2091
18e18                 | ' i=numpar-1
18e18                 | ' if readline="" then readline=read_next_line() ': print readline
18e18     53 00 00 FF 
18e1c     34 65 06 F1 | 	add	objptr, ##42804
18e20     32 93 02 FB | 	rdlong	arg01, objptr
18e24     53 00 00 FF 
18e28     34 65 86 F1 | 	sub	objptr, ##42804
18e2c     98 01 00 FF 
18e30     D0 94 06 F6 | 	mov	arg02, ##@LR__6069
18e34     A8 BB B0 FD | 	call	#__system___string_cmp
18e38     00 7A 0E F2 | 	cmp	result1, #0 wz
18e3c     18 00 90 5D |  if_ne	jmp	#LR__2092
18e40     34 FD BF FD | 	call	#_read_next_line
18e44     53 00 00 FF 
18e48     34 65 06 F1 | 	add	objptr, ##42804
18e4c     32 7B 62 FC | 	wrlong	result1, objptr
18e50     53 00 00 FF 
18e54     34 65 86 F1 | 	sub	objptr, ##42804
18e58                 | LR__2092
18e58                 | ' if readline="" then printerror(55,runheader(0)) :return
18e58     53 00 00 FF 
18e5c     34 65 06 F1 | 	add	objptr, ##42804
18e60     32 93 02 FB | 	rdlong	arg01, objptr
18e64     53 00 00 FF 
18e68     34 65 86 F1 | 	sub	objptr, ##42804
18e6c     98 01 00 FF 
18e70     D1 94 06 F6 | 	mov	arg02, ##@LR__6070
18e74     68 BB B0 FD | 	call	#__system___string_cmp
18e78     00 7A 0E F2 | 	cmp	result1, #0 wz
18e7c     20 00 90 5D |  if_ne	jmp	#LR__2093
18e80     51 00 00 FF 
18e84     10 65 06 F1 | 	add	objptr, ##41744
18e88     32 95 02 FB | 	rdlong	arg02, objptr
18e8c     51 00 00 FF 
18e90     10 65 86 F1 | 	sub	objptr, ##41744
18e94     37 92 06 F6 | 	mov	arg01, #55
18e98     A0 81 B0 FD | 	call	#_printerror
18e9c     20 09 90 FD | 	jmp	#LR__2138
18ea0                 | LR__2093
18ea0     00 B4 06 F6 | 	mov	local08, #0
18ea4     59 B7 02 F6 | 	mov	local09, local07
18ea8     01 B6 86 F1 | 	sub	local09, #1
18eac                 | ' j=0
18eac                 | ' i=numpar-1
18eac                 | ' do
18eac                 | LR__2094
18eac                 | '   do
18eac                 | LR__2095
18eac     53 00 00 FF 
18eb0     34 65 06 F1 | 	add	objptr, ##42804
18eb4     32 95 02 FB | 	rdlong	arg02, objptr
18eb8     53 00 00 FF 
18ebc     34 65 86 F1 | 	sub	objptr, ##42804
18ec0     98 01 00 FF 
18ec4     D2 96 06 F6 | 	mov	arg03, ##@LR__6071
18ec8     01 92 06 F6 | 	mov	arg01, #1
18ecc     D8 D8 B0 FD | 	call	#__system__Instr
18ed0     3D 97 02 F6 | 	mov	arg03, result1
18ed4                 | '     comma=instr(1,readline,"'") : if comma>0 then readline=left$(readline,comma-1) ' allows comments in data
18ed4     01 96 16 F2 | 	cmp	arg03, #1 wc
18ed8     34 00 90 CD |  if_b	jmp	#LR__2096
18edc     53 00 00 FF 
18ee0     34 65 06 F1 | 	add	objptr, ##42804
18ee4     32 93 02 FB | 	rdlong	arg01, objptr
18ee8     53 00 00 FF 
18eec     34 65 86 F1 | 	sub	objptr, ##42804
18ef0     01 96 86 F1 | 	sub	arg03, #1
18ef4     4B 95 02 F6 | 	mov	arg02, arg03
18ef8     64 D3 B0 FD | 	call	#__system__Left_S
18efc     53 00 00 FF 
18f00     34 65 06 F1 | 	add	objptr, ##42804
18f04     32 7B 62 FC | 	wrlong	result1, objptr
18f08     53 00 00 FF 
18f0c     34 65 86 F1 | 	sub	objptr, ##42804
18f10                 | LR__2096
18f10     53 00 00 FF 
18f14     34 65 06 F1 | 	add	objptr, ##42804
18f18     32 95 02 FB | 	rdlong	arg02, objptr
18f1c     53 00 00 FF 
18f20     34 65 86 F1 | 	sub	objptr, ##42804
18f24     98 01 00 FF 
18f28     D4 96 06 F6 | 	mov	arg03, ##@LR__6072
18f2c     01 92 06 F6 | 	mov	arg01, #1
18f30     74 D8 B0 FD | 	call	#__system__Instr
18f34     3D B9 02 F6 | 	mov	local10, result1
18f38                 | '     comma=instr(1,readline,",")  
18f38                 | '       if comma>0  then 
18f38     01 B8 16 F2 | 	cmp	local10, #1 wc
18f3c     7C 00 90 CD |  if_b	jmp	#LR__2099
18f40     53 00 00 FF 
18f44     34 65 06 F1 | 	add	objptr, ##42804
18f48     32 93 02 FB | 	rdlong	arg01, objptr
18f4c     53 00 00 FF 
18f50     34 65 86 F1 | 	sub	objptr, ##42804
18f54     5C 95 02 F6 | 	mov	arg02, local10
18f58     01 94 86 F1 | 	sub	arg02, #1
18f5c     00 D3 B0 FD | 	call	#__system__Left_S
18f60     3D BB 02 F6 | 	mov	local11, result1
18f64     53 00 00 FF 
18f68     34 65 06 F1 | 	add	objptr, ##42804
18f6c     32 B1 02 FB | 	rdlong	local06, objptr
18f70     53 00 00 FF 
18f74     34 65 86 F1 | 	sub	objptr, ##42804
18f78     58 93 02 F6 | 	mov	arg01, local06
18f7c     49 BD 02 F6 | 	mov	local12, arg01
18f80     D7 06 48 FB | 	callpa	#(@LR__2098-@LR__2097)>>2,fcache_load_ptr_
18f84                 | LR__2097
18f84     5E 7B CA FA | 	rdbyte	result1, local12 wz
18f88     01 BC 06 51 |  if_ne	add	local12, #1
18f8c     F4 FF 9F 5D |  if_ne	jmp	#LR__2097
18f90                 | LR__2098
18f90     49 BD 82 F1 | 	sub	local12, arg01
18f94     5E 95 02 F6 | 	mov	arg02, local12
18f98     5C 95 82 F1 | 	sub	arg02, local10
18f9c     58 93 02 F6 | 	mov	arg01, local06
18fa0     44 D3 B0 FD | 	call	#__system__Right_S
18fa4     53 00 00 FF 
18fa8     34 65 06 F1 | 	add	objptr, ##42804
18fac     32 7B 62 FC | 	wrlong	result1, objptr
18fb0     53 00 00 FF 
18fb4     34 65 86 F1 | 	sub	objptr, ##42804
18fb8     40 00 90 FD | 	jmp	#LR__2100
18fbc                 | LR__2099
18fbc     53 00 00 FF 
18fc0     34 65 06 F1 | 	add	objptr, ##42804
18fc4     32 93 02 FB | 	rdlong	arg01, objptr
18fc8     53 00 00 FF 
18fcc     34 65 86 F1 | 	sub	objptr, ##42804
18fd0     1C D7 B0 FD | 	call	#__system__RTrim_S
18fd4     3D 93 02 F6 | 	mov	arg01, result1
18fd8     54 D6 B0 FD | 	call	#__system__LTrim_S
18fdc     3D BB 02 F6 | 	mov	local11, result1
18fe0     98 01 00 FF 
18fe4     D6 BE 06 F6 | 	mov	local13, ##@LR__6073
18fe8     53 00 00 FF 
18fec     34 65 06 F1 | 	add	objptr, ##42804
18ff0     32 BF 62 FC | 	wrlong	local13, objptr
18ff4     53 00 00 FF 
18ff8     34 65 86 F1 | 	sub	objptr, ##42804
18ffc                 | LR__2100
18ffc                 | '      
18ffc                 | '      if part$<>"" then j=j+1
18ffc     98 01 00 FF 
19000     D7 94 06 F6 | 	mov	arg02, ##@LR__6074
19004     5D 93 02 F6 | 	mov	arg01, local11
19008     D4 B9 B0 FD | 	call	#__system___string_cmp
1900c     00 7A 0E F2 | 	cmp	result1, #0 wz
19010     01 B4 06 51 |  if_ne	add	local08, #1
19014     5B 97 02 F6 | 	mov	arg03, local09
19018     02 96 66 F0 | 	shl	arg03, #2
1901c     E7 AC 02 F6 | 	mov	local04, fp
19020     2C AC 06 F1 | 	add	local04, #44
19024     56 97 02 F1 | 	add	arg03, local04
19028     4B BB 62 FC | 	wrlong	local11, arg03
1902c     01 B6 86 F1 | 	sub	local09, #1
19030                 | '      args(i)=part$  
19030                 | '      i=i-1
19030                 | '     if readline="" then readline=read_next_line() 
19030     53 00 00 FF 
19034     34 65 06 F1 | 	add	objptr, ##42804
19038     32 93 02 FB | 	rdlong	arg01, objptr
1903c     53 00 00 FF 
19040     34 65 86 F1 | 	sub	objptr, ##42804
19044     98 01 00 FF 
19048     D8 94 06 F6 | 	mov	arg02, ##@LR__6075
1904c     90 B9 B0 FD | 	call	#__system___string_cmp
19050     00 7A 0E F2 | 	cmp	result1, #0 wz
19054     18 00 90 5D |  if_ne	jmp	#LR__2101
19058     1C FB BF FD | 	call	#_read_next_line
1905c     53 00 00 FF 
19060     34 65 06 F1 | 	add	objptr, ##42804
19064     32 7B 62 FC | 	wrlong	result1, objptr
19068     53 00 00 FF 
1906c     34 65 86 F1 | 	sub	objptr, ##42804
19070                 | LR__2101
19070     00 B6 56 F2 | 	cmps	local09, #0 wc
19074     28 00 90 CD |  if_b	jmp	#LR__2102
19078     53 00 00 FF 
1907c     34 65 06 F1 | 	add	objptr, ##42804
19080     32 93 02 FB | 	rdlong	arg01, objptr
19084     53 00 00 FF 
19088     34 65 86 F1 | 	sub	objptr, ##42804
1908c     98 01 00 FF 
19090     D9 94 06 F6 | 	mov	arg02, ##@LR__6076
19094     48 B9 B0 FD | 	call	#__system___string_cmp
19098     00 7A 0E F2 | 	cmp	result1, #0 wz
1909c     0C FE 9F 5D |  if_ne	jmp	#LR__2095
190a0                 | LR__2102
190a0     00 B6 56 F2 | 	cmps	local09, #0 wc
190a4     04 FE 9F 3D |  if_ae	jmp	#LR__2094
190a8                 | ' if j<numpar then printerror(55,runheader(0))
190a8     59 B5 52 F2 | 	cmps	local08, local07 wc
190ac     51 00 00 CF 
190b0     10 65 06 C1 |  if_b	add	objptr, ##41744
190b4     32 95 02 CB |  if_b	rdlong	arg02, objptr
190b8     51 00 00 CF 
190bc     10 65 86 C1 |  if_b	sub	objptr, ##41744
190c0     37 92 06 C6 |  if_b	mov	arg01, #55
190c4     74 7F B0 CD |  if_b	call	#_printerror
190c8                 | ' 
190c8                 | ' for i=0 to numpar-1
190c8     00 B6 06 F6 | 	mov	local09, #0
190cc     59 C1 02 F6 | 	mov	local14, local07
190d0                 | LR__2103
190d0     60 B7 52 F2 | 	cmps	local09, local14 wc
190d4     E8 06 90 3D |  if_ae	jmp	#LR__2137
190d8                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
190d8     5B AF 02 F6 | 	mov	local05, local09
190dc     02 AE 66 F0 | 	shl	local05, #2
190e0     E7 B0 02 F6 | 	mov	local06, fp
190e4     2C B0 06 F1 | 	add	local06, #44
190e8     58 AF 02 F1 | 	add	local05, local06
190ec     57 93 02 FB | 	rdlong	arg01, local05
190f0     78 D9 BE FD | 	call	#_isnum
190f4     3D BF 02 F6 | 	mov	local13, result1
190f8     5B C3 02 F6 | 	mov	local15, local09
190fc     02 C2 66 F0 | 	shl	local15, #2
19100     E7 C4 02 F6 | 	mov	local16, fp
19104     2C C4 06 F1 | 	add	local16, #44
19108     62 C3 02 F1 | 	add	local15, local16
1910c     61 93 02 FB | 	rdlong	arg01, local15
19110     44 DD BE FD | 	call	#_isint
19114     07 7A 66 F7 | 	signx	result1, #7
19118     3D BF 2A F5 | 	andn	local13, result1 wz
1911c     53 00 00 5F 
19120     68 65 06 51 |  if_ne	add	objptr, ##42856
19124     32 3D 68 5C |  if_ne	wrlong	#30, objptr
19128     53 00 00 5F 
1912c     68 65 86 51 |  if_ne	sub	objptr, ##42856
19130                 | '   if isint(args(i)) then r=result_int 
19130     5B AD 02 F6 | 	mov	local04, local09
19134     02 AC 66 F0 | 	shl	local04, #2
19138     E7 AE 02 F6 | 	mov	local05, fp
1913c     2C AE 06 F1 | 	add	local05, #44
19140     57 AD 02 F1 | 	add	local04, local05
19144     56 93 02 FB | 	rdlong	arg01, local04
19148     0C DD BE FD | 	call	#_isint
1914c     00 7A 0E F2 | 	cmp	result1, #0 wz
19150     53 00 00 5F 
19154     68 65 06 51 |  if_ne	add	objptr, ##42856
19158     32 39 68 5C |  if_ne	wrlong	#28, objptr
1915c     53 00 00 5F 
19160     68 65 86 51 |  if_ne	sub	objptr, ##42856
19164                 | '   if isdec(args(i)) then r=result_uint 
19164     5B AD 02 F6 | 	mov	local04, local09
19168     02 AC 66 F0 | 	shl	local04, #2
1916c     E7 AE 02 F6 | 	mov	local05, fp
19170     2C AE 06 F1 | 	add	local05, #44
19174     57 AD 02 F1 | 	add	local04, local05
19178     56 93 02 FB | 	rdlong	arg01, local04
1917c     7C DF BE FD | 	call	#_isdec
19180     00 7A 0E F2 | 	cmp	result1, #0 wz
19184     53 00 00 5F 
19188     68 65 06 51 |  if_ne	add	objptr, ##42856
1918c     32 3B 68 5C |  if_ne	wrlong	#29, objptr
19190     53 00 00 5F 
19194     68 65 86 51 |  if_ne	sub	objptr, ##42856
19198                 | '   if not isnum(args(i)) then 
19198     5B AF 02 F6 | 	mov	local05, local09
1919c     02 AE 66 F0 | 	shl	local05, #2
191a0     E7 B0 02 F6 | 	mov	local06, fp
191a4     2C B0 06 F1 | 	add	local06, #44
191a8     58 AF 02 F1 | 	add	local05, local06
191ac     57 93 02 FB | 	rdlong	arg01, local05
191b0     B8 D8 BE FD | 	call	#_isnum
191b4     07 7A 66 F7 | 	signx	result1, #7
191b8     3D 7B 22 F6 | 	not	result1, result1
191bc     00 7A 0E F2 | 	cmp	result1, #0 wz
191c0     FC 00 90 AD |  if_e	jmp	#LR__2108
191c4     53 00 00 FF 
191c8     68 65 06 F1 | 	add	objptr, ##42856
191cc     32 57 68 FC | 	wrlong	#43, objptr
191d0     53 00 00 FF 
191d4     68 65 86 F1 | 	sub	objptr, ##42856
191d8     5B AD 02 F6 | 	mov	local04, local09
191dc     02 AC 66 F0 | 	shl	local04, #2
191e0     E7 AE 02 F6 | 	mov	local05, fp
191e4     2C AE 06 F1 | 	add	local05, #44
191e8     57 AD 02 F1 | 	add	local04, local05
191ec     56 93 02 FB | 	rdlong	arg01, local04
191f0     49 BD 02 F6 | 	mov	local12, arg01
191f4     D7 06 48 FB | 	callpa	#(@LR__2105-@LR__2104)>>2,fcache_load_ptr_
191f8                 | LR__2104
191f8     5E 7B CA FA | 	rdbyte	result1, local12 wz
191fc     01 BC 06 51 |  if_ne	add	local12, #1
19200     F4 FF 9F 5D |  if_ne	jmp	#LR__2104
19204                 | LR__2105
19204     49 BD 82 F1 | 	sub	local12, arg01
19208     5E C7 02 F6 | 	mov	local17, local12
1920c     53 00 00 FF 
19210     F0 64 06 F1 | 	add	objptr, ##42736
19214     32 93 02 FB | 	rdlong	arg01, objptr
19218     63 93 82 F1 | 	sub	arg01, local17
1921c     04 92 86 F1 | 	sub	arg01, #4
19220     03 92 26 F5 | 	andn	arg01, #3
19224     32 93 62 FC | 	wrlong	arg01, objptr
19228     53 00 00 FF 
1922c     F0 64 86 F1 | 	sub	objptr, ##42736
19230     63 95 02 F6 | 	mov	arg02, local17
19234     A0 7F B0 FD | 	call	#_pslpoke
19238                 | '     pslpoke memtop,l
19238                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
19238     01 B4 06 F6 | 	mov	local08, #1
1923c     63 C9 02 F6 | 	mov	local18, local17
19240     01 C8 06 F1 | 	add	local18, #1
19244                 | LR__2106
19244     64 B5 52 F2 | 	cmps	local08, local18 wc
19248     60 00 90 3D |  if_ae	jmp	#LR__2107
1924c     53 00 00 FF 
19250     F0 64 06 F1 | 	add	objptr, ##42736
19254     32 BF 02 FB | 	rdlong	local13, objptr
19258     53 00 00 FF 
1925c     F0 64 86 F1 | 	sub	objptr, ##42736
19260     03 BE 06 F1 | 	add	local13, #3
19264     5A BF 02 F1 | 	add	local13, local08
19268     5B C3 02 F6 | 	mov	local15, local09
1926c     02 C2 66 F0 | 	shl	local15, #2
19270     E7 C4 02 F6 | 	mov	local16, fp
19274     2C C4 06 F1 | 	add	local16, #44
19278     62 C3 02 F1 | 	add	local15, local16
1927c     61 93 02 FB | 	rdlong	arg01, local15
19280     5A B1 02 F6 | 	mov	local06, local08
19284     01 C2 06 F6 | 	mov	local15, #1
19288     58 95 02 F6 | 	mov	arg02, local06
1928c     01 96 06 F6 | 	mov	arg03, #1
19290     E4 D0 B0 FD | 	call	#__system__Mid_S
19294     3D AF 02 F6 | 	mov	local05, result1
19298     57 95 C2 FA | 	rdbyte	arg02, local05
1929c     5F 93 02 F6 | 	mov	arg01, local13
192a0     C4 7F B0 FD | 	call	#_pspoke
192a4     01 B4 06 F1 | 	add	local08, #1
192a8     98 FF 9F FD | 	jmp	#LR__2106
192ac                 | LR__2107
192ac     53 00 00 FF 
192b0     F0 64 06 F1 | 	add	objptr, ##42736
192b4     32 CB 02 FB | 	rdlong	local19, objptr
192b8     53 00 00 FF 
192bc     F0 64 86 F1 | 	sub	objptr, ##42736
192c0                 | LR__2108
192c0     C4 43 BF FD | 	call	#_pop
192c4     3E CD 02 F6 | 	mov	local20, result2
192c8     3F AD 02 F6 | 	mov	local04, result3
192cc     3D A7 02 F6 | 	mov	local01, result1
192d0     66 A9 02 F6 | 	mov	local02, local20
192d4     56 AB 02 F6 | 	mov	local03, local04
192d8                 | '   t1=pop() 
192d8                 | '   if i>=numpar-j then
192d8     59 BF 02 F6 | 	mov	local13, local07
192dc     5A BF 82 F1 | 	sub	local13, local08
192e0     5F B7 52 F2 | 	cmps	local09, local13 wc
192e4     D0 04 90 CD |  if_b	jmp	#LR__2136
192e8     54 CF 02 F6 | 	mov	local21, local02
192ec                 | '     vartype=t1.result.twowords(1)
192ec                 | '     select case vartype
192ec     67 D1 0A F6 | 	mov	local22, local21 wz
192f0     64 00 90 AD |  if_e	jmp	#LR__2109
192f4     00 D1 0E F2 | 	cmp	local22, #256 wz
192f8     64 00 90 AD |  if_e	jmp	#LR__2110
192fc     01 D1 0E F2 | 	cmp	local22, #257 wz
19300     64 00 90 AD |  if_e	jmp	#LR__2111
19304     02 D1 0E F2 | 	cmp	local22, #258 wz
19308     64 00 90 AD |  if_e	jmp	#LR__2112
1930c     03 D1 0E F2 | 	cmp	local22, #259 wz
19310     64 00 90 AD |  if_e	jmp	#LR__2113
19314     04 D1 0E F2 | 	cmp	local22, #260 wz
19318     64 00 90 AD |  if_e	jmp	#LR__2114
1931c     05 D1 0E F2 | 	cmp	local22, #261 wz
19320     64 00 90 AD |  if_e	jmp	#LR__2115
19324     06 D1 0E F2 | 	cmp	local22, #262 wz
19328     64 00 90 AD |  if_e	jmp	#LR__2116
1932c     07 D1 0E F2 | 	cmp	local22, #263 wz
19330     64 00 90 AD |  if_e	jmp	#LR__2117
19334     08 D1 0E F2 | 	cmp	local22, #264 wz
19338     64 00 90 AD |  if_e	jmp	#LR__2118
1933c     09 D1 0E F2 | 	cmp	local22, #265 wz
19340     64 00 90 AD |  if_e	jmp	#LR__2119
19344     0A D1 0E F2 | 	cmp	local22, #266 wz
19348     64 00 90 AD |  if_e	jmp	#LR__2120
1934c     0B D1 0E F2 | 	cmp	local22, #267 wz
19350     64 00 90 AD |  if_e	jmp	#LR__2121
19354     68 00 90 FD | 	jmp	#LR__2122
19358                 | LR__2109
19358     0C D2 06 F6 | 	mov	local23, #12
1935c     64 00 90 FD | 	jmp	#LR__2123
19360                 | LR__2110
19360     0C D2 06 F6 | 	mov	local23, #12
19364     5C 00 90 FD | 	jmp	#LR__2123
19368                 | LR__2111
19368     01 D2 06 F6 | 	mov	local23, #1
1936c     54 00 90 FD | 	jmp	#LR__2123
19370                 | LR__2112
19370     01 D2 06 F6 | 	mov	local23, #1
19374     4C 00 90 FD | 	jmp	#LR__2123
19378                 | LR__2113
19378     02 D2 06 F6 | 	mov	local23, #2
1937c     44 00 90 FD | 	jmp	#LR__2123
19380                 | LR__2114
19380     02 D2 06 F6 | 	mov	local23, #2
19384     3C 00 90 FD | 	jmp	#LR__2123
19388                 | LR__2115
19388     04 D2 06 F6 | 	mov	local23, #4
1938c     34 00 90 FD | 	jmp	#LR__2123
19390                 | LR__2116
19390     04 D2 06 F6 | 	mov	local23, #4
19394     2C 00 90 FD | 	jmp	#LR__2123
19398                 | LR__2117
19398     08 D2 06 F6 | 	mov	local23, #8
1939c     24 00 90 FD | 	jmp	#LR__2123
193a0                 | LR__2118
193a0     08 D2 06 F6 | 	mov	local23, #8
193a4     1C 00 90 FD | 	jmp	#LR__2123
193a8                 | LR__2119
193a8     06 D2 06 F6 | 	mov	local23, #6
193ac     14 00 90 FD | 	jmp	#LR__2123
193b0                 | LR__2120
193b0     08 D2 06 F6 | 	mov	local23, #8
193b4     0C 00 90 FD | 	jmp	#LR__2123
193b8                 | LR__2121
193b8     05 D2 06 F6 | 	mov	local23, #5
193bc     04 00 90 FD | 	jmp	#LR__2123
193c0                 | LR__2122
193c0     0C D2 06 F6 | 	mov	local23, #12
193c4                 | LR__2123
193c4                 | '     if esize=12 andalso t1.result.uresult<$80000 then
193c4     0C D2 0E F2 | 	cmp	local23, #12 wz
193c8     34 01 90 5D |  if_ne	jmp	#LR__2127
193cc     00 04 00 FF 
193d0     00 A6 16 F2 | 	cmp	local01, ##524288 wc
193d4     28 01 90 3D |  if_ae	jmp	#LR__2127
193d8                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
193d8     53 00 00 FF 
193dc     68 65 06 F1 | 	add	objptr, ##42856
193e0     32 BF 02 FB | 	rdlong	local13, objptr
193e4     53 00 00 FF 
193e8     68 65 86 F1 | 	sub	objptr, ##42856
193ec     1C BE 0E F2 | 	cmp	local13, #28 wz
193f0     2C 00 90 5D |  if_ne	jmp	#LR__2124
193f4     5B AF 02 F6 | 	mov	local05, local09
193f8     02 AE 66 F0 | 	shl	local05, #2
193fc     E7 B0 02 F6 | 	mov	local06, fp
19400     2C B0 06 F1 | 	add	local06, #44
19404     58 AF 02 F1 | 	add	local05, local06
19408     57 93 02 FB | 	rdlong	arg01, local05
1940c     00 94 06 F6 | 	mov	arg02, #0
19410     F8 E2 B0 FD | 	call	#__system____builtin_atoi
19414     3D 95 02 F6 | 	mov	arg02, result1
19418     53 93 02 F6 | 	mov	arg01, local01
1941c     49 95 62 FC | 	wrlong	arg02, arg01
19420                 | LR__2124
19420                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
19420     53 00 00 FF 
19424     68 65 06 F1 | 	add	objptr, ##42856
19428     32 BF 02 FB | 	rdlong	local13, objptr
1942c     53 00 00 FF 
19430     68 65 86 F1 | 	sub	objptr, ##42856
19434     1D BE 0E F2 | 	cmp	local13, #29 wz
19438     2C 00 90 5D |  if_ne	jmp	#LR__2125
1943c     5B AF 02 F6 | 	mov	local05, local09
19440     02 AE 66 F0 | 	shl	local05, #2
19444     E7 B0 02 F6 | 	mov	local06, fp
19448     2C B0 06 F1 | 	add	local06, #44
1944c     58 AF 02 F1 | 	add	local05, local06
19450     57 93 02 FB | 	rdlong	arg01, local05
19454     00 94 06 F6 | 	mov	arg02, #0
19458     B0 E2 B0 FD | 	call	#__system____builtin_atoi
1945c     3D 95 02 F6 | 	mov	arg02, result1
19460     53 93 02 F6 | 	mov	arg01, local01
19464     49 95 62 FC | 	wrlong	arg02, arg01
19468                 | LR__2125
19468                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
19468     53 00 00 FF 
1946c     68 65 06 F1 | 	add	objptr, ##42856
19470     32 BF 02 FB | 	rdlong	local13, objptr
19474     53 00 00 FF 
19478     68 65 86 F1 | 	sub	objptr, ##42856
1947c     1E BE 0E F2 | 	cmp	local13, #30 wz
19480     3C 00 90 5D |  if_ne	jmp	#LR__2126
19484     5B AD 02 F6 | 	mov	local04, local09
19488     02 AC 66 F0 | 	shl	local04, #2
1948c     E7 AE 02 F6 | 	mov	local05, fp
19490     2C AE 06 F1 | 	add	local05, #44
19494     57 AD 02 F1 | 	add	local04, local05
19498     56 93 02 FB | 	rdlong	arg01, local04
1949c     04 E4 B0 FD | 	call	#__system____builtin_atof
194a0     28 CE 05 F1 | 	add	fp, #40
194a4     E7 7A 62 FC | 	wrlong	result1, fp
194a8     E7 92 02 F6 | 	mov	arg01, fp
194ac     28 CE 85 F1 | 	sub	fp, #40
194b0     49 7B 02 FB | 	rdlong	result1, arg01
194b4     3D 95 02 F6 | 	mov	arg02, result1
194b8     53 93 02 F6 | 	mov	arg01, local01
194bc     49 95 62 FC | 	wrlong	arg02, arg01
194c0                 | LR__2126
194c0                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
194c0     53 00 00 FF 
194c4     68 65 06 F1 | 	add	objptr, ##42856
194c8     32 BF 02 FB | 	rdlong	local13, objptr
194cc     2B BE 0E F2 | 	cmp	local13, #43 wz
194d0     53 93 02 A6 |  if_e	mov	arg01, local01
194d4     65 95 02 A6 |  if_e	mov	arg02, local19
194d8     49 95 62 AC |  if_e	wrlong	arg02, arg01
194dc     53 BF 02 F6 | 	mov	local13, local01
194e0     08 BE 06 F1 | 	add	local13, #8
194e4     32 AD 02 FB | 	rdlong	local04, objptr
194e8     53 00 00 FF 
194ec     68 65 86 F1 | 	sub	objptr, ##42856
194f0     56 CD 02 F6 | 	mov	local20, local04
194f4     5F 93 02 F6 | 	mov	arg01, local13
194f8     66 95 02 F6 | 	mov	arg02, local20
194fc     49 95 62 FC | 	wrlong	arg02, arg01
19500                 | LR__2127
19500                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
19500     0C D2 0E F2 | 	cmp	local23, #12 wz
19504     38 01 90 5D |  if_ne	jmp	#LR__2131
19508     00 04 00 FF 
1950c     00 A6 16 F2 | 	cmp	local01, ##524288 wc
19510     2C 01 90 CD |  if_b	jmp	#LR__2131
19514                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
19514     53 00 00 FF 
19518     68 65 06 F1 | 	add	objptr, ##42856
1951c     32 BF 02 FB | 	rdlong	local13, objptr
19520     53 00 00 FF 
19524     68 65 86 F1 | 	sub	objptr, ##42856
19528     1C BE 0E F2 | 	cmp	local13, #28 wz
1952c     2C 00 90 5D |  if_ne	jmp	#LR__2128
19530     5B AF 02 F6 | 	mov	local05, local09
19534     02 AE 66 F0 | 	shl	local05, #2
19538     E7 B0 02 F6 | 	mov	local06, fp
1953c     2C B0 06 F1 | 	add	local06, #44
19540     58 AF 02 F1 | 	add	local05, local06
19544     57 93 02 FB | 	rdlong	arg01, local05
19548     00 94 06 F6 | 	mov	arg02, #0
1954c     BC E1 B0 FD | 	call	#__system____builtin_atoi
19550     3D 95 02 F6 | 	mov	arg02, result1
19554     53 93 02 F6 | 	mov	arg01, local01
19558     7C 7C B0 FD | 	call	#_pslpoke
1955c                 | LR__2128
1955c                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
1955c     53 00 00 FF 
19560     68 65 06 F1 | 	add	objptr, ##42856
19564     32 BF 02 FB | 	rdlong	local13, objptr
19568     53 00 00 FF 
1956c     68 65 86 F1 | 	sub	objptr, ##42856
19570     1D BE 0E F2 | 	cmp	local13, #29 wz
19574     2C 00 90 5D |  if_ne	jmp	#LR__2129
19578     5B AF 02 F6 | 	mov	local05, local09
1957c     02 AE 66 F0 | 	shl	local05, #2
19580     E7 B0 02 F6 | 	mov	local06, fp
19584     2C B0 06 F1 | 	add	local06, #44
19588     58 AF 02 F1 | 	add	local05, local06
1958c     57 93 02 FB | 	rdlong	arg01, local05
19590     00 94 06 F6 | 	mov	arg02, #0
19594     74 E1 B0 FD | 	call	#__system____builtin_atoi
19598     3D 95 02 F6 | 	mov	arg02, result1
1959c     53 93 02 F6 | 	mov	arg01, local01
195a0     34 7C B0 FD | 	call	#_pslpoke
195a4                 | LR__2129
195a4                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
195a4     53 00 00 FF 
195a8     68 65 06 F1 | 	add	objptr, ##42856
195ac     32 BF 02 FB | 	rdlong	local13, objptr
195b0     53 00 00 FF 
195b4     68 65 86 F1 | 	sub	objptr, ##42856
195b8     1E BE 0E F2 | 	cmp	local13, #30 wz
195bc     38 00 90 5D |  if_ne	jmp	#LR__2130
195c0     5B AD 02 F6 | 	mov	local04, local09
195c4     02 AC 66 F0 | 	shl	local04, #2
195c8     E7 AE 02 F6 | 	mov	local05, fp
195cc     2C AE 06 F1 | 	add	local05, #44
195d0     57 AD 02 F1 | 	add	local04, local05
195d4     56 93 02 FB | 	rdlong	arg01, local04
195d8     C8 E2 B0 FD | 	call	#__system____builtin_atof
195dc     28 CE 05 F1 | 	add	fp, #40
195e0     E7 7A 62 FC | 	wrlong	result1, fp
195e4     E7 92 02 F6 | 	mov	arg01, fp
195e8     28 CE 85 F1 | 	sub	fp, #40
195ec     49 95 02 FB | 	rdlong	arg02, arg01
195f0     53 93 02 F6 | 	mov	arg01, local01
195f4     E0 7B B0 FD | 	call	#_pslpoke
195f8                 | LR__2130
195f8                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
195f8     53 00 00 FF 
195fc     68 65 06 F1 | 	add	objptr, ##42856
19600     32 BF 02 FB | 	rdlong	local13, objptr
19604     53 00 00 FF 
19608     68 65 86 F1 | 	sub	objptr, ##42856
1960c     2B BE 0E F2 | 	cmp	local13, #43 wz
19610     53 93 02 A6 |  if_e	mov	arg01, local01
19614     65 95 02 A6 |  if_e	mov	arg02, local19
19618     BC 7B B0 AD |  if_e	call	#_pslpoke
1961c     53 93 02 F6 | 	mov	arg01, local01
19620     08 92 06 F1 | 	add	arg01, #8
19624     53 00 00 FF 
19628     68 65 06 F1 | 	add	objptr, ##42856
1962c     32 CD 02 FB | 	rdlong	local20, objptr
19630     53 00 00 FF 
19634     68 65 86 F1 | 	sub	objptr, ##42856
19638     66 95 02 F6 | 	mov	arg02, local20
1963c     98 7B B0 FD | 	call	#_pslpoke
19640                 | LR__2131
19640                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
19640     05 D2 0E F2 | 	cmp	local23, #5 wz
19644     53 00 00 AF 
19648     68 65 06 A1 |  if_e	add	objptr, ##42856
1964c     32 CD 02 AB |  if_e	rdlong	local20, objptr
19650     53 00 00 AF 
19654     68 65 86 A1 |  if_e	sub	objptr, ##42856
19658     2B CC 0E A2 |  if_e	cmp	local20, #43 wz
1965c     65 CD 02 A6 |  if_e	mov	local20, local19
19660     53 93 02 A6 |  if_e	mov	arg01, local01
19664     66 95 02 A6 |  if_e	mov	arg02, local20
19668     6C 7B B0 AD |  if_e	call	#_pslpoke
1966c                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
1966c     04 D2 0E F2 | 	cmp	local23, #4 wz
19670     48 00 90 5D |  if_ne	jmp	#LR__2132
19674     53 00 00 FF 
19678     68 65 06 F1 | 	add	objptr, ##42856
1967c     32 CD 02 FB | 	rdlong	local20, objptr
19680     53 00 00 FF 
19684     68 65 86 F1 | 	sub	objptr, ##42856
19688     2B CC 0E F2 | 	cmp	local20, #43 wz
1968c     2C 00 90 AD |  if_e	jmp	#LR__2132
19690     5B AF 02 F6 | 	mov	local05, local09
19694     02 AE 66 F0 | 	shl	local05, #2
19698     E7 B0 02 F6 | 	mov	local06, fp
1969c     2C B0 06 F1 | 	add	local06, #44
196a0     58 AF 02 F1 | 	add	local05, local06
196a4     57 93 02 FB | 	rdlong	arg01, local05
196a8     00 94 06 F6 | 	mov	arg02, #0
196ac     5C E0 B0 FD | 	call	#__system____builtin_atoi
196b0     3D 95 02 F6 | 	mov	arg02, result1
196b4     53 93 02 F6 | 	mov	arg01, local01
196b8     1C 7B B0 FD | 	call	#_pslpoke
196bc                 | LR__2132
196bc                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
196bc     02 D2 0E F2 | 	cmp	local23, #2 wz
196c0     48 00 90 5D |  if_ne	jmp	#LR__2133
196c4     53 00 00 FF 
196c8     68 65 06 F1 | 	add	objptr, ##42856
196cc     32 CD 02 FB | 	rdlong	local20, objptr
196d0     53 00 00 FF 
196d4     68 65 86 F1 | 	sub	objptr, ##42856
196d8     2B CC 0E F2 | 	cmp	local20, #43 wz
196dc     2C 00 90 AD |  if_e	jmp	#LR__2133
196e0     5B AF 02 F6 | 	mov	local05, local09
196e4     02 AE 66 F0 | 	shl	local05, #2
196e8     E7 B0 02 F6 | 	mov	local06, fp
196ec     2C B0 06 F1 | 	add	local06, #44
196f0     58 AF 02 F1 | 	add	local05, local06
196f4     57 93 02 FB | 	rdlong	arg01, local05
196f8     00 94 06 F6 | 	mov	arg02, #0
196fc     0C E0 B0 FD | 	call	#__system____builtin_atoi
19700     3D 95 02 F6 | 	mov	arg02, result1
19704     53 93 02 F6 | 	mov	arg01, local01
19708     14 7B B0 FD | 	call	#_psdpoke
1970c                 | LR__2133
1970c                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
1970c     01 D2 0E F2 | 	cmp	local23, #1 wz
19710     48 00 90 5D |  if_ne	jmp	#LR__2134
19714     53 00 00 FF 
19718     68 65 06 F1 | 	add	objptr, ##42856
1971c     32 CD 02 FB | 	rdlong	local20, objptr
19720     53 00 00 FF 
19724     68 65 86 F1 | 	sub	objptr, ##42856
19728     2B CC 0E F2 | 	cmp	local20, #43 wz
1972c     2C 00 90 AD |  if_e	jmp	#LR__2134
19730     5B AF 02 F6 | 	mov	local05, local09
19734     02 AE 66 F0 | 	shl	local05, #2
19738     E7 B0 02 F6 | 	mov	local06, fp
1973c     2C B0 06 F1 | 	add	local06, #44
19740     58 AF 02 F1 | 	add	local05, local06
19744     57 93 02 FB | 	rdlong	arg01, local05
19748     00 94 06 F6 | 	mov	arg02, #0
1974c     BC DF B0 FD | 	call	#__system____builtin_atoi
19750     3D 95 02 F6 | 	mov	arg02, result1
19754     53 93 02 F6 | 	mov	arg01, local01
19758     0C 7B B0 FD | 	call	#_pspoke
1975c                 | LR__2134
1975c                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1975c     06 D2 0E F2 | 	cmp	local23, #6 wz
19760     54 00 90 5D |  if_ne	jmp	#LR__2135
19764     53 00 00 FF 
19768     68 65 06 F1 | 	add	objptr, ##42856
1976c     32 CD 02 FB | 	rdlong	local20, objptr
19770     53 00 00 FF 
19774     68 65 86 F1 | 	sub	objptr, ##42856
19778     2B CC 0E F2 | 	cmp	local20, #43 wz
1977c     38 00 90 AD |  if_e	jmp	#LR__2135
19780     5B AD 02 F6 | 	mov	local04, local09
19784     02 AC 66 F0 | 	shl	local04, #2
19788     E7 AE 02 F6 | 	mov	local05, fp
1978c     2C AE 06 F1 | 	add	local05, #44
19790     57 AD 02 F1 | 	add	local04, local05
19794     56 93 02 FB | 	rdlong	arg01, local04
19798     08 E1 B0 FD | 	call	#__system____builtin_atof
1979c     28 CE 05 F1 | 	add	fp, #40
197a0     E7 7A 62 FC | 	wrlong	result1, fp
197a4     E7 92 02 F6 | 	mov	arg01, fp
197a8     28 CE 85 F1 | 	sub	fp, #40
197ac     49 95 02 FB | 	rdlong	arg02, arg01
197b0     53 93 02 F6 | 	mov	arg01, local01
197b4     20 7A B0 FD | 	call	#_pslpoke
197b8                 | LR__2135
197b8                 | LR__2136
197b8     01 B6 06 F1 | 	add	local09, #1
197bc     10 F9 9F FD | 	jmp	#LR__2103
197c0                 | LR__2137
197c0                 | LR__2138
197c0     E7 F0 03 F6 | 	mov	ptra, fp
197c4     F2 00 A0 FD | 	call	#popregs_
197c8                 | _do_read_ret
197c8     2D 00 64 FD | 	ret
197cc                 | 
197cc                 | ' 
197cc                 | ' '------------------- release
197cc                 | ' 
197cc                 | ' sub do_release
197cc                 | _do_release
197cc     00 CA 05 F6 | 	mov	COUNT_, #0
197d0     E8 00 A0 FD | 	call	#pushregs_
197d4     10 F0 07 F1 | 	add	ptra, #16
197d8     AC 3E BF FD | 	call	#_pop
197dc     3F 95 02 F6 | 	mov	arg02, result3
197e0     E7 7A 62 FC | 	wrlong	result1, fp
197e4     04 CE 05 F1 | 	add	fp, #4
197e8     E7 7C 62 FC | 	wrlong	result2, fp
197ec     04 CE 05 F1 | 	add	fp, #4
197f0     E7 94 62 FC | 	wrlong	arg02, fp
197f4     08 CE 85 F1 | 	sub	fp, #8
197f8     E7 92 02 F6 | 	mov	arg01, fp
197fc     64 40 BF FD | 	call	#_converttoint
19800                 | ' 
19800                 | ' t1=pop()
19800                 | ' channel=converttoint(t1)
19800                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
19800     00 7A 56 F2 | 	cmps	result1, #0 wc
19804     2C 00 90 CD |  if_b	jmp	#LR__2140
19808     08 7A 56 F2 | 	cmps	result1, #8 wc
1980c     24 00 90 3D |  if_ae	jmp	#LR__2140
19810     38 00 00 FF 
19814     30 64 06 F1 | 	add	objptr, ##28720
19818     32 93 02 FB | 	rdlong	arg01, objptr
1981c     38 00 00 FF 
19820     30 64 86 F1 | 	sub	objptr, ##28720
19824     06 7A 66 F0 | 	shl	result1, #6
19828     3D 93 02 F1 | 	add	arg01, result1
1982c     2C 92 06 F1 | 	add	arg01, #44
19830     49 FF 69 FC | 	wrlong	#255, arg01
19834                 | LR__2140
19834     E7 F0 03 F6 | 	mov	ptra, fp
19838     F2 00 A0 FD | 	call	#popregs_
1983c                 | _do_release_ret
1983c     2D 00 64 FD | 	ret
19840                 | 
19840                 | ' 
19840                 | ' '------------------- restore
19840                 | ' 
19840                 | ' sub do_restore()
19840                 | _do_restore
19840     4B 00 00 FF 
19844     A8 64 06 F1 | 	add	objptr, ##38568
19848     32 81 02 FB | 	rdlong	_var01, objptr
1984c     06 00 00 FF 
19850     A4 64 06 F1 | 	add	objptr, ##3236
19854     32 81 62 FC | 	wrlong	_var01, objptr
19858     98 01 00 FF 
1985c     DA 80 06 F6 | 	mov	_var01, ##@LR__6077
19860     01 00 00 FF 
19864     E8 65 06 F1 | 	add	objptr, ##1000
19868     32 81 62 FC | 	wrlong	_var01, objptr
1986c     53 00 00 FF 
19870     34 65 86 F1 | 	sub	objptr, ##42804
19874                 | _do_restore_ret
19874     2D 00 64 FD | 	ret
19878                 | 
19878                 | ' 
19878                 | ' '------------------- restorepalette
19878                 | ' 
19878                 | ' sub do_restorepalette()
19878                 | _do_restorepalette
19878     D4 81 B0 FD | 	call	#_hg010b_spin2_restorepalette
1987c                 | _do_restorepalette_ret
1987c     2D 00 64 FD | 	ret
19880                 | 
19880                 | ' '------------------- return
19880                 | ' 
19880                 | ' sub do_return()
19880                 | _do_return
19880                 | ' if gosubtop>0 then
19880     51 00 00 FF 
19884     54 65 06 F1 | 	add	objptr, ##41812
19888     32 81 02 FB | 	rdlong	_var01, objptr
1988c     51 00 00 FF 
19890     54 65 86 F1 | 	sub	objptr, ##41812
19894     01 80 56 F2 | 	cmps	_var01, #1 wc
19898     8C 00 90 CD |  if_b	jmp	#LR__2150
1989c     51 00 00 FF 
198a0     54 65 06 F1 | 	add	objptr, ##41812
198a4     32 81 02 FB | 	rdlong	_var01, objptr
198a8     03 80 66 F0 | 	shl	_var01, #3
198ac     03 00 00 FF 
198b0     88 65 86 F1 | 	sub	objptr, ##1928
198b4     32 81 02 F1 | 	add	_var01, objptr
198b8     40 81 02 FB | 	rdlong	_var01, _var01
198bc     03 00 00 FF 
198c0     0C 65 06 F1 | 	add	objptr, ##1804
198c4     32 81 62 FC | 	wrlong	_var01, objptr
198c8     7C 64 06 F1 | 	add	objptr, #124
198cc     32 81 02 FB | 	rdlong	_var01, objptr
198d0     03 80 66 F0 | 	shl	_var01, #3
198d4     03 00 00 FF 
198d8     88 65 86 F1 | 	sub	objptr, ##1928
198dc     32 81 02 F1 | 	add	_var01, objptr
198e0     04 80 06 F1 | 	add	_var01, #4
198e4     40 81 02 FB | 	rdlong	_var01, _var01
198e8     03 00 00 FF 
198ec     10 65 06 F1 | 	add	objptr, ##1808
198f0     32 81 62 FC | 	wrlong	_var01, objptr
198f4     06 00 00 FF 
198f8     40 64 86 F1 | 	sub	objptr, ##3136
198fc     32 81 02 FB | 	rdlong	_var01, objptr
19900     01 80 86 F1 | 	sub	_var01, #1
19904     04 64 06 F1 | 	add	objptr, #4
19908     32 81 62 FC | 	wrlong	_var01, objptr
1990c     06 00 00 FF 
19910     B4 64 06 F1 | 	add	objptr, ##3252
19914     32 81 02 FB | 	rdlong	_var01, objptr
19918     01 80 86 F1 | 	sub	_var01, #1
1991c     32 81 62 FC | 	wrlong	_var01, objptr
19920     51 00 00 FF 
19924     54 65 86 F1 | 	sub	objptr, ##41812
19928                 | LR__2150
19928                 | _do_return_ret
19928     2D 00 64 FD | 	ret
1992c                 | 
1992c                 | ' 
1992c                 | ' '------------------- right$
1992c                 | ' 
1992c                 | ' sub do_right
1992c                 | _do_right
1992c     01 CA 05 F6 | 	mov	COUNT_, #1
19930     E8 00 A0 FD | 	call	#pushregs_
19934     14 F0 07 F1 | 	add	ptra, #20
19938     4B 00 00 FF 
1993c     A0 64 06 F1 | 	add	objptr, ##38560
19940     32 97 02 FB | 	rdlong	arg03, objptr
19944     4B 95 02 F6 | 	mov	arg02, arg03
19948     01 94 66 F0 | 	shl	arg02, #1
1994c     4B 95 02 F1 | 	add	arg02, arg03
19950     02 94 66 F0 | 	shl	arg02, #2
19954     03 00 00 FF 
19958     04 64 86 F1 | 	sub	objptr, ##1540
1995c     32 95 02 F1 | 	add	arg02, objptr
19960     4A 97 02 FB | 	rdlong	arg03, arg02
19964                 | ' 
19964                 | ' numpar=compiledline(lineptr_e).result.uresult
19964                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
19964     02 96 0E F2 | 	cmp	arg03, #2 wz
19968     48 00 00 FF 
1996c     9C 64 86 F1 | 	sub	objptr, ##37020
19970     40 00 90 AD |  if_e	jmp	#LR__2160
19974     00 92 06 F6 | 	mov	arg01, #0
19978     C0 05 B1 FD | 	call	#__system___getiolock_0622
1997c     3D 93 02 F6 | 	mov	arg01, result1
19980     34 B0 B0 FD | 	call	#__system___lockmem
19984     98 01 00 FF 
19988     DB 94 06 F6 | 	mov	arg02, ##@LR__6078
1998c     00 92 06 F6 | 	mov	arg01, #0
19990     00 96 06 F6 | 	mov	arg03, #0
19994     14 BD B0 FD | 	call	#__system___basic_print_string
19998     00 92 06 F6 | 	mov	arg01, #0
1999c     9C 05 B1 FD | 	call	#__system___getiolock_0622
199a0     3D 01 68 FC | 	wrlong	#0, result1
199a4     27 92 06 F6 | 	mov	arg01, #39
199a8     00 94 06 F6 | 	mov	arg02, #0
199ac     8C 76 B0 FD | 	call	#_printerror
199b0     D8 00 90 FD | 	jmp	#LR__2163
199b4                 | LR__2160
199b4     D0 3C BF FD | 	call	#_pop
199b8     3F 97 02 F6 | 	mov	arg03, result3
199bc     E7 7A 62 FC | 	wrlong	result1, fp
199c0     04 CE 05 F1 | 	add	fp, #4
199c4     E7 7C 62 FC | 	wrlong	result2, fp
199c8     04 CE 05 F1 | 	add	fp, #4
199cc     E7 96 62 FC | 	wrlong	arg03, fp
199d0     08 CE 85 F1 | 	sub	fp, #8
199d4     E7 92 02 F6 | 	mov	arg01, fp
199d8     88 3E BF FD | 	call	#_converttoint
199dc     3D A7 02 F6 | 	mov	local01, result1
199e0     A4 3C BF FD | 	call	#_pop
199e4     3F 97 02 F6 | 	mov	arg03, result3
199e8     E7 7A 62 FC | 	wrlong	result1, fp
199ec     04 CE 05 F1 | 	add	fp, #4
199f0     E7 7C 62 FC | 	wrlong	result2, fp
199f4     04 CE 05 F1 | 	add	fp, #4
199f8     E7 96 62 FC | 	wrlong	arg03, fp
199fc                 | ' t1=pop() : arg=converttoint(t1)
199fc                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
199fc     08 CE 85 F1 | 	sub	fp, #8
19a00     2B 96 0E F2 | 	cmp	arg03, #43 wz
19a04     18 00 90 5D |  if_ne	jmp	#LR__2161
19a08     E7 92 02 FB | 	rdlong	arg01, fp
19a0c     E8 3D BF FD | 	call	#_convertstring
19a10     E7 7A 62 FC | 	wrlong	result1, fp
19a14     08 CE 05 F1 | 	add	fp, #8
19a18     E7 3E 68 FC | 	wrlong	#31, fp
19a1c     08 CE 85 F1 | 	sub	fp, #8
19a20                 | LR__2161
19a20                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
19a20     08 CE 05 F1 | 	add	fp, #8
19a24     E7 96 02 FB | 	rdlong	arg03, fp
19a28     08 CE 85 F1 | 	sub	fp, #8
19a2c     1F 96 0E F2 | 	cmp	arg03, #31 wz
19a30     40 00 90 AD |  if_e	jmp	#LR__2162
19a34     00 92 06 F6 | 	mov	arg01, #0
19a38     00 05 B1 FD | 	call	#__system___getiolock_0622
19a3c     3D 93 02 F6 | 	mov	arg01, result1
19a40     74 AF B0 FD | 	call	#__system___lockmem
19a44     98 01 00 FF 
19a48     E4 94 06 F6 | 	mov	arg02, ##@LR__6079
19a4c     00 92 06 F6 | 	mov	arg01, #0
19a50     00 96 06 F6 | 	mov	arg03, #0
19a54     54 BC B0 FD | 	call	#__system___basic_print_string
19a58     00 92 06 F6 | 	mov	arg01, #0
19a5c     DC 04 B1 FD | 	call	#__system___getiolock_0622
19a60     3D 01 68 FC | 	wrlong	#0, result1
19a64     0F 92 06 F6 | 	mov	arg01, #15
19a68     00 94 06 F6 | 	mov	arg02, #0
19a6c     CC 75 B0 FD | 	call	#_printerror
19a70     18 00 90 FD | 	jmp	#LR__2163
19a74                 | LR__2162
19a74     E7 92 02 FB | 	rdlong	arg01, fp
19a78     53 95 02 F6 | 	mov	arg02, local01
19a7c     68 C8 B0 FD | 	call	#__system__Right_S
19a80     E7 7A 62 FC | 	wrlong	result1, fp
19a84     E7 92 02 F6 | 	mov	arg01, fp
19a88     8C 3C BF FD | 	call	#_push
19a8c                 | LR__2163
19a8c     E7 F0 03 F6 | 	mov	ptra, fp
19a90     F2 00 A0 FD | 	call	#popregs_
19a94                 | _do_right_ret
19a94     2D 00 64 FD | 	ret
19a98                 | 
19a98                 | ' 
19a98                 | ' '------------------- rnd
19a98                 | ' 
19a98                 | ' sub do_rnd
19a98                 | _do_rnd
19a98     02 CA 05 F6 | 	mov	COUNT_, #2
19a9c     E8 00 A0 FD | 	call	#pushregs_
19aa0     10 F0 07 F1 | 	add	ptra, #16
19aa4     4B 00 00 FF 
19aa8     A0 64 06 F1 | 	add	objptr, ##38560
19aac     32 A7 02 FB | 	rdlong	local01, objptr
19ab0     53 97 02 F6 | 	mov	arg03, local01
19ab4     01 96 66 F0 | 	shl	arg03, #1
19ab8     53 97 02 F1 | 	add	arg03, local01
19abc     02 96 66 F0 | 	shl	arg03, #2
19ac0     03 00 00 FF 
19ac4     04 64 86 F1 | 	sub	objptr, ##1540
19ac8     32 97 02 F1 | 	add	arg03, objptr
19acc     4B A9 02 FB | 	rdlong	local02, arg03
19ad0                 | ' 
19ad0                 | ' numpar=compiledline(lineptr_e).result.uresult
19ad0                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
19ad0     02 A8 16 F2 | 	cmp	local02, #2 wc
19ad4     48 00 00 FF 
19ad8     9C 64 86 F1 | 	sub	objptr, ##37020
19adc     40 00 90 CD |  if_b	jmp	#LR__2170
19ae0     00 92 06 F6 | 	mov	arg01, #0
19ae4     54 04 B1 FD | 	call	#__system___getiolock_0622
19ae8     3D 93 02 F6 | 	mov	arg01, result1
19aec     C8 AE B0 FD | 	call	#__system___lockmem
19af0     98 01 00 FF 
19af4     ED 94 06 F6 | 	mov	arg02, ##@LR__6080
19af8     00 92 06 F6 | 	mov	arg01, #0
19afc     00 96 06 F6 | 	mov	arg03, #0
19b00     A8 BB B0 FD | 	call	#__system___basic_print_string
19b04     00 92 06 F6 | 	mov	arg01, #0
19b08     30 04 B1 FD | 	call	#__system___getiolock_0622
19b0c     3D 01 68 FC | 	wrlong	#0, result1
19b10     27 92 06 F6 | 	mov	arg01, #39
19b14     00 94 06 F6 | 	mov	arg02, #0
19b18     20 75 B0 FD | 	call	#_printerror
19b1c     28 01 90 FD | 	jmp	#LR__2177
19b20                 | LR__2170
19b20                 | ' if numpar=0 then
19b20     00 A8 0E F2 | 	cmp	local02, #0 wz
19b24     20 00 90 5D |  if_ne	jmp	#LR__2171
19b28     08 CE 05 F1 | 	add	fp, #8
19b2c     E7 3A 68 FC | 	wrlong	#29, fp
19b30     08 CE 85 F1 | 	sub	fp, #8
19b34     1B 7A 62 FD | 	getrnd	result1
19b38     E7 7A 62 FC | 	wrlong	result1, fp
19b3c     E7 92 02 F6 | 	mov	arg01, fp
19b40     D4 3B BF FD | 	call	#_push
19b44     00 01 90 FD | 	jmp	#LR__2176
19b48                 | LR__2171
19b48     3C 3B BF FD | 	call	#_pop
19b4c     E7 7A 62 FC | 	wrlong	result1, fp
19b50     04 CE 05 F1 | 	add	fp, #4
19b54     E7 7C 62 FC | 	wrlong	result2, fp
19b58     04 CE 05 F1 | 	add	fp, #4
19b5c     E7 7E 62 FC | 	wrlong	result3, fp
19b60                 | '   t1=pop()
19b60                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
19b60     08 CE 85 F1 | 	sub	fp, #8
19b64     1C 7E 0E F2 | 	cmp	result3, #28 wz
19b68     08 CE 05 51 |  if_ne	add	fp, #8
19b6c     E7 A6 02 5B |  if_ne	rdlong	local01, fp
19b70     08 CE 85 51 |  if_ne	sub	fp, #8
19b74     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
19b78     2C 00 90 5D |  if_ne	jmp	#LR__2172
19b7c     1B 7A 62 FD | 	getrnd	result1
19b80     E7 A6 02 FB | 	rdlong	local01, fp
19b84     53 7B 12 FD | 	qdiv	result1, local01
19b88     E7 92 02 F6 | 	mov	arg01, fp
19b8c     19 A8 62 FD | 	getqy	local02
19b90     E7 A8 62 FC | 	wrlong	local02, fp
19b94     08 CE 05 F1 | 	add	fp, #8
19b98     E7 3A 68 FC | 	wrlong	#29, fp
19b9c     08 CE 85 F1 | 	sub	fp, #8
19ba0     74 3B BF FD | 	call	#_push
19ba4     A0 00 90 FD | 	jmp	#LR__2175
19ba8                 | LR__2172
19ba8     08 CE 05 F1 | 	add	fp, #8
19bac     E7 A8 02 FB | 	rdlong	local02, fp
19bb0     08 CE 85 F1 | 	sub	fp, #8
19bb4     1E A8 0E F2 | 	cmp	local02, #30 wz
19bb8     48 00 90 5D |  if_ne	jmp	#LR__2173
19bbc     E7 92 02 FB | 	rdlong	arg01, fp
19bc0     00 C0 24 FF 
19bc4     00 94 06 F6 | 	mov	arg02, ##1233125376
19bc8     C0 D6 B0 FD | 	call	#__system___float_div
19bcc     3D A9 02 F6 | 	mov	local02, result1
19bd0     1B 92 62 FD | 	getrnd	arg01
19bd4     74 93 06 F4 | 	bitl	arg01, #372
19bd8     A8 D0 B0 FD | 	call	#__system___float_fromuns
19bdc     3D 95 02 F6 | 	mov	arg02, result1
19be0     54 93 02 F6 | 	mov	arg01, local02
19be4     A0 D4 B0 FD | 	call	#__system___float_mul
19be8     E7 7A 62 FC | 	wrlong	result1, fp
19bec     08 CE 05 F1 | 	add	fp, #8
19bf0     E7 3C 68 FC | 	wrlong	#30, fp
19bf4     08 CE 85 F1 | 	sub	fp, #8
19bf8     E7 92 02 F6 | 	mov	arg01, fp
19bfc     18 3B BF FD | 	call	#_push
19c00     44 00 90 FD | 	jmp	#LR__2174
19c04                 | LR__2173
19c04                 | '     print "rnd: "; : printerror(40) 
19c04     00 92 06 F6 | 	mov	arg01, #0
19c08     30 03 B1 FD | 	call	#__system___getiolock_0622
19c0c     3D 93 02 F6 | 	mov	arg01, result1
19c10     A4 AD B0 FD | 	call	#__system___lockmem
19c14     98 01 00 FF 
19c18     F3 94 06 F6 | 	mov	arg02, ##@LR__6081
19c1c     00 92 06 F6 | 	mov	arg01, #0
19c20     00 96 06 F6 | 	mov	arg03, #0
19c24     84 BA B0 FD | 	call	#__system___basic_print_string
19c28     00 92 06 F6 | 	mov	arg01, #0
19c2c     0C 03 B1 FD | 	call	#__system___getiolock_0622
19c30     3D 01 68 FC | 	wrlong	#0, result1
19c34     28 92 06 F6 | 	mov	arg01, #40
19c38     00 94 06 F6 | 	mov	arg02, #0
19c3c     FC 73 B0 FD | 	call	#_printerror
19c40     E7 92 02 F6 | 	mov	arg01, fp
19c44     D0 3A BF FD | 	call	#_push
19c48                 | LR__2174
19c48                 | LR__2175
19c48                 | LR__2176
19c48                 | LR__2177
19c48     E7 F0 03 F6 | 	mov	ptra, fp
19c4c     F2 00 A0 FD | 	call	#popregs_
19c50                 | _do_rnd_ret
19c50     2D 00 64 FD | 	ret
19c54                 | 
19c54                 | ' 
19c54                 | ' '-------------------- round
19c54                 | ' 
19c54                 | ' sub do_round
19c54                 | _do_round
19c54     00 CA 05 F6 | 	mov	COUNT_, #0
19c58     E8 00 A0 FD | 	call	#pushregs_
19c5c     0C F0 07 F1 | 	add	ptra, #12
19c60     24 3A BF FD | 	call	#_pop
19c64     E7 7A 62 FC | 	wrlong	result1, fp
19c68     04 CE 05 F1 | 	add	fp, #4
19c6c     E7 7C 62 FC | 	wrlong	result2, fp
19c70     04 CE 05 F1 | 	add	fp, #4
19c74     E7 7E 62 FC | 	wrlong	result3, fp
19c78     08 CE 85 F1 | 	sub	fp, #8
19c7c     E7 92 02 F6 | 	mov	arg01, fp
19c80     E0 3B BF FD | 	call	#_converttoint
19c84     E7 7A 62 FC | 	wrlong	result1, fp
19c88     08 CE 05 F1 | 	add	fp, #8
19c8c     E7 38 68 FC | 	wrlong	#28, fp
19c90     08 CE 85 F1 | 	sub	fp, #8
19c94     E7 92 02 F6 | 	mov	arg01, fp
19c98     7C 3A BF FD | 	call	#_push
19c9c     E7 F0 03 F6 | 	mov	ptra, fp
19ca0     F2 00 A0 FD | 	call	#popregs_
19ca4                 | _do_round_ret
19ca4     2D 00 64 FD | 	ret
19ca8                 | 
19ca8                 | ' 
19ca8                 | ' '-------------------- rqpin
19ca8                 | ' 
19ca8                 | ' sub do_rqpin
19ca8                 | _do_rqpin
19ca8     00 CA 05 F6 | 	mov	COUNT_, #0
19cac     E8 00 A0 FD | 	call	#pushregs_
19cb0     0C F0 07 F1 | 	add	ptra, #12
19cb4     D0 39 BF FD | 	call	#_pop
19cb8     E7 7A 62 FC | 	wrlong	result1, fp
19cbc     04 CE 05 F1 | 	add	fp, #4
19cc0     E7 7C 62 FC | 	wrlong	result2, fp
19cc4     04 CE 05 F1 | 	add	fp, #4
19cc8     E7 7E 62 FC | 	wrlong	result3, fp
19ccc     08 CE 85 F1 | 	sub	fp, #8
19cd0     E7 92 02 F6 | 	mov	arg01, fp
19cd4     8C 3B BF FD | 	call	#_converttoint
19cd8     3D 93 02 F6 | 	mov	arg01, result1
19cdc     00 7A 06 F6 | 	mov	result1, #0
19ce0     49 7B 82 FA | 	rqpin	result1, arg01
19ce4     53 00 00 FF 
19ce8     68 65 06 F1 | 	add	objptr, ##42856
19cec     32 7B 62 FC | 	wrlong	result1, objptr
19cf0     53 00 00 FF 
19cf4     68 65 86 F1 | 	sub	objptr, ##42856
19cf8     08 CE 05 F1 | 	add	fp, #8
19cfc     E7 3A 68 FC | 	wrlong	#29, fp
19d00     08 CE 85 F1 | 	sub	fp, #8
19d04     E7 08 68 FC | 	wrlong	#4, fp
19d08     E7 92 02 F6 | 	mov	arg01, fp
19d0c     08 3A BF FD | 	call	#_push
19d10     E7 F0 03 F6 | 	mov	ptra, fp
19d14     F2 00 A0 FD | 	call	#popregs_
19d18                 | _do_rqpin_ret
19d18     2D 00 64 FD | 	ret
19d1c                 | 
19d1c                 | ' 
19d1c                 | ' ' ------------------ run
19d1c                 | ' 
19d1c                 | ' sub do_run
19d1c                 | _do_run
19d1c     04 CA 05 F6 | 	mov	COUNT_, #4
19d20     E8 00 A0 FD | 	call	#pushregs_
19d24     4B 00 00 FF 
19d28     A0 64 06 F1 | 	add	objptr, ##38560
19d2c     32 A7 02 FB | 	rdlong	local01, objptr
19d30     06 00 00 FF 
19d34     38 64 06 F1 | 	add	objptr, ##3128
19d38     32 A9 02 FB | 	rdlong	local02, objptr
19d3c     04 64 06 F1 | 	add	objptr, #4
19d40     32 AB 02 FB | 	rdlong	local03, objptr
19d44     53 99 02 F6 | 	mov	arg04, local01
19d48     4C 97 02 F6 | 	mov	arg03, arg04
19d4c     01 96 66 F0 | 	shl	arg03, #1
19d50     4C 97 02 F1 | 	add	arg03, arg04
19d54     02 96 66 F0 | 	shl	arg03, #2
19d58     09 00 00 FF 
19d5c     40 64 86 F1 | 	sub	objptr, ##4672
19d60     32 97 02 F1 | 	add	arg03, objptr
19d64     4B 95 02 FB | 	rdlong	arg02, arg03
19d68                 | ' 
19d68                 | ' r_lineptr_e=lineptr_e
19d68                 | ' r_runptr=runptr
19d68                 | ' r_runptr2=runptr2
19d68                 | ' 
19d68                 | ' numpar=compiledline(lineptr_e).result.uresult
19d68                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
19d68     01 94 0E F2 | 	cmp	arg02, #1 wz
19d6c     48 00 00 FF 
19d70     9C 64 86 F1 | 	sub	objptr, ##37020
19d74     00 92 06 A6 |  if_e	mov	arg01, #0
19d78     6C A8 BF AD |  if_e	call	#_do_load
19d7c     4B 00 00 FF 
19d80     A8 64 06 F1 | 	add	objptr, ##38568
19d84     32 99 02 FB | 	rdlong	arg04, objptr
19d88     06 00 00 FF 
19d8c     30 64 06 F1 | 	add	objptr, ##3120
19d90     32 99 62 FC | 	wrlong	arg04, objptr
19d94     04 64 06 F1 | 	add	objptr, #4
19d98     32 01 68 FC | 	wrlong	#0, objptr
19d9c     04 64 06 F1 | 	add	objptr, #4
19da0     FF FF FF FF 
19da4     32 FF 6B FC | 	wrlong	##-1, objptr
19da8     06 00 00 FF 
19dac     38 64 86 F1 | 	sub	objptr, ##3128
19db0     32 99 02 FB | 	rdlong	arg04, objptr
19db4     06 00 00 FF 
19db8     A4 64 06 F1 | 	add	objptr, ##3236
19dbc     32 99 62 FC | 	wrlong	arg04, objptr
19dc0     98 01 00 FF 
19dc4     F9 98 06 F6 | 	mov	arg04, ##@LR__6082
19dc8     01 00 00 FF 
19dcc     E8 65 06 F1 | 	add	objptr, ##1000
19dd0     32 99 62 FC | 	wrlong	arg04, objptr
19dd4                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
19dd4                 | ' dataptr=programstart : readline="" ' reset the data pointer
19dd4                 | ' if inrun>0 then 
19dd4     02 00 00 FF 
19dd8     28 64 86 F1 | 	sub	objptr, ##1064
19ddc     32 99 02 FB | 	rdlong	arg04, objptr
19de0     51 00 00 FF 
19de4     0C 65 86 F1 | 	sub	objptr, ##41740
19de8     01 98 16 F2 | 	cmp	arg04, #1 wc
19dec     34 00 90 CD |  if_b	jmp	#LR__2180
19df0     32 93 02 F6 | 	mov	arg01, objptr
19df4     51 00 00 FF 
19df8     10 93 06 F1 | 	add	arg01, ##41744
19dfc     51 00 00 FF 
19e00     D8 64 06 F1 | 	add	objptr, ##41688
19e04     32 95 02 FB | 	rdlong	arg02, objptr
19e08     18 96 06 F6 | 	mov	arg03, #24
19e0c     46 00 00 FF 
19e10     0C 64 86 F1 | 	sub	objptr, ##35852
19e14     80 9F B0 FD | 	call	#_psram_spin2_read1
19e18     0B 00 00 FF 
19e1c     CC 64 86 F1 | 	sub	objptr, ##5836
19e20                 | '   psram.read1(varptr(runheader),runptr,24)  
19e20                 | '   return
19e20     10 03 90 FD | 	jmp	#LR__2187
19e24                 | LR__2180
19e24     51 00 00 FF 
19e28     0C 65 06 F1 | 	add	objptr, ##41740
19e2c     32 03 68 FC | 	wrlong	#1, objptr
19e30     04 64 06 F1 | 	add	objptr, #4
19e34     32 93 02 F6 | 	mov	arg01, objptr
19e38     38 64 86 F1 | 	sub	objptr, #56
19e3c     32 95 02 FB | 	rdlong	arg02, objptr
19e40     18 96 06 F6 | 	mov	arg03, #24
19e44     46 00 00 FF 
19e48     0C 64 86 F1 | 	sub	objptr, ##35852
19e4c     48 9F B0 FD | 	call	#_psram_spin2_read1
19e50                 | ' inrun=1
19e50                 | ' psram.read1(varptr(runheader),runptr,24) 
19e50                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
19e50     46 00 00 FF 
19e54     44 64 06 F1 | 	add	objptr, ##35908
19e58     32 AD 02 FB | 	rdlong	local04, objptr
19e5c     51 00 00 FF 
19e60     10 65 86 F1 | 	sub	objptr, ##41744
19e64     FF FF 7F FF 
19e68     FF AD 0E F2 | 	cmp	local04, ##-1 wz
19e6c     51 00 00 AF 
19e70     0C 65 06 A1 |  if_e	add	objptr, ##41740
19e74     32 01 68 AC |  if_e	wrlong	#0, objptr
19e78     51 00 00 AF 
19e7c     0C 65 86 A1 |  if_e	sub	objptr, ##41740
19e80     B0 02 90 AD |  if_e	jmp	#LR__2187
19e84                 | ' do 
19e84                 | LR__2181
19e84                 | '   if runptr<>oldrunptr then
19e84     51 00 00 FF 
19e88     D8 64 06 F1 | 	add	objptr, ##41688
19e8c     32 AD 02 FB | 	rdlong	local04, objptr
19e90     08 64 06 F1 | 	add	objptr, #8
19e94     32 99 02 FB | 	rdlong	arg04, objptr
19e98     51 00 00 FF 
19e9c     E0 64 86 F1 | 	sub	objptr, ##41696
19ea0     4C AD 0A F2 | 	cmp	local04, arg04 wz
19ea4     D0 00 90 AD |  if_e	jmp	#LR__2182
19ea8     32 93 02 F6 | 	mov	arg01, objptr
19eac     51 00 00 FF 
19eb0     10 93 06 F1 | 	add	arg01, ##41744
19eb4     51 00 00 FF 
19eb8     D8 64 06 F1 | 	add	objptr, ##41688
19ebc     32 95 02 FB | 	rdlong	arg02, objptr
19ec0     18 96 06 F6 | 	mov	arg03, #24
19ec4     46 00 00 FF 
19ec8     0C 64 86 F1 | 	sub	objptr, ##35852
19ecc     C8 9E B0 FD | 	call	#_psram_spin2_read1
19ed0     3C 00 00 FF 
19ed4     D0 65 06 F1 | 	add	objptr, ##31184
19ed8     32 93 02 F6 | 	mov	arg01, objptr
19edc     09 00 00 FF 
19ee0     3C 64 06 F1 | 	add	objptr, ##4668
19ee4     32 95 02 FB | 	rdlong	arg02, objptr
19ee8     0B 00 00 FF 
19eec     54 64 86 F1 | 	sub	objptr, ##5716
19ef0     32 AD 02 FB | 	rdlong	local04, objptr
19ef4     01 AC 66 F0 | 	shl	local04, #1
19ef8     56 95 02 F1 | 	add	arg02, local04
19efc     0B 00 00 FF 
19f00     94 64 06 F1 | 	add	objptr, ##5780
19f04     32 97 02 FB | 	rdlong	arg03, objptr
19f08     40 64 86 F1 | 	sub	objptr, #64
19f0c     32 AD 02 FB | 	rdlong	local04, objptr
19f10     56 97 82 F1 | 	sub	arg03, local04
19f14     46 00 00 FF 
19f18     0C 64 86 F1 | 	sub	objptr, ##35852
19f1c     78 9E B0 FD | 	call	#_psram_spin2_read1
19f20     46 00 00 FF 
19f24     4C 64 06 F1 | 	add	objptr, ##35916
19f28     32 AD 02 FB | 	rdlong	local04, objptr
19f2c     40 64 86 F1 | 	sub	objptr, #64
19f30     32 95 02 FB | 	rdlong	arg02, objptr
19f34     4A AD 82 F1 | 	sub	local04, arg02
19f38     0B 00 00 FF 
19f3c     54 64 86 F1 | 	sub	objptr, ##5716
19f40     32 95 02 FB | 	rdlong	arg02, objptr
19f44     4A AD 12 FD | 	qdiv	local04, arg02
19f48     05 00 00 FF 
19f4c     18 64 06 F1 | 	add	objptr, ##2584
19f50     18 AC 62 FD | 	getqx	local04
19f54     03 AC 86 F1 | 	sub	local04, #3
19f58     32 AD 62 FC | 	wrlong	local04, objptr
19f5c     06 00 00 FF 
19f60     3C 64 06 F1 | 	add	objptr, ##3132
19f64     32 AD 02 FB | 	rdlong	local04, objptr
19f68     08 64 06 F1 | 	add	objptr, #8
19f6c     32 AD 62 FC | 	wrlong	local04, objptr
19f70     51 00 00 FF 
19f74     E0 64 86 F1 | 	sub	objptr, ##41696
19f78                 | LR__2182
19f78     51 00 00 FF 
19f7c     24 65 06 F1 | 	add	objptr, ##41764
19f80     32 AD 02 FB | 	rdlong	local04, objptr
19f84     4C 64 86 F1 | 	sub	objptr, #76
19f88     32 AD 62 FC | 	wrlong	local04, objptr
19f8c     04 64 06 F1 | 	add	objptr, #4
19f90     32 93 02 FB | 	rdlong	arg01, objptr
19f94     51 00 00 FF 
19f98     DC 64 86 F1 | 	sub	objptr, ##41692
19f9c     E4 35 BF FD | 	call	#_execute_line
19fa0     51 00 00 FF 
19fa4     DC 64 06 F1 | 	add	objptr, ##41692
19fa8     32 7B 62 FC | 	wrlong	result1, objptr
19fac     04 64 86 F1 | 	sub	objptr, #4
19fb0     32 AD 02 FB | 	rdlong	local04, objptr
19fb4     51 00 00 FF 
19fb8     D8 64 86 F1 | 	sub	objptr, ##41688
19fbc     FF FF 3F FF 
19fc0     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
19fc4     4C 00 90 AD |  if_e	jmp	#LR__2185
19fc8     E0 92 06 F6 | 	mov	arg01, #224
19fcc     54 A1 B0 FD | 	call	#_usbnew_spin2_keystate
19fd0     00 7A 0E F2 | 	cmp	result1, #0 wz
19fd4     10 00 90 5D |  if_ne	jmp	#LR__2183
19fd8     E4 92 06 F6 | 	mov	arg01, #228
19fdc     44 A1 B0 FD | 	call	#_usbnew_spin2_keystate
19fe0     00 7A 0E F2 | 	cmp	result1, #0 wz
19fe4     10 00 90 AD |  if_e	jmp	#LR__2184
19fe8                 | LR__2183
19fe8     06 92 06 F6 | 	mov	arg01, #6
19fec     34 A1 B0 FD | 	call	#_usbnew_spin2_keystate
19ff0     00 7A 0E F2 | 	cmp	result1, #0 wz
19ff4     1C 00 90 5D |  if_ne	jmp	#LR__2185
19ff8                 | LR__2184
19ff8     51 00 00 FF 
19ffc     0C 65 06 F1 | 	add	objptr, ##41740
1a000     32 AD 02 FB | 	rdlong	local04, objptr
1a004     51 00 00 FF 
1a008     0C 65 86 F1 | 	sub	objptr, ##41740
1a00c     02 AC 0E F2 | 	cmp	local04, #2 wz
1a010     70 FE 9F 5D |  if_ne	jmp	#LR__2181
1a014                 | LR__2185
1a014                 | '   ''do whatever kbm.peek_latest_key()=$106 
1a014                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1a014     51 00 00 FF 
1a018     D8 64 06 F1 | 	add	objptr, ##41688
1a01c     32 AD 02 FB | 	rdlong	local04, objptr
1a020     51 00 00 FF 
1a024     D8 64 86 F1 | 	sub	objptr, ##41688
1a028     FF FF 3F FF 
1a02c     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
1a030     AC 00 90 AD |  if_e	jmp	#LR__2186
1a034     51 00 00 FF 
1a038     0C 65 06 F1 | 	add	objptr, ##41740
1a03c     32 AD 02 FB | 	rdlong	local04, objptr
1a040     51 00 00 FF 
1a044     0C 65 86 F1 | 	sub	objptr, ##41740
1a048     01 AC 0E F2 | 	cmp	local04, #1 wz
1a04c     90 00 90 5D |  if_ne	jmp	#LR__2186
1a050                 | '   print: print "Stopped at line ";runheader(0) 
1a050     00 92 06 F6 | 	mov	arg01, #0
1a054     E4 FE B0 FD | 	call	#__system___getiolock_0622
1a058     3D 93 02 F6 | 	mov	arg01, result1
1a05c     58 A9 B0 FD | 	call	#__system___lockmem
1a060     00 92 06 F6 | 	mov	arg01, #0
1a064     0A 94 06 F6 | 	mov	arg02, #10
1a068     00 96 06 F6 | 	mov	arg03, #0
1a06c     E4 B5 B0 FD | 	call	#__system___basic_print_char
1a070     00 92 06 F6 | 	mov	arg01, #0
1a074     C4 FE B0 FD | 	call	#__system___getiolock_0622
1a078     3D 01 68 FC | 	wrlong	#0, result1
1a07c     00 92 06 F6 | 	mov	arg01, #0
1a080     B8 FE B0 FD | 	call	#__system___getiolock_0622
1a084     3D 93 02 F6 | 	mov	arg01, result1
1a088     2C A9 B0 FD | 	call	#__system___lockmem
1a08c     98 01 00 FF 
1a090     FA 94 06 F6 | 	mov	arg02, ##@LR__6083
1a094     00 92 06 F6 | 	mov	arg01, #0
1a098     00 96 06 F6 | 	mov	arg03, #0
1a09c     0C B6 B0 FD | 	call	#__system___basic_print_string
1a0a0     51 00 00 FF 
1a0a4     10 65 06 F1 | 	add	objptr, ##41744
1a0a8     32 95 02 FB | 	rdlong	arg02, objptr
1a0ac     51 00 00 FF 
1a0b0     10 65 86 F1 | 	sub	objptr, ##41744
1a0b4     00 92 06 F6 | 	mov	arg01, #0
1a0b8     00 96 06 F6 | 	mov	arg03, #0
1a0bc     0A 98 06 F6 | 	mov	arg04, #10
1a0c0     6C B6 B0 FD | 	call	#__system___basic_print_unsigned
1a0c4     00 92 06 F6 | 	mov	arg01, #0
1a0c8     0A 94 06 F6 | 	mov	arg02, #10
1a0cc     00 96 06 F6 | 	mov	arg03, #0
1a0d0     80 B5 B0 FD | 	call	#__system___basic_print_char
1a0d4     00 92 06 F6 | 	mov	arg01, #0
1a0d8     60 FE B0 FD | 	call	#__system___getiolock_0622
1a0dc     3D 01 68 FC | 	wrlong	#0, result1
1a0e0                 | LR__2186
1a0e0     51 00 00 FF 
1a0e4     0C 65 06 F1 | 	add	objptr, ##41740
1a0e8     32 01 68 FC | 	wrlong	#0, objptr
1a0ec     06 00 00 FF 
1a0f0     6C 64 86 F1 | 	sub	objptr, ##3180
1a0f4     32 A7 62 FC | 	wrlong	local01, objptr
1a0f8     06 00 00 FF 
1a0fc     38 64 06 F1 | 	add	objptr, ##3128
1a100     32 A9 62 FC | 	wrlong	local02, objptr
1a104     04 64 06 F1 | 	add	objptr, #4
1a108     32 AB 62 FC | 	wrlong	local03, objptr
1a10c     51 00 00 FF 
1a110     DC 64 86 F1 | 	sub	objptr, ##41692
1a114     11 92 06 F6 | 	mov	arg01, #17
1a118     08 94 06 F6 | 	mov	arg02, #8
1a11c     10 96 06 F6 | 	mov	arg03, #16
1a120     2C 7F B0 FD | 	call	#_hg010b_spin2_setspritesize
1a124     10 92 06 F6 | 	mov	arg01, #16
1a128     20 94 06 F6 | 	mov	arg02, #32
1a12c     20 96 06 F6 | 	mov	arg03, #32
1a130     1C 7F B0 FD | 	call	#_hg010b_spin2_setspritesize
1a134                 | LR__2187
1a134     E7 F0 03 F6 | 	mov	ptra, fp
1a138     F2 00 A0 FD | 	call	#popregs_
1a13c                 | _do_run_ret
1a13c     2D 00 64 FD | 	ret
1a140                 | 
1a140                 | ' 
1a140                 | ' ' ------------------ save
1a140                 | ' 
1a140                 | ' sub do_save                        
1a140                 | _do_save
1a140     0A CA 05 F6 | 	mov	COUNT_, #10
1a144     E8 00 A0 FD | 	call	#pushregs_
1a148     B8 F0 07 F1 | 	add	ptra, #184
1a14c     4B 00 00 FF 
1a150     A0 64 06 F1 | 	add	objptr, ##38560
1a154     32 97 02 FB | 	rdlong	arg03, objptr
1a158     4B AD 02 F6 | 	mov	local04, arg03
1a15c     01 AC 66 F0 | 	shl	local04, #1
1a160     4B AD 02 F1 | 	add	local04, arg03
1a164     02 AC 66 F0 | 	shl	local04, #2
1a168     03 00 00 FF 
1a16c     04 64 86 F1 | 	sub	objptr, ##1540
1a170     32 AD 02 F1 | 	add	local04, objptr
1a174     56 AF 02 FB | 	rdlong	local05, local04
1a178                 | ' 
1a178                 | ' numpar=compiledline(lineptr_e).result.uresult
1a178                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1a178     01 AE 56 F2 | 	cmps	local05, #1 wc
1a17c     48 00 00 FF 
1a180     9C 64 86 F1 | 	sub	objptr, ##37020
1a184     14 00 90 CD |  if_b	jmp	#LR__2190
1a188     FC 34 BF FD | 	call	#_pop
1a18c     3D A7 02 F6 | 	mov	local01, result1
1a190     3E A9 02 F6 | 	mov	local02, result2
1a194     3F AB 02 F6 | 	mov	local03, result3
1a198     18 00 90 FD | 	jmp	#LR__2191
1a19c                 | LR__2190
1a19c     53 00 00 FF 
1a1a0     1C 65 06 F1 | 	add	objptr, ##42780
1a1a4     32 A7 02 FB | 	rdlong	local01, objptr
1a1a8     53 00 00 FF 
1a1ac     1C 65 86 F1 | 	sub	objptr, ##42780
1a1b0     1F AA 06 F6 | 	mov	local03, #31
1a1b4                 | LR__2191
1a1b4                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1a1b4     4B 00 00 FF 
1a1b8     A8 64 06 F1 | 	add	objptr, ##38568
1a1bc     32 93 02 FB | 	rdlong	arg01, objptr
1a1c0     4B 00 00 FF 
1a1c4     A8 64 86 F1 | 	sub	objptr, ##38568
1a1c8     2C 71 B0 FD | 	call	#_pslpeek
1a1cc     FF FF 7F FF 
1a1d0     FF 7B 0E F2 | 	cmp	result1, ##-1 wz
1a1d4     10 00 90 5D |  if_ne	jmp	#LR__2192
1a1d8     1B 92 06 F6 | 	mov	arg01, #27
1a1dc     00 94 06 F6 | 	mov	arg02, #0
1a1e0     58 6E B0 FD | 	call	#_printerror
1a1e4     3C 02 90 FD | 	jmp	#LR__2198
1a1e8                 | LR__2192
1a1e8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1a1e8     2B AA 0E F2 | 	cmp	local03, #43 wz
1a1ec     10 00 90 5D |  if_ne	jmp	#LR__2193
1a1f0     53 93 02 F6 | 	mov	arg01, local01
1a1f4     00 36 BF FD | 	call	#_convertstring
1a1f8     3D A7 02 F6 | 	mov	local01, result1
1a1fc     1F AA 06 F6 | 	mov	local03, #31
1a200                 | LR__2193
1a200                 | ' if t1.result_type=result_string then
1a200     1F AA 0E F2 | 	cmp	local03, #31 wz
1a204     1C 02 90 5D |  if_ne	jmp	#LR__2197
1a208                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1a208     98 01 00 FF 
1a20c     0B 95 06 F6 | 	mov	arg02, ##@LR__6084
1a210     53 93 02 F6 | 	mov	arg01, local01
1a214     C8 A7 B0 FD | 	call	#__system___string_cmp
1a218     00 7A 0E F2 | 	cmp	result1, #0 wz
1a21c     53 00 00 AF 
1a220     1C 65 06 A1 |  if_e	add	objptr, ##42780
1a224     32 A7 02 AB |  if_e	rdlong	local01, objptr
1a228     53 00 00 FF 
1a22c     1C 65 C6 F3 | 	sumz	objptr, ##42780
1a230     32 A7 62 5C |  if_ne	wrlong	local01, objptr
1a234     53 00 00 5F 
1a238     1C 65 86 51 |  if_ne	sub	objptr, ##42780
1a23c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1a23c     09 92 06 F6 | 	mov	arg01, #9
1a240     50 F3 B0 FD | 	call	#__system__close
1a244     09 B0 06 F6 | 	mov	local06, #9
1a248     4B 00 00 FF 
1a24c     B4 64 06 F1 | 	add	objptr, ##38580
1a250     32 93 02 FB | 	rdlong	arg01, objptr
1a254     4B 00 00 FF 
1a258     B4 64 86 F1 | 	sub	objptr, ##38580
1a25c     98 01 00 FF 
1a260     0C 95 06 F6 | 	mov	arg02, ##@LR__6085
1a264     AC A7 B0 FD | 	call	#__system___string_concat
1a268     3D 93 02 F6 | 	mov	arg01, result1
1a26c     53 95 02 F6 | 	mov	arg02, local01
1a270     A0 A7 B0 FD | 	call	#__system___string_concat
1a274     3D 95 02 F6 | 	mov	arg02, result1
1a278     58 93 02 F6 | 	mov	arg01, local06
1a27c     0D 96 06 F6 | 	mov	arg03, #13
1a280     E4 B2 B0 FD | 	call	#__system___basic_open_string
1a284     4B 00 00 FF 
1a288     A8 64 06 F1 | 	add	objptr, ##38568
1a28c     32 B3 02 FB | 	rdlong	local07, objptr
1a290     4B 00 00 FF 
1a294     A8 64 86 F1 | 	sub	objptr, ##38568
1a298                 | '   saveptr=programstart
1a298                 | '   do
1a298                 | LR__2194
1a298     E7 92 02 F6 | 	mov	arg01, fp
1a29c     14 92 06 F1 | 	add	arg01, #20
1a2a0     59 95 02 F6 | 	mov	arg02, local07
1a2a4     18 96 06 F6 | 	mov	arg03, #24
1a2a8     0B 00 00 FF 
1a2ac     CC 64 06 F1 | 	add	objptr, ##5836
1a2b0     E4 9A B0 FD | 	call	#_psram_spin2_read1
1a2b4     E7 92 02 F6 | 	mov	arg01, fp
1a2b8     2C 92 06 F1 | 	add	arg01, #44
1a2bc     1C CE 05 F1 | 	add	fp, #28
1a2c0     E7 94 02 FB | 	rdlong	arg02, fp
1a2c4     04 CE 05 F1 | 	add	fp, #4
1a2c8     E7 96 02 FB | 	rdlong	arg03, fp
1a2cc     20 CE 85 F1 | 	sub	fp, #32
1a2d0     C4 9A B0 FD | 	call	#_psram_spin2_read1
1a2d4     0B 00 00 FF 
1a2d8     CC 64 86 F1 | 	sub	objptr, ##5836
1a2dc     98 01 00 FF 
1a2e0     0E B5 06 F6 | 	mov	local08, ##@LR__6086
1a2e4                 | '     psram.read1(varptr(header(0)),saveptr,24)
1a2e4                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1a2e4                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1a2e4     01 B6 06 F6 | 	mov	local09, #1
1a2e8     20 CE 05 F1 | 	add	fp, #32
1a2ec     E7 B8 02 FB | 	rdlong	local10, fp
1a2f0     20 CE 85 F1 | 	sub	fp, #32
1a2f4     01 B8 06 F1 | 	add	local10, #1
1a2f8                 | LR__2195
1a2f8     5C B7 52 F2 | 	cmps	local09, local10 wc
1a2fc     34 00 90 3D |  if_ae	jmp	#LR__2196
1a300     5B B3 02 F6 | 	mov	local07, local09
1a304     01 B2 86 F1 | 	sub	local07, #1
1a308     E7 B0 02 F6 | 	mov	local06, fp
1a30c     2C B0 06 F1 | 	add	local06, #44
1a310     58 B3 02 F1 | 	add	local07, local06
1a314     59 93 C2 FA | 	rdbyte	arg01, local07
1a318     08 C1 B0 FD | 	call	#__system__Chr_S
1a31c     3D 95 02 F6 | 	mov	arg02, result1
1a320     5A 93 02 F6 | 	mov	arg01, local08
1a324     EC A6 B0 FD | 	call	#__system___string_concat
1a328     3D B5 02 F6 | 	mov	local08, result1
1a32c     01 B6 06 F1 | 	add	local09, #1
1a330     C4 FF 9F FD | 	jmp	#LR__2195
1a334                 | LR__2196
1a334                 | '     print #9, saveline$
1a334     09 92 06 F6 | 	mov	arg01, #9
1a338     00 FC B0 FD | 	call	#__system___getiolock_0622
1a33c     3D 93 02 F6 | 	mov	arg01, result1
1a340     74 A6 B0 FD | 	call	#__system___lockmem
1a344     09 92 06 F6 | 	mov	arg01, #9
1a348     5A 95 02 F6 | 	mov	arg02, local08
1a34c     00 96 06 F6 | 	mov	arg03, #0
1a350     58 B3 B0 FD | 	call	#__system___basic_print_string
1a354     09 92 06 F6 | 	mov	arg01, #9
1a358     0A 94 06 F6 | 	mov	arg02, #10
1a35c     00 96 06 F6 | 	mov	arg03, #0
1a360     F0 B2 B0 FD | 	call	#__system___basic_print_char
1a364     09 92 06 F6 | 	mov	arg01, #9
1a368     D0 FB B0 FD | 	call	#__system___getiolock_0622
1a36c     3D 01 68 FC | 	wrlong	#0, result1
1a370     28 CE 05 F1 | 	add	fp, #40
1a374     E7 B0 02 FB | 	rdlong	local06, fp
1a378     58 B3 02 F6 | 	mov	local07, local06
1a37c     28 CE 85 F1 | 	sub	fp, #40
1a380     FF FF 3F FF 
1a384     FF B1 0E F2 | 	cmp	local06, ##2147483647 wz
1a388     0C FF 9F 5D |  if_ne	jmp	#LR__2194
1a38c                 | '   close #9  
1a38c     09 92 06 F6 | 	mov	arg01, #9
1a390     00 F2 B0 FD | 	call	#__system__close
1a394                 | '   print "Saved as ";currentdir$+"/"+loadname
1a394     00 92 06 F6 | 	mov	arg01, #0
1a398     A0 FB B0 FD | 	call	#__system___getiolock_0622
1a39c     3D 93 02 F6 | 	mov	arg01, result1
1a3a0     14 A6 B0 FD | 	call	#__system___lockmem
1a3a4     98 01 00 FF 
1a3a8     0F 95 06 F6 | 	mov	arg02, ##@LR__6087
1a3ac     00 92 06 F6 | 	mov	arg01, #0
1a3b0     00 96 06 F6 | 	mov	arg03, #0
1a3b4     F4 B2 B0 FD | 	call	#__system___basic_print_string
1a3b8     00 AC 06 F6 | 	mov	local04, #0
1a3bc     4B 00 00 FF 
1a3c0     B4 64 06 F1 | 	add	objptr, ##38580
1a3c4     32 93 02 FB | 	rdlong	arg01, objptr
1a3c8     4B 00 00 FF 
1a3cc     B4 64 86 F1 | 	sub	objptr, ##38580
1a3d0     98 01 00 FF 
1a3d4     19 95 06 F6 | 	mov	arg02, ##@LR__6088
1a3d8     38 A6 B0 FD | 	call	#__system___string_concat
1a3dc     3D 93 02 F6 | 	mov	arg01, result1
1a3e0     53 00 00 FF 
1a3e4     1C 65 06 F1 | 	add	objptr, ##42780
1a3e8     32 95 02 FB | 	rdlong	arg02, objptr
1a3ec     53 00 00 FF 
1a3f0     1C 65 86 F1 | 	sub	objptr, ##42780
1a3f4     1C A6 B0 FD | 	call	#__system___string_concat
1a3f8     3D 95 02 F6 | 	mov	arg02, result1
1a3fc     56 93 02 F6 | 	mov	arg01, local04
1a400     00 96 06 F6 | 	mov	arg03, #0
1a404     A4 B2 B0 FD | 	call	#__system___basic_print_string
1a408     00 92 06 F6 | 	mov	arg01, #0
1a40c     0A 94 06 F6 | 	mov	arg02, #10
1a410     00 96 06 F6 | 	mov	arg03, #0
1a414     3C B2 B0 FD | 	call	#__system___basic_print_char
1a418     00 92 06 F6 | 	mov	arg01, #0
1a41c     1C FB B0 FD | 	call	#__system___getiolock_0622
1a420     3D 01 68 FC | 	wrlong	#0, result1
1a424                 | LR__2197
1a424                 | LR__2198
1a424     E7 F0 03 F6 | 	mov	ptra, fp
1a428     F2 00 A0 FD | 	call	#popregs_
1a42c                 | _do_save_ret
1a42c     2D 00 64 FD | 	ret
1a430                 | 
1a430                 | ' 
1a430                 | ' ' ------------------ setamode
1a430                 | ' 
1a430                 | ' sub do_setamode
1a430                 | _do_setamode
1a430     02 CA 05 F6 | 	mov	COUNT_, #2
1a434     E8 00 A0 FD | 	call	#pushregs_
1a438     18 F0 07 F1 | 	add	ptra, #24
1a43c     48 32 BF FD | 	call	#_pop
1a440     3D 93 02 F6 | 	mov	arg01, result1
1a444     3E A7 02 F6 | 	mov	local01, result2
1a448     3F A9 02 F6 | 	mov	local02, result3
1a44c     E7 92 62 FC | 	wrlong	arg01, fp
1a450     04 CE 05 F1 | 	add	fp, #4
1a454     E7 A6 62 FC | 	wrlong	local01, fp
1a458     04 CE 05 F1 | 	add	fp, #4
1a45c     E7 A8 62 FC | 	wrlong	local02, fp
1a460     08 CE 85 F1 | 	sub	fp, #8
1a464     20 32 BF FD | 	call	#_pop
1a468     3D A9 02 F6 | 	mov	local02, result1
1a46c     0C CE 05 F1 | 	add	fp, #12
1a470     E7 A8 62 FC | 	wrlong	local02, fp
1a474     04 CE 05 F1 | 	add	fp, #4
1a478     E7 7C 62 FC | 	wrlong	result2, fp
1a47c     04 CE 05 F1 | 	add	fp, #4
1a480     E7 7E 62 FC | 	wrlong	result3, fp
1a484     08 CE 85 F1 | 	sub	fp, #8
1a488     E7 92 02 F6 | 	mov	arg01, fp
1a48c     0C CE 85 F1 | 	sub	fp, #12
1a490     D0 33 BF FD | 	call	#_converttoint
1a494     3D A7 02 F6 | 	mov	local01, result1
1a498     03 A6 66 F0 | 	shl	local01, #3
1a49c     3D A7 82 F1 | 	sub	local01, result1
1a4a0     02 A6 66 F0 | 	shl	local01, #2
1a4a4     32 A9 02 F6 | 	mov	local02, objptr
1a4a8     15 00 00 FF 
1a4ac     38 A9 06 F1 | 	add	local02, ##11064
1a4b0     54 A7 02 F1 | 	add	local01, local02
1a4b4     E7 92 02 F6 | 	mov	arg01, fp
1a4b8     A8 33 BF FD | 	call	#_converttoint
1a4bc     16 A6 06 F1 | 	add	local01, #22
1a4c0     53 7B 52 FC | 	wrword	result1, local01
1a4c4     E7 F0 03 F6 | 	mov	ptra, fp
1a4c8     F2 00 A0 FD | 	call	#popregs_
1a4cc                 | _do_setamode_ret
1a4cc     2D 00 64 FD | 	ret
1a4d0                 | 
1a4d0                 | ' 
1a4d0                 | ' 
1a4d0                 | ' ' ------------------ setcolor
1a4d0                 | ' 
1a4d0                 | ' sub do_setcolor
1a4d0                 | _do_setcolor
1a4d0     05 CA 05 F6 | 	mov	COUNT_, #5
1a4d4     E8 00 A0 FD | 	call	#pushregs_
1a4d8     20 F0 07 F1 | 	add	ptra, #32
1a4dc     4B 00 00 FF 
1a4e0     A0 64 06 F1 | 	add	objptr, ##38560
1a4e4     32 99 02 FB | 	rdlong	arg04, objptr
1a4e8     4C 97 02 F6 | 	mov	arg03, arg04
1a4ec     01 96 66 F0 | 	shl	arg03, #1
1a4f0     4C 97 02 F1 | 	add	arg03, arg04
1a4f4     02 96 66 F0 | 	shl	arg03, #2
1a4f8     03 00 00 FF 
1a4fc     04 64 86 F1 | 	sub	objptr, ##1540
1a500     32 97 02 F1 | 	add	arg03, objptr
1a504     4B A7 02 FB | 	rdlong	local01, arg03
1a508                 | ' 
1a508                 | ' numpar=compiledline(lineptr_e).result.uresult
1a508                 | ' 
1a508                 | ' if numpar=4 then
1a508     04 A6 0E F2 | 	cmp	local01, #4 wz
1a50c     48 00 00 FF 
1a510     9C 64 86 F1 | 	sub	objptr, ##37020
1a514     B4 00 90 5D |  if_ne	jmp	#LR__2200
1a518     6C 31 BF FD | 	call	#_pop
1a51c     3F A7 02 F6 | 	mov	local01, result3
1a520     E7 7A 62 FC | 	wrlong	result1, fp
1a524     04 CE 05 F1 | 	add	fp, #4
1a528     E7 7C 62 FC | 	wrlong	result2, fp
1a52c     04 CE 05 F1 | 	add	fp, #4
1a530     E7 A6 62 FC | 	wrlong	local01, fp
1a534     08 CE 85 F1 | 	sub	fp, #8
1a538     E7 92 02 F6 | 	mov	arg01, fp
1a53c     24 33 BF FD | 	call	#_converttoint
1a540     3D A9 02 F6 | 	mov	local02, result1
1a544     40 31 BF FD | 	call	#_pop
1a548     3F A7 02 F6 | 	mov	local01, result3
1a54c     E7 7A 62 FC | 	wrlong	result1, fp
1a550     04 CE 05 F1 | 	add	fp, #4
1a554     E7 7C 62 FC | 	wrlong	result2, fp
1a558     04 CE 05 F1 | 	add	fp, #4
1a55c     E7 A6 62 FC | 	wrlong	local01, fp
1a560     08 CE 85 F1 | 	sub	fp, #8
1a564     E7 92 02 F6 | 	mov	arg01, fp
1a568     F8 32 BF FD | 	call	#_converttoint
1a56c     3D AB 02 F6 | 	mov	local03, result1
1a570     14 31 BF FD | 	call	#_pop
1a574     3F A7 02 F6 | 	mov	local01, result3
1a578     E7 7A 62 FC | 	wrlong	result1, fp
1a57c     04 CE 05 F1 | 	add	fp, #4
1a580     E7 7C 62 FC | 	wrlong	result2, fp
1a584     04 CE 05 F1 | 	add	fp, #4
1a588     E7 A6 62 FC | 	wrlong	local01, fp
1a58c     08 CE 85 F1 | 	sub	fp, #8
1a590     E7 92 02 F6 | 	mov	arg01, fp
1a594     CC 32 BF FD | 	call	#_converttoint
1a598     3D AD 02 F6 | 	mov	local04, result1
1a59c     E8 30 BF FD | 	call	#_pop
1a5a0     3F A7 02 F6 | 	mov	local01, result3
1a5a4     E7 7A 62 FC | 	wrlong	result1, fp
1a5a8     04 CE 05 F1 | 	add	fp, #4
1a5ac     E7 7C 62 FC | 	wrlong	result2, fp
1a5b0     04 CE 05 F1 | 	add	fp, #4
1a5b4     E7 A6 62 FC | 	wrlong	local01, fp
1a5b8     08 CE 85 F1 | 	sub	fp, #8
1a5bc     E7 92 02 F6 | 	mov	arg01, fp
1a5c0     A0 32 BF FD | 	call	#_converttoint
1a5c4     3D AF 02 F6 | 	mov	local05, result1
1a5c8     C0 00 90 FD | 	jmp	#LR__2203
1a5cc                 | LR__2200
1a5cc     02 A6 0E F2 | 	cmp	local01, #2 wz
1a5d0     68 00 90 5D |  if_ne	jmp	#LR__2201
1a5d4     B0 30 BF FD | 	call	#_pop
1a5d8     3F AF 02 F6 | 	mov	local05, result3
1a5dc     E7 7A 62 FC | 	wrlong	result1, fp
1a5e0     04 CE 05 F1 | 	add	fp, #4
1a5e4     E7 7C 62 FC | 	wrlong	result2, fp
1a5e8     04 CE 05 F1 | 	add	fp, #4
1a5ec     E7 AE 62 FC | 	wrlong	local05, fp
1a5f0     08 CE 85 F1 | 	sub	fp, #8
1a5f4     E7 92 02 F6 | 	mov	arg01, fp
1a5f8     68 32 BF FD | 	call	#_converttoint
1a5fc     3D AD 02 F6 | 	mov	local04, result1
1a600     56 A9 E2 F8 | 	getbyte	local02, local04, #0
1a604     56 AB EA F8 | 	getbyte	local03, local04, #1
1a608     56 AD F2 F8 | 	getbyte	local04, local04, #2
1a60c     78 30 BF FD | 	call	#_pop
1a610     3F AF 02 F6 | 	mov	local05, result3
1a614     E7 7A 62 FC | 	wrlong	result1, fp
1a618     04 CE 05 F1 | 	add	fp, #4
1a61c     E7 7C 62 FC | 	wrlong	result2, fp
1a620     04 CE 05 F1 | 	add	fp, #4
1a624     E7 AE 62 FC | 	wrlong	local05, fp
1a628     08 CE 85 F1 | 	sub	fp, #8
1a62c     E7 92 02 F6 | 	mov	arg01, fp
1a630     30 32 BF FD | 	call	#_converttoint
1a634     3D AF 02 F6 | 	mov	local05, result1
1a638     50 00 90 FD | 	jmp	#LR__2202
1a63c                 | LR__2201
1a63c                 | '   print "setcolor: "; : printerror(39,runheader(0)) : return  
1a63c     00 92 06 F6 | 	mov	arg01, #0
1a640     F8 F8 B0 FD | 	call	#__system___getiolock_0622
1a644     3D 93 02 F6 | 	mov	arg01, result1
1a648     6C A3 B0 FD | 	call	#__system___lockmem
1a64c     98 01 00 FF 
1a650     1B 95 06 F6 | 	mov	arg02, ##@LR__6089
1a654     00 92 06 F6 | 	mov	arg01, #0
1a658     00 96 06 F6 | 	mov	arg03, #0
1a65c     4C B0 B0 FD | 	call	#__system___basic_print_string
1a660     00 92 06 F6 | 	mov	arg01, #0
1a664     D4 F8 B0 FD | 	call	#__system___getiolock_0622
1a668     3D 01 68 FC | 	wrlong	#0, result1
1a66c     51 00 00 FF 
1a670     10 65 06 F1 | 	add	objptr, ##41744
1a674     32 95 02 FB | 	rdlong	arg02, objptr
1a678     51 00 00 FF 
1a67c     10 65 86 F1 | 	sub	objptr, ##41744
1a680     27 92 06 F6 | 	mov	arg01, #39
1a684     B4 69 B0 FD | 	call	#_printerror
1a688     14 00 90 FD | 	jmp	#LR__2204
1a68c                 | LR__2202
1a68c                 | LR__2203
1a68c     57 93 02 F6 | 	mov	arg01, local05
1a690     56 95 02 F6 | 	mov	arg02, local04
1a694     55 97 02 F6 | 	mov	arg03, local03
1a698     54 99 02 F6 | 	mov	arg04, local02
1a69c     18 87 B0 FD | 	call	#_hg010b_spin2_setcolor
1a6a0                 | LR__2204
1a6a0     E7 F0 03 F6 | 	mov	ptra, fp
1a6a4     F2 00 A0 FD | 	call	#popregs_
1a6a8                 | _do_setcolor_ret
1a6a8     2D 00 64 FD | 	ret
1a6ac                 | 
1a6ac                 | ' 
1a6ac                 | ' ' ------------------ setdelay
1a6ac                 | ' 
1a6ac                 | ' sub do_setdelay
1a6ac                 | _do_setdelay
1a6ac     02 CA 05 F6 | 	mov	COUNT_, #2
1a6b0     E8 00 A0 FD | 	call	#pushregs_
1a6b4     18 F0 07 F1 | 	add	ptra, #24
1a6b8     CC 2F BF FD | 	call	#_pop
1a6bc     3D 93 02 F6 | 	mov	arg01, result1
1a6c0     3E A7 02 F6 | 	mov	local01, result2
1a6c4     3F A9 02 F6 | 	mov	local02, result3
1a6c8     E7 92 62 FC | 	wrlong	arg01, fp
1a6cc     04 CE 05 F1 | 	add	fp, #4
1a6d0     E7 A6 62 FC | 	wrlong	local01, fp
1a6d4     04 CE 05 F1 | 	add	fp, #4
1a6d8     E7 A8 62 FC | 	wrlong	local02, fp
1a6dc     08 CE 85 F1 | 	sub	fp, #8
1a6e0     A4 2F BF FD | 	call	#_pop
1a6e4     3D A9 02 F6 | 	mov	local02, result1
1a6e8     0C CE 05 F1 | 	add	fp, #12
1a6ec     E7 A8 62 FC | 	wrlong	local02, fp
1a6f0     04 CE 05 F1 | 	add	fp, #4
1a6f4     E7 7C 62 FC | 	wrlong	result2, fp
1a6f8     04 CE 05 F1 | 	add	fp, #4
1a6fc     E7 7E 62 FC | 	wrlong	result3, fp
1a700     08 CE 85 F1 | 	sub	fp, #8
1a704     E7 92 02 F6 | 	mov	arg01, fp
1a708     0C CE 85 F1 | 	sub	fp, #12
1a70c     54 31 BF FD | 	call	#_converttoint
1a710     3D A7 02 F6 | 	mov	local01, result1
1a714     03 A6 66 F0 | 	shl	local01, #3
1a718     3D A7 82 F1 | 	sub	local01, result1
1a71c     02 A6 66 F0 | 	shl	local01, #2
1a720     32 A9 02 F6 | 	mov	local02, objptr
1a724     15 00 00 FF 
1a728     38 A9 06 F1 | 	add	local02, ##11064
1a72c     54 A7 02 F1 | 	add	local01, local02
1a730     E7 92 02 F6 | 	mov	arg01, fp
1a734     2C 31 BF FD | 	call	#_converttoint
1a738     06 A6 06 F1 | 	add	local01, #6
1a73c     53 7B 52 FC | 	wrword	result1, local01
1a740     E7 F0 03 F6 | 	mov	ptra, fp
1a744     F2 00 A0 FD | 	call	#popregs_
1a748                 | _do_setdelay_ret
1a748     2D 00 64 FD | 	ret
1a74c                 | 
1a74c                 | ' 
1a74c                 | ' ' ------------------ setenv
1a74c                 | ' 
1a74c                 | ' sub do_setenv
1a74c                 | _do_setenv
1a74c     02 CA 05 F6 | 	mov	COUNT_, #2
1a750     E8 00 A0 FD | 	call	#pushregs_
1a754     18 F0 07 F1 | 	add	ptra, #24
1a758     2C 2F BF FD | 	call	#_pop
1a75c     3D 93 02 F6 | 	mov	arg01, result1
1a760     3E A7 02 F6 | 	mov	local01, result2
1a764     3F A9 02 F6 | 	mov	local02, result3
1a768     E7 92 62 FC | 	wrlong	arg01, fp
1a76c     04 CE 05 F1 | 	add	fp, #4
1a770     E7 A6 62 FC | 	wrlong	local01, fp
1a774     04 CE 05 F1 | 	add	fp, #4
1a778     E7 A8 62 FC | 	wrlong	local02, fp
1a77c     08 CE 85 F1 | 	sub	fp, #8
1a780     04 2F BF FD | 	call	#_pop
1a784     3D A9 02 F6 | 	mov	local02, result1
1a788     0C CE 05 F1 | 	add	fp, #12
1a78c     E7 A8 62 FC | 	wrlong	local02, fp
1a790     04 CE 05 F1 | 	add	fp, #4
1a794     E7 7C 62 FC | 	wrlong	result2, fp
1a798     04 CE 05 F1 | 	add	fp, #4
1a79c     E7 7E 62 FC | 	wrlong	result3, fp
1a7a0     08 CE 85 F1 | 	sub	fp, #8
1a7a4     E7 92 02 F6 | 	mov	arg01, fp
1a7a8     0C CE 85 F1 | 	sub	fp, #12
1a7ac     B4 30 BF FD | 	call	#_converttoint
1a7b0     3D A7 02 F6 | 	mov	local01, result1
1a7b4     03 A6 66 F0 | 	shl	local01, #3
1a7b8     3D A7 82 F1 | 	sub	local01, result1
1a7bc     02 A6 66 F0 | 	shl	local01, #2
1a7c0     32 A9 02 F6 | 	mov	local02, objptr
1a7c4     15 00 00 FF 
1a7c8     38 A9 06 F1 | 	add	local02, ##11064
1a7cc     54 A7 02 F1 | 	add	local01, local02
1a7d0     E7 92 02 F6 | 	mov	arg01, fp
1a7d4     8C 30 BF FD | 	call	#_converttoint
1a7d8     05 A6 06 F1 | 	add	local01, #5
1a7dc     53 7B 42 FC | 	wrbyte	result1, local01
1a7e0     E7 F0 03 F6 | 	mov	ptra, fp
1a7e4     F2 00 A0 FD | 	call	#popregs_
1a7e8                 | _do_setenv_ret
1a7e8     2D 00 64 FD | 	ret
1a7ec                 | 
1a7ec                 | ' 
1a7ec                 | ' ' ------------------ setlen
1a7ec                 | ' 
1a7ec                 | ' sub do_setlen
1a7ec                 | _do_setlen
1a7ec     02 CA 05 F6 | 	mov	COUNT_, #2
1a7f0     E8 00 A0 FD | 	call	#pushregs_
1a7f4     18 F0 07 F1 | 	add	ptra, #24
1a7f8     8C 2E BF FD | 	call	#_pop
1a7fc     3D 93 02 F6 | 	mov	arg01, result1
1a800     3E A7 02 F6 | 	mov	local01, result2
1a804     3F A9 02 F6 | 	mov	local02, result3
1a808     E7 92 62 FC | 	wrlong	arg01, fp
1a80c     04 CE 05 F1 | 	add	fp, #4
1a810     E7 A6 62 FC | 	wrlong	local01, fp
1a814     04 CE 05 F1 | 	add	fp, #4
1a818     E7 A8 62 FC | 	wrlong	local02, fp
1a81c     08 CE 85 F1 | 	sub	fp, #8
1a820     64 2E BF FD | 	call	#_pop
1a824     3D A9 02 F6 | 	mov	local02, result1
1a828     0C CE 05 F1 | 	add	fp, #12
1a82c     E7 A8 62 FC | 	wrlong	local02, fp
1a830     04 CE 05 F1 | 	add	fp, #4
1a834     E7 7C 62 FC | 	wrlong	result2, fp
1a838     04 CE 05 F1 | 	add	fp, #4
1a83c     E7 7E 62 FC | 	wrlong	result3, fp
1a840     08 CE 85 F1 | 	sub	fp, #8
1a844     E7 92 02 F6 | 	mov	arg01, fp
1a848     0C CE 85 F1 | 	sub	fp, #12
1a84c     14 30 BF FD | 	call	#_converttoint
1a850     3D A7 02 F6 | 	mov	local01, result1
1a854     03 A6 66 F0 | 	shl	local01, #3
1a858     3D A7 82 F1 | 	sub	local01, result1
1a85c     02 A6 66 F0 | 	shl	local01, #2
1a860     32 A9 02 F6 | 	mov	local02, objptr
1a864     15 00 00 FF 
1a868     38 A9 06 F1 | 	add	local02, ##11064
1a86c     54 A7 02 F1 | 	add	local01, local02
1a870     E7 92 02 F6 | 	mov	arg01, fp
1a874     A8 30 BF FD | 	call	#_converttofloat
1a878     08 A6 06 F1 | 	add	local01, #8
1a87c     53 7B 62 FC | 	wrlong	result1, local01
1a880     E7 F0 03 F6 | 	mov	ptra, fp
1a884     F2 00 A0 FD | 	call	#popregs_
1a888                 | _do_setlen_ret
1a888     2D 00 64 FD | 	ret
1a88c                 | 
1a88c                 | ' 
1a88c                 | ' ' ------------------ setpan
1a88c                 | ' 
1a88c                 | ' sub do_setpan
1a88c                 | _do_setpan
1a88c     02 CA 05 F6 | 	mov	COUNT_, #2
1a890     E8 00 A0 FD | 	call	#pushregs_
1a894     18 F0 07 F1 | 	add	ptra, #24
1a898     EC 2D BF FD | 	call	#_pop
1a89c     3D 93 02 F6 | 	mov	arg01, result1
1a8a0     3E A7 02 F6 | 	mov	local01, result2
1a8a4     3F A9 02 F6 | 	mov	local02, result3
1a8a8     E7 92 62 FC | 	wrlong	arg01, fp
1a8ac     04 CE 05 F1 | 	add	fp, #4
1a8b0     E7 A6 62 FC | 	wrlong	local01, fp
1a8b4     04 CE 05 F1 | 	add	fp, #4
1a8b8     E7 A8 62 FC | 	wrlong	local02, fp
1a8bc     08 CE 85 F1 | 	sub	fp, #8
1a8c0     C4 2D BF FD | 	call	#_pop
1a8c4     3D A9 02 F6 | 	mov	local02, result1
1a8c8     0C CE 05 F1 | 	add	fp, #12
1a8cc     E7 A8 62 FC | 	wrlong	local02, fp
1a8d0     04 CE 05 F1 | 	add	fp, #4
1a8d4     E7 7C 62 FC | 	wrlong	result2, fp
1a8d8     04 CE 05 F1 | 	add	fp, #4
1a8dc     E7 7E 62 FC | 	wrlong	result3, fp
1a8e0     08 CE 85 F1 | 	sub	fp, #8
1a8e4     E7 92 02 F6 | 	mov	arg01, fp
1a8e8     0C CE 85 F1 | 	sub	fp, #12
1a8ec     74 2F BF FD | 	call	#_converttoint
1a8f0     3D A7 02 F6 | 	mov	local01, result1
1a8f4     03 A6 66 F0 | 	shl	local01, #3
1a8f8     3D A7 82 F1 | 	sub	local01, result1
1a8fc     02 A6 66 F0 | 	shl	local01, #2
1a900     32 A9 02 F6 | 	mov	local02, objptr
1a904     15 00 00 FF 
1a908     38 A9 06 F1 | 	add	local02, ##11064
1a90c     54 A7 02 F1 | 	add	local01, local02
1a910     E7 92 02 F6 | 	mov	arg01, fp
1a914     08 30 BF FD | 	call	#_converttofloat
1a918     10 A6 06 F1 | 	add	local01, #16
1a91c     53 7B 62 FC | 	wrlong	result1, local01
1a920     E7 F0 03 F6 | 	mov	ptra, fp
1a924     F2 00 A0 FD | 	call	#popregs_
1a928                 | _do_setpan_ret
1a928     2D 00 64 FD | 	ret
1a92c                 | 
1a92c                 | ' 
1a92c                 | ' ' ------------------ setsustain
1a92c                 | ' 
1a92c                 | ' sub do_setsustain
1a92c                 | _do_setsustain
1a92c     02 CA 05 F6 | 	mov	COUNT_, #2
1a930     E8 00 A0 FD | 	call	#pushregs_
1a934     18 F0 07 F1 | 	add	ptra, #24
1a938     4C 2D BF FD | 	call	#_pop
1a93c     3D 93 02 F6 | 	mov	arg01, result1
1a940     3E A7 02 F6 | 	mov	local01, result2
1a944     3F A9 02 F6 | 	mov	local02, result3
1a948     E7 92 62 FC | 	wrlong	arg01, fp
1a94c     04 CE 05 F1 | 	add	fp, #4
1a950     E7 A6 62 FC | 	wrlong	local01, fp
1a954     04 CE 05 F1 | 	add	fp, #4
1a958     E7 A8 62 FC | 	wrlong	local02, fp
1a95c     08 CE 85 F1 | 	sub	fp, #8
1a960     24 2D BF FD | 	call	#_pop
1a964     3D A9 02 F6 | 	mov	local02, result1
1a968     0C CE 05 F1 | 	add	fp, #12
1a96c     E7 A8 62 FC | 	wrlong	local02, fp
1a970     04 CE 05 F1 | 	add	fp, #4
1a974     E7 7C 62 FC | 	wrlong	result2, fp
1a978     04 CE 05 F1 | 	add	fp, #4
1a97c     E7 7E 62 FC | 	wrlong	result3, fp
1a980     08 CE 85 F1 | 	sub	fp, #8
1a984     E7 92 02 F6 | 	mov	arg01, fp
1a988     0C CE 85 F1 | 	sub	fp, #12
1a98c     D4 2E BF FD | 	call	#_converttoint
1a990     3D A7 02 F6 | 	mov	local01, result1
1a994     03 A6 66 F0 | 	shl	local01, #3
1a998     3D A7 82 F1 | 	sub	local01, result1
1a99c     02 A6 66 F0 | 	shl	local01, #2
1a9a0     32 A9 02 F6 | 	mov	local02, objptr
1a9a4     15 00 00 FF 
1a9a8     38 A9 06 F1 | 	add	local02, ##11064
1a9ac     54 A7 02 F1 | 	add	local01, local02
1a9b0     E7 92 02 F6 | 	mov	arg01, fp
1a9b4     AC 2E BF FD | 	call	#_converttoint
1a9b8     14 A6 06 F1 | 	add	local01, #20
1a9bc     53 7B 52 FC | 	wrword	result1, local01
1a9c0     E7 F0 03 F6 | 	mov	ptra, fp
1a9c4     F2 00 A0 FD | 	call	#popregs_
1a9c8                 | _do_setsustain_ret
1a9c8     2D 00 64 FD | 	ret
1a9cc                 | 
1a9cc                 | ' 
1a9cc                 | ' ' ------------------ setvol
1a9cc                 | ' 
1a9cc                 | ' sub do_setvol
1a9cc                 | _do_setvol
1a9cc     02 CA 05 F6 | 	mov	COUNT_, #2
1a9d0     E8 00 A0 FD | 	call	#pushregs_
1a9d4     18 F0 07 F1 | 	add	ptra, #24
1a9d8     AC 2C BF FD | 	call	#_pop
1a9dc     3D 93 02 F6 | 	mov	arg01, result1
1a9e0     3E A7 02 F6 | 	mov	local01, result2
1a9e4     3F A9 02 F6 | 	mov	local02, result3
1a9e8     E7 92 62 FC | 	wrlong	arg01, fp
1a9ec     04 CE 05 F1 | 	add	fp, #4
1a9f0     E7 A6 62 FC | 	wrlong	local01, fp
1a9f4     04 CE 05 F1 | 	add	fp, #4
1a9f8     E7 A8 62 FC | 	wrlong	local02, fp
1a9fc     08 CE 85 F1 | 	sub	fp, #8
1aa00     84 2C BF FD | 	call	#_pop
1aa04     3D A9 02 F6 | 	mov	local02, result1
1aa08     0C CE 05 F1 | 	add	fp, #12
1aa0c     E7 A8 62 FC | 	wrlong	local02, fp
1aa10     04 CE 05 F1 | 	add	fp, #4
1aa14     E7 7C 62 FC | 	wrlong	result2, fp
1aa18     04 CE 05 F1 | 	add	fp, #4
1aa1c     E7 7E 62 FC | 	wrlong	result3, fp
1aa20     08 CE 85 F1 | 	sub	fp, #8
1aa24     E7 92 02 F6 | 	mov	arg01, fp
1aa28     0C CE 85 F1 | 	sub	fp, #12
1aa2c     34 2E BF FD | 	call	#_converttoint
1aa30     3D A7 02 F6 | 	mov	local01, result1
1aa34     03 A6 66 F0 | 	shl	local01, #3
1aa38     3D A7 82 F1 | 	sub	local01, result1
1aa3c     02 A6 66 F0 | 	shl	local01, #2
1aa40     32 A9 02 F6 | 	mov	local02, objptr
1aa44     15 00 00 FF 
1aa48     38 A9 06 F1 | 	add	local02, ##11064
1aa4c     54 A7 02 F1 | 	add	local01, local02
1aa50     E7 92 02 F6 | 	mov	arg01, fp
1aa54     C8 2E BF FD | 	call	#_converttofloat
1aa58     0C A6 06 F1 | 	add	local01, #12
1aa5c     53 7B 62 FC | 	wrlong	result1, local01
1aa60     E7 F0 03 F6 | 	mov	ptra, fp
1aa64     F2 00 A0 FD | 	call	#popregs_
1aa68                 | _do_setvol_ret
1aa68     2D 00 64 FD | 	ret
1aa6c                 | 
1aa6c                 | ' 
1aa6c                 | ' ' ------------------ setwave
1aa6c                 | ' 
1aa6c                 | ' sub do_setwave
1aa6c                 | _do_setwave
1aa6c     02 CA 05 F6 | 	mov	COUNT_, #2
1aa70     E8 00 A0 FD | 	call	#pushregs_
1aa74     18 F0 07 F1 | 	add	ptra, #24
1aa78     0C 2C BF FD | 	call	#_pop
1aa7c     3D 93 02 F6 | 	mov	arg01, result1
1aa80     3E A7 02 F6 | 	mov	local01, result2
1aa84     3F A9 02 F6 | 	mov	local02, result3
1aa88     E7 92 62 FC | 	wrlong	arg01, fp
1aa8c     04 CE 05 F1 | 	add	fp, #4
1aa90     E7 A6 62 FC | 	wrlong	local01, fp
1aa94     04 CE 05 F1 | 	add	fp, #4
1aa98     E7 A8 62 FC | 	wrlong	local02, fp
1aa9c     08 CE 85 F1 | 	sub	fp, #8
1aaa0     E4 2B BF FD | 	call	#_pop
1aaa4     3D A9 02 F6 | 	mov	local02, result1
1aaa8     0C CE 05 F1 | 	add	fp, #12
1aaac     E7 A8 62 FC | 	wrlong	local02, fp
1aab0     04 CE 05 F1 | 	add	fp, #4
1aab4     E7 7C 62 FC | 	wrlong	result2, fp
1aab8     04 CE 05 F1 | 	add	fp, #4
1aabc     E7 7E 62 FC | 	wrlong	result3, fp
1aac0     08 CE 85 F1 | 	sub	fp, #8
1aac4     E7 92 02 F6 | 	mov	arg01, fp
1aac8     0C CE 85 F1 | 	sub	fp, #12
1aacc     94 2D BF FD | 	call	#_converttoint
1aad0     3D A7 02 F6 | 	mov	local01, result1
1aad4     03 A6 66 F0 | 	shl	local01, #3
1aad8     3D A7 82 F1 | 	sub	local01, result1
1aadc     02 A6 66 F0 | 	shl	local01, #2
1aae0     32 A9 02 F6 | 	mov	local02, objptr
1aae4     15 00 00 FF 
1aae8     38 A9 06 F1 | 	add	local02, ##11064
1aaec     54 A7 02 F1 | 	add	local01, local02
1aaf0     E7 92 02 F6 | 	mov	arg01, fp
1aaf4     6C 2D BF FD | 	call	#_converttoint
1aaf8     04 A6 06 F1 | 	add	local01, #4
1aafc     53 7B 42 FC | 	wrbyte	result1, local01
1ab00     E7 F0 03 F6 | 	mov	ptra, fp
1ab04     F2 00 A0 FD | 	call	#popregs_
1ab08                 | _do_setwave_ret
1ab08     2D 00 64 FD | 	ret
1ab0c                 | 
1ab0c                 | ' 
1ab0c                 | ' ' ------------------ shutup
1ab0c                 | ' 
1ab0c                 | ' sub do_shutup
1ab0c                 | _do_shutup
1ab0c     03 CA 05 F6 | 	mov	COUNT_, #3
1ab10     E8 00 A0 FD | 	call	#pushregs_
1ab14     18 F0 07 F1 | 	add	ptra, #24
1ab18     4B 00 00 FF 
1ab1c     A0 64 06 F1 | 	add	objptr, ##38560
1ab20     32 A7 02 FB | 	rdlong	local01, objptr
1ab24     53 A9 02 F6 | 	mov	local02, local01
1ab28     01 A8 66 F0 | 	shl	local02, #1
1ab2c     53 A9 02 F1 | 	add	local02, local01
1ab30     02 A8 66 F0 | 	shl	local02, #2
1ab34     03 00 00 FF 
1ab38     04 64 86 F1 | 	sub	objptr, ##1540
1ab3c     32 A9 02 F1 | 	add	local02, objptr
1ab40     54 A9 0A FB | 	rdlong	local02, local02 wz
1ab44                 | ' 
1ab44                 | ' numpar=compiledline(lineptr_e).result.uresult
1ab44                 | ' if numpar=0 then
1ab44     48 00 00 FF 
1ab48     9C 64 86 F1 | 	sub	objptr, ##37020
1ab4c     40 00 90 5D |  if_ne	jmp	#LR__2212
1ab50                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1ab50     00 AA 06 F6 | 	mov	local03, #0
1ab54     38 00 00 FF 
1ab58     30 64 06 F1 | 	add	objptr, ##28720
1ab5c     D7 12 48 FB | 	callpa	#(@LR__2211-@LR__2210)>>2,fcache_load_ptr_
1ab60                 | LR__2210
1ab60     32 93 02 FB | 	rdlong	arg01, objptr
1ab64     55 A9 02 F6 | 	mov	local02, local03
1ab68     06 A8 66 F0 | 	shl	local02, #6
1ab6c     54 93 02 F1 | 	add	arg01, local02
1ab70     14 92 06 F1 | 	add	arg01, #20
1ab74     49 01 58 FC | 	wrword	#0, arg01
1ab78     01 AA 06 F1 | 	add	local03, #1
1ab7c     08 AA 56 F2 | 	cmps	local03, #8 wc
1ab80     DC FF 9F CD |  if_b	jmp	#LR__2210
1ab84                 | LR__2211
1ab84     38 00 00 FF 
1ab88     30 64 86 F1 | 	sub	objptr, ##28720
1ab8c     58 00 90 FD | 	jmp	#LR__2213
1ab90                 | LR__2212
1ab90     F4 2A BF FD | 	call	#_pop
1ab94     3F A7 02 F6 | 	mov	local01, result3
1ab98     E7 7A 62 FC | 	wrlong	result1, fp
1ab9c     04 CE 05 F1 | 	add	fp, #4
1aba0     E7 7C 62 FC | 	wrlong	result2, fp
1aba4     04 CE 05 F1 | 	add	fp, #4
1aba8     E7 A6 62 FC | 	wrlong	local01, fp
1abac     08 CE 85 F1 | 	sub	fp, #8
1abb0     E7 92 02 F6 | 	mov	arg01, fp
1abb4     AC 2C BF FD | 	call	#_converttoint
1abb8     3D AB 52 F6 | 	abs	local03, result1 wc
1abbc     07 AA 06 F5 | 	and	local03, #7
1abc0     55 A9 82 F6 | 	negc	local02, local03
1abc4     38 00 00 FF 
1abc8     30 64 06 F1 | 	add	objptr, ##28720
1abcc     32 93 02 FB | 	rdlong	arg01, objptr
1abd0     38 00 00 FF 
1abd4     30 64 86 F1 | 	sub	objptr, ##28720
1abd8     06 A8 66 F0 | 	shl	local02, #6
1abdc     54 93 02 F1 | 	add	arg01, local02
1abe0     14 92 06 F1 | 	add	arg01, #20
1abe4     49 01 58 FC | 	wrword	#0, arg01
1abe8                 | LR__2213
1abe8     E7 F0 03 F6 | 	mov	ptra, fp
1abec     F2 00 A0 FD | 	call	#popregs_
1abf0                 | _do_shutup_ret
1abf0     2D 00 64 FD | 	ret
1abf4                 | 
1abf4                 | ' 
1abf4                 | ' ' ------------------ sin
1abf4                 | ' 
1abf4                 | ' sub do_sin
1abf4                 | _do_sin
1abf4     01 CA 05 F6 | 	mov	COUNT_, #1
1abf8     E8 00 A0 FD | 	call	#pushregs_
1abfc     10 F0 07 F1 | 	add	ptra, #16
1ac00     4B 00 00 FF 
1ac04     A0 64 06 F1 | 	add	objptr, ##38560
1ac08     32 97 02 FB | 	rdlong	arg03, objptr
1ac0c     4B 95 02 F6 | 	mov	arg02, arg03
1ac10     01 94 66 F0 | 	shl	arg02, #1
1ac14     4B 95 02 F1 | 	add	arg02, arg03
1ac18     02 94 66 F0 | 	shl	arg02, #2
1ac1c     03 00 00 FF 
1ac20     04 64 86 F1 | 	sub	objptr, ##1540
1ac24     32 95 02 F1 | 	add	arg02, objptr
1ac28     4A 97 02 FB | 	rdlong	arg03, arg02
1ac2c                 | ' 
1ac2c                 | ' numpar=compiledline(lineptr_e).result.uresult
1ac2c                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1ac2c     02 96 16 F2 | 	cmp	arg03, #2 wc
1ac30     48 00 00 FF 
1ac34     9C 64 86 F1 | 	sub	objptr, ##37020
1ac38     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1ac3c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2220
1ac40     00 92 06 F6 | 	mov	arg01, #0
1ac44     F4 F2 B0 FD | 	call	#__system___getiolock_0622
1ac48     3D 93 02 F6 | 	mov	arg01, result1
1ac4c     68 9D B0 FD | 	call	#__system___lockmem
1ac50     98 01 00 FF 
1ac54     26 95 06 F6 | 	mov	arg02, ##@LR__6090
1ac58     00 92 06 F6 | 	mov	arg01, #0
1ac5c     00 96 06 F6 | 	mov	arg03, #0
1ac60     48 AA B0 FD | 	call	#__system___basic_print_string
1ac64     00 92 06 F6 | 	mov	arg01, #0
1ac68     D0 F2 B0 FD | 	call	#__system___getiolock_0622
1ac6c     3D 01 68 FC | 	wrlong	#0, result1
1ac70     27 92 06 F6 | 	mov	arg01, #39
1ac74     00 94 06 F6 | 	mov	arg02, #0
1ac78     C0 63 B0 FD | 	call	#_printerror
1ac7c     64 00 90 FD | 	jmp	#LR__2221
1ac80                 | LR__2220
1ac80     04 2A BF FD | 	call	#_pop
1ac84     E7 7A 62 FC | 	wrlong	result1, fp
1ac88     04 CE 05 F1 | 	add	fp, #4
1ac8c     E7 7C 62 FC | 	wrlong	result2, fp
1ac90     04 CE 05 F1 | 	add	fp, #4
1ac94     E7 7E 62 FC | 	wrlong	result3, fp
1ac98     08 CE 85 F1 | 	sub	fp, #8
1ac9c     53 00 00 FF 
1aca0     00 65 06 F1 | 	add	objptr, ##42752
1aca4     32 A7 02 FB | 	rdlong	local01, objptr
1aca8     53 00 00 FF 
1acac     00 65 86 F1 | 	sub	objptr, ##42752
1acb0     E7 92 02 F6 | 	mov	arg01, fp
1acb4     68 2C BF FD | 	call	#_converttofloat
1acb8     3D 95 02 F6 | 	mov	arg02, result1
1acbc     53 93 02 F6 | 	mov	arg01, local01
1acc0     C4 C3 B0 FD | 	call	#__system___float_mul
1acc4     3D 93 02 F6 | 	mov	arg01, result1
1acc8     2C CD B0 FD | 	call	#__system____builtin_sinf
1accc     E7 7A 62 FC | 	wrlong	result1, fp
1acd0     08 CE 05 F1 | 	add	fp, #8
1acd4     E7 3C 68 FC | 	wrlong	#30, fp
1acd8     08 CE 85 F1 | 	sub	fp, #8
1acdc     E7 92 02 F6 | 	mov	arg01, fp
1ace0     34 2A BF FD | 	call	#_push
1ace4                 | LR__2221
1ace4     E7 F0 03 F6 | 	mov	ptra, fp
1ace8     F2 00 A0 FD | 	call	#popregs_
1acec                 | _do_sin_ret
1acec     2D 00 64 FD | 	ret
1acf0                 | 
1acf0                 | ' 
1acf0                 | ' ' ------------------ skip
1acf0                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1acf0                 | ' 
1acf0                 | ' sub do_skip
1acf0                 | _do_skip
1acf0     4B 00 00 FF 
1acf4     A0 64 06 F1 | 	add	objptr, ##38560
1acf8     32 81 02 FB | 	rdlong	_var01, objptr
1acfc     40 83 02 F6 | 	mov	_var02, _var01
1ad00     01 82 66 F0 | 	shl	_var02, #1
1ad04     40 83 02 F1 | 	add	_var02, _var01
1ad08     02 82 66 F0 | 	shl	_var02, #2
1ad0c     03 00 00 FF 
1ad10     04 64 86 F1 | 	sub	objptr, ##1540
1ad14     32 83 02 F1 | 	add	_var02, objptr
1ad18     41 83 02 FB | 	rdlong	_var02, _var02
1ad1c     01 82 86 F1 | 	sub	_var02, #1
1ad20     03 00 00 FF 
1ad24     04 64 06 F1 | 	add	objptr, ##1540
1ad28     32 83 62 FC | 	wrlong	_var02, objptr
1ad2c     4B 00 00 FF 
1ad30     A0 64 86 F1 | 	sub	objptr, ##38560
1ad34                 | _do_skip_ret
1ad34     2D 00 64 FD | 	ret
1ad38                 | 
1ad38                 | ' 
1ad38                 | ' ' ------------------ sprite
1ad38                 | ' 
1ad38                 | ' sub do_sprite
1ad38                 | _do_sprite
1ad38     02 CA 05 F6 | 	mov	COUNT_, #2
1ad3c     E8 00 A0 FD | 	call	#pushregs_
1ad40     30 F0 07 F1 | 	add	ptra, #48
1ad44     40 29 BF FD | 	call	#_pop
1ad48     3D 95 02 F6 | 	mov	arg02, result1
1ad4c     3E 97 02 F6 | 	mov	arg03, result2
1ad50     3F 93 02 F6 | 	mov	arg01, result3
1ad54     18 CE 05 F1 | 	add	fp, #24
1ad58     E7 94 62 FC | 	wrlong	arg02, fp
1ad5c     04 CE 05 F1 | 	add	fp, #4
1ad60     E7 96 62 FC | 	wrlong	arg03, fp
1ad64     04 CE 05 F1 | 	add	fp, #4
1ad68     E7 92 62 FC | 	wrlong	arg01, fp
1ad6c     20 CE 85 F1 | 	sub	fp, #32
1ad70     14 29 BF FD | 	call	#_pop
1ad74     3D 95 02 F6 | 	mov	arg02, result1
1ad78     3E 97 02 F6 | 	mov	arg03, result2
1ad7c     3F 93 02 F6 | 	mov	arg01, result3
1ad80     0C CE 05 F1 | 	add	fp, #12
1ad84     E7 94 62 FC | 	wrlong	arg02, fp
1ad88     04 CE 05 F1 | 	add	fp, #4
1ad8c     E7 96 62 FC | 	wrlong	arg03, fp
1ad90     04 CE 05 F1 | 	add	fp, #4
1ad94     E7 92 62 FC | 	wrlong	arg01, fp
1ad98     14 CE 85 F1 | 	sub	fp, #20
1ad9c     E8 28 BF FD | 	call	#_pop
1ada0     3F 95 02 F6 | 	mov	arg02, result3
1ada4     E7 7A 62 FC | 	wrlong	result1, fp
1ada8     04 CE 05 F1 | 	add	fp, #4
1adac     E7 7C 62 FC | 	wrlong	result2, fp
1adb0     04 CE 05 F1 | 	add	fp, #4
1adb4     E7 94 62 FC | 	wrlong	arg02, fp
1adb8     08 CE 85 F1 | 	sub	fp, #8
1adbc     E7 92 02 F6 | 	mov	arg01, fp
1adc0     A0 2A BF FD | 	call	#_converttoint
1adc4     3D A7 02 F6 | 	mov	local01, result1
1adc8     E7 92 02 F6 | 	mov	arg01, fp
1adcc     0C 92 06 F1 | 	add	arg01, #12
1add0     90 2A BF FD | 	call	#_converttoint
1add4     3D A9 02 F6 | 	mov	local02, result1
1add8     E7 92 02 F6 | 	mov	arg01, fp
1addc     18 92 06 F1 | 	add	arg01, #24
1ade0     80 2A BF FD | 	call	#_converttoint
1ade4     3D 97 02 F6 | 	mov	arg03, result1
1ade8     53 93 02 F6 | 	mov	arg01, local01
1adec     54 95 02 F6 | 	mov	arg02, local02
1adf0     F4 71 B0 FD | 	call	#_hg010b_spin2_setspritepos
1adf4     E7 F0 03 F6 | 	mov	ptra, fp
1adf8     F2 00 A0 FD | 	call	#popregs_
1adfc                 | _do_sprite_ret
1adfc     2D 00 64 FD | 	ret
1ae00                 | 
1ae00                 | ' 
1ae00                 | ' ' ------------------ sqr
1ae00                 | ' 
1ae00                 | ' sub do_sqr
1ae00                 | _do_sqr
1ae00     00 CA 05 F6 | 	mov	COUNT_, #0
1ae04     E8 00 A0 FD | 	call	#pushregs_
1ae08     10 F0 07 F1 | 	add	ptra, #16
1ae0c     4B 00 00 FF 
1ae10     A0 64 06 F1 | 	add	objptr, ##38560
1ae14     32 97 02 FB | 	rdlong	arg03, objptr
1ae18     4B 95 02 F6 | 	mov	arg02, arg03
1ae1c     01 94 66 F0 | 	shl	arg02, #1
1ae20     4B 95 02 F1 | 	add	arg02, arg03
1ae24     02 94 66 F0 | 	shl	arg02, #2
1ae28     03 00 00 FF 
1ae2c     04 64 86 F1 | 	sub	objptr, ##1540
1ae30     32 95 02 F1 | 	add	arg02, objptr
1ae34     4A 97 02 FB | 	rdlong	arg03, arg02
1ae38                 | ' 
1ae38                 | ' numpar=compiledline(lineptr_e).result.uresult
1ae38                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1ae38     02 96 16 F2 | 	cmp	arg03, #2 wc
1ae3c     48 00 00 FF 
1ae40     9C 64 86 F1 | 	sub	objptr, ##37020
1ae44     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1ae48     40 00 90 4D |  if_c_and_nz	jmp	#LR__2230
1ae4c     00 92 06 F6 | 	mov	arg01, #0
1ae50     E8 F0 B0 FD | 	call	#__system___getiolock_0622
1ae54     3D 93 02 F6 | 	mov	arg01, result1
1ae58     5C 9B B0 FD | 	call	#__system___lockmem
1ae5c     98 01 00 FF 
1ae60     2C 95 06 F6 | 	mov	arg02, ##@LR__6091
1ae64     00 92 06 F6 | 	mov	arg01, #0
1ae68     00 96 06 F6 | 	mov	arg03, #0
1ae6c     3C A8 B0 FD | 	call	#__system___basic_print_string
1ae70     00 92 06 F6 | 	mov	arg01, #0
1ae74     C4 F0 B0 FD | 	call	#__system___getiolock_0622
1ae78     3D 01 68 FC | 	wrlong	#0, result1
1ae7c     27 92 06 F6 | 	mov	arg01, #39
1ae80     00 94 06 F6 | 	mov	arg02, #0
1ae84     B4 61 B0 FD | 	call	#_printerror
1ae88     48 00 90 FD | 	jmp	#LR__2231
1ae8c                 | LR__2230
1ae8c     F8 27 BF FD | 	call	#_pop
1ae90     3F 97 02 F6 | 	mov	arg03, result3
1ae94     E7 7A 62 FC | 	wrlong	result1, fp
1ae98     04 CE 05 F1 | 	add	fp, #4
1ae9c     E7 7C 62 FC | 	wrlong	result2, fp
1aea0     04 CE 05 F1 | 	add	fp, #4
1aea4     E7 96 62 FC | 	wrlong	arg03, fp
1aea8     08 CE 85 F1 | 	sub	fp, #8
1aeac     E7 92 02 F6 | 	mov	arg01, fp
1aeb0     6C 2A BF FD | 	call	#_converttofloat
1aeb4     3D 93 02 F6 | 	mov	arg01, result1
1aeb8     F4 C0 B0 FD | 	call	#__system___float_sqrt
1aebc     E7 7A 62 FC | 	wrlong	result1, fp
1aec0     08 CE 05 F1 | 	add	fp, #8
1aec4     E7 3C 68 FC | 	wrlong	#30, fp
1aec8     08 CE 85 F1 | 	sub	fp, #8
1aecc     E7 92 02 F6 | 	mov	arg01, fp
1aed0     44 28 BF FD | 	call	#_push
1aed4                 | LR__2231
1aed4     E7 F0 03 F6 | 	mov	ptra, fp
1aed8     F2 00 A0 FD | 	call	#popregs_
1aedc                 | _do_sqr_ret
1aedc     2D 00 64 FD | 	ret
1aee0                 | 
1aee0                 | ' 
1aee0                 | ' ' ------------------ stick
1aee0                 | ' 
1aee0                 | ' sub do_stick
1aee0                 | _do_stick
1aee0     02 CA 05 F6 | 	mov	COUNT_, #2
1aee4     E8 00 A0 FD | 	call	#pushregs_
1aee8     10 F0 07 F1 | 	add	ptra, #16
1aeec     4B 00 00 FF 
1aef0     A0 64 06 F1 | 	add	objptr, ##38560
1aef4     32 A7 02 FB | 	rdlong	local01, objptr
1aef8     53 97 02 F6 | 	mov	arg03, local01
1aefc     01 96 66 F0 | 	shl	arg03, #1
1af00     53 97 02 F1 | 	add	arg03, local01
1af04     02 96 66 F0 | 	shl	arg03, #2
1af08     03 00 00 FF 
1af0c     04 64 86 F1 | 	sub	objptr, ##1540
1af10     32 97 02 F1 | 	add	arg03, objptr
1af14     4B A9 02 FB | 	rdlong	local02, arg03
1af18                 | ' 
1af18                 | ' numpar=compiledline(lineptr_e).result.uresult
1af18                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1af18     02 A8 16 F2 | 	cmp	local02, #2 wc
1af1c     48 00 00 FF 
1af20     9C 64 86 F1 | 	sub	objptr, ##37020
1af24     40 00 90 CD |  if_b	jmp	#LR__2240
1af28     00 92 06 F6 | 	mov	arg01, #0
1af2c     0C F0 B0 FD | 	call	#__system___getiolock_0622
1af30     3D 93 02 F6 | 	mov	arg01, result1
1af34     80 9A B0 FD | 	call	#__system___lockmem
1af38     98 01 00 FF 
1af3c     32 95 06 F6 | 	mov	arg02, ##@LR__6092
1af40     00 92 06 F6 | 	mov	arg01, #0
1af44     00 96 06 F6 | 	mov	arg03, #0
1af48     60 A7 B0 FD | 	call	#__system___basic_print_string
1af4c     00 92 06 F6 | 	mov	arg01, #0
1af50     E8 EF B0 FD | 	call	#__system___getiolock_0622
1af54     3D 01 68 FC | 	wrlong	#0, result1
1af58     27 92 06 F6 | 	mov	arg01, #39
1af5c     00 94 06 F6 | 	mov	arg02, #0
1af60     D8 60 B0 FD | 	call	#_printerror
1af64     E8 00 90 FD | 	jmp	#LR__2244
1af68                 | LR__2240
1af68                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1af68     00 A8 0E F2 | 	cmp	local02, #0 wz
1af6c     30 00 90 5D |  if_ne	jmp	#LR__2241
1af70     53 00 00 FF 
1af74     74 64 06 F1 | 	add	objptr, ##42612
1af78     32 A9 02 FB | 	rdlong	local02, objptr
1af7c     53 00 00 FF 
1af80     74 64 86 F1 | 	sub	objptr, ##42612
1af84     E7 A8 62 FC | 	wrlong	local02, fp
1af88     08 CE 05 F1 | 	add	fp, #8
1af8c     E7 3A 68 FC | 	wrlong	#29, fp
1af90     08 CE 85 F1 | 	sub	fp, #8
1af94     E7 92 02 F6 | 	mov	arg01, fp
1af98     7C 27 BF FD | 	call	#_push
1af9c     B0 00 90 FD | 	jmp	#LR__2244
1afa0                 | LR__2241
1afa0     E4 26 BF FD | 	call	#_pop
1afa4     E7 7A 62 FC | 	wrlong	result1, fp
1afa8     04 CE 05 F1 | 	add	fp, #4
1afac     E7 7C 62 FC | 	wrlong	result2, fp
1afb0     04 CE 05 F1 | 	add	fp, #4
1afb4     E7 7E 62 FC | 	wrlong	result3, fp
1afb8                 | ' t1=pop()
1afb8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1afb8     08 CE 85 F1 | 	sub	fp, #8
1afbc     1C 7E 0E F2 | 	cmp	result3, #28 wz
1afc0     08 CE 05 51 |  if_ne	add	fp, #8
1afc4     E7 A6 02 5B |  if_ne	rdlong	local01, fp
1afc8     08 CE 85 51 |  if_ne	sub	fp, #8
1afcc     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
1afd0     70 00 90 5D |  if_ne	jmp	#LR__2243
1afd4     E7 A6 02 FB | 	rdlong	local01, fp
1afd8     53 00 00 FF 
1afdc     60 65 06 F1 | 	add	objptr, ##42848
1afe0     32 A7 62 FC | 	wrlong	local01, objptr
1afe4                 | '   q=t1.result.uresult
1afe4                 | '   if q<7 then 
1afe4     53 00 00 FF 
1afe8     60 65 86 F1 | 	sub	objptr, ##42848
1afec     07 A6 56 F2 | 	cmps	local01, #7 wc
1aff0     40 00 90 3D |  if_ae	jmp	#LR__2242
1aff4     53 00 00 FF 
1aff8     60 65 06 F1 | 	add	objptr, ##42848
1affc     32 A7 02 FB | 	rdlong	local01, objptr
1b000     02 A6 66 F0 | 	shl	local01, #2
1b004     EC 64 86 F1 | 	sub	objptr, #236
1b008     32 A7 02 F1 | 	add	local01, objptr
1b00c     53 A9 02 FB | 	rdlong	local02, local01
1b010     E7 A8 62 FC | 	wrlong	local02, fp
1b014     08 CE 05 F1 | 	add	fp, #8
1b018     E7 3A 68 FC | 	wrlong	#29, fp
1b01c     08 CE 85 F1 | 	sub	fp, #8
1b020     E7 92 02 F6 | 	mov	arg01, fp
1b024     53 00 00 FF 
1b028     74 64 86 F1 | 	sub	objptr, ##42612
1b02c     E8 26 BF FD | 	call	#_push
1b030                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1b030     1C 00 90 FD | 	jmp	#LR__2244
1b034                 | LR__2242
1b034     29 92 06 F6 | 	mov	arg01, #41
1b038     00 94 06 F6 | 	mov	arg02, #0
1b03c     FC 5F B0 FD | 	call	#_printerror
1b040                 | '      printerror(41) : return
1b040     0C 00 90 FD | 	jmp	#LR__2244
1b044                 | LR__2243
1b044     29 92 06 F6 | 	mov	arg01, #41
1b048     00 94 06 F6 | 	mov	arg02, #0
1b04c     EC 5F B0 FD | 	call	#_printerror
1b050                 | LR__2244
1b050     E7 F0 03 F6 | 	mov	ptra, fp
1b054     F2 00 A0 FD | 	call	#popregs_
1b058                 | _do_stick_ret
1b058     2D 00 64 FD | 	ret
1b05c                 | 
1b05c                 | ' 
1b05c                 | ' 
1b05c                 | ' sub do_str
1b05c                 | _do_str
1b05c     02 CA 05 F6 | 	mov	COUNT_, #2
1b060     E8 00 A0 FD | 	call	#pushregs_
1b064     14 F0 07 F1 | 	add	ptra, #20
1b068     4B 00 00 FF 
1b06c     A0 64 06 F1 | 	add	objptr, ##38560
1b070     32 97 02 FB | 	rdlong	arg03, objptr
1b074     4B 95 02 F6 | 	mov	arg02, arg03
1b078     01 94 66 F0 | 	shl	arg02, #1
1b07c     4B 95 02 F1 | 	add	arg02, arg03
1b080     02 94 66 F0 | 	shl	arg02, #2
1b084     03 00 00 FF 
1b088     04 64 86 F1 | 	sub	objptr, ##1540
1b08c     32 95 02 F1 | 	add	arg02, objptr
1b090     4A 97 02 FB | 	rdlong	arg03, arg02
1b094                 | ' 
1b094                 | ' numpar=compiledline(lineptr_e).result.uresult
1b094                 | ' if numpar<>1 then print "str$: "; : printerror(39) : return
1b094     01 96 0E F2 | 	cmp	arg03, #1 wz
1b098     48 00 00 FF 
1b09c     9C 64 86 F1 | 	sub	objptr, ##37020
1b0a0     40 00 90 AD |  if_e	jmp	#LR__2250
1b0a4     00 92 06 F6 | 	mov	arg01, #0
1b0a8     90 EE B0 FD | 	call	#__system___getiolock_0622
1b0ac     3D 93 02 F6 | 	mov	arg01, result1
1b0b0     04 99 B0 FD | 	call	#__system___lockmem
1b0b4     98 01 00 FF 
1b0b8     3A 95 06 F6 | 	mov	arg02, ##@LR__6093
1b0bc     00 92 06 F6 | 	mov	arg01, #0
1b0c0     00 96 06 F6 | 	mov	arg03, #0
1b0c4     E4 A5 B0 FD | 	call	#__system___basic_print_string
1b0c8     00 92 06 F6 | 	mov	arg01, #0
1b0cc     6C EE B0 FD | 	call	#__system___getiolock_0622
1b0d0     3D 01 68 FC | 	wrlong	#0, result1
1b0d4     27 92 06 F6 | 	mov	arg01, #39
1b0d8     00 94 06 F6 | 	mov	arg02, #0
1b0dc     5C 5F B0 FD | 	call	#_printerror
1b0e0     F0 00 90 FD | 	jmp	#LR__2259
1b0e4                 | LR__2250
1b0e4     A0 25 BF FD | 	call	#_pop
1b0e8     3F 97 02 F6 | 	mov	arg03, result3
1b0ec     E7 7A 62 FC | 	wrlong	result1, fp
1b0f0     04 CE 05 F1 | 	add	fp, #4
1b0f4     E7 7C 62 FC | 	wrlong	result2, fp
1b0f8     04 CE 05 F1 | 	add	fp, #4
1b0fc     E7 96 62 FC | 	wrlong	arg03, fp
1b100                 | ' 
1b100                 | ' t1=pop()
1b100                 | ' if t1.result_type=result_int then 
1b100     08 CE 85 F1 | 	sub	fp, #8
1b104     1C 96 0E F2 | 	cmp	arg03, #28 wz
1b108     28 00 90 5D |  if_ne	jmp	#LR__2251
1b10c     E7 92 02 FB | 	rdlong	arg01, fp
1b110     49 93 52 F6 | 	abs	arg01, arg01 wc
1b114     1F A6 C6 C9 |  if_b	decod	local01, #31
1b118     00 A6 06 36 |  if_ae	mov	local01, #0
1b11c     64 BB B0 FD | 	call	#__system___float_fromuns
1b120     53 7B 62 F5 | 	xor	result1, local01
1b124     3D 93 02 F6 | 	mov	arg01, result1
1b128     2C B3 B0 FD | 	call	#__system__str_S
1b12c     3D A9 02 F6 | 	mov	local02, result1
1b130     88 00 90 FD | 	jmp	#LR__2258
1b134                 | LR__2251
1b134     08 CE 05 F1 | 	add	fp, #8
1b138     E7 96 02 FB | 	rdlong	arg03, fp
1b13c     08 CE 85 F1 | 	sub	fp, #8
1b140     1D 96 0E F2 | 	cmp	arg03, #29 wz
1b144     18 00 90 5D |  if_ne	jmp	#LR__2252
1b148     E7 92 02 FB | 	rdlong	arg01, fp
1b14c     34 BB B0 FD | 	call	#__system___float_fromuns
1b150     3D 93 02 F6 | 	mov	arg01, result1
1b154     00 B3 B0 FD | 	call	#__system__str_S
1b158     3D A9 02 F6 | 	mov	local02, result1
1b15c     5C 00 90 FD | 	jmp	#LR__2257
1b160                 | LR__2252
1b160     08 CE 05 F1 | 	add	fp, #8
1b164     E7 96 02 FB | 	rdlong	arg03, fp
1b168     08 CE 85 F1 | 	sub	fp, #8
1b16c     1E 96 0E F2 | 	cmp	arg03, #30 wz
1b170     10 00 90 5D |  if_ne	jmp	#LR__2253
1b174     E7 92 02 FB | 	rdlong	arg01, fp
1b178     DC B2 B0 FD | 	call	#__system__str_S
1b17c     3D A9 02 F6 | 	mov	local02, result1
1b180     38 00 90 FD | 	jmp	#LR__2256
1b184                 | LR__2253
1b184     08 CE 05 F1 | 	add	fp, #8
1b188     E7 96 02 FB | 	rdlong	arg03, fp
1b18c     08 CE 85 F1 | 	sub	fp, #8
1b190     2B 96 0E F2 | 	cmp	arg03, #43 wz
1b194     10 00 90 5D |  if_ne	jmp	#LR__2254
1b198     E7 92 02 FB | 	rdlong	arg01, fp
1b19c     58 26 BF FD | 	call	#_convertstring
1b1a0     3D A9 02 F6 | 	mov	local02, result1
1b1a4     14 00 90 FD | 	jmp	#LR__2255
1b1a8                 | LR__2254
1b1a8     08 CE 05 F1 | 	add	fp, #8
1b1ac     E7 7C 02 FB | 	rdlong	result2, fp
1b1b0     08 CE 85 F1 | 	sub	fp, #8
1b1b4     1F 7C 0E F2 | 	cmp	result2, #31 wz
1b1b8     E7 A8 02 AB |  if_e	rdlong	local02, fp
1b1bc                 | LR__2255
1b1bc                 | LR__2256
1b1bc                 | LR__2257
1b1bc                 | LR__2258
1b1bc     E7 A8 62 FC | 	wrlong	local02, fp
1b1c0     08 CE 05 F1 | 	add	fp, #8
1b1c4     E7 3E 68 FC | 	wrlong	#31, fp
1b1c8     08 CE 85 F1 | 	sub	fp, #8
1b1cc     E7 92 02 F6 | 	mov	arg01, fp
1b1d0     44 25 BF FD | 	call	#_push
1b1d4                 | '     t1.result.sresult=s : t1.result_type=result_string : push t1 : return 
1b1d4                 | LR__2259
1b1d4     E7 F0 03 F6 | 	mov	ptra, fp
1b1d8     F2 00 A0 FD | 	call	#popregs_
1b1dc                 | _do_str_ret
1b1dc     2D 00 64 FD | 	ret
1b1e0                 | 
1b1e0                 | ' ' ------------------ strig
1b1e0                 | ' 
1b1e0                 | ' sub do_strig
1b1e0                 | _do_strig
1b1e0     02 CA 05 F6 | 	mov	COUNT_, #2
1b1e4     E8 00 A0 FD | 	call	#pushregs_
1b1e8     10 F0 07 F1 | 	add	ptra, #16
1b1ec     4B 00 00 FF 
1b1f0     A0 64 06 F1 | 	add	objptr, ##38560
1b1f4     32 A7 02 FB | 	rdlong	local01, objptr
1b1f8     53 97 02 F6 | 	mov	arg03, local01
1b1fc     01 96 66 F0 | 	shl	arg03, #1
1b200     53 97 02 F1 | 	add	arg03, local01
1b204     02 96 66 F0 | 	shl	arg03, #2
1b208     03 00 00 FF 
1b20c     04 64 86 F1 | 	sub	objptr, ##1540
1b210     32 97 02 F1 | 	add	arg03, objptr
1b214     4B A9 02 FB | 	rdlong	local02, arg03
1b218                 | ' 
1b218                 | ' numpar=compiledline(lineptr_e).result.uresult
1b218                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1b218     02 A8 16 F2 | 	cmp	local02, #2 wc
1b21c     48 00 00 FF 
1b220     9C 64 86 F1 | 	sub	objptr, ##37020
1b224     40 00 90 CD |  if_b	jmp	#LR__2260
1b228     00 92 06 F6 | 	mov	arg01, #0
1b22c     0C ED B0 FD | 	call	#__system___getiolock_0622
1b230     3D 93 02 F6 | 	mov	arg01, result1
1b234     80 97 B0 FD | 	call	#__system___lockmem
1b238     98 01 00 FF 
1b23c     41 95 06 F6 | 	mov	arg02, ##@LR__6094
1b240     00 92 06 F6 | 	mov	arg01, #0
1b244     00 96 06 F6 | 	mov	arg03, #0
1b248     60 A4 B0 FD | 	call	#__system___basic_print_string
1b24c     00 92 06 F6 | 	mov	arg01, #0
1b250     E8 EC B0 FD | 	call	#__system___getiolock_0622
1b254     3D 01 68 FC | 	wrlong	#0, result1
1b258     27 92 06 F6 | 	mov	arg01, #39
1b25c     00 94 06 F6 | 	mov	arg02, #0
1b260     D8 5D B0 FD | 	call	#_printerror
1b264     E8 00 90 FD | 	jmp	#LR__2264
1b268                 | LR__2260
1b268                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1b268     00 A8 0E F2 | 	cmp	local02, #0 wz
1b26c     30 00 90 5D |  if_ne	jmp	#LR__2261
1b270     53 00 00 FF 
1b274     90 64 06 F1 | 	add	objptr, ##42640
1b278     32 A9 02 FB | 	rdlong	local02, objptr
1b27c     53 00 00 FF 
1b280     90 64 86 F1 | 	sub	objptr, ##42640
1b284     E7 A8 62 FC | 	wrlong	local02, fp
1b288     08 CE 05 F1 | 	add	fp, #8
1b28c     E7 3A 68 FC | 	wrlong	#29, fp
1b290     08 CE 85 F1 | 	sub	fp, #8
1b294     E7 92 02 F6 | 	mov	arg01, fp
1b298     7C 24 BF FD | 	call	#_push
1b29c     B0 00 90 FD | 	jmp	#LR__2264
1b2a0                 | LR__2261
1b2a0     E4 23 BF FD | 	call	#_pop
1b2a4     E7 7A 62 FC | 	wrlong	result1, fp
1b2a8     04 CE 05 F1 | 	add	fp, #4
1b2ac     E7 7C 62 FC | 	wrlong	result2, fp
1b2b0     04 CE 05 F1 | 	add	fp, #4
1b2b4     E7 7E 62 FC | 	wrlong	result3, fp
1b2b8                 | ' t1=pop()
1b2b8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1b2b8     08 CE 85 F1 | 	sub	fp, #8
1b2bc     1C 7E 0E F2 | 	cmp	result3, #28 wz
1b2c0     08 CE 05 51 |  if_ne	add	fp, #8
1b2c4     E7 A6 02 5B |  if_ne	rdlong	local01, fp
1b2c8     08 CE 85 51 |  if_ne	sub	fp, #8
1b2cc     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
1b2d0     70 00 90 5D |  if_ne	jmp	#LR__2263
1b2d4     E7 A6 02 FB | 	rdlong	local01, fp
1b2d8     53 00 00 FF 
1b2dc     60 65 06 F1 | 	add	objptr, ##42848
1b2e0     32 A7 62 FC | 	wrlong	local01, objptr
1b2e4                 | '   q=t1.result.uresult
1b2e4                 | '   if q<7 then 
1b2e4     53 00 00 FF 
1b2e8     60 65 86 F1 | 	sub	objptr, ##42848
1b2ec     07 A6 56 F2 | 	cmps	local01, #7 wc
1b2f0     40 00 90 3D |  if_ae	jmp	#LR__2262
1b2f4     53 00 00 FF 
1b2f8     60 65 06 F1 | 	add	objptr, ##42848
1b2fc     32 A7 02 FB | 	rdlong	local01, objptr
1b300     02 A6 66 F0 | 	shl	local01, #2
1b304     D0 64 86 F1 | 	sub	objptr, #208
1b308     32 A7 02 F1 | 	add	local01, objptr
1b30c     53 A9 02 FB | 	rdlong	local02, local01
1b310     E7 A8 62 FC | 	wrlong	local02, fp
1b314     08 CE 05 F1 | 	add	fp, #8
1b318     E7 3A 68 FC | 	wrlong	#29, fp
1b31c     08 CE 85 F1 | 	sub	fp, #8
1b320     E7 92 02 F6 | 	mov	arg01, fp
1b324     53 00 00 FF 
1b328     90 64 86 F1 | 	sub	objptr, ##42640
1b32c     E8 23 BF FD | 	call	#_push
1b330                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1b330     1C 00 90 FD | 	jmp	#LR__2264
1b334                 | LR__2262
1b334     29 92 06 F6 | 	mov	arg01, #41
1b338     00 94 06 F6 | 	mov	arg02, #0
1b33c     FC 5C B0 FD | 	call	#_printerror
1b340                 | '      printerror(41) : return
1b340     0C 00 90 FD | 	jmp	#LR__2264
1b344                 | LR__2263
1b344     29 92 06 F6 | 	mov	arg01, #41
1b348     00 94 06 F6 | 	mov	arg02, #0
1b34c     EC 5C B0 FD | 	call	#_printerror
1b350                 | LR__2264
1b350     E7 F0 03 F6 | 	mov	ptra, fp
1b354     F2 00 A0 FD | 	call	#popregs_
1b358                 | _do_strig_ret
1b358     2D 00 64 FD | 	ret
1b35c                 | 
1b35c                 | ' 
1b35c                 | ' ' ------------------ tan
1b35c                 | ' 
1b35c                 | ' sub do_tan
1b35c                 | _do_tan
1b35c     01 CA 05 F6 | 	mov	COUNT_, #1
1b360     E8 00 A0 FD | 	call	#pushregs_
1b364     10 F0 07 F1 | 	add	ptra, #16
1b368     4B 00 00 FF 
1b36c     A0 64 06 F1 | 	add	objptr, ##38560
1b370     32 97 02 FB | 	rdlong	arg03, objptr
1b374     4B 95 02 F6 | 	mov	arg02, arg03
1b378     01 94 66 F0 | 	shl	arg02, #1
1b37c     4B 95 02 F1 | 	add	arg02, arg03
1b380     02 94 66 F0 | 	shl	arg02, #2
1b384     03 00 00 FF 
1b388     04 64 86 F1 | 	sub	objptr, ##1540
1b38c     32 95 02 F1 | 	add	arg02, objptr
1b390     4A 97 02 FB | 	rdlong	arg03, arg02
1b394                 | ' 
1b394                 | ' numpar=compiledline(lineptr_e).result.uresult
1b394                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1b394     02 96 16 F2 | 	cmp	arg03, #2 wc
1b398     48 00 00 FF 
1b39c     9C 64 86 F1 | 	sub	objptr, ##37020
1b3a0     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1b3a4     40 00 90 4D |  if_c_and_nz	jmp	#LR__2270
1b3a8     00 92 06 F6 | 	mov	arg01, #0
1b3ac     8C EB B0 FD | 	call	#__system___getiolock_0622
1b3b0     3D 93 02 F6 | 	mov	arg01, result1
1b3b4     00 96 B0 FD | 	call	#__system___lockmem
1b3b8     98 01 00 FF 
1b3bc     49 95 06 F6 | 	mov	arg02, ##@LR__6095
1b3c0     00 92 06 F6 | 	mov	arg01, #0
1b3c4     00 96 06 F6 | 	mov	arg03, #0
1b3c8     E0 A2 B0 FD | 	call	#__system___basic_print_string
1b3cc     00 92 06 F6 | 	mov	arg01, #0
1b3d0     68 EB B0 FD | 	call	#__system___getiolock_0622
1b3d4     3D 01 68 FC | 	wrlong	#0, result1
1b3d8     27 92 06 F6 | 	mov	arg01, #39
1b3dc     00 94 06 F6 | 	mov	arg02, #0
1b3e0     58 5C B0 FD | 	call	#_printerror
1b3e4     64 00 90 FD | 	jmp	#LR__2271
1b3e8                 | LR__2270
1b3e8     9C 22 BF FD | 	call	#_pop
1b3ec     E7 7A 62 FC | 	wrlong	result1, fp
1b3f0     04 CE 05 F1 | 	add	fp, #4
1b3f4     E7 7C 62 FC | 	wrlong	result2, fp
1b3f8     04 CE 05 F1 | 	add	fp, #4
1b3fc     E7 7E 62 FC | 	wrlong	result3, fp
1b400     08 CE 85 F1 | 	sub	fp, #8
1b404     53 00 00 FF 
1b408     00 65 06 F1 | 	add	objptr, ##42752
1b40c     32 A7 02 FB | 	rdlong	local01, objptr
1b410     53 00 00 FF 
1b414     00 65 86 F1 | 	sub	objptr, ##42752
1b418     E7 92 02 F6 | 	mov	arg01, fp
1b41c     00 25 BF FD | 	call	#_converttofloat
1b420     3D 95 02 F6 | 	mov	arg02, result1
1b424     53 93 02 F6 | 	mov	arg01, local01
1b428     5C BC B0 FD | 	call	#__system___float_mul
1b42c     3D 93 02 F6 | 	mov	arg01, result1
1b430     10 C7 B0 FD | 	call	#__system____builtin_tanf
1b434     E7 7A 62 FC | 	wrlong	result1, fp
1b438     08 CE 05 F1 | 	add	fp, #8
1b43c     E7 3C 68 FC | 	wrlong	#30, fp
1b440     08 CE 85 F1 | 	sub	fp, #8
1b444     E7 92 02 F6 | 	mov	arg01, fp
1b448     CC 22 BF FD | 	call	#_push
1b44c                 | LR__2271
1b44c     E7 F0 03 F6 | 	mov	ptra, fp
1b450     F2 00 A0 FD | 	call	#popregs_
1b454                 | _do_tan_ret
1b454     2D 00 64 FD | 	ret
1b458                 | 
1b458                 | ' 
1b458                 | ' ' ------------------ val
1b458                 | ' 
1b458                 | ' sub do_val
1b458                 | _do_val
1b458     05 CA 05 F6 | 	mov	COUNT_, #5
1b45c     E8 00 A0 FD | 	call	#pushregs_
1b460     20 F0 07 F1 | 	add	ptra, #32
1b464     4B 00 00 FF 
1b468     A0 64 06 F1 | 	add	objptr, ##38560
1b46c     32 97 02 FB | 	rdlong	arg03, objptr
1b470     4B 95 02 F6 | 	mov	arg02, arg03
1b474     01 94 66 F0 | 	shl	arg02, #1
1b478     4B 95 02 F1 | 	add	arg02, arg03
1b47c     02 94 66 F0 | 	shl	arg02, #2
1b480     03 00 00 FF 
1b484     04 64 86 F1 | 	sub	objptr, ##1540
1b488     32 95 02 F1 | 	add	arg02, objptr
1b48c     4A 97 02 FB | 	rdlong	arg03, arg02
1b490                 | ' 
1b490                 | ' numpar=compiledline(lineptr_e).result.uresult
1b490                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1b490     02 96 16 F2 | 	cmp	arg03, #2 wc
1b494     48 00 00 FF 
1b498     9C 64 86 F1 | 	sub	objptr, ##37020
1b49c     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1b4a0     40 00 90 4D |  if_c_and_nz	jmp	#LR__2280
1b4a4     00 92 06 F6 | 	mov	arg01, #0
1b4a8     90 EA B0 FD | 	call	#__system___getiolock_0622
1b4ac     3D 93 02 F6 | 	mov	arg01, result1
1b4b0     04 95 B0 FD | 	call	#__system___lockmem
1b4b4     98 01 00 FF 
1b4b8     4F 95 06 F6 | 	mov	arg02, ##@LR__6096
1b4bc     00 92 06 F6 | 	mov	arg01, #0
1b4c0     00 96 06 F6 | 	mov	arg03, #0
1b4c4     E4 A1 B0 FD | 	call	#__system___basic_print_string
1b4c8     00 92 06 F6 | 	mov	arg01, #0
1b4cc     6C EA B0 FD | 	call	#__system___getiolock_0622
1b4d0     3D 01 68 FC | 	wrlong	#0, result1
1b4d4     27 92 06 F6 | 	mov	arg01, #39
1b4d8     00 94 06 F6 | 	mov	arg02, #0
1b4dc     5C 5B B0 FD | 	call	#_printerror
1b4e0     0C 02 90 FD | 	jmp	#LR__2292
1b4e4                 | LR__2280
1b4e4     A0 21 BF FD | 	call	#_pop
1b4e8     3F 97 02 F6 | 	mov	arg03, result3
1b4ec     E7 7A 62 FC | 	wrlong	result1, fp
1b4f0     04 CE 05 F1 | 	add	fp, #4
1b4f4     E7 7C 62 FC | 	wrlong	result2, fp
1b4f8     04 CE 05 F1 | 	add	fp, #4
1b4fc     E7 96 62 FC | 	wrlong	arg03, fp
1b500                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1b500     08 CE 85 F1 | 	sub	fp, #8
1b504     2B 96 0E F2 | 	cmp	arg03, #43 wz
1b508     18 00 90 5D |  if_ne	jmp	#LR__2281
1b50c     E7 92 02 FB | 	rdlong	arg01, fp
1b510     E4 22 BF FD | 	call	#_convertstring
1b514     E7 7A 62 FC | 	wrlong	result1, fp
1b518     08 CE 05 F1 | 	add	fp, #8
1b51c     E7 3E 68 FC | 	wrlong	#31, fp
1b520     08 CE 85 F1 | 	sub	fp, #8
1b524                 | LR__2281
1b524                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1b524     08 CE 05 F1 | 	add	fp, #8
1b528     E7 96 02 FB | 	rdlong	arg03, fp
1b52c     08 CE 85 F1 | 	sub	fp, #8
1b530     1F 96 0E F2 | 	cmp	arg03, #31 wz
1b534     40 00 90 AD |  if_e	jmp	#LR__2282
1b538     00 92 06 F6 | 	mov	arg01, #0
1b53c     FC E9 B0 FD | 	call	#__system___getiolock_0622
1b540     3D 93 02 F6 | 	mov	arg01, result1
1b544     70 94 B0 FD | 	call	#__system___lockmem
1b548     98 01 00 FF 
1b54c     55 95 06 F6 | 	mov	arg02, ##@LR__6097
1b550     00 92 06 F6 | 	mov	arg01, #0
1b554     00 96 06 F6 | 	mov	arg03, #0
1b558     50 A1 B0 FD | 	call	#__system___basic_print_string
1b55c     00 92 06 F6 | 	mov	arg01, #0
1b560     D8 E9 B0 FD | 	call	#__system___getiolock_0622
1b564     3D 01 68 FC | 	wrlong	#0, result1
1b568     0F 92 06 F6 | 	mov	arg01, #15
1b56c     00 94 06 F6 | 	mov	arg02, #0
1b570     C8 5A B0 FD | 	call	#_printerror
1b574     78 01 90 FD | 	jmp	#LR__2292
1b578                 | LR__2282
1b578                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1b578     E7 92 02 FB | 	rdlong	arg01, fp
1b57c     01 94 06 F6 | 	mov	arg02, #1
1b580     DC AC B0 FD | 	call	#__system__Left_S
1b584     3D 93 02 F6 | 	mov	arg01, result1
1b588     98 01 00 FF 
1b58c     5B 95 06 F6 | 	mov	arg02, ##@LR__6098
1b590     4C 94 B0 FD | 	call	#__system___string_cmp
1b594     00 7A 0E F2 | 	cmp	result1, #0 wz
1b598     48 00 90 5D |  if_ne	jmp	#LR__2285
1b59c     98 01 00 FF 
1b5a0     5D A7 06 F6 | 	mov	local01, ##@LR__6099
1b5a4     E7 96 02 FB | 	rdlong	arg03, fp
1b5a8     4B 93 02 F6 | 	mov	arg01, arg03
1b5ac     49 A9 02 F6 | 	mov	local02, arg01
1b5b0     D7 06 48 FB | 	callpa	#(@LR__2284-@LR__2283)>>2,fcache_load_ptr_
1b5b4                 | LR__2283
1b5b4     54 7B CA FA | 	rdbyte	result1, local02 wz
1b5b8     01 A8 06 51 |  if_ne	add	local02, #1
1b5bc     F4 FF 9F 5D |  if_ne	jmp	#LR__2283
1b5c0                 | LR__2284
1b5c0     49 A9 82 F1 | 	sub	local02, arg01
1b5c4     54 95 02 F6 | 	mov	arg02, local02
1b5c8     01 94 86 F1 | 	sub	arg02, #1
1b5cc     4B 93 02 F6 | 	mov	arg01, arg03
1b5d0     14 AD B0 FD | 	call	#__system__Right_S
1b5d4     3D 95 02 F6 | 	mov	arg02, result1
1b5d8     53 93 02 F6 | 	mov	arg01, local01
1b5dc     34 94 B0 FD | 	call	#__system___string_concat
1b5e0     E7 7A 62 FC | 	wrlong	result1, fp
1b5e4                 | LR__2285
1b5e4                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1b5e4     E7 92 02 FB | 	rdlong	arg01, fp
1b5e8     01 94 06 F6 | 	mov	arg02, #1
1b5ec     70 AC B0 FD | 	call	#__system__Left_S
1b5f0     3D 93 02 F6 | 	mov	arg01, result1
1b5f4     98 01 00 FF 
1b5f8     60 95 06 F6 | 	mov	arg02, ##@LR__6100
1b5fc     E0 93 B0 FD | 	call	#__system___string_cmp
1b600     00 7A 0E F2 | 	cmp	result1, #0 wz
1b604     48 00 90 5D |  if_ne	jmp	#LR__2288
1b608     98 01 00 FF 
1b60c     62 A7 06 F6 | 	mov	local01, ##@LR__6101
1b610     E7 96 02 FB | 	rdlong	arg03, fp
1b614     4B 93 02 F6 | 	mov	arg01, arg03
1b618     49 A9 02 F6 | 	mov	local02, arg01
1b61c     D7 06 48 FB | 	callpa	#(@LR__2287-@LR__2286)>>2,fcache_load_ptr_
1b620                 | LR__2286
1b620     54 7B CA FA | 	rdbyte	result1, local02 wz
1b624     01 A8 06 51 |  if_ne	add	local02, #1
1b628     F4 FF 9F 5D |  if_ne	jmp	#LR__2286
1b62c                 | LR__2287
1b62c     49 A9 82 F1 | 	sub	local02, arg01
1b630     54 95 02 F6 | 	mov	arg02, local02
1b634     01 94 86 F1 | 	sub	arg02, #1
1b638     4B 93 02 F6 | 	mov	arg01, arg03
1b63c     A8 AC B0 FD | 	call	#__system__Right_S
1b640     3D 95 02 F6 | 	mov	arg02, result1
1b644     53 93 02 F6 | 	mov	arg01, local01
1b648     C8 93 B0 FD | 	call	#__system___string_concat
1b64c     E7 7A 62 FC | 	wrlong	result1, fp
1b650                 | LR__2288
1b650     E7 92 02 FB | 	rdlong	arg01, fp
1b654     4C C2 B0 FD | 	call	#__system____builtin_atof
1b658     3D AB 02 F6 | 	mov	local03, result1
1b65c     E7 92 02 FB | 	rdlong	arg01, fp
1b660     00 94 06 F6 | 	mov	arg02, #0
1b664     A4 C0 B0 FD | 	call	#__system____builtin_atoi
1b668     3D AD 02 F6 | 	mov	local04, result1
1b66c                 | ' fval=val(t1.result.sresult)
1b66c                 | ' ival=val%(t1.result.sresult)
1b66c                 | ' if fval=ival then
1b66c     56 93 52 F6 | 	abs	arg01, local04 wc
1b670     1F AE C6 C9 |  if_b	decod	local05, #31
1b674     00 AE 06 36 |  if_ae	mov	local05, #0
1b678     08 B6 B0 FD | 	call	#__system___float_fromuns
1b67c     57 7B 62 F5 | 	xor	result1, local05
1b680     3D 95 02 F6 | 	mov	arg02, result1
1b684     55 93 02 F6 | 	mov	arg01, local03
1b688     01 96 06 F6 | 	mov	arg03, #1
1b68c     2C BE B0 FD | 	call	#__system___float_cmp
1b690     00 7A 0E F2 | 	cmp	result1, #0 wz
1b694     E7 AC 62 AC |  if_e	wrlong	local04, fp
1b698     08 CE 05 A1 |  if_e	add	fp, #8
1b69c     E7 38 68 AC |  if_e	wrlong	#28, fp
1b6a0     08 CE 85 A1 |  if_e	sub	fp, #8
1b6a4     40 00 90 AD |  if_e	jmp	#LR__2291
1b6a8                 | '   if fval=0 andalso ival<>0 then
1b6a8     55 93 02 F6 | 	mov	arg01, local03
1b6ac     00 94 06 F6 | 	mov	arg02, #0
1b6b0     01 96 06 F6 | 	mov	arg03, #1
1b6b4     04 BE B0 FD | 	call	#__system___float_cmp
1b6b8     00 7A 0E F2 | 	cmp	result1, #0 wz
1b6bc     18 00 90 5D |  if_ne	jmp	#LR__2289
1b6c0     00 AC 0E F2 | 	cmp	local04, #0 wz
1b6c4     E7 AC 62 5C |  if_ne	wrlong	local04, fp
1b6c8     08 CE 05 51 |  if_ne	add	fp, #8
1b6cc     E7 38 68 5C |  if_ne	wrlong	#28, fp
1b6d0     08 CE 85 51 |  if_ne	sub	fp, #8
1b6d4     10 00 90 5D |  if_ne	jmp	#LR__2290
1b6d8                 | LR__2289
1b6d8     E7 AA 62 FC | 	wrlong	local03, fp
1b6dc     08 CE 05 F1 | 	add	fp, #8
1b6e0     E7 3C 68 FC | 	wrlong	#30, fp
1b6e4     08 CE 85 F1 | 	sub	fp, #8
1b6e8                 | LR__2290
1b6e8                 | LR__2291
1b6e8     E7 92 02 F6 | 	mov	arg01, fp
1b6ec     28 20 BF FD | 	call	#_push
1b6f0                 | LR__2292
1b6f0     E7 F0 03 F6 | 	mov	ptra, fp
1b6f4     F2 00 A0 FD | 	call	#popregs_
1b6f8                 | _do_val_ret
1b6f8     2D 00 64 FD | 	ret
1b6fc                 | 
1b6fc                 | ' 
1b6fc                 | ' ' ------------------ waitclock
1b6fc                 | ' 
1b6fc                 | ' sub do_waitclock
1b6fc                 | _do_waitclock
1b6fc     53 00 00 FF 
1b700     EC 64 06 F1 | 	add	objptr, ##42732
1b704     32 81 02 FB | 	rdlong	_var01, objptr
1b708                 | ' c=hkcnt
1b708                 | ' do: loop until hkcnt<>c
1b708                 | LR__2300
1b708     32 83 02 FB | 	rdlong	_var02, objptr
1b70c     40 83 0A F2 | 	cmp	_var02, _var01 wz
1b710     F4 FF 9F AD |  if_e	jmp	#LR__2300
1b714     53 00 00 FF 
1b718     EC 64 86 F1 | 	sub	objptr, ##42732
1b71c                 | _do_waitclock_ret
1b71c     2D 00 64 FD | 	ret
1b720                 | 
1b720                 | ' 
1b720                 | ' ' ------------------ waitms
1b720                 | ' 
1b720                 | ' sub do_waitms
1b720                 | _do_waitms
1b720     03 CA 05 F6 | 	mov	COUNT_, #3
1b724     E8 00 A0 FD | 	call	#pushregs_
1b728     18 F0 07 F1 | 	add	ptra, #24
1b72c     58 1F BF FD | 	call	#_pop
1b730     E7 7A 62 FC | 	wrlong	result1, fp
1b734     04 CE 05 F1 | 	add	fp, #4
1b738     E7 7C 62 FC | 	wrlong	result2, fp
1b73c     04 CE 05 F1 | 	add	fp, #4
1b740     E7 7E 62 FC | 	wrlong	result3, fp
1b744     08 CE 85 F1 | 	sub	fp, #8
1b748     E7 92 02 F6 | 	mov	arg01, fp
1b74c     14 21 BF FD | 	call	#_converttoint
1b750     3D A7 02 F6 | 	mov	local01, result1
1b754                 | ' 
1b754                 | ' t1=pop()  
1b754                 | ' t=converttoint(t1)
1b754                 | ' if t<0 then return
1b754     00 A6 56 F2 | 	cmps	local01, #0 wc
1b758     98 00 90 CD |  if_b	jmp	#LR__2316
1b75c                 | ' if t < 1000 then 
1b75c     01 00 00 FF 
1b760     E8 A7 56 F2 | 	cmps	local01, ##1000 wc
1b764     0C 00 90 3D |  if_ae	jmp	#LR__2310
1b768     53 93 02 F6 | 	mov	arg01, local01
1b76c     3C 95 B0 FD | 	call	#__system___waitms
1b770     80 00 90 FD | 	jmp	#LR__2315
1b774                 | LR__2310
1b774     53 93 52 F6 | 	abs	arg01, local01 wc
1b778     01 00 00 FF 
1b77c     E8 93 16 FD | 	qdiv	arg01, ##1000
1b780                 | '   for i=1 to t/1000
1b780     01 A8 06 F6 | 	mov	local02, #1
1b784     18 AA 62 FD | 	getqx	local03
1b788     55 AB 82 F6 | 	negc	local03, local03
1b78c     01 AA 06 F1 | 	add	local03, #1
1b790                 | LR__2311
1b790     55 A9 52 F2 | 	cmps	local02, local03 wc
1b794     44 00 90 3D |  if_ae	jmp	#LR__2314
1b798     01 00 00 FF 
1b79c     E8 93 06 F6 | 	mov	arg01, ##1000
1b7a0     08 95 B0 FD | 	call	#__system___waitms
1b7a4                 | '     waitms(1000)
1b7a4                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1b7a4     E0 92 06 F6 | 	mov	arg01, #224
1b7a8     78 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b7ac     00 7A 0E F2 | 	cmp	result1, #0 wz
1b7b0     10 00 90 5D |  if_ne	jmp	#LR__2312
1b7b4     E4 92 06 F6 | 	mov	arg01, #228
1b7b8     68 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b7bc     00 7A 0E F2 | 	cmp	result1, #0 wz
1b7c0     10 00 90 AD |  if_e	jmp	#LR__2313
1b7c4                 | LR__2312
1b7c4     06 92 06 F6 | 	mov	arg01, #6
1b7c8     58 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b7cc     00 7A 0E F2 | 	cmp	result1, #0 wz
1b7d0     20 00 90 5D |  if_ne	jmp	#LR__2316
1b7d4                 | LR__2313
1b7d4     01 A8 06 F1 | 	add	local02, #1
1b7d8     B4 FF 9F FD | 	jmp	#LR__2311
1b7dc                 | LR__2314
1b7dc     53 AB 52 F6 | 	abs	local03, local01 wc
1b7e0     01 00 00 FF 
1b7e4     E8 AB 16 FD | 	qdiv	local03, ##1000
1b7e8     19 AA 62 FD | 	getqy	local03
1b7ec     55 93 82 F6 | 	negc	arg01, local03
1b7f0     B8 94 B0 FD | 	call	#__system___waitms
1b7f4                 | LR__2315
1b7f4                 | LR__2316
1b7f4     E7 F0 03 F6 | 	mov	ptra, fp
1b7f8     F2 00 A0 FD | 	call	#popregs_
1b7fc                 | _do_waitms_ret
1b7fc     2D 00 64 FD | 	ret
1b800                 | 
1b800                 | ' 
1b800                 | ' ' ------------------ waitvbl
1b800                 | ' 
1b800                 | ' sub do_waitvbl
1b800                 | _do_waitvbl
1b800     01 92 06 F6 | 	mov	arg01, #1
1b804     40 75 B0 FD | 	call	#_hg010b_spin2_waitvbl
1b808                 | _do_waitvbl_ret
1b808     2D 00 64 FD | 	ret
1b80c                 | 
1b80c                 | ' 
1b80c                 | ' ' ------------------ wrpin
1b80c                 | ' 
1b80c                 | ' sub do_wrpin
1b80c                 | _do_wrpin
1b80c     01 CA 05 F6 | 	mov	COUNT_, #1
1b810     E8 00 A0 FD | 	call	#pushregs_
1b814     18 F0 07 F1 | 	add	ptra, #24
1b818     6C 1E BF FD | 	call	#_pop
1b81c     3D 95 02 F6 | 	mov	arg02, result1
1b820     3E 93 02 F6 | 	mov	arg01, result2
1b824     3F A7 02 F6 | 	mov	local01, result3
1b828     E7 94 62 FC | 	wrlong	arg02, fp
1b82c     04 CE 05 F1 | 	add	fp, #4
1b830     E7 92 62 FC | 	wrlong	arg01, fp
1b834     04 CE 05 F1 | 	add	fp, #4
1b838     E7 A6 62 FC | 	wrlong	local01, fp
1b83c     08 CE 85 F1 | 	sub	fp, #8
1b840     44 1E BF FD | 	call	#_pop
1b844     3F A7 02 F6 | 	mov	local01, result3
1b848     0C CE 05 F1 | 	add	fp, #12
1b84c     E7 7A 62 FC | 	wrlong	result1, fp
1b850     04 CE 05 F1 | 	add	fp, #4
1b854     E7 7C 62 FC | 	wrlong	result2, fp
1b858     04 CE 05 F1 | 	add	fp, #4
1b85c     E7 A6 62 FC | 	wrlong	local01, fp
1b860     08 CE 85 F1 | 	sub	fp, #8
1b864     E7 92 02 F6 | 	mov	arg01, fp
1b868     0C CE 85 F1 | 	sub	fp, #12
1b86c     F4 1F BF FD | 	call	#_converttoint
1b870     3D A7 02 F6 | 	mov	local01, result1
1b874     E7 92 02 F6 | 	mov	arg01, fp
1b878     E8 1F BF FD | 	call	#_converttoint
1b87c     53 7B 02 FC | 	wrpin	result1, local01
1b880     E7 F0 03 F6 | 	mov	ptra, fp
1b884     F2 00 A0 FD | 	call	#popregs_
1b888                 | _do_wrpin_ret
1b888     2D 00 64 FD | 	ret
1b88c                 | 
1b88c                 | ' 
1b88c                 | ' ' ------------------ wxpin
1b88c                 | ' 
1b88c                 | ' sub do_wxpin
1b88c                 | _do_wxpin
1b88c     01 CA 05 F6 | 	mov	COUNT_, #1
1b890     E8 00 A0 FD | 	call	#pushregs_
1b894     18 F0 07 F1 | 	add	ptra, #24
1b898     EC 1D BF FD | 	call	#_pop
1b89c     3D 95 02 F6 | 	mov	arg02, result1
1b8a0     3E 93 02 F6 | 	mov	arg01, result2
1b8a4     3F A7 02 F6 | 	mov	local01, result3
1b8a8     E7 94 62 FC | 	wrlong	arg02, fp
1b8ac     04 CE 05 F1 | 	add	fp, #4
1b8b0     E7 92 62 FC | 	wrlong	arg01, fp
1b8b4     04 CE 05 F1 | 	add	fp, #4
1b8b8     E7 A6 62 FC | 	wrlong	local01, fp
1b8bc     08 CE 85 F1 | 	sub	fp, #8
1b8c0     C4 1D BF FD | 	call	#_pop
1b8c4     3F A7 02 F6 | 	mov	local01, result3
1b8c8     0C CE 05 F1 | 	add	fp, #12
1b8cc     E7 7A 62 FC | 	wrlong	result1, fp
1b8d0     04 CE 05 F1 | 	add	fp, #4
1b8d4     E7 7C 62 FC | 	wrlong	result2, fp
1b8d8     04 CE 05 F1 | 	add	fp, #4
1b8dc     E7 A6 62 FC | 	wrlong	local01, fp
1b8e0     08 CE 85 F1 | 	sub	fp, #8
1b8e4     E7 92 02 F6 | 	mov	arg01, fp
1b8e8     0C CE 85 F1 | 	sub	fp, #12
1b8ec     74 1F BF FD | 	call	#_converttoint
1b8f0     3D A7 02 F6 | 	mov	local01, result1
1b8f4     E7 92 02 F6 | 	mov	arg01, fp
1b8f8     68 1F BF FD | 	call	#_converttoint
1b8fc     53 7B 12 FC | 	wxpin	result1, local01
1b900     E7 F0 03 F6 | 	mov	ptra, fp
1b904     F2 00 A0 FD | 	call	#popregs_
1b908                 | _do_wxpin_ret
1b908     2D 00 64 FD | 	ret
1b90c                 | 
1b90c                 | ' 
1b90c                 | ' ' ------------------ wypin
1b90c                 | ' 
1b90c                 | ' sub do_wypin
1b90c                 | _do_wypin
1b90c     01 CA 05 F6 | 	mov	COUNT_, #1
1b910     E8 00 A0 FD | 	call	#pushregs_
1b914     18 F0 07 F1 | 	add	ptra, #24
1b918     6C 1D BF FD | 	call	#_pop
1b91c     3D 95 02 F6 | 	mov	arg02, result1
1b920     3E 93 02 F6 | 	mov	arg01, result2
1b924     3F A7 02 F6 | 	mov	local01, result3
1b928     E7 94 62 FC | 	wrlong	arg02, fp
1b92c     04 CE 05 F1 | 	add	fp, #4
1b930     E7 92 62 FC | 	wrlong	arg01, fp
1b934     04 CE 05 F1 | 	add	fp, #4
1b938     E7 A6 62 FC | 	wrlong	local01, fp
1b93c     08 CE 85 F1 | 	sub	fp, #8
1b940     44 1D BF FD | 	call	#_pop
1b944     3F A7 02 F6 | 	mov	local01, result3
1b948     0C CE 05 F1 | 	add	fp, #12
1b94c     E7 7A 62 FC | 	wrlong	result1, fp
1b950     04 CE 05 F1 | 	add	fp, #4
1b954     E7 7C 62 FC | 	wrlong	result2, fp
1b958     04 CE 05 F1 | 	add	fp, #4
1b95c     E7 A6 62 FC | 	wrlong	local01, fp
1b960     08 CE 85 F1 | 	sub	fp, #8
1b964     E7 92 02 F6 | 	mov	arg01, fp
1b968     0C CE 85 F1 | 	sub	fp, #12
1b96c     F4 1E BF FD | 	call	#_converttoint
1b970     3D A7 02 F6 | 	mov	local01, result1
1b974     E7 92 02 F6 | 	mov	arg01, fp
1b978     E8 1E BF FD | 	call	#_converttoint
1b97c     53 7B 22 FC | 	wypin	result1, local01
1b980     E7 F0 03 F6 | 	mov	ptra, fp
1b984     F2 00 A0 FD | 	call	#popregs_
1b988                 | _do_wypin_ret
1b988     2D 00 64 FD | 	ret
1b98c                 | 
1b98c                 | ' 
1b98c                 | ' 
1b98c                 | ' 
1b98c                 | ' 
1b98c                 | ' 
1b98c                 | ' 
1b98c                 | ' 
1b98c                 | ' 
1b98c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1b98c                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1b98c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1b98c                 | ' 
1b98c                 | ' 
1b98c                 | ' '------------------ Assign
1b98c                 | ' 
1b98c                 | ' sub do_assign
1b98c                 | _do_assign
1b98c     0E CA 05 F6 | 	mov	COUNT_, #14
1b990     E8 00 A0 FD | 	call	#pushregs_
1b994     44 F0 07 F1 | 	add	ptra, #68
1b998     4B 00 00 FF 
1b99c     A0 64 06 F1 | 	add	objptr, ##38560
1b9a0     32 97 02 FB | 	rdlong	arg03, objptr
1b9a4     4B 95 02 F6 | 	mov	arg02, arg03
1b9a8     01 94 66 F0 | 	shl	arg02, #1
1b9ac     4B 95 02 F1 | 	add	arg02, arg03
1b9b0     02 94 66 F0 | 	shl	arg02, #2
1b9b4     03 00 00 FF 
1b9b8     04 64 86 F1 | 	sub	objptr, ##1540
1b9bc     32 95 02 F1 | 	add	arg02, objptr
1b9c0     4A AD 02 FB | 	rdlong	local04, arg02
1b9c4                 | ' 
1b9c4                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1b9c4                 | ' if variables(varnum).vartype<array_no_type then 
1b9c4     56 97 02 F6 | 	mov	arg03, local04
1b9c8     04 96 66 F0 | 	shl	arg03, #4
1b9cc     32 00 00 FF 
1b9d0     84 64 86 F1 | 	sub	objptr, ##25732
1b9d4     32 97 02 F1 | 	add	arg03, objptr
1b9d8     0C 96 06 F1 | 	add	arg03, #12
1b9dc     4B 97 02 FB | 	rdlong	arg03, arg03
1b9e0     00 97 16 F2 | 	cmp	arg03, #256 wc
1b9e4     16 00 00 FF 
1b9e8     18 64 86 F1 | 	sub	objptr, ##11288
1b9ec     F8 00 90 3D |  if_ae	jmp	#LR__2320
1b9f0     94 1C BF FD | 	call	#_pop
1b9f4     E7 7A 62 FC | 	wrlong	result1, fp
1b9f8     04 CE 05 F1 | 	add	fp, #4
1b9fc     E7 7C 62 FC | 	wrlong	result2, fp
1ba00     04 CE 05 F1 | 	add	fp, #4
1ba04     E7 7E 62 FC | 	wrlong	result3, fp
1ba08     08 CE 85 F1 | 	sub	fp, #8
1ba0c     E7 96 02 FB | 	rdlong	arg03, fp
1ba10     04 CE 05 F1 | 	add	fp, #4
1ba14     E7 94 02 FB | 	rdlong	arg02, fp
1ba18     56 93 02 F6 | 	mov	arg01, local04
1ba1c     04 92 66 F0 | 	shl	arg01, #4
1ba20     16 00 00 FF 
1ba24     18 64 06 F1 | 	add	objptr, ##11288
1ba28     32 93 02 F1 | 	add	arg01, objptr
1ba2c     04 92 06 F1 | 	add	arg01, #4
1ba30     49 97 62 FC | 	wrlong	arg03, arg01
1ba34     56 97 02 F6 | 	mov	arg03, local04
1ba38     04 96 66 F0 | 	shl	arg03, #4
1ba3c     32 97 02 F1 | 	add	arg03, objptr
1ba40     08 96 06 F1 | 	add	arg03, #8
1ba44     4B 95 62 FC | 	wrlong	arg02, arg03
1ba48     56 97 02 F6 | 	mov	arg03, local04
1ba4c     04 96 66 F0 | 	shl	arg03, #4
1ba50     32 97 02 F1 | 	add	arg03, objptr
1ba54     04 CE 05 F1 | 	add	fp, #4
1ba58     E7 94 02 FB | 	rdlong	arg02, fp
1ba5c     08 CE 85 F1 | 	sub	fp, #8
1ba60     0C 96 06 F1 | 	add	arg03, #12
1ba64     4B 95 62 FC | 	wrlong	arg02, arg03
1ba68                 | '   t1=pop() 
1ba68                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1ba68                 | '   if variables(varnum).vartype<>result_string2 then return
1ba68     56 97 02 F6 | 	mov	arg03, local04
1ba6c     04 96 66 F0 | 	shl	arg03, #4
1ba70     32 97 02 F1 | 	add	arg03, objptr
1ba74     0C 96 06 F1 | 	add	arg03, #12
1ba78     4B 97 02 FB | 	rdlong	arg03, arg03
1ba7c     2B 96 0E F2 | 	cmp	arg03, #43 wz
1ba80     16 00 00 FF 
1ba84     18 64 86 F1 | 	sub	objptr, ##11288
1ba88     68 03 90 5D |  if_ne	jmp	#LR__2342
1ba8c     56 AF 02 F6 | 	mov	local05, local04
1ba90     04 AE 66 F0 | 	shl	local05, #4
1ba94     16 00 00 FF 
1ba98     18 64 06 F1 | 	add	objptr, ##11288
1ba9c     32 AF 02 F1 | 	add	local05, objptr
1baa0     56 97 02 F6 | 	mov	arg03, local04
1baa4     04 96 66 F0 | 	shl	arg03, #4
1baa8     32 97 02 F1 | 	add	arg03, objptr
1baac     04 96 06 F1 | 	add	arg03, #4
1bab0     4B 93 02 FB | 	rdlong	arg01, arg03
1bab4     16 00 00 FF 
1bab8     18 64 86 F1 | 	sub	objptr, ##11288
1babc     38 1D BF FD | 	call	#_convertstring
1bac0     04 AE 06 F1 | 	add	local05, #4
1bac4     57 7B 62 FC | 	wrlong	result1, local05
1bac8     04 AC 66 F0 | 	shl	local04, #4
1bacc     32 AF 02 F6 | 	mov	local05, objptr
1bad0     16 00 00 FF 
1bad4     18 AE 06 F1 | 	add	local05, ##11288
1bad8     57 AD 02 F1 | 	add	local04, local05
1badc     0C AC 06 F1 | 	add	local04, #12
1bae0     56 3F 68 FC | 	wrlong	#31, local04
1bae4                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1bae4                 | '   variables(varnum).vartype=result_string
1bae4                 | '   return
1bae4     0C 03 90 FD | 	jmp	#LR__2342
1bae8                 | LR__2320
1bae8                 | ' for i=0 to 2 : arrid(i)=0 : next i
1bae8     00 B0 06 F6 | 	mov	local06, #0
1baec                 | LR__2321
1baec     58 AF 02 F6 | 	mov	local05, local06
1baf0     53 AF 06 F1 | 	add	local05, #local01
1baf4     00 B2 06 F6 | 	mov	local07, #0
1baf8                 | 	'.live	local07
1baf8                 | 	'.live	local05
1baf8     00 AE 8E F9 | 	altd	local05, #0
1bafc     59 AF 02 F6 | 	mov	local05, local07
1bb00     01 B0 06 F1 | 	add	local06, #1
1bb04     03 B0 16 F2 | 	cmp	local06, #3 wc
1bb08     E0 FF 9F CD |  if_b	jmp	#LR__2321
1bb0c     4B 00 00 FF 
1bb10     A0 64 06 F1 | 	add	objptr, ##38560
1bb14     32 AF 02 FB | 	rdlong	local05, objptr
1bb18     57 B1 02 F6 | 	mov	local06, local05
1bb1c     01 B0 66 F0 | 	shl	local06, #1
1bb20     57 B1 02 F1 | 	add	local06, local05
1bb24     02 B0 66 F0 | 	shl	local06, #2
1bb28     03 00 00 FF 
1bb2c     04 64 86 F1 | 	sub	objptr, ##1540
1bb30     32 B1 02 F1 | 	add	local06, objptr
1bb34     04 B0 06 F1 | 	add	local06, #4
1bb38     58 B1 02 FB | 	rdlong	local06, local06
1bb3c     48 00 00 FF 
1bb40     9C 64 86 F1 | 	sub	objptr, ##37020
1bb44     40 1B BF FD | 	call	#_pop
1bb48     3D B5 02 F6 | 	mov	local08, result1
1bb4c     3E B7 02 F6 | 	mov	local09, result2
1bb50     3F AF 02 F6 | 	mov	local05, result3
1bb54     E7 B4 62 FC | 	wrlong	local08, fp
1bb58     04 CE 05 F1 | 	add	fp, #4
1bb5c     E7 B6 62 FC | 	wrlong	local09, fp
1bb60     04 CE 05 F1 | 	add	fp, #4
1bb64     E7 AE 62 FC | 	wrlong	local05, fp
1bb68     08 CE 85 F1 | 	sub	fp, #8
1bb6c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1bb6c                 | ' t1=pop() ' var value
1bb6c                 | ' if numpar>0 then
1bb6c     01 B0 16 F2 | 	cmp	local06, #1 wc
1bb70     50 00 90 CD |  if_b	jmp	#LR__2324
1bb74                 | '   for i=numpar to 1 step -1
1bb74     00 B0 4E F2 | 	cmps	local06, #0 wz
1bb78     48 00 90 AD |  if_e	jmp	#LR__2323
1bb7c                 | LR__2322
1bb7c     08 1B BF FD | 	call	#_pop
1bb80     0C CE 05 F1 | 	add	fp, #12
1bb84     E7 7A 62 FC | 	wrlong	result1, fp
1bb88     04 CE 05 F1 | 	add	fp, #4
1bb8c     E7 7C 62 FC | 	wrlong	result2, fp
1bb90     04 CE 05 F1 | 	add	fp, #4
1bb94     E7 7E 62 FC | 	wrlong	result3, fp
1bb98     58 AF 02 F6 | 	mov	local05, local06
1bb9c     01 AE 86 F1 | 	sub	local05, #1
1bba0     53 AF 06 F1 | 	add	local05, #local01
1bba4     08 CE 85 F1 | 	sub	fp, #8
1bba8     E7 92 02 F6 | 	mov	arg01, fp
1bbac     0C CE 85 F1 | 	sub	fp, #12
1bbb0     B0 1C BF FD | 	call	#_converttoint
1bbb4     3D B3 02 F6 | 	mov	local07, result1
1bbb8                 | 	'.live	local07
1bbb8                 | 	'.live	local05
1bbb8     00 AE 8E F9 | 	altd	local05, #0
1bbbc     59 AF 02 F6 | 	mov	local05, local07
1bbc0     EE B1 6E FB | 	djnz	local06, #LR__2322
1bbc4                 | LR__2323
1bbc4                 | LR__2324
1bbc4     04 AC 66 F0 | 	shl	local04, #4
1bbc8     32 97 02 F6 | 	mov	arg03, objptr
1bbcc     16 00 00 FF 
1bbd0     18 96 06 F1 | 	add	arg03, ##11288
1bbd4     4B AD 02 F1 | 	add	local04, arg03
1bbd8     04 AC 06 F1 | 	add	local04, #4
1bbdc     56 B9 02 FB | 	rdlong	local10, local04
1bbe0     5C 93 02 F6 | 	mov	arg01, local10
1bbe4     10 57 B0 FD | 	call	#_pslpeek
1bbe8     3D BB 32 F9 | 	getword	local11, result1, #0
1bbec     5C 93 02 F6 | 	mov	arg01, local10
1bbf0     02 92 06 F1 | 	add	arg01, #2
1bbf4     B8 56 B0 FD | 	call	#_pspeek
1bbf8     3D BD E2 F8 | 	getbyte	local12, result1, #0
1bbfc                 | ' esize=pspeek(arrptr+2)
1bbfc                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1bbfc     5C 93 02 F6 | 	mov	arg01, local10
1bc00     04 92 06 F1 | 	add	arg01, #4
1bc04     F0 56 B0 FD | 	call	#_pslpeek
1bc08     3D A7 12 F2 | 	cmp	local01, result1 wc
1bc0c     28 00 90 3D |  if_ae	jmp	#LR__2325
1bc10     5C 93 02 F6 | 	mov	arg01, local10
1bc14     08 92 06 F1 | 	add	arg01, #8
1bc18     DC 56 B0 FD | 	call	#_pslpeek
1bc1c     3D A9 12 F2 | 	cmp	local02, result1 wc
1bc20     14 00 90 3D |  if_ae	jmp	#LR__2325
1bc24     5C 93 02 F6 | 	mov	arg01, local10
1bc28     0C 92 06 F1 | 	add	arg01, #12
1bc2c     C8 56 B0 FD | 	call	#_pslpeek
1bc30     3D AB 12 F2 | 	cmp	local03, result1 wc
1bc34     10 00 90 CD |  if_b	jmp	#LR__2326
1bc38                 | LR__2325
1bc38     31 92 06 F6 | 	mov	arg01, #49
1bc3c     00 94 06 F6 | 	mov	arg02, #0
1bc40     F8 53 B0 FD | 	call	#_printerror
1bc44     AC 01 90 FD | 	jmp	#LR__2342
1bc48                 | LR__2326
1bc48     5C BF 02 F6 | 	mov	local13, local10
1bc4c     10 BE 06 F1 | 	add	local13, #16
1bc50     5C 93 02 F6 | 	mov	arg01, local10
1bc54     04 92 06 F1 | 	add	arg01, #4
1bc58     9C 56 B0 FD | 	call	#_pslpeek
1bc5c     54 7B 02 FD | 	qmul	result1, local02
1bc60     53 B7 02 F6 | 	mov	local09, local01
1bc64     5C 93 02 F6 | 	mov	arg01, local10
1bc68     08 92 06 F1 | 	add	arg01, #8
1bc6c     18 B4 62 FD | 	getqx	local08
1bc70     5A B7 02 F1 | 	add	local09, local08
1bc74     80 56 B0 FD | 	call	#_pslpeek
1bc78     3D B3 02 F6 | 	mov	local07, result1
1bc7c     04 B8 06 F1 | 	add	local10, #4
1bc80     5C 93 02 F6 | 	mov	arg01, local10
1bc84     70 56 B0 FD | 	call	#_pslpeek
1bc88     3D B3 02 FD | 	qmul	local07, result1
1bc8c     18 B8 62 FD | 	getqx	local10
1bc90     55 B9 02 FD | 	qmul	local10, local03
1bc94     18 A6 62 FD | 	getqx	local01
1bc98     53 B7 02 F1 | 	add	local09, local01
1bc9c     5B BD 02 FD | 	qmul	local12, local09
1bca0                 | ' 
1bca0                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1bca0                 | ' select case arrtype
1bca0     5D C1 02 F6 | 	mov	local14, local11
1bca4     00 C1 86 F1 | 	sub	local14, #256
1bca8     0C C0 26 F3 | 	fle	local14, #12
1bcac     18 A6 62 FD | 	getqx	local01
1bcb0     53 BF 02 F1 | 	add	local13, local01
1bcb4     30 C0 62 FD | 	jmprel	local14
1bcb8                 | LR__2327
1bcb8     30 00 90 FD | 	jmp	#LR__2328
1bcbc     50 00 90 FD | 	jmp	#LR__2329
1bcc0     5C 00 90 FD | 	jmp	#LR__2330
1bcc4     68 00 90 FD | 	jmp	#LR__2331
1bcc8     88 00 90 FD | 	jmp	#LR__2332
1bccc     A8 00 90 FD | 	jmp	#LR__2333
1bcd0     B4 00 90 FD | 	jmp	#LR__2334
1bcd4     C0 00 90 FD | 	jmp	#LR__2335
1bcd8     CC 00 90 FD | 	jmp	#LR__2336
1bcdc     D8 00 90 FD | 	jmp	#LR__2337
1bce0     E4 00 90 FD | 	jmp	#LR__2338
1bce4     F0 00 90 FD | 	jmp	#LR__2339
1bce8     FC 00 90 FD | 	jmp	#LR__2340
1bcec                 | LR__2328
1bcec     E7 92 02 F6 | 	mov	arg01, fp
1bcf0     5F 95 02 F6 | 	mov	arg02, local13
1bcf4     0C 96 06 F6 | 	mov	arg03, #12
1bcf8     0B 00 00 FF 
1bcfc     CC 64 06 F1 | 	add	objptr, ##5836
1bd00     30 81 B0 FD | 	call	#_psram_spin2_write
1bd04     0B 00 00 FF 
1bd08     CC 64 86 F1 | 	sub	objptr, ##5836
1bd0c     E4 00 90 FD | 	jmp	#LR__2341
1bd10                 | LR__2329
1bd10     E7 94 02 FB | 	rdlong	arg02, fp
1bd14     5F 93 02 F6 | 	mov	arg01, local13
1bd18     4C 55 B0 FD | 	call	#_pspoke
1bd1c     D4 00 90 FD | 	jmp	#LR__2341
1bd20                 | LR__2330
1bd20     E7 94 02 FB | 	rdlong	arg02, fp
1bd24     5F 93 02 F6 | 	mov	arg01, local13
1bd28     3C 55 B0 FD | 	call	#_pspoke
1bd2c     C4 00 90 FD | 	jmp	#LR__2341
1bd30                 | LR__2331
1bd30     E7 94 02 FB | 	rdlong	arg02, fp
1bd34     5F 93 02 F6 | 	mov	arg01, local13
1bd38     2C 55 B0 FD | 	call	#_pspoke
1bd3c     01 BE 06 F1 | 	add	local13, #1
1bd40     E7 94 02 FB | 	rdlong	arg02, fp
1bd44     08 94 46 F0 | 	shr	arg02, #8
1bd48     5F 93 02 F6 | 	mov	arg01, local13
1bd4c     18 55 B0 FD | 	call	#_pspoke
1bd50     A0 00 90 FD | 	jmp	#LR__2341
1bd54                 | LR__2332
1bd54     E7 94 02 FB | 	rdlong	arg02, fp
1bd58     5F 93 02 F6 | 	mov	arg01, local13
1bd5c     08 55 B0 FD | 	call	#_pspoke
1bd60     01 BE 06 F1 | 	add	local13, #1
1bd64     E7 94 02 FB | 	rdlong	arg02, fp
1bd68     08 94 46 F0 | 	shr	arg02, #8
1bd6c     5F 93 02 F6 | 	mov	arg01, local13
1bd70     F4 54 B0 FD | 	call	#_pspoke
1bd74     7C 00 90 FD | 	jmp	#LR__2341
1bd78                 | LR__2333
1bd78     E7 94 02 FB | 	rdlong	arg02, fp
1bd7c     5F 93 02 F6 | 	mov	arg01, local13
1bd80     54 54 B0 FD | 	call	#_pslpoke
1bd84     6C 00 90 FD | 	jmp	#LR__2341
1bd88                 | LR__2334
1bd88     E7 94 02 FB | 	rdlong	arg02, fp
1bd8c     5F 93 02 F6 | 	mov	arg01, local13
1bd90     44 54 B0 FD | 	call	#_pslpoke
1bd94     5C 00 90 FD | 	jmp	#LR__2341
1bd98                 | LR__2335
1bd98     E7 94 02 FB | 	rdlong	arg02, fp
1bd9c     5F 93 02 F6 | 	mov	arg01, local13
1bda0     34 54 B0 FD | 	call	#_pslpoke
1bda4     4C 00 90 FD | 	jmp	#LR__2341
1bda8                 | LR__2336
1bda8     E7 94 02 FB | 	rdlong	arg02, fp
1bdac     5F 93 02 F6 | 	mov	arg01, local13
1bdb0     24 54 B0 FD | 	call	#_pslpoke
1bdb4     3C 00 90 FD | 	jmp	#LR__2341
1bdb8                 | LR__2337
1bdb8     E7 94 02 FB | 	rdlong	arg02, fp
1bdbc     5F 93 02 F6 | 	mov	arg01, local13
1bdc0     14 54 B0 FD | 	call	#_pslpoke
1bdc4     2C 00 90 FD | 	jmp	#LR__2341
1bdc8                 | LR__2338
1bdc8     E7 94 02 FB | 	rdlong	arg02, fp
1bdcc     5F 93 02 F6 | 	mov	arg01, local13
1bdd0     04 54 B0 FD | 	call	#_pslpoke
1bdd4     1C 00 90 FD | 	jmp	#LR__2341
1bdd8                 | LR__2339
1bdd8     E7 94 02 FB | 	rdlong	arg02, fp
1bddc     5F 93 02 F6 | 	mov	arg01, local13
1bde0     F4 53 B0 FD | 	call	#_pslpoke
1bde4     0C 00 90 FD | 	jmp	#LR__2341
1bde8                 | LR__2340
1bde8     32 92 06 F6 | 	mov	arg01, #50
1bdec     00 94 06 F6 | 	mov	arg02, #0
1bdf0     48 52 B0 FD | 	call	#_printerror
1bdf4                 | LR__2341
1bdf4                 | LR__2342
1bdf4     E7 F0 03 F6 | 	mov	ptra, fp
1bdf8     F2 00 A0 FD | 	call	#popregs_
1bdfc                 | _do_assign_ret
1bdfc     2D 00 64 FD | 	ret
1be00                 | 
1be00                 | ' 
1be00                 | ' 
1be00                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1be00                 | ' 
1be00                 | ' sub do_getvar
1be00                 | _do_getvar
1be00     0D CA 05 F6 | 	mov	COUNT_, #13
1be04     E8 00 A0 FD | 	call	#pushregs_
1be08     3C F0 07 F1 | 	add	ptra, #60
1be0c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1be0c     4B 00 00 FF 
1be10     A0 64 06 F1 | 	add	objptr, ##38560
1be14     32 A7 02 FB | 	rdlong	local01, objptr
1be18     53 97 02 F6 | 	mov	arg03, local01
1be1c     01 96 66 F0 | 	shl	arg03, #1
1be20     53 97 02 F1 | 	add	arg03, local01
1be24     02 96 66 F0 | 	shl	arg03, #2
1be28     03 00 00 FF 
1be2c     04 64 86 F1 | 	sub	objptr, ##1540
1be30     32 97 02 F1 | 	add	arg03, objptr
1be34     04 96 06 F1 | 	add	arg03, #4
1be38     4B 97 0A FB | 	rdlong	arg03, arg03 wz
1be3c     48 00 00 FF 
1be40     9C 64 86 F1 | 	sub	objptr, ##37020
1be44     C4 00 90 5D |  if_ne	jmp	#LR__2351
1be48     4B 00 00 FF 
1be4c     A0 64 06 F1 | 	add	objptr, ##38560
1be50     32 A7 02 FB | 	rdlong	local01, objptr
1be54     53 93 02 F6 | 	mov	arg01, local01
1be58     01 92 66 F0 | 	shl	arg01, #1
1be5c     53 93 02 F1 | 	add	arg01, local01
1be60     02 92 66 F0 | 	shl	arg01, #2
1be64     03 00 00 FF 
1be68     04 64 86 F1 | 	sub	objptr, ##1540
1be6c     32 93 02 F1 | 	add	arg01, objptr
1be70     49 A7 02 FB | 	rdlong	local01, arg01
1be74     04 A6 66 F0 | 	shl	local01, #4
1be78     32 00 00 FF 
1be7c     84 64 86 F1 | 	sub	objptr, ##25732
1be80     32 A7 02 F1 | 	add	local01, objptr
1be84     04 A6 06 F1 | 	add	local01, #4
1be88     53 93 02 FB | 	rdlong	arg01, local01
1be8c     04 A6 06 F1 | 	add	local01, #4
1be90     53 A7 02 FB | 	rdlong	local01, local01
1be94     E7 92 62 FC | 	wrlong	arg01, fp
1be98     04 CE 05 F1 | 	add	fp, #4
1be9c     E7 A6 62 FC | 	wrlong	local01, fp
1bea0     35 00 00 FF 
1bea4     88 64 06 F1 | 	add	objptr, ##27272
1bea8     32 A7 02 FB | 	rdlong	local01, objptr
1beac     53 93 02 F6 | 	mov	arg01, local01
1beb0     01 92 66 F0 | 	shl	arg01, #1
1beb4     53 93 02 F1 | 	add	arg01, local01
1beb8     02 92 66 F0 | 	shl	arg01, #2
1bebc     03 00 00 FF 
1bec0     04 64 86 F1 | 	sub	objptr, ##1540
1bec4     32 93 02 F1 | 	add	arg01, objptr
1bec8     49 A7 02 FB | 	rdlong	local01, arg01
1becc     04 A6 66 F0 | 	shl	local01, #4
1bed0     32 00 00 FF 
1bed4     84 64 86 F1 | 	sub	objptr, ##25732
1bed8     32 A7 02 F1 | 	add	local01, objptr
1bedc     0C A6 06 F1 | 	add	local01, #12
1bee0     53 A7 02 FB | 	rdlong	local01, local01
1bee4     04 CE 05 F1 | 	add	fp, #4
1bee8     E7 A6 62 FC | 	wrlong	local01, fp
1beec                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1beec                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1beec                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1beec     08 CE 85 F1 | 	sub	fp, #8
1bef0     00 A7 16 F2 | 	cmp	local01, #256 wc
1bef4     16 00 00 FF 
1bef8     18 64 86 F1 | 	sub	objptr, ##11288
1befc     0C 00 90 3D |  if_ae	jmp	#LR__2350
1bf00     E7 92 02 F6 | 	mov	arg01, fp
1bf04     10 18 BF FD | 	call	#_push
1bf08     94 03 90 FD | 	jmp	#LR__2372
1bf0c                 | LR__2350
1bf0c                 | LR__2351
1bf0c     4B 00 00 FF 
1bf10     A0 64 06 F1 | 	add	objptr, ##38560
1bf14     32 97 02 FB | 	rdlong	arg03, objptr
1bf18     4B 95 02 F6 | 	mov	arg02, arg03
1bf1c     01 94 66 F0 | 	shl	arg02, #1
1bf20     4B 95 02 F1 | 	add	arg02, arg03
1bf24     02 94 66 F0 | 	shl	arg02, #2
1bf28     03 00 00 FF 
1bf2c     04 64 86 F1 | 	sub	objptr, ##1540
1bf30     32 95 02 F1 | 	add	arg02, objptr
1bf34     4A 97 02 FB | 	rdlong	arg03, arg02
1bf38     04 96 66 F0 | 	shl	arg03, #4
1bf3c     32 00 00 FF 
1bf40     84 64 86 F1 | 	sub	objptr, ##25732
1bf44     32 97 02 F1 | 	add	arg03, objptr
1bf48     04 96 06 F1 | 	add	arg03, #4
1bf4c     4B A9 02 FB | 	rdlong	local02, arg03
1bf50     54 93 02 F6 | 	mov	arg01, local02
1bf54     16 00 00 FF 
1bf58     18 64 86 F1 | 	sub	objptr, ##11288
1bf5c     98 53 B0 FD | 	call	#_pslpeek
1bf60     3D AB 32 F9 | 	getword	local03, result1, #0
1bf64     4B 00 00 FF 
1bf68     A0 64 06 F1 | 	add	objptr, ##38560
1bf6c     32 97 02 FB | 	rdlong	arg03, objptr
1bf70     4B 95 02 F6 | 	mov	arg02, arg03
1bf74     01 94 66 F0 | 	shl	arg02, #1
1bf78     4B 95 02 F1 | 	add	arg02, arg03
1bf7c     02 94 66 F0 | 	shl	arg02, #2
1bf80     03 00 00 FF 
1bf84     04 64 86 F1 | 	sub	objptr, ##1540
1bf88     32 95 02 F1 | 	add	arg02, objptr
1bf8c     04 94 06 F1 | 	add	arg02, #4
1bf90     4A AD 02 FB | 	rdlong	local04, arg02
1bf94     54 93 02 F6 | 	mov	arg01, local02
1bf98     02 92 06 F1 | 	add	arg01, #2
1bf9c     48 00 00 FF 
1bfa0     9C 64 86 F1 | 	sub	objptr, ##37020
1bfa4     08 53 B0 FD | 	call	#_pspeek
1bfa8     3D AF E2 F8 | 	getbyte	local05, result1, #0
1bfac     54 93 02 F6 | 	mov	arg01, local02
1bfb0     04 92 06 F1 | 	add	arg01, #4
1bfb4     40 53 B0 FD | 	call	#_pslpeek
1bfb8     3D B1 02 F6 | 	mov	local06, result1
1bfbc     54 93 02 F6 | 	mov	arg01, local02
1bfc0     08 92 06 F1 | 	add	arg01, #8
1bfc4     30 53 B0 FD | 	call	#_pslpeek
1bfc8     3D B3 02 F6 | 	mov	local07, result1
1bfcc     54 93 02 F6 | 	mov	arg01, local02
1bfd0     0C 92 06 F1 | 	add	arg01, #12
1bfd4     20 53 B0 FD | 	call	#_pslpeek
1bfd8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1bfd8                 | ' esize=pspeek(arrptr+2)
1bfd8                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1bfd8                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1bfd8                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1bfd8                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1bfd8     03 AC 16 F2 | 	cmp	local04, #3 wc
1bfdc     30 00 90 CD |  if_b	jmp	#LR__2352
1bfe0     A4 16 BF FD | 	call	#_pop
1bfe4     3F 97 02 F6 | 	mov	arg03, result3
1bfe8     E7 7A 62 FC | 	wrlong	result1, fp
1bfec     04 CE 05 F1 | 	add	fp, #4
1bff0     E7 7C 62 FC | 	wrlong	result2, fp
1bff4     04 CE 05 F1 | 	add	fp, #4
1bff8     E7 96 62 FC | 	wrlong	arg03, fp
1bffc     08 CE 85 F1 | 	sub	fp, #8
1c000     E7 92 02 F6 | 	mov	arg01, fp
1c004     5C 18 BF FD | 	call	#_converttoint
1c008     3D B5 02 F6 | 	mov	local08, result1
1c00c     04 00 90 FD | 	jmp	#LR__2353
1c010                 | LR__2352
1c010     00 B4 06 F6 | 	mov	local08, #0
1c014                 | LR__2353
1c014                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1c014     02 AC 16 F2 | 	cmp	local04, #2 wc
1c018     30 00 90 CD |  if_b	jmp	#LR__2354
1c01c     68 16 BF FD | 	call	#_pop
1c020     3F 97 02 F6 | 	mov	arg03, result3
1c024     E7 7A 62 FC | 	wrlong	result1, fp
1c028     04 CE 05 F1 | 	add	fp, #4
1c02c     E7 7C 62 FC | 	wrlong	result2, fp
1c030     04 CE 05 F1 | 	add	fp, #4
1c034     E7 96 62 FC | 	wrlong	arg03, fp
1c038     08 CE 85 F1 | 	sub	fp, #8
1c03c     E7 92 02 F6 | 	mov	arg01, fp
1c040     20 18 BF FD | 	call	#_converttoint
1c044     3D B7 02 F6 | 	mov	local09, result1
1c048     04 00 90 FD | 	jmp	#LR__2355
1c04c                 | LR__2354
1c04c     00 B6 06 F6 | 	mov	local09, #0
1c050                 | LR__2355
1c050                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1c050     01 AC 16 F2 | 	cmp	local04, #1 wc
1c054     30 00 90 CD |  if_b	jmp	#LR__2356
1c058     2C 16 BF FD | 	call	#_pop
1c05c     3F AD 02 F6 | 	mov	local04, result3
1c060     E7 7A 62 FC | 	wrlong	result1, fp
1c064     04 CE 05 F1 | 	add	fp, #4
1c068     E7 7C 62 FC | 	wrlong	result2, fp
1c06c     04 CE 05 F1 | 	add	fp, #4
1c070     E7 AC 62 FC | 	wrlong	local04, fp
1c074     08 CE 85 F1 | 	sub	fp, #8
1c078     E7 92 02 F6 | 	mov	arg01, fp
1c07c     E4 17 BF FD | 	call	#_converttoint
1c080     3D B9 02 F6 | 	mov	local10, result1
1c084     04 00 90 FD | 	jmp	#LR__2357
1c088                 | LR__2356
1c088     00 B8 06 F6 | 	mov	local10, #0
1c08c                 | LR__2357
1c08c     58 B7 02 FD | 	qmul	local09, local06
1c090     54 BB 02 F6 | 	mov	local11, local02
1c094     10 BA 06 F1 | 	add	local11, #16
1c098     5C BD 02 F6 | 	mov	local12, local10
1c09c     18 B8 62 FD | 	getqx	local10
1c0a0     58 B5 02 FD | 	qmul	local08, local06
1c0a4     5C BD 02 F1 | 	add	local12, local10
1c0a8     18 B8 62 FD | 	getqx	local10
1c0ac     59 B9 02 FD | 	qmul	local10, local07
1c0b0     18 B8 62 FD | 	getqx	local10
1c0b4     5C BD 02 F1 | 	add	local12, local10
1c0b8     57 BD 02 FD | 	qmul	local12, local05
1c0bc                 | ' 
1c0bc                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1c0bc                 | ' 
1c0bc                 | ' select case vartype
1c0bc     55 BF 02 F6 | 	mov	local13, local03
1c0c0     00 BF 86 F1 | 	sub	local13, #256
1c0c4     0C BE 26 F3 | 	fle	local13, #12
1c0c8     18 B8 62 FD | 	getqx	local10
1c0cc     5C BB 02 F1 | 	add	local11, local10
1c0d0     30 BE 62 FD | 	jmprel	local13
1c0d4                 | LR__2358
1c0d4     30 00 90 FD | 	jmp	#LR__2359
1c0d8     50 00 90 FD | 	jmp	#LR__2360
1c0dc     80 00 90 FD | 	jmp	#LR__2361
1c0e0     9C 00 90 FD | 	jmp	#LR__2362
1c0e4     D4 00 90 FD | 	jmp	#LR__2363
1c0e8     F0 00 90 FD | 	jmp	#LR__2364
1c0ec     08 01 90 FD | 	jmp	#LR__2365
1c0f0     20 01 90 FD | 	jmp	#LR__2366
1c0f4     30 01 90 FD | 	jmp	#LR__2367
1c0f8     40 01 90 FD | 	jmp	#LR__2368
1c0fc     58 01 90 FD | 	jmp	#LR__2369
1c100     68 01 90 FD | 	jmp	#LR__2370
1c104     90 01 90 FD | 	jmp	#LR__2371
1c108                 | LR__2359
1c108     E7 92 02 F6 | 	mov	arg01, fp
1c10c     5D 95 02 F6 | 	mov	arg02, local11
1c110     0C 96 06 F6 | 	mov	arg03, #12
1c114     0B 00 00 FF 
1c118     CC 64 06 F1 | 	add	objptr, ##5836
1c11c     78 7C B0 FD | 	call	#_psram_spin2_read1
1c120     0B 00 00 FF 
1c124     CC 64 86 F1 | 	sub	objptr, ##5836
1c128     6C 01 90 FD | 	jmp	#LR__2371
1c12c                 | LR__2360
1c12c     08 CE 05 F1 | 	add	fp, #8
1c130     E7 38 68 FC | 	wrlong	#28, fp
1c134     08 CE 85 F1 | 	sub	fp, #8
1c138     5D 93 02 F6 | 	mov	arg01, local11
1c13c     70 51 B0 FD | 	call	#_pspeek
1c140     3D 7B E2 F8 | 	getbyte	result1, result1, #0
1c144     E7 7A 62 FC | 	wrlong	result1, fp
1c148     80 7A 16 F2 | 	cmp	result1, #128 wc
1c14c     00 A7 66 36 |  if_ae	neg	local01, #256
1c150     3D BD 02 36 |  if_ae	mov	local12, result1
1c154     5E A7 42 35 |  if_ae	or	local01, local12
1c158     E7 A6 62 3C |  if_ae	wrlong	local01, fp
1c15c     38 01 90 FD | 	jmp	#LR__2371
1c160                 | LR__2361
1c160     08 CE 05 F1 | 	add	fp, #8
1c164     E7 3A 68 FC | 	wrlong	#29, fp
1c168     08 CE 85 F1 | 	sub	fp, #8
1c16c     5D 93 02 F6 | 	mov	arg01, local11
1c170     3C 51 B0 FD | 	call	#_pspeek
1c174     3D 7B E2 F8 | 	getbyte	result1, result1, #0
1c178     E7 7A 62 FC | 	wrlong	result1, fp
1c17c     18 01 90 FD | 	jmp	#LR__2371
1c180                 | LR__2362
1c180     08 CE 05 F1 | 	add	fp, #8
1c184     E7 38 68 FC | 	wrlong	#28, fp
1c188     08 CE 85 F1 | 	sub	fp, #8
1c18c     5D 93 02 F6 | 	mov	arg01, local11
1c190     64 51 B0 FD | 	call	#_pslpeek
1c194     3D 7B 32 F9 | 	getword	result1, result1, #0
1c198     E7 7A 62 FC | 	wrlong	result1, fp
1c19c     40 00 00 FF 
1c1a0     00 7A 16 F2 | 	cmp	result1, ##32768 wc
1c1a4     FF 7F 00 3F 
1c1a8     00 A7 06 36 |  if_ae	mov	local01, ##16776960
1c1ac     3D BD 02 36 |  if_ae	mov	local12, result1
1c1b0     5E A7 42 35 |  if_ae	or	local01, local12
1c1b4     E7 A6 62 3C |  if_ae	wrlong	local01, fp
1c1b8     DC 00 90 FD | 	jmp	#LR__2371
1c1bc                 | LR__2363
1c1bc     08 CE 05 F1 | 	add	fp, #8
1c1c0     E7 3A 68 FC | 	wrlong	#29, fp
1c1c4     08 CE 85 F1 | 	sub	fp, #8
1c1c8     5D 93 02 F6 | 	mov	arg01, local11
1c1cc     28 51 B0 FD | 	call	#_pslpeek
1c1d0     3D 7B 32 F9 | 	getword	result1, result1, #0
1c1d4     E7 7A 62 FC | 	wrlong	result1, fp
1c1d8     BC 00 90 FD | 	jmp	#LR__2371
1c1dc                 | LR__2364
1c1dc     08 CE 05 F1 | 	add	fp, #8
1c1e0     E7 38 68 FC | 	wrlong	#28, fp
1c1e4     08 CE 85 F1 | 	sub	fp, #8
1c1e8     5D 93 02 F6 | 	mov	arg01, local11
1c1ec     08 51 B0 FD | 	call	#_pslpeek
1c1f0     E7 7A 62 FC | 	wrlong	result1, fp
1c1f4     A0 00 90 FD | 	jmp	#LR__2371
1c1f8                 | LR__2365
1c1f8     08 CE 05 F1 | 	add	fp, #8
1c1fc     E7 3A 68 FC | 	wrlong	#29, fp
1c200     08 CE 85 F1 | 	sub	fp, #8
1c204     5D 93 02 F6 | 	mov	arg01, local11
1c208     EC 50 B0 FD | 	call	#_pslpeek
1c20c     E7 7A 62 FC | 	wrlong	result1, fp
1c210     84 00 90 FD | 	jmp	#LR__2371
1c214                 | LR__2366
1c214     08 CE 05 F1 | 	add	fp, #8
1c218     E7 FE 69 FC | 	wrlong	#255, fp
1c21c     08 CE 85 F1 | 	sub	fp, #8
1c220     E7 60 68 FC | 	wrlong	#48, fp
1c224     70 00 90 FD | 	jmp	#LR__2371
1c228                 | LR__2367
1c228     08 CE 05 F1 | 	add	fp, #8
1c22c     E7 FE 69 FC | 	wrlong	#255, fp
1c230     08 CE 85 F1 | 	sub	fp, #8
1c234     E7 60 68 FC | 	wrlong	#48, fp
1c238     5C 00 90 FD | 	jmp	#LR__2371
1c23c                 | LR__2368
1c23c     08 CE 05 F1 | 	add	fp, #8
1c240     E7 3C 68 FC | 	wrlong	#30, fp
1c244     08 CE 85 F1 | 	sub	fp, #8
1c248     5D 93 02 F6 | 	mov	arg01, local11
1c24c     A8 50 B0 FD | 	call	#_pslpeek
1c250     E7 7A 62 FC | 	wrlong	result1, fp
1c254     40 00 90 FD | 	jmp	#LR__2371
1c258                 | LR__2369
1c258     08 CE 05 F1 | 	add	fp, #8
1c25c     E7 FE 69 FC | 	wrlong	#255, fp
1c260     08 CE 85 F1 | 	sub	fp, #8
1c264     E7 60 68 FC | 	wrlong	#48, fp
1c268     2C 00 90 FD | 	jmp	#LR__2371
1c26c                 | LR__2370
1c26c     08 CE 05 F1 | 	add	fp, #8
1c270     E7 3E 68 FC | 	wrlong	#31, fp
1c274     08 CE 85 F1 | 	sub	fp, #8
1c278     5D 93 02 F6 | 	mov	arg01, local11
1c27c     78 50 B0 FD | 	call	#_pslpeek
1c280     E7 7A 62 FC | 	wrlong	result1, fp
1c284     00 04 00 FF 
1c288     00 7A 16 F2 | 	cmp	result1, ##524288 wc
1c28c     08 CE 05 31 |  if_ae	add	fp, #8
1c290     E7 56 68 3C |  if_ae	wrlong	#43, fp
1c294     08 CE 85 31 |  if_ae	sub	fp, #8
1c298                 | LR__2371
1c298     E7 92 02 F6 | 	mov	arg01, fp
1c29c     78 14 BF FD | 	call	#_push
1c2a0                 | LR__2372
1c2a0     E7 F0 03 F6 | 	mov	ptra, fp
1c2a4     F2 00 A0 FD | 	call	#popregs_
1c2a8                 | _do_getvar_ret
1c2a8     2D 00 64 FD | 	ret
1c2ac                 | 
1c2ac                 | ' 
1c2ac                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1c2ac                 | ' 
1c2ac                 | ' sub do_getaddr
1c2ac                 | _do_getaddr
1c2ac     09 CA 05 F6 | 	mov	COUNT_, #9
1c2b0     E8 00 A0 FD | 	call	#pushregs_
1c2b4     38 F0 07 F1 | 	add	ptra, #56
1c2b8                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1c2b8                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1c2b8     4B 00 00 FF 
1c2bc     A0 64 06 F1 | 	add	objptr, ##38560
1c2c0     32 93 02 FB | 	rdlong	arg01, objptr
1c2c4     49 7D 02 F6 | 	mov	result2, arg01
1c2c8     01 7C 66 F0 | 	shl	result2, #1
1c2cc     49 7D 02 F1 | 	add	result2, arg01
1c2d0     02 7C 66 F0 | 	shl	result2, #2
1c2d4     03 00 00 FF 
1c2d8     04 64 86 F1 | 	sub	objptr, ##1540
1c2dc     32 7D 02 F1 | 	add	result2, objptr
1c2e0     04 7C 06 F1 | 	add	result2, #4
1c2e4     3E 7D 0A FB | 	rdlong	result2, result2 wz
1c2e8     48 00 00 FF 
1c2ec     9C 64 86 F1 | 	sub	objptr, ##37020
1c2f0     10 01 90 5D |  if_ne	jmp	#LR__2380
1c2f4     4B 00 00 FF 
1c2f8     A0 64 06 F1 | 	add	objptr, ##38560
1c2fc     32 93 02 FB | 	rdlong	arg01, objptr
1c300     49 7D 02 F6 | 	mov	result2, arg01
1c304     01 7C 66 F0 | 	shl	result2, #1
1c308     49 7D 02 F1 | 	add	result2, arg01
1c30c     02 7C 66 F0 | 	shl	result2, #2
1c310     03 00 00 FF 
1c314     04 64 86 F1 | 	sub	objptr, ##1540
1c318     32 7D 02 F1 | 	add	result2, objptr
1c31c     3E 93 02 FB | 	rdlong	arg01, result2
1c320     04 92 66 F0 | 	shl	arg01, #4
1c324     32 00 00 FF 
1c328     84 64 86 F1 | 	sub	objptr, ##25732
1c32c     32 93 02 F1 | 	add	arg01, objptr
1c330     0C 92 06 F1 | 	add	arg01, #12
1c334     49 93 02 FB | 	rdlong	arg01, arg01
1c338     08 CE 05 F1 | 	add	fp, #8
1c33c     E7 92 62 FC | 	wrlong	arg01, fp
1c340                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1c340                 | '    if t1.result_type>=array_no_type then goto 2200
1c340     08 CE 85 F1 | 	sub	fp, #8
1c344     00 93 16 F2 | 	cmp	arg01, #256 wc
1c348     16 00 00 FF 
1c34c     18 64 86 F1 | 	sub	objptr, ##11288
1c350     B0 00 90 3D |  if_ae	jmp	#LR__2381
1c354     4B 00 00 FF 
1c358     A0 64 06 F1 | 	add	objptr, ##38560
1c35c     32 93 02 FB | 	rdlong	arg01, objptr
1c360     49 7F 02 F6 | 	mov	result3, arg01
1c364     01 7E 66 F0 | 	shl	result3, #1
1c368     49 7F 02 F1 | 	add	result3, arg01
1c36c     02 7E 66 F0 | 	shl	result3, #2
1c370     03 00 00 FF 
1c374     04 64 86 F1 | 	sub	objptr, ##1540
1c378     32 7F 02 F1 | 	add	result3, objptr
1c37c     3F 7B 02 FB | 	rdlong	result1, result3
1c380     04 7A 66 F0 | 	shl	result1, #4
1c384     32 00 00 FF 
1c388     84 64 86 F1 | 	sub	objptr, ##25732
1c38c     32 7B 02 F1 | 	add	result1, objptr
1c390     04 7A 06 F1 | 	add	result1, #4
1c394     E7 7A 62 FC | 	wrlong	result1, fp
1c398     35 00 00 FF 
1c39c     88 64 06 F1 | 	add	objptr, ##27272
1c3a0     32 7F 02 FB | 	rdlong	result3, objptr
1c3a4     3F 93 02 F6 | 	mov	arg01, result3
1c3a8     01 92 66 F0 | 	shl	arg01, #1
1c3ac     3F 93 02 F1 | 	add	arg01, result3
1c3b0     02 92 66 F0 | 	shl	arg01, #2
1c3b4     03 00 00 FF 
1c3b8     04 64 86 F1 | 	sub	objptr, ##1540
1c3bc     32 93 02 F1 | 	add	arg01, objptr
1c3c0     49 93 02 FB | 	rdlong	arg01, arg01
1c3c4     04 92 66 F0 | 	shl	arg01, #4
1c3c8     32 00 00 FF 
1c3cc     84 64 86 F1 | 	sub	objptr, ##25732
1c3d0     32 93 02 F1 | 	add	arg01, objptr
1c3d4     0C 92 06 F1 | 	add	arg01, #12
1c3d8     49 93 02 FB | 	rdlong	arg01, arg01
1c3dc     04 CE 05 F1 | 	add	fp, #4
1c3e0     E7 92 62 FC | 	wrlong	arg01, fp
1c3e4     04 CE 05 F1 | 	add	fp, #4
1c3e8     E7 3A 68 FC | 	wrlong	#29, fp
1c3ec     08 CE 85 F1 | 	sub	fp, #8
1c3f0     E7 92 02 F6 | 	mov	arg01, fp
1c3f4     16 00 00 FF 
1c3f8     18 64 86 F1 | 	sub	objptr, ##11288
1c3fc     18 13 BF FD | 	call	#_push
1c400                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1c400                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1c400                 | '   t1.result_type=result_uint
1c400                 | '   push t1 : return
1c400     24 02 90 FD | 	jmp	#LR__2390
1c404                 | LR__2380
1c404                 | LR__2381
1c404     4B 00 00 FF 
1c408     A0 64 06 F1 | 	add	objptr, ##38560
1c40c     32 A7 02 FB | 	rdlong	local01, objptr
1c410     53 7D 02 F6 | 	mov	result2, local01
1c414     01 7C 66 F0 | 	shl	result2, #1
1c418     53 7D 02 F1 | 	add	result2, local01
1c41c     02 7C 66 F0 | 	shl	result2, #2
1c420     03 00 00 FF 
1c424     04 64 86 F1 | 	sub	objptr, ##1540
1c428     32 7D 02 F1 | 	add	result2, objptr
1c42c     3E 7D 02 FB | 	rdlong	result2, result2
1c430     04 7C 66 F0 | 	shl	result2, #4
1c434     32 00 00 FF 
1c438     84 64 86 F1 | 	sub	objptr, ##25732
1c43c     32 7D 02 F1 | 	add	result2, objptr
1c440     04 7C 06 F1 | 	add	result2, #4
1c444     3E A9 02 FB | 	rdlong	local02, result2
1c448     53 93 02 F6 | 	mov	arg01, local01
1c44c     01 92 66 F0 | 	shl	arg01, #1
1c450     53 93 02 F1 | 	add	arg01, local01
1c454     02 92 66 F0 | 	shl	arg01, #2
1c458     32 00 00 FF 
1c45c     84 64 06 F1 | 	add	objptr, ##25732
1c460     32 93 02 F1 | 	add	arg01, objptr
1c464     49 93 02 FB | 	rdlong	arg01, arg01
1c468     04 92 66 F0 | 	shl	arg01, #4
1c46c     32 00 00 FF 
1c470     84 64 86 F1 | 	sub	objptr, ##25732
1c474     32 93 02 F1 | 	add	arg01, objptr
1c478     0C 92 06 F1 | 	add	arg01, #12
1c47c     49 93 02 FB | 	rdlong	arg01, arg01
1c480     04 CE 05 F1 | 	add	fp, #4
1c484     E7 92 62 FC | 	wrlong	arg01, fp
1c488     04 CE 85 F1 | 	sub	fp, #4
1c48c     54 93 02 F6 | 	mov	arg01, local02
1c490     16 00 00 FF 
1c494     18 64 86 F1 | 	sub	objptr, ##11288
1c498     5C 4E B0 FD | 	call	#_pslpeek
1c49c     4B 00 00 FF 
1c4a0     A0 64 06 F1 | 	add	objptr, ##38560
1c4a4     32 A7 02 FB | 	rdlong	local01, objptr
1c4a8     53 93 02 F6 | 	mov	arg01, local01
1c4ac     01 92 66 F0 | 	shl	arg01, #1
1c4b0     53 93 02 F1 | 	add	arg01, local01
1c4b4     02 92 66 F0 | 	shl	arg01, #2
1c4b8     03 00 00 FF 
1c4bc     04 64 86 F1 | 	sub	objptr, ##1540
1c4c0     32 93 02 F1 | 	add	arg01, objptr
1c4c4     04 92 06 F1 | 	add	arg01, #4
1c4c8     49 AB 02 FB | 	rdlong	local03, arg01
1c4cc     54 93 02 F6 | 	mov	arg01, local02
1c4d0     02 92 06 F1 | 	add	arg01, #2
1c4d4     48 00 00 FF 
1c4d8     9C 64 86 F1 | 	sub	objptr, ##37020
1c4dc     D0 4D B0 FD | 	call	#_pspeek
1c4e0     3D AD E2 F8 | 	getbyte	local04, result1, #0
1c4e4     54 93 02 F6 | 	mov	arg01, local02
1c4e8     04 92 06 F1 | 	add	arg01, #4
1c4ec     08 4E B0 FD | 	call	#_pslpeek
1c4f0     3D AF 02 F6 | 	mov	local05, result1
1c4f4     54 93 02 F6 | 	mov	arg01, local02
1c4f8     08 92 06 F1 | 	add	arg01, #8
1c4fc     F8 4D B0 FD | 	call	#_pslpeek
1c500     3D B1 02 F6 | 	mov	local06, result1
1c504     54 93 02 F6 | 	mov	arg01, local02
1c508     0C 92 06 F1 | 	add	arg01, #12
1c50c     E8 4D B0 FD | 	call	#_pslpeek
1c510                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1c510                 | ' esize=pspeek(arrptr+2)
1c510                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1c510                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1c510                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1c510                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1c510     03 AA 16 F2 | 	cmp	local03, #3 wc
1c514     30 00 90 CD |  if_b	jmp	#LR__2382
1c518     6C 11 BF FD | 	call	#_pop
1c51c     3F A7 02 F6 | 	mov	local01, result3
1c520     E7 7A 62 FC | 	wrlong	result1, fp
1c524     04 CE 05 F1 | 	add	fp, #4
1c528     E7 7C 62 FC | 	wrlong	result2, fp
1c52c     04 CE 05 F1 | 	add	fp, #4
1c530     E7 A6 62 FC | 	wrlong	local01, fp
1c534     08 CE 85 F1 | 	sub	fp, #8
1c538     E7 92 02 F6 | 	mov	arg01, fp
1c53c     24 13 BF FD | 	call	#_converttoint
1c540     3D B3 02 F6 | 	mov	local07, result1
1c544     04 00 90 FD | 	jmp	#LR__2383
1c548                 | LR__2382
1c548     00 B2 06 F6 | 	mov	local07, #0
1c54c                 | LR__2383
1c54c                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1c54c     02 AA 16 F2 | 	cmp	local03, #2 wc
1c550     30 00 90 CD |  if_b	jmp	#LR__2384
1c554     30 11 BF FD | 	call	#_pop
1c558     3F A7 02 F6 | 	mov	local01, result3
1c55c     E7 7A 62 FC | 	wrlong	result1, fp
1c560     04 CE 05 F1 | 	add	fp, #4
1c564     E7 7C 62 FC | 	wrlong	result2, fp
1c568     04 CE 05 F1 | 	add	fp, #4
1c56c     E7 A6 62 FC | 	wrlong	local01, fp
1c570     08 CE 85 F1 | 	sub	fp, #8
1c574     E7 92 02 F6 | 	mov	arg01, fp
1c578     E8 12 BF FD | 	call	#_converttoint
1c57c     3D B5 02 F6 | 	mov	local08, result1
1c580     04 00 90 FD | 	jmp	#LR__2385
1c584                 | LR__2384
1c584     00 B4 06 F6 | 	mov	local08, #0
1c588                 | LR__2385
1c588                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1c588     01 AA 16 F2 | 	cmp	local03, #1 wc
1c58c     30 00 90 CD |  if_b	jmp	#LR__2386
1c590     F4 10 BF FD | 	call	#_pop
1c594     3F A7 02 F6 | 	mov	local01, result3
1c598     E7 7A 62 FC | 	wrlong	result1, fp
1c59c     04 CE 05 F1 | 	add	fp, #4
1c5a0     E7 7C 62 FC | 	wrlong	result2, fp
1c5a4     04 CE 05 F1 | 	add	fp, #4
1c5a8     E7 A6 62 FC | 	wrlong	local01, fp
1c5ac     08 CE 85 F1 | 	sub	fp, #8
1c5b0     E7 92 02 F6 | 	mov	arg01, fp
1c5b4     AC 12 BF FD | 	call	#_converttoint
1c5b8     3D B7 02 F6 | 	mov	local09, result1
1c5bc     04 00 90 FD | 	jmp	#LR__2387
1c5c0                 | LR__2386
1c5c0     00 B6 06 F6 | 	mov	local09, #0
1c5c4                 | LR__2387
1c5c4                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1c5c4                 | ' if numpar>0 then
1c5c4     01 AA 16 F2 | 	cmp	local03, #1 wc
1c5c8     44 00 90 CD |  if_b	jmp	#LR__2388
1c5cc     57 B5 02 FD | 	qmul	local08, local05
1c5d0     10 A8 06 F1 | 	add	local02, #16
1c5d4     18 B4 62 FD | 	getqx	local08
1c5d8     57 B3 02 FD | 	qmul	local07, local05
1c5dc     5A B7 02 F1 | 	add	local09, local08
1c5e0     18 B4 62 FD | 	getqx	local08
1c5e4     58 B5 02 FD | 	qmul	local08, local06
1c5e8     18 B4 62 FD | 	getqx	local08
1c5ec     5A B7 02 F1 | 	add	local09, local08
1c5f0     56 B7 02 FD | 	qmul	local09, local04
1c5f4     08 CE 05 F1 | 	add	fp, #8
1c5f8     E7 3A 68 FC | 	wrlong	#29, fp
1c5fc     08 CE 85 F1 | 	sub	fp, #8
1c600     18 A6 62 FD | 	getqx	local01
1c604     53 A9 02 F1 | 	add	local02, local01
1c608     E7 A8 62 FC | 	wrlong	local02, fp
1c60c     10 00 90 FD | 	jmp	#LR__2389
1c610                 | LR__2388
1c610     08 CE 05 F1 | 	add	fp, #8
1c614     E7 3A 68 FC | 	wrlong	#29, fp
1c618     08 CE 85 F1 | 	sub	fp, #8
1c61c     E7 A8 62 FC | 	wrlong	local02, fp
1c620                 | LR__2389
1c620     E7 92 02 F6 | 	mov	arg01, fp
1c624     F0 10 BF FD | 	call	#_push
1c628                 | LR__2390
1c628     E7 F0 03 F6 | 	mov	ptra, fp
1c62c     F2 00 A0 FD | 	call	#popregs_
1c630                 | _do_getaddr_ret
1c630     2D 00 64 FD | 	ret
1c634                 | 
1c634                 | ' 
1c634                 | ' 
1c634                 | ' 
1c634                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c634                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1c634                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c634                 | ' 
1c634                 | ' '--------------------------------- AND 
1c634                 | ' 
1c634                 | ' sub do_and 
1c634                 | _do_and
1c634     05 CA 05 F6 | 	mov	COUNT_, #5
1c638     E8 00 A0 FD | 	call	#pushregs_
1c63c     18 F0 07 F1 | 	add	ptra, #24
1c640     44 10 BF FD | 	call	#_pop
1c644     3D A7 02 F6 | 	mov	local01, result1
1c648     3E 93 02 F6 | 	mov	arg01, result2
1c64c     3F AD 02 F6 | 	mov	local04, result3
1c650     49 A9 02 F6 | 	mov	local02, arg01
1c654     56 AB 02 F6 | 	mov	local03, local04
1c658     2C 10 BF FD | 	call	#_pop
1c65c     3F AF 02 F6 | 	mov	local05, result3
1c660     E7 7A 62 FC | 	wrlong	result1, fp
1c664     04 CE 05 F1 | 	add	fp, #4
1c668     E7 7C 62 FC | 	wrlong	result2, fp
1c66c     04 CE 05 F1 | 	add	fp, #4
1c670     E7 AE 62 FC | 	wrlong	local05, fp
1c674                 | ' 
1c674                 | ' t2=pop()
1c674                 | ' t1=pop()
1c674                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1c674     08 CE 85 F1 | 	sub	fp, #8
1c678     1C AE 0E F2 | 	cmp	local05, #28 wz
1c67c     E7 AE 02 AB |  if_e	rdlong	local05, fp
1c680     E7 AE 62 AC |  if_e	wrlong	local05, fp
1c684     08 CE 05 A1 |  if_e	add	fp, #8
1c688     E7 3A 68 AC |  if_e	wrlong	#29, fp
1c68c     08 CE 85 A1 |  if_e	sub	fp, #8
1c690                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1c690     1C AA 0E F2 | 	cmp	local03, #28 wz
1c694     1D AA 06 A6 |  if_e	mov	local03, #29
1c698                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1c698     08 CE 05 F1 | 	add	fp, #8
1c69c     E7 AE 02 FB | 	rdlong	local05, fp
1c6a0     08 CE 85 F1 | 	sub	fp, #8
1c6a4     1F AE 0E F2 | 	cmp	local05, #31 wz
1c6a8     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1c6ac     08 CE 05 51 |  if_ne	add	fp, #8
1c6b0     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1c6b4     08 CE 85 51 |  if_ne	sub	fp, #8
1c6b8     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1c6bc     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1c6c0     E7 0C 68 AC |  if_e	wrlong	#6, fp
1c6c4     08 CE 05 A1 |  if_e	add	fp, #8
1c6c8     E7 FE 69 AC |  if_e	wrlong	#255, fp
1c6cc     08 CE 85 A1 |  if_e	sub	fp, #8
1c6d0     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1c6d4     53 AF 02 55 |  if_ne	and	local05, local01
1c6d8     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1c6dc     E7 92 02 F6 | 	mov	arg01, fp
1c6e0     34 10 BF FD | 	call	#_push
1c6e4     E7 F0 03 F6 | 	mov	ptra, fp
1c6e8     F2 00 A0 FD | 	call	#popregs_
1c6ec                 | _do_and_ret
1c6ec     2D 00 64 FD | 	ret
1c6f0                 | 
1c6f0                 | ' 
1c6f0                 | ' '--------------------------------- DIV (integer divide)
1c6f0                 | ' 
1c6f0                 | ' sub do_div 
1c6f0                 | _do_div
1c6f0     04 CA 05 F6 | 	mov	COUNT_, #4
1c6f4     E8 00 A0 FD | 	call	#pushregs_
1c6f8     18 F0 07 F1 | 	add	ptra, #24
1c6fc     88 0F BF FD | 	call	#_pop
1c700     3D A7 02 F6 | 	mov	local01, result1
1c704     3E 11 03 F6 | 	mov	muldivb_, result2
1c708     3F 0F 03 F6 | 	mov	muldiva_, result3
1c70c     88 A9 02 F6 | 	mov	local02, muldivb_
1c710     87 AB 02 F6 | 	mov	local03, muldiva_
1c714     70 0F BF FD | 	call	#_pop
1c718     E7 7A 62 FC | 	wrlong	result1, fp
1c71c     04 CE 05 F1 | 	add	fp, #4
1c720     E7 7C 62 FC | 	wrlong	result2, fp
1c724     04 CE 05 F1 | 	add	fp, #4
1c728     E7 7E 62 FC | 	wrlong	result3, fp
1c72c                 | ' 
1c72c                 | ' t2=pop()
1c72c                 | ' t1=pop()
1c72c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1c72c     08 CE 85 F1 | 	sub	fp, #8
1c730     1F 7E 0E F2 | 	cmp	result3, #31 wz
1c734     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1c738     E7 14 68 AC |  if_e	wrlong	#10, fp
1c73c     08 CE 05 A1 |  if_e	add	fp, #8
1c740     E7 FE 69 AC |  if_e	wrlong	#255, fp
1c744     08 CE 85 A1 |  if_e	sub	fp, #8
1c748     14 01 90 AD |  if_e	jmp	#LR__2405
1c74c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1c74c     08 CE 05 F1 | 	add	fp, #8
1c750     E7 10 03 FB | 	rdlong	muldivb_, fp
1c754     08 CE 85 F1 | 	sub	fp, #8
1c758     1E 10 0F F2 | 	cmp	muldivb_, #30 wz
1c75c     1C 00 90 5D |  if_ne	jmp	#LR__2400
1c760     08 CE 05 F1 | 	add	fp, #8
1c764     E7 38 68 FC | 	wrlong	#28, fp
1c768     08 CE 85 F1 | 	sub	fp, #8
1c76c     E7 92 02 FB | 	rdlong	arg01, fp
1c770     00 94 06 F6 | 	mov	arg02, #0
1c774     D8 AD B0 FD | 	call	#__system___float_tointeger
1c778     E7 7A 62 FC | 	wrlong	result1, fp
1c77c                 | LR__2400
1c77c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1c77c     1E AA 0E F2 | 	cmp	local03, #30 wz
1c780     14 00 90 5D |  if_ne	jmp	#LR__2401
1c784     1C AA 06 F6 | 	mov	local03, #28
1c788     53 93 02 F6 | 	mov	arg01, local01
1c78c     00 94 06 F6 | 	mov	arg02, #0
1c790     BC AD B0 FD | 	call	#__system___float_tointeger
1c794     3D A7 02 F6 | 	mov	local01, result1
1c798                 | LR__2401
1c798     08 CE 05 F1 | 	add	fp, #8
1c79c     E7 AC 02 FB | 	rdlong	local04, fp
1c7a0     08 CE 85 F1 | 	sub	fp, #8
1c7a4     1D AC 0E F2 | 	cmp	local04, #29 wz
1c7a8     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c7ac     E7 AC 02 AB |  if_e	rdlong	local04, fp
1c7b0     53 AD 12 AD |  if_e	qdiv	local04, local01
1c7b4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1c7b4     18 AC 62 AD |  if_e	getqx	local04
1c7b8     E7 AC 62 AC |  if_e	wrlong	local04, fp
1c7bc     A0 00 90 AD |  if_e	jmp	#LR__2405
1c7c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1c7c0     08 CE 05 F1 | 	add	fp, #8
1c7c4     E7 AC 02 FB | 	rdlong	local04, fp
1c7c8     08 CE 85 F1 | 	sub	fp, #8
1c7cc     1D AC 0E F2 | 	cmp	local04, #29 wz
1c7d0     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c7d4     20 00 90 5D |  if_ne	jmp	#LR__2402
1c7d8     E7 AC 02 FB | 	rdlong	local04, fp
1c7dc     53 AD 12 FD | 	qdiv	local04, local01
1c7e0     18 AC 62 FD | 	getqx	local04
1c7e4     E7 AC 62 FC | 	wrlong	local04, fp
1c7e8     08 CE 05 F1 | 	add	fp, #8
1c7ec     E7 38 68 FC | 	wrlong	#28, fp
1c7f0     08 CE 85 F1 | 	sub	fp, #8
1c7f4     68 00 90 FD | 	jmp	#LR__2405
1c7f8                 | LR__2402
1c7f8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1c7f8     08 CE 05 F1 | 	add	fp, #8
1c7fc     E7 AC 02 FB | 	rdlong	local04, fp
1c800     08 CE 85 F1 | 	sub	fp, #8
1c804     1C AC 0E F2 | 	cmp	local04, #28 wz
1c808     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c80c     14 00 90 5D |  if_ne	jmp	#LR__2403
1c810     E7 0E 03 FB | 	rdlong	muldiva_, fp
1c814     53 11 03 F6 | 	mov	muldivb_, local01
1c818     FA 00 A0 FD | 	call	#divide_
1c81c     E7 10 63 FC | 	wrlong	muldivb_, fp
1c820     3C 00 90 FD | 	jmp	#LR__2405
1c824                 | LR__2403
1c824                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1c824     08 CE 05 F1 | 	add	fp, #8
1c828     E7 AC 02 FB | 	rdlong	local04, fp
1c82c     08 CE 85 F1 | 	sub	fp, #8
1c830     1C AC 0E F2 | 	cmp	local04, #28 wz
1c834     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c838     14 00 90 5D |  if_ne	jmp	#LR__2404
1c83c     E7 0E 03 FB | 	rdlong	muldiva_, fp
1c840     53 11 03 F6 | 	mov	muldivb_, local01
1c844     FA 00 A0 FD | 	call	#divide_
1c848     E7 10 63 FC | 	wrlong	muldivb_, fp
1c84c     10 00 90 FD | 	jmp	#LR__2405
1c850                 | LR__2404
1c850     E7 16 68 FC | 	wrlong	#11, fp
1c854     08 CE 05 F1 | 	add	fp, #8
1c858     E7 FE 69 FC | 	wrlong	#255, fp
1c85c     08 CE 85 F1 | 	sub	fp, #8
1c860                 | LR__2405
1c860     E7 92 02 F6 | 	mov	arg01, fp
1c864     B0 0E BF FD | 	call	#_push
1c868     E7 F0 03 F6 | 	mov	ptra, fp
1c86c     F2 00 A0 FD | 	call	#popregs_
1c870                 | _do_div_ret
1c870     2D 00 64 FD | 	ret
1c874                 | 
1c874                 | ' 
1c874                 | ' '--------------------------------- equal (=)
1c874                 | ' 
1c874                 | ' sub do_eq
1c874                 | _do_eq
1c874     07 CA 05 F6 | 	mov	COUNT_, #7
1c878     E8 00 A0 FD | 	call	#pushregs_
1c87c     18 F0 07 F1 | 	add	ptra, #24
1c880     04 0E BF FD | 	call	#_pop
1c884     3D A7 02 F6 | 	mov	local01, result1
1c888     3E AD 02 F6 | 	mov	local04, result2
1c88c     3F AF 02 F6 | 	mov	local05, result3
1c890     56 A9 02 F6 | 	mov	local02, local04
1c894     57 AB 02 F6 | 	mov	local03, local05
1c898     EC 0D BF FD | 	call	#_pop
1c89c     3F AF 02 F6 | 	mov	local05, result3
1c8a0     E7 7A 62 FC | 	wrlong	result1, fp
1c8a4     04 CE 05 F1 | 	add	fp, #4
1c8a8     E7 7C 62 FC | 	wrlong	result2, fp
1c8ac     04 CE 05 F1 | 	add	fp, #4
1c8b0     E7 AE 62 FC | 	wrlong	local05, fp
1c8b4                 | ' 
1c8b4                 | ' t2=pop()
1c8b4                 | ' t1=pop()
1c8b4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1c8b4     08 CE 85 F1 | 	sub	fp, #8
1c8b8     1F AE 0E F2 | 	cmp	local05, #31 wz
1c8bc     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1c8c0     20 00 90 5D |  if_ne	jmp	#LR__2410
1c8c4     00 B0 06 F6 | 	mov	local06, #0
1c8c8     E7 92 02 FB | 	rdlong	arg01, fp
1c8cc     53 95 02 F6 | 	mov	arg02, local01
1c8d0     0C 81 B0 FD | 	call	#__system___string_cmp
1c8d4     00 7A 0E F2 | 	cmp	result1, #0 wz
1c8d8     00 B0 26 A6 |  if_e	not	local06, #0
1c8dc     E7 B0 62 FC | 	wrlong	local06, fp
1c8e0     04 03 90 FD | 	jmp	#LR__2423
1c8e4                 | LR__2410
1c8e4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1c8e4     08 CE 05 F1 | 	add	fp, #8
1c8e8     E7 B0 02 FB | 	rdlong	local06, fp
1c8ec     08 CE 85 F1 | 	sub	fp, #8
1c8f0     1E B0 0E F2 | 	cmp	local06, #30 wz
1c8f4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c8f8     24 00 90 5D |  if_ne	jmp	#LR__2411
1c8fc     00 B0 06 F6 | 	mov	local06, #0
1c900     E7 92 02 FB | 	rdlong	arg01, fp
1c904     53 95 02 F6 | 	mov	arg02, local01
1c908     01 96 06 F6 | 	mov	arg03, #1
1c90c     AC AB B0 FD | 	call	#__system___float_cmp
1c910     00 7A 0E F2 | 	cmp	result1, #0 wz
1c914     00 B0 26 A6 |  if_e	not	local06, #0
1c918     E7 B0 62 FC | 	wrlong	local06, fp
1c91c     C8 02 90 FD | 	jmp	#LR__2423
1c920                 | LR__2411
1c920                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1c920     08 CE 05 F1 | 	add	fp, #8
1c924     E7 B0 02 FB | 	rdlong	local06, fp
1c928     08 CE 85 F1 | 	sub	fp, #8
1c92c     1E B0 0E F2 | 	cmp	local06, #30 wz
1c930     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c934     3C 00 90 5D |  if_ne	jmp	#LR__2412
1c938     00 B0 06 F6 | 	mov	local06, #0
1c93c     E7 AC 02 FB | 	rdlong	local04, fp
1c940     53 93 52 F6 | 	abs	arg01, local01 wc
1c944     1F B2 C6 C9 |  if_b	decod	local07, #31
1c948     00 B2 06 36 |  if_ae	mov	local07, #0
1c94c     34 A3 B0 FD | 	call	#__system___float_fromuns
1c950     59 7B 62 F5 | 	xor	result1, local07
1c954     3D 95 02 F6 | 	mov	arg02, result1
1c958     56 93 02 F6 | 	mov	arg01, local04
1c95c     01 96 06 F6 | 	mov	arg03, #1
1c960     58 AB B0 FD | 	call	#__system___float_cmp
1c964     00 7A 0E F2 | 	cmp	result1, #0 wz
1c968     00 B0 26 A6 |  if_e	not	local06, #0
1c96c     E7 B0 62 FC | 	wrlong	local06, fp
1c970     74 02 90 FD | 	jmp	#LR__2423
1c974                 | LR__2412
1c974                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1c974     08 CE 05 F1 | 	add	fp, #8
1c978     E7 B0 02 FB | 	rdlong	local06, fp
1c97c     08 CE 85 F1 | 	sub	fp, #8
1c980     1E B0 0E F2 | 	cmp	local06, #30 wz
1c984     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c988     30 00 90 5D |  if_ne	jmp	#LR__2413
1c98c     00 B0 06 F6 | 	mov	local06, #0
1c990     E7 AC 02 FB | 	rdlong	local04, fp
1c994     53 93 02 F6 | 	mov	arg01, local01
1c998     E8 A2 B0 FD | 	call	#__system___float_fromuns
1c99c     3D 95 02 F6 | 	mov	arg02, result1
1c9a0     56 93 02 F6 | 	mov	arg01, local04
1c9a4     01 96 06 F6 | 	mov	arg03, #1
1c9a8     10 AB B0 FD | 	call	#__system___float_cmp
1c9ac     00 7A 0E F2 | 	cmp	result1, #0 wz
1c9b0     00 B0 26 A6 |  if_e	not	local06, #0
1c9b4     E7 B0 62 FC | 	wrlong	local06, fp
1c9b8     2C 02 90 FD | 	jmp	#LR__2423
1c9bc                 | LR__2413
1c9bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1c9bc     08 CE 05 F1 | 	add	fp, #8
1c9c0     E7 B0 02 FB | 	rdlong	local06, fp
1c9c4     08 CE 85 F1 | 	sub	fp, #8
1c9c8     1C B0 0E F2 | 	cmp	local06, #28 wz
1c9cc     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c9d0     3C 00 90 5D |  if_ne	jmp	#LR__2414
1c9d4     00 B0 06 F6 | 	mov	local06, #0
1c9d8     E7 92 02 FB | 	rdlong	arg01, fp
1c9dc     49 93 52 F6 | 	abs	arg01, arg01 wc
1c9e0     1F B2 C6 C9 |  if_b	decod	local07, #31
1c9e4     00 B2 06 36 |  if_ae	mov	local07, #0
1c9e8     98 A2 B0 FD | 	call	#__system___float_fromuns
1c9ec     59 7B 62 F5 | 	xor	result1, local07
1c9f0     3D 93 02 F6 | 	mov	arg01, result1
1c9f4     53 95 02 F6 | 	mov	arg02, local01
1c9f8     01 96 06 F6 | 	mov	arg03, #1
1c9fc     BC AA B0 FD | 	call	#__system___float_cmp
1ca00     00 7A 0E F2 | 	cmp	result1, #0 wz
1ca04     00 B0 26 A6 |  if_e	not	local06, #0
1ca08     E7 B0 62 FC | 	wrlong	local06, fp
1ca0c     D8 01 90 FD | 	jmp	#LR__2423
1ca10                 | LR__2414
1ca10                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1ca10     08 CE 05 F1 | 	add	fp, #8
1ca14     E7 B0 02 FB | 	rdlong	local06, fp
1ca18     08 CE 85 F1 | 	sub	fp, #8
1ca1c     1C B0 0E F2 | 	cmp	local06, #28 wz
1ca20     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1ca24     18 00 90 5D |  if_ne	jmp	#LR__2415
1ca28     00 B0 06 F6 | 	mov	local06, #0
1ca2c     E7 AC 02 FB | 	rdlong	local04, fp
1ca30     53 AD 0A F2 | 	cmp	local04, local01 wz
1ca34     01 B0 66 A6 |  if_e	neg	local06, #1
1ca38     E7 B0 62 FC | 	wrlong	local06, fp
1ca3c     A8 01 90 FD | 	jmp	#LR__2423
1ca40                 | LR__2415
1ca40                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1ca40     08 CE 05 F1 | 	add	fp, #8
1ca44     E7 B0 02 FB | 	rdlong	local06, fp
1ca48     08 CE 85 F1 | 	sub	fp, #8
1ca4c     1C B0 0E F2 | 	cmp	local06, #28 wz
1ca50     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1ca54     18 00 90 5D |  if_ne	jmp	#LR__2416
1ca58     00 B0 06 F6 | 	mov	local06, #0
1ca5c     E7 AC 02 FB | 	rdlong	local04, fp
1ca60     53 AD 0A F2 | 	cmp	local04, local01 wz
1ca64     01 B0 66 A6 |  if_e	neg	local06, #1
1ca68     E7 B0 62 FC | 	wrlong	local06, fp
1ca6c     78 01 90 FD | 	jmp	#LR__2423
1ca70                 | LR__2416
1ca70                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1ca70     08 CE 05 F1 | 	add	fp, #8
1ca74     E7 B0 02 FB | 	rdlong	local06, fp
1ca78     08 CE 85 F1 | 	sub	fp, #8
1ca7c     1D B0 0E F2 | 	cmp	local06, #29 wz
1ca80     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1ca84     2C 00 90 5D |  if_ne	jmp	#LR__2417
1ca88     00 B0 06 F6 | 	mov	local06, #0
1ca8c     E7 92 02 FB | 	rdlong	arg01, fp
1ca90     F0 A1 B0 FD | 	call	#__system___float_fromuns
1ca94     3D 93 02 F6 | 	mov	arg01, result1
1ca98     53 95 02 F6 | 	mov	arg02, local01
1ca9c     01 96 06 F6 | 	mov	arg03, #1
1caa0     18 AA B0 FD | 	call	#__system___float_cmp
1caa4     00 7A 0E F2 | 	cmp	result1, #0 wz
1caa8     00 B0 26 A6 |  if_e	not	local06, #0
1caac     E7 B0 62 FC | 	wrlong	local06, fp
1cab0     34 01 90 FD | 	jmp	#LR__2423
1cab4                 | LR__2417
1cab4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1cab4     08 CE 05 F1 | 	add	fp, #8
1cab8     E7 B0 02 FB | 	rdlong	local06, fp
1cabc     08 CE 85 F1 | 	sub	fp, #8
1cac0     1D B0 0E F2 | 	cmp	local06, #29 wz
1cac4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cac8     18 00 90 5D |  if_ne	jmp	#LR__2418
1cacc     00 B0 06 F6 | 	mov	local06, #0
1cad0     E7 AC 02 FB | 	rdlong	local04, fp
1cad4     53 AD 0A F2 | 	cmp	local04, local01 wz
1cad8     01 B0 66 A6 |  if_e	neg	local06, #1
1cadc     E7 B0 62 FC | 	wrlong	local06, fp
1cae0     04 01 90 FD | 	jmp	#LR__2423
1cae4                 | LR__2418
1cae4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1cae4     08 CE 05 F1 | 	add	fp, #8
1cae8     E7 B0 02 FB | 	rdlong	local06, fp
1caec     08 CE 85 F1 | 	sub	fp, #8
1caf0     1D B0 0E F2 | 	cmp	local06, #29 wz
1caf4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1caf8     18 00 90 5D |  if_ne	jmp	#LR__2419
1cafc     00 B0 06 F6 | 	mov	local06, #0
1cb00     E7 AC 02 FB | 	rdlong	local04, fp
1cb04     53 AD 0A F2 | 	cmp	local04, local01 wz
1cb08     01 B0 66 A6 |  if_e	neg	local06, #1
1cb0c     E7 B0 62 FC | 	wrlong	local06, fp
1cb10     D4 00 90 FD | 	jmp	#LR__2423
1cb14                 | LR__2419
1cb14                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1cb14     08 CE 05 F1 | 	add	fp, #8
1cb18     E7 B0 02 FB | 	rdlong	local06, fp
1cb1c     08 CE 85 F1 | 	sub	fp, #8
1cb20     2B B0 0E F2 | 	cmp	local06, #43 wz
1cb24     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1cb28     28 00 90 5D |  if_ne	jmp	#LR__2420
1cb2c     00 B0 06 F6 | 	mov	local06, #0
1cb30     E7 92 02 FB | 	rdlong	arg01, fp
1cb34     C0 0C BF FD | 	call	#_convertstring
1cb38     3D 93 02 F6 | 	mov	arg01, result1
1cb3c     53 95 02 F6 | 	mov	arg02, local01
1cb40     9C 7E B0 FD | 	call	#__system___string_cmp
1cb44     00 7A 0E F2 | 	cmp	result1, #0 wz
1cb48     00 B0 26 A6 |  if_e	not	local06, #0
1cb4c     E7 B0 62 FC | 	wrlong	local06, fp
1cb50     94 00 90 FD | 	jmp	#LR__2423
1cb54                 | LR__2420
1cb54                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1cb54     08 CE 05 F1 | 	add	fp, #8
1cb58     E7 B0 02 FB | 	rdlong	local06, fp
1cb5c     08 CE 85 F1 | 	sub	fp, #8
1cb60     1F B0 0E F2 | 	cmp	local06, #31 wz
1cb64     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1cb68     2C 00 90 5D |  if_ne	jmp	#LR__2421
1cb6c     00 B0 06 F6 | 	mov	local06, #0
1cb70     E7 AC 02 FB | 	rdlong	local04, fp
1cb74     53 93 02 F6 | 	mov	arg01, local01
1cb78     7C 0C BF FD | 	call	#_convertstring
1cb7c     3D 95 02 F6 | 	mov	arg02, result1
1cb80     56 93 02 F6 | 	mov	arg01, local04
1cb84     58 7E B0 FD | 	call	#__system___string_cmp
1cb88     00 7A 0E F2 | 	cmp	result1, #0 wz
1cb8c     00 B0 26 A6 |  if_e	not	local06, #0
1cb90     E7 B0 62 FC | 	wrlong	local06, fp
1cb94     50 00 90 FD | 	jmp	#LR__2423
1cb98                 | LR__2421
1cb98                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1cb98     08 CE 05 F1 | 	add	fp, #8
1cb9c     E7 B0 02 FB | 	rdlong	local06, fp
1cba0     08 CE 85 F1 | 	sub	fp, #8
1cba4     2B B0 0E F2 | 	cmp	local06, #43 wz
1cba8     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1cbac     34 00 90 5D |  if_ne	jmp	#LR__2422
1cbb0     00 B0 06 F6 | 	mov	local06, #0
1cbb4     E7 92 02 FB | 	rdlong	arg01, fp
1cbb8     3C 0C BF FD | 	call	#_convertstring
1cbbc     3D AD 02 F6 | 	mov	local04, result1
1cbc0     53 93 02 F6 | 	mov	arg01, local01
1cbc4     30 0C BF FD | 	call	#_convertstring
1cbc8     3D 95 02 F6 | 	mov	arg02, result1
1cbcc     56 93 02 F6 | 	mov	arg01, local04
1cbd0     0C 7E B0 FD | 	call	#__system___string_cmp
1cbd4     00 7A 0E F2 | 	cmp	result1, #0 wz
1cbd8     00 B0 26 A6 |  if_e	not	local06, #0
1cbdc     E7 B0 62 FC | 	wrlong	local06, fp
1cbe0     04 00 90 FD | 	jmp	#LR__2423
1cbe4                 | LR__2422
1cbe4     E7 00 68 FC | 	wrlong	#0, fp
1cbe8                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1cbe8                 | LR__2423
1cbe8     08 CE 05 F1 | 	add	fp, #8
1cbec     E7 38 68 FC | 	wrlong	#28, fp
1cbf0     08 CE 85 F1 | 	sub	fp, #8
1cbf4     E7 92 02 F6 | 	mov	arg01, fp
1cbf8     1C 0B BF FD | 	call	#_push
1cbfc     E7 F0 03 F6 | 	mov	ptra, fp
1cc00     F2 00 A0 FD | 	call	#popregs_
1cc04                 | _do_eq_ret
1cc04     2D 00 64 FD | 	ret
1cc08                 | 
1cc08                 | ' 
1cc08                 | ' '--------------------------------- fdiv (/) - float divide
1cc08                 | ' 
1cc08                 | ' sub do_fdiv 
1cc08                 | _do_fdiv
1cc08     04 CA 05 F6 | 	mov	COUNT_, #4
1cc0c     E8 00 A0 FD | 	call	#pushregs_
1cc10     18 F0 07 F1 | 	add	ptra, #24
1cc14     70 0A BF FD | 	call	#_pop
1cc18     3D A7 02 F6 | 	mov	local01, result1
1cc1c     3E 95 02 F6 | 	mov	arg02, result2
1cc20     3F 93 02 F6 | 	mov	arg01, result3
1cc24     4A A9 02 F6 | 	mov	local02, arg02
1cc28     49 AB 02 F6 | 	mov	local03, arg01
1cc2c     58 0A BF FD | 	call	#_pop
1cc30     E7 7A 62 FC | 	wrlong	result1, fp
1cc34     04 CE 05 F1 | 	add	fp, #4
1cc38     E7 7C 62 FC | 	wrlong	result2, fp
1cc3c     04 CE 05 F1 | 	add	fp, #4
1cc40     E7 7E 62 FC | 	wrlong	result3, fp
1cc44                 | ' 
1cc44                 | ' t2=pop()
1cc44                 | ' t1=pop()
1cc44                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1cc44     08 CE 85 F1 | 	sub	fp, #8
1cc48     1F 7E 0E F2 | 	cmp	result3, #31 wz
1cc4c     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1cc50     E7 14 68 AC |  if_e	wrlong	#10, fp
1cc54     08 CE 05 A1 |  if_e	add	fp, #8
1cc58     E7 FE 69 AC |  if_e	wrlong	#255, fp
1cc5c     08 CE 85 A1 |  if_e	sub	fp, #8
1cc60     E0 00 90 AD |  if_e	jmp	#LR__2435
1cc64                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1cc64     08 CE 05 F1 | 	add	fp, #8
1cc68     E7 94 02 FB | 	rdlong	arg02, fp
1cc6c     08 CE 85 F1 | 	sub	fp, #8
1cc70     1C 94 0E F2 | 	cmp	arg02, #28 wz
1cc74     28 00 90 5D |  if_ne	jmp	#LR__2430
1cc78     08 CE 05 F1 | 	add	fp, #8
1cc7c     E7 3C 68 FC | 	wrlong	#30, fp
1cc80     08 CE 85 F1 | 	sub	fp, #8
1cc84     E7 92 02 FB | 	rdlong	arg01, fp
1cc88     49 93 52 F6 | 	abs	arg01, arg01 wc
1cc8c     1F AC C6 C9 |  if_b	decod	local04, #31
1cc90     00 AC 06 36 |  if_ae	mov	local04, #0
1cc94     EC 9F B0 FD | 	call	#__system___float_fromuns
1cc98     56 7B 62 F5 | 	xor	result1, local04
1cc9c     E7 7A 62 FC | 	wrlong	result1, fp
1cca0                 | LR__2430
1cca0                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1cca0     08 CE 05 F1 | 	add	fp, #8
1cca4     E7 94 02 FB | 	rdlong	arg02, fp
1cca8     08 CE 85 F1 | 	sub	fp, #8
1ccac     1D 94 0E F2 | 	cmp	arg02, #29 wz
1ccb0     18 00 90 5D |  if_ne	jmp	#LR__2431
1ccb4     08 CE 05 F1 | 	add	fp, #8
1ccb8     E7 3C 68 FC | 	wrlong	#30, fp
1ccbc     08 CE 85 F1 | 	sub	fp, #8
1ccc0     E7 92 02 FB | 	rdlong	arg01, fp
1ccc4     BC 9F B0 FD | 	call	#__system___float_fromuns
1ccc8     E7 7A 62 FC | 	wrlong	result1, fp
1cccc                 | LR__2431
1cccc                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1cccc     1C AA 0E F2 | 	cmp	local03, #28 wz
1ccd0     1C 00 90 5D |  if_ne	jmp	#LR__2432
1ccd4     1E AA 06 F6 | 	mov	local03, #30
1ccd8     53 93 52 F6 | 	abs	arg01, local01 wc
1ccdc     1F AC C6 C9 |  if_b	decod	local04, #31
1cce0     00 AC 06 36 |  if_ae	mov	local04, #0
1cce4     9C 9F B0 FD | 	call	#__system___float_fromuns
1cce8     56 7B 62 F5 | 	xor	result1, local04
1ccec     3D A7 02 F6 | 	mov	local01, result1
1ccf0                 | LR__2432
1ccf0                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1ccf0     1D AA 0E F2 | 	cmp	local03, #29 wz
1ccf4     10 00 90 5D |  if_ne	jmp	#LR__2433
1ccf8     1E AA 06 F6 | 	mov	local03, #30
1ccfc     53 93 02 F6 | 	mov	arg01, local01
1cd00     80 9F B0 FD | 	call	#__system___float_fromuns
1cd04     3D A7 02 F6 | 	mov	local01, result1
1cd08                 | LR__2433
1cd08                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1cd08     08 CE 05 F1 | 	add	fp, #8
1cd0c     E7 94 02 FB | 	rdlong	arg02, fp
1cd10     08 CE 85 F1 | 	sub	fp, #8
1cd14     1E 94 0E F2 | 	cmp	arg02, #30 wz
1cd18     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cd1c     14 00 90 5D |  if_ne	jmp	#LR__2434
1cd20     E7 92 02 FB | 	rdlong	arg01, fp
1cd24     53 95 02 F6 | 	mov	arg02, local01
1cd28     60 A5 B0 FD | 	call	#__system___float_div
1cd2c     E7 7A 62 FC | 	wrlong	result1, fp
1cd30     10 00 90 FD | 	jmp	#LR__2435
1cd34                 | LR__2434
1cd34     E7 16 68 FC | 	wrlong	#11, fp
1cd38     08 CE 05 F1 | 	add	fp, #8
1cd3c     E7 FE 69 FC | 	wrlong	#255, fp
1cd40     08 CE 85 F1 | 	sub	fp, #8
1cd44                 | LR__2435
1cd44     E7 92 02 F6 | 	mov	arg01, fp
1cd48     CC 09 BF FD | 	call	#_push
1cd4c     E7 F0 03 F6 | 	mov	ptra, fp
1cd50     F2 00 A0 FD | 	call	#popregs_
1cd54                 | _do_fdiv_ret
1cd54     2D 00 64 FD | 	ret
1cd58                 | 
1cd58                 | ' 
1cd58                 | ' '--------------------------------- greater or equal (>=)
1cd58                 | ' 
1cd58                 | ' sub do_ge
1cd58                 | _do_ge
1cd58     07 CA 05 F6 | 	mov	COUNT_, #7
1cd5c     E8 00 A0 FD | 	call	#pushregs_
1cd60     18 F0 07 F1 | 	add	ptra, #24
1cd64     20 09 BF FD | 	call	#_pop
1cd68     3D A7 02 F6 | 	mov	local01, result1
1cd6c     3E AD 02 F6 | 	mov	local04, result2
1cd70     3F AF 02 F6 | 	mov	local05, result3
1cd74     56 A9 02 F6 | 	mov	local02, local04
1cd78     57 AB 02 F6 | 	mov	local03, local05
1cd7c     08 09 BF FD | 	call	#_pop
1cd80     3F AF 02 F6 | 	mov	local05, result3
1cd84     E7 7A 62 FC | 	wrlong	result1, fp
1cd88     04 CE 05 F1 | 	add	fp, #4
1cd8c     E7 7C 62 FC | 	wrlong	result2, fp
1cd90     04 CE 05 F1 | 	add	fp, #4
1cd94     E7 AE 62 FC | 	wrlong	local05, fp
1cd98                 | ' 
1cd98                 | ' t2=pop()
1cd98                 | ' t1=pop()
1cd98                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1cd98     08 CE 85 F1 | 	sub	fp, #8
1cd9c     1F AE 0E F2 | 	cmp	local05, #31 wz
1cda0     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1cda4     20 00 90 5D |  if_ne	jmp	#LR__2440
1cda8     00 B0 06 F6 | 	mov	local06, #0
1cdac     E7 92 02 FB | 	rdlong	arg01, fp
1cdb0     53 95 02 F6 | 	mov	arg02, local01
1cdb4     28 7C B0 FD | 	call	#__system___string_cmp
1cdb8     00 7A 56 F2 | 	cmps	result1, #0 wc
1cdbc     00 B0 26 36 |  if_ae	not	local06, #0
1cdc0     E7 B0 62 FC | 	wrlong	local06, fp
1cdc4     04 03 90 FD | 	jmp	#LR__2453
1cdc8                 | LR__2440
1cdc8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1cdc8     08 CE 05 F1 | 	add	fp, #8
1cdcc     E7 B0 02 FB | 	rdlong	local06, fp
1cdd0     08 CE 85 F1 | 	sub	fp, #8
1cdd4     1E B0 0E F2 | 	cmp	local06, #30 wz
1cdd8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cddc     24 00 90 5D |  if_ne	jmp	#LR__2441
1cde0     00 B0 06 F6 | 	mov	local06, #0
1cde4     E7 92 02 FB | 	rdlong	arg01, fp
1cde8     53 95 02 F6 | 	mov	arg02, local01
1cdec     01 96 66 F6 | 	neg	arg03, #1
1cdf0     C8 A6 B0 FD | 	call	#__system___float_cmp
1cdf4     00 7A 56 F2 | 	cmps	result1, #0 wc
1cdf8     00 B0 26 36 |  if_ae	not	local06, #0
1cdfc     E7 B0 62 FC | 	wrlong	local06, fp
1ce00     C8 02 90 FD | 	jmp	#LR__2453
1ce04                 | LR__2441
1ce04                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1ce04     08 CE 05 F1 | 	add	fp, #8
1ce08     E7 B0 02 FB | 	rdlong	local06, fp
1ce0c     08 CE 85 F1 | 	sub	fp, #8
1ce10     1E B0 0E F2 | 	cmp	local06, #30 wz
1ce14     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1ce18     3C 00 90 5D |  if_ne	jmp	#LR__2442
1ce1c     00 B0 06 F6 | 	mov	local06, #0
1ce20     E7 AC 02 FB | 	rdlong	local04, fp
1ce24     53 93 52 F6 | 	abs	arg01, local01 wc
1ce28     1F B2 C6 C9 |  if_b	decod	local07, #31
1ce2c     00 B2 06 36 |  if_ae	mov	local07, #0
1ce30     50 9E B0 FD | 	call	#__system___float_fromuns
1ce34     59 7B 62 F5 | 	xor	result1, local07
1ce38     3D 95 02 F6 | 	mov	arg02, result1
1ce3c     56 93 02 F6 | 	mov	arg01, local04
1ce40     01 96 66 F6 | 	neg	arg03, #1
1ce44     74 A6 B0 FD | 	call	#__system___float_cmp
1ce48     00 7A 56 F2 | 	cmps	result1, #0 wc
1ce4c     00 B0 26 36 |  if_ae	not	local06, #0
1ce50     E7 B0 62 FC | 	wrlong	local06, fp
1ce54     74 02 90 FD | 	jmp	#LR__2453
1ce58                 | LR__2442
1ce58                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1ce58     08 CE 05 F1 | 	add	fp, #8
1ce5c     E7 B0 02 FB | 	rdlong	local06, fp
1ce60     08 CE 85 F1 | 	sub	fp, #8
1ce64     1E B0 0E F2 | 	cmp	local06, #30 wz
1ce68     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1ce6c     30 00 90 5D |  if_ne	jmp	#LR__2443
1ce70     00 B0 06 F6 | 	mov	local06, #0
1ce74     E7 AC 02 FB | 	rdlong	local04, fp
1ce78     53 93 02 F6 | 	mov	arg01, local01
1ce7c     04 9E B0 FD | 	call	#__system___float_fromuns
1ce80     3D 95 02 F6 | 	mov	arg02, result1
1ce84     56 93 02 F6 | 	mov	arg01, local04
1ce88     01 96 66 F6 | 	neg	arg03, #1
1ce8c     2C A6 B0 FD | 	call	#__system___float_cmp
1ce90     00 7A 56 F2 | 	cmps	result1, #0 wc
1ce94     00 B0 26 36 |  if_ae	not	local06, #0
1ce98     E7 B0 62 FC | 	wrlong	local06, fp
1ce9c     2C 02 90 FD | 	jmp	#LR__2453
1cea0                 | LR__2443
1cea0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1cea0     08 CE 05 F1 | 	add	fp, #8
1cea4     E7 B0 02 FB | 	rdlong	local06, fp
1cea8     08 CE 85 F1 | 	sub	fp, #8
1ceac     1C B0 0E F2 | 	cmp	local06, #28 wz
1ceb0     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1ceb4     3C 00 90 5D |  if_ne	jmp	#LR__2444
1ceb8     00 B0 06 F6 | 	mov	local06, #0
1cebc     E7 92 02 FB | 	rdlong	arg01, fp
1cec0     49 93 52 F6 | 	abs	arg01, arg01 wc
1cec4     1F B2 C6 C9 |  if_b	decod	local07, #31
1cec8     00 B2 06 36 |  if_ae	mov	local07, #0
1cecc     B4 9D B0 FD | 	call	#__system___float_fromuns
1ced0     59 7B 62 F5 | 	xor	result1, local07
1ced4     3D 93 02 F6 | 	mov	arg01, result1
1ced8     53 95 02 F6 | 	mov	arg02, local01
1cedc     01 96 66 F6 | 	neg	arg03, #1
1cee0     D8 A5 B0 FD | 	call	#__system___float_cmp
1cee4     00 7A 56 F2 | 	cmps	result1, #0 wc
1cee8     00 B0 26 36 |  if_ae	not	local06, #0
1ceec     E7 B0 62 FC | 	wrlong	local06, fp
1cef0     D8 01 90 FD | 	jmp	#LR__2453
1cef4                 | LR__2444
1cef4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1cef4     08 CE 05 F1 | 	add	fp, #8
1cef8     E7 B0 02 FB | 	rdlong	local06, fp
1cefc     08 CE 85 F1 | 	sub	fp, #8
1cf00     1C B0 0E F2 | 	cmp	local06, #28 wz
1cf04     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cf08     18 00 90 5D |  if_ne	jmp	#LR__2445
1cf0c     00 B0 06 F6 | 	mov	local06, #0
1cf10     E7 AC 02 FB | 	rdlong	local04, fp
1cf14     53 AD 52 F2 | 	cmps	local04, local01 wc
1cf18     01 B0 66 36 |  if_ae	neg	local06, #1
1cf1c     E7 B0 62 FC | 	wrlong	local06, fp
1cf20     A8 01 90 FD | 	jmp	#LR__2453
1cf24                 | LR__2445
1cf24                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1cf24     08 CE 05 F1 | 	add	fp, #8
1cf28     E7 B0 02 FB | 	rdlong	local06, fp
1cf2c     08 CE 85 F1 | 	sub	fp, #8
1cf30     1C B0 0E F2 | 	cmp	local06, #28 wz
1cf34     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cf38     18 00 90 5D |  if_ne	jmp	#LR__2446
1cf3c     00 B0 06 F6 | 	mov	local06, #0
1cf40     E7 AC 02 FB | 	rdlong	local04, fp
1cf44     53 AD 52 F2 | 	cmps	local04, local01 wc
1cf48     01 B0 66 36 |  if_ae	neg	local06, #1
1cf4c     E7 B0 62 FC | 	wrlong	local06, fp
1cf50     78 01 90 FD | 	jmp	#LR__2453
1cf54                 | LR__2446
1cf54                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1cf54     08 CE 05 F1 | 	add	fp, #8
1cf58     E7 B0 02 FB | 	rdlong	local06, fp
1cf5c     08 CE 85 F1 | 	sub	fp, #8
1cf60     1D B0 0E F2 | 	cmp	local06, #29 wz
1cf64     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cf68     2C 00 90 5D |  if_ne	jmp	#LR__2447
1cf6c     00 B0 06 F6 | 	mov	local06, #0
1cf70     E7 92 02 FB | 	rdlong	arg01, fp
1cf74     0C 9D B0 FD | 	call	#__system___float_fromuns
1cf78     3D 93 02 F6 | 	mov	arg01, result1
1cf7c     53 95 02 F6 | 	mov	arg02, local01
1cf80     01 96 66 F6 | 	neg	arg03, #1
1cf84     34 A5 B0 FD | 	call	#__system___float_cmp
1cf88     00 7A 56 F2 | 	cmps	result1, #0 wc
1cf8c     00 B0 26 36 |  if_ae	not	local06, #0
1cf90     E7 B0 62 FC | 	wrlong	local06, fp
1cf94     34 01 90 FD | 	jmp	#LR__2453
1cf98                 | LR__2447
1cf98                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1cf98     08 CE 05 F1 | 	add	fp, #8
1cf9c     E7 B0 02 FB | 	rdlong	local06, fp
1cfa0     08 CE 85 F1 | 	sub	fp, #8
1cfa4     1D B0 0E F2 | 	cmp	local06, #29 wz
1cfa8     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cfac     18 00 90 5D |  if_ne	jmp	#LR__2448
1cfb0     00 B0 06 F6 | 	mov	local06, #0
1cfb4     E7 AC 02 FB | 	rdlong	local04, fp
1cfb8     53 AD 52 F2 | 	cmps	local04, local01 wc
1cfbc     01 B0 66 36 |  if_ae	neg	local06, #1
1cfc0     E7 B0 62 FC | 	wrlong	local06, fp
1cfc4     04 01 90 FD | 	jmp	#LR__2453
1cfc8                 | LR__2448
1cfc8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1cfc8     08 CE 05 F1 | 	add	fp, #8
1cfcc     E7 B0 02 FB | 	rdlong	local06, fp
1cfd0     08 CE 85 F1 | 	sub	fp, #8
1cfd4     1D B0 0E F2 | 	cmp	local06, #29 wz
1cfd8     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cfdc     18 00 90 5D |  if_ne	jmp	#LR__2449
1cfe0     00 B0 06 F6 | 	mov	local06, #0
1cfe4     E7 AC 02 FB | 	rdlong	local04, fp
1cfe8     53 AD 12 F2 | 	cmp	local04, local01 wc
1cfec     01 B0 66 36 |  if_ae	neg	local06, #1
1cff0     E7 B0 62 FC | 	wrlong	local06, fp
1cff4     D4 00 90 FD | 	jmp	#LR__2453
1cff8                 | LR__2449
1cff8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1cff8     08 CE 05 F1 | 	add	fp, #8
1cffc     E7 B0 02 FB | 	rdlong	local06, fp
1d000     08 CE 85 F1 | 	sub	fp, #8
1d004     2B B0 0E F2 | 	cmp	local06, #43 wz
1d008     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d00c     28 00 90 5D |  if_ne	jmp	#LR__2450
1d010     00 B0 06 F6 | 	mov	local06, #0
1d014     E7 92 02 FB | 	rdlong	arg01, fp
1d018     DC 07 BF FD | 	call	#_convertstring
1d01c     3D 93 02 F6 | 	mov	arg01, result1
1d020     53 95 02 F6 | 	mov	arg02, local01
1d024     B8 79 B0 FD | 	call	#__system___string_cmp
1d028     00 7A 56 F2 | 	cmps	result1, #0 wc
1d02c     00 B0 26 36 |  if_ae	not	local06, #0
1d030     E7 B0 62 FC | 	wrlong	local06, fp
1d034     94 00 90 FD | 	jmp	#LR__2453
1d038                 | LR__2450
1d038                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1d038     08 CE 05 F1 | 	add	fp, #8
1d03c     E7 B0 02 FB | 	rdlong	local06, fp
1d040     08 CE 85 F1 | 	sub	fp, #8
1d044     1F B0 0E F2 | 	cmp	local06, #31 wz
1d048     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d04c     2C 00 90 5D |  if_ne	jmp	#LR__2451
1d050     00 B0 06 F6 | 	mov	local06, #0
1d054     E7 AC 02 FB | 	rdlong	local04, fp
1d058     53 93 02 F6 | 	mov	arg01, local01
1d05c     98 07 BF FD | 	call	#_convertstring
1d060     3D 95 02 F6 | 	mov	arg02, result1
1d064     56 93 02 F6 | 	mov	arg01, local04
1d068     74 79 B0 FD | 	call	#__system___string_cmp
1d06c     00 7A 56 F2 | 	cmps	result1, #0 wc
1d070     00 B0 26 36 |  if_ae	not	local06, #0
1d074     E7 B0 62 FC | 	wrlong	local06, fp
1d078     50 00 90 FD | 	jmp	#LR__2453
1d07c                 | LR__2451
1d07c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1d07c     08 CE 05 F1 | 	add	fp, #8
1d080     E7 B0 02 FB | 	rdlong	local06, fp
1d084     08 CE 85 F1 | 	sub	fp, #8
1d088     2B B0 0E F2 | 	cmp	local06, #43 wz
1d08c     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d090     34 00 90 5D |  if_ne	jmp	#LR__2452
1d094     00 B0 06 F6 | 	mov	local06, #0
1d098     E7 92 02 FB | 	rdlong	arg01, fp
1d09c     58 07 BF FD | 	call	#_convertstring
1d0a0     3D AD 02 F6 | 	mov	local04, result1
1d0a4     53 93 02 F6 | 	mov	arg01, local01
1d0a8     4C 07 BF FD | 	call	#_convertstring
1d0ac     3D 95 02 F6 | 	mov	arg02, result1
1d0b0     56 93 02 F6 | 	mov	arg01, local04
1d0b4     28 79 B0 FD | 	call	#__system___string_cmp
1d0b8     00 7A 56 F2 | 	cmps	result1, #0 wc
1d0bc     00 B0 26 36 |  if_ae	not	local06, #0
1d0c0     E7 B0 62 FC | 	wrlong	local06, fp
1d0c4     04 00 90 FD | 	jmp	#LR__2453
1d0c8                 | LR__2452
1d0c8     E7 00 68 FC | 	wrlong	#0, fp
1d0cc                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d0cc                 | LR__2453
1d0cc     08 CE 05 F1 | 	add	fp, #8
1d0d0     E7 38 68 FC | 	wrlong	#28, fp
1d0d4     08 CE 85 F1 | 	sub	fp, #8
1d0d8                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d0d8     E7 B0 0A FB | 	rdlong	local06, fp wz
1d0dc     E7 02 68 5C |  if_ne	wrlong	#1, fp
1d0e0     E7 92 02 F6 | 	mov	arg01, fp
1d0e4     30 06 BF FD | 	call	#_push
1d0e8     E7 F0 03 F6 | 	mov	ptra, fp
1d0ec     F2 00 A0 FD | 	call	#popregs_
1d0f0                 | _do_ge_ret
1d0f0     2D 00 64 FD | 	ret
1d0f4                 | 
1d0f4                 | ' 
1d0f4                 | ' '--------------------------------- greater than (>)
1d0f4                 | ' 
1d0f4                 | ' sub do_gt
1d0f4                 | _do_gt
1d0f4     07 CA 05 F6 | 	mov	COUNT_, #7
1d0f8     E8 00 A0 FD | 	call	#pushregs_
1d0fc     18 F0 07 F1 | 	add	ptra, #24
1d100     84 05 BF FD | 	call	#_pop
1d104     3D A7 02 F6 | 	mov	local01, result1
1d108     3E AD 02 F6 | 	mov	local04, result2
1d10c     3F AF 02 F6 | 	mov	local05, result3
1d110     56 A9 02 F6 | 	mov	local02, local04
1d114     57 AB 02 F6 | 	mov	local03, local05
1d118     6C 05 BF FD | 	call	#_pop
1d11c     3F AF 02 F6 | 	mov	local05, result3
1d120     E7 7A 62 FC | 	wrlong	result1, fp
1d124     04 CE 05 F1 | 	add	fp, #4
1d128     E7 7C 62 FC | 	wrlong	result2, fp
1d12c     04 CE 05 F1 | 	add	fp, #4
1d130     E7 AE 62 FC | 	wrlong	local05, fp
1d134                 | ' 
1d134                 | ' t2=pop()
1d134                 | ' t1=pop()
1d134                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1d134     08 CE 85 F1 | 	sub	fp, #8
1d138     1F AE 0E F2 | 	cmp	local05, #31 wz
1d13c     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d140     20 00 90 5D |  if_ne	jmp	#LR__2460
1d144     00 B0 06 F6 | 	mov	local06, #0
1d148     E7 92 02 FB | 	rdlong	arg01, fp
1d14c     53 95 02 F6 | 	mov	arg02, local01
1d150     8C 78 B0 FD | 	call	#__system___string_cmp
1d154     01 7A 56 F2 | 	cmps	result1, #1 wc
1d158     00 B0 26 36 |  if_ae	not	local06, #0
1d15c     E7 B0 62 FC | 	wrlong	local06, fp
1d160     04 03 90 FD | 	jmp	#LR__2473
1d164                 | LR__2460
1d164                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1d164     08 CE 05 F1 | 	add	fp, #8
1d168     E7 B0 02 FB | 	rdlong	local06, fp
1d16c     08 CE 85 F1 | 	sub	fp, #8
1d170     1E B0 0E F2 | 	cmp	local06, #30 wz
1d174     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d178     24 00 90 5D |  if_ne	jmp	#LR__2461
1d17c     00 B0 06 F6 | 	mov	local06, #0
1d180     E7 92 02 FB | 	rdlong	arg01, fp
1d184     53 95 02 F6 | 	mov	arg02, local01
1d188     01 96 66 F6 | 	neg	arg03, #1
1d18c     2C A3 B0 FD | 	call	#__system___float_cmp
1d190     01 7A 56 F2 | 	cmps	result1, #1 wc
1d194     00 B0 26 36 |  if_ae	not	local06, #0
1d198     E7 B0 62 FC | 	wrlong	local06, fp
1d19c     C8 02 90 FD | 	jmp	#LR__2473
1d1a0                 | LR__2461
1d1a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1d1a0     08 CE 05 F1 | 	add	fp, #8
1d1a4     E7 B0 02 FB | 	rdlong	local06, fp
1d1a8     08 CE 85 F1 | 	sub	fp, #8
1d1ac     1E B0 0E F2 | 	cmp	local06, #30 wz
1d1b0     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d1b4     3C 00 90 5D |  if_ne	jmp	#LR__2462
1d1b8     00 B0 06 F6 | 	mov	local06, #0
1d1bc     E7 AC 02 FB | 	rdlong	local04, fp
1d1c0     53 93 52 F6 | 	abs	arg01, local01 wc
1d1c4     1F B2 C6 C9 |  if_b	decod	local07, #31
1d1c8     00 B2 06 36 |  if_ae	mov	local07, #0
1d1cc     B4 9A B0 FD | 	call	#__system___float_fromuns
1d1d0     59 7B 62 F5 | 	xor	result1, local07
1d1d4     3D 95 02 F6 | 	mov	arg02, result1
1d1d8     56 93 02 F6 | 	mov	arg01, local04
1d1dc     01 96 66 F6 | 	neg	arg03, #1
1d1e0     D8 A2 B0 FD | 	call	#__system___float_cmp
1d1e4     01 7A 56 F2 | 	cmps	result1, #1 wc
1d1e8     00 B0 26 36 |  if_ae	not	local06, #0
1d1ec     E7 B0 62 FC | 	wrlong	local06, fp
1d1f0     74 02 90 FD | 	jmp	#LR__2473
1d1f4                 | LR__2462
1d1f4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1d1f4     08 CE 05 F1 | 	add	fp, #8
1d1f8     E7 B0 02 FB | 	rdlong	local06, fp
1d1fc     08 CE 85 F1 | 	sub	fp, #8
1d200     1E B0 0E F2 | 	cmp	local06, #30 wz
1d204     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d208     30 00 90 5D |  if_ne	jmp	#LR__2463
1d20c     00 B0 06 F6 | 	mov	local06, #0
1d210     E7 AC 02 FB | 	rdlong	local04, fp
1d214     53 93 02 F6 | 	mov	arg01, local01
1d218     68 9A B0 FD | 	call	#__system___float_fromuns
1d21c     3D 95 02 F6 | 	mov	arg02, result1
1d220     56 93 02 F6 | 	mov	arg01, local04
1d224     01 96 66 F6 | 	neg	arg03, #1
1d228     90 A2 B0 FD | 	call	#__system___float_cmp
1d22c     01 7A 56 F2 | 	cmps	result1, #1 wc
1d230     00 B0 26 36 |  if_ae	not	local06, #0
1d234     E7 B0 62 FC | 	wrlong	local06, fp
1d238     2C 02 90 FD | 	jmp	#LR__2473
1d23c                 | LR__2463
1d23c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1d23c     08 CE 05 F1 | 	add	fp, #8
1d240     E7 B0 02 FB | 	rdlong	local06, fp
1d244     08 CE 85 F1 | 	sub	fp, #8
1d248     1C B0 0E F2 | 	cmp	local06, #28 wz
1d24c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d250     3C 00 90 5D |  if_ne	jmp	#LR__2464
1d254     00 B0 06 F6 | 	mov	local06, #0
1d258     E7 92 02 FB | 	rdlong	arg01, fp
1d25c     49 93 52 F6 | 	abs	arg01, arg01 wc
1d260     1F B2 C6 C9 |  if_b	decod	local07, #31
1d264     00 B2 06 36 |  if_ae	mov	local07, #0
1d268     18 9A B0 FD | 	call	#__system___float_fromuns
1d26c     59 7B 62 F5 | 	xor	result1, local07
1d270     3D 93 02 F6 | 	mov	arg01, result1
1d274     53 95 02 F6 | 	mov	arg02, local01
1d278     01 96 66 F6 | 	neg	arg03, #1
1d27c     3C A2 B0 FD | 	call	#__system___float_cmp
1d280     01 7A 56 F2 | 	cmps	result1, #1 wc
1d284     00 B0 26 36 |  if_ae	not	local06, #0
1d288     E7 B0 62 FC | 	wrlong	local06, fp
1d28c     D8 01 90 FD | 	jmp	#LR__2473
1d290                 | LR__2464
1d290                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1d290     08 CE 05 F1 | 	add	fp, #8
1d294     E7 B0 02 FB | 	rdlong	local06, fp
1d298     08 CE 85 F1 | 	sub	fp, #8
1d29c     1C B0 0E F2 | 	cmp	local06, #28 wz
1d2a0     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d2a4     18 00 90 5D |  if_ne	jmp	#LR__2465
1d2a8     00 B0 06 F6 | 	mov	local06, #0
1d2ac     E7 AC 02 FB | 	rdlong	local04, fp
1d2b0     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d2b4     01 B0 66 16 |  if_a	neg	local06, #1
1d2b8     E7 B0 62 FC | 	wrlong	local06, fp
1d2bc     A8 01 90 FD | 	jmp	#LR__2473
1d2c0                 | LR__2465
1d2c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1d2c0     08 CE 05 F1 | 	add	fp, #8
1d2c4     E7 B0 02 FB | 	rdlong	local06, fp
1d2c8     08 CE 85 F1 | 	sub	fp, #8
1d2cc     1C B0 0E F2 | 	cmp	local06, #28 wz
1d2d0     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d2d4     18 00 90 5D |  if_ne	jmp	#LR__2466
1d2d8     00 B0 06 F6 | 	mov	local06, #0
1d2dc     E7 AC 02 FB | 	rdlong	local04, fp
1d2e0     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d2e4     01 B0 66 16 |  if_a	neg	local06, #1
1d2e8     E7 B0 62 FC | 	wrlong	local06, fp
1d2ec     78 01 90 FD | 	jmp	#LR__2473
1d2f0                 | LR__2466
1d2f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1d2f0     08 CE 05 F1 | 	add	fp, #8
1d2f4     E7 B0 02 FB | 	rdlong	local06, fp
1d2f8     08 CE 85 F1 | 	sub	fp, #8
1d2fc     1D B0 0E F2 | 	cmp	local06, #29 wz
1d300     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d304     2C 00 90 5D |  if_ne	jmp	#LR__2467
1d308     00 B0 06 F6 | 	mov	local06, #0
1d30c     E7 92 02 FB | 	rdlong	arg01, fp
1d310     70 99 B0 FD | 	call	#__system___float_fromuns
1d314     3D 93 02 F6 | 	mov	arg01, result1
1d318     53 95 02 F6 | 	mov	arg02, local01
1d31c     01 96 66 F6 | 	neg	arg03, #1
1d320     98 A1 B0 FD | 	call	#__system___float_cmp
1d324     01 7A 56 F2 | 	cmps	result1, #1 wc
1d328     00 B0 26 36 |  if_ae	not	local06, #0
1d32c     E7 B0 62 FC | 	wrlong	local06, fp
1d330     34 01 90 FD | 	jmp	#LR__2473
1d334                 | LR__2467
1d334                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1d334     08 CE 05 F1 | 	add	fp, #8
1d338     E7 B0 02 FB | 	rdlong	local06, fp
1d33c     08 CE 85 F1 | 	sub	fp, #8
1d340     1D B0 0E F2 | 	cmp	local06, #29 wz
1d344     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d348     18 00 90 5D |  if_ne	jmp	#LR__2468
1d34c     00 B0 06 F6 | 	mov	local06, #0
1d350     E7 AC 02 FB | 	rdlong	local04, fp
1d354     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d358     01 B0 66 16 |  if_a	neg	local06, #1
1d35c     E7 B0 62 FC | 	wrlong	local06, fp
1d360     04 01 90 FD | 	jmp	#LR__2473
1d364                 | LR__2468
1d364                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1d364     08 CE 05 F1 | 	add	fp, #8
1d368     E7 B0 02 FB | 	rdlong	local06, fp
1d36c     08 CE 85 F1 | 	sub	fp, #8
1d370     1D B0 0E F2 | 	cmp	local06, #29 wz
1d374     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d378     18 00 90 5D |  if_ne	jmp	#LR__2469
1d37c     00 B0 06 F6 | 	mov	local06, #0
1d380     E7 AC 02 FB | 	rdlong	local04, fp
1d384     53 AD 1A F2 | 	cmp	local04, local01 wcz
1d388     01 B0 66 16 |  if_a	neg	local06, #1
1d38c     E7 B0 62 FC | 	wrlong	local06, fp
1d390     D4 00 90 FD | 	jmp	#LR__2473
1d394                 | LR__2469
1d394                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1d394     08 CE 05 F1 | 	add	fp, #8
1d398     E7 B0 02 FB | 	rdlong	local06, fp
1d39c     08 CE 85 F1 | 	sub	fp, #8
1d3a0     2B B0 0E F2 | 	cmp	local06, #43 wz
1d3a4     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d3a8     28 00 90 5D |  if_ne	jmp	#LR__2470
1d3ac     00 B0 06 F6 | 	mov	local06, #0
1d3b0     E7 92 02 FB | 	rdlong	arg01, fp
1d3b4     40 04 BF FD | 	call	#_convertstring
1d3b8     3D 93 02 F6 | 	mov	arg01, result1
1d3bc     53 95 02 F6 | 	mov	arg02, local01
1d3c0     1C 76 B0 FD | 	call	#__system___string_cmp
1d3c4     01 7A 56 F2 | 	cmps	result1, #1 wc
1d3c8     00 B0 26 36 |  if_ae	not	local06, #0
1d3cc     E7 B0 62 FC | 	wrlong	local06, fp
1d3d0     94 00 90 FD | 	jmp	#LR__2473
1d3d4                 | LR__2470
1d3d4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1d3d4     08 CE 05 F1 | 	add	fp, #8
1d3d8     E7 B0 02 FB | 	rdlong	local06, fp
1d3dc     08 CE 85 F1 | 	sub	fp, #8
1d3e0     1F B0 0E F2 | 	cmp	local06, #31 wz
1d3e4     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d3e8     2C 00 90 5D |  if_ne	jmp	#LR__2471
1d3ec     00 B0 06 F6 | 	mov	local06, #0
1d3f0     E7 AC 02 FB | 	rdlong	local04, fp
1d3f4     53 93 02 F6 | 	mov	arg01, local01
1d3f8     FC 03 BF FD | 	call	#_convertstring
1d3fc     3D 95 02 F6 | 	mov	arg02, result1
1d400     56 93 02 F6 | 	mov	arg01, local04
1d404     D8 75 B0 FD | 	call	#__system___string_cmp
1d408     01 7A 56 F2 | 	cmps	result1, #1 wc
1d40c     00 B0 26 36 |  if_ae	not	local06, #0
1d410     E7 B0 62 FC | 	wrlong	local06, fp
1d414     50 00 90 FD | 	jmp	#LR__2473
1d418                 | LR__2471
1d418                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1d418     08 CE 05 F1 | 	add	fp, #8
1d41c     E7 B0 02 FB | 	rdlong	local06, fp
1d420     08 CE 85 F1 | 	sub	fp, #8
1d424     2B B0 0E F2 | 	cmp	local06, #43 wz
1d428     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d42c     34 00 90 5D |  if_ne	jmp	#LR__2472
1d430     00 B0 06 F6 | 	mov	local06, #0
1d434     E7 92 02 FB | 	rdlong	arg01, fp
1d438     BC 03 BF FD | 	call	#_convertstring
1d43c     3D AD 02 F6 | 	mov	local04, result1
1d440     53 93 02 F6 | 	mov	arg01, local01
1d444     B0 03 BF FD | 	call	#_convertstring
1d448     3D 95 02 F6 | 	mov	arg02, result1
1d44c     56 93 02 F6 | 	mov	arg01, local04
1d450     8C 75 B0 FD | 	call	#__system___string_cmp
1d454     01 7A 56 F2 | 	cmps	result1, #1 wc
1d458     00 B0 26 36 |  if_ae	not	local06, #0
1d45c     E7 B0 62 FC | 	wrlong	local06, fp
1d460     04 00 90 FD | 	jmp	#LR__2473
1d464                 | LR__2472
1d464     E7 00 68 FC | 	wrlong	#0, fp
1d468                 | LR__2473
1d468     08 CE 05 F1 | 	add	fp, #8
1d46c     E7 38 68 FC | 	wrlong	#28, fp
1d470     08 CE 85 F1 | 	sub	fp, #8
1d474                 | ' t1.result.uresult=0
1d474                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d474     E7 B0 0A FB | 	rdlong	local06, fp wz
1d478     E7 02 68 5C |  if_ne	wrlong	#1, fp
1d47c     E7 92 02 F6 | 	mov	arg01, fp
1d480     94 02 BF FD | 	call	#_push
1d484     E7 F0 03 F6 | 	mov	ptra, fp
1d488     F2 00 A0 FD | 	call	#popregs_
1d48c                 | _do_gt_ret
1d48c     2D 00 64 FD | 	ret
1d490                 | 
1d490                 | ' 
1d490                 | ' '--------------------------------- less or equal (<=)
1d490                 | ' 
1d490                 | ' sub do_le
1d490                 | _do_le
1d490     07 CA 05 F6 | 	mov	COUNT_, #7
1d494     E8 00 A0 FD | 	call	#pushregs_
1d498     18 F0 07 F1 | 	add	ptra, #24
1d49c     E8 01 BF FD | 	call	#_pop
1d4a0     3D A7 02 F6 | 	mov	local01, result1
1d4a4     3E AD 02 F6 | 	mov	local04, result2
1d4a8     3F AF 02 F6 | 	mov	local05, result3
1d4ac     56 A9 02 F6 | 	mov	local02, local04
1d4b0     57 AB 02 F6 | 	mov	local03, local05
1d4b4     D0 01 BF FD | 	call	#_pop
1d4b8     3F AF 02 F6 | 	mov	local05, result3
1d4bc     E7 7A 62 FC | 	wrlong	result1, fp
1d4c0     04 CE 05 F1 | 	add	fp, #4
1d4c4     E7 7C 62 FC | 	wrlong	result2, fp
1d4c8     04 CE 05 F1 | 	add	fp, #4
1d4cc     E7 AE 62 FC | 	wrlong	local05, fp
1d4d0                 | ' 
1d4d0                 | ' t2=pop()
1d4d0                 | ' t1=pop()
1d4d0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1d4d0     08 CE 85 F1 | 	sub	fp, #8
1d4d4     1F AE 0E F2 | 	cmp	local05, #31 wz
1d4d8     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d4dc     20 00 90 5D |  if_ne	jmp	#LR__2480
1d4e0     00 B0 06 F6 | 	mov	local06, #0
1d4e4     E7 92 02 FB | 	rdlong	arg01, fp
1d4e8     53 95 02 F6 | 	mov	arg02, local01
1d4ec     F0 74 B0 FD | 	call	#__system___string_cmp
1d4f0     01 7A 56 F2 | 	cmps	result1, #1 wc
1d4f4     00 B0 26 C6 |  if_b	not	local06, #0
1d4f8     E7 B0 62 FC | 	wrlong	local06, fp
1d4fc     04 03 90 FD | 	jmp	#LR__2493
1d500                 | LR__2480
1d500                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1d500     08 CE 05 F1 | 	add	fp, #8
1d504     E7 B0 02 FB | 	rdlong	local06, fp
1d508     08 CE 85 F1 | 	sub	fp, #8
1d50c     1E B0 0E F2 | 	cmp	local06, #30 wz
1d510     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d514     24 00 90 5D |  if_ne	jmp	#LR__2481
1d518     00 B0 06 F6 | 	mov	local06, #0
1d51c     E7 92 02 FB | 	rdlong	arg01, fp
1d520     53 95 02 F6 | 	mov	arg02, local01
1d524     01 96 06 F6 | 	mov	arg03, #1
1d528     90 9F B0 FD | 	call	#__system___float_cmp
1d52c     01 7A 56 F2 | 	cmps	result1, #1 wc
1d530     00 B0 26 C6 |  if_b	not	local06, #0
1d534     E7 B0 62 FC | 	wrlong	local06, fp
1d538     C8 02 90 FD | 	jmp	#LR__2493
1d53c                 | LR__2481
1d53c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1d53c     08 CE 05 F1 | 	add	fp, #8
1d540     E7 B0 02 FB | 	rdlong	local06, fp
1d544     08 CE 85 F1 | 	sub	fp, #8
1d548     1E B0 0E F2 | 	cmp	local06, #30 wz
1d54c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d550     3C 00 90 5D |  if_ne	jmp	#LR__2482
1d554     00 B0 06 F6 | 	mov	local06, #0
1d558     E7 AC 02 FB | 	rdlong	local04, fp
1d55c     53 93 52 F6 | 	abs	arg01, local01 wc
1d560     1F B2 C6 C9 |  if_b	decod	local07, #31
1d564     00 B2 06 36 |  if_ae	mov	local07, #0
1d568     18 97 B0 FD | 	call	#__system___float_fromuns
1d56c     59 7B 62 F5 | 	xor	result1, local07
1d570     3D 95 02 F6 | 	mov	arg02, result1
1d574     56 93 02 F6 | 	mov	arg01, local04
1d578     01 96 06 F6 | 	mov	arg03, #1
1d57c     3C 9F B0 FD | 	call	#__system___float_cmp
1d580     01 7A 56 F2 | 	cmps	result1, #1 wc
1d584     00 B0 26 C6 |  if_b	not	local06, #0
1d588     E7 B0 62 FC | 	wrlong	local06, fp
1d58c     74 02 90 FD | 	jmp	#LR__2493
1d590                 | LR__2482
1d590                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1d590     08 CE 05 F1 | 	add	fp, #8
1d594     E7 B0 02 FB | 	rdlong	local06, fp
1d598     08 CE 85 F1 | 	sub	fp, #8
1d59c     1E B0 0E F2 | 	cmp	local06, #30 wz
1d5a0     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d5a4     30 00 90 5D |  if_ne	jmp	#LR__2483
1d5a8     00 B0 06 F6 | 	mov	local06, #0
1d5ac     E7 AC 02 FB | 	rdlong	local04, fp
1d5b0     53 93 02 F6 | 	mov	arg01, local01
1d5b4     CC 96 B0 FD | 	call	#__system___float_fromuns
1d5b8     3D 95 02 F6 | 	mov	arg02, result1
1d5bc     56 93 02 F6 | 	mov	arg01, local04
1d5c0     01 96 06 F6 | 	mov	arg03, #1
1d5c4     F4 9E B0 FD | 	call	#__system___float_cmp
1d5c8     01 7A 56 F2 | 	cmps	result1, #1 wc
1d5cc     00 B0 26 C6 |  if_b	not	local06, #0
1d5d0     E7 B0 62 FC | 	wrlong	local06, fp
1d5d4     2C 02 90 FD | 	jmp	#LR__2493
1d5d8                 | LR__2483
1d5d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1d5d8     08 CE 05 F1 | 	add	fp, #8
1d5dc     E7 B0 02 FB | 	rdlong	local06, fp
1d5e0     08 CE 85 F1 | 	sub	fp, #8
1d5e4     1C B0 0E F2 | 	cmp	local06, #28 wz
1d5e8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d5ec     3C 00 90 5D |  if_ne	jmp	#LR__2484
1d5f0     00 B0 06 F6 | 	mov	local06, #0
1d5f4     E7 92 02 FB | 	rdlong	arg01, fp
1d5f8     49 93 52 F6 | 	abs	arg01, arg01 wc
1d5fc     1F B2 C6 C9 |  if_b	decod	local07, #31
1d600     00 B2 06 36 |  if_ae	mov	local07, #0
1d604     7C 96 B0 FD | 	call	#__system___float_fromuns
1d608     59 7B 62 F5 | 	xor	result1, local07
1d60c     3D 93 02 F6 | 	mov	arg01, result1
1d610     53 95 02 F6 | 	mov	arg02, local01
1d614     01 96 06 F6 | 	mov	arg03, #1
1d618     A0 9E B0 FD | 	call	#__system___float_cmp
1d61c     01 7A 56 F2 | 	cmps	result1, #1 wc
1d620     00 B0 26 C6 |  if_b	not	local06, #0
1d624     E7 B0 62 FC | 	wrlong	local06, fp
1d628     D8 01 90 FD | 	jmp	#LR__2493
1d62c                 | LR__2484
1d62c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1d62c     08 CE 05 F1 | 	add	fp, #8
1d630     E7 B0 02 FB | 	rdlong	local06, fp
1d634     08 CE 85 F1 | 	sub	fp, #8
1d638     1C B0 0E F2 | 	cmp	local06, #28 wz
1d63c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d640     18 00 90 5D |  if_ne	jmp	#LR__2485
1d644     00 B0 06 F6 | 	mov	local06, #0
1d648     E7 AC 02 FB | 	rdlong	local04, fp
1d64c     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d650     01 B0 66 E6 |  if_be	neg	local06, #1
1d654     E7 B0 62 FC | 	wrlong	local06, fp
1d658     A8 01 90 FD | 	jmp	#LR__2493
1d65c                 | LR__2485
1d65c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1d65c     08 CE 05 F1 | 	add	fp, #8
1d660     E7 B0 02 FB | 	rdlong	local06, fp
1d664     08 CE 85 F1 | 	sub	fp, #8
1d668     1C B0 0E F2 | 	cmp	local06, #28 wz
1d66c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d670     18 00 90 5D |  if_ne	jmp	#LR__2486
1d674     00 B0 06 F6 | 	mov	local06, #0
1d678     E7 AC 02 FB | 	rdlong	local04, fp
1d67c     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d680     01 B0 66 E6 |  if_be	neg	local06, #1
1d684     E7 B0 62 FC | 	wrlong	local06, fp
1d688     78 01 90 FD | 	jmp	#LR__2493
1d68c                 | LR__2486
1d68c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1d68c     08 CE 05 F1 | 	add	fp, #8
1d690     E7 B0 02 FB | 	rdlong	local06, fp
1d694     08 CE 85 F1 | 	sub	fp, #8
1d698     1D B0 0E F2 | 	cmp	local06, #29 wz
1d69c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d6a0     2C 00 90 5D |  if_ne	jmp	#LR__2487
1d6a4     00 B0 06 F6 | 	mov	local06, #0
1d6a8     E7 92 02 FB | 	rdlong	arg01, fp
1d6ac     D4 95 B0 FD | 	call	#__system___float_fromuns
1d6b0     3D 93 02 F6 | 	mov	arg01, result1
1d6b4     53 95 02 F6 | 	mov	arg02, local01
1d6b8     01 96 06 F6 | 	mov	arg03, #1
1d6bc     FC 9D B0 FD | 	call	#__system___float_cmp
1d6c0     01 7A 56 F2 | 	cmps	result1, #1 wc
1d6c4     00 B0 26 C6 |  if_b	not	local06, #0
1d6c8     E7 B0 62 FC | 	wrlong	local06, fp
1d6cc     34 01 90 FD | 	jmp	#LR__2493
1d6d0                 | LR__2487
1d6d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1d6d0     08 CE 05 F1 | 	add	fp, #8
1d6d4     E7 B0 02 FB | 	rdlong	local06, fp
1d6d8     08 CE 85 F1 | 	sub	fp, #8
1d6dc     1D B0 0E F2 | 	cmp	local06, #29 wz
1d6e0     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d6e4     18 00 90 5D |  if_ne	jmp	#LR__2488
1d6e8     00 B0 06 F6 | 	mov	local06, #0
1d6ec     E7 AC 02 FB | 	rdlong	local04, fp
1d6f0     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d6f4     01 B0 66 E6 |  if_be	neg	local06, #1
1d6f8     E7 B0 62 FC | 	wrlong	local06, fp
1d6fc     04 01 90 FD | 	jmp	#LR__2493
1d700                 | LR__2488
1d700                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1d700     08 CE 05 F1 | 	add	fp, #8
1d704     E7 B0 02 FB | 	rdlong	local06, fp
1d708     08 CE 85 F1 | 	sub	fp, #8
1d70c     1D B0 0E F2 | 	cmp	local06, #29 wz
1d710     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d714     18 00 90 5D |  if_ne	jmp	#LR__2489
1d718     00 B0 06 F6 | 	mov	local06, #0
1d71c     E7 AC 02 FB | 	rdlong	local04, fp
1d720     53 AD 1A F2 | 	cmp	local04, local01 wcz
1d724     01 B0 66 E6 |  if_be	neg	local06, #1
1d728     E7 B0 62 FC | 	wrlong	local06, fp
1d72c     D4 00 90 FD | 	jmp	#LR__2493
1d730                 | LR__2489
1d730                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1d730     08 CE 05 F1 | 	add	fp, #8
1d734     E7 B0 02 FB | 	rdlong	local06, fp
1d738     08 CE 85 F1 | 	sub	fp, #8
1d73c     2B B0 0E F2 | 	cmp	local06, #43 wz
1d740     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d744     28 00 90 5D |  if_ne	jmp	#LR__2490
1d748     00 B0 06 F6 | 	mov	local06, #0
1d74c     E7 92 02 FB | 	rdlong	arg01, fp
1d750     A4 00 BF FD | 	call	#_convertstring
1d754     3D 93 02 F6 | 	mov	arg01, result1
1d758     53 95 02 F6 | 	mov	arg02, local01
1d75c     80 72 B0 FD | 	call	#__system___string_cmp
1d760     01 7A 56 F2 | 	cmps	result1, #1 wc
1d764     00 B0 26 C6 |  if_b	not	local06, #0
1d768     E7 B0 62 FC | 	wrlong	local06, fp
1d76c     94 00 90 FD | 	jmp	#LR__2493
1d770                 | LR__2490
1d770                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1d770     08 CE 05 F1 | 	add	fp, #8
1d774     E7 B0 02 FB | 	rdlong	local06, fp
1d778     08 CE 85 F1 | 	sub	fp, #8
1d77c     1F B0 0E F2 | 	cmp	local06, #31 wz
1d780     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d784     2C 00 90 5D |  if_ne	jmp	#LR__2491
1d788     00 B0 06 F6 | 	mov	local06, #0
1d78c     E7 AC 02 FB | 	rdlong	local04, fp
1d790     53 93 02 F6 | 	mov	arg01, local01
1d794     60 00 BF FD | 	call	#_convertstring
1d798     3D 95 02 F6 | 	mov	arg02, result1
1d79c     56 93 02 F6 | 	mov	arg01, local04
1d7a0     3C 72 B0 FD | 	call	#__system___string_cmp
1d7a4     01 7A 56 F2 | 	cmps	result1, #1 wc
1d7a8     00 B0 26 C6 |  if_b	not	local06, #0
1d7ac     E7 B0 62 FC | 	wrlong	local06, fp
1d7b0     50 00 90 FD | 	jmp	#LR__2493
1d7b4                 | LR__2491
1d7b4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1d7b4     08 CE 05 F1 | 	add	fp, #8
1d7b8     E7 B0 02 FB | 	rdlong	local06, fp
1d7bc     08 CE 85 F1 | 	sub	fp, #8
1d7c0     2B B0 0E F2 | 	cmp	local06, #43 wz
1d7c4     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d7c8     34 00 90 5D |  if_ne	jmp	#LR__2492
1d7cc     00 B0 06 F6 | 	mov	local06, #0
1d7d0     E7 92 02 FB | 	rdlong	arg01, fp
1d7d4     20 00 BF FD | 	call	#_convertstring
1d7d8     3D AD 02 F6 | 	mov	local04, result1
1d7dc     53 93 02 F6 | 	mov	arg01, local01
1d7e0     14 00 BF FD | 	call	#_convertstring
1d7e4     3D 95 02 F6 | 	mov	arg02, result1
1d7e8     56 93 02 F6 | 	mov	arg01, local04
1d7ec     F0 71 B0 FD | 	call	#__system___string_cmp
1d7f0     01 7A 56 F2 | 	cmps	result1, #1 wc
1d7f4     00 B0 26 C6 |  if_b	not	local06, #0
1d7f8     E7 B0 62 FC | 	wrlong	local06, fp
1d7fc     04 00 90 FD | 	jmp	#LR__2493
1d800                 | LR__2492
1d800     E7 00 68 FC | 	wrlong	#0, fp
1d804                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d804                 | LR__2493
1d804     08 CE 05 F1 | 	add	fp, #8
1d808     E7 38 68 FC | 	wrlong	#28, fp
1d80c     08 CE 85 F1 | 	sub	fp, #8
1d810     E7 92 02 F6 | 	mov	arg01, fp
1d814     00 FF BE FD | 	call	#_push
1d818     E7 F0 03 F6 | 	mov	ptra, fp
1d81c     F2 00 A0 FD | 	call	#popregs_
1d820                 | _do_le_ret
1d820     2D 00 64 FD | 	ret
1d824                 | 
1d824                 | ' 
1d824                 | ' '--------------------------------- less than (<)
1d824                 | ' 
1d824                 | ' sub do_lt
1d824                 | _do_lt
1d824     07 CA 05 F6 | 	mov	COUNT_, #7
1d828     E8 00 A0 FD | 	call	#pushregs_
1d82c     18 F0 07 F1 | 	add	ptra, #24
1d830     54 FE BE FD | 	call	#_pop
1d834     3D A7 02 F6 | 	mov	local01, result1
1d838     3E AD 02 F6 | 	mov	local04, result2
1d83c     3F AF 02 F6 | 	mov	local05, result3
1d840     56 A9 02 F6 | 	mov	local02, local04
1d844     57 AB 02 F6 | 	mov	local03, local05
1d848     3C FE BE FD | 	call	#_pop
1d84c     3F AF 02 F6 | 	mov	local05, result3
1d850     E7 7A 62 FC | 	wrlong	result1, fp
1d854     04 CE 05 F1 | 	add	fp, #4
1d858     E7 7C 62 FC | 	wrlong	result2, fp
1d85c     04 CE 05 F1 | 	add	fp, #4
1d860     E7 AE 62 FC | 	wrlong	local05, fp
1d864                 | ' 
1d864                 | ' t2=pop()
1d864                 | ' t1=pop()
1d864                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1d864     08 CE 85 F1 | 	sub	fp, #8
1d868     1F AE 0E F2 | 	cmp	local05, #31 wz
1d86c     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d870     20 00 90 5D |  if_ne	jmp	#LR__2500
1d874     00 B0 06 F6 | 	mov	local06, #0
1d878     E7 92 02 FB | 	rdlong	arg01, fp
1d87c     53 95 02 F6 | 	mov	arg02, local01
1d880     5C 71 B0 FD | 	call	#__system___string_cmp
1d884     00 7A 56 F2 | 	cmps	result1, #0 wc
1d888     00 B0 26 C6 |  if_b	not	local06, #0
1d88c     E7 B0 62 FC | 	wrlong	local06, fp
1d890     E4 02 90 FD | 	jmp	#LR__2509
1d894                 | LR__2500
1d894                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1d894     08 CE 05 F1 | 	add	fp, #8
1d898     E7 B0 02 FB | 	rdlong	local06, fp
1d89c     08 CE 85 F1 | 	sub	fp, #8
1d8a0     1E B0 0E F2 | 	cmp	local06, #30 wz
1d8a4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d8a8     24 00 90 5D |  if_ne	jmp	#LR__2501
1d8ac     00 B0 06 F6 | 	mov	local06, #0
1d8b0     E7 92 02 FB | 	rdlong	arg01, fp
1d8b4     53 95 02 F6 | 	mov	arg02, local01
1d8b8     01 96 06 F6 | 	mov	arg03, #1
1d8bc     FC 9B B0 FD | 	call	#__system___float_cmp
1d8c0     00 7A 56 F2 | 	cmps	result1, #0 wc
1d8c4     00 B0 26 C6 |  if_b	not	local06, #0
1d8c8     E7 B0 62 FC | 	wrlong	local06, fp
1d8cc     A8 02 90 FD | 	jmp	#LR__2509
1d8d0                 | LR__2501
1d8d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1d8d0     08 CE 05 F1 | 	add	fp, #8
1d8d4     E7 B0 02 FB | 	rdlong	local06, fp
1d8d8     08 CE 85 F1 | 	sub	fp, #8
1d8dc     1E B0 0E F2 | 	cmp	local06, #30 wz
1d8e0     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d8e4     3C 00 90 5D |  if_ne	jmp	#LR__2502
1d8e8     00 B0 06 F6 | 	mov	local06, #0
1d8ec     E7 AC 02 FB | 	rdlong	local04, fp
1d8f0     53 93 52 F6 | 	abs	arg01, local01 wc
1d8f4     1F B2 C6 C9 |  if_b	decod	local07, #31
1d8f8     00 B2 06 36 |  if_ae	mov	local07, #0
1d8fc     84 93 B0 FD | 	call	#__system___float_fromuns
1d900     59 7B 62 F5 | 	xor	result1, local07
1d904     3D 95 02 F6 | 	mov	arg02, result1
1d908     56 93 02 F6 | 	mov	arg01, local04
1d90c     01 96 06 F6 | 	mov	arg03, #1
1d910     A8 9B B0 FD | 	call	#__system___float_cmp
1d914     00 7A 56 F2 | 	cmps	result1, #0 wc
1d918     00 B0 26 C6 |  if_b	not	local06, #0
1d91c     E7 B0 62 FC | 	wrlong	local06, fp
1d920     54 02 90 FD | 	jmp	#LR__2509
1d924                 | LR__2502
1d924                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1d924     08 CE 05 F1 | 	add	fp, #8
1d928     E7 B0 02 FB | 	rdlong	local06, fp
1d92c     08 CE 85 F1 | 	sub	fp, #8
1d930     1E B0 0E F2 | 	cmp	local06, #30 wz
1d934     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d938     30 00 90 5D |  if_ne	jmp	#LR__2503
1d93c     00 B0 06 F6 | 	mov	local06, #0
1d940     E7 AC 02 FB | 	rdlong	local04, fp
1d944     53 93 02 F6 | 	mov	arg01, local01
1d948     38 93 B0 FD | 	call	#__system___float_fromuns
1d94c     3D 95 02 F6 | 	mov	arg02, result1
1d950     56 93 02 F6 | 	mov	arg01, local04
1d954     01 96 06 F6 | 	mov	arg03, #1
1d958     60 9B B0 FD | 	call	#__system___float_cmp
1d95c     00 7A 56 F2 | 	cmps	result1, #0 wc
1d960     00 B0 26 C6 |  if_b	not	local06, #0
1d964     E7 B0 62 FC | 	wrlong	local06, fp
1d968     0C 02 90 FD | 	jmp	#LR__2509
1d96c                 | LR__2503
1d96c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1d96c     08 CE 05 F1 | 	add	fp, #8
1d970     E7 B0 02 FB | 	rdlong	local06, fp
1d974     08 CE 85 F1 | 	sub	fp, #8
1d978     1C B0 0E F2 | 	cmp	local06, #28 wz
1d97c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d980     3C 00 90 5D |  if_ne	jmp	#LR__2504
1d984     00 B0 06 F6 | 	mov	local06, #0
1d988     E7 92 02 FB | 	rdlong	arg01, fp
1d98c     49 93 52 F6 | 	abs	arg01, arg01 wc
1d990     1F B2 C6 C9 |  if_b	decod	local07, #31
1d994     00 B2 06 36 |  if_ae	mov	local07, #0
1d998     E8 92 B0 FD | 	call	#__system___float_fromuns
1d99c     59 7B 62 F5 | 	xor	result1, local07
1d9a0     3D 93 02 F6 | 	mov	arg01, result1
1d9a4     53 95 02 F6 | 	mov	arg02, local01
1d9a8     01 96 06 F6 | 	mov	arg03, #1
1d9ac     0C 9B B0 FD | 	call	#__system___float_cmp
1d9b0     00 7A 56 F2 | 	cmps	result1, #0 wc
1d9b4     00 B0 26 C6 |  if_b	not	local06, #0
1d9b8     E7 B0 62 FC | 	wrlong	local06, fp
1d9bc     B8 01 90 FD | 	jmp	#LR__2509
1d9c0                 | LR__2504
1d9c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1d9c0     08 CE 05 F1 | 	add	fp, #8
1d9c4     E7 B0 02 FB | 	rdlong	local06, fp
1d9c8     08 CE 85 F1 | 	sub	fp, #8
1d9cc     1C B0 0E F2 | 	cmp	local06, #28 wz
1d9d0     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d9d4     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d9d8     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1d9dc     58 B1 A2 A1 |  if_e	subx	local06, local06
1d9e0     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d9e4     90 01 90 AD |  if_e	jmp	#LR__2509
1d9e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1d9e8     08 CE 05 F1 | 	add	fp, #8
1d9ec     E7 B0 02 FB | 	rdlong	local06, fp
1d9f0     08 CE 85 F1 | 	sub	fp, #8
1d9f4     1C B0 0E F2 | 	cmp	local06, #28 wz
1d9f8     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d9fc     E7 AC 02 AB |  if_e	rdlong	local04, fp
1da00     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1da04     58 B1 A2 A1 |  if_e	subx	local06, local06
1da08     E7 B0 62 AC |  if_e	wrlong	local06, fp
1da0c     68 01 90 AD |  if_e	jmp	#LR__2509
1da10                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1da10     08 CE 05 F1 | 	add	fp, #8
1da14     E7 B0 02 FB | 	rdlong	local06, fp
1da18     08 CE 85 F1 | 	sub	fp, #8
1da1c     1D B0 0E F2 | 	cmp	local06, #29 wz
1da20     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1da24     2C 00 90 5D |  if_ne	jmp	#LR__2505
1da28     00 B0 06 F6 | 	mov	local06, #0
1da2c     E7 92 02 FB | 	rdlong	arg01, fp
1da30     50 92 B0 FD | 	call	#__system___float_fromuns
1da34     3D 93 02 F6 | 	mov	arg01, result1
1da38     53 95 02 F6 | 	mov	arg02, local01
1da3c     01 96 06 F6 | 	mov	arg03, #1
1da40     78 9A B0 FD | 	call	#__system___float_cmp
1da44     00 7A 56 F2 | 	cmps	result1, #0 wc
1da48     00 B0 26 C6 |  if_b	not	local06, #0
1da4c     E7 B0 62 FC | 	wrlong	local06, fp
1da50     24 01 90 FD | 	jmp	#LR__2509
1da54                 | LR__2505
1da54                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1da54     08 CE 05 F1 | 	add	fp, #8
1da58     E7 B0 02 FB | 	rdlong	local06, fp
1da5c     08 CE 85 F1 | 	sub	fp, #8
1da60     1D B0 0E F2 | 	cmp	local06, #29 wz
1da64     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1da68     E7 AC 02 AB |  if_e	rdlong	local04, fp
1da6c     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1da70     58 B1 A2 A1 |  if_e	subx	local06, local06
1da74     E7 B0 62 AC |  if_e	wrlong	local06, fp
1da78     FC 00 90 AD |  if_e	jmp	#LR__2509
1da7c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1da7c     08 CE 05 F1 | 	add	fp, #8
1da80     E7 B0 02 FB | 	rdlong	local06, fp
1da84     08 CE 85 F1 | 	sub	fp, #8
1da88     1D B0 0E F2 | 	cmp	local06, #29 wz
1da8c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1da90     E7 AC 02 AB |  if_e	rdlong	local04, fp
1da94     53 AD 12 A2 |  if_e	cmp	local04, local01 wc
1da98     58 B1 A2 A1 |  if_e	subx	local06, local06
1da9c     E7 B0 62 AC |  if_e	wrlong	local06, fp
1daa0     D4 00 90 AD |  if_e	jmp	#LR__2509
1daa4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1daa4     08 CE 05 F1 | 	add	fp, #8
1daa8     E7 B0 02 FB | 	rdlong	local06, fp
1daac     08 CE 85 F1 | 	sub	fp, #8
1dab0     2B B0 0E F2 | 	cmp	local06, #43 wz
1dab4     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1dab8     28 00 90 5D |  if_ne	jmp	#LR__2506
1dabc     00 B0 06 F6 | 	mov	local06, #0
1dac0     E7 92 02 FB | 	rdlong	arg01, fp
1dac4     30 FD BE FD | 	call	#_convertstring
1dac8     3D 93 02 F6 | 	mov	arg01, result1
1dacc     53 95 02 F6 | 	mov	arg02, local01
1dad0     0C 6F B0 FD | 	call	#__system___string_cmp
1dad4     00 7A 56 F2 | 	cmps	result1, #0 wc
1dad8     00 B0 26 C6 |  if_b	not	local06, #0
1dadc     E7 B0 62 FC | 	wrlong	local06, fp
1dae0     94 00 90 FD | 	jmp	#LR__2509
1dae4                 | LR__2506
1dae4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1dae4     08 CE 05 F1 | 	add	fp, #8
1dae8     E7 B0 02 FB | 	rdlong	local06, fp
1daec     08 CE 85 F1 | 	sub	fp, #8
1daf0     1F B0 0E F2 | 	cmp	local06, #31 wz
1daf4     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1daf8     2C 00 90 5D |  if_ne	jmp	#LR__2507
1dafc     00 B0 06 F6 | 	mov	local06, #0
1db00     E7 AC 02 FB | 	rdlong	local04, fp
1db04     53 93 02 F6 | 	mov	arg01, local01
1db08     EC FC BE FD | 	call	#_convertstring
1db0c     3D 95 02 F6 | 	mov	arg02, result1
1db10     56 93 02 F6 | 	mov	arg01, local04
1db14     C8 6E B0 FD | 	call	#__system___string_cmp
1db18     00 7A 56 F2 | 	cmps	result1, #0 wc
1db1c     00 B0 26 C6 |  if_b	not	local06, #0
1db20     E7 B0 62 FC | 	wrlong	local06, fp
1db24     50 00 90 FD | 	jmp	#LR__2509
1db28                 | LR__2507
1db28                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1db28     08 CE 05 F1 | 	add	fp, #8
1db2c     E7 B0 02 FB | 	rdlong	local06, fp
1db30     08 CE 85 F1 | 	sub	fp, #8
1db34     2B B0 0E F2 | 	cmp	local06, #43 wz
1db38     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1db3c     34 00 90 5D |  if_ne	jmp	#LR__2508
1db40     00 B0 06 F6 | 	mov	local06, #0
1db44     E7 92 02 FB | 	rdlong	arg01, fp
1db48     AC FC BE FD | 	call	#_convertstring
1db4c     3D AD 02 F6 | 	mov	local04, result1
1db50     53 93 02 F6 | 	mov	arg01, local01
1db54     A0 FC BE FD | 	call	#_convertstring
1db58     3D 95 02 F6 | 	mov	arg02, result1
1db5c     56 93 02 F6 | 	mov	arg01, local04
1db60     7C 6E B0 FD | 	call	#__system___string_cmp
1db64     00 7A 56 F2 | 	cmps	result1, #0 wc
1db68     00 B0 26 C6 |  if_b	not	local06, #0
1db6c     E7 B0 62 FC | 	wrlong	local06, fp
1db70     04 00 90 FD | 	jmp	#LR__2509
1db74                 | LR__2508
1db74     E7 00 68 FC | 	wrlong	#0, fp
1db78                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1db78                 | LR__2509
1db78     08 CE 05 F1 | 	add	fp, #8
1db7c     E7 38 68 FC | 	wrlong	#28, fp
1db80     08 CE 85 F1 | 	sub	fp, #8
1db84     E7 92 02 F6 | 	mov	arg01, fp
1db88     8C FB BE FD | 	call	#_push
1db8c     E7 F0 03 F6 | 	mov	ptra, fp
1db90     F2 00 A0 FD | 	call	#popregs_
1db94                 | _do_lt_ret
1db94     2D 00 64 FD | 	ret
1db98                 | 
1db98                 | ' 
1db98                 | ' '--------------------------------- minus (-)
1db98                 | ' 
1db98                 | ' sub do_minus
1db98                 | _do_minus
1db98     07 CA 05 F6 | 	mov	COUNT_, #7
1db9c     E8 00 A0 FD | 	call	#pushregs_
1dba0     18 F0 07 F1 | 	add	ptra, #24
1dba4     E0 FA BE FD | 	call	#_pop
1dba8     3D A7 02 F6 | 	mov	local01, result1
1dbac     3E AD 02 F6 | 	mov	local04, result2
1dbb0     3F AF 02 F6 | 	mov	local05, result3
1dbb4     56 A9 02 F6 | 	mov	local02, local04
1dbb8     57 AB 02 F6 | 	mov	local03, local05
1dbbc     C8 FA BE FD | 	call	#_pop
1dbc0     3F AF 02 F6 | 	mov	local05, result3
1dbc4     E7 7A 62 FC | 	wrlong	result1, fp
1dbc8     04 CE 05 F1 | 	add	fp, #4
1dbcc     E7 7C 62 FC | 	wrlong	result2, fp
1dbd0     04 CE 05 F1 | 	add	fp, #4
1dbd4     E7 AE 62 FC | 	wrlong	local05, fp
1dbd8                 | ' 
1dbd8                 | ' t2=pop()
1dbd8                 | ' t1=pop()
1dbd8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1dbd8     08 CE 85 F1 | 	sub	fp, #8
1dbdc     1D AE 0E F2 | 	cmp	local05, #29 wz
1dbe0     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dbe4     30 00 90 5D |  if_ne	jmp	#LR__2510
1dbe8                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1dbe8     E7 B0 02 FB | 	rdlong	local06, fp
1dbec     58 A7 12 F2 | 	cmp	local01, local06 wc
1dbf0     53 B1 82 C1 |  if_b	sub	local06, local01
1dbf4     E7 B0 62 CC |  if_b	wrlong	local06, fp
1dbf8     18 02 90 CD |  if_b	jmp	#LR__2517
1dbfc     E7 B0 02 FB | 	rdlong	local06, fp
1dc00     53 B1 82 F1 | 	sub	local06, local01
1dc04     E7 B0 62 FC | 	wrlong	local06, fp
1dc08     08 CE 05 F1 | 	add	fp, #8
1dc0c     E7 38 68 FC | 	wrlong	#28, fp
1dc10     08 CE 85 F1 | 	sub	fp, #8
1dc14     FC 01 90 FD | 	jmp	#LR__2517
1dc18                 | LR__2510
1dc18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1dc18     08 CE 05 F1 | 	add	fp, #8
1dc1c     E7 B0 02 FB | 	rdlong	local06, fp
1dc20     08 CE 85 F1 | 	sub	fp, #8
1dc24     1D B0 0E F2 | 	cmp	local06, #29 wz
1dc28     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dc2c     1C 00 90 5D |  if_ne	jmp	#LR__2511
1dc30     E7 B0 02 FB | 	rdlong	local06, fp
1dc34     53 B1 82 F1 | 	sub	local06, local01
1dc38     E7 B0 62 FC | 	wrlong	local06, fp
1dc3c     08 CE 05 F1 | 	add	fp, #8
1dc40     E7 38 68 FC | 	wrlong	#28, fp
1dc44     08 CE 85 F1 | 	sub	fp, #8
1dc48     C8 01 90 FD | 	jmp	#LR__2517
1dc4c                 | LR__2511
1dc4c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1dc4c     08 CE 05 F1 | 	add	fp, #8
1dc50     E7 B0 02 FB | 	rdlong	local06, fp
1dc54     08 CE 85 F1 | 	sub	fp, #8
1dc58     1D B0 0E F2 | 	cmp	local06, #29 wz
1dc5c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1dc60     2C 00 90 5D |  if_ne	jmp	#LR__2512
1dc64     E7 92 02 FB | 	rdlong	arg01, fp
1dc68     18 90 B0 FD | 	call	#__system___float_fromuns
1dc6c     3D 93 02 F6 | 	mov	arg01, result1
1dc70     53 95 02 F6 | 	mov	arg02, local01
1dc74     1F 94 E6 F4 | 	bitnot	arg02, #31
1dc78     3C 90 B0 FD | 	call	#__system___float_add
1dc7c     E7 7A 62 FC | 	wrlong	result1, fp
1dc80     08 CE 05 F1 | 	add	fp, #8
1dc84     E7 3C 68 FC | 	wrlong	#30, fp
1dc88     08 CE 85 F1 | 	sub	fp, #8
1dc8c     84 01 90 FD | 	jmp	#LR__2517
1dc90                 | LR__2512
1dc90                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1dc90     08 CE 05 F1 | 	add	fp, #8
1dc94     E7 B0 02 FB | 	rdlong	local06, fp
1dc98     08 CE 85 F1 | 	sub	fp, #8
1dc9c     1C B0 0E F2 | 	cmp	local06, #28 wz
1dca0     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dca4     E7 B0 02 AB |  if_e	rdlong	local06, fp
1dca8     53 B1 82 A1 |  if_e	sub	local06, local01
1dcac     E7 B0 62 AC |  if_e	wrlong	local06, fp
1dcb0     60 01 90 AD |  if_e	jmp	#LR__2517
1dcb4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1dcb4     08 CE 05 F1 | 	add	fp, #8
1dcb8     E7 B0 02 FB | 	rdlong	local06, fp
1dcbc     08 CE 85 F1 | 	sub	fp, #8
1dcc0     1C B0 0E F2 | 	cmp	local06, #28 wz
1dcc4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dcc8     E7 B0 02 AB |  if_e	rdlong	local06, fp
1dccc     53 B1 82 A1 |  if_e	sub	local06, local01
1dcd0     E7 B0 62 AC |  if_e	wrlong	local06, fp
1dcd4     3C 01 90 AD |  if_e	jmp	#LR__2517
1dcd8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1dcd8     08 CE 05 F1 | 	add	fp, #8
1dcdc     E7 B0 02 FB | 	rdlong	local06, fp
1dce0     08 CE 85 F1 | 	sub	fp, #8
1dce4     1C B0 0E F2 | 	cmp	local06, #28 wz
1dce8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1dcec     3C 00 90 5D |  if_ne	jmp	#LR__2513
1dcf0     E7 92 02 FB | 	rdlong	arg01, fp
1dcf4     49 93 52 F6 | 	abs	arg01, arg01 wc
1dcf8     1F B2 C6 C9 |  if_b	decod	local07, #31
1dcfc     00 B2 06 36 |  if_ae	mov	local07, #0
1dd00     80 8F B0 FD | 	call	#__system___float_fromuns
1dd04     59 7B 62 F5 | 	xor	result1, local07
1dd08     3D 93 02 F6 | 	mov	arg01, result1
1dd0c     53 95 02 F6 | 	mov	arg02, local01
1dd10     1F 94 E6 F4 | 	bitnot	arg02, #31
1dd14     A0 8F B0 FD | 	call	#__system___float_add
1dd18     E7 7A 62 FC | 	wrlong	result1, fp
1dd1c     08 CE 05 F1 | 	add	fp, #8
1dd20     E7 3C 68 FC | 	wrlong	#30, fp
1dd24     08 CE 85 F1 | 	sub	fp, #8
1dd28     E8 00 90 FD | 	jmp	#LR__2517
1dd2c                 | LR__2513
1dd2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1dd2c     08 CE 05 F1 | 	add	fp, #8
1dd30     E7 B0 02 FB | 	rdlong	local06, fp
1dd34     08 CE 85 F1 | 	sub	fp, #8
1dd38     1E B0 0E F2 | 	cmp	local06, #30 wz
1dd3c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dd40     24 00 90 5D |  if_ne	jmp	#LR__2514
1dd44     E7 B0 02 FB | 	rdlong	local06, fp
1dd48     53 93 02 F6 | 	mov	arg01, local01
1dd4c     34 8F B0 FD | 	call	#__system___float_fromuns
1dd50     3D 95 02 F6 | 	mov	arg02, result1
1dd54     58 93 02 F6 | 	mov	arg01, local06
1dd58     1F 94 E6 F4 | 	bitnot	arg02, #31
1dd5c     58 8F B0 FD | 	call	#__system___float_add
1dd60     E7 7A 62 FC | 	wrlong	result1, fp
1dd64     AC 00 90 FD | 	jmp	#LR__2517
1dd68                 | LR__2514
1dd68                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1dd68     08 CE 05 F1 | 	add	fp, #8
1dd6c     E7 B0 02 FB | 	rdlong	local06, fp
1dd70     08 CE 85 F1 | 	sub	fp, #8
1dd74     1E B0 0E F2 | 	cmp	local06, #30 wz
1dd78     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dd7c     30 00 90 5D |  if_ne	jmp	#LR__2515
1dd80     E7 B0 02 FB | 	rdlong	local06, fp
1dd84     53 93 52 F6 | 	abs	arg01, local01 wc
1dd88     1F B2 C6 C9 |  if_b	decod	local07, #31
1dd8c     00 B2 06 36 |  if_ae	mov	local07, #0
1dd90     F0 8E B0 FD | 	call	#__system___float_fromuns
1dd94     59 7B 62 F5 | 	xor	result1, local07
1dd98     3D 95 02 F6 | 	mov	arg02, result1
1dd9c     58 93 02 F6 | 	mov	arg01, local06
1dda0     1F 94 E6 F4 | 	bitnot	arg02, #31
1dda4     10 8F B0 FD | 	call	#__system___float_add
1dda8     E7 7A 62 FC | 	wrlong	result1, fp
1ddac     64 00 90 FD | 	jmp	#LR__2517
1ddb0                 | LR__2515
1ddb0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1ddb0     08 CE 05 F1 | 	add	fp, #8
1ddb4     E7 B0 02 FB | 	rdlong	local06, fp
1ddb8     08 CE 85 F1 | 	sub	fp, #8
1ddbc     1E B0 0E F2 | 	cmp	local06, #30 wz
1ddc0     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1ddc4     18 00 90 5D |  if_ne	jmp	#LR__2516
1ddc8     E7 92 02 FB | 	rdlong	arg01, fp
1ddcc     53 95 02 F6 | 	mov	arg02, local01
1ddd0     1F 94 E6 F4 | 	bitnot	arg02, #31
1ddd4     E0 8E B0 FD | 	call	#__system___float_add
1ddd8     E7 7A 62 FC | 	wrlong	result1, fp
1dddc     34 00 90 FD | 	jmp	#LR__2517
1dde0                 | LR__2516
1dde0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1dde0     08 CE 05 F1 | 	add	fp, #8
1dde4     E7 B0 02 FB | 	rdlong	local06, fp
1dde8     08 CE 85 F1 | 	sub	fp, #8
1ddec     1F B0 0E F2 | 	cmp	local06, #31 wz
1ddf0     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1ddf4     E7 06 68 AC |  if_e	wrlong	#3, fp
1ddf8     08 CE 05 A1 |  if_e	add	fp, #8
1ddfc     E7 FE 69 AC |  if_e	wrlong	#255, fp
1de00     08 CE 85 A1 |  if_e	sub	fp, #8
1de04     E7 0A 68 5C |  if_ne	wrlong	#5, fp
1de08     08 CE 05 51 |  if_ne	add	fp, #8
1de0c     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1de10     08 CE 85 51 |  if_ne	sub	fp, #8
1de14                 | LR__2517
1de14     E7 92 02 F6 | 	mov	arg01, fp
1de18     FC F8 BE FD | 	call	#_push
1de1c     E7 F0 03 F6 | 	mov	ptra, fp
1de20     F2 00 A0 FD | 	call	#popregs_
1de24                 | _do_minus_ret
1de24     2D 00 64 FD | 	ret
1de28                 | 
1de28                 | ' 
1de28                 | ' '--------------------------------- negative (-), one argument negative
1de28                 | ' 
1de28                 | ' sub do_negative
1de28                 | _do_negative
1de28     02 CA 05 F6 | 	mov	COUNT_, #2
1de2c     E8 00 A0 FD | 	call	#pushregs_
1de30     0C F0 07 F1 | 	add	ptra, #12
1de34     50 F8 BE FD | 	call	#_pop
1de38     3F A7 02 F6 | 	mov	local01, result3
1de3c     E7 7A 62 FC | 	wrlong	result1, fp
1de40     04 CE 05 F1 | 	add	fp, #4
1de44     E7 7C 62 FC | 	wrlong	result2, fp
1de48     04 CE 05 F1 | 	add	fp, #4
1de4c     E7 A6 62 FC | 	wrlong	local01, fp
1de50                 | ' 
1de50                 | ' t1=pop()
1de50                 | ' if t1.result_type=result_int then 
1de50     08 CE 85 F1 | 	sub	fp, #8
1de54     1C A6 0E F2 | 	cmp	local01, #28 wz
1de58     E7 A8 02 AB |  if_e	rdlong	local02, fp
1de5c     54 A7 62 A6 |  if_e	neg	local01, local02
1de60     E7 A6 62 AC |  if_e	wrlong	local01, fp
1de64     5C 00 90 AD |  if_e	jmp	#LR__2522
1de68     08 CE 05 F1 | 	add	fp, #8
1de6c     E7 A6 02 FB | 	rdlong	local01, fp
1de70     08 CE 85 F1 | 	sub	fp, #8
1de74     1D A6 0E F2 | 	cmp	local01, #29 wz
1de78     1C 00 90 5D |  if_ne	jmp	#LR__2520
1de7c     E7 A8 02 FB | 	rdlong	local02, fp
1de80     54 A7 62 F6 | 	neg	local01, local02
1de84     E7 A6 62 FC | 	wrlong	local01, fp
1de88     08 CE 05 F1 | 	add	fp, #8
1de8c     E7 38 68 FC | 	wrlong	#28, fp
1de90     08 CE 85 F1 | 	sub	fp, #8
1de94     2C 00 90 FD | 	jmp	#LR__2521
1de98                 | LR__2520
1de98     08 CE 05 F1 | 	add	fp, #8
1de9c     E7 A6 02 FB | 	rdlong	local01, fp
1dea0     08 CE 85 F1 | 	sub	fp, #8
1dea4     1E A6 0E F2 | 	cmp	local01, #30 wz
1dea8     E7 7A 02 AB |  if_e	rdlong	result1, fp
1deac     1F 7A E6 A4 |  if_e	bitnot	result1, #31
1deb0     E7 7A 62 AC |  if_e	wrlong	result1, fp
1deb4     08 CE 05 51 |  if_ne	add	fp, #8
1deb8     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1debc     08 CE 85 51 |  if_ne	sub	fp, #8
1dec0     E7 50 68 5C |  if_ne	wrlong	#40, fp
1dec4                 | LR__2521
1dec4                 | LR__2522
1dec4     E7 92 02 F6 | 	mov	arg01, fp
1dec8     4C F8 BE FD | 	call	#_push
1decc     E7 F0 03 F6 | 	mov	ptra, fp
1ded0     F2 00 A0 FD | 	call	#popregs_
1ded4                 | _do_negative_ret
1ded4     2D 00 64 FD | 	ret
1ded8                 | 
1ded8                 | ' 
1ded8                 | ' '--------------------------------- MOD (modulo)
1ded8                 | ' 
1ded8                 | ' sub do_mod 
1ded8                 | _do_mod
1ded8     04 CA 05 F6 | 	mov	COUNT_, #4
1dedc     E8 00 A0 FD | 	call	#pushregs_
1dee0     18 F0 07 F1 | 	add	ptra, #24
1dee4     A0 F7 BE FD | 	call	#_pop
1dee8     3D A7 02 F6 | 	mov	local01, result1
1deec     3E 11 03 F6 | 	mov	muldivb_, result2
1def0     3F 0F 03 F6 | 	mov	muldiva_, result3
1def4     88 A9 02 F6 | 	mov	local02, muldivb_
1def8     87 AB 02 F6 | 	mov	local03, muldiva_
1defc     88 F7 BE FD | 	call	#_pop
1df00     E7 7A 62 FC | 	wrlong	result1, fp
1df04     04 CE 05 F1 | 	add	fp, #4
1df08     E7 7C 62 FC | 	wrlong	result2, fp
1df0c     04 CE 05 F1 | 	add	fp, #4
1df10     E7 7E 62 FC | 	wrlong	result3, fp
1df14                 | ' 
1df14                 | ' t2=pop()
1df14                 | ' t1=pop()
1df14                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1df14     08 CE 85 F1 | 	sub	fp, #8
1df18     1F 7E 0E F2 | 	cmp	result3, #31 wz
1df1c     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1df20     E7 14 68 AC |  if_e	wrlong	#10, fp
1df24     08 CE 05 A1 |  if_e	add	fp, #8
1df28     E7 FE 69 AC |  if_e	wrlong	#255, fp
1df2c     08 CE 85 A1 |  if_e	sub	fp, #8
1df30     14 01 90 AD |  if_e	jmp	#LR__2535
1df34                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1df34     08 CE 05 F1 | 	add	fp, #8
1df38     E7 10 03 FB | 	rdlong	muldivb_, fp
1df3c     08 CE 85 F1 | 	sub	fp, #8
1df40     1E 10 0F F2 | 	cmp	muldivb_, #30 wz
1df44     1C 00 90 5D |  if_ne	jmp	#LR__2530
1df48     08 CE 05 F1 | 	add	fp, #8
1df4c     E7 38 68 FC | 	wrlong	#28, fp
1df50     08 CE 85 F1 | 	sub	fp, #8
1df54     E7 92 02 FB | 	rdlong	arg01, fp
1df58     00 94 06 F6 | 	mov	arg02, #0
1df5c     F0 95 B0 FD | 	call	#__system___float_tointeger
1df60     E7 7A 62 FC | 	wrlong	result1, fp
1df64                 | LR__2530
1df64                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1df64     1E AA 0E F2 | 	cmp	local03, #30 wz
1df68     14 00 90 5D |  if_ne	jmp	#LR__2531
1df6c     1C AA 06 F6 | 	mov	local03, #28
1df70     53 93 02 F6 | 	mov	arg01, local01
1df74     00 94 06 F6 | 	mov	arg02, #0
1df78     D4 95 B0 FD | 	call	#__system___float_tointeger
1df7c     3D A7 02 F6 | 	mov	local01, result1
1df80                 | LR__2531
1df80     08 CE 05 F1 | 	add	fp, #8
1df84     E7 AC 02 FB | 	rdlong	local04, fp
1df88     08 CE 85 F1 | 	sub	fp, #8
1df8c     1D AC 0E F2 | 	cmp	local04, #29 wz
1df90     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1df94     E7 AC 02 AB |  if_e	rdlong	local04, fp
1df98     53 AD 12 AD |  if_e	qdiv	local04, local01
1df9c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1df9c     19 AC 62 AD |  if_e	getqy	local04
1dfa0     E7 AC 62 AC |  if_e	wrlong	local04, fp
1dfa4     A0 00 90 AD |  if_e	jmp	#LR__2535
1dfa8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1dfa8     08 CE 05 F1 | 	add	fp, #8
1dfac     E7 AC 02 FB | 	rdlong	local04, fp
1dfb0     08 CE 85 F1 | 	sub	fp, #8
1dfb4     1D AC 0E F2 | 	cmp	local04, #29 wz
1dfb8     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dfbc     20 00 90 5D |  if_ne	jmp	#LR__2532
1dfc0     E7 AC 02 FB | 	rdlong	local04, fp
1dfc4     53 AD 12 FD | 	qdiv	local04, local01
1dfc8     19 AC 62 FD | 	getqy	local04
1dfcc     E7 AC 62 FC | 	wrlong	local04, fp
1dfd0     08 CE 05 F1 | 	add	fp, #8
1dfd4     E7 38 68 FC | 	wrlong	#28, fp
1dfd8     08 CE 85 F1 | 	sub	fp, #8
1dfdc     68 00 90 FD | 	jmp	#LR__2535
1dfe0                 | LR__2532
1dfe0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1dfe0     08 CE 05 F1 | 	add	fp, #8
1dfe4     E7 AC 02 FB | 	rdlong	local04, fp
1dfe8     08 CE 85 F1 | 	sub	fp, #8
1dfec     1C AC 0E F2 | 	cmp	local04, #28 wz
1dff0     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dff4     14 00 90 5D |  if_ne	jmp	#LR__2533
1dff8     E7 0E 03 FB | 	rdlong	muldiva_, fp
1dffc     53 11 03 F6 | 	mov	muldivb_, local01
1e000     FA 00 A0 FD | 	call	#divide_
1e004     E7 0E 63 FC | 	wrlong	muldiva_, fp
1e008     3C 00 90 FD | 	jmp	#LR__2535
1e00c                 | LR__2533
1e00c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1e00c     08 CE 05 F1 | 	add	fp, #8
1e010     E7 AC 02 FB | 	rdlong	local04, fp
1e014     08 CE 85 F1 | 	sub	fp, #8
1e018     1C AC 0E F2 | 	cmp	local04, #28 wz
1e01c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e020     14 00 90 5D |  if_ne	jmp	#LR__2534
1e024     E7 0E 03 FB | 	rdlong	muldiva_, fp
1e028     53 11 03 F6 | 	mov	muldivb_, local01
1e02c     FA 00 A0 FD | 	call	#divide_
1e030     E7 0E 63 FC | 	wrlong	muldiva_, fp
1e034     10 00 90 FD | 	jmp	#LR__2535
1e038                 | LR__2534
1e038     E7 16 68 FC | 	wrlong	#11, fp
1e03c     08 CE 05 F1 | 	add	fp, #8
1e040     E7 FE 69 FC | 	wrlong	#255, fp
1e044     08 CE 85 F1 | 	sub	fp, #8
1e048                 | LR__2535
1e048     E7 92 02 F6 | 	mov	arg01, fp
1e04c     C8 F6 BE FD | 	call	#_push
1e050     E7 F0 03 F6 | 	mov	ptra, fp
1e054     F2 00 A0 FD | 	call	#popregs_
1e058                 | _do_mod_ret
1e058     2D 00 64 FD | 	ret
1e05c                 | 
1e05c                 | ' 
1e05c                 | ' '--------------------------------- mul (*)
1e05c                 | ' 
1e05c                 | ' sub do_mul
1e05c                 | _do_mul
1e05c     07 CA 05 F6 | 	mov	COUNT_, #7
1e060     E8 00 A0 FD | 	call	#pushregs_
1e064     18 F0 07 F1 | 	add	ptra, #24
1e068     1C F6 BE FD | 	call	#_pop
1e06c     3D A7 02 F6 | 	mov	local01, result1
1e070     3E AD 02 F6 | 	mov	local04, result2
1e074     3F 95 02 F6 | 	mov	arg02, result3
1e078     56 A9 02 F6 | 	mov	local02, local04
1e07c     4A AB 02 F6 | 	mov	local03, arg02
1e080     04 F6 BE FD | 	call	#_pop
1e084     3F AF 02 F6 | 	mov	local05, result3
1e088     E7 7A 62 FC | 	wrlong	result1, fp
1e08c     04 CE 05 F1 | 	add	fp, #4
1e090     E7 7C 62 FC | 	wrlong	result2, fp
1e094     04 CE 05 F1 | 	add	fp, #4
1e098     E7 AE 62 FC | 	wrlong	local05, fp
1e09c     08 CE 85 F1 | 	sub	fp, #8
1e0a0     1D AE 0E F2 | 	cmp	local05, #29 wz
1e0a4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e0a8     E7 AC 02 AB |  if_e	rdlong	local04, fp
1e0ac     53 AD 02 AD |  if_e	qmul	local04, local01
1e0b0                 | ' 
1e0b0                 | ' t2=pop()
1e0b0                 | ' t1=pop()
1e0b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1e0b0     18 B0 62 AD |  if_e	getqx	local06
1e0b4     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e0b8     F4 01 90 AD |  if_e	jmp	#LR__2546
1e0bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1e0bc     08 CE 05 F1 | 	add	fp, #8
1e0c0     E7 B0 02 FB | 	rdlong	local06, fp
1e0c4     08 CE 85 F1 | 	sub	fp, #8
1e0c8     1D B0 0E F2 | 	cmp	local06, #29 wz
1e0cc     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e0d0     20 00 90 5D |  if_ne	jmp	#LR__2540
1e0d4     E7 AC 02 FB | 	rdlong	local04, fp
1e0d8     53 AD 02 FD | 	qmul	local04, local01
1e0dc     18 B0 62 FD | 	getqx	local06
1e0e0     E7 B0 62 FC | 	wrlong	local06, fp
1e0e4     08 CE 05 F1 | 	add	fp, #8
1e0e8     E7 38 68 FC | 	wrlong	#28, fp
1e0ec     08 CE 85 F1 | 	sub	fp, #8
1e0f0     BC 01 90 FD | 	jmp	#LR__2546
1e0f4                 | LR__2540
1e0f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1e0f4     08 CE 05 F1 | 	add	fp, #8
1e0f8     E7 B0 02 FB | 	rdlong	local06, fp
1e0fc     08 CE 85 F1 | 	sub	fp, #8
1e100     1D B0 0E F2 | 	cmp	local06, #29 wz
1e104     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e108     28 00 90 5D |  if_ne	jmp	#LR__2541
1e10c     E7 92 02 FB | 	rdlong	arg01, fp
1e110     70 8B B0 FD | 	call	#__system___float_fromuns
1e114     3D 93 02 F6 | 	mov	arg01, result1
1e118     53 95 02 F6 | 	mov	arg02, local01
1e11c     68 8F B0 FD | 	call	#__system___float_mul
1e120     E7 7A 62 FC | 	wrlong	result1, fp
1e124     08 CE 05 F1 | 	add	fp, #8
1e128     E7 3C 68 FC | 	wrlong	#30, fp
1e12c     08 CE 85 F1 | 	sub	fp, #8
1e130     7C 01 90 FD | 	jmp	#LR__2546
1e134                 | LR__2541
1e134     08 CE 05 F1 | 	add	fp, #8
1e138     E7 B0 02 FB | 	rdlong	local06, fp
1e13c     08 CE 85 F1 | 	sub	fp, #8
1e140     1C B0 0E F2 | 	cmp	local06, #28 wz
1e144     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e148     E7 AC 02 AB |  if_e	rdlong	local04, fp
1e14c     53 AD 02 AD |  if_e	qmul	local04, local01
1e150                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1e150     18 B0 62 AD |  if_e	getqx	local06
1e154     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e158     54 01 90 AD |  if_e	jmp	#LR__2546
1e15c     08 CE 05 F1 | 	add	fp, #8
1e160     E7 B0 02 FB | 	rdlong	local06, fp
1e164     08 CE 85 F1 | 	sub	fp, #8
1e168     1C B0 0E F2 | 	cmp	local06, #28 wz
1e16c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e170     E7 AC 02 AB |  if_e	rdlong	local04, fp
1e174     53 AD 02 AD |  if_e	qmul	local04, local01
1e178                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1e178     18 B0 62 AD |  if_e	getqx	local06
1e17c     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e180     2C 01 90 AD |  if_e	jmp	#LR__2546
1e184                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1e184     08 CE 05 F1 | 	add	fp, #8
1e188     E7 B0 02 FB | 	rdlong	local06, fp
1e18c     08 CE 85 F1 | 	sub	fp, #8
1e190     1C B0 0E F2 | 	cmp	local06, #28 wz
1e194     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e198     38 00 90 5D |  if_ne	jmp	#LR__2542
1e19c     E7 92 02 FB | 	rdlong	arg01, fp
1e1a0     49 93 52 F6 | 	abs	arg01, arg01 wc
1e1a4     1F B2 C6 C9 |  if_b	decod	local07, #31
1e1a8     00 B2 06 36 |  if_ae	mov	local07, #0
1e1ac     D4 8A B0 FD | 	call	#__system___float_fromuns
1e1b0     59 7B 62 F5 | 	xor	result1, local07
1e1b4     3D 93 02 F6 | 	mov	arg01, result1
1e1b8     53 95 02 F6 | 	mov	arg02, local01
1e1bc     C8 8E B0 FD | 	call	#__system___float_mul
1e1c0     E7 7A 62 FC | 	wrlong	result1, fp
1e1c4     08 CE 05 F1 | 	add	fp, #8
1e1c8     E7 3C 68 FC | 	wrlong	#30, fp
1e1cc     08 CE 85 F1 | 	sub	fp, #8
1e1d0     DC 00 90 FD | 	jmp	#LR__2546
1e1d4                 | LR__2542
1e1d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1e1d4     08 CE 05 F1 | 	add	fp, #8
1e1d8     E7 B0 02 FB | 	rdlong	local06, fp
1e1dc     08 CE 85 F1 | 	sub	fp, #8
1e1e0     1E B0 0E F2 | 	cmp	local06, #30 wz
1e1e4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e1e8     20 00 90 5D |  if_ne	jmp	#LR__2543
1e1ec     E7 B0 02 FB | 	rdlong	local06, fp
1e1f0     53 93 02 F6 | 	mov	arg01, local01
1e1f4     8C 8A B0 FD | 	call	#__system___float_fromuns
1e1f8     3D 95 02 F6 | 	mov	arg02, result1
1e1fc     58 93 02 F6 | 	mov	arg01, local06
1e200     84 8E B0 FD | 	call	#__system___float_mul
1e204     E7 7A 62 FC | 	wrlong	result1, fp
1e208     A4 00 90 FD | 	jmp	#LR__2546
1e20c                 | LR__2543
1e20c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1e20c     08 CE 05 F1 | 	add	fp, #8
1e210     E7 B0 02 FB | 	rdlong	local06, fp
1e214     08 CE 85 F1 | 	sub	fp, #8
1e218     1E B0 0E F2 | 	cmp	local06, #30 wz
1e21c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e220     2C 00 90 5D |  if_ne	jmp	#LR__2544
1e224     E7 B0 02 FB | 	rdlong	local06, fp
1e228     53 93 52 F6 | 	abs	arg01, local01 wc
1e22c     1F B2 C6 C9 |  if_b	decod	local07, #31
1e230     00 B2 06 36 |  if_ae	mov	local07, #0
1e234     4C 8A B0 FD | 	call	#__system___float_fromuns
1e238     59 7B 62 F5 | 	xor	result1, local07
1e23c     3D 95 02 F6 | 	mov	arg02, result1
1e240     58 93 02 F6 | 	mov	arg01, local06
1e244     40 8E B0 FD | 	call	#__system___float_mul
1e248     E7 7A 62 FC | 	wrlong	result1, fp
1e24c     60 00 90 FD | 	jmp	#LR__2546
1e250                 | LR__2544
1e250                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1e250     08 CE 05 F1 | 	add	fp, #8
1e254     E7 B0 02 FB | 	rdlong	local06, fp
1e258     08 CE 85 F1 | 	sub	fp, #8
1e25c     1E B0 0E F2 | 	cmp	local06, #30 wz
1e260     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e264     14 00 90 5D |  if_ne	jmp	#LR__2545
1e268     E7 92 02 FB | 	rdlong	arg01, fp
1e26c     53 95 02 F6 | 	mov	arg02, local01
1e270     14 8E B0 FD | 	call	#__system___float_mul
1e274     E7 7A 62 FC | 	wrlong	result1, fp
1e278     34 00 90 FD | 	jmp	#LR__2546
1e27c                 | LR__2545
1e27c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1e27c     08 CE 05 F1 | 	add	fp, #8
1e280     E7 B0 02 FB | 	rdlong	local06, fp
1e284     08 CE 85 F1 | 	sub	fp, #8
1e288     1F B0 0E F2 | 	cmp	local06, #31 wz
1e28c     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e290     E7 10 68 AC |  if_e	wrlong	#8, fp
1e294     08 CE 05 A1 |  if_e	add	fp, #8
1e298     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e29c     08 CE 85 A1 |  if_e	sub	fp, #8
1e2a0     E7 12 68 5C |  if_ne	wrlong	#9, fp
1e2a4     08 CE 05 51 |  if_ne	add	fp, #8
1e2a8     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1e2ac     08 CE 85 51 |  if_ne	sub	fp, #8
1e2b0                 | LR__2546
1e2b0     E7 92 02 F6 | 	mov	arg01, fp
1e2b4     60 F4 BE FD | 	call	#_push
1e2b8     E7 F0 03 F6 | 	mov	ptra, fp
1e2bc     F2 00 A0 FD | 	call	#popregs_
1e2c0                 | _do_mul_ret
1e2c0     2D 00 64 FD | 	ret
1e2c4                 | 
1e2c4                 | ' 
1e2c4                 | ' '--------------------------------- not equal (<>)
1e2c4                 | ' 
1e2c4                 | ' sub do_ne
1e2c4                 | _do_ne
1e2c4     07 CA 05 F6 | 	mov	COUNT_, #7
1e2c8     E8 00 A0 FD | 	call	#pushregs_
1e2cc     18 F0 07 F1 | 	add	ptra, #24
1e2d0     B4 F3 BE FD | 	call	#_pop
1e2d4     3D A7 02 F6 | 	mov	local01, result1
1e2d8     3E AD 02 F6 | 	mov	local04, result2
1e2dc     3F AF 02 F6 | 	mov	local05, result3
1e2e0     56 A9 02 F6 | 	mov	local02, local04
1e2e4     57 AB 02 F6 | 	mov	local03, local05
1e2e8     9C F3 BE FD | 	call	#_pop
1e2ec     3F AF 02 F6 | 	mov	local05, result3
1e2f0     E7 7A 62 FC | 	wrlong	result1, fp
1e2f4     04 CE 05 F1 | 	add	fp, #4
1e2f8     E7 7C 62 FC | 	wrlong	result2, fp
1e2fc     04 CE 05 F1 | 	add	fp, #4
1e300     E7 AE 62 FC | 	wrlong	local05, fp
1e304                 | ' 
1e304                 | ' t2=pop()
1e304                 | ' t1=pop()
1e304                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1e304     08 CE 85 F1 | 	sub	fp, #8
1e308     1F AE 0E F2 | 	cmp	local05, #31 wz
1e30c     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e310     20 00 90 5D |  if_ne	jmp	#LR__2550
1e314     00 B0 06 F6 | 	mov	local06, #0
1e318     E7 92 02 FB | 	rdlong	arg01, fp
1e31c     53 95 02 F6 | 	mov	arg02, local01
1e320     BC 66 B0 FD | 	call	#__system___string_cmp
1e324     00 7A 0E F2 | 	cmp	result1, #0 wz
1e328     00 B0 26 56 |  if_ne	not	local06, #0
1e32c     E7 B0 62 FC | 	wrlong	local06, fp
1e330     04 03 90 FD | 	jmp	#LR__2563
1e334                 | LR__2550
1e334                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1e334     08 CE 05 F1 | 	add	fp, #8
1e338     E7 B0 02 FB | 	rdlong	local06, fp
1e33c     08 CE 85 F1 | 	sub	fp, #8
1e340     1E B0 0E F2 | 	cmp	local06, #30 wz
1e344     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e348     24 00 90 5D |  if_ne	jmp	#LR__2551
1e34c     00 B0 06 F6 | 	mov	local06, #0
1e350     E7 92 02 FB | 	rdlong	arg01, fp
1e354     53 95 02 F6 | 	mov	arg02, local01
1e358     01 96 06 F6 | 	mov	arg03, #1
1e35c     5C 91 B0 FD | 	call	#__system___float_cmp
1e360     00 7A 0E F2 | 	cmp	result1, #0 wz
1e364     00 B0 26 56 |  if_ne	not	local06, #0
1e368     E7 B0 62 FC | 	wrlong	local06, fp
1e36c     C8 02 90 FD | 	jmp	#LR__2563
1e370                 | LR__2551
1e370                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1e370     08 CE 05 F1 | 	add	fp, #8
1e374     E7 B0 02 FB | 	rdlong	local06, fp
1e378     08 CE 85 F1 | 	sub	fp, #8
1e37c     1E B0 0E F2 | 	cmp	local06, #30 wz
1e380     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e384     3C 00 90 5D |  if_ne	jmp	#LR__2552
1e388     00 B0 06 F6 | 	mov	local06, #0
1e38c     E7 AC 02 FB | 	rdlong	local04, fp
1e390     53 93 52 F6 | 	abs	arg01, local01 wc
1e394     1F B2 C6 C9 |  if_b	decod	local07, #31
1e398     00 B2 06 36 |  if_ae	mov	local07, #0
1e39c     E4 88 B0 FD | 	call	#__system___float_fromuns
1e3a0     59 7B 62 F5 | 	xor	result1, local07
1e3a4     3D 95 02 F6 | 	mov	arg02, result1
1e3a8     56 93 02 F6 | 	mov	arg01, local04
1e3ac     01 96 06 F6 | 	mov	arg03, #1
1e3b0     08 91 B0 FD | 	call	#__system___float_cmp
1e3b4     00 7A 0E F2 | 	cmp	result1, #0 wz
1e3b8     00 B0 26 56 |  if_ne	not	local06, #0
1e3bc     E7 B0 62 FC | 	wrlong	local06, fp
1e3c0     74 02 90 FD | 	jmp	#LR__2563
1e3c4                 | LR__2552
1e3c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1e3c4     08 CE 05 F1 | 	add	fp, #8
1e3c8     E7 B0 02 FB | 	rdlong	local06, fp
1e3cc     08 CE 85 F1 | 	sub	fp, #8
1e3d0     1E B0 0E F2 | 	cmp	local06, #30 wz
1e3d4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e3d8     30 00 90 5D |  if_ne	jmp	#LR__2553
1e3dc     00 B0 06 F6 | 	mov	local06, #0
1e3e0     E7 AC 02 FB | 	rdlong	local04, fp
1e3e4     53 93 02 F6 | 	mov	arg01, local01
1e3e8     98 88 B0 FD | 	call	#__system___float_fromuns
1e3ec     3D 95 02 F6 | 	mov	arg02, result1
1e3f0     56 93 02 F6 | 	mov	arg01, local04
1e3f4     01 96 06 F6 | 	mov	arg03, #1
1e3f8     C0 90 B0 FD | 	call	#__system___float_cmp
1e3fc     00 7A 0E F2 | 	cmp	result1, #0 wz
1e400     00 B0 26 56 |  if_ne	not	local06, #0
1e404     E7 B0 62 FC | 	wrlong	local06, fp
1e408     2C 02 90 FD | 	jmp	#LR__2563
1e40c                 | LR__2553
1e40c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1e40c     08 CE 05 F1 | 	add	fp, #8
1e410     E7 B0 02 FB | 	rdlong	local06, fp
1e414     08 CE 85 F1 | 	sub	fp, #8
1e418     1C B0 0E F2 | 	cmp	local06, #28 wz
1e41c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e420     3C 00 90 5D |  if_ne	jmp	#LR__2554
1e424     00 B0 06 F6 | 	mov	local06, #0
1e428     E7 92 02 FB | 	rdlong	arg01, fp
1e42c     49 93 52 F6 | 	abs	arg01, arg01 wc
1e430     1F B2 C6 C9 |  if_b	decod	local07, #31
1e434     00 B2 06 36 |  if_ae	mov	local07, #0
1e438     48 88 B0 FD | 	call	#__system___float_fromuns
1e43c     59 7B 62 F5 | 	xor	result1, local07
1e440     3D 93 02 F6 | 	mov	arg01, result1
1e444     53 95 02 F6 | 	mov	arg02, local01
1e448     01 96 06 F6 | 	mov	arg03, #1
1e44c     6C 90 B0 FD | 	call	#__system___float_cmp
1e450     00 7A 0E F2 | 	cmp	result1, #0 wz
1e454     00 B0 26 56 |  if_ne	not	local06, #0
1e458     E7 B0 62 FC | 	wrlong	local06, fp
1e45c     D8 01 90 FD | 	jmp	#LR__2563
1e460                 | LR__2554
1e460                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1e460     08 CE 05 F1 | 	add	fp, #8
1e464     E7 B0 02 FB | 	rdlong	local06, fp
1e468     08 CE 85 F1 | 	sub	fp, #8
1e46c     1C B0 0E F2 | 	cmp	local06, #28 wz
1e470     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e474     18 00 90 5D |  if_ne	jmp	#LR__2555
1e478     00 B0 06 F6 | 	mov	local06, #0
1e47c     E7 AC 02 FB | 	rdlong	local04, fp
1e480     53 AD 0A F2 | 	cmp	local04, local01 wz
1e484     01 B0 66 56 |  if_ne	neg	local06, #1
1e488     E7 B0 62 FC | 	wrlong	local06, fp
1e48c     A8 01 90 FD | 	jmp	#LR__2563
1e490                 | LR__2555
1e490                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1e490     08 CE 05 F1 | 	add	fp, #8
1e494     E7 B0 02 FB | 	rdlong	local06, fp
1e498     08 CE 85 F1 | 	sub	fp, #8
1e49c     1C B0 0E F2 | 	cmp	local06, #28 wz
1e4a0     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e4a4     18 00 90 5D |  if_ne	jmp	#LR__2556
1e4a8     00 B0 06 F6 | 	mov	local06, #0
1e4ac     E7 AC 02 FB | 	rdlong	local04, fp
1e4b0     53 AD 0A F2 | 	cmp	local04, local01 wz
1e4b4     01 B0 66 56 |  if_ne	neg	local06, #1
1e4b8     E7 B0 62 FC | 	wrlong	local06, fp
1e4bc     78 01 90 FD | 	jmp	#LR__2563
1e4c0                 | LR__2556
1e4c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1e4c0     08 CE 05 F1 | 	add	fp, #8
1e4c4     E7 B0 02 FB | 	rdlong	local06, fp
1e4c8     08 CE 85 F1 | 	sub	fp, #8
1e4cc     1D B0 0E F2 | 	cmp	local06, #29 wz
1e4d0     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e4d4     2C 00 90 5D |  if_ne	jmp	#LR__2557
1e4d8     00 B0 06 F6 | 	mov	local06, #0
1e4dc     E7 92 02 FB | 	rdlong	arg01, fp
1e4e0     A0 87 B0 FD | 	call	#__system___float_fromuns
1e4e4     3D 93 02 F6 | 	mov	arg01, result1
1e4e8     53 95 02 F6 | 	mov	arg02, local01
1e4ec     01 96 06 F6 | 	mov	arg03, #1
1e4f0     C8 8F B0 FD | 	call	#__system___float_cmp
1e4f4     00 7A 0E F2 | 	cmp	result1, #0 wz
1e4f8     00 B0 26 56 |  if_ne	not	local06, #0
1e4fc     E7 B0 62 FC | 	wrlong	local06, fp
1e500     34 01 90 FD | 	jmp	#LR__2563
1e504                 | LR__2557
1e504                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1e504     08 CE 05 F1 | 	add	fp, #8
1e508     E7 B0 02 FB | 	rdlong	local06, fp
1e50c     08 CE 85 F1 | 	sub	fp, #8
1e510     1D B0 0E F2 | 	cmp	local06, #29 wz
1e514     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e518     18 00 90 5D |  if_ne	jmp	#LR__2558
1e51c     00 B0 06 F6 | 	mov	local06, #0
1e520     E7 AC 02 FB | 	rdlong	local04, fp
1e524     53 AD 0A F2 | 	cmp	local04, local01 wz
1e528     01 B0 66 56 |  if_ne	neg	local06, #1
1e52c     E7 B0 62 FC | 	wrlong	local06, fp
1e530     04 01 90 FD | 	jmp	#LR__2563
1e534                 | LR__2558
1e534                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1e534     08 CE 05 F1 | 	add	fp, #8
1e538     E7 B0 02 FB | 	rdlong	local06, fp
1e53c     08 CE 85 F1 | 	sub	fp, #8
1e540     1D B0 0E F2 | 	cmp	local06, #29 wz
1e544     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e548     18 00 90 5D |  if_ne	jmp	#LR__2559
1e54c     00 B0 06 F6 | 	mov	local06, #0
1e550     E7 AC 02 FB | 	rdlong	local04, fp
1e554     53 AD 0A F2 | 	cmp	local04, local01 wz
1e558     01 B0 66 56 |  if_ne	neg	local06, #1
1e55c     E7 B0 62 FC | 	wrlong	local06, fp
1e560     D4 00 90 FD | 	jmp	#LR__2563
1e564                 | LR__2559
1e564                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1e564     08 CE 05 F1 | 	add	fp, #8
1e568     E7 B0 02 FB | 	rdlong	local06, fp
1e56c     08 CE 85 F1 | 	sub	fp, #8
1e570     2B B0 0E F2 | 	cmp	local06, #43 wz
1e574     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e578     28 00 90 5D |  if_ne	jmp	#LR__2560
1e57c     00 B0 06 F6 | 	mov	local06, #0
1e580     E7 92 02 FB | 	rdlong	arg01, fp
1e584     70 F2 BE FD | 	call	#_convertstring
1e588     3D 93 02 F6 | 	mov	arg01, result1
1e58c     53 95 02 F6 | 	mov	arg02, local01
1e590     4C 64 B0 FD | 	call	#__system___string_cmp
1e594     00 7A 0E F2 | 	cmp	result1, #0 wz
1e598     00 B0 26 56 |  if_ne	not	local06, #0
1e59c     E7 B0 62 FC | 	wrlong	local06, fp
1e5a0     94 00 90 FD | 	jmp	#LR__2563
1e5a4                 | LR__2560
1e5a4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1e5a4     08 CE 05 F1 | 	add	fp, #8
1e5a8     E7 B0 02 FB | 	rdlong	local06, fp
1e5ac     08 CE 85 F1 | 	sub	fp, #8
1e5b0     1F B0 0E F2 | 	cmp	local06, #31 wz
1e5b4     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e5b8     2C 00 90 5D |  if_ne	jmp	#LR__2561
1e5bc     00 B0 06 F6 | 	mov	local06, #0
1e5c0     E7 AC 02 FB | 	rdlong	local04, fp
1e5c4     53 93 02 F6 | 	mov	arg01, local01
1e5c8     2C F2 BE FD | 	call	#_convertstring
1e5cc     3D 95 02 F6 | 	mov	arg02, result1
1e5d0     56 93 02 F6 | 	mov	arg01, local04
1e5d4     08 64 B0 FD | 	call	#__system___string_cmp
1e5d8     00 7A 0E F2 | 	cmp	result1, #0 wz
1e5dc     00 B0 26 56 |  if_ne	not	local06, #0
1e5e0     E7 B0 62 FC | 	wrlong	local06, fp
1e5e4     50 00 90 FD | 	jmp	#LR__2563
1e5e8                 | LR__2561
1e5e8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1e5e8     08 CE 05 F1 | 	add	fp, #8
1e5ec     E7 B0 02 FB | 	rdlong	local06, fp
1e5f0     08 CE 85 F1 | 	sub	fp, #8
1e5f4     2B B0 0E F2 | 	cmp	local06, #43 wz
1e5f8     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e5fc     34 00 90 5D |  if_ne	jmp	#LR__2562
1e600     00 B0 06 F6 | 	mov	local06, #0
1e604     E7 92 02 FB | 	rdlong	arg01, fp
1e608     EC F1 BE FD | 	call	#_convertstring
1e60c     3D AD 02 F6 | 	mov	local04, result1
1e610     53 93 02 F6 | 	mov	arg01, local01
1e614     E0 F1 BE FD | 	call	#_convertstring
1e618     3D 95 02 F6 | 	mov	arg02, result1
1e61c     56 93 02 F6 | 	mov	arg01, local04
1e620     BC 63 B0 FD | 	call	#__system___string_cmp
1e624     00 7A 0E F2 | 	cmp	result1, #0 wz
1e628     00 B0 26 56 |  if_ne	not	local06, #0
1e62c     E7 B0 62 FC | 	wrlong	local06, fp
1e630     04 00 90 FD | 	jmp	#LR__2563
1e634                 | LR__2562
1e634     E7 00 68 FC | 	wrlong	#0, fp
1e638                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e638                 | LR__2563
1e638     08 CE 05 F1 | 	add	fp, #8
1e63c     E7 38 68 FC | 	wrlong	#28, fp
1e640     08 CE 85 F1 | 	sub	fp, #8
1e644     E7 92 02 F6 | 	mov	arg01, fp
1e648     CC F0 BE FD | 	call	#_push
1e64c     E7 F0 03 F6 | 	mov	ptra, fp
1e650     F2 00 A0 FD | 	call	#popregs_
1e654                 | _do_ne_ret
1e654     2D 00 64 FD | 	ret
1e658                 | 
1e658                 | ' 
1e658                 | ' '--------------------------------- OR
1e658                 | ' 
1e658                 | ' sub do_or 
1e658                 | _do_or
1e658     05 CA 05 F6 | 	mov	COUNT_, #5
1e65c     E8 00 A0 FD | 	call	#pushregs_
1e660     18 F0 07 F1 | 	add	ptra, #24
1e664     20 F0 BE FD | 	call	#_pop
1e668     3D A7 02 F6 | 	mov	local01, result1
1e66c     3E 93 02 F6 | 	mov	arg01, result2
1e670     3F AD 02 F6 | 	mov	local04, result3
1e674     49 A9 02 F6 | 	mov	local02, arg01
1e678     56 AB 02 F6 | 	mov	local03, local04
1e67c     08 F0 BE FD | 	call	#_pop
1e680     3F AF 02 F6 | 	mov	local05, result3
1e684     E7 7A 62 FC | 	wrlong	result1, fp
1e688     04 CE 05 F1 | 	add	fp, #4
1e68c     E7 7C 62 FC | 	wrlong	result2, fp
1e690     04 CE 05 F1 | 	add	fp, #4
1e694     E7 AE 62 FC | 	wrlong	local05, fp
1e698                 | ' 
1e698                 | ' t2=pop()
1e698                 | ' t1=pop()
1e698                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1e698     08 CE 85 F1 | 	sub	fp, #8
1e69c     1C AE 0E F2 | 	cmp	local05, #28 wz
1e6a0     E7 AE 02 AB |  if_e	rdlong	local05, fp
1e6a4     E7 AE 62 AC |  if_e	wrlong	local05, fp
1e6a8     08 CE 05 A1 |  if_e	add	fp, #8
1e6ac     E7 3A 68 AC |  if_e	wrlong	#29, fp
1e6b0     08 CE 85 A1 |  if_e	sub	fp, #8
1e6b4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1e6b4     1C AA 0E F2 | 	cmp	local03, #28 wz
1e6b8     1D AA 06 A6 |  if_e	mov	local03, #29
1e6bc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1e6bc     08 CE 05 F1 | 	add	fp, #8
1e6c0     E7 AE 02 FB | 	rdlong	local05, fp
1e6c4     08 CE 85 F1 | 	sub	fp, #8
1e6c8     1F AE 0E F2 | 	cmp	local05, #31 wz
1e6cc     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e6d0     08 CE 05 51 |  if_ne	add	fp, #8
1e6d4     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1e6d8     08 CE 85 51 |  if_ne	sub	fp, #8
1e6dc     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1e6e0     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1e6e4     E7 0C 68 AC |  if_e	wrlong	#6, fp
1e6e8     08 CE 05 A1 |  if_e	add	fp, #8
1e6ec     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e6f0     08 CE 85 A1 |  if_e	sub	fp, #8
1e6f4     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1e6f8     53 AF 42 55 |  if_ne	or	local05, local01
1e6fc     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1e700     E7 92 02 F6 | 	mov	arg01, fp
1e704     10 F0 BE FD | 	call	#_push
1e708     E7 F0 03 F6 | 	mov	ptra, fp
1e70c     F2 00 A0 FD | 	call	#popregs_
1e710                 | _do_or_ret
1e710     2D 00 64 FD | 	ret
1e714                 | 
1e714                 | ' 
1e714                 | ' '--------------------------------- plus (+)
1e714                 | ' 
1e714                 | ' sub do_plus 
1e714                 | _do_plus
1e714     07 CA 05 F6 | 	mov	COUNT_, #7
1e718     E8 00 A0 FD | 	call	#pushregs_
1e71c     18 F0 07 F1 | 	add	ptra, #24
1e720     64 EF BE FD | 	call	#_pop
1e724     3D A7 02 F6 | 	mov	local01, result1
1e728     3E AD 02 F6 | 	mov	local04, result2
1e72c     3F AF 02 F6 | 	mov	local05, result3
1e730     56 A9 02 F6 | 	mov	local02, local04
1e734     57 AB 02 F6 | 	mov	local03, local05
1e738     4C EF BE FD | 	call	#_pop
1e73c     3F AF 02 F6 | 	mov	local05, result3
1e740     E7 7A 62 FC | 	wrlong	result1, fp
1e744     04 CE 05 F1 | 	add	fp, #4
1e748     E7 7C 62 FC | 	wrlong	result2, fp
1e74c     04 CE 05 F1 | 	add	fp, #4
1e750     E7 AE 62 FC | 	wrlong	local05, fp
1e754                 | ' 
1e754                 | ' t2=pop()
1e754                 | ' t1=pop()
1e754                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1e754     57 B1 02 F6 | 	mov	local06, local05
1e758     08 CE 85 F1 | 	sub	fp, #8
1e75c     1D B0 0E F2 | 	cmp	local06, #29 wz
1e760     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e764     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e768     53 B1 02 A1 |  if_e	add	local06, local01
1e76c     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e770     0C 03 90 AD |  if_e	jmp	#LR__2582
1e774                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1e774     08 CE 05 F1 | 	add	fp, #8
1e778     E7 B0 02 FB | 	rdlong	local06, fp
1e77c     08 CE 85 F1 | 	sub	fp, #8
1e780     1D B0 0E F2 | 	cmp	local06, #29 wz
1e784     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e788     1C 00 90 5D |  if_ne	jmp	#LR__2570
1e78c     E7 B0 02 FB | 	rdlong	local06, fp
1e790     53 B1 02 F1 | 	add	local06, local01
1e794     E7 B0 62 FC | 	wrlong	local06, fp
1e798     08 CE 05 F1 | 	add	fp, #8
1e79c     E7 38 68 FC | 	wrlong	#28, fp
1e7a0     08 CE 85 F1 | 	sub	fp, #8
1e7a4     D8 02 90 FD | 	jmp	#LR__2582
1e7a8                 | LR__2570
1e7a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1e7a8     08 CE 05 F1 | 	add	fp, #8
1e7ac     E7 B0 02 FB | 	rdlong	local06, fp
1e7b0     08 CE 85 F1 | 	sub	fp, #8
1e7b4     1D B0 0E F2 | 	cmp	local06, #29 wz
1e7b8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e7bc     28 00 90 5D |  if_ne	jmp	#LR__2571
1e7c0     E7 92 02 FB | 	rdlong	arg01, fp
1e7c4     BC 84 B0 FD | 	call	#__system___float_fromuns
1e7c8     3D 93 02 F6 | 	mov	arg01, result1
1e7cc     53 95 02 F6 | 	mov	arg02, local01
1e7d0     E4 84 B0 FD | 	call	#__system___float_add
1e7d4     E7 7A 62 FC | 	wrlong	result1, fp
1e7d8     08 CE 05 F1 | 	add	fp, #8
1e7dc     E7 3C 68 FC | 	wrlong	#30, fp
1e7e0     08 CE 85 F1 | 	sub	fp, #8
1e7e4     98 02 90 FD | 	jmp	#LR__2582
1e7e8                 | LR__2571
1e7e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1e7e8     08 CE 05 F1 | 	add	fp, #8
1e7ec     E7 B0 02 FB | 	rdlong	local06, fp
1e7f0     08 CE 85 F1 | 	sub	fp, #8
1e7f4     1C B0 0E F2 | 	cmp	local06, #28 wz
1e7f8     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e7fc     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e800     53 B1 02 A1 |  if_e	add	local06, local01
1e804     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e808     74 02 90 AD |  if_e	jmp	#LR__2582
1e80c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1e80c     08 CE 05 F1 | 	add	fp, #8
1e810     E7 B0 02 FB | 	rdlong	local06, fp
1e814     08 CE 85 F1 | 	sub	fp, #8
1e818     1C B0 0E F2 | 	cmp	local06, #28 wz
1e81c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e820     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e824     53 B1 02 A1 |  if_e	add	local06, local01
1e828     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e82c     50 02 90 AD |  if_e	jmp	#LR__2582
1e830                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1e830     08 CE 05 F1 | 	add	fp, #8
1e834     E7 B0 02 FB | 	rdlong	local06, fp
1e838     08 CE 85 F1 | 	sub	fp, #8
1e83c     1C B0 0E F2 | 	cmp	local06, #28 wz
1e840     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e844     38 00 90 5D |  if_ne	jmp	#LR__2572
1e848     E7 92 02 FB | 	rdlong	arg01, fp
1e84c     49 93 52 F6 | 	abs	arg01, arg01 wc
1e850     1F B2 C6 C9 |  if_b	decod	local07, #31
1e854     00 B2 06 36 |  if_ae	mov	local07, #0
1e858     28 84 B0 FD | 	call	#__system___float_fromuns
1e85c     59 7B 62 F5 | 	xor	result1, local07
1e860     3D 93 02 F6 | 	mov	arg01, result1
1e864     53 95 02 F6 | 	mov	arg02, local01
1e868     4C 84 B0 FD | 	call	#__system___float_add
1e86c     E7 7A 62 FC | 	wrlong	result1, fp
1e870     08 CE 05 F1 | 	add	fp, #8
1e874     E7 3C 68 FC | 	wrlong	#30, fp
1e878     08 CE 85 F1 | 	sub	fp, #8
1e87c     00 02 90 FD | 	jmp	#LR__2582
1e880                 | LR__2572
1e880                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1e880     08 CE 05 F1 | 	add	fp, #8
1e884     E7 B0 02 FB | 	rdlong	local06, fp
1e888     08 CE 85 F1 | 	sub	fp, #8
1e88c     1E B0 0E F2 | 	cmp	local06, #30 wz
1e890     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e894     20 00 90 5D |  if_ne	jmp	#LR__2573
1e898     E7 B0 02 FB | 	rdlong	local06, fp
1e89c     53 93 02 F6 | 	mov	arg01, local01
1e8a0     E0 83 B0 FD | 	call	#__system___float_fromuns
1e8a4     3D 95 02 F6 | 	mov	arg02, result1
1e8a8     58 93 02 F6 | 	mov	arg01, local06
1e8ac     08 84 B0 FD | 	call	#__system___float_add
1e8b0     E7 7A 62 FC | 	wrlong	result1, fp
1e8b4     C8 01 90 FD | 	jmp	#LR__2582
1e8b8                 | LR__2573
1e8b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1e8b8     08 CE 05 F1 | 	add	fp, #8
1e8bc     E7 B0 02 FB | 	rdlong	local06, fp
1e8c0     08 CE 85 F1 | 	sub	fp, #8
1e8c4     1E B0 0E F2 | 	cmp	local06, #30 wz
1e8c8     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e8cc     2C 00 90 5D |  if_ne	jmp	#LR__2574
1e8d0     E7 B0 02 FB | 	rdlong	local06, fp
1e8d4     53 93 52 F6 | 	abs	arg01, local01 wc
1e8d8     1F B2 C6 C9 |  if_b	decod	local07, #31
1e8dc     00 B2 06 36 |  if_ae	mov	local07, #0
1e8e0     A0 83 B0 FD | 	call	#__system___float_fromuns
1e8e4     59 7B 62 F5 | 	xor	result1, local07
1e8e8     3D 95 02 F6 | 	mov	arg02, result1
1e8ec     58 93 02 F6 | 	mov	arg01, local06
1e8f0     C4 83 B0 FD | 	call	#__system___float_add
1e8f4     E7 7A 62 FC | 	wrlong	result1, fp
1e8f8     84 01 90 FD | 	jmp	#LR__2582
1e8fc                 | LR__2574
1e8fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1e8fc     08 CE 05 F1 | 	add	fp, #8
1e900     E7 B0 02 FB | 	rdlong	local06, fp
1e904     08 CE 85 F1 | 	sub	fp, #8
1e908     1E B0 0E F2 | 	cmp	local06, #30 wz
1e90c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e910     14 00 90 5D |  if_ne	jmp	#LR__2575
1e914     E7 92 02 FB | 	rdlong	arg01, fp
1e918     53 95 02 F6 | 	mov	arg02, local01
1e91c     98 83 B0 FD | 	call	#__system___float_add
1e920     E7 7A 62 FC | 	wrlong	result1, fp
1e924     58 01 90 FD | 	jmp	#LR__2582
1e928                 | LR__2575
1e928                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1e928     08 CE 05 F1 | 	add	fp, #8
1e92c     E7 B0 02 FB | 	rdlong	local06, fp
1e930     08 CE 85 F1 | 	sub	fp, #8
1e934     1F B0 0E F2 | 	cmp	local06, #31 wz
1e938     18 00 90 5D |  if_ne	jmp	#LR__2576
1e93c     1F AA 0E F2 | 	cmp	local03, #31 wz
1e940     E7 04 68 5C |  if_ne	wrlong	#2, fp
1e944     08 CE 05 51 |  if_ne	add	fp, #8
1e948     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1e94c     08 CE 85 51 |  if_ne	sub	fp, #8
1e950     2C 01 90 5D |  if_ne	jmp	#LR__2582
1e954                 | LR__2576
1e954                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1e954     1F AA 0E F2 | 	cmp	local03, #31 wz
1e958     24 00 90 5D |  if_ne	jmp	#LR__2577
1e95c     08 CE 05 F1 | 	add	fp, #8
1e960     E7 B0 02 FB | 	rdlong	local06, fp
1e964     08 CE 85 F1 | 	sub	fp, #8
1e968     1F B0 0E F2 | 	cmp	local06, #31 wz
1e96c     E7 04 68 5C |  if_ne	wrlong	#2, fp
1e970     08 CE 05 51 |  if_ne	add	fp, #8
1e974     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1e978     08 CE 85 51 |  if_ne	sub	fp, #8
1e97c     00 01 90 5D |  if_ne	jmp	#LR__2582
1e980                 | LR__2577
1e980                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1e980     08 CE 05 F1 | 	add	fp, #8
1e984     E7 B0 02 FB | 	rdlong	local06, fp
1e988     08 CE 85 F1 | 	sub	fp, #8
1e98c     1F B0 0E F2 | 	cmp	local06, #31 wz
1e990     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e994     14 00 90 5D |  if_ne	jmp	#LR__2578
1e998     E7 92 02 FB | 	rdlong	arg01, fp
1e99c     53 95 02 F6 | 	mov	arg02, local01
1e9a0     70 60 B0 FD | 	call	#__system___string_concat
1e9a4     E7 7A 62 FC | 	wrlong	result1, fp
1e9a8     D4 00 90 FD | 	jmp	#LR__2582
1e9ac                 | LR__2578
1e9ac                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1e9ac     08 CE 05 F1 | 	add	fp, #8
1e9b0     E7 B0 02 FB | 	rdlong	local06, fp
1e9b4     08 CE 85 F1 | 	sub	fp, #8
1e9b8     2B B0 0E F2 | 	cmp	local06, #43 wz
1e9bc     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e9c0     28 00 90 5D |  if_ne	jmp	#LR__2579
1e9c4     E7 92 02 FB | 	rdlong	arg01, fp
1e9c8     2C EE BE FD | 	call	#_convertstring
1e9cc     3D 93 02 F6 | 	mov	arg01, result1
1e9d0     53 95 02 F6 | 	mov	arg02, local01
1e9d4     3C 60 B0 FD | 	call	#__system___string_concat
1e9d8     E7 7A 62 FC | 	wrlong	result1, fp
1e9dc     08 CE 05 F1 | 	add	fp, #8
1e9e0     E7 3E 68 FC | 	wrlong	#31, fp
1e9e4     08 CE 85 F1 | 	sub	fp, #8
1e9e8     94 00 90 FD | 	jmp	#LR__2582
1e9ec                 | LR__2579
1e9ec                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1e9ec     08 CE 05 F1 | 	add	fp, #8
1e9f0     E7 B0 02 FB | 	rdlong	local06, fp
1e9f4     08 CE 85 F1 | 	sub	fp, #8
1e9f8     1F B0 0E F2 | 	cmp	local06, #31 wz
1e9fc     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1ea00     20 00 90 5D |  if_ne	jmp	#LR__2580
1ea04     E7 B0 02 FB | 	rdlong	local06, fp
1ea08     53 93 02 F6 | 	mov	arg01, local01
1ea0c     E8 ED BE FD | 	call	#_convertstring
1ea10     3D 95 02 F6 | 	mov	arg02, result1
1ea14     58 93 02 F6 | 	mov	arg01, local06
1ea18     F8 5F B0 FD | 	call	#__system___string_concat
1ea1c     E7 7A 62 FC | 	wrlong	result1, fp
1ea20     5C 00 90 FD | 	jmp	#LR__2582
1ea24                 | LR__2580
1ea24                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1ea24     08 CE 05 F1 | 	add	fp, #8
1ea28     E7 B0 02 FB | 	rdlong	local06, fp
1ea2c     08 CE 85 F1 | 	sub	fp, #8
1ea30     2B B0 0E F2 | 	cmp	local06, #43 wz
1ea34     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1ea38     34 00 90 5D |  if_ne	jmp	#LR__2581
1ea3c     E7 92 02 FB | 	rdlong	arg01, fp
1ea40     B4 ED BE FD | 	call	#_convertstring
1ea44     3D B1 02 F6 | 	mov	local06, result1
1ea48     53 93 02 F6 | 	mov	arg01, local01
1ea4c     A8 ED BE FD | 	call	#_convertstring
1ea50     3D 95 02 F6 | 	mov	arg02, result1
1ea54     58 93 02 F6 | 	mov	arg01, local06
1ea58     B8 5F B0 FD | 	call	#__system___string_concat
1ea5c     E7 7A 62 FC | 	wrlong	result1, fp
1ea60     08 CE 05 F1 | 	add	fp, #8
1ea64     E7 3E 68 FC | 	wrlong	#31, fp
1ea68     08 CE 85 F1 | 	sub	fp, #8
1ea6c     10 00 90 FD | 	jmp	#LR__2582
1ea70                 | LR__2581
1ea70     E7 08 68 FC | 	wrlong	#4, fp
1ea74     08 CE 05 F1 | 	add	fp, #8
1ea78     E7 FE 69 FC | 	wrlong	#255, fp
1ea7c     08 CE 85 F1 | 	sub	fp, #8
1ea80                 | LR__2582
1ea80     E7 92 02 F6 | 	mov	arg01, fp
1ea84     90 EC BE FD | 	call	#_push
1ea88     E7 F0 03 F6 | 	mov	ptra, fp
1ea8c     F2 00 A0 FD | 	call	#popregs_
1ea90                 | _do_plus_ret
1ea90     2D 00 64 FD | 	ret
1ea94                 | 
1ea94                 | ' 
1ea94                 | ' '--------------------------------- power (^)
1ea94                 | ' 
1ea94                 | ' sub do_power 
1ea94                 | _do_power
1ea94     04 CA 05 F6 | 	mov	COUNT_, #4
1ea98     E8 00 A0 FD | 	call	#pushregs_
1ea9c     18 F0 07 F1 | 	add	ptra, #24
1eaa0     E4 EB BE FD | 	call	#_pop
1eaa4     3D A7 02 F6 | 	mov	local01, result1
1eaa8     3E 95 02 F6 | 	mov	arg02, result2
1eaac     3F 93 02 F6 | 	mov	arg01, result3
1eab0     4A A9 02 F6 | 	mov	local02, arg02
1eab4     49 AB 02 F6 | 	mov	local03, arg01
1eab8     CC EB BE FD | 	call	#_pop
1eabc     E7 7A 62 FC | 	wrlong	result1, fp
1eac0     04 CE 05 F1 | 	add	fp, #4
1eac4     E7 7C 62 FC | 	wrlong	result2, fp
1eac8     04 CE 05 F1 | 	add	fp, #4
1eacc     E7 7E 62 FC | 	wrlong	result3, fp
1ead0                 | ' 
1ead0                 | ' t2=pop()
1ead0                 | ' t1=pop()
1ead0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1ead0     08 CE 85 F1 | 	sub	fp, #8
1ead4     1F 7E 0E F2 | 	cmp	result3, #31 wz
1ead8     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1eadc     E7 18 68 AC |  if_e	wrlong	#12, fp
1eae0     08 CE 05 A1 |  if_e	add	fp, #8
1eae4     E7 FE 69 AC |  if_e	wrlong	#255, fp
1eae8     08 CE 85 A1 |  if_e	sub	fp, #8
1eaec     E0 00 90 AD |  if_e	jmp	#LR__2595
1eaf0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1eaf0     08 CE 05 F1 | 	add	fp, #8
1eaf4     E7 94 02 FB | 	rdlong	arg02, fp
1eaf8     08 CE 85 F1 | 	sub	fp, #8
1eafc     1C 94 0E F2 | 	cmp	arg02, #28 wz
1eb00     28 00 90 5D |  if_ne	jmp	#LR__2590
1eb04     08 CE 05 F1 | 	add	fp, #8
1eb08     E7 3C 68 FC | 	wrlong	#30, fp
1eb0c     08 CE 85 F1 | 	sub	fp, #8
1eb10     E7 92 02 FB | 	rdlong	arg01, fp
1eb14     49 93 52 F6 | 	abs	arg01, arg01 wc
1eb18     1F AC C6 C9 |  if_b	decod	local04, #31
1eb1c     00 AC 06 36 |  if_ae	mov	local04, #0
1eb20     60 81 B0 FD | 	call	#__system___float_fromuns
1eb24     56 7B 62 F5 | 	xor	result1, local04
1eb28     E7 7A 62 FC | 	wrlong	result1, fp
1eb2c                 | LR__2590
1eb2c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1eb2c     08 CE 05 F1 | 	add	fp, #8
1eb30     E7 94 02 FB | 	rdlong	arg02, fp
1eb34     08 CE 85 F1 | 	sub	fp, #8
1eb38     1D 94 0E F2 | 	cmp	arg02, #29 wz
1eb3c     18 00 90 5D |  if_ne	jmp	#LR__2591
1eb40     08 CE 05 F1 | 	add	fp, #8
1eb44     E7 3C 68 FC | 	wrlong	#30, fp
1eb48     08 CE 85 F1 | 	sub	fp, #8
1eb4c     E7 92 02 FB | 	rdlong	arg01, fp
1eb50     30 81 B0 FD | 	call	#__system___float_fromuns
1eb54     E7 7A 62 FC | 	wrlong	result1, fp
1eb58                 | LR__2591
1eb58                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1eb58     1C AA 0E F2 | 	cmp	local03, #28 wz
1eb5c     1C 00 90 5D |  if_ne	jmp	#LR__2592
1eb60     1E AA 06 F6 | 	mov	local03, #30
1eb64     53 93 52 F6 | 	abs	arg01, local01 wc
1eb68     1F AC C6 C9 |  if_b	decod	local04, #31
1eb6c     00 AC 06 36 |  if_ae	mov	local04, #0
1eb70     10 81 B0 FD | 	call	#__system___float_fromuns
1eb74     56 7B 62 F5 | 	xor	result1, local04
1eb78     3D A7 02 F6 | 	mov	local01, result1
1eb7c                 | LR__2592
1eb7c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1eb7c     1D AA 0E F2 | 	cmp	local03, #29 wz
1eb80     10 00 90 5D |  if_ne	jmp	#LR__2593
1eb84     1E AA 06 F6 | 	mov	local03, #30
1eb88     53 93 02 F6 | 	mov	arg01, local01
1eb8c     F4 80 B0 FD | 	call	#__system___float_fromuns
1eb90     3D A7 02 F6 | 	mov	local01, result1
1eb94                 | LR__2593
1eb94                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1eb94     08 CE 05 F1 | 	add	fp, #8
1eb98     E7 94 02 FB | 	rdlong	arg02, fp
1eb9c     08 CE 85 F1 | 	sub	fp, #8
1eba0     1E 94 0E F2 | 	cmp	arg02, #30 wz
1eba4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1eba8     14 00 90 5D |  if_ne	jmp	#LR__2594
1ebac     E7 92 02 FB | 	rdlong	arg01, fp
1ebb0     53 95 02 F6 | 	mov	arg02, local01
1ebb4     E8 93 B0 FD | 	call	#__system____builtin_powf
1ebb8     E7 7A 62 FC | 	wrlong	result1, fp
1ebbc     10 00 90 FD | 	jmp	#LR__2595
1ebc0                 | LR__2594
1ebc0     E7 1A 68 FC | 	wrlong	#13, fp
1ebc4     08 CE 05 F1 | 	add	fp, #8
1ebc8     E7 FE 69 FC | 	wrlong	#255, fp
1ebcc     08 CE 85 F1 | 	sub	fp, #8
1ebd0                 | LR__2595
1ebd0     E7 92 02 F6 | 	mov	arg01, fp
1ebd4     40 EB BE FD | 	call	#_push
1ebd8     E7 F0 03 F6 | 	mov	ptra, fp
1ebdc     F2 00 A0 FD | 	call	#popregs_
1ebe0                 | _do_power_ret
1ebe0     2D 00 64 FD | 	ret
1ebe4                 | 
1ebe4                 | ' 
1ebe4                 | ' '--------------------------------- SHL
1ebe4                 | ' 
1ebe4                 | ' sub do_shl 
1ebe4                 | _do_shl
1ebe4     05 CA 05 F6 | 	mov	COUNT_, #5
1ebe8     E8 00 A0 FD | 	call	#pushregs_
1ebec     18 F0 07 F1 | 	add	ptra, #24
1ebf0     94 EA BE FD | 	call	#_pop
1ebf4     3D A7 02 F6 | 	mov	local01, result1
1ebf8     3E 93 02 F6 | 	mov	arg01, result2
1ebfc     3F AD 02 F6 | 	mov	local04, result3
1ec00     49 A9 02 F6 | 	mov	local02, arg01
1ec04     56 AB 02 F6 | 	mov	local03, local04
1ec08     7C EA BE FD | 	call	#_pop
1ec0c     3F AF 02 F6 | 	mov	local05, result3
1ec10     E7 7A 62 FC | 	wrlong	result1, fp
1ec14     04 CE 05 F1 | 	add	fp, #4
1ec18     E7 7C 62 FC | 	wrlong	result2, fp
1ec1c     04 CE 05 F1 | 	add	fp, #4
1ec20     E7 AE 62 FC | 	wrlong	local05, fp
1ec24                 | ' 
1ec24                 | ' t2=pop()
1ec24                 | ' t1=pop()
1ec24                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1ec24     08 CE 85 F1 | 	sub	fp, #8
1ec28     1C AE 0E F2 | 	cmp	local05, #28 wz
1ec2c     E7 AE 02 AB |  if_e	rdlong	local05, fp
1ec30     E7 AE 62 AC |  if_e	wrlong	local05, fp
1ec34     08 CE 05 A1 |  if_e	add	fp, #8
1ec38     E7 3A 68 AC |  if_e	wrlong	#29, fp
1ec3c     08 CE 85 A1 |  if_e	sub	fp, #8
1ec40                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1ec40     1C AA 0E F2 | 	cmp	local03, #28 wz
1ec44     1D AA 06 A6 |  if_e	mov	local03, #29
1ec48                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1ec48     08 CE 05 F1 | 	add	fp, #8
1ec4c     E7 AE 02 FB | 	rdlong	local05, fp
1ec50     08 CE 85 F1 | 	sub	fp, #8
1ec54     1F AE 0E F2 | 	cmp	local05, #31 wz
1ec58     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1ec5c     08 CE 05 51 |  if_ne	add	fp, #8
1ec60     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1ec64     08 CE 85 51 |  if_ne	sub	fp, #8
1ec68     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1ec6c     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1ec70     E7 0C 68 AC |  if_e	wrlong	#6, fp
1ec74     08 CE 05 A1 |  if_e	add	fp, #8
1ec78     E7 FE 69 AC |  if_e	wrlong	#255, fp
1ec7c     08 CE 85 A1 |  if_e	sub	fp, #8
1ec80     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1ec84     53 AF 62 50 |  if_ne	shl	local05, local01
1ec88     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1ec8c     E7 92 02 F6 | 	mov	arg01, fp
1ec90     84 EA BE FD | 	call	#_push
1ec94     E7 F0 03 F6 | 	mov	ptra, fp
1ec98     F2 00 A0 FD | 	call	#popregs_
1ec9c                 | _do_shl_ret
1ec9c     2D 00 64 FD | 	ret
1eca0                 | 
1eca0                 | ' 
1eca0                 | ' '--------------------------------- SHR
1eca0                 | ' 
1eca0                 | ' sub do_shr 
1eca0                 | _do_shr
1eca0     05 CA 05 F6 | 	mov	COUNT_, #5
1eca4     E8 00 A0 FD | 	call	#pushregs_
1eca8     18 F0 07 F1 | 	add	ptra, #24
1ecac     D8 E9 BE FD | 	call	#_pop
1ecb0     3D A7 02 F6 | 	mov	local01, result1
1ecb4     3E 93 02 F6 | 	mov	arg01, result2
1ecb8     3F AD 02 F6 | 	mov	local04, result3
1ecbc     49 A9 02 F6 | 	mov	local02, arg01
1ecc0     56 AB 02 F6 | 	mov	local03, local04
1ecc4     C0 E9 BE FD | 	call	#_pop
1ecc8     3F AF 02 F6 | 	mov	local05, result3
1eccc     E7 7A 62 FC | 	wrlong	result1, fp
1ecd0     04 CE 05 F1 | 	add	fp, #4
1ecd4     E7 7C 62 FC | 	wrlong	result2, fp
1ecd8     04 CE 05 F1 | 	add	fp, #4
1ecdc     E7 AE 62 FC | 	wrlong	local05, fp
1ece0                 | ' 
1ece0                 | ' t2=pop()
1ece0                 | ' t1=pop()
1ece0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1ece0     08 CE 85 F1 | 	sub	fp, #8
1ece4     1C AE 0E F2 | 	cmp	local05, #28 wz
1ece8     E7 AE 02 AB |  if_e	rdlong	local05, fp
1ecec     E7 AE 62 AC |  if_e	wrlong	local05, fp
1ecf0     08 CE 05 A1 |  if_e	add	fp, #8
1ecf4     E7 3A 68 AC |  if_e	wrlong	#29, fp
1ecf8     08 CE 85 A1 |  if_e	sub	fp, #8
1ecfc                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1ecfc     1C AA 0E F2 | 	cmp	local03, #28 wz
1ed00     1D AA 06 A6 |  if_e	mov	local03, #29
1ed04                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1ed04     08 CE 05 F1 | 	add	fp, #8
1ed08     E7 AE 02 FB | 	rdlong	local05, fp
1ed0c     08 CE 85 F1 | 	sub	fp, #8
1ed10     1F AE 0E F2 | 	cmp	local05, #31 wz
1ed14     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1ed18     08 CE 05 51 |  if_ne	add	fp, #8
1ed1c     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1ed20     08 CE 85 51 |  if_ne	sub	fp, #8
1ed24     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1ed28     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1ed2c     E7 0C 68 AC |  if_e	wrlong	#6, fp
1ed30     08 CE 05 A1 |  if_e	add	fp, #8
1ed34     E7 FE 69 AC |  if_e	wrlong	#255, fp
1ed38     08 CE 85 A1 |  if_e	sub	fp, #8
1ed3c     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1ed40     53 AF 42 50 |  if_ne	shr	local05, local01
1ed44     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1ed48     E7 92 02 F6 | 	mov	arg01, fp
1ed4c     C8 E9 BE FD | 	call	#_push
1ed50     E7 F0 03 F6 | 	mov	ptra, fp
1ed54     F2 00 A0 FD | 	call	#popregs_
1ed58                 | _do_shr_ret
1ed58     2D 00 64 FD | 	ret
1ed5c                 | 
1ed5c                 | ' 
1ed5c                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1ed5c                 | ' 
1ed5c                 | ' ''----------------------------------------------------------------------------------------------------
1ed5c                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1ed5c                 | ' ''----------------------------------------------------------------------------------------------------
1ed5c                 | ' 
1ed5c                 | ' ''--------------------------- Command function pointers
1ed5c                 | ' 
1ed5c                 | ' sub init_commands
1ed5c                 | _init_commands
1ed5c                 | ' 
1ed5c                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1ed5c     00 80 06 F6 | 	mov	_var01, #0
1ed60     D7 14 48 FB | 	callpa	#(@LR__2601-@LR__2600)>>2,fcache_load_ptr_
1ed64                 | LR__2600
1ed64     40 7B 02 F6 | 	mov	result1, _var01
1ed68     02 7A 66 F0 | 	shl	result1, #2
1ed6c     32 95 02 F6 | 	mov	arg02, objptr
1ed70     44 00 00 FF 
1ed74     80 94 06 F1 | 	add	arg02, ##34944
1ed78     4A 7B 02 F1 | 	add	result1, arg02
1ed7c     3D 65 62 FC | 	wrlong	objptr, result1
1ed80     01 80 06 F1 | 	add	_var01, #1
1ed84     00 81 56 F2 | 	cmps	_var01, #256 wc
1ed88     D8 FF 9F CD |  if_b	jmp	#LR__2600
1ed8c                 | LR__2601
1ed8c     32 7B 02 F6 | 	mov	result1, objptr
1ed90     14 7A 26 F4 | 	bith	result1, #20
1ed94     44 00 00 FF 
1ed98     84 64 06 F1 | 	add	objptr, ##34948
1ed9c     32 7B 62 FC | 	wrlong	result1, objptr
1eda0     44 00 00 FF 
1eda4     84 64 86 F1 | 	sub	objptr, ##34948
1eda8     32 7B 02 F6 | 	mov	result1, objptr
1edac     15 7A 26 F4 | 	bith	result1, #21
1edb0     44 00 00 FF 
1edb4     88 64 06 F1 | 	add	objptr, ##34952
1edb8     32 7B 62 FC | 	wrlong	result1, objptr
1edbc     44 00 00 FF 
1edc0     88 64 86 F1 | 	sub	objptr, ##34952
1edc4     32 7B 02 F6 | 	mov	result1, objptr
1edc8     34 7A 26 F4 | 	bith	result1, #52
1edcc     44 00 00 FF 
1edd0     8C 64 06 F1 | 	add	objptr, ##34956
1edd4     32 7B 62 FC | 	wrlong	result1, objptr
1edd8     44 00 00 FF 
1eddc     8C 64 86 F1 | 	sub	objptr, ##34956
1ede0     32 7B 02 F6 | 	mov	result1, objptr
1ede4     16 7A 26 F4 | 	bith	result1, #22
1ede8     44 00 00 FF 
1edec     94 64 06 F1 | 	add	objptr, ##34964
1edf0     32 7B 62 FC | 	wrlong	result1, objptr
1edf4     44 00 00 FF 
1edf8     94 64 86 F1 | 	sub	objptr, ##34964
1edfc     32 7B 02 F6 | 	mov	result1, objptr
1ee00     00 28 00 FF 
1ee04     00 7A 46 F5 | 	or	result1, ##5242880
1ee08     44 00 00 FF 
1ee0c     98 64 06 F1 | 	add	objptr, ##34968
1ee10     32 7B 62 FC | 	wrlong	result1, objptr
1ee14     44 00 00 FF 
1ee18     98 64 86 F1 | 	sub	objptr, ##34968
1ee1c     32 7B 02 F6 | 	mov	result1, objptr
1ee20     35 7A 26 F4 | 	bith	result1, #53
1ee24     44 00 00 FF 
1ee28     9C 64 06 F1 | 	add	objptr, ##34972
1ee2c     32 7B 62 FC | 	wrlong	result1, objptr
1ee30     44 00 00 FF 
1ee34     9C 64 86 F1 | 	sub	objptr, ##34972
1ee38     32 7B 02 F6 | 	mov	result1, objptr
1ee3c     54 7A 26 F4 | 	bith	result1, #84
1ee40     44 00 00 FF 
1ee44     A0 64 06 F1 | 	add	objptr, ##34976
1ee48     32 7B 62 FC | 	wrlong	result1, objptr
1ee4c     44 00 00 FF 
1ee50     A0 64 86 F1 | 	sub	objptr, ##34976
1ee54     32 7B 02 F6 | 	mov	result1, objptr
1ee58     17 7A 26 F4 | 	bith	result1, #23
1ee5c     44 00 00 FF 
1ee60     A4 64 06 F1 | 	add	objptr, ##34980
1ee64     32 7B 62 FC | 	wrlong	result1, objptr
1ee68     44 00 00 FF 
1ee6c     A4 64 86 F1 | 	sub	objptr, ##34980
1ee70     32 7B 02 F6 | 	mov	result1, objptr
1ee74     00 48 00 FF 
1ee78     00 7A 46 F5 | 	or	result1, ##9437184
1ee7c     44 00 00 FF 
1ee80     A8 64 06 F1 | 	add	objptr, ##34984
1ee84     32 7B 62 FC | 	wrlong	result1, objptr
1ee88     44 00 00 FF 
1ee8c     A8 64 86 F1 | 	sub	objptr, ##34984
1ee90     32 7B 02 F6 | 	mov	result1, objptr
1ee94     00 50 00 FF 
1ee98     00 7A 46 F5 | 	or	result1, ##10485760
1ee9c     44 00 00 FF 
1eea0     AC 64 06 F1 | 	add	objptr, ##34988
1eea4     32 7B 62 FC | 	wrlong	result1, objptr
1eea8     44 00 00 FF 
1eeac     AC 64 86 F1 | 	sub	objptr, ##34988
1eeb0     32 7B 02 F6 | 	mov	result1, objptr
1eeb4     00 58 00 FF 
1eeb8     00 7A 46 F5 | 	or	result1, ##11534336
1eebc     44 00 00 FF 
1eec0     B0 64 06 F1 | 	add	objptr, ##34992
1eec4     32 7B 62 FC | 	wrlong	result1, objptr
1eec8     44 00 00 FF 
1eecc     B0 64 86 F1 | 	sub	objptr, ##34992
1eed0     32 7B 02 F6 | 	mov	result1, objptr
1eed4     36 7A 26 F4 | 	bith	result1, #54
1eed8     44 00 00 FF 
1eedc     C4 64 06 F1 | 	add	objptr, ##35012
1eee0     32 7B 62 FC | 	wrlong	result1, objptr
1eee4     44 00 00 FF 
1eee8     C4 64 86 F1 | 	sub	objptr, ##35012
1eeec     32 7B 02 F6 | 	mov	result1, objptr
1eef0     00 68 00 FF 
1eef4     00 7A 46 F5 | 	or	result1, ##13631488
1eef8     44 00 00 FF 
1eefc     F4 64 06 F1 | 	add	objptr, ##35060
1ef00     32 7B 62 FC | 	wrlong	result1, objptr
1ef04     44 00 00 FF 
1ef08     F4 64 86 F1 | 	sub	objptr, ##35060
1ef0c     32 7B 02 F6 | 	mov	result1, objptr
1ef10     00 68 00 FF 
1ef14     00 7A 46 F5 | 	or	result1, ##13631488
1ef18     44 00 00 FF 
1ef1c     F0 64 06 F1 | 	add	objptr, ##35056
1ef20     32 7B 62 FC | 	wrlong	result1, objptr
1ef24     44 00 00 FF 
1ef28     F0 64 86 F1 | 	sub	objptr, ##35056
1ef2c     32 7B 02 F6 | 	mov	result1, objptr
1ef30     00 68 00 FF 
1ef34     00 7A 46 F5 | 	or	result1, ##13631488
1ef38     44 00 00 FF 
1ef3c     F8 64 06 F1 | 	add	objptr, ##35064
1ef40     32 7B 62 FC | 	wrlong	result1, objptr
1ef44     44 00 00 FF 
1ef48     F8 64 86 F1 | 	sub	objptr, ##35064
1ef4c     32 7B 02 F6 | 	mov	result1, objptr
1ef50     00 68 00 FF 
1ef54     00 7A 46 F5 | 	or	result1, ##13631488
1ef58     44 00 00 FF 
1ef5c     FC 64 06 F1 | 	add	objptr, ##35068
1ef60     32 7B 62 FC | 	wrlong	result1, objptr
1ef64     44 00 00 FF 
1ef68     FC 64 86 F1 | 	sub	objptr, ##35068
1ef6c     32 7B 02 F6 | 	mov	result1, objptr
1ef70     00 68 00 FF 
1ef74     00 7A 46 F5 | 	or	result1, ##13631488
1ef78     44 00 00 FF 
1ef7c     2C 65 06 F1 | 	add	objptr, ##35116
1ef80     32 7B 62 FC | 	wrlong	result1, objptr
1ef84     44 00 00 FF 
1ef88     2C 65 86 F1 | 	sub	objptr, ##35116
1ef8c     32 7B 02 F6 | 	mov	result1, objptr
1ef90     55 7A 26 F4 | 	bith	result1, #85
1ef94     44 00 00 FF 
1ef98     DC 64 06 F1 | 	add	objptr, ##35036
1ef9c     32 7B 62 FC | 	wrlong	result1, objptr
1efa0     44 00 00 FF 
1efa4     DC 64 86 F1 | 	sub	objptr, ##35036
1efa8     32 7B 02 F6 | 	mov	result1, objptr
1efac     00 68 00 FF 
1efb0     00 7A 46 F5 | 	or	result1, ##13631488
1efb4     44 00 00 FF 
1efb8     30 65 06 F1 | 	add	objptr, ##35120
1efbc     32 7B 62 FC | 	wrlong	result1, objptr
1efc0     44 00 00 FF 
1efc4     30 65 86 F1 | 	sub	objptr, ##35120
1efc8     32 7B 02 F6 | 	mov	result1, objptr
1efcc     00 68 00 FF 
1efd0     00 7A 46 F5 | 	or	result1, ##13631488
1efd4     44 00 00 FF 
1efd8     00 65 06 F1 | 	add	objptr, ##35072
1efdc     32 7B 62 FC | 	wrlong	result1, objptr
1efe0     44 00 00 FF 
1efe4     00 65 86 F1 | 	sub	objptr, ##35072
1efe8     32 7B 02 F6 | 	mov	result1, objptr
1efec     00 68 00 FF 
1eff0     00 7A 46 F5 | 	or	result1, ##13631488
1eff4     44 00 00 FF 
1eff8     04 65 06 F1 | 	add	objptr, ##35076
1effc     32 7B 62 FC | 	wrlong	result1, objptr
1f000     44 00 00 FF 
1f004     04 65 86 F1 | 	sub	objptr, ##35076
1f008     32 7B 02 F6 | 	mov	result1, objptr
1f00c     00 68 00 FF 
1f010     00 7A 46 F5 | 	or	result1, ##13631488
1f014     44 00 00 FF 
1f018     08 65 06 F1 | 	add	objptr, ##35080
1f01c     32 7B 62 FC | 	wrlong	result1, objptr
1f020     44 00 00 FF 
1f024     08 65 86 F1 | 	sub	objptr, ##35080
1f028     32 7B 02 F6 | 	mov	result1, objptr
1f02c     74 7A 26 F4 | 	bith	result1, #116
1f030     44 00 00 FF 
1f034     80 65 06 F1 | 	add	objptr, ##35200
1f038     32 7B 62 FC | 	wrlong	result1, objptr
1f03c     44 00 00 FF 
1f040     80 65 86 F1 | 	sub	objptr, ##35200
1f044     32 7B 02 F6 | 	mov	result1, objptr
1f048     18 7A 26 F4 | 	bith	result1, #24
1f04c     44 00 00 FF 
1f050     84 65 06 F1 | 	add	objptr, ##35204
1f054     32 7B 62 FC | 	wrlong	result1, objptr
1f058     44 00 00 FF 
1f05c     84 65 86 F1 | 	sub	objptr, ##35204
1f060     32 7B 02 F6 | 	mov	result1, objptr
1f064     00 88 00 FF 
1f068     00 7A 46 F5 | 	or	result1, ##17825792
1f06c     44 00 00 FF 
1f070     88 65 06 F1 | 	add	objptr, ##35208
1f074     32 7B 62 FC | 	wrlong	result1, objptr
1f078     44 00 00 FF 
1f07c     88 65 86 F1 | 	sub	objptr, ##35208
1f080     32 7B 02 F6 | 	mov	result1, objptr
1f084     00 90 00 FF 
1f088     00 7A 46 F5 | 	or	result1, ##18874368
1f08c     44 00 00 FF 
1f090     8C 65 06 F1 | 	add	objptr, ##35212
1f094     32 7B 62 FC | 	wrlong	result1, objptr
1f098     44 00 00 FF 
1f09c     8C 65 86 F1 | 	sub	objptr, ##35212
1f0a0     32 7B 02 F6 | 	mov	result1, objptr
1f0a4     00 98 00 FF 
1f0a8     00 7A 46 F5 | 	or	result1, ##19922944
1f0ac     44 00 00 FF 
1f0b0     90 65 06 F1 | 	add	objptr, ##35216
1f0b4     32 7B 62 FC | 	wrlong	result1, objptr
1f0b8     44 00 00 FF 
1f0bc     90 65 86 F1 | 	sub	objptr, ##35216
1f0c0     32 7B 02 F6 | 	mov	result1, objptr
1f0c4     00 A0 00 FF 
1f0c8     00 7A 46 F5 | 	or	result1, ##20971520
1f0cc     44 00 00 FF 
1f0d0     94 65 06 F1 | 	add	objptr, ##35220
1f0d4     32 7B 62 FC | 	wrlong	result1, objptr
1f0d8     44 00 00 FF 
1f0dc     94 65 86 F1 | 	sub	objptr, ##35220
1f0e0     32 7B 02 F6 | 	mov	result1, objptr
1f0e4     00 A8 00 FF 
1f0e8     00 7A 46 F5 | 	or	result1, ##22020096
1f0ec     44 00 00 FF 
1f0f0     98 65 06 F1 | 	add	objptr, ##35224
1f0f4     32 7B 62 FC | 	wrlong	result1, objptr
1f0f8     44 00 00 FF 
1f0fc     98 65 86 F1 | 	sub	objptr, ##35224
1f100     32 7B 02 F6 | 	mov	result1, objptr
1f104     00 B0 00 FF 
1f108     00 7A 46 F5 | 	or	result1, ##23068672
1f10c     44 00 00 FF 
1f110     9C 65 06 F1 | 	add	objptr, ##35228
1f114     32 7B 62 FC | 	wrlong	result1, objptr
1f118     44 00 00 FF 
1f11c     9C 65 86 F1 | 	sub	objptr, ##35228
1f120     32 7B 02 F6 | 	mov	result1, objptr
1f124     00 B8 00 FF 
1f128     00 7A 46 F5 | 	or	result1, ##24117248
1f12c     44 00 00 FF 
1f130     A0 65 06 F1 | 	add	objptr, ##35232
1f134     32 7B 62 FC | 	wrlong	result1, objptr
1f138     44 00 00 FF 
1f13c     A0 65 86 F1 | 	sub	objptr, ##35232
1f140     32 7B 02 F6 | 	mov	result1, objptr
1f144     37 7A 26 F4 | 	bith	result1, #55
1f148     44 00 00 FF 
1f14c     A4 65 06 F1 | 	add	objptr, ##35236
1f150     32 7B 62 FC | 	wrlong	result1, objptr
1f154     44 00 00 FF 
1f158     A4 65 86 F1 | 	sub	objptr, ##35236
1f15c     32 7B 02 F6 | 	mov	result1, objptr
1f160     00 C8 00 FF 
1f164     00 7A 46 F5 | 	or	result1, ##26214400
1f168     44 00 00 FF 
1f16c     A8 65 06 F1 | 	add	objptr, ##35240
1f170     32 7B 62 FC | 	wrlong	result1, objptr
1f174     44 00 00 FF 
1f178     A8 65 86 F1 | 	sub	objptr, ##35240
1f17c     32 7B 02 F6 | 	mov	result1, objptr
1f180     00 D0 00 FF 
1f184     00 7A 46 F5 | 	or	result1, ##27262976
1f188     44 00 00 FF 
1f18c     AC 65 06 F1 | 	add	objptr, ##35244
1f190     32 7B 62 FC | 	wrlong	result1, objptr
1f194     44 00 00 FF 
1f198     AC 65 86 F1 | 	sub	objptr, ##35244
1f19c     32 7B 02 F6 | 	mov	result1, objptr
1f1a0     00 D8 00 FF 
1f1a4     00 7A 46 F5 | 	or	result1, ##28311552
1f1a8     44 00 00 FF 
1f1ac     B0 65 06 F1 | 	add	objptr, ##35248
1f1b0     32 7B 62 FC | 	wrlong	result1, objptr
1f1b4     44 00 00 FF 
1f1b8     B0 65 86 F1 | 	sub	objptr, ##35248
1f1bc     32 7B 02 F6 | 	mov	result1, objptr
1f1c0     56 7A 26 F4 | 	bith	result1, #86
1f1c4     44 00 00 FF 
1f1c8     B4 65 06 F1 | 	add	objptr, ##35252
1f1cc     32 7B 62 FC | 	wrlong	result1, objptr
1f1d0     44 00 00 FF 
1f1d4     B4 65 86 F1 | 	sub	objptr, ##35252
1f1d8     32 7B 02 F6 | 	mov	result1, objptr
1f1dc     00 E8 00 FF 
1f1e0     00 7A 46 F5 | 	or	result1, ##30408704
1f1e4     46 00 00 FF 
1f1e8     7C 64 06 F1 | 	add	objptr, ##35964
1f1ec     32 7B 62 FC | 	wrlong	result1, objptr
1f1f0     46 00 00 FF 
1f1f4     7C 64 86 F1 | 	sub	objptr, ##35964
1f1f8     32 7B 02 F6 | 	mov	result1, objptr
1f1fc     75 7A 26 F4 | 	bith	result1, #117
1f200     44 00 00 FF 
1f204     B8 65 06 F1 | 	add	objptr, ##35256
1f208     32 7B 62 FC | 	wrlong	result1, objptr
1f20c     44 00 00 FF 
1f210     B8 65 86 F1 | 	sub	objptr, ##35256
1f214     32 7B 02 F6 | 	mov	result1, objptr
1f218     94 7A 26 F4 | 	bith	result1, #148
1f21c     44 00 00 FF 
1f220     CC 65 06 F1 | 	add	objptr, ##35276
1f224     32 7B 62 FC | 	wrlong	result1, objptr
1f228     44 00 00 FF 
1f22c     CC 65 86 F1 | 	sub	objptr, ##35276
1f230     32 7B 02 F6 | 	mov	result1, objptr
1f234     19 7A 26 F4 | 	bith	result1, #25
1f238     44 00 00 FF 
1f23c     BC 65 06 F1 | 	add	objptr, ##35260
1f240     32 7B 62 FC | 	wrlong	result1, objptr
1f244     44 00 00 FF 
1f248     BC 65 86 F1 | 	sub	objptr, ##35260
1f24c     32 7B 02 F6 | 	mov	result1, objptr
1f250     00 08 01 FF 
1f254     00 7A 46 F5 | 	or	result1, ##34603008
1f258     44 00 00 FF 
1f25c     D8 64 06 F1 | 	add	objptr, ##35032
1f260     32 7B 62 FC | 	wrlong	result1, objptr
1f264     44 00 00 FF 
1f268     D8 64 86 F1 | 	sub	objptr, ##35032
1f26c     32 7B 02 F6 | 	mov	result1, objptr
1f270     00 10 01 FF 
1f274     00 7A 46 F5 | 	or	result1, ##35651584
1f278     44 00 00 FF 
1f27c     C4 65 06 F1 | 	add	objptr, ##35268
1f280     32 7B 62 FC | 	wrlong	result1, objptr
1f284     44 00 00 FF 
1f288     C4 65 86 F1 | 	sub	objptr, ##35268
1f28c     32 7B 02 F6 | 	mov	result1, objptr
1f290     00 18 01 FF 
1f294     00 7A 46 F5 | 	or	result1, ##36700160
1f298     44 00 00 FF 
1f29c     C8 65 06 F1 | 	add	objptr, ##35272
1f2a0     32 7B 62 FC | 	wrlong	result1, objptr
1f2a4     44 00 00 FF 
1f2a8     C8 65 86 F1 | 	sub	objptr, ##35272
1f2ac     32 7B 02 F6 | 	mov	result1, objptr
1f2b0     00 20 01 FF 
1f2b4     00 7A 46 F5 | 	or	result1, ##37748736
1f2b8     44 00 00 FF 
1f2bc     D4 65 06 F1 | 	add	objptr, ##35284
1f2c0     32 7B 62 FC | 	wrlong	result1, objptr
1f2c4     44 00 00 FF 
1f2c8     D4 65 86 F1 | 	sub	objptr, ##35284
1f2cc     32 7B 02 F6 | 	mov	result1, objptr
1f2d0     00 28 01 FF 
1f2d4     00 7A 46 F5 | 	or	result1, ##38797312
1f2d8     44 00 00 FF 
1f2dc     D8 65 06 F1 | 	add	objptr, ##35288
1f2e0     32 7B 62 FC | 	wrlong	result1, objptr
1f2e4     44 00 00 FF 
1f2e8     D8 65 86 F1 | 	sub	objptr, ##35288
1f2ec     32 7B 02 F6 | 	mov	result1, objptr
1f2f0     00 30 01 FF 
1f2f4     00 7A 46 F5 | 	or	result1, ##39845888
1f2f8     44 00 00 FF 
1f2fc     DC 65 06 F1 | 	add	objptr, ##35292
1f300     32 7B 62 FC | 	wrlong	result1, objptr
1f304     44 00 00 FF 
1f308     DC 65 86 F1 | 	sub	objptr, ##35292
1f30c     32 7B 02 F6 | 	mov	result1, objptr
1f310     00 38 01 FF 
1f314     00 7A 46 F5 | 	or	result1, ##40894464
1f318     44 00 00 FF 
1f31c     E0 65 06 F1 | 	add	objptr, ##35296
1f320     32 7B 62 FC | 	wrlong	result1, objptr
1f324     44 00 00 FF 
1f328     E0 65 86 F1 | 	sub	objptr, ##35296
1f32c     32 7B 02 F6 | 	mov	result1, objptr
1f330     00 40 01 FF 
1f334     00 7A 46 F5 | 	or	result1, ##41943040
1f338     44 00 00 FF 
1f33c     E8 65 06 F1 | 	add	objptr, ##35304
1f340     32 7B 62 FC | 	wrlong	result1, objptr
1f344     44 00 00 FF 
1f348     E8 65 86 F1 | 	sub	objptr, ##35304
1f34c     32 7B 02 F6 | 	mov	result1, objptr
1f350     00 08 01 FF 
1f354     00 7A 46 F5 | 	or	result1, ##34603008
1f358     44 00 00 FF 
1f35c     EC 65 06 F1 | 	add	objptr, ##35308
1f360     32 7B 62 FC | 	wrlong	result1, objptr
1f364     44 00 00 FF 
1f368     EC 65 86 F1 | 	sub	objptr, ##35308
1f36c     32 7B 02 F6 | 	mov	result1, objptr
1f370     00 48 01 FF 
1f374     00 7A 46 F5 | 	or	result1, ##42991616
1f378     44 00 00 FF 
1f37c     EC 64 06 F1 | 	add	objptr, ##35052
1f380     32 7B 62 FC | 	wrlong	result1, objptr
1f384     44 00 00 FF 
1f388     EC 64 86 F1 | 	sub	objptr, ##35052
1f38c     32 7B 02 F6 | 	mov	result1, objptr
1f390     00 50 01 FF 
1f394     00 7A 46 F5 | 	or	result1, ##44040192
1f398     44 00 00 FF 
1f39c     1C 65 06 F1 | 	add	objptr, ##35100
1f3a0     32 7B 62 FC | 	wrlong	result1, objptr
1f3a4     44 00 00 FF 
1f3a8     1C 65 86 F1 | 	sub	objptr, ##35100
1f3ac     32 7B 02 F6 | 	mov	result1, objptr
1f3b0     00 58 01 FF 
1f3b4     00 7A 46 F5 | 	or	result1, ##45088768
1f3b8     44 00 00 FF 
1f3bc     18 65 06 F1 | 	add	objptr, ##35096
1f3c0     32 7B 62 FC | 	wrlong	result1, objptr
1f3c4     44 00 00 FF 
1f3c8     18 65 86 F1 | 	sub	objptr, ##35096
1f3cc     32 7B 02 F6 | 	mov	result1, objptr
1f3d0     00 60 01 FF 
1f3d4     00 7A 46 F5 | 	or	result1, ##46137344
1f3d8     44 00 00 FF 
1f3dc     BC 64 06 F1 | 	add	objptr, ##35004
1f3e0     32 7B 62 FC | 	wrlong	result1, objptr
1f3e4     44 00 00 FF 
1f3e8     BC 64 86 F1 | 	sub	objptr, ##35004
1f3ec     32 7B 02 F6 | 	mov	result1, objptr
1f3f0     00 68 01 FF 
1f3f4     00 7A 46 F5 | 	or	result1, ##47185920
1f3f8     44 00 00 FF 
1f3fc     C0 64 06 F1 | 	add	objptr, ##35008
1f400     32 7B 62 FC | 	wrlong	result1, objptr
1f404     44 00 00 FF 
1f408     C0 64 86 F1 | 	sub	objptr, ##35008
1f40c     32 7B 02 F6 | 	mov	result1, objptr
1f410     00 70 01 FF 
1f414     00 7A 46 F5 | 	or	result1, ##48234496
1f418     44 00 00 FF 
1f41c     28 65 06 F1 | 	add	objptr, ##35112
1f420     32 7B 62 FC | 	wrlong	result1, objptr
1f424     44 00 00 FF 
1f428     28 65 86 F1 | 	sub	objptr, ##35112
1f42c     32 7B 02 F6 | 	mov	result1, objptr
1f430     00 78 01 FF 
1f434     00 7A 46 F5 | 	or	result1, ##49283072
1f438     44 00 00 FF 
1f43c     D0 65 06 F1 | 	add	objptr, ##35280
1f440     32 7B 62 FC | 	wrlong	result1, objptr
1f444     44 00 00 FF 
1f448     D0 65 86 F1 | 	sub	objptr, ##35280
1f44c     32 7B 02 F6 | 	mov	result1, objptr
1f450     38 7A 26 F4 | 	bith	result1, #56
1f454     44 00 00 FF 
1f458     E4 65 06 F1 | 	add	objptr, ##35300
1f45c     32 7B 62 FC | 	wrlong	result1, objptr
1f460     44 00 00 FF 
1f464     E4 65 86 F1 | 	sub	objptr, ##35300
1f468     32 7B 02 F6 | 	mov	result1, objptr
1f46c     00 88 01 FF 
1f470     00 7A 46 F5 | 	or	result1, ##51380224
1f474     44 00 00 FF 
1f478     F0 65 06 F1 | 	add	objptr, ##35312
1f47c     32 7B 62 FC | 	wrlong	result1, objptr
1f480     44 00 00 FF 
1f484     F0 65 86 F1 | 	sub	objptr, ##35312
1f488     32 7B 02 F6 | 	mov	result1, objptr
1f48c     00 90 01 FF 
1f490     00 7A 46 F5 | 	or	result1, ##52428800
1f494     44 00 00 FF 
1f498     F4 65 06 F1 | 	add	objptr, ##35316
1f49c     32 7B 62 FC | 	wrlong	result1, objptr
1f4a0     44 00 00 FF 
1f4a4     F4 65 86 F1 | 	sub	objptr, ##35316
1f4a8     32 7B 02 F6 | 	mov	result1, objptr
1f4ac     00 98 01 FF 
1f4b0     00 7A 46 F5 | 	or	result1, ##53477376
1f4b4     44 00 00 FF 
1f4b8     F8 65 06 F1 | 	add	objptr, ##35320
1f4bc     32 7B 62 FC | 	wrlong	result1, objptr
1f4c0     44 00 00 FF 
1f4c4     F8 65 86 F1 | 	sub	objptr, ##35320
1f4c8     32 7B 02 F6 | 	mov	result1, objptr
1f4cc     00 A0 01 FF 
1f4d0     00 7A 46 F5 | 	or	result1, ##54525952
1f4d4     44 00 00 FF 
1f4d8     FC 65 06 F1 | 	add	objptr, ##35324
1f4dc     32 7B 62 FC | 	wrlong	result1, objptr
1f4e0     44 00 00 FF 
1f4e4     FC 65 86 F1 | 	sub	objptr, ##35324
1f4e8     32 7B 02 F6 | 	mov	result1, objptr
1f4ec     00 A8 01 FF 
1f4f0     00 7A 46 F5 | 	or	result1, ##55574528
1f4f4     45 00 00 FF 
1f4f8     00 64 06 F1 | 	add	objptr, ##35328
1f4fc     32 7B 62 FC | 	wrlong	result1, objptr
1f500     45 00 00 FF 
1f504     00 64 86 F1 | 	sub	objptr, ##35328
1f508     32 7B 02 F6 | 	mov	result1, objptr
1f50c     00 B0 01 FF 
1f510     00 7A 46 F5 | 	or	result1, ##56623104
1f514     45 00 00 FF 
1f518     04 64 06 F1 | 	add	objptr, ##35332
1f51c     32 7B 62 FC | 	wrlong	result1, objptr
1f520     45 00 00 FF 
1f524     04 64 86 F1 | 	sub	objptr, ##35332
1f528     32 7B 02 F6 | 	mov	result1, objptr
1f52c     94 7A 26 F4 | 	bith	result1, #148
1f530     44 00 00 FF 
1f534     CC 65 06 F1 | 	add	objptr, ##35276
1f538     32 7B 62 FC | 	wrlong	result1, objptr
1f53c     44 00 00 FF 
1f540     CC 65 86 F1 | 	sub	objptr, ##35276
1f544     32 7B 02 F6 | 	mov	result1, objptr
1f548     00 B8 01 FF 
1f54c     00 7A 46 F5 | 	or	result1, ##57671680
1f550     45 00 00 FF 
1f554     0C 64 06 F1 | 	add	objptr, ##35340
1f558     32 7B 62 FC | 	wrlong	result1, objptr
1f55c     45 00 00 FF 
1f560     0C 64 86 F1 | 	sub	objptr, ##35340
1f564     32 7B 02 F6 | 	mov	result1, objptr
1f568     57 7A 26 F4 | 	bith	result1, #87
1f56c     45 00 00 FF 
1f570     08 64 06 F1 | 	add	objptr, ##35336
1f574     32 7B 62 FC | 	wrlong	result1, objptr
1f578     45 00 00 FF 
1f57c     08 64 86 F1 | 	sub	objptr, ##35336
1f580     32 7B 02 F6 | 	mov	result1, objptr
1f584     00 C8 01 FF 
1f588     00 7A 46 F5 | 	or	result1, ##59768832
1f58c     45 00 00 FF 
1f590     20 64 06 F1 | 	add	objptr, ##35360
1f594     32 7B 62 FC | 	wrlong	result1, objptr
1f598     45 00 00 FF 
1f59c     20 64 86 F1 | 	sub	objptr, ##35360
1f5a0     32 7B 02 F6 | 	mov	result1, objptr
1f5a4     00 D0 01 FF 
1f5a8     00 7A 46 F5 | 	or	result1, ##60817408
1f5ac     45 00 00 FF 
1f5b0     24 64 06 F1 | 	add	objptr, ##35364
1f5b4     32 7B 62 FC | 	wrlong	result1, objptr
1f5b8     45 00 00 FF 
1f5bc     24 64 86 F1 | 	sub	objptr, ##35364
1f5c0     32 7B 02 F6 | 	mov	result1, objptr
1f5c4     00 D8 01 FF 
1f5c8     00 7A 46 F5 | 	or	result1, ##61865984
1f5cc     45 00 00 FF 
1f5d0     10 64 06 F1 | 	add	objptr, ##35344
1f5d4     32 7B 62 FC | 	wrlong	result1, objptr
1f5d8     45 00 00 FF 
1f5dc     10 64 86 F1 | 	sub	objptr, ##35344
1f5e0     32 7B 02 F6 | 	mov	result1, objptr
1f5e4     76 7A 26 F4 | 	bith	result1, #118
1f5e8     45 00 00 FF 
1f5ec     14 64 06 F1 | 	add	objptr, ##35348
1f5f0     32 7B 62 FC | 	wrlong	result1, objptr
1f5f4     45 00 00 FF 
1f5f8     14 64 86 F1 | 	sub	objptr, ##35348
1f5fc     32 7B 02 F6 | 	mov	result1, objptr
1f600     00 E8 01 FF 
1f604     00 7A 46 F5 | 	or	result1, ##63963136
1f608     45 00 00 FF 
1f60c     18 64 06 F1 | 	add	objptr, ##35352
1f610     32 7B 62 FC | 	wrlong	result1, objptr
1f614     45 00 00 FF 
1f618     18 64 86 F1 | 	sub	objptr, ##35352
1f61c     32 7B 02 F6 | 	mov	result1, objptr
1f620     95 7A 26 F4 | 	bith	result1, #149
1f624     45 00 00 FF 
1f628     1C 64 06 F1 | 	add	objptr, ##35356
1f62c     32 7B 62 FC | 	wrlong	result1, objptr
1f630     45 00 00 FF 
1f634     1C 64 86 F1 | 	sub	objptr, ##35356
1f638     32 7B 02 F6 | 	mov	result1, objptr
1f63c     B4 7A 26 F4 | 	bith	result1, #180
1f640     45 00 00 FF 
1f644     2C 64 06 F1 | 	add	objptr, ##35372
1f648     32 7B 62 FC | 	wrlong	result1, objptr
1f64c     45 00 00 FF 
1f650     2C 64 86 F1 | 	sub	objptr, ##35372
1f654     32 7B 02 F6 | 	mov	result1, objptr
1f658     1A 7A 26 F4 | 	bith	result1, #26
1f65c     45 00 00 FF 
1f660     28 64 06 F1 | 	add	objptr, ##35368
1f664     32 7B 62 FC | 	wrlong	result1, objptr
1f668     45 00 00 FF 
1f66c     28 64 86 F1 | 	sub	objptr, ##35368
1f670     32 7B 02 F6 | 	mov	result1, objptr
1f674     00 08 02 FF 
1f678     00 7A 46 F5 | 	or	result1, ##68157440
1f67c     45 00 00 FF 
1f680     38 64 06 F1 | 	add	objptr, ##35384
1f684     32 7B 62 FC | 	wrlong	result1, objptr
1f688     45 00 00 FF 
1f68c     38 64 86 F1 | 	sub	objptr, ##35384
1f690     32 7B 02 F6 | 	mov	result1, objptr
1f694     00 10 02 FF 
1f698     00 7A 46 F5 | 	or	result1, ##69206016
1f69c     45 00 00 FF 
1f6a0     34 64 06 F1 | 	add	objptr, ##35380
1f6a4     32 7B 62 FC | 	wrlong	result1, objptr
1f6a8     45 00 00 FF 
1f6ac     34 64 86 F1 | 	sub	objptr, ##35380
1f6b0     32 7B 02 F6 | 	mov	result1, objptr
1f6b4     00 18 02 FF 
1f6b8     00 7A 46 F5 | 	or	result1, ##70254592
1f6bc     45 00 00 FF 
1f6c0     30 64 06 F1 | 	add	objptr, ##35376
1f6c4     32 7B 62 FC | 	wrlong	result1, objptr
1f6c8     45 00 00 FF 
1f6cc     30 64 86 F1 | 	sub	objptr, ##35376
1f6d0     32 7B 02 F6 | 	mov	result1, objptr
1f6d4     00 20 02 FF 
1f6d8     00 7A 46 F5 | 	or	result1, ##71303168
1f6dc     45 00 00 FF 
1f6e0     3C 64 06 F1 | 	add	objptr, ##35388
1f6e4     32 7B 62 FC | 	wrlong	result1, objptr
1f6e8     45 00 00 FF 
1f6ec     3C 64 86 F1 | 	sub	objptr, ##35388
1f6f0     32 7B 02 F6 | 	mov	result1, objptr
1f6f4     00 28 02 FF 
1f6f8     00 7A 46 F5 | 	or	result1, ##72351744
1f6fc     45 00 00 FF 
1f700     40 64 06 F1 | 	add	objptr, ##35392
1f704     32 7B 62 FC | 	wrlong	result1, objptr
1f708     45 00 00 FF 
1f70c     40 64 86 F1 | 	sub	objptr, ##35392
1f710     32 7B 02 F6 | 	mov	result1, objptr
1f714     00 30 02 FF 
1f718     00 7A 46 F5 | 	or	result1, ##73400320
1f71c     44 00 00 FF 
1f720     D4 64 06 F1 | 	add	objptr, ##35028
1f724     32 7B 62 FC | 	wrlong	result1, objptr
1f728     44 00 00 FF 
1f72c     D4 64 86 F1 | 	sub	objptr, ##35028
1f730     32 7B 02 F6 | 	mov	result1, objptr
1f734     00 38 02 FF 
1f738     00 7A 46 F5 | 	or	result1, ##74448896
1f73c     45 00 00 FF 
1f740     58 64 06 F1 | 	add	objptr, ##35416
1f744     32 7B 62 FC | 	wrlong	result1, objptr
1f748     45 00 00 FF 
1f74c     58 64 86 F1 | 	sub	objptr, ##35416
1f750     32 7B 02 F6 | 	mov	result1, objptr
1f754     00 40 02 FF 
1f758     00 7A 46 F5 | 	or	result1, ##75497472
1f75c     45 00 00 FF 
1f760     68 64 06 F1 | 	add	objptr, ##35432
1f764     32 7B 62 FC | 	wrlong	result1, objptr
1f768     45 00 00 FF 
1f76c     68 64 86 F1 | 	sub	objptr, ##35432
1f770     32 7B 02 F6 | 	mov	result1, objptr
1f774     00 48 02 FF 
1f778     00 7A 46 F5 | 	or	result1, ##76546048
1f77c     45 00 00 FF 
1f780     6C 64 06 F1 | 	add	objptr, ##35436
1f784     32 7B 62 FC | 	wrlong	result1, objptr
1f788     45 00 00 FF 
1f78c     6C 64 86 F1 | 	sub	objptr, ##35436
1f790     32 7B 02 F6 | 	mov	result1, objptr
1f794     00 50 02 FF 
1f798     00 7A 46 F5 | 	or	result1, ##77594624
1f79c     45 00 00 FF 
1f7a0     64 64 06 F1 | 	add	objptr, ##35428
1f7a4     32 7B 62 FC | 	wrlong	result1, objptr
1f7a8     45 00 00 FF 
1f7ac     64 64 86 F1 | 	sub	objptr, ##35428
1f7b0     32 7B 02 F6 | 	mov	result1, objptr
1f7b4     00 58 02 FF 
1f7b8     00 7A 46 F5 | 	or	result1, ##78643200
1f7bc     45 00 00 FF 
1f7c0     5C 64 06 F1 | 	add	objptr, ##35420
1f7c4     32 7B 62 FC | 	wrlong	result1, objptr
1f7c8     45 00 00 FF 
1f7cc     5C 64 86 F1 | 	sub	objptr, ##35420
1f7d0     32 7B 02 F6 | 	mov	result1, objptr
1f7d4     00 60 02 FF 
1f7d8     00 7A 46 F5 | 	or	result1, ##79691776
1f7dc     45 00 00 FF 
1f7e0     60 64 06 F1 | 	add	objptr, ##35424
1f7e4     32 7B 62 FC | 	wrlong	result1, objptr
1f7e8     45 00 00 FF 
1f7ec     60 64 86 F1 | 	sub	objptr, ##35424
1f7f0     32 7B 02 F6 | 	mov	result1, objptr
1f7f4     00 68 02 FF 
1f7f8     00 7A 46 F5 | 	or	result1, ##80740352
1f7fc     45 00 00 FF 
1f800     70 64 06 F1 | 	add	objptr, ##35440
1f804     32 7B 62 FC | 	wrlong	result1, objptr
1f808     45 00 00 FF 
1f80c     70 64 86 F1 | 	sub	objptr, ##35440
1f810     32 7B 02 F6 | 	mov	result1, objptr
1f814     00 70 02 FF 
1f818     00 7A 46 F5 | 	or	result1, ##81788928
1f81c     45 00 00 FF 
1f820     74 64 06 F1 | 	add	objptr, ##35444
1f824     32 7B 62 FC | 	wrlong	result1, objptr
1f828     45 00 00 FF 
1f82c     74 64 86 F1 | 	sub	objptr, ##35444
1f830     32 7B 02 F6 | 	mov	result1, objptr
1f834     00 78 02 FF 
1f838     00 7A 46 F5 | 	or	result1, ##82837504
1f83c     45 00 00 FF 
1f840     78 64 06 F1 | 	add	objptr, ##35448
1f844     32 7B 62 FC | 	wrlong	result1, objptr
1f848     45 00 00 FF 
1f84c     78 64 86 F1 | 	sub	objptr, ##35448
1f850     32 7B 02 F6 | 	mov	result1, objptr
1f854     00 80 02 FF 
1f858     00 7A 46 F5 | 	or	result1, ##83886080
1f85c     45 00 00 FF 
1f860     7C 64 06 F1 | 	add	objptr, ##35452
1f864     32 7B 62 FC | 	wrlong	result1, objptr
1f868     45 00 00 FF 
1f86c     7C 64 86 F1 | 	sub	objptr, ##35452
1f870     32 7B 02 F6 | 	mov	result1, objptr
1f874     00 88 02 FF 
1f878     00 7A 46 F5 | 	or	result1, ##84934656
1f87c     45 00 00 FF 
1f880     80 64 06 F1 | 	add	objptr, ##35456
1f884     32 7B 62 FC | 	wrlong	result1, objptr
1f888     45 00 00 FF 
1f88c     80 64 86 F1 | 	sub	objptr, ##35456
1f890     32 7B 02 F6 | 	mov	result1, objptr
1f894     00 90 02 FF 
1f898     00 7A 46 F5 | 	or	result1, ##85983232
1f89c     45 00 00 FF 
1f8a0     84 64 06 F1 | 	add	objptr, ##35460
1f8a4     32 7B 62 FC | 	wrlong	result1, objptr
1f8a8     45 00 00 FF 
1f8ac     84 64 86 F1 | 	sub	objptr, ##35460
1f8b0     32 7B 02 F6 | 	mov	result1, objptr
1f8b4     00 98 02 FF 
1f8b8     00 7A 46 F5 | 	or	result1, ##87031808
1f8bc     45 00 00 FF 
1f8c0     88 64 06 F1 | 	add	objptr, ##35464
1f8c4     32 7B 62 FC | 	wrlong	result1, objptr
1f8c8     45 00 00 FF 
1f8cc     88 64 86 F1 | 	sub	objptr, ##35464
1f8d0     32 7B 02 F6 | 	mov	result1, objptr
1f8d4     00 A0 02 FF 
1f8d8     00 7A 46 F5 | 	or	result1, ##88080384
1f8dc     45 00 00 FF 
1f8e0     8C 64 06 F1 | 	add	objptr, ##35468
1f8e4     32 7B 62 FC | 	wrlong	result1, objptr
1f8e8     45 00 00 FF 
1f8ec     8C 64 86 F1 | 	sub	objptr, ##35468
1f8f0     32 7B 02 F6 | 	mov	result1, objptr
1f8f4     00 A8 02 FF 
1f8f8     00 7A 46 F5 | 	or	result1, ##89128960
1f8fc     45 00 00 FF 
1f900     98 64 06 F1 | 	add	objptr, ##35480
1f904     32 7B 62 FC | 	wrlong	result1, objptr
1f908     45 00 00 FF 
1f90c     98 64 86 F1 | 	sub	objptr, ##35480
1f910     32 7B 02 F6 | 	mov	result1, objptr
1f914     00 B0 02 FF 
1f918     00 7A 46 F5 | 	or	result1, ##90177536
1f91c     45 00 00 FF 
1f920     90 64 06 F1 | 	add	objptr, ##35472
1f924     32 7B 62 FC | 	wrlong	result1, objptr
1f928     45 00 00 FF 
1f92c     90 64 86 F1 | 	sub	objptr, ##35472
1f930     32 7B 02 F6 | 	mov	result1, objptr
1f934     00 B8 02 FF 
1f938     00 7A 46 F5 | 	or	result1, ##91226112
1f93c     45 00 00 FF 
1f940     94 64 06 F1 | 	add	objptr, ##35476
1f944     32 7B 62 FC | 	wrlong	result1, objptr
1f948     45 00 00 FF 
1f94c     94 64 86 F1 | 	sub	objptr, ##35476
1f950     32 7B 02 F6 | 	mov	result1, objptr
1f954     00 C0 02 FF 
1f958     00 7A 46 F5 | 	or	result1, ##92274688
1f95c     45 00 00 FF 
1f960     9C 64 06 F1 | 	add	objptr, ##35484
1f964     32 7B 62 FC | 	wrlong	result1, objptr
1f968     45 00 00 FF 
1f96c     9C 64 86 F1 | 	sub	objptr, ##35484
1f970     32 7B 02 F6 | 	mov	result1, objptr
1f974     00 C8 02 FF 
1f978     00 7A 46 F5 | 	or	result1, ##93323264
1f97c     45 00 00 FF 
1f980     44 64 06 F1 | 	add	objptr, ##35396
1f984     32 7B 62 FC | 	wrlong	result1, objptr
1f988     45 00 00 FF 
1f98c     44 64 86 F1 | 	sub	objptr, ##35396
1f990     32 7B 02 F6 | 	mov	result1, objptr
1f994     00 D0 02 FF 
1f998     00 7A 46 F5 | 	or	result1, ##94371840
1f99c     45 00 00 FF 
1f9a0     4C 64 06 F1 | 	add	objptr, ##35404
1f9a4     32 7B 62 FC | 	wrlong	result1, objptr
1f9a8     45 00 00 FF 
1f9ac     4C 64 86 F1 | 	sub	objptr, ##35404
1f9b0     32 7B 02 F6 | 	mov	result1, objptr
1f9b4     00 D8 02 FF 
1f9b8     00 7A 46 F5 | 	or	result1, ##95420416
1f9bc     45 00 00 FF 
1f9c0     50 64 06 F1 | 	add	objptr, ##35408
1f9c4     32 7B 62 FC | 	wrlong	result1, objptr
1f9c8     45 00 00 FF 
1f9cc     50 64 86 F1 | 	sub	objptr, ##35408
1f9d0     32 7B 02 F6 | 	mov	result1, objptr
1f9d4     00 E0 02 FF 
1f9d8     00 7A 46 F5 | 	or	result1, ##96468992
1f9dc     45 00 00 FF 
1f9e0     A0 64 06 F1 | 	add	objptr, ##35488
1f9e4     32 7B 62 FC | 	wrlong	result1, objptr
1f9e8     45 00 00 FF 
1f9ec     A0 64 86 F1 | 	sub	objptr, ##35488
1f9f0     32 7B 02 F6 | 	mov	result1, objptr
1f9f4     00 E8 02 FF 
1f9f8     00 7A 46 F5 | 	or	result1, ##97517568
1f9fc     45 00 00 FF 
1fa00     A4 64 06 F1 | 	add	objptr, ##35492
1fa04     32 7B 62 FC | 	wrlong	result1, objptr
1fa08     45 00 00 FF 
1fa0c     A4 64 86 F1 | 	sub	objptr, ##35492
1fa10     32 7B 02 F6 | 	mov	result1, objptr
1fa14     00 F0 02 FF 
1fa18     00 7A 46 F5 | 	or	result1, ##98566144
1fa1c     45 00 00 FF 
1fa20     A8 64 06 F1 | 	add	objptr, ##35496
1fa24     32 7B 62 FC | 	wrlong	result1, objptr
1fa28     45 00 00 FF 
1fa2c     A8 64 86 F1 | 	sub	objptr, ##35496
1fa30     32 7B 02 F6 | 	mov	result1, objptr
1fa34     00 F8 02 FF 
1fa38     00 7A 46 F5 | 	or	result1, ##99614720
1fa3c     45 00 00 FF 
1fa40     54 64 06 F1 | 	add	objptr, ##35412
1fa44     32 7B 62 FC | 	wrlong	result1, objptr
1fa48     45 00 00 FF 
1fa4c     54 64 86 F1 | 	sub	objptr, ##35412
1fa50     32 7B 02 F6 | 	mov	result1, objptr
1fa54     39 7A 26 F4 | 	bith	result1, #57
1fa58     45 00 00 FF 
1fa5c     B8 64 06 F1 | 	add	objptr, ##35512
1fa60     32 7B 62 FC | 	wrlong	result1, objptr
1fa64     45 00 00 FF 
1fa68     B8 64 86 F1 | 	sub	objptr, ##35512
1fa6c     32 7B 02 F6 | 	mov	result1, objptr
1fa70     00 08 03 FF 
1fa74     00 7A 46 F5 | 	or	result1, ##101711872
1fa78     45 00 00 FF 
1fa7c     C0 64 06 F1 | 	add	objptr, ##35520
1fa80     32 7B 62 FC | 	wrlong	result1, objptr
1fa84     45 00 00 FF 
1fa88     C0 64 86 F1 | 	sub	objptr, ##35520
1fa8c     32 7B 02 F6 | 	mov	result1, objptr
1fa90     00 10 03 FF 
1fa94     00 7A 46 F5 | 	or	result1, ##102760448
1fa98     45 00 00 FF 
1fa9c     B4 64 06 F1 | 	add	objptr, ##35508
1faa0     32 7B 62 FC | 	wrlong	result1, objptr
1faa4     45 00 00 FF 
1faa8     B4 64 86 F1 | 	sub	objptr, ##35508
1faac     32 7B 02 F6 | 	mov	result1, objptr
1fab0     00 18 03 FF 
1fab4     00 7A 46 F5 | 	or	result1, ##103809024
1fab8     45 00 00 FF 
1fabc     B0 64 06 F1 | 	add	objptr, ##35504
1fac0     32 7B 62 FC | 	wrlong	result1, objptr
1fac4     45 00 00 FF 
1fac8     B0 64 86 F1 | 	sub	objptr, ##35504
1facc     32 7B 02 F6 | 	mov	result1, objptr
1fad0     00 20 03 FF 
1fad4     00 7A 46 F5 | 	or	result1, ##104857600
1fad8     45 00 00 FF 
1fadc     AC 64 06 F1 | 	add	objptr, ##35500
1fae0     32 7B 62 FC | 	wrlong	result1, objptr
1fae4     45 00 00 FF 
1fae8     AC 64 86 F1 | 	sub	objptr, ##35500
1faec     32 7B 02 F6 | 	mov	result1, objptr
1faf0     00 28 03 FF 
1faf4     00 7A 46 F5 | 	or	result1, ##105906176
1faf8     45 00 00 FF 
1fafc     BC 64 06 F1 | 	add	objptr, ##35516
1fb00     32 7B 62 FC | 	wrlong	result1, objptr
1fb04     45 00 00 FF 
1fb08     BC 64 86 F1 | 	sub	objptr, ##35516
1fb0c     32 7B 02 F6 | 	mov	result1, objptr
1fb10     00 30 03 FF 
1fb14     00 7A 46 F5 | 	or	result1, ##106954752
1fb18     45 00 00 FF 
1fb1c     C4 64 06 F1 | 	add	objptr, ##35524
1fb20     32 7B 62 FC | 	wrlong	result1, objptr
1fb24     45 00 00 FF 
1fb28     C4 64 86 F1 | 	sub	objptr, ##35524
1fb2c     32 7B 02 F6 | 	mov	result1, objptr
1fb30     00 38 03 FF 
1fb34     00 7A 46 F5 | 	or	result1, ##108003328
1fb38     45 00 00 FF 
1fb3c     C8 64 06 F1 | 	add	objptr, ##35528
1fb40     32 7B 62 FC | 	wrlong	result1, objptr
1fb44     45 00 00 FF 
1fb48     C8 64 86 F1 | 	sub	objptr, ##35528
1fb4c     32 7B 02 F6 | 	mov	result1, objptr
1fb50     00 40 03 FF 
1fb54     00 7A 46 F5 | 	or	result1, ##109051904
1fb58     45 00 00 FF 
1fb5c     CC 64 06 F1 | 	add	objptr, ##35532
1fb60     32 7B 62 FC | 	wrlong	result1, objptr
1fb64     45 00 00 FF 
1fb68     CC 64 86 F1 | 	sub	objptr, ##35532
1fb6c     32 7B 02 F6 | 	mov	result1, objptr
1fb70     00 48 03 FF 
1fb74     00 7A 46 F5 | 	or	result1, ##110100480
1fb78     45 00 00 FF 
1fb7c     D4 64 06 F1 | 	add	objptr, ##35540
1fb80     32 7B 62 FC | 	wrlong	result1, objptr
1fb84     45 00 00 FF 
1fb88     D4 64 86 F1 | 	sub	objptr, ##35540
1fb8c     32 7B 02 F6 | 	mov	result1, objptr
1fb90     00 50 03 FF 
1fb94     00 7A 46 F5 | 	or	result1, ##111149056
1fb98     45 00 00 FF 
1fb9c     D8 64 06 F1 | 	add	objptr, ##35544
1fba0     32 7B 62 FC | 	wrlong	result1, objptr
1fba4     45 00 00 FF 
1fba8     D8 64 86 F1 | 	sub	objptr, ##35544
1fbac     32 7B 02 F6 | 	mov	result1, objptr
1fbb0     00 58 03 FF 
1fbb4     00 7A 46 F5 | 	or	result1, ##112197632
1fbb8     45 00 00 FF 
1fbbc     DC 64 06 F1 | 	add	objptr, ##35548
1fbc0     32 7B 62 FC | 	wrlong	result1, objptr
1fbc4     45 00 00 FF 
1fbc8     DC 64 86 F1 | 	sub	objptr, ##35548
1fbcc     32 7B 02 F6 | 	mov	result1, objptr
1fbd0     00 60 03 FF 
1fbd4     00 7A 46 F5 | 	or	result1, ##113246208
1fbd8     45 00 00 FF 
1fbdc     E0 64 06 F1 | 	add	objptr, ##35552
1fbe0     32 7B 62 FC | 	wrlong	result1, objptr
1fbe4     45 00 00 FF 
1fbe8     E0 64 86 F1 | 	sub	objptr, ##35552
1fbec     32 7B 02 F6 | 	mov	result1, objptr
1fbf0     00 68 03 FF 
1fbf4     00 7A 46 F5 | 	or	result1, ##114294784
1fbf8     45 00 00 FF 
1fbfc     E4 64 06 F1 | 	add	objptr, ##35556
1fc00     32 7B 62 FC | 	wrlong	result1, objptr
1fc04     45 00 00 FF 
1fc08     E4 64 86 F1 | 	sub	objptr, ##35556
1fc0c     32 7B 02 F6 | 	mov	result1, objptr
1fc10     00 70 03 FF 
1fc14     00 7A 46 F5 | 	or	result1, ##115343360
1fc18     45 00 00 FF 
1fc1c     E8 64 06 F1 | 	add	objptr, ##35560
1fc20     32 7B 62 FC | 	wrlong	result1, objptr
1fc24     45 00 00 FF 
1fc28     E8 64 86 F1 | 	sub	objptr, ##35560
1fc2c     32 7B 02 F6 | 	mov	result1, objptr
1fc30     00 08 01 FF 
1fc34     00 7A 46 F5 | 	or	result1, ##34603008
1fc38     45 00 00 FF 
1fc3c     EC 64 06 F1 | 	add	objptr, ##35564
1fc40     32 7B 62 FC | 	wrlong	result1, objptr
1fc44     45 00 00 FF 
1fc48     EC 64 86 F1 | 	sub	objptr, ##35564
1fc4c     32 7B 02 F6 | 	mov	result1, objptr
1fc50     00 78 03 FF 
1fc54     00 7A 46 F5 | 	or	result1, ##116391936
1fc58     45 00 00 FF 
1fc5c     F0 64 06 F1 | 	add	objptr, ##35568
1fc60     32 7B 62 FC | 	wrlong	result1, objptr
1fc64     45 00 00 FF 
1fc68     F0 64 86 F1 | 	sub	objptr, ##35568
1fc6c     32 7B 02 F6 | 	mov	result1, objptr
1fc70     58 7A 26 F4 | 	bith	result1, #88
1fc74     45 00 00 FF 
1fc78     D0 64 06 F1 | 	add	objptr, ##35536
1fc7c     32 7B 62 FC | 	wrlong	result1, objptr
1fc80     45 00 00 FF 
1fc84     D0 64 86 F1 | 	sub	objptr, ##35536
1fc88     32 7B 02 F6 | 	mov	result1, objptr
1fc8c     00 88 03 FF 
1fc90     00 7A 46 F5 | 	or	result1, ##118489088
1fc94     44 00 00 FF 
1fc98     C8 64 06 F1 | 	add	objptr, ##35016
1fc9c     32 7B 62 FC | 	wrlong	result1, objptr
1fca0     44 00 00 FF 
1fca4     C8 64 86 F1 | 	sub	objptr, ##35016
1fca8     32 7B 02 F6 | 	mov	result1, objptr
1fcac     00 90 03 FF 
1fcb0     00 7A 46 F5 | 	or	result1, ##119537664
1fcb4     45 00 00 FF 
1fcb8     F4 64 06 F1 | 	add	objptr, ##35572
1fcbc     32 7B 62 FC | 	wrlong	result1, objptr
1fcc0     45 00 00 FF 
1fcc4     F4 64 86 F1 | 	sub	objptr, ##35572
1fcc8     32 7B 02 F6 | 	mov	result1, objptr
1fccc     00 98 03 FF 
1fcd0     00 7A 46 F5 | 	or	result1, ##120586240
1fcd4     45 00 00 FF 
1fcd8     F8 64 06 F1 | 	add	objptr, ##35576
1fcdc     32 7B 62 FC | 	wrlong	result1, objptr
1fce0     45 00 00 FF 
1fce4     F8 64 86 F1 | 	sub	objptr, ##35576
1fce8     32 7B 02 F6 | 	mov	result1, objptr
1fcec     00 A0 03 FF 
1fcf0     00 7A 46 F5 | 	or	result1, ##121634816
1fcf4     45 00 00 FF 
1fcf8     0C 65 06 F1 | 	add	objptr, ##35596
1fcfc     32 7B 62 FC | 	wrlong	result1, objptr
1fd00     45 00 00 FF 
1fd04     0C 65 86 F1 | 	sub	objptr, ##35596
1fd08     32 7B 02 F6 | 	mov	result1, objptr
1fd0c     00 A8 03 FF 
1fd10     00 7A 46 F5 | 	or	result1, ##122683392
1fd14     45 00 00 FF 
1fd18     08 65 06 F1 | 	add	objptr, ##35592
1fd1c     32 7B 62 FC | 	wrlong	result1, objptr
1fd20     45 00 00 FF 
1fd24     08 65 86 F1 | 	sub	objptr, ##35592
1fd28     32 7B 02 F6 | 	mov	result1, objptr
1fd2c     00 B0 03 FF 
1fd30     00 7A 46 F5 | 	or	result1, ##123731968
1fd34     45 00 00 FF 
1fd38     00 65 06 F1 | 	add	objptr, ##35584
1fd3c     32 7B 62 FC | 	wrlong	result1, objptr
1fd40     45 00 00 FF 
1fd44     00 65 86 F1 | 	sub	objptr, ##35584
1fd48     32 7B 02 F6 | 	mov	result1, objptr
1fd4c     00 B8 03 FF 
1fd50     00 7A 46 F5 | 	or	result1, ##124780544
1fd54     45 00 00 FF 
1fd58     FC 64 06 F1 | 	add	objptr, ##35580
1fd5c     32 7B 62 FC | 	wrlong	result1, objptr
1fd60     45 00 00 FF 
1fd64     FC 64 86 F1 | 	sub	objptr, ##35580
1fd68     32 7B 02 F6 | 	mov	result1, objptr
1fd6c     77 7A 26 F4 | 	bith	result1, #119
1fd70     45 00 00 FF 
1fd74     1C 65 06 F1 | 	add	objptr, ##35612
1fd78     32 7B 62 FC | 	wrlong	result1, objptr
1fd7c     45 00 00 FF 
1fd80     1C 65 86 F1 | 	sub	objptr, ##35612
1fd84     32 7B 02 F6 | 	mov	result1, objptr
1fd88     00 C8 03 FF 
1fd8c     00 7A 46 F5 | 	or	result1, ##126877696
1fd90     45 00 00 FF 
1fd94     10 65 06 F1 | 	add	objptr, ##35600
1fd98     32 7B 62 FC | 	wrlong	result1, objptr
1fd9c     45 00 00 FF 
1fda0     10 65 86 F1 | 	sub	objptr, ##35600
1fda4     32 7B 02 F6 | 	mov	result1, objptr
1fda8     00 D0 03 FF 
1fdac     00 7A 46 F5 | 	or	result1, ##127926272
1fdb0     45 00 00 FF 
1fdb4     14 65 06 F1 | 	add	objptr, ##35604
1fdb8     32 7B 62 FC | 	wrlong	result1, objptr
1fdbc     45 00 00 FF 
1fdc0     14 65 86 F1 | 	sub	objptr, ##35604
1fdc4     32 7B 02 F6 | 	mov	result1, objptr
1fdc8     00 D8 03 FF 
1fdcc     00 7A 46 F5 | 	or	result1, ##128974848
1fdd0     45 00 00 FF 
1fdd4     18 65 06 F1 | 	add	objptr, ##35608
1fdd8     32 7B 62 FC | 	wrlong	result1, objptr
1fddc     45 00 00 FF 
1fde0     18 65 86 F1 | 	sub	objptr, ##35608
1fde4     32 7B 02 F6 | 	mov	result1, objptr
1fde8     96 7A 26 F4 | 	bith	result1, #150
1fdec     45 00 00 FF 
1fdf0     20 65 06 F1 | 	add	objptr, ##35616
1fdf4     32 7B 62 FC | 	wrlong	result1, objptr
1fdf8     45 00 00 FF 
1fdfc     20 65 86 F1 | 	sub	objptr, ##35616
1fe00     32 7B 02 F6 | 	mov	result1, objptr
1fe04     00 E8 03 FF 
1fe08     00 7A 46 F5 | 	or	result1, ##131072000
1fe0c     45 00 00 FF 
1fe10     24 65 06 F1 | 	add	objptr, ##35620
1fe14     32 7B 62 FC | 	wrlong	result1, objptr
1fe18     45 00 00 FF 
1fe1c     24 65 86 F1 | 	sub	objptr, ##35620
1fe20     32 7B 02 F6 | 	mov	result1, objptr
1fe24     B5 7A 26 F4 | 	bith	result1, #181
1fe28     45 00 00 FF 
1fe2c     28 65 06 F1 | 	add	objptr, ##35624
1fe30     32 7B 62 FC | 	wrlong	result1, objptr
1fe34     45 00 00 FF 
1fe38     28 65 86 F1 | 	sub	objptr, ##35624
1fe3c     32 7B 02 F6 | 	mov	result1, objptr
1fe40     D4 7A 26 F4 | 	bith	result1, #212
1fe44     45 00 00 FF 
1fe48     2C 65 06 F1 | 	add	objptr, ##35628
1fe4c     32 7B 62 FC | 	wrlong	result1, objptr
1fe50     45 00 00 FF 
1fe54     2C 65 86 F1 | 	sub	objptr, ##35628
1fe58     32 7B 02 F6 | 	mov	result1, objptr
1fe5c     1B 7A 26 F4 | 	bith	result1, #27
1fe60     45 00 00 FF 
1fe64     30 65 06 F1 | 	add	objptr, ##35632
1fe68     32 7B 62 FC | 	wrlong	result1, objptr
1fe6c     45 00 00 FF 
1fe70     30 65 86 F1 | 	sub	objptr, ##35632
1fe74     32 7B 02 F6 | 	mov	result1, objptr
1fe78     00 08 04 FF 
1fe7c     00 7A 46 F5 | 	or	result1, ##135266304
1fe80     45 00 00 FF 
1fe84     34 65 06 F1 | 	add	objptr, ##35636
1fe88     32 7B 62 FC | 	wrlong	result1, objptr
1fe8c     45 00 00 FF 
1fe90     34 65 86 F1 | 	sub	objptr, ##35636
1fe94     32 7B 02 F6 | 	mov	result1, objptr
1fe98     00 10 04 FF 
1fe9c     00 7A 46 F5 | 	or	result1, ##136314880
1fea0     45 00 00 FF 
1fea4     3C 65 06 F1 | 	add	objptr, ##35644
1fea8     32 7B 62 FC | 	wrlong	result1, objptr
1feac     45 00 00 FF 
1feb0     3C 65 86 F1 | 	sub	objptr, ##35644
1feb4     32 7B 02 F6 | 	mov	result1, objptr
1feb8     00 18 04 FF 
1febc     00 7A 46 F5 | 	or	result1, ##137363456
1fec0     45 00 00 FF 
1fec4     40 65 06 F1 | 	add	objptr, ##35648
1fec8     32 7B 62 FC | 	wrlong	result1, objptr
1fecc     45 00 00 FF 
1fed0     40 65 86 F1 | 	sub	objptr, ##35648
1fed4     32 7B 02 F6 | 	mov	result1, objptr
1fed8     00 20 04 FF 
1fedc     00 7A 46 F5 | 	or	result1, ##138412032
1fee0     45 00 00 FF 
1fee4     44 65 06 F1 | 	add	objptr, ##35652
1fee8     32 7B 62 FC | 	wrlong	result1, objptr
1feec     45 00 00 FF 
1fef0     44 65 86 F1 | 	sub	objptr, ##35652
1fef4     32 7B 02 F6 | 	mov	result1, objptr
1fef8     00 28 04 FF 
1fefc     00 7A 46 F5 | 	or	result1, ##139460608
1ff00     45 00 00 FF 
1ff04     38 65 06 F1 | 	add	objptr, ##35640
1ff08     32 7B 62 FC | 	wrlong	result1, objptr
1ff0c     45 00 00 FF 
1ff10     38 65 86 F1 | 	sub	objptr, ##35640
1ff14     32 7B 02 F6 | 	mov	result1, objptr
1ff18     00 30 04 FF 
1ff1c     00 7A 46 F5 | 	or	result1, ##140509184
1ff20     45 00 00 FF 
1ff24     48 65 06 F1 | 	add	objptr, ##35656
1ff28     32 7B 62 FC | 	wrlong	result1, objptr
1ff2c     45 00 00 FF 
1ff30     48 65 86 F1 | 	sub	objptr, ##35656
1ff34     32 7B 02 F6 | 	mov	result1, objptr
1ff38     00 38 04 FF 
1ff3c     00 7A 46 F5 | 	or	result1, ##141557760
1ff40     45 00 00 FF 
1ff44     7C 65 06 F1 | 	add	objptr, ##35708
1ff48     32 7B 62 FC | 	wrlong	result1, objptr
1ff4c     45 00 00 FF 
1ff50     7C 65 86 F1 | 	sub	objptr, ##35708
1ff54     32 7B 02 F6 | 	mov	result1, objptr
1ff58     00 40 04 FF 
1ff5c     00 7A 46 F5 | 	or	result1, ##142606336
1ff60     45 00 00 FF 
1ff64     74 65 06 F1 | 	add	objptr, ##35700
1ff68     32 7B 62 FC | 	wrlong	result1, objptr
1ff6c     45 00 00 FF 
1ff70     74 65 86 F1 | 	sub	objptr, ##35700
1ff74     32 7B 02 F6 | 	mov	result1, objptr
1ff78     00 48 04 FF 
1ff7c     00 7A 46 F5 | 	or	result1, ##143654912
1ff80     45 00 00 FF 
1ff84     4C 65 06 F1 | 	add	objptr, ##35660
1ff88     32 7B 62 FC | 	wrlong	result1, objptr
1ff8c     45 00 00 FF 
1ff90     4C 65 86 F1 | 	sub	objptr, ##35660
1ff94     32 7B 02 F6 | 	mov	result1, objptr
1ff98     00 50 04 FF 
1ff9c     00 7A 46 F5 | 	or	result1, ##144703488
1ffa0     45 00 00 FF 
1ffa4     50 65 06 F1 | 	add	objptr, ##35664
1ffa8     32 7B 62 FC | 	wrlong	result1, objptr
1ffac     45 00 00 FF 
1ffb0     50 65 86 F1 | 	sub	objptr, ##35664
1ffb4     32 7B 02 F6 | 	mov	result1, objptr
1ffb8     00 58 04 FF 
1ffbc     00 7A 46 F5 | 	or	result1, ##145752064
1ffc0     45 00 00 FF 
1ffc4     6C 65 06 F1 | 	add	objptr, ##35692
1ffc8     32 7B 62 FC | 	wrlong	result1, objptr
1ffcc     45 00 00 FF 
1ffd0     6C 65 86 F1 | 	sub	objptr, ##35692
1ffd4     32 7B 02 F6 | 	mov	result1, objptr
1ffd8     00 60 04 FF 
1ffdc     00 7A 46 F5 | 	or	result1, ##146800640
1ffe0     45 00 00 FF 
1ffe4     70 65 06 F1 | 	add	objptr, ##35696
1ffe8     32 7B 62 FC | 	wrlong	result1, objptr
1ffec     45 00 00 FF 
1fff0     70 65 86 F1 | 	sub	objptr, ##35696
1fff4     32 7B 02 F6 | 	mov	result1, objptr
1fff8     00 68 04 FF 
1fffc     00 7A 46 F5 | 	or	result1, ##147849216
20000     45 00 00 FF 
20004     8C 65 06 F1 | 	add	objptr, ##35724
20008     32 7B 62 FC | 	wrlong	result1, objptr
2000c     45 00 00 FF 
20010     8C 65 86 F1 | 	sub	objptr, ##35724
20014     32 7B 02 F6 | 	mov	result1, objptr
20018     00 70 04 FF 
2001c     00 7A 46 F5 | 	or	result1, ##148897792
20020     45 00 00 FF 
20024     88 65 06 F1 | 	add	objptr, ##35720
20028     32 7B 62 FC | 	wrlong	result1, objptr
2002c     45 00 00 FF 
20030     88 65 86 F1 | 	sub	objptr, ##35720
20034     32 7B 02 F6 | 	mov	result1, objptr
20038     00 78 04 FF 
2003c     00 7A 46 F5 | 	or	result1, ##149946368
20040     45 00 00 FF 
20044     98 65 06 F1 | 	add	objptr, ##35736
20048     32 7B 62 FC | 	wrlong	result1, objptr
2004c     45 00 00 FF 
20050     98 65 86 F1 | 	sub	objptr, ##35736
20054     32 7B 02 F6 | 	mov	result1, objptr
20058     00 80 04 FF 
2005c     00 7A 46 F5 | 	or	result1, ##150994944
20060     45 00 00 FF 
20064     64 65 06 F1 | 	add	objptr, ##35684
20068     32 7B 62 FC | 	wrlong	result1, objptr
2006c     45 00 00 FF 
20070     64 65 86 F1 | 	sub	objptr, ##35684
20074     32 7B 02 F6 | 	mov	result1, objptr
20078     00 88 04 FF 
2007c     00 7A 46 F5 | 	or	result1, ##152043520
20080     45 00 00 FF 
20084     94 65 06 F1 | 	add	objptr, ##35732
20088     32 7B 62 FC | 	wrlong	result1, objptr
2008c     45 00 00 FF 
20090     94 65 86 F1 | 	sub	objptr, ##35732
20094     32 7B 02 F6 | 	mov	result1, objptr
20098     00 90 04 FF 
2009c     00 7A 46 F5 | 	or	result1, ##153092096
200a0     45 00 00 FF 
200a4     84 65 06 F1 | 	add	objptr, ##35716
200a8     32 7B 62 FC | 	wrlong	result1, objptr
200ac     45 00 00 FF 
200b0     84 65 86 F1 | 	sub	objptr, ##35716
200b4     32 7B 02 F6 | 	mov	result1, objptr
200b8     00 98 04 FF 
200bc     00 7A 46 F5 | 	or	result1, ##154140672
200c0     44 00 00 FF 
200c4     34 65 06 F1 | 	add	objptr, ##35124
200c8     32 7B 62 FC | 	wrlong	result1, objptr
200cc     44 00 00 FF 
200d0     34 65 86 F1 | 	sub	objptr, ##35124
200d4     32 7B 02 F6 | 	mov	result1, objptr
200d8     00 A0 04 FF 
200dc     00 7A 46 F5 | 	or	result1, ##155189248
200e0     45 00 00 FF 
200e4     54 65 06 F1 | 	add	objptr, ##35668
200e8     32 7B 62 FC | 	wrlong	result1, objptr
200ec     45 00 00 FF 
200f0     54 65 86 F1 | 	sub	objptr, ##35668
200f4     32 7B 02 F6 | 	mov	result1, objptr
200f8     00 08 01 FF 
200fc     00 7A 46 F5 | 	or	result1, ##34603008
20100     45 00 00 FF 
20104     5C 65 06 F1 | 	add	objptr, ##35676
20108     32 7B 62 FC | 	wrlong	result1, objptr
2010c     45 00 00 FF 
20110     5C 65 86 F1 | 	sub	objptr, ##35676
20114     32 7B 02 F6 | 	mov	result1, objptr
20118     00 A8 04 FF 
2011c     00 7A 46 F5 | 	or	result1, ##156237824
20120     45 00 00 FF 
20124     58 65 06 F1 | 	add	objptr, ##35672
20128     32 7B 62 FC | 	wrlong	result1, objptr
2012c     45 00 00 FF 
20130     58 65 86 F1 | 	sub	objptr, ##35672
20134     32 7B 02 F6 | 	mov	result1, objptr
20138     00 B0 04 FF 
2013c     00 7A 46 F5 | 	or	result1, ##157286400
20140     45 00 00 FF 
20144     9C 65 06 F1 | 	add	objptr, ##35740
20148     32 7B 62 FC | 	wrlong	result1, objptr
2014c     45 00 00 FF 
20150     9C 65 86 F1 | 	sub	objptr, ##35740
20154     32 7B 02 F6 | 	mov	result1, objptr
20158     00 B8 04 FF 
2015c     00 7A 46 F5 | 	or	result1, ##158334976
20160     45 00 00 FF 
20164     A0 65 06 F1 | 	add	objptr, ##35744
20168     32 7B 62 FC | 	wrlong	result1, objptr
2016c     45 00 00 FF 
20170     A0 65 86 F1 | 	sub	objptr, ##35744
20174     32 7B 02 F6 | 	mov	result1, objptr
20178     00 C0 04 FF 
2017c     00 7A 46 F5 | 	or	result1, ##159383552
20180     45 00 00 FF 
20184     A4 65 06 F1 | 	add	objptr, ##35748
20188     32 7B 62 FC | 	wrlong	result1, objptr
2018c     45 00 00 FF 
20190     A4 65 86 F1 | 	sub	objptr, ##35748
20194     32 7B 02 F6 | 	mov	result1, objptr
20198     00 C8 04 FF 
2019c     00 7A 46 F5 | 	or	result1, ##160432128
201a0     45 00 00 FF 
201a4     A8 65 06 F1 | 	add	objptr, ##35752
201a8     32 7B 62 FC | 	wrlong	result1, objptr
201ac     45 00 00 FF 
201b0     A8 65 86 F1 | 	sub	objptr, ##35752
201b4     32 7B 02 F6 | 	mov	result1, objptr
201b8     00 D0 04 FF 
201bc     00 7A 46 F5 | 	or	result1, ##161480704
201c0     45 00 00 FF 
201c4     B0 65 06 F1 | 	add	objptr, ##35760
201c8     32 7B 62 FC | 	wrlong	result1, objptr
201cc     45 00 00 FF 
201d0     B0 65 86 F1 | 	sub	objptr, ##35760
201d4     32 7B 02 F6 | 	mov	result1, objptr
201d8     00 D8 04 FF 
201dc     00 7A 46 F5 | 	or	result1, ##162529280
201e0     45 00 00 FF 
201e4     B4 65 06 F1 | 	add	objptr, ##35764
201e8     32 7B 62 FC | 	wrlong	result1, objptr
201ec     45 00 00 FF 
201f0     B4 65 86 F1 | 	sub	objptr, ##35764
201f4     32 7B 02 F6 | 	mov	result1, objptr
201f8     00 E0 04 FF 
201fc     00 7A 46 F5 | 	or	result1, ##163577856
20200     45 00 00 FF 
20204     B8 65 06 F1 | 	add	objptr, ##35768
20208     32 7B 62 FC | 	wrlong	result1, objptr
2020c     45 00 00 FF 
20210     B8 65 86 F1 | 	sub	objptr, ##35768
20214     32 7B 02 F6 | 	mov	result1, objptr
20218     00 E8 04 FF 
2021c     00 7A 46 F5 | 	or	result1, ##164626432
20220     45 00 00 FF 
20224     D8 65 06 F1 | 	add	objptr, ##35800
20228     32 7B 62 FC | 	wrlong	result1, objptr
2022c     45 00 00 FF 
20230     D8 65 86 F1 | 	sub	objptr, ##35800
20234     32 7B 02 F6 | 	mov	result1, objptr
20238     00 F0 04 FF 
2023c     00 7A 46 F5 | 	or	result1, ##165675008
20240     45 00 00 FF 
20244     D4 65 06 F1 | 	add	objptr, ##35796
20248     32 7B 62 FC | 	wrlong	result1, objptr
2024c     45 00 00 FF 
20250     D4 65 86 F1 | 	sub	objptr, ##35796
20254     32 7B 02 F6 | 	mov	result1, objptr
20258     00 F8 04 FF 
2025c     00 7A 46 F5 | 	or	result1, ##166723584
20260     45 00 00 FF 
20264     90 65 06 F1 | 	add	objptr, ##35728
20268     32 7B 62 FC | 	wrlong	result1, objptr
2026c     45 00 00 FF 
20270     90 65 86 F1 | 	sub	objptr, ##35728
20274     32 7B 02 F6 | 	mov	result1, objptr
20278     00 00 05 FF 
2027c     00 7A 46 F5 | 	or	result1, ##167772160
20280     45 00 00 FF 
20284     80 65 06 F1 | 	add	objptr, ##35712
20288     32 7B 62 FC | 	wrlong	result1, objptr
2028c     45 00 00 FF 
20290     80 65 86 F1 | 	sub	objptr, ##35712
20294     32 7B 02 F6 | 	mov	result1, objptr
20298     00 08 05 FF 
2029c     00 7A 46 F5 | 	or	result1, ##168820736
202a0     45 00 00 FF 
202a4     BC 65 06 F1 | 	add	objptr, ##35772
202a8     32 7B 62 FC | 	wrlong	result1, objptr
202ac     45 00 00 FF 
202b0     BC 65 86 F1 | 	sub	objptr, ##35772
202b4     32 7B 02 F6 | 	mov	result1, objptr
202b8     00 10 05 FF 
202bc     00 7A 46 F5 | 	or	result1, ##169869312
202c0     45 00 00 FF 
202c4     C0 65 06 F1 | 	add	objptr, ##35776
202c8     32 7B 62 FC | 	wrlong	result1, objptr
202cc     45 00 00 FF 
202d0     C0 65 86 F1 | 	sub	objptr, ##35776
202d4     32 7B 02 F6 | 	mov	result1, objptr
202d8     00 18 05 FF 
202dc     00 7A 46 F5 | 	or	result1, ##170917888
202e0     45 00 00 FF 
202e4     C4 65 06 F1 | 	add	objptr, ##35780
202e8     32 7B 62 FC | 	wrlong	result1, objptr
202ec     45 00 00 FF 
202f0     C4 65 86 F1 | 	sub	objptr, ##35780
202f4     32 7B 02 F6 | 	mov	result1, objptr
202f8     00 20 05 FF 
202fc     00 7A 46 F5 | 	or	result1, ##171966464
20300     45 00 00 FF 
20304     C8 65 06 F1 | 	add	objptr, ##35784
20308     32 7B 62 FC | 	wrlong	result1, objptr
2030c     45 00 00 FF 
20310     C8 65 86 F1 | 	sub	objptr, ##35784
20314     32 7B 02 F6 | 	mov	result1, objptr
20318     00 28 05 FF 
2031c     00 7A 46 F5 | 	or	result1, ##173015040
20320     45 00 00 FF 
20324     CC 65 06 F1 | 	add	objptr, ##35788
20328     32 7B 62 FC | 	wrlong	result1, objptr
2032c     45 00 00 FF 
20330     CC 65 86 F1 | 	sub	objptr, ##35788
20334     32 7B 02 F6 | 	mov	result1, objptr
20338     00 30 05 FF 
2033c     00 7A 46 F5 | 	or	result1, ##174063616
20340     45 00 00 FF 
20344     E4 65 06 F1 | 	add	objptr, ##35812
20348     32 7B 62 FC | 	wrlong	result1, objptr
2034c     45 00 00 FF 
20350     E4 65 86 F1 | 	sub	objptr, ##35812
20354     32 7B 02 F6 | 	mov	result1, objptr
20358     00 38 05 FF 
2035c     00 7A 46 F5 | 	or	result1, ##175112192
20360     45 00 00 FF 
20364     D0 65 06 F1 | 	add	objptr, ##35792
20368     32 7B 62 FC | 	wrlong	result1, objptr
2036c     45 00 00 FF 
20370     D0 65 86 F1 | 	sub	objptr, ##35792
20374     32 7B 02 F6 | 	mov	result1, objptr
20378     00 40 05 FF 
2037c     00 7A 46 F5 | 	or	result1, ##176160768
20380     45 00 00 FF 
20384     DC 65 06 F1 | 	add	objptr, ##35804
20388     32 7B 62 FC | 	wrlong	result1, objptr
2038c     45 00 00 FF 
20390     DC 65 86 F1 | 	sub	objptr, ##35804
20394     32 7B 02 F6 | 	mov	result1, objptr
20398     00 48 05 FF 
2039c     00 7A 46 F5 | 	or	result1, ##177209344
203a0     45 00 00 FF 
203a4     E0 65 06 F1 | 	add	objptr, ##35808
203a8     32 7B 62 FC | 	wrlong	result1, objptr
203ac     45 00 00 FF 
203b0     E0 65 86 F1 | 	sub	objptr, ##35808
203b4     32 7B 02 F6 | 	mov	result1, objptr
203b8     00 50 05 FF 
203bc     00 7A 46 F5 | 	or	result1, ##178257920
203c0     45 00 00 FF 
203c4     E8 65 06 F1 | 	add	objptr, ##35816
203c8     32 7B 62 FC | 	wrlong	result1, objptr
203cc     45 00 00 FF 
203d0     E8 65 86 F1 | 	sub	objptr, ##35816
203d4     32 7B 02 F6 | 	mov	result1, objptr
203d8     00 58 05 FF 
203dc     00 7A 46 F5 | 	or	result1, ##179306496
203e0     45 00 00 FF 
203e4     EC 65 06 F1 | 	add	objptr, ##35820
203e8     32 7B 62 FC | 	wrlong	result1, objptr
203ec     45 00 00 FF 
203f0     EC 65 86 F1 | 	sub	objptr, ##35820
203f4     32 7B 02 F6 | 	mov	result1, objptr
203f8     00 60 05 FF 
203fc     00 7A 46 F5 | 	or	result1, ##180355072
20400     45 00 00 FF 
20404     04 65 06 F1 | 	add	objptr, ##35588
20408     32 7B 62 FC | 	wrlong	result1, objptr
2040c     45 00 00 FF 
20410     04 65 86 F1 | 	sub	objptr, ##35588
20414                 | _init_commands_ret
20414     2D 00 64 FD | 	ret
20418                 | 
20418                 | ' 
20418                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
20418                 | ' 
20418                 | ' sub init_audio
20418                 | _init_audio
20418     07 CA 05 F6 | 	mov	COUNT_, #7
2041c     E8 00 A0 FD | 	call	#pushregs_
20420     00 C0 1F FF 
20424     00 A6 06 F6 | 	mov	local01, ##1065353216
20428                 | ' 
20428                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
20428     00 A8 06 F6 | 	mov	local02, #0
2042c                 | LR__2610
2042c     54 AB 02 F6 | 	mov	local03, local02
20430     01 AA 66 F0 | 	shl	local03, #1
20434     58 7F 23 FF 
20438     00 AC 06 F6 | 	mov	local04, ##1191096320
2043c     54 93 52 F6 | 	abs	arg01, local02 wc
20440     1F AE C6 C9 |  if_b	decod	local05, #31
20444     00 AE 06 36 |  if_ae	mov	local05, #0
20448     38 68 B0 FD | 	call	#__system___float_fromuns
2044c     57 7B 62 F5 | 	xor	result1, local05
20450     3D 93 02 F6 | 	mov	arg01, result1
20454     87 24 20 FF 
20458     DB 95 06 F6 | 	mov	arg02, ##1078530011
2045c     28 6C B0 FD | 	call	#__system___float_mul
20460     3D 93 02 F6 | 	mov	arg01, result1
20464     00 00 22 FF 
20468     00 94 06 F6 | 	mov	arg02, ##1140850688
2046c     1C 6E B0 FD | 	call	#__system___float_div
20470     3D 93 02 F6 | 	mov	arg01, result1
20474     80 75 B0 FD | 	call	#__system____builtin_sinf
20478     3D 95 02 F6 | 	mov	arg02, result1
2047c     56 93 02 F6 | 	mov	arg01, local04
20480     04 6C B0 FD | 	call	#__system___float_mul
20484     3D 93 02 F6 | 	mov	arg01, result1
20488     01 94 06 F6 | 	mov	arg02, #1
2048c     C0 70 B0 FD | 	call	#__system___float_tointeger
20490     3D 95 02 F6 | 	mov	arg02, result1
20494     55 93 02 F6 | 	mov	arg01, local03
20498     84 0D B0 FD | 	call	#_psdpoke
2049c     01 A8 06 F1 | 	add	local02, #1
204a0     02 00 00 FF 
204a4     00 A8 56 F2 | 	cmps	local02, ##1024 wc
204a8     80 FF 9F CD |  if_b	jmp	#LR__2610
204ac                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
204ac     00 A8 06 F6 | 	mov	local02, #0
204b0                 | LR__2611
204b0     54 95 02 F6 | 	mov	arg02, local02
204b4     01 94 66 F0 | 	shl	arg02, #1
204b8     0B 92 C6 F9 | 	decod	arg01, #11
204bc     4A 93 02 F1 | 	add	arg01, arg02
204c0     54 AD 02 F6 | 	mov	local04, local02
204c4     07 AC 66 F0 | 	shl	local04, #7
204c8     54 AD 82 F1 | 	sub	local04, local02
204cc     C0 FF 7F FF 
204d0     00 95 06 F6 | 	mov	arg02, ##-32512
204d4     56 95 02 F1 | 	add	arg02, local04
204d8     44 0D B0 FD | 	call	#_psdpoke
204dc     09 AC C6 F9 | 	decod	local04, #9
204e0     54 AD 02 F1 | 	add	local04, local02
204e4     01 AC 66 F0 | 	shl	local04, #1
204e8     0B 92 C6 F9 | 	decod	arg01, #11
204ec     56 93 02 F1 | 	add	arg01, local04
204f0     54 AF 02 F6 | 	mov	local05, local02
204f4     07 AE 66 F0 | 	shl	local05, #7
204f8     54 AF 82 F1 | 	sub	local05, local02
204fc     3F 00 00 FF 
20500     00 95 06 F6 | 	mov	arg02, ##32512
20504     57 95 82 F1 | 	sub	arg02, local05
20508     14 0D B0 FD | 	call	#_psdpoke
2050c     01 A8 06 F1 | 	add	local02, #1
20510     01 00 00 FF 
20514     00 A8 56 F2 | 	cmps	local02, ##512 wc
20518     94 FF 9F CD |  if_b	jmp	#LR__2611
2051c                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
2051c     00 A8 06 F6 | 	mov	local02, #0
20520                 | LR__2612
20520     54 AF 02 F6 | 	mov	local05, local02
20524     01 AE 66 F0 | 	shl	local05, #1
20528     0C 92 C6 F9 | 	decod	arg01, #12
2052c     57 93 02 F1 | 	add	arg01, local05
20530     54 AF 02 F6 | 	mov	local05, local02
20534     06 AE 66 F0 | 	shl	local05, #6
20538     54 AF 82 F1 | 	sub	local05, local02
2053c     C1 FF 7F FF 
20540     00 94 06 F6 | 	mov	arg02, ##-32256
20544     57 95 02 F1 | 	add	arg02, local05
20548     D4 0C B0 FD | 	call	#_psdpoke
2054c     01 A8 06 F1 | 	add	local02, #1
20550     02 00 00 FF 
20554     00 A8 56 F2 | 	cmps	local02, ##1024 wc
20558     C4 FF 9F CD |  if_b	jmp	#LR__2612
2055c                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
2055c     00 A8 06 F6 | 	mov	local02, #0
20560                 | LR__2613
20560     54 95 02 F6 | 	mov	arg02, local02
20564     01 94 66 F0 | 	shl	arg02, #1
20568     0C 00 00 FF 
2056c     00 92 06 F6 | 	mov	arg01, ##6144
20570     4A 93 02 F1 | 	add	arg01, arg02
20574     C0 FF 7F FF 
20578     A8 94 06 F6 | 	mov	arg02, ##-32600
2057c     A0 0C B0 FD | 	call	#_psdpoke
20580     01 A8 06 F1 | 	add	local02, #1
20584     80 A8 56 F2 | 	cmps	local02, #128 wc
20588     D4 FF 9F CD |  if_b	jmp	#LR__2613
2058c     80 A8 06 F6 | 	mov	local02, #128
20590                 | LR__2614
20590     54 95 02 F6 | 	mov	arg02, local02
20594     01 94 66 F0 | 	shl	arg02, #1
20598     0C 00 00 FF 
2059c     00 92 06 F6 | 	mov	arg01, ##6144
205a0     4A 93 02 F1 | 	add	arg01, arg02
205a4     3F 00 00 FF 
205a8     58 95 06 F6 | 	mov	arg02, ##32600
205ac     70 0C B0 FD | 	call	#_psdpoke
205b0     01 A8 06 F1 | 	add	local02, #1
205b4     02 00 00 FF 
205b8     00 A8 16 F2 | 	cmp	local02, ##1024 wc
205bc     D0 FF 9F CD |  if_b	jmp	#LR__2614
205c0                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
205c0     00 A8 06 F6 | 	mov	local02, #0
205c4                 | LR__2615
205c4     54 95 02 F6 | 	mov	arg02, local02
205c8     01 94 66 F0 | 	shl	arg02, #1
205cc     0D 92 C6 F9 | 	decod	arg01, #13
205d0     4A 93 02 F1 | 	add	arg01, arg02
205d4     C0 FF 7F FF 
205d8     A8 94 06 F6 | 	mov	arg02, ##-32600
205dc     40 0C B0 FD | 	call	#_psdpoke
205e0     01 A8 06 F1 | 	add	local02, #1
205e4     01 00 00 FF 
205e8     00 A8 56 F2 | 	cmps	local02, ##512 wc
205ec     D4 FF 9F CD |  if_b	jmp	#LR__2615
205f0     09 A8 C6 F9 | 	decod	local02, #9
205f4                 | LR__2616
205f4     54 95 02 F6 | 	mov	arg02, local02
205f8     01 94 66 F0 | 	shl	arg02, #1
205fc     0D 92 C6 F9 | 	decod	arg01, #13
20600     4A 93 02 F1 | 	add	arg01, arg02
20604     3F 00 00 FF 
20608     58 95 06 F6 | 	mov	arg02, ##32600
2060c     10 0C B0 FD | 	call	#_psdpoke
20610     01 A8 06 F1 | 	add	local02, #1
20614     02 00 00 FF 
20618     00 A8 16 F2 | 	cmp	local02, ##1024 wc
2061c     D4 FF 9F CD |  if_b	jmp	#LR__2616
20620                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
20620     00 A8 06 F6 | 	mov	local02, #0
20624                 | LR__2617
20624     54 95 02 F6 | 	mov	arg02, local02
20628     01 94 66 F0 | 	shl	arg02, #1
2062c     14 00 00 FF 
20630     00 92 06 F6 | 	mov	arg01, ##10240
20634     4A 93 02 F1 | 	add	arg01, arg02
20638     C0 FF 7F FF 
2063c     A8 94 06 F6 | 	mov	arg02, ##-32600
20640     DC 0B B0 FD | 	call	#_psdpoke
20644     01 A8 06 F1 | 	add	local02, #1
20648     00 A9 56 F2 | 	cmps	local02, #256 wc
2064c     D4 FF 9F CD |  if_b	jmp	#LR__2617
20650     00 A9 06 F6 | 	mov	local02, #256
20654                 | LR__2618
20654     54 95 02 F6 | 	mov	arg02, local02
20658     01 94 66 F0 | 	shl	arg02, #1
2065c     14 00 00 FF 
20660     00 92 06 F6 | 	mov	arg01, ##10240
20664     4A 93 02 F1 | 	add	arg01, arg02
20668     3F 00 00 FF 
2066c     58 95 06 F6 | 	mov	arg02, ##32600
20670     AC 0B B0 FD | 	call	#_psdpoke
20674     01 A8 06 F1 | 	add	local02, #1
20678     02 00 00 FF 
2067c     00 A8 16 F2 | 	cmp	local02, ##1024 wc
20680     D0 FF 9F CD |  if_b	jmp	#LR__2618
20684                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
20684     18 00 00 FF 
20688     00 A8 06 F6 | 	mov	local02, ##12288
2068c                 | LR__2619
2068c     54 93 02 F6 | 	mov	arg01, local02
20690     00 94 06 F6 | 	mov	arg02, #0
20694     40 0B B0 FD | 	call	#_pslpoke
20698     04 A8 06 F1 | 	add	local02, #4
2069c     77 00 00 FF 
206a0     FD A9 56 F2 | 	cmps	local02, ##61437 wc
206a4     E4 FF 9F CD |  if_b	jmp	#LR__2619
206a8                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
206a8     00 A8 06 F6 | 	mov	local02, #0
206ac                 | LR__2620
206ac     54 95 02 F6 | 	mov	arg02, local02
206b0     01 94 66 F0 | 	shl	arg02, #1
206b4     78 00 00 FF 
206b8     00 AA 06 F6 | 	mov	local03, ##61440
206bc     4A AB 02 F1 | 	add	local03, arg02
206c0     35 93 02 F6 | 	mov	arg01, ptr__dat__
206c4     12 00 00 FF 
206c8     CA 92 06 F1 | 	add	arg01, ##9418
206cc     54 95 02 F6 | 	mov	arg02, local02
206d0     01 94 66 F0 | 	shl	arg02, #1
206d4     4A 93 02 F1 | 	add	arg01, arg02
206d8     49 95 E2 FA | 	rdword	arg02, arg01
206dc     55 93 02 F6 | 	mov	arg01, local03
206e0     3C 0B B0 FD | 	call	#_psdpoke
206e4     01 A8 06 F1 | 	add	local02, #1
206e8     02 00 00 FF 
206ec     00 A8 56 F2 | 	cmps	local02, ##1024 wc
206f0     B8 FF 9F CD |  if_b	jmp	#LR__2620
206f4                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
206f4     00 A8 06 F6 | 	mov	local02, #0
206f8                 | LR__2621
206f8     54 95 02 F6 | 	mov	arg02, local02
206fc     01 94 66 F0 | 	shl	arg02, #1
20700     7C 00 00 FF 
20704     00 AA 06 F6 | 	mov	local03, ##63488
20708     4A AB 02 F1 | 	add	local03, arg02
2070c     35 93 02 F6 | 	mov	arg01, ptr__dat__
20710     0E 00 00 FF 
20714     BA 92 06 F1 | 	add	arg01, ##7354
20718     54 95 02 F6 | 	mov	arg02, local02
2071c     01 94 66 F0 | 	shl	arg02, #1
20720     4A 93 02 F1 | 	add	arg01, arg02
20724     49 95 E2 FA | 	rdword	arg02, arg01
20728     55 93 02 F6 | 	mov	arg01, local03
2072c     F0 0A B0 FD | 	call	#_psdpoke
20730     01 A8 06 F1 | 	add	local02, #1
20734     02 00 00 FF 
20738     00 A8 56 F2 | 	cmps	local02, ##1024 wc
2073c     B8 FF 9F CD |  if_b	jmp	#LR__2621
20740                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
20740     00 A8 06 F6 | 	mov	local02, #0
20744     0D 00 00 FF 
20748     D8 64 06 F1 | 	add	objptr, ##6872
2074c     D7 18 48 FB | 	callpa	#(@LR__2623-@LR__2622)>>2,fcache_load_ptr_
20750                 | LR__2622
20750     54 AB 02 F6 | 	mov	local03, local02
20754     01 AA 66 F0 | 	shl	local03, #1
20758     32 AB 02 F1 | 	add	local03, objptr
2075c     54 B1 02 F6 | 	mov	local06, local02
20760     08 B0 66 F0 | 	shl	local06, #8
20764     7F 00 00 FF 
20768     00 B3 06 F6 | 	mov	local07, ##65280
2076c     58 B3 82 F1 | 	sub	local07, local06
20770     55 B3 52 FC | 	wrword	local07, local03
20774     01 A8 06 F1 | 	add	local02, #1
20778     00 A9 56 F2 | 	cmps	local02, #256 wc
2077c     D0 FF 9F CD |  if_b	jmp	#LR__2622
20780                 | LR__2623
20780     0D 00 00 FF 
20784     D8 64 86 F1 | 	sub	objptr, ##6872
20788                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
20788     00 A8 06 F6 | 	mov	local02, #0
2078c                 | LR__2624
2078c     54 AB 02 F6 | 	mov	local03, local02
20790     01 AA 66 F0 | 	shl	local03, #1
20794     32 AF 02 F6 | 	mov	local05, objptr
20798     0E 00 00 FF 
2079c     D8 AE 06 F1 | 	add	local05, ##7384
207a0     57 AB 02 F1 | 	add	local03, local05
207a4     80 BF 23 FF 
207a8     00 92 06 F6 | 	mov	arg01, ##1199505408
207ac     53 95 02 F6 | 	mov	arg02, local01
207b0     D4 68 B0 FD | 	call	#__system___float_mul
207b4     3D 93 02 F6 | 	mov	arg01, result1
207b8     01 94 06 F6 | 	mov	arg02, #1
207bc     90 6D B0 FD | 	call	#__system___float_tointeger
207c0     55 7B 52 FC | 	wrword	result1, local03
207c4     53 93 02 F6 | 	mov	arg01, local01
207c8     CC BC 1F FF 
207cc     9A 95 06 F6 | 	mov	arg02, ##1064933786
207d0     B4 68 B0 FD | 	call	#__system___float_mul
207d4     3D A7 02 F6 | 	mov	local01, result1
207d8     01 A8 06 F1 | 	add	local02, #1
207dc     00 A9 56 F2 | 	cmps	local02, #256 wc
207e0     A8 FF 9F CD |  if_b	jmp	#LR__2624
207e4     0F 00 00 FF 
207e8     D6 64 06 F1 | 	add	objptr, ##7894
207ec     32 01 58 FC | 	wrword	#0, objptr
207f0                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
207f0     00 A8 06 F6 | 	mov	local02, #0
207f4     02 64 06 F1 | 	add	objptr, #2
207f8     D7 10 48 FB | 	callpa	#(@LR__2626-@LR__2625)>>2,fcache_load_ptr_
207fc                 | LR__2625
207fc     54 AB 02 F6 | 	mov	local03, local02
20800     01 AA 66 F0 | 	shl	local03, #1
20804     32 AB 02 F1 | 	add	local03, objptr
20808     7F 00 80 FF 
2080c     55 01 5A FC | 	wrword	##65280, local03
20810     01 A8 06 F1 | 	add	local02, #1
20814     FF A8 56 F2 | 	cmps	local02, #255 wc
20818     E0 FF 9F CD |  if_b	jmp	#LR__2625
2081c                 | LR__2626
2081c     FE 65 06 F1 | 	add	objptr, #510
20820     32 01 58 FC | 	wrword	#0, objptr
20824                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
20824     00 A8 06 F6 | 	mov	local02, #0
20828     02 64 06 F1 | 	add	objptr, #2
2082c     D7 12 48 FB | 	callpa	#(@LR__2628-@LR__2627)>>2,fcache_load_ptr_
20830                 | LR__2627
20830     54 AB 02 F6 | 	mov	local03, local02
20834     01 AA 66 F0 | 	shl	local03, #1
20838     32 AB 02 F1 | 	add	local03, objptr
2083c     54 B3 02 F6 | 	mov	local07, local02
20840     0C B2 66 F0 | 	shl	local07, #12
20844     55 B3 52 FC | 	wrword	local07, local03
20848     01 A8 06 F1 | 	add	local02, #1
2084c     10 A8 56 F2 | 	cmps	local02, #16 wc
20850     DC FF 9F CD |  if_b	jmp	#LR__2627
20854                 | LR__2628
20854                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
20854     10 A8 06 F6 | 	mov	local02, #16
20858     D7 10 48 FB | 	callpa	#(@LR__2630-@LR__2629)>>2,fcache_load_ptr_
2085c                 | LR__2629
2085c     54 AB 02 F6 | 	mov	local03, local02
20860     01 AA 66 F0 | 	shl	local03, #1
20864     32 AB 02 F1 | 	add	local03, objptr
20868     7F 00 80 FF 
2086c     55 01 5A FC | 	wrword	##65280, local03
20870     01 A8 06 F1 | 	add	local02, #1
20874     F0 A8 16 F2 | 	cmp	local02, #240 wc
20878     E0 FF 9F CD |  if_b	jmp	#LR__2629
2087c                 | LR__2630
2087c                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
2087c     F0 A8 06 F6 | 	mov	local02, #240
20880     D7 14 48 FB | 	callpa	#(@LR__2632-@LR__2631)>>2,fcache_load_ptr_
20884                 | LR__2631
20884     54 AB 02 F6 | 	mov	local03, local02
20888     01 AA 66 F0 | 	shl	local03, #1
2088c     32 AB 02 F1 | 	add	local03, objptr
20890     FF B0 06 F6 | 	mov	local06, #255
20894     54 B1 82 F1 | 	sub	local06, local02
20898     0C B0 66 F0 | 	shl	local06, #12
2089c     55 B1 52 FC | 	wrword	local06, local03
208a0     01 A8 06 F1 | 	add	local02, #1
208a4     00 A9 16 F2 | 	cmp	local02, #256 wc
208a8     D8 FF 9F CD |  if_b	jmp	#LR__2631
208ac                 | LR__2632
208ac                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
208ac     00 A8 06 F6 | 	mov	local02, #0
208b0     01 00 00 FF 
208b4     00 64 06 F1 | 	add	objptr, ##512
208b8     D7 12 48 FB | 	callpa	#(@LR__2634-@LR__2633)>>2,fcache_load_ptr_
208bc                 | LR__2633
208bc     54 AB 02 F6 | 	mov	local03, local02
208c0     01 AA 66 F0 | 	shl	local03, #1
208c4     32 AB 02 F1 | 	add	local03, objptr
208c8     54 B3 02 F6 | 	mov	local07, local02
208cc     08 B2 66 F0 | 	shl	local07, #8
208d0     55 B3 52 FC | 	wrword	local07, local03
208d4     01 A8 06 F1 | 	add	local02, #1
208d8     00 A9 56 F2 | 	cmps	local02, #256 wc
208dc     DC FF 9F CD |  if_b	jmp	#LR__2633
208e0                 | LR__2634
208e0     FE 65 06 F1 | 	add	objptr, #510
208e4     32 01 58 FC | 	wrword	#0, objptr
208e8                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
208e8     00 A8 06 F6 | 	mov	local02, #0
208ec     02 64 06 F1 | 	add	objptr, #2
208f0     D7 16 48 FB | 	callpa	#(@LR__2636-@LR__2635)>>2,fcache_load_ptr_
208f4                 | LR__2635
208f4     54 AB 02 F6 | 	mov	local03, local02
208f8     01 AA 66 F0 | 	shl	local03, #1
208fc     32 AB 02 F1 | 	add	local03, objptr
20900     54 B3 02 F6 | 	mov	local07, local02
20904     04 B2 66 F0 | 	shl	local07, #4
20908     54 B3 02 F1 | 	add	local07, local02
2090c     04 B2 66 F0 | 	shl	local07, #4
20910     55 B3 52 FC | 	wrword	local07, local03
20914     01 A8 06 F1 | 	add	local02, #1
20918     F0 A8 56 F2 | 	cmps	local02, #240 wc
2091c     D4 FF 9F CD |  if_b	jmp	#LR__2635
20920                 | LR__2636
20920     F0 A8 06 F6 | 	mov	local02, #240
20924     D7 14 48 FB | 	callpa	#(@LR__2638-@LR__2637)>>2,fcache_load_ptr_
20928                 | LR__2637
20928     54 AB 02 F6 | 	mov	local03, local02
2092c     01 AA 66 F0 | 	shl	local03, #1
20930     32 AB 02 F1 | 	add	local03, objptr
20934     FF B0 06 F6 | 	mov	local06, #255
20938     54 B1 82 F1 | 	sub	local06, local02
2093c     0C B0 66 F0 | 	shl	local06, #12
20940     55 B1 52 FC | 	wrword	local06, local03
20944     01 A8 06 F1 | 	add	local02, #1
20948     00 A9 16 F2 | 	cmp	local02, #256 wc
2094c     D8 FF 9F CD |  if_b	jmp	#LR__2637
20950                 | LR__2638
20950                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
20950     00 A8 06 F6 | 	mov	local02, #0
20954     01 00 00 FF 
20958     00 64 06 F1 | 	add	objptr, ##512
2095c     D7 20 48 FB | 	callpa	#(@LR__2640-@LR__2639)>>2,fcache_load_ptr_
20960                 | LR__2639
20960     54 AB 02 F6 | 	mov	local03, local02
20964     01 AA 66 F0 | 	shl	local03, #1
20968     32 AB 02 F1 | 	add	local03, objptr
2096c     54 B3 02 F6 | 	mov	local07, local02
20970     09 B2 66 F0 | 	shl	local07, #9
20974     55 B3 52 FC | 	wrword	local07, local03
20978     FF AA 06 F6 | 	mov	local03, #255
2097c     54 AB 82 F1 | 	sub	local03, local02
20980     01 AA 66 F0 | 	shl	local03, #1
20984     32 AB 02 F1 | 	add	local03, objptr
20988     54 B3 02 F6 | 	mov	local07, local02
2098c     09 B2 66 F0 | 	shl	local07, #9
20990     55 B3 52 FC | 	wrword	local07, local03
20994     01 A8 06 F1 | 	add	local02, #1
20998     80 A8 56 F2 | 	cmps	local02, #128 wc
2099c     C0 FF 9F CD |  if_b	jmp	#LR__2639
209a0                 | LR__2640
209a0                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
209a0     00 A8 06 F6 | 	mov	local02, #0
209a4     01 00 00 FF 
209a8     00 64 06 F1 | 	add	objptr, ##512
209ac     D7 12 48 FB | 	callpa	#(@LR__2642-@LR__2641)>>2,fcache_load_ptr_
209b0                 | LR__2641
209b0     54 AB 02 F6 | 	mov	local03, local02
209b4     01 AA 66 F0 | 	shl	local03, #1
209b8     32 AB 02 F1 | 	add	local03, objptr
209bc     54 B3 02 F6 | 	mov	local07, local02
209c0     0D B2 66 F0 | 	shl	local07, #13
209c4     55 B3 52 FC | 	wrword	local07, local03
209c8     01 A8 06 F1 | 	add	local02, #1
209cc     08 A8 56 F2 | 	cmps	local02, #8 wc
209d0     DC FF 9F CD |  if_b	jmp	#LR__2641
209d4                 | LR__2642
209d4                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
209d4     08 A8 06 F6 | 	mov	local02, #8
209d8     D7 1A 48 FB | 	callpa	#(@LR__2644-@LR__2643)>>2,fcache_load_ptr_
209dc                 | LR__2643
209dc     54 AB 02 F6 | 	mov	local03, local02
209e0     01 AA 66 F0 | 	shl	local03, #1
209e4     32 AB 02 F1 | 	add	local03, objptr
209e8     54 AF 02 F6 | 	mov	local05, local02
209ec     08 AE 86 F1 | 	sub	local05, #8
209f0     0B AE 66 F0 | 	shl	local05, #11
209f4     7F 00 00 FF 
209f8     00 B3 06 F6 | 	mov	local07, ##65280
209fc     57 B3 82 F1 | 	sub	local07, local05
20a00     55 B3 52 FC | 	wrword	local07, local03
20a04     01 A8 06 F1 | 	add	local02, #1
20a08     18 A8 16 F2 | 	cmp	local02, #24 wc
20a0c     CC FF 9F CD |  if_b	jmp	#LR__2643
20a10                 | LR__2644
20a10                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
20a10     18 A8 06 F6 | 	mov	local02, #24
20a14     D7 10 48 FB | 	callpa	#(@LR__2646-@LR__2645)>>2,fcache_load_ptr_
20a18                 | LR__2645
20a18     54 AB 02 F6 | 	mov	local03, local02
20a1c     01 AA 66 F0 | 	shl	local03, #1
20a20     32 AB 02 F1 | 	add	local03, objptr
20a24     40 00 80 FF 
20a28     55 01 58 FC | 	wrword	##32768, local03
20a2c     01 A8 06 F1 | 	add	local02, #1
20a30     81 A8 16 F2 | 	cmp	local02, #129 wc
20a34     E0 FF 9F CD |  if_b	jmp	#LR__2645
20a38                 | LR__2646
20a38                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
20a38     81 A8 06 F6 | 	mov	local02, #129
20a3c     D7 14 48 FB | 	callpa	#(@LR__2648-@LR__2647)>>2,fcache_load_ptr_
20a40                 | LR__2647
20a40     54 AB 02 F6 | 	mov	local03, local02
20a44     01 AA 66 F0 | 	shl	local03, #1
20a48     32 AB 02 F1 | 	add	local03, objptr
20a4c     FF B0 06 F6 | 	mov	local06, #255
20a50     54 B1 82 F1 | 	sub	local06, local02
20a54     08 B0 66 F0 | 	shl	local06, #8
20a58     55 B1 52 FC | 	wrword	local06, local03
20a5c     01 A8 06 F1 | 	add	local02, #1
20a60     00 A9 16 F2 | 	cmp	local02, #256 wc
20a64     D8 FF 9F CD |  if_b	jmp	#LR__2647
20a68                 | LR__2648
20a68     3F 00 00 FF 
20a6c     42 64 06 F1 | 	add	objptr, ##32322
20a70     32 01 59 FC | 	wrword	#128, objptr
20a74     53 00 00 FF 
20a78     1A 65 86 F1 | 	sub	objptr, ##42778
20a7c                 | ' for i=0 to 7
20a7c     00 A8 06 F6 | 	mov	local02, #0
20a80     D7 9C 48 FB | 	callpa	#(@LR__2650-@LR__2649)>>2,fcache_load_ptr_
20a84                 | LR__2649
20a84     54 AB 02 F6 | 	mov	local03, local02
20a88     03 AA 66 F0 | 	shl	local03, #3
20a8c     54 AB 82 F1 | 	sub	local03, local02
20a90     02 AA 66 F0 | 	shl	local03, #2
20a94     15 00 00 FF 
20a98     38 65 06 F1 | 	add	objptr, ##11064
20a9c     32 AB 02 F1 | 	add	local03, objptr
20aa0     00 EE A1 FF 
20aa4     55 01 68 FC | 	wrlong	##1138491392, local03
20aa8     54 AB 02 F6 | 	mov	local03, local02
20aac     03 AA 66 F0 | 	shl	local03, #3
20ab0     54 AB 82 F1 | 	sub	local03, local02
20ab4     02 AA 66 F0 | 	shl	local03, #2
20ab8     32 AB 02 F1 | 	add	local03, objptr
20abc     04 AA 06 F1 | 	add	local03, #4
20ac0     55 A9 42 FC | 	wrbyte	local02, local03
20ac4     54 AB 02 F6 | 	mov	local03, local02
20ac8     03 AA 66 F0 | 	shl	local03, #3
20acc     54 AB 82 F1 | 	sub	local03, local02
20ad0     02 AA 66 F0 | 	shl	local03, #2
20ad4     32 AB 02 F1 | 	add	local03, objptr
20ad8     05 AA 06 F1 | 	add	local03, #5
20adc     55 A9 42 FC | 	wrbyte	local02, local03
20ae0     54 AB 02 F6 | 	mov	local03, local02
20ae4     03 AA 66 F0 | 	shl	local03, #3
20ae8     54 AB 82 F1 | 	sub	local03, local02
20aec     02 AA 66 F0 | 	shl	local03, #2
20af0     32 AB 02 F1 | 	add	local03, objptr
20af4     06 AA 06 F1 | 	add	local03, #6
20af8     55 01 58 FC | 	wrword	#0, local03
20afc     54 AB 02 F6 | 	mov	local03, local02
20b00     03 AA 66 F0 | 	shl	local03, #3
20b04     54 AB 82 F1 | 	sub	local03, local02
20b08     02 AA 66 F0 | 	shl	local03, #2
20b0c     32 AB 02 F1 | 	add	local03, objptr
20b10     08 AA 06 F1 | 	add	local03, #8
20b14     00 C0 9F FF 
20b18     55 01 68 FC | 	wrlong	##1065353216, local03
20b1c     54 AB 02 F6 | 	mov	local03, local02
20b20     03 AA 66 F0 | 	shl	local03, #3
20b24     54 AB 82 F1 | 	sub	local03, local02
20b28     02 AA 66 F0 | 	shl	local03, #2
20b2c     32 AB 02 F1 | 	add	local03, objptr
20b30     0C AA 06 F1 | 	add	local03, #12
20b34     00 40 A0 FF 
20b38     55 01 68 FC | 	wrlong	##1082130432, local03
20b3c     54 AB 02 F6 | 	mov	local03, local02
20b40     03 AA 66 F0 | 	shl	local03, #3
20b44     54 AB 82 F1 | 	sub	local03, local02
20b48     02 AA 66 F0 | 	shl	local03, #2
20b4c     32 AB 02 F1 | 	add	local03, objptr
20b50     10 AA 06 F1 | 	add	local03, #16
20b54     55 01 68 FC | 	wrlong	#0, local03
20b58     54 AB 02 F6 | 	mov	local03, local02
20b5c     03 AA 66 F0 | 	shl	local03, #3
20b60     54 AB 82 F1 | 	sub	local03, local02
20b64     02 AA 66 F0 | 	shl	local03, #2
20b68     32 AB 02 F1 | 	add	local03, objptr
20b6c     14 AA 06 F1 | 	add	local03, #20
20b70     55 FF 59 FC | 	wrword	#255, local03
20b74     54 AB 02 F6 | 	mov	local03, local02
20b78     03 AA 66 F0 | 	shl	local03, #3
20b7c     54 AB 82 F1 | 	sub	local03, local02
20b80     02 AA 66 F0 | 	shl	local03, #2
20b84     32 AB 02 F1 | 	add	local03, objptr
20b88     16 AA 06 F1 | 	add	local03, #22
20b8c     55 01 58 FC | 	wrword	#0, local03
20b90     54 AB 02 F6 | 	mov	local03, local02
20b94     01 AA 66 F0 | 	shl	local03, #1
20b98     3D 00 00 FF 
20b9c     D4 65 06 F1 | 	add	objptr, ##31700
20ba0     32 AB 02 F1 | 	add	local03, objptr
20ba4     55 FF 59 FC | 	wrword	#255, local03
20ba8     01 A8 06 F1 | 	add	local02, #1
20bac     08 A8 56 F2 | 	cmps	local02, #8 wc
20bb0     53 00 00 FF 
20bb4     0C 65 86 F1 | 	sub	objptr, ##42764
20bb8     C8 FE 9F CD |  if_b	jmp	#LR__2649
20bbc                 | LR__2650
20bbc     00 6E 20 FF 
20bc0     00 B2 06 F6 | 	mov	local07, ##1088159744
20bc4                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
20bc4     03 B0 06 F6 | 	mov	local06, #3
20bc8                 | LR__2651
20bc8     59 93 02 F6 | 	mov	arg01, local07
20bcc     CE C3 1F FF 
20bd0     7D 94 06 F6 | 	mov	arg02, ##1065852029
20bd4     B0 64 B0 FD | 	call	#__system___float_mul
20bd8     3D B3 02 F6 | 	mov	local07, result1
20bdc     FA B1 6E FB | 	djnz	local06, #LR__2651
20be0     00 A8 06 F6 | 	mov	local02, #0
20be4                 | LR__2652
20be4     54 AD 02 F6 | 	mov	local04, local02
20be8     02 AC 66 F0 | 	shl	local04, #2
20bec     32 AB 02 F6 | 	mov	local03, objptr
20bf0     15 00 00 FF 
20bf4     D8 AA 06 F1 | 	add	local03, ##10968
20bf8     55 AD 02 F1 | 	add	local04, local03
20bfc     56 B3 62 FC | 	wrlong	local07, local04
20c00     59 93 02 F6 | 	mov	arg01, local07
20c04     CE C3 1F FF 
20c08     7D 94 06 F6 | 	mov	arg02, ##1065852029
20c0c     78 64 B0 FD | 	call	#__system___float_mul
20c10     3D B3 02 F6 | 	mov	local07, result1
20c14     01 A8 06 F1 | 	add	local02, #1
20c18     0C A8 56 F2 | 	cmps	local02, #12 wc
20c1c     C4 FF 9F CD |  if_b	jmp	#LR__2652
20c20     15 00 00 FF 
20c24     08 65 06 F1 | 	add	objptr, ##11016
20c28     32 51 6B FC | 	wrlong	#424, objptr
20c2c     04 64 06 F1 | 	add	objptr, #4
20c30     32 21 6B FC | 	wrlong	#400, objptr
20c34     04 64 06 F1 | 	add	objptr, #4
20c38     32 F3 6A FC | 	wrlong	#377, objptr
20c3c     04 64 06 F1 | 	add	objptr, #4
20c40     32 C9 6A FC | 	wrlong	#356, objptr
20c44     04 64 06 F1 | 	add	objptr, #4
20c48     32 A1 6A FC | 	wrlong	#336, objptr
20c4c     04 64 06 F1 | 	add	objptr, #4
20c50     32 7B 6A FC | 	wrlong	#317, objptr
20c54     04 64 06 F1 | 	add	objptr, #4
20c58     32 59 6A FC | 	wrlong	#300, objptr
20c5c     04 64 06 F1 | 	add	objptr, #4
20c60     32 37 6A FC | 	wrlong	#283, objptr
20c64     04 64 06 F1 | 	add	objptr, #4
20c68     32 17 6A FC | 	wrlong	#267, objptr
20c6c     04 64 06 F1 | 	add	objptr, #4
20c70     32 F9 69 FC | 	wrlong	#252, objptr
20c74     04 64 06 F1 | 	add	objptr, #4
20c78     32 DD 69 FC | 	wrlong	#238, objptr
20c7c     04 64 06 F1 | 	add	objptr, #4
20c80     32 C1 69 FC | 	wrlong	#224, objptr
20c84     3D 00 00 FF 
20c88     E6 65 06 F1 | 	add	objptr, ##31718
20c8c     32 01 59 FC | 	wrword	#128, objptr
20c90     02 64 86 F1 | 	sub	objptr, #2
20c94     32 01 59 FC | 	wrword	#128, objptr
20c98     53 00 00 FF 
20c9c     18 65 86 F1 | 	sub	objptr, ##42776
20ca0     E7 F0 03 F6 | 	mov	ptra, fp
20ca4     F2 00 A0 FD | 	call	#popregs_
20ca8                 | _init_audio_ret
20ca8     2D 00 64 FD | 	ret
20cac                 | 
20cac                 | ' 
20cac                 | ' '------------------- Error messages
20cac                 | ' 
20cac                 | ' sub init_error_strings
20cac                 | _init_error_strings
20cac     98 01 00 FF 
20cb0     65 81 06 F6 | 	mov	_var01, ##@LR__6102
20cb4     46 00 00 FF 
20cb8     9C 64 06 F1 | 	add	objptr, ##35996
20cbc     32 81 62 FC | 	wrlong	_var01, objptr
20cc0     98 01 00 FF 
20cc4     66 81 06 F6 | 	mov	_var01, ##@LR__6103
20cc8     04 64 06 F1 | 	add	objptr, #4
20ccc     32 81 62 FC | 	wrlong	_var01, objptr
20cd0     98 01 00 FF 
20cd4     8A 81 06 F6 | 	mov	_var01, ##@LR__6104
20cd8     04 64 06 F1 | 	add	objptr, #4
20cdc     32 81 62 FC | 	wrlong	_var01, objptr
20ce0     98 01 00 FF 
20ce4     AA 81 06 F6 | 	mov	_var01, ##@LR__6105
20ce8     04 64 06 F1 | 	add	objptr, #4
20cec     32 81 62 FC | 	wrlong	_var01, objptr
20cf0     98 01 00 FF 
20cf4     C3 81 06 F6 | 	mov	_var01, ##@LR__6106
20cf8     04 64 06 F1 | 	add	objptr, #4
20cfc     32 81 62 FC | 	wrlong	_var01, objptr
20d00     98 01 00 FF 
20d04     DE 81 06 F6 | 	mov	_var01, ##@LR__6107
20d08     04 64 06 F1 | 	add	objptr, #4
20d0c     32 81 62 FC | 	wrlong	_var01, objptr
20d10     98 01 00 FF 
20d14     FF 81 06 F6 | 	mov	_var01, ##@LR__6108
20d18     04 64 06 F1 | 	add	objptr, #4
20d1c     32 81 62 FC | 	wrlong	_var01, objptr
20d20     99 01 00 FF 
20d24     2C 80 06 F6 | 	mov	_var01, ##@LR__6109
20d28     04 64 06 F1 | 	add	objptr, #4
20d2c     32 81 62 FC | 	wrlong	_var01, objptr
20d30     99 01 00 FF 
20d34     56 80 06 F6 | 	mov	_var01, ##@LR__6110
20d38     04 64 06 F1 | 	add	objptr, #4
20d3c     32 81 62 FC | 	wrlong	_var01, objptr
20d40     99 01 00 FF 
20d44     6E 80 06 F6 | 	mov	_var01, ##@LR__6111
20d48     04 64 06 F1 | 	add	objptr, #4
20d4c     32 81 62 FC | 	wrlong	_var01, objptr
20d50     99 01 00 FF 
20d54     8E 80 06 F6 | 	mov	_var01, ##@LR__6112
20d58     04 64 06 F1 | 	add	objptr, #4
20d5c     32 81 62 FC | 	wrlong	_var01, objptr
20d60     99 01 00 FF 
20d64     A4 80 06 F6 | 	mov	_var01, ##@LR__6113
20d68     04 64 06 F1 | 	add	objptr, #4
20d6c     32 81 62 FC | 	wrlong	_var01, objptr
20d70     99 01 00 FF 
20d74     C1 80 06 F6 | 	mov	_var01, ##@LR__6114
20d78     04 64 06 F1 | 	add	objptr, #4
20d7c     32 81 62 FC | 	wrlong	_var01, objptr
20d80     99 01 00 FF 
20d84     E4 80 06 F6 | 	mov	_var01, ##@LR__6115
20d88     04 64 06 F1 | 	add	objptr, #4
20d8c     32 81 62 FC | 	wrlong	_var01, objptr
20d90     99 01 00 FF 
20d94     0A 81 06 F6 | 	mov	_var01, ##@LR__6116
20d98     04 64 06 F1 | 	add	objptr, #4
20d9c     32 81 62 FC | 	wrlong	_var01, objptr
20da0     99 01 00 FF 
20da4     25 81 06 F6 | 	mov	_var01, ##@LR__6117
20da8     04 64 06 F1 | 	add	objptr, #4
20dac     32 81 62 FC | 	wrlong	_var01, objptr
20db0     99 01 00 FF 
20db4     35 81 06 F6 | 	mov	_var01, ##@LR__6118
20db8     04 64 06 F1 | 	add	objptr, #4
20dbc     32 81 62 FC | 	wrlong	_var01, objptr
20dc0     99 01 00 FF 
20dc4     44 81 06 F6 | 	mov	_var01, ##@LR__6119
20dc8     04 64 06 F1 | 	add	objptr, #4
20dcc     32 81 62 FC | 	wrlong	_var01, objptr
20dd0     99 01 00 FF 
20dd4     5E 81 06 F6 | 	mov	_var01, ##@LR__6120
20dd8     04 64 06 F1 | 	add	objptr, #4
20ddc     32 81 62 FC | 	wrlong	_var01, objptr
20de0     99 01 00 FF 
20de4     6F 81 06 F6 | 	mov	_var01, ##@LR__6121
20de8     04 64 06 F1 | 	add	objptr, #4
20dec     32 81 62 FC | 	wrlong	_var01, objptr
20df0     99 01 00 FF 
20df4     86 81 06 F6 | 	mov	_var01, ##@LR__6122
20df8     04 64 06 F1 | 	add	objptr, #4
20dfc     32 81 62 FC | 	wrlong	_var01, objptr
20e00     99 01 00 FF 
20e04     99 81 06 F6 | 	mov	_var01, ##@LR__6123
20e08     04 64 06 F1 | 	add	objptr, #4
20e0c     32 81 62 FC | 	wrlong	_var01, objptr
20e10     99 01 00 FF 
20e14     A8 81 06 F6 | 	mov	_var01, ##@LR__6124
20e18     04 64 06 F1 | 	add	objptr, #4
20e1c     32 81 62 FC | 	wrlong	_var01, objptr
20e20     99 01 00 FF 
20e24     C4 81 06 F6 | 	mov	_var01, ##@LR__6125
20e28     04 64 06 F1 | 	add	objptr, #4
20e2c     32 81 62 FC | 	wrlong	_var01, objptr
20e30     99 01 00 FF 
20e34     D4 81 06 F6 | 	mov	_var01, ##@LR__6126
20e38     04 64 06 F1 | 	add	objptr, #4
20e3c     32 81 62 FC | 	wrlong	_var01, objptr
20e40     99 01 00 FF 
20e44     E4 81 06 F6 | 	mov	_var01, ##@LR__6127
20e48     04 64 06 F1 | 	add	objptr, #4
20e4c     32 81 62 FC | 	wrlong	_var01, objptr
20e50     9A 01 00 FF 
20e54     17 80 06 F6 | 	mov	_var01, ##@LR__6128
20e58     04 64 06 F1 | 	add	objptr, #4
20e5c     32 81 62 FC | 	wrlong	_var01, objptr
20e60     9A 01 00 FF 
20e64     32 80 06 F6 | 	mov	_var01, ##@LR__6129
20e68     04 64 06 F1 | 	add	objptr, #4
20e6c     32 81 62 FC | 	wrlong	_var01, objptr
20e70     9A 01 00 FF 
20e74     47 80 06 F6 | 	mov	_var01, ##@LR__6130
20e78     04 64 06 F1 | 	add	objptr, #4
20e7c     32 81 62 FC | 	wrlong	_var01, objptr
20e80     9A 01 00 FF 
20e84     53 80 06 F6 | 	mov	_var01, ##@LR__6131
20e88     04 64 06 F1 | 	add	objptr, #4
20e8c     32 81 62 FC | 	wrlong	_var01, objptr
20e90     9A 01 00 FF 
20e94     64 80 06 F6 | 	mov	_var01, ##@LR__6132
20e98     04 64 06 F1 | 	add	objptr, #4
20e9c     32 81 62 FC | 	wrlong	_var01, objptr
20ea0     9A 01 00 FF 
20ea4     74 80 06 F6 | 	mov	_var01, ##@LR__6133
20ea8     04 64 06 F1 | 	add	objptr, #4
20eac     32 81 62 FC | 	wrlong	_var01, objptr
20eb0     9A 01 00 FF 
20eb4     8F 80 06 F6 | 	mov	_var01, ##@LR__6134
20eb8     04 64 06 F1 | 	add	objptr, #4
20ebc     32 81 62 FC | 	wrlong	_var01, objptr
20ec0     9A 01 00 FF 
20ec4     9F 80 06 F6 | 	mov	_var01, ##@LR__6135
20ec8     04 64 06 F1 | 	add	objptr, #4
20ecc     32 81 62 FC | 	wrlong	_var01, objptr
20ed0     9A 01 00 FF 
20ed4     AD 80 06 F6 | 	mov	_var01, ##@LR__6136
20ed8     04 64 06 F1 | 	add	objptr, #4
20edc     32 81 62 FC | 	wrlong	_var01, objptr
20ee0     9A 01 00 FF 
20ee4     C7 80 06 F6 | 	mov	_var01, ##@LR__6137
20ee8     04 64 06 F1 | 	add	objptr, #4
20eec     32 81 62 FC | 	wrlong	_var01, objptr
20ef0     9A 01 00 FF 
20ef4     FA 80 06 F6 | 	mov	_var01, ##@LR__6138
20ef8     04 64 06 F1 | 	add	objptr, #4
20efc     32 81 62 FC | 	wrlong	_var01, objptr
20f00     9A 01 00 FF 
20f04     12 81 06 F6 | 	mov	_var01, ##@LR__6139
20f08     04 64 06 F1 | 	add	objptr, #4
20f0c     32 81 62 FC | 	wrlong	_var01, objptr
20f10     9A 01 00 FF 
20f14     2D 81 06 F6 | 	mov	_var01, ##@LR__6140
20f18     04 64 06 F1 | 	add	objptr, #4
20f1c     32 81 62 FC | 	wrlong	_var01, objptr
20f20     9A 01 00 FF 
20f24     4A 81 06 F6 | 	mov	_var01, ##@LR__6141
20f28     04 64 06 F1 | 	add	objptr, #4
20f2c     32 81 62 FC | 	wrlong	_var01, objptr
20f30     9A 01 00 FF 
20f34     63 81 06 F6 | 	mov	_var01, ##@LR__6142
20f38     04 64 06 F1 | 	add	objptr, #4
20f3c     32 81 62 FC | 	wrlong	_var01, objptr
20f40     9A 01 00 FF 
20f44     82 81 06 F6 | 	mov	_var01, ##@LR__6143
20f48     04 64 06 F1 | 	add	objptr, #4
20f4c     32 81 62 FC | 	wrlong	_var01, objptr
20f50     9A 01 00 FF 
20f54     90 81 06 F6 | 	mov	_var01, ##@LR__6144
20f58     04 64 06 F1 | 	add	objptr, #4
20f5c     32 81 62 FC | 	wrlong	_var01, objptr
20f60     9A 01 00 FF 
20f64     BD 81 06 F6 | 	mov	_var01, ##@LR__6145
20f68     04 64 06 F1 | 	add	objptr, #4
20f6c     32 81 62 FC | 	wrlong	_var01, objptr
20f70     9A 01 00 FF 
20f74     CA 81 06 F6 | 	mov	_var01, ##@LR__6146
20f78     04 64 06 F1 | 	add	objptr, #4
20f7c     32 81 62 FC | 	wrlong	_var01, objptr
20f80     9A 01 00 FF 
20f84     DE 81 06 F6 | 	mov	_var01, ##@LR__6147
20f88     04 64 06 F1 | 	add	objptr, #4
20f8c     32 81 62 FC | 	wrlong	_var01, objptr
20f90     9B 01 00 FF 
20f94     02 80 06 F6 | 	mov	_var01, ##@LR__6148
20f98     04 64 06 F1 | 	add	objptr, #4
20f9c     32 81 62 FC | 	wrlong	_var01, objptr
20fa0     9B 01 00 FF 
20fa4     19 80 06 F6 | 	mov	_var01, ##@LR__6149
20fa8     04 64 06 F1 | 	add	objptr, #4
20fac     32 81 62 FC | 	wrlong	_var01, objptr
20fb0     9B 01 00 FF 
20fb4     2C 80 06 F6 | 	mov	_var01, ##@LR__6150
20fb8     04 64 06 F1 | 	add	objptr, #4
20fbc     32 81 62 FC | 	wrlong	_var01, objptr
20fc0     9B 01 00 FF 
20fc4     43 80 06 F6 | 	mov	_var01, ##@LR__6151
20fc8     04 64 06 F1 | 	add	objptr, #4
20fcc     32 81 62 FC | 	wrlong	_var01, objptr
20fd0     9B 01 00 FF 
20fd4     5C 80 06 F6 | 	mov	_var01, ##@LR__6152
20fd8     04 64 06 F1 | 	add	objptr, #4
20fdc     32 81 62 FC | 	wrlong	_var01, objptr
20fe0     9B 01 00 FF 
20fe4     7E 80 06 F6 | 	mov	_var01, ##@LR__6153
20fe8     04 64 06 F1 | 	add	objptr, #4
20fec     32 81 62 FC | 	wrlong	_var01, objptr
20ff0     9B 01 00 FF 
20ff4     91 80 06 F6 | 	mov	_var01, ##@LR__6154
20ff8     04 64 06 F1 | 	add	objptr, #4
20ffc     32 81 62 FC | 	wrlong	_var01, objptr
21000     9B 01 00 FF 
21004     A1 80 06 F6 | 	mov	_var01, ##@LR__6155
21008     04 64 06 F1 | 	add	objptr, #4
2100c     32 81 62 FC | 	wrlong	_var01, objptr
21010     9B 01 00 FF 
21014     B9 80 06 F6 | 	mov	_var01, ##@LR__6156
21018     04 64 06 F1 | 	add	objptr, #4
2101c     32 81 62 FC | 	wrlong	_var01, objptr
21020     9B 01 00 FF 
21024     D0 80 06 F6 | 	mov	_var01, ##@LR__6157
21028     04 64 06 F1 | 	add	objptr, #4
2102c     32 81 62 FC | 	wrlong	_var01, objptr
21030     46 00 00 FF 
21034     78 65 86 F1 | 	sub	objptr, ##36216
21038                 | _init_error_strings_ret
21038     2D 00 64 FD | 	ret
2103c                 | 
2103c                 | '         
2103c                 | ' sub printerror(err as integer, linenum=0 as integer)
2103c                 | _printerror
2103c     02 CA 05 F6 | 	mov	COUNT_, #2
21040     E8 00 A0 FD | 	call	#pushregs_
21044     49 A7 02 F6 | 	mov	local01, arg01
21048     4A A9 02 F6 | 	mov	local02, arg02
2104c     9B 01 00 FF 
21050     DD 92 06 F6 | 	mov	arg01, ##@LR__6158
21054     44 21 B0 FD | 	call	#_hg010b_spin2_write
21058     53 93 02 F6 | 	mov	arg01, local01
2105c     80 26 B0 FD | 	call	#_hg010b_spin2_inttostr
21060     3D 93 02 F6 | 	mov	arg01, result1
21064     34 21 B0 FD | 	call	#_hg010b_spin2_write
21068     9B 01 00 FF 
2106c     E4 92 06 F6 | 	mov	arg01, ##@LR__6159
21070     28 21 B0 FD | 	call	#_hg010b_spin2_write
21074     02 A6 66 F0 | 	shl	local01, #2
21078     32 95 02 F6 | 	mov	arg02, objptr
2107c     46 00 00 FF 
21080     9C 94 06 F1 | 	add	arg02, ##35996
21084     4A A7 02 F1 | 	add	local01, arg02
21088     53 93 02 FB | 	rdlong	arg01, local01
2108c     0C 21 B0 FD | 	call	#_hg010b_spin2_write
21090                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
21090                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
21090     01 A8 56 F2 | 	cmps	local02, #1 wc
21094     24 00 90 CD |  if_b	jmp	#LR__2660
21098     9B 01 00 FF 
2109c     E8 92 06 F6 | 	mov	arg01, ##@LR__6160
210a0     F8 20 B0 FD | 	call	#_hg010b_spin2_write
210a4     54 93 02 F6 | 	mov	arg01, local02
210a8     34 26 B0 FD | 	call	#_hg010b_spin2_inttostr
210ac     3D 93 02 F6 | 	mov	arg01, result1
210b0                 | ' 
210b0                 | ' write(text)
210b0     E8 20 B0 FD | 	call	#_hg010b_spin2_write
210b4                 | ' crlf
210b4     84 25 B0 FD | 	call	#_hg010b_spin2_crlf
210b8     10 00 90 FD | 	jmp	#LR__2661
210bc                 | LR__2660
210bc     9B 01 00 FF 
210c0     F2 92 06 F6 | 	mov	arg01, ##@LR__6161
210c4                 | ' 
210c4                 | ' write(text)
210c4     D4 20 B0 FD | 	call	#_hg010b_spin2_write
210c8                 | ' crlf
210c8     70 25 B0 FD | 	call	#_hg010b_spin2_crlf
210cc                 | LR__2661
210cc     E7 F0 03 F6 | 	mov	ptra, fp
210d0     F2 00 A0 FD | 	call	#popregs_
210d4                 | _printerror_ret
210d4     2D 00 64 FD | 	ret
210d8                 | 
210d8                 | ' 
210d8                 | ' '' ------------------------------- Hardware start/stop/initialization 
210d8                 | ' 
210d8                 | ' sub startpsram
210d8                 | _startpsram
210d8     00 92 06 F6 | 	mov	arg01, #0
210dc     0A 94 C6 F9 | 	decod	arg02, #10
210e0     0B 96 06 F6 | 	mov	arg03, #11
210e4     07 98 06 F6 | 	mov	arg04, #7
210e8     0B 00 00 FF 
210ec     CC 64 06 F1 | 	add	objptr, ##5836
210f0     70 2A B0 FD | 	call	#_psram_spin2_startx
210f4     2C 00 00 FF 
210f8     5C 65 06 F1 | 	add	objptr, ##22876
210fc     32 7B 62 FC | 	wrlong	result1, objptr
21100                 | '     return $7FF00 + cog*12
21100     0C 64 06 F1 | 	add	objptr, #12
21104     FF 03 80 FF 
21108     32 01 6A FC | 	wrlong	##524032, objptr
2110c     38 00 00 FF 
21110     34 64 86 F1 | 	sub	objptr, ##28724
21114                 | _startpsram_ret
21114     2D 00 64 FD | 	ret
21118                 | 
21118                 | ' 
21118                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
21118                 | _startvideo
21118     01 CA 05 F6 | 	mov	COUNT_, #1
2111c     E8 00 A0 FD | 	call	#pushregs_
21120     38 00 00 FF 
21124     34 64 06 F1 | 	add	objptr, ##28724
21128     32 99 02 FB | 	rdlong	arg04, objptr
2112c     38 00 00 FF 
21130     34 64 86 F1 | 	sub	objptr, ##28724
21134     4A 93 02 F6 | 	mov	arg01, arg02
21138     4C 95 02 F6 | 	mov	arg02, arg04
2113c     DC 07 B0 FD | 	call	#_hg010b_spin2_start
21140     38 00 00 FF 
21144     20 64 06 F1 | 	add	objptr, ##28704
21148     32 7B 62 FC | 	wrlong	result1, objptr
2114c                 | ' 
2114c                 | ' videocog=v.start(pin,mbox)
2114c                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
2114c     00 A6 06 F6 | 	mov	local01, #0
21150     2C 00 00 FF 
21154     54 65 86 F1 | 	sub	objptr, ##22868
21158                 | LR__2670
21158     53 93 02 F6 | 	mov	arg01, local01
2115c     00 28 00 FF 
21160     00 94 06 F6 | 	mov	arg02, ##5242880
21164     5C 2E B0 FD | 	call	#_psram_spin2_setQos
21168     01 A6 06 F1 | 	add	local01, #1
2116c     08 A6 56 F2 | 	cmps	local01, #8 wc
21170     E4 FF 9F CD |  if_b	jmp	#LR__2670
21174     2C 00 00 FF 
21178     54 65 06 F1 | 	add	objptr, ##22868
2117c     32 93 02 FB | 	rdlong	arg01, objptr
21180     7A 00 02 FF 
21184     00 94 06 F6 | 	mov	arg02, ##67171328
21188     2C 00 00 FF 
2118c     54 65 86 F1 | 	sub	objptr, ##22868
21190     30 2E B0 FD | 	call	#_psram_spin2_setQos
21194     0B 00 00 FF 
21198     CC 64 86 F1 | 	sub	objptr, ##5836
2119c                 | ' psram.setQoS(videocog, $0400f400) 
2119c                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
2119c     32 95 02 F6 | 	mov	arg02, objptr
211a0     00 68 05 FF 
211a4     00 94 46 F5 | 	or	arg02, ##181403648
211a8     00 96 06 F6 | 	mov	arg03, #0
211ac     00 98 06 F6 | 	mov	arg04, #0
211b0     00 92 06 F6 | 	mov	arg01, #0
211b4     50 42 B0 FD | 	call	#__system___basic_open
211b8                 | ' return videocog
211b8     38 00 00 FF 
211bc     20 64 06 F1 | 	add	objptr, ##28704
211c0     32 7B 02 FB | 	rdlong	result1, objptr
211c4     38 00 00 FF 
211c8     20 64 86 F1 | 	sub	objptr, ##28704
211cc     E7 F0 03 F6 | 	mov	ptra, fp
211d0     F2 00 A0 FD | 	call	#popregs_
211d4                 | _startvideo_ret
211d4     2D 00 64 FD | 	ret
211d8                 | 
211d8                 | ' 
211d8                 | ' 
211d8                 | ' 
211d8                 | ' '' ------------------------------- Convenient psram peek/poke
211d8                 | ' 
211d8                 | ' sub pslpoke(addr as ulong,value as ulong)
211d8                 | _pslpoke
211d8     00 CA 05 F6 | 	mov	COUNT_, #0
211dc     E8 00 A0 FD | 	call	#pushregs_
211e0     08 F0 07 F1 | 	add	ptra, #8
211e4     49 97 02 F6 | 	mov	arg03, arg01
211e8     04 CE 05 F1 | 	add	fp, #4
211ec     E7 94 62 FC | 	wrlong	arg02, fp
211f0     E7 92 02 F6 | 	mov	arg01, fp
211f4     04 CE 85 F1 | 	sub	fp, #4
211f8     4B 95 02 F6 | 	mov	arg02, arg03
211fc     04 96 06 F6 | 	mov	arg03, #4
21200     0B 00 00 FF 
21204     CC 64 06 F1 | 	add	objptr, ##5836
21208     28 2C B0 FD | 	call	#_psram_spin2_write
2120c     0B 00 00 FF 
21210     CC 64 86 F1 | 	sub	objptr, ##5836
21214     E7 F0 03 F6 | 	mov	ptra, fp
21218     F2 00 A0 FD | 	call	#popregs_
2121c                 | _pslpoke_ret
2121c     2D 00 64 FD | 	ret
21220                 | 
21220                 | ' 
21220                 | ' sub psdpoke(addr as ulong,value as ulong)
21220                 | _psdpoke
21220     00 CA 05 F6 | 	mov	COUNT_, #0
21224     E8 00 A0 FD | 	call	#pushregs_
21228     08 F0 07 F1 | 	add	ptra, #8
2122c     49 97 02 F6 | 	mov	arg03, arg01
21230     04 CE 05 F1 | 	add	fp, #4
21234     E7 94 62 FC | 	wrlong	arg02, fp
21238     E7 92 02 F6 | 	mov	arg01, fp
2123c     04 CE 85 F1 | 	sub	fp, #4
21240     4B 95 02 F6 | 	mov	arg02, arg03
21244     02 96 06 F6 | 	mov	arg03, #2
21248     0B 00 00 FF 
2124c     CC 64 06 F1 | 	add	objptr, ##5836
21250     E0 2B B0 FD | 	call	#_psram_spin2_write
21254     0B 00 00 FF 
21258     CC 64 86 F1 | 	sub	objptr, ##5836
2125c     E7 F0 03 F6 | 	mov	ptra, fp
21260     F2 00 A0 FD | 	call	#popregs_
21264                 | _psdpoke_ret
21264     2D 00 64 FD | 	ret
21268                 | 
21268                 | ' 
21268                 | ' sub pspoke(addr as ulong,value as ulong)
21268                 | _pspoke
21268     00 CA 05 F6 | 	mov	COUNT_, #0
2126c     E8 00 A0 FD | 	call	#pushregs_
21270     08 F0 07 F1 | 	add	ptra, #8
21274     49 97 02 F6 | 	mov	arg03, arg01
21278     04 CE 05 F1 | 	add	fp, #4
2127c     E7 94 62 FC | 	wrlong	arg02, fp
21280     E7 92 02 F6 | 	mov	arg01, fp
21284     04 CE 85 F1 | 	sub	fp, #4
21288     4B 95 02 F6 | 	mov	arg02, arg03
2128c     01 96 06 F6 | 	mov	arg03, #1
21290     0B 00 00 FF 
21294     CC 64 06 F1 | 	add	objptr, ##5836
21298     98 2B B0 FD | 	call	#_psram_spin2_write
2129c     0B 00 00 FF 
212a0     CC 64 86 F1 | 	sub	objptr, ##5836
212a4     E7 F0 03 F6 | 	mov	ptra, fp
212a8     F2 00 A0 FD | 	call	#popregs_
212ac                 | _pspoke_ret
212ac     2D 00 64 FD | 	ret
212b0                 | 
212b0                 | ' 
212b0                 | ' function pspeek(adr as ulong) as ubyte
212b0                 | _pspeek
212b0     00 CA 05 F6 | 	mov	COUNT_, #0
212b4     E8 00 A0 FD | 	call	#pushregs_
212b8     0C F0 07 F1 | 	add	ptra, #12
212bc     49 95 02 F6 | 	mov	arg02, arg01
212c0     E7 92 02 F6 | 	mov	arg01, fp
212c4     08 92 06 F1 | 	add	arg01, #8
212c8     01 96 06 F6 | 	mov	arg03, #1
212cc     0B 00 00 FF 
212d0     CC 64 06 F1 | 	add	objptr, ##5836
212d4     C0 2A B0 FD | 	call	#_psram_spin2_read1
212d8     0B 00 00 FF 
212dc     CC 64 86 F1 | 	sub	objptr, ##5836
212e0                 | ' psram.read1(varptr(res),adr,1)
212e0                 | ' return res
212e0     08 CE 05 F1 | 	add	fp, #8
212e4     E7 7A C2 FA | 	rdbyte	result1, fp
212e8     08 CE 85 F1 | 	sub	fp, #8
212ec     E7 F0 03 F6 | 	mov	ptra, fp
212f0     F2 00 A0 FD | 	call	#popregs_
212f4                 | _pspeek_ret
212f4     2D 00 64 FD | 	ret
212f8                 | 
212f8                 | ' 
212f8                 | ' function pslpeek(adr as ulong) as ulong
212f8                 | _pslpeek
212f8     00 CA 05 F6 | 	mov	COUNT_, #0
212fc     E8 00 A0 FD | 	call	#pushregs_
21300     0C F0 07 F1 | 	add	ptra, #12
21304     49 95 02 F6 | 	mov	arg02, arg01
21308     E7 92 02 F6 | 	mov	arg01, fp
2130c     08 92 06 F1 | 	add	arg01, #8
21310     04 96 06 F6 | 	mov	arg03, #4
21314     0B 00 00 FF 
21318     CC 64 06 F1 | 	add	objptr, ##5836
2131c     78 2A B0 FD | 	call	#_psram_spin2_read1
21320     0B 00 00 FF 
21324     CC 64 86 F1 | 	sub	objptr, ##5836
21328                 | ' psram.read1(varptr(res),adr,4)
21328                 | ' return res
21328     08 CE 05 F1 | 	add	fp, #8
2132c     E7 7A 02 FB | 	rdlong	result1, fp
21330     08 CE 85 F1 | 	sub	fp, #8
21334     E7 F0 03 F6 | 	mov	ptra, fp
21338     F2 00 A0 FD | 	call	#popregs_
2133c                 | _pslpeek_ret
2133c     2D 00 64 FD | 	ret
21340                 | 
21340                 | ' 
21340                 | ' function psdpeek(adr as ulong) as ulong
21340                 | _psdpeek
21340     00 CA 05 F6 | 	mov	COUNT_, #0
21344     E8 00 A0 FD | 	call	#pushregs_
21348     0C F0 07 F1 | 	add	ptra, #12
2134c     49 95 02 F6 | 	mov	arg02, arg01
21350     E7 92 02 F6 | 	mov	arg01, fp
21354     08 92 06 F1 | 	add	arg01, #8
21358     02 96 06 F6 | 	mov	arg03, #2
2135c     0B 00 00 FF 
21360     CC 64 06 F1 | 	add	objptr, ##5836
21364     30 2A B0 FD | 	call	#_psram_spin2_read1
21368     0B 00 00 FF 
2136c     CC 64 86 F1 | 	sub	objptr, ##5836
21370                 | ' psram.read1(varptr(res),adr,2)
21370                 | ' return res
21370     08 CE 05 F1 | 	add	fp, #8
21374     E7 7A E2 FA | 	rdword	result1, fp
21378     08 CE 85 F1 | 	sub	fp, #8
2137c     E7 F0 03 F6 | 	mov	ptra, fp
21380     F2 00 A0 FD | 	call	#popregs_
21384                 | _psdpeek_ret
21384     2D 00 64 FD | 	ret
21388                 | 
21388                 | ' 
21388                 | ' '' ------------------------------- USB keyboard scan to char translator
21388                 | ' 
21388                 | ' function scantochar(key)
21388                 | _scantochar
21388                 | ' 
21388                 | ' select case (key shr 8) and 255
21388     49 81 02 F6 | 	mov	_var01, arg01
2138c     08 80 C6 F0 | 	sar	_var01, #8
21390     FF 80 0E F5 | 	and	_var01, #255 wz
21394     24 00 90 AD |  if_e	jmp	#LR__2680
21398     02 80 0E F2 | 	cmp	_var01, #2 wz
2139c     20 80 0E 52 |  if_ne	cmp	_var01, #32 wz
213a0     30 00 90 AD |  if_e	jmp	#LR__2681
213a4     40 80 0E F2 | 	cmp	_var01, #64 wz
213a8     44 00 90 AD |  if_e	jmp	#LR__2682
213ac     42 80 0E F2 | 	cmp	_var01, #66 wz
213b0     60 80 0E 52 |  if_ne	cmp	_var01, #96 wz
213b4     70 00 90 5D |  if_ne	jmp	#LR__2684
213b8     50 00 90 FD | 	jmp	#LR__2683
213bc                 | LR__2680
213bc     49 7B 02 F6 | 	mov	result1, arg01
213c0     7F 7A 06 F5 | 	and	result1, #127
213c4     02 7A 66 F0 | 	shl	result1, #2
213c8     35 7B 02 F1 | 	add	result1, ptr__dat__
213cc     3D 7B C2 FA | 	rdbyte	result1, result1
213d0     54 00 90 FD | 	jmp	#_scantochar_ret
213d4                 | LR__2681
213d4     49 7B 02 F6 | 	mov	result1, arg01
213d8     7F 7A 06 F5 | 	and	result1, #127
213dc     02 7A 66 F0 | 	shl	result1, #2
213e0     01 7A 06 F1 | 	add	result1, #1
213e4     35 7B 02 F1 | 	add	result1, ptr__dat__
213e8     3D 7B C2 FA | 	rdbyte	result1, result1
213ec     38 00 90 FD | 	jmp	#_scantochar_ret
213f0                 | LR__2682
213f0     49 7B 02 F6 | 	mov	result1, arg01
213f4     7F 7A 06 F5 | 	and	result1, #127
213f8     02 7A 66 F0 | 	shl	result1, #2
213fc     02 7A 06 F1 | 	add	result1, #2
21400     35 7B 02 F1 | 	add	result1, ptr__dat__
21404     3D 7B C2 FA | 	rdbyte	result1, result1
21408     1C 00 90 FD | 	jmp	#_scantochar_ret
2140c                 | LR__2683
2140c     49 7B 02 F6 | 	mov	result1, arg01
21410     7F 7A 06 F5 | 	and	result1, #127
21414     02 7A 66 F0 | 	shl	result1, #2
21418     03 7A 06 F1 | 	add	result1, #3
2141c     35 7B 02 F1 | 	add	result1, ptr__dat__
21420     3D 7B C2 FA | 	rdbyte	result1, result1
21424     00 00 90 FD | 	jmp	#_scantochar_ret
21428                 | LR__2684
21428                 | _scantochar_ret
21428     2D 00 64 FD | 	ret
2142c                 | 
2142c                 | _program
2142c     01 CA 05 F6 | 	mov	COUNT_, #1
21430     E8 00 A0 FD | 	call	#pushregs_
21434     A0 FC BF FD | 	call	#_startpsram
21438     38 00 00 FF 
2143c     34 64 06 F1 | 	add	objptr, ##28724
21440     32 93 02 FB | 	rdlong	arg01, objptr
21444     00 94 06 F6 | 	mov	arg02, #0
21448     F0 03 00 FF 
2144c     00 96 06 F6 | 	mov	arg03, ##516096
21450     2C 00 00 FF 
21454     68 65 86 F1 | 	sub	objptr, ##22888
21458     CC 2E B0 FD | 	call	#_Audio2_003_spin2_start
2145c     3E 97 02 F6 | 	mov	arg03, result2
21460     2C 00 00 FF 
21464     50 65 06 F1 | 	add	objptr, ##22864
21468     32 7B 62 FC | 	wrlong	result1, objptr
2146c     14 64 06 F1 | 	add	objptr, #20
21470     32 97 62 FC | 	wrlong	arg03, objptr
21474     38 00 00 FF 
21478     30 64 86 F1 | 	sub	objptr, ##28720
2147c     32 92 06 F6 | 	mov	arg01, #50
21480     28 38 B0 FD | 	call	#__system___waitms
21484     38 00 00 FF 
21488     30 64 06 F1 | 	add	objptr, ##28720
2148c     32 93 02 FB | 	rdlong	arg01, objptr
21490     38 00 00 FF 
21494     30 64 86 F1 | 	sub	objptr, ##28720
21498     14 92 06 F1 | 	add	arg01, #20
2149c     20 00 80 FF 
214a0     49 01 58 FC | 	wrword	##16384, arg01
214a4     20 2C B0 FD | 	call	#_usbnew_spin2_start
214a8     38 00 00 FF 
214ac     24 64 06 F1 | 	add	objptr, ##28708
214b0     32 7B 62 FC | 	wrlong	result1, objptr
214b4     38 00 00 FF 
214b8     24 64 86 F1 | 	sub	objptr, ##28708
214bc     40 92 06 F6 | 	mov	arg01, #64
214c0     00 94 06 F6 | 	mov	arg02, #0
214c4     00 96 06 F6 | 	mov	arg03, #0
214c8     4C FC BF FD | 	call	#_startvideo
214cc                 | '   mouse_limits[0] := xlim
214cc     0F 00 00 FF 
214d0     C8 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7880
214d4     01 00 80 FF 
214d8     3B FF 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
214dc                 | '   mouse_limits[1] := ylim
214dc     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
214e0     01 00 80 FF 
214e4     3B AF 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
214e8     32 93 02 F6 | 	mov	arg01, objptr
214ec     D5 93 06 F1 | 	add	arg01, #469
214f0                 | '   mouse_outptr := ptr
214f0     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
214f4     3B 93 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
214f8     0F 00 00 FF 
214fc     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
21500     35 95 02 F6 | 	mov	arg02, ptr__dat__
21504     16 00 00 FF 
21508     CA 94 06 F1 | 	add	arg02, ##11466
2150c     10 92 06 F6 | 	mov	arg01, #16
21510     B0 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
21514     10 92 06 F6 | 	mov	arg01, #16
21518     20 94 06 F6 | 	mov	arg02, #32
2151c     20 96 06 F6 | 	mov	arg03, #32
21520     2C 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
21524     09 92 C6 F9 | 	decod	arg01, #9
21528     2C 95 06 F6 | 	mov	arg02, #300
2152c     EC 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
21530     32 97 02 F6 | 	mov	arg03, objptr
21534     51 00 00 FF 
21538     64 65 06 F1 | 	add	objptr, ##41828
2153c     32 95 02 F6 | 	mov	arg02, objptr
21540     4A 97 62 FC | 	wrlong	arg03, arg02
21544     04 94 06 F1 | 	add	arg02, #4
21548     4A 71 62 FC | 	wrlong	ptr__housekeeper_, arg02
2154c     2F 95 02 F6 | 	mov	arg02, entryptr__
21550     1E 7A 06 F6 | 	mov	result1, #30
21554     28 64 62 FD | 	setq	objptr
21558     4A 7B F2 FC | 	coginit	result1, arg02 wc
2155c     01 7A 66 C6 |  if_b	neg	result1, #1
21560     04 64 86 F1 | 	sub	objptr, #4
21564     32 7B 62 FC | 	wrlong	result1, objptr
21568     01 00 00 FF 
2156c     8C 65 06 F1 | 	add	objptr, ##908
21570     32 01 68 FC | 	wrlong	#0, objptr
21574     1B 00 00 FF 
21578     98 64 86 F1 | 	sub	objptr, ##13976
2157c     32 05 68 FC | 	wrlong	#2, objptr
21580     04 64 06 F1 | 	add	objptr, #4
21584     32 27 69 FC | 	wrlong	#147, objptr
21588     04 64 06 F1 | 	add	objptr, #4
2158c     32 35 69 FC | 	wrlong	#154, objptr
21590     04 64 06 F1 | 	add	objptr, #4
21594     32 09 68 FC | 	wrlong	#4, objptr
21598     04 64 86 F1 | 	sub	objptr, #4
2159c     32 7B 02 FB | 	rdlong	result1, objptr
215a0     14 64 86 F1 | 	sub	objptr, #20
215a4     32 7B 62 FC | 	wrlong	result1, objptr
215a8     04 64 06 F1 | 	add	objptr, #4
215ac     32 01 68 FC | 	wrlong	#0, objptr
215b0     04 64 06 F1 | 	add	objptr, #4
215b4     32 01 68 FC | 	wrlong	#0, objptr
215b8     19 00 00 FF 
215bc     0C 65 06 F1 | 	add	objptr, ##13068
215c0     32 03 68 FC | 	wrlong	#1, objptr
215c4     01 00 00 FF 
215c8     98 65 06 F1 | 	add	objptr, ##920
215cc     32 01 68 FC | 	wrlong	#0, objptr
215d0     35 97 02 F6 | 	mov	arg03, ptr__dat__
215d4     01 00 00 FF 
215d8     00 96 06 F1 | 	add	arg03, ##512
215dc     08 64 06 F1 | 	add	objptr, #8
215e0     32 97 62 FC | 	wrlong	arg03, objptr
215e4     04 64 86 F1 | 	sub	objptr, #4
215e8     03 00 80 FF 
215ec     32 3D 69 FC | 	wrlong	##1694, objptr
215f0     0D 00 00 FF 
215f4     74 64 86 F1 | 	sub	objptr, ##6772
215f8     32 19 68 FC | 	wrlong	#12, objptr
215fc     46 00 00 FF 
21600     84 64 86 F1 | 	sub	objptr, ##35972
21604     54 D7 BF FD | 	call	#_init_commands
21608     A0 F6 BF FD | 	call	#_init_error_strings
2160c     08 EE BF FD | 	call	#_init_audio
21610     70 3E BF FD | 	call	#_do_new
21614     38 00 00 FF 
21618     5C 64 06 F1 | 	add	objptr, ##28764
2161c     32 93 02 FB | 	rdlong	arg01, objptr
21620     04 64 86 F1 | 	sub	objptr, #4
21624     32 95 02 FB | 	rdlong	arg02, objptr
21628     38 00 00 FF 
2162c     58 64 86 F1 | 	sub	objptr, ##28760
21630     B4 17 B0 FD | 	call	#_hg010b_spin2_cls
21634     38 00 00 FF 
21638     60 64 06 F1 | 	add	objptr, ##28768
2163c     32 93 02 FB | 	rdlong	arg01, objptr
21640     38 00 00 FF 
21644     60 64 86 F1 | 	sub	objptr, ##28768
21648     D0 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
2164c                 | ' 
2164c                 | ' leading_spaces:=amount
2164c     01 00 00 FF 
21650     B6 64 06 F1 | 	add	objptr, ##694
21654     32 05 68 FC | 	wrlong	#2, objptr
21658     01 00 00 FF 
2165c     B6 64 86 F1 | 	sub	objptr, ##694
21660     9B 01 00 FF 
21664     F3 A6 06 F6 | 	mov	local01, ##@LR__6162
21668     3D 92 06 F6 | 	mov	arg01, #61
2166c     3C 94 06 F6 | 	mov	arg02, #60
21670     3B 96 06 F6 | 	mov	arg03, #59
21674     3A 98 06 F6 | 	mov	arg04, #58
21678     44 7A B0 FD | 	call	#__system___vfs_open_sdcardx
2167c     3D 95 02 F6 | 	mov	arg02, result1
21680     53 93 02 F6 | 	mov	arg01, local01
21684     FC 36 B0 FD | 	call	#__system___mount
21688     9B 01 00 FF 
2168c     F7 92 06 F6 | 	mov	arg01, ##@LR__6163
21690     B4 39 B0 FD | 	call	#__system___chdir
21694     9B 01 00 FF 
21698     FF A6 06 F6 | 	mov	local01, ##@LR__6164
2169c     4B 00 00 FF 
216a0     B4 64 06 F1 | 	add	objptr, ##38580
216a4     32 A7 62 FC | 	wrlong	local01, objptr
216a8     13 00 00 FF 
216ac     60 64 86 F1 | 	sub	objptr, ##9824
216b0     32 93 02 FB | 	rdlong	arg01, objptr
216b4     38 00 00 FF 
216b8     54 64 86 F1 | 	sub	objptr, ##28756
216bc     01 92 66 F0 | 	shl	arg01, #1
216c0     01 94 06 F6 | 	mov	arg02, #1
216c4     D4 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
216c8                 | ' init_commands
216c8                 | ' init_error_strings
216c8                 | ' init_audio
216c8                 | ' do_new
216c8                 | ' cls(ink, paper)
216c8                 | ' v.setfontfamily(font) 				' use ST Mono font
216c8                 | ' v.setleadingspaces(2)
216c8                 | ' mount "/sd", _vfs_open_sdcard()
216c8                 | ' chdir "/sd/bas"
216c8                 | ' currentdir$="/sd/bas"
216c8                 | ' position 2*editor_spaces,1 : print ver$
216c8     00 92 06 F6 | 	mov	arg01, #0
216cc     6C 88 B0 FD | 	call	#__system___getiolock_0622
216d0     3D 93 02 F6 | 	mov	arg01, result1
216d4     E0 32 B0 FD | 	call	#__system___lockmem
216d8     18 00 00 FF 
216dc     40 6B 06 F1 | 	add	ptr__dat__, ##12608
216e0     35 95 02 FB | 	rdlong	arg02, ptr__dat__
216e4     18 00 00 FF 
216e8     40 6B 86 F1 | 	sub	ptr__dat__, ##12608
216ec     00 92 06 F6 | 	mov	arg01, #0
216f0     00 96 06 F6 | 	mov	arg03, #0
216f4     B4 3F B0 FD | 	call	#__system___basic_print_string
216f8     00 92 06 F6 | 	mov	arg01, #0
216fc     0A 94 06 F6 | 	mov	arg02, #10
21700     00 96 06 F6 | 	mov	arg03, #0
21704     4C 3F B0 FD | 	call	#__system___basic_print_char
21708     00 92 06 F6 | 	mov	arg01, #0
2170c     2C 88 B0 FD | 	call	#__system___getiolock_0622
21710     3D 01 68 FC | 	wrlong	#0, result1
21714     53 00 00 FF 
21718     F0 64 06 F1 | 	add	objptr, ##42736
2171c     32 93 02 FB | 	rdlong	arg01, objptr
21720     0F 00 00 FF 
21724     74 64 86 F1 | 	sub	objptr, ##7796
21728     32 A7 02 FB | 	rdlong	local01, objptr
2172c     44 00 00 FF 
21730     7C 64 86 F1 | 	sub	objptr, ##34940
21734     53 93 82 F1 | 	sub	arg01, local01
21738     00 94 06 F6 | 	mov	arg02, #0
2173c     0A 96 06 F6 | 	mov	arg03, #10
21740     70 4D B0 FD | 	call	#__system__Number_S
21744     3D 93 02 F6 | 	mov	arg01, result1
21748     9B 01 00 FF 
2174c     07 95 06 F6 | 	mov	arg02, ##@LR__6165
21750     C0 32 B0 FD | 	call	#__system___string_concat
21754     3D A7 02 F6 | 	mov	local01, result1
21758     51 00 00 FF 
2175c     58 65 06 F1 | 	add	objptr, ##41816
21760     32 A7 62 FC | 	wrlong	local01, objptr
21764     51 00 00 FF 
21768     58 65 86 F1 | 	sub	objptr, ##41816
2176c                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
2176c     00 92 06 F6 | 	mov	arg01, #0
21770     C8 87 B0 FD | 	call	#__system___getiolock_0622
21774     3D 93 02 F6 | 	mov	arg01, result1
21778     3C 32 B0 FD | 	call	#__system___lockmem
2177c     51 00 00 FF 
21780     58 65 06 F1 | 	add	objptr, ##41816
21784     32 95 02 FB | 	rdlong	arg02, objptr
21788     51 00 00 FF 
2178c     58 65 86 F1 | 	sub	objptr, ##41816
21790     00 92 06 F6 | 	mov	arg01, #0
21794     00 96 06 F6 | 	mov	arg03, #0
21798     10 3F B0 FD | 	call	#__system___basic_print_string
2179c     00 92 06 F6 | 	mov	arg01, #0
217a0     0A 94 06 F6 | 	mov	arg02, #10
217a4     00 96 06 F6 | 	mov	arg03, #0
217a8     A8 3E B0 FD | 	call	#__system___basic_print_char
217ac     00 92 06 F6 | 	mov	arg01, #0
217b0     88 87 B0 FD | 	call	#__system___getiolock_0622
217b4     3D 01 68 FC | 	wrlong	#0, result1
217b8     38 00 00 FF 
217bc     54 64 06 F1 | 	add	objptr, ##28756
217c0     32 93 02 FB | 	rdlong	arg01, objptr
217c4     38 00 00 FF 
217c8     54 64 86 F1 | 	sub	objptr, ##28756
217cc     01 92 66 F0 | 	shl	arg01, #1
217d0     04 94 06 F6 | 	mov	arg02, #4
217d4     C4 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
217d8                 | ' position 2*editor_spaces,4 : print "Ready"
217d8     00 92 06 F6 | 	mov	arg01, #0
217dc     5C 87 B0 FD | 	call	#__system___getiolock_0622
217e0     3D 93 02 F6 | 	mov	arg01, result1
217e4     D0 31 B0 FD | 	call	#__system___lockmem
217e8     9B 01 00 FF 
217ec     19 95 06 F6 | 	mov	arg02, ##@LR__6166
217f0     00 92 06 F6 | 	mov	arg01, #0
217f4     00 96 06 F6 | 	mov	arg03, #0
217f8     B0 3E B0 FD | 	call	#__system___basic_print_string
217fc     00 92 06 F6 | 	mov	arg01, #0
21800     0A 94 06 F6 | 	mov	arg02, #10
21804     00 96 06 F6 | 	mov	arg03, #0
21808     48 3E B0 FD | 	call	#__system___basic_print_char
2180c     00 92 06 F6 | 	mov	arg01, #0
21810     28 87 B0 FD | 	call	#__system___getiolock_0622
21814     3D 01 68 FC | 	wrlong	#0, result1
21818     00 94 06 F6 | 	mov	arg02, #0
2181c     01 94 D6 F7 | 	test	arg02, #1 wc
21820     5A 4C 64 FD | 	drvc	#38
21824     01 94 D6 F7 | 	test	arg02, #1 wc
21828     5A 4E 64 FD | 	drvc	#39
2182c     9B 01 00 FF 
21830     1F A7 06 F6 | 	mov	local01, ##@LR__6167
21834     53 00 00 FF 
21838     1C 65 06 F1 | 	add	objptr, ##42780
2183c     32 A7 62 FC | 	wrlong	local01, objptr
21840     04 64 06 F1 | 	add	objptr, #4
21844     FF FF FF FF 
21848     32 FF 6B FC | 	wrlong	##-1, objptr
2184c     0C 64 06 F1 | 	add	objptr, #12
21850     32 01 68 FC | 	wrlong	#0, objptr
21854     53 00 00 FF 
21858     2C 65 86 F1 | 	sub	objptr, ##42796
2185c                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
2185c                 | ' loadname="noname.bas"
2185c                 | ' do_insert=-1
2185c                 | ' inload=0
2185c                 | ' 
2185c                 | ' open "/sd/bas/autorun.bas" for input as #9
2185c     9B 01 00 FF 
21860     2A 95 06 F6 | 	mov	arg02, ##@LR__6168
21864     09 92 06 F6 | 	mov	arg01, #9
21868     00 96 06 F6 | 	mov	arg03, #0
2186c     F8 3C B0 FD | 	call	#__system___basic_open_string
21870     20 68 06 F1 | 	add	ptr___system__dat__, #32
21874     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
21878     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
2187c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
21880     53 00 00 FF 
21884     30 65 06 F1 | 	add	objptr, ##42800
21888     32 7B 62 FC | 	wrlong	result1, objptr
2188c     53 00 00 FF 
21890     30 65 86 F1 | 	sub	objptr, ##42800
21894                 | ' err=geterr()
21894                 | ' close #9
21894     09 92 06 F6 | 	mov	arg01, #9
21898     F8 7C B0 FD | 	call	#__system__close
2189c                 | ' if err=0 then line$="run autorun.bas" : interpret
2189c     53 00 00 FF 
218a0     30 65 06 F1 | 	add	objptr, ##42800
218a4     32 A7 0A FB | 	rdlong	local01, objptr wz
218a8     53 00 00 FF 
218ac     30 65 86 F1 | 	sub	objptr, ##42800
218b0     9B 01 00 AF 
218b4     3E A7 06 A6 |  if_e	mov	local01, ##@LR__6169
218b8     38 00 00 AF 
218bc     3C 64 06 A1 |  if_e	add	objptr, ##28732
218c0     32 A7 62 AC |  if_e	wrlong	local01, objptr
218c4     38 00 00 AF 
218c8     3C 64 86 A1 |  if_e	sub	objptr, ##28732
218cc     90 00 BE AD |  if_e	call	#_interpret
218d0                 | ' 
218d0                 | ' 
218d0                 | ' '-------------------------------------------------------------------------------------------------------- 
218d0                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
218d0                 | ' '--------------------------------------------------------------------------------------------------------
218d0                 | ' 
218d0                 | ' do
218d0                 | LR__2690
218d0     30 F0 BD FD | 	call	#_edit
218d4     3D A7 02 F6 | 	mov	local01, result1
218d8     38 00 00 FF 
218dc     3C 64 06 F1 | 	add	objptr, ##28732
218e0     32 A7 62 FC | 	wrlong	local01, objptr
218e4     38 00 00 FF 
218e8     3C 64 86 F1 | 	sub	objptr, ##28732
218ec     70 00 BE FD | 	call	#_interpret
218f0     9B 01 00 FF 
218f4     4E A7 06 F6 | 	mov	local01, ##@LR__6170
218f8     38 00 00 FF 
218fc     3C 64 06 F1 | 	add	objptr, ##28732
21900     32 A7 62 FC | 	wrlong	local01, objptr
21904     38 00 00 FF 
21908     3C 64 86 F1 | 	sub	objptr, ##28732
2190c     C0 FF 9F FD | 	jmp	#LR__2690
21910     E7 F0 03 F6 | 	mov	ptra, fp
21914     F2 00 A0 FD | 	call	#popregs_
21918                 | _program_ret
21918     2D 00 64 FD | 	ret
2191c                 | 
2191c                 | ' '' this is not a main program.
2191c                 | ' 
2191c                 | ' '****************************************************************************************************************
2191c                 | ' '                                                                                                             	*
2191c                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
2191c                 | ' '                                                                                                            	*
2191c                 | ' ' base - HDMI base pin												*
2191c                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
2191c                 | ' '														*
2191c                 | ' '														*
2191c                 | ' '****************************************************************************************************************
2191c                 | ' 
2191c                 | ' pub start(base,mb):result |i
2191c                 | _hg010b_spin2_start
2191c                 | ' 
2191c                 | ' '--------------------------- initialize pointers and variables
2191c                 | ' 
2191c                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
2191c     34 64 06 F1 | 	add	objptr, #52
21920     32 7B 02 F6 | 	mov	result1, objptr
21924     28 64 86 F1 | 	sub	objptr, #40
21928     32 7B 62 FC | 	wrlong	result1, objptr
2192c                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
2192c                 | ' hdmibase:=base							' HDMI base pin, 8*n
2192c     18 64 06 F1 | 	add	objptr, #24
21930     32 93 62 FC | 	wrlong	arg01, objptr
21934                 | ' mailbox_ptr:=mb		
21934     04 64 06 F1 | 	add	objptr, #4
21938     32 95 62 FC | 	wrlong	arg02, objptr
2193c                 | ' mailbox0:=mb				' PSRAM mailbox pointer
2193c     C1 65 06 F1 | 	add	objptr, #449
21940     32 95 62 FC | 	wrlong	arg02, objptr
21944                 | ' sprite_ptr:=@spr1ptr
21944     D8 64 86 F1 | 	sub	objptr, #216
21948     32 7B 02 F6 | 	mov	result1, objptr
2194c     E5 64 86 F1 | 	sub	objptr, #229
21950     32 7B 62 FC | 	wrlong	result1, objptr
21954                 | ' 
21954                 | ' 		'
21954                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
21954     E5 64 06 F1 | 	add	objptr, #229
21958     32 7B 02 FB | 	rdlong	result1, objptr
2195c     D0 7A 06 F1 | 	add	result1, #208
21960     3D 11 58 FC | 	wrword	#8, result1
21964                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
21964     32 97 02 FB | 	rdlong	arg03, objptr
21968     D2 96 06 F1 | 	add	arg03, #210
2196c     4B 21 58 FC | 	wrword	#16, arg03
21970                 | ' leading_spaces:=0				'
21970     A5 65 06 F1 | 	add	objptr, #421
21974     32 01 68 FC | 	wrlong	#0, objptr
21978                 | ' 
21978                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
21978     99 64 86 F1 | 	sub	objptr, #153
2197c     00 00 A0 FF 
21980     32 0F 68 FC | 	wrlong	##1073741831, objptr
21984                 | ' emptydl[1]:=0
21984     04 64 06 F1 | 	add	objptr, #4
21988     32 01 68 FC | 	wrlong	#0, objptr
2198c                 | ' 
2198c                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
2198c                 | ' 
2198c                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
2198c     28 65 86 F1 | 	sub	objptr, #296
21990     32 03 68 FC | 	wrlong	#1, objptr
21994                 | ' if s_debug<>0
21994                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
21994     20 00 80 FF 
21998     32 01 68 FC | 	wrlong	##16384, objptr
2199c     F9 64 86 F1 | 	sub	objptr, #249
219a0                 | ' setmode()							' set the mode, see below
219a0     18 03 B0 FD | 	call	#_hg010b_spin2_setmode
219a4                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
219a4     49 64 06 F1 | 	add	objptr, #73
219a8     32 7B 02 F6 | 	mov	result1, objptr
219ac     35 64 86 F1 | 	sub	objptr, #53
219b0     32 7B 62 FC | 	wrlong	result1, objptr
219b4                 | ' cursor_ptr:=@cursor_x						
219b4     28 64 06 F1 | 	add	objptr, #40
219b8     32 97 02 F6 | 	mov	arg03, objptr
219bc     2C 64 86 F1 | 	sub	objptr, #44
219c0     32 97 62 FC | 	wrlong	arg03, objptr
219c4                 | ' fontnum:=0  							' start with a PC type font 
219c4     55 64 06 F1 | 	add	objptr, #85
219c8     32 01 68 FC | 	wrlong	#0, objptr
219cc                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
219cc     1C 64 06 F1 | 	add	objptr, #28
219d0     32 93 02 F6 | 	mov	arg01, objptr
219d4     81 64 86 F1 | 	sub	objptr, #129
219d8     37 95 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
219dc     1C 00 00 FF 
219e0     80 94 06 F1 | 	add	arg02, ##14464
219e4     10 96 06 F6 | 	mov	arg03, #16
219e8     7C 2E B0 FD | 	call	#__system____builtin_memmove
219ec                 | ' leading_spaces:=0
219ec     01 00 00 FF 
219f0     B6 64 06 F1 | 	add	objptr, ##694
219f4     32 01 68 FC | 	wrlong	#0, objptr
219f8     01 00 00 FF 
219fc     B6 64 86 F1 | 	sub	objptr, ##694
21a00                 | ' '---------------------------- initialize a cursor (MSDOS type)
21a00                 | ' 
21a00                 | ' initcursor(154)
21a00     9A 92 06 F6 | 	mov	arg01, #154
21a04     74 00 B0 FD | 	call	#_hg010b_spin2_initcursor
21a08                 | ' 
21a08                 | ' '---------------------------- start the cog
21a08                 | ' 
21a08                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
21a08     37 95 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
21a0c     1C 00 00 FF 
21a10     90 94 06 F1 | 	add	arg02, ##14480
21a14     32 97 02 F6 | 	mov	arg03, objptr
21a18     14 96 06 F1 | 	add	arg03, #20
21a1c     10 7A 06 F6 | 	mov	result1, #16
21a20     28 96 62 FD | 	setq	arg03
21a24     4A 7B F2 FC | 	coginit	result1, arg02 wc
21a28     01 7A 66 C6 |  if_b	neg	result1, #1
21a2c     30 64 06 F1 | 	add	objptr, #48
21a30     32 7B 62 FC | 	wrlong	result1, objptr
21a34     30 64 86 F1 | 	sub	objptr, #48
21a38                 | ' waitms(40)							' wait for stabilize
21a38     28 92 06 F6 | 	mov	arg01, #40
21a3c     6C 32 B0 FD | 	call	#__system___waitms
21a40                 | ' return cog							' return the driver's cog #
21a40     30 64 06 F1 | 	add	objptr, #48
21a44     32 7B 02 FB | 	rdlong	result1, objptr
21a48     30 64 86 F1 | 	sub	objptr, #48
21a4c                 | _hg010b_spin2_start_ret
21a4c     2D 00 64 FD | 	ret
21a50                 | 
21a50                 | ' 
21a50                 | ' 
21a50                 | ' '**************************************************************************************************************** 
21a50                 | ' '                                                                                                             	*
21a50                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
21a50                 | ' '  Mode number - see start() above or bits below								*
21a50                 | ' '                                                                                                             	*
21a50                 | ' '****************************************************************************************************************
21a50                 | ' 
21a50                 | ' 
21a50                 | ' pub restorepalette()
21a50                 | _hg010b_spin2_restorepalette
21a50                 | ' 
21a50                 | ' longmove(@ataripalette,@ataripalette2,256)
21a50     18 00 00 FF 
21a54     40 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##12352
21a58     37 93 02 F6 | 	mov	arg01, ptr__hg010b_spin2_dat__
21a5c     02 00 00 FF 
21a60     00 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
21a64     37 95 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
21a68     1A 00 00 FF 
21a6c     40 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##13376
21a70     00 97 06 F6 | 	mov	arg03, #256
21a74     84 2E B0 FD | 	call	#__system__longmove
21a78                 | _hg010b_spin2_restorepalette_ret
21a78     2D 00 64 FD | 	ret
21a7c                 | 
21a7c                 | ' 
21a7c                 | ' '---------------------------- initialize a cursor (MSDOS type)
21a7c                 | ' pub initcursor(color) |i
21a7c                 | _hg010b_spin2_initcursor
21a7c     03 CA 05 F6 | 	mov	COUNT_, #3
21a80     E8 00 A0 FD | 	call	#pushregs_
21a84     49 A7 02 F6 | 	mov	local01, arg01
21a88                 | ' 
21a88                 | ' cursor_x:=0							' place the cursor at 0:0
21a88     3C 64 06 F1 | 	add	objptr, #60
21a8c     32 01 58 FC | 	wrword	#0, objptr
21a90                 | ' cursor_y:=0
21a90     02 64 06 F1 | 	add	objptr, #2
21a94     32 01 48 FC | 	wrbyte	#0, objptr
21a98                 | ' repeat i from 0 to 111
21a98     00 A8 06 F6 | 	mov	local02, #0
21a9c     F8 65 06 F1 | 	add	objptr, #504
21aa0     D7 0C 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
21aa4                 | LR__2700
21aa4                 | '   cursor[i]:=0
21aa4     54 AB 02 F6 | 	mov	local03, local02
21aa8     32 AB 02 F1 | 	add	local03, objptr
21aac     55 01 48 FC | 	wrbyte	#0, local03
21ab0     01 A8 06 F1 | 	add	local02, #1
21ab4     70 A8 56 F2 | 	cmps	local02, #112 wc
21ab8     E8 FF 9F CD |  if_b	jmp	#LR__2700
21abc                 | LR__2701
21abc                 | ' repeat i from 112 to 127
21abc     70 A8 06 F6 | 	mov	local02, #112
21ac0     D7 0C 48 FB | 	callpa	#(@LR__2703-@LR__2702)>>2,fcache_load_ptr_
21ac4                 | LR__2702
21ac4                 | '   cursor[i]:=color  
21ac4     54 AB 02 F6 | 	mov	local03, local02
21ac8     32 AB 02 F1 | 	add	local03, objptr
21acc     55 A7 42 FC | 	wrbyte	local01, local03
21ad0     01 A8 06 F1 | 	add	local02, #1
21ad4     80 A8 16 F2 | 	cmp	local02, #128 wc
21ad8     E8 FF 9F CD |  if_b	jmp	#LR__2702
21adc                 | LR__2703
21adc     01 00 00 FF 
21ae0     36 64 86 F1 | 	sub	objptr, ##566
21ae4                 | ' 'repeat i from 0 to 127
21ae4                 | ' '  if ((i/8)//2)
21ae4                 | ' '    cursor[i]:=15
21ae4                 | ' '  else
21ae4                 | ' '    cursor[i]:=0
21ae4                 | ' '  if i>=120    
21ae4                 | ' '    cursor[i]:=40
21ae4                 | ' setspriteptr(17,@cursor)
21ae4     32 95 02 F6 | 	mov	arg02, objptr
21ae8     01 00 00 FF 
21aec     36 94 06 F1 | 	add	arg02, ##566
21af0     11 92 06 F6 | 	mov	arg01, #17
21af4     CC 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
21af8                 | ' setspritesize(17,8,16)
21af8     11 92 06 F6 | 	mov	arg01, #17
21afc     08 94 06 F6 | 	mov	arg02, #8
21b00     10 96 06 F6 | 	mov	arg03, #16
21b04     48 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
21b08                 | ' setspritepos(17,0,0)
21b08     11 92 06 F6 | 	mov	arg01, #17
21b0c     00 94 06 F6 | 	mov	arg02, #0
21b10     00 96 06 F6 | 	mov	arg03, #0
21b14     D0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
21b18                 | ' cursorshape:=14
21b18     0B 00 00 FF 
21b1c     C6 64 06 F1 | 	add	objptr, ##5830
21b20     32 1D 68 FC | 	wrlong	#14, objptr
21b24                 | ' cursorcolor:=color
21b24     04 64 86 F1 | 	sub	objptr, #4
21b28     32 A7 62 FC | 	wrlong	local01, objptr
21b2c     0B 00 00 FF 
21b30     C2 64 86 F1 | 	sub	objptr, ##5826
21b34     E7 F0 03 F6 | 	mov	ptra, fp
21b38     F2 00 A0 FD | 	call	#popregs_
21b3c                 | _hg010b_spin2_initcursor_ret
21b3c     2D 00 64 FD | 	ret
21b40                 | 
21b40                 | ' 
21b40                 | ' pub setcursorshape(shape) | i
21b40                 | _hg010b_spin2_setcursorshape
21b40                 | ' 
21b40                 | ' cursorshape:=shape
21b40     0B 00 00 FF 
21b44     C6 64 06 F1 | 	add	objptr, ##5830
21b48     32 93 62 FC | 	wrlong	arg01, objptr
21b4c                 | ' repeat i from 0 to (8*cursorshape)-1
21b4c     00 80 06 F6 | 	mov	_var01, #0
21b50     49 83 02 F6 | 	mov	_var02, arg01
21b54     03 82 66 F0 | 	shl	_var02, #3
21b58     01 82 86 F1 | 	sub	_var02, #1
21b5c     00 82 56 F2 | 	cmps	_var02, #0 wc
21b60     01 84 86 F6 | 	negc	_var03, #1
21b64     42 87 02 F6 | 	mov	_var04, _var03
21b68     42 83 02 F1 | 	add	_var02, _var03
21b6c     0A 00 00 FF 
21b70     90 64 86 F1 | 	sub	objptr, ##5264
21b74     D7 0C 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
21b78                 | LR__2710
21b78                 | '   cursor[i]:=0
21b78     40 85 02 F6 | 	mov	_var03, _var01
21b7c     32 85 02 F1 | 	add	_var03, objptr
21b80     42 01 48 FC | 	wrbyte	#0, _var03
21b84     43 81 02 F1 | 	add	_var01, _var04
21b88     41 81 0A F2 | 	cmp	_var01, _var02 wz
21b8c     E8 FF 9F 5D |  if_ne	jmp	#LR__2710
21b90                 | LR__2711
21b90                 | ' repeat i from 8*cursorshape to 127
21b90     0A 00 00 FF 
21b94     90 64 06 F1 | 	add	objptr, ##5264
21b98     32 87 02 FB | 	rdlong	_var04, objptr
21b9c     43 81 02 F6 | 	mov	_var01, _var04
21ba0     03 80 66 F0 | 	shl	_var01, #3
21ba4     0B 00 00 FF 
21ba8     C6 64 86 F1 | 	sub	objptr, ##5830
21bac     03 86 66 F0 | 	shl	_var04, #3
21bb0     80 86 56 F2 | 	cmps	_var04, #128 wc
21bb4     01 84 A6 F6 | 	negnc	_var03, #1
21bb8     7F 82 06 F6 | 	mov	_var02, #127
21bbc     42 83 02 F1 | 	add	_var02, _var03
21bc0     D7 1A 48 FB | 	callpa	#(@LR__2713-@LR__2712)>>2,fcache_load_ptr_
21bc4                 | LR__2712
21bc4                 | '   cursor[i]:=cursorcolor
21bc4     40 87 02 F6 | 	mov	_var04, _var01
21bc8     01 00 00 FF 
21bcc     36 64 06 F1 | 	add	objptr, ##566
21bd0     32 87 02 F1 | 	add	_var04, objptr
21bd4     0A 00 00 FF 
21bd8     8C 64 06 F1 | 	add	objptr, ##5260
21bdc     32 93 02 FB | 	rdlong	arg01, objptr
21be0     0B 00 00 FF 
21be4     C2 64 86 F1 | 	sub	objptr, ##5826
21be8     43 93 42 FC | 	wrbyte	arg01, _var04
21bec     42 81 02 F1 | 	add	_var01, _var03
21bf0     41 81 0A F2 | 	cmp	_var01, _var02 wz
21bf4     CC FF 9F 5D |  if_ne	jmp	#LR__2712
21bf8                 | LR__2713
21bf8                 | _hg010b_spin2_setcursorshape_ret
21bf8     2D 00 64 FD | 	ret
21bfc                 | 
21bfc                 | ' 
21bfc                 | ' pub setcursorcolor(color) | i
21bfc                 | _hg010b_spin2_setcursorcolor
21bfc                 | ' 
21bfc                 | ' cursorcolor:=color
21bfc     0B 00 00 FF 
21c00     C2 64 06 F1 | 	add	objptr, ##5826
21c04     32 93 62 FC | 	wrlong	arg01, objptr
21c08                 | ' repeat i from 0 to (8*cursorshape)-1
21c08     00 92 06 F6 | 	mov	arg01, #0
21c0c     04 64 06 F1 | 	add	objptr, #4
21c10     32 81 02 FB | 	rdlong	_var01, objptr
21c14     03 80 66 F0 | 	shl	_var01, #3
21c18     01 80 86 F1 | 	sub	_var01, #1
21c1c     00 80 56 F2 | 	cmps	_var01, #0 wc
21c20     01 82 86 F6 | 	negc	_var02, #1
21c24     41 85 02 F6 | 	mov	_var03, _var02
21c28     41 81 02 F1 | 	add	_var01, _var02
21c2c     0A 00 00 FF 
21c30     90 64 86 F1 | 	sub	objptr, ##5264
21c34     D7 0C 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
21c38                 | LR__2720
21c38                 | '   cursor[i]:=0
21c38     49 83 02 F6 | 	mov	_var02, arg01
21c3c     32 83 02 F1 | 	add	_var02, objptr
21c40     41 01 48 FC | 	wrbyte	#0, _var02
21c44     42 93 02 F1 | 	add	arg01, _var03
21c48     40 93 0A F2 | 	cmp	arg01, _var01 wz
21c4c     E8 FF 9F 5D |  if_ne	jmp	#LR__2720
21c50                 | LR__2721
21c50                 | ' repeat i from 8*cursorshape to 127
21c50     0A 00 00 FF 
21c54     90 64 06 F1 | 	add	objptr, ##5264
21c58     32 85 02 FB | 	rdlong	_var03, objptr
21c5c     42 93 02 F6 | 	mov	arg01, _var03
21c60     03 92 66 F0 | 	shl	arg01, #3
21c64     0B 00 00 FF 
21c68     C6 64 86 F1 | 	sub	objptr, ##5830
21c6c     03 84 66 F0 | 	shl	_var03, #3
21c70     80 84 56 F2 | 	cmps	_var03, #128 wc
21c74     01 82 A6 F6 | 	negnc	_var02, #1
21c78     7F 80 06 F6 | 	mov	_var01, #127
21c7c     41 81 02 F1 | 	add	_var01, _var02
21c80     D7 1A 48 FB | 	callpa	#(@LR__2723-@LR__2722)>>2,fcache_load_ptr_
21c84                 | LR__2722
21c84                 | '   cursor[i]:=cursorcolor
21c84     49 85 02 F6 | 	mov	_var03, arg01
21c88     01 00 00 FF 
21c8c     36 64 06 F1 | 	add	objptr, ##566
21c90     32 85 02 F1 | 	add	_var03, objptr
21c94     0A 00 00 FF 
21c98     8C 64 06 F1 | 	add	objptr, ##5260
21c9c     32 87 02 FB | 	rdlong	_var04, objptr
21ca0     0B 00 00 FF 
21ca4     C2 64 86 F1 | 	sub	objptr, ##5826
21ca8     42 87 42 FC | 	wrbyte	_var04, _var03
21cac     41 93 02 F1 | 	add	arg01, _var02
21cb0     40 93 0A F2 | 	cmp	arg01, _var01 wz
21cb4     CC FF 9F 5D |  if_ne	jmp	#LR__2722
21cb8                 | LR__2723
21cb8                 | _hg010b_spin2_setcursorcolor_ret
21cb8     2D 00 64 FD | 	ret
21cbc                 | 
21cbc                 | '   
21cbc                 | '   
21cbc                 | '   
21cbc                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
21cbc                 | _hg010b_spin2_setmode
21cbc     02 CA 05 F6 | 	mov	COUNT_, #2
21cc0     E8 00 A0 FD | 	call	#pushregs_
21cc4                 | ' 
21cc4                 | ' 
21cc4                 | ' dl_ptr:=@emptydl[0]
21cc4     01 00 00 FF 
21cc8     1D 64 06 F1 | 	add	objptr, ##541
21ccc     32 9B 02 F6 | 	mov	arg05, objptr
21cd0     FD 65 86 F1 | 	sub	objptr, #509
21cd4     32 9B 62 FC | 	wrlong	arg05, objptr
21cd8                 | ' 
21cd8                 | ' if cog>0 
21cd8     10 64 06 F1 | 	add	objptr, #16
21cdc     32 9B 02 FB | 	rdlong	arg05, objptr
21ce0     30 64 86 F1 | 	sub	objptr, #48
21ce4     01 9A 56 F2 | 	cmps	arg05, #1 wc
21ce8                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
21ce8     01 92 06 36 |  if_ae	mov	arg01, #1
21cec     58 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
21cf0                 | ' xres:=1024
21cf0     01 00 00 FF 
21cf4     26 64 06 F1 | 	add	objptr, ##550
21cf8     02 00 80 FF 
21cfc     32 01 68 FC | 	wrlong	##1024, objptr
21d00                 | ' yres:=600
21d00     04 64 06 F1 | 	add	objptr, #4
21d04     01 00 80 FF 
21d08     32 B1 68 FC | 	wrlong	##600, objptr
21d0c                 | ' ppl:=(timings[3])
21d0c     1C 00 00 FF 
21d10     4C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14412
21d14     37 9B 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
21d18     51 65 86 F1 | 	sub	objptr, #337
21d1c     32 9B 62 FC | 	wrlong	arg05, objptr
21d20                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
21d20     10 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, #16
21d24     37 A7 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
21d28     01 A6 66 F0 | 	shl	local01, #1
21d2c     80 64 86 F1 | 	sub	objptr, #128
21d30     32 A7 62 FC | 	wrlong	local01, objptr
21d34                 | ' cpl1:=cpl '' todo remove
21d34     04 64 06 F1 | 	add	objptr, #4
21d38     32 A7 62 FC | 	wrlong	local01, objptr
21d3c                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
21d3c     04 00 00 FF 
21d40     1C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##2076
21d44     41 64 86 F1 | 	sub	objptr, #65
21d48     32 6F 62 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
21d4c                 | ' repeat i from 0 to 3
21d4c     00 A8 06 F6 | 	mov	local02, #0
21d50     04 00 00 FF 
21d54     00 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##2048
21d58     08 64 06 F1 | 	add	objptr, #8
21d5c     D7 20 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
21d60                 | LR__2730
21d60                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
21d60     54 A7 02 F6 | 	mov	local01, local02
21d64     02 A6 66 F0 | 	shl	local01, #2
21d68     37 A7 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
21d6c     32 9B 02 FB | 	rdlong	arg05, objptr
21d70     11 9A 66 F0 | 	shl	arg05, #17
21d74     53 A7 02 FB | 	rdlong	local01, local01
21d78     4D A7 02 F1 | 	add	local01, arg05
21d7c     80 40 38 FF 
21d80     00 A6 06 F1 | 	add	local01, ##1887502336
21d84     54 9B 02 F6 | 	mov	arg05, local02
21d88     02 9A 66 F0 | 	shl	arg05, #2
21d8c     37 9B 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
21d90     4D A7 62 FC | 	wrlong	local01, arg05
21d94     01 A8 06 F1 | 	add	local02, #1
21d98     04 A8 56 F2 | 	cmps	local02, #4 wc
21d9c     C0 FF 9F CD |  if_b	jmp	#LR__2730
21da0                 | LR__2731
21da0     24 64 86 F1 | 	sub	objptr, #36
21da4     1C 00 00 FF 
21da8     40 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
21dac                 | ' 'clkfreq:=timings[9]					    	' set the clock frequency for the mode
21dac                 | ' 'hubset(timings[10])
21dac                 | ' waitms(1)                                                   	' wait for stabilization
21dac     01 92 06 F6 | 	mov	arg01, #1
21db0     F8 2E B0 FD | 	call	#__system___waitms
21db4     1C 00 00 FF 
21db8     6C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14444
21dbc     37 A9 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
21dc0     61 64 06 F1 | 	add	objptr, #97
21dc4     32 A9 62 FC | 	wrlong	local02, objptr
21dc8     54 A7 52 F6 | 	abs	local01, local02 wc
21dcc     04 A6 46 F0 | 	shr	local01, #4
21dd0     53 A7 82 F6 | 	negc	local01, local01
21dd4     9C 64 06 F1 | 	add	objptr, #156
21dd8     32 A7 62 FC | 	wrlong	local01, objptr
21ddc     A4 64 86 F1 | 	sub	objptr, #164
21de0     32 A9 02 FB | 	rdlong	local02, objptr
21de4     08 64 06 F1 | 	add	objptr, #8
21de8     32 A7 02 FB | 	rdlong	local01, objptr
21dec     53 A9 02 FD | 	qmul	local02, local01
21df0                 | ' lines:=timings[11]
21df0                 | ' t_lines:=lines/16
21df0                 | ' buflen:=cpl*lines						' framebuffer length in longs
21df0     29 64 86 F1 | 	sub	objptr, #41
21df4     19 A6 C6 F9 | 	decod	local01, #25
21df8     10 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
21dfc     18 A8 62 FD | 	getqx	local02
21e00     32 A9 62 FC | 	wrlong	local02, objptr
21e04     38 64 86 F1 | 	sub	objptr, #56
21e08     02 A8 66 F0 | 	shl	local02, #2
21e0c     54 A7 82 F1 | 	sub	local01, local02
21e10     32 A7 62 FC | 	wrlong	local01, objptr
21e14     FD 64 06 F1 | 	add	objptr, #253
21e18     32 A9 02 FB | 	rdlong	local02, objptr
21e1c     37 9B 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
21e20     4D A9 02 FD | 	qmul	local02, arg05
21e24                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
21e24                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
21e24     F9 64 86 F1 | 	sub	objptr, #249
21e28                 | ' mode_ptr:=@timings						' set pointers to timings
21e28     1C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
21e2c                 | ' graphmode:=1024+512+192+48							' det global variable
21e2c                 | ' makedl(graphmode)							' make a DL for the mode
21e2c     03 00 00 FF 
21e30     F0 92 06 F6 | 	mov	arg01, ##1776
21e34     18 A8 62 FD | 	getqx	local02
21e38     54 A7 82 F1 | 	sub	local01, local02
21e3c     32 A7 62 FC | 	wrlong	local01, objptr
21e40     14 64 06 F1 | 	add	objptr, #20
21e44     32 6F 62 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
21e48     79 64 06 F1 | 	add	objptr, #121
21e4c     03 00 80 FF 
21e50     32 E1 69 FC | 	wrlong	##1776, objptr
21e54     91 64 86 F1 | 	sub	objptr, #145
21e58     1C 00 00 FF 
21e5c     40 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
21e60     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
21e64                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
21e64     32 A7 02 FB | 	rdlong	local01, objptr
21e68     DD 64 06 F1 | 	add	objptr, #221
21e6c     32 A7 62 FC | 	wrlong	local01, objptr
21e70                 | ' s_font_ptr:=font_ptr
21e70     D5 64 86 F1 | 	sub	objptr, #213
21e74     32 A7 02 FB | 	rdlong	local01, objptr
21e78     D9 64 06 F1 | 	add	objptr, #217
21e7c     32 A7 62 FC | 	wrlong	local01, objptr
21e80                 | ' s_lines:=lines
21e80     80 64 86 F1 | 	sub	objptr, #128
21e84     32 A7 02 FB | 	rdlong	local01, objptr
21e88     84 64 06 F1 | 	add	objptr, #132
21e8c     32 A7 62 FC | 	wrlong	local01, objptr
21e90                 | ' s_buflen:=buflen
21e90     AD 64 86 F1 | 	sub	objptr, #173
21e94     32 A7 02 FB | 	rdlong	local01, objptr
21e98     B5 64 06 F1 | 	add	objptr, #181
21e9c     32 A7 62 FC | 	wrlong	local01, objptr
21ea0                 | ' s_cpl:=cpl
21ea0     94 64 86 F1 | 	sub	objptr, #148
21ea4     32 A7 02 FB | 	rdlong	local01, objptr
21ea8     90 64 06 F1 | 	add	objptr, #144
21eac     32 A7 62 FC | 	wrlong	local01, objptr
21eb0                 | ' s_cpl1:=cpl
21eb0     90 64 86 F1 | 	sub	objptr, #144
21eb4     32 A7 02 FB | 	rdlong	local01, objptr
21eb8     98 64 06 F1 | 	add	objptr, #152
21ebc     32 A7 62 FC | 	wrlong	local01, objptr
21ec0                 | ' st_lines:=t_lines
21ec0     0C 64 06 F1 | 	add	objptr, #12
21ec4     32 A7 02 FB | 	rdlong	local01, objptr
21ec8     04 64 06 F1 | 	add	objptr, #4
21ecc     32 A7 62 FC | 	wrlong	local01, objptr
21ed0                 | ' ppl:=ppl/xzoom  
21ed0     28 64 86 F1 | 	sub	objptr, #40
21ed4     32 0F 03 FB | 	rdlong	muldiva_, objptr
21ed8     2C 64 06 F1 | 	add	objptr, #44
21edc     32 11 03 FB | 	rdlong	muldivb_, objptr
21ee0     05 65 86 F1 | 	sub	objptr, #261
21ee4     FA 00 A0 FD | 	call	#divide_
21ee8     D9 64 06 F1 | 	add	objptr, #217
21eec     32 11 63 FC | 	wrlong	muldivb_, objptr
21ef0                 | ' s_ppl:=ppl
21ef0     1C 64 06 F1 | 	add	objptr, #28
21ef4     32 11 63 FC | 	wrlong	muldivb_, objptr
21ef8     F5 64 86 F1 | 	sub	objptr, #245
21efc                 | ' waitms(20)							' wait 
21efc     14 92 06 F6 | 	mov	arg01, #20
21f00     A8 2D B0 FD | 	call	#__system___waitms
21f04                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
21f04     04 64 06 F1 | 	add	objptr, #4
21f08     32 93 02 FB | 	rdlong	arg01, objptr
21f0c     04 64 86 F1 | 	sub	objptr, #4
21f10     32 97 02 FB | 	rdlong	arg03, objptr
21f14     49 97 82 F1 | 	sub	arg03, arg01
21f18     20 94 06 F6 | 	mov	arg02, #32
21f1c     00 98 06 F6 | 	mov	arg04, #0
21f20     01 9A 06 F6 | 	mov	arg05, #1
21f24     0B 00 00 FF 
21f28     CC 64 06 F1 | 	add	objptr, ##5836
21f2c     A0 1F B0 FD | 	call	#_psram_spin2_fill
21f30     0B 00 00 FF 
21f34     CC 64 86 F1 | 	sub	objptr, ##5836
21f38     E7 F0 03 F6 | 	mov	ptra, fp
21f3c     F2 00 A0 FD | 	call	#popregs_
21f40                 | _hg010b_spin2_setmode_ret
21f40     2D 00 64 FD | 	ret
21f44                 | 
21f44                 | ' 
21f44                 | ' '****************************************************************************************************************
21f44                 | ' '                                                                                                             	*
21f44                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
21f44                 | ' '                                                                                                             	*
21f44                 | ' '****************************************************************************************************************
21f44                 | ' 
21f44                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
21f44                 | _hg010b_spin2_makedl
21f44                 | ' 
21f44                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
21f44                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
21f44                 | ' repeat i from 0 to 11                                                           ' clear DL
21f44     00 80 06 F6 | 	mov	_var01, #0
21f48     ED 65 06 F1 | 	add	objptr, #493
21f4c     D7 0E 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
21f50                 | LR__2740
21f50                 | '   displaylist[i]:=0 
21f50     40 83 02 F6 | 	mov	_var02, _var01
21f54     02 82 66 F0 | 	shl	_var02, #2
21f58     32 83 02 F1 | 	add	_var02, objptr
21f5c     41 01 68 FC | 	wrlong	#0, _var02
21f60     01 80 06 F1 | 	add	_var01, #1
21f64     0C 80 56 F2 | 	cmps	_var01, #12 wc
21f68     E4 FF 9F CD |  if_b	jmp	#LR__2740
21f6c                 | LR__2741
21f6c                 | '                         ' 
21f6c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
21f6c     8C 65 86 F1 | 	sub	objptr, #396
21f70     32 83 02 FB | 	rdlong	_var02, objptr
21f74     14 82 66 F0 | 	shl	_var02, #20
21f78     01 82 06 F1 | 	add	_var02, #1
21f7c     04 64 86 F1 | 	sub	objptr, #4
21f80     32 81 02 FB | 	rdlong	_var01, objptr
21f84     06 80 66 F0 | 	shl	_var01, #6
21f88     40 83 02 F1 | 	add	_var02, _var01
21f8c     90 65 06 F1 | 	add	objptr, #400
21f90     32 83 62 FC | 	wrlong	_var02, objptr
21f94     ED 65 86 F1 | 	sub	objptr, #493
21f98                 | ' displaylist[1]:=buf_ptr<<4+%10  
21f98     32 83 02 FB | 	rdlong	_var02, objptr
21f9c     04 82 66 F0 | 	shl	_var02, #4
21fa0     02 82 06 F1 | 	add	_var02, #2
21fa4     F1 65 06 F1 | 	add	objptr, #497
21fa8     32 83 62 FC | 	wrlong	_var02, objptr
21fac                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
21fac     04 64 86 F1 | 	sub	objptr, #4
21fb0     32 83 02 F6 | 	mov	_var02, objptr
21fb4     CD 65 86 F1 | 	sub	objptr, #461
21fb8     32 83 62 FC | 	wrlong	_var02, objptr
21fbc     20 64 86 F1 | 	sub	objptr, #32
21fc0                 | _hg010b_spin2_makedl_ret
21fc0     2D 00 64 FD | 	ret
21fc4                 | 
21fc4                 | ' 
21fc4                 | ' 
21fc4                 | ' '****************************************************************************************************************
21fc4                 | ' '                                                                        					*
21fc4                 | ' '  Graphic primitives                                                    					*
21fc4                 | ' '                                                                        					*
21fc4                 | ' '****************************************************************************************************************
21fc4                 | ' 
21fc4                 | ' pub setspriteptr(num,ptr)
21fc4                 | _hg010b_spin2_setspriteptr
21fc4                 | ' long[@spr1ptr+12*num]:=ptr
21fc4     32 81 02 F6 | 	mov	_var01, objptr
21fc8     11 81 06 F1 | 	add	_var01, #273
21fcc     49 83 02 F6 | 	mov	_var02, arg01
21fd0     01 82 66 F0 | 	shl	_var02, #1
21fd4     49 83 02 F1 | 	add	_var02, arg01
21fd8     02 82 66 F0 | 	shl	_var02, #2
21fdc     41 81 02 F1 | 	add	_var01, _var02
21fe0     40 95 62 FC | 	wrlong	arg02, _var01
21fe4                 | _hg010b_spin2_setspriteptr_ret
21fe4     2D 00 64 FD | 	ret
21fe8                 | 
21fe8                 | ' 
21fe8                 | ' pub setspritepos(num,x,y)
21fe8                 | _hg010b_spin2_setspritepos
21fe8                 | ' if y>601
21fe8     01 00 00 FF 
21fec     5A 96 56 F2 | 	cmps	arg03, ##602 wc
21ff0                 | '   y:=601
21ff0     01 00 00 3F 
21ff4     59 96 06 36 |  if_ae	mov	arg03, ##601
21ff8                 | ' if x>1024
21ff8     02 00 00 FF 
21ffc     01 94 56 F2 | 	cmps	arg02, ##1025 wc
22000                 | '   x:=1024
22000     0A 94 C6 39 |  if_ae	decod	arg02, #10
22004                 | ' word[@spr1ptr+12*num+4]:=x
22004     11 65 06 F1 | 	add	objptr, #273
22008     32 81 02 F6 | 	mov	_var01, objptr
2200c     49 83 02 F6 | 	mov	_var02, arg01
22010     01 82 66 F0 | 	shl	_var02, #1
22014     49 83 02 F1 | 	add	_var02, arg01
22018     02 82 66 F0 | 	shl	_var02, #2
2201c     41 81 02 F1 | 	add	_var01, _var02
22020     04 80 06 F1 | 	add	_var01, #4
22024     40 95 52 FC | 	wrword	arg02, _var01
22028                 | ' word[@spr1ptr+12*num+6]:=y
22028     32 81 02 F6 | 	mov	_var01, objptr
2202c     49 83 02 F6 | 	mov	_var02, arg01
22030     01 82 66 F0 | 	shl	_var02, #1
22034     49 83 02 F1 | 	add	_var02, arg01
22038     02 82 66 F0 | 	shl	_var02, #2
2203c     41 81 02 F1 | 	add	_var01, _var02
22040     06 80 06 F1 | 	add	_var01, #6
22044     40 97 52 FC | 	wrword	arg03, _var01
22048     11 65 86 F1 | 	sub	objptr, #273
2204c                 | _hg010b_spin2_setspritepos_ret
2204c     2D 00 64 FD | 	ret
22050                 | 
22050                 | ' 
22050                 | ' pub setspritesize(num,w,h)
22050                 | _hg010b_spin2_setspritesize
22050                 | ' word[@spr1ptr+12*num+8]:=w
22050     11 65 06 F1 | 	add	objptr, #273
22054     32 81 02 F6 | 	mov	_var01, objptr
22058     49 83 02 F6 | 	mov	_var02, arg01
2205c     01 82 66 F0 | 	shl	_var02, #1
22060     49 83 02 F1 | 	add	_var02, arg01
22064     02 82 66 F0 | 	shl	_var02, #2
22068     41 81 02 F1 | 	add	_var01, _var02
2206c     08 80 06 F1 | 	add	_var01, #8
22070     40 95 52 FC | 	wrword	arg02, _var01
22074                 | ' word[@spr1ptr+12*num+10]:=h
22074     32 81 02 F6 | 	mov	_var01, objptr
22078     49 83 02 F6 | 	mov	_var02, arg01
2207c     01 82 66 F0 | 	shl	_var02, #1
22080     49 83 02 F1 | 	add	_var02, arg01
22084     02 82 66 F0 | 	shl	_var02, #2
22088     41 81 02 F1 | 	add	_var01, _var02
2208c     0A 80 06 F1 | 	add	_var01, #10
22090     40 97 52 FC | 	wrword	arg03, _var01
22094     11 65 86 F1 | 	sub	objptr, #273
22098                 | _hg010b_spin2_setspritesize_ret
22098     2D 00 64 FD | 	ret
2209c                 | 
2209c                 | ' 
2209c                 | ' 
2209c                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
2209c                 | ' 
2209c                 | ' 
2209c                 | ' pub putpixel(x,y,c)
2209c                 | _hg010b_spin2_putpixel
2209c     04 CA 05 F6 | 	mov	COUNT_, #4
220a0     E8 00 A0 FD | 	call	#pushregs_
220a4     49 A7 02 F6 | 	mov	local01, arg01
220a8                 | ' 
220a8                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
220a8     00 A8 06 F6 | 	mov	local02, #0
220ac     00 A6 56 F2 | 	cmps	local01, #0 wc
220b0     01 A8 66 36 |  if_ae	neg	local02, #1
220b4     E9 64 06 F1 | 	add	objptr, #233
220b8     32 9B 02 FB | 	rdlong	arg05, objptr
220bc     02 9A 66 F0 | 	shl	arg05, #2
220c0     4D A7 52 F2 | 	cmps	local01, arg05 wc
220c4     55 AB A2 F1 | 	subx	local03, local03
220c8     55 A9 02 F5 | 	and	local02, local03
220cc     00 AA 06 F6 | 	mov	local03, #0
220d0     00 94 56 F2 | 	cmps	arg02, #0 wc
220d4     01 AA 66 36 |  if_ae	neg	local03, #1
220d8     55 A9 02 F5 | 	and	local02, local03
220dc     04 64 86 F1 | 	sub	objptr, #4
220e0     32 AB 02 FB | 	rdlong	local03, objptr
220e4     E5 64 86 F1 | 	sub	objptr, #229
220e8     55 95 52 F2 | 	cmps	arg02, local03 wc
220ec     56 AD A2 F1 | 	subx	local04, local04
220f0     56 A9 CA F7 | 	test	local02, local04 wz
220f4     48 00 90 AD |  if_e	jmp	#LR__2750
220f8     DD 64 06 F1 | 	add	objptr, #221
220fc     32 93 02 FB | 	rdlong	arg01, objptr
22100     14 64 06 F1 | 	add	objptr, #20
22104     32 AD 02 FB | 	rdlong	local04, objptr
22108     02 AC 66 F0 | 	shl	local04, #2
2210c     4A AD 02 FD | 	qmul	local04, arg02
22110                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
22110     4B 95 02 F6 | 	mov	arg02, arg03
22114     01 96 06 F6 | 	mov	arg03, #1
22118     00 98 06 F6 | 	mov	arg04, #0
2211c     01 9A 06 F6 | 	mov	arg05, #1
22120     0A 00 00 FF 
22124     DB 65 06 F1 | 	add	objptr, ##5595
22128     18 AC 62 FD | 	getqx	local04
2212c     53 AD 02 F1 | 	add	local04, local01
22130     56 93 02 F1 | 	add	arg01, local04
22134     98 1D B0 FD | 	call	#_psram_spin2_fill
22138     0B 00 00 FF 
2213c     CC 64 86 F1 | 	sub	objptr, ##5836
22140                 | LR__2750
22140     E7 F0 03 F6 | 	mov	ptra, fp
22144     F2 00 A0 FD | 	call	#popregs_
22148                 | _hg010b_spin2_putpixel_ret
22148     2D 00 64 FD | 	ret
2214c                 | 
2214c                 | ' 
2214c                 | ' pub putpixel2(x,y,c)
2214c                 | _hg010b_spin2_putpixel2
2214c     02 CA 05 F6 | 	mov	COUNT_, #2
22150     E8 00 A0 FD | 	call	#pushregs_
22154     DD 64 06 F1 | 	add	objptr, #221
22158     32 A7 02 FB | 	rdlong	local01, objptr
2215c     14 64 06 F1 | 	add	objptr, #20
22160     32 9B 02 FB | 	rdlong	arg05, objptr
22164     02 9A 66 F0 | 	shl	arg05, #2
22168     4A 9B 02 FD | 	qmul	arg05, arg02
2216c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
2216c     4B 95 02 F6 | 	mov	arg02, arg03
22170     01 96 06 F6 | 	mov	arg03, #1
22174     00 98 06 F6 | 	mov	arg04, #0
22178     01 9A 06 F6 | 	mov	arg05, #1
2217c     0A 00 00 FF 
22180     DB 65 06 F1 | 	add	objptr, ##5595
22184     18 A8 62 FD | 	getqx	local02
22188     49 A9 02 F1 | 	add	local02, arg01
2218c     54 A7 02 F1 | 	add	local01, local02
22190     53 93 02 F6 | 	mov	arg01, local01
22194     38 1D B0 FD | 	call	#_psram_spin2_fill
22198     0B 00 00 FF 
2219c     CC 64 86 F1 | 	sub	objptr, ##5836
221a0     E7 F0 03 F6 | 	mov	ptra, fp
221a4     F2 00 A0 FD | 	call	#popregs_
221a8                 | _hg010b_spin2_putpixel2_ret
221a8     2D 00 64 FD | 	ret
221ac                 | 
221ac                 | ' 
221ac                 | ' pub getpixel2(x,y): c 
221ac                 | _hg010b_spin2_getpixel2
221ac     02 CA 05 F6 | 	mov	COUNT_, #2
221b0     E8 00 A0 FD | 	call	#pushregs_
221b4     0C F0 07 F1 | 	add	ptra, #12
221b8     04 CE 05 F1 | 	add	fp, #4
221bc     E7 92 62 FC | 	wrlong	arg01, fp
221c0     04 CE 05 F1 | 	add	fp, #4
221c4     E7 94 62 FC | 	wrlong	arg02, fp
221c8     08 CE 85 F1 | 	sub	fp, #8
221cc     E7 00 68 FC | 	wrlong	#0, fp
221d0     E7 92 02 F6 | 	mov	arg01, fp
221d4     DD 64 06 F1 | 	add	objptr, #221
221d8     32 95 02 FB | 	rdlong	arg02, objptr
221dc     14 64 06 F1 | 	add	objptr, #20
221e0     32 97 02 FB | 	rdlong	arg03, objptr
221e4     02 96 66 F0 | 	shl	arg03, #2
221e8     08 CE 05 F1 | 	add	fp, #8
221ec     E7 7A 02 FB | 	rdlong	result1, fp
221f0     3D 97 02 FD | 	qmul	arg03, result1
221f4                 | ' 
221f4                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
221f4     04 CE 85 F1 | 	sub	fp, #4
221f8     E7 A6 02 FB | 	rdlong	local01, fp
221fc     04 CE 85 F1 | 	sub	fp, #4
22200     01 96 06 F6 | 	mov	arg03, #1
22204     0A 00 00 FF 
22208     DB 65 06 F1 | 	add	objptr, ##5595
2220c     18 A8 62 FD | 	getqx	local02
22210     53 A9 02 F1 | 	add	local02, local01
22214     54 95 02 F1 | 	add	arg02, local02
22218     7C 1B B0 FD | 	call	#_psram_spin2_read1
2221c     0B 00 00 FF 
22220     CC 64 86 F1 | 	sub	objptr, ##5836
22224                 | ' return c
22224     E7 7A 02 FB | 	rdlong	result1, fp
22228     E7 F0 03 F6 | 	mov	ptra, fp
2222c     F2 00 A0 FD | 	call	#popregs_
22230                 | _hg010b_spin2_getpixel2_ret
22230     2D 00 64 FD | 	ret
22234                 | 
22234                 | '   
22234                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
22234                 | ' 
22234                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
22234                 | _hg010b_spin2_fastline
22234     02 CA 05 F6 | 	mov	COUNT_, #2
22238     E8 00 A0 FD | 	call	#pushregs_
2223c     49 A7 02 F6 | 	mov	local01, arg01
22240     4A A9 02 F6 | 	mov	local02, arg02
22244                 | ' 
22244                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
22244     00 96 56 F2 | 	cmps	arg03, #0 wc
22248     F4 00 90 CD |  if_b	jmp	#LR__2760
2224c     01 00 00 FF 
22250     2A 64 06 F1 | 	add	objptr, ##554
22254     32 9B 02 FB | 	rdlong	arg05, objptr
22258     01 00 00 FF 
2225c     2A 64 86 F1 | 	sub	objptr, ##554
22260     4D 97 52 F2 | 	cmps	arg03, arg05 wc
22264     D8 00 90 3D |  if_ae	jmp	#LR__2760
22268     00 A6 56 F2 | 	cmps	local01, #0 wc
2226c     00 A8 56 C2 |  if_b	cmps	local02, #0 wc
22270     CC 00 90 CD |  if_b	jmp	#LR__2760
22274     01 00 00 FF 
22278     26 64 06 F1 | 	add	objptr, ##550
2227c     32 9B 02 FB | 	rdlong	arg05, objptr
22280     01 00 00 FF 
22284     26 64 86 F1 | 	sub	objptr, ##550
22288     4D A7 5A F2 | 	cmps	local01, arg05 wcz
2228c     01 00 00 1F 
22290     26 64 06 11 |  if_a	add	objptr, ##550
22294     32 93 02 1B |  if_a	rdlong	arg01, objptr
22298     01 00 00 1F 
2229c     26 64 86 11 |  if_a	sub	objptr, ##550
222a0     49 A9 5A 12 |  if_a	cmps	local02, arg01 wcz
222a4                 | '   return
222a4     98 00 90 1D |  if_a	jmp	#LR__2760
222a8     54 A7 5A F2 | 	cmps	local01, local02 wcz
222ac     53 9B 02 16 |  if_a	mov	arg05, local01
222b0     54 A7 02 16 |  if_a	mov	local01, local02
222b4     4D A9 02 16 |  if_a	mov	local02, arg05
222b8     00 A6 56 F2 | 	cmps	local01, #0 wc
222bc     00 A6 06 C6 |  if_b	mov	local01, #0
222c0     01 00 00 FF 
222c4     26 64 06 F1 | 	add	objptr, ##550
222c8     32 9B 02 FB | 	rdlong	arg05, objptr
222cc     01 00 00 FF 
222d0     26 64 86 F1 | 	sub	objptr, ##550
222d4     4D A9 52 F2 | 	cmps	local02, arg05 wc
222d8     01 00 00 3F 
222dc     26 64 06 31 |  if_ae	add	objptr, ##550
222e0     32 A9 02 3B |  if_ae	rdlong	local02, objptr
222e4     01 00 00 3F 
222e8     26 64 86 31 |  if_ae	sub	objptr, ##550
222ec     DD 64 06 F1 | 	add	objptr, #221
222f0     32 93 02 FB | 	rdlong	arg01, objptr
222f4     14 64 06 F1 | 	add	objptr, #20
222f8     32 9B 02 FB | 	rdlong	arg05, objptr
222fc     02 9A 66 F0 | 	shl	arg05, #2
22300     4B 9B 02 FD | 	qmul	arg05, arg03
22304                 | ' if x1>x2
22304                 | '   x1,x2:=x2,x1
22304                 | ' if x1<0 
22304                 | '   x1:=0
22304                 | ' if x2>=xres
22304                 | '   x2:=xres-1  
22304     01 A8 86 31 |  if_ae	sub	local02, #1
22308                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
22308     01 96 06 F6 | 	mov	arg03, #1
2230c     54 97 02 F1 | 	add	arg03, local02
22310     53 97 82 F1 | 	sub	arg03, local01
22314     4C 95 02 F6 | 	mov	arg02, arg04
22318     00 98 06 F6 | 	mov	arg04, #0
2231c     01 9A 06 F6 | 	mov	arg05, #1
22320     0A 00 00 FF 
22324     DB 65 06 F1 | 	add	objptr, ##5595
22328     18 A8 62 FD | 	getqx	local02
2232c     53 A9 02 F1 | 	add	local02, local01
22330     54 93 02 F1 | 	add	arg01, local02
22334     98 1B B0 FD | 	call	#_psram_spin2_fill
22338     0B 00 00 FF 
2233c     CC 64 86 F1 | 	sub	objptr, ##5836
22340                 | LR__2760
22340     E7 F0 03 F6 | 	mov	ptra, fp
22344     F2 00 A0 FD | 	call	#popregs_
22348                 | _hg010b_spin2_fastline_ret
22348     2D 00 64 FD | 	ret
2234c                 | 
2234c                 | ' 
2234c                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
2234c                 | _hg010b_spin2_draw
2234c     0E CA 05 F6 | 	mov	COUNT_, #14
22350     E8 00 A0 FD | 	call	#pushregs_
22354     49 A7 02 F6 | 	mov	local01, arg01
22358     4A A9 02 F6 | 	mov	local02, arg02
2235c     4B AB 02 F6 | 	mov	local03, arg03
22360     4C AD 02 F6 | 	mov	local04, arg04
22364     4D AF 02 F6 | 	mov	local05, arg05
22368                 | ' 
22368                 | ' if (y1==y2)
22368     56 A9 0A F2 | 	cmp	local02, local04 wz
2236c     18 00 90 5D |  if_ne	jmp	#LR__2770
22370                 | '   fastline(x1,x2,y1,c)
22370     53 93 02 F6 | 	mov	arg01, local01
22374     55 95 02 F6 | 	mov	arg02, local03
22378     54 97 02 F6 | 	mov	arg03, local02
2237c     57 99 02 F6 | 	mov	arg04, local05
22380     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
22384     F8 00 90 FD | 	jmp	#LR__2776
22388                 | LR__2770
22388                 | ' else  
22388                 | '   x:=x1
22388     53 B1 02 F6 | 	mov	local06, local01
2238c                 | '   y:=y1
2238c     54 B3 02 F6 | 	mov	local07, local02
22390                 | ' 
22390                 | '   if (x1<x2) 
22390     55 A7 52 F2 | 	cmps	local01, local03 wc
22394                 | '     xi:=1
22394     01 B4 06 C6 |  if_b	mov	local08, #1
22398                 | '     dx:=x2-x1
22398     55 B7 02 C6 |  if_b	mov	local09, local03
2239c     53 B7 82 C1 |  if_b	sub	local09, local01
223a0                 | '   else
223a0                 | '     xi:=-1
223a0     01 B4 66 36 |  if_ae	neg	local08, #1
223a4                 | '     dx:=x1-x2
223a4     55 A7 82 31 |  if_ae	sub	local01, local03
223a8     53 B7 02 36 |  if_ae	mov	local09, local01
223ac                 | '   
223ac                 | '   if (y1<y2) 
223ac     56 A9 52 F2 | 	cmps	local02, local04 wc
223b0                 | '     yi:=1
223b0     01 B8 06 C6 |  if_b	mov	local10, #1
223b4                 | '     dy:=y2-y1
223b4     56 BB 02 C6 |  if_b	mov	local11, local04
223b8     54 BB 82 C1 |  if_b	sub	local11, local02
223bc                 | '   else
223bc                 | '     yi:=-1
223bc     01 B8 66 36 |  if_ae	neg	local10, #1
223c0                 | '     dy:=y1-y2
223c0     56 A9 82 31 |  if_ae	sub	local02, local04
223c4     54 BB 02 36 |  if_ae	mov	local11, local02
223c8                 | ' 
223c8                 | '   putpixel(x,y,c)
223c8     57 97 02 F6 | 	mov	arg03, local05
223cc     58 93 02 F6 | 	mov	arg01, local06
223d0     59 95 02 F6 | 	mov	arg02, local07
223d4     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
223d8                 | ' 
223d8                 | '   if (dx>dy)
223d8     5D B7 5A F2 | 	cmps	local09, local11 wcz
223dc     50 00 90 ED |  if_be	jmp	#LR__2772
223e0                 | '     ai:=(dy-dx)*2
223e0     5D BD 02 F6 | 	mov	local12, local11
223e4     5B BD 82 F1 | 	sub	local12, local09
223e8     01 BC 66 F0 | 	shl	local12, #1
223ec                 | '     bi:=dy*2
223ec     01 BA 66 F0 | 	shl	local11, #1
223f0     5D BF 02 F6 | 	mov	local13, local11
223f4                 | '     d:= bi-dx
223f4     5F C1 02 F6 | 	mov	local14, local13
223f8     5B C1 82 F1 | 	sub	local14, local09
223fc                 | '     repeat while (x<>x2) 
223fc                 | LR__2771
223fc     55 B1 0A F2 | 	cmp	local06, local03 wz
22400     7C 00 90 AD |  if_e	jmp	#LR__2775
22404                 | '       if (d>=0) 
22404     00 C0 56 F2 | 	cmps	local14, #0 wc
22408                 | '         x+=xi
22408     5A B1 02 31 |  if_ae	add	local06, local08
2240c                 | '         y+=yi
2240c     5C B3 02 31 |  if_ae	add	local07, local10
22410                 | '         d+=ai
22410     5E C1 02 31 |  if_ae	add	local14, local12
22414                 | '       else
22414                 | '         d+=bi
22414     5F C1 02 C1 |  if_b	add	local14, local13
22418                 | '         x+=xi
22418     5A B1 02 C1 |  if_b	add	local06, local08
2241c                 | '       putpixel(x,y,c)
2241c     58 93 02 F6 | 	mov	arg01, local06
22420     59 95 02 F6 | 	mov	arg02, local07
22424     57 97 02 F6 | 	mov	arg03, local05
22428     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
2242c     CC FF 9F FD | 	jmp	#LR__2771
22430                 | LR__2772
22430                 | '   else
22430                 | '     ai:=(dx-dy)*2
22430     5B BD 02 F6 | 	mov	local12, local09
22434     5D BD 82 F1 | 	sub	local12, local11
22438     01 BC 66 F0 | 	shl	local12, #1
2243c                 | '     bi:=dx*2
2243c     01 B6 66 F0 | 	shl	local09, #1
22440     5B BF 02 F6 | 	mov	local13, local09
22444                 | '     d:=bi-dy
22444     5F C1 02 F6 | 	mov	local14, local13
22448     5D C1 82 F1 | 	sub	local14, local11
2244c                 | '     repeat while (y<>y2)
2244c                 | LR__2773
2244c     56 B3 0A F2 | 	cmp	local07, local04 wz
22450     2C 00 90 AD |  if_e	jmp	#LR__2774
22454                 | '       if (d>=0)
22454     00 C0 56 F2 | 	cmps	local14, #0 wc
22458                 | '         x+=xi
22458     5A B1 02 31 |  if_ae	add	local06, local08
2245c                 | '         y+=yi
2245c     5C B3 02 31 |  if_ae	add	local07, local10
22460                 | '         d+=ai
22460     5E C1 02 31 |  if_ae	add	local14, local12
22464                 | '       else
22464                 | '         d+=bi
22464     5F C1 02 C1 |  if_b	add	local14, local13
22468                 | '         y+=yi
22468     5C B3 02 C1 |  if_b	add	local07, local10
2246c                 | '       putpixel(x, y,c)
2246c     58 93 02 F6 | 	mov	arg01, local06
22470     59 95 02 F6 | 	mov	arg02, local07
22474     57 97 02 F6 | 	mov	arg03, local05
22478     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
2247c     CC FF 9F FD | 	jmp	#LR__2773
22480                 | LR__2774
22480                 | LR__2775
22480                 | LR__2776
22480     E7 F0 03 F6 | 	mov	ptra, fp
22484     F2 00 A0 FD | 	call	#popregs_
22488                 | _hg010b_spin2_draw_ret
22488     2D 00 64 FD | 	ret
2248c                 | 
2248c                 | '  
2248c                 | ' pub fillpush(val) 
2248c                 | _hg010b_spin2_fillpush
2248c                 | ' fillstack[fillptr]:=val
2248c     0B 00 00 FF 
22490     BA 64 06 F1 | 	add	objptr, ##5818
22494     32 81 02 FB | 	rdlong	_var01, objptr
22498     02 80 66 F0 | 	shl	_var01, #2
2249c     0A 00 00 FF 
224a0     00 64 86 F1 | 	sub	objptr, ##5120
224a4     32 81 02 F1 | 	add	_var01, objptr
224a8     40 93 62 FC | 	wrlong	arg01, _var01
224ac                 | ' fillptr+=1   
224ac     0A 00 00 FF 
224b0     00 64 06 F1 | 	add	objptr, ##5120
224b4     32 81 02 FB | 	rdlong	_var01, objptr
224b8     01 80 06 F1 | 	add	_var01, #1
224bc     32 81 62 FC | 	wrlong	_var01, objptr
224c0     0B 00 00 FF 
224c4     BA 64 86 F1 | 	sub	objptr, ##5818
224c8                 | _hg010b_spin2_fillpush_ret
224c8     2D 00 64 FD | 	ret
224cc                 | 
224cc                 | ' 
224cc                 | '     
224cc                 | ' pub fillpop() : val
224cc                 | _hg010b_spin2_fillpop
224cc                 | ' 
224cc                 | ' fillptr-=1
224cc     0B 00 00 FF 
224d0     BA 64 06 F1 | 	add	objptr, ##5818
224d4     32 7B 02 FB | 	rdlong	result1, objptr
224d8     01 7A 86 F1 | 	sub	result1, #1
224dc     32 7B 62 FC | 	wrlong	result1, objptr
224e0                 | ' if fillptr<0
224e0     0B 00 00 FF 
224e4     BA 64 86 F1 | 	sub	objptr, ##5818
224e8     00 7A 56 F2 | 	cmps	result1, #0 wc
224ec                 | '   fillptr:=0
224ec     0B 00 00 CF 
224f0     BA 64 06 C1 |  if_b	add	objptr, ##5818
224f4     32 01 68 CC |  if_b	wrlong	#0, objptr
224f8     0B 00 00 CF 
224fc     BA 64 86 C1 |  if_b	sub	objptr, ##5818
22500                 | '   val:=-12345
22500     E7 FF 7F CF 
22504     C7 81 06 C6 |  if_b	mov	_var01, ##-12345
22508     28 00 90 CD |  if_b	jmp	#LR__2780
2250c                 | ' else 
2250c                 | '   val:=fillstack[fillptr]
2250c     0B 00 00 FF 
22510     BA 64 06 F1 | 	add	objptr, ##5818
22514     32 81 02 FB | 	rdlong	_var01, objptr
22518     02 80 66 F0 | 	shl	_var01, #2
2251c     0A 00 00 FF 
22520     00 64 86 F1 | 	sub	objptr, ##5120
22524     32 81 02 F1 | 	add	_var01, objptr
22528     40 81 02 FB | 	rdlong	_var01, _var01
2252c     01 00 00 FF 
22530     BA 64 86 F1 | 	sub	objptr, ##698
22534                 | LR__2780
22534                 | ' return val
22534     40 7B 02 F6 | 	mov	result1, _var01
22538                 | _hg010b_spin2_fillpop_ret
22538     2D 00 64 FD | 	ret
2253c                 | 
2253c                 | ' 
2253c                 | '       
2253c                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
2253c                 | _hg010b_spin2_fill
2253c     0B CA 05 F6 | 	mov	COUNT_, #11
22540     E8 00 A0 FD | 	call	#pushregs_
22544                 | ' 
22544                 | ' newcolor:=newcolor & 255
22544     4B A7 E2 F8 | 	getbyte	local01, arg03, #0
22548                 | ' oldcolor:=oldcolor & 255
22548     4C A9 E2 F8 | 	getbyte	local02, arg04, #0
2254c                 | ' 
2254c                 | ' if (oldcolor == newcolor) 
2254c     53 A9 0A F2 | 	cmp	local02, local01 wz
22550                 | '   return
22550     70 02 90 AD |  if_e	jmp	#LR__2799
22554                 | ' 
22554                 | ' fillptr:=0
22554     0B 00 00 FF 
22558     BA 64 06 F1 | 	add	objptr, ##5818
2255c     32 01 68 FC | 	wrlong	#0, objptr
22560                 | ' fillmax:=0
22560     04 64 06 F1 | 	add	objptr, #4
22564     32 01 68 FC | 	wrlong	#0, objptr
22568     0B 00 00 FF 
2256c     BE 64 86 F1 | 	sub	objptr, ##5822
22570                 | ' fillpush(x)
22570     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
22574                 | ' fillpush(y)
22574     4A 93 02 F6 | 	mov	arg01, arg02
22578     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
2257c                 | ' y:=fillpop()
2257c     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
22580     3D AB 02 F6 | 	mov	local03, result1
22584                 | ' x:=fillpop()
22584     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
22588     3D AD 02 F6 | 	mov	local04, result1
2258c                 | ' 'pinhigh(38)
2258c                 | ' repeat while (x>-1)       
2258c                 | LR__2790
2258c     00 AC 56 F2 | 	cmps	local04, #0 wc
22590     30 02 90 CD |  if_b	jmp	#LR__2798
22594                 | '  ' pintoggle(39)
22594                 | '   x1 := x
22594     56 AF 02 F6 | 	mov	local05, local04
22598                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
22598                 | LR__2791
22598     00 B0 06 F6 | 	mov	local06, #0
2259c     00 B2 06 F6 | 	mov	local07, #0
225a0     00 AE 56 F2 | 	cmps	local05, #0 wc
225a4     01 B2 66 36 |  if_ae	neg	local07, #1
225a8     00 B2 0E F2 | 	cmp	local07, #0 wz
225ac     00 B0 26 56 |  if_ne	not	local06, #0
225b0     00 B4 06 F6 | 	mov	local08, #0
225b4     00 B6 06 F6 | 	mov	local09, #0
225b8     55 95 02 F6 | 	mov	arg02, local03
225bc     57 93 02 F6 | 	mov	arg01, local05
225c0     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
225c4     54 7B 0A F2 | 	cmp	result1, local02 wz
225c8     00 B6 26 A6 |  if_e	not	local09, #0
225cc     00 B6 0E F2 | 	cmp	local09, #0 wz
225d0     00 B4 26 56 |  if_ne	not	local08, #0
225d4     5A B1 CA F7 | 	test	local06, local08 wz
225d8                 | '     x1--
225d8     01 AE 86 51 |  if_ne	sub	local05, #1
225dc     B8 FF 9F 5D |  if_ne	jmp	#LR__2791
225e0                 | '   x1++
225e0     01 AE 06 F1 | 	add	local05, #1
225e4                 | '   spanabove := 0
225e4     00 B8 06 F6 | 	mov	local10, #0
225e8                 | '   spanbelow := 0
225e8     00 BA 06 F6 | 	mov	local11, #0
225ec                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
225ec                 | LR__2792
225ec     00 B0 06 F6 | 	mov	local06, #0
225f0     02 00 00 FF 
225f4     00 AE 56 F2 | 	cmps	local05, ##1024 wc
225f8     00 B0 26 C6 |  if_b	not	local06, #0
225fc     00 B4 06 F6 | 	mov	local08, #0
22600     00 B6 06 F6 | 	mov	local09, #0
22604     55 95 02 F6 | 	mov	arg02, local03
22608     57 93 02 F6 | 	mov	arg01, local05
2260c     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
22610     54 7B 0A F2 | 	cmp	result1, local02 wz
22614     00 B6 26 A6 |  if_e	not	local09, #0
22618     00 B6 0E F2 | 	cmp	local09, #0 wz
2261c     00 B4 26 56 |  if_ne	not	local08, #0
22620     5A B1 CA F7 | 	test	local06, local08 wz
22624     88 01 90 AD |  if_e	jmp	#LR__2797
22628                 | '     putpixel2 (x1,y, newcolor & 255)
22628     53 97 E2 F8 | 	getbyte	arg03, local01, #0
2262c     57 93 02 F6 | 	mov	arg01, local05
22630     55 95 02 F6 | 	mov	arg02, local03
22634     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
22638                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
22638     00 B0 06 F6 | 	mov	local06, #0
2263c     00 B2 06 F6 | 	mov	local07, #0
22640     00 B8 0E F2 | 	cmp	local10, #0 wz
22644     01 AA 56 A2 |  if_e	cmps	local03, #1 wc
22648     01 B2 66 26 |  if_nc_and_z	neg	local07, #1
2264c     00 B2 0E F2 | 	cmp	local07, #0 wz
22650     00 B0 26 56 |  if_ne	not	local06, #0
22654     00 B4 06 F6 | 	mov	local08, #0
22658     00 B6 06 F6 | 	mov	local09, #0
2265c     55 95 02 F6 | 	mov	arg02, local03
22660     01 94 86 F1 | 	sub	arg02, #1
22664     57 93 02 F6 | 	mov	arg01, local05
22668     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
2266c     54 7B 0A F2 | 	cmp	result1, local02 wz
22670     00 B6 26 A6 |  if_e	not	local09, #0
22674     00 B6 0E F2 | 	cmp	local09, #0 wz
22678     00 B4 26 56 |  if_ne	not	local08, #0
2267c     5A B1 CA F7 | 	test	local06, local08 wz
22680     1C 00 90 AD |  if_e	jmp	#LR__2793
22684                 | '       fillpush(x1)
22684     57 93 02 F6 | 	mov	arg01, local05
22688     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
2268c                 | '       fillpush(y-1)
2268c     55 93 02 F6 | 	mov	arg01, local03
22690     01 92 86 F1 | 	sub	arg01, #1
22694     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
22698                 | '       spanabove := 1 
22698     01 B8 06 F6 | 	mov	local10, #1
2269c     4C 00 90 FD | 	jmp	#LR__2794
226a0                 | LR__2793
226a0                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
226a0     00 B0 06 F6 | 	mov	local06, #0
226a4     00 B2 06 F6 | 	mov	local07, #0
226a8     00 B8 0E F2 | 	cmp	local10, #0 wz
226ac     01 AA 56 52 |  if_ne	cmps	local03, #1 wc
226b0     01 B2 66 16 |  if_a	neg	local07, #1
226b4     00 B2 0E F2 | 	cmp	local07, #0 wz
226b8     00 B0 26 56 |  if_ne	not	local06, #0
226bc     00 B4 06 F6 | 	mov	local08, #0
226c0     00 B6 06 F6 | 	mov	local09, #0
226c4     55 95 02 F6 | 	mov	arg02, local03
226c8     01 94 86 F1 | 	sub	arg02, #1
226cc     57 93 02 F6 | 	mov	arg01, local05
226d0     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
226d4     54 7B 0A F2 | 	cmp	result1, local02 wz
226d8     00 B6 26 56 |  if_ne	not	local09, #0
226dc     00 B6 0E F2 | 	cmp	local09, #0 wz
226e0     00 B4 26 56 |  if_ne	not	local08, #0
226e4     5A B1 CA F7 | 	test	local06, local08 wz
226e8                 | '       spanabove := 0 
226e8     00 B8 06 56 |  if_ne	mov	local10, #0
226ec                 | LR__2794
226ec                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
226ec     00 B0 06 F6 | 	mov	local06, #0
226f0     00 B2 06 F6 | 	mov	local07, #0
226f4     00 BA 0E F2 | 	cmp	local11, #0 wz
226f8     01 00 00 AF 
226fc     3F AA 56 A2 |  if_e	cmps	local03, ##575 wc
22700     01 B2 66 86 |  if_c_and_z	neg	local07, #1
22704     00 B2 0E F2 | 	cmp	local07, #0 wz
22708     00 B0 26 56 |  if_ne	not	local06, #0
2270c     00 B4 06 F6 | 	mov	local08, #0
22710     00 B6 06 F6 | 	mov	local09, #0
22714     55 95 02 F6 | 	mov	arg02, local03
22718     01 94 06 F1 | 	add	arg02, #1
2271c     57 93 02 F6 | 	mov	arg01, local05
22720     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
22724     54 7B 0A F2 | 	cmp	result1, local02 wz
22728     00 B6 26 A6 |  if_e	not	local09, #0
2272c     00 B6 0E F2 | 	cmp	local09, #0 wz
22730     00 B4 26 56 |  if_ne	not	local08, #0
22734     5A B1 CA F7 | 	test	local06, local08 wz
22738     1C 00 90 AD |  if_e	jmp	#LR__2795
2273c                 | '       fillpush(x1)
2273c     57 93 02 F6 | 	mov	arg01, local05
22740     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
22744                 | '       fillpush(y + 1)
22744     55 93 02 F6 | 	mov	arg01, local03
22748     01 92 06 F1 | 	add	arg01, #1
2274c     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
22750                 | '       spanBelow := 1
22750     01 BA 06 F6 | 	mov	local11, #1
22754     50 00 90 FD | 	jmp	#LR__2796
22758                 | LR__2795
22758                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
22758     00 B0 06 F6 | 	mov	local06, #0
2275c     00 B2 06 F6 | 	mov	local07, #0
22760     00 BA 0E F2 | 	cmp	local11, #0 wz
22764     01 00 00 5F 
22768     3F AA 56 52 |  if_ne	cmps	local03, ##575 wc
2276c     01 B2 66 46 |  if_c_and_nz	neg	local07, #1
22770     00 B2 0E F2 | 	cmp	local07, #0 wz
22774     00 B0 26 56 |  if_ne	not	local06, #0
22778     00 B4 06 F6 | 	mov	local08, #0
2277c     00 B6 06 F6 | 	mov	local09, #0
22780     55 95 02 F6 | 	mov	arg02, local03
22784     01 94 06 F1 | 	add	arg02, #1
22788     57 93 02 F6 | 	mov	arg01, local05
2278c     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
22790     54 7B 0A F2 | 	cmp	result1, local02 wz
22794     00 B6 26 56 |  if_ne	not	local09, #0
22798     00 B6 0E F2 | 	cmp	local09, #0 wz
2279c     00 B4 26 56 |  if_ne	not	local08, #0
227a0     5A B1 CA F7 | 	test	local06, local08 wz
227a4                 | '       spanbelow := 0
227a4     00 BA 06 56 |  if_ne	mov	local11, #0
227a8                 | LR__2796
227a8                 | '     x1++
227a8     01 AE 06 F1 | 	add	local05, #1
227ac     3C FE 9F FD | 	jmp	#LR__2792
227b0                 | LR__2797
227b0                 | '   y:=fillpop()
227b0     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
227b4     3D AB 02 F6 | 	mov	local03, result1
227b8                 | '   x:=fillpop()
227b8     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
227bc     3D AD 02 F6 | 	mov	local04, result1
227c0     C8 FD 9F FD | 	jmp	#LR__2790
227c4                 | LR__2798
227c4                 | LR__2799
227c4     E7 F0 03 F6 | 	mov	ptra, fp
227c8     F2 00 A0 FD | 	call	#popregs_
227cc                 | _hg010b_spin2_fill_ret
227cc     2D 00 64 FD | 	ret
227d0                 | 
227d0                 | ' 'pinlow(38)    
227d0                 | ' 
227d0                 | ' '-- A filled circle -----------------------------------------------------
227d0                 | ' 
227d0                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
227d0                 | _hg010b_spin2_fcircle
227d0     08 CA 05 F6 | 	mov	COUNT_, #8
227d4     E8 00 A0 FD | 	call	#pushregs_
227d8     4B A7 02 F6 | 	mov	local01, arg03
227dc     FF FF 7F FF 
227e0     FE A7 06 FD | 	qmul	local01, ##-2
227e4     49 A9 02 F6 | 	mov	local02, arg01
227e8     4A AB 02 F6 | 	mov	local03, arg02
227ec     4C AD 02 F6 | 	mov	local04, arg04
227f0                 | ' 
227f0                 | ' d:=5-4*r
227f0     53 99 02 F6 | 	mov	arg04, local01
227f4     02 98 66 F0 | 	shl	arg04, #2
227f8     05 AE 06 F6 | 	mov	local05, #5
227fc     4C AF 82 F1 | 	sub	local05, arg04
22800                 | ' x:=0
22800     00 B0 06 F6 | 	mov	local06, #0
22804                 | ' y:=r
22804                 | ' da:=(-2*r+5)*4
22804                 | ' db:=3*4
22804     0C B2 06 F6 | 	mov	local07, #12
22808                 | ' repeat while (x<=y) 
22808     18 B4 62 FD | 	getqx	local08
2280c     05 B4 06 F1 | 	add	local08, #5
22810     02 B4 66 F0 | 	shl	local08, #2
22814                 | LR__2800
22814     53 B1 5A F2 | 	cmps	local06, local01 wcz
22818     B4 00 90 1D |  if_a	jmp	#LR__2802
2281c                 | '   fastline(x0-x,x0+x,y0-y,c)
2281c     54 93 02 F6 | 	mov	arg01, local02
22820     58 93 82 F1 | 	sub	arg01, local06
22824     54 95 02 F6 | 	mov	arg02, local02
22828     58 95 02 F1 | 	add	arg02, local06
2282c     55 97 02 F6 | 	mov	arg03, local03
22830     53 97 82 F1 | 	sub	arg03, local01
22834     56 99 02 F6 | 	mov	arg04, local04
22838     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
2283c                 | '   fastline(x0-x,x0+x,y0+y,c)
2283c     54 93 02 F6 | 	mov	arg01, local02
22840     58 93 82 F1 | 	sub	arg01, local06
22844     54 95 02 F6 | 	mov	arg02, local02
22848     58 95 02 F1 | 	add	arg02, local06
2284c     55 97 02 F6 | 	mov	arg03, local03
22850     53 97 02 F1 | 	add	arg03, local01
22854     56 99 02 F6 | 	mov	arg04, local04
22858     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
2285c                 | '   fastline(x0-y,x0+y,y0-x,c)
2285c     54 93 02 F6 | 	mov	arg01, local02
22860     53 93 82 F1 | 	sub	arg01, local01
22864     54 95 02 F6 | 	mov	arg02, local02
22868     53 95 02 F1 | 	add	arg02, local01
2286c     55 97 02 F6 | 	mov	arg03, local03
22870     58 97 82 F1 | 	sub	arg03, local06
22874     56 99 02 F6 | 	mov	arg04, local04
22878     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
2287c                 | '   fastline(x0-y,x0+y,y0+x,c)
2287c     54 93 02 F6 | 	mov	arg01, local02
22880     53 93 82 F1 | 	sub	arg01, local01
22884     54 95 02 F6 | 	mov	arg02, local02
22888     53 95 02 F1 | 	add	arg02, local01
2288c     55 97 02 F6 | 	mov	arg03, local03
22890     58 97 02 F1 | 	add	arg03, local06
22894     56 99 02 F6 | 	mov	arg04, local04
22898     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
2289c                 | '   if d>0 
2289c     01 AE 56 F2 | 	cmps	local05, #1 wc
228a0     18 00 90 CD |  if_b	jmp	#LR__2801
228a4                 | '     d+=da
228a4     5A AF 02 F1 | 	add	local05, local08
228a8                 | '     y-=1
228a8     01 A6 86 F1 | 	sub	local01, #1
228ac                 | '     x+=1
228ac     01 B0 06 F1 | 	add	local06, #1
228b0                 | '     da+=4*4
228b0     10 B4 06 F1 | 	add	local08, #16
228b4                 | '     db+=2*4
228b4     08 B2 06 F1 | 	add	local07, #8
228b8     58 FF 9F FD | 	jmp	#LR__2800
228bc                 | LR__2801
228bc                 | '   else
228bc                 | '     d+=db
228bc     59 AF 02 F1 | 	add	local05, local07
228c0                 | '     x+=1
228c0     01 B0 06 F1 | 	add	local06, #1
228c4                 | '     da+=2*4
228c4     08 B4 06 F1 | 	add	local08, #8
228c8                 | '     db+=2*4
228c8     08 B2 06 F1 | 	add	local07, #8
228cc     44 FF 9F FD | 	jmp	#LR__2800
228d0                 | LR__2802
228d0     E7 F0 03 F6 | 	mov	ptra, fp
228d4     F2 00 A0 FD | 	call	#popregs_
228d8                 | _hg010b_spin2_fcircle_ret
228d8     2D 00 64 FD | 	ret
228dc                 | 
228dc                 | '  
228dc                 | ' '-- A circle ------------------------------------------------------------ 
228dc                 | '  
228dc                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
228dc                 | _hg010b_spin2_circle
228dc     08 CA 05 F6 | 	mov	COUNT_, #8
228e0     E8 00 A0 FD | 	call	#pushregs_
228e4     4B A7 02 F6 | 	mov	local01, arg03
228e8     FF FF 7F FF 
228ec     FE A7 06 FD | 	qmul	local01, ##-2
228f0     49 A9 02 F6 | 	mov	local02, arg01
228f4     4A AB 02 F6 | 	mov	local03, arg02
228f8     4C AD 02 F6 | 	mov	local04, arg04
228fc                 | ' 
228fc                 | '  
228fc                 | ' d:=5-4*r
228fc     53 99 02 F6 | 	mov	arg04, local01
22900     02 98 66 F0 | 	shl	arg04, #2
22904     05 AE 06 F6 | 	mov	local05, #5
22908     4C AF 82 F1 | 	sub	local05, arg04
2290c                 | ' x:=0
2290c     00 B0 06 F6 | 	mov	local06, #0
22910                 | ' y:=r
22910                 | ' da:=(-2*r+5)*4
22910                 | ' db:=3*4
22910     0C B2 06 F6 | 	mov	local07, #12
22914                 | ' repeat while (x<=y) 
22914     18 B4 62 FD | 	getqx	local08
22918     05 B4 06 F1 | 	add	local08, #5
2291c     02 B4 66 F0 | 	shl	local08, #2
22920                 | LR__2810
22920     53 B1 5A F2 | 	cmps	local06, local01 wcz
22924     F4 00 90 1D |  if_a	jmp	#LR__2812
22928                 | '   putpixel(x0-x,y0-y,c)
22928     54 93 02 F6 | 	mov	arg01, local02
2292c     58 93 82 F1 | 	sub	arg01, local06
22930     55 95 02 F6 | 	mov	arg02, local03
22934     53 95 82 F1 | 	sub	arg02, local01
22938     56 97 02 F6 | 	mov	arg03, local04
2293c     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
22940                 | '   putpixel(x0-x,y0+y,c)
22940     54 93 02 F6 | 	mov	arg01, local02
22944     58 93 82 F1 | 	sub	arg01, local06
22948     55 95 02 F6 | 	mov	arg02, local03
2294c     53 95 02 F1 | 	add	arg02, local01
22950     56 97 02 F6 | 	mov	arg03, local04
22954     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
22958                 | '   putpixel(x0+x,y0-y,c)
22958     54 93 02 F6 | 	mov	arg01, local02
2295c     58 93 02 F1 | 	add	arg01, local06
22960     55 95 02 F6 | 	mov	arg02, local03
22964     53 95 82 F1 | 	sub	arg02, local01
22968     56 97 02 F6 | 	mov	arg03, local04
2296c     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
22970                 | '   putpixel(x0+x,y0+y,c)
22970     54 93 02 F6 | 	mov	arg01, local02
22974     58 93 02 F1 | 	add	arg01, local06
22978     55 95 02 F6 | 	mov	arg02, local03
2297c     53 95 02 F1 | 	add	arg02, local01
22980     56 97 02 F6 | 	mov	arg03, local04
22984     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
22988                 | '   putpixel(x0-y,y0-x,c)
22988     54 93 02 F6 | 	mov	arg01, local02
2298c     53 93 82 F1 | 	sub	arg01, local01
22990     55 95 02 F6 | 	mov	arg02, local03
22994     58 95 82 F1 | 	sub	arg02, local06
22998     56 97 02 F6 | 	mov	arg03, local04
2299c     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
229a0                 | '   putpixel(x0-y,y0+x,c)
229a0     54 93 02 F6 | 	mov	arg01, local02
229a4     53 93 82 F1 | 	sub	arg01, local01
229a8     55 95 02 F6 | 	mov	arg02, local03
229ac     58 95 02 F1 | 	add	arg02, local06
229b0     56 97 02 F6 | 	mov	arg03, local04
229b4     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
229b8                 | '   putpixel(x0+y,y0-x,c)
229b8     54 93 02 F6 | 	mov	arg01, local02
229bc     53 93 02 F1 | 	add	arg01, local01
229c0     55 95 02 F6 | 	mov	arg02, local03
229c4     58 95 82 F1 | 	sub	arg02, local06
229c8     56 97 02 F6 | 	mov	arg03, local04
229cc     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
229d0                 | '   putpixel(x0+y,y0+x,c)
229d0     54 93 02 F6 | 	mov	arg01, local02
229d4     53 93 02 F1 | 	add	arg01, local01
229d8     55 95 02 F6 | 	mov	arg02, local03
229dc     58 95 02 F1 | 	add	arg02, local06
229e0     56 97 02 F6 | 	mov	arg03, local04
229e4     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
229e8                 | '   if d>0 
229e8     01 AE 56 F2 | 	cmps	local05, #1 wc
229ec     18 00 90 CD |  if_b	jmp	#LR__2811
229f0                 | '     d+=da
229f0     5A AF 02 F1 | 	add	local05, local08
229f4                 | '     y-=1
229f4     01 A6 86 F1 | 	sub	local01, #1
229f8                 | '     x+=1
229f8     01 B0 06 F1 | 	add	local06, #1
229fc                 | '     da+=4*4
229fc     10 B4 06 F1 | 	add	local08, #16
22a00                 | '     db+=2*4
22a00     08 B2 06 F1 | 	add	local07, #8
22a04     18 FF 9F FD | 	jmp	#LR__2810
22a08                 | LR__2811
22a08                 | '   else
22a08                 | '     d+=db
22a08     59 AF 02 F1 | 	add	local05, local07
22a0c                 | '     x+=1
22a0c     01 B0 06 F1 | 	add	local06, #1
22a10                 | '     da+=2*4
22a10     08 B4 06 F1 | 	add	local08, #8
22a14                 | '     db+=2*4
22a14     08 B2 06 F1 | 	add	local07, #8
22a18     04 FF 9F FD | 	jmp	#LR__2810
22a1c                 | LR__2812
22a1c     E7 F0 03 F6 | 	mov	ptra, fp
22a20     F2 00 A0 FD | 	call	#popregs_
22a24                 | _hg010b_spin2_circle_ret
22a24     2D 00 64 FD | 	ret
22a28                 | 
22a28                 | '     
22a28                 | ' '-- A frame (an empty rectangle) ---------------------------------------
22a28                 | ' 
22a28                 | ' pub frame(x1,y1,x2,y2,c)
22a28                 | _hg010b_spin2_frame
22a28     05 CA 05 F6 | 	mov	COUNT_, #5
22a2c     E8 00 A0 FD | 	call	#pushregs_
22a30     49 A7 02 F6 | 	mov	local01, arg01
22a34     4A A9 02 F6 | 	mov	local02, arg02
22a38     4B AB 02 F6 | 	mov	local03, arg03
22a3c     4C AD 02 F6 | 	mov	local04, arg04
22a40     4D AF 02 F6 | 	mov	local05, arg05
22a44                 | ' 
22a44                 | ' fastline(x1,x2,y1,c)
22a44     53 93 02 F6 | 	mov	arg01, local01
22a48     55 95 02 F6 | 	mov	arg02, local03
22a4c     54 97 02 F6 | 	mov	arg03, local02
22a50     57 99 02 F6 | 	mov	arg04, local05
22a54     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
22a58                 | ' fastline(x1,x2,y2,c)
22a58     53 93 02 F6 | 	mov	arg01, local01
22a5c     55 95 02 F6 | 	mov	arg02, local03
22a60     56 97 02 F6 | 	mov	arg03, local04
22a64     57 99 02 F6 | 	mov	arg04, local05
22a68     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
22a6c                 | ' line(x1,y1,x1,y2,c)
22a6c     53 93 02 F6 | 	mov	arg01, local01
22a70     54 95 02 F6 | 	mov	arg02, local02
22a74     53 97 02 F6 | 	mov	arg03, local01
22a78     56 99 02 F6 | 	mov	arg04, local04
22a7c     57 9B 02 F6 | 	mov	arg05, local05
22a80                 | ' draw(x1,y1,x2,y2,c)
22a80     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
22a84                 | ' line(x2,y1,x2,y2,c)
22a84     55 93 02 F6 | 	mov	arg01, local03
22a88     54 95 02 F6 | 	mov	arg02, local02
22a8c     55 97 02 F6 | 	mov	arg03, local03
22a90     56 99 02 F6 | 	mov	arg04, local04
22a94     57 9B 02 F6 | 	mov	arg05, local05
22a98                 | ' draw(x1,y1,x2,y2,c)
22a98     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
22a9c     E7 F0 03 F6 | 	mov	ptra, fp
22aa0     F2 00 A0 FD | 	call	#popregs_
22aa4                 | _hg010b_spin2_frame_ret
22aa4     2D 00 64 FD | 	ret
22aa8                 | 
22aa8                 | ' 
22aa8                 | ' '-- A box (a filled rectangle) ----------------------------------------
22aa8                 | ' 
22aa8                 | ' pub box(x1,y1,x2,y2,c) |yy
22aa8                 | _hg010b_spin2_box
22aa8     06 CA 05 F6 | 	mov	COUNT_, #6
22aac     E8 00 A0 FD | 	call	#pushregs_
22ab0     49 A7 02 F6 | 	mov	local01, arg01
22ab4     4A A9 02 F6 | 	mov	local02, arg02
22ab8     4B AB 02 F6 | 	mov	local03, arg03
22abc     4C AD 02 F6 | 	mov	local04, arg04
22ac0     4D AF 02 F6 | 	mov	local05, arg05
22ac4                 | ' 
22ac4                 | ' repeat yy from y1 to y2
22ac4     54 AD 52 F2 | 	cmps	local04, local02 wc
22ac8     01 B0 86 F6 | 	negc	local06, #1
22acc     58 AD 02 F1 | 	add	local04, local06
22ad0                 | LR__2820
22ad0                 | '   fastline(x1,x2,yy,c)
22ad0     53 93 02 F6 | 	mov	arg01, local01
22ad4     55 95 02 F6 | 	mov	arg02, local03
22ad8     57 99 02 F6 | 	mov	arg04, local05
22adc     54 97 02 F6 | 	mov	arg03, local02
22ae0     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
22ae4     58 A9 02 F1 | 	add	local02, local06
22ae8     56 A9 0A F2 | 	cmp	local02, local04 wz
22aec     E0 FF 9F 5D |  if_ne	jmp	#LR__2820
22af0     E7 F0 03 F6 | 	mov	ptra, fp
22af4     F2 00 A0 FD | 	call	#popregs_
22af8                 | _hg010b_spin2_box_ret
22af8     2D 00 64 FD | 	ret
22afc                 | 
22afc                 | '       
22afc                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
22afc                 | _hg010b_spin2_putcharxycgf
22afc                 | ' 
22afc                 | '  
22afc                 | ' repeat yy from 0 to 15
22afc     00 80 06 F6 | 	mov	_var01, #0
22b00     D7 8A 48 FB | 	callpa	#(@LR__2832-@LR__2830)>>2,fcache_load_ptr_
22b04                 | LR__2830
22b04                 | ' 
22b04                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
22b04     95 64 06 F1 | 	add	objptr, #149
22b08     32 83 02 FB | 	rdlong	_var02, objptr
22b0c     0A 82 66 F0 | 	shl	_var02, #10
22b10     37 85 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
22b14     41 85 02 F1 | 	add	_var03, _var02
22b18     4B 83 02 F6 | 	mov	_var02, arg03
22b1c     04 82 66 F0 | 	shl	_var02, #4
22b20     41 85 02 F1 | 	add	_var03, _var02
22b24     40 85 02 F1 | 	add	_var03, _var01
22b28     42 85 C2 FA | 	rdbyte	_var03, _var03
22b2c                 | '   asm
22b2c     00 84 0E F4 | 	testb	_var03, #0 wz
22b30     4C 87 C2 A8 |  if_e	setbyte	_var04, arg04, #0
22b34     4D 87 C2 58 |  if_ne	setbyte	_var04, arg05, #0
22b38     01 84 0E F4 | 	testb	_var03, #1 wz
22b3c     4C 87 CA A8 |  if_e	setbyte	_var04, arg04, #1
22b40     4D 87 CA 58 |  if_ne	setbyte	_var04, arg05, #1
22b44     02 84 0E F4 | 	testb	_var03, #2 wz
22b48     4C 87 D2 A8 |  if_e	setbyte	_var04, arg04, #2
22b4c     4D 87 D2 58 |  if_ne	setbyte	_var04, arg05, #2
22b50     03 84 0E F4 | 	testb	_var03, #3 wz
22b54     4C 87 DA A8 |  if_e	setbyte	_var04, arg04, #3
22b58     4D 87 DA 58 |  if_ne	setbyte	_var04, arg05, #3
22b5c     04 84 0E F4 | 	testb	_var03, #4 wz
22b60     4C 89 C2 A8 |  if_e	setbyte	_var05, arg04, #0
22b64     4D 89 C2 58 |  if_ne	setbyte	_var05, arg05, #0
22b68     05 84 0E F4 | 	testb	_var03, #5 wz
22b6c     4C 89 CA A8 |  if_e	setbyte	_var05, arg04, #1
22b70     4D 89 CA 58 |  if_ne	setbyte	_var05, arg05, #1
22b74     06 84 0E F4 | 	testb	_var03, #6 wz
22b78     4C 89 D2 A8 |  if_e	setbyte	_var05, arg04, #2
22b7c     4D 89 D2 58 |  if_ne	setbyte	_var05, arg05, #2
22b80     07 84 0E F4 | 	testb	_var03, #7 wz
22b84     4C 89 DA A8 |  if_e	setbyte	_var05, arg04, #3
22b88     4D 89 DA 58 |  if_ne	setbyte	_var05, arg05, #3
22b8c                 | '   
22b8c                 | '   ccc[0]:=c1
22b8c     99 65 06 F1 | 	add	objptr, #409
22b90     32 87 62 FC | 	wrlong	_var04, objptr
22b94                 | '   ccc[1]:=c2 
22b94     04 64 06 F1 | 	add	objptr, #4
22b98     32 89 62 FC | 	wrlong	_var05, objptr
22b9c                 | '   long[mailbox0][2]:=8
22b9c     49 64 86 F1 | 	sub	objptr, #73
22ba0     32 85 02 FB | 	rdlong	_var03, objptr
22ba4     08 84 06 F1 | 	add	_var03, #8
22ba8     42 11 68 FC | 	wrlong	#8, _var03
22bac                 | '   long[mailbox0][1]:=@ccc
22bac     32 85 02 F6 | 	mov	_var03, objptr
22bb0     45 84 06 F1 | 	add	_var03, #69
22bb4     32 83 02 FB | 	rdlong	_var02, objptr
22bb8     04 82 06 F1 | 	add	_var02, #4
22bbc     41 85 62 FC | 	wrlong	_var03, _var02
22bc0                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
22bc0     0C 65 86 F1 | 	sub	objptr, #268
22bc4     32 85 02 FB | 	rdlong	_var03, objptr
22bc8     4A 83 02 F6 | 	mov	_var02, arg02
22bcc     40 83 02 F1 | 	add	_var02, _var01
22bd0     0A 82 66 F0 | 	shl	_var02, #10
22bd4     49 8B 02 F6 | 	mov	_var06, arg01
22bd8     02 8A 66 F0 | 	shl	_var06, #2
22bdc     45 83 02 F1 | 	add	_var02, _var06
22be0     41 85 02 F1 | 	add	_var03, _var02
22be4     00 00 78 FF 
22be8     00 84 06 F1 | 	add	_var03, ##-268435456
22bec     0C 65 06 F1 | 	add	objptr, #268
22bf0     32 8B 02 FB | 	rdlong	_var06, objptr
22bf4     45 85 62 FC | 	wrlong	_var03, _var06
22bf8                 | '   repeat
22bf8                 | LR__2831
22bf8     32 85 02 FB | 	rdlong	_var03, objptr
22bfc     42 83 02 FB | 	rdlong	_var02, _var03
22c00     00 82 56 F2 | 	cmps	_var02, #0 wc
22c04     F0 FF 9F CD |  if_b	jmp	#LR__2831
22c08     E9 65 86 F1 | 	sub	objptr, #489
22c0c     01 80 06 F1 | 	add	_var01, #1
22c10     10 80 56 F2 | 	cmps	_var01, #16 wc
22c14     EC FE 9F CD |  if_b	jmp	#LR__2830
22c18                 | LR__2832
22c18                 | _hg010b_spin2_putcharxycgf_ret
22c18     2D 00 64 FD | 	ret
22c1c                 | 
22c1c                 | ' 
22c1c                 | ' 
22c1c                 | ' '**********************************************************************r***
22c1c                 | ' '                                                                        *
22c1c                 | ' ' Font related functions                                                 *
22c1c                 | ' '                                                                        *
22c1c                 | ' '*************************************************************************
22c1c                 | ' 
22c1c                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
22c1c                 | ' 
22c1c                 | ' pub setfontfamily(afontnum)
22c1c                 | _hg010b_spin2_setfontfamily
22c1c                 | ' 
22c1c                 | ' font_family:=afontnum
22c1c     95 64 06 F1 | 	add	objptr, #149
22c20     32 93 62 FC | 	wrlong	arg01, objptr
22c24     95 64 86 F1 | 	sub	objptr, #149
22c28                 | ' 'if afontnum==8
22c28                 | ' '  font_ptr:=@amiga_font
22c28                 | ' 
22c28                 | ' if afontnum==4
22c28     04 92 0E F2 | 	cmp	arg01, #4 wz
22c2c                 | '   font_ptr:=@st_font
22c2c     37 81 02 A6 |  if_e	mov	_var01, ptr__hg010b_spin2_dat__
22c30     08 00 00 AF 
22c34     00 80 06 A1 |  if_e	add	_var01, ##4096
22c38     08 64 06 A1 |  if_e	add	objptr, #8
22c3c     32 81 62 AC |  if_e	wrlong	_var01, objptr
22c40     08 64 86 A1 |  if_e	sub	objptr, #8
22c44                 | ' if afontnum==0
22c44     00 92 0E F2 | 	cmp	arg01, #0 wz
22c48                 | '   font_ptr:=@vga_font
22c48     08 64 06 A1 |  if_e	add	objptr, #8
22c4c     32 6F 62 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
22c50     08 64 86 A1 |  if_e	sub	objptr, #8
22c54                 | _hg010b_spin2_setfontfamily_ret
22c54     2D 00 64 FD | 	ret
22c58                 | 
22c58                 | ' 
22c58                 | ' ''--------- Redefine a character
22c58                 | ' 
22c58                 | ' pub defchar(ch,ptr) | s,i ' 
22c58                 | _hg010b_spin2_defchar
22c58                 | ' 
22c58                 | ' s:=font_ptr+ch*16
22c58     08 64 06 F1 | 	add	objptr, #8
22c5c     32 81 02 FB | 	rdlong	_var01, objptr
22c60     08 64 86 F1 | 	sub	objptr, #8
22c64     04 92 66 F0 | 	shl	arg01, #4
22c68     49 81 02 F1 | 	add	_var01, arg01
22c6c                 | ' repeat i from 0 to 15
22c6c     00 82 06 F6 | 	mov	_var02, #0
22c70     D7 12 48 FB | 	callpa	#(@LR__2841-@LR__2840)>>2,fcache_load_ptr_
22c74                 | LR__2840
22c74                 | '   byte[s+i]:=byte[ptr+i]
22c74     4A 93 02 F6 | 	mov	arg01, arg02
22c78     41 93 02 F1 | 	add	arg01, _var02
22c7c     40 85 02 F6 | 	mov	_var03, _var01
22c80     49 93 C2 FA | 	rdbyte	arg01, arg01
22c84     41 85 02 F1 | 	add	_var03, _var02
22c88     42 93 42 FC | 	wrbyte	arg01, _var03
22c8c     01 82 06 F1 | 	add	_var02, #1
22c90     10 82 56 F2 | 	cmps	_var02, #16 wc
22c94     DC FF 9F CD |  if_b	jmp	#LR__2840
22c98                 | LR__2841
22c98                 | _hg010b_spin2_defchar_ret
22c98     2D 00 64 FD | 	ret
22c9c                 | 
22c9c                 | ' 
22c9c                 | ' 
22c9c                 | ' '*************************************************************************
22c9c                 | ' '                                                                        *
22c9c                 | ' '  Cursor functions                                                      *
22c9c                 | ' '                                                                        *
22c9c                 | ' '*************************************************************************
22c9c                 | ' 
22c9c                 | ' 
22c9c                 | ' pub setcursorpos(x,y)
22c9c                 | _hg010b_spin2_setcursorpos
22c9c     01 CA 05 F6 | 	mov	COUNT_, #1
22ca0     E8 00 A0 FD | 	call	#pushregs_
22ca4                 | ' 
22ca4                 | ' ''---------- Set the (x,y) position of cursor
22ca4                 | ' 
22ca4                 | ' cursor_x:=x
22ca4     3C 64 06 F1 | 	add	objptr, #60
22ca8     32 93 52 FC | 	wrword	arg01, objptr
22cac                 | ' cursor_y:=y
22cac     02 64 06 F1 | 	add	objptr, #2
22cb0     32 95 42 FC | 	wrbyte	arg02, objptr
22cb4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22cb4     02 64 86 F1 | 	sub	objptr, #2
22cb8     32 A7 E2 FA | 	rdword	local01, objptr
22cbc     02 A6 66 F0 | 	shl	local01, #2
22cc0     4A 97 E2 F8 | 	getbyte	arg03, arg02, #0
22cc4     3C 64 86 F1 | 	sub	objptr, #60
22cc8     04 96 66 F0 | 	shl	arg03, #4
22ccc     04 96 06 F1 | 	add	arg03, #4
22cd0     11 92 06 F6 | 	mov	arg01, #17
22cd4     53 95 02 F6 | 	mov	arg02, local01
22cd8     0C F3 BF FD | 	call	#_hg010b_spin2_setspritepos
22cdc     E7 F0 03 F6 | 	mov	ptra, fp
22ce0     F2 00 A0 FD | 	call	#popregs_
22ce4                 | _hg010b_spin2_setcursorpos_ret
22ce4     2D 00 64 FD | 	ret
22ce8                 | 
22ce8                 | ' 
22ce8                 | ' pub setcursorx(x)
22ce8                 | _hg010b_spin2_setcursorx
22ce8                 | ' cursor_x:=x
22ce8     3C 64 06 F1 | 	add	objptr, #60
22cec     32 93 52 FC | 	wrword	arg01, objptr
22cf0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22cf0     49 95 32 F9 | 	getword	arg02, arg01, #0
22cf4     02 94 66 F0 | 	shl	arg02, #2
22cf8     02 64 06 F1 | 	add	objptr, #2
22cfc     32 97 C2 FA | 	rdbyte	arg03, objptr
22d00     3E 64 86 F1 | 	sub	objptr, #62
22d04     04 96 66 F0 | 	shl	arg03, #4
22d08     04 96 06 F1 | 	add	arg03, #4
22d0c     11 92 06 F6 | 	mov	arg01, #17
22d10     D4 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
22d14                 | _hg010b_spin2_setcursorx_ret
22d14     2D 00 64 FD | 	ret
22d18                 | 
22d18                 | ' 
22d18                 | ' pub setcursory(y) 
22d18                 | _hg010b_spin2_setcursory
22d18                 | ' cursor_y:=y
22d18     3E 64 06 F1 | 	add	objptr, #62
22d1c     32 93 42 FC | 	wrbyte	arg01, objptr
22d20                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
22d20     02 64 86 F1 | 	sub	objptr, #2
22d24     32 95 E2 FA | 	rdword	arg02, objptr
22d28     02 94 66 F0 | 	shl	arg02, #2
22d2c     49 97 E2 F8 | 	getbyte	arg03, arg01, #0
22d30     3C 64 86 F1 | 	sub	objptr, #60
22d34     04 96 66 F0 | 	shl	arg03, #4
22d38     04 96 06 F1 | 	add	arg03, #4
22d3c     11 92 06 F6 | 	mov	arg01, #17
22d40     A4 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
22d44                 | _hg010b_spin2_setcursory_ret
22d44     2D 00 64 FD | 	ret
22d48                 | 
22d48                 | ' 
22d48                 | ' '*************************************************************************
22d48                 | ' '                                                                        *
22d48                 | ' '  VBlank functions                                                      *
22d48                 | ' '                                                                        *
22d48                 | ' '*************************************************************************
22d48                 | ' 
22d48                 | ' pub waitvbl(amount) | i
22d48                 | _hg010b_spin2_waitvbl
22d48     03 CA 05 F6 | 	mov	COUNT_, #3
22d4c     E8 00 A0 FD | 	call	#pushregs_
22d50     49 A7 02 F6 | 	mov	local01, arg01
22d54                 | ' 
22d54                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
22d54                 | ' 
22d54                 | ' repeat i from 1 to amount
22d54     01 A8 06 F6 | 	mov	local02, #1
22d58     01 A6 56 F2 | 	cmps	local01, #1 wc
22d5c     01 AA 86 F6 | 	negc	local03, #1
22d60     55 A7 02 F1 | 	add	local01, local03
22d64                 | LR__2850
22d64                 | '   repeat until vblank==0
22d64                 | LR__2851
22d64     49 64 06 F1 | 	add	objptr, #73
22d68     32 93 0A FB | 	rdlong	arg01, objptr wz
22d6c     49 64 86 F1 | 	sub	objptr, #73
22d70     0C 00 90 AD |  if_e	jmp	#LR__2852
22d74                 | '     waitus(100)
22d74     64 92 06 F6 | 	mov	arg01, #100
22d78     9C 1F B0 FD | 	call	#__system___waitus
22d7c     E4 FF 9F FD | 	jmp	#LR__2851
22d80                 | LR__2852
22d80                 | '   repeat until vblank==1
22d80                 | LR__2853
22d80     49 64 06 F1 | 	add	objptr, #73
22d84     32 93 02 FB | 	rdlong	arg01, objptr
22d88     49 64 86 F1 | 	sub	objptr, #73
22d8c     01 92 0E F2 | 	cmp	arg01, #1 wz
22d90     0C 00 90 AD |  if_e	jmp	#LR__2854
22d94                 | '     waitus(100)
22d94     64 92 06 F6 | 	mov	arg01, #100
22d98     7C 1F B0 FD | 	call	#__system___waitus
22d9c     E0 FF 9F FD | 	jmp	#LR__2853
22da0                 | LR__2854
22da0     55 A9 02 F1 | 	add	local02, local03
22da4     53 A9 0A F2 | 	cmp	local02, local01 wz
22da8     B8 FF 9F 5D |  if_ne	jmp	#LR__2850
22dac     E7 F0 03 F6 | 	mov	ptra, fp
22db0     F2 00 A0 FD | 	call	#popregs_
22db4                 | _hg010b_spin2_waitvbl_ret
22db4     2D 00 64 FD | 	ret
22db8                 | 
22db8                 | ' 
22db8                 | ' ''---------- Set color #c in palette to r,g,b
22db8                 | ' 
22db8                 | ' pub setcolor(c,r,g,b)  |cc
22db8                 | _hg010b_spin2_setcolor
22db8                 | ' 
22db8                 | ' cc:=r<<24+g<<16+b<<8
22db8     18 94 66 F0 | 	shl	arg02, #24
22dbc     10 96 66 F0 | 	shl	arg03, #16
22dc0     4B 95 02 F1 | 	add	arg02, arg03
22dc4     08 98 66 F0 | 	shl	arg04, #8
22dc8     4C 95 02 F1 | 	add	arg02, arg04
22dcc                 | ' long[palette_ptr+4*c]:=cc
22dcc     1C 64 06 F1 | 	add	objptr, #28
22dd0     32 99 02 FB | 	rdlong	arg04, objptr
22dd4     1C 64 86 F1 | 	sub	objptr, #28
22dd8     02 92 66 F0 | 	shl	arg01, #2
22ddc     49 99 02 F1 | 	add	arg04, arg01
22de0     4C 95 62 FC | 	wrlong	arg02, arg04
22de4                 | _hg010b_spin2_setcolor_ret
22de4     2D 00 64 FD | 	ret
22de8                 | 
22de8                 | ' 
22de8                 | ' 
22de8                 | ' pub cls(fc,bc)   :c,i
22de8                 | _hg010b_spin2_cls
22de8     02 CA 05 F6 | 	mov	COUNT_, #2
22dec     E8 00 A0 FD | 	call	#pushregs_
22df0     49 A7 02 F6 | 	mov	local01, arg01
22df4     4A A9 02 F6 | 	mov	local02, arg02
22df8                 | ' 
22df8                 | ' c:=bc
22df8                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
22df8     DD 64 06 F1 | 	add	objptr, #221
22dfc     32 93 02 FB | 	rdlong	arg01, objptr
22e00     A5 64 86 F1 | 	sub	objptr, #165
22e04     32 97 02 FB | 	rdlong	arg03, objptr
22e08     02 96 66 F0 | 	shl	arg03, #2
22e0c     54 95 02 F6 | 	mov	arg02, local02
22e10     00 98 06 F6 | 	mov	arg04, #0
22e14     01 9A 06 F6 | 	mov	arg05, #1
22e18     0B 00 00 FF 
22e1c     94 64 06 F1 | 	add	objptr, ##5780
22e20     AC 10 B0 FD | 	call	#_psram_spin2_fill
22e24                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
22e24     0B 00 00 FF 
22e28     C8 64 86 F1 | 	sub	objptr, ##5832
22e2c     32 93 02 FB | 	rdlong	arg01, objptr
22e30     04 64 86 F1 | 	sub	objptr, #4
22e34     32 97 02 FB | 	rdlong	arg03, objptr
22e38     49 97 82 F1 | 	sub	arg03, arg01
22e3c     20 94 06 F6 | 	mov	arg02, #32
22e40     00 98 06 F6 | 	mov	arg04, #0
22e44     01 9A 06 F6 | 	mov	arg05, #1
22e48     0B 00 00 FF 
22e4c     CC 64 06 F1 | 	add	objptr, ##5836
22e50     7C 10 B0 FD | 	call	#_psram_spin2_fill
22e54                 | ' setwritecolors(fc,bc)
22e54                 | ' 
22e54                 | ' write_color:=ff
22e54     0B 00 00 FF 
22e58     8B 64 86 F1 | 	sub	objptr, ##5771
22e5c     32 A7 62 FC | 	wrlong	local01, objptr
22e60                 | ' write_background:=bb
22e60     04 64 06 F1 | 	add	objptr, #4
22e64     32 A9 62 FC | 	wrlong	local02, objptr
22e68                 | ' cursor_x:=0
22e68     09 64 86 F1 | 	sub	objptr, #9
22e6c     32 01 58 FC | 	wrword	#0, objptr
22e70                 | ' cursor_y:=0
22e70     02 64 06 F1 | 	add	objptr, #2
22e74     32 01 48 FC | 	wrbyte	#0, objptr
22e78                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22e78     02 64 86 F1 | 	sub	objptr, #2
22e7c     32 95 E2 FA | 	rdword	arg02, objptr
22e80     02 94 66 F0 | 	shl	arg02, #2
22e84     3C 64 86 F1 | 	sub	objptr, #60
22e88     04 96 06 F6 | 	mov	arg03, #4
22e8c     11 92 06 F6 | 	mov	arg01, #17
22e90     54 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
22e94                 | ' setcursorcolor(fc)
22e94     53 93 02 F6 | 	mov	arg01, local01
22e98     60 ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
22e9c     54 7B 02 F6 | 	mov	result1, local02
22ea0     00 7C 06 F6 | 	mov	result2, #0
22ea4     E7 F0 03 F6 | 	mov	ptra, fp
22ea8     F2 00 A0 FD | 	call	#popregs_
22eac                 | _hg010b_spin2_cls_ret
22eac     2D 00 64 FD | 	ret
22eb0                 | 
22eb0                 | ' 
22eb0                 | ' ''---------- Output a char at the cursor position, move the cursor 
22eb0                 | ' 
22eb0                 | ' pub putchar(achar) | c,x,y,l,newcpl
22eb0                 | _hg010b_spin2_putchar
22eb0     02 CA 05 F6 | 	mov	COUNT_, #2
22eb4     E8 00 A0 FD | 	call	#pushregs_
22eb8     49 A7 02 F6 | 	mov	local01, arg01
22ebc                 | ' 
22ebc                 | ' if achar==10
22ebc     0A A6 0E F2 | 	cmp	local01, #10 wz
22ec0                 | '   crlf()
22ec0     78 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
22ec4                 | ' if achar==9
22ec4     09 A6 0E F2 | 	cmp	local01, #9 wz
22ec8     18 00 90 5D |  if_ne	jmp	#LR__2860
22ecc                 | '   cursor_x:=(cursor_x& %11110000)+16
22ecc     3C 64 06 F1 | 	add	objptr, #60
22ed0     32 97 E2 FA | 	rdword	arg03, objptr
22ed4     F0 96 06 F5 | 	and	arg03, #240
22ed8     10 96 06 F1 | 	add	arg03, #16
22edc     32 97 52 FC | 	wrword	arg03, objptr
22ee0     3C 64 86 F1 | 	sub	objptr, #60
22ee4                 | LR__2860
22ee4                 | '   
22ee4                 | ' if (achar<>9) && (achar<>10) 
22ee4     09 A6 0E F2 | 	cmp	local01, #9 wz
22ee8     0A A6 0E 52 |  if_ne	cmp	local01, #10 wz
22eec     A8 00 90 AD |  if_e	jmp	#LR__2861
22ef0                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
22ef0     3C 64 06 F1 | 	add	objptr, #60
22ef4     32 93 E2 FA | 	rdword	arg01, objptr
22ef8     02 64 06 F1 | 	add	objptr, #2
22efc     32 95 C2 FA | 	rdbyte	arg02, objptr
22f00     04 94 66 F0 | 	shl	arg02, #4
22f04     04 94 06 F1 | 	add	arg02, #4
22f08     03 64 06 F1 | 	add	objptr, #3
22f0c     32 99 02 FB | 	rdlong	arg04, objptr
22f10     04 64 06 F1 | 	add	objptr, #4
22f14     32 9B 02 FB | 	rdlong	arg05, objptr
22f18     45 64 86 F1 | 	sub	objptr, #69
22f1c     53 97 02 F6 | 	mov	arg03, local01
22f20     D8 FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
22f24     04 64 06 F1 | 	add	objptr, #4
22f28     32 93 02 FB | 	rdlong	arg01, objptr
22f2c     1C 00 00 FF 
22f30     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
22f34     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
22f38     3A 64 06 F1 | 	add	objptr, #58
22f3c     32 9B C2 FA | 	rdbyte	arg05, objptr
22f40     4D 97 02 FD | 	qmul	arg03, arg05
22f44                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
22f44     1C 00 00 FF 
22f48     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
22f4c     02 64 86 F1 | 	sub	objptr, #2
22f50     32 A9 E2 FA | 	rdword	local02, objptr
22f54     01 A8 46 F0 | 	shr	local02, #1
22f58     53 95 02 F6 | 	mov	arg02, local01
22f5c     01 96 06 F6 | 	mov	arg03, #1
22f60     00 98 06 F6 | 	mov	arg04, #0
22f64     01 9A 06 F6 | 	mov	arg05, #1
22f68     0B 00 00 FF 
22f6c     90 64 06 F1 | 	add	objptr, ##5776
22f70     18 A6 62 FD | 	getqx	local01
22f74     54 A7 02 F1 | 	add	local01, local02
22f78     53 93 02 F1 | 	add	arg01, local01
22f7c     50 0F B0 FD | 	call	#_psram_spin2_fill
22f80                 | '   cursor_x+=2
22f80     0B 00 00 FF 
22f84     90 64 86 F1 | 	sub	objptr, ##5776
22f88     32 A9 E2 FA | 	rdword	local02, objptr
22f8c     02 A8 06 F1 | 	add	local02, #2
22f90     32 A9 52 FC | 	wrword	local02, objptr
22f94     3C 64 86 F1 | 	sub	objptr, #60
22f98                 | LR__2861
22f98                 | ' 
22f98                 | ' if cursor_x>=256
22f98     3C 64 06 F1 | 	add	objptr, #60
22f9c     32 A9 E2 FA | 	rdword	local02, objptr
22fa0     3C 64 86 F1 | 	sub	objptr, #60
22fa4     00 A9 56 F2 | 	cmps	local02, #256 wc
22fa8     64 00 90 CD |  if_b	jmp	#LR__2863
22fac                 | '   cursor_x:=0
22fac     3C 64 06 F1 | 	add	objptr, #60
22fb0     32 01 58 FC | 	wrword	#0, objptr
22fb4                 | '   cursor_y+=1
22fb4     02 64 06 F1 | 	add	objptr, #2
22fb8     32 A9 C2 FA | 	rdbyte	local02, objptr
22fbc     01 A8 06 F1 | 	add	local02, #1
22fc0     32 A9 42 FC | 	wrbyte	local02, objptr
22fc4                 | '   if cursor_y>st_lines-1
22fc4     C3 64 06 F1 | 	add	objptr, #195
22fc8     32 A9 02 FB | 	rdlong	local02, objptr
22fcc     01 A8 86 F1 | 	sub	local02, #1
22fd0     C3 64 86 F1 | 	sub	objptr, #195
22fd4     32 97 C2 FA | 	rdbyte	arg03, objptr
22fd8     3E 64 86 F1 | 	sub	objptr, #62
22fdc     54 97 5A F2 | 	cmps	arg03, local02 wcz
22fe0     2C 00 90 ED |  if_be	jmp	#LR__2862
22fe4                 | '     scrollup2()
22fe4     00 92 06 F6 | 	mov	arg01, #0
22fe8     01 00 00 FF 
22fec     58 94 06 F6 | 	mov	arg02, ##600
22ff0     10 96 06 F6 | 	mov	arg03, #16
22ff4     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
22ff8                 | '     cursor_y:=st_lines-1
22ff8     01 65 06 F1 | 	add	objptr, #257
22ffc     32 A9 02 FB | 	rdlong	local02, objptr
23000     01 A8 86 F1 | 	sub	local02, #1
23004     C3 64 86 F1 | 	sub	objptr, #195
23008     32 A9 42 FC | 	wrbyte	local02, objptr
2300c     3E 64 86 F1 | 	sub	objptr, #62
23010                 | LR__2862
23010                 | LR__2863
23010                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
23010     3C 64 06 F1 | 	add	objptr, #60
23014     32 95 E2 FA | 	rdword	arg02, objptr
23018     02 94 66 F0 | 	shl	arg02, #2
2301c     02 64 06 F1 | 	add	objptr, #2
23020     32 97 C2 FA | 	rdbyte	arg03, objptr
23024     3E 64 86 F1 | 	sub	objptr, #62
23028     04 96 66 F0 | 	shl	arg03, #4
2302c     04 96 06 F1 | 	add	arg03, #4
23030     11 92 06 F6 | 	mov	arg01, #17
23034     B0 EF BF FD | 	call	#_hg010b_spin2_setspritepos
23038     E7 F0 03 F6 | 	mov	ptra, fp
2303c     F2 00 A0 FD | 	call	#popregs_
23040                 | _hg010b_spin2_putchar_ret
23040     2D 00 64 FD | 	ret
23044                 | 
23044                 | '     
23044                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
23044                 | ' 
23044                 | ' pub putchar2(achar) | c,x,y,l,newcpl
23044                 | _hg010b_spin2_putchar2
23044     02 CA 05 F6 | 	mov	COUNT_, #2
23048     E8 00 A0 FD | 	call	#pushregs_
2304c     49 A7 02 F6 | 	mov	local01, arg01
23050                 | ' 
23050                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
23050     3C 64 06 F1 | 	add	objptr, #60
23054     32 93 E2 FA | 	rdword	arg01, objptr
23058     02 64 06 F1 | 	add	objptr, #2
2305c     32 95 C2 FA | 	rdbyte	arg02, objptr
23060     04 94 66 F0 | 	shl	arg02, #4
23064     04 94 06 F1 | 	add	arg02, #4
23068     03 64 06 F1 | 	add	objptr, #3
2306c     32 99 02 FB | 	rdlong	arg04, objptr
23070     04 64 06 F1 | 	add	objptr, #4
23074     32 9B 02 FB | 	rdlong	arg05, objptr
23078     45 64 86 F1 | 	sub	objptr, #69
2307c     53 97 02 F6 | 	mov	arg03, local01
23080     78 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
23084     04 64 06 F1 | 	add	objptr, #4
23088     32 93 02 FB | 	rdlong	arg01, objptr
2308c     1C 00 00 FF 
23090     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
23094     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
23098     3A 64 06 F1 | 	add	objptr, #58
2309c     32 9B C2 FA | 	rdbyte	arg05, objptr
230a0     4D 97 02 FD | 	qmul	arg03, arg05
230a4                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
230a4     1C 00 00 FF 
230a8     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
230ac     02 64 86 F1 | 	sub	objptr, #2
230b0     32 A9 E2 FA | 	rdword	local02, objptr
230b4     01 A8 46 F0 | 	shr	local02, #1
230b8     53 95 02 F6 | 	mov	arg02, local01
230bc     01 96 06 F6 | 	mov	arg03, #1
230c0     00 98 06 F6 | 	mov	arg04, #0
230c4     01 9A 06 F6 | 	mov	arg05, #1
230c8     0B 00 00 FF 
230cc     90 64 06 F1 | 	add	objptr, ##5776
230d0     18 A6 62 FD | 	getqx	local01
230d4     54 A7 02 F1 | 	add	local01, local02
230d8     53 93 02 F1 | 	add	arg01, local01
230dc     F0 0D B0 FD | 	call	#_psram_spin2_fill
230e0                 | ' 
230e0                 | ' cursor_x+=2
230e0     0B 00 00 FF 
230e4     90 64 86 F1 | 	sub	objptr, ##5776
230e8     32 A9 E2 FA | 	rdword	local02, objptr
230ec     02 A8 06 F1 | 	add	local02, #2
230f0     32 A9 52 FC | 	wrword	local02, objptr
230f4                 | ' if cursor_x>=256
230f4     54 A9 32 F9 | 	getword	local02, local02, #0
230f8     3C 64 86 F1 | 	sub	objptr, #60
230fc     00 A9 56 F2 | 	cmps	local02, #256 wc
23100     64 00 90 CD |  if_b	jmp	#LR__2871
23104                 | '   cursor_x:=0
23104     3C 64 06 F1 | 	add	objptr, #60
23108     32 01 58 FC | 	wrword	#0, objptr
2310c                 | '   cursor_y+=1
2310c     02 64 06 F1 | 	add	objptr, #2
23110     32 A9 C2 FA | 	rdbyte	local02, objptr
23114     01 A8 06 F1 | 	add	local02, #1
23118     32 A9 42 FC | 	wrbyte	local02, objptr
2311c                 | '   if cursor_y>st_lines-1
2311c     C3 64 06 F1 | 	add	objptr, #195
23120     32 A9 02 FB | 	rdlong	local02, objptr
23124     01 A8 86 F1 | 	sub	local02, #1
23128     C3 64 86 F1 | 	sub	objptr, #195
2312c     32 97 C2 FA | 	rdbyte	arg03, objptr
23130     3E 64 86 F1 | 	sub	objptr, #62
23134     54 97 5A F2 | 	cmps	arg03, local02 wcz
23138     2C 00 90 ED |  if_be	jmp	#LR__2870
2313c                 | '     scrollup2()
2313c     00 92 06 F6 | 	mov	arg01, #0
23140     01 00 00 FF 
23144     58 94 06 F6 | 	mov	arg02, ##600
23148     10 96 06 F6 | 	mov	arg03, #16
2314c     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
23150                 | '     cursor_y:=st_lines-1
23150     01 65 06 F1 | 	add	objptr, #257
23154     32 A9 02 FB | 	rdlong	local02, objptr
23158     01 A8 86 F1 | 	sub	local02, #1
2315c     C3 64 86 F1 | 	sub	objptr, #195
23160     32 A9 42 FC | 	wrbyte	local02, objptr
23164     3E 64 86 F1 | 	sub	objptr, #62
23168                 | LR__2870
23168                 | LR__2871
23168                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
23168     3C 64 06 F1 | 	add	objptr, #60
2316c     32 95 E2 FA | 	rdword	arg02, objptr
23170     02 94 66 F0 | 	shl	arg02, #2
23174     02 64 06 F1 | 	add	objptr, #2
23178     32 97 C2 FA | 	rdbyte	arg03, objptr
2317c     3E 64 86 F1 | 	sub	objptr, #62
23180     04 96 66 F0 | 	shl	arg03, #4
23184     04 96 06 F1 | 	add	arg03, #4
23188     11 92 06 F6 | 	mov	arg01, #17
2318c     58 EE BF FD | 	call	#_hg010b_spin2_setspritepos
23190     E7 F0 03 F6 | 	mov	ptra, fp
23194     F2 00 A0 FD | 	call	#popregs_
23198                 | _hg010b_spin2_putchar2_ret
23198     2D 00 64 FD | 	ret
2319c                 | 
2319c                 | ' ''--------- Output a string at the cursor position, move the cursor  
2319c                 | ' 
2319c                 | ' pub write(text) | iii,c,ncx,ncy
2319c                 | _hg010b_spin2_write
2319c     04 CA 05 F6 | 	mov	COUNT_, #4
231a0     E8 00 A0 FD | 	call	#pushregs_
231a4     49 A7 02 F6 | 	mov	local01, arg01
231a8                 | ' 
231a8                 | ' repeat iii from 0 to strsize(text)-1
231a8     00 A8 06 F6 | 	mov	local02, #0
231ac     53 93 02 F6 | 	mov	arg01, local01
231b0     49 AB 02 F6 | 	mov	local03, arg01
231b4     D7 06 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
231b8                 | LR__2880
231b8     55 7B CA FA | 	rdbyte	result1, local03 wz
231bc     01 AA 06 51 |  if_ne	add	local03, #1
231c0     F4 FF 9F 5D |  if_ne	jmp	#LR__2880
231c4                 | LR__2881
231c4     49 AB 82 F1 | 	sub	local03, arg01
231c8     01 AA 86 F1 | 	sub	local03, #1
231cc     00 AA 56 F2 | 	cmps	local03, #0 wc
231d0     01 AC 86 F6 | 	negc	local04, #1
231d4     56 AB 02 F1 | 	add	local03, local04
231d8                 | LR__2882
231d8                 | '   putchar2(byte[text+iii])
231d8     53 93 02 F6 | 	mov	arg01, local01
231dc     54 93 02 F1 | 	add	arg01, local02
231e0     49 93 C2 FA | 	rdbyte	arg01, arg01
231e4     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
231e8     56 A9 02 F1 | 	add	local02, local04
231ec     55 A9 0A F2 | 	cmp	local02, local03 wz
231f0     E4 FF 9F 5D |  if_ne	jmp	#LR__2882
231f4     E7 F0 03 F6 | 	mov	ptra, fp
231f8     F2 00 A0 FD | 	call	#popregs_
231fc                 | _hg010b_spin2_write_ret
231fc     2D 00 64 FD | 	ret
23200                 | 
23200                 | '    
23200                 | ' ' a version for text scrolling in Basic shifted 4 lines down
23200                 | ' 
23200                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
23200                 | _hg010b_spin2_scrollup2
23200     03 CA 05 F6 | 	mov	COUNT_, #3
23204     E8 00 A0 FD | 	call	#pushregs_
23208                 | ' 	
23208                 | ' repeat i from 4 to 579 
23208     04 A6 06 F6 | 	mov	local01, #4
2320c                 | LR__2890
2320c     DD 64 06 F1 | 	add	objptr, #221
23210     32 95 02 FB | 	rdlong	arg02, objptr
23214     53 9B 02 F6 | 	mov	arg05, local01
23218     10 9A 06 F1 | 	add	arg05, #16
2321c     02 9A 66 F0 | 	shl	arg05, #2
23220     14 64 06 F1 | 	add	objptr, #20
23224     32 97 02 FB | 	rdlong	arg03, objptr
23228     4B 9B 02 FD | 	qmul	arg05, arg03
2322c                 | '   ram.read1($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
2322c     02 96 66 F0 | 	shl	arg03, #2
23230     F4 03 00 FF 
23234     00 92 06 F6 | 	mov	arg01, ##518144
23238     0A 00 00 FF 
2323c     DB 65 06 F1 | 	add	objptr, ##5595
23240     18 9A 62 FD | 	getqx	arg05
23244     4D 95 02 F1 | 	add	arg02, arg05
23248     4C 0B B0 FD | 	call	#_psram_spin2_read1
2324c     0A 00 00 FF 
23250     EF 65 86 F1 | 	sub	objptr, ##5615
23254     32 95 02 FB | 	rdlong	arg02, objptr
23258     53 9B 02 F6 | 	mov	arg05, local01
2325c     02 9A 66 F0 | 	shl	arg05, #2
23260     14 64 06 F1 | 	add	objptr, #20
23264     32 97 02 FB | 	rdlong	arg03, objptr
23268     4B 9B 02 FD | 	qmul	arg05, arg03
2326c                 | '   ram.write($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
2326c     02 96 66 F0 | 	shl	arg03, #2
23270     F4 03 00 FF 
23274     00 92 06 F6 | 	mov	arg01, ##518144
23278     0A 00 00 FF 
2327c     DB 65 06 F1 | 	add	objptr, ##5595
23280     18 9A 62 FD | 	getqx	arg05
23284     4D 95 02 F1 | 	add	arg02, arg05
23288     A8 0B B0 FD | 	call	#_psram_spin2_write
2328c     0B 00 00 FF 
23290     CC 64 86 F1 | 	sub	objptr, ##5836
23294     01 A6 06 F1 | 	add	local01, #1
23298     01 00 00 FF 
2329c     44 A6 16 F2 | 	cmp	local01, ##580 wc
232a0     68 FF 9F CD |  if_b	jmp	#LR__2890
232a4                 | ' 
232a4                 | ' repeat i from 580 to 599
232a4     01 00 00 FF 
232a8     44 A6 06 F6 | 	mov	local01, ##580
232ac                 | LR__2891
232ac                 | '    fastline(0,1023,i,write_background)   
232ac     45 64 06 F1 | 	add	objptr, #69
232b0     32 99 02 FB | 	rdlong	arg04, objptr
232b4     45 64 86 F1 | 	sub	objptr, #69
232b8     00 92 06 F6 | 	mov	arg01, #0
232bc     09 94 CE F9 | 	bmask	arg02, #9
232c0     53 97 02 F6 | 	mov	arg03, local01
232c4     6C EF BF FD | 	call	#_hg010b_spin2_fastline
232c8     01 A6 06 F1 | 	add	local01, #1
232cc     01 00 00 FF 
232d0     58 A6 16 F2 | 	cmp	local01, ##600 wc
232d4     D4 FF 9F CD |  if_b	jmp	#LR__2891
232d8                 | ' repeat i from 0 to 3
232d8     00 A6 06 F6 | 	mov	local01, #0
232dc                 | LR__2892
232dc                 | '    fastline(0,1023,i,write_background)      
232dc     45 64 06 F1 | 	add	objptr, #69
232e0     32 99 02 FB | 	rdlong	arg04, objptr
232e4     45 64 86 F1 | 	sub	objptr, #69
232e8     00 92 06 F6 | 	mov	arg01, #0
232ec     09 94 CE F9 | 	bmask	arg02, #9
232f0     53 97 02 F6 | 	mov	arg03, local01
232f4     3C EF BF FD | 	call	#_hg010b_spin2_fastline
232f8     01 A6 06 F1 | 	add	local01, #1
232fc     04 A6 56 F2 | 	cmps	local01, #4 wc
23300     D8 FF 9F CD |  if_b	jmp	#LR__2892
23304                 | ' 
23304                 | ' repeat i from 0 to 35
23304     00 A6 06 F6 | 	mov	local01, #0
23308                 | LR__2893
23308     53 9B 02 F6 | 	mov	arg05, local01
2330c     01 9A 06 F1 | 	add	arg05, #1
23310     1C 00 00 FF 
23314     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
23318     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
2331c     4B 9B 02 FD | 	qmul	arg05, arg03
23320                 | '   ram.read1($7E800, textbuf_ptr+(i+1)*timings[7], timings[7])
23320     04 64 06 F1 | 	add	objptr, #4
23324     32 95 02 FB | 	rdlong	arg02, objptr
23328     1C 00 00 FF 
2332c     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
23330     F4 03 00 FF 
23334     00 92 06 F6 | 	mov	arg01, ##518144
23338     0B 00 00 FF 
2333c     C8 64 06 F1 | 	add	objptr, ##5832
23340     18 9A 62 FD | 	getqx	arg05
23344     4D 95 02 F1 | 	add	arg02, arg05
23348     4C 0A B0 FD | 	call	#_psram_spin2_read1
2334c     1C 00 00 FF 
23350     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
23354     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
23358     4B A7 02 FD | 	qmul	local01, arg03
2335c                 | '   ram.write($7E800, textbuf_ptr+i*timings[7], timings[7])
2335c     0B 00 00 FF 
23360     C8 64 86 F1 | 	sub	objptr, ##5832
23364     32 95 02 FB | 	rdlong	arg02, objptr
23368     1C 00 00 FF 
2336c     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
23370     F4 03 00 FF 
23374     00 92 06 F6 | 	mov	arg01, ##518144
23378     0B 00 00 FF 
2337c     C8 64 06 F1 | 	add	objptr, ##5832
23380     18 9A 62 FD | 	getqx	arg05
23384     4D 95 02 F1 | 	add	arg02, arg05
23388     A8 0A B0 FD | 	call	#_psram_spin2_write
2338c     0B 00 00 FF 
23390     CC 64 86 F1 | 	sub	objptr, ##5836
23394     01 A6 06 F1 | 	add	local01, #1
23398     24 A6 56 F2 | 	cmps	local01, #36 wc
2339c     68 FF 9F CD |  if_b	jmp	#LR__2893
233a0                 | ' repeat i from 0 to timings[7]-1
233a0     00 A6 06 F6 | 	mov	local01, #0
233a4     1C 00 00 FF 
233a8     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
233ac     37 A9 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
233b0     1C 00 00 FF 
233b4     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
233b8     01 A8 86 F1 | 	sub	local02, #1
233bc     00 A8 56 F2 | 	cmps	local02, #0 wc
233c0     01 AA 86 F6 | 	negc	local03, #1
233c4     55 A9 02 F1 | 	add	local02, local03
233c8                 | LR__2894
233c8                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
233c8     04 64 06 F1 | 	add	objptr, #4
233cc     32 93 02 FB | 	rdlong	arg01, objptr
233d0     1C 00 00 FF 
233d4     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
233d8     37 9B 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
233dc     1C 00 00 FF 
233e0     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
233e4     4D 99 02 F6 | 	mov	arg04, arg05
233e8     03 98 66 F0 | 	shl	arg04, #3
233ec     4D 99 02 F1 | 	add	arg04, arg05
233f0     02 98 66 F0 | 	shl	arg04, #2
233f4     53 99 02 F1 | 	add	arg04, local01
233f8     4C 93 02 F1 | 	add	arg01, arg04
233fc     20 94 06 F6 | 	mov	arg02, #32
23400     01 96 06 F6 | 	mov	arg03, #1
23404     00 98 06 F6 | 	mov	arg04, #0
23408     01 9A 06 F6 | 	mov	arg05, #1
2340c     0B 00 00 FF 
23410     C8 64 06 F1 | 	add	objptr, ##5832
23414     B8 0A B0 FD | 	call	#_psram_spin2_fill
23418     0B 00 00 FF 
2341c     CC 64 86 F1 | 	sub	objptr, ##5836
23420     55 A7 02 F1 | 	add	local01, local03
23424     54 A7 0A F2 | 	cmp	local01, local02 wz
23428     9C FF 9F 5D |  if_ne	jmp	#LR__2894
2342c     E7 F0 03 F6 | 	mov	ptra, fp
23430     F2 00 A0 FD | 	call	#popregs_
23434                 | _hg010b_spin2_scrollup2_ret
23434     2D 00 64 FD | 	ret
23438                 | 
23438                 | '  
23438                 | ' ''----------- Scroll the screen one line down 
23438                 | ' 
23438                 | ' pub scrolldown(start=0) | i
23438                 | _hg010b_spin2_scrolldown
23438     05 CA 05 F6 | 	mov	COUNT_, #5
2343c     E8 00 A0 FD | 	call	#pushregs_
23440     49 A7 02 F6 | 	mov	local01, arg01
23444                 | ' 
23444                 | ' repeat i from 579 to (start*16)+4
23444     01 00 00 FF 
23448     43 A8 06 F6 | 	mov	local02, ##579
2344c     53 AB 02 F6 | 	mov	local03, local01
23450     04 AA 66 F0 | 	shl	local03, #4
23454     04 AA 06 F1 | 	add	local03, #4
23458     01 00 00 FF 
2345c     43 AA 56 F2 | 	cmps	local03, ##579 wc
23460     01 AC 86 F6 | 	negc	local04, #1
23464     56 AF 02 F6 | 	mov	local05, local04
23468     56 AB 02 F1 | 	add	local03, local04
2346c                 | LR__2900
2346c     DD 64 06 F1 | 	add	objptr, #221
23470     32 95 02 FB | 	rdlong	arg02, objptr
23474     54 AD 02 F6 | 	mov	local04, local02
23478     02 AC 66 F0 | 	shl	local04, #2
2347c     14 64 06 F1 | 	add	objptr, #20
23480     32 97 02 FB | 	rdlong	arg03, objptr
23484     4B AD 02 FD | 	qmul	local04, arg03
23488                 | '   ram.read1($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
23488     02 96 66 F0 | 	shl	arg03, #2
2348c     F4 03 00 FF 
23490     00 92 06 F6 | 	mov	arg01, ##518144
23494     0A 00 00 FF 
23498     DB 65 06 F1 | 	add	objptr, ##5595
2349c     18 AC 62 FD | 	getqx	local04
234a0     56 95 02 F1 | 	add	arg02, local04
234a4     F0 08 B0 FD | 	call	#_psram_spin2_read1
234a8     0A 00 00 FF 
234ac     EF 65 86 F1 | 	sub	objptr, ##5615
234b0     32 95 02 FB | 	rdlong	arg02, objptr
234b4     54 AD 02 F6 | 	mov	local04, local02
234b8     10 AC 06 F1 | 	add	local04, #16
234bc     02 AC 66 F0 | 	shl	local04, #2
234c0     14 64 06 F1 | 	add	objptr, #20
234c4     32 97 02 FB | 	rdlong	arg03, objptr
234c8     4B AD 02 FD | 	qmul	local04, arg03
234cc                 | '   ram.write($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
234cc     02 96 66 F0 | 	shl	arg03, #2
234d0     F4 03 00 FF 
234d4     00 92 06 F6 | 	mov	arg01, ##518144
234d8     0A 00 00 FF 
234dc     DB 65 06 F1 | 	add	objptr, ##5595
234e0     18 AC 62 FD | 	getqx	local04
234e4     56 95 02 F1 | 	add	arg02, local04
234e8     48 09 B0 FD | 	call	#_psram_spin2_write
234ec     0B 00 00 FF 
234f0     CC 64 86 F1 | 	sub	objptr, ##5836
234f4     57 A9 02 F1 | 	add	local02, local05
234f8     55 A9 0A F2 | 	cmp	local02, local03 wz
234fc     6C FF 9F 5D |  if_ne	jmp	#LR__2900
23500                 | ' 
23500                 | ' repeat i from (start*16)+4 to (start*16)+19
23500     53 A9 02 F6 | 	mov	local02, local01
23504     04 A8 66 F0 | 	shl	local02, #4
23508     04 A8 06 F1 | 	add	local02, #4
2350c     53 AF 02 F6 | 	mov	local05, local01
23510     04 AE 66 F0 | 	shl	local05, #4
23514     13 AE 06 F1 | 	add	local05, #19
23518     53 AD 02 F6 | 	mov	local04, local01
2351c     04 AC 66 F0 | 	shl	local04, #4
23520     04 AC 06 F1 | 	add	local04, #4
23524     56 AF 52 F2 | 	cmps	local05, local04 wc
23528     01 AC 86 F6 | 	negc	local04, #1
2352c     56 AB 02 F6 | 	mov	local03, local04
23530     56 AF 02 F1 | 	add	local05, local04
23534                 | LR__2901
23534                 | '    fastline(0,1023,i,write_background)    
23534     45 64 06 F1 | 	add	objptr, #69
23538     32 99 02 FB | 	rdlong	arg04, objptr
2353c     45 64 86 F1 | 	sub	objptr, #69
23540     00 92 06 F6 | 	mov	arg01, #0
23544     09 94 CE F9 | 	bmask	arg02, #9
23548     54 97 02 F6 | 	mov	arg03, local02
2354c     E4 EC BF FD | 	call	#_hg010b_spin2_fastline
23550     55 A9 02 F1 | 	add	local02, local03
23554     57 A9 0A F2 | 	cmp	local02, local05 wz
23558     D8 FF 9F 5D |  if_ne	jmp	#LR__2901
2355c                 | '    
2355c                 | ' repeat i from 35 to start
2355c     23 A8 06 F6 | 	mov	local02, #35
23560     23 A6 56 F2 | 	cmps	local01, #35 wc
23564     01 AC 86 F6 | 	negc	local04, #1
23568     53 AF 02 F6 | 	mov	local05, local01
2356c     56 AF 02 F1 | 	add	local05, local04
23570                 | LR__2902
23570                 | '   ram.read1($7E800, textbuf_ptr+(i*128), 128)
23570     04 64 06 F1 | 	add	objptr, #4
23574     32 95 02 FB | 	rdlong	arg02, objptr
23578     54 AB 02 F6 | 	mov	local03, local02
2357c     07 AA 66 F0 | 	shl	local03, #7
23580     55 95 02 F1 | 	add	arg02, local03
23584     F4 03 00 FF 
23588     00 92 06 F6 | 	mov	arg01, ##518144
2358c     80 96 06 F6 | 	mov	arg03, #128
23590     0B 00 00 FF 
23594     C8 64 06 F1 | 	add	objptr, ##5832
23598     FC 07 B0 FD | 	call	#_psram_spin2_read1
2359c                 | '   ram.write($7E800, textbuf_ptr+(i+1)*128,128)
2359c     0B 00 00 FF 
235a0     C8 64 86 F1 | 	sub	objptr, ##5832
235a4     32 95 02 FB | 	rdlong	arg02, objptr
235a8     54 AB 02 F6 | 	mov	local03, local02
235ac     01 AA 06 F1 | 	add	local03, #1
235b0     07 AA 66 F0 | 	shl	local03, #7
235b4     55 95 02 F1 | 	add	arg02, local03
235b8     F4 03 00 FF 
235bc     00 92 06 F6 | 	mov	arg01, ##518144
235c0     80 96 06 F6 | 	mov	arg03, #128
235c4     0B 00 00 FF 
235c8     C8 64 06 F1 | 	add	objptr, ##5832
235cc     64 08 B0 FD | 	call	#_psram_spin2_write
235d0     0B 00 00 FF 
235d4     CC 64 86 F1 | 	sub	objptr, ##5836
235d8     56 A9 02 F1 | 	add	local02, local04
235dc     57 A9 0A F2 | 	cmp	local02, local05 wz
235e0     8C FF 9F 5D |  if_ne	jmp	#LR__2902
235e4                 | ' repeat i from 0 to 127
235e4     00 A8 06 F6 | 	mov	local02, #0
235e8                 | LR__2903
235e8                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
235e8     04 64 06 F1 | 	add	objptr, #4
235ec     32 93 02 FB | 	rdlong	arg01, objptr
235f0     53 AF 02 F6 | 	mov	local05, local01
235f4     07 AE 66 F0 | 	shl	local05, #7
235f8     57 93 02 F1 | 	add	arg01, local05
235fc     54 93 02 F1 | 	add	arg01, local02
23600     20 94 06 F6 | 	mov	arg02, #32
23604     01 96 06 F6 | 	mov	arg03, #1
23608     00 98 06 F6 | 	mov	arg04, #0
2360c     01 9A 06 F6 | 	mov	arg05, #1
23610     0B 00 00 FF 
23614     C8 64 06 F1 | 	add	objptr, ##5832
23618     B4 08 B0 FD | 	call	#_psram_spin2_fill
2361c     0B 00 00 FF 
23620     CC 64 86 F1 | 	sub	objptr, ##5836
23624     01 A8 06 F1 | 	add	local02, #1
23628     80 A8 56 F2 | 	cmps	local02, #128 wc
2362c     B8 FF 9F CD |  if_b	jmp	#LR__2903
23630     E7 F0 03 F6 | 	mov	ptra, fp
23634     F2 00 A0 FD | 	call	#popregs_
23638                 | _hg010b_spin2_scrolldown_ret
23638     2D 00 64 FD | 	ret
2363c                 | 
2363c                 | ' 
2363c                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
2363c                 | ' 
2363c                 | ' pub crlf()
2363c                 | _hg010b_spin2_crlf
2363c                 | ' 
2363c                 | ' cursor_x:=leading_spaces*2
2363c     01 00 00 FF 
23640     B6 64 06 F1 | 	add	objptr, ##694
23644     32 97 02 FB | 	rdlong	arg03, objptr
23648     01 96 66 F0 | 	shl	arg03, #1
2364c     01 00 00 FF 
23650     7A 64 86 F1 | 	sub	objptr, ##634
23654     32 97 52 FC | 	wrword	arg03, objptr
23658                 | ' cursor_y+=1
23658     02 64 06 F1 | 	add	objptr, #2
2365c     32 97 C2 FA | 	rdbyte	arg03, objptr
23660     01 96 06 F1 | 	add	arg03, #1
23664     32 97 42 FC | 	wrbyte	arg03, objptr
23668                 | ' if cursor_y>st_lines-1
23668     C3 64 06 F1 | 	add	objptr, #195
2366c     32 97 02 FB | 	rdlong	arg03, objptr
23670     01 96 86 F1 | 	sub	arg03, #1
23674     C3 64 86 F1 | 	sub	objptr, #195
23678     32 95 C2 FA | 	rdbyte	arg02, objptr
2367c     3E 64 86 F1 | 	sub	objptr, #62
23680     4B 95 5A F2 | 	cmps	arg02, arg03 wcz
23684     2C 00 90 ED |  if_be	jmp	#LR__2910
23688                 | '   scrollup2()
23688     00 92 06 F6 | 	mov	arg01, #0
2368c     01 00 00 FF 
23690     58 94 06 F6 | 	mov	arg02, ##600
23694     10 96 06 F6 | 	mov	arg03, #16
23698     64 FB BF FD | 	call	#_hg010b_spin2_scrollup2
2369c                 | '   cursor_y:=st_lines-1
2369c     01 65 06 F1 | 	add	objptr, #257
236a0     32 97 02 FB | 	rdlong	arg03, objptr
236a4     01 96 86 F1 | 	sub	arg03, #1
236a8     C3 64 86 F1 | 	sub	objptr, #195
236ac     32 97 42 FC | 	wrbyte	arg03, objptr
236b0     3E 64 86 F1 | 	sub	objptr, #62
236b4                 | LR__2910
236b4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
236b4     3C 64 06 F1 | 	add	objptr, #60
236b8     32 95 E2 FA | 	rdword	arg02, objptr
236bc     02 94 66 F0 | 	shl	arg02, #2
236c0     02 64 06 F1 | 	add	objptr, #2
236c4     32 97 C2 FA | 	rdbyte	arg03, objptr
236c8     3E 64 86 F1 | 	sub	objptr, #62
236cc     04 96 66 F0 | 	shl	arg03, #4
236d0     04 96 06 F1 | 	add	arg03, #4
236d4     11 92 06 F6 | 	mov	arg01, #17
236d8     0C E9 BF FD | 	call	#_hg010b_spin2_setspritepos
236dc                 | _hg010b_spin2_crlf_ret
236dc     2D 00 64 FD | 	ret
236e0                 | 
236e0                 | ' 
236e0                 | ' 
236e0                 | ' '*************************************************************************
236e0                 | ' '                                                                        *
236e0                 | ' '  Conversions                                                           *
236e0                 | ' '                                                                        *
236e0                 | ' '*************************************************************************
236e0                 | ' 
236e0                 | ' ''---------- Convert a integer to dec string, return a pointer
236e0                 | ' 
236e0                 | ' pub inttostr(i):result |q,pos,k,j
236e0                 | _hg010b_spin2_inttostr
236e0     03 CA 05 F6 | 	mov	COUNT_, #3
236e4     E8 00 A0 FD | 	call	#pushregs_
236e8     49 A7 0A F6 | 	mov	local01, arg01 wz
236ec                 | ' 
236ec                 | ' j:=i
236ec                 | ' pos:=10
236ec     0A A8 06 F6 | 	mov	local02, #10
236f0                 | ' k:=0
236f0     00 AA 06 F6 | 	mov	local03, #0
236f4                 | ' 
236f4                 | ' if (j==0)
236f4     18 00 90 5D |  if_ne	jmp	#LR__2920
236f8                 | '   n_string[0]:=48
236f8     4D 64 06 F1 | 	add	objptr, #77
236fc     32 61 48 FC | 	wrbyte	#48, objptr
23700                 | '   n_string[1]:=0
23700     01 64 06 F1 | 	add	objptr, #1
23704     32 01 48 FC | 	wrbyte	#0, objptr
23708     4E 64 86 F1 | 	sub	objptr, #78
2370c     C4 00 90 FD | 	jmp	#LR__2927
23710                 | LR__2920
23710                 | ' 
23710                 | ' else
23710                 | '   if (j<0)
23710     53 A7 52 F6 | 	abs	local01, local01 wc
23714                 | '     j:=0-j
23714                 | '     k:=45
23714     2D AA 06 C6 |  if_b	mov	local03, #45
23718                 | ' 
23718                 | '   n_string[11]:=0
23718     58 64 06 F1 | 	add	objptr, #88
2371c     32 01 48 FC | 	wrbyte	#0, objptr
23720     58 64 86 F1 | 	sub	objptr, #88
23724     D7 24 48 FB | 	callpa	#(@LR__2922-@LR__2921)>>2,fcache_load_ptr_
23728                 | '   repeat while (pos>-1)
23728                 | LR__2921
23728     00 A8 56 F2 | 	cmps	local02, #0 wc
2372c     40 00 90 CD |  if_b	jmp	#LR__2923
23730     53 7B 52 F6 | 	abs	result1, local01 wc
23734     0A 7A 16 FD | 	qdiv	result1, #10
23738                 | '     q:=j//10
23738     19 7A 62 FD | 	getqy	result1
2373c     3D 7B 82 F6 | 	negc	result1, result1
23740     53 A7 52 F6 | 	abs	local01, local01 wc
23744     0A A6 16 FD | 	qdiv	local01, #10
23748                 | '     q:=48+q
23748     30 7A 06 F1 | 	add	result1, #48
2374c                 | '     n_string[pos]:=q
2374c     54 A7 02 F6 | 	mov	local01, local02
23750     32 97 02 F6 | 	mov	arg03, objptr
23754     4D 96 06 F1 | 	add	arg03, #77
23758     4B A7 02 F1 | 	add	local01, arg03
2375c     53 7B 42 FC | 	wrbyte	result1, local01
23760                 | '     j:=j/10
23760                 | '     pos-=1
23760     01 A8 86 F1 | 	sub	local02, #1
23764     18 A6 62 FD | 	getqx	local01
23768     53 A7 82 F6 | 	negc	local01, local01
2376c     B8 FF 9F FD | 	jmp	#LR__2921
23770                 | LR__2922
23770                 | LR__2923
23770                 | '   repeat while n_string[0]==48
23770                 | LR__2924
23770     4D 64 06 F1 | 	add	objptr, #77
23774     32 97 C2 FA | 	rdbyte	arg03, objptr
23778     4D 64 86 F1 | 	sub	objptr, #77
2377c     30 96 0E F2 | 	cmp	arg03, #48 wz
23780     20 00 90 5D |  if_ne	jmp	#LR__2925
23784                 | '     bytemove(@n_string,@n_string+1,12)
23784     4D 64 06 F1 | 	add	objptr, #77
23788     32 93 02 F6 | 	mov	arg01, objptr
2378c     32 95 02 F6 | 	mov	arg02, objptr
23790     4D 64 86 F1 | 	sub	objptr, #77
23794     01 94 06 F1 | 	add	arg02, #1
23798     0C 96 06 F6 | 	mov	arg03, #12
2379c     C8 10 B0 FD | 	call	#__system____builtin_memmove
237a0     CC FF 9F FD | 	jmp	#LR__2924
237a4                 | LR__2925
237a4                 | ' 
237a4                 | '   if k==45
237a4     2D AA 0E F2 | 	cmp	local03, #45 wz
237a8     28 00 90 5D |  if_ne	jmp	#LR__2926
237ac                 | '      bytemove(@n_string+1,@n_string,12)
237ac     4D 64 06 F1 | 	add	objptr, #77
237b0     32 93 02 F6 | 	mov	arg01, objptr
237b4     01 92 06 F1 | 	add	arg01, #1
237b8     32 95 02 F6 | 	mov	arg02, objptr
237bc     4D 64 86 F1 | 	sub	objptr, #77
237c0     0C 96 06 F6 | 	mov	arg03, #12
237c4     A0 10 B0 FD | 	call	#__system____builtin_memmove
237c8                 | '      n_string[0]:=k
237c8     4D 64 06 F1 | 	add	objptr, #77
237cc     32 AB 42 FC | 	wrbyte	local03, objptr
237d0     4D 64 86 F1 | 	sub	objptr, #77
237d4                 | LR__2926
237d4                 | LR__2927
237d4                 | ' 
237d4                 | ' q:=@n_string
237d4     32 7B 02 F6 | 	mov	result1, objptr
237d8     4D 7A 06 F1 | 	add	result1, #77
237dc                 | ' return q
237dc     E7 F0 03 F6 | 	mov	ptra, fp
237e0     F2 00 A0 FD | 	call	#popregs_
237e4                 | _hg010b_spin2_inttostr_ret
237e4     2D 00 64 FD | 	ret
237e8                 | 
237e8                 | ' 
237e8                 | ' '**********************************************************************************
237e8                 | ' '
237e8                 | ' '        Blitting
237e8                 | ' '
237e8                 | ' '**********************************************************************************
237e8                 | ' 
237e8                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
237e8                 | _hg010b_spin2_blit
237e8     18 CA 05 F6 | 	mov	COUNT_, #24
237ec     E8 00 A0 FD | 	call	#pushregs_
237f0     49 A7 02 F6 | 	mov	local01, arg01
237f4     4A A9 02 F6 | 	mov	local02, arg02
237f8     4B AB 02 F6 | 	mov	local03, arg03
237fc     4C AD 02 F6 | 	mov	local04, arg04
23800     4D AF 02 F6 | 	mov	local05, arg05
23804     4E B1 02 F6 | 	mov	local06, arg06
23808     4F B3 02 F6 | 	mov	local07, arg07
2380c     50 B5 02 F6 | 	mov	local08, arg08
23810     51 B7 02 F6 | 	mov	local09, arg09
23814     52 B9 02 F6 | 	mov	local10, arg10
23818                 | ' 
23818                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
23818     00 04 00 FF 
2381c     00 A6 56 F2 | 	cmps	local01, ##524288 wc
23820     00 04 00 3F 
23824     00 B2 56 32 |  if_ae	cmps	local07, ##524288 wc
23828     98 01 90 CD |  if_b	jmp	#LR__2934
2382c     56 A9 5A F2 | 	cmps	local02, local04 wcz
23830     54 BB 02 16 |  if_a	mov	local11, local02
23834     56 A9 02 16 |  if_a	mov	local02, local04
23838     5D AD 02 16 |  if_a	mov	local04, local11
2383c     57 AB 5A F2 | 	cmps	local03, local05 wcz
23840     55 BB 02 16 |  if_a	mov	local11, local03
23844     57 AB 02 16 |  if_a	mov	local03, local05
23848     58 AB 02 FD | 	qmul	local03, local06
2384c                 | '   if x1a>x2a
2384c                 | '     x1a,x2a:=x2a,x1a
2384c                 | '   if y1a>y2a
2384c                 | '     y1a,y2a:=y2a,y1a  
2384c     5D AF 02 16 |  if_a	mov	local05, local11
23850                 | '   if x2a-x1a>1023 
23850     56 BB 02 F6 | 	mov	local11, local04
23854     54 BB 82 F1 | 	sub	local11, local02
23858     02 00 00 FF 
2385c     00 BA 56 F2 | 	cmps	local11, ##1024 wc
23860                 | '     x2a:=x1a+1023 ' limit the line to 1024
23860     54 AD 02 36 |  if_ae	mov	local04, local02
23864     01 00 00 3F 
23868     FF AD 06 31 |  if_ae	add	local04, ##1023
2386c                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
2386c     59 BD 02 F6 | 	mov	local12, local07
23870     54 BD 02 F1 | 	add	local12, local02
23874     18 BA 62 FD | 	getqx	local11
23878     5C B7 02 FD | 	qmul	local09, local10
2387c     5D BD 02 F1 | 	add	local12, local11
23880     53 BF 02 F6 | 	mov	local13, local01
23884     5A BF 02 F1 | 	add	local13, local08
23888     18 BA 62 FD | 	getqx	local11
2388c     5D BF 02 F1 | 	add	local13, local11
23890     5F BD 5A F2 | 	cmps	local12, local13 wcz
23894     98 00 90 ED |  if_be	jmp	#LR__2931
23898                 | '     repeat y from y1a to y2a
23898     55 C1 02 F6 | 	mov	local14, local03
2389c     55 AF 52 F2 | 	cmps	local05, local03 wc
238a0     01 C2 86 F6 | 	negc	local15, #1
238a4     57 C5 02 F6 | 	mov	local16, local05
238a8     61 C5 02 F1 | 	add	local16, local15
238ac     0B 00 00 FF 
238b0     CC 64 06 F1 | 	add	objptr, ##5836
238b4                 | LR__2930
238b4     58 C1 02 FD | 	qmul	local14, local06
238b8                 | '   '    writeln(string("I am here"))
238b8                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
238b8     53 95 02 F6 | 	mov	arg02, local01
238bc     56 97 02 F6 | 	mov	arg03, local04
238c0     54 97 82 F1 | 	sub	arg03, local02
238c4     01 96 06 F1 | 	add	arg03, #1
238c8     F4 03 00 FF 
238cc     00 92 06 F6 | 	mov	arg01, ##518144
238d0     18 BE 62 FD | 	getqx	local13
238d4     5F 95 02 F1 | 	add	arg02, local13
238d8     54 95 02 F1 | 	add	arg02, local02
238dc     B8 04 B0 FD | 	call	#_psram_spin2_read1
238e0     5B BF 02 F6 | 	mov	local13, local09
238e4     55 BF 82 F1 | 	sub	local13, local03
238e8     60 BF 02 F1 | 	add	local13, local14
238ec     5C BF 02 FD | 	qmul	local13, local10
238f0                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
238f0     59 95 02 F6 | 	mov	arg02, local07
238f4     56 97 02 F6 | 	mov	arg03, local04
238f8     54 97 82 F1 | 	sub	arg03, local02
238fc     01 96 06 F1 | 	add	arg03, #1
23900     F4 03 00 FF 
23904     00 92 06 F6 | 	mov	arg01, ##518144
23908     18 BE 62 FD | 	getqx	local13
2390c     5F 95 02 F1 | 	add	arg02, local13
23910     5A 95 02 F1 | 	add	arg02, local08
23914     1C 05 B0 FD | 	call	#_psram_spin2_write
23918     61 C1 02 F1 | 	add	local14, local15
2391c     62 C1 0A F2 | 	cmp	local14, local16 wz
23920     90 FF 9F 5D |  if_ne	jmp	#LR__2930
23924     0B 00 00 FF 
23928     CC 64 86 F1 | 	sub	objptr, ##5836
2392c     94 00 90 FD | 	jmp	#LR__2933
23930                 | LR__2931
23930                 | '   else
23930                 | '     repeat y from y2a to y1a
23930     57 C1 02 F6 | 	mov	local14, local05
23934     57 AB 52 F2 | 	cmps	local03, local05 wc
23938     01 C6 86 F6 | 	negc	local17, #1
2393c     55 C9 02 F6 | 	mov	local18, local03
23940     63 C9 02 F1 | 	add	local18, local17
23944     0B 00 00 FF 
23948     CC 64 06 F1 | 	add	objptr, ##5836
2394c                 | LR__2932
2394c     58 C1 02 FD | 	qmul	local14, local06
23950                 | '  '     writeln(string("I am there"))
23950                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
23950     53 95 02 F6 | 	mov	arg02, local01
23954     56 97 02 F6 | 	mov	arg03, local04
23958     54 97 82 F1 | 	sub	arg03, local02
2395c     01 96 06 F1 | 	add	arg03, #1
23960     F4 03 00 FF 
23964     00 92 06 F6 | 	mov	arg01, ##518144
23968     18 C4 62 FD | 	getqx	local16
2396c     62 95 02 F1 | 	add	arg02, local16
23970     54 95 02 F1 | 	add	arg02, local02
23974     20 04 B0 FD | 	call	#_psram_spin2_read1
23978     5B C5 02 F6 | 	mov	local16, local09
2397c     55 C5 82 F1 | 	sub	local16, local03
23980     60 C5 02 F1 | 	add	local16, local14
23984     5C C5 02 FD | 	qmul	local16, local10
23988                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
23988     59 95 02 F6 | 	mov	arg02, local07
2398c     56 97 02 F6 | 	mov	arg03, local04
23990     54 97 82 F1 | 	sub	arg03, local02
23994     01 96 06 F1 | 	add	arg03, #1
23998     F4 03 00 FF 
2399c     00 92 06 F6 | 	mov	arg01, ##518144
239a0     18 C4 62 FD | 	getqx	local16
239a4     62 95 02 F1 | 	add	arg02, local16
239a8     5A 95 02 F1 | 	add	arg02, local08
239ac     84 04 B0 FD | 	call	#_psram_spin2_write
239b0     63 C1 02 F1 | 	add	local14, local17
239b4     64 C1 0A F2 | 	cmp	local14, local18 wz
239b8     90 FF 9F 5D |  if_ne	jmp	#LR__2932
239bc     0B 00 00 FF 
239c0     CC 64 86 F1 | 	sub	objptr, ##5836
239c4                 | LR__2933
239c4                 | LR__2934
239c4                 | '     
239c4                 | ' if ((f>=$80000) && (t<$80000)) 
239c4     00 04 00 FF 
239c8     00 A6 56 F2 | 	cmps	local01, ##524288 wc
239cc     80 00 90 CD |  if_b	jmp	#LR__2936
239d0     00 04 00 FF 
239d4     00 B2 56 F2 | 	cmps	local07, ##524288 wc
239d8     74 00 90 3D |  if_ae	jmp	#LR__2936
239dc                 | '   repeat y from y1a to y2a
239dc     55 C1 02 F6 | 	mov	local14, local03
239e0     55 AF 52 F2 | 	cmps	local05, local03 wc
239e4     01 CA 86 F6 | 	negc	local19, #1
239e8     57 CD 02 F6 | 	mov	local20, local05
239ec     65 CD 02 F1 | 	add	local20, local19
239f0     0B 00 00 FF 
239f4     CC 64 06 F1 | 	add	objptr, ##5836
239f8                 | LR__2935
239f8     5B C9 02 F6 | 	mov	local18, local09
239fc     55 C9 82 F1 | 	sub	local18, local03
23a00     60 C9 02 F1 | 	add	local18, local14
23a04     5C C9 02 FD | 	qmul	local18, local10
23a08                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
23a08     59 93 02 F6 | 	mov	arg01, local07
23a0c     18 C8 62 FD | 	getqx	local18
23a10     58 C1 02 FD | 	qmul	local14, local06
23a14     64 93 02 F1 | 	add	arg01, local18
23a18     5A 93 02 F1 | 	add	arg01, local08
23a1c     53 95 02 F6 | 	mov	arg02, local01
23a20     56 97 02 F6 | 	mov	arg03, local04
23a24     54 97 82 F1 | 	sub	arg03, local02
23a28     01 96 06 F1 | 	add	arg03, #1
23a2c     18 C8 62 FD | 	getqx	local18
23a30     64 95 02 F1 | 	add	arg02, local18
23a34     54 95 02 F1 | 	add	arg02, local02
23a38     5C 03 B0 FD | 	call	#_psram_spin2_read1
23a3c     65 C1 02 F1 | 	add	local14, local19
23a40     66 C1 0A F2 | 	cmp	local14, local20 wz
23a44     B0 FF 9F 5D |  if_ne	jmp	#LR__2935
23a48     0B 00 00 FF 
23a4c     CC 64 86 F1 | 	sub	objptr, ##5836
23a50                 | LR__2936
23a50                 | '     
23a50                 | ' if ((f<$80000) && (t>=$80000)) 
23a50     00 04 00 FF 
23a54     00 A6 56 F2 | 	cmps	local01, ##524288 wc
23a58     84 00 90 3D |  if_ae	jmp	#LR__2938
23a5c     00 04 00 FF 
23a60     00 B2 56 F2 | 	cmps	local07, ##524288 wc
23a64     78 00 90 CD |  if_b	jmp	#LR__2938
23a68                 | '   t:=t & $FFFFFFF
23a68     7C B2 06 F4 | 	bitl	local07, #124
23a6c                 | '   repeat y from y1a to y2a
23a6c     55 C1 02 F6 | 	mov	local14, local03
23a70     55 AF 52 F2 | 	cmps	local05, local03 wc
23a74     01 CE 86 F6 | 	negc	local21, #1
23a78     57 D1 02 F6 | 	mov	local22, local05
23a7c     67 D1 02 F1 | 	add	local22, local21
23a80     0B 00 00 FF 
23a84     CC 64 06 F1 | 	add	objptr, ##5836
23a88                 | LR__2937
23a88     58 C1 02 FD | 	qmul	local14, local06
23a8c                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
23a8c     53 93 02 F6 | 	mov	arg01, local01
23a90     5B CD 02 F6 | 	mov	local20, local09
23a94     55 CD 82 F1 | 	sub	local20, local03
23a98     60 CD 02 F1 | 	add	local20, local14
23a9c     18 CA 62 FD | 	getqx	local19
23aa0     5C CD 02 FD | 	qmul	local20, local10
23aa4     65 93 02 F1 | 	add	arg01, local19
23aa8     54 93 02 F1 | 	add	arg01, local02
23aac     59 95 02 F6 | 	mov	arg02, local07
23ab0     56 97 02 F6 | 	mov	arg03, local04
23ab4     54 97 82 F1 | 	sub	arg03, local02
23ab8     01 96 06 F1 | 	add	arg03, #1
23abc     18 CC 62 FD | 	getqx	local20
23ac0     66 95 02 F1 | 	add	arg02, local20
23ac4     5A 95 02 F1 | 	add	arg02, local08
23ac8     68 03 B0 FD | 	call	#_psram_spin2_write
23acc     67 C1 02 F1 | 	add	local14, local21
23ad0     68 C1 0A F2 | 	cmp	local14, local22 wz
23ad4     B0 FF 9F 5D |  if_ne	jmp	#LR__2937
23ad8     0B 00 00 FF 
23adc     CC 64 86 F1 | 	sub	objptr, ##5836
23ae0                 | LR__2938
23ae0                 | '     
23ae0                 | ' if ((f<$80000) && (t<$80000)) 
23ae0     00 04 00 FF 
23ae4     00 A6 56 F2 | 	cmps	local01, ##524288 wc
23ae8     00 04 00 CF 
23aec     00 B2 56 C2 |  if_b	cmps	local07, ##524288 wc
23af0     64 00 90 3D |  if_ae	jmp	#LR__2940
23af4                 | '   repeat y from y1a to y2a
23af4     55 C1 02 F6 | 	mov	local14, local03
23af8     55 AF 52 F2 | 	cmps	local05, local03 wc
23afc     01 D2 86 F6 | 	negc	local23, #1
23b00     57 D5 02 F6 | 	mov	local24, local05
23b04     69 D5 02 F1 | 	add	local24, local23
23b08                 | LR__2939
23b08     58 C1 02 FD | 	qmul	local14, local06
23b0c                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
23b0c     53 93 02 F6 | 	mov	arg01, local01
23b10     5B D1 02 F6 | 	mov	local22, local09
23b14     55 D1 82 F1 | 	sub	local22, local03
23b18     60 D1 02 F1 | 	add	local22, local14
23b1c     18 CE 62 FD | 	getqx	local21
23b20     5C D1 02 FD | 	qmul	local22, local10
23b24     67 93 02 F1 | 	add	arg01, local21
23b28     54 93 02 F1 | 	add	arg01, local02
23b2c     59 95 02 F6 | 	mov	arg02, local07
23b30     56 97 02 F6 | 	mov	arg03, local04
23b34     54 97 82 F1 | 	sub	arg03, local02
23b38     01 96 06 F1 | 	add	arg03, #1
23b3c     18 D0 62 FD | 	getqx	local22
23b40     68 95 02 F1 | 	add	arg02, local22
23b44     5A 95 02 F1 | 	add	arg02, local08
23b48     1C 0D B0 FD | 	call	#__system____builtin_memmove
23b4c     69 C1 02 F1 | 	add	local14, local23
23b50     6A C1 0A F2 | 	cmp	local14, local24 wz
23b54     B0 FF 9F 5D |  if_ne	jmp	#LR__2939
23b58                 | LR__2940
23b58     E7 F0 03 F6 | 	mov	ptra, fp
23b5c     F2 00 A0 FD | 	call	#popregs_
23b60                 | _hg010b_spin2_blit_ret
23b60     2D 00 64 FD | 	ret
23b64                 | 
23b64                 | ' 
23b64                 | ' '..............................................................................
23b64                 | ' 
23b64                 | ' {{
23b64                 | ' }}
23b64                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
23b64                 | _psram_spin2_startx
23b64     04 CA 05 F6 | 	mov	COUNT_, #4
23b68     E8 00 A0 FD | 	call	#pushregs_
23b6c     49 A7 02 F6 | 	mov	local01, arg01
23b70     4B A9 02 F6 | 	mov	local02, arg03
23b74     4C AB 02 F6 | 	mov	local03, arg04
23b78                 | '     stop() ' restart driver if required
23b78     5C 01 B0 FD | 	call	#_psram_spin2_stop
23b7c     00 A6 0E F2 | 	cmp	local01, #0 wz
23b80     14 A6 06 AB |  if_e	rdlong	local01, #20
23b84     53 95 52 F6 | 	abs	arg02, local01 wc
23b88     A1 07 00 FF 
23b8c     40 94 16 FD | 	qdiv	arg02, ##1000000
23b90                 | ' 
23b90                 | '     ' use current frequency if none specified
23b90                 | ' 
23b90                 | '     if freq == 0 
23b90                 | '         freq := clkfreq 
23b90                 | ' 
23b90                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
23b90                 | ' 
23b90                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
23b90                 | '     if burst < 0
23b90                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
23b90     18 94 62 FD | 	getqx	arg02
23b94     4A 99 82 F6 | 	negc	arg04, arg02
23b98     03 98 66 F0 | 	shl	arg04, #3
23b9c     84 98 86 F1 | 	sub	arg04, #132
23ba0     04 98 46 F0 | 	shr	arg04, #4
23ba4     04 98 66 F0 | 	shl	arg04, #4
23ba8     00 98 56 F2 | 	cmps	arg04, #0 wc
23bac     0E 7A 66 C6 |  if_b	neg	result1, #14
23bb0     18 01 90 CD |  if_b	jmp	#LR__2954
23bb4                 | ' 
23bb4                 | '     ' compute the input delay
23bb4                 | ' 
23bb4                 | '     if delay <= 0
23bb4     01 A8 56 F2 | 	cmps	local02, #1 wc
23bb8     10 00 90 3D |  if_ae	jmp	#LR__2950
23bbc                 | '         delay := lookupDelay(freq)
23bbc     53 93 02 F6 | 	mov	arg01, local01
23bc0     C0 04 B0 FD | 	call	#_psram_spin2_lookupDelay
23bc4     3D A9 02 F6 | 	mov	local02, result1
23bc8     04 00 90 FD | 	jmp	#LR__2951
23bcc                 | LR__2950
23bcc                 | '     else
23bcc                 | '         delay <#= $f ' limit to 15
23bcc     0F A8 66 F3 | 	fles	local02, #15
23bd0                 | LR__2951
23bd0                 | ' 
23bd0                 | '     ' create our lock
23bd0                 | ' 
23bd0                 | '     driverlock := LOCKNEW()  
23bd0     00 7A 06 F6 | 	mov	result1, #0
23bd4     04 7A 62 FD | 	locknew	result1
23bd8     04 75 06 F1 | 	add	ptr__psram_spin2_dat__, #260
23bdc     3A 7B 62 FC | 	wrlong	result1, ptr__psram_spin2_dat__
23be0                 | '     if driverlock == -1
23be0     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
23be4     FF FF 7F FF 
23be8     FF 7B 0E F2 | 	cmp	result1, ##-1 wz
23bec                 | '         return ERR_NO_LOCK
23bec     1A 7A 66 A6 |  if_e	neg	result1, #26
23bf0     D8 00 90 AD |  if_e	jmp	#LR__2954
23bf4                 | ' 
23bf4                 | '     ' patch in the proper data and HUB addresses to the startup structure
23bf4                 | ' 
23bf4                 | '     long[@startupData][0]:=clkfreq
23bf4     14 A6 06 FB | 	rdlong	local01, #20
23bf8     28 75 06 F1 | 	add	ptr__psram_spin2_dat__, #296
23bfc     3A A7 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
23c00                 | ' '    long[@startupData][1]:=$1000_0000
23c00                 | '     long[@startupData][5]:=@deviceData
23c00     3A A7 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
23c04     20 A6 06 F1 | 	add	local01, #32
23c08     3A 95 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
23c0c     14 94 06 F1 | 	add	arg02, #20
23c10     4A A7 62 FC | 	wrlong	local01, arg02
23c14                 | '     long[@startupData][6]:=@qosData
23c14     3A A7 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
23c18     A0 A6 06 F1 | 	add	local01, #160
23c1c     3A 95 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
23c20     18 94 06 F1 | 	add	arg02, #24
23c24     4A A7 62 FC | 	wrlong	local01, arg02
23c28                 | '     long[@startupData][7]:=$7FF00
23c28     3A A7 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
23c2c     1C A6 06 F1 | 	add	local01, #28
23c30     FF 03 80 FF 
23c34     53 01 6A FC | 	wrlong	##524032, local01
23c38                 | ' 
23c38                 | '     ' setup some default bank and QoS parameter values
23c38                 | ' 
23c38                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
23c38     20 74 06 F1 | 	add	ptr__psram_spin2_dat__, #32
23c3c     3A 93 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
23c40     48 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #328
23c44     10 98 66 F0 | 	shl	arg04, #16
23c48     0C A8 66 F0 | 	shl	local02, #12
23c4c     54 99 42 F5 | 	or	arg04, local02
23c50     18 98 46 F5 | 	or	arg04, #24
23c54     4C 95 02 F6 | 	mov	arg02, arg04
23c58     02 96 06 F6 | 	mov	arg03, #2
23c5c     E0 00 A0 FD | 	call	#\builtin_longfill_
23c60                 | '     longfill(@qosData, $FFFF0000, 8)
23c60     3A 93 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
23c64     C8 93 06 F1 | 	add	arg01, #456
23c68     07 96 06 F6 | 	mov	arg03, #7
23c6c     28 96 62 FD | 	setq	arg03
23c70     80 FF FF FF 
23c74     49 01 68 FC | 	wrlong	##-65536, arg01
23c78                 | ' 
23c78                 | '     ' get the address of the PSRAM memory driver so we can start it
23c78                 | ' 
23c78                 | '     driverAddr:= driver.getDriverAddr()
23c78                 | '     return @driver_start
23c78     39 95 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
23c7c     20 94 06 F1 | 	add	arg02, #32
23c80                 | ' 
23c80                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
23c80                 | ' 
23c80                 | '     if desiredcog < 0
23c80     00 AA 56 F2 | 	cmps	local03, #0 wc
23c84                 | '         desiredcog := NEWCOG
23c84     10 AA 06 C6 |  if_b	mov	local03, #16
23c88                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
23c88     3A 97 02 F6 | 	mov	arg03, ptr__psram_spin2_dat__
23c8c     28 97 06 F1 | 	add	arg03, #296
23c90     55 AD 02 F6 | 	mov	local04, local03
23c94     28 96 62 FD | 	setq	arg03
23c98     4A AD F2 FC | 	coginit	local04, arg02 wc
23c9c     01 AC 66 C6 |  if_b	neg	local04, #1
23ca0     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23ca4     3A AD 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
23ca8     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23cac     D7 08 48 FB | 	callpa	#(@LR__2953-@LR__2952)>>2,fcache_load_ptr_
23cb0                 | '     repeat until long[@startupData] == 0 
23cb0                 | LR__2952
23cb0     3A AD 02 F6 | 	mov	local04, ptr__psram_spin2_dat__
23cb4     28 AD 06 F1 | 	add	local04, #296
23cb8     56 AD 0A FB | 	rdlong	local04, local04 wz
23cbc     F0 FF 9F 5D |  if_ne	jmp	#LR__2952
23cc0                 | LR__2953
23cc0                 | ' 
23cc0                 | '     return drivercog
23cc0     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23cc4     3A 7B 02 FB | 	rdlong	result1, ptr__psram_spin2_dat__
23cc8     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23ccc                 | LR__2954
23ccc     E7 F0 03 F6 | 	mov	ptra, fp
23cd0     F2 00 A0 FD | 	call	#popregs_
23cd4                 | _psram_spin2_startx_ret
23cd4     2D 00 64 FD | 	ret
23cd8                 | 
23cd8                 | ' 
23cd8                 | ' '..............................................................................
23cd8                 | ' 
23cd8                 | ' {{
23cd8                 | ' }}
23cd8                 | ' PUB stop() : i
23cd8                 | _psram_spin2_stop
23cd8     00 80 06 F6 | 	mov	_var01, #0
23cdc                 | '     if drivercog <> -1
23cdc     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23ce0     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
23ce4     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23ce8     FF FF 7F FF 
23cec     FF 93 0E F2 | 	cmp	arg01, ##-1 wz
23cf0     70 00 90 AD |  if_e	jmp	#LR__2963
23cf4                 | '         cogstop(drivercog) ' a rather brutal stop
23cf4     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23cf8     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
23cfc     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23d00     03 92 62 FD | 	cogstop	arg01
23d04     D7 26 48 FB | 	callpa	#(@LR__2962-@LR__2960)>>2,fcache_load_ptr_
23d08                 | '         repeat i from 0 to 7
23d08                 | LR__2960
23d08                 | '             if long[$7FF00][i*3] < 0
23d08     40 7B 02 F6 | 	mov	result1, _var01
23d0c     01 7A 66 F0 | 	shl	result1, #1
23d10     40 7B 02 F1 | 	add	result1, _var01
23d14     02 7A 66 F0 | 	shl	result1, #2
23d18     FF 03 00 FF 
23d1c     00 7B 06 F1 | 	add	result1, ##524032
23d20     3D 7B 02 FB | 	rdlong	result1, result1
23d24     00 7A 56 F2 | 	cmps	result1, #0 wc
23d28     1C 00 90 3D |  if_ae	jmp	#LR__2961
23d2c                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
23d2c     40 7B 02 F6 | 	mov	result1, _var01
23d30     01 7A 66 F0 | 	shl	result1, #1
23d34     40 7B 02 F1 | 	add	result1, _var01
23d38     02 7A 66 F0 | 	shl	result1, #2
23d3c     FF 03 00 FF 
23d40     00 7B 06 F1 | 	add	result1, ##524032
23d44     3D 21 68 FC | 	wrlong	#16, result1
23d48                 | LR__2961
23d48     01 80 06 F1 | 	add	_var01, #1
23d4c     08 80 56 F2 | 	cmps	_var01, #8 wc
23d50     B4 FF 9F CD |  if_b	jmp	#LR__2960
23d54                 | LR__2962
23d54                 | '         drivercog := -1
23d54     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23d58     FF FF FF FF 
23d5c     3A FF 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
23d60     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23d64                 | LR__2963
23d64                 | '     if driverlock <> -1
23d64     04 75 06 F1 | 	add	ptr__psram_spin2_dat__, #260
23d68     3A 83 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
23d6c     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
23d70     FF FF 7F FF 
23d74     FF 83 0E F2 | 	cmp	_var02, ##-1 wz
23d78                 | '         LOCKRET(driverlock)
23d78     04 75 06 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
23d7c     3A 93 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
23d80     05 92 62 5D |  if_ne	lockret	arg01
23d84                 | '         driverlock := -1
23d84     FF FF FF 5F 
23d88     3A FF 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
23d8c     04 75 86 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
23d90     40 7B 02 F6 | 	mov	result1, _var01
23d94                 | _psram_spin2_stop_ret
23d94     2D 00 64 FD | 	ret
23d98                 | 
23d98                 | ' 
23d98                 | ' '..............................................................................
23d98                 | ' 
23d98                 | ' {{
23d98                 | ' }}
23d98                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
23d98                 | _psram_spin2_read1
23d98                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
23d98                 | '     if drivercog == -1 ' driver must be running
23d98     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23d9c     3A 81 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
23da0     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23da4     FF FF 7F FF 
23da8     FF 81 0E F2 | 	cmp	_var01, ##-1 wz
23dac                 | '         return ERR_INACTIVE
23dac     0F 7A 66 A6 |  if_e	neg	result1, #15
23db0     7C 00 90 AD |  if_e	jmp	#LR__2971
23db4                 | '     if count == 0 ' don't even bother reading
23db4     00 96 0E F2 | 	cmp	arg03, #0 wz
23db8                 | '         return 0
23db8     00 7A 06 A6 |  if_e	mov	result1, #0
23dbc     70 00 90 AD |  if_e	jmp	#LR__2971
23dc0                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
23dc0     00 7A 06 F6 | 	mov	result1, #0
23dc4     01 7A 62 FD | 	cogid	result1
23dc8     3D 81 02 F6 | 	mov	_var01, result1
23dcc     01 80 66 F0 | 	shl	_var01, #1
23dd0     3D 81 02 F1 | 	add	_var01, result1
23dd4     02 80 66 F0 | 	shl	_var01, #2
23dd8     FF 03 00 FF 
23ddc     00 83 06 F6 | 	mov	_var02, ##524032
23de0     40 83 02 F1 | 	add	_var02, _var01
23de4                 | '     if long[mailbox] < 0
23de4     41 81 02 FB | 	rdlong	_var01, _var02
23de8     00 80 56 F2 | 	cmps	_var01, #0 wc
23dec                 | '         return ERR_MAILBOX_BUSY
23dec     1C 7A 66 C6 |  if_b	neg	result1, #28
23df0     3C 00 90 CD |  if_b	jmp	#LR__2971
23df4                 | '     long[mailbox][2] := count
23df4     08 82 06 F1 | 	add	_var02, #8
23df8     41 97 62 FC | 	wrlong	arg03, _var02
23dfc                 | '     long[mailbox][1] := dstHubAddr
23dfc     04 82 86 F1 | 	sub	_var02, #4
23e00     41 93 62 FC | 	wrlong	arg01, _var02
23e04     04 82 86 F1 | 	sub	_var02, #4
23e08                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
23e08     4A 85 02 F6 | 	mov	_var03, arg02
23e0c     D9 84 06 F4 | 	bitl	_var03, #217
23e10     00 00 58 FF 
23e14     00 80 06 F6 | 	mov	_var01, ##-1342177280
23e18     42 81 02 F1 | 	add	_var01, _var03
23e1c     41 81 62 FC | 	wrlong	_var01, _var02
23e20                 | '     repeat
23e20                 | LR__2970
23e20                 | '         result := long[mailbox]    
23e20     41 85 02 FB | 	rdlong	_var03, _var02
23e24     00 84 56 F2 | 	cmps	_var03, #0 wc
23e28     F4 FF 9F CD |  if_b	jmp	#LR__2970
23e2c                 | '     while result < 0   
23e2c                 | '     return -result                       'return success or error
23e2c     42 7B 62 F6 | 	neg	result1, _var03
23e30                 | LR__2971
23e30                 | _psram_spin2_read1_ret
23e30     2D 00 64 FD | 	ret
23e34                 | 
23e34                 | ' 
23e34                 | ' '..............................................................................
23e34                 | ' 
23e34                 | ' {{
23e34                 | ' }}
23e34                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
23e34                 | _psram_spin2_write
23e34                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
23e34                 | '     if drivercog == -1 ' driver must be running
23e34     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23e38     3A 81 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
23e3c     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23e40     FF FF 7F FF 
23e44     FF 81 0E F2 | 	cmp	_var01, ##-1 wz
23e48                 | '         return ERR_INACTIVE
23e48     0F 7A 66 A6 |  if_e	neg	result1, #15
23e4c     7C 00 90 AD |  if_e	jmp	#LR__2981
23e50                 | '     if count == 0 ' don't even bother writing
23e50     00 96 0E F2 | 	cmp	arg03, #0 wz
23e54                 | '         return 0
23e54     00 7A 06 A6 |  if_e	mov	result1, #0
23e58     70 00 90 AD |  if_e	jmp	#LR__2981
23e5c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
23e5c     00 7A 06 F6 | 	mov	result1, #0
23e60     01 7A 62 FD | 	cogid	result1
23e64     3D 81 02 F6 | 	mov	_var01, result1
23e68     01 80 66 F0 | 	shl	_var01, #1
23e6c     3D 81 02 F1 | 	add	_var01, result1
23e70     02 80 66 F0 | 	shl	_var01, #2
23e74     FF 03 00 FF 
23e78     00 83 06 F6 | 	mov	_var02, ##524032
23e7c     40 83 02 F1 | 	add	_var02, _var01
23e80                 | '     if long[mailbox] < 0
23e80     41 81 02 FB | 	rdlong	_var01, _var02
23e84     00 80 56 F2 | 	cmps	_var01, #0 wc
23e88                 | '         return ERR_MAILBOX_BUSY
23e88     1C 7A 66 C6 |  if_b	neg	result1, #28
23e8c     3C 00 90 CD |  if_b	jmp	#LR__2981
23e90                 | '     long[mailbox][2] := count
23e90     08 82 06 F1 | 	add	_var02, #8
23e94     41 97 62 FC | 	wrlong	arg03, _var02
23e98                 | '     long[mailbox][1] := srcHubAddr
23e98     04 82 86 F1 | 	sub	_var02, #4
23e9c     41 93 62 FC | 	wrlong	arg01, _var02
23ea0     04 82 86 F1 | 	sub	_var02, #4
23ea4                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
23ea4     4A 85 02 F6 | 	mov	_var03, arg02
23ea8     D9 84 06 F4 | 	bitl	_var03, #217
23eac     00 00 78 FF 
23eb0     00 80 06 F6 | 	mov	_var01, ##-268435456
23eb4     42 81 02 F1 | 	add	_var01, _var03
23eb8     41 81 62 FC | 	wrlong	_var01, _var02
23ebc                 | '     repeat
23ebc                 | LR__2980
23ebc                 | '         result := long[mailbox]    
23ebc     41 85 02 FB | 	rdlong	_var03, _var02
23ec0     00 84 56 F2 | 	cmps	_var03, #0 wc
23ec4     F4 FF 9F CD |  if_b	jmp	#LR__2980
23ec8                 | '     while result < 0   
23ec8                 | '     return -result                       'return success or error
23ec8     42 7B 62 F6 | 	neg	result1, _var03
23ecc                 | LR__2981
23ecc                 | _psram_spin2_write_ret
23ecc     2D 00 64 FD | 	ret
23ed0                 | 
23ed0                 | ' 
23ed0                 | ' ' generalized fill
23ed0                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
23ed0                 | _psram_spin2_fill
23ed0     49 81 02 F6 | 	mov	_var01, arg01
23ed4     4A 83 02 F6 | 	mov	_var02, arg02
23ed8     4B 85 02 F6 | 	mov	_var03, arg03
23edc     4D 87 02 F6 | 	mov	_var04, arg05
23ee0                 | '     case datasize 
23ee0     01 86 86 F1 | 	sub	_var04, #1
23ee4     04 86 26 F3 | 	fle	_var04, #4
23ee8     30 86 62 FD | 	jmprel	_var04
23eec                 | LR__2990
23eec     10 00 90 FD | 	jmp	#LR__2991
23ef0     18 00 90 FD | 	jmp	#LR__2992
23ef4     2C 00 90 FD | 	jmp	#LR__2994
23ef8     1C 00 90 FD | 	jmp	#LR__2993
23efc     24 00 90 FD | 	jmp	#LR__2994
23f00                 | LR__2991
23f00                 | '         1: req := driver.R_WRITEBYTE
23f00     00 00 60 FF 
23f04     00 88 06 F6 | 	mov	_var05, ##-1073741824
23f08     20 00 90 FD | 	jmp	#LR__2995
23f0c                 | LR__2992
23f0c                 | '         2: req := driver.R_WRITEWORD
23f0c     00 00 68 FF 
23f10     00 88 06 F6 | 	mov	_var05, ##-805306368
23f14     14 00 90 FD | 	jmp	#LR__2995
23f18                 | LR__2993
23f18                 | '         4: req := driver.R_WRITELONG
23f18     00 00 70 FF 
23f1c     00 88 06 F6 | 	mov	_var05, ##-536870912
23f20     08 00 90 FD | 	jmp	#LR__2995
23f24                 | LR__2994
23f24                 | '         other : return ERR_INVALID
23f24     06 7A 66 F6 | 	neg	result1, #6
23f28     94 00 90 FD | 	jmp	#LR__2997
23f2c                 | LR__2995
23f2c                 | '     if count == 0   ' nothing to do
23f2c     00 84 0E F2 | 	cmp	_var03, #0 wz
23f30                 | '         return 0
23f30     00 7A 06 A6 |  if_e	mov	result1, #0
23f34     88 00 90 AD |  if_e	jmp	#LR__2997
23f38                 | '     if drivercog == -1
23f38     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23f3c     3A 87 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
23f40     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23f44     FF FF 7F FF 
23f48     FF 87 0E F2 | 	cmp	_var04, ##-1 wz
23f4c                 | '         return ERR_INACTIVE
23f4c     0F 7A 66 A6 |  if_e	neg	result1, #15
23f50     6C 00 90 AD |  if_e	jmp	#LR__2997
23f54                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
23f54     00 7A 06 F6 | 	mov	result1, #0
23f58     01 7A 62 FD | 	cogid	result1
23f5c     3D 87 02 F6 | 	mov	_var04, result1
23f60     01 86 66 F0 | 	shl	_var04, #1
23f64     3D 87 02 F1 | 	add	_var04, result1
23f68     02 86 66 F0 | 	shl	_var04, #2
23f6c     FF 03 00 FF 
23f70     00 8B 06 F6 | 	mov	_var06, ##524032
23f74     43 8B 02 F1 | 	add	_var06, _var04
23f78                 | '     if long[mailbox] < 0
23f78     45 87 02 FB | 	rdlong	_var04, _var06
23f7c     00 86 56 F2 | 	cmps	_var04, #0 wc
23f80                 | '         return ERR_MAILBOX_BUSY
23f80     1C 7A 66 C6 |  if_b	neg	result1, #28
23f84     38 00 90 CD |  if_b	jmp	#LR__2997
23f88                 | '     long[mailbox][2] := count
23f88     08 8A 06 F1 | 	add	_var06, #8
23f8c     45 85 62 FC | 	wrlong	_var03, _var06
23f90                 | '     long[mailbox][1] := pattern
23f90     04 8A 86 F1 | 	sub	_var06, #4
23f94     45 83 62 FC | 	wrlong	_var02, _var06
23f98     04 8A 86 F1 | 	sub	_var06, #4
23f9c                 | '     long[mailbox] := req + (addr & $1ffffff)
23f9c     44 8D 02 F6 | 	mov	_var07, _var05
23fa0     40 8F 02 F6 | 	mov	_var08, _var01
23fa4     D9 8E 06 F4 | 	bitl	_var08, #217
23fa8     47 8D 02 F1 | 	add	_var07, _var08
23fac     45 8D 62 FC | 	wrlong	_var07, _var06
23fb0                 | '     repeat
23fb0                 | LR__2996
23fb0                 | '         r := long[mailbox]
23fb0     45 8F 02 FB | 	rdlong	_var08, _var06
23fb4     00 8E 56 F2 | 	cmps	_var08, #0 wc
23fb8     F4 FF 9F CD |  if_b	jmp	#LR__2996
23fbc                 | '     while r < 0
23fbc                 | '     return -r                  ' return 0 for success or negated error code
23fbc     47 7B 62 F6 | 	neg	result1, _var08
23fc0                 | LR__2997
23fc0                 | _psram_spin2_fill_ret
23fc0     2D 00 64 FD | 	ret
23fc4                 | 
23fc4                 | ' 
23fc4                 | ' '..............................................................................
23fc4                 | ' 
23fc4                 | ' {{
23fc4                 | ' }}
23fc4                 | ' PUB setQos(cog, qos) : result | mailbox
23fc4                 | _psram_spin2_setQos
23fc4     49 81 02 F6 | 	mov	_var01, arg01
23fc8                 | '     if drivercog == -1 ' driver must be running
23fc8     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23fcc     3A 83 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
23fd0     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23fd4     FF FF 7F FF 
23fd8     FF 83 0E F2 | 	cmp	_var02, ##-1 wz
23fdc                 | '         return ERR_INACTIVE
23fdc     0F 7A 66 A6 |  if_e	neg	result1, #15
23fe0     9C 00 90 AD |  if_e	jmp	#LR__3004
23fe4                 | '     if cog < 0 or cog > 7 ' enforce cog id range
23fe4     00 80 56 F2 | 	cmps	_var01, #0 wc
23fe8     08 00 90 CD |  if_b	jmp	#LR__3000
23fec     08 80 56 F2 | 	cmps	_var01, #8 wc
23ff0     08 00 90 CD |  if_b	jmp	#LR__3001
23ff4                 | LR__3000
23ff4                 | '         return ERR_INVALID
23ff4     06 7A 66 F6 | 	neg	result1, #6
23ff8     84 00 90 FD | 	jmp	#LR__3004
23ffc                 | LR__3001
23ffc                 | '     long[@qosData][cog] := qos & !$1ff
23ffc     FF 95 26 F5 | 	andn	arg02, #511
24000     C8 75 06 F1 | 	add	ptr__psram_spin2_dat__, #456
24004     02 80 66 F0 | 	shl	_var01, #2
24008     3A 81 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
2400c     40 95 62 FC | 	wrlong	arg02, _var01
24010                 | '     mailbox := $7FF00 + drivercog*12
24010     C8 74 86 F1 | 	sub	ptr__psram_spin2_dat__, #200
24014     3A 85 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
24018     42 87 02 F6 | 	mov	_var04, _var03
2401c     01 86 66 F0 | 	shl	_var04, #1
24020     42 87 02 F1 | 	add	_var04, _var03
24024     02 86 66 F0 | 	shl	_var04, #2
24028     FF 03 00 FF 
2402c     00 89 06 F6 | 	mov	_var05, ##524032
24030     43 89 02 F1 | 	add	_var05, _var04
24034                 | '     repeat until LOCKTRY(driverlock)
24034     04 74 06 F1 | 	add	ptr__psram_spin2_dat__, #4
24038                 | LR__3002
24038     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
2403c     06 92 72 FD | 	locktry	arg01 wc
24040     F4 FF 9F 3D |  if_ae	jmp	#LR__3002
24044     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
24048                 | '     long[mailbox] := driver.R_CONFIG + cogid()
24048     00 86 06 F6 | 	mov	_var04, #0
2404c     01 86 62 FD | 	cogid	_var04
24050     00 00 78 FF 
24054     00 82 06 F6 | 	mov	_var02, ##-268435456
24058     43 83 02 F1 | 	add	_var02, _var04
2405c     44 83 62 FC | 	wrlong	_var02, _var05
24060                 | '     repeat while long[mailbox] < 0
24060                 | LR__3003
24060     44 83 02 FB | 	rdlong	_var02, _var05
24064     00 82 56 F2 | 	cmps	_var02, #0 wc
24068     F4 FF 9F CD |  if_b	jmp	#LR__3003
2406c                 | '     LOCKREL(driverlock)
2406c     04 75 06 F1 | 	add	ptr__psram_spin2_dat__, #260
24070     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
24074     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
24078     07 92 72 FD | 	lockrel	arg01 wc
2407c     00 7A 06 F6 | 	mov	result1, #0
24080                 | LR__3004
24080                 | _psram_spin2_setQos_ret
24080     2D 00 64 FD | 	ret
24084                 | 
24084                 | ' 
24084                 | ' '..............................................................................
24084                 | ' 
24084                 | ' {{
24084                 | ' }}
24084                 | ' PRI lookupDelay(freq) : delay | profile
24084                 | _psram_spin2_lookupDelay
24084                 | '     profile := @delayTable
24084     3A 81 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
24088     08 81 06 F1 | 	add	_var01, #264
2408c                 | '     delay := long[profile][0]
2408c     40 83 02 FB | 	rdlong	_var02, _var01
24090     D7 16 48 FB | 	callpa	#(@LR__3011-@LR__3010)>>2,fcache_load_ptr_
24094                 | '     repeat while long[profile][1] 
24094                 | LR__3010
24094     04 80 06 F1 | 	add	_var01, #4
24098     40 7B 0A FB | 	rdlong	result1, _var01 wz
2409c     04 80 86 F1 | 	sub	_var01, #4
240a0     1C 00 90 AD |  if_e	jmp	#LR__3012
240a4                 | '         if freq +< long[profile][1] 
240a4     04 80 06 F1 | 	add	_var01, #4
240a8     40 7B 02 FB | 	rdlong	result1, _var01
240ac     04 80 86 F1 | 	sub	_var01, #4
240b0     3D 93 12 F2 | 	cmp	arg01, result1 wc
240b4                 | '             quit
240b4                 | '         profile += 4
240b4     04 80 06 31 |  if_ae	add	_var01, #4
240b8                 | '         delay++
240b8     01 82 06 31 |  if_ae	add	_var02, #1
240bc     D4 FF 9F 3D |  if_ae	jmp	#LR__3010
240c0                 | LR__3011
240c0                 | LR__3012
240c0     41 7B 02 F6 | 	mov	result1, _var02
240c4                 | _psram_spin2_lookupDelay_ret
240c4     2D 00 64 FD | 	ret
240c8                 | 
240c8                 | ' 
240c8                 | ' PUB start() : r
240c8                 | _usbnew_spin2_start
240c8     00 80 06 F6 | 	mov	_var01, #0
240cc                 | '   ifnot driver_cog
240cc     15 00 00 FF 
240d0     87 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10887
240d4     3B 83 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
240d8     15 00 00 FF 
240dc     87 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10887
240e0     38 00 90 5D |  if_ne	jmp	#LR__3020
240e4                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
240e4     3B 95 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
240e8     10 80 06 F6 | 	mov	_var01, #16
240ec     00 96 06 F6 | 	mov	arg03, #0
240f0     28 96 62 FD | 	setq	arg03
240f4     4A 81 F2 FC | 	coginit	_var01, arg02 wc
240f8     01 80 66 C6 |  if_b	neg	_var01, #1
240fc                 | '     if r >= 0
240fc     00 80 56 F2 | 	cmps	_var01, #0 wc
24100                 | '       driver_cog := r+1
24100     40 83 02 36 |  if_ae	mov	_var02, _var01
24104     01 82 06 31 |  if_ae	add	_var02, #1
24108     15 00 00 3F 
2410c     87 76 06 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10887
24110     3B 83 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
24114     15 00 00 3F 
24118     87 76 86 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10887
2411c                 | LR__3020
2411c     40 7B 02 F6 | 	mov	result1, _var01
24120                 | _usbnew_spin2_start_ret
24120     2D 00 64 FD | 	ret
24124                 | 
24124                 | '     '' (Always enabled)
24124                 | ' 
24124                 | ' '' Get current pressed state of a keyboard key
24124                 | ' PUB keystate(key) : r | buf[2],tmp
24124                 | _usbnew_spin2_keystate
24124     00 84 06 F6 | 	mov	_var03, #0
24128                 | '   if key >= $E0 && key < $E8
24128     E0 92 56 F2 | 	cmps	arg01, #224 wc
2412c     30 00 90 CD |  if_b	jmp	#LR__3030
24130     E8 92 56 F2 | 	cmps	arg01, #232 wc
24134     28 00 90 3D |  if_ae	jmp	#LR__3030
24138                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
24138     00 7A 06 F6 | 	mov	result1, #0
2413c     3B 87 02 F6 | 	mov	_var04, ptr__usbnew_spin2_dat__
24140     13 00 00 FF 
24144     D8 87 06 F1 | 	add	_var04, ##10200
24148     49 89 02 F6 | 	mov	_var05, arg01
2414c     E0 88 86 F1 | 	sub	_var05, #224
24150     43 8B C2 FA | 	rdbyte	_var06, _var04
24154     44 8B 4A F0 | 	shr	_var06, _var05 wz
24158     01 7A 66 56 |  if_ne	neg	result1, #1
2415c     50 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
24160                 | LR__3030
24160                 | '   else
24160                 | '     '' Do this in inline ASM to ensure atomicity
24160                 | '     tmp := @hkbd_report
24160     3B 8B 02 F6 | 	mov	_var06, ptr__usbnew_spin2_dat__
24164     13 00 00 FF 
24168     D8 8B 06 F1 | 	add	_var06, ##10200
2416c                 | '     org
2416c     D7 1E 48 FB | 	callpa	#(@LR__3032-@LR__3031)>>2,fcache_load_ptr_
24170                 | LR__3031
24170 000             | 	org	0
24170 000 28 02 64 FD | 	setq	#1
24174 001 45 81 02 FB | 	rdlong	_var01, _var06
24178 002 40 8D F2 F8 | 	getbyte	_var07, _var01, #2
2417c 003 49 8D 0A F2 | 	cmp	_var07, arg01 wz
24180 004 40 8D FA F8 | 	getbyte	_var07, _var01, #3
24184 005 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
24188 006 41 8D E2 F8 | 	getbyte	_var07, _var02, #0
2418c 007 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
24190 008 41 8D EA F8 | 	getbyte	_var07, _var02, #1
24194 009 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
24198 00a 41 8D F2 F8 | 	getbyte	_var07, _var02, #2
2419c 00b 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
241a0 00c 41 8D FA F8 | 	getbyte	_var07, _var02, #3
241a4 00d 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
241a8 00e 01 84 66 A6 |  if_e	neg	_var03, #1
241ac 00f             | 	fit	192
241ac 00f             | LR__3032
241ac                 | 	orgh
241ac     42 7B 02 F6 | 	mov	result1, _var03
241b0                 | _usbnew_spin2_keystate_ret
241b0     2D 00 64 FD | 	ret
241b4                 | 
241b4                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
241b4                 | ' 
241b4                 | ' '' Return key event from buffer if there is one
241b4                 | ' PUB get_key() : r | tail
241b4                 | _usbnew_spin2_get_key
241b4                 | '   tail := keyq_tail
241b4     0F 00 00 FF 
241b8     D5 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
241bc     3B 81 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
241c0                 | '   if keyq_head == tail
241c0     01 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
241c4     3B 83 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
241c8     0F 00 00 FF 
241cc     D4 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7892
241d0     40 83 0A F2 | 	cmp	_var02, _var01 wz
241d4                 | '     return 0 ' No event
241d4     00 7A 06 A6 |  if_e	mov	result1, #0
241d8     3C 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
241dc                 | '   r := keyq_data[tail]
241dc     40 83 02 F6 | 	mov	_var02, _var01
241e0     02 82 66 F0 | 	shl	_var02, #2
241e4     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
241e8     0F 00 00 FF 
241ec     D6 7A 06 F1 | 	add	result1, ##7894
241f0     3D 83 02 F1 | 	add	_var02, result1
241f4     41 7B 02 FB | 	rdlong	result1, _var02
241f8                 | '   if ++tail == KEYQUEUE_SIZE
241f8     01 80 06 F1 | 	add	_var01, #1
241fc     80 80 0E F2 | 	cmp	_var01, #128 wz
24200                 | '     tail := 0
24200     00 80 06 A6 |  if_e	mov	_var01, #0
24204                 | '   keyq_tail := tail
24204     0F 00 00 FF 
24208     D5 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
2420c     3B 81 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
24210     0F 00 00 FF 
24214     D5 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7893
24218                 | _usbnew_spin2_get_key_ret
24218     2D 00 64 FD | 	ret
2421c                 | 
2421c                 | ' 
2421c                 | ' '' Emulate mouse movement
2421c                 | ' PUB mouse_move(x,y)
2421c                 | _usbnew_spin2_mouse_move
2421c     02 CA 05 F6 | 	mov	COUNT_, #2
24220     E8 00 A0 FD | 	call	#pushregs_
24224     49 A7 02 F6 | 	mov	local01, arg01
24228     4A A9 02 F6 | 	mov	local02, arg02
2422c                 | '   mouse_lock := 1
2422c     14 00 00 FF 
24230     F1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
24234     3B 03 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
24238     14 00 00 FF 
2423c     F1 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
24240                 | '   waitus(2) ' hope driver is now done
24240     02 92 06 F6 | 	mov	arg01, #2
24244     D0 0A B0 FD | 	call	#__system___waitus
24248                 | '   mouse_xacc := x
24248     14 00 00 FF 
2424c     E1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
24250     3B A7 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
24254                 | '   mouse_yacc := y
24254     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
24258     3B A9 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
2425c                 | '   if mouse_outptr
2425c     05 00 00 FF 
24260     15 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2581
24264     3B 95 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
24268     0F 00 00 FF 
2426c     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
24270     24 00 90 AD |  if_e	jmp	#LR__3040
24274                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
24274     10 A8 66 F0 | 	shl	local02, #16
24278     53 A7 32 F9 | 	getword	local01, local01, #0
2427c     53 A9 42 F5 | 	or	local02, local01
24280     0F 00 00 FF 
24284     D0 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7888
24288     3B A7 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
2428c     0F 00 00 FF 
24290     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
24294     53 A9 62 FC | 	wrlong	local02, local01
24298                 | LR__3040
24298                 | '   mouse_lock := 0
24298     14 00 00 FF 
2429c     F1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
242a0     3B 01 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
242a4     14 00 00 FF 
242a8     F1 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
242ac     E7 F0 03 F6 | 	mov	ptra, fp
242b0     F2 00 A0 FD | 	call	#popregs_
242b4                 | _usbnew_spin2_mouse_move_ret
242b4     2D 00 64 FD | 	ret
242b8                 | 
242b8                 | ' 
242b8                 | ' '' Get state of an axis (normalized between -32768 and 32767)
242b8                 | ' PUB hidpad_axis(dev,axnum) : r
242b8                 | _usbnew_spin2_hidpad_axis
242b8                 | '   if axnum +>= 8
242b8     08 94 16 F2 | 	cmp	arg02, #8 wc
242bc                 | '     return 0
242bc     00 7A 06 36 |  if_ae	mov	result1, #0
242c0     2C 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
242c4                 | '   else 
242c4                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
242c4     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
242c8     13 00 00 FF 
242cc     F8 7B 06 F1 | 	add	result1, ##10232
242d0     05 92 66 F0 | 	shl	arg01, #5
242d4     49 7B 02 F1 | 	add	result1, arg01
242d8     04 92 06 F6 | 	mov	arg01, #4
242dc     4A 93 02 F1 | 	add	arg01, arg02
242e0     01 92 66 F0 | 	shl	arg01, #1
242e4     3D 93 02 F1 | 	add	arg01, result1
242e8     49 7B E2 FA | 	rdword	result1, arg01
242ec     0F 7A 66 F7 | 	signx	result1, #15
242f0                 | _usbnew_spin2_hidpad_axis_ret
242f0     2D 00 64 FD | 	ret
242f4                 | 
242f4                 | ' 
242f4                 | ' '' Get state of a hat
242f4                 | ' PUB hidpad_hat(dev,hatnum) : r
242f4                 | _usbnew_spin2_hidpad_hat
242f4                 | '   if hatnum +>= 4
242f4     04 94 16 F2 | 	cmp	arg02, #4 wc
242f8                 | '     return 0
242f8     00 7A 06 36 |  if_ae	mov	result1, #0
242fc     24 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
24300                 | '   else 
24300                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][7*4+hatnum]
24300     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
24304     13 00 00 FF 
24308     F8 7B 06 F1 | 	add	result1, ##10232
2430c     05 92 66 F0 | 	shl	arg01, #5
24310     49 7B 02 F1 | 	add	result1, arg01
24314     1C 92 06 F6 | 	mov	arg01, #28
24318     4A 93 02 F1 | 	add	arg01, arg02
2431c     3D 93 02 F1 | 	add	arg01, result1
24320     49 7B C2 FA | 	rdbyte	result1, arg01
24324                 | _usbnew_spin2_hidpad_hat_ret
24324     2D 00 64 FD | 	ret
24328                 | 
24328                 | ' 
24328                 | ' 
24328                 | ' 
24328                 | ' '--------------------------------------------------------------
24328                 | ' '---------- Init the variables, start the cog. ----------------
24328                 | ' '--------------------------------------------------------------
24328                 | ' 
24328                 | ' pub start(mbox,scope,cache) :cog,base | iii
24328                 | _Audio2_003_spin2_start
24328     04 CA 05 F6 | 	mov	COUNT_, #4
2432c     E8 00 A0 FD | 	call	#pushregs_
24330     49 A7 02 F6 | 	mov	local01, arg01
24334                 | ' 
24334                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
24334                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
24334                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
24334                 | ' 
24334                 | ' mailboxaddr:=mbox 
24334     32 A7 62 FC | 	wrlong	local01, objptr
24338                 | ' scope_ptr:=scope
24338     04 64 06 F1 | 	add	objptr, #4
2433c     32 95 62 FC | 	wrlong	arg02, objptr
24340                 | ' cache_ptr:=cache
24340     04 64 06 F1 | 	add	objptr, #4
24344     32 97 62 FC | 	wrlong	arg03, objptr
24348                 | ' base:=@channel0[0]
24348     04 64 06 F1 | 	add	objptr, #4
2434c     32 A9 02 F6 | 	mov	local02, objptr
24350                 | ' 
24350                 | ' repeat iii from 0 to 15
24350     00 AA 06 F6 | 	mov	local03, #0
24354     0C 64 86 F1 | 	sub	objptr, #12
24358     D7 BC 48 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
2435c                 | LR__3050
2435c                 | '   long[base+64*iii]:=0
2435c     54 A7 02 F6 | 	mov	local01, local02
24360     55 7D 02 F6 | 	mov	result2, local03
24364     06 7C 66 F0 | 	shl	result2, #6
24368     3E A7 02 F1 | 	add	local01, result2
2436c     53 01 68 FC | 	wrlong	#0, local01
24370                 | '   long[base+64*iii+4]:=0  		
24370     54 A7 02 F6 | 	mov	local01, local02
24374     55 7D 02 F6 | 	mov	result2, local03
24378     06 7C 66 F0 | 	shl	result2, #6
2437c     3E A7 02 F1 | 	add	local01, result2
24380     04 A6 06 F1 | 	add	local01, #4
24384     53 01 68 FC | 	wrlong	#0, local01
24388                 | '   long[base+64*iii+8]:=0
24388     54 AD 02 F6 | 	mov	local04, local02
2438c     55 A7 02 F6 | 	mov	local01, local03
24390     06 A6 66 F0 | 	shl	local01, #6
24394     53 AD 02 F1 | 	add	local04, local01
24398     08 AC 06 F1 | 	add	local04, #8
2439c     56 01 68 FC | 	wrlong	#0, local04
243a0                 | '   long[base+64*iii+12]:=0
243a0     54 AD 02 F6 | 	mov	local04, local02
243a4     55 A7 02 F6 | 	mov	local01, local03
243a8     06 A6 66 F0 | 	shl	local01, #6
243ac     53 AD 02 F1 | 	add	local04, local01
243b0     0C AC 06 F1 | 	add	local04, #12
243b4     56 01 68 FC | 	wrlong	#0, local04
243b8                 | '   long[base+64*iii+16]:=0
243b8     54 AD 02 F6 | 	mov	local04, local02
243bc     55 A7 02 F6 | 	mov	local01, local03
243c0     06 A6 66 F0 | 	shl	local01, #6
243c4     53 AD 02 F1 | 	add	local04, local01
243c8     10 AC 06 F1 | 	add	local04, #16
243cc     56 01 68 FC | 	wrlong	#0, local04
243d0                 | '   long[base+64*iii+20]:=0
243d0     54 AD 02 F6 | 	mov	local04, local02
243d4     55 A7 02 F6 | 	mov	local01, local03
243d8     06 A6 66 F0 | 	shl	local01, #6
243dc     53 AD 02 F1 | 	add	local04, local01
243e0     14 AC 06 F1 | 	add	local04, #20
243e4     56 01 68 FC | 	wrlong	#0, local04
243e8                 | '   long[base+64*iii+24]:=0
243e8     54 AD 02 F6 | 	mov	local04, local02
243ec     55 A7 02 F6 | 	mov	local01, local03
243f0     06 A6 66 F0 | 	shl	local01, #6
243f4     53 AD 02 F1 | 	add	local04, local01
243f8     18 AC 06 F1 | 	add	local04, #24
243fc     56 01 68 FC | 	wrlong	#0, local04
24400                 | '   long[base+64*iii+28]:=0
24400     54 AD 02 F6 | 	mov	local04, local02
24404     55 A7 02 F6 | 	mov	local01, local03
24408     06 A6 66 F0 | 	shl	local01, #6
2440c     53 AD 02 F1 | 	add	local04, local01
24410     1C AC 06 F1 | 	add	local04, #28
24414     56 01 68 FC | 	wrlong	#0, local04
24418                 | '   word[base+64*iii+32]:=8192
24418     54 AD 02 F6 | 	mov	local04, local02
2441c     55 A7 02 F6 | 	mov	local01, local03
24420     06 A6 66 F0 | 	shl	local01, #6
24424     53 AD 02 F1 | 	add	local04, local01
24428     20 AC 06 F1 | 	add	local04, #32
2442c     10 00 80 FF 
24430     56 01 58 FC | 	wrword	##8192, local04
24434                 | '   word[base+64*iii+34]:=8192
24434     54 AD 02 F6 | 	mov	local04, local02
24438     55 A7 02 F6 | 	mov	local01, local03
2443c     06 A6 66 F0 | 	shl	local01, #6
24440     53 AD 02 F1 | 	add	local04, local01
24444     22 AC 06 F1 | 	add	local04, #34
24448     10 00 80 FF 
2444c     56 01 58 FC | 	wrword	##8192, local04
24450                 | '   long[base+64*iii+36]:=0
24450     54 AD 02 F6 | 	mov	local04, local02
24454     55 A7 02 F6 | 	mov	local01, local03
24458     06 A6 66 F0 | 	shl	local01, #6
2445c     53 AD 02 F1 | 	add	local04, local01
24460     24 AC 06 F1 | 	add	local04, #36
24464     56 01 68 FC | 	wrlong	#0, local04
24468                 | '   long[base+64*iii+40]:=0
24468     54 AD 02 F6 | 	mov	local04, local02
2446c     55 A7 02 F6 | 	mov	local01, local03
24470     06 A6 66 F0 | 	shl	local01, #6
24474     53 AD 02 F1 | 	add	local04, local01
24478     28 AC 06 F1 | 	add	local04, #40
2447c     56 01 68 FC | 	wrlong	#0, local04
24480                 | '   long[base+64*iii+44]:=0
24480     54 AD 02 F6 | 	mov	local04, local02
24484     55 A7 02 F6 | 	mov	local01, local03
24488     06 A6 66 F0 | 	shl	local01, #6
2448c     53 AD 02 F1 | 	add	local04, local01
24490     2C AC 06 F1 | 	add	local04, #44
24494     56 01 68 FC | 	wrlong	#0, local04
24498                 | '   long[base+64*iii+48]:=0
24498     54 AD 02 F6 | 	mov	local04, local02
2449c     55 A7 02 F6 | 	mov	local01, local03
244a0     06 A6 66 F0 | 	shl	local01, #6
244a4     53 AD 02 F1 | 	add	local04, local01
244a8     30 AC 06 F1 | 	add	local04, #48
244ac     56 01 68 FC | 	wrlong	#0, local04
244b0                 | '   long[base+64*iii+52]:=0
244b0     54 AD 02 F6 | 	mov	local04, local02
244b4     55 A7 02 F6 | 	mov	local01, local03
244b8     06 A6 66 F0 | 	shl	local01, #6
244bc     53 AD 02 F1 | 	add	local04, local01
244c0     34 AC 06 F1 | 	add	local04, #52
244c4     56 01 68 FC | 	wrlong	#0, local04
244c8     01 AA 06 F1 | 	add	local03, #1
244cc     10 AA 56 F2 | 	cmps	local03, #16 wc
244d0     88 FE 9F CD |  if_b	jmp	#LR__3050
244d4                 | LR__3051
244d4                 | '   
244d4                 | ' cog:=coginit(16,@audio,@mailboxaddr)
244d4     33 95 02 F6 | 	mov	arg02, ptr__Audio2_003_spin2_dat__
244d8     32 97 02 F6 | 	mov	arg03, objptr
244dc     10 AC 06 F6 | 	mov	local04, #16
244e0     28 96 62 FD | 	setq	arg03
244e4     4A AD F2 FC | 	coginit	local04, arg02 wc
244e8     01 AC 66 C6 |  if_b	neg	local04, #1
244ec                 | ' waitms(10)
244ec     0A 92 06 F6 | 	mov	arg01, #10
244f0     B8 07 B0 FD | 	call	#__system___waitms
244f4                 | ' return cog,base
244f4     54 7D 02 F6 | 	mov	result2, local02
244f8     56 7B 02 F6 | 	mov	result1, local04
244fc     E7 F0 03 F6 | 	mov	ptra, fp
24500     F2 00 A0 FD | 	call	#popregs_
24504                 | _Audio2_003_spin2_start_ret
24504     2D 00 64 FD | 	ret
24508                 | 
24508                 | ' 
24508                 | ' 
24508                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
24508                 | _Audio2_003_spin2_play
24508     F8 02 00 FF 
2450c     BE 97 06 FD | 	qmul	arg03, ##389566
24510                 | ' 
24510                 | ' base2:=@channel0[0]+64*channel
24510     32 97 02 F6 | 	mov	arg03, objptr
24514     0C 96 06 F1 | 	add	arg03, #12
24518     06 92 66 F0 | 	shl	arg01, #6
2451c     49 97 02 F1 | 	add	arg03, arg01
24520                 | ' long[base2+20]:=sample+$C0000000 
24520     00 00 60 FF 
24524     00 94 06 F1 | 	add	arg02, ##-1073741824
24528     4B 93 02 F6 | 	mov	arg01, arg03
2452c     14 92 06 F1 | 	add	arg01, #20
24530     49 95 62 FC | 	wrlong	arg02, arg01
24534                 | ' long[base2+28]:= len
24534     4B 95 02 F6 | 	mov	arg02, arg03
24538     1C 94 06 F1 | 	add	arg02, #28
2453c     4A 9B 62 FC | 	wrlong	arg05, arg02
24540                 | ' if loop >=0 
24540     00 9C 56 F2 | 	cmps	arg06, #0 wc
24544                 | '   long[base2+24]:= loop
24544     4B 95 02 36 |  if_ae	mov	arg02, arg03
24548     18 94 06 31 |  if_ae	add	arg02, #24
2454c     4A 9D 62 3C |  if_ae	wrlong	arg06, arg02
24550                 | ' else
24550                 | '   long[base2+24]:= len
24550     4B 95 02 C6 |  if_b	mov	arg02, arg03
24554     18 94 06 C1 |  if_b	add	arg02, #24
24558     4A 9B 62 CC |  if_b	wrlong	arg05, arg02
2455c                 | ' word[base2+32]:=vol
2455c     4B 95 02 F6 | 	mov	arg02, arg03
24560     20 94 06 F1 | 	add	arg02, #32
24564     4A 99 52 FC | 	wrword	arg04, arg02
24568                 | ' long[base2+36]:= splfreq*389566
24568     24 96 06 F1 | 	add	arg03, #36
2456c     18 94 62 FD | 	getqx	arg02
24570     4B 95 62 FC | 	wrlong	arg02, arg03
24574                 | _Audio2_003_spin2_play_ret
24574     2D 00 64 FD | 	ret
24578                 | 
24578                 | ' 
24578                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
24578                 | _Audio2_003_spin2_play8
24578                 | ' 
24578                 | ' base2:=@channel1[0]+64*channel
24578     32 81 02 F6 | 	mov	_var01, objptr
2457c     4C 80 06 F1 | 	add	_var01, #76
24580     06 92 66 F0 | 	shl	arg01, #6
24584     49 81 02 F1 | 	add	_var01, arg01
24588                 | ' long[base2]:=0
24588     40 01 68 FC | 	wrlong	#0, _var01
2458c                 | ' long[base2+8]:=sample+$40000000 
2458c     00 00 20 FF 
24590     00 94 06 F1 | 	add	arg02, ##1073741824
24594     40 93 02 F6 | 	mov	arg01, _var01
24598     08 92 06 F1 | 	add	arg01, #8
2459c     49 95 62 FC | 	wrlong	arg02, arg01
245a0                 | ' if loop>=0
245a0     00 9C 56 F2 | 	cmps	arg06, #0 wc
245a4     1C 00 90 CD |  if_b	jmp	#LR__3060
245a8                 | '   long[base2+12]:=loop
245a8     40 95 02 F6 | 	mov	arg02, _var01
245ac     0C 94 06 F1 | 	add	arg02, #12
245b0     4A 9D 62 FC | 	wrlong	arg06, arg02
245b4                 | '   long[base2+16]:= len
245b4     40 9D 02 F6 | 	mov	arg06, _var01
245b8     10 9C 06 F1 | 	add	arg06, #16
245bc     4E 9B 62 FC | 	wrlong	arg05, arg06
245c0     1C 00 90 FD | 	jmp	#LR__3061
245c4                 | LR__3060
245c4                 | ' else
245c4                 | '   long[base2+12]:= len
245c4     40 9D 02 F6 | 	mov	arg06, _var01
245c8     0C 9C 06 F1 | 	add	arg06, #12
245cc     4E 9B 62 FC | 	wrlong	arg05, arg06
245d0                 | '   long[base2+16]:= len+1
245d0     01 9A 06 F1 | 	add	arg05, #1
245d4     40 93 02 F6 | 	mov	arg01, _var01
245d8     10 92 06 F1 | 	add	arg01, #16
245dc     49 9B 62 FC | 	wrlong	arg05, arg01
245e0                 | LR__3061
245e0     4B 97 52 F6 | 	abs	arg03, arg03 wc
245e4     0F 1B 80 FF 
245e8     4B 1F 1A FD | 	qdiv	##3546895, arg03
245ec                 | ' word[base2+20]:=vol
245ec     40 97 02 F6 | 	mov	arg03, _var01
245f0     14 96 06 F1 | 	add	arg03, #20
245f4     4B 99 52 FC | 	wrword	arg04, arg03
245f8                 | ' word[base2+24]:= 3546895 /splfreq 
245f8     40 93 02 F6 | 	mov	arg01, _var01
245fc     18 92 06 F1 | 	add	arg01, #24
24600                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
24600     1A 80 06 F1 | 	add	_var01, #26
24604     18 98 62 FD | 	getqx	arg04
24608     4C 99 82 F6 | 	negc	arg04, arg04
2460c     49 99 52 FC | 	wrword	arg04, arg01
24610     40 01 5A FC | 	wrword	#256, _var01
24614                 | _Audio2_003_spin2_play8_ret
24614     2D 00 64 FD | 	ret
24618                 | 
24618                 | ' 
24618                 | ' 
24618                 | ' pub play16(channel,sample,splfreq,vol,len,loop,delay) | base2
24618                 | _Audio2_003_spin2_play16
24618     F8 02 00 FF 
2461c     BE 97 06 FD | 	qmul	arg03, ##389566
24620                 | ' 
24620                 | ' base2:=@channel0[0]+64*channel
24620     32 97 02 F6 | 	mov	arg03, objptr
24624     0C 96 06 F1 | 	add	arg03, #12
24628     06 92 66 F0 | 	shl	arg01, #6
2462c     49 97 02 F1 | 	add	arg03, arg01
24630                 | ' long[base2+20]:=sample+$C0000000 
24630     00 00 60 FF 
24634     00 94 06 F1 | 	add	arg02, ##-1073741824
24638     4B 93 02 F6 | 	mov	arg01, arg03
2463c     14 92 06 F1 | 	add	arg01, #20
24640     49 95 62 FC | 	wrlong	arg02, arg01
24644                 | ' long[base2+28]:= len
24644     4B 95 02 F6 | 	mov	arg02, arg03
24648     1C 94 06 F1 | 	add	arg02, #28
2464c     4A 9B 62 FC | 	wrlong	arg05, arg02
24650                 | ' long[base2+24]:= loop
24650     4B 9B 02 F6 | 	mov	arg05, arg03
24654     18 9A 06 F1 | 	add	arg05, #24
24658     4D 9D 62 FC | 	wrlong	arg06, arg05
2465c                 | ' word[base2+32]:= vol
2465c     4B 9D 02 F6 | 	mov	arg06, arg03
24660     20 9C 06 F1 | 	add	arg06, #32
24664     4E 99 52 FC | 	wrword	arg04, arg06
24668                 | ' long[base2+36]:= splfreq*389566
24668     24 96 06 F1 | 	add	arg03, #36
2466c                 | ' waitms(delay)
2466c     4F 93 02 F6 | 	mov	arg01, arg07
24670     18 9E 62 FD | 	getqx	arg07
24674     4B 9F 62 FC | 	wrlong	arg07, arg03
24678     30 06 B0 FD | 	call	#__system___waitms
2467c                 | _Audio2_003_spin2_play16_ret
2467c     2D 00 64 FD | 	ret
24680                 | hubexit
24680     C1 00 80 FD | 	jmp	#cogexit
24684                 | 
24684                 | __system___setbaud
24684     14 0E 07 FB | 	rdlong	muldiva_, #20
24688     49 11 03 F6 | 	mov	muldivb_, arg01
2468c     FA 00 A0 FD | 	call	#divide_
24690     D7 06 48 FB | 	callpa	#(@LR__3071-@LR__3070)>>2,fcache_load_ptr_
24694                 | LR__3070
24694     3E 7A 9E FA | 	rdpin	result1, #62 wc
24698     3E 7D A2 F1 | 	subx	result2, result2
2469c     F4 FF 9F CD |  if_b	jmp	#LR__3070
246a0                 | LR__3071
246a0     40 7C 64 FD | 	dirl	#62
246a4     40 7E 64 FD | 	dirl	#63
246a8     34 11 63 FC | 	wrlong	muldivb_, ptr___system__dat__
246ac     10 10 67 F0 | 	shl	muldivb_, #16
246b0     07 94 06 F6 | 	mov	arg02, #7
246b4     88 95 02 F1 | 	add	arg02, muldivb_
246b8     3E F8 0C FC | 	wrpin	#124, #62
246bc     3E 94 16 FC | 	wxpin	arg02, #62
246c0     3F 7C 0C FC | 	wrpin	#62, #63
246c4     14 94 06 F1 | 	add	arg02, #20
246c8     3F 94 16 FC | 	wxpin	arg02, #63
246cc     41 7C 64 FD | 	dirh	#62
246d0     41 7E 64 FD | 	dirh	#63
246d4                 | __system___setbaud_ret
246d4     2D 00 64 FD | 	ret
246d8                 | 
246d8                 | __system___txraw
246d8     01 CA 05 F6 | 	mov	COUNT_, #1
246dc     E8 00 A0 FD | 	call	#pushregs_
246e0     49 A7 02 F6 | 	mov	local01, arg01
246e4     D7 06 48 FB | 	callpa	#(@LR__3081-@LR__3080)>>2,fcache_load_ptr_
246e8                 | LR__3080
246e8     3E 7A 9E FA | 	rdpin	result1, #62 wc
246ec     3E 7D A2 F1 | 	subx	result2, result2
246f0     F4 FF 9F CD |  if_b	jmp	#LR__3080
246f4                 | LR__3081
246f4     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
246f8     42 0F 00 AF 
246fc     80 92 06 A6 |  if_e	mov	arg01, ##2000000
24700     80 FF BF AD |  if_e	call	#__system___setbaud
24704     58 7C 64 FD | 	drvl	#62
24708     3E A6 26 FC | 	wypin	local01, #62
2470c     01 7A 06 F6 | 	mov	result1, #1
24710     E7 F0 03 F6 | 	mov	ptra, fp
24714     F2 00 A0 FD | 	call	#popregs_
24718                 | __system___txraw_ret
24718     2D 00 64 FD | 	ret
2471c                 | 
2471c                 | __system___rxraw
2471c     0D CA 05 F6 | 	mov	COUNT_, #13
24720     E8 00 A0 FD | 	call	#pushregs_
24724     49 A7 02 F6 | 	mov	local01, arg01
24728     34 A9 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2472c     42 0F 00 AF 
24730     80 92 06 A6 |  if_e	mov	arg01, ##2000000
24734     4C FF BF AD |  if_e	call	#__system___setbaud
24738     00 A6 0E F2 | 	cmp	local01, #0 wz
2473c     20 00 90 AD |  if_e	jmp	#LR__3090
24740     14 AA 06 FB | 	rdlong	local03, #20
24744     0A AA 46 F0 | 	shr	local03, #10
24748     55 A7 02 FD | 	qmul	local01, local03
2474c     1A 7A 62 FD | 	getct	result1
24750     18 AC 62 FD | 	getqx	local04
24754     56 7B 02 F1 | 	add	result1, local04
24758     3D AF 02 F6 | 	mov	local05, result1
2475c     04 00 90 FD | 	jmp	#LR__3091
24760                 | LR__3090
24760     00 AE 06 F6 | 	mov	local05, #0
24764                 | LR__3091
24764     01 B0 66 F6 | 	neg	local06, #1
24768     3F B2 06 F6 | 	mov	local07, #63
2476c     00 B4 06 F6 | 	mov	local08, #0
24770     04 68 06 F1 | 	add	ptr___system__dat__, #4
24774     34 B7 02 FB | 	rdlong	local09, ptr___system__dat__
24778     04 68 86 F1 | 	sub	ptr___system__dat__, #4
2477c                 | LR__3092
2477c     08 B6 16 F4 | 	testb	local09, #8 wc
24780     09 B6 76 F4 | 	testbn	local09, #9 andc
24784     0A B6 46 F0 | 	shr	local09, #10
24788     01 B4 06 C6 |  if_b	mov	local08, #1
2478c     40 7E 6C 3D |  if_ae	testp	#63 wz
24790     01 B4 06 26 |  if_nc_and_z	mov	local08, #1
24794     3F B6 8E 2A |  if_nc_and_z	rdpin	local09, #63
24798     04 B6 46 20 |  if_nc_and_z	shr	local09, #4
2479c                 | LR__3093
2479c     00 A8 06 F6 | 	mov	local02, #0
247a0     00 B4 0E F2 | 	cmp	local08, #0 wz
247a4     01 A8 66 56 |  if_ne	neg	local02, #1
247a8     00 B8 06 F6 | 	mov	local10, #0
247ac     00 AA 06 F6 | 	mov	local03, #0
247b0     00 A6 0E F2 | 	cmp	local01, #0 wz
247b4     01 AA 66 56 |  if_ne	neg	local03, #1
247b8     00 AC 06 F6 | 	mov	local04, #0
247bc     00 BA 06 F6 | 	mov	local11, #0
247c0     57 BD 02 F6 | 	mov	local12, local05
247c4     1A 7A 62 FD | 	getct	result1
247c8     3D BF 02 F6 | 	mov	local13, result1
247cc     5F BD 82 F1 | 	sub	local12, local13
247d0     00 BC 56 F2 | 	cmps	local12, #0 wc
247d4     00 BA 26 C6 |  if_b	not	local11, #0
247d8     00 BA 0E F2 | 	cmp	local11, #0 wz
247dc     00 AC 26 56 |  if_ne	not	local04, #0
247e0     56 AB CA F7 | 	test	local03, local04 wz
247e4     00 B8 26 56 |  if_ne	not	local10, #0
247e8     5C A9 4A F5 | 	or	local02, local10 wz
247ec     8C FF 9F AD |  if_e	jmp	#LR__3092
247f0     00 B4 0E F2 | 	cmp	local08, #0 wz
247f4     5B B1 02 56 |  if_ne	mov	local06, local09
247f8     58 B1 E2 58 |  if_ne	getbyte	local06, local06, #0
247fc     04 68 06 F1 | 	add	ptr___system__dat__, #4
24800     34 B7 62 FC | 	wrlong	local09, ptr___system__dat__
24804     04 68 86 F1 | 	sub	ptr___system__dat__, #4
24808     58 7B 02 F6 | 	mov	result1, local06
2480c     E7 F0 03 F6 | 	mov	ptra, fp
24810     F2 00 A0 FD | 	call	#popregs_
24814                 | __system___rxraw_ret
24814     2D 00 64 FD | 	ret
24818                 | 
24818                 | __system___getus
24818     1A 7C 72 FD | 	getct	result2 wc
2481c     1A 80 62 FD | 	getct	_var01
24820     10 68 06 F1 | 	add	ptr___system__dat__, #16
24824     34 83 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
24828     10 68 86 F1 | 	sub	ptr___system__dat__, #16
2482c     20 00 90 5D |  if_ne	jmp	#LR__3100
24830     14 82 06 FB | 	rdlong	_var02, #20
24834     A1 07 00 FF 
24838     40 82 16 FD | 	qdiv	_var02, ##1000000
2483c     10 68 06 F1 | 	add	ptr___system__dat__, #16
24840     18 7A 62 FD | 	getqx	result1
24844     3D 83 02 F6 | 	mov	_var02, result1
24848     34 7B 62 FC | 	wrlong	result1, ptr___system__dat__
2484c     10 68 86 F1 | 	sub	ptr___system__dat__, #16
24850                 | LR__3100
24850     41 7D 12 FD | 	qdiv	result2, _var02
24854     19 7C 62 FD | 	getqy	result2
24858     28 7C 62 FD | 	setq	result2
2485c     41 81 12 FD | 	qdiv	_var01, _var02
24860     18 7A 62 FD | 	getqx	result1
24864                 | __system___getus_ret
24864     2D 00 64 FD | 	ret
24868                 | 
24868                 | __system____builtin_memmove
24868     49 81 02 F6 | 	mov	_var01, arg01
2486c     4A 93 52 F2 | 	cmps	arg01, arg02 wc
24870     10 00 90 CD |  if_b	jmp	#LR__3110
24874     4A 83 02 F6 | 	mov	_var02, arg02
24878     4B 83 02 F1 | 	add	_var02, arg03
2487c     41 93 52 F2 | 	cmps	arg01, _var02 wc
24880     48 00 90 CD |  if_b	jmp	#LR__3116
24884                 | LR__3110
24884     4B 85 02 F6 | 	mov	_var03, arg03
24888     02 84 4E F0 | 	shr	_var03, #2 wz
2488c     18 00 90 AD |  if_e	jmp	#LR__3115
24890     D7 0A 48 FB | 	callpa	#(@LR__3113-@LR__3111)>>2,fcache_load_ptr_
24894                 | LR__3111
24894     42 09 D8 FC | 	rep	@LR__3114, _var03
24898                 | LR__3112
24898     4A 85 02 FB | 	rdlong	_var03, arg02
2489c     49 85 62 FC | 	wrlong	_var03, arg01
248a0     04 92 06 F1 | 	add	arg01, #4
248a4     04 94 06 F1 | 	add	arg02, #4
248a8                 | LR__3113
248a8                 | LR__3114
248a8                 | LR__3115
248a8     02 96 CE F7 | 	test	arg03, #2 wz
248ac     4A 83 E2 5A |  if_ne	rdword	_var02, arg02
248b0     49 83 52 5C |  if_ne	wrword	_var02, arg01
248b4     02 92 06 51 |  if_ne	add	arg01, #2
248b8     02 94 06 51 |  if_ne	add	arg02, #2
248bc     01 96 CE F7 | 	test	arg03, #1 wz
248c0     4A 83 C2 5A |  if_ne	rdbyte	_var02, arg02
248c4     49 83 42 5C |  if_ne	wrbyte	_var02, arg01
248c8     28 00 90 FD | 	jmp	#LR__3122
248cc                 | LR__3116
248cc     4B 93 02 F1 | 	add	arg01, arg03
248d0     4B 95 02 F1 | 	add	arg02, arg03
248d4     4B 87 0A F6 | 	mov	_var04, arg03 wz
248d8     18 00 90 AD |  if_e	jmp	#LR__3121
248dc     D7 0A 48 FB | 	callpa	#(@LR__3119-@LR__3117)>>2,fcache_load_ptr_
248e0                 | LR__3117
248e0     43 09 D8 FC | 	rep	@LR__3120, _var04
248e4                 | LR__3118
248e4     01 92 86 F1 | 	sub	arg01, #1
248e8     01 94 86 F1 | 	sub	arg02, #1
248ec     4A 83 C2 FA | 	rdbyte	_var02, arg02
248f0     49 83 42 FC | 	wrbyte	_var02, arg01
248f4                 | LR__3119
248f4                 | LR__3120
248f4                 | LR__3121
248f4                 | LR__3122
248f4     40 7B 02 F6 | 	mov	result1, _var01
248f8                 | __system____builtin_memmove_ret
248f8     2D 00 64 FD | 	ret
248fc                 | 
248fc                 | __system__longmove
248fc     49 81 02 F6 | 	mov	_var01, arg01
24900     4A 93 52 F2 | 	cmps	arg01, arg02 wc
24904     24 00 90 3D |  if_ae	jmp	#LR__3134
24908     4B 83 0A F6 | 	mov	_var02, arg03 wz
2490c     54 00 90 AD |  if_e	jmp	#LR__3140
24910     D7 0A 48 FB | 	callpa	#(@LR__3132-@LR__3130)>>2,fcache_load_ptr_
24914                 | LR__3130
24914     41 09 D8 FC | 	rep	@LR__3133, _var02
24918                 | LR__3131
24918     4A 83 02 FB | 	rdlong	_var02, arg02
2491c     49 83 62 FC | 	wrlong	_var02, arg01
24920     04 92 06 F1 | 	add	arg01, #4
24924     04 94 06 F1 | 	add	arg02, #4
24928                 | LR__3132
24928                 | LR__3133
24928     38 00 90 FD | 	jmp	#LR__3140
2492c                 | LR__3134
2492c     4B 83 02 F6 | 	mov	_var02, arg03
24930     02 82 66 F0 | 	shl	_var02, #2
24934     41 93 02 F1 | 	add	arg01, _var02
24938     4B 85 02 F6 | 	mov	_var03, arg03
2493c     02 84 66 F0 | 	shl	_var03, #2
24940     42 95 02 F1 | 	add	arg02, _var03
24944     4B 87 0A F6 | 	mov	_var04, arg03 wz
24948     18 00 90 AD |  if_e	jmp	#LR__3139
2494c     D7 0A 48 FB | 	callpa	#(@LR__3137-@LR__3135)>>2,fcache_load_ptr_
24950                 | LR__3135
24950     43 09 D8 FC | 	rep	@LR__3138, _var04
24954                 | LR__3136
24954     04 92 86 F1 | 	sub	arg01, #4
24958     04 94 86 F1 | 	sub	arg02, #4
2495c     4A 87 02 FB | 	rdlong	_var04, arg02
24960     49 87 62 FC | 	wrlong	_var04, arg01
24964                 | LR__3137
24964                 | LR__3138
24964                 | LR__3139
24964                 | LR__3140
24964     40 7B 02 F6 | 	mov	result1, _var01
24968                 | __system__longmove_ret
24968     2D 00 64 FD | 	ret
2496c                 | 
2496c                 | __system____builtin_strcpy
2496c     49 81 02 F6 | 	mov	_var01, arg01
24970     D7 0A 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
24974                 | LR__3150
24974     4A 7B CA FA | 	rdbyte	result1, arg02 wz
24978     49 7B 42 FC | 	wrbyte	result1, arg01
2497c     01 94 06 F1 | 	add	arg02, #1
24980     01 92 06 F1 | 	add	arg01, #1
24984     EC FF 9F 5D |  if_ne	jmp	#LR__3150
24988                 | LR__3151
24988     40 7B 02 F6 | 	mov	result1, _var01
2498c                 | __system____builtin_strcpy_ret
2498c     2D 00 64 FD | 	ret
24990                 | 
24990                 | __system____topofstack
24990     00 CA 05 F6 | 	mov	COUNT_, #0
24994     E8 00 A0 FD | 	call	#pushregs_
24998     08 F0 07 F1 | 	add	ptra, #8
2499c     04 CE 05 F1 | 	add	fp, #4
249a0     E7 92 62 FC | 	wrlong	arg01, fp
249a4     E7 7A 02 F6 | 	mov	result1, fp
249a8     04 CE 85 F1 | 	sub	fp, #4
249ac     E7 F0 03 F6 | 	mov	ptra, fp
249b0     F2 00 A0 FD | 	call	#popregs_
249b4                 | __system____topofstack_ret
249b4     2D 00 64 FD | 	ret
249b8                 | 
249b8                 | __system___lockmem
249b8     00 7A 06 F6 | 	mov	result1, #0
249bc     01 7A 62 FD | 	cogid	result1
249c0     00 7B 06 F1 | 	add	result1, #256
249c4                 | LR__3160
249c4     49 81 0A FB | 	rdlong	_var01, arg01 wz
249c8     49 7B 62 AC |  if_e	wrlong	result1, arg01
249cc     49 81 02 AB |  if_e	rdlong	_var01, arg01
249d0     49 81 02 AB |  if_e	rdlong	_var01, arg01
249d4     3D 81 0A F2 | 	cmp	_var01, result1 wz
249d8     E8 FF 9F 5D |  if_ne	jmp	#LR__3160
249dc                 | __system___lockmem_ret
249dc     2D 00 64 FD | 	ret
249e0                 | 
249e0                 | __system___string_cmp
249e0     D7 14 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
249e4                 | LR__3170
249e4     49 81 C2 FA | 	rdbyte	_var01, arg01
249e8     4A 83 C2 FA | 	rdbyte	_var02, arg02
249ec     40 85 02 F6 | 	mov	_var03, _var01
249f0     41 85 8A F1 | 	sub	_var03, _var02 wz
249f4     01 92 06 F1 | 	add	arg01, #1
249f8     01 94 06 F1 | 	add	arg02, #1
249fc     0C 00 90 5D |  if_ne	jmp	#LR__3172
24a00     00 80 0E F2 | 	cmp	_var01, #0 wz
24a04     00 82 0E 52 |  if_ne	cmp	_var02, #0 wz
24a08     D8 FF 9F 5D |  if_ne	jmp	#LR__3170
24a0c                 | LR__3171
24a0c                 | LR__3172
24a0c     42 7B 02 F6 | 	mov	result1, _var03
24a10                 | __system___string_cmp_ret
24a10     2D 00 64 FD | 	ret
24a14                 | 
24a14                 | __system___string_concat
24a14     05 CA 05 F6 | 	mov	COUNT_, #5
24a18     E8 00 A0 FD | 	call	#pushregs_
24a1c     49 A7 02 F6 | 	mov	local01, arg01
24a20     4A A9 02 F6 | 	mov	local02, arg02
24a24     53 93 02 F6 | 	mov	arg01, local01
24a28     49 AB 02 F6 | 	mov	local03, arg01
24a2c     D7 06 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
24a30                 | LR__3180
24a30     55 7B CA FA | 	rdbyte	result1, local03 wz
24a34     01 AA 06 51 |  if_ne	add	local03, #1
24a38     F4 FF 9F 5D |  if_ne	jmp	#LR__3180
24a3c                 | LR__3181
24a3c     49 AB 82 F1 | 	sub	local03, arg01
24a40     55 AD 02 F6 | 	mov	local04, local03
24a44     54 93 02 F6 | 	mov	arg01, local02
24a48     49 AB 02 F6 | 	mov	local03, arg01
24a4c     D7 06 48 FB | 	callpa	#(@LR__3183-@LR__3182)>>2,fcache_load_ptr_
24a50                 | LR__3182
24a50     55 7B CA FA | 	rdbyte	result1, local03 wz
24a54     01 AA 06 51 |  if_ne	add	local03, #1
24a58     F4 FF 9F 5D |  if_ne	jmp	#LR__3182
24a5c                 | LR__3183
24a5c     49 AB 82 F1 | 	sub	local03, arg01
24a60     56 93 02 F6 | 	mov	arg01, local04
24a64     55 93 02 F1 | 	add	arg01, local03
24a68     01 92 06 F1 | 	add	arg01, #1
24a6c     50 39 B0 FD | 	call	#__system___gc_alloc_managed
24a70     3D AF 0A F6 | 	mov	local05, result1 wz
24a74     28 00 90 AD |  if_e	jmp	#LR__3184
24a78     57 93 02 F6 | 	mov	arg01, local05
24a7c     53 95 02 F6 | 	mov	arg02, local01
24a80     56 97 02 F6 | 	mov	arg03, local04
24a84     E0 FD BF FD | 	call	#__system____builtin_memmove
24a88     57 93 02 F6 | 	mov	arg01, local05
24a8c     56 93 02 F1 | 	add	arg01, local04
24a90     01 AA 06 F1 | 	add	local03, #1
24a94     54 95 02 F6 | 	mov	arg02, local02
24a98     55 97 02 F6 | 	mov	arg03, local03
24a9c     C8 FD BF FD | 	call	#__system____builtin_memmove
24aa0                 | LR__3184
24aa0     57 7B 02 F6 | 	mov	result1, local05
24aa4     E7 F0 03 F6 | 	mov	ptra, fp
24aa8     F2 00 A0 FD | 	call	#popregs_
24aac                 | __system___string_concat_ret
24aac     2D 00 64 FD | 	ret
24ab0                 | 
24ab0                 | __system___tx
24ab0     02 CA 05 F6 | 	mov	COUNT_, #2
24ab4     E8 00 A0 FD | 	call	#pushregs_
24ab8     49 A7 02 F6 | 	mov	local01, arg01
24abc     0A A6 0E F2 | 	cmp	local01, #10 wz
24ac0     18 00 90 5D |  if_ne	jmp	#LR__3190
24ac4     08 68 06 F1 | 	add	ptr___system__dat__, #8
24ac8     34 A9 02 FB | 	rdlong	local02, ptr___system__dat__
24acc     08 68 86 F1 | 	sub	ptr___system__dat__, #8
24ad0     02 A8 CE F7 | 	test	local02, #2 wz
24ad4     0D 92 06 56 |  if_ne	mov	arg01, #13
24ad8     FC FB BF 5D |  if_ne	call	#__system___txraw
24adc                 | LR__3190
24adc     53 93 02 F6 | 	mov	arg01, local01
24ae0     F4 FB BF FD | 	call	#__system___txraw
24ae4     E7 F0 03 F6 | 	mov	ptra, fp
24ae8     F2 00 A0 FD | 	call	#popregs_
24aec                 | __system___tx_ret
24aec     2D 00 64 FD | 	ret
24af0                 | 
24af0                 | __system___rx
24af0     01 CA 05 F6 | 	mov	COUNT_, #1
24af4     E8 00 A0 FD | 	call	#pushregs_
24af8                 | LR__3200
24af8     00 92 06 F6 | 	mov	arg01, #0
24afc     1C FC BF FD | 	call	#__system___rxraw
24b00     3D A7 02 F6 | 	mov	local01, result1
24b04     FF FF 7F FF 
24b08     FF A7 0E F2 | 	cmp	local01, ##-1 wz
24b0c     E8 FF 9F AD |  if_e	jmp	#LR__3200
24b10     0D A6 0E F2 | 	cmp	local01, #13 wz
24b14     14 00 90 5D |  if_ne	jmp	#LR__3201
24b18     08 68 06 F1 | 	add	ptr___system__dat__, #8
24b1c     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
24b20     08 68 86 F1 | 	sub	ptr___system__dat__, #8
24b24     02 7A CE F7 | 	test	result1, #2 wz
24b28     0A A6 06 56 |  if_ne	mov	local01, #10
24b2c                 | LR__3201
24b2c     08 68 06 F1 | 	add	ptr___system__dat__, #8
24b30     34 93 02 FB | 	rdlong	arg01, ptr___system__dat__
24b34     08 68 86 F1 | 	sub	ptr___system__dat__, #8
24b38     01 92 CE F7 | 	test	arg01, #1 wz
24b3c     1C 00 90 AD |  if_e	jmp	#LR__3204
24b40     7F A6 0E F2 | 	cmp	local01, #127 wz
24b44     0C 00 90 5D |  if_ne	jmp	#LR__3202
24b48     08 92 06 F6 | 	mov	arg01, #8
24b4c     60 FF BF FD | 	call	#__system___tx
24b50     08 00 90 FD | 	jmp	#LR__3203
24b54                 | LR__3202
24b54     53 93 02 F6 | 	mov	arg01, local01
24b58     54 FF BF FD | 	call	#__system___tx
24b5c                 | LR__3203
24b5c                 | LR__3204
24b5c     53 7B 02 F6 | 	mov	result1, local01
24b60     E7 F0 03 F6 | 	mov	ptra, fp
24b64     F2 00 A0 FD | 	call	#popregs_
24b68                 | __system___rx_ret
24b68     2D 00 64 FD | 	ret
24b6c                 | 
24b6c                 | __system___pinwrite
24b6c     49 81 02 F6 | 	mov	_var01, arg01
24b70     1F 80 06 F5 | 	and	_var01, #31
24b74     20 92 CE F7 | 	test	arg01, #32 wz
24b78     06 92 46 F0 | 	shr	arg01, #6
24b7c     49 93 CA F9 | 	bmask	arg01, arg01
24b80     40 93 62 F0 | 	shl	arg01, _var01
24b84     40 95 62 F0 | 	shl	arg02, _var01
24b88     1C 00 90 AD |  if_e	jmp	#LR__3210
24b8c     49 F7 43 F5 | 	or	dirb, arg01
24b90     FD 81 02 F6 | 	mov	_var01, outb
24b94     49 81 22 F5 | 	andn	_var01, arg01
24b98     49 95 02 F5 | 	and	arg02, arg01
24b9c     4A 81 42 F5 | 	or	_var01, arg02
24ba0     40 FB 03 F6 | 	mov	outb, _var01
24ba4     18 00 90 FD | 	jmp	#LR__3211
24ba8                 | LR__3210
24ba8     49 F5 43 F5 | 	or	dira, arg01
24bac     FC 81 02 F6 | 	mov	_var01, outa
24bb0     49 81 22 F5 | 	andn	_var01, arg01
24bb4     49 95 02 F5 | 	and	arg02, arg01
24bb8     4A 81 42 F5 | 	or	_var01, arg02
24bbc     40 F9 03 F6 | 	mov	outa, _var01
24bc0                 | LR__3211
24bc0                 | __system___pinwrite_ret
24bc0     2D 00 64 FD | 	ret
24bc4                 | 
24bc4                 | __system___basic_read_line
24bc4     06 CA 05 F6 | 	mov	COUNT_, #6
24bc8     E8 00 A0 FD | 	call	#pushregs_
24bcc     49 A7 02 F6 | 	mov	local01, arg01
24bd0     00 A8 06 F6 | 	mov	local02, #0
24bd4     18 AA 06 F6 | 	mov	local03, #24
24bd8     00 AC 06 F6 | 	mov	local04, #0
24bdc     18 92 06 F6 | 	mov	arg01, #24
24be0     DC 37 B0 FD | 	call	#__system___gc_alloc_managed
24be4     3D AF 0A F6 | 	mov	local05, result1 wz
24be8     57 7B 02 A6 |  if_e	mov	result1, local05
24bec     B0 00 90 AD |  if_e	jmp	#LR__3223
24bf0                 | LR__3220
24bf0     53 93 02 F6 | 	mov	arg01, local01
24bf4     78 0B B0 FD | 	call	#__system___basic_get_char
24bf8     3D B1 02 F6 | 	mov	local06, result1
24bfc     01 B0 56 F2 | 	cmps	local06, #1 wc
24c00     8C 00 90 CD |  if_b	jmp	#LR__3222
24c04     0A B0 0E F2 | 	cmp	local06, #10 wz
24c08     10 00 90 5D |  if_ne	jmp	#LR__3221
24c0c     00 AC 0E F2 | 	cmp	local04, #0 wz
24c10     01 A8 56 52 |  if_ne	cmps	local02, #1 wc
24c14     01 A8 86 11 |  if_a	sub	local02, #1
24c18     74 00 90 FD | 	jmp	#LR__3222
24c1c                 | LR__3221
24c1c     0D B0 0E F2 | 	cmp	local06, #13 wz
24c20     01 AC 06 A6 |  if_e	mov	local04, #1
24c24     00 AC 06 56 |  if_ne	mov	local04, #0
24c28     08 B0 0E F2 | 	cmp	local06, #8 wz
24c2c     7F B0 0E 52 |  if_ne	cmp	local06, #127 wz
24c30     01 A8 56 A2 |  if_e	cmps	local02, #1 wc
24c34     01 A8 86 21 |  if_nc_and_z	sub	local02, #1
24c38     B4 FF 9F AD |  if_e	jmp	#LR__3220
24c3c     57 97 02 F6 | 	mov	arg03, local05
24c40     54 97 02 F1 | 	add	arg03, local02
24c44     4B B1 42 FC | 	wrbyte	local06, arg03
24c48     01 A8 06 F1 | 	add	local02, #1
24c4c     55 A9 0A F2 | 	cmp	local02, local03 wz
24c50     9C FF 9F 5D |  if_ne	jmp	#LR__3220
24c54     55 93 02 F6 | 	mov	arg01, local03
24c58     20 92 06 F1 | 	add	arg01, #32
24c5c     60 37 B0 FD | 	call	#__system___gc_alloc_managed
24c60     3D B1 0A F6 | 	mov	local06, result1 wz
24c64     58 7B 02 A6 |  if_e	mov	result1, local06
24c68     34 00 90 AD |  if_e	jmp	#LR__3223
24c6c     58 93 02 F6 | 	mov	arg01, local06
24c70     57 95 02 F6 | 	mov	arg02, local05
24c74     55 97 02 F6 | 	mov	arg03, local03
24c78     EC FB BF FD | 	call	#__system____builtin_memmove
24c7c     20 AA 06 F1 | 	add	local03, #32
24c80     57 93 02 F6 | 	mov	arg01, local05
24c84     6C 38 B0 FD | 	call	#__system___gc_free
24c88     58 AF 02 F6 | 	mov	local05, local06
24c8c     60 FF 9F FD | 	jmp	#LR__3220
24c90                 | LR__3222
24c90     57 B1 02 F6 | 	mov	local06, local05
24c94     54 B1 02 F1 | 	add	local06, local02
24c98     58 01 48 FC | 	wrbyte	#0, local06
24c9c     57 7B 02 F6 | 	mov	result1, local05
24ca0                 | LR__3223
24ca0     E7 F0 03 F6 | 	mov	ptra, fp
24ca4     F2 00 A0 FD | 	call	#popregs_
24ca8                 | __system___basic_read_line_ret
24ca8     2D 00 64 FD | 	ret
24cac                 | 
24cac                 | __system___waitms
24cac     49 81 02 F6 | 	mov	_var01, arg01
24cb0     1A 82 62 FD | 	getct	_var02
24cb4     14 84 06 FB | 	rdlong	_var03, #20
24cb8     D7 14 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
24cbc                 | LR__3230
24cbc     01 00 00 FF 
24cc0     E8 81 56 F2 | 	cmps	_var01, ##1000 wc
24cc4     1C 00 90 CD |  if_b	jmp	#LR__3232
24cc8     42 83 02 F1 | 	add	_var02, _var03
24ccc     41 93 02 F6 | 	mov	arg01, _var02
24cd0     00 92 66 FA | 	addct1	arg01, #0
24cd4     24 22 60 FD | 	waitct1
24cd8     01 00 00 FF 
24cdc     E8 81 86 F1 | 	sub	_var01, ##1000
24ce0     D8 FF 9F FD | 	jmp	#LR__3230
24ce4                 | LR__3231
24ce4                 | LR__3232
24ce4     01 80 56 F2 | 	cmps	_var01, #1 wc
24ce8     28 00 90 CD |  if_b	jmp	#LR__3233
24cec     42 81 02 FD | 	qmul	_var01, _var03
24cf0     01 00 00 FF 
24cf4     E8 97 06 F6 | 	mov	arg03, ##1000
24cf8     19 7A 62 FD | 	getqy	result1
24cfc     18 92 62 FD | 	getqx	arg01
24d00     28 7A 62 FD | 	setq	result1
24d04     4B 93 12 FD | 	qdiv	arg01, arg03
24d08     18 92 62 FD | 	getqx	arg01
24d0c     41 93 62 FA | 	addct1	arg01, _var02
24d10     24 22 60 FD | 	waitct1
24d14                 | LR__3233
24d14                 | __system___waitms_ret
24d14     2D 00 64 FD | 	ret
24d18                 | 
24d18                 | __system___waitus
24d18     49 81 02 F6 | 	mov	_var01, arg01
24d1c     1A 82 62 FD | 	getct	_var02
24d20     14 84 06 FB | 	rdlong	_var03, #20
24d24     D7 14 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
24d28                 | LR__3240
24d28     A1 07 00 FF 
24d2c     40 80 56 F2 | 	cmps	_var01, ##1000000 wc
24d30     1C 00 90 CD |  if_b	jmp	#LR__3242
24d34     42 83 02 F1 | 	add	_var02, _var03
24d38     41 93 02 F6 | 	mov	arg01, _var02
24d3c     00 92 66 FA | 	addct1	arg01, #0
24d40     24 22 60 FD | 	waitct1
24d44     A1 07 00 FF 
24d48     40 80 86 F1 | 	sub	_var01, ##1000000
24d4c     D8 FF 9F FD | 	jmp	#LR__3240
24d50                 | LR__3241
24d50                 | LR__3242
24d50     01 80 56 F2 | 	cmps	_var01, #1 wc
24d54     28 00 90 CD |  if_b	jmp	#LR__3243
24d58     42 81 02 FD | 	qmul	_var01, _var03
24d5c     A1 07 00 FF 
24d60     40 96 06 F6 | 	mov	arg03, ##1000000
24d64     19 7A 62 FD | 	getqy	result1
24d68     18 92 62 FD | 	getqx	arg01
24d6c     28 7A 62 FD | 	setq	result1
24d70     4B 93 12 FD | 	qdiv	arg01, arg03
24d74     18 7A 62 FD | 	getqx	result1
24d78     3D 83 62 FA | 	addct1	_var02, result1
24d7c     24 22 60 FD | 	waitct1
24d80                 | LR__3243
24d80                 | __system___waitus_ret
24d80     2D 00 64 FD | 	ret
24d84                 | 
24d84                 | __system___mount
24d84     09 CA 05 F6 | 	mov	COUNT_, #9
24d88     E8 00 A0 FD | 	call	#pushregs_
24d8c     49 A7 02 F6 | 	mov	local01, arg01
24d90     4A A9 0A F6 | 	mov	local02, arg02 wz
24d94     01 AA 66 F6 | 	neg	local03, #1
24d98     01 7A 66 A6 |  if_e	neg	result1, #1
24d9c     9C 02 90 AD |  if_e	jmp	#LR__3265
24da0     53 7B C2 FA | 	rdbyte	result1, local01
24da4     2F 7A 0E F2 | 	cmp	result1, #47 wz
24da8     28 00 90 5D |  if_ne	jmp	#LR__3252
24dac     53 93 02 F6 | 	mov	arg01, local01
24db0     49 AD 02 F6 | 	mov	local04, arg01
24db4     D7 06 48 FB | 	callpa	#(@LR__3251-@LR__3250)>>2,fcache_load_ptr_
24db8                 | LR__3250
24db8     56 7B CA FA | 	rdbyte	result1, local04 wz
24dbc     01 AC 06 51 |  if_ne	add	local04, #1
24dc0     F4 FF 9F 5D |  if_ne	jmp	#LR__3250
24dc4                 | LR__3251
24dc4     49 AD 82 F1 | 	sub	local04, arg01
24dc8     56 7B 02 F6 | 	mov	result1, local04
24dcc     10 7A 56 F2 | 	cmps	result1, #16 wc
24dd0     14 00 90 CD |  if_b	jmp	#LR__3253
24dd4                 | LR__3252
24dd4     20 68 06 F1 | 	add	ptr___system__dat__, #32
24dd8     34 15 68 FC | 	wrlong	#10, ptr___system__dat__
24ddc     20 68 86 F1 | 	sub	ptr___system__dat__, #32
24de0     01 7A 66 F6 | 	neg	result1, #1
24de4     54 02 90 FD | 	jmp	#LR__3265
24de8                 | LR__3253
24de8     00 AE 06 F6 | 	mov	local05, #0
24dec                 | LR__3254
24dec     04 AE 56 F2 | 	cmps	local05, #4 wc
24df0     B4 00 90 3D |  if_ae	jmp	#LR__3259
24df4     57 93 02 F6 | 	mov	arg01, local05
24df8     02 92 66 F0 | 	shl	arg01, #2
24dfc     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
24e00     64 7A 06 F1 | 	add	result1, #100
24e04     3D 93 02 F1 | 	add	arg01, result1
24e08     49 7B 0A FB | 	rdlong	result1, arg01 wz
24e0c     00 AA 56 A2 |  if_e	cmps	local03, #0 wc
24e10     57 AB 02 86 |  if_c_and_z	mov	local03, local05
24e14     88 00 90 8D |  if_c_and_z	jmp	#LR__3258
24e18     57 93 02 F6 | 	mov	arg01, local05
24e1c     02 92 66 F0 | 	shl	arg01, #2
24e20     34 AD 02 F6 | 	mov	local04, ptr___system__dat__
24e24     64 AC 06 F1 | 	add	local04, #100
24e28     56 93 02 F1 | 	add	arg01, local04
24e2c     49 93 02 FB | 	rdlong	arg01, arg01
24e30     49 AD 02 F6 | 	mov	local04, arg01
24e34     D7 06 48 FB | 	callpa	#(@LR__3256-@LR__3255)>>2,fcache_load_ptr_
24e38                 | LR__3255
24e38     56 7B CA FA | 	rdbyte	result1, local04 wz
24e3c     01 AC 06 51 |  if_ne	add	local04, #1
24e40     F4 FF 9F 5D |  if_ne	jmp	#LR__3255
24e44                 | LR__3256
24e44     49 AD 82 F1 | 	sub	local04, arg01
24e48     56 7B 02 F6 | 	mov	result1, local04
24e4c     3D B1 02 F6 | 	mov	local06, result1
24e50     58 93 02 F6 | 	mov	arg01, local06
24e54     53 93 02 F1 | 	add	arg01, local01
24e58     49 AD C2 FA | 	rdbyte	local04, arg01
24e5c     2F AC 0E F2 | 	cmp	local04, #47 wz
24e60     58 B3 02 56 |  if_ne	mov	local07, local06
24e64     53 B3 02 51 |  if_ne	add	local07, local01
24e68     59 93 CA 5A |  if_ne	rdbyte	arg01, local07 wz
24e6c     30 00 90 5D |  if_ne	jmp	#LR__3257
24e70     57 AD 02 F6 | 	mov	local04, local05
24e74     02 AC 66 F0 | 	shl	local04, #2
24e78     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
24e7c     64 96 06 F1 | 	add	arg03, #100
24e80     4B AD 02 F1 | 	add	local04, arg03
24e84     56 95 02 FB | 	rdlong	arg02, local04
24e88     53 93 02 F6 | 	mov	arg01, local01
24e8c     58 97 02 F6 | 	mov	arg03, local06
24e90     24 4A B0 FD | 	call	#__system__strncmp
24e94     00 7A 0E F2 | 	cmp	result1, #0 wz
24e98     57 AB 02 A6 |  if_e	mov	local03, local05
24e9c     08 00 90 AD |  if_e	jmp	#LR__3259
24ea0                 | LR__3257
24ea0                 | LR__3258
24ea0     01 AE 06 F1 | 	add	local05, #1
24ea4     44 FF 9F FD | 	jmp	#LR__3254
24ea8                 | LR__3259
24ea8     FF FF 7F FF 
24eac     FF AB 0E F2 | 	cmp	local03, ##-1 wz
24eb0     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
24eb4     34 17 68 AC |  if_e	wrlong	#11, ptr___system__dat__
24eb8     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
24ebc     01 7A 66 A6 |  if_e	neg	result1, #1
24ec0     78 01 90 AD |  if_e	jmp	#LR__3265
24ec4     55 AF 02 F6 | 	mov	local05, local03
24ec8     57 B3 02 F6 | 	mov	local07, local05
24ecc     02 B2 66 F0 | 	shl	local07, #2
24ed0     34 B1 02 F6 | 	mov	local06, ptr___system__dat__
24ed4     74 B0 06 F1 | 	add	local06, #116
24ed8     58 B3 02 F1 | 	add	local07, local06
24edc     59 B1 0A FB | 	rdlong	local06, local07 wz
24ee0     58 00 90 AD |  if_e	jmp	#LR__3260
24ee4     4C B0 06 F1 | 	add	local06, #76
24ee8     58 B3 0A FB | 	rdlong	local07, local06 wz
24eec     4C B0 86 F1 | 	sub	local06, #76
24ef0     48 00 90 AD |  if_e	jmp	#LR__3260
24ef4     4C B0 06 F1 | 	add	local06, #76
24ef8     58 B3 02 FB | 	rdlong	local07, local06
24efc     59 AD 02 F6 | 	mov	local04, local07
24f00     13 B2 46 F7 | 	zerox	local07, #19
24f04     14 AC 46 F0 | 	shr	local04, #20
24f08     02 AC 66 F0 | 	shl	local04, #2
24f0c     2D AD 02 F1 | 	add	local04, __methods__
24f10     56 AD 02 FB | 	rdlong	local04, local04
24f14     57 B1 02 F6 | 	mov	local06, local05
24f18     02 B0 66 F0 | 	shl	local06, #2
24f1c     34 AB 02 F6 | 	mov	local03, ptr___system__dat__
24f20     64 AA 06 F1 | 	add	local03, #100
24f24     55 B1 02 F1 | 	add	local06, local03
24f28     58 93 02 FB | 	rdlong	arg01, local06
24f2c     32 B1 02 F6 | 	mov	local06, objptr
24f30     59 65 02 F6 | 	mov	objptr, local07
24f34     2D AC 62 FD | 	call	local04
24f38     58 65 02 F6 | 	mov	objptr, local06
24f3c                 | LR__3260
24f3c     57 B1 02 F6 | 	mov	local06, local05
24f40     02 B0 66 F0 | 	shl	local06, #2
24f44     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
24f48     74 B2 06 F1 | 	add	local07, #116
24f4c     59 B1 02 F1 | 	add	local06, local07
24f50     58 A9 62 FC | 	wrlong	local02, local06
24f54     00 A8 0E F2 | 	cmp	local02, #0 wz
24f58     18 00 90 5D |  if_ne	jmp	#LR__3261
24f5c     02 AE 66 F0 | 	shl	local05, #2
24f60     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
24f64     64 B2 06 F1 | 	add	local07, #100
24f68     59 AF 02 F1 | 	add	local05, local07
24f6c     57 01 68 FC | 	wrlong	#0, local05
24f70     C4 00 90 FD | 	jmp	#LR__3264
24f74                 | LR__3261
24f74     57 B5 02 F6 | 	mov	local08, local05
24f78     04 B4 66 F0 | 	shl	local08, #4
24f7c     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
24f80     24 B2 06 F1 | 	add	local07, #36
24f84     59 B5 02 F1 | 	add	local08, local07
24f88     5A 93 02 F6 | 	mov	arg01, local08
24f8c     53 95 02 F6 | 	mov	arg02, local01
24f90     10 96 06 F6 | 	mov	arg03, #16
24f94     64 48 B0 FD | 	call	#__system__strncpy
24f98     48 A8 06 F1 | 	add	local02, #72
24f9c     54 B3 0A FB | 	rdlong	local07, local02 wz
24fa0     48 A8 86 F1 | 	sub	local02, #72
24fa4     7C 00 90 AD |  if_e	jmp	#LR__3263
24fa8     48 A8 06 F1 | 	add	local02, #72
24fac     54 B3 02 FB | 	rdlong	local07, local02
24fb0     59 B7 02 F6 | 	mov	local09, local07
24fb4     13 B2 46 F7 | 	zerox	local07, #19
24fb8     14 B6 46 F0 | 	shr	local09, #20
24fbc     02 B6 66 F0 | 	shl	local09, #2
24fc0     2D B7 02 F1 | 	add	local09, __methods__
24fc4     5B B7 02 FB | 	rdlong	local09, local09
24fc8     5A 93 02 F6 | 	mov	arg01, local08
24fcc     32 B1 02 F6 | 	mov	local06, objptr
24fd0     59 65 02 F6 | 	mov	objptr, local07
24fd4     2D B6 62 FD | 	call	local09
24fd8     58 65 02 F6 | 	mov	objptr, local06
24fdc     3D 93 0A F6 | 	mov	arg01, result1 wz
24fe0     40 00 90 AD |  if_e	jmp	#LR__3262
24fe4     57 B5 02 F6 | 	mov	local08, local05
24fe8     02 B4 66 F0 | 	shl	local08, #2
24fec     74 68 06 F1 | 	add	ptr___system__dat__, #116
24ff0     34 B5 02 F1 | 	add	local08, ptr___system__dat__
24ff4     5A 01 68 FC | 	wrlong	#0, local08
24ff8     02 AE 66 F0 | 	shl	local05, #2
24ffc     10 68 86 F1 | 	sub	ptr___system__dat__, #16
25000     34 AF 02 F1 | 	add	local05, ptr___system__dat__
25004     57 01 68 FC | 	wrlong	#0, local05
25008     49 93 6A F6 | 	neg	arg01, arg01 wz
2500c     44 68 86 F1 | 	sub	ptr___system__dat__, #68
25010     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
25014     20 68 86 F1 | 	sub	ptr___system__dat__, #32
25018     01 7A 66 56 |  if_ne	neg	result1, #1
2501c     00 7A 06 A6 |  if_e	mov	result1, #0
25020     18 00 90 FD | 	jmp	#LR__3265
25024                 | LR__3262
25024                 | LR__3263
25024     02 AE 66 F0 | 	shl	local05, #2
25028     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
2502c     64 B2 06 F1 | 	add	local07, #100
25030     59 AF 02 F1 | 	add	local05, local07
25034     57 B5 62 FC | 	wrlong	local08, local05
25038                 | LR__3264
25038     00 7A 06 F6 | 	mov	result1, #0
2503c                 | LR__3265
2503c     E7 F0 03 F6 | 	mov	ptra, fp
25040     F2 00 A0 FD | 	call	#popregs_
25044                 | __system___mount_ret
25044     2D 00 64 FD | 	ret
25048                 | 
25048                 | __system___chdir
25048     02 CA 05 F6 | 	mov	COUNT_, #2
2504c     E8 00 A0 FD | 	call	#pushregs_
25050     44 F0 07 F1 | 	add	ptra, #68
25054     49 A7 02 F6 | 	mov	local01, arg01
25058     E7 94 02 F6 | 	mov	arg02, fp
2505c     08 94 06 F1 | 	add	arg02, #8
25060     53 93 02 F6 | 	mov	arg01, local01
25064     D8 43 B0 FD | 	call	#__system__stat
25068     00 7A 0E F2 | 	cmp	result1, #0 wz
2506c     88 00 90 5D |  if_ne	jmp	#LR__3272
25070     10 CE 05 F1 | 	add	fp, #16
25074     E7 92 02 FB | 	rdlong	arg01, fp
25078     10 CE 85 F1 | 	sub	fp, #16
2507c     78 00 00 FF 
25080     00 92 06 F5 | 	and	arg01, ##61440
25084     08 00 00 FF 
25088     00 92 0E F2 | 	cmp	arg01, ##4096 wz
2508c     20 68 06 51 |  if_ne	add	ptr___system__dat__, #32
25090     34 1B 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
25094     20 68 86 51 |  if_ne	sub	ptr___system__dat__, #32
25098     01 7A 66 56 |  if_ne	neg	result1, #1
2509c     58 00 90 5D |  if_ne	jmp	#LR__3272
250a0     53 97 C2 FA | 	rdbyte	arg03, local01
250a4     2F 96 0E F2 | 	cmp	arg03, #47 wz
250a8     18 00 90 5D |  if_ne	jmp	#LR__3270
250ac     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
250b0     84 92 06 F1 | 	add	arg01, #132
250b4     53 95 02 F6 | 	mov	arg02, local01
250b8     00 97 06 F6 | 	mov	arg03, #256
250bc     3C 47 B0 FD | 	call	#__system__strncpy
250c0     30 00 90 FD | 	jmp	#LR__3271
250c4                 | LR__3270
250c4     34 A9 02 F6 | 	mov	local02, ptr___system__dat__
250c8     84 A9 06 F1 | 	add	local02, #388
250cc     34 95 02 F6 | 	mov	arg02, ptr___system__dat__
250d0     84 94 06 F1 | 	add	arg02, #132
250d4     54 93 02 F6 | 	mov	arg01, local02
250d8     00 97 06 F6 | 	mov	arg03, #256
250dc     1C 47 B0 FD | 	call	#__system__strncpy
250e0     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
250e4     84 96 06 F1 | 	add	arg03, #132
250e8     54 93 02 F6 | 	mov	arg01, local02
250ec     53 95 02 F6 | 	mov	arg02, local01
250f0     10 00 B0 FD | 	call	#__system____getvfsforfile
250f4                 | LR__3271
250f4     00 7A 06 F6 | 	mov	result1, #0
250f8                 | LR__3272
250f8     E7 F0 03 F6 | 	mov	ptra, fp
250fc     F2 00 A0 FD | 	call	#popregs_
25100                 | __system___chdir_ret
25100     2D 00 64 FD | 	ret
25104                 | 
25104                 | __system____getvfsforfile
25104     0E CA 05 F6 | 	mov	COUNT_, #14
25108     E8 00 A0 FD | 	call	#pushregs_
2510c     49 A7 02 F6 | 	mov	local01, arg01
25110     4A A9 02 F6 | 	mov	local02, arg02
25114     4B AB 02 F6 | 	mov	local03, arg03
25118     D7 10 48 FB | 	callpa	#(@LR__3281-@LR__3280)>>2,fcache_load_ptr_
2511c                 | LR__3280
2511c     54 7B C2 FA | 	rdbyte	result1, local02
25120     2F 7A 0E F2 | 	cmp	result1, #47 wz
25124     01 A8 06 A1 |  if_e	add	local02, #1
25128     54 AD C2 AA |  if_e	rdbyte	local04, local02
2512c     01 A8 86 A1 |  if_e	sub	local02, #1
25130     2F AC 0E A2 |  if_e	cmp	local04, #47 wz
25134     01 A8 06 A1 |  if_e	add	local02, #1
25138     E0 FF 9F AD |  if_e	jmp	#LR__3280
2513c                 | LR__3281
2513c     54 AD C2 FA | 	rdbyte	local04, local02
25140     2F AC 0E F2 | 	cmp	local04, #47 wz
25144     14 00 90 5D |  if_ne	jmp	#LR__3282
25148     53 93 02 F6 | 	mov	arg01, local01
2514c     54 95 02 F6 | 	mov	arg02, local02
25150     00 97 06 F6 | 	mov	arg03, #256
25154     A4 46 B0 FD | 	call	#__system__strncpy
25158     78 00 90 FD | 	jmp	#LR__3284
2515c                 | LR__3282
2515c     34 95 02 F6 | 	mov	arg02, ptr___system__dat__
25160     84 94 06 F1 | 	add	arg02, #132
25164     53 93 02 F6 | 	mov	arg01, local01
25168     00 97 06 F6 | 	mov	arg03, #256
2516c     8C 46 B0 FD | 	call	#__system__strncpy
25170     54 AD CA FA | 	rdbyte	local04, local02 wz
25174     5C 00 90 AD |  if_e	jmp	#LR__3283
25178     54 AD C2 FA | 	rdbyte	local04, local02
2517c     2E AC 0E F2 | 	cmp	local04, #46 wz
25180     01 A8 06 A1 |  if_e	add	local02, #1
25184     54 AF C2 AA |  if_e	rdbyte	local05, local02
25188     01 A8 86 A1 |  if_e	sub	local02, #1
2518c     57 B1 02 A6 |  if_e	mov	local06, local05
25190     07 B0 4E A7 |  if_e	zerox	local06, #7 wz
25194     3C 00 90 AD |  if_e	jmp	#LR__3283
25198     53 AF C2 FA | 	rdbyte	local05, local01
2519c     2F AE 0E F2 | 	cmp	local05, #47 wz
251a0     01 A6 06 A1 |  if_e	add	local01, #1
251a4     53 AD C2 AA |  if_e	rdbyte	local04, local01
251a8     01 A6 86 A1 |  if_e	sub	local01, #1
251ac     00 AC 4E A2 |  if_e	cmps	local04, #0 wz
251b0     92 01 00 5F 
251b4     90 94 06 56 |  if_ne	mov	arg02, ##@LR__5460
251b8     53 93 02 56 |  if_ne	mov	arg01, local01
251bc     00 97 06 56 |  if_ne	mov	arg03, #256
251c0     90 46 B0 5D |  if_ne	call	#__system__strncat
251c4     53 93 02 F6 | 	mov	arg01, local01
251c8     54 95 02 F6 | 	mov	arg02, local02
251cc     00 97 06 F6 | 	mov	arg03, #256
251d0     80 46 B0 FD | 	call	#__system__strncat
251d4                 | LR__3283
251d4                 | LR__3284
251d4     53 93 02 F6 | 	mov	arg01, local01
251d8     3C 48 B0 FD | 	call	#__system___normalizeName
251dc     53 AD CA FA | 	rdbyte	local04, local01 wz
251e0     1C 00 90 AD |  if_e	jmp	#LR__3285
251e4     53 AD C2 FA | 	rdbyte	local04, local01
251e8     2F AC 0E F2 | 	cmp	local04, #47 wz
251ec     01 A6 06 A1 |  if_e	add	local01, #1
251f0     53 B1 C2 AA |  if_e	rdbyte	local06, local01
251f4     01 A6 86 A1 |  if_e	sub	local01, #1
251f8     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
251fc     10 00 90 5D |  if_ne	jmp	#LR__3286
25200                 | LR__3285
25200     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
25204     01 00 00 FF 
25208     84 7A 06 F1 | 	add	result1, ##644
2520c     EC 01 90 FD | 	jmp	#LR__3300
25210                 | LR__3286
25210     00 B2 06 F6 | 	mov	local07, #0
25214                 | LR__3287
25214     04 B2 56 F2 | 	cmps	local07, #4 wc
25218     CC 01 90 3D |  if_ae	jmp	#LR__3299
2521c     59 B1 02 F6 | 	mov	local06, local07
25220     02 B0 66 F0 | 	shl	local06, #2
25224     34 AD 02 F6 | 	mov	local04, ptr___system__dat__
25228     64 AC 06 F1 | 	add	local04, #100
2522c     56 B1 02 F1 | 	add	local06, local04
25230     58 B1 0A FB | 	rdlong	local06, local06 wz
25234     A8 01 90 AD |  if_e	jmp	#LR__3298
25238     59 AD 02 F6 | 	mov	local04, local07
2523c     02 AC 66 F0 | 	shl	local04, #2
25240     34 B1 02 F6 | 	mov	local06, ptr___system__dat__
25244     64 B0 06 F1 | 	add	local06, #100
25248     58 AD 02 F1 | 	add	local04, local06
2524c     56 93 02 FB | 	rdlong	arg01, local04
25250     49 B5 02 F6 | 	mov	local08, arg01
25254     D7 06 48 FB | 	callpa	#(@LR__3289-@LR__3288)>>2,fcache_load_ptr_
25258                 | LR__3288
25258     5A 7B CA FA | 	rdbyte	result1, local08 wz
2525c     01 B4 06 51 |  if_ne	add	local08, #1
25260     F4 FF 9F 5D |  if_ne	jmp	#LR__3288
25264                 | LR__3289
25264     49 B5 82 F1 | 	sub	local08, arg01
25268     5A B7 02 F6 | 	mov	local09, local08
2526c     5B AD 02 F6 | 	mov	local04, local09
25270     53 AD 02 F1 | 	add	local04, local01
25274     56 B1 C2 FA | 	rdbyte	local06, local04
25278     2F B0 0E F2 | 	cmp	local06, #47 wz
2527c     5B B9 02 56 |  if_ne	mov	local10, local09
25280     53 B9 02 51 |  if_ne	add	local10, local01
25284     5C AF CA 5A |  if_ne	rdbyte	local05, local10 wz
25288     54 01 90 5D |  if_ne	jmp	#LR__3297
2528c     59 AD 02 F6 | 	mov	local04, local07
25290     02 AC 66 F0 | 	shl	local04, #2
25294     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
25298     64 96 06 F1 | 	add	arg03, #100
2529c     4B AD 02 F1 | 	add	local04, arg03
252a0     56 95 02 FB | 	rdlong	arg02, local04
252a4     5B 97 02 F6 | 	mov	arg03, local09
252a8     53 93 02 F6 | 	mov	arg01, local01
252ac     08 46 B0 FD | 	call	#__system__strncmp
252b0     00 7A 4E F2 | 	cmps	result1, #0 wz
252b4     28 01 90 5D |  if_ne	jmp	#LR__3297
252b8     59 BB 02 F6 | 	mov	local11, local07
252bc     02 BA 66 F0 | 	shl	local11, #2
252c0     34 AD 02 F6 | 	mov	local04, ptr___system__dat__
252c4     74 AC 06 F1 | 	add	local04, #116
252c8     56 BB 02 F1 | 	add	local11, local04
252cc     5D BD 02 FB | 	rdlong	local12, local11
252d0     D7 22 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
252d4                 | LR__3290
252d4     5B B1 02 F6 | 	mov	local06, local09
252d8     01 B0 06 F1 | 	add	local06, #1
252dc     53 B1 02 F1 | 	add	local06, local01
252e0     58 BB C2 FA | 	rdbyte	local11, local06
252e4     2E BA 0E F2 | 	cmp	local11, #46 wz
252e8     2C 00 90 5D |  if_ne	jmp	#LR__3292
252ec     5B BB 02 F6 | 	mov	local11, local09
252f0     02 BA 06 F1 | 	add	local11, #2
252f4     53 BB 02 F1 | 	add	local11, local01
252f8     5D B9 C2 FA | 	rdbyte	local10, local11
252fc     2F B8 0E F2 | 	cmp	local10, #47 wz
25300     5B BF 02 56 |  if_ne	mov	local13, local09
25304     02 BE 06 51 |  if_ne	add	local13, #2
25308     53 BF 02 51 |  if_ne	add	local13, local01
2530c     5F C1 CA 5A |  if_ne	rdbyte	local14, local13 wz
25310     01 B6 06 A1 |  if_e	add	local09, #1
25314     BC FF 9F AD |  if_e	jmp	#LR__3290
25318                 | LR__3291
25318                 | LR__3292
25318     00 AA 0E F2 | 	cmp	local03, #0 wz
2531c     55 93 02 56 |  if_ne	mov	arg01, local03
25320     53 95 02 56 |  if_ne	mov	arg02, local01
25324     00 97 06 56 |  if_ne	mov	arg03, #256
25328     D0 44 B0 5D |  if_ne	call	#__system__strncpy
2532c     53 95 02 F6 | 	mov	arg02, local01
25330     5B 95 02 F1 | 	add	arg02, local09
25334     01 94 06 F1 | 	add	arg02, #1
25338     53 93 02 F6 | 	mov	arg01, local01
2533c     2C F6 BF FD | 	call	#__system____builtin_strcpy
25340     53 93 02 F6 | 	mov	arg01, local01
25344     49 B5 02 F6 | 	mov	local08, arg01
25348     D7 06 48 FB | 	callpa	#(@LR__3294-@LR__3293)>>2,fcache_load_ptr_
2534c                 | LR__3293
2534c     5A 7B CA FA | 	rdbyte	result1, local08 wz
25350     01 B4 06 51 |  if_ne	add	local08, #1
25354     F4 FF 9F 5D |  if_ne	jmp	#LR__3293
25358                 | LR__3294
25358     49 B5 82 F1 | 	sub	local08, arg01
2535c     5A B7 02 F6 | 	mov	local09, local08
25360                 | LR__3295
25360     01 B6 56 F2 | 	cmps	local09, #1 wc
25364     70 00 90 CD |  if_b	jmp	#LR__3296
25368     5B AD 02 F6 | 	mov	local04, local09
2536c     53 AD 02 F1 | 	add	local04, local01
25370     56 BB C2 FA | 	rdbyte	local11, local04
25374     2F BA 0E F2 | 	cmp	local11, #47 wz
25378     5B BB 02 A6 |  if_e	mov	local11, local09
2537c     53 BB 02 A1 |  if_e	add	local11, local01
25380     5D 01 48 AC |  if_e	wrbyte	#0, local11
25384     01 B6 86 A1 |  if_e	sub	local09, #1
25388     D4 FF 9F AD |  if_e	jmp	#LR__3295
2538c     5B AD 02 F6 | 	mov	local04, local09
25390     53 AD 02 F1 | 	add	local04, local01
25394     56 BB C2 FA | 	rdbyte	local11, local04
25398     2E BA 0E F2 | 	cmp	local11, #46 wz
2539c     38 00 90 5D |  if_ne	jmp	#LR__3296
253a0     02 B6 56 F2 | 	cmps	local09, #2 wc
253a4     30 00 90 CD |  if_b	jmp	#LR__3296
253a8     5B C1 02 F6 | 	mov	local14, local09
253ac     01 C0 86 F1 | 	sub	local14, #1
253b0     53 C1 02 F1 | 	add	local14, local01
253b4     60 AF C2 FA | 	rdbyte	local05, local14
253b8     2F AE 0E F2 | 	cmp	local05, #47 wz
253bc     18 00 90 5D |  if_ne	jmp	#LR__3296
253c0     5B AD 02 F6 | 	mov	local04, local09
253c4     01 AC 86 F1 | 	sub	local04, #1
253c8     53 AD 02 F1 | 	add	local04, local01
253cc     56 01 48 FC | 	wrbyte	#0, local04
253d0     02 B6 86 F1 | 	sub	local09, #2
253d4     88 FF 9F FD | 	jmp	#LR__3295
253d8                 | LR__3296
253d8     5E 7B 02 F6 | 	mov	result1, local12
253dc     1C 00 90 FD | 	jmp	#LR__3300
253e0                 | LR__3297
253e0                 | LR__3298
253e0     01 B2 06 F1 | 	add	local07, #1
253e4     2C FE 9F FD | 	jmp	#LR__3287
253e8                 | LR__3299
253e8     02 00 00 FF 
253ec     28 69 06 F1 | 	add	ptr___system__dat__, ##1320
253f0     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
253f4     02 00 00 FF 
253f8     28 69 86 F1 | 	sub	ptr___system__dat__, ##1320
253fc                 | LR__3300
253fc     E7 F0 03 F6 | 	mov	ptra, fp
25400     F2 00 A0 FD | 	call	#popregs_
25404                 | __system____getvfsforfile_ret
25404     2D 00 64 FD | 	ret
25408                 | 
25408                 | __system___basic_open
25408     05 CA 05 F6 | 	mov	COUNT_, #5
2540c     E8 00 A0 FD | 	call	#pushregs_
25410     4A A7 02 F6 | 	mov	local01, arg02
25414     4B A9 02 F6 | 	mov	local02, arg03
25418     4C AB 02 F6 | 	mov	local03, arg04
2541c     00 AC 06 F6 | 	mov	local04, #0
25420     B4 43 B0 FD | 	call	#__system____getftab
25424     3D AF 0A F6 | 	mov	local05, result1 wz
25428     18 00 90 5D |  if_ne	jmp	#LR__3310
2542c     2E 93 02 F6 | 	mov	arg01, abortchain
25430     0C 94 06 F6 | 	mov	arg02, #12
25434     01 96 06 F6 | 	mov	arg03, #1
25438     1A 01 A0 FD | 	call	#__longjmp
2543c     01 7A 66 F6 | 	neg	result1, #1
25440     18 01 90 FD | 	jmp	#LR__3319
25444                 | LR__3310
25444     08 AE 06 F1 | 	add	local05, #8
25448     57 7B 0A FB | 	rdlong	result1, local05 wz
2544c     08 AE 86 F1 | 	sub	local05, #8
25450     57 93 02 56 |  if_ne	mov	arg01, local05
25454     D8 3A B0 5D |  if_ne	call	#__system___closeraw
25458     00 A6 0E F2 | 	cmp	local01, #0 wz
2545c     00 A8 0E A2 |  if_e	cmp	local02, #0 wz
25460     00 AA 0E A2 |  if_e	cmp	local03, #0 wz
25464     3C 00 90 AD |  if_e	jmp	#LR__3312
25468     0C 92 06 F6 | 	mov	arg01, #12
2546c     50 2F B0 FD | 	call	#__system___gc_alloc_managed
25470     3D AD 0A F6 | 	mov	local04, result1 wz
25474     18 00 90 5D |  if_ne	jmp	#LR__3311
25478     2E 93 02 F6 | 	mov	arg01, abortchain
2547c     07 94 06 F6 | 	mov	arg02, #7
25480     01 96 06 F6 | 	mov	arg03, #1
25484     1A 01 A0 FD | 	call	#__longjmp
25488     01 7A 66 F6 | 	neg	result1, #1
2548c     CC 00 90 FD | 	jmp	#LR__3319
25490                 | LR__3311
25490     56 01 68 FC | 	wrlong	#0, local04
25494     04 AC 06 F1 | 	add	local04, #4
25498     56 01 68 FC | 	wrlong	#0, local04
2549c     04 AC 86 F1 | 	sub	local04, #4
254a0     57 AD 62 FC | 	wrlong	local04, local05
254a4                 | LR__3312
254a4     00 A6 0E F2 | 	cmp	local01, #0 wz
254a8     20 00 90 AD |  if_e	jmp	#LR__3313
254ac     56 A7 62 FC | 	wrlong	local01, local04
254b0     56 7B 02 F6 | 	mov	result1, local04
254b4     00 70 05 FF 
254b8     00 7A 46 F5 | 	or	result1, ##182452224
254bc     1C AE 06 F1 | 	add	local05, #28
254c0     57 7B 62 FC | 	wrlong	result1, local05
254c4     1C AE 86 F1 | 	sub	local05, #28
254c8     0C 00 90 FD | 	jmp	#LR__3314
254cc                 | LR__3313
254cc     1C AE 06 F1 | 	add	local05, #28
254d0     57 01 68 FC | 	wrlong	#0, local05
254d4     1C AE 86 F1 | 	sub	local05, #28
254d8                 | LR__3314
254d8     00 A8 0E F2 | 	cmp	local02, #0 wz
254dc     28 00 90 AD |  if_e	jmp	#LR__3315
254e0     04 AC 06 F1 | 	add	local04, #4
254e4     56 A9 62 FC | 	wrlong	local02, local04
254e8     04 AC 86 F1 | 	sub	local04, #4
254ec     56 7B 02 F6 | 	mov	result1, local04
254f0     00 78 05 FF 
254f4     00 7A 46 F5 | 	or	result1, ##183500800
254f8     20 AE 06 F1 | 	add	local05, #32
254fc     57 7B 62 FC | 	wrlong	result1, local05
25500     20 AE 86 F1 | 	sub	local05, #32
25504     0C 00 90 FD | 	jmp	#LR__3316
25508                 | LR__3315
25508     20 AE 06 F1 | 	add	local05, #32
2550c     57 01 68 FC | 	wrlong	#0, local05
25510     20 AE 86 F1 | 	sub	local05, #32
25514                 | LR__3316
25514     00 AA 0E F2 | 	cmp	local03, #0 wz
25518     24 00 90 AD |  if_e	jmp	#LR__3317
2551c     08 AC 06 F1 | 	add	local04, #8
25520     56 AB 62 FC | 	wrlong	local03, local04
25524     08 AC 86 F1 | 	sub	local04, #8
25528     00 80 05 FF 
2552c     00 AC 46 F5 | 	or	local04, ##184549376
25530     24 AE 06 F1 | 	add	local05, #36
25534     57 AD 62 FC | 	wrlong	local04, local05
25538     24 AE 86 F1 | 	sub	local05, #36
2553c     0C 00 90 FD | 	jmp	#LR__3318
25540                 | LR__3317
25540     24 AE 06 F1 | 	add	local05, #36
25544     57 01 68 FC | 	wrlong	#0, local05
25548     24 AE 86 F1 | 	sub	local05, #36
2554c                 | LR__3318
2554c     08 AE 06 F1 | 	add	local05, #8
25550     40 00 80 FF 
25554     57 07 68 FC | 	wrlong	##32771, local05
25558     00 7A 06 F6 | 	mov	result1, #0
2555c                 | LR__3319
2555c     E7 F0 03 F6 | 	mov	ptra, fp
25560     F2 00 A0 FD | 	call	#popregs_
25564                 | __system___basic_open_ret
25564     2D 00 64 FD | 	ret
25568                 | 
25568                 | __system___basic_open_string
25568     04 CA 05 F6 | 	mov	COUNT_, #4
2556c     E8 00 A0 FD | 	call	#pushregs_
25570     4A A7 02 F6 | 	mov	local01, arg02
25574     4B A9 02 F6 | 	mov	local02, arg03
25578     5C 42 B0 FD | 	call	#__system____getftab
2557c     3D AB 0A F6 | 	mov	local03, result1 wz
25580     18 00 90 5D |  if_ne	jmp	#LR__3320
25584     2E 93 02 F6 | 	mov	arg01, abortchain
25588     0C 94 06 F6 | 	mov	arg02, #12
2558c     01 96 06 F6 | 	mov	arg03, #1
25590     1A 01 A0 FD | 	call	#__longjmp
25594     01 7A 66 F6 | 	neg	result1, #1
25598     58 00 90 FD | 	jmp	#LR__3322
2559c                 | LR__3320
2559c     08 AA 06 F1 | 	add	local03, #8
255a0     55 99 0A FB | 	rdlong	arg04, local03 wz
255a4     08 AA 86 F1 | 	sub	local03, #8
255a8     55 93 02 56 |  if_ne	mov	arg01, local03
255ac     80 39 B0 5D |  if_ne	call	#__system___closeraw
255b0     53 95 02 F6 | 	mov	arg02, local01
255b4     54 97 02 F6 | 	mov	arg03, local02
255b8     55 93 02 F6 | 	mov	arg01, local03
255bc     B6 99 06 F6 | 	mov	arg04, #438
255c0     1C 36 B0 FD | 	call	#__system___openraw
255c4     3D AD 02 F6 | 	mov	local04, result1
255c8     00 AC 56 F2 | 	cmps	local04, #0 wc
255cc     20 00 90 3D |  if_ae	jmp	#LR__3321
255d0     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
255d4     20 7A 06 F1 | 	add	result1, #32
255d8     2E 93 02 F6 | 	mov	arg01, abortchain
255dc     3D 95 02 FB | 	rdlong	arg02, result1
255e0     01 96 06 F6 | 	mov	arg03, #1
255e4     1A 01 A0 FD | 	call	#__longjmp
255e8     01 7A 66 F6 | 	neg	result1, #1
255ec     04 00 90 FD | 	jmp	#LR__3322
255f0                 | LR__3321
255f0     56 7B 02 F6 | 	mov	result1, local04
255f4                 | LR__3322
255f4     E7 F0 03 F6 | 	mov	ptra, fp
255f8     F2 00 A0 FD | 	call	#popregs_
255fc                 | __system___basic_open_string_ret
255fc     2D 00 64 FD | 	ret
25600                 | 
25600                 | __system___find_free_file
25600     34 81 02 F6 | 	mov	_var01, ptr___system__dat__
25604     02 00 00 FF 
25608     2C 81 06 F1 | 	add	_var01, ##1324
2560c     00 82 06 F6 | 	mov	_var02, #0
25610     D7 12 48 FB | 	callpa	#(@LR__3331-@LR__3330)>>2,fcache_load_ptr_
25614                 | LR__3330
25614     0A 82 56 F2 | 	cmps	_var02, #10 wc
25618     1C 00 90 3D |  if_ae	jmp	#LR__3332
2561c     34 82 06 FD | 	qmul	_var02, #52
25620     18 7A 62 FD | 	getqx	result1
25624     40 7B 02 F1 | 	add	result1, _var01
25628     08 7A 06 F1 | 	add	result1, #8
2562c     3D 7B 0A FB | 	rdlong	result1, result1 wz
25630     01 82 06 51 |  if_ne	add	_var02, #1
25634     DC FF 9F 5D |  if_ne	jmp	#LR__3330
25638                 | LR__3331
25638                 | LR__3332
25638     0A 82 0E F2 | 	cmp	_var02, #10 wz
2563c     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
25640     34 17 68 AC |  if_e	wrlong	#11, ptr___system__dat__
25644     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
25648     01 7A 66 A6 |  if_e	neg	result1, #1
2564c     41 7B 02 56 |  if_ne	mov	result1, _var02
25650                 | __system___find_free_file_ret
25650     2D 00 64 FD | 	ret
25654                 | 
25654                 | __system___basic_print_char
25654     03 CA 05 F6 | 	mov	COUNT_, #3
25658     E8 00 A0 FD | 	call	#pushregs_
2565c     4A A7 02 F6 | 	mov	local01, arg02
25660     20 49 B0 FD | 	call	#__system___gettxfunc
25664     3D A9 0A F6 | 	mov	local02, result1 wz
25668     00 7A 06 A6 |  if_e	mov	result1, #0
2566c     30 00 90 AD |  if_e	jmp	#LR__3340
25670     54 AB 02 F6 | 	mov	local03, local02
25674     13 A8 46 F7 | 	zerox	local02, #19
25678     14 AA 46 F0 | 	shr	local03, #20
2567c     02 AA 66 F0 | 	shl	local03, #2
25680     2D AB 02 F1 | 	add	local03, __methods__
25684     55 AB 02 FB | 	rdlong	local03, local03
25688     53 93 02 F6 | 	mov	arg01, local01
2568c     32 A7 02 F6 | 	mov	local01, objptr
25690     54 65 02 F6 | 	mov	objptr, local02
25694     2D AA 62 FD | 	call	local03
25698     53 65 02 F6 | 	mov	objptr, local01
2569c     01 7A 06 F6 | 	mov	result1, #1
256a0                 | LR__3340
256a0     E7 F0 03 F6 | 	mov	ptra, fp
256a4     F2 00 A0 FD | 	call	#popregs_
256a8                 | __system___basic_print_char_ret
256a8     2D 00 64 FD | 	ret
256ac                 | 
256ac                 | __system___basic_print_string
256ac     03 CA 05 F6 | 	mov	COUNT_, #3
256b0     E8 00 A0 FD | 	call	#pushregs_
256b4     4A A7 02 F6 | 	mov	local01, arg02
256b8     4B A9 02 F6 | 	mov	local02, arg03
256bc     C4 48 B0 FD | 	call	#__system___gettxfunc
256c0     3D AB 0A F6 | 	mov	local03, result1 wz
256c4     00 7A 06 A6 |  if_e	mov	result1, #0
256c8     18 00 90 AD |  if_e	jmp	#LR__3350
256cc     00 A6 0E F2 | 	cmp	local01, #0 wz
256d0     00 7A 06 A6 |  if_e	mov	result1, #0
256d4     55 93 02 56 |  if_ne	mov	arg01, local03
256d8     54 95 02 56 |  if_ne	mov	arg02, local02
256dc     53 97 02 56 |  if_ne	mov	arg03, local01
256e0     FC 01 B0 5D |  if_ne	call	#__system___fmtstr
256e4                 | LR__3350
256e4     E7 F0 03 F6 | 	mov	ptra, fp
256e8     F2 00 A0 FD | 	call	#popregs_
256ec                 | __system___basic_print_string_ret
256ec     2D 00 64 FD | 	ret
256f0                 | 
256f0                 | __system___basic_print_integer
256f0     04 CA 05 F6 | 	mov	COUNT_, #4
256f4     E8 00 A0 FD | 	call	#pushregs_
256f8     4A A7 02 F6 | 	mov	local01, arg02
256fc     4B A9 02 F6 | 	mov	local02, arg03
25700     4C AB 02 F6 | 	mov	local03, arg04
25704     7C 48 B0 FD | 	call	#__system___gettxfunc
25708     3D AD 0A F6 | 	mov	local04, result1 wz
2570c     00 7A 06 A6 |  if_e	mov	result1, #0
25710     56 93 02 56 |  if_ne	mov	arg01, local04
25714     54 95 02 56 |  if_ne	mov	arg02, local02
25718     53 97 02 56 |  if_ne	mov	arg03, local01
2571c     55 99 02 56 |  if_ne	mov	arg04, local03
25720     A8 02 B0 5D |  if_ne	call	#__system___fmtnum
25724     E7 F0 03 F6 | 	mov	ptra, fp
25728     F2 00 A0 FD | 	call	#popregs_
2572c                 | __system___basic_print_integer_ret
2572c     2D 00 64 FD | 	ret
25730                 | 
25730                 | __system___basic_print_unsigned
25730     03 CA 05 F6 | 	mov	COUNT_, #3
25734     E8 00 A0 FD | 	call	#pushregs_
25738     4A A7 02 F6 | 	mov	local01, arg02
2573c     4B A9 02 F6 | 	mov	local02, arg03
25740     4C AB 02 F6 | 	mov	local03, arg04
25744     3C 48 B0 FD | 	call	#__system___gettxfunc
25748     3D 93 0A F6 | 	mov	arg01, result1 wz
2574c     00 7A 06 A6 |  if_e	mov	result1, #0
25750     3A A8 26 54 |  if_ne	bith	local02, #58
25754     54 95 02 56 |  if_ne	mov	arg02, local02
25758     53 97 02 56 |  if_ne	mov	arg03, local01
2575c     55 99 02 56 |  if_ne	mov	arg04, local03
25760     68 02 B0 5D |  if_ne	call	#__system___fmtnum
25764     E7 F0 03 F6 | 	mov	ptra, fp
25768     F2 00 A0 FD | 	call	#popregs_
2576c                 | __system___basic_print_unsigned_ret
2576c     2D 00 64 FD | 	ret
25770                 | 
25770                 | __system___basic_get_char
25770     03 CA 05 F6 | 	mov	COUNT_, #3
25774     E8 00 A0 FD | 	call	#pushregs_
25778     4C 48 B0 FD | 	call	#__system___getrxfunc
2577c     3D A7 0A F6 | 	mov	local01, result1 wz
25780     01 7A 66 A6 |  if_e	neg	result1, #1
25784     28 00 90 AD |  if_e	jmp	#LR__3360
25788     53 A9 02 F6 | 	mov	local02, local01
2578c     13 A6 46 F7 | 	zerox	local01, #19
25790     14 A8 46 F0 | 	shr	local02, #20
25794     02 A8 66 F0 | 	shl	local02, #2
25798     2D A9 02 F1 | 	add	local02, __methods__
2579c     54 A9 02 FB | 	rdlong	local02, local02
257a0     32 AB 02 F6 | 	mov	local03, objptr
257a4     53 65 02 F6 | 	mov	objptr, local01
257a8     2D A8 62 FD | 	call	local02
257ac     55 65 02 F6 | 	mov	objptr, local03
257b0                 | LR__3360
257b0     E7 F0 03 F6 | 	mov	ptra, fp
257b4     F2 00 A0 FD | 	call	#popregs_
257b8                 | __system___basic_get_char_ret
257b8     2D 00 64 FD | 	ret
257bc                 | 
257bc                 | __system___basic_put
257bc     04 CA 05 F6 | 	mov	COUNT_, #4
257c0     E8 00 A0 FD | 	call	#pushregs_
257c4     4D A7 02 F6 | 	mov	local01, arg05
257c8     53 99 02 FD | 	qmul	arg04, local01
257cc     49 A9 02 F6 | 	mov	local02, arg01
257d0     4B AB 02 F6 | 	mov	local03, arg03
257d4     00 94 0E F2 | 	cmp	arg02, #0 wz
257d8     18 AC 62 FD | 	getqx	local04
257dc     18 00 90 AD |  if_e	jmp	#LR__3370
257e0     01 94 86 F1 | 	sub	arg02, #1
257e4     4A 97 02 F6 | 	mov	arg03, arg02
257e8     1F 96 C6 F0 | 	sar	arg03, #31
257ec     54 93 02 F6 | 	mov	arg01, local02
257f0     00 98 06 F6 | 	mov	arg04, #0
257f4     E4 3D B0 FD | 	call	#__system__lseek
257f8                 | LR__3370
257f8     55 95 02 F6 | 	mov	arg02, local03
257fc     56 97 02 F6 | 	mov	arg03, local04
25800     54 93 02 F6 | 	mov	arg01, local02
25804     FC 3C B0 FD | 	call	#__system__write
25808     3D AD 02 F6 | 	mov	local04, result1
2580c     01 AC 56 F2 | 	cmps	local04, #1 wc
25810     10 00 90 CD |  if_b	jmp	#LR__3371
25814     56 0F 03 F6 | 	mov	muldiva_, local04
25818     53 11 03 F6 | 	mov	muldivb_, local01
2581c     FA 00 A0 FD | 	call	#divide_
25820     88 AD 02 F6 | 	mov	local04, muldivb_
25824                 | LR__3371
25824     56 7B 02 F6 | 	mov	result1, local04
25828     E7 F0 03 F6 | 	mov	ptra, fp
2582c     F2 00 A0 FD | 	call	#popregs_
25830                 | __system___basic_put_ret
25830     2D 00 64 FD | 	ret
25834                 | 
25834                 | __system___basic_get
25834     04 CA 05 F6 | 	mov	COUNT_, #4
25838     E8 00 A0 FD | 	call	#pushregs_
2583c     4D A7 02 F6 | 	mov	local01, arg05
25840     53 99 02 FD | 	qmul	arg04, local01
25844     49 A9 02 F6 | 	mov	local02, arg01
25848     4B AB 02 F6 | 	mov	local03, arg03
2584c     00 94 0E F2 | 	cmp	arg02, #0 wz
25850     18 AC 62 FD | 	getqx	local04
25854     18 00 90 AD |  if_e	jmp	#LR__3380
25858     01 94 86 F1 | 	sub	arg02, #1
2585c     4A 97 02 F6 | 	mov	arg03, arg02
25860     1F 96 C6 F0 | 	sar	arg03, #31
25864     54 93 02 F6 | 	mov	arg01, local02
25868     00 98 06 F6 | 	mov	arg04, #0
2586c     6C 3D B0 FD | 	call	#__system__lseek
25870                 | LR__3380
25870     55 95 02 F6 | 	mov	arg02, local03
25874     56 97 02 F6 | 	mov	arg03, local04
25878     54 93 02 F6 | 	mov	arg01, local02
2587c     CC 3C B0 FD | 	call	#__system__read
25880     3D AD 02 F6 | 	mov	local04, result1
25884     01 AC 56 F2 | 	cmps	local04, #1 wc
25888     10 00 90 CD |  if_b	jmp	#LR__3381
2588c     56 0F 03 F6 | 	mov	muldiva_, local04
25890     53 11 03 F6 | 	mov	muldivb_, local01
25894     FA 00 A0 FD | 	call	#divide_
25898     88 AD 02 F6 | 	mov	local04, muldivb_
2589c                 | LR__3381
2589c     56 7B 02 F6 | 	mov	result1, local04
258a0     E7 F0 03 F6 | 	mov	ptra, fp
258a4     F2 00 A0 FD | 	call	#popregs_
258a8                 | __system___basic_get_ret
258a8     2D 00 64 FD | 	ret
258ac                 | 
258ac                 | __system___fmtchar
258ac     00 CA 05 F6 | 	mov	COUNT_, #0
258b0     E8 00 A0 FD | 	call	#pushregs_
258b4     10 F0 07 F1 | 	add	ptra, #16
258b8     0C CE 05 F1 | 	add	fp, #12
258bc     E7 96 62 FC | 	wrlong	arg03, fp
258c0     4B 97 E2 F8 | 	getbyte	arg03, arg03, #0
258c4     E7 96 62 FC | 	wrlong	arg03, fp
258c8     E7 96 02 F6 | 	mov	arg03, fp
258cc     0C CE 85 F1 | 	sub	fp, #12
258d0     0C 00 B0 FD | 	call	#__system___fmtstr
258d4     E7 F0 03 F6 | 	mov	ptra, fp
258d8     F2 00 A0 FD | 	call	#popregs_
258dc                 | __system___fmtchar_ret
258dc     2D 00 64 FD | 	ret
258e0                 | 
258e0                 | __system___fmtstr
258e0     09 CA 05 F6 | 	mov	COUNT_, #9
258e4     E8 00 A0 FD | 	call	#pushregs_
258e8     49 A7 02 F6 | 	mov	local01, arg01
258ec     4A A9 02 F6 | 	mov	local02, arg02
258f0     4B AB 02 F6 | 	mov	local03, arg03
258f4     54 99 E2 F8 | 	getbyte	arg04, local02, #0
258f8     55 93 02 F6 | 	mov	arg01, local03
258fc     49 AD 02 F6 | 	mov	local04, arg01
25900     D7 06 48 FB | 	callpa	#(@LR__3391-@LR__3390)>>2,fcache_load_ptr_
25904                 | LR__3390
25904     56 7B CA FA | 	rdbyte	result1, local04 wz
25908     01 AC 06 51 |  if_ne	add	local04, #1
2590c     F4 FF 9F 5D |  if_ne	jmp	#LR__3390
25910                 | LR__3391
25910     49 AD 82 F1 | 	sub	local04, arg01
25914     00 98 0E F2 | 	cmp	arg04, #0 wz
25918     4C AD 7A 53 |  if_ne	fles	local04, arg04 wcz
2591c     54 95 02 F6 | 	mov	arg02, local02
25920     56 97 02 F6 | 	mov	arg03, local04
25924     53 93 02 F6 | 	mov	arg01, local01
25928     02 98 06 F6 | 	mov	arg04, #2
2592c     AC 42 B0 FD | 	call	#__system___fmtpad
25930     3D AF 02 F6 | 	mov	local05, result1
25934     00 AE 56 F2 | 	cmps	local05, #0 wc
25938     57 7B 02 C6 |  if_b	mov	result1, local05
2593c     80 00 90 CD |  if_b	jmp	#LR__3394
25940     01 AC 56 F2 | 	cmps	local04, #1 wc
25944     50 00 90 CD |  if_b	jmp	#LR__3393
25948     56 B1 02 F6 | 	mov	local06, local04
2594c                 | LR__3392
2594c     53 B3 02 F6 | 	mov	local07, local01
25950     53 B5 02 F6 | 	mov	local08, local01
25954     13 B2 46 F7 | 	zerox	local07, #19
25958     14 B4 46 F0 | 	shr	local08, #20
2595c     02 B4 66 F0 | 	shl	local08, #2
25960     2D B5 02 F1 | 	add	local08, __methods__
25964     5A B5 02 FB | 	rdlong	local08, local08
25968     55 93 C2 FA | 	rdbyte	arg01, local03
2596c     32 B7 02 F6 | 	mov	local09, objptr
25970     59 65 02 F6 | 	mov	objptr, local07
25974     01 AA 06 F1 | 	add	local03, #1
25978     2D B4 62 FD | 	call	local08
2597c     5B 65 02 F6 | 	mov	objptr, local09
25980     3D B7 02 F6 | 	mov	local09, result1
25984     00 B6 56 F2 | 	cmps	local09, #0 wc
25988     5B 7B 02 C6 |  if_b	mov	result1, local09
2598c     30 00 90 CD |  if_b	jmp	#LR__3394
25990     5B AF 02 F1 | 	add	local05, local09
25994     ED B1 6E FB | 	djnz	local06, #LR__3392
25998                 | LR__3393
25998     54 95 02 F6 | 	mov	arg02, local02
2599c     56 97 02 F6 | 	mov	arg03, local04
259a0     53 93 02 F6 | 	mov	arg01, local01
259a4     01 98 06 F6 | 	mov	arg04, #1
259a8     30 42 B0 FD | 	call	#__system___fmtpad
259ac     3D B7 02 F6 | 	mov	local09, result1
259b0     00 B6 56 F2 | 	cmps	local09, #0 wc
259b4     5B 7B 02 C6 |  if_b	mov	result1, local09
259b8     5B AF 02 31 |  if_ae	add	local05, local09
259bc     57 7B 02 36 |  if_ae	mov	result1, local05
259c0                 | LR__3394
259c0     E7 F0 03 F6 | 	mov	ptra, fp
259c4     F2 00 A0 FD | 	call	#popregs_
259c8                 | __system___fmtstr_ret
259c8     2D 00 64 FD | 	ret
259cc                 | 
259cc                 | __system___fmtnum
259cc     0B CA 05 F6 | 	mov	COUNT_, #11
259d0     E8 00 A0 FD | 	call	#pushregs_
259d4     49 A7 02 F6 | 	mov	local01, arg01
259d8     4A A9 02 F6 | 	mov	local02, arg02
259dc     4B AB 02 F6 | 	mov	local03, arg03
259e0     4C AD 02 F6 | 	mov	local04, arg04
259e4     F8 AF 02 F6 | 	mov	local05, ptra
259e8     57 B1 02 F6 | 	mov	local06, local05
259ec     00 B2 06 F6 | 	mov	local07, #0
259f0     54 B5 02 F6 | 	mov	local08, local02
259f4     10 B4 46 F0 | 	shr	local08, #16
259f8     3F B4 06 F5 | 	and	local08, #63
259fc     54 B7 E2 F8 | 	getbyte	local09, local02, #0
25a00     54 B9 02 F6 | 	mov	local10, local02
25a04     1A B8 46 F0 | 	shr	local10, #26
25a08     03 B8 06 F5 | 	and	local10, #3
25a0c     5C BB 02 F6 | 	mov	local11, local10
25a10     01 B4 56 F2 | 	cmps	local08, #1 wc
25a14     44 F0 07 F1 | 	add	ptra, #68
25a18     01 B4 86 31 |  if_ae	sub	local08, #1
25a1c     41 B6 56 F2 | 	cmps	local09, #65 wc
25a20     00 B6 0E C2 |  if_b	cmp	local09, #0 wz
25a24     40 B6 06 B6 |  if_nc_or_z	mov	local09, #64
25a28     03 BA 0E F2 | 	cmp	local11, #3 wz
25a2c     00 BA 06 A6 |  if_e	mov	local11, #0
25a30     00 AA 56 52 |  if_ne	cmps	local03, #0 wc
25a34     04 BA 06 46 |  if_c_and_nz	mov	local11, #4
25a38     55 AB 62 46 |  if_c_and_nz	neg	local03, local03
25a3c     00 BA 0E F2 | 	cmp	local11, #0 wz
25a40     4C 00 90 AD |  if_e	jmp	#LR__3403
25a44     01 B2 06 F6 | 	mov	local07, #1
25a48     5B B5 0A F2 | 	cmp	local08, local09 wz
25a4c     18 00 90 5D |  if_ne	jmp	#LR__3401
25a50     05 B4 6E FB | 	djnz	local08, #LR__3400
25a54     53 93 02 F6 | 	mov	arg01, local01
25a58     54 95 02 F6 | 	mov	arg02, local02
25a5c     23 96 06 F6 | 	mov	arg03, #35
25a60     48 FE BF FD | 	call	#__system___fmtchar
25a64     8C 00 90 FD | 	jmp	#LR__3407
25a68                 | LR__3400
25a68                 | LR__3401
25a68     02 BA 0E F2 | 	cmp	local11, #2 wz
25a6c     58 B9 02 A6 |  if_e	mov	local10, local06
25a70     01 B0 06 A1 |  if_e	add	local06, #1
25a74     5C 41 48 AC |  if_e	wrbyte	#32, local10
25a78     14 00 90 AD |  if_e	jmp	#LR__3402
25a7c     04 BA 0E F2 | 	cmp	local11, #4 wz
25a80     58 5B 48 AC |  if_e	wrbyte	#45, local06
25a84     01 B0 06 A1 |  if_e	add	local06, #1
25a88     58 57 48 5C |  if_ne	wrbyte	#43, local06
25a8c     01 B0 06 51 |  if_ne	add	local06, #1
25a90                 | LR__3402
25a90                 | LR__3403
25a90     59 B9 02 F6 | 	mov	local10, local07
25a94     58 93 02 F6 | 	mov	arg01, local06
25a98     55 95 02 F6 | 	mov	arg02, local03
25a9c     56 97 02 F6 | 	mov	arg03, local04
25aa0     5A 99 02 F6 | 	mov	arg04, local08
25aa4     00 9A 06 F6 | 	mov	arg05, #0
25aa8     1D A8 2E F4 | 	testbn	local02, #29 wz
25aac     01 9A 06 56 |  if_ne	mov	arg05, #1
25ab0     F0 41 B0 FD | 	call	#__system___uitoa
25ab4     3D B9 02 F1 | 	add	local10, result1
25ab8     5B B9 5A F2 | 	cmps	local10, local09 wcz
25abc     24 00 90 ED |  if_be	jmp	#LR__3406
25ac0     D7 0E 48 FB | 	callpa	#(@LR__3405-@LR__3404)>>2,fcache_load_ptr_
25ac4                 | LR__3404
25ac4     5B B9 02 F6 | 	mov	local10, local09
25ac8     01 B8 56 F2 | 	cmps	local10, #1 wc
25acc     01 B6 86 F1 | 	sub	local09, #1
25ad0     58 B9 02 36 |  if_ae	mov	local10, local06
25ad4     01 B0 06 31 |  if_ae	add	local06, #1
25ad8     5C 47 48 3C |  if_ae	wrbyte	#35, local10
25adc     E4 FF 9F 3D |  if_ae	jmp	#LR__3404
25ae0                 | LR__3405
25ae0     58 01 48 FC | 	wrbyte	#0, local06
25ae4                 | LR__3406
25ae4     53 93 02 F6 | 	mov	arg01, local01
25ae8     54 95 02 F6 | 	mov	arg02, local02
25aec     57 97 02 F6 | 	mov	arg03, local05
25af0     EC FD BF FD | 	call	#__system___fmtstr
25af4                 | LR__3407
25af4     E7 F0 03 F6 | 	mov	ptra, fp
25af8     F2 00 A0 FD | 	call	#popregs_
25afc                 | __system___fmtnum_ret
25afc     2D 00 64 FD | 	ret
25b00                 | 
25b00                 | __system___fmtfloat
25b00     29 CA 05 F6 | 	mov	COUNT_, #41
25b04     E8 00 A0 FD | 	call	#pushregs_
25b08     24 F1 07 F1 | 	add	ptra, #292
25b0c     49 A7 02 F6 | 	mov	local01, arg01
25b10     4A A9 02 F6 | 	mov	local02, arg02
25b14     4B AB 02 F6 | 	mov	local03, arg03
25b18     4C AD 02 F6 | 	mov	local04, arg04
25b1c     0A AE 06 F6 | 	mov	local05, #10
25b20     00 B0 06 F6 | 	mov	local06, #0
25b24     00 B2 06 F6 | 	mov	local07, #0
25b28     02 B4 06 F6 | 	mov	local08, #2
25b2c     00 B6 06 F6 | 	mov	local09, #0
25b30     00 B8 06 F6 | 	mov	local10, #0
25b34     00 BA 06 F6 | 	mov	local11, #0
25b38     E7 BC 02 F6 | 	mov	local12, fp
25b3c     C8 BC 06 F1 | 	add	local12, #200
25b40     5E BF 02 F6 | 	mov	local13, local12
25b44     54 C1 02 F6 | 	mov	local14, local02
25b48     10 C0 46 F0 | 	shr	local14, #16
25b4c     3F C0 0E F5 | 	and	local14, #63 wz
25b50     54 C3 02 F6 | 	mov	local15, local02
25b54     1C C2 46 F0 | 	shr	local15, #28
25b58     01 C2 06 F5 | 	and	local15, #1
25b5c     18 00 90 5D |  if_ne	jmp	#LR__3410
25b60     61 AC 0E F2 | 	cmp	local04, #97 wz
25b64     0D C0 06 A6 |  if_e	mov	local14, #13
25b68     01 B2 06 A6 |  if_e	mov	local07, #1
25b6c     0C 00 90 AD |  if_e	jmp	#LR__3411
25b70     06 C0 06 F6 | 	mov	local14, #6
25b74     04 00 90 FD | 	jmp	#LR__3411
25b78                 | LR__3410
25b78     01 C0 86 F1 | 	sub	local14, #1
25b7c                 | LR__3411
25b7c     54 C5 02 F6 | 	mov	local16, local02
25b80     16 C4 46 F0 | 	shr	local16, #22
25b84     03 C4 06 F5 | 	and	local16, #3
25b88     54 C7 02 F6 | 	mov	local17, local02
25b8c     1D C6 46 F0 | 	shr	local17, #29
25b90     01 C6 06 F5 | 	and	local17, #1
25b94     54 C9 EA F8 | 	getbyte	local18, local02, #1
25b98     54 CB E2 F8 | 	getbyte	local19, local02, #0
25b9c     65 AC 0E F2 | 	cmp	local04, #101 wz
25ba0     6E CC 62 FD | 	wrz	local20
25ba4     66 CF 02 F6 | 	mov	local21, local20
25ba8     00 C6 0E F2 | 	cmp	local17, #0 wz
25bac     45 CC 06 56 |  if_ne	mov	local20, #69
25bb0     65 CC 06 A6 |  if_e	mov	local20, #101
25bb4     66 D1 02 F6 | 	mov	local22, local20
25bb8     61 AC 0E F2 | 	cmp	local04, #97 wz
25bbc     2C 00 90 5D |  if_ne	jmp	#LR__3412
25bc0     01 CE 06 F6 | 	mov	local21, #1
25bc4     00 C6 0E F2 | 	cmp	local17, #0 wz
25bc8     50 CC 06 56 |  if_ne	mov	local20, #80
25bcc     70 CC 06 A6 |  if_e	mov	local20, #112
25bd0     66 D1 02 F6 | 	mov	local22, local20
25bd4     02 AE 06 F6 | 	mov	local05, #2
25bd8     01 B4 06 F6 | 	mov	local08, #1
25bdc     00 C6 0E F2 | 	cmp	local17, #0 wz
25be0     58 CC 06 56 |  if_ne	mov	local20, #88
25be4     78 CC 06 A6 |  if_e	mov	local20, #120
25be8     66 B7 02 F6 | 	mov	local09, local20
25bec                 | LR__3412
25bec     23 AC 0E F2 | 	cmp	local04, #35 wz
25bf0     14 00 90 5D |  if_ne	jmp	#LR__3413
25bf4     01 B8 06 F6 | 	mov	local10, #1
25bf8     00 C2 0E F2 | 	cmp	local15, #0 wz
25bfc     66 AC 06 56 |  if_ne	mov	local04, #102
25c00     00 C2 06 56 |  if_ne	mov	local15, #0
25c04     01 C2 06 A6 |  if_e	mov	local15, #1
25c08                 | LR__3413
25c08     54 D3 02 F6 | 	mov	local23, local02
25c0c     1A D2 46 F0 | 	shr	local23, #26
25c10     03 D2 06 F5 | 	and	local23, #3
25c14     55 7B 02 F6 | 	mov	result1, local03
25c18     1F 7A 4E F0 | 	shr	result1, #31 wz
25c1c     2D B0 06 56 |  if_ne	mov	local06, #45
25c20     1F AA E6 54 |  if_ne	bitnot	local03, #31
25c24     14 00 90 5D |  if_ne	jmp	#LR__3415
25c28     01 D2 0E F2 | 	cmp	local23, #1 wz
25c2c     2B B0 06 A6 |  if_e	mov	local06, #43
25c30     08 00 90 AD |  if_e	jmp	#LR__3414
25c34     02 D2 0E F2 | 	cmp	local23, #2 wz
25c38     20 B0 06 A6 |  if_e	mov	local06, #32
25c3c                 | LR__3414
25c3c                 | LR__3415
25c3c     54 D5 02 F6 | 	mov	local24, local02
25c40     18 D4 46 F0 | 	shr	local24, #24
25c44     03 D4 06 F5 | 	and	local24, #3
25c48     00 CC 06 F6 | 	mov	local20, #0
25c4c     00 B0 0E F2 | 	cmp	local06, #0 wz
25c50     0A AE 0E A2 |  if_e	cmp	local05, #10 wz
25c54     01 CC 06 56 |  if_ne	mov	local20, #1
25c58     66 D7 0A F6 | 	mov	local25, local20 wz
25c5c     60 00 90 AD |  if_e	jmp	#LR__3417
25c60     02 D4 0E F2 | 	cmp	local24, #2 wz
25c64     58 00 90 5D |  if_ne	jmp	#LR__3417
25c68     02 C4 0E F2 | 	cmp	local16, #2 wz
25c6c     50 00 90 AD |  if_e	jmp	#LR__3417
25c70     58 95 02 F6 | 	mov	arg02, local06
25c74     5B D9 02 F6 | 	mov	local26, local09
25c78     5E 93 02 F6 | 	mov	arg01, local12
25c7c     6C 97 02 F6 | 	mov	arg03, local26
25c80     88 42 B0 FD | 	call	#__system__emitsign_0584
25c84     3D DB 02 F6 | 	mov	local27, result1
25c88     00 DA 56 F2 | 	cmps	local27, #0 wc
25c8c     6D 7B 02 C6 |  if_b	mov	result1, local27
25c90     C0 05 90 CD |  if_b	jmp	#LR__3460
25c94     6D DD 02 F6 | 	mov	local28, local27
25c98     6D BD 02 F1 | 	add	local12, local27
25c9c     00 C8 0E F2 | 	cmp	local18, #0 wz
25ca0     18 00 90 AD |  if_e	jmp	#LR__3416
25ca4     6D C9 82 F1 | 	sub	local18, local27
25ca8     00 C8 56 F3 | 	fges	local18, #0 wc
25cac     E8 A8 06 F4 | 	bitl	local02, #232
25cb0     64 DD 02 F6 | 	mov	local28, local18
25cb4     08 DC 66 F0 | 	shl	local28, #8
25cb8     6E A9 42 F5 | 	or	local02, local28
25cbc                 | LR__3416
25cbc     00 D6 06 F6 | 	mov	local25, #0
25cc0                 | LR__3417
25cc0     55 93 02 F6 | 	mov	arg01, local03
25cc4     F4 1C B0 FD | 	call	#__system____builtin_ilogb
25cc8     FF FF 3F FF 
25ccc     FF 7B 0E F2 | 	cmp	result1, ##2147483647 wz
25cd0     24 00 90 5D |  if_ne	jmp	#LR__3418
25cd4     00 B0 0E F2 | 	cmp	local06, #0 wz
25cd8     5E CD 02 56 |  if_ne	mov	local20, local12
25cdc     01 BC 06 51 |  if_ne	add	local12, #1
25ce0     66 B1 42 5C |  if_ne	wrbyte	local06, local20
25ce4     92 01 00 FF 
25ce8     92 94 06 F6 | 	mov	arg02, ##@LR__5461
25cec     5E 93 02 F6 | 	mov	arg01, local12
25cf0     78 EC BF FD | 	call	#__system____builtin_strcpy
25cf4     AC 04 90 FD | 	jmp	#LR__3450
25cf8                 | LR__3418
25cf8     55 93 02 F6 | 	mov	arg01, local03
25cfc     BC 1C B0 FD | 	call	#__system____builtin_ilogb
25d00     3D CD 02 F6 | 	mov	local20, result1
25d04     00 00 40 FF 
25d08     00 CC 0E F2 | 	cmp	local20, ##-2147483648 wz
25d0c     24 00 90 5D |  if_ne	jmp	#LR__3419
25d10     00 B0 0E F2 | 	cmp	local06, #0 wz
25d14     5E CD 02 56 |  if_ne	mov	local20, local12
25d18     01 BC 06 51 |  if_ne	add	local12, #1
25d1c     66 B1 42 5C |  if_ne	wrbyte	local06, local20
25d20     5E 93 02 F6 | 	mov	arg01, local12
25d24     92 01 00 FF 
25d28     96 94 06 F6 | 	mov	arg02, ##@LR__5462
25d2c     3C EC BF FD | 	call	#__system____builtin_strcpy
25d30     70 04 90 FD | 	jmp	#LR__3450
25d34                 | LR__3419
25d34     67 AC 0E F2 | 	cmp	local04, #103 wz
25d38     23 AC 0E 52 |  if_ne	cmp	local04, #35 wz
25d3c     0C 01 90 5D |  if_ne	jmp	#LR__3424
25d40     14 CE 05 F1 | 	add	fp, #20
25d44     E7 94 02 F6 | 	mov	arg02, fp
25d48     0C CE 05 F1 | 	add	fp, #12
25d4c     E7 96 02 F6 | 	mov	arg03, fp
25d50     20 CE 85 F1 | 	sub	fp, #32
25d54     60 99 02 F6 | 	mov	arg04, local14
25d58     57 9B 02 F6 | 	mov	arg05, local05
25d5c     55 93 02 F6 | 	mov	arg01, local03
25d60     B4 3F B0 FD | 	call	#__system__disassemble_0582
25d64     23 AC 0E F2 | 	cmp	local04, #35 wz
25d68     6C 00 90 5D |  if_ne	jmp	#LR__3421
25d6c     20 CE 05 F1 | 	add	fp, #32
25d70     E7 CC 02 FB | 	rdlong	local20, fp
25d74     20 CE 85 F1 | 	sub	fp, #32
25d78     60 CD 5A F2 | 	cmps	local20, local14 wcz
25d7c     01 CE 06 16 |  if_a	mov	local21, #1
25d80     24 01 90 1D |  if_a	jmp	#LR__3427
25d84     20 CE 05 F1 | 	add	fp, #32
25d88     E7 CC 02 FB | 	rdlong	local20, fp
25d8c     20 CE 85 F1 | 	sub	fp, #32
25d90     00 CC 56 F2 | 	cmps	local20, #0 wc
25d94     1C 00 90 3D |  if_ae	jmp	#LR__3420
25d98     60 CD 62 F6 | 	neg	local20, local14
25d9c     20 CE 05 F1 | 	add	fp, #32
25da0     E7 DC 02 FB | 	rdlong	local28, fp
25da4     20 CE 85 F1 | 	sub	fp, #32
25da8     66 DD 5A F2 | 	cmps	local28, local20 wcz
25dac     01 CE 06 E6 |  if_be	mov	local21, #1
25db0     F4 00 90 FD | 	jmp	#LR__3427
25db4                 | LR__3420
25db4     20 CE 05 F1 | 	add	fp, #32
25db8     E7 CC 02 FB | 	rdlong	local20, fp
25dbc     20 CE 85 F1 | 	sub	fp, #32
25dc0     01 CC 56 F2 | 	cmps	local20, #1 wc
25dc4     20 CE 05 31 |  if_ae	add	fp, #32
25dc8     E7 DC 02 3B |  if_ae	rdlong	local28, fp
25dcc     20 CE 85 31 |  if_ae	sub	fp, #32
25dd0     6E C1 82 31 |  if_ae	sub	local14, local28
25dd4     D0 00 90 FD | 	jmp	#LR__3427
25dd8                 | LR__3421
25dd8     00 B2 06 F6 | 	mov	local07, #0
25ddc     1C A8 2E F4 | 	testbn	local02, #28 wz
25de0     01 B2 06 A6 |  if_e	mov	local07, #1
25de4     20 CE 05 F1 | 	add	fp, #32
25de8     E7 CC 02 FB | 	rdlong	local20, fp
25dec     20 CE 85 F1 | 	sub	fp, #32
25df0     60 CD 52 F2 | 	cmps	local20, local14 wc
25df4     18 00 90 3D |  if_ae	jmp	#LR__3422
25df8     20 CE 05 F1 | 	add	fp, #32
25dfc     E7 D8 02 FB | 	rdlong	local26, fp
25e00     20 CE 85 F1 | 	sub	fp, #32
25e04     FF FF 7F FF 
25e08     FC D9 56 F2 | 	cmps	local26, ##-4 wc
25e0c     08 00 90 3D |  if_ae	jmp	#LR__3423
25e10                 | LR__3422
25e10     01 CE 06 F6 | 	mov	local21, #1
25e14     90 00 90 FD | 	jmp	#LR__3427
25e18                 | LR__3423
25e18     20 CE 05 F1 | 	add	fp, #32
25e1c     E7 DC 02 FB | 	rdlong	local28, fp
25e20     6E C1 82 F1 | 	sub	local14, local28
25e24     0C CE 85 F1 | 	sub	fp, #12
25e28     E7 94 02 F6 | 	mov	arg02, fp
25e2c     0C CE 05 F1 | 	add	fp, #12
25e30     E7 96 02 F6 | 	mov	arg03, fp
25e34     20 CE 85 F1 | 	sub	fp, #32
25e38     60 99 62 F6 | 	neg	arg04, local14
25e3c     55 93 02 F6 | 	mov	arg01, local03
25e40     57 9B 02 F6 | 	mov	arg05, local05
25e44     D0 3E B0 FD | 	call	#__system__disassemble_0582
25e48     5C 00 90 FD | 	jmp	#LR__3427
25e4c                 | LR__3424
25e4c     00 CE 0E F2 | 	cmp	local21, #0 wz
25e50     28 00 90 AD |  if_e	jmp	#LR__3425
25e54     14 CE 05 F1 | 	add	fp, #20
25e58     E7 94 02 F6 | 	mov	arg02, fp
25e5c     0C CE 05 F1 | 	add	fp, #12
25e60     E7 96 02 F6 | 	mov	arg03, fp
25e64     20 CE 85 F1 | 	sub	fp, #32
25e68     55 93 02 F6 | 	mov	arg01, local03
25e6c     60 99 02 F6 | 	mov	arg04, local14
25e70     57 9B 02 F6 | 	mov	arg05, local05
25e74     A0 3E B0 FD | 	call	#__system__disassemble_0582
25e78     2C 00 90 FD | 	jmp	#LR__3426
25e7c                 | LR__3425
25e7c     14 CE 05 F1 | 	add	fp, #20
25e80     E7 94 02 F6 | 	mov	arg02, fp
25e84     0C CE 05 F1 | 	add	fp, #12
25e88     E7 96 02 F6 | 	mov	arg03, fp
25e8c     20 CE 85 F1 | 	sub	fp, #32
25e90     60 DD 02 F6 | 	mov	local28, local14
25e94     01 DC 06 F1 | 	add	local28, #1
25e98     6E 99 62 F6 | 	neg	arg04, local28
25e9c     55 93 02 F6 | 	mov	arg01, local03
25ea0     57 9B 02 F6 | 	mov	arg05, local05
25ea4     70 3E B0 FD | 	call	#__system__disassemble_0582
25ea8                 | LR__3426
25ea8                 | LR__3427
25ea8     02 AE 0E F2 | 	cmp	local05, #2 wz
25eac     44 00 90 5D |  if_ne	jmp	#LR__3430
25eb0     10 AE 06 F6 | 	mov	local05, #16
25eb4                 | LR__3428
25eb4     14 CE 05 F1 | 	add	fp, #20
25eb8     E7 CC 0A FB | 	rdlong	local20, fp wz
25ebc     14 CE 85 F1 | 	sub	fp, #20
25ec0     30 00 90 AD |  if_e	jmp	#LR__3429
25ec4     14 CE 05 F1 | 	add	fp, #20
25ec8     E7 D8 02 FB | 	rdlong	local26, fp
25ecc     14 CE 85 F1 | 	sub	fp, #20
25ed0     00 80 00 FF 
25ed4     00 D8 16 F2 | 	cmp	local26, ##16777216 wc
25ed8     18 00 90 3D |  if_ae	jmp	#LR__3429
25edc     14 CE 05 F1 | 	add	fp, #20
25ee0     E7 CC 02 FB | 	rdlong	local20, fp
25ee4     01 CC 66 F0 | 	shl	local20, #1
25ee8     E7 CC 62 FC | 	wrlong	local20, fp
25eec     14 CE 85 F1 | 	sub	fp, #20
25ef0     C0 FF 9F FD | 	jmp	#LR__3428
25ef4                 | LR__3429
25ef4                 | LR__3430
25ef4     70 CE 05 F1 | 	add	fp, #112
25ef8     E7 92 02 F6 | 	mov	arg01, fp
25efc     5C CE 85 F1 | 	sub	fp, #92
25f00     E7 94 02 FB | 	rdlong	arg02, fp
25f04     14 CE 85 F1 | 	sub	fp, #20
25f08     57 97 02 F6 | 	mov	arg03, local05
25f0c     01 98 06 F6 | 	mov	arg04, #1
25f10     63 9B 02 F6 | 	mov	arg05, local17
25f14     8C 3D B0 FD | 	call	#__system___uitoa
25f18     3D DF 02 F6 | 	mov	local29, result1
25f1c     20 CE 05 F1 | 	add	fp, #32
25f20     E7 CC 02 FB | 	rdlong	local20, fp
25f24     20 CE 85 F1 | 	sub	fp, #32
25f28     00 CC 56 F2 | 	cmps	local20, #0 wc
25f2c     44 00 90 3D |  if_ae	jmp	#LR__3431
25f30     2D BA 06 F6 | 	mov	local11, #45
25f34     B0 CE 05 F1 | 	add	fp, #176
25f38     E7 92 02 F6 | 	mov	arg01, fp
25f3c     90 CE 85 F1 | 	sub	fp, #144
25f40     E7 D8 02 FB | 	rdlong	local26, fp
25f44     20 CE 85 F1 | 	sub	fp, #32
25f48     6C DD 62 F6 | 	neg	local28, local26
25f4c     0A D8 06 F6 | 	mov	local26, #10
25f50     5A E1 02 F6 | 	mov	local30, local08
25f54     63 E3 02 F6 | 	mov	local31, local17
25f58     6E 95 02 F6 | 	mov	arg02, local28
25f5c     0A 96 06 F6 | 	mov	arg03, #10
25f60     70 99 02 F6 | 	mov	arg04, local30
25f64     71 9B 02 F6 | 	mov	arg05, local31
25f68     38 3D B0 FD | 	call	#__system___uitoa
25f6c     3D E5 02 F6 | 	mov	local32, result1
25f70     3C 00 90 FD | 	jmp	#LR__3432
25f74                 | LR__3431
25f74     2B BA 06 F6 | 	mov	local11, #43
25f78     B0 CE 05 F1 | 	add	fp, #176
25f7c     E7 92 02 F6 | 	mov	arg01, fp
25f80     90 CE 85 F1 | 	sub	fp, #144
25f84     E7 DC 02 FB | 	rdlong	local28, fp
25f88     20 CE 85 F1 | 	sub	fp, #32
25f8c     0A D8 06 F6 | 	mov	local26, #10
25f90     5A E1 02 F6 | 	mov	local30, local08
25f94     63 E3 02 F6 | 	mov	local31, local17
25f98     6E 95 02 F6 | 	mov	arg02, local28
25f9c     0A 96 06 F6 | 	mov	arg03, #10
25fa0     70 99 02 F6 | 	mov	arg04, local30
25fa4     71 9B 02 F6 | 	mov	arg05, local31
25fa8     F8 3C B0 FD | 	call	#__system___uitoa
25fac     3D E5 02 F6 | 	mov	local32, result1
25fb0                 | LR__3432
25fb0     00 CE 0E F2 | 	cmp	local21, #0 wz
25fb4     00 E6 06 56 |  if_ne	mov	local33, #0
25fb8     00 E8 06 56 |  if_ne	mov	local34, #0
25fbc     60 EB 02 56 |  if_ne	mov	local35, local14
25fc0     01 EA 06 51 |  if_ne	add	local35, #1
25fc4     54 00 90 5D |  if_ne	jmp	#LR__3435
25fc8     20 CE 05 F1 | 	add	fp, #32
25fcc     E7 DC 02 FB | 	rdlong	local28, fp
25fd0     20 CE 85 F1 | 	sub	fp, #32
25fd4     00 DC 56 F2 | 	cmps	local28, #0 wc
25fd8     24 00 90 3D |  if_ae	jmp	#LR__3433
25fdc     20 CE 05 F1 | 	add	fp, #32
25fe0     E7 DC 02 FB | 	rdlong	local28, fp
25fe4     6E E7 02 F6 | 	mov	local33, local28
25fe8     73 E9 02 F6 | 	mov	local34, local33
25fec     20 CE 85 F1 | 	sub	fp, #32
25ff0     6E EB 02 F6 | 	mov	local35, local28
25ff4     60 EB 02 F1 | 	add	local35, local14
25ff8     01 EA 06 F1 | 	add	local35, #1
25ffc     1C 00 90 FD | 	jmp	#LR__3434
26000                 | LR__3433
26000     00 E8 06 F6 | 	mov	local34, #0
26004     20 CE 05 F1 | 	add	fp, #32
26008     E7 E6 02 FB | 	rdlong	local33, fp
2600c     20 CE 85 F1 | 	sub	fp, #32
26010     73 EB 02 F6 | 	mov	local35, local33
26014     60 EB 02 F1 | 	add	local35, local14
26018     01 EA 06 F1 | 	add	local35, #1
2601c                 | LR__3434
2601c                 | LR__3435
2601c     75 CD 02 F6 | 	mov	local20, local35
26020     74 CD 82 F1 | 	sub	local20, local34
26024     01 CC 06 F1 | 	add	local20, #1
26028     66 ED 02 F6 | 	mov	local36, local20
2602c     00 B0 0E F2 | 	cmp	local06, #0 wz
26030     76 CD 02 56 |  if_ne	mov	local20, local36
26034     76 DD 02 56 |  if_ne	mov	local28, local36
26038     01 DC 06 51 |  if_ne	add	local28, #1
2603c     6E ED 02 56 |  if_ne	mov	local36, local28
26040     10 AE 0E F2 | 	cmp	local05, #16 wz
26044     02 EC 06 A1 |  if_e	add	local36, #2
26048     00 CE 0E F2 | 	cmp	local21, #0 wz
2604c     02 DC 06 56 |  if_ne	mov	local28, #2
26050     72 DD 02 51 |  if_ne	add	local28, local32
26054     6E ED 02 51 |  if_ne	add	local36, local28
26058     41 EC 56 F2 | 	cmps	local36, #65 wc
2605c     01 7A 66 36 |  if_ae	neg	result1, #1
26060     F0 01 90 3D |  if_ae	jmp	#LR__3460
26064     00 D6 0E F2 | 	cmp	local25, #0 wz
26068     28 00 90 AD |  if_e	jmp	#LR__3436
2606c     58 95 02 F6 | 	mov	arg02, local06
26070     5E 93 02 F6 | 	mov	arg01, local12
26074     5B 97 02 F6 | 	mov	arg03, local09
26078     90 3E B0 FD | 	call	#__system__emitsign_0584
2607c     3D EF 02 F6 | 	mov	local37, result1
26080     00 EE 56 F2 | 	cmps	local37, #0 wc
26084     77 7B 02 C6 |  if_b	mov	result1, local37
26088     C8 01 90 CD |  if_b	jmp	#LR__3460
2608c     77 DD 02 F6 | 	mov	local28, local37
26090     77 BD 02 F1 | 	add	local12, local37
26094                 | LR__3436
26094     74 F1 02 F6 | 	mov	local38, local34
26098     D7 42 48 FB | 	callpa	#(@LR__3441-@LR__3437)>>2,fcache_load_ptr_
2609c                 | LR__3437
2609c     75 F1 52 F2 | 	cmps	local38, local35 wc
260a0     7C 00 90 3D |  if_ae	jmp	#LR__3442
260a4     00 F0 56 F2 | 	cmps	local38, #0 wc
260a8     2C 00 90 CD |  if_b	jmp	#LR__3438
260ac     6F F1 52 F2 | 	cmps	local38, local29 wc
260b0     24 00 90 3D |  if_ae	jmp	#LR__3438
260b4     5E CD 02 F6 | 	mov	local20, local12
260b8     78 D9 02 F6 | 	mov	local26, local38
260bc     E7 E0 02 F6 | 	mov	local30, fp
260c0     70 E0 06 F1 | 	add	local30, #112
260c4     70 D9 02 F1 | 	add	local26, local30
260c8     6C E3 C2 FA | 	rdbyte	local31, local26
260cc     66 E3 42 FC | 	wrbyte	local31, local20
260d0     01 BC 06 F1 | 	add	local12, #1
260d4     10 00 90 FD | 	jmp	#LR__3439
260d8                 | LR__3438
260d8     5E CD 02 F6 | 	mov	local20, local12
260dc     30 D8 06 F6 | 	mov	local26, #48
260e0     66 61 48 FC | 	wrbyte	#48, local20
260e4     01 BC 06 F1 | 	add	local12, #1
260e8                 | LR__3439
260e8     73 F1 0A F2 | 	cmp	local38, local33 wz
260ec     20 00 90 5D |  if_ne	jmp	#LR__3440
260f0     00 C2 0E F2 | 	cmp	local15, #0 wz
260f4     75 CD 02 A6 |  if_e	mov	local20, local35
260f8     01 CC 86 A1 |  if_e	sub	local20, #1
260fc     66 F1 52 A2 |  if_e	cmps	local38, local20 wc
26100     5E CD 02 D6 |  if_c_or_nz	mov	local20, local12
26104     2E D8 06 D6 |  if_c_or_nz	mov	local26, #46
26108     66 5D 48 DC |  if_c_or_nz	wrbyte	#46, local20
2610c     01 BC 06 D1 |  if_c_or_nz	add	local12, #1
26110                 | LR__3440
26110     78 DD 02 F6 | 	mov	local28, local38
26114     01 DC 06 F1 | 	add	local28, #1
26118     6E F1 02 F6 | 	mov	local38, local28
2611c     7C FF 9F FD | 	jmp	#LR__3437
26120                 | LR__3441
26120                 | LR__3442
26120     00 B2 0E F2 | 	cmp	local07, #0 wz
26124     30 00 90 AD |  if_e	jmp	#LR__3446
26128     01 BC 86 F1 | 	sub	local12, #1
2612c     D7 0C 48 FB | 	callpa	#(@LR__3444-@LR__3443)>>2,fcache_load_ptr_
26130                 | LR__3443
26130     5F BD 5A F2 | 	cmps	local12, local13 wcz
26134     10 00 90 ED |  if_be	jmp	#LR__3445
26138     5E CD C2 FA | 	rdbyte	local20, local12
2613c     30 CC 0E F2 | 	cmp	local20, #48 wz
26140     01 BC 86 A1 |  if_e	sub	local12, #1
26144     E8 FF 9F AD |  if_e	jmp	#LR__3443
26148                 | LR__3444
26148                 | LR__3445
26148     5E CD C2 FA | 	rdbyte	local20, local12
2614c     2E CC 0E F2 | 	cmp	local20, #46 wz
26150     01 BC 86 A1 |  if_e	sub	local12, #1
26154     01 BC 06 F1 | 	add	local12, #1
26158                 | LR__3446
26158     00 CE 0E F2 | 	cmp	local21, #0 wz
2615c     40 00 90 AD |  if_e	jmp	#LR__3449
26160     5E D1 42 FC | 	wrbyte	local22, local12
26164     01 BC 06 F1 | 	add	local12, #1
26168     5E BB 42 FC | 	wrbyte	local11, local12
2616c     00 F0 06 F6 | 	mov	local38, #0
26170     01 BC 06 F1 | 	add	local12, #1
26174                 | LR__3447
26174     72 F1 52 F2 | 	cmps	local38, local32 wc
26178     24 00 90 3D |  if_ae	jmp	#LR__3448
2617c     78 D9 02 F6 | 	mov	local26, local38
26180     E7 E0 02 F6 | 	mov	local30, fp
26184     B0 E0 06 F1 | 	add	local30, #176
26188     70 D9 02 F1 | 	add	local26, local30
2618c     6C E3 C2 FA | 	rdbyte	local31, local26
26190     5E E3 42 FC | 	wrbyte	local31, local12
26194     01 F0 06 F1 | 	add	local38, #1
26198     01 BC 06 F1 | 	add	local12, #1
2619c     D4 FF 9F FD | 	jmp	#LR__3447
261a0                 | LR__3448
261a0                 | LR__3449
261a0     5E 01 48 FC | 	wrbyte	#0, local12
261a4                 | LR__3450
261a4     00 CA 0E F2 | 	cmp	local19, #0 wz
261a8     00 B8 0E 52 |  if_ne	cmp	local10, #0 wz
261ac     94 00 90 AD |  if_e	jmp	#LR__3459
261b0     5F 93 02 F6 | 	mov	arg01, local13
261b4     49 F3 02 F6 | 	mov	local39, arg01
261b8     D7 06 48 FB | 	callpa	#(@LR__3452-@LR__3451)>>2,fcache_load_ptr_
261bc                 | LR__3451
261bc     79 7B CA FA | 	rdbyte	result1, local39 wz
261c0     01 F2 06 51 |  if_ne	add	local39, #1
261c4     F4 FF 9F 5D |  if_ne	jmp	#LR__3451
261c8                 | LR__3452
261c8     49 F3 82 F1 | 	sub	local39, arg01
261cc     65 F3 5A F2 | 	cmps	local39, local19 wcz
261d0     70 00 90 ED |  if_be	jmp	#LR__3459
261d4     5F F5 02 F6 | 	mov	local40, local13
261d8     00 CE 0E F2 | 	cmp	local21, #0 wz
261dc     00 C0 06 56 |  if_ne	mov	local14, #0
261e0     65 F7 02 56 |  if_ne	mov	local41, local19
261e4     01 CA 86 A1 |  if_e	sub	local19, #1
261e8     60 CB 82 A1 |  if_e	sub	local19, local14
261ec     65 F7 02 A6 |  if_e	mov	local41, local19
261f0     00 F6 0E F2 | 	cmp	local41, #0 wz
261f4     14 00 90 AD |  if_e	jmp	#LR__3455
261f8     D7 08 48 FB | 	callpa	#(@LR__3454-@LR__3453)>>2,fcache_load_ptr_
261fc                 | LR__3453
261fc     7A 55 48 FC | 	wrbyte	#42, local40
26200     01 F6 8E F1 | 	sub	local41, #1 wz
26204     01 F4 06 F1 | 	add	local40, #1
26208     F0 FF 9F 5D |  if_ne	jmp	#LR__3453
2620c                 | LR__3454
2620c                 | LR__3455
2620c     00 C0 0E F2 | 	cmp	local14, #0 wz
26210     2C 00 90 AD |  if_e	jmp	#LR__3458
26214     7A CD 02 F6 | 	mov	local20, local40
26218     66 5D 48 FC | 	wrbyte	#46, local20
2621c     00 F6 06 F6 | 	mov	local41, #0
26220     01 F4 06 F1 | 	add	local40, #1
26224     D7 0C 48 FB | 	callpa	#(@LR__3457-@LR__3456)>>2,fcache_load_ptr_
26228                 | LR__3456
26228     60 F7 52 F2 | 	cmps	local41, local14 wc
2622c     7A CD 02 C6 |  if_b	mov	local20, local40
26230     01 F4 06 C1 |  if_b	add	local40, #1
26234     66 55 48 CC |  if_b	wrbyte	#42, local20
26238     01 F6 06 C1 |  if_b	add	local41, #1
2623c     E8 FF 9F CD |  if_b	jmp	#LR__3456
26240                 | LR__3457
26240                 | LR__3458
26240     7A 01 48 FC | 	wrbyte	#0, local40
26244                 | LR__3459
26244     53 93 02 F6 | 	mov	arg01, local01
26248     54 95 02 F6 | 	mov	arg02, local02
2624c     5F 97 02 F6 | 	mov	arg03, local13
26250     8C F6 BF FD | 	call	#__system___fmtstr
26254                 | LR__3460
26254     E7 F0 03 F6 | 	mov	ptra, fp
26258     F2 00 A0 FD | 	call	#popregs_
2625c                 | __system___fmtfloat_ret
2625c     2D 00 64 FD | 	ret
26260                 | 
26260                 | __system__Left_S
26260     04 CA 05 F6 | 	mov	COUNT_, #4
26264     E8 00 A0 FD | 	call	#pushregs_
26268     49 A7 02 F6 | 	mov	local01, arg01
2626c     4A A9 02 F6 | 	mov	local02, arg02
26270     01 A8 56 F2 | 	cmps	local02, #1 wc
26274     92 01 00 CF 
26278     9A 7A 06 C6 |  if_b	mov	result1, ##@LR__5463
2627c     5C 00 90 CD |  if_b	jmp	#LR__3473
26280     53 93 02 F6 | 	mov	arg01, local01
26284     49 AB 02 F6 | 	mov	local03, arg01
26288     D7 06 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
2628c                 | LR__3470
2628c     55 7B CA FA | 	rdbyte	result1, local03 wz
26290     01 AA 06 51 |  if_ne	add	local03, #1
26294     F4 FF 9F 5D |  if_ne	jmp	#LR__3470
26298                 | LR__3471
26298     49 AB 82 F1 | 	sub	local03, arg01
2629c     55 7B 02 F6 | 	mov	result1, local03
262a0     54 7B 5A F2 | 	cmps	result1, local02 wcz
262a4     53 7B 02 E6 |  if_be	mov	result1, local01
262a8     30 00 90 ED |  if_be	jmp	#LR__3473
262ac     54 93 02 F6 | 	mov	arg01, local02
262b0     02 92 06 F1 | 	add	arg01, #2
262b4     08 21 B0 FD | 	call	#__system___gc_alloc_managed
262b8     3D AD 0A F6 | 	mov	local04, result1 wz
262bc     18 00 90 AD |  if_e	jmp	#LR__3472
262c0     56 93 02 F6 | 	mov	arg01, local04
262c4     53 95 02 F6 | 	mov	arg02, local01
262c8     54 97 02 F6 | 	mov	arg03, local02
262cc     98 E5 BF FD | 	call	#__system____builtin_memmove
262d0     56 A9 02 F1 | 	add	local02, local04
262d4     54 01 48 FC | 	wrbyte	#0, local02
262d8                 | LR__3472
262d8     56 7B 02 F6 | 	mov	result1, local04
262dc                 | LR__3473
262dc     E7 F0 03 F6 | 	mov	ptra, fp
262e0     F2 00 A0 FD | 	call	#popregs_
262e4                 | __system__Left_S_ret
262e4     2D 00 64 FD | 	ret
262e8                 | 
262e8                 | __system__Right_S
262e8     05 CA 05 F6 | 	mov	COUNT_, #5
262ec     E8 00 A0 FD | 	call	#pushregs_
262f0     49 A7 02 F6 | 	mov	local01, arg01
262f4     4A A9 02 F6 | 	mov	local02, arg02
262f8     01 A8 56 F2 | 	cmps	local02, #1 wc
262fc     92 01 00 CF 
26300     9B 7A 06 C6 |  if_b	mov	result1, ##@LR__5464
26304     64 00 90 CD |  if_b	jmp	#LR__3483
26308     53 93 02 F6 | 	mov	arg01, local01
2630c     49 AB 02 F6 | 	mov	local03, arg01
26310     D7 06 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
26314                 | LR__3480
26314     55 7B CA FA | 	rdbyte	result1, local03 wz
26318     01 AA 06 51 |  if_ne	add	local03, #1
2631c     F4 FF 9F 5D |  if_ne	jmp	#LR__3480
26320                 | LR__3481
26320     49 AB 82 F1 | 	sub	local03, arg01
26324     55 7B 02 F6 | 	mov	result1, local03
26328     3D AD 02 F6 | 	mov	local04, result1
2632c     54 AD 5A F2 | 	cmps	local04, local02 wcz
26330     53 7B 02 E6 |  if_be	mov	result1, local01
26334     34 00 90 ED |  if_be	jmp	#LR__3483
26338     54 93 02 F6 | 	mov	arg01, local02
2633c     02 92 06 F1 | 	add	arg01, #2
26340     7C 20 B0 FD | 	call	#__system___gc_alloc_managed
26344     3D AF 0A F6 | 	mov	local05, result1 wz
26348     1C 00 90 AD |  if_e	jmp	#LR__3482
2634c     54 AD 82 F1 | 	sub	local04, local02
26350     53 AD 02 F1 | 	add	local04, local01
26354     01 A8 06 F1 | 	add	local02, #1
26358     57 93 02 F6 | 	mov	arg01, local05
2635c     56 95 02 F6 | 	mov	arg02, local04
26360     54 97 02 F6 | 	mov	arg03, local02
26364     00 E5 BF FD | 	call	#__system____builtin_memmove
26368                 | LR__3482
26368     57 7B 02 F6 | 	mov	result1, local05
2636c                 | LR__3483
2636c     E7 F0 03 F6 | 	mov	ptra, fp
26370     F2 00 A0 FD | 	call	#popregs_
26374                 | __system__Right_S_ret
26374     2D 00 64 FD | 	ret
26378                 | 
26378                 | __system__Mid_S
26378     05 CA 05 F6 | 	mov	COUNT_, #5
2637c     E8 00 A0 FD | 	call	#pushregs_
26380     49 A7 02 F6 | 	mov	local01, arg01
26384     4A A9 02 F6 | 	mov	local02, arg02
26388     01 96 56 F2 | 	cmps	arg03, #1 wc
2638c     92 01 00 CF 
26390     9C 7A 06 C6 |  if_b	mov	result1, ##@LR__5465
26394     80 00 90 CD |  if_b	jmp	#LR__3493
26398     01 A8 86 F1 | 	sub	local02, #1
2639c     00 A8 56 F3 | 	fges	local02, #0 wc
263a0     53 93 02 F6 | 	mov	arg01, local01
263a4     49 AB 02 F6 | 	mov	local03, arg01
263a8     D7 06 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
263ac                 | LR__3490
263ac     55 7B CA FA | 	rdbyte	result1, local03 wz
263b0     01 AA 06 51 |  if_ne	add	local03, #1
263b4     F4 FF 9F 5D |  if_ne	jmp	#LR__3490
263b8                 | LR__3491
263b8     49 AB 82 F1 | 	sub	local03, arg01
263bc     55 7B 02 F6 | 	mov	result1, local03
263c0     3D 95 02 F6 | 	mov	arg02, result1
263c4     54 95 52 F2 | 	cmps	arg02, local02 wc
263c8     92 01 00 CF 
263cc     9D 7A 06 C6 |  if_b	mov	result1, ##@LR__5466
263d0     44 00 90 CD |  if_b	jmp	#LR__3493
263d4     4A AD 02 F6 | 	mov	local04, arg02
263d8     54 AD 82 F1 | 	sub	local04, local02
263dc     4B AD 5A F2 | 	cmps	local04, arg03 wcz
263e0     4B AD 02 16 |  if_a	mov	local04, arg03
263e4     56 93 02 F6 | 	mov	arg01, local04
263e8     02 92 06 F1 | 	add	arg01, #2
263ec     D0 1F B0 FD | 	call	#__system___gc_alloc_managed
263f0     3D AF 0A F6 | 	mov	local05, result1 wz
263f4     1C 00 90 AD |  if_e	jmp	#LR__3492
263f8     53 A9 02 F1 | 	add	local02, local01
263fc     57 93 02 F6 | 	mov	arg01, local05
26400     54 95 02 F6 | 	mov	arg02, local02
26404     56 97 02 F6 | 	mov	arg03, local04
26408     5C E4 BF FD | 	call	#__system____builtin_memmove
2640c     57 AD 02 F1 | 	add	local04, local05
26410     56 01 48 FC | 	wrbyte	#0, local04
26414                 | LR__3492
26414     57 7B 02 F6 | 	mov	result1, local05
26418                 | LR__3493
26418     E7 F0 03 F6 | 	mov	ptra, fp
2641c     F2 00 A0 FD | 	call	#popregs_
26420                 | __system__Mid_S_ret
26420     2D 00 64 FD | 	ret
26424                 | 
26424                 | __system__Chr_S
26424     01 CA 05 F6 | 	mov	COUNT_, #1
26428     E8 00 A0 FD | 	call	#pushregs_
2642c     49 A7 02 F6 | 	mov	local01, arg01
26430     03 92 06 F6 | 	mov	arg01, #3
26434     88 1F B0 FD | 	call	#__system___gc_alloc_managed
26438     00 7A 4E F2 | 	cmps	result1, #0 wz
2643c     3D A7 42 5C |  if_ne	wrbyte	local01, result1
26440     01 7A 06 51 |  if_ne	add	result1, #1
26444     3D 01 48 5C |  if_ne	wrbyte	#0, result1
26448     01 7A 86 51 |  if_ne	sub	result1, #1
2644c     E7 F0 03 F6 | 	mov	ptra, fp
26450     F2 00 A0 FD | 	call	#popregs_
26454                 | __system__Chr_S_ret
26454     2D 00 64 FD | 	ret
26458                 | 
26458                 | __system__str_S
26458     02 CA 05 F6 | 	mov	COUNT_, #2
2645c     E8 00 A0 FD | 	call	#pushregs_
26460     49 A7 02 F6 | 	mov	local01, arg01
26464     10 92 06 F6 | 	mov	arg01, #16
26468     54 1F B0 FD | 	call	#__system___gc_alloc_managed
2646c     3D A9 0A F6 | 	mov	local02, result1 wz
26470     30 00 90 AD |  if_e	jmp	#LR__3500
26474     F8 93 02 F6 | 	mov	arg01, ptra
26478     08 F0 07 F1 | 	add	ptra, #8
2647c     49 A9 62 FC | 	wrlong	local02, arg01
26480     04 92 06 F1 | 	add	arg01, #4
26484     49 01 68 FC | 	wrlong	#0, arg01
26488     04 92 86 F1 | 	sub	arg01, #4
2648c     00 98 05 FF 
26490     00 92 46 F5 | 	or	arg01, ##187695104
26494     00 94 06 F6 | 	mov	arg02, #0
26498     53 97 02 F6 | 	mov	arg03, local01
2649c     67 98 06 F6 | 	mov	arg04, #103
264a0     5C F6 BF FD | 	call	#__system___fmtfloat
264a4                 | LR__3500
264a4     54 7B 02 F6 | 	mov	result1, local02
264a8     E7 F0 03 F6 | 	mov	ptra, fp
264ac     F2 00 A0 FD | 	call	#popregs_
264b0                 | __system__str_S_ret
264b0     2D 00 64 FD | 	ret
264b4                 | 
264b4                 | __system__Number_S
264b4     08 CA 05 F6 | 	mov	COUNT_, #8
264b8     E8 00 A0 FD | 	call	#pushregs_
264bc     49 A7 02 F6 | 	mov	local01, arg01
264c0     4A A9 0A F6 | 	mov	local02, arg02 wz
264c4     4B AB 02 F6 | 	mov	local03, arg03
264c8     3C 00 90 5D |  if_ne	jmp	#LR__3512
264cc     01 A8 06 F6 | 	mov	local02, #1
264d0     55 AD 02 F6 | 	mov	local04, local03
264d4     01 AE 06 F6 | 	mov	local05, #1
264d8     D7 16 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
264dc                 | LR__3510
264dc     00 B0 06 F6 | 	mov	local06, #0
264e0     53 AD 1A F2 | 	cmp	local04, local01 wcz
264e4     01 B0 66 E6 |  if_be	neg	local06, #1
264e8     56 AF 12 F2 | 	cmp	local05, local04 wc
264ec     59 B3 A2 F1 | 	subx	local07, local07
264f0     59 B1 CA F7 | 	test	local06, local07 wz
264f4     55 AD 02 5D |  if_ne	qmul	local04, local03
264f8     56 AF 02 56 |  if_ne	mov	local05, local04
264fc     01 A8 06 51 |  if_ne	add	local02, #1
26500     18 AC 62 5D |  if_ne	getqx	local04
26504     D4 FF 9F 5D |  if_ne	jmp	#LR__3510
26508                 | LR__3511
26508                 | LR__3512
26508     20 A8 36 F3 | 	fle	local02, #32 wc
2650c     54 93 02 F6 | 	mov	arg01, local02
26510     02 92 06 F1 | 	add	arg01, #2
26514     A8 1E B0 FD | 	call	#__system___gc_alloc_managed
26518     3D B1 02 F6 | 	mov	local06, result1
2651c     54 B3 02 F6 | 	mov	local07, local02
26520     58 B3 02 F1 | 	add	local07, local06
26524     59 01 48 FC | 	wrbyte	#0, local07
26528     D7 1A 48 FB | 	callpa	#(@LR__3514-@LR__3513)>>2,fcache_load_ptr_
2652c                 | LR__3513
2652c     01 A8 16 F2 | 	cmp	local02, #1 wc
26530     2C 00 90 CD |  if_b	jmp	#LR__3515
26534     55 A7 12 FD | 	qdiv	local01, local03
26538     01 A8 86 F1 | 	sub	local02, #1
2653c     54 B3 02 F6 | 	mov	local07, local02
26540     58 B3 02 F1 | 	add	local07, local06
26544     19 B4 62 FD | 	getqy	local08
26548     0A B4 16 F2 | 	cmp	local08, #10 wc
2654c     30 B4 06 C1 |  if_b	add	local08, #48
26550     37 B4 06 31 |  if_ae	add	local08, #55
26554     59 B5 42 FC | 	wrbyte	local08, local07
26558     18 A6 62 FD | 	getqx	local01
2655c     CC FF 9F FD | 	jmp	#LR__3513
26560                 | LR__3514
26560                 | LR__3515
26560     58 7B 02 F6 | 	mov	result1, local06
26564     E7 F0 03 F6 | 	mov	ptra, fp
26568     F2 00 A0 FD | 	call	#popregs_
2656c                 | __system__Number_S_ret
2656c     2D 00 64 FD | 	ret
26570                 | 
26570                 | __system__LCase_S
26570     07 CA 05 F6 | 	mov	COUNT_, #7
26574     E8 00 A0 FD | 	call	#pushregs_
26578     49 A7 02 F6 | 	mov	local01, arg01
2657c     49 A9 02 F6 | 	mov	local02, arg01
26580     D7 06 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
26584                 | LR__3520
26584     54 7B CA FA | 	rdbyte	result1, local02 wz
26588     01 A8 06 51 |  if_ne	add	local02, #1
2658c     F4 FF 9F 5D |  if_ne	jmp	#LR__3520
26590                 | LR__3521
26590     49 A9 82 F1 | 	sub	local02, arg01
26594     54 7B 02 F6 | 	mov	result1, local02
26598     3D A9 0A F6 | 	mov	local02, result1 wz
2659c     92 01 00 AF 
265a0     9E 7A 06 A6 |  if_e	mov	result1, ##@LR__5467
265a4     7C 00 90 AD |  if_e	jmp	#LR__3527
265a8     54 93 02 F6 | 	mov	arg01, local02
265ac     02 92 06 F1 | 	add	arg01, #2
265b0     0C 1E B0 FD | 	call	#__system___gc_alloc_managed
265b4     3D AB 0A F6 | 	mov	local03, result1 wz
265b8     64 00 90 AD |  if_e	jmp	#LR__3526
265bc     01 AC 66 F6 | 	neg	local04, #1
265c0     D7 26 48 FB | 	callpa	#(@LR__3525-@LR__3522)>>2,fcache_load_ptr_
265c4                 | LR__3522
265c4     01 AC 06 F1 | 	add	local04, #1
265c8     56 AF 02 F6 | 	mov	local05, local04
265cc     53 AF 02 F1 | 	add	local05, local01
265d0     57 B1 C2 FA | 	rdbyte	local06, local05
265d4     41 B0 56 F2 | 	cmps	local06, #65 wc
265d8     18 00 90 CD |  if_b	jmp	#LR__3523
265dc     5B B0 56 F2 | 	cmps	local06, #91 wc
265e0     56 B3 02 C6 |  if_b	mov	local07, local04
265e4     55 B3 02 C1 |  if_b	add	local07, local03
265e8     20 B0 06 C1 |  if_b	add	local06, #32
265ec     59 B1 42 CC |  if_b	wrbyte	local06, local07
265f0     0C 00 90 CD |  if_b	jmp	#LR__3524
265f4                 | LR__3523
265f4     56 B3 02 F6 | 	mov	local07, local04
265f8     55 B3 02 F1 | 	add	local07, local03
265fc     59 B1 42 FC | 	wrbyte	local06, local07
26600                 | LR__3524
26600     54 B1 02 F6 | 	mov	local06, local02
26604     01 B0 86 F1 | 	sub	local06, #1
26608     58 AD 0A F2 | 	cmp	local04, local06 wz
2660c     B4 FF 9F 5D |  if_ne	jmp	#LR__3522
26610                 | LR__3525
26610     55 A9 02 F1 | 	add	local02, local03
26614     54 01 48 FC | 	wrbyte	#0, local02
26618     55 7B 02 F6 | 	mov	result1, local03
2661c     04 00 90 FD | 	jmp	#LR__3527
26620                 | LR__3526
26620     55 7B 02 F6 | 	mov	result1, local03
26624                 | LR__3527
26624     E7 F0 03 F6 | 	mov	ptra, fp
26628     F2 00 A0 FD | 	call	#popregs_
2662c                 | __system__LCase_S_ret
2662c     2D 00 64 FD | 	ret
26630                 | 
26630                 | __system__LTrim_S
26630     05 CA 05 F6 | 	mov	COUNT_, #5
26634     E8 00 A0 FD | 	call	#pushregs_
26638     49 A7 02 F6 | 	mov	local01, arg01
2663c     49 A9 02 F6 | 	mov	local02, arg01
26640     D7 06 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
26644                 | LR__3530
26644     54 7B CA FA | 	rdbyte	result1, local02 wz
26648     01 A8 06 51 |  if_ne	add	local02, #1
2664c     F4 FF 9F 5D |  if_ne	jmp	#LR__3530
26650                 | LR__3531
26650     49 A9 82 F1 | 	sub	local02, arg01
26654     54 7B 02 F6 | 	mov	result1, local02
26658     3D A9 0A F6 | 	mov	local02, result1 wz
2665c     92 01 00 AF 
26660     9F 7A 06 A6 |  if_e	mov	result1, ##@LR__5468
26664     7C 00 90 AD |  if_e	jmp	#LR__3536
26668     00 AA 06 F6 | 	mov	local03, #0
2666c     54 AD 02 F6 | 	mov	local04, local02
26670                 | LR__3532
26670     56 AB 52 F2 | 	cmps	local03, local04 wc
26674     68 00 90 3D |  if_ae	jmp	#LR__3535
26678     55 97 02 F6 | 	mov	arg03, local03
2667c     53 97 02 F1 | 	add	arg03, local01
26680     4B 97 C2 FA | 	rdbyte	arg03, arg03
26684     20 96 0E F2 | 	cmp	arg03, #32 wz
26688     4C 00 90 AD |  if_e	jmp	#LR__3534
2668c     54 93 02 F6 | 	mov	arg01, local02
26690     55 93 82 F1 | 	sub	arg01, local03
26694     02 92 06 F1 | 	add	arg01, #2
26698     24 1D B0 FD | 	call	#__system___gc_alloc_managed
2669c     3D AF 0A F6 | 	mov	local05, result1 wz
266a0     2C 00 90 AD |  if_e	jmp	#LR__3533
266a4     55 95 02 F6 | 	mov	arg02, local03
266a8     53 95 02 F1 | 	add	arg02, local01
266ac     54 97 02 F6 | 	mov	arg03, local02
266b0     55 97 82 F1 | 	sub	arg03, local03
266b4     57 93 02 F6 | 	mov	arg01, local05
266b8     AC E1 BF FD | 	call	#__system____builtin_memmove
266bc     55 A9 82 F1 | 	sub	local02, local03
266c0     57 A9 02 F1 | 	add	local02, local05
266c4     54 01 48 FC | 	wrbyte	#0, local02
266c8     57 7B 02 F6 | 	mov	result1, local05
266cc     14 00 90 FD | 	jmp	#LR__3536
266d0                 | LR__3533
266d0     57 7B 02 F6 | 	mov	result1, local05
266d4     0C 00 90 FD | 	jmp	#LR__3536
266d8                 | LR__3534
266d8     01 AA 06 F1 | 	add	local03, #1
266dc     90 FF 9F FD | 	jmp	#LR__3532
266e0                 | LR__3535
266e0     53 7B 02 F6 | 	mov	result1, local01
266e4                 | LR__3536
266e4     E7 F0 03 F6 | 	mov	ptra, fp
266e8     F2 00 A0 FD | 	call	#popregs_
266ec                 | __system__LTrim_S_ret
266ec     2D 00 64 FD | 	ret
266f0                 | 
266f0                 | __system__RTrim_S
266f0     04 CA 05 F6 | 	mov	COUNT_, #4
266f4     E8 00 A0 FD | 	call	#pushregs_
266f8     49 A7 02 F6 | 	mov	local01, arg01
266fc     49 A9 02 F6 | 	mov	local02, arg01
26700     D7 06 48 FB | 	callpa	#(@LR__3541-@LR__3540)>>2,fcache_load_ptr_
26704                 | LR__3540
26704     54 7B CA FA | 	rdbyte	result1, local02 wz
26708     01 A8 06 51 |  if_ne	add	local02, #1
2670c     F4 FF 9F 5D |  if_ne	jmp	#LR__3540
26710                 | LR__3541
26710     49 A9 82 F1 | 	sub	local02, arg01
26714     54 7B 02 F6 | 	mov	result1, local02
26718     3D A9 0A F6 | 	mov	local02, result1 wz
2671c     92 01 00 AF 
26720     A0 7A 06 A6 |  if_e	mov	result1, ##@LR__5469
26724     74 00 90 AD |  if_e	jmp	#LR__3545
26728     54 AB 02 F6 | 	mov	local03, local02
2672c     01 AA 86 F1 | 	sub	local03, #1
26730                 | LR__3542
26730     55 95 02 F6 | 	mov	arg02, local03
26734     53 95 02 F1 | 	add	arg02, local01
26738     4A A9 C2 FA | 	rdbyte	local02, arg02
2673c     20 A8 0E F2 | 	cmp	local02, #32 wz
26740     44 00 90 AD |  if_e	jmp	#LR__3544
26744     55 93 02 F6 | 	mov	arg01, local03
26748     02 92 06 F1 | 	add	arg01, #2
2674c     70 1C B0 FD | 	call	#__system___gc_alloc_managed
26750     3D AD 0A F6 | 	mov	local04, result1 wz
26754     28 00 90 AD |  if_e	jmp	#LR__3543
26758     55 97 02 F6 | 	mov	arg03, local03
2675c     01 96 06 F1 | 	add	arg03, #1
26760     56 93 02 F6 | 	mov	arg01, local04
26764     53 95 02 F6 | 	mov	arg02, local01
26768     FC E0 BF FD | 	call	#__system____builtin_memmove
2676c     01 AA 06 F1 | 	add	local03, #1
26770     56 AB 02 F1 | 	add	local03, local04
26774     55 01 48 FC | 	wrbyte	#0, local03
26778     56 7B 02 F6 | 	mov	result1, local04
2677c     1C 00 90 FD | 	jmp	#LR__3545
26780                 | LR__3543
26780     56 7B 02 F6 | 	mov	result1, local04
26784     14 00 90 FD | 	jmp	#LR__3545
26788                 | LR__3544
26788     01 AA 86 F1 | 	sub	local03, #1
2678c     00 AA 56 F2 | 	cmps	local03, #0 wc
26790     9C FF 9F 3D |  if_ae	jmp	#LR__3542
26794     92 01 00 FF 
26798     A1 7A 06 F6 | 	mov	result1, ##@LR__5470
2679c                 | LR__3545
2679c     E7 F0 03 F6 | 	mov	ptra, fp
267a0     F2 00 A0 FD | 	call	#popregs_
267a4                 | __system__RTrim_S_ret
267a4     2D 00 64 FD | 	ret
267a8                 | 
267a8                 | __system__Instr
267a8     07 CA 05 F6 | 	mov	COUNT_, #7
267ac     E8 00 A0 FD | 	call	#pushregs_
267b0     49 A7 02 F6 | 	mov	local01, arg01
267b4     4A A9 02 F6 | 	mov	local02, arg02
267b8     4B AB 02 F6 | 	mov	local03, arg03
267bc     55 93 02 F6 | 	mov	arg01, local03
267c0     49 AD 02 F6 | 	mov	local04, arg01
267c4     D7 06 48 FB | 	callpa	#(@LR__3551-@LR__3550)>>2,fcache_load_ptr_
267c8                 | LR__3550
267c8     56 7B CA FA | 	rdbyte	result1, local04 wz
267cc     01 AC 06 51 |  if_ne	add	local04, #1
267d0     F4 FF 9F 5D |  if_ne	jmp	#LR__3550
267d4                 | LR__3551
267d4     49 AD 82 F1 | 	sub	local04, arg01
267d8     56 AF 02 F6 | 	mov	local05, local04
267dc     54 93 02 F6 | 	mov	arg01, local02
267e0     49 AD 02 F6 | 	mov	local04, arg01
267e4     D7 06 48 FB | 	callpa	#(@LR__3553-@LR__3552)>>2,fcache_load_ptr_
267e8                 | LR__3552
267e8     56 7B CA FA | 	rdbyte	result1, local04 wz
267ec     01 AC 06 51 |  if_ne	add	local04, #1
267f0     F4 FF 9F 5D |  if_ne	jmp	#LR__3552
267f4                 | LR__3553
267f4     49 AD 82 F1 | 	sub	local04, arg01
267f8     56 7B 02 F6 | 	mov	result1, local04
267fc     3D 99 0A F6 | 	mov	arg04, result1 wz
26800     00 7A 06 A6 |  if_e	mov	result1, #0
26804     98 00 90 AD |  if_e	jmp	#LR__3557
26808     00 AE 0E F2 | 	cmp	local05, #0 wz
2680c     00 7A 06 A6 |  if_e	mov	result1, #0
26810     8C 00 90 AD |  if_e	jmp	#LR__3557
26814     4C A7 5A F2 | 	cmps	local01, arg04 wcz
26818     00 7A 06 16 |  if_a	mov	result1, #0
2681c     80 00 90 1D |  if_a	jmp	#LR__3557
26820     01 A6 56 F2 | 	cmps	local01, #1 wc
26824     01 A6 06 C6 |  if_b	mov	local01, #1
26828     55 B1 C2 FA | 	rdbyte	local06, local03
2682c     01 AE 0E F2 | 	cmp	local05, #1 wz
26830     18 00 90 5D |  if_ne	jmp	#LR__3554
26834     54 93 02 F6 | 	mov	arg01, local02
26838     58 95 02 F6 | 	mov	arg02, local06
2683c     53 97 02 F6 | 	mov	arg03, local01
26840     00 98 06 F6 | 	mov	arg04, #0
26844     C4 37 B0 FD | 	call	#__system____ScanForChar
26848     54 00 90 FD | 	jmp	#LR__3557
2684c                 | LR__3554
2684c     53 B3 02 F6 | 	mov	local07, local01
26850                 | LR__3555
26850     54 93 02 F6 | 	mov	arg01, local02
26854     58 95 02 F6 | 	mov	arg02, local06
26858     59 97 02 F6 | 	mov	arg03, local07
2685c     00 98 06 F6 | 	mov	arg04, #0
26860     A8 37 B0 FD | 	call	#__system____ScanForChar
26864     3D B3 0A F6 | 	mov	local07, result1 wz
26868     30 00 90 AD |  if_e	jmp	#LR__3556
2686c     57 97 02 F6 | 	mov	arg03, local05
26870     54 93 02 F6 | 	mov	arg01, local02
26874     59 95 02 F6 | 	mov	arg02, local07
26878     FC FA BF FD | 	call	#__system__Mid_S
2687c     3D 93 02 F6 | 	mov	arg01, result1
26880     55 95 02 F6 | 	mov	arg02, local03
26884     58 E1 BF FD | 	call	#__system___string_cmp
26888     00 7A 0E F2 | 	cmp	result1, #0 wz
2688c     59 7B 02 A6 |  if_e	mov	result1, local07
26890     0C 00 90 AD |  if_e	jmp	#LR__3557
26894     57 B3 02 F1 | 	add	local07, local05
26898     B4 FF 9F FD | 	jmp	#LR__3555
2689c                 | LR__3556
2689c     00 7A 06 F6 | 	mov	result1, #0
268a0                 | LR__3557
268a0     E7 F0 03 F6 | 	mov	ptra, fp
268a4     F2 00 A0 FD | 	call	#popregs_
268a8                 | __system__Instr_ret
268a8     2D 00 64 FD | 	ret
268ac                 | 
268ac                 | __system__InstrRev
268ac     07 CA 05 F6 | 	mov	COUNT_, #7
268b0     E8 00 A0 FD | 	call	#pushregs_
268b4     49 A7 02 F6 | 	mov	local01, arg01
268b8     4A A9 02 F6 | 	mov	local02, arg02
268bc     4B AB 02 F6 | 	mov	local03, arg03
268c0     55 93 02 F6 | 	mov	arg01, local03
268c4     49 AD 02 F6 | 	mov	local04, arg01
268c8     D7 06 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
268cc                 | LR__3560
268cc     56 7B CA FA | 	rdbyte	result1, local04 wz
268d0     01 AC 06 51 |  if_ne	add	local04, #1
268d4     F4 FF 9F 5D |  if_ne	jmp	#LR__3560
268d8                 | LR__3561
268d8     49 AD 82 F1 | 	sub	local04, arg01
268dc     56 AF 02 F6 | 	mov	local05, local04
268e0     54 93 02 F6 | 	mov	arg01, local02
268e4     49 AD 02 F6 | 	mov	local04, arg01
268e8     D7 06 48 FB | 	callpa	#(@LR__3563-@LR__3562)>>2,fcache_load_ptr_
268ec                 | LR__3562
268ec     56 7B CA FA | 	rdbyte	result1, local04 wz
268f0     01 AC 06 51 |  if_ne	add	local04, #1
268f4     F4 FF 9F 5D |  if_ne	jmp	#LR__3562
268f8                 | LR__3563
268f8     49 AD 82 F1 | 	sub	local04, arg01
268fc     56 7B 02 F6 | 	mov	result1, local04
26900     3D 99 0A F6 | 	mov	arg04, result1 wz
26904     00 7A 06 A6 |  if_e	mov	result1, #0
26908     98 00 90 AD |  if_e	jmp	#LR__3567
2690c     00 AE 0E F2 | 	cmp	local05, #0 wz
26910     00 7A 06 A6 |  if_e	mov	result1, #0
26914     8C 00 90 AD |  if_e	jmp	#LR__3567
26918     4C A7 5A F2 | 	cmps	local01, arg04 wcz
2691c     4C A7 02 16 |  if_a	mov	local01, arg04
26920     01 A6 56 F2 | 	cmps	local01, #1 wc
26924     01 A6 06 C6 |  if_b	mov	local01, #1
26928     55 B1 C2 FA | 	rdbyte	local06, local03
2692c     01 AE 0E F2 | 	cmp	local05, #1 wz
26930     18 00 90 5D |  if_ne	jmp	#LR__3564
26934     54 93 02 F6 | 	mov	arg01, local02
26938     58 95 02 F6 | 	mov	arg02, local06
2693c     53 97 02 F6 | 	mov	arg03, local01
26940     01 98 06 F6 | 	mov	arg04, #1
26944     C4 36 B0 FD | 	call	#__system____ScanForChar
26948     58 00 90 FD | 	jmp	#LR__3567
2694c                 | LR__3564
2694c     57 B3 02 F6 | 	mov	local07, local05
26950     01 B2 86 F1 | 	sub	local07, #1
26954                 | LR__3565
26954     54 93 02 F6 | 	mov	arg01, local02
26958     58 95 02 F6 | 	mov	arg02, local06
2695c     59 97 02 F6 | 	mov	arg03, local07
26960     01 98 06 F6 | 	mov	arg04, #1
26964     A4 36 B0 FD | 	call	#__system____ScanForChar
26968     3D B3 0A F6 | 	mov	local07, result1 wz
2696c     30 00 90 AD |  if_e	jmp	#LR__3566
26970     57 97 02 F6 | 	mov	arg03, local05
26974     54 93 02 F6 | 	mov	arg01, local02
26978     59 95 02 F6 | 	mov	arg02, local07
2697c     F8 F9 BF FD | 	call	#__system__Mid_S
26980     3D 93 02 F6 | 	mov	arg01, result1
26984     55 95 02 F6 | 	mov	arg02, local03
26988     54 E0 BF FD | 	call	#__system___string_cmp
2698c     00 7A 0E F2 | 	cmp	result1, #0 wz
26990     59 7B 02 A6 |  if_e	mov	result1, local07
26994     0C 00 90 AD |  if_e	jmp	#LR__3567
26998     57 B3 82 F1 | 	sub	local07, local05
2699c     B4 FF 9F FD | 	jmp	#LR__3565
269a0                 | LR__3566
269a0     00 7A 06 F6 | 	mov	result1, #0
269a4                 | LR__3567
269a4     E7 F0 03 F6 | 	mov	ptra, fp
269a8     F2 00 A0 FD | 	call	#popregs_
269ac                 | __system__InstrRev_ret
269ac     2D 00 64 FD | 	ret
269b0                 | 
269b0                 | __system___remove
269b0     06 CA 05 F6 | 	mov	COUNT_, #6
269b4     E8 00 A0 FD | 	call	#pushregs_
269b8     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
269bc     84 A7 06 F1 | 	add	local01, #388
269c0     49 95 02 F6 | 	mov	arg02, arg01
269c4     53 93 02 F6 | 	mov	arg01, local01
269c8     00 96 06 F6 | 	mov	arg03, #0
269cc     34 E7 BF FD | 	call	#__system____getvfsforfile
269d0     3D A9 0A F6 | 	mov	local02, result1 wz
269d4     10 00 90 AD |  if_e	jmp	#LR__3570
269d8     20 A8 06 F1 | 	add	local02, #32
269dc     54 93 0A FB | 	rdlong	arg01, local02 wz
269e0     20 A8 86 F1 | 	sub	local02, #32
269e4     14 00 90 5D |  if_ne	jmp	#LR__3571
269e8                 | LR__3570
269e8     20 68 06 F1 | 	add	ptr___system__dat__, #32
269ec     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
269f0     20 68 86 F1 | 	sub	ptr___system__dat__, #32
269f4     01 7A 66 F6 | 	neg	result1, #1
269f8     A8 00 90 FD | 	jmp	#LR__3574
269fc                 | LR__3571
269fc     40 A8 06 F1 | 	add	local02, #64
26a00     54 AB 02 FB | 	rdlong	local03, local02
26a04     55 AD 02 F6 | 	mov	local04, local03
26a08     40 A8 86 F1 | 	sub	local02, #64
26a0c     13 AC 46 F7 | 	zerox	local04, #19
26a10     14 AA 46 F0 | 	shr	local03, #20
26a14     02 AA 66 F0 | 	shl	local03, #2
26a18     2D AB 02 F1 | 	add	local03, __methods__
26a1c     55 AB 02 FB | 	rdlong	local03, local03
26a20     53 93 02 F6 | 	mov	arg01, local01
26a24     32 AF 02 F6 | 	mov	local05, objptr
26a28     56 65 02 F6 | 	mov	objptr, local04
26a2c     2D AA 62 FD | 	call	local03
26a30     57 65 02 F6 | 	mov	objptr, local05
26a34     3D B1 02 F6 | 	mov	local06, result1
26a38     FF FF 7F FF 
26a3c     F2 B1 0E F2 | 	cmp	local06, ##-14 wz
26a40     38 00 90 5D |  if_ne	jmp	#LR__3572
26a44     3C A8 06 F1 | 	add	local02, #60
26a48     54 B1 02 FB | 	rdlong	local06, local02
26a4c     58 AB 02 F6 | 	mov	local03, local06
26a50     13 B0 46 F7 | 	zerox	local06, #19
26a54     14 AA 46 F0 | 	shr	local03, #20
26a58     02 AA 66 F0 | 	shl	local03, #2
26a5c     2D AB 02 F1 | 	add	local03, __methods__
26a60     55 AB 02 FB | 	rdlong	local03, local03
26a64     53 93 02 F6 | 	mov	arg01, local01
26a68     32 AF 02 F6 | 	mov	local05, objptr
26a6c     58 65 02 F6 | 	mov	objptr, local06
26a70     2D AA 62 FD | 	call	local03
26a74     57 65 02 F6 | 	mov	objptr, local05
26a78     3D B1 02 F6 | 	mov	local06, result1
26a7c                 | LR__3572
26a7c     00 B0 0E F2 | 	cmp	local06, #0 wz
26a80     1C 00 90 AD |  if_e	jmp	#LR__3573
26a84     58 93 6A F6 | 	neg	arg01, local06 wz
26a88     20 68 06 F1 | 	add	ptr___system__dat__, #32
26a8c     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
26a90     20 68 86 F1 | 	sub	ptr___system__dat__, #32
26a94     01 7A 66 56 |  if_ne	neg	result1, #1
26a98     00 7A 06 A6 |  if_e	mov	result1, #0
26a9c     04 00 90 FD | 	jmp	#LR__3574
26aa0                 | LR__3573
26aa0     00 7A 06 F6 | 	mov	result1, #0
26aa4                 | LR__3574
26aa4     E7 F0 03 F6 | 	mov	ptra, fp
26aa8     F2 00 A0 FD | 	call	#popregs_
26aac                 | __system___remove_ret
26aac     2D 00 64 FD | 	ret
26ab0                 | 
26ab0                 | __system___mkdir
26ab0     05 CA 05 F6 | 	mov	COUNT_, #5
26ab4     E8 00 A0 FD | 	call	#pushregs_
26ab8     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
26abc     84 A7 06 F1 | 	add	local01, #388
26ac0     49 95 02 F6 | 	mov	arg02, arg01
26ac4     53 93 02 F6 | 	mov	arg01, local01
26ac8     00 96 06 F6 | 	mov	arg03, #0
26acc     34 E6 BF FD | 	call	#__system____getvfsforfile
26ad0     3D A9 0A F6 | 	mov	local02, result1 wz
26ad4     10 00 90 AD |  if_e	jmp	#LR__3580
26ad8     20 A8 06 F1 | 	add	local02, #32
26adc     54 95 0A FB | 	rdlong	arg02, local02 wz
26ae0     20 A8 86 F1 | 	sub	local02, #32
26ae4     14 00 90 5D |  if_ne	jmp	#LR__3581
26ae8                 | LR__3580
26ae8     20 68 06 F1 | 	add	ptr___system__dat__, #32
26aec     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
26af0     20 68 86 F1 | 	sub	ptr___system__dat__, #32
26af4     01 7A 66 F6 | 	neg	result1, #1
26af8     60 00 90 FD | 	jmp	#LR__3583
26afc                 | LR__3581
26afc     38 A8 06 F1 | 	add	local02, #56
26b00     54 AB 02 FB | 	rdlong	local03, local02
26b04     55 AD 02 F6 | 	mov	local04, local03
26b08     13 AA 46 F7 | 	zerox	local03, #19
26b0c     14 AC 46 F0 | 	shr	local04, #20
26b10     02 AC 66 F0 | 	shl	local04, #2
26b14     2D AD 02 F1 | 	add	local04, __methods__
26b18     56 AD 02 FB | 	rdlong	local04, local04
26b1c     53 93 02 F6 | 	mov	arg01, local01
26b20     FF 95 06 F6 | 	mov	arg02, #511
26b24     32 AF 02 F6 | 	mov	local05, objptr
26b28     55 65 02 F6 | 	mov	objptr, local03
26b2c     2D AC 62 FD | 	call	local04
26b30     57 65 02 F6 | 	mov	objptr, local05
26b34     3D 93 0A F6 | 	mov	arg01, result1 wz
26b38     1C 00 90 AD |  if_e	jmp	#LR__3582
26b3c     49 93 6A F6 | 	neg	arg01, arg01 wz
26b40     20 68 06 F1 | 	add	ptr___system__dat__, #32
26b44     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
26b48     20 68 86 F1 | 	sub	ptr___system__dat__, #32
26b4c     01 7A 66 56 |  if_ne	neg	result1, #1
26b50     00 7A 06 A6 |  if_e	mov	result1, #0
26b54     04 00 90 FD | 	jmp	#LR__3583
26b58                 | LR__3582
26b58     00 7A 06 F6 | 	mov	result1, #0
26b5c                 | LR__3583
26b5c     E7 F0 03 F6 | 	mov	ptra, fp
26b60     F2 00 A0 FD | 	call	#popregs_
26b64                 | __system___mkdir_ret
26b64     2D 00 64 FD | 	ret
26b68                 | 
26b68                 | __system___strerror
26b68     00 92 56 F2 | 	cmps	arg01, #0 wc
26b6c     08 00 90 CD |  if_b	jmp	#LR__3590
26b70     1A 92 56 F2 | 	cmps	arg01, #26 wc
26b74     04 00 90 CD |  if_b	jmp	#LR__3591
26b78                 | LR__3590
26b78     19 92 06 F6 | 	mov	arg01, #25
26b7c                 | LR__3591
26b7c     02 92 66 F0 | 	shl	arg01, #2
26b80     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
26b84     01 00 00 FF 
26b88     E0 7A 06 F1 | 	add	result1, ##736
26b8c     3D 93 02 F1 | 	add	arg01, result1
26b90     49 7B 02 FB | 	rdlong	result1, arg01
26b94                 | __system___strerror_ret
26b94     2D 00 64 FD | 	ret
26b98                 | 
26b98                 | __system___int64_shl
26b98     20 96 CE F7 | 	test	arg03, #32 wz
26b9c     49 95 02 56 |  if_ne	mov	arg02, arg01
26ba0     00 92 06 56 |  if_ne	mov	arg01, #0
26ba4     1F 96 CE F7 | 	test	arg03, #31 wz
26ba8     18 00 90 AD |  if_e	jmp	#LR__3600
26bac     4B 95 62 F0 | 	shl	arg02, arg03
26bb0     49 7B 02 F6 | 	mov	result1, arg01
26bb4     4B 7D 62 F6 | 	neg	result2, arg03
26bb8     3E 7B 42 F0 | 	shr	result1, result2
26bbc     3D 95 42 F5 | 	or	arg02, result1
26bc0     4B 93 62 F0 | 	shl	arg01, arg03
26bc4                 | LR__3600
26bc4     4A 7D 02 F6 | 	mov	result2, arg02
26bc8     49 7B 02 F6 | 	mov	result1, arg01
26bcc                 | __system___int64_shl_ret
26bcc     2D 00 64 FD | 	ret
26bd0                 | 
26bd0                 | __system___int64_sar
26bd0     20 96 CE F7 | 	test	arg03, #32 wz
26bd4     4A 93 02 56 |  if_ne	mov	arg01, arg02
26bd8     1F 94 C6 50 |  if_ne	sar	arg02, #31
26bdc     1F 96 CE F7 | 	test	arg03, #31 wz
26be0     18 00 90 AD |  if_e	jmp	#LR__3610
26be4     4B 93 42 F0 | 	shr	arg01, arg03
26be8     4A 7B 02 F6 | 	mov	result1, arg02
26bec     4B 7D 62 F6 | 	neg	result2, arg03
26bf0     3E 7B 62 F0 | 	shl	result1, result2
26bf4     3D 93 42 F5 | 	or	arg01, result1
26bf8     4B 95 C2 F0 | 	sar	arg02, arg03
26bfc                 | LR__3610
26bfc     4A 7D 02 F6 | 	mov	result2, arg02
26c00     49 7B 02 F6 | 	mov	result1, arg01
26c04                 | __system___int64_sar_ret
26c04     2D 00 64 FD | 	ret
26c08                 | 
26c08                 | __system___usepins
26c08     14 68 06 F1 | 	add	ptr___system__dat__, #20
26c0c     34 81 02 FB | 	rdlong	_var01, ptr___system__dat__
26c10     14 68 86 F1 | 	sub	ptr___system__dat__, #20
26c14     40 93 CA F7 | 	test	arg01, _var01 wz
26c18     18 68 06 A1 |  if_e	add	ptr___system__dat__, #24
26c1c     34 83 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
26c20     18 68 86 A1 |  if_e	sub	ptr___system__dat__, #24
26c24     41 95 CA A7 |  if_e	test	arg02, _var02 wz
26c28     00 7A 06 56 |  if_ne	mov	result1, #0
26c2c     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
26c30     14 68 06 F1 | 	add	ptr___system__dat__, #20
26c34     34 83 02 FB | 	rdlong	_var02, ptr___system__dat__
26c38     49 83 42 F5 | 	or	_var02, arg01
26c3c     34 83 62 FC | 	wrlong	_var02, ptr___system__dat__
26c40     04 68 06 F1 | 	add	ptr___system__dat__, #4
26c44     34 83 02 FB | 	rdlong	_var02, ptr___system__dat__
26c48     4A 83 42 F5 | 	or	_var02, arg02
26c4c     34 83 62 FC | 	wrlong	_var02, ptr___system__dat__
26c50     18 68 86 F1 | 	sub	ptr___system__dat__, #24
26c54     01 7A 66 F6 | 	neg	result1, #1
26c58                 | __system___usepins_ret
26c58     2D 00 64 FD | 	ret
26c5c                 | 
26c5c                 | __system___freepins
26c5c     14 68 06 F1 | 	add	ptr___system__dat__, #20
26c60     34 81 02 FB | 	rdlong	_var01, ptr___system__dat__
26c64     49 81 22 F5 | 	andn	_var01, arg01
26c68     34 81 62 FC | 	wrlong	_var01, ptr___system__dat__
26c6c     04 68 06 F1 | 	add	ptr___system__dat__, #4
26c70     34 81 02 FB | 	rdlong	_var01, ptr___system__dat__
26c74     4A 81 22 F5 | 	andn	_var01, arg02
26c78     34 81 62 FC | 	wrlong	_var01, ptr___system__dat__
26c7c     18 68 86 F1 | 	sub	ptr___system__dat__, #24
26c80                 | __system___freepins_ret
26c80     2D 00 64 FD | 	ret
26c84                 | 
26c84                 | __system___float_fromuns
26c84     49 97 0A F6 | 	mov	arg03, arg01 wz
26c88     4B 7B 02 A6 |  if_e	mov	result1, arg03
26c8c     24 00 90 AD |  if_e	jmp	#LR__3620
26c90     4B 95 92 F7 | 	encod	arg02, arg03 wc
26c94     01 94 06 C1 |  if_b	add	arg02, #1
26c98     01 94 86 F1 | 	sub	arg02, #1
26c9c     1F 92 06 F6 | 	mov	arg01, #31
26ca0     4A 93 82 F1 | 	sub	arg01, arg02
26ca4     49 97 62 F0 | 	shl	arg03, arg01
26ca8     02 96 46 F0 | 	shr	arg03, #2
26cac     00 92 06 F6 | 	mov	arg01, #0
26cb0     58 09 B0 FD | 	call	#__system___float_Pack
26cb4                 | LR__3620
26cb4                 | __system___float_fromuns_ret
26cb4     2D 00 64 FD | 	ret
26cb8                 | 
26cb8                 | __system___float_add
26cb8     0F CA 05 F6 | 	mov	COUNT_, #15
26cbc     E8 00 A0 FD | 	call	#pushregs_
26cc0     49 A7 02 F6 | 	mov	local01, arg01
26cc4     4A A9 02 F6 | 	mov	local02, arg02
26cc8     00 AA 06 F6 | 	mov	local03, #0
26ccc     53 AD 02 F6 | 	mov	local04, local01
26cd0     56 AF 02 F6 | 	mov	local05, local04
26cd4     16 AE 46 F7 | 	zerox	local05, #22
26cd8     56 B1 02 F6 | 	mov	local06, local04
26cdc     01 B0 66 F0 | 	shl	local06, #1
26ce0     18 B0 46 F0 | 	shr	local06, #24
26ce4     1F AC 46 F0 | 	shr	local04, #31
26ce8     54 93 02 F6 | 	mov	arg01, local02
26cec     49 7B 02 F6 | 	mov	result1, arg01
26cf0     3D B3 02 F6 | 	mov	local07, result1
26cf4     59 B5 02 F6 | 	mov	local08, local07
26cf8     16 B4 46 F7 | 	zerox	local08, #22
26cfc     59 B7 02 F6 | 	mov	local09, local07
26d00     01 B6 66 F0 | 	shl	local09, #1
26d04     18 B6 46 F0 | 	shr	local09, #24
26d08     5B B9 02 F6 | 	mov	local10, local09
26d0c     1F B2 46 F0 | 	shr	local07, #31
26d10     00 BA 06 F6 | 	mov	local11, #0
26d14     00 BC 06 F6 | 	mov	local12, #0
26d18     5C B1 12 F2 | 	cmp	local06, local10 wc
26d1c     5C B1 0A 32 |  if_ae	cmp	local06, local10 wz
26d20     2C 00 90 1D |  if_a	jmp	#LR__3630
26d24     5A AF 12 32 |  if_ae	cmp	local05, local08 wc
26d28     24 00 90 3D |  if_ae	jmp	#LR__3630
26d2c     57 BF 02 F6 | 	mov	local13, local05
26d30     5A AF 02 F6 | 	mov	local05, local08
26d34     5F B5 02 F6 | 	mov	local08, local13
26d38     58 BF 02 F6 | 	mov	local13, local06
26d3c     5C B1 02 F6 | 	mov	local06, local10
26d40     5F B9 02 F6 | 	mov	local10, local13
26d44     56 BF 02 F6 | 	mov	local13, local04
26d48     59 AD 02 F6 | 	mov	local04, local07
26d4c     5F B3 02 F6 | 	mov	local07, local13
26d50                 | LR__3630
26d50     FF B0 0E F2 | 	cmp	local06, #255 wz
26d54     70 01 90 AD |  if_e	jmp	#LR__3645
26d58     00 B0 0E F2 | 	cmp	local06, #0 wz
26d5c     AC 01 90 AD |  if_e	jmp	#LR__3647
26d60     17 AE 26 F4 | 	bith	local05, #23
26d64                 | LR__3631
26d64     00 B8 0E F2 | 	cmp	local10, #0 wz
26d68     F0 01 90 AD |  if_e	jmp	#LR__3651
26d6c     17 B4 26 F4 | 	bith	local08, #23
26d70                 | LR__3632
26d70     7F B0 86 F1 | 	sub	local06, #127
26d74     7F B8 86 F1 | 	sub	local10, #127
26d78     58 C1 02 F6 | 	mov	local14, local06
26d7c     5C C1 82 F1 | 	sub	local14, local10
26d80     D7 14 48 FB | 	callpa	#(@LR__3634-@LR__3633)>>2,fcache_load_ptr_
26d84                 | LR__3633
26d84     20 C0 56 F2 | 	cmps	local14, #32 wc
26d88     20 00 90 CD |  if_b	jmp	#LR__3635
26d8c     5A B7 02 F6 | 	mov	local09, local08
26d90     00 BA 0E F2 | 	cmp	local11, #0 wz
26d94     6F BA 62 FD | 	wrnz	local11
26d98     5D B7 42 F5 | 	or	local09, local11
26d9c     5B BB 02 F6 | 	mov	local11, local09
26da0     00 B4 06 F6 | 	mov	local08, #0
26da4     20 C0 86 F1 | 	sub	local14, #32
26da8     D8 FF 9F FD | 	jmp	#LR__3633
26dac                 | LR__3634
26dac                 | LR__3635
26dac     00 C0 0E F2 | 	cmp	local14, #0 wz
26db0     38 00 90 AD |  if_e	jmp	#LR__3636
26db4     5A BF 02 F6 | 	mov	local13, local08
26db8     20 B8 06 F6 | 	mov	local10, #32
26dbc     60 B9 82 F1 | 	sub	local10, local14
26dc0     5C BF 62 F0 | 	shl	local13, local10
26dc4     5D B9 02 F6 | 	mov	local10, local11
26dc8     20 B6 06 F6 | 	mov	local09, #32
26dcc     60 B7 82 F1 | 	sub	local09, local14
26dd0     5B B9 6A F0 | 	shl	local10, local09 wz
26dd4     60 BB 42 F0 | 	shr	local11, local14
26dd8     60 B5 42 F0 | 	shr	local08, local14
26ddc     5F BB 42 F5 | 	or	local11, local13
26de0     00 C2 06 F6 | 	mov	local15, #0
26de4     01 C2 06 56 |  if_ne	mov	local15, #1
26de8     61 BB 42 F5 | 	or	local11, local15
26dec                 | LR__3636
26dec     56 C3 02 F6 | 	mov	local15, local04
26df0     59 C3 62 F5 | 	xor	local15, local07
26df4     01 C2 CE F7 | 	test	local15, #1 wz
26df8     18 00 90 AD |  if_e	jmp	#LR__3637
26dfc     5A B5 22 F6 | 	not	local08, local08
26e00     5D BB 22 F6 | 	not	local11, local11
26e04     01 BA 0E F1 | 	add	local11, #1 wz
26e08     00 C2 06 F6 | 	mov	local15, #0
26e0c     01 C2 06 A6 |  if_e	mov	local15, #1
26e10     61 B5 02 F1 | 	add	local08, local15
26e14                 | LR__3637
26e14     5D BD 12 F1 | 	add	local12, local11 wc
26e18     5A AF 22 F1 | 	addx	local05, local08
26e1c     00 AE 56 F2 | 	cmps	local05, #0 wc
26e20     1C 00 90 3D |  if_ae	jmp	#LR__3638
26e24     01 AC 66 F5 | 	xor	local04, #1
26e28     57 AF 22 F6 | 	not	local05, local05
26e2c     5E BD 22 F6 | 	not	local12, local12
26e30     01 BC 0E F1 | 	add	local12, #1 wz
26e34     00 C2 06 F6 | 	mov	local15, #0
26e38     01 C2 06 A6 |  if_e	mov	local15, #1
26e3c     61 AF 02 F1 | 	add	local05, local15
26e40                 | LR__3638
26e40     00 80 00 FF 
26e44     00 AE 16 F2 | 	cmp	local05, ##16777216 wc
26e48     28 00 90 CD |  if_b	jmp	#LR__3639
26e4c     01 B0 06 F1 | 	add	local06, #1
26e50     5E C1 02 F6 | 	mov	local14, local12
26e54     01 C0 06 F5 | 	and	local14, #1
26e58     01 BC 46 F0 | 	shr	local12, #1
26e5c     57 C3 02 F6 | 	mov	local15, local05
26e60     1F C2 66 F0 | 	shl	local15, #31
26e64     61 BD 42 F5 | 	or	local12, local15
26e68     60 BD 42 F5 | 	or	local12, local14
26e6c     01 AE 46 F0 | 	shr	local05, #1
26e70     3C 00 90 FD | 	jmp	#LR__3644
26e74                 | LR__3639
26e74     00 40 00 FF 
26e78     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
26e7c     30 00 90 3D |  if_ae	jmp	#LR__3643
26e80     00 AE 0E F2 | 	cmp	local05, #0 wz
26e84     00 BC 0E A2 |  if_e	cmp	local12, #0 wz
26e88     08 AC 46 A5 |  if_e	or	local04, #8
26e8c     01 AC 26 A5 |  if_e	andn	local04, #1
26e90     1C 00 90 AD |  if_e	jmp	#LR__3642
26e94                 | LR__3640
26e94     00 40 00 FF 
26e98     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
26e9c     10 00 90 3D |  if_ae	jmp	#LR__3641
26ea0     5E BD 12 F1 | 	add	local12, local12 wc
26ea4     57 AF 22 F1 | 	addx	local05, local05
26ea8     01 B0 86 F1 | 	sub	local06, #1
26eac     E4 FF 9F FD | 	jmp	#LR__3640
26eb0                 | LR__3641
26eb0                 | LR__3642
26eb0                 | LR__3643
26eb0                 | LR__3644
26eb0     57 93 02 F6 | 	mov	arg01, local05
26eb4     5E 95 02 F6 | 	mov	arg02, local12
26eb8     58 97 02 F6 | 	mov	arg03, local06
26ebc     56 99 02 F6 | 	mov	arg04, local04
26ec0     50 34 B0 FD | 	call	#__system__pack_0698
26ec4     DC 00 90 FD | 	jmp	#LR__3655
26ec8                 | LR__3645
26ec8     FF B8 0E F2 | 	cmp	local10, #255 wz
26ecc     10 00 90 5D |  if_ne	jmp	#LR__3646
26ed0     56 B3 0A F2 | 	cmp	local07, local04 wz
26ed4     00 F8 3F 5F 
26ed8     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
26edc     C4 00 90 5D |  if_ne	jmp	#LR__3655
26ee0                 | LR__3646
26ee0     00 AE 0E F2 | 	cmp	local05, #0 wz
26ee4     00 F8 3F 5F 
26ee8     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
26eec     B4 00 90 5D |  if_ne	jmp	#LR__3655
26ef0     5E 95 02 F6 | 	mov	arg02, local12
26ef4     58 97 02 F6 | 	mov	arg03, local06
26ef8     56 99 02 F6 | 	mov	arg04, local04
26efc     02 98 46 F5 | 	or	arg04, #2
26f00     57 93 02 F6 | 	mov	arg01, local05
26f04     0C 34 B0 FD | 	call	#__system__pack_0698
26f08     98 00 90 FD | 	jmp	#LR__3655
26f0c                 | LR__3647
26f0c     00 AE 0E F2 | 	cmp	local05, #0 wz
26f10     28 00 90 AD |  if_e	jmp	#LR__3650
26f14     01 AE 66 F0 | 	shl	local05, #1
26f18     D7 0E 48 FB | 	callpa	#(@LR__3649-@LR__3648)>>2,fcache_load_ptr_
26f1c                 | LR__3648
26f1c     00 40 00 FF 
26f20     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
26f24     58 C3 02 C6 |  if_b	mov	local15, local06
26f28     01 C2 86 C1 |  if_b	sub	local15, #1
26f2c     61 B1 02 C6 |  if_b	mov	local06, local15
26f30     01 AE 66 C0 |  if_b	shl	local05, #1
26f34     E4 FF 9F CD |  if_b	jmp	#LR__3648
26f38                 | LR__3649
26f38     28 FE 9F FD | 	jmp	#LR__3631
26f3c                 | LR__3650
26f3c     59 AD 02 F5 | 	and	local04, local07
26f40     56 99 02 F6 | 	mov	arg04, local04
26f44     08 98 46 F5 | 	or	arg04, #8
26f48     00 92 06 F6 | 	mov	arg01, #0
26f4c     00 94 06 F6 | 	mov	arg02, #0
26f50     00 96 06 F6 | 	mov	arg03, #0
26f54     BC 33 B0 FD | 	call	#__system__pack_0698
26f58     48 00 90 FD | 	jmp	#LR__3655
26f5c                 | LR__3651
26f5c     00 B4 0E F2 | 	cmp	local08, #0 wz
26f60     28 00 90 AD |  if_e	jmp	#LR__3654
26f64     01 B4 66 F0 | 	shl	local08, #1
26f68     D7 0E 48 FB | 	callpa	#(@LR__3653-@LR__3652)>>2,fcache_load_ptr_
26f6c                 | LR__3652
26f6c     00 40 00 FF 
26f70     00 B4 16 F2 | 	cmp	local08, ##8388608 wc
26f74     5C C3 02 C6 |  if_b	mov	local15, local10
26f78     01 C2 86 C1 |  if_b	sub	local15, #1
26f7c     61 B9 02 C6 |  if_b	mov	local10, local15
26f80     01 B4 66 C0 |  if_b	shl	local08, #1
26f84     E4 FF 9F CD |  if_b	jmp	#LR__3652
26f88                 | LR__3653
26f88     E4 FD 9F FD | 	jmp	#LR__3632
26f8c                 | LR__3654
26f8c     7F B0 86 F1 | 	sub	local06, #127
26f90     57 93 02 F6 | 	mov	arg01, local05
26f94     5E 95 02 F6 | 	mov	arg02, local12
26f98     58 97 02 F6 | 	mov	arg03, local06
26f9c     56 99 02 F6 | 	mov	arg04, local04
26fa0     70 33 B0 FD | 	call	#__system__pack_0698
26fa4                 | LR__3655
26fa4     E7 F0 03 F6 | 	mov	ptra, fp
26fa8     F2 00 A0 FD | 	call	#popregs_
26fac                 | __system___float_add_ret
26fac     2D 00 64 FD | 	ret
26fb0                 | 
26fb0                 | __system___float_sqrt
26fb0     04 CA 05 F6 | 	mov	COUNT_, #4
26fb4     E8 00 A0 FD | 	call	#pushregs_
26fb8     49 A7 02 F6 | 	mov	local01, arg01
26fbc     49 7B 02 F6 | 	mov	result1, arg01
26fc0     3D A9 02 F6 | 	mov	local02, result1
26fc4     54 AB 02 F6 | 	mov	local03, local02
26fc8     16 AA 46 F7 | 	zerox	local03, #22
26fcc     54 AD 02 F6 | 	mov	local04, local02
26fd0     01 AC 66 F0 | 	shl	local04, #1
26fd4     18 AC 4E F0 | 	shr	local04, #24 wz
26fd8     1F A8 46 F0 | 	shr	local02, #31
26fdc     70 00 90 AD |  if_e	jmp	#LR__3661
26fe0     17 AA 26 F4 | 	bith	local03, #23
26fe4                 | LR__3660
26fe4     00 A8 0E F2 | 	cmp	local02, #0 wz
26fe8     00 F8 3F 5F 
26fec     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
26ff0     88 00 90 5D |  if_ne	jmp	#LR__3664
26ff4     FF AC 0E F2 | 	cmp	local04, #255 wz
26ff8     53 7B 02 A6 |  if_e	mov	result1, local01
26ffc     7C 00 90 AD |  if_e	jmp	#LR__3664
27000     7F AC 86 F1 | 	sub	local04, #127
27004     01 AC CE F7 | 	test	local04, #1 wz
27008     01 AA 66 50 |  if_ne	shl	local03, #1
2700c     05 AA 66 F0 | 	shl	local03, #5
27010     55 01 38 FD | 	qsqrt	#0, local03
27014     01 AC 86 51 |  if_ne	sub	local04, #1
27018     56 AD 52 F6 | 	abs	local04, local04 wc
2701c     01 AC 46 F0 | 	shr	local04, #1
27020     56 97 82 F6 | 	negc	arg03, local04
27024     54 99 02 F6 | 	mov	arg04, local02
27028     18 92 62 FD | 	getqx	arg01
2702c     49 95 02 F6 | 	mov	arg02, arg01
27030     19 94 66 F0 | 	shl	arg02, #25
27034     07 92 46 F0 | 	shr	arg01, #7
27038     00 80 00 FF 
2703c     01 92 16 F2 | 	cmp	arg01, ##16777217 wc
27040     01 96 06 31 |  if_ae	add	arg03, #1
27044     01 92 46 30 |  if_ae	shr	arg01, #1
27048     C8 32 B0 FD | 	call	#__system__pack_0698
2704c     2C 00 90 FD | 	jmp	#LR__3664
27050                 | LR__3661
27050     00 AA 0E F2 | 	cmp	local03, #0 wz
27054     53 7B 02 A6 |  if_e	mov	result1, local01
27058     20 00 90 AD |  if_e	jmp	#LR__3664
2705c     01 AA 66 F0 | 	shl	local03, #1
27060     D7 0A 48 FB | 	callpa	#(@LR__3663-@LR__3662)>>2,fcache_load_ptr_
27064                 | LR__3662
27064     00 40 00 FF 
27068     00 AA 16 F2 | 	cmp	local03, ##8388608 wc
2706c     01 AC 86 C1 |  if_b	sub	local04, #1
27070     01 AA 66 C0 |  if_b	shl	local03, #1
27074     EC FF 9F CD |  if_b	jmp	#LR__3662
27078                 | LR__3663
27078     68 FF 9F FD | 	jmp	#LR__3660
2707c                 | LR__3664
2707c     E7 F0 03 F6 | 	mov	ptra, fp
27080     F2 00 A0 FD | 	call	#popregs_
27084                 | __system___float_sqrt_ret
27084     2D 00 64 FD | 	ret
27088                 | 
27088                 | __system___float_mul
27088     0B CA 05 F6 | 	mov	COUNT_, #11
2708c     E8 00 A0 FD | 	call	#pushregs_
27090     49 A7 02 F6 | 	mov	local01, arg01
27094     4A A9 02 F6 | 	mov	local02, arg02
27098     53 AB 02 F6 | 	mov	local03, local01
2709c     55 AD 02 F6 | 	mov	local04, local03
270a0     16 AC 46 F7 | 	zerox	local04, #22
270a4     55 AF 02 F6 | 	mov	local05, local03
270a8     01 AE 66 F0 | 	shl	local05, #1
270ac     18 AE 46 F0 | 	shr	local05, #24
270b0     1F AA 46 F0 | 	shr	local03, #31
270b4     54 7B 02 F6 | 	mov	result1, local02
270b8     3D B1 02 F6 | 	mov	local06, result1
270bc     58 B3 02 F6 | 	mov	local07, local06
270c0     16 B2 46 F7 | 	zerox	local07, #22
270c4     58 B5 02 F6 | 	mov	local08, local06
270c8     01 B4 66 F0 | 	shl	local08, #1
270cc     18 B4 46 F0 | 	shr	local08, #24
270d0     1F B0 46 F0 | 	shr	local06, #31
270d4     58 AB 62 F5 | 	xor	local03, local06
270d8     FF AE 0E F2 | 	cmp	local05, #255 wz
270dc     90 00 90 AD |  if_e	jmp	#LR__3673
270e0     FF B4 0E F2 | 	cmp	local08, #255 wz
270e4     D8 00 90 AD |  if_e	jmp	#LR__3675
270e8     00 AE 0E F2 | 	cmp	local05, #0 wz
270ec     0C 01 90 AD |  if_e	jmp	#LR__3676
270f0     17 AC 26 F4 | 	bith	local04, #23
270f4                 | LR__3670
270f4     00 B4 0E F2 | 	cmp	local08, #0 wz
270f8     44 01 90 AD |  if_e	jmp	#LR__3680
270fc     17 B2 26 F4 | 	bith	local07, #23
27100                 | LR__3671
27100     56 A9 02 F6 | 	mov	local02, local04
27104     04 A8 66 F0 | 	shl	local02, #4
27108     59 B1 02 F6 | 	mov	local06, local07
2710c     05 B0 66 F0 | 	shl	local06, #5
27110     58 A9 02 FD | 	qmul	local02, local06
27114     5A AF 02 F1 | 	add	local05, local08
27118     FE AE 86 F1 | 	sub	local05, #254
2711c     57 B7 02 F6 | 	mov	local09, local05
27120     04 AC 66 F0 | 	shl	local04, #4
27124     05 B2 66 F0 | 	shl	local07, #5
27128     18 B8 62 FD | 	getqx	local10
2712c     59 AD 02 FD | 	qmul	local04, local07
27130     19 BA 62 FD | 	getqy	local11
27134     00 80 00 FF 
27138     00 BA 16 F2 | 	cmp	local11, ##16777216 wc
2713c     18 00 90 CD |  if_b	jmp	#LR__3672
27140     01 B6 06 F1 | 	add	local09, #1
27144     01 B8 46 F0 | 	shr	local10, #1
27148     5D B5 02 F6 | 	mov	local08, local11
2714c     1F B4 66 F0 | 	shl	local08, #31
27150     5A B9 42 F5 | 	or	local10, local08
27154     01 BA 46 F0 | 	shr	local11, #1
27158                 | LR__3672
27158     5D 93 02 F6 | 	mov	arg01, local11
2715c     5C 95 02 F6 | 	mov	arg02, local10
27160     5B 97 02 F6 | 	mov	arg03, local09
27164     55 99 02 F6 | 	mov	arg04, local03
27168     A8 31 B0 FD | 	call	#__system__pack_0698
2716c     10 01 90 FD | 	jmp	#LR__3684
27170                 | LR__3673
27170     00 AC 0E F2 | 	cmp	local04, #0 wz
27174     53 7B 02 56 |  if_ne	mov	result1, local01
27178     04 01 90 5D |  if_ne	jmp	#LR__3684
2717c     FF B4 56 F2 | 	cmps	local08, #255 wc
27180     00 B4 0E C2 |  if_b	cmp	local08, #0 wz
27184     00 B2 0E 82 |  if_c_and_z	cmp	local07, #0 wz
27188     18 00 90 4D |  if_c_and_nz	jmp	#LR__3674
2718c     00 F8 3F CF 
27190     00 7A 06 C6 |  if_b	mov	result1, ##2146435072
27194     E8 00 90 CD |  if_b	jmp	#LR__3684
27198     00 B2 0E F2 | 	cmp	local07, #0 wz
2719c     54 7B 02 56 |  if_ne	mov	result1, local02
271a0     DC 00 90 5D |  if_ne	jmp	#LR__3684
271a4                 | LR__3674
271a4     02 AA 46 F5 | 	or	local03, #2
271a8     00 92 06 F6 | 	mov	arg01, #0
271ac     00 94 06 F6 | 	mov	arg02, #0
271b0     57 97 02 F6 | 	mov	arg03, local05
271b4     55 99 02 F6 | 	mov	arg04, local03
271b8     58 31 B0 FD | 	call	#__system__pack_0698
271bc     C0 00 90 FD | 	jmp	#LR__3684
271c0                 | LR__3675
271c0     00 AE 0E F2 | 	cmp	local05, #0 wz
271c4     00 AC 0E A2 |  if_e	cmp	local04, #0 wz
271c8     00 F8 3F AF 
271cc     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
271d0     AC 00 90 AD |  if_e	jmp	#LR__3684
271d4     00 B2 0E F2 | 	cmp	local07, #0 wz
271d8     54 7B 02 56 |  if_ne	mov	result1, local02
271dc     A0 00 90 5D |  if_ne	jmp	#LR__3684
271e0     5A 97 02 F6 | 	mov	arg03, local08
271e4     55 99 02 F6 | 	mov	arg04, local03
271e8     02 98 46 F5 | 	or	arg04, #2
271ec     00 92 06 F6 | 	mov	arg01, #0
271f0     00 94 06 F6 | 	mov	arg02, #0
271f4     1C 31 B0 FD | 	call	#__system__pack_0698
271f8     84 00 90 FD | 	jmp	#LR__3684
271fc                 | LR__3676
271fc     00 AC 0E F2 | 	cmp	local04, #0 wz
27200     20 00 90 AD |  if_e	jmp	#LR__3679
27204     01 AC 66 F0 | 	shl	local04, #1
27208     D7 0A 48 FB | 	callpa	#(@LR__3678-@LR__3677)>>2,fcache_load_ptr_
2720c                 | LR__3677
2720c     00 40 00 FF 
27210     00 AC 16 F2 | 	cmp	local04, ##8388608 wc
27214     01 AE 86 C1 |  if_b	sub	local05, #1
27218     01 AC 66 C0 |  if_b	shl	local04, #1
2721c     EC FF 9F CD |  if_b	jmp	#LR__3677
27220                 | LR__3678
27220     D0 FE 9F FD | 	jmp	#LR__3670
27224                 | LR__3679
27224     08 AA 46 F5 | 	or	local03, #8
27228     00 92 06 F6 | 	mov	arg01, #0
2722c     00 94 06 F6 | 	mov	arg02, #0
27230     00 96 06 F6 | 	mov	arg03, #0
27234     55 99 02 F6 | 	mov	arg04, local03
27238     D8 30 B0 FD | 	call	#__system__pack_0698
2723c     40 00 90 FD | 	jmp	#LR__3684
27240                 | LR__3680
27240     00 B2 0E F2 | 	cmp	local07, #0 wz
27244     20 00 90 AD |  if_e	jmp	#LR__3683
27248     01 B2 66 F0 | 	shl	local07, #1
2724c     D7 0A 48 FB | 	callpa	#(@LR__3682-@LR__3681)>>2,fcache_load_ptr_
27250                 | LR__3681
27250     00 40 00 FF 
27254     00 B2 16 F2 | 	cmp	local07, ##8388608 wc
27258     01 B4 86 C1 |  if_b	sub	local08, #1
2725c     01 B2 66 C0 |  if_b	shl	local07, #1
27260     EC FF 9F CD |  if_b	jmp	#LR__3681
27264                 | LR__3682
27264     98 FE 9F FD | 	jmp	#LR__3671
27268                 | LR__3683
27268     08 AA 46 F5 | 	or	local03, #8
2726c     00 92 06 F6 | 	mov	arg01, #0
27270     00 94 06 F6 | 	mov	arg02, #0
27274     00 96 06 F6 | 	mov	arg03, #0
27278     55 99 02 F6 | 	mov	arg04, local03
2727c     94 30 B0 FD | 	call	#__system__pack_0698
27280                 | LR__3684
27280     E7 F0 03 F6 | 	mov	ptra, fp
27284     F2 00 A0 FD | 	call	#popregs_
27288                 | __system___float_mul_ret
27288     2D 00 64 FD | 	ret
2728c                 | 
2728c                 | __system___float_div
2728c     0E CA 05 F6 | 	mov	COUNT_, #14
27290     E8 00 A0 FD | 	call	#pushregs_
27294     49 AB 02 F6 | 	mov	local03, arg01
27298     4A AD 02 F6 | 	mov	local04, arg02
2729c     55 AF 02 F6 | 	mov	local05, local03
272a0     57 B1 02 F6 | 	mov	local06, local05
272a4     16 B0 46 F7 | 	zerox	local06, #22
272a8     57 B3 02 F6 | 	mov	local07, local05
272ac     01 B2 66 F0 | 	shl	local07, #1
272b0     18 B2 46 F0 | 	shr	local07, #24
272b4     1F AE 46 F0 | 	shr	local05, #31
272b8     56 7B 02 F6 | 	mov	result1, local04
272bc     3D B5 02 F6 | 	mov	local08, result1
272c0     5A B7 02 F6 | 	mov	local09, local08
272c4     16 B6 46 F7 | 	zerox	local09, #22
272c8     5A B9 02 F6 | 	mov	local10, local08
272cc     01 B8 66 F0 | 	shl	local10, #1
272d0     18 B8 46 F0 | 	shr	local10, #24
272d4     1F B4 46 F0 | 	shr	local08, #31
272d8     5A AF 62 F5 | 	xor	local05, local08
272dc     FF B2 0E F2 | 	cmp	local07, #255 wz
272e0     D4 00 90 AD |  if_e	jmp	#LR__3695
272e4     FF B8 0E F2 | 	cmp	local10, #255 wz
272e8     04 01 90 AD |  if_e	jmp	#LR__3696
272ec     00 B2 0E F2 | 	cmp	local07, #0 wz
272f0     24 01 90 AD |  if_e	jmp	#LR__3697
272f4     17 B0 26 F4 | 	bith	local06, #23
272f8                 | LR__3690
272f8     00 B8 0E F2 | 	cmp	local10, #0 wz
272fc     70 01 90 AD |  if_e	jmp	#LR__3701
27300     17 B6 26 F4 | 	bith	local09, #23
27304                 | LR__3691
27304     5C B3 82 F1 | 	sub	local07, local10
27308     59 BB 02 F6 | 	mov	local11, local07
2730c     58 93 02 F6 | 	mov	arg01, local06
27310     02 92 46 F0 | 	shr	arg01, #2
27314     1E B0 66 F0 | 	shl	local06, #30
27318     58 95 02 F6 | 	mov	arg02, local06
2731c     5B 97 02 F6 | 	mov	arg03, local09
27320     28 92 62 FD | 	setq	arg01
27324     4B 95 12 FD | 	qdiv	arg02, arg03
27328     00 BC 06 F6 | 	mov	local12, #0
2732c     18 A6 62 FD | 	getqx	local01
27330     19 7C 62 FD | 	getqy	result2
27334     3E A9 02 F6 | 	mov	local02, result2
27338     53 BF 02 F6 | 	mov	local13, local01
2733c     00 A8 4E F2 | 	cmps	local02, #0 wz
27340     5F C1 02 F6 | 	mov	local14, local13
27344     19 C0 66 F0 | 	shl	local14, #25
27348     01 BC 06 56 |  if_ne	mov	local12, #1
2734c     5E C1 42 F5 | 	or	local14, local12
27350     07 BE 46 F0 | 	shr	local13, #7
27354     00 80 00 FF 
27358     00 BE 16 F2 | 	cmp	local13, ##16777216 wc
2735c     1C 00 90 CD |  if_b	jmp	#LR__3692
27360     01 BA 06 F1 | 	add	local11, #1
27364     01 C0 46 F0 | 	shr	local14, #1
27368     5F BD 02 F6 | 	mov	local12, local13
2736c     1F BC 66 F0 | 	shl	local12, #31
27370     5E C1 42 F5 | 	or	local14, local12
27374     01 BE 46 F0 | 	shr	local13, #1
27378     24 00 90 FD | 	jmp	#LR__3694
2737c                 | LR__3692
2737c     00 40 00 FF 
27380     00 BE 16 F2 | 	cmp	local13, ##8388608 wc
27384     18 00 90 3D |  if_ae	jmp	#LR__3693
27388     01 BA 86 F1 | 	sub	local11, #1
2738c     01 BE 66 F0 | 	shl	local13, #1
27390     60 BD 02 F6 | 	mov	local12, local14
27394     1F BC 46 F0 | 	shr	local12, #31
27398     5E BF 42 F5 | 	or	local13, local12
2739c     01 C0 66 F0 | 	shl	local14, #1
273a0                 | LR__3693
273a0                 | LR__3694
273a0     5F 93 02 F6 | 	mov	arg01, local13
273a4     60 95 02 F6 | 	mov	arg02, local14
273a8     5D 97 02 F6 | 	mov	arg03, local11
273ac     57 99 02 F6 | 	mov	arg04, local05
273b0     60 2F B0 FD | 	call	#__system__pack_0698
273b4     F8 00 90 FD | 	jmp	#LR__3705
273b8                 | LR__3695
273b8     00 B0 0E F2 | 	cmp	local06, #0 wz
273bc     55 7B 02 56 |  if_ne	mov	result1, local03
273c0     EC 00 90 5D |  if_ne	jmp	#LR__3705
273c4     FF B8 0E F2 | 	cmp	local10, #255 wz
273c8     00 F8 3F AF 
273cc     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
273d0     DC 00 90 AD |  if_e	jmp	#LR__3705
273d4     02 AE 46 F5 | 	or	local05, #2
273d8     00 92 06 F6 | 	mov	arg01, #0
273dc     00 94 06 F6 | 	mov	arg02, #0
273e0     59 97 02 F6 | 	mov	arg03, local07
273e4     57 99 02 F6 | 	mov	arg04, local05
273e8     28 2F B0 FD | 	call	#__system__pack_0698
273ec     C0 00 90 FD | 	jmp	#LR__3705
273f0                 | LR__3696
273f0     00 B6 0E F2 | 	cmp	local09, #0 wz
273f4     56 7B 02 56 |  if_ne	mov	result1, local04
273f8     B4 00 90 5D |  if_ne	jmp	#LR__3705
273fc     57 99 02 F6 | 	mov	arg04, local05
27400     08 98 46 F5 | 	or	arg04, #8
27404     00 92 06 F6 | 	mov	arg01, #0
27408     00 94 06 F6 | 	mov	arg02, #0
2740c     00 96 06 F6 | 	mov	arg03, #0
27410     00 2F B0 FD | 	call	#__system__pack_0698
27414     98 00 90 FD | 	jmp	#LR__3705
27418                 | LR__3697
27418     00 B0 0E F2 | 	cmp	local06, #0 wz
2741c     20 00 90 AD |  if_e	jmp	#LR__3700
27420     01 B0 66 F0 | 	shl	local06, #1
27424     D7 0A 48 FB | 	callpa	#(@LR__3699-@LR__3698)>>2,fcache_load_ptr_
27428                 | LR__3698
27428     00 40 00 FF 
2742c     00 B0 16 F2 | 	cmp	local06, ##8388608 wc
27430     01 B2 86 C1 |  if_b	sub	local07, #1
27434     01 B0 66 C0 |  if_b	shl	local06, #1
27438     EC FF 9F CD |  if_b	jmp	#LR__3698
2743c                 | LR__3699
2743c     B8 FE 9F FD | 	jmp	#LR__3690
27440                 | LR__3700
27440     00 B8 0E F2 | 	cmp	local10, #0 wz
27444     00 B6 0E A2 |  if_e	cmp	local09, #0 wz
27448     00 F8 3F AF 
2744c     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
27450     5C 00 90 AD |  if_e	jmp	#LR__3705
27454     57 99 02 F6 | 	mov	arg04, local05
27458     08 98 46 F5 | 	or	arg04, #8
2745c     00 92 06 F6 | 	mov	arg01, #0
27460     00 94 06 F6 | 	mov	arg02, #0
27464     00 96 06 F6 | 	mov	arg03, #0
27468     A8 2E B0 FD | 	call	#__system__pack_0698
2746c     40 00 90 FD | 	jmp	#LR__3705
27470                 | LR__3701
27470     00 B6 0E F2 | 	cmp	local09, #0 wz
27474     20 00 90 AD |  if_e	jmp	#LR__3704
27478     01 B6 66 F0 | 	shl	local09, #1
2747c     D7 0A 48 FB | 	callpa	#(@LR__3703-@LR__3702)>>2,fcache_load_ptr_
27480                 | LR__3702
27480     00 40 00 FF 
27484     00 B6 16 F2 | 	cmp	local09, ##8388608 wc
27488     01 B8 86 C1 |  if_b	sub	local10, #1
2748c     01 B6 66 C0 |  if_b	shl	local09, #1
27490     EC FF 9F CD |  if_b	jmp	#LR__3702
27494                 | LR__3703
27494     6C FE 9F FD | 	jmp	#LR__3691
27498                 | LR__3704
27498     02 AE 46 F5 | 	or	local05, #2
2749c     00 92 06 F6 | 	mov	arg01, #0
274a0     00 94 06 F6 | 	mov	arg02, #0
274a4     00 96 06 F6 | 	mov	arg03, #0
274a8     57 99 02 F6 | 	mov	arg04, local05
274ac     64 2E B0 FD | 	call	#__system__pack_0698
274b0                 | LR__3705
274b0     E7 F0 03 F6 | 	mov	ptra, fp
274b4     F2 00 A0 FD | 	call	#popregs_
274b8                 | __system___float_div_ret
274b8     2D 00 64 FD | 	ret
274bc                 | 
274bc                 | __system___float_cmp
274bc     00 C0 3F FF 
274c0     01 92 56 F2 | 	cmps	arg01, ##2139095041 wc
274c4     00 C0 3F CF 
274c8     01 94 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
274cc     4B 7B 02 36 |  if_ae	mov	result1, arg03
274d0     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
274d4     00 C0 7F FF 
274d8     01 92 16 F2 | 	cmp	arg01, ##-8388607 wc
274dc     00 C0 7F CF 
274e0     01 92 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
274e4     4B 7B 02 36 |  if_ae	mov	result1, arg03
274e8     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
274ec     00 92 56 F2 | 	cmps	arg01, #0 wc
274f0     2C 00 90 3D |  if_ae	jmp	#LR__3710
274f4     00 94 56 F2 | 	cmps	arg02, #0 wc
274f8     4A 7B 02 C6 |  if_b	mov	result1, arg02
274fc     49 7B 82 C1 |  if_b	sub	result1, arg01
27500     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
27504     00 94 0E F2 | 	cmp	arg02, #0 wz
27508     00 00 40 AF 
2750c     00 92 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
27510     00 7A 06 A6 |  if_e	mov	result1, #0
27514     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
27518     01 7A 66 F6 | 	neg	result1, #1
2751c     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
27520                 | LR__3710
27520     00 94 56 F2 | 	cmps	arg02, #0 wc
27524     1C 00 90 3D |  if_ae	jmp	#LR__3711
27528     00 92 0E F2 | 	cmp	arg01, #0 wz
2752c     00 00 40 AF 
27530     00 94 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
27534     00 7A 06 A6 |  if_e	mov	result1, #0
27538     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2753c     01 7A 06 F6 | 	mov	result1, #1
27540     08 00 90 FD | 	jmp	#__system___float_cmp_ret
27544                 | LR__3711
27544     4A 93 82 F1 | 	sub	arg01, arg02
27548     49 7B 02 F6 | 	mov	result1, arg01
2754c                 | __system___float_cmp_ret
2754c     2D 00 64 FD | 	ret
27550                 | 
27550                 | __system___float_tointeger
27550     02 CA 05 F6 | 	mov	COUNT_, #2
27554     E8 00 A0 FD | 	call	#pushregs_
27558     5C 00 B0 FD | 	call	#__system___float_Unpack
2755c     3D A7 02 F6 | 	mov	local01, result1
27560     1F 7C 56 F2 | 	cmps	result2, #31 wc
27564     00 A6 0E 32 |  if_ae	cmp	local01, #0 wz
27568     1F A8 C6 19 |  if_a	decod	local02, #31
2756c     1E A8 CE 29 |  if_nc_and_z	bmask	local02, #30
27570     54 7F 02 36 |  if_ae	mov	result3, local02
27574     30 00 90 3D |  if_ae	jmp	#LR__3721
27578     FF FF 7F FF 
2757c     FF 7D 56 F2 | 	cmps	result2, ##-1 wc
27580     00 7E 06 C6 |  if_b	mov	result3, #0
27584     20 00 90 CD |  if_b	jmp	#LR__3720
27588     02 7E 66 F0 | 	shl	result3, #2
2758c     1E A8 06 F6 | 	mov	local02, #30
27590     3E A9 82 F1 | 	sub	local02, result2
27594     54 7F 42 F0 | 	shr	result3, local02
27598     4A 7F 02 F1 | 	add	result3, arg02
2759c     01 7E 46 F0 | 	shr	result3, #1
275a0     00 A6 0E F2 | 	cmp	local01, #0 wz
275a4     3F 7F 62 56 |  if_ne	neg	result3, result3
275a8                 | LR__3720
275a8                 | LR__3721
275a8     3F 7B 02 F6 | 	mov	result1, result3
275ac     E7 F0 03 F6 | 	mov	ptra, fp
275b0     F2 00 A0 FD | 	call	#popregs_
275b4                 | __system___float_tointeger_ret
275b4     2D 00 64 FD | 	ret
275b8                 | 
275b8                 | __system___float_Unpack
275b8     49 81 02 F6 | 	mov	_var01, arg01
275bc     1F 80 46 F0 | 	shr	_var01, #31
275c0     49 83 02 F6 | 	mov	_var02, arg01
275c4     01 82 66 F0 | 	shl	_var02, #1
275c8     18 82 4E F0 | 	shr	_var02, #24 wz
275cc     17 93 06 F4 | 	bitl	arg01, #279
275d0     06 92 66 50 |  if_ne	shl	arg01, #6
275d4     1D 92 26 54 |  if_ne	bith	arg01, #29
275d8     1C 00 90 5D |  if_ne	jmp	#LR__3730
275dc     49 85 92 F7 | 	encod	_var03, arg01 wc
275e0     01 84 06 C1 |  if_b	add	_var03, #1
275e4     17 84 86 F1 | 	sub	_var03, #23
275e8     42 83 02 F6 | 	mov	_var02, _var03
275ec     07 7C 06 F6 | 	mov	result2, #7
275f0     42 7D 82 F1 | 	sub	result2, _var03
275f4     3E 93 62 F0 | 	shl	arg01, result2
275f8                 | LR__3730
275f8     7F 82 86 F1 | 	sub	_var02, #127
275fc     49 7F 02 F6 | 	mov	result3, arg01
27600     40 7B 02 F6 | 	mov	result1, _var01
27604     41 7D 02 F6 | 	mov	result2, _var02
27608                 | __system___float_Unpack_ret
27608     2D 00 64 FD | 	ret
2760c                 | 
2760c                 | __system___float_Pack
2760c     00 80 06 F6 | 	mov	_var01, #0
27610     00 96 0E F2 | 	cmp	arg03, #0 wz
27614     8C 00 90 AD |  if_e	jmp	#LR__3741
27618     4B 83 92 F7 | 	encod	_var02, arg03 wc
2761c     01 82 06 C1 |  if_b	add	_var02, #1
27620     21 80 06 F6 | 	mov	_var01, #33
27624     41 81 82 F1 | 	sub	_var01, _var02
27628     40 97 62 F0 | 	shl	arg03, _var01
2762c     03 82 06 F6 | 	mov	_var02, #3
27630     40 83 82 F1 | 	sub	_var02, _var01
27634     41 95 02 F1 | 	add	arg02, _var02
27638     4A 85 02 F6 | 	mov	_var03, arg02
2763c     00 97 06 F1 | 	add	arg03, #256
27640     4B 83 02 F6 | 	mov	_var02, arg03
27644     FF 82 2E F5 | 	andn	_var02, #255 wz
27648     01 84 06 A1 |  if_e	add	_var03, #1
2764c     7F 84 06 F1 | 	add	_var03, #127
27650     FF FF 7F FF 
27654     E9 85 46 F3 | 	fges	_var03, ##-23
27658     FF 84 66 F3 | 	fles	_var03, #255
2765c     01 84 56 F2 | 	cmps	_var03, #1 wc
27660     1C 00 90 3D |  if_ae	jmp	#LR__3740
27664     01 96 46 F0 | 	shr	arg03, #1
27668     1F 82 C6 F9 | 	decod	_var02, #31
2766c     4B 83 02 F1 | 	add	_var02, arg03
27670     42 85 62 F6 | 	neg	_var03, _var03
27674     42 83 42 F0 | 	shr	_var02, _var03
27678     41 97 02 F6 | 	mov	arg03, _var02
2767c     00 84 06 F6 | 	mov	_var03, #0
27680                 | LR__3740
27680     49 7B 02 F6 | 	mov	result1, arg01
27684     1F 7A 66 F0 | 	shl	result1, #31
27688     42 83 02 F6 | 	mov	_var02, _var03
2768c     17 82 66 F0 | 	shl	_var02, #23
27690     41 7B 42 F5 | 	or	result1, _var02
27694     4B 87 02 F6 | 	mov	_var04, arg03
27698     09 86 46 F0 | 	shr	_var04, #9
2769c     43 7B 42 F5 | 	or	result1, _var04
276a0     04 00 90 FD | 	jmp	#__system___float_Pack_ret
276a4                 | LR__3741
276a4     40 7B 02 F6 | 	mov	result1, _var01
276a8                 | __system___float_Pack_ret
276a8     2D 00 64 FD | 	ret
276ac                 | 
276ac                 | __system___basic_print_float
276ac     05 CA 05 F6 | 	mov	COUNT_, #5
276b0     E8 00 A0 FD | 	call	#pushregs_
276b4     49 A7 02 F6 | 	mov	local01, arg01
276b8     4A A9 02 F6 | 	mov	local02, arg02
276bc     4B AB 0A F6 | 	mov	local03, arg03 wz
276c0     4C AD 02 F6 | 	mov	local04, arg04
276c4     14 00 90 5D |  if_ne	jmp	#LR__3750
276c8     23 AC 0E F2 | 	cmp	local04, #35 wz
276cc     80 02 10 AF 
276d0     00 AE 06 A6 |  if_e	mov	local05, ##537198592
276d4     1D AE C6 59 |  if_ne	decod	local05, #29
276d8     57 AB 02 F6 | 	mov	local03, local05
276dc                 | LR__3750
276dc     53 93 02 F6 | 	mov	arg01, local01
276e0     A0 28 B0 FD | 	call	#__system___gettxfunc
276e4     3D AF 0A F6 | 	mov	local05, result1 wz
276e8     00 7A 06 A6 |  if_e	mov	result1, #0
276ec     57 93 02 56 |  if_ne	mov	arg01, local05
276f0     55 95 02 56 |  if_ne	mov	arg02, local03
276f4     54 97 02 56 |  if_ne	mov	arg03, local02
276f8     56 99 02 56 |  if_ne	mov	arg04, local04
276fc     00 E4 BF 5D |  if_ne	call	#__system___fmtfloat
27700     E7 F0 03 F6 | 	mov	ptra, fp
27704     F2 00 A0 FD | 	call	#popregs_
27708                 | __system___basic_print_float_ret
27708     2D 00 64 FD | 	ret
2770c                 | 
2770c                 | __system____builtin_atoi
2770c     07 CA 05 F6 | 	mov	COUNT_, #7
27710     E8 00 A0 FD | 	call	#pushregs_
27714                 | __system____builtin_atoi_enter
27714     49 A7 02 F6 | 	mov	local01, arg01
27718     4A A9 02 F6 | 	mov	local02, arg02
2771c     00 AA 06 F6 | 	mov	local03, #0
27720     00 AC 06 F6 | 	mov	local04, #0
27724     00 AE 06 F6 | 	mov	local05, #0
27728     D7 08 48 FB | 	callpa	#(@LR__3761-@LR__3760)>>2,fcache_load_ptr_
2772c                 | LR__3760
2772c     53 B1 C2 FA | 	rdbyte	local06, local01
27730     20 B0 0E F2 | 	cmp	local06, #32 wz
27734     01 A6 06 A1 |  if_e	add	local01, #1
27738     F0 FF 9F AD |  if_e	jmp	#LR__3760
2773c                 | LR__3761
2773c     53 B3 C2 FA | 	rdbyte	local07, local01
27740     D7 12 48 FB | 	callpa	#(@LR__3763-@LR__3762)>>2,fcache_load_ptr_
27744                 | LR__3762
27744     2D B2 0E F2 | 	cmp	local07, #45 wz
27748     2B B2 0E 52 |  if_ne	cmp	local07, #43 wz
2774c     18 00 90 5D |  if_ne	jmp	#LR__3764
27750     01 A6 06 F1 | 	add	local01, #1
27754     2D B2 0E F2 | 	cmp	local07, #45 wz
27758     01 B0 06 A6 |  if_e	mov	local06, #1
2775c     58 AF C2 A2 |  if_e	subr	local05, local06
27760     53 B3 C2 FA | 	rdbyte	local07, local01
27764     DC FF 9F FD | 	jmp	#LR__3762
27768                 | LR__3763
27768                 | LR__3764
27768     00 A8 0E F2 | 	cmp	local02, #0 wz
2776c     1C 00 90 5D |  if_ne	jmp	#LR__3766
27770     24 B2 0E F2 | 	cmp	local07, #36 wz
27774     10 A8 06 A6 |  if_e	mov	local02, #16
27778     01 A6 06 A1 |  if_e	add	local01, #1
2777c     0C 00 90 AD |  if_e	jmp	#LR__3765
27780     25 B2 0E F2 | 	cmp	local07, #37 wz
27784     02 A8 06 A6 |  if_e	mov	local02, #2
27788     01 A6 06 A1 |  if_e	add	local01, #1
2778c                 | LR__3765
2778c                 | LR__3766
2778c     D7 48 48 FB | 	callpa	#(@LR__3774-@LR__3767)>>2,fcache_load_ptr_
27790                 | LR__3767
27790                 | LR__3768
27790     53 B3 C2 FA | 	rdbyte	local07, local01
27794     5F B2 0E F2 | 	cmp	local07, #95 wz
27798     01 A6 06 F1 | 	add	local01, #1
2779c     F0 FF 9F AD |  if_e	jmp	#LR__3768
277a0     30 B2 0E F2 | 	cmp	local07, #48 wz
277a4     26 B2 0E 52 |  if_ne	cmp	local07, #38 wz
277a8     00 AC 06 A6 |  if_e	mov	local04, #0
277ac     60 00 90 AD |  if_e	jmp	#LR__3773
277b0     31 B2 56 F2 | 	cmps	local07, #49 wc
277b4     18 00 90 CD |  if_b	jmp	#LR__3769
277b8     3A B2 56 F2 | 	cmps	local07, #58 wc
277bc     59 AD 02 C6 |  if_b	mov	local04, local07
277c0     30 AC 86 C1 |  if_b	sub	local04, #48
277c4     00 A8 0E C2 |  if_b	cmp	local02, #0 wz
277c8     0A A8 06 86 |  if_c_and_z	mov	local02, #10
277cc     40 00 90 CD |  if_b	jmp	#LR__3772
277d0                 | LR__3769
277d0     0B A8 56 F2 | 	cmps	local02, #11 wc
277d4     61 B2 56 32 |  if_ae	cmps	local07, #97 wc
277d8     14 00 90 CD |  if_b	jmp	#LR__3770
277dc     67 B2 56 F2 | 	cmps	local07, #103 wc
277e0     61 B2 86 C1 |  if_b	sub	local07, #97
277e4     0A AC 06 C6 |  if_b	mov	local04, #10
277e8     59 AD 02 C1 |  if_b	add	local04, local07
277ec     20 00 90 CD |  if_b	jmp	#LR__3771
277f0                 | LR__3770
277f0     0B A8 56 F2 | 	cmps	local02, #11 wc
277f4     41 B2 56 32 |  if_ae	cmps	local07, #65 wc
277f8     24 00 90 CD |  if_b	jmp	#LR__3775
277fc     47 B2 56 F2 | 	cmps	local07, #71 wc
27800     41 B2 86 C1 |  if_b	sub	local07, #65
27804     0A AC 06 C6 |  if_b	mov	local04, #10
27808     59 AD 02 C1 |  if_b	add	local04, local07
2780c     10 00 90 3D |  if_ae	jmp	#LR__3775
27810                 | LR__3771
27810                 | LR__3772
27810                 | LR__3773
27810     55 A9 02 FD | 	qmul	local02, local03
27814     18 AA 62 FD | 	getqx	local03
27818     56 AB 02 F1 | 	add	local03, local04
2781c     70 FF 9F FD | 	jmp	#LR__3767
27820                 | LR__3774
27820                 | LR__3775
27820     00 A8 0E F2 | 	cmp	local02, #0 wz
27824     64 00 90 5D |  if_ne	jmp	#LR__3781
27828     78 B2 0E F2 | 	cmp	local07, #120 wz
2782c     68 B2 0E 52 |  if_ne	cmp	local07, #104 wz
27830     58 B2 0E 52 |  if_ne	cmp	local07, #88 wz
27834     48 B2 0E 52 |  if_ne	cmp	local07, #72 wz
27838     14 00 90 5D |  if_ne	jmp	#LR__3776
2783c     53 93 02 F6 | 	mov	arg01, local01
27840     10 94 06 F6 | 	mov	arg02, #16
27844     C4 FE BF FD | 	call	#__system____builtin_atoi
27848     3D AB 02 F6 | 	mov	local03, result1
2784c     3C 00 90 FD | 	jmp	#LR__3780
27850                 | LR__3776
27850     62 B2 0E F2 | 	cmp	local07, #98 wz
27854     42 B2 0E 52 |  if_ne	cmp	local07, #66 wz
27858     14 00 90 5D |  if_ne	jmp	#LR__3777
2785c     53 93 02 F6 | 	mov	arg01, local01
27860     02 94 06 F6 | 	mov	arg02, #2
27864     A4 FE BF FD | 	call	#__system____builtin_atoi
27868     3D AB 02 F6 | 	mov	local03, result1
2786c     1C 00 90 FD | 	jmp	#LR__3779
27870                 | LR__3777
27870     6F B2 0E F2 | 	cmp	local07, #111 wz
27874     4F B2 0E 52 |  if_ne	cmp	local07, #79 wz
27878     10 00 90 5D |  if_ne	jmp	#LR__3778
2787c     53 93 02 F6 | 	mov	arg01, local01
27880     08 94 06 F6 | 	mov	arg02, #8
27884     84 FE BF FD | 	call	#__system____builtin_atoi
27888     3D AB 02 F6 | 	mov	local03, result1
2788c                 | LR__3778
2788c                 | LR__3779
2788c                 | LR__3780
2788c                 | LR__3781
2788c     00 AE 0E F2 | 	cmp	local05, #0 wz
27890     55 AB 62 56 |  if_ne	neg	local03, local03
27894     55 7B 02 F6 | 	mov	result1, local03
27898     E7 F0 03 F6 | 	mov	ptra, fp
2789c     F2 00 A0 FD | 	call	#popregs_
278a0                 | __system____builtin_atoi_ret
278a0     2D 00 64 FD | 	ret
278a4                 | 
278a4                 | __system____builtin_atof
278a4     07 CA 05 F6 | 	mov	COUNT_, #7
278a8     E8 00 A0 FD | 	call	#pushregs_
278ac     49 A7 02 F6 | 	mov	local01, arg01
278b0     00 A8 06 F6 | 	mov	local02, #0
278b4     00 AA 06 F6 | 	mov	local03, #0
278b8     00 AC 06 F6 | 	mov	local04, #0
278bc     00 AE 06 F6 | 	mov	local05, #0
278c0     D7 08 48 FB | 	callpa	#(@LR__3791-@LR__3790)>>2,fcache_load_ptr_
278c4                 | LR__3790
278c4     53 97 C2 FA | 	rdbyte	arg03, local01
278c8     20 96 0E F2 | 	cmp	arg03, #32 wz
278cc     01 A6 06 A1 |  if_e	add	local01, #1
278d0     F0 FF 9F AD |  if_e	jmp	#LR__3790
278d4                 | LR__3791
278d4     53 B1 C2 FA | 	rdbyte	local06, local01
278d8                 | LR__3792
278d8     2B B0 0E F2 | 	cmp	local06, #43 wz
278dc     2D B0 0E 52 |  if_ne	cmp	local06, #45 wz
278e0     14 00 90 5D |  if_ne	jmp	#LR__3793
278e4     2D B0 0E F2 | 	cmp	local06, #45 wz
278e8     1F AC E6 A4 |  if_e	bitnot	local04, #31
278ec     01 A6 06 F1 | 	add	local01, #1
278f0     53 B1 C2 FA | 	rdbyte	local06, local01
278f4     E0 FF 9F FD | 	jmp	#LR__3792
278f8                 | LR__3793
278f8                 | LR__3794
278f8     D7 08 48 FB | 	callpa	#(@LR__3796-@LR__3795)>>2,fcache_load_ptr_
278fc                 | LR__3795
278fc     53 B1 C2 FA | 	rdbyte	local06, local01
27900     5F B0 0E F2 | 	cmp	local06, #95 wz
27904     01 A6 06 F1 | 	add	local01, #1
27908     F0 FF 9F AD |  if_e	jmp	#LR__3795
2790c                 | LR__3796
2790c     00 B0 0E F2 | 	cmp	local06, #0 wz
27910     5C 00 90 AD |  if_e	jmp	#LR__3798
27914     30 B0 56 F2 | 	cmps	local06, #48 wc
27918     44 00 90 CD |  if_b	jmp	#LR__3797
2791c     3A B0 56 F2 | 	cmps	local06, #58 wc
27920     3C 00 90 3D |  if_ae	jmp	#LR__3797
27924     54 93 02 F6 | 	mov	arg01, local02
27928     00 90 20 FF 
2792c     00 94 06 F6 | 	mov	arg02, ##1092616192
27930     54 F7 BF FD | 	call	#__system___float_mul
27934     3D A9 02 F6 | 	mov	local02, result1
27938     30 B0 86 F1 | 	sub	local06, #48
2793c     58 93 02 F6 | 	mov	arg01, local06
27940     40 F3 BF FD | 	call	#__system___float_fromuns
27944     3D 95 02 F6 | 	mov	arg02, result1
27948     54 93 02 F6 | 	mov	arg01, local02
2794c     68 F3 BF FD | 	call	#__system___float_add
27950     3D A9 02 F6 | 	mov	local02, result1
27954     00 AE 0E F2 | 	cmp	local05, #0 wz
27958     01 AA 86 51 |  if_ne	sub	local03, #1
2795c     98 FF 9F FD | 	jmp	#LR__3794
27960                 | LR__3797
27960     2E B0 0E F2 | 	cmp	local06, #46 wz
27964     00 AE 0E A2 |  if_e	cmp	local05, #0 wz
27968     01 AE 06 A6 |  if_e	mov	local05, #1
2796c     88 FF 9F AD |  if_e	jmp	#LR__3794
27970                 | LR__3798
27970     45 B0 0E F2 | 	cmp	local06, #69 wz
27974     65 B0 0E 52 |  if_ne	cmp	local06, #101 wz
27978     18 00 90 5D |  if_ne	jmp	#LR__3799
2797c     53 93 02 F6 | 	mov	arg01, local01
27980     00 94 06 F6 | 	mov	arg02, #0
27984     84 FD BF FD | 	call	#__system____builtin_atoi
27988     55 7B 02 F1 | 	add	result1, local03
2798c     3D B3 02 F6 | 	mov	local07, result1
27990     04 00 90 FD | 	jmp	#LR__3800
27994                 | LR__3799
27994     55 B3 02 F6 | 	mov	local07, local03
27998                 | LR__3800
27998     59 97 02 F6 | 	mov	arg03, local07
2799c     54 93 02 F6 | 	mov	arg01, local02
279a0     00 90 20 FF 
279a4     00 94 06 F6 | 	mov	arg02, ##1092616192
279a8     F4 06 B0 FD | 	call	#__system___float_pow_n
279ac     56 7B 62 F5 | 	xor	result1, local04
279b0     E7 F0 03 F6 | 	mov	ptra, fp
279b4     F2 00 A0 FD | 	call	#popregs_
279b8                 | __system____builtin_atof_ret
279b8     2D 00 64 FD | 	ret
279bc                 | 
279bc                 | __system____builtin_ilogb
279bc     F8 FB BF FD | 	call	#__system___float_Unpack
279c0     00 7E 0E F2 | 	cmp	result3, #0 wz
279c4     00 00 40 AF 
279c8     01 7A 06 A6 |  if_e	mov	result1, ##-2147483647
279cc     24 00 90 AD |  if_e	jmp	#LR__3811
279d0     80 7C 0E F2 | 	cmp	result2, #128 wz
279d4     18 00 90 5D |  if_ne	jmp	#LR__3810
279d8     00 00 10 FF 
279dc     00 7E 0E F2 | 	cmp	result3, ##536870912 wz
279e0     1E 7A CE A9 |  if_e	bmask	result1, #30
279e4     0C 00 90 AD |  if_e	jmp	#LR__3811
279e8     1F 7A C6 F9 | 	decod	result1, #31
279ec     04 00 90 FD | 	jmp	#LR__3811
279f0                 | LR__3810
279f0     3E 7B 02 F6 | 	mov	result1, result2
279f4                 | LR__3811
279f4                 | __system____builtin_ilogb_ret
279f4     2D 00 64 FD | 	ret
279f8                 | 
279f8                 | __system____builtin_sinf
279f8     03 CA 05 F6 | 	mov	COUNT_, #3
279fc     E8 00 A0 FD | 	call	#pushregs_
27a00     49 A7 02 F6 | 	mov	local01, arg01
27a04     87 64 20 FF 
27a08     DB 95 06 F6 | 	mov	arg02, ##1086918619
27a0c     7C F8 BF FD | 	call	#__system___float_div
27a10     3D 93 02 F6 | 	mov	arg01, result1
27a14     00 94 06 F6 | 	mov	arg02, #0
27a18     34 FB BF FD | 	call	#__system___float_tointeger
27a1c     3D 97 0A F6 | 	mov	arg03, result1 wz
27a20     44 00 90 AD |  if_e	jmp	#LR__3820
27a24     4B 93 52 F6 | 	abs	arg01, arg03 wc
27a28     1F A8 C6 C9 |  if_b	decod	local02, #31
27a2c     00 A8 06 36 |  if_ae	mov	local02, #0
27a30     50 F2 BF FD | 	call	#__system___float_fromuns
27a34     54 7B 62 F5 | 	xor	result1, local02
27a38     3D 93 02 F6 | 	mov	arg01, result1
27a3c     1E 94 C6 F9 | 	decod	arg02, #30
27a40     44 F6 BF FD | 	call	#__system___float_mul
27a44     3D 93 02 F6 | 	mov	arg01, result1
27a48     87 24 20 FF 
27a4c     DB 95 06 F6 | 	mov	arg02, ##1078530011
27a50     34 F6 BF FD | 	call	#__system___float_mul
27a54     3D 95 02 F6 | 	mov	arg02, result1
27a58     53 93 02 F6 | 	mov	arg01, local01
27a5c     1F 94 E6 F4 | 	bitnot	arg02, #31
27a60     54 F2 BF FD | 	call	#__system___float_add
27a64     3D A7 02 F6 | 	mov	local01, result1
27a68                 | LR__3820
27a68     53 93 02 F6 | 	mov	arg01, local01
27a6c     66 E6 1E FF 
27a70     CD 94 06 F6 | 	mov	arg02, ##1036831949
27a74     01 96 06 F6 | 	mov	arg03, #1
27a78     40 FA BF FD | 	call	#__system___float_cmp
27a7c     00 7A 56 F2 | 	cmps	result1, #0 wc
27a80     5C 00 90 3D |  if_ae	jmp	#LR__3821
27a84     53 93 02 F6 | 	mov	arg01, local01
27a88     66 E6 5E FF 
27a8c     CD 94 06 F6 | 	mov	arg02, ##-1110651699
27a90     01 96 66 F6 | 	neg	arg03, #1
27a94     24 FA BF FD | 	call	#__system___float_cmp
27a98     01 7A 56 F2 | 	cmps	result1, #1 wc
27a9c     40 00 90 CD |  if_b	jmp	#LR__3821
27aa0     53 93 02 F6 | 	mov	arg01, local01
27aa4     53 95 02 F6 | 	mov	arg02, local01
27aa8     DC F5 BF FD | 	call	#__system___float_mul
27aac     3D 93 02 F6 | 	mov	arg01, result1
27ab0     53 95 02 F6 | 	mov	arg02, local01
27ab4     D0 F5 BF FD | 	call	#__system___float_mul
27ab8     3D 93 02 F6 | 	mov	arg01, result1
27abc     00 60 20 FF 
27ac0     00 94 06 F6 | 	mov	arg02, ##1086324736
27ac4     C4 F7 BF FD | 	call	#__system___float_div
27ac8     3D 95 02 F6 | 	mov	arg02, result1
27acc     53 93 02 F6 | 	mov	arg01, local01
27ad0     1F 94 E6 F4 | 	bitnot	arg02, #31
27ad4     E0 F1 BF FD | 	call	#__system___float_add
27ad8     3D AB 02 F6 | 	mov	local03, result1
27adc     54 00 90 FD | 	jmp	#LR__3822
27ae0                 | LR__3821
27ae0     53 93 02 F6 | 	mov	arg01, local01
27ae4     7C 91 26 FF 
27ae8     83 95 06 F6 | 	mov	arg02, ##1294137731
27aec     98 F5 BF FD | 	call	#__system___float_mul
27af0     3D 93 02 F6 | 	mov	arg01, result1
27af4     00 94 06 F6 | 	mov	arg02, #0
27af8     54 FA BF FD | 	call	#__system___float_tointeger
27afc     02 7A 66 F0 | 	shl	result1, #2
27b00     00 00 A0 FF 
27b04     3D 01 48 FD | 	qrotate	##1073741824, result1
27b08     19 92 62 FD | 	getqy	arg01
27b0c     49 93 52 F6 | 	abs	arg01, arg01 wc
27b10     1F A8 C6 C9 |  if_b	decod	local02, #31
27b14     00 A8 06 36 |  if_ae	mov	local02, #0
27b18     68 F1 BF FD | 	call	#__system___float_fromuns
27b1c     54 7B 62 F5 | 	xor	result1, local02
27b20     3D 93 02 F6 | 	mov	arg01, result1
27b24     00 40 27 FF 
27b28     00 94 06 F6 | 	mov	arg02, ##1317011456
27b2c     5C F7 BF FD | 	call	#__system___float_div
27b30     3D AB 02 F6 | 	mov	local03, result1
27b34                 | LR__3822
27b34     55 7B 02 F6 | 	mov	result1, local03
27b38     E7 F0 03 F6 | 	mov	ptra, fp
27b3c     F2 00 A0 FD | 	call	#popregs_
27b40                 | __system____builtin_sinf_ret
27b40     2D 00 64 FD | 	ret
27b44                 | 
27b44                 | __system____builtin_tanf
27b44     02 CA 05 F6 | 	mov	COUNT_, #2
27b48     E8 00 A0 FD | 	call	#pushregs_
27b4c     49 A7 02 F6 | 	mov	local01, arg01
27b50     A4 FE BF FD | 	call	#__system____builtin_sinf
27b54     3D A9 02 F6 | 	mov	local02, result1
27b58     53 95 02 F6 | 	mov	arg02, local01
27b5c     87 E4 1F FF 
27b60     DB 93 06 F6 | 	mov	arg01, ##1070141403
27b64     1F 94 E6 F4 | 	bitnot	arg02, #31
27b68     4C F1 BF FD | 	call	#__system___float_add
27b6c     3D 93 02 F6 | 	mov	arg01, result1
27b70     84 FE BF FD | 	call	#__system____builtin_sinf
27b74     3D 95 02 F6 | 	mov	arg02, result1
27b78     54 93 02 F6 | 	mov	arg01, local02
27b7c     0C F7 BF FD | 	call	#__system___float_div
27b80     E7 F0 03 F6 | 	mov	ptra, fp
27b84     F2 00 A0 FD | 	call	#popregs_
27b88                 | __system____builtin_tanf_ret
27b88     2D 00 64 FD | 	ret
27b8c                 | 
27b8c                 | __system____builtin_asinf
27b8c     01 CA 05 F6 | 	mov	COUNT_, #1
27b90     E8 00 A0 FD | 	call	#pushregs_
27b94     49 A7 02 F6 | 	mov	local01, arg01
27b98     53 95 02 F6 | 	mov	arg02, local01
27b9c     53 93 02 F6 | 	mov	arg01, local01
27ba0     E4 F4 BF FD | 	call	#__system___float_mul
27ba4     3D 95 02 F6 | 	mov	arg02, result1
27ba8     00 C0 1F FF 
27bac     00 92 06 F6 | 	mov	arg01, ##1065353216
27bb0     1F 94 E6 F4 | 	bitnot	arg02, #31
27bb4     00 F1 BF FD | 	call	#__system___float_add
27bb8     3D 93 02 F6 | 	mov	arg01, result1
27bbc     F0 F3 BF FD | 	call	#__system___float_sqrt
27bc0     3D 95 02 F6 | 	mov	arg02, result1
27bc4     53 93 02 F6 | 	mov	arg01, local01
27bc8     58 00 B0 FD | 	call	#__system____builtin_atan2f
27bcc     E7 F0 03 F6 | 	mov	ptra, fp
27bd0     F2 00 A0 FD | 	call	#popregs_
27bd4                 | __system____builtin_asinf_ret
27bd4     2D 00 64 FD | 	ret
27bd8                 | 
27bd8                 | __system____builtin_acosf
27bd8     01 CA 05 F6 | 	mov	COUNT_, #1
27bdc     E8 00 A0 FD | 	call	#pushregs_
27be0     49 A7 02 F6 | 	mov	local01, arg01
27be4     53 95 02 F6 | 	mov	arg02, local01
27be8     53 93 02 F6 | 	mov	arg01, local01
27bec     98 F4 BF FD | 	call	#__system___float_mul
27bf0     3D 95 02 F6 | 	mov	arg02, result1
27bf4     00 C0 1F FF 
27bf8     00 92 06 F6 | 	mov	arg01, ##1065353216
27bfc     1F 94 E6 F4 | 	bitnot	arg02, #31
27c00     B4 F0 BF FD | 	call	#__system___float_add
27c04     3D 93 02 F6 | 	mov	arg01, result1
27c08     A4 F3 BF FD | 	call	#__system___float_sqrt
27c0c     3D 93 02 F6 | 	mov	arg01, result1
27c10     53 95 02 F6 | 	mov	arg02, local01
27c14     0C 00 B0 FD | 	call	#__system____builtin_atan2f
27c18     E7 F0 03 F6 | 	mov	ptra, fp
27c1c     F2 00 A0 FD | 	call	#popregs_
27c20                 | __system____builtin_acosf_ret
27c20     2D 00 64 FD | 	ret
27c24                 | 
27c24                 | __system____builtin_atan2f
27c24     04 CA 05 F6 | 	mov	COUNT_, #4
27c28     E8 00 A0 FD | 	call	#pushregs_
27c2c     49 A7 02 F6 | 	mov	local01, arg01
27c30     4A A9 02 F6 | 	mov	local02, arg02
27c34     53 93 02 F6 | 	mov	arg01, local01
27c38     00 94 06 F6 | 	mov	arg02, #0
27c3c     01 96 06 F6 | 	mov	arg03, #1
27c40     78 F8 BF FD | 	call	#__system___float_cmp
27c44     00 7A 0E F2 | 	cmp	result1, #0 wz
27c48     28 00 90 5D |  if_ne	jmp	#LR__3830
27c4c     54 93 02 F6 | 	mov	arg01, local02
27c50     00 94 06 F6 | 	mov	arg02, #0
27c54     01 96 06 F6 | 	mov	arg03, #1
27c58     60 F8 BF FD | 	call	#__system___float_cmp
27c5c     00 7A 56 F2 | 	cmps	result1, #0 wc
27c60     87 24 60 CF 
27c64     DB 7B 06 C6 |  if_b	mov	result1, ##-1068953637
27c68     DC 00 90 CD |  if_b	jmp	#LR__3831
27c6c     00 7A 06 F6 | 	mov	result1, #0
27c70     D4 00 90 FD | 	jmp	#LR__3831
27c74                 | LR__3830
27c74     54 93 02 F6 | 	mov	arg01, local02
27c78     54 95 02 F6 | 	mov	arg02, local02
27c7c     08 F4 BF FD | 	call	#__system___float_mul
27c80     3D AB 02 F6 | 	mov	local03, result1
27c84     53 93 02 F6 | 	mov	arg01, local01
27c88     53 95 02 F6 | 	mov	arg02, local01
27c8c     F8 F3 BF FD | 	call	#__system___float_mul
27c90     3D 95 02 F6 | 	mov	arg02, result1
27c94     55 93 02 F6 | 	mov	arg01, local03
27c98     1C F0 BF FD | 	call	#__system___float_add
27c9c     3D 93 02 F6 | 	mov	arg01, result1
27ca0     0C F3 BF FD | 	call	#__system___float_sqrt
27ca4     3D AB 02 F6 | 	mov	local03, result1
27ca8     54 93 02 F6 | 	mov	arg01, local02
27cac     55 95 02 F6 | 	mov	arg02, local03
27cb0     D8 F5 BF FD | 	call	#__system___float_div
27cb4     3D A9 02 F6 | 	mov	local02, result1
27cb8     53 93 02 F6 | 	mov	arg01, local01
27cbc     55 95 02 F6 | 	mov	arg02, local03
27cc0     C8 F5 BF FD | 	call	#__system___float_div
27cc4     3D A7 02 F6 | 	mov	local01, result1
27cc8     00 40 27 FF 
27ccc     00 92 06 F6 | 	mov	arg01, ##1317011456
27cd0     54 95 02 F6 | 	mov	arg02, local02
27cd4     B0 F3 BF FD | 	call	#__system___float_mul
27cd8     3D 93 02 F6 | 	mov	arg01, result1
27cdc     00 94 06 F6 | 	mov	arg02, #0
27ce0     6C F8 BF FD | 	call	#__system___float_tointeger
27ce4     3D AB 02 F6 | 	mov	local03, result1
27ce8     00 40 27 FF 
27cec     00 92 06 F6 | 	mov	arg01, ##1317011456
27cf0     53 95 02 F6 | 	mov	arg02, local01
27cf4     90 F3 BF FD | 	call	#__system___float_mul
27cf8     3D 93 02 F6 | 	mov	arg01, result1
27cfc     00 94 06 F6 | 	mov	arg02, #0
27d00     4C F8 BF FD | 	call	#__system___float_tointeger
27d04     3D AB 52 FD | 	qvector	local03, result1
27d08     87 24 20 FF 
27d0c     DB AB 06 F6 | 	mov	local03, ##1078530011
27d10     19 92 62 FD | 	getqy	arg01
27d14     01 92 C6 F0 | 	sar	arg01, #1
27d18     49 93 52 F6 | 	abs	arg01, arg01 wc
27d1c     1F AC C6 C9 |  if_b	decod	local04, #31
27d20     00 AC 06 36 |  if_ae	mov	local04, #0
27d24     5C EF BF FD | 	call	#__system___float_fromuns
27d28     56 7B 62 F5 | 	xor	result1, local04
27d2c     3D 93 02 F6 | 	mov	arg01, result1
27d30     00 40 27 FF 
27d34     00 94 06 F6 | 	mov	arg02, ##1317011456
27d38     50 F5 BF FD | 	call	#__system___float_div
27d3c     3D 95 02 F6 | 	mov	arg02, result1
27d40     55 93 02 F6 | 	mov	arg01, local03
27d44     40 F3 BF FD | 	call	#__system___float_mul
27d48                 | LR__3831
27d48     E7 F0 03 F6 | 	mov	ptra, fp
27d4c     F2 00 A0 FD | 	call	#popregs_
27d50                 | __system____builtin_atan2f_ret
27d50     2D 00 64 FD | 	ret
27d54                 | 
27d54                 | __system____builtin_exp2f
27d54     04 CA 05 F6 | 	mov	COUNT_, #4
27d58     E8 00 A0 FD | 	call	#pushregs_
27d5c     49 A7 02 F6 | 	mov	local01, arg01
27d60     00 7F 21 FF 
27d64     00 94 06 F6 | 	mov	arg02, ##1123942400
27d68     01 96 66 F6 | 	neg	arg03, #1
27d6c     4C F7 BF FD | 	call	#__system___float_cmp
27d70     00 7A 56 F2 | 	cmps	result1, #0 wc
27d74     00 C0 3F 3F 
27d78     00 7A 06 36 |  if_ae	mov	result1, ##2139095040
27d7c     DC 00 90 3D |  if_ae	jmp	#LR__3841
27d80     53 93 02 F6 | 	mov	arg01, local01
27d84     00 7F 61 FF 
27d88     00 94 06 F6 | 	mov	arg02, ##-1023541248
27d8c     01 96 06 F6 | 	mov	arg03, #1
27d90     28 F7 BF FD | 	call	#__system___float_cmp
27d94     00 7A 56 F2 | 	cmps	result1, #0 wc
27d98     00 7A 06 C6 |  if_b	mov	result1, #0
27d9c     BC 00 90 CD |  if_b	jmp	#LR__3841
27da0     53 93 02 F6 | 	mov	arg01, local01
27da4     00 94 06 F6 | 	mov	arg02, #0
27da8     A4 F7 BF FD | 	call	#__system___float_tointeger
27dac     3D A9 02 F6 | 	mov	local02, result1
27db0     54 93 52 F6 | 	abs	arg01, local02 wc
27db4     1F AA C6 C9 |  if_b	decod	local03, #31
27db8     00 AA 06 36 |  if_ae	mov	local03, #0
27dbc     C4 EE BF FD | 	call	#__system___float_fromuns
27dc0     55 7B 62 F5 | 	xor	result1, local03
27dc4     3D 95 02 F6 | 	mov	arg02, result1
27dc8     53 93 02 F6 | 	mov	arg01, local01
27dcc     1F 94 E6 F4 | 	bitnot	arg02, #31
27dd0     E4 EE BF FD | 	call	#__system___float_add
27dd4     3D AD 02 F6 | 	mov	local04, result1
27dd8     56 93 02 F6 | 	mov	arg01, local04
27ddc     00 94 06 F6 | 	mov	arg02, #0
27de0     01 96 06 F6 | 	mov	arg03, #1
27de4     D4 F6 BF FD | 	call	#__system___float_cmp
27de8     00 7A 56 F2 | 	cmps	result1, #0 wc
27dec     18 00 90 3D |  if_ae	jmp	#LR__3840
27df0     56 93 02 F6 | 	mov	arg01, local04
27df4     00 C0 1F FF 
27df8     00 94 06 F6 | 	mov	arg02, ##1065353216
27dfc     B8 EE BF FD | 	call	#__system___float_add
27e00     3D AD 02 F6 | 	mov	local04, result1
27e04     01 A8 86 F1 | 	sub	local02, #1
27e08                 | LR__3840
27e08     7F A8 06 F1 | 	add	local02, #127
27e0c     17 A8 66 F0 | 	shl	local02, #23
27e10     56 93 02 F6 | 	mov	arg01, local04
27e14     00 80 26 FF 
27e18     00 94 06 F6 | 	mov	arg02, ##1291845632
27e1c     68 F2 BF FD | 	call	#__system___float_mul
27e20     3D 93 02 F6 | 	mov	arg01, result1
27e24     00 94 06 F6 | 	mov	arg02, #0
27e28     24 F7 BF FD | 	call	#__system___float_tointeger
27e2c     3D AD 0A F6 | 	mov	local04, result1 wz
27e30     54 7B 02 A6 |  if_e	mov	result1, local02
27e34     24 00 90 AD |  if_e	jmp	#LR__3841
27e38     3E AC 26 F4 | 	bith	local04, #62
27e3c     0F AC 62 FD | 	qexp	local04
27e40     54 93 02 F6 | 	mov	arg01, local02
27e44     18 94 62 FD | 	getqx	arg02
27e48     01 94 06 F1 | 	add	arg02, #1
27e4c     01 94 46 F0 | 	shr	arg02, #1
27e50     00 80 1F FF 
27e54     00 94 06 F1 | 	add	arg02, ##1056964608
27e58     2C F2 BF FD | 	call	#__system___float_mul
27e5c                 | LR__3841
27e5c     E7 F0 03 F6 | 	mov	ptra, fp
27e60     F2 00 A0 FD | 	call	#popregs_
27e64                 | __system____builtin_exp2f_ret
27e64     2D 00 64 FD | 	ret
27e68                 | 
27e68                 | __system____builtin_log2f
27e68     06 CA 05 F6 | 	mov	COUNT_, #6
27e6c     E8 00 A0 FD | 	call	#pushregs_
27e70     49 A7 02 F6 | 	mov	local01, arg01
27e74     49 A9 0A F6 | 	mov	local02, arg01 wz
27e78     00 00 40 5F 
27e7c     00 A8 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
27e80     00 40 00 AF 
27e84     00 7A 66 A6 |  if_e	neg	result1, ##8388608
27e88     08 01 90 AD |  if_e	jmp	#LR__3854
27e8c     00 A8 56 F2 | 	cmps	local02, #0 wc
27e90     00 E0 3F CF 
27e94     00 7A 06 C6 |  if_b	mov	result1, ##2143289344
27e98     F8 00 90 CD |  if_b	jmp	#LR__3854
27e9c     53 93 02 F6 | 	mov	arg01, local01
27ea0     00 90 20 FF 
27ea4     00 94 06 F6 | 	mov	arg02, ##1092616192
27ea8     01 96 06 F6 | 	mov	arg03, #1
27eac     0C F6 BF FD | 	call	#__system___float_cmp
27eb0     00 7A 0E F2 | 	cmp	result1, #0 wz
27eb4     4D 2A 20 AF 
27eb8     78 7A 06 A6 |  if_e	mov	result1, ##1079286392
27ebc     D4 00 90 AD |  if_e	jmp	#LR__3854
27ec0     53 93 02 F6 | 	mov	arg01, local01
27ec4     FC 16 20 FF 
27ec8     54 94 06 F6 | 	mov	arg02, ##1076754516
27ecc     01 96 06 F6 | 	mov	arg03, #1
27ed0     E8 F5 BF FD | 	call	#__system___float_cmp
27ed4     00 7A 0E F2 | 	cmp	result1, #0 wz
27ed8     55 DC 1F AF 
27edc     3B 7A 06 A6 |  if_e	mov	result1, ##1069066811
27ee0     B0 00 90 AD |  if_e	jmp	#LR__3854
27ee4     54 AB 02 F6 | 	mov	local03, local02
27ee8     17 AA 46 F0 | 	shr	local03, #23
27eec     55 AB E2 F8 | 	getbyte	local03, local03, #0
27ef0     17 A9 06 F4 | 	bitl	local02, #279
27ef4     54 AD 02 F6 | 	mov	local04, local02
27ef8     FF AA 0E F2 | 	cmp	local03, #255 wz
27efc     1C 00 90 5D |  if_ne	jmp	#LR__3850
27f00     00 AC 0E F2 | 	cmp	local04, #0 wz
27f04     00 C0 3F 5F 
27f08     00 AE 06 56 |  if_ne	mov	local05, ##2139095040
27f0c     00 E0 3F AF 
27f10     00 AE 06 A6 |  if_e	mov	local05, ##2143289344
27f14     57 7B 02 F6 | 	mov	result1, local05
27f18     78 00 90 FD | 	jmp	#LR__3854
27f1c                 | LR__3850
27f1c     00 AA 0E F2 | 	cmp	local03, #0 wz
27f20     17 AC 26 54 |  if_ne	bith	local04, #23
27f24     7F AA 86 51 |  if_ne	sub	local03, #127
27f28     28 00 90 5D |  if_ne	jmp	#LR__3853
27f2c     00 AC 0E F2 | 	cmp	local04, #0 wz
27f30     00 40 00 AF 
27f34     00 7A 66 A6 |  if_e	neg	result1, ##8388608
27f38     58 00 90 AD |  if_e	jmp	#LR__3854
27f3c     7E AA 66 F6 | 	neg	local03, #126
27f40     D7 08 48 FB | 	callpa	#(@LR__3852-@LR__3851)>>2,fcache_load_ptr_
27f44                 | LR__3851
27f44     17 AC 2E F4 | 	testbn	local04, #23 wz
27f48     01 AC 66 A0 |  if_e	shl	local04, #1
27f4c     01 AA 06 A1 |  if_e	add	local03, #1
27f50     F0 FF 9F AD |  if_e	jmp	#LR__3851
27f54                 | LR__3852
27f54                 | LR__3853
27f54     0E AC 62 FD | 	qlog	local04
27f58     01 AA 86 F1 | 	sub	local03, #1
27f5c     55 93 52 F6 | 	abs	arg01, local03 wc
27f60     1F B0 C6 C9 |  if_b	decod	local06, #31
27f64     00 B0 06 36 |  if_ae	mov	local06, #0
27f68     18 AE 62 FD | 	getqx	local05
27f6c     9B AE 06 F4 | 	bitl	local05, #155
27f70     08 AE 06 F1 | 	add	local05, #8
27f74     04 AE 46 F0 | 	shr	local05, #4
27f78     00 C0 1F FF 
27f7c     00 AE 06 F1 | 	add	local05, ##1065353216
27f80     00 ED BF FD | 	call	#__system___float_fromuns
27f84     58 7B 62 F5 | 	xor	result1, local06
27f88     3D 95 02 F6 | 	mov	arg02, result1
27f8c     57 93 02 F6 | 	mov	arg01, local05
27f90     24 ED BF FD | 	call	#__system___float_add
27f94                 | LR__3854
27f94     E7 F0 03 F6 | 	mov	ptra, fp
27f98     F2 00 A0 FD | 	call	#popregs_
27f9c                 | __system____builtin_log2f_ret
27f9c     2D 00 64 FD | 	ret
27fa0                 | 
27fa0                 | __system____builtin_powf
27fa0     04 CA 05 F6 | 	mov	COUNT_, #4
27fa4     E8 00 A0 FD | 	call	#pushregs_
27fa8     49 A7 02 F6 | 	mov	local01, arg01
27fac     4A A9 02 F6 | 	mov	local02, arg02
27fb0     54 93 02 F6 | 	mov	arg01, local02
27fb4     00 94 06 F6 | 	mov	arg02, #0
27fb8     94 F5 BF FD | 	call	#__system___float_tointeger
27fbc     3D AB 02 F6 | 	mov	local03, result1
27fc0     55 93 52 F6 | 	abs	arg01, local03 wc
27fc4     1F AC C6 C9 |  if_b	decod	local04, #31
27fc8     00 AC 06 36 |  if_ae	mov	local04, #0
27fcc     B4 EC BF FD | 	call	#__system___float_fromuns
27fd0     56 7B 62 F5 | 	xor	result1, local04
27fd4     3D 93 02 F6 | 	mov	arg01, result1
27fd8     54 95 02 F6 | 	mov	arg02, local02
27fdc     01 96 06 F6 | 	mov	arg03, #1
27fe0     D8 F4 BF FD | 	call	#__system___float_cmp
27fe4     00 7A 0E F2 | 	cmp	result1, #0 wz
27fe8     18 00 90 5D |  if_ne	jmp	#LR__3860
27fec     00 C0 1F FF 
27ff0     00 92 06 F6 | 	mov	arg01, ##1065353216
27ff4     53 95 02 F6 | 	mov	arg02, local01
27ff8     55 97 02 F6 | 	mov	arg03, local03
27ffc     A0 00 B0 FD | 	call	#__system___float_pow_n
28000     58 00 90 FD | 	jmp	#LR__3861
28004                 | LR__3860
28004     53 93 02 F6 | 	mov	arg01, local01
28008     00 94 06 F6 | 	mov	arg02, #0
2800c     01 96 06 F6 | 	mov	arg03, #1
28010     A8 F4 BF FD | 	call	#__system___float_cmp
28014     00 7A 56 F2 | 	cmps	result1, #0 wc
28018     00 E0 3F CF 
2801c     00 7A 06 C6 |  if_b	mov	result1, ##2143289344
28020     38 00 90 CD |  if_b	jmp	#LR__3861
28024     53 93 02 F6 | 	mov	arg01, local01
28028     00 94 06 F6 | 	mov	arg02, #0
2802c     01 96 06 F6 | 	mov	arg03, #1
28030     88 F4 BF FD | 	call	#__system___float_cmp
28034     00 7A 0E F2 | 	cmp	result1, #0 wz
28038     00 7A 06 A6 |  if_e	mov	result1, #0
2803c     1C 00 90 AD |  if_e	jmp	#LR__3861
28040     53 93 02 F6 | 	mov	arg01, local01
28044     20 FE BF FD | 	call	#__system____builtin_log2f
28048     3D 93 02 F6 | 	mov	arg01, result1
2804c     54 95 02 F6 | 	mov	arg02, local02
28050     34 F0 BF FD | 	call	#__system___float_mul
28054     3D 93 02 F6 | 	mov	arg01, result1
28058     F8 FC BF FD | 	call	#__system____builtin_exp2f
2805c                 | LR__3861
2805c     E7 F0 03 F6 | 	mov	ptra, fp
28060     F2 00 A0 FD | 	call	#popregs_
28064                 | __system____builtin_powf_ret
28064     2D 00 64 FD | 	ret
28068                 | 
28068                 | __system____builtin_logbase
28068     02 CA 05 F6 | 	mov	COUNT_, #2
2806c     E8 00 A0 FD | 	call	#pushregs_
28070     49 A7 02 F6 | 	mov	local01, arg01
28074     4A 93 02 F6 | 	mov	arg01, arg02
28078     EC FD BF FD | 	call	#__system____builtin_log2f
2807c     3D A9 02 F6 | 	mov	local02, result1
28080     53 93 02 F6 | 	mov	arg01, local01
28084     E0 FD BF FD | 	call	#__system____builtin_log2f
28088     3D 95 02 F6 | 	mov	arg02, result1
2808c     54 93 02 F6 | 	mov	arg01, local02
28090     F8 F1 BF FD | 	call	#__system___float_div
28094     E7 F0 03 F6 | 	mov	ptra, fp
28098     F2 00 A0 FD | 	call	#popregs_
2809c                 | __system____builtin_logbase_ret
2809c     2D 00 64 FD | 	ret
280a0                 | 
280a0                 | __system___float_pow_n
280a0     05 CA 05 F6 | 	mov	COUNT_, #5
280a4     E8 00 A0 FD | 	call	#pushregs_
280a8     49 A7 02 F6 | 	mov	local01, arg01
280ac     4A A9 02 F6 | 	mov	local02, arg02
280b0     4B AB 02 F6 | 	mov	local03, arg03
280b4     00 AA 56 F2 | 	cmps	local03, #0 wc
280b8     18 00 90 3D |  if_ae	jmp	#LR__3870
280bc     01 AC 06 F6 | 	mov	local04, #1
280c0     55 AB 62 F6 | 	neg	local03, local03
280c4     00 AA 56 F2 | 	cmps	local03, #0 wc
280c8     00 7A 06 C6 |  if_b	mov	result1, #0
280cc     94 00 90 CD |  if_b	jmp	#LR__3878
280d0     04 00 90 FD | 	jmp	#LR__3871
280d4                 | LR__3870
280d4     00 AC 06 F6 | 	mov	local04, #0
280d8                 | LR__3871
280d8     00 C0 1F FF 
280dc     00 AE 06 F6 | 	mov	local05, ##1065353216
280e0                 | LR__3872
280e0     01 AA 56 F2 | 	cmps	local03, #1 wc
280e4     30 00 90 CD |  if_b	jmp	#LR__3874
280e8     01 AA CE F7 | 	test	local03, #1 wz
280ec     10 00 90 AD |  if_e	jmp	#LR__3873
280f0     57 93 02 F6 | 	mov	arg01, local05
280f4     54 95 02 F6 | 	mov	arg02, local02
280f8     8C EF BF FD | 	call	#__system___float_mul
280fc     3D AF 02 F6 | 	mov	local05, result1
28100                 | LR__3873
28100     01 AA C6 F0 | 	sar	local03, #1
28104     54 93 02 F6 | 	mov	arg01, local02
28108     54 95 02 F6 | 	mov	arg02, local02
2810c     78 EF BF FD | 	call	#__system___float_mul
28110     3D A9 02 F6 | 	mov	local02, result1
28114     C8 FF 9F FD | 	jmp	#LR__3872
28118                 | LR__3874
28118     00 AC 0E F2 | 	cmp	local04, #0 wz
2811c     14 00 90 AD |  if_e	jmp	#LR__3875
28120     53 93 02 F6 | 	mov	arg01, local01
28124     57 95 02 F6 | 	mov	arg02, local05
28128     60 F1 BF FD | 	call	#__system___float_div
2812c     3D AF 02 F6 | 	mov	local05, result1
28130     2C 00 90 FD | 	jmp	#LR__3877
28134                 | LR__3875
28134     53 93 02 F6 | 	mov	arg01, local01
28138     00 C0 1F FF 
2813c     00 94 06 F6 | 	mov	arg02, ##1065353216
28140     01 96 06 F6 | 	mov	arg03, #1
28144     74 F3 BF FD | 	call	#__system___float_cmp
28148     00 7A 0E F2 | 	cmp	result1, #0 wz
2814c     10 00 90 AD |  if_e	jmp	#LR__3876
28150     53 93 02 F6 | 	mov	arg01, local01
28154     57 95 02 F6 | 	mov	arg02, local05
28158     2C EF BF FD | 	call	#__system___float_mul
2815c     3D AF 02 F6 | 	mov	local05, result1
28160                 | LR__3876
28160                 | LR__3877
28160     57 7B 02 F6 | 	mov	result1, local05
28164                 | LR__3878
28164     E7 F0 03 F6 | 	mov	ptra, fp
28168     F2 00 A0 FD | 	call	#popregs_
2816c                 | __system___float_pow_n_ret
2816c     2D 00 64 FD | 	ret
28170                 | 
28170                 | __system___gc_ptrs
28170     2C 81 02 F6 | 	mov	_var01, __heap_ptr
28174     40 83 02 F6 | 	mov	_var02, _var01
28178     BB 00 00 FF 
2817c     F8 82 06 F1 | 	add	_var02, ##95992
28180     40 7D 0A FB | 	rdlong	result2, _var01 wz
28184     74 00 90 5D |  if_ne	jmp	#LR__3880
28188     41 7D 02 F6 | 	mov	result2, _var02
2818c     40 7D 82 F1 | 	sub	result2, _var01
28190     40 03 58 FC | 	wrword	#1, _var01
28194     40 7B 02 F6 | 	mov	result1, _var01
28198     02 7A 06 F1 | 	add	result1, #2
2819c     36 00 80 FF 
281a0     3D 21 59 FC | 	wrword	##27792, result1
281a4     40 7B 02 F6 | 	mov	result1, _var01
281a8     04 7A 06 F1 | 	add	result1, #4
281ac     3D 01 58 FC | 	wrword	#0, result1
281b0     40 7B 02 F6 | 	mov	result1, _var01
281b4     06 7A 06 F1 | 	add	result1, #6
281b8     3D 03 58 FC | 	wrword	#1, result1
281bc     10 80 06 F1 | 	add	_var01, #16
281c0     3E 7D 52 F6 | 	abs	result2, result2 wc
281c4     04 7C 46 F0 | 	shr	result2, #4
281c8     3E 7D 82 F6 | 	negc	result2, result2
281cc     40 7D 52 FC | 	wrword	result2, _var01
281d0     40 7D 02 F6 | 	mov	result2, _var01
281d4     02 7C 06 F1 | 	add	result2, #2
281d8     36 00 80 FF 
281dc     3E 1F 59 FC | 	wrword	##27791, result2
281e0     40 7D 02 F6 | 	mov	result2, _var01
281e4     04 7C 06 F1 | 	add	result2, #4
281e8     3E 01 58 FC | 	wrword	#0, result2
281ec     40 7D 02 F6 | 	mov	result2, _var01
281f0     06 7C 06 F1 | 	add	result2, #6
281f4     3E 01 58 FC | 	wrword	#0, result2
281f8     10 80 86 F1 | 	sub	_var01, #16
281fc                 | LR__3880
281fc     40 7B 02 F6 | 	mov	result1, _var01
28200     41 7D 02 F6 | 	mov	result2, _var02
28204                 | __system___gc_ptrs_ret
28204     2D 00 64 FD | 	ret
28208                 | 
28208                 | __system___gc_tryalloc
28208     0B CA 05 F6 | 	mov	COUNT_, #11
2820c     E8 00 A0 FD | 	call	#pushregs_
28210     49 A7 02 F6 | 	mov	local01, arg01
28214     4A A9 02 F6 | 	mov	local02, arg02
28218     54 FF BF FD | 	call	#__system___gc_ptrs
2821c     3D AB 02 F6 | 	mov	local03, result1
28220     3E AD 02 F6 | 	mov	local04, result2
28224     55 AF 02 F6 | 	mov	local05, local03
28228     00 B0 06 F6 | 	mov	local06, #0
2822c     D7 1E 48 FB | 	callpa	#(@LR__3891-@LR__3890)>>2,fcache_load_ptr_
28230                 | LR__3890
28230     57 B3 02 F6 | 	mov	local07, local05
28234     06 AE 06 F1 | 	add	local05, #6
28238     57 95 EA FA | 	rdword	arg02, local05 wz
2823c     55 93 02 F6 | 	mov	arg01, local03
28240     00 7A 06 A6 |  if_e	mov	result1, #0
28244     04 94 66 50 |  if_ne	shl	arg02, #4
28248     4A 93 02 51 |  if_ne	add	arg01, arg02
2824c     49 7B 02 56 |  if_ne	mov	result1, arg01
28250     3D AF 0A F6 | 	mov	local05, result1 wz
28254     57 B1 E2 5A |  if_ne	rdword	local06, local05
28258     00 AE 0E F2 | 	cmp	local05, #0 wz
2825c     56 AF 52 52 |  if_ne	cmps	local05, local04 wc
28260     08 00 90 1D |  if_a	jmp	#LR__3892
28264     58 A7 5A 52 |  if_ne	cmps	local01, local06 wcz
28268     C4 FF 9F 1D |  if_a	jmp	#LR__3890
2826c                 | LR__3891
2826c                 | LR__3892
2826c     00 AE 0E F2 | 	cmp	local05, #0 wz
28270     57 7B 02 A6 |  if_e	mov	result1, local05
28274     3C 01 90 AD |  if_e	jmp	#LR__3895
28278     57 7D 02 F6 | 	mov	result2, local05
2827c     06 7C 06 F1 | 	add	result2, #6
28280     3E B5 E2 FA | 	rdword	local08, result2
28284     58 A7 52 F2 | 	cmps	local01, local06 wc
28288     C0 00 90 3D |  if_ae	jmp	#LR__3894
2828c     57 A7 52 FC | 	wrword	local01, local05
28290     57 93 02 F6 | 	mov	arg01, local05
28294     53 B5 02 F6 | 	mov	local08, local01
28298     04 B4 66 F0 | 	shl	local08, #4
2829c     5A 93 02 F1 | 	add	arg01, local08
282a0     53 B1 82 F1 | 	sub	local06, local01
282a4     49 B1 52 FC | 	wrword	local06, arg01
282a8     49 B5 02 F6 | 	mov	local08, arg01
282ac     02 B4 06 F1 | 	add	local08, #2
282b0     36 00 80 FF 
282b4     5A 1F 59 FC | 	wrword	##27791, local08
282b8     57 95 0A F6 | 	mov	arg02, local05 wz
282bc     00 7A 06 A6 |  if_e	mov	result1, #0
282c0     55 95 82 51 |  if_ne	sub	arg02, local03
282c4     04 94 46 50 |  if_ne	shr	arg02, #4
282c8     4A 7B 02 56 |  if_ne	mov	result1, arg02
282cc     49 B5 02 F6 | 	mov	local08, arg01
282d0     04 B4 06 F1 | 	add	local08, #4
282d4     5A 7B 52 FC | 	wrword	result1, local08
282d8     57 B5 02 F6 | 	mov	local08, local05
282dc     06 B4 06 F1 | 	add	local08, #6
282e0     49 95 02 F6 | 	mov	arg02, arg01
282e4     5A B5 E2 FA | 	rdword	local08, local08
282e8     06 94 06 F1 | 	add	arg02, #6
282ec     4A B5 52 FC | 	wrword	local08, arg02
282f0     49 B7 02 F6 | 	mov	local09, arg01
282f4     5B 95 0A F6 | 	mov	arg02, local09 wz
282f8     00 7A 06 A6 |  if_e	mov	result1, #0
282fc     55 95 82 51 |  if_ne	sub	arg02, local03
28300     04 94 46 50 |  if_ne	shr	arg02, #4
28304     4A 7B 02 56 |  if_ne	mov	result1, arg02
28308     3D B5 02 F6 | 	mov	local08, result1
2830c     49 B9 EA FA | 	rdword	local10, arg01 wz
28310     00 7A 06 A6 |  if_e	mov	result1, #0
28314     04 B8 66 50 |  if_ne	shl	local10, #4
28318     5C 93 02 51 |  if_ne	add	arg01, local10
2831c     49 7B 02 56 |  if_ne	mov	result1, arg01
28320     3D BB 0A F6 | 	mov	local11, result1 wz
28324     24 00 90 AD |  if_e	jmp	#LR__3893
28328     56 BB 52 F2 | 	cmps	local11, local04 wc
2832c     1C 00 90 3D |  if_ae	jmp	#LR__3893
28330     5B 95 0A F6 | 	mov	arg02, local09 wz
28334     00 7A 06 A6 |  if_e	mov	result1, #0
28338     55 95 82 51 |  if_ne	sub	arg02, local03
2833c     04 94 46 50 |  if_ne	shr	arg02, #4
28340     4A 7B 02 56 |  if_ne	mov	result1, arg02
28344     04 BA 06 F1 | 	add	local11, #4
28348     5D 7B 52 FC | 	wrword	result1, local11
2834c                 | LR__3893
2834c                 | LR__3894
2834c     06 B2 06 F1 | 	add	local07, #6
28350     59 B5 52 FC | 	wrword	local08, local07
28354     36 00 00 FF 
28358     80 B6 06 F6 | 	mov	local09, ##27776
2835c     54 B7 42 F5 | 	or	local09, local02
28360     00 7A 06 F6 | 	mov	result1, #0
28364     01 7A 62 FD | 	cogid	result1
28368     3D B7 42 F5 | 	or	local09, result1
2836c     57 BB 02 F6 | 	mov	local11, local05
28370     02 BA 06 F1 | 	add	local11, #2
28374     5D B7 52 FC | 	wrword	local09, local11
28378     55 B7 02 F6 | 	mov	local09, local03
2837c     08 B6 06 F1 | 	add	local09, #8
28380     57 BB 02 F6 | 	mov	local11, local05
28384     5B B7 E2 FA | 	rdword	local09, local09
28388     06 BA 06 F1 | 	add	local11, #6
2838c     5D B7 52 FC | 	wrword	local09, local11
28390     57 95 0A F6 | 	mov	arg02, local05 wz
28394     00 7A 06 A6 |  if_e	mov	result1, #0
28398     55 95 82 51 |  if_ne	sub	arg02, local03
2839c     04 94 46 50 |  if_ne	shr	arg02, #4
283a0     4A 7B 02 56 |  if_ne	mov	result1, arg02
283a4     08 AA 06 F1 | 	add	local03, #8
283a8     55 7B 52 FC | 	wrword	result1, local03
283ac     08 AE 06 F1 | 	add	local05, #8
283b0     57 7B 02 F6 | 	mov	result1, local05
283b4                 | LR__3895
283b4     E7 F0 03 F6 | 	mov	ptra, fp
283b8     F2 00 A0 FD | 	call	#popregs_
283bc                 | __system___gc_tryalloc_ret
283bc     2D 00 64 FD | 	ret
283c0                 | 
283c0                 | __system___gc_alloc_managed
283c0     01 CA 05 F6 | 	mov	COUNT_, #1
283c4     E8 00 A0 FD | 	call	#pushregs_
283c8     49 A7 02 F6 | 	mov	local01, arg01
283cc     00 94 06 F6 | 	mov	arg02, #0
283d0     1C 00 B0 FD | 	call	#__system___gc_doalloc
283d4     3D 95 0A F6 | 	mov	arg02, result1 wz
283d8     01 A6 56 A2 |  if_e	cmps	local01, #1 wc
283dc     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
283e0     4A 7B 02 D6 |  if_c_or_nz	mov	result1, arg02
283e4     E7 F0 03 F6 | 	mov	ptra, fp
283e8     F2 00 A0 FD | 	call	#popregs_
283ec                 | __system___gc_alloc_managed_ret
283ec     2D 00 64 FD | 	ret
283f0                 | 
283f0                 | __system___gc_doalloc
283f0     06 CA 05 F6 | 	mov	COUNT_, #6
283f4     E8 00 A0 FD | 	call	#pushregs_
283f8     49 A7 0A F6 | 	mov	local01, arg01 wz
283fc     4A A9 02 F6 | 	mov	local02, arg02
28400     00 7A 06 A6 |  if_e	mov	result1, #0
28404     84 00 90 AD |  if_e	jmp	#LR__3907
28408     17 A6 06 F1 | 	add	local01, #23
2840c     0F A6 26 F5 | 	andn	local01, #15
28410     04 A6 46 F0 | 	shr	local01, #4
28414     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
28418     1C 92 06 F1 | 	add	arg01, #28
2841c     98 C5 BF FD | 	call	#__system___lockmem
28420     53 93 02 F6 | 	mov	arg01, local01
28424     54 95 02 F6 | 	mov	arg02, local02
28428     DC FD BF FD | 	call	#__system___gc_tryalloc
2842c     3D AB 0A F6 | 	mov	local03, result1 wz
28430     14 00 90 5D |  if_ne	jmp	#LR__3900
28434     64 03 B0 FD | 	call	#__system___gc_docollect
28438     53 93 02 F6 | 	mov	arg01, local01
2843c     54 95 02 F6 | 	mov	arg02, local02
28440     C4 FD BF FD | 	call	#__system___gc_tryalloc
28444     3D AB 02 F6 | 	mov	local03, result1
28448                 | LR__3900
28448     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
2844c     1C 92 06 F1 | 	add	arg01, #28
28450     49 01 68 FC | 	wrlong	#0, arg01
28454     00 AA 0E F2 | 	cmp	local03, #0 wz
28458     2C 00 90 AD |  if_e	jmp	#LR__3906
2845c     04 A6 66 F0 | 	shl	local01, #4
28460     08 A6 86 F1 | 	sub	local01, #8
28464     53 AD 52 F6 | 	abs	local04, local01 wc
28468     02 AC 46 F0 | 	shr	local04, #2
2846c     56 AF 8A F6 | 	negc	local05, local04 wz
28470     55 B1 02 F6 | 	mov	local06, local03
28474     10 00 90 AD |  if_e	jmp	#LR__3905
28478     D7 06 48 FB | 	callpa	#(@LR__3903-@LR__3901)>>2,fcache_load_ptr_
2847c                 | LR__3901
2847c     57 05 D8 FC | 	rep	@LR__3904, local05
28480                 | LR__3902
28480     58 01 68 FC | 	wrlong	#0, local06
28484     04 B0 06 F1 | 	add	local06, #4
28488                 | LR__3903
28488                 | LR__3904
28488                 | LR__3905
28488                 | LR__3906
28488     55 7B 02 F6 | 	mov	result1, local03
2848c                 | LR__3907
2848c     E7 F0 03 F6 | 	mov	ptra, fp
28490     F2 00 A0 FD | 	call	#popregs_
28494                 | __system___gc_doalloc_ret
28494     2D 00 64 FD | 	ret
28498                 | 
28498                 | __system___gc_isvalidptr
28498     F8 96 06 F4 | 	bitl	arg03, #248
2849c     08 96 86 F1 | 	sub	arg03, #8
284a0     49 97 52 F2 | 	cmps	arg03, arg01 wc
284a4     08 00 90 CD |  if_b	jmp	#LR__3910
284a8     4A 97 52 F2 | 	cmps	arg03, arg02 wc
284ac     08 00 90 CD |  if_b	jmp	#LR__3911
284b0                 | LR__3910
284b0     00 7A 06 F6 | 	mov	result1, #0
284b4     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
284b8                 | LR__3911
284b8     4B 81 02 F6 | 	mov	_var01, arg03
284bc     49 81 62 F5 | 	xor	_var01, arg01
284c0     0F 80 CE F7 | 	test	_var01, #15 wz
284c4     00 7A 06 56 |  if_ne	mov	result1, #0
284c8     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
284cc     4B 81 02 F6 | 	mov	_var01, arg03
284d0     02 80 06 F1 | 	add	_var01, #2
284d4     40 81 E2 FA | 	rdword	_var01, _var01
284d8     7F 00 00 FF 
284dc     C0 81 06 F5 | 	and	_var01, ##65472
284e0     36 00 00 FF 
284e4     80 80 0E F2 | 	cmp	_var01, ##27776 wz
284e8     00 7A 06 56 |  if_ne	mov	result1, #0
284ec     4B 7B 02 A6 |  if_e	mov	result1, arg03
284f0                 | __system___gc_isvalidptr_ret
284f0     2D 00 64 FD | 	ret
284f4                 | 
284f4                 | __system___gc_free
284f4     49 97 02 F6 | 	mov	arg03, arg01
284f8     74 FC BF FD | 	call	#__system___gc_ptrs
284fc     3D 93 02 F6 | 	mov	arg01, result1
28500     3E 95 02 F6 | 	mov	arg02, result2
28504     90 FF BF FD | 	call	#__system___gc_isvalidptr
28508     3D 95 0A F6 | 	mov	arg02, result1 wz
2850c     20 00 90 AD |  if_e	jmp	#LR__3920
28510     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
28514     1C 92 06 F1 | 	add	arg01, #28
28518     9C C4 BF FD | 	call	#__system___lockmem
2851c     4A 93 02 F6 | 	mov	arg01, arg02
28520     10 00 B0 FD | 	call	#__system___gc_dofree
28524     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
28528     1C 92 06 F1 | 	add	arg01, #28
2852c     49 01 68 FC | 	wrlong	#0, arg01
28530                 | LR__3920
28530                 | __system___gc_free_ret
28530     2D 00 64 FD | 	ret
28534                 | 
28534                 | __system___gc_dofree
28534     06 CA 05 F6 | 	mov	COUNT_, #6
28538     E8 00 A0 FD | 	call	#pushregs_
2853c     49 A7 02 F6 | 	mov	local01, arg01
28540     2C FC BF FD | 	call	#__system___gc_ptrs
28544     3D A9 02 F6 | 	mov	local02, result1
28548     3E AB 02 F6 | 	mov	local03, result2
2854c     53 95 02 F6 | 	mov	arg02, local01
28550     02 94 06 F1 | 	add	arg02, #2
28554     36 00 80 FF 
28558     4A 1F 59 FC | 	wrword	##27791, arg02
2855c     53 AD 02 F6 | 	mov	local04, local01
28560     53 93 02 F6 | 	mov	arg01, local01
28564     49 AF EA FA | 	rdword	local05, arg01 wz
28568     00 7A 06 A6 |  if_e	mov	result1, #0
2856c     04 AE 66 50 |  if_ne	shl	local05, #4
28570     57 93 02 51 |  if_ne	add	arg01, local05
28574     49 7B 02 56 |  if_ne	mov	result1, arg01
28578     3D B1 02 F6 | 	mov	local06, result1
2857c     D7 24 48 FB | 	callpa	#(@LR__3931-@LR__3930)>>2,fcache_load_ptr_
28580                 | LR__3930
28580     04 AC 06 F1 | 	add	local04, #4
28584     56 95 EA FA | 	rdword	arg02, local04 wz
28588     54 93 02 F6 | 	mov	arg01, local02
2858c     00 7A 06 A6 |  if_e	mov	result1, #0
28590     04 94 66 50 |  if_ne	shl	arg02, #4
28594     4A 93 02 51 |  if_ne	add	arg01, arg02
28598     49 7B 02 56 |  if_ne	mov	result1, arg01
2859c     3D AD 0A F6 | 	mov	local04, result1 wz
285a0     24 00 90 AD |  if_e	jmp	#LR__3932
285a4     56 93 02 F6 | 	mov	arg01, local04
285a8     00 7A 06 F6 | 	mov	result1, #0
285ac     02 92 06 F1 | 	add	arg01, #2
285b0     49 93 E2 FA | 	rdword	arg01, arg01
285b4     36 00 00 FF 
285b8     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
285bc     01 7A 66 A6 |  if_e	neg	result1, #1
285c0     00 7A 0E F2 | 	cmp	result1, #0 wz
285c4     B8 FF 9F AD |  if_e	jmp	#LR__3930
285c8                 | LR__3931
285c8                 | LR__3932
285c8     00 AC 0E F2 | 	cmp	local04, #0 wz
285cc     54 AD 02 A6 |  if_e	mov	local04, local02
285d0     56 95 02 F6 | 	mov	arg02, local04
285d4     06 94 06 F1 | 	add	arg02, #6
285d8     53 93 02 F6 | 	mov	arg01, local01
285dc     4A 95 E2 FA | 	rdword	arg02, arg02
285e0     06 92 06 F1 | 	add	arg01, #6
285e4     49 95 52 FC | 	wrword	arg02, arg01
285e8     53 95 0A F6 | 	mov	arg02, local01 wz
285ec     00 7A 06 A6 |  if_e	mov	result1, #0
285f0     54 95 82 51 |  if_ne	sub	arg02, local02
285f4     04 94 46 50 |  if_ne	shr	arg02, #4
285f8     4A 7B 02 56 |  if_ne	mov	result1, arg02
285fc     56 95 02 F6 | 	mov	arg02, local04
28600     06 94 06 F1 | 	add	arg02, #6
28604     4A 7B 52 FC | 	wrword	result1, arg02
28608     54 AD 0A F2 | 	cmp	local04, local02 wz
2860c     A4 00 90 AD |  if_e	jmp	#LR__3935
28610     56 93 02 F6 | 	mov	arg01, local04
28614     49 AF EA FA | 	rdword	local05, arg01 wz
28618     00 7A 06 A6 |  if_e	mov	result1, #0
2861c     04 AE 66 50 |  if_ne	shl	local05, #4
28620     57 93 02 51 |  if_ne	add	arg01, local05
28624     49 7B 02 56 |  if_ne	mov	result1, arg01
28628     53 7B 0A F2 | 	cmp	result1, local01 wz
2862c     84 00 90 5D |  if_ne	jmp	#LR__3934
28630     56 B1 E2 FA | 	rdword	local06, local04
28634     53 95 E2 FA | 	rdword	arg02, local01
28638     4A B1 02 F1 | 	add	local06, arg02
2863c     56 B1 52 FC | 	wrword	local06, local04
28640     53 B1 02 F6 | 	mov	local06, local01
28644     02 B0 06 F1 | 	add	local06, #2
28648     58 01 58 FC | 	wrword	#0, local06
2864c     53 93 02 F6 | 	mov	arg01, local01
28650     49 AF EA FA | 	rdword	local05, arg01 wz
28654     00 7A 06 A6 |  if_e	mov	result1, #0
28658     04 AE 66 50 |  if_ne	shl	local05, #4
2865c     57 93 02 51 |  if_ne	add	arg01, local05
28660     49 7B 02 56 |  if_ne	mov	result1, arg01
28664     3D B1 02 F6 | 	mov	local06, result1
28668     55 B1 52 F2 | 	cmps	local06, local03 wc
2866c     20 00 90 3D |  if_ae	jmp	#LR__3933
28670     56 95 0A F6 | 	mov	arg02, local04 wz
28674     00 7A 06 A6 |  if_e	mov	result1, #0
28678     54 95 82 51 |  if_ne	sub	arg02, local02
2867c     04 94 46 50 |  if_ne	shr	arg02, #4
28680     4A 7B 02 56 |  if_ne	mov	result1, arg02
28684     58 95 02 F6 | 	mov	arg02, local06
28688     04 94 06 F1 | 	add	arg02, #4
2868c     4A 7B 52 FC | 	wrword	result1, arg02
28690                 | LR__3933
28690     53 95 02 F6 | 	mov	arg02, local01
28694     06 94 06 F1 | 	add	arg02, #6
28698     56 7D 02 F6 | 	mov	result2, local04
2869c     4A 95 E2 FA | 	rdword	arg02, arg02
286a0     06 7C 06 F1 | 	add	result2, #6
286a4     3E 95 52 FC | 	wrword	arg02, result2
286a8     06 A6 06 F1 | 	add	local01, #6
286ac     53 01 58 FC | 	wrword	#0, local01
286b0     56 A7 02 F6 | 	mov	local01, local04
286b4                 | LR__3934
286b4                 | LR__3935
286b4     53 93 02 F6 | 	mov	arg01, local01
286b8     49 AF EA FA | 	rdword	local05, arg01 wz
286bc     00 7A 06 A6 |  if_e	mov	result1, #0
286c0     04 AE 66 50 |  if_ne	shl	local05, #4
286c4     57 93 02 51 |  if_ne	add	arg01, local05
286c8     49 7B 02 56 |  if_ne	mov	result1, arg01
286cc     3D 95 0A F6 | 	mov	arg02, result1 wz
286d0     B8 00 90 AD |  if_e	jmp	#LR__3937
286d4     55 95 52 F2 | 	cmps	arg02, local03 wc
286d8     B0 00 90 3D |  if_ae	jmp	#LR__3937
286dc     4A 93 02 F6 | 	mov	arg01, arg02
286e0     00 7A 06 F6 | 	mov	result1, #0
286e4     02 92 06 F1 | 	add	arg01, #2
286e8     49 93 E2 FA | 	rdword	arg01, arg01
286ec     36 00 00 FF 
286f0     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
286f4     01 7A 66 A6 |  if_e	neg	result1, #1
286f8     00 7A 0E F2 | 	cmp	result1, #0 wz
286fc     8C 00 90 AD |  if_e	jmp	#LR__3937
28700     53 AD 02 F6 | 	mov	local04, local01
28704     56 B1 E2 FA | 	rdword	local06, local04
28708     4A 93 02 F6 | 	mov	arg01, arg02
2870c     49 A7 E2 FA | 	rdword	local01, arg01
28710     53 B1 02 F1 | 	add	local06, local01
28714     56 B1 52 FC | 	wrword	local06, local04
28718     49 B1 02 F6 | 	mov	local06, arg01
2871c     06 B0 06 F1 | 	add	local06, #6
28720     56 A7 02 F6 | 	mov	local01, local04
28724     58 B1 E2 FA | 	rdword	local06, local06
28728     06 A6 06 F1 | 	add	local01, #6
2872c     53 B1 52 FC | 	wrword	local06, local01
28730     49 B1 02 F6 | 	mov	local06, arg01
28734     02 B0 06 F1 | 	add	local06, #2
28738     58 55 59 FC | 	wrword	#170, local06
2873c     49 B1 02 F6 | 	mov	local06, arg01
28740     06 B0 06 F1 | 	add	local06, #6
28744     58 01 58 FC | 	wrword	#0, local06
28748     49 AF EA FA | 	rdword	local05, arg01 wz
2874c     00 7A 06 A6 |  if_e	mov	result1, #0
28750     04 AE 66 50 |  if_ne	shl	local05, #4
28754     57 93 02 51 |  if_ne	add	arg01, local05
28758     49 7B 02 56 |  if_ne	mov	result1, arg01
2875c     3D B1 0A F6 | 	mov	local06, result1 wz
28760     28 00 90 AD |  if_e	jmp	#LR__3936
28764     55 B1 52 F2 | 	cmps	local06, local03 wc
28768     20 00 90 3D |  if_ae	jmp	#LR__3936
2876c     56 95 0A F6 | 	mov	arg02, local04 wz
28770     00 7A 06 A6 |  if_e	mov	result1, #0
28774     54 95 82 51 |  if_ne	sub	arg02, local02
28778     04 94 46 50 |  if_ne	shr	arg02, #4
2877c     4A 7B 02 56 |  if_ne	mov	result1, arg02
28780     58 AD 02 F6 | 	mov	local04, local06
28784     04 AC 06 F1 | 	add	local04, #4
28788     56 7B 52 FC | 	wrword	result1, local04
2878c                 | LR__3936
2878c                 | LR__3937
2878c     58 7B 02 F6 | 	mov	result1, local06
28790     E7 F0 03 F6 | 	mov	ptra, fp
28794     F2 00 A0 FD | 	call	#popregs_
28798                 | __system___gc_dofree_ret
28798     2D 00 64 FD | 	ret
2879c                 | 
2879c                 | __system___gc_docollect
2879c     05 CA 05 F6 | 	mov	COUNT_, #5
287a0     E8 00 A0 FD | 	call	#pushregs_
287a4     C8 F9 BF FD | 	call	#__system___gc_ptrs
287a8     3E A7 02 F6 | 	mov	local01, result2
287ac     3D A9 02 F6 | 	mov	local02, result1
287b0     54 93 02 F6 | 	mov	arg01, local02
287b4     49 AB EA FA | 	rdword	local03, arg01 wz
287b8     00 7A 06 A6 |  if_e	mov	result1, #0
287bc     04 AA 66 50 |  if_ne	shl	local03, #4
287c0     55 93 02 51 |  if_ne	add	arg01, local03
287c4     49 7B 02 56 |  if_ne	mov	result1, arg01
287c8     3D AD 0A F6 | 	mov	local04, result1 wz
287cc     00 7A 06 F6 | 	mov	result1, #0
287d0     01 7A 62 FD | 	cogid	result1
287d4     3D AF 02 F6 | 	mov	local05, result1
287d8     48 00 90 AD |  if_e	jmp	#LR__3942
287dc     D7 22 48 FB | 	callpa	#(@LR__3941-@LR__3940)>>2,fcache_load_ptr_
287e0                 | LR__3940
287e0     53 AD 52 F2 | 	cmps	local04, local01 wc
287e4     3C 00 90 3D |  if_ae	jmp	#LR__3942
287e8     56 95 02 F6 | 	mov	arg02, local04
287ec     02 94 06 F1 | 	add	arg02, #2
287f0     4A 95 E2 FA | 	rdword	arg02, arg02
287f4     20 94 26 F5 | 	andn	arg02, #32
287f8     56 93 02 F6 | 	mov	arg01, local04
287fc     02 92 06 F1 | 	add	arg01, #2
28800     49 95 52 FC | 	wrword	arg02, arg01
28804     56 93 02 F6 | 	mov	arg01, local04
28808     49 AB EA FA | 	rdword	local03, arg01 wz
2880c     00 7A 06 A6 |  if_e	mov	result1, #0
28810     04 AA 66 50 |  if_ne	shl	local03, #4
28814     55 93 02 51 |  if_ne	add	arg01, local03
28818     49 7B 02 56 |  if_ne	mov	result1, arg01
2881c     3D AD 0A F6 | 	mov	local04, result1 wz
28820     BC FF 9F 5D |  if_ne	jmp	#LR__3940
28824                 | LR__3941
28824                 | LR__3942
28824     00 AA 06 F6 | 	mov	local03, #0
28828     00 92 06 F6 | 	mov	arg01, #0
2882c     60 C1 BF FD | 	call	#__system____topofstack
28830     3D 95 02 F6 | 	mov	arg02, result1
28834     55 93 02 F6 | 	mov	arg01, local03
28838     90 00 B0 FD | 	call	#__system___gc_markhub
2883c     1C 01 B0 FD | 	call	#__system___gc_markcog
28840     54 93 02 F6 | 	mov	arg01, local02
28844     49 AB EA FA | 	rdword	local03, arg01 wz
28848     00 7A 06 A6 |  if_e	mov	result1, #0
2884c     04 AA 66 50 |  if_ne	shl	local03, #4
28850     55 93 02 51 |  if_ne	add	arg01, local03
28854     49 7B 02 56 |  if_ne	mov	result1, arg01
28858     3D A9 0A F6 | 	mov	local02, result1 wz
2885c     60 00 90 AD |  if_e	jmp	#LR__3946
28860                 | LR__3943
28860     54 AD 02 F6 | 	mov	local04, local02
28864     56 93 02 F6 | 	mov	arg01, local04
28868     49 AB EA FA | 	rdword	local03, arg01 wz
2886c     00 7A 06 A6 |  if_e	mov	result1, #0
28870     04 AA 66 50 |  if_ne	shl	local03, #4
28874     55 93 02 51 |  if_ne	add	arg01, local03
28878     49 7B 02 56 |  if_ne	mov	result1, arg01
2887c     3D A9 02 F6 | 	mov	local02, result1
28880     56 95 02 F6 | 	mov	arg02, local04
28884     02 94 06 F1 | 	add	arg02, #2
28888     4A 95 E2 FA | 	rdword	arg02, arg02
2888c     20 94 CE F7 | 	test	arg02, #32 wz
28890     10 94 CE A7 |  if_e	test	arg02, #16 wz
28894     1C 00 90 5D |  if_ne	jmp	#LR__3945
28898     4A 95 42 F8 | 	getnib	arg02, arg02, #0
2889c     57 95 0A F2 | 	cmp	arg02, local05 wz
288a0     0E 94 0E 52 |  if_ne	cmp	arg02, #14 wz
288a4     0C 00 90 5D |  if_ne	jmp	#LR__3944
288a8     56 93 02 F6 | 	mov	arg01, local04
288ac     84 FC BF FD | 	call	#__system___gc_dofree
288b0     3D A9 02 F6 | 	mov	local02, result1
288b4                 | LR__3944
288b4                 | LR__3945
288b4     00 A8 0E F2 | 	cmp	local02, #0 wz
288b8     53 A9 52 52 |  if_ne	cmps	local02, local01 wc
288bc     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3943
288c0                 | LR__3946
288c0     E7 F0 03 F6 | 	mov	ptra, fp
288c4     F2 00 A0 FD | 	call	#popregs_
288c8                 | __system___gc_docollect_ret
288c8     2D 00 64 FD | 	ret
288cc                 | 
288cc                 | __system___gc_markhub
288cc     04 CA 05 F6 | 	mov	COUNT_, #4
288d0     E8 00 A0 FD | 	call	#pushregs_
288d4     49 A7 02 F6 | 	mov	local01, arg01
288d8     4A A9 02 F6 | 	mov	local02, arg02
288dc     90 F8 BF FD | 	call	#__system___gc_ptrs
288e0     3D AB 02 F6 | 	mov	local03, result1
288e4     3E AD 02 F6 | 	mov	local04, result2
288e8                 | LR__3950
288e8     54 A7 52 F2 | 	cmps	local01, local02 wc
288ec     60 00 90 3D |  if_ae	jmp	#LR__3951
288f0     53 97 02 FB | 	rdlong	arg03, local01
288f4     04 A6 06 F1 | 	add	local01, #4
288f8     56 95 02 F6 | 	mov	arg02, local04
288fc     55 93 02 F6 | 	mov	arg01, local03
28900     94 FB BF FD | 	call	#__system___gc_isvalidptr
28904     3D 97 0A F6 | 	mov	arg03, result1 wz
28908     DC FF 9F AD |  if_e	jmp	#LR__3950
2890c     4B 93 02 F6 | 	mov	arg01, arg03
28910     00 7A 06 F6 | 	mov	result1, #0
28914     02 92 06 F1 | 	add	arg01, #2
28918     49 93 E2 FA | 	rdword	arg01, arg01
2891c     36 00 00 FF 
28920     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
28924     01 7A 66 A6 |  if_e	neg	result1, #1
28928     00 7A 0E F2 | 	cmp	result1, #0 wz
2892c     B8 FF 9F 5D |  if_ne	jmp	#LR__3950
28930     4B 7D 02 F6 | 	mov	result2, arg03
28934     02 7C 06 F1 | 	add	result2, #2
28938     3E 7D E2 FA | 	rdword	result2, result2
2893c     0F 7C 26 F5 | 	andn	result2, #15
28940     2E 7C 46 F5 | 	or	result2, #46
28944     02 96 06 F1 | 	add	arg03, #2
28948     4B 7D 52 FC | 	wrword	result2, arg03
2894c     98 FF 9F FD | 	jmp	#LR__3950
28950                 | LR__3951
28950     E7 F0 03 F6 | 	mov	ptra, fp
28954     F2 00 A0 FD | 	call	#popregs_
28958                 | __system___gc_markhub_ret
28958     2D 00 64 FD | 	ret
2895c                 | 
2895c                 | __system___gc_markcog
2895c     04 CA 05 F6 | 	mov	COUNT_, #4
28960     E8 00 A0 FD | 	call	#pushregs_
28964     08 F8 BF FD | 	call	#__system___gc_ptrs
28968     3D A7 02 F6 | 	mov	local01, result1
2896c     3E A9 02 F6 | 	mov	local02, result2
28970     EF AB 06 F6 | 	mov	local03, #495
28974                 | LR__3960
28974                 | 	'.live	local03
28974     00 AA 96 F9 | 	alts	local03, #0
28978     55 AD 02 F6 | 	mov	local04, local03
2897c     53 93 02 F6 | 	mov	arg01, local01
28980     54 95 02 F6 | 	mov	arg02, local02
28984     56 97 02 F6 | 	mov	arg03, local04
28988     0C FB BF FD | 	call	#__system___gc_isvalidptr
2898c     00 7A 0E F2 | 	cmp	result1, #0 wz
28990     18 00 90 AD |  if_e	jmp	#LR__3961
28994     3D AD 02 F6 | 	mov	local04, result1
28998     02 AC 06 F1 | 	add	local04, #2
2899c     56 AD E2 FA | 	rdword	local04, local04
289a0     20 AC 46 F5 | 	or	local04, #32
289a4     02 7A 06 F1 | 	add	result1, #2
289a8     3D AD 52 FC | 	wrword	local04, result1
289ac                 | LR__3961
289ac     01 AA 86 F1 | 	sub	local03, #1
289b0     00 AA 56 F2 | 	cmps	local03, #0 wc
289b4     BC FF 9F 3D |  if_ae	jmp	#LR__3960
289b8     E7 F0 03 F6 | 	mov	ptra, fp
289bc     F2 00 A0 FD | 	call	#popregs_
289c0                 | __system___gc_markcog_ret
289c0     2D 00 64 FD | 	ret
289c4                 | 
289c4                 | __system___get_vfs_file_handle
289c4     01 CA 05 F6 | 	mov	COUNT_, #1
289c8     E8 00 A0 FD | 	call	#pushregs_
289cc     30 CC BF FD | 	call	#__system___find_free_file
289d0     3D A7 02 F6 | 	mov	local01, result1
289d4     00 A6 56 F2 | 	cmps	local01, #0 wc
289d8     34 A6 06 3D |  if_ae	qmul	local01, #52
289dc     00 7A 06 C6 |  if_b	mov	result1, #0
289e0     34 A7 02 36 |  if_ae	mov	local01, ptr___system__dat__
289e4     02 00 00 3F 
289e8     2C A7 06 31 |  if_ae	add	local01, ##1324
289ec     18 7A 62 3D |  if_ae	getqx	result1
289f0     53 7B 02 31 |  if_ae	add	result1, local01
289f4     E7 F0 03 F6 | 	mov	ptra, fp
289f8     F2 00 A0 FD | 	call	#popregs_
289fc                 | __system___get_vfs_file_handle_ret
289fc     2D 00 64 FD | 	ret
28a00                 | 
28a00                 | __system__opendir
28a00     06 CA 05 F6 | 	mov	COUNT_, #6
28a04     E8 00 A0 FD | 	call	#pushregs_
28a08     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
28a0c     84 A7 06 F1 | 	add	local01, #388
28a10     49 95 02 F6 | 	mov	arg02, arg01
28a14     53 93 02 F6 | 	mov	arg01, local01
28a18     00 96 06 F6 | 	mov	arg03, #0
28a1c     E4 C6 BF FD | 	call	#__system____getvfsforfile
28a20     3D A9 0A F6 | 	mov	local02, result1 wz
28a24     10 00 90 AD |  if_e	jmp	#LR__3970
28a28     28 A8 06 F1 | 	add	local02, #40
28a2c     54 97 0A FB | 	rdlong	arg03, local02 wz
28a30     28 A8 86 F1 | 	sub	local02, #40
28a34     14 00 90 5D |  if_ne	jmp	#LR__3971
28a38                 | LR__3970
28a38     20 68 06 F1 | 	add	ptr___system__dat__, #32
28a3c     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
28a40     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28a44     00 7A 06 F6 | 	mov	result1, #0
28a48     90 00 90 FD | 	jmp	#LR__3973
28a4c                 | LR__3971
28a4c     5C 92 06 F6 | 	mov	arg01, #92
28a50     10 94 06 F6 | 	mov	arg02, #16
28a54     98 F9 BF FD | 	call	#__system___gc_doalloc
28a58     3D AB 0A F6 | 	mov	local03, result1 wz
28a5c     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
28a60     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
28a64     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
28a68     00 7A 06 A6 |  if_e	mov	result1, #0
28a6c     6C 00 90 AD |  if_e	jmp	#LR__3973
28a70     28 A8 06 F1 | 	add	local02, #40
28a74     54 AD 02 FB | 	rdlong	local04, local02
28a78     56 AF 02 F6 | 	mov	local05, local04
28a7c     28 A8 86 F1 | 	sub	local02, #40
28a80     13 AE 46 F7 | 	zerox	local05, #19
28a84     14 AC 46 F0 | 	shr	local04, #20
28a88     02 AC 66 F0 | 	shl	local04, #2
28a8c     2D AD 02 F1 | 	add	local04, __methods__
28a90     56 AD 02 FB | 	rdlong	local04, local04
28a94     55 93 02 F6 | 	mov	arg01, local03
28a98     53 95 02 F6 | 	mov	arg02, local01
28a9c     32 B1 02 F6 | 	mov	local06, objptr
28aa0     57 65 02 F6 | 	mov	objptr, local05
28aa4     2D AC 62 FD | 	call	local04
28aa8     58 65 02 F6 | 	mov	objptr, local06
28aac     3D 97 0A F6 | 	mov	arg03, result1 wz
28ab0     20 00 90 AD |  if_e	jmp	#LR__3972
28ab4     00 96 4E F2 | 	cmps	arg03, #0 wz
28ab8     20 68 06 F1 | 	add	ptr___system__dat__, #32
28abc     34 97 62 FC | 	wrlong	arg03, ptr___system__dat__
28ac0     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28ac4     55 93 02 F6 | 	mov	arg01, local03
28ac8     28 FA BF FD | 	call	#__system___gc_free
28acc     00 7A 06 F6 | 	mov	result1, #0
28ad0     08 00 90 FD | 	jmp	#LR__3973
28ad4                 | LR__3972
28ad4     55 A9 62 FC | 	wrlong	local02, local03
28ad8     55 7B 02 F6 | 	mov	result1, local03
28adc                 | LR__3973
28adc     E7 F0 03 F6 | 	mov	ptra, fp
28ae0     F2 00 A0 FD | 	call	#popregs_
28ae4                 | __system__opendir_ret
28ae4     2D 00 64 FD | 	ret
28ae8                 | 
28ae8                 | __system__closedir
28ae8     04 CA 05 F6 | 	mov	COUNT_, #4
28aec     E8 00 A0 FD | 	call	#pushregs_
28af0     49 A7 02 F6 | 	mov	local01, arg01
28af4     53 93 02 FB | 	rdlong	arg01, local01
28af8     2C 92 06 F1 | 	add	arg01, #44
28afc     49 A9 02 FB | 	rdlong	local02, arg01
28b00     54 AB 02 F6 | 	mov	local03, local02
28b04     13 AA 46 F7 | 	zerox	local03, #19
28b08     14 A8 46 F0 | 	shr	local02, #20
28b0c     02 A8 66 F0 | 	shl	local02, #2
28b10     2D A9 02 F1 | 	add	local02, __methods__
28b14     54 A9 02 FB | 	rdlong	local02, local02
28b18     53 93 02 F6 | 	mov	arg01, local01
28b1c     32 AD 02 F6 | 	mov	local04, objptr
28b20     55 65 02 F6 | 	mov	objptr, local03
28b24     2D A8 62 FD | 	call	local02
28b28     56 65 02 F6 | 	mov	objptr, local04
28b2c     3D AD 02 F6 | 	mov	local04, result1
28b30     53 93 02 F6 | 	mov	arg01, local01
28b34     BC F9 BF FD | 	call	#__system___gc_free
28b38     00 AC 4E F2 | 	cmps	local04, #0 wz
28b3c     20 68 06 F1 | 	add	ptr___system__dat__, #32
28b40     34 AD 62 FC | 	wrlong	local04, ptr___system__dat__
28b44     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28b48     01 7A 66 56 |  if_ne	neg	result1, #1
28b4c     00 7A 06 A6 |  if_e	mov	result1, #0
28b50     E7 F0 03 F6 | 	mov	ptra, fp
28b54     F2 00 A0 FD | 	call	#popregs_
28b58                 | __system__closedir_ret
28b58     2D 00 64 FD | 	ret
28b5c                 | 
28b5c                 | __system__readdir
28b5c     04 CA 05 F6 | 	mov	COUNT_, #4
28b60     E8 00 A0 FD | 	call	#pushregs_
28b64     49 95 0A FB | 	rdlong	arg02, arg01 wz
28b68     49 A7 02 F6 | 	mov	local01, arg01
28b6c     08 A6 06 F1 | 	add	local01, #8
28b70     00 7A 06 A6 |  if_e	mov	result1, #0
28b74     5C 00 90 AD |  if_e	jmp	#LR__3981
28b78     30 94 06 F1 | 	add	arg02, #48
28b7c     4A A9 02 FB | 	rdlong	local02, arg02
28b80     54 AB 02 F6 | 	mov	local03, local02
28b84     13 AA 46 F7 | 	zerox	local03, #19
28b88     14 A8 46 F0 | 	shr	local02, #20
28b8c     02 A8 66 F0 | 	shl	local02, #2
28b90     2D A9 02 F1 | 	add	local02, __methods__
28b94     54 A9 02 FB | 	rdlong	local02, local02
28b98     53 95 02 F6 | 	mov	arg02, local01
28b9c     32 AD 02 F6 | 	mov	local04, objptr
28ba0     55 65 02 F6 | 	mov	objptr, local03
28ba4     2D A8 62 FD | 	call	local02
28ba8     56 65 02 F6 | 	mov	objptr, local04
28bac     00 7A 4E F2 | 	cmps	result1, #0 wz
28bb0     1C 00 90 AD |  if_e	jmp	#LR__3980
28bb4     01 7A 56 F2 | 	cmps	result1, #1 wc
28bb8     00 7A 4E 32 |  if_ae	cmps	result1, #0 wz
28bbc     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
28bc0     34 7B 62 3C |  if_ae	wrlong	result1, ptr___system__dat__
28bc4     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
28bc8     00 7A 06 F6 | 	mov	result1, #0
28bcc     04 00 90 FD | 	jmp	#LR__3981
28bd0                 | LR__3980
28bd0     53 7B 02 F6 | 	mov	result1, local01
28bd4                 | LR__3981
28bd4     E7 F0 03 F6 | 	mov	ptra, fp
28bd8     F2 00 A0 FD | 	call	#popregs_
28bdc                 | __system__readdir_ret
28bdc     2D 00 64 FD | 	ret
28be0                 | 
28be0                 | __system___openraw
28be0     15 CA 05 F6 | 	mov	COUNT_, #21
28be4     E8 00 A0 FD | 	call	#pushregs_
28be8     49 A7 02 F6 | 	mov	local01, arg01
28bec     4A A9 02 F6 | 	mov	local02, arg02
28bf0     4B AB 02 F6 | 	mov	local03, arg03
28bf4     4C AD 02 F6 | 	mov	local04, arg04
28bf8     0F AE C6 F9 | 	decod	local05, #15
28bfc     53 B1 02 F6 | 	mov	local06, local01
28c00     00 B2 06 F6 | 	mov	local07, #0
28c04     34 B5 02 F6 | 	mov	local08, ptr___system__dat__
28c08     84 B5 06 F1 | 	add	local08, #388
28c0c     5A 93 02 F6 | 	mov	arg01, local08
28c10     54 95 02 F6 | 	mov	arg02, local02
28c14     00 96 06 F6 | 	mov	arg03, #0
28c18     E8 C4 BF FD | 	call	#__system____getvfsforfile
28c1c     3D B7 0A F6 | 	mov	local09, result1 wz
28c20     10 00 90 AD |  if_e	jmp	#LR__3990
28c24     20 B6 06 F1 | 	add	local09, #32
28c28     5B 7B 0A FB | 	rdlong	result1, local09 wz
28c2c     20 B6 86 F1 | 	sub	local09, #32
28c30     14 00 90 5D |  if_ne	jmp	#LR__3991
28c34                 | LR__3990
28c34     20 68 06 F1 | 	add	ptr___system__dat__, #32
28c38     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
28c3c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28c40     01 7A 66 F6 | 	neg	result1, #1
28c44     DC 02 90 FD | 	jmp	#LR__4006
28c48                 | LR__3991
28c48     58 93 02 F6 | 	mov	arg01, local06
28c4c     00 94 06 F6 | 	mov	arg02, #0
28c50     34 96 06 F6 | 	mov	arg03, #52
28c54     49 B9 02 F6 | 	mov	local10, arg01
28c58     D8 00 A0 FD | 	call	#\builtin_bytefill_
28c5c     20 B6 06 F1 | 	add	local09, #32
28c60     5B BB 02 FB | 	rdlong	local11, local09
28c64     5D BD 02 F6 | 	mov	local12, local11
28c68     5D BF 02 F6 | 	mov	local13, local11
28c6c     20 B6 86 F1 | 	sub	local09, #32
28c70     5F C1 02 F6 | 	mov	local14, local13
28c74     13 BC 46 F7 | 	zerox	local12, #19
28c78     14 C0 46 F0 | 	shr	local14, #20
28c7c     02 C0 66 F0 | 	shl	local14, #2
28c80     2D C1 02 F1 | 	add	local14, __methods__
28c84     60 C1 02 FB | 	rdlong	local14, local14
28c88     58 C3 02 F6 | 	mov	local15, local06
28c8c     5A C5 02 F6 | 	mov	local16, local08
28c90     55 C7 02 F6 | 	mov	local17, local03
28c94     61 93 02 F6 | 	mov	arg01, local15
28c98     62 95 02 F6 | 	mov	arg02, local16
28c9c     63 97 02 F6 | 	mov	arg03, local17
28ca0     32 C9 02 F6 | 	mov	local18, objptr
28ca4     5E 65 02 F6 | 	mov	objptr, local12
28ca8     2D C0 62 FD | 	call	local14
28cac     64 65 02 F6 | 	mov	objptr, local18
28cb0     3D CB 0A F6 | 	mov	local19, result1 wz
28cb4     04 AA CE 57 |  if_ne	test	local03, #4 wz
28cb8     58 00 90 AD |  if_e	jmp	#LR__3992
28cbc     24 B6 06 F1 | 	add	local09, #36
28cc0     5B BB 02 FB | 	rdlong	local11, local09
28cc4     5D BD 02 F6 | 	mov	local12, local11
28cc8     5D BF 02 F6 | 	mov	local13, local11
28ccc     24 B6 86 F1 | 	sub	local09, #36
28cd0     5F C1 02 F6 | 	mov	local14, local13
28cd4     13 BC 46 F7 | 	zerox	local12, #19
28cd8     14 C0 46 F0 | 	shr	local14, #20
28cdc     02 C0 66 F0 | 	shl	local14, #2
28ce0     2D C1 02 F1 | 	add	local14, __methods__
28ce4     60 C1 02 FB | 	rdlong	local14, local14
28ce8     58 C3 02 F6 | 	mov	local15, local06
28cec     5A C5 02 F6 | 	mov	local16, local08
28cf0     56 C7 02 F6 | 	mov	local17, local04
28cf4     61 93 02 F6 | 	mov	arg01, local15
28cf8     62 95 02 F6 | 	mov	arg02, local16
28cfc     63 97 02 F6 | 	mov	arg03, local17
28d00     32 C9 02 F6 | 	mov	local18, objptr
28d04     5E 65 02 F6 | 	mov	objptr, local12
28d08     2D C0 62 FD | 	call	local14
28d0c     64 65 02 F6 | 	mov	objptr, local18
28d10     3D CB 02 F6 | 	mov	local19, result1
28d14                 | LR__3992
28d14     00 CA 0E F2 | 	cmp	local19, #0 wz
28d18     DC 01 90 5D |  if_ne	jmp	#LR__4004
28d1c     55 CD 02 F6 | 	mov	local20, local03
28d20     03 CC 0E F5 | 	and	local20, #3 wz
28d24     02 AE 46 55 |  if_ne	or	local05, #2
28d28     01 CC 0E F2 | 	cmp	local20, #1 wz
28d2c     01 AE 46 55 |  if_ne	or	local05, #1
28d30     20 AA CE F7 | 	test	local03, #32 wz
28d34     80 AF 46 55 |  if_ne	or	local05, #384
28d38     08 B0 06 F1 | 	add	local06, #8
28d3c     58 AF 62 FC | 	wrlong	local05, local06
28d40     0C B0 06 F1 | 	add	local06, #12
28d44     58 CF 0A FB | 	rdlong	local21, local06 wz
28d48     14 B0 86 F1 | 	sub	local06, #20
28d4c     18 00 90 5D |  if_ne	jmp	#LR__3993
28d50     04 B6 06 F1 | 	add	local09, #4
28d54     5B CF 02 FB | 	rdlong	local21, local09
28d58     04 B6 86 F1 | 	sub	local09, #4
28d5c     14 B0 06 F1 | 	add	local06, #20
28d60     58 CF 62 FC | 	wrlong	local21, local06
28d64     14 B0 86 F1 | 	sub	local06, #20
28d68                 | LR__3993
28d68     18 B0 06 F1 | 	add	local06, #24
28d6c     58 CF 0A FB | 	rdlong	local21, local06 wz
28d70     18 B0 86 F1 | 	sub	local06, #24
28d74     18 00 90 5D |  if_ne	jmp	#LR__3994
28d78     08 B6 06 F1 | 	add	local09, #8
28d7c     5B CF 02 FB | 	rdlong	local21, local09
28d80     08 B6 86 F1 | 	sub	local09, #8
28d84     18 B0 06 F1 | 	add	local06, #24
28d88     58 CF 62 FC | 	wrlong	local21, local06
28d8c     18 B0 86 F1 | 	sub	local06, #24
28d90                 | LR__3994
28d90     24 B0 06 F1 | 	add	local06, #36
28d94     58 CF 0A FB | 	rdlong	local21, local06 wz
28d98     24 B0 86 F1 | 	sub	local06, #36
28d9c     5B CF 02 AB |  if_e	rdlong	local21, local09
28da0     24 B0 06 A1 |  if_e	add	local06, #36
28da4     58 CF 62 AC |  if_e	wrlong	local21, local06
28da8     24 B0 86 A1 |  if_e	sub	local06, #36
28dac     28 B0 06 F1 | 	add	local06, #40
28db0     58 CF 0A FB | 	rdlong	local21, local06 wz
28db4     28 B0 86 F1 | 	sub	local06, #40
28db8     18 00 90 5D |  if_ne	jmp	#LR__3995
28dbc     10 B6 06 F1 | 	add	local09, #16
28dc0     5B CF 02 FB | 	rdlong	local21, local09
28dc4     10 B6 86 F1 | 	sub	local09, #16
28dc8     28 B0 06 F1 | 	add	local06, #40
28dcc     58 CF 62 FC | 	wrlong	local21, local06
28dd0     28 B0 86 F1 | 	sub	local06, #40
28dd4                 | LR__3995
28dd4     30 B0 06 F1 | 	add	local06, #48
28dd8     58 CF 0A FB | 	rdlong	local21, local06 wz
28ddc     30 B0 86 F1 | 	sub	local06, #48
28de0     18 00 90 5D |  if_ne	jmp	#LR__3996
28de4     0C B6 06 F1 | 	add	local09, #12
28de8     5B CF 02 FB | 	rdlong	local21, local09
28dec     0C B6 86 F1 | 	sub	local09, #12
28df0     30 B0 06 F1 | 	add	local06, #48
28df4     58 CF 62 FC | 	wrlong	local21, local06
28df8     30 B0 86 F1 | 	sub	local06, #48
28dfc                 | LR__3996
28dfc     20 B0 06 F1 | 	add	local06, #32
28e00     58 CF 0A FB | 	rdlong	local21, local06 wz
28e04     20 B0 86 F1 | 	sub	local06, #32
28e08     18 00 90 5D |  if_ne	jmp	#LR__3997
28e0c     50 B6 06 F1 | 	add	local09, #80
28e10     5B CF 02 FB | 	rdlong	local21, local09
28e14     50 B6 86 F1 | 	sub	local09, #80
28e18     20 B0 06 F1 | 	add	local06, #32
28e1c     58 CF 62 FC | 	wrlong	local21, local06
28e20     20 B0 86 F1 | 	sub	local06, #32
28e24                 | LR__3997
28e24     1C B0 06 F1 | 	add	local06, #28
28e28     58 CF 0A FB | 	rdlong	local21, local06 wz
28e2c     1C B0 86 F1 | 	sub	local06, #28
28e30     18 00 90 5D |  if_ne	jmp	#LR__3998
28e34     54 B6 06 F1 | 	add	local09, #84
28e38     5B CF 02 FB | 	rdlong	local21, local09
28e3c     54 B6 86 F1 | 	sub	local09, #84
28e40     1C B0 06 F1 | 	add	local06, #28
28e44     58 CF 62 FC | 	wrlong	local21, local06
28e48     1C B0 86 F1 | 	sub	local06, #28
28e4c                 | LR__3998
28e4c     1C B0 06 F1 | 	add	local06, #28
28e50     58 CF 0A FB | 	rdlong	local21, local06 wz
28e54     1C B0 86 F1 | 	sub	local06, #28
28e58     1C 00 90 5D |  if_ne	jmp	#LR__3999
28e5c     01 B2 06 F6 | 	mov	local07, #1
28e60     32 93 02 F6 | 	mov	arg01, objptr
28e64     00 C0 05 FF 
28e68     00 92 46 F5 | 	or	arg01, ##192937984
28e6c     1C B0 06 F1 | 	add	local06, #28
28e70     58 93 62 FC | 	wrlong	arg01, local06
28e74     1C B0 86 F1 | 	sub	local06, #28
28e78                 | LR__3999
28e78     20 B0 06 F1 | 	add	local06, #32
28e7c     58 CF 0A FB | 	rdlong	local21, local06 wz
28e80     20 B0 86 F1 | 	sub	local06, #32
28e84     1C 00 90 5D |  if_ne	jmp	#LR__4000
28e88     01 B2 06 F6 | 	mov	local07, #1
28e8c     32 93 02 F6 | 	mov	arg01, objptr
28e90     00 C8 05 FF 
28e94     00 92 46 F5 | 	or	arg01, ##193986560
28e98     20 B0 06 F1 | 	add	local06, #32
28e9c     58 93 62 FC | 	wrlong	arg01, local06
28ea0     20 B0 86 F1 | 	sub	local06, #32
28ea4                 | LR__4000
28ea4     2C B0 06 F1 | 	add	local06, #44
28ea8     58 CF 0A FB | 	rdlong	local21, local06 wz
28eac     2C B0 86 F1 | 	sub	local06, #44
28eb0     44 00 90 5D |  if_ne	jmp	#LR__4003
28eb4     14 B6 06 F1 | 	add	local09, #20
28eb8     5B CF 0A FB | 	rdlong	local21, local09 wz
28ebc     14 B6 86 F1 | 	sub	local09, #20
28ec0     18 00 90 AD |  if_e	jmp	#LR__4001
28ec4     14 B6 06 F1 | 	add	local09, #20
28ec8     5B CF 02 FB | 	rdlong	local21, local09
28ecc     2C B0 06 F1 | 	add	local06, #44
28ed0     58 CF 62 FC | 	wrlong	local21, local06
28ed4     2C B0 86 F1 | 	sub	local06, #44
28ed8     1C 00 90 FD | 	jmp	#LR__4002
28edc                 | LR__4001
28edc     01 B2 06 F6 | 	mov	local07, #1
28ee0     32 93 02 F6 | 	mov	arg01, objptr
28ee4     00 D0 05 FF 
28ee8     00 92 46 F5 | 	or	arg01, ##195035136
28eec     2C B0 06 F1 | 	add	local06, #44
28ef0     58 93 62 FC | 	wrlong	arg01, local06
28ef4     2C B0 86 F1 | 	sub	local06, #44
28ef8                 | LR__4002
28ef8                 | LR__4003
28ef8                 | LR__4004
28ef8     00 B2 0E F2 | 	cmp	local07, #0 wz
28efc     58 93 02 56 |  if_ne	mov	arg01, local06
28f00     E4 04 B0 5D |  if_ne	call	#__system____default_buffer_init
28f04     00 CA 0E F2 | 	cmp	local19, #0 wz
28f08     00 92 06 A6 |  if_e	mov	arg01, #0
28f0c     10 00 90 5D |  if_ne	jmp	#LR__4005
28f10     00 92 4E F2 | 	cmps	arg01, #0 wz
28f14     20 68 06 F1 | 	add	ptr___system__dat__, #32
28f18     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
28f1c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28f20                 | LR__4005
28f20     65 7B 02 F6 | 	mov	result1, local19
28f24                 | LR__4006
28f24     E7 F0 03 F6 | 	mov	ptra, fp
28f28     F2 00 A0 FD | 	call	#popregs_
28f2c                 | __system___openraw_ret
28f2c     2D 00 64 FD | 	ret
28f30                 | 
28f30                 | __system___closeraw
28f30     05 CA 05 F6 | 	mov	COUNT_, #5
28f34     E8 00 A0 FD | 	call	#pushregs_
28f38     49 A7 02 F6 | 	mov	local01, arg01
28f3c     00 A8 06 F6 | 	mov	local02, #0
28f40     08 A6 06 F1 | 	add	local01, #8
28f44     53 7B 0A FB | 	rdlong	result1, local01 wz
28f48     08 A6 86 F1 | 	sub	local01, #8
28f4c     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
28f50     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
28f54     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
28f58     01 7A 66 A6 |  if_e	neg	result1, #1
28f5c     A8 00 90 AD |  if_e	jmp	#LR__4012
28f60     2C A6 06 F1 | 	add	local01, #44
28f64     53 7B 0A FB | 	rdlong	result1, local01 wz
28f68     2C A6 86 F1 | 	sub	local01, #44
28f6c     38 00 90 AD |  if_e	jmp	#LR__4010
28f70     2C A6 06 F1 | 	add	local01, #44
28f74     53 AB 02 FB | 	rdlong	local03, local01
28f78     55 AD 02 F6 | 	mov	local04, local03
28f7c     2C A6 86 F1 | 	sub	local01, #44
28f80     13 AC 46 F7 | 	zerox	local04, #19
28f84     14 AA 46 F0 | 	shr	local03, #20
28f88     02 AA 66 F0 | 	shl	local03, #2
28f8c     2D AB 02 F1 | 	add	local03, __methods__
28f90     55 AB 02 FB | 	rdlong	local03, local03
28f94     53 93 02 F6 | 	mov	arg01, local01
28f98     32 AF 02 F6 | 	mov	local05, objptr
28f9c     56 65 02 F6 | 	mov	objptr, local04
28fa0     2D AA 62 FD | 	call	local03
28fa4     57 65 02 F6 | 	mov	objptr, local05
28fa8                 | LR__4010
28fa8     24 A6 06 F1 | 	add	local01, #36
28fac     53 AF 0A FB | 	rdlong	local05, local01 wz
28fb0     24 A6 86 F1 | 	sub	local01, #36
28fb4     3C 00 90 AD |  if_e	jmp	#LR__4011
28fb8     24 A6 06 F1 | 	add	local01, #36
28fbc     53 AB 02 FB | 	rdlong	local03, local01
28fc0     55 AD 02 F6 | 	mov	local04, local03
28fc4     24 A6 86 F1 | 	sub	local01, #36
28fc8     13 AC 46 F7 | 	zerox	local04, #19
28fcc     14 AA 46 F0 | 	shr	local03, #20
28fd0     02 AA 66 F0 | 	shl	local03, #2
28fd4     2D AB 02 F1 | 	add	local03, __methods__
28fd8     55 AB 02 FB | 	rdlong	local03, local03
28fdc     53 93 02 F6 | 	mov	arg01, local01
28fe0     32 AF 02 F6 | 	mov	local05, objptr
28fe4     56 65 02 F6 | 	mov	objptr, local04
28fe8     2D AA 62 FD | 	call	local03
28fec     57 65 02 F6 | 	mov	objptr, local05
28ff0     3D A9 02 F6 | 	mov	local02, result1
28ff4                 | LR__4011
28ff4     53 93 02 F6 | 	mov	arg01, local01
28ff8     00 94 06 F6 | 	mov	arg02, #0
28ffc     34 96 06 F6 | 	mov	arg03, #52
29000     D8 00 A0 FD | 	call	#\builtin_bytefill_
29004     54 7B 02 F6 | 	mov	result1, local02
29008                 | LR__4012
29008     E7 F0 03 F6 | 	mov	ptra, fp
2900c     F2 00 A0 FD | 	call	#popregs_
29010                 | __system___closeraw_ret
29010     2D 00 64 FD | 	ret
29014                 | 
29014                 | __system___vfs_open_fat_handle
29014     03 CA 05 F6 | 	mov	COUNT_, #3
29018     E8 00 A0 FD | 	call	#pushregs_
2901c     49 A7 0A F6 | 	mov	local01, arg01 wz
29020     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
29024     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
29028     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2902c     01 7A 66 A6 |  if_e	neg	result1, #1
29030     80 00 90 AD |  if_e	jmp	#LR__4021
29034     01 00 00 FF 
29038     14 92 06 F6 | 	mov	arg01, ##532
2903c     80 F3 BF FD | 	call	#__system___gc_alloc_managed
29040     3D A9 02 F6 | 	mov	local02, result1
29044     01 00 00 FF 
29048     34 92 06 F6 | 	mov	arg01, ##564
2904c     70 F3 BF FD | 	call	#__system___gc_alloc_managed
29050     32 AB 02 F6 | 	mov	local03, objptr
29054     54 65 02 F6 | 	mov	objptr, local02
29058     01 00 00 FF 
2905c     10 64 06 F1 | 	add	objptr, ##528
29060     32 A7 62 FC | 	wrlong	local01, objptr
29064                 | ' #line 4 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/diskio.cc"
29064                 | ' 
29064                 | ' 
29064                 | ' vfs_file_t *fh;
29064                 | ' 
29064                 | ' DRESULT disk_sethandle(BYTE pdrv, vfs_file_t *fhandle) {
29064                 | '     fh = fhandle;
29064                 | '     return RES_OK;
29064     92 01 00 FF 
29068     FA 94 06 F6 | 	mov	arg02, ##@LR__5477
2906c     3D 93 02 F6 | 	mov	arg01, result1
29070     00 96 06 F6 | 	mov	arg03, #0
29074     54 65 02 F6 | 	mov	objptr, local02
29078     4C 65 B0 FD | 	call	#_fatfs_cc_f_mount
2907c     55 65 02 F6 | 	mov	objptr, local03
29080     3D 93 0A F6 | 	mov	arg01, result1 wz
29084     18 00 90 AD |  if_e	jmp	#LR__4020
29088     49 93 6A F6 | 	neg	arg01, arg01 wz
2908c     20 68 06 F1 | 	add	ptr___system__dat__, #32
29090     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
29094     20 68 86 F1 | 	sub	ptr___system__dat__, #32
29098     00 7A 06 F6 | 	mov	result1, #0
2909c     14 00 90 FD | 	jmp	#LR__4021
290a0                 | LR__4020
290a0     54 93 02 F6 | 	mov	arg01, local02
290a4     32 AB 02 F6 | 	mov	local03, objptr
290a8     54 65 02 F6 | 	mov	objptr, local02
290ac     88 8B B0 FD | 	call	#_fatfs_cc_get_vfs
290b0     55 65 02 F6 | 	mov	objptr, local03
290b4                 | LR__4021
290b4     E7 F0 03 F6 | 	mov	ptra, fp
290b8     F2 00 A0 FD | 	call	#popregs_
290bc                 | __system___vfs_open_fat_handle_ret
290bc     2D 00 64 FD | 	ret
290c0                 | 
290c0                 | __system___vfs_open_sdcardx
290c0     04 CA 05 F6 | 	mov	COUNT_, #4
290c4     E8 00 A0 FD | 	call	#pushregs_
290c8     4C 17 B0 FD | 	call	#__system___sdmm_open
290cc     3D A7 0A F6 | 	mov	local01, result1 wz
290d0     00 7A 06 A6 |  if_e	mov	result1, #0
290d4     4C 00 90 AD |  if_e	jmp	#LR__4031
290d8     53 93 02 F6 | 	mov	arg01, local01
290dc     34 FF BF FD | 	call	#__system___vfs_open_fat_handle
290e0     3D A9 0A F6 | 	mov	local02, result1 wz
290e4     38 00 90 5D |  if_ne	jmp	#LR__4030
290e8     24 A6 06 F1 | 	add	local01, #36
290ec     53 AB 02 FB | 	rdlong	local03, local01
290f0     55 AD 02 F6 | 	mov	local04, local03
290f4     24 A6 86 F1 | 	sub	local01, #36
290f8     13 AC 46 F7 | 	zerox	local04, #19
290fc     14 AA 46 F0 | 	shr	local03, #20
29100     02 AA 66 F0 | 	shl	local03, #2
29104     2D AB 02 F1 | 	add	local03, __methods__
29108     55 AB 02 FB | 	rdlong	local03, local03
2910c     53 93 02 F6 | 	mov	arg01, local01
29110     32 A7 02 F6 | 	mov	local01, objptr
29114     56 65 02 F6 | 	mov	objptr, local04
29118     2D AA 62 FD | 	call	local03
2911c     53 65 02 F6 | 	mov	objptr, local01
29120                 | LR__4030
29120     54 7B 02 F6 | 	mov	result1, local02
29124                 | LR__4031
29124     E7 F0 03 F6 | 	mov	ptra, fp
29128     F2 00 A0 FD | 	call	#popregs_
2912c                 | __system___vfs_open_sdcardx_ret
2912c     2D 00 64 FD | 	ret
29130                 | 
29130                 | __system____default_getc
29130     03 CA 05 F6 | 	mov	COUNT_, #3
29134     E8 00 A0 FD | 	call	#pushregs_
29138     49 A7 02 F6 | 	mov	local01, arg01
2913c     53 A9 02 FB | 	rdlong	local02, local01
29140     08 A6 06 F1 | 	add	local01, #8
29144     53 AB 02 FB | 	rdlong	local03, local01
29148     08 A6 86 F1 | 	sub	local01, #8
2914c     08 AA CE F7 | 	test	local03, #8 wz
29150     53 93 02 56 |  if_ne	mov	arg01, local01
29154     08 01 B0 5D |  if_ne	call	#__system____default_flush
29158     08 A6 06 F1 | 	add	local01, #8
2915c     53 AB 02 FB | 	rdlong	local03, local01
29160     04 AA 46 F5 | 	or	local03, #4
29164     53 AB 62 FC | 	wrlong	local03, local01
29168     08 A6 86 F1 | 	sub	local01, #8
2916c     54 AB 0A FB | 	rdlong	local03, local02 wz
29170     0C 00 90 5D |  if_ne	jmp	#LR__4040
29174     53 93 02 F6 | 	mov	arg01, local01
29178     E0 18 B0 FD | 	call	#__system____default_filbuf
2917c     3D AB 02 F6 | 	mov	local03, result1
29180                 | LR__4040
29180     01 AA 56 F2 | 	cmps	local03, #1 wc
29184     01 7A 66 C6 |  if_b	neg	result1, #1
29188     1C 00 90 CD |  if_b	jmp	#LR__4041
2918c     01 AA 86 F1 | 	sub	local03, #1
29190     54 AB 62 FC | 	wrlong	local03, local02
29194     04 A8 06 F1 | 	add	local02, #4
29198     54 AB 02 FB | 	rdlong	local03, local02
2919c     55 7B C2 FA | 	rdbyte	result1, local03
291a0     01 AA 06 F1 | 	add	local03, #1
291a4     54 AB 62 FC | 	wrlong	local03, local02
291a8                 | LR__4041
291a8     E7 F0 03 F6 | 	mov	ptra, fp
291ac     F2 00 A0 FD | 	call	#popregs_
291b0                 | __system____default_getc_ret
291b0     2D 00 64 FD | 	ret
291b4                 | 
291b4                 | __system____default_putc
291b4     06 CA 05 F6 | 	mov	COUNT_, #6
291b8     E8 00 A0 FD | 	call	#pushregs_
291bc     49 A7 02 F6 | 	mov	local01, arg01
291c0     4A A9 02 F6 | 	mov	local02, arg02
291c4     54 AB 02 FB | 	rdlong	local03, local02
291c8     08 A8 06 F1 | 	add	local02, #8
291cc     54 95 02 FB | 	rdlong	arg02, local02
291d0     08 A8 86 F1 | 	sub	local02, #8
291d4     04 94 CE F7 | 	test	arg02, #4 wz
291d8     54 93 02 56 |  if_ne	mov	arg01, local02
291dc     80 00 B0 5D |  if_ne	call	#__system____default_flush
291e0     08 A8 06 F1 | 	add	local02, #8
291e4     54 AD 02 FB | 	rdlong	local04, local02
291e8     08 AC 46 F5 | 	or	local04, #8
291ec     54 AD 62 FC | 	wrlong	local04, local02
291f0     55 AF 02 FB | 	rdlong	local05, local03
291f4     0C AA 06 F1 | 	add	local03, #12
291f8     55 95 02 FB | 	rdlong	arg02, local03
291fc     0C AA 86 F1 | 	sub	local03, #12
29200     57 7B 02 F6 | 	mov	result1, local05
29204     4A 7B 02 F1 | 	add	result1, arg02
29208     3D A7 42 FC | 	wrbyte	local01, result1
2920c     53 A7 E2 F8 | 	getbyte	local01, local01, #0
29210     01 AE 06 F1 | 	add	local05, #1
29214     55 AF 62 FC | 	wrlong	local05, local03
29218     02 A8 86 F1 | 	sub	local02, #2
2921c     54 B1 EA FA | 	rdword	local06, local02 wz
29220     06 A8 86 F1 | 	sub	local02, #6
29224     08 AA 06 51 |  if_ne	add	local03, #8
29228     55 AD 02 5B |  if_ne	rdlong	local04, local03
2922c     56 AF 0A 52 |  if_ne	cmp	local05, local04 wz
29230     0C 00 90 AD |  if_e	jmp	#LR__4050
29234     0A A6 0E F2 | 	cmp	local01, #10 wz
29238     01 B0 0E A2 |  if_e	cmp	local06, #1 wz
2923c     10 00 90 5D |  if_ne	jmp	#LR__4051
29240                 | LR__4050
29240     54 93 02 F6 | 	mov	arg01, local02
29244     18 00 B0 FD | 	call	#__system____default_flush
29248     00 7A 0E F2 | 	cmp	result1, #0 wz
2924c     01 A6 66 56 |  if_ne	neg	local01, #1
29250                 | LR__4051
29250     53 7B 02 F6 | 	mov	result1, local01
29254     E7 F0 03 F6 | 	mov	ptra, fp
29258     F2 00 A0 FD | 	call	#popregs_
2925c                 | __system____default_putc_ret
2925c     2D 00 64 FD | 	ret
29260                 | 
29260                 | __system____default_flush
29260     07 CA 05 F6 | 	mov	COUNT_, #7
29264     E8 00 A0 FD | 	call	#pushregs_
29268     49 A7 02 F6 | 	mov	local01, arg01
2926c     53 A9 02 FB | 	rdlong	local02, local01
29270     54 AB 02 FB | 	rdlong	local03, local02
29274     08 A6 06 F1 | 	add	local01, #8
29278     53 7D 02 FB | 	rdlong	result2, local01
2927c     08 A6 86 F1 | 	sub	local01, #8
29280     08 7C CE F7 | 	test	result2, #8 wz
29284     D4 00 90 AD |  if_e	jmp	#LR__4062
29288     01 AA 56 F2 | 	cmps	local03, #1 wc
2928c     2C 01 90 CD |  if_b	jmp	#LR__4064
29290     08 A6 06 F1 | 	add	local01, #8
29294     53 7D 02 FB | 	rdlong	result2, local01
29298     08 A6 86 F1 | 	sub	local01, #8
2929c     80 7C CE F7 | 	test	result2, #128 wz
292a0     6C 00 90 AD |  if_e	jmp	#LR__4061
292a4     08 A6 06 F1 | 	add	local01, #8
292a8     53 97 02 FB | 	rdlong	arg03, local01
292ac     08 A6 86 F1 | 	sub	local01, #8
292b0     00 97 CE F7 | 	test	arg03, #256 wz
292b4     58 00 90 AD |  if_e	jmp	#LR__4060
292b8     30 A6 06 F1 | 	add	local01, #48
292bc     53 AD 02 FB | 	rdlong	local04, local01
292c0     56 AF 02 F6 | 	mov	local05, local04
292c4     30 A6 86 F1 | 	sub	local01, #48
292c8     13 AE 46 F7 | 	zerox	local05, #19
292cc     14 AC 46 F0 | 	shr	local04, #20
292d0     02 AC 66 F0 | 	shl	local04, #2
292d4     2D AD 02 F1 | 	add	local04, __methods__
292d8     56 AD 02 FB | 	rdlong	local04, local04
292dc     53 93 02 F6 | 	mov	arg01, local01
292e0     00 94 06 F6 | 	mov	arg02, #0
292e4     00 96 06 F6 | 	mov	arg03, #0
292e8     02 98 06 F6 | 	mov	arg04, #2
292ec     32 B1 02 F6 | 	mov	local06, objptr
292f0     57 65 02 F6 | 	mov	objptr, local05
292f4     2D AC 62 FD | 	call	local04
292f8     58 65 02 F6 | 	mov	objptr, local06
292fc     08 A6 06 F1 | 	add	local01, #8
29300     53 B1 02 FB | 	rdlong	local06, local01
29304     00 B1 26 F5 | 	andn	local06, #256
29308     53 B1 62 FC | 	wrlong	local06, local01
2930c     08 A6 86 F1 | 	sub	local01, #8
29310                 | LR__4060
29310                 | LR__4061
29310     18 A6 06 F1 | 	add	local01, #24
29314     53 AD 02 FB | 	rdlong	local04, local01
29318     56 AF 02 F6 | 	mov	local05, local04
2931c     18 A6 86 F1 | 	sub	local01, #24
29320     13 AE 46 F7 | 	zerox	local05, #19
29324     14 AC 46 F0 | 	shr	local04, #20
29328     02 AC 66 F0 | 	shl	local04, #2
2932c     2D AD 02 F1 | 	add	local04, __methods__
29330     56 AD 02 FB | 	rdlong	local04, local04
29334     0C A8 06 F1 | 	add	local02, #12
29338     54 95 02 FB | 	rdlong	arg02, local02
2933c     0C A8 86 F1 | 	sub	local02, #12
29340     53 93 02 F6 | 	mov	arg01, local01
29344     55 97 02 F6 | 	mov	arg03, local03
29348     32 B1 02 F6 | 	mov	local06, objptr
2934c     57 65 02 F6 | 	mov	objptr, local05
29350     2D AC 62 FD | 	call	local04
29354     58 65 02 F6 | 	mov	objptr, local06
29358     60 00 90 FD | 	jmp	#LR__4064
2935c                 | LR__4062
2935c     08 A6 06 F1 | 	add	local01, #8
29360     53 B1 02 FB | 	rdlong	local06, local01
29364     08 A6 86 F1 | 	sub	local01, #8
29368     04 B0 CE F7 | 	test	local06, #4 wz
2936c     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
29370     48 00 90 AD |  if_e	jmp	#LR__4063
29374     55 95 62 F6 | 	neg	arg02, local03
29378     4A 97 02 F6 | 	mov	arg03, arg02
2937c     1F 96 C6 F0 | 	sar	arg03, #31
29380     30 A6 06 F1 | 	add	local01, #48
29384     53 AD 02 FB | 	rdlong	local04, local01
29388     56 AF 02 F6 | 	mov	local05, local04
2938c     30 A6 86 F1 | 	sub	local01, #48
29390     13 AE 46 F7 | 	zerox	local05, #19
29394     14 AC 46 F0 | 	shr	local04, #20
29398     02 AC 66 F0 | 	shl	local04, #2
2939c     2D AD 02 F1 | 	add	local04, __methods__
293a0     56 AD 02 FB | 	rdlong	local04, local04
293a4     53 93 02 F6 | 	mov	arg01, local01
293a8     01 98 06 F6 | 	mov	arg04, #1
293ac     32 B1 02 F6 | 	mov	local06, objptr
293b0     57 65 02 F6 | 	mov	objptr, local05
293b4     2D AC 62 FD | 	call	local04
293b8     58 65 02 F6 | 	mov	objptr, local06
293bc                 | LR__4063
293bc                 | LR__4064
293bc     54 01 68 FC | 	wrlong	#0, local02
293c0     04 A8 06 F1 | 	add	local02, #4
293c4     54 01 68 FC | 	wrlong	#0, local02
293c8     08 A6 06 F1 | 	add	local01, #8
293cc     53 B3 02 FB | 	rdlong	local07, local01
293d0     0C B2 26 F5 | 	andn	local07, #12
293d4     53 B3 62 FC | 	wrlong	local07, local01
293d8     00 7A 06 F6 | 	mov	result1, #0
293dc     E7 F0 03 F6 | 	mov	ptra, fp
293e0     F2 00 A0 FD | 	call	#popregs_
293e4                 | __system____default_flush_ret
293e4     2D 00 64 FD | 	ret
293e8                 | 
293e8                 | __system____default_buffer_init
293e8     02 CA 05 F6 | 	mov	COUNT_, #2
293ec     E8 00 A0 FD | 	call	#pushregs_
293f0     49 A7 02 F6 | 	mov	local01, arg01
293f4     53 A9 02 FB | 	rdlong	local02, local01
293f8     53 93 02 F6 | 	mov	arg01, local01
293fc     A4 03 B0 FD | 	call	#__system___isatty
29400     00 7A 0E F2 | 	cmp	result1, #0 wz
29404     06 A6 06 51 |  if_ne	add	local01, #6
29408     53 0B 58 5C |  if_ne	wrword	#5, local01
2940c     06 A6 06 A1 |  if_e	add	local01, #6
29410     53 0D 58 AC |  if_e	wrword	#6, local01
29414     10 A8 06 F1 | 	add	local02, #16
29418     54 A7 02 F6 | 	mov	local01, local02
2941c     04 A8 86 F1 | 	sub	local02, #4
29420     54 A7 62 FC | 	wrlong	local01, local02
29424     04 A8 86 F1 | 	sub	local02, #4
29428     02 00 80 FF 
2942c     54 01 68 FC | 	wrlong	##1024, local02
29430     00 7A 06 F6 | 	mov	result1, #0
29434     E7 F0 03 F6 | 	mov	ptra, fp
29438     F2 00 A0 FD | 	call	#popregs_
2943c                 | __system____default_buffer_init_ret
2943c     2D 00 64 FD | 	ret
29440                 | 
29440                 | __system__stat
29440     04 CA 05 F6 | 	mov	COUNT_, #4
29444     E8 00 A0 FD | 	call	#pushregs_
29448     4A A7 02 F6 | 	mov	local01, arg02
2944c     34 A9 02 F6 | 	mov	local02, ptr___system__dat__
29450     84 A9 06 F1 | 	add	local02, #388
29454     49 95 02 F6 | 	mov	arg02, arg01
29458     54 93 02 F6 | 	mov	arg01, local02
2945c     00 96 06 F6 | 	mov	arg03, #0
29460     A0 BC BF FD | 	call	#__system____getvfsforfile
29464     3D AB 0A F6 | 	mov	local03, result1 wz
29468     10 00 90 AD |  if_e	jmp	#LR__4070
2946c     34 AA 06 F1 | 	add	local03, #52
29470     55 97 0A FB | 	rdlong	arg03, local03 wz
29474     34 AA 86 F1 | 	sub	local03, #52
29478     14 00 90 5D |  if_ne	jmp	#LR__4071
2947c                 | LR__4070
2947c     20 68 06 F1 | 	add	ptr___system__dat__, #32
29480     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
29484     20 68 86 F1 | 	sub	ptr___system__dat__, #32
29488     01 7A 66 F6 | 	neg	result1, #1
2948c     68 00 90 FD | 	jmp	#LR__4072
29490                 | LR__4071
29490     53 93 02 F6 | 	mov	arg01, local01
29494     00 94 06 F6 | 	mov	arg02, #0
29498     34 96 06 F6 | 	mov	arg03, #52
2949c     49 AD 02 F6 | 	mov	local04, arg01
294a0     D8 00 A0 FD | 	call	#\builtin_bytefill_
294a4     56 7B 02 F6 | 	mov	result1, local04
294a8     54 93 CA FA | 	rdbyte	arg01, local02 wz
294ac     08 A6 06 A1 |  if_e	add	local01, #8
294b0     08 00 80 AF 
294b4     53 FF 6B AC |  if_e	wrlong	##4607, local01
294b8     00 7A 06 A6 |  if_e	mov	result1, #0
294bc     38 00 90 AD |  if_e	jmp	#LR__4072
294c0     34 AA 06 F1 | 	add	local03, #52
294c4     55 AB 02 FB | 	rdlong	local03, local03
294c8     55 AD 02 F6 | 	mov	local04, local03
294cc     13 AA 46 F7 | 	zerox	local03, #19
294d0     14 AC 46 F0 | 	shr	local04, #20
294d4     02 AC 66 F0 | 	shl	local04, #2
294d8     2D AD 02 F1 | 	add	local04, __methods__
294dc     56 AD 02 FB | 	rdlong	local04, local04
294e0     54 93 02 F6 | 	mov	arg01, local02
294e4     53 95 02 F6 | 	mov	arg02, local01
294e8     32 A9 02 F6 | 	mov	local02, objptr
294ec     55 65 02 F6 | 	mov	objptr, local03
294f0     2D AC 62 FD | 	call	local04
294f4     54 65 02 F6 | 	mov	objptr, local02
294f8                 | LR__4072
294f8     E7 F0 03 F6 | 	mov	ptra, fp
294fc     F2 00 A0 FD | 	call	#popregs_
29500                 | __system__stat_ret
29500     2D 00 64 FD | 	ret
29504                 | 
29504                 | __system__write
29504     01 CA 05 F6 | 	mov	COUNT_, #1
29508     E8 00 A0 FD | 	call	#pushregs_
2950c     0A 92 16 F2 | 	cmp	arg01, #10 wc
29510     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
29514     34 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
29518     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
2951c     01 7A 66 36 |  if_ae	neg	result1, #1
29520     1C 00 90 3D |  if_ae	jmp	#LR__4080
29524     34 92 06 FD | 	qmul	arg01, #52
29528     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
2952c     02 00 00 FF 
29530     2C A7 06 F1 | 	add	local01, ##1324
29534     18 92 62 FD | 	getqx	arg01
29538     53 93 02 F1 | 	add	arg01, local01
2953c     3C 0F B0 FD | 	call	#__system___vfswrite
29540                 | LR__4080
29540     E7 F0 03 F6 | 	mov	ptra, fp
29544     F2 00 A0 FD | 	call	#popregs_
29548                 | __system__write_ret
29548     2D 00 64 FD | 	ret
2954c                 | 
2954c                 | __system__read
2954c     01 CA 05 F6 | 	mov	COUNT_, #1
29550     E8 00 A0 FD | 	call	#pushregs_
29554     0A 92 16 F2 | 	cmp	arg01, #10 wc
29558     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
2955c     34 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
29560     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
29564     01 7A 66 36 |  if_ae	neg	result1, #1
29568     1C 00 90 3D |  if_ae	jmp	#LR__4090
2956c     34 92 06 FD | 	qmul	arg01, #52
29570     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
29574     02 00 00 FF 
29578     2C A7 06 F1 | 	add	local01, ##1324
2957c     18 92 62 FD | 	getqx	arg01
29580     53 93 02 F1 | 	add	arg01, local01
29584     C0 10 B0 FD | 	call	#__system___vfsread
29588                 | LR__4090
29588     E7 F0 03 F6 | 	mov	ptra, fp
2958c     F2 00 A0 FD | 	call	#popregs_
29590                 | __system__read_ret
29590     2D 00 64 FD | 	ret
29594                 | 
29594                 | __system__close
29594     01 CA 05 F6 | 	mov	COUNT_, #1
29598     E8 00 A0 FD | 	call	#pushregs_
2959c     0A 92 16 F2 | 	cmp	arg01, #10 wc
295a0     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
295a4     34 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
295a8     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
295ac     01 7A 66 36 |  if_ae	neg	result1, #1
295b0     1C 00 90 3D |  if_ae	jmp	#LR__4100
295b4     34 92 06 FD | 	qmul	arg01, #52
295b8     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
295bc     02 00 00 FF 
295c0     2C A7 06 F1 | 	add	local01, ##1324
295c4     18 92 62 FD | 	getqx	arg01
295c8     53 93 02 F1 | 	add	arg01, local01
295cc     60 F9 BF FD | 	call	#__system___closeraw
295d0                 | LR__4100
295d0     E7 F0 03 F6 | 	mov	ptra, fp
295d4     F2 00 A0 FD | 	call	#popregs_
295d8                 | __system__close_ret
295d8     2D 00 64 FD | 	ret
295dc                 | 
295dc                 | __system__lseek
295dc     0B CA 05 F6 | 	mov	COUNT_, #11
295e0     E8 00 A0 FD | 	call	#pushregs_
295e4     49 AF 02 F6 | 	mov	local05, arg01
295e8     4A A7 02 F6 | 	mov	local01, arg02
295ec     4B A9 02 F6 | 	mov	local02, arg03
295f0     4C B1 02 F6 | 	mov	local06, arg04
295f4     0A AE 16 F2 | 	cmp	local05, #10 wc
295f8     18 00 90 CD |  if_b	jmp	#LR__4110
295fc     20 68 06 F1 | 	add	ptr___system__dat__, #32
29600     34 0B 68 FC | 	wrlong	#5, ptr___system__dat__
29604     20 68 86 F1 | 	sub	ptr___system__dat__, #32
29608     01 7C 66 F6 | 	neg	result2, #1
2960c     01 7A 66 F6 | 	neg	result1, #1
29610     FC 00 90 FD | 	jmp	#LR__4113
29614                 | LR__4110
29614     34 AE 06 FD | 	qmul	local05, #52
29618     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
2961c     02 00 00 FF 
29620     2C 93 06 F1 | 	add	arg01, ##1324
29624     18 B2 62 FD | 	getqx	local07
29628     49 B3 02 F1 | 	add	local07, arg01
2962c     30 B2 06 F1 | 	add	local07, #48
29630     59 AF 0A FB | 	rdlong	local05, local07 wz
29634     30 B2 86 F1 | 	sub	local07, #48
29638     18 00 90 5D |  if_ne	jmp	#LR__4111
2963c     20 68 06 F1 | 	add	ptr___system__dat__, #32
29640     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
29644     20 68 86 F1 | 	sub	ptr___system__dat__, #32
29648     01 7C 66 F6 | 	neg	result2, #1
2964c     01 7A 66 F6 | 	neg	result1, #1
29650     BC 00 90 FD | 	jmp	#LR__4113
29654                 | LR__4111
29654     08 B2 06 F1 | 	add	local07, #8
29658     59 B5 02 FB | 	rdlong	local08, local07
2965c     08 B2 86 F1 | 	sub	local07, #8
29660     80 B4 CE F7 | 	test	local08, #128 wz
29664     08 B2 06 51 |  if_ne	add	local07, #8
29668     59 B5 02 5B |  if_ne	rdlong	local08, local07
2966c     00 B5 46 55 |  if_ne	or	local08, #256
29670     59 B5 62 5C |  if_ne	wrlong	local08, local07
29674     08 B2 86 51 |  if_ne	sub	local07, #8
29678     53 95 02 F6 | 	mov	arg02, local01
2967c     54 97 02 F6 | 	mov	arg03, local02
29680     30 B2 06 F1 | 	add	local07, #48
29684     59 B7 02 FB | 	rdlong	local09, local07
29688     5B B9 02 F6 | 	mov	local10, local09
2968c     30 B2 86 F1 | 	sub	local07, #48
29690     13 B8 46 F7 | 	zerox	local10, #19
29694     14 B6 46 F0 | 	shr	local09, #20
29698     02 B6 66 F0 | 	shl	local09, #2
2969c     2D B7 02 F1 | 	add	local09, __methods__
296a0     5B B7 02 FB | 	rdlong	local09, local09
296a4     59 93 02 F6 | 	mov	arg01, local07
296a8     58 99 02 F6 | 	mov	arg04, local06
296ac     32 BB 02 F6 | 	mov	local11, objptr
296b0     5C 65 02 F6 | 	mov	objptr, local10
296b4     2D B6 62 FD | 	call	local09
296b8     5D 65 02 F6 | 	mov	objptr, local11
296bc     3D AB 02 F6 | 	mov	local03, result1
296c0     3E AD 02 F6 | 	mov	local04, result2
296c4     55 93 02 F6 | 	mov	arg01, local03
296c8     56 95 02 F6 | 	mov	arg02, local04
296cc     00 7A 06 F6 | 	mov	result1, #0
296d0     00 92 1E F2 | 	cmp	arg01, #0 wcz
296d4     00 94 7E F2 | 	cmpsx	arg02, #0 wcz
296d8     01 7A 86 56 |  if_ne	negc	result1, #1
296dc     00 7A 56 F2 | 	cmps	result1, #0 wc
296e0     24 00 90 3D |  if_ae	jmp	#LR__4112
296e4     55 93 6A F6 | 	neg	arg01, local03 wz
296e8     20 68 06 F1 | 	add	ptr___system__dat__, #32
296ec     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
296f0     20 68 86 F1 | 	sub	ptr___system__dat__, #32
296f4     01 7A 66 56 |  if_ne	neg	result1, #1
296f8     00 7A 06 A6 |  if_e	mov	result1, #0
296fc     3D 7D 02 F6 | 	mov	result2, result1
29700     1F 7C C6 F0 | 	sar	result2, #31
29704     08 00 90 FD | 	jmp	#LR__4113
29708                 | LR__4112
29708     55 7B 02 F6 | 	mov	result1, local03
2970c     56 7D 02 F6 | 	mov	result2, local04
29710                 | LR__4113
29710     E7 F0 03 F6 | 	mov	ptra, fp
29714     F2 00 A0 FD | 	call	#popregs_
29718                 | __system__lseek_ret
29718     2D 00 64 FD | 	ret
2971c                 | 
2971c                 | __system___ioctl
2971c     03 CA 05 F6 | 	mov	COUNT_, #3
29720     E8 00 A0 FD | 	call	#pushregs_
29724     00 92 4E F2 | 	cmps	arg01, #0 wz
29728     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2972c     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
29730     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
29734     01 7A 66 A6 |  if_e	neg	result1, #1
29738     5C 00 90 AD |  if_e	jmp	#LR__4121
2973c     28 92 06 F1 | 	add	arg01, #40
29740     49 A7 02 FB | 	rdlong	local01, arg01
29744     53 A9 02 F6 | 	mov	local02, local01
29748     28 92 86 F1 | 	sub	arg01, #40
2974c     13 A8 46 F7 | 	zerox	local02, #19
29750     14 A6 46 F0 | 	shr	local01, #20
29754     02 A6 66 F0 | 	shl	local01, #2
29758     2D A7 02 F1 | 	add	local01, __methods__
2975c     53 A7 02 FB | 	rdlong	local01, local01
29760     32 AB 02 F6 | 	mov	local03, objptr
29764     54 65 02 F6 | 	mov	objptr, local02
29768     2D A6 62 FD | 	call	local01
2976c     55 65 02 F6 | 	mov	objptr, local03
29770     3D 93 0A F6 | 	mov	arg01, result1 wz
29774     1C 00 90 AD |  if_e	jmp	#LR__4120
29778     00 92 4E F2 | 	cmps	arg01, #0 wz
2977c     20 68 06 F1 | 	add	ptr___system__dat__, #32
29780     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
29784     20 68 86 F1 | 	sub	ptr___system__dat__, #32
29788     01 7A 66 56 |  if_ne	neg	result1, #1
2978c     00 7A 06 A6 |  if_e	mov	result1, #0
29790     04 00 90 FD | 	jmp	#LR__4121
29794                 | LR__4120
29794     00 7A 06 F6 | 	mov	result1, #0
29798                 | LR__4121
29798     E7 F0 03 F6 | 	mov	ptra, fp
2979c     F2 00 A0 FD | 	call	#popregs_
297a0                 | __system___ioctl_ret
297a0     2D 00 64 FD | 	ret
297a4                 | 
297a4                 | __system___isatty
297a4     00 CA 05 F6 | 	mov	COUNT_, #0
297a8     E8 00 A0 FD | 	call	#pushregs_
297ac     0C F0 07 F1 | 	add	ptra, #12
297b0     E7 96 02 F6 | 	mov	arg03, fp
297b4     08 96 06 F1 | 	add	arg03, #8
297b8     00 95 06 F6 | 	mov	arg02, #256
297bc     5C FF BF FD | 	call	#__system___ioctl
297c0     00 7A 0E F2 | 	cmp	result1, #0 wz
297c4     01 7A 06 A6 |  if_e	mov	result1, #1
297c8     00 7A 06 56 |  if_ne	mov	result1, #0
297cc     E7 F0 03 F6 | 	mov	ptra, fp
297d0     F2 00 A0 FD | 	call	#popregs_
297d4                 | __system___isatty_ret
297d4     2D 00 64 FD | 	ret
297d8                 | 
297d8                 | __system____getftab
297d8     0A 92 16 F2 | 	cmp	arg01, #10 wc
297dc     34 92 06 CD |  if_b	qmul	arg01, #52
297e0     00 7A 06 36 |  if_ae	mov	result1, #0
297e4     34 93 02 C6 |  if_b	mov	arg01, ptr___system__dat__
297e8     02 00 00 CF 
297ec     2C 93 06 C1 |  if_b	add	arg01, ##1324
297f0     18 7A 62 CD |  if_b	getqx	result1
297f4     49 7B 02 C1 |  if_b	add	result1, arg01
297f8                 | __system____getftab_ret
297f8     2D 00 64 FD | 	ret
297fc                 | 
297fc                 | __system__strncpy
297fc     49 81 02 F6 | 	mov	_var01, arg01
29800                 | LR__4130
29800     01 96 86 F1 | 	sub	arg03, #1
29804     00 96 56 F2 | 	cmps	arg03, #0 wc
29808     24 00 90 CD |  if_b	jmp	#LR__4131
2980c     4A 7B 02 F6 | 	mov	result1, arg02
29810     01 7A 06 F1 | 	add	result1, #1
29814     4A 83 C2 FA | 	rdbyte	_var02, arg02
29818     3D 95 02 F6 | 	mov	arg02, result1
2981c     40 83 42 FC | 	wrbyte	_var02, _var01
29820     41 83 E2 F8 | 	getbyte	_var02, _var02, #0
29824     07 82 4E F7 | 	zerox	_var02, #7 wz
29828     01 80 06 F1 | 	add	_var01, #1
2982c     D0 FF 9F 5D |  if_ne	jmp	#LR__4130
29830                 | LR__4131
29830     D7 0C 48 FB | 	callpa	#(@LR__4133-@LR__4132)>>2,fcache_load_ptr_
29834                 | LR__4132
29834     01 96 86 F1 | 	sub	arg03, #1
29838     00 96 56 F2 | 	cmps	arg03, #0 wc
2983c     40 85 02 36 |  if_ae	mov	_var03, _var01
29840     01 80 06 31 |  if_ae	add	_var01, #1
29844     42 01 48 3C |  if_ae	wrbyte	#0, _var03
29848     E8 FF 9F 3D |  if_ae	jmp	#LR__4132
2984c                 | LR__4133
2984c     49 7B 02 F6 | 	mov	result1, arg01
29850                 | __system__strncpy_ret
29850     2D 00 64 FD | 	ret
29854                 | 
29854                 | __system__strncat
29854     00 94 4E F2 | 	cmps	arg02, #0 wz
29858     54 00 90 AD |  if_e	jmp	#LR__4145
2985c     01 96 16 F2 | 	cmp	arg03, #1 wc
29860     4C 00 90 CD |  if_b	jmp	#LR__4145
29864     49 81 02 F6 | 	mov	_var01, arg01
29868     D7 06 48 FB | 	callpa	#(@LR__4141-@LR__4140)>>2,fcache_load_ptr_
2986c                 | LR__4140
2986c     40 7B CA FA | 	rdbyte	result1, _var01 wz
29870     01 80 06 51 |  if_ne	add	_var01, #1
29874     F4 FF 9F 5D |  if_ne	jmp	#LR__4140
29878                 | LR__4141
29878     4B 83 02 F6 | 	mov	_var02, arg03
2987c     D7 16 48 FB | 	callpa	#(@LR__4143-@LR__4142)>>2,fcache_load_ptr_
29880                 | LR__4142
29880     4A 85 C2 FA | 	rdbyte	_var03, arg02
29884     42 87 02 F6 | 	mov	_var04, _var03
29888     07 86 4E F7 | 	zerox	_var04, #7 wz
2988c     01 94 06 F1 | 	add	arg02, #1
29890     18 00 90 AD |  if_e	jmp	#LR__4144
29894     01 82 86 F1 | 	sub	_var02, #1
29898     00 82 56 F2 | 	cmps	_var02, #0 wc
2989c     40 87 02 36 |  if_ae	mov	_var04, _var01
298a0     01 80 06 31 |  if_ae	add	_var01, #1
298a4     43 85 42 3C |  if_ae	wrbyte	_var03, _var04
298a8     D4 FF 9F 3D |  if_ae	jmp	#LR__4142
298ac                 | LR__4143
298ac                 | LR__4144
298ac     40 01 48 FC | 	wrbyte	#0, _var01
298b0                 | LR__4145
298b0     49 7B 02 F6 | 	mov	result1, arg01
298b4                 | __system__strncat_ret
298b4     2D 00 64 FD | 	ret
298b8                 | 
298b8                 | __system__strncmp
298b8     49 81 0A F6 | 	mov	_var01, arg01 wz
298bc     14 00 90 5D |  if_ne	jmp	#LR__4150
298c0     00 94 0E F2 | 	cmp	arg02, #0 wz
298c4     01 82 66 56 |  if_ne	neg	_var02, #1
298c8     00 82 06 A6 |  if_e	mov	_var02, #0
298cc     41 7B 02 F6 | 	mov	result1, _var02
298d0     74 00 90 FD | 	jmp	#__system__strncmp_ret
298d4                 | LR__4150
298d4     00 94 0E F2 | 	cmp	arg02, #0 wz
298d8     01 7A 06 A6 |  if_e	mov	result1, #1
298dc     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
298e0     4B 85 02 F6 | 	mov	_var03, arg03
298e4     D7 16 48 FB | 	callpa	#(@LR__4152-@LR__4151)>>2,fcache_load_ptr_
298e8                 | LR__4151
298e8     40 87 C2 FA | 	rdbyte	_var04, _var01
298ec     4A 89 02 F6 | 	mov	_var05, arg02
298f0     44 8B C2 FA | 	rdbyte	_var06, _var05
298f4     01 84 86 F1 | 	sub	_var03, #1
298f8     00 84 56 F2 | 	cmps	_var03, #0 wc
298fc     01 80 06 F1 | 	add	_var01, #1
29900     01 94 06 F1 | 	add	arg02, #1
29904     00 86 0E 32 |  if_ae	cmp	_var04, #0 wz
29908     08 00 90 2D |  if_nc_and_z	jmp	#LR__4153
2990c     45 87 0A 32 |  if_ae	cmp	_var04, _var06 wz
29910     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4151
29914                 | LR__4152
29914                 | LR__4153
29914     00 84 56 F2 | 	cmps	_var03, #0 wc
29918     00 7A 06 C6 |  if_b	mov	result1, #0
2991c     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
29920     45 87 0A F2 | 	cmp	_var04, _var06 wz
29924     00 7A 06 A6 |  if_e	mov	result1, #0
29928     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2992c     00 86 0E F2 | 	cmp	_var04, #0 wz
29930     01 7A 66 A6 |  if_e	neg	result1, #1
29934     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
29938     00 8A 0E F2 | 	cmp	_var06, #0 wz
2993c     01 7A 06 A6 |  if_e	mov	result1, #1
29940     43 7B 02 56 |  if_ne	mov	result1, _var04
29944     45 7B 82 51 |  if_ne	sub	result1, _var06
29948                 | __system__strncmp_ret
29948     2D 00 64 FD | 	ret
2994c                 | 
2994c                 | __system____root_opendir
2994c     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
29950     64 7A 06 F1 | 	add	result1, #100
29954     04 92 06 F1 | 	add	arg01, #4
29958     49 7B 62 FC | 	wrlong	result1, arg01
2995c     00 7A 06 F6 | 	mov	result1, #0
29960                 | __system____root_opendir_ret
29960     2D 00 64 FD | 	ret
29964                 | 
29964                 | __system____root_readdir
29964     03 CA 05 F6 | 	mov	COUNT_, #3
29968     E8 00 A0 FD | 	call	#pushregs_
2996c     49 A7 02 F6 | 	mov	local01, arg01
29970     4A A9 02 F6 | 	mov	local02, arg02
29974     04 A6 06 F1 | 	add	local01, #4
29978     53 AB 02 FB | 	rdlong	local03, local01
2997c     04 A6 86 F1 | 	sub	local01, #4
29980                 | LR__4160
29980     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
29984     74 96 06 F1 | 	add	arg03, #116
29988     4B AB 0A F2 | 	cmp	local03, arg03 wz
2998c     01 7A 66 A6 |  if_e	neg	result1, #1
29990     48 00 90 AD |  if_e	jmp	#LR__4161
29994     55 97 0A FB | 	rdlong	arg03, local03 wz
29998     04 AA 06 A1 |  if_e	add	local03, #4
2999c     E0 FF 9F AD |  if_e	jmp	#LR__4160
299a0     55 95 02 FB | 	rdlong	arg02, local03
299a4     01 94 06 F1 | 	add	arg02, #1
299a8     54 93 02 F6 | 	mov	arg01, local02
299ac     40 96 06 F6 | 	mov	arg03, #64
299b0     48 FE BF FD | 	call	#__system__strncpy
299b4     50 A8 06 F1 | 	add	local02, #80
299b8     54 03 48 FC | 	wrbyte	#1, local02
299bc     08 A8 86 F1 | 	sub	local02, #8
299c0     54 01 68 FC | 	wrlong	#0, local02
299c4     04 A8 06 F1 | 	add	local02, #4
299c8     54 01 68 FC | 	wrlong	#0, local02
299cc     04 AA 06 F1 | 	add	local03, #4
299d0     04 A6 06 F1 | 	add	local01, #4
299d4     53 AB 62 FC | 	wrlong	local03, local01
299d8     00 7A 06 F6 | 	mov	result1, #0
299dc                 | LR__4161
299dc     E7 F0 03 F6 | 	mov	ptra, fp
299e0     F2 00 A0 FD | 	call	#popregs_
299e4                 | __system____root_readdir_ret
299e4     2D 00 64 FD | 	ret
299e8                 | 
299e8                 | __system____root_closedir
299e8     00 7A 06 F6 | 	mov	result1, #0
299ec                 | __system____root_closedir_ret
299ec     2D 00 64 FD | 	ret
299f0                 | 
299f0                 | __system____root_stat
299f0     4A 81 02 F6 | 	mov	_var01, arg02
299f4     40 93 02 F6 | 	mov	arg01, _var01
299f8     00 94 06 F6 | 	mov	arg02, #0
299fc     34 96 06 F6 | 	mov	arg03, #52
29a00     D8 00 A0 FD | 	call	#\builtin_bytefill_
29a04     08 80 06 F1 | 	add	_var01, #8
29a08     08 00 80 FF 
29a0c     40 FF 6B FC | 	wrlong	##4607, _var01
29a10     00 7A 06 F6 | 	mov	result1, #0
29a14                 | __system____root_stat_ret
29a14     2D 00 64 FD | 	ret
29a18                 | 
29a18                 | __system___normalizeName
29a18     00 80 06 F6 | 	mov	_var01, #0
29a1c     49 83 02 F6 | 	mov	_var02, arg01
29a20     41 85 02 F6 | 	mov	_var03, _var02
29a24                 | LR__4170
29a24     41 87 CA FA | 	rdbyte	_var04, _var02 wz
29a28     5C 01 90 AD |  if_e	jmp	#LR__4189
29a2c     00 80 0E F2 | 	cmp	_var01, #0 wz
29a30     42 87 02 56 |  if_ne	mov	_var04, _var03
29a34     01 84 06 51 |  if_ne	add	_var03, #1
29a38     43 5F 48 5C |  if_ne	wrbyte	#47, _var04
29a3c     00 80 06 56 |  if_ne	mov	_var01, #0
29a40     41 87 C2 FA | 	rdbyte	_var04, _var02
29a44     2E 86 0E F2 | 	cmp	_var04, #46 wz
29a48     D8 00 90 5D |  if_ne	jmp	#LR__4182
29a4c     01 82 06 F1 | 	add	_var02, #1
29a50     41 87 C2 FA | 	rdbyte	_var04, _var02
29a54     01 82 86 F1 | 	sub	_var02, #1
29a58     2F 86 0E F2 | 	cmp	_var04, #47 wz
29a5c     18 00 90 AD |  if_e	jmp	#LR__4171
29a60     01 82 06 F1 | 	add	_var02, #1
29a64     41 89 C2 FA | 	rdbyte	_var05, _var02
29a68     01 82 86 F1 | 	sub	_var02, #1
29a6c     44 8B 02 F6 | 	mov	_var06, _var05
29a70     07 8A 4E F7 | 	zerox	_var06, #7 wz
29a74     10 00 90 5D |  if_ne	jmp	#LR__4172
29a78                 | LR__4171
29a78     41 8D 02 F6 | 	mov	_var07, _var02
29a7c     01 8C 06 F1 | 	add	_var07, #1
29a80     46 83 02 F6 | 	mov	_var02, _var07
29a84     E0 00 90 FD | 	jmp	#LR__4186
29a88                 | LR__4172
29a88     01 82 06 F1 | 	add	_var02, #1
29a8c     41 8D C2 FA | 	rdbyte	_var07, _var02
29a90     01 82 86 F1 | 	sub	_var02, #1
29a94     46 87 E2 F8 | 	getbyte	_var04, _var07, #0
29a98     2E 86 0E F2 | 	cmp	_var04, #46 wz
29a9c     84 00 90 5D |  if_ne	jmp	#LR__4181
29aa0     02 82 06 F1 | 	add	_var02, #2
29aa4     41 8D C2 FA | 	rdbyte	_var07, _var02
29aa8     02 82 86 F1 | 	sub	_var02, #2
29aac     46 87 E2 F8 | 	getbyte	_var04, _var07, #0
29ab0     2F 86 0E F2 | 	cmp	_var04, #47 wz
29ab4     18 00 90 AD |  if_e	jmp	#LR__4173
29ab8     02 82 06 F1 | 	add	_var02, #2
29abc     41 89 C2 FA | 	rdbyte	_var05, _var02
29ac0     02 82 86 F1 | 	sub	_var02, #2
29ac4     44 8B 02 F6 | 	mov	_var06, _var05
29ac8     07 8A 4E F7 | 	zerox	_var06, #7 wz
29acc     54 00 90 5D |  if_ne	jmp	#LR__4180
29ad0                 | LR__4173
29ad0     02 82 06 F1 | 	add	_var02, #2
29ad4     49 85 5A F2 | 	cmps	_var03, arg01 wcz
29ad8     40 00 90 ED |  if_be	jmp	#LR__4179
29adc     42 8F 02 F6 | 	mov	_var08, _var03
29ae0     01 8E 86 F1 | 	sub	_var08, #1
29ae4                 | LR__4174
29ae4     47 87 C2 FA | 	rdbyte	_var04, _var08
29ae8     2F 86 0E F2 | 	cmp	_var04, #47 wz
29aec     0C 00 90 5D |  if_ne	jmp	#LR__4175
29af0     49 8F 5A F2 | 	cmps	_var08, arg01 wcz
29af4     01 8E 86 11 |  if_a	sub	_var08, #1
29af8     E8 FF 9F 1D |  if_a	jmp	#LR__4174
29afc                 | LR__4175
29afc     D7 0C 48 FB | 	callpa	#(@LR__4177-@LR__4176)>>2,fcache_load_ptr_
29b00                 | LR__4176
29b00     49 8F 5A F2 | 	cmps	_var08, arg01 wcz
29b04     10 00 90 ED |  if_be	jmp	#LR__4178
29b08     47 87 C2 FA | 	rdbyte	_var04, _var08
29b0c     2F 86 0E F2 | 	cmp	_var04, #47 wz
29b10     01 8E 86 51 |  if_ne	sub	_var08, #1
29b14     E8 FF 9F 5D |  if_ne	jmp	#LR__4176
29b18                 | LR__4177
29b18                 | LR__4178
29b18     47 85 02 F6 | 	mov	_var03, _var08
29b1c                 | LR__4179
29b1c     01 80 06 F6 | 	mov	_var01, #1
29b20     44 00 90 FD | 	jmp	#LR__4186
29b24                 | LR__4180
29b24                 | LR__4181
29b24                 | LR__4182
29b24     D7 18 48 FB | 	callpa	#(@LR__4184-@LR__4183)>>2,fcache_load_ptr_
29b28                 | LR__4183
29b28     41 87 CA FA | 	rdbyte	_var04, _var02 wz
29b2c     43 8D 02 56 |  if_ne	mov	_var07, _var04
29b30     2F 8C 0E 52 |  if_ne	cmp	_var07, #47 wz
29b34     20 00 90 AD |  if_e	jmp	#LR__4185
29b38     41 8B 02 F6 | 	mov	_var06, _var02
29b3c     41 89 02 F6 | 	mov	_var05, _var02
29b40     01 88 06 F1 | 	add	_var05, #1
29b44     45 91 C2 FA | 	rdbyte	_var09, _var06
29b48     44 83 02 F6 | 	mov	_var02, _var05
29b4c     42 91 42 FC | 	wrbyte	_var09, _var03
29b50     01 84 06 F1 | 	add	_var03, #1
29b54     D0 FF 9F FD | 	jmp	#LR__4183
29b58                 | LR__4184
29b58                 | LR__4185
29b58     41 87 C2 FA | 	rdbyte	_var04, _var02
29b5c     2F 86 0E F2 | 	cmp	_var04, #47 wz
29b60     C0 FE 9F 5D |  if_ne	jmp	#LR__4170
29b64     01 80 06 F6 | 	mov	_var01, #1
29b68                 | LR__4186
29b68     D7 0C 48 FB | 	callpa	#(@LR__4188-@LR__4187)>>2,fcache_load_ptr_
29b6c                 | LR__4187
29b6c     41 87 C2 FA | 	rdbyte	_var04, _var02
29b70     2F 86 0E F2 | 	cmp	_var04, #47 wz
29b74     41 8D 02 A6 |  if_e	mov	_var07, _var02
29b78     01 8C 06 A1 |  if_e	add	_var07, #1
29b7c     46 83 02 A6 |  if_e	mov	_var02, _var07
29b80     E8 FF 9F AD |  if_e	jmp	#LR__4187
29b84                 | LR__4188
29b84     9C FE 9F FD | 	jmp	#LR__4170
29b88                 | LR__4189
29b88     42 01 48 FC | 	wrbyte	#0, _var03
29b8c                 | __system___normalizeName_ret
29b8c     2D 00 64 FD | 	ret
29b90                 | 
29b90                 | __system___strrev
29b90     49 81 CA FA | 	rdbyte	_var01, arg01 wz
29b94     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
29b98     49 83 02 F6 | 	mov	_var02, arg01
29b9c     D7 06 48 FB | 	callpa	#(@LR__4191-@LR__4190)>>2,fcache_load_ptr_
29ba0                 | LR__4190
29ba0     41 81 CA FA | 	rdbyte	_var01, _var02 wz
29ba4     01 82 06 51 |  if_ne	add	_var02, #1
29ba8     F4 FF 9F 5D |  if_ne	jmp	#LR__4190
29bac                 | LR__4191
29bac     01 82 86 F1 | 	sub	_var02, #1
29bb0     D7 12 48 FB | 	callpa	#(@LR__4193-@LR__4192)>>2,fcache_load_ptr_
29bb4                 | LR__4192
29bb4     49 83 5A F2 | 	cmps	_var02, arg01 wcz
29bb8     1C 00 90 ED |  if_be	jmp	#LR__4194
29bbc     49 81 C2 FA | 	rdbyte	_var01, arg01
29bc0     41 85 C2 FA | 	rdbyte	_var03, _var02
29bc4     49 85 42 FC | 	wrbyte	_var03, arg01
29bc8     41 81 42 FC | 	wrbyte	_var01, _var02
29bcc     01 92 06 F1 | 	add	arg01, #1
29bd0     01 82 86 F1 | 	sub	_var02, #1
29bd4     DC FF 9F FD | 	jmp	#LR__4192
29bd8                 | LR__4193
29bd8                 | LR__4194
29bd8                 | __system___strrev_ret
29bd8     2D 00 64 FD | 	ret
29bdc                 | 
29bdc                 | __system___fmtpad
29bdc     06 CA 05 F6 | 	mov	COUNT_, #6
29be0     E8 00 A0 FD | 	call	#pushregs_
29be4     49 A7 02 F6 | 	mov	local01, arg01
29be8     4A A9 02 F6 | 	mov	local02, arg02
29bec     4B AB 02 F6 | 	mov	local03, arg03
29bf0     54 93 EA F8 | 	getbyte	arg01, local02, #1
29bf4     16 A8 46 F0 | 	shr	local02, #22
29bf8     03 A8 0E F5 | 	and	local02, #3 wz
29bfc     00 AC 06 F6 | 	mov	local04, #0
29c00     01 A8 06 A6 |  if_e	mov	local02, #1
29c04     4C A9 CA F7 | 	test	local02, arg04 wz
29c08     00 7A 06 A6 |  if_e	mov	result1, #0
29c0c     88 00 90 AD |  if_e	jmp	#LR__4203
29c10     49 AB C2 F2 | 	subr	local03, arg01
29c14     01 AA 56 F2 | 	cmps	local03, #1 wc
29c18     00 7A 06 C6 |  if_b	mov	result1, #0
29c1c     78 00 90 CD |  if_b	jmp	#LR__4203
29c20     03 A8 0E F2 | 	cmp	local02, #3 wz
29c24     18 00 90 5D |  if_ne	jmp	#LR__4200
29c28     01 98 0E F2 | 	cmp	arg04, #1 wz
29c2c     6E A8 62 FD | 	wrz	local02
29c30     54 AB 02 F1 | 	add	local03, local02
29c34     55 AB 52 F6 | 	abs	local03, local03 wc
29c38     01 AA 46 F0 | 	shr	local03, #1
29c3c     55 AB 82 F6 | 	negc	local03, local03
29c40                 | LR__4200
29c40     01 AA 56 F2 | 	cmps	local03, #1 wc
29c44     4C 00 90 CD |  if_b	jmp	#LR__4202
29c48     55 AF 02 F6 | 	mov	local05, local03
29c4c                 | LR__4201
29c4c     53 A9 02 F6 | 	mov	local02, local01
29c50     53 B1 02 F6 | 	mov	local06, local01
29c54     13 A8 46 F7 | 	zerox	local02, #19
29c58     14 B0 46 F0 | 	shr	local06, #20
29c5c     02 B0 66 F0 | 	shl	local06, #2
29c60     2D B1 02 F1 | 	add	local06, __methods__
29c64     58 B1 02 FB | 	rdlong	local06, local06
29c68     20 92 06 F6 | 	mov	arg01, #32
29c6c     32 AB 02 F6 | 	mov	local03, objptr
29c70     54 65 02 F6 | 	mov	objptr, local02
29c74     2D B0 62 FD | 	call	local06
29c78     55 65 02 F6 | 	mov	objptr, local03
29c7c     3D B1 02 F6 | 	mov	local06, result1
29c80     00 B0 56 F2 | 	cmps	local06, #0 wc
29c84     58 7B 02 C6 |  if_b	mov	result1, local06
29c88     0C 00 90 CD |  if_b	jmp	#LR__4203
29c8c     58 AD 02 F1 | 	add	local04, local06
29c90     EE AF 6E FB | 	djnz	local05, #LR__4201
29c94                 | LR__4202
29c94     56 7B 02 F6 | 	mov	result1, local04
29c98                 | LR__4203
29c98     E7 F0 03 F6 | 	mov	ptra, fp
29c9c     F2 00 A0 FD | 	call	#popregs_
29ca0                 | __system___fmtpad_ret
29ca0     2D 00 64 FD | 	ret
29ca4                 | 
29ca4                 | __system___uitoa
29ca4     04 CA 05 F6 | 	mov	COUNT_, #4
29ca8     E8 00 A0 FD | 	call	#pushregs_
29cac     49 A7 02 F6 | 	mov	local01, arg01
29cb0     00 9A 4E F2 | 	cmps	arg05, #0 wz
29cb4     53 9B 02 F6 | 	mov	arg05, local01
29cb8     00 A8 06 F6 | 	mov	local02, #0
29cbc     37 AA 06 56 |  if_ne	mov	local03, #55
29cc0     57 AA 06 A6 |  if_e	mov	local03, #87
29cc4                 | LR__4210
29cc4     4B 95 12 FD | 	qdiv	arg02, arg03
29cc8     19 AC 62 FD | 	getqy	local04
29ccc     4B 95 12 FD | 	qdiv	arg02, arg03
29cd0     0A AC 16 F2 | 	cmp	local04, #10 wc
29cd4     30 AC 06 C1 |  if_b	add	local04, #48
29cd8     55 AD 02 31 |  if_ae	add	local04, local03
29cdc     4D AD 42 FC | 	wrbyte	local04, arg05
29ce0     01 9A 06 F1 | 	add	arg05, #1
29ce4     01 A8 06 F1 | 	add	local02, #1
29ce8     18 94 62 FD | 	getqx	arg02
29cec     00 94 0E F2 | 	cmp	arg02, #0 wz
29cf0     D0 FF 9F 5D |  if_ne	jmp	#LR__4210
29cf4     4C A9 12 F2 | 	cmp	local02, arg04 wc
29cf8     C8 FF 9F CD |  if_b	jmp	#LR__4210
29cfc     4D 01 48 FC | 	wrbyte	#0, arg05
29d00     53 93 02 F6 | 	mov	arg01, local01
29d04     88 FE BF FD | 	call	#__system___strrev
29d08     54 7B 02 F6 | 	mov	result1, local02
29d0c     E7 F0 03 F6 | 	mov	ptra, fp
29d10     F2 00 A0 FD | 	call	#popregs_
29d14                 | __system___uitoa_ret
29d14     2D 00 64 FD | 	ret
29d18                 | 
29d18                 | __system__disassemble_0582
29d18     10 CA 05 F6 | 	mov	COUNT_, #16
29d1c     E8 00 A0 FD | 	call	#pushregs_
29d20     49 A7 02 F6 | 	mov	local01, arg01
29d24     4A A9 02 F6 | 	mov	local02, arg02
29d28     4B AB 02 F6 | 	mov	local03, arg03
29d2c     4C AD 02 F6 | 	mov	local04, arg04
29d30     4D AF 02 F6 | 	mov	local05, arg05
29d34     57 93 52 F6 | 	abs	arg01, local05 wc
29d38     1F B0 C6 C9 |  if_b	decod	local06, #31
29d3c     00 B0 06 36 |  if_ae	mov	local06, #0
29d40     40 CF BF FD | 	call	#__system___float_fromuns
29d44     58 7B 62 F5 | 	xor	result1, local06
29d48     3D B3 02 F6 | 	mov	local07, result1
29d4c     00 B4 06 F6 | 	mov	local08, #0
29d50     53 93 02 F6 | 	mov	arg01, local01
29d54     00 94 06 F6 | 	mov	arg02, #0
29d58     01 96 06 F6 | 	mov	arg03, #1
29d5c     5C D7 BF FD | 	call	#__system___float_cmp
29d60     00 7A 0E F2 | 	cmp	result1, #0 wz
29d64     00 B6 06 A6 |  if_e	mov	local09, #0
29d68     54 01 68 AC |  if_e	wrlong	#0, local02
29d6c     55 B7 62 AC |  if_e	wrlong	local09, local03
29d70     8C 01 90 AD |  if_e	jmp	#LR__4232
29d74     53 93 02 F6 | 	mov	arg01, local01
29d78     40 DC BF FD | 	call	#__system____builtin_ilogb
29d7c     3D B9 02 F6 | 	mov	local10, result1
29d80     0A AE 0E F2 | 	cmp	local05, #10 wz
29d84     24 00 90 5D |  if_ne	jmp	#LR__4220
29d88     5C B7 02 F6 | 	mov	local09, local10
29d8c     01 B6 66 F0 | 	shl	local09, #1
29d90     5C B7 02 F1 | 	add	local09, local10
29d94     5B B9 52 F6 | 	abs	local10, local09 wc
29d98     0A B8 16 FD | 	qdiv	local10, #10
29d9c     09 BA 06 F6 | 	mov	local11, #9
29da0     18 B8 62 FD | 	getqx	local10
29da4     5C B9 82 F6 | 	negc	local10, local10
29da8     04 00 90 FD | 	jmp	#LR__4221
29dac                 | LR__4220
29dac     18 BA 06 F6 | 	mov	local11, #24
29db0                 | LR__4221
29db0                 | LR__4222
29db0     08 B4 56 F2 | 	cmps	local08, #8 wc
29db4     01 B4 06 F1 | 	add	local08, #1
29db8     60 00 90 3D |  if_ae	jmp	#LR__4223
29dbc     00 C0 1F FF 
29dc0     00 92 06 F6 | 	mov	arg01, ##1065353216
29dc4     59 95 02 F6 | 	mov	arg02, local07
29dc8     5C 97 02 F6 | 	mov	arg03, local10
29dcc     D0 E2 BF FD | 	call	#__system___float_pow_n
29dd0     3D 95 02 F6 | 	mov	arg02, result1
29dd4     53 93 02 F6 | 	mov	arg01, local01
29dd8     B0 D4 BF FD | 	call	#__system___float_div
29ddc     3D BD 02 F6 | 	mov	local12, result1
29de0     5E 93 02 F6 | 	mov	arg01, local12
29de4     00 C0 1F FF 
29de8     00 94 06 F6 | 	mov	arg02, ##1065353216
29dec     01 96 06 F6 | 	mov	arg03, #1
29df0     C8 D6 BF FD | 	call	#__system___float_cmp
29df4     00 7A 56 F2 | 	cmps	result1, #0 wc
29df8     01 B8 86 C1 |  if_b	sub	local10, #1
29dfc     B0 FF 9F CD |  if_b	jmp	#LR__4222
29e00     59 95 02 F6 | 	mov	arg02, local07
29e04     5E 93 02 F6 | 	mov	arg01, local12
29e08     01 96 66 F6 | 	neg	arg03, #1
29e0c     AC D6 BF FD | 	call	#__system___float_cmp
29e10     00 7A 56 F2 | 	cmps	result1, #0 wc
29e14     01 B8 06 31 |  if_ae	add	local10, #1
29e18     94 FF 9F 3D |  if_ae	jmp	#LR__4222
29e1c                 | LR__4223
29e1c     5E 93 02 F6 | 	mov	arg01, local12
29e20     98 DB BF FD | 	call	#__system____builtin_ilogb
29e24     3D BF 02 F6 | 	mov	local13, result1
29e28     5E C1 02 F6 | 	mov	local14, local12
29e2c     17 C1 06 F4 | 	bitl	local14, #279
29e30     17 C0 26 F4 | 	bith	local14, #23
29e34     5F C1 62 F0 | 	shl	local14, local13
29e38     02 AE 0E F2 | 	cmp	local05, #2 wz
29e3c     02 AC 66 A0 |  if_e	shl	local04, #2
29e40     00 C2 06 F6 | 	mov	local15, #0
29e44     00 AC 56 F2 | 	cmps	local04, #0 wc
29e48     10 00 90 3D |  if_ae	jmp	#LR__4224
29e4c     5C AD C2 F2 | 	subr	local04, local10
29e50     00 AC 56 F2 | 	cmps	local04, #0 wc
29e54     A0 00 90 CD |  if_b	jmp	#LR__4231
29e58     04 00 90 FD | 	jmp	#LR__4225
29e5c                 | LR__4224
29e5c     01 AC 06 F1 | 	add	local04, #1
29e60                 | LR__4225
29e60     5D AD 7A F3 | 	fles	local04, local11 wcz
29e64     01 C4 06 F6 | 	mov	local16, #1
29e68     D7 22 48 FB | 	callpa	#(@LR__4227-@LR__4226)>>2,fcache_load_ptr_
29e6c                 | LR__4226
29e6c     00 40 00 FF 
29e70     00 C2 16 F2 | 	cmp	local15, ##8388608 wc
29e74     38 00 90 3D |  if_ae	jmp	#LR__4228
29e78     01 AC 56 F2 | 	cmps	local04, #1 wc
29e7c     01 AC 86 F1 | 	sub	local04, #1
29e80     2C 00 90 CD |  if_b	jmp	#LR__4228
29e84     57 C3 02 FD | 	qmul	local15, local05
29e88     60 BF 02 F6 | 	mov	local13, local14
29e8c     17 BE 46 F0 | 	shr	local13, #23
29e90     17 C1 06 F4 | 	bitl	local14, #279
29e94     18 C2 62 FD | 	getqx	local15
29e98     57 C5 02 FD | 	qmul	local16, local05
29e9c     18 C4 62 FD | 	getqx	local16
29ea0     57 C1 02 FD | 	qmul	local14, local05
29ea4     5F C3 02 F1 | 	add	local15, local13
29ea8     18 C0 62 FD | 	getqx	local14
29eac     BC FF 9F FD | 	jmp	#LR__4226
29eb0                 | LR__4227
29eb0                 | LR__4228
29eb0     57 B7 02 F6 | 	mov	local09, local05
29eb4     17 B6 66 F0 | 	shl	local09, #23
29eb8     5B BF 52 F6 | 	abs	local13, local09 wc
29ebc     01 BE 46 F0 | 	shr	local13, #1
29ec0     5F BF 82 F6 | 	negc	local13, local13
29ec4     5F C1 1A F2 | 	cmp	local14, local13 wcz
29ec8     20 00 90 1D |  if_a	jmp	#LR__4229
29ecc     17 AE 66 F0 | 	shl	local05, #23
29ed0     57 BF 52 F6 | 	abs	local13, local05 wc
29ed4     01 BE 46 F0 | 	shr	local13, #1
29ed8     5F BF 82 F6 | 	negc	local13, local13
29edc     5F C1 0A F2 | 	cmp	local14, local13 wz
29ee0     14 00 90 5D |  if_ne	jmp	#LR__4230
29ee4     01 C2 CE F7 | 	test	local15, #1 wz
29ee8     0C 00 90 AD |  if_e	jmp	#LR__4230
29eec                 | LR__4229
29eec     01 C2 06 F1 | 	add	local15, #1
29ef0     62 C3 0A F2 | 	cmp	local15, local16 wz
29ef4     01 B8 06 A1 |  if_e	add	local10, #1
29ef8                 | LR__4230
29ef8                 | LR__4231
29ef8     54 C3 62 FC | 	wrlong	local15, local02
29efc     55 B9 62 FC | 	wrlong	local10, local03
29f00                 | LR__4232
29f00     E7 F0 03 F6 | 	mov	ptra, fp
29f04     F2 00 A0 FD | 	call	#popregs_
29f08                 | __system__disassemble_0582_ret
29f08     2D 00 64 FD | 	ret
29f0c                 | 
29f0c                 | __system__emitsign_0584
29f0c     00 7A 06 F6 | 	mov	result1, #0
29f10     00 94 0E F2 | 	cmp	arg02, #0 wz
29f14     49 81 02 56 |  if_ne	mov	_var01, arg01
29f18     01 92 06 51 |  if_ne	add	arg01, #1
29f1c     40 95 42 5C |  if_ne	wrbyte	arg02, _var01
29f20     01 7A 06 56 |  if_ne	mov	result1, #1
29f24     00 96 0E F2 | 	cmp	arg03, #0 wz
29f28     49 61 48 5C |  if_ne	wrbyte	#48, arg01
29f2c     01 92 06 51 |  if_ne	add	arg01, #1
29f30     49 97 42 5C |  if_ne	wrbyte	arg03, arg01
29f34     02 7A 06 51 |  if_ne	add	result1, #2
29f38                 | __system__emitsign_0584_ret
29f38     2D 00 64 FD | 	ret
29f3c                 | 
29f3c                 | __system___getiolock_0622
29f3c     01 CA 05 F6 | 	mov	COUNT_, #1
29f40     E8 00 A0 FD | 	call	#pushregs_
29f44     90 F8 BF FD | 	call	#__system____getftab
29f48     3D A7 0A F6 | 	mov	local01, result1 wz
29f4c     10 00 90 AD |  if_e	jmp	#LR__4240
29f50     08 A6 06 F1 | 	add	local01, #8
29f54     53 7B 0A FB | 	rdlong	result1, local01 wz
29f58     08 A6 86 F1 | 	sub	local01, #8
29f5c     10 00 90 5D |  if_ne	jmp	#LR__4241
29f60                 | LR__4240
29f60     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
29f64     01 00 00 FF 
29f68     DC 7A 06 F1 | 	add	result1, ##732
29f6c     08 00 90 FD | 	jmp	#LR__4242
29f70                 | LR__4241
29f70     0C A6 06 F1 | 	add	local01, #12
29f74     53 7B 02 F6 | 	mov	result1, local01
29f78                 | LR__4242
29f78     E7 F0 03 F6 | 	mov	ptra, fp
29f7c     F2 00 A0 FD | 	call	#popregs_
29f80                 | __system___getiolock_0622_ret
29f80     2D 00 64 FD | 	ret
29f84                 | 
29f84                 | __system___gettxfunc
29f84     01 CA 05 F6 | 	mov	COUNT_, #1
29f88     E8 00 A0 FD | 	call	#pushregs_
29f8c     48 F8 BF FD | 	call	#__system____getftab
29f90     3D A7 0A F6 | 	mov	local01, result1 wz
29f94     10 00 90 AD |  if_e	jmp	#LR__4250
29f98     08 A6 06 F1 | 	add	local01, #8
29f9c     53 95 0A FB | 	rdlong	arg02, local01 wz
29fa0     08 A6 86 F1 | 	sub	local01, #8
29fa4     08 00 90 5D |  if_ne	jmp	#LR__4251
29fa8                 | LR__4250
29fa8     00 7A 06 F6 | 	mov	result1, #0
29fac     0C 00 90 FD | 	jmp	#LR__4252
29fb0                 | LR__4251
29fb0     00 88 05 FF 
29fb4     00 A6 46 F5 | 	or	local01, ##185597952
29fb8     53 7B 02 F6 | 	mov	result1, local01
29fbc                 | LR__4252
29fbc     E7 F0 03 F6 | 	mov	ptra, fp
29fc0     F2 00 A0 FD | 	call	#popregs_
29fc4                 | __system___gettxfunc_ret
29fc4     2D 00 64 FD | 	ret
29fc8                 | 
29fc8                 | __system___getrxfunc
29fc8     01 CA 05 F6 | 	mov	COUNT_, #1
29fcc     E8 00 A0 FD | 	call	#pushregs_
29fd0     04 F8 BF FD | 	call	#__system____getftab
29fd4     3D A7 0A F6 | 	mov	local01, result1 wz
29fd8     10 00 90 AD |  if_e	jmp	#LR__4260
29fdc     08 A6 06 F1 | 	add	local01, #8
29fe0     53 95 0A FB | 	rdlong	arg02, local01 wz
29fe4     08 A6 86 F1 | 	sub	local01, #8
29fe8     08 00 90 5D |  if_ne	jmp	#LR__4261
29fec                 | LR__4260
29fec     00 7A 06 F6 | 	mov	result1, #0
29ff0     0C 00 90 FD | 	jmp	#LR__4262
29ff4                 | LR__4261
29ff4     00 90 05 FF 
29ff8     00 A6 46 F5 | 	or	local01, ##186646528
29ffc     53 7B 02 F6 | 	mov	result1, local01
2a000                 | LR__4262
2a000     E7 F0 03 F6 | 	mov	ptra, fp
2a004     F2 00 A0 FD | 	call	#popregs_
2a008                 | __system___getrxfunc_ret
2a008     2D 00 64 FD | 	ret
2a00c                 | 
2a00c                 | __system____ScanForChar
2a00c     49 81 02 F6 | 	mov	_var01, arg01
2a010     49 83 02 F6 | 	mov	_var02, arg01
2a014     D7 06 48 FB | 	callpa	#(@LR__4271-@LR__4270)>>2,fcache_load_ptr_
2a018                 | LR__4270
2a018     41 7B CA FA | 	rdbyte	result1, _var02 wz
2a01c     01 82 06 51 |  if_ne	add	_var02, #1
2a020     F4 FF 9F 5D |  if_ne	jmp	#LR__4270
2a024                 | LR__4271
2a024     49 83 82 F1 | 	sub	_var02, arg01
2a028     41 7B 02 F6 | 	mov	result1, _var02
2a02c     3D 93 0A F6 | 	mov	arg01, result1 wz
2a030     00 7A 06 A6 |  if_e	mov	result1, #0
2a034     B8 00 90 AD |  if_e	jmp	#LR__4278
2a038     4A 85 02 F6 | 	mov	_var03, arg02
2a03c     07 84 4E F7 | 	zerox	_var03, #7 wz
2a040     00 7A 06 A6 |  if_e	mov	result1, #0
2a044     A8 00 90 AD |  if_e	jmp	#LR__4278
2a048     01 96 16 F2 | 	cmp	arg03, #1 wc
2a04c     00 98 0E C2 |  if_b	cmp	arg04, #0 wz
2a050     01 96 06 86 |  if_c_and_z	mov	arg03, #1
2a054     00 7A 06 46 |  if_c_and_nz	mov	result1, #0
2a058     94 00 90 4D |  if_c_and_nz	jmp	#LR__4278
2a05c     49 97 1A F2 | 	cmp	arg03, arg01 wcz
2a060     10 00 90 ED |  if_be	jmp	#LR__4272
2a064     00 98 0E F2 | 	cmp	arg04, #0 wz
2a068     00 7A 06 A6 |  if_e	mov	result1, #0
2a06c     80 00 90 AD |  if_e	jmp	#LR__4278
2a070     49 97 02 F6 | 	mov	arg03, arg01
2a074                 | LR__4272
2a074     01 96 86 F1 | 	sub	arg03, #1
2a078     00 98 0E F2 | 	cmp	arg04, #0 wz
2a07c     38 00 90 5D |  if_ne	jmp	#LR__4274
2a080     4B 87 02 F6 | 	mov	_var04, arg03
2a084     49 89 02 F6 | 	mov	_var05, arg01
2a088                 | LR__4273
2a088     44 87 12 F2 | 	cmp	_var04, _var05 wc
2a08c     5C 00 90 3D |  if_ae	jmp	#LR__4277
2a090     43 85 02 F6 | 	mov	_var03, _var04
2a094     40 85 02 F1 | 	add	_var03, _var01
2a098     42 85 C2 FA | 	rdbyte	_var03, _var03
2a09c     4A 99 E2 F8 | 	getbyte	arg04, arg02, #0
2a0a0     4C 85 0A F2 | 	cmp	_var03, arg04 wz
2a0a4     01 86 06 A1 |  if_e	add	_var04, #1
2a0a8     43 7B 02 A6 |  if_e	mov	result1, _var04
2a0ac     40 00 90 AD |  if_e	jmp	#LR__4278
2a0b0     01 86 06 F1 | 	add	_var04, #1
2a0b4     D0 FF 9F FD | 	jmp	#LR__4273
2a0b8                 | LR__4274
2a0b8     4B 87 02 F6 | 	mov	_var04, arg03
2a0bc                 | LR__4275
2a0bc     4B 87 1A F2 | 	cmp	_var04, arg03 wcz
2a0c0     28 00 90 1D |  if_a	jmp	#LR__4276
2a0c4     43 89 02 F6 | 	mov	_var05, _var04
2a0c8     40 89 02 F1 | 	add	_var05, _var01
2a0cc     44 85 C2 FA | 	rdbyte	_var03, _var05
2a0d0     4A 89 E2 F8 | 	getbyte	_var05, arg02, #0
2a0d4     44 85 0A F2 | 	cmp	_var03, _var05 wz
2a0d8     01 86 06 A1 |  if_e	add	_var04, #1
2a0dc     43 7B 02 A6 |  if_e	mov	result1, _var04
2a0e0     0C 00 90 AD |  if_e	jmp	#LR__4278
2a0e4     01 86 86 F1 | 	sub	_var04, #1
2a0e8     D0 FF 9F FD | 	jmp	#LR__4275
2a0ec                 | LR__4276
2a0ec                 | LR__4277
2a0ec     00 7A 06 F6 | 	mov	result1, #0
2a0f0                 | LR__4278
2a0f0                 | __system____ScanForChar_ret
2a0f0     2D 00 64 FD | 	ret
2a0f4                 | 
2a0f4                 | __system___basic_dir
2a0f4     06 CA 05 F6 | 	mov	COUNT_, #6
2a0f8     E8 00 A0 FD | 	call	#pushregs_
2a0fc     50 F0 07 F1 | 	add	ptra, #80
2a100     49 A7 0A F6 | 	mov	local01, arg01 wz
2a104     4A A9 02 F6 | 	mov	local02, arg02
2a108     53 AB CA 5A |  if_ne	rdbyte	local03, local01 wz
2a10c     5C 00 90 AD |  if_e	jmp	#LR__4280
2a110     03 00 00 FF 
2a114     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a118     34 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
2a11c     03 00 00 FF 
2a120     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a124     03 00 00 5F 
2a128     34 69 06 51 |  if_ne	add	ptr___system__dat__, ##1844
2a12c     34 93 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2a130     03 00 00 5F 
2a134     34 69 86 51 |  if_ne	sub	ptr___system__dat__, ##1844
2a138     AC E9 BF 5D |  if_ne	call	#__system__closedir
2a13c     92 01 00 FF 
2a140     FC 92 06 F6 | 	mov	arg01, ##@LR__5478
2a144     B8 E8 BF FD | 	call	#__system__opendir
2a148     03 00 00 FF 
2a14c     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a150     34 7B 62 FC | 	wrlong	result1, ptr___system__dat__
2a154     04 68 06 F1 | 	add	ptr___system__dat__, #4
2a158     34 A9 62 FC | 	wrlong	local02, ptr___system__dat__
2a15c     04 68 06 F1 | 	add	ptr___system__dat__, #4
2a160     34 A7 62 FC | 	wrlong	local01, ptr___system__dat__
2a164     03 00 00 FF 
2a168     3C 69 86 F1 | 	sub	ptr___system__dat__, ##1852
2a16c                 | LR__4280
2a16c     03 00 00 FF 
2a170     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a174     34 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
2a178     03 00 00 FF 
2a17c     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a180     92 01 00 AF 
2a184     FE 7A 06 A6 |  if_e	mov	result1, ##@LR__5479
2a188     7C 01 90 AD |  if_e	jmp	#LR__4288
2a18c                 | LR__4281
2a18c     03 00 00 FF 
2a190     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a194     34 93 02 FB | 	rdlong	arg01, ptr___system__dat__
2a198     03 00 00 FF 
2a19c     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a1a0     B8 E9 BF FD | 	call	#__system__readdir
2a1a4     3D AD 0A F6 | 	mov	local04, result1 wz
2a1a8     38 00 90 5D |  if_ne	jmp	#LR__4282
2a1ac     03 00 00 FF 
2a1b0     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a1b4     34 93 02 FB | 	rdlong	arg01, ptr___system__dat__
2a1b8     03 00 00 FF 
2a1bc     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a1c0     24 E9 BF FD | 	call	#__system__closedir
2a1c4     03 00 00 FF 
2a1c8     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a1cc     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
2a1d0     03 00 00 FF 
2a1d4     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a1d8     92 01 00 FF 
2a1dc     00 7B 06 F6 | 	mov	result1, ##@LR__5480
2a1e0     24 01 90 FD | 	jmp	#LR__4288
2a1e4                 | LR__4282
2a1e4     03 00 00 FF 
2a1e8     3C 69 06 F1 | 	add	ptr___system__dat__, ##1852
2a1ec     34 95 02 FB | 	rdlong	arg02, ptr___system__dat__
2a1f0     03 00 00 FF 
2a1f4     3C 69 86 F1 | 	sub	ptr___system__dat__, ##1852
2a1f8     56 93 02 F6 | 	mov	arg01, local04
2a1fc     4C 09 B0 FD | 	call	#__system___pat_match
2a200     00 7A 0E F2 | 	cmp	result1, #0 wz
2a204     84 FF 9F AD |  if_e	jmp	#LR__4281
2a208     03 00 00 FF 
2a20c     38 69 06 F1 | 	add	ptr___system__dat__, ##1848
2a210     34 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
2a214     03 00 00 FF 
2a218     38 69 86 F1 | 	sub	ptr___system__dat__, ##1848
2a21c     B0 00 90 AD |  if_e	jmp	#LR__4285
2a220     E7 94 02 F6 | 	mov	arg02, fp
2a224     10 94 06 F1 | 	add	arg02, #16
2a228     56 93 02 F6 | 	mov	arg01, local04
2a22c     10 F2 BF FD | 	call	#__system__stat
2a230     00 7A 4E F2 | 	cmps	result1, #0 wz
2a234     92 01 00 5F 
2a238     02 7B 06 56 |  if_ne	mov	result1, ##@LR__5481
2a23c     C8 00 90 5D |  if_ne	jmp	#LR__4288
2a240     18 CE 05 F1 | 	add	fp, #24
2a244     E7 AE 02 FB | 	rdlong	local05, fp
2a248     18 CE 85 F1 | 	sub	fp, #24
2a24c     78 00 00 FF 
2a250     00 AE 06 F5 | 	and	local05, ##61440
2a254     56 AB C2 FA | 	rdbyte	local03, local04
2a258     2E AA 0E F2 | 	cmp	local03, #46 wz
2a25c     02 A8 06 A6 |  if_e	mov	local02, #2
2a260     00 A8 06 56 |  if_ne	mov	local02, #0
2a264     08 00 00 FF 
2a268     00 AE 0E F2 | 	cmp	local05, ##4096 wz
2a26c     10 A8 46 A5 |  if_e	or	local02, #16
2a270     40 00 90 AD |  if_e	jmp	#LR__4284
2a274     10 00 00 FF 
2a278     00 AE 0E F2 | 	cmp	local05, ##8192 wz
2a27c     18 00 00 5F 
2a280     00 AE 0E 52 |  if_ne	cmp	local05, ##12288 wz
2a284     20 00 00 5F 
2a288     00 AE 0E 52 |  if_ne	cmp	local05, ##16384 wz
2a28c     04 A8 46 A5 |  if_e	or	local02, #4
2a290     20 00 90 AD |  if_e	jmp	#LR__4283
2a294     18 CE 05 F1 | 	add	fp, #24
2a298     E7 AA 02 FB | 	rdlong	local03, fp
2a29c     18 CE 85 F1 | 	sub	fp, #24
2a2a0     92 AA CE F7 | 	test	local03, #146 wz
2a2a4     01 A8 46 A5 |  if_e	or	local02, #1
2a2a8     08 00 00 5F 
2a2ac     00 AE 0E 52 |  if_ne	cmp	local05, ##4096 wz
2a2b0     20 A8 46 55 |  if_ne	or	local02, #32
2a2b4                 | LR__4283
2a2b4                 | LR__4284
2a2b4     03 00 00 FF 
2a2b8     38 69 06 F1 | 	add	ptr___system__dat__, ##1848
2a2bc     34 AF 02 FB | 	rdlong	local05, ptr___system__dat__
2a2c0     03 00 00 FF 
2a2c4     38 69 86 F1 | 	sub	ptr___system__dat__, ##1848
2a2c8     57 A9 CA F7 | 	test	local02, local05 wz
2a2cc     BC FE 9F AD |  if_e	jmp	#LR__4281
2a2d0                 | LR__4285
2a2d0     56 93 02 F6 | 	mov	arg01, local04
2a2d4     49 B1 02 F6 | 	mov	local06, arg01
2a2d8     D7 06 48 FB | 	callpa	#(@LR__4287-@LR__4286)>>2,fcache_load_ptr_
2a2dc                 | LR__4286
2a2dc     58 7B CA FA | 	rdbyte	result1, local06 wz
2a2e0     01 B0 06 51 |  if_ne	add	local06, #1
2a2e4     F4 FF 9F 5D |  if_ne	jmp	#LR__4286
2a2e8                 | LR__4287
2a2e8     58 93 C2 F2 | 	subr	arg01, local06
2a2ec     01 92 06 F1 | 	add	arg01, #1
2a2f0     CC E0 BF FD | 	call	#__system___gc_alloc_managed
2a2f4     3D AF 0A F6 | 	mov	local05, result1 wz
2a2f8     57 93 02 56 |  if_ne	mov	arg01, local05
2a2fc     56 95 02 56 |  if_ne	mov	arg02, local04
2a300     68 A6 BF 5D |  if_ne	call	#__system____builtin_strcpy
2a304     57 7B 02 F6 | 	mov	result1, local05
2a308                 | LR__4288
2a308     E7 F0 03 F6 | 	mov	ptra, fp
2a30c     F2 00 A0 FD | 	call	#popregs_
2a310                 | __system___basic_dir_ret
2a310     2D 00 64 FD | 	ret
2a314                 | 
2a314                 | __system__pack_0698
2a314     49 81 02 F6 | 	mov	_var01, arg01
2a318     7F 96 06 F1 | 	add	arg03, #127
2a31c     04 98 CE F7 | 	test	arg04, #4 wz
2a320     10 00 90 AD |  if_e	jmp	#LR__4290
2a324     00 80 0E F2 | 	cmp	_var01, #0 wz
2a328     16 80 C6 A9 |  if_e	decod	_var01, #22
2a32c     F7 80 26 F4 | 	bith	_var01, #247
2a330     B4 00 90 FD | 	jmp	#LR__4299
2a334                 | LR__4290
2a334     02 98 CE F7 | 	test	arg04, #2 wz
2a338     00 C0 3F 5F 
2a33c     00 80 06 56 |  if_ne	mov	_var01, ##2139095040
2a340     00 94 06 56 |  if_ne	mov	arg02, #0
2a344     A0 00 90 5D |  if_ne	jmp	#LR__4298
2a348     08 98 CE F7 | 	test	arg04, #8 wz
2a34c     00 80 06 56 |  if_ne	mov	_var01, #0
2a350     94 00 90 5D |  if_ne	jmp	#LR__4297
2a354     FF 96 56 F2 | 	cmps	arg03, #255 wc
2a358     00 C0 3F 3F 
2a35c     00 80 06 36 |  if_ae	mov	_var01, ##2139095040
2a360     00 94 06 36 |  if_ae	mov	arg02, #0
2a364     80 00 90 3D |  if_ae	jmp	#LR__4296
2a368     01 96 56 F2 | 	cmps	arg03, #1 wc
2a36c     6C 00 90 3D |  if_ae	jmp	#LR__4294
2a370     01 94 46 F0 | 	shr	arg02, #1
2a374     40 83 02 F6 | 	mov	_var02, _var01
2a378     01 82 06 F5 | 	and	_var02, #1
2a37c     1F 82 66 F0 | 	shl	_var02, #31
2a380     41 95 42 F5 | 	or	arg02, _var02
2a384     01 80 46 F0 | 	shr	_var01, #1
2a388     D7 1E 48 FB | 	callpa	#(@LR__4292-@LR__4291)>>2,fcache_load_ptr_
2a38c                 | LR__4291
2a38c     00 96 56 F2 | 	cmps	arg03, #0 wc
2a390     34 00 90 3D |  if_ae	jmp	#LR__4293
2a394     00 80 0E F2 | 	cmp	_var01, #0 wz
2a398     2C 00 90 AD |  if_e	jmp	#LR__4293
2a39c     4A 93 02 F6 | 	mov	arg01, arg02
2a3a0     01 92 06 F5 | 	and	arg01, #1
2a3a4     01 96 06 F1 | 	add	arg03, #1
2a3a8     01 94 46 F0 | 	shr	arg02, #1
2a3ac     40 83 02 F6 | 	mov	_var02, _var01
2a3b0     01 82 06 F5 | 	and	_var02, #1
2a3b4     1F 82 66 F0 | 	shl	_var02, #31
2a3b8     41 95 42 F5 | 	or	arg02, _var02
2a3bc     49 95 42 F5 | 	or	arg02, arg01
2a3c0     01 80 46 F0 | 	shr	_var01, #1
2a3c4     C4 FF 9F FD | 	jmp	#LR__4291
2a3c8                 | LR__4292
2a3c8                 | LR__4293
2a3c8     00 96 56 F2 | 	cmps	arg03, #0 wc
2a3cc     18 00 90 3D |  if_ae	jmp	#LR__4295
2a3d0     00 94 0E F2 | 	cmp	arg02, #0 wz
2a3d4     6F 94 62 FD | 	wrnz	arg02
2a3d8     0C 00 90 FD | 	jmp	#LR__4295
2a3dc                 | LR__4294
2a3dc     17 81 06 F4 | 	bitl	_var01, #279
2a3e0     17 96 66 F0 | 	shl	arg03, #23
2a3e4     4B 81 42 F5 | 	or	_var01, arg03
2a3e8                 | LR__4295
2a3e8                 | LR__4296
2a3e8                 | LR__4297
2a3e8                 | LR__4298
2a3e8                 | LR__4299
2a3e8     01 80 CE F7 | 	test	_var01, #1 wz
2a3ec     01 94 46 55 |  if_ne	or	arg02, #1
2a3f0     4A 97 02 F6 | 	mov	arg03, arg02
2a3f4     00 82 06 F6 | 	mov	_var02, #0
2a3f8     FF FF 3F FF 
2a3fc     FF 95 06 F1 | 	add	arg02, ##2147483647
2a400     4B 95 12 F2 | 	cmp	arg02, arg03 wc
2a404     01 82 06 C6 |  if_b	mov	_var02, #1
2a408     41 81 02 F1 | 	add	_var01, _var02
2a40c     01 98 CE F7 | 	test	arg04, #1 wz
2a410     1F 80 26 54 |  if_ne	bith	_var01, #31
2a414     40 7B 02 F6 | 	mov	result1, _var01
2a418                 | __system__pack_0698_ret
2a418     2D 00 64 FD | 	ret
2a41c                 | 
2a41c                 | __system___rxtxioctl_0788
2a41c     00 95 0E F2 | 	cmp	arg02, #256 wz
2a420     0C 00 90 AD |  if_e	jmp	#LR__4300
2a424     01 95 0E F2 | 	cmp	arg02, #257 wz
2a428     1C 00 90 AD |  if_e	jmp	#LR__4301
2a42c     30 00 90 FD | 	jmp	#LR__4302
2a430                 | LR__4300
2a430     08 68 06 F1 | 	add	ptr___system__dat__, #8
2a434     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
2a438     08 68 86 F1 | 	sub	ptr___system__dat__, #8
2a43c     4B 7B 62 FC | 	wrlong	result1, arg03
2a440     00 7A 06 F6 | 	mov	result1, #0
2a444     28 00 90 FD | 	jmp	#LR__4303
2a448                 | LR__4301
2a448     4B 93 02 FB | 	rdlong	arg01, arg03
2a44c     08 68 06 F1 | 	add	ptr___system__dat__, #8
2a450     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
2a454     08 68 86 F1 | 	sub	ptr___system__dat__, #8
2a458     00 7A 06 F6 | 	mov	result1, #0
2a45c     10 00 90 FD | 	jmp	#LR__4303
2a460                 | LR__4302
2a460     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a464     34 15 68 FC | 	wrlong	#10, ptr___system__dat__
2a468     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a46c     01 7A 66 F6 | 	neg	result1, #1
2a470                 | LR__4303
2a470                 | __system___rxtxioctl_0788_ret
2a470     2D 00 64 FD | 	ret
2a474                 | 
2a474                 | __system____dummy_flush_0789
2a474     00 7A 06 F6 | 	mov	result1, #0
2a478                 | __system____dummy_flush_0789_ret
2a478     2D 00 64 FD | 	ret
2a47c                 | 
2a47c                 | __system___vfswrite
2a47c     09 CA 05 F6 | 	mov	COUNT_, #9
2a480     E8 00 A0 FD | 	call	#pushregs_
2a484     49 A7 02 F6 | 	mov	local01, arg01
2a488     4A A9 02 F6 | 	mov	local02, arg02
2a48c     4B AB 02 F6 | 	mov	local03, arg03
2a490     54 AD 02 F6 | 	mov	local04, local02
2a494     08 A6 06 F1 | 	add	local01, #8
2a498     53 93 02 FB | 	rdlong	arg01, local01
2a49c     08 A6 86 F1 | 	sub	local01, #8
2a4a0     02 92 CE F7 | 	test	arg01, #2 wz
2a4a4     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a4a8     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a4ac     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a4b0     01 7A 66 A6 |  if_e	neg	result1, #1
2a4b4     84 01 90 AD |  if_e	jmp	#LR__4316
2a4b8     08 A6 06 F1 | 	add	local01, #8
2a4bc     53 7B 02 FB | 	rdlong	result1, local01
2a4c0     08 A6 86 F1 | 	sub	local01, #8
2a4c4     80 7A CE F7 | 	test	result1, #128 wz
2a4c8     6C 00 90 AD |  if_e	jmp	#LR__4311
2a4cc     08 A6 06 F1 | 	add	local01, #8
2a4d0     53 95 02 FB | 	rdlong	arg02, local01
2a4d4     08 A6 86 F1 | 	sub	local01, #8
2a4d8     00 95 CE F7 | 	test	arg02, #256 wz
2a4dc     58 00 90 AD |  if_e	jmp	#LR__4310
2a4e0     30 A6 06 F1 | 	add	local01, #48
2a4e4     53 AF 02 FB | 	rdlong	local05, local01
2a4e8     57 B1 02 F6 | 	mov	local06, local05
2a4ec     30 A6 86 F1 | 	sub	local01, #48
2a4f0     13 B0 46 F7 | 	zerox	local06, #19
2a4f4     14 AE 46 F0 | 	shr	local05, #20
2a4f8     02 AE 66 F0 | 	shl	local05, #2
2a4fc     2D AF 02 F1 | 	add	local05, __methods__
2a500     57 AF 02 FB | 	rdlong	local05, local05
2a504     53 93 02 F6 | 	mov	arg01, local01
2a508     00 94 06 F6 | 	mov	arg02, #0
2a50c     00 96 06 F6 | 	mov	arg03, #0
2a510     02 98 06 F6 | 	mov	arg04, #2
2a514     32 B3 02 F6 | 	mov	local07, objptr
2a518     58 65 02 F6 | 	mov	objptr, local06
2a51c     2D AE 62 FD | 	call	local05
2a520     59 65 02 F6 | 	mov	objptr, local07
2a524     08 A6 06 F1 | 	add	local01, #8
2a528     53 B3 02 FB | 	rdlong	local07, local01
2a52c     00 B3 26 F5 | 	andn	local07, #256
2a530     53 B3 62 FC | 	wrlong	local07, local01
2a534     08 A6 86 F1 | 	sub	local01, #8
2a538                 | LR__4310
2a538                 | LR__4311
2a538     18 A6 06 F1 | 	add	local01, #24
2a53c     53 B3 0A FB | 	rdlong	local07, local01 wz
2a540     18 A6 86 F1 | 	sub	local01, #24
2a544     80 00 90 AD |  if_e	jmp	#LR__4313
2a548     18 A6 06 F1 | 	add	local01, #24
2a54c     53 AF 02 FB | 	rdlong	local05, local01
2a550     57 B1 02 F6 | 	mov	local06, local05
2a554     18 A6 86 F1 | 	sub	local01, #24
2a558     13 B0 46 F7 | 	zerox	local06, #19
2a55c     14 AE 46 F0 | 	shr	local05, #20
2a560     02 AE 66 F0 | 	shl	local05, #2
2a564     2D AF 02 F1 | 	add	local05, __methods__
2a568     57 AF 02 FB | 	rdlong	local05, local05
2a56c     54 95 02 F6 | 	mov	arg02, local02
2a570     55 97 02 F6 | 	mov	arg03, local03
2a574     53 93 02 F6 | 	mov	arg01, local01
2a578     32 B3 02 F6 | 	mov	local07, objptr
2a57c     58 65 02 F6 | 	mov	objptr, local06
2a580     2D AE 62 FD | 	call	local05
2a584     59 65 02 F6 | 	mov	objptr, local07
2a588     3D B5 02 F6 | 	mov	local08, result1
2a58c     00 B4 56 F2 | 	cmps	local08, #0 wc
2a590     2C 00 90 3D |  if_ae	jmp	#LR__4312
2a594     08 A6 06 F1 | 	add	local01, #8
2a598     53 B3 02 FB | 	rdlong	local07, local01
2a59c     20 B2 46 F5 | 	or	local07, #32
2a5a0     53 B3 62 FC | 	wrlong	local07, local01
2a5a4     00 B4 4E F2 | 	cmps	local08, #0 wz
2a5a8     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a5ac     34 B5 62 FC | 	wrlong	local08, ptr___system__dat__
2a5b0     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a5b4     01 7A 66 56 |  if_ne	neg	result1, #1
2a5b8     00 7A 06 A6 |  if_e	mov	result1, #0
2a5bc     7C 00 90 FD | 	jmp	#LR__4316
2a5c0                 | LR__4312
2a5c0     5A 7B 02 F6 | 	mov	result1, local08
2a5c4     74 00 90 FD | 	jmp	#LR__4316
2a5c8                 | LR__4313
2a5c8     1C A6 06 F1 | 	add	local01, #28
2a5cc     53 B7 0A FB | 	rdlong	local09, local01 wz
2a5d0     1C A6 86 F1 | 	sub	local01, #28
2a5d4     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a5d8     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a5dc     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a5e0     01 7A 66 A6 |  if_e	neg	result1, #1
2a5e4     54 00 90 AD |  if_e	jmp	#LR__4316
2a5e8     00 B4 06 F6 | 	mov	local08, #0
2a5ec                 | LR__4314
2a5ec     01 AA 16 F2 | 	cmp	local03, #1 wc
2a5f0     44 00 90 CD |  if_b	jmp	#LR__4315
2a5f4     5B AF 02 F6 | 	mov	local05, local09
2a5f8     5B B1 02 F6 | 	mov	local06, local09
2a5fc     13 AE 46 F7 | 	zerox	local05, #19
2a600     14 B0 46 F0 | 	shr	local06, #20
2a604     02 B0 66 F0 | 	shl	local06, #2
2a608     2D B1 02 F1 | 	add	local06, __methods__
2a60c     58 B1 02 FB | 	rdlong	local06, local06
2a610     56 93 C2 FA | 	rdbyte	arg01, local04
2a614     53 95 02 F6 | 	mov	arg02, local01
2a618     32 B3 02 F6 | 	mov	local07, objptr
2a61c     57 65 02 F6 | 	mov	objptr, local05
2a620     01 AC 06 F1 | 	add	local04, #1
2a624     2D B0 62 FD | 	call	local06
2a628     59 65 02 F6 | 	mov	objptr, local07
2a62c     3D B5 02 F1 | 	add	local08, result1
2a630     01 AA 86 F1 | 	sub	local03, #1
2a634     B4 FF 9F FD | 	jmp	#LR__4314
2a638                 | LR__4315
2a638     5A 7B 02 F6 | 	mov	result1, local08
2a63c                 | LR__4316
2a63c     E7 F0 03 F6 | 	mov	ptra, fp
2a640     F2 00 A0 FD | 	call	#popregs_
2a644                 | __system___vfswrite_ret
2a644     2D 00 64 FD | 	ret
2a648                 | 
2a648                 | __system___vfsread
2a648     09 CA 05 F6 | 	mov	COUNT_, #9
2a64c     E8 00 A0 FD | 	call	#pushregs_
2a650     28 F0 07 F1 | 	add	ptra, #40
2a654     49 A7 02 F6 | 	mov	local01, arg01
2a658     4B A9 02 F6 | 	mov	local02, arg03
2a65c     4A AB 02 F6 | 	mov	local03, arg02
2a660     00 AC 06 F6 | 	mov	local04, #0
2a664     08 A6 06 F1 | 	add	local01, #8
2a668     53 93 02 FB | 	rdlong	arg01, local01
2a66c     08 A6 86 F1 | 	sub	local01, #8
2a670     01 92 CE F7 | 	test	arg01, #1 wz
2a674     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a678     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a67c     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a680     01 7A 66 A6 |  if_e	neg	result1, #1
2a684     84 01 90 AD |  if_e	jmp	#LR__4326
2a688     14 A6 06 F1 | 	add	local01, #20
2a68c     53 7B 0A FB | 	rdlong	result1, local01 wz
2a690     14 A6 86 F1 | 	sub	local01, #20
2a694     7C 00 90 AD |  if_e	jmp	#LR__4321
2a698     14 A6 06 F1 | 	add	local01, #20
2a69c     53 AF 02 FB | 	rdlong	local05, local01
2a6a0     57 AB 02 F6 | 	mov	local03, local05
2a6a4     14 A6 86 F1 | 	sub	local01, #20
2a6a8     13 AA 46 F7 | 	zerox	local03, #19
2a6ac     14 AE 46 F0 | 	shr	local05, #20
2a6b0     02 AE 66 F0 | 	shl	local05, #2
2a6b4     2D AF 02 F1 | 	add	local05, __methods__
2a6b8     57 AF 02 FB | 	rdlong	local05, local05
2a6bc     54 97 02 F6 | 	mov	arg03, local02
2a6c0     53 93 02 F6 | 	mov	arg01, local01
2a6c4     32 AD 02 F6 | 	mov	local04, objptr
2a6c8     55 65 02 F6 | 	mov	objptr, local03
2a6cc     2D AE 62 FD | 	call	local05
2a6d0     56 65 02 F6 | 	mov	objptr, local04
2a6d4     3D B1 02 F6 | 	mov	local06, result1
2a6d8     00 B0 56 F2 | 	cmps	local06, #0 wc
2a6dc     2C 00 90 3D |  if_ae	jmp	#LR__4320
2a6e0     08 A6 06 F1 | 	add	local01, #8
2a6e4     53 AF 02 FB | 	rdlong	local05, local01
2a6e8     20 AE 46 F5 | 	or	local05, #32
2a6ec     53 AF 62 FC | 	wrlong	local05, local01
2a6f0     00 B0 4E F2 | 	cmps	local06, #0 wz
2a6f4     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a6f8     34 B1 62 FC | 	wrlong	local06, ptr___system__dat__
2a6fc     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a700     01 7A 66 56 |  if_ne	neg	result1, #1
2a704     00 7A 06 A6 |  if_e	mov	result1, #0
2a708     00 01 90 FD | 	jmp	#LR__4326
2a70c                 | LR__4320
2a70c     58 7B 02 F6 | 	mov	result1, local06
2a710     F8 00 90 FD | 	jmp	#LR__4326
2a714                 | LR__4321
2a714     20 A6 06 F1 | 	add	local01, #32
2a718     53 B3 0A FB | 	rdlong	local07, local01 wz
2a71c     20 A6 86 F1 | 	sub	local01, #32
2a720     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a724     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a728     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a72c     01 7A 66 A6 |  if_e	neg	result1, #1
2a730     D8 00 90 AD |  if_e	jmp	#LR__4326
2a734     28 A6 06 F1 | 	add	local01, #40
2a738     53 B1 0A FB | 	rdlong	local06, local01 wz
2a73c     28 A6 86 F1 | 	sub	local01, #40
2a740     60 00 90 AD |  if_e	jmp	#LR__4323
2a744     28 A6 06 F1 | 	add	local01, #40
2a748     53 AF 02 FB | 	rdlong	local05, local01
2a74c     57 B5 02 F6 | 	mov	local08, local05
2a750     28 A6 86 F1 | 	sub	local01, #40
2a754     13 B4 46 F7 | 	zerox	local08, #19
2a758     14 AE 46 F0 | 	shr	local05, #20
2a75c     02 AE 66 F0 | 	shl	local05, #2
2a760     2D AF 02 F1 | 	add	local05, __methods__
2a764     57 AF 02 FB | 	rdlong	local05, local05
2a768     53 93 02 F6 | 	mov	arg01, local01
2a76c     E7 96 02 F6 | 	mov	arg03, fp
2a770     24 96 06 F1 | 	add	arg03, #36
2a774     00 95 06 F6 | 	mov	arg02, #256
2a778     32 B1 02 F6 | 	mov	local06, objptr
2a77c     5A 65 02 F6 | 	mov	objptr, local08
2a780     2D AE 62 FD | 	call	local05
2a784     58 65 02 F6 | 	mov	objptr, local06
2a788     00 7A 0E F2 | 	cmp	result1, #0 wz
2a78c     14 00 90 5D |  if_ne	jmp	#LR__4322
2a790     24 CE 05 F1 | 	add	fp, #36
2a794     E7 B0 02 FB | 	rdlong	local06, fp
2a798     24 CE 85 F1 | 	sub	fp, #36
2a79c     02 B0 CE F7 | 	test	local06, #2 wz
2a7a0     01 AC 06 56 |  if_ne	mov	local04, #1
2a7a4                 | LR__4322
2a7a4                 | LR__4323
2a7a4     00 B0 06 F6 | 	mov	local06, #0
2a7a8                 | LR__4324
2a7a8     01 A8 16 F2 | 	cmp	local02, #1 wc
2a7ac     58 00 90 CD |  if_b	jmp	#LR__4325
2a7b0     59 B5 02 F6 | 	mov	local08, local07
2a7b4     59 AF 02 F6 | 	mov	local05, local07
2a7b8     13 B4 46 F7 | 	zerox	local08, #19
2a7bc     14 AE 46 F0 | 	shr	local05, #20
2a7c0     02 AE 66 F0 | 	shl	local05, #2
2a7c4     2D AF 02 F1 | 	add	local05, __methods__
2a7c8     57 AF 02 FB | 	rdlong	local05, local05
2a7cc     53 93 02 F6 | 	mov	arg01, local01
2a7d0     32 B7 02 F6 | 	mov	local09, objptr
2a7d4     5A 65 02 F6 | 	mov	objptr, local08
2a7d8     2D AE 62 FD | 	call	local05
2a7dc     5B 65 02 F6 | 	mov	objptr, local09
2a7e0     00 7A 56 F2 | 	cmps	result1, #0 wc
2a7e4     20 00 90 CD |  if_b	jmp	#LR__4325
2a7e8     55 7B 42 FC | 	wrbyte	result1, local03
2a7ec     01 B0 06 F1 | 	add	local06, #1
2a7f0     01 A8 86 F1 | 	sub	local02, #1
2a7f4     00 AC 0E F2 | 	cmp	local04, #0 wz
2a7f8     01 AA 06 F1 | 	add	local03, #1
2a7fc     A8 FF 9F AD |  if_e	jmp	#LR__4324
2a800     0A 7A 0E F2 | 	cmp	result1, #10 wz
2a804     A0 FF 9F 5D |  if_ne	jmp	#LR__4324
2a808                 | LR__4325
2a808     58 7B 02 F6 | 	mov	result1, local06
2a80c                 | LR__4326
2a80c     E7 F0 03 F6 | 	mov	ptra, fp
2a810     F2 00 A0 FD | 	call	#popregs_
2a814                 | __system___vfsread_ret
2a814     2D 00 64 FD | 	ret
2a818                 | 
2a818                 | __system___sdmm_open
2a818     0B CA 05 F6 | 	mov	COUNT_, #11
2a81c     E8 00 A0 FD | 	call	#pushregs_
2a820     49 AB 02 F6 | 	mov	local03, arg01
2a824     4A AD 02 F6 | 	mov	local04, arg02
2a828     4B AF 02 F6 | 	mov	local05, arg03
2a82c     4C B1 02 F6 | 	mov	local06, arg04
2a830     28 92 06 F6 | 	mov	arg01, #40
2a834     88 DB BF FD | 	call	#__system___gc_alloc_managed
2a838     3D B3 02 F6 | 	mov	local07, result1
2a83c     55 99 02 F6 | 	mov	arg04, local03
2a840     1F 98 C6 F0 | 	sar	arg04, #31
2a844     55 97 02 F6 | 	mov	arg03, local03
2a848     01 92 06 F6 | 	mov	arg01, #1
2a84c     00 94 06 F6 | 	mov	arg02, #0
2a850     44 C3 BF FD | 	call	#__system___int64_shl
2a854     3D A7 02 F6 | 	mov	local01, result1
2a858     3E B5 02 F6 | 	mov	local08, result2
2a85c     56 99 02 F6 | 	mov	arg04, local04
2a860     1F 98 C6 F0 | 	sar	arg04, #31
2a864     56 97 02 F6 | 	mov	arg03, local04
2a868     01 92 06 F6 | 	mov	arg01, #1
2a86c     00 94 06 F6 | 	mov	arg02, #0
2a870     24 C3 BF FD | 	call	#__system___int64_shl
2a874     3D A7 42 F5 | 	or	local01, result1
2a878     3E B5 42 F5 | 	or	local08, result2
2a87c     57 99 02 F6 | 	mov	arg04, local05
2a880     1F 98 C6 F0 | 	sar	arg04, #31
2a884     57 97 02 F6 | 	mov	arg03, local05
2a888     01 92 06 F6 | 	mov	arg01, #1
2a88c     00 94 06 F6 | 	mov	arg02, #0
2a890     04 C3 BF FD | 	call	#__system___int64_shl
2a894     3D A7 42 F5 | 	or	local01, result1
2a898     3E B5 42 F5 | 	or	local08, result2
2a89c     58 99 02 F6 | 	mov	arg04, local06
2a8a0     1F 98 C6 F0 | 	sar	arg04, #31
2a8a4     58 97 02 F6 | 	mov	arg03, local06
2a8a8     01 92 06 F6 | 	mov	arg01, #1
2a8ac     00 94 06 F6 | 	mov	arg02, #0
2a8b0     E4 C2 BF FD | 	call	#__system___int64_shl
2a8b4     5A 95 02 F6 | 	mov	arg02, local08
2a8b8     3D A7 42 F5 | 	or	local01, result1
2a8bc     4A 7D 42 F5 | 	or	result2, arg02
2a8c0     3E A9 02 F6 | 	mov	local02, result2
2a8c4     53 93 02 F6 | 	mov	arg01, local01
2a8c8     54 95 02 F6 | 	mov	arg02, local02
2a8cc     38 C3 BF FD | 	call	#__system___usepins
2a8d0     00 7A 0E F2 | 	cmp	result1, #0 wz
2a8d4     1C 00 90 5D |  if_ne	jmp	#LR__4330
2a8d8     59 93 02 F6 | 	mov	arg01, local07
2a8dc     14 DC BF FD | 	call	#__system___gc_free
2a8e0     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a8e4     34 2D 68 FC | 	wrlong	#22, ptr___system__dat__
2a8e8     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a8ec     00 7A 06 F6 | 	mov	result1, #0
2a8f0     5C 01 90 FD | 	jmp	#LR__4333
2a8f4                 | LR__4330
2a8f4     53 B7 02 F6 | 	mov	local09, local01
2a8f8     54 9B 02 F6 | 	mov	arg05, local02
2a8fc     20 B2 06 F1 | 	add	local07, #32
2a900     59 B7 62 FC | 	wrlong	local09, local07
2a904     04 B2 06 F1 | 	add	local07, #4
2a908     59 9B 62 FC | 	wrlong	arg05, local07
2a90c     24 B2 86 F1 | 	sub	local07, #36
2a910     57 99 02 F6 | 	mov	arg04, local05
2a914     58 9B 02 F6 | 	mov	arg05, local06
2a918     00 92 06 F6 | 	mov	arg01, #0
2a91c     55 95 02 F6 | 	mov	arg02, local03
2a920     56 97 02 F6 | 	mov	arg03, local04
2a924     32 B9 02 F6 | 	mov	local10, objptr
2a928     59 65 02 F6 | 	mov	objptr, local07
2a92c     34 0F B0 FD | 	call	#_sdmm_cc_disk_setpins
2a930     5C 65 02 F6 | 	mov	objptr, local10
2a934     3D BB 0A F6 | 	mov	local11, result1 wz
2a938     18 00 90 5D |  if_ne	jmp	#LR__4331
2a93c     00 92 06 F6 | 	mov	arg01, #0
2a940     32 BB 02 F6 | 	mov	local11, objptr
2a944     59 65 02 F6 | 	mov	objptr, local07
2a948     4C 03 B0 FD | 	call	#_sdmm_cc_disk_initialize
2a94c     5D 65 02 F6 | 	mov	objptr, local11
2a950     3D BB E2 F8 | 	getbyte	local11, result1, #0
2a954                 | LR__4331
2a954     00 BA 0E F2 | 	cmp	local11, #0 wz
2a958     D0 00 90 5D |  if_ne	jmp	#LR__4332
2a95c     64 E0 BF FD | 	call	#__system___get_vfs_file_handle
2a960     3D BB 0A F6 | 	mov	local11, result1 wz
2a964     C4 00 90 AD |  if_e	jmp	#LR__4332
2a968     04 BA 06 F1 | 	add	local11, #4
2a96c     5D 05 58 FC | 	wrword	#2, local11
2a970     02 BA 06 F1 | 	add	local11, #2
2a974     5D 01 58 FC | 	wrword	#0, local11
2a978     02 BA 06 F1 | 	add	local11, #2
2a97c     40 00 80 FF 
2a980     5D 07 68 FC | 	wrlong	##32771, local11
2a984     59 7B 02 F6 | 	mov	result1, local07
2a988     00 68 06 FF 
2a98c     00 7A 46 F5 | 	or	result1, ##214958080
2a990     0C BA 06 F1 | 	add	local11, #12
2a994     5D 7B 62 FC | 	wrlong	result1, local11
2a998     59 7B 02 F6 | 	mov	result1, local07
2a99c     00 70 06 FF 
2a9a0     00 7A 46 F5 | 	or	result1, ##216006656
2a9a4     04 BA 06 F1 | 	add	local11, #4
2a9a8     5D 7B 62 FC | 	wrlong	result1, local11
2a9ac     59 7B 02 F6 | 	mov	result1, local07
2a9b0     00 78 06 FF 
2a9b4     00 7A 46 F5 | 	or	result1, ##217055232
2a9b8     0C BA 06 F1 | 	add	local11, #12
2a9bc     5D 7B 62 FC | 	wrlong	result1, local11
2a9c0     59 7B 02 F6 | 	mov	result1, local07
2a9c4     00 80 06 FF 
2a9c8     00 7A 46 F5 | 	or	result1, ##218103808
2a9cc     04 BA 06 F1 | 	add	local11, #4
2a9d0     5D 7B 62 FC | 	wrlong	result1, local11
2a9d4     59 7B 02 F6 | 	mov	result1, local07
2a9d8     00 88 06 FF 
2a9dc     00 7A 46 F5 | 	or	result1, ##219152384
2a9e0     04 BA 06 F1 | 	add	local11, #4
2a9e4     5D 7B 62 FC | 	wrlong	result1, local11
2a9e8     59 7B 02 F6 | 	mov	result1, local07
2a9ec     00 90 06 FF 
2a9f0     00 7A 46 F5 | 	or	result1, ##220200960
2a9f4     04 BA 06 F1 | 	add	local11, #4
2a9f8     5D 7B 62 FC | 	wrlong	result1, local11
2a9fc     59 7B 02 F6 | 	mov	result1, local07
2aa00     00 98 06 FF 
2aa04     00 7A 46 F5 | 	or	result1, ##221249536
2aa08     14 BA 86 F1 | 	sub	local11, #20
2aa0c     5D 7B 62 FC | 	wrlong	result1, local11
2aa10     00 A0 06 FF 
2aa14     00 B2 46 F5 | 	or	local07, ##222298112
2aa18     04 BA 06 F1 | 	add	local11, #4
2aa1c     5D B3 62 FC | 	wrlong	local07, local11
2aa20     20 BA 86 F1 | 	sub	local11, #32
2aa24     5D 7B 02 F6 | 	mov	result1, local11
2aa28     24 00 90 FD | 	jmp	#LR__4333
2aa2c                 | LR__4332
2aa2c     53 93 02 F6 | 	mov	arg01, local01
2aa30     54 95 02 F6 | 	mov	arg02, local02
2aa34     24 C2 BF FD | 	call	#__system___freepins
2aa38     59 93 02 F6 | 	mov	arg01, local07
2aa3c     B4 DA BF FD | 	call	#__system___gc_free
2aa40     20 68 06 F1 | 	add	ptr___system__dat__, #32
2aa44     34 19 68 FC | 	wrlong	#12, ptr___system__dat__
2aa48     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2aa4c     00 7A 06 F6 | 	mov	result1, #0
2aa50                 | LR__4333
2aa50     E7 F0 03 F6 | 	mov	ptra, fp
2aa54     F2 00 A0 FD | 	call	#popregs_
2aa58                 | __system___sdmm_open_ret
2aa58     2D 00 64 FD | 	ret
2aa5c                 | 
2aa5c                 | __system____default_filbuf
2aa5c     05 CA 05 F6 | 	mov	COUNT_, #5
2aa60     E8 00 A0 FD | 	call	#pushregs_
2aa64     49 A7 02 F6 | 	mov	local01, arg01
2aa68     53 A9 02 FB | 	rdlong	local02, local01
2aa6c     08 A8 06 F1 | 	add	local02, #8
2aa70     54 7B 0A FB | 	rdlong	result1, local02 wz
2aa74     08 A8 86 F1 | 	sub	local02, #8
2aa78     20 00 90 5D |  if_ne	jmp	#LR__4340
2aa7c     10 A8 06 F1 | 	add	local02, #16
2aa80     54 7B 02 F6 | 	mov	result1, local02
2aa84     04 A8 86 F1 | 	sub	local02, #4
2aa88     54 7B 62 FC | 	wrlong	result1, local02
2aa8c     04 A8 86 F1 | 	sub	local02, #4
2aa90     02 00 80 FF 
2aa94     54 01 68 FC | 	wrlong	##1024, local02
2aa98     08 A8 86 F1 | 	sub	local02, #8
2aa9c                 | LR__4340
2aa9c     14 A6 06 F1 | 	add	local01, #20
2aaa0     53 AB 02 FB | 	rdlong	local03, local01
2aaa4     55 AD 02 F6 | 	mov	local04, local03
2aaa8     14 A6 86 F1 | 	sub	local01, #20
2aaac     13 AC 46 F7 | 	zerox	local04, #19
2aab0     14 AA 46 F0 | 	shr	local03, #20
2aab4     02 AA 66 F0 | 	shl	local03, #2
2aab8     2D AB 02 F1 | 	add	local03, __methods__
2aabc     55 AB 02 FB | 	rdlong	local03, local03
2aac0     53 93 02 F6 | 	mov	arg01, local01
2aac4     0C A8 06 F1 | 	add	local02, #12
2aac8     54 95 02 FB | 	rdlong	arg02, local02
2aacc     04 A8 86 F1 | 	sub	local02, #4
2aad0     54 97 02 FB | 	rdlong	arg03, local02
2aad4     08 A8 86 F1 | 	sub	local02, #8
2aad8     32 AF 02 F6 | 	mov	local05, objptr
2aadc     56 65 02 F6 | 	mov	objptr, local04
2aae0     2D AA 62 FD | 	call	local03
2aae4     57 65 02 F6 | 	mov	objptr, local05
2aae8     3D AF 02 F6 | 	mov	local05, result1
2aaec     00 AE 56 F2 | 	cmps	local05, #0 wc
2aaf0     01 7A 66 C6 |  if_b	neg	result1, #1
2aaf4     28 00 90 CD |  if_b	jmp	#LR__4341
2aaf8     54 AF 62 FC | 	wrlong	local05, local02
2aafc     0C A8 06 F1 | 	add	local02, #12
2ab00     54 AB 02 FB | 	rdlong	local03, local02
2ab04     08 A8 86 F1 | 	sub	local02, #8
2ab08     54 AB 62 FC | 	wrlong	local03, local02
2ab0c     08 A6 06 F1 | 	add	local01, #8
2ab10     53 AD 02 FB | 	rdlong	local04, local01
2ab14     04 AC 46 F5 | 	or	local04, #4
2ab18     53 AD 62 FC | 	wrlong	local04, local01
2ab1c     57 7B 02 F6 | 	mov	result1, local05
2ab20                 | LR__4341
2ab20     E7 F0 03 F6 | 	mov	ptra, fp
2ab24     F2 00 A0 FD | 	call	#popregs_
2ab28                 | __system____default_filbuf_ret
2ab28     2D 00 64 FD | 	ret
2ab2c                 | 
2ab2c                 | __system__getlower_1283
2ab2c     41 92 56 F2 | 	cmps	arg01, #65 wc
2ab30     10 00 90 CD |  if_b	jmp	#LR__4350
2ab34     5B 92 56 F2 | 	cmps	arg01, #91 wc
2ab38     49 7B 02 C6 |  if_b	mov	result1, arg01
2ab3c     20 7A 06 C1 |  if_b	add	result1, #32
2ab40     04 00 90 CD |  if_b	jmp	#__system__getlower_1283_ret
2ab44                 | LR__4350
2ab44     49 7B 02 F6 | 	mov	result1, arg01
2ab48                 | __system__getlower_1283_ret
2ab48     2D 00 64 FD | 	ret
2ab4c                 | 
2ab4c                 | __system___pat_match
2ab4c     07 CA 05 F6 | 	mov	COUNT_, #7
2ab50     E8 00 A0 FD | 	call	#pushregs_
2ab54     49 A7 02 F6 | 	mov	local01, arg01
2ab58                 | LR__4360
2ab58     4A 93 CA FA | 	rdbyte	arg01, arg02 wz
2ab5c     53 A9 CA 5A |  if_ne	rdbyte	local02, local01 wz
2ab60     49 AB 02 56 |  if_ne	mov	local03, arg01
2ab64     2A AA 0E 52 |  if_ne	cmp	local03, #42 wz
2ab68     2C 00 90 AD |  if_e	jmp	#LR__4361
2ab6c     4A 93 C2 FA | 	rdbyte	arg01, arg02
2ab70     B8 FF BF FD | 	call	#__system__getlower_1283
2ab74     3D A9 02 F6 | 	mov	local02, result1
2ab78     53 93 C2 FA | 	rdbyte	arg01, local01
2ab7c     AC FF BF FD | 	call	#__system__getlower_1283
2ab80     54 7B 0A F2 | 	cmp	result1, local02 wz
2ab84     00 7A 06 56 |  if_ne	mov	result1, #0
2ab88     00 01 90 5D |  if_ne	jmp	#LR__4370
2ab8c     01 A6 06 F1 | 	add	local01, #1
2ab90     01 94 06 F1 | 	add	arg02, #1
2ab94     C0 FF 9F FD | 	jmp	#LR__4360
2ab98                 | LR__4361
2ab98     4A AB C2 FA | 	rdbyte	local03, arg02
2ab9c     2A AA 0E F2 | 	cmp	local03, #42 wz
2aba0     D8 00 90 5D |  if_ne	jmp	#LR__4369
2aba4     01 94 06 F1 | 	add	arg02, #1
2aba8     4A AB C2 FA | 	rdbyte	local03, arg02
2abac     01 94 86 F1 | 	sub	arg02, #1
2abb0     2E AA 0E F2 | 	cmp	local03, #46 wz
2abb4     28 00 90 5D |  if_ne	jmp	#LR__4362
2abb8     02 94 06 F1 | 	add	arg02, #2
2abbc     4A AB C2 FA | 	rdbyte	local03, arg02
2abc0     02 94 86 F1 | 	sub	arg02, #2
2abc4     2A AA 0E F2 | 	cmp	local03, #42 wz
2abc8     03 94 06 A1 |  if_e	add	arg02, #3
2abcc     4A AD C2 AA |  if_e	rdbyte	local04, arg02
2abd0     03 94 86 A1 |  if_e	sub	arg02, #3
2abd4     56 AF 0A A6 |  if_e	mov	local05, local04 wz
2abd8     01 7A 06 A6 |  if_e	mov	result1, #1
2abdc     AC 00 90 AD |  if_e	jmp	#LR__4370
2abe0                 | LR__4362
2abe0     01 94 06 F1 | 	add	arg02, #1
2abe4     00 B0 06 F6 | 	mov	local06, #0
2abe8     D7 0E 48 FB | 	callpa	#(@LR__4364-@LR__4363)>>2,fcache_load_ptr_
2abec                 | LR__4363
2abec     58 A9 02 F6 | 	mov	local02, local06
2abf0     4A A9 02 F1 | 	add	local02, arg02
2abf4     54 AD CA FA | 	rdbyte	local04, local02 wz
2abf8     58 AF 02 56 |  if_ne	mov	local05, local06
2abfc     01 AE 06 51 |  if_ne	add	local05, #1
2ac00     57 B1 02 56 |  if_ne	mov	local06, local05
2ac04     E4 FF 9F 5D |  if_ne	jmp	#LR__4363
2ac08                 | LR__4364
2ac08     00 B2 06 F6 | 	mov	local07, #0
2ac0c     D7 0E 48 FB | 	callpa	#(@LR__4366-@LR__4365)>>2,fcache_load_ptr_
2ac10                 | LR__4365
2ac10     59 A9 02 F6 | 	mov	local02, local07
2ac14     53 A9 02 F1 | 	add	local02, local01
2ac18     54 AD CA FA | 	rdbyte	local04, local02 wz
2ac1c     59 AF 02 56 |  if_ne	mov	local05, local07
2ac20     01 AE 06 51 |  if_ne	add	local05, #1
2ac24     57 B3 02 56 |  if_ne	mov	local07, local05
2ac28     E4 FF 9F 5D |  if_ne	jmp	#LR__4365
2ac2c                 | LR__4366
2ac2c     58 B3 52 F2 | 	cmps	local07, local06 wc
2ac30     00 7A 06 C6 |  if_b	mov	result1, #0
2ac34     54 00 90 CD |  if_b	jmp	#LR__4370
2ac38     59 AB 02 F6 | 	mov	local03, local07
2ac3c     58 AB 82 F1 | 	sub	local03, local06
2ac40     55 A7 02 F1 | 	add	local01, local03
2ac44                 | LR__4367
2ac44     01 B0 56 F2 | 	cmps	local06, #1 wc
2ac48     30 00 90 CD |  if_b	jmp	#LR__4368
2ac4c     53 93 C2 FA | 	rdbyte	arg01, local01
2ac50     D8 FE BF FD | 	call	#__system__getlower_1283
2ac54     3D B3 02 F6 | 	mov	local07, result1
2ac58     4A 93 C2 FA | 	rdbyte	arg01, arg02
2ac5c     CC FE BF FD | 	call	#__system__getlower_1283
2ac60     3D B3 0A F2 | 	cmp	local07, result1 wz
2ac64     00 7A 06 56 |  if_ne	mov	result1, #0
2ac68     20 00 90 5D |  if_ne	jmp	#LR__4370
2ac6c     01 A6 06 F1 | 	add	local01, #1
2ac70     01 94 06 F1 | 	add	arg02, #1
2ac74     01 B0 86 F1 | 	sub	local06, #1
2ac78     C8 FF 9F FD | 	jmp	#LR__4367
2ac7c                 | LR__4368
2ac7c                 | LR__4369
2ac7c     4A B3 CA FA | 	rdbyte	local07, arg02 wz
2ac80     53 A9 CA AA |  if_e	rdbyte	local02, local01 wz
2ac84     01 7A 06 A6 |  if_e	mov	result1, #1
2ac88     00 7A 06 56 |  if_ne	mov	result1, #0
2ac8c                 | LR__4370
2ac8c     E7 F0 03 F6 | 	mov	ptra, fp
2ac90     F2 00 A0 FD | 	call	#popregs_
2ac94                 | __system___pat_match_ret
2ac94     2D 00 64 FD | 	ret
2ac98                 | 
2ac98                 | _sdmm_cc_disk_initialize
2ac98     0F CA 05 F6 | 	mov	COUNT_, #15
2ac9c     E8 00 A0 FD | 	call	#pushregs_
2aca0     49 A7 0A F6 | 	mov	local01, arg01 wz
2aca4     F8 A9 02 F6 | 	mov	local02, ptra
2aca8     32 AB 02 FB | 	rdlong	local03, objptr
2acac     04 64 06 F1 | 	add	objptr, #4
2acb0     32 AD 02 FB | 	rdlong	local04, objptr
2acb4     04 64 06 F1 | 	add	objptr, #4
2acb8     32 AF 02 FB | 	rdlong	local05, objptr
2acbc     04 64 06 F1 | 	add	objptr, #4
2acc0     32 B1 02 FB | 	rdlong	local06, objptr
2acc4     08 64 06 F1 | 	add	objptr, #8
2acc8     32 03 48 FC | 	wrbyte	#1, objptr
2accc     14 64 86 F1 | 	sub	objptr, #20
2acd0                 | ' #line 539 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2acd0                 | ' 		return RES_NOTRDY;
2acd0     0C F0 07 F1 | 	add	ptra, #12
2acd4     03 7A 06 56 |  if_ne	mov	result1, #3
2acd8     68 04 90 5D |  if_ne	jmp	#LR__4400
2acdc     13 00 00 FF 
2ace0     10 93 06 F6 | 	mov	arg01, ##10000
2ace4     30 A0 BF FD | 	call	#__system___waitus
2ace8     55 99 02 F6 | 	mov	arg04, local03
2acec     57 99 82 F1 | 	sub	arg04, local05
2acf0     4C 99 42 F6 | 	abs	arg04, arg04
2acf4     04 98 56 F2 | 	cmps	arg04, #4 wc
2acf8     04 7A 06 36 |  if_ae	mov	result1, #4
2acfc     44 04 90 3D |  if_ae	jmp	#LR__4400
2ad00     55 B3 02 F6 | 	mov	local07, local03
2ad04     58 B3 82 F1 | 	sub	local07, local06
2ad08     59 B3 42 F6 | 	abs	local07, local07
2ad0c     04 B2 56 F2 | 	cmps	local07, #4 wc
2ad10     34 00 90 3D |  if_ae	jmp	#LR__4380
2ad14     55 B5 02 F6 | 	mov	local08, local03
2ad18     58 B5 82 F1 | 	sub	local08, local06
2ad1c     07 B4 06 F5 | 	and	local08, #7
2ad20     18 B4 66 F0 | 	shl	local08, #24
2ad24     29 00 00 FF 
2ad28     7A B4 46 F5 | 	or	local08, ##21114
2ad2c     58 B7 02 F6 | 	mov	local09, local06
2ad30     0C 64 06 F1 | 	add	objptr, #12
2ad34     32 B7 62 FC | 	wrlong	local09, objptr
2ad38     04 64 06 F1 | 	add	objptr, #4
2ad3c     32 B7 62 FC | 	wrlong	local09, objptr
2ad40     10 64 86 F1 | 	sub	objptr, #16
2ad44     A4 00 90 FD | 	jmp	#LR__4383
2ad48                 | LR__4380
2ad48     58 AB 5A F2 | 	cmps	local03, local06 wcz
2ad4c     28 00 90 ED |  if_be	jmp	#LR__4381
2ad50     55 B7 02 F6 | 	mov	local09, local03
2ad54     03 B6 86 F1 | 	sub	local09, #3
2ad58     57 B7 0A F2 | 	cmp	local09, local05 wz
2ad5c     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2ad60     01 B6 06 A1 |  if_e	add	local09, #1
2ad64     57 B7 0A F2 | 	cmp	local09, local05 wz
2ad68     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2ad6c     28 00 90 5D |  if_ne	jmp	#LR__4382
2ad70     01 B6 06 F1 | 	add	local09, #1
2ad74     20 00 90 FD | 	jmp	#LR__4382
2ad78                 | LR__4381
2ad78     55 B7 02 F6 | 	mov	local09, local03
2ad7c     03 B6 06 F1 | 	add	local09, #3
2ad80     57 B7 0A F2 | 	cmp	local09, local05 wz
2ad84     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2ad88     01 B6 86 A1 |  if_e	sub	local09, #1
2ad8c     57 B7 0A F2 | 	cmp	local09, local05 wz
2ad90     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2ad94     01 B6 86 A1 |  if_e	sub	local09, #1
2ad98                 | LR__4382
2ad98     58 B3 02 F6 | 	mov	local07, local06
2ad9c     5B B3 82 F1 | 	sub	local07, local09
2ada0     59 B3 42 F6 | 	abs	local07, local07
2ada4     04 B2 56 F2 | 	cmps	local07, #4 wc
2ada8     04 7A 06 36 |  if_ae	mov	result1, #4
2adac     94 03 90 3D |  if_ae	jmp	#LR__4400
2adb0     58 B5 02 F6 | 	mov	local08, local06
2adb4     5B B5 82 F1 | 	sub	local08, local09
2adb8     07 B4 06 F5 | 	and	local08, #7
2adbc     1C B4 66 F0 | 	shl	local08, #28
2adc0     55 B3 02 F6 | 	mov	local07, local03
2adc4     5B B3 82 F1 | 	sub	local07, local09
2adc8     07 B2 06 F5 | 	and	local07, #7
2adcc     18 B2 66 F0 | 	shl	local07, #24
2add0     59 B5 42 F5 | 	or	local08, local07
2add4     3A B4 46 F5 | 	or	local08, #58
2add8     10 64 06 F1 | 	add	objptr, #16
2addc     32 B1 62 FC | 	wrlong	local06, objptr
2ade0     04 64 86 F1 | 	sub	objptr, #4
2ade4     32 B7 62 FC | 	wrlong	local09, objptr
2ade8     0C 64 86 F1 | 	sub	objptr, #12
2adec                 | LR__4383
2adec     56 01 08 FC | 	wrpin	#0, local04
2adf0     59 AC 62 FD | 	drvh	local04
2adf4     00 08 00 FF 
2adf8     20 B8 06 F6 | 	mov	local10, ##1048608
2adfc     40 AA 62 FD | 	dirl	local03
2ae00     A0 03 80 FF 
2ae04     55 91 08 FC | 	wrpin	##475208, local03
2ae08     00 08 80 FF 
2ae0c     55 41 18 FC | 	wxpin	##1048608, local03
2ae10     55 01 28 FC | 	wypin	#0, local03
2ae14     41 AA 62 FD | 	dirh	local03
2ae18     55 B3 02 F6 | 	mov	local07, local03
2ae1c     57 B3 82 F1 | 	sub	local07, local05
2ae20     07 B2 06 F5 | 	and	local07, #7
2ae24     18 B2 66 F0 | 	shl	local07, #24
2ae28     78 BA 06 F6 | 	mov	local11, #120
2ae2c     59 BB 42 F5 | 	or	local11, local07
2ae30     5D 95 02 F6 | 	mov	arg02, local11
2ae34     10 94 26 F4 | 	bith	arg02, #16
2ae38     40 AE 62 FD | 	dirl	local05
2ae3c     57 95 02 FC | 	wrpin	arg02, local05
2ae40     57 3F 18 FC | 	wxpin	#31, local05
2ae44     FF FF FF FF 
2ae48     57 FF 2B FC | 	wypin	##-1, local05
2ae4c     41 AE 62 FD | 	dirh	local05
2ae50     29 00 80 FF 
2ae54     58 01 08 FC | 	wrpin	##20992, local06
2ae58     40 B6 62 FD | 	dirl	local09
2ae5c     5B B5 02 FC | 	wrpin	local08, local09
2ae60     5B 4F 18 FC | 	wxpin	#39, local09
2ae64     5B 01 28 FC | 	wypin	#0, local09
2ae68     41 B6 62 FD | 	dirh	local09
2ae6c     54 93 02 F6 | 	mov	arg01, local02
2ae70     0A 94 06 F6 | 	mov	arg02, #10
2ae74     5C 06 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2ae78     00 92 06 F6 | 	mov	arg01, #0
2ae7c     00 94 06 F6 | 	mov	arg02, #0
2ae80     D4 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2ae84     20 07 B0 FD | 	call	#_sdmm_cc_deselect_0858
2ae88     64 92 06 F6 | 	mov	arg01, #100
2ae8c     88 9E BF FD | 	call	#__system___waitus
2ae90     54 93 02 F6 | 	mov	arg01, local02
2ae94     0A 94 06 F6 | 	mov	arg02, #10
2ae98     38 06 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2ae9c     00 BC 06 F6 | 	mov	local12, #0
2aea0     00 92 06 F6 | 	mov	arg01, #0
2aea4     00 94 06 F6 | 	mov	arg02, #0
2aea8     AC 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2aeac     3D B3 E2 F8 | 	getbyte	local07, result1, #0
2aeb0     01 B2 0E F2 | 	cmp	local07, #1 wz
2aeb4     5C 02 90 5D |  if_ne	jmp	#LR__4399
2aeb8     08 92 06 F6 | 	mov	arg01, #8
2aebc     AA 95 06 F6 | 	mov	arg02, #426
2aec0     94 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2aec4     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2aec8     01 7A 0E F2 | 	cmp	result1, #1 wz
2aecc     30 01 90 5D |  if_ne	jmp	#LR__4388
2aed0     54 93 02 F6 | 	mov	arg01, local02
2aed4     04 94 06 F6 | 	mov	arg02, #4
2aed8     F8 05 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2aedc     02 A8 06 F1 | 	add	local02, #2
2aee0     54 B3 C2 FA | 	rdbyte	local07, local02
2aee4     02 A8 86 F1 | 	sub	local02, #2
2aee8     01 B2 0E F2 | 	cmp	local07, #1 wz
2aeec     03 A8 06 A1 |  if_e	add	local02, #3
2aef0     54 BF C2 AA |  if_e	rdbyte	local13, local02
2aef4     03 A8 86 A1 |  if_e	sub	local02, #3
2aef8     AA BE 0E A2 |  if_e	cmp	local13, #170 wz
2aefc     14 02 90 5D |  if_ne	jmp	#LR__4398
2af00                 | ' 				for (tmr = 1000; tmr; tmr--) {
2af00     01 00 00 FF 
2af04     E8 C1 06 F6 | 	mov	local14, ##1000
2af08                 | LR__4384
2af08     A9 92 06 F6 | 	mov	arg01, #169
2af0c     1E 94 C6 F9 | 	decod	arg02, #30
2af10     44 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2af14     3D B3 02 F6 | 	mov	local07, result1
2af18     07 B2 4E F7 | 	zerox	local07, #7 wz
2af1c     18 00 90 AD |  if_e	jmp	#LR__4385
2af20     01 00 00 FF 
2af24     E8 93 06 F6 | 	mov	arg01, ##1000
2af28     EC 9D BF FD | 	call	#__system___waitus
2af2c     60 B3 02 F6 | 	mov	local07, local14
2af30     01 C0 8E F1 | 	sub	local14, #1 wz
2af34     D0 FF 9F 5D |  if_ne	jmp	#LR__4384
2af38                 | LR__4385
2af38     00 C0 0E F2 | 	cmp	local14, #0 wz
2af3c     38 00 90 AD |  if_e	jmp	#LR__4386
2af40     3A 92 06 F6 | 	mov	arg01, #58
2af44     00 94 06 F6 | 	mov	arg02, #0
2af48     0C 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2af4c     3D B3 02 F6 | 	mov	local07, result1
2af50     07 B2 4E F7 | 	zerox	local07, #7 wz
2af54     20 00 90 5D |  if_ne	jmp	#LR__4386
2af58     54 93 02 F6 | 	mov	arg01, local02
2af5c     04 94 06 F6 | 	mov	arg02, #4
2af60     70 05 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2af64     54 C1 C2 FA | 	rdbyte	local14, local02
2af68     40 C0 CE F7 | 	test	local14, #64 wz
2af6c     0C B2 06 56 |  if_ne	mov	local07, #12
2af70     04 B2 06 A6 |  if_e	mov	local07, #4
2af74     59 BD 02 F6 | 	mov	local12, local07
2af78                 | LR__4386
2af78     14 C0 06 FB | 	rdlong	local14, #20
2af7c     F0 FA 02 FF 
2af80     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2af84     5D B3 02 C6 |  if_b	mov	local07, local11
2af88     1B B2 26 C4 |  if_b	bith	local07, #27
2af8c     59 BB 02 C6 |  if_b	mov	local11, local07
2af90     10 00 90 CD |  if_b	jmp	#LR__4387
2af94     E1 F5 05 FF 
2af98     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2af9c     80 00 04 CF 
2afa0     00 BA 46 C5 |  if_b	or	local11, ##134283264
2afa4                 | LR__4387
2afa4     F0 FA 02 FF 
2afa8     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2afac     00 01 00 CF 
2afb0     04 B8 06 C6 |  if_b	mov	local10, ##131076
2afb4     5C 01 90 CD |  if_b	jmp	#LR__4398
2afb8     68 78 04 FF 
2afbc     81 C1 16 F2 | 	cmp	local14, ##150000001 wc
2afc0     80 01 00 CF 
2afc4     06 B8 06 C6 |  if_b	mov	local10, ##196614
2afc8     48 01 90 CD |  if_b	jmp	#LR__4398
2afcc     E1 F5 05 FF 
2afd0     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2afd4     00 02 00 CF 
2afd8     08 B8 06 C6 |  if_b	mov	local10, ##262152
2afdc     34 01 90 CD |  if_b	jmp	#LR__4398
2afe0     59 73 07 FF 
2afe4     81 C0 16 F2 | 	cmp	local14, ##250000001 wc
2afe8     80 02 00 CF 
2afec     0A B8 06 C6 |  if_b	mov	local10, ##327690
2aff0     20 01 90 CD |  if_b	jmp	#LR__4398
2aff4     00 03 00 FF 
2aff8     0C B8 06 F6 | 	mov	local10, ##393228
2affc     14 01 90 FD | 	jmp	#LR__4398
2b000                 | LR__4388
2b000     A9 92 06 F6 | 	mov	arg01, #169
2b004     00 94 06 F6 | 	mov	arg02, #0
2b008     4C 07 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b00c     3D B3 E2 F8 | 	getbyte	local07, result1, #0
2b010     02 B2 16 F2 | 	cmp	local07, #2 wc
2b014     02 BC 06 C6 |  if_b	mov	local12, #2
2b018     A9 C2 06 C6 |  if_b	mov	local15, #169
2b01c     01 BC 06 36 |  if_ae	mov	local12, #1
2b020     01 C2 06 36 |  if_ae	mov	local15, #1
2b024                 | ' 				ty =  0x01 ; cmd =  (1) ;
2b024                 | ' 			}
2b024                 | ' 			for (tmr = 1000; tmr; tmr--) {
2b024     01 00 00 FF 
2b028     E8 C1 06 F6 | 	mov	local14, ##1000
2b02c                 | LR__4389
2b02c     61 93 02 F6 | 	mov	arg01, local15
2b030     00 94 06 F6 | 	mov	arg02, #0
2b034     20 07 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b038     3D B3 02 F6 | 	mov	local07, result1
2b03c     07 B2 4E F7 | 	zerox	local07, #7 wz
2b040     18 00 90 AD |  if_e	jmp	#LR__4390
2b044     01 00 00 FF 
2b048     E8 93 06 F6 | 	mov	arg01, ##1000
2b04c     C8 9C BF FD | 	call	#__system___waitus
2b050     60 B3 02 F6 | 	mov	local07, local14
2b054     01 C0 8E F1 | 	sub	local14, #1 wz
2b058     D0 FF 9F 5D |  if_ne	jmp	#LR__4389
2b05c                 | LR__4390
2b05c     00 C0 0E F2 | 	cmp	local14, #0 wz
2b060     18 00 90 AD |  if_e	jmp	#LR__4391
2b064     10 92 06 F6 | 	mov	arg01, #16
2b068     09 94 C6 F9 | 	decod	arg02, #9
2b06c     E8 06 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b070     3D B3 02 F6 | 	mov	local07, result1
2b074     07 B2 4E F7 | 	zerox	local07, #7 wz
2b078     04 00 90 AD |  if_e	jmp	#LR__4392
2b07c                 | LR__4391
2b07c     00 BC 06 F6 | 	mov	local12, #0
2b080                 | LR__4392
2b080     14 C0 06 FB | 	rdlong	local14, #20
2b084     F0 FA 02 FF 
2b088     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2b08c     5D B3 02 C6 |  if_b	mov	local07, local11
2b090     1B B2 26 C4 |  if_b	bith	local07, #27
2b094     59 BB 02 C6 |  if_b	mov	local11, local07
2b098     10 00 90 CD |  if_b	jmp	#LR__4393
2b09c     E1 F5 05 FF 
2b0a0     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2b0a4     80 00 04 CF 
2b0a8     00 BA 46 C5 |  if_b	or	local11, ##134283264
2b0ac                 | LR__4393
2b0ac     F0 FA 02 FF 
2b0b0     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2b0b4     00 01 00 CF 
2b0b8     04 B8 06 C6 |  if_b	mov	local10, ##131076
2b0bc     54 00 90 CD |  if_b	jmp	#LR__4397
2b0c0     68 78 04 FF 
2b0c4     81 C1 16 F2 | 	cmp	local14, ##150000001 wc
2b0c8     80 01 00 CF 
2b0cc     06 B8 06 C6 |  if_b	mov	local10, ##196614
2b0d0     40 00 90 CD |  if_b	jmp	#LR__4396
2b0d4     E1 F5 05 FF 
2b0d8     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2b0dc     00 02 00 CF 
2b0e0     08 B8 06 C6 |  if_b	mov	local10, ##262152
2b0e4     2C 00 90 CD |  if_b	jmp	#LR__4395
2b0e8     59 73 07 FF 
2b0ec     81 C0 16 F2 | 	cmp	local14, ##250000001 wc
2b0f0     80 02 00 CF 
2b0f4     0A B8 06 C6 |  if_b	mov	local10, ##327690
2b0f8     18 00 90 CD |  if_b	jmp	#LR__4394
2b0fc     D1 F0 08 FF 
2b100     01 C1 16 F2 | 	cmp	local14, ##300000001 wc
2b104     00 03 00 CF 
2b108     0C B8 06 C6 |  if_b	mov	local10, ##393228
2b10c     80 03 00 3F 
2b110     0E B8 06 36 |  if_ae	mov	local10, ##458766
2b114                 | LR__4394
2b114                 | LR__4395
2b114                 | LR__4396
2b114                 | LR__4397
2b114                 | LR__4398
2b114                 | LR__4399
2b114     15 64 06 F1 | 	add	objptr, #21
2b118     32 BD 42 FC | 	wrbyte	local12, objptr
2b11c     00 BC 0E F2 | 	cmp	local12, #0 wz
2b120     00 B2 06 56 |  if_ne	mov	local07, #0
2b124     01 B2 06 A6 |  if_e	mov	local07, #1
2b128     01 64 86 F1 | 	sub	objptr, #1
2b12c     32 B3 42 FC | 	wrbyte	local07, objptr
2b130     14 64 86 F1 | 	sub	objptr, #20
2b134     70 04 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b138     55 B9 12 FC | 	wxpin	local10, local03
2b13c     57 BB 02 FC | 	wrpin	local11, local05
2b140                 | ' #line 682 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b140                 | ' 		}
2b140                 | ' 	}
2b140                 | ' #line 687 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b140                 | ' 	CardType = ty;
2b140                 | ' 	s = ty ? 0 :  0x01 ;
2b140                 | ' 	Stat = s;
2b140                 | ' 
2b140                 | ' 	deselect();
2b140                 | ' 
2b140                 | ' 
2b140                 | ' 	_wxpin( PIN_CLK, ck_div );
2b140                 | ' 	_wrpin( PIN_DI, spm_tx );
2b140                 | ' #line 700 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b140                 | ' 	return s;
2b140     59 7B 02 F6 | 	mov	result1, local07
2b144                 | LR__4400
2b144     E7 F0 03 F6 | 	mov	ptra, fp
2b148     F2 00 A0 FD | 	call	#popregs_
2b14c                 | _sdmm_cc_disk_initialize_ret
2b14c     2D 00 64 FD | 	ret
2b150                 | 
2b150                 | _sdmm_cc_disk_read
2b150     05 CA 05 F6 | 	mov	COUNT_, #5
2b154     E8 00 A0 FD | 	call	#pushregs_
2b158     4A A7 02 F6 | 	mov	local01, arg02
2b15c     4B A9 02 F6 | 	mov	local02, arg03
2b160     4C AB 02 F6 | 	mov	local03, arg04
2b164     00 92 0E F2 | 	cmp	arg01, #0 wz
2b168     01 7A 06 56 |  if_ne	mov	result1, #1
2b16c                 | ' 
2b16c                 | ' 	return Stat;
2b16c     14 64 06 A1 |  if_e	add	objptr, #20
2b170     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2b174     14 64 86 A1 |  if_e	sub	objptr, #20
2b178     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b17c     01 7A CE F7 | 	test	result1, #1 wz
2b180     03 7A 06 56 |  if_ne	mov	result1, #3
2b184     7C 00 90 5D |  if_ne	jmp	#LR__4412
2b188     15 64 06 F1 | 	add	objptr, #21
2b18c     32 AD C2 FA | 	rdbyte	local04, objptr
2b190     15 64 86 F1 | 	sub	objptr, #21
2b194     08 AC CE F7 | 	test	local04, #8 wz
2b198     09 A8 66 A0 |  if_e	shl	local02, #9
2b19c     02 AA 16 F2 | 	cmp	local03, #2 wc
2b1a0     12 AC 06 36 |  if_ae	mov	local04, #18
2b1a4     11 AC 06 C6 |  if_b	mov	local04, #17
2b1a8     54 95 02 F6 | 	mov	arg02, local02
2b1ac     56 93 02 F6 | 	mov	arg01, local04
2b1b0     A4 05 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b1b4     3D AF 02 F6 | 	mov	local05, result1
2b1b8     07 AE 4E F7 | 	zerox	local05, #7 wz
2b1bc     30 00 90 5D |  if_ne	jmp	#LR__4411
2b1c0                 | ' 		do {
2b1c0                 | LR__4410
2b1c0     53 93 02 F6 | 	mov	arg01, local01
2b1c4     09 94 C6 F9 | 	decod	arg02, #9
2b1c8     7C 04 B0 FD | 	call	#_sdmm_cc_rcvr_datablock_0866
2b1cc     00 7A 0E F2 | 	cmp	result1, #0 wz
2b1d0     01 00 00 5F 
2b1d4     00 A6 06 51 |  if_ne	add	local01, ##512
2b1d8     F9 AB 6E 5B |  if_ne	djnz	local03, #LR__4410
2b1dc     56 AD E2 F8 | 	getbyte	local04, local04, #0
2b1e0     12 AC 0E F2 | 	cmp	local04, #18 wz
2b1e4     0C 92 06 A6 |  if_e	mov	arg01, #12
2b1e8     00 94 06 A6 |  if_e	mov	arg02, #0
2b1ec     68 05 B0 AD |  if_e	call	#_sdmm_cc_send_cmd_0871
2b1f0                 | LR__4411
2b1f0     B4 03 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b1f4                 | ' 	}
2b1f4                 | ' 	deselect();
2b1f4                 | ' 
2b1f4                 | ' 	return count ? RES_ERROR : RES_OK;
2b1f4     00 AA 0E F2 | 	cmp	local03, #0 wz
2b1f8     01 AE 06 56 |  if_ne	mov	local05, #1
2b1fc     00 AE 06 A6 |  if_e	mov	local05, #0
2b200     57 7B 02 F6 | 	mov	result1, local05
2b204                 | LR__4412
2b204     E7 F0 03 F6 | 	mov	ptra, fp
2b208     F2 00 A0 FD | 	call	#popregs_
2b20c                 | _sdmm_cc_disk_read_ret
2b20c     2D 00 64 FD | 	ret
2b210                 | 
2b210                 | _sdmm_cc_disk_write
2b210     04 CA 05 F6 | 	mov	COUNT_, #4
2b214     E8 00 A0 FD | 	call	#pushregs_
2b218     4A A7 02 F6 | 	mov	local01, arg02
2b21c     4C A9 02 F6 | 	mov	local02, arg04
2b220     4B AB 02 F6 | 	mov	local03, arg03
2b224     00 92 0E F2 | 	cmp	arg01, #0 wz
2b228     01 7A 06 56 |  if_ne	mov	result1, #1
2b22c                 | ' 
2b22c                 | ' 	return Stat;
2b22c     14 64 06 A1 |  if_e	add	objptr, #20
2b230     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2b234     14 64 86 A1 |  if_e	sub	objptr, #20
2b238     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b23c     01 7A CE F7 | 	test	result1, #1 wz
2b240     03 7A 06 56 |  if_ne	mov	result1, #3
2b244     C4 00 90 5D |  if_ne	jmp	#LR__4424
2b248     15 64 06 F1 | 	add	objptr, #21
2b24c     32 97 C2 FA | 	rdbyte	arg03, objptr
2b250     15 64 86 F1 | 	sub	objptr, #21
2b254     08 96 CE F7 | 	test	arg03, #8 wz
2b258     09 AA 66 A0 |  if_e	shl	local03, #9
2b25c     01 A8 0E F2 | 	cmp	local02, #1 wz
2b260     30 00 90 5D |  if_ne	jmp	#LR__4420
2b264     18 92 06 F6 | 	mov	arg01, #24
2b268     55 95 02 F6 | 	mov	arg02, local03
2b26c     E8 04 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b270     3D AD 02 F6 | 	mov	local04, result1
2b274     07 AC 4E F7 | 	zerox	local04, #7 wz
2b278     7C 00 90 5D |  if_ne	jmp	#LR__4423
2b27c     53 93 02 F6 | 	mov	arg01, local01
2b280     FE 94 06 F6 | 	mov	arg02, #254
2b284     44 04 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b288     00 7A 0E F2 | 	cmp	result1, #0 wz
2b28c     00 A8 06 56 |  if_ne	mov	local02, #0
2b290     64 00 90 FD | 	jmp	#LR__4423
2b294                 | LR__4420
2b294     15 64 06 F1 | 	add	objptr, #21
2b298     32 AD C2 FA | 	rdbyte	local04, objptr
2b29c     15 64 86 F1 | 	sub	objptr, #21
2b2a0     06 AC CE F7 | 	test	local04, #6 wz
2b2a4     97 92 06 56 |  if_ne	mov	arg01, #151
2b2a8     54 95 02 56 |  if_ne	mov	arg02, local02
2b2ac     A8 04 B0 5D |  if_ne	call	#_sdmm_cc_send_cmd_0871
2b2b0     55 95 02 F6 | 	mov	arg02, local03
2b2b4     19 92 06 F6 | 	mov	arg01, #25
2b2b8     9C 04 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b2bc     3D AD 02 F6 | 	mov	local04, result1
2b2c0     07 AC 4E F7 | 	zerox	local04, #7 wz
2b2c4     30 00 90 5D |  if_ne	jmp	#LR__4422
2b2c8                 | ' 			do {
2b2c8                 | LR__4421
2b2c8     53 93 02 F6 | 	mov	arg01, local01
2b2cc     FC 94 06 F6 | 	mov	arg02, #252
2b2d0     F8 03 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b2d4     00 7A 0E F2 | 	cmp	result1, #0 wz
2b2d8     01 00 00 5F 
2b2dc     00 A6 06 51 |  if_ne	add	local01, ##512
2b2e0     F9 A9 6E 5B |  if_ne	djnz	local02, #LR__4421
2b2e4     00 92 06 F6 | 	mov	arg01, #0
2b2e8     FD 94 06 F6 | 	mov	arg02, #253
2b2ec     DC 03 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b2f0     00 7A 0E F2 | 	cmp	result1, #0 wz
2b2f4     01 A8 06 A6 |  if_e	mov	local02, #1
2b2f8                 | LR__4422
2b2f8                 | LR__4423
2b2f8     AC 02 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b2fc                 | ' 				count = 1;
2b2fc                 | ' 		}
2b2fc                 | ' 	}
2b2fc                 | ' 	deselect();
2b2fc                 | ' 
2b2fc                 | ' 	return count ? RES_ERROR : RES_OK;
2b2fc     00 A8 0E F2 | 	cmp	local02, #0 wz
2b300     01 AC 06 56 |  if_ne	mov	local04, #1
2b304     00 AC 06 A6 |  if_e	mov	local04, #0
2b308     56 7B 02 F6 | 	mov	result1, local04
2b30c                 | LR__4424
2b30c     E7 F0 03 F6 | 	mov	ptra, fp
2b310     F2 00 A0 FD | 	call	#popregs_
2b314                 | _sdmm_cc_disk_write_ret
2b314     2D 00 64 FD | 	ret
2b318                 | 
2b318                 | _sdmm_cc_disk_ioctl
2b318     06 CA 05 F6 | 	mov	COUNT_, #6
2b31c     E8 00 A0 FD | 	call	#pushregs_
2b320     30 F0 07 F1 | 	add	ptra, #48
2b324     4A A7 02 F6 | 	mov	local01, arg02
2b328     4B A9 02 F6 | 	mov	local02, arg03
2b32c     00 92 0E F2 | 	cmp	arg01, #0 wz
2b330     01 7A 06 56 |  if_ne	mov	result1, #1
2b334                 | ' 
2b334                 | ' 	return Stat;
2b334     14 64 06 A1 |  if_e	add	objptr, #20
2b338     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2b33c     14 64 86 A1 |  if_e	sub	objptr, #20
2b340     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b344     01 7A CE F7 | 	test	result1, #1 wz
2b348     03 7A 06 56 |  if_ne	mov	result1, #3
2b34c     F4 00 90 5D |  if_ne	jmp	#LR__4437
2b350     01 AA 06 F6 | 	mov	local03, #1
2b354                 | ' 
2b354                 | ' 	res = RES_ERROR;
2b354                 | ' 	switch (ctrl) {
2b354     53 AD E2 F8 | 	getbyte	local04, local01, #0
2b358     04 AC 26 F3 | 	fle	local04, #4
2b35c     30 AC 62 FD | 	jmprel	local04
2b360                 | LR__4430
2b360     10 00 90 FD | 	jmp	#LR__4431
2b364     1C 00 90 FD | 	jmp	#LR__4432
2b368     CC 00 90 FD | 	jmp	#LR__4435
2b36c     BC 00 90 FD | 	jmp	#LR__4434
2b370     C4 00 90 FD | 	jmp	#LR__4435
2b374                 | LR__4431
2b374     6C 02 B0 FD | 	call	#_sdmm_cc_select_0862
2b378     00 7A 0E F2 | 	cmp	result1, #0 wz
2b37c     00 AA 06 56 |  if_ne	mov	local03, #0
2b380                 | ' 			break;
2b380     B8 00 90 FD | 	jmp	#LR__4436
2b384                 | LR__4432
2b384     09 92 06 F6 | 	mov	arg01, #9
2b388     00 94 06 F6 | 	mov	arg02, #0
2b38c     C8 03 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b390     3D AD 02 F6 | 	mov	local04, result1
2b394     07 AC 4E F7 | 	zerox	local04, #7 wz
2b398     A0 00 90 5D |  if_ne	jmp	#LR__4436
2b39c     E7 92 02 F6 | 	mov	arg01, fp
2b3a0     18 92 06 F1 | 	add	arg01, #24
2b3a4     10 94 06 F6 | 	mov	arg02, #16
2b3a8     9C 02 B0 FD | 	call	#_sdmm_cc_rcvr_datablock_0866
2b3ac     00 7A 0E F2 | 	cmp	result1, #0 wz
2b3b0     88 00 90 AD |  if_e	jmp	#LR__4436
2b3b4     E7 92 02 F6 | 	mov	arg01, fp
2b3b8     18 92 06 F1 | 	add	arg01, #24
2b3bc     49 7B 02 F6 | 	mov	result1, arg01
2b3c0     06 92 06 F1 | 	add	arg01, #6
2b3c4     49 AF 02 FB | 	rdlong	local05, arg01
2b3c8     1B AE FE F9 | 	movbyts	local05, #27
2b3cc     3D 93 C2 FA | 	rdbyte	arg01, result1
2b3d0     06 92 46 F0 | 	shr	arg01, #6
2b3d4     01 92 0E F2 | 	cmp	arg01, #1 wz
2b3d8     36 AF 06 A4 |  if_e	bitl	local05, #310
2b3dc     01 AE 06 A1 |  if_e	add	local05, #1
2b3e0     0A B0 06 A6 |  if_e	mov	local06, #10
2b3e4     34 00 90 AD |  if_e	jmp	#LR__4433
2b3e8     0E AE 46 F0 | 	shr	local05, #14
2b3ec     0B AE 46 F7 | 	zerox	local05, #11
2b3f0     01 AE 06 F1 | 	add	local05, #1
2b3f4     05 7A 06 F1 | 	add	result1, #5
2b3f8     3D B1 C2 FA | 	rdbyte	local06, result1
2b3fc     58 B1 42 F8 | 	getnib	local06, local06, #0
2b400     04 7A 06 F1 | 	add	result1, #4
2b404     3D 7B E2 FA | 	rdword	result1, result1
2b408     1B 7A FE F9 | 	movbyts	result1, #27
2b40c     17 7A 46 F0 | 	shr	result1, #23
2b410     07 7A 06 F5 | 	and	result1, #7
2b414     3D B1 02 F1 | 	add	local06, result1
2b418     07 B0 86 F1 | 	sub	local06, #7
2b41c                 | LR__4433
2b41c                 | '         cs = (LBA_t)(cs>>14 & 0xfff)+1;
2b41c                 | '         n = (csd[5] & 15) + (__builtin_bswap32(*(uint16_t*)(&csd[9]))>>23 & 0x7)+(2-9);
2b41c                 | '     }
2b41c                 | '     return (LBA_t)cs << n;
2b41c     58 AF 62 F0 | 	shl	local05, local06
2b420     54 AF 62 FC | 	wrlong	local05, local02
2b424     00 AA 06 F6 | 	mov	local03, #0
2b428                 | '                			*(LBA_t*)buff = disc_size(csd);
2b428                 | ' 				res = RES_OK;
2b428                 | ' 			}
2b428                 | ' 			break;
2b428     10 00 90 FD | 	jmp	#LR__4436
2b42c                 | LR__4434
2b42c     54 01 69 FC | 	wrlong	#128, local02
2b430     00 AA 06 F6 | 	mov	local03, #0
2b434                 | ' 			*(DWORD*)buff = 128;
2b434                 | ' 			res = RES_OK;
2b434                 | ' 			break;
2b434     04 00 90 FD | 	jmp	#LR__4436
2b438                 | LR__4435
2b438     04 AA 06 F6 | 	mov	local03, #4
2b43c                 | LR__4436
2b43c     68 01 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b440                 | ' 			res = RES_PARERR;
2b440                 | ' 	}
2b440                 | ' 
2b440                 | ' 	deselect();
2b440                 | ' 
2b440                 | ' 	return res;
2b440     55 7B 02 F6 | 	mov	result1, local03
2b444                 | LR__4437
2b444     E7 F0 03 F6 | 	mov	ptra, fp
2b448     F2 00 A0 FD | 	call	#popregs_
2b44c                 | _sdmm_cc_disk_ioctl_ret
2b44c     2D 00 64 FD | 	ret
2b450                 | 
2b450                 | _sdmm_cc_xmit_mmc_0841
2b450     32 81 02 FB | 	rdlong	_var01, objptr
2b454     08 64 06 F1 | 	add	objptr, #8
2b458     32 83 02 FB | 	rdlong	_var02, objptr
2b45c     08 64 86 F1 | 	sub	objptr, #8
2b460     40 82 62 FD | 	dirl	_var02
2b464     28 02 64 FD | 	setq	#1
2b468     49 85 02 FB | 	rdlong	_var03, arg01
2b46c     69 84 62 FD | 	rev	_var03
2b470     1B 84 FE F9 | 	movbyts	_var03, #27
2b474     41 85 22 FC | 	wypin	_var03, _var02
2b478     4A 85 02 F6 | 	mov	_var03, arg02
2b47c     02 94 4E F0 | 	shr	arg02, #2 wz
2b480     03 84 66 F0 | 	shl	_var03, #3
2b484     40 85 22 FC | 	wypin	_var03, _var01
2b488     41 82 62 FD | 	dirh	_var02
2b48c     08 92 06 F1 | 	add	arg01, #8
2b490     69 86 62 FD | 	rev	_var04
2b494     1B 86 FE F9 | 	movbyts	_var04, #27
2b498                 | LR__4440
2b498     41 87 22 5C |  if_ne	wypin	_var04, _var02
2b49c     49 87 02 5B |  if_ne	rdlong	_var04, arg01
2b4a0     04 92 06 51 |  if_ne	add	arg01, #4
2b4a4     69 86 62 5D |  if_ne	rev	_var04
2b4a8     1B 86 FE 59 |  if_ne	movbyts	_var04, #27
2b4ac                 | LR__4441
2b4ac     40 82 72 5D |  if_ne	testp	_var02 wc
2b4b0     F8 FF 9F 1D |  if_a	jmp	#LR__4441
2b4b4     F8 95 6E 5B |  if_ne	djnz	arg02, #LR__4440
2b4b8                 | LR__4442
2b4b8     40 80 72 FD | 	testp	_var01 wc
2b4bc     F8 FF 9F 3D |  if_ae	jmp	#LR__4442
2b4c0     40 82 62 FD | 	dirl	_var02
2b4c4     FF FF FF FF 
2b4c8     41 FF 2B FC | 	wypin	##-1, _var02
2b4cc     41 82 62 FD | 	dirh	_var02
2b4d0                 | _sdmm_cc_xmit_mmc_0841_ret
2b4d0     2D 00 64 FD | 	ret
2b4d4                 | 
2b4d4                 | _sdmm_cc_rcvr_mmc_0848
2b4d4     32 81 02 FB | 	rdlong	_var01, objptr
2b4d8     0C 64 06 F1 | 	add	objptr, #12
2b4dc     32 83 02 FB | 	rdlong	_var02, objptr
2b4e0     0C 64 86 F1 | 	sub	objptr, #12
2b4e4     41 03 08 FC | 	akpin	_var02
2b4e8     4A 85 0A F6 | 	mov	_var03, arg02 wz
2b4ec     02 84 4E F0 | 	shr	_var03, #2 wz
2b4f0     30 00 90 AD |  if_e	jmp	#LR__4452
2b4f4     42 87 02 F6 | 	mov	_var04, _var03
2b4f8     05 86 66 F0 | 	shl	_var04, #5
2b4fc     40 87 22 FC | 	wypin	_var04, _var01
2b500     41 7F 18 FC | 	wxpin	#63, _var02
2b504                 | LR__4450
2b504                 | LR__4451
2b504     40 82 72 FD | 	testp	_var02 wc
2b508     F8 FF 9F 3D |  if_ae	jmp	#LR__4451
2b50c     41 87 8A FA | 	rdpin	_var04, _var02
2b510     69 86 62 FD | 	rev	_var04
2b514     1B 86 FE F9 | 	movbyts	_var04, #27
2b518     49 87 62 FC | 	wrlong	_var04, arg01
2b51c     04 92 06 F1 | 	add	arg01, #4
2b520     F8 85 6E FB | 	djnz	_var03, #LR__4450
2b524                 | LR__4452
2b524     03 94 0E F5 | 	and	arg02, #3 wz
2b528     24 00 90 AD |  if_e	jmp	#LR__4455
2b52c     41 4F 18 FC | 	wxpin	#39, _var02
2b530                 | LR__4453
2b530     40 11 28 FC | 	wypin	#8, _var01
2b534                 | LR__4454
2b534     40 82 72 FD | 	testp	_var02 wc
2b538     F8 FF 9F 3D |  if_ae	jmp	#LR__4454
2b53c     41 87 8A FA | 	rdpin	_var04, _var02
2b540     69 86 62 FD | 	rev	_var04
2b544     49 87 42 FC | 	wrbyte	_var04, arg01
2b548     01 92 06 F1 | 	add	arg01, #1
2b54c     F8 95 6E FB | 	djnz	arg02, #LR__4453
2b550                 | LR__4455
2b550                 | _sdmm_cc_rcvr_mmc_0848_ret
2b550     2D 00 64 FD | 	ret
2b554                 | 
2b554                 | _sdmm_cc_wait_ready_0852
2b554     03 CA 05 F6 | 	mov	COUNT_, #3
2b558     E8 00 A0 FD | 	call	#pushregs_
2b55c     F8 A7 02 F6 | 	mov	local01, ptra
2b560     1A A8 62 FD | 	getct	local02
2b564     14 AA 06 FB | 	rdlong	local03, #20
2b568     01 AA 46 F0 | 	shr	local03, #1
2b56c                 | ' 	UINT tmr, tmout;
2b56c                 | ' 
2b56c                 | ' 	tmr = _cnt();
2b56c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2b56c                 | ' 	for(;;) {
2b56c     04 F0 07 F1 | 	add	ptra, #4
2b570                 | LR__4460
2b570     53 93 02 F6 | 	mov	arg01, local01
2b574     01 94 06 F6 | 	mov	arg02, #1
2b578     58 FF BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b57c     53 95 C2 FA | 	rdbyte	arg02, local01
2b580     FF 94 0E F2 | 	cmp	arg02, #255 wz
2b584     01 7A 06 A6 |  if_e	mov	result1, #1
2b588     1A 7A 62 5D |  if_ne	getct	result1
2b58c     54 7B 82 51 |  if_ne	sub	result1, local02
2b590     55 7B 12 52 |  if_ne	cmp	result1, local03 wc
2b594     00 7A 06 16 |  if_a	mov	result1, #0
2b598     D4 FF 9F 4D |  if_c_and_nz	jmp	#LR__4460
2b59c     E7 F0 03 F6 | 	mov	ptra, fp
2b5a0     F2 00 A0 FD | 	call	#popregs_
2b5a4                 | _sdmm_cc_wait_ready_0852_ret
2b5a4     2D 00 64 FD | 	ret
2b5a8                 | 
2b5a8                 | _sdmm_cc_deselect_0858
2b5a8     00 CA 05 F6 | 	mov	COUNT_, #0
2b5ac     E8 00 A0 FD | 	call	#pushregs_
2b5b0     F8 95 02 F6 | 	mov	arg02, ptra
2b5b4     04 64 06 F1 | 	add	objptr, #4
2b5b8     32 93 02 FB | 	rdlong	arg01, objptr
2b5bc     04 64 86 F1 | 	sub	objptr, #4
2b5c0     04 F0 07 F1 | 	add	ptra, #4
2b5c4     59 92 62 FD | 	drvh	arg01
2b5c8     1F 20 64 FD | 	waitx	#16
2b5cc     4A 93 02 F6 | 	mov	arg01, arg02
2b5d0     01 94 06 F6 | 	mov	arg02, #1
2b5d4     FC FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b5d8     E7 F0 03 F6 | 	mov	ptra, fp
2b5dc     F2 00 A0 FD | 	call	#popregs_
2b5e0                 | _sdmm_cc_deselect_0858_ret
2b5e0     2D 00 64 FD | 	ret
2b5e4                 | 
2b5e4                 | _sdmm_cc_select_0862
2b5e4     01 CA 05 F6 | 	mov	COUNT_, #1
2b5e8     E8 00 A0 FD | 	call	#pushregs_
2b5ec     F8 95 02 F6 | 	mov	arg02, ptra
2b5f0     04 64 06 F1 | 	add	objptr, #4
2b5f4     32 93 02 FB | 	rdlong	arg01, objptr
2b5f8     08 64 06 F1 | 	add	objptr, #8
2b5fc     32 A7 02 FB | 	rdlong	local01, objptr
2b600     0C 64 86 F1 | 	sub	objptr, #12
2b604     04 F0 07 F1 | 	add	ptra, #4
2b608     50 A6 62 FD | 	fltl	local01
2b60c     58 92 62 FD | 	drvl	arg01
2b610     1F 20 64 FD | 	waitx	#16
2b614     41 A6 62 FD | 	dirh	local01
2b618     4A 93 02 F6 | 	mov	arg01, arg02
2b61c     01 94 06 F6 | 	mov	arg02, #1
2b620     B0 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b624     2C FF BF FD | 	call	#_sdmm_cc_wait_ready_0852
2b628     00 7A 0E F2 | 	cmp	result1, #0 wz
2b62c     01 7A 06 56 |  if_ne	mov	result1, #1
2b630     08 00 90 5D |  if_ne	jmp	#LR__4470
2b634     70 FF BF FD | 	call	#_sdmm_cc_deselect_0858
2b638                 | ' 
2b638                 | ' 	deselect();
2b638                 | ' 	return 0;
2b638     00 7A 06 F6 | 	mov	result1, #0
2b63c                 | LR__4470
2b63c     E7 F0 03 F6 | 	mov	ptra, fp
2b640     F2 00 A0 FD | 	call	#popregs_
2b644                 | _sdmm_cc_select_0862_ret
2b644     2D 00 64 FD | 	ret
2b648                 | 
2b648                 | _sdmm_cc_rcvr_datablock_0866
2b648     05 CA 05 F6 | 	mov	COUNT_, #5
2b64c     E8 00 A0 FD | 	call	#pushregs_
2b650     49 A7 02 F6 | 	mov	local01, arg01
2b654     4A A9 02 F6 | 	mov	local02, arg02
2b658     F8 AB 02 F6 | 	mov	local03, ptra
2b65c     1A AC 62 FD | 	getct	local04
2b660     14 AE 06 FB | 	rdlong	local05, #20
2b664     03 AE 46 F0 | 	shr	local05, #3
2b668                 | ' 	UINT tmr, tmout;
2b668                 | ' 
2b668                 | ' 	tmr = _cnt();
2b668                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2b668                 | ' 	for(;;) {
2b668     04 F0 07 F1 | 	add	ptra, #4
2b66c                 | LR__4480
2b66c     55 93 02 F6 | 	mov	arg01, local03
2b670     01 94 06 F6 | 	mov	arg02, #1
2b674     5C FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b678     55 95 C2 FA | 	rdbyte	arg02, local03
2b67c     FF 94 0E F2 | 	cmp	arg02, #255 wz
2b680     1A 7A 62 AD |  if_e	getct	result1
2b684     3D 95 02 A6 |  if_e	mov	arg02, result1
2b688     56 95 82 A1 |  if_e	sub	arg02, local04
2b68c     57 95 12 A2 |  if_e	cmp	arg02, local05 wc
2b690     D8 FF 9F 8D |  if_c_and_z	jmp	#LR__4480
2b694     55 AF C2 FA | 	rdbyte	local05, local03
2b698     FE AE 0E F2 | 	cmp	local05, #254 wz
2b69c     00 7A 06 56 |  if_ne	mov	result1, #0
2b6a0     1C 00 90 5D |  if_ne	jmp	#LR__4481
2b6a4     53 93 02 F6 | 	mov	arg01, local01
2b6a8     54 95 02 F6 | 	mov	arg02, local02
2b6ac     24 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b6b0     55 93 02 F6 | 	mov	arg01, local03
2b6b4     02 94 06 F6 | 	mov	arg02, #2
2b6b8     18 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b6bc                 | ' 
2b6bc                 | ' 	rcvr_mmc(buff, btr);
2b6bc                 | ' 	rcvr_mmc(d, 2);
2b6bc                 | ' 
2b6bc                 | ' 	return 1;
2b6bc     01 7A 06 F6 | 	mov	result1, #1
2b6c0                 | LR__4481
2b6c0     E7 F0 03 F6 | 	mov	ptra, fp
2b6c4     F2 00 A0 FD | 	call	#popregs_
2b6c8                 | _sdmm_cc_rcvr_datablock_0866_ret
2b6c8     2D 00 64 FD | 	ret
2b6cc                 | 
2b6cc                 | _sdmm_cc_xmit_datablock_0868
2b6cc     03 CA 05 F6 | 	mov	COUNT_, #3
2b6d0     E8 00 A0 FD | 	call	#pushregs_
2b6d4     49 A7 02 F6 | 	mov	local01, arg01
2b6d8     4A A9 02 F6 | 	mov	local02, arg02
2b6dc     F8 AB 02 F6 | 	mov	local03, ptra
2b6e0     04 F0 07 F1 | 	add	ptra, #4
2b6e4     6C FE BF FD | 	call	#_sdmm_cc_wait_ready_0852
2b6e8     00 7A 0E F2 | 	cmp	result1, #0 wz
2b6ec     00 7A 06 A6 |  if_e	mov	result1, #0
2b6f0     58 00 90 AD |  if_e	jmp	#LR__4491
2b6f4     55 A9 42 FC | 	wrbyte	local02, local03
2b6f8     55 93 02 F6 | 	mov	arg01, local03
2b6fc     01 94 06 F6 | 	mov	arg02, #1
2b700     4C FD BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b704     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2b708     FD A8 0E F2 | 	cmp	local02, #253 wz
2b70c     38 00 90 AD |  if_e	jmp	#LR__4490
2b710     53 93 02 F6 | 	mov	arg01, local01
2b714     09 94 C6 F9 | 	decod	arg02, #9
2b718     34 FD BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b71c     55 93 02 F6 | 	mov	arg01, local03
2b720     02 94 06 F6 | 	mov	arg02, #2
2b724     AC FD BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b728     55 93 02 F6 | 	mov	arg01, local03
2b72c     01 94 06 F6 | 	mov	arg02, #1
2b730     A0 FD BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b734     55 AB C2 FA | 	rdbyte	local03, local03
2b738     1F AA 06 F5 | 	and	local03, #31
2b73c     05 AA 0E F2 | 	cmp	local03, #5 wz
2b740                 | ' 			return 0;
2b740     00 7A 06 56 |  if_ne	mov	result1, #0
2b744     04 00 90 5D |  if_ne	jmp	#LR__4491
2b748                 | LR__4490
2b748                 | ' 	}
2b748                 | ' 
2b748                 | ' 	return 1;
2b748     01 7A 06 F6 | 	mov	result1, #1
2b74c                 | LR__4491
2b74c     E7 F0 03 F6 | 	mov	ptra, fp
2b750     F2 00 A0 FD | 	call	#popregs_
2b754                 | _sdmm_cc_xmit_datablock_0868_ret
2b754     2D 00 64 FD | 	ret
2b758                 | 
2b758                 | _sdmm_cc_send_cmd_0871
2b758     04 CA 05 F6 | 	mov	COUNT_, #4
2b75c     E8 00 A0 FD | 	call	#pushregs_
2b760                 | _sdmm_cc_send_cmd_0871_enter
2b760     49 A7 02 F6 | 	mov	local01, arg01
2b764     4A A9 02 F6 | 	mov	local02, arg02
2b768     F8 AB 02 F6 | 	mov	local03, ptra
2b76c     53 7B E2 F8 | 	getbyte	result1, local01, #0
2b770     80 7A CE F7 | 	test	result1, #128 wz
2b774     08 F0 07 F1 | 	add	ptra, #8
2b778     20 00 90 AD |  if_e	jmp	#LR__4500
2b77c     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2b780     7F A6 06 F5 | 	and	local01, #127
2b784     37 92 06 F6 | 	mov	arg01, #55
2b788     00 94 06 F6 | 	mov	arg02, #0
2b78c     C8 FF BF FD | 	call	#_sdmm_cc_send_cmd_0871
2b790     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
2b794     02 94 16 F2 | 	cmp	arg02, #2 wc
2b798     BC 00 90 3D |  if_ae	jmp	#LR__4503
2b79c                 | LR__4500
2b79c     53 7B E2 F8 | 	getbyte	result1, local01, #0
2b7a0     0C 7A 0E F2 | 	cmp	result1, #12 wz
2b7a4     14 00 90 AD |  if_e	jmp	#LR__4501
2b7a8     FC FD BF FD | 	call	#_sdmm_cc_deselect_0858
2b7ac     34 FE BF FD | 	call	#_sdmm_cc_select_0862
2b7b0     00 7A 0E F2 | 	cmp	result1, #0 wz
2b7b4     FF 7A 06 A6 |  if_e	mov	result1, #255
2b7b8     9C 00 90 AD |  if_e	jmp	#LR__4503
2b7bc                 | LR__4501
2b7bc     53 95 E2 F8 | 	getbyte	arg02, local01, #0
2b7c0     40 7A 06 F6 | 	mov	result1, #64
2b7c4     4A 7B 42 F5 | 	or	result1, arg02
2b7c8     55 7B 42 FC | 	wrbyte	result1, local03
2b7cc     55 95 02 F6 | 	mov	arg02, local03
2b7d0     01 94 06 F1 | 	add	arg02, #1
2b7d4     1B A8 FE F9 | 	movbyts	local02, #27
2b7d8     4A A9 62 FC | 	wrlong	local02, arg02
2b7dc     01 AC 06 F6 | 	mov	local04, #1
2b7e0     53 A9 02 F6 | 	mov	local02, local01
2b7e4     07 A8 4E F7 | 	zerox	local02, #7 wz
2b7e8     95 AC 06 A6 |  if_e	mov	local04, #149
2b7ec     53 A9 E2 F8 | 	getbyte	local02, local01, #0
2b7f0     08 A8 0E F2 | 	cmp	local02, #8 wz
2b7f4     87 AC 06 A6 |  if_e	mov	local04, #135
2b7f8     05 AA 06 F1 | 	add	local03, #5
2b7fc     55 AD 42 FC | 	wrbyte	local04, local03
2b800     05 AA 86 F1 | 	sub	local03, #5
2b804     55 93 02 F6 | 	mov	arg01, local03
2b808     06 94 06 F6 | 	mov	arg02, #6
2b80c     40 FC BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b810     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2b814     0C A6 0E F2 | 	cmp	local01, #12 wz
2b818     55 93 02 A6 |  if_e	mov	arg01, local03
2b81c     06 92 06 A1 |  if_e	add	arg01, #6
2b820     01 94 06 A6 |  if_e	mov	arg02, #1
2b824     AC FC BF AD |  if_e	call	#_sdmm_cc_rcvr_mmc_0848
2b828     0A AC 06 F6 | 	mov	local04, #10
2b82c                 | ' 	n = 10;
2b82c                 | ' 	do
2b82c                 | LR__4502
2b82c     55 93 02 F6 | 	mov	arg01, local03
2b830     06 92 06 F1 | 	add	arg01, #6
2b834     01 94 06 F6 | 	mov	arg02, #1
2b838     98 FC BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b83c     06 AA 06 F1 | 	add	local03, #6
2b840     55 A9 C2 FA | 	rdbyte	local02, local03
2b844     06 AA 86 F1 | 	sub	local03, #6
2b848     80 A8 CE F7 | 	test	local02, #128 wz
2b84c     F7 AD 6E 5B |  if_ne	djnz	local04, #LR__4502
2b850                 | ' 
2b850                 | ' 	return buf[6];
2b850     06 AA 06 F1 | 	add	local03, #6
2b854     55 7B C2 FA | 	rdbyte	result1, local03
2b858                 | LR__4503
2b858     E7 F0 03 F6 | 	mov	ptra, fp
2b85c     F2 00 A0 FD | 	call	#popregs_
2b860                 | _sdmm_cc_send_cmd_0871_ret
2b860     2D 00 64 FD | 	ret
2b864                 | 
2b864                 | _sdmm_cc_disk_setpins
2b864     00 92 0E F2 | 	cmp	arg01, #0 wz
2b868     01 7A 66 56 |  if_ne	neg	result1, #1
2b86c     24 00 90 5D |  if_ne	jmp	#_sdmm_cc_disk_setpins_ret
2b870     32 95 62 FC | 	wrlong	arg02, objptr
2b874     04 64 06 F1 | 	add	objptr, #4
2b878     32 97 62 FC | 	wrlong	arg03, objptr
2b87c     04 64 06 F1 | 	add	objptr, #4
2b880     32 99 62 FC | 	wrlong	arg04, objptr
2b884     04 64 06 F1 | 	add	objptr, #4
2b888     32 9B 62 FC | 	wrlong	arg05, objptr
2b88c     0C 64 86 F1 | 	sub	objptr, #12
2b890                 | '     _pin_clk = pclk;
2b890                 | '     _pin_ss = pss;
2b890                 | '     _pin_di = pdi;
2b890                 | '     _pin_do = pdo;
2b890                 | ' #line 848 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b890                 | '     return 0;
2b890     00 7A 06 F6 | 	mov	result1, #0
2b894                 | _sdmm_cc_disk_setpins_ret
2b894     2D 00 64 FD | 	ret
2b898                 | 
2b898                 | _sdmm_cc_disk_deinitialize
2b898     04 CA 05 F6 | 	mov	COUNT_, #4
2b89c     E8 00 A0 FD | 	call	#pushregs_
2b8a0     00 92 4E F2 | 	cmps	arg01, #0 wz
2b8a4     32 A7 02 FB | 	rdlong	local01, objptr
2b8a8     04 64 06 F1 | 	add	objptr, #4
2b8ac     32 A9 02 FB | 	rdlong	local02, objptr
2b8b0     04 64 06 F1 | 	add	objptr, #4
2b8b4     32 AB 02 FB | 	rdlong	local03, objptr
2b8b8     08 64 06 F1 | 	add	objptr, #8
2b8bc     32 AD 02 FB | 	rdlong	local04, objptr
2b8c0     04 64 86 F1 | 	sub	objptr, #4
2b8c4     32 93 02 FB | 	rdlong	arg01, objptr
2b8c8     0C 64 86 F1 | 	sub	objptr, #12
2b8cc                 | ' #line 865 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b8cc                 | '         return RES_NOTRDY;
2b8cc     03 7A 06 56 |  if_ne	mov	result1, #3
2b8d0     34 00 90 5D |  if_ne	jmp	#LR__4510
2b8d4     50 92 62 FD | 	fltl	arg01
2b8d8     49 01 08 FC | 	wrpin	#0, arg01
2b8dc     50 AC 62 FD | 	fltl	local04
2b8e0     56 01 08 FC | 	wrpin	#0, local04
2b8e4     50 AA 62 FD | 	fltl	local03
2b8e8     55 01 08 FC | 	wrpin	#0, local03
2b8ec     50 A6 62 FD | 	fltl	local01
2b8f0     53 01 08 FC | 	wrpin	#0, local01
2b8f4     50 A8 62 FD | 	fltl	local02
2b8f8     54 01 08 FC | 	wrpin	#0, local02
2b8fc     0A 92 06 F6 | 	mov	arg01, #10
2b900     A8 93 BF FD | 	call	#__system___waitms
2b904                 | '     }
2b904                 | ' #line 871 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b904                 | '     _pinclear(SMPIN_DO);
2b904                 | '     _pinclear(PIN_DO);
2b904                 | '     _pinclear(PIN_DI);
2b904                 | '     _pinclear(PIN_CLK);
2b904                 | '     _pinclear(PIN_SS);
2b904                 | ' 
2b904                 | '     _waitms(10);
2b904                 | ' 
2b904                 | '     return 0;
2b904     00 7A 06 F6 | 	mov	result1, #0
2b908                 | LR__4510
2b908     E7 F0 03 F6 | 	mov	ptra, fp
2b90c     F2 00 A0 FD | 	call	#popregs_
2b910                 | _sdmm_cc_disk_deinitialize_ret
2b910     2D 00 64 FD | 	ret
2b914                 | 
2b914                 | _sdmm_cc_v_do_io
2b914     08 CA 05 F6 | 	mov	COUNT_, #8
2b918     E8 00 A0 FD | 	call	#pushregs_
2b91c     4B A7 02 F6 | 	mov	local01, arg03
2b920     4C A9 02 F6 | 	mov	local02, arg04
2b924     4A AB 02 F6 | 	mov	local03, arg02
2b928     18 64 06 F1 | 	add	objptr, #24
2b92c     32 AD 02 FB | 	rdlong	local04, objptr
2b930     00 98 06 F6 | 	mov	arg04, #0
2b934     FF AD 06 F5 | 	and	local04, #511
2b938     00 AE 06 F6 | 	mov	local05, #0
2b93c     32 93 02 FB | 	rdlong	arg01, objptr
2b940     04 64 06 F1 | 	add	objptr, #4
2b944     32 95 02 FB | 	rdlong	arg02, objptr
2b948     1C 64 86 F1 | 	sub	objptr, #28
2b94c     09 96 06 F6 | 	mov	arg03, #9
2b950     7C B2 BF FD | 	call	#__system___int64_sar
2b954     3D B1 02 F6 | 	mov	local06, result1
2b958     00 AC 0E F2 | 	cmp	local04, #0 wz
2b95c                 | ' 
2b95c                 | ' 
2b95c                 | '         return -1;
2b95c     01 7A 66 56 |  if_ne	neg	result1, #1
2b960     84 00 90 5D |  if_ne	jmp	#LR__4523
2b964     53 B3 02 F6 | 	mov	local07, local01
2b968     09 B2 46 F0 | 	shr	local07, #9
2b96c     00 A8 0E F2 | 	cmp	local02, #0 wz
2b970     1C 00 90 AD |  if_e	jmp	#LR__4520
2b974     00 92 06 F6 | 	mov	arg01, #0
2b978     55 95 02 F6 | 	mov	arg02, local03
2b97c     58 97 02 F6 | 	mov	arg03, local06
2b980     59 99 02 F6 | 	mov	arg04, local07
2b984     88 F8 BF FD | 	call	#_sdmm_cc_disk_write
2b988     3D B5 02 F6 | 	mov	local08, result1
2b98c     18 00 90 FD | 	jmp	#LR__4521
2b990                 | LR__4520
2b990     00 92 06 F6 | 	mov	arg01, #0
2b994     55 95 02 F6 | 	mov	arg02, local03
2b998     58 97 02 F6 | 	mov	arg03, local06
2b99c     59 99 02 F6 | 	mov	arg04, local07
2b9a0     AC F7 BF FD | 	call	#_sdmm_cc_disk_read
2b9a4     3D B5 02 F6 | 	mov	local08, result1
2b9a8                 | LR__4521
2b9a8     00 B4 0E F2 | 	cmp	local08, #0 wz
2b9ac     34 00 90 5D |  if_ne	jmp	#LR__4522
2b9b0     09 B2 66 F0 | 	shl	local07, #9
2b9b4     59 AF 02 F1 | 	add	local05, local07
2b9b8     18 64 06 F1 | 	add	objptr, #24
2b9bc     32 7B 02 FB | 	rdlong	result1, objptr
2b9c0     04 64 06 F1 | 	add	objptr, #4
2b9c4     32 7D 02 FB | 	rdlong	result2, objptr
2b9c8     59 7B 12 F1 | 	add	result1, local07 wc
2b9cc     00 7C 26 F1 | 	addx	result2, #0
2b9d0     04 64 86 F1 | 	sub	objptr, #4
2b9d4     32 7B 62 FC | 	wrlong	result1, objptr
2b9d8     04 64 06 F1 | 	add	objptr, #4
2b9dc     32 7D 62 FC | 	wrlong	result2, objptr
2b9e0     1C 64 86 F1 | 	sub	objptr, #28
2b9e4                 | LR__4522
2b9e4                 | ' 
2b9e4                 | ' 
2b9e4                 | '     }
2b9e4                 | '     return bytes_io;
2b9e4     57 7B 02 F6 | 	mov	result1, local05
2b9e8                 | LR__4523
2b9e8     E7 F0 03 F6 | 	mov	ptra, fp
2b9ec     F2 00 A0 FD | 	call	#popregs_
2b9f0                 | _sdmm_cc_v_do_io_ret
2b9f0     2D 00 64 FD | 	ret
2b9f4                 | 
2b9f4                 | _sdmm_cc_v_read
2b9f4                 | ' {
2b9f4                 | '     return v_do_io(fil, buf, count,  (0) );
2b9f4     00 98 06 F6 | 	mov	arg04, #0
2b9f8     18 FF BF FD | 	call	#_sdmm_cc_v_do_io
2b9fc                 | _sdmm_cc_v_read_ret
2b9fc     2D 00 64 FD | 	ret
2ba00                 | 
2ba00                 | _sdmm_cc_v_write
2ba00                 | ' {
2ba00                 | '     return v_do_io(fil, buf, count,  (1) );
2ba00     01 98 06 F6 | 	mov	arg04, #1
2ba04     0C FF BF FD | 	call	#_sdmm_cc_v_do_io
2ba08                 | _sdmm_cc_v_write_ret
2ba08     2D 00 64 FD | 	ret
2ba0c                 | 
2ba0c                 | _sdmm_cc_v_ioctl
2ba0c     00 92 06 F6 | 	mov	arg01, #0
2ba10     04 F9 BF FD | 	call	#_sdmm_cc_disk_ioctl
2ba14     00 7A 0E F2 | 	cmp	result1, #0 wz
2ba18                 | '         return _seterror( 10 );
2ba18     20 68 06 51 |  if_ne	add	ptr___system__dat__, #32
2ba1c     34 15 68 5C |  if_ne	wrlong	#10, ptr___system__dat__
2ba20     20 68 86 51 |  if_ne	sub	ptr___system__dat__, #32
2ba24     01 7A 66 56 |  if_ne	neg	result1, #1
2ba28                 | '     return 0;
2ba28     00 7A 06 A6 |  if_e	mov	result1, #0
2ba2c                 | _sdmm_cc_v_ioctl_ret
2ba2c     2D 00 64 FD | 	ret
2ba30                 | 
2ba30                 | _sdmm_cc_v_lseek
2ba30     4A 81 02 F6 | 	mov	_var01, arg02
2ba34     4C 85 0A F6 | 	mov	_var03, arg04 wz
2ba38     1C 00 90 5D |  if_ne	jmp	#LR__4530
2ba3c     4B 85 02 F6 | 	mov	_var03, arg03
2ba40     18 64 06 F1 | 	add	objptr, #24
2ba44     32 81 62 FC | 	wrlong	_var01, objptr
2ba48     04 64 06 F1 | 	add	objptr, #4
2ba4c     32 85 62 FC | 	wrlong	_var03, objptr
2ba50     1C 64 86 F1 | 	sub	objptr, #28
2ba54     64 00 90 FD | 	jmp	#LR__4533
2ba58                 | LR__4530
2ba58     01 84 0E F2 | 	cmp	_var03, #1 wz
2ba5c     30 00 90 5D |  if_ne	jmp	#LR__4531
2ba60     18 64 06 F1 | 	add	objptr, #24
2ba64     32 7B 02 FB | 	rdlong	result1, objptr
2ba68     04 64 06 F1 | 	add	objptr, #4
2ba6c     32 7D 02 FB | 	rdlong	result2, objptr
2ba70     40 7B 12 F1 | 	add	result1, _var01 wc
2ba74     4B 7D 22 F1 | 	addx	result2, arg03
2ba78     04 64 86 F1 | 	sub	objptr, #4
2ba7c     32 7B 62 FC | 	wrlong	result1, objptr
2ba80     04 64 06 F1 | 	add	objptr, #4
2ba84     32 7D 62 FC | 	wrlong	result2, objptr
2ba88     1C 64 86 F1 | 	sub	objptr, #28
2ba8c     2C 00 90 FD | 	jmp	#LR__4532
2ba90                 | LR__4531
2ba90     40 7B 22 F6 | 	not	result1, _var01
2ba94     01 7A 0E F1 | 	add	result1, #1 wz
2ba98     4B 7D 22 F6 | 	not	result2, arg03
2ba9c     00 94 06 F6 | 	mov	arg02, #0
2baa0     01 94 66 A6 |  if_e	neg	arg02, #1
2baa4     4A 7D 82 F1 | 	sub	result2, arg02
2baa8     18 64 06 F1 | 	add	objptr, #24
2baac     32 7B 62 FC | 	wrlong	result1, objptr
2bab0     04 64 06 F1 | 	add	objptr, #4
2bab4     32 7D 62 FC | 	wrlong	result2, objptr
2bab8     1C 64 86 F1 | 	sub	objptr, #28
2babc                 | LR__4532
2babc                 | LR__4533
2babc                 | '         curpos = -off;
2babc                 | '     }
2babc                 | '     return curpos;
2babc     18 64 06 F1 | 	add	objptr, #24
2bac0     32 7B 02 FB | 	rdlong	result1, objptr
2bac4     04 64 06 F1 | 	add	objptr, #4
2bac8     32 7D 02 FB | 	rdlong	result2, objptr
2bacc     1C 64 86 F1 | 	sub	objptr, #28
2bad0                 | _sdmm_cc_v_lseek_ret
2bad0     2D 00 64 FD | 	ret
2bad4                 | 
2bad4                 | _sdmm_cc_v_flush
2bad4                 | ' {
2bad4                 | '     return 0;
2bad4     00 7A 06 F6 | 	mov	result1, #0
2bad8                 | _sdmm_cc_v_flush_ret
2bad8     2D 00 64 FD | 	ret
2badc                 | 
2badc                 | _sdmm_cc_v_close
2badc     00 92 06 F6 | 	mov	arg01, #0
2bae0     B4 FD BF FD | 	call	#_sdmm_cc_disk_deinitialize
2bae4     20 64 06 F1 | 	add	objptr, #32
2bae8     32 93 02 FB | 	rdlong	arg01, objptr
2baec     04 64 06 F1 | 	add	objptr, #4
2baf0     32 95 02 FB | 	rdlong	arg02, objptr
2baf4     24 64 86 F1 | 	sub	objptr, #36
2baf8     60 B1 BF FD | 	call	#__system___freepins
2bafc                 | ' {
2bafc                 | '     disk_deinitialize(0);
2bafc                 | '     _freepins(f_pinmask);
2bafc                 | '     return 0;
2bafc     00 7A 06 F6 | 	mov	result1, #0
2bb00                 | _sdmm_cc_v_close_ret
2bb00     2D 00 64 FD | 	ret
2bb04                 | 
2bb04                 | _sdmm_cc_v_putc
2bb04     00 CA 05 F6 | 	mov	COUNT_, #0
2bb08     E8 00 A0 FD | 	call	#pushregs_
2bb0c     0C F0 07 F1 | 	add	ptra, #12
2bb10     04 CE 05 F1 | 	add	fp, #4
2bb14     E7 92 62 FC | 	wrlong	arg01, fp
2bb18     4A 93 02 F6 | 	mov	arg01, arg02
2bb1c     E7 94 02 F6 | 	mov	arg02, fp
2bb20     01 96 06 F6 | 	mov	arg03, #1
2bb24     04 CE 85 F1 | 	sub	fp, #4
2bb28                 | ' {
2bb28                 | '     return v_do_io(fil, buf, count,  (1) );
2bb28     01 98 06 F6 | 	mov	arg04, #1
2bb2c     E4 FD BF FD | 	call	#_sdmm_cc_v_do_io
2bb30     01 7A 0E F2 | 	cmp	result1, #1 wz
2bb34     04 CE 05 A1 |  if_e	add	fp, #4
2bb38     E7 7A 02 AB |  if_e	rdlong	result1, fp
2bb3c     04 CE 85 A1 |  if_e	sub	fp, #4
2bb40                 | '     return -1;
2bb40     01 7A 66 56 |  if_ne	neg	result1, #1
2bb44     E7 F0 03 F6 | 	mov	ptra, fp
2bb48     F2 00 A0 FD | 	call	#popregs_
2bb4c                 | _sdmm_cc_v_putc_ret
2bb4c     2D 00 64 FD | 	ret
2bb50                 | 
2bb50                 | _sdmm_cc_v_getc
2bb50     00 CA 05 F6 | 	mov	COUNT_, #0
2bb54     E8 00 A0 FD | 	call	#pushregs_
2bb58     0C F0 07 F1 | 	add	ptra, #12
2bb5c     08 CE 05 F1 | 	add	fp, #8
2bb60     E7 00 68 FC | 	wrlong	#0, fp
2bb64     E7 94 02 F6 | 	mov	arg02, fp
2bb68     08 CE 85 F1 | 	sub	fp, #8
2bb6c     01 96 06 F6 | 	mov	arg03, #1
2bb70                 | ' {
2bb70                 | '     return v_do_io(fil, buf, count,  (0) );
2bb70     00 98 06 F6 | 	mov	arg04, #0
2bb74     9C FD BF FD | 	call	#_sdmm_cc_v_do_io
2bb78     01 7A 0E F2 | 	cmp	result1, #1 wz
2bb7c     08 CE 05 A1 |  if_e	add	fp, #8
2bb80     E7 7A 02 AB |  if_e	rdlong	result1, fp
2bb84     08 CE 85 A1 |  if_e	sub	fp, #8
2bb88                 | '     return -1;
2bb88     01 7A 66 56 |  if_ne	neg	result1, #1
2bb8c     E7 F0 03 F6 | 	mov	ptra, fp
2bb90     F2 00 A0 FD | 	call	#popregs_
2bb94                 | _sdmm_cc_v_getc_ret
2bb94     2D 00 64 FD | 	ret
2bb98                 | 
2bb98                 | _fatfs_cc_ff_uni2oem
2bb98     00 80 06 F6 | 	mov	_var01, #0
2bb9c     80 92 16 F2 | 	cmp	arg01, #128 wc
2bba0     49 81 02 C6 |  if_b	mov	_var01, arg01
2bba4     58 00 90 CD |  if_b	jmp	#LR__4544
2bba8     80 00 00 FF 
2bbac     00 92 16 F2 | 	cmp	arg01, ##65536 wc
2bbb0     4C 00 90 3D |  if_ae	jmp	#LR__4543
2bbb4     4A 7B 32 F9 | 	getword	result1, arg02, #0
2bbb8     01 00 00 FF 
2bbbc     52 7B 0E F2 | 	cmp	result1, ##850 wz
2bbc0     3C 00 90 5D |  if_ne	jmp	#LR__4543
2bbc4                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2bbc4     00 80 06 F6 | 	mov	_var01, #0
2bbc8     D7 14 48 FB | 	callpa	#(@LR__4541-@LR__4540)>>2,fcache_load_ptr_
2bbcc                 | LR__4540
2bbcc     40 7B 32 F9 | 	getword	result1, _var01, #0
2bbd0     80 7A 16 F2 | 	cmp	result1, #128 wc
2bbd4     1C 00 90 3D |  if_ae	jmp	#LR__4542
2bbd8     40 7B 32 F9 | 	getword	result1, _var01, #0
2bbdc     01 7A 66 F0 | 	shl	result1, #1
2bbe0     36 7B 02 F1 | 	add	result1, ptr__fatfs_cc_dat__
2bbe4     3D 7B E2 FA | 	rdword	result1, result1
2bbe8     3D 93 0A F2 | 	cmp	arg01, result1 wz
2bbec     01 80 06 51 |  if_ne	add	_var01, #1
2bbf0     D8 FF 9F 5D |  if_ne	jmp	#LR__4540
2bbf4                 | LR__4541
2bbf4                 | LR__4542
2bbf4     40 81 32 F9 | 	getword	_var01, _var01, #0
2bbf8     80 80 06 F1 | 	add	_var01, #128
2bbfc     40 81 E2 F8 | 	getbyte	_var01, _var01, #0
2bc00                 | LR__4543
2bc00                 | LR__4544
2bc00                 | ' 			c = (c + 0x80) & 0xFF;
2bc00                 | ' 		}
2bc00                 | ' 	}
2bc00                 | ' 
2bc00                 | ' 	return c;
2bc00     40 7B 02 F6 | 	mov	result1, _var01
2bc04                 | _fatfs_cc_ff_uni2oem_ret
2bc04     2D 00 64 FD | 	ret
2bc08                 | 
2bc08                 | _fatfs_cc_ff_oem2uni
2bc08     00 80 06 F6 | 	mov	_var01, #0
2bc0c     49 7B 32 F9 | 	getword	result1, arg01, #0
2bc10     80 7A 16 F2 | 	cmp	result1, #128 wc
2bc14     49 81 02 C6 |  if_b	mov	_var01, arg01
2bc18     2C 00 90 CD |  if_b	jmp	#LR__4551
2bc1c     4A 95 32 F9 | 	getword	arg02, arg02, #0
2bc20     01 00 00 FF 
2bc24     52 95 0E F2 | 	cmp	arg02, ##850 wz
2bc28     1C 00 90 5D |  if_ne	jmp	#LR__4550
2bc2c     49 7B 32 F9 | 	getword	result1, arg01, #0
2bc30     00 7B 16 F2 | 	cmp	result1, #256 wc
2bc34     49 93 32 C9 |  if_b	getword	arg01, arg01, #0
2bc38     80 92 86 C1 |  if_b	sub	arg01, #128
2bc3c     01 92 66 C0 |  if_b	shl	arg01, #1
2bc40     36 93 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2bc44     49 81 E2 CA |  if_b	rdword	_var01, arg01
2bc48                 | LR__4550
2bc48                 | LR__4551
2bc48                 | ' 		}
2bc48                 | ' 	}
2bc48                 | ' 
2bc48                 | ' 	return c;
2bc48     40 7B 02 F6 | 	mov	result1, _var01
2bc4c                 | _fatfs_cc_ff_oem2uni_ret
2bc4c     2D 00 64 FD | 	ret
2bc50                 | 
2bc50                 | _fatfs_cc_ff_wtoupper
2bc50     49 81 02 F6 | 	mov	_var01, arg01
2bc54     80 00 00 FF 
2bc58     00 80 16 F2 | 	cmp	_var01, ##65536 wc
2bc5c     58 01 90 3D |  if_ae	jmp	#LR__4573
2bc60     40 83 02 F6 | 	mov	_var02, _var01
2bc64     41 81 32 F9 | 	getword	_var01, _var02, #0
2bc68     08 00 00 FF 
2bc6c     00 80 16 F2 | 	cmp	_var01, ##4096 wc
2bc70     36 85 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2bc74     00 85 06 C1 |  if_b	add	_var03, #256
2bc78     36 85 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2bc7c     01 00 00 3F 
2bc80     F2 84 06 31 |  if_ae	add	_var03, ##754
2bc84     42 87 02 F6 | 	mov	_var04, _var03
2bc88                 | ' 		uc = (WORD)uni;
2bc88                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2bc88                 | ' 		for (;;) {
2bc88                 | LR__4560
2bc88     43 89 E2 FA | 	rdword	_var05, _var04
2bc8c     44 85 02 F6 | 	mov	_var03, _var05
2bc90     0F 84 4E F7 | 	zerox	_var03, #15 wz
2bc94     02 86 06 F1 | 	add	_var04, #2
2bc98     18 01 90 AD |  if_e	jmp	#LR__4572
2bc9c     41 85 32 F9 | 	getword	_var03, _var02, #0
2bca0     44 81 32 F9 | 	getword	_var01, _var05, #0
2bca4     40 85 12 F2 | 	cmp	_var03, _var01 wc
2bca8     08 01 90 CD |  if_b	jmp	#LR__4572
2bcac     43 8B E2 FA | 	rdword	_var06, _var04
2bcb0     45 8D 32 F9 | 	getword	_var07, _var06, #0
2bcb4     08 8C 46 F0 | 	shr	_var07, #8
2bcb8     45 8B 32 F9 | 	getword	_var06, _var06, #0
2bcbc     45 8B E2 F8 | 	getbyte	_var06, _var06, #0
2bcc0     41 85 32 F9 | 	getword	_var03, _var02, #0
2bcc4     44 8F 32 F9 | 	getword	_var08, _var05, #0
2bcc8     45 81 32 F9 | 	getword	_var01, _var06, #0
2bccc     40 8F 02 F1 | 	add	_var08, _var01
2bcd0     47 85 52 F2 | 	cmps	_var03, _var08 wc
2bcd4     02 86 06 F1 | 	add	_var04, #2
2bcd8     C4 00 90 3D |  if_ae	jmp	#LR__4571
2bcdc                 | ' 				switch (cmd) {
2bcdc     46 91 32 F9 | 	getword	_var09, _var07, #0
2bce0     09 90 26 F3 | 	fle	_var09, #9
2bce4     30 90 62 FD | 	jmprel	_var09
2bce8                 | LR__4561
2bce8     24 00 90 FD | 	jmp	#LR__4562
2bcec     3C 00 90 FD | 	jmp	#LR__4563
2bcf0     54 00 90 FD | 	jmp	#LR__4564
2bcf4     5C 00 90 FD | 	jmp	#LR__4565
2bcf8     64 00 90 FD | 	jmp	#LR__4566
2bcfc     6C 00 90 FD | 	jmp	#LR__4567
2bd00     74 00 90 FD | 	jmp	#LR__4568
2bd04     7C 00 90 FD | 	jmp	#LR__4569
2bd08     84 00 90 FD | 	jmp	#LR__4570
2bd0c     A4 00 90 FD | 	jmp	#LR__4572
2bd10                 | LR__4562
2bd10     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd14     44 89 32 F9 | 	getword	_var05, _var05, #0
2bd18     44 83 82 F1 | 	sub	_var02, _var05
2bd1c     01 82 66 F0 | 	shl	_var02, #1
2bd20     43 83 02 F1 | 	add	_var02, _var04
2bd24     41 83 E2 FA | 	rdword	_var02, _var02
2bd28     88 00 90 FD | 	jmp	#LR__4572
2bd2c                 | LR__4563
2bd2c     41 85 32 F9 | 	getword	_var03, _var02, #0
2bd30     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd34     44 89 32 F9 | 	getword	_var05, _var05, #0
2bd38     44 83 82 F1 | 	sub	_var02, _var05
2bd3c     01 82 06 F5 | 	and	_var02, #1
2bd40     42 83 C2 F2 | 	subr	_var02, _var03
2bd44     6C 00 90 FD | 	jmp	#LR__4572
2bd48                 | LR__4564
2bd48     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd4c     10 82 86 F1 | 	sub	_var02, #16
2bd50     60 00 90 FD | 	jmp	#LR__4572
2bd54                 | LR__4565
2bd54     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd58     20 82 86 F1 | 	sub	_var02, #32
2bd5c     54 00 90 FD | 	jmp	#LR__4572
2bd60                 | LR__4566
2bd60     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd64     30 82 86 F1 | 	sub	_var02, #48
2bd68     48 00 90 FD | 	jmp	#LR__4572
2bd6c                 | LR__4567
2bd6c     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd70     1A 82 86 F1 | 	sub	_var02, #26
2bd74     3C 00 90 FD | 	jmp	#LR__4572
2bd78                 | LR__4568
2bd78     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd7c     08 82 06 F1 | 	add	_var02, #8
2bd80     30 00 90 FD | 	jmp	#LR__4572
2bd84                 | LR__4569
2bd84     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd88     50 82 86 F1 | 	sub	_var02, #80
2bd8c     24 00 90 FD | 	jmp	#LR__4572
2bd90                 | LR__4570
2bd90     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd94     0E 00 00 FF 
2bd98     60 82 86 F1 | 	sub	_var02, ##7264
2bd9c                 | ' 				}
2bd9c                 | ' 				break;
2bd9c     14 00 90 FD | 	jmp	#LR__4572
2bda0                 | LR__4571
2bda0     0F 8C 4E F7 | 	zerox	_var07, #15 wz
2bda4     45 8B 32 A9 |  if_e	getword	_var06, _var06, #0
2bda8     01 8A 66 A0 |  if_e	shl	_var06, #1
2bdac     45 87 02 A1 |  if_e	add	_var04, _var06
2bdb0     D4 FE 9F FD | 	jmp	#LR__4560
2bdb4                 | LR__4572
2bdb4     41 81 32 F9 | 	getword	_var01, _var02, #0
2bdb8                 | LR__4573
2bdb8                 | ' 		}
2bdb8                 | ' 		uni = uc;
2bdb8                 | ' 	}
2bdb8                 | ' 
2bdb8                 | ' 	return uni;
2bdb8     40 7B 02 F6 | 	mov	result1, _var01
2bdbc                 | _fatfs_cc_ff_wtoupper_ret
2bdbc     2D 00 64 FD | 	ret
2bdc0                 | 
2bdc0                 | _fatfs_cc_strncpy
2bdc0     49 81 02 F6 | 	mov	_var01, arg01
2bdc4     D7 18 48 FB | 	callpa	#(@LR__4581-@LR__4580)>>2,fcache_load_ptr_
2bdc8                 | ' 
2bdc8                 | ' 	dscan = dst;
2bdc8                 | ' 	sscan = src;
2bdc8                 | ' 	count = n;
2bdc8                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2bdc8                 | LR__4580
2bdc8     01 96 86 F1 | 	sub	arg03, #1
2bdcc     00 96 56 F2 | 	cmps	arg03, #0 wc
2bdd0     24 00 90 CD |  if_b	jmp	#LR__4582
2bdd4     4A 7B 02 F6 | 	mov	result1, arg02
2bdd8     01 7A 06 F1 | 	add	result1, #1
2bddc     4A 83 C2 FA | 	rdbyte	_var02, arg02
2bde0     3D 95 02 F6 | 	mov	arg02, result1
2bde4     40 83 42 FC | 	wrbyte	_var02, _var01
2bde8     41 83 E2 F8 | 	getbyte	_var02, _var02, #0
2bdec     07 82 4E F7 | 	zerox	_var02, #7 wz
2bdf0                 | ' 		continue;
2bdf0     01 80 06 F1 | 	add	_var01, #1
2bdf4     D0 FF 9F 5D |  if_ne	jmp	#LR__4580
2bdf8                 | LR__4581
2bdf8                 | LR__4582
2bdf8     D7 0C 48 FB | 	callpa	#(@LR__4584-@LR__4583)>>2,fcache_load_ptr_
2bdfc                 | ' 	while (--count >= 0)
2bdfc                 | LR__4583
2bdfc     01 96 86 F1 | 	sub	arg03, #1
2be00     00 96 56 F2 | 	cmps	arg03, #0 wc
2be04     40 85 02 36 |  if_ae	mov	_var03, _var01
2be08     01 80 06 31 |  if_ae	add	_var01, #1
2be0c     42 01 48 3C |  if_ae	wrbyte	#0, _var03
2be10     E8 FF 9F 3D |  if_ae	jmp	#LR__4583
2be14                 | LR__4584
2be14                 | ' 		*dscan++ = '\0';
2be14                 | ' 	return(dst);
2be14     49 7B 02 F6 | 	mov	result1, arg01
2be18                 | _fatfs_cc_strncpy_ret
2be18     2D 00 64 FD | 	ret
2be1c                 | 
2be1c                 | _fatfs_cc_memcmp
2be1c                 | ' 	for (n = size; n > 0; n--)
2be1c     00 96 0E F2 | 	cmp	arg03, #0 wz
2be20     28 00 90 AD |  if_e	jmp	#LR__4591
2be24                 | LR__4590
2be24     49 81 C2 FA | 	rdbyte	_var01, arg01
2be28     4A 83 C2 FA | 	rdbyte	_var02, arg02
2be2c     41 81 0A F2 | 	cmp	_var01, _var02 wz
2be30     01 92 06 A1 |  if_e	add	arg01, #1
2be34     01 94 06 A1 |  if_e	add	arg02, #1
2be38                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2be38     49 7B C2 5A |  if_ne	rdbyte	result1, arg01
2be3c     4A 83 C2 5A |  if_ne	rdbyte	_var02, arg02
2be40     41 7B 82 51 |  if_ne	sub	result1, _var02
2be44     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2be48     F6 97 6E FB | 	djnz	arg03, #LR__4590
2be4c                 | LR__4591
2be4c                 | ' 
2be4c                 | ' 	return(0);
2be4c     00 7A 06 F6 | 	mov	result1, #0
2be50                 | _fatfs_cc_memcmp_ret
2be50     2D 00 64 FD | 	ret
2be54                 | 
2be54                 | _fatfs_cc_strncmp
2be54     49 81 0A F6 | 	mov	_var01, arg01 wz
2be58     14 00 90 5D |  if_ne	jmp	#LR__4600
2be5c                 | ' 		return scan2 ? -1 : 0;
2be5c     00 94 0E F2 | 	cmp	arg02, #0 wz
2be60     01 82 66 56 |  if_ne	neg	_var02, #1
2be64     00 82 06 A6 |  if_e	mov	_var02, #0
2be68     41 7B 02 F6 | 	mov	result1, _var02
2be6c     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2be70                 | LR__4600
2be70     00 94 0E F2 | 	cmp	arg02, #0 wz
2be74     01 7A 06 A6 |  if_e	mov	result1, #1
2be78     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2be7c     4B 85 02 F6 | 	mov	_var03, arg03
2be80     D7 16 48 FB | 	callpa	#(@LR__4602-@LR__4601)>>2,fcache_load_ptr_
2be84                 | ' 	count = n;
2be84                 | ' 	do {
2be84                 | LR__4601
2be84     40 87 C2 FA | 	rdbyte	_var04, _var01
2be88     4A 89 02 F6 | 	mov	_var05, arg02
2be8c     44 8B C2 FA | 	rdbyte	_var06, _var05
2be90     01 84 86 F1 | 	sub	_var03, #1
2be94     00 84 56 F2 | 	cmps	_var03, #0 wc
2be98     01 80 06 F1 | 	add	_var01, #1
2be9c     01 94 06 F1 | 	add	arg02, #1
2bea0     00 86 0E 32 |  if_ae	cmp	_var04, #0 wz
2bea4     08 00 90 2D |  if_nc_and_z	jmp	#LR__4603
2bea8     45 87 0A 32 |  if_ae	cmp	_var04, _var06 wz
2beac     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4601
2beb0                 | LR__4602
2beb0                 | LR__4603
2beb0     00 84 56 F2 | 	cmps	_var03, #0 wc
2beb4                 | ' 		return(0);
2beb4     00 7A 06 C6 |  if_b	mov	result1, #0
2beb8     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2bebc     45 87 0A F2 | 	cmp	_var04, _var06 wz
2bec0                 | ' 		return(0);
2bec0     00 7A 06 A6 |  if_e	mov	result1, #0
2bec4     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2bec8     00 86 0E F2 | 	cmp	_var04, #0 wz
2becc                 | ' 		return(-1);
2becc     01 7A 66 A6 |  if_e	neg	result1, #1
2bed0     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2bed4     00 8A 0E F2 | 	cmp	_var06, #0 wz
2bed8                 | ' 		return(1);
2bed8     01 7A 06 A6 |  if_e	mov	result1, #1
2bedc                 | ' 		return(c1 - c2);
2bedc     43 7B 02 56 |  if_ne	mov	result1, _var04
2bee0     45 7B 82 51 |  if_ne	sub	result1, _var06
2bee4                 | _fatfs_cc_strncmp_ret
2bee4     2D 00 64 FD | 	ret
2bee8                 | 
2bee8                 | _fatfs_cc_strchr
2bee8                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/libc/string/strchr.c"
2bee8                 | ' 	while ((c = *s++) != (char) charwanted)
2bee8                 | LR__4610
2bee8     49 81 02 F6 | 	mov	_var01, arg01
2beec     40 83 C2 FA | 	rdbyte	_var02, _var01
2bef0     41 85 E2 F8 | 	getbyte	_var03, _var02, #0
2bef4     4A 87 E2 F8 | 	getbyte	_var04, arg02, #0
2bef8     43 85 0A F2 | 	cmp	_var03, _var04 wz
2befc     01 92 06 F1 | 	add	arg01, #1
2bf00     14 00 90 AD |  if_e	jmp	#LR__4611
2bf04     41 85 02 F6 | 	mov	_var03, _var02
2bf08     07 84 4E F7 | 	zerox	_var03, #7 wz
2bf0c     00 7A 06 A6 |  if_e	mov	result1, #0
2bf10     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2bf14     D0 FF 9F FD | 	jmp	#LR__4610
2bf18                 | LR__4611
2bf18                 | ' 	return((char *)--s);
2bf18     01 92 86 F1 | 	sub	arg01, #1
2bf1c     49 7B 02 F6 | 	mov	result1, arg01
2bf20                 | _fatfs_cc_strchr_ret
2bf20     2D 00 64 FD | 	ret
2bf24                 | 
2bf24                 | _fatfs_cc_time
2bf24     01 CA 05 F6 | 	mov	COUNT_, #1
2bf28     E8 00 A0 FD | 	call	#pushregs_
2bf2c     14 F0 07 F1 | 	add	ptra, #20
2bf30     49 A7 02 F6 | 	mov	local01, arg01
2bf34     E7 92 02 F6 | 	mov	arg01, fp
2bf38     08 92 06 F1 | 	add	arg01, #8
2bf3c     00 94 06 F6 | 	mov	arg02, #0
2bf40     A0 5E B0 FD | 	call	#_fatfs_cc_gettimeofday
2bf44     08 CE 05 F1 | 	add	fp, #8
2bf48     E7 7A 02 FB | 	rdlong	result1, fp
2bf4c     08 CE 85 F1 | 	sub	fp, #8
2bf50     00 A6 0E F2 | 	cmp	local01, #0 wz
2bf54     53 7B 62 5C |  if_ne	wrlong	result1, local01
2bf58                 | '         *tp = now;
2bf58                 | '     return now;
2bf58     E7 F0 03 F6 | 	mov	ptra, fp
2bf5c     F2 00 A0 FD | 	call	#popregs_
2bf60                 | _fatfs_cc_time_ret
2bf60     2D 00 64 FD | 	ret
2bf64                 | 
2bf64                 | _fatfs_cc_mktime
2bf64     06 CA 05 F6 | 	mov	COUNT_, #6
2bf68     E8 00 A0 FD | 	call	#pushregs_
2bf6c     49 A7 02 F6 | 	mov	local01, arg01
2bf70     14 A6 06 F1 | 	add	local01, #20
2bf74     53 93 02 FB | 	rdlong	arg01, local01
2bf78     14 A6 86 F1 | 	sub	local01, #20
2bf7c     46 92 56 F2 | 	cmps	arg01, #70 wc
2bf80                 | '                 return (time_t) -1;
2bf80     01 7A 66 C6 |  if_b	neg	result1, #1
2bf84     78 01 90 CD |  if_b	jmp	#LR__4624
2bf88     03 00 00 FF 
2bf8c     6C A9 06 F6 | 	mov	local02, ##1900
2bf90     14 A6 06 F1 | 	add	local01, #20
2bf94     53 7B 02 FB | 	rdlong	result1, local01
2bf98     3D A9 02 F1 | 	add	local02, result1
2bf9c     08 A6 86 F1 | 	sub	local01, #8
2bfa0     53 AB 02 FB | 	rdlong	local03, local01
2bfa4     01 AA 86 F1 | 	sub	local03, #1
2bfa8     04 A6 06 F1 | 	add	local01, #4
2bfac     53 93 02 FB | 	rdlong	arg01, local01
2bfb0     10 A6 86 F1 | 	sub	local01, #16
2bfb4     02 92 66 F0 | 	shl	arg01, #2
2bfb8     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2bfbc     02 00 00 FF 
2bfc0     78 7A 06 F1 | 	add	result1, ##1144
2bfc4     3D 93 02 F1 | 	add	arg01, result1
2bfc8     49 7B 02 FB | 	rdlong	result1, arg01
2bfcc     3D AB 02 F1 | 	add	local03, result1
2bfd0     54 93 02 F6 | 	mov	arg01, local02
2bfd4     B4 5E B0 FD | 	call	#_fatfs_cc__is_leap_year
2bfd8     00 7A 0E F2 | 	cmp	result1, #0 wz
2bfdc     1C 00 90 AD |  if_e	jmp	#LR__4620
2bfe0     00 AC 06 F6 | 	mov	local04, #0
2bfe4     10 A6 06 F1 | 	add	local01, #16
2bfe8     53 7B 02 FB | 	rdlong	result1, local01
2bfec     10 A6 86 F1 | 	sub	local01, #16
2bff0     02 7A 56 F2 | 	cmps	result1, #2 wc
2bff4     01 AC 06 36 |  if_ae	mov	local04, #1
2bff8     04 00 90 FD | 	jmp	#LR__4621
2bffc                 | LR__4620
2bffc     00 AC 06 F6 | 	mov	local04, #0
2c000                 | LR__4621
2c000     04 A6 06 F1 | 	add	local01, #4
2c004     53 93 02 FB | 	rdlong	arg01, local01
2c008     04 A6 86 F1 | 	sub	local01, #4
2c00c     53 AF 02 FB | 	rdlong	local05, local01
2c010     08 A6 06 F1 | 	add	local01, #8
2c014     53 7B 02 FB | 	rdlong	result1, local01
2c018     07 00 00 FF 
2c01c     10 7A 06 FD | 	qmul	result1, ##3600
2c020     56 AB 02 F1 | 	add	local03, local04
2c024     49 AD 02 F6 | 	mov	local04, arg01
2c028     04 AC 66 F0 | 	shl	local04, #4
2c02c     49 AD 82 F1 | 	sub	local04, arg01
2c030     02 AC 66 F0 | 	shl	local04, #2
2c034     56 AF 02 F1 | 	add	local05, local04
2c038     08 A6 86 F1 | 	sub	local01, #8
2c03c     18 AC 62 FD | 	getqx	local04
2c040     A8 00 00 FF 
2c044     80 AB 06 FD | 	qmul	local03, ##86400
2c048     56 AF 02 F1 | 	add	local05, local04
2c04c     54 AB 02 F6 | 	mov	local03, local02
2c050     03 00 00 FF 
2c054     B2 AB 86 F1 | 	sub	local03, ##1970
2c058     18 AC 62 FD | 	getqx	local04
2c05c     99 F0 00 FF 
2c060     80 AB 06 FD | 	qmul	local03, ##31536000
2c064     56 AF 02 F1 | 	add	local05, local04
2c068     54 AB 02 F6 | 	mov	local03, local02
2c06c     03 00 00 FF 
2c070     B1 AB 86 F1 | 	sub	local03, ##1969
2c074     55 B1 52 F6 | 	abs	local06, local03 wc
2c078     02 B0 46 F0 | 	shr	local06, #2
2c07c     58 B1 82 F6 | 	negc	local06, local06
2c080     03 00 00 FF 
2c084     D1 A9 56 F2 | 	cmps	local02, ##2001 wc
2c088     18 AC 62 FD | 	getqx	local04
2c08c     56 AF 02 F1 | 	add	local05, local04
2c090     18 00 90 CD |  if_b	jmp	#LR__4622
2c094     03 00 00 FF 
2c098     D0 A9 86 F1 | 	sub	local02, ##2000
2c09c     54 AD 52 F6 | 	abs	local04, local02 wc
2c0a0     64 AC 16 FD | 	qdiv	local04, #100
2c0a4     18 AC 62 FD | 	getqx	local04
2c0a8     56 B1 A2 F3 | 	sumnc	local06, local04
2c0ac                 | LR__4622
2c0ac     A8 00 00 FF 
2c0b0     80 B1 06 FD | 	qmul	local06, ##86400
2c0b4     18 B0 62 FD | 	getqx	local06
2c0b8     58 AF 02 F1 | 	add	local05, local06
2c0bc     E8 01 B0 FD | 	call	#_fatfs_cc__tzset
2c0c0     02 00 00 FF 
2c0c4     44 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1092
2c0c8     36 B1 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2c0cc     58 AF 02 F1 | 	add	local05, local06
2c0d0     68 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, #104
2c0d4     36 AB 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2c0d8     02 00 00 FF 
2c0dc     AC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1196
2c0e0     01 AA 0E F2 | 	cmp	local03, #1 wz
2c0e4     14 00 90 5D |  if_ne	jmp	#LR__4623
2c0e8     53 93 02 F6 | 	mov	arg01, local01
2c0ec     88 60 B0 FD | 	call	#_fatfs_cc___indst
2c0f0     00 7A 0E F2 | 	cmp	result1, #0 wz
2c0f4     07 00 00 5F 
2c0f8     10 AE 86 51 |  if_ne	sub	local05, ##3600
2c0fc                 | LR__4623
2c0fc                 | '                 s -=  (3600L) ;
2c0fc                 | ' 
2c0fc                 | '         return s;
2c0fc     57 7B 02 F6 | 	mov	result1, local05
2c100                 | LR__4624
2c100     E7 F0 03 F6 | 	mov	ptra, fp
2c104     F2 00 A0 FD | 	call	#popregs_
2c108                 | _fatfs_cc_mktime_ret
2c108     2D 00 64 FD | 	ret
2c10c                 | 
2c10c                 | _fatfs_cc__gmtime_r
2c10c     03 CA 05 F6 | 	mov	COUNT_, #3
2c110     E8 00 A0 FD | 	call	#pushregs_
2c114     49 A7 02 FB | 	rdlong	local01, arg01
2c118     A8 00 00 FF 
2c11c     80 A7 16 FD | 	qdiv	local01, ##86400
2c120     18 7A 62 FD | 	getqx	result1
2c124     04 7A 06 F1 | 	add	result1, #4
2c128     07 7A 16 FD | 	qdiv	result1, #7
2c12c     18 94 06 F1 | 	add	arg02, #24
2c130     D1 7F 27 FF 
2c134     00 A6 16 F2 | 	cmp	local01, ##1325376000 wc
2c138     D1 7F 27 3F 
2c13c     00 A6 86 31 |  if_ae	sub	local01, ##1325376000
2c140     03 00 00 3F 
2c144     DC A9 06 36 |  if_ae	mov	local02, ##2012
2c148     03 00 00 CF 
2c14c     B2 A9 06 C6 |  if_b	mov	local02, ##1970
2c150                 | ' 	  year = 1970;
2c150                 | ' 	}
2c150                 | ' 
2c150                 | ' 	for(;;) {
2c150     19 7A 62 FD | 	getqy	result1
2c154     4A 7B 62 FC | 	wrlong	result1, arg02
2c158     18 94 86 F1 | 	sub	arg02, #24
2c15c                 | LR__4630
2c15c     54 93 02 F6 | 	mov	arg01, local02
2c160     28 5D B0 FD | 	call	#_fatfs_cc__is_leap_year
2c164     00 7A 0E F2 | 	cmp	result1, #0 wz
2c168     42 F1 00 5F 
2c16c     00 AB 06 56 |  if_ne	mov	local03, ##31622400
2c170     99 F0 00 AF 
2c174     80 AB 06 A6 |  if_e	mov	local03, ##31536000
2c178     55 A7 12 F2 | 	cmp	local01, local03 wc
2c17c                 | ' 	    break;
2c17c     01 A8 06 31 |  if_ae	add	local02, #1
2c180     55 A7 82 31 |  if_ae	sub	local01, local03
2c184     D4 FF 9F 3D |  if_ae	jmp	#LR__4630
2c188     A8 00 00 FF 
2c18c     80 A7 16 FD | 	qdiv	local01, ##86400
2c190     54 AB 02 F6 | 	mov	local03, local02
2c194     03 00 00 FF 
2c198     6C AB 86 F1 | 	sub	local03, ##1900
2c19c     14 94 06 F1 | 	add	arg02, #20
2c1a0     4A AB 62 FC | 	wrlong	local03, arg02
2c1a4     08 94 06 F1 | 	add	arg02, #8
2c1a8     54 93 02 F6 | 	mov	arg01, local02
2c1ac     18 A8 62 FD | 	getqx	local02
2c1b0     4A A9 62 FC | 	wrlong	local02, arg02
2c1b4     1C 94 86 F1 | 	sub	arg02, #28
2c1b8     D0 5C B0 FD | 	call	#_fatfs_cc__is_leap_year
2c1bc     00 7A 0E F2 | 	cmp	result1, #0 wz
2c1c0     1D AA 06 56 |  if_ne	mov	local03, #29
2c1c4     1C AA 06 A6 |  if_e	mov	local03, #28
2c1c8     02 00 00 FF 
2c1cc     4C 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1100
2c1d0     36 AB 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2c1d4     02 00 00 FF 
2c1d8     4C 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1100
2c1dc                 | ' 
2c1dc                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2c1dc                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2c1dc     00 92 06 F6 | 	mov	arg01, #0
2c1e0     D7 26 48 FB | 	callpa	#(@LR__4632-@LR__4631)>>2,fcache_load_ptr_
2c1e4                 | LR__4631
2c1e4     49 AB 02 F6 | 	mov	local03, arg01
2c1e8     02 AA 66 F0 | 	shl	local03, #2
2c1ec     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2c1f0     02 00 00 FF 
2c1f4     48 7A 06 F1 | 	add	result1, ##1096
2c1f8     3D AB 02 F1 | 	add	local03, result1
2c1fc     55 AB 02 FB | 	rdlong	local03, local03
2c200     55 A9 52 F2 | 	cmps	local02, local03 wc
2c204     28 00 90 CD |  if_b	jmp	#LR__4633
2c208     49 7B 02 F6 | 	mov	result1, arg01
2c20c     02 7A 66 F0 | 	shl	result1, #2
2c210     36 AB 02 F6 | 	mov	local03, ptr__fatfs_cc_dat__
2c214     02 00 00 FF 
2c218     48 AA 06 F1 | 	add	local03, ##1096
2c21c     55 7B 02 F1 | 	add	result1, local03
2c220     3D 7B 02 FB | 	rdlong	result1, result1
2c224     3D A9 82 F1 | 	sub	local02, result1
2c228     01 92 06 F1 | 	add	arg01, #1
2c22c     B4 FF 9F FD | 	jmp	#LR__4631
2c230                 | LR__4632
2c230                 | LR__4633
2c230     A8 00 00 FF 
2c234     80 A7 16 FD | 	qdiv	local01, ##86400
2c238     10 94 06 F1 | 	add	arg02, #16
2c23c     4A 93 62 FC | 	wrlong	arg01, arg02
2c240     01 A8 06 F1 | 	add	local02, #1
2c244     04 94 86 F1 | 	sub	arg02, #4
2c248     4A A9 62 FC | 	wrlong	local02, arg02
2c24c     19 A6 62 FD | 	getqy	local01
2c250     07 00 00 FF 
2c254     10 A6 16 FD | 	qdiv	local01, ##3600
2c258     18 AA 62 FD | 	getqx	local03
2c25c     07 00 00 FF 
2c260     10 A6 16 FD | 	qdiv	local01, ##3600
2c264     04 94 86 F1 | 	sub	arg02, #4
2c268     4A AB 62 FC | 	wrlong	local03, arg02
2c26c     19 A6 62 FD | 	getqy	local01
2c270     3C A6 16 FD | 	qdiv	local01, #60
2c274     18 AA 62 FD | 	getqx	local03
2c278     3C A6 16 FD | 	qdiv	local01, #60
2c27c     04 94 86 F1 | 	sub	arg02, #4
2c280     4A AB 62 FC | 	wrlong	local03, arg02
2c284     04 94 86 F1 | 	sub	arg02, #4
2c288                 | '         stm->tm_isdst = 0;
2c288                 | ' 
2c288                 | ' ;
2c288                 | '         return stm;
2c288     4A 7B 02 F6 | 	mov	result1, arg02
2c28c     19 AA 62 FD | 	getqy	local03
2c290     4A AB 62 FC | 	wrlong	local03, arg02
2c294     20 94 06 F1 | 	add	arg02, #32
2c298     4A 01 68 FC | 	wrlong	#0, arg02
2c29c     E7 F0 03 F6 | 	mov	ptra, fp
2c2a0     F2 00 A0 FD | 	call	#popregs_
2c2a4                 | _fatfs_cc__gmtime_r_ret
2c2a4     2D 00 64 FD | 	ret
2c2a8                 | 
2c2a8                 | _fatfs_cc__tzset
2c2a8     92 01 00 FF 
2c2ac     04 93 06 F6 | 	mov	arg01, ##@LR__5482
2c2b0     0C 50 B0 FD | 	call	#_fatfs_cc_getenv
2c2b4     3D 93 02 F6 | 	mov	arg01, result1
2c2b8     36 95 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2c2bc     02 00 00 FF 
2c2c0     AC 94 06 F1 | 	add	arg02, ##1196
2c2c4     14 5C B0 FD | 	call	#_fatfs_cc___tzoffset
2c2c8     02 00 00 FF 
2c2cc     44 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1092
2c2d0     36 7B 62 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2c2d4     02 00 00 FF 
2c2d8     44 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1092
2c2dc                 | _fatfs_cc__tzset_ret
2c2dc     2D 00 64 FD | 	ret
2c2e0                 | 
2c2e0                 | _fatfs_cc_disk_read
2c2e0     09 CA 05 F6 | 	mov	COUNT_, #9
2c2e4     E8 00 A0 FD | 	call	#pushregs_
2c2e8     4A AF 02 F6 | 	mov	local05, arg02
2c2ec     4C B1 02 F6 | 	mov	local06, arg04
2c2f0     4B 93 02 F6 | 	mov	arg01, arg03
2c2f4     00 94 06 F6 | 	mov	arg02, #0
2c2f8     09 96 06 F6 | 	mov	arg03, #9
2c2fc     00 98 06 F6 | 	mov	arg04, #0
2c300     94 A8 BF FD | 	call	#__system___int64_shl
2c304     3D A7 02 F6 | 	mov	local01, result1
2c308     3E A9 02 F6 | 	mov	local02, result2
2c30c     01 00 00 FF 
2c310     10 64 06 F1 | 	add	objptr, ##528
2c314     32 7D 0A FB | 	rdlong	result2, objptr wz
2c318     01 00 00 FF 
2c31c     10 64 86 F1 | 	sub	objptr, ##528
2c320                 | '         return RES_NOTRDY;
2c320     03 7A 06 A6 |  if_e	mov	result1, #3
2c324     E8 00 90 AD |  if_e	jmp	#LR__4640
2c328     53 95 02 F6 | 	mov	arg02, local01
2c32c     54 97 02 F6 | 	mov	arg03, local02
2c330     01 00 00 FF 
2c334     10 64 06 F1 | 	add	objptr, ##528
2c338     32 93 02 FB | 	rdlong	arg01, objptr
2c33c     49 99 02 F6 | 	mov	arg04, arg01
2c340     30 98 06 F1 | 	add	arg04, #48
2c344     4C B3 02 FB | 	rdlong	local07, arg04
2c348     59 B5 02 F6 | 	mov	local08, local07
2c34c     13 B2 46 F7 | 	zerox	local07, #19
2c350     14 B4 46 F0 | 	shr	local08, #20
2c354     02 B4 66 F0 | 	shl	local08, #2
2c358     2D B5 02 F1 | 	add	local08, __methods__
2c35c     5A B5 02 FB | 	rdlong	local08, local08
2c360     01 00 00 FF 
2c364     10 64 86 F1 | 	sub	objptr, ##528
2c368     00 98 06 F6 | 	mov	arg04, #0
2c36c     32 B7 02 F6 | 	mov	local09, objptr
2c370     59 65 02 F6 | 	mov	objptr, local07
2c374     2D B4 62 FD | 	call	local08
2c378     5B 65 02 F6 | 	mov	objptr, local09
2c37c     3D AB 02 F6 | 	mov	local03, result1
2c380     3E AD 02 F6 | 	mov	local04, result2
2c384     55 93 02 F6 | 	mov	arg01, local03
2c388     56 95 02 F6 | 	mov	arg02, local04
2c38c     53 97 02 F6 | 	mov	arg03, local01
2c390     54 99 02 F6 | 	mov	arg04, local02
2c394     00 7A 06 F6 | 	mov	result1, #0
2c398     4B 93 1A F2 | 	cmp	arg01, arg03 wcz
2c39c     4C 95 7A F2 | 	cmpsx	arg02, arg04 wcz
2c3a0     01 7A 86 56 |  if_ne	negc	result1, #1
2c3a4     00 7A 0E F2 | 	cmp	result1, #0 wz
2c3a8                 | '         return RES_ERROR;
2c3a8     01 7A 06 56 |  if_ne	mov	result1, #1
2c3ac     60 00 90 5D |  if_ne	jmp	#LR__4640
2c3b0     09 B0 66 F0 | 	shl	local06, #9
2c3b4     01 00 00 FF 
2c3b8     10 64 06 F1 | 	add	objptr, ##528
2c3bc     32 93 02 FB | 	rdlong	arg01, objptr
2c3c0     49 AB 02 F6 | 	mov	local03, arg01
2c3c4     14 AA 06 F1 | 	add	local03, #20
2c3c8     55 AB 02 FB | 	rdlong	local03, local03
2c3cc     55 B7 02 F6 | 	mov	local09, local03
2c3d0     13 B6 46 F7 | 	zerox	local09, #19
2c3d4     14 AA 46 F0 | 	shr	local03, #20
2c3d8     02 AA 66 F0 | 	shl	local03, #2
2c3dc     2D AB 02 F1 | 	add	local03, __methods__
2c3e0     55 AB 02 FB | 	rdlong	local03, local03
2c3e4     01 00 00 FF 
2c3e8     10 64 86 F1 | 	sub	objptr, ##528
2c3ec     57 95 02 F6 | 	mov	arg02, local05
2c3f0     58 97 02 F6 | 	mov	arg03, local06
2c3f4     32 B5 02 F6 | 	mov	local08, objptr
2c3f8     5B 65 02 F6 | 	mov	objptr, local09
2c3fc     2D AA 62 FD | 	call	local03
2c400     5A 65 02 F6 | 	mov	objptr, local08
2c404     58 7B 0A F2 | 	cmp	result1, local06 wz
2c408                 | '         return RES_ERROR;
2c408     01 7A 06 56 |  if_ne	mov	result1, #1
2c40c                 | '     }
2c40c                 | '     return RES_OK;
2c40c     00 7A 06 A6 |  if_e	mov	result1, #0
2c410                 | LR__4640
2c410     E7 F0 03 F6 | 	mov	ptra, fp
2c414     F2 00 A0 FD | 	call	#popregs_
2c418                 | _fatfs_cc_disk_read_ret
2c418     2D 00 64 FD | 	ret
2c41c                 | 
2c41c                 | _fatfs_cc_disk_write
2c41c     09 CA 05 F6 | 	mov	COUNT_, #9
2c420     E8 00 A0 FD | 	call	#pushregs_
2c424     4A AF 02 F6 | 	mov	local05, arg02
2c428     4C B1 02 F6 | 	mov	local06, arg04
2c42c     4B 93 02 F6 | 	mov	arg01, arg03
2c430     00 94 06 F6 | 	mov	arg02, #0
2c434     09 96 06 F6 | 	mov	arg03, #9
2c438     00 98 06 F6 | 	mov	arg04, #0
2c43c     58 A7 BF FD | 	call	#__system___int64_shl
2c440     3D A7 02 F6 | 	mov	local01, result1
2c444     3E A9 02 F6 | 	mov	local02, result2
2c448     01 00 00 FF 
2c44c     10 64 06 F1 | 	add	objptr, ##528
2c450     32 7D 0A FB | 	rdlong	result2, objptr wz
2c454     01 00 00 FF 
2c458     10 64 86 F1 | 	sub	objptr, ##528
2c45c                 | '         return RES_NOTRDY;
2c45c     03 7A 06 A6 |  if_e	mov	result1, #3
2c460     E8 00 90 AD |  if_e	jmp	#LR__4650
2c464     53 95 02 F6 | 	mov	arg02, local01
2c468     54 97 02 F6 | 	mov	arg03, local02
2c46c     01 00 00 FF 
2c470     10 64 06 F1 | 	add	objptr, ##528
2c474     32 93 02 FB | 	rdlong	arg01, objptr
2c478     49 99 02 F6 | 	mov	arg04, arg01
2c47c     30 98 06 F1 | 	add	arg04, #48
2c480     4C B3 02 FB | 	rdlong	local07, arg04
2c484     59 B5 02 F6 | 	mov	local08, local07
2c488     13 B2 46 F7 | 	zerox	local07, #19
2c48c     14 B4 46 F0 | 	shr	local08, #20
2c490     02 B4 66 F0 | 	shl	local08, #2
2c494     2D B5 02 F1 | 	add	local08, __methods__
2c498     5A B5 02 FB | 	rdlong	local08, local08
2c49c     01 00 00 FF 
2c4a0     10 64 86 F1 | 	sub	objptr, ##528
2c4a4     00 98 06 F6 | 	mov	arg04, #0
2c4a8     32 B7 02 F6 | 	mov	local09, objptr
2c4ac     59 65 02 F6 | 	mov	objptr, local07
2c4b0     2D B4 62 FD | 	call	local08
2c4b4     5B 65 02 F6 | 	mov	objptr, local09
2c4b8     3D AB 02 F6 | 	mov	local03, result1
2c4bc     3E AD 02 F6 | 	mov	local04, result2
2c4c0     55 93 02 F6 | 	mov	arg01, local03
2c4c4     56 95 02 F6 | 	mov	arg02, local04
2c4c8     53 97 02 F6 | 	mov	arg03, local01
2c4cc     54 99 02 F6 | 	mov	arg04, local02
2c4d0     00 7A 06 F6 | 	mov	result1, #0
2c4d4     4B 93 1A F2 | 	cmp	arg01, arg03 wcz
2c4d8     4C 95 7A F2 | 	cmpsx	arg02, arg04 wcz
2c4dc     01 7A 86 56 |  if_ne	negc	result1, #1
2c4e0     00 7A 0E F2 | 	cmp	result1, #0 wz
2c4e4                 | '         return RES_ERROR;
2c4e4     01 7A 06 56 |  if_ne	mov	result1, #1
2c4e8     60 00 90 5D |  if_ne	jmp	#LR__4650
2c4ec     09 B0 66 F0 | 	shl	local06, #9
2c4f0     01 00 00 FF 
2c4f4     10 64 06 F1 | 	add	objptr, ##528
2c4f8     32 93 02 FB | 	rdlong	arg01, objptr
2c4fc     49 AB 02 F6 | 	mov	local03, arg01
2c500     18 AA 06 F1 | 	add	local03, #24
2c504     55 AB 02 FB | 	rdlong	local03, local03
2c508     55 B7 02 F6 | 	mov	local09, local03
2c50c     13 B6 46 F7 | 	zerox	local09, #19
2c510     14 AA 46 F0 | 	shr	local03, #20
2c514     02 AA 66 F0 | 	shl	local03, #2
2c518     2D AB 02 F1 | 	add	local03, __methods__
2c51c     55 AB 02 FB | 	rdlong	local03, local03
2c520     01 00 00 FF 
2c524     10 64 86 F1 | 	sub	objptr, ##528
2c528     57 95 02 F6 | 	mov	arg02, local05
2c52c     58 97 02 F6 | 	mov	arg03, local06
2c530     32 B5 02 F6 | 	mov	local08, objptr
2c534     5B 65 02 F6 | 	mov	objptr, local09
2c538     2D AA 62 FD | 	call	local03
2c53c     5A 65 02 F6 | 	mov	objptr, local08
2c540     58 7B 0A F2 | 	cmp	result1, local06 wz
2c544                 | '         return RES_ERROR;
2c544     01 7A 06 56 |  if_ne	mov	result1, #1
2c548                 | '     }
2c548                 | '     return RES_OK;
2c548     00 7A 06 A6 |  if_e	mov	result1, #0
2c54c                 | LR__4650
2c54c     E7 F0 03 F6 | 	mov	ptra, fp
2c550     F2 00 A0 FD | 	call	#popregs_
2c554                 | _fatfs_cc_disk_write_ret
2c554     2D 00 64 FD | 	ret
2c558                 | 
2c558                 | _fatfs_cc_disk_ioctl
2c558     03 CA 05 F6 | 	mov	COUNT_, #3
2c55c     E8 00 A0 FD | 	call	#pushregs_
2c560     01 00 00 FF 
2c564     10 64 06 F1 | 	add	objptr, ##528
2c568     32 93 0A FB | 	rdlong	arg01, objptr wz
2c56c     01 00 00 FF 
2c570     10 64 86 F1 | 	sub	objptr, ##528
2c574                 | '         return RES_NOTRDY;
2c574     03 7A 06 A6 |  if_e	mov	result1, #3
2c578     58 00 90 AD |  if_e	jmp	#LR__4660
2c57c     01 00 00 FF 
2c580     10 64 06 F1 | 	add	objptr, ##528
2c584     32 93 02 FB | 	rdlong	arg01, objptr
2c588     49 A7 02 F6 | 	mov	local01, arg01
2c58c     28 A6 06 F1 | 	add	local01, #40
2c590     53 A7 02 FB | 	rdlong	local01, local01
2c594     53 A9 02 F6 | 	mov	local02, local01
2c598     13 A8 46 F7 | 	zerox	local02, #19
2c59c     14 A6 46 F0 | 	shr	local01, #20
2c5a0     02 A6 66 F0 | 	shl	local01, #2
2c5a4     2D A7 02 F1 | 	add	local01, __methods__
2c5a8     53 A7 02 FB | 	rdlong	local01, local01
2c5ac     01 00 00 FF 
2c5b0     10 64 86 F1 | 	sub	objptr, ##528
2c5b4     4A 95 E2 F8 | 	getbyte	arg02, arg02, #0
2c5b8     32 AB 02 F6 | 	mov	local03, objptr
2c5bc     54 65 02 F6 | 	mov	objptr, local02
2c5c0     2D A6 62 FD | 	call	local01
2c5c4     55 65 02 F6 | 	mov	objptr, local03
2c5c8     00 7A 0E F2 | 	cmp	result1, #0 wz
2c5cc                 | '         return RES_ERROR;
2c5cc     01 7A 06 56 |  if_ne	mov	result1, #1
2c5d0                 | '     return RES_OK;
2c5d0     00 7A 06 A6 |  if_e	mov	result1, #0
2c5d4                 | LR__4660
2c5d4     E7 F0 03 F6 | 	mov	ptra, fp
2c5d8     F2 00 A0 FD | 	call	#popregs_
2c5dc                 | _fatfs_cc_disk_ioctl_ret
2c5dc     2D 00 64 FD | 	ret
2c5e0                 | 
2c5e0                 | _fatfs_cc_tchar2uni
2c5e0     49 81 02 FB | 	rdlong	_var01, arg01
2c5e4     40 83 02 F6 | 	mov	_var02, _var01
2c5e8     01 80 06 F1 | 	add	_var01, #1
2c5ec     40 85 02 F6 | 	mov	_var03, _var01
2c5f0     41 87 C2 FA | 	rdbyte	_var04, _var02
2c5f4     80 86 CE F7 | 	test	_var04, #128 wz
2c5f8     E8 00 90 AD |  if_e	jmp	#LR__4677
2c5fc     43 89 02 F6 | 	mov	_var05, _var04
2c600     E0 88 06 F5 | 	and	_var05, #224
2c604     C0 88 0E F2 | 	cmp	_var05, #192 wz
2c608     1F 86 06 A5 |  if_e	and	_var04, #31
2c60c     01 8A 06 A6 |  if_e	mov	_var06, #1
2c610     34 00 90 AD |  if_e	jmp	#LR__4671
2c614     43 89 02 F6 | 	mov	_var05, _var04
2c618     F0 88 06 F5 | 	and	_var05, #240
2c61c     E0 88 0E F2 | 	cmp	_var05, #224 wz
2c620     43 87 42 A8 |  if_e	getnib	_var04, _var04, #0
2c624     02 8A 06 A6 |  if_e	mov	_var06, #2
2c628     1C 00 90 AD |  if_e	jmp	#LR__4670
2c62c     43 89 02 F6 | 	mov	_var05, _var04
2c630     F8 88 06 F5 | 	and	_var05, #248
2c634     F0 88 0E F2 | 	cmp	_var05, #240 wz
2c638     07 86 06 A5 |  if_e	and	_var04, #7
2c63c     03 8A 06 A6 |  if_e	mov	_var06, #3
2c640                 | ' 			return 0xFFFFFFFF;
2c640     01 7A 66 56 |  if_ne	neg	result1, #1
2c644     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2c648                 | LR__4670
2c648                 | LR__4671
2c648                 | ' 		}
2c648                 | ' 		do {
2c648                 | LR__4672
2c648     42 8D C2 FA | 	rdbyte	_var07, _var03
2c64c     46 89 E2 F8 | 	getbyte	_var05, _var07, #0
2c650     C0 88 06 F5 | 	and	_var05, #192
2c654     80 88 0E F2 | 	cmp	_var05, #128 wz
2c658     01 84 06 F1 | 	add	_var03, #1
2c65c     01 7A 66 56 |  if_ne	neg	result1, #1
2c660     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2c664     06 86 66 F0 | 	shl	_var04, #6
2c668     46 83 E2 F8 | 	getbyte	_var02, _var07, #0
2c66c     3F 82 06 F5 | 	and	_var02, #63
2c670     41 87 42 F5 | 	or	_var04, _var02
2c674     F4 8B 6E FB | 	djnz	_var06, #LR__4672
2c678     80 86 16 F2 | 	cmp	_var04, #128 wc
2c67c     24 00 90 CD |  if_b	jmp	#LR__4674
2c680     6C 00 00 FF 
2c684     00 86 16 F2 | 	cmp	_var04, ##55296 wc
2c688     0C 00 90 CD |  if_b	jmp	#LR__4673
2c68c     70 00 00 FF 
2c690     00 86 16 F2 | 	cmp	_var04, ##57344 wc
2c694     0C 00 90 CD |  if_b	jmp	#LR__4674
2c698                 | LR__4673
2c698     80 08 00 FF 
2c69c     00 86 16 F2 | 	cmp	_var04, ##1114112 wc
2c6a0     08 00 90 CD |  if_b	jmp	#LR__4675
2c6a4                 | LR__4674
2c6a4     01 7A 66 F6 | 	neg	result1, #1
2c6a8     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2c6ac                 | LR__4675
2c6ac     80 00 00 FF 
2c6b0     00 86 16 F2 | 	cmp	_var04, ##65536 wc
2c6b4     2C 00 90 CD |  if_b	jmp	#LR__4676
2c6b8     43 83 02 F6 | 	mov	_var02, _var04
2c6bc     80 00 00 FF 
2c6c0     00 82 86 F1 | 	sub	_var02, ##65536
2c6c4     06 82 66 F0 | 	shl	_var02, #6
2c6c8     80 FF 01 FF 
2c6cc     00 82 06 F5 | 	and	_var02, ##67043328
2c6d0     6E 00 6C FF 
2c6d4     00 88 06 F6 | 	mov	_var05, ##-671032320
2c6d8     41 89 42 F5 | 	or	_var05, _var02
2c6dc     09 86 46 F7 | 	zerox	_var04, #9
2c6e0     44 87 42 F5 | 	or	_var04, _var05
2c6e4                 | LR__4676
2c6e4                 | LR__4677
2c6e4     49 85 62 FC | 	wrlong	_var03, arg01
2c6e8                 | ' 	}
2c6e8                 | ' #line 811 "ff.c"
2c6e8                 | ' 	*str = p;
2c6e8                 | ' 	return uc;
2c6e8     43 7B 02 F6 | 	mov	result1, _var04
2c6ec                 | _fatfs_cc_tchar2uni_ret
2c6ec     2D 00 64 FD | 	ret
2c6f0                 | 
2c6f0                 | _fatfs_cc_put_utf
2c6f0     80 92 16 F2 | 	cmp	arg01, #128 wc
2c6f4     18 00 90 3D |  if_ae	jmp	#LR__4680
2c6f8     01 96 16 F2 | 	cmp	arg03, #1 wc
2c6fc     00 7A 06 C6 |  if_b	mov	result1, #0
2c700     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c704     4A 93 42 FC | 	wrbyte	arg01, arg02
2c708                 | ' 		*buf = (TCHAR)chr;
2c708                 | ' 		return 1;
2c708     01 7A 06 F6 | 	mov	result1, #1
2c70c     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c710                 | LR__4680
2c710     04 00 00 FF 
2c714     00 92 16 F2 | 	cmp	arg01, ##2048 wc
2c718     40 00 90 3D |  if_ae	jmp	#LR__4681
2c71c     02 96 16 F2 | 	cmp	arg03, #2 wc
2c720     00 7A 06 C6 |  if_b	mov	result1, #0
2c724     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c728     49 7B 02 F6 | 	mov	result1, arg01
2c72c     06 7A 46 F0 | 	shr	result1, #6
2c730     1F 7A 06 F5 | 	and	result1, #31
2c734     C0 96 06 F6 | 	mov	arg03, #192
2c738     3D 97 42 F5 | 	or	arg03, result1
2c73c     4A 97 42 FC | 	wrbyte	arg03, arg02
2c740     01 94 06 F1 | 	add	arg02, #1
2c744     3F 92 06 F5 | 	and	arg01, #63
2c748     80 7A 06 F6 | 	mov	result1, #128
2c74c     49 7B 42 F5 | 	or	result1, arg01
2c750     4A 7B 42 FC | 	wrbyte	result1, arg02
2c754                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2c754                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c754                 | ' 		return 2;
2c754     02 7A 06 F6 | 	mov	result1, #2
2c758     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c75c                 | LR__4681
2c75c     80 00 00 FF 
2c760     00 92 16 F2 | 	cmp	arg01, ##65536 wc
2c764     70 00 90 3D |  if_ae	jmp	#LR__4684
2c768     03 96 16 F2 | 	cmp	arg03, #3 wc
2c76c     18 00 90 CD |  if_b	jmp	#LR__4682
2c770     6C 00 00 FF 
2c774     00 92 16 F2 | 	cmp	arg01, ##55296 wc
2c778     14 00 90 CD |  if_b	jmp	#LR__4683
2c77c     70 00 00 FF 
2c780     00 92 16 F2 | 	cmp	arg01, ##57344 wc
2c784     08 00 90 3D |  if_ae	jmp	#LR__4683
2c788                 | LR__4682
2c788     00 7A 06 F6 | 	mov	result1, #0
2c78c     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c790                 | LR__4683
2c790     49 7B 5A F8 | 	getnib	result1, arg01, #3
2c794     E0 96 06 F6 | 	mov	arg03, #224
2c798     3D 97 42 F5 | 	or	arg03, result1
2c79c     4A 97 42 FC | 	wrbyte	arg03, arg02
2c7a0     01 94 06 F1 | 	add	arg02, #1
2c7a4     49 7B 02 F6 | 	mov	result1, arg01
2c7a8     06 7A 46 F0 | 	shr	result1, #6
2c7ac     3F 7A 06 F5 | 	and	result1, #63
2c7b0     80 96 06 F6 | 	mov	arg03, #128
2c7b4     3D 97 42 F5 | 	or	arg03, result1
2c7b8     4A 97 42 FC | 	wrbyte	arg03, arg02
2c7bc     01 94 06 F1 | 	add	arg02, #1
2c7c0     3F 92 06 F5 | 	and	arg01, #63
2c7c4     80 7A 06 F6 | 	mov	result1, #128
2c7c8     49 7B 42 F5 | 	or	result1, arg01
2c7cc     4A 7B 42 FC | 	wrbyte	result1, arg02
2c7d0                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2c7d0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2c7d0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c7d0                 | ' 		return 3;
2c7d0     03 7A 06 F6 | 	mov	result1, #3
2c7d4     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c7d8                 | LR__4684
2c7d8     04 96 16 F2 | 	cmp	arg03, #4 wc
2c7dc     00 7A 06 C6 |  if_b	mov	result1, #0
2c7e0     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c7e4     49 81 02 F6 | 	mov	_var01, arg01
2c7e8     E0 81 06 F4 | 	bitl	_var01, #480
2c7ec     00 00 6C FF 
2c7f0     00 80 86 F1 | 	sub	_var01, ##-671088640
2c7f4     06 80 46 F0 | 	shr	_var01, #6
2c7f8     49 93 32 F9 | 	getword	arg01, arg01, #0
2c7fc     6E 00 00 FF 
2c800     00 92 86 F1 | 	sub	arg01, ##56320
2c804     00 08 00 FF 
2c808     00 80 16 F2 | 	cmp	_var01, ##1048576 wc
2c80c     02 00 00 CF 
2c810     00 92 16 C2 |  if_b	cmp	arg01, ##1024 wc
2c814     00 7A 06 36 |  if_ae	mov	result1, #0
2c818     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2c81c     49 81 42 F5 | 	or	_var01, arg01
2c820     80 00 00 FF 
2c824     00 80 06 F1 | 	add	_var01, ##65536
2c828     40 7B 02 F6 | 	mov	result1, _var01
2c82c     12 7A 46 F0 | 	shr	result1, #18
2c830     07 7A 06 F5 | 	and	result1, #7
2c834     F0 96 06 F6 | 	mov	arg03, #240
2c838     3D 97 42 F5 | 	or	arg03, result1
2c83c     4A 97 42 FC | 	wrbyte	arg03, arg02
2c840     01 94 06 F1 | 	add	arg02, #1
2c844     40 7B 02 F6 | 	mov	result1, _var01
2c848     0C 7A 46 F0 | 	shr	result1, #12
2c84c     3F 7A 06 F5 | 	and	result1, #63
2c850     80 96 06 F6 | 	mov	arg03, #128
2c854     3D 97 42 F5 | 	or	arg03, result1
2c858     4A 97 42 FC | 	wrbyte	arg03, arg02
2c85c     01 94 06 F1 | 	add	arg02, #1
2c860     40 7B 02 F6 | 	mov	result1, _var01
2c864     06 7A 46 F0 | 	shr	result1, #6
2c868     3F 7A 06 F5 | 	and	result1, #63
2c86c     80 96 06 F6 | 	mov	arg03, #128
2c870     3D 97 42 F5 | 	or	arg03, result1
2c874     4A 97 42 FC | 	wrbyte	arg03, arg02
2c878     01 94 06 F1 | 	add	arg02, #1
2c87c     3F 80 06 F5 | 	and	_var01, #63
2c880     80 7A 06 F6 | 	mov	result1, #128
2c884     40 7B 42 F5 | 	or	result1, _var01
2c888     4A 7B 42 FC | 	wrbyte	result1, arg02
2c88c                 | ' 	chr = (hc | chr) + 0x10000;
2c88c                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2c88c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2c88c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2c88c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c88c                 | ' 	return 4;
2c88c     04 7A 06 F6 | 	mov	result1, #4
2c890                 | _fatfs_cc_put_utf_ret
2c890     2D 00 64 FD | 	ret
2c894                 | 
2c894                 | _fatfs_cc_sync_window
2c894     02 CA 05 F6 | 	mov	COUNT_, #2
2c898     E8 00 A0 FD | 	call	#pushregs_
2c89c     49 A7 02 F6 | 	mov	local01, arg01
2c8a0     00 A8 06 F6 | 	mov	local02, #0
2c8a4     03 A6 06 F1 | 	add	local01, #3
2c8a8     53 7B CA FA | 	rdbyte	result1, local01 wz
2c8ac     03 A6 86 F1 | 	sub	local01, #3
2c8b0     A4 00 90 AD |  if_e	jmp	#LR__4692
2c8b4     01 A6 06 F1 | 	add	local01, #1
2c8b8     53 93 C2 FA | 	rdbyte	arg01, local01
2c8bc     33 A6 06 F1 | 	add	local01, #51
2c8c0     53 95 02 F6 | 	mov	arg02, local01
2c8c4     04 A6 86 F1 | 	sub	local01, #4
2c8c8     53 97 02 FB | 	rdlong	arg03, local01
2c8cc     30 A6 86 F1 | 	sub	local01, #48
2c8d0     01 98 06 F6 | 	mov	arg04, #1
2c8d4     44 FB BF FD | 	call	#_fatfs_cc_disk_write
2c8d8     00 7A 0E F2 | 	cmp	result1, #0 wz
2c8dc     74 00 90 5D |  if_ne	jmp	#LR__4690
2c8e0     03 A6 06 F1 | 	add	local01, #3
2c8e4     53 01 48 FC | 	wrbyte	#0, local01
2c8e8     2D A6 06 F1 | 	add	local01, #45
2c8ec     53 7B 02 FB | 	rdlong	result1, local01
2c8f0     0C A6 86 F1 | 	sub	local01, #12
2c8f4     53 99 02 FB | 	rdlong	arg04, local01
2c8f8     4C 7B 82 F1 | 	sub	result1, arg04
2c8fc     08 A6 86 F1 | 	sub	local01, #8
2c900     53 99 02 FB | 	rdlong	arg04, local01
2c904     1C A6 86 F1 | 	sub	local01, #28
2c908     4C 7B 12 F2 | 	cmp	result1, arg04 wc
2c90c     48 00 90 3D |  if_ae	jmp	#LR__4691
2c910     02 A6 06 F1 | 	add	local01, #2
2c914     53 99 C2 FA | 	rdbyte	arg04, local01
2c918     02 A6 86 F1 | 	sub	local01, #2
2c91c     02 98 0E F2 | 	cmp	arg04, #2 wz
2c920     34 00 90 5D |  if_ne	jmp	#LR__4691
2c924     01 A6 06 F1 | 	add	local01, #1
2c928     53 93 C2 FA | 	rdbyte	arg01, local01
2c92c     33 A6 06 F1 | 	add	local01, #51
2c930     53 95 02 F6 | 	mov	arg02, local01
2c934     04 A6 86 F1 | 	sub	local01, #4
2c938     53 97 02 FB | 	rdlong	arg03, local01
2c93c     14 A6 86 F1 | 	sub	local01, #20
2c940     53 A7 02 FB | 	rdlong	local01, local01
2c944     53 97 02 F1 | 	add	arg03, local01
2c948     01 98 06 F6 | 	mov	arg04, #1
2c94c     CC FA BF FD | 	call	#_fatfs_cc_disk_write
2c950     04 00 90 FD | 	jmp	#LR__4691
2c954                 | LR__4690
2c954     01 A8 06 F6 | 	mov	local02, #1
2c958                 | LR__4691
2c958                 | LR__4692
2c958                 | ' 			res = FR_DISK_ERR;
2c958                 | ' 		}
2c958                 | ' 	}
2c958                 | ' 	return res;
2c958     54 7B 02 F6 | 	mov	result1, local02
2c95c     E7 F0 03 F6 | 	mov	ptra, fp
2c960     F2 00 A0 FD | 	call	#popregs_
2c964                 | _fatfs_cc_sync_window_ret
2c964     2D 00 64 FD | 	ret
2c968                 | 
2c968                 | _fatfs_cc_move_window
2c968     03 CA 05 F6 | 	mov	COUNT_, #3
2c96c     E8 00 A0 FD | 	call	#pushregs_
2c970     49 A7 02 F6 | 	mov	local01, arg01
2c974     4A A9 02 F6 | 	mov	local02, arg02
2c978     00 AA 06 F6 | 	mov	local03, #0
2c97c     30 A6 06 F1 | 	add	local01, #48
2c980     53 99 02 FB | 	rdlong	arg04, local01
2c984     30 A6 86 F1 | 	sub	local01, #48
2c988     4C A9 0A F2 | 	cmp	local02, arg04 wz
2c98c     40 00 90 AD |  if_e	jmp	#LR__4701
2c990     53 93 02 F6 | 	mov	arg01, local01
2c994     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2c998     3D AB 0A F6 | 	mov	local03, result1 wz
2c99c     30 00 90 5D |  if_ne	jmp	#LR__4700
2c9a0     01 A6 06 F1 | 	add	local01, #1
2c9a4     53 93 C2 FA | 	rdbyte	arg01, local01
2c9a8     33 A6 06 F1 | 	add	local01, #51
2c9ac     53 95 02 F6 | 	mov	arg02, local01
2c9b0     54 97 02 F6 | 	mov	arg03, local02
2c9b4     01 98 06 F6 | 	mov	arg04, #1
2c9b8     24 F9 BF FD | 	call	#_fatfs_cc_disk_read
2c9bc     00 7A 0E F2 | 	cmp	result1, #0 wz
2c9c0     01 A8 66 56 |  if_ne	neg	local02, #1
2c9c4     01 AA 06 56 |  if_ne	mov	local03, #1
2c9c8     04 A6 86 F1 | 	sub	local01, #4
2c9cc     53 A9 62 FC | 	wrlong	local02, local01
2c9d0                 | LR__4700
2c9d0                 | LR__4701
2c9d0                 | ' 				sect = (LBA_t)0 - 1;
2c9d0                 | ' 				res = FR_DISK_ERR;
2c9d0                 | ' 			}
2c9d0                 | ' 			fs->winsect = sect;
2c9d0                 | ' 		}
2c9d0                 | ' 	}
2c9d0                 | ' 	return res;
2c9d0     55 7B 02 F6 | 	mov	result1, local03
2c9d4     E7 F0 03 F6 | 	mov	ptra, fp
2c9d8     F2 00 A0 FD | 	call	#popregs_
2c9dc                 | _fatfs_cc_move_window_ret
2c9dc     2D 00 64 FD | 	ret
2c9e0                 | 
2c9e0                 | _fatfs_cc_sync_fs
2c9e0     02 CA 05 F6 | 	mov	COUNT_, #2
2c9e4     E8 00 A0 FD | 	call	#pushregs_
2c9e8     49 A7 02 F6 | 	mov	local01, arg01
2c9ec     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2c9f0     3D A9 0A F6 | 	mov	local02, result1 wz
2c9f4     D8 00 90 5D |  if_ne	jmp	#LR__4711
2c9f8     53 99 C2 FA | 	rdbyte	arg04, local01
2c9fc     03 98 0E F2 | 	cmp	arg04, #3 wz
2ca00     04 A6 06 A1 |  if_e	add	local01, #4
2ca04     53 99 C2 AA |  if_e	rdbyte	arg04, local01
2ca08     04 A6 86 A1 |  if_e	sub	local01, #4
2ca0c     01 98 0E A2 |  if_e	cmp	arg04, #1 wz
2ca10     A0 00 90 5D |  if_ne	jmp	#LR__4710
2ca14     34 A6 06 F1 | 	add	local01, #52
2ca18     53 93 02 F6 | 	mov	arg01, local01
2ca1c     00 94 06 F6 | 	mov	arg02, #0
2ca20     09 96 C6 F9 | 	decod	arg03, #9
2ca24     D8 00 A0 FD | 	call	#\builtin_bytefill_
2ca28     53 93 02 F6 | 	mov	arg01, local01
2ca2c     FE 93 06 F1 | 	add	arg01, #510
2ca30     55 00 80 FF 
2ca34     49 AB 58 FC | 	wrword	##43605, arg01
2ca38     A9 B0 A0 FF 
2ca3c     53 A5 68 FC | 	wrlong	##1096897106, local01
2ca40     53 93 02 F6 | 	mov	arg01, local01
2ca44     E4 93 06 F1 | 	add	arg01, #484
2ca48     B9 A0 B0 FF 
2ca4c     49 E5 68 FC | 	wrlong	##1631679090, arg01
2ca50     53 93 02 F6 | 	mov	arg01, local01
2ca54     E8 93 06 F1 | 	add	arg01, #488
2ca58     20 A6 86 F1 | 	sub	local01, #32
2ca5c     53 95 02 FB | 	rdlong	arg02, local01
2ca60     49 95 62 FC | 	wrlong	arg02, arg01
2ca64     20 A6 06 F1 | 	add	local01, #32
2ca68     53 93 02 F6 | 	mov	arg01, local01
2ca6c     EC 93 06 F1 | 	add	arg01, #492
2ca70     24 A6 86 F1 | 	sub	local01, #36
2ca74     53 95 02 FB | 	rdlong	arg02, local01
2ca78     49 95 62 FC | 	wrlong	arg02, arg01
2ca7c     10 A6 06 F1 | 	add	local01, #16
2ca80     53 97 02 FB | 	rdlong	arg03, local01
2ca84     01 96 06 F1 | 	add	arg03, #1
2ca88     10 A6 06 F1 | 	add	local01, #16
2ca8c     53 97 62 FC | 	wrlong	arg03, local01
2ca90     2F A6 86 F1 | 	sub	local01, #47
2ca94     53 93 C2 FA | 	rdbyte	arg01, local01
2ca98     33 A6 06 F1 | 	add	local01, #51
2ca9c     53 95 02 F6 | 	mov	arg02, local01
2caa0     01 98 06 F6 | 	mov	arg04, #1
2caa4     74 F9 BF FD | 	call	#_fatfs_cc_disk_write
2caa8     30 A6 86 F1 | 	sub	local01, #48
2caac     53 01 48 FC | 	wrbyte	#0, local01
2cab0     04 A6 86 F1 | 	sub	local01, #4
2cab4                 | LR__4710
2cab4     01 A6 06 F1 | 	add	local01, #1
2cab8     53 93 C2 FA | 	rdbyte	arg01, local01
2cabc     00 94 06 F6 | 	mov	arg02, #0
2cac0     00 96 06 F6 | 	mov	arg03, #0
2cac4     90 FA BF FD | 	call	#_fatfs_cc_disk_ioctl
2cac8     00 7A 0E F2 | 	cmp	result1, #0 wz
2cacc     01 A8 06 56 |  if_ne	mov	local02, #1
2cad0                 | LR__4711
2cad0                 | ' 	}
2cad0                 | ' 
2cad0                 | ' 	return res;
2cad0     54 7B 02 F6 | 	mov	result1, local02
2cad4     E7 F0 03 F6 | 	mov	ptra, fp
2cad8     F2 00 A0 FD | 	call	#popregs_
2cadc                 | _fatfs_cc_sync_fs_ret
2cadc     2D 00 64 FD | 	ret
2cae0                 | 
2cae0                 | _fatfs_cc_clst2sect
2cae0     02 94 86 F1 | 	sub	arg02, #2
2cae4     18 92 06 F1 | 	add	arg01, #24
2cae8     49 81 02 FB | 	rdlong	_var01, arg01
2caec     18 92 86 F1 | 	sub	arg01, #24
2caf0     02 80 86 F1 | 	sub	_var01, #2
2caf4     40 95 12 F2 | 	cmp	arg02, _var01 wc
2caf8     00 7A 06 36 |  if_ae	mov	result1, #0
2cafc     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2cb00     0A 92 06 F1 | 	add	arg01, #10
2cb04     49 81 E2 FA | 	rdword	_var01, arg01
2cb08     4A 81 02 FD | 	qmul	_var01, arg02
2cb0c                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2cb0c     22 92 06 F1 | 	add	arg01, #34
2cb10     49 7B 02 FB | 	rdlong	result1, arg01
2cb14     18 80 62 FD | 	getqx	_var01
2cb18     40 7B 02 F1 | 	add	result1, _var01
2cb1c                 | _fatfs_cc_clst2sect_ret
2cb1c     2D 00 64 FD | 	ret
2cb20                 | 
2cb20                 | _fatfs_cc_get_fat
2cb20     07 CA 05 F6 | 	mov	COUNT_, #7
2cb24     E8 00 A0 FD | 	call	#pushregs_
2cb28     4A A7 02 F6 | 	mov	local01, arg02
2cb2c     49 A9 02 FB | 	rdlong	local02, arg01
2cb30     02 A6 16 F2 | 	cmp	local01, #2 wc
2cb34     14 00 90 CD |  if_b	jmp	#LR__4720
2cb38     18 A8 06 F1 | 	add	local02, #24
2cb3c     54 AB 02 FB | 	rdlong	local03, local02
2cb40     18 A8 86 F1 | 	sub	local02, #24
2cb44     55 A7 12 F2 | 	cmp	local01, local03 wc
2cb48     08 00 90 CD |  if_b	jmp	#LR__4721
2cb4c                 | LR__4720
2cb4c     01 AC 06 F6 | 	mov	local04, #1
2cb50     60 01 90 FD | 	jmp	#LR__4728
2cb54                 | LR__4721
2cb54     01 AC 66 F6 | 	neg	local04, #1
2cb58                 | ' 		val = 0xFFFFFFFF;
2cb58                 | ' 
2cb58                 | ' 		switch (fs->fs_type) {
2cb58     54 AF C2 FA | 	rdbyte	local05, local02
2cb5c     01 AE 86 F1 | 	sub	local05, #1
2cb60     03 AE 26 F3 | 	fle	local05, #3
2cb64     30 AE 62 FD | 	jmprel	local05
2cb68                 | LR__4722
2cb68     0C 00 90 FD | 	jmp	#LR__4723
2cb6c     B8 00 90 FD | 	jmp	#LR__4724
2cb70     F8 00 90 FD | 	jmp	#LR__4725
2cb74     38 01 90 FD | 	jmp	#LR__4726
2cb78                 | LR__4723
2cb78     53 AF 02 F6 | 	mov	local05, local01
2cb7c     53 93 02 F6 | 	mov	arg01, local01
2cb80     01 92 46 F0 | 	shr	arg01, #1
2cb84     49 AF 02 F1 | 	add	local05, arg01
2cb88     54 93 02 F6 | 	mov	arg01, local02
2cb8c     57 B1 02 F6 | 	mov	local06, local05
2cb90     09 B0 46 F0 | 	shr	local06, #9
2cb94     24 A8 06 F1 | 	add	local02, #36
2cb98     54 95 02 FB | 	rdlong	arg02, local02
2cb9c     24 A8 86 F1 | 	sub	local02, #36
2cba0     58 95 02 F1 | 	add	arg02, local06
2cba4     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2cba8     00 7A 0E F2 | 	cmp	result1, #0 wz
2cbac     04 01 90 5D |  if_ne	jmp	#LR__4727
2cbb0     57 B1 02 F6 | 	mov	local06, local05
2cbb4     FF B1 06 F5 | 	and	local06, #511
2cbb8     54 93 02 F6 | 	mov	arg01, local02
2cbbc     34 92 06 F1 | 	add	arg01, #52
2cbc0     49 B1 02 F1 | 	add	local06, arg01
2cbc4     58 B3 C2 FA | 	rdbyte	local07, local06
2cbc8     54 93 02 F6 | 	mov	arg01, local02
2cbcc     01 AE 06 F1 | 	add	local05, #1
2cbd0     57 B1 02 F6 | 	mov	local06, local05
2cbd4     09 B0 46 F0 | 	shr	local06, #9
2cbd8     24 A8 06 F1 | 	add	local02, #36
2cbdc     54 95 02 FB | 	rdlong	arg02, local02
2cbe0     24 A8 86 F1 | 	sub	local02, #36
2cbe4     58 95 02 F1 | 	add	arg02, local06
2cbe8     7C FD BF FD | 	call	#_fatfs_cc_move_window
2cbec     00 7A 0E F2 | 	cmp	result1, #0 wz
2cbf0     C0 00 90 5D |  if_ne	jmp	#LR__4727
2cbf4     FF AF 06 F5 | 	and	local05, #511
2cbf8     34 A8 06 F1 | 	add	local02, #52
2cbfc     54 AF 02 F1 | 	add	local05, local02
2cc00     57 B1 C2 FA | 	rdbyte	local06, local05
2cc04     08 B0 66 F0 | 	shl	local06, #8
2cc08     58 B3 42 F5 | 	or	local07, local06
2cc0c     01 A6 CE F7 | 	test	local01, #1 wz
2cc10     04 B2 46 50 |  if_ne	shr	local07, #4
2cc14     59 AB 02 56 |  if_ne	mov	local03, local07
2cc18     0B B2 46 A7 |  if_e	zerox	local07, #11
2cc1c     59 AB 02 A6 |  if_e	mov	local03, local07
2cc20     55 AD 02 F6 | 	mov	local04, local03
2cc24                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2cc24                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2cc24                 | ' 			break;
2cc24     8C 00 90 FD | 	jmp	#LR__4727
2cc28                 | LR__4724
2cc28     54 93 02 F6 | 	mov	arg01, local02
2cc2c     53 B1 02 F6 | 	mov	local06, local01
2cc30     08 B0 46 F0 | 	shr	local06, #8
2cc34     24 A8 06 F1 | 	add	local02, #36
2cc38     54 95 02 FB | 	rdlong	arg02, local02
2cc3c     24 A8 86 F1 | 	sub	local02, #36
2cc40     58 95 02 F1 | 	add	arg02, local06
2cc44     20 FD BF FD | 	call	#_fatfs_cc_move_window
2cc48     00 7A 0E F2 | 	cmp	result1, #0 wz
2cc4c     64 00 90 5D |  if_ne	jmp	#LR__4727
2cc50     34 A8 06 F1 | 	add	local02, #52
2cc54     01 A6 66 F0 | 	shl	local01, #1
2cc58     FF A7 06 F5 | 	and	local01, #511
2cc5c     53 A9 02 F1 | 	add	local02, local01
2cc60                 | ' {
2cc60                 | ' 
2cc60                 | ' 	return *((WORD*)ptr);
2cc60     54 7B E2 FA | 	rdword	result1, local02
2cc64     3D AD 32 F9 | 	getword	local04, result1, #0
2cc68                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2cc68                 | ' 			break;
2cc68     48 00 90 FD | 	jmp	#LR__4727
2cc6c                 | LR__4725
2cc6c     54 93 02 F6 | 	mov	arg01, local02
2cc70     53 B1 02 F6 | 	mov	local06, local01
2cc74     07 B0 46 F0 | 	shr	local06, #7
2cc78     24 A8 06 F1 | 	add	local02, #36
2cc7c     54 95 02 FB | 	rdlong	arg02, local02
2cc80     24 A8 86 F1 | 	sub	local02, #36
2cc84     58 95 02 F1 | 	add	arg02, local06
2cc88     DC FC BF FD | 	call	#_fatfs_cc_move_window
2cc8c     00 7A 0E F2 | 	cmp	result1, #0 wz
2cc90     20 00 90 5D |  if_ne	jmp	#LR__4727
2cc94     34 A8 06 F1 | 	add	local02, #52
2cc98     02 A6 66 F0 | 	shl	local01, #2
2cc9c     FF A7 06 F5 | 	and	local01, #511
2cca0     53 A9 02 F1 | 	add	local02, local01
2cca4                 | ' {
2cca4                 | ' 
2cca4                 | ' 	return *((DWORD*)ptr);
2cca4     54 AD 02 FB | 	rdlong	local04, local02
2cca8     7C AC 06 F4 | 	bitl	local04, #124
2ccac                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2ccac                 | ' 			break;
2ccac     04 00 90 FD | 	jmp	#LR__4727
2ccb0                 | LR__4726
2ccb0     01 AC 06 F6 | 	mov	local04, #1
2ccb4                 | LR__4727
2ccb4                 | LR__4728
2ccb4                 | ' 			val = 1;
2ccb4                 | ' 		}
2ccb4                 | ' 	}
2ccb4                 | ' 
2ccb4                 | ' 	return val;
2ccb4     56 7B 02 F6 | 	mov	result1, local04
2ccb8     E7 F0 03 F6 | 	mov	ptra, fp
2ccbc     F2 00 A0 FD | 	call	#popregs_
2ccc0                 | _fatfs_cc_get_fat_ret
2ccc0     2D 00 64 FD | 	ret
2ccc4                 | 
2ccc4                 | _fatfs_cc_put_fat
2ccc4     08 CA 05 F6 | 	mov	COUNT_, #8
2ccc8     E8 00 A0 FD | 	call	#pushregs_
2cccc     49 A7 02 F6 | 	mov	local01, arg01
2ccd0     4A A9 02 F6 | 	mov	local02, arg02
2ccd4     4B AB 02 F6 | 	mov	local03, arg03
2ccd8     02 AC 06 F6 | 	mov	local04, #2
2ccdc     02 A8 16 F2 | 	cmp	local02, #2 wc
2cce0     E0 01 90 CD |  if_b	jmp	#LR__4737
2cce4     18 A6 06 F1 | 	add	local01, #24
2cce8     53 AF 02 FB | 	rdlong	local05, local01
2ccec     18 A6 86 F1 | 	sub	local01, #24
2ccf0     57 A9 12 F2 | 	cmp	local02, local05 wc
2ccf4     CC 01 90 3D |  if_ae	jmp	#LR__4737
2ccf8                 | ' 		switch (fs->fs_type) {
2ccf8     53 B1 C2 FA | 	rdbyte	local06, local01
2ccfc     01 B0 86 F1 | 	sub	local06, #1
2cd00     03 B0 26 F3 | 	fle	local06, #3
2cd04     30 B0 62 FD | 	jmprel	local06
2cd08                 | LR__4730
2cd08     0C 00 90 FD | 	jmp	#LR__4731
2cd0c     F4 00 90 FD | 	jmp	#LR__4734
2cd10     3C 01 90 FD | 	jmp	#LR__4735
2cd14     AC 01 90 FD | 	jmp	#LR__4736
2cd18                 | LR__4731
2cd18     54 B3 02 F6 | 	mov	local07, local02
2cd1c     54 AF 02 F6 | 	mov	local05, local02
2cd20     01 AE 46 F0 | 	shr	local05, #1
2cd24     57 B3 02 F1 | 	add	local07, local05
2cd28     53 93 02 F6 | 	mov	arg01, local01
2cd2c     59 B1 02 F6 | 	mov	local06, local07
2cd30     09 B0 46 F0 | 	shr	local06, #9
2cd34     24 A6 06 F1 | 	add	local01, #36
2cd38     53 95 02 FB | 	rdlong	arg02, local01
2cd3c     24 A6 86 F1 | 	sub	local01, #36
2cd40     58 95 02 F1 | 	add	arg02, local06
2cd44     20 FC BF FD | 	call	#_fatfs_cc_move_window
2cd48     3D AD 0A F6 | 	mov	local04, result1 wz
2cd4c     74 01 90 5D |  if_ne	jmp	#LR__4736
2cd50     53 B5 02 F6 | 	mov	local08, local01
2cd54     34 B4 06 F1 | 	add	local08, #52
2cd58     59 AF 02 F6 | 	mov	local05, local07
2cd5c     FF AF 06 F5 | 	and	local05, #511
2cd60     57 B5 02 F1 | 	add	local08, local05
2cd64     01 A8 CE F7 | 	test	local02, #1 wz
2cd68     01 B2 06 F1 | 	add	local07, #1
2cd6c     18 00 90 AD |  if_e	jmp	#LR__4732
2cd70     5A AF C2 FA | 	rdbyte	local05, local08
2cd74     57 AF 42 F8 | 	getnib	local05, local05, #0
2cd78     55 B1 E2 F8 | 	getbyte	local06, local03, #0
2cd7c     04 B0 66 F0 | 	shl	local06, #4
2cd80     58 AF 42 F5 | 	or	local05, local06
2cd84     04 00 90 FD | 	jmp	#LR__4733
2cd88                 | LR__4732
2cd88     55 AF 02 F6 | 	mov	local05, local03
2cd8c                 | LR__4733
2cd8c     5A AF 42 FC | 	wrbyte	local05, local08
2cd90     03 A6 06 F1 | 	add	local01, #3
2cd94     53 03 48 FC | 	wrbyte	#1, local01
2cd98     03 A6 86 F1 | 	sub	local01, #3
2cd9c     53 93 02 F6 | 	mov	arg01, local01
2cda0     59 B5 02 F6 | 	mov	local08, local07
2cda4     09 B4 46 F0 | 	shr	local08, #9
2cda8     24 A6 06 F1 | 	add	local01, #36
2cdac     53 95 02 FB | 	rdlong	arg02, local01
2cdb0     24 A6 86 F1 | 	sub	local01, #36
2cdb4     5A 95 02 F1 | 	add	arg02, local08
2cdb8     AC FB BF FD | 	call	#_fatfs_cc_move_window
2cdbc     3D AD 0A F6 | 	mov	local04, result1 wz
2cdc0     00 01 90 5D |  if_ne	jmp	#LR__4736
2cdc4     53 B5 02 F6 | 	mov	local08, local01
2cdc8     34 B4 06 F1 | 	add	local08, #52
2cdcc     FF B3 06 F5 | 	and	local07, #511
2cdd0     59 B5 02 F1 | 	add	local08, local07
2cdd4     01 A8 CE F7 | 	test	local02, #1 wz
2cdd8     04 AA 46 50 |  if_ne	shr	local03, #4
2cddc     55 AF 02 56 |  if_ne	mov	local05, local03
2cde0     5A AF C2 AA |  if_e	rdbyte	local05, local08
2cde4     F0 AE 06 A5 |  if_e	and	local05, #240
2cde8     55 AB EA A8 |  if_e	getbyte	local03, local03, #1
2cdec     55 AB 42 A8 |  if_e	getnib	local03, local03, #0
2cdf0     55 AF 42 A5 |  if_e	or	local05, local03
2cdf4     5A AF 42 FC | 	wrbyte	local05, local08
2cdf8     03 A6 06 F1 | 	add	local01, #3
2cdfc     53 03 48 FC | 	wrbyte	#1, local01
2ce00                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2ce00                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2ce00                 | ' 			fs->wflag = 1;
2ce00                 | ' 			break;
2ce00     C0 00 90 FD | 	jmp	#LR__4736
2ce04                 | LR__4734
2ce04     53 93 02 F6 | 	mov	arg01, local01
2ce08     54 B5 02 F6 | 	mov	local08, local02
2ce0c     08 B4 46 F0 | 	shr	local08, #8
2ce10     24 A6 06 F1 | 	add	local01, #36
2ce14     53 95 02 FB | 	rdlong	arg02, local01
2ce18     24 A6 86 F1 | 	sub	local01, #36
2ce1c     5A 95 02 F1 | 	add	arg02, local08
2ce20     44 FB BF FD | 	call	#_fatfs_cc_move_window
2ce24     3D AD 0A F6 | 	mov	local04, result1 wz
2ce28     98 00 90 5D |  if_ne	jmp	#LR__4736
2ce2c     34 A6 06 F1 | 	add	local01, #52
2ce30     53 93 02 F6 | 	mov	arg01, local01
2ce34     01 A8 66 F0 | 	shl	local02, #1
2ce38     FF A9 06 F5 | 	and	local02, #511
2ce3c     54 93 02 F1 | 	add	arg01, local02
2ce40     49 AB 52 FC | 	wrword	local03, arg01
2ce44     31 A6 86 F1 | 	sub	local01, #49
2ce48     53 03 48 FC | 	wrbyte	#1, local01
2ce4c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2ce4c                 | ' 			fs->wflag = 1;
2ce4c                 | ' 			break;
2ce4c     74 00 90 FD | 	jmp	#LR__4736
2ce50                 | LR__4735
2ce50     53 93 02 F6 | 	mov	arg01, local01
2ce54     54 B5 02 F6 | 	mov	local08, local02
2ce58     07 B4 46 F0 | 	shr	local08, #7
2ce5c     24 A6 06 F1 | 	add	local01, #36
2ce60     53 95 02 FB | 	rdlong	arg02, local01
2ce64     24 A6 86 F1 | 	sub	local01, #36
2ce68     5A 95 02 F1 | 	add	arg02, local08
2ce6c     F8 FA BF FD | 	call	#_fatfs_cc_move_window
2ce70     3D AD 0A F6 | 	mov	local04, result1 wz
2ce74     4C 00 90 5D |  if_ne	jmp	#LR__4736
2ce78     7C AA 06 F4 | 	bitl	local03, #124
2ce7c     53 93 02 F6 | 	mov	arg01, local01
2ce80     34 92 06 F1 | 	add	arg01, #52
2ce84     54 B5 02 F6 | 	mov	local08, local02
2ce88     02 B4 66 F0 | 	shl	local08, #2
2ce8c     FF B5 06 F5 | 	and	local08, #511
2ce90     5A 93 02 F1 | 	add	arg01, local08
2ce94                 | ' {
2ce94                 | ' 
2ce94                 | ' 	return *((DWORD*)ptr);
2ce94     49 B5 02 FB | 	rdlong	local08, arg01
2ce98     00 00 78 FF 
2ce9c     00 B4 06 F5 | 	and	local08, ##-268435456
2cea0     5A AB 42 F5 | 	or	local03, local08
2cea4     34 A6 06 F1 | 	add	local01, #52
2cea8     53 93 02 F6 | 	mov	arg01, local01
2ceac     02 A8 66 F0 | 	shl	local02, #2
2ceb0     FF A9 06 F5 | 	and	local02, #511
2ceb4     54 93 02 F1 | 	add	arg01, local02
2ceb8     49 AB 62 FC | 	wrlong	local03, arg01
2cebc     31 A6 86 F1 | 	sub	local01, #49
2cec0     53 03 48 FC | 	wrbyte	#1, local01
2cec4                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2cec4                 | ' 			}
2cec4                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2cec4                 | ' 			fs->wflag = 1;
2cec4                 | ' 			break;
2cec4                 | LR__4736
2cec4                 | LR__4737
2cec4                 | ' 		}
2cec4                 | ' 	}
2cec4                 | ' 	return res;
2cec4     56 7B 02 F6 | 	mov	result1, local04
2cec8     E7 F0 03 F6 | 	mov	ptra, fp
2cecc     F2 00 A0 FD | 	call	#popregs_
2ced0                 | _fatfs_cc_put_fat_ret
2ced0     2D 00 64 FD | 	ret
2ced4                 | 
2ced4                 | _fatfs_cc_remove_chain
2ced4     05 CA 05 F6 | 	mov	COUNT_, #5
2ced8     E8 00 A0 FD | 	call	#pushregs_
2cedc     49 A7 02 F6 | 	mov	local01, arg01
2cee0     4A A9 02 F6 | 	mov	local02, arg02
2cee4     4B AB 02 F6 | 	mov	local03, arg03
2cee8     53 AD 02 FB | 	rdlong	local04, local01
2ceec     02 A8 16 F2 | 	cmp	local02, #2 wc
2cef0     14 00 90 CD |  if_b	jmp	#LR__4740
2cef4     18 AC 06 F1 | 	add	local04, #24
2cef8     56 7B 02 FB | 	rdlong	result1, local04
2cefc     18 AC 86 F1 | 	sub	local04, #24
2cf00     3D A9 12 F2 | 	cmp	local02, result1 wc
2cf04     08 00 90 CD |  if_b	jmp	#LR__4741
2cf08                 | LR__4740
2cf08     02 7A 06 F6 | 	mov	result1, #2
2cf0c     CC 00 90 FD | 	jmp	#LR__4746
2cf10                 | LR__4741
2cf10     00 AA 0E F2 | 	cmp	local03, #0 wz
2cf14     18 00 90 AD |  if_e	jmp	#LR__4742
2cf18     55 95 02 F6 | 	mov	arg02, local03
2cf1c     56 93 02 F6 | 	mov	arg01, local04
2cf20     01 96 66 F6 | 	neg	arg03, #1
2cf24     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2cf28     00 7A 0E F2 | 	cmp	result1, #0 wz
2cf2c     AC 00 90 5D |  if_ne	jmp	#LR__4746
2cf30                 | LR__4742
2cf30                 | ' 	}
2cf30                 | ' 
2cf30                 | ' 
2cf30                 | ' 	do {
2cf30                 | LR__4743
2cf30     54 95 02 F6 | 	mov	arg02, local02
2cf34     53 93 02 F6 | 	mov	arg01, local01
2cf38     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2cf3c     3D AF 0A F6 | 	mov	local05, result1 wz
2cf40     94 00 90 AD |  if_e	jmp	#LR__4745
2cf44     01 AE 0E F2 | 	cmp	local05, #1 wz
2cf48     02 7A 06 A6 |  if_e	mov	result1, #2
2cf4c     8C 00 90 AD |  if_e	jmp	#LR__4746
2cf50     FF FF 7F FF 
2cf54     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2cf58     01 7A 06 A6 |  if_e	mov	result1, #1
2cf5c     7C 00 90 AD |  if_e	jmp	#LR__4746
2cf60     54 95 02 F6 | 	mov	arg02, local02
2cf64     56 93 02 F6 | 	mov	arg01, local04
2cf68     00 96 06 F6 | 	mov	arg03, #0
2cf6c     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2cf70     3D AB 0A F6 | 	mov	local03, result1 wz
2cf74     55 7B 02 56 |  if_ne	mov	result1, local03
2cf78     60 00 90 5D |  if_ne	jmp	#LR__4746
2cf7c     18 AC 06 F1 | 	add	local04, #24
2cf80     56 AB 02 FB | 	rdlong	local03, local04
2cf84     02 AA 86 F1 | 	sub	local03, #2
2cf88     04 AC 86 F1 | 	sub	local04, #4
2cf8c     56 A9 02 FB | 	rdlong	local02, local04
2cf90     14 AC 86 F1 | 	sub	local04, #20
2cf94     55 A9 12 F2 | 	cmp	local02, local03 wc
2cf98     24 00 90 3D |  if_ae	jmp	#LR__4744
2cf9c     14 AC 06 F1 | 	add	local04, #20
2cfa0     56 AB 02 FB | 	rdlong	local03, local04
2cfa4     01 AA 06 F1 | 	add	local03, #1
2cfa8     56 AB 62 FC | 	wrlong	local03, local04
2cfac     10 AC 86 F1 | 	sub	local04, #16
2cfb0     56 AB C2 FA | 	rdbyte	local03, local04
2cfb4     01 AA 46 F5 | 	or	local03, #1
2cfb8     56 AB 42 FC | 	wrbyte	local03, local04
2cfbc     04 AC 86 F1 | 	sub	local04, #4
2cfc0                 | LR__4744
2cfc0     57 A9 02 F6 | 	mov	local02, local05
2cfc4     18 AC 06 F1 | 	add	local04, #24
2cfc8     56 AF 02 FB | 	rdlong	local05, local04
2cfcc     18 AC 86 F1 | 	sub	local04, #24
2cfd0     57 A9 12 F2 | 	cmp	local02, local05 wc
2cfd4     58 FF 9F CD |  if_b	jmp	#LR__4743
2cfd8                 | LR__4745
2cfd8                 | ' #line 1500 "ff.c"
2cfd8                 | ' 	return FR_OK;
2cfd8     00 7A 06 F6 | 	mov	result1, #0
2cfdc                 | LR__4746
2cfdc     E7 F0 03 F6 | 	mov	ptra, fp
2cfe0     F2 00 A0 FD | 	call	#popregs_
2cfe4                 | _fatfs_cc_remove_chain_ret
2cfe4     2D 00 64 FD | 	ret
2cfe8                 | 
2cfe8                 | _fatfs_cc_create_chain
2cfe8     09 CA 05 F6 | 	mov	COUNT_, #9
2cfec     E8 00 A0 FD | 	call	#pushregs_
2cff0     49 A7 02 F6 | 	mov	local01, arg01
2cff4     4A A9 0A F6 | 	mov	local02, arg02 wz
2cff8     53 AB 02 FB | 	rdlong	local03, local01
2cffc     28 00 90 5D |  if_ne	jmp	#LR__4750
2d000     10 AA 06 F1 | 	add	local03, #16
2d004     55 AD 0A FB | 	rdlong	local04, local03 wz
2d008     10 AA 86 F1 | 	sub	local03, #16
2d00c     18 AA 06 51 |  if_ne	add	local03, #24
2d010     55 AF 02 5B |  if_ne	rdlong	local05, local03
2d014     18 AA 86 51 |  if_ne	sub	local03, #24
2d018     57 AD 12 52 |  if_ne	cmp	local04, local05 wc
2d01c     50 00 90 4D |  if_c_and_nz	jmp	#LR__4751
2d020     01 AC 06 F6 | 	mov	local04, #1
2d024     48 00 90 FD | 	jmp	#LR__4751
2d028                 | LR__4750
2d028     54 95 02 F6 | 	mov	arg02, local02
2d02c     53 93 02 F6 | 	mov	arg01, local01
2d030     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2d034     3D AD 02 F6 | 	mov	local04, result1
2d038     02 AC 16 F2 | 	cmp	local04, #2 wc
2d03c     01 7A 06 C6 |  if_b	mov	result1, #1
2d040     BC 01 90 CD |  if_b	jmp	#LR__4761
2d044     FF FF 7F FF 
2d048     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2d04c     56 7B 02 A6 |  if_e	mov	result1, local04
2d050     AC 01 90 AD |  if_e	jmp	#LR__4761
2d054     18 AA 06 F1 | 	add	local03, #24
2d058     55 AF 02 FB | 	rdlong	local05, local03
2d05c     18 AA 86 F1 | 	sub	local03, #24
2d060     57 AD 12 F2 | 	cmp	local04, local05 wc
2d064     56 7B 02 C6 |  if_b	mov	result1, local04
2d068     94 01 90 CD |  if_b	jmp	#LR__4761
2d06c     54 AD 02 F6 | 	mov	local04, local02
2d070                 | LR__4751
2d070     14 AA 06 F1 | 	add	local03, #20
2d074     55 AF 0A FB | 	rdlong	local05, local03 wz
2d078     14 AA 86 F1 | 	sub	local03, #20
2d07c     00 7A 06 A6 |  if_e	mov	result1, #0
2d080     7C 01 90 AD |  if_e	jmp	#LR__4761
2d084     00 B0 06 F6 | 	mov	local06, #0
2d088     54 AD 0A F2 | 	cmp	local04, local02 wz
2d08c     74 00 90 5D |  if_ne	jmp	#LR__4754
2d090     56 B1 02 F6 | 	mov	local06, local04
2d094     01 B0 06 F1 | 	add	local06, #1
2d098     18 AA 06 F1 | 	add	local03, #24
2d09c     55 AF 02 FB | 	rdlong	local05, local03
2d0a0     18 AA 86 F1 | 	sub	local03, #24
2d0a4     57 B1 12 F2 | 	cmp	local06, local05 wc
2d0a8     02 B0 06 36 |  if_ae	mov	local06, #2
2d0ac     58 95 02 F6 | 	mov	arg02, local06
2d0b0     53 93 02 F6 | 	mov	arg01, local01
2d0b4     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2d0b8     3D AF 02 F6 | 	mov	local05, result1
2d0bc     01 AE 0E F2 | 	cmp	local05, #1 wz
2d0c0     FF FF 7F 5F 
2d0c4     FF AF 0E 52 |  if_ne	cmp	local05, ##-1 wz
2d0c8     57 7B 02 A6 |  if_e	mov	result1, local05
2d0cc     30 01 90 AD |  if_e	jmp	#LR__4761
2d0d0     00 AE 0E F2 | 	cmp	local05, #0 wz
2d0d4     2C 00 90 AD |  if_e	jmp	#LR__4753
2d0d8     10 AA 06 F1 | 	add	local03, #16
2d0dc     55 B3 02 FB | 	rdlong	local07, local03
2d0e0     10 AA 86 F1 | 	sub	local03, #16
2d0e4     02 B2 16 F2 | 	cmp	local07, #2 wc
2d0e8     14 00 90 CD |  if_b	jmp	#LR__4752
2d0ec     18 AA 06 F1 | 	add	local03, #24
2d0f0     55 AF 02 FB | 	rdlong	local05, local03
2d0f4     18 AA 86 F1 | 	sub	local03, #24
2d0f8     57 B3 12 F2 | 	cmp	local07, local05 wc
2d0fc     59 AD 02 C6 |  if_b	mov	local04, local07
2d100                 | LR__4752
2d100     00 B0 06 F6 | 	mov	local06, #0
2d104                 | LR__4753
2d104                 | LR__4754
2d104     00 B0 0E F2 | 	cmp	local06, #0 wz
2d108     60 00 90 5D |  if_ne	jmp	#LR__4757
2d10c     56 B1 02 F6 | 	mov	local06, local04
2d110                 | ' 			ncl = scl;
2d110                 | ' 			for (;;) {
2d110                 | LR__4755
2d110     01 B0 06 F1 | 	add	local06, #1
2d114     18 AA 06 F1 | 	add	local03, #24
2d118     55 AF 02 FB | 	rdlong	local05, local03
2d11c     18 AA 86 F1 | 	sub	local03, #24
2d120     57 B1 12 F2 | 	cmp	local06, local05 wc
2d124     02 B0 06 36 |  if_ae	mov	local06, #2
2d128     56 B1 1A 32 |  if_ae	cmp	local06, local04 wcz
2d12c     00 7A 06 16 |  if_a	mov	result1, #0
2d130     CC 00 90 1D |  if_a	jmp	#LR__4761
2d134     58 95 02 F6 | 	mov	arg02, local06
2d138     53 93 02 F6 | 	mov	arg01, local01
2d13c     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2d140     3D B3 0A F6 | 	mov	local07, result1 wz
2d144     24 00 90 AD |  if_e	jmp	#LR__4756
2d148     01 B2 0E F2 | 	cmp	local07, #1 wz
2d14c     FF FF 7F 5F 
2d150     FF B3 0E 52 |  if_ne	cmp	local07, ##-1 wz
2d154     59 7B 02 A6 |  if_e	mov	result1, local07
2d158     A4 00 90 AD |  if_e	jmp	#LR__4761
2d15c     56 B1 0A F2 | 	cmp	local06, local04 wz
2d160     00 7A 06 A6 |  if_e	mov	result1, #0
2d164     98 00 90 AD |  if_e	jmp	#LR__4761
2d168     A4 FF 9F FD | 	jmp	#LR__4755
2d16c                 | LR__4756
2d16c                 | LR__4757
2d16c     55 93 02 F6 | 	mov	arg01, local03
2d170     58 95 02 F6 | 	mov	arg02, local06
2d174     01 96 66 F6 | 	neg	arg03, #1
2d178     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2d17c     3D B5 0A F6 | 	mov	local08, result1 wz
2d180     1C 00 90 5D |  if_ne	jmp	#LR__4758
2d184     00 A8 0E F2 | 	cmp	local02, #0 wz
2d188     14 00 90 AD |  if_e	jmp	#LR__4758
2d18c     55 93 02 F6 | 	mov	arg01, local03
2d190     54 95 02 F6 | 	mov	arg02, local02
2d194     58 97 02 F6 | 	mov	arg03, local06
2d198     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2d19c     3D B5 02 F6 | 	mov	local08, result1
2d1a0                 | LR__4758
2d1a0     00 B4 0E F2 | 	cmp	local08, #0 wz
2d1a4     4C 00 90 5D |  if_ne	jmp	#LR__4759
2d1a8     10 AA 06 F1 | 	add	local03, #16
2d1ac     55 B1 62 FC | 	wrlong	local06, local03
2d1b0     08 AA 06 F1 | 	add	local03, #8
2d1b4     55 AF 02 FB | 	rdlong	local05, local03
2d1b8     02 AE 86 F1 | 	sub	local05, #2
2d1bc     04 AA 86 F1 | 	sub	local03, #4
2d1c0     55 B7 02 FB | 	rdlong	local09, local03
2d1c4     14 AA 86 F1 | 	sub	local03, #20
2d1c8     57 B7 1A F2 | 	cmp	local09, local05 wcz
2d1cc     14 AA 06 E1 |  if_be	add	local03, #20
2d1d0     55 B7 02 EB |  if_be	rdlong	local09, local03
2d1d4     01 B6 86 E1 |  if_be	sub	local09, #1
2d1d8     55 B7 62 EC |  if_be	wrlong	local09, local03
2d1dc     14 AA 86 E1 |  if_be	sub	local03, #20
2d1e0     04 AA 06 F1 | 	add	local03, #4
2d1e4     55 AF C2 FA | 	rdbyte	local05, local03
2d1e8     01 AE 46 F5 | 	or	local05, #1
2d1ec     55 AF 42 FC | 	wrbyte	local05, local03
2d1f0     08 00 90 FD | 	jmp	#LR__4760
2d1f4                 | LR__4759
2d1f4     01 B4 0E F2 | 	cmp	local08, #1 wz
2d1f8     01 B0 C6 F6 | 	negz	local06, #1
2d1fc                 | LR__4760
2d1fc                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2d1fc                 | ' 	}
2d1fc                 | ' 
2d1fc                 | ' 	return ncl;
2d1fc     58 7B 02 F6 | 	mov	result1, local06
2d200                 | LR__4761
2d200     E7 F0 03 F6 | 	mov	ptra, fp
2d204     F2 00 A0 FD | 	call	#popregs_
2d208                 | _fatfs_cc_create_chain_ret
2d208     2D 00 64 FD | 	ret
2d20c                 | 
2d20c                 | _fatfs_cc_dir_clear
2d20c     06 CA 05 F6 | 	mov	COUNT_, #6
2d210     E8 00 A0 FD | 	call	#pushregs_
2d214     49 A7 02 F6 | 	mov	local01, arg01
2d218     4A A9 02 F6 | 	mov	local02, arg02
2d21c     53 93 02 F6 | 	mov	arg01, local01
2d220     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2d224     00 7A 0E F2 | 	cmp	result1, #0 wz
2d228     01 7A 06 56 |  if_ne	mov	result1, #1
2d22c     90 00 90 5D |  if_ne	jmp	#LR__4772
2d230     53 93 02 F6 | 	mov	arg01, local01
2d234     54 95 02 F6 | 	mov	arg02, local02
2d238     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2d23c     3D AB 02 F6 | 	mov	local03, result1
2d240     30 A6 06 F1 | 	add	local01, #48
2d244     53 AB 62 FC | 	wrlong	local03, local01
2d248     04 A6 06 F1 | 	add	local01, #4
2d24c     53 93 02 F6 | 	mov	arg01, local01
2d250     00 94 06 F6 | 	mov	arg02, #0
2d254     09 96 C6 F9 | 	decod	arg03, #9
2d258     D8 00 A0 FD | 	call	#\builtin_bytefill_
2d25c     53 AD 02 F6 | 	mov	local04, local01
2d260                 | ' #line 1667 "ff.c"
2d260                 | ' 	{
2d260                 | ' 		ibuf = fs->win; szb = 1;
2d260                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2d260     00 AE 06 F6 | 	mov	local05, #0
2d264     34 A6 86 F1 | 	sub	local01, #52
2d268                 | LR__4770
2d268     0A A6 06 F1 | 	add	local01, #10
2d26c     53 B1 E2 FA | 	rdword	local06, local01
2d270     0A A6 86 F1 | 	sub	local01, #10
2d274     58 AF 12 F2 | 	cmp	local05, local06 wc
2d278     2C 00 90 3D |  if_ae	jmp	#LR__4771
2d27c     01 A6 06 F1 | 	add	local01, #1
2d280     53 93 C2 FA | 	rdbyte	arg01, local01
2d284     01 A6 86 F1 | 	sub	local01, #1
2d288     56 95 02 F6 | 	mov	arg02, local04
2d28c     55 97 02 F6 | 	mov	arg03, local03
2d290     57 97 02 F1 | 	add	arg03, local05
2d294     01 98 06 F6 | 	mov	arg04, #1
2d298     80 F1 BF FD | 	call	#_fatfs_cc_disk_write
2d29c     00 7A 0E F2 | 	cmp	result1, #0 wz
2d2a0     01 AE 06 A1 |  if_e	add	local05, #1
2d2a4     C0 FF 9F AD |  if_e	jmp	#LR__4770
2d2a8                 | LR__4771
2d2a8                 | ' 	}
2d2a8                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2d2a8     0A A6 06 F1 | 	add	local01, #10
2d2ac     53 AD E2 FA | 	rdword	local04, local01
2d2b0     56 AF 0A F2 | 	cmp	local05, local04 wz
2d2b4     00 B0 06 A6 |  if_e	mov	local06, #0
2d2b8     01 B0 06 56 |  if_ne	mov	local06, #1
2d2bc     58 7B 02 F6 | 	mov	result1, local06
2d2c0                 | LR__4772
2d2c0     E7 F0 03 F6 | 	mov	ptra, fp
2d2c4     F2 00 A0 FD | 	call	#popregs_
2d2c8                 | _fatfs_cc_dir_clear_ret
2d2c8     2D 00 64 FD | 	ret
2d2cc                 | 
2d2cc                 | _fatfs_cc_dir_sdi
2d2cc     06 CA 05 F6 | 	mov	COUNT_, #6
2d2d0     E8 00 A0 FD | 	call	#pushregs_
2d2d4     49 A7 02 F6 | 	mov	local01, arg01
2d2d8     4A A9 02 F6 | 	mov	local02, arg02
2d2dc     53 AB 02 FB | 	rdlong	local03, local01
2d2e0     00 10 00 FF 
2d2e4     00 A8 16 F2 | 	cmp	local02, ##2097152 wc
2d2e8     1F A8 CE C7 |  if_b	test	local02, #31 wz
2d2ec                 | ' 		return FR_INT_ERR;
2d2ec     02 7A 06 76 |  if_nc_or_nz	mov	result1, #2
2d2f0     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4786
2d2f4     10 A6 06 F1 | 	add	local01, #16
2d2f8     53 A9 62 FC | 	wrlong	local02, local01
2d2fc     08 A6 86 F1 | 	sub	local01, #8
2d300     53 AD 0A FB | 	rdlong	local04, local01 wz
2d304     08 A6 86 F1 | 	sub	local01, #8
2d308     55 AF C2 AA |  if_e	rdbyte	local05, local03
2d30c     03 AE 16 A2 |  if_e	cmp	local05, #3 wc
2d310     28 AA 06 21 |  if_nc_and_z	add	local03, #40
2d314     55 AD 02 2B |  if_nc_and_z	rdlong	local04, local03
2d318     28 AA 86 21 |  if_nc_and_z	sub	local03, #40
2d31c     00 AC 0E F2 | 	cmp	local04, #0 wz
2d320     3C 00 90 5D |  if_ne	jmp	#LR__4780
2d324     54 AF 02 F6 | 	mov	local05, local02
2d328     05 AE 46 F0 | 	shr	local05, #5
2d32c     08 AA 06 F1 | 	add	local03, #8
2d330     55 95 E2 FA | 	rdword	arg02, local03
2d334     08 AA 86 F1 | 	sub	local03, #8
2d338     4A AF 12 F2 | 	cmp	local05, arg02 wc
2d33c     02 7A 06 36 |  if_ae	mov	result1, #2
2d340     E4 00 90 3D |  if_ae	jmp	#LR__4786
2d344     28 AA 06 F1 | 	add	local03, #40
2d348     55 AF 02 FB | 	rdlong	local05, local03
2d34c     28 AA 86 F1 | 	sub	local03, #40
2d350     18 A6 06 F1 | 	add	local01, #24
2d354     53 AF 62 FC | 	wrlong	local05, local01
2d358     18 A6 86 F1 | 	sub	local01, #24
2d35c     7C 00 90 FD | 	jmp	#LR__4785
2d360                 | LR__4780
2d360     0A AA 06 F1 | 	add	local03, #10
2d364     55 B1 E2 FA | 	rdword	local06, local03
2d368     0A AA 86 F1 | 	sub	local03, #10
2d36c     09 B0 66 F0 | 	shl	local06, #9
2d370                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2d370                 | ' 		while (ofs >= csz) {
2d370                 | LR__4781
2d370     58 A9 12 F2 | 	cmp	local02, local06 wc
2d374     4C 00 90 CD |  if_b	jmp	#LR__4784
2d378     53 93 02 F6 | 	mov	arg01, local01
2d37c     56 95 02 F6 | 	mov	arg02, local04
2d380     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2d384     3D AD 02 F6 | 	mov	local04, result1
2d388     FF FF 7F FF 
2d38c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2d390     01 7A 06 A6 |  if_e	mov	result1, #1
2d394     90 00 90 AD |  if_e	jmp	#LR__4786
2d398     02 AC 16 F2 | 	cmp	local04, #2 wc
2d39c     14 00 90 CD |  if_b	jmp	#LR__4782
2d3a0     18 AA 06 F1 | 	add	local03, #24
2d3a4     55 AF 02 FB | 	rdlong	local05, local03
2d3a8     18 AA 86 F1 | 	sub	local03, #24
2d3ac     57 AD 12 F2 | 	cmp	local04, local05 wc
2d3b0     08 00 90 CD |  if_b	jmp	#LR__4783
2d3b4                 | LR__4782
2d3b4     02 7A 06 F6 | 	mov	result1, #2
2d3b8     6C 00 90 FD | 	jmp	#LR__4786
2d3bc                 | LR__4783
2d3bc     58 A9 82 F1 | 	sub	local02, local06
2d3c0     AC FF 9F FD | 	jmp	#LR__4781
2d3c4                 | LR__4784
2d3c4     55 93 02 F6 | 	mov	arg01, local03
2d3c8     56 95 02 F6 | 	mov	arg02, local04
2d3cc     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2d3d0     18 A6 06 F1 | 	add	local01, #24
2d3d4     53 7B 62 FC | 	wrlong	result1, local01
2d3d8     18 A6 86 F1 | 	sub	local01, #24
2d3dc                 | LR__4785
2d3dc     14 A6 06 F1 | 	add	local01, #20
2d3e0     53 AD 62 FC | 	wrlong	local04, local01
2d3e4     04 A6 06 F1 | 	add	local01, #4
2d3e8     53 AF 0A FB | 	rdlong	local05, local01 wz
2d3ec     18 A6 86 F1 | 	sub	local01, #24
2d3f0     02 7A 06 A6 |  if_e	mov	result1, #2
2d3f4     30 00 90 AD |  if_e	jmp	#LR__4786
2d3f8     54 B1 02 F6 | 	mov	local06, local02
2d3fc     09 B0 46 F0 | 	shr	local06, #9
2d400     18 A6 06 F1 | 	add	local01, #24
2d404     53 AF 02 FB | 	rdlong	local05, local01
2d408     58 AF 02 F1 | 	add	local05, local06
2d40c     53 AF 62 FC | 	wrlong	local05, local01
2d410     34 AA 06 F1 | 	add	local03, #52
2d414     FF A9 06 F5 | 	and	local02, #511
2d418     54 AB 02 F1 | 	add	local03, local02
2d41c     04 A6 06 F1 | 	add	local01, #4
2d420     53 AB 62 FC | 	wrlong	local03, local01
2d424                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2d424                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2d424                 | ' 
2d424                 | ' 	return FR_OK;
2d424     00 7A 06 F6 | 	mov	result1, #0
2d428                 | LR__4786
2d428     E7 F0 03 F6 | 	mov	ptra, fp
2d42c     F2 00 A0 FD | 	call	#popregs_
2d430                 | _fatfs_cc_dir_sdi_ret
2d430     2D 00 64 FD | 	ret
2d434                 | 
2d434                 | _fatfs_cc_dir_next
2d434     05 CA 05 F6 | 	mov	COUNT_, #5
2d438     E8 00 A0 FD | 	call	#pushregs_
2d43c     49 A7 02 F6 | 	mov	local01, arg01
2d440     4A A9 02 F6 | 	mov	local02, arg02
2d444     53 AB 02 FB | 	rdlong	local03, local01
2d448     10 A6 06 F1 | 	add	local01, #16
2d44c     53 AD 02 FB | 	rdlong	local04, local01
2d450     10 A6 86 F1 | 	sub	local01, #16
2d454     20 AC 06 F1 | 	add	local04, #32
2d458     00 10 00 FF 
2d45c     00 AC 16 F2 | 	cmp	local04, ##2097152 wc
2d460     18 A6 06 31 |  if_ae	add	local01, #24
2d464     53 01 68 3C |  if_ae	wrlong	#0, local01
2d468     18 A6 86 31 |  if_ae	sub	local01, #24
2d46c     18 A6 06 F1 | 	add	local01, #24
2d470     53 95 0A FB | 	rdlong	arg02, local01 wz
2d474     18 A6 86 F1 | 	sub	local01, #24
2d478     04 7A 06 A6 |  if_e	mov	result1, #4
2d47c     64 01 90 AD |  if_e	jmp	#LR__4795
2d480     FF AD CE F7 | 	test	local04, #511 wz
2d484     3C 01 90 5D |  if_ne	jmp	#LR__4794
2d488     18 A6 06 F1 | 	add	local01, #24
2d48c     53 95 02 FB | 	rdlong	arg02, local01
2d490     01 94 06 F1 | 	add	arg02, #1
2d494     53 95 62 FC | 	wrlong	arg02, local01
2d498     04 A6 86 F1 | 	sub	local01, #4
2d49c     53 95 0A FB | 	rdlong	arg02, local01 wz
2d4a0     14 A6 86 F1 | 	sub	local01, #20
2d4a4     2C 00 90 5D |  if_ne	jmp	#LR__4790
2d4a8     56 95 02 F6 | 	mov	arg02, local04
2d4ac     05 94 46 F0 | 	shr	arg02, #5
2d4b0     08 AA 06 F1 | 	add	local03, #8
2d4b4     55 A9 E2 FA | 	rdword	local02, local03
2d4b8     08 AA 86 F1 | 	sub	local03, #8
2d4bc     54 95 12 F2 | 	cmp	arg02, local02 wc
2d4c0     18 A6 06 31 |  if_ae	add	local01, #24
2d4c4     53 01 68 3C |  if_ae	wrlong	#0, local01
2d4c8                 | ' 				dp->sect = 0; return FR_NO_FILE;
2d4c8     04 7A 06 36 |  if_ae	mov	result1, #4
2d4cc     14 01 90 3D |  if_ae	jmp	#LR__4795
2d4d0     F0 00 90 FD | 	jmp	#LR__4793
2d4d4                 | LR__4790
2d4d4     56 93 02 F6 | 	mov	arg01, local04
2d4d8     09 92 46 F0 | 	shr	arg01, #9
2d4dc     0A AA 06 F1 | 	add	local03, #10
2d4e0     55 95 E2 FA | 	rdword	arg02, local03
2d4e4     0A AA 86 F1 | 	sub	local03, #10
2d4e8     01 94 86 F1 | 	sub	arg02, #1
2d4ec     4A 93 CA F7 | 	test	arg01, arg02 wz
2d4f0     D0 00 90 5D |  if_ne	jmp	#LR__4792
2d4f4     53 93 02 F6 | 	mov	arg01, local01
2d4f8     14 A6 06 F1 | 	add	local01, #20
2d4fc     53 95 02 FB | 	rdlong	arg02, local01
2d500     14 A6 86 F1 | 	sub	local01, #20
2d504     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2d508     3D AF 02 F6 | 	mov	local05, result1
2d50c     02 AE 16 F2 | 	cmp	local05, #2 wc
2d510     02 7A 06 C6 |  if_b	mov	result1, #2
2d514     CC 00 90 CD |  if_b	jmp	#LR__4795
2d518     FF FF 7F FF 
2d51c     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2d520     01 7A 06 A6 |  if_e	mov	result1, #1
2d524     BC 00 90 AD |  if_e	jmp	#LR__4795
2d528     18 AA 06 F1 | 	add	local03, #24
2d52c     55 95 02 FB | 	rdlong	arg02, local03
2d530     18 AA 86 F1 | 	sub	local03, #24
2d534     4A AF 12 F2 | 	cmp	local05, arg02 wc
2d538     68 00 90 CD |  if_b	jmp	#LR__4791
2d53c     00 A8 0E F2 | 	cmp	local02, #0 wz
2d540     18 A6 06 A1 |  if_e	add	local01, #24
2d544     53 01 68 AC |  if_e	wrlong	#0, local01
2d548                 | ' 						dp->sect = 0; return FR_NO_FILE;
2d548     04 7A 06 A6 |  if_e	mov	result1, #4
2d54c     94 00 90 AD |  if_e	jmp	#LR__4795
2d550     53 93 02 F6 | 	mov	arg01, local01
2d554     14 A6 06 F1 | 	add	local01, #20
2d558     53 95 02 FB | 	rdlong	arg02, local01
2d55c     14 A6 86 F1 | 	sub	local01, #20
2d560     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2d564     3D AF 0A F6 | 	mov	local05, result1 wz
2d568     07 7A 06 A6 |  if_e	mov	result1, #7
2d56c     74 00 90 AD |  if_e	jmp	#LR__4795
2d570     01 AE 0E F2 | 	cmp	local05, #1 wz
2d574     02 7A 06 A6 |  if_e	mov	result1, #2
2d578     68 00 90 AD |  if_e	jmp	#LR__4795
2d57c     FF FF 7F FF 
2d580     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2d584     01 7A 06 A6 |  if_e	mov	result1, #1
2d588     58 00 90 AD |  if_e	jmp	#LR__4795
2d58c     57 95 02 F6 | 	mov	arg02, local05
2d590     55 93 02 F6 | 	mov	arg01, local03
2d594     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2d598     00 7A 0E F2 | 	cmp	result1, #0 wz
2d59c     01 7A 06 56 |  if_ne	mov	result1, #1
2d5a0     40 00 90 5D |  if_ne	jmp	#LR__4795
2d5a4                 | LR__4791
2d5a4     14 A6 06 F1 | 	add	local01, #20
2d5a8     53 AF 62 FC | 	wrlong	local05, local01
2d5ac     55 93 02 F6 | 	mov	arg01, local03
2d5b0     57 95 02 F6 | 	mov	arg02, local05
2d5b4     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2d5b8     04 A6 06 F1 | 	add	local01, #4
2d5bc     53 7B 62 FC | 	wrlong	result1, local01
2d5c0     18 A6 86 F1 | 	sub	local01, #24
2d5c4                 | LR__4792
2d5c4                 | LR__4793
2d5c4                 | LR__4794
2d5c4     10 A6 06 F1 | 	add	local01, #16
2d5c8     53 AD 62 FC | 	wrlong	local04, local01
2d5cc     34 AA 06 F1 | 	add	local03, #52
2d5d0     FF AD 06 F5 | 	and	local04, #511
2d5d4     56 AB 02 F1 | 	add	local03, local04
2d5d8     0C A6 06 F1 | 	add	local01, #12
2d5dc     53 AB 62 FC | 	wrlong	local03, local01
2d5e0                 | ' #line 1771 "ff.c"
2d5e0                 | ' 				}
2d5e0                 | ' 				dp->clust = clst;
2d5e0                 | ' 				dp->sect = clst2sect(fs, clst);
2d5e0                 | ' 			}
2d5e0                 | ' 		}
2d5e0                 | ' 	}
2d5e0                 | ' 	dp->dptr = ofs;
2d5e0                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2d5e0                 | ' 
2d5e0                 | ' 	return FR_OK;
2d5e0     00 7A 06 F6 | 	mov	result1, #0
2d5e4                 | LR__4795
2d5e4     E7 F0 03 F6 | 	mov	ptra, fp
2d5e8     F2 00 A0 FD | 	call	#popregs_
2d5ec                 | _fatfs_cc_dir_next_ret
2d5ec     2D 00 64 FD | 	ret
2d5f0                 | 
2d5f0                 | _fatfs_cc_dir_alloc
2d5f0     08 CA 05 F6 | 	mov	COUNT_, #8
2d5f4     E8 00 A0 FD | 	call	#pushregs_
2d5f8     49 A7 02 F6 | 	mov	local01, arg01
2d5fc     4A A9 02 F6 | 	mov	local02, arg02
2d600     53 AB 02 FB | 	rdlong	local03, local01
2d604     53 93 02 F6 | 	mov	arg01, local01
2d608     00 94 06 F6 | 	mov	arg02, #0
2d60c     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2d610     3D AD 0A F6 | 	mov	local04, result1 wz
2d614     70 00 90 5D |  if_ne	jmp	#LR__4804
2d618     00 AE 06 F6 | 	mov	local05, #0
2d61c                 | ' 		n = 0;
2d61c                 | ' 		do {
2d61c                 | LR__4800
2d61c     18 A6 06 F1 | 	add	local01, #24
2d620     53 95 02 FB | 	rdlong	arg02, local01
2d624     18 A6 86 F1 | 	sub	local01, #24
2d628     55 93 02 F6 | 	mov	arg01, local03
2d62c     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2d630     3D AD 0A F6 | 	mov	local04, result1 wz
2d634     50 00 90 5D |  if_ne	jmp	#LR__4803
2d638     1C A6 06 F1 | 	add	local01, #28
2d63c     53 B1 02 FB | 	rdlong	local06, local01
2d640     1C A6 86 F1 | 	sub	local01, #28
2d644     58 B1 C2 FA | 	rdbyte	local06, local06
2d648     E5 B0 0E F2 | 	cmp	local06, #229 wz
2d64c     1C A6 06 51 |  if_ne	add	local01, #28
2d650     53 B3 02 5B |  if_ne	rdlong	local07, local01
2d654     1C A6 86 51 |  if_ne	sub	local01, #28
2d658     59 B5 CA 5A |  if_ne	rdbyte	local08, local07 wz
2d65c     10 00 90 5D |  if_ne	jmp	#LR__4801
2d660     01 AE 06 F1 | 	add	local05, #1
2d664     54 AF 0A F2 | 	cmp	local05, local02 wz
2d668     1C 00 90 AD |  if_e	jmp	#LR__4803
2d66c     04 00 90 FD | 	jmp	#LR__4802
2d670                 | LR__4801
2d670     00 AE 06 F6 | 	mov	local05, #0
2d674                 | LR__4802
2d674     53 93 02 F6 | 	mov	arg01, local01
2d678     01 94 06 F6 | 	mov	arg02, #1
2d67c     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2d680     3D AD 0A F6 | 	mov	local04, result1 wz
2d684     94 FF 9F AD |  if_e	jmp	#LR__4800
2d688                 | LR__4803
2d688                 | LR__4804
2d688     04 AC 0E F2 | 	cmp	local04, #4 wz
2d68c     07 AC 06 A6 |  if_e	mov	local04, #7
2d690                 | ' 	return res;
2d690     56 7B 02 F6 | 	mov	result1, local04
2d694     E7 F0 03 F6 | 	mov	ptra, fp
2d698     F2 00 A0 FD | 	call	#popregs_
2d69c                 | _fatfs_cc_dir_alloc_ret
2d69c     2D 00 64 FD | 	ret
2d6a0                 | 
2d6a0                 | _fatfs_cc_ld_clust
2d6a0     49 81 02 F6 | 	mov	_var01, arg01
2d6a4     4A 93 02 F6 | 	mov	arg01, arg02
2d6a8     1A 92 06 F1 | 	add	arg01, #26
2d6ac                 | ' {
2d6ac                 | ' 
2d6ac                 | ' 	return *((WORD*)ptr);
2d6ac     49 7B E2 FA | 	rdword	result1, arg01
2d6b0     3D 93 32 F9 | 	getword	arg01, result1, #0
2d6b4     40 81 C2 FA | 	rdbyte	_var01, _var01
2d6b8     03 80 0E F2 | 	cmp	_var01, #3 wz
2d6bc     14 94 06 A1 |  if_e	add	arg02, #20
2d6c0                 | ' {
2d6c0                 | ' 
2d6c0                 | ' 	return *((WORD*)ptr);
2d6c0     4A 7B E2 AA |  if_e	rdword	result1, arg02
2d6c4     10 7A 66 A0 |  if_e	shl	result1, #16
2d6c8     3D 93 42 A5 |  if_e	or	arg01, result1
2d6cc                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2d6cc                 | ' 	}
2d6cc                 | ' 
2d6cc                 | ' 	return cl;
2d6cc     49 7B 02 F6 | 	mov	result1, arg01
2d6d0                 | _fatfs_cc_ld_clust_ret
2d6d0     2D 00 64 FD | 	ret
2d6d4                 | 
2d6d4                 | _fatfs_cc_st_clust
2d6d4     49 81 02 F6 | 	mov	_var01, arg01
2d6d8     4A 93 02 F6 | 	mov	arg01, arg02
2d6dc     1A 92 06 F1 | 	add	arg01, #26
2d6e0     49 97 52 FC | 	wrword	arg03, arg01
2d6e4     40 81 C2 FA | 	rdbyte	_var01, _var01
2d6e8     03 80 0E F2 | 	cmp	_var01, #3 wz
2d6ec     14 94 06 A1 |  if_e	add	arg02, #20
2d6f0     10 96 46 A0 |  if_e	shr	arg03, #16
2d6f4     4A 97 52 AC |  if_e	wrword	arg03, arg02
2d6f8                 | _fatfs_cc_st_clust_ret
2d6f8     2D 00 64 FD | 	ret
2d6fc                 | 
2d6fc                 | _fatfs_cc_cmp_lfn
2d6fc     07 CA 05 F6 | 	mov	COUNT_, #7
2d700     E8 00 A0 FD | 	call	#pushregs_
2d704     49 A7 02 F6 | 	mov	local01, arg01
2d708     4A 93 02 F6 | 	mov	arg01, arg02
2d70c     1A 92 06 F1 | 	add	arg01, #26
2d710                 | ' {
2d710                 | ' 
2d710                 | ' 	return *((WORD*)ptr);
2d710     49 7B EA FA | 	rdword	result1, arg01 wz
2d714     00 7A 06 56 |  if_ne	mov	result1, #0
2d718     D8 00 90 5D |  if_ne	jmp	#LR__4816
2d71c     4A A9 C2 FA | 	rdbyte	local02, arg02
2d720     3F A8 06 F5 | 	and	local02, #63
2d724     01 A8 86 F1 | 	sub	local02, #1
2d728     0D A8 06 FD | 	qmul	local02, #13
2d72c                 | ' 
2d72c                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2d72c                 | ' 
2d72c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2d72c     01 AA 06 F6 | 	mov	local03, #1
2d730     00 AC 06 F6 | 	mov	local04, #0
2d734     18 AE 62 FD | 	getqx	local05
2d738                 | LR__4810
2d738     0D AC 16 F2 | 	cmp	local04, #13 wc
2d73c     94 00 90 3D |  if_ae	jmp	#LR__4815
2d740     4A 93 02 F6 | 	mov	arg01, arg02
2d744     56 A9 02 F6 | 	mov	local02, local04
2d748     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2d74c     01 00 00 FF 
2d750     AE 7B 06 F1 | 	add	result1, ##942
2d754     3D A9 02 F1 | 	add	local02, result1
2d758     54 A9 C2 FA | 	rdbyte	local02, local02
2d75c     54 93 02 F1 | 	add	arg01, local02
2d760                 | ' {
2d760                 | ' 
2d760                 | ' 	return *((WORD*)ptr);
2d760     49 7B E2 FA | 	rdword	result1, arg01
2d764     3D B1 02 F6 | 	mov	local06, result1
2d768     55 A9 02 F6 | 	mov	local02, local03
2d76c     0F A8 4E F7 | 	zerox	local02, #15 wz
2d770     44 00 90 AD |  if_e	jmp	#LR__4813
2d774     00 AF 16 F2 | 	cmp	local05, #256 wc
2d778     2C 00 90 3D |  if_ae	jmp	#LR__4811
2d77c     58 93 32 F9 | 	getword	arg01, local06, #0
2d780     CC E4 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2d784     3D A9 02 F6 | 	mov	local02, result1
2d788     57 AB 02 F6 | 	mov	local03, local05
2d78c     01 AA 66 F0 | 	shl	local03, #1
2d790     53 AB 02 F1 | 	add	local03, local01
2d794     55 93 E2 FA | 	rdword	arg01, local03
2d798     01 AE 06 F1 | 	add	local05, #1
2d79c     B0 E4 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2d7a0     3D A9 0A F2 | 	cmp	local02, result1 wz
2d7a4     08 00 90 AD |  if_e	jmp	#LR__4812
2d7a8                 | LR__4811
2d7a8                 | ' 				return 0;
2d7a8     00 7A 06 F6 | 	mov	result1, #0
2d7ac     44 00 90 FD | 	jmp	#LR__4816
2d7b0                 | LR__4812
2d7b0     58 AB 02 F6 | 	mov	local03, local06
2d7b4     14 00 90 FD | 	jmp	#LR__4814
2d7b8                 | LR__4813
2d7b8     58 B1 32 F9 | 	getword	local06, local06, #0
2d7bc     7F 00 00 FF 
2d7c0     FF B1 0E F2 | 	cmp	local06, ##65535 wz
2d7c4     00 7A 06 56 |  if_ne	mov	result1, #0
2d7c8     28 00 90 5D |  if_ne	jmp	#LR__4816
2d7cc                 | LR__4814
2d7cc     01 AC 06 F1 | 	add	local04, #1
2d7d0     64 FF 9F FD | 	jmp	#LR__4810
2d7d4                 | LR__4815
2d7d4     4A A9 C2 FA | 	rdbyte	local02, arg02
2d7d8     40 A8 CE F7 | 	test	local02, #64 wz
2d7dc     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
2d7e0     01 AE 66 50 |  if_ne	shl	local05, #1
2d7e4     53 AF 02 51 |  if_ne	add	local05, local01
2d7e8     57 B3 EA 5A |  if_ne	rdword	local07, local05 wz
2d7ec     00 7A 06 56 |  if_ne	mov	result1, #0
2d7f0                 | ' 
2d7f0                 | ' 	return 1;
2d7f0     01 7A 06 A6 |  if_e	mov	result1, #1
2d7f4                 | LR__4816
2d7f4     E7 F0 03 F6 | 	mov	ptra, fp
2d7f8     F2 00 A0 FD | 	call	#popregs_
2d7fc                 | _fatfs_cc_cmp_lfn_ret
2d7fc     2D 00 64 FD | 	ret
2d800                 | 
2d800                 | _fatfs_cc_pick_lfn
2d800     49 81 02 F6 | 	mov	_var01, arg01
2d804     4A 93 02 F6 | 	mov	arg01, arg02
2d808     1A 92 06 F1 | 	add	arg01, #26
2d80c                 | ' {
2d80c                 | ' 
2d80c                 | ' 	return *((WORD*)ptr);
2d80c     49 7B EA FA | 	rdword	result1, arg01 wz
2d810     00 7A 06 56 |  if_ne	mov	result1, #0
2d814     CC 00 90 5D |  if_ne	jmp	#LR__4825
2d818     4A 83 C2 FA | 	rdbyte	_var02, arg02
2d81c     40 82 26 F5 | 	andn	_var02, #64
2d820     01 82 86 F1 | 	sub	_var02, #1
2d824     0D 82 06 FD | 	qmul	_var02, #13
2d828                 | ' 
2d828                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2d828                 | ' 
2d828                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2d828     01 84 06 F6 | 	mov	_var03, #1
2d82c     00 86 06 F6 | 	mov	_var04, #0
2d830     18 88 62 FD | 	getqx	_var05
2d834                 | LR__4820
2d834     0D 86 16 F2 | 	cmp	_var04, #13 wc
2d838     78 00 90 3D |  if_ae	jmp	#LR__4823
2d83c     4A 93 02 F6 | 	mov	arg01, arg02
2d840     43 83 02 F6 | 	mov	_var02, _var04
2d844     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2d848     01 00 00 FF 
2d84c     AE 7B 06 F1 | 	add	result1, ##942
2d850     3D 83 02 F1 | 	add	_var02, result1
2d854     41 83 C2 FA | 	rdbyte	_var02, _var02
2d858     41 93 02 F1 | 	add	arg01, _var02
2d85c                 | ' {
2d85c                 | ' 
2d85c                 | ' 	return *((WORD*)ptr);
2d85c     49 7B E2 FA | 	rdword	result1, arg01
2d860     3D 8B 02 F6 | 	mov	_var06, result1
2d864     42 83 02 F6 | 	mov	_var02, _var03
2d868     0F 82 4E F7 | 	zerox	_var02, #15 wz
2d86c     28 00 90 AD |  if_e	jmp	#LR__4821
2d870     00 89 16 F2 | 	cmp	_var05, #256 wc
2d874     00 7A 06 36 |  if_ae	mov	result1, #0
2d878     68 00 90 3D |  if_ae	jmp	#LR__4825
2d87c     44 83 02 F6 | 	mov	_var02, _var05
2d880     01 82 66 F0 | 	shl	_var02, #1
2d884     40 83 02 F1 | 	add	_var02, _var01
2d888     45 85 02 F6 | 	mov	_var03, _var06
2d88c     41 85 52 FC | 	wrword	_var03, _var02
2d890     01 88 06 F1 | 	add	_var05, #1
2d894     14 00 90 FD | 	jmp	#LR__4822
2d898                 | LR__4821
2d898     45 8B 32 F9 | 	getword	_var06, _var06, #0
2d89c     7F 00 00 FF 
2d8a0     FF 8B 0E F2 | 	cmp	_var06, ##65535 wz
2d8a4     00 7A 06 56 |  if_ne	mov	result1, #0
2d8a8     38 00 90 5D |  if_ne	jmp	#LR__4825
2d8ac                 | LR__4822
2d8ac     01 86 06 F1 | 	add	_var04, #1
2d8b0     80 FF 9F FD | 	jmp	#LR__4820
2d8b4                 | LR__4823
2d8b4     4A 83 C2 FA | 	rdbyte	_var02, arg02
2d8b8     40 82 CE F7 | 	test	_var02, #64 wz
2d8bc     42 8D 02 56 |  if_ne	mov	_var07, _var03
2d8c0     0F 8C 4E 57 |  if_ne	zerox	_var07, #15 wz
2d8c4     18 00 90 AD |  if_e	jmp	#LR__4824
2d8c8     00 89 16 F2 | 	cmp	_var05, #256 wc
2d8cc     00 7A 06 36 |  if_ae	mov	result1, #0
2d8d0     10 00 90 3D |  if_ae	jmp	#LR__4825
2d8d4     01 88 66 F0 | 	shl	_var05, #1
2d8d8     40 89 02 F1 | 	add	_var05, _var01
2d8dc     44 01 58 FC | 	wrword	#0, _var05
2d8e0                 | LR__4824
2d8e0                 | ' 		lfnbuf[i] = 0;
2d8e0                 | ' 	}
2d8e0                 | ' 
2d8e0                 | ' 	return 1;
2d8e0     01 7A 06 F6 | 	mov	result1, #1
2d8e4                 | LR__4825
2d8e4                 | _fatfs_cc_pick_lfn_ret
2d8e4     2D 00 64 FD | 	ret
2d8e8                 | 
2d8e8                 | _fatfs_cc_put_lfn
2d8e8     4A 81 02 F6 | 	mov	_var01, arg02
2d8ec     0D 80 06 F1 | 	add	_var01, #13
2d8f0     40 99 42 FC | 	wrbyte	arg04, _var01
2d8f4     4B 99 E2 F8 | 	getbyte	arg04, arg03, #0
2d8f8     01 98 86 F1 | 	sub	arg04, #1
2d8fc     0D 98 06 FD | 	qmul	arg04, #13
2d900     49 83 02 F6 | 	mov	_var02, arg01
2d904     02 80 86 F1 | 	sub	_var01, #2
2d908     40 1F 48 FC | 	wrbyte	#15, _var01
2d90c     01 80 06 F1 | 	add	_var01, #1
2d910     40 01 48 FC | 	wrbyte	#0, _var01
2d914     0C 80 86 F1 | 	sub	_var01, #12
2d918     40 93 02 F6 | 	mov	arg01, _var01
2d91c     1A 92 06 F1 | 	add	arg01, #26
2d920     49 01 58 FC | 	wrword	#0, arg01
2d924     00 84 06 F6 | 	mov	_var03, #0
2d928     00 86 06 F6 | 	mov	_var04, #0
2d92c                 | ' 	BYTE* dir,
2d92c                 | ' 	BYTE ord,
2d92c                 | ' 	BYTE sum
2d92c                 | ' )
2d92c                 | ' {
2d92c                 | ' 	UINT i, s;
2d92c                 | ' 	WCHAR wc;
2d92c                 | ' 
2d92c                 | ' 
2d92c                 | ' 	dir[ 13 ] = sum;
2d92c                 | ' 	dir[ 11 ] =  0x0F ;
2d92c                 | ' 	dir[ 12 ] = 0;
2d92c                 | ' 	st_word(dir +  26 , 0);
2d92c                 | ' 
2d92c                 | ' 	i = (ord - 1) * 13;
2d92c                 | ' 	s = wc = 0;
2d92c                 | ' 	do {
2d92c     18 88 62 FD | 	getqx	_var05
2d930     D7 2E 48 FB | 	callpa	#(@LR__4831-@LR__4830)>>2,fcache_load_ptr_
2d934                 | LR__4830
2d934     42 99 32 F9 | 	getword	arg04, _var03, #0
2d938     7F 00 00 FF 
2d93c     FF 99 0E F2 | 	cmp	arg04, ##65535 wz
2d940     44 93 02 56 |  if_ne	mov	arg01, _var05
2d944     01 88 06 51 |  if_ne	add	_var05, #1
2d948     01 92 66 50 |  if_ne	shl	arg01, #1
2d94c     41 93 02 51 |  if_ne	add	arg01, _var02
2d950     49 85 E2 5A |  if_ne	rdword	_var03, arg01
2d954     40 93 02 F6 | 	mov	arg01, _var01
2d958     43 99 02 F6 | 	mov	arg04, _var04
2d95c     36 95 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2d960     01 00 00 FF 
2d964     AE 95 06 F1 | 	add	arg02, ##942
2d968     4A 99 02 F1 | 	add	arg04, arg02
2d96c     4C 99 C2 FA | 	rdbyte	arg04, arg04
2d970     4C 93 02 F1 | 	add	arg01, arg04
2d974     49 85 52 FC | 	wrword	_var03, arg01
2d978     42 99 02 F6 | 	mov	arg04, _var03
2d97c     0F 98 4E F7 | 	zerox	arg04, #15 wz
2d980     0F 84 CE A9 |  if_e	bmask	_var03, #15
2d984     01 86 06 F1 | 	add	_var04, #1
2d988     0D 86 16 F2 | 	cmp	_var04, #13 wc
2d98c     A4 FF 9F CD |  if_b	jmp	#LR__4830
2d990                 | LR__4831
2d990     42 85 32 F9 | 	getword	_var03, _var03, #0
2d994     7F 00 00 FF 
2d998     FF 85 0E F2 | 	cmp	_var03, ##65535 wz
2d99c     01 88 66 50 |  if_ne	shl	_var05, #1
2d9a0     41 89 02 51 |  if_ne	add	_var05, _var02
2d9a4     44 89 EA 5A |  if_ne	rdword	_var05, _var05 wz
2d9a8     4B 97 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2d9ac     40 96 46 A5 |  if_e	or	arg03, #64
2d9b0     40 97 42 FC | 	wrbyte	arg03, _var01
2d9b4                 | _fatfs_cc_put_lfn_ret
2d9b4     2D 00 64 FD | 	ret
2d9b8                 | 
2d9b8                 | _fatfs_cc_gen_numname
2d9b8     08 CA 05 F6 | 	mov	COUNT_, #8
2d9bc     E8 00 A0 FD | 	call	#pushregs_
2d9c0     2C F0 07 F1 | 	add	ptra, #44
2d9c4     49 A7 02 F6 | 	mov	local01, arg01
2d9c8     4A A9 02 F6 | 	mov	local02, arg02
2d9cc     4B AB 02 F6 | 	mov	local03, arg03
2d9d0     4C AD 02 F6 | 	mov	local04, arg04
2d9d4     53 93 02 F6 | 	mov	arg01, local01
2d9d8     54 95 02 F6 | 	mov	arg02, local02
2d9dc     0B 96 06 F6 | 	mov	arg03, #11
2d9e0     84 6E BF FD | 	call	#__system____builtin_memmove
2d9e4     06 AC 16 F2 | 	cmp	local04, #6 wc
2d9e8     48 00 90 CD |  if_b	jmp	#LR__4845
2d9ec     56 AF 02 F6 | 	mov	local05, local04
2d9f0     D7 1E 48 FB | 	callpa	#(@LR__4843-@LR__4840)>>2,fcache_load_ptr_
2d9f4                 | ' 		sreg = seq;
2d9f4                 | ' 		while (*lfn) {
2d9f4                 | LR__4840
2d9f4     55 B1 EA FA | 	rdword	local06, local03 wz
2d9f8     34 00 90 AD |  if_e	jmp	#LR__4844
2d9fc     55 B3 E2 FA | 	rdword	local07, local03
2da00                 | ' 			wc = *lfn++;
2da00                 | ' 			for (i = 0; i < 16; i++) {
2da00     02 AA 06 F1 | 	add	local03, #2
2da04     10 12 DC FC | 	rep	@LR__4842, #16
2da08                 | LR__4841
2da08     01 AE 66 F0 | 	shl	local05, #1
2da0c     59 B1 32 F9 | 	getword	local06, local07, #0
2da10     01 B0 06 F5 | 	and	local06, #1
2da14     58 AF 02 F1 | 	add	local05, local06
2da18     59 B3 32 F9 | 	getword	local07, local07, #0
2da1c     01 B2 46 F0 | 	shr	local07, #1
2da20     10 AE 2E F4 | 	testbn	local05, #16 wz
2da24     88 00 00 5F 
2da28     21 AE 66 55 |  if_ne	xor	local05, ##69665
2da2c                 | LR__4842
2da2c     C4 FF 9F FD | 	jmp	#LR__4840
2da30                 | LR__4843
2da30                 | LR__4844
2da30     57 AD 02 F6 | 	mov	local04, local05
2da34                 | LR__4845
2da34     07 B2 06 F6 | 	mov	local07, #7
2da38     D7 1E 48 FB | 	callpa	#(@LR__4847-@LR__4846)>>2,fcache_load_ptr_
2da3c                 | ' 			}
2da3c                 | ' 		}
2da3c                 | ' 		seq = (UINT)sreg;
2da3c                 | ' 	}
2da3c                 | ' 
2da3c                 | ' 
2da3c                 | ' 	i = 7;
2da3c                 | ' 	do {
2da3c                 | LR__4846
2da3c     56 AF 42 F8 | 	getnib	local05, local04, #0
2da40     30 AE 06 F1 | 	add	local05, #48
2da44     04 AC 46 F0 | 	shr	local04, #4
2da48     57 B1 E2 F8 | 	getbyte	local06, local05, #0
2da4c     3A B0 16 F2 | 	cmp	local06, #58 wc
2da50     57 AF E2 38 |  if_ae	getbyte	local05, local05, #0
2da54     07 AE 06 31 |  if_ae	add	local05, #7
2da58     59 B1 02 F6 | 	mov	local06, local07
2da5c     01 B2 8E F1 | 	sub	local07, #1 wz
2da60     E7 AA 02 F6 | 	mov	local03, fp
2da64     10 AA 06 F1 | 	add	local03, #16
2da68     55 B1 02 F1 | 	add	local06, local03
2da6c     58 AF 42 FC | 	wrbyte	local05, local06
2da70     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
2da74     C4 FF 9F 5D |  if_ne	jmp	#LR__4846
2da78                 | LR__4847
2da78     59 B1 02 F6 | 	mov	local06, local07
2da7c     E7 AE 02 F6 | 	mov	local05, fp
2da80     10 AE 06 F1 | 	add	local05, #16
2da84     57 B1 02 F1 | 	add	local06, local05
2da88     58 FD 48 FC | 	wrbyte	#126, local06
2da8c                 | ' 	ns[i] = '~';
2da8c                 | ' 
2da8c                 | ' 
2da8c                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2da8c     00 AC 06 F6 | 	mov	local04, #0
2da90     D7 2A 48 FB | 	callpa	#(@LR__4850-@LR__4848)>>2,fcache_load_ptr_
2da94                 | LR__4848
2da94     59 AD 12 F2 | 	cmp	local04, local07 wc
2da98     4C 00 90 3D |  if_ae	jmp	#LR__4851
2da9c     56 AF 02 F6 | 	mov	local05, local04
2daa0     53 AF 02 F1 | 	add	local05, local01
2daa4     57 B1 C2 FA | 	rdbyte	local06, local05
2daa8     20 B0 0E F2 | 	cmp	local06, #32 wz
2daac     38 00 90 AD |  if_e	jmp	#LR__4851
2dab0     56 AB 02 F6 | 	mov	local03, local04
2dab4     53 AB 02 F1 | 	add	local03, local01
2dab8     55 93 CA FA | 	rdbyte	arg01, local03 wz
2dabc     00 7A 06 56 |  if_ne	mov	result1, #0
2dac0                 | ' 
2dac0                 | ' 	return 0;
2dac0     00 7A 06 A6 |  if_e	mov	result1, #0
2dac4     00 7A 0E F2 | 	cmp	result1, #0 wz
2dac8     14 00 90 AD |  if_e	jmp	#LR__4849
2dacc     59 AB 02 F6 | 	mov	local03, local07
2dad0     01 AA 86 F1 | 	sub	local03, #1
2dad4     55 AD 0A F2 | 	cmp	local04, local03 wz
2dad8     0C 00 90 AD |  if_e	jmp	#LR__4851
2dadc     01 AC 06 F1 | 	add	local04, #1
2dae0                 | LR__4849
2dae0     01 AC 06 F1 | 	add	local04, #1
2dae4     AC FF 9F FD | 	jmp	#LR__4848
2dae8                 | LR__4850
2dae8                 | LR__4851
2dae8     D7 20 48 FB | 	callpa	#(@LR__4855-@LR__4852)>>2,fcache_load_ptr_
2daec                 | ' 			j++;
2daec                 | ' 		}
2daec                 | ' 	}
2daec                 | ' 	do {
2daec                 | LR__4852
2daec     56 B1 02 F6 | 	mov	local06, local04
2daf0     53 B1 02 F1 | 	add	local06, local01
2daf4     08 B2 16 F2 | 	cmp	local07, #8 wc
2daf8     01 AC 06 F1 | 	add	local04, #1
2dafc     1C 00 90 3D |  if_ae	jmp	#LR__4853
2db00     59 AF 02 F6 | 	mov	local05, local07
2db04     E7 AA 02 F6 | 	mov	local03, fp
2db08     10 AA 06 F1 | 	add	local03, #16
2db0c     55 AF 02 F1 | 	add	local05, local03
2db10     57 B5 C2 FA | 	rdbyte	local08, local05
2db14     01 B2 06 F1 | 	add	local07, #1
2db18     04 00 90 FD | 	jmp	#LR__4854
2db1c                 | LR__4853
2db1c     20 B4 06 F6 | 	mov	local08, #32
2db20                 | LR__4854
2db20     58 B5 42 FC | 	wrbyte	local08, local06
2db24     08 AC 16 F2 | 	cmp	local04, #8 wc
2db28     C0 FF 9F CD |  if_b	jmp	#LR__4852
2db2c                 | LR__4855
2db2c     E7 F0 03 F6 | 	mov	ptra, fp
2db30     F2 00 A0 FD | 	call	#popregs_
2db34                 | _fatfs_cc_gen_numname_ret
2db34     2D 00 64 FD | 	ret
2db38                 | 
2db38                 | _fatfs_cc_sum_sfn
2db38     00 80 06 F6 | 	mov	_var01, #0
2db3c                 | ' )
2db3c                 | ' {
2db3c                 | ' 	BYTE sum = 0;
2db3c                 | ' 	UINT n = 11;
2db3c                 | ' 
2db3c                 | ' 	do {
2db3c     D7 12 48 FB | 	callpa	#(@LR__4862-@LR__4860)>>2,fcache_load_ptr_
2db40                 | LR__4860
2db40     0B 10 DC FC | 	rep	@LR__4863, #11
2db44                 | LR__4861
2db44     40 7B E2 F8 | 	getbyte	result1, _var01, #0
2db48     01 7A 46 F0 | 	shr	result1, #1
2db4c     40 81 E2 F8 | 	getbyte	_var01, _var01, #0
2db50     07 80 66 F0 | 	shl	_var01, #7
2db54     40 7B 02 F1 | 	add	result1, _var01
2db58     49 81 C2 FA | 	rdbyte	_var01, arg01
2db5c     3D 81 02 F1 | 	add	_var01, result1
2db60     01 92 06 F1 | 	add	arg01, #1
2db64                 | LR__4862
2db64                 | LR__4863
2db64                 | ' 	return sum;
2db64     40 7B 02 F6 | 	mov	result1, _var01
2db68                 | _fatfs_cc_sum_sfn_ret
2db68     2D 00 64 FD | 	ret
2db6c                 | 
2db6c                 | _fatfs_cc_dir_read
2db6c     0C CA 05 F6 | 	mov	COUNT_, #12
2db70     E8 00 A0 FD | 	call	#pushregs_
2db74     49 A7 02 F6 | 	mov	local01, arg01
2db78     4A A9 02 F6 | 	mov	local02, arg02
2db7c     04 AA 06 F6 | 	mov	local03, #4
2db80     53 AD 02 FB | 	rdlong	local04, local01
2db84     FF AE 06 F6 | 	mov	local05, #255
2db88     FF B0 06 F6 | 	mov	local06, #255
2db8c                 | ' )
2db8c                 | ' {
2db8c                 | ' 	FRESULT res = FR_NO_FILE;
2db8c                 | ' 	FATFS *fs = dp->obj.fs;
2db8c                 | ' 	BYTE attr, b;
2db8c                 | ' 
2db8c                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2db8c                 | ' 
2db8c                 | ' 
2db8c                 | ' 	while (dp->sect) {
2db8c                 | LR__4870
2db8c     18 A6 06 F1 | 	add	local01, #24
2db90     53 7B 0A FB | 	rdlong	result1, local01 wz
2db94     18 A6 86 F1 | 	sub	local01, #24
2db98     AC 01 90 AD |  if_e	jmp	#LR__4880
2db9c     18 A6 06 F1 | 	add	local01, #24
2dba0     53 95 02 FB | 	rdlong	arg02, local01
2dba4     18 A6 86 F1 | 	sub	local01, #24
2dba8     56 93 02 F6 | 	mov	arg01, local04
2dbac     B8 ED BF FD | 	call	#_fatfs_cc_move_window
2dbb0     3D AB 0A F6 | 	mov	local03, result1 wz
2dbb4     90 01 90 5D |  if_ne	jmp	#LR__4880
2dbb8     1C A6 06 F1 | 	add	local01, #28
2dbbc     53 7B 02 FB | 	rdlong	result1, local01
2dbc0     1C A6 86 F1 | 	sub	local01, #28
2dbc4     3D B3 C2 FA | 	rdbyte	local07, result1
2dbc8     59 7B 02 F6 | 	mov	result1, local07
2dbcc     07 7A 4E F7 | 	zerox	result1, #7 wz
2dbd0     04 AA 06 A6 |  if_e	mov	local03, #4
2dbd4                 | ' 			res = FR_NO_FILE; break;
2dbd4     70 01 90 AD |  if_e	jmp	#LR__4880
2dbd8     1C A6 06 F1 | 	add	local01, #28
2dbdc     53 B5 02 FB | 	rdlong	local08, local01
2dbe0     0B B4 06 F1 | 	add	local08, #11
2dbe4     5A B7 C2 FA | 	rdbyte	local09, local08
2dbe8     3F B6 06 F5 | 	and	local09, #63
2dbec     16 A6 86 F1 | 	sub	local01, #22
2dbf0     53 B7 42 FC | 	wrbyte	local09, local01
2dbf4     06 A6 86 F1 | 	sub	local01, #6
2dbf8     59 7B E2 F8 | 	getbyte	result1, local07, #0
2dbfc     E5 7A 0E F2 | 	cmp	result1, #229 wz
2dc00     59 B5 02 56 |  if_ne	mov	local08, local07
2dc04     5A B5 E2 58 |  if_ne	getbyte	local08, local08, #0
2dc08     2E B4 0E 52 |  if_ne	cmp	local08, #46 wz
2dc0c     1C 00 90 AD |  if_e	jmp	#LR__4871
2dc10     00 B8 06 F6 | 	mov	local10, #0
2dc14     5B B5 E2 F8 | 	getbyte	local08, local09, #0
2dc18     20 B4 26 F5 | 	andn	local08, #32
2dc1c     08 B4 0E F2 | 	cmp	local08, #8 wz
2dc20     01 B8 06 A6 |  if_e	mov	local10, #1
2dc24     54 B9 0A F2 | 	cmp	local10, local02 wz
2dc28     08 00 90 AD |  if_e	jmp	#LR__4872
2dc2c                 | LR__4871
2dc2c     FF AE 06 F6 | 	mov	local05, #255
2dc30     00 01 90 FD | 	jmp	#LR__4879
2dc34                 | LR__4872
2dc34     5B B7 E2 F8 | 	getbyte	local09, local09, #0
2dc38     0F B6 0E F2 | 	cmp	local09, #15 wz
2dc3c     B4 00 90 5D |  if_ne	jmp	#LR__4876
2dc40     59 BB E2 F8 | 	getbyte	local11, local07, #0
2dc44     40 BA CE F7 | 	test	local11, #64 wz
2dc48     30 00 90 AD |  if_e	jmp	#LR__4873
2dc4c     1C A6 06 F1 | 	add	local01, #28
2dc50     53 BB 02 FB | 	rdlong	local11, local01
2dc54     0D BA 06 F1 | 	add	local11, #13
2dc58     5D B1 C2 FA | 	rdbyte	local06, local11
2dc5c     59 B3 E2 F8 | 	getbyte	local07, local07, #0
2dc60     BF B2 06 F5 | 	and	local07, #191
2dc64     59 AF 02 F6 | 	mov	local05, local07
2dc68     0C A6 86 F1 | 	sub	local01, #12
2dc6c     53 BB 02 FB | 	rdlong	local11, local01
2dc70     1C A6 06 F1 | 	add	local01, #28
2dc74     53 BB 62 FC | 	wrlong	local11, local01
2dc78     2C A6 86 F1 | 	sub	local01, #44
2dc7c                 | LR__4873
2dc7c     59 B5 E2 F8 | 	getbyte	local08, local07, #0
2dc80     57 B9 E2 F8 | 	getbyte	local10, local05, #0
2dc84     5C B5 0A F2 | 	cmp	local08, local10 wz
2dc88     5C 00 90 5D |  if_ne	jmp	#LR__4874
2dc8c     58 B9 E2 F8 | 	getbyte	local10, local06, #0
2dc90     1C A6 06 F1 | 	add	local01, #28
2dc94     53 B7 02 FB | 	rdlong	local09, local01
2dc98     1C A6 86 F1 | 	sub	local01, #28
2dc9c     0D B6 06 F1 | 	add	local09, #13
2dca0     5B B5 C2 FA | 	rdbyte	local08, local09
2dca4     5A B7 E2 F8 | 	getbyte	local09, local08, #0
2dca8     5B B9 0A F2 | 	cmp	local10, local09 wz
2dcac     38 00 90 5D |  if_ne	jmp	#LR__4874
2dcb0     0C AC 06 F1 | 	add	local04, #12
2dcb4     56 93 02 FB | 	rdlong	arg01, local04
2dcb8     0C AC 86 F1 | 	sub	local04, #12
2dcbc     1C A6 06 F1 | 	add	local01, #28
2dcc0     53 BD 02 FB | 	rdlong	local12, local01
2dcc4     1C A6 86 F1 | 	sub	local01, #28
2dcc8     5E 95 02 F6 | 	mov	arg02, local12
2dccc     30 FB BF FD | 	call	#_fatfs_cc_pick_lfn
2dcd0     00 7A 4E F2 | 	cmps	result1, #0 wz
2dcd4     57 BD 02 56 |  if_ne	mov	local12, local05
2dcd8     5E BD E2 58 |  if_ne	getbyte	local12, local12, #0
2dcdc     01 BC 86 51 |  if_ne	sub	local12, #1
2dce0     5E BB 02 56 |  if_ne	mov	local11, local12
2dce4     04 00 90 5D |  if_ne	jmp	#LR__4875
2dce8                 | LR__4874
2dce8     FF BA 06 F6 | 	mov	local11, #255
2dcec                 | LR__4875
2dcec     5D AF 02 F6 | 	mov	local05, local11
2dcf0     40 00 90 FD | 	jmp	#LR__4878
2dcf4                 | LR__4876
2dcf4     57 BB 02 F6 | 	mov	local11, local05
2dcf8     07 BA 4E F7 | 	zerox	local11, #7 wz
2dcfc     20 00 90 5D |  if_ne	jmp	#LR__4877
2dd00     58 B1 E2 F8 | 	getbyte	local06, local06, #0
2dd04     1C A6 06 F1 | 	add	local01, #28
2dd08     53 93 02 FB | 	rdlong	arg01, local01
2dd0c     1C A6 86 F1 | 	sub	local01, #28
2dd10     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2dd14     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2dd18     3D B1 0A F2 | 	cmp	local06, result1 wz
2dd1c     28 00 90 AD |  if_e	jmp	#LR__4880
2dd20                 | LR__4877
2dd20     2C A6 06 F1 | 	add	local01, #44
2dd24     FF FF FF FF 
2dd28     53 FF 6B FC | 	wrlong	##-1, local01
2dd2c     2C A6 86 F1 | 	sub	local01, #44
2dd30                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2dd30                 | ' 					}
2dd30                 | ' 					break;
2dd30     14 00 90 FD | 	jmp	#LR__4880
2dd34                 | LR__4878
2dd34                 | LR__4879
2dd34     53 93 02 F6 | 	mov	arg01, local01
2dd38     00 94 06 F6 | 	mov	arg02, #0
2dd3c     F4 F6 BF FD | 	call	#_fatfs_cc_dir_next
2dd40     3D AB 0A F6 | 	mov	local03, result1 wz
2dd44     44 FE 9F AD |  if_e	jmp	#LR__4870
2dd48                 | LR__4880
2dd48     00 AA 0E F2 | 	cmp	local03, #0 wz
2dd4c     18 A6 06 51 |  if_ne	add	local01, #24
2dd50     53 01 68 5C |  if_ne	wrlong	#0, local01
2dd54                 | ' 	return res;
2dd54     55 7B 02 F6 | 	mov	result1, local03
2dd58     E7 F0 03 F6 | 	mov	ptra, fp
2dd5c     F2 00 A0 FD | 	call	#popregs_
2dd60                 | _fatfs_cc_dir_read_ret
2dd60     2D 00 64 FD | 	ret
2dd64                 | 
2dd64                 | _fatfs_cc_dir_find
2dd64     0B CA 05 F6 | 	mov	COUNT_, #11
2dd68     E8 00 A0 FD | 	call	#pushregs_
2dd6c     49 A7 02 F6 | 	mov	local01, arg01
2dd70     53 A9 02 FB | 	rdlong	local02, local01
2dd74     53 93 02 F6 | 	mov	arg01, local01
2dd78     00 94 06 F6 | 	mov	arg02, #0
2dd7c     4C F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2dd80     00 7A 0E F2 | 	cmp	result1, #0 wz
2dd84     18 02 90 5D |  if_ne	jmp	#LR__4902
2dd88     FF AA 06 F6 | 	mov	local03, #255
2dd8c     FF AC 06 F6 | 	mov	local04, #255
2dd90     2C A6 06 F1 | 	add	local01, #44
2dd94     FF FF FF FF 
2dd98     53 FF 6B FC | 	wrlong	##-1, local01
2dd9c     2C A6 86 F1 | 	sub	local01, #44
2dda0                 | ' #line 2404 "ff.c"
2dda0                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2dda0                 | ' 
2dda0                 | ' 	do {
2dda0                 | LR__4890
2dda0     18 A6 06 F1 | 	add	local01, #24
2dda4     53 95 02 FB | 	rdlong	arg02, local01
2dda8     18 A6 86 F1 | 	sub	local01, #24
2ddac     54 93 02 F6 | 	mov	arg01, local02
2ddb0     B4 EB BF FD | 	call	#_fatfs_cc_move_window
2ddb4     3D AF 0A F6 | 	mov	local05, result1 wz
2ddb8     E0 01 90 5D |  if_ne	jmp	#LR__4901
2ddbc     1C A6 06 F1 | 	add	local01, #28
2ddc0     53 97 02 FB | 	rdlong	arg03, local01
2ddc4     1C A6 86 F1 | 	sub	local01, #28
2ddc8     4B B1 C2 FA | 	rdbyte	local06, arg03
2ddcc     58 97 02 F6 | 	mov	arg03, local06
2ddd0     07 96 4E F7 | 	zerox	arg03, #7 wz
2ddd4     04 AE 06 A6 |  if_e	mov	local05, #4
2ddd8     C0 01 90 AD |  if_e	jmp	#LR__4901
2dddc     1C A6 06 F1 | 	add	local01, #28
2dde0     53 B3 02 FB | 	rdlong	local07, local01
2dde4     59 97 02 F6 | 	mov	arg03, local07
2dde8     0B 96 06 F1 | 	add	arg03, #11
2ddec     4B B5 C2 FA | 	rdbyte	local08, arg03
2ddf0     3F B4 06 F5 | 	and	local08, #63
2ddf4     16 A6 86 F1 | 	sub	local01, #22
2ddf8     53 B5 42 FC | 	wrbyte	local08, local01
2ddfc     06 A6 86 F1 | 	sub	local01, #6
2de00     58 97 E2 F8 | 	getbyte	arg03, local06, #0
2de04     E5 96 0E F2 | 	cmp	arg03, #229 wz
2de08     18 00 90 AD |  if_e	jmp	#LR__4891
2de0c     5A 97 E2 F8 | 	getbyte	arg03, local08, #0
2de10     08 96 CE F7 | 	test	arg03, #8 wz
2de14     5A B3 02 56 |  if_ne	mov	local07, local08
2de18     59 B3 E2 58 |  if_ne	getbyte	local07, local07, #0
2de1c     0F B2 0E 52 |  if_ne	cmp	local07, #15 wz
2de20     18 00 90 AD |  if_e	jmp	#LR__4892
2de24                 | LR__4891
2de24     FF AC 06 F6 | 	mov	local04, #255
2de28     2C A6 06 F1 | 	add	local01, #44
2de2c     FF FF FF FF 
2de30     53 FF 6B FC | 	wrlong	##-1, local01
2de34     2C A6 86 F1 | 	sub	local01, #44
2de38     4C 01 90 FD | 	jmp	#LR__4900
2de3c                 | LR__4892
2de3c     5A B5 E2 F8 | 	getbyte	local08, local08, #0
2de40     0F B4 0E F2 | 	cmp	local08, #15 wz
2de44     C8 00 90 5D |  if_ne	jmp	#LR__4896
2de48     2B A6 06 F1 | 	add	local01, #43
2de4c     53 B5 C2 FA | 	rdbyte	local08, local01
2de50     2B A6 86 F1 | 	sub	local01, #43
2de54     40 B4 CE F7 | 	test	local08, #64 wz
2de58     2C 01 90 5D |  if_ne	jmp	#LR__4899
2de5c     58 B7 E2 F8 | 	getbyte	local09, local06, #0
2de60     40 B6 CE F7 | 	test	local09, #64 wz
2de64     30 00 90 AD |  if_e	jmp	#LR__4893
2de68     1C A6 06 F1 | 	add	local01, #28
2de6c     53 B7 02 FB | 	rdlong	local09, local01
2de70     0D B6 06 F1 | 	add	local09, #13
2de74     5B AB C2 FA | 	rdbyte	local03, local09
2de78     58 B1 E2 F8 | 	getbyte	local06, local06, #0
2de7c     BF B0 06 F5 | 	and	local06, #191
2de80     58 AD 02 F6 | 	mov	local04, local06
2de84     0C A6 86 F1 | 	sub	local01, #12
2de88     53 B7 02 FB | 	rdlong	local09, local01
2de8c     1C A6 06 F1 | 	add	local01, #28
2de90     53 B7 62 FC | 	wrlong	local09, local01
2de94     2C A6 86 F1 | 	sub	local01, #44
2de98                 | LR__4893
2de98     58 B9 E2 F8 | 	getbyte	local10, local06, #0
2de9c     56 B3 E2 F8 | 	getbyte	local07, local04, #0
2dea0     59 B9 0A F2 | 	cmp	local10, local07 wz
2dea4     5C 00 90 5D |  if_ne	jmp	#LR__4894
2dea8     55 B5 E2 F8 | 	getbyte	local08, local03, #0
2deac     1C A6 06 F1 | 	add	local01, #28
2deb0     53 B3 02 FB | 	rdlong	local07, local01
2deb4     1C A6 86 F1 | 	sub	local01, #28
2deb8     0D B2 06 F1 | 	add	local07, #13
2debc     59 B1 C2 FA | 	rdbyte	local06, local07
2dec0     58 B3 E2 F8 | 	getbyte	local07, local06, #0
2dec4     59 B5 0A F2 | 	cmp	local08, local07 wz
2dec8     38 00 90 5D |  if_ne	jmp	#LR__4894
2decc     0C A8 06 F1 | 	add	local02, #12
2ded0     54 93 02 FB | 	rdlong	arg01, local02
2ded4     0C A8 86 F1 | 	sub	local02, #12
2ded8     1C A6 06 F1 | 	add	local01, #28
2dedc     53 BB 02 FB | 	rdlong	local11, local01
2dee0     1C A6 86 F1 | 	sub	local01, #28
2dee4     5D 95 02 F6 | 	mov	arg02, local11
2dee8     10 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2deec     00 7A 4E F2 | 	cmps	result1, #0 wz
2def0     56 BB 02 56 |  if_ne	mov	local11, local04
2def4     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2def8     01 BA 86 51 |  if_ne	sub	local11, #1
2defc     5D B7 02 56 |  if_ne	mov	local09, local11
2df00     04 00 90 5D |  if_ne	jmp	#LR__4895
2df04                 | LR__4894
2df04     FF B6 06 F6 | 	mov	local09, #255
2df08                 | LR__4895
2df08     5B AD 02 F6 | 	mov	local04, local09
2df0c     78 00 90 FD | 	jmp	#LR__4899
2df10                 | LR__4896
2df10     56 B7 02 F6 | 	mov	local09, local04
2df14     07 B6 4E F7 | 	zerox	local09, #7 wz
2df18     20 00 90 5D |  if_ne	jmp	#LR__4897
2df1c     55 B9 E2 F8 | 	getbyte	local10, local03, #0
2df20     1C A6 06 F1 | 	add	local01, #28
2df24     53 93 02 FB | 	rdlong	arg01, local01
2df28     1C A6 86 F1 | 	sub	local01, #28
2df2c     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2df30     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2df34     3D B9 0A F2 | 	cmp	local10, result1 wz
2df38     60 00 90 AD |  if_e	jmp	#LR__4901
2df3c                 | LR__4897
2df3c     2B A6 06 F1 | 	add	local01, #43
2df40     53 B7 C2 FA | 	rdbyte	local09, local01
2df44     2B A6 86 F1 | 	sub	local01, #43
2df48     01 B6 CE F7 | 	test	local09, #1 wz
2df4c     24 00 90 5D |  if_ne	jmp	#LR__4898
2df50     1C A6 06 F1 | 	add	local01, #28
2df54     53 93 02 FB | 	rdlong	arg01, local01
2df58     04 A6 06 F1 | 	add	local01, #4
2df5c     53 95 02 F6 | 	mov	arg02, local01
2df60     20 A6 86 F1 | 	sub	local01, #32
2df64     0B 96 06 F6 | 	mov	arg03, #11
2df68     B0 DE BF FD | 	call	#_fatfs_cc_memcmp
2df6c     00 7A 0E F2 | 	cmp	result1, #0 wz
2df70     28 00 90 AD |  if_e	jmp	#LR__4901
2df74                 | LR__4898
2df74     FF AC 06 F6 | 	mov	local04, #255
2df78     2C A6 06 F1 | 	add	local01, #44
2df7c     FF FF FF FF 
2df80     53 FF 6B FC | 	wrlong	##-1, local01
2df84     2C A6 86 F1 | 	sub	local01, #44
2df88                 | LR__4899
2df88                 | LR__4900
2df88     53 93 02 F6 | 	mov	arg01, local01
2df8c     00 94 06 F6 | 	mov	arg02, #0
2df90     A0 F4 BF FD | 	call	#_fatfs_cc_dir_next
2df94     3D AF 0A F6 | 	mov	local05, result1 wz
2df98     04 FE 9F AD |  if_e	jmp	#LR__4890
2df9c                 | LR__4901
2df9c                 | ' 
2df9c                 | ' 	return res;
2df9c     57 7B 02 F6 | 	mov	result1, local05
2dfa0                 | LR__4902
2dfa0     E7 F0 03 F6 | 	mov	ptra, fp
2dfa4     F2 00 A0 FD | 	call	#popregs_
2dfa8                 | _fatfs_cc_dir_find_ret
2dfa8     2D 00 64 FD | 	ret
2dfac                 | 
2dfac                 | _fatfs_cc_dir_register
2dfac     09 CA 05 F6 | 	mov	COUNT_, #9
2dfb0     E8 00 A0 FD | 	call	#pushregs_
2dfb4     2C F0 07 F1 | 	add	ptra, #44
2dfb8     49 A7 02 F6 | 	mov	local01, arg01
2dfbc     53 A9 02 FB | 	rdlong	local02, local01
2dfc0     2B A6 06 F1 | 	add	local01, #43
2dfc4     53 AB C2 FA | 	rdbyte	local03, local01
2dfc8     2B A6 86 F1 | 	sub	local01, #43
2dfcc     A0 AA CE F7 | 	test	local03, #160 wz
2dfd0     06 7A 06 56 |  if_ne	mov	result1, #6
2dfd4     2C 02 90 5D |  if_ne	jmp	#LR__4921
2dfd8                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2dfd8     00 AC 06 F6 | 	mov	local04, #0
2dfdc     0C A8 06 F1 | 	add	local02, #12
2dfe0     D7 12 48 FB | 	callpa	#(@LR__4911-@LR__4910)>>2,fcache_load_ptr_
2dfe4                 | LR__4910
2dfe4     54 AB 02 FB | 	rdlong	local03, local02
2dfe8     56 99 02 F6 | 	mov	arg04, local04
2dfec     01 98 66 F0 | 	shl	arg04, #1
2dff0     55 99 02 F1 | 	add	arg04, local03
2dff4     4C AB EA FA | 	rdword	local03, arg04 wz
2dff8     56 AF 02 56 |  if_ne	mov	local05, local04
2dffc     01 AE 06 51 |  if_ne	add	local05, #1
2e000     57 AD 02 56 |  if_ne	mov	local04, local05
2e004     DC FF 9F 5D |  if_ne	jmp	#LR__4910
2e008                 | LR__4911
2e008     0C A8 86 F1 | 	sub	local02, #12
2e00c     E7 92 02 F6 | 	mov	arg01, fp
2e010     1C 92 06 F1 | 	add	arg01, #28
2e014     53 95 02 F6 | 	mov	arg02, local01
2e018     20 94 06 F1 | 	add	arg02, #32
2e01c     0C 96 06 F6 | 	mov	arg03, #12
2e020     44 68 BF FD | 	call	#__system____builtin_memmove
2e024     27 CE 05 F1 | 	add	fp, #39
2e028     E7 AA C2 FA | 	rdbyte	local03, fp
2e02c     27 CE 85 F1 | 	sub	fp, #39
2e030     01 AA CE F7 | 	test	local03, #1 wz
2e034     80 00 90 AD |  if_e	jmp	#LR__4914
2e038     2B A6 06 F1 | 	add	local01, #43
2e03c     53 81 48 FC | 	wrbyte	#64, local01
2e040     2B A6 86 F1 | 	sub	local01, #43
2e044                 | ' 		dp->fn[ 11 ] =  0x40 ;
2e044                 | ' 		for (n = 1; n < 100; n++) {
2e044     01 B0 06 F6 | 	mov	local06, #1
2e048                 | LR__4912
2e048     64 B0 16 F2 | 	cmp	local06, #100 wc
2e04c     38 00 90 3D |  if_ae	jmp	#LR__4913
2e050     53 93 02 F6 | 	mov	arg01, local01
2e054     20 92 06 F1 | 	add	arg01, #32
2e058     E7 94 02 F6 | 	mov	arg02, fp
2e05c     1C 94 06 F1 | 	add	arg02, #28
2e060     0C A8 06 F1 | 	add	local02, #12
2e064     54 97 02 FB | 	rdlong	arg03, local02
2e068     0C A8 86 F1 | 	sub	local02, #12
2e06c     58 99 02 F6 | 	mov	arg04, local06
2e070     44 F9 BF FD | 	call	#_fatfs_cc_gen_numname
2e074     53 93 02 F6 | 	mov	arg01, local01
2e078     E8 FC BF FD | 	call	#_fatfs_cc_dir_find
2e07c     3D B3 0A F6 | 	mov	local07, result1 wz
2e080     01 B0 06 A1 |  if_e	add	local06, #1
2e084     C0 FF 9F AD |  if_e	jmp	#LR__4912
2e088                 | LR__4913
2e088     64 B0 0E F2 | 	cmp	local06, #100 wz
2e08c     07 7A 06 A6 |  if_e	mov	result1, #7
2e090     70 01 90 AD |  if_e	jmp	#LR__4921
2e094     04 B2 0E F2 | 	cmp	local07, #4 wz
2e098     59 7B 02 56 |  if_ne	mov	result1, local07
2e09c     64 01 90 5D |  if_ne	jmp	#LR__4921
2e0a0     27 CE 05 F1 | 	add	fp, #39
2e0a4     E7 AA C2 FA | 	rdbyte	local03, fp
2e0a8     27 CE 85 F1 | 	sub	fp, #39
2e0ac     2B A6 06 F1 | 	add	local01, #43
2e0b0     53 AB 42 FC | 	wrbyte	local03, local01
2e0b4     2B A6 86 F1 | 	sub	local01, #43
2e0b8                 | LR__4914
2e0b8     27 CE 05 F1 | 	add	fp, #39
2e0bc     E7 B2 C2 FA | 	rdbyte	local07, fp
2e0c0     02 B2 CE F7 | 	test	local07, #2 wz
2e0c4     0C AC 06 51 |  if_ne	add	local04, #12
2e0c8     0D AC 16 5D |  if_ne	qdiv	local04, #13
2e0cc     27 CE 85 F1 | 	sub	fp, #39
2e0d0     53 93 02 F6 | 	mov	arg01, local01
2e0d4     18 AA 62 5D |  if_ne	getqx	local03
2e0d8     01 AA 06 51 |  if_ne	add	local03, #1
2e0dc     01 AA 06 A6 |  if_e	mov	local03, #1
2e0e0     55 B5 02 F6 | 	mov	local08, local03
2e0e4     5A 95 02 F6 | 	mov	arg02, local08
2e0e8     04 F5 BF FD | 	call	#_fatfs_cc_dir_alloc
2e0ec     3D B3 0A F6 | 	mov	local07, result1 wz
2e0f0     9C 00 90 5D |  if_ne	jmp	#LR__4918
2e0f4     01 B4 8E F1 | 	sub	local08, #1 wz
2e0f8     94 00 90 AD |  if_e	jmp	#LR__4918
2e0fc     53 93 02 F6 | 	mov	arg01, local01
2e100     5A B3 02 F6 | 	mov	local07, local08
2e104     05 B2 66 F0 | 	shl	local07, #5
2e108     10 A6 06 F1 | 	add	local01, #16
2e10c     53 95 02 FB | 	rdlong	arg02, local01
2e110     10 A6 86 F1 | 	sub	local01, #16
2e114     59 95 82 F1 | 	sub	arg02, local07
2e118     B0 F1 BF FD | 	call	#_fatfs_cc_dir_sdi
2e11c     3D B3 0A F6 | 	mov	local07, result1 wz
2e120     6C 00 90 5D |  if_ne	jmp	#LR__4917
2e124     53 93 02 F6 | 	mov	arg01, local01
2e128     20 92 06 F1 | 	add	arg01, #32
2e12c     08 FA BF FD | 	call	#_fatfs_cc_sum_sfn
2e130     3D B7 02 F6 | 	mov	local09, result1
2e134                 | ' 			sum = sum_sfn(dp->fn);
2e134                 | ' 			do {
2e134                 | LR__4915
2e134     18 A6 06 F1 | 	add	local01, #24
2e138     53 95 02 FB | 	rdlong	arg02, local01
2e13c     18 A6 86 F1 | 	sub	local01, #24
2e140     54 93 02 F6 | 	mov	arg01, local02
2e144     20 E8 BF FD | 	call	#_fatfs_cc_move_window
2e148     3D B3 0A F6 | 	mov	local07, result1 wz
2e14c     40 00 90 5D |  if_ne	jmp	#LR__4916
2e150     0C A8 06 F1 | 	add	local02, #12
2e154     54 93 02 FB | 	rdlong	arg01, local02
2e158     1C A6 06 F1 | 	add	local01, #28
2e15c     53 95 02 FB | 	rdlong	arg02, local01
2e160     1C A6 86 F1 | 	sub	local01, #28
2e164     5B 99 02 F6 | 	mov	arg04, local09
2e168     5A 97 02 F6 | 	mov	arg03, local08
2e16c     78 F7 BF FD | 	call	#_fatfs_cc_put_lfn
2e170     09 A8 86 F1 | 	sub	local02, #9
2e174     54 03 48 FC | 	wrbyte	#1, local02
2e178     03 A8 86 F1 | 	sub	local02, #3
2e17c     53 93 02 F6 | 	mov	arg01, local01
2e180     00 94 06 F6 | 	mov	arg02, #0
2e184     AC F2 BF FD | 	call	#_fatfs_cc_dir_next
2e188     3D B3 0A F6 | 	mov	local07, result1 wz
2e18c     E9 B5 6E AB |  if_e	djnz	local08, #LR__4915
2e190                 | LR__4916
2e190                 | LR__4917
2e190                 | LR__4918
2e190     00 B2 0E F2 | 	cmp	local07, #0 wz
2e194     68 00 90 5D |  if_ne	jmp	#LR__4920
2e198     18 A6 06 F1 | 	add	local01, #24
2e19c     53 95 02 FB | 	rdlong	arg02, local01
2e1a0     18 A6 86 F1 | 	sub	local01, #24
2e1a4     54 93 02 F6 | 	mov	arg01, local02
2e1a8     BC E7 BF FD | 	call	#_fatfs_cc_move_window
2e1ac     3D B3 0A F6 | 	mov	local07, result1 wz
2e1b0     4C 00 90 5D |  if_ne	jmp	#LR__4919
2e1b4     1C A6 06 F1 | 	add	local01, #28
2e1b8     53 93 02 FB | 	rdlong	arg01, local01
2e1bc     00 94 06 F6 | 	mov	arg02, #0
2e1c0     20 96 06 F6 | 	mov	arg03, #32
2e1c4     D8 00 A0 FD | 	call	#\builtin_bytefill_
2e1c8     53 93 02 FB | 	rdlong	arg01, local01
2e1cc     04 A6 06 F1 | 	add	local01, #4
2e1d0     53 95 02 F6 | 	mov	arg02, local01
2e1d4     0B 96 06 F6 | 	mov	arg03, #11
2e1d8     8C 66 BF FD | 	call	#__system____builtin_memmove
2e1dc     04 A6 86 F1 | 	sub	local01, #4
2e1e0     53 AB 02 FB | 	rdlong	local03, local01
2e1e4     0F A6 06 F1 | 	add	local01, #15
2e1e8     53 B7 C2 FA | 	rdbyte	local09, local01
2e1ec     18 B6 06 F5 | 	and	local09, #24
2e1f0     0C AA 06 F1 | 	add	local03, #12
2e1f4     55 B7 42 FC | 	wrbyte	local09, local03
2e1f8     03 A8 06 F1 | 	add	local02, #3
2e1fc     54 03 48 FC | 	wrbyte	#1, local02
2e200                 | LR__4919
2e200                 | LR__4920
2e200                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2e200                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2e200                 | ' 
2e200                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2e200                 | ' 
2e200                 | ' 			fs->wflag = 1;
2e200                 | ' 		}
2e200                 | ' 	}
2e200                 | ' 
2e200                 | ' 	return res;
2e200     59 7B 02 F6 | 	mov	result1, local07
2e204                 | LR__4921
2e204     E7 F0 03 F6 | 	mov	ptra, fp
2e208     F2 00 A0 FD | 	call	#popregs_
2e20c                 | _fatfs_cc_dir_register_ret
2e20c     2D 00 64 FD | 	ret
2e210                 | 
2e210                 | _fatfs_cc_dir_remove
2e210     05 CA 05 F6 | 	mov	COUNT_, #5
2e214     E8 00 A0 FD | 	call	#pushregs_
2e218     49 A7 02 F6 | 	mov	local01, arg01
2e21c     53 A9 02 FB | 	rdlong	local02, local01
2e220     10 A6 06 F1 | 	add	local01, #16
2e224     53 AB 02 FB | 	rdlong	local03, local01
2e228     1C A6 06 F1 | 	add	local01, #28
2e22c     53 95 02 FB | 	rdlong	arg02, local01
2e230     2C A6 86 F1 | 	sub	local01, #44
2e234     FF FF 7F FF 
2e238     FF 95 0E F2 | 	cmp	arg02, ##-1 wz
2e23c     00 AC 06 A6 |  if_e	mov	local04, #0
2e240     18 00 90 AD |  if_e	jmp	#LR__4930
2e244     53 93 02 F6 | 	mov	arg01, local01
2e248     2C A6 06 F1 | 	add	local01, #44
2e24c     53 95 02 FB | 	rdlong	arg02, local01
2e250     2C A6 86 F1 | 	sub	local01, #44
2e254     74 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2e258     3D AD 02 F6 | 	mov	local04, result1
2e25c                 | LR__4930
2e25c     56 AF 0A F6 | 	mov	local05, local04 wz
2e260     64 00 90 5D |  if_ne	jmp	#LR__4933
2e264                 | ' 		do {
2e264                 | LR__4931
2e264     18 A6 06 F1 | 	add	local01, #24
2e268     53 95 02 FB | 	rdlong	arg02, local01
2e26c     18 A6 86 F1 | 	sub	local01, #24
2e270     54 93 02 F6 | 	mov	arg01, local02
2e274     F0 E6 BF FD | 	call	#_fatfs_cc_move_window
2e278     3D AF 0A F6 | 	mov	local05, result1 wz
2e27c     40 00 90 5D |  if_ne	jmp	#LR__4932
2e280     1C A6 06 F1 | 	add	local01, #28
2e284     53 AD 02 FB | 	rdlong	local04, local01
2e288     56 CB 49 FC | 	wrbyte	#229, local04
2e28c     03 A8 06 F1 | 	add	local02, #3
2e290     54 03 48 FC | 	wrbyte	#1, local02
2e294     03 A8 86 F1 | 	sub	local02, #3
2e298     0C A6 86 F1 | 	sub	local01, #12
2e29c     53 AD 02 FB | 	rdlong	local04, local01
2e2a0     10 A6 86 F1 | 	sub	local01, #16
2e2a4     55 AD 12 F2 | 	cmp	local04, local03 wc
2e2a8     14 00 90 3D |  if_ae	jmp	#LR__4932
2e2ac     53 93 02 F6 | 	mov	arg01, local01
2e2b0     00 94 06 F6 | 	mov	arg02, #0
2e2b4     7C F1 BF FD | 	call	#_fatfs_cc_dir_next
2e2b8     3D AF 0A F6 | 	mov	local05, result1 wz
2e2bc     A4 FF 9F AD |  if_e	jmp	#LR__4931
2e2c0                 | LR__4932
2e2c0     04 AE 0E F2 | 	cmp	local05, #4 wz
2e2c4     02 AE 06 A6 |  if_e	mov	local05, #2
2e2c8                 | LR__4933
2e2c8                 | ' 	}
2e2c8                 | ' #line 2590 "ff.c"
2e2c8                 | ' 	return res;
2e2c8     57 7B 02 F6 | 	mov	result1, local05
2e2cc     E7 F0 03 F6 | 	mov	ptra, fp
2e2d0     F2 00 A0 FD | 	call	#popregs_
2e2d4                 | _fatfs_cc_dir_remove_ret
2e2d4     2D 00 64 FD | 	ret
2e2d8                 | 
2e2d8                 | _fatfs_cc_get_fileinfo
2e2d8     0C CA 05 F6 | 	mov	COUNT_, #12
2e2dc     E8 00 A0 FD | 	call	#pushregs_
2e2e0     49 A7 02 F6 | 	mov	local01, arg01
2e2e4     4A A9 02 F6 | 	mov	local02, arg02
2e2e8     53 AB 02 FB | 	rdlong	local03, local01
2e2ec     1C A8 06 F1 | 	add	local02, #28
2e2f0     54 01 48 FC | 	wrbyte	#0, local02
2e2f4     1C A8 86 F1 | 	sub	local02, #28
2e2f8     18 A6 06 F1 | 	add	local01, #24
2e2fc     53 AD 0A FB | 	rdlong	local04, local01 wz
2e300     18 A6 86 F1 | 	sub	local01, #24
2e304     90 03 90 AD |  if_e	jmp	#LR__4954
2e308     2C A6 06 F1 | 	add	local01, #44
2e30c     53 AD 02 FB | 	rdlong	local04, local01
2e310     2C A6 86 F1 | 	sub	local01, #44
2e314     FF FF 7F FF 
2e318     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2e31c     D8 00 90 AD |  if_e	jmp	#LR__4943
2e320     00 AE 06 F6 | 	mov	local05, #0
2e324     00 B0 06 F6 | 	mov	local06, #0
2e328     00 B2 06 F6 | 	mov	local07, #0
2e32c                 | ' 			si = di = 0;
2e32c                 | ' 			hs = 0;
2e32c                 | ' 			while (fs->lfnbuf[si] != 0) {
2e32c                 | LR__4940
2e32c     0C AA 06 F1 | 	add	local03, #12
2e330     55 AD 02 FB | 	rdlong	local04, local03
2e334     0C AA 86 F1 | 	sub	local03, #12
2e338     58 B5 02 F6 | 	mov	local08, local06
2e33c     01 B4 66 F0 | 	shl	local08, #1
2e340     56 B5 02 F1 | 	add	local08, local04
2e344     5A AD EA FA | 	rdword	local04, local08 wz
2e348     90 00 90 AD |  if_e	jmp	#LR__4942
2e34c     0C AA 06 F1 | 	add	local03, #12
2e350     55 B7 02 FB | 	rdlong	local09, local03
2e354     0C AA 86 F1 | 	sub	local03, #12
2e358     58 AD 02 F6 | 	mov	local04, local06
2e35c     01 AC 66 F0 | 	shl	local04, #1
2e360     5B AD 02 F1 | 	add	local04, local09
2e364     56 B9 E2 FA | 	rdword	local10, local04
2e368     59 AD 02 F6 | 	mov	local04, local07
2e36c     0F AC 4E F7 | 	zerox	local04, #15 wz
2e370     01 B0 06 F1 | 	add	local06, #1
2e374     24 00 90 5D |  if_ne	jmp	#LR__4941
2e378     5C AD 32 F9 | 	getword	local04, local10, #0
2e37c     6C 00 00 FF 
2e380     00 AC 16 F2 | 	cmp	local04, ##55296 wc
2e384     14 00 90 CD |  if_b	jmp	#LR__4941
2e388     5C BB 32 F9 | 	getword	local11, local10, #0
2e38c     70 00 00 FF 
2e390     00 BA 16 F2 | 	cmp	local11, ##57344 wc
2e394     5C B3 02 C6 |  if_b	mov	local07, local10
2e398                 | ' 					hs = wc; continue;
2e398     90 FF 9F CD |  if_b	jmp	#LR__4940
2e39c                 | LR__4941
2e39c     59 93 32 F9 | 	getword	arg01, local07, #0
2e3a0     10 92 66 F0 | 	shl	arg01, #16
2e3a4     5C B9 32 F9 | 	getword	local10, local10, #0
2e3a8     5C 93 42 F5 | 	or	arg01, local10
2e3ac     57 95 02 F6 | 	mov	arg02, local05
2e3b0     54 B9 02 F6 | 	mov	local10, local02
2e3b4     1C B8 06 F1 | 	add	local10, #28
2e3b8     5C 95 02 F1 | 	add	arg02, local10
2e3bc     FF 96 06 F6 | 	mov	arg03, #255
2e3c0     57 97 82 F1 | 	sub	arg03, local05
2e3c4     28 E3 BF FD | 	call	#_fatfs_cc_put_utf
2e3c8     3D B9 0A F6 | 	mov	local10, result1 wz
2e3cc     00 AE 06 A6 |  if_e	mov	local05, #0
2e3d0     5C AF 02 51 |  if_ne	add	local05, local10
2e3d4     00 B2 06 56 |  if_ne	mov	local07, #0
2e3d8     50 FF 9F 5D |  if_ne	jmp	#LR__4940
2e3dc                 | LR__4942
2e3dc     59 AD 02 F6 | 	mov	local04, local07
2e3e0     0F AC 4E F7 | 	zerox	local04, #15 wz
2e3e4     00 AE 06 56 |  if_ne	mov	local05, #0
2e3e8     54 B9 02 F6 | 	mov	local10, local02
2e3ec     1C B8 06 F1 | 	add	local10, #28
2e3f0     5C AF 02 F1 | 	add	local05, local10
2e3f4     57 01 48 FC | 	wrbyte	#0, local05
2e3f8                 | LR__4943
2e3f8     00 AE 06 F6 | 	mov	local05, #0
2e3fc     00 B0 06 F6 | 	mov	local06, #0
2e400                 | ' 			fno->fname[di] = 0;
2e400                 | ' 		}
2e400                 | ' 	}
2e400                 | ' 
2e400                 | ' 	si = di = 0;
2e400                 | ' 	while (si < 11) {
2e400                 | LR__4944
2e400     0B B0 16 F2 | 	cmp	local06, #11 wc
2e404     20 01 90 3D |  if_ae	jmp	#LR__4947
2e408     1C A6 06 F1 | 	add	local01, #28
2e40c     53 B7 02 FB | 	rdlong	local09, local01
2e410     1C A6 86 F1 | 	sub	local01, #28
2e414     58 B9 02 F6 | 	mov	local10, local06
2e418     5B B9 02 F1 | 	add	local10, local09
2e41c     5C B9 C2 FA | 	rdbyte	local10, local10
2e420     5C AD 32 F9 | 	getword	local04, local10, #0
2e424     20 AC 0E F2 | 	cmp	local04, #32 wz
2e428     01 B0 06 F1 | 	add	local06, #1
2e42c     D0 FF 9F AD |  if_e	jmp	#LR__4944
2e430     5C AD 32 F9 | 	getword	local04, local10, #0
2e434     05 AC 0E F2 | 	cmp	local04, #5 wz
2e438     E5 B8 06 A6 |  if_e	mov	local10, #229
2e43c     09 B0 0E F2 | 	cmp	local06, #9 wz
2e440     20 00 90 5D |  if_ne	jmp	#LR__4945
2e444     0C AE 16 F2 | 	cmp	local05, #12 wc
2e448     18 00 90 3D |  if_ae	jmp	#LR__4945
2e44c     57 BB 02 F6 | 	mov	local11, local05
2e450     54 B5 02 F6 | 	mov	local08, local02
2e454     0C B4 06 F1 | 	add	local08, #12
2e458     5A BB 02 F1 | 	add	local11, local08
2e45c     5D 5D 48 FC | 	wrbyte	#46, local11
2e460     01 AE 06 F1 | 	add	local05, #1
2e464                 | LR__4945
2e464     5C 93 32 F9 | 	getword	arg01, local10, #0
2e468     07 92 4E F7 | 	zerox	arg01, #7 wz
2e46c     00 7A 06 56 |  if_ne	mov	result1, #0
2e470                 | ' 
2e470                 | ' 	return 0;
2e470     00 7A 06 A6 |  if_e	mov	result1, #0
2e474     00 7A 0E F2 | 	cmp	result1, #0 wz
2e478     08 B0 0E 52 |  if_ne	cmp	local06, #8 wz
2e47c     0B B0 0E 52 |  if_ne	cmp	local06, #11 wz
2e480     50 00 90 AD |  if_e	jmp	#LR__4946
2e484     1C A6 06 F1 | 	add	local01, #28
2e488     53 BB 02 FB | 	rdlong	local11, local01
2e48c     1C A6 86 F1 | 	sub	local01, #28
2e490     58 B5 02 F6 | 	mov	local08, local06
2e494     5D B5 02 F1 | 	add	local08, local11
2e498     5A 93 CA FA | 	rdbyte	arg01, local08 wz
2e49c     00 7A 06 56 |  if_ne	mov	result1, #0
2e4a0                 | ' 
2e4a0                 | ' 	return 0;
2e4a0     00 7A 06 A6 |  if_e	mov	result1, #0
2e4a4     00 7A 0E F2 | 	cmp	result1, #0 wz
2e4a8     28 00 90 AD |  if_e	jmp	#LR__4946
2e4ac     5C B9 32 F9 | 	getword	local10, local10, #0
2e4b0     08 B8 66 F0 | 	shl	local10, #8
2e4b4     1C A6 06 F1 | 	add	local01, #28
2e4b8     53 BB 02 FB | 	rdlong	local11, local01
2e4bc     1C A6 86 F1 | 	sub	local01, #28
2e4c0     58 B7 02 F6 | 	mov	local09, local06
2e4c4     5D B7 02 F1 | 	add	local09, local11
2e4c8     5B BB C2 FA | 	rdbyte	local11, local09
2e4cc     5D B9 42 F5 | 	or	local10, local11
2e4d0     01 B0 06 F1 | 	add	local06, #1
2e4d4                 | LR__4946
2e4d4     5C 93 02 F6 | 	mov	arg01, local10
2e4d8     01 00 00 FF 
2e4dc     52 95 06 F6 | 	mov	arg02, ##850
2e4e0     24 D7 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2e4e4     3D B9 02 F6 | 	mov	local10, result1
2e4e8     5C AD 02 F6 | 	mov	local04, local10
2e4ec     0F AC 4E F7 | 	zerox	local04, #15 wz
2e4f0     00 AE 06 A6 |  if_e	mov	local05, #0
2e4f4     30 00 90 AD |  if_e	jmp	#LR__4947
2e4f8     5C 93 32 F9 | 	getword	arg01, local10, #0
2e4fc     57 95 02 F6 | 	mov	arg02, local05
2e500     54 BB 02 F6 | 	mov	local11, local02
2e504     0C BA 06 F1 | 	add	local11, #12
2e508     5D 95 02 F1 | 	add	arg02, local11
2e50c     0C 96 06 F6 | 	mov	arg03, #12
2e510     57 97 82 F1 | 	sub	arg03, local05
2e514     D8 E1 BF FD | 	call	#_fatfs_cc_put_utf
2e518     3D BB 0A F6 | 	mov	local11, result1 wz
2e51c     00 AE 06 A6 |  if_e	mov	local05, #0
2e520     5D AF 02 51 |  if_ne	add	local05, local11
2e524     D8 FE 9F 5D |  if_ne	jmp	#LR__4944
2e528                 | LR__4947
2e528     57 AD 02 F6 | 	mov	local04, local05
2e52c     0C A8 06 F1 | 	add	local02, #12
2e530     54 AD 02 F1 | 	add	local04, local02
2e534     56 01 48 FC | 	wrbyte	#0, local04
2e538     10 A8 06 F1 | 	add	local02, #16
2e53c     54 AD CA FA | 	rdbyte	local04, local02 wz
2e540     1C A8 86 F1 | 	sub	local02, #28
2e544     F8 00 90 5D |  if_ne	jmp	#LR__4953
2e548     00 AE 0E F2 | 	cmp	local05, #0 wz
2e54c     1C 00 90 5D |  if_ne	jmp	#LR__4948
2e550     57 BB 02 F6 | 	mov	local11, local05
2e554     54 B9 02 F6 | 	mov	local10, local02
2e558     1C B8 06 F1 | 	add	local10, #28
2e55c     5C BB 02 F1 | 	add	local11, local10
2e560     5D 7F 48 FC | 	wrbyte	#63, local11
2e564     01 AE 06 F1 | 	add	local05, #1
2e568     A4 00 90 FD | 	jmp	#LR__4952
2e56c                 | LR__4948
2e56c                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2e56c     00 AE 06 F6 | 	mov	local05, #0
2e570     00 B0 06 F6 | 	mov	local06, #0
2e574     08 BC 06 F6 | 	mov	local12, #8
2e578                 | LR__4949
2e578     58 AD 02 F6 | 	mov	local04, local06
2e57c     54 BB 02 F6 | 	mov	local11, local02
2e580     0C BA 06 F1 | 	add	local11, #12
2e584     5D AD 02 F1 | 	add	local04, local11
2e588     56 BB CA FA | 	rdbyte	local11, local04 wz
2e58c     80 00 90 AD |  if_e	jmp	#LR__4951
2e590     58 B5 02 F6 | 	mov	local08, local06
2e594     54 BB 02 F6 | 	mov	local11, local02
2e598     0C BA 06 F1 | 	add	local11, #12
2e59c     5D B5 02 F1 | 	add	local08, local11
2e5a0     5A B9 C2 FA | 	rdbyte	local10, local08
2e5a4     5C BB 32 F9 | 	getword	local11, local10, #0
2e5a8     2E BA 0E F2 | 	cmp	local11, #46 wz
2e5ac     10 BC 06 A6 |  if_e	mov	local12, #16
2e5b0     5C BB 32 F9 | 	getword	local11, local10, #0
2e5b4     41 BA 16 F2 | 	cmp	local11, #65 wc
2e5b8     30 00 90 CD |  if_b	jmp	#LR__4950
2e5bc     5C B5 32 F9 | 	getword	local08, local10, #0
2e5c0     5B B4 16 F2 | 	cmp	local08, #91 wc
2e5c4     24 00 90 3D |  if_ae	jmp	#LR__4950
2e5c8     1C A6 06 F1 | 	add	local01, #28
2e5cc     53 B7 02 FB | 	rdlong	local09, local01
2e5d0     1C A6 86 F1 | 	sub	local01, #28
2e5d4     0C B6 06 F1 | 	add	local09, #12
2e5d8     5B B7 C2 FA | 	rdbyte	local09, local09
2e5dc     5E BB E2 F8 | 	getbyte	local11, local12, #0
2e5e0     5D B7 CA F7 | 	test	local09, local11 wz
2e5e4     5C B9 32 59 |  if_ne	getword	local10, local10, #0
2e5e8     20 B8 06 51 |  if_ne	add	local10, #32
2e5ec                 | LR__4950
2e5ec     57 BB 02 F6 | 	mov	local11, local05
2e5f0     54 B5 02 F6 | 	mov	local08, local02
2e5f4     1C B4 06 F1 | 	add	local08, #28
2e5f8     5A BB 02 F1 | 	add	local11, local08
2e5fc     5C B9 32 F9 | 	getword	local10, local10, #0
2e600     5D B9 42 FC | 	wrbyte	local10, local11
2e604     01 B0 06 F1 | 	add	local06, #1
2e608     01 AE 06 F1 | 	add	local05, #1
2e60c     68 FF 9F FD | 	jmp	#LR__4949
2e610                 | LR__4951
2e610                 | LR__4952
2e610     54 BD 02 F6 | 	mov	local12, local02
2e614     1C BC 06 F1 | 	add	local12, #28
2e618     5E AF 02 F1 | 	add	local05, local12
2e61c     57 01 48 FC | 	wrbyte	#0, local05
2e620     1C A6 06 F1 | 	add	local01, #28
2e624     53 AD 02 FB | 	rdlong	local04, local01
2e628     1C A6 86 F1 | 	sub	local01, #28
2e62c     0C AC 06 F1 | 	add	local04, #12
2e630     56 BB CA FA | 	rdbyte	local11, local04 wz
2e634     0C A8 06 A1 |  if_e	add	local02, #12
2e638     54 01 48 AC |  if_e	wrbyte	#0, local02
2e63c     0C A8 86 A1 |  if_e	sub	local02, #12
2e640                 | LR__4953
2e640     1C A6 06 F1 | 	add	local01, #28
2e644     53 BD 02 FB | 	rdlong	local12, local01
2e648     0B BC 06 F1 | 	add	local12, #11
2e64c     5E AD C2 FA | 	rdbyte	local04, local12
2e650     3F AC 06 F5 | 	and	local04, #63
2e654     08 A8 06 F1 | 	add	local02, #8
2e658     54 AD 42 FC | 	wrbyte	local04, local02
2e65c     08 A8 86 F1 | 	sub	local02, #8
2e660     53 93 02 FB | 	rdlong	arg01, local01
2e664     1C 92 06 F1 | 	add	arg01, #28
2e668                 | ' {
2e668                 | ' 
2e668                 | ' 	return *((DWORD*)ptr);
2e668     49 7B 02 FB | 	rdlong	result1, arg01
2e66c     54 7B 62 FC | 	wrlong	result1, local02
2e670     53 93 02 FB | 	rdlong	arg01, local01
2e674     16 92 06 F1 | 	add	arg01, #22
2e678                 | ' {
2e678                 | ' 
2e678                 | ' 	return *((WORD*)ptr);
2e678     49 7B E2 FA | 	rdword	result1, arg01
2e67c     06 A8 06 F1 | 	add	local02, #6
2e680     54 7B 52 FC | 	wrword	result1, local02
2e684     53 93 02 FB | 	rdlong	arg01, local01
2e688     18 92 06 F1 | 	add	arg01, #24
2e68c                 | ' {
2e68c                 | ' 
2e68c                 | ' 	return *((WORD*)ptr);
2e68c     49 7B E2 FA | 	rdword	result1, arg01
2e690     02 A8 86 F1 | 	sub	local02, #2
2e694     54 7B 52 FC | 	wrword	result1, local02
2e698                 | LR__4954
2e698     E7 F0 03 F6 | 	mov	ptra, fp
2e69c     F2 00 A0 FD | 	call	#popregs_
2e6a0                 | _fatfs_cc_get_fileinfo_ret
2e6a0     2D 00 64 FD | 	ret
2e6a4                 | 
2e6a4                 | _fatfs_cc_create_name
2e6a4     12 CA 05 F6 | 	mov	COUNT_, #18
2e6a8     E8 00 A0 FD | 	call	#pushregs_
2e6ac     34 F0 07 F1 | 	add	ptra, #52
2e6b0     49 A7 02 F6 | 	mov	local01, arg01
2e6b4     4A A9 02 F6 | 	mov	local02, arg02
2e6b8     54 7B 02 FB | 	rdlong	result1, local02
2e6bc     30 CE 05 F1 | 	add	fp, #48
2e6c0     E7 7A 62 FC | 	wrlong	result1, fp
2e6c4     30 CE 85 F1 | 	sub	fp, #48
2e6c8     53 AB 02 FB | 	rdlong	local03, local01
2e6cc     0C AA 06 F1 | 	add	local03, #12
2e6d0     55 AD 02 FB | 	rdlong	local04, local03
2e6d4     00 AE 06 F6 | 	mov	local05, #0
2e6d8                 | ' 
2e6d8                 | ' 
2e6d8                 | ' 
2e6d8                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2e6d8                 | ' 	for (;;) {
2e6d8                 | LR__4960
2e6d8     E7 92 02 F6 | 	mov	arg01, fp
2e6dc     30 92 06 F1 | 	add	arg01, #48
2e6e0     FC DE BF FD | 	call	#_fatfs_cc_tchar2uni
2e6e4     3D B1 02 F6 | 	mov	local06, result1
2e6e8     FF FF 7F FF 
2e6ec     FF B1 0E F2 | 	cmp	local06, ##-1 wz
2e6f0     06 7A 06 A6 |  if_e	mov	result1, #6
2e6f4     84 04 90 AD |  if_e	jmp	#LR__4994
2e6f8     80 00 00 FF 
2e6fc     00 B0 16 F2 | 	cmp	local06, ##65536 wc
2e700     20 00 90 CD |  if_b	jmp	#LR__4961
2e704     57 AB 02 F6 | 	mov	local03, local05
2e708     01 AA 66 F0 | 	shl	local03, #1
2e70c     56 B3 02 F6 | 	mov	local07, local04
2e710     56 AB 02 F1 | 	add	local03, local04
2e714     58 B5 02 F6 | 	mov	local08, local06
2e718     10 B4 46 F0 | 	shr	local08, #16
2e71c     55 B5 52 FC | 	wrword	local08, local03
2e720     01 AE 06 F1 | 	add	local05, #1
2e724                 | LR__4961
2e724     58 B7 02 F6 | 	mov	local09, local06
2e728     5B AB 32 F9 | 	getword	local03, local09, #0
2e72c     20 AA 16 F2 | 	cmp	local03, #32 wc
2e730     68 00 90 CD |  if_b	jmp	#LR__4963
2e734     5B B9 32 F9 | 	getword	local10, local09, #0
2e738     2F B8 0E F2 | 	cmp	local10, #47 wz
2e73c     5B AB 02 56 |  if_ne	mov	local03, local09
2e740     55 AB 32 59 |  if_ne	getword	local03, local03, #0
2e744     5C AA 0E 52 |  if_ne	cmp	local03, #92 wz
2e748     50 00 90 AD |  if_e	jmp	#LR__4963
2e74c     5B AB 32 F9 | 	getword	local03, local09, #0
2e750     80 AA 16 F2 | 	cmp	local03, #128 wc
2e754     1C 00 90 3D |  if_ae	jmp	#LR__4962
2e758     92 01 00 FF 
2e75c     07 93 06 F6 | 	mov	arg01, ##@LR__5483
2e760     5B 95 32 F9 | 	getword	arg02, local09, #0
2e764     80 D7 BF FD | 	call	#_fatfs_cc_strchr
2e768     3D B9 0A F6 | 	mov	local10, result1 wz
2e76c     06 7A 06 56 |  if_ne	mov	result1, #6
2e770     08 04 90 5D |  if_ne	jmp	#LR__4994
2e774                 | LR__4962
2e774     FF AE 16 F2 | 	cmp	local05, #255 wc
2e778     06 7A 06 36 |  if_ae	mov	result1, #6
2e77c     FC 03 90 3D |  if_ae	jmp	#LR__4994
2e780     57 B1 02 F6 | 	mov	local06, local05
2e784     01 B0 66 F0 | 	shl	local06, #1
2e788     56 B3 02 F6 | 	mov	local07, local04
2e78c     56 B1 02 F1 | 	add	local06, local04
2e790     58 B7 52 FC | 	wrword	local09, local06
2e794     01 AE 06 F1 | 	add	local05, #1
2e798     3C FF 9F FD | 	jmp	#LR__4960
2e79c                 | LR__4963
2e79c     5B AB 32 F9 | 	getword	local03, local09, #0
2e7a0     20 AA 16 F2 | 	cmp	local03, #32 wc
2e7a4     04 BA 06 C6 |  if_b	mov	local11, #4
2e7a8     68 00 90 CD |  if_b	jmp	#LR__4968
2e7ac     D7 24 48 FB | 	callpa	#(@LR__4966-@LR__4964)>>2,fcache_load_ptr_
2e7b0                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2e7b0                 | LR__4964
2e7b0     30 CE 05 F1 | 	add	fp, #48
2e7b4     E7 B8 02 FB | 	rdlong	local10, fp
2e7b8     30 CE 85 F1 | 	sub	fp, #48
2e7bc     5C AB C2 FA | 	rdbyte	local03, local10
2e7c0     2F AA 0E F2 | 	cmp	local03, #47 wz
2e7c4     18 00 90 AD |  if_e	jmp	#LR__4965
2e7c8     30 CE 05 F1 | 	add	fp, #48
2e7cc     E7 B4 02 FB | 	rdlong	local08, fp
2e7d0     30 CE 85 F1 | 	sub	fp, #48
2e7d4     5A BB C2 FA | 	rdbyte	local11, local08
2e7d8     5C BA 0E F2 | 	cmp	local11, #92 wz
2e7dc     18 00 90 5D |  if_ne	jmp	#LR__4967
2e7e0                 | LR__4965
2e7e0     30 CE 05 F1 | 	add	fp, #48
2e7e4     E7 BA 02 FB | 	rdlong	local11, fp
2e7e8     01 BA 06 F1 | 	add	local11, #1
2e7ec     E7 BA 62 FC | 	wrlong	local11, fp
2e7f0     30 CE 85 F1 | 	sub	fp, #48
2e7f4     B8 FF 9F FD | 	jmp	#LR__4964
2e7f8                 | LR__4966
2e7f8                 | LR__4967
2e7f8     00 BA 06 F6 | 	mov	local11, #0
2e7fc     30 CE 05 F1 | 	add	fp, #48
2e800     E7 B8 02 FB | 	rdlong	local10, fp
2e804     30 CE 85 F1 | 	sub	fp, #48
2e808     5C AB C2 FA | 	rdbyte	local03, local10
2e80c     20 AA 16 F2 | 	cmp	local03, #32 wc
2e810     04 BA 06 C6 |  if_b	mov	local11, #4
2e814                 | LR__4968
2e814     30 CE 05 F1 | 	add	fp, #48
2e818     E7 AA 02 FB | 	rdlong	local03, fp
2e81c     30 CE 85 F1 | 	sub	fp, #48
2e820     54 AB 62 FC | 	wrlong	local03, local02
2e824                 | ' 	}
2e824                 | ' 	*path = p;
2e824                 | ' #line 2862 "ff.c"
2e824                 | ' 	while (di) {
2e824     00 AE 0E F2 | 	cmp	local05, #0 wz
2e828     30 00 90 AD |  if_e	jmp	#LR__4971
2e82c     D7 16 48 FB | 	callpa	#(@LR__4970-@LR__4969)>>2,fcache_load_ptr_
2e830                 | LR__4969
2e830     57 B7 02 F6 | 	mov	local09, local05
2e834     01 B6 86 F1 | 	sub	local09, #1
2e838     01 B6 66 F0 | 	shl	local09, #1
2e83c     56 B7 02 F1 | 	add	local09, local04
2e840     5B B7 E2 FA | 	rdword	local09, local09
2e844     5B AB 32 F9 | 	getword	local03, local09, #0
2e848     20 AA 0E F2 | 	cmp	local03, #32 wz
2e84c     5B B9 02 56 |  if_ne	mov	local10, local09
2e850     5C B9 32 59 |  if_ne	getword	local10, local10, #0
2e854     2E B8 0E 52 |  if_ne	cmp	local10, #46 wz
2e858     F5 AF 6E AB |  if_e	djnz	local05, #LR__4969
2e85c                 | LR__4970
2e85c                 | LR__4971
2e85c     57 B9 02 F6 | 	mov	local10, local05
2e860     01 B8 66 F0 | 	shl	local10, #1
2e864     56 B9 02 F1 | 	add	local10, local04
2e868     5C 01 58 FC | 	wrword	#0, local10
2e86c     00 AE 0E F2 | 	cmp	local05, #0 wz
2e870     06 7A 06 A6 |  if_e	mov	result1, #6
2e874     04 03 90 AD |  if_e	jmp	#LR__4994
2e878                 | ' 
2e878                 | ' 
2e878                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2e878     00 BC 06 F6 | 	mov	local12, #0
2e87c     D7 12 48 FB | 	callpa	#(@LR__4973-@LR__4972)>>2,fcache_load_ptr_
2e880                 | LR__4972
2e880     5E B7 02 F6 | 	mov	local09, local12
2e884     01 B6 66 F0 | 	shl	local09, #1
2e888     56 B7 02 F1 | 	add	local09, local04
2e88c     5B AB E2 FA | 	rdword	local03, local09
2e890     20 AA 0E F2 | 	cmp	local03, #32 wz
2e894     5E B5 02 A6 |  if_e	mov	local08, local12
2e898     01 B4 06 A1 |  if_e	add	local08, #1
2e89c     5A BD 02 A6 |  if_e	mov	local12, local08
2e8a0     DC FF 9F AD |  if_e	jmp	#LR__4972
2e8a4                 | LR__4973
2e8a4     01 BC 16 F2 | 	cmp	local12, #1 wc
2e8a8     18 00 90 3D |  if_ae	jmp	#LR__4974
2e8ac     5E B7 02 F6 | 	mov	local09, local12
2e8b0     01 B6 66 F0 | 	shl	local09, #1
2e8b4     56 B7 02 F1 | 	add	local09, local04
2e8b8     5B AB E2 FA | 	rdword	local03, local09
2e8bc     2E AA 0E F2 | 	cmp	local03, #46 wz
2e8c0     08 00 90 5D |  if_ne	jmp	#LR__4975
2e8c4                 | LR__4974
2e8c4     5D BB E2 F8 | 	getbyte	local11, local11, #0
2e8c8     03 BA 46 F5 | 	or	local11, #3
2e8cc                 | LR__4975
2e8cc     D7 14 48 FB | 	callpa	#(@LR__4977-@LR__4976)>>2,fcache_load_ptr_
2e8d0                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2e8d0                 | LR__4976
2e8d0     01 AE 16 F2 | 	cmp	local05, #1 wc
2e8d4     20 00 90 CD |  if_b	jmp	#LR__4978
2e8d8     57 B7 02 F6 | 	mov	local09, local05
2e8dc     01 B6 86 F1 | 	sub	local09, #1
2e8e0     01 B6 66 F0 | 	shl	local09, #1
2e8e4     56 B7 02 F1 | 	add	local09, local04
2e8e8     5B AB E2 FA | 	rdword	local03, local09
2e8ec     2E AA 0E F2 | 	cmp	local03, #46 wz
2e8f0     01 AE 86 51 |  if_ne	sub	local05, #1
2e8f4     D8 FF 9F 5D |  if_ne	jmp	#LR__4976
2e8f8                 | LR__4977
2e8f8                 | LR__4978
2e8f8     53 93 02 F6 | 	mov	arg01, local01
2e8fc     20 92 06 F1 | 	add	arg01, #32
2e900     20 94 06 F6 | 	mov	arg02, #32
2e904     0B 96 06 F6 | 	mov	arg03, #11
2e908     49 BF 02 F6 | 	mov	local13, arg01
2e90c     D8 00 A0 FD | 	call	#\builtin_bytefill_
2e910     5F 7B 02 F6 | 	mov	result1, local13
2e914     00 C0 06 F6 | 	mov	local14, #0
2e918     00 C2 06 F6 | 	mov	local15, #0
2e91c     08 C4 06 F6 | 	mov	local16, #8
2e920                 | ' 
2e920                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2e920                 | ' 	i = b = 0; ni = 8;
2e920                 | ' 	for (;;) {
2e920                 | LR__4979
2e920     5E C7 02 F6 | 	mov	local17, local12
2e924     63 C9 02 F6 | 	mov	local18, local17
2e928     01 C8 66 F0 | 	shl	local18, #1
2e92c     56 B3 02 F6 | 	mov	local07, local04
2e930     56 C9 02 F1 | 	add	local18, local04
2e934     64 B7 E2 FA | 	rdword	local09, local18
2e938     5B AB 02 F6 | 	mov	local03, local09
2e93c     0F AA 4E F7 | 	zerox	local03, #15 wz
2e940     01 BC 06 F1 | 	add	local12, #1
2e944     B0 01 90 AD |  if_e	jmp	#LR__4992
2e948     5B AB 32 F9 | 	getword	local03, local09, #0
2e94c     20 AA 0E F2 | 	cmp	local03, #32 wz
2e950     14 00 90 AD |  if_e	jmp	#LR__4980
2e954     5B B9 32 F9 | 	getword	local10, local09, #0
2e958     2E B8 0E F2 | 	cmp	local10, #46 wz
2e95c     14 00 90 5D |  if_ne	jmp	#LR__4981
2e960     57 BD 0A F2 | 	cmp	local12, local05 wz
2e964     0C 00 90 AD |  if_e	jmp	#LR__4981
2e968                 | LR__4980
2e968     5D BB E2 F8 | 	getbyte	local11, local11, #0
2e96c     03 BA 46 F5 | 	or	local11, #3
2e970                 | ' 			cf |=  0x01  |  0x02 ;
2e970                 | ' 			continue;
2e970     AC FF 9F FD | 	jmp	#LR__4979
2e974                 | LR__4981
2e974     62 C3 12 F2 | 	cmp	local15, local16 wc
2e978     57 BD 0A C2 |  if_b	cmp	local12, local05 wz
2e97c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__4982
2e980     0B C4 0E F2 | 	cmp	local16, #11 wz
2e984     5D BB E2 A8 |  if_e	getbyte	local11, local11, #0
2e988     03 BA 46 A5 |  if_e	or	local11, #3
2e98c                 | ' 				cf |=  0x01  |  0x02 ;
2e98c                 | ' 				break;
2e98c     68 01 90 AD |  if_e	jmp	#LR__4992
2e990     57 BD 0A F2 | 	cmp	local12, local05 wz
2e994     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2e998     03 BA 46 55 |  if_ne	or	local11, #3
2e99c     57 BD 1A F2 | 	cmp	local12, local05 wcz
2e9a0     54 01 90 1D |  if_a	jmp	#LR__4992
2e9a4     57 BD 02 F6 | 	mov	local12, local05
2e9a8     08 C2 06 F6 | 	mov	local15, #8
2e9ac     0B C4 06 F6 | 	mov	local16, #11
2e9b0     60 C1 E2 F8 | 	getbyte	local14, local14, #0
2e9b4     02 C0 66 F0 | 	shl	local14, #2
2e9b8                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2e9b8                 | ' 			continue;
2e9b8     64 FF 9F FD | 	jmp	#LR__4979
2e9bc                 | LR__4982
2e9bc     5B AB 32 F9 | 	getword	local03, local09, #0
2e9c0     80 AA 16 F2 | 	cmp	local03, #128 wc
2e9c4     50 00 90 CD |  if_b	jmp	#LR__4984
2e9c8     5D BB E2 F8 | 	getbyte	local11, local11, #0
2e9cc     02 BA 46 F5 | 	or	local11, #2
2e9d0     5B 93 32 F9 | 	getword	arg01, local09, #0
2e9d4     01 00 00 FF 
2e9d8     52 B9 06 F6 | 	mov	local10, ##850
2e9dc     01 00 00 FF 
2e9e0     52 95 06 F6 | 	mov	arg02, ##850
2e9e4     B0 D1 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2e9e8     3D B7 02 F6 | 	mov	local09, result1
2e9ec     5B AB 32 F9 | 	getword	local03, local09, #0
2e9f0     80 AA CE F7 | 	test	local03, #128 wz
2e9f4     20 00 90 AD |  if_e	jmp	#LR__4983
2e9f8     5B B9 32 F9 | 	getword	local10, local09, #0
2e9fc     7F B8 06 F5 | 	and	local10, #127
2ea00     5C C7 02 F6 | 	mov	local17, local10
2ea04     36 C9 02 F6 | 	mov	local18, ptr__fatfs_cc_dat__
2ea08     01 00 00 FF 
2ea0c     BB C9 06 F1 | 	add	local18, ##955
2ea10     64 C7 02 F1 | 	add	local17, local18
2ea14     63 B7 C2 FA | 	rdbyte	local09, local17
2ea18                 | LR__4983
2ea18                 | LR__4984
2ea18     5B AB 32 F9 | 	getword	local03, local09, #0
2ea1c     00 AB 16 F2 | 	cmp	local03, #256 wc
2ea20     40 00 90 CD |  if_b	jmp	#LR__4985
2ea24     62 AB 02 F6 | 	mov	local03, local16
2ea28     01 AA 86 F1 | 	sub	local03, #1
2ea2c     55 C3 12 F2 | 	cmp	local15, local03 wc
2ea30     5D BB E2 38 |  if_ae	getbyte	local11, local11, #0
2ea34     03 BA 46 35 |  if_ae	or	local11, #3
2ea38     62 C3 02 36 |  if_ae	mov	local15, local16
2ea3c                 | ' 				cf |=  0x01  |  0x02 ;
2ea3c                 | ' 				i = ni; continue;
2ea3c     E0 FE 9F 3D |  if_ae	jmp	#LR__4979
2ea40     61 C7 02 F6 | 	mov	local17, local15
2ea44     53 C9 02 F6 | 	mov	local18, local01
2ea48     20 C8 06 F1 | 	add	local18, #32
2ea4c     64 C7 02 F1 | 	add	local17, local18
2ea50     5B B3 32 F9 | 	getword	local07, local09, #0
2ea54     08 B2 46 F0 | 	shr	local07, #8
2ea58     63 B3 42 FC | 	wrbyte	local07, local17
2ea5c     01 C2 06 F1 | 	add	local15, #1
2ea60     74 00 90 FD | 	jmp	#LR__4991
2ea64                 | LR__4985
2ea64     5B AB 02 F6 | 	mov	local03, local09
2ea68     0F AA 4E F7 | 	zerox	local03, #15 wz
2ea6c     18 00 90 AD |  if_e	jmp	#LR__4986
2ea70     92 01 00 FF 
2ea74     10 93 06 F6 | 	mov	arg01, ##@LR__5484
2ea78     5B 95 32 F9 | 	getword	arg02, local09, #0
2ea7c     68 D4 BF FD | 	call	#_fatfs_cc_strchr
2ea80     00 7A 0E F2 | 	cmp	result1, #0 wz
2ea84     10 00 90 AD |  if_e	jmp	#LR__4987
2ea88                 | LR__4986
2ea88     5F B6 06 F6 | 	mov	local09, #95
2ea8c     5D BB E2 F8 | 	getbyte	local11, local11, #0
2ea90     03 BA 46 F5 | 	or	local11, #3
2ea94     40 00 90 FD | 	jmp	#LR__4990
2ea98                 | LR__4987
2ea98     5B AB 32 F9 | 	getword	local03, local09, #0
2ea9c     41 AA 16 F2 | 	cmp	local03, #65 wc
2eaa0     10 00 90 CD |  if_b	jmp	#LR__4988
2eaa4     5B B9 32 F9 | 	getword	local10, local09, #0
2eaa8     5B B8 16 F2 | 	cmp	local10, #91 wc
2eaac     60 C1 E2 C8 |  if_b	getbyte	local14, local14, #0
2eab0     02 C0 46 C5 |  if_b	or	local14, #2
2eab4                 | LR__4988
2eab4     5B AB 32 F9 | 	getword	local03, local09, #0
2eab8     61 AA 16 F2 | 	cmp	local03, #97 wc
2eabc     18 00 90 CD |  if_b	jmp	#LR__4989
2eac0     5B B9 32 F9 | 	getword	local10, local09, #0
2eac4     7B B8 16 F2 | 	cmp	local10, #123 wc
2eac8     60 C1 E2 C8 |  if_b	getbyte	local14, local14, #0
2eacc     01 C0 46 C5 |  if_b	or	local14, #1
2ead0     5B B7 32 C9 |  if_b	getword	local09, local09, #0
2ead4     20 B6 86 C1 |  if_b	sub	local09, #32
2ead8                 | LR__4989
2ead8                 | LR__4990
2ead8                 | LR__4991
2ead8     61 C7 02 F6 | 	mov	local17, local15
2eadc     53 C9 02 F6 | 	mov	local18, local01
2eae0     20 C8 06 F1 | 	add	local18, #32
2eae4     64 C7 02 F1 | 	add	local17, local18
2eae8     5B B7 32 F9 | 	getword	local09, local09, #0
2eaec     63 B7 42 FC | 	wrbyte	local09, local17
2eaf0     01 C2 06 F1 | 	add	local15, #1
2eaf4     28 FE 9F FD | 	jmp	#LR__4979
2eaf8                 | LR__4992
2eaf8     20 A6 06 F1 | 	add	local01, #32
2eafc     53 AB C2 FA | 	rdbyte	local03, local01
2eb00     20 A6 86 F1 | 	sub	local01, #32
2eb04     E5 AA 0E F2 | 	cmp	local03, #229 wz
2eb08     20 A6 06 A1 |  if_e	add	local01, #32
2eb0c     53 0B 48 AC |  if_e	wrbyte	#5, local01
2eb10     20 A6 86 A1 |  if_e	sub	local01, #32
2eb14     08 C4 0E F2 | 	cmp	local16, #8 wz
2eb18     60 C1 E2 A8 |  if_e	getbyte	local14, local14, #0
2eb1c     02 C0 66 A0 |  if_e	shl	local14, #2
2eb20     60 AB E2 F8 | 	getbyte	local03, local14, #0
2eb24     0C AA 06 F5 | 	and	local03, #12
2eb28     0C AA 0E F2 | 	cmp	local03, #12 wz
2eb2c     60 B9 02 56 |  if_ne	mov	local10, local14
2eb30     5C B9 E2 58 |  if_ne	getbyte	local10, local10, #0
2eb34     03 B8 06 55 |  if_ne	and	local10, #3
2eb38     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
2eb3c     5D BB E2 A8 |  if_e	getbyte	local11, local11, #0
2eb40     02 BA 46 A5 |  if_e	or	local11, #2
2eb44     5D AB E2 F8 | 	getbyte	local03, local11, #0
2eb48     02 AA CE F7 | 	test	local03, #2 wz
2eb4c     20 00 90 5D |  if_ne	jmp	#LR__4993
2eb50     60 AB E2 F8 | 	getbyte	local03, local14, #0
2eb54     01 AA CE F7 | 	test	local03, #1 wz
2eb58     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2eb5c     10 BA 46 55 |  if_ne	or	local11, #16
2eb60     60 C1 E2 F8 | 	getbyte	local14, local14, #0
2eb64     04 C0 CE F7 | 	test	local14, #4 wz
2eb68     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2eb6c     08 BA 46 55 |  if_ne	or	local11, #8
2eb70                 | LR__4993
2eb70     2B A6 06 F1 | 	add	local01, #43
2eb74     53 BB 42 FC | 	wrbyte	local11, local01
2eb78                 | ' 	}
2eb78                 | ' 
2eb78                 | ' 	dp->fn[ 11 ] = cf;
2eb78                 | ' 
2eb78                 | ' 	return FR_OK;
2eb78     00 7A 06 F6 | 	mov	result1, #0
2eb7c                 | LR__4994
2eb7c     E7 F0 03 F6 | 	mov	ptra, fp
2eb80     F2 00 A0 FD | 	call	#popregs_
2eb84                 | _fatfs_cc_create_name_ret
2eb84     2D 00 64 FD | 	ret
2eb88                 | 
2eb88                 | _fatfs_cc_follow_path
2eb88     04 CA 05 F6 | 	mov	COUNT_, #4
2eb8c     E8 00 A0 FD | 	call	#pushregs_
2eb90     18 F0 07 F1 | 	add	ptra, #24
2eb94     49 A7 02 F6 | 	mov	local01, arg01
2eb98     08 CE 05 F1 | 	add	fp, #8
2eb9c     E7 94 62 FC | 	wrlong	arg02, fp
2eba0     08 CE 85 F1 | 	sub	fp, #8
2eba4     53 A9 02 FB | 	rdlong	local02, local01
2eba8     D7 24 48 FB | 	callpa	#(@LR__5002-@LR__5000)>>2,fcache_load_ptr_
2ebac                 | ' )
2ebac                 | ' {
2ebac                 | ' 	FRESULT res;
2ebac                 | ' 	BYTE ns;
2ebac                 | ' 	FATFS *fs = dp->obj.fs;
2ebac                 | ' #line 3034 "ff.c"
2ebac                 | ' 	{
2ebac                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2ebac                 | LR__5000
2ebac     08 CE 05 F1 | 	add	fp, #8
2ebb0     E7 7A 02 FB | 	rdlong	result1, fp
2ebb4     08 CE 85 F1 | 	sub	fp, #8
2ebb8     3D 7B C2 FA | 	rdbyte	result1, result1
2ebbc     2F 7A 0E F2 | 	cmp	result1, #47 wz
2ebc0     18 00 90 AD |  if_e	jmp	#LR__5001
2ebc4     08 CE 05 F1 | 	add	fp, #8
2ebc8     E7 7A 02 FB | 	rdlong	result1, fp
2ebcc     08 CE 85 F1 | 	sub	fp, #8
2ebd0     3D 7B C2 FA | 	rdbyte	result1, result1
2ebd4     5C 7A 0E F2 | 	cmp	result1, #92 wz
2ebd8     18 00 90 5D |  if_ne	jmp	#LR__5003
2ebdc                 | LR__5001
2ebdc     08 CE 05 F1 | 	add	fp, #8
2ebe0     E7 7A 02 FB | 	rdlong	result1, fp
2ebe4     01 7A 06 F1 | 	add	result1, #1
2ebe8     E7 7A 62 FC | 	wrlong	result1, fp
2ebec     08 CE 85 F1 | 	sub	fp, #8
2ebf0     B8 FF 9F FD | 	jmp	#LR__5000
2ebf4                 | LR__5002
2ebf4                 | LR__5003
2ebf4     08 A6 06 F1 | 	add	local01, #8
2ebf8     53 01 68 FC | 	wrlong	#0, local01
2ebfc     08 A6 86 F1 | 	sub	local01, #8
2ec00     08 CE 05 F1 | 	add	fp, #8
2ec04     E7 94 02 FB | 	rdlong	arg02, fp
2ec08     08 CE 85 F1 | 	sub	fp, #8
2ec0c     4A 95 C2 FA | 	rdbyte	arg02, arg02
2ec10     20 94 16 F2 | 	cmp	arg02, #32 wc
2ec14     20 00 90 3D |  if_ae	jmp	#LR__5004
2ec18     2B A6 06 F1 | 	add	local01, #43
2ec1c     53 01 49 FC | 	wrbyte	#128, local01
2ec20     2B A6 86 F1 | 	sub	local01, #43
2ec24     53 93 02 F6 | 	mov	arg01, local01
2ec28     00 94 06 F6 | 	mov	arg02, #0
2ec2c     9C E6 BF FD | 	call	#_fatfs_cc_dir_sdi
2ec30     3D AB 02 F6 | 	mov	local03, result1
2ec34     A0 00 90 FD | 	jmp	#LR__5008
2ec38                 | LR__5004
2ec38                 | ' 		for (;;) {
2ec38                 | LR__5005
2ec38     E7 94 02 F6 | 	mov	arg02, fp
2ec3c     08 94 06 F1 | 	add	arg02, #8
2ec40     53 93 02 F6 | 	mov	arg01, local01
2ec44     5C FA BF FD | 	call	#_fatfs_cc_create_name
2ec48     3D AB 0A F6 | 	mov	local03, result1 wz
2ec4c     88 00 90 5D |  if_ne	jmp	#LR__5007
2ec50     53 93 02 F6 | 	mov	arg01, local01
2ec54     0C F1 BF FD | 	call	#_fatfs_cc_dir_find
2ec58     3D AB 0A F6 | 	mov	local03, result1 wz
2ec5c     2B A6 06 F1 | 	add	local01, #43
2ec60     53 AD C2 FA | 	rdbyte	local04, local01
2ec64     2B A6 86 F1 | 	sub	local01, #43
2ec68     18 00 90 AD |  if_e	jmp	#LR__5006
2ec6c     04 AA 0E F2 | 	cmp	local03, #4 wz
2ec70     64 00 90 5D |  if_ne	jmp	#LR__5007
2ec74     56 AD E2 F8 | 	getbyte	local04, local04, #0
2ec78     04 AC CE F7 | 	test	local04, #4 wz
2ec7c     05 AA 06 A6 |  if_e	mov	local03, #5
2ec80                 | ' 					}
2ec80                 | ' 				}
2ec80                 | ' 				break;
2ec80     54 00 90 FD | 	jmp	#LR__5007
2ec84                 | LR__5006
2ec84     56 AD E2 F8 | 	getbyte	local04, local04, #0
2ec88     04 AC CE F7 | 	test	local04, #4 wz
2ec8c     48 00 90 5D |  if_ne	jmp	#LR__5007
2ec90     06 A6 06 F1 | 	add	local01, #6
2ec94     53 AD C2 FA | 	rdbyte	local04, local01
2ec98     06 A6 86 F1 | 	sub	local01, #6
2ec9c     10 AC CE F7 | 	test	local04, #16 wz
2eca0     05 AA 06 A6 |  if_e	mov	local03, #5
2eca4                 | ' 				res = FR_NO_PATH; break;
2eca4     30 00 90 AD |  if_e	jmp	#LR__5007
2eca8     54 93 02 F6 | 	mov	arg01, local02
2ecac     54 95 02 F6 | 	mov	arg02, local02
2ecb0     34 94 06 F1 | 	add	arg02, #52
2ecb4     10 A6 06 F1 | 	add	local01, #16
2ecb8     53 AD 02 FB | 	rdlong	local04, local01
2ecbc     FF AD 06 F5 | 	and	local04, #511
2ecc0     56 95 02 F1 | 	add	arg02, local04
2ecc4     D8 E9 BF FD | 	call	#_fatfs_cc_ld_clust
2ecc8     08 A6 86 F1 | 	sub	local01, #8
2eccc     53 7B 62 FC | 	wrlong	result1, local01
2ecd0     08 A6 86 F1 | 	sub	local01, #8
2ecd4     60 FF 9F FD | 	jmp	#LR__5005
2ecd8                 | LR__5007
2ecd8                 | LR__5008
2ecd8                 | ' 			}
2ecd8                 | ' #line 3090 "ff.c"
2ecd8                 | ' 			{
2ecd8                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2ecd8                 | ' 			}
2ecd8                 | ' 		}
2ecd8                 | ' 	}
2ecd8                 | ' 
2ecd8                 | ' 	return res;
2ecd8     55 7B 02 F6 | 	mov	result1, local03
2ecdc     E7 F0 03 F6 | 	mov	ptra, fp
2ece0     F2 00 A0 FD | 	call	#popregs_
2ece4                 | _fatfs_cc_follow_path_ret
2ece4     2D 00 64 FD | 	ret
2ece8                 | 
2ece8                 | _fatfs_cc_get_ldnumber
2ece8     01 80 66 F6 | 	neg	_var01, #1
2ecec     49 83 0A FB | 	rdlong	_var02, arg01 wz
2ecf0     41 85 02 F6 | 	mov	_var03, _var02
2ecf4     01 7A 66 A6 |  if_e	neg	result1, #1
2ecf8     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2ecfc     D7 10 48 FB | 	callpa	#(@LR__5011-@LR__5010)>>2,fcache_load_ptr_
2ed00                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2ed00                 | LR__5010
2ed00     42 87 C2 FA | 	rdbyte	_var04, _var03
2ed04     43 7B E2 F8 | 	getbyte	result1, _var04, #0
2ed08     20 7A 16 F2 | 	cmp	result1, #32 wc
2ed0c     01 84 06 F1 | 	add	_var03, #1
2ed10     43 89 02 36 |  if_ae	mov	_var05, _var04
2ed14     44 89 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2ed18     3A 88 0E 32 |  if_ae	cmp	_var05, #58 wz
2ed1c     E0 FF 9F 1D |  if_a	jmp	#LR__5010
2ed20                 | LR__5011
2ed20     43 87 E2 F8 | 	getbyte	_var04, _var04, #0
2ed24     3A 86 0E F2 | 	cmp	_var04, #58 wz
2ed28     40 00 90 5D |  if_ne	jmp	#LR__5013
2ed2c     01 8A 06 F6 | 	mov	_var06, #1
2ed30     41 89 C2 FA | 	rdbyte	_var05, _var02
2ed34     30 88 16 F2 | 	cmp	_var05, #48 wc
2ed38     1C 00 90 CD |  if_b	jmp	#LR__5012
2ed3c     41 89 C2 FA | 	rdbyte	_var05, _var02
2ed40     3A 88 16 F2 | 	cmp	_var05, #58 wc
2ed44     41 8D 02 C6 |  if_b	mov	_var07, _var02
2ed48     02 8C 06 C1 |  if_b	add	_var07, #2
2ed4c     42 8D 0A C2 |  if_b	cmp	_var07, _var03 wz
2ed50     44 8B 02 86 |  if_c_and_z	mov	_var06, _var05
2ed54     30 8A 86 81 |  if_c_and_z	sub	_var06, #48
2ed58                 | LR__5012
2ed58     01 8A 56 F2 | 	cmps	_var06, #1 wc
2ed5c     45 81 02 C6 |  if_b	mov	_var01, _var06
2ed60     49 85 62 CC |  if_b	wrlong	_var03, arg01
2ed64                 | ' 			vol = i;
2ed64                 | ' 			*path = tt;
2ed64                 | ' 		}
2ed64                 | ' 		return vol;
2ed64     40 7B 02 F6 | 	mov	result1, _var01
2ed68     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2ed6c                 | LR__5013
2ed6c                 | ' 	}
2ed6c                 | ' #line 3170 "ff.c"
2ed6c                 | ' 	vol = 0;
2ed6c                 | ' 
2ed6c                 | ' 	return vol;
2ed6c     00 7A 06 F6 | 	mov	result1, #0
2ed70                 | _fatfs_cc_get_ldnumber_ret
2ed70     2D 00 64 FD | 	ret
2ed74                 | 
2ed74                 | _fatfs_cc_check_fs
2ed74     04 CA 05 F6 | 	mov	COUNT_, #4
2ed78     E8 00 A0 FD | 	call	#pushregs_
2ed7c     49 A7 02 F6 | 	mov	local01, arg01
2ed80     03 A6 06 F1 | 	add	local01, #3
2ed84     53 01 48 FC | 	wrbyte	#0, local01
2ed88     2D A6 06 F1 | 	add	local01, #45
2ed8c     FF FF FF FF 
2ed90     53 FF 6B FC | 	wrlong	##-1, local01
2ed94     30 A6 86 F1 | 	sub	local01, #48
2ed98     53 93 02 F6 | 	mov	arg01, local01
2ed9c     C8 DB BF FD | 	call	#_fatfs_cc_move_window
2eda0     00 7A 0E F2 | 	cmp	result1, #0 wz
2eda4     04 7A 06 56 |  if_ne	mov	result1, #4
2eda8     64 01 90 5D |  if_ne	jmp	#LR__5023
2edac     34 A6 06 F1 | 	add	local01, #52
2edb0     53 93 02 F6 | 	mov	arg01, local01
2edb4     FE 93 06 F1 | 	add	arg01, #510
2edb8                 | ' {
2edb8                 | ' 
2edb8                 | ' 	return *((WORD*)ptr);
2edb8     49 A9 E2 FA | 	rdword	local02, arg01
2edbc     53 AB C2 FA | 	rdbyte	local03, local01
2edc0     34 A6 86 F1 | 	sub	local01, #52
2edc4     55 AD E2 F8 | 	getbyte	local04, local03, #0
2edc8     EB AC 0E F2 | 	cmp	local04, #235 wz
2edcc     55 97 02 56 |  if_ne	mov	arg03, local03
2edd0     4B 97 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2edd4     E9 96 0E 52 |  if_ne	cmp	arg03, #233 wz
2edd8     55 AB E2 58 |  if_ne	getbyte	local03, local03, #0
2eddc     E8 AA 0E 52 |  if_ne	cmp	local03, #232 wz
2ede0     14 01 90 5D |  if_ne	jmp	#LR__5022
2ede4     54 AD 32 F9 | 	getword	local04, local02, #0
2ede8     55 00 00 FF 
2edec     55 AC 0E F2 | 	cmp	local04, ##43605 wz
2edf0     24 00 90 5D |  if_ne	jmp	#LR__5020
2edf4     53 93 02 F6 | 	mov	arg01, local01
2edf8     86 92 06 F1 | 	add	arg01, #134
2edfc     92 01 00 FF 
2ee00     17 95 06 F6 | 	mov	arg02, ##@LR__5485
2ee04     08 96 06 F6 | 	mov	arg03, #8
2ee08     10 D0 BF FD | 	call	#_fatfs_cc_memcmp
2ee0c     00 7A 0E F2 | 	cmp	result1, #0 wz
2ee10                 | ' 			return 0;
2ee10     00 7A 06 A6 |  if_e	mov	result1, #0
2ee14     F8 00 90 AD |  if_e	jmp	#LR__5023
2ee18                 | LR__5020
2ee18     34 A6 06 F1 | 	add	local01, #52
2ee1c     53 93 02 F6 | 	mov	arg01, local01
2ee20     0B 92 06 F1 | 	add	arg01, #11
2ee24                 | ' {
2ee24                 | ' 
2ee24                 | ' 	return *((WORD*)ptr);
2ee24     49 7B E2 FA | 	rdword	result1, arg01
2ee28     0D A6 06 F1 | 	add	local01, #13
2ee2c     53 AB C2 FA | 	rdbyte	local03, local01
2ee30     41 A6 86 F1 | 	sub	local01, #65
2ee34     3D AD 32 F9 | 	getword	local04, result1, #0
2ee38     3D 95 32 F9 | 	getword	arg02, result1, #0
2ee3c     01 94 86 F1 | 	sub	arg02, #1
2ee40     4A AD CA F7 | 	test	local04, arg02 wz
2ee44     B0 00 90 5D |  if_ne	jmp	#LR__5021
2ee48     3D 95 32 F9 | 	getword	arg02, result1, #0
2ee4c     01 00 00 FF 
2ee50     00 94 16 F2 | 	cmp	arg02, ##512 wc
2ee54     A0 00 90 CD |  if_b	jmp	#LR__5021
2ee58     3D 95 32 F9 | 	getword	arg02, result1, #0
2ee5c     01 00 00 FF 
2ee60     01 94 16 F2 | 	cmp	arg02, ##513 wc
2ee64     90 00 90 3D |  if_ae	jmp	#LR__5021
2ee68     55 93 02 F6 | 	mov	arg01, local03
2ee6c     07 92 4E F7 | 	zerox	arg01, #7 wz
2ee70     84 00 90 AD |  if_e	jmp	#LR__5021
2ee74     55 93 E2 F8 | 	getbyte	arg01, local03, #0
2ee78     55 AB E2 F8 | 	getbyte	local03, local03, #0
2ee7c     01 AA 86 F1 | 	sub	local03, #1
2ee80     55 93 CA F7 | 	test	arg01, local03 wz
2ee84     70 00 90 5D |  if_ne	jmp	#LR__5021
2ee88     53 93 02 F6 | 	mov	arg01, local01
2ee8c     42 92 06 F1 | 	add	arg01, #66
2ee90                 | ' {
2ee90                 | ' 
2ee90                 | ' 	return *((WORD*)ptr);
2ee90     49 7B EA FA | 	rdword	result1, arg01 wz
2ee94     60 00 90 AD |  if_e	jmp	#LR__5021
2ee98     44 A6 06 F1 | 	add	local01, #68
2ee9c     53 93 C2 FA | 	rdbyte	arg01, local01
2eea0     44 A6 86 F1 | 	sub	local01, #68
2eea4     01 92 86 F1 | 	sub	arg01, #1
2eea8     02 92 16 F2 | 	cmp	arg01, #2 wc
2eeac     48 00 90 3D |  if_ae	jmp	#LR__5021
2eeb0     53 93 02 F6 | 	mov	arg01, local01
2eeb4     45 92 06 F1 | 	add	arg01, #69
2eeb8                 | ' {
2eeb8                 | ' 
2eeb8                 | ' 	return *((WORD*)ptr);
2eeb8     49 7B EA FA | 	rdword	result1, arg01 wz
2eebc     38 00 90 AD |  if_e	jmp	#LR__5021
2eec0     53 93 02 F6 | 	mov	arg01, local01
2eec4     47 92 06 F1 | 	add	arg01, #71
2eec8                 | ' {
2eec8                 | ' 
2eec8                 | ' 	return *((WORD*)ptr);
2eec8     49 7B E2 FA | 	rdword	result1, arg01
2eecc     3D AB 32 F9 | 	getword	local03, result1, #0
2eed0     80 AA 16 F2 | 	cmp	local03, #128 wc
2eed4     53 93 02 C6 |  if_b	mov	arg01, local01
2eed8     54 92 06 C1 |  if_b	add	arg01, #84
2eedc                 | ' {
2eedc                 | ' 
2eedc                 | ' 	return *((DWORD*)ptr);
2eedc     49 7B 02 CB |  if_b	rdlong	result1, arg01
2eee0     80 00 00 CF 
2eee4     00 7A 16 C2 |  if_b	cmp	result1, ##65536 wc
2eee8     4A A6 06 31 |  if_ae	add	local01, #74
2eeec                 | ' {
2eeec                 | ' 
2eeec                 | ' 	return *((WORD*)ptr);
2eeec     53 7B EA 3A |  if_ae	rdword	result1, local01 wz
2eef0                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2eef0                 | ' 			&& ld_word(fs->win +  14 ) != 0
2eef0                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2eef0                 | ' 			&& ld_word(fs->win +  17 ) != 0
2eef0                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2eef0                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2eef0                 | ' 				return 0;
2eef0     00 7A 06 16 |  if_a	mov	result1, #0
2eef4     18 00 90 1D |  if_a	jmp	#LR__5023
2eef8                 | LR__5021
2eef8                 | LR__5022
2eef8                 | ' 		}
2eef8                 | ' 	}
2eef8                 | ' 	return sign == 0xAA55 ? 2 : 3;
2eef8     54 AB 32 F9 | 	getword	local03, local02, #0
2eefc     55 00 00 FF 
2ef00     55 AA 0E F2 | 	cmp	local03, ##43605 wz
2ef04     02 AC 06 A6 |  if_e	mov	local04, #2
2ef08     03 AC 06 56 |  if_ne	mov	local04, #3
2ef0c     56 7B 02 F6 | 	mov	result1, local04
2ef10                 | LR__5023
2ef10     E7 F0 03 F6 | 	mov	ptra, fp
2ef14     F2 00 A0 FD | 	call	#popregs_
2ef18                 | _fatfs_cc_check_fs_ret
2ef18     2D 00 64 FD | 	ret
2ef1c                 | 
2ef1c                 | _fatfs_cc_find_volume
2ef1c     05 CA 05 F6 | 	mov	COUNT_, #5
2ef20     E8 00 A0 FD | 	call	#pushregs_
2ef24     24 F0 07 F1 | 	add	ptra, #36
2ef28     49 A7 02 F6 | 	mov	local01, arg01
2ef2c     4A A9 02 F6 | 	mov	local02, arg02
2ef30     53 93 02 F6 | 	mov	arg01, local01
2ef34     00 94 06 F6 | 	mov	arg02, #0
2ef38     38 FE BF FD | 	call	#_fatfs_cc_check_fs
2ef3c     02 7A 0E F2 | 	cmp	result1, #2 wz
2ef40     0C 00 90 AD |  if_e	jmp	#LR__5030
2ef44     03 7A 16 F2 | 	cmp	result1, #3 wc
2ef48     00 A8 0E C2 |  if_b	cmp	local02, #0 wz
2ef4c     C8 00 90 BD |  if_nc_or_z	jmp	#LR__5038
2ef50                 | LR__5030
2ef50                 | ' 	for (i = 0; i < 4; i++) {
2ef50     00 AA 06 F6 | 	mov	local03, #0
2ef54     D7 22 48 FB | 	callpa	#(@LR__5032-@LR__5031)>>2,fcache_load_ptr_
2ef58                 | LR__5031
2ef58     04 AA 16 F2 | 	cmp	local03, #4 wc
2ef5c     3C 00 90 3D |  if_ae	jmp	#LR__5033
2ef60     55 AD 02 F6 | 	mov	local04, local03
2ef64     02 AC 66 F0 | 	shl	local04, #2
2ef68     E7 94 02 F6 | 	mov	arg02, fp
2ef6c     14 94 06 F1 | 	add	arg02, #20
2ef70     4A AD 02 F1 | 	add	local04, arg02
2ef74     53 93 02 F6 | 	mov	arg01, local01
2ef78     F2 93 06 F1 | 	add	arg01, #498
2ef7c     55 95 02 F6 | 	mov	arg02, local03
2ef80     04 94 66 F0 | 	shl	arg02, #4
2ef84     4A 93 02 F1 | 	add	arg01, arg02
2ef88     08 92 06 F1 | 	add	arg01, #8
2ef8c                 | ' {
2ef8c                 | ' 
2ef8c                 | ' 	return *((DWORD*)ptr);
2ef8c     49 7B 02 FB | 	rdlong	result1, arg01
2ef90     56 7B 62 FC | 	wrlong	result1, local04
2ef94     01 AA 06 F1 | 	add	local03, #1
2ef98     BC FF 9F FD | 	jmp	#LR__5031
2ef9c                 | LR__5032
2ef9c                 | LR__5033
2ef9c     00 A8 0E F2 | 	cmp	local02, #0 wz
2efa0     54 AD 02 56 |  if_ne	mov	local04, local02
2efa4     01 AC 86 51 |  if_ne	sub	local04, #1
2efa8     00 AC 06 A6 |  if_e	mov	local04, #0
2efac     56 AB 02 F6 | 	mov	local03, local04
2efb0                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2efb0                 | ' 	}
2efb0                 | ' 	i = part ? part - 1 : 0;
2efb0                 | ' 	do {
2efb0                 | LR__5034
2efb0     55 AD 02 F6 | 	mov	local04, local03
2efb4     02 AC 66 F0 | 	shl	local04, #2
2efb8     E7 94 02 F6 | 	mov	arg02, fp
2efbc     14 94 06 F1 | 	add	arg02, #20
2efc0     4A AD 02 F1 | 	add	local04, arg02
2efc4     56 AD 0A FB | 	rdlong	local04, local04 wz
2efc8     28 00 90 AD |  if_e	jmp	#LR__5035
2efcc     55 AD 02 F6 | 	mov	local04, local03
2efd0     02 AC 66 F0 | 	shl	local04, #2
2efd4     E7 94 02 F6 | 	mov	arg02, fp
2efd8     14 94 06 F1 | 	add	arg02, #20
2efdc     4A AD 02 F1 | 	add	local04, arg02
2efe0     56 95 02 FB | 	rdlong	arg02, local04
2efe4     53 93 02 F6 | 	mov	arg01, local01
2efe8     88 FD BF FD | 	call	#_fatfs_cc_check_fs
2efec     3D AD 02 F6 | 	mov	local04, result1
2eff0     04 00 90 FD | 	jmp	#LR__5036
2eff4                 | LR__5035
2eff4     03 AC 06 F6 | 	mov	local04, #3
2eff8                 | LR__5036
2eff8     56 AF 02 F6 | 	mov	local05, local04
2effc     00 A8 0E F2 | 	cmp	local02, #0 wz
2f000     02 AE 16 A2 |  if_e	cmp	local05, #2 wc
2f004     0C 00 90 8D |  if_c_and_z	jmp	#LR__5037
2f008     01 AA 06 A1 |  if_e	add	local03, #1
2f00c     04 AA 16 A2 |  if_e	cmp	local03, #4 wc
2f010     9C FF 9F 8D |  if_c_and_z	jmp	#LR__5034
2f014                 | LR__5037
2f014                 | ' 	return fmt;
2f014     57 7B 02 F6 | 	mov	result1, local05
2f018                 | LR__5038
2f018     E7 F0 03 F6 | 	mov	ptra, fp
2f01c     F2 00 A0 FD | 	call	#popregs_
2f020                 | _fatfs_cc_find_volume_ret
2f020     2D 00 64 FD | 	ret
2f024                 | 
2f024                 | _fatfs_cc_mount_volume
2f024     0A CA 05 F6 | 	mov	COUNT_, #10
2f028     E8 00 A0 FD | 	call	#pushregs_
2f02c     4B A7 02 F6 | 	mov	local01, arg03
2f030     4A 01 68 FC | 	wrlong	#0, arg02
2f034     B0 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2f038     3D A9 02 F6 | 	mov	local02, result1
2f03c     00 A8 56 F2 | 	cmps	local02, #0 wc
2f040     0B 7A 06 C6 |  if_b	mov	result1, #11
2f044     00 05 90 CD |  if_b	jmp	#LR__5049
2f048     54 97 02 F6 | 	mov	arg03, local02
2f04c     02 96 66 F0 | 	shl	arg03, #2
2f050     32 97 02 F1 | 	add	arg03, objptr
2f054     4B AB 0A FB | 	rdlong	local03, arg03 wz
2f058     0C 7A 06 A6 |  if_e	mov	result1, #12
2f05c     E8 04 90 AD |  if_e	jmp	#LR__5049
2f060     4A AB 62 FC | 	wrlong	local03, arg02
2f064     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2f068     FE A6 06 F5 | 	and	local01, #254
2f06c     55 97 CA FA | 	rdbyte	arg03, local03 wz
2f070     44 00 90 AD |  if_e	jmp	#LR__5041
2f074     01 00 00 FF 
2f078     10 64 06 F1 | 	add	objptr, ##528
2f07c     32 93 0A FB | 	rdlong	arg01, objptr wz
2f080     01 00 00 FF 
2f084     10 64 86 F1 | 	sub	objptr, ##528
2f088                 | '         return RES_NOTRDY;
2f088     03 7A 06 A6 |  if_e	mov	result1, #3
2f08c                 | '     }
2f08c                 | '     return RES_OK;
2f08c     00 7A 06 56 |  if_ne	mov	result1, #0
2f090     3D 97 E2 F8 | 	getbyte	arg03, result1, #0
2f094     01 96 CE F7 | 	test	arg03, #1 wz
2f098     1C 00 90 5D |  if_ne	jmp	#LR__5040
2f09c     00 A6 0E F2 | 	cmp	local01, #0 wz
2f0a0     3D 7B E2 58 |  if_ne	getbyte	result1, result1, #0
2f0a4     04 7A CE 57 |  if_ne	test	result1, #4 wz
2f0a8                 | ' 				return FR_WRITE_PROTECTED;
2f0a8     0A 7A 06 56 |  if_ne	mov	result1, #10
2f0ac     98 04 90 5D |  if_ne	jmp	#LR__5049
2f0b0                 | ' 			}
2f0b0                 | ' 			return FR_OK;
2f0b0     00 7A 06 F6 | 	mov	result1, #0
2f0b4     90 04 90 FD | 	jmp	#LR__5049
2f0b8                 | LR__5040
2f0b8                 | LR__5041
2f0b8     55 01 48 FC | 	wrbyte	#0, local03
2f0bc     01 AA 06 F1 | 	add	local03, #1
2f0c0     55 A9 42 FC | 	wrbyte	local02, local03
2f0c4     01 AA 86 F1 | 	sub	local03, #1
2f0c8     01 00 00 FF 
2f0cc     10 64 06 F1 | 	add	objptr, ##528
2f0d0     32 A9 0A FB | 	rdlong	local02, objptr wz
2f0d4     01 00 00 FF 
2f0d8     10 64 86 F1 | 	sub	objptr, ##528
2f0dc                 | ' 
2f0dc                 | '         return RES_NOTRDY;
2f0dc     03 7A 06 A6 |  if_e	mov	result1, #3
2f0e0                 | '     }
2f0e0                 | '     return RES_OK;
2f0e0     00 7A 06 56 |  if_ne	mov	result1, #0
2f0e4     3D 97 02 F6 | 	mov	arg03, result1
2f0e8     4B AD E2 F8 | 	getbyte	local04, arg03, #0
2f0ec     01 AC CE F7 | 	test	local04, #1 wz
2f0f0                 | ' 		return FR_NOT_READY;
2f0f0     03 7A 06 56 |  if_ne	mov	result1, #3
2f0f4     50 04 90 5D |  if_ne	jmp	#LR__5049
2f0f8     00 A6 0E F2 | 	cmp	local01, #0 wz
2f0fc     4B AD 02 56 |  if_ne	mov	local04, arg03
2f100     56 AD E2 58 |  if_ne	getbyte	local04, local04, #0
2f104     04 AC CE 57 |  if_ne	test	local04, #4 wz
2f108                 | ' 		return FR_WRITE_PROTECTED;
2f108     0A 7A 06 56 |  if_ne	mov	result1, #10
2f10c     38 04 90 5D |  if_ne	jmp	#LR__5049
2f110     55 93 02 F6 | 	mov	arg01, local03
2f114     00 94 06 F6 | 	mov	arg02, #0
2f118     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2f11c     3D 93 02 F6 | 	mov	arg01, result1
2f120     04 92 0E F2 | 	cmp	arg01, #4 wz
2f124     01 7A 06 A6 |  if_e	mov	result1, #1
2f128     1C 04 90 AD |  if_e	jmp	#LR__5049
2f12c     02 92 16 F2 | 	cmp	arg01, #2 wc
2f130     0D 7A 06 36 |  if_ae	mov	result1, #13
2f134     10 04 90 3D |  if_ae	jmp	#LR__5049
2f138     30 AA 06 F1 | 	add	local03, #48
2f13c     55 AF 02 FB | 	rdlong	local05, local03
2f140     04 AA 06 F1 | 	add	local03, #4
2f144     55 93 02 F6 | 	mov	arg01, local03
2f148     34 AA 86 F1 | 	sub	local03, #52
2f14c     0B 92 06 F1 | 	add	arg01, #11
2f150                 | ' {
2f150                 | ' 
2f150                 | ' 	return *((WORD*)ptr);
2f150     49 7B E2 FA | 	rdword	result1, arg01
2f154     01 00 00 FF 
2f158     00 7A 0E F2 | 	cmp	result1, ##512 wz
2f15c     0D 7A 06 56 |  if_ne	mov	result1, #13
2f160     E4 03 90 5D |  if_ne	jmp	#LR__5049
2f164     55 93 02 F6 | 	mov	arg01, local03
2f168     4A 92 06 F1 | 	add	arg01, #74
2f16c                 | ' {
2f16c                 | ' 
2f16c                 | ' 	return *((WORD*)ptr);
2f16c     49 7B E2 FA | 	rdword	result1, arg01
2f170     3D B1 0A F6 | 	mov	local06, result1 wz
2f174     55 93 02 A6 |  if_e	mov	arg01, local03
2f178     58 92 06 A1 |  if_e	add	arg01, #88
2f17c                 | ' {
2f17c                 | ' 
2f17c                 | ' 	return *((DWORD*)ptr);
2f17c     49 7B 02 AB |  if_e	rdlong	result1, arg01
2f180     3D B1 02 A6 |  if_e	mov	local06, result1
2f184     1C AA 06 F1 | 	add	local03, #28
2f188     55 B1 62 FC | 	wrlong	local06, local03
2f18c     28 AA 06 F1 | 	add	local03, #40
2f190     55 AD C2 FA | 	rdbyte	local04, local03
2f194     42 AA 86 F1 | 	sub	local03, #66
2f198     55 AD 42 FC | 	wrbyte	local04, local03
2f19c     56 AD E2 F8 | 	getbyte	local04, local04, #0
2f1a0     02 AA 86 F1 | 	sub	local03, #2
2f1a4     01 AC 0E F2 | 	cmp	local04, #1 wz
2f1a8     02 AA 06 51 |  if_ne	add	local03, #2
2f1ac     55 AD C2 5A |  if_ne	rdbyte	local04, local03
2f1b0     02 AA 86 51 |  if_ne	sub	local03, #2
2f1b4     02 AC 0E 52 |  if_ne	cmp	local04, #2 wz
2f1b8     0D 7A 06 56 |  if_ne	mov	result1, #13
2f1bc     88 03 90 5D |  if_ne	jmp	#LR__5049
2f1c0     02 AA 06 F1 | 	add	local03, #2
2f1c4     55 AD C2 FA | 	rdbyte	local04, local03
2f1c8     56 B1 02 FD | 	qmul	local06, local04
2f1cc     3F AA 06 F1 | 	add	local03, #63
2f1d0     55 AD C2 FA | 	rdbyte	local04, local03
2f1d4     37 AA 86 F1 | 	sub	local03, #55
2f1d8     55 AD 52 FC | 	wrword	local04, local03
2f1dc     56 AD 32 F9 | 	getword	local04, local04, #0
2f1e0     0A AA 86 F1 | 	sub	local03, #10
2f1e4     0F AC 4E F7 | 	zerox	local04, #15 wz
2f1e8     18 B0 62 FD | 	getqx	local06
2f1ec     20 00 90 AD |  if_e	jmp	#LR__5042
2f1f0     0A AA 06 F1 | 	add	local03, #10
2f1f4     55 AD E2 FA | 	rdword	local04, local03
2f1f8     56 A9 32 F9 | 	getword	local02, local04, #0
2f1fc     0A AA 86 F1 | 	sub	local03, #10
2f200     56 AD 32 F9 | 	getword	local04, local04, #0
2f204     01 AC 86 F1 | 	sub	local04, #1
2f208     56 A9 CA F7 | 	test	local02, local04 wz
2f20c     08 00 90 AD |  if_e	jmp	#LR__5043
2f210                 | LR__5042
2f210     0D 7A 06 F6 | 	mov	result1, #13
2f214     30 03 90 FD | 	jmp	#LR__5049
2f218                 | LR__5043
2f218     34 AA 06 F1 | 	add	local03, #52
2f21c     55 93 02 F6 | 	mov	arg01, local03
2f220     11 92 06 F1 | 	add	arg01, #17
2f224                 | ' {
2f224                 | ' 
2f224                 | ' 	return *((WORD*)ptr);
2f224     49 7B E2 FA | 	rdword	result1, arg01
2f228     2C AA 86 F1 | 	sub	local03, #44
2f22c     55 7B 52 FC | 	wrword	result1, local03
2f230     3D AD 32 F9 | 	getword	local04, result1, #0
2f234     08 AA 86 F1 | 	sub	local03, #8
2f238     56 93 52 F6 | 	abs	arg01, local04 wc
2f23c     49 93 42 F8 | 	getnib	arg01, arg01, #0
2f240     49 93 8A F6 | 	negc	arg01, arg01 wz
2f244     0D 7A 06 56 |  if_ne	mov	result1, #13
2f248     FC 02 90 5D |  if_ne	jmp	#LR__5049
2f24c     55 93 02 F6 | 	mov	arg01, local03
2f250     47 92 06 F1 | 	add	arg01, #71
2f254                 | ' {
2f254                 | ' 
2f254                 | ' 	return *((WORD*)ptr);
2f254     49 7B E2 FA | 	rdword	result1, arg01
2f258     3D B3 0A F6 | 	mov	local07, result1 wz
2f25c     55 93 02 A6 |  if_e	mov	arg01, local03
2f260     54 92 06 A1 |  if_e	add	arg01, #84
2f264                 | ' {
2f264                 | ' 
2f264                 | ' 	return *((DWORD*)ptr);
2f264     49 B3 02 AB |  if_e	rdlong	local07, arg01
2f268     55 93 02 F6 | 	mov	arg01, local03
2f26c     42 92 06 F1 | 	add	arg01, #66
2f270                 | ' {
2f270                 | ' 
2f270                 | ' 	return *((WORD*)ptr);
2f270     49 7B E2 FA | 	rdword	result1, arg01
2f274     3D 93 02 F6 | 	mov	arg01, result1
2f278     49 AD 02 F6 | 	mov	local04, arg01
2f27c     0F AC 4E F7 | 	zerox	local04, #15 wz
2f280     0D 7A 06 A6 |  if_e	mov	result1, #13
2f284     C0 02 90 AD |  if_e	jmp	#LR__5049
2f288     49 B5 32 F9 | 	getword	local08, arg01, #0
2f28c     58 B5 02 F1 | 	add	local08, local06
2f290     08 AA 06 F1 | 	add	local03, #8
2f294     55 AD E2 FA | 	rdword	local04, local03
2f298     08 AA 86 F1 | 	sub	local03, #8
2f29c     56 AD 52 F6 | 	abs	local04, local04 wc
2f2a0     04 AC 46 F0 | 	shr	local04, #4
2f2a4     56 B5 82 F3 | 	sumc	local08, local04
2f2a8     5A B3 12 F2 | 	cmp	local07, local08 wc
2f2ac     0D 7A 06 C6 |  if_b	mov	result1, #13
2f2b0     94 02 90 CD |  if_b	jmp	#LR__5049
2f2b4     5A B3 82 F1 | 	sub	local07, local08
2f2b8     0A AA 06 F1 | 	add	local03, #10
2f2bc     55 AD E2 FA | 	rdword	local04, local03
2f2c0     56 B3 12 FD | 	qdiv	local07, local04
2f2c4     0A AA 86 F1 | 	sub	local03, #10
2f2c8     18 AC 62 FD | 	getqx	local04
2f2cc     00 AC 0E F2 | 	cmp	local04, #0 wz
2f2d0     0D 7A 06 A6 |  if_e	mov	result1, #13
2f2d4     70 02 90 AD |  if_e	jmp	#LR__5049
2f2d8     00 B6 06 F6 | 	mov	local09, #0
2f2dc     FF FF 07 FF 
2f2e0     F6 AD 16 F2 | 	cmp	local04, ##268435446 wc
2f2e4     03 B6 06 C6 |  if_b	mov	local09, #3
2f2e8     7F 00 00 FF 
2f2ec     F6 AD 16 F2 | 	cmp	local04, ##65526 wc
2f2f0     02 B6 06 C6 |  if_b	mov	local09, #2
2f2f4     07 00 00 FF 
2f2f8     F6 AD 16 F2 | 	cmp	local04, ##4086 wc
2f2fc     01 B6 06 C6 |  if_b	mov	local09, #1
2f300     00 B6 0E F2 | 	cmp	local09, #0 wz
2f304     0D 7A 06 A6 |  if_e	mov	result1, #13
2f308     3C 02 90 AD |  if_e	jmp	#LR__5049
2f30c     02 AC 06 F1 | 	add	local04, #2
2f310     18 AA 06 F1 | 	add	local03, #24
2f314     55 AD 62 FC | 	wrlong	local04, local03
2f318     08 AA 06 F1 | 	add	local03, #8
2f31c     55 AF 62 FC | 	wrlong	local05, local03
2f320     57 AD 02 F6 | 	mov	local04, local05
2f324     49 93 32 F9 | 	getword	arg01, arg01, #0
2f328     49 AD 02 F1 | 	add	local04, arg01
2f32c     04 AA 06 F1 | 	add	local03, #4
2f330     55 AD 62 FC | 	wrlong	local04, local03
2f334     57 AD 02 F6 | 	mov	local04, local05
2f338     5A AD 02 F1 | 	add	local04, local08
2f33c     08 AA 06 F1 | 	add	local03, #8
2f340     55 AD 62 FC | 	wrlong	local04, local03
2f344     2C AA 86 F1 | 	sub	local03, #44
2f348     03 B6 0E F2 | 	cmp	local09, #3 wz
2f34c     54 00 90 5D |  if_ne	jmp	#LR__5044
2f350     55 93 02 F6 | 	mov	arg01, local03
2f354     5E 92 06 F1 | 	add	arg01, #94
2f358                 | ' {
2f358                 | ' 
2f358                 | ' 	return *((WORD*)ptr);
2f358     49 7B EA FA | 	rdword	result1, arg01 wz
2f35c     0D 7A 06 56 |  if_ne	mov	result1, #13
2f360     E4 01 90 5D |  if_ne	jmp	#LR__5049
2f364     08 AA 06 F1 | 	add	local03, #8
2f368     55 AD EA FA | 	rdword	local04, local03 wz
2f36c     08 AA 86 F1 | 	sub	local03, #8
2f370     0D 7A 06 56 |  if_ne	mov	result1, #13
2f374     D0 01 90 5D |  if_ne	jmp	#LR__5049
2f378     34 AA 06 F1 | 	add	local03, #52
2f37c     55 93 02 F6 | 	mov	arg01, local03
2f380     2C 92 06 F1 | 	add	arg01, #44
2f384                 | ' {
2f384                 | ' 
2f384                 | ' 	return *((DWORD*)ptr);
2f384     49 7B 02 FB | 	rdlong	result1, arg01
2f388     0C AA 86 F1 | 	sub	local03, #12
2f38c     55 7B 62 FC | 	wrlong	result1, local03
2f390     10 AA 86 F1 | 	sub	local03, #16
2f394     55 B9 02 FB | 	rdlong	local10, local03
2f398     18 AA 86 F1 | 	sub	local03, #24
2f39c     02 B8 66 F0 | 	shl	local10, #2
2f3a0     6C 00 90 FD | 	jmp	#LR__5046
2f3a4                 | LR__5044
2f3a4     08 AA 06 F1 | 	add	local03, #8
2f3a8     55 AD EA FA | 	rdword	local04, local03 wz
2f3ac     08 AA 86 F1 | 	sub	local03, #8
2f3b0     0D 7A 06 A6 |  if_e	mov	result1, #13
2f3b4     90 01 90 AD |  if_e	jmp	#LR__5049
2f3b8     24 AA 06 F1 | 	add	local03, #36
2f3bc     55 AD 02 FB | 	rdlong	local04, local03
2f3c0     58 AD 02 F1 | 	add	local04, local06
2f3c4     04 AA 06 F1 | 	add	local03, #4
2f3c8     55 AD 62 FC | 	wrlong	local04, local03
2f3cc     28 AA 86 F1 | 	sub	local03, #40
2f3d0     02 B6 0E F2 | 	cmp	local09, #2 wz
2f3d4     18 AA 06 A1 |  if_e	add	local03, #24
2f3d8     55 AD 02 AB |  if_e	rdlong	local04, local03
2f3dc     18 AA 86 A1 |  if_e	sub	local03, #24
2f3e0     01 AC 66 A0 |  if_e	shl	local04, #1
2f3e4     24 00 90 AD |  if_e	jmp	#LR__5045
2f3e8     18 AA 06 F1 | 	add	local03, #24
2f3ec     55 B9 02 FB | 	rdlong	local10, local03
2f3f0     5C AD 02 F6 | 	mov	local04, local10
2f3f4     01 AC 66 F0 | 	shl	local04, #1
2f3f8     5C AD 02 F1 | 	add	local04, local10
2f3fc     01 AC 46 F0 | 	shr	local04, #1
2f400     18 AA 86 F1 | 	sub	local03, #24
2f404     01 B8 06 F5 | 	and	local10, #1
2f408     5C AD 02 F1 | 	add	local04, local10
2f40c                 | LR__5045
2f40c     56 B9 02 F6 | 	mov	local10, local04
2f410                 | LR__5046
2f410     FF B9 06 F1 | 	add	local10, #511
2f414     09 B8 46 F0 | 	shr	local10, #9
2f418     1C AA 06 F1 | 	add	local03, #28
2f41c     55 97 02 FB | 	rdlong	arg03, local03
2f420     1C AA 86 F1 | 	sub	local03, #28
2f424     5C 97 12 F2 | 	cmp	arg03, local10 wc
2f428     0D 7A 06 C6 |  if_b	mov	result1, #13
2f42c     18 01 90 CD |  if_b	jmp	#LR__5049
2f430     14 AA 06 F1 | 	add	local03, #20
2f434     FF FF FF FF 
2f438     55 FF 6B FC | 	wrlong	##-1, local03
2f43c     04 AA 86 F1 | 	sub	local03, #4
2f440     FF FF FF FF 
2f444     55 FF 6B FC | 	wrlong	##-1, local03
2f448     0C AA 86 F1 | 	sub	local03, #12
2f44c     55 01 49 FC | 	wrbyte	#128, local03
2f450     04 AA 86 F1 | 	sub	local03, #4
2f454     03 B6 0E F2 | 	cmp	local09, #3 wz
2f458     55 93 02 A6 |  if_e	mov	arg01, local03
2f45c     64 92 06 A1 |  if_e	add	arg01, #100
2f460                 | ' {
2f460                 | ' 
2f460                 | ' 	return *((WORD*)ptr);
2f460     49 7B E2 AA |  if_e	rdword	result1, arg01
2f464     3D AD 32 A9 |  if_e	getword	local04, result1, #0
2f468     01 AC 0E A2 |  if_e	cmp	local04, #1 wz
2f46c     A4 00 90 5D |  if_ne	jmp	#LR__5048
2f470     01 AE 06 F1 | 	add	local05, #1
2f474     55 93 02 F6 | 	mov	arg01, local03
2f478     57 95 02 F6 | 	mov	arg02, local05
2f47c     E8 D4 BF FD | 	call	#_fatfs_cc_move_window
2f480     00 7A 0E F2 | 	cmp	result1, #0 wz
2f484     8C 00 90 5D |  if_ne	jmp	#LR__5048
2f488     04 AA 06 F1 | 	add	local03, #4
2f48c     55 01 48 FC | 	wrbyte	#0, local03
2f490     30 AA 06 F1 | 	add	local03, #48
2f494     55 93 02 F6 | 	mov	arg01, local03
2f498     34 AA 86 F1 | 	sub	local03, #52
2f49c     FE 93 06 F1 | 	add	arg01, #510
2f4a0                 | ' {
2f4a0                 | ' 
2f4a0                 | ' 	return *((WORD*)ptr);
2f4a0     49 7B E2 FA | 	rdword	result1, arg01
2f4a4     3D AD 32 F9 | 	getword	local04, result1, #0
2f4a8     55 00 00 FF 
2f4ac     55 AC 0E F2 | 	cmp	local04, ##43605 wz
2f4b0     55 93 02 A6 |  if_e	mov	arg01, local03
2f4b4     34 92 06 A1 |  if_e	add	arg01, #52
2f4b8                 | ' {
2f4b8                 | ' 
2f4b8                 | ' 	return *((DWORD*)ptr);
2f4b8     49 7B 02 AB |  if_e	rdlong	result1, arg01
2f4bc     A9 B0 20 AF 
2f4c0     52 7A 0E A2 |  if_e	cmp	result1, ##1096897106 wz
2f4c4     55 93 02 A6 |  if_e	mov	arg01, local03
2f4c8     01 00 00 AF 
2f4cc     18 92 06 A1 |  if_e	add	arg01, ##536
2f4d0                 | ' {
2f4d0                 | ' 
2f4d0                 | ' 	return *((DWORD*)ptr);
2f4d0     49 7B 02 AB |  if_e	rdlong	result1, arg01
2f4d4     B9 A0 30 AF 
2f4d8     72 7A 0E A2 |  if_e	cmp	result1, ##1631679090 wz
2f4dc     34 00 90 5D |  if_ne	jmp	#LR__5047
2f4e0     34 AA 06 F1 | 	add	local03, #52
2f4e4     55 93 02 F6 | 	mov	arg01, local03
2f4e8     E8 93 06 F1 | 	add	arg01, #488
2f4ec                 | ' {
2f4ec                 | ' 
2f4ec                 | ' 	return *((DWORD*)ptr);
2f4ec     49 7B 02 FB | 	rdlong	result1, arg01
2f4f0     20 AA 86 F1 | 	sub	local03, #32
2f4f4     55 7B 62 FC | 	wrlong	result1, local03
2f4f8     20 AA 06 F1 | 	add	local03, #32
2f4fc     55 93 02 F6 | 	mov	arg01, local03
2f500     EC 93 06 F1 | 	add	arg01, #492
2f504                 | ' {
2f504                 | ' 
2f504                 | ' 	return *((DWORD*)ptr);
2f504     49 7B 02 FB | 	rdlong	result1, arg01
2f508     24 AA 86 F1 | 	sub	local03, #36
2f50c     55 7B 62 FC | 	wrlong	result1, local03
2f510     10 AA 86 F1 | 	sub	local03, #16
2f514                 | LR__5047
2f514                 | LR__5048
2f514     55 B7 42 FC | 	wrbyte	local09, local03
2f518     04 64 06 F1 | 	add	objptr, #4
2f51c     32 AD E2 FA | 	rdword	local04, objptr
2f520     01 AC 06 F1 | 	add	local04, #1
2f524     32 AD 52 FC | 	wrword	local04, objptr
2f528     56 B9 32 F9 | 	getword	local10, local04, #0
2f52c     06 AA 06 F1 | 	add	local03, #6
2f530     55 B9 52 FC | 	wrword	local10, local03
2f534     04 64 06 F1 | 	add	objptr, #4
2f538     06 AA 06 F1 | 	add	local03, #6
2f53c     55 65 62 FC | 	wrlong	objptr, local03
2f540                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2f540                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2f540                 | ' 			{
2f540                 | ' 
2f540                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2f540                 | ' 
2f540                 | ' 
2f540                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2f540                 | ' 
2f540                 | ' 			}
2f540                 | ' 		}
2f540                 | ' 
2f540                 | ' 
2f540                 | ' 	}
2f540                 | ' 
2f540                 | ' 	fs->fs_type = (BYTE)fmt;
2f540                 | ' 	fs->id = ++Fsid;
2f540                 | ' 
2f540                 | ' 	fs->lfnbuf = LfnBuf;
2f540                 | ' #line 3567 "ff.c"
2f540                 | ' 	return FR_OK;
2f540     00 7A 06 F6 | 	mov	result1, #0
2f544     08 64 86 F1 | 	sub	objptr, #8
2f548                 | LR__5049
2f548     E7 F0 03 F6 | 	mov	ptra, fp
2f54c     F2 00 A0 FD | 	call	#popregs_
2f550                 | _fatfs_cc_mount_volume_ret
2f550     2D 00 64 FD | 	ret
2f554                 | 
2f554                 | _fatfs_cc_validate
2f554     49 81 0A F6 | 	mov	_var01, arg01 wz
2f558     09 82 06 F6 | 	mov	_var02, #9
2f55c     40 85 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2f560     42 87 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2f564     48 00 90 AD |  if_e	jmp	#LR__5050
2f568     04 80 06 F1 | 	add	_var01, #4
2f56c     40 87 E2 FA | 	rdword	_var04, _var01
2f570     04 80 86 F1 | 	sub	_var01, #4
2f574     40 93 02 FB | 	rdlong	arg01, _var01
2f578     06 92 06 F1 | 	add	arg01, #6
2f57c     49 7B E2 FA | 	rdword	result1, arg01
2f580     3D 87 0A F2 | 	cmp	_var04, result1 wz
2f584     28 00 90 5D |  if_ne	jmp	#LR__5050
2f588     01 00 00 FF 
2f58c     10 64 06 F1 | 	add	objptr, ##528
2f590     32 87 0A FB | 	rdlong	_var04, objptr wz
2f594     01 00 00 FF 
2f598     10 64 86 F1 | 	sub	objptr, ##528
2f59c                 | '         return RES_NOTRDY;
2f59c     03 7A 06 A6 |  if_e	mov	result1, #3
2f5a0                 | '     }
2f5a0                 | '     return RES_OK;
2f5a0     00 7A 06 56 |  if_ne	mov	result1, #0
2f5a4     3D 85 E2 F8 | 	getbyte	_var03, result1, #0
2f5a8     01 84 CE F7 | 	test	_var03, #1 wz
2f5ac     00 82 06 A6 |  if_e	mov	_var02, #0
2f5b0                 | LR__5050
2f5b0     00 82 0E F2 | 	cmp	_var02, #0 wz
2f5b4     40 85 02 AB |  if_e	rdlong	_var03, _var01
2f5b8     00 84 06 56 |  if_ne	mov	_var03, #0
2f5bc     4A 85 62 FC | 	wrlong	_var03, arg02
2f5c0                 | ' 			res = FR_OK;
2f5c0                 | ' 		}
2f5c0                 | ' 
2f5c0                 | ' 	}
2f5c0                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2f5c0                 | ' 	return res;
2f5c0     41 7B 02 F6 | 	mov	result1, _var02
2f5c4                 | _fatfs_cc_validate_ret
2f5c4     2D 00 64 FD | 	ret
2f5c8                 | 
2f5c8                 | _fatfs_cc_f_mount
2f5c8     04 CA 05 F6 | 	mov	COUNT_, #4
2f5cc     E8 00 A0 FD | 	call	#pushregs_
2f5d0     20 F0 07 F1 | 	add	ptra, #32
2f5d4     04 CE 05 F1 | 	add	fp, #4
2f5d8     E7 92 62 FC | 	wrlong	arg01, fp
2f5dc     04 CE 05 F1 | 	add	fp, #4
2f5e0     E7 94 62 FC | 	wrlong	arg02, fp
2f5e4     4B A7 02 F6 | 	mov	local01, arg03
2f5e8     14 CE 05 F1 | 	add	fp, #20
2f5ec     E7 94 62 FC | 	wrlong	arg02, fp
2f5f0     E7 92 02 F6 | 	mov	arg01, fp
2f5f4     1C CE 85 F1 | 	sub	fp, #28
2f5f8     EC F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2f5fc     3D A9 02 F6 | 	mov	local02, result1
2f600     00 A8 56 F2 | 	cmps	local02, #0 wc
2f604     0B 7A 06 C6 |  if_b	mov	result1, #11
2f608     84 00 90 CD |  if_b	jmp	#LR__5061
2f60c     54 97 02 F6 | 	mov	arg03, local02
2f610     02 96 66 F0 | 	shl	arg03, #2
2f614     32 97 02 F1 | 	add	arg03, objptr
2f618     4B AB 0A FB | 	rdlong	local03, arg03 wz
2f61c     14 00 90 AD |  if_e	jmp	#LR__5060
2f620     01 AA 06 F1 | 	add	local03, #1
2f624     55 93 C2 FA | 	rdbyte	arg01, local03
2f628     01 AA 86 F1 | 	sub	local03, #1
2f62c     F8 2B B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2f630     55 01 48 FC | 	wrbyte	#0, local03
2f634                 | LR__5060
2f634     04 CE 05 F1 | 	add	fp, #4
2f638     E7 AC 0A FB | 	rdlong	local04, fp wz
2f63c     04 CE 85 F1 | 	sub	fp, #4
2f640     04 CE 05 51 |  if_ne	add	fp, #4
2f644     E7 AC 02 5B |  if_ne	rdlong	local04, fp
2f648     04 CE 85 51 |  if_ne	sub	fp, #4
2f64c     56 01 48 5C |  if_ne	wrbyte	#0, local04
2f650     02 A8 66 F0 | 	shl	local02, #2
2f654     32 A9 02 F1 | 	add	local02, objptr
2f658     04 CE 05 F1 | 	add	fp, #4
2f65c     E7 AC 02 FB | 	rdlong	local04, fp
2f660     04 CE 85 F1 | 	sub	fp, #4
2f664     54 AD 62 FC | 	wrlong	local04, local02
2f668     07 A6 4E F7 | 	zerox	local01, #7 wz
2f66c     00 7A 06 A6 |  if_e	mov	result1, #0
2f670     1C 00 90 AD |  if_e	jmp	#LR__5061
2f674     08 CE 05 F1 | 	add	fp, #8
2f678     E7 92 02 F6 | 	mov	arg01, fp
2f67c     04 CE 85 F1 | 	sub	fp, #4
2f680     E7 94 02 F6 | 	mov	arg02, fp
2f684     04 CE 85 F1 | 	sub	fp, #4
2f688     00 96 06 F6 | 	mov	arg03, #0
2f68c     94 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2f690                 | ' 
2f690                 | ' 	res = mount_volume(&path, &fs, 0);
2f690                 | ' 	return res ;
2f690                 | LR__5061
2f690     E7 F0 03 F6 | 	mov	ptra, fp
2f694     F2 00 A0 FD | 	call	#popregs_
2f698                 | _fatfs_cc_f_mount_ret
2f698     2D 00 64 FD | 	ret
2f69c                 | 
2f69c                 | _fatfs_cc_f_open
2f69c     08 CA 05 F6 | 	mov	COUNT_, #8
2f6a0     E8 00 A0 FD | 	call	#pushregs_
2f6a4     60 F0 07 F1 | 	add	ptra, #96
2f6a8     49 A7 0A F6 | 	mov	local01, arg01 wz
2f6ac     08 CE 05 F1 | 	add	fp, #8
2f6b0     E7 94 62 FC | 	wrlong	arg02, fp
2f6b4     08 CE 85 F1 | 	sub	fp, #8
2f6b8     4B A9 02 F6 | 	mov	local02, arg03
2f6bc     09 7A 06 A6 |  if_e	mov	result1, #9
2f6c0     24 04 90 AD |  if_e	jmp	#LR__5087
2f6c4     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2f6c8     3F A8 06 F5 | 	and	local02, #63
2f6cc     08 CE 05 F1 | 	add	fp, #8
2f6d0     E7 92 02 F6 | 	mov	arg01, fp
2f6d4     3C CE 05 F1 | 	add	fp, #60
2f6d8     E7 94 02 F6 | 	mov	arg02, fp
2f6dc     44 CE 85 F1 | 	sub	fp, #68
2f6e0     54 97 02 F6 | 	mov	arg03, local02
2f6e4     3C F9 BF FD | 	call	#_fatfs_cc_mount_volume
2f6e8     3D AB 0A F6 | 	mov	local03, result1 wz
2f6ec     EC 03 90 5D |  if_ne	jmp	#LR__5086
2f6f0     44 CE 05 F1 | 	add	fp, #68
2f6f4     E7 AA 02 FB | 	rdlong	local03, fp
2f6f8     30 CE 85 F1 | 	sub	fp, #48
2f6fc     E7 AA 62 FC | 	wrlong	local03, fp
2f700     E7 92 02 F6 | 	mov	arg01, fp
2f704     0C CE 85 F1 | 	sub	fp, #12
2f708     E7 AC 02 FB | 	rdlong	local04, fp
2f70c     08 CE 85 F1 | 	sub	fp, #8
2f710     56 95 02 F6 | 	mov	arg02, local04
2f714     70 F4 BF FD | 	call	#_fatfs_cc_follow_path
2f718     3D AB 0A F6 | 	mov	local03, result1 wz
2f71c     18 00 90 5D |  if_ne	jmp	#LR__5070
2f720     3F CE 05 F1 | 	add	fp, #63
2f724     E7 AC C2 FA | 	rdbyte	local04, fp
2f728     3F CE 85 F1 | 	sub	fp, #63
2f72c     56 99 E2 F8 | 	getbyte	arg04, local04, #0
2f730     80 98 CE F7 | 	test	arg04, #128 wz
2f734     06 AA 06 56 |  if_ne	mov	local03, #6
2f738                 | LR__5070
2f738     54 99 E2 F8 | 	getbyte	arg04, local02, #0
2f73c     1C 98 CE F7 | 	test	arg04, #28 wz
2f740     5C 01 90 AD |  if_e	jmp	#LR__5075
2f744     00 AA 0E F2 | 	cmp	local03, #0 wz
2f748     24 00 90 AD |  if_e	jmp	#LR__5072
2f74c     04 AA 0E F2 | 	cmp	local03, #4 wz
2f750     10 00 90 5D |  if_ne	jmp	#LR__5071
2f754     E7 92 02 F6 | 	mov	arg01, fp
2f758     14 92 06 F1 | 	add	arg01, #20
2f75c     4C E8 BF FD | 	call	#_fatfs_cc_dir_register
2f760     3D AB 02 F6 | 	mov	local03, result1
2f764                 | LR__5071
2f764     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2f768     08 A8 46 F5 | 	or	local02, #8
2f76c     24 00 90 FD | 	jmp	#LR__5074
2f770                 | LR__5072
2f770     1A CE 05 F1 | 	add	fp, #26
2f774     E7 AC C2 FA | 	rdbyte	local04, fp
2f778     1A CE 85 F1 | 	sub	fp, #26
2f77c     11 AC CE F7 | 	test	local04, #17 wz
2f780     07 AA 06 56 |  if_ne	mov	local03, #7
2f784     0C 00 90 5D |  if_ne	jmp	#LR__5073
2f788     54 AD E2 F8 | 	getbyte	local04, local02, #0
2f78c     04 AC CE F7 | 	test	local04, #4 wz
2f790     08 AA 06 56 |  if_ne	mov	local03, #8
2f794                 | LR__5073
2f794                 | LR__5074
2f794     00 AA 0E F2 | 	cmp	local03, #0 wz
2f798     40 01 90 5D |  if_ne	jmp	#LR__5078
2f79c     54 AD E2 F8 | 	getbyte	local04, local02, #0
2f7a0     08 AC CE F7 | 	test	local04, #8 wz
2f7a4     34 01 90 AD |  if_e	jmp	#LR__5078
2f7a8     C0 1B B0 FD | 	call	#_fatfs_cc__get_fattime
2f7ac     30 CE 05 F1 | 	add	fp, #48
2f7b0     E7 92 02 FB | 	rdlong	arg01, fp
2f7b4     0E 92 06 F1 | 	add	arg01, #14
2f7b8     49 7B 62 FC | 	wrlong	result1, arg01
2f7bc     E7 92 02 FB | 	rdlong	arg01, fp
2f7c0     16 92 06 F1 | 	add	arg01, #22
2f7c4     49 7B 62 FC | 	wrlong	result1, arg01
2f7c8     14 CE 05 F1 | 	add	fp, #20
2f7cc     E7 92 02 FB | 	rdlong	arg01, fp
2f7d0     14 CE 85 F1 | 	sub	fp, #20
2f7d4     E7 94 02 FB | 	rdlong	arg02, fp
2f7d8     30 CE 85 F1 | 	sub	fp, #48
2f7dc     C0 DE BF FD | 	call	#_fatfs_cc_ld_clust
2f7e0     3D AD 02 F6 | 	mov	local04, result1
2f7e4     30 CE 05 F1 | 	add	fp, #48
2f7e8     E7 98 02 FB | 	rdlong	arg04, fp
2f7ec     0B 98 06 F1 | 	add	arg04, #11
2f7f0     4C 41 48 FC | 	wrbyte	#32, arg04
2f7f4     14 CE 05 F1 | 	add	fp, #20
2f7f8     E7 92 02 FB | 	rdlong	arg01, fp
2f7fc     14 CE 85 F1 | 	sub	fp, #20
2f800     E7 94 02 FB | 	rdlong	arg02, fp
2f804     30 CE 85 F1 | 	sub	fp, #48
2f808     00 96 06 F6 | 	mov	arg03, #0
2f80c     C4 DE BF FD | 	call	#_fatfs_cc_st_clust
2f810     30 CE 05 F1 | 	add	fp, #48
2f814     E7 92 02 FB | 	rdlong	arg01, fp
2f818     1C 92 06 F1 | 	add	arg01, #28
2f81c     49 01 68 FC | 	wrlong	#0, arg01
2f820     14 CE 05 F1 | 	add	fp, #20
2f824     E7 98 02 FB | 	rdlong	arg04, fp
2f828     44 CE 85 F1 | 	sub	fp, #68
2f82c     03 98 06 F1 | 	add	arg04, #3
2f830     4C 03 48 FC | 	wrbyte	#1, arg04
2f834     00 AC 0E F2 | 	cmp	local04, #0 wz
2f838     A0 00 90 AD |  if_e	jmp	#LR__5078
2f83c     44 CE 05 F1 | 	add	fp, #68
2f840     E7 AA 02 FB | 	rdlong	local03, fp
2f844     30 AA 06 F1 | 	add	local03, #48
2f848     55 AF 02 FB | 	rdlong	local05, local03
2f84c     30 CE 85 F1 | 	sub	fp, #48
2f850     E7 92 02 F6 | 	mov	arg01, fp
2f854     14 CE 85 F1 | 	sub	fp, #20
2f858     56 95 02 F6 | 	mov	arg02, local04
2f85c     00 96 06 F6 | 	mov	arg03, #0
2f860     70 D6 BF FD | 	call	#_fatfs_cc_remove_chain
2f864     3D AB 0A F6 | 	mov	local03, result1 wz
2f868     70 00 90 5D |  if_ne	jmp	#LR__5078
2f86c     44 CE 05 F1 | 	add	fp, #68
2f870     E7 92 02 FB | 	rdlong	arg01, fp
2f874     44 CE 85 F1 | 	sub	fp, #68
2f878     57 95 02 F6 | 	mov	arg02, local05
2f87c     E8 D0 BF FD | 	call	#_fatfs_cc_move_window
2f880     3D AB 02 F6 | 	mov	local03, result1
2f884     44 CE 05 F1 | 	add	fp, #68
2f888     E7 AE 02 FB | 	rdlong	local05, fp
2f88c     44 CE 85 F1 | 	sub	fp, #68
2f890     01 AC 86 F1 | 	sub	local04, #1
2f894     10 AE 06 F1 | 	add	local05, #16
2f898     57 AD 62 FC | 	wrlong	local04, local05
2f89c     3C 00 90 FD | 	jmp	#LR__5078
2f8a0                 | LR__5075
2f8a0     00 AA 0E F2 | 	cmp	local03, #0 wz
2f8a4     34 00 90 5D |  if_ne	jmp	#LR__5077
2f8a8     1A CE 05 F1 | 	add	fp, #26
2f8ac     E7 AE C2 FA | 	rdbyte	local05, fp
2f8b0     1A CE 85 F1 | 	sub	fp, #26
2f8b4     10 AE CE F7 | 	test	local05, #16 wz
2f8b8     04 AA 06 56 |  if_ne	mov	local03, #4
2f8bc     1C 00 90 5D |  if_ne	jmp	#LR__5076
2f8c0     54 AF E2 F8 | 	getbyte	local05, local02, #0
2f8c4     02 AE CE F7 | 	test	local05, #2 wz
2f8c8     1A CE 05 51 |  if_ne	add	fp, #26
2f8cc     E7 AC C2 5A |  if_ne	rdbyte	local04, fp
2f8d0     1A CE 85 51 |  if_ne	sub	fp, #26
2f8d4     01 AC CE 57 |  if_ne	test	local04, #1 wz
2f8d8     07 AA 06 56 |  if_ne	mov	local03, #7
2f8dc                 | LR__5076
2f8dc                 | LR__5077
2f8dc                 | LR__5078
2f8dc     00 AA 0E F2 | 	cmp	local03, #0 wz
2f8e0     40 00 90 5D |  if_ne	jmp	#LR__5079
2f8e4     54 AF E2 F8 | 	getbyte	local05, local02, #0
2f8e8     08 AE CE F7 | 	test	local05, #8 wz
2f8ec     54 A9 E2 58 |  if_ne	getbyte	local02, local02, #0
2f8f0     40 A8 46 55 |  if_ne	or	local02, #64
2f8f4     44 CE 05 F1 | 	add	fp, #68
2f8f8     E7 AE 02 FB | 	rdlong	local05, fp
2f8fc     30 AE 06 F1 | 	add	local05, #48
2f900     57 AF 02 FB | 	rdlong	local05, local05
2f904     20 A6 06 F1 | 	add	local01, #32
2f908     53 AF 62 FC | 	wrlong	local05, local01
2f90c     14 CE 85 F1 | 	sub	fp, #20
2f910     E7 AE 02 FB | 	rdlong	local05, fp
2f914     30 CE 85 F1 | 	sub	fp, #48
2f918     04 A6 06 F1 | 	add	local01, #4
2f91c     53 AF 62 FC | 	wrlong	local05, local01
2f920     24 A6 86 F1 | 	sub	local01, #36
2f924                 | LR__5079
2f924     00 AA 0E F2 | 	cmp	local03, #0 wz
2f928     B0 01 90 5D |  if_ne	jmp	#LR__5085
2f92c     44 CE 05 F1 | 	add	fp, #68
2f930     E7 92 02 FB | 	rdlong	arg01, fp
2f934     14 CE 85 F1 | 	sub	fp, #20
2f938     E7 94 02 FB | 	rdlong	arg02, fp
2f93c     30 CE 85 F1 | 	sub	fp, #48
2f940     5C DD BF FD | 	call	#_fatfs_cc_ld_clust
2f944     08 A6 06 F1 | 	add	local01, #8
2f948     53 7B 62 FC | 	wrlong	result1, local01
2f94c     30 CE 05 F1 | 	add	fp, #48
2f950     E7 92 02 FB | 	rdlong	arg01, fp
2f954     1C 92 06 F1 | 	add	arg01, #28
2f958                 | ' {
2f958                 | ' 
2f958                 | ' 	return *((DWORD*)ptr);
2f958     49 7B 02 FB | 	rdlong	result1, arg01
2f95c     04 A6 06 F1 | 	add	local01, #4
2f960     53 7B 62 FC | 	wrlong	result1, local01
2f964     0C A6 86 F1 | 	sub	local01, #12
2f968     14 CE 05 F1 | 	add	fp, #20
2f96c     E7 AE 02 FB | 	rdlong	local05, fp
2f970     53 AF 62 FC | 	wrlong	local05, local01
2f974     E7 AE 02 FB | 	rdlong	local05, fp
2f978     44 CE 85 F1 | 	sub	fp, #68
2f97c     06 AE 06 F1 | 	add	local05, #6
2f980     57 AD E2 FA | 	rdword	local04, local05
2f984     04 A6 06 F1 | 	add	local01, #4
2f988     53 AD 52 FC | 	wrword	local04, local01
2f98c     0C A6 06 F1 | 	add	local01, #12
2f990     53 A9 42 FC | 	wrbyte	local02, local01
2f994     01 A6 06 F1 | 	add	local01, #1
2f998     53 01 48 FC | 	wrbyte	#0, local01
2f99c     0B A6 06 F1 | 	add	local01, #11
2f9a0     53 01 68 FC | 	wrlong	#0, local01
2f9a4     08 A6 86 F1 | 	sub	local01, #8
2f9a8     53 01 68 FC | 	wrlong	#0, local01
2f9ac     14 A6 06 F1 | 	add	local01, #20
2f9b0     53 93 02 F6 | 	mov	arg01, local01
2f9b4     28 A6 86 F1 | 	sub	local01, #40
2f9b8     00 94 06 F6 | 	mov	arg02, #0
2f9bc     09 96 C6 F9 | 	decod	arg03, #9
2f9c0     D8 00 A0 FD | 	call	#\builtin_bytefill_
2f9c4     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2f9c8     20 A8 CE F7 | 	test	local02, #32 wz
2f9cc     0C 01 90 AD |  if_e	jmp	#LR__5084
2f9d0     0C A6 06 F1 | 	add	local01, #12
2f9d4     53 AD 02 FB | 	rdlong	local04, local01
2f9d8     0C A6 86 F1 | 	sub	local01, #12
2f9dc     01 AC 16 F2 | 	cmp	local04, #1 wc
2f9e0     F8 00 90 CD |  if_b	jmp	#LR__5084
2f9e4     0C A6 06 F1 | 	add	local01, #12
2f9e8     53 AD 02 FB | 	rdlong	local04, local01
2f9ec     08 A6 06 F1 | 	add	local01, #8
2f9f0     53 AD 62 FC | 	wrlong	local04, local01
2f9f4     44 CE 05 F1 | 	add	fp, #68
2f9f8     E7 AC 02 FB | 	rdlong	local04, fp
2f9fc     44 CE 85 F1 | 	sub	fp, #68
2fa00     0A AC 06 F1 | 	add	local04, #10
2fa04     56 B1 E2 FA | 	rdword	local06, local04
2fa08     09 B0 66 F0 | 	shl	local06, #9
2fa0c     0C A6 86 F1 | 	sub	local01, #12
2fa10     53 B3 02 FB | 	rdlong	local07, local01
2fa14                 | ' 				fp->fptr = fp->obj.objsize;
2fa14                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2fa14                 | ' 				clst = fp->obj.sclust;
2fa14                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2fa14     04 A6 06 F1 | 	add	local01, #4
2fa18     53 B5 02 FB | 	rdlong	local08, local01
2fa1c     0C A6 86 F1 | 	sub	local01, #12
2fa20                 | LR__5080
2fa20     00 AA 0E F2 | 	cmp	local03, #0 wz
2fa24     34 00 90 5D |  if_ne	jmp	#LR__5081
2fa28     58 B5 1A F2 | 	cmp	local08, local06 wcz
2fa2c     2C 00 90 ED |  if_be	jmp	#LR__5081
2fa30     53 93 02 F6 | 	mov	arg01, local01
2fa34     59 95 02 F6 | 	mov	arg02, local07
2fa38     E4 D0 BF FD | 	call	#_fatfs_cc_get_fat
2fa3c     3D B3 02 F6 | 	mov	local07, result1
2fa40     02 B2 16 F2 | 	cmp	local07, #2 wc
2fa44     02 AA 06 C6 |  if_b	mov	local03, #2
2fa48     FF FF 7F FF 
2fa4c     FF B3 0E F2 | 	cmp	local07, ##-1 wz
2fa50     01 AA 06 A6 |  if_e	mov	local03, #1
2fa54     58 B5 82 F1 | 	sub	local08, local06
2fa58     C4 FF 9F FD | 	jmp	#LR__5080
2fa5c                 | LR__5081
2fa5c     18 A6 06 F1 | 	add	local01, #24
2fa60     53 B3 62 FC | 	wrlong	local07, local01
2fa64     18 A6 86 F1 | 	sub	local01, #24
2fa68     00 AA 0E F2 | 	cmp	local03, #0 wz
2fa6c     6C 00 90 5D |  if_ne	jmp	#LR__5083
2fa70     FF B5 CE F7 | 	test	local08, #511 wz
2fa74     64 00 90 AD |  if_e	jmp	#LR__5083
2fa78     44 CE 05 F1 | 	add	fp, #68
2fa7c     E7 92 02 FB | 	rdlong	arg01, fp
2fa80     44 CE 85 F1 | 	sub	fp, #68
2fa84     59 95 02 F6 | 	mov	arg02, local07
2fa88     54 D0 BF FD | 	call	#_fatfs_cc_clst2sect
2fa8c     3D AF 0A F6 | 	mov	local05, result1 wz
2fa90     02 AA 06 A6 |  if_e	mov	local03, #2
2fa94     44 00 90 AD |  if_e	jmp	#LR__5082
2fa98     09 B4 46 F0 | 	shr	local08, #9
2fa9c     5A AF 02 F1 | 	add	local05, local08
2faa0     1C A6 06 F1 | 	add	local01, #28
2faa4     53 AF 62 FC | 	wrlong	local05, local01
2faa8     44 CE 05 F1 | 	add	fp, #68
2faac     E7 AC 02 FB | 	rdlong	local04, fp
2fab0     44 CE 85 F1 | 	sub	fp, #68
2fab4     01 AC 06 F1 | 	add	local04, #1
2fab8     56 93 C2 FA | 	rdbyte	arg01, local04
2fabc     53 95 02 F6 | 	mov	arg02, local01
2fac0     0C 94 06 F1 | 	add	arg02, #12
2fac4     57 97 02 F6 | 	mov	arg03, local05
2fac8     1C A6 86 F1 | 	sub	local01, #28
2facc     01 98 06 F6 | 	mov	arg04, #1
2fad0     0C C8 BF FD | 	call	#_fatfs_cc_disk_read
2fad4     00 7A 0E F2 | 	cmp	result1, #0 wz
2fad8     01 AA 06 56 |  if_ne	mov	local03, #1
2fadc                 | LR__5082
2fadc                 | LR__5083
2fadc                 | LR__5084
2fadc                 | LR__5085
2fadc                 | LR__5086
2fadc     00 AA 0E F2 | 	cmp	local03, #0 wz
2fae0     53 01 68 5C |  if_ne	wrlong	#0, local01
2fae4                 | ' 
2fae4                 | ' 	return res ;
2fae4     55 7B 02 F6 | 	mov	result1, local03
2fae8                 | LR__5087
2fae8     E7 F0 03 F6 | 	mov	ptra, fp
2faec     F2 00 A0 FD | 	call	#popregs_
2faf0                 | _fatfs_cc_f_open_ret
2faf0     2D 00 64 FD | 	ret
2faf4                 | 
2faf4                 | _fatfs_cc_f_read
2faf4     0E CA 05 F6 | 	mov	COUNT_, #14
2faf8     E8 00 A0 FD | 	call	#pushregs_
2fafc     38 F0 07 F1 | 	add	ptra, #56
2fb00     49 A7 02 F6 | 	mov	local01, arg01
2fb04     4A A9 02 F6 | 	mov	local02, arg02
2fb08     4B AB 02 F6 | 	mov	local03, arg03
2fb0c     4C AD 02 F6 | 	mov	local04, arg04
2fb10     54 AF 02 F6 | 	mov	local05, local02
2fb14     56 01 68 FC | 	wrlong	#0, local04
2fb18     E7 94 02 F6 | 	mov	arg02, fp
2fb1c     18 94 06 F1 | 	add	arg02, #24
2fb20     53 93 02 F6 | 	mov	arg01, local01
2fb24     2C FA BF FD | 	call	#_fatfs_cc_validate
2fb28     3D B1 0A F6 | 	mov	local06, result1 wz
2fb2c     11 A6 06 A1 |  if_e	add	local01, #17
2fb30     53 B1 C2 AA |  if_e	rdbyte	local06, local01
2fb34     11 A6 86 A1 |  if_e	sub	local01, #17
2fb38     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
2fb3c     58 7B 02 56 |  if_ne	mov	result1, local06
2fb40     3C 03 90 5D |  if_ne	jmp	#LR__5101
2fb44     10 A6 06 F1 | 	add	local01, #16
2fb48     53 B3 C2 FA | 	rdbyte	local07, local01
2fb4c     10 A6 86 F1 | 	sub	local01, #16
2fb50     01 B2 CE F7 | 	test	local07, #1 wz
2fb54     07 7A 06 A6 |  if_e	mov	result1, #7
2fb58     24 03 90 AD |  if_e	jmp	#LR__5101
2fb5c     0C A6 06 F1 | 	add	local01, #12
2fb60     53 B5 02 FB | 	rdlong	local08, local01
2fb64     08 A6 06 F1 | 	add	local01, #8
2fb68     53 B7 02 FB | 	rdlong	local09, local01
2fb6c     14 A6 86 F1 | 	sub	local01, #20
2fb70     5B B5 82 F1 | 	sub	local08, local09
2fb74     5A AB 3A F3 | 	fle	local03, local08 wcz
2fb78                 | ' 
2fb78                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2fb78                 | LR__5090
2fb78     01 AA 16 F2 | 	cmp	local03, #1 wc
2fb7c     FC 02 90 CD |  if_b	jmp	#LR__5100
2fb80     14 A6 06 F1 | 	add	local01, #20
2fb84     53 B3 02 FB | 	rdlong	local07, local01
2fb88     14 A6 86 F1 | 	sub	local01, #20
2fb8c     FF B3 CE F7 | 	test	local07, #511 wz
2fb90     80 02 90 5D |  if_ne	jmp	#LR__5098
2fb94     14 A6 06 F1 | 	add	local01, #20
2fb98     53 B9 02 FB | 	rdlong	local10, local01
2fb9c     14 A6 86 F1 | 	sub	local01, #20
2fba0     09 B8 46 F0 | 	shr	local10, #9
2fba4     18 CE 05 F1 | 	add	fp, #24
2fba8     E7 B2 02 FB | 	rdlong	local07, fp
2fbac     18 CE 85 F1 | 	sub	fp, #24
2fbb0     0A B2 06 F1 | 	add	local07, #10
2fbb4     59 B3 E2 FA | 	rdword	local07, local07
2fbb8     01 B2 86 F1 | 	sub	local07, #1
2fbbc     59 B9 0A F5 | 	and	local10, local07 wz
2fbc0     6C 00 90 5D |  if_ne	jmp	#LR__5092
2fbc4     14 A6 06 F1 | 	add	local01, #20
2fbc8     53 B3 0A FB | 	rdlong	local07, local01 wz
2fbcc     14 A6 86 F1 | 	sub	local01, #20
2fbd0     08 A6 06 A1 |  if_e	add	local01, #8
2fbd4     53 BB 02 AB |  if_e	rdlong	local11, local01
2fbd8     08 A6 86 A1 |  if_e	sub	local01, #8
2fbdc     18 00 90 AD |  if_e	jmp	#LR__5091
2fbe0     53 93 02 F6 | 	mov	arg01, local01
2fbe4     18 A6 06 F1 | 	add	local01, #24
2fbe8     53 95 02 FB | 	rdlong	arg02, local01
2fbec     18 A6 86 F1 | 	sub	local01, #24
2fbf0     2C CF BF FD | 	call	#_fatfs_cc_get_fat
2fbf4     3D BB 02 F6 | 	mov	local11, result1
2fbf8                 | LR__5091
2fbf8     02 BA 16 F2 | 	cmp	local11, #2 wc
2fbfc     11 A6 06 C1 |  if_b	add	local01, #17
2fc00     53 05 48 CC |  if_b	wrbyte	#2, local01
2fc04     02 7A 06 C6 |  if_b	mov	result1, #2
2fc08     74 02 90 CD |  if_b	jmp	#LR__5101
2fc0c     FF FF 7F FF 
2fc10     FF BB 0E F2 | 	cmp	local11, ##-1 wz
2fc14     11 A6 06 A1 |  if_e	add	local01, #17
2fc18     53 03 48 AC |  if_e	wrbyte	#1, local01
2fc1c     01 7A 06 A6 |  if_e	mov	result1, #1
2fc20     5C 02 90 AD |  if_e	jmp	#LR__5101
2fc24     18 A6 06 F1 | 	add	local01, #24
2fc28     53 BB 62 FC | 	wrlong	local11, local01
2fc2c     18 A6 86 F1 | 	sub	local01, #24
2fc30                 | LR__5092
2fc30     18 CE 05 F1 | 	add	fp, #24
2fc34     E7 92 02 FB | 	rdlong	arg01, fp
2fc38     18 CE 85 F1 | 	sub	fp, #24
2fc3c     18 A6 06 F1 | 	add	local01, #24
2fc40     53 95 02 FB | 	rdlong	arg02, local01
2fc44     18 A6 86 F1 | 	sub	local01, #24
2fc48     94 CE BF FD | 	call	#_fatfs_cc_clst2sect
2fc4c     3D BD 0A F6 | 	mov	local12, result1 wz
2fc50     11 A6 06 A1 |  if_e	add	local01, #17
2fc54     53 05 48 AC |  if_e	wrbyte	#2, local01
2fc58     02 7A 06 A6 |  if_e	mov	result1, #2
2fc5c     20 02 90 AD |  if_e	jmp	#LR__5101
2fc60     5C BD 02 F1 | 	add	local12, local10
2fc64     55 BF 02 F6 | 	mov	local13, local03
2fc68     09 BE 46 F0 | 	shr	local13, #9
2fc6c     01 BE 16 F2 | 	cmp	local13, #1 wc
2fc70     D8 00 90 CD |  if_b	jmp	#LR__5095
2fc74     5C B3 02 F6 | 	mov	local07, local10
2fc78     5F B3 02 F1 | 	add	local07, local13
2fc7c     18 CE 05 F1 | 	add	fp, #24
2fc80     E7 B6 02 FB | 	rdlong	local09, fp
2fc84     18 CE 85 F1 | 	sub	fp, #24
2fc88     0A B6 06 F1 | 	add	local09, #10
2fc8c     5B 7B E2 FA | 	rdword	result1, local09
2fc90     3D B3 1A F2 | 	cmp	local07, result1 wcz
2fc94     18 00 90 ED |  if_be	jmp	#LR__5093
2fc98     18 CE 05 F1 | 	add	fp, #24
2fc9c     E7 BE 02 FB | 	rdlong	local13, fp
2fca0     18 CE 85 F1 | 	sub	fp, #24
2fca4     0A BE 06 F1 | 	add	local13, #10
2fca8     5F BF E2 FA | 	rdword	local13, local13
2fcac     5C BF 82 F1 | 	sub	local13, local10
2fcb0                 | LR__5093
2fcb0     18 CE 05 F1 | 	add	fp, #24
2fcb4     E7 B2 02 FB | 	rdlong	local07, fp
2fcb8     18 CE 85 F1 | 	sub	fp, #24
2fcbc     01 B2 06 F1 | 	add	local07, #1
2fcc0     59 93 C2 FA | 	rdbyte	arg01, local07
2fcc4     57 95 02 F6 | 	mov	arg02, local05
2fcc8     5F 99 02 F6 | 	mov	arg04, local13
2fccc     5E 97 02 F6 | 	mov	arg03, local12
2fcd0     0C C6 BF FD | 	call	#_fatfs_cc_disk_read
2fcd4     00 7A 0E F2 | 	cmp	result1, #0 wz
2fcd8     11 A6 06 51 |  if_ne	add	local01, #17
2fcdc     53 03 48 5C |  if_ne	wrbyte	#1, local01
2fce0     01 7A 06 56 |  if_ne	mov	result1, #1
2fce4     98 01 90 5D |  if_ne	jmp	#LR__5101
2fce8     10 A6 06 F1 | 	add	local01, #16
2fcec     53 B3 C2 FA | 	rdbyte	local07, local01
2fcf0     10 A6 86 F1 | 	sub	local01, #16
2fcf4     80 B2 CE F7 | 	test	local07, #128 wz
2fcf8     44 00 90 AD |  if_e	jmp	#LR__5094
2fcfc     1C A6 06 F1 | 	add	local01, #28
2fd00     53 B7 02 FB | 	rdlong	local09, local01
2fd04     1C A6 86 F1 | 	sub	local01, #28
2fd08     5E B7 82 F1 | 	sub	local09, local12
2fd0c     5F B7 12 F2 | 	cmp	local09, local13 wc
2fd10     2C 00 90 3D |  if_ae	jmp	#LR__5094
2fd14     57 93 02 F6 | 	mov	arg01, local05
2fd18     1C A6 06 F1 | 	add	local01, #28
2fd1c     53 B9 02 FB | 	rdlong	local10, local01
2fd20     5E B9 82 F1 | 	sub	local10, local12
2fd24     09 B8 66 F0 | 	shl	local10, #9
2fd28     5C 93 02 F1 | 	add	arg01, local10
2fd2c     0C A6 06 F1 | 	add	local01, #12
2fd30     53 95 02 F6 | 	mov	arg02, local01
2fd34     28 A6 86 F1 | 	sub	local01, #40
2fd38     09 96 C6 F9 | 	decod	arg03, #9
2fd3c     28 4B BF FD | 	call	#__system____builtin_memmove
2fd40                 | LR__5094
2fd40     09 BE 66 F0 | 	shl	local13, #9
2fd44     5F C1 02 F6 | 	mov	local14, local13
2fd48                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2fd48                 | ' 				}
2fd48                 | ' 
2fd48                 | ' 
2fd48                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2fd48                 | ' 				continue;
2fd48     04 01 90 FD | 	jmp	#LR__5099
2fd4c                 | LR__5095
2fd4c     1C A6 06 F1 | 	add	local01, #28
2fd50     53 B3 02 FB | 	rdlong	local07, local01
2fd54     1C A6 86 F1 | 	sub	local01, #28
2fd58     5E B3 0A F2 | 	cmp	local07, local12 wz
2fd5c     A8 00 90 AD |  if_e	jmp	#LR__5097
2fd60     10 A6 06 F1 | 	add	local01, #16
2fd64     53 B3 C2 FA | 	rdbyte	local07, local01
2fd68     10 A6 86 F1 | 	sub	local01, #16
2fd6c     80 B2 CE F7 | 	test	local07, #128 wz
2fd70     58 00 90 AD |  if_e	jmp	#LR__5096
2fd74     18 CE 05 F1 | 	add	fp, #24
2fd78     E7 C0 02 FB | 	rdlong	local14, fp
2fd7c     18 CE 85 F1 | 	sub	fp, #24
2fd80     01 C0 06 F1 | 	add	local14, #1
2fd84     60 93 C2 FA | 	rdbyte	arg01, local14
2fd88     28 A6 06 F1 | 	add	local01, #40
2fd8c     53 95 02 F6 | 	mov	arg02, local01
2fd90     0C A6 86 F1 | 	sub	local01, #12
2fd94     53 97 02 FB | 	rdlong	arg03, local01
2fd98     1C A6 86 F1 | 	sub	local01, #28
2fd9c     01 98 06 F6 | 	mov	arg04, #1
2fda0     78 C6 BF FD | 	call	#_fatfs_cc_disk_write
2fda4     00 7A 0E F2 | 	cmp	result1, #0 wz
2fda8     11 A6 06 51 |  if_ne	add	local01, #17
2fdac     53 03 48 5C |  if_ne	wrbyte	#1, local01
2fdb0     01 7A 06 56 |  if_ne	mov	result1, #1
2fdb4     C8 00 90 5D |  if_ne	jmp	#LR__5101
2fdb8     10 A6 06 F1 | 	add	local01, #16
2fdbc     53 B3 C2 FA | 	rdbyte	local07, local01
2fdc0     7F B2 06 F5 | 	and	local07, #127
2fdc4     53 B3 42 FC | 	wrbyte	local07, local01
2fdc8     10 A6 86 F1 | 	sub	local01, #16
2fdcc                 | LR__5096
2fdcc     18 CE 05 F1 | 	add	fp, #24
2fdd0     E7 C0 02 FB | 	rdlong	local14, fp
2fdd4     18 CE 85 F1 | 	sub	fp, #24
2fdd8     01 C0 06 F1 | 	add	local14, #1
2fddc     60 93 C2 FA | 	rdbyte	arg01, local14
2fde0     53 95 02 F6 | 	mov	arg02, local01
2fde4     28 94 06 F1 | 	add	arg02, #40
2fde8     5E 97 02 F6 | 	mov	arg03, local12
2fdec     01 98 06 F6 | 	mov	arg04, #1
2fdf0     EC C4 BF FD | 	call	#_fatfs_cc_disk_read
2fdf4     00 7A 0E F2 | 	cmp	result1, #0 wz
2fdf8     11 A6 06 51 |  if_ne	add	local01, #17
2fdfc     53 03 48 5C |  if_ne	wrbyte	#1, local01
2fe00     01 7A 06 56 |  if_ne	mov	result1, #1
2fe04     78 00 90 5D |  if_ne	jmp	#LR__5101
2fe08                 | LR__5097
2fe08     1C A6 06 F1 | 	add	local01, #28
2fe0c     53 BD 62 FC | 	wrlong	local12, local01
2fe10     1C A6 86 F1 | 	sub	local01, #28
2fe14                 | LR__5098
2fe14     14 A6 06 F1 | 	add	local01, #20
2fe18     53 BF 02 FB | 	rdlong	local13, local01
2fe1c     FF BF 06 F5 | 	and	local13, #511
2fe20     09 C0 C6 F9 | 	decod	local14, #9
2fe24     5F C1 82 F1 | 	sub	local14, local13
2fe28     55 C1 3A F3 | 	fle	local14, local03 wcz
2fe2c     53 95 02 F6 | 	mov	arg02, local01
2fe30     14 94 06 F1 | 	add	arg02, #20
2fe34     53 BF 02 FB | 	rdlong	local13, local01
2fe38     14 A6 86 F1 | 	sub	local01, #20
2fe3c     FF BF 06 F5 | 	and	local13, #511
2fe40     5F 95 02 F1 | 	add	arg02, local13
2fe44     57 93 02 F6 | 	mov	arg01, local05
2fe48     60 97 02 F6 | 	mov	arg03, local14
2fe4c     18 4A BF FD | 	call	#__system____builtin_memmove
2fe50                 | LR__5099
2fe50     60 AB 82 F1 | 	sub	local03, local14
2fe54     56 B3 02 FB | 	rdlong	local07, local04
2fe58     60 B3 02 F1 | 	add	local07, local14
2fe5c     56 B3 62 FC | 	wrlong	local07, local04
2fe60     60 AF 02 F1 | 	add	local05, local14
2fe64     14 A6 06 F1 | 	add	local01, #20
2fe68     53 B3 02 FB | 	rdlong	local07, local01
2fe6c     60 B3 02 F1 | 	add	local07, local14
2fe70     53 B3 62 FC | 	wrlong	local07, local01
2fe74     14 A6 86 F1 | 	sub	local01, #20
2fe78     FC FC 9F FD | 	jmp	#LR__5090
2fe7c                 | LR__5100
2fe7c                 | ' 
2fe7c                 | ' 
2fe7c                 | ' 
2fe7c                 | ' 
2fe7c                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2fe7c                 | ' 
2fe7c                 | ' 	}
2fe7c                 | ' 
2fe7c                 | ' 	return FR_OK ;
2fe7c     00 7A 06 F6 | 	mov	result1, #0
2fe80                 | LR__5101
2fe80     E7 F0 03 F6 | 	mov	ptra, fp
2fe84     F2 00 A0 FD | 	call	#popregs_
2fe88                 | _fatfs_cc_f_read_ret
2fe88     2D 00 64 FD | 	ret
2fe8c                 | 
2fe8c                 | _fatfs_cc_f_write
2fe8c     12 CA 05 F6 | 	mov	COUNT_, #18
2fe90     E8 00 A0 FD | 	call	#pushregs_
2fe94     34 F0 07 F1 | 	add	ptra, #52
2fe98     49 A7 02 F6 | 	mov	local01, arg01
2fe9c     4A A9 02 F6 | 	mov	local02, arg02
2fea0     4B AB 02 F6 | 	mov	local03, arg03
2fea4     4C AD 02 F6 | 	mov	local04, arg04
2fea8     54 AF 02 F6 | 	mov	local05, local02
2feac     56 01 68 FC | 	wrlong	#0, local04
2feb0     E7 94 02 F6 | 	mov	arg02, fp
2feb4     18 94 06 F1 | 	add	arg02, #24
2feb8     53 93 02 F6 | 	mov	arg01, local01
2febc     94 F6 BF FD | 	call	#_fatfs_cc_validate
2fec0     3D B1 0A F6 | 	mov	local06, result1 wz
2fec4     11 A6 06 A1 |  if_e	add	local01, #17
2fec8     53 B1 C2 AA |  if_e	rdbyte	local06, local01
2fecc     11 A6 86 A1 |  if_e	sub	local01, #17
2fed0     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
2fed4     58 7B 02 56 |  if_ne	mov	result1, local06
2fed8     F4 03 90 5D |  if_ne	jmp	#LR__5122
2fedc     10 A6 06 F1 | 	add	local01, #16
2fee0     53 B3 C2 FA | 	rdbyte	local07, local01
2fee4     10 A6 86 F1 | 	sub	local01, #16
2fee8     02 B2 CE F7 | 	test	local07, #2 wz
2feec     07 7A 06 A6 |  if_e	mov	result1, #7
2fef0     DC 03 90 AD |  if_e	jmp	#LR__5122
2fef4     14 A6 06 F1 | 	add	local01, #20
2fef8     53 B5 02 FB | 	rdlong	local08, local01
2fefc     5A B7 02 F6 | 	mov	local09, local08
2ff00     55 B7 02 F1 | 	add	local09, local03
2ff04     14 A6 86 F1 | 	sub	local01, #20
2ff08     5A B7 12 F2 | 	cmp	local09, local08 wc
2ff0c     01 AA 66 C6 |  if_b	neg	local03, #1
2ff10     14 A6 06 C1 |  if_b	add	local01, #20
2ff14     53 B9 02 CB |  if_b	rdlong	local10, local01
2ff18     14 A6 86 C1 |  if_b	sub	local01, #20
2ff1c     5C AB 82 C1 |  if_b	sub	local03, local10
2ff20                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2ff20                 | ' 	}
2ff20                 | ' 
2ff20                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2ff20                 | LR__5110
2ff20     01 AA 16 F2 | 	cmp	local03, #1 wc
2ff24     94 03 90 CD |  if_b	jmp	#LR__5121
2ff28     14 A6 06 F1 | 	add	local01, #20
2ff2c     53 B3 02 FB | 	rdlong	local07, local01
2ff30     14 A6 86 F1 | 	sub	local01, #20
2ff34     FF B3 CE F7 | 	test	local07, #511 wz
2ff38     D8 02 90 5D |  if_ne	jmp	#LR__5119
2ff3c     14 A6 06 F1 | 	add	local01, #20
2ff40     53 BB 02 FB | 	rdlong	local11, local01
2ff44     14 A6 86 F1 | 	sub	local01, #20
2ff48     09 BA 46 F0 | 	shr	local11, #9
2ff4c     18 CE 05 F1 | 	add	fp, #24
2ff50     E7 B4 02 FB | 	rdlong	local08, fp
2ff54     18 CE 85 F1 | 	sub	fp, #24
2ff58     5A BD 02 F6 | 	mov	local12, local08
2ff5c     0A BC 06 F1 | 	add	local12, #10
2ff60     5E BF E2 FA | 	rdword	local13, local12
2ff64     0A BC 86 F1 | 	sub	local12, #10
2ff68     5F B7 32 F9 | 	getword	local09, local13, #0
2ff6c     01 B6 86 F1 | 	sub	local09, #1
2ff70     5B BB 0A F5 | 	and	local11, local09 wz
2ff74     A0 00 90 5D |  if_ne	jmp	#LR__5113
2ff78     14 A6 06 F1 | 	add	local01, #20
2ff7c     53 B3 0A FB | 	rdlong	local07, local01 wz
2ff80     14 A6 86 F1 | 	sub	local01, #20
2ff84     24 00 90 5D |  if_ne	jmp	#LR__5111
2ff88     08 A6 06 F1 | 	add	local01, #8
2ff8c     53 C1 0A FB | 	rdlong	local14, local01 wz
2ff90     08 A6 86 F1 | 	sub	local01, #8
2ff94     2C 00 90 5D |  if_ne	jmp	#LR__5112
2ff98     53 93 02 F6 | 	mov	arg01, local01
2ff9c     00 94 06 F6 | 	mov	arg02, #0
2ffa0     44 D0 BF FD | 	call	#_fatfs_cc_create_chain
2ffa4     3D C1 02 F6 | 	mov	local14, result1
2ffa8     18 00 90 FD | 	jmp	#LR__5112
2ffac                 | LR__5111
2ffac     53 93 02 F6 | 	mov	arg01, local01
2ffb0     18 A6 06 F1 | 	add	local01, #24
2ffb4     53 95 02 FB | 	rdlong	arg02, local01
2ffb8     18 A6 86 F1 | 	sub	local01, #24
2ffbc     28 D0 BF FD | 	call	#_fatfs_cc_create_chain
2ffc0     3D C1 02 F6 | 	mov	local14, result1
2ffc4                 | LR__5112
2ffc4     00 C0 0E F2 | 	cmp	local14, #0 wz
2ffc8     F0 02 90 AD |  if_e	jmp	#LR__5121
2ffcc     01 C0 0E F2 | 	cmp	local14, #1 wz
2ffd0     11 A6 06 A1 |  if_e	add	local01, #17
2ffd4     53 05 48 AC |  if_e	wrbyte	#2, local01
2ffd8     02 7A 06 A6 |  if_e	mov	result1, #2
2ffdc     F0 02 90 AD |  if_e	jmp	#LR__5122
2ffe0     FF FF 7F FF 
2ffe4     FF C1 0E F2 | 	cmp	local14, ##-1 wz
2ffe8     11 A6 06 A1 |  if_e	add	local01, #17
2ffec     53 03 48 AC |  if_e	wrbyte	#1, local01
2fff0     01 7A 06 A6 |  if_e	mov	result1, #1
2fff4     D8 02 90 AD |  if_e	jmp	#LR__5122
2fff8     18 A6 06 F1 | 	add	local01, #24
2fffc     53 C1 62 FC | 	wrlong	local14, local01
30000     10 A6 86 F1 | 	sub	local01, #16
30004     53 B3 0A FB | 	rdlong	local07, local01 wz
30008     08 A6 86 F1 | 	sub	local01, #8
3000c     08 A6 06 A1 |  if_e	add	local01, #8
30010     53 C1 62 AC |  if_e	wrlong	local14, local01
30014     08 A6 86 A1 |  if_e	sub	local01, #8
30018                 | LR__5113
30018     10 A6 06 F1 | 	add	local01, #16
3001c     53 B3 C2 FA | 	rdbyte	local07, local01
30020     10 A6 86 F1 | 	sub	local01, #16
30024     80 B2 CE F7 | 	test	local07, #128 wz
30028     58 00 90 AD |  if_e	jmp	#LR__5114
3002c     18 CE 05 F1 | 	add	fp, #24
30030     E7 B8 02 FB | 	rdlong	local10, fp
30034     18 CE 85 F1 | 	sub	fp, #24
30038     01 B8 06 F1 | 	add	local10, #1
3003c     5C 93 C2 FA | 	rdbyte	arg01, local10
30040     28 A6 06 F1 | 	add	local01, #40
30044     53 95 02 F6 | 	mov	arg02, local01
30048     0C A6 86 F1 | 	sub	local01, #12
3004c     53 97 02 FB | 	rdlong	arg03, local01
30050     1C A6 86 F1 | 	sub	local01, #28
30054     01 98 06 F6 | 	mov	arg04, #1
30058     C0 C3 BF FD | 	call	#_fatfs_cc_disk_write
3005c     00 7A 0E F2 | 	cmp	result1, #0 wz
30060     11 A6 06 51 |  if_ne	add	local01, #17
30064     53 03 48 5C |  if_ne	wrbyte	#1, local01
30068     01 7A 06 56 |  if_ne	mov	result1, #1
3006c     60 02 90 5D |  if_ne	jmp	#LR__5122
30070     10 A6 06 F1 | 	add	local01, #16
30074     53 B3 C2 FA | 	rdbyte	local07, local01
30078     7F B2 06 F5 | 	and	local07, #127
3007c     53 B3 42 FC | 	wrbyte	local07, local01
30080     10 A6 86 F1 | 	sub	local01, #16
30084                 | LR__5114
30084     18 CE 05 F1 | 	add	fp, #24
30088     E7 92 02 FB | 	rdlong	arg01, fp
3008c     18 CE 85 F1 | 	sub	fp, #24
30090     18 A6 06 F1 | 	add	local01, #24
30094     53 95 02 FB | 	rdlong	arg02, local01
30098     18 A6 86 F1 | 	sub	local01, #24
3009c     40 CA BF FD | 	call	#_fatfs_cc_clst2sect
300a0     3D C3 0A F6 | 	mov	local15, result1 wz
300a4     11 A6 06 A1 |  if_e	add	local01, #17
300a8     53 05 48 AC |  if_e	wrbyte	#2, local01
300ac     02 7A 06 A6 |  if_e	mov	result1, #2
300b0     1C 02 90 AD |  if_e	jmp	#LR__5122
300b4     5D C3 02 F1 | 	add	local15, local11
300b8     55 C5 02 F6 | 	mov	local16, local03
300bc     09 C4 46 F0 | 	shr	local16, #9
300c0     01 C4 16 F2 | 	cmp	local16, #1 wc
300c4     D4 00 90 CD |  if_b	jmp	#LR__5117
300c8     5D B3 02 F6 | 	mov	local07, local11
300cc     62 B3 02 F1 | 	add	local07, local16
300d0     18 CE 05 F1 | 	add	fp, #24
300d4     E7 C6 02 FB | 	rdlong	local17, fp
300d8     18 CE 85 F1 | 	sub	fp, #24
300dc     0A C6 06 F1 | 	add	local17, #10
300e0     63 B9 E2 FA | 	rdword	local10, local17
300e4     5C B3 1A F2 | 	cmp	local07, local10 wcz
300e8     18 00 90 ED |  if_be	jmp	#LR__5115
300ec     18 CE 05 F1 | 	add	fp, #24
300f0     E7 B8 02 FB | 	rdlong	local10, fp
300f4     18 CE 85 F1 | 	sub	fp, #24
300f8     0A B8 06 F1 | 	add	local10, #10
300fc     5C C5 E2 FA | 	rdword	local16, local10
30100     5D C5 82 F1 | 	sub	local16, local11
30104                 | LR__5115
30104     18 CE 05 F1 | 	add	fp, #24
30108     E7 B8 02 FB | 	rdlong	local10, fp
3010c     18 CE 85 F1 | 	sub	fp, #24
30110     01 B8 06 F1 | 	add	local10, #1
30114     5C 93 C2 FA | 	rdbyte	arg01, local10
30118     57 95 02 F6 | 	mov	arg02, local05
3011c     61 97 02 F6 | 	mov	arg03, local15
30120     62 99 02 F6 | 	mov	arg04, local16
30124     F4 C2 BF FD | 	call	#_fatfs_cc_disk_write
30128     00 7A 0E F2 | 	cmp	result1, #0 wz
3012c     11 A6 06 51 |  if_ne	add	local01, #17
30130     53 03 48 5C |  if_ne	wrbyte	#1, local01
30134     01 7A 06 56 |  if_ne	mov	result1, #1
30138     94 01 90 5D |  if_ne	jmp	#LR__5122
3013c     1C A6 06 F1 | 	add	local01, #28
30140     53 B3 02 FB | 	rdlong	local07, local01
30144     1C A6 86 F1 | 	sub	local01, #28
30148     61 B3 82 F1 | 	sub	local07, local15
3014c     62 B3 12 F2 | 	cmp	local07, local16 wc
30150     3C 00 90 3D |  if_ae	jmp	#LR__5116
30154     28 A6 06 F1 | 	add	local01, #40
30158     53 93 02 F6 | 	mov	arg01, local01
3015c     57 95 02 F6 | 	mov	arg02, local05
30160     0C A6 86 F1 | 	sub	local01, #12
30164     53 BF 02 FB | 	rdlong	local13, local01
30168     61 BF 82 F1 | 	sub	local13, local15
3016c     09 BE 66 F0 | 	shl	local13, #9
30170     5F 95 02 F1 | 	add	arg02, local13
30174     09 96 C6 F9 | 	decod	arg03, #9
30178     EC 46 BF FD | 	call	#__system____builtin_memmove
3017c     0C A6 86 F1 | 	sub	local01, #12
30180     53 B3 C2 FA | 	rdbyte	local07, local01
30184     7F B2 06 F5 | 	and	local07, #127
30188     53 B3 42 FC | 	wrbyte	local07, local01
3018c     10 A6 86 F1 | 	sub	local01, #16
30190                 | LR__5116
30190     62 C9 02 F6 | 	mov	local18, local16
30194     09 C8 66 F0 | 	shl	local18, #9
30198                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
30198                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
30198                 | ' 				}
30198                 | ' 
30198                 | ' 
30198                 | ' 				wcnt =  ((UINT) 512 )  * cc;
30198                 | ' 				continue;
30198     C4 00 90 FD | 	jmp	#LR__5120
3019c                 | LR__5117
3019c     1C A6 06 F1 | 	add	local01, #28
301a0     53 B3 02 FB | 	rdlong	local07, local01
301a4     1C A6 86 F1 | 	sub	local01, #28
301a8     61 B3 0A F2 | 	cmp	local07, local15 wz
301ac     58 00 90 AD |  if_e	jmp	#LR__5118
301b0     14 A6 06 F1 | 	add	local01, #20
301b4     53 C7 02 FB | 	rdlong	local17, local01
301b8     08 A6 86 F1 | 	sub	local01, #8
301bc     53 BD 02 FB | 	rdlong	local12, local01
301c0     0C A6 86 F1 | 	sub	local01, #12
301c4     5E C7 12 F2 | 	cmp	local17, local12 wc
301c8     3C 00 90 3D |  if_ae	jmp	#LR__5118
301cc     18 CE 05 F1 | 	add	fp, #24
301d0     E7 C8 02 FB | 	rdlong	local18, fp
301d4     18 CE 85 F1 | 	sub	fp, #24
301d8     01 C8 06 F1 | 	add	local18, #1
301dc     64 93 C2 FA | 	rdbyte	arg01, local18
301e0     53 95 02 F6 | 	mov	arg02, local01
301e4     28 94 06 F1 | 	add	arg02, #40
301e8     61 97 02 F6 | 	mov	arg03, local15
301ec     01 98 06 F6 | 	mov	arg04, #1
301f0     EC C0 BF FD | 	call	#_fatfs_cc_disk_read
301f4     00 7A 0E F2 | 	cmp	result1, #0 wz
301f8     11 A6 06 51 |  if_ne	add	local01, #17
301fc     53 03 48 5C |  if_ne	wrbyte	#1, local01
30200                 | ' 				fp->fptr < fp->obj.objsize &&
30200                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
30200                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
30200     01 7A 06 56 |  if_ne	mov	result1, #1
30204     C8 00 90 5D |  if_ne	jmp	#LR__5122
30208                 | LR__5118
30208     1C A6 06 F1 | 	add	local01, #28
3020c     53 C3 62 FC | 	wrlong	local15, local01
30210     1C A6 86 F1 | 	sub	local01, #28
30214                 | LR__5119
30214     14 A6 06 F1 | 	add	local01, #20
30218     53 B9 02 FB | 	rdlong	local10, local01
3021c     FF B9 06 F5 | 	and	local10, #511
30220     09 C8 C6 F9 | 	decod	local18, #9
30224     5C C9 82 F1 | 	sub	local18, local10
30228     55 C9 3A F3 | 	fle	local18, local03 wcz
3022c     53 93 02 F6 | 	mov	arg01, local01
30230     14 92 06 F1 | 	add	arg01, #20
30234     53 BF 02 FB | 	rdlong	local13, local01
30238     FF BF 06 F5 | 	and	local13, #511
3023c     5F 93 02 F1 | 	add	arg01, local13
30240     57 95 02 F6 | 	mov	arg02, local05
30244     64 97 02 F6 | 	mov	arg03, local18
30248     1C 46 BF FD | 	call	#__system____builtin_memmove
3024c     04 A6 86 F1 | 	sub	local01, #4
30250     53 B3 C2 FA | 	rdbyte	local07, local01
30254     80 B2 46 F5 | 	or	local07, #128
30258     53 B3 42 FC | 	wrbyte	local07, local01
3025c     10 A6 86 F1 | 	sub	local01, #16
30260                 | LR__5120
30260     64 AB 82 F1 | 	sub	local03, local18
30264     56 B3 02 FB | 	rdlong	local07, local04
30268     64 B3 02 F1 | 	add	local07, local18
3026c     56 B3 62 FC | 	wrlong	local07, local04
30270     64 AF 02 F1 | 	add	local05, local18
30274     14 A6 06 F1 | 	add	local01, #20
30278     53 B9 02 FB | 	rdlong	local10, local01
3027c     64 B9 02 F1 | 	add	local10, local18
30280     53 B9 62 FC | 	wrlong	local10, local01
30284     08 A6 86 F1 | 	sub	local01, #8
30288     53 B7 02 FB | 	rdlong	local09, local01
3028c     0C A6 86 F1 | 	sub	local01, #12
30290     5B B9 1A F2 | 	cmp	local10, local09 wcz
30294     14 A6 06 11 |  if_a	add	local01, #20
30298     53 B3 02 1B |  if_a	rdlong	local07, local01
3029c     14 A6 86 11 |  if_a	sub	local01, #20
302a0     0C A6 06 E1 |  if_be	add	local01, #12
302a4     53 B3 02 EB |  if_be	rdlong	local07, local01
302a8     0C A6 86 E1 |  if_be	sub	local01, #12
302ac     0C A6 06 F1 | 	add	local01, #12
302b0     53 B3 62 FC | 	wrlong	local07, local01
302b4     0C A6 86 F1 | 	sub	local01, #12
302b8     64 FC 9F FD | 	jmp	#LR__5110
302bc                 | LR__5121
302bc     10 A6 06 F1 | 	add	local01, #16
302c0     53 B3 C2 FA | 	rdbyte	local07, local01
302c4     40 B2 46 F5 | 	or	local07, #64
302c8     53 B3 42 FC | 	wrbyte	local07, local01
302cc                 | ' 
302cc                 | ' 
302cc                 | ' 
302cc                 | ' 
302cc                 | ' 
302cc                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
302cc                 | ' 		fp->flag |=  0x80 ;
302cc                 | ' 
302cc                 | ' 	}
302cc                 | ' 
302cc                 | ' 	fp->flag |=  0x40 ;
302cc                 | ' 
302cc                 | ' 	return FR_OK ;
302cc     00 7A 06 F6 | 	mov	result1, #0
302d0                 | LR__5122
302d0     E7 F0 03 F6 | 	mov	ptra, fp
302d4     F2 00 A0 FD | 	call	#popregs_
302d8                 | _fatfs_cc_f_write_ret
302d8     2D 00 64 FD | 	ret
302dc                 | 
302dc                 | _fatfs_cc_f_sync
302dc     03 CA 05 F6 | 	mov	COUNT_, #3
302e0     E8 00 A0 FD | 	call	#pushregs_
302e4     18 F0 07 F1 | 	add	ptra, #24
302e8     49 A7 02 F6 | 	mov	local01, arg01
302ec     E7 94 02 F6 | 	mov	arg02, fp
302f0     0C 94 06 F1 | 	add	arg02, #12
302f4     53 93 02 F6 | 	mov	arg01, local01
302f8     58 F2 BF FD | 	call	#_fatfs_cc_validate
302fc     3D A9 0A F6 | 	mov	local02, result1 wz
30300     30 01 90 5D |  if_ne	jmp	#LR__5133
30304     10 A6 06 F1 | 	add	local01, #16
30308     53 99 C2 FA | 	rdbyte	arg04, local01
3030c     10 A6 86 F1 | 	sub	local01, #16
30310     40 98 CE F7 | 	test	arg04, #64 wz
30314     1C 01 90 AD |  if_e	jmp	#LR__5132
30318     10 A6 06 F1 | 	add	local01, #16
3031c     53 A9 C2 FA | 	rdbyte	local02, local01
30320     10 A6 86 F1 | 	sub	local01, #16
30324     80 A8 CE F7 | 	test	local02, #128 wz
30328     50 00 90 AD |  if_e	jmp	#LR__5130
3032c     0C CE 05 F1 | 	add	fp, #12
30330     E7 A8 02 FB | 	rdlong	local02, fp
30334     0C CE 85 F1 | 	sub	fp, #12
30338     01 A8 06 F1 | 	add	local02, #1
3033c     54 93 C2 FA | 	rdbyte	arg01, local02
30340     28 A6 06 F1 | 	add	local01, #40
30344     53 95 02 F6 | 	mov	arg02, local01
30348     0C A6 86 F1 | 	sub	local01, #12
3034c     53 97 02 FB | 	rdlong	arg03, local01
30350     1C A6 86 F1 | 	sub	local01, #28
30354     01 98 06 F6 | 	mov	arg04, #1
30358     C0 C0 BF FD | 	call	#_fatfs_cc_disk_write
3035c     00 7A 0E F2 | 	cmp	result1, #0 wz
30360     01 7A 06 56 |  if_ne	mov	result1, #1
30364     D0 00 90 5D |  if_ne	jmp	#LR__5134
30368     10 A6 06 F1 | 	add	local01, #16
3036c     53 A9 C2 FA | 	rdbyte	local02, local01
30370     7F A8 06 F5 | 	and	local02, #127
30374     53 A9 42 FC | 	wrbyte	local02, local01
30378     10 A6 86 F1 | 	sub	local01, #16
3037c                 | LR__5130
3037c     EC 0F B0 FD | 	call	#_fatfs_cc__get_fattime
30380     3D AB 02 F6 | 	mov	local03, result1
30384     0C CE 05 F1 | 	add	fp, #12
30388     E7 92 02 FB | 	rdlong	arg01, fp
3038c     0C CE 85 F1 | 	sub	fp, #12
30390     20 A6 06 F1 | 	add	local01, #32
30394     53 95 02 FB | 	rdlong	arg02, local01
30398     20 A6 86 F1 | 	sub	local01, #32
3039c     C8 C5 BF FD | 	call	#_fatfs_cc_move_window
303a0     3D A9 0A F6 | 	mov	local02, result1 wz
303a4     8C 00 90 5D |  if_ne	jmp	#LR__5131
303a8     24 A6 06 F1 | 	add	local01, #36
303ac     53 A9 02 FB | 	rdlong	local02, local01
303b0     24 A6 86 F1 | 	sub	local01, #36
303b4     0B A8 06 F1 | 	add	local02, #11
303b8     54 99 C2 FA | 	rdbyte	arg04, local02
303bc     20 98 46 F5 | 	or	arg04, #32
303c0     54 99 42 FC | 	wrbyte	arg04, local02
303c4     0B A8 86 F1 | 	sub	local02, #11
303c8     53 93 02 FB | 	rdlong	arg01, local01
303cc     08 A6 06 F1 | 	add	local01, #8
303d0     53 97 02 FB | 	rdlong	arg03, local01
303d4     54 95 02 F6 | 	mov	arg02, local02
303d8     F8 D2 BF FD | 	call	#_fatfs_cc_st_clust
303dc     54 93 02 F6 | 	mov	arg01, local02
303e0     1C 92 06 F1 | 	add	arg01, #28
303e4     04 A6 06 F1 | 	add	local01, #4
303e8     53 95 02 FB | 	rdlong	arg02, local01
303ec     49 95 62 FC | 	wrlong	arg02, arg01
303f0     54 93 02 F6 | 	mov	arg01, local02
303f4     16 92 06 F1 | 	add	arg01, #22
303f8     49 AB 62 FC | 	wrlong	local03, arg01
303fc     12 A8 06 F1 | 	add	local02, #18
30400     54 01 58 FC | 	wrword	#0, local02
30404     0C CE 05 F1 | 	add	fp, #12
30408     E7 AA 02 FB | 	rdlong	local03, fp
3040c     03 AA 06 F1 | 	add	local03, #3
30410     55 03 48 FC | 	wrbyte	#1, local03
30414     E7 92 02 FB | 	rdlong	arg01, fp
30418     0C CE 85 F1 | 	sub	fp, #12
3041c     C0 C5 BF FD | 	call	#_fatfs_cc_sync_fs
30420     3D A9 02 F6 | 	mov	local02, result1
30424     04 A6 06 F1 | 	add	local01, #4
30428     53 AB C2 FA | 	rdbyte	local03, local01
3042c     BF AA 06 F5 | 	and	local03, #191
30430     53 AB 42 FC | 	wrbyte	local03, local01
30434                 | LR__5131
30434                 | LR__5132
30434                 | LR__5133
30434                 | ' 					dir = fp->dir_ptr;
30434                 | ' 					dir[ 11 ] |=  0x20 ;
30434                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
30434                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
30434                 | ' 					st_dword(dir +  22 , tm);
30434                 | ' 					st_word(dir +  18 , 0);
30434                 | ' 					fs->wflag = 1;
30434                 | ' 					res = sync_fs(fs);
30434                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
30434                 | ' 				}
30434                 | ' 			}
30434                 | ' 		}
30434                 | ' 	}
30434                 | ' 
30434                 | ' 	return res ;
30434     54 7B 02 F6 | 	mov	result1, local02
30438                 | LR__5134
30438     E7 F0 03 F6 | 	mov	ptra, fp
3043c     F2 00 A0 FD | 	call	#popregs_
30440                 | _fatfs_cc_f_sync_ret
30440     2D 00 64 FD | 	ret
30444                 | 
30444                 | _fatfs_cc_f_close
30444     02 CA 05 F6 | 	mov	COUNT_, #2
30448     E8 00 A0 FD | 	call	#pushregs_
3044c     10 F0 07 F1 | 	add	ptra, #16
30450     49 A7 02 F6 | 	mov	local01, arg01
30454     84 FE BF FD | 	call	#_fatfs_cc_f_sync
30458     3D A9 0A F6 | 	mov	local02, result1 wz
3045c     18 00 90 5D |  if_ne	jmp	#LR__5140
30460     E7 94 02 F6 | 	mov	arg02, fp
30464     0C 94 06 F1 | 	add	arg02, #12
30468     53 93 02 F6 | 	mov	arg01, local01
3046c     E4 F0 BF FD | 	call	#_fatfs_cc_validate
30470     3D A9 0A F6 | 	mov	local02, result1 wz
30474     53 01 68 AC |  if_e	wrlong	#0, local01
30478                 | LR__5140
30478                 | ' 
30478                 | ' 
30478                 | ' 
30478                 | ' 
30478                 | ' 			fp->obj.fs = 0;
30478                 | ' #line 4192 "ff.c"
30478                 | ' 		}
30478                 | ' 	}
30478                 | ' 	return res;
30478     54 7B 02 F6 | 	mov	result1, local02
3047c     E7 F0 03 F6 | 	mov	ptra, fp
30480     F2 00 A0 FD | 	call	#popregs_
30484                 | _fatfs_cc_f_close_ret
30484     2D 00 64 FD | 	ret
30488                 | 
30488                 | _fatfs_cc_f_lseek
30488     0D CA 05 F6 | 	mov	COUNT_, #13
3048c     E8 00 A0 FD | 	call	#pushregs_
30490     24 F0 07 F1 | 	add	ptra, #36
30494     49 A7 02 F6 | 	mov	local01, arg01
30498     4A A9 02 F6 | 	mov	local02, arg02
3049c     E7 94 02 F6 | 	mov	arg02, fp
304a0     10 94 06 F1 | 	add	arg02, #16
304a4     53 93 02 F6 | 	mov	arg01, local01
304a8     A8 F0 BF FD | 	call	#_fatfs_cc_validate
304ac     3D AB 0A F6 | 	mov	local03, result1 wz
304b0     11 A6 06 A1 |  if_e	add	local01, #17
304b4     53 AB C2 AA |  if_e	rdbyte	local03, local01
304b8     11 A6 86 A1 |  if_e	sub	local01, #17
304bc     00 AA 0E F2 | 	cmp	local03, #0 wz
304c0     55 7B 02 56 |  if_ne	mov	result1, local03
304c4     5C 03 90 5D |  if_ne	jmp	#LR__5166
304c8     0C A6 06 F1 | 	add	local01, #12
304cc     53 AD 02 FB | 	rdlong	local04, local01
304d0     0C A6 86 F1 | 	sub	local01, #12
304d4     56 A9 1A F2 | 	cmp	local02, local04 wcz
304d8     20 00 90 ED |  if_be	jmp	#LR__5150
304dc     10 A6 06 F1 | 	add	local01, #16
304e0     53 AF C2 FA | 	rdbyte	local05, local01
304e4     10 A6 86 F1 | 	sub	local01, #16
304e8     57 B1 E2 F8 | 	getbyte	local06, local05, #0
304ec     02 B0 CE F7 | 	test	local06, #2 wz
304f0     0C A6 06 A1 |  if_e	add	local01, #12
304f4     53 A9 02 AB |  if_e	rdlong	local02, local01
304f8     0C A6 86 A1 |  if_e	sub	local01, #12
304fc                 | LR__5150
304fc     14 A6 06 F1 | 	add	local01, #20
30500     53 B3 02 FB | 	rdlong	local07, local01
30504     00 B4 06 F6 | 	mov	local08, #0
30508     53 01 68 FC | 	wrlong	#0, local01
3050c     14 A6 86 F1 | 	sub	local01, #20
30510     01 A8 16 F2 | 	cmp	local02, #1 wc
30514     F4 01 90 CD |  if_b	jmp	#LR__5162
30518     10 CE 05 F1 | 	add	fp, #16
3051c     E7 B6 02 FB | 	rdlong	local09, fp
30520     10 CE 85 F1 | 	sub	fp, #16
30524     0A B6 06 F1 | 	add	local09, #10
30528     5B AF E2 FA | 	rdword	local05, local09
3052c     57 B9 32 F9 | 	getword	local10, local05, #0
30530     09 B8 66 F0 | 	shl	local10, #9
30534     5C BB 02 F6 | 	mov	local11, local10
30538     01 B2 16 F2 | 	cmp	local07, #1 wc
3053c     5C 00 90 CD |  if_b	jmp	#LR__5151
30540     54 B7 02 F6 | 	mov	local09, local02
30544     01 B6 86 F1 | 	sub	local09, #1
30548     5D B7 12 FD | 	qdiv	local09, local11
3054c     59 AF 02 F6 | 	mov	local05, local07
30550     01 AE 86 F1 | 	sub	local05, #1
30554     5D BD 02 F6 | 	mov	local12, local11
30558     18 B6 62 FD | 	getqx	local09
3055c     5E AF 12 FD | 	qdiv	local05, local12
30560     18 B8 62 FD | 	getqx	local10
30564     5C B7 12 F2 | 	cmp	local09, local10 wc
30568     30 00 90 CD |  if_b	jmp	#LR__5151
3056c     59 B1 02 F6 | 	mov	local06, local07
30570     01 B0 86 F1 | 	sub	local06, #1
30574     5D B7 02 F6 | 	mov	local09, local11
30578     01 B6 86 F1 | 	sub	local09, #1
3057c     5B B1 22 F5 | 	andn	local06, local09
30580     14 A6 06 F1 | 	add	local01, #20
30584     53 B1 62 FC | 	wrlong	local06, local01
30588     58 A9 82 F1 | 	sub	local02, local06
3058c     04 A6 06 F1 | 	add	local01, #4
30590     53 BF 02 FB | 	rdlong	local13, local01
30594     18 A6 86 F1 | 	sub	local01, #24
30598     64 00 90 FD | 	jmp	#LR__5153
3059c                 | LR__5151
3059c     08 A6 06 F1 | 	add	local01, #8
305a0     53 BF 0A FB | 	rdlong	local13, local01 wz
305a4     08 A6 86 F1 | 	sub	local01, #8
305a8     48 00 90 5D |  if_ne	jmp	#LR__5152
305ac     53 93 02 F6 | 	mov	arg01, local01
305b0     00 94 06 F6 | 	mov	arg02, #0
305b4     30 CA BF FD | 	call	#_fatfs_cc_create_chain
305b8     3D BF 02 F6 | 	mov	local13, result1
305bc     01 BE 0E F2 | 	cmp	local13, #1 wz
305c0     11 A6 06 A1 |  if_e	add	local01, #17
305c4     53 05 48 AC |  if_e	wrbyte	#2, local01
305c8     02 7A 06 A6 |  if_e	mov	result1, #2
305cc     54 02 90 AD |  if_e	jmp	#LR__5166
305d0     FF FF 7F FF 
305d4     FF BF 0E F2 | 	cmp	local13, ##-1 wz
305d8     11 A6 06 A1 |  if_e	add	local01, #17
305dc     53 03 48 AC |  if_e	wrbyte	#1, local01
305e0     01 7A 06 A6 |  if_e	mov	result1, #1
305e4     3C 02 90 AD |  if_e	jmp	#LR__5166
305e8     08 A6 06 F1 | 	add	local01, #8
305ec     53 BF 62 FC | 	wrlong	local13, local01
305f0     08 A6 86 F1 | 	sub	local01, #8
305f4                 | LR__5152
305f4     18 A6 06 F1 | 	add	local01, #24
305f8     53 BF 62 FC | 	wrlong	local13, local01
305fc     18 A6 86 F1 | 	sub	local01, #24
30600                 | LR__5153
30600     00 BE 0E F2 | 	cmp	local13, #0 wz
30604     04 01 90 AD |  if_e	jmp	#LR__5161
30608                 | ' 				while (ofs > bcs) {
30608                 | LR__5154
30608     5D A9 1A F2 | 	cmp	local02, local11 wcz
3060c     B0 00 90 ED |  if_be	jmp	#LR__5159
30610     5D A9 82 F1 | 	sub	local02, local11
30614     14 A6 06 F1 | 	add	local01, #20
30618     53 AD 02 FB | 	rdlong	local04, local01
3061c     5D AD 02 F1 | 	add	local04, local11
30620     53 AD 62 FC | 	wrlong	local04, local01
30624     04 A6 86 F1 | 	sub	local01, #4
30628     53 AD C2 FA | 	rdbyte	local04, local01
3062c     10 A6 86 F1 | 	sub	local01, #16
30630     02 AC CE F7 | 	test	local04, #2 wz
30634     1C 00 90 AD |  if_e	jmp	#LR__5155
30638     53 93 02 F6 | 	mov	arg01, local01
3063c     5F 95 02 F6 | 	mov	arg02, local13
30640     A4 C9 BF FD | 	call	#_fatfs_cc_create_chain
30644     3D BF 0A F6 | 	mov	local13, result1 wz
30648     00 A8 06 A6 |  if_e	mov	local02, #0
3064c                 | ' 							ofs = 0; break;
3064c     70 00 90 AD |  if_e	jmp	#LR__5159
30650     10 00 90 FD | 	jmp	#LR__5156
30654                 | LR__5155
30654     53 93 02 F6 | 	mov	arg01, local01
30658     5F 95 02 F6 | 	mov	arg02, local13
3065c     C0 C4 BF FD | 	call	#_fatfs_cc_get_fat
30660     3D BF 02 F6 | 	mov	local13, result1
30664                 | LR__5156
30664     FF FF 7F FF 
30668     FF BF 0E F2 | 	cmp	local13, ##-1 wz
3066c     11 A6 06 A1 |  if_e	add	local01, #17
30670     53 03 48 AC |  if_e	wrbyte	#1, local01
30674     01 7A 06 A6 |  if_e	mov	result1, #1
30678     A8 01 90 AD |  if_e	jmp	#LR__5166
3067c     02 BE 16 F2 | 	cmp	local13, #2 wc
30680     1C 00 90 CD |  if_b	jmp	#LR__5157
30684     10 CE 05 F1 | 	add	fp, #16
30688     E7 AC 02 FB | 	rdlong	local04, fp
3068c     10 CE 85 F1 | 	sub	fp, #16
30690     18 AC 06 F1 | 	add	local04, #24
30694     56 AF 02 FB | 	rdlong	local05, local04
30698     57 BF 12 F2 | 	cmp	local13, local05 wc
3069c     10 00 90 CD |  if_b	jmp	#LR__5158
306a0                 | LR__5157
306a0     11 A6 06 F1 | 	add	local01, #17
306a4     53 05 48 FC | 	wrbyte	#2, local01
306a8     02 7A 06 F6 | 	mov	result1, #2
306ac     74 01 90 FD | 	jmp	#LR__5166
306b0                 | LR__5158
306b0     18 A6 06 F1 | 	add	local01, #24
306b4     53 BF 62 FC | 	wrlong	local13, local01
306b8     18 A6 86 F1 | 	sub	local01, #24
306bc     48 FF 9F FD | 	jmp	#LR__5154
306c0                 | LR__5159
306c0     14 A6 06 F1 | 	add	local01, #20
306c4     53 AD 02 FB | 	rdlong	local04, local01
306c8     54 AD 02 F1 | 	add	local04, local02
306cc     53 AD 62 FC | 	wrlong	local04, local01
306d0     14 A6 86 F1 | 	sub	local01, #20
306d4     FF A9 CE F7 | 	test	local02, #511 wz
306d8     30 00 90 AD |  if_e	jmp	#LR__5160
306dc     10 CE 05 F1 | 	add	fp, #16
306e0     E7 92 02 FB | 	rdlong	arg01, fp
306e4     10 CE 85 F1 | 	sub	fp, #16
306e8     5F 95 02 F6 | 	mov	arg02, local13
306ec     F0 C3 BF FD | 	call	#_fatfs_cc_clst2sect
306f0     3D B5 0A F6 | 	mov	local08, result1 wz
306f4     11 A6 06 A1 |  if_e	add	local01, #17
306f8     53 05 48 AC |  if_e	wrbyte	#2, local01
306fc     02 7A 06 A6 |  if_e	mov	result1, #2
30700     20 01 90 AD |  if_e	jmp	#LR__5166
30704     09 A8 46 F0 | 	shr	local02, #9
30708     54 B5 02 F1 | 	add	local08, local02
3070c                 | LR__5160
3070c                 | LR__5161
3070c                 | LR__5162
3070c     14 A6 06 F1 | 	add	local01, #20
30710     53 AD 02 FB | 	rdlong	local04, local01
30714     08 A6 86 F1 | 	sub	local01, #8
30718     53 B1 02 FB | 	rdlong	local06, local01
3071c     0C A6 86 F1 | 	sub	local01, #12
30720     58 AD 1A F2 | 	cmp	local04, local06 wcz
30724     24 00 90 ED |  if_be	jmp	#LR__5163
30728     14 A6 06 F1 | 	add	local01, #20
3072c     53 AD 02 FB | 	rdlong	local04, local01
30730     08 A6 86 F1 | 	sub	local01, #8
30734     53 AD 62 FC | 	wrlong	local04, local01
30738     04 A6 06 F1 | 	add	local01, #4
3073c     53 AD C2 FA | 	rdbyte	local04, local01
30740     40 AC 46 F5 | 	or	local04, #64
30744     53 AD 42 FC | 	wrbyte	local04, local01
30748     10 A6 86 F1 | 	sub	local01, #16
3074c                 | LR__5163
3074c     14 A6 06 F1 | 	add	local01, #20
30750     53 AD 02 FB | 	rdlong	local04, local01
30754     14 A6 86 F1 | 	sub	local01, #20
30758     FF AD CE F7 | 	test	local04, #511 wz
3075c     1C A6 06 51 |  if_ne	add	local01, #28
30760     53 AF 02 5B |  if_ne	rdlong	local05, local01
30764     1C A6 86 51 |  if_ne	sub	local01, #28
30768     57 B5 0A 52 |  if_ne	cmp	local08, local05 wz
3076c     B0 00 90 AD |  if_e	jmp	#LR__5165
30770     10 A6 06 F1 | 	add	local01, #16
30774     53 AD C2 FA | 	rdbyte	local04, local01
30778     10 A6 86 F1 | 	sub	local01, #16
3077c     80 AC CE F7 | 	test	local04, #128 wz
30780     58 00 90 AD |  if_e	jmp	#LR__5164
30784     10 CE 05 F1 | 	add	fp, #16
30788     E7 B6 02 FB | 	rdlong	local09, fp
3078c     10 CE 85 F1 | 	sub	fp, #16
30790     01 B6 06 F1 | 	add	local09, #1
30794     5B 93 C2 FA | 	rdbyte	arg01, local09
30798     28 A6 06 F1 | 	add	local01, #40
3079c     53 95 02 F6 | 	mov	arg02, local01
307a0     0C A6 86 F1 | 	sub	local01, #12
307a4     53 97 02 FB | 	rdlong	arg03, local01
307a8     1C A6 86 F1 | 	sub	local01, #28
307ac     01 98 06 F6 | 	mov	arg04, #1
307b0     68 BC BF FD | 	call	#_fatfs_cc_disk_write
307b4     00 7A 0E F2 | 	cmp	result1, #0 wz
307b8     11 A6 06 51 |  if_ne	add	local01, #17
307bc     53 03 48 5C |  if_ne	wrbyte	#1, local01
307c0     01 7A 06 56 |  if_ne	mov	result1, #1
307c4     5C 00 90 5D |  if_ne	jmp	#LR__5166
307c8     10 A6 06 F1 | 	add	local01, #16
307cc     53 AD C2 FA | 	rdbyte	local04, local01
307d0     7F AC 06 F5 | 	and	local04, #127
307d4     53 AD 42 FC | 	wrbyte	local04, local01
307d8     10 A6 86 F1 | 	sub	local01, #16
307dc                 | LR__5164
307dc     10 CE 05 F1 | 	add	fp, #16
307e0     E7 B6 02 FB | 	rdlong	local09, fp
307e4     10 CE 85 F1 | 	sub	fp, #16
307e8     01 B6 06 F1 | 	add	local09, #1
307ec     5B 93 C2 FA | 	rdbyte	arg01, local09
307f0     53 95 02 F6 | 	mov	arg02, local01
307f4     28 94 06 F1 | 	add	arg02, #40
307f8     5A 97 02 F6 | 	mov	arg03, local08
307fc     01 98 06 F6 | 	mov	arg04, #1
30800     DC BA BF FD | 	call	#_fatfs_cc_disk_read
30804     00 7A 0E F2 | 	cmp	result1, #0 wz
30808     11 A6 06 51 |  if_ne	add	local01, #17
3080c     53 03 48 5C |  if_ne	wrbyte	#1, local01
30810     01 7A 06 56 |  if_ne	mov	result1, #1
30814     0C 00 90 5D |  if_ne	jmp	#LR__5166
30818     1C A6 06 F1 | 	add	local01, #28
3081c     53 B5 62 FC | 	wrlong	local08, local01
30820                 | LR__5165
30820                 | ' 
30820                 | ' 			fp->sect = nsect;
30820                 | ' 		}
30820                 | ' 	}
30820                 | ' 
30820                 | ' 	return res ;
30820     55 7B 02 F6 | 	mov	result1, local03
30824                 | LR__5166
30824     E7 F0 03 F6 | 	mov	ptra, fp
30828     F2 00 A0 FD | 	call	#popregs_
3082c                 | _fatfs_cc_f_lseek_ret
3082c     2D 00 64 FD | 	ret
30830                 | 
30830                 | _fatfs_cc_f_opendir
30830     02 CA 05 F6 | 	mov	COUNT_, #2
30834     E8 00 A0 FD | 	call	#pushregs_
30838     14 F0 07 F1 | 	add	ptra, #20
3083c     49 A7 0A F6 | 	mov	local01, arg01 wz
30840     08 CE 05 F1 | 	add	fp, #8
30844     E7 94 62 FC | 	wrlong	arg02, fp
30848     08 CE 85 F1 | 	sub	fp, #8
3084c     09 7A 06 A6 |  if_e	mov	result1, #9
30850     EC 00 90 AD |  if_e	jmp	#LR__5176
30854     08 CE 05 F1 | 	add	fp, #8
30858     E7 92 02 F6 | 	mov	arg01, fp
3085c     08 CE 05 F1 | 	add	fp, #8
30860     E7 94 02 F6 | 	mov	arg02, fp
30864     10 CE 85 F1 | 	sub	fp, #16
30868     00 96 06 F6 | 	mov	arg03, #0
3086c     B4 E7 BF FD | 	call	#_fatfs_cc_mount_volume
30870     3D A9 0A F6 | 	mov	local02, result1 wz
30874     BC 00 90 5D |  if_ne	jmp	#LR__5175
30878     10 CE 05 F1 | 	add	fp, #16
3087c     E7 A8 02 FB | 	rdlong	local02, fp
30880     53 A9 62 FC | 	wrlong	local02, local01
30884     08 CE 85 F1 | 	sub	fp, #8
30888     E7 94 02 FB | 	rdlong	arg02, fp
3088c     08 CE 85 F1 | 	sub	fp, #8
30890     53 93 02 F6 | 	mov	arg01, local01
30894     F0 E2 BF FD | 	call	#_fatfs_cc_follow_path
30898     3D A9 0A F6 | 	mov	local02, result1 wz
3089c     8C 00 90 5D |  if_ne	jmp	#LR__5174
308a0     2B A6 06 F1 | 	add	local01, #43
308a4     53 97 C2 FA | 	rdbyte	arg03, local01
308a8     2B A6 86 F1 | 	sub	local01, #43
308ac     80 96 CE F7 | 	test	arg03, #128 wz
308b0     40 00 90 5D |  if_ne	jmp	#LR__5172
308b4     06 A6 06 F1 | 	add	local01, #6
308b8     53 97 C2 FA | 	rdbyte	arg03, local01
308bc     06 A6 86 F1 | 	sub	local01, #6
308c0     10 96 CE F7 | 	test	arg03, #16 wz
308c4     28 00 90 AD |  if_e	jmp	#LR__5170
308c8     10 CE 05 F1 | 	add	fp, #16
308cc     E7 92 02 FB | 	rdlong	arg01, fp
308d0     10 CE 85 F1 | 	sub	fp, #16
308d4     1C A6 06 F1 | 	add	local01, #28
308d8     53 95 02 FB | 	rdlong	arg02, local01
308dc     C0 CD BF FD | 	call	#_fatfs_cc_ld_clust
308e0     14 A6 86 F1 | 	sub	local01, #20
308e4     53 7B 62 FC | 	wrlong	result1, local01
308e8     08 A6 86 F1 | 	sub	local01, #8
308ec     04 00 90 FD | 	jmp	#LR__5171
308f0                 | LR__5170
308f0     05 A8 06 F6 | 	mov	local02, #5
308f4                 | LR__5171
308f4                 | LR__5172
308f4     00 A8 0E F2 | 	cmp	local02, #0 wz
308f8     30 00 90 5D |  if_ne	jmp	#LR__5173
308fc     10 CE 05 F1 | 	add	fp, #16
30900     E7 A8 02 FB | 	rdlong	local02, fp
30904     10 CE 85 F1 | 	sub	fp, #16
30908     06 A8 06 F1 | 	add	local02, #6
3090c     54 A9 E2 FA | 	rdword	local02, local02
30910     04 A6 06 F1 | 	add	local01, #4
30914     53 A9 52 FC | 	wrword	local02, local01
30918     04 A6 86 F1 | 	sub	local01, #4
3091c     53 93 02 F6 | 	mov	arg01, local01
30920     00 94 06 F6 | 	mov	arg02, #0
30924     A4 C9 BF FD | 	call	#_fatfs_cc_dir_sdi
30928     3D A9 02 F6 | 	mov	local02, result1
3092c                 | LR__5173
3092c                 | LR__5174
3092c     04 A8 0E F2 | 	cmp	local02, #4 wz
30930     05 A8 06 A6 |  if_e	mov	local02, #5
30934                 | LR__5175
30934     00 A8 0E F2 | 	cmp	local02, #0 wz
30938     53 01 68 5C |  if_ne	wrlong	#0, local01
3093c                 | ' 
3093c                 | ' 	return res ;
3093c     54 7B 02 F6 | 	mov	result1, local02
30940                 | LR__5176
30940     E7 F0 03 F6 | 	mov	ptra, fp
30944     F2 00 A0 FD | 	call	#popregs_
30948                 | _fatfs_cc_f_opendir_ret
30948     2D 00 64 FD | 	ret
3094c                 | 
3094c                 | _fatfs_cc_f_closedir
3094c     01 CA 05 F6 | 	mov	COUNT_, #1
30950     E8 00 A0 FD | 	call	#pushregs_
30954     10 F0 07 F1 | 	add	ptra, #16
30958     49 A7 02 F6 | 	mov	local01, arg01
3095c     E7 94 02 F6 | 	mov	arg02, fp
30960     0C 94 06 F1 | 	add	arg02, #12
30964     53 93 02 F6 | 	mov	arg01, local01
30968     E8 EB BF FD | 	call	#_fatfs_cc_validate
3096c     00 7A 4E F2 | 	cmps	result1, #0 wz
30970     53 01 68 AC |  if_e	wrlong	#0, local01
30974                 | ' 
30974                 | ' 
30974                 | ' 
30974                 | ' 
30974                 | ' 		dp->obj.fs = 0;
30974                 | ' #line 4633 "ff.c"
30974                 | ' 	}
30974                 | ' 	return res;
30974     E7 F0 03 F6 | 	mov	ptra, fp
30978     F2 00 A0 FD | 	call	#popregs_
3097c                 | _fatfs_cc_f_closedir_ret
3097c     2D 00 64 FD | 	ret
30980                 | 
30980                 | _fatfs_cc_f_readdir
30980     03 CA 05 F6 | 	mov	COUNT_, #3
30984     E8 00 A0 FD | 	call	#pushregs_
30988     14 F0 07 F1 | 	add	ptra, #20
3098c     49 A7 02 F6 | 	mov	local01, arg01
30990     4A A9 02 F6 | 	mov	local02, arg02
30994     E7 94 02 F6 | 	mov	arg02, fp
30998     10 94 06 F1 | 	add	arg02, #16
3099c     53 93 02 F6 | 	mov	arg01, local01
309a0     B0 EB BF FD | 	call	#_fatfs_cc_validate
309a4     3D AB 0A F6 | 	mov	local03, result1 wz
309a8     60 00 90 5D |  if_ne	jmp	#LR__5183
309ac     00 A8 0E F2 | 	cmp	local02, #0 wz
309b0     14 00 90 5D |  if_ne	jmp	#LR__5180
309b4     53 93 02 F6 | 	mov	arg01, local01
309b8     00 94 06 F6 | 	mov	arg02, #0
309bc     0C C9 BF FD | 	call	#_fatfs_cc_dir_sdi
309c0     3D AB 02 F6 | 	mov	local03, result1
309c4     44 00 90 FD | 	jmp	#LR__5182
309c8                 | LR__5180
309c8     53 93 02 F6 | 	mov	arg01, local01
309cc     00 94 06 F6 | 	mov	arg02, #0
309d0     98 D1 BF FD | 	call	#_fatfs_cc_dir_read
309d4     3D AB 02 F6 | 	mov	local03, result1
309d8     04 AA 0E F2 | 	cmp	local03, #4 wz
309dc     00 AA 06 A6 |  if_e	mov	local03, #0
309e0     00 AA 0E F2 | 	cmp	local03, #0 wz
309e4     24 00 90 5D |  if_ne	jmp	#LR__5181
309e8     53 93 02 F6 | 	mov	arg01, local01
309ec     54 95 02 F6 | 	mov	arg02, local02
309f0     E4 D8 BF FD | 	call	#_fatfs_cc_get_fileinfo
309f4     53 93 02 F6 | 	mov	arg01, local01
309f8     00 94 06 F6 | 	mov	arg02, #0
309fc     34 CA BF FD | 	call	#_fatfs_cc_dir_next
30a00     3D AB 02 F6 | 	mov	local03, result1
30a04     04 AA 0E F2 | 	cmp	local03, #4 wz
30a08     00 AA 06 A6 |  if_e	mov	local03, #0
30a0c                 | LR__5181
30a0c                 | LR__5182
30a0c                 | LR__5183
30a0c                 | ' 			}
30a0c                 | ' 			;
30a0c                 | ' 		}
30a0c                 | ' 	}
30a0c                 | ' 	return res ;
30a0c     55 7B 02 F6 | 	mov	result1, local03
30a10     E7 F0 03 F6 | 	mov	ptra, fp
30a14     F2 00 A0 FD | 	call	#popregs_
30a18                 | _fatfs_cc_f_readdir_ret
30a18     2D 00 64 FD | 	ret
30a1c                 | 
30a1c                 | _fatfs_cc_f_stat
30a1c     02 CA 05 F6 | 	mov	COUNT_, #2
30a20     E8 00 A0 FD | 	call	#pushregs_
30a24     40 F0 07 F1 | 	add	ptra, #64
30a28     04 CE 05 F1 | 	add	fp, #4
30a2c     E7 92 62 FC | 	wrlong	arg01, fp
30a30     4A A7 02 F6 | 	mov	local01, arg02
30a34     E7 92 02 F6 | 	mov	arg01, fp
30a38     0C CE 05 F1 | 	add	fp, #12
30a3c     E7 94 02 F6 | 	mov	arg02, fp
30a40     10 CE 85 F1 | 	sub	fp, #16
30a44     00 96 06 F6 | 	mov	arg03, #0
30a48     D8 E5 BF FD | 	call	#_fatfs_cc_mount_volume
30a4c     3D A9 0A F6 | 	mov	local02, result1 wz
30a50     4C 00 90 5D |  if_ne	jmp	#LR__5192
30a54     10 CE 05 F1 | 	add	fp, #16
30a58     E7 92 02 F6 | 	mov	arg01, fp
30a5c     0C CE 85 F1 | 	sub	fp, #12
30a60     E7 94 02 FB | 	rdlong	arg02, fp
30a64     04 CE 85 F1 | 	sub	fp, #4
30a68     1C E1 BF FD | 	call	#_fatfs_cc_follow_path
30a6c     3D A9 0A F6 | 	mov	local02, result1 wz
30a70     2C 00 90 5D |  if_ne	jmp	#LR__5191
30a74     3B CE 05 F1 | 	add	fp, #59
30a78     E7 96 C2 FA | 	rdbyte	arg03, fp
30a7c     3B CE 85 F1 | 	sub	fp, #59
30a80     80 96 CE F7 | 	test	arg03, #128 wz
30a84     06 A8 06 56 |  if_ne	mov	local02, #6
30a88     14 00 90 5D |  if_ne	jmp	#LR__5190
30a8c     00 A6 0E F2 | 	cmp	local01, #0 wz
30a90     E7 92 02 56 |  if_ne	mov	arg01, fp
30a94     10 92 06 51 |  if_ne	add	arg01, #16
30a98     53 95 02 56 |  if_ne	mov	arg02, local01
30a9c     38 D8 BF 5D |  if_ne	call	#_fatfs_cc_get_fileinfo
30aa0                 | LR__5190
30aa0                 | LR__5191
30aa0                 | LR__5192
30aa0                 | ' 			}
30aa0                 | ' 		}
30aa0                 | ' 		;
30aa0                 | ' 	}
30aa0                 | ' 
30aa0                 | ' 	return res ;
30aa0     54 7B 02 F6 | 	mov	result1, local02
30aa4     E7 F0 03 F6 | 	mov	ptra, fp
30aa8     F2 00 A0 FD | 	call	#popregs_
30aac                 | _fatfs_cc_f_stat_ret
30aac     2D 00 64 FD | 	ret
30ab0                 | 
30ab0                 | _fatfs_cc_f_unlink
30ab0     02 CA 05 F6 | 	mov	COUNT_, #2
30ab4     E8 00 A0 FD | 	call	#pushregs_
30ab8     74 F0 07 F1 | 	add	ptra, #116
30abc     04 CE 05 F1 | 	add	fp, #4
30ac0     E7 92 62 FC | 	wrlong	arg01, fp
30ac4     00 A6 06 F6 | 	mov	local01, #0
30ac8     E7 92 02 F6 | 	mov	arg01, fp
30acc     6C CE 05 F1 | 	add	fp, #108
30ad0     E7 94 02 F6 | 	mov	arg02, fp
30ad4     70 CE 85 F1 | 	sub	fp, #112
30ad8     02 96 06 F6 | 	mov	arg03, #2
30adc     44 E5 BF FD | 	call	#_fatfs_cc_mount_volume
30ae0     3D A9 0A F6 | 	mov	local02, result1 wz
30ae4     3C 01 90 5D |  if_ne	jmp	#LR__5208
30ae8     70 CE 05 F1 | 	add	fp, #112
30aec     E7 A8 02 FB | 	rdlong	local02, fp
30af0     64 CE 85 F1 | 	sub	fp, #100
30af4     E7 A8 62 FC | 	wrlong	local02, fp
30af8     E7 92 02 F6 | 	mov	arg01, fp
30afc     08 CE 85 F1 | 	sub	fp, #8
30b00     E7 94 02 FB | 	rdlong	arg02, fp
30b04     04 CE 85 F1 | 	sub	fp, #4
30b08     7C E0 BF FD | 	call	#_fatfs_cc_follow_path
30b0c     3D A9 0A F6 | 	mov	local02, result1 wz
30b10     10 01 90 5D |  if_ne	jmp	#LR__5207
30b14     37 CE 05 F1 | 	add	fp, #55
30b18     E7 7A C2 FA | 	rdbyte	result1, fp
30b1c     37 CE 85 F1 | 	sub	fp, #55
30b20     80 7A CE F7 | 	test	result1, #128 wz
30b24     06 A8 06 56 |  if_ne	mov	local02, #6
30b28     14 00 90 5D |  if_ne	jmp	#LR__5200
30b2c     12 CE 05 F1 | 	add	fp, #18
30b30     E7 7A C2 FA | 	rdbyte	result1, fp
30b34     12 CE 85 F1 | 	sub	fp, #18
30b38     01 7A CE F7 | 	test	result1, #1 wz
30b3c     07 A8 06 56 |  if_ne	mov	local02, #7
30b40                 | LR__5200
30b40     00 A8 0E F2 | 	cmp	local02, #0 wz
30b44     84 00 90 5D |  if_ne	jmp	#LR__5203
30b48     70 CE 05 F1 | 	add	fp, #112
30b4c     E7 92 02 FB | 	rdlong	arg01, fp
30b50     48 CE 85 F1 | 	sub	fp, #72
30b54     E7 94 02 FB | 	rdlong	arg02, fp
30b58     28 CE 85 F1 | 	sub	fp, #40
30b5c     40 CB BF FD | 	call	#_fatfs_cc_ld_clust
30b60     3D A7 02 F6 | 	mov	local01, result1
30b64     12 CE 05 F1 | 	add	fp, #18
30b68     E7 7A C2 FA | 	rdbyte	result1, fp
30b6c     12 CE 85 F1 | 	sub	fp, #18
30b70     10 7A CE F7 | 	test	result1, #16 wz
30b74     54 00 90 AD |  if_e	jmp	#LR__5202
30b78     70 CE 05 F1 | 	add	fp, #112
30b7c     E7 A8 02 FB | 	rdlong	local02, fp
30b80     34 CE 85 F1 | 	sub	fp, #52
30b84     E7 A8 62 FC | 	wrlong	local02, fp
30b88     08 CE 05 F1 | 	add	fp, #8
30b8c     E7 A6 62 FC | 	wrlong	local01, fp
30b90     08 CE 85 F1 | 	sub	fp, #8
30b94     E7 92 02 F6 | 	mov	arg01, fp
30b98     3C CE 85 F1 | 	sub	fp, #60
30b9c     00 94 06 F6 | 	mov	arg02, #0
30ba0     28 C7 BF FD | 	call	#_fatfs_cc_dir_sdi
30ba4     3D A9 0A F6 | 	mov	local02, result1 wz
30ba8     20 00 90 5D |  if_ne	jmp	#LR__5201
30bac     E7 92 02 F6 | 	mov	arg01, fp
30bb0     3C 92 06 F1 | 	add	arg01, #60
30bb4     00 94 06 F6 | 	mov	arg02, #0
30bb8     B0 CF BF FD | 	call	#_fatfs_cc_dir_read
30bbc     3D A9 0A F6 | 	mov	local02, result1 wz
30bc0     07 A8 06 A6 |  if_e	mov	local02, #7
30bc4     04 A8 0E F2 | 	cmp	local02, #4 wz
30bc8     00 A8 06 A6 |  if_e	mov	local02, #0
30bcc                 | LR__5201
30bcc                 | LR__5202
30bcc                 | LR__5203
30bcc     00 A8 0E F2 | 	cmp	local02, #0 wz
30bd0     50 00 90 5D |  if_ne	jmp	#LR__5206
30bd4     E7 92 02 F6 | 	mov	arg01, fp
30bd8     0C 92 06 F1 | 	add	arg01, #12
30bdc     30 D6 BF FD | 	call	#_fatfs_cc_dir_remove
30be0     3D A9 0A F6 | 	mov	local02, result1 wz
30be4     20 00 90 5D |  if_ne	jmp	#LR__5204
30be8     00 A6 0E F2 | 	cmp	local01, #0 wz
30bec     18 00 90 AD |  if_e	jmp	#LR__5204
30bf0     E7 92 02 F6 | 	mov	arg01, fp
30bf4     0C 92 06 F1 | 	add	arg01, #12
30bf8     53 95 02 F6 | 	mov	arg02, local01
30bfc     00 96 06 F6 | 	mov	arg03, #0
30c00     D0 C2 BF FD | 	call	#_fatfs_cc_remove_chain
30c04     3D A9 02 F6 | 	mov	local02, result1
30c08                 | LR__5204
30c08     00 A8 0E F2 | 	cmp	local02, #0 wz
30c0c     14 00 90 5D |  if_ne	jmp	#LR__5205
30c10     70 CE 05 F1 | 	add	fp, #112
30c14     E7 92 02 FB | 	rdlong	arg01, fp
30c18     70 CE 85 F1 | 	sub	fp, #112
30c1c     C0 BD BF FD | 	call	#_fatfs_cc_sync_fs
30c20     3D A9 02 F6 | 	mov	local02, result1
30c24                 | LR__5205
30c24                 | LR__5206
30c24                 | LR__5207
30c24                 | LR__5208
30c24                 | ' 			}
30c24                 | ' 		}
30c24                 | ' 		;
30c24                 | ' 	}
30c24                 | ' 
30c24                 | ' 	return res ;
30c24     54 7B 02 F6 | 	mov	result1, local02
30c28     E7 F0 03 F6 | 	mov	ptra, fp
30c2c     F2 00 A0 FD | 	call	#popregs_
30c30                 | _fatfs_cc_f_unlink_ret
30c30     2D 00 64 FD | 	ret
30c34                 | 
30c34                 | _fatfs_cc_f_mkdir
30c34     03 CA 05 F6 | 	mov	COUNT_, #3
30c38     E8 00 A0 FD | 	call	#pushregs_
30c3c     5C F0 07 F1 | 	add	ptra, #92
30c40     04 CE 05 F1 | 	add	fp, #4
30c44     E7 92 62 FC | 	wrlong	arg01, fp
30c48     E7 92 02 F6 | 	mov	arg01, fp
30c4c     48 CE 05 F1 | 	add	fp, #72
30c50     E7 94 02 F6 | 	mov	arg02, fp
30c54     4C CE 85 F1 | 	sub	fp, #76
30c58     02 96 06 F6 | 	mov	arg03, #2
30c5c     C4 E3 BF FD | 	call	#_fatfs_cc_mount_volume
30c60     3D A7 0A F6 | 	mov	local01, result1 wz
30c64     FC 01 90 5D |  if_ne	jmp	#LR__5215
30c68     4C CE 05 F1 | 	add	fp, #76
30c6c     E7 A6 02 FB | 	rdlong	local01, fp
30c70     40 CE 85 F1 | 	sub	fp, #64
30c74     E7 A6 62 FC | 	wrlong	local01, fp
30c78     E7 92 02 F6 | 	mov	arg01, fp
30c7c     08 CE 85 F1 | 	sub	fp, #8
30c80     E7 94 02 FB | 	rdlong	arg02, fp
30c84     04 CE 85 F1 | 	sub	fp, #4
30c88     FC DE BF FD | 	call	#_fatfs_cc_follow_path
30c8c     3D A7 0A F6 | 	mov	local01, result1 wz
30c90     08 A6 06 A6 |  if_e	mov	local01, #8
30c94     04 A6 0E F2 | 	cmp	local01, #4 wz
30c98     C8 01 90 5D |  if_ne	jmp	#LR__5214
30c9c     4C CE 05 F1 | 	add	fp, #76
30ca0     E7 A6 02 FB | 	rdlong	local01, fp
30ca4     10 CE 85 F1 | 	sub	fp, #16
30ca8     E7 A6 62 FC | 	wrlong	local01, fp
30cac     E7 92 02 F6 | 	mov	arg01, fp
30cb0     3C CE 85 F1 | 	sub	fp, #60
30cb4     00 94 06 F6 | 	mov	arg02, #0
30cb8     2C C3 BF FD | 	call	#_fatfs_cc_create_chain
30cbc     3D A9 0A F6 | 	mov	local02, result1 wz
30cc0     00 A6 06 F6 | 	mov	local01, #0
30cc4     07 A6 06 A6 |  if_e	mov	local01, #7
30cc8     01 A8 0E F2 | 	cmp	local02, #1 wz
30ccc     02 A6 06 A6 |  if_e	mov	local01, #2
30cd0     FF FF 7F FF 
30cd4     FF A9 0E F2 | 	cmp	local02, ##-1 wz
30cd8     01 A6 06 A6 |  if_e	mov	local01, #1
30cdc     8C 06 B0 FD | 	call	#_fatfs_cc__get_fattime
30ce0     3D AB 02 F6 | 	mov	local03, result1
30ce4     00 A6 0E F2 | 	cmp	local01, #0 wz
30ce8     EC 00 90 5D |  if_ne	jmp	#LR__5211
30cec     4C CE 05 F1 | 	add	fp, #76
30cf0     E7 92 02 FB | 	rdlong	arg01, fp
30cf4     4C CE 85 F1 | 	sub	fp, #76
30cf8     54 95 02 F6 | 	mov	arg02, local02
30cfc     0C C5 BF FD | 	call	#_fatfs_cc_dir_clear
30d00     3D A7 0A F6 | 	mov	local01, result1 wz
30d04     D0 00 90 5D |  if_ne	jmp	#LR__5210
30d08     4C CE 05 F1 | 	add	fp, #76
30d0c     E7 92 02 FB | 	rdlong	arg01, fp
30d10     4C CE 85 F1 | 	sub	fp, #76
30d14     34 92 06 F1 | 	add	arg01, #52
30d18     20 94 06 F6 | 	mov	arg02, #32
30d1c     0B 96 06 F6 | 	mov	arg03, #11
30d20     D8 00 A0 FD | 	call	#\builtin_bytefill_
30d24     4C CE 05 F1 | 	add	fp, #76
30d28     E7 A6 02 FB | 	rdlong	local01, fp
30d2c     34 A6 06 F1 | 	add	local01, #52
30d30     53 5D 48 FC | 	wrbyte	#46, local01
30d34     E7 A6 02 FB | 	rdlong	local01, fp
30d38     3F A6 06 F1 | 	add	local01, #63
30d3c     53 21 48 FC | 	wrbyte	#16, local01
30d40     E7 92 02 FB | 	rdlong	arg01, fp
30d44     4A 92 06 F1 | 	add	arg01, #74
30d48     49 AB 62 FC | 	wrlong	local03, arg01
30d4c     E7 94 02 FB | 	rdlong	arg02, fp
30d50     4A 93 02 F6 | 	mov	arg01, arg02
30d54     4C CE 85 F1 | 	sub	fp, #76
30d58     34 94 06 F1 | 	add	arg02, #52
30d5c     54 97 02 F6 | 	mov	arg03, local02
30d60     70 C9 BF FD | 	call	#_fatfs_cc_st_clust
30d64     4C CE 05 F1 | 	add	fp, #76
30d68     E7 94 02 FB | 	rdlong	arg02, fp
30d6c     4A 93 02 F6 | 	mov	arg01, arg02
30d70     54 92 06 F1 | 	add	arg01, #84
30d74     4C CE 85 F1 | 	sub	fp, #76
30d78     34 94 06 F1 | 	add	arg02, #52
30d7c     20 96 06 F6 | 	mov	arg03, #32
30d80     E4 3A BF FD | 	call	#__system____builtin_memmove
30d84     4C CE 05 F1 | 	add	fp, #76
30d88     E7 A6 02 FB | 	rdlong	local01, fp
30d8c     55 A6 06 F1 | 	add	local01, #85
30d90     53 5D 48 FC | 	wrbyte	#46, local01
30d94     38 CE 85 F1 | 	sub	fp, #56
30d98     E7 96 02 FB | 	rdlong	arg03, fp
30d9c     38 CE 05 F1 | 	add	fp, #56
30da0     E7 94 02 FB | 	rdlong	arg02, fp
30da4     4A 93 02 F6 | 	mov	arg01, arg02
30da8     4C CE 85 F1 | 	sub	fp, #76
30dac     54 94 06 F1 | 	add	arg02, #84
30db0     20 C9 BF FD | 	call	#_fatfs_cc_st_clust
30db4     4C CE 05 F1 | 	add	fp, #76
30db8     E7 A6 02 FB | 	rdlong	local01, fp
30dbc     4C CE 85 F1 | 	sub	fp, #76
30dc0     03 A6 06 F1 | 	add	local01, #3
30dc4     53 03 48 FC | 	wrbyte	#1, local01
30dc8     E7 92 02 F6 | 	mov	arg01, fp
30dcc     0C 92 06 F1 | 	add	arg01, #12
30dd0     D8 D1 BF FD | 	call	#_fatfs_cc_dir_register
30dd4     3D A7 02 F6 | 	mov	local01, result1
30dd8                 | LR__5210
30dd8                 | LR__5211
30dd8     00 A6 0E F2 | 	cmp	local01, #0 wz
30ddc     70 00 90 5D |  if_ne	jmp	#LR__5212
30de0     28 CE 05 F1 | 	add	fp, #40
30de4     E7 92 02 FB | 	rdlong	arg01, fp
30de8     16 92 06 F1 | 	add	arg01, #22
30dec     49 AB 62 FC | 	wrlong	local03, arg01
30df0     24 CE 05 F1 | 	add	fp, #36
30df4     E7 92 02 FB | 	rdlong	arg01, fp
30df8     24 CE 85 F1 | 	sub	fp, #36
30dfc     E7 94 02 FB | 	rdlong	arg02, fp
30e00     28 CE 85 F1 | 	sub	fp, #40
30e04     54 97 02 F6 | 	mov	arg03, local02
30e08     C8 C8 BF FD | 	call	#_fatfs_cc_st_clust
30e0c     28 CE 05 F1 | 	add	fp, #40
30e10     E7 AA 02 FB | 	rdlong	local03, fp
30e14     0B AA 06 F1 | 	add	local03, #11
30e18     55 21 48 FC | 	wrbyte	#16, local03
30e1c     24 CE 05 F1 | 	add	fp, #36
30e20     E7 AA 02 FB | 	rdlong	local03, fp
30e24     4C CE 85 F1 | 	sub	fp, #76
30e28     03 AA 06 F1 | 	add	local03, #3
30e2c     55 03 48 FC | 	wrbyte	#1, local03
30e30     00 A6 0E F2 | 	cmp	local01, #0 wz
30e34     2C 00 90 5D |  if_ne	jmp	#LR__5213
30e38     4C CE 05 F1 | 	add	fp, #76
30e3c     E7 92 02 FB | 	rdlong	arg01, fp
30e40     4C CE 85 F1 | 	sub	fp, #76
30e44     98 BB BF FD | 	call	#_fatfs_cc_sync_fs
30e48     3D A7 02 F6 | 	mov	local01, result1
30e4c     14 00 90 FD | 	jmp	#LR__5213
30e50                 | LR__5212
30e50     E7 92 02 F6 | 	mov	arg01, fp
30e54     3C 92 06 F1 | 	add	arg01, #60
30e58     54 95 02 F6 | 	mov	arg02, local02
30e5c     00 96 06 F6 | 	mov	arg03, #0
30e60     70 C0 BF FD | 	call	#_fatfs_cc_remove_chain
30e64                 | LR__5213
30e64                 | LR__5214
30e64                 | LR__5215
30e64                 | ' 				remove_chain(&sobj, dcl, 0);
30e64                 | ' 			}
30e64                 | ' 		}
30e64                 | ' 		;
30e64                 | ' 	}
30e64                 | ' 
30e64                 | ' 	return res ;
30e64     53 7B 02 F6 | 	mov	result1, local01
30e68     E7 F0 03 F6 | 	mov	ptra, fp
30e6c     F2 00 A0 FD | 	call	#popregs_
30e70                 | _fatfs_cc_f_mkdir_ret
30e70     2D 00 64 FD | 	ret
30e74                 | 
30e74                 | _fatfs_cc_f_rename
30e74     03 CA 05 F6 | 	mov	COUNT_, #3
30e78     E8 00 A0 FD | 	call	#pushregs_
30e7c     9C F0 07 F1 | 	add	ptra, #156
30e80     04 CE 05 F1 | 	add	fp, #4
30e84     E7 92 62 FC | 	wrlong	arg01, fp
30e88     04 CE 05 F1 | 	add	fp, #4
30e8c     E7 94 62 FC | 	wrlong	arg02, fp
30e90     E7 92 02 F6 | 	mov	arg01, fp
30e94     08 CE 85 F1 | 	sub	fp, #8
30e98     4C DE BF FD | 	call	#_fatfs_cc_get_ldnumber
30e9c     04 CE 05 F1 | 	add	fp, #4
30ea0     E7 92 02 F6 | 	mov	arg01, fp
30ea4     6C CE 05 F1 | 	add	fp, #108
30ea8     E7 94 02 F6 | 	mov	arg02, fp
30eac     70 CE 85 F1 | 	sub	fp, #112
30eb0     02 96 06 F6 | 	mov	arg03, #2
30eb4     6C E1 BF FD | 	call	#_fatfs_cc_mount_volume
30eb8     3D A7 0A F6 | 	mov	local01, result1 wz
30ebc     68 02 90 5D |  if_ne	jmp	#LR__5232
30ec0     70 CE 05 F1 | 	add	fp, #112
30ec4     E7 A8 02 FB | 	rdlong	local02, fp
30ec8     60 CE 85 F1 | 	sub	fp, #96
30ecc     E7 A8 62 FC | 	wrlong	local02, fp
30ed0     E7 92 02 F6 | 	mov	arg01, fp
30ed4     0C CE 85 F1 | 	sub	fp, #12
30ed8     E7 94 02 FB | 	rdlong	arg02, fp
30edc     04 CE 85 F1 | 	sub	fp, #4
30ee0     A4 DC BF FD | 	call	#_fatfs_cc_follow_path
30ee4     3D A7 0A F6 | 	mov	local01, result1 wz
30ee8     14 00 90 5D |  if_ne	jmp	#LR__5220
30eec     3B CE 05 F1 | 	add	fp, #59
30ef0     E7 A8 C2 FA | 	rdbyte	local02, fp
30ef4     3B CE 85 F1 | 	sub	fp, #59
30ef8     A0 A8 CE F7 | 	test	local02, #160 wz
30efc     06 A6 06 56 |  if_ne	mov	local01, #6
30f00                 | LR__5220
30f00     00 A6 0E F2 | 	cmp	local01, #0 wz
30f04     20 02 90 5D |  if_ne	jmp	#LR__5231
30f08     74 CE 05 F1 | 	add	fp, #116
30f0c     E7 92 02 F6 | 	mov	arg01, fp
30f10     48 CE 85 F1 | 	sub	fp, #72
30f14     E7 94 02 FB | 	rdlong	arg02, fp
30f18     2C CE 85 F1 | 	sub	fp, #44
30f1c     20 96 06 F6 | 	mov	arg03, #32
30f20     44 39 BF FD | 	call	#__system____builtin_memmove
30f24     40 CE 05 F1 | 	add	fp, #64
30f28     E7 92 02 F6 | 	mov	arg01, fp
30f2c     30 CE 85 F1 | 	sub	fp, #48
30f30     E7 94 02 F6 | 	mov	arg02, fp
30f34     10 CE 85 F1 | 	sub	fp, #16
30f38     30 96 06 F6 | 	mov	arg03, #48
30f3c     28 39 BF FD | 	call	#__system____builtin_memmove
30f40     40 CE 05 F1 | 	add	fp, #64
30f44     E7 92 02 F6 | 	mov	arg01, fp
30f48     38 CE 85 F1 | 	sub	fp, #56
30f4c     E7 94 02 FB | 	rdlong	arg02, fp
30f50     08 CE 85 F1 | 	sub	fp, #8
30f54     30 DC BF FD | 	call	#_fatfs_cc_follow_path
30f58     3D A7 0A F6 | 	mov	local01, result1 wz
30f5c     44 00 90 5D |  if_ne	jmp	#LR__5223
30f60     48 CE 05 F1 | 	add	fp, #72
30f64     E7 A6 02 FB | 	rdlong	local01, fp
30f68     30 CE 85 F1 | 	sub	fp, #48
30f6c     E7 7A 02 FB | 	rdlong	result1, fp
30f70     18 CE 85 F1 | 	sub	fp, #24
30f74     3D A7 0A F2 | 	cmp	local01, result1 wz
30f78     20 00 90 5D |  if_ne	jmp	#LR__5221
30f7c     50 CE 05 F1 | 	add	fp, #80
30f80     E7 A6 02 FB | 	rdlong	local01, fp
30f84     30 CE 85 F1 | 	sub	fp, #48
30f88     E7 7A 02 FB | 	rdlong	result1, fp
30f8c     20 CE 85 F1 | 	sub	fp, #32
30f90     3D A7 0A F2 | 	cmp	local01, result1 wz
30f94     04 A8 06 A6 |  if_e	mov	local02, #4
30f98     04 00 90 AD |  if_e	jmp	#LR__5222
30f9c                 | LR__5221
30f9c     08 A8 06 F6 | 	mov	local02, #8
30fa0                 | LR__5222
30fa0     54 A7 02 F6 | 	mov	local01, local02
30fa4                 | LR__5223
30fa4     04 A6 0E F2 | 	cmp	local01, #4 wz
30fa8     4C 01 90 5D |  if_ne	jmp	#LR__5228
30fac     E7 92 02 F6 | 	mov	arg01, fp
30fb0     40 92 06 F1 | 	add	arg01, #64
30fb4     F4 CF BF FD | 	call	#_fatfs_cc_dir_register
30fb8     3D A7 0A F6 | 	mov	local01, result1 wz
30fbc     38 01 90 5D |  if_ne	jmp	#LR__5227
30fc0     5C CE 05 F1 | 	add	fp, #92
30fc4     E7 AA 02 FB | 	rdlong	local03, fp
30fc8     55 93 02 F6 | 	mov	arg01, local03
30fcc     0D 92 06 F1 | 	add	arg01, #13
30fd0     18 CE 05 F1 | 	add	fp, #24
30fd4     E7 94 02 F6 | 	mov	arg02, fp
30fd8     74 CE 85 F1 | 	sub	fp, #116
30fdc     0D 94 06 F1 | 	add	arg02, #13
30fe0     13 96 06 F6 | 	mov	arg03, #19
30fe4     80 38 BF FD | 	call	#__system____builtin_memmove
30fe8     7F CE 05 F1 | 	add	fp, #127
30fec     E7 A8 C2 FA | 	rdbyte	local02, fp
30ff0     0B AA 06 F1 | 	add	local03, #11
30ff4     55 A9 42 FC | 	wrbyte	local02, local03
30ff8     54 A9 E2 F8 | 	getbyte	local02, local02, #0
30ffc     0B AA 86 F1 | 	sub	local03, #11
31000     10 A8 CE F7 | 	test	local02, #16 wz
31004     0B AA 06 A1 |  if_e	add	local03, #11
31008     55 A9 C2 AA |  if_e	rdbyte	local02, local03
3100c     20 A8 46 A5 |  if_e	or	local02, #32
31010     55 A9 42 AC |  if_e	wrbyte	local02, local03
31014     0B AA 86 A1 |  if_e	sub	local03, #11
31018     0F CE 85 F1 | 	sub	fp, #15
3101c     E7 A8 02 FB | 	rdlong	local02, fp
31020     70 CE 85 F1 | 	sub	fp, #112
31024     03 A8 06 F1 | 	add	local02, #3
31028     54 03 48 FC | 	wrbyte	#1, local02
3102c     0B AA 06 F1 | 	add	local03, #11
31030     55 A9 C2 FA | 	rdbyte	local02, local03
31034     0B AA 86 F1 | 	sub	local03, #11
31038     10 A8 CE F7 | 	test	local02, #16 wz
3103c     B8 00 90 AD |  if_e	jmp	#LR__5226
31040     18 CE 05 F1 | 	add	fp, #24
31044     E7 A8 02 FB | 	rdlong	local02, fp
31048     30 CE 05 F1 | 	add	fp, #48
3104c     E7 96 02 FB | 	rdlong	arg03, fp
31050     48 CE 85 F1 | 	sub	fp, #72
31054     4B A9 0A F2 | 	cmp	local02, arg03 wz
31058     9C 00 90 AD |  if_e	jmp	#LR__5226
3105c     70 CE 05 F1 | 	add	fp, #112
31060     E7 92 02 FB | 	rdlong	arg01, fp
31064     49 A9 02 F6 | 	mov	local02, arg01
31068     70 CE 85 F1 | 	sub	fp, #112
3106c     55 95 02 F6 | 	mov	arg02, local03
31070     2C C6 BF FD | 	call	#_fatfs_cc_ld_clust
31074     3D 95 02 F6 | 	mov	arg02, result1
31078     54 93 02 F6 | 	mov	arg01, local02
3107c     60 BA BF FD | 	call	#_fatfs_cc_clst2sect
31080     3D AB 0A F6 | 	mov	local03, result1 wz
31084     02 A6 06 A6 |  if_e	mov	local01, #2
31088     6C 00 90 AD |  if_e	jmp	#LR__5225
3108c     70 CE 05 F1 | 	add	fp, #112
31090     E7 92 02 FB | 	rdlong	arg01, fp
31094     70 CE 85 F1 | 	sub	fp, #112
31098     55 95 02 F6 | 	mov	arg02, local03
3109c     C8 B8 BF FD | 	call	#_fatfs_cc_move_window
310a0     3D A7 0A F6 | 	mov	local01, result1 wz
310a4     70 CE 05 F1 | 	add	fp, #112
310a8     E7 AA 02 FB | 	rdlong	local03, fp
310ac     70 CE 85 F1 | 	sub	fp, #112
310b0     54 AA 06 F1 | 	add	local03, #84
310b4     01 AA 06 A1 |  if_e	add	local03, #1
310b8     55 A9 C2 AA |  if_e	rdbyte	local02, local03
310bc     01 AA 86 A1 |  if_e	sub	local03, #1
310c0     2E A8 0E A2 |  if_e	cmp	local02, #46 wz
310c4     30 00 90 5D |  if_ne	jmp	#LR__5224
310c8     70 CE 05 F1 | 	add	fp, #112
310cc     E7 92 02 FB | 	rdlong	arg01, fp
310d0     28 CE 85 F1 | 	sub	fp, #40
310d4     E7 96 02 FB | 	rdlong	arg03, fp
310d8     48 CE 85 F1 | 	sub	fp, #72
310dc     55 95 02 F6 | 	mov	arg02, local03
310e0     F0 C5 BF FD | 	call	#_fatfs_cc_st_clust
310e4     70 CE 05 F1 | 	add	fp, #112
310e8     E7 A8 02 FB | 	rdlong	local02, fp
310ec     70 CE 85 F1 | 	sub	fp, #112
310f0     03 A8 06 F1 | 	add	local02, #3
310f4     54 03 48 FC | 	wrbyte	#1, local02
310f8                 | LR__5224
310f8                 | LR__5225
310f8                 | LR__5226
310f8                 | LR__5227
310f8                 | LR__5228
310f8     00 A6 0E F2 | 	cmp	local01, #0 wz
310fc     28 00 90 5D |  if_ne	jmp	#LR__5230
31100     E7 92 02 F6 | 	mov	arg01, fp
31104     10 92 06 F1 | 	add	arg01, #16
31108     04 D1 BF FD | 	call	#_fatfs_cc_dir_remove
3110c     3D A7 0A F6 | 	mov	local01, result1 wz
31110     14 00 90 5D |  if_ne	jmp	#LR__5229
31114     70 CE 05 F1 | 	add	fp, #112
31118     E7 92 02 FB | 	rdlong	arg01, fp
3111c     70 CE 85 F1 | 	sub	fp, #112
31120     BC B8 BF FD | 	call	#_fatfs_cc_sync_fs
31124     3D A7 02 F6 | 	mov	local01, result1
31128                 | LR__5229
31128                 | LR__5230
31128                 | LR__5231
31128                 | LR__5232
31128                 | ' 					res = sync_fs(fs);
31128                 | ' 				}
31128                 | ' 			}
31128                 | ' 
31128                 | ' 		}
31128                 | ' 		;
31128                 | ' 	}
31128                 | ' 
31128                 | ' 	return res ;
31128     53 7B 02 F6 | 	mov	result1, local01
3112c     E7 F0 03 F6 | 	mov	ptra, fp
31130     F2 00 A0 FD | 	call	#popregs_
31134                 | _fatfs_cc_f_rename_ret
31134     2D 00 64 FD | 	ret
31138                 | 
31138                 | _fatfs_cc___default_flush
31138     07 CA 05 F6 | 	mov	COUNT_, #7
3113c     E8 00 A0 FD | 	call	#pushregs_
31140     49 A7 02 F6 | 	mov	local01, arg01
31144     53 A9 02 FB | 	rdlong	local02, local01
31148     54 AB 02 FB | 	rdlong	local03, local02
3114c     08 A6 06 F1 | 	add	local01, #8
31150     53 7D 02 FB | 	rdlong	result2, local01
31154     08 A6 86 F1 | 	sub	local01, #8
31158     08 7C CE F7 | 	test	result2, #8 wz
3115c     D4 00 90 AD |  if_e	jmp	#LR__5242
31160     01 AA 56 F2 | 	cmps	local03, #1 wc
31164     2C 01 90 CD |  if_b	jmp	#LR__5244
31168     08 A6 06 F1 | 	add	local01, #8
3116c     53 7D 02 FB | 	rdlong	result2, local01
31170     08 A6 86 F1 | 	sub	local01, #8
31174     80 7C CE F7 | 	test	result2, #128 wz
31178     6C 00 90 AD |  if_e	jmp	#LR__5241
3117c     08 A6 06 F1 | 	add	local01, #8
31180     53 97 02 FB | 	rdlong	arg03, local01
31184     08 A6 86 F1 | 	sub	local01, #8
31188     00 97 CE F7 | 	test	arg03, #256 wz
3118c     58 00 90 AD |  if_e	jmp	#LR__5240
31190     30 A6 06 F1 | 	add	local01, #48
31194     53 AD 02 FB | 	rdlong	local04, local01
31198     56 AF 02 F6 | 	mov	local05, local04
3119c     30 A6 86 F1 | 	sub	local01, #48
311a0     13 AE 46 F7 | 	zerox	local05, #19
311a4     14 AC 46 F0 | 	shr	local04, #20
311a8     02 AC 66 F0 | 	shl	local04, #2
311ac     2D AD 02 F1 | 	add	local04, __methods__
311b0     56 AD 02 FB | 	rdlong	local04, local04
311b4     53 93 02 F6 | 	mov	arg01, local01
311b8     00 94 06 F6 | 	mov	arg02, #0
311bc     00 96 06 F6 | 	mov	arg03, #0
311c0     02 98 06 F6 | 	mov	arg04, #2
311c4     32 B1 02 F6 | 	mov	local06, objptr
311c8     57 65 02 F6 | 	mov	objptr, local05
311cc     2D AC 62 FD | 	call	local04
311d0     58 65 02 F6 | 	mov	objptr, local06
311d4     08 A6 06 F1 | 	add	local01, #8
311d8     53 B1 02 FB | 	rdlong	local06, local01
311dc     00 B1 26 F5 | 	andn	local06, #256
311e0     53 B1 62 FC | 	wrlong	local06, local01
311e4     08 A6 86 F1 | 	sub	local01, #8
311e8                 | LR__5240
311e8                 | LR__5241
311e8     18 A6 06 F1 | 	add	local01, #24
311ec     53 AD 02 FB | 	rdlong	local04, local01
311f0     56 AF 02 F6 | 	mov	local05, local04
311f4     18 A6 86 F1 | 	sub	local01, #24
311f8     13 AE 46 F7 | 	zerox	local05, #19
311fc     14 AC 46 F0 | 	shr	local04, #20
31200     02 AC 66 F0 | 	shl	local04, #2
31204     2D AD 02 F1 | 	add	local04, __methods__
31208     56 AD 02 FB | 	rdlong	local04, local04
3120c     0C A8 06 F1 | 	add	local02, #12
31210     54 95 02 FB | 	rdlong	arg02, local02
31214     0C A8 86 F1 | 	sub	local02, #12
31218     53 93 02 F6 | 	mov	arg01, local01
3121c     55 97 02 F6 | 	mov	arg03, local03
31220     32 B1 02 F6 | 	mov	local06, objptr
31224     57 65 02 F6 | 	mov	objptr, local05
31228     2D AC 62 FD | 	call	local04
3122c     58 65 02 F6 | 	mov	objptr, local06
31230     60 00 90 FD | 	jmp	#LR__5244
31234                 | LR__5242
31234     08 A6 06 F1 | 	add	local01, #8
31238     53 B1 02 FB | 	rdlong	local06, local01
3123c     08 A6 86 F1 | 	sub	local01, #8
31240     04 B0 CE F7 | 	test	local06, #4 wz
31244     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
31248     48 00 90 AD |  if_e	jmp	#LR__5243
3124c     55 95 62 F6 | 	neg	arg02, local03
31250     4A 97 02 F6 | 	mov	arg03, arg02
31254     1F 96 C6 F0 | 	sar	arg03, #31
31258     30 A6 06 F1 | 	add	local01, #48
3125c     53 AD 02 FB | 	rdlong	local04, local01
31260     56 AF 02 F6 | 	mov	local05, local04
31264     30 A6 86 F1 | 	sub	local01, #48
31268     13 AE 46 F7 | 	zerox	local05, #19
3126c     14 AC 46 F0 | 	shr	local04, #20
31270     02 AC 66 F0 | 	shl	local04, #2
31274     2D AD 02 F1 | 	add	local04, __methods__
31278     56 AD 02 FB | 	rdlong	local04, local04
3127c     53 93 02 F6 | 	mov	arg01, local01
31280     01 98 06 F6 | 	mov	arg04, #1
31284     32 B1 02 F6 | 	mov	local06, objptr
31288     57 65 02 F6 | 	mov	objptr, local05
3128c     2D AC 62 FD | 	call	local04
31290     58 65 02 F6 | 	mov	objptr, local06
31294                 | LR__5243
31294                 | LR__5244
31294     54 01 68 FC | 	wrlong	#0, local02
31298     04 A8 06 F1 | 	add	local02, #4
3129c     54 01 68 FC | 	wrlong	#0, local02
312a0     08 A6 06 F1 | 	add	local01, #8
312a4     53 B3 02 FB | 	rdlong	local07, local01
312a8     0C B2 26 F5 | 	andn	local07, #12
312ac     53 B3 62 FC | 	wrlong	local07, local01
312b0                 | '     }
312b0                 | '     b->cnt = 0;
312b0                 | '     b->ptr = 0;
312b0                 | '     f->state &= ~( (0x08) | (0x04) );
312b0                 | '     return 0;
312b0     00 7A 06 F6 | 	mov	result1, #0
312b4     E7 F0 03 F6 | 	mov	ptra, fp
312b8     F2 00 A0 FD | 	call	#popregs_
312bc                 | _fatfs_cc___default_flush_ret
312bc     2D 00 64 FD | 	ret
312c0                 | 
312c0                 | _fatfs_cc_getenv
312c0     06 CA 05 F6 | 	mov	COUNT_, #6
312c4     E8 00 A0 FD | 	call	#pushregs_
312c8     49 A7 02 F6 | 	mov	local01, arg01
312cc     49 A9 02 F6 | 	mov	local02, arg01
312d0     D7 06 48 FB | 	callpa	#(@LR__5251-@LR__5250)>>2,fcache_load_ptr_
312d4                 | LR__5250
312d4     54 7B CA FA | 	rdbyte	result1, local02 wz
312d8     01 A8 06 51 |  if_ne	add	local02, #1
312dc     F4 FF 9F 5D |  if_ne	jmp	#LR__5250
312e0                 | LR__5251
312e0     49 A9 82 F1 | 	sub	local02, arg01
312e4     54 7B 02 F6 | 	mov	result1, local02
312e8     02 00 00 FF 
312ec     FC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
312f0     36 97 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
312f4     02 00 00 FF 
312f8     FC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
312fc                 | '             return 0;
312fc     00 7A 06 A6 |  if_e	mov	result1, #0
31300     5C 00 90 AD |  if_e	jmp	#LR__5254
31304                 | ' 
31304                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
31304     02 00 00 FF 
31308     FC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
3130c     36 AB 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
31310     02 00 00 FF 
31314     FC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
31318                 | LR__5252
31318     55 AD 0A FB | 	rdlong	local04, local03 wz
3131c     3C 00 90 AD |  if_e	jmp	#LR__5253
31320     56 93 02 F6 | 	mov	arg01, local04
31324     53 95 02 F6 | 	mov	arg02, local01
31328     54 97 02 F6 | 	mov	arg03, local02
3132c     24 AB BF FD | 	call	#_fatfs_cc_strncmp
31330     00 7A 0E F2 | 	cmp	result1, #0 wz
31334     54 AF 02 A6 |  if_e	mov	local05, local02
31338     56 AF 02 A1 |  if_e	add	local05, local04
3133c     57 B1 C2 AA |  if_e	rdbyte	local06, local05
31340     3D B0 0E A2 |  if_e	cmp	local06, #61 wz
31344                 | ' 			return name+len+1;
31344     54 AD 02 A1 |  if_e	add	local04, local02
31348     01 AC 06 A1 |  if_e	add	local04, #1
3134c     56 7B 02 A6 |  if_e	mov	result1, local04
31350     0C 00 90 AD |  if_e	jmp	#LR__5254
31354     04 AA 06 F1 | 	add	local03, #4
31358     BC FF 9F FD | 	jmp	#LR__5252
3135c                 | LR__5253
3135c                 | ' 	}
3135c                 | ' 	return 0;
3135c     00 7A 06 F6 | 	mov	result1, #0
31360                 | LR__5254
31360     E7 F0 03 F6 | 	mov	ptra, fp
31364     F2 00 A0 FD | 	call	#popregs_
31368                 | _fatfs_cc_getenv_ret
31368     2D 00 64 FD | 	ret
3136c                 | 
3136c                 | _fatfs_cc__get_fattime
3136c     00 CA 05 F6 | 	mov	COUNT_, #0
31370     E8 00 A0 FD | 	call	#pushregs_
31374     34 F0 07 F1 | 	add	ptra, #52
31378     00 92 06 F6 | 	mov	arg01, #0
3137c     A4 AB BF FD | 	call	#_fatfs_cc_time
31380     04 CE 05 F1 | 	add	fp, #4
31384     E7 7A 62 FC | 	wrlong	result1, fp
31388     E7 92 02 F6 | 	mov	arg01, fp
3138c     0C CE 05 F1 | 	add	fp, #12
31390     E7 94 02 F6 | 	mov	arg02, fp
31394     10 CE 85 F1 | 	sub	fp, #16
31398     70 AD BF FD | 	call	#_fatfs_cc__gmtime_r
3139c     24 CE 05 F1 | 	add	fp, #36
313a0     E7 7A 02 FB | 	rdlong	result1, fp
313a4     50 7A 86 F1 | 	sub	result1, #80
313a8     09 7A 66 F0 | 	shl	result1, #9
313ac     04 CE 85 F1 | 	sub	fp, #4
313b0     E7 94 02 FB | 	rdlong	arg02, fp
313b4     01 94 06 F1 | 	add	arg02, #1
313b8     05 94 66 F0 | 	shl	arg02, #5
313bc     4A 7B 42 F5 | 	or	result1, arg02
313c0     04 CE 85 F1 | 	sub	fp, #4
313c4     E7 94 02 FB | 	rdlong	arg02, fp
313c8     4A 7B 42 F5 | 	or	result1, arg02
313cc     04 CE 85 F1 | 	sub	fp, #4
313d0     E7 94 02 FB | 	rdlong	arg02, fp
313d4     0B 94 66 F0 | 	shl	arg02, #11
313d8     04 CE 85 F1 | 	sub	fp, #4
313dc     E7 92 02 FB | 	rdlong	arg01, fp
313e0     05 92 66 F0 | 	shl	arg01, #5
313e4     49 95 42 F5 | 	or	arg02, arg01
313e8     04 CE 85 F1 | 	sub	fp, #4
313ec     E7 92 02 FB | 	rdlong	arg01, fp
313f0     10 CE 85 F1 | 	sub	fp, #16
313f4     49 95 42 F5 | 	or	arg02, arg01
313f8                 | ' 
313f8                 | '     now = time(0);
313f8                 | '     _gmtime_r (&now, &date);
313f8                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
313f8                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
313f8                 | '     return (ffdate << 16) | fftime;
313f8     10 7A 66 F0 | 	shl	result1, #16
313fc     4A 7B 42 F5 | 	or	result1, arg02
31400     E7 F0 03 F6 | 	mov	ptra, fp
31404     F2 00 A0 FD | 	call	#popregs_
31408                 | _fatfs_cc__get_fattime_ret
31408     2D 00 64 FD | 	ret
3140c                 | 
3140c                 | _fatfs_cc_unixtime_1154
3140c     02 CA 05 F6 | 	mov	COUNT_, #2
31410     E8 00 A0 FD | 	call	#pushregs_
31414     34 F0 07 F1 | 	add	ptra, #52
31418     49 A7 02 F6 | 	mov	local01, arg01
3141c     09 A6 46 F0 | 	shr	local01, #9
31420     7F A6 06 F5 | 	and	local01, #127
31424     50 A8 06 F6 | 	mov	local02, #80
31428     53 A9 02 F1 | 	add	local02, local01
3142c     24 CE 05 F1 | 	add	fp, #36
31430     E7 A8 62 FC | 	wrlong	local02, fp
31434     49 A9 02 F6 | 	mov	local02, arg01
31438     05 A8 46 F0 | 	shr	local02, #5
3143c     54 A9 42 F8 | 	getnib	local02, local02, #0
31440     01 A8 86 F1 | 	sub	local02, #1
31444     04 CE 85 F1 | 	sub	fp, #4
31448     E7 A8 62 FC | 	wrlong	local02, fp
3144c     1F 92 06 F5 | 	and	arg01, #31
31450     04 CE 85 F1 | 	sub	fp, #4
31454     E7 92 62 FC | 	wrlong	arg01, fp
31458     4A A9 02 F6 | 	mov	local02, arg02
3145c     0B A8 46 F0 | 	shr	local02, #11
31460     1F A8 06 F5 | 	and	local02, #31
31464     04 CE 85 F1 | 	sub	fp, #4
31468     E7 A8 62 FC | 	wrlong	local02, fp
3146c     4A A9 02 F6 | 	mov	local02, arg02
31470     05 A8 46 F0 | 	shr	local02, #5
31474     3F A8 06 F5 | 	and	local02, #63
31478     04 CE 85 F1 | 	sub	fp, #4
3147c     E7 A8 62 FC | 	wrlong	local02, fp
31480     1F 94 06 F5 | 	and	arg02, #31
31484     01 94 66 F0 | 	shl	arg02, #1
31488     04 CE 85 F1 | 	sub	fp, #4
3148c     E7 94 62 FC | 	wrlong	arg02, fp
31490     E7 92 02 F6 | 	mov	arg01, fp
31494     10 CE 85 F1 | 	sub	fp, #16
31498     C8 AA BF FD | 	call	#_fatfs_cc_mktime
3149c                 | ' 
3149c                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
3149c                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
3149c                 | '     date.tm_mday = (dosdate & 0x1f);
3149c                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
3149c                 | '     date.tm_min = (dostime >> 5) & 0x3f;
3149c                 | '     date.tm_sec = (dostime & 0x1f) << 1;
3149c                 | ' 
3149c                 | '     t = mktime(&date);
3149c                 | ' #line 66 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
3149c                 | '     return t;
3149c     E7 F0 03 F6 | 	mov	ptra, fp
314a0     F2 00 A0 FD | 	call	#popregs_
314a4                 | _fatfs_cc_unixtime_1154_ret
314a4     2D 00 64 FD | 	ret
314a8                 | 
314a8                 | _fatfs_cc__set_dos_error_1156
314a8     49 81 02 F6 | 	mov	_var01, arg01
314ac                 | ' #line 82 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
314ac                 | '     switch (derr) {
314ac     14 80 26 F3 | 	fle	_var01, #20
314b0     30 80 62 FD | 	jmprel	_var01
314b4                 | LR__5260
314b4     50 00 90 FD | 	jmp	#LR__5261
314b8     84 00 90 FD | 	jmp	#LR__5275
314bc     80 00 90 FD | 	jmp	#LR__5276
314c0     7C 00 90 FD | 	jmp	#LR__5277
314c4     48 00 90 FD | 	jmp	#LR__5262
314c8     44 00 90 FD | 	jmp	#LR__5263
314cc     40 00 90 FD | 	jmp	#LR__5264
314d0     44 00 90 FD | 	jmp	#LR__5265
314d4     48 00 90 FD | 	jmp	#LR__5267
314d8     54 00 90 FD | 	jmp	#LR__5270
314dc     38 00 90 FD | 	jmp	#LR__5266
314e0     4C 00 90 FD | 	jmp	#LR__5271
314e4     48 00 90 FD | 	jmp	#LR__5272
314e8     44 00 90 FD | 	jmp	#LR__5273
314ec     50 00 90 FD | 	jmp	#LR__5278
314f0     4C 00 90 FD | 	jmp	#LR__5278
314f4     48 00 90 FD | 	jmp	#LR__5278
314f8     2C 00 90 FD | 	jmp	#LR__5268
314fc     38 00 90 FD | 	jmp	#LR__5274
31500     2C 00 90 FD | 	jmp	#LR__5269
31504     38 00 90 FD | 	jmp	#LR__5278
31508                 | LR__5261
31508     00 82 06 F6 | 	mov	_var02, #0
3150c                 | '         r = 0;
3150c                 | '         break;
3150c     34 00 90 FD | 	jmp	#LR__5279
31510                 | LR__5262
31510                 | LR__5263
31510                 | LR__5264
31510     04 82 06 F6 | 	mov	_var02, #4
31514                 | '         r =  4 ;
31514                 | '         break;
31514     2C 00 90 FD | 	jmp	#LR__5279
31518                 | LR__5265
31518                 | LR__5266
31518     06 82 06 F6 | 	mov	_var02, #6
3151c                 | '         r =  6 ;
3151c                 | '         break;
3151c     24 00 90 FD | 	jmp	#LR__5279
31520                 | LR__5267
31520     09 82 06 F6 | 	mov	_var02, #9
31524                 | '         r =  9 ;
31524                 | '         break;
31524     1C 00 90 FD | 	jmp	#LR__5279
31528                 | LR__5268
31528     07 82 06 F6 | 	mov	_var02, #7
3152c                 | '         r =  7 ;
3152c                 | '         break;
3152c     14 00 90 FD | 	jmp	#LR__5279
31530                 | LR__5269
31530                 | LR__5270
31530                 | LR__5271
31530                 | LR__5272
31530                 | LR__5273
31530     0A 82 06 F6 | 	mov	_var02, #10
31534                 | '         r =  10 ;
31534                 | '         break;
31534     0C 00 90 FD | 	jmp	#LR__5279
31538                 | LR__5274
31538     0B 82 06 F6 | 	mov	_var02, #11
3153c                 | '         r =  11 ;
3153c                 | '         break;
3153c     04 00 90 FD | 	jmp	#LR__5279
31540                 | LR__5275
31540                 | LR__5276
31540                 | LR__5277
31540                 | LR__5278
31540     0C 82 06 F6 | 	mov	_var02, #12
31544                 | '         r =  12 ;
31544                 | '         break;
31544                 | LR__5279
31544                 | '     }
31544                 | '     return _seterror(r);
31544     00 82 4E F2 | 	cmps	_var02, #0 wz
31548     20 68 06 F1 | 	add	ptr___system__dat__, #32
3154c     34 83 62 FC | 	wrlong	_var02, ptr___system__dat__
31550     20 68 86 F1 | 	sub	ptr___system__dat__, #32
31554     01 7A 66 56 |  if_ne	neg	result1, #1
31558     00 7A 06 A6 |  if_e	mov	result1, #0
3155c                 | _fatfs_cc__set_dos_error_1156_ret
3155c     2D 00 64 FD | 	ret
31560                 | 
31560                 | _fatfs_cc_v_creat
31560     04 CA 05 F6 | 	mov	COUNT_, #4
31564     E8 00 A0 FD | 	call	#pushregs_
31568     49 A7 02 F6 | 	mov	local01, arg01
3156c     4A A9 02 F6 | 	mov	local02, arg02
31570     03 00 00 FF 
31574     38 92 06 F6 | 	mov	arg01, ##1592
31578                 | '     return _gc_alloc(size);
31578     10 94 06 F6 | 	mov	arg02, #16
3157c     70 6E BF FD | 	call	#__system___gc_doalloc
31580     3D AB 0A F6 | 	mov	local03, result1 wz
31584                 | '       return _seterror( 7 );
31584     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31588     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
3158c     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31590     01 7A 66 A6 |  if_e	neg	result1, #1
31594     50 00 90 AD |  if_e	jmp	#LR__5281
31598     55 93 02 F6 | 	mov	arg01, local03
3159c     00 94 06 F6 | 	mov	arg02, #0
315a0     03 00 00 FF 
315a4     38 96 06 F6 | 	mov	arg03, ##1592
315a8     D8 00 A0 FD | 	call	#\builtin_bytefill_
315ac     55 93 02 F6 | 	mov	arg01, local03
315b0     02 00 00 FF 
315b4     10 92 06 F1 | 	add	arg01, ##1040
315b8     54 95 02 F6 | 	mov	arg02, local02
315bc     07 96 06 F6 | 	mov	arg03, #7
315c0     D8 E0 BF FD | 	call	#_fatfs_cc_f_open
315c4     3D AD 0A F6 | 	mov	local04, result1 wz
315c8     14 00 90 AD |  if_e	jmp	#LR__5280
315cc     55 93 02 F6 | 	mov	arg01, local03
315d0                 | '     return _gc_free(ptr);
315d0     20 6F BF FD | 	call	#__system___gc_free
315d4                 | '     free(f);
315d4                 | '     return _set_dos_error(r);
315d4     56 93 02 F6 | 	mov	arg01, local04
315d8     CC FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
315dc     08 00 90 FD | 	jmp	#LR__5281
315e0                 | LR__5280
315e0     53 AB 62 FC | 	wrlong	local03, local01
315e4                 | '   }
315e4                 | '   fil->vfsdata = f;
315e4                 | '   return 0;
315e4     00 7A 06 F6 | 	mov	result1, #0
315e8                 | LR__5281
315e8     E7 F0 03 F6 | 	mov	ptra, fp
315ec     F2 00 A0 FD | 	call	#popregs_
315f0                 | _fatfs_cc_v_creat_ret
315f0     2D 00 64 FD | 	ret
315f4                 | 
315f4                 | _fatfs_cc_v_close
315f4     02 CA 05 F6 | 	mov	COUNT_, #2
315f8     E8 00 A0 FD | 	call	#pushregs_
315fc     49 A7 02 FB | 	rdlong	local01, arg01
31600     53 93 02 F6 | 	mov	arg01, local01
31604     02 00 00 FF 
31608     10 92 06 F1 | 	add	arg01, ##1040
3160c     34 EE BF FD | 	call	#_fatfs_cc_f_close
31610     3D A9 02 F6 | 	mov	local02, result1
31614     53 93 02 F6 | 	mov	arg01, local01
31618                 | '     return _gc_free(ptr);
31618     D8 6E BF FD | 	call	#__system___gc_free
3161c                 | '     FAT_FIL *f = fil->vfsdata;
3161c                 | '     r=f_close(&f->fil);
3161c                 | '     free(f);
3161c                 | '     return _set_dos_error(r);
3161c     54 93 02 F6 | 	mov	arg01, local02
31620     84 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31624     E7 F0 03 F6 | 	mov	ptra, fp
31628     F2 00 A0 FD | 	call	#popregs_
3162c                 | _fatfs_cc_v_close_ret
3162c     2D 00 64 FD | 	ret
31630                 | 
31630                 | _fatfs_cc_v_opendir
31630     04 CA 05 F6 | 	mov	COUNT_, #4
31634     E8 00 A0 FD | 	call	#pushregs_
31638     49 A7 02 F6 | 	mov	local01, arg01
3163c     4A A9 02 F6 | 	mov	local02, arg02
31640     30 92 06 F6 | 	mov	arg01, #48
31644                 | '     return _gc_alloc(size);
31644     10 94 06 F6 | 	mov	arg02, #16
31648     A4 6D BF FD | 	call	#__system___gc_doalloc
3164c     3D AB 0A F6 | 	mov	local03, result1 wz
31650                 | ' #line 166 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31650                 | '       return _seterror( 7 );
31650     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31654     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
31658     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
3165c     01 7A 66 A6 |  if_e	neg	result1, #1
31660     34 00 90 AD |  if_e	jmp	#LR__5291
31664     54 95 02 F6 | 	mov	arg02, local02
31668     55 93 02 F6 | 	mov	arg01, local03
3166c     C0 F1 BF FD | 	call	#_fatfs_cc_f_opendir
31670     3D AD 0A F6 | 	mov	local04, result1 wz
31674     14 00 90 AD |  if_e	jmp	#LR__5290
31678     55 93 02 F6 | 	mov	arg01, local03
3167c                 | '     return _gc_free(ptr);
3167c     74 6E BF FD | 	call	#__system___gc_free
31680                 | '         free(f);
31680                 | '         return _set_dos_error(r);
31680     56 93 02 F6 | 	mov	arg01, local04
31684     20 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31688     0C 00 90 FD | 	jmp	#LR__5291
3168c                 | LR__5290
3168c     04 A6 06 F1 | 	add	local01, #4
31690     53 AB 62 FC | 	wrlong	local03, local01
31694                 | '     }
31694                 | '     dir->vfsdata = f;
31694                 | '     return 0;
31694     00 7A 06 F6 | 	mov	result1, #0
31698                 | LR__5291
31698     E7 F0 03 F6 | 	mov	ptra, fp
3169c     F2 00 A0 FD | 	call	#popregs_
316a0                 | _fatfs_cc_v_opendir_ret
316a0     2D 00 64 FD | 	ret
316a4                 | 
316a4                 | _fatfs_cc_v_closedir
316a4     02 CA 05 F6 | 	mov	COUNT_, #2
316a8     E8 00 A0 FD | 	call	#pushregs_
316ac     04 92 06 F1 | 	add	arg01, #4
316b0     49 A7 02 FB | 	rdlong	local01, arg01
316b4     53 93 02 F6 | 	mov	arg01, local01
316b8     90 F2 BF FD | 	call	#_fatfs_cc_f_closedir
316bc     3D A9 02 F6 | 	mov	local02, result1
316c0     53 93 02 F6 | 	mov	arg01, local01
316c4                 | '     return _gc_free(ptr);
316c4     2C 6E BF FD | 	call	#__system___gc_free
316c8     00 A8 0E F2 | 	cmp	local02, #0 wz
316cc     54 93 02 56 |  if_ne	mov	arg01, local02
316d0     D4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1156
316d4                 | '     return r;
316d4     54 7B 02 F6 | 	mov	result1, local02
316d8     E7 F0 03 F6 | 	mov	ptra, fp
316dc     F2 00 A0 FD | 	call	#popregs_
316e0                 | _fatfs_cc_v_closedir_ret
316e0     2D 00 64 FD | 	ret
316e4                 | 
316e4                 | _fatfs_cc_v_readdir
316e4     01 CA 05 F6 | 	mov	COUNT_, #1
316e8     E8 00 A0 FD | 	call	#pushregs_
316ec     2C F1 07 F1 | 	add	ptra, #300
316f0     4A A7 02 F6 | 	mov	local01, arg02
316f4     04 92 06 F1 | 	add	arg01, #4
316f8     49 93 02 FB | 	rdlong	arg01, arg01
316fc     E7 94 02 F6 | 	mov	arg02, fp
31700     0C 94 06 F1 | 	add	arg02, #12
31704     78 F2 BF FD | 	call	#_fatfs_cc_f_readdir
31708     3D 97 0A F6 | 	mov	arg03, result1 wz
3170c     0C 00 90 AD |  if_e	jmp	#LR__5300
31710                 | '         return _set_dos_error(r);
31710     4B 93 02 F6 | 	mov	arg01, arg03
31714     90 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31718     88 00 90 FD | 	jmp	#LR__5301
3171c                 | LR__5300
3171c     28 CE 05 F1 | 	add	fp, #40
31720     E7 96 CA FA | 	rdbyte	arg03, fp wz
31724     28 CE 85 F1 | 	sub	fp, #40
31728                 | '         return -1;
31728     01 7A 66 A6 |  if_e	neg	result1, #1
3172c     74 00 90 AD |  if_e	jmp	#LR__5301
31730     E7 94 02 F6 | 	mov	arg02, fp
31734     28 94 06 F1 | 	add	arg02, #40
31738     53 93 02 F6 | 	mov	arg01, local01
3173c     3F 96 06 F6 | 	mov	arg03, #63
31740     7C A6 BF FD | 	call	#_fatfs_cc_strncpy
31744     3F A6 06 F1 | 	add	local01, #63
31748     53 01 48 FC | 	wrbyte	#0, local01
3174c     3F A6 86 F1 | 	sub	local01, #63
31750     14 CE 05 F1 | 	add	fp, #20
31754     E7 96 C2 FA | 	rdbyte	arg03, fp
31758     10 96 CE F7 | 	test	arg03, #16 wz
3175c     50 A6 06 51 |  if_ne	add	local01, #80
31760     53 03 48 5C |  if_ne	wrbyte	#1, local01
31764     50 A6 E6 F3 | 	sumnz	local01, #80
31768     53 01 48 AC |  if_e	wrbyte	#0, local01
3176c     50 A6 86 A1 |  if_e	sub	local01, #80
31770     08 CE 85 F1 | 	sub	fp, #8
31774     E7 96 02 FB | 	rdlong	arg03, fp
31778     48 A6 06 F1 | 	add	local01, #72
3177c     53 97 62 FC | 	wrlong	arg03, local01
31780     04 CE 05 F1 | 	add	fp, #4
31784     E7 92 E2 FA | 	rdword	arg01, fp
31788     02 CE 05 F1 | 	add	fp, #2
3178c     E7 94 E2 FA | 	rdword	arg02, fp
31790     12 CE 85 F1 | 	sub	fp, #18
31794     74 FC BF FD | 	call	#_fatfs_cc_unixtime_1154
31798     04 A6 06 F1 | 	add	local01, #4
3179c     53 7B 62 FC | 	wrlong	result1, local01
317a0                 | '         ent->d_type =  (0) ;
317a0                 | '     }
317a0                 | '     ent->d_size = finfo.fsize;
317a0                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
317a0                 | '     return 0;
317a0     00 7A 06 F6 | 	mov	result1, #0
317a4                 | LR__5301
317a4     E7 F0 03 F6 | 	mov	ptra, fp
317a8     F2 00 A0 FD | 	call	#popregs_
317ac                 | _fatfs_cc_v_readdir_ret
317ac     2D 00 64 FD | 	ret
317b0                 | 
317b0                 | _fatfs_cc_v_stat
317b0     05 CA 05 F6 | 	mov	COUNT_, #5
317b4     E8 00 A0 FD | 	call	#pushregs_
317b8     30 F1 07 F1 | 	add	ptra, #304
317bc     49 A7 02 F6 | 	mov	local01, arg01
317c0     4A A9 02 F6 | 	mov	local02, arg02
317c4     54 93 02 F6 | 	mov	arg01, local02
317c8     00 94 06 F6 | 	mov	arg02, #0
317cc     34 96 06 F6 | 	mov	arg03, #52
317d0     D8 00 A0 FD | 	call	#\builtin_bytefill_
317d4     53 7D CA FA | 	rdbyte	result2, local01 wz
317d8     1C 00 90 AD |  if_e	jmp	#LR__5310
317dc     53 7D C2 FA | 	rdbyte	result2, local01
317e0     2E 7C 0E F2 | 	cmp	result2, #46 wz
317e4     01 A6 06 A1 |  if_e	add	local01, #1
317e8     53 AB C2 AA |  if_e	rdbyte	local03, local01
317ec     01 A6 86 A1 |  if_e	sub	local01, #1
317f0     00 AA 4E A2 |  if_e	cmps	local03, #0 wz
317f4     14 00 90 5D |  if_ne	jmp	#LR__5311
317f8                 | LR__5310
317f8     18 CE 05 F1 | 	add	fp, #24
317fc     E7 20 48 FC | 	wrbyte	#16, fp
31800     18 CE 85 F1 | 	sub	fp, #24
31804     00 AC 06 F6 | 	mov	local04, #0
31808     14 00 90 FD | 	jmp	#LR__5312
3180c                 | LR__5311
3180c     E7 94 02 F6 | 	mov	arg02, fp
31810     10 94 06 F1 | 	add	arg02, #16
31814     53 93 02 F6 | 	mov	arg01, local01
31818     00 F2 BF FD | 	call	#_fatfs_cc_f_stat
3181c     3D AD 02 F6 | 	mov	local04, result1
31820                 | LR__5312
31820     00 AC 0E F2 | 	cmp	local04, #0 wz
31824     0C 00 90 AD |  if_e	jmp	#LR__5313
31828                 | '         return _set_dos_error(r);
31828     56 93 02 F6 | 	mov	arg01, local04
3182c     78 FC BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31830     9C 00 90 FD | 	jmp	#LR__5314
31834                 | LR__5313
31834     24 AF 06 F6 | 	mov	local05, #292
31838     18 CE 05 F1 | 	add	fp, #24
3183c     E7 AA C2 FA | 	rdbyte	local03, fp
31840     01 AA CE F7 | 	test	local03, #1 wz
31844     B6 AF 06 A6 |  if_e	mov	local05, #438
31848     10 AA CE F7 | 	test	local03, #16 wz
3184c     08 00 00 5F 
31850     49 AE 46 55 |  if_ne	or	local05, ##4169
31854     08 A8 06 F1 | 	add	local02, #8
31858     54 AF 62 FC | 	wrlong	local05, local02
3185c     04 A8 06 F1 | 	add	local02, #4
31860     54 03 68 FC | 	wrlong	#1, local02
31864     08 CE 85 F1 | 	sub	fp, #8
31868     E7 7A 02 FB | 	rdlong	result1, fp
3186c     0C A8 06 F1 | 	add	local02, #12
31870     54 7B 62 FC | 	wrlong	result1, local02
31874     04 A8 06 F1 | 	add	local02, #4
31878     54 01 68 FC | 	wrlong	#0, local02
3187c     04 A8 06 F1 | 	add	local02, #4
31880     01 00 80 FF 
31884     54 01 68 FC | 	wrlong	##512, local02
31888     E7 AA 02 FB | 	rdlong	local03, fp
3188c     FF AB 06 F1 | 	add	local03, #511
31890     09 AA 46 F0 | 	shr	local03, #9
31894     04 A8 06 F1 | 	add	local02, #4
31898     54 AB 62 FC | 	wrlong	local03, local02
3189c     04 CE 05 F1 | 	add	fp, #4
318a0     E7 92 E2 FA | 	rdword	arg01, fp
318a4     02 CE 05 F1 | 	add	fp, #2
318a8     E7 94 E2 FA | 	rdword	arg02, fp
318ac     16 CE 85 F1 | 	sub	fp, #22
318b0     58 FB BF FD | 	call	#_fatfs_cc_unixtime_1154
318b4     0C A8 06 F1 | 	add	local02, #12
318b8     54 7B 62 FC | 	wrlong	result1, local02
318bc     04 A8 86 F1 | 	sub	local02, #4
318c0     54 7B 62 FC | 	wrlong	result1, local02
318c4     04 A8 86 F1 | 	sub	local02, #4
318c8     54 7B 62 FC | 	wrlong	result1, local02
318cc                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
318cc                 | '     }
318cc                 | '     buf->st_mode = mode;
318cc                 | '     buf->st_nlink = 1;
318cc                 | '     buf->st_size = finfo.fsize;
318cc                 | '     buf->st_blksize = 512;
318cc                 | '     buf->st_blocks = (finfo.fsize + 511) / 512;
318cc                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
318cc                 | ' #line 257 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
318cc                 | '     return r;
318cc     56 7B 02 F6 | 	mov	result1, local04
318d0                 | LR__5314
318d0     E7 F0 03 F6 | 	mov	ptra, fp
318d4     F2 00 A0 FD | 	call	#popregs_
318d8                 | _fatfs_cc_v_stat_ret
318d8     2D 00 64 FD | 	ret
318dc                 | 
318dc                 | _fatfs_cc_v_read
318dc     02 CA 05 F6 | 	mov	COUNT_, #2
318e0     E8 00 A0 FD | 	call	#pushregs_
318e4     1C F0 07 F1 | 	add	ptra, #28
318e8     49 A7 02 F6 | 	mov	local01, arg01
318ec     53 93 0A FB | 	rdlong	arg01, local01 wz
318f0                 | '         return _seterror( 5 );
318f0     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
318f4     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
318f8     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
318fc     01 7A 66 A6 |  if_e	neg	result1, #1
31900     58 00 90 AD |  if_e	jmp	#LR__5321
31904     02 00 00 FF 
31908     10 92 06 F1 | 	add	arg01, ##1040
3190c     E7 98 02 F6 | 	mov	arg04, fp
31910     18 98 06 F1 | 	add	arg04, #24
31914     DC E1 BF FD | 	call	#_fatfs_cc_f_read
31918     3D 99 0A F6 | 	mov	arg04, result1 wz
3191c     1C 00 90 AD |  if_e	jmp	#LR__5320
31920     08 A6 06 F1 | 	add	local01, #8
31924     53 93 02 FB | 	rdlong	arg01, local01
31928     20 92 46 F5 | 	or	arg01, #32
3192c     53 93 62 FC | 	wrlong	arg01, local01
31930                 | '         fil->state |=  (0x20) ;
31930                 | '         return _set_dos_error(r);
31930     4C 93 02 F6 | 	mov	arg01, arg04
31934     70 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31938     20 00 90 FD | 	jmp	#LR__5321
3193c                 | LR__5320
3193c     18 CE 05 F1 | 	add	fp, #24
31940     E7 A8 0A FB | 	rdlong	local02, fp wz
31944     08 A6 06 A1 |  if_e	add	local01, #8
31948     53 A9 02 AB |  if_e	rdlong	local02, local01
3194c     10 A8 46 A5 |  if_e	or	local02, #16
31950     53 A9 62 AC |  if_e	wrlong	local02, local01
31954                 | '         fil->state |=  (0x10) ;
31954                 | '     }
31954                 | '     return x;
31954     E7 7A 02 FB | 	rdlong	result1, fp
31958     18 CE 85 F1 | 	sub	fp, #24
3195c                 | LR__5321
3195c     E7 F0 03 F6 | 	mov	ptra, fp
31960     F2 00 A0 FD | 	call	#popregs_
31964                 | _fatfs_cc_v_read_ret
31964     2D 00 64 FD | 	ret
31968                 | 
31968                 | _fatfs_cc_v_write
31968     01 CA 05 F6 | 	mov	COUNT_, #1
3196c     E8 00 A0 FD | 	call	#pushregs_
31970     1C F0 07 F1 | 	add	ptra, #28
31974     49 A7 02 F6 | 	mov	local01, arg01
31978     53 93 0A FB | 	rdlong	arg01, local01 wz
3197c                 | '         return _seterror( 5 );
3197c     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31980     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
31984     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31988     01 7A 66 A6 |  if_e	neg	result1, #1
3198c     44 00 90 AD |  if_e	jmp	#LR__5331
31990     02 00 00 FF 
31994     10 92 06 F1 | 	add	arg01, ##1040
31998     E7 98 02 F6 | 	mov	arg04, fp
3199c     18 98 06 F1 | 	add	arg04, #24
319a0     E8 E4 BF FD | 	call	#_fatfs_cc_f_write
319a4     3D 99 0A F6 | 	mov	arg04, result1 wz
319a8     1C 00 90 AD |  if_e	jmp	#LR__5330
319ac     08 A6 06 F1 | 	add	local01, #8
319b0     53 93 02 FB | 	rdlong	arg01, local01
319b4     20 92 46 F5 | 	or	arg01, #32
319b8     53 93 62 FC | 	wrlong	arg01, local01
319bc                 | '         fil->state |=  (0x20) ;
319bc                 | '         return _set_dos_error(r);
319bc     4C 93 02 F6 | 	mov	arg01, arg04
319c0     E4 FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
319c4     0C 00 90 FD | 	jmp	#LR__5331
319c8                 | LR__5330
319c8                 | '     }
319c8                 | '     return x;
319c8     18 CE 05 F1 | 	add	fp, #24
319cc     E7 7A 02 FB | 	rdlong	result1, fp
319d0     18 CE 85 F1 | 	sub	fp, #24
319d4                 | LR__5331
319d4     E7 F0 03 F6 | 	mov	ptra, fp
319d8     F2 00 A0 FD | 	call	#popregs_
319dc                 | _fatfs_cc_v_write_ret
319dc     2D 00 64 FD | 	ret
319e0                 | 
319e0                 | _fatfs_cc_v_lseek
319e0     06 CA 05 F6 | 	mov	COUNT_, #6
319e4     E8 00 A0 FD | 	call	#pushregs_
319e8     4A AB 02 F6 | 	mov	local03, arg02
319ec     4C AD 02 F6 | 	mov	local04, arg04
319f0     49 AF 02 FB | 	rdlong	local05, arg01
319f4     02 00 00 FF 
319f8     10 AE 0E F1 | 	add	local05, ##1040 wz
319fc     18 00 90 5D |  if_ne	jmp	#LR__5340
31a00                 | '         return _seterror( 5 );
31a00     20 68 06 F1 | 	add	ptr___system__dat__, #32
31a04     34 0B 68 FC | 	wrlong	#5, ptr___system__dat__
31a08     20 68 86 F1 | 	sub	ptr___system__dat__, #32
31a0c     01 7C 66 F6 | 	neg	result2, #1
31a10     01 7A 66 F6 | 	neg	result1, #1
31a14     58 00 90 FD | 	jmp	#LR__5343
31a18                 | LR__5340
31a18     00 AC 0E F2 | 	cmp	local04, #0 wz
31a1c     24 00 90 AD |  if_e	jmp	#LR__5341
31a20     01 AC 0E F2 | 	cmp	local04, #1 wz
31a24     14 AE 06 A1 |  if_e	add	local05, #20
31a28     57 B1 02 AB |  if_e	rdlong	local06, local05
31a2c     14 AE 86 A1 |  if_e	sub	local05, #20
31a30     58 AB 02 A1 |  if_e	add	local03, local06
31a34     0C AE 06 51 |  if_ne	add	local05, #12
31a38     57 B1 02 5B |  if_ne	rdlong	local06, local05
31a3c     0C AE 86 51 |  if_ne	sub	local05, #12
31a40     58 AB 02 51 |  if_ne	add	local03, local06
31a44                 | LR__5341
31a44     57 93 02 F6 | 	mov	arg01, local05
31a48     55 95 02 F6 | 	mov	arg02, local03
31a4c     38 EA BF FD | 	call	#_fatfs_cc_f_lseek
31a50     3D 93 0A F6 | 	mov	arg01, result1 wz
31a54     10 00 90 AD |  if_e	jmp	#LR__5342
31a58                 | '         return _set_dos_error(result);
31a58     4C FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31a5c     3D 7D 02 F6 | 	mov	result2, result1
31a60     1F 7C C6 F0 | 	sar	result2, #31
31a64     08 00 90 FD | 	jmp	#LR__5343
31a68                 | LR__5342
31a68                 | '     }
31a68                 | '     return (off_t)offset;
31a68     55 7B 02 F6 | 	mov	result1, local03
31a6c     54 7D 02 F6 | 	mov	result2, local02
31a70                 | LR__5343
31a70     E7 F0 03 F6 | 	mov	ptra, fp
31a74     F2 00 A0 FD | 	call	#popregs_
31a78                 | _fatfs_cc_v_lseek_ret
31a78     2D 00 64 FD | 	ret
31a7c                 | 
31a7c                 | _fatfs_cc_v_ioctl
31a7c                 | ' {
31a7c                 | '     return _seterror( 10 );
31a7c     20 68 06 F1 | 	add	ptr___system__dat__, #32
31a80     34 15 68 FC | 	wrlong	#10, ptr___system__dat__
31a84     20 68 86 F1 | 	sub	ptr___system__dat__, #32
31a88     01 7A 66 F6 | 	neg	result1, #1
31a8c                 | _fatfs_cc_v_ioctl_ret
31a8c     2D 00 64 FD | 	ret
31a90                 | 
31a90                 | _fatfs_cc_v_mkdir
31a90     A0 F1 BF FD | 	call	#_fatfs_cc_f_mkdir
31a94     3D 93 02 F6 | 	mov	arg01, result1
31a98                 | ' 
31a98                 | '     r = f_mkdir(name);
31a98                 | '     return _set_dos_error(r);
31a98     0C FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31a9c                 | _fatfs_cc_v_mkdir_ret
31a9c     2D 00 64 FD | 	ret
31aa0                 | 
31aa0                 | _fatfs_cc_v_remove
31aa0     0C F0 BF FD | 	call	#_fatfs_cc_f_unlink
31aa4     3D 93 02 F6 | 	mov	arg01, result1
31aa8                 | ' 
31aa8                 | '     r = f_unlink(name);
31aa8                 | '     return _set_dos_error(r);
31aa8     FC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31aac                 | _fatfs_cc_v_remove_ret
31aac     2D 00 64 FD | 	ret
31ab0                 | 
31ab0                 | _fatfs_cc_v_rmdir
31ab0     FC EF BF FD | 	call	#_fatfs_cc_f_unlink
31ab4     3D 93 02 F6 | 	mov	arg01, result1
31ab8                 | ' 
31ab8                 | '     r = f_unlink(name);
31ab8                 | '     return _set_dos_error(r);
31ab8     EC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31abc                 | _fatfs_cc_v_rmdir_ret
31abc     2D 00 64 FD | 	ret
31ac0                 | 
31ac0                 | _fatfs_cc_v_rename
31ac0     B0 F3 BF FD | 	call	#_fatfs_cc_f_rename
31ac4     3D 93 02 F6 | 	mov	arg01, result1
31ac8                 | '     return _set_dos_error(r);
31ac8     DC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31acc                 | _fatfs_cc_v_rename_ret
31acc     2D 00 64 FD | 	ret
31ad0                 | 
31ad0                 | _fatfs_cc_v_open
31ad0     07 CA 05 F6 | 	mov	COUNT_, #7
31ad4     E8 00 A0 FD | 	call	#pushregs_
31ad8     49 A7 02 F6 | 	mov	local01, arg01
31adc     4A A9 02 F6 | 	mov	local02, arg02
31ae0     4B AB 02 F6 | 	mov	local03, arg03
31ae4     03 00 00 FF 
31ae8     38 92 06 F6 | 	mov	arg01, ##1592
31aec                 | '     return _gc_alloc(size);
31aec     10 94 06 F6 | 	mov	arg02, #16
31af0     FC 68 BF FD | 	call	#__system___gc_doalloc
31af4     3D AD 0A F6 | 	mov	local04, result1 wz
31af8                 | '       return _seterror( 7 );
31af8     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31afc     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
31b00     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31b04     01 7A 66 A6 |  if_e	neg	result1, #1
31b08     90 00 90 AD |  if_e	jmp	#LR__5356
31b0c     56 93 02 F6 | 	mov	arg01, local04
31b10     00 94 06 F6 | 	mov	arg02, #0
31b14     03 00 00 FF 
31b18     38 96 06 F6 | 	mov	arg03, ##1592
31b1c     D8 00 A0 FD | 	call	#\builtin_bytefill_
31b20                 | '   switch (flags & 3) {
31b20     55 AF 02 F6 | 	mov	local05, local03
31b24     03 AE 0E F5 | 	and	local05, #3 wz
31b28     0C 00 90 AD |  if_e	jmp	#LR__5350
31b2c     01 AE 0E F2 | 	cmp	local05, #1 wz
31b30     0C 00 90 AD |  if_e	jmp	#LR__5351
31b34     10 00 90 FD | 	jmp	#LR__5352
31b38                 | LR__5350
31b38     01 B0 06 F6 | 	mov	local06, #1
31b3c                 | '       fs_flags =  0x01 ;
31b3c                 | '       break;
31b3c     0C 00 90 FD | 	jmp	#LR__5353
31b40                 | LR__5351
31b40     02 B0 06 F6 | 	mov	local06, #2
31b44                 | '       fs_flags =  0x02 ;
31b44                 | '       break;
31b44     04 00 90 FD | 	jmp	#LR__5353
31b48                 | LR__5352
31b48     03 B0 06 F6 | 	mov	local06, #3
31b4c                 | '       fs_flags =  0x01  |  0x02 ;
31b4c                 | '       break;
31b4c                 | LR__5353
31b4c     08 AA CE F7 | 	test	local03, #8 wz
31b50     18 B0 46 55 |  if_ne	or	local06, #24
31b54     08 00 90 5D |  if_ne	jmp	#LR__5354
31b58     20 AA CE F7 | 	test	local03, #32 wz
31b5c     30 B0 46 55 |  if_ne	or	local06, #48
31b60                 | LR__5354
31b60     56 93 02 F6 | 	mov	arg01, local04
31b64     02 00 00 FF 
31b68     10 92 06 F1 | 	add	arg01, ##1040
31b6c     54 95 02 F6 | 	mov	arg02, local02
31b70     58 97 02 F6 | 	mov	arg03, local06
31b74     24 DB BF FD | 	call	#_fatfs_cc_f_open
31b78     3D B3 0A F6 | 	mov	local07, result1 wz
31b7c     14 00 90 AD |  if_e	jmp	#LR__5355
31b80     56 93 02 F6 | 	mov	arg01, local04
31b84                 | '     return _gc_free(ptr);
31b84     6C 69 BF FD | 	call	#__system___gc_free
31b88                 | '     free(f);
31b88                 | ' #line 426 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31b88                 | '     return _set_dos_error(r);
31b88     59 93 02 F6 | 	mov	arg01, local07
31b8c     18 F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31b90     08 00 90 FD | 	jmp	#LR__5356
31b94                 | LR__5355
31b94     53 AD 62 FC | 	wrlong	local04, local01
31b98                 | '   }
31b98                 | '   fil->vfsdata = f;
31b98                 | '   return 0;
31b98     00 7A 06 F6 | 	mov	result1, #0
31b9c                 | LR__5356
31b9c     E7 F0 03 F6 | 	mov	ptra, fp
31ba0     F2 00 A0 FD | 	call	#popregs_
31ba4                 | _fatfs_cc_v_open_ret
31ba4     2D 00 64 FD | 	ret
31ba8                 | 
31ba8                 | _fatfs_cc_v_flush
31ba8     01 CA 05 F6 | 	mov	COUNT_, #1
31bac     E8 00 A0 FD | 	call	#pushregs_
31bb0     49 A7 02 F6 | 	mov	local01, arg01
31bb4     80 F5 BF FD | 	call	#_fatfs_cc___default_flush
31bb8     53 A7 02 FB | 	rdlong	local01, local01
31bbc     02 00 00 FF 
31bc0     10 A6 0E F1 | 	add	local01, ##1040 wz
31bc4                 | '         return _seterror( 5 );
31bc4     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31bc8     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
31bcc     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31bd0     01 7A 66 A6 |  if_e	neg	result1, #1
31bd4     10 00 90 AD |  if_e	jmp	#LR__5360
31bd8     53 93 02 F6 | 	mov	arg01, local01
31bdc     FC E6 BF FD | 	call	#_fatfs_cc_f_sync
31be0     3D 93 02 F6 | 	mov	arg01, result1
31be4                 | '     }
31be4                 | ' #line 449 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31be4                 | '     result = f_sync(f);
31be4                 | ' #line 453 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31be4                 | '     return _set_dos_error(result);
31be4     C0 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31be8                 | LR__5360
31be8     E7 F0 03 F6 | 	mov	ptra, fp
31bec     F2 00 A0 FD | 	call	#popregs_
31bf0                 | _fatfs_cc_v_flush_ret
31bf0     2D 00 64 FD | 	ret
31bf4                 | 
31bf4                 | _fatfs_cc_v_init
31bf4                 | ' {
31bf4                 | '     return 0;
31bf4     00 7A 06 F6 | 	mov	result1, #0
31bf8                 | _fatfs_cc_v_init_ret
31bf8     2D 00 64 FD | 	ret
31bfc                 | 
31bfc                 | _fatfs_cc_v_deinit
31bfc     92 01 00 FF 
31c00     20 95 06 F6 | 	mov	arg02, ##@LR__5486
31c04     00 92 06 F6 | 	mov	arg01, #0
31c08     00 96 06 F6 | 	mov	arg03, #0
31c0c     B8 D9 BF FD | 	call	#_fatfs_cc_f_mount
31c10     01 00 00 FF 
31c14     08 64 06 F1 | 	add	objptr, ##520
31c18     32 93 02 FB | 	rdlong	arg01, objptr
31c1c     04 64 06 F1 | 	add	objptr, #4
31c20     32 95 02 FB | 	rdlong	arg02, objptr
31c24     01 00 00 FF 
31c28     0C 64 86 F1 | 	sub	objptr, ##524
31c2c     2C 50 BF FD | 	call	#__system___freepins
31c30                 | ' #line 474 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31c30                 | '     _freepins(f_pinmask);
31c30                 | '     return 0;
31c30     00 7A 06 F6 | 	mov	result1, #0
31c34                 | _fatfs_cc_v_deinit_ret
31c34     2D 00 64 FD | 	ret
31c38                 | 
31c38                 | _fatfs_cc_get_vfs
31c38     01 CA 05 F6 | 	mov	COUNT_, #1
31c3c     E8 00 A0 FD | 	call	#pushregs_
31c40     49 A7 02 F6 | 	mov	local01, arg01
31c44     58 92 06 F6 | 	mov	arg01, #88
31c48     74 67 BF FD | 	call	#__system___gc_alloc_managed
31c4c     3D 93 02 F6 | 	mov	arg01, result1
31c50     32 7B 02 F6 | 	mov	result1, objptr
31c54     00 D8 05 FF 
31c58     00 7A 46 F5 | 	or	result1, ##196083712
31c5c     49 7B 62 FC | 	wrlong	result1, arg01
31c60     32 7B 02 F6 | 	mov	result1, objptr
31c64     00 E0 05 FF 
31c68     00 7A 46 F5 | 	or	result1, ##197132288
31c6c     04 92 06 F1 | 	add	arg01, #4
31c70     49 7B 62 FC | 	wrlong	result1, arg01
31c74     32 7B 02 F6 | 	mov	result1, objptr
31c78     00 E8 05 FF 
31c7c     00 7A 46 F5 | 	or	result1, ##198180864
31c80     04 92 06 F1 | 	add	arg01, #4
31c84     49 7B 62 FC | 	wrlong	result1, arg01
31c88     32 7B 02 F6 | 	mov	result1, objptr
31c8c     00 F0 05 FF 
31c90     00 7A 46 F5 | 	or	result1, ##199229440
31c94     04 92 06 F1 | 	add	arg01, #4
31c98     49 7B 62 FC | 	wrlong	result1, arg01
31c9c     32 7B 02 F6 | 	mov	result1, objptr
31ca0     00 F8 05 FF 
31ca4     00 7A 46 F5 | 	or	result1, ##200278016
31ca8     04 92 06 F1 | 	add	arg01, #4
31cac     49 7B 62 FC | 	wrlong	result1, arg01
31cb0     32 7B 02 F6 | 	mov	result1, objptr
31cb4     3A 7A 26 F4 | 	bith	result1, #58
31cb8     04 92 06 F1 | 	add	arg01, #4
31cbc     49 7B 62 FC | 	wrlong	result1, arg01
31cc0     04 92 06 F1 | 	add	arg01, #4
31cc4     49 A7 62 FC | 	wrlong	local01, arg01
31cc8     04 92 06 F1 | 	add	arg01, #4
31ccc     49 01 68 FC | 	wrlong	#0, arg01
31cd0     32 7B 02 F6 | 	mov	result1, objptr
31cd4     00 08 06 FF 
31cd8     00 7A 46 F5 | 	or	result1, ##202375168
31cdc     04 92 06 F1 | 	add	arg01, #4
31ce0     49 7B 62 FC | 	wrlong	result1, arg01
31ce4     32 7B 02 F6 | 	mov	result1, objptr
31ce8     00 10 06 FF 
31cec     00 7A 46 F5 | 	or	result1, ##203423744
31cf0     04 92 06 F1 | 	add	arg01, #4
31cf4     49 7B 62 FC | 	wrlong	result1, arg01
31cf8     32 7B 02 F6 | 	mov	result1, objptr
31cfc     00 18 06 FF 
31d00     00 7A 46 F5 | 	or	result1, ##204472320
31d04     04 92 06 F1 | 	add	arg01, #4
31d08     49 7B 62 FC | 	wrlong	result1, arg01
31d0c     32 7B 02 F6 | 	mov	result1, objptr
31d10     00 20 06 FF 
31d14     00 7A 46 F5 | 	or	result1, ##205520896
31d18     04 92 06 F1 | 	add	arg01, #4
31d1c     49 7B 62 FC | 	wrlong	result1, arg01
31d20     32 7B 02 F6 | 	mov	result1, objptr
31d24     00 28 06 FF 
31d28     00 7A 46 F5 | 	or	result1, ##206569472
31d2c     04 92 06 F1 | 	add	arg01, #4
31d30     49 7B 62 FC | 	wrlong	result1, arg01
31d34     32 7B 02 F6 | 	mov	result1, objptr
31d38     00 30 06 FF 
31d3c     00 7A 46 F5 | 	or	result1, ##207618048
31d40     04 92 06 F1 | 	add	arg01, #4
31d44     49 7B 62 FC | 	wrlong	result1, arg01
31d48     32 7B 02 F6 | 	mov	result1, objptr
31d4c     00 38 06 FF 
31d50     00 7A 46 F5 | 	or	result1, ##208666624
31d54     04 92 06 F1 | 	add	arg01, #4
31d58     49 7B 62 FC | 	wrlong	result1, arg01
31d5c     32 7B 02 F6 | 	mov	result1, objptr
31d60     00 40 06 FF 
31d64     00 7A 46 F5 | 	or	result1, ##209715200
31d68     04 92 06 F1 | 	add	arg01, #4
31d6c     49 7B 62 FC | 	wrlong	result1, arg01
31d70     32 7B 02 F6 | 	mov	result1, objptr
31d74     00 48 06 FF 
31d78     00 7A 46 F5 | 	or	result1, ##210763776
31d7c     04 92 06 F1 | 	add	arg01, #4
31d80     49 7B 62 FC | 	wrlong	result1, arg01
31d84     32 7B 02 F6 | 	mov	result1, objptr
31d88     00 50 06 FF 
31d8c     00 7A 46 F5 | 	or	result1, ##211812352
31d90     04 92 06 F1 | 	add	arg01, #4
31d94     49 7B 62 FC | 	wrlong	result1, arg01
31d98     32 7B 02 F6 | 	mov	result1, objptr
31d9c     00 58 06 FF 
31da0     00 7A 46 F5 | 	or	result1, ##212860928
31da4     04 92 06 F1 | 	add	arg01, #4
31da8     49 7B 62 FC | 	wrlong	result1, arg01
31dac     32 7B 02 F6 | 	mov	result1, objptr
31db0     00 60 06 FF 
31db4     00 7A 46 F5 | 	or	result1, ##213909504
31db8     04 92 06 F1 | 	add	arg01, #4
31dbc     49 7B 62 FC | 	wrlong	result1, arg01
31dc0     04 92 06 F1 | 	add	arg01, #4
31dc4     49 01 68 FC | 	wrlong	#0, arg01
31dc8     04 92 06 F1 | 	add	arg01, #4
31dcc     49 01 68 FC | 	wrlong	#0, arg01
31dd0     54 92 86 F1 | 	sub	arg01, #84
31dd4                 | ' 
31dd4                 | '     v->close = &v_close;
31dd4                 | '     v->read = &v_read;
31dd4                 | '     v->write = &v_write;
31dd4                 | '     v->lseek = &v_lseek;
31dd4                 | '     v->ioctl = &v_ioctl;
31dd4                 | '     v->flush = &v_flush;
31dd4                 | '     v->vfs_data = ptr;
31dd4                 | '     v->reserved = 0;
31dd4                 | ' 
31dd4                 | '     v->open = &v_open;
31dd4                 | '     v->creat = &v_creat;
31dd4                 | '     v->opendir = &v_opendir;
31dd4                 | '     v->closedir = &v_closedir;
31dd4                 | '     v->readdir = &v_readdir;
31dd4                 | '     v->stat = &v_stat;
31dd4                 | ' 
31dd4                 | '     v->mkdir = &v_mkdir;
31dd4                 | '     v->rmdir = &v_rmdir;
31dd4                 | ' 
31dd4                 | '     v->remove = &v_remove;
31dd4                 | '     v->rename = &v_rename;
31dd4                 | ' 
31dd4                 | '     v->init = &v_init;
31dd4                 | '     v->deinit = &v_deinit;
31dd4                 | ' 
31dd4                 | ' 
31dd4                 | '     v->getcf = 0;
31dd4                 | '     v->putcf = 0;
31dd4                 | ' #line 532 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31dd4                 | '     return v;
31dd4     49 7B 02 F6 | 	mov	result1, arg01
31dd8     E7 F0 03 F6 | 	mov	ptra, fp
31ddc     F2 00 A0 FD | 	call	#popregs_
31de0                 | _fatfs_cc_get_vfs_ret
31de0     2D 00 64 FD | 	ret
31de4                 | 
31de4                 | _fatfs_cc_gettimeofday
31de4     04 CA 05 F6 | 	mov	COUNT_, #4
31de8     E8 00 A0 FD | 	call	#pushregs_
31dec     49 A7 02 F6 | 	mov	local01, arg01
31df0     24 2A BF FD | 	call	#__system___getus
31df4     3D 93 02 F6 | 	mov	arg01, result1
31df8     02 00 00 FF 
31dfc     08 6D 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1288
31e00     36 A9 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
31e04     49 7B 02 F6 | 	mov	result1, arg01
31e08     54 7B 82 F1 | 	sub	result1, local02
31e0c     A1 07 00 FF 
31e10     40 7A 16 FD | 	qdiv	result1, ##1000000
31e14     02 00 00 FF 
31e18     08 6D 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1288
31e1c     18 A8 62 FD | 	getqx	local02
31e20     A1 07 00 FF 
31e24     40 7A 16 FD | 	qdiv	result1, ##1000000
31e28     00 A8 0E F2 | 	cmp	local02, #0 wz
31e2c     19 AA 62 FD | 	getqy	local03
31e30     28 00 90 AD |  if_e	jmp	#LR__5370
31e34     02 00 00 FF 
31e38     04 6D 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1284
31e3c     36 AD 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
31e40     54 AD 02 F1 | 	add	local04, local02
31e44     36 AD 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
31e48     55 93 82 F1 | 	sub	arg01, local03
31e4c     04 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, #4
31e50     36 93 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
31e54     02 00 00 FF 
31e58     08 6D 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1288
31e5c                 | LR__5370
31e5c     02 00 00 FF 
31e60     04 6D 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1284
31e64     36 AD 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
31e68     02 00 00 FF 
31e6c     04 6D 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1284
31e70     53 AD 62 FC | 	wrlong	local04, local01
31e74     04 A6 06 F1 | 	add	local01, #4
31e78     53 AB 62 FC | 	wrlong	local03, local01
31e7c                 | '         lastsec += secs;
31e7c                 | '         lastus = now - leftover;
31e7c                 | '     }
31e7c                 | '     tv->tv_sec = lastsec;
31e7c                 | '     tv->tv_usec = leftover;
31e7c                 | '     return 0;
31e7c     00 7A 06 F6 | 	mov	result1, #0
31e80     E7 F0 03 F6 | 	mov	ptra, fp
31e84     F2 00 A0 FD | 	call	#popregs_
31e88                 | _fatfs_cc_gettimeofday_ret
31e88     2D 00 64 FD | 	ret
31e8c                 | 
31e8c                 | _fatfs_cc__is_leap_year
31e8c     49 7B 52 F6 | 	abs	result1, arg01 wc
31e90     03 7A 06 F5 | 	and	result1, #3
31e94     3D 7B 8A F6 | 	negc	result1, result1 wz
31e98     38 00 90 5D |  if_ne	jmp	#LR__5381
31e9c     49 7B 52 F6 | 	abs	result1, arg01 wc
31ea0     64 7A 16 FD | 	qdiv	result1, #100
31ea4     19 7A 62 FD | 	getqy	result1
31ea8     3D 7B 8A F6 | 	negc	result1, result1 wz
31eac     1C 00 90 5D |  if_ne	jmp	#LR__5380
31eb0     49 7B 52 F6 | 	abs	result1, arg01 wc
31eb4     90 7B 16 FD | 	qdiv	result1, #400
31eb8                 | '       return (0 == y % 400);
31eb8     00 7A 06 F6 | 	mov	result1, #0
31ebc     19 80 62 FD | 	getqy	_var01
31ec0     40 81 8A F6 | 	negc	_var01, _var01 wz
31ec4     01 7A 06 A6 |  if_e	mov	result1, #1
31ec8     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
31ecc                 | LR__5380
31ecc                 | '     return 1;
31ecc     01 7A 06 F6 | 	mov	result1, #1
31ed0     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
31ed4                 | LR__5381
31ed4                 | '   }
31ed4                 | '   return 0;
31ed4     00 7A 06 F6 | 	mov	result1, #0
31ed8                 | _fatfs_cc__is_leap_year_ret
31ed8     2D 00 64 FD | 	ret
31edc                 | 
31edc                 | _fatfs_cc___tzoffset
31edc     49 81 0A F6 | 	mov	_var01, arg01 wz
31ee0     FF FF FF FF 
31ee4     4A FF 6B FC | 	wrlong	##-1, arg02
31ee8     01 82 06 F6 | 	mov	_var02, #1
31eec     40 85 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
31ef0                 | '                 return 0;
31ef0     00 7A 06 A6 |  if_e	mov	result1, #0
31ef4     7C 02 90 AD |  if_e	jmp	#LR__5407
31ef8     4A 01 68 FC | 	wrlong	#0, arg02
31efc     36 87 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
31f00     02 00 00 FF 
31f04     DC 86 06 F1 | 	add	_var04, ##1244
31f08     D7 26 48 FB | 	callpa	#(@LR__5391-@LR__5390)>>2,fcache_load_ptr_
31f0c                 | ' 
31f0c                 | '        *hasdst = 0;
31f0c                 | ' 
31f0c                 | ' 	n = stdname;
31f0c                 | '         while (*s && isalpha(*s)) {
31f0c                 | LR__5390
31f0c     40 85 CA FA | 	rdbyte	_var03, _var01 wz
31f10     44 00 90 AD |  if_e	jmp	#LR__5392
31f14     40 93 C2 FA | 	rdbyte	arg01, _var01
31f18                 | ' {
31f18                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
31f18     80 92 36 F3 | 	fle	arg01, #128 wc
31f1c                 | '     return __ctype[c];
31f1c     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
31f20     02 00 00 FF 
31f24     0C 7B 06 F1 | 	add	result1, ##1292
31f28     3D 93 02 F1 | 	add	arg01, result1
31f2c     49 7B C2 FA | 	rdbyte	result1, arg01
31f30     0C 7A CE F7 | 	test	result1, #12 wz
31f34     20 00 90 AD |  if_e	jmp	#LR__5392
31f38     40 89 02 F6 | 	mov	_var05, _var01
31f3c     40 8B 02 F6 | 	mov	_var06, _var01
31f40     01 8A 06 F1 | 	add	_var06, #1
31f44     44 8D C2 FA | 	rdbyte	_var07, _var05
31f48     45 81 02 F6 | 	mov	_var01, _var06
31f4c     43 8D 42 FC | 	wrbyte	_var07, _var04
31f50     01 86 06 F1 | 	add	_var04, #1
31f54     B4 FF 9F FD | 	jmp	#LR__5390
31f58                 | LR__5391
31f58                 | LR__5392
31f58     43 01 48 FC | 	wrbyte	#0, _var04
31f5c     00 8E 06 F6 | 	mov	_var08, #0
31f60     40 85 C2 FA | 	rdbyte	_var03, _var01
31f64     2D 84 0E F2 | 	cmp	_var03, #45 wz
31f68     01 82 66 A6 |  if_e	neg	_var02, #1
31f6c     01 80 06 A1 |  if_e	add	_var01, #1
31f70     D7 26 48 FB | 	callpa	#(@LR__5394-@LR__5393)>>2,fcache_load_ptr_
31f74                 | '                 sgn = -1;
31f74                 | '                 s++;
31f74                 | '         }
31f74                 | '         while (isdigit(*s)) {
31f74                 | LR__5393
31f74     40 93 C2 FA | 	rdbyte	arg01, _var01
31f78                 | ' {
31f78                 | '   return  (__ctype_get(c) & 0x02 ) ;
31f78     80 92 36 F3 | 	fle	arg01, #128 wc
31f7c                 | '     return __ctype[c];
31f7c     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
31f80     02 00 00 FF 
31f84     0C 7B 06 F1 | 	add	result1, ##1292
31f88     3D 93 02 F1 | 	add	arg01, result1
31f8c     49 7B C2 FA | 	rdbyte	result1, arg01
31f90     02 7A CE F7 | 	test	result1, #2 wz
31f94     28 00 90 AD |  if_e	jmp	#LR__5395
31f98     47 85 02 F6 | 	mov	_var03, _var08
31f9c     02 84 66 F0 | 	shl	_var03, #2
31fa0     47 85 02 F1 | 	add	_var03, _var08
31fa4     01 84 66 F0 | 	shl	_var03, #1
31fa8     40 89 C2 FA | 	rdbyte	_var05, _var01
31fac     30 88 86 F1 | 	sub	_var05, #48
31fb0     44 85 02 F1 | 	add	_var03, _var05
31fb4     42 8F 02 F6 | 	mov	_var08, _var03
31fb8     01 80 06 F1 | 	add	_var01, #1
31fbc     B4 FF 9F FD | 	jmp	#LR__5393
31fc0                 | LR__5394
31fc0                 | LR__5395
31fc0     07 00 00 FF 
31fc4     10 8E 06 FD | 	qmul	_var08, ##3600
31fc8     40 85 C2 FA | 	rdbyte	_var03, _var01
31fcc     3A 84 0E F2 | 	cmp	_var03, #58 wz
31fd0     18 90 62 FD | 	getqx	_var09
31fd4     6C 00 90 5D |  if_ne	jmp	#LR__5399
31fd8     00 8E 06 F6 | 	mov	_var08, #0
31fdc     01 80 06 F1 | 	add	_var01, #1
31fe0     D7 26 48 FB | 	callpa	#(@LR__5397-@LR__5396)>>2,fcache_load_ptr_
31fe4                 | '                 x = 0;
31fe4                 | '                 s++;
31fe4                 | '                 while (isdigit(*s)) {
31fe4                 | LR__5396
31fe4     40 93 C2 FA | 	rdbyte	arg01, _var01
31fe8                 | ' {
31fe8                 | '   return  (__ctype_get(c) & 0x02 ) ;
31fe8     80 92 36 F3 | 	fle	arg01, #128 wc
31fec                 | '     return __ctype[c];
31fec     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
31ff0     02 00 00 FF 
31ff4     0C 7B 06 F1 | 	add	result1, ##1292
31ff8     3D 93 02 F1 | 	add	arg01, result1
31ffc     49 7B C2 FA | 	rdbyte	result1, arg01
32000     02 7A CE F7 | 	test	result1, #2 wz
32004     28 00 90 AD |  if_e	jmp	#LR__5398
32008     47 85 02 F6 | 	mov	_var03, _var08
3200c     02 84 66 F0 | 	shl	_var03, #2
32010     47 85 02 F1 | 	add	_var03, _var08
32014     01 84 66 F0 | 	shl	_var03, #1
32018     40 89 C2 FA | 	rdbyte	_var05, _var01
3201c     30 88 86 F1 | 	sub	_var05, #48
32020     44 85 02 F1 | 	add	_var03, _var05
32024     42 8F 02 F6 | 	mov	_var08, _var03
32028     01 80 06 F1 | 	add	_var01, #1
3202c     B4 FF 9F FD | 	jmp	#LR__5396
32030                 | LR__5397
32030                 | LR__5398
32030     47 8D 02 F6 | 	mov	_var07, _var08
32034     04 8C 66 F0 | 	shl	_var07, #4
32038     47 8D 82 F1 | 	sub	_var07, _var08
3203c     02 8C 66 F0 | 	shl	_var07, #2
32040     46 91 02 F1 | 	add	_var09, _var07
32044                 | LR__5399
32044     36 87 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
32048     02 00 00 FF 
3204c     E5 86 06 F1 | 	add	_var04, ##1253
32050     40 93 C2 FA | 	rdbyte	arg01, _var01
32054                 | ' {
32054                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
32054     80 92 36 F3 | 	fle	arg01, #128 wc
32058                 | '     return __ctype[c];
32058     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
3205c     02 00 00 FF 
32060     0C 7B 06 F1 | 	add	result1, ##1292
32064     3D 93 02 F1 | 	add	arg01, result1
32068     49 7B C2 FA | 	rdbyte	result1, arg01
3206c     0C 7A CE F7 | 	test	result1, #12 wz
32070     4C 00 90 AD |  if_e	jmp	#LR__5402
32074     4A 03 68 FC | 	wrlong	#1, arg02
32078                 | '                 *hasdst = 1;
32078                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
32078                 | LR__5400
32078     40 85 CA FA | 	rdbyte	_var03, _var01 wz
3207c     40 00 90 AD |  if_e	jmp	#LR__5401
32080     40 93 C2 FA | 	rdbyte	arg01, _var01
32084                 | ' {
32084                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
32084     80 92 36 F3 | 	fle	arg01, #128 wc
32088                 | '     return __ctype[c];
32088     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
3208c     02 00 00 FF 
32090     0C 7B 06 F1 | 	add	result1, ##1292
32094     3D 93 02 F1 | 	add	arg01, result1
32098     49 7B C2 FA | 	rdbyte	result1, arg01
3209c     0C 7A CE F7 | 	test	result1, #12 wz
320a0     1C 00 90 AD |  if_e	jmp	#LR__5401
320a4     40 8B 02 F6 | 	mov	_var06, _var01
320a8     01 8A 06 F1 | 	add	_var06, #1
320ac     40 8D C2 FA | 	rdbyte	_var07, _var01
320b0     45 81 02 F6 | 	mov	_var01, _var06
320b4     43 8D 42 FC | 	wrbyte	_var07, _var04
320b8     01 86 06 F1 | 	add	_var04, #1
320bc     B8 FF 9F FD | 	jmp	#LR__5400
320c0                 | LR__5401
320c0                 | LR__5402
320c0     43 01 48 FC | 	wrbyte	#0, _var04
320c4     02 00 00 FF 
320c8     DC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
320cc     36 85 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
320d0     02 00 00 FF 
320d4     DC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1244
320d8     20 00 90 AD |  if_e	jmp	#LR__5403
320dc     02 00 00 FF 
320e0     DC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
320e4     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
320e8     08 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #8
320ec     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
320f0     02 00 00 FF 
320f4     D4 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1236
320f8     1C 00 90 FD | 	jmp	#LR__5404
320fc                 | LR__5403
320fc     02 00 00 FF 
32100     EE 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1262
32104     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
32108     1A 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #26
3210c     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
32110     02 00 00 FF 
32114     D4 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1236
32118                 | LR__5404
32118     02 00 00 FF 
3211c     E5 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1253
32120     36 85 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
32124     02 00 00 FF 
32128     E5 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1253
3212c     20 00 90 AD |  if_e	jmp	#LR__5405
32130     02 00 00 FF 
32134     E5 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1253
32138     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3213c     0D 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #13
32140     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
32144     02 00 00 FF 
32148     D8 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1240
3214c     1C 00 90 FD | 	jmp	#LR__5406
32150                 | LR__5405
32150     02 00 00 FF 
32154     DC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
32158     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3215c     04 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #4
32160     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
32164     02 00 00 FF 
32168     D8 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1240
3216c                 | LR__5406
3216c     48 83 02 FD | 	qmul	_var02, _var09
32170                 | ' 		_tzname[1] = stdname;
32170                 | ' 
32170                 | '         return sgn * off;
32170     18 7A 62 FD | 	getqx	result1
32174                 | LR__5407
32174                 | _fatfs_cc___tzoffset_ret
32174     2D 00 64 FD | 	ret
32178                 | 
32178                 | _fatfs_cc___indst
32178     10 92 06 F1 | 	add	arg01, #16
3217c     49 81 02 FB | 	rdlong	_var01, arg01
32180     10 92 86 F1 | 	sub	arg01, #16
32184     02 80 0E F2 | 	cmp	_var01, #2 wz
32188     30 00 90 5D |  if_ne	jmp	#LR__5410
3218c     07 80 06 F6 | 	mov	_var01, #7
32190     18 92 06 F1 | 	add	arg01, #24
32194     49 83 02 FB | 	rdlong	_var02, arg01
32198     41 81 02 F1 | 	add	_var01, _var02
3219c     0C 92 86 F1 | 	sub	arg01, #12
321a0     49 85 02 FB | 	rdlong	_var03, arg01
321a4     42 81 82 F1 | 	sub	_var01, _var03
321a8     00 80 56 F2 | 	cmps	_var01, #0 wc
321ac                 | '                         return 1;
321ac     01 7A 06 C6 |  if_b	mov	result1, #1
321b0     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
321b4                 | '                 return 0;
321b4     00 7A 06 F6 | 	mov	result1, #0
321b8     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
321bc                 | LR__5410
321bc     10 92 06 F1 | 	add	arg01, #16
321c0     49 81 02 FB | 	rdlong	_var01, arg01
321c4     10 92 86 F1 | 	sub	arg01, #16
321c8     0A 80 0E F2 | 	cmp	_var01, #10 wz
321cc     28 00 90 5D |  if_ne	jmp	#LR__5411
321d0     18 92 06 F1 | 	add	arg01, #24
321d4     49 81 02 FB | 	rdlong	_var01, arg01
321d8     0C 92 86 F1 | 	sub	arg01, #12
321dc     49 87 02 FB | 	rdlong	_var04, arg01
321e0     43 81 82 F1 | 	sub	_var01, _var04
321e4     00 80 56 F2 | 	cmps	_var01, #0 wc
321e8                 | '                         return 0;
321e8     00 7A 06 C6 |  if_b	mov	result1, #0
321ec     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
321f0                 | '                 return 1;
321f0     01 7A 06 F6 | 	mov	result1, #1
321f4     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
321f8                 | LR__5411
321f8                 | '         }
321f8                 | ' 
321f8                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
321f8     00 80 06 F6 | 	mov	_var01, #0
321fc     10 92 06 F1 | 	add	arg01, #16
32200     49 83 02 FB | 	rdlong	_var02, arg01
32204     10 92 86 F1 | 	sub	arg01, #16
32208     03 82 56 F2 | 	cmps	_var02, #3 wc
3220c     10 00 90 CD |  if_b	jmp	#LR__5412
32210     10 92 06 F1 | 	add	arg01, #16
32214     49 85 02 FB | 	rdlong	_var03, arg01
32218     0A 84 56 F2 | 	cmps	_var03, #10 wc
3221c     01 80 06 C6 |  if_b	mov	_var01, #1
32220                 | LR__5412
32220     40 7B 02 F6 | 	mov	result1, _var01
32224                 | _fatfs_cc___indst_ret
32224     2D 00 64 FD | 	ret
32228                 | 
32228                 | _fatfs_cc_disk_deinitialize
32228     03 CA 05 F6 | 	mov	COUNT_, #3
3222c     E8 00 A0 FD | 	call	#pushregs_
32230     01 00 00 FF 
32234     10 64 06 F1 | 	add	objptr, ##528
32238     32 93 0A FB | 	rdlong	arg01, objptr wz
3223c     01 00 00 FF 
32240     10 64 86 F1 | 	sub	objptr, ##528
32244                 | ' 
32244                 | '         return RES_NOTRDY;
32244     03 7A 06 A6 |  if_e	mov	result1, #3
32248     4C 00 90 AD |  if_e	jmp	#LR__5420
3224c     01 00 00 FF 
32250     10 64 06 F1 | 	add	objptr, ##528
32254     32 93 02 FB | 	rdlong	arg01, objptr
32258     49 A7 02 F6 | 	mov	local01, arg01
3225c     24 A6 06 F1 | 	add	local01, #36
32260     53 A7 02 FB | 	rdlong	local01, local01
32264     53 A9 02 F6 | 	mov	local02, local01
32268     13 A6 46 F7 | 	zerox	local01, #19
3226c     14 A8 46 F0 | 	shr	local02, #20
32270     02 A8 66 F0 | 	shl	local02, #2
32274     2D A9 02 F1 | 	add	local02, __methods__
32278     54 A9 02 FB | 	rdlong	local02, local02
3227c     01 00 00 FF 
32280     10 64 86 F1 | 	sub	objptr, ##528
32284     32 AB 02 F6 | 	mov	local03, objptr
32288     53 65 02 F6 | 	mov	objptr, local01
3228c     2D A8 62 FD | 	call	local02
32290     55 65 02 F6 | 	mov	objptr, local03
32294                 | '     }
32294                 | '     fh->close(fh);
32294                 | '     return RES_OK;
32294     00 7A 06 F6 | 	mov	result1, #0
32298                 | LR__5420
32298     E7 F0 03 F6 | 	mov	ptra, fp
3229c     F2 00 A0 FD | 	call	#popregs_
322a0                 | _fatfs_cc_disk_deinitialize_ret
322a0     2D 00 64 FD | 	ret
322a4                 | 
322a4                 | ' 	
322a4                 | ' 	FUNCTION pfunc(c as integer) as integer
322a4                 | __system____strs_cl_pfunc_
322a4                 | ' 		if (i < 16) then
322a4     04 64 06 F1 | 	add	objptr, #4
322a8     32 7B 02 FB | 	rdlong	result1, objptr
322ac     04 64 86 F1 | 	sub	objptr, #4
322b0     10 7A 56 F2 | 	cmps	result1, #16 wc
322b4     2C 00 90 3D |  if_ae	jmp	#LR__5430
322b8     32 7B 02 FB | 	rdlong	result1, objptr
322bc     04 64 06 F1 | 	add	objptr, #4
322c0     32 81 02 FB | 	rdlong	_var01, objptr
322c4     3D 81 02 F1 | 	add	_var01, result1
322c8     40 93 42 FC | 	wrbyte	arg01, _var01
322cc     32 7B 02 FB | 	rdlong	result1, objptr
322d0     01 7A 06 F1 | 	add	result1, #1
322d4     32 7B 62 FC | 	wrlong	result1, objptr
322d8     04 64 86 F1 | 	sub	objptr, #4
322dc                 | ' 			p(i) = c
322dc                 | ' 			i = i+1
322dc                 | ' 			return 1
322dc     01 7A 06 F6 | 	mov	result1, #1
322e0     04 00 90 FD | 	jmp	#__system____strs_cl_pfunc__ret
322e4                 | LR__5430
322e4                 | ' 			return -1
322e4     01 7A 66 F6 | 	neg	result1, #1
322e8                 | __system____strs_cl_pfunc__ret
322e8     2D 00 64 FD | 	ret
322ec                 | 
322ec                 | __system___struct__s_vfs_file_t_putchar_
322ec     04 CA 05 F6 | 	mov	COUNT_, #4
322f0     E8 00 A0 FD | 	call	#pushregs_
322f4     1C 64 06 F1 | 	add	objptr, #28
322f8     32 A7 0A FB | 	rdlong	local01, objptr wz
322fc     1C 64 86 F1 | 	sub	objptr, #28
32300     00 7A 06 A6 |  if_e	mov	result1, #0
32304     48 00 90 AD |  if_e	jmp	#LR__5440
32308     1C 64 06 F1 | 	add	objptr, #28
3230c     32 A9 02 FB | 	rdlong	local02, objptr
32310     54 AB 02 F6 | 	mov	local03, local02
32314     1C 64 86 F1 | 	sub	objptr, #28
32318     13 AA 46 F7 | 	zerox	local03, #19
3231c     14 A8 46 F0 | 	shr	local02, #20
32320     02 A8 66 F0 | 	shl	local02, #2
32324     2D A9 02 F1 | 	add	local02, __methods__
32328     54 A9 02 FB | 	rdlong	local02, local02
3232c     32 95 02 F6 | 	mov	arg02, objptr
32330     32 AD 02 F6 | 	mov	local04, objptr
32334     55 65 02 F6 | 	mov	objptr, local03
32338     2D A8 62 FD | 	call	local02
3233c     56 65 02 F6 | 	mov	objptr, local04
32340                 | '     return (i < 0) ? 0 : 1;
32340     00 7A 56 F2 | 	cmps	result1, #0 wc
32344     00 A6 06 C6 |  if_b	mov	local01, #0
32348     01 A6 06 36 |  if_ae	mov	local01, #1
3234c     53 7B 02 F6 | 	mov	result1, local01
32350                 | LR__5440
32350     E7 F0 03 F6 | 	mov	ptra, fp
32354     F2 00 A0 FD | 	call	#popregs_
32358                 | __system___struct__s_vfs_file_t_putchar__ret
32358     2D 00 64 FD | 	ret
3235c                 | 
3235c                 | __system___struct__s_vfs_file_t_getchar_
3235c     03 CA 05 F6 | 	mov	COUNT_, #3
32360     E8 00 A0 FD | 	call	#pushregs_
32364     20 64 06 F1 | 	add	objptr, #32
32368     32 93 0A FB | 	rdlong	arg01, objptr wz
3236c     20 64 86 F1 | 	sub	objptr, #32
32370     01 7A 66 A6 |  if_e	neg	result1, #1
32374     38 00 90 AD |  if_e	jmp	#LR__5450
32378                 | '     return getcf(__this);
32378     20 64 06 F1 | 	add	objptr, #32
3237c     32 A7 02 FB | 	rdlong	local01, objptr
32380     53 A9 02 F6 | 	mov	local02, local01
32384     20 64 86 F1 | 	sub	objptr, #32
32388     13 A8 46 F7 | 	zerox	local02, #19
3238c     14 A6 46 F0 | 	shr	local01, #20
32390     02 A6 66 F0 | 	shl	local01, #2
32394     2D A7 02 F1 | 	add	local01, __methods__
32398     53 A7 02 FB | 	rdlong	local01, local01
3239c     32 93 02 F6 | 	mov	arg01, objptr
323a0     32 AB 02 F6 | 	mov	local03, objptr
323a4     54 65 02 F6 | 	mov	objptr, local02
323a8     2D A6 62 FD | 	call	local01
323ac     55 65 02 F6 | 	mov	objptr, local03
323b0                 | LR__5450
323b0     E7 F0 03 F6 | 	mov	ptra, fp
323b4     F2 00 A0 FD | 	call	#popregs_
323b8                 | __system___struct__s_vfs_file_t_getchar__ret
323b8     2D 00 64 FD | 	ret
323bc                 | 
323bc                 | __system___struct___bas_wrap_sender_tx_
323bc     03 CA 05 F6 | 	mov	COUNT_, #3
323c0     E8 00 A0 FD | 	call	#pushregs_
323c4     32 A7 02 FB | 	rdlong	local01, objptr
323c8     53 A9 02 F6 | 	mov	local02, local01
323cc     13 A6 46 F7 | 	zerox	local01, #19
323d0     14 A8 46 F0 | 	shr	local02, #20
323d4     02 A8 66 F0 | 	shl	local02, #2
323d8     2D A9 02 F1 | 	add	local02, __methods__
323dc     54 A9 02 FB | 	rdlong	local02, local02
323e0     32 AB 02 F6 | 	mov	local03, objptr
323e4     53 65 02 F6 | 	mov	objptr, local01
323e8     2D A8 62 FD | 	call	local02
323ec     55 65 02 F6 | 	mov	objptr, local03
323f0     01 7A 06 F6 | 	mov	result1, #1
323f4     E7 F0 03 F6 | 	mov	ptra, fp
323f8     F2 00 A0 FD | 	call	#popregs_
323fc                 | __system___struct___bas_wrap_sender_tx__ret
323fc     2D 00 64 FD | 	ret
32400                 | 
32400                 | __system___struct___bas_wrap_sender_rx_
32400     03 CA 05 F6 | 	mov	COUNT_, #3
32404     E8 00 A0 FD | 	call	#pushregs_
32408     04 64 06 F1 | 	add	objptr, #4
3240c     32 A7 02 FB | 	rdlong	local01, objptr
32410     53 A9 02 F6 | 	mov	local02, local01
32414     04 64 86 F1 | 	sub	objptr, #4
32418     13 A8 46 F7 | 	zerox	local02, #19
3241c     14 A6 46 F0 | 	shr	local01, #20
32420     02 A6 66 F0 | 	shl	local01, #2
32424     2D A7 02 F1 | 	add	local01, __methods__
32428     53 A7 02 FB | 	rdlong	local01, local01
3242c     32 AB 02 F6 | 	mov	local03, objptr
32430     54 65 02 F6 | 	mov	objptr, local02
32434     2D A6 62 FD | 	call	local01
32438     55 65 02 F6 | 	mov	objptr, local03
3243c     E7 F0 03 F6 | 	mov	ptra, fp
32440     F2 00 A0 FD | 	call	#popregs_
32444                 | __system___struct___bas_wrap_sender_rx__ret
32444     2D 00 64 FD | 	ret
32448                 | 
32448                 | __system___struct___bas_wrap_sender_close_
32448     03 CA 05 F6 | 	mov	COUNT_, #3
3244c     E8 00 A0 FD | 	call	#pushregs_
32450     08 64 06 F1 | 	add	objptr, #8
32454     32 A7 02 FB | 	rdlong	local01, objptr
32458     53 A9 02 F6 | 	mov	local02, local01
3245c     08 64 86 F1 | 	sub	objptr, #8
32460     13 A8 46 F7 | 	zerox	local02, #19
32464     14 A6 46 F0 | 	shr	local01, #20
32468     02 A6 66 F0 | 	shl	local01, #2
3246c     2D A7 02 F1 | 	add	local01, __methods__
32470     53 A7 02 FB | 	rdlong	local01, local01
32474     32 AB 02 F6 | 	mov	local03, objptr
32478     54 65 02 F6 | 	mov	objptr, local02
3247c     2D A6 62 FD | 	call	local01
32480     55 65 02 F6 | 	mov	objptr, local03
32484     E7 F0 03 F6 | 	mov	ptra, fp
32488     F2 00 A0 FD | 	call	#popregs_
3248c                 | __system___struct___bas_wrap_sender_close__ret
3248c     2D 00 64 FD | 	ret
32490                 | 
32490                 | LR__5460
32490     2F          | 	byte	"/"
32491     00          | 	byte	0
32492                 | LR__5461
32492     69 6E 66    | 	byte	"inf"
32495     00          | 	byte	0
32496                 | LR__5462
32496     6E 61 6E    | 	byte	"nan"
32499     00          | 	byte	0
3249a                 | LR__5463
3249a                 | 	byte	
3249a     00          | 	byte	0
3249b                 | LR__5464
3249b                 | 	byte	
3249b     00          | 	byte	0
3249c                 | LR__5465
3249c                 | 	byte	
3249c     00          | 	byte	0
3249d                 | LR__5466
3249d                 | 	byte	
3249d     00          | 	byte	0
3249e                 | LR__5467
3249e                 | 	byte	
3249e     00          | 	byte	0
3249f                 | LR__5468
3249f                 | 	byte	
3249f     00          | 	byte	0
324a0                 | LR__5469
324a0                 | 	byte	
324a0     00          | 	byte	0
324a1                 | LR__5470
324a1                 | 	byte	
324a1     00          | 	byte	0
324a2                 | LR__5471
324a2     00          | 	byte	0
324a3     00          | 	byte	0
324a4                 | LR__5472
324a4     00          | 	byte	0
324a5     00          | 	byte	0
324a6                 | LR__5473
324a6     00          | 	byte	0
324a7     00          | 	byte	0
324a8                 | LR__5474
324a8     20 21 21 21 
324ac     20 63 6F 72 
324b0     72 75 70 74 
324b4     65 64 20 68 
324b8     65 61 70 3F 
324bc     3F 3F 20 21 
324c0     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
324c3     00          | 	byte	0
324c4                 | LR__5475
324c4     20 21 21 21 
324c8     20 6F 75 74 
324cc     20 6F 66 20 
324d0     68 65 61 70 
324d4     20 6D 65 6D 
324d8     6F 72 79 20 
324dc     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
324e0     00          | 	byte	0
324e1                 | LR__5476
324e1     20 21 21 21 
324e5     20 63 6F 72 
324e9     72 75 70 74 
324ed     65 64 20 68 
324f1     65 61 70 20 
324f5     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
324f9     00          | 	byte	0
324fa                 | LR__5477
324fa     00          | 	byte	0
324fb     00          | 	byte	0
324fc                 | LR__5478
324fc     2E          | 	byte	"."
324fd     00          | 	byte	0
324fe                 | LR__5479
324fe     00          | 	byte	0
324ff     00          | 	byte	0
32500                 | LR__5480
32500     00          | 	byte	0
32501     00          | 	byte	0
32502                 | LR__5481
32502     00          | 	byte	0
32503     00          | 	byte	0
32504                 | LR__5482
32504     54 5A       | 	byte	"TZ"
32506     00          | 	byte	0
32507                 | LR__5483
32507     2A 3A 3C 3E 
3250b     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
3250f     00          | 	byte	0
32510                 | LR__5484
32510     2B 2C 3B 3D 
32514     5B 5D       | 	byte	"+,;=[]"
32516     00          | 	byte	0
32517                 | LR__5485
32517     46 41 54 33 
3251b     32 20 20 20 | 	byte	"FAT32   "
3251f     00          | 	byte	0
32520                 | LR__5486
32520     00          | 	byte	0
32521     00          | 	byte	0
32522                 | LR__5487
32522                 | 	byte	
32522     00          | 	byte	0
32523                 | LR__5488
32523                 | 	byte	
32523     00          | 	byte	0
32524                 | LR__5489
32524                 | 	byte	
32524     00          | 	byte	0
32525                 | LR__5490
32525                 | 	byte	
32525     00          | 	byte	0
32526                 | LR__5491
32526     22          | 	byte	34
32527     00          | 	byte	0
32528                 | LR__5492
32528     22          | 	byte	34
32529     00          | 	byte	0
3252a                 | LR__5493
3252a     3A          | 	byte	":"
3252b     00          | 	byte	0
3252c                 | LR__5494
3252c                 | 	byte	
3252c     00          | 	byte	0
3252d                 | LR__5495
3252d                 | 	byte	
3252d     00          | 	byte	0
3252e                 | LR__5496
3252e                 | 	byte	
3252e     00          | 	byte	0
3252f                 | LR__5497
3252f                 | 	byte	
3252f     00          | 	byte	0
32530                 | LR__5498
32530                 | 	byte	
32530     00          | 	byte	0
32531                 | LR__5499
32531                 | 	byte	
32531     00          | 	byte	0
32532                 | LR__5500
32532                 | 	byte	
32532     00          | 	byte	0
32533                 | LR__5501
32533     30          | 	byte	"0"
32534     00          | 	byte	0
32535                 | LR__5502
32535     22          | 	byte	34
32536     00          | 	byte	0
32537                 | LR__5503
32537     22          | 	byte	34
32538     00          | 	byte	0
32539                 | LR__5504
32539     22          | 	byte	34
3253a     00          | 	byte	0
3253b                 | LR__5505
3253b     22          | 	byte	34
3253c     00          | 	byte	0
3253d                 | LR__5506
3253d     22          | 	byte	34
3253e     00          | 	byte	0
3253f                 | LR__5507
3253f     3E          | 	byte	">"
32540     00          | 	byte	0
32541                 | LR__5508
32541     3C          | 	byte	"<"
32542     00          | 	byte	0
32543                 | LR__5509
32543     2B          | 	byte	"+"
32544     00          | 	byte	0
32545                 | LR__5510
32545     2D          | 	byte	"-"
32546     00          | 	byte	0
32547                 | LR__5511
32547     2A          | 	byte	"*"
32548     00          | 	byte	0
32549                 | LR__5512
32549     2F          | 	byte	"/"
3254a     00          | 	byte	0
3254b                 | LR__5513
3254b     5E          | 	byte	"^"
3254c     00          | 	byte	0
3254d                 | LR__5514
3254d     3D          | 	byte	"="
3254e     00          | 	byte	0
3254f                 | LR__5515
3254f     2B          | 	byte	"+"
32550     00          | 	byte	0
32551                 | LR__5516
32551     2B          | 	byte	"+"
32552     00          | 	byte	0
32553                 | LR__5517
32553     2D          | 	byte	"-"
32554     00          | 	byte	0
32555                 | LR__5518
32555     2D          | 	byte	"-"
32556     00          | 	byte	0
32557                 | LR__5519
32557     3C          | 	byte	"<"
32558     00          | 	byte	0
32559                 | LR__5520
32559     3E          | 	byte	">"
3255a     00          | 	byte	0
3255b                 | LR__5521
3255b     22          | 	byte	34
3255c     00          | 	byte	0
3255d                 | LR__5522
3255d     22          | 	byte	34
3255e     00          | 	byte	0
3255f                 | LR__5523
3255f     65 6C 73 65 | 	byte	"else"
32563     00          | 	byte	0
32564                 | LR__5524
32564     74 68 65 6E | 	byte	"then"
32568     00          | 	byte	0
32569                 | LR__5525
32569     3F          | 	byte	"?"
3256a     00          | 	byte	0
3256b                 | LR__5526
3256b     3F          | 	byte	"?"
3256c     00          | 	byte	0
3256d                 | LR__5527
3256d     2E          | 	byte	"."
3256e     00          | 	byte	0
3256f                 | LR__5528
3256f     6D 6F 75 73 
32573     65          | 	byte	"mouse"
32574     00          | 	byte	0
32575                 | LR__5529
32575     63 75 72 73 
32579     6F 72       | 	byte	"cursor"
3257b     00          | 	byte	0
3257c                 | LR__5530
3257c     63 6C 69 63 
32580     6B          | 	byte	"click"
32581     00          | 	byte	0
32582                 | LR__5531
32582     6F 6E       | 	byte	"on"
32584     00          | 	byte	0
32585                 | LR__5532
32585     31          | 	byte	"1"
32586     00          | 	byte	0
32587                 | LR__5533
32587     6F 66 66    | 	byte	"off"
3258a     00          | 	byte	0
3258b                 | LR__5534
3258b     30          | 	byte	"0"
3258c     00          | 	byte	0
3258d                 | LR__5535
3258d     6D 6F 64 65 | 	byte	"mode"
32591     00          | 	byte	0
32592                 | LR__5536
32592     6D 2E       | 	byte	"m."
32594     00          | 	byte	0
32595                 | LR__5537
32595     61 74 61 72 
32599     69          | 	byte	"atari"
3259a     00          | 	byte	0
3259b                 | LR__5538
3259b     30          | 	byte	"0"
3259c     00          | 	byte	0
3259d                 | LR__5539
3259d     70 63 5F 61 
325a1     6D 62 65 72 | 	byte	"pc_amber"
325a5     00          | 	byte	0
325a6                 | LR__5540
325a6     31          | 	byte	"1"
325a7     00          | 	byte	0
325a8                 | LR__5541
325a8     70 63 5F 67 
325ac     72 65 65 6E | 	byte	"pc_green"
325b0     00          | 	byte	0
325b1                 | LR__5542
325b1     32          | 	byte	"2"
325b2     00          | 	byte	0
325b3                 | LR__5543
325b3     70 63 5F 77 
325b7     68 69 74 65 | 	byte	"pc_white"
325bb     00          | 	byte	0
325bc                 | LR__5544
325bc     33          | 	byte	"3"
325bd     00          | 	byte	0
325be                 | LR__5545
325be     73 74       | 	byte	"st"
325c0     00          | 	byte	0
325c1                 | LR__5546
325c1     34          | 	byte	"4"
325c2     00          | 	byte	0
325c3                 | LR__5547
325c3     61 6D 69 67 
325c7     61          | 	byte	"amiga"
325c8     00          | 	byte	0
325c9                 | LR__5548
325c9     35          | 	byte	"5"
325ca     00          | 	byte	0
325cb                 | LR__5549
325cb                 | 	byte	
325cb     00          | 	byte	0
325cc                 | LR__5550
325cc     6C 6F 61 64 | 	byte	"load"
325d0     00          | 	byte	0
325d1                 | LR__5551
325d1     73 61 76 65 | 	byte	"save"
325d5     00          | 	byte	0
325d6                 | LR__5552
325d6     62 72 75 6E | 	byte	"brun"
325da     00          | 	byte	0
325db                 | LR__5553
325db     72 75 6E    | 	byte	"run"
325de     00          | 	byte	0
325df                 | LR__5554
325df     6C 6F 2E    | 	byte	"lo."
325e2     00          | 	byte	0
325e3                 | LR__5555
325e3     73 2E       | 	byte	"s."
325e5     00          | 	byte	0
325e6                 | LR__5556
325e6     62 72 2E    | 	byte	"br."
325e9     00          | 	byte	0
325ea                 | LR__5557
325ea     65 6E 74 65 
325ee     72          | 	byte	"enter"
325ef     00          | 	byte	0
325f0                 | LR__5558
325f0     65 2E       | 	byte	"e."
325f2     00          | 	byte	0
325f3                 | LR__5559
325f3     24          | 	byte	"$"
325f4     00          | 	byte	0
325f5                 | LR__5560
325f5     64 65 6C 65 
325f9     74 65       | 	byte	"delete"
325fb     00          | 	byte	0
325fc                 | LR__5561
325fc     6D 6B 64 69 
32600     72          | 	byte	"mkdir"
32601     00          | 	byte	0
32602                 | LR__5562
32602     24          | 	byte	"$"
32603     00          | 	byte	0
32604                 | LR__5563
32604     63 6F 70 79 | 	byte	"copy"
32608     00          | 	byte	0
32609                 | LR__5564
32609     24          | 	byte	"$"
3260a     00          | 	byte	0
3260b                 | LR__5565
3260b     63 6F 70 79 | 	byte	"copy"
3260f     00          | 	byte	0
32610                 | LR__5566
32610     24          | 	byte	"$"
32611     00          | 	byte	0
32612                 | LR__5567
32612     63 64       | 	byte	"cd"
32614     00          | 	byte	0
32615                 | LR__5568
32615     63 64 2E    | 	byte	"cd."
32618     00          | 	byte	0
32619                 | LR__5569
32619     2E          | 	byte	"."
3261a     00          | 	byte	0
3261b                 | LR__5570
3261b     2E 2E       | 	byte	".."
3261d     00          | 	byte	0
3261e                 | LR__5571
3261e     63 64       | 	byte	"cd"
32620     00          | 	byte	0
32621                 | LR__5572
32621     2F          | 	byte	"/"
32622     00          | 	byte	0
32623                 | LR__5573
32623                 | 	byte	
32623     00          | 	byte	0
32624                 | LR__5574
32624                 | 	byte	
32624     00          | 	byte	0
32625                 | LR__5575
32625                 | 	byte	
32625     00          | 	byte	0
32626                 | LR__5576
32626                 | 	byte	
32626     00          | 	byte	0
32627                 | LR__5577
32627                 | 	byte	
32627     00          | 	byte	0
32628                 | LR__5578
32628     52 65 61 64 
3262c     79          | 	byte	"Ready"
3262d     00          | 	byte	0
3262e                 | LR__5579
3262e     2B          | 	byte	"+"
3262f     00          | 	byte	0
32630                 | LR__5580
32630     2D          | 	byte	"-"
32631     00          | 	byte	0
32632                 | LR__5581
32632     6F 72       | 	byte	"or"
32634     00          | 	byte	0
32635                 | LR__5582
32635     78 6F 72    | 	byte	"xor"
32638     00          | 	byte	0
32639                 | LR__5583
32639     2A          | 	byte	"*"
3263a     00          | 	byte	0
3263b                 | LR__5584
3263b     2F          | 	byte	"/"
3263c     00          | 	byte	0
3263d                 | LR__5585
3263d     61 6E 64    | 	byte	"and"
32640     00          | 	byte	0
32641                 | LR__5586
32641     64 69 76    | 	byte	"div"
32644     00          | 	byte	0
32645                 | LR__5587
32645     6D 6F 64    | 	byte	"mod"
32648     00          | 	byte	0
32649                 | LR__5588
32649     73 68 6C    | 	byte	"shl"
3264c     00          | 	byte	0
3264d                 | LR__5589
3264d     73 68 72    | 	byte	"shr"
32650     00          | 	byte	0
32651                 | LR__5590
32651     5E          | 	byte	"^"
32652     00          | 	byte	0
32653                 | LR__5591
32653     6E 6F 74    | 	byte	"not"
32656     00          | 	byte	0
32657                 | LR__5592
32657     40          | 	byte	"@"
32658     00          | 	byte	0
32659                 | LR__5593
32659     3D          | 	byte	"="
3265a     00          | 	byte	0
3265b                 | LR__5594
3265b     3E 3D       | 	byte	">="
3265d     00          | 	byte	0
3265e                 | LR__5595
3265e     3C 3D       | 	byte	"<="
32660     00          | 	byte	0
32661                 | LR__5596
32661     3C          | 	byte	"<"
32662     00          | 	byte	0
32663                 | LR__5597
32663     3E          | 	byte	">"
32664     00          | 	byte	0
32665                 | LR__5598
32665     3C 3E       | 	byte	"<>"
32667     00          | 	byte	0
32668                 | LR__5599
32668     2B 2B       | 	byte	"++"
3266a     00          | 	byte	0
3266b                 | LR__5600
3266b     2D 2D       | 	byte	"--"
3266d     00          | 	byte	0
3266e                 | LR__5601
3266e     23          | 	byte	"#"
3266f     00          | 	byte	0
32670                 | LR__5602
32670     30          | 	byte	"0"
32671     00          | 	byte	0
32672                 | LR__5603
32672     39          | 	byte	"9"
32673     00          | 	byte	0
32674                 | LR__5604
32674     23 72 65 61 
32678     64          | 	byte	"#read"
32679     00          | 	byte	0
3267a                 | LR__5605
3267a     23 77 72 69 
3267e     74 65       | 	byte	"#write"
32680     00          | 	byte	0
32681                 | LR__5606
32681     23 61 70 70 
32685     65 6E 64    | 	byte	"#append"
32688     00          | 	byte	0
32689                 | LR__5607
32689     23          | 	byte	"#"
3268a     00          | 	byte	0
3268b                 | LR__5608
3268b     23          | 	byte	"#"
3268c     00          | 	byte	0
3268d                 | LR__5609
3268d     2D          | 	byte	"-"
3268e     00          | 	byte	0
3268f                 | LR__5610
3268f     30          | 	byte	"0"
32690     00          | 	byte	0
32691                 | LR__5611
32691     63          | 	byte	"c"
32692     00          | 	byte	0
32693                 | LR__5612
32693     63 23       | 	byte	"c#"
32695     00          | 	byte	0
32696                 | LR__5613
32696     64          | 	byte	"d"
32697     00          | 	byte	0
32698                 | LR__5614
32698     64 23       | 	byte	"d#"
3269a     00          | 	byte	0
3269b                 | LR__5615
3269b     65          | 	byte	"e"
3269c     00          | 	byte	0
3269d                 | LR__5616
3269d     66          | 	byte	"f"
3269e     00          | 	byte	0
3269f                 | LR__5617
3269f     66 23       | 	byte	"f#"
326a1     00          | 	byte	0
326a2                 | LR__5618
326a2     67          | 	byte	"g"
326a3     00          | 	byte	0
326a4                 | LR__5619
326a4     67 23       | 	byte	"g#"
326a6     00          | 	byte	0
326a7                 | LR__5620
326a7     61          | 	byte	"a"
326a8     00          | 	byte	0
326a9                 | LR__5621
326a9     61 23       | 	byte	"a#"
326ab     00          | 	byte	0
326ac                 | LR__5622
326ac     68          | 	byte	"h"
326ad     00          | 	byte	0
326ae                 | LR__5623
326ae     62          | 	byte	"b"
326af     00          | 	byte	0
326b0                 | LR__5624
326b0     2B          | 	byte	"+"
326b1     00          | 	byte	0
326b2                 | LR__5625
326b2     2D          | 	byte	"-"
326b3     00          | 	byte	0
326b4                 | LR__5626
326b4     3D          | 	byte	"="
326b5     00          | 	byte	0
326b6                 | LR__5627
326b6     2C          | 	byte	","
326b7     00          | 	byte	0
326b8                 | LR__5628
326b8     2A          | 	byte	"*"
326b9     00          | 	byte	0
326ba                 | LR__5629
326ba     2F          | 	byte	"/"
326bb     00          | 	byte	0
326bc                 | LR__5630
326bc     3B          | 	byte	";"
326bd     00          | 	byte	0
326be                 | LR__5631
326be     22          | 	byte	34
326bf     00          | 	byte	0
326c0                 | LR__5632
326c0     5E          | 	byte	"^"
326c1     00          | 	byte	0
326c2                 | LR__5633
326c2     29          | 	byte	")"
326c3     00          | 	byte	0
326c4                 | LR__5634
326c4     28          | 	byte	"("
326c5     00          | 	byte	0
326c6                 | LR__5635
326c6     3A          | 	byte	":"
326c7     00          | 	byte	0
326c8                 | LR__5636
326c8     20          | 	byte	" "
326c9     00          | 	byte	0
326ca                 | LR__5637
326ca     3E          | 	byte	">"
326cb     00          | 	byte	0
326cc                 | LR__5638
326cc     3C          | 	byte	"<"
326cd     00          | 	byte	0
326ce                 | LR__5639
326ce     3D          | 	byte	"="
326cf     00          | 	byte	0
326d0                 | LR__5640
326d0     62 65 65 70 | 	byte	"beep"
326d4     00          | 	byte	0
326d5                 | LR__5641
326d5     62 2E       | 	byte	"b."
326d7     00          | 	byte	0
326d8                 | LR__5642
326d8     62 6C 69 74 | 	byte	"blit"
326dc     00          | 	byte	0
326dd                 | LR__5643
326dd     62 6F 78    | 	byte	"box"
326e0     00          | 	byte	0
326e1                 | LR__5644
326e1     62 72 75 6E | 	byte	"brun"
326e5     00          | 	byte	0
326e6                 | LR__5645
326e6     62 72 2E    | 	byte	"br."
326e9     00          | 	byte	0
326ea                 | LR__5646
326ea     63 64       | 	byte	"cd"
326ec     00          | 	byte	0
326ed                 | LR__5647
326ed     63 68 61 6E 
326f1     67 65 66 72 
326f5     65 71       | 	byte	"changefreq"
326f7     00          | 	byte	0
326f8                 | LR__5648
326f8     63 66 2E    | 	byte	"cf."
326fb     00          | 	byte	0
326fc                 | LR__5649
326fc     63 68 61 6E 
32700     67 65 70 61 
32704     6E          | 	byte	"changepan"
32705     00          | 	byte	0
32706                 | LR__5650
32706     63 70 2E    | 	byte	"cp."
32709     00          | 	byte	0
3270a                 | LR__5651
3270a     63 68 61 6E 
3270e     67 65 76 6F 
32712     6C          | 	byte	"changevol"
32713     00          | 	byte	0
32714                 | LR__5652
32714     63 76 2E    | 	byte	"cv."
32717     00          | 	byte	0
32718                 | LR__5653
32718     63 68 61 6E 
3271c     67 65 77 61 
32720     76 65       | 	byte	"changewave"
32722     00          | 	byte	0
32723                 | LR__5654
32723     63 77 2E    | 	byte	"cw."
32726     00          | 	byte	0
32727                 | LR__5655
32727     63 69 72 63 
3272b     6C 65       | 	byte	"circle"
3272d     00          | 	byte	0
3272e                 | LR__5656
3272e     63 69 2E    | 	byte	"ci."
32731     00          | 	byte	0
32732                 | LR__5657
32732     63 6C 69 63 
32736     6B          | 	byte	"click"
32737     00          | 	byte	0
32738                 | LR__5658
32738     63 6C 6F 73 
3273c     65          | 	byte	"close"
3273d     00          | 	byte	0
3273e                 | LR__5659
3273e     63 6C 73    | 	byte	"cls"
32741     00          | 	byte	0
32742                 | LR__5660
32742     63 6F 67 73 
32746     74 6F 70    | 	byte	"cogstop"
32749     00          | 	byte	0
3274a                 | LR__5661
3274a     63 6F 6C 6F 
3274e     72          | 	byte	"color"
3274f     00          | 	byte	0
32750                 | LR__5662
32750     63 2E       | 	byte	"c."
32752     00          | 	byte	0
32753                 | LR__5663
32753     63 6F 70 79 | 	byte	"copy"
32757     00          | 	byte	0
32758                 | LR__5664
32758     63 75 72 73 
3275c     6F 72       | 	byte	"cursor"
3275e     00          | 	byte	0
3275f                 | LR__5665
3275f     64 61 74 61 | 	byte	"data"
32763     00          | 	byte	0
32764                 | LR__5666
32764     64 65 66 63 
32768     68 61 72    | 	byte	"defchar"
3276b     00          | 	byte	0
3276c                 | LR__5667
3276c     64 65 66 73 
32770     6E 64       | 	byte	"defsnd"
32772     00          | 	byte	0
32773                 | LR__5668
32773     64 65 66 65 
32777     6E 76       | 	byte	"defenv"
32779     00          | 	byte	0
3277a                 | LR__5669
3277a     64 65 66 73 
3277e     70 72 69 74 
32782     65          | 	byte	"defsprite"
32783     00          | 	byte	0
32784                 | LR__5670
32784     64 73 2E    | 	byte	"ds."
32787     00          | 	byte	0
32788                 | LR__5671
32788     64 65 67    | 	byte	"deg"
3278b     00          | 	byte	0
3278c                 | LR__5672
3278c     64 65 6C 65 
32790     74 65       | 	byte	"delete"
32792     00          | 	byte	0
32793                 | LR__5673
32793     64 69 6D    | 	byte	"dim"
32796     00          | 	byte	0
32797                 | LR__5674
32797     64 69 72    | 	byte	"dir"
3279a     00          | 	byte	0
3279b                 | LR__5675
3279b     64 70 6F 6B 
3279f     65          | 	byte	"dpoke"
327a0     00          | 	byte	0
327a1                 | LR__5676
327a1     64 72 61 77 | 	byte	"draw"
327a5     00          | 	byte	0
327a6                 | LR__5677
327a6     64 72 61 77 
327aa     74 6F       | 	byte	"drawto"
327ac     00          | 	byte	0
327ad                 | LR__5678
327ad     64 72 2E    | 	byte	"dr."
327b0     00          | 	byte	0
327b1                 | LR__5679
327b1     65 6C 73 65 | 	byte	"else"
327b5     00          | 	byte	0
327b6                 | LR__5680
327b6     65 6E 64    | 	byte	"end"
327b9     00          | 	byte	0
327ba                 | LR__5681
327ba     65 6E 74 65 
327be     72          | 	byte	"enter"
327bf     00          | 	byte	0
327c0                 | LR__5682
327c0     65 2E       | 	byte	"e."
327c2     00          | 	byte	0
327c3                 | LR__5683
327c3     66 63 69 72 
327c7     63 6C 65    | 	byte	"fcircle"
327ca     00          | 	byte	0
327cb                 | LR__5684
327cb     66 63 2E    | 	byte	"fc."
327ce     00          | 	byte	0
327cf                 | LR__5685
327cf     66 69 6C 6C | 	byte	"fill"
327d3     00          | 	byte	0
327d4                 | LR__5686
327d4     66 69 2E    | 	byte	"fi."
327d7     00          | 	byte	0
327d8                 | LR__5687
327d8     66 6F 6E 74 | 	byte	"font"
327dc     00          | 	byte	0
327dd                 | LR__5688
327dd     66 6F 72    | 	byte	"for"
327e0     00          | 	byte	0
327e1                 | LR__5689
327e1     66 2E       | 	byte	"f."
327e3     00          | 	byte	0
327e4                 | LR__5690
327e4     66 72 61 6D 
327e8     65          | 	byte	"frame"
327e9     00          | 	byte	0
327ea                 | LR__5691
327ea     66 72 2E    | 	byte	"fr."
327ed     00          | 	byte	0
327ee                 | LR__5692
327ee     67 65 74    | 	byte	"get"
327f1     00          | 	byte	0
327f2                 | LR__5693
327f2     67 6F 73 75 
327f6     62          | 	byte	"gosub"
327f7     00          | 	byte	0
327f8                 | LR__5694
327f8     67 6F 74 6F | 	byte	"goto"
327fc     00          | 	byte	0
327fd                 | LR__5695
327fd     67 2E       | 	byte	"g."
327ff     00          | 	byte	0
32800                 | LR__5696
32800     69 66       | 	byte	"if"
32802     00          | 	byte	0
32803                 | LR__5697
32803     69 6E 6B    | 	byte	"ink"
32806     00          | 	byte	0
32807                 | LR__5698
32807     69 2E       | 	byte	"i."
32809     00          | 	byte	0
3280a                 | LR__5699
3280a     69 6E 70 75 
3280e     74          | 	byte	"input"
3280f     00          | 	byte	0
32810                 | LR__5700
32810     6C 69 73 74 | 	byte	"list"
32814     00          | 	byte	0
32815                 | LR__5701
32815     6C 2E       | 	byte	"l."
32817     00          | 	byte	0
32818                 | LR__5702
32818     6C 6F 61 64 | 	byte	"load"
3281c     00          | 	byte	0
3281d                 | LR__5703
3281d     6C 6F 2E    | 	byte	"lo."
32820     00          | 	byte	0
32821                 | LR__5704
32821     6C 70 6F 6B 
32825     65          | 	byte	"lpoke"
32826     00          | 	byte	0
32827                 | LR__5705
32827     6D 6B 64 69 
3282b     72          | 	byte	"mkdir"
3282c     00          | 	byte	0
3282d                 | LR__5706
3282d     6D 6F 64 65 | 	byte	"mode"
32831     00          | 	byte	0
32832                 | LR__5707
32832     6D 2E       | 	byte	"m."
32834     00          | 	byte	0
32835                 | LR__5708
32835     6D 6F 75 73 
32839     65          | 	byte	"mouse"
3283a     00          | 	byte	0
3283b                 | LR__5709
3283b     6E 65 77    | 	byte	"new"
3283e     00          | 	byte	0
3283f                 | LR__5710
3283f     6E 65 78 74 | 	byte	"next"
32843     00          | 	byte	0
32844                 | LR__5711
32844     6E 2E       | 	byte	"n."
32846     00          | 	byte	0
32847                 | LR__5712
32847     6F 6E       | 	byte	"on"
32849     00          | 	byte	0
3284a                 | LR__5713
3284a     6F 70 65 6E | 	byte	"open"
3284e     00          | 	byte	0
3284f                 | LR__5714
3284f     70 61 70 65 
32853     72          | 	byte	"paper"
32854     00          | 	byte	0
32855                 | LR__5715
32855     70 61 2E    | 	byte	"pa."
32858     00          | 	byte	0
32859                 | LR__5716
32859     70 69 6E 66 
3285d     6C 6F 61 74 | 	byte	"pinfloat"
32861     00          | 	byte	0
32862                 | LR__5717
32862     70 69 6E 68 
32866     69          | 	byte	"pinhi"
32867     00          | 	byte	0
32868                 | LR__5718
32868     70 69 6E 6C 
3286c     6F          | 	byte	"pinlo"
3286d     00          | 	byte	0
3286e                 | LR__5719
3286e     70 69 6E 73 
32872     74 61 72 74 | 	byte	"pinstart"
32876     00          | 	byte	0
32877                 | LR__5720
32877     70 69 6E 74 
3287b     6F 67 67 6C 
3287f     65          | 	byte	"pintoggle"
32880     00          | 	byte	0
32881                 | LR__5721
32881     70 69 6E 77 
32885     72 69 74 65 | 	byte	"pinwrite"
32889     00          | 	byte	0
3288a                 | LR__5722
3288a     70 6C 61 79 | 	byte	"play"
3288e     00          | 	byte	0
3288f                 | LR__5723
3288f     70 2E       | 	byte	"p."
32891     00          | 	byte	0
32892                 | LR__5724
32892     70 6C 6F 74 | 	byte	"plot"
32896     00          | 	byte	0
32897                 | LR__5725
32897     70 6C 2E    | 	byte	"pl."
3289a     00          | 	byte	0
3289b                 | LR__5726
3289b     70 6F 6B 65 | 	byte	"poke"
3289f     00          | 	byte	0
328a0                 | LR__5727
328a0     70 6F 70    | 	byte	"pop"
328a3     00          | 	byte	0
328a4                 | LR__5728
328a4     70 6F 73 69 
328a8     74 69 6F 6E | 	byte	"position"
328ac     00          | 	byte	0
328ad                 | LR__5729
328ad     70 6F 73 2E | 	byte	"pos."
328b1     00          | 	byte	0
328b2                 | LR__5730
328b2     70 72 69 6E 
328b6     74          | 	byte	"print"
328b7     00          | 	byte	0
328b8                 | LR__5731
328b8     3F          | 	byte	"?"
328b9     00          | 	byte	0
328ba                 | LR__5732
328ba     70 75 74    | 	byte	"put"
328bd     00          | 	byte	0
328be                 | LR__5733
328be     72 61 64    | 	byte	"rad"
328c1     00          | 	byte	0
328c2                 | LR__5734
328c2     72 65 61 64 | 	byte	"read"
328c6     00          | 	byte	0
328c7                 | LR__5735
328c7     72 65 6C 65 
328cb     61 73 65    | 	byte	"release"
328ce     00          | 	byte	0
328cf                 | LR__5736
328cf     72 65 6D    | 	byte	"rem"
328d2     00          | 	byte	0
328d3                 | LR__5737
328d3     27          | 	byte	"'"
328d4     00          | 	byte	0
328d5                 | LR__5738
328d5     72 65 73 74 
328d9     6F 72 65    | 	byte	"restore"
328dc     00          | 	byte	0
328dd                 | LR__5739
328dd     72 65 73 74 
328e1     6F 72 65 70 
328e5     61 6C 65 74 
328e9     74 65       | 	byte	"restorepalette"
328eb     00          | 	byte	0
328ec                 | LR__5740
328ec     72 70 2E    | 	byte	"rp."
328ef     00          | 	byte	0
328f0                 | LR__5741
328f0     72 65 74 75 
328f4     72 6E       | 	byte	"return"
328f6     00          | 	byte	0
328f7                 | LR__5742
328f7     72 75 6E    | 	byte	"run"
328fa     00          | 	byte	0
328fb                 | LR__5743
328fb     72 2E       | 	byte	"r."
328fd     00          | 	byte	0
328fe                 | LR__5744
328fe     73 61 76 65 | 	byte	"save"
32902     00          | 	byte	0
32903                 | LR__5745
32903     73 2E       | 	byte	"s."
32905     00          | 	byte	0
32906                 | LR__5746
32906     73 65 74 63 
3290a     6F 6C 6F 72 | 	byte	"setcolor"
3290e     00          | 	byte	0
3290f                 | LR__5747
3290f     73 63 2E    | 	byte	"sc."
32912     00          | 	byte	0
32913                 | LR__5748
32913     73 65 74 61 
32917     6D 6F 64 65 | 	byte	"setamode"
3291b     00          | 	byte	0
3291c                 | LR__5749
3291c     73 61 2E    | 	byte	"sa."
3291f     00          | 	byte	0
32920                 | LR__5750
32920     73 65 74 64 
32924     65 6C 61 79 | 	byte	"setdelay"
32928     00          | 	byte	0
32929                 | LR__5751
32929     73 64 2E    | 	byte	"sd."
3292c     00          | 	byte	0
3292d                 | LR__5752
3292d     73 65 74 65 
32931     6E 76       | 	byte	"setenv"
32933     00          | 	byte	0
32934                 | LR__5753
32934     73 65 2E    | 	byte	"se."
32937     00          | 	byte	0
32938                 | LR__5754
32938     73 65 74 6C 
3293c     65 6E       | 	byte	"setlen"
3293e     00          | 	byte	0
3293f                 | LR__5755
3293f     73 6C 2E    | 	byte	"sl."
32942     00          | 	byte	0
32943                 | LR__5756
32943     73 65 74 70 
32947     61 6E       | 	byte	"setpan"
32949     00          | 	byte	0
3294a                 | LR__5757
3294a     73 70 2E    | 	byte	"sp."
3294d     00          | 	byte	0
3294e                 | LR__5758
3294e     73 65 74 73 
32952     75 73 74 61 
32956     69 6E       | 	byte	"setsustain"
32958     00          | 	byte	0
32959                 | LR__5759
32959     73 73 2E    | 	byte	"ss."
3295c     00          | 	byte	0
3295d                 | LR__5760
3295d     73 65 74 76 
32961     6F 6C       | 	byte	"setvol"
32963     00          | 	byte	0
32964                 | LR__5761
32964     73 76 2E    | 	byte	"sv."
32967     00          | 	byte	0
32968                 | LR__5762
32968     73 65 74 77 
3296c     61 76 65    | 	byte	"setwave"
3296f     00          | 	byte	0
32970                 | LR__5763
32970     73 77 2E    | 	byte	"sw."
32973     00          | 	byte	0
32974                 | LR__5764
32974     73 65 74 77 
32978     61 76       | 	byte	"setwav"
3297a     00          | 	byte	0
3297b                 | LR__5765
3297b     73 68 75 74 
3297f     75 70       | 	byte	"shutup"
32981     00          | 	byte	0
32982                 | LR__5766
32982     73 68 2E    | 	byte	"sh."
32985     00          | 	byte	0
32986                 | LR__5767
32986     73 6F 75 6E 
3298a     64          | 	byte	"sound"
3298b     00          | 	byte	0
3298c                 | LR__5768
3298c     73 6F 2E    | 	byte	"so."
3298f     00          | 	byte	0
32990                 | LR__5769
32990     73 70 72 69 
32994     74 65       | 	byte	"sprite"
32996     00          | 	byte	0
32997                 | LR__5770
32997     73 70 72 2E | 	byte	"spr."
3299b     00          | 	byte	0
3299c                 | LR__5771
3299c     74 68 65 6E | 	byte	"then"
329a0     00          | 	byte	0
329a1                 | LR__5772
329a1     77 61 69 74 
329a5     6D 73       | 	byte	"waitms"
329a7     00          | 	byte	0
329a8                 | LR__5773
329a8     77 2E       | 	byte	"w."
329aa     00          | 	byte	0
329ab                 | LR__5774
329ab     77 61 69 74 
329af     63 6C 6F 63 
329b3     6B          | 	byte	"waitclock"
329b4     00          | 	byte	0
329b5                 | LR__5775
329b5     77 63 2E    | 	byte	"wc."
329b8     00          | 	byte	0
329b9                 | LR__5776
329b9     77 61 69 74 
329bd     76 62 6C    | 	byte	"waitvbl"
329c0     00          | 	byte	0
329c1                 | LR__5777
329c1     77 76 2E    | 	byte	"wv."
329c4     00          | 	byte	0
329c5                 | LR__5778
329c5     77 72 70 69 
329c9     6E          | 	byte	"wrpin"
329ca     00          | 	byte	0
329cb                 | LR__5779
329cb     77 78 70 69 
329cf     6E          | 	byte	"wxpin"
329d0     00          | 	byte	0
329d1                 | LR__5780
329d1     77 79 70 69 
329d5     6E          | 	byte	"wypin"
329d6     00          | 	byte	0
329d7                 | LR__5781
329d7     61 62 73    | 	byte	"abs"
329da     00          | 	byte	0
329db                 | LR__5782
329db     61 63 6F 73 | 	byte	"acos"
329df     00          | 	byte	0
329e0                 | LR__5783
329e0     61 64 72    | 	byte	"adr"
329e3     00          | 	byte	0
329e4                 | LR__5784
329e4     61 64 64 72 | 	byte	"addr"
329e8     00          | 	byte	0
329e9                 | LR__5785
329e9     61 73 63    | 	byte	"asc"
329ec     00          | 	byte	0
329ed                 | LR__5786
329ed     61 73 69 6E | 	byte	"asin"
329f1     00          | 	byte	0
329f2                 | LR__5787
329f2     61 74 6E    | 	byte	"atn"
329f5     00          | 	byte	0
329f6                 | LR__5788
329f6     62 69 6E 24 | 	byte	"bin$"
329fa     00          | 	byte	0
329fb                 | LR__5789
329fb     63 68 72 24 | 	byte	"chr$"
329ff     00          | 	byte	0
32a00                 | LR__5790
32a00     63 6F 67 69 
32a04     6E 69 74    | 	byte	"coginit"
32a07     00          | 	byte	0
32a08                 | LR__5791
32a08     63 6F 73    | 	byte	"cos"
32a0b     00          | 	byte	0
32a0c                 | LR__5792
32a0c     64 70 65 65 
32a10     6B          | 	byte	"dpeek"
32a11     00          | 	byte	0
32a12                 | LR__5793
32a12     66 69 6E 64 
32a16     66 69 72 73 
32a1a     74          | 	byte	"findfirst"
32a1b     00          | 	byte	0
32a1c                 | LR__5794
32a1c     66 69 6E 64 
32a20     6E 65 78 74 | 	byte	"findnext"
32a24     00          | 	byte	0
32a25                 | LR__5795
32a25     66 72 61 6D 
32a29     65 62 75 66 | 	byte	"framebuf"
32a2d     00          | 	byte	0
32a2e                 | LR__5796
32a2e     66 62 2E    | 	byte	"fb."
32a31     00          | 	byte	0
32a32                 | LR__5797
32a32     66 72 65    | 	byte	"fre"
32a35     00          | 	byte	0
32a36                 | LR__5798
32a36     67 63 2E    | 	byte	"gc."
32a39     00          | 	byte	0
32a3a                 | LR__5799
32a3a     67 65 74 63 
32a3e     6F 6C 6F 72 | 	byte	"getcolor"
32a42     00          | 	byte	0
32a43                 | LR__5800
32a43     67 65 74 70 
32a47     69 78 65 6C | 	byte	"getpixel"
32a4b     00          | 	byte	0
32a4c                 | LR__5801
32a4c     67 65 2E    | 	byte	"ge."
32a4f     00          | 	byte	0
32a50                 | LR__5802
32a50     67 65 74 65 
32a54     6E 76 73 75 
32a58     73 74 61 69 
32a5c     6E          | 	byte	"getenvsustain"
32a5d     00          | 	byte	0
32a5e                 | LR__5803
32a5e     67 65 74 6E 
32a62     6F 74 65 76 
32a66     61 6C 75 65 | 	byte	"getnotevalue"
32a6a     00          | 	byte	0
32a6b                 | LR__5804
32a6b     67 65 74 72 
32a6f     65 61 6C 66 
32a73     72 65 71    | 	byte	"getrealfreq"
32a76     00          | 	byte	0
32a77                 | LR__5805
32a77     67 65 74 74 
32a7b     69 6D 65    | 	byte	"gettime"
32a7e     00          | 	byte	0
32a7f                 | LR__5806
32a7f     67 74 2E    | 	byte	"gt."
32a82     00          | 	byte	0
32a83                 | LR__5807
32a83     68 65 78 24 | 	byte	"hex$"
32a87     00          | 	byte	0
32a88                 | LR__5808
32a88     69 6E 6B 65 
32a8c     79 24       | 	byte	"inkey$"
32a8e     00          | 	byte	0
32a8f                 | LR__5809
32a8f     69 6E 74    | 	byte	"int"
32a92     00          | 	byte	0
32a93                 | LR__5810
32a93     6C 65 66 74 
32a97     24          | 	byte	"left$"
32a98     00          | 	byte	0
32a99                 | LR__5811
32a99     6C 65 6E    | 	byte	"len"
32a9c     00          | 	byte	0
32a9d                 | LR__5812
32a9d     6C 6F 67    | 	byte	"log"
32aa0     00          | 	byte	0
32aa1                 | LR__5813
32aa1     6C 70 65 65 
32aa5     6B          | 	byte	"lpeek"
32aa6     00          | 	byte	0
32aa7                 | LR__5814
32aa7     6D 65 6D 74 
32aab     6F 70       | 	byte	"memtop"
32aad     00          | 	byte	0
32aae                 | LR__5815
32aae     6D 65 6D 6C 
32ab2     6F          | 	byte	"memlo"
32ab3     00          | 	byte	0
32ab4                 | LR__5816
32ab4     6D 69 64 24 | 	byte	"mid$"
32ab8     00          | 	byte	0
32ab9                 | LR__5817
32ab9     6D 6F 75 73 
32abd     65 6B       | 	byte	"mousek"
32abf     00          | 	byte	0
32ac0                 | LR__5818
32ac0     6D 6F 75 73 
32ac4     65 77       | 	byte	"mousew"
32ac6     00          | 	byte	0
32ac7                 | LR__5819
32ac7     6D 6F 75 73 
32acb     65 78       | 	byte	"mousex"
32acd     00          | 	byte	0
32ace                 | LR__5820
32ace     6D 6F 75 73 
32ad2     65 79       | 	byte	"mousey"
32ad4     00          | 	byte	0
32ad5                 | LR__5821
32ad5     70 61 64 73 | 	byte	"pads"
32ad9     00          | 	byte	0
32ada                 | LR__5822
32ada     70 61 64 77 | 	byte	"padw"
32ade     00          | 	byte	0
32adf                 | LR__5823
32adf     70 61 64 78 | 	byte	"padx"
32ae3     00          | 	byte	0
32ae4                 | LR__5824
32ae4     70 61 64 79 | 	byte	"pady"
32ae8     00          | 	byte	0
32ae9                 | LR__5825
32ae9     70 61 64 7A | 	byte	"padz"
32aed     00          | 	byte	0
32aee                 | LR__5826
32aee     70 61 64 72 
32af2     78          | 	byte	"padrx"
32af3     00          | 	byte	0
32af4                 | LR__5827
32af4     70 61 64 72 
32af8     79          | 	byte	"padry"
32af9     00          | 	byte	0
32afa                 | LR__5828
32afa     70 61 64 72 
32afe     7A          | 	byte	"padrz"
32aff     00          | 	byte	0
32b00                 | LR__5829
32b00     70 61 64 68 | 	byte	"padh"
32b04     00          | 	byte	0
32b05                 | LR__5830
32b05     70 65 65 6B | 	byte	"peek"
32b09     00          | 	byte	0
32b0a                 | LR__5831
32b0a     70 69 6E 72 
32b0e     65 61 64    | 	byte	"pinread"
32b11     00          | 	byte	0
32b12                 | LR__5832
32b12     72 64 70 69 
32b16     6E          | 	byte	"rdpin"
32b17     00          | 	byte	0
32b18                 | LR__5833
32b18     72 69 67 68 
32b1c     74 24       | 	byte	"right$"
32b1e     00          | 	byte	0
32b1f                 | LR__5834
32b1f     72 71 70 69 
32b23     6E          | 	byte	"rqpin"
32b24     00          | 	byte	0
32b25                 | LR__5835
32b25     72 6F 75 6E 
32b29     64          | 	byte	"round"
32b2a     00          | 	byte	0
32b2b                 | LR__5836
32b2b     72 6E 64    | 	byte	"rnd"
32b2e     00          | 	byte	0
32b2f                 | LR__5837
32b2f     73 69 6E    | 	byte	"sin"
32b32     00          | 	byte	0
32b33                 | LR__5838
32b33     73 71 72    | 	byte	"sqr"
32b36     00          | 	byte	0
32b37                 | LR__5839
32b37     73 74 69 63 
32b3b     6B          | 	byte	"stick"
32b3c     00          | 	byte	0
32b3d                 | LR__5840
32b3d     73 74 72 69 
32b41     67          | 	byte	"strig"
32b42     00          | 	byte	0
32b43                 | LR__5841
32b43     73 74 72 24 | 	byte	"str$"
32b47     00          | 	byte	0
32b48                 | LR__5842
32b48     74 61 6E    | 	byte	"tan"
32b4b     00          | 	byte	0
32b4c                 | LR__5843
32b4c     76 61 6C    | 	byte	"val"
32b4f     00          | 	byte	0
32b50                 | LR__5844
32b50     76 61 72 70 
32b54     74 72       | 	byte	"varptr"
32b56     00          | 	byte	0
32b57                 | LR__5845
32b57     61          | 	byte	"a"
32b58     00          | 	byte	0
32b59                 | LR__5846
32b59     7A          | 	byte	"z"
32b5a     00          | 	byte	0
32b5b                 | LR__5847
32b5b     5F          | 	byte	"_"
32b5c     00          | 	byte	0
32b5d                 | LR__5848
32b5d     61          | 	byte	"a"
32b5e     00          | 	byte	0
32b5f                 | LR__5849
32b5f     7A          | 	byte	"z"
32b60     00          | 	byte	0
32b61                 | LR__5850
32b61     30          | 	byte	"0"
32b62     00          | 	byte	0
32b63                 | LR__5851
32b63     39          | 	byte	"9"
32b64     00          | 	byte	0
32b65                 | LR__5852
32b65     5F          | 	byte	"_"
32b66     00          | 	byte	0
32b67                 | LR__5853
32b67     2E          | 	byte	"."
32b68     00          | 	byte	0
32b69                 | LR__5854
32b69     61          | 	byte	"a"
32b6a     00          | 	byte	0
32b6b                 | LR__5855
32b6b     7A          | 	byte	"z"
32b6c     00          | 	byte	0
32b6d                 | LR__5856
32b6d     30          | 	byte	"0"
32b6e     00          | 	byte	0
32b6f                 | LR__5857
32b6f     39          | 	byte	"9"
32b70     00          | 	byte	0
32b71                 | LR__5858
32b71     5F          | 	byte	"_"
32b72     00          | 	byte	0
32b73                 | LR__5859
32b73     24          | 	byte	"$"
32b74     00          | 	byte	0
32b75                 | LR__5860
32b75     25          | 	byte	"%"
32b76     00          | 	byte	0
32b77                 | LR__5861
32b77     21          | 	byte	"!"
32b78     00          | 	byte	0
32b79                 | LR__5862
32b79     30          | 	byte	"0"
32b7a     00          | 	byte	0
32b7b                 | LR__5863
32b7b     39          | 	byte	"9"
32b7c     00          | 	byte	0
32b7d                 | LR__5864
32b7d     2E          | 	byte	"."
32b7e     00          | 	byte	0
32b7f                 | LR__5865
32b7f     24          | 	byte	"$"
32b80     00          | 	byte	0
32b81                 | LR__5866
32b81     25          | 	byte	"%"
32b82     00          | 	byte	0
32b83                 | LR__5867
32b83     2D          | 	byte	"-"
32b84     00          | 	byte	0
32b85                 | LR__5868
32b85     2E          | 	byte	"."
32b86     00          | 	byte	0
32b87                 | LR__5869
32b87     24          | 	byte	"$"
32b88     00          | 	byte	0
32b89                 | LR__5870
32b89     25          | 	byte	"%"
32b8a     00          | 	byte	0
32b8b                 | LR__5871
32b8b     30          | 	byte	"0"
32b8c     00          | 	byte	0
32b8d                 | LR__5872
32b8d     39          | 	byte	"9"
32b8e     00          | 	byte	0
32b8f                 | LR__5873
32b8f     5F          | 	byte	"_"
32b90     00          | 	byte	0
32b91                 | LR__5874
32b91     2E          | 	byte	"."
32b92     00          | 	byte	0
32b93                 | LR__5875
32b93     45          | 	byte	"E"
32b94     00          | 	byte	0
32b95                 | LR__5876
32b95     65          | 	byte	"e"
32b96     00          | 	byte	0
32b97                 | LR__5877
32b97     2D          | 	byte	"-"
32b98     00          | 	byte	0
32b99                 | LR__5878
32b99     61          | 	byte	"a"
32b9a     00          | 	byte	0
32b9b                 | LR__5879
32b9b     66          | 	byte	"f"
32b9c     00          | 	byte	0
32b9d                 | LR__5880
32b9d     30          | 	byte	"0"
32b9e     00          | 	byte	0
32b9f                 | LR__5881
32b9f     31          | 	byte	"1"
32ba0     00          | 	byte	0
32ba1                 | LR__5882
32ba1     5F          | 	byte	"_"
32ba2     00          | 	byte	0
32ba3                 | LR__5883
32ba3     2D          | 	byte	"-"
32ba4     00          | 	byte	0
32ba5                 | LR__5884
32ba5     65          | 	byte	"e"
32ba6     00          | 	byte	0
32ba7                 | LR__5885
32ba7     2E          | 	byte	"."
32ba8     00          | 	byte	0
32ba9                 | LR__5886
32ba9     45          | 	byte	"E"
32baa     00          | 	byte	0
32bab                 | LR__5887
32bab     65          | 	byte	"e"
32bac     00          | 	byte	0
32bad                 | LR__5888
32bad     30          | 	byte	"0"
32bae     00          | 	byte	0
32baf                 | LR__5889
32baf     39          | 	byte	"9"
32bb0     00          | 	byte	0
32bb1                 | LR__5890
32bb1     24          | 	byte	"$"
32bb2     00          | 	byte	0
32bb3                 | LR__5891
32bb3     25          | 	byte	"%"
32bb4     00          | 	byte	0
32bb5                 | LR__5892
32bb5     2D          | 	byte	"-"
32bb6     00          | 	byte	0
32bb7                 | LR__5893
32bb7     24          | 	byte	"$"
32bb8     00          | 	byte	0
32bb9                 | LR__5894
32bb9     25          | 	byte	"%"
32bba     00          | 	byte	0
32bbb                 | LR__5895
32bbb     30          | 	byte	"0"
32bbc     00          | 	byte	0
32bbd                 | LR__5896
32bbd     39          | 	byte	"9"
32bbe     00          | 	byte	0
32bbf                 | LR__5897
32bbf     5F          | 	byte	"_"
32bc0     00          | 	byte	0
32bc1                 | LR__5898
32bc1     30          | 	byte	"0"
32bc2     00          | 	byte	0
32bc3                 | LR__5899
32bc3     39          | 	byte	"9"
32bc4     00          | 	byte	0
32bc5                 | LR__5900
32bc5     61          | 	byte	"a"
32bc6     00          | 	byte	0
32bc7                 | LR__5901
32bc7     66          | 	byte	"f"
32bc8     00          | 	byte	0
32bc9                 | LR__5902
32bc9     5F          | 	byte	"_"
32bca     00          | 	byte	0
32bcb                 | LR__5903
32bcb     30          | 	byte	"0"
32bcc     00          | 	byte	0
32bcd                 | LR__5904
32bcd     31          | 	byte	"1"
32bce     00          | 	byte	0
32bcf                 | LR__5905
32bcf     5F          | 	byte	"_"
32bd0     00          | 	byte	0
32bd1                 | LR__5906
32bd1     30          | 	byte	"0"
32bd2     00          | 	byte	0
32bd3                 | LR__5907
32bd3     39          | 	byte	"9"
32bd4     00          | 	byte	0
32bd5                 | LR__5908
32bd5     5F          | 	byte	"_"
32bd6     00          | 	byte	0
32bd7                 | LR__5909
32bd7     22          | 	byte	34
32bd8     00          | 	byte	0
32bd9                 | LR__5910
32bd9     22          | 	byte	34
32bda     00          | 	byte	0
32bdb                 | LR__5911
32bdb     44 69 6D 3A 
32bdf     20 61 74 20 
32be3     6C 69 6E 65 
32be7     20          | 	byte	"Dim: at line "
32be8     00          | 	byte	0
32be9                 | LR__5912
32be9     3A 20 77 61 
32bed     72 6E 69 6E 
32bf1     67 3A 20 74 
32bf5     68 65 20 76 
32bf9     61 72 69 61 
32bfd     62 6C 65 20 
32c01     65 78 69 73 
32c05     74 65 64 2E | 	byte	": warning: the variable existed."
32c09     00          | 	byte	0
32c0a                 | LR__5913
32c0a     28          | 	byte	"("
32c0b     00          | 	byte	0
32c0c                 | LR__5914
32c0c     61 73       | 	byte	"as"
32c0e     00          | 	byte	0
32c0f                 | LR__5915
32c0f     61 73       | 	byte	"as"
32c11     00          | 	byte	0
32c12                 | LR__5916
32c12     2C          | 	byte	","
32c13     00          | 	byte	0
32c14                 | LR__5917
32c14     29          | 	byte	")"
32c15     00          | 	byte	0
32c16                 | LR__5918
32c16     29          | 	byte	")"
32c17     00          | 	byte	0
32c18                 | LR__5919
32c18     61 73       | 	byte	"as"
32c1a     00          | 	byte	0
32c1b                 | LR__5920
32c1b     62 79 74 65 | 	byte	"byte"
32c1f     00          | 	byte	0
32c20                 | LR__5921
32c20     75 62 79 74 
32c24     65          | 	byte	"ubyte"
32c25     00          | 	byte	0
32c26                 | LR__5922
32c26     73 68 6F 72 
32c2a     74          | 	byte	"short"
32c2b     00          | 	byte	0
32c2c                 | LR__5923
32c2c     75 73 68 6F 
32c30     72 74       | 	byte	"ushort"
32c32     00          | 	byte	0
32c33                 | LR__5924
32c33     6C 6F 6E 67 | 	byte	"long"
32c37     00          | 	byte	0
32c38                 | LR__5925
32c38     69 6E 74 65 
32c3c     67 65 72    | 	byte	"integer"
32c3f     00          | 	byte	0
32c40                 | LR__5926
32c40     75 6C 6F 6E 
32c44     67          | 	byte	"ulong"
32c45     00          | 	byte	0
32c46                 | LR__5927
32c46     69 6E 74 36 
32c4a     34          | 	byte	"int64"
32c4b     00          | 	byte	0
32c4c                 | LR__5928
32c4c     75 69 6E 74 
32c50     36 34       | 	byte	"uint64"
32c52     00          | 	byte	0
32c53                 | LR__5929
32c53     73 69 6E 67 
32c57     6C 65       | 	byte	"single"
32c59     00          | 	byte	0
32c5a                 | LR__5930
32c5a     64 6F 75 62 
32c5e     6C 65       | 	byte	"double"
32c60     00          | 	byte	0
32c61                 | LR__5931
32c61     73 74 72 69 
32c65     6E 67       | 	byte	"string"
32c67     00          | 	byte	0
32c68                 | LR__5932
32c68     74 6F       | 	byte	"to"
32c6a     00          | 	byte	0
32c6b                 | LR__5933
32c6b     73 74 65 70 | 	byte	"step"
32c6f     00          | 	byte	0
32c70                 | LR__5934
32c70     73 2E       | 	byte	"s."
32c72     00          | 	byte	0
32c73                 | LR__5935
32c73     73 2E       | 	byte	"s."
32c75     00          | 	byte	0
32c76                 | LR__5936
32c76     67 6F 74 6F | 	byte	"goto"
32c7a     00          | 	byte	0
32c7b                 | LR__5937
32c7b     67 6F 73 75 
32c7f     62          | 	byte	"gosub"
32c80     00          | 	byte	0
32c81                 | LR__5938
32c81     24          | 	byte	"$"
32c82     00          | 	byte	0
32c83                 | LR__5939
32c83     26 68       | 	byte	"&h"
32c85     00          | 	byte	0
32c86                 | LR__5940
32c86     25          | 	byte	"%"
32c87     00          | 	byte	0
32c88                 | LR__5941
32c88     26 62       | 	byte	"&b"
32c8a     00          | 	byte	0
32c8b                 | LR__5942
32c8b                 | 	byte	
32c8b     00          | 	byte	0
32c8c                 | LR__5943
32c8c     61 63 6F 73 
32c90     3A 20       | 	byte	"acos: "
32c92     00          | 	byte	0
32c93                 | LR__5944
32c93     61 73 63 3A 
32c97     20          | 	byte	"asc: "
32c98     00          | 	byte	0
32c99                 | LR__5945
32c99     61 73 63 3A 
32c9d     20          | 	byte	"asc: "
32c9e     00          | 	byte	0
32c9f                 | LR__5946
32c9f     61 73 69 6E 
32ca3     3A 20       | 	byte	"asin: "
32ca5     00          | 	byte	0
32ca6                 | LR__5947
32ca6     61 74 6E 3A 
32caa     20          | 	byte	"atn: "
32cab     00          | 	byte	0
32cac                 | LR__5948
32cac     62 6C 69 74 
32cb0     3A 20       | 	byte	"blit: "
32cb2     00          | 	byte	0
32cb3                 | LR__5949
32cb3     62 69 6E 24 
32cb7     3A 20       | 	byte	"bin$: "
32cb9     00          | 	byte	0
32cba                 | LR__5950
32cba     2F          | 	byte	"/"
32cbb     00          | 	byte	0
32cbc                 | LR__5951
32cbc     2F 73 64 2F 
32cc0     62 69 6E 2F | 	byte	"/sd/bin/"
32cc4     00          | 	byte	0
32cc5                 | LR__5952
32cc5     53 79 73 74 
32cc9     65 6D 20 65 
32ccd     72 72 6F 72 
32cd1     20          | 	byte	"System error "
32cd2     00          | 	byte	0
32cd3                 | LR__5953
32cd3     3A 20       | 	byte	": "
32cd5     00          | 	byte	0
32cd6                 | LR__5954
32cd6     2A          | 	byte	"*"
32cd7     00          | 	byte	0
32cd8                 | LR__5955
32cd8     2E 2E       | 	byte	".."
32cda     00          | 	byte	0
32cdb                 | LR__5956
32cdb     2F          | 	byte	"/"
32cdc     00          | 	byte	0
32cdd                 | LR__5957
32cdd     2F          | 	byte	"/"
32cde     00          | 	byte	0
32cdf                 | LR__5958
32cdf     53 79 73 74 
32ce3     65 6D 20 65 
32ce7     72 72 6F 72 
32ceb     20          | 	byte	"System error "
32cec     00          | 	byte	0
32ced                 | LR__5959
32ced     3A 20       | 	byte	": "
32cef     00          | 	byte	0
32cf0                 | LR__5960
32cf0     43 75 72 72 
32cf4     65 6E 74 20 
32cf8     64 69 72 65 
32cfc     63 74 6F 72 
32d00     79 3A 20    | 	byte	"Current directory: "
32d03     00          | 	byte	0
32d04                 | LR__5961
32d04     2F          | 	byte	"/"
32d05     00          | 	byte	0
32d06                 | LR__5962
32d06     53 79 73 74 
32d0a     65 6D 20 65 
32d0e     72 72 6F 72 
32d12     20          | 	byte	"System error "
32d13     00          | 	byte	0
32d14                 | LR__5963
32d14     3A 20       | 	byte	": "
32d16     00          | 	byte	0
32d17                 | LR__5964
32d17     43 75 72 72 
32d1b     65 6E 74 20 
32d1f     64 69 72 65 
32d23     63 74 6F 72 
32d27     79 3A 20    | 	byte	"Current directory: "
32d2a     00          | 	byte	0
32d2b                 | LR__5965
32d2b     2F          | 	byte	"/"
32d2c     00          | 	byte	0
32d2d                 | LR__5966
32d2d     2F          | 	byte	"/"
32d2e     00          | 	byte	0
32d2f                 | LR__5967
32d2f     2F          | 	byte	"/"
32d30     00          | 	byte	0
32d31                 | LR__5968
32d31     53 79 73 74 
32d35     65 6D 20 65 
32d39     72 72 6F 72 
32d3d     20          | 	byte	"System error "
32d3e     00          | 	byte	0
32d3f                 | LR__5969
32d3f     3A 20       | 	byte	": "
32d41     00          | 	byte	0
32d42                 | LR__5970
32d42     43 75 72 72 
32d46     65 6E 74 20 
32d4a     64 69 72 65 
32d4e     63 74 6F 72 
32d52     79 3A 20    | 	byte	"Current directory: "
32d55     00          | 	byte	0
32d56                 | LR__5971
32d56     63 68 72 24 
32d5a     3A 20       | 	byte	"chr$: "
32d5c     00          | 	byte	0
32d5d                 | LR__5972
32d5d     63 68 61 6E 
32d61     6E 65 6C 23 
32d65     20 65 78 70 
32d69     65 63 74 65 
32d6d     64          | 	byte	"channel# expected"
32d6e     00          | 	byte	0
32d6f                 | LR__5973
32d6f     63 6F 67 69 
32d73     6E 69 74 3A 
32d77     20          | 	byte	"coginit: "
32d78     00          | 	byte	0
32d79                 | LR__5974
32d79     53 79 73 74 
32d7d     65 6D 20 65 
32d81     72 72 6F 72 
32d85     20 2D 20    | 	byte	"System error - "
32d88     00          | 	byte	0
32d89                 | LR__5975
32d89     20 69 6E 20 
32d8d     6C 69 6E 65 
32d91     20          | 	byte	" in line "
32d92     00          | 	byte	0
32d93                 | LR__5976
32d93     3A 20       | 	byte	": "
32d95     00          | 	byte	0
32d96                 | LR__5977
32d96     2C 20 66 69 
32d9a     6C 65 20 6E 
32d9e     61 6D 65 3A 
32da2     20          | 	byte	", file name: "
32da3     00          | 	byte	0
32da4                 | LR__5978
32da4     53 79 73 74 
32da8     65 6D 20 65 
32dac     72 72 6F 72 
32db0     20 2D 20    | 	byte	"System error - "
32db3     00          | 	byte	0
32db4                 | LR__5979
32db4     20 69 6E 20 
32db8     6C 69 6E 65 
32dbc     20          | 	byte	" in line "
32dbd     00          | 	byte	0
32dbe                 | LR__5980
32dbe     3A 20       | 	byte	": "
32dc0     00          | 	byte	0
32dc1                 | LR__5981
32dc1     2C 20 66 69 
32dc5     6C 65 20 6E 
32dc9     61 6D 65 3A 
32dcd     20          | 	byte	", file name: "
32dce     00          | 	byte	0
32dcf                 | LR__5982
32dcf     63 6F 73 3A 
32dd3     20          | 	byte	"cos: "
32dd4     00          | 	byte	0
32dd5                 | LR__5983
32dd5                 | 	byte	
32dd5     00          | 	byte	0
32dd6                 | LR__5984
32dd6                 | 	byte	
32dd6     00          | 	byte	0
32dd7                 | LR__5985
32dd7     2F 73 64 2F 
32ddb     6D 65 64 69 
32ddf     61 2F 68 2F | 	byte	"/sd/media/h/"
32de3     00          | 	byte	0
32de4                 | LR__5986
32de4     53 79 73 74 
32de8     65 6D 20 65 
32dec     72 72 6F 72 
32df0     20          | 	byte	"System error "
32df1     00          | 	byte	0
32df2                 | LR__5987
32df2     3A 20       | 	byte	": "
32df4     00          | 	byte	0
32df5                 | LR__5988
32df5                 | 	byte	
32df5     00          | 	byte	0
32df6                 | LR__5989
32df6                 | 	byte	
32df6     00          | 	byte	0
32df7                 | LR__5990
32df7     2F 73 64 2F 
32dfb     6D 65 64 69 
32dff     61 2F 73 2F | 	byte	"/sd/media/s/"
32e03     00          | 	byte	0
32e04                 | LR__5991
32e04     53 79 73 74 
32e08     65 6D 20 65 
32e0c     72 72 6F 72 
32e10     20          | 	byte	"System error "
32e11     00          | 	byte	0
32e12                 | LR__5992
32e12     3A 20       | 	byte	": "
32e14     00          | 	byte	0
32e15                 | LR__5993
32e15     2F          | 	byte	"/"
32e16     00          | 	byte	0
32e17                 | LR__5994
32e17     2F          | 	byte	"/"
32e18     00          | 	byte	0
32e19                 | LR__5995
32e19     2F          | 	byte	"/"
32e1a     00          | 	byte	0
32e1b                 | LR__5996
32e1b     43 61 6E 6E 
32e1f     6F 74 20 64 
32e23     65 6C 65 74 
32e27     65 20 66 69 
32e2b     6C 65 20 6F 
32e2f     72 20 66 69 
32e33     6C 65 20 64 
32e37     6F 65 73 6E 
32e3b     27 74 20 65 
32e3f     78 69 73 74 
32e43     3A 20 73 79 
32e47     73 74 65 6D 
32e4b     20 65 72 72 
32e4f     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
32e52     00          | 	byte	0
32e53                 | LR__5997
32e53     43 75 72 72 
32e57     65 6E 74 20 
32e5b     64 69 72 65 
32e5f     63 74 6F 72 
32e63     79 3A 20    | 	byte	"Current directory: "
32e66     00          | 	byte	0
32e67                 | LR__5998
32e67                 | 	byte	
32e67     00          | 	byte	0
32e68                 | LR__5999
32e68     2A          | 	byte	"*"
32e69     00          | 	byte	0
32e6a                 | LR__6000
32e6a                 | 	byte	
32e6a     00          | 	byte	0
32e6b                 | LR__6001
32e6b     5B 64 69 72 
32e6f     5D 20       | 	byte	"[dir] "
32e71     00          | 	byte	0
32e72                 | LR__6002
32e72     4D 6F 72 65 
32e76     20 74 68 61 
32e7a     6E 20 31 32 
32e7e     38 20 65 6E 
32e82     74 72 69 65 
32e86     73 20 66 6F 
32e8a     75 6E 64 3A 
32e8e     20 63 6C 65 
32e92     61 6E 20 79 
32e96     6F 75 72 20 
32e9a     64 69 72 65 
32e9e     63 74 6F 72 
32ea2     79          | 	byte	"More than 128 entries found: clean your directory"
32ea3     00          | 	byte	0
32ea4                 | LR__6003
32ea4     2A          | 	byte	"*"
32ea5     00          | 	byte	0
32ea6                 | LR__6004
32ea6                 | 	byte	
32ea6     00          | 	byte	0
32ea7                 | LR__6005
32ea7     4D 6F 72 65 
32eab     20 74 68 61 
32eaf     6E 20 31 32 
32eb3     38 20 65 6E 
32eb7     74 72 69 65 
32ebb     73 20 66 6F 
32ebf     75 6E 64 3A 
32ec3     20 63 6C 65 
32ec7     61 6E 20 79 
32ecb     6F 75 72 20 
32ecf     64 69 72 65 
32ed3     63 74 6F 72 
32ed7     79          | 	byte	"More than 128 entries found: clean your directory"
32ed8     00          | 	byte	0
32ed9                 | LR__6006
32ed9     45 72 72 6F 
32edd     72 20       | 	byte	"Error "
32edf     00          | 	byte	0
32ee0                 | LR__6007
32ee0     3A 20       | 	byte	": "
32ee2     00          | 	byte	0
32ee3                 | LR__6008
32ee3     66 69 6E 64 
32ee7     66 69 72 73 
32eeb     74 3A 20    | 	byte	"findfirst: "
32eee     00          | 	byte	0
32eef                 | LR__6009
32eef     66 69 6E 64 
32ef3     66 69 72 73 
32ef7     74 3A 20    | 	byte	"findfirst: "
32efa     00          | 	byte	0
32efb                 | LR__6010
32efb     66 69 6E 64 
32eff     66 69 72 73 
32f03     74 3A 20    | 	byte	"findfirst: "
32f06     00          | 	byte	0
32f07                 | LR__6011
32f07                 | 	byte	
32f07     00          | 	byte	0
32f08                 | LR__6012
32f08     66 69 6E 64 
32f0c     66 69 72 73 
32f10     74 3A 20    | 	byte	"findfirst: "
32f13     00          | 	byte	0
32f14                 | LR__6013
32f14                 | 	byte	
32f14     00          | 	byte	0
32f15                 | LR__6014
32f15     64 69 72    | 	byte	"dir"
32f18     00          | 	byte	0
32f19                 | LR__6015
32f19     66 69 6E 64 
32f1d     6E 65 78 74 
32f21     3A 20       | 	byte	"findnext: "
32f23     00          | 	byte	0
32f24                 | LR__6016
32f24     67 65 74 63 
32f28     6F 6C 6F 72 
32f2c     20          | 	byte	"getcolor "
32f2d     00          | 	byte	0
32f2e                 | LR__6017
32f2e     67 65 74 65 
32f32     6E 76 73 75 
32f36     73 74 61 69 
32f3a     6E 3A 20    | 	byte	"getenvsustain: "
32f3d     00          | 	byte	0
32f3e                 | LR__6018
32f3e     67 65 74 70 
32f42     69 78 65 6C 
32f46     3A 20       | 	byte	"getpixel: "
32f48     00          | 	byte	0
32f49                 | LR__6019
32f49     67 65 74 72 
32f4d     65 61 6C 66 
32f51     72 65 71 3A 
32f55     20          | 	byte	"getrealfreq: "
32f56     00          | 	byte	0
32f57                 | LR__6020
32f57     68 65 78 24 
32f5b     3A 20       | 	byte	"hex$: "
32f5d     00          | 	byte	0
32f5e                 | LR__6021
32f5e                 | 	byte	
32f5e     00          | 	byte	0
32f5f                 | LR__6022
32f5f     49 6E 20 69 
32f63     6E 70 75 74 
32f67     3A 20       | 	byte	"In input: "
32f69     00          | 	byte	0
32f6a                 | LR__6023
32f6a     2C          | 	byte	","
32f6b     00          | 	byte	0
32f6c                 | LR__6024
32f6c                 | 	byte	
32f6c     00          | 	byte	0
32f6d                 | LR__6025
32f6d                 | 	byte	
32f6d     00          | 	byte	0
32f6e                 | LR__6026
32f6e     6C 65 66 74 
32f72     24 3A 20    | 	byte	"left$: "
32f75     00          | 	byte	0
32f76                 | LR__6027
32f76     6C 65 66 74 
32f7a     24 3A 20    | 	byte	"left$: "
32f7d     00          | 	byte	0
32f7e                 | LR__6028
32f7e     6C 65 6E 3A 
32f82     20          | 	byte	"len: "
32f83     00          | 	byte	0
32f84                 | LR__6029
32f84     6C 65 6E 3A 
32f88     20          | 	byte	"len: "
32f89     00          | 	byte	0
32f8a                 | LR__6030
32f8a                 | 	byte	
32f8a     00          | 	byte	0
32f8b                 | LR__6031
32f8b     2F          | 	byte	"/"
32f8c     00          | 	byte	0
32f8d                 | LR__6032
32f8d     2F          | 	byte	"/"
32f8e     00          | 	byte	0
32f8f                 | LR__6033
32f8f     2E 62 61 73 | 	byte	".bas"
32f93     00          | 	byte	0
32f94                 | LR__6034
32f94     53 79 73 74 
32f98     65 6D 20 65 
32f9c     72 72 6F 72 
32fa0     20          | 	byte	"System error "
32fa1     00          | 	byte	0
32fa2                 | LR__6035
32fa2     3A 20       | 	byte	": "
32fa4     00          | 	byte	0
32fa5                 | LR__6036
32fa5     2E 62 61 73 | 	byte	".bas"
32fa9     00          | 	byte	0
32faa                 | LR__6037
32faa     2F          | 	byte	"/"
32fab     00          | 	byte	0
32fac                 | LR__6038
32fac                 | 	byte	
32fac     00          | 	byte	0
32fad                 | LR__6039
32fad     4C 6F 61 64 
32fb1     65 64 20    | 	byte	"Loaded "
32fb4     00          | 	byte	0
32fb5                 | LR__6040
32fb5     2F          | 	byte	"/"
32fb6     00          | 	byte	0
32fb7                 | LR__6041
32fb7     6C 6F 67 3A 
32fbb     20          | 	byte	"log: "
32fbc     00          | 	byte	0
32fbd                 | LR__6042
32fbd     6D 69 64 24 
32fc1     3A 20       | 	byte	"mid$: "
32fc3     00          | 	byte	0
32fc4                 | LR__6043
32fc4     6D 69 64 24 
32fc8     3A 20       | 	byte	"mid$: "
32fca     00          | 	byte	0
32fcb                 | LR__6044
32fcb     43 61 6E 6E 
32fcf     6F 74 20 63 
32fd3     72 65 61 74 
32fd7     65 20 61 20 
32fdb     64 69 72 65 
32fdf     63 74 6F 72 
32fe3     79 3A 20 73 
32fe7     79 73 74 65 
32feb     6D 20 65 72 
32fef     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
32ff3     00          | 	byte	0
32ff4                 | LR__6045
32ff4     20 42 41 53 
32ff8     49 43 20 62 
32ffc     79 74 65 73 
33000     20 66 72 65 
33004     65          | 	byte	" BASIC bytes free"
33005     00          | 	byte	0
33006                 | LR__6046
33006                 | 	byte	
33006     00          | 	byte	0
33007                 | LR__6047
33007                 | 	byte	
33007     00          | 	byte	0
33008                 | LR__6048
33008                 | 	byte	
33008     00          | 	byte	0
33009                 | LR__6049
33009     6E 6F 6E 61 
3300d     6D 65 2E 62 
33011     61 73       | 	byte	"noname.bas"
33013     00          | 	byte	0
33014                 | LR__6050
33014     66 69 6C 65 
33018     6E 61 6D 65 
3301c     20 65 78 70 
33020     65 63 74 65 
33024     64          | 	byte	"filename expected"
33025     00          | 	byte	0
33026                 | LR__6051
33026     72 65 61 64 | 	byte	"read"
3302a     00          | 	byte	0
3302b                 | LR__6052
3302b     77 72 69 74 
3302f     65          | 	byte	"write"
33030     00          | 	byte	0
33031                 | LR__6053
33031     61 70 70 65 
33035     6E 64       | 	byte	"append"
33037     00          | 	byte	0
33038                 | LR__6054
33038     63 68 61 6E 
3303c     6E 65 6C 23 
33040     20 65 78 70 
33044     65 63 74 65 
33048     64          | 	byte	"channel# expected"
33049     00          | 	byte	0
3304a                 | LR__6055
3304a     4F 70 65 6E 
3304e     3A 20 69 6E 
33052     76 61 6C 69 
33056     64 20 6D 6F 
3305a     64 65       | 	byte	"Open: invalid mode"
3305c     00          | 	byte	0
3305d                 | LR__6056
3305d     70 61 64 72 
33061     78 3A 20    | 	byte	"padrx: "
33064     00          | 	byte	0
33065                 | LR__6057
33065     70 61 64 72 
33069     79 3A 20    | 	byte	"padry: "
3306c     00          | 	byte	0
3306d                 | LR__6058
3306d     70 61 64 72 
33071     7A 3A 20    | 	byte	"padrz: "
33074     00          | 	byte	0
33075                 | LR__6059
33075     70 61 64 73 
33079     3A 20       | 	byte	"pads: "
3307b     00          | 	byte	0
3307c                 | LR__6060
3307c     70 61 64 77 
33080     3A 20       | 	byte	"padw: "
33082     00          | 	byte	0
33083                 | LR__6061
33083     70 61 64 78 
33087     3A 20       | 	byte	"padx: "
33089     00          | 	byte	0
3308a                 | LR__6062
3308a     70 61 64 79 
3308e     3A 20       | 	byte	"pady: "
33090     00          | 	byte	0
33091                 | LR__6063
33091     70 61 64 7A 
33095     3A 20       | 	byte	"padz: "
33097     00          | 	byte	0
33098                 | LR__6064
33098     50 72 69 6E 
3309c     74 20 74 6F 
330a0     20 63 68 61 
330a4     6E 6E 65 6C 
330a8     20 28 6E 6F 
330ac     74 20 79 65 
330b0     74 20 69 6D 
330b4     70 6C 65 6D 
330b8     65 6E 74 65 
330bc     64 29       | 	byte	"Print to channel (not yet implemented)"
330be     00          | 	byte	0
330bf                 | LR__6065
330bf                 | 	byte	
330bf     00          | 	byte	0
330c0                 | LR__6066
330c0     64 61 74 61 | 	byte	"data"
330c4     00          | 	byte	0
330c5                 | LR__6067
330c5                 | 	byte	
330c5     00          | 	byte	0
330c6                 | LR__6068
330c6     49 6E 20 72 
330ca     65 61 64 3A 
330ce     20          | 	byte	"In read: "
330cf     00          | 	byte	0
330d0                 | LR__6069
330d0                 | 	byte	
330d0     00          | 	byte	0
330d1                 | LR__6070
330d1                 | 	byte	
330d1     00          | 	byte	0
330d2                 | LR__6071
330d2     27          | 	byte	"'"
330d3     00          | 	byte	0
330d4                 | LR__6072
330d4     2C          | 	byte	","
330d5     00          | 	byte	0
330d6                 | LR__6073
330d6                 | 	byte	
330d6     00          | 	byte	0
330d7                 | LR__6074
330d7                 | 	byte	
330d7     00          | 	byte	0
330d8                 | LR__6075
330d8                 | 	byte	
330d8     00          | 	byte	0
330d9                 | LR__6076
330d9                 | 	byte	
330d9     00          | 	byte	0
330da                 | LR__6077
330da                 | 	byte	
330da     00          | 	byte	0
330db                 | LR__6078
330db     72 69 67 68 
330df     74 24 3A 20 | 	byte	"right$: "
330e3     00          | 	byte	0
330e4                 | LR__6079
330e4     72 69 67 68 
330e8     74 24 3A 20 | 	byte	"right$: "
330ec     00          | 	byte	0
330ed                 | LR__6080
330ed     72 6E 64 3A 
330f1     20          | 	byte	"rnd: "
330f2     00          | 	byte	0
330f3                 | LR__6081
330f3     72 6E 64 3A 
330f7     20          | 	byte	"rnd: "
330f8     00          | 	byte	0
330f9                 | LR__6082
330f9                 | 	byte	
330f9     00          | 	byte	0
330fa                 | LR__6083
330fa     53 74 6F 70 
330fe     70 65 64 20 
33102     61 74 20 6C 
33106     69 6E 65 20 | 	byte	"Stopped at line "
3310a     00          | 	byte	0
3310b                 | LR__6084
3310b                 | 	byte	
3310b     00          | 	byte	0
3310c                 | LR__6085
3310c     2F          | 	byte	"/"
3310d     00          | 	byte	0
3310e                 | LR__6086
3310e                 | 	byte	
3310e     00          | 	byte	0
3310f                 | LR__6087
3310f     53 61 76 65 
33113     64 20 61 73 
33117     20          | 	byte	"Saved as "
33118     00          | 	byte	0
33119                 | LR__6088
33119     2F          | 	byte	"/"
3311a     00          | 	byte	0
3311b                 | LR__6089
3311b     73 65 74 63 
3311f     6F 6C 6F 72 
33123     3A 20       | 	byte	"setcolor: "
33125     00          | 	byte	0
33126                 | LR__6090
33126     73 69 6E 3A 
3312a     20          | 	byte	"sin: "
3312b     00          | 	byte	0
3312c                 | LR__6091
3312c     73 71 72 3A 
33130     20          | 	byte	"sqr: "
33131     00          | 	byte	0
33132                 | LR__6092
33132     73 74 69 63 
33136     6B 3A 20    | 	byte	"stick: "
33139     00          | 	byte	0
3313a                 | LR__6093
3313a     73 74 72 24 
3313e     3A 20       | 	byte	"str$: "
33140     00          | 	byte	0
33141                 | LR__6094
33141     73 74 72 69 
33145     67 3A 20    | 	byte	"strig: "
33148     00          | 	byte	0
33149                 | LR__6095
33149     74 61 6E 3A 
3314d     20          | 	byte	"tan: "
3314e     00          | 	byte	0
3314f                 | LR__6096
3314f     76 61 6C 3A 
33153     20          | 	byte	"val: "
33154     00          | 	byte	0
33155                 | LR__6097
33155     76 61 6C 3A 
33159     20          | 	byte	"val: "
3315a     00          | 	byte	0
3315b                 | LR__6098
3315b     24          | 	byte	"$"
3315c     00          | 	byte	0
3315d                 | LR__6099
3315d     26 68       | 	byte	"&h"
3315f     00          | 	byte	0
33160                 | LR__6100
33160     25          | 	byte	"%"
33161     00          | 	byte	0
33162                 | LR__6101
33162     26 62       | 	byte	"&b"
33164     00          | 	byte	0
33165                 | LR__6102
33165                 | 	byte	
33165     00          | 	byte	0
33166                 | LR__6103
33166     45 78 70 65 
3316a     63 74 65 64 
3316e     20 6E 75 6D 
33172     62 65 72 2C 
33176     20 67 6F 74 
3317a     20 73 6F 6D 
3317e     65 74 68 69 
33182     6E 67 20 65 
33186     6C 73 65    | 	byte	"Expected number, got something else"
33189     00          | 	byte	0
3318a                 | LR__6104
3318a     43 61 6E 6E 
3318e     6F 74 20 61 
33192     64 64 20 61 
33196     20 6E 75 6D 
3319a     62 65 72 20 
3319e     74 6F 20 61 
331a2     20 73 74 72 
331a6     69 6E 67    | 	byte	"Cannot add a number to a string"
331a9     00          | 	byte	0
331aa                 | LR__6105
331aa     43 61 6E 6E 
331ae     6F 74 20 73 
331b2     75 62 73 74 
331b6     72 61 63 74 
331ba     20 73 74 72 
331be     69 6E 67 73 | 	byte	"Cannot substract strings"
331c2     00          | 	byte	0
331c3                 | LR__6106
331c3     55 6E 6B 6E 
331c7     6F 77 6E 20 
331cb     65 72 72 6F 
331cf     72 20 77 68 
331d3     69 6C 65 20 
331d7     61 64 64 69 
331db     6E 67       | 	byte	"Unknown error while adding"
331dd     00          | 	byte	0
331de                 | LR__6107
331de     55 6E 6B 6E 
331e2     6F 77 6E 20 
331e6     65 72 72 6F 
331ea     72 20 77 68 
331ee     69 6C 65 20 
331f2     73 75 62 73 
331f6     74 72 61 63 
331fa     74 69 6E 67 | 	byte	"Unknown error while substracting"
331fe     00          | 	byte	0
331ff                 | LR__6108
331ff     43 61 6E 6E 
33203     6F 74 20 64 
33207     6F 20 6C 6F 
3320b     67 69 63 20 
3320f     6F 70 65 72 
33213     61 74 69 6F 
33217     6E 20 6F 6E 
3321b     20 73 74 72 
3321f     69 6E 67 20 
33223     6F 72 20 66 
33227     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
3322b     00          | 	byte	0
3322c                 | LR__6109
3322c     55 6E 6B 6E 
33230     6F 77 6E 20 
33234     65 72 72 6F 
33238     72 20 77 68 
3323c     69 6C 65 20 
33240     64 6F 69 6E 
33244     67 20 6C 6F 
33248     67 69 63 20 
3324c     6F 70 65 72 
33250     61 74 69 6F 
33254     6E          | 	byte	"Unknown error while doing logic operation"
33255     00          | 	byte	0
33256                 | LR__6110
33256     43 61 6E 6E 
3325a     6F 74 20 6D 
3325e     75 6C 74 69 
33262     70 6C 79 20 
33266     73 74 72 69 
3326a     6E 67 73    | 	byte	"Cannot multiply strings"
3326d     00          | 	byte	0
3326e                 | LR__6111
3326e     55 6E 6B 6E 
33272     6F 77 6E 20 
33276     65 72 72 6F 
3327a     72 20 77 68 
3327e     69 6C 65 20 
33282     6D 75 6C 74 
33286     69 70 6C 79 
3328a     69 6E 67    | 	byte	"Unknown error while multiplying"
3328d     00          | 	byte	0
3328e                 | LR__6112
3328e     43 61 6E 6E 
33292     6F 74 20 64 
33296     69 76 69 64 
3329a     65 20 73 74 
3329e     72 69 6E 67 
332a2     73          | 	byte	"Cannot divide strings"
332a3     00          | 	byte	0
332a4                 | LR__6113
332a4     55 6E 6B 6E 
332a8     6F 77 6E 20 
332ac     65 72 72 6F 
332b0     72 20 77 68 
332b4     69 6C 65 20 
332b8     64 69 76 69 
332bc     64 69 6E 67 | 	byte	"Unknown error while dividing"
332c0     00          | 	byte	0
332c1                 | LR__6114
332c1     43 61 6E 6E 
332c5     6F 74 20 63 
332c9     6F 6D 70 75 
332cd     74 65 20 61 
332d1     20 70 6F 77 
332d5     65 72 20 6F 
332d9     66 20 61 20 
332dd     73 74 72 69 
332e1     6E 67       | 	byte	"Cannot compute a power of a string"
332e3     00          | 	byte	0
332e4                 | LR__6115
332e4     55 6E 6B 6E 
332e8     6F 77 6E 20 
332ec     65 72 72 6F 
332f0     72 20 77 68 
332f4     69 6C 65 20 
332f8     63 6F 6D 70 
332fc     75 74 69 6E 
33300     67 20 61 20 
33304     70 6F 77 65 
33308     72          | 	byte	"Unknown error while computing a power"
33309     00          | 	byte	0
3330a                 | LR__6116
3330a     52 69 67 68 
3330e     74 20 70 61 
33312     72 65 6E 74 
33316     68 65 73 69 
3331a     73 20 65 78 
3331e     70 65 63 74 
33322     65 64       | 	byte	"Right parenthesis expected"
33324     00          | 	byte	0
33325                 | LR__6117
33325     45 78 70 65 
33329     63 74 65 64 
3332d     20 73 74 72 
33331     69 6E 67    | 	byte	"Expected string"
33334     00          | 	byte	0
33335                 | LR__6118
33335     45 78 70 65 
33339     63 74 65 64 
3333d     20 66 6C 6F 
33341     61 74       | 	byte	"Expected float"
33343     00          | 	byte	0
33344                 | LR__6119
33344     45 78 70 65 
33348     63 74 65 64 
3334c     20 75 6E 73 
33350     69 67 6E 65 
33354     64 20 69 6E 
33358     74 65 67 65 
3335c     72          | 	byte	"Expected unsigned integer"
3335d     00          | 	byte	0
3335e                 | LR__6120
3335e     45 78 70 65 
33362     63 74 65 64 
33366     20 69 6E 74 
3336a     65 67 65 72 | 	byte	"Expected integer"
3336e     00          | 	byte	0
3336f                 | LR__6121
3336f     4E 6F 20 6D 
33373     6F 72 65 20 
33377     76 61 72 69 
3337b     61 62 6C 65 
3337f     20 73 6C 6F 
33383     74 73       | 	byte	"No more variable slots"
33385     00          | 	byte	0
33386                 | LR__6122
33386     56 61 72 69 
3338a     61 62 6C 65 
3338e     20 6E 6F 74 
33392     20 66 6F 75 
33396     6E 64       | 	byte	"Variable not found"
33398     00          | 	byte	0
33399                 | LR__6123
33399     43 6F 6D 6D 
3339d     61 20 65 78 
333a1     70 65 63 74 
333a5     65 64       | 	byte	"Comma expected"
333a7     00          | 	byte	0
333a8                 | LR__6124
333a8     43 6F 6D 6D 
333ac     61 20 6F 72 
333b0     20 73 65 6D 
333b4     69 63 6F 6C 
333b8     6F 6E 20 65 
333bc     78 70 65 63 
333c0     74 65 64    | 	byte	"Comma or semicolon expected"
333c3     00          | 	byte	0
333c4                 | LR__6125
333c4     55 6E 6B 6E 
333c8     6F 77 6E 20 
333cc     63 6F 6D 6D 
333d0     61 6E 64    | 	byte	"Unknown command"
333d3     00          | 	byte	0
333d4                 | LR__6126
333d4     53 74 61 63 
333d8     6B 20 75 6E 
333dc     64 65 72 66 
333e0     6C 6F 77    | 	byte	"Stack underflow"
333e3     00          | 	byte	0
333e4                 | LR__6127
333e4     43 61 6E 6E 
333e8     6F 74 20 65 
333ec     78 65 63 75 
333f0     74 65 20 67 
333f4     6F 74 6F 20 
333f8     6F 72 20 67 
333fc     6F 73 75 62 
33400     20 69 6E 20 
33404     74 68 65 20 
33408     69 6D 6D 65 
3340c     64 69 61 74 
33410     65 20 6D 6F 
33414     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
33416     00          | 	byte	0
33417                 | LR__6128
33417     43 61 6E 6E 
3341b     6F 74 20 6C 
3341f     6F 61 64 20 
33423     66 72 6F 6D 
33427     20 74 68 69 
3342b     73 20 66 69 
3342f     6C 65       | 	byte	"Cannot load from this file"
33431     00          | 	byte	0
33432                 | LR__6129
33432     54 68 65 20 
33436     70 72 6F 67 
3343a     72 61 6D 20 
3343e     69 73 20 65 
33442     6D 70 74 79 | 	byte	"The program is empty"
33446     00          | 	byte	0
33447                 | LR__6130
33447     49 66 20 61 
3344b     66 74 65 72 
3344f     20 69 66    | 	byte	"If after if"
33452     00          | 	byte	0
33453                 | LR__6131
33453     45 6D 70 74 
33457     79 20 65 78 
3345b     70 72 65 73 
3345f     73 69 6F 6E | 	byte	"Empty expression"
33463     00          | 	byte	0
33464                 | LR__6132
33464     53 74 72 69 
33468     6E 67 20 65 
3346c     78 70 65 63 
33470     74 65 64    | 	byte	"String expected"
33473     00          | 	byte	0
33474                 | LR__6133
33474     49 6E 74 65 
33478     72 70 72 65 
3347c     74 65 72 20 
33480     69 6E 74 65 
33484     72 6E 61 6C 
33488     20 65 72 72 
3348c     6F 72       | 	byte	"Interpreter internal error"
3348e     00          | 	byte	0
3348f                 | LR__6134
3348f     45 78 70 65 
33493     63 74 65 64 
33497     20 61 73 73 
3349b     69 67 6E    | 	byte	"Expected assign"
3349e     00          | 	byte	0
3349f                 | LR__6135
3349f     45 78 70 65 
334a3     63 74 65 64 
334a7     20 27 74 6F 
334ab     27          | 	byte	"Expected 'to'"
334ac     00          | 	byte	0
334ad                 | LR__6136
334ad     45 78 70 65 
334b1     63 74 65 64 
334b5     20 69 6E 74 
334b9     65 67 65 72 
334bd     20 76 61 72 
334c1     69 61 62 6C 
334c5     65          | 	byte	"Expected integer variable"
334c6     00          | 	byte	0
334c7                 | LR__6137
334c7     55 6E 69 6E 
334cb     69 74 69 61 
334cf     6C 69 7A 65 
334d3     64 20 76 61 
334d7     72 69 61 62 
334db     6C 65 20 69 
334df     6E 20 27 6E 
334e3     65 78 74 27 
334e7     2C 20 75 73 
334eb     65 20 27 66 
334ef     6F 72 27 20 
334f3     62 65 66 6F 
334f7     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
334f9     00          | 	byte	0
334fa                 | LR__6138
334fa     4E 6F 20 6D 
334fe     6F 72 65 20 
33502     73 6C 6F 74 
33506     73 20 66 6F 
3350a     72 20 27 66 
3350e     6F 72 27    | 	byte	"No more slots for 'for'"
33511     00          | 	byte	0
33512                 | LR__6139
33512     27 4E 65 78 
33516     74 27 20 64 
3351a     6F 65 73 6E 
3351e     27 74 20 6D 
33522     61 74 63 68 
33526     20 27 66 6F 
3352a     72 27       | 	byte	"'Next' doesn't match 'for'"
3352c     00          | 	byte	0
3352d                 | LR__6140
3352d     27 47 6F 74 
33531     6F 27 20 74 
33535     61 72 67 65 
33539     74 20 6C 69 
3353d     6E 65 20 6E 
33541     6F 74 20 66 
33545     6F 75 6E 64 | 	byte	"'Goto' target line not found"
33549     00          | 	byte	0
3354a                 | LR__6141
3354a     42 61 64 20 
3354e     6E 75 6D 62 
33552     65 72 20 6F 
33556     66 20 70 61 
3355a     72 61 6D 65 
3355e     74 65 72 73 | 	byte	"Bad number of parameters"
33562     00          | 	byte	0
33563                 | LR__6142
33563     46 75 6E 63 
33567     74 69 6F 6E 
3356b     20 75 6E 64 
3356f     65 66 69 6E 
33573     65 64 20 66 
33577     6F 72 20 73 
3357b     74 72 69 6E 
3357f     67 73       | 	byte	"Function undefined for strings"
33581     00          | 	byte	0
33582                 | LR__6143
33582     42 61 64 20 
33586     70 61 72 61 
3358a     6D 65 74 65 
3358e     72          | 	byte	"Bad parameter"
3358f     00          | 	byte	0
33590                 | LR__6144
33590     43 61 6E 6E 
33594     6F 74 20 64 
33598     65 63 6C 61 
3359c     72 65 20 61 
335a0     6E 20 61 72 
335a4     72 61 79 3A 
335a8     20 74 68 65 
335ac     20 76 61 72 
335b0     69 61 62 6C 
335b4     65 20 65 78 
335b8     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
335bc     00          | 	byte	0
335bd                 | LR__6145
335bd     45 78 70 65 
335c1     63 74 65 64 
335c5     20 27 28 27 | 	byte	"Expected '('"
335c9     00          | 	byte	0
335ca                 | LR__6146
335ca     45 78 70 65 
335ce     63 74 65 64 
335d2     20 27 29 27 
335d6     20 6F 72 20 
335da     27 2C 27    | 	byte	"Expected ')' or ','"
335dd     00          | 	byte	0
335de                 | LR__6147
335de     4E 6F 20 6D 
335e2     6F 72 65 20 
335e6     74 68 61 6E 
335ea     20 33 20 64 
335ee     69 6D 65 6E 
335f2     73 69 6F 6E 
335f6     73 20 73 75 
335fa     70 70 6F 72 
335fe     74 65 64    | 	byte	"No more than 3 dimensions supported"
33601     00          | 	byte	0
33602                 | LR__6148
33602     56 61 72 69 
33606     61 62 6C 65 
3360a     20 6E 61 6D 
3360e     65 20 65 78 
33612     70 65 63 74 
33616     65 64       | 	byte	"Variable name expected"
33618     00          | 	byte	0
33619                 | LR__6149
33619     54 79 70 65 
3361d     20 6E 61 6D 
33621     65 20 65 78 
33625     70 65 63 74 
33629     65 64       | 	byte	"Type name expected"
3362b     00          | 	byte	0
3362c                 | LR__6150
3362c     54 79 70 65 
33630     20 6E 6F 74 
33634     20 73 75 70 
33638     70 6F 72 74 
3363c     65 64 20 79 
33640     65 74       | 	byte	"Type not supported yet"
33642     00          | 	byte	0
33643                 | LR__6151
33643     41 72 72 61 
33647     79 20 69 6E 
3364b     64 65 78 20 
3364f     6F 75 74 20 
33653     6F 66 20 72 
33657     61 6E 67 65 | 	byte	"Array index out of range"
3365b     00          | 	byte	0
3365c                 | LR__6152
3365c     42 61 64 20 
33660     74 79 70 65 
33664     20 77 68 69 
33668     6C 65 20 61 
3366c     73 73 69 67 
33670     6E 69 6E 67 
33674     20 74 6F 20 
33678     61 72 72 61 
3367c     79          | 	byte	"Bad type while assigning to array"
3367d     00          | 	byte	0
3367e                 | LR__6153
3367e     54 6F 6F 20 
33682     6D 61 6E 79 
33686     20 76 61 72 
3368a     69 61 62 6C 
3368e     65 73       | 	byte	"Too many variables"
33690     00          | 	byte	0
33691                 | LR__6154
33691     27 54 68 65 
33695     6E 27 20 65 
33699     78 70 65 63 
3369d     74 65 64    | 	byte	"'Then' expected"
336a0     00          | 	byte	0
336a1                 | LR__6155
336a1     44 69 72 65 
336a5     63 74 6F 72 
336a9     79 20 64 6F 
336ad     65 73 6E 27 
336b1     74 20 65 78 
336b5     69 73 74    | 	byte	"Directory doesn't exist"
336b8     00          | 	byte	0
336b9                 | LR__6156
336b9     55 6E 65 78 
336bd     70 65 63 74 
336c1     65 64 20 65 
336c5     6E 64 20 6F 
336c9     66 20 6C 69 
336cd     6E 65       | 	byte	"Unexpected end of line"
336cf     00          | 	byte	0
336d0                 | LR__6157
336d0     4E 6F 20 6D 
336d4     6F 72 65 20 
336d8     64 61 74 61 | 	byte	"No more data"
336dc     00          | 	byte	0
336dd                 | LR__6158
336dd     45 72 72 6F 
336e1     72 20       | 	byte	"Error "
336e3     00          | 	byte	0
336e4                 | LR__6159
336e4     20 2D 20    | 	byte	" - "
336e7     00          | 	byte	0
336e8                 | LR__6160
336e8     20 69 6E 20 
336ec     6C 69 6E 65 
336f0     20          | 	byte	" in line "
336f1     00          | 	byte	0
336f2                 | LR__6161
336f2                 | 	byte	
336f2     00          | 	byte	0
336f3                 | LR__6162
336f3     2F 73 64    | 	byte	"/sd"
336f6     00          | 	byte	0
336f7                 | LR__6163
336f7     2F 73 64 2F 
336fb     62 61 73    | 	byte	"/sd/bas"
336fe     00          | 	byte	0
336ff                 | LR__6164
336ff     2F 73 64 2F 
33703     62 61 73    | 	byte	"/sd/bas"
33706     00          | 	byte	0
33707                 | LR__6165
33707     20 42 41 53 
3370b     49 43 20 62 
3370f     79 74 65 73 
33713     20 66 72 65 
33717     65          | 	byte	" BASIC bytes free"
33718     00          | 	byte	0
33719                 | LR__6166
33719     52 65 61 64 
3371d     79          | 	byte	"Ready"
3371e     00          | 	byte	0
3371f                 | LR__6167
3371f     6E 6F 6E 61 
33723     6D 65 2E 62 
33727     61 73       | 	byte	"noname.bas"
33729     00          | 	byte	0
3372a                 | LR__6168
3372a     2F 73 64 2F 
3372e     62 61 73 2F 
33732     61 75 74 6F 
33736     72 75 6E 2E 
3373a     62 61 73    | 	byte	"/sd/bas/autorun.bas"
3373d     00          | 	byte	0
3373e                 | LR__6169
3373e     72 75 6E 20 
33742     61 75 74 6F 
33746     72 75 6E 2E 
3374a     62 61 73    | 	byte	"run autorun.bas"
3374d     00          | 	byte	0
3374e                 | LR__6170
3374e                 | 	byte	
3374e     00          | 	byte	0
3374f     00          | 	alignl
33750                 | _dat_
33750     00 00 00 00 
33754     00 00 00 00 
33758     00 00 00 00 
3375c     00 00 00 00 | 	byte	$00[16]
33760     61 41 17 0E 
33764     62 42 00 00 
33768     63 43 19 10 
3376c     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
33770     65 45 18 0F 
33774     66 46 00 00 
33778     67 47 00 00 
3377c     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
33780     69 49 00 00 
33784     6A 4A 00 00 
33788     6B 4B 00 00 
3378c     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
33790     6D 4D 00 00 
33794     6E 4E 1A 11 
33798     6F 4F 1E 15 
3379c     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
337a0     71 51 00 00 
337a4     72 52 00 00 
337a8     73 53 1B 12 
337ac     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
337b0     75 55 00 00 
337b4     76 56 00 00 
337b8     77 57 00 00 
337bc     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
337c0     79 59 00 00 
337c4     7A 5A 1D 14 
337c8     31 21 04 00 
337cc     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
337d0     33 23 06 00 
337d4     34 24 07 00 
337d8     35 25 08 00 
337dc     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
337e0     37 26 0A 00 
337e4     38 2A 0B 00 
337e8     39 28 0C 00 
337ec     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
337f0     8D 8D 00 00 
337f4     9B 9B 00 00 
337f8     88 88 00 00 
337fc     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
33800     20 20 00 00 
33804     2D 5F 00 00 
33808     3D 2B 00 00 
3380c     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
33810     5D 7D 00 00 
33814     5C 7C 00 00 
33818     23 7E 00 00 
3381c     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
33820     27 22 00 00 
33824     60 7E 03 00 
33828     2C 3C 00 00 
3382c     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
33830     2F 3F 00 00 
33834     B9 B9 00 00 
33838     BA 00 00 00 
3383c     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
33840     BC 00 00 00 
33844     BD 00 00 00 
33848     BE 00 00 00 
3384c     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
33850     C0 00 00 00 
33854     C1 00 00 00 
33858     C2 00 00 00 
3385c     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
33860     C4 00 00 00 
33864     C5 00 00 00 
33868     C6 00 00 00 
3386c     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
33870     C8 00 00 00 
33874     C9 00 00 00 
33878     CA 00 00 00 
3387c     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
33880     7F 7F 00 00 
33884     CC 00 00 00 
33888     CD 00 00 00 
3388c     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
33890     CF 00 00 00 
33894     D0 00 00 00 
33898     D1 00 00 00 
3389c     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
338a0     2F 2F 00 00 
338a4     2A 2A 00 00 
338a8     2D 2D 00 00 
338ac     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
338b0     8D 8D 00 00 
338b4     31 31 00 00 
338b8     32 32 00 00 
338bc     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
338c0     34 34 00 00 
338c4     35 35 00 00 
338c8     36 36 00 00 
338cc     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
338d0     38 38 00 00 
338d4     39 39 00 00 
338d8     30 30 00 00 
338dc     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
338e0     5C 7C 00 00 
338e4     00 00 00 00 
338e8     00 00 00 00 
338ec     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
338f0     00 00 00 00 
      ...             
33948     00 00 00 00 
3394c     00 00 00 00 | 	byte	$00[96]
33950     2B 00 A6 F2 
33954     24 A7 09 80 
33958     5B 88 4D 89 
3395c     80 88 A5 88 | atari_spl file "atari.spl"
33960     6D 88 B8 88 
33964     80 88 CB 88 
33968     92 88 A5 88 
3396c     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
33970     A5 88 CA 88 
33974     A6 88 DD 88 
33978     B8 88 AB 89 
3397c     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
33980     C8 AD C6 F1 
33984     91 06 B6 FF 
33988     13 00 4A 00 
3398c     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
33990     5D 00 5E 00 
33994     5D 00 5E 00 
33998     5E 00 5D 00 
3399c     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
339a0     38 00 83 00 
339a4     25 00 83 00 
339a8     C3 FE D1 04 
339ac     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
339b0     48 88 38 85 
339b4     41 8A CB 88 
339b8     28 89 B8 88 
339bc     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
339c0     15 89 03 89 
339c4     02 89 15 89 
339c8     16 89 15 89 
339cc     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
339d0     15 89 3A 89 
339d4     72 89 E3 89 
339d8     52 83 AD 97 
339dc     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
339e0     0C 02 B6 FF 
339e4     E1 00 A8 00 
339e8     F3 00 A8 00 
339ec     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
339f0     CE 00 CD 00 
339f4     CD 00 BA 00 
339f8     E1 00 BB 00 
339fc     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
33a00     DF 00 C9 FF 
33a04     E6 01 B6 06 
33a08     EE DD 8D 98 
33a0c     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
33a10     97 89 73 89 
33a14     3B 89 60 89 
33a18     60 89 60 89 
33a1c     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
33a20     73 89 72 89 
33a24     85 89 73 89 
33a28     AA 89 60 89 
33a2c     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
33a30     E8 8A 18 86 
33a34     92 88 A5 C2 
33a38     E0 00 C3 05 
33a3c     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
33a40     F2 00 64 01 
33a44     06 01 3E 01 
33a48     2B 01 2B 01 
33a4c     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
33a50     2B 01 2A 01 
33a54     2B 01 2B 01 
33a58     2B 01 18 01 
33a5c     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
33a60     39 07 61 F3 
33a64     C0 AF 37 85 
33a68     0F 88 8B 8A 
33a6c     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
33a70     AB 89 D0 89 
33a74     AB 89 D0 89 
33a78     D0 89 CF 89 
33a7c     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
33a80     D0 89 F5 89 
33a84     BD 89 08 8A 
33a88     CF 89 E8 8A 
33a8c     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
33a90     53 B3 0D F8 
33a94     F4 07 38 00 
33a98     63 01 63 01 
33a9c     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
33aa0     88 01 88 01 
33aa4     76 01 88 01 
33aa8     88 01 89 01 
33aac     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
33ab0     75 01 AE 01 
33ab4     76 01 88 01 
33ab8     4A 00 46 06 
33abc     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
33ac0     08 8A 9A 86 
33ac4     33 8B 08 8A 
33ac8     2D 8A F5 89 
33acc     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
33ad0     2D 8A 2D 8A 
33ad4     2E 8A 1B 8A 
33ad8     40 8A 2D 8A 
33adc     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
33ae0     2E 8A 79 8A 
33ae4     66 8A C8 8B 
33ae8     72 82 2B 97 
33aec     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
33af0     1D 02 05 01 
33af4     F8 01 C0 01 
33af8     0B 02 C0 01 
33afc     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
33b00     F9 01 D3 01 
33b04     F8 01 D3 01 
33b08     F8 01 D2 01 
33b0c     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
33b10     E6 01 2B 01 
33b14     8E 02 5F 07 
33b18     F7 E2 ED 9C 
33b1c     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
33b20     E8 8A 78 8A 
33b24     78 8A 65 8A 
33b28     8B 8A 78 8A 
33b2c     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
33b30     8B 8A 9D 8A 
33b34     9D 8A 8B 8A 
33b38     C2 8A 78 8A 
33b3c     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
33b40     70 8C 18 86 
33b44     8B 8A 23 C9 
33b48     CB 03 C4 05 
33b4c     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
33b50     0B 02 7B 02 
33b54     1E 02 55 02 
33b58     30 02 43 02 
33b5c     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
33b60     43 02 44 02 
33b64     43 02 30 02 
33b68     68 02 31 02 
33b6c     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
33b70     07 08 3F F7 
33b74     73 B2 13 85 
33b78     15 89 ED 8B 
33b7c     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
33b80     B0 8A FB 8A 
33b84     D5 8A FA 8A 
33b88     E8 8A FB 8A 
33b8c     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
33b90     E8 8A 21 8B 
33b94     E7 8A 33 8B 
33b98     E8 8A 26 8C 
33b9c     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
33ba0     8D B0 27 F6 
33ba4     9C 08 AD 01 
33ba8     7B 02 8D 02 
33bac     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
33bb0     A1 02 A0 02 
33bb4     A1 02 A0 02 
33bb8     A0 02 A0 02 
33bbc     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
33bc0     7B 02 D8 02 
33bc4     7B 02 C6 02 
33bc8     3E 01 C3 05 
33bcc     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
33bd0     00 8C 2A 86 
33bd4     E0 8C FA 8A 
33bd8     6A 8B FB 8A 
33bdc     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
33be0     45 8B 45 8B 
33be4     45 8B 6B 8B 
33be8     46 8B 59 8B 
33bec     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
33bf0     6B 8B 6B 8B 
33bf4     6B 8B 6B 8B 
33bf8     7D 8B 7D 8B 
33bfc     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
33c00     90 8B 91 8B 
33c04     90 8B 90 8B 
33c08     A3 8B A3 8B 
33c0c     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
33c10     B5 8B B6 8B 
33c14     B5 8B B5 8B 
33c18     B6 8B C8 8B 
33c1c     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
33c20     C8 8B DA 8B 
33c24     DB 8B DB 8B 
33c28     DB 8B DC 8B 
33c2c     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
33c30     EE 8B EE 8B 
33c34     00 8C 01 8C 
33c38     00 8C 01 8C 
33c3c     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
33c40     12 8C 13 8C 
33c44     13 8C 26 8C 
33c48     26 8C 26 8C 
33c4c     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
33c50     38 8C 38 8C 
33c54     38 8C 38 8C 
33c58     4B 8C 4B 8C 
33c5c     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
33c60     5E 8C 5E 8C 
33c64     5E 8C 5E 8C 
33c68     70 8C 70 8C 
33c6c     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
33c70     70 8C 83 8C 
33c74     83 8C 83 8C 
33c78     83 8C 96 8C 
33c7c     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
33c80     95 8C A9 8C 
33c84     A9 8C A8 8C 
33c88     A8 8C A8 8C 
33c8c     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
33c90     BB 8C BB 8C 
33c94     BB 8C CE 8C 
33c98     CE 8C CE 8C 
33c9c     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
33ca0     E0 8C E1 8C 
33ca4     E1 8C E0 8C 
33ca8     F4 8C F2 8C 
33cac     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
33cb0     05 8D 05 8D 
33cb4     06 8D 06 8D 
33cb8     19 8D 19 8D 
33cbc     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
33cc0     18 8D 2B 8D 
33cc4     2B 8D 2B 8D 
33cc8     2A 8D 3E 8D 
33ccc     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
33cd0     3E 8D 51 8D 
33cd4     50 8D 50 8D 
33cd8     50 8D 51 8D 
33cdc     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
33ce0     63 8D 64 8D 
33ce4     76 8D 75 8D 
33ce8     75 8D 76 8D 
33cec     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
33cf0     88 8D 88 8D 
33cf4     89 8D 9B 8D 
33cf8     9A 8D 9B 8D 
33cfc     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
33d00     AD 8D AE 8D 
33d04     AD 8D AE 8D 
33d08     C1 8D C1 8D 
33d0c     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
33d10     D3 8D D3 8D 
33d14     D3 8D D3 8D 
33d18     D3 8D E6 8D 
33d1c     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
33d20     E6 8D E6 8D 
33d24     F9 8D F9 8D 
33d28     F9 8D F8 8D 
33d2c     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
33d30     0B 8E 0B 8E 
33d34     1D 8E 1D 8E 
33d38     1E 8E 1E 8E 
33d3c     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
33d40     31 8E 31 8E 
33d44     31 8E 42 8E 
33d48     43 8E 43 8E 
33d4c     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
33d50     56 8E 56 8E 
33d54     55 8E 56 8E 
33d58     68 8E 69 8E 
33d5c     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
33d60     69 8E 7B 8E 
33d64     7C 8E 7B 8E 
33d68     7B 8E 8D 8E 
33d6c     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
33d70     8D 8E A1 8E 
33d74     A0 8E A1 8E 
33d78     A1 8E A0 8E 
33d7c     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
33d80     B3 8E B3 8E 
33d84     C6 8E C5 8E 
33d88     C6 8E C6 8E 
33d8c     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
33d90     D8 8E D9 8E 
33d94     D8 8E EC 8E 
33d98     EB 8E EC 8E 
33d9c     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
33da0     FE 8E FE 8E 
33da4     FE 8E FE 8E 
33da8     10 8F 10 8F 
33dac     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
33db0     11 8F 23 8F 
33db4     24 8F 23 8F 
33db8     24 8F 37 8F 
33dbc     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
33dc0     36 8F 36 8F 
33dc4     48 8F 49 8F 
33dc8     49 8F 49 8F 
33dcc     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
33dd0     5B 8F 5C 8F 
33dd4     5B 8F 6E 8F 
33dd8     6E 8F 6E 8F 
33ddc     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
33de0     81 8F 81 8F 
33de4     81 8F 81 8F 
33de8     93 8F 93 8F 
33dec     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
33df0     93 8F A6 8F 
33df4     A6 8F A6 8F 
33df8     A6 8F B9 8F 
33dfc     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
33e00     B9 8F B9 8F 
33e04     CC 8F CB 8F 
33e08     CB 8F CC 8F 
33e0c     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
33e10     DF 8F DE 8F 
33e14     DE 8F F1 8F 
33e18     F1 8F F1 8F 
33e1c     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
33e20     03 90 04 90 
33e24     04 90 04 90 
33e28     16 90 17 90 
33e2c     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
33e30     29 90 28 90 
33e34     29 90 28 90 
33e38     29 90 3C 90 
33e3c     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
33e40     3C 90 4F 90 
33e44     4E 90 4E 90 
33e48     4E 90 4E 90 
33e4c     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
33e50     61 90 61 90 
33e54     73 90 74 90 
33e58     74 90 74 90 
33e5c     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
33e60     87 90 86 90 
33e64     87 90 86 90 
33e68     99 90 99 90 
33e6c     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
33e70     AB 90 AB 90 
33e74     AC 90 AB 90 
33e78     AB 90 BF 90 
33e7c     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
33e80     BE 90 D1 90 
33e84     D0 90 D1 90 
33e88     D1 90 D1 90 
33e8c     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
33e90     E3 90 E4 90 
33e94     F6 90 F6 90 
33e98     F6 90 F6 90 
33e9c     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
33ea0     09 91 0A 91 
33ea4     0A 91 1C 91 
33ea8     1C 91 1C 91 
33eac     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
33eb0     2F 91 2E 91 
33eb4     2F 91 2F 91 
33eb8     2E 91 41 91 
33ebc     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
33ec0     41 91 53 91 
33ec4     54 91 54 91 
33ec8     53 91 54 91 
33ecc     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
33ed0     67 91 67 91 
33ed4     79 91 7A 91 
33ed8     79 91 78 91 
33edc     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
33ee0     8C 91 8B 91 
33ee4     8C 91 8C 91 
33ee8     9E 91 9E 91 
33eec     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
33ef0     B1 91 B1 91 
33ef4     B2 91 B1 91 
33ef8     B1 91 C4 91 
33efc     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
33f00     C4 91 D6 91 
33f04     D7 91 D7 91 
33f08     D7 91 D6 91 
33f0c     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
33f10     EA 91 EA 91 
33f14     EA 91 FC 91 
33f18     FC 91 FB 91 
33f1c     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
33f20     0E 92 0F 92 
33f24     0F 92 0E 92 
33f28     21 92 21 92 
33f2c     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
33f30     21 92 34 92 
33f34     33 92 34 92 
33f38     34 92 47 92 
33f3c     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
33f40     46 92 47 92 
33f44     59 92 59 92 
33f48     59 92 59 92 
33f4c     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
33f50     6C 92 6C 92 
33f54     6B 92 7E 92 
33f58     7E 92 7E 92 
33f5c     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
33f60     92 92 91 92 
33f64     91 92 90 92 
33f68     91 92 A4 92 
33f6c     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
33f70     A3 92 B6 92 
33f74     B6 92 B7 92 
33f78     B7 92 B6 92 
33f7c     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
33f80     CA 92 C9 92 
33f84     CA 92 DC 92 
33f88     DC 92 DC 92 
33f8c     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
33f90     EF 92 EF 92 
33f94     EF 92 EF 92 
33f98     01 93 01 93 
33f9c     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
33fa0     15 93 14 93 
33fa4     14 93 14 93 
33fa8     14 93 27 93 
33fac     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
33fb0     27 93 39 93 
33fb4     3A 93 39 93 
33fb8     39 93 39 93 
33fbc     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
33fc0     4B 93 4C 93 
33fc4     5F 93 5F 93 
33fc8     5F 93 5E 93 
33fcc     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
33fd0     5F 93 84 93 
33fd4     4C 93 96 93 
33fd8     5F 93 AE 94 
33fdc     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
33fe0     7B C1 00 00 
33fe4     00 00 00 00 
33fe8     00 00 00 00 
33fec     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33ff0     00 00 00 00 | 	byte	$00, $00, $00, $00
33ff4     7A D7 00 80 
33ff8     87 8A 48 8F 
33ffc     EC 8C 76 8D 
34000     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
34004     3C 8D 82 8D 
34008     42 8D 88 8D 
3400c     8C 8D 8E 8D 
34010     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
34014     97 8D DE 8D 
34018     E1 8D F1 8E 
3401c     D8 8C A3 83 
34020     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
34024     65 71 C9 65 
34028     FC 64 C4 65 
3402c     C1 65 BF 65 
34030     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
34034     B6 65 B4 65 
34038     B2 65 AE 65 
3403c     AC 65 ED 65 
34040     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
34044     5E 65 25 66 
34048     FA 62 23 6B 
3404c     B5 6C 61 0A 
34050     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
34054     5D 90 BE 8D 
34058     47 8E C3 8D 
3405c     09 8E C9 8D 
34060     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
34064     15 8E 19 8E 
34068     1B 8E 62 8E 
3406c     64 8E 68 8E 
34070     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
34074     B5 8E 4C 90 
34078     FA 84 3C 9D 
3407c     98 13 79 6D 
34080     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
34084     D9 66 50 66 
34088     D4 66 4B 66 
3408c     8C 66 46 66 
34090     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
34094     81 66 3A 66 
34098     7C 66 36 66 
3409c     76 66 30 66 
340a0     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
340a4     6B 66 88 72 
340a8     BF 37 E7 B7 
340ac     75 83 8B 8E 
340b0     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
340b4     94 8E 96 8E 
340b8     DD 8E 9C 8E 
340bc     E2 8E A2 8E 
340c0     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
340c4     EE 8E AE 8E 
340c8     38 8F B5 8E 
340cc     3F 8F FD 8E 
340d0     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
340d4     A5 87 1E E3 
340d8     6D 5D FA 71 
340dc     41 64 25 67 
340e0     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
340e4     D9 66 1A 67 
340e8     18 67 15 67 
340ec     12 67 0F 67 
340f0     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
340f4     07 67 C0 66 
340f8     01 67 BC 66 
340fc     B8 66 DE 64 
34100     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
34104     43 E5 1F 8B 
34108     14 8A F1 90 
3410c     1C 8F 63 8F 
34110     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
34114     29 8F 6E 8F 
34118     72 8F 75 8F 
3411c     34 8F BE 8F 
34120     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
34124     84 8F 87 8F 
34128     CC 8F 56 90 
3412c     67 91 49 80 
34130     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
34134     46 77 A6 66 
34138     E8 66 B0 67 
3413c     AD 67 ED 67 
34140     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
34144     A2 67 E3 67 
34148     9D 67 9A 67 
3414c     98 67 94 67 
34150     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
34154     49 67 CD 67 
34158     28 65 5F 6E 
3415c     82 67 3A 01 
34160     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
34164     C2 91 A9 8F 
34168     EF 8F AE 8F 
3416c     F4 8F B5 8F 
34170     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
34174     01 90 03 90 
34178     07 90 09 90 
3417c     0C 90 53 90 
34180     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
34184     18 90 44 93 
34188     85 84 D6 9D 
3418c     87 1F 2F 75 
34190     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
34194     C4 68 F6 67 
34198     BE 68 F1 67 
3419c     76 68 2E 68 
341a0     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
341a4     27 68 24 68 
341a8     64 68 1E 68 
341ac     5F 68 19 68 
341b0     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
341b4     DC 68 56 72 
341b8     7E 36 C2 B8 
341bc     D7 84 73 90 
341c0     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
341c4     7B 90 7F 90 
341c8     82 90 84 90 
341cc     CB 90 8B 90 
341d0     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
341d4     D7 90 96 90 
341d8     20 91 59 90 
341dc     25 91 A2 90 
341e0     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
341e4     D0 89 40 EE 
341e8     12 64 C4 71 
341ec     29 66 0C 69 
341f0     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
341f4     C0 68 02 69 
341f8     FE 68 FB 68 
341fc     F9 68 F6 68 
34200     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
34204     EE 68 A8 68 
34208     2C 69 5F 68 
3420c     E2 68 81 66 
34210     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
34214     1E EB A6 8A 
34218     73 8B 5E 93 
3421c     7B 90 48 91 
34220     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
34224     0D 91 11 91 
34228     14 91 16 91 
3422c     5C 91 1C 91 
34230     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
34234     68 91 AF 91 
34238     2A 91 B5 91 
3423c     75 91 1A 94 
34240     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
34244     70 0E CB 6C 
34248     5D 6E C4 67 
3424c     99 69 54 69 
34250     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
34254     D2 69 49 69 
34258     89 69 86 69 
3425c     40 69 C4 69 
34260     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
34264     35 69 76 69 
34268     58 67 EB 6D 
3426c     E9 6D 89 0F 
34270     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
34274     33 94 94 91 
34278     D9 91 56 91 
3427c     E0 91 9F 91 
34280     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
34284     EC 91 EE 91 
34288     F1 91 F4 91 
3428c     F7 91 3D 92 
34290     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
34294     46 92 21 94 
34298     11 89 A4 9D 
3429c     FD 0E 8F 6C 
342a0     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
342a4     28 6A E1 69 
342a8     65 6A 1F 6A 
342ac     5F 6A 1A 6A 
342b0     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
342b4     54 6A 0F 6A 
342b8     4F 6A 09 6A 
342bc     06 6A 03 6A 
342c0     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
342c4     23 68 69 77 
342c8     3A 4D 38 CA 
342cc     38 86 4E 91 
342d0     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
342d4     64 92 24 92 
342d8     6A 92 2A 92 
342dc     70 92 30 92 
342e0     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
342e4     7B 92 7E 92 
342e8     C5 92 84 92 
342ec     CB 92 8A 92 
342f0     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
342f4     4D 8D F9 E2 
342f8     97 59 FE 74 
342fc     DB 68 6D 6A 
34300     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
34304     A8 6A A5 6A 
34308     A3 6A 9F 6A 
3430c     9D 6A 9B 6A 
34310     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
34314     D6 6A 8F 6A 
34318     CF 6A 46 6A 
3431c     CA 6A E1 67 
34320     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
34324     D3 F7 15 92 
34328     90 8C BF 94 
3432c     A6 92 EB 92 
34330     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
34334     B1 92 F7 92 
34338     FA 92 FD 92 
3433c     00 93 02 93 
34340     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
34344     4F 93 52 93 
34348     54 93 22 94 
3434c     5A 93 8F 88 
34350     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
34354     1C 77 07 6C 
34358     E8 69 7A 6B 
3435c     34 6B 75 6B 
34360     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
34364     29 6B 26 6B 
34368     24 6B 21 6B 
3436c     1D 6B 5E 6B 
34370     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
34374     12 6B 52 6B 
34378     34 69 34 6E 
3437c     BA 73 A4 24 
34380     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
34384     7A 94 B3 93 
34388     72 93 31 93 
3438c     78 93 7A 93 
34390     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
34394     83 93 86 93 
34398     89 93 D0 93 
3439c     D2 93 D5 93 
343a0     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
343a4     DD 93 40 96 
343a8     30 8B 99 9C 
343ac     52 10 94 71 
343b0     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
343b4     46 6C 79 6B 
343b8     40 6C B7 6B 
343bc     F7 6B B1 6B 
343c0     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
343c4     EC 6B A5 6B 
343c8     A2 6B 9F 6B 
343cc     9D 6B 9A 6B 
343d0     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
343d4     C8 6A E4 76 
343d8     20 4B F9 CE 
343dc     2E 8A 1A 92 
343e0     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
343e4     FB 93 BA 93 
343e8     01 94 03 94 
343ec     4A 94 09 94 
343f0     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
343f4     55 94 14 94 
343f8     9E 94 1A 94 
343fc     61 94 20 94 
34400     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
34404     3E 87 E5 CD 
34408     5F 50 6C 78 
3440c     B5 6A 04 6C 
34410     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
34414     83 6C 7F 6C 
34418     7C 6C 36 6C 
3441c     76 6C 74 6C 
34420     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
34424     6B 6C 25 6C 
34428     66 6C 1F 6C 
3442c     1D 6C 41 6A 
34430     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
34434     BA FA FC 94 
34438     5B 8D 97 96 
3443c     3B 94 C5 94 
34440     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
34444     89 94 8C 94 
34448     8F 94 92 94 
3444c     94 94 DB 94 
34450     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
34454     E4 94 E7 94 
34458     2D 95 74 95 
3445c     C8 96 15 89 
34460     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
34464     CB 75 31 6F 
34468     7E 6B 10 6D 
3446c     C9 6C 0A 6D 
34470     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
34474     BD 6C FF 6C 
34478     FB 6C F9 6C 
3447c     B2 6C F3 6C 
34480     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
34484     A7 6C E8 6C 
34488     0D 6B 85 6F 
3448c     C7 74 10 28 
34490     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
34494     96 96 47 95 
34498     06 95 0A 95 
3449c     0C 95 0F 95 
344a0     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
344a4     17 95 5E 95 
344a8     61 95 63 95 
344ac     22 95 AC 95 
344b0     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
344b4     72 95 17 98 
344b8     59 8E 01 96 
344bc     CF FC 5A 68 
344c0     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
344c4     96 6D 50 6D 
344c8     D5 6D 4A 6D 
344cc     8C 6D 89 6D 
344d0     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
344d4     80 6D 3A 6D 
344d8     7A 6D 77 6D 
344dc     75 6D 71 6D 
344e0     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
344e4     18 6C BC 78 
344e8     9A 4F 7E CF 
344ec     1F 89 F1 93 
344f0     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
344f4     D2 95 4E 95 
344f8     D7 95 53 95 
344fc     DD 95 E0 95 
34500     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
34504     A5 95 EB 95 
34508     EE 95 F0 95 
3450c     37 96 B3 95 
34510     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
34514     1A 98 D5 8D 
34518     C5 9F CD 0F 
3451c     0F 71 F3 73 
34520     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
34524     D9 6D 5E 6E 
34528     D3 6D 58 6E 
3452c     12 6E 0F 6E 
34530     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
34534     49 6E BF 6D 
34538     87 6E 76 6D 
3453c     81 6E 11 6B 
34540     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
34544     3F 09 44 95 
34548     E5 8D 3F 99 
3454c     D4 95 A2 96 
34550     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
34554     23 96 69 96 
34558     6B 96 6E 96 
3455c     71 96 74 96 
34560     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
34564     BF 96 3C 96 
34568     C6 96 C8 96 
3456c     A3 98 51 8D 
34570     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
34574     CF 75 29 73 
34578     90 6C EC 6E 
3457c     62 6E E7 6E 
34580     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
34584     9A 6E 98 6E 
34588     95 6E 91 6E 
3458c     8E 6E CF 6E 
34590     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
34594     40 6E C3 6E 
34598     E8 6C 45 6F 
3459c     A5 7B C9 35 
345a0     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
345a4     2D 98 23 97 
345a8     E1 96 A0 96 
345ac     A4 96 EA 96 
345b0     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
345b4     AF 96 F4 96 
345b8     F8 96 3E 97 
345bc     FD 96 43 97 
345c0     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
345c4     08 97 6B 99 
345c8     D6 92 88 91 
345cc     D8 EE 84 66 
345d0     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
345d4     2E 6F E7 6E 
345d8     6C 6F 24 6F 
345dc     21 6F 1F 6F 
345e0     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
345e4     17 6F 13 6F 
345e8     54 6F 0E 6F 
345ec     0B 6F 4B 6F 
345f0     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
345f4     27 6D 1C 7B 
345f8     19 59 9F DB 
345fc     66 8E BC 94 
34600     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
34604     67 97 26 97 
34608     6D 97 2B 97 
3460c     72 97 32 97 
34610     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
34614     C1 97 7F 97 
34618     C6 97 85 97 
3461c     CB 97 CE 97 
34620     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
34624     EC 8A C4 C6 
34628     68 4C F4 7D 
3462c     63 6E E8 6E 
34630     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
34634     ED 6F A7 6F 
34638     E7 6F A0 6F 
3463c     E1 6F 9B 6F 
34640     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
34644     D5 6F 8F 6F 
34648     CE 6F 45 6F 
3464c     86 6F 68 6D 
34650     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
34654     C0 13 AD A2 
34658     A7 8E 79 99 
3465c     E6 97 E8 97 
34660     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
34664     F1 97 F3 97 
34668     F6 97 F9 97 
3466c     FB 97 FE 97 
34670     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
34674     4A 98 0A 98 
34678     93 98 0F 98 
3467c     7F 9B BF 8C 
34680     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
34684     91 7B 62 73 
34688     1A 6E B9 70 
3468c     EB 6F B3 70 
34690     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
34694     25 70 20 70 
34698     1E 70 1B 70 
3469c     18 70 15 70 
346a0     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
346a4     0D 70 09 70 
346a8     07 70 03 70 
346ac     01 70 FD 6F 
346b0     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
346b4     F6 6F F2 6F 
346b8     EF 6F EC 6F 
346bc     2C 70 E6 6F 
346c0     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
346c4     DD 6F 97 6F 
346c8     D7 6F 84 6E 
346cc     8F 6F 3F 7D 
346d0     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
346d2     FF FF FF FF 
346d6     FF FF       | atarist_spl file "atarist.spl" '512
346d8     00 00 00 00 
346dc     00 00 00 00 
346e0     00 00       | 	byte	$00[10]
346e2     17 7F F2 7F 
346e6     B2 7F 72 7F 
346ea     33 7F F4 7E 
346ee     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
346f2     36 7E F5 7D 
346f6     E9 51 F2 0D 
346fa     8E 00 F3 FD 
346fe     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
34702     57 FD 58 FD 
34706     5B FD 5C FD 
3470a     5C FD 60 7D 
3470e     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
34712     D6 7C 98 7C 
34716     59 7C 1A 7C 
3471a     DC 7B 9E 7B 
3471e     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
34722     F3 05 00 FD 
34726     41 FB EA FA 
3472a     D9 FA DB FA 
3472e     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
34732     E4 FA 9B 36 
34736     F8 7A C0 7A 
3473a     84 7A 45 7A 
3473e     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
34742     8E 79 51 79 
34746     15 79 D7 78 
3474a     3C 1F EB FF 
3474e     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
34752     6D F8 65 F8 
34756     68 F8 6D F8 
3475a     70 F8 74 F8 
3475e     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
34762     AB 60 79 60 
34766     4B 60 1A 60 
3476a     E9 5F B9 5F 
3476e     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
34772     FB 59 B2 0B 
34776     92 FA 3A F7 
3477a     96 F6 79 F6 
3477e     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
34782     82 F6 86 F6 
34786     8C F6 DB 5D 
3478a     F1 5E C1 5E 
3478e     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
34792     34 5E 04 5E 
34796     D6 5D A6 5D 
3479a     78 5D D4 3E 
3479e     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
347a2     27 F5 BA F4 
347a6     AB F4 AD F4 
347aa     B2 F4 B8 F4 
347ae     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
347b2     26 5D 2B 5D 
347b6     FC 5C CD 5C 
347ba     9F 5C 70 5C 
347be     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
347c2     E5 5B B8 5B 
347c6     DB 24 A7 FC 
347ca     D1 F4 4D F3 
347ce     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
347d2     04 F3 0B F3 
347d6     11 F3 16 F3 
347da     DE 18 98 5B 
347de     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
347e2     4E 4A 29 48 
347e6     A0 47 6A 47 
347ea     43 47 20 47 
347ee     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
347f2     E2 F6 98 F2 
347f6     C5 F1 A3 F1 
347fa     A3 F1 A8 F1 
347fe     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
34802     BF F1 00 3D 
34806     EF 46 CD 46 
3480a     AA 46 86 46 
3480e     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
34812     1C 46 F9 45 
34816     D7 45 EE 43 
3481a     DE 02 E8 F3 
3481e     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
34822     61 F0 65 F0 
34826     6D F0 74 F0 
3482a     7C F0 84 F0 
3482e     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
34832     8E 45 6D 45 
34836     49 45 27 45 
3483a     05 45 E1 44 
3483e     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
34842     F1 2F A9 FB 
34846     8B F1 9B EF 
3484a     40 EF 36 EF 
3484e     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
34852     4D EF 56 EF 
34856     5E EF 7B 44 
3485a     8C 44 69 44 
3485e     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
34862     03 44 E1 43 
34866     C0 43 F5 37 
3486a     69 33 0F 11 
3486e     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
34872     66 EE 37 EE 
34876     38 EE 40 EE 
3487a     48 EE 51 EE 
3487e     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
34882     7D 32 6A 32 
34886     51 32 37 32 
3488a     1F 32 05 32 
3488e     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
34892     B9 31 A1 31 
34896     F1 04 F4 F1 
3489a     50 EE A0 ED 
3489e     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
348a2     93 ED 9A ED 
348a6     A4 ED AD ED 
348aa     F4 27 C1 31 
348ae     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
348b2     78 31 5F 31 
348b6     46 31 2E 31 
348ba     15 31 FC 30 
348be     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
348c2     C4 EF 4A ED 
348c6     DC EC CB EC 
348ca     D2 EC DA EC 
348ce     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
348d2     F9 EC 64 2F 
348d6     0A 31 F1 30 
348da     D9 30 C0 30 
348de     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
348e2     78 30 5F 30 
348e6     46 30 38 23 
348ea     A6 F6 19 EE 
348ee     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
348f2     20 EC 28 EC 
348f6     32 EC 3C EC 
348fa     47 EC 51 EC 
348fe     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
34902     A3 22 93 22 
34906     7F 22 6E 22 
3490a     5D 22 4C 22 
3490e     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
34912     77 09 76 F1 
34916     CC EC F0 EB 
3491a     CD EB CE EB 
3491e     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
34922     ED EB F5 EB 
34926     3E F6 6B 22 
3492a     5F 22 4E 22 
3492e     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
34932     1B 22 0B 22 
34936     FA 21 E9 21 
3493a     D8 21 4D FF 
3493e     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
34942     92 EB 7B EB 
34946     82 EB 8C EB 
3494a     97 EB A1 EB 
3494e     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
34952     15 22 04 22 
34956     F3 21 E3 21 
3495a     D2 21 C0 21 
3495e     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
34962     8E 21 7D 21 
34966     9A F8 A4 ED 
3496a     8E EB 2F EB 
3496e     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
34972     37 EB 42 EB 
34976     4C EB 57 EB 
3497a     B2 17 22 19 
3497e     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
34982     FD 18 EF 18 
34986     E3 18 D6 18 
3498a     CA 18 BD 18 
3498e     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
34992     60 EC 35 EB 
34996     01 EB 01 EB 
3499a     0C EB 16 EB 
3499e     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
349a2     34 EB D0 18 
349a6     00 19 F4 18 
349aa     E8 18 DA 18 
349ae     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
349b2     B6 18 A9 18 
349b6     9D 18 91 05 
349ba     F0 EF CA EB 
349be     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
349c2     E8 EA F2 EA 
349c6     FE EA 07 EB 
349ca     12 EB C2 EF 
349ce     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
349d2     D9 18 CD 18 
349d6     C0 18 B3 18 
349da     A7 18 9B 18 
349de     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
349e2     B8 FC 30 EE 
349e6     61 EB DC EA 
349ea     CD EA D2 EA 
349ee     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
349f2     F3 EA FE EA 
349f6     D2 09 D1 18 
349fa     C3 18 17 18 
349fe     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
34a02     66 11 52 11 
34a06     49 11 41 11 
34a0a     38 11 E0 F4 
34a0e     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
34a12     C9 EA C5 EA 
34a16     CF EA DB EA 
34a1a     E6 EA EF EA 
34a1e     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
34a22     89 11 80 11 
34a26     78 11 6E 11 
34a2a     67 11 5D 11 
34a2e     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
34a32     43 11 32 0D 
34a36     9C F1 07 EC 
34a3a     F8 EA CD EA 
34a3e     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
34a42     E4 EA ED EA 
34a46     F8 EA 02 EB 
34a4a     55 11 91 11 
34a4e     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
34a52     75 11 6E 11 
34a56     64 11 5E 11 
34a5a     54 11 4A 11 
34a5e     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
34a62     A8 EB F1 EA 
34a66     D9 EA DC EA 
34a6a     E8 EA F1 EA 
34a6e     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
34a72     A6 EB 9E 11 
34a76     A0 11 96 11 
34a7a     8D 11 85 11 
34a7e     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
34a82     6A 11 CA 0D 
34a86     36 0B 57 F8 
34a8a     6C ED 57 EB 
34a8e     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
34a92     F4 EA FF EA 
34a96     09 EB 15 EB 
34a9a     1E EB 1A FD 
34a9e     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
34aa2     ED 0A E8 0A 
34aa6     E2 0A DC 0A 
34aaa     D6 0A D1 0A 
34aae     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
34ab2     F8 F3 BC EC 
34ab6     57 EB 1E EB 
34aba     18 EB 24 EB 
34abe     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
34ac2     42 EB 4D EB 
34ac6     08 09 20 0B 
34aca     1A 0B 14 0B 
34ace     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
34ad2     04 0B FE 0A 
34ad6     F9 0A F2 0A 
34ada     84 08 3A F1 
34ade     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
34ae2     42 EB 42 EB 
34ae6     4E EB 57 EB 
34aea     62 EB 6B EB 
34aee     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
34af2     48 0B 43 0B 
34af6     3C 0B 36 0B 
34afa     31 0B 2C 0B 
34afe     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
34b02     1B 0B 5C 00 
34b06     6A EF 1B EC 
34b0a     81 EB 6A EB 
34b0e     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
34b12     85 EB 8E EB 
34b16     99 EB A3 EB 
34b1a     DD 05 E5 05 
34b1e     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
34b22     DB 05 D8 05 
34b26     D5 05 D1 05 
34b2a     D0 05 CB 05 
34b2e     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
34b32     0C EC BB EB 
34b36     B3 EB BB EB 
34b3a     C5 EB D0 EB 
34b3e     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
34b42     E4 F7 2C 06 
34b46     28 06 24 06 
34b4a     22 06 1F 06 
34b4e     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
34b52     16 06 14 06 
34b56     0F 06 D0 F3 
34b5a     65 ED 2D EC 
34b5e     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
34b62     01 EC 0A EC 
34b66     14 EC 1E EC 
34b6a     29 EC FB 03 
34b6e     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
34b72     63 06 60 06 
34b76     5E 06 59 06 
34b7a     58 06 54 06 
34b7e     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
34b82     69 F1 21 ED 
34b86     55 EC 33 EC 
34b8a     36 EC 40 EC 
34b8e     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
34b92     5C EC 68 EC 
34b96     92 02 D9 02 
34b9a     D7 02 D7 02 
34b9e     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
34ba2     D1 02 D1 02 
34ba6     CE 02 CD 02 
34baa     5D FC 80 EF 
34bae     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
34bb2     83 EC 8A EC 
34bb6     93 EC 9C EC 
34bba     A5 EC B1 EC 
34bbe     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
34bc2     2B 03 2A 03 
34bc6     29 03 26 03 
34bca     25 03 24 03 
34bce     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
34bd2     1F 03 70 F7 
34bd6     D0 EE 27 ED 
34bda     DB EC D4 EC 
34bde     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
34be2     F0 EC FA EC 
34be6     02 ED F9 F4 
34bea     7B 03 7C 03 
34bee     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
34bf2     75 03 73 03 
34bf6     72 03 70 03 
34bfa     6D 03 6C 03 
34bfe     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
34c02     54 ED 22 ED 
34c06     22 ED 2C ED 
34c0a     35 ED 3F ED 
34c0e     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
34c12     14 01 C3 03 
34c16     C1 03 C0 03 
34c1a     5F 01 A5 00 
34c1e     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
34c22     7B 00 7C 00 
34c26     20 00 85 F1 
34c2a     2A EE 89 ED 
34c2e     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
34c32     80 ED 87 ED 
34c36     90 ED 9A ED 
34c3a     A3 ED 73 00 
34c3e     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
34c42     D0 00 D0 00 
34c46     D0 00 D0 00 
34c4a     D0 00 CF 00 
34c4e     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
34c52     80 F0 3D EE 
34c56     D5 ED C7 ED 
34c5a     CD ED D6 ED 
34c5e     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
34c62     F2 ED FA ED 
34c66     1D 01 29 01 
34c6a     27 01 27 01 
34c6e     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
34c72     25 01 26 01 
34c76     26 01 23 01 
34c7a     D0 F7 EC EF 
34c7e     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
34c82     1C EE 24 EE 
34c86     2D EE 37 EE 
34c8a     40 EE 47 EE 
34c8e     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
34c92     7D 01 7B 01 
34c96     7A 01 7A 01 
34c9a     79 01 78 01 
34c9e     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
34ca2     84 FE DE F3 
34ca6     6C EF 93 EE 
34caa     72 EE 72 EE 
34cae     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
34cb2     8B EE 95 EE 
34cb6     9E EE 15 FC 
34cba     67 FE 67 FE 
34cbe     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
34cc2     6B FE 6B FE 
34cc6     6D FE 6D FE 
34cca     6D FE 6F FE 
34cce     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
34cd2     DF EE CC EE 
34cd6     CF EE D9 EE 
34cda     E1 EE EA EE 
34cde     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
34ce2     5A FE C4 FE 
34ce6     C3 FE C5 FE 
34cea     C6 FE C6 FE 
34cee     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
34cf2     C8 FE C7 FE 
34cf6     DA FB 85 F1 
34cfa     8D EF 31 EF 
34cfe     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
34d02     34 EF 3E EF 
34d06     46 EF 4F EF 
34d0a     57 EF 0D FF 
34d0e     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
34d12     1F FF 1F FF 
34d16     21 FF 21 FF 
34d1a     21 FF 21 FF 
34d1e     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
34d22     15 F1 BE EF 
34d26     84 EF 7E EF 
34d2a     88 EF 8F EF 
34d2e     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
34d32     A9 EF 06 F2 
34d36     A6 FC AB FC 
34d3a     AD FC AE FC 
34d3e     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
34d42     B2 FC B4 FC 
34d46     B6 FC B7 FC 
34d4a     8B F4 BD F0 
34d4e     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
34d52     E4 EF EE EF 
34d56     F6 EF FD EF 
34d5a     04 F0 0E F0 
34d5e     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
34d62     0B FD 0D FD 
34d66     0F FD 11 FD 
34d6a     11 FD 13 FD 
34d6e     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
34d72     17 FD 64 F3 
34d76     CD F0 52 F0 
34d7a     41 F0 45 F0 
34d7e     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
34d82     5B F0 64 F0 
34d86     6D F0 FB FC 
34d8a     65 FD 68 FD 
34d8e     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
34d92     6C FD 6D FD 
34d96     6F FD 70 FD 
34d9a     72 FD B3 FB 
34d9e     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
34da2     A4 F0 99 F0 
34da6     A0 F0 A8 F0 
34daa     AE F0 B9 F0 
34dae     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
34db2     CB FB DD FB 
34db6     DE FB E0 FB 
34dba     E3 FB E3 FB 
34dbe     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
34dc2     E9 FB EC FB 
34dc6     62 F7 27 F2 
34dca     2A F1 FF F0 
34dce     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
34dd2     0C F1 13 F1 
34dd6     1B F1 23 F1 
34dda     33 F2 3C FC 
34dde     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
34de2     42 FC 45 FC 
34de6     47 FC 48 FC 
34dea     4A FC 4C FC 
34dee     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
34df2     20 F2 77 F1 
34df6     5C F1 5F F1 
34dfa     64 F1 6C F1 
34dfe     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
34e02     83 F1 DC F8 
34e06     9A FC 9A FC 
34e0a     9B FC 9E FC 
34e0e     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
34e12     A3 FC A4 FC 
34e16     A6 FC A9 FC 
34e1a     90 F4 33 F2 
34e1e     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
34e22     BA F1 BF F1 
34e26     C7 F1 CE F1 
34e2a     D6 F1 DC F1 
34e2e     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
34e32     F3 FC F5 FC 
34e36     FE FB 79 FB 
34e3a     62 FB 5F FB 
34e3e     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
34e42     6F FA AF F3 
34e46     53 F2 12 F2 
34e4a     0F F2 15 F2 
34e4e     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
34e52     2A F2 32 F2 
34e56     38 F2 9A FB 
34e5a     AF FB B1 FB 
34e5e     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
34e62     B7 FB B8 FB 
34e66     BA FB BC FB 
34e6a     C1 FB 3B F8 
34e6e     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
34e72     6E F2 6C F2 
34e76     74 F2 7A F2 
34e7a     81 F2 87 F2 
34e7e     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
34e82     06 FC 09 FC 
34e86     0C FC 0E FC 
34e8a     0F FC 12 FC 
34e8e     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
34e92     17 FC 1A FC 
34e96     B2 F6 7B F3 
34e9a     DD F2 C5 F2 
34e9e     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
34ea2     D4 F2 DB F2 
34ea6     E0 F2 E8 F2 
34eaa     28 F8 60 FC 
34eae     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
34eb2     64 FC 66 FC 
34eb6     68 FC 6A FC 
34eba     6D FC 52 FC 
34ebe     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
34ec2     78 F3 24 F3 
34ec6     1A F3 1E F3 
34eca     24 F3 2A F3 
34ece     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
34ed2     3D F3 80 FA 
34ed6     0C FB 0F FB 
34eda     10 FB 14 FB 
34ede     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
34ee2     1B FB 1D FB 
34ee6     1F FB 92 FA 
34eea     DE F4 AE F3 
34eee     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
34ef2     79 F3 7E F3 
34ef6     84 F3 8C F3 
34efa     92 F3 97 F3 
34efe     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
34f02     67 FB 69 FB 
34f06     6B FB 6F FB 
34f0a     71 FB 72 FB 
34f0e     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
34f12     E3 F8 BA F4 
34f16     EE F3 CC F3 
34f1a     CA F3 CF F3 
34f1e     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
34f22     E2 F3 E8 F3 
34f26     ED F3 B7 FB 
34f2a     BC FB BE FB 
34f2e     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
34f32     C4 FB C6 FB 
34f36     C8 FB C9 FB 
34f3a     CC FB 8F F7 
34f3e     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
34f42     1E F4 1E F4 
34f46     24 F4 2A F4 
34f4a     30 F4 38 F4 
34f4e     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
34f52     AD FA B1 FA 
34f56     B4 FA B6 FA 
34f5a     BA FA BB FA 
34f5e     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
34f62     C2 FA C6 FA 
34f66     55 F6 C6 F4 
34f6a     7D F4 72 F4 
34f6e     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
34f72     83 F4 89 F4 
34f76     8F F4 94 F4 
34f7a     66 FA 03 FB 
34f7e     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
34f82     0A FB 0E FB 
34f86     10 FB 11 FB 
34f8a     16 FB 18 FB 
34f8e     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
34f92     F9 F4 CA F4 
34f96     C5 F4 CB F4 
34f9a     D1 F4 D7 F4 
34f9e     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
34fa2     E8 F4 3F FB 
34fa6     56 FB 58 FB 
34faa     5A FB 5E FB 
34fae     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
34fb2     64 FB 64 FB 
34fb6     69 FB 99 F9 
34fba     E9 F5 33 F5 
34fbe     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
34fc2     1D F5 22 F5 
34fc6     27 F5 2E F5 
34fca     32 F5 37 F5 
34fce     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
34fd2     BC FA BC FA 
34fd6     C1 FA C2 FA 
34fda     C4 FA C8 FA 
34fde     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
34fe2     F9 F7 DB F5 
34fe6     78 F5 69 F5 
34fea     6A F5 70 F5 
34fee     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
34ff2     7F F5 85 F5 
34ff6     6E F7 06 FB 
34ffa     0A FB 0B FB 
34ffe     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
35002     14 FB 15 FB 
35006     18 FB 1B FB 
3500a     1D FB 70 F7 
3500e     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
35012     B6 F5 BB F5 
35016     C0 F5 C6 F5 
3501a     CA F5 CF F5 
3501e     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
35022     54 FB 56 FB 
35026     5A FB 5B FB 
3502a     5E FB 5F FB 
3502e     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
35032     67 FB 52 FB 
35036     29 F7 33 F6 
3503a     06 F6 02 F6 
3503e     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
35042     10 F6 16 F6 
35046     1A F6 1F F6 
3504a     81 FB 9F FB 
3504e     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
35052     51 FB F2 FA 
35056     E3 FA E3 FA 
3505a     E5 FA E9 FA 
3505e     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
35062     64 F6 4D F6 
35066     4D F6 53 F6 
3506a     57 F6 5C F6 
3506e     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
35072     6A F6 19 FB 
35076     1E FB 22 FB 
3507a     23 FB 24 FB 
3507e     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
35082     2C FB 2E FB 
35086     32 FB F0 F8 
3508a     01 F7 A5 F6 
3508e     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
35092     9F F6 A3 F6 
35096     A6 F6 AC F6 
3509a     B0 F6 EB F7 
3509e     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
350a2     68 FB 6C FB 
350a6     6E FB 71 FB 
350aa     72 FB 74 FB 
350ae     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
350b2     71 F8 21 F7 
350b6     E5 F6 DD F6 
350ba     E1 F6 E6 F6 
350be     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
350c2     F5 F6 F7 F6 
350c6     F7 FA AB FB 
350ca     AD FB AF FB 
350ce     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
350d2     B6 FB B9 FB 
350d6     BB FB BC FB 
350da     21 FB 07 F8 
350de     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
350e2     22 F7 26 F7 
350e6     2B F7 2E F7 
350ea     34 F7 38 F7 
350ee     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
350f2     13 FB 16 FB 
350f6     17 FB 1B FB 
350fa     1E FB 20 FB 
350fe     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
35102     26 FB 77 FA 
35106     F3 F7 7C F7 
3510a     67 F7 6A F7 
3510e     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
35112     74 F7 7A F7 
35116     7E F7 82 F7 
3511a     53 FB 5A FB 
3511e     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
35122     5F FB 63 FB 
35126     65 FB 67 FB 
3512a     69 FB 6A FB 
3512e     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
35132     B5 F7 A9 F7 
35136     AD F7 B0 F7 
3513a     B5 F7 B8 F7 
3513e     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
35142     6E F8 99 FB 
35146     9C FB 9D FB 
3514a     9F FB A4 FB 
3514e     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
35152     A9 FB AB FB 
35156     AD FB 46 F9 
3515a     26 F8 F0 F7 
3515e     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
35162     F4 F7 F8 F7 
35166     FB F7 FF F7 
3516a     03 F8 65 FA 
3516e     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
35172     2B FB 2F FB 
35176     30 FB 32 FB 
3517a     34 FB 38 FB 
3517e     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
35182     E9 F8 4A F8 
35186     2E F8 2C F8 
3518a     2F F8 36 F8 
3518e     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
35192     41 F8 44 F8 
35196     4A FB 67 FB 
3519a     68 FB 6B FB 
3519e     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
351a2     73 FB 74 FB 
351a6     78 FB 7A FB 
351aa     14 FB E7 F8 
351ae     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
351b2     6D F8 70 F8 
351b6     73 F8 78 F8 
351ba     7C F8 80 F8 
351be     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
351c2     A6 FB A7 FB 
351c6     A9 FB AC FB 
351ca     AF FB B1 FB 
351ce     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
351d2     B7 FB 73 FA 
351d6     F8 F8 B4 F8 
351da     A9 F8 AB F8 
351de     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
351e2     B4 F8 B8 F8 
351e6     BB F8 FA F8 
351ea     64 FB 65 FB 
351ee     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
351f2     6D FB 6F FB 
351f6     70 FB 74 FB 
351fa     77 FB 77 FB 
351fe     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
35202     E9 F8 E4 F8 
35206     E8 F8 EB F8 
3520a     EE F8 F2 F8 
3520e     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
35212     B5 FA 9F FB 
35216     A1 FB A4 FB 
3521a     A5 FB A9 FB 
3521e     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
35222     AE FB B1 FB 
35226     B2 FB C7 F9 
3522a     39 F9 22 F9 
3522e     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
35232     26 F9 2A F9 
35236     2E F9 32 F9 
3523a     33 F9 BA FB 
3523e     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
35242     DE FB E1 FB 
35246     E2 FB E4 FB 
3524a     E5 FB E7 FB 
3524e     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
35252     C5 F9 67 F9 
35256     57 F9 56 F9 
3525a     5B F9 5F F9 
3525e     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
35262     68 F9 6C F9 
35266     0B FC 11 FC 
3526a     14 FC 15 FC 
3526e     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
35272     B5 FB B5 FB 
35276     B6 FB B8 FB 
3527a     E9 FA C8 F9 
3527e     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
35282     90 F9 94 F9 
35286     95 F9 99 F9 
3528a     9D F9 9F F9 
3528e     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
35292     DE FB DF FB 
35296     E2 FB E4 FB 
3529a     E6 FB E8 FB 
3529e     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
352a2     EF FB AC FA 
352a6     E9 F9 C7 F9 
352aa     C3 F9 C8 F9 
352ae     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
352b2     D0 F9 D4 F9 
352b6     D6 F9 0E FB 
352ba     11 FC 13 FC 
352be     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
352c2     19 FC 1B FC 
352c6     1D FC 1E FC 
352ca     21 FC 22 FC 
352ce     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
352d2     F7 F9 F7 F9 
352d6     FB F9 FE F9 
352da     00 FA 03 FA 
352de     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
352e2     1B FC 45 FC 
352e6     46 FC 48 FC 
352ea     4A FC 4B FC 
352ee     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
352f2     52 FC 54 FC 
352f6     F3 FB 82 FA 
352fa     35 FA 28 FA 
352fe     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
35302     31 FA 32 FA 
35306     37 FA 37 FA 
3530a     3C FA 00 FC 
3530e     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
35312     09 FC 0B FC 
35316     0F FC 12 FC 
3531a     12 FC 15 FC 
3531e     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
35322     8D FA 60 FA 
35326     5B FA 5C FA 
3532a     60 FA 61 FA 
3532e     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
35332     6C FA 6D FA 
35336     37 FC 3A FC 
3533a     3B FC 3D FC 
3533e     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
35342     43 FC 44 FC 
35346     45 FC 47 FC 
3534a     51 FB AB FA 
3534e     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
35352     8E FA 91 FA 
35356     93 FA 95 FA 
3535a     98 FA 9B FA 
3535e     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
35362     68 FC 6A FC 
35366     6C FC 6E FC 
3536a     70 FC 72 FC 
3536e     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
35372     76 FC 3B FB 
35376     D0 FA BB FA 
3537a     B9 FA BD FA 
3537e     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
35382     C4 FA C6 FA 
35386     CA FA 13 FC 
3538a     3A FC 3A FC 
3538e     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
35392     41 FC 43 FC 
35396     44 FC 47 FC 
3539a     48 FC 3C FC 
3539e     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
353a2     E6 FA E8 FA 
353a6     EB FA EE FA 
353aa     F0 FA F2 FA 
353ae     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
353b2     61 FC 66 FC 
353b6     68 FC 6B FC 
353ba     6C FC 6E FC 
353be     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
353c2     73 FC 75 FC 
353c6     13 FC 3F FB 
353ca     17 FB 12 FB 
353ce     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
353d2     1A FB 1D FB 
353d6     1F FB 20 FB 
353da     23 FB 92 FC 
353de     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
353e2     96 FC 97 FC 
353e6     9A FC 9C FC 
353ea     9E FC 9F FC 
353ee     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
353f2     5A FB 41 FB 
353f6     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
353fa     73 32 00 04 
353fe     00 00 10 00 
35402     00 00 00 00 
35406     00 00 00 00 | atari2 file "atari2.s2"
3540a     43 87 43 87 
3540e     43 87 44 87 
35412     43 87 44 87 
35416     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3541a     43 87 43 87 
3541e     43 87 44 87 
35422     43 87 43 87 
35426     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3542a     44 87 43 87 
3542e     44 87 43 87 
35432     43 87 43 87 
35436     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3543a     43 87 43 87 
3543e     44 87 43 87 
35442     44 87 44 87 
35446     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
3544a     43 87 43 87 
3544e     44 87 43 87 
35452     43 87 42 87 
35456     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3545a     43 87 43 87 
3545e     43 87 43 87 
35462     44 87 43 87 
35466     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3546a     44 87 44 87 
3546e     43 87 44 87 
35472     43 87 44 87 
35476     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
3547a     44 87 43 87 
3547e     44 87 44 87 
35482     43 87 43 87 
35486     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3548a     43 87 44 87 
3548e     44 87 43 87 
35492     43 87 44 87 
35496     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3549a     43 87 43 87 
3549e     43 87 43 87 
354a2     43 87 43 87 
354a6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
354aa     42 87 43 87 
354ae     44 87 42 87 
354b2     43 87 43 87 
354b6     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
354ba     43 87 44 87 
354be     44 87 43 87 
354c2     43 87 43 87 
354c6     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
354ca     43 87 5C 87 
354ce     EE 86 AC 87 
354d2     4C 7C A3 78 
354d6     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
354da     BC 78 BB 78 
354de     BD 78 BC 78 
354e2     BB 78 BD 78 
354e6     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
354ea     BB 78 BB 78 
354ee     BC 78 BC 78 
354f2     BC 78 BB 78 
354f6     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
354fa     BC 78 BC 78 
354fe     BC 78 BC 78 
35502     BC 78 BC 78 
35506     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3550a     BB 78 BC 78 
3550e     A0 78 4C 7C 
35512     11 7A 29 89 
35516     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
3551a     44 87 43 87 
3551e     44 87 43 87 
35522     43 87 42 87 
35526     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3552a     43 87 43 87 
3552e     44 87 ED 85 
35532     71 85 52 79 
35536     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
3553a     BC 78 BC 78 
3553e     BC 78 BC 78 
35542     BC 78 BC 78 
35546     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3554a     BC 78 BC 78 
3554e     BC 78 A0 78 
35552     CF 7A B9 81 
35556     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
3555a     44 87 43 87 
3555e     43 87 44 87 
35562     43 87 44 87 
35566     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3556a     43 87 43 87 
3556e     43 87 43 87 
35572     44 87 43 87 
35576     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3557a     43 87 43 87 
3557e     44 87 43 87 
35582     44 87 43 87 
35586     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3558a     44 87 43 87 
3558e     43 87 43 87 
35592     5A 87 39 81 
35596     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
3559a     A5 78 BC 78 
3559e     BB 78 BC 78 
355a2     BB 78 BC 78 
355a6     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
355aa     BC 78 BC 78 
355ae     BC 78 BC 78 
355b2     BC 78 8F 79 
355b6     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
355ba     09 85 47 87 
355be     43 87 43 87 
355c2     42 87 42 87 
355c6     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
355ca     43 87 43 87 
355ce     43 87 43 87 
355d2     43 87 44 87 
355d6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
355da     43 87 43 87 
355de     44 87 43 87 
355e2     42 87 43 87 
355e6     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
355ea     44 87 43 87 
355ee     43 87 43 87 
355f2     44 87 44 87 
355f6     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
355fa     94 78 55 7A 
355fe     B9 78 BC 78 
35602     BC 78 BC 78 
35606     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3560a     BC 78 BB 78 
3560e     BC 78 BC 78 
35612     BC 78 BC 78 
35616     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3561a     BB 78 BC 78 
3561e     BC 78 BC 78 
35622     BB 78 BC 78 
35626     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3562a     BC 78 BC 78 
3562e     BD 78 BC 78 
35632     BC 78 BB 78 
35636     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
3563a     94 78 B3 84 
3563e     36 84 4A 87 
35642     43 87 43 87 
35646     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
3564a     43 87 44 87 
3564e     43 87 43 87 
35652     43 87 43 87 
35656     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3565a     43 87 44 87 
3565e     43 87 44 87 
35662     43 87 43 87 
35666     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3566a     43 87 43 87 
3566e     43 87 45 87 
35672     43 87 43 87 
35676     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
3567a     43 87 44 87 
3567e     44 87 44 87 
35682     43 87 43 87 
35686     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3568a     43 87 42 87 
3568e     43 87 43 87 
35692     44 87 43 87 
35696     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3569a     54 87 3C 82 
3569e     36 83 52 79 
356a2     C6 78 BC 78 
356a6     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
356aa     BB 78 BB 78 
356ae     BC 78 BC 78 
356b2     BC 78 BC 78 
356b6     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
356ba     BD 78 ED 78 
356be     1B 79 F4 83 
356c2     4D 83 4E 87 
356c6     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
356ca     44 87 43 87 
356ce     42 87 44 87 
356d2     43 87 42 87 
356d6     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
356da     43 87 54 87 
356de     26 82 B3 84 
356e2     D6 77 BB 78 
356e6     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
356ea     BC 78 BB 78 
356ee     BB 78 BB 78 
356f2     BB 78 BB 78 
356f6     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
356fa     BC 78 BC 78 
356fe     26 79 18 75 
35702     36 83 1F 84 
35706     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
3570a     43 87 43 87 
3570e     43 87 43 87 
35712     43 87 44 87 
35716     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3571a     43 87 44 87 
3571e     44 87 43 87 
35722     43 87 43 87 
35726     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
3572a     43 87 43 87 
3572e     43 87 43 87 
35732     44 87 44 87 
35736     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
3573a     44 87 43 87 
3573e     43 87 43 87 
35742     43 87 44 87 
35746     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3574a     44 87 44 87 
3574e     44 87 43 87 
35752     44 87 43 87 
35756     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3575a     43 87 43 87 
3575e     43 87 44 87 
35762     44 87 43 87 
35766     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3576a     43 87 43 87 
3576e     43 87 43 87 
35772     43 87 44 87 
35776     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3577a     43 87 44 87 
3577e     43 87 44 87 
35782     19 87 7D 86 
35786     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
3578a     B1 78 BC 78 
3578e     BC 78 BC 78 
35792     BC 78 BC 78 
35796     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3579a     BC 78 BC 78 
3579e     BD 78 BC 78 
357a2     B7 78 3B 7B 
357a6     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
357aa     96 86 44 87 
357ae     43 87 43 87 
357b2     43 87 43 87 
357b6     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
357ba     44 87 44 87 
357be     43 87 44 87 
357c2     43 87 44 87 
357c6     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
357ca     43 87 44 87 
357ce     43 87 44 87 
357d2     43 87 44 87 
357d6     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
357da     43 87 44 87 
357de     43 87 43 87 
357e2     44 87 43 87 
357e6     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
357ea     44 87 44 87 
357ee     43 87 43 87 
357f2     43 87 44 87 
357f6     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
357fa     43 87 43 87 
357fe     43 87 43 87 
35802     44 87 44 87 
35806     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
3580a     36 83 CF 7A 
3580e     AB 78 BB 78 
35812     BC 78 BC 78 
35816     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
3581a     BB 78 BC 78 
3581e     BC 78 BC 78 
35822     BC 78 BC 78 
35826     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3582a     BC 78 BC 78 
3582e     BC 78 BB 78 
35832     BC 78 BC 78 
35836     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3583a     BB 78 BC 78 
3583e     BB 78 BC 78 
35842     BC 78 BD 78 
35846     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
3584a     BC 78 BC 78 
3584e     BC 78 BC 78 
35852     BC 78 BD 78 
35856     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
3585a     BC 78 BB 78 
3585e     BC 78 BB 78 
35862     BB 78 BC 78 
35866     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
3586a     BC 78 BC 78 
3586e     BC 78 BC 78 
35872     BC 78 BB 78 
35876     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
3587a     BC 78 BC 78 
3587e     BC 78 BD 78 
35882     BB 78 BC 78 
35886     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3588a     BC 78 BC 78 
3588e     BC 78 BB 78 
35892     BC 78 BB 78 
35896     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3589a     BB 78 BC 78 
3589e     BC 78 BC 78 
358a2     BC 78 BB 78 
358a6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
358aa     BC 78 BC 78 
358ae     BC 78 BB 78 
358b2     BC 78 BB 78 
358b6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
358ba     BC 78 BC 78 
358be     BC 78 BC 78 
358c2     BB 78 BC 78 
358c6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
358ca     BC 78 9F 78 
358ce     52 79 B3 84 
358d2     2F 86 60 87 
358d6     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
358da     44 87 43 87 
358de     43 87 43 87 
358e2     43 87 43 87 
358e6     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
358ea     43 87 43 87 
358ee     43 87 44 87 
358f2     43 87 43 87 
358f6     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
358fa     43 87 43 87 
358fe     43 87 43 87 
35902     43 87 44 87 
35906     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3590a     44 87 44 87 
3590e     5E 87 BC 80 
35912     FB 80 94 78 
35916     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
3591a     BD 78 BC 78 
3591e     BB 78 BC 78 
35922     BB 78 BB 78 
35926     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
3592a     BC 78 BB 78 
3592e     BB 78 6B 79 
35932     D6 77 AC 87 
35936     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
3593a     43 87 44 87 
3593e     43 87 43 87 
35942     44 87 43 87 
35946     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3594a     43 87 44 87 
3594e     43 87 5C 87 
35952     E7 80 00 80 
35956     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
3595a     BC 78 BD 78 
3595e     BC 78 BC 78 
35962     BC 78 BB 78 
35966     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3596a     BC 78 BC 78 
3596e     BB 78 BC 78 
35972     BB 78 BC 78 
35976     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3597a     BB 78 BC 78 
3597e     BC 78 BC 78 
35982     BC 78 BC 78 
35986     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3598a     BC 78 BC 78 
3598e     BC 78 BC 78 
35992     A0 78 8D 7B 
35996     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
3599a     60 87 43 87 
3599e     44 87 44 87 
359a2     43 87 43 87 
359a6     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
359aa     44 87 43 87 
359ae     43 87 43 87 
359b2     44 87 73 86 
359b6     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
359ba     51 7B B6 78 
359be     BC 78 BD 78 
359c2     BC 78 BC 78 
359c6     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
359ca     BB 78 BC 78 
359ce     BD 78 BB 78 
359d2     BC 78 BB 78 
359d6     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
359da     BC 78 BC 78 
359de     BC 78 BC 78 
359e2     BB 78 BC 78 
359e6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
359ea     BC 78 BB 78 
359ee     BB 78 BC 78 
359f2     BC 78 BB 78 
359f6     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
359fa     22 8C AF 84 
359fe     48 87 43 87 
35a02     44 87 43 87 
35a06     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
35a0a     43 87 42 87 
35a0e     43 87 43 87 
35a12     44 87 43 87 
35a16     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
35a1a     43 87 43 87 
35a1e     44 87 44 87 
35a22     43 87 43 87 
35a26     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
35a2a     43 87 43 87 
35a2e     43 87 43 87 
35a32     44 87 43 87 
35a36     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
35a3a     9F 8B D6 77 
35a3e     16 7C B3 78 
35a42     BC 78 BB 78 
35a46     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
35a4a     BB 78 BC 78 
35a4e     BB 78 BC 78 
35a52     BC 78 BC 78 
35a56     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35a5a     BC 78 BB 78 
35a5e     BB 78 BC 78 
35a62     BB 78 BC 78 
35a66     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
35a6a     BB 78 BB 78 
35a6e     BC 78 BC 78 
35a72     BC 78 BB 78 
35a76     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
35a7a     BC 78 BC 78 
35a7e     BC 78 BD 78 
35a82     BB 78 BC 78 
35a86     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
35a8a     BC 78 BC 78 
35a8e     BC 78 BB 78 
35a92     BC 78 BC 78 
35a96     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35a9a     A8 78 54 7E 
35a9e     F4 83 17 82 
35aa2     50 87 43 87 
35aa6     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
35aaa     44 87 43 87 
35aae     44 87 43 87 
35ab2     43 87 44 87 
35ab6     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
35aba     43 87 28 87 
35abe     20 85 CF 7A 
35ac2     70 7D AD 78 
35ac6     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
35aca     BB 78 BC 78 
35ace     BC 78 BC 78 
35ad2     BB 78 BB 78 
35ad6     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
35ada     BB 78 B2 78 
35ade     9A 7C CF 7A 
35ae2     4A 87 0D 87 
35ae6     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
35aea     43 87 44 87 
35aee     43 87 44 87 
35af2     43 87 43 87 
35af6     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
35afa     44 87 43 87 
35afe     28 87 51 85 
35b02     11 7A 1E 7D 
35b06     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
35b0a     BC 78 BB 78 
35b0e     BC 78 BC 78 
35b12     BC 78 BC 78 
35b16     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35b1a     BB 78 BC 78 
35b1e     BB 78 BC 78 
35b22     BC 78 BC 78 
35b26     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35b2a     BB 78 BC 78 
35b2e     BC 78 BC 78 
35b32     BD 78 BB 78 
35b36     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
35b3a     BC 78 BB 78 
35b3e     BC 78 BC 78 
35b42     BC 78 BB 78 
35b46     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35b4a     BC 78 BC 78 
35b4e     BC 78 BC 78 
35b52     BB 78 BC 78 
35b56     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35b5a     BC 78 BD 78 
35b5e     BC 78 BC 78 
35b62     BC 78 BB 78 
35b66     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35b6a     BC 78 BB 78 
35b6e     BB 78 BC 78 
35b72     BC 78 BB 78 
35b76     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35b7a     BB 78 BB 78 
35b7e     BB 78 BC 78 
35b82     B6 78 48 7D 
35b86     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
35b8a     56 87 43 87 
35b8e     42 87 44 87 
35b92     44 87 43 87 
35b96     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
35b9a     43 87 44 87 
35b9e     43 87 44 87 
35ba2     4C 87 7E 83 
35ba6     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
35baa     F7 78 BC 78 
35bae     BC 78 BB 78 
35bb2     BB 78 BC 78 
35bb6     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35bba     BC 78 BB 78 
35bbe     BC 78 BC 78 
35bc2     BB 78 BC 78 
35bc6     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
35bca     BB 78 BC 78 
35bce     BC 78 BC 78 
35bd2     BC 78 BB 78 
35bd6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35bda     BC 78 BC 78 
35bde     BC 78 BC 78 
35be2     BC 78 BB 78 
35be6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35bea     BC 78 BB 78 
35bee     BB 78 BC 78 
35bf2     BC 78 BB 78 
35bf6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35bfa     BC 78 BC 78 
35bfe     BB 78 BC 78 
35c02     BC 78 BC 78 
35c06     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
35c0a     73 32 00 04 
35c0e     00 00 10 00 
35c12     00 00 00 00 
35c16     00 00 00 00 | atari12 file "atari12.s2"
35c1a     00 6D 00 6D 
35c1e     00 6D 00 6D 
35c22     00 6D 00 6D 
35c26     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c2a     00 6D 00 6D 
35c2e     00 6D 00 6D 
35c32     00 6D 00 6D 
35c36     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c3a     00 6D 00 6D 
35c3e     00 6D 00 6D 
35c42     00 6D 00 6D 
35c46     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c4a     00 6D 00 6D 
35c4e     00 6D 00 6D 
35c52     00 6D 00 6D 
35c56     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c5a     00 6D 00 6D 
35c5e     00 6D 00 6D 
35c62     00 6D 00 6D 
35c66     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
35c6a     00 6C 00 6C 
35c6e     00 6C 00 6C 
35c72     00 6C 00 6C 
35c76     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35c7a     00 6C 00 6C 
35c7e     00 6C 00 6C 
35c82     00 6C 00 6C 
35c86     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35c8a     00 6C 00 6C 
35c8e     00 6C 00 6C 
35c92     00 6C 00 6C 
35c96     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35c9a     00 6C 00 6C 
35c9e     00 6C 00 6C 
35ca2     00 6C 00 6C 
35ca6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35caa     00 6C 00 6C 
35cae     00 6C 00 6C 
35cb2     00 6C 00 6C 
35cb6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cba     00 6C 00 6C 
35cbe     00 6C 00 6C 
35cc2     00 6C 00 6C 
35cc6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cca     00 6C 00 6C 
35cce     00 6C 00 6C 
35cd2     00 6C 00 6C 
35cd6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cda     00 6C 00 6C 
35cde     00 6C 00 6C 
35ce2     00 6C 00 6C 
35ce6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cea     00 6C 00 6C 
35cee     00 6C 00 6C 
35cf2     00 6C 00 6C 
35cf6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cfa     00 6C 00 6C 
35cfe     00 6C 00 6C 
35d02     00 6C 00 6C 
35d06     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35d0a     00 6C 00 6C 
35d0e     00 6C 00 6C 
35d12     00 6C 00 6C 
35d16     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35d1a     00 6C 00 6B 
35d1e     00 6B 00 6B 
35d22     00 6B 00 6B 
35d26     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d2a     00 6B 00 6B 
35d2e     00 6B 00 6B 
35d32     00 6B 00 6B 
35d36     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d3a     00 6B 00 6B 
35d3e     00 6B 00 6B 
35d42     00 6B 00 6B 
35d46     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d4a     00 6B 00 6B 
35d4e     00 6B 00 6B 
35d52     00 6B 00 6B 
35d56     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d5a     00 6B 00 6B 
35d5e     00 6B 00 6B 
35d62     00 6B 00 6B 
35d66     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d6a     00 6B 00 6B 
35d6e     00 6B 00 6B 
35d72     00 6B 00 6B 
35d76     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d7a     00 6B 00 6B 
35d7e     00 6B 00 6B 
35d82     00 6B 00 6B 
35d86     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d8a     00 6B 00 6B 
35d8e     00 6B 00 6B 
35d92     00 6B 00 6B 
35d96     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d9a     00 6B 00 6B 
35d9e     00 6B 00 6B 
35da2     00 6B 00 6B 
35da6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35daa     00 6B 00 6B 
35dae     00 6B 00 6B 
35db2     00 6A 00 9D 
35db6     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
35dba     00 9E 00 9E 
35dbe     00 9E 00 9E 
35dc2     00 9E 00 9E 
35dc6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35dca     00 9E 00 9E 
35dce     00 9E 00 9E 
35dd2     00 9E 00 9E 
35dd6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35dda     00 9E 00 9E 
35dde     00 9E 00 9E 
35de2     00 9E 00 9E 
35de6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35dea     00 9E 00 9E 
35dee     00 9E 00 9E 
35df2     00 9E 00 9E 
35df6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35dfa     00 9E 00 9E 
35dfe     00 9E 00 9E 
35e02     00 9E 00 9E 
35e06     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e0a     00 9E 00 9E 
35e0e     00 9E 00 9E 
35e12     00 9E 00 9E 
35e16     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e1a     00 9E 00 9E 
35e1e     00 9E 00 9E 
35e22     00 9E 00 9E 
35e26     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e2a     00 9E 00 9E 
35e2e     00 9E 00 9E 
35e32     00 9E 00 9E 
35e36     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e3a     00 9E 00 9E 
35e3e     00 9E 00 9E 
35e42     00 9E 00 9E 
35e46     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
35e4a     00 9F 00 9F 
35e4e     00 9F 00 9F 
35e52     00 9F 00 9F 
35e56     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35e5a     00 9F 00 9F 
35e5e     00 9F 00 9F 
35e62     00 9F 00 9F 
35e66     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35e6a     00 9F 00 9F 
35e6e     00 9F 00 9F 
35e72     00 9F 00 9F 
35e76     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35e7a     00 9F 00 9F 
35e7e     00 9F 00 9F 
35e82     00 9F 00 9F 
35e86     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35e8a     00 9F 00 9F 
35e8e     00 9F 00 9F 
35e92     00 9F 00 9F 
35e96     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35e9a     00 9F 00 9F 
35e9e     00 9F 00 9F 
35ea2     00 9F 00 9F 
35ea6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35eaa     00 9F 00 9F 
35eae     00 9F 00 9F 
35eb2     00 9F 00 9F 
35eb6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35eba     00 9F 00 9F 
35ebe     00 9F 00 9F 
35ec2     00 9F 00 9F 
35ec6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35eca     00 9F 00 9F 
35ece     00 9F 00 9F 
35ed2     00 9F 00 9F 
35ed6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35eda     00 9F 00 9F 
35ede     00 9F 00 9F 
35ee2     00 9F 00 9F 
35ee6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35eea     00 9F 00 9F 
35eee     00 9F 00 9F 
35ef2     00 9F 00 9F 
35ef6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35efa     00 9F 00 9F 
35efe     00 9F 00 9F 
35f02     00 9F 00 9F 
35f06     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35f0a     00 9F 00 9F 
35f0e     00 9F 00 A0 
35f12     00 A0 00 A0 
35f16     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f1a     00 A0 00 A0 
35f1e     00 A0 00 A0 
35f22     00 A0 00 A0 
35f26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f2a     00 A0 00 A0 
35f2e     00 A0 00 A0 
35f32     00 A0 00 A0 
35f36     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f3a     00 A0 00 A0 
35f3e     00 A0 00 A0 
35f42     00 A0 00 A0 
35f46     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f4a     00 A0 00 A0 
35f4e     00 A0 00 A0 
35f52     00 A0 00 A0 
35f56     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f5a     00 A0 00 A0 
35f5e     00 A0 00 A0 
35f62     00 A0 00 A0 
35f66     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f6a     00 A0 00 A0 
35f6e     00 A0 00 A0 
35f72     00 A0 00 A0 
35f76     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f7a     00 A0 00 A0 
35f7e     00 A0 00 A0 
35f82     00 A0 00 A0 
35f86     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f8a     00 A0 00 A0 
35f8e     00 A0 00 A0 
35f92     00 A0 00 A0 
35f96     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f9a     00 A0 00 A0 
35f9e     00 A0 00 A0 
35fa2     00 A0 00 A0 
35fa6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35faa     00 A0 00 A0 
35fae     00 A0 00 A0 
35fb2     00 A0 00 A0 
35fb6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fba     00 A0 00 A0 
35fbe     00 A0 00 A0 
35fc2     00 A0 00 A0 
35fc6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fca     00 A0 00 A0 
35fce     00 A0 00 A0 
35fd2     00 A0 00 A0 
35fd6     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
35fda     00 6D 00 6D 
35fde     00 6D 00 6D 
35fe2     00 6D 00 6D 
35fe6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35fea     00 6D 00 6D 
35fee     00 6D 00 6D 
35ff2     00 6D 00 6D 
35ff6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35ffa     00 6D 00 6D 
35ffe     00 6D 00 6D 
36002     00 6D 00 6D 
36006     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3600a     00 6D 00 6D 
3600e     00 6D 00 6D 
36012     00 6D 00 6D 
36016     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3601a     00 6D 00 6D 
3601e     00 6D 00 6D 
36022     00 6D 00 6D 
36026     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3602a     00 6D 00 6D 
3602e     00 6D 00 6D 
36032     00 6D 00 6D 
36036     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3603a     00 6D 00 6D 
3603e     00 6D 00 6D 
36042     00 6D 00 6D 
36046     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3604a     00 6D 00 6D 
3604e     00 6D 00 6D 
36052     00 6D 00 6D 
36056     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3605a     00 6D 00 6D 
3605e     00 A0 00 A0 
36062     00 A0 00 A0 
36066     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3606a     00 A0 00 A0 
3606e     00 A0 00 A0 
36072     00 A0 00 A0 
36076     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3607a     00 A0 00 A0 
3607e     00 A0 00 A0 
36082     00 A0 00 A0 
36086     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3608a     00 A0 00 A0 
3608e     00 A0 00 A0 
36092     00 A0 00 A0 
36096     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3609a     00 A0 00 A0 
3609e     00 A0 00 A0 
360a2     00 A0 00 A0 
360a6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360aa     00 A0 00 A0 
360ae     00 A0 00 A0 
360b2     00 A0 00 A0 
360b6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360ba     00 A0 00 A0 
360be     00 A0 00 A0 
360c2     00 A0 00 A0 
360c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360ca     00 A0 00 A0 
360ce     00 A0 00 A0 
360d2     00 A0 00 A0 
360d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360da     00 A0 00 A0 
360de     00 A0 00 A0 
360e2     00 A0 00 A0 
360e6     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
360ea     00 6D 00 6D 
360ee     00 6D 00 6D 
360f2     00 6D 00 6D 
360f6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
360fa     00 6D 00 6D 
360fe     00 6D 00 6D 
36102     00 6D 00 6D 
36106     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3610a     00 6D 00 6D 
3610e     00 6D 00 6D 
36112     00 6D 00 6D 
36116     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3611a     00 6D 00 6D 
3611e     00 6D 00 6D 
36122     00 6D 00 6D 
36126     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3612a     00 6D 00 6D 
3612e     00 6D 00 6D 
36132     00 6D 00 6D 
36136     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3613a     00 6D 00 6D 
3613e     00 6D 00 6D 
36142     00 6D 00 6D 
36146     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3614a     00 6D 00 6D 
3614e     00 6D 00 6D 
36152     00 6D 00 6D 
36156     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3615a     00 6D 00 6D 
3615e     00 6D 00 6D 
36162     00 6D 00 6D 
36166     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3616a     00 6D 00 6D 
3616e     00 6C 00 A0 
36172     00 9F 00 A0 
36176     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
3617a     00 A0 00 A0 
3617e     00 A0 00 A0 
36182     00 A0 00 A0 
36186     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3618a     00 A0 00 A0 
3618e     00 A0 00 A0 
36192     00 A0 00 A0 
36196     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3619a     00 A0 00 A0 
3619e     00 A0 00 A0 
361a2     00 A0 00 A0 
361a6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361aa     00 A0 00 A0 
361ae     00 A0 00 A0 
361b2     00 A0 00 A0 
361b6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361ba     00 A0 00 A0 
361be     00 A0 00 A0 
361c2     00 A0 00 A0 
361c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361ca     00 A0 00 A0 
361ce     00 A0 00 A0 
361d2     00 A0 00 A0 
361d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361da     00 A0 00 A0 
361de     00 A0 00 A0 
361e2     00 A0 00 A0 
361e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361ea     00 A0 00 A0 
361ee     00 A0 00 A0 
361f2     00 A0 00 A0 
361f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361fa     00 A0 00 A0 
361fe     00 A0 00 A0 
36202     00 A0 00 A0 
36206     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3620a     00 A0 00 A0 
3620e     00 A0 00 A0 
36212     00 A0 00 A0 
36216     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3621a     00 A0 00 A0 
3621e     00 A0 00 A0 
36222     00 A0 00 A0 
36226     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3622a     00 A1 00 A1 
3622e     00 A1 00 A1 
36232     00 A1 00 A1 
36236     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3623a     00 A1 00 A1 
3623e     00 A1 00 A1 
36242     00 A1 00 A1 
36246     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3624a     00 A1 00 A1 
3624e     00 A1 00 A1 
36252     00 A1 00 A1 
36256     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3625a     00 A1 00 A1 
3625e     00 A1 00 A1 
36262     00 A1 00 A1 
36266     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3626a     00 A1 00 A1 
3626e     00 A1 00 A1 
36272     00 A1 00 A1 
36276     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3627a     00 A1 00 A1 
3627e     00 A1 00 A1 
36282     00 6E 00 6E 
36286     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3628a     00 6E 00 6E 
3628e     00 6E 00 6E 
36292     00 6E 00 6E 
36296     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3629a     00 6E 00 6E 
3629e     00 6E 00 6E 
362a2     00 6E 00 6E 
362a6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
362aa     00 6E 00 6E 
362ae     00 6E 00 6E 
362b2     00 6E 00 6E 
362b6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
362ba     00 6E 00 6D 
362be     00 6D 00 6D 
362c2     00 6D 00 6D 
362c6     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
362ca     00 6D 00 6D 
362ce     00 6D 00 6D 
362d2     00 6D 00 6D 
362d6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
362da     00 6D 00 6D 
362de     00 6D 00 6D 
362e2     00 6D 00 6D 
362e6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
362ea     00 6D 00 6D 
362ee     00 6D 00 6D 
362f2     00 6D 00 6D 
362f6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
362fa     00 6D 00 6D 
362fe     00 6D 00 6D 
36302     00 6D 00 6D 
36306     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3630a     00 6D 00 6D 
3630e     00 6D 00 6D 
36312     00 6D 00 6D 
36316     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3631a     00 6D 00 6D 
3631e     00 6D 00 6D 
36322     00 6D 00 6D 
36326     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3632a     00 6D 00 6D 
3632e     00 6D 00 6D 
36332     00 6D 00 6D 
36336     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3633a     00 6D 00 6D 
3633e     00 6D 00 6D 
36342     00 6D 00 6D 
36346     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3634a     00 6D 00 6D 
3634e     00 6D 00 6D 
36352     00 6D 00 6D 
36356     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3635a     00 6D 00 6D 
3635e     00 6D 00 6D 
36362     00 6D 00 6D 
36366     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3636a     00 6D 00 6D 
3636e     00 6C 00 6C 
36372     00 6C 00 6C 
36376     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3637a     00 6C 00 6C 
3637e     00 6C 00 6C 
36382     00 6C 00 6C 
36386     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3638a     00 6C 00 6C 
3638e     00 6C 00 6C 
36392     00 9D 00 9F 
36396     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
3639a     00 9F 00 9F 
3639e     00 9F 00 9F 
363a2     00 A0 00 A0 
363a6     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363aa     00 A0 00 A0 
363ae     00 A0 00 A0 
363b2     00 A0 00 A0 
363b6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363ba     00 A0 00 A0 
363be     00 A0 00 A0 
363c2     00 A0 00 A0 
363c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363ca     00 A0 00 A0 
363ce     00 A0 00 A0 
363d2     00 A0 00 A0 
363d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363da     00 A0 00 A0 
363de     00 A0 00 A0 
363e2     00 A0 00 A0 
363e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363ea     00 A0 00 A0 
363ee     00 A0 00 A0 
363f2     00 A0 00 A0 
363f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363fa     00 A0 00 A0 
363fe     00 A0 00 A0 
36402     00 A0 00 A0 
36406     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3640a     00 A0 00 A0 
3640e     00 A0 00 A0 
36412     00 A0 00 A0 
36416     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3641a     01 00 00 00 
3641e     00 00 00 00 
36422     00 00 00 00 
36426     00 00 00 00 | mouse  file "mouse2.def"
3642a     00 00 00 00 
3642e     00 00 00 00 
36432     00 00 00 00 
36436     00 00 00 00 | 	byte	$00[16]
3643a     01 01 00 00 
3643e     00 00 00 00 
36442     00 00 00 00 
36446     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3644a     00 00 00 00 
3644e     00 00 00 00 
36452     00 00 00 00 
36456     00 00 00 00 | 	byte	$00[16]
3645a     01 0D 01 00 
3645e     00 00 00 00 
36462     00 00 00 00 
36466     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3646a     00 00 00 00 
3646e     00 00 00 00 
36472     00 00 00 00 
36476     00 00 00 00 | 	byte	$00[16]
3647a     01 0D 0D 01 
3647e     00 00 00 00 
36482     00 00 00 00 
36486     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3648a     00 00 00 00 
3648e     00 00 00 00 
36492     00 00 00 00 
36496     00 00 00 00 | 	byte	$00[16]
3649a     01 0D 0D 0D 
3649e     01 00 00 00 
364a2     00 00 00 00 
364a6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
364aa     00 00 00 00 
364ae     00 00 00 00 
364b2     00 00 00 00 
364b6     00 00 00 00 | 	byte	$00[16]
364ba     01 0D 0D 0D 
364be     0D 01 00 00 
364c2     00 00 00 00 
364c6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
364ca     00 00 00 00 
364ce     00 00 00 00 
364d2     00 00 00 00 
364d6     00 00 00 00 | 	byte	$00[16]
364da     01 0D 0D 0D 
364de     0D 0D 01 00 
364e2     00 00 00 00 
364e6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
364ea     00 00 00 00 
364ee     00 00 00 00 
364f2     00 00 00 00 
364f6     00 00 00 00 | 	byte	$00[16]
364fa     01 0D 0D 0D 
364fe     0D 0D 0D 01 
36502     00 00 00 00 
36506     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3650a     00 00 00 00 
3650e     00 00 00 00 
36512     00 00 00 00 
36516     00 00 00 00 | 	byte	$00[16]
3651a     01 0D 0D 0D 
3651e     0D 0D 0D 0C 
36522     01 00 00 00 
36526     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3652a     00 00 00 00 
3652e     00 00 00 00 
36532     00 00 00 00 
36536     00 00 00 00 | 	byte	$00[16]
3653a     01 0D 0D 0D 
3653e     0D 0D 0D 0D 
36542     0C 01 00 00 
36546     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3654a     00 00 00 00 
3654e     00 00 00 00 
36552     00 00 00 00 
36556     00 00 00 00 | 	byte	$00[16]
3655a     01 0D 0D 0D 
3655e     0D 0D 0D 0D 
36562     0D 0C 01 00 
36566     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
3656a     00 00 00 00 
3656e     00 00 00 00 
36572     00 00 00 00 
36576     00 00 00 00 | 	byte	$00[16]
3657a     01 0D 0D 0D 
3657e     0D 0D 0D 0D 
36582     0D 0D 0B 01 
36586     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
3658a     00 00 00 00 
3658e     00 00 00 00 
36592     00 00 00 00 
36596     00 00 00 00 | 	byte	$00[16]
3659a     01 0D 0D 0D 
3659e     0C 0D 0D 03 
365a2     01 01 01 01 
365a6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
365aa     00 00 00 00 
365ae     00 00 00 00 
365b2     00 00 00 00 
365b6     00 00 00 00 | 	byte	$00[16]
365ba     01 0D 0D 0C 
365be     01 09 0D 03 
365c2     00 00 00 00 
365c6     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
365ca     00 00 00 00 
365ce     00 00 00 00 
365d2     00 00 00 00 
365d6     00 00 00 00 | 	byte	$00[16]
365da     01 0D 0C 01 
365de     00 01 0D 0B 
365e2     01 00 00 00 
365e6     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
365ea     00 00 00 00 
365ee     00 00 00 00 
365f2     00 00 00 00 
365f6     00 00 00 00 | 	byte	$00[16]
365fa     01 0C 01 00 
365fe     00 01 0A 0D 
36602     01 00 00 00 
36606     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3660a     00 00 00 00 
3660e     00 00 00 00 
36612     00 00 00 00 
36616     00 00 00 00 | 	byte	$00[16]
3661a     01 01 00 00 
3661e     00 00 01 0D 
36622     0B 01 00 00 
36626     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3662a     00 00 00 00 
3662e     00 00 00 00 
36632     00 00 00 00 
36636     00 00 00 00 
3663a     00 00 00 00 
3663e     00 00       | 	byte	$00[22]
36640     01 0B 0D 01 
36644     00 00 00 00 
36648     00 00 00 00 
3664c     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36650     00 00 00 00 
36654     00 00 00 00 
36658     00 00 00 00 
3665c     00 00 00 00 
36660     00          | 	byte	$00[17]
36661     01 01 00 00 
36665     00 00 00 00 
36669     00 00 00 00 
3666d     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36671     00 00 00 00 
      ...             
36815     00 00 00 00 
36819     00          | 	byte	$00[425]
3681a                 | 
3681a     00 00       |              	org
3681c 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
36820 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
36824 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
36828 003             | 
36828 003 00 30 04 F6 |                 mov     psramaddr,#0
3682c 004             | 
3682c 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
36830 005 20 00 00 FF 
36834 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
36838 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
3683c 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
36840 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
36844 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
36848 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
3684c 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
36850 00d             | 
36850 00d 20 00 00 FF 
36854 00e 00 30 04 F1 |                 add 	psramaddr,##16384
36858 00f E0 03 00 FF 
3685c 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
36860 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
36864 012             | 
36864 012             |                 
36864 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
36868 013             |     
36868 013 01 2C 60 FD |                 cogid 	t11				' get id
3686c 014 00 00 EC FC |                 coginit #0,#0				' start the new program
36870 015 03 2C 60 FD |                 cogstop t11				' stop the loader
36874 016             | 
36874 016 00 00 00 00 | t11 		long 	0
36878 017 00 FF 07 00 | mailbox 	long 	$7FF00
3687c 018 00 00 00 00 | psramaddr 	long 	0
36880 019 00 00 00 00 | pslockval	long 	0
36884 01a 00 00 00 00 | cmd             long    0
36888 01b 00 00 00 00 | buf1            long    0
3688c 01c 00 40 00 00 | buf2            long    16384
36890 01d 94 68 03 00 | 	long	@@@_dat_ + 12612
36894 01e 50 32 20 52 
36898 01f 65 74 72 6F 
3689c 020 6D 61 63 68 
368a0 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
368a4 022 42 41 53 49 
368a8 023 43 20 76 65 
368ac 024 72 73 69 6F 
368b0 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
368b4 026 35 31 00 00 | 	byte	$35, $31, $00, $00
368b8 027             | 	alignl
368b8 027             | _hg010b_spin2_dat_
368b8 027             | 
368b8 027 00 00 00 00 
368bc 028 00 00 00 00 
368c0 029 00 00 00 00 
368c4 02a 00 00 00 00 
368c8 02b 00 00 00    | vga_font       file "vgafont.def"
368cb 02b 7E 81 A5 81 
368cf 02c 81 BD 99 81 
368d3 02d 81 7E 00 00 
368d7 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
368db 02f 7E FF DB FF 
368df 030 FF C3 E7 FF 
368e3 031 FF 7E 00 00 
368e7 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
368eb 033 00 36 7F 7F 
368ef 034 7F 7F 3E 1C 
368f3 035 08 00 00 00 
368f7 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
368fb 037 00 08 1C 3E 
368ff 038 7F 3E 1C 08 
36903 039 00 00 00 00 
36907 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3690b 03b 18 3C 3C E7 
3690f 03c E7 E7 18 18 
36913 03d 3C 00 00 00 
36917 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3691b 03f 18 3C 7E FF 
3691f 040 FF 7E 18 18 
36923 041 3C 00 00 00 
36927 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3692b 043 00 00 00 18 
3692f 044 3C 3C 18 00 
36933 045 00 00 00 00 
36937 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3693b 047 FF FF FF E7 
3693f 048 C3 C3 E7 FF 
36943 049 FF FF FF FF 
36947 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3694b 04b 00 00 3C 66 
3694f 04c 42 42 66 3C 
36953 04d 00 00 00 00 
36957 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3695b 04f FF FF C3 99 
3695f 050 BD BD 99 C3 
36963 051 FF FF FF FF 
36967 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3696b 053 78 70 58 4C 
3696f 054 1E 33 33 33 
36973 055 33 1E 00 00 
36977 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3697b 057 3C 66 66 66 
3697f 058 66 3C 18 7E 
36983 059 18 18 00 00 
36987 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3698b 05b FC CC FC 0C 
3698f 05c 0C 0C 0C 0E 
36993 05d 0F 07 00 00 
36997 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
3699b 05f FE C6 FE C6 
3699f 060 C6 C6 C6 E6 
369a3 061 E7 67 03 00 
369a7 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
369ab 063 18 18 DB 3C 
369af 064 E7 3C DB 18 
369b3 065 18 00 00 00 
369b7 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
369bb 067 03 07 0F 1F 
369bf 068 7F 1F 0F 07 
369c3 069 03 01 00 00 
369c7 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
369cb 06b 60 70 78 7C 
369cf 06c 7F 7C 78 70 
369d3 06d 60 40 00 00 
369d7 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
369db 06f 18 3C 7E 18 
369df 070 18 18 7E 3C 
369e3 071 18 00 00 00 
369e7 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
369eb 073 66 66 66 66 
369ef 074 66 66 66    | 	byte	$66[7]
369f2 075 00 66 66 00 
369f6 076 00 00 00 00 
369fa 077 00 FE DB DB 
369fe 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
36a02 079 D8 D8 D8 00 
36a06 07a 00 00 00 3E 
36a0a 07b 63 06 1C 36 
36a0e 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
36a12 07d 30 63 3E 00 
36a16 07e 00 00 00 00 
36a1a 07f 00 00 00 00 
36a1e 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
36a22 081 7F 7F 7F 00 
36a26 082 00 00 00 00 
36a2a 083 00 18 3C 7E 
36a2e 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
36a32 085 3C 18 7E 00 
36a36 086 00 00 00 00 
36a3a 087 00 18 3C 7E 
36a3e 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
36a42 089 18 18 18 00 
36a46 08a 00 00 00 00 
36a4a 08b 00 18 18 18 
36a4e 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
36a52 08d 7E 3C 18 00 
36a56 08e 00 00 00 00 
36a5a 08f 00 00 00 18 
36a5e 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
36a62 091 00 00 00 00 
36a66 092 00 00 00 00 
36a6a 093 00 00 00    | 	byte	$00[11]
36a6d 094 0C 06 7F 06 
36a71 095 0C 00 00 00 
36a75 096 00 00 00 00 
36a79 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36a7d 098 00 03 03 03 
36a81 099 7F 00 00 00 
36a85 09a 00 00 00 00 
36a89 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36a8d 09c 14 36 7F 36 
36a91 09d 14 00 00 00 
36a95 09e 00 00 00 00 
36a99 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
36a9d 0a0 1C 1C 3E 3E 
36aa1 0a1 7F 7F 00 00 
36aa5 0a2 00 00 00 00 
36aa9 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
36aad 0a4 7F 3E 3E 1C 
36ab1 0a5 1C 08 00 00 
36ab5 0a6 00 00 00 00 
36ab9 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36abd 0a8 00 00 00 00 
36ac1 0a9 00 00 00 00 
36ac5 0aa 00 00 00 00 
36ac9 0ab 00 00       | 	byte	$00[14]
36acb 0ab 18 3C 3C 3C 
36acf 0ac 18 18 18 00 
36ad3 0ad 18 18 00 00 
36ad7 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
36adb 0af 66 24 00 00 
36adf 0b0 00 00 00 00 
36ae3 0b1 00 00 00 00 
36ae7 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36aeb 0b3 00 36 36 7F 
36aef 0b4 36 36 36 7F 
36af3 0b5 36 36 00 00 
36af7 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
36afb 0b7 3E 63 43 03 
36aff 0b8 3E 60 60 61 
36b03 0b9 63 3E 18 18 
36b07 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
36b0b 0bb 00 00 43 63 
36b0f 0bc 30 18 0C 06 
36b13 0bd 63 61 00 00 
36b17 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
36b1b 0bf 1C 36 36 1C 
36b1f 0c0 6E 3B 33 33 
36b23 0c1 33 6E 00 00 
36b27 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
36b2b 0c3 0C 0C 0C 06 
36b2f 0c4 00 00 00 00 
36b33 0c5 00 00 00 00 
36b37 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36b3b 0c7 30 18 0C 0C 
36b3f 0c8 0C 0C 0C 0C 
36b43 0c9 18 30 00 00 
36b47 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
36b4b 0cb 0C 18 30 30 
36b4f 0cc 30 30 30 30 
36b53 0cd 18 0C 00 00 
36b57 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
36b5b 0cf 00 00 00 66 
36b5f 0d0 3C FF 3C 66 
36b63 0d1 00 00 00 00 
36b67 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
36b6b 0d3 00 00 00 18 
36b6f 0d4 18 7E 18 18 
36b73 0d5 00 00 00 00 
36b77 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
36b7b 0d7 00 00 00 00 
36b7f 0d8 00 00 00 00 | 	byte	$00[8]
36b83 0d9 18 18 18 0C 
36b87 0da 00 00 00 00 
36b8b 0db 00 00 00 00 
36b8f 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
36b93 0dd 00 00 00 00 
36b97 0de 00 00 00 00 
36b9b 0df 00 00 00 00 
36b9f 0e0 00 00 00 00 | 	byte	$00[16]
36ba3 0e1 18 18 00 00 
36ba7 0e2 00 00 00 00 
36bab 0e3 00 00 40 60 
36baf 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
36bb3 0e5 03 01 00 00 
36bb7 0e6 00 00 00 00 
36bbb 0e7 1C 36 63 63 
36bbf 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
36bc3 0e9 36 1C 00 00 
36bc7 0ea 00 00 00 00 
36bcb 0eb 18 1C 1E 18 
36bcf 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
36bd3 0ed 18 7E 00 00 
36bd7 0ee 00 00 00 00 
36bdb 0ef 3E 63 60 30 
36bdf 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
36be3 0f1 63 7F 00 00 
36be7 0f2 00 00 00 00 
36beb 0f3 3E 63 60 60 
36bef 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
36bf3 0f5 63 3E 00 00 
36bf7 0f6 00 00 00 00 
36bfb 0f7 30 38 3C 36 
36bff 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
36c03 0f9 30 78 00 00 
36c07 0fa 00 00 00 00 
36c0b 0fb 7F 03 03 03 
36c0f 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
36c13 0fd 63 3E 00 00 
36c17 0fe 00 00 00 00 
36c1b 0ff 1C 06 03 03 
36c1f 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
36c23 101 63 3E 00 00 
36c27 102 00 00 00 00 
36c2b 103 7F 63 60 60 
36c2f 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
36c33 105 0C 0C 00 00 
36c37 106 00 00 00 00 
36c3b 107 3E 63 63 63 
36c3f 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
36c43 109 63 3E 00 00 
36c47 10a 00 00 00 00 
36c4b 10b 3E 63 63 63 
36c4f 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
36c53 10d 30 1E 00 00 
36c57 10e 00 00 00 00 
36c5b 10f 00 00 00 18 
36c5f 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
36c63 111 18 18 00 00 
36c67 112 00 00 00 00 
36c6b 113 00 00 00 18 
36c6f 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
36c73 115 18 18 0C 00 
36c77 116 00 00 00 00 
36c7b 117 00 60 30 18 
36c7f 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
36c83 119 30 60 00 00 
36c87 11a 00 00 00 00 
36c8b 11b 00 00 00 7E 
36c8f 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
36c93 11d 00 00 00 00 
36c97 11e 00 00 00 00 
36c9b 11f 00          | 	byte	$00[9]
36c9c 120 06 0C 18 30 
36ca0 121 60 30 18 0C 
36ca4 122 06 00 00 00 
36ca8 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
36cac 124 63 63 30 18 
36cb0 125 18 18 00 18 
36cb4 126 18 00 00 00 
36cb8 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
36cbc 128 3E 63 63 7B 
36cc0 129 7B 7B 3B 03 
36cc4 12a 3E 00 00 00 
36cc8 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
36ccc 12c 1C 36 63 63 
36cd0 12d 7F 63 63 63 
36cd4 12e 63 00 00 00 
36cd8 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
36cdc 130 66 66 66 3E 
36ce0 131 66 66 66 66 
36ce4 132 3F 00 00 00 
36ce8 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
36cec 134 66 43 03 03 
36cf0 135 03 03 43 66 
36cf4 136 3C 00 00 00 
36cf8 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
36cfc 138 36 66 66 66 
36d00 139 66 66 66 36 
36d04 13a 1F 00 00 00 
36d08 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
36d0c 13c 66 46 16 1E 
36d10 13d 16 06 46 66 
36d14 13e 7F 00 00 00 
36d18 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
36d1c 140 66 46 16 1E 
36d20 141 16 06 06 06 
36d24 142 0F 00 00 00 
36d28 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
36d2c 144 66 43 03 03 
36d30 145 7B 63 63 66 
36d34 146 5C 00 00 00 
36d38 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
36d3c 148 63 63 63 7F 
36d40 149 63 63 63 63 
36d44 14a 63 00 00 00 
36d48 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
36d4c 14c 18 18 18 18 
36d50 14d 18 18 18 18 | 	byte	$18[8]
36d54 14e 3C 00 00 00 
36d58 14f 00 00 00 78 
36d5c 150 30 30 30 30 
36d60 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
36d64 152 1E 00 00 00 
36d68 153 00 00 00 67 
36d6c 154 66 66 36 1E 
36d70 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
36d74 156 67 00 00 00 
36d78 157 00 00 00 0F 
36d7c 158 06 06 06 06 
36d80 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
36d84 15a 7F 00 00 00 
36d88 15b 00 00 00 63 
36d8c 15c 77 7F 7F 6B 
36d90 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
36d94 15e 63 00 00 00 
36d98 15f 00 00 00 63 
36d9c 160 67 6F 7F 7B 
36da0 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
36da4 162 63 00 00 00 
36da8 163 00 00 00 3E 
36dac 164 63 63 63 63 
36db0 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
36db4 166 3E 00 00 00 
36db8 167 00 00 00 3F 
36dbc 168 66 66 66 3E 
36dc0 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
36dc4 16a 0F 00 00 00 
36dc8 16b 00 00 00 3E 
36dcc 16c 63 63 63 63 
36dd0 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
36dd4 16e 3E 30 70 00 
36dd8 16f 00 00 00 3F 
36ddc 170 66 66 66 3E 
36de0 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
36de4 172 67 00 00 00 
36de8 173 00 00 00 3E 
36dec 174 63 63 06 1C 
36df0 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
36df4 176 3E 00 00 00 
36df8 177 00 00 00 7E 
36dfc 178 7E 5A 18 18 
36e00 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
36e04 17a 3C 00 00 00 
36e08 17b 00 00 00 63 
36e0c 17c 63 63 63 63 
36e10 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
36e14 17e 3E 00 00 00 
36e18 17f 00 00 00 63 
36e1c 180 63 63 63 63 
36e20 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
36e24 182 08 00 00 00 
36e28 183 00 00 00 63 
36e2c 184 63 63 63 6B 
36e30 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
36e34 186 36 00 00 00 
36e38 187 00 00 00 63 
36e3c 188 63 36 3E 1C 
36e40 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
36e44 18a 63 00 00 00 
36e48 18b 00 00 00 66 
36e4c 18c 66 66 66 3C 
36e50 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
36e54 18e 3C 00 00 00 
36e58 18f 00 00 00 7F 
36e5c 190 63 61 30 18 
36e60 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
36e64 192 7F 00 00 00 
36e68 193 00 00 00 3C 
36e6c 194 0C 0C 0C 0C 
36e70 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
36e74 196 3C 00 00 00 
36e78 197 00 00 00 00 
36e7c 198 01 03 07 0E 
36e80 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
36e84 19a 40 00 00 00 
36e88 19b 00 00 00 3C 
36e8c 19c 30 30 30 30 
36e90 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
36e94 19e 3C 00 00 00 
36e98 19f 1C 36 00 00 
36e9c 1a0 00 00 00 00 
36ea0 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ea4 1a2 00 00 00 00 
36ea8 1a3 00 00 00 00 
36eac 1a4 00 00 00 00 
36eb0 1a5 00 00 00 00 
36eb4 1a6 00          | 	byte	$00[17]
36eb5 1a6 FF 00 00 0C 
36eb9 1a7 18 00 00 00 
36ebd 1a8 00 00 00 00 
36ec1 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ec5 1aa 00 00 00 00 
36ec9 1ab 00 00 00 00 
36ecd 1ac 00          | 	byte	$00[9]
36ece 1ac 1E 30 3E 33 
36ed2 1ad 33 33 6E 00 
36ed6 1ae 00 00 00 00 
36eda 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
36ede 1b0 1E 36 66 66 
36ee2 1b1 66 66 3E 00 
36ee6 1b2 00 00 00 00 
36eea 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
36eee 1b4 3E 63 03 03 
36ef2 1b5 03 63 3E 00 
36ef6 1b6 00 00 00 00 
36efa 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
36efe 1b8 3C 36 33 33 
36f02 1b9 33 33 6E 00 
36f06 1ba 00 00 00 00 
36f0a 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
36f0e 1bc 3E 63 7F 03 
36f12 1bd 03 63 3E 00 
36f16 1be 00 00 00 00 
36f1a 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
36f1e 1c0 0C 1E 0C 0C 
36f22 1c1 0C 0C 1E 00 
36f26 1c2 00 00 00 00 
36f2a 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
36f2e 1c4 6E 33 33 33 
36f32 1c5 33 33 3E 30 
36f36 1c6 33 1E 00 00 
36f3a 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
36f3e 1c8 36 6E 66 66 
36f42 1c9 66 66 67 00 
36f46 1ca 00 00 00 00 
36f4a 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
36f4e 1cc 1C 18 18 18 
36f52 1cd 18 18 3C 00 
36f56 1ce 00 00 00 00 
36f5a 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
36f5e 1d0 70 60 60 60 
36f62 1d1 60 60 60 66 
36f66 1d2 66 3C 00 00 
36f6a 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
36f6e 1d4 66 36 1E 1E 
36f72 1d5 36 66 67 00 
36f76 1d6 00 00 00 00 
36f7a 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
36f7e 1d8 18 18 18 18 
36f82 1d9 18 18       | 	byte	$18[6]
36f84 1da 3C 00 00 00 
36f88 1db 00 00 00 00 
36f8c 1dc 00 00 37 7F 
36f90 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
36f94 1de 63 00 00 00 
36f98 1df 00 00 00 00 
36f9c 1e0 00 00 3B 66 
36fa0 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
36fa4 1e2 66 00 00 00 
36fa8 1e3 00 00 00 00 
36fac 1e4 00 00 3E 63 
36fb0 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
36fb4 1e6 3E 00 00 00 
36fb8 1e7 00 00 00 00 
36fbc 1e8 00 00 3B 66 
36fc0 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
36fc4 1ea 3E 06 06 0F 
36fc8 1eb 00 00 00 00 
36fcc 1ec 00 00 6E 33 
36fd0 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
36fd4 1ee 3E 30 30 78 
36fd8 1ef 00 00 00 00 
36fdc 1f0 00 00 3B 6E 
36fe0 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
36fe4 1f2 0F 00 00 00 
36fe8 1f3 00 00 00 00 
36fec 1f4 00 00 3E 63 
36ff0 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
36ff4 1f6 3E 00 00 00 
36ff8 1f7 00 00 00 08 
36ffc 1f8 0C 0C 3F 0C 
37000 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
37004 1fa 38 00 00 00 
37008 1fb 00 00 00 00 
3700c 1fc 00 00 33 33 
37010 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
37014 1fe 6E 00 00 00 
37018 1ff 00 00 00 00 
3701c 200 00 00 63 63 
37020 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
37024 202 1C 00 00 00 
37028 203 00 00 00 00 
3702c 204 00 00 63 63 
37030 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
37034 206 36 00 00 00 
37038 207 00 00 00 00 
3703c 208 00 00 63 36 
37040 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
37044 20a 63 00 00 00 
37048 20b 00 00 00 00 
3704c 20c 00 00 63 63 
37050 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
37054 20e 7E 60 30 1F 
37058 20f 00 00 00 00 
3705c 210 00 00 7F 33 
37060 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
37064 212 7F 00 00 00 
37068 213 00 00 00 70 
3706c 214 18 18 18 0E 
37070 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
37074 216 70 00 00 00 
37078 217 00 00 00 18 
3707c 218 18 18 18 18 
37080 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
37084 21a 18 00 00 00 
37088 21b 00 00 00 0E 
3708c 21c 18 18 18 70 
37090 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
37094 21e 0E 00 00 00 
37098 21f 6E 3B 00 00 
3709c 220 00 00 00 00 
370a0 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
370a4 222 00 00 00 00 
370a8 223 00 00 00 00 
370ac 224 00 00       | 	byte	$00[10]
370ae 224 08 1C 36 63 
370b2 225 63 63 7F 00 
370b6 226 00 00 00 00 
370ba 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
370be 228 03 03 03 03 
370c2 229 43 66 3C 18 
370c6 22a 30 1E 00 00 
370ca 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
370ce 22c 33 33 33 33 
370d2 22d 33 33       | 	byte	$33[6]
370d4 22e 6E 00 00 00 
370d8 22f 00 00 60 30 
370dc 230 18 00 3E 63 
370e0 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
370e4 232 3E 00 00 00 
370e8 233 00 00 08 1C 
370ec 234 36 00 1E 30 
370f0 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
370f4 236 6E 00 00 00 
370f8 237 00 00 00 00 
370fc 238 33 00 1E 30 
37100 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
37104 23a 6E 00 00 00 
37108 23b 00 00 1C 36 
3710c 23c 1C 00 33 33 
37110 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
37114 23e 6E 00 00 00 
37118 23f 00 00 60 30 
3711c 240 18 00 3E 63 
37120 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
37124 242 3E 00 00 00 
37128 243 00 00 00 00 
3712c 244 00 00 3E 63 
37130 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
37134 246 3E 18 30 1E 
37138 247 00 00 00 1C 
3713c 248 58 78 38 18 
37140 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
37144 24a 3C 00 00 00 
37148 24b 00 00 00 00 
3714c 24c 63 00 3E 63 
37150 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
37154 24e 3E 00 00 00 
37158 24f 66 33 00 3E 
3715c 250 63 63 63 63 
37160 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
37164 252 3E 00 00 00 
37168 253 00 00 CC 66 
3716c 254 33 00 3E 63 
37170 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
37174 256 3E 00 00 00 
37178 257 00 00 18 3C 
3717c 258 66 00 1C 18 
37180 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
37184 25a 3C 00 00 00 
37188 25b 30 18 00 7F 
3718c 25c 63 61 30 18 
37190 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
37194 25e 7F 00 00 00 
37198 25f 00 63 00 08 
3719c 260 1C 36 63 63 
371a0 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
371a4 262 63 00 00 00 
371a8 263 30 18 00 3C 
371ac 264 66 43 03 03 
371b0 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
371b4 266 3C 00 00 00 
371b8 267 30 18 00 7F 
371bc 268 66 46 16 1E 
371c0 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
371c4 26a 7F 00 00 00 
371c8 26b 0C 06 00 0F 
371cc 26c 06 06 06 06 
371d0 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
371d4 26e 7F 00 00 00 
371d8 26f 30 18 00 1C 
371dc 270 18 18 18 18 
371e0 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
371e4 272 3C 00 00 00 
371e8 273 00 00 08 1C 
371ec 274 36 00 3E 63 
371f0 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
371f4 276 3E 00 00 00 
371f8 277 00 00 00 00 
371fc 278 63 00 3E 63 
37200 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
37204 27a 3E 00 00 00 
37208 27b 00 00 00 6F 
3720c 27c 46 26 06 06 
37210 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
37214 27e 7F 00 00 00 
37218 27f 00 00 00 6E 
3721c 280 4C 2C 0C 0C 
37220 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
37224 282 1E 00 00 00 
37228 283 30 18 00 3E 
3722c 284 63 63 06 1C 
37230 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
37234 286 3E 00 00 00 
37238 287 00 00 60 30 
3723c 288 18 00 3E 63 
37240 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
37244 28a 3E 00 00 00 
37248 28b 00 63 00 3E 
3724c 28c 63 63 63 63 
37250 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
37254 28e 3E 00 00 00 
37258 28f 00 63 00 63 
3725c 290 63 63 63 63 
37260 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
37264 292 3E 00 00 00 
37268 293 6C 38 00 7E 
3726c 294 7E 5A 18 18 
37270 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
37274 296 3C 00 00 00 
37278 297 00 00 60 48 
3727c 298 2C 0C 3F 0C 
37280 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
37284 29a 38 00 00 00 
37288 29b 00 00 00 0F 
3728c 29c 26 36 1E 0E 
37290 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
37294 29e 7F 00 00 00 
37298 29f 00 00 00 00 
3729c 2a0 00 63 36 1C 
372a0 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
372a4 2a2 00 00 00 00 
372a8 2a3 00 00       | 	byte	$00[6]
372aa 2a3 36 1C 08 00 
372ae 2a4 3E 63 03 03 
372b2 2a5 03 63 3E 00 
372b6 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
372ba 2a7 30 18 0C 00 
372be 2a8 1E 30 3E 33 
372c2 2a9 33 33 6E 00 
372c6 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
372ca 2ab 60 30 18 00 
372ce 2ac 1C 18 18 18 
372d2 2ad 18 18 3C 00 
372d6 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
372da 2af 60 30 18 00 
372de 2b0 3E 63 63 63 
372e2 2b1 63 63 3E 00 
372e6 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
372ea 2b3 30 18 0C 00 
372ee 2b4 33 33 33 33 
372f2 2b5 33 33 6E 00 
372f6 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
372fa 2b7 00 08 1C 36 
372fe 2b8 63 63 7F 63 
37302 2b9 63 63 63 18 
37306 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3730a 2bb 00 00 00 00 
3730e 2bc 1E 30 3E 33 
37312 2bd 33 33 6E 18 
37316 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3731a 2bf 00 7F 63 61 
3731e 2c0 30 18 0C 06 
37322 2c1 43 63 7F 00 
37326 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3732a 2c3 36 1C 08 00 
3732e 2c4 7F 33 18 0C 
37332 2c5 06 63 7F 00 
37336 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3733a 2c7 00 7F 66 46 
3733e 2c8 16 1E 16 06 
37342 2c9 46 66 7F 18 
37346 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3734a 2cb 00 00 00 00 
3734e 2cc 3E 63 7F 03 
37352 2cd 03 63 3E 18 
37356 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3735a 2cf 00 3C 66 03 
3735e 2d0 1F 03 0F 03 
37362 2d1 03 66 3C 00 
37366 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3736a 2d3 60 30 18 00 
3736e 2d4 7F 33 18 0C 
37372 2d5 06 63 7F 00 
37376 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3737a 2d7 00 3C 66 43 
3737e 2d8 03 03 03 03 
37382 2d9 43 66 3C 00 
37386 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3738a 2db 00 00 00 00 
3738e 2dc 3E 63 06 1C 
37392 2dd 30 63 3E 18 
37396 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3739a 2df 00 00 00 00 
3739e 2e0 00 00       | 	byte	$00[6]
373a0 2e1 6C 36 1B 36 
373a4 2e2 6C 00 00 00 
373a8 2e3 00 00 00 00 
373ac 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
373b0 2e5 1B 36 6C 36 
373b4 2e6 1B 00 00 00 
373b8 2e7 88 22 88 22 
373bc 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
373c0 2e9 88 22 88 22 
373c4 2ea 88 22 88 22 
373c8 2eb AA 55 AA 55 
373cc 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
373d0 2ed AA 55 AA 55 
373d4 2ee AA 55 AA 55 
373d8 2ef BB EE BB EE 
373dc 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
373e0 2f1 BB EE BB EE 
373e4 2f2 BB EE BB EE 
373e8 2f3 18 18 18 18 
373ec 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
373f0 2f5 18 18 18 18 
373f4 2f6 18 18 18 18 
373f8 2f7 18 18 18 18 
373fc 2f8 18 18 18    | 	byte	$18[15]
373ff 2f8 1F 18 18 18 
37403 2f9 18 18 18 18 
37407 2fa 18 30 18 00 
3740b 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3740f 2fc 63 7F 63 63 
37413 2fd 63 63 00 00 
37417 2fe 00 1C 36 00 
3741b 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3741f 300 63 7F 63 63 
37423 301 63 63 00 00 
37427 302 00 36 1C 00 
3742b 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3742f 304 1E 16 06 46 
37433 305 66 7F 00 00 
37437 306 00 00 00 00 
3743b 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3743f 308 1C 30 60 63 
37443 309 63 3E 18 30 
37447 30a 1E 6C 6C 6C 
3744b 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3744f 30c 6F 6C 6C 6C 
37453 30d 6C 6C 6C 6C 
37457 30e 6C 6C 6C 6C 
3745b 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3745f 310 6C 6C 6C 6C 
37463 311 6C 6C 6C 6C 
37467 312 6C          | 	byte	$6c[9]
37468 313 00 00 00 00 
3746c 314 00          | 	byte	$00[5]
3746d 314 7F 60 6F 6C 
37471 315 6C 6C 6C 6C 
37475 316 6C 6C 6C 6C 
37479 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3747d 318 6F 60 7F 00 
37481 319 00 00 00 00 
37485 31a 00 00 00 18 
37489 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3748d 31c 61 30 18 0C 
37491 31d 06 43 63 7F 
37495 31e 00 00 00 00 
37499 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3749d 320 00 7F 33 18 
374a1 321 0C 06 63 7F 
374a5 322 00 00 00 00 
374a9 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
374ad 324 00 00 1F 18 
374b1 325 18 18 18 18 
374b5 326 18 18 18 18 
374b9 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
374bd 328 18 18 F8 00 
374c1 329 00 00 00 00 
374c5 32a 00 00 00 18 
374c9 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
374cd 32c 18 18 FF 00 
374d1 32d 00 00 00 00 
374d5 32e 00 00 00 00 
374d9 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
374dd 330 00 00 FF 18 
374e1 331 18 18 18 18 
374e5 332 18 18 18 18 
374e9 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
374ed 334 18 18 F8 18 
374f1 335 18 18 18 18 
374f5 336 18 18 18 00 
374f9 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
374fd 338 00 00 FF 00 
37501 339 00 00 00 00 
37505 33a 00 00 00 18 
37509 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3750d 33c 18 18 FF 18 
37511 33d 18 18 18 18 
37515 33e 18 18 18 63 
37519 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3751d 340 36 63 63 7F 
37521 341 63 63 63 63 
37525 342 00 00 00 00 
37529 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3752d 344 00 1E 30 3E 
37531 345 33 33 33 6E 
37535 346 00 00 00 6C 
37539 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3753d 348 EC 0C FC 00 
37541 349 00 00 00 00 
37545 34a 00 00 00 00 
37549 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3754d 34c FC 0C EC 6C 
37551 34d 6C 6C 6C 6C 
37555 34e 6C 6C 6C 6C 
37559 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3755d 350 EF 00 FF 00 
37561 351 00 00 00 00 
37565 352 00 00 00 00 
37569 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3756d 354 FF 00 EF 6C 
37571 355 6C 6C 6C 6C 
37575 356 6C 6C 6C 6C 
37579 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3757d 358 EC 0C EC 6C 
37581 359 6C 6C 6C 6C 
37585 35a 6C 6C 6C 00 
37589 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3758d 35c FF 00 FF 00 
37591 35d 00 00 00 00 
37595 35e 00 00 00 6C 
37599 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3759d 360 EF 00 EF 6C 
375a1 361 6C 6C 6C 6C 
375a5 362 6C 6C 6C 00 
375a9 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
375ad 364 63 3E 63 63 
375b1 365 63 63 3E 63 
375b5 366 00 00 00 00 
375b9 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
375bd 368 30 3C 36 33 
375c1 369 33 33 33 6E 
375c5 36a 00 00 00 00 
375c9 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
375cd 36c 66 66 6F 66 
375d1 36d 66 66 36 1F 
375d5 36e 00 00 00 36 
375d9 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
375dd 370 66 66 66 66 
375e1 371 66 66       | 	byte	$66[6]
375e3 371 36 1F 00 00 
375e7 372 00 00 63 00 
375eb 373 7F 66 46 16 
375ef 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
375f3 375 66 7F 00 00 
375f7 376 00 6C 38 00 
375fb 377 38 30 30 3C 
375ff 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
37603 379 33 6E 00 00 
37607 37a 00 36 1C 00 
3760b 37b 63 67 6F 7F 
3760f 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
37613 37d 63 63 00 00 
37617 37e 00 30 18 00 
3761b 37f 3C 18 18 18 
3761f 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
37623 381 18 3C 00 00 
37627 382 00 3C 66 00 
3762b 383 3C 18 18 18 
3762f 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
37633 385 18 3C 00 00 
37637 386 00 00 00 36 
3763b 387 1C 08 00 3E 
3763f 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
37643 389 63 3E 00 00 
37647 38a 00 18 18 18 
3764b 38b 18 18 18 18 
3764f 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
37653 38d 00 00 00 00 
37657 38e 00 00 00 00 
3765b 38f 00 00 00 00 | 	byte	$00[12]
3765f 390 F8 18 18 18 
37663 391 18 18 18 18 
37667 392 18 FF FF FF 
3766b 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3766f 394 FF FF FF FF 
37673 395 FF FF FF FF 
37677 396 FF          | 	byte	$ff[9]
37678 397 00 00 00 00 
3767c 398 00 00 00    | 	byte	$00[7]
3767f 398 FF FF FF FF 
37683 399 FF FF FF FF 
37687 39a FF          | 	byte	$ff[9]
37688 39b 00 00 00 7E 
3768c 39c 7E 5A 18 18 
37690 39d 18 18 18 18 
37694 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
37698 39f 1C 36 1C 63 
3769c 3a0 63 63 63 63 
376a0 3a1 63 63 63 63 
376a4 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
376a8 3a3 FF FF FF FF 
376ac 3a4 FF FF FF    | 	byte	$ff[7]
376af 3a4 00 00 00 00 
376b3 3a5 00 00 00 00 
376b7 3a6 00          | 	byte	$00[9]
376b8 3a7 30 18 00 3E 
376bc 3a8 63 63 63 63 
376c0 3a9 63 63 63 63 
376c4 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
376c8 3ab 00 00 00 1E 
376cc 3ac 33 33 33 1B 
376d0 3ad 33 63 63 63 
376d4 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
376d8 3af 1C 36 00 3E 
376dc 3b0 63 63 63 63 
376e0 3b1 63 63 63 63 
376e4 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
376e8 3b3 30 18 00 63 
376ec 3b4 67 6F 7F 7B 
376f0 3b5 73 63 63 63 
376f4 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
376f8 3b7 00 00 60 30 
376fc 3b8 18 00 3B 66 
37700 3b9 66 66 66 66 
37704 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
37708 3bb 00 00 36 1C 
3770c 3bc 08 00 3B 66 
37710 3bd 66 66 66 66 
37714 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
37718 3bf 36 1C 00 3E 
3771c 3c0 63 63 06 1C 
37720 3c1 30 60 63 63 
37724 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
37728 3c3 00 00 36 1C 
3772c 3c4 08 00 3E 63 
37730 3c5 06 1C 30 63 
37734 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
37738 3c7 30 18 00 3F 
3773c 3c8 66 66 66 3E 
37740 3c9 36 66 66 66 
37744 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
37748 3cb 30 18 00 63 
3774c 3cc 63 63 63 63 
37750 3cd 63 63 63 63 
37754 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37758 3cf 00 00 60 30 
3775c 3d0 18 00 3B 6E 
37760 3d1 66 06 06 06 
37764 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
37768 3d3 66 33 00 63 
3776c 3d4 63 63 63 63 
37770 3d5 63 63 63 63 
37774 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37778 3d7 00 00 60 30 
3777c 3d8 18 00 63 63 
37780 3d9 63 63 63 63 
37784 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
37788 3db 30 18 00 66 
3778c 3dc 66 66 66 3C 
37790 3dd 18 18 18 18 
37794 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
37798 3df 00 00 00 08 
3779c 3e0 0C 0C 3F 0C 
377a0 3e1 0C 0C 0C 6C 
377a4 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
377a8 3e3 30 18 00 00 
377ac 3e4 00 00 00 00 
377b0 3e5 00 00 00 00 
377b4 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
377b8 3e7 00 00 00 00 
377bc 3e8 00 00 00 00 | 	byte	$00[8]
377c0 3e9 7F 00 00 00 
377c4 3ea 00 00 00 00 
377c8 3eb 66 33 00 00 
377cc 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
377d0 3ed 00 00 00 00 
377d4 3ee 00 00 00 00 
377d8 3ef 00 00 00 00 
377dc 3f0 00 00 00 00 
377e0 3f1 00 00 00 00 
377e4 3f2 00          | 	byte	$00[21]
377e5 3f2 0C 06 3C 36 
377e9 3f3 1C 00 00 00 
377ed 3f4 00 00 00 00 
377f1 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
377f5 3f6 00 00 00 63 
377f9 3f7 3E 00 00 00 
377fd 3f8 00 00 00 00 
37801 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37805 3fa 00 00 00 00 
37809 3fb 3E 63 06 1C 
3780d 3fc 36 63 63 36 
37811 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
37815 3fe 00 00 00 00 
37819 3ff 00 00 00 00 | 	byte	$00[8]
3781d 400 18 00 7E 00 
37821 401 18 00 00 00 
37825 402 00 00 00 00 
37829 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3782d 404 00 00 00 00 
37831 405 00 00 00 00 | 	byte	$00[8]
37835 406 18 30 1E 00 
37839 407 00 00 1C 36 
3783d 408 36 1C 00 00 
37841 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
37845 40a 00 00 00 00 
37849 40b 63 00 00 00 
3784d 40c 00 00 00 00 
37851 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37855 40e 00 00 00 18 
37859 40f 18 00 00 00 
3785d 410 00 00 00 00 
37861 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37865 412 00 00 00 00 
37869 413 00          | 	byte	$00[5]
3786a 413 CC 66 33 00 
3786e 414 33 33 33 33 
37872 415 33 33 6E 00 
37876 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3787a 417 00 3F 66 66 
3787e 418 66 3E 36 66 
37882 419 66 66 6F 00 
37886 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3788a 41b 36 1C 08 00 
3788e 41c 3B 6E 66 06 
37892 41d 06 06 0F 00 
37896 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3789a 41f 00 00 00 7E 
3789e 420 7E 7E 7E 7E 
378a2 421 7E 7E 00 00 
378a6 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
378aa 423 00 00 00 00 
378ae 424 00 00 00 00 
378b2 425 00 00 00 00 
378b6 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
378b8 427 00 00 00 00 
      ...             
378e8 433 00 00 00 00 
378ec 434 00 00 00    | st_font        file "st4font.def"
378ef 434 FF FF 00 00 
378f3 435 00 00 00 00 
378f7 436 00 18 18 18 
378fb 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
378ff 438 18 18 18 18 
37903 439 18 18 18 18 
37907 43a 18          | 	byte	$18[9]
37908 43b 00 00 00 00 
3790c 43c 00 00 00    | 	byte	$00[7]
3790f 43c FF FF 18 18 
37913 43d 18 18 18 18 
37917 43e 18 18 18 18 
3791b 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3791f 440 FF FF 00 00 
37923 441 00 00 00 00 
37927 442 00 18 18 18 
3792b 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3792f 444 1F 1F 18 18 
37933 445 18 18 18 18 
37937 446 18 18 18 18 
3793b 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3793f 448 F8 F8 18 18 
37943 449 18 18 18 18 
37947 44a 18 00 00 00 
3794b 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3794f 44c 1F 1F 18 18 
37953 44d 18 18 18 18 
37957 44e 18 00 00 00 
3795b 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3795f 450 F8 F8 18 18 
37963 451 18 18 18 18 
37967 452 18 18 18 18 
3796b 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3796f 454 1F 1F 00 00 
37973 455 00 00 00 00 
37977 456 00 18 18 18 
3797b 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3797f 458 F8 F8 00 00 
37983 459 00 00 00 00 
37987 45a 00 18 18 18 
3798b 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3798f 45c FF FF 18 18 
37993 45d 18 18 18 18 
37997 45e 18 00 00 18 
3799b 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3799f 460 66 7E 7E 66 
379a3 461 66 66 66 30 
379a7 462 18 00 00 7E 
379ab 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
379af 464 3E 06 06 06 
379b3 465 06 7E 7E 18 
379b7 466 0C 30 18 3C 
379bb 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
379bf 468 06 06 06 66 
379c3 469 66 7E 3C 00 
379c7 46a 00 30 18 66 
379cb 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
379cf 46c 7E 7E 76 76 
379d3 46d 66 66 66 00 
379d7 46e 00 30 18 7C 
379db 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
379df 470 1C 38 70 60 
379e3 471 60 7E 3E 00 
379e7 472 00 30 18 7E 
379eb 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
379ef 474 18 0C 0C 06 
379f3 475 06 7E 7E 00 
379f7 476 00 18 18 00 
379fb 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
379ff 478 18 18 0C 0C 
37a03 479 06 7E 7E 00 
37a07 47a 00 30 18 3C 
37a0b 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
37a0f 47c 66 66 66 66 
37a13 47d 66          | 	byte	$66[5]
37a14 47e 7E 3C 00 00 
37a18 47f 00 00 06 06 
37a1c 480 06 06 16 1E 
37a20 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
37a24 482 7E 7E 00 00 
37a28 483 00 00 00 00 
37a2c 484 00 3C 7C 60 
37a30 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
37a34 486 7E 7C 30 18 
37a38 487 00 00 00 00 
37a3c 488 00 3C 7E 66 
37a40 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
37a44 48a 7E 7C 18 0C 
37a48 48b 00 00 30 18 
37a4c 48c 00 3C 3E 06 
37a50 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
37a54 48e 7E 7C 00 00 
37a58 48f 00 00 30 18 
37a5c 490 00 3E 7E 66 
37a60 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
37a64 492 66 66 00 00 
37a68 493 00 00 30 18 
37a6c 494 00 7C 7E 06 
37a70 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
37a74 496 7E 3E 00 00 
37a78 497 00 00 30 18 
37a7c 498 00 7E 7E 30 
37a80 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
37a84 49a 7E 7E 00 00 
37a88 49b 00 00 18 18 
37a8c 49c 00 7E 7E 30 
37a90 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
37a94 49e 7E 7E 00 00 
37a98 49f 00 00 30 18 
37a9c 4a0 00 3C 7E 66 
37aa0 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
37aa4 4a2 7E 3C 00 00 
37aa8 4a3 00 00 1C 1C 
37aac 4a4 18 18 38 3C 
37ab0 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
37ab4 4a6 3C 3C 00 00 
37ab8 4a7 00 00 00 00 
37abc 4a8 00 00 00 00 
37ac0 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37ac4 4aa 00 00 00 00 
37ac8 4ab 00 00       | 	byte	$00[6]
37aca 4ab 18 18 18 18 
37ace 4ac 18 18 18 18 | 	byte	$18[8]
37ad2 4ad 00 00 18 18 
37ad6 4ae 00 00 00 00 
37ada 4af 66 66 66 66 
37ade 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
37ae2 4b1 00 00 00 00 
37ae6 4b2 00 00 00 00 
37aea 4b3 00          | 	byte	$00[9]
37aeb 4b3 66 66 FF FF 
37aef 4b4 66 66 FF FF 
37af3 4b5 66 66 00 00 
37af7 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
37afb 4b7 7C 7E 06 06 
37aff 4b8 3E 7C 60 60 
37b03 4b9 7E 3E 18 18 
37b07 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
37b0b 4bb 66 30 30 18 
37b0f 4bc 18 0C 0C 66 
37b13 4bd 66 00 00 00 
37b17 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
37b1b 4bf 66 66 3C 1C 
37b1f 4c0 1C FC FE 66 
37b23 4c1 66 FE FC 00 
37b27 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
37b2b 4c3 18 18 18 18 
37b2f 4c4 00 00 00 00 
37b33 4c5 00 00 00 00 
37b37 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
37b3b 4c7 18 1C 0C 0C 
37b3f 4c8 0C 0C 0C 0C 
37b43 4c9 1C 18 30 00 
37b47 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
37b4b 4cb 18 38 30 30 
37b4f 4cc 30 30 30 30 
37b53 4cd 38 18 0C 00 
37b57 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
37b5b 4cf 66 66 3C 3C 
37b5f 4d0 FF FF 3C 3C 
37b63 4d1 66 66 00 00 
37b67 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
37b6b 4d3 00 18 18 18 
37b6f 4d4 7E 7E 18 18 
37b73 4d5 18 00 00 00 
37b77 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37b7b 4d7 00 00 00 00 
37b7f 4d8 00 00       | 	byte	$00[6]
37b81 4d9 18 18 18 18 
37b85 4da 18          | 	byte	$18[5]
37b86 4da 0C 04 00 00 
37b8a 4db 00 00 00 00 
37b8e 4dc 7E 7E 00 00 
37b92 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
37b96 4de 00 00 00 00 
37b9a 4df 00 00 00 00 
37b9e 4e0 00 00 00 00 
37ba2 4e1 00          | 	byte	$00[13]
37ba3 4e1 18 18 18 00 
37ba7 4e2 00 00 00 60 
37bab 4e3 60 60 30 30 
37baf 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
37bb3 4e5 06 06 06 00 
37bb7 4e6 00 00 00 3C 
37bbb 4e7 7E 66 66 66 
37bbf 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
37bc3 4e9 66 7E 3C 00 
37bc7 4ea 00 00 00 18 
37bcb 4eb 18 1C 1C 18 
37bcf 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
37bd3 4ed 18 7E 7E 00 
37bd7 4ee 00 00 00 3C 
37bdb 4ef 7E 66 66 30 
37bdf 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
37be3 4f1 0C 7E 7E 00 
37be7 4f2 00 00 00 7E 
37beb 4f3 7E 30 30 18 
37bef 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
37bf3 4f5 66 7E 3C 00 
37bf7 4f6 00 00 00 30 
37bfb 4f7 30 38 38 3C 
37bff 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
37c03 4f9 7E 30 30 00 
37c07 4fa 00 00 00 7E 
37c0b 4fb 7E 06 06 3E 
37c0f 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
37c13 4fd 66 7E 3C 00 
37c17 4fe 00 00 00 38 
37c1b 4ff 3C 0E 06 06 
37c1f 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
37c23 501 66 7E 3C 00 
37c27 502 00 00 00 7E 
37c2b 503 7E 60 60 30 
37c2f 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
37c33 505 0C 0C 0C 00 
37c37 506 00 00 00 3C 
37c3b 507 7E 66 66 3C 
37c3f 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
37c43 509 66 7E 3C 00 
37c47 50a 00 00 00 3C 
37c4b 50b 7E 66 66 7E 
37c4f 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
37c53 50d 70 3C 1C 00 
37c57 50e 00 00 00 00 
37c5b 50f 00 00 18 18 
37c5f 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
37c63 511 18 18 18 00 
37c67 512 00 00 00 00 
37c6b 513 00 00 18 18 
37c6f 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
37c73 515 18 18 18 0C 
37c77 516 04 00 00 00 
37c7b 517 70 38 1C 0E 
37c7f 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
37c83 519 70 00 00 00 
37c87 51a 00 00 00 00 
37c8b 51b 00 00 7E 7E 
37c8f 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
37c93 51d 00 00 00 00 
37c97 51e 00 00 00 00 | 	byte	$00[8]
37c9b 51f 0E 1C 38 70 
37c9f 520 E0 70 38 1C 
37ca3 521 0E 00 00 00 
37ca7 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
37cab 523 7E 66 66 30 
37caf 524 30 18 18 18 
37cb3 525 00 18 18 00 
37cb7 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
37cbb 527 7E 66 66 66 
37cbf 528 66 36 06 66 
37cc3 529 66 7E 3C 00 
37cc7 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
37ccb 52b 3C 7E 66 66 
37ccf 52c 66 7E 7E 66 
37cd3 52d 66 66 66 00 
37cd7 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
37cdb 52f 7E 66 66 7E 
37cdf 530 3E 66 66 66 
37ce3 531 66 7E 3E 00 
37ce7 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
37ceb 533 7E 66 66 06 
37cef 534 06 06 06 66 
37cf3 535 66 7E 3C 00 
37cf7 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
37cfb 537 7E 66 66 66 
37cff 538 66 66 66 66 
37d03 539 66 7E 3E 00 
37d07 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
37d0b 53b 7E 06 06 3E 
37d0f 53c 3E 06 06 06 
37d13 53d 06 7E 7E 00 
37d17 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
37d1b 53f 7E 06 06 3E 
37d1f 540 3E 06 06 06 
37d23 541 06 06 06 00 
37d27 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
37d2b 543 7E 06 06 76 
37d2f 544 76 66 66 66 
37d33 545 66 7E 3C 00 
37d37 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
37d3b 547 66 66 66 7E 
37d3f 548 7E 66 66 66 
37d43 549 66 66 66 00 
37d47 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
37d4b 54b 7E 18 18 18 
37d4f 54c 18 18 18 18 
37d53 54d 18 7E 7E 00 
37d57 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
37d5b 54f 60 60 60 60 
37d5f 550 60 60 60    | 	byte	$60[7]
37d62 551 66 66 7E 3C 
37d66 552 00 00 00 00 
37d6a 553 66 66 36 36 
37d6e 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
37d72 555 66 66 C6 C6 
37d76 556 00 00 00 00 
37d7a 557 06 06 06 06 
37d7e 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
37d82 559 06 06 7E 7E 
37d86 55a 00 00 00 00 
37d8a 55b C6 C6 EE EE 
37d8e 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
37d92 55d C6 C6 C6 C6 
37d96 55e 00 00 00 00 
37d9a 55f 66 66 66 6E 
37d9e 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
37da2 561 76 66 66 66 
37da6 562 00 00 00 00 
37daa 563 3C 7E 66 66 
37dae 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
37db2 565 66 66 7E 3C 
37db6 566 00 00 00 00 
37dba 567 3E 7E 66 66 
37dbe 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
37dc2 569 06 06 06 06 
37dc6 56a 00 00 00 00 
37dca 56b 3C 7E 66 66 
37dce 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
37dd2 56d 66 56 3E 6C 
37dd6 56e 00 00 00 00 
37dda 56f 3E 7E 66 66 
37dde 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
37de2 571 66 66 C6 C6 
37de6 572 00 00 00 00 
37dea 573 7C 7E 06 06 
37dee 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
37df2 575 60 60 7E 3E 
37df6 576 00 00 00 00 
37dfa 577 7E 7E 18 18 
37dfe 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
37e02 579 18 18 18 18 
37e06 57a 00 00 00 00 
37e0a 57b 66 66 66 66 
37e0e 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
37e12 57d 66 66 7E 3C 
37e16 57e 00 00 00 00 
37e1a 57f 66 66 66 66 
37e1e 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
37e22 581 3C 3C 18 18 
37e26 582 00 00 00 00 
37e2a 583 C6 C6 C6 C6 
37e2e 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
37e32 585 FE EE C6 82 
37e36 586 00 00 00 00 
37e3a 587 66 66 66 3C 
37e3e 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
37e42 589 3C 66 66 66 
37e46 58a 00 00 00 00 
37e4a 58b 66 66 66 66 
37e4e 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
37e52 58d 18 18 18 18 
37e56 58e 00 00 00 00 
37e5a 58f 7E 7E 30 30 
37e5e 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
37e62 591 06 06 7E 7E 
37e66 592 00 00 00 00 
37e6a 593 3C 3C 0C 0C 
37e6e 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
37e72 595 0C 0C 3C 3C 
37e76 596 00 00 00 00 
37e7a 597 06 06 0C 0C 
37e7e 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
37e82 599 60 60 C0 C0 
37e86 59a 00 00 00 00 
37e8a 59b 3C 3C 30 30 
37e8e 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
37e92 59d 30 30 3C 3C 
37e96 59e 00 00 00 00 
37e9a 59f 18 18 3C 3C 
37e9e 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
37ea2 5a1 00 00 00 00 
37ea6 5a2 00 00 00 00 
37eaa 5a3 00 00 00 00 
37eae 5a4 00 00 00 00 
37eb2 5a5 00 00       | 	byte	$00[18]
37eb4 5a6 FE FE 00 00 
37eb8 5a7 00 00 0C 0C 
37ebc 5a8 18 18 00 00 
37ec0 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
37ec4 5aa 00 00 00 00 
37ec8 5ab 00 00 00 00 
37ecc 5ac 00          | 	byte	$00[9]
37ecd 5ac 3C 7C 60 7C 
37ed1 5ad 7E 66 66 7E 
37ed5 5ae 7C 00 00 00 
37ed9 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
37edd 5b0 3E 7E 66 66 
37ee1 5b1 66 66 66 7E 
37ee5 5b2 3E 00 00 00 
37ee9 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
37eed 5b4 3C 3E 06 06 
37ef1 5b5 06 06 06 7E 
37ef5 5b6 7C 00 00 00 
37ef9 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
37efd 5b8 7C 7E 66 66 
37f01 5b9 66 66 66 7E 
37f05 5ba 7C 00 00 00 
37f09 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
37f0d 5bc 3C 7E 66 66 
37f11 5bd 7E 06 06 7E 
37f15 5be 7C 00 00 00 
37f19 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
37f1d 5c0 18 7E 7E 18 
37f21 5c1 18 18 18 18 
37f25 5c2 18 00 00 00 
37f29 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37f2d 5c4 7C 7E 66 66 
37f31 5c5 66 66 7E 7C 
37f35 5c6 60 7E 3E 00 
37f39 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
37f3d 5c8 3E 7E 66 66 
37f41 5c9 66 66 66 66 
37f45 5ca 66 00 00 00 
37f49 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
37f4d 5cc 1C 1C 18 18 
37f51 5cd 18 18 18 3C 
37f55 5ce 3C 00 00 00 
37f59 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
37f5d 5d0 30 30 30 30 
37f61 5d1 30 30 30 30 
37f65 5d2 30          | 	byte	$30[9]
37f66 5d2 3E 1E 00 00 
37f6a 5d3 06 06 06 36 
37f6e 5d4 36 1E 1E 1E 
37f72 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
37f76 5d6 00 00 00 00 
37f7a 5d7 1C 1C 18 18 
37f7e 5d8 18 18 18 18 
37f82 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
37f86 5da 00 00 00 00 
37f8a 5db 00 00 00    | 	byte	$00[7]
37f8d 5dc 6C FE FE D6 
37f91 5dd D6 C6 C6 C6 
37f95 5de C6 00 00 00 
37f99 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
37f9d 5e0 3E 7E 66 66 
37fa1 5e1 66 66 66 66 
37fa5 5e2 66 00 00 00 
37fa9 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
37fad 5e4 3C 7E 66 66 
37fb1 5e5 66 66 66 7E 
37fb5 5e6 3C 00 00 00 
37fb9 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
37fbd 5e8 3E 7E 66 66 
37fc1 5e9 66 66 66 7E 
37fc5 5ea 3E 06 06 00 
37fc9 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
37fcd 5ec 7C 7E 66 66 
37fd1 5ed 66 66 66 7E 
37fd5 5ee 7C 60 60 00 
37fd9 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
37fdd 5f0 3E 7E 66 06 
37fe1 5f1 06 06 06 06 
37fe5 5f2 06 00 00 00 
37fe9 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
37fed 5f4 7C 7E 06 0E 
37ff1 5f5 3C 70 60 7E 
37ff5 5f6 3E 00 00 00 
37ff9 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
37ffd 5f8 7E 7E 18 18 
38001 5f9 18 18 18 78 
38005 5fa 70 00 00 00 
38009 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3800d 5fc 66 66 66 66 
38011 5fd 66 66 66    | 	byte	$66[7]
38014 5fe 7E 7C 00 00 
38018 5ff 00 00 00 00 
3801c 600 00 66 66 66 
38020 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
38024 602 18 18 00 00 
38028 603 00 00 00 00 
3802c 604 00 C6 C6 D6 
38030 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
38034 606 C6 82 00 00 
38038 607 00 00 00 00 
3803c 608 00 66 66 3C 
38040 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
38044 60a 66 66 00 00 
38048 60b 00 00 00 00 
3804c 60c 00 66 66 66 
38050 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
38054 60e 7C 60 7E 3E 
38058 60f 00 00 00 00 
3805c 610 00 7E 7E 30 
38060 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
38064 612 7E 7E 00 00 
38068 613 00 00 30 18 
3806c 614 18 18 18 0C 
38070 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
38074 616 18 30 00 00 
38078 617 00 00 18 18 
3807c 618 18 18 18 18 
38080 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
38084 61a 18 18 00 00 
38088 61b 00 00 0C 18 
3808c 61c 18 18 18 30 
38090 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
38094 61e 18 0C 00 00 
38098 61f 00 00 6C 7E 
3809c 620 36 00 00 00 
380a0 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
380a4 622 00 00 00 00 
380a8 623 00 00 00 00 
380ac 624 00          | 	byte	$00[9]
380ad 624 18 18 18 18 
380b1 625 18 18 00 00 
380b5 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
380b8 627 00 6C FE FE 
380bc 628 7C 38 10 00 
380c0 629 18 18 18 F8 
380c4 62a F8 18 18 18 | a8_font        file "atari8.fnt"
380c8 62b C0 C0 C0 C0 
380cc 62c C0 C0 C0 C0 | 	byte	$c0[8]
380d0 62d 18 18 18 1F 
380d4 62e 1F 00 00 00 
380d8 62f 18 18 18 1F 
380dc 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
380e0 631 00 00 00 1F 
380e4 632 1F 18 18 18 
380e8 633 C0 E0 70 38 
380ec 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
380f0 635 03 07 0E 1C 
380f4 636 38 70 E0 C0 
380f8 637 80 C0 E0 F0 
380fc 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
38100 639 00 00 00 00 
38104 63a F0 F0 F0 F0 
38108 63b 01 03 07 0F 
3810c 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
38110 63d F0 F0 F0 F0 
38114 63e 00 00 00 00 
38118 63f 0F 0F 0F 0F 
3811c 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
38120 641 FF FF 00 00 
38124 642 00 00 00 00 
38128 643 00 00 00 00 
3812c 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
38130 645 00 00 00 00 
38134 646 0F 0F 0F 0F 
38138 647 00 38 38 EE 
3813c 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
38140 649 00 00 00 F8 
38144 64a F8 18 18 18 
38148 64b 00 00 00 FF 
3814c 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
38150 64d 18 18 18 FF 
38154 64e FF 18 18 18 
38158 64f 00 00 3C 7E 
3815c 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
38160 651 00 00 00 00 
38164 652 FF FF FF FF 
38168 653 03 03 03 03 
3816c 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
38170 655 00 00 00 FF 
38174 656 FF 18 18 18 
38178 657 18 18 18 FF 
3817c 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
38180 659 0F 0F 0F 0F 
38184 65a 0F 0F 0F 0F | 	byte	$0f[8]
38188 65b 18 18 18 F8 
3818c 65c F8 00 00 00 
38190 65d 1E 06 1E 06 
38194 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
38198 65f 00 18 3C 7E 
3819c 660 18 18 18 00 
381a0 661 00 18 18 18 
381a4 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
381a8 663 00 18 0C 7E 
381ac 664 0C 18 00 00 
381b0 665 00 18 30 7E 
381b4 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
381b8 667 00 00 00 00 
381bc 668 00 00 00 00 
381c0 669 00          | 	byte	$00[9]
381c1 669 18 18 18 18 
381c5 66a 00 18 00 00 
381c9 66b 66 66 66 00 
381cd 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
381d1 66d 66 FF 66 66 
381d5 66e FF 66 00 18 
381d9 66f 7C 06 3C 60 
381dd 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
381e1 671 66 36 18 0C 
381e5 672 66 62 00 38 
381e9 673 6C 38 1C F6 
381ed 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
381f1 675 18 18 18 00 
381f5 676 00 00 00 00 
381f9 677 70 38 18 18 
381fd 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
38201 679 0E 1C 18 18 
38205 67a 1C 0E 00 00 
38209 67b 66 3C FF 3C 
3820d 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
38211 67d 18 18 7E 18 
38215 67e 18 00 00 00 
38219 67f 00 00 00 00 
3821d 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
38221 681 00 00 7E 00 
38225 682 00 00 00 00 
38229 683 00 00 00 00 
3822d 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
38231 685 60 30 18 0C 
38235 686 06 02 00 00 
38239 687 3C 66 76 6E 
3823d 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
38241 689 18 1C 18 18 
38245 68a 18 7E 00 00 
38249 68b 3C 66 30 18 
3824d 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
38251 68d 7E 30 18 30 
38255 68e 66 3C 00 00 
38259 68f 30 38 3C 36 
3825d 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
38261 691 7E 06 3E 60 
38265 692 66 3C 00 00 
38269 693 3C 06 3E 66 
3826d 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
38271 695 7E 60 30 18 
38275 696 0C 0C 00 00 
38279 697 3C 66 3C 66 
3827d 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
38281 699 3C 66 7C 60 
38285 69a 30 1C 00 00 
38289 69b 00 18 18 00 
3828d 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
38291 69d 00 18 18 00 
38295 69e 18 18 0C 60 
38299 69f 30 18 0C 18 
3829d 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
382a1 6a1 00 7E 00 00 
382a5 6a2 7E 00 00 06 
382a9 6a3 0C 18 30 18 
382ad 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
382b1 6a5 3C 66 30 18 
382b5 6a6 00 18 00 00 
382b9 6a7 3C 66 76 76 
382bd 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
382c1 6a9 18 3C 66 66 
382c5 6aa 7E 66 00 00 
382c9 6ab 3E 66 3E 66 
382cd 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
382d1 6ad 3C 66 06 06 
382d5 6ae 66 3C 00 00 
382d9 6af 1E 36 66 66 
382dd 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
382e1 6b1 7E 06 3E 06 
382e5 6b2 06 7E 00 00 
382e9 6b3 7E 06 3E 06 
382ed 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
382f1 6b5 7C 06 06 76 
382f5 6b6 66 7C 00 00 
382f9 6b7 66 66 7E 66 
382fd 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
38301 6b9 7E 18 18 18 
38305 6ba 18 7E 00 00 
38309 6bb 60 60 60 60 
3830d 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
38311 6bd 66 36 1E 1E 
38315 6be 36 66 00 00 
38319 6bf 06 06 06 06 
3831d 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
38321 6c1 C6 EE FE D6 
38325 6c2 C6 C6 00 00 
38329 6c3 66 6E 7E 7E 
3832d 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
38331 6c5 3C 66 66 66 
38335 6c6 66 3C 00 00 
38339 6c7 3E 66 66 3E 
3833d 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
38341 6c9 3C 66 66 66 
38345 6ca 36 6C 00 00 
38349 6cb 3E 66 66 3E 
3834d 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
38351 6cd 3C 06 3C 60 
38355 6ce 60 3C 00 00 
38359 6cf 7E 18 18 18 
3835d 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
38361 6d1 66 66 66 66 
38365 6d2 66          | 	byte	$66[5]
38366 6d2 7E 00 00 66 
3836a 6d3 66 66 66 3C 
3836e 6d4 18 00 00 C6 
38372 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
38376 6d6 C6 00 00 66 
3837a 6d7 66 3C 3C 66 
3837e 6d8 66 00 00 66 
38382 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
38386 6da 18 00 00 7E 
3838a 6db 30 18 0C 06 
3838e 6dc 7E 00 00 78 
38392 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
38396 6de 78 00 00 02 
3839a 6df 06 0C 18 30 
3839e 6e0 60 00 00 1E 
383a2 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
383a6 6e2 1E 00 00 10 
383aa 6e3 38 6C C6 00 
383ae 6e4 00 00 00 00 
383b2 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
383b6 6e6 FF 00 00 18 
383ba 6e7 3C 7E 7E 3C 
383be 6e8 18 00 00 00 
383c2 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
383c6 6ea 7C 00 00 06 
383ca 6eb 06 3E 66 66 
383ce 6ec 3E 00 00 00 
383d2 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
383d6 6ee 3C 00 00 60 
383da 6ef 60 7C 66 66 
383de 6f0 7C 00 00 00 
383e2 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
383e6 6f2 3C 00 00 70 
383ea 6f3 18 7C 18 18 
383ee 6f4 18 00 00 00 
383f2 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
383f6 6f6 60 3E 00 06 
383fa 6f7 06 3E 66 66 
383fe 6f8 66 00 00 18 
38402 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
38406 6fa 3C 00 00 60 
3840a 6fb 00 60 60 60 
3840e 6fc 60 3C 00 06 
38412 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
38416 6fe 66 00 00 1C 
3841a 6ff 18 18 18 18 
3841e 700 3C 00 00 00 
38422 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
38426 702 C6 00 00 00 
3842a 703 3E 66 66 66 
3842e 704 66 00 00 00 
38432 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
38436 706 3C 00 00 00 
3843a 707 3E 66 66 3E 
3843e 708 06 06 00 00 
38442 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
38446 70a 60 60 00 00 
3844a 70b 3E 66 06 06 
3844e 70c 06 00 00 00 
38452 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
38456 70e 3E 00 00 18 
3845a 70f 7E 18 18 18 
3845e 710 70 00 00 00 
38462 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
38466 712 7C 00 00 00 
3846a 713 66 66 66 3C 
3846e 714 18 00 00 00 
38472 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
38476 716 6C 00 00 00 
3847a 717 66 3C 18 3C 
3847e 718 66 00 00 00 
38482 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
38486 71a 30 1E 00 00 
3848a 71b 7E 30 18 0C 
3848e 71c 7E 00 00 18 
38492 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
38496 71e 3C 00 18 18 
3849a 71f 18 18 18 18 
3849e 720 18 18 00 7E 
384a2 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
384a6 722 60 00 10 18 
384aa 723 1C 1E 1C 18 
384ae 724 10 00 08 18 
384b2 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
384b6 726 08 00       | 	byte	$08, $00
384b8 727 00 6C FE FE 
384bc 728 7C 38 10 00 
384c0 729 18 18 18 F8 
384c4 72a F8 18 18 18 | a8_font2       file "atari8.fnt"
384c8 72b C0 C0 C0 C0 
384cc 72c C0 C0 C0 C0 | 	byte	$c0[8]
384d0 72d 18 18 18 1F 
384d4 72e 1F 00 00 00 
384d8 72f 18 18 18 1F 
384dc 730 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
384e0 731 00 00 00 1F 
384e4 732 1F 18 18 18 
384e8 733 C0 E0 70 38 
384ec 734 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
384f0 735 03 07 0E 1C 
384f4 736 38 70 E0 C0 
384f8 737 80 C0 E0 F0 
384fc 738 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
38500 739 00 00 00 00 
38504 73a F0 F0 F0 F0 
38508 73b 01 03 07 0F 
3850c 73c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
38510 73d F0 F0 F0 F0 
38514 73e 00 00 00 00 
38518 73f 0F 0F 0F 0F 
3851c 740 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
38520 741 FF FF 00 00 
38524 742 00 00 00 00 
38528 743 00 00 00 00 
3852c 744 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
38530 745 00 00 00 00 
38534 746 0F 0F 0F 0F 
38538 747 00 38 38 EE 
3853c 748 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
38540 749 00 00 00 F8 
38544 74a F8 18 18 18 
38548 74b 00 00 00 FF 
3854c 74c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
38550 74d 18 18 18 FF 
38554 74e FF 18 18 18 
38558 74f 00 00 3C 7E 
3855c 750 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
38560 751 00 00 00 00 
38564 752 FF FF FF FF 
38568 753 03 03 03 03 
3856c 754 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
38570 755 00 00 00 FF 
38574 756 FF 18 18 18 
38578 757 18 18 18 FF 
3857c 758 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
38580 759 0F 0F 0F 0F 
38584 75a 0F 0F 0F 0F | 	byte	$0f[8]
38588 75b 18 18 18 F8 
3858c 75c F8 00 00 00 
38590 75d 1E 06 1E 06 
38594 75e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
38598 75f 00 18 3C 7E 
3859c 760 18 18 18 00 
385a0 761 00 18 18 18 
385a4 762 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
385a8 763 00 18 0C 7E 
385ac 764 0C 18 00 00 
385b0 765 00 18 30 7E 
385b4 766 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
385b8 767 00 00 00 00 
385bc 768 00 00 00 00 
385c0 769 00          | 	byte	$00[9]
385c1 769 18 18 18 18 
385c5 76a 00 18 00 00 
385c9 76b 66 66 66 00 
385cd 76c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
385d1 76d 66 FF 66 66 
385d5 76e FF 66 00 18 
385d9 76f 7C 06 3C 60 
385dd 770 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
385e1 771 66 36 18 0C 
385e5 772 66 62 00 38 
385e9 773 6C 38 1C F6 
385ed 774 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
385f1 775 18 18 18 00 
385f5 776 00 00 00 00 
385f9 777 70 38 18 18 
385fd 778 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
38601 779 0E 1C 18 18 
38605 77a 1C 0E 00 00 
38609 77b 66 3C FF 3C 
3860d 77c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
38611 77d 18 18 7E 18 
38615 77e 18 00 00 00 
38619 77f 00 00 00 00 
3861d 780 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
38621 781 00 00 7E 00 
38625 782 00 00 00 00 
38629 783 00 00 00 00 
3862d 784 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
38631 785 60 30 18 0C 
38635 786 06 02 00 00 
38639 787 3C 66 76 6E 
3863d 788 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
38641 789 18 1C 18 18 
38645 78a 18 7E 00 00 
38649 78b 3C 66 30 18 
3864d 78c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
38651 78d 7E 30 18 30 
38655 78e 66 3C 00 00 
38659 78f 30 38 3C 36 
3865d 790 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
38661 791 7E 06 3E 60 
38665 792 66 3C 00 00 
38669 793 3C 06 3E 66 
3866d 794 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
38671 795 7E 60 30 18 
38675 796 0C 0C 00 00 
38679 797 3C 66 3C 66 
3867d 798 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
38681 799 3C 66 7C 60 
38685 79a 30 1C 00 00 
38689 79b 00 18 18 00 
3868d 79c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
38691 79d 00 18 18 00 
38695 79e 18 18 0C 60 
38699 79f 30 18 0C 18 
3869d 7a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
386a1 7a1 00 7E 00 00 
386a5 7a2 7E 00 00 06 
386a9 7a3 0C 18 30 18 
386ad 7a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
386b1 7a5 3C 66 30 18 
386b5 7a6 00 18 00 00 
386b9 7a7 3C 66 76 76 
386bd 7a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
386c1 7a9 18 3C 66 66 
386c5 7aa 7E 66 00 00 
386c9 7ab 3E 66 3E 66 
386cd 7ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
386d1 7ad 3C 66 06 06 
386d5 7ae 66 3C 00 00 
386d9 7af 1E 36 66 66 
386dd 7b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
386e1 7b1 7E 06 3E 06 
386e5 7b2 06 7E 00 00 
386e9 7b3 7E 06 3E 06 
386ed 7b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
386f1 7b5 7C 06 06 76 
386f5 7b6 66 7C 00 00 
386f9 7b7 66 66 7E 66 
386fd 7b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
38701 7b9 7E 18 18 18 
38705 7ba 18 7E 00 00 
38709 7bb 60 60 60 60 
3870d 7bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
38711 7bd 66 36 1E 1E 
38715 7be 36 66 00 00 
38719 7bf 06 06 06 06 
3871d 7c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
38721 7c1 C6 EE FE D6 
38725 7c2 C6 C6 00 00 
38729 7c3 66 6E 7E 7E 
3872d 7c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
38731 7c5 3C 66 66 66 
38735 7c6 66 3C 00 00 
38739 7c7 3E 66 66 3E 
3873d 7c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
38741 7c9 3C 66 66 66 
38745 7ca 36 6C 00 00 
38749 7cb 3E 66 66 3E 
3874d 7cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
38751 7cd 3C 06 3C 60 
38755 7ce 60 3C 00 00 
38759 7cf 7E 18 18 18 
3875d 7d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
38761 7d1 66 66 66 66 
38765 7d2 66          | 	byte	$66[5]
38766 7d2 7E 00 00 66 
3876a 7d3 66 66 66 3C 
3876e 7d4 18 00 00 C6 
38772 7d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
38776 7d6 C6 00 00 66 
3877a 7d7 66 3C 3C 66 
3877e 7d8 66 00 00 66 
38782 7d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
38786 7da 18 00 00 7E 
3878a 7db 30 18 0C 06 
3878e 7dc 7E 00 00 78 
38792 7dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
38796 7de 78 00 00 02 
3879a 7df 06 0C 18 30 
3879e 7e0 60 00 00 1E 
387a2 7e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
387a6 7e2 1E 00 00 10 
387aa 7e3 38 6C C6 00 
387ae 7e4 00 00 00 00 
387b2 7e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
387b6 7e6 FF 00 00 18 
387ba 7e7 3C 7E 7E 3C 
387be 7e8 18 00 00 00 
387c2 7e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
387c6 7ea 7C 00 00 06 
387ca 7eb 06 3E 66 66 
387ce 7ec 3E 00 00 00 
387d2 7ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
387d6 7ee 3C 00 00 60 
387da 7ef 60 7C 66 66 
387de 7f0 7C 00 00 00 
387e2 7f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
387e6 7f2 3C 00 00 70 
387ea 7f3 18 7C 18 18 
387ee 7f4 18 00 00 00 
387f2 7f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
387f6 7f6 60 3E 00 06 
387fa 7f7 06 3E 66 66 
387fe 7f8 66 00 00 18 
38802 7f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
38806 7fa 3C 00 00 60 
3880a 7fb 00 60 60 60 
3880e 7fc 60 3C 00 06 
38812 7fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
38816 7fe 66 00 00 1C 
3881a 7ff 18 18 18 18 
3881e 800 3C 00 00 00 
38822 801 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
38826 802 C6 00 00 00 
3882a 803 3E 66 66 66 
3882e 804 66 00 00 00 
38832 805 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
38836 806 3C 00 00 00 
3883a 807 3E 66 66 3E 
3883e 808 06 06 00 00 
38842 809 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
38846 80a 60 60 00 00 
3884a 80b 3E 66 06 06 
3884e 80c 06 00 00 00 
38852 80d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
38856 80e 3E 00 00 18 
3885a 80f 7E 18 18 18 
3885e 810 70 00 00 00 
38862 811 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
38866 812 7C 00 00 00 
3886a 813 66 66 66 3C 
3886e 814 18 00 00 00 
38872 815 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
38876 816 6C 00 00 00 
3887a 817 66 3C 18 3C 
3887e 818 66 00 00 00 
38882 819 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
38886 81a 30 1E 00 00 
3888a 81b 7E 30 18 0C 
3888e 81c 7E 00 00 18 
38892 81d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
38896 81e 3C 00 18 18 
3889a 81f 18 18 18 18 
3889e 820 18 18 00 7E 
388a2 821 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
388a6 822 60 00 10 18 
388aa 823 1C 1E 1C 18 
388ae 824 10 00 08 18 
388b2 825 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
388b6 826 08 00       | 	byte	$08, $00
388b8 827 00 00 00 00 
      ...             
38ac4 8aa 00 00 00 00 
38ac8 8ab 00 00       | amiga_font     file "amigafont.def"
38aca 8ab 18 18 18 18 
38ace 8ac 18 18       | 	byte	$18[6]
38ad0 8ad 00 18 18 00 
38ad4 8ae 00 00 00 00 
38ad8 8af 00 00 66 66 
38adc 8b0 66 00 00 00 | 	byte	$00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $00, $00, $00
38ae0 8b1 00 00 00 00 
38ae4 8b2 00 00 00 00 
38ae8 8b3 00 00       | 	byte	$00[10]
38aea 8b3 36 36 7F 36 
38aee 8b4 36 36 7F 36 
38af2 8b5 36 00 00 00 
38af6 8b6 00 00 00 00 | 	byte	$36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $00, $00, $00
38afa 8b7 18 7C 06 06 
38afe 8b8 3C 60 60 3E 
38b02 8b9 18 00 00 00 
38b06 8ba 00 00 00 00 | 	byte	$18, $7c, $06, $06, $3c, $60, $60, $3e, $18, $00, $00, $00, $00, $00, $00, $00
38b0a 8bb 00 00 C6 69 
38b0e 8bc 36 18 6C 96 
38b12 8bd 63 00 00 00 
38b16 8be 00 00 00 00 | 	byte	$00, $00, $c6, $69, $36, $18, $6c, $96, $63, $00, $00, $00, $00, $00, $00, $00
38b1a 8bf 1C 36 36 1E 
38b1e 8c0 6E 3B 33 73 
38b22 8c1 DE 00 00 00 
38b26 8c2 00 00 00 00 | 	byte	$1c, $36, $36, $1e, $6e, $3b, $33, $73, $de, $00, $00, $00, $00, $00, $00, $00
38b2a 8c3 18 18 0C 00 
38b2e 8c4 00 00 00 00 
38b32 8c5 00 00 00 00 
38b36 8c6 00 00 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38b3a 8c7 30 18 0C 0C 
38b3e 8c8 0C 0C 0C 18 
38b42 8c9 30 00 00 00 
38b46 8ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00, $00
38b4a 8cb 0C 18 30 30 
38b4e 8cc 30 30 30 18 
38b52 8cd 0C 00 00 00 
38b56 8ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00, $00
38b5a 8cf 00 66 66 3C 
38b5e 8d0 FF 3C 66 66 
38b62 8d1 00 00 00 00 
38b66 8d2 00 00 00 00 | 	byte	$00, $66, $66, $3c, $ff, $3c, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00
38b6a 8d3 00 18 18 18 
38b6e 8d4 7E 18 18 18 
38b72 8d5 00 00 00 00 
38b76 8d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
38b7a 8d7 00 00 00 00 
38b7e 8d8 00 00 00    | 	byte	$00[7]
38b81 8d9 18 18 0C 00 
38b85 8da 00 00 00 00 
38b89 8db 00 00 00 00 
38b8d 8dc 00 7E 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00
38b91 8dd 00 00 00 00 
38b95 8de 00 00 00 00 
38b99 8df 00 00 00 00 
38b9d 8e0 00 00 00 00 | 	byte	$00[16]
38ba1 8e1 18 18 00 00 
38ba5 8e2 00 00 00 00 
38ba9 8e3 00 00 C0 60 
38bad 8e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $60, $30, $18, $0c, $06
38bb1 8e5 03 00 00 00 
38bb5 8e6 00 00 00 00 
38bb9 8e7 00 3C 66 66 
38bbd 8e8 76 7E 6E 66 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $76, $7e, $6e, $66
38bc1 8e9 66 3C 00 00 
38bc5 8ea 00 00 00 00 
38bc9 8eb 00 18 1C 1E 
38bcd 8ec 18 18 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18
38bd1 8ed 18 18 00 00 
38bd5 8ee 00 00 00 00 
38bd9 8ef 00 3C 66 60 
38bdd 8f0 60 30 18 0C | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $30, $18, $0c
38be1 8f1 06 7E 00 00 
38be5 8f2 00 00 00 00 
38be9 8f3 00 3C 66 60 
38bed 8f4 60 38 60 60 | 	byte	$06, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $38, $60, $60
38bf1 8f5 66 3C 00 00 
38bf5 8f6 00 00 00 00 
38bf9 8f7 00 30 38 3C 
38bfd 8f8 36 33 7F 30 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30
38c01 8f9 30 30 00 00 
38c05 8fa 00 00 00 00 
38c09 8fb 00 7E 06 06 
38c0d 8fc 3E 60 60 60 | 	byte	$30, $30, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06, $3e, $60, $60, $60
38c11 8fd 66 3C 00 00 
38c15 8fe 00 00 00 00 
38c19 8ff 00 38 0C 06 
38c1d 900 06 3E 66 66 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $06, $06, $3e, $66, $66
38c21 901 66 3C 00 00 
38c25 902 00 00 00 00 
38c29 903 00 7E 60 60 
38c2d 904 60 30 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $7e, $60, $60, $60, $30, $18, $18
38c31 905 18 18 00 00 
38c35 906 00 00 00 00 
38c39 907 00 3C 66 66 
38c3d 908 66 3C 66 66 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $3c, $66, $66
38c41 909 66 3C 00 00 
38c45 90a 00 00 00 00 
38c49 90b 00 3C 66 66 
38c4d 90c 66 7C 60 60 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $7c, $60, $60
38c51 90d 30 1C 00 00 
38c55 90e 00 00 00 00 
38c59 90f 00 00 00 18 
38c5d 910 18 00 00 18 | 	byte	$30, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $18
38c61 911 18 00 00 00 
38c65 912 00 00 00 00 
38c69 913 00 00 00 18 
38c6d 914 18 00 00 00 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
38c71 915 18 18 0C 00 
38c75 916 00 00 00 00 
38c79 917 00 00 00 60 
38c7d 918 18 06 18 60 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $60, $18, $06, $18, $60
38c81 919 00 00 00 00 
38c85 91a 00 00 00 00 
38c89 91b 00 00 00 00 | 	byte	$00[12]
38c8d 91c 7E 00 7E 00 
38c91 91d 00 00 00 00 
38c95 91e 00 00 00 00 
38c99 91f 00 00 00 06 | 	byte	$7e, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
38c9d 920 18 60 18 06 
38ca1 921 00 00 00 00 
38ca5 922 00 00 00 00 
38ca9 923 00 3C 66 60 | 	byte	$18, $60, $18, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60
38cad 924 60 30 18 00 
38cb1 925 18 18 00 00 
38cb5 926 00 00 00 00 
38cb9 927 00 3E 63 63 | 	byte	$60, $30, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
38cbd 928 7B 6B 7B 03 
38cc1 929 03 1E 00 00 
38cc5 92a 00 00 00 00 
38cc9 92b 00 3E 63 63 | 	byte	$7b, $6b, $7b, $03, $03, $1e, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
38ccd 92c 63 7F 63 63 
38cd1 92d 63 63 00 00 
38cd5 92e 00 00 00 00 
38cd9 92f 00 3E 66 66 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66
38cdd 930 66 3E 66 66 
38ce1 931 66 3E 00 00 
38ce5 932 00 00 00 00 
38ce9 933 00 78 0C 06 | 	byte	$66, $3e, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $78, $0c, $06
38ced 934 06 06 06 06 
38cf1 935 0C 78 00 00 
38cf5 936 00 00 00 00 
38cf9 937 00 1F 33 63 | 	byte	$06, $06, $06, $06, $0c, $78, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $63
38cfd 938 63 63 63 63 
38d01 939 33 1F 00 00 
38d05 93a 00 00 00 00 
38d09 93b 00 7E 06 06 | 	byte	$63, $63, $63, $63, $33, $1f, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
38d0d 93c 06 1E 06 06 
38d11 93d 06 7E 00 00 
38d15 93e 00 00 00 00 
38d19 93f 00 7E 06 06 | 	byte	$06, $1e, $06, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
38d1d 940 06 1E 06 06 
38d21 941 06 06 00 00 
38d25 942 00 00 00 00 
38d29 943 00 3C 66 06 | 	byte	$06, $1e, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06
38d2d 944 06 76 66 66 
38d31 945 66 7C 00 00 
38d35 946 00 00 00 00 
38d39 947 00 63 63 63 | 	byte	$06, $76, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63
38d3d 948 63 7F 63 63 
38d41 949 63 63 00 00 
38d45 94a 00 00 00 00 
38d49 94b 00 3C 18 18 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3c, $18, $18
38d4d 94c 18 18 18 18 
38d51 94d 18          | 	byte	$18[5]
38d52 94d 3C 00 00 00 
38d56 94e 00 00 00 00 
38d5a 94f 60 60 60 60 
38d5e 950 60 60 60 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60, $60, $60, $60, $60, $63
38d62 951 3E 00 00 00 
38d66 952 00 00 00 00 
38d6a 953 C3 63 33 1B 
38d6e 954 0F 1B 33 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $c3, $63, $33, $1b, $0f, $1b, $33, $63
38d72 955 C3 00 00 00 
38d76 956 00 00 00 00 
38d7a 957 03 03 03 03 
38d7e 958 03 03 03 03 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $03, $03, $03
38d82 959 7F 00 00 00 
38d86 95a 00 00 00 00 
38d8a 95b 63 77 7F 6B 
38d8e 95c 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $6b, $63, $63, $63, $63
38d92 95d 63 00 00 00 
38d96 95e 00 00 00 00 
38d9a 95f 63 67 6F 7B 
38d9e 960 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7b, $73, $63, $63, $63
38da2 961 63 00 00 00 
38da6 962 00 00 00 00 
38daa 963 3E 63 63 63 
38dae 964 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63
38db2 965 3E 00 00 00 
38db6 966 00 00 00 00 
38dba 967 3E 66 66 66 
38dbe 968 3E 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e, $06, $06, $06
38dc2 969 06 00 00 00 
38dc6 96a 00 00 00 00 
38dca 96b 3E 63 63 63 
38dce 96c 63 63 63 7B | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $7b
38dd2 96d FE 00 00 00 
38dd6 96e 00 00 00 00 
38dda 96f 1F 33 33 33 
38dde 970 1F 1B 33 63 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $33, $33, $1f, $1b, $33, $63
38de2 971 63 00 00 00 
38de6 972 00 00 00 00 
38dea 973 3C 66 06 0C 
38dee 974 18 30 60 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06, $0c, $18, $30, $60, $66
38df2 975 3C 00 00 00 
38df6 976 00 00 00 00 
38dfa 977 7E 18 18 18 
38dfe 978 18 18 18 18 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $7e, $18, $18, $18, $18, $18, $18, $18
38e02 979 18 00 00 00 
38e06 97a 00 00 00 00 
38e0a 97b 63 63 63 63 
38e0e 97c 63 63 63 63 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63
38e12 97d 3E 00 00 00 
38e16 97e 00 00 00 00 
38e1a 97f 63 63 63 63 
38e1e 980 63 36 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36, $36, $1c
38e22 981 08 00 00 00 
38e26 982 00 00 00 00 
38e2a 983 C3 C3 C3 C3 
38e2e 984 C3 DB FF E7 | 	byte	$08, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $c3, $c3, $c3, $db, $ff, $e7
38e32 985 C3 00 00 00 
38e36 986 00 00 00 00 
38e3a 987 C3 C3 66 3C 
38e3e 988 18 3C 66 C3 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $3c, $66, $c3
38e42 989 C3 00 00 00 
38e46 98a 00 00 00 00 
38e4a 98b C3 C3 66 3C 
38e4e 98c 18 18 18 18 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $18, $18, $18
38e52 98d 18 00 00 00 
38e56 98e 00 00 00 00 
38e5a 98f 7F 60 60 30 
38e5e 990 18 0C 06 03 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $7f, $60, $60, $30, $18, $0c, $06, $03
38e62 991 7F 00 00 00 
38e66 992 00 00 00 00 
38e6a 993 3C 0C 0C 0C 
38e6e 994 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
38e72 995 3C 00 00 00 
38e76 996 00 00 00 00 
38e7a 997 00 03 06 0C 
38e7e 998 18 30 60 C0 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $03, $06, $0c, $18, $30, $60, $c0
38e82 999 00 00 00 00 
38e86 99a 00 00 00 00 | 	byte	$00[8]
38e8a 99b 3C 30 30 30 
38e8e 99c 30 30 30 30 
38e92 99d 3C 00 00 00 
38e96 99e 00 00 00 00 | 	byte	$3c, $30, $30, $30, $30, $30, $30, $30, $3c, $00, $00, $00, $00, $00, $00, $00
38e9a 99f 08 1C 36 63 
38e9e 9a0 00 00 00 00 
38ea2 9a1 00 00 00 00 
38ea6 9a2 00 00 00 00 | 	byte	$08, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38eaa 9a3 00 00 00 00 
38eae 9a4 00 00 00 00 
38eb2 9a5 00          | 	byte	$00[9]
38eb3 9a5 7F 00 00 00 
38eb7 9a6 00 00 00 18 
38ebb 9a7 18 30 00 00 
38ebf 9a8 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $18, $18, $30, $00, $00, $00, $00, $00, $00
38ec3 9a9 00 00 00 00 
38ec7 9aa 00 00 00 00 
38ecb 9ab 00 00       | 	byte	$00[10]
38ecd 9ac 3C 60 7C 66 
38ed1 9ad 66 7C 00 00 
38ed5 9ae 00 00 00 00 
38ed9 9af 00 06 06 06 | 	byte	$3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $06, $06, $06
38edd 9b0 3E 66 66 66 
38ee1 9b1 66 3E 00 00 
38ee5 9b2 00 00 00 00 
38ee9 9b3 00 00 00 00 | 	byte	$3e, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38eed 9b4 3C 06 06 06 
38ef1 9b5 06 3C 00 00 
38ef5 9b6 00 00 00 00 
38ef9 9b7 00 60 60 60 | 	byte	$3c, $06, $06, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60
38efd 9b8 7C 66 66 66 
38f01 9b9 66 7C 00 00 
38f05 9ba 00 00 00 00 
38f09 9bb 00 00 00 00 | 	byte	$7c, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38f0d 9bc 3C 66 7E 06 
38f11 9bd 06 3C 00 00 
38f15 9be 00 00 00 00 
38f19 9bf 00 38 0C 0C | 	byte	$3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $0c
38f1d 9c0 3E 0C 0C 0C 
38f21 9c1 0C 0C 00 00 
38f25 9c2 00 00 00 00 
38f29 9c3 00 00 00 00 | 	byte	$3e, $0c, $0c, $0c, $0c, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38f2d 9c4 7C 66 66 66 
38f31 9c5 7C 60 60 3C 
38f35 9c6 00 00 00 00 
38f39 9c7 00 06 06 06 | 	byte	$7c, $66, $66, $66, $7c, $60, $60, $3c, $00, $00, $00, $00, $00, $06, $06, $06
38f3d 9c8 3E 66 66 66 
38f41 9c9 66 66 00 00 
38f45 9ca 00 00 00 00 
38f49 9cb 00 00 18 00 | 	byte	$3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00
38f4d 9cc 18 18 18 18 
38f51 9cd 18          | 	byte	$18[5]
38f52 9cd 30 00 00 00 
38f56 9ce 00 00 00 00 
38f5a 9cf 00 30 00 30 
38f5e 9d0 30 30 30 30 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $30, $30, $30, $30, $30
38f62 9d1 30 30 1E 00 
38f66 9d2 00 00 00 00 
38f6a 9d3 03 03 03 33 
38f6e 9d4 1B 0F 1B 33 | 	byte	$30, $30, $1e, $00, $00, $00, $00, $00, $03, $03, $03, $33, $1b, $0f, $1b, $33
38f72 9d5 63 00 00 00 
38f76 9d6 00 00 00 00 
38f7a 9d7 18 18 18 18 
38f7e 9d8 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
38f82 9d9 30 00 00 00 
38f86 9da 00 00 00 00 
38f8a 9db 00 00 00 37 
38f8e 9dc 7F 6B 63 63 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $63, $63
38f92 9dd 63 00 00 00 
38f96 9de 00 00 00 00 
38f9a 9df 00 00 00 3E 
38f9e 9e0 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $66
38fa2 9e1 66 00 00 00 
38fa6 9e2 00 00 00 00 
38faa 9e3 00 00 00 3C 
38fae 9e4 66 66 66 66 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $66
38fb2 9e5 3C 00 00 00 
38fb6 9e6 00 00 00 00 
38fba 9e7 00 00 00 3E 
38fbe 9e8 66 66 66 3E | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e
38fc2 9e9 06 06 06 00 
38fc6 9ea 00 00 00 00 
38fca 9eb 00 00 00 7C 
38fce 9ec 66 66 66 7C | 	byte	$06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7c, $66, $66, $66, $7c
38fd2 9ed 60 60 60 00 
38fd6 9ee 00 00 00 00 
38fda 9ef 00 00 00 3E 
38fde 9f0 66 06 06 06 | 	byte	$60, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $06, $06, $06
38fe2 9f1 06 00 00 00 
38fe6 9f2 00 00 00 00 
38fea 9f3 00 00 00 3C 
38fee 9f4 06 0C 30 60 | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $06, $0c, $30, $60
38ff2 9f5 3E 00 00 00 
38ff6 9f6 00 00 00 00 
38ffa 9f7 00 0C 0C 3E 
38ffe 9f8 0C 0C 0C 0C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $0c, $3e, $0c, $0c, $0c, $0c
39002 9f9 38 00 00 00 
39006 9fa 00 00 00 00 
3900a 9fb 00 00 00 66 
3900e 9fc 66 66 66 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66
39012 9fd 7C 00 00 00 
39016 9fe 00 00 00 00 
3901a 9ff 00 00 00 66 
3901e a00 66 66 66 3C | 	byte	$7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
39022 a01 18 00 00 00 
39026 a02 00 00 00 00 
3902a a03 00 00 00 63 
3902e a04 63 63 6B 3E | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $6b, $3e
39032 a05 36 00 00 00 
39036 a06 00 00 00 00 
3903a a07 00 00 00 63 
3903e a08 36 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36
39042 a09 63 00 00 00 
39046 a0a 00 00 00 00 
3904a a0b 00 00 00 66 
3904e a0c 66 66 66 3C | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
39052 a0d 18 0C 06 00 
39056 a0e 00 00 00 00 
3905a a0f 00 00 00 7E 
3905e a10 30 18 0C 06 | 	byte	$18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $30, $18, $0c, $06
39062 a11 7E 00 00 00 
39066 a12 00 00 00 00 
3906a a13 70 18 18 18 
3906e a14 0E 18 18 18 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18
39072 a15 70 00 00 00 
39076 a16 00 00 00 00 
3907a a17 18 18 18 18 
3907e a18 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
39082 a19 18 00 00 00 
39086 a1a 00 00 00 00 
3908a a1b 0E 18 18 18 
3908e a1c 70 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18
39092 a1d 0E 00 00 00 
39096 a1e 00 00 00 00 
3909a a1f 46 5D 31 00 
3909e a20 00 00 00 00 | 	byte	$0e, $00, $00, $00, $00, $00, $00, $00, $46, $5d, $31, $00, $00, $00, $00, $00
390a2 a21 00 00 00 00 
390a6 a22 00 00 00 00 | 	byte	$00[8]
390aa a23 C0 F0 3C 0F 
390ae a24 C3 F0 3C 0F 
390b2 a25 03 00 00 00 
390b6 a26 00 00 00 00 | 	byte	$c0, $f0, $3c, $0f, $c3, $f0, $3c, $0f, $03, $00, $00, $00, $00, $00, $00, $00
390ba a27 18 18 00 18 
390be a28 18 18 18 18 
390c2 a29 18 00 00 00 
390c6 a2a 00 00 00 00 | 	byte	$18, $18, $00, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
390ca a2b 18 18 7E 1B 
390ce a2c 1B 7E 18 18 
390d2 a2d 00 00 00 00 
390d6 a2e 00 00 00 00 | 	byte	$18, $18, $7e, $1b, $1b, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
390da a2f 78 CC 0C 0C 
390de a30 1E 0C 0C 06 
390e2 a31 7F 00 00 00 
390e6 a32 00 00 00 00 | 	byte	$78, $cc, $0c, $0c, $1e, $0c, $0c, $06, $7f, $00, $00, $00, $00, $00, $00, $00
390ea a33 66 3C 66 66 
390ee a34 3C 66 00 00 
390f2 a35 00 00 00 00 
390f6 a36 00 00 00 00 | 	byte	$66, $3c, $66, $66, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
390fa a37 C3 C3 66 3C 
390fe a38 18 7E 18 18 
39102 a39 18 00 00 00 
39106 a3a 00 00 00 00 | 	byte	$c3, $c3, $66, $3c, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3910a a3b 18 18 18 18 
3910e a3c 00 18 18 18 
39112 a3d 18 00 00 00 
39116 a3e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3911a a3f 3C 06 06 3C 
3911e a40 66 66 66 3C 
39122 a41 60 60 3C 00 
39126 a42 00 00 00 00 | 	byte	$3c, $06, $06, $3c, $66, $66, $66, $3c, $60, $60, $3c, $00, $00, $00, $00, $00
3912a a43 66 66 00 00 
3912e a44 00 00 00 00 
39132 a45 00 00 00 00 
39136 a46 00 00 00 00 | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3913a a47 7E 81 B9 85 
3913e a48 85 B9 81 7E 
39142 a49 00 00 00 00 
39146 a4a 00 00 00 00 | 	byte	$7e, $81, $b9, $85, $85, $b9, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3914a a4b 3C 33 33 7E 
3914e a4c 00 7F 00 00 
39152 a4d 00 00 00 00 
39156 a4e 00 00 00 00 | 	byte	$3c, $33, $33, $7e, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3915a a4f 00 00 CC 66 
3915e a50 33 66 CC 00 
39162 a51 00 00 00 00 
39166 a52 00 00 00 00 | 	byte	$00, $00, $cc, $66, $33, $66, $cc, $00, $00, $00, $00, $00, $00, $00, $00, $00
3916a a53 7E 60 60 00 
3916e a54 00 00 00 00 
39172 a55 00 00 00 00 
39176 a56 00 00 00 00 | 	byte	$7e, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3917a a57 7E 81 9D A5 
3917e a58 9D A5 81 7E 
39182 a59 00 00 00 00 
39186 a5a 00 00 00 00 | 	byte	$7e, $81, $9d, $a5, $9d, $a5, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3918a a5b 7E 00 00 00 
3918e a5c 00 00 00 00 
39192 a5d 00 00 00 00 
39196 a5e 00 00 00 00 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3919a a5f 3C 66 66 3C 
3919e a60 00 00 00 00 
391a2 a61 00 00 00 00 
391a6 a62 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
391aa a63 18 18 18 7E 
391ae a64 18 18 18 00 
391b2 a65 7E 00 00 00 
391b6 a66 00 00 00 00 | 	byte	$18, $18, $18, $7e, $18, $18, $18, $00, $7e, $00, $00, $00, $00, $00, $00, $00
391ba a67 1E 30 30 18 
391be a68 0C 06 3E 00 
391c2 a69 00 00 00 00 
391c6 a6a 00 00 00 00 | 	byte	$1e, $30, $30, $18, $0c, $06, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
391ca a6b 1E 30 30 1C 
391ce a6c 30 30 1E 00 
391d2 a6d 00 00 00 00 
391d6 a6e 00 00 00 00 | 	byte	$1e, $30, $30, $1c, $30, $30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
391da a6f 30 18 0C 06 
391de a70 00 00 00 00 
391e2 a71 00 00 00 00 
391e6 a72 00 00 00 00 | 	byte	$30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
391ea a73 00 00 00 66 
391ee a74 66 66 66 66 
391f2 a75 FE 06 06 00 
391f6 a76 00 00 00 00 | 	byte	$00, $00, $00, $66, $66, $66, $66, $66, $fe, $06, $06, $00, $00, $00, $00, $00
391fa a77 7C 5E 5E 5E 
391fe a78 5C 50 50 50 
39202 a79 50 50 00 00 
39206 a7a 00 00 00 00 | 	byte	$7c, $5e, $5e, $5e, $5c, $50, $50, $50, $50, $50, $00, $00, $00, $00, $00, $00
3920a a7b 00 00 00 18 
3920e a7c 18 00 00 00 
39212 a7d 00 00 00 00 
39216 a7e 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3921a a7f 00 00 00 00 
3921e a80 00 00 00 00 
39222 a81 00          | 	byte	$00[9]
39223 a81 30 18 00 00 
39227 a82 00 00 00 18 
3922b a83 1C 18 18 18 
3922f a84 18 18 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $18, $1c, $18, $18, $18, $18, $18, $00, $00
39233 a85 00 00 00 00 
39237 a86 00 00 00    | 	byte	$00[7]
3923a a87 3C 66 66 3C 
3923e a88 00 7E 00 00 
39242 a89 00 00 00 00 
39246 a8a 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3924a a8b 00 00 33 66 
3924e a8c CC 66 33 00 
39252 a8d 00 00 00 00 
39256 a8e 00 00 00 00 | 	byte	$00, $00, $33, $66, $cc, $66, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00
3925a a8f 02 63 32 1A 
3925e a90 4E 66 F3 40 
39262 a91 40 00 00 00 
39266 a92 00 00 00 00 | 	byte	$02, $63, $32, $1a, $4e, $66, $f3, $40, $40, $00, $00, $00, $00, $00, $00, $00
3926a a93 04 C6 64 34 
3926e a94 7C 8C 46 23 
39272 a95 F0 00 00 00 
39276 a96 00 00 00 00 | 	byte	$04, $c6, $64, $34, $7c, $8c, $46, $23, $f0, $00, $00, $00, $00, $00, $00, $00
3927a a97 03 C4 66 34 
3927e a98 5B 6C F6 43 
39282 a99 40 00 00 00 
39286 a9a 00 00 00 00 | 	byte	$03, $c4, $66, $34, $5b, $6c, $f6, $43, $40, $00, $00, $00, $00, $00, $00, $00
3928a a9b 18 18 00 18 
3928e a9c 0C 06 06 66 
39292 a9d 3C 00 00 00 
39296 a9e 00 00 00 00 | 	byte	$18, $18, $00, $18, $0c, $06, $06, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3929a a9f 06 0C 3E 63 
3929e aa0 63 7F 63 63 
392a2 aa1 63 00 00 00 
392a6 aa2 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
392aa aa3 30 18 3E 63 
392ae aa4 63 7F 63 63 
392b2 aa5 63 00 00 00 
392b6 aa6 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
392ba aa7 0C 33 3E 63 
392be aa8 63 63 7F 63 
392c2 aa9 63 00 00 00 
392c6 aaa 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
392ca aab 4E 39 3E 63 
392ce aac 63 7F 63 63 
392d2 aad 63 00 00 00 
392d6 aae 00 00 00 00 | 	byte	$4e, $39, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
392da aaf 63 00 3E 63 
392de ab0 63 7F 63 63 
392e2 ab1 63 00 00 00 
392e6 ab2 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
392ea ab3 1C 22 1C 36 
392ee ab4 63 63 7F 63 
392f2 ab5 63 00 00 00 
392f6 ab6 00 00 00 00 | 	byte	$1c, $22, $1c, $36, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
392fa ab7 F8 3C 3C 36 
392fe ab8 F6 3F 33 33 
39302 ab9 F3 00 00 00 
39306 aba 00 00 00 00 | 	byte	$f8, $3c, $3c, $36, $f6, $3f, $33, $33, $f3, $00, $00, $00, $00, $00, $00, $00
3930a abb 78 0C 06 06 
3930e abc 06 06 06 0C 
39312 abd 78 30 18 00 
39316 abe 00 00 00 00 | 	byte	$78, $0c, $06, $06, $06, $06, $06, $0c, $78, $30, $18, $00, $00, $00, $00, $00
3931a abf 0C 18 7E 06 
3931e ac0 06 3E 06 06 
39322 ac1 7E 00 00 00 
39326 ac2 00 00 00 00 | 	byte	$0c, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3932a ac3 30 18 7E 06 
3932e ac4 06 3E 06 06 
39332 ac5 7E 00 00 00 
39336 ac6 00 00 00 00 | 	byte	$30, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3933a ac7 18 66 7E 06 
3933e ac8 06 3E 06 06 
39342 ac9 7E 00 00 00 
39346 aca 00 00 00 00 | 	byte	$18, $66, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3934a acb 66 00 7E 06 
3934e acc 06 3E 06 06 
39352 acd 7E 00 00 00 
39356 ace 00 00 00 00 | 	byte	$66, $00, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3935a acf 0C 18 3C 18 
3935e ad0 18 18 18 18 
39362 ad1 3C 00 00 00 
39366 ad2 00 00 00 00 | 	byte	$0c, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3936a ad3 30 18 3C 18 
3936e ad4 18 18 18 18 
39372 ad5 3C 00 00 00 
39376 ad6 00 00 00 00 | 	byte	$30, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3937a ad7 18 66 3C 18 
3937e ad8 18 18 18 18 
39382 ad9 3C 00 00 00 
39386 ada 00 00 00 00 | 	byte	$18, $66, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3938a adb 66 00 3C 18 
3938e adc 18 18 18 18 
39392 add 3C 00 00 00 
39396 ade 00 00 00 00 | 	byte	$66, $00, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3939a adf 1E 36 66 66 
3939e ae0 6F 66 66 36 
393a2 ae1 1E 00 00 00 
393a6 ae2 00 00 00 00 | 	byte	$1e, $36, $66, $66, $6f, $66, $66, $36, $1e, $00, $00, $00, $00, $00, $00, $00
393aa ae3 8E 73 67 6F 
393ae ae4 7B 73 63 63 
393b2 ae5 63 00 00 00 
393b6 ae6 00 00 00 00 | 	byte	$8e, $73, $67, $6f, $7b, $73, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
393ba ae7 06 0C 3E 63 
393be ae8 63 63 63 63 
393c2 ae9 3E 00 00 00 
393c6 aea 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
393ca aeb 30 18 3E 63 
393ce aec 63 63 63 63 
393d2 aed 3E 00 00 00 
393d6 aee 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
393da aef 0C 33 3E 63 
393de af0 63 63 63 63 
393e2 af1 3E 00 00 00 
393e6 af2 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
393ea af3 8E 71 3E 63 
393ee af4 63 63 63 63 
393f2 af5 3E 00 00 00 
393f6 af6 00 00 00 00 | 	byte	$8e, $71, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
393fa af7 63 00 3E 63 
393fe af8 63 63 63 63 
39402 af9 3E 00 00 00 
39406 afa 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3940a afb 00 00 63 36 
3940e afc 1C 1C 36 63 
39412 afd 00 00 00 00 
39416 afe 00 00 00 00 | 	byte	$00, $00, $63, $36, $1c, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00
3941a aff BE 63 73 7B 
3941e b00 6B 6F 67 63 
39422 b01 3F 00 00 00 
39426 b02 00 00 00 00 | 	byte	$be, $63, $73, $7b, $6b, $6f, $67, $63, $3f, $00, $00, $00, $00, $00, $00, $00
3942a b03 0C 18 63 63 
3942e b04 63 63 63 63 
39432 b05 3E 00 00 00 
39436 b06 00 00 00 00 | 	byte	$0c, $18, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3943a b07 18 0C 63 63 
3943e b08 63 63 63 63 
39442 b09 3E 00 00 00 
39446 b0a 00 00 00 00 | 	byte	$18, $0c, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3944a b0b 08 36 63 63 
3944e b0c 63 63 63 63 
39452 b0d 3E 00 00 00 
39456 b0e 00 00 00 00 | 	byte	$08, $36, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3945a b0f 63 00 63 63 
3945e b10 63 63 63 63 
39462 b11 3E 00 00 00 
39466 b12 00 00 00 00 | 	byte	$63, $00, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3946a b13 30 18 C3 66 
3946e b14 3C 18 18 18 
39472 b15 18 00 00 00 
39476 b16 00 00 00 00 | 	byte	$30, $18, $c3, $66, $3c, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3947a b17 03 03 3F 63 
3947e b18 63 3F 03 03 
39482 b19 03 00 00 00 
39486 b1a 00 00 00 00 | 	byte	$03, $03, $3f, $63, $63, $3f, $03, $03, $03, $00, $00, $00, $00, $00, $00, $00
3948a b1b 3C 66 66 66 
3948e b1c 36 66 66 66 
39492 b1d 36 06 06 00 
39496 b1e 00 00 00 00 | 	byte	$3c, $66, $66, $66, $36, $66, $66, $66, $36, $06, $06, $00, $00, $00, $00, $00
3949a b1f 06 0C 00 3C 
3949e b20 60 7C 66 66 
394a2 b21 7C 00 00 00 
394a6 b22 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
394aa b23 60 30 00 3C 
394ae b24 60 7C 66 66 
394b2 b25 7C 00 00 00 
394b6 b26 00 00 00 00 | 	byte	$60, $30, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
394ba b27 18 66 00 3C 
394be b28 60 7C 66 66 
394c2 b29 7C 00 00 00 
394c6 b2a 00 00 00 00 | 	byte	$18, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
394ca b2b 8E 71 00 3C 
394ce b2c 60 7C 66 66 
394d2 b2d 7C 00 00 00 
394d6 b2e 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
394da b2f 00 66 00 3C 
394de b30 60 7C 66 66 
394e2 b31 7C 00 00 00 
394e6 b32 00 00 00 00 | 	byte	$00, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
394ea b33 18 24 18 3C 
394ee b34 60 7C 66 66 
394f2 b35 7C 00 00 00 
394f6 b36 00 00 00 00 | 	byte	$18, $24, $18, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
394fa b37 00 00 00 7E 
394fe b38 D8 FE 1B 1B 
39502 b39 EE 00 00 00 
39506 b3a 00 00 00 00 | 	byte	$00, $00, $00, $7e, $d8, $fe, $1b, $1b, $ee, $00, $00, $00, $00, $00, $00, $00
3950a b3b 00 00 00 3C 
3950e b3c 06 06 06 06 
39512 b3d 3C 18 0C 00 
39516 b3e 00 00 00 00 | 	byte	$00, $00, $00, $3c, $06, $06, $06, $06, $3c, $18, $0c, $00, $00, $00, $00, $00
3951a b3f 06 0C 00 3C 
3951e b40 66 7E 06 06 
39522 b41 3C 00 00 00 
39526 b42 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3952a b43 60 30 00 3C 
3952e b44 66 7E 06 06 
39532 b45 3C 00 00 00 
39536 b46 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3953a b47 18 66 00 3C 
3953e b48 66 7E 06 06 
39542 b49 3C 00 00 00 
39546 b4a 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3954a b4b 00 66 00 3C 
3954e b4c 66 7E 06 06 
39552 b4d 3C 00 00 00 
39556 b4e 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3955a b4f 0C 18 00 18 
3955e b50 18 18 18 18 
39562 b51 30 00 00 00 
39566 b52 00 00 00 00 | 	byte	$0c, $18, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3956a b53 18 0C 00 0C 
3956e b54 0C 0C 0C 0C 
39572 b55 18 00 00 00 
39576 b56 00 00 00 00 | 	byte	$18, $0c, $00, $0c, $0c, $0c, $0c, $0c, $18, $00, $00, $00, $00, $00, $00, $00
3957a b57 18 66 00 18 
3957e b58 18 18 18 18 
39582 b59 30 00 00 00 
39586 b5a 00 00 00 00 | 	byte	$18, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3958a b5b 00 66 00 18 
3958e b5c 18 18 18 18 
39592 b5d 30 00 00 00 
39596 b5e 00 00 00 00 | 	byte	$00, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3959a b5f 03 06 3F 18 
3959e b60 3C 66 66 66 
395a2 b61 3C 00 00 00 
395a6 b62 00 00 00 00 | 	byte	$03, $06, $3f, $18, $3c, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
395aa b63 8E 71 00 3E 
395ae b64 66 66 66 66 
395b2 b65 66 00 00 00 
395b6 b66 00 00 00 00 | 	byte	$8e, $71, $00, $3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
395ba b67 06 0C 00 3C 
395be b68 66 66 66 66 
395c2 b69 3C 00 00 00 
395c6 b6a 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
395ca b6b 60 30 00 3C 
395ce b6c 66 66 66 66 
395d2 b6d 3C 00 00 00 
395d6 b6e 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
395da b6f 18 66 00 3C 
395de b70 66 66 66 66 
395e2 b71 3C 00 00 00 
395e6 b72 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
395ea b73 8E 71 00 3C 
395ee b74 66 66 66 66 
395f2 b75 3C 00 00 00 
395f6 b76 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
395fa b77 00 66 00 3C 
395fe b78 66 66 66 66 
39602 b79 3C 00 00 00 
39606 b7a 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3960a b7b 00 18 18 00 
3960e b7c 7E 00 18 18 
39612 b7d 00 00 00 00 
39616 b7e 00 00 00 00 | 	byte	$00, $18, $18, $00, $7e, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3961a b7f 00 00 00 7E 
3961e b80 73 7B 6F 67 
39622 b81 3F 00 00 00 
39626 b82 00 00 00 00 | 	byte	$00, $00, $00, $7e, $73, $7b, $6f, $67, $3f, $00, $00, $00, $00, $00, $00, $00
3962a b83 0C 18 00 66 
3962e b84 66 66 66 66 
39632 b85 7C 00 00 00 
39636 b86 00 00 00 00 | 	byte	$0c, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3963a b87 30 18 00 66 
3963e b88 66 66 66 66 
39642 b89 7C 00 00 00 
39646 b8a 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3964a b8b 18 66 00 66 
3964e b8c 66 66 66 66 
39652 b8d 7C 00 00 00 
39656 b8e 00 00 00 00 | 	byte	$18, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3965a b8f 00 66 00 66 
3965e b90 66 66 66 66 
39662 b91 7C 00 00 00 
39666 b92 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3966a b93 30 18 00 66 
3966e b94 66 66 66 3C 
39672 b95 18 0C 06 00 
39676 b96 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
3967a b97 06 06 06 3E 
3967e b98 66 66 66 3E 
39682 b99 06 06 06 00 
39686 b9a 00 00 00 00 | 	byte	$06, $06, $06, $3e, $66, $66, $66, $3e, $06, $06, $06, $00, $00, $00, $00, $00
3968a b9b 00 66 00 66 
3968e b9c 66 66 66 3C 
39692 b9d 18 0C 06 00 
39696 b9e 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
3969a b9f 00 7E 66 66 
3969e ba0 66 66 66 66 
396a2 ba1 66 7E 00 00 
396a6 ba2 00 00 00 00 | 	byte	$00, $7e, $66, $66, $66, $66, $66, $66, $66, $7e, $00, $00, $00, $00, $00, $00
396aa ba3 00 00 00 00 
      ...             
398b2 c25 00 00 00 00 
398b6 c26 00 00       | 	byte	$00[526]
398b8 c27 00 00 00 00 
398bc c28 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
398bd c28 80 00 00 00 
398c1 c29 00 80 00 00 
398c5 c2a 80 80 00 00 
398c9 c2b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
398cd c2c 80 00 80 00 
398d1 c2d 00 40 80 00 
398d5 c2e AA AA AA 00 
398d9 c2f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
398dd c30 FF 00 00 00 
398e1 c31 00 FF 00 00 
398e5 c32 FF FF 00 00 
398e9 c33 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
398ed c34 FF 00 FF 00 
398f1 c35 00 FF FF 00 
398f5 c36 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
398f8 c37 00 00 00 00 
398fc c38 00          | ataripalette   file "ataripalettep2.def"
398fd c38 11 11 11 00 
39901 c39 22 22 22 00 
39905 c3a 33 33 33 00 
39909 c3b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3990d c3c 55 55 55 00 
39911 c3d 66 66 66 00 
39915 c3e 77 77 77 00 
39919 c3f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3991d c40 99 99 99 00 
39921 c41 AA AA AA 00 
39925 c42 BB BB BB 00 
39929 c43 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3992d c44 DD DD DD 00 
39931 c45 EE EE EE 00 
39935 c46 FF FF FF 00 
39939 c47 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3993d c48 00 14 40 00 
39941 c49 00 1E 60 00 
39945 c4a 00 28 80 00 
39949 c4b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3994d c4c 00 3C BF 00 
39951 c4d 00 46 DF 00 
39955 c4e 00 50 FF 00 
39959 c4f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3995d c50 39 77 FF 00 
39961 c51 55 8A FF 00 
39965 c52 71 9E FF 00 
39969 c53 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3996d c54 AA C5 FF 00 
39971 c55 C6 D8 FF 00 
39975 c56 E3 EC FF 00 
39979 c57 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3997d c58 00 00 40 00 
39981 c59 00 00 60 00 
39985 c5a 00 00 80 00 
39989 c5b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3998d c5c 00 00 BF 00 
39991 c5d 00 00 DF 00 
39995 c5e 00 00 FF 00 
39999 c5f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3999d c60 39 39 FF 00 
399a1 c61 55 55 FF 00 
399a5 c62 71 71 FF 00 
399a9 c63 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
399ad c64 AA AA FF 00 
399b1 c65 C6 C6 FF 00 
399b5 c66 E3 E3 FF 00 
399b9 c67 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
399bd c68 20 00 40 00 
399c1 c69 30 00 60 00 
399c5 c6a 40 00 80 00 
399c9 c6b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
399cd c6c 60 00 BF 00 
399d1 c6d 70 00 DF 00 
399d5 c6e 80 00 FF 00 
399d9 c6f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
399dd c70 9C 39 FF 00 
399e1 c71 AA 55 FF 00 
399e5 c72 B8 71 FF 00 
399e9 c73 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
399ed c74 D5 AA FF 00 
399f1 c75 E3 C6 FF 00 
399f5 c76 F1 E3 FF 00 
399f9 c77 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
399fd c78 40 00 40 00 
39a01 c79 60 00 60 00 
39a05 c7a 80 00 80 00 
39a09 c7b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
39a0d c7c BF 00 BF 00 
39a11 c7d DF 00 DF 00 
39a15 c7e FF 00 FF 00 
39a19 c7f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
39a1d c80 FF 39 FF 00 
39a21 c81 FF 55 FF 00 
39a25 c82 FF 71 FF 00 
39a29 c83 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
39a2d c84 FF AA FF 00 
39a31 c85 FF C6 FF 00 
39a35 c86 FF E3 FF 00 
39a39 c87 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
39a3d c88 40 00 20 00 
39a41 c89 60 00 30 00 
39a45 c8a 80 00 40 00 
39a49 c8b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
39a4d c8c BF 00 60 00 
39a51 c8d DF 00 70 00 
39a55 c8e FF 00 80 00 
39a59 c8f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
39a5d c90 FF 39 9C 00 
39a61 c91 FF 55 AA 00 
39a65 c92 FF 71 B8 00 
39a69 c93 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
39a6d c94 FF AA D5 00 
39a71 c95 FF C6 E3 00 
39a75 c96 FF E3 F1 00 
39a79 c97 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
39a7d c98 40 00 00 00 
39a81 c99 60 00 00 00 
39a85 c9a 80 00 00 00 
39a89 c9b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
39a8d c9c BF 00 00 00 
39a91 c9d DF 00 00 00 
39a95 c9e FF 00 00 00 
39a99 c9f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
39a9d ca0 FF 39 39 00 
39aa1 ca1 FF 55 55 00 
39aa5 ca2 FF 71 71 00 
39aa9 ca3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
39aad ca4 FF AA AA 00 
39ab1 ca5 FF C6 C6 00 
39ab5 ca6 FF E3 E3 00 
39ab9 ca7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
39abd ca8 40 10 00 00 
39ac1 ca9 60 18 00 00 
39ac5 caa 80 20 00 00 
39ac9 cab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
39acd cac BF 30 00 00 
39ad1 cad DF 38 00 00 
39ad5 cae FF 40 00 00 
39ad9 caf FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
39add cb0 FF 6A 39 00 
39ae1 cb1 FF 80 55 00 
39ae5 cb2 FF 95 71 00 
39ae9 cb3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
39aed cb4 FF BF AA 00 
39af1 cb5 FF D5 C6 00 
39af5 cb6 FF EA E3 00 
39af9 cb7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
39afd cb8 40 20 00 00 
39b01 cb9 60 30 00 00 
39b05 cba 80 40 00 00 
39b09 cbb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
39b0d cbc BF 60 00 00 
39b11 cbd DF 70 00 00 
39b15 cbe FF 80 00 00 
39b19 cbf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
39b1d cc0 FF 9C 39 00 
39b21 cc1 FF AA 55 00 
39b25 cc2 FF B8 71 00 
39b29 cc3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
39b2d cc4 FF D5 AA 00 
39b31 cc5 FF E3 C6 00 
39b35 cc6 FF F1 E3 00 
39b39 cc7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
39b3d cc8 40 30 00 00 
39b41 cc9 60 48 00 00 
39b45 cca 80 60 00 00 
39b49 ccb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
39b4d ccc BF 90 00 00 
39b51 ccd DF A8 00 00 
39b55 cce FF C0 00 00 
39b59 ccf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
39b5d cd0 FF CE 39 00 
39b61 cd1 FF D5 55 00 
39b65 cd2 FF DC 71 00 
39b69 cd3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
39b6d cd4 FF EA AA 00 
39b71 cd5 FF F1 C6 00 
39b75 cd6 FF F8 E3 00 
39b79 cd7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
39b7d cd8 30 40 00 00 
39b81 cd9 48 60 00 00 
39b85 cda 60 80 00 00 
39b89 cdb 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
39b8d cdc 90 BF 00 00 
39b91 cdd A8 DF 00 00 
39b95 cde C0 FF 00 00 
39b99 cdf C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
39b9d ce0 CE FF 39 00 
39ba1 ce1 D5 FF 55 00 
39ba5 ce2 DC FF 71 00 
39ba9 ce3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
39bad ce4 EA FF AA 00 
39bb1 ce5 F1 FF C6 00 
39bb5 ce6 F8 FF E3 00 
39bb9 ce7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
39bbd ce8 00 40 00 00 
39bc1 ce9 00 60 00 00 
39bc5 cea 00 80 00 00 
39bc9 ceb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
39bcd cec 00 BF 00 00 
39bd1 ced 00 DF 00 00 
39bd5 cee 00 FF 00 00 
39bd9 cef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
39bdd cf0 39 FF 39 00 
39be1 cf1 55 FF 55 00 
39be5 cf2 71 FF 71 00 
39be9 cf3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
39bed cf4 AA FF AA 00 
39bf1 cf5 C6 FF C6 00 
39bf5 cf6 E3 FF E3 00 
39bf9 cf7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
39bfd cf8 00 40 14 00 
39c01 cf9 00 60 1E 00 
39c05 cfa 00 80 28 00 
39c09 cfb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
39c0d cfc 00 BF 3C 00 
39c11 cfd 00 DF 46 00 
39c15 cfe 00 FF 50 00 
39c19 cff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
39c1d d00 39 FF 77 00 
39c21 d01 55 FF 8A 00 
39c25 d02 71 FF 9E 00 
39c29 d03 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
39c2d d04 AA FF C5 00 
39c31 d05 C6 FF D8 00 
39c35 d06 E3 FF EC 00 
39c39 d07 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
39c3d d08 00 40 28 00 
39c41 d09 00 60 3C 00 
39c45 d0a 00 80 50 00 
39c49 d0b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
39c4d d0c 00 BF 78 00 
39c51 d0d 00 DF 8C 00 
39c55 d0e 00 FF A0 00 
39c59 d0f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
39c5d d10 39 FF B5 00 
39c61 d11 55 FF C0 00 
39c65 d12 71 FF CA 00 
39c69 d13 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
39c6d d14 AA FF DF 00 
39c71 d15 C6 FF EA 00 
39c75 d16 E3 FF F4 00 
39c79 d17 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
39c7d d18 00 40 40 00 
39c81 d19 00 60 60 00 
39c85 d1a 00 80 80 00 
39c89 d1b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
39c8d d1c 00 BF BF 00 
39c91 d1d 00 DF DF 00 
39c95 d1e 00 FF FF 00 
39c99 d1f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
39c9d d20 39 FF FF 00 
39ca1 d21 55 FF FF 00 
39ca5 d22 71 FF FF 00 
39ca9 d23 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
39cad d24 AA FF FF 00 
39cb1 d25 C6 FF FF 00 
39cb5 d26 E3 FF FF 00 
39cb9 d27 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
39cbd d28 00 28 40 00 
39cc1 d29 00 3C 60 00 
39cc5 d2a 00 50 80 00 
39cc9 d2b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
39ccd d2c 00 78 BF 00 
39cd1 d2d 00 8C DF 00 
39cd5 d2e 00 A0 FF 00 
39cd9 d2f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
39cdd d30 39 B5 FF 00 
39ce1 d31 55 C0 FF 00 
39ce5 d32 71 CA FF 00 
39ce9 d33 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
39ced d34 AA DF FF 00 
39cf1 d35 C6 EA FF 00 
39cf5 d36 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
39cf8 d37 00 00 00 00 
39cfc d38 00          | ataripalette2  file "ataripalettep2.def"
39cfd d38 11 11 11 00 
39d01 d39 22 22 22 00 
39d05 d3a 33 33 33 00 
39d09 d3b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
39d0d d3c 55 55 55 00 
39d11 d3d 66 66 66 00 
39d15 d3e 77 77 77 00 
39d19 d3f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
39d1d d40 99 99 99 00 
39d21 d41 AA AA AA 00 
39d25 d42 BB BB BB 00 
39d29 d43 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
39d2d d44 DD DD DD 00 
39d31 d45 EE EE EE 00 
39d35 d46 FF FF FF 00 
39d39 d47 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
39d3d d48 00 14 40 00 
39d41 d49 00 1E 60 00 
39d45 d4a 00 28 80 00 
39d49 d4b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
39d4d d4c 00 3C BF 00 
39d51 d4d 00 46 DF 00 
39d55 d4e 00 50 FF 00 
39d59 d4f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
39d5d d50 39 77 FF 00 
39d61 d51 55 8A FF 00 
39d65 d52 71 9E FF 00 
39d69 d53 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
39d6d d54 AA C5 FF 00 
39d71 d55 C6 D8 FF 00 
39d75 d56 E3 EC FF 00 
39d79 d57 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
39d7d d58 00 00 40 00 
39d81 d59 00 00 60 00 
39d85 d5a 00 00 80 00 
39d89 d5b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
39d8d d5c 00 00 BF 00 
39d91 d5d 00 00 DF 00 
39d95 d5e 00 00 FF 00 
39d99 d5f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
39d9d d60 39 39 FF 00 
39da1 d61 55 55 FF 00 
39da5 d62 71 71 FF 00 
39da9 d63 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
39dad d64 AA AA FF 00 
39db1 d65 C6 C6 FF 00 
39db5 d66 E3 E3 FF 00 
39db9 d67 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
39dbd d68 20 00 40 00 
39dc1 d69 30 00 60 00 
39dc5 d6a 40 00 80 00 
39dc9 d6b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
39dcd d6c 60 00 BF 00 
39dd1 d6d 70 00 DF 00 
39dd5 d6e 80 00 FF 00 
39dd9 d6f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
39ddd d70 9C 39 FF 00 
39de1 d71 AA 55 FF 00 
39de5 d72 B8 71 FF 00 
39de9 d73 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
39ded d74 D5 AA FF 00 
39df1 d75 E3 C6 FF 00 
39df5 d76 F1 E3 FF 00 
39df9 d77 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
39dfd d78 40 00 40 00 
39e01 d79 60 00 60 00 
39e05 d7a 80 00 80 00 
39e09 d7b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
39e0d d7c BF 00 BF 00 
39e11 d7d DF 00 DF 00 
39e15 d7e FF 00 FF 00 
39e19 d7f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
39e1d d80 FF 39 FF 00 
39e21 d81 FF 55 FF 00 
39e25 d82 FF 71 FF 00 
39e29 d83 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
39e2d d84 FF AA FF 00 
39e31 d85 FF C6 FF 00 
39e35 d86 FF E3 FF 00 
39e39 d87 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
39e3d d88 40 00 20 00 
39e41 d89 60 00 30 00 
39e45 d8a 80 00 40 00 
39e49 d8b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
39e4d d8c BF 00 60 00 
39e51 d8d DF 00 70 00 
39e55 d8e FF 00 80 00 
39e59 d8f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
39e5d d90 FF 39 9C 00 
39e61 d91 FF 55 AA 00 
39e65 d92 FF 71 B8 00 
39e69 d93 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
39e6d d94 FF AA D5 00 
39e71 d95 FF C6 E3 00 
39e75 d96 FF E3 F1 00 
39e79 d97 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
39e7d d98 40 00 00 00 
39e81 d99 60 00 00 00 
39e85 d9a 80 00 00 00 
39e89 d9b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
39e8d d9c BF 00 00 00 
39e91 d9d DF 00 00 00 
39e95 d9e FF 00 00 00 
39e99 d9f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
39e9d da0 FF 39 39 00 
39ea1 da1 FF 55 55 00 
39ea5 da2 FF 71 71 00 
39ea9 da3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
39ead da4 FF AA AA 00 
39eb1 da5 FF C6 C6 00 
39eb5 da6 FF E3 E3 00 
39eb9 da7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
39ebd da8 40 10 00 00 
39ec1 da9 60 18 00 00 
39ec5 daa 80 20 00 00 
39ec9 dab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
39ecd dac BF 30 00 00 
39ed1 dad DF 38 00 00 
39ed5 dae FF 40 00 00 
39ed9 daf FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
39edd db0 FF 6A 39 00 
39ee1 db1 FF 80 55 00 
39ee5 db2 FF 95 71 00 
39ee9 db3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
39eed db4 FF BF AA 00 
39ef1 db5 FF D5 C6 00 
39ef5 db6 FF EA E3 00 
39ef9 db7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
39efd db8 40 20 00 00 
39f01 db9 60 30 00 00 
39f05 dba 80 40 00 00 
39f09 dbb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
39f0d dbc BF 60 00 00 
39f11 dbd DF 70 00 00 
39f15 dbe FF 80 00 00 
39f19 dbf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
39f1d dc0 FF 9C 39 00 
39f21 dc1 FF AA 55 00 
39f25 dc2 FF B8 71 00 
39f29 dc3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
39f2d dc4 FF D5 AA 00 
39f31 dc5 FF E3 C6 00 
39f35 dc6 FF F1 E3 00 
39f39 dc7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
39f3d dc8 40 30 00 00 
39f41 dc9 60 48 00 00 
39f45 dca 80 60 00 00 
39f49 dcb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
39f4d dcc BF 90 00 00 
39f51 dcd DF A8 00 00 
39f55 dce FF C0 00 00 
39f59 dcf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
39f5d dd0 FF CE 39 00 
39f61 dd1 FF D5 55 00 
39f65 dd2 FF DC 71 00 
39f69 dd3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
39f6d dd4 FF EA AA 00 
39f71 dd5 FF F1 C6 00 
39f75 dd6 FF F8 E3 00 
39f79 dd7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
39f7d dd8 30 40 00 00 
39f81 dd9 48 60 00 00 
39f85 dda 60 80 00 00 
39f89 ddb 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
39f8d ddc 90 BF 00 00 
39f91 ddd A8 DF 00 00 
39f95 dde C0 FF 00 00 
39f99 ddf C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
39f9d de0 CE FF 39 00 
39fa1 de1 D5 FF 55 00 
39fa5 de2 DC FF 71 00 
39fa9 de3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
39fad de4 EA FF AA 00 
39fb1 de5 F1 FF C6 00 
39fb5 de6 F8 FF E3 00 
39fb9 de7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
39fbd de8 00 40 00 00 
39fc1 de9 00 60 00 00 
39fc5 dea 00 80 00 00 
39fc9 deb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
39fcd dec 00 BF 00 00 
39fd1 ded 00 DF 00 00 
39fd5 dee 00 FF 00 00 
39fd9 def 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
39fdd df0 39 FF 39 00 
39fe1 df1 55 FF 55 00 
39fe5 df2 71 FF 71 00 
39fe9 df3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
39fed df4 AA FF AA 00 
39ff1 df5 C6 FF C6 00 
39ff5 df6 E3 FF E3 00 
39ff9 df7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
39ffd df8 00 40 14 00 
3a001 df9 00 60 1E 00 
3a005 dfa 00 80 28 00 
3a009 dfb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3a00d dfc 00 BF 3C 00 
3a011 dfd 00 DF 46 00 
3a015 dfe 00 FF 50 00 
3a019 dff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3a01d e00 39 FF 77 00 
3a021 e01 55 FF 8A 00 
3a025 e02 71 FF 9E 00 
3a029 e03 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3a02d e04 AA FF C5 00 
3a031 e05 C6 FF D8 00 
3a035 e06 E3 FF EC 00 
3a039 e07 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3a03d e08 00 40 28 00 
3a041 e09 00 60 3C 00 
3a045 e0a 00 80 50 00 
3a049 e0b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3a04d e0c 00 BF 78 00 
3a051 e0d 00 DF 8C 00 
3a055 e0e 00 FF A0 00 
3a059 e0f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3a05d e10 39 FF B5 00 
3a061 e11 55 FF C0 00 
3a065 e12 71 FF CA 00 
3a069 e13 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3a06d e14 AA FF DF 00 
3a071 e15 C6 FF EA 00 
3a075 e16 E3 FF F4 00 
3a079 e17 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3a07d e18 00 40 40 00 
3a081 e19 00 60 60 00 
3a085 e1a 00 80 80 00 
3a089 e1b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3a08d e1c 00 BF BF 00 
3a091 e1d 00 DF DF 00 
3a095 e1e 00 FF FF 00 
3a099 e1f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3a09d e20 39 FF FF 00 
3a0a1 e21 55 FF FF 00 
3a0a5 e22 71 FF FF 00 
3a0a9 e23 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3a0ad e24 AA FF FF 00 
3a0b1 e25 C6 FF FF 00 
3a0b5 e26 E3 FF FF 00 
3a0b9 e27 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3a0bd e28 00 28 40 00 
3a0c1 e29 00 3C 60 00 
3a0c5 e2a 00 50 80 00 
3a0c9 e2b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3a0cd e2c 00 78 BF 00 
3a0d1 e2d 00 8C DF 00 
3a0d5 e2e 00 A0 FF 00 
3a0d9 e2f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3a0dd e30 39 B5 FF 00 
3a0e1 e31 55 C0 FF 00 
3a0e5 e32 71 CA FF 00 
3a0e9 e33 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3a0ed e34 AA DF FF 00 
3a0f1 e35 C6 EA FF 00 
3a0f5 e36 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3a0f8 e37             | 
3a0f8 e37             | '**********************************************************************************
3a0f8 e37             | '
3a0f8 e37             | '        Timings and colors definitions
3a0f8 e37             | '
3a0f8 e37             | '**********************************************************************************
3a0f8 e37             | 
3a0f8 e37             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3a0f8 e37 08 00 00 00 
3a0fc e38 3C 00 00 00 
3a100 e39 08 00 00 00 
3a104 e3a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3a108 e3b 07 00 00 00 
3a10c e3c 04 00 00 00 
3a110 e3d 01 00 00 00 
3a114 e3e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3a118 e3f 58 02 00 00 
3a11c e40 20 9E 4B 14 
3a120 e41 FB A8 9E 01 
3a124 e42 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3a128 e43 00 00 00 00 
3a12c e44 C0 00 00 00 
3a130 e45 00 00 00 00 
3a134 e46 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a138 e47             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3a138 e47 00 75 C7 97 
3a13c e48 27 47 F6 0A 
3a140 e49 05 79 CB 9B 
3a144 e4a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3a148 e4b             | 
3a148 e4b             | ''--------  Initialization  ----------------------------------------------------------------
3a148 e4b             | 
3a148 e4b 28 0C 64 FD | hdmi            setq    #6
3a14c e4c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3a150 e4d 28 10 64 FD |                 setq    #8
3a154 e4e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3a158 e4f             | 
3a158 e4f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3a15c e50 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3a160 e51 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3a164 e52 D6 C6 01 F1 |                 add     t1,hbase
3a168 e53 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3a16c e54 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3a170 e55 7B 0B 80 5F 
3a174 e56 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3a178 e57 66 66 86 FF 
3a17c e58 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3a180 e59             | '
3a180 e59 D6 C6 01 F6 |                 mov 	t1,hbase			   '
3a184 e5a 11 C6 65 F0 |                 shl 	t1,#17                             '
3a188 e5b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3a18c e5c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3a190 e5d             | 
3a190 e5d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3a194 e5e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3a198 e5f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3a19c e60             | 
3a19c e60             | ''--------  frame rendering main loop  ---------------------------------------------------
3a19c e60             | 
3a19c e60 28 06 64 FD | p101            setq 	#3
3a1a0 e61 00 A5 05 FB | 		rdlong  vblankptr,ptra
3a1a4 e62 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3a1a8 e63 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3a1ac e64 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3a1b0 e65 00 A0 05 F6 |                 mov     dlinum, #0
3a1b4 e66 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3a1b8 e67 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3a1bc e68             | 
3a1bc e68             | 
3a1bc e68 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3a1c0 e69 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3a1c4 e6a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3a1c8 e6b             |                 
3a1c8 e6b             | 
3a1c8 e6b             | 
3a1c8 e6b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3a1c8 e6b             |   
3a1c8 e6b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3a1cc e6c 29 FE 65 3D |          if_nc  setq2   #255
3a1d0 e6d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3a1d4 e6e             | 
3a1d4 e6e             | '' -----   up porch (before the picture)
3a1d4 e6e             | 
3a1d4 e6e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3a1d8 e6f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3a1dc e70 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3a1e0 e71 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3a1e4 e72             |  
3a1e4 e72             |    
3a1e4 e72             |  
3a1e4 e72 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3a1e8 e73 E2 8C B1 FC |                 xzero   m_sn,hsync1
3a1ec e74 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3a1f0 e75 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3a1f4 e76 E1 90 C1 FC |                 xcont   m_vi,hsync0
3a1f8 e77 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3a1fc e78             | 
3a1fc e78 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3a200 e79 E2 8C B1 FC |                 xzero   m_sn,hsync1
3a204 e7a 48 00 B0 FD | 		call    #dli
3a208 e7b E1 8E C1 FC |                 xcont   m_bv,hsync0     
3a20c e7c E1 90 C1 FC |                 xcont   m_vi,hsync0
3a210 e7d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3a214 e7e             |                 	
3a214 e7e             |                 
3a214 e7e             | 
3a214 e7e             |  
3a214 e7e             | '' ------- the main screen drawing starts here
3a214 e7e             | 
3a214 e7e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3a218 e7f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3a21c e80 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3a220 e81 E1 8E C1 FC |                 xcont   m_bv,hsync0
3a224 e82 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3a228 e83 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3a22c e84 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3a230 e85             |               
3a230 e85             | 
3a230 e85 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3a234 e86 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3a238 e87             | 
3a238 e87             | ' ---------------- All visible lines displayed now, start vblank  
3a238 e87             | 
3a238 e87 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3a23c e88 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3a240 e89 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3a244 e8a C3 C4 01 F6 |                 mov     hsync1,sync_223
3a248 e8b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3a24c e8c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3a250 e8d             | 
3a250 e8d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3a250 e8d             | 
3a250 e8d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3a250 e8d             | 
3a250 e8d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3a254 e8e             | 
3a254 e8e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3a258 e8f 04 B8 05 A1 |     if_z        add     dlptr2,#4
3a25c e90 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3a260 e91             | 
3a260 e91 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3a264 e92 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3a268 e93 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3a26c e94 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3a270 e95 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3a274 e96             | 
3a274 e96 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3a278 e97 DD C6 41 F8 |                 getnib  t1,dl,#0
3a27c e98 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3a280 e99 70 00 90 AD |     if_z        jmp     #preload
3a284 e9a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3a288 e9b 94 00 90 AD |     if_z        jmp     #preload2
3a28c e9c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3a290 e9d 0C 00 90 AD |     if_z        jmp     #p390
3a294 e9e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3a298 e9f 28 00 90 AD |     if_z        jmp     #p391  
3a29c ea0             | 
3a29c ea0 2D 00 64 FD | p308            ret
3a2a0 ea1             |    
3a2a0 ea1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3a2a4 ea2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3a2a8 ea3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3a2ac ea4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3a2b0 ea5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3a2b4 ea6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3a2b8 ea7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3a2bc ea8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3a2c0 ea9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3a2c4 eaa             |  
3a2c4 eaa             | '' --------  Reload palette. To do 
3a2c4 eaa             | 
3a2c4 eaa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3a2c8 eab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3a2cc eac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3a2d0 ead 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3a2d4 eae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3a2d8 eaf E0 00 00 FB |         	rdlong  $000, framebuf2         	
3a2dc eb0 70 FF 9F FD |         	jmp     #dli                
3a2e0 eb1             |       
3a2e0 eb1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3a2e0 eb1             | 
3a2e0 eb1             | 
3a2e0 eb1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3a2e0 eb1             | 
3a2e0 eb1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3a2e4 eb2 E2 8C B1 FC |                 xzero   m_sn,hsync1
3a2e8 eb3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3a2ec eb4 E1 90 C1 FC |                 xcont   m_vi,hsync0
3a2f0 eb5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3a2f4 eb6             |         
3a2f4 eb6             | '' -------------- Preload a line from PSRAM        
3a2f4 eb6             |         
3a2f4 eb6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3a2f8 eb7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3a2fc eb8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3a300 eb9 DE B4 01 F6 |                 mov     buf1,buf1c
3a304 eba 03 A0 05 F7 |                 incmod  dlinum,#3
3a308 ebb             | 
3a308 ebb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3a30c ebc 32 B7 01 F6 |                 mov     buf2,a1024
3a310 ebd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3a314 ebe 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3a318 ebf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3a31c ec0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3a320 ec1             |  
3a320 ec1             |  
3a320 ec1             | preload2      '  incmod  dlinum,#3
3a320 ec1 04 C0 45 F0 |                 shr 	framebuf2,#4
3a324 ec2 ED B2 01 F6 |                 mov 	cmd,affffffff
3a328 ec3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3a32c ec4 28 02 64 FD |                 setq	#1
3a330 ec5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3a334 ec6             |                 
3a334 ec6             | 
3a334 ec6             | '' -------------- Draw sprites
3a334 ec6             | 
3a334 ec6 CF 5C 02 F6 | sprite          mov t8,frames
3a338 ec7 10 5C 0E F5 | 		and t8,#16 wz
3a33c ec8 11 48 06 F6 |                 mov spritenum, #17			' 16 +2 sprites. Todo: this should be a parameter
3a340 ec9 10 48 06 A6 | 	if_z    mov spritenum, #16	
3a344 eca             | 		
3a344 eca             | 
3a344 eca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3a348 ecb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3a34c ecc EF 56 96 F9 |                 alts    t5,#sprite1xy
3a350 ecd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3a354 ece 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3a358 ecf EF 56 96 F9 |                 alts    t5,#sprite1xy
3a35c ed0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3a360 ed1 0F 4C 66 F7 |                 signx	sprite_x,#15
3a364 ed2 F0 56 96 F9 |                 alts    t5,#sprite1wh
3a368 ed3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3a36c ed4 01 52 86 F1 |                 sub     sprite_h,#1
3a370 ed5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3a374 ed6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3a378 ed7             | 
3a378 ed7             | 
3a378 ed7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3a37c ed8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3a380 ed9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3a384 eda B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3a388 edb 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3a38c edc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3a390 edd 00 5E 06 F6 |                 mov 	t9,#0
3a394 ede 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3a398 edf 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3a39c ee0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3a3a0 ee1             |      
3a3a0 ee1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3a3a4 ee2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3a3a8 ee3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3a3ac ee4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3a3b0 ee5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3a3b4 ee6             |                 
3a3b4 ee6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3a3b8 ee7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3a3bc ee8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3a3c0 ee9             |   		
3a3c0 ee9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3a3c4 eea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3a3c8 eeb             | 
3a3c8 eeb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3a3cc eec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3a3d0 eed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3a3d4 eee             |  
3a3d4 eee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3a3d8 eef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3a3dc ef0 10 00 90 CD |      if_c 	jmp     #p899		
3a3e0 ef1             | 	
3a3e0 ef1             | 	
3a3e0 ef1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3a3e4 ef2 28 CD 01 F1 | 		add	t4,sprite_w
3a3e8 ef3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3a3ec ef4             | 
3a3ec ef4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3a3f0 ef5             | 
3a3f0 ef5 28 59 02 F6 | p899		mov 	t6,sprite_w
3a3f4 ef6 01 58 86 F1 | 	 	sub     t6,#1
3a3f8 ef7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3a3fc ef8             | 
3a3fc ef8 28 58 62 FD |                 setq   	t6
3a400 ef9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3a404 efa 28 5D 02 F6 |                 mov t8,sprite_w
3a408 efb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3a40c efc 24 00 90 AD |         if_z    jmp #p898
3a410 efd             |          
3a410 efd             |         
3a410 efd 70 5F 06 F6 |                 mov  t9,#368
3a414 efe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3a418 eff             | 
3a418 eff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3a41c f00 08 5C 06 FA |                 mul t8,#8				' bits to shr
3a420 f01 FF FF 7F FF 
3a424 f02 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3a428 f03 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3a42c f04 00 5E 8E F9 |                 altd t9,#0				' and mask 
3a430 f05 2D 01 00 F5 |                 and 0-0, t7
3a434 f06             |                
3a434 f06             | 
3a434 f06 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3a438 f07 E5 E0 7A FA |                 wmlong 368,t3				
3a43c f08             |                 
3a43c f08 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3a440 f09 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3a444 f0a 2D 00 64 FD |                 ret
3a448 f0b             | 	
3a448 f0b             | 	
3a448 f0b             |                
3a448 f0b             |  
3a448 f0b             | '' -------------- Graphics line ------------------------------------------------------------
3a448 f0b             |  
3a448 f0b             | 
3a448 f0b             | '' consts and vars
3a448 f0b             | 
3a448 f0b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3a44c f0c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3a450 f0d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3a454 f0e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3a458 f0f             | 
3a458 f0f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3a45c f10             | 
3a45c f10             | '------ these longs will be set by setmode function
3a45c f10             | 
3a45c f10 00 00 00 00 | m_bs            long    0        'blanks before sync
3a460 f11 00 00 00 00 | m_sn            long    0        'sync
3a464 f12 00 00 00 00 | m_bv            long    0        'blanks before visible
3a468 f13 00 00 00 00 | m_vi            long    0        'visible pixels #
3a46c f14             | 'm_border        long    0        'left/right borders
3a46c f14 00 00 00 00 | i_upporch       long    0        'up porch lines
3a470 f15 00 00 00 00 | i_vsync         long    0        'vsync lines
3a474 f16 00 00 00 00 | i_downporch     long    0        'down porch lines
3a478 f17 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3a47c f18 00 00 00 00 | i_totalvis      long    0
3a480 f19             | 
3a480 f19             | '-------------------------------------
3a480 f19             |  
3a480 f19 00 00 00 00 | linenum         long    0
3a484 f1a 00 00 00 00 | frames          long    0
3a488 f1b 00 00 00 00 | dlinum long 0
3a48c f1c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3a490 f1d             | 
3a490 f1d 00 00 00 00 | vblankptr       long    0
3a494 f1e 00 00 00 00 | modeptr         long    0
3a498 f1f 00 00 00 00 | paletteptr      long    0
3a49c f20 00 00 00 00 | dlptr           long    0
3a4a0 f21 01 00 00 00 | hbase           long    1
3a4a4 f22 00 00 00 00 | mailbox         long    0
3a4a8 f23 00 00 00 00 | spriteptr          long 0
3a4ac f24             | 
3a4ac f24 00 00 00 00 | cmd             long    0
3a4b0 f25 00 EC 07 00 | buf1            long    $80000-1024-4096
3a4b4 f26 00 04 00 00 | buf2            long    1024
3a4b8 f27 01 00 00 00 | dlptr2          long    1
3a4bc f28 01 00 00 00 | dl              long    1
3a4c0 f29             | 
3a4c0 f29 00 00 00 00 | buf1c long 0
3a4c4 f2a 00 EC 07 00 | buf1d            long    $80000-1024-4096
3a4c8 f2b 01 00 00 00 | framebuf2       long    1
3a4cc f2c 01 00 00 00 | hsync0          long    1
3a4d0 f2d 01 00 00 00 | hsync1          long    1
3a4d4 f2e             | 
3a4d4 f2e 01 00 00 00 | t1              long    1
3a4d8 f2f 00 00 00 00 | t2 long 0
3a4dc f30 00 00 00 00 | t3 long 0
3a4e0 f31 00 00 00 00 | t4 long 0
3a4e4 f32             | 
3a4e4 f32 00 00 00 00 | rcnt            long    0  'dl repeat count
3a4e8 f33 00 00 00 00 | rcnt2           long    0
3a4ec f34 00 00 00 00 | rcnt2a          long    0
3a4f0 f35 00 00 00 00 | roffset         long    0
3a4f4 f36 00 00 00 00 | rdl             long    0  'dl repeat line
3a4f8 f37 00 00 00 00 | dlc             long    0  'dl command
3a4fc f38             | 
3a4fc f38 FF FF FF FF | affffffff       long    $ffffffff
3a500 f39 00 00 00 00 | sprite1pointer long 0
3a504 f3a 00 00 00 00 | sprite1xy      long 0
3a508 f3b 00 00 00 00 | sprite1wh      long 0
3a50c f3c 00 00 00 00 | sprite2pointer long 0
3a510 f3d 00 00 00 00 | sprite2xy      long 0
3a514 f3e 00 00 00 00 | sprite2wh      long 0
3a518 f3f 00 00 00 00 | sprite3pointer long 0
3a51c f40 00 00 00 00 | sprite3xy      long 0
3a520 f41 00 00 00 00 | sprite3wh      long 0
3a524 f42 00 00 00 00 | sprite4pointer long 0
3a528 f43 00 00 00 00 | sprite4xy      long 0
3a52c f44 00 00 00 00 | sprite4wh      long 0
3a530 f45 00 00 00 00 | sprite5pointer long 0
3a534 f46 00 00 00 00 | sprite5xy      long 0
3a538 f47 00 00 00 00 | sprite5wh      long 0
3a53c f48 00 00 00 00 | sprite6pointer long 0
3a540 f49 00 00 00 00 | sprite6xy      long 0
3a544 f4a 00 00 00 00 | sprite6wh      long 0
3a548 f4b 00 00 00 00 | sprite7pointer long 0
3a54c f4c 00 00 00 00 | sprite7xy      long 0
3a550 f4d 00 00 00 00 | sprite7wh      long 0
3a554 f4e 00 00 00 00 | sprite8pointer long 0
3a558 f4f 00 00 00 00 | sprite8xy      long 0
3a55c f50 00 00 00 00 | sprite8wh      long 0
3a560 f51 00 00 00 00 | sprite9pointer long 0
3a564 f52 00 00 00 00 | sprite9xy      long 0
3a568 f53 00 00 00 00 | sprite9wh      long 0
3a56c f54 00 00 00 00 | sprite10pointer long 0
3a570 f55 00 00 00 00 | sprite10xy      long 0
3a574 f56 00 00 00 00 | sprite10wh      long 0
3a578 f57 00 00 00 00 | sprite11pointer long 0
3a57c f58 00 00 00 00 | sprite11xy      long 0
3a580 f59 00 00 00 00 | sprite11wh      long 0
3a584 f5a 00 00 00 00 | sprite12pointer long 0
3a588 f5b 00 00 00 00 | sprite12xy      long 0
3a58c f5c 00 00 00 00 | sprite12wh      long 0
3a590 f5d 00 00 00 00 | sprite13pointer long 0
3a594 f5e 00 00 00 00 | sprite13xy      long 0
3a598 f5f 00 00 00 00 | sprite13wh      long 0
3a59c f60 00 00 00 00 | sprite14pointer long 0
3a5a0 f61 00 00 00 00 | sprite14xy      long 0
3a5a4 f62 00 00 00 00 | sprite14wh      long 0
3a5a8 f63 00 00 00 00 | sprite15pointer long 0
3a5ac f64 00 00 00 00 | sprite15xy      long 0
3a5b0 f65 00 00 00 00 | sprite15wh      long 0
3a5b4 f66 00 00 00 00 | sprite16pointer long 0
3a5b8 f67 00 00 00 00 | sprite16xy      long 0
3a5bc f68 00 00 00 00 | sprite16wh      long 0
3a5c0 f69 00 00 00 00 | sprite17pointer long 0
3a5c4 f6a 00 00 00 00 | sprite17xy      long 0
3a5c8 f6b 00 00 00 00 | sprite17wh      long 0
3a5cc f6c 00 00 00 00 | sprite18pointer long 0
3a5d0 f6d 00 00 00 00 | sprite18xy      long 0
3a5d4 f6e 00 00 00 00 | sprite18wh      long 0
3a5d8 f6f 00 00 00 00 | spritenum long 0
3a5dc f70             | 
3a5dc f70 00 00 00 00 | spriteline long 0
3a5e0 f71 84 03 00 00 | sprite_x long 900
3a5e4 f72 00 00 00 00 | sprite_y long 0
3a5e8 f73 10 00 00 00 | sprite_w long 16
3a5ec f74 40 00 00 00 | sprite_h long 64
3a5f0 f75 00 00 00 00 | l2 long 0
3a5f4 f76 00 00 00 00 | t5 long 0
3a5f8 f77 00 00 00 00 | t6 long 0
3a5fc f78 00 00 00 00 | t7 long 0
3a600 f79 00 00 00 00 | t8 long 0
3a604 f7a 00 00 00 00 | t9 long 0
3a608 f7b 00 00 00 00 | preloadaddr long 0
3a60c f7c 00 00 00 00 | preloadlineaddr long 0
3a610 f7d 00 04 00 00 | a1024 long 1024
3a614 f7e             | 
3a614 f7e E0 03 00 00 | aa long 992
3a618 f7f FF 03 00 00 | a1023 long 1023
3a61c f80 00 10 00 00 | a4096 long 4096
3a620 f81             |  fit 368
3a620 f81             |  fit 368
3a620 f81             | _psram_spin2_dat_
3a620 f81 00 00 00 00 
      ...             
3a718 fbf 00 00 00 00 
3a71c fc0 00 00 00 00 |     listdata long 0[8*8]
3a720 fc1             |             orgh
3a720                 | 
3a720                 | ' driver state
3a720     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3a724     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3a728                 | 
3a728                 | ' delay profile
3a728     07 00 00 00 
3a72c     00 CF 7B 05 
3a730     80 D1 F0 08 
3a734     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3a738     80 C4 60 0F 
3a73c     80 39 7A 12 
3a740     40 2D D9 13 
3a744     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3a748                 | 
3a748                 | ' data to be passed to driver when starting it
3a748                 | startupData
3a748     00 00 00 00 |     long    0           ' current frequency
3a74c     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3a750     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3a754     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3a758     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3a75c     68 A7 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3a760     E8 A7 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3a764     08 A8 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3a768                 | 
3a768                 | ' data for memory
3a768                 | deviceData
3a768                 |     ' 16 bank parameters follow (16MB per bank)
3a768     00 00 00 00 
      ...             
3a7a0     00 00 00 00 
3a7a4     00 00 00 00 |     long    0[16]                               ' banks 0-15
3a7a8                 |     ' 16 banks of pin parameters follow
3a7a8     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3a7ac     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3a7b0     FF FF FF FF 
      ...             
3a7e0     FF FF FF FF 
3a7e4     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3a7e8                 | 
3a7e8                 | ' data for COG polling
3a7e8                 | qosData 
3a7e8     00 00 FF FF 
3a7ec     00 00 FF FF 
3a7f0     00 00 FF FF 
3a7f4     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3a7f8     00 00 FF FF 
3a7fc     00 00 FF FF 
3a800     00 00 FF FF 
3a804     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3a808                 |     
3a808                 | ' mailbox storage
3a808                 | 
3a808                 | mailboxes
3a808     00 00 00 00 
      ...             
3a860     00 00 00 00 
3a864     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3a868                 | 	alignl
3a868                 | _psram16drv_spin2_dat_
3a868                 |                             orgh
3a868     00 00 00 00 
      ...             
3a880     00 00 00 00 
3a884     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3a888                 | 
3a888                 | driver_start
3a888                 |                             org
3a888 000             | '..................................................................................................
3a888 000             | ' Memory layout for COG RAM once operational:
3a888 000             | '
3a888 000             | '  COG RAM address      Usage
3a888 000             | '  ---------------      ----
3a888 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3a888 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3a888 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3a888 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3a888 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3a888 000             | '  ~$198-$1F3           State and register variables
3a888 000             | '
3a888 000             | ' Also during driver COG startup:
3a888 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3a888 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3a888 000             | '..................................................................................................
3a888 000             |                             
3a888 000             | ' Mailbox storage after vector initialization
3a888 000             | 
3a888 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3a88c 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3a890 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3a894 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3a898 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3a89c 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3a8a0 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3a8a4 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3a8a8 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3a8ac 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3a8b0 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3a8b4 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3a8b8 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3a8bc 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3a8c0 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3a8c4 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3a8c8 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3a8cc 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3a8d0 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3a8d4 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3a8d8 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3a8dc 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3a8e0 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3a8e4 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3a8e8 018             | 
3a8e8 018             | ' Mailbox parameter addresses per COG once patched
3a8e8 018             |                             
3a8e8 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3a8ec 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3a8f0 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3a8f4 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3a8f8 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3a8fc 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3a900 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3a904 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3a908 020             | 
3a908 020             | '..................................................................................................
3a908 020             | ' Per COG request and state setup and service branching
3a908 020             |         
3a908 020             | cog0                 
3a908 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3a90c 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3a910 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3a914 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3a918 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a91c 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a920 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3a924 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3a928 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3a92c 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a930 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a934 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3a938 02c             | cog1                        
3a938 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3a93c 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3a940 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3a944 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3a948 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a94c 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a950 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3a954 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3a958 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3a95c 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a960 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a964 037 33 CA 63 FD |                             execf   request-0               'jump to service
3a968 038             | cog2                         
3a968 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3a96c 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3a970 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3a974 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3a978 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a97c 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a980 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3a984 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3a988 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3a98c 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a990 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a994 043 33 CA 63 FD |                             execf   request-0               'jump to service
3a998 044             | cog3                        
3a998 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3a99c 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3a9a0 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3a9a4 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3a9a8 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a9ac 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a9b0 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3a9b4 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3a9b8 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3a9bc 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a9c0 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a9c4 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3a9c8 050             | cog4                        
3a9c8 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3a9cc 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3a9d0 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3a9d4 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3a9d8 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a9dc 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a9e0 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3a9e4 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3a9e8 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3a9ec 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a9f0 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a9f4 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3a9f8 05c             | cog5                        
3a9f8 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3a9fc 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3aa00 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3aa04 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3aa08 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3aa0c 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3aa10 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3aa14 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3aa18 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3aa1c 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3aa20 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3aa24 067 33 CA 63 FD |                             execf   request-0               'jump to service
3aa28 068             | cog6                        
3aa28 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3aa2c 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3aa30 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3aa34 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3aa38 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3aa3c 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3aa40 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3aa44 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3aa48 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3aa4c 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3aa50 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3aa54 073 33 CA 63 FD |                             execf   request-0               'jump to service
3aa58 074             | cog7                        
3aa58 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3aa5c 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3aa60 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3aa64 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3aa68 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3aa6c 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3aa70 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3aa74 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3aa78 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3aa7c 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3aa80 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3aa84 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3aa88 080             | 
3aa88 080             |                             fit     128
3aa88 080             |                             fit     128
3aa88 080             | pad                         long    0[128-$]                'align init code to $80
3aa88 080             | 
3aa88 080             | '..................................................................................................
3aa88 080             | 
3aa88 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3aa88 080             | 
3aa88 080             | init                        
3aa88 080             |                             ' get driver scratch long address in hub
3aa88 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3aa8c 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3aa90 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3aa94 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3aa98 084             |                     
3aa98 084             |                             ' read in the additional LUT RAM code
3aa98 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3aa9c 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3aaa0 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3aaa4 087             | 
3aaa4 087             |                             ' read the startup parameters
3aaa4 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3aaa8 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3aaac 089             | 
3aaac 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3aaac 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3aab0 08a             | 
3aab0 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3aab4 08b 01 00 00 5F 
3aab8 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3aabc 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3aac0 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3aac4 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3aac8 090             | 
3aac8 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3aac8 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3aacc 091 01 00 00 FF 
3aad0 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3aad4 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3aad8 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3aadc 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3aae0 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3aae4 097 08 DE 47 F5 |                             or      a, #8
3aae8 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3aaec 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3aaf0 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3aaf4 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3aaf8 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3aafc 09d 01 DE 07 F1 |                             add     a, #1
3ab00 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3ab04 09f             |  
3ab04 09f             |                             ' setup device control pin states
3ab04 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3ab08 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3ab0c 0a1 01 00 00 FF 
3ab10 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3ab14 0a3             | 
3ab14 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3ab18 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3ab1c 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3ab20 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3ab24 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3ab28 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3ab2c 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3ab30 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3ab34 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3ab38 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3ab3c 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3ab40 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3ab44 0af             | pinloop
3ab44 0af             |                             ' generate minimum CE high time before access
3ab44 0af A1 07 00 FF 
3ab48 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3ab4c 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3ab50 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3ab54 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3ab58 0b4 1F DE 63 FD |                             waitx   a                       'delay
3ab5c 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3ab60 0b6             | 
3ab60 0b6             |                             ' setup the COG mailboxes and addresses 
3ab60 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3ab64 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3ab68 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3ab6c 0b9             | 
3ab6c 0b9 28 2E 64 FD |                             setq    #24-1
3ab70 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3ab74 0bb             | 
3ab74 0bb             |                             ' setup the polling loop for active COGs 
3ab74 0bb 01 C2 63 FD |                             cogid   id
3ab78 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3ab7c 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3ab80 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3ab84 0bf 0A F0 07 F6 |                             mov     ptra, #10
3ab88 0c0 E1 F1 03 FA |                             mul     ptra, id
3ab8c 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3ab90 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3ab94 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3ab98 0c4 03 C2 07 FA |                             mul     id, #3
3ab9c 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3aba0 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3aba4 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3aba8 0c8 D8 01 B0 FD |                             call    #reloadcogs
3abac 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3abb0 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3abb4 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3abb4 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3abb8 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3abbc 0cd 08 04 DC FC |                             rep     #2, #8
3abc0 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3abc4 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3abc8 0d0             | 
3abc8 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3abc8 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3abc8 0d0 01 C2 63 FD |                             cogid   id
3abcc 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3abd0 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3abd4 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3abd8 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3abdc 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3abe0 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3abe4 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3abe8 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3abec 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3abf0 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3abf4 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3abf8 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3abfc 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3ac00 0de A5 E5 03 F1 |                             add     d, const512
3ac04 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3ac08 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3ac0c 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3ac10 0e2             |                             
3ac10 0e2             |                             ' setup register values for control vector loop setup after we return
3ac10 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3ac14 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3ac18 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3ac1c 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3ac20 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3ac24 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3ac28 0e8 D0 C3 8F F9 |                             altd    id, #id0
3ac2c 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3ac30 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3ac34 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3ac38 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3ac3c 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3ac40 0ee             |  
3ac40 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3ac44 0ef 07 CA 07 F5 |                             and     request, #7
3ac48 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3ac4c 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3ac50 0f2             | 
3ac50 0f2             |                             fit     $100                    'ensure all init code fits this space
3ac50 0f2             |                             fit     $100                    'ensure all init code fits this space
3ac50 0f2             | 
3ac50 0f2 00 00 00 00 
      ...             
3ac80 0fe 00 00 00 00 
3ac84 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3ac88 100             | 
3ac88 100             | '..................................................................................................
3ac88 100             | ' Error result handling and COG notification of request completion
3ac88 100             | 
3ac88 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3ac8c 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3ac90 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3ac94 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3ac98 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3ac9c 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3aca0 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3aca4 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3aca8 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3acac 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3acb0 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3acb4 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3acb8 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3acbc 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3acc0 10e             | ' Poller re-starts here after a COG is serviced
3acc0 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3acc4 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3acc8 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3accc 111             | ' Main dynamic polling loop repeats until a request arrives
3accc 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3acd0 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3acd4 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3acd8 114             | 
3acd8 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3acdc 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3ace0 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3ace4 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3ace8 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3acec 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3acf0 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3acf4 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3acf8 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3acfc 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3ad00 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3ad04 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3ad08 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3ad0c 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3ad10 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3ad14 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3ad18 124             | 
3ad18 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3ad1c 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3ad20 126             |  
3ad20 126             | '..................................................................................................
3ad20 126             | ' List handler                               
3ad20 126             | 
3ad20 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3ad24 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3ad28 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3ad2c 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3ad30 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3ad34 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3ad38 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3ad3c 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3ad40 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3ad44 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3ad48 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3ad4c 131 33 00 60 FD |                             execf   0-0                     'process the request 
3ad50 132             | 
3ad50 132             | '..................................................................................................
3ad50 132             | ' Restoring per COG state and resuming where we left off
3ad50 132             | 
3ad50 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3ad54 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3ad58 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3ad5c 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3ad60 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3ad64 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3ad68 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3ad6c 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3ad70 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3ad74 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3ad78 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3ad7c 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3ad80 13e             |                    
3ad80 13e             | '..................................................................................................
3ad80 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3ad80 13e             | 
3ad80 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3ad84 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3ad88 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3ad8c 141 D0 DF B7 F9 |                             setd    a, #id0
3ad90 142 D8 DF BF F9 |                             sets    a, #addr1
3ad94 143 FE FF FF FF 
3ad98 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3ad9c 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3ada0 146 3F DE A7 F9 |                             alti    a, #%111_111 
3ada4 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3ada8 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3adac 149 01 E2 63 FD |                             cogid   c
3adb0 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3adb4 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3adb8 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3adbc 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3adc0 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3adc4 14f 00 E0 03 F6 |                             mov     b, 0-0
3adc8 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3adcc 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3add0 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3add4 153 0C 00 90 AD |             if_z            jmp     #excluded               
3add8 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3addc 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3ade0 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3ade4 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3ade8 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3adec 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3adf0 15a             | 
3adf0 15a             | 'determine priority cogs and build instructions for the polling sequence
3adf0 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3adf4 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3adf8 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3adfc 15d             | 
3adfc 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3ae00 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3ae04 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3ae08 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3ae0c 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3ae10 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3ae14 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3ae18 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3ae1c 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3ae20 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3ae24 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3ae28 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3ae2c 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3ae30 16a             | endprioloop
3ae30 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3ae34 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3ae38 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3ae3c 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3ae40 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3ae44 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3ae48 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3ae4c 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3ae50 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3ae54 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3ae58 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3ae5c 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3ae60 176             | 
3ae60 176             | ' populate the round robin COG polling instructions
3ae60 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3ae64 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3ae68 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3ae6c 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3ae70 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3ae74 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3ae78 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3ae7c 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3ae80 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3ae84 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3ae88 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3ae8c 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3ae90 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3ae94 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3ae98 184             | '..................................................................................................
3ae98 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3ae98 184             | 
3ae98 184             | set_latency                                                 '            (a) set latency
3ae98 184             | get_latency                                                 '            (b) get latency
3ae98 184             | set_burst                                                   '            (c) set burst size of bank
3ae98 184             | get_burst                                                   '            (d) get burst size of bank
3ae98 184             |                                                             '            (e) dump state
3ae98 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3ae9c 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3aea0 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3aea4 187             |                                                             ' | | | | e  account for following AUGS
3aea4 187 04 00 00 FF 
3aea8 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3aeac 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3aeb0 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3aeb4 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3aeb8 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3aebc 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3aec0 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3aec4 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3aec8 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3aecc 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3aed0 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3aed4 193             | 
3aed4 193             | '..................................................................................................
3aed4 193             | ' Misc EXECF code
3aed4 193             | 
3aed4 193 33 72 63 FD | start_read_exec             execf   newburstr
3aed8 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3aedc 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3aee0 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3aee4 197             | 
3aee4 197             | '..................................................................................................
3aee4 197             | ' Variables
3aee4 197             | 
3aee4 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3aee8 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3aeec 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3aef0 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3aef4 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3aef8 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3aefc 19d             | 
3aefc 19d 00 00 00 80 | xfreq1          long    $80000000
3af00 19e 00 00 00 40 | xfreq2          long    $40000000
3af04 19f 03 00 00 00 | delay           long    3
3af08 1a0             | 
3af08 1a0             | lutcodeaddr                 
3af08 1a0             | startupparams
3af08 1a0             | excludedcogs                                    'careful: shared register use!
3af08 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3af0c 1a1 00 00 00 00 | flags           long    0
3af10 1a2             | mask                                            'careful: shared register use!
3af10 1a2 00 00 00 00 | resetmaskA      long    0
3af14 1a3             | limit                                           'careful: shared register use!
3af14 1a3 00 00 00 00 | resetmaskB      long    0
3af18 1a4 00 00 00 00 | datapins        long    0
3af1c 1a5             | const512                                        'careful: shared register use!
3af1c 1a5 00 00 00 00 | devicelist      long    0
3af20 1a6 00 00 00 00 | coglist         long    0
3af24 1a7 00 00 00 00 | mbox            long    0 
3af28 1a8             | 
3af28 1a8             | clkpin                                          'shared with code patched during init
3af28 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3af2c 1a9             | cspin                                           'shared with code patched during init
3af2c 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3af30 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3af34 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3af38 1ac 01 00 00 00 | clkdelay        long    1
3af3c 1ad 00 00 00 00 | regdatabus      long    0
3af40 1ae             | 
3af40 1ae 10 00 00 00 | deviceaddr      long    $10
3af44 1af             | rrcounter
3af44 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3af48 1b0             | 
3af48 1b0             | ' jump addresses for the per COG handlers
3af48 1b0 20 00 00 00 | cog0_handler    long    cog0
3af4c 1b1 2C 00 00 00 | cog1_handler    long    cog1
3af50 1b2 38 00 00 00 | cog2_handler    long    cog2
3af54 1b3 44 00 00 00 | cog3_handler    long    cog3
3af58 1b4 50 00 00 00 | cog4_handler    long    cog4
3af5c 1b5 5C 00 00 00 | cog5_handler    long    cog5
3af60 1b6 68 00 00 00 | cog6_handler    long    cog6
3af64 1b7 74 00 00 00 | cog7_handler    long    cog7
3af68 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3af6c 1b9             | 
3af6c 1b9             | ' EXECF sequences
3af6c 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3af70 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3af74 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3af78 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3af7c 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3af80 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3af84 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3af88 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3af88 1c0             | 
3af88 1c0             | 
3af88 1c0             | ' SKIPF sequences
3af88 1c0             | skiptable
3af88 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3af8c 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3af90 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3af94 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3af98 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3af9c 1c5 00 00 00 00 | pattern2        long    0
3afa0 1c6 00 00 00 00 | pattern3        long    0
3afa4 1c7 77 02 00 00 | singlelong      long    %1001110111  
3afa8 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3afac 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3afb0 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3afb4 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3afb8 1cc             | 
3afb8 1cc             | ' LUT RAM address values
3afb8 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3afbc 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3afc0 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3afc4 1cf F6 02 00 00 | noread          long    noread_lut
3afc8 1d0             | 
3afc8 1d0 00 00 00 00 | id0             long    0
3afcc 1d1 01 00 00 00 | id1             long    1
3afd0 1d2 02 00 00 00 | id2             long    2
3afd4 1d3 03 00 00 00 | id3             long    3
3afd8 1d4 04 00 00 00 | id4             long    4
3afdc 1d5 05 00 00 00 | id5             long    5
3afe0 1d6 06 00 00 00 | id6             long    6
3afe4 1d7 07 00 00 00 | id7             long    7
3afe8 1d8             | 
3afe8 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3afe8 1d8             | 'and COG updates and need to follow immediately after id0-id7
3afe8 1d8 00 00 00 00 | addr1           long    0
3afec 1d9 00 00 00 00 | hubdata         long    0
3aff0 1da 00 00 00 00 | count           long    0
3aff4 1db 00 00 00 00 | addr2           long    0
3aff8 1dc 00 00 00 00 | total           long    0
3affc 1dd 00 00 00 00 | offset1         long    0
3b000 1de 00 00 00 00 | offset2         long    0
3b004 1df 00 00 00 00 | link            long    0
3b008 1e0             | 
3b008 1e0             | burstwrite                                      'note shared register use during init
3b008 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3b00c 1e1 00 00 00 00 | id              long    0
3b010 1e2             | 
3b010 1e2 00 00 00 00 | header          long    0
3b014 1e3 00 00 00 00 | trailer         long    0
3b018 1e4 00 00 00 00 | cmdaddr         long    0
3b01c 1e5 00 00 00 00 | request         long    0
3b020 1e6 00 00 00 00 | rrlimit         long    0
3b024 1e7 00 00 00 00 | pinconfig       long    0
3b028 1e8 00 00 00 00 | clks            long    0
3b02c 1e9 00 00 00 00 | resume          long    0
3b030 1ea 00 00 00 00 | orighubsize     long    0
3b034 1eb 00 00 00 00 | wrclks          long    0
3b038 1ec             | 
3b038 1ec 00 00 00 00 | pattern         long    0
3b03c 1ed 00 00 00 00 | hubscratch      long    0
3b040 1ee 00 10 00 00 | val4k           long    4096
3b044 1ef             | 
3b044 1ef             | ' temporary general purpose regs
3b044 1ef 00 00 00 00 | a               long    0
3b048 1f0 00 00 00 00 | b               long    0
3b04c 1f1 00 00 00 00 | c               long    0
3b050 1f2 00 00 00 00 | d               long    0
3b054 1f3             | 
3b054 1f3             |                 fit     502
3b054 1f3             |                 fit     502
3b054 1f3             | 
3b054 1f3             | '..................................................................................................
3b054 1f3             | 
3b054 1f3             |             orgh
3b054                 | 
3b054                 | lut_code
3b054                 | 'HW init code up to 80 longs
3b054                 | 
3b054                 | '..................................................................................................
3b054                 | ' Memory layout for LUT RAM once operational:
3b054                 | '
3b054                 | '  LUT RAM address      Usage
3b054                 | '  ---------------      ----
3b054                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3b054                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3b054                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3b054                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3b054                 | '
3b054                 | ' Also during driver COG startup:
3b054                 | ' $230-$24F is used for HW init setup
3b054                 | ' $250-$26F is used as temporary vector storage 
3b054                 | '..................................................................................................
3b054                 | 
3b054                 |                 org $230    
3b054 230             | 
3b054 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3b054 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3b058 231 24 16 60 FD |                             pollxfi
3b05c 232 FF AA 2A FF 
3b060 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3b064 234 28 00 B0 FD |                             call    #sendqspi
3b068 235 07 F8 07 FF 
3b06c 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3b070 237 28 00 B0 FD |                             call    #sendspi
3b074 238 F8 07 78 FF 
3b078 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3b07c 23a 1C 00 B0 FD |                             call    #sendspi
3b080 23b 7F 78 78 FF 
3b084 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3b088 23d 10 00 B0 FD |                             call    #sendspi 
3b08c 23e 2D 00 64 FD |                             ret
3b090 23f             | 
3b090 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3b094 240 32 0C 64 FD |                             skipf   #%110
3b098 241 9C EF 03 F6 |                             mov     pb, xsendimm
3b09c 242             | 
3b09c 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3b0a0 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3b0a4 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3b0a8 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3b0ac 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3b0b0 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3b0b4 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3b0b8 249 50 48 63 FD |                             fltl    datapins                'float data bus
3b0bc 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3b0c0 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3b0c4 24c             | 
3b0c4 24c 00 00 00 00 
3b0c8 24d 00 00 00 00 
3b0cc 24e 00 00 00 00 
3b0d0 24f 00 00 00 00 |                 long    0[$270-32-$]
3b0d4 250             |     
3b0d4 250             |                 fit     $270-32  ' keep room for 32 vector longs
3b0d4 250             |                 fit     $270-32  ' keep room for 32 vector longs
3b0d4 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3b0d4 250             | rw_vect ' PSRAM jump vectors
3b0d4 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3b0d8 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3b0dc 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3b0e0 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3b0e4 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3b0e8 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3b0ec 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3b0f0 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3b0f4 258             | ro_vect ' R/O PSRAM jump vectors
3b0f4 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3b0f8 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3b0fc 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3b100 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3b104 25c 00 01 00 00 |                 long    unsupported
3b108 25d 00 01 00 00 |                 long    unsupported
3b10c 25e 00 01 00 00 |                 long    unsupported
3b110 25f 00 01 00 00 |                 long    unsupported
3b114 260             | ctrl_vect ' Control jump vectors
3b114 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3b118 261 00 01 00 00 |                 long    unsupported
3b11c 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3b120 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3b124 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3b128 265 00 01 00 00 |                 long    unsupported
3b12c 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3b130 267 3E 01 00 00 |                 long    reconfig 
3b134 268             | no_vect ' Invalid bank jump vectors
3b134 268 01 01 00 00 |                 long    invalidbank
3b138 269 01 01 00 00 |                 long    invalidbank
3b13c 26a 01 01 00 00 |                 long    invalidbank
3b140 26b 01 01 00 00 |                 long    invalidbank
3b144 26c 01 01 00 00 |                 long    invalidbank
3b148 26d 01 01 00 00 |                 long    invalidbank
3b14c 26e 01 01 00 00 |                 long    invalidbank
3b150 26f 01 01 00 00 |                 long    invalidbank
3b154 270             | 
3b154 270             |                 fit     $270
3b154 270             |                 fit     $270
3b154 270             | '..................................................................................................
3b154 270             | ' PSRAM READS
3b154 270             |                                                             ' a b c d e f
3b154 270             |                                                             ' B W L B R L  (a) byte read
3b154 270             |                                                             ' Y O O U E O  (b) word read
3b154 270             |                                                             ' T R N R S C  (c) long read
3b154 270             |                                                             ' E D G S U K  (d) new burst read
3b154 270             |                                                             '       T M E  (e) resumed sub-burst
3b154 270             |                                                             '         E D  (f) locked sub-burst
3b154 270             | 
3b154 270             | 
3b154 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3b158 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3b15c 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3b160 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3b164 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3b168 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3b16c 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3b170 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3b174 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3b178 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3b17c 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3b180 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3b184 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3b188 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3b18c 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3b190 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3b194 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3b198 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3b19c 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3b1a0 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3b1a4 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3b1a8 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3b1ac 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3b1b0 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3b1b4 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3b1b8 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3b1bc 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3b1c0 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3b1c4 28c             | 
3b1c4 28c             |                             ' fall through to read bursts
3b1c4 28c             |                         
3b1c4 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3b1c4 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3b1c8 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3b1cc 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3b1d0 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3b1d4 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3b1d8 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3b1dc 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3b1e0 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3b1e4 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3b1e8 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3b1ec 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3b1f0 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3b1f4 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3b1f8 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3b1fc 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3b200 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3b204 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3b208 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3b20c 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3b210 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3b214 2a0 E8 D1 03 F1 |                             add     clks, clks
3b218 2a1             | readcommon
3b218 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3b21c 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3b220 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3b224 2a4             | 
3b224 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3b228 2a5 69 C8 63 FD |                             rev     cmdaddr
3b22c 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3b230 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3b234 2a8             | 
3b234 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3b238 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3b23c 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3b23c 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3b240 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3b244 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3b248 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3b24c 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3b24c 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3b250 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3b254 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3b258 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3b25c 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3b260 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3b264 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3b264 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3b268 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3b26c 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3b270 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3b274 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3b278 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3b27c 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3b280 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3b284 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3b288 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3b28c 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3b290 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3b294 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3b298 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3b29c 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3b29c 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3b2a0 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3b2a4 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3b2a8 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3b2ac 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3b2b0 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3b2b4 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3b2b8 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3b2bc 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3b2c0 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3b2c4 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3b2c8 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3b2cc 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3b2d0 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3b2d4 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3b2d8 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3b2dc 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3b2e0 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3b2e4 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3b2e8 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3b2ec 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3b2f0 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3b2f4 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3b2f8 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3b2fc 2da 10 03 90 FD |                             jmp     #writecommon
3b300 2db             | 
3b300 2db             | '..................................................................................................
3b300 2db             | ' Burst continuation testing
3b300 2db             | 
3b300 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3b304 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3b308 2dd             | continue_read_lut          
3b308 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3b30c 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3b310 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3b314 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3b318 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3b31c 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3b320 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3b324 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3b328 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3b32c 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3b330 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3b334 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3b338 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3b33c 2ea             | 
3b33c 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3b340 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3b344 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3b348 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3b34c 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3b350 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3b354 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3b358 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3b35c 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3b360 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3b364 2f4 2A 1C 66 0D |             _ret_           push    #poller
3b368 2f5             | 
3b368 2f5             | 
3b368 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3b36c 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3b36c 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3b370 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3b374 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3b378 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3b37c 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3b380 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3b384 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3b388 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3b38c 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3b390 2ff             | '..................................................................................................
3b390 2ff             | ' Completion of requests
3b390 2ff             | 
3b390 2ff             | complete_rw_lut             
3b390 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3b394 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3b398 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3b39c 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3b3a0 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3b3a4 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3b3a8 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3b3ac 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3b3b0 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3b3b4 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3b3b8 309 32 62 64 AD |             if_z            skipf   #%110001
3b3bc 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3b3c0 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3b3c4 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3b3c8 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3b3cc 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3b3d0 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3b3d4 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3b3d8 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3b3dc 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3b3e0 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3b3e4 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3b3e8 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3b3ec 316             |                                                             ' skipcase (a) gfx copy to/from hub
3b3ec 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3b3ec 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3b3ec 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3b3f0 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3b3f4 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3b3f8 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3b3fc 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3b400 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3b404 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3b408 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3b40c 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3b410 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3b414 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3b418 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3b41c 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3b420 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3b424 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3b428 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3b42c 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3b430 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3b434 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3b438 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3b43c 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3b440 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3b444 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3b448 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3b44c 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3b450 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3b454 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3b458 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3b45c 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3b460 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3b464 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3b468 335 DF B7 03 A6 |             if_z            mov     addr2, link
3b46c 336 34 FF 9F AD |             if_z            jmp     #checknext
3b470 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3b474 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3b478 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3b47c 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3b480 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3b484 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3b488 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3b48c 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3b490 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3b494 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3b498 341             | 
3b498 341             | '..................................................................................................
3b498 341             | ' PSRAM WRITES
3b498 341             |                                                             '  a b c d e f g h
3b498 341             | 
3b498 341             |                                                             '  B W L F B R L L (a) byte write(s)
3b498 341             |                                                             '  Y O O I U E O O (b) word write(s)
3b498 341             |                                                             '  T R N L R S C C (c) long write(s)
3b498 341             |                                                             '  E D G L S U K K (d) resumed fill
3b498 341             |                                                             '          T M E E (e) new burst write
3b498 341             |                                                             '            E D D (f) resumed burst
3b498 341             |                                                             '              F B (g) locked fill
3b498 341             |                                                             '              I U (h) locked burst write
3b498 341             |                                                             '              L R 
3b498 341             |                                                             '              L S 
3b498 341             |                                                             '                T 
3b498 341             | 
3b498 341             | w_single                   
3b498 341             | w_fill_cont           
3b498 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3b49c 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3b4a0 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3b4a4 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3b4a8 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3b4ac 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3b4b0 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3b4b4 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3b4b8 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3b4bc 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3b4c0 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3b4c4 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3b4c8 34d             |                ' disable call to r_resume_burst for single longs when z=0
3b4c8 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3b4cc 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3b4d0 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3b4d4 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3b4d8 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3b4dc 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3b4e0 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3b4e4 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3b4e8 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3b4ec 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3b4f0 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3b4f4 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3b4f8 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3b4fc 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3b500 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3b504 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3b508 35d             |         
3b508 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3b508 35d             |             '
3b508 35d             |             '  At least one of these 3 optional components will be sent
3b508 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3b508 35d             |             '     body - N x full longs of data
3b508 35d             |             '     trailer - last partial long of data
3b508 35d             |             '
3b508 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3b508 35d             |             '
3b508 35d             |             'Case    Type                           Sends
3b508 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3b508 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3b508 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3b508 35d             |             ' 4)     Multiple long fill             body only
3b508 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3b508 35d             | 
3b508 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3b508 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3b50c 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3b510 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3b514 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3b518 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3b51c 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3b520 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3b524 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3b528 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3b52c 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3b530 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3b534 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3b538 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3b53c 36a             |                             
3b53c 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3b540 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3b544 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3b548 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3b54c 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3b550 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3b554 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3b558 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3b55c 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3b560 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3b564 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3b568 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3b56c 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3b570 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3b574 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3b578 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3b57c 37a             | 
3b57c 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3b580 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3b584 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3b588 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3b58c 37e             |                  
3b58c 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3b590 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3b594 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3b598 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3b59c 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3b5a0 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3b5a4 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3b5a8 385             | 
3b5a8 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3b5ac 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3b5b0 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3b5b4 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3b5b8 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3b5bc 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3b5c0 38b             | 
3b5c0 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3b5c0 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3b5c4 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3b5c8 38d 2A B0 63 FD |                             push    addr1                   'save address
3b5cc 38e             | 
3b5cc 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3b5cc 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3b5d0 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3b5d4 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3b5d8 391             |             
3b5d8 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3b5dc 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3b5e0 393 2B B0 63 FD |                             pop     addr1                   'restore address
3b5e4 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3b5e8 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3b5ec 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3b5f0 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3b5f4 398             | 
3b5f4 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3b5f8 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3b5fc 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3b600 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3b604 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3b608 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3b60c 39e             | 
3b60c 39e             |                             'trailer is done
3b60c 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3b610 39f             | 
3b610 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3b614 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3b618 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3b61c 3a2             | 
3b61c 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3b620 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3b624 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3b628 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3b62c 3a6             |                             
3b62c 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3b630 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3b634 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3b638 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3b63c 3aa             |                                                          
3b63c 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3b640 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3b644 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3b648 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3b64c 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3b650 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3b654 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3b658 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3b65c 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3b660 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3b664 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3b668 3b5             |  
3b668 3b5 59 52 63 FD |                             drvh    cspin
3b66c 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3b670 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3b674 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3b678 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3b67c 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3b680 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3b684 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3b688 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3b68c 3be EA E5 03 F6 |                             mov     d, orighubsize
3b690 3bf EF E5 63 F0 |                             shl     d, a
3b694 3c0 F2 E3 83 F1 |                             sub     c, d
3b698 3c1 DD E3 03 F1 |                             add     c, offset1
3b69c 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3b6a0 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3b6a4 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3b6a8 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3b6ac 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3b6b0 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3b6b4 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3b6b8 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3b6bc 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3b6c0 3cb BB D3 03 F6 |                             mov     resume, restorefill
3b6c4 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3b6c8 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3b6cc 3ce 6C FC BF CD |             if_c            call    #yield
3b6d0 3cf 2D 00 64 FD |                             ret
3b6d4 3d0             |                            
3b6d4 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3b6d4 3d0             |                       '     rczl    pa                      'rotate left into address offset
3b6d4 3d0             |                       '     rczl    c wcz                   'restore count and flags
3b6d4 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3b6d8 3d1 02 EC 67 F0 |                             shl     pa, #2
3b6dc 3d2 28 06 64 AD |             if_z            setq    #3
3b6e0 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3b6e4 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3b6e8 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3b6ec 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3b6f0 3d7             | 
3b6f0 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3b6f4 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3b6f8 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3b6fc 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3b700 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3b704 3dc             |         
3b704 3dc             | 
3b704 3dc             | '..................................................................................................
3b704 3dc             | 
3b704 3dc             |                 fit 1024-32
3b704 3dc             |                 fit 1024-32
3b704 3dc 00 00 00 00 
3b708 3dd 00 00 00 00 
3b70c 3de 00 00 00 00 
3b710 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3b714 3e0             |                 org 1024-32
3b714 000             | 
3b714 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3b714 000 00 00 00 00 |                 long $0000
3b718 001 11 11 00 00 |                 long $1111
3b71c 002 22 22 00 00 |                 long $2222
3b720 003 33 33 00 00 |                 long $3333
3b724 004 44 44 00 00 |                 long $4444
3b728 005 55 55 00 00 |                 long $5555
3b72c 006 66 66 00 00 |                 long $6666
3b730 007 77 77 00 00 |                 long $7777
3b734 008 88 88 00 00 |                 long $8888
3b738 009 99 99 00 00 |                 long $9999
3b73c 00a AA AA 00 00 |                 long $aaaa
3b740 00b BB BB 00 00 |                 long $bbbb
3b744 00c CC CC 00 00 |                 long $cccc
3b748 00d DD DD 00 00 |                 long $dddd
3b74c 00e EE EE 00 00 |                 long $eeee
3b750 00f FF FF 00 00 |                 long $ffff
3b754 010             | 
3b754 010             | 'masks
3b754 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3b758 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3b75c 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3b760 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3b764 014             | 
3b764 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3b768 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3b76c 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3b770 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3b774 018             | 
3b774 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3b778 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3b77c 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3b780 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3b784 01c             | 
3b784 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3b788 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3b78c 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3b790 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3b794 020             | 
3b794 020             |         fit 1024
3b794 020             |         fit 1024
3b794 020             | 
3b794 020             | '--------------------------------------------------------------------------------------------------
3b794 020             |         orgh
3b794                 | 
3b794                 | gfxexpansion
3b794                 |                             'simple line drawing graphics expansion of memory driver
3b794                 |                             'jmp     #donerepeats                'just return for now
3b794                 | 
3b794     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3b798     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3b79c     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3b7a0     DD E1 03 F6 |                             mov     b, offset1              'get error term
3b7a4     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3b7a8     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3b7ac     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3b7b0     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3b7b4     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3b7b8     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3b7bc     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3b7c0     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3b7c4     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3b7c8     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3b7cc     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3b7d0     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3b7d4     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3b7d8     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3b7dc     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3b7e0     DC E5 33 F9 |                             getword d, total, #0            'get line width
3b7e4     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3b7e8     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3b7ec     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3b7f0     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3b7f4     C3 03 80 FD |                             jmp     #readmask               'continue filling
3b7f8                 | 	alignl
3b7f8                 | _usbnew_spin2_dat_
3b7f8                 |                 org     $000
3b7f8 000             | 
3b7f8 000             | usb_host_start
3b7f8 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3b7fc 001             | 
3b7fc 001 03 00 00 FF 
3b800 002 D0 72 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3b804 003 02 72 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3b808 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3b80c 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3b810 006 29 72 63 FD |                 setq2   htmp
3b814 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3b818 008             | 
3b818 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3b81c 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3b820 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3b824 00b             | 
3b824 00b             | '------------------------------------------------------------------------------
3b824 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3b824 00b             | ' special because the receiving function must not respond with either STALL or
3b824 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3b824 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3b824 00b             | ' corrupt packet, it must ignore the transaction
3b824 00b             | '------------------------------------------------------------------------------
3b824 00b             | ' On entry:
3b824 00b             | '   PTRA - start address of the SETUP data struct.
3b824 00b             | ' On exit:
3b824 00b             | '   retval - PID_ACK on success, otherwise error code.
3b824 00b             | '------------------------------------------------------------------------------
3b824 00b             | txn_setup
3b824 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3b828 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3b82c 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3b830 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3b834 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3b838 010             | .setup
3b838 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3b83c 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b840 012 2D 00 64 AD |         if_z    ret
3b844 013 7C 0B B0 FD |                 call    #retry_wait
3b848 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3b84c 015 2D 00 64 AD |         if_z    ret
3b850 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3b854 017 E0 FF 9F FD |                 jmp     #.setup
3b858 018             | 
3b858 018             | '------------------------------------------------------------------------------
3b858 018             | ' IN/INTERRUPT transaction.
3b858 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3b858 018             | '------------------------------------------------------------------------------
3b858 018             | ' On entry:
3b858 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3b858 018             | '     CRC(b19..23).
3b858 018             | ' On exit:
3b858 018             | '------------------------------------------------------------------------------
3b858 018             | txn_in
3b858 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3b85c 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3b860 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3b864 01b             | 
3b864 01b             |                 ' Fall through to urx_packet
3b864 01b             | 
3b864 01b             | '------------------------------------------------------------------------------
3b864 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3b864 01b             | ' received are handshakes and IN DATAx.
3b864 01b             | '------------------------------------------------------------------------------
3b864 01b             | ' On entry:
3b864 01b             | ' On exit:
3b864 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3b864 01b             | '     returned.
3b864 01b             | '------------------------------------------------------------------------------
3b864 01b             | urx_packet
3b864 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3b868 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b86c 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3b870 01e 1A 94 63 FD |                 getct   hct2
3b874 01f 4E 95 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3b878 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3b87c 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3b880 022             | .wait_sop
3b880 022 22 A7 8A FA |                 rdpin   urx, dm
3b884 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b888 024 08 00 90 CD |         if_c    jmp     #.get_pid
3b88c 025 FC 25 CC FB |                 jnct2   #.wait_sop
3b890 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3b894 027             | .get_pid
3b894 027 28 02 B0 FD |                 call    #urx_next
3b898 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3b89c 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3b8a0 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3b8a4 02b             | .chk_pid
3b8a4 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b8a8 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3b8ac 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3b8b0 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3b8b4 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3b8b8 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3b8bc 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3b8c0 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3b8c4 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3b8c8 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3b8cc 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3b8d0 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3b8d4 037             | .ack_resend
3b8d4 037 22 A7 82 FA |                 rqpin   urx, dm
3b8d8 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3b8dc 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3b8e0 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3b8e4 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3b8e8 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3b8ec 03d             | .chk_eop
3b8ec 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3b8f0 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3b8f4 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3b8f8 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3b8fc 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3b900 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3b904 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3b908 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3b90c 045 2D 00 64 FD |                 ret
3b910 046             | .idle
3b910 046 22 A7 82 FA |                 rqpin   urx, dm
3b914 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3b918 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3b91c 049 2D 00 64 FD |                 ret
3b920 04a             | 
3b920 04a             | '------------------------------------------------------------------------------
3b920 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3b920 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3b920 04a             | ' if one is required.
3b920 04a             | '------------------------------------------------------------------------------
3b920 04a             | ' On entry:
3b920 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3b920 04a             | ' On exit:
3b920 04a             | '------------------------------------------------------------------------------
3b920 04a             | utx_token
3b920 04a 22 A7 82 FA |                 rqpin   urx, dm
3b924 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3b928 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3b92c 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3b930 04e 34 0D B0 CD |         if_c    call    #utx_pre
3b934 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3b938 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3b93c 051 5E 73 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3b940 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3b944 053             | .next_byte
3b944 053 B9 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3b948 054 08 72 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3b94c 055             | .wait
3b94c 055 40 46 72 FD |                 testp   dp                      wc
3b950 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3b954 057 23 03 08 FC |                 akpin   dp
3b958 058 22 A5 22 FC |                 wypin   utx, dm
3b95c 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3b960 05a             | 
3b960 05a             | '------------------------------------------------------------------------------
3b960 05a             | ' SETUP/OUT/INTERRUPT transaction.
3b960 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3b960 05a             | '------------------------------------------------------------------------------
3b960 05a             | ' On entry:
3b960 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3b960 05a             | '     CRC(b19..23).
3b960 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3b960 05a             | '   pkt_data - count of DATAx payload bytes to send.
3b960 05a             | ' On exit:
3b960 05a             | '------------------------------------------------------------------------------
3b960 05a             | txn_out
3b960 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3b964 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3b968 05c 00 00 C0 FF 
3b96c 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3b970 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3b974 05f             | 
3b974 05f             |                 ' Fall through to utx_data
3b974 05f             | 
3b974 05f             | '------------------------------------------------------------------------------
3b974 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3b974 05f             | ' calculated while the data byte is being shifted out. Since data stage
3b974 05f             | ' success/fail is not determined until the status stage of the transaction,
3b974 05f             | ' this routine is only concerned about the current DATAx packet.
3b974 05f             | '------------------------------------------------------------------------------
3b974 05f             | ' On entry:
3b974 05f             | '   PTRA - hub start address of the data to read.
3b974 05f             | '   pkt_cnt - data payload size.
3b974 05f             | ' On exit:
3b974 05f             | '------------------------------------------------------------------------------
3b974 05f             | utx_data
3b974 05f 22 A7 82 FA |                 rqpin   urx, dm
3b978 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b97c 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3b980 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3b984 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3b988 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3b98c 065 D8 0C B0 CD |         if_c    call    #utx_pre
3b990 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3b994 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3b998 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3b99c 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3b9a0 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3b9a4 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3b9a8 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3b9ac 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3b9b0 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3b9b4 06f             | .read_byte
3b9b4 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3b9b8 070 F0 00 B0 FD |                 call    #utx_byte
3b9bc 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3b9c0 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3b9c4 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3b9c8 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3b9cc 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3b9d0 076             | .send_crc
3b9d0 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3b9d4 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3b9d8 078 D0 00 B0 FD |                 call    #utx_byte
3b9dc 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3b9e0 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3b9e4 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3b9e8 07c             | 
3b9e8 07c             | '------------------------------------------------------------------------------
3b9e8 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3b9e8 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3b9e8 07c             | ' expects that the packet includes at least the CRC word.
3b9e8 07c             | '
3b9e8 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3b9e8 07c             | ' was requested, which makes it difficult to determine where the data stops
3b9e8 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3b9e8 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3b9e8 07c             | ' USB-16 expected residual value of 0xB001.
3b9e8 07c             | '
3b9e8 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3b9e8 07c             | ' so the caller can verify IN success before writing the data to its final
3b9e8 07c             | ' destination.
3b9e8 07c             | '------------------------------------------------------------------------------
3b9e8 07c             | ' On entry:
3b9e8 07c             | '   pkt_data - max byte count expected to be in the packet.
3b9e8 07c             | '   newb_flg - signals new byte ready when toggled.
3b9e8 07c             | ' On exit:
3b9e8 07c             | '   pkt_cnt - actual number of bytes read.
3b9e8 07c             | '------------------------------------------------------------------------------
3b9e8 07c             | urx_data
3b9e8 07c F7 77 03 F6 |                 mov     htmp2, pb
3b9ec 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3b9f0 07e 00 00 C0 FF 
3b9f4 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3b9f8 080 BB EF 03 F6 |                 mov     pb, htmp2
3b9fc 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3ba00 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3ba04 083 58 85 03 F6 |                 mov     pkt_tmp, pkt_data
3ba08 084 02 84 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3ba0c 085             | .wait_byte
3ba0c 085             | ' In-line rx for max speed
3ba0c 085 22 A7 82 FA |                 rqpin   urx, dm
3ba10 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3ba14 087 53 A5 02 F5 |                 and     utx, urx
3ba18 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3ba1c 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3ba20 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3ba24 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3ba28 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3ba2c 08d DC FF 9F FD |                 jmp     #.wait_byte
3ba30 08e             | .get_byte
3ba30 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3ba34 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3ba38 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3ba3c 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3ba40 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3ba44 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3ba48 094             | .end_crc
3ba48 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3ba4c 095 C2 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3ba50 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3ba54 097 2D 00 64 1D |         if_a    ret
3ba58 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3ba58 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3ba58 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3ba58 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3ba58 098 22 A7 82 FA |                 rqpin   urx, dm
3ba5c 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3ba60 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3ba64 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3ba64 09b             | .chk_crc
3ba64 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3ba68 09c 58 00 00 FF 
3ba6c 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3ba70 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3ba74 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3ba78 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3ba7c 0a1 34 09 B0 FD |                 call    #poll_waitx
3ba80 0a2             | 
3ba80 0a2             |                 ' Fall through to utx_handshake
3ba80 0a2             | 
3ba80 0a2             | '------------------------------------------------------------------------------
3ba80 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3ba80 0a2             | ' the appropriate IP delay has been inserted.
3ba80 0a2             | '------------------------------------------------------------------------------
3ba80 0a2             | ' On entry:
3ba80 0a2             | '   retval - handshake PID to send.
3ba80 0a2             | ' On exit:
3ba80 0a2             | '   retval unchanged.
3ba80 0a2             | '------------------------------------------------------------------------------
3ba80 0a2             | utx_handshake
3ba80 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3ba84 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3ba88 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3ba8c 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3ba90 0a6 5F A5 02 F6 |                 mov     utx, retval
3ba94 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3ba98 0a8             | .idle
3ba98 0a8 22 A7 82 FA |                 rqpin   urx, dm
3ba9c 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3baa0 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3baa4 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3baa8 0ac 08 09 90 FD |                 jmp     #poll_waitx
3baac 0ad             | 
3baac 0ad             | '------------------------------------------------------------------------------
3baac 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3baac 0ad             | '------------------------------------------------------------------------------
3baac 0ad             | ' On entry:
3baac 0ad             | '   utx - byte to transmit.
3baac 0ad             | ' On exit:
3baac 0ad             | '------------------------------------------------------------------------------
3baac 0ad             | utx_byte
3baac 0ad 40 46 72 FD |                 testp   dp                      wc
3bab0 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3bab4 0af 23 03 08 FC |                 akpin   dp
3bab8 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3babc 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3bac0 0b2             | 
3bac0 0b2             | '------------------------------------------------------------------------------
3bac0 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3bac0 0b2             | '------------------------------------------------------------------------------
3bac0 0b2             | ' On entry:
3bac0 0b2             | ' On exit:
3bac0 0b2             | '   retval - the byte read.
3bac0 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3bac0 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3bac0 0b2             | '     received.
3bac0 0b2             | '------------------------------------------------------------------------------
3bac0 0b2             | urx_next
3bac0 0b2 22 A7 8A FA |                 rdpin   urx, dm
3bac4 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3bac8 0b4 53 A5 02 F5 |                 and     utx, urx
3bacc 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3bad0 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3bad4 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3bad8 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3badc 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3bae0 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3bae4 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3bae8 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3baec 0bd 2D 00 64 FD |                 ret
3baf0 0be             | 
3baf0 0be             | '------------------------------------------------------------------------------
3baf0 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3baf0 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3baf0 0be             | ' length, and the PID is not included in the CRC calculation:
3baf0 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3baf0 0be             | '  CRC5  ENDP ADDRESS PID
3baf0 0be             | ' %00000_1111_1111111_xxxxxxxx
3baf0 0be             | '------------------------------------------------------------------------------
3baf0 0be             | ' On entry:
3baf0 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3baf0 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3baf0 0be             | ' On exit:
3baf0 0be             | '   ep_addr_pid - CRC value appended to the packet.
3baf0 0be             | '------------------------------------------------------------------------------
3baf0 0be             | calc_crc5
3baf0 0be FF 03 00 FF 
3baf4 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3baf8 0c0 5E 73 03 F6 |                 mov     htmp, ep_addr_pid
3bafc 0c1 08 72 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3bb00 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3bb04 0c3 69 72 63 FD |                 rev     htmp                            ' Input data reflected
3bb08 0c4 28 72 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3bb0c 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3bb10 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3bb14 0c7 09 72 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3bb18 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3bb1c 0c9 01 72 77 F0 |                 shl     htmp, #1                wc
3bb20 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3bb24 0cb 01 72 77 F0 |                 shl     htmp, #1                wc
3bb28 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3bb2c 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3bb30 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3bb34 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3bb38 0d0             | 
3bb38 0d0             | '------------------------------------------------------------------------------
3bb38 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3bb38 0d0             | '------------------------------------------------------------------------------
3bb38 0d0             | isr1_fsframe
3bb38 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3bb3c 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3bb40 0d2 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3bb44 0d3 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3bb48 0d4             | .wait
3bb48 0d4 40 46 72 FD |                 testp   dp                      wc
3bb4c 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3bb50 0d6 23 03 08 FC |                 akpin   dp
3bb54 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3bb58 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3bb5c 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3bb60 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3bb64 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3bb68 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3bb6c 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3bb70 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3bb74 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3bb78 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3bb7c 0e1 2C FF BF FD |                 call    #utx_byte
3bb80 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3bb84 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3bb88 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3bb8c 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3bb90 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3bb94 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3bb98 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3bb9c 0e9 5B A5 42 F5 |                 or      utx, icrc
3bba0 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3bba4 0eb A4 83 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3bba8 0ec 20 00 90 FD |                 jmp     #isr1_wait
3bbac 0ed             | isr1_lsframe
3bbac 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3bbb0 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3bbb4 0ef B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3bbb8 0f0             | .wait
3bbb8 0f0 40 46 72 FD |                 testp   dp                      wc
3bbbc 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3bbc0 0f2 23 03 08 FC |                 akpin   dp
3bbc4 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3bbc8 0f4 A3 83 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3bbcc 0f5             | isr1_wait
3bbcc 0f5 22 A5 82 FA |                 rqpin   utx, dm
3bbd0 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3bbd4 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3bbd8 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3bbdc 0f9 03 00 00 FF 
3bbe0 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3bbe4 0fb 1F 82 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3bbe8 0fc F5 FF 3B FB |                 reti1
3bbec 0fd             | 
3bbec 0fd             | '------------------------------------------------------------------------------
3bbec 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3bbec 0fd             | ' transaction will complete before the next frame is triggered.
3bbec 0fd             | '------------------------------------------------------------------------------
3bbec 0fd             | ' On entry:
3bbec 0fd             | ' On exit:
3bbec 0fd             | '------------------------------------------------------------------------------
3bbec 0fd             | wait_txn_ok
3bbec 0fd 1A 76 63 FD |                 getct   htmp2
3bbf0 0fe 49 77 83 F1 |                 sub     htmp2, iframe_ct_base
3bbf4 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3bbf8 100 A1 77 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3bbfc 101 A2 77 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3bc00 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3bc04 103 2D 00 64 FD |                 ret
3bc08 104             | 
3bc08 104             | '------------------------------------------------------------------------------
3bc08 104             | ' A device connection was detected, or a bus reset was requested by the USB
3bc08 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3bc08 104             | ' and perform a reset sequence prior to device enumeration.
3bc08 104             | '------------------------------------------------------------------------------
3bc08 104             | dev_reset
3bc08 104 22 A7 82 FA |                 rqpin   urx, dm
3bc0c 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3bc10 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3bc14 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3bc18 108             | reset
3bc18 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3bc1c 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3bc20 10a 1F 5C 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3bc24 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3bc28 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3bc2c 10d 1A 92 62 FD |                 getct   iframe_ct_base
3bc30 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3bc34 10f B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3bc38 110 59 73 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3bc3c 111 24 72 07 F1 |                 add     htmp, #36
3bc40 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3bc44 113             | .framewait
3bc44 113 B9 B3 1A F2 |                 cmp     frame, htmp             wcz
3bc48 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3bc4c 115 2D 00 64 FD |                 ret
3bc50 116             | 
3bc50 116             | '------------------------------------------------------------------------------
3bc50 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3bc50 116             | '------------------------------------------------------------------------------
3bc50 116             | ' On entry:
3bc50 116             | '   PTRA - source address.
3bc50 116             | '   PB - destination address.
3bc50 116             | '   hr0 - length of copy, in bytes.
3bc50 116             | ' On exit:
3bc50 116             | '------------------------------------------------------------------------------
3bc50 116             | hmemcpy
3bc50 116 61 73 C7 FA |                 rdbyte  htmp, ptra++
3bc54 117 F7 73 43 FC |                 wrbyte  htmp, pb
3bc58 118 01 EE 07 F1 |                 add     pb, #1
3bc5c 119 FC 87 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3bc60 11a             | 
3bc60 11a             | '------------------------------------------------------------------------------
3bc60 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3bc60 11a             | ' loop until the errant device is disconnected.
3bc60 11a             | '------------------------------------------------------------------------------
3bc60 11a             | ' On entry:
3bc60 11a             | ' On exit:
3bc60 11a             | '------------------------------------------------------------------------------
3bc60 11a             | host_error
3bc60 11a             |           if ERROR_LED >= 0
3bc60 11a             |           end
3bc60 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3bc64 11b             | 
3bc64 11b             | '------------------------------------------------------------------------------
3bc64 11b             | ' Get HID descriptor buffer for current port
3bc64 11b             | '------------------------------------------------------------------------------
3bc64 11b             | ' On entry:
3bc64 11b             | ' On exit:
3bc64 11b             | '   PB - HID descriptor buffer pointer
3bc64 11b             | '------------------------------------------------------------------------------
3bc64 11b             | get_hid_descr_buffer
3bc64 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3bc68 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3bc6c 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3bc70 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3bc74 11f             | 
3bc74 11f             | 
3bc74 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3bc78 120             | 
3bc78 120             | ' USB commands and error codes
3bc78 120 00 00 00 00 | cmd_data        long    0
3bc7c 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3bc80 122             | 
3bc80 122             | ' Parameters block assigned at cog startup
3bc80 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3bc84 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3bc88 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3bc8c 125             | if ACTIVITY_LED >= 0
3bc8c 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3bc8c 125             | end
3bc8c 125             | if ERROR_LED >= 0
3bc8c 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3bc8c 125             | end
3bc8c 125 00 00 00 00 | hid_descr_p     long    0
3bc90 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3bc90 126             | 'hkbd_report_p   long    0
3bc90 126 00 00 00 00 | hub_descr_p     long    0
3bc94 127 00 00 00 00 | urx_buff_p      long    0
3bc98 128 00 00 00 00 | dev_desc_buff_p long    0
3bc9c 129 00 00 00 00 | con_desc_buff_p long    0
3bca0 12a 00 00 00 00 | cache_start_p   long    0
3bca4 12b 00 00 00 00 | cache_end_p     long    0
3bca8 12c             | if EMUPAD_MAX_PLAYER > 0
3bca8 12c             | emupad_out_ptr  long    0
3bca8 12c             | end
3bca8 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3bcac 12d             | 
3bcac 12d             | hdev_init_start
3bcac 12d             | hdev_port       res     1
3bcac 12d             | hdev_port       res     1
3bcac 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3bcac 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3bcac 12d             | kbm_next_datax  res     1
3bcac 12d             | kbm_next_datax  res     1
3bcac 12d             | hub_intf_num    res     1
3bcac 12d             | hub_intf_num    res     1
3bcac 12d             | hub_next_datax  res     1
3bcac 12d             | hub_next_datax  res     1
3bcac 12d             | hub_status_chg  res     1
3bcac 12d             | hub_status_chg  res     1
3bcac 12d             | hub_port_status res     1
3bcac 12d             | hub_port_status res     1
3bcac 12d             | if HAVE_MOUSE
3bcac 12d             | ms_intf_num     res     1
3bcac 12d             | ms_intf_num     res     1
3bcac 12d             | ms_in_max_pkt   res     1
3bcac 12d             | ms_in_max_pkt   res     1
3bcac 12d             | end
3bcac 12d             | kb_intf_num     res     1
3bcac 12d             | kb_intf_num     res     1
3bcac 12d             | kb_interval     res     1
3bcac 12d             | kb_interval     res     1
3bcac 12d             | kb_in_max_pkt   res     1
3bcac 12d             | kb_in_max_pkt   res     1
3bcac 12d             | kb_max_index    res     1
3bcac 12d             | kb_max_index    res     1
3bcac 12d             | kb_led_states   res     1
3bcac 12d             | kb_led_states   res     1
3bcac 12d             | gp_intf_num     res     1
3bcac 12d             | gp_intf_num     res     1
3bcac 12d             | gp_interval     res     1
3bcac 12d             | gp_interval     res     1
3bcac 12d             | gp_max_index    res     1
3bcac 12d             | gp_max_index    res     1
3bcac 12d             | gp_descr_len    res     1+MAX_DEVICES
3bcac 12d             | gp_descr_len    res     1+MAX_DEVICES
3bcac 12d             | hdev_init_end
3bcac 12d             | 
3bcac 12d             | ' Initialized at cog startup:
3bcac 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3bcac 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3bcac 12d             | iframe_ct_new   res     1
3bcac 12d             | iframe_ct_new   res     1
3bcac 12d             | iframe_ct_base  res     1
3bcac 12d             | iframe_ct_base  res     1
3bcac 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3bcac 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3bcac 12d             | 
3bcac 12d             | ' This register block is reset to zero when a USB device connects
3bcac 12d             | hreg_init_start
3bcac 12d             | hstatus         res     1         ' Host status flags
3bcac 12d             | hstatus         res     1         ' Host status flags
3bcac 12d             | hctwait         res     1         ' Poll-based wait clocks
3bcac 12d             | hctwait         res     1         ' Poll-based wait clocks
3bcac 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3bcac 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3bcac 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3bcac 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3bcac 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3bcac 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3bcac 12d             | xfer_retry      res     1         ' Control transfer retry count
3bcac 12d             | xfer_retry      res     1         ' Control transfer retry count
3bcac 12d             | retry           res     1         ' Transaction retry count
3bcac 12d             | retry           res     1         ' Transaction retry count
3bcac 12d             | utx             res     1         ' Byte to transmit on USB
3bcac 12d             | utx             res     1         ' Byte to transmit on USB
3bcac 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3bcac 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3bcac 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3bcac 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3bcac 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3bcac 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3bcac 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3bcac 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3bcac 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3bcac 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3bcac 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3bcac 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3bcac 12d             | frame           res     1         ' USB 1ms frame counter value
3bcac 12d             | frame           res     1         ' USB 1ms frame counter value
3bcac 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3bcac 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3bcac 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3bcac 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3bcac 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3bcac 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3bcac 12d             | crc             res     1         ' Used for CRC16 calculation
3bcac 12d             | crc             res     1         ' Used for CRC16 calculation
3bcac 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3bcac 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3bcac 12d             | retval          res     1         ' Global success/fail return parameter
3bcac 12d             | retval          res     1         ' Global success/fail return parameter
3bcac 12d             | context_retval  res     1         ' Operation contextual return parameter
3bcac 12d             | context_retval  res     1         ' Operation contextual return parameter
3bcac 12d             | ' Device stuff
3bcac 12d             | hdev_id         res     1+MAX_DEVICES
3bcac 12d             | hdev_id         res     1+MAX_DEVICES
3bcac 12d             | hdev_bcd        res     1
3bcac 12d             | hdev_bcd        res     1
3bcac 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3bcac 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3bcac 12d             | ' Keyboard/mouse stuff
3bcac 12d             | hctrl_ep_addr   res     1
3bcac 12d             | hctrl_ep_addr   res     1
3bcac 12d             | hctrl_max_pkt   res     1
3bcac 12d             | hctrl_max_pkt   res     1
3bcac 12d             | hconfig_base    res     1
3bcac 12d             | hconfig_base    res     1
3bcac 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3bcac 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3bcac 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3bcac 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3bcac 12d             | hdev_class      res     1
3bcac 12d             | hdev_class      res     1
3bcac 12d             | hdev_subclass   res     1
3bcac 12d             | hdev_subclass   res     1
3bcac 12d             | hdev_protocol   res     1
3bcac 12d             | hdev_protocol   res     1
3bcac 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3bcac 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3bcac 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3bcac 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3bcac 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3bcac 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3bcac 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3bcac 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3bcac 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3bcac 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3bcac 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3bcac 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3bcac 12d             | if HAVE_MOUSE
3bcac 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3bcac 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3bcac 12d             | end
3bcac 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3bcac 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3bcac 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3bcac 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3bcac 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3bcac 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3bcac 12d             | hdev_out_addr   res     1
3bcac 12d             | hdev_out_addr   res     1
3bcac 12d             | 
3bcac 12d             | if EMUPAD_MAX_PLAYER > 0
3bcac 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3bcac 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3bcac 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3bcac 12d             | end
3bcac 12d             | 
3bcac 12d             | hreg_init_end
3bcac 12d             | 
3bcac 12d             | hidr_start
3bcac 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3bcac 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3bcac 12d             | hidr_flags      res     1
3bcac 12d             | hidr_flags      res     1
3bcac 12d             | hidr_axis       res     4
3bcac 12d             | hidr_axis       res     4
3bcac 12d             | hidr_buttons    res     1
3bcac 12d             | hidr_buttons    res     1
3bcac 12d             | hidr_hats       res     1
3bcac 12d             | hidr_hats       res     1
3bcac 12d             | '' Above are actually useful values, 6 longs
3bcac 12d             | hidr_type       res     1
3bcac 12d             | hidr_type       res     1
3bcac 12d             | hidr_id         res     1
3bcac 12d             | hidr_id         res     1
3bcac 12d             | hidr_offset     res     1
3bcac 12d             | hidr_offset     res     1
3bcac 12d             | hidr_usage_idx  res     1
3bcac 12d             | hidr_usage_idx  res     1
3bcac 12d             | ' below need to be push/pop'd
3bcac 12d             | hidr_state      res     1
3bcac 12d             | hidr_state      res     1
3bcac 12d             | hidr_size       res     1
3bcac 12d             | hidr_size       res     1
3bcac 12d             | hidr_count      res     1
3bcac 12d             | hidr_count      res     1
3bcac 12d             | hidr_lminmax    res     1
3bcac 12d             | hidr_lminmax    res     1
3bcac 12d             | hidr_pminmax    res     1
3bcac 12d             | hidr_pminmax    res     1
3bcac 12d             | hidr_end
3bcac 12d             | 
3bcac 12d             | ' Variables dependent on the system freqency
3bcac 12d             | _var_64_lower_  res     1
3bcac 12d             | _var_64_lower_  res     1
3bcac 12d             | _var_64_upper_  res     1
3bcac 12d             | _var_64_upper_  res     1
3bcac 12d             | _12Mbps_        res     1
3bcac 12d             | _12Mbps_        res     1
3bcac 12d             | _1_5Mbps_       res     1
3bcac 12d             | _1_5Mbps_       res     1
3bcac 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3bcac 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3bcac 12d             | _1us_           res     1         ' 1us
3bcac 12d             | _1us_           res     1         ' 1us
3bcac 12d             | _10us_          res     1         ' 10us
3bcac 12d             | _10us_          res     1         ' 10us
3bcac 12d             | _33us_          res     1         ' 33us
3bcac 12d             | _33us_          res     1         ' 33us
3bcac 12d             | _txn_err_       res     1         ' 250us
3bcac 12d             | _txn_err_       res     1         ' 250us
3bcac 12d             | _500us_         res     1         ' 500us
3bcac 12d             | _500us_         res     1         ' 500us
3bcac 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3bcac 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3bcac 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3bcac 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3bcac 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3bcac 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3bcac 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3bcac 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3bcac 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3bcac 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3bcac 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3bcac 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3bcac 12d             | _preamble_wait_ res     1
3bcac 12d             | _preamble_wait_ res     1
3bcac 12d             | _1ms_           res     1         ' 1ms
3bcac 12d             | _1ms_           res     1         ' 1ms
3bcac 12d             | _2ms_           res     1         ' 2ms
3bcac 12d             | _2ms_           res     1         ' 2ms
3bcac 12d             | _suspend_wait_  res     1         ' 3ms
3bcac 12d             | _suspend_wait_  res     1         ' 3ms
3bcac 12d             | _4ms_           res     1         ' 4ms
3bcac 12d             | _4ms_           res     1         ' 4ms
3bcac 12d             | _xfer_wait_     res     1         ' 5ms
3bcac 12d             | _xfer_wait_     res     1         ' 5ms
3bcac 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3bcac 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3bcac 12d             | _reset_hold_    res     1         ' 15ms
3bcac 12d             | _reset_hold_    res     1         ' 15ms
3bcac 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3bcac 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3bcac 12d             | _21ms_          res     1         ' 21ms
3bcac 12d             | _21ms_          res     1         ' 21ms
3bcac 12d             | _100ms_         res     1         ' 100ms
3bcac 12d             | _100ms_         res     1         ' 100ms
3bcac 12d             | _500ms_         res     1         ' 500ms
3bcac 12d             | _500ms_         res     1         ' 500ms
3bcac 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3bcac 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3bcac 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3bcac 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3bcac 12d             | '------------------------------------------------------------------------------
3bcac 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3bcac 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3bcac 12d             | _usb_d_ls_nco_  res     1
3bcac 12d             | _usb_d_ls_nco_  res     1
3bcac 12d             | _usb_h_fs_nco_  res     1
3bcac 12d             | _usb_h_fs_nco_  res     1
3bcac 12d             | _usb_d_fs_nco_  res     1
3bcac 12d             | _usb_d_fs_nco_  res     1
3bcac 12d             | '------------------------------------------------------------------------------
3bcac 12d             | ' Scratch registers
3bcac 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3bcac 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3bcac 12d             | htmp1           res     1
3bcac 12d             | htmp1           res     1
3bcac 12d             | htmp2           res     1
3bcac 12d             | htmp2           res     1
3bcac 12d             | htmp3           res     1
3bcac 12d             | htmp3           res     1
3bcac 12d             | hrep            res     1         ' Repeat count
3bcac 12d             | hrep            res     1         ' Repeat count
3bcac 12d             | hsave0          res     1         ' Subroutine parameter saves
3bcac 12d             | hsave0          res     1         ' Subroutine parameter saves
3bcac 12d             | hsave1          res     1
3bcac 12d             | hsave1          res     1
3bcac 12d             | hsave2          res     1
3bcac 12d             | hsave2          res     1
3bcac 12d             | isrtmp1         res     1
3bcac 12d             | isrtmp1         res     1
3bcac 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3bcac 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3bcac 12d             | hr0             res     1         ' Multi-purpose registers
3bcac 12d             | hr0             res     1         ' Multi-purpose registers
3bcac 12d             | hr1             res     1
3bcac 12d             | hr1             res     1
3bcac 12d             | hr2             res     1
3bcac 12d             | hr2             res     1
3bcac 12d             | hr3             res     1
3bcac 12d             | hr3             res     1
3bcac 12d             | hpar1           res     1         ' Routine entry/exit parameters
3bcac 12d             | hpar1           res     1         ' Routine entry/exit parameters
3bcac 12d             | hpar2           res     1
3bcac 12d             | hpar2           res     1
3bcac 12d             | hpar3           res     1
3bcac 12d             | hpar3           res     1
3bcac 12d             | hct2            res     1         ' Function response bus turn-around timer
3bcac 12d             | hct2            res     1         ' Function response bus turn-around timer
3bcac 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3bcac 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3bcac 12d             | mod_cnt         res     1         ' Used in idle loops
3bcac 12d             | mod_cnt         res     1         ' Used in idle loops
3bcac 12d             | 
3bcac 12d             |                 fit     $1F0
3bcac 12d             |                 fit     $1F0
3bcac 12d             |                 org     $200
3bcac 200             | hlut_start
3bcac 200             | 
3bcac 200             | '------------------------------------------------------------------------------
3bcac 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3bcac 200             | ' settings to startup defaults.
3bcac 200             | '------------------------------------------------------------------------------
3bcac 200             | ' On entry:
3bcac 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3bcac 200             | '------------------------------------------------------------------------------
3bcac 200             | set_speed_full
3bcac 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3bcb0 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3bcb4 202 A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3bcb8 203 A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3bcbc 204             | '                ret                             wcz     ' Restore caller flags on exit
3bcbc 204             | 
3bcbc 204             | '------------------------------------------------------------------------------
3bcbc 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3bcbc 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3bcbc 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3bcbc 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3bcbc 204             | ' putting the smart pins into reset.
3bcbc 204             | '------------------------------------------------------------------------------
3bcbc 204             | ' On entry:
3bcbc 204             | ' On exit: CZ flags restored to caller states
3bcbc 204             | '------------------------------------------------------------------------------
3bcbc 204             | set_speed_low
3bcbc 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3bcc0 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3bcc4 206 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3bcc8 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3bccc 208 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3bcd0 209 A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3bcd4 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3bcd8 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3bcdc 20c             | 
3bcdc 20c             | '------------------------------------------------------------------------------
3bcdc 20c             | ' Perform configuration stuff required when a device intitially connects.
3bcdc 20c             | '------------------------------------------------------------------------------
3bcdc 20c             | ' On entry:
3bcdc 20c             | ' On exit:
3bcdc 20c             | '------------------------------------------------------------------------------
3bcdc 20c             | on_connect
3bcdc 20c 02 86 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3bce0 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3bce4 20e             | .retry
3bce4 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3bce8 20f 01 8E 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3bcec 210 02 8E 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3bcf0 211 00 08 00 FF 
3bcf4 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3bcf8 213 20 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3bcfc 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bd00 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3bd04 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3bd08 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3bd0c 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bd10 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3bd14 21a B2 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3bd18 21b 4C 03 B0 FD |                 call    #poll_waitx
3bd1c 21c 01 86 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3bd20 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3bd24 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3bd28 21f B8 FF 9F FD |                 jmp     #.retry
3bd2c 220             | .get_dev_desc
3bd2c 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3bd30 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3bd34 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3bd38 223 A8 99 02 F6 |                 mov     hctwait, _1ms_
3bd3c 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3bd40 225 88 FB BF FD |                 call    #reset
3bd44 226 38 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3bd48 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bd4c 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3bd50 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3bd54 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bd58 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3bd5c 22c AD 99 02 F6 |                 mov     hctwait, _8ms_
3bd60 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3bd64 22e 04 00 00 FF 
3bd68 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3bd6c 230 34 FA BF FD |                 call    #calc_crc5
3bd70 231 20 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3bd74 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bd78 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3bd7c 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3bd80 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3bd84 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3bd88 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bd8c 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3bd90 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3bd94 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3bd98 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3bd9c 23c A0 99 02 F6 |                 mov     hctwait, _500us_
3bda0 23d C4 02 B0 FD |                 call    #poll_waitx
3bda4 23e 28 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3bda8 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bdac 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3bdb0 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3bdb4 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3bdb8 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bdbc 244 2D 00 64 5D |         if_nz   ret
3bdc0 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3bdc4 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3bdc8 247 61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3bdcc 248 61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3bdd0 249 00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3bdd4 24a 09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3bdd8 24b 02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3bddc 24c 56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
3bde0 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3bde4 24e 2C FB 9F CD |         if_b    jmp     #host_error
3bde8 24f 24 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3bdec 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3bdf0 251 2D EC 63 FD |                 call    pa
3bdf4 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3bdf8 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3bdfc 254 2C EC 63 FD |                 jmp     pa
3be00 255             | 
3be00 255             | '------------------------------------------------------------------------------
3be00 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3be00 255             | ' Status reporting is always in the function-to-host direction.
3be00 255             | '------------------------------------------------------------------------------
3be00 255             | ' On entry:
3be00 255             | '   PTRA - start address of the SETUP data in hub.
3be00 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3be00 255             | '     stage.
3be00 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3be00 255             | ' On exit:
3be00 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3be00 255             | '     contains the count of data stage bytes actually received, which must
3be00 255             | '     always be <= the count requested.
3be00 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3be00 255             | '     more specific USB operation error code.
3be00 255             | '------------------------------------------------------------------------------
3be00 255             | control_read
3be00 255 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
3be04 256 F8 91 03 F6 |                 mov     hpar2, ptra
3be08 257 F7 93 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3be0c 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3be10 259             | .xfer_start
3be10 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3be14 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3be18 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3be1c 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3be20 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3be24 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3be28 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3be2c 260 61 00 00 FF 
3be30 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3be34 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3be38 263             | .data
3be38 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3be3c 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3be40 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3be44 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3be48 267             | .nak_retry
3be48 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3be4c 268             | .in_retry
3be4c 268 BC F6 BF FD |                 call    #txn_in
3be50 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3be54 26a 28 00 90 AD |         if_z    jmp     #.commit
3be58 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3be5c 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3be60 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3be64 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3be68 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3be6c 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3be70 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3be74 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3be78 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3be7c 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3be80 275             | .commit
3be80 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3be84 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3be88 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3be8c 278 5C 87 03 F6 |                 mov     hr0, pkt_cnt
3be90 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3be94 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3be98 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3be9c 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3bea0 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3bea4 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3bea8 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3beac 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3beb0 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3beb4 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3beb8 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3bebc 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3bec0 285             | .pre_status
3bec0 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3bec4 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3bec8 287 00 B0 06 F6 |                 mov     pkt_data, #0
3becc 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3bed0 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3bed4 28a 61 00 00 FF 
3bed8 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3bedc 28c             | .out_retry
3bedc 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3bee0 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bee4 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3bee8 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3beec 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3bef0 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3bef4 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3bef8 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3befc 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3bf00 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3bf04 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3bf08 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3bf08 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3bf08 297             | ' ControlRead() transfer gets things unstuck most of the time...
3bf08 297             | .xfer_retry
3bf08 297 AC 99 02 F6 |                 mov     hctwait, _xfer_wait_
3bf0c 298 58 01 B0 FD |                 call    #poll_waitx
3bf10 299 8C F9 BF FD |                 call    #wait_txn_ok
3bf14 29a C7 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3bf18 29b C8 F1 03 F6 |                 mov     ptra, hpar2
3bf1c 29c C9 EF 03 F6 |                 mov     pb, hpar3
3bf20 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3bf24 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3bf28 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3bf2c 2a0             | 
3bf2c 2a0             | '------------------------------------------------------------------------------
3bf2c 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3bf2c 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3bf2c 2a0             | ' the SETUP data struct is filled with the required values.
3bf2c 2a0             | '------------------------------------------------------------------------------
3bf2c 2a0             | ' On entry:
3bf2c 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3bf2c 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3bf2c 2a0             | '     stage.
3bf2c 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3bf2c 2a0             | ' On exit:
3bf2c 2a0             | '   retval - used to convey the success/failure of each stage.
3bf2c 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3bf2c 2a0             | '     more specific USB operation error code.
3bf2c 2a0             | '------------------------------------------------------------------------------
3bf2c 2a0             | control_write
3bf2c 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3bf30 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3bf34 2a2 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3bf38 2a3             | 
3bf38 2a3 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
3bf3c 2a4 F8 91 03 F6 |                 mov     hpar2, ptra
3bf40 2a5 F7 93 03 F6 |                 mov     hpar3, pb
3bf44 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3bf48 2a7             | .xfer_start
3bf48 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3bf4c 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3bf50 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3bf54 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bf58 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3bf5c 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3bf60 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3bf64 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3bf68 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3bf6c 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3bf70 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3bf74 2b2             | .data
3bf74 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3bf78 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3bf7c 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3bf80 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3bf84 2b6             | .out_retry
3bf84 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3bf88 2b7 88 F6 BF FD |                 call    #txn_out
3bf8c 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bf90 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3bf94 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3bf98 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3bf9c 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3bfa0 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3bfa4 2be             | .commit
3bfa4 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3bfa8 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3bfac 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3bfb0 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3bfb4 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3bfb8 2c3             | pre_status_in
3bfb8 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3bfbc 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3bfc0 2c5             | .status_retry
3bfc0 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3bfc4 2c6 44 F5 BF FD |                 call    #txn_in
3bfc8 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3bfcc 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3bfd0 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3bfd4 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3bfd8 2cb 2D 00 64 AD |         if_z    ret
3bfdc 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3bfe0 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3bfe4 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3bfe8 2cf             | '               ret                                     ' Caller must handle transfer retirement
3bfe8 2cf             | 
3bfe8 2cf             | '------------------------------------------------------------------------------
3bfe8 2cf             | ' Execute an IN interrupt transaction.
3bfe8 2cf             | '------------------------------------------------------------------------------
3bfe8 2cf             | ' On entry:
3bfe8 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3bfe8 2cf             | '   hpar2 - Address of the IN data buffer
3bfe8 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3bfe8 2cf             | ' On exit:
3bfe8 2cf             | '   retval - the result of the operation.
3bfe8 2cf             | '   hpar3 - the count of IN data bytes actually received.
3bfe8 2cf             | '------------------------------------------------------------------------------
3bfe8 2cf             | do_int_in
3bfe8 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3bfec 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3bff0 2d1 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3bff4 2d2             | 
3bff4 2d2 C9 73 33 F9 |                 getword htmp, hpar3, #0
3bff8 2d3 C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3bffc 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3c000 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3c004 2d6             | .retry
3c004 2d6 C9 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3c008 2d7 00 F5 BF FD |                 call    #txn_in
3c00c 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3c010 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3c014 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3c018 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3c01c 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3c020 2dd 54 00 B0 FD |                 call    #retry_wait
3c024 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3c028 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3c02c 2e0 D4 FF 9F FD |                 jmp     #.retry
3c030 2e1             | .commit
3c030 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3c034 2e2 C8 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3c038 2e3 5C 87 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3c03c 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3c040 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3c044 2e6             | .post_ret
3c044 2e6 5C 93 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3c048 2e7             | 
3c048 2e7             | 
3c048 2e7             | '------------------------------------------------------------------------------
3c048 2e7             | ' Resets the downstream hub port to FS
3c048 2e7             | '------------------------------------------------------------------------------
3c048 2e7             | dwnstream_reset
3c048 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3c04c 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3c050 2e9             | 
3c050 2e9 0E 6A 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3c054 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3c058 2eb 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3c05c 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3c060 2ed A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3c064 2ee A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3c068 2ef             | 
3c068 2ef             | '------------------------------------------------------------------------------
3c068 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3c068 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3c068 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3c068 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3c068 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3c068 2ef             | '------------------------------------------------------------------------------
3c068 2ef             | ' On entry:
3c068 2ef             | '   hctwait - wait interval in sysclocks.
3c068 2ef             | ' On exit:
3c068 2ef             | '------------------------------------------------------------------------------
3c068 2ef             | poll_waitx
3c068 2ef 1A 94 63 FD |                 getct   hct2
3c06c 2f0 4C 95 6B FA |                 addct2  hct2, hctwait
3c070 2f1             | .wait
3c070 2f1 FF 25 CC FB |                 jnct2   #.wait
3c074 2f2 2D 00 64 FD |                 ret
3c078 2f3             | 
3c078 2f3             | '------------------------------------------------------------------------------
3c078 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3c078 2f3             | '------------------------------------------------------------------------------
3c078 2f3             | ' On entry:
3c078 2f3             | '   retval - transaction response PID or error code.
3c078 2f3             | ' On exit:
3c078 2f3             | '------------------------------------------------------------------------------
3c078 2f3             | retry_wait
3c078 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3c07c 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3c080 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3c084 2f6 14 00 90 AD |         if_z    jmp     #.nak
3c088 2f7 9F 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3c08c 2f8 D8 FF BF FD |                 call    #poll_waitx
3c090 2f9             | .dec
3c090 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3c094 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3c098 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3c09c 2fc             | .nak
3c09c 2fc 9E 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3c0a0 2fd C4 FF BF FD |                 call    #poll_waitx
3c0a4 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3c0a8 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3c0ac 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3c0b0 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3c0b4 302 2D 00 64 FD |                 ret
3c0b8 303             | 
3c0b8 303             | host_reset
3c0b8 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3c0bc 304 14 72 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3c0c0 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3c0c0 305 BD 01 05 FF 
3c0c4 306 00 72 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3c0c8 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3c0cc 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3c0d0 309             | ' Check to see if the system clock has been changed.
3c0d0 309 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
3c0d4 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3c0d8 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3c0dc 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3c0e0 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3c0e4 30e 40 46 62 FD |                 dirl    dp
3c0e8 30f             | 
3c0e8 30f 28 02 64 FD |                 setq    #1
3c0ec 310 80 00 80 FF 
3c0f0 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3c0f4 312 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3c0f8 313             | .enable
3c0f8 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3c0fc 314 41 46 62 FD |                 dirh    dp
3c100 315 1F 38 63 FD |                 waitx   _1us_
3c104 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c108 317             | 
3c108 317             |                 ' Handle Port protection enable and startup delay
3c108 317 00 48 56 F2 |                 cmps    usb_enable_pin, #0      wc
3c10c 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3c110 319 1F 60 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3c114 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3c118 31b 1F 60 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3c11c 31c             | 
3c11c 31c             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3c11c 31c             | 
3c11c 31c             | discon_entry
3c11c 31c 03 98 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3c120 31d             | 
3c120 31d 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3c124 31e 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3c128 31f 38 EC A7 F9 |                 alti    pa, #%000_111_000
3c12c 320 00 00 04 F6 |                 mov     0-0, #0
3c130 321             | .regloop
3c130 321             |               
3c130 321             |         if HAVE_HIDPAD
3c130 321 F8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3c134 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3c138 323 28 6E 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3c13c 324 F7 01 68 FC |                 wrlong  #0,pb
3c140 325             |         end
3c140 325             |         if EMUPAD_MAX_PLAYER > 0
3c140 325             |         end
3c140 325             | 
3c140 325             |                 ' Fall through to disconnected loop
3c140 325             | 
3c140 325             | '-----------------------------------------------------------------------------------------------------------------
3c140 325             | ' Device connect handling (Section 7.1.7.3).
3c140 325             | '-----------------------------------------------------------------------------------------------------------------
3c140 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3c140 325             | ' device to connect (Section 7.1.7.3).
3c140 325             | '-----------------------------------------------------------------------------------------------------------------
3c140 325             | disconnected
3c140 325 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3c144 326 2C 89 0B F2 |                 cmp     hr1, save_sysclk        wz
3c148 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3c14c 328 03 88 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3c150 329 1F 88 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3c154 32a             |         if ACTIVITY_LED >= 0
3c154 32a             |         end
3c154 32a 22 A7 82 FA |                 rqpin   urx, dm
3c158 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3c15c 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3c160 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3c164 32e             | .se1_test
3c164 32e B1 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3c168 32f FC FE BF FD |                 call    #poll_waitx
3c16c 330 22 A7 82 FA |                 rqpin   urx, dm
3c170 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3c174 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3c178 333 A0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3c17c 334             | .se1            'SE1 is a fatal error condition
3c17c 334 B1 99 02 F6 |                 mov     hctwait, _100ms_
3c180 335 E4 FE BF FD |                 call    #poll_waitx
3c184 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3c188 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3c18c 338             | .connect_test                                           ' Test lines until stable J/K state seen
3c18c 338 1F 62 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3c190 339 22 A7 82 FA |                 rqpin   urx, dm
3c194 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3c198 33b 80 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3c19c 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3c1a0 33d             | connected
3c1a0 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3c1a4 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3c1a8 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3c1ac 340 6C FF 9F 5D |         if_nz   jmp     #discon_entry
3c1b0 341             | .set_pulse
3c1b0 341 1A 66 63 FD |                 getct   _pulse_time_
3c1b4 342 B2 67 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3c1b8 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3c1b8 343             | ' of 1ms and make a correction, if necessary.
3c1b8 343             | '                mov     htmp, _1ms_
3c1b8 343             | '                subs    htmp, iframe_delta
3c1b8 343             | '                adds    _frame1ms_clks_, htmp
3c1b8 343             | '                debug(udec(_frame1ms_clks_))
3c1b8 343             | 
3c1b8 343             |                 ' Fall through to idle/processing loop
3c1b8 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3c1bc 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3c1c0 345             | 
3c1c0 345             | hidle
3c1c0 345 22 A7 82 FA |                 rqpin   urx, dm
3c1c4 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3c1c8 347 98 00 90 CD |         if_c    jmp     #.se0_test
3c1cc 348 24 06 70 FD |                 pollct3                         wc
3c1d0 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3c1d4 34a 1A 96 63 FD |                 getct   hct3
3c1d8 34b A8 97 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3c1dc 34c             | 
3c1dc 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3c1e0 34d 00 72 E3 F8 |                 getbyte htmp
3c1e4 34e             | 
3c1e4 34e 09 72 0F F2 |                 cmp     htmp, #HUB_READY        wz
3c1e8 34f 8C 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3c1ec 350 40 00 90 AD |         if_z    jmp     #.poll
3c1f0 351             | 
3c1f0 351             |         if _HAVE_GAMEPAD
3c1f0 351 06 72 0F F2 |                 cmp     htmp, #HID_READY        wz
3c1f4 352 08 72 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3c1f8 353 07 72 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3c1fc 354 F4 15 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3c200 355 2C 00 90 AD |         if_z    jmp     #.poll
3c204 356             |         end
3c204 356             | 
3c204 356             |         if HAVE_MOUSE
3c204 356 04 72 0F F2 |                 cmp     htmp, #M_READY          wz
3c208 357 44 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3c20c 358 20 00 90 AD |         if_z    jmp     #.poll
3c210 359             |         end
3c210 359             | 
3c210 359 03 72 0F F2 |                 cmp     htmp, #KB_READY         wz
3c214 35a AC 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3c218 35b 14 00 90 AD |         if_z    jmp     #.poll
3c21c 35c             | 
3c21c 35c 05 72 0F F2 |                 cmp     htmp, #KBM_READY        wz
3c220 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3c224 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3c228 35f AC 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3c22c 360             |         if HAVE_MOUSE
3c22c 360 44 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3c230 361             |         else
3c230 361             |         end
3c230 361             | 
3c230 361             | .poll
3c230 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3c234 362 2D EC 63 FD |                 call    pa
3c238 363             | .skip_poll
3c238 363             | 
3c238 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3c23c 364             | 
3c23c 364             | .nopoll
3c23c 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3c240 365 44 00 90 AD |         if_z    jmp     #hsuspend
3c244 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3c248 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3c24c 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3c250 369 1A 86 63 FD |                 getct   hr0
3c254 36a B3 87 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3c258 36b             |         if ACTIVITY_LED >= 0
3c258 36b             |         end
3c258 36b 1A 66 63 3D |         if_ae   getct   _pulse_time_
3c25c 36c B2 67 03 31 |         if_ae   add     _pulse_time_, _500ms_
3c260 36d 5C FF 9F FD |                 jmp     #hidle
3c264 36e             | ' Check for extended SE0 state on the bus
3c264 36e             | .se0_test
3c264 36e A8 99 02 F6 |                 mov     hctwait, _1ms_
3c268 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3c26c 370 22 A7 82 FA |                 rqpin   urx, dm
3c270 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3c274 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3c278 373 24 F6 BF FD |                 call    #wait_txn_ok
3c27c 374 00 00 80 FF 
3c280 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3c284 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3c284 376 94 FE 9F FD |                 jmp     #discon_entry                   ' Device disconnected
3c288 377             | 
3c288 377             | hsuspend
3c288 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3c28c 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3c290 379 1F 54 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3c294 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3c298 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3c29c 37c 00 98 07 F6 |                 mov     mod_cnt, #0
3c2a0 37d             | 
3c2a0 37d             |                 ' Fall through to resume wait loop
3c2a0 37d             | 
3c2a0 37d             | hwait_resume
3c2a0 37d 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3c2a4 37e 02 88 47 F0 |                 shr     hr1, #2
3c2a8 37f 1F 88 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3c2ac 380             |         if ACTIVITY_LED >= 0
3c2ac 380             |         end
3c2ac 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3c2b0 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3c2b4 382 14 72 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3c2b8 383 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
3c2bc 384 18 00 90 AD |         if_z    jmp     #.resume
3c2c0 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3c2c4 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3c2c8 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3c2cc 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3c2d0 389 22 6F 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3c2d4 38a 22 6B 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3c2d8 38b             | .resume
3c2d8 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3c2dc 38c 1F 5E 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3c2e0 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3c2e4 38e A3 73 03 F6 |                 mov     htmp, _ip_delay_ls_
3c2e8 38f 01 72 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3c2ec 390 1F 72 63 FD |                 waitx   htmp
3c2f0 391 22 07 28 FC |                 wypin   #OUT_J, dm
3c2f4 392 01 72 47 F0 |                 shr     htmp, #1
3c2f8 393 1F 72 63 FD |                 waitx   htmp
3c2fc 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c300 395 1A 92 62 FD |                 getct   iframe_ct_base
3c304 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3c308 397 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3c30c 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3c310 399 AB 99 02 F6 |                 mov     hctwait, _4ms_
3c314 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3c318 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3c31c 39c             | 
3c31c 39c             | '------------------------------------------------------------------------------
3c31c 39c             | ' Send preamble to enable low-speed HUB ports
3c31c 39c             | '------------------------------------------------------------------------------
3c31c 39c             | ' On entry:
3c31c 39c             | ' On exit:
3c31c 39c             | '   USB baud rate set to low-speed
3c31c 39c             | '------------------------------------------------------------------------------
3c31c 39c             | utx_pre
3c31c 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3c320 39d 40 46 62 FD |                 dirl    dp
3c324 39e 28 02 64 FD |                 setq    #1
3c328 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3c32c 3a0 58 44 62 FD |                 drvl    dm
3c330 3a1 59 46 62 FD |                 drvh    dp
3c334 3a2             | 
3c334 3a2 1E 00 00 FF 
3c338 3a3 80 72 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3c33c 3a4             | 
3c33c 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3c340 3a5 01 72 57 F0 |                 shr     htmp, #1        wc
3c344 3a6 28 02 64 3D |         if_nc   setq    #1
3c348 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3c34c 3a8 1F 4E 63 FD |                 waitx   _preamble_wait_
3c350 3a9             | .l1
3c350 3a9             | 
3c350 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3c354 3aa 40 46 62 FD |                 dirl    dp
3c358 3ab 28 02 64 FD |                 setq    #1
3c35c 3ac 80 00 80 FF 
3c360 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3c364 3ae 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3c368 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3c36c 3b0 41 46 62 FD |                 dirh    dp
3c370 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c374 3b2             | 
3c374 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3c378 3b3 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3c37c 3b4 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3c380 3b5             | 
3c380 3b5             | hlut_end
3c380 3b5             |                 fit     $400
3c380 3b5             |                 fit     $400
3c380 3b5             |                 orgh
3c380                 | if OVERLAP_MEMORY
3c380                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3c380                 | end
3c380                 | '------------------------------------------------------------------------------
3c380                 | ' Routines called from cog space.
3c380                 | '------------------------------------------------------------------------------
3c380                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3c380                 | '------------------------------------------------------------------------------
3c380                 | 
3c380                 | '------------------------------------------------------------------------------
3c380                 | ' USB host cog initialization.
3c380                 | '------------------------------------------------------------------------------
3c380                 | usb_host_init
3c380                 |                 ' Initialize buffer pointers
3c380                 |         if OVERLAP_MEMORY
3c380                 |         else
3c380     4C 15 B0 FE |                 loc     pb, #hid_descr
3c384                 |         end
3c384     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3c388                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3c388                 |                 {
3c388                 |                 }
3c388                 |         
3c388                 |                 {
3c388                 |                 }
3c388                 |                 'loc     pb,#hkbd_report
3c388                 |                 'mov     hkbd_report_p,pb
3c388                 | 
3c388     44 1D B0 FE |                 loc     pb, #hub_descr
3c38c     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3c390     59 1D B0 FE |                 loc     pb, #urx_buff
3c394     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3c398     D1 1D B0 FE |                 loc     pb, #dev_desc_buff
3c39c     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3c3a0     DB 1D B0 FE |                 loc     pb, #con_desc_buff
3c3a4     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3c3a8     24 15 B0 FE |                 loc     pb, #usb_cache_start
3c3ac     F7 55 02 F6 |                 mov     cache_start_p, pb
3c3b0     25 1D B0 FE |                 loc     pb, #usb_cache_end
3c3b4     F7 57 02 F6 |                 mov     cache_end_p, pb
3c3b8                 | 
3c3b8                 |         if ERROR_LED >= 0
3c3b8                 |         end
3c3b8                 | 
3c3b8                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3c3b8                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3c3b8                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3c3b8                 | ' Configure and enable the Serial Host USB port.
3c3b8     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3c3bc                 | 
3c3bc                 | '------------------------------------------------------------------------------
3c3bc                 | ' Timing calculations happen before any interrupt(s) are enabled.
3c3bc                 | '------------------------------------------------------------------------------
3c3bc                 | ' On entry:
3c3bc                 | '   htmp - current CLKFREQ value.
3c3bc                 | '------------------------------------------------------------------------------
3c3bc                 | hinit_usb_timings
3c3bc                 | '                getct   htmp2
3c3bc     B9 59 02 F6 |                 mov     save_sysclk, htmp
3c3c0     8D 5B 80 FF 
3c3c4     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3c3c8     18 32 63 FD |                 getqx   _12Mbps_
3c3cc     10 32 57 F0 |                 shr     _12Mbps_, #16           wc
3c3d0     00 32 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3c3d4     03 6E 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3c3d8     0E 6E 67 F0 |                 shl     _usb_h_fs_nco_, #14
3c3dc     99 6F 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3c3e0     01 70 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3c3e4     0E 70 67 F0 |                 shl     _usb_d_fs_nco_, #14
3c3e8     99 71 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3c3ec     99 35 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3c3f0     03 34 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3c3f4     02 6A 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3c3f8     0E 6A 67 F0 |                 shl     _usb_h_ls_nco_, #14
3c3fc     9A 6B 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3c400     9A 6D 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3c404     80 00 00 FF 
3c408     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3c40c     18 2E 63 FD |                 getqx   _var_64_lower_
3c410     19 30 63 FD |                 getqy   _var_64_upper_
3c414     28 2E 63 FD |                 setq    _var_64_lower_
3c418     65 CD 1D FF 
3c41c     00 30 27 FD |                 qfrac   _var_64_upper_, ##_1b
3c420     18 36 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3c424     01 00 00 FF 
3c428     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3c42c     18 2E 63 FD |                 getqx   _var_64_lower_
3c430     19 30 63 FD |                 getqy   _var_64_upper_
3c434     28 2E 63 FD |                 setq    _var_64_lower_
3c438     A1 07 00 FF 
3c43c     40 30 27 FD |                 qfrac   _var_64_upper_, ##_1m
3c440     18 38 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3c444     9C 7D 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3c448     09 38 57 F0 |                 shr     _1us_, #9               wc
3c44c     00 38 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3c450     0A 7C 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3c454     18 3A 63 FD |                 getqx   _10us_
3c458     09 3A 57 F0 |                 shr     _10us_, #9              wc
3c45c     00 3A 27 F1 |                 addx    _10us_, #0                      ' 10us
3c460     21 7C 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3c464     18 3C 63 FD |                 getqx   _33us_
3c468     09 3C 57 F0 |                 shr     _33us_, #9              wc
3c46c     00 3C 27 F1 |                 addx    _33us_, #0                      ' 33us
3c470     FA 7C 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3c474     18 3E 63 FD |                 getqx   _txn_err_
3c478     09 3E 57 F0 |                 shr     _txn_err_, #9           wc
3c47c     00 3E 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3c480     F4 7D 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3c484     18 40 63 FD |                 getqx   _500us_
3c488     09 40 57 F0 |                 shr     _500us_, #9             wc
3c48c     00 40 27 F1 |                 addx    _500us_, #0                     ' 500us
3c490     01 00 00 FF 
3c494     9A 7C 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3c498     18 42 63 FD |                 getqx   _txn_ok_ls_
3c49c     09 42 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3c4a0     00 42 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3c4a4     01 00 00 FF 
3c4a8     52 7D 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3c4ac     18 44 63 FD |                 getqx   _txn_ok_fs_
3c4b0     09 44 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3c4b4     00 44 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3c4b8     9B 47 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3c4bc     05 00 00 FF 
3c4c0     80 46 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3c4c4     10 46 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3c4c8     00 46 27 F1 |                 addx    _ip_delay_ls_, #0
3c4cc     9B 4B 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3c4d0     1C 00 00 FF 
3c4d4     C0 4B 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3c4d8     10 4A 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3c4dc     00 4A 27 F1 |                 addx    _tat_wait_ls_, #0
3c4e0     9B 49 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3c4e4     00 00 00 FF 
3c4e8     4E 49 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3c4ec     10 48 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3c4f0     00 48 27 F1 |                 addx    _ip_delay_fs_, #0
3c4f4     9B 4D 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3c4f8     04 00 00 FF 
3c4fc     23 4D 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3c500     10 4C 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3c504     00 4C 27 F1 |                 addx    _tat_wait_fs_, #0
3c508     8D 5B 00 FF 
3c50c     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3c510     18 4E 63 FD |                 getqx   _preamble_wait_
3c514     08 4E 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3c518     01 00 00 FF 
3c51c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3c520     18 2E 63 FD |                 getqx   _var_64_lower_
3c524     19 30 63 FD |                 getqy   _var_64_upper_
3c528     28 2E 63 FD |                 setq    _var_64_lower_
3c52c     01 00 00 FF 
3c530     E8 31 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3c534     18 50 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3c538     09 50 57 F0 |                 shr     _1ms_, #9               wc
3c53c     00 50 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3c540     FF FF 7F FF 
3c544     F2 69 07 F6 |                 mov     _frame1ms_clks_, ##-14
3c548     A8 69 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3c54c     A8 53 03 F6 |                 mov     _2ms_, _1ms_
3c550     01 52 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3c554     A8 55 03 F6 |                 mov     _suspend_wait_, _1ms_
3c558     A8 55 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3c55c     A8 57 03 F6 |                 mov     _4ms_, _1ms_
3c560     02 56 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3c564     AB 59 03 F6 |                 mov     _xfer_wait_, _4ms_
3c568     A8 59 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3c56c     AC 5D 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3c570     AE 5F 03 F6 |                 mov     _resume_hold_, _reset_hold_
3c574     02 5E 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3c578     AF 63 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3c57c     01 62 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3c580     A8 5B 03 F6 |                 mov     _8ms_, _1ms_
3c584     03 5A 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3c588     01 5C 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3c58c     AE 63 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3c590     AC 5D 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3c594     AC 61 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3c598     02 60 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3c59c     A8 61 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3c5a0     B1 65 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3c5a4     01 62 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3c5a8     03 64 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3c5ac     B1 65 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3c5b0                 | '        _ret_   mov     _1sec_, save_sysclk
3c5b0                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3c5b0                 | '                ret
3c5b0                 | {
3c5b0                 | }
3c5b0                 | 
3c5b0                 | '------------------------------------------------------------------------------
3c5b0                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3c5b0                 | ' one. If it is, start the task progression that will configure the device for
3c5b0                 | ' use.
3c5b0                 | '------------------------------------------------------------------------------
3c5b0                 | ' On entry:
3c5b0                 | '   hconfig_base - start address of the cached config descriptor chain.
3c5b0                 | ' On exit:
3c5b0                 | '------------------------------------------------------------------------------
3c5b0                 | hparse_con_desc
3c5b0     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3c5b4     82 73 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3c5b8     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3c5bc     4E 72 FF F9 |                 movbyts htmp,#%%1032
3c5c0     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3c5c4                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3c5c4                 | 
3c5c4     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3c5c8     6E ED 03 F1 |                 add     pa, hconfig_base
3c5cc     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3c5d0                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3c5d0                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3c5d0                 | ' that defines a keyboard and/or mouse.
3c5d0     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3c5d4                 | .next_intf
3c5d4     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3c5d8     B8 01 90 3D |         if_ae   jmp     #hset_config
3c5dc     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3c5e0     75 F3 03 F1 |                 add     ptrb, hnext_desc
3c5e4     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3c5e8     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3c5ec     0C 00 90 AD |         if_z    jmp     #.intf
3c5f0     80 73 C7 FA |                 rdbyte  htmp, ptrb
3c5f4     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3c5f8     D8 FF 9F FD |                 jmp     #.next_intf
3c5fc                 | .intf
3c5fc     00 90 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3c600     00 92 07 F6 |                 mov     hpar3, #0
3c604     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3c608     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3c60c     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3c610     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3c614                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3c614                 | 
3c614                 | .endp
3c614     80 73 C7 FA |                 rdbyte  htmp, ptrb
3c618     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3c61c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3c620     78 00 90 3D |         if_ae   jmp     #.get_device
3c624     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3c628     75 F3 03 F1 |                 add     ptrb, hnext_desc
3c62c     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3c630     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3c634     64 00 90 AD |         if_z    jmp     #.get_device
3c638     05 72 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3c63c     04 00 90 AD |         if_z    jmp     #.get_ep
3c640     D0 FF 9F FD |                 jmp     #.endp
3c644                 | .get_ep
3c644     82 89 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3c648     07 88 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3c64c     0F 88 67 F0 |                 shl     hr1, #8 + 7
3c650     6C 73 03 F6 |                 mov     htmp, hctrl_ep_addr
3c654     3F 00 00 FF 
3c658     00 73 07 F5 |                 and     htmp, ##ADDR_MASK
3c65c     C4 73 43 F5 |                 or      htmp, hr1                       ' endpoint address
3c660     00 90 0F F2 |                 cmp     hpar2, #0               wz
3c664     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3c668     00 92 0F F2 |                 cmp     hpar3, #0               wz
3c66c     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3c670     A0 FF 9F FD |                 jmp     #.endp
3c674                 | .in_ep
3c674     B9 91 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3c678     84 8B C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3c67c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3c67c     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3c680     C3 8B DB F8 |                 setbyte hr2, hr0, #3
3c684     8C FF 9F FD |                 jmp     #.endp
3c688                 | .out_ep
3c688     B9 93 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3c68c     84 8D C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3c690                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3c690     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3c694     C3 8D DB F8 |                 setbyte hr3, hr0, #3
3c698     78 FF 9F FD |                 jmp     #.endp
3c69c                 | 
3c69c                 | .get_device
3c69c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3c6a0     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3c6a4     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3c6a8     64 00 90 AD |         if_z    jmp     #.gamepad
3c6ac     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3c6b0     A8 00 90 AD |         if_z    jmp     #.hub
3c6b4     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3c6b8     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3c6bc     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3c6c0     4C 00 90 AD |         if_z    jmp     #.gamepad
3c6c4     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3c6c8     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3c6cc                 | .keyboard
3c6cc     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3c6d0                 |         if HAVE_MOUSE
3c6d0     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3c6d4                 |         else
3c6d4                 |         end
3c6d4     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3c6d8     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
3c6dc     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c6e0     C5 71 FA F8 |                 getbyte kb_interval, hr2, #3
3c6e4     C5 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3c6e8     C8 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3c6ec                 |                 'debug(udec(kb_intf_num))
3c6ec                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3c6ec     E4 FE 9F FD |                 jmp     #.next_intf
3c6f0                 | if HAVE_MOUSE
3c6f0                 | .mouse
3c6f0     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3c6f4     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3c6f8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3c6fc     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
3c700     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c704                 |                 'getbyte ms_interval, hr2, #3
3c704     C5 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3c708     C8 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3c70c                 |                 'debug(udec(kb_intf_num))
3c70c                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3c70c     C4 FE 9F FD |                 jmp     #.next_intf
3c710                 | end
3c710                 | .gamepad
3c710     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
3c714     C8 73 63 F5 |                 xor     htmp, hpar2
3c718     3F 00 00 FF 
3c71c     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c720     B0 FE 9F AD |         if_z    jmp     #.next_intf
3c724                 |         if HAVE_MOUSE
3c724     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
3c728     C8 73 63 F5 |                 xor     htmp, hpar2
3c72c     3F 00 00 FF 
3c730     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c734     9C FE 9F AD |         if_z    jmp     #.next_intf
3c738                 |         end
3c738     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3c73c     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3c740     90 FE 9F 5D |         if_nz   jmp     #.next_intf
3c744                 | 
3c744     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c748     C5 7B FA F8 |                 getbyte gp_interval, hr2, #3
3c74c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c750     C8 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3c754     C9 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3c758                 |                 'debug(udec(gp_intf_num))
3c758                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3c758     78 FE 9F FD |                 jmp     #.next_intf
3c75c                 | .hub
3c75c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3c760     70 FE 9F 5D |         if_nz   jmp     #.next_intf
3c764     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3c768     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3c76c     64 FE 9F 5D |         if_nz   jmp     #.next_intf
3c770     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3c774     5C FE 9F 5D |         if_nz   jmp     #.next_intf
3c778     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3c77c     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3c780     C8 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3c784     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c788     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3c78c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3c790                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3c790     40 FE 9F FD |                 jmp     #.next_intf
3c794                 | 
3c794                 | '------------------------------------------------------------------------------
3c794                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3c794                 | ' it according to its function, or functions. In the case of this boot protocol
3c794                 | ' keyboard/mouse class driver:
3c794                 | ' - SetConfiguration(config_num)
3c794                 | ' - SetProtocol(boot)
3c794                 | ' - SetIdle(indefinite)
3c794                 | ' - Enter the device interrupt IN polling task stage.
3c794                 | '------------------------------------------------------------------------------
3c794                 | ' On entry:
3c794                 | ' On exit:
3c794                 | '------------------------------------------------------------------------------
3c794                 | hset_config
3c794                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3c794                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3c794     02 76 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3c798     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c79c     00 00 0C F2 |                 cmp     0-0, #0                 wz
3c7a0     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3c7a4                 |         if HAVE_MOUSE
3c7a4     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3c7a8                 |         end
3c7a8     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3c7ac     60 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3c7b0                 | .set_config
3c7b0     74 0E D0 FE |                 loc     ptra, #set_config
3c7b4     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3c7b8     6E ED 03 F1 |                 add     pa, hconfig_base
3c7bc     F6 8F C3 FA |                 rdbyte  hpar1, pa
3c7c0                 |                 debug("SetConfiguration: ",udec_(hpar1))
3c7c0     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3c7c4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3c7c8     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3c7cc     A0 02 A0 FD |                 call    #control_write
3c7d0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c7d4     2D 00 64 5D |         if_nz   ret
3c7d8                 | .kbd_config
3c7d8     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3c7dc     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3c7e0                 | 
3c7e0     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
3c7e4     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3c7e8     3F 00 00 FF 
3c7ec     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c7f0     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3c7f4                 | 
3c7f4     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3c7f8     3C 0E D0 FE |                 loc     ptra, #set_protocol
3c7fc     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3c800     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3c804     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3c808     A0 02 A0 FD |                 call    #control_write
3c80c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c810     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3c814     F8 02 90 5D |         if_nz   jmp     #.notify_client
3c818     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3c81c     37 91 E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3c820     44 03 B0 FD |                 call    #hset_idle
3c824                 |                 'cmp     retval, #PID_ACK        wz
3c824                 |         'if_nz   mov     hkbd_ep_addr, #0
3c824                 |         'if_nz   jmp     #.notify_client
3c824     A9 99 02 F6 |                 mov     hctwait, _2ms_
3c828     EF 02 A0 FD |                 call    #poll_waitx
3c82c     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3c830                 |         if NUMLOCK_DEFAULT_STATE && RPI_KEYBOARD_NUMLOCK_HACK
3c830                 |         end
3c830     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3c834     A0 17 90 FE |                 loc     pa, #hkbd_led_rep
3c838     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3c83c     40 03 B0 FD |                 call    #hset_kbdled_report
3c840     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c844     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3c848     C4 02 90 5D |         if_nz   jmp     #.notify_client
3c84c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3c850     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c854     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c858     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c85c     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3c860     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3c864     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3c868     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c86c     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3c870     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3c874     03 76 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3c878                 |         if !!HAVE_MOUSE
3c878                 |         end
3c878                 | 
3c878                 | .mouse_config
3c878                 | if HAVE_MOUSE
3c878     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3c87c     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3c880     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
3c884     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3c888     3F 00 00 FF 
3c88c     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c890     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3c894                 | 
3c894                 |                 debug("mouse passed addr check")
3c894                 | 
3c894     B8 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3c898     00 00 80 FF 
3c89c     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3c8a0     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3c8a4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c8a8     55 02 A0 FD |                 call    #control_read
3c8ac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c8b0     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3c8b4     58 02 90 5D |         if_nz   jmp     #.notify_client
3c8b8     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3c8bc     56 01 00 F6 |                 mov     0-0, total_data
3c8c0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c8c4                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3c8c4                 | 
3c8c4     35 73 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3c8c8     6C 0D D0 FE |                 loc     ptra, #set_protocol
3c8cc     01 03 5C FC |                 wrword  #MOUSE_FULL_PROTOCOL ? REPORT_PROTOCOL : BOOT_PROTOCOL, ptra[wValue]
3c8d0     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3c8d4     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3c8d8     A0 02 A0 FD |                 call    #control_write
3c8dc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c8e0     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3c8e4     28 02 90 5D |         if_nz   jmp     #.notify_client
3c8e8                 |                 debug("mouse passed SetProtocol")
3c8e8     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3c8ec     35 91 E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3c8f0     74 02 B0 FD |                 call    #hset_idle
3c8f4                 |                 'cmp     retval, #PID_ACK        wz
3c8f4                 |         'if_nz   mov     hmouse_ep_addr, #0
3c8f4                 |         'if_nz   jmp     #.notify_client
3c8f4                 |                 debug("mouse passed SetIdle")
3c8f4     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3c8f8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c8fc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c900     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c904     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3c908     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c90c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3c910     79 77 03 F6 |                 mov     htmp2, hkbd_ep_addr
3c914     7A 77 63 F5 |                 xor     htmp2, hmouse_ep_addr
3c918     3F 00 00 FF 
3c91c     00 77 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3c920     05 76 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3c924     04 76 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3c928     E4 01 90 FD |                 jmp     #.notify_client
3c92c                 | end
3c92c                 | .gamepad_config
3c92c                 | if _HAVE_GAMEPAD
3c92c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c930     00 00 0C F2 |                 cmp     0-0, #0                 wz
3c934     6C 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3c938     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3c93c     00 72 03 F6 |                 mov     htmp, 0-0
3c940     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3c944     3F 00 00 FF 
3c948     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c94c     54 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3c950                 | 
3c950     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3c954     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3c958     69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3c95c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c960     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c964     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c968     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c96c     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3c970     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3c974     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3c978     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c97c     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c980     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3c984     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3c988     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c98c                 | 
3c98c                 |                 if EMUPAD_MAX_PLAYER > 0
3c98c                 |                 
3c98c                 | .rule_loop           
3c98c                 |                 end
3c98c                 | 
3c98c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3c990     5C 00 90 AD |         if_e    jmp     #.xinput
3c994     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3c998     00 72 03 F6 |                 mov     htmp,0-0
3c99c     01 A6 02 FF 
3c9a0     68 72 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3c9a4     8C 00 90 AD |         if_e    jmp     #.ps3
3c9a8                 | 
3c9a8     A4 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3c9ac     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3c9b0     00 00 80 5F 
3c9b4     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3c9b8     03 00 80 AF 
3c9bc     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3c9c0     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3c9c4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c9c8     55 02 A0 FD |                 call    #control_read
3c9cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c9d0     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3c9d4     00 00 04 56 |         if_nz   mov     0-0, #0
3c9d8     34 01 90 5D |         if_nz   jmp     #.notify_client
3c9dc     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3c9e0     56 01 00 F6 |                 mov     0-0, total_data
3c9e4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c9e8                 |                 debug(uhex(pb),udec(total_data),uhex_byte_array(pb,total_data))
3c9e8                 | 
3c9e8     06 76 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3c9ec     20 01 90 FD |                 jmp     #.notify_client
3c9f0                 | .xinput
3c9f0     B8 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3c9f4     2D EF 03 F6 |                 mov     pb,hdev_port
3c9f8     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3c9fc     03 EE 27 F3 |                 fle     pb,#3
3ca00     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3ca04     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3ca08                 | 
3ca08     03 B0 06 F6 |                 mov     pkt_data, #3
3ca0c     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3ca10     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3ca14                 |                 debug("XInput LED set ",uhex_long(ep_addr_pid),uhex_byte(pb))
3ca14     5A 00 A0 FD |                 call    #txn_out
3ca18     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3ca1c                 | 
3ca1c     97 0C D0 FE |                 loc     ptra, #xinp_fix_8bitdo
3ca20     27 EF 03 F6 |                 mov     pb, urx_buff_p          ' We don't actually care where it goes
3ca24     55 02 A0 FD |                 call    #control_read           ' Execute GetDeviceDescriptor()
3ca28                 |                 debug("8bitdo weird fix... ",uhex(retval))
3ca28     D2 BE 06 F6 |                 mov retval,#PID_ACK             ' If we don't do this something else becomes sad (TODO fix?)
3ca2c                 | 
3ca2c                 | 
3ca2c     07 76 07 F6 |                 mov     htmp2, #XINPUT_READY
3ca30     DC 00 90 FD |                 jmp     #.notify_client
3ca34                 | .ps3
3ca34     44 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3ca38     2D EF 03 F6 |                 mov     pb,hdev_port
3ca3c     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3ca40     04 EE 27 F3 |                 fle     pb,#4
3ca44     F7 EF C3 F9 |                 decod   pb
3ca48     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3ca4c                 | 
3ca4c     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3ca50     F4 0B D0 FE |                 loc     ptra, #set_report
3ca54     01 00 80 FF 
3ca58     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3ca5c     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3ca60     03 61 5C FC |                 wrword  #48, ptra[wLength]
3ca64     14 0C B0 FE |                 loc     pb, #ps3_command_buff
3ca68     A0 02 A0 FD |                 call    #control_write
3ca6c                 | 
3ca6c     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3ca70     D4 0B D0 FE |                 loc     ptra, #set_report
3ca74     01 00 80 FF 
3ca78     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3ca7c     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3ca80     03 09 5C FC |                 wrword  #4, ptra[wLength]
3ca84     F0 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3ca88     A0 02 A0 FD |                 call    #control_write
3ca8c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3ca90     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3ca94     00 00 04 56 |         if_nz   mov     0-0, #0
3ca98     74 00 90 5D |         if_nz   jmp     #.notify_client
3ca9c                 | 
3ca9c     08 76 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3caa0     6C 00 90 FD |                 jmp     #.notify_client
3caa4                 | end
3caa4                 | 
3caa4                 | .hub_config
3caa4     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3caa8     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3caac     77 73 03 F6 |                 mov     htmp, hhub_ep_addr
3cab0     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3cab4     3F 00 00 FF 
3cab8     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3cabc     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3cac0                 | 
3cac0     94 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3cac4     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3cac8     26 EF 03 F6 |                 mov     pb, hub_descr_p
3cacc     55 02 A0 FD |                 call    #control_read
3cad0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cad4     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3cad8     34 00 90 5D |         if_nz   jmp     #.notify_client
3cadc                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3cadc                 | 
3cadc     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3cae0     02 79 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3cae4     07 78 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3cae8                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3cae8                 | .pwr_loop
3cae8     74 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3caec     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3caf0     02 79 57 FC |                 wrword  htmp3, ptra[wIndex]
3caf4     A0 02 A0 FD |                 call    #control_write
3caf8     FB 79 6F FB |                 djnz    htmp3, #.pwr_loop
3cafc                 | 
3cafc     B2 99 02 F6 |                 mov     hctwait, _500ms_
3cb00     B1 99 02 F1 |                 add     hctwait, _100ms_
3cb04     EF 02 A0 FD |                 call    #poll_waitx
3cb08                 | 
3cb08     09 76 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3cb0c     00 00 90 FD |                 jmp     #.notify_client
3cb10                 | 
3cb10                 | .notify_client
3cb10     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3cb14     BB 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3cb18                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3cb18                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3cb18     2D 00 64 FD |                 ret
3cb1c                 | 
3cb1c                 | '------------------------------------------------------------------------------
3cb1c                 | ' Initialize the keyboard/mouse data area to start-up values.
3cb1c                 | '------------------------------------------------------------------------------
3cb1c                 | ' On entry:
3cb1c                 | ' On exit:
3cb1c                 | '------------------------------------------------------------------------------
3cb1c                 | init_kbdm_data
3cb1c     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3cb20     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3cb24                 | 
3cb24     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3cb28     2B ED 03 F6 |                 mov     pa, cache_end_p
3cb2c                 | .loop
3cb2c     61 01 4C FC |                 wrbyte  #0, ptra++
3cb30     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3cb34     F4 FF 9F CD |         if_b    jmp     #.loop
3cb38                 |         
3cb38                 |         if EMUPAD_MAX_PLAYER > 0
3cb38                 |         end
3cb38                 | 
3cb38                 | 
3cb38     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3cb3c                 | .regloop
3cb3c     00 EC 8F F9 |                 altd    pa
3cb40     00 00 04 F6 |                 mov     0-0, #0
3cb44     01 EC 07 F1 |                 add     pa, #1
3cb48     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3cb4c     EC FF 9F 5D |         if_nz   jmp     #.regloop
3cb50                 | 
3cb50     E1 E1 61 FF 
3cb54     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3cb58     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3cb5c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3cb60     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3cb64                 | 
3cb64     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3cb68                 | 
3cb68                 | '------------------------------------------------------------------------------
3cb68                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3cb68                 | ' function.
3cb68                 | '------------------------------------------------------------------------------
3cb68                 | ' On entry:
3cb68                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3cb68                 | '   hpar2 - index number of the target interface.
3cb68                 | ' On exit:
3cb68                 | '------------------------------------------------------------------------------
3cb68                 | hset_idle
3cb68     A9 99 02 F6 |                 mov     hctwait, _2ms_
3cb6c     EF 02 A0 FD |                 call    #poll_waitx
3cb70     CC 0A D0 FE |                 loc     ptra, #set_idle
3cb74     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]
3cb78     02 91 57 FC |                 wrword  hpar2, ptra[wIndex]
3cb7c     A0 02 80 FD |                 jmp     #control_write
3cb80                 | 
3cb80                 | '------------------------------------------------------------------------------
3cb80                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3cb80                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3cb80                 | '------------------------------------------------------------------------------
3cb80                 | ' On entry:
3cb80                 | '   ep_addr_pid - device address and enpoint for the request.
3cb80                 | ' On exit:
3cb80                 | '   retval - transaction result.
3cb80                 | '------------------------------------------------------------------------------
3cb80                 | hset_kbdled_report
3cb80     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3cb84     C0 0A D0 FE |                 loc     ptra, #set_report
3cb88     01 00 80 FF 
3cb8c     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3cb90     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3cb94     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3cb98     27 EF 03 F6 |                 mov     pb, urx_buff_p
3cb9c     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3cba0     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3cba4                 | 
3cba4                 | '------------------------------------------------------------------------------
3cba4                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3cba4                 | '------------------------------------------------------------------------------
3cba4                 | ' On entry:
3cba4                 | ' On exit:
3cba4                 | '------------------------------------------------------------------------------
3cba4                 | hget_kbd_in_report
3cba4     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3cba8     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3cbac     30 93 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3cbb0     39 93 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3cbb4     CF 02 A0 FD |                 call    #do_int_in
3cbb8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cbbc     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3cbc0                 | 
3cbc0     00 92 0F F2 |                 cmp     hpar3, #0               wz
3cbc4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3cbc8                 | 
3cbc8     30 73 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3cbcc     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3cbd0     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3cbd4     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3cbd8                 | 
3cbd8     C9 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3cbdc     18 00 B0 FD |                 call    #hkbd_compare
3cbe0                 |         if EMUPAD_MAX_PLAYER > 0
3cbe0                 |         end
3cbe0                 | 
3cbe0                 | .led_check
3cbe0     3B 73 03 F6 |                 mov     htmp, kb_led_states
3cbe4     B9 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3cbe8     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3cbec     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3cbf0     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3cbf4     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3cbf8                 | 
3cbf8                 | '------------------------------------------------------------------------------
3cbf8                 | ' Compare current and previous keyboard data buffers for keypress changes.
3cbf8                 | '------------------------------------------------------------------------------
3cbf8                 | hkbd_compare
3cbf8     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3cbfc     D0 13 F0 FE |                 loc     ptrb, #hkbd_report
3cc00     61 75 07 FB |                 rdlong  htmp1, ptra++
3cc04     E1 77 07 FB |                 rdlong  htmp2, ptrb++
3cc08     BB 75 0B F2 |                 cmp     htmp1, htmp2    wz
3cc0c     61 75 07 FB |                 rdlong  htmp1, ptra++
3cc10     E1 77 07 FB |                 rdlong  htmp2, ptrb++
3cc14     BB 75 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3cc18     2D 00 64 AD |         if_z    ret
3cc1c                 | 
3cc1c     B0 13 D0 FE |                 loc     ptra, #hkbd_report
3cc20                 | 
3cc20                 |                 ' Handle modifiers
3cc20     27 91 C3 FA |                 rdbyte  hpar2, urx_buff_p
3cc24     00 89 C7 FA |                 rdbyte  hr1, ptra
3cc28     C8 89 43 F9 |                 rolword hr1,hpar2,#0
3cc2c     63 88 63 FD |                 mergew  hr1
3cc30     08 EC 07 F6 |                 mov     pa,#8
3cc34                 | .modloop
3cc34     6A 88 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3cc38     E8 8E 07 F6 |                 mov     hpar1,#$E8
3cc3c     F6 8F 83 F1 |                 sub     hpar1,pa
3cc40     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3cc44     FB ED 6F FB |                 djnz    pa,#.modloop
3cc48                 | 
3cc48     6F E0 75 FD | .release        modc    _set    wc
3cc4c                 |                 'alts    hdev_port, #hid_report_p
3cc4c                 |                 'mov     ptra, hid_report_p
3cc4c     02 F0 07 F1 |                 add     ptra, #2
3cc50     06 EC 07 F6 |                 mov     pa, #6
3cc54     61 8F CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3cc58     20 00 90 AD |         if_z    jmp     #.rl3
3cc5c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3cc60     02 F2 07 F1 |                 add     ptrb, #2
3cc64     06 EE 07 F6 |                 mov     pb, #6
3cc68     E1 73 C7 FA | .rl2            rdbyte  htmp, ptrb++
3cc6c     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
3cc70     08 00 90 AD |         if_z    jmp     #.rl3
3cc74     FC EF 6F FB |                 djnz    pb, #.rl2
3cc78     68 00 B0 FD |                 call    #hkbd_translate
3cc7c     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3cc80                 | 
3cc80     00 92 07 F6 |                 mov     hpar3, #0
3cc84     1F 92 27 F4 |                 bith    hpar3, #31
3cc88                 | 
3cc88     6F 00 74 FD | .press          modc    _clr    wc
3cc8c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3cc90     02 F0 07 F1 |                 add     ptra, #2
3cc94     06 EC 07 F6 |                 mov     pa, #6
3cc98     61 8F CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3cc9c     20 00 90 AD |         if_z    jmp     #.pl3
3cca0     2C 13 F0 FE |                 loc     ptrb, #hkbd_report
3cca4     02 F2 07 F1 |                 add     ptrb, #2
3cca8     06 EE 07 F6 |                 mov     pb, #6
3ccac     E1 73 C7 FA | .pl2            rdbyte  htmp, ptrb++
3ccb0     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
3ccb4     08 00 90 AD |         if_z    jmp     #.pl3
3ccb8     FC EF 6F FB |                 djnz    pb, #.pl2
3ccbc     24 00 B0 FD |                 call    #hkbd_translate
3ccc0     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3ccc4                 | 
3ccc4     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3ccc8     04 13 F0 FE |                 loc     ptrb, #hkbd_report
3cccc     28 02 64 FD |                 setq #1
3ccd0     61 75 07 FB |                 rdlong  htmp1, ptra++
3ccd4     28 02 64 FD |                 setq #1
3ccd8     E1 75 67 FC |                 wrlong  htmp1, ptrb++
3ccdc     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3cce0                 | 
3cce0     2D 00 64 FD |                 ret
3cce4                 | 
3cce4                 | '------------------------------------------------------------------------------
3cce4                 | ' Translate keyboard scancode to ASCII
3cce4                 | '------------------------------------------------------------------------------
3cce4                 | ' On entry:
3cce4                 | '   hpar1 - scancode
3cce4                 | '   hpar2 - key modifiers state
3cce4                 | '       c - pressed (0) or released (1) flag
3cce4                 | ' On exit:
3cce4                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3cce4                 | '               30..17 = unused
3cce4                 | '                   18 = scroll-lock state 
3cce4                 | '                   17 = caps-lock state
3cce4                 | '                   16 = num-lock state 
3cce4                 | '                15..8 = key modifiers state
3cce4                 | '                 7..0 = scancode
3cce4                 | '------------------------------------------------------------------------------
3cce4                 | hkbd_translate
3cce4     39 8E 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3cce8     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3ccec     53 8E 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3ccf0     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3ccf4     47 8E 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3ccf8     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3ccfc                 | 
3ccfc                 |         if EMUPAD_MAX_PLAYER > 0
3ccfc                 | 
3ccfc                 |         if EMUPAD_BT0_BIT >= 0
3ccfc                 |         end
3ccfc                 |         if EMUPAD_BT1_BIT >= 0
3ccfc                 |         end
3ccfc                 |         if EMUPAD_BT2_BIT >= 0
3ccfc                 |         end
3ccfc                 |         if EMUPAD_BT3_BIT >= 0
3ccfc                 |         end
3ccfc                 |         if EMUPAD_BT4_BIT >= 0
3ccfc                 |         end
3ccfc                 |         if EMUPAD_BT5_BIT >= 0
3ccfc                 |         end
3ccfc                 |         if EMUPAD_BT6_BIT >= 0
3ccfc                 |         end
3ccfc                 |         if EMUPAD_BT7_BIT >= 0
3ccfc                 |         end
3ccfc                 |         if EMUPAD_BT8_BIT >= 0
3ccfc                 |         end
3ccfc                 |         if EMUPAD_BT9_BIT >= 0
3ccfc                 |         end
3ccfc                 | 
3ccfc                 |         end
3ccfc     C8 8F CB F8 |                 setbyte hpar1, hpar2, #1
3cd00     7C 8F D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3cd04     1F 8E 47 F4 |                 bitc    hpar1, #31
3cd08                 |         if KEYQUEUE_SIZE > 0
3cd08     C0 09 B0 FE |                 loc pb,#keyq_head
3cd0c     F7 73 E3 FA |                 rdword htmp,pb
3cd10     B9 75 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3cd14     B9 73 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3cd18     B9 77 03 F6 |                 mov htmp2,htmp
3cd1c     04 76 07 FA |                 mul htmp2,#4
3cd20     F7 77 03 F1 |                 add htmp2,pb
3cd24     02 76 07 F1 |                 add htmp2,#2
3cd28     7F 72 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3cd2c     B9 75 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3cd30     BB 8F 63 5C |         if_nz   wrlong hpar1,htmp2
3cd34     F7 73 43 5C |         if_nz   wrbyte htmp,pb
3cd38                 |         end
3cd38     2D 00 7C FD |                 ret wcz
3cd3c                 | 
3cd3c                 | if HAVE_MOUSE
3cd3c                 | '------------------------------------------------------------------------------
3cd3c                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3cd3c                 | '------------------------------------------------------------------------------
3cd3c                 | ' On entry:
3cd3c                 | ' On exit:
3cd3c                 | '------------------------------------------------------------------------------
3cd3c                 | hget_mouse_in_report
3cd3c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3cd40     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3cd44     30 93 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3cd48     36 93 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3cd4c     CF 02 A0 FD |                 call    #do_int_in
3cd50     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cd54     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3cd58                 | 
3cd58     00 92 0F F2 |                 cmp     hpar3, #0               wz
3cd5c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3cd60                 | 
3cd60     30 73 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3cd64     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3cd68     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3cd6c     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3cd70                 | 
3cd70                 |         'debug(uhex_byte_array(urx_buff_p,hpar3))
3cd70                 | 
3cd70                 |         if MOUSE_FULL_PROTOCOL
3cd70     C8 00 B0 FD |                 call #hid_decode
3cd74                 |         else
3cd74                 |         end
3cd74                 | 
3cd74     48 09 90 FE |                 loc     pa, #mouse_limits
3cd78     5D 13 F0 FE |                 loc     ptrb, #mouse_xacc
3cd7c                 | 
3cd7c                 |                 ' load xacc,yacc,zacc
3cd7c     28 04 64 FD |                 setq    #3-1
3cd80     80 89 07 FB |                 rdlong  hr1,ptrb
3cd84                 |                 ' load limits and outptr
3cd84     28 04 64 FD |                 setq    #3-1
3cd88     F6 75 03 FB |                 rdlong  htmp1,pa
3cd8c                 | 
3cd8c                 |         if MOUSE_FULL_PROTOCOL
3cd8c     8C 19 47 FC |                 wrbyte  hidr_buttons, ptrb[12]
3cd90                 |         else
3cd90                 |                 { ' Currently not used
3cd90                 |                 '}
3cd90                 |         end
3cd90                 | 
3cd90                 |         if MOUSE_FULL_PROTOCOL
3cd90     88 73 33 F9 |                 getword htmp, hidr_axis+0, #0
3cd94     0F 72 67 F7 |                 signx   htmp, #15
3cd98                 |         else
3cd98                 |         end
3cd98     B9 89 03 F1 |                 add     hr1,htmp
3cd9c     00 74 0F F2 |                 cmp     htmp1,#0 wz
3cda0     BA 89 63 53 |         if_ne   fles    hr1,htmp1
3cda4     00 88 47 53 |         if_ne   fges    hr1,#0
3cda8                 | 
3cda8                 |         if MOUSE_FULL_PROTOCOL
3cda8     88 73 3B F9 |                 getword htmp, hidr_axis+0, #1
3cdac     0F 72 67 F7 |                 signx   htmp, #15
3cdb0                 |         else
3cdb0                 |         end
3cdb0     B9 8B 03 F1 |                 add     hr2,htmp
3cdb4     00 76 0F F2 |                 cmp     htmp2,#0 wz
3cdb8     BB 8B 63 53 |         if_ne   fles    hr2,htmp2
3cdbc     00 8A 47 53 |         if_ne   fges    hr2,#0
3cdc0                 |                 
3cdc0                 |         if MOUSE_FULL_PROTOCOL
3cdc0     8B 73 3B F9 |                 getword htmp, hidr_axis+3, #1           ' Mouse wheel is actually on the "wheel axis"
3cdc4     0F 72 67 F7 |                 signx   htmp, #15
3cdc8     B9 8D 03 F1 |                 add     hr3, htmp
3cdcc                 |         else    
3cdcc                 |         end
3cdcc                 | 
3cdcc     90 73 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3cdd0     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3cdd4                 | 
3cdd4                 |                 ' write back accumulators
3cdd4     28 04 64 FD |                 setq    #3-1
3cdd8     80 89 67 FC |                 wrlong  hr1,ptrb
3cddc                 |                 ' if outptr set, write X/Y words
3cddc     00 78 0F F2 |                 cmp htmp3,#0                    wz
3cde0     C5 89 2B 59 |         if_nz   setword hr1,hr2,#1
3cde4     BC 89 63 5C |         if_nz   wrlong hr1,htmp3
3cde8     2D 00 64 FD |                 ret
3cdec                 | end
3cdec                 | 
3cdec                 | '------------------------------------------------------------------------------
3cdec                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3cdec                 | '------------------------------------------------------------------------------
3cdec                 | ' On entry:
3cdec                 | ' On exit:
3cdec                 | '------------------------------------------------------------------------------
3cdec                 | if _HAVE_GAMEPAD
3cdec                 | hget_gp_in_report
3cdec     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3cdf0     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3cdf4                 | 
3cdf4     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3cdf8     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3cdfc     00 92 E3 F8 |                 getbyte hpar3
3ce00     FF 92 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3ce04     CF 02 A0 FD |                 call    #do_int_in
3ce08     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ce0c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3ce10                 | 
3ce10     00 92 0F F2 |                 cmp     hpar3, #0               wz
3ce14     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3ce18                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3ce18                 | 
3ce18     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3ce1c     00 72 E3 F8 |                 getbyte htmp                            ' |
3ce20     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3ce24     4B 72 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3ce28     C3 72 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3ce2c     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3ce30     B9 01 C0 F8 |                 setbyte htmp                            ' |
3ce34                 | 
3ce34                 | ' Note: the following code compares the current and previous reports
3ce34                 | ' and process the data if there are changes to ease the debug output.
3ce34                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3ce34                 | ' gpPreReport buffer.
3ce34                 | 
3ce34                 |                 ' ----- start of block to remove
3ce34                 |                 {
3ce34                 |                 }
3ce34                 |                 ' ----- end of block to remove
3ce34     14 05 90 FE |                 loc pa,#hpad_translate
3ce38     2A EC 63 FD |                 push pa
3ce3c                 | 
3ce3c                 |                 ' FALL THROUGH !!!!
3ce3c                 | end
3ce3c                 | if _HAVE_GAMEPAD || MOUSE_FULL_PROTOCOL
3ce3c                 | '------------------------------------------------------------------------------
3ce3c                 | ' Decode controller report
3ce3c                 | '------------------------------------------------------------------------------
3ce3c                 | hid_decode
3ce3c                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3ce3c     28 20 64 FD |                 setq #(hidr_end-hidr_start)-1
3ce40     00 04 00 FF 
3ce44     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3ce48                 | 
3ce48     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3ce4c                 | 
3ce4c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3ce50     00 1C E3 F8 |                 getbyte hidr_type
3ce54                 |         if _HAVE_GAMEPAD
3ce54     07 1C 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3ce58     08 03 90 AD |         if_z    jmp     #hpad_xinput
3ce5c     08 1C 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3ce60     EC 03 90 AD |         if_z    jmp     #hpad_ps3
3ce64                 |         end
3ce64     05 1C 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3ce68     04 1C 07 A6 |         if_z    mov     hidr_type,#M_READY
3ce6c     04 1C 0F F2 |                 cmp     hidr_type, #M_READY             wz
3ce70                 |                 
3ce70                 | 
3ce70                 | '------------------------------------------------------------------------------
3ce70                 | ' Handle HID controller (or mouse now
3ce70                 | ' On entry:
3ce70                 | '   ptrb - controller report
3ce70                 | '------------------------------------------------------------------------------
3ce70                 | hpad_hid
3ce70     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3ce74     F7 F1 03 F6 |                 mov     ptra, pb
3ce78     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3ce7c     00 EC 03 F6 |                 mov     pa, 0-0
3ce80                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3ce80     19 2A 3B FF 
3ce84     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3ce88                 | 
3ce88                 | .next
3ce88     00 EC 5F F2 |                 cmps    pa, #0      wcz
3ce8c     2D 00 7C ED |         if_be   ret     wcz
3ce90                 | 
3ce90     61 8F C7 FA |                 rdbyte  hpar1, ptra++
3ce94     01 EC 87 F1 |                 sub     pa, #1
3ce98     00 90 07 F6 |                 mov     hpar2, #0
3ce9c                 | 
3ce9c     C7 73 03 F6 |                 mov     htmp, hpar1
3cea0     03 72 07 F5 |                 and     htmp, #$03
3cea4     01 72 0F F2 |                 cmp     htmp, #1    wz
3cea8     61 91 C7 AA |         if_z    rdbyte  hpar2, ptra++
3ceac     07 90 67 A7 |         if_z    signx   hpar2,#7
3ceb0     01 EC 87 A1 |         if_z    sub     pa, #1
3ceb4     02 72 0F F2 |                 cmp     htmp, #2    wz
3ceb8     61 91 E7 AA |         if_z    rdword  hpar2, ptra++
3cebc     0F 90 67 A7 |         if_z    signx   hpar2,#15
3cec0     02 EC 87 A1 |         if_z    sub     pa, #2
3cec4     03 72 0F F2 |                 cmp     htmp, #3    wz
3cec8     61 91 07 AB |         if_z    rdlong  hpar2, ptra++
3cecc     04 EC 87 A1 |         if_z    sub     pa, #4
3ced0                 | 
3ced0     FC 8E 07 F5 |                 and     hpar1, #$FC
3ced4                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3ced4                 | 
3ced4     84 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3ced8     18 01 90 AD |         if_z    jmp     #.report_id
3cedc     04 8E 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3cee0     30 01 90 AD |         if_z    jmp     #.usage_page
3cee4     08 8E 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3cee8     38 01 90 AD |         if_z    jmp     #.usage
3ceec     14 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3cef0     C8 2B 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3cef4     24 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3cef8     C8 2B 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3cefc     34 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3cf00     C8 2D 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3cf04     44 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3cf08     C8 2D 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3cf0c     74 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3cf10     C8 27 03 A6 |         if_z    mov     hidr_size, hpar2
3cf14     94 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3cf18     C8 29 03 A6 |         if_z    mov     hidr_count, hpar2
3cf1c     B4 8E 1F F2 |                 cmp     hpar1, #HID_POP wcz
3cf20     A4 8E 0F 52 |         if_nz   cmp     hpar1, #HID_PUSH wz
3cf24     64 01 90 AD |         if_z    jmp     #.pushpop ' Entering with C set if PUSH  
3cf28     80 8E 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3cf2c     58 FF 9F 5D |         if_nz   jmp     #.next
3cf30                 | 
3cf30     D5 25 A7 FB |                 tjf     hidr_state,#.next
3cf34                 | 
3cf34     03 90 07 F5 |                 and     hpar2, #$03
3cf38     02 90 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3cf3c     18 00 90 5D |         if_nz   jmp     #.skip
3cf40                 | 
3cf40     02 24 0F F2 |                 cmp     hidr_state, #2  wz
3cf44     20 00 90 AD |         if_z    jmp     #.axes
3cf48     03 24 0F F2 |                 cmp     hidr_state, #3  wz
3cf4c     5C 00 90 AD |         if_z    jmp     #.hats
3cf50     04 24 0F F2 |                 cmp     hidr_state, #4  wz
3cf54     70 00 90 AD |         if_z    jmp     #.buttons
3cf58                 | .skip
3cf58     93 73 03 F6 |                 mov     htmp, hidr_size
3cf5c     94 73 03 FA |                 mul     htmp, hidr_count
3cf60     B9 21 03 F1 |                 add     hidr_offset, htmp
3cf64     20 FF 9F FD |                 jmp     #.next
3cf68                 | .axes
3cf68                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count),uhex_long(hidr_flags))
3cf68     87 87 53 F8 |                 getnib  hr0, hidr_flags, #2
3cf6c     94 89 03 F6 |                 mov     hr1, hidr_count
3cf70                 | .l1
3cf70     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3cf74     93 91 03 F6 |                 mov     hpar2, hidr_size
3cf78     28 01 B0 FD |                 call    #hpad_getbits
3cf7c     88 01 B0 FD |                 call    #hpad_normalize
3cf80     08 86 1F F2 |                 cmp     hr0, #8         wcz
3cf84     86 87 5F C9 |         if_b    altgn   hr0, #hidr_usage
3cf88     00 8A 43 C8 |         if_b    getnib  hr2
3cf8c     88 8B 77 C9 |         if_b    altsw   hr2, #hidr_axis
3cf90     5F 01 20 C9 |         if_b    setword retval
3cf94     01 86 07 C1 |         if_b    add     hr0, #1
3cf98     93 21 03 F1 |                 add     hidr_offset, hidr_size
3cf9c     F4 89 6F FB |                 djnz    hr1, #.l1
3cfa0                 | 
3cfa0     C3 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3cfa4     01 24 07 F6 |                 mov     hidr_state, #1
3cfa8     DC FE 9F FD |                 jmp     #.next
3cfac                 | .hats
3cfac                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3cfac     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3cfb0     93 91 03 F6 |                 mov     hpar2, hidr_size
3cfb4     EC 00 B0 FD |                 call    #hpad_getbits
3cfb8     5F 1B C3 F8 |                 setbyte hidr_hats, retval, #0
3cfbc     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3cfc0     01 24 07 F6 |                 mov     hidr_state, #1
3cfc4     90 FF 9F FD |                 jmp     #.skip
3cfc8                 | .buttons
3cfc8                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3cfc8     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3cfcc     93 91 03 F6 |                 mov     hpar2, hidr_size
3cfd0     94 91 03 FA |                 mul     hpar2, hidr_count
3cfd4     CC 00 B0 FD |                 call    #hpad_getbits
3cfd8     87 73 E3 F8 |                 getbyte htmp, hidr_flags, #0
3cfdc     B9 BF 62 F0 |                 shl     retval, htmp
3cfe0     5F 19 43 F5 |                 or      hidr_buttons, retval
3cfe4     94 73 03 F1 |                 add     htmp, hidr_count
3cfe8     B9 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3cfec     01 24 07 F6 |                 mov     hidr_state, #1
3cff0     64 FF 9F FD |                 jmp     #.skip
3cff4                 | .report_id
3cff4     00 1E 0F F2 |                 cmp     hidr_id, #0     wz
3cff8     2D 00 7C 5D |         if_nz   ret     wcz
3cffc     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
3d000                 |                 'debug(".report_id",udec(htmp,hpar2))
3d000     C8 73 0B F2 |                 cmp     htmp, hpar2     wz
3d004     B9 1F 03 A6 |         if_z    mov     hidr_id, htmp
3d008     01 24 67 56 |         if_nz   neg     hidr_state,#1
3d00c     01 F2 87 51 |         if_nz   sub     ptrb,#1
3d010     74 FE 9F FD |                 jmp     #.next
3d014                 | .usage_page
3d014     09 90 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3d018     01 24 0F A2 |         if_z    cmp     hidr_state, #1  wz
3d01c     04 24 07 A6 |         if_z    mov     hidr_state, #4
3d020     64 FE 9F FD |                 jmp     #.next
3d024                 | .usage
3d024     04 90 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3d028     05 90 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3d02c     06 1C 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3d030     01 24 07 A6 |         if_z    mov     hidr_state, #1
3d034     50 FE 9F AD |         if_z    jmp     #.next
3d038     02 90 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3d03c     04 1C 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3d040     01 24 07 A6 |         if_z    mov     hidr_state, #1
3d044     40 FE 9F AD |         if_z    jmp     #.next
3d048     30 90 17 F2 |                 cmp     hpar2, #HID_USAGE_X     wc
3d04c     38 90 97 32 |         if_nc   cmpr    hpar2, #HID_USAGE_WHEEL wc   
3d050     10 00 90 3D |         if_nc   jmp     #.usage_axis
3d054     39 90 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3d058     01 24 0F A2 |         if_z    cmp     hidr_state, #1      wz
3d05c     03 24 07 A6 |         if_z    mov     hidr_state, #3
3d060     24 FE 9F FD |                 jmp     #.next
3d064                 | .usage_axis
3d064     01 24 57 F2 |                 cmps    hidr_state, #1          wc
3d068     1C FE 9F CD |         if_b    jmp     #.next
3d06c     37 90 27 F3 |                 fle     hpar2, #HID_USAGE_DIAL   ' Let's just say wheel and dial are the same to keep sane
3d070     86 23 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3d074     C8 01 00 F8 |                 setnib  hpar2
3d078                 | 
3d078     20 90 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3d07c     C8 0F 23 F4 |                 bith    hidr_flags, hpar2
3d080                 | 
3d080     01 22 07 F1 |                 add     hidr_usage_idx, #1
3d084     02 24 07 F6 |                 mov     hidr_state, #2
3d088     FC FD 9F FD |                 jmp     #.next
3d08c                 | .pushpop
3d08c                 |                 ' Entering with C set if PUSH  
3d08c     4C 0F B0 FE |                 loc     pb, #hid_stack
3d090     28 08 64 CD |         if_c    setq    #(hidr_end-hidr_state)-1
3d094     F7 25 63 CC |         if_c    wrlong  hidr_state, pb
3d098     28 08 64 3D |         if_nc   setq    #(hidr_end-hidr_state)-1
3d09c     F7 25 03 3B |         if_nc   rdlong  hidr_state, pb
3d0a0     E4 FD 9F FD |                 jmp     #.next
3d0a4                 | 
3d0a4                 | '------------------------------------------------------------------------------
3d0a4                 | ' Read bits from report data buffer
3d0a4                 | '------------------------------------------------------------------------------
3d0a4                 | ' On entry:
3d0a4                 | '   PTRB - report buffer
3d0a4                 | '   hpar1 - start bit
3d0a4                 | '   hpar2 - number of bits
3d0a4                 | ' On exit:
3d0a4                 | '   retval - bits
3d0a4                 | '------------------------------------------------------------------------------
3d0a4                 | hpad_getbits
3d0a4     C7 73 03 F6 |                 mov     htmp, hpar1
3d0a8     03 72 47 F0 |                 shr     htmp, #3        ' byte offset
3d0ac     F9 73 03 F1 |                 add     htmp, ptrb
3d0b0     B9 BF 02 FB |                 rdlong  retval, htmp
3d0b4                 | 
3d0b4     C7 75 03 F6 |                 mov     htmp1, hpar1
3d0b8     07 74 07 F5 |                 and     htmp1, #$07     ' shift
3d0bc     BA BF 42 F0 |                 shr     retval, htmp1
3d0c0                 | 
3d0c0     18 90 1F F2 |                 cmp     hpar2, #24      wcz
3d0c4     10 00 90 1D |         if_a    jmp     #.l1
3d0c8                 | 
3d0c8     C8 91 C3 F9 |                 decod   hpar2
3d0cc     01 90 87 F1 |                 sub     hpar2, #1
3d0d0     C8 BF 02 F5 |                 and     retval, hpar2
3d0d4     2D 00 64 FD |                 ret
3d0d8                 | .l1
3d0d8     FF 7F 00 FF 
3d0dc     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3d0e0     03 72 07 F1 |                 add     htmp, #3
3d0e4     B9 77 03 FB |                 rdlong  htmp2, htmp
3d0e8     18 90 87 F1 |                 sub     hpar2, #24
3d0ec     C8 91 C3 F9 |                 decod   hpar2
3d0f0     01 90 87 F1 |                 sub     hpar2, #1
3d0f4     BA 77 43 F0 |                 shr     htmp2, htmp1
3d0f8     C8 77 03 F5 |                 and     htmp2, hpar2
3d0fc     18 76 67 F0 |                 shl     htmp2, #24
3d100     BB BF 42 F5 |                 or      retval, htmp2
3d104     2D 00 64 FD |                 ret
3d108                 | 
3d108                 | '------------------------------------------------------------------------------
3d108                 | ' Normalize value to signed word (-32768 / 32767)
3d108                 | '------------------------------------------------------------------------------
3d108                 | ' On entry:
3d108                 | '   retval - value to normalize
3d108                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3d108                 | '   - or -
3d108                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3d108                 | '   hidr_size - value bits length
3d108                 | ' On exit:
3d108                 | '   retval - normalized value
3d108                 | '------------------------------------------------------------------------------
3d108                 | hpad_normalize
3d108     95 73 0B F6 |                 mov     htmp, hidr_lminmax  wz
3d10c     96 73 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3d110     2D 00 64 AD |         if_z    ret
3d114     B9 75 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3d118     B9 73 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3d11c     0F 74 77 F7 |                 signx   htmp1, #15      wc
3d120     FF 27 97 C9 |         if_c    alts    hidr_size, #511
3d124     00 BE 66 C7 |         if_c    signx   retval, #0-0
3d128                 |                 ' slightly crappy hack: if in mouse mode, don't normalize
3d128     04 1C 0F F2 |                 cmp     hidr_type, #M_READY wz
3d12c     2D 00 64 AD |         if_z    ret
3d130     BA 73 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3d134     BA BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3d138     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3d13c     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3d140     B9 73 53 F6 |                 abs     htmp            wc
3d144     1F BE 0E F4 |                 testb   retval, #31     wz
3d148     5F BF 42 F6 |                 abs     retval
3d14c     B9 BF 12 FD |                 qdiv    retval, htmp
3d150     18 BE 62 FD |                 getqx   retval
3d154     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3d158     C0 FF 7F FF 
3d15c     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3d160     2D 00 64 FD |                 ret
3d164                 | end
3d164                 | 
3d164                 | if _HAVE_GAMEPAD
3d164                 | '------------------------------------------------------------------------------
3d164                 | ' Handle XInput controller
3d164                 | ' On entry:
3d164                 | '   ptrb - controller report
3d164                 | '------------------------------------------------------------------------------
3d164                 | '   Default implementation translates the report to a pseudo-defacto hid
3d164                 | '   standard and jumps to hpad_translate for actions.
3d164                 | '   Implementors may take specific actions for this kind of controller.
3d164                 | '------------------------------------------------------------------------------
3d164                 | hpad_xinput
3d164     80 73 CF FA |                 rdbyte  htmp, ptrb      wz
3d168     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3d16c     81 73 C7 FA |                 rdbyte  htmp, ptrb[1]
3d170     14 72 0F F2 |                 cmp     htmp, #$14      wz
3d174     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3d178                 | 
3d178                 |                 'debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3d178                 | 
3d178     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3d17c     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3d180                 | 
3d180     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3d184     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3d188     5F BF 22 F6 |                 not     retval
3d18c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3d190     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3d194     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3d198     5F BF 22 F6 |                 not     retval
3d19c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3d1a0                 | 
3d1a0     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3d1a4     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3d1a8     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3d1ac     06 18 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3d1b0     54 FF BF FD |                 call    #hpad_normalize
3d1b4     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3d1b8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3d1bc     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3d1c0     07 18 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3d1c4     40 FF BF FD |                 call    #hpad_normalize
3d1c8     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3d1cc                 | 
3d1cc     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3d1d0     81 BF E6 FA |                 rdword  retval, ptrb[1]
3d1d4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3d1d8     00 18 47 F4 |                 bitc    hidr_buttons, #0
3d1dc     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3d1e0     01 18 47 F4 |                 bitc    hidr_buttons, #1
3d1e4     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3d1e8     02 18 47 F4 |                 bitc    hidr_buttons, #2
3d1ec     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3d1f0     03 18 47 F4 |                 bitc    hidr_buttons, #3
3d1f4     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3d1f8     04 18 47 F4 |                 bitc    hidr_buttons, #4
3d1fc     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3d200     05 18 47 F4 |                 bitc    hidr_buttons, #5
3d204     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3d208     08 18 47 F4 |                 bitc    hidr_buttons, #8
3d20c     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3d210     09 18 47 F4 |                 bitc    hidr_buttons, #9
3d214     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3d218     0A 18 47 F4 |                 bitc    hidr_buttons, #10
3d21c     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3d220     0B 18 47 F4 |                 bitc    hidr_buttons, #11
3d224     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3d228     0C 18 47 F4 |                 bitc    hidr_buttons, #12
3d22c                 | 
3d22c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3d230     5F 73 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3d234     7A BB 7A FF 
3d238     0F 74 07 F6 |                 mov     htmp1, ##$F576_F40F
3d23c     F9 FF 7F FF 
3d240     12 77 07 F6 |                 mov     htmp2, ##$FFFF_F312
3d244     BA 73 5F F9 |                 altgn   htmp, #htmp1
3d248     00 72 43 F8 |                 getnib  htmp
3d24c     B9 1B C3 08 |         _ret_   setbyte hidr_hats, htmp, #0
3d250                 | 
3d250                 | '------------------------------------------------------------------------------
3d250                 | ' Handle PS3 controller
3d250                 | ' On entry:
3d250                 | '   ptrb - controller report
3d250                 | '------------------------------------------------------------------------------
3d250                 | '   Default implementation translates the report to a pseudo-defacto hid
3d250                 | '   standard and jumps to hpad_translate for actions.
3d250                 | '   Implementors may take specific actions for this kind of controller.
3d250                 | '------------------------------------------------------------------------------
3d250                 | hpad_ps3
3d250     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
3d254     01 72 0F F2 |                 cmp     htmp, #$01      wz
3d258     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3d25c                 | 
3d25c                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3d25c                 | 
3d25c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3d260     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3d264                 | 
3d264     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3d268     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3d26c     98 FE BF FD |                 call    #hpad_normalize
3d270     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3d274     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3d278     8C FE BF FD |                 call    #hpad_normalize
3d27c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3d280     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3d284     80 FE BF FD |                 call    #hpad_normalize
3d288     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3d28c     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3d290     74 FE BF FD |                 call    #hpad_normalize
3d294     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3d298     91 BF C6 FA |                 rdbyte  retval, ptrb[17]        ' RX = L2 analog
3d29c     68 FE BF FD |                 call    #hpad_normalize
3d2a0     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3d2a4     92 BF C6 FA |                 rdbyte  retval, ptrb[18]        ' RY = R2 analog
3d2a8     5C FE BF FD |                 call    #hpad_normalize
3d2ac     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3d2b0                 | 
3d2b0     08 8E 07 F6 |                 mov     hpar1, #8
3d2b4     13 90 07 F6 |                 mov     hpar2, #19
3d2b8     E8 FD BF FD |                 call    #hpad_getbits
3d2bc                 | 
3d2bc     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3d2c0     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3d2c4     00 18 47 F4 |                 bitc    hidr_buttons, #0
3d2c8     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3d2cc     01 18 47 F4 |                 bitc    hidr_buttons, #1
3d2d0     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3d2d4     02 18 47 F4 |                 bitc    hidr_buttons, #2
3d2d8     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3d2dc     03 18 47 F4 |                 bitc    hidr_buttons, #3
3d2e0     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3d2e4     04 18 47 F4 |                 bitc    hidr_buttons, #4
3d2e8     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3d2ec     05 18 47 F4 |                 bitc    hidr_buttons, #5
3d2f0     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3d2f4     06 18 47 F4 |                 bitc    hidr_buttons, #6
3d2f8     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3d2fc     07 18 47 F4 |                 bitc    hidr_buttons, #7
3d300     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3d304     08 18 47 F4 |                 bitc    hidr_buttons, #8
3d308     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3d30c     09 18 47 F4 |                 bitc    hidr_buttons, #9
3d310     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3d314     0A 18 47 F4 |                 bitc    hidr_buttons, #10
3d318     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3d31c     0B 18 47 F4 |                 bitc    hidr_buttons, #11
3d320     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3d324     0C 18 47 F4 |                 bitc    hidr_buttons, #12
3d328                 | 
3d328     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3d32c     5F 73 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3d330     09 FA 79 FF 
3d334     0F 74 07 F6 |                 mov     htmp1, ##$F3F4_120F
3d338     FF FA 7F FF 
3d33c     76 77 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3d340     BA 73 5F F9 |                 altgn   htmp, #htmp1
3d344     00 72 43 F8 |                 getnib  htmp
3d348     B9 1B C3 08 |         _ret_   setbyte hidr_hats, htmp, #0
3d34c                 | 
3d34c                 | 
3d34c                 | '------------------------------------------------------------------------------
3d34c                 | ' Perform controller actions
3d34c                 | ' On entry:
3d34c                 | '    hidr_id        report id
3d34c                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3d34c                 | '                      X = hidr_axis+0, #0
3d34c                 | '                      Y = hidr_axis+0, #1
3d34c                 | '                      Z = hidr_axis+1, #0
3d34c                 | '                     RX = hidr_axis+1, #1
3d34c                 | '                     RY = hidr_axis+2, #0
3d34c                 | '                     RZ = hidr_axis+2, #1
3d34c                 | '                     Sl = hidr_axis+3, #0
3d34c                 | '                     Wh = hidr_axis+3, #1
3d34c                 | '    hidr_buttons   buttons state (bits 0 to 31)
3d34c                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3d34c                 | '
3d34c                 | '                     -------3 -------2 -------1 -------0 byte
3d34c                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3d34c                 | '    hidr_flags       xxxxxxxx_wsrrrzyx_hhhhaaaa_bbbbbbbb
3d34c                 | '                              hlzyx||| |||||||| ++++++++ n. buttons
3d34c                 | '                              |||||||| ||||++++--------- n. axes
3d34c                 | '                              |||||||| ++++------------- n. hats
3d34c                 | '                              ++++++++------------------ valid axes
3d34c                 | '------------------------------------------------------------------------------
3d34c                 | hpad_translate
3d34c                 | 
3d34c                 | 
3d34c                 |         if HAVE_HIDPAD
3d34c     A0 0C F0 FE |                 loc     ptrb,#hidpad_report
3d350     2D 73 0B F6 |                 mov     htmp,hdev_port          wz
3d354     8F 73 03 A6 |         if_z    mov     htmp,hidr_id
3d358     01 72 E7 F2 |                 cmpsub  htmp,#1
3d35c     07 1E 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3d360     02 1E 17 52 |         if_nz   cmp     hidr_id, #2             wc
3d364     2D 00 7C 3D |         if_ae   ret     wcz
3d368     20 72 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3d36c     B9 F3 03 F1 |                 add     ptrb,htmp
3d370     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3d374     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3d378     28 0E 64 FD |                 setq    #8-1
3d37c     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3d380                 |         end
3d380                 | 
3d380                 | 
3d380                 |         if EMUPAD_MAX_PLAYER > 0
3d380                 | .emupad_no_hat
3d380                 |         if EMUPAD_BT0_BIT >= 0
3d380                 |         end
3d380                 |         if EMUPAD_BT1_BIT >= 0
3d380                 |         end
3d380                 |         if EMUPAD_BT2_BIT >= 0
3d380                 |         end
3d380                 |         if EMUPAD_BT3_BIT >= 0
3d380                 |         end
3d380                 |         if EMUPAD_BT4_BIT >= 0
3d380                 |         end
3d380                 |         if EMUPAD_BT5_BIT >= 0
3d380                 |         end
3d380                 |         if EMUPAD_BT6_BIT >= 0
3d380                 |         end
3d380                 |         if EMUPAD_BT7_BIT >= 0
3d380                 |         end
3d380                 |         if EMUPAD_BT8_BIT >= 0
3d380                 |         end
3d380                 |         if EMUPAD_BT9_BIT >= 0
3d380                 |         end
3d380                 | .emupad_slot_over
3d380                 |         end
3d380                 | 
3d380                 |         if 0
3d380                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3d380                 | 
3d380                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3d380                 | 
3d380                 |         end
3d380     2D 00 64 FD |                 ret
3d384                 | end
3d384                 | 
3d384                 | if EMUPAD_MAX_PLAYER > 0
3d384                 | '------------------------------------------------------------------------------
3d384                 | ' Clear EmuPad state
3d384                 | '------------------------------------------------------------------------------
3d384                 | emupad_reset
3d384                 | 
3d384                 | '------------------------------------------------------------------------------
3d384                 | ' Get EmuPad Player number for current device (into retval)
3d384                 | ' Z flag is also set if current device is valid
3d384                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3d384                 | '------------------------------------------------------------------------------
3d384                 | emupad_getnum
3d384                 | .loop
3d384                 | '------------------------------------------------------------------------------
3d384                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3d384                 | '------------------------------------------------------------------------------
3d384                 | emupad_discon
3d384                 | .loop         
3d384                 |         
3d384                 |         ' FALL THROUGH!!!
3d384                 | 
3d384                 | '------------------------------------------------------------------------------
3d384                 | ' Update EmuPad reports (all of them...)
3d384                 | '------------------------------------------------------------------------------
3d384                 | emupad_write_reports
3d384                 | .devloop
3d384                 | 
3d384                 | end
3d384                 | 
3d384                 | 
3d384                 | '------------------------------------------------------------------------------
3d384                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3d384                 | '------------------------------------------------------------------------------
3d384                 | ' On entry:
3d384                 | ' On exit:
3d384                 | '------------------------------------------------------------------------------
3d384                 | hget_hub_status
3d384     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3d388     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3d38c     32 93 23 F9 |                 setword hpar3, hub_next_datax, #0
3d390     01 92 2F F9 |                 setword hpar3, #1, #1
3d394     CF 02 A0 FD |                 call    #do_int_in
3d398     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d39c     0C 00 90 AD |         if_z    jmp     #.data
3d3a0     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3d3a4     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3d3a8     2D 00 64 FD |                 ret
3d3ac                 | .data
3d3ac     00 92 0F F2 |                 cmp     hpar3, #0               wz
3d3b0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3d3b4                 | 
3d3b4     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3d3b8     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3d3bc     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3d3c0     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3d3c4                 |                 debug(ubin_long(hub_status_chg))
3d3c4                 | 
3d3c4     01 5A 06 F6 |                 mov     hdev_port, #1
3d3c8                 | .loop
3d3c8     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3d3cc     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3d3d0     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3d3d4     F0 FF 9F 3D |         if_nc   jmp     #.loop
3d3d8     2D 00 64 FD |                 ret
3d3dc                 | 
3d3dc                 | hub_port_handler
3d3dc     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3d3e0     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d3e4     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d3e8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d3ec     55 02 A0 FD |                 call    #control_read
3d3f0     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3d3f4                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3d3f4                 | 
3d3f4     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3d3f8     50 01 90 5D |         if_x0   jmp     #.other
3d3fc     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3d400     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3d404     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d408     A0 02 A0 FD |                 call    #control_write
3d40c     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3d410     7C 01 90 5D |         if_x0   jmp     #.disconnect
3d414     B1 99 02 F6 |                 mov     hctwait, _100ms_
3d418     EF 02 A0 FD |                 call    #poll_waitx
3d41c                 | 
3d41c     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3d420     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3d424     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d428     A0 02 A0 FD |                 call    #control_write
3d42c                 | 
3d42c     02 78 07 F6 |                 mov     htmp3, #2
3d430                 | .wait_reset
3d430     AD 99 02 F6 |                 mov     hctwait, _8ms_
3d434     EF 02 A0 FD |                 call    #poll_waitx
3d438     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d43c     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d440     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d444     55 02 A0 FD |                 call    #control_read
3d448     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3d44c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3d450     F7 79 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3d454                 | 
3d454     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3d458     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3d45c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d460     A0 02 A0 FD |                 call    #control_write
3d464                 | 
3d464     24 72 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3d468                 | .wait_recover
3d468     A8 99 02 F6 |                 mov     hctwait, _1ms_
3d46c     EF 02 A0 FD |                 call    #poll_waitx
3d470     FD 73 6F FB |                 djnz    htmp,#.wait_recover
3d474                 | 
3d474     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3d478     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3d47c     0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3d480                 | 
3d480     00 08 00 FF 
3d484     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3d488     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3d48c     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3d490     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3d494     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3d498     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d49c     48 01 90 5D |         if_nz   jmp     #.done
3d4a0                 | .get_dev_desc
3d4a0     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3d4a4     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3d4a8     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3d4ac     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3d4b0     2D 73 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3d4b4     01 73 57 FC |                 wrword  htmp, ptra[wValue]
3d4b8     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3d4bc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d4c0     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3d4c4     AD 99 02 F6 |                 mov     hctwait, _8ms_
3d4c8     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3d4cc     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3d4d0     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3d4d4     BE 00 A0 FD |                 call    #calc_crc5
3d4d8     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3d4dc     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3d4e0     F7 AD C2 FA |                 rdbyte  total_data, pb
3d4e4     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3d4e8     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3d4ec     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d4f0     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3d4f4     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3d4f8     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3d4fc                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3d4fc     A0 99 02 F6 |                 mov     hctwait, _500us_
3d500     EF 02 A0 FD |                 call    #poll_waitx
3d504     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3d508     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3d50c     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3d510     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3d514     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d518     CC 00 90 5D |         if_nz   jmp     #.done
3d51c     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3d520     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3d524     61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3d528     61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3d52c     00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3d530     09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3d534     02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3d538     56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
3d53c     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3d540     A4 00 90 CD |         if_b    jmp     #.done
3d544     68 F0 BF FD |                 call    #hparse_con_desc
3d548     9C 00 90 FD |                 jmp     #.done
3d54c                 | 
3d54c                 | .other
3d54c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3d550     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3d554     28 00 90 AD |         if_x1   jmp     #.reset_feature
3d558     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3d55c     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3d560     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3d564     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3d568     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3d56c     10 00 90 AD |         if_x1   jmp     #.reset_feature
3d570     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3d574     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3d578     04 00 90 AD |         if_x1   jmp     #.reset_feature
3d57c     68 00 90 FD |                 jmp     #.done
3d580                 | .reset_feature
3d580     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3d584     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d588     A0 02 A0 FD |                 call    #control_write
3d58c     58 00 90 FD |                 jmp     #.done
3d590                 | .disconnect
3d590                 | 
3d590     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3d594     00 72 E3 F8 |                 getbyte htmp
3d598     03 72 0F F2 |                 cmp     htmp,#KB_READY wz
3d59c     05 72 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3d5a0     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3d5a4     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3d5a8     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3d5ac     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3d5b0                 |         if EMUPAD_MAX_PLAYER > 0
3d5b0                 |         end
3d5b0                 |         if HAVE_MOUSE
3d5b0     04 72 0F F2 |                 cmp     htmp, #M_READY          wz
3d5b4     05 72 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3d5b8     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3d5bc                 |         end
3d5bc                 |         if HAVE_HIDPAD
3d5bc     30 0A F0 FE |                 loc ptrb,#hidpad_report
3d5c0     2D 73 03 F6 |                 mov htmp,hdev_port
3d5c4     01 72 E7 F2 |                 cmpsub htmp,#1
3d5c8     20 72 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3d5cc     B9 F3 03 F1 |                 add ptrb,htmp
3d5d0     28 0E 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3d5d4     80 01 6C FC |                 wrlong #0,ptrb
3d5d8                 |         end
3d5d8                 | 
3d5d8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3d5dc     00 00 C4 F8 |                 setbyte #0
3d5e0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3d5e4     00 00 04 F6 |                 mov     0-0, #0
3d5e8                 | 
3d5e8                 | .done
3d5e8     0E 6A 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3d5ec     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3d5f0     22 6F 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3d5f4     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3d5f8     A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3d5fc     A4 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3d600                 | 
3d600     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d604     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d608     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d60c     55 02 A0 FD |                 call    #control_read
3d610     00 69 06 FB |                 rdlong  hub_port_status, ptra
3d614                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3d614     2D 00 64 FD |                 ret
3d618                 | 
3d618                 | '------------------------------------------------------------------------------
3d618                 | ' Partially populated SETUP packets
3d618                 | '------------------------------------------------------------------------------
3d618     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d619     06          |                 byte    REQ_GET_DESC
3d61a     00 01       |                 word    TYPE_DEVICE << 8
3d61c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d61e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d620     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d621     06          |                 byte    REQ_GET_DESC
3d622     00 02       |                 word    TYPE_CONFIG << 8
3d624     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d626     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d628     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3d629     09          |                 byte    REQ_SET_CONFIG
3d62a     00 00       |                 word    0       ' Configuration value
3d62c     00 00       |                 word    0       ' Zero
3d62e     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3d630     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3d631     05          |                 byte    REQ_SET_ADDR
3d632     00 00       |                 word    0       ' Zero
3d634     00 00       |                 word    0       ' Zero
3d636     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3d638                 | '------------------------------------------------------------------------------
3d638                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3d638                 | ' wValue field dictates which protocol should be used.
3d638                 | '
3d638                 | ' When initialized, all devices default to report protocol. However the host
3d638                 | ' should not make any assumptions about the device state and should set the
3d638                 | ' desired protocol whenever initializing a device.
3d638                 | '------------------------------------------------------------------------------
3d638     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d639     0B          |                 byte    HID_SET_PROTO
3d63a     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3d63c                 |                                                 ' (HID 1.11 Section 7.2.6).
3d63c     00 00       |                 word    0               ' Interface index number.
3d63e     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3d640                 | '------------------------------------------------------------------------------
3d640     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d641     0A          |                 byte    HID_SET_IDLE
3d642     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3d644                 |                                         ' reporting until a change is detected in the report data
3d644                 | 
3d644                 |                                         ' (HID 1.11 Section 7.2.4).
3d644     00 00       |                 word    0       ' Interface index number.
3d646     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3d648     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d649     09          |                 byte    HID_SET_REPORT
3d64a     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3d64c                 |                                         ' (HID 1.11 Section 7.2.2).
3d64c     00 00       |                 word    0       ' Interface index number.
3d64e     00 00       |                 word    0       ' Size of the report, in bytes.
3d650     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3d651     06          |                 byte    REQ_GET_DESC
3d652     00 22       |                 word    TYPE_REPORT << 8
3d654     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d656     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d658                 | '------------------------------------------------------------------------------
3d658     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3d659     06          |                 byte    REQ_GET_DESC
3d65a     00 29       |                 word    TYPE_HUB << 8
3d65c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d65e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d660     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3d661     03          |                 byte    REQ_SET_FEATURE
3d662     00 00       |                 word    0       ' port power
3d664     01 00       |                 word    1       ' Port index number (1+)
3d666     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d668     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3d669     01          |                 byte    REQ_CLEAR_FEATURE
3d66a     00 00       |                 word    0       ' port power
3d66c     01 00       |                 word    1       ' Port index number (1+)
3d66e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d670     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3d671     00          |                 byte    REQ_GET_STATUS
3d672     00 00       |                 word    0
3d674     01 00       |                 word    1       ' Port index number (1+)
3d676     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3d678                 | '------------------------------------------------------------------------------
3d678                 | if _HAVE_GAMEPAD
3d678     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3d67c                 | ps3_command_buff
3d67c     00 00 00 00 
3d680     00          |                 byte    $00, $00, $00, $00, $00
3d681     00 00 00 00 
3d685     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3d686     FF 27 10 00 
3d68a     32          |                 byte    $FF, $27, $10, $00, $32
3d68b     FF 27 10 00 
3d68f     32          |                 byte    $FF, $27, $10, $00, $32
3d690     FF 27 10 00 
3d694     32          |                 byte    $FF, $27, $10, $00, $32
3d695     FF 27 10 00 
3d699     32          |                 byte    $FF, $27, $10, $00, $32
3d69a     00 00 00 00 
3d69e     00          |                 byte    $00, $00, $00, $00, $00
3d69f     00 00 00 00 
3d6a3     00          |                 byte    $00, $00, $00, $00, $00
3d6a4     00 00 00 00 
3d6a8     00          |                 byte    $00, $00, $00, $00, $00
3d6a9     00 00 00    |                 byte    $00, $00, $00
3d6ac                 | '------------------------------------------------------------------------------
3d6ac     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3d6af                 |                                         ' 0x01 All blinking
3d6af                 |                                         ' 0x02 1 flashes, then on
3d6af                 |                                         ' 0x03 2 flashes, then on
3d6af                 |                                         ' 0x04 3 flashes, then on
3d6af                 |                                         ' 0x05 4 flashes, then on
3d6af                 |                                         ' 0x06 1 on
3d6af                 |                                         ' 0x07 2 on
3d6af                 |                                         ' 0x08 3 on
3d6af                 |                                         ' 0x09 4 on
3d6af                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3d6af                 |                                         ' 0x0B Blinking*
3d6af                 |                                         ' 0x0C Slow blinking*
3d6af                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3d6af     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3d6b2     00          |                 byte    $00             ' Left rumble
3d6b3     00          |                 byte    $00             ' Right rumble
3d6b4     00 00 00    |                 byte    $00, $00, $00
3d6b7                 | 
3d6b7                 | xinp_fix_8bitdo '' This inexplicable String request (that WILL fail) somehow un-bugs the terrible firmware
3d6b7                 |                 '' of certain wired 8bitdo gamepads.
3d6b7     80          |                 byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d6b8     06          |                 byte    REQ_GET_DESC
3d6b9     04 03       |                 word    TYPE_STRING << 8 + 4
3d6bb     09 04       |                 word    $0409   ' Zero or Language ID (Section 9.6.7)
3d6bd     02 00       |                 word    2       ' Number of bytes to transfer if there is a data stage
3d6bf     00          | end
3d6c0                 | alignl
3d6c0                 | 
3d6c0                 | if HAVE_MOUSE
3d6c0     00 00 00 00 
3d6c4     00 00 00 00 | mouse_limits long 0[2]
3d6c8     00 00 00 00 | mouse_outptr long 0
3d6cc                 | end
3d6cc                 | 
3d6cc                 | if KEYQUEUE_SIZE > 0
3d6cc     00          | keyq_head byte 0
3d6cd     00          | keyq_tail byte 0
3d6ce     00 00 00 00 
      ...             
3d8ca     00 00 00 00 
3d8ce     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3d8d0                 | alignl
3d8d0                 | end
3d8d0                 | 
3d8d0                 | if EMUPAD_MAX_PLAYER > 0
3d8d0                 | emupad_rule_buffer
3d8d0                 | if EMUPAD_BUILTIN_RULES
3d8d0                 | file "padmap_builtin.dat"
3d8d0                 | end
3d8d0                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3d8d0                 | '' Default rule directly follows!
3d8d0                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3d8d0                 | end
3d8d0                 | 
3d8d0                 | '------------------------------------------------------------------------------
3d8d0                 | ' The USB data cache area gets zero-filled at every device disconnect
3d8d0                 | '------------------------------------------------------------------------------
3d8d0                 | usb_cache_start
3d8d0                 | 
3d8d0                 | ' HID descriptor and report buffers
3d8d0                 | if !!OVERLAP_MEMORY
3d8d0     00 00 00 00 
      ...             
3dfc8     00 00 00 00 
3dfcc     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3dfd0                 | end
3dfd0     00 00 00 00 
3dfd4     00 00 00 00 | hkbd_report     byte    0[8]
3dfd8     00 00 00 00 | hkbd_led_rep    byte    0
3dfdc                 | alignl
3dfdc                 | 
3dfdc     00 00 00 00 
3dfe0     00 00 00 00 
3dfe4     00 00 00 00 
3dfe8     00 00 00 00 
3dfec     00 00 00 00 | hid_stack       long 0[(hidr_end - hidr_state) * 1]
3dff0                 | 
3dff0                 | if HAVE_HIDPAD
3dff0     00 00 00 00 
      ...             
3e0c8     00 00 00 00 
3e0cc     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3e0d0                 | end
3e0d0                 | 
3e0d0                 | ' HUB descriptor
3e0d0     00          | hub_descr       byte    0   ' bDescLength
3e0d1     00          |                 byte    0   ' bDescriptorType
3e0d2     00          |                 byte    0   ' bNbrPorts
3e0d3     00 00       |                 word    0   ' wHubCharacteristics
3e0d5     00          |                 byte    0   ' bPwrOn2PwrGood
3e0d6     00          |                 byte    0   ' bHubContrCurrent
3e0d7     00          |                 byte    0   ' DeviceRemoveable
3e0d8     00          |                 byte    0   ' PortPwrCtrlMask
3e0d9                 | 
3e0d9                 | usb_cache_end
3e0d9                 | 
3e0d9                 | if HAVE_MOUSE
3e0d9     00 00 00 00 | mouse_xacc      long 0
3e0dd     00 00 00 00 | mouse_yacc      long 0
3e0e1     00 00 00 00 | mouse_zacc      long 0
3e0e5     00          | mouse_bstate    byte 0
3e0e6     00          | mouse_lpending  byte 0
3e0e7     00          | mouse_rpending  byte 0
3e0e8     00          | mouse_mpending  byte 0
3e0e9     00          | mouse_lock      byte 0
3e0ea     00 00 00    |                 byte 0[3] ' padding
3e0ed                 | end
3e0ed                 | 
3e0ed     00 00 00 00 
      ...             
3e165     00 00 00 00 
3e169     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3e16d     00 00 00 00 
3e171     00 00 00 00 
3e175     00 00 00 00 
3e179     00 00 00 00 
3e17d     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3e17f     00 00 00 00 
      ...             
3e277     00 00 00 00 
3e27b     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3e27f                 | 
3e27f     00          | driver_cog      byte    0                       ' Current driver cog + 1
3e280                 | 	alignl
3e280                 | _Audio2_003_spin2_dat_
3e280                 | 
3e280                 | audio       	org     0
3e280                 | 
3e280     61 69 05 FB |             	rdlong  mailbox2, ptra++     	' get start address of all mailboxes
3e284     61 A1 05 FB |             	rdlong  scbase, ptra++       	' get start address of scope buffer
3e288     61 AD 05 FB |             	rdlong  hubptr, ptra++       	' get start address of PSRAM cache
3e28c                 | 
3e28c     01 EC 63 FD |             	cogid   pa                   	' compute cogid
3e290     0C EC 07 FA |             	mul     pa, #12              	' and mailbox spacing
3e294     F6 69 01 F1 |             	add     mailbox2, pa         	' add offset to find this COG's mailbox
3e298     B4 66 01 F6 |             	mov     mailbox, mailbox2     	' we need 2 copies of this to enable switching between hub and psram
3e29c                 | 
3e29c     0E AA 05 FC |             	wrpin   dac2,#left           	' PWM DACs at 44100@339 MHz
3e2a0     0E AE 15 FC |             	wxpin   sr44100,#left      	' 30*256
3e2a4     0F AA 05 FC |             	wrpin   dac2,#right
3e2a8     0F AE 15 FC |             	wxpin   sr44100,#right    
3e2ac     41 9C 64 FD |             	dirh    #left addpins 1
3e2b0     20 9C 64 FD |             	setse1  #%001<<6 + left      	' Set the event - DAC empty
3e2b4                 |  
3e2b4                 |             
3e2b4                 | '---------------------------------------------------------------------------------        
3e2b4                 | '----------------- The main loop -------------------------------------------------
3e2b4                 | '---------------------------------------------------------------------------------
3e2b4                 | 
3e2b4     0F 98 05 F6 | loop       	mov 	    cn,#15 '7
3e2b8                 |               					'  waitx ##33000000 		'for debug
3e2b8                 |             
3e2b8                 | '----------------------------------------------------------------------------------
3e2b8                 | '------------- Get parameters and execute commands if any -------------------------
3e2b8                 | '----------------------------------------------------------------------------------
3e2b8                 | 
3e2b8                 | 
3e2b8     CC 60 01 F6 | p401        	mov     channeladd,cn             	' compute the pointer to channel parameters block
3e2bc     06 60 65 F0 |             	shl     channeladd,#6
3e2c0     B0 F0 03 F1 |             	add     ptra,channeladd
3e2c4                 | 
3e2c4     28 1A 64 FD |             	setq    #13                       	' read parameters
3e2c8     00 6F 05 FB |             	rdlong  pointer0,ptra
3e2cc     1F 82 1D F4 | p408        	bitl    command0,#31 wcz	      	' bit #31 command - set the DAC sample rate
3e2d0     2C 00 90 3D |     	if_nc   jmp     #p404                     	' if not set, proceed
3e2d4     C1 62 01 F6 |             	mov     qq,command0             	' get the new rate
3e2d8     4E 62 15 FC |             	wxpin   qq,#left addpins 1        	' and program the pins
3e2dc     B1 62 E1 F8 |             	getbyte qq,qq,#0 		      	' check if the rate is n*256
3e2e0     00 62 0D F2 |             	cmp     qq,#0 wz                         
3e2e4     4E AA 05 AC |     	if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3e2e8     4E A8 05 5C |     	if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3e2ec                 |                 
3e2ec     1E 78 1D F4 |                	bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3e2f0     00 6E 05 A6 |     	if_z    mov     pointer0, #0  
3e2f4     00 70 05 A6 |     	if_z    mov     pointer0h, #0  
3e2f8     00 76 05 A6 |     	if_z    mov     envph0, #0  
3e2fc     05 79 65 AC |     	if_z    wrlong  sstart0, ptra[5]          	' reset bit #30 in hub
3e300                 |     	
3e300     BC 62 01 F6 | p404        	mov     qq,sstart0		     	' check if start>$80000
3e304     FF FF 03 FF 
3e308     FF 63 05 F5 | 		and 	qq,##$7FFFFFF 
3e30c     00 04 00 FF 
3e310     00 62 1D F2 |                 cmp 	qq,##$80000 wcz
3e314     B4 66 01 36 |     	if_ge   mov     mailbox,mailbox2          	' if yes, use PSRAM
3e318     00 66 05 C6 |     	if_lt   mov     mailbox,#0                	' if not, use HUB 
3e31c                 | 
3e31c     BF 94 39 F9 | p405           	getword apan0,volpan0,#1          	' extract vol,pan from longs 
3e320     BF 92 31 F9 |     	    	getword avol0,volpan0,#0
3e324                 |     	    	
3e324                 | '----------------------------------------------------------------------------------
3e324                 | '------------- Compute the envelope, if exists ------------------------------------
3e324                 | '----------------------------------------------------------------------------------
3e324                 |             
3e324     00 84 1D F2 |             	cmp     envptr0,#0 wcz     		' read the pointer
3e328     20 00 00 AF 
3e32c     00 E0 05 A6 |     	if_z    mov     envs1,##$4000			' if 0, no envelope, load $4000=1 for scas
3e330     54 00 90 AD |     	if_z    jmp     #p410				' and run away	
3e334                 | 
3e334     C3 76 01 F1 |            	add     envph0,envspd0			' envelope PA update
3e338                 |            	           
3e338     BB DC 01 F6 |       	    	mov     envhi, envph0			' move phase acc to high part of env pointer
3e33c     06 DC 45 F0 | 		shr     envhi,#6			' leave 10 bits in hi
3e340     EE DE 31 F9 | 	   	getword envlo,envhi,#0              	' and 16 bit in lo
3e344     10 DC 45 F0 | 	    	shr     envhi,#16			' move 10 bits of hi to the lower word
3e348     C4 DC 19 F2 | 	    	cmp     envhi,envlen0 wcz		' compare this to envelope length
3e34c                 | 	    											'debug(udec(envhi,envlen0))
3e34c     C4 DC 01 36 |     	if_ge  	mov     envhi,envlen0			' if greater than, set it at envlen
3e350     00 DE 05 36 |     	if_ge   mov     envlo,#0
3e354     C4 76 01 36 |     	if_ge   mov     envph0,envlen0             	' and set envph0 at the end of the envelope
3e358     16 76 65 30 |     	if_ge   shl     envph0,#22
3e35c                 | 
3e35c     EE E0 01 F6 |             	mov 	envs1,envhi			' 10 high bits of PA is the offset to the envelope entry
3e360     01 E0 65 F0 |             	shl 	envs1,#1                        ' these entries are 16 bit so multiply the offset by 2
3e364     C2 E0 01 F1 |             	add 	envs1,envptr0                   ' and add it to the pointer
3e368     F0 E0 01 FB |             	rdlong 	envs1,envs1			' and then read 2 entries in one rdlong
3e36c     F0 E2 39 F9 |             	getword envs2,envs1,#1			' then separate them		
3e370     F0 E0 31 F9 |            	getword envs1,envs1,#0
3e374     EF E2 01 FA |             	mul     envs2,envlo                     ' and do linear interpolation based on lower bits of the offset
3e378     EF DE 21 F6 |             	not     envlo
3e37c     EF E0 01 FA |             	mul     envs1,envlo
3e380     F1 E0 01 F1 |             	add     envs1,envs2
3e384     12 E0 45 F0 |             	shr     envs1,#18			' we need only 14 bits for scas
3e388                 |               
3e388                 | '----------------------------------------------------------------------------------
3e388                 | '------------- Generate the noise if bit 27 of the pointer is set -----------------
3e388                 | '----------------------------------------------------------------------------------
3e388                 | 
3e388     1B 78 0D F4 | p410        	testb   sstart0, #27 wz
3e38c     1B 64 61 AD |     	if_z    getrnd  spl
3e390     9C 00 90 AD |     	if_z    jmp     #p406
3e394                 |     	
3e394                 | '----------------------------------------------------------------------------------
3e394                 | '------------- Get the sample -----------------------------------------------------
3e394                 | '----------------------------------------------------------------------------------    	
3e394                 |  
3e394     B8 96 01 F6 | 		mov	oldptrh,pointer0h
3e398     C0 90 F9 F8 |            	getbyte	afreq0,freqskip0,#3         	' the frequency is in 8:24 format, so get integer in afreq0
3e39c     08 80 65 F0 |            	shl	freqskip0,#8                	' and keep the fractional in freqskip0
3e3a0     C0 6E 19 F1 |            	add     pointer0,freqskip0 wcz      	' compute the pointer to the next sample   
3e3a4     C8 70 21 F1 |            	addx	pointer0h,afreq0  
3e3a8     CB 70 19 F2 | 		cmp	pointer0h,oldptrh wcz
3e3ac     50 00 90 AD | 	if_e 	jmp 	#p411				' if the pointer didn't change, no sample has to be read
3e3b0                 |      	
3e3b0     1F 78 0D F4 |             	testb   sstart0,#31 wz       	   	' bit 31 : 16 bit sample  
3e3b4     01 70 65 A0 |      	if_z    shl     pointer0h,#1        
3e3b8     1C 78 0D F4 |             	testb   sstart0,#28 wz  		' bit 28 : interleaved sample         
3e3bc     01 70 65 A0 |      	if_z    shl     pointer0h,#1        
3e3c0                 | 												
3e3c0     BE 70 19 F2 |             	cmp     pointer0h,lend0 wcz		' check if end of the loop reached
3e3c4     BE 70 81 31 |    	if_ge   sub     pointer0h,lend0       
3e3c8     BD 70 01 31 |         if_ge   add     pointer0h,lstart0
3e3cc     BE 70 19 F2 |             	cmp     pointer0h,lend0 wcz		' check if end of the loop reached
3e3d0     BE 70 01 36 |         if_ge   mov	pointer0h,lend0	
3e3d4                 |  
3e3d4     B8 62 01 F6 |              	mov     qq,pointer0h              	' compute place in the memory from where the sample will be loaded
3e3d8     BC 62 01 F1 |            	add     qq,sstart0            
3e3dc     FF 67 5D F2 |            	cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3e3e0     B1 64 E1 EA |     	if_le   rdword  spl,qq                      	' if not, use HUB RAM for samples
3e3e4     F8 00 B0 1D |     	if_gt   call    #cache_read
3e3e8     1F 78 0D F4 |                 testb   sstart0,#31 wz 
3e3ec     08 64 65 50 |     	if_nz   shl     spl,#8				' convert 8 to 16 bit if needed
3e3f0     01 70 45 A0 |         if_z    shr     pointer0h,#1
3e3f4     1C 78 0D F4 |                 testb   sstart0,#28 wz            
3e3f8     01 70 45 A0 |     	if_z    shr     pointer0h,#1    
3e3fc     B2 74 41 F9 |                 rolword rawspl0,spl,#0			' now rawspl0 has oldsample:newsample in it
3e400                 |                   
3e400     BA 64 39 F9 | p411	      	getword spl,rawspl0,#1
3e404     BA 8E 39 F9 | 		getword oldspl,rawspl0,#1		' then separate them		
3e408     B7 DE 01 F6 | 		mov	envlo,pointer0
3e40c     12 DE 45 F0 | 		shr 	envlo,#18
3e410                 | 	
3e410     EF 8E 31 FA |             	scas    oldspl,envlo                   	' and do linear interpolation
3e414     00 8E 01 F6 |             	mov 	oldspl,0-0
3e418     EF DE 21 F6 |             	not     envlo
3e41c     1F 00 00 FF 
3e420     FF DF 05 F5 |           	and     envlo,##$3FFF
3e424     EF 64 31 FA |            	scas    spl,envlo
3e428     00 64 01 F6 |             	mov     spl,0-0
3e42c     C7 64 01 F1 |                 add     spl, oldspl
3e430                 | 	 
3e430     F0 64 31 FA | p406        	scas    spl, envs1
3e434     00 64 01 F6 |             	mov     spl,0-0
3e438     C9 64 31 FA |             	scas    spl,avol0                 	' apply volume
3e43c     00 64 01 F6 |             	mov     spl,0-0
3e440                 |  
3e440     CA 64 31 FA |             	scas    spl,apan0                 	' apply pan
3e444     00 9A 01 F6 |             	mov     ls0,0-0
3e448     20 00 00 FF 
3e44c     00 62 05 F6 |             	mov     qq,##16384
3e450     CA 62 81 F1 |             	sub     qq,apan0
3e454     B1 64 31 FA |             	scas    spl,qq
3e458     00 9C 01 F6 |             	mov     rs0, 0-0
3e45c                 |       
3e45c     CE 72 29 F9 |                 setword sample0,rs0,#1           	' pack samples into long
3e460     CD 72 21 F9 |                 setword sample0,ls0,#0
3e464                 |                 
3e464     CD 6A 01 F1 |                 add  lsample,ls0
3e468     CE 6C 01 F1 |                 add  rsample,rs0
3e46c                 |              
3e46c     1E 78 1D F4 |             	bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3e470     00 6E 05 A6 |     	if_z    mov     pointer0, #0  
3e474     00 70 05 A6 |     	if_z    mov     pointer0h, #0  
3e478     00 76 05 A6 |     	if_z    mov     envph0, #0  
3e47c     05 79 65 AC |     	if_z    wrlong  sstart0, ptra[5]          	' reset bit #30 in hub
3e480                 |             
3e480     28 08 64 FD | p403        	setq #4                          	' write new pointer, sample values and env pointer to the hub
3e484     00 6F 65 FC | 	       	wrlong  pointer0,ptra
3e488     B0 F0 83 F1 |             	sub     ptra, channeladd         	' reset the pointer to channel parameters
3e48c                 | 
3e48c     8A 99 7D FB |             	djnf    cn, #p401
3e490                 | 
3e490     0F 6C E5 F4 |             	bitnot rsample, #15
3e494     0F 6A E5 F4 |             	bitnot lsample, #15
3e498                 |   							'           	getct ct2  	'debug
3e498                 |   							'          	sub ct2,ct1
3e498                 |   							'          	debug(udec(ct2))
3e498     24 28 60 FD |             	waitse1
3e49c                 |           
3e49c     0E 6A 25 FC |            	wypin   lsample, #left              
3e4a0     0F 6C 25 FC |                 wypin   rsample, #right        
3e4a4                 | 
3e4a4     B5 9E 21 F9 | 		setword oldsample, lsample,#0		' for oscilloscope
3e4a8     B6 9E 29 F9 | 		setword oldsample, rsample,#1
3e4ac                 | 		
3e4ac     00 6C 05 F6 |             	mov rsample, #0
3e4b0     00 6A 05 F6 |             	mov lsample, #0
3e4b4                 | 
3e4b4                 | '----------------------------------------------------------------------------------
3e4b4                 | '------------- Oscilloscope  -----------------------------------------------------
3e4b4                 | '----------------------------------------------------------------------------------   
3e4b4                 | 		
3e4b4     00 A0 0D F2 | 	    	cmp     scbase,#0 wz
3e4b8     20 00 90 AD |     	if_z    jmp #p302	   
3e4bc                 |  
3e4bc     01 A6 15 F7 |             	incmod  scope,#1 wc            		'  todo: scope speed instead of const  
3e4c0     D1 A4 01 C6 |     	if_c    mov scptr2,scptr
3e4c4     02 A4 65 C0 |     	if_c    shl scptr2,#2
3e4c8     D0 A4 01 C1 |     	if_c    add scptr2,scbase     
3e4cc     60 A4 65 FC |             	wrlong scptr2,#$60
3e4d0     D2 9E 61 CC |     	if_c    wrlong oldsample,scptr2
3e4d4     01 00 00 CF 
3e4d8     7F A2 05 C7 |     	if_c    incmod scptr,##639
3e4dc                 |             
3e4dc     D4 FD 9F FD |  p302           jmp     #loop            'loop
3e4e0                 | 
3e4e0                 | '----------------------------------------------------------------------------------
3e4e0                 | '------------- This is the end of the main loop -----------------------------------
3e4e0                 | '----------------------------------------------------------------------------------
3e4e0                 | 
3e4e0                 | '----------------------------------------------------------------------------------
3e4e0                 | '------------- PSRAM cache ----------- --------------------------------------------
3e4e0                 | '----------------------------------------------------------------------------------
3e4e0                 | 
3e4e0                 | ' There are 16 cache pointers for 16 channels
3e4e0                 | ' if 24 higher bits of address=cache, then get a word from the cache
3e4e0                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3e4e0                 | 
3e4e0                 | 
3e4e0     B1 D6 E1 F8 | cache_read  	getbyte addrlo,qq,#0 			' when this is called, qq is the addres of the sample			
3e4e4                 |             
3e4e4     B1 D8 01 F6 | 	   	mov     addrhi,qq		
3e4e8     08 D8 45 F0 | 	    	shr     addrhi,#8		        ' get 24 upper bits
3e4ec     D8 98 95 F9 | 	    	alts    cn,#cache1            
3e4f0     00 D8 09 F2 | 	    	cmp	addrhi,0-0 wz               	' and compare with the cache pointer for the channel
3e4f4     34 00 90 AD |     	if_z    jmp     #p701	    			' if equal, cache hit, read the sample from it
3e4f8                 | 	
3e4f8     D8 98 8D F9 | p702	    	altd    cn,#cache1			' cache miss. 
3e4fc     EC 00 00 F6 | 	    	mov     0-0,addrhi                  	' update the pointer
3e500     EC D0 01 F6 | 	    	mov     cmd,addrhi			' prepare the mailbox
3e504     08 D0 65 F0 | 	    	shl     cmd,#8
3e508     0B D0 3D F8 |             	setnib  cmd, #%1011, #7             	' read burst from the external memory
3e50c     CC D2 01 F6 |             	mov     hubaddr,cn                  	' to the channel cache
3e510     08 D2 65 F0 |             	shl     hubaddr,#8                  	'
3e514     D6 D2 01 F1 |             	add     hubaddr,hubptr 
3e518     00 D5 05 F6 |             	mov     count,#256                  	' 256 bytes
3e51c     28 04 64 FD |             	setq    #2                          	' write 3 longs
3e520     B3 D0 61 FC |             	wrlong  cmd, mailbox                	' run it
3e524     B3 D0 01 FB | poll1       	rdlong  cmd, mailbox                	' poll mailbox for result
3e528     FE D1 B5 FB |             	tjs     cmd, #poll1                 	' retry until valid 
3e52c                 |             
3e52c                 | 	
3e52c     CC 62 01 F6 | p701	    	mov     qq,cn				' cache hit
3e530     08 62 65 F0 | 	    	shl     qq,#8				' compute the cache start
3e534     D6 62 01 F1 | 	    	add     qq,hubptr
3e538     EB 62 01 F1 | 	    	add	qq,addrlo			' add 8 lower bits to the cache addredd
3e53c     B1 64 E1 0A |     	_ret_   rdword  spl,qq                      	' read a long from the cache
3e540                 |           
3e540                 |   
3e540                 | 
3e540                 | 
3e540                 | '---------------------------------------------------------------------------
3e540                 | '------- Variables ---------------------------------------------------------
3e540                 | '---------------------------------------------------------------------------
3e540                 | 
3e540                 | ' constants
3e540                 | 
3e540     00 00 00 00 | channeladd 	long 0
3e544                 | 
3e544                 | ' temporary variables 
3e544                 | 
3e544     00 00 00 00 | qq          	long 0
3e548     00 00 00 00 | spl         	long 0
3e54c     00 00 00 00 | mailbox     	long 0
3e550     00 00 00 00 | mailbox2    	long 0
3e554     00 00 00 00 | lsample     	long 0
3e558     00 00 00 00 | rsample     	long 0
3e55c                 | 
3e55c                 | ' channel parameter block
3e55c                 | 
3e55c     00 00 00 00 | pointer0    	long 0   
3e560     00 00 00 00 | pointer0h   	long 0  
3e564     00 00 00 00 | sample0     	long 0
3e568     00 00 00 00 | rawspl0	    	long 0
3e56c     00 00 00 00 | envph0	    	long 0
3e570     00 00 00 00 | sstart0     	long 0     ' start pointer and type at bit 31
3e574     00 00 00 00 | lstart0     	long 0
3e578     00 00 00 00 | lend0       	long 0
3e57c     00 00 00 00 | volpan0     	long 0
3e580     00 00 00 00 | freqskip0   	long 0
3e584     00 00 00 00 | command0    	long 0
3e588     00 00 00 00 | envptr0	    	long 0
3e58c     00 00 00 00 | envspd0	    	long 0
3e590     00 00 00 00 | envlen0	    	long 0
3e594     00 00 00 00 | res5	    	long 0
3e598     00 00 00 00 | res6	    	long 0
3e59c                 | 
3e59c     00 00 00 00 | oldspl		long 0
3e5a0     00 00 00 00 | afreq0      	long 0
3e5a4                 | 
3e5a4     00 00 00 00 | avol0       	long 0
3e5a8     00 00 00 00 | apan0       	long 0
3e5ac     00 00 00 00 | oldptrh	    	long 0
3e5b0     00 00 00 00 | cn          	long 0
3e5b4                 | 
3e5b4                 | ' Samples
3e5b4                 | 
3e5b4     00 00 00 00 | ls0         	long 0
3e5b8     00 00 00 00 | rs0         	long 0
3e5bc                 | 
3e5bc     00 00 00 00 | oldsample   	long 0
3e5c0                 | 
3e5c0     00 00 00 00 | scbase 		long 0
3e5c4     00 00 00 00 | scptr 		long 0
3e5c8     00 00 00 00 | scptr2		long 0
3e5cc     00 00 00 00 | scope 		long 0
3e5d0                 | 
3e5d0     44 00 17 00 | dac         	long %10111_00000000_01_00010_0     	'random dither
3e5d4     46 00 17 00 | dac2        	long %10111_00000000_01_00011_0     	'pwm
3e5d8                 | 
3e5d8     00 18 07 00 | hubptr      	long $71800
3e5dc     00 1E 00 00 | sr44100     	long 30*256
3e5e0                 | 
3e5e0     00 00 00 00 | cache1      	long 0
3e5e4     00 00 00 00 | cache2      	long 0
3e5e8     00 00 00 00 | cache3      	long 0
3e5ec     00 00 00 00 | cache4      	long 0
3e5f0     00 00 00 00 | cache5      	long 0
3e5f4     00 00 00 00 | cache6      	long 0
3e5f8     00 00 00 00 | cache7      	long 0
3e5fc     00 00 00 00 | cache8      	long 0
3e600     00 00 00 00 | cache9      	long 0
3e604     00 00 00 00 | cachea      	long 0
3e608     00 00 00 00 | cacheb      	long 0
3e60c     00 00 00 00 | cachec      	long 0
3e610     00 00 00 00 | cached      	long 0
3e614     00 00 00 00 | cachee      	long 0
3e618     00 00 00 00 | cachef      	long 0
3e61c     00 00 00 00 | cache0      	long 0
3e620                 | 
3e620     00 00 00 00 | cmd         	long 0
3e624     00 00 00 00 | hubaddr    	long 0
3e628     00 01 00 00 | count       	long 256
3e62c                 | 
3e62c     00 00 00 00 | addrlo 		long 0
3e630     00 00 00 00 | addrhi 		long 0
3e634     00 00 00 00 | pointer00 	long 0
3e638     00 00 00 00 | envhi 		long 0
3e63c     00 00 00 00 | envlo 		long 0
3e640     00 00 00 00 | envs1 		long 0
3e644     00 00 00 00 | envs2 		long 0
3e648     00 00 00 00 | noise0 		long 0
3e64c                 | 
3e64c                 | 'ct1 		long 0
3e64c                 | 'ct2 		long 0
3e64c                 | 
3e64c                 | 		fit 256		'todo: maybe the better interpolation. Or all params in cog
3e64c                 | 		fit 256		'todo: maybe the better interpolation. Or all params in cog
3e64c     00 00 00 00 
3e650     00 00 00 00 | null  			long 	0,0           ' for channel reset
3e654                 | 	alignl
3e654                 | __system__dat_
3e654     00 00 00 00 
3e658     00 00 00 00 | 	byte	$00[8]
3e65c     03 00 00 00 
3e660     00 00 00 00 
3e664     00 00 00 00 
3e668     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e66c     00 00 00 00 
      ...             
3e8f8     00 00 00 00 
3e8fc     00 00 00 00 | 	byte	$00[660]
3e900     00 00 40 0B | 	long	(180 {__system____root_opendir})<<20
3e904     00 00 50 0B | 	long	(181 {__system____root_closedir})<<20
3e908     00 00 60 0B | 	long	(182 {__system____root_readdir})<<20
3e90c     00 00 70 0B | 	long	(183 {__system____root_stat})<<20
3e910     00 00 00 00 
      ...             
3e92c     00 00 00 00 
3e930     00 00 00 00 | 	byte	$00[36]
3e934     9C E9 03 00 | 	long	@@@__system__dat_ + 840
3e938     9F E9 03 00 | 	long	@@@__system__dat_ + 843
3e93c     C0 E9 03 00 | 	long	@@@__system__dat_ + 876
3e940     D9 E9 03 00 | 	long	@@@__system__dat_ + 901
3e944     F4 E9 03 00 | 	long	@@@__system__dat_ + 928
3e948     0E EA 03 00 | 	long	@@@__system__dat_ + 954
3e94c     1E EA 03 00 | 	long	@@@__system__dat_ + 970
3e950     30 EA 03 00 | 	long	@@@__system__dat_ + 988
3e954     42 EA 03 00 | 	long	@@@__system__dat_ + 1006
3e958     54 EA 03 00 | 	long	@@@__system__dat_ + 1024
3e95c     60 EA 03 00 | 	long	@@@__system__dat_ + 1036
3e960     71 EA 03 00 | 	long	@@@__system__dat_ + 1053
3e964     85 EA 03 00 | 	long	@@@__system__dat_ + 1073
3e968     8F EA 03 00 | 	long	@@@__system__dat_ + 1083
3e96c     9F EA 03 00 | 	long	@@@__system__dat_ + 1099
3e970     AE EA 03 00 | 	long	@@@__system__dat_ + 1114
3e974     C4 EA 03 00 | 	long	@@@__system__dat_ + 1136
3e978     DD EA 03 00 | 	long	@@@__system__dat_ + 1161
3e97c     F1 EA 03 00 | 	long	@@@__system__dat_ + 1181
3e980     FF EA 03 00 | 	long	@@@__system__dat_ + 1195
3e984     13 EB 03 00 | 	long	@@@__system__dat_ + 1215
3e988     1F EB 03 00 | 	long	@@@__system__dat_ + 1227
3e98c     31 EB 03 00 | 	long	@@@__system__dat_ + 1245
3e990     49 EB 03 00 | 	long	@@@__system__dat_ + 1269
3e994     5B EB 03 00 | 	long	@@@__system__dat_ + 1287
3e998     6E EB 03 00 | 	long	@@@__system__dat_ + 1306
3e99c     4F 4B 00 4E 
3e9a0     75 6D 65 72 
3e9a4     69 63 61 6C 
3e9a8     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3e9ac     75 6D 65 6E 
3e9b0     74 20 6F 75 
3e9b4     74 20 6F 66 
3e9b8     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3e9bc     61 69 6E 00 
3e9c0     52 65 73 75 
3e9c4     6C 74 20 6E 
3e9c8     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3e9cc     65 70 72 65 
3e9d0     73 65 6E 74 
3e9d4     61 62 6C 65 
3e9d8     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3e9dc     65 67 61 6C 
3e9e0     20 6D 75 6C 
3e9e4     74 69 62 79 
3e9e8     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3e9ec     65 71 75 65 
3e9f0     6E 63 65 00 
3e9f4     4E 6F 20 73 
3e9f8     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3e9fc     66 69 6C 65 
3ea00     20 6F 72 20 
3ea04     64 69 72 65 
3ea08     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3ea0c     79 00 42 61 
3ea10     64 20 66 69 
3ea14     6C 65 20 6E 
3ea18     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3ea1c     72 00 50 65 
3ea20     72 6D 69 73 
3ea24     73 69 6F 6E 
3ea28     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3ea2c     69 65 64 00 
3ea30     4E 6F 74 20 
3ea34     65 6E 6F 75 
3ea38     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3ea3c     65 6D 6F 72 
3ea40     79 00 54 65 
3ea44     6D 70 6F 72 
3ea48     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3ea4c     66 61 69 6C 
3ea50     75 72 65 00 
3ea54     46 69 6C 65 
3ea58     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3ea5c     73 74 73 00 
3ea60     49 6E 76 61 
3ea64     6C 69 64 20 
3ea68     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3ea6c     6D 65 6E 74 
3ea70     00 54 6F 6F 
3ea74     20 6D 61 6E 
3ea78     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3ea7c     65 6E 20 66 
3ea80     69 6C 65 73 
3ea84     00 49 2F 4F 
3ea88     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3ea8c     6F 72 00 4E 
3ea90     6F 74 20 61 
3ea94     20 64 69 72 
3ea98     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3ea9c     72 79 00 49 
3eaa0     73 20 61 20 
3eaa4     64 69 72 65 
3eaa8     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3eaac     79 00 52 65 
3eab0     61 64 20 6F 
3eab4     6E 6C 79 20 
3eab8     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3eabc     20 73 79 73 
3eac0     74 65 6D 00 
3eac4     46 75 6E 63 
3eac8     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3eacc     20 6E 6F 74 
3ead0     20 69 6D 70 
3ead4     6C 65 6D 65 
3ead8     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3eadc     00 44 69 72 
3eae0     65 63 74 6F 
3eae4     72 79 20 6E 
3eae8     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3eaec     6D 70 74 79 
3eaf0     00 4E 61 6D 
3eaf4     65 20 74 6F 
3eaf8     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3eafc     6E 67 00 44 
3eb00     65 76 69 63 
3eb04     65 20 6E 6F 
3eb08     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3eb0c     65 6B 61 62 
3eb10     6C 65 00 42 
3eb14     61 64 20 61 
3eb18     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3eb1c     73 73 00 42 
3eb20     72 6F 6B 65 
3eb24     6E 20 63 6F 
3eb28     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3eb2c     74 69 6F 6E 
3eb30     00 44 65 76 
3eb34     69 63 65 20 
3eb38     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3eb3c     65 73 6F 75 
3eb40     72 63 65 20 
3eb44     62 75 73 79 
3eb48     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3eb4c     73 73 20 64 
3eb50     65 76 69 63 
3eb54     65 20 6C 69 
3eb58     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3eb5c     6F 20 73 70 
3eb60     61 63 65 20 
3eb64     6F 6E 20 64 
3eb68     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3eb6c     65 00 55 6E 
3eb70     6B 6E 6F 77 
3eb74     6E 20 65 72 
3eb78     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3eb7c     00 00 00 00 
3eb80     00 00 00 00 
3eb84     00 00 00 00 | 	byte	$00[12]
3eb88     01 80 00 00 
3eb8c     00 00 00 00 
3eb90     00 00 00 00 
3eb94     00 00 00 00 | 	byte	$01, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3eb98     00 00 00 00 | 	byte	$00, $00, $00, $00
3eb9c     00 00 50 0D | 	long	(213 {__system___tx})<<20
3eba0     00 00 60 0D | 	long	(214 {__system___rx})<<20
3eba4     00 00 00 00 | 	byte	$00, $00, $00, $00
3eba8     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3ebac     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3ebb0     00 00 00 00 
3ebb4     00 00 00 00 | 	byte	$00[8]
3ebb8     01 00 00 00 
3ebbc     02 80 00 00 
3ebc0     00 00 00 00 
3ebc4     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ebc8     00 00 00 00 
3ebcc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ebd0     00 00 50 0D | 	long	(213 {__system___tx})<<20
3ebd4     00 00 60 0D | 	long	(214 {__system___rx})<<20
3ebd8     00 00 00 00 | 	byte	$00, $00, $00, $00
3ebdc     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3ebe0     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3ebe4     00 00 00 00 
3ebe8     00 00 00 00 | 	byte	$00[8]
3ebec     01 00 00 00 
3ebf0     02 80 00 00 
3ebf4     00 00 00 00 
3ebf8     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ebfc     00 00 00 00 
3ec00     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ec04     00 00 50 0D | 	long	(213 {__system___tx})<<20
3ec08     00 00 60 0D | 	long	(214 {__system___rx})<<20
3ec0c     00 00 00 00 | 	byte	$00, $00, $00, $00
3ec10     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3ec14     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3ec18     00 00 00 00 
      ...             
3ed88     00 00 00 00 
3ed8c     00 00 00 00 | 	byte	$00[376]
3ed90     94 ED 03 00 | 	long	@@@__system__dat_ + 1856
3ed94     00 00 00 00 
3ed98     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ed9c                 | 	alignl
3ed9c                 | _fatfs_cc_dat_
3ed9c     C7 00 FC 00 
3eda0     E9 00 E2 00 
3eda4     E4 00 E0 00 
3eda8     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3edac     EA 00 EB 00 
3edb0     E8 00 EF 00 
3edb4     EE 00 EC 00 
3edb8     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3edbc     C9 00 E6 00 
3edc0     C6 00 F4 00 
3edc4     F6 00 F2 00 
3edc8     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3edcc     FF 00 D6 00 
3edd0     DC 00 F8 00 
3edd4     A3 00 D8 00 
3edd8     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3eddc     E1 00 ED 00 
3ede0     F3 00 FA 00 
3ede4     F1 00 D1 00 
3ede8     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3edec     BF 00 AE 00 
3edf0     AC 00 BD 00 
3edf4     BC 00 A1 00 
3edf8     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3edfc     91 25 92 25 
3ee00     93 25 02 25 
3ee04     24 25 C1 00 
3ee08     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3ee0c     A9 00 63 25 
3ee10     51 25 57 25 
3ee14     5D 25 A2 00 
3ee18     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3ee1c     14 25 34 25 
3ee20     2C 25 1C 25 
3ee24     00 25 3C 25 
3ee28     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3ee2c     5A 25 54 25 
3ee30     69 25 66 25 
3ee34     60 25 50 25 
3ee38     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3ee3c     F0 00 D0 00 
3ee40     CA 00 CB 00 
3ee44     C8 00 31 01 
3ee48     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3ee4c     CF 00 18 25 
3ee50     0C 25 88 25 
3ee54     84 25 A6 00 
3ee58     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3ee5c     D3 00 DF 00 
3ee60     D4 00 D2 00 
3ee64     F5 00 D5 00 
3ee68     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3ee6c     DE 00 DA 00 
3ee70     DB 00 D9 00 
3ee74     FD 00 DD 00 
3ee78     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3ee7c     AD 00 B1 00 
3ee80     17 20 BE 00 
3ee84     B6 00 A7 00 
3ee88     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3ee8c     B0 00 A8 00 
3ee90     B7 00 B9 00 
3ee94     B3 00 B2 00 
3ee98     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3ee9c     61 00 1A 03 
3eea0     E0 00 17 03 
3eea4     F8 00 07 03 
3eea8     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3eeac     78 01 00 01 
3eeb0     30 01 32 01 
3eeb4     06 01 39 01 
3eeb8     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3eebc     2E 01 79 01 
3eec0     06 01 80 01 
3eec4     4D 00 43 02 
3eec8     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3eecc     82 01 84 01 
3eed0     84 01 86 01 
3eed4     87 01 87 01 
3eed8     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3eedc     8B 01 8B 01 
3eee0     8D 01 8E 01 
3eee4     8F 01 90 01 
3eee8     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3eeec     93 01 94 01 
3eef0     F6 01 96 01 
3eef4     97 01 98 01 
3eef8     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3eefc     9B 01 9C 01 
3ef00     9D 01 20 02 
3ef04     9F 01 A0 01 
3ef08     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3ef0c     A2 01 A4 01 
3ef10     A4 01 A6 01 
3ef14     A7 01 A7 01 
3ef18     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3ef1c     AB 01 AC 01 
3ef20     AC 01 AE 01 
3ef24     AF 01 AF 01 
3ef28     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3ef2c     B3 01 B3 01 
3ef30     B5 01 B5 01 
3ef34     B7 01 B8 01 
3ef38     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3ef3c     BB 01 BC 01 
3ef40     BC 01 BE 01 
3ef44     F7 01 C0 01 
3ef48     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3ef4c     C3 01 C4 01 
3ef50     C5 01 C4 01 
3ef54     C7 01 C8 01 
3ef58     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3ef5c     CB 01 CA 01 
3ef60     CD 01 10 01 
3ef64     DD 01 01 00 
3ef68     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3ef6c     12 01 F3 01 
3ef70     03 00 F1 01 
3ef74     F4 01 F4 01 
3ef78     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3ef7c     22 02 12 01 
3ef80     3A 02 09 00 
3ef84     65 2C 3B 02 
3ef88     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3ef8c     66 2C 3F 02 
3ef90     40 02 41 02 
3ef94     41 02 46 02 
3ef98     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3ef9c     40 00 81 01 
3efa0     86 01 55 02 
3efa4     89 01 8A 01 
3efa8     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3efac     5A 02 90 01 
3efb0     5C 02 5D 02 
3efb4     5E 02 5F 02 
3efb8     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3efbc     62 02 94 01 
3efc0     64 02 65 02 
3efc4     66 02 67 02 
3efc8     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3efcc     6A 02 62 2C 
3efd0     6C 02 6D 02 
3efd4     6E 02 9C 01 
3efd8     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3efdc     9D 01 73 02 
3efe0     74 02 9F 01 
3efe4     76 02 77 02 
3efe8     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3efec     7A 02 7B 02 
3eff0     7C 02 64 2C 
3eff4     7E 02 7F 02 
3eff8     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3effc     82 02 A9 01 
3f000     84 02 85 02 
3f004     86 02 87 02 
3f008     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3f00c     B1 01 B2 01 
3f010     45 02 8D 02 
3f014     8E 02 8F 02 
3f018     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3f01c     B7 01 7B 03 
3f020     03 00 FD 03 
3f024     FE 03 FF 03 
3f028     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3f02c     86 03 88 03 
3f030     89 03 8A 03 
3f034     B1 03 11 03 
3f038     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3f03c     A3 03 A3 03 
3f040     C4 03 08 03 
3f044     CC 03 03 00 
3f048     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3f04c     8F 03 D8 03 
3f050     18 01 F2 03 
3f054     0A 00 F9 03 
3f058     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3f05c     F5 03 F6 03 
3f060     F7 03 F7 03 
3f064     F9 03 FA 03 
3f068     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3f06c     20 03 50 04 
3f070     10 07 60 04 
3f074     22 01 8A 04 
3f078     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3f07c     0E 01 CF 04 
3f080     01 00 C0 04 
3f084     D0 04 44 01 
3f088     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3f08c     00 00 7D 1D 
3f090     01 00 63 2C 
3f094     00 1E 96 01 
3f098     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3f09c     00 1F 08 06 
3f0a0     10 1F 06 06 
3f0a4     20 1F 08 06 
3f0a8     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3f0ac     40 1F 06 06 
3f0b0     51 1F 07 00 
3f0b4     59 1F 52 1F 
3f0b8     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3f0bc     5D 1F 56 1F 
3f0c0     5F 1F 60 1F 
3f0c4     08 06 70 1F 
3f0c8     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3f0cc     BB 1F C8 1F 
3f0d0     C9 1F CA 1F 
3f0d4     CB 1F DA 1F 
3f0d8     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3f0dc     F9 1F EA 1F 
3f0e0     EB 1F FA 1F 
3f0e4     FB 1F 80 1F 
3f0e8     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3f0ec     08 06 A0 1F 
3f0f0     08 06 B0 1F 
3f0f4     04 00 B8 1F 
3f0f8     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3f0fc     BC 1F CC 1F 
3f100     01 00 C3 1F 
3f104     D0 1F 02 06 
3f108     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3f10c     E5 1F 01 00 
3f110     EC 1F F3 1F 
3f114     01 00 FC 1F 
3f118     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3f11c     32 21 70 21 
3f120     10 02 84 21 
3f124     01 00 83 21 
3f128     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3f12c     30 2C 2F 04 
3f130     60 2C 02 01 
3f134     67 2C 06 01 
3f138     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3f13c     80 2C 64 01 
3f140     00 2D 26 08 
3f144     41 FF 1A 03 
3f148     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3f14c     05 07 09 0E 
3f150     10 12 14 16 
3f154     18 1C 1E 43 
3f158     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3f15c     41 41 43 45 
3f160     45 45 49 49 
3f164     49 41 41 45 
3f168     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3f16c     4F 55 55 59 
3f170     4F 55 4F 9C 
3f174     4F 9E 9F 41 
3f178     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3f17c     A5 A6 A7 A8 
3f180     A9 AA AB AC 
3f184     AD AE AF B0 
3f188     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3f18c     41 41 41 B8 
3f190     B9 BA BB BC 
3f194     BD BE BF C0 
3f198     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3f19c     C5 41 41 C8 
3f1a0     C9 CA CB CC 
3f1a4     CD CE CF D1 
3f1a8     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3f1ac     49 49 49 49 
3f1b0     D9 DA DB DC 
3f1b4     DD 49 DF 4F 
3f1b8     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3f1bc     4F E6 E8 E8 
3f1c0     55 55 55 59 
3f1c4     59 EE EF F0 
3f1c8     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3f1cc     F5 F6 F7 F8 
3f1d0     F9 FA FB FC 
3f1d4     FD FE FF 00 
3f1d8     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3f1dc     00 00 00 00 
3f1e0     FF FF FF FF 
3f1e4     1F 00 00 00 
3f1e8     1C 00 00 00 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00
3f1ec     1F 00 00 00 
3f1f0     1E 00 00 00 
3f1f4     1F 00 00 00 
3f1f8     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3f1fc     1F 00 00 00 
3f200     1F 00 00 00 
3f204     1E 00 00 00 
3f208     1F 00 00 00 | 	byte	$1f, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3f20c     1E 00 00 00 
3f210     1F 00 00 00 
3f214     00 00 00 00 
3f218     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00
3f21c     3B 00 00 00 
3f220     5A 00 00 00 
3f224     78 00 00 00 
3f228     97 00 00 00 | 	byte	$3b, $00, $00, $00, $5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00
3f22c     B5 00 00 00 
3f230     D4 00 00 00 
3f234     F3 00 00 00 
3f238     11 01 00 00 | 	byte	$b5, $00, $00, $00, $d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00
3f23c     30 01 00 00 
3f240     4E 01 00 00 
3f244     6D 01 00 00 
3f248     FF FF FF FF | 	byte	$30, $01, $00, $00, $4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff
3f24c     00 00 00 00 
      ...             
3f268     00 00 00 00 
3f26c     00 00 00 00 | 	byte	$00[36]
3f270     8E F2 03 00 | 	long	@@@_fatfs_cc_dat_ + 1266
3f274     92 F2 03 00 | 	long	@@@_fatfs_cc_dat_ + 1270
3f278     00 00 00 00 
3f27c     00 00 00 00 
3f280     00 00 00 00 
3f284     00 00 00 00 
3f288     00 00       | 	byte	$00[18]
3f28a     3F 3F 3F 00 
3f28e     55 43 54 00 
3f292     55 43 54 00 
3f296     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3f29a     00 00 00 00 
3f29e     00 00 00    | 	byte	$00[7]
3f2a1     CA 9A 3B 00 
3f2a5     00 00 00 01 
3f2a9     01 01 01 01 
3f2ad     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3f2b1     91 11 11 11 
3f2b5     11 01 01 01 
3f2b9     01 01 01 01 
3f2bd     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3f2c1     01 01 01 01 
3f2c5     01 01 01    | 	byte	$01[7]
3f2c8     90 20 20 20 
3f2cc     20 20 20 20 
3f2d0     20 20 20 20 
3f2d4     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3f2d8     42 42 42 42 
3f2dc     42 42 42 42 
3f2e0     42 42       | 	byte	$42[10]
3f2e2     20 20 20 20 
3f2e6     20 20 20    | 	byte	$20[7]
3f2e9     44 44 44 44 
3f2ed     44 44       | 	byte	$44[6]
3f2ef     04 04 04 04 
3f2f3     04 04 04 04 
3f2f7     04 04 04 04 
3f2fb     04 04 04 04 
3f2ff     04 04 04 04 | 	byte	$04[20]
3f303     20 20 20 20 
3f307     20 20       | 	byte	$20[6]
3f309     48 48 48 48 
3f30d     48 48       | 	byte	$48[6]
3f30f     08 08 08 08 
3f313     08 08 08 08 
3f317     08 08 08 08 
3f31b     08 08 08 08 
3f31f     08 08 08 08 | 	byte	$08[20]
3f323     20 20 20 20 
3f327     01 00 00 00 
3f32b     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3f32c                 | __methodtable__
3f32c     AC 5A 01 00 | 	long	@_do_no_command
3f330     14 E7 01 00 | 	long	@_do_plus
3f334     98 DB 01 00 | 	long	@_do_minus
3f338     58 E6 01 00 | 	long	@_do_or
3f33c     5C E0 01 00 | 	long	@_do_mul
3f340     08 CC 01 00 | 	long	@_do_fdiv
3f344     34 C6 01 00 | 	long	@_do_and
3f348     F0 C6 01 00 | 	long	@_do_div
3f34c     D8 DE 01 00 | 	long	@_do_mod
3f350     E4 EB 01 00 | 	long	@_do_shl
3f354     A0 EC 01 00 | 	long	@_do_shr
3f358     94 EA 01 00 | 	long	@_do_power
3f35c     00 BE 01 00 | 	long	@_do_getvar
3f360     38 86 01 00 | 	long	@_do_push
3f364     8C B9 01 00 | 	long	@_do_assign
3f368     78 F5 00 00 | 	long	@_do_cls
3f36c     84 54 01 00 | 	long	@_do_new
3f370     DC 7E 01 00 | 	long	@_do_plot
3f374     20 17 01 00 | 	long	@_do_draw
3f378     E4 80 01 00 | 	long	@_do_print
3f37c     60 F3 00 00 | 	long	@_do_circle
3f380     28 19 01 00 | 	long	@_do_fcircle
3f384     5C E2 00 00 | 	long	@_do_box
3f388     B4 21 01 00 | 	long	@_do_frame
3f38c     C4 F7 00 00 | 	long	@_do_color
3f390     44 1F 01 00 | 	long	@_do_for
3f394     E8 56 01 00 | 	long	@_do_next
3f398     90 43 01 00 | 	long	@_do_list
3f39c     1C 9D 01 00 | 	long	@_do_run
3f3a0     54 18 01 00 | 	long	@_do_error
3f3a4     A0 2D 01 00 | 	long	@_do_fast_goto
3f3a8     90 2E 01 00 | 	long	@_do_find_goto
3f3ac     58 30 01 00 | 	long	@_do_slow_goto
3f3b0     CC 5A 01 00 | 	long	@_do_nothing
3f3b4     40 A1 01 00 | 	long	@_do_save
3f3b8     E8 45 01 00 | 	long	@_do_load
3f3bc     2C 73 01 00 | 	long	@_do_pinwrite
3f3c0     20 B7 01 00 | 	long	@_do_waitms
3f3c4     00 B8 01 00 | 	long	@_do_waitvbl
3f3c8     C0 32 01 00 | 	long	@_do_if
3f3cc     EC 17 01 00 | 	long	@_do_else
3f3d0     74 C8 01 00 | 	long	@_do_eq
3f3d4     58 CD 01 00 | 	long	@_do_ge
3f3d8     90 D4 01 00 | 	long	@_do_le
3f3dc     F4 D0 01 00 | 	long	@_do_gt
3f3e0     24 D8 01 00 | 	long	@_do_lt
3f3e4     C4 E2 01 00 | 	long	@_do_ne
3f3e8     98 9A 01 00 | 	long	@_do_rnd
3f3ec     38 E4 00 00 | 	long	@_do_brun
3f3f0     8C DE 00 00 | 	long	@_do_beep
3f3f4     30 10 01 00 | 	long	@_do_dir
3f3f8     A8 6F 01 00 | 	long	@_do_paper
3f3fc     7C 36 01 00 | 	long	@_do_ink
3f400     C8 1E 01 00 | 	long	@_do_font
3f404     04 4F 01 00 | 	long	@_do_mode
3f408     40 53 01 00 | 	long	@_do_mouse
3f40c     38 2C 01 00 | 	long	@_do_gettime
3f410     E4 FC 00 00 | 	long	@_do_cursor
3f414     D0 F4 00 00 | 	long	@_do_click
3f418     FC 53 01 00 | 	long	@_do_mousex
3f41c     40 54 01 00 | 	long	@_do_mousey
3f420     74 53 01 00 | 	long	@_do_mousek
3f424     B8 53 01 00 | 	long	@_do_mousew
3f428     F4 AB 01 00 | 	long	@_do_sin
3f42c     E0 AE 01 00 | 	long	@_do_stick
3f430     E0 B1 01 00 | 	long	@_do_strig
3f434     38 AD 01 00 | 	long	@_do_sprite
3f438     68 0C 01 00 | 	long	@_do_defsprite
3f43c     00 2A 01 00 | 	long	@_do_getpixel
3f440     FC B6 01 00 | 	long	@_do_waitclock
3f444     28 DE 01 00 | 	long	@_do_negative
3f448     0C 8B 01 00 | 	long	@_do_rdpin
3f44c     A8 9C 01 00 | 	long	@_do_rqpin
3f450     60 71 01 00 | 	long	@_do_pinread
3f454     0C B8 01 00 | 	long	@_do_wrpin
3f458     8C B8 01 00 | 	long	@_do_wxpin
3f45c     0C B9 01 00 | 	long	@_do_wypin
3f460     A0 70 01 00 | 	long	@_do_pinfloat
3f464     20 71 01 00 | 	long	@_do_pinlo
3f468     E0 70 01 00 | 	long	@_do_pinhi
3f46c     E4 71 01 00 | 	long	@_do_pinstart
3f470     EC 72 01 00 | 	long	@_do_pintoggle
3f474     5C 80 01 00 | 	long	@_do_position
3f478     D4 FB 00 00 | 	long	@_do_cos
3f47c     5C B3 01 00 | 	long	@_do_tan
3f480     88 DD 00 00 | 	long	@_do_atn
3f484     8C DC 00 00 | 	long	@_do_asin
3f488     44 DA 00 00 | 	long	@_do_acos
3f48c     00 AE 01 00 | 	long	@_do_sqr
3f490     04 1A 01 00 | 	long	@_do_fill
3f494     8C 05 01 00 | 	long	@_do_defsnd
3f498     E4 FD 00 00 | 	long	@_do_defenv
3f49c     E4 8A 01 00 | 	long	@_do_rad
3f4a0     C8 0E 01 00 | 	long	@_do_deg
3f4a4     FC 36 01 00 | 	long	@_do_int
3f4a8     B4 73 01 00 | 	long	@_do_play
3f4ac     AC A6 01 00 | 	long	@_do_setdelay
3f4b0     4C A7 01 00 | 	long	@_do_setenv
3f4b4     EC A7 01 00 | 	long	@_do_setlen
3f4b8     8C A8 01 00 | 	long	@_do_setpan
3f4bc     CC A9 01 00 | 	long	@_do_setvol
3f4c0     6C AA 01 00 | 	long	@_do_setwave
3f4c4     2C A9 01 00 | 	long	@_do_setsustain
3f4c8     CC 97 01 00 | 	long	@_do_release
3f4cc     38 28 01 00 | 	long	@_do_getenvsustain
3f4d0     8C 7F 01 00 | 	long	@_do_poke
3f4d4     88 16 01 00 | 	long	@_do_dpoke
3f4d8     88 4B 01 00 | 	long	@_do_lpoke
3f4dc     30 70 01 00 | 	long	@_do_peek
3f4e0     18 16 01 00 | 	long	@_do_dpeek
3f4e4     18 4B 01 00 | 	long	@_do_lpeek
3f4e8     04 23 01 00 | 	long	@_do_fre
3f4ec     30 29 01 00 | 	long	@_do_getnotevalue
3f4f0     AC C2 01 00 | 	long	@_do_getaddr
3f4f4     A4 33 01 00 | 	long	@_do_inkey
3f4f8     C4 D9 00 00 | 	long	@_do_abs
3f4fc     9C 31 01 00 | 	long	@_do_hex
3f500     38 E1 00 00 | 	long	@_do_bin
3f504     58 B4 01 00 | 	long	@_do_val
3f508     80 F2 00 00 | 	long	@_do_chr
3f50c     40 DB 00 00 | 	long	@_do_asc
3f510     C4 40 01 00 | 	long	@_do_left
3f514     2C 99 01 00 | 	long	@_do_right
3f518     A8 4C 01 00 | 	long	@_do_mid
3f51c     30 42 01 00 | 	long	@_do_len
3f520     88 2C 01 00 | 	long	@_do_gosub
3f524     80 98 01 00 | 	long	@_do_return
3f528     10 18 01 00 | 	long	@_do_end
3f52c     24 80 01 00 | 	long	@_do_pop
3f530     D8 49 01 00 | 	long	@_do_log
3f534     DC F0 00 00 | 	long	@_do_changevol
3f538     9C F1 00 00 | 	long	@_do_changewav
3f53c     08 F0 00 00 | 	long	@_do_changepan
3f540     30 EC 00 00 | 	long	@_do_changefreq
3f544     0C AB 01 00 | 	long	@_do_shutup
3f548     54 9C 01 00 | 	long	@_do_round
3f54c     44 18 01 00 | 	long	@_do_enter
3f550     94 5B 01 00 | 	long	@_do_open
3f554     FC F4 00 00 | 	long	@_do_close
3f558     68 23 01 00 | 	long	@_do_get
3f55c     54 87 01 00 | 	long	@_do_put
3f560     70 E6 00 00 | 	long	@_do_cd
3f564     F0 0E 01 00 | 	long	@_do_delete
3f568     44 4E 01 00 | 	long	@_do_mkdir
3f56c     8C DF 00 00 | 	long	@_do_blit
3f570     D0 22 01 00 | 	long	@_do_framebuf
3f574     D0 5A 01 00 | 	long	@_do_on
3f578     F0 AC 01 00 | 	long	@_do_skip
3f57c     B8 37 01 00 | 	long	@_do_input
3f580     74 8D 01 00 | 	long	@_do_read
3f584     40 98 01 00 | 	long	@_do_restore
3f588     0C 69 01 00 | 	long	@_do_padx
3f58c     40 6B 01 00 | 	long	@_do_pady
3f590     74 6D 01 00 | 	long	@_do_padz
3f594     08 5E 01 00 | 	long	@_do_padrx
3f598     3C 60 01 00 | 	long	@_do_padry
3f59c     70 62 01 00 | 	long	@_do_padrz
3f5a0     D8 66 01 00 | 	long	@_do_padw
3f5a4     A4 64 01 00 | 	long	@_do_pads
3f5a8     FC F7 00 00 | 	long	@_do_copy
3f5ac     B8 F5 00 00 | 	long	@_do_coginit
3f5b0     84 F7 00 00 | 	long	@_do_cogstop
3f5b4     20 4C 01 00 | 	long	@_do_memlo
3f5b8     64 4C 01 00 | 	long	@_do_memtop
3f5bc     D0 A4 01 00 | 	long	@_do_setcolor
3f5c0     40 27 01 00 | 	long	@_do_getcolor
3f5c4     18 FD 00 00 | 	long	@_do_defchar
3f5c8     78 98 01 00 | 	long	@_do_restorepalette
3f5cc     0C 1B 01 00 | 	long	@_do_findfirst
3f5d0     0C 1E 01 00 | 	long	@_do_findnext
3f5d4     30 A4 01 00 | 	long	@_do_setamode
3f5d8     2C 2B 01 00 | 	long	@_do_getrealfreq
3f5dc     5C B0 01 00 | 	long	@_do_str
3f5e0     B0 2E 02 00 | 	long	@_hg010b_spin2_putchar
3f5e4     BC 23 03 00 | 	long	@__system___struct___bas_wrap_sender_tx_
3f5e8     00 24 03 00 | 	long	@__system___struct___bas_wrap_sender_rx_
3f5ec     48 24 03 00 | 	long	@__system___struct___bas_wrap_sender_close_
3f5f0     EC 22 03 00 | 	long	@__system___struct__s_vfs_file_t_putchar_
3f5f4     5C 23 03 00 | 	long	@__system___struct__s_vfs_file_t_getchar_
3f5f8     A4 22 03 00 | 	long	@__system____strs_cl_pfunc_
3f5fc     4C 99 02 00 | 	long	@__system____root_opendir
3f600     E8 99 02 00 | 	long	@__system____root_closedir
3f604     64 99 02 00 | 	long	@__system____root_readdir
3f608     F0 99 02 00 | 	long	@__system____root_stat
3f60c     B4 91 02 00 | 	long	@__system____default_putc
3f610     30 91 02 00 | 	long	@__system____default_getc
3f614     60 92 02 00 | 	long	@__system____default_flush
3f618     F4 15 03 00 | 	long	@_fatfs_cc_v_close
3f61c     DC 18 03 00 | 	long	@_fatfs_cc_v_read
3f620     68 19 03 00 | 	long	@_fatfs_cc_v_write
3f624     E0 19 03 00 | 	long	@_fatfs_cc_v_lseek
3f628     7C 1A 03 00 | 	long	@_fatfs_cc_v_ioctl
3f62c     A8 1B 03 00 | 	long	@_fatfs_cc_v_flush
3f630     D0 1A 03 00 | 	long	@_fatfs_cc_v_open
3f634     60 15 03 00 | 	long	@_fatfs_cc_v_creat
3f638     30 16 03 00 | 	long	@_fatfs_cc_v_opendir
3f63c     A4 16 03 00 | 	long	@_fatfs_cc_v_closedir
3f640     E4 16 03 00 | 	long	@_fatfs_cc_v_readdir
3f644     B0 17 03 00 | 	long	@_fatfs_cc_v_stat
3f648     90 1A 03 00 | 	long	@_fatfs_cc_v_mkdir
3f64c     B0 1A 03 00 | 	long	@_fatfs_cc_v_rmdir
3f650     A0 1A 03 00 | 	long	@_fatfs_cc_v_remove
3f654     C0 1A 03 00 | 	long	@_fatfs_cc_v_rename
3f658     F4 1B 03 00 | 	long	@_fatfs_cc_v_init
3f65c     FC 1B 03 00 | 	long	@_fatfs_cc_v_deinit
3f660     F4 B9 02 00 | 	long	@_sdmm_cc_v_read
3f664     00 BA 02 00 | 	long	@_sdmm_cc_v_write
3f668     DC BA 02 00 | 	long	@_sdmm_cc_v_close
3f66c     0C BA 02 00 | 	long	@_sdmm_cc_v_ioctl
3f670     D4 BA 02 00 | 	long	@_sdmm_cc_v_flush
3f674     30 BA 02 00 | 	long	@_sdmm_cc_v_lseek
3f678     04 BB 02 00 | 	long	@_sdmm_cc_v_putc
3f67c     50 BB 02 00 | 	long	@_sdmm_cc_v_getc
3f680     B0 4A 02 00 | 	long	@__system___tx
3f684     F0 4A 02 00 | 	long	@__system___rx
3f688     1C A4 02 00 | 	long	@__system___rxtxioctl_0788
3f68c     74 A4 02 00 | 	long	@__system____dummy_flush_0789
3f690                 | __heap_base
3f690     00 00 00 00 
      ...             
56d90     00 00 00 00 
56d94     00 00 00 00 | 	long	0[24002]
56d98                 | objmem
56d98     00 00 00 00 
      ...             
61508     00 00 00 00 
6150c     00 00 00 00 | 	long	0[10718]
61510                 | stackspace
61510     00 00 00 00 | 	long	0[1]
61514 140             | 	org	COG_BSS_START
61514 140             | _var01
61514 140             | 	res	1
61514 141             | _var02
61514 141             | 	res	1
61514 142             | _var03
61514 142             | 	res	1
61514 143             | _var04
61514 143             | 	res	1
61514 144             | _var05
61514 144             | 	res	1
61514 145             | _var06
61514 145             | 	res	1
61514 146             | _var07
61514 146             | 	res	1
61514 147             | _var08
61514 147             | 	res	1
61514 148             | _var09
61514 148             | 	res	1
61514 149             | arg01
61514 149             | 	res	1
61514 14a             | arg02
61514 14a             | 	res	1
61514 14b             | arg03
61514 14b             | 	res	1
61514 14c             | arg04
61514 14c             | 	res	1
61514 14d             | arg05
61514 14d             | 	res	1
61514 14e             | arg06
61514 14e             | 	res	1
61514 14f             | arg07
61514 14f             | 	res	1
61514 150             | arg08
61514 150             | 	res	1
61514 151             | arg09
61514 151             | 	res	1
61514 152             | arg10
61514 152             | 	res	1
61514 153             | local01
61514 153             | 	res	1
61514 154             | local02
61514 154             | 	res	1
61514 155             | local03
61514 155             | 	res	1
61514 156             | local04
61514 156             | 	res	1
61514 157             | local05
61514 157             | 	res	1
61514 158             | local06
61514 158             | 	res	1
61514 159             | local07
61514 159             | 	res	1
61514 15a             | local08
61514 15a             | 	res	1
61514 15b             | local09
61514 15b             | 	res	1
61514 15c             | local10
61514 15c             | 	res	1
61514 15d             | local11
61514 15d             | 	res	1
61514 15e             | local12
61514 15e             | 	res	1
61514 15f             | local13
61514 15f             | 	res	1
61514 160             | local14
61514 160             | 	res	1
61514 161             | local15
61514 161             | 	res	1
61514 162             | local16
61514 162             | 	res	1
61514 163             | local17
61514 163             | 	res	1
61514 164             | local18
61514 164             | 	res	1
61514 165             | local19
61514 165             | 	res	1
61514 166             | local20
61514 166             | 	res	1
61514 167             | local21
61514 167             | 	res	1
61514 168             | local22
61514 168             | 	res	1
61514 169             | local23
61514 169             | 	res	1
61514 16a             | local24
61514 16a             | 	res	1
61514 16b             | local25
61514 16b             | 	res	1
61514 16c             | local26
61514 16c             | 	res	1
61514 16d             | local27
61514 16d             | 	res	1
61514 16e             | local28
61514 16e             | 	res	1
61514 16f             | local29
61514 16f             | 	res	1
61514 170             | local30
61514 170             | 	res	1
61514 171             | local31
61514 171             | 	res	1
61514 172             | local32
61514 172             | 	res	1
61514 173             | local33
61514 173             | 	res	1
61514 174             | local34
61514 174             | 	res	1
61514 175             | local35
61514 175             | 	res	1
61514 176             | local36
61514 176             | 	res	1
61514 177             | local37
61514 177             | 	res	1
61514 178             | local38
61514 178             | 	res	1
61514 179             | local39
61514 179             | 	res	1
61514 17a             | local40
61514 17a             | 	res	1
61514 17b             | local41
61514 17b             | 	res	1
61514 17c             | local42
61514 17c             | 	res	1
61514 17d             | local43
61514 17d             | 	res	1
61514 17e             | local44
61514 17e             | 	res	1
61514 17f             | local45
61514 17f             | 	res	1
61514 180             | local46
61514 180             | 	res	1
61514 181             | local47
61514 181             | 	res	1
61514 182             | local48
61514 182             | 	res	1
61514 183             | local49
61514 183             | 	res	1
61514 184             | local50
61514 184             | 	res	1
61514 185             | local51
61514 185             | 	res	1
61514 186             | local52
61514 186             | 	res	1
61514 187             | muldiva_
61514 187             | 	res	1
61514 188             | muldivb_
61514 188             | 	res	1
61514 189             | 	fit	480
61514 189             | 
