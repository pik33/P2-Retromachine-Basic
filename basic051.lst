00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic051.p2asm"
00000                 | con
00000                 | 	_clkfreq = 338695652
00000                 | 	_clkmode = 28773115
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 49
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_cogstop = 207
00000                 | 	token_memlo = 208
00000                 | 	token_memtop = 209
00000                 | 	token_setcolor = 210
00000                 | 	token_getcolor = 211
00000                 | 	token_restorepalette = 212
00000                 | 	token_pads = 213
00000                 | 	token_padw = 214
00000                 | 	token_findfirst = 215
00000                 | 	token_findnext = 216
00000                 | 	token_defchar = 217
00000                 | 	token_setamode = 218
00000                 | 	token_getrealfreq = 219
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 338695652
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1b70afb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 7A 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 03 90 5D |  if_ne	jmp	#spininit
0040c 002 3C F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 02 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 85 DB 80 FF 
00420 007 00 F0 65 FD | 	hubset	##28773112
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 85 DB 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##28773115
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 0A 18 8A FF 
00440 00f 14 C8 6F FC | 	wrlong	##338695652, #20
00444 010 BC 02 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
006fc 0be 00 00 00 00 
00700 0bf 00 00 00 00 | 	orgf	192
00704 0c0             | skip_clock_set_
00704 0c0 6C 12 A2 FD | 	call	#_program
00708 0c1             | cogexit
00708 0c1 38 01 80 FF 
0070c 0c2 1F 00 66 FD | 	waitx	##160000
00710 0c3 01 92 62 FD | 	cogid	arg01
00714 0c4 03 92 62 FD | 	cogstop	arg01
00718 0c5             | spininit
00718 0c5 61 65 06 FB | 	rdlong	objptr, ptra++
0071c 0c6 61 7B 06 FB | 	rdlong	result1, ptra++
00720 0c7 28 06 64 FD | 	setq	#3
00724 0c8 00 93 06 FB | 	rdlong	arg01, ptra
00728 0c9 04 F0 87 F1 | 	sub	ptra, #4
0072c 0ca 2D 7A 62 FD | 	call	result1
00730 0cb D4 FF 9F FD | 	jmp	#cogexit
00734 0cc             | FCACHE_LOAD_
00734 0cc F9 AD 01 F6 |     mov	fcache_tmpb_,ptrb
00738 0cd 2B F2 63 FD |     pop	ptrb
0073c 0ce D5 EC 8B F9 |     altd	pa,ret_instr_
00740 0cf D5 00 00 F6 |     mov	 0-0, ret_instr_
00744 0d0 28 EC 63 FD |     setq	pa
00748 0d1 E1 01 04 FB |     rdlong	$0, ptrb++
0074c 0d2 2A F2 63 FD |     push	ptrb
00750 0d3 D6 F2 03 F6 |     mov ptrb,fcache_tmpb_
00754 0d4 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00758 0d5             | ret_instr_
00758 0d5 00 FE 07 02 |     _ret_ cmp inb,#0
0075c 0d6             | fcache_tmpb_
0075c 0d6 00 00 00 00 |     long 0
00760 0d7             | fcache_load_ptr_
00760 0d7 CC 00 00 00 |     long FCACHE_LOAD_
00764 0d8             | builtin_bytefill_
00764 0d8 01 96 56 F0 |         shr	arg03, #1 wc
00768 0d9 49 95 42 CC |  if_c   wrbyte	arg02, arg01
0076c 0da 01 92 06 C1 |  if_c   add	arg01, #1
00770 0db 00 94 FE F9 |         movbyts	arg02, #0
00774 0dc             | builtin_wordfill_
00774 0dc 01 96 56 F0 |         shr	arg03, #1 wc
00778 0dd 49 95 52 CC |  if_c   wrword	arg02, arg01
0077c 0de 02 92 06 C1 |  if_c   add	arg01, #2
00780 0df 4A 95 2A F9 |         setword	arg02, arg02, #1
00784 0e0             | builtin_longfill_
00784 0e0 49 01 88 FC |         wrfast	#0,arg01
00788 0e1 00 96 0E F2 |         cmp	arg03, #0 wz
0078c 0e2 4B 03 D8 5C |  if_nz  rep	#1, arg03
00790 0e3 17 94 62 5D |  if_nz  wflong	arg02
00794 0e4 2D 00 64 FD |         ret
00798 0e5             | COUNT_
00798 0e5 00 00 00 00 |     long 0
0079c 0e6             | RETADDR_
0079c 0e6 00 00 00 00 |     long 0
007a0 0e7             | fp
007a0 0e7 00 00 00 00 |     long 0
007a4 0e8             | pushregs_
007a4 0e8 2B EC 63 FD |     pop  pa
007a8 0e9 2B CC 61 FD |     pop  RETADDR_
007ac 0ea 03 CA 95 FB |     tjz  COUNT_, #pushregs_done_
007b0 0eb FF CB 8D F9 |     altd  COUNT_, #511
007b4 0ec 28 00 64 FD |     setq #0-0
007b8 0ed 61 A7 66 FC |     wrlong local01, ptra++
007bc 0ee             | pushregs_done_
007bc 0ee 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
007c0 0ef 61 CB 65 FC |     wrlong COUNT_, ptra++
007c4 0f0 F8 CF 01 F6 |     mov    fp, ptra
007c8 0f1 2C EC 63 FD |     jmp  pa
007cc 0f2             |  popregs_
007cc 0f2 2B EC 63 FD |     pop    pa
007d0 0f3 28 04 64 FD |     setq   #2
007d4 0f4 5F CB 05 FB |     rdlong COUNT_, --ptra
007d8 0f5 02 CA 75 FB |     djf    COUNT_, #popregs__ret
007dc 0f6 28 CA 61 FD |     setq   COUNT_
007e0 0f7 5F A7 06 FB |     rdlong local01, --ptra
007e4 0f8             | popregs__ret
007e4 0f8 2A CC 61 FD |     push   RETADDR_
007e8 0f9 2C EC 63 FD |     jmp    pa
007ec 0fa             | 
007ec 0fa             | divide_
007ec 0fa 88 11 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
007f0 0fb 6C 62 62 FD |        wrc     itmp2_                         'store sign of y
007f4 0fc 87 0F 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
007f8 0fd 88 0F 13 FD |        qdiv    muldiva_, muldivb_             'queue divide
007fc 0fe 01 62 66 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00800 0ff 18 10 63 FD |        getqx   muldivb_                       'get quotient
00804 100 19 0E 63 FD |        getqy   muldiva_                       'get remainder
00808 101 87 0F 83 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0080c 102 00 62 16 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00810 103 88 11 83 06 |  _ret_ negc    muldivb_,muldivb_     
00814 104             | __pc long 0
00814 104 00 00 00 00 
00818 105             | __setjmp
00818 105 2B 08 62 FD |     pop __pc
0081c 106 00 7A 06 F6 |     mov result1, #0
00820 107 00 7C 06 F6 |     mov result2, #0
00824 108 49 5D 02 F6 |     mov abortchain, arg01
00828 109 49 CF 61 FC |     wrlong fp, arg01
0082c 10a 04 92 06 F1 |     add arg01, #4
00830 10b 49 F1 63 FC |     wrlong ptra, arg01
00834 10c 04 92 06 F1 |     add arg01, #4
00838 10d 49 65 62 FC |     wrlong objptr, arg01
0083c 10e 04 92 06 F1 |     add arg01, #4
00840 10f 49 09 62 FC |     wrlong __pc, arg01
00844 110 2C 08 62 FD |     jmp __pc
00848 111             | __unwind_pc long 0
00848 111 00 00 00 00 
0084c 112             | __unwind_stack
0084c 112 2B 22 62 FD |    pop  __unwind_pc
00850 113             | __unwind_loop
00850 113 4A 93 0A F2 |    cmp  arg01, arg02 wz
00854 114 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00858 115 49 F1 03 F6 |    mov   ptra, arg01
0085c 116 6C FF BF FD |    call  #popregs_
00860 117 E7 92 02 F6 |    mov   arg01, fp
00864 118 E8 FF 9F FD |    jmp   #__unwind_loop
00868 119             | __unwind_stack_ret
00868 119 2C 22 62 FD |    jmp  __unwind_pc
0086c 11a             | __longjmp
0086c 11a 2B 08 62 FD |     pop __pc
00870 11b 00 92 0E F2 |     cmp    arg01, #0 wz
00874 11c 30 00 90 AD |  if_z jmp #nocatch
00878 11d 4A 7B 02 F6 |     mov result1, arg02
0087c 11e 01 7C 06 F6 |     mov result2, #1
00880 11f 49 95 02 FB |     rdlong arg02, arg01
00884 120 04 92 06 F1 |     add arg01, #4
00888 121 49 F1 03 FB |     rdlong ptra, arg01
0088c 122 04 92 06 F1 |     add arg01, #4
00890 123 49 65 02 FB |     rdlong objptr, arg01
00894 124 04 92 06 F1 |     add arg01, #4
00898 125 49 09 02 FB |     rdlong __pc, arg01
0089c 126 E7 92 02 F6 |     mov arg01, fp
008a0 127 A8 FF BF FD |     call #__unwind_stack
008a4 128             | __longjmp_ret
008a4 128 2C 08 62 FD |     jmp  __pc
008a8 129             | nocatch
008a8 129 00 96 0E F2 |     cmp arg03, #0 wz
008ac 12a 58 FE 9F AD |  if_z jmp #cogexit
008b0 12b F0 FF 9F FD |     jmp #__longjmp_ret
008b4 12c             | 
008b4 12c             | __heap_ptr
008b4 12c 90 F8 03 00 | 	long	@__heap_base
008b8 12d             | __methods__
008b8 12d 2C F5 03 00 | 	long	@__methodtable__
008bc 12e             | abortchain
008bc 12e 00 00 00 00 | 	long	0
008c0 12f             | entryptr__
008c0 12f 04 04 00 00 | 	long	@entry
008c4 130             | itmp1_
008c4 130 00 00 00 00 | 	long	0
008c8 131             | itmp2_
008c8 131 00 00 00 00 | 	long	0
008cc 132             | objptr
008cc 132 98 6F 05 00 | 	long	@objmem
008d0 133             | ptr__Audio2_004_spin2_dat__
008d0 133 6C E4 03 00 | 	long	@_Audio2_004_spin2_dat_
008d4 134             | ptr___system__dat__
008d4 134 54 E8 03 00 | 	long	@__system__dat_
008d8 135             | ptr__dat__
008d8 135 3C 39 03 00 | 	long	@_dat_
008dc 136             | ptr__fatfs_cc_dat__
008dc 136 9C EF 03 00 | 	long	@_fatfs_cc_dat_
008e0 137             | ptr__hg010b_spin2_dat__
008e0 137 A4 6A 03 00 | 	long	@_hg010b_spin2_dat_
008e4 138             | ptr__housekeeper_
008e4 138 E4 15 00 00 | 	long	@_housekeeper
008e8 139             | ptr__psram16drv_spin2_dat__
008e8 139 54 AA 03 00 | 	long	@_psram16drv_spin2_dat_
008ec 13a             | ptr__psram_spin2_dat__
008ec 13a 0C A8 03 00 | 	long	@_psram_spin2_dat_
008f0 13b             | ptr__usbnew_spin2_dat__
008f0 13b E4 B9 03 00 | 	long	@_usbnew_spin2_dat_
008f4 13c             | ptr_stackspace_
008f4 13c 94 18 06 00 | 	long	@stackspace
008f8 13d             | result1
008f8 13d 00 00 00 00 | 	long	0
008fc 13e             | result2
008fc 13e 01 00 00 00 | 	long	1
00900 13f             | result3
00900 13f 02 00 00 00 | 	long	2
00904 140             | COG_BSS_START
00904 140             | 	fit	480
00904                 | 	orgh
00904                 | hubentry
00904                 | 
00904                 | ' 
00904                 | ' '-------------------------------------------------------------------------------------------------------- 
00904                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00904                 | ' '--------------------------------------------------------------------------------------------------------
00904                 | ' 
00904                 | ' ''-------------------------------------------------------------------------------------------------------
00904                 | ' '                     A full screen editor for programming and entering data
00904                 | ' ''-------------------------------------------------------------------------------------------------------
00904                 | ' 
00904                 | ' function edit() as string
00904                 | _edit
00904     1B CA 05 F6 | 	mov	COUNT_, #27
00908     E8 00 A0 FD | 	call	#pushregs_
0090c     00 A6 06 F6 | 	mov	local01, #0
00910     00 A8 06 F6 | 	mov	local02, #0
00914     00 AA 06 F6 | 	mov	local03, #0
00918     00 AC 06 F6 | 	mov	local04, #0
0091c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0091c                 | ' do
0091c                 | LR__0001
0091c     01 92 06 F6 | 	mov	arg01, #1
00920     9C 22 B2 FD | 	call	#_hg010b_spin2_waitvbl
00924     24 37 B2 FD | 	call	#_usbnew_spin2_get_key
00928     3D AF 02 F6 | 	mov	local05, result1
0092c                 | '   return hkbd_led_rep
0092c     13 00 00 FF 
00930     E0 77 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10208
00934     3B 7B C2 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00938     13 00 00 FF 
0093c     E0 77 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10208
00940     54 00 00 FF 
00944     BC 64 06 F1 | 	add	objptr, ##43196
00948     32 7B 62 FC | 	wrlong	result1, objptr
0094c     54 00 00 FF 
00950     BC 64 86 F1 | 	sub	objptr, ##43196
00954                 | ' if key>0 andalso key<4 andalso keyclick=1 then audio.play16(7,@atari2_spl,43,4096,1758,0,300) : audio.stop(7)
00954     01 AE 16 F2 | 	cmp	local05, #1 wc
00958     88 00 90 CD |  if_b	jmp	#LR__0002
0095c     04 AE 16 F2 | 	cmp	local05, #4 wc
00960     80 00 90 3D |  if_ae	jmp	#LR__0002
00964     52 00 00 FF 
00968     E0 64 06 F1 | 	add	objptr, ##42208
0096c     32 B1 02 FB | 	rdlong	local06, objptr
00970     52 00 00 FF 
00974     E0 64 86 F1 | 	sub	objptr, ##42208
00978     01 B0 0E F2 | 	cmp	local06, #1 wz
0097c     64 00 90 5D |  if_ne	jmp	#LR__0002
00980     35 95 02 F6 | 	mov	arg02, ptr__dat__
00984     04 00 00 FF 
00988     A4 94 06 F1 | 	add	arg02, ##2212
0098c     2B B2 06 F6 | 	mov	local07, #43
00990     0C B4 C6 F9 | 	decod	local08, #12
00994     03 00 00 FF 
00998     DE B6 06 F6 | 	mov	local09, ##1758
0099c     00 B8 06 F6 | 	mov	local10, #0
009a0     2C BB 06 F6 | 	mov	local11, #300
009a4     07 92 06 F6 | 	mov	arg01, #7
009a8     2B 96 06 F6 | 	mov	arg03, #43
009ac     0C 98 C6 F9 | 	decod	arg04, #12
009b0     03 00 00 FF 
009b4     DE 9A 06 F6 | 	mov	arg05, ##1758
009b8     00 9C 06 F6 | 	mov	arg06, #0
009bc     2C 9F 06 F6 | 	mov	arg07, #300
009c0     0B 00 00 FF 
009c4     CC 64 06 F1 | 	add	objptr, ##5836
009c8     D0 3D B2 FD | 	call	#_Audio2_004_spin2_play16
009cc     07 B0 06 F6 | 	mov	local06, #7
009d0                 | ' 
009d0                 | ' base2:=@channel0[0]+64*channel
009d0     32 BD 02 F6 | 	mov	local12, objptr
009d4                 | ' word[base2+32]:=0
009d4     EC BD 06 F1 | 	add	local12, #492
009d8     5E 01 58 FC | 	wrword	#0, local12
009dc     0B 00 00 FF 
009e0     CC 64 86 F1 | 	sub	objptr, ##5836
009e4                 | LR__0002
009e4                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
009e4     04 AE 16 F2 | 	cmp	local05, #4 wc
009e8     20 00 90 CD |  if_b	jmp	#LR__0003
009ec     00 00 40 FF 
009f0     00 AE 16 F2 | 	cmp	local05, ##-2147483648 wc
009f4     57 B1 02 C6 |  if_b	mov	local06, local05
009f8     58 B1 E2 C8 |  if_b	getbyte	local06, local06, #0
009fc     E0 B0 16 C2 |  if_b	cmp	local06, #224 wc
00a00     57 AB 02 C6 |  if_b	mov	local03, local05
00a04     01 A6 06 C6 |  if_b	mov	local01, #1
00a08     55 AD 02 C6 |  if_b	mov	local04, local03
00a0c                 | LR__0003
00a0c                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00a0c     00 00 40 FF 
00a10     01 AE 16 F2 | 	cmp	local05, ##-2147483647 wc
00a14     00 A8 06 36 |  if_ae	mov	local02, #0
00a18     00 A6 06 36 |  if_ae	mov	local01, #0
00a1c                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00a1c     00 AE 0E F2 | 	cmp	local05, #0 wz
00a20     01 A6 0E A2 |  if_e	cmp	local01, #1 wz
00a24     01 A8 06 A1 |  if_e	add	local02, #1
00a28                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00a28     00 00 40 FF 
00a2c     00 AE 16 F2 | 	cmp	local05, ##-2147483648 wc
00a30     19 A8 0E C2 |  if_b	cmp	local02, #25 wz
00a34     55 AD 02 86 |  if_c_and_z	mov	local04, local03
00a38     15 A8 06 86 |  if_c_and_z	mov	local02, #21
00a3c                 | ' 
00a3c                 | ' '' there is a key pressed and it needs to be processed
00a3c                 | ' 
00a3c                 | ' if key3<>0 then
00a3c     00 AC 0E F2 | 	cmp	local04, #0 wz
00a40     D8 FE 9F AD |  if_e	jmp	#LR__0001
00a44                 | '   if keyclick=1 then audio.play16(7,keyclick_spl,43,4096,spl_len,spl_len,0) ' make a click
00a44     52 00 00 FF 
00a48     E0 64 06 F1 | 	add	objptr, ##42208
00a4c     32 B1 02 FB | 	rdlong	local06, objptr
00a50     52 00 00 FF 
00a54     E0 64 86 F1 | 	sub	objptr, ##42208
00a58     01 B0 0E F2 | 	cmp	local06, #1 wz
00a5c     50 00 90 5D |  if_ne	jmp	#LR__0004
00a60     54 00 00 FF 
00a64     80 64 06 F1 | 	add	objptr, ##43136
00a68     32 95 02 FB | 	rdlong	arg02, objptr
00a6c     2B B2 06 F6 | 	mov	local07, #43
00a70     0C B4 C6 F9 | 	decod	local08, #12
00a74     04 64 86 F1 | 	sub	objptr, #4
00a78     32 B9 02 FB | 	rdlong	local10, objptr
00a7c     5C B7 02 F6 | 	mov	local09, local10
00a80     00 BA 06 F6 | 	mov	local11, #0
00a84     07 92 06 F6 | 	mov	arg01, #7
00a88     2B 96 06 F6 | 	mov	arg03, #43
00a8c     0C 98 C6 F9 | 	decod	arg04, #12
00a90     5B 9B 02 F6 | 	mov	arg05, local09
00a94     5C 9D 02 F6 | 	mov	arg06, local10
00a98     00 9E 06 F6 | 	mov	arg07, #0
00a9c     48 00 00 FF 
00aa0     B0 65 86 F1 | 	sub	objptr, ##37296
00aa4     F4 3C B2 FD | 	call	#_Audio2_004_spin2_play16
00aa8     0B 00 00 FF 
00aac     CC 64 86 F1 | 	sub	objptr, ##5836
00ab0                 | LR__0004
00ab0     56 93 02 F6 | 	mov	arg01, local04
00ab4     10 07 B2 FD | 	call	#_scantochar
00ab8     3D BF 02 F6 | 	mov	local13, result1
00abc                 | '   if leds and 2 = 2 then 						' caps lock
00abc     54 00 00 FF 
00ac0     BC 64 06 F1 | 	add	objptr, ##43196
00ac4     32 C1 02 FB | 	rdlong	local14, objptr
00ac8     54 00 00 FF 
00acc     BC 64 86 F1 | 	sub	objptr, ##43196
00ad0     60 B1 0A F6 | 	mov	local06, local14 wz
00ad4     4C 00 90 AD |  if_e	jmp	#LR__0012
00ad8                 | '     if key4>96 andalso key4<123 then                 
00ad8     61 BE 16 F2 | 	cmp	local13, #97 wc
00adc     0C 00 90 CD |  if_b	jmp	#LR__0005
00ae0     7B BE 16 F2 | 	cmp	local13, #123 wc
00ae4     20 BE 86 C1 |  if_b	sub	local13, #32
00ae8     38 00 90 CD |  if_b	jmp	#LR__0011
00aec                 | LR__0005
00aec     41 BE 16 F2 | 	cmp	local13, #65 wc
00af0     0C 00 90 CD |  if_b	jmp	#LR__0006
00af4     5B BE 16 F2 | 	cmp	local13, #91 wc
00af8     20 BE 06 C1 |  if_b	add	local13, #32
00afc     24 00 90 CD |  if_b	jmp	#LR__0010
00b00                 | LR__0006
00b00     17 BE 16 F2 | 	cmp	local13, #23 wc
00b04     0C 00 90 CD |  if_b	jmp	#LR__0007
00b08     20 BE 16 F2 | 	cmp	local13, #32 wc
00b0c     09 BE 86 C1 |  if_b	sub	local13, #9
00b10     10 00 90 CD |  if_b	jmp	#LR__0009
00b14                 | LR__0007
00b14     0E BE 16 F2 | 	cmp	local13, #14 wc
00b18     08 00 90 CD |  if_b	jmp	#LR__0008
00b1c     17 BE 16 F2 | 	cmp	local13, #23 wc
00b20     27 BE 06 C1 |  if_b	add	local13, #39
00b24                 | LR__0008
00b24                 | LR__0009
00b24                 | LR__0010
00b24                 | LR__0011
00b24                 | LR__0012
00b24                 | '  
00b24                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00b24     01 BE 16 F2 | 	cmp	local13, #1 wc
00b28     BC 01 90 CD |  if_b	jmp	#LR__0017
00b2c     7F BE 16 F2 | 	cmp	local13, #127 wc
00b30     3C 64 06 C1 |  if_b	add	objptr, #60
00b34     32 B1 E2 CA |  if_b	rdword	local06, objptr
00b38     3C 64 86 C1 |  if_b	sub	objptr, #60
00b3c     FE B0 16 C2 |  if_b	cmp	local06, #254 wc
00b40     A4 01 90 3D |  if_ae	jmp	#LR__0017
00b44                 | '     if do_insert then							' move the characters right
00b44     54 00 00 FF 
00b48     A4 64 06 F1 | 	add	objptr, ##43172
00b4c     32 B1 0A FB | 	rdlong	local06, objptr wz
00b50     54 00 00 FF 
00b54     A4 64 86 F1 | 	sub	objptr, ##43172
00b58     84 01 90 AD |  if_e	jmp	#LR__0016
00b5c                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00b5c     3E 64 06 F1 | 	add	objptr, #62
00b60     32 B3 C2 FA | 	rdbyte	local07, objptr
00b64     59 B5 E2 F8 | 	getbyte	local08, local07, #0
00b68     07 B4 66 F0 | 	shl	local08, #7
00b6c     3A 64 86 F1 | 	sub	objptr, #58
00b70     32 C3 02 FB | 	rdlong	local15, objptr
00b74     61 C5 02 F6 | 	mov	local16, local15
00b78     5A C5 02 F1 | 	add	local16, local08
00b7c     7F C4 06 F1 | 	add	local16, #127
00b80     59 B3 E2 F8 | 	getbyte	local07, local07, #0
00b84     07 B2 66 F0 | 	shl	local07, #7
00b88     59 C3 02 F1 | 	add	local15, local07
00b8c     38 64 06 F1 | 	add	objptr, #56
00b90     32 B7 E2 FA | 	rdword	local09, objptr
00b94     3C 64 86 F1 | 	sub	objptr, #60
00b98     5B BB 52 F6 | 	abs	local11, local09 wc
00b9c     01 BA 46 F0 | 	shr	local11, #1
00ba0     5D C3 82 F3 | 	sumc	local15, local11
00ba4     01 C2 06 F1 | 	add	local15, #1
00ba8                 | LR__0013
00ba8     62 C7 02 F6 | 	mov	local17, local16
00bac     01 C6 86 F1 | 	sub	local17, #1
00bb0     63 93 02 F6 | 	mov	arg01, local17
00bb4     38 05 B2 FD | 	call	#_pspeek
00bb8     3D C9 02 F6 | 	mov	local18, result1
00bbc     64 CB E2 F8 | 	getbyte	local19, local18, #0
00bc0     65 CD 02 F6 | 	mov	local20, local19
00bc4     62 93 02 F6 | 	mov	arg01, local16
00bc8     66 95 02 F6 | 	mov	arg02, local20
00bcc     D8 04 B2 FD | 	call	#_pspoke
00bd0     01 C4 86 F1 | 	sub	local16, #1
00bd4     61 C5 52 F2 | 	cmps	local16, local15 wc
00bd8     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00bdc     54 00 00 FF 
00be0     C4 64 06 F1 | 	add	objptr, ##43204
00be4     32 01 68 FC | 	wrlong	#0, objptr
00be8     54 00 00 FF 
00bec     86 64 86 F1 | 	sub	objptr, ##43142
00bf0     32 B3 C2 FA | 	rdbyte	local07, objptr
00bf4     59 B5 E2 F8 | 	getbyte	local08, local07, #0
00bf8     07 B4 66 F0 | 	shl	local08, #7
00bfc     3A 64 86 F1 | 	sub	objptr, #58
00c00     32 B7 02 FB | 	rdlong	local09, objptr
00c04     5B C5 02 F6 | 	mov	local16, local09
00c08     5A C5 02 F1 | 	add	local16, local08
00c0c     38 64 06 F1 | 	add	objptr, #56
00c10     32 BB E2 FA | 	rdword	local11, objptr
00c14     5D B9 32 F9 | 	getword	local10, local11, #0
00c18     5C CF 52 F6 | 	abs	local21, local10 wc
00c1c     01 CE 46 F0 | 	shr	local21, #1
00c20     67 CF 82 F6 | 	negc	local21, local21
00c24     67 C5 02 F1 | 	add	local16, local21
00c28     59 B3 E2 F8 | 	getbyte	local07, local07, #0
00c2c     07 B2 66 F0 | 	shl	local07, #7
00c30     5B B5 02 F6 | 	mov	local08, local09
00c34     3C 64 86 F1 | 	sub	objptr, #60
00c38     5A D1 02 F6 | 	mov	local22, local08
00c3c     59 D1 02 F1 | 	add	local22, local07
00c40     80 D0 06 F1 | 	add	local22, #128
00c44                 | LR__0014
00c44     68 C5 52 F2 | 	cmps	local16, local22 wc
00c48     94 00 90 3D |  if_ae	jmp	#LR__0015
00c4c     3C 64 06 F1 | 	add	objptr, #60
00c50     32 B1 E2 FA | 	rdword	local06, objptr
00c54     54 00 00 FF 
00c58     88 64 06 F1 | 	add	objptr, ##43144
00c5c     32 B5 02 FB | 	rdlong	local08, objptr
00c60     01 B4 66 F0 | 	shl	local08, #1
00c64     5A B1 02 F1 | 	add	local06, local08
00c68     54 00 00 FF 
00c6c     86 64 86 F1 | 	sub	objptr, ##43142
00c70     32 C1 C2 FA | 	rdbyte	local14, objptr
00c74     3E 64 86 F1 | 	sub	objptr, #62
00c78     04 C0 66 F0 | 	shl	local14, #4
00c7c     04 C0 06 F1 | 	add	local14, #4
00c80     62 93 02 F6 | 	mov	arg01, local16
00c84     68 04 B2 FD | 	call	#_pspeek
00c88     3D B3 E2 F8 | 	getbyte	local07, result1, #0
00c8c     41 64 06 F1 | 	add	objptr, #65
00c90     32 B5 02 FB | 	rdlong	local08, objptr
00c94     04 64 06 F1 | 	add	objptr, #4
00c98     32 B9 02 FB | 	rdlong	local10, objptr
00c9c     45 64 86 F1 | 	sub	objptr, #69
00ca0     5C B7 02 F6 | 	mov	local09, local10
00ca4     58 93 02 F6 | 	mov	arg01, local06
00ca8     60 95 02 F6 | 	mov	arg02, local14
00cac     59 97 02 F6 | 	mov	arg03, local07
00cb0     5A 99 02 F6 | 	mov	arg04, local08
00cb4     5B 9B 02 F6 | 	mov	arg05, local09
00cb8     B8 1C B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00cbc     54 00 00 FF 
00cc0     C4 64 06 F1 | 	add	objptr, ##43204
00cc4     32 B1 02 FB | 	rdlong	local06, objptr
00cc8     01 B0 06 F1 | 	add	local06, #1
00ccc     32 B1 62 FC | 	wrlong	local06, objptr
00cd0     54 00 00 FF 
00cd4     C4 64 86 F1 | 	sub	objptr, ##43204
00cd8     01 C4 06 F1 | 	add	local16, #1
00cdc     64 FF 9F FD | 	jmp	#LR__0014
00ce0                 | LR__0015
00ce0                 | LR__0016
00ce0     5F 93 02 F6 | 	mov	arg01, local13
00ce4     40 20 B2 FD | 	call	#_hg010b_spin2_putchar
00ce8                 | LR__0017
00ce8                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then
00ce8     01 BE 16 F2 | 	cmp	local13, #1 wc
00cec     9C 00 90 CD |  if_b	jmp	#LR__0018
00cf0     7F BE 16 F2 | 	cmp	local13, #127 wc
00cf4     94 00 90 3D |  if_ae	jmp	#LR__0018
00cf8     3C 64 06 F1 | 	add	objptr, #60
00cfc     32 B1 E2 FA | 	rdword	local06, objptr
00d00     3C 64 86 F1 | 	sub	objptr, #60
00d04     FE B0 0E F2 | 	cmp	local06, #254 wz
00d08     52 00 00 AF 
00d0c     E0 64 06 A1 |  if_e	add	objptr, ##42208
00d10     32 B5 02 AB |  if_e	rdlong	local08, objptr
00d14     52 00 00 AF 
00d18     E0 64 86 A1 |  if_e	sub	objptr, ##42208
00d1c     5A B3 02 A6 |  if_e	mov	local07, local08
00d20     01 B2 0E A2 |  if_e	cmp	local07, #1 wz
00d24     64 00 90 5D |  if_ne	jmp	#LR__0018
00d28     35 95 02 F6 | 	mov	arg02, ptr__dat__
00d2c     04 00 00 FF 
00d30     A4 94 06 F1 | 	add	arg02, ##2212
00d34     2B B2 06 F6 | 	mov	local07, #43
00d38     0C B4 C6 F9 | 	decod	local08, #12
00d3c     03 00 00 FF 
00d40     DE B6 06 F6 | 	mov	local09, ##1758
00d44     00 B8 06 F6 | 	mov	local10, #0
00d48     2C BB 06 F6 | 	mov	local11, #300
00d4c     07 92 06 F6 | 	mov	arg01, #7
00d50     2B 96 06 F6 | 	mov	arg03, #43
00d54     0C 98 C6 F9 | 	decod	arg04, #12
00d58     03 00 00 FF 
00d5c     DE 9A 06 F6 | 	mov	arg05, ##1758
00d60     00 9C 06 F6 | 	mov	arg06, #0
00d64     2C 9F 06 F6 | 	mov	arg07, #300
00d68     0B 00 00 FF 
00d6c     CC 64 06 F1 | 	add	objptr, ##5836
00d70     28 3A B2 FD | 	call	#_Audio2_004_spin2_play16
00d74                 | ' 
00d74                 | ' base2:=@channel0[0]+64*channel
00d74     32 BD 02 F6 | 	mov	local12, objptr
00d78     C0 93 06 F6 | 	mov	arg01, #448
00d7c                 | ' word[base2+32]:=0
00d7c     EC BD 06 F1 | 	add	local12, #492
00d80     5E 01 58 FC | 	wrword	#0, local12
00d84     0B 00 00 FF 
00d88     CC 64 86 F1 | 	sub	objptr, ##5836
00d8c                 | LR__0018
00d8c                 | '     
00d8c                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00d8c     8D BE 0E F2 | 	cmp	local13, #141 wz
00d90     B0 00 90 5D |  if_ne	jmp	#LR__0022
00d94     93 01 00 FF 
00d98     0E D3 06 F6 | 	mov	local23, ##@LR__5487
00d9c                 | '     line$="" 
00d9c                 | '     for i=editor_spaces to 127
00d9c     38 00 00 FF 
00da0     D8 65 06 F1 | 	add	objptr, ##29144
00da4     32 C5 02 FB | 	rdlong	local16, objptr
00da8     38 00 00 FF 
00dac     D8 65 86 F1 | 	sub	objptr, ##29144
00db0                 | LR__0019
00db0     80 C4 56 F2 | 	cmps	local16, #128 wc
00db4     44 00 90 3D |  if_ae	jmp	#LR__0020
00db8     3E 64 06 F1 | 	add	objptr, #62
00dbc     32 BB C2 FA | 	rdbyte	local11, objptr
00dc0     07 BA 66 F0 | 	shl	local11, #7
00dc4     3A 64 86 F1 | 	sub	objptr, #58
00dc8     32 93 02 FB | 	rdlong	arg01, objptr
00dcc     04 64 86 F1 | 	sub	objptr, #4
00dd0     5D 93 02 F1 | 	add	arg01, local11
00dd4     62 93 02 F1 | 	add	arg01, local16
00dd8     14 03 B2 FD | 	call	#_pspeek
00ddc     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
00de0     2C 58 B2 FD | 	call	#__system__Chr_S
00de4     3D 95 02 F6 | 	mov	arg02, result1
00de8     69 93 02 F6 | 	mov	arg01, local23
00dec     10 3E B2 FD | 	call	#__system___string_concat
00df0     3D D3 02 F6 | 	mov	local23, result1
00df4     01 C4 06 F1 | 	add	local16, #1
00df8     B4 FF 9F FD | 	jmp	#LR__0019
00dfc                 | LR__0020
00dfc                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00dfc     54 00 00 FF 
00e00     A4 64 06 F1 | 	add	objptr, ##43172
00e04     32 B1 0A FB | 	rdlong	local06, objptr wz
00e08     54 00 00 FF 
00e0c     A4 64 86 F1 | 	sub	objptr, ##43172
00e10     24 00 90 AD |  if_e	jmp	#LR__0021
00e14     3E 64 06 F1 | 	add	objptr, #62
00e18     32 B3 C2 FA | 	rdbyte	local07, objptr
00e1c     3E 64 86 F1 | 	sub	objptr, #62
00e20     23 B2 16 F2 | 	cmp	local07, #35 wc
00e24     3E 64 06 C1 |  if_b	add	objptr, #62
00e28     32 93 C2 CA |  if_b	rdbyte	arg01, objptr
00e2c     3E 64 86 C1 |  if_b	sub	objptr, #62
00e30     01 92 06 C1 |  if_b	add	arg01, #1
00e34     78 24 B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00e38                 | LR__0021
00e38     78 26 B2 FD | 	call	#_hg010b_spin2_crlf
00e3c                 | '     v.crlf() 
00e3c                 | '     return  line$
00e3c     69 7B 02 F6 | 	mov	result1, local23
00e40     94 07 90 FD | 	jmp	#LR__0049
00e44                 | LR__0022
00e44     56 BF E2 F8 | 	getbyte	local13, local04, #0
00e48                 | '   
00e48                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then audio.play16(7,@atari2_spl,43,4096,1758,0,300) : audio.stop(7)  			' tab
00e48     2B BE 0E F2 | 	cmp	local13, #43 wz
00e4c     98 00 90 5D |  if_ne	jmp	#LR__0023
00e50     3C 64 06 F1 | 	add	objptr, #60
00e54     32 B1 E2 FA | 	rdword	local06, objptr
00e58     3C 64 86 F1 | 	sub	objptr, #60
00e5c     F0 B0 16 F2 | 	cmp	local06, #240 wc
00e60     84 00 90 CD |  if_b	jmp	#LR__0023
00e64     52 00 00 FF 
00e68     E0 64 06 F1 | 	add	objptr, ##42208
00e6c     32 B5 02 FB | 	rdlong	local08, objptr
00e70     52 00 00 FF 
00e74     E0 64 86 F1 | 	sub	objptr, ##42208
00e78     5A B3 02 F6 | 	mov	local07, local08
00e7c     01 B2 0E F2 | 	cmp	local07, #1 wz
00e80     64 00 90 5D |  if_ne	jmp	#LR__0023
00e84     35 95 02 F6 | 	mov	arg02, ptr__dat__
00e88     04 00 00 FF 
00e8c     A4 94 06 F1 | 	add	arg02, ##2212
00e90     2B B2 06 F6 | 	mov	local07, #43
00e94     0C B4 C6 F9 | 	decod	local08, #12
00e98     03 00 00 FF 
00e9c     DE B6 06 F6 | 	mov	local09, ##1758
00ea0     00 B8 06 F6 | 	mov	local10, #0
00ea4     2C BB 06 F6 | 	mov	local11, #300
00ea8     07 92 06 F6 | 	mov	arg01, #7
00eac     2B 96 06 F6 | 	mov	arg03, #43
00eb0     0C 98 C6 F9 | 	decod	arg04, #12
00eb4     03 00 00 FF 
00eb8     DE 9A 06 F6 | 	mov	arg05, ##1758
00ebc     00 9C 06 F6 | 	mov	arg06, #0
00ec0     2C 9F 06 F6 | 	mov	arg07, #300
00ec4     0B 00 00 FF 
00ec8     CC 64 06 F1 | 	add	objptr, ##5836
00ecc     CC 38 B2 FD | 	call	#_Audio2_004_spin2_play16
00ed0                 | ' 
00ed0                 | ' base2:=@channel0[0]+64*channel
00ed0     32 BD 02 F6 | 	mov	local12, objptr
00ed4     C0 93 06 F6 | 	mov	arg01, #448
00ed8                 | ' word[base2+32]:=0
00ed8     EC BD 06 F1 | 	add	local12, #492
00edc     5E 01 58 FC | 	wrword	#0, local12
00ee0     0B 00 00 FF 
00ee4     CC 64 86 F1 | 	sub	objptr, ##5836
00ee8                 | LR__0023
00ee8                 | '   if key4=77 then i=127 : do: 															' end
00ee8     4D BE 0E F2 | 	cmp	local13, #77 wz
00eec     90 00 90 5D |  if_ne	jmp	#LR__0028
00ef0     7F C4 06 F6 | 	mov	local16, #127
00ef4                 | LR__0024
00ef4                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00ef4     3E 64 06 F1 | 	add	objptr, #62
00ef8     32 B7 C2 FA | 	rdbyte	local09, objptr
00efc     5B B5 E2 F8 | 	getbyte	local08, local09, #0
00f00     5A B9 02 F6 | 	mov	local10, local08
00f04     07 B8 66 F0 | 	shl	local10, #7
00f08     3A 64 86 F1 | 	sub	objptr, #58
00f0c     32 BB 02 FB | 	rdlong	local11, objptr
00f10     04 64 86 F1 | 	sub	objptr, #4
00f14     5D B3 02 F6 | 	mov	local07, local11
00f18     5C B3 02 F1 | 	add	local07, local10
00f1c     62 B3 02 F1 | 	add	local07, local16
00f20     59 93 02 F6 | 	mov	arg01, local07
00f24     C8 01 B2 FD | 	call	#_pspeek
00f28     3D B1 E2 F8 | 	getbyte	local06, result1, #0
00f2c     20 B0 0E F2 | 	cmp	local06, #32 wz
00f30     2C 00 90 AD |  if_e	jmp	#LR__0026
00f34                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00f34     7F C4 56 F2 | 	cmps	local16, #127 wc
00f38     18 00 90 3D |  if_ae	jmp	#LR__0025
00f3c     62 B3 02 F6 | 	mov	local07, local16
00f40     01 B2 66 F0 | 	shl	local07, #1
00f44     59 93 02 F6 | 	mov	arg01, local07
00f48     02 92 06 F1 | 	add	arg01, #2
00f4c     10 1C B2 FD | 	call	#_hg010b_spin2_setcursorx
00f50     2C 00 90 FD | 	jmp	#LR__0027
00f54                 | LR__0025
00f54     FE 92 06 F6 | 	mov	arg01, #254
00f58     04 1C B2 FD | 	call	#_hg010b_spin2_setcursorx
00f5c     20 00 90 FD | 	jmp	#LR__0027
00f60                 | LR__0026
00f60     01 C4 86 F1 | 	sub	local16, #1
00f64     38 00 00 FF 
00f68     D8 65 06 F1 | 	add	objptr, ##29144
00f6c     32 B1 02 FB | 	rdlong	local06, objptr
00f70     38 00 00 FF 
00f74     D8 65 86 F1 | 	sub	objptr, ##29144
00f78     58 C5 0A F2 | 	cmp	local16, local06 wz
00f7c     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00f80                 | LR__0027
00f80                 | LR__0028
00f80                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00f80     38 00 00 FF 
00f84     D8 65 06 F1 | 	add	objptr, ##29144
00f88     32 C1 02 FB | 	rdlong	local14, objptr
00f8c     38 00 00 FF 
00f90     D8 65 86 F1 | 	sub	objptr, ##29144
00f94     60 B1 02 F6 | 	mov	local06, local14
00f98     58 C5 0A F2 | 	cmp	local16, local06 wz
00f9c     2C 00 90 5D |  if_ne	jmp	#LR__0029
00fa0     38 00 00 FF 
00fa4     D8 65 06 F1 | 	add	objptr, ##29144
00fa8     32 B5 02 FB | 	rdlong	local08, objptr
00fac     38 00 00 FF 
00fb0     D8 65 86 F1 | 	sub	objptr, ##29144
00fb4     5A B3 02 F6 | 	mov	local07, local08
00fb8     59 C1 02 F6 | 	mov	local14, local07
00fbc     01 C0 66 F0 | 	shl	local14, #1
00fc0     60 B1 02 F6 | 	mov	local06, local14
00fc4     58 93 02 F6 | 	mov	arg01, local06
00fc8     94 1B B2 FD | 	call	#_hg010b_spin2_setcursorx
00fcc                 | LR__0029
00fcc                 | '     
00fcc                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00fcc     4A BE 0E F2 | 	cmp	local13, #74 wz
00fd0     2C 00 90 5D |  if_ne	jmp	#LR__0030
00fd4     38 00 00 FF 
00fd8     D8 65 06 F1 | 	add	objptr, ##29144
00fdc     32 B5 02 FB | 	rdlong	local08, objptr
00fe0     38 00 00 FF 
00fe4     D8 65 86 F1 | 	sub	objptr, ##29144
00fe8     5A B3 02 F6 | 	mov	local07, local08
00fec     59 C1 02 F6 | 	mov	local14, local07
00ff0     01 C0 66 F0 | 	shl	local14, #1
00ff4     60 B1 02 F6 | 	mov	local06, local14
00ff8     58 93 02 F6 | 	mov	arg01, local06
00ffc     60 1B B2 FD | 	call	#_hg010b_spin2_setcursorx
01000                 | LR__0030
01000                 | '   if key4=75 then v.setcursory(0)														' pgup
01000     4B BE 0E F2 | 	cmp	local13, #75 wz
01004     00 B0 06 A6 |  if_e	mov	local06, #0
01008     00 92 06 A6 |  if_e	mov	arg01, #0
0100c     80 1B B2 AD |  if_e	call	#_hg010b_spin2_setcursory
01010                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
01010     4E BE 0E F2 | 	cmp	local13, #78 wz
01014     24 B0 06 A6 |  if_e	mov	local06, #36
01018     24 92 06 A6 |  if_e	mov	arg01, #36
0101c     70 1B B2 AD |  if_e	call	#_hg010b_spin2_setcursory
01020                 | '   if key4=76 then 																' del
01020     4C BE 0E F2 | 	cmp	local13, #76 wz
01024     AC 01 90 5D |  if_ne	jmp	#LR__0035
01028                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01028     3E 64 06 F1 | 	add	objptr, #62
0102c     32 B3 C2 FA | 	rdbyte	local07, objptr
01030     59 B5 E2 F8 | 	getbyte	local08, local07, #0
01034     07 B4 66 F0 | 	shl	local08, #7
01038     3A 64 86 F1 | 	sub	objptr, #58
0103c     32 D5 02 FB | 	rdlong	local24, objptr
01040     6A C5 02 F6 | 	mov	local16, local24
01044     5A C5 02 F1 | 	add	local16, local08
01048     38 64 06 F1 | 	add	objptr, #56
0104c     32 B9 E2 FA | 	rdword	local10, objptr
01050     5C CF 52 F6 | 	abs	local21, local10 wc
01054     01 CE 46 F0 | 	shr	local21, #1
01058     67 C5 82 F3 | 	sumc	local16, local21
0105c     59 B3 E2 F8 | 	getbyte	local07, local07, #0
01060     07 B2 66 F0 | 	shl	local07, #7
01064     3C 64 86 F1 | 	sub	objptr, #60
01068     59 D5 02 F1 | 	add	local24, local07
0106c     80 D4 06 F1 | 	add	local24, #128
01070                 | LR__0031
01070     6A C5 52 F2 | 	cmps	local16, local24 wc
01074     20 00 90 3D |  if_ae	jmp	#LR__0032
01078     62 93 02 F6 | 	mov	arg01, local16
0107c     01 92 06 F1 | 	add	arg01, #1
01080     6C 00 B2 FD | 	call	#_pspeek
01084     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
01088     62 93 02 F6 | 	mov	arg01, local16
0108c     18 00 B2 FD | 	call	#_pspoke
01090     01 C4 06 F1 | 	add	local16, #1
01094     D8 FF 9F FD | 	jmp	#LR__0031
01098                 | LR__0032
01098     3E 64 06 F1 | 	add	objptr, #62
0109c     32 B7 C2 FA | 	rdbyte	local09, objptr
010a0     07 B6 66 F0 | 	shl	local09, #7
010a4     3A 64 86 F1 | 	sub	objptr, #58
010a8     32 93 02 FB | 	rdlong	arg01, objptr
010ac     04 64 86 F1 | 	sub	objptr, #4
010b0     5B 93 02 F1 | 	add	arg01, local09
010b4     7F 92 06 F1 | 	add	arg01, #127
010b8     20 94 06 F6 | 	mov	arg02, #32
010bc     E8 FF B1 FD | 	call	#_pspoke
010c0     54 00 00 FF 
010c4     C4 64 06 F1 | 	add	objptr, ##43204
010c8     32 01 68 FC | 	wrlong	#0, objptr
010cc     54 00 00 FF 
010d0     86 64 86 F1 | 	sub	objptr, ##43142
010d4     32 C1 C2 FA | 	rdbyte	local14, objptr
010d8     60 B5 E2 F8 | 	getbyte	local08, local14, #0
010dc     07 B4 66 F0 | 	shl	local08, #7
010e0     3A 64 86 F1 | 	sub	objptr, #58
010e4     32 B7 02 FB | 	rdlong	local09, objptr
010e8     5B C5 02 F6 | 	mov	local16, local09
010ec     5A C5 02 F1 | 	add	local16, local08
010f0     38 64 06 F1 | 	add	objptr, #56
010f4     32 BB E2 FA | 	rdword	local11, objptr
010f8     5D B9 32 F9 | 	getword	local10, local11, #0
010fc     5C CF 52 F6 | 	abs	local21, local10 wc
01100     01 CE 46 F0 | 	shr	local21, #1
01104     67 CF 82 F6 | 	negc	local21, local21
01108     67 C5 02 F1 | 	add	local16, local21
0110c     60 B1 E2 F8 | 	getbyte	local06, local14, #0
01110     58 B3 02 F6 | 	mov	local07, local06
01114     07 B2 66 F0 | 	shl	local07, #7
01118     5B B5 02 F6 | 	mov	local08, local09
0111c     3C 64 86 F1 | 	sub	objptr, #60
01120     5A D7 02 F6 | 	mov	local25, local08
01124     59 D7 02 F1 | 	add	local25, local07
01128     80 D6 06 F1 | 	add	local25, #128
0112c                 | LR__0033
0112c     6B C5 52 F2 | 	cmps	local16, local25 wc
01130     A0 00 90 3D |  if_ae	jmp	#LR__0034
01134     3C 64 06 F1 | 	add	objptr, #60
01138     32 B1 E2 FA | 	rdword	local06, objptr
0113c     54 00 00 FF 
01140     88 64 06 F1 | 	add	objptr, ##43144
01144     32 B5 02 FB | 	rdlong	local08, objptr
01148     01 B4 66 F0 | 	shl	local08, #1
0114c     5A B1 02 F1 | 	add	local06, local08
01150     54 00 00 FF 
01154     86 64 86 F1 | 	sub	objptr, ##43142
01158     32 C1 C2 FA | 	rdbyte	local14, objptr
0115c     3E 64 86 F1 | 	sub	objptr, #62
01160     04 C0 66 F0 | 	shl	local14, #4
01164     04 C0 06 F1 | 	add	local14, #4
01168     62 93 02 F6 | 	mov	arg01, local16
0116c     80 FF B1 FD | 	call	#_pspeek
01170     3D B3 E2 F8 | 	getbyte	local07, result1, #0
01174     41 64 06 F1 | 	add	objptr, #65
01178     32 B5 02 FB | 	rdlong	local08, objptr
0117c     04 64 06 F1 | 	add	objptr, #4
01180     32 B9 02 FB | 	rdlong	local10, objptr
01184     45 64 86 F1 | 	sub	objptr, #69
01188     5C B7 02 F6 | 	mov	local09, local10
0118c     58 93 02 F6 | 	mov	arg01, local06
01190     60 95 02 F6 | 	mov	arg02, local14
01194     59 97 02 F6 | 	mov	arg03, local07
01198     5A 99 02 F6 | 	mov	arg04, local08
0119c     5B 9B 02 F6 | 	mov	arg05, local09
011a0     D0 17 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
011a4     54 00 00 FF 
011a8     C4 64 06 F1 | 	add	objptr, ##43204
011ac     32 B1 02 FB | 	rdlong	local06, objptr
011b0     01 B0 06 F1 | 	add	local06, #1
011b4     32 B1 62 FC | 	wrlong	local06, objptr
011b8     54 00 00 FF 
011bc     C4 64 86 F1 | 	sub	objptr, ##43204
011c0     62 B1 02 F6 | 	mov	local06, local16
011c4     62 C1 02 F6 | 	mov	local14, local16
011c8     01 C0 06 F1 | 	add	local14, #1
011cc     60 C5 02 F6 | 	mov	local16, local14
011d0     58 FF 9F FD | 	jmp	#LR__0033
011d4                 | LR__0034
011d4                 | LR__0035
011d4                 | ' 
011d4                 | '   if key4 = 42 then  'backspace
011d4     2A BE 0E F2 | 	cmp	local13, #42 wz
011d8     14 02 90 5D |  if_ne	jmp	#LR__0041
011dc                 | '     if v.cursor_x>editor_spaces*2 then 
011dc     3C 64 06 F1 | 	add	objptr, #60
011e0     32 C1 E2 FA | 	rdword	local14, objptr
011e4     60 B1 32 F9 | 	getword	local06, local14, #0
011e8     38 00 00 FF 
011ec     9C 65 06 F1 | 	add	objptr, ##29084
011f0     32 B7 02 FB | 	rdlong	local09, objptr
011f4     38 00 00 FF 
011f8     D8 65 86 F1 | 	sub	objptr, ##29144
011fc     5B B5 02 F6 | 	mov	local08, local09
01200     5A B3 02 F6 | 	mov	local07, local08
01204     01 B2 66 F0 | 	shl	local07, #1
01208     59 B1 5A F2 | 	cmps	local06, local07 wcz
0120c     C8 01 90 ED |  if_be	jmp	#LR__0039
01210     3C 64 06 F1 | 	add	objptr, #60
01214     32 93 E2 FA | 	rdword	arg01, objptr
01218     02 92 86 F1 | 	sub	arg01, #2
0121c     02 64 06 F1 | 	add	objptr, #2
01220     32 95 C2 FA | 	rdbyte	arg02, objptr
01224     3E 64 86 F1 | 	sub	objptr, #62
01228     E8 18 B2 FD | 	call	#_hg010b_spin2_setcursorpos
0122c                 | '       position v.cursor_x-2,v.cursor_y
0122c                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
0122c     3E 64 06 F1 | 	add	objptr, #62
01230     32 B3 C2 FA | 	rdbyte	local07, objptr
01234     59 B5 E2 F8 | 	getbyte	local08, local07, #0
01238     07 B4 66 F0 | 	shl	local08, #7
0123c     3A 64 86 F1 | 	sub	objptr, #58
01240     32 D9 02 FB | 	rdlong	local26, objptr
01244     6C C5 02 F6 | 	mov	local16, local26
01248     5A C5 02 F1 | 	add	local16, local08
0124c     38 64 06 F1 | 	add	objptr, #56
01250     32 B9 E2 FA | 	rdword	local10, objptr
01254     5C CF 52 F6 | 	abs	local21, local10 wc
01258     01 CE 46 F0 | 	shr	local21, #1
0125c     67 C5 82 F3 | 	sumc	local16, local21
01260     59 B3 E2 F8 | 	getbyte	local07, local07, #0
01264     07 B2 66 F0 | 	shl	local07, #7
01268     3C 64 86 F1 | 	sub	objptr, #60
0126c     59 D9 02 F1 | 	add	local26, local07
01270     80 D8 06 F1 | 	add	local26, #128
01274                 | LR__0036
01274     6C C5 52 F2 | 	cmps	local16, local26 wc
01278     20 00 90 3D |  if_ae	jmp	#LR__0037
0127c     62 93 02 F6 | 	mov	arg01, local16
01280     01 92 06 F1 | 	add	arg01, #1
01284     68 FE B1 FD | 	call	#_pspeek
01288     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
0128c     62 93 02 F6 | 	mov	arg01, local16
01290     14 FE B1 FD | 	call	#_pspoke
01294     01 C4 06 F1 | 	add	local16, #1
01298     D8 FF 9F FD | 	jmp	#LR__0036
0129c                 | LR__0037
0129c     3E 64 06 F1 | 	add	objptr, #62
012a0     32 B7 C2 FA | 	rdbyte	local09, objptr
012a4     07 B6 66 F0 | 	shl	local09, #7
012a8     3A 64 86 F1 | 	sub	objptr, #58
012ac     32 93 02 FB | 	rdlong	arg01, objptr
012b0     04 64 86 F1 | 	sub	objptr, #4
012b4     5B 93 02 F1 | 	add	arg01, local09
012b8     7F 92 06 F1 | 	add	arg01, #127
012bc     20 94 06 F6 | 	mov	arg02, #32
012c0     E4 FD B1 FD | 	call	#_pspoke
012c4     54 00 00 FF 
012c8     C4 64 06 F1 | 	add	objptr, ##43204
012cc     32 01 68 FC | 	wrlong	#0, objptr
012d0     54 00 00 FF 
012d4     86 64 86 F1 | 	sub	objptr, ##43142
012d8     32 C1 C2 FA | 	rdbyte	local14, objptr
012dc     60 B5 E2 F8 | 	getbyte	local08, local14, #0
012e0     07 B4 66 F0 | 	shl	local08, #7
012e4     3A 64 86 F1 | 	sub	objptr, #58
012e8     32 B7 02 FB | 	rdlong	local09, objptr
012ec     5B C5 02 F6 | 	mov	local16, local09
012f0     5A C5 02 F1 | 	add	local16, local08
012f4     38 64 06 F1 | 	add	objptr, #56
012f8     32 BB E2 FA | 	rdword	local11, objptr
012fc     5D B9 32 F9 | 	getword	local10, local11, #0
01300     5C CF 52 F6 | 	abs	local21, local10 wc
01304     01 CE 46 F0 | 	shr	local21, #1
01308     67 CF 82 F6 | 	negc	local21, local21
0130c     67 C5 02 F1 | 	add	local16, local21
01310     60 B1 E2 F8 | 	getbyte	local06, local14, #0
01314     58 B3 02 F6 | 	mov	local07, local06
01318     07 B2 66 F0 | 	shl	local07, #7
0131c     5B B5 02 F6 | 	mov	local08, local09
01320     3C 64 86 F1 | 	sub	objptr, #60
01324     5A DB 02 F6 | 	mov	local27, local08
01328     59 DB 02 F1 | 	add	local27, local07
0132c     80 DA 06 F1 | 	add	local27, #128
01330                 | LR__0038
01330     6D C5 52 F2 | 	cmps	local16, local27 wc
01334     B8 00 90 3D |  if_ae	jmp	#LR__0040
01338     3C 64 06 F1 | 	add	objptr, #60
0133c     32 B1 E2 FA | 	rdword	local06, objptr
01340     54 00 00 FF 
01344     88 64 06 F1 | 	add	objptr, ##43144
01348     32 B5 02 FB | 	rdlong	local08, objptr
0134c     01 B4 66 F0 | 	shl	local08, #1
01350     5A B1 02 F1 | 	add	local06, local08
01354     54 00 00 FF 
01358     86 64 86 F1 | 	sub	objptr, ##43142
0135c     32 C1 C2 FA | 	rdbyte	local14, objptr
01360     3E 64 86 F1 | 	sub	objptr, #62
01364     04 C0 66 F0 | 	shl	local14, #4
01368     04 C0 06 F1 | 	add	local14, #4
0136c     62 93 02 F6 | 	mov	arg01, local16
01370     7C FD B1 FD | 	call	#_pspeek
01374     3D B3 E2 F8 | 	getbyte	local07, result1, #0
01378     41 64 06 F1 | 	add	objptr, #65
0137c     32 B5 02 FB | 	rdlong	local08, objptr
01380     04 64 06 F1 | 	add	objptr, #4
01384     32 B9 02 FB | 	rdlong	local10, objptr
01388     45 64 86 F1 | 	sub	objptr, #69
0138c     5C B7 02 F6 | 	mov	local09, local10
01390     58 93 02 F6 | 	mov	arg01, local06
01394     60 95 02 F6 | 	mov	arg02, local14
01398     59 97 02 F6 | 	mov	arg03, local07
0139c     5A 99 02 F6 | 	mov	arg04, local08
013a0     5B 9B 02 F6 | 	mov	arg05, local09
013a4     CC 15 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
013a8     54 00 00 FF 
013ac     C4 64 06 F1 | 	add	objptr, ##43204
013b0     32 B1 02 FB | 	rdlong	local06, objptr
013b4     01 B0 06 F1 | 	add	local06, #1
013b8     32 B1 62 FC | 	wrlong	local06, objptr
013bc     54 00 00 FF 
013c0     C4 64 86 F1 | 	sub	objptr, ##43204
013c4     62 B1 02 F6 | 	mov	local06, local16
013c8     62 C1 02 F6 | 	mov	local14, local16
013cc     01 C0 06 F1 | 	add	local14, #1
013d0     60 C5 02 F6 | 	mov	local16, local14
013d4     58 FF 9F FD | 	jmp	#LR__0038
013d8                 | LR__0039
013d8     93 01 00 FF 
013dc     0F D3 06 F6 | 	mov	local23, ##@LR__5488
013e0     04 B0 06 F6 | 	mov	local06, #4
013e4     3C 64 06 F1 | 	add	objptr, #60
013e8     32 09 58 FC | 	wrword	#4, objptr
013ec     3C 64 86 F1 | 	sub	objptr, #60
013f0                 | LR__0040
013f0                 | LR__0041
013f0                 | ' 
013f0                 | '   if key4=82 then 						' arrow up
013f0     52 BE 0E F2 | 	cmp	local13, #82 wz
013f4     58 00 90 5D |  if_ne	jmp	#LR__0042
013f8                 | ' return cursor_y
013f8     3E 64 06 F1 | 	add	objptr, #62
013fc     32 7B C2 FA | 	rdbyte	result1, objptr
01400     01 7A 86 F1 | 	sub	result1, #1
01404     54 00 00 FF 
01408     6A 64 06 F1 | 	add	objptr, ##43114
0140c     32 7B 62 FC | 	wrlong	result1, objptr
01410                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
01410     54 00 00 FF 
01414     A8 64 86 F1 | 	sub	objptr, ##43176
01418     00 7A 56 F2 | 	cmps	result1, #0 wc
0141c     54 00 00 CF 
01420     A8 64 06 C1 |  if_b	add	objptr, ##43176
01424     32 01 68 CC |  if_b	wrlong	#0, objptr
01428     54 00 00 CF 
0142c     A8 64 86 C1 |  if_b	sub	objptr, ##43176
01430     54 00 00 FF 
01434     A8 64 06 F1 | 	add	objptr, ##43176
01438     32 C1 02 FB | 	rdlong	local14, objptr
0143c     54 00 00 FF 
01440     A8 64 86 F1 | 	sub	objptr, ##43176
01444     60 B1 02 F6 | 	mov	local06, local14
01448     58 93 02 F6 | 	mov	arg01, local06
0144c     40 17 B2 FD | 	call	#_hg010b_spin2_setcursory
01450                 | LR__0042
01450                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
01450     51 BE 0E F2 | 	cmp	local13, #81 wz
01454     58 00 90 5D |  if_ne	jmp	#LR__0043
01458                 | ' return cursor_y
01458     3E 64 06 F1 | 	add	objptr, #62
0145c     32 7B C2 FA | 	rdbyte	result1, objptr
01460     01 7A 06 F1 | 	add	result1, #1
01464     54 00 00 FF 
01468     6A 64 06 F1 | 	add	objptr, ##43114
0146c     32 7B 62 FC | 	wrlong	result1, objptr
01470                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
01470     54 00 00 FF 
01474     A8 64 86 F1 | 	sub	objptr, ##43176
01478     25 7A 56 F2 | 	cmps	result1, #37 wc
0147c     54 00 00 3F 
01480     A8 64 06 31 |  if_ae	add	objptr, ##43176
01484     32 49 68 3C |  if_ae	wrlong	#36, objptr
01488     54 00 00 3F 
0148c     A8 64 86 31 |  if_ae	sub	objptr, ##43176
01490     54 00 00 FF 
01494     A8 64 06 F1 | 	add	objptr, ##43176
01498     32 C1 02 FB | 	rdlong	local14, objptr
0149c     54 00 00 FF 
014a0     A8 64 86 F1 | 	sub	objptr, ##43176
014a4     60 B1 02 F6 | 	mov	local06, local14
014a8     58 93 02 F6 | 	mov	arg01, local06
014ac     E0 16 B2 FD | 	call	#_hg010b_spin2_setcursory
014b0                 | LR__0043
014b0                 | '   if key4=80 then
014b0     50 BE 0E F2 | 	cmp	local13, #80 wz
014b4     74 00 90 5D |  if_ne	jmp	#LR__0044
014b8                 | ' return cursor_x
014b8     3C 64 06 F1 | 	add	objptr, #60
014bc     32 B1 E2 FA | 	rdword	local06, objptr
014c0     02 B0 86 F1 | 	sub	local06, #2
014c4     54 00 00 FF 
014c8     70 64 06 F1 | 	add	objptr, ##43120
014cc     32 B1 62 FC | 	wrlong	local06, objptr
014d0                 | '     cx=v.getcursorx()-2 					' arrow left
014d0                 | '     if cx<editor_spaces then cx=editor_spaces			
014d0     1B 00 00 FF 
014d4     D4 64 86 F1 | 	sub	objptr, ##14036
014d8     32 B5 02 FB | 	rdlong	local08, objptr
014dc     38 00 00 FF 
014e0     D8 65 86 F1 | 	sub	objptr, ##29144
014e4     5A B3 02 F6 | 	mov	local07, local08
014e8     59 B1 52 F2 | 	cmps	local06, local07 wc
014ec     38 00 00 CF 
014f0     D8 65 06 C1 |  if_b	add	objptr, ##29144
014f4     32 B1 02 CB |  if_b	rdlong	local06, objptr
014f8     1B 00 00 CF 
014fc     D4 64 06 C1 |  if_b	add	objptr, ##14036
01500     32 B1 62 CC |  if_b	wrlong	local06, objptr
01504     54 00 00 CF 
01508     AC 64 86 C1 |  if_b	sub	objptr, ##43180
0150c     54 00 00 FF 
01510     AC 64 06 F1 | 	add	objptr, ##43180
01514     32 C1 02 FB | 	rdlong	local14, objptr
01518     54 00 00 FF 
0151c     AC 64 86 F1 | 	sub	objptr, ##43180
01520     60 B1 02 F6 | 	mov	local06, local14
01524     58 93 02 F6 | 	mov	arg01, local06
01528     34 16 B2 FD | 	call	#_hg010b_spin2_setcursorx
0152c                 | LR__0044
0152c                 | '   if key4=79 then						' arrow right
0152c     4F BE 0E F2 | 	cmp	local13, #79 wz
01530     54 00 90 5D |  if_ne	jmp	#LR__0045
01534                 | ' return cursor_x
01534     3C 64 06 F1 | 	add	objptr, #60
01538     32 7B E2 FA | 	rdword	result1, objptr
0153c     02 7A 06 F1 | 	add	result1, #2
01540     54 00 00 FF 
01544     70 64 06 F1 | 	add	objptr, ##43120
01548     32 7B 62 FC | 	wrlong	result1, objptr
0154c                 | '     cx=v.getcursorx()+2 
0154c                 | '     if cx>254  then cx=254 
0154c     54 00 00 FF 
01550     AC 64 86 F1 | 	sub	objptr, ##43180
01554     FF 7A 56 F2 | 	cmps	result1, #255 wc
01558     54 00 00 3F 
0155c     AC 64 06 31 |  if_ae	add	objptr, ##43180
01560     32 FD 69 3C |  if_ae	wrlong	#254, objptr
01564     54 00 00 3F 
01568     AC 64 86 31 |  if_ae	sub	objptr, ##43180
0156c     54 00 00 FF 
01570     AC 64 06 F1 | 	add	objptr, ##43180
01574     32 B1 02 FB | 	rdlong	local06, objptr
01578     54 00 00 FF 
0157c     AC 64 86 F1 | 	sub	objptr, ##43180
01580     58 93 02 F6 | 	mov	arg01, local06
01584     D8 15 B2 FD | 	call	#_hg010b_spin2_setcursorx
01588                 | LR__0045
01588                 | ' 
01588                 | '   if key4=73 then 						' ins
01588     49 BE 0E F2 | 	cmp	local13, #73 wz
0158c     40 00 90 5D |  if_ne	jmp	#LR__0048
01590     54 00 00 FF 
01594     A4 64 06 F1 | 	add	objptr, ##43172
01598     32 B1 02 FB | 	rdlong	local06, objptr
0159c     58 C1 22 F6 | 	not	local14, local06
015a0     32 C1 62 FC | 	wrlong	local14, objptr
015a4                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
015a4     54 00 00 FF 
015a8     A4 64 86 F1 | 	sub	objptr, ##43172
015ac     00 C0 0E F2 | 	cmp	local14, #0 wz
015b0     10 00 90 AD |  if_e	jmp	#LR__0046
015b4     0E B0 06 F6 | 	mov	local06, #14
015b8     0E 92 06 F6 | 	mov	arg01, #14
015bc     F8 03 B2 FD | 	call	#_hg010b_spin2_setcursorshape
015c0     0C 00 90 FD | 	jmp	#LR__0047
015c4                 | LR__0046
015c4     00 B0 06 F6 | 	mov	local06, #0
015c8     00 92 06 F6 | 	mov	arg01, #0
015cc     E8 03 B2 FD | 	call	#_hg010b_spin2_setcursorshape
015d0                 | LR__0047
015d0                 | LR__0048
015d0     00 AC 06 F6 | 	mov	local04, #0
015d4     44 F3 9F FD | 	jmp	#LR__0001
015d8                 | LR__0049
015d8     E7 F0 03 F6 | 	mov	ptra, fp
015dc     F2 00 A0 FD | 	call	#popregs_
015e0                 | _edit_ret
015e0     2D 00 64 FD | 	ret
015e4                 | 
015e4                 | ' 
015e4                 | ' ''-----------------------------------------------------------------------------------------------------------
015e4                 | ' ' 					A housekeepeer.
015e4                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
015e4                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
015e4                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
015e4                 | ' ''-----------------------------------------------------------------------------------------------------------
015e4                 | ' 
015e4                 | ' sub housekeeper
015e4                 | _housekeeper
015e4                 | ' 
015e4                 | ' do
015e4                 | LR__0050
015e4                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
015e4     49 64 06 F1 | 	add	objptr, #73
015e8                 | LR__0051
015e8     32 93 02 FB | 	rdlong	arg01, objptr
015ec     01 92 0E F2 | 	cmp	arg01, #1 wz
015f0     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
015f4     54 00 00 FF 
015f8     27 64 06 F1 | 	add	objptr, ##43047
015fc     32 93 02 FB | 	rdlong	arg01, objptr
01600     01 92 06 F1 | 	add	arg01, #1
01604     32 93 62 FC | 	wrlong	arg01, objptr
01608     54 00 00 FF 
0160c     70 64 86 F1 | 	sub	objptr, ##43120
01610     80 00 B0 FD | 	call	#_gethdi
01614     05 92 06 F6 | 	mov	arg01, #5
01618     7C 38 B2 FD | 	call	#__system___waitms
0161c     54 00 00 FF 
01620     70 64 06 F1 | 	add	objptr, ##43120
01624     32 93 02 FB | 	rdlong	arg01, objptr
01628     01 92 06 F1 | 	add	arg01, #1
0162c     32 93 62 FC | 	wrlong	arg01, objptr
01630     54 00 00 FF 
01634     70 64 86 F1 | 	sub	objptr, ##43120
01638     58 00 B0 FD | 	call	#_gethdi
0163c     05 92 06 F6 | 	mov	arg01, #5
01640     54 38 B2 FD | 	call	#__system___waitms
01644     54 00 00 FF 
01648     70 64 06 F1 | 	add	objptr, ##43120
0164c     32 93 02 FB | 	rdlong	arg01, objptr
01650     01 92 06 F1 | 	add	arg01, #1
01654     32 93 62 FC | 	wrlong	arg01, objptr
01658     54 00 00 FF 
0165c     70 64 86 F1 | 	sub	objptr, ##43120
01660     30 00 B0 FD | 	call	#_gethdi
01664     05 92 06 F6 | 	mov	arg01, #5
01668     2C 38 B2 FD | 	call	#__system___waitms
0166c     54 00 00 FF 
01670     70 64 06 F1 | 	add	objptr, ##43120
01674     32 93 02 FB | 	rdlong	arg01, objptr
01678     01 92 06 F1 | 	add	arg01, #1
0167c     32 93 62 FC | 	wrlong	arg01, objptr
01680     54 00 00 FF 
01684     70 64 86 F1 | 	sub	objptr, ##43120
01688     08 00 B0 FD | 	call	#_gethdi
0168c     54 FF 9F FD | 	jmp	#LR__0050
01690                 | _housekeeper_ret
01690     2D 00 64 FD | 	ret
01694                 | 
01694                 | ' 
01694                 | ' '----------------------------------------------------------------------------------------------------------
01694                 | ' ' gethdi is called from the houseekeeper to read HDI related values
01694                 | ' '----------------------------------------------------------------------------------------------------------
01694                 | ' 
01694                 | ' sub gethdi
01694                 | _gethdi
01694     0A CA 05 F6 | 	mov	COUNT_, #10
01698     E8 00 A0 FD | 	call	#pushregs_
0169c                 | '   x := mouse_xacc
0169c     14 00 00 FF 
016a0     E1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
016a4     3B 95 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
016a8                 | '   y := mouse_yacc
016a8     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
016ac     3B 93 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
016b0     53 00 00 FF 
016b4     EC 64 06 F1 | 	add	objptr, ##42732
016b8     32 95 62 FC | 	wrlong	arg02, objptr
016bc     04 64 06 F1 | 	add	objptr, #4
016c0     32 93 62 FC | 	wrlong	arg01, objptr
016c4                 | '   x := 0
016c4                 | '   y := mouse_zacc
016c4     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
016c8     3B 7B 02 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
016cc     08 64 06 F1 | 	add	objptr, #8
016d0     32 7B 62 FC | 	wrlong	result1, objptr
016d4                 | '   return mouse_bstate
016d4     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
016d8     3B 7B C2 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
016dc     14 00 00 FF 
016e0     ED 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10477
016e4     04 64 86 F1 | 	sub	objptr, #4
016e8     32 7B 62 FC | 	wrlong	result1, objptr
016ec     53 00 00 FF 
016f0     F4 64 86 F1 | 	sub	objptr, ##42740
016f4     00 A6 06 F6 | 	mov	local01, #0
016f8                 | ' 
016f8                 | ' mousex,mousey=kbm.mouse_xy()
016f8                 | ' dummy,mousew=kbm.mouse_scroll()
016f8                 | ' mousek=kbm.mouse_buttons()
016f8                 | ' i=0
016f8                 | ' for j=0 to 6
016f8     00 A8 06 F6 | 	mov	local02, #0
016fc                 | LR__0060
016fc                 | '   if kbm.hidpad_id(j)>0 then
016fc     54 93 02 F6 | 	mov	arg01, local02
01700                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
01700     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
01704     13 00 00 FF 
01708     F8 7B 06 F1 | 	add	result1, ##10232
0170c     05 92 66 F0 | 	shl	arg01, #5
01710     49 7B 02 F1 | 	add	result1, arg01
01714     3D 7B 02 FB | 	rdlong	result1, result1
01718     01 7A 56 F2 | 	cmps	result1, #1 wc
0171c     C8 01 90 CD |  if_b	jmp	#LR__0061
01720     54 93 02 F6 | 	mov	arg01, local02
01724     00 94 06 F6 | 	mov	arg02, #0
01728     24 2A B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0172c     3D AB 02 F6 | 	mov	local03, result1
01730     54 93 02 F6 | 	mov	arg01, local02
01734     01 94 06 F6 | 	mov	arg02, #1
01738     14 2A B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0173c     3D AD 02 F6 | 	mov	local04, result1
01740     54 93 02 F6 | 	mov	arg01, local02
01744     02 94 06 F6 | 	mov	arg02, #2
01748     04 2A B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0174c     3D AF 02 F6 | 	mov	local05, result1
01750     54 93 02 F6 | 	mov	arg01, local02
01754     00 94 06 F6 | 	mov	arg02, #0
01758     30 2A B2 FD | 	call	#_usbnew_spin2_hidpad_hat
0175c     3D B1 02 F6 | 	mov	local06, result1
01760     54 93 02 F6 | 	mov	arg01, local02
01764     03 94 06 F6 | 	mov	arg02, #3
01768     E4 29 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0176c     3D B3 02 F6 | 	mov	local07, result1
01770     54 93 02 F6 | 	mov	arg01, local02
01774     04 94 06 F6 | 	mov	arg02, #4
01778     D4 29 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0177c     3D B5 02 F6 | 	mov	local08, result1
01780     54 93 02 F6 | 	mov	arg01, local02
01784     05 94 06 F6 | 	mov	arg02, #5
01788     C4 29 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0178c     3D B7 02 F6 | 	mov	local09, result1
01790     54 93 02 F6 | 	mov	arg01, local02
01794     06 94 06 F6 | 	mov	arg02, #6
01798     B4 29 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0179c     3D B9 02 F6 | 	mov	local10, result1
017a0     54 93 02 F6 | 	mov	arg01, local02
017a4     07 94 06 F6 | 	mov	arg02, #7
017a8     A4 29 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
017ac     53 93 02 F6 | 	mov	arg01, local01
017b0     02 92 66 F0 | 	shl	arg01, #2
017b4     53 00 00 FF 
017b8     FC 64 06 F1 | 	add	objptr, ##42748
017bc     32 93 02 F1 | 	add	arg01, objptr
017c0     49 AB 62 FC | 	wrlong	local03, arg01
017c4     53 93 02 F6 | 	mov	arg01, local01
017c8     02 92 66 F0 | 	shl	arg01, #2
017cc     1C 64 06 F1 | 	add	objptr, #28
017d0     32 93 02 F1 | 	add	arg01, objptr
017d4     49 AD 62 FC | 	wrlong	local04, arg01
017d8     53 93 02 F6 | 	mov	arg01, local01
017dc     02 92 66 F0 | 	shl	arg01, #2
017e0     1C 64 06 F1 | 	add	objptr, #28
017e4     32 93 02 F1 | 	add	arg01, objptr
017e8     49 AF 62 FC | 	wrlong	local05, arg01
017ec     53 AF 02 F6 | 	mov	local05, local01
017f0     02 AE 66 F0 | 	shl	local05, #2
017f4     1C 64 06 F1 | 	add	objptr, #28
017f8     32 AF 02 F1 | 	add	local05, objptr
017fc     57 B1 62 FC | 	wrlong	local06, local05
01800     53 B1 02 F6 | 	mov	local06, local01
01804     02 B0 66 F0 | 	shl	local06, #2
01808     1C 64 06 F1 | 	add	objptr, #28
0180c     32 B1 02 F1 | 	add	local06, objptr
01810     58 B3 62 FC | 	wrlong	local07, local06
01814     53 B3 02 F6 | 	mov	local07, local01
01818     02 B2 66 F0 | 	shl	local07, #2
0181c     1C 64 06 F1 | 	add	objptr, #28
01820     32 B3 02 F1 | 	add	local07, objptr
01824     59 B5 62 FC | 	wrlong	local08, local07
01828     53 B5 02 F6 | 	mov	local08, local01
0182c     02 B4 66 F0 | 	shl	local08, #2
01830     1C 64 06 F1 | 	add	objptr, #28
01834     32 B5 02 F1 | 	add	local08, objptr
01838     5A B7 62 FC | 	wrlong	local09, local08
0183c     53 B7 02 F6 | 	mov	local09, local01
01840     02 B6 66 F0 | 	shl	local09, #2
01844     1C 64 06 F1 | 	add	objptr, #28
01848     32 B7 02 F1 | 	add	local09, objptr
0184c     5B B9 62 FC | 	wrlong	local10, local09
01850     53 B9 02 F6 | 	mov	local10, local01
01854     02 B8 66 F0 | 	shl	local10, #2
01858     1C 64 06 F1 | 	add	objptr, #28
0185c     32 B9 02 F1 | 	add	local10, objptr
01860     5C 7B 62 FC | 	wrlong	result1, local10
01864     60 00 00 FF 
01868     00 AA 06 F1 | 	add	local03, ##49152
0186c     0F AA 46 F0 | 	shr	local03, #15
01870     01 B8 06 F6 | 	mov	local10, #1
01874     55 B9 02 F1 | 	add	local10, local03
01878     60 00 00 FF 
0187c     00 AC 06 F1 | 	add	local04, ##49152
01880     0F AC 46 F0 | 	shr	local04, #15
01884     01 B6 06 F6 | 	mov	local09, #1
01888     56 B7 02 F1 | 	add	local09, local04
0188c     53 B5 02 F6 | 	mov	local08, local01
01890     02 B4 66 F0 | 	shl	local08, #2
01894     1C 64 06 F1 | 	add	objptr, #28
01898     32 B5 02 F1 | 	add	local08, objptr
0189c     02 B6 66 F0 | 	shl	local09, #2
018a0     5B B9 02 F1 | 	add	local10, local09
018a4     5A B9 62 FC | 	wrlong	local10, local08
018a8     53 B9 02 F6 | 	mov	local10, local01
018ac     02 B8 66 F0 | 	shl	local10, #2
018b0     1C 64 06 F1 | 	add	objptr, #28
018b4     32 B9 02 F1 | 	add	local10, objptr
018b8     54 93 02 F6 | 	mov	arg01, local02
018bc     54 00 00 FF 
018c0     14 64 86 F1 | 	sub	objptr, ##43028
018c4                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6]
018c4     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
018c8     13 00 00 FF 
018cc     F8 7B 06 F1 | 	add	result1, ##10232
018d0     05 92 66 F0 | 	shl	arg01, #5
018d4     49 7B 02 F1 | 	add	result1, arg01
018d8     18 7A 06 F1 | 	add	result1, #24
018dc     3D 7B 02 FB | 	rdlong	result1, result1
018e0     5C 7B 62 FC | 	wrlong	result1, local10
018e4     01 A6 06 F1 | 	add	local01, #1
018e8                 | LR__0061
018e8     01 A8 06 F1 | 	add	local02, #1
018ec     07 A8 16 F2 | 	cmp	local02, #7 wc
018f0     08 FE 9F CD |  if_b	jmp	#LR__0060
018f4     D7 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
018f8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
018f8                 | LR__0062
018f8     07 A6 16 F2 | 	cmp	local01, #7 wc
018fc     3C 00 90 3D |  if_ae	jmp	#LR__0064
01900     53 B9 02 F6 | 	mov	local10, local01
01904     02 B8 66 F0 | 	shl	local10, #2
01908     53 00 00 FF 
0190c     F8 65 06 F1 | 	add	objptr, ##43000
01910     32 B9 02 F1 | 	add	local10, objptr
01914     5C 01 68 FC | 	wrlong	#0, local10
01918     53 B9 02 F6 | 	mov	local10, local01
0191c     02 B8 66 F0 | 	shl	local10, #2
01920     1C 64 06 F1 | 	add	objptr, #28
01924     32 B9 02 F1 | 	add	local10, objptr
01928     5C 01 68 FC | 	wrlong	#0, local10
0192c     01 A6 06 F1 | 	add	local01, #1
01930     54 00 00 FF 
01934     14 64 86 F1 | 	sub	objptr, ##43028
01938     BC FF 9F FD | 	jmp	#LR__0062
0193c                 | LR__0063
0193c                 | LR__0064
0193c     E7 F0 03 F6 | 	mov	ptra, fp
01940     F2 00 A0 FD | 	call	#popregs_
01944                 | _gethdi_ret
01944     2D 00 64 FD | 	ret
01948                 | 
01948                 | ' 
01948                 | ' '-------------------------------------------------------------------------------------------------------------
01948                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01948                 | ' '-------------------------------------------------------------------------------------------------------------
01948                 | ' 
01948                 | ' '-------------------------------------------------------------------------------------------------------------
01948                 | ' '
01948                 | ' '                                     LINE INTERPRETER/TOKENIZER
01948                 | ' '
01948                 | ' '-------------------------------------------------------------------------------------------------------------
01948                 | ' 
01948                 | ' 
01948                 | ' sub interpret
01948                 | _interpret
01948     34 CA 05 F6 | 	mov	COUNT_, #52
0194c     E8 00 A0 FD | 	call	#pushregs_
01950     01 00 00 FF 
01954     80 F0 07 F1 | 	add	ptra, ##640
01958     38 00 00 FF 
0195c     C0 65 06 F1 | 	add	objptr, ##29120
01960     32 93 02 FB | 	rdlong	arg01, objptr
01964     38 00 00 FF 
01968     C0 65 86 F1 | 	sub	objptr, ##29120
0196c     6C 4F B2 FD | 	call	#__system__RTrim_S
01970     3D 93 02 F6 | 	mov	arg01, result1
01974     A4 4E B2 FD | 	call	#__system__LTrim_S
01978     38 00 00 FF 
0197c     C4 65 06 F1 | 	add	objptr, ##29124
01980     32 7B 62 FC | 	wrlong	result1, objptr
01984     04 64 06 F1 | 	add	objptr, #4
01988     FF FF FF FF 
0198c     32 FF 6B FC | 	wrlong	##-1, objptr
01990     1B 00 00 FF 
01994     C4 64 06 F1 | 	add	objptr, ##14020
01998     32 01 68 FC | 	wrlong	#0, objptr
0199c     08 00 00 FF 
019a0     6C 64 86 F1 | 	sub	objptr, ##4204
019a4     32 01 68 FC | 	wrlong	#0, objptr
019a8     4C 00 00 FF 
019ac     20 64 86 F1 | 	sub	objptr, ##38944
019b0     00 A6 06 F6 | 	mov	local01, #0
019b4                 | LR__0070
019b4                 | ' 
019b4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
019b4                 | ' 
019b4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
019b4                 | ' 
019b4                 | ' 108 
019b4                 | ' for i=0 to 125: separators(i)=0 :next i
019b4     00 A8 06 F6 | 	mov	local02, #0
019b8     38 CE 05 F1 | 	add	fp, #56
019bc     D7 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
019c0                 | LR__0071
019c0     54 AB 02 F6 | 	mov	local03, local02
019c4     02 AA 66 F0 | 	shl	local03, #2
019c8     E7 AA 02 F1 | 	add	local03, fp
019cc     55 01 68 FC | 	wrlong	#0, local03
019d0     01 A8 06 F1 | 	add	local02, #1
019d4     7E A8 56 F2 | 	cmps	local02, #126 wc
019d8     E4 FF 9F CD |  if_b	jmp	#LR__0071
019dc                 | LR__0072
019dc     38 CE 85 F1 | 	sub	fp, #56
019e0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
019e0     00 A8 06 F6 | 	mov	local02, #0
019e4     36 00 00 FF 
019e8     B0 65 06 F1 | 	add	objptr, ##28080
019ec     D7 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
019f0                 | LR__0073
019f0     54 AD 02 F6 | 	mov	local04, local02
019f4     03 AC 66 F0 | 	shl	local04, #3
019f8     32 AD 02 F1 | 	add	local04, objptr
019fc     93 01 00 FF 
01a00     10 97 06 F6 | 	mov	arg03, ##@LR__5489
01a04     56 97 62 FC | 	wrlong	arg03, local04
01a08     54 AD 02 F6 | 	mov	local04, local02
01a0c     03 AC 66 F0 | 	shl	local04, #3
01a10     32 AF 02 F6 | 	mov	local05, objptr
01a14     32 AD 02 F1 | 	add	local04, objptr
01a18     00 B0 06 F6 | 	mov	local06, #0
01a1c     04 AC 06 F1 | 	add	local04, #4
01a20     56 01 68 FC | 	wrlong	#0, local04
01a24     01 A8 06 F1 | 	add	local02, #1
01a28     7E A8 56 F2 | 	cmps	local02, #126 wc
01a2c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01a30                 | LR__0074
01a30     02 00 00 FF 
01a34     10 64 06 F1 | 	add	objptr, ##1040
01a38     32 93 02 FB | 	rdlong	arg01, objptr
01a3c     38 00 00 FF 
01a40     C0 65 86 F1 | 	sub	objptr, ##29120
01a44     94 4E B2 FD | 	call	#__system__RTrim_S
01a48     3D 93 02 F6 | 	mov	arg01, result1
01a4c     CC 4D B2 FD | 	call	#__system__LTrim_S
01a50     38 00 00 FF 
01a54     C0 65 06 F1 | 	add	objptr, ##29120
01a58     32 7B 62 FC | 	wrlong	result1, objptr
01a5c     93 01 00 FF 
01a60     11 AD 06 F6 | 	mov	local04, ##@LR__5490
01a64     1B 00 00 FF 
01a68     08 65 06 F1 | 	add	objptr, ##14088
01a6c     32 AD 62 FC | 	wrlong	local04, objptr
01a70     1B 00 00 FF 
01a74     08 65 86 F1 | 	sub	objptr, ##14088
01a78     32 93 02 FB | 	rdlong	arg01, objptr
01a7c     38 00 00 FF 
01a80     C0 65 86 F1 | 	sub	objptr, ##29120
01a84     49 B3 02 F6 | 	mov	local07, arg01
01a88     D7 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
01a8c                 | LR__0075
01a8c     59 7B CA FA | 	rdbyte	result1, local07 wz
01a90     01 B2 06 51 |  if_ne	add	local07, #1
01a94     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01a98                 | LR__0076
01a98     49 B3 8A F1 | 	sub	local07, arg01 wz
01a9c     54 00 00 FF 
01aa0     CC 64 06 F1 | 	add	objptr, ##43212
01aa4     32 B3 62 FC | 	wrlong	local07, objptr
01aa8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
01aa8     54 00 00 FF 
01aac     CC 64 86 F1 | 	sub	objptr, ##43212
01ab0     E4 28 90 AD |  if_e	jmp	#LR__0210
01ab4     00 B4 06 F6 | 	mov	local08, #0
01ab8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
01ab8                 | ' for i=1 to len(line$)
01ab8     01 A8 06 F6 | 	mov	local02, #1
01abc     38 00 00 FF 
01ac0     C0 65 06 F1 | 	add	objptr, ##29120
01ac4     32 93 02 FB | 	rdlong	arg01, objptr
01ac8     38 00 00 FF 
01acc     C0 65 86 F1 | 	sub	objptr, ##29120
01ad0     49 B3 02 F6 | 	mov	local07, arg01
01ad4     D7 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
01ad8                 | LR__0077
01ad8     59 7B CA FA | 	rdbyte	result1, local07 wz
01adc     01 B2 06 51 |  if_ne	add	local07, #1
01ae0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
01ae4                 | LR__0078
01ae4     49 B3 82 F1 | 	sub	local07, arg01
01ae8     59 B7 02 F6 | 	mov	local09, local07
01aec     01 B6 06 F1 | 	add	local09, #1
01af0                 | LR__0079
01af0     5B A9 52 F2 | 	cmps	local02, local09 wc
01af4     A4 00 90 3D |  if_ae	jmp	#LR__0081
01af8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
01af8     38 00 00 FF 
01afc     C0 65 06 F1 | 	add	objptr, ##29120
01b00     32 93 02 FB | 	rdlong	arg01, objptr
01b04     38 00 00 FF 
01b08     C0 65 86 F1 | 	sub	objptr, ##29120
01b0c     54 95 02 F6 | 	mov	arg02, local02
01b10     01 96 06 F6 | 	mov	arg03, #1
01b14     4C 4A B2 FD | 	call	#__system__Mid_S
01b18     3D 93 02 F6 | 	mov	arg01, result1
01b1c     93 01 00 FF 
01b20     12 95 06 F6 | 	mov	arg02, ##@LR__5491
01b24     A4 30 B2 FD | 	call	#__system___string_cmp
01b28     00 7A 0E F2 | 	cmp	result1, #0 wz
01b2c     00 B4 0E A2 |  if_e	cmp	local08, #0 wz
01b30     01 B4 06 A6 |  if_e	mov	local08, #1
01b34     3C 00 90 AD |  if_e	jmp	#LR__0080
01b38     38 00 00 FF 
01b3c     C0 65 06 F1 | 	add	objptr, ##29120
01b40     32 93 02 FB | 	rdlong	arg01, objptr
01b44     38 00 00 FF 
01b48     C0 65 86 F1 | 	sub	objptr, ##29120
01b4c     54 95 02 F6 | 	mov	arg02, local02
01b50     01 96 06 F6 | 	mov	arg03, #1
01b54     0C 4A B2 FD | 	call	#__system__Mid_S
01b58     3D 93 02 F6 | 	mov	arg01, result1
01b5c     93 01 00 FF 
01b60     14 95 06 F6 | 	mov	arg02, ##@LR__5492
01b64     64 30 B2 FD | 	call	#__system___string_cmp
01b68     00 7A 0E F2 | 	cmp	result1, #0 wz
01b6c     01 B4 0E A2 |  if_e	cmp	local08, #1 wz
01b70     00 B4 06 A6 |  if_e	mov	local08, #0
01b74                 | LR__0080
01b74     54 AD 02 F6 | 	mov	local04, local02
01b78     03 AC 66 F0 | 	shl	local04, #3
01b7c     32 AF 02 F6 | 	mov	local05, objptr
01b80     36 00 00 FF 
01b84     B0 AF 06 F1 | 	add	local05, ##28080
01b88     57 AD 02 F1 | 	add	local04, local05
01b8c     04 AC 06 F1 | 	add	local04, #4
01b90     56 B5 62 FC | 	wrlong	local08, local04
01b94     01 A8 06 F1 | 	add	local02, #1
01b98     54 FF 9F FD | 	jmp	#LR__0079
01b9c                 | LR__0081
01b9c     01 A8 06 F6 | 	mov	local02, #1
01ba0                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01ba0                 | LR__0082
01ba0     38 00 00 FF 
01ba4     C0 65 06 F1 | 	add	objptr, ##29120
01ba8     32 93 02 FB | 	rdlong	arg01, objptr
01bac     38 00 00 FF 
01bb0     C0 65 86 F1 | 	sub	objptr, ##29120
01bb4     54 95 02 F6 | 	mov	arg02, local02
01bb8     01 96 06 F6 | 	mov	arg03, #1
01bbc     A4 49 B2 FD | 	call	#__system__Mid_S
01bc0     3D 93 02 F6 | 	mov	arg01, result1
01bc4     93 01 00 FF 
01bc8     16 B9 06 F6 | 	mov	local10, ##@LR__5493
01bcc     5C 95 02 F6 | 	mov	arg02, local10
01bd0     F8 2F B2 FD | 	call	#__system___string_cmp
01bd4     00 7A 0E F2 | 	cmp	result1, #0 wz
01bd8     2C 00 90 5D |  if_ne	jmp	#LR__0083
01bdc     54 AF 02 F6 | 	mov	local05, local02
01be0     03 AE 66 F0 | 	shl	local05, #3
01be4     32 B1 02 F6 | 	mov	local06, objptr
01be8     36 00 00 FF 
01bec     B0 B1 06 F1 | 	add	local06, ##28080
01bf0     58 AF 02 F1 | 	add	local05, local06
01bf4     04 AE 06 F1 | 	add	local05, #4
01bf8     57 BB 02 FB | 	rdlong	local11, local05
01bfc     04 AE 86 F1 | 	sub	local05, #4
01c00     5D BD 0A F6 | 	mov	local12, local11 wz
01c04     24 00 90 AD |  if_e	jmp	#LR__0084
01c08                 | LR__0083
01c08     54 00 00 FF 
01c0c     CC 64 06 F1 | 	add	objptr, ##43212
01c10     32 BF 02 FB | 	rdlong	local13, objptr
01c14     54 00 00 FF 
01c18     CC 64 86 F1 | 	sub	objptr, ##43212
01c1c     5F C1 02 F6 | 	mov	local14, local13
01c20     60 A9 52 F2 | 	cmps	local02, local14 wc
01c24     01 A8 06 C1 |  if_b	add	local02, #1
01c28     74 FF 9F CD |  if_b	jmp	#LR__0082
01c2c                 | LR__0084
01c2c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01c2c     54 00 00 FF 
01c30     CC 64 06 F1 | 	add	objptr, ##43212
01c34     32 AD 02 FB | 	rdlong	local04, objptr
01c38     54 00 00 FF 
01c3c     CC 64 86 F1 | 	sub	objptr, ##43212
01c40     56 A9 52 F2 | 	cmps	local02, local04 wc
01c44     A8 00 90 3D |  if_ae	jmp	#LR__0087
01c48     38 00 00 FF 
01c4c     C0 65 06 F1 | 	add	objptr, ##29120
01c50     32 B1 02 FB | 	rdlong	local06, objptr
01c54     38 00 00 FF 
01c58     C0 65 86 F1 | 	sub	objptr, ##29120
01c5c     58 93 02 F6 | 	mov	arg01, local06
01c60     49 B3 02 F6 | 	mov	local07, arg01
01c64     D7 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01c68                 | LR__0085
01c68     59 7B CA FA | 	rdbyte	result1, local07 wz
01c6c     01 B2 06 51 |  if_ne	add	local07, #1
01c70     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01c74                 | LR__0086
01c74     49 B3 82 F1 | 	sub	local07, arg01
01c78     59 AF 02 F6 | 	mov	local05, local07
01c7c     57 95 02 F6 | 	mov	arg02, local05
01c80     54 95 82 F1 | 	sub	arg02, local02
01c84     58 93 02 F6 | 	mov	arg01, local06
01c88     48 48 B2 FD | 	call	#__system__Right_S
01c8c     3D 93 02 F6 | 	mov	arg01, result1
01c90     48 4C B2 FD | 	call	#__system__RTrim_S
01c94     3D 93 02 F6 | 	mov	arg01, result1
01c98     80 4B B2 FD | 	call	#__system__LTrim_S
01c9c     54 00 00 FF 
01ca0     D0 64 06 F1 | 	add	objptr, ##43216
01ca4     32 7B 62 FC | 	wrlong	result1, objptr
01ca8     1B 00 00 FF 
01cac     10 65 86 F1 | 	sub	objptr, ##14096
01cb0     32 93 02 FB | 	rdlong	arg01, objptr
01cb4     38 00 00 FF 
01cb8     C0 65 86 F1 | 	sub	objptr, ##29120
01cbc     01 A8 86 F1 | 	sub	local02, #1
01cc0     54 95 02 F6 | 	mov	arg02, local02
01cc4     84 47 B2 FD | 	call	#__system__Left_S
01cc8     3D 93 02 F6 | 	mov	arg01, result1
01ccc     0C 4C B2 FD | 	call	#__system__RTrim_S
01cd0     3D 93 02 F6 | 	mov	arg01, result1
01cd4     44 4B B2 FD | 	call	#__system__LTrim_S
01cd8     38 00 00 FF 
01cdc     C0 65 06 F1 | 	add	objptr, ##29120
01ce0     32 7B 62 FC | 	wrlong	result1, objptr
01ce4     38 00 00 FF 
01ce8     C0 65 86 F1 | 	sub	objptr, ##29120
01cec     1C 00 90 FD | 	jmp	#LR__0088
01cf0                 | LR__0087
01cf0     93 01 00 FF 
01cf4     18 AD 06 F6 | 	mov	local04, ##@LR__5494
01cf8     54 00 00 FF 
01cfc     D0 64 06 F1 | 	add	objptr, ##43216
01d00     32 AD 62 FC | 	wrlong	local04, objptr
01d04     54 00 00 FF 
01d08     D0 64 86 F1 | 	sub	objptr, ##43216
01d0c                 | LR__0088
01d0c                 | ' 
01d0c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01d0c     38 00 00 FF 
01d10     C8 65 06 F1 | 	add	objptr, ##29128
01d14     32 AD 02 FB | 	rdlong	local04, objptr
01d18     38 00 00 FF 
01d1c     C8 65 86 F1 | 	sub	objptr, ##29128
01d20     FF FF 7F FF 
01d24     FF AD 0E F2 | 	cmp	local04, ##-1 wz
01d28     40 00 90 5D |  if_ne	jmp	#LR__0089
01d2c     54 00 00 FF 
01d30     D0 64 06 F1 | 	add	objptr, ##43216
01d34     32 93 02 FB | 	rdlong	arg01, objptr
01d38     54 00 00 FF 
01d3c     D0 64 86 F1 | 	sub	objptr, ##43216
01d40     93 01 00 FF 
01d44     19 B1 06 F6 | 	mov	local06, ##@LR__5495
01d48     58 95 02 F6 | 	mov	arg02, local06
01d4c     7C 2E B2 FD | 	call	#__system___string_cmp
01d50     00 7A 0E F2 | 	cmp	result1, #0 wz
01d54     38 00 00 5F 
01d58     C8 65 06 51 |  if_ne	add	objptr, ##29128
01d5c     32 01 68 5C |  if_ne	wrlong	#0, objptr
01d60     38 00 00 5F 
01d64     C8 65 86 51 |  if_ne	sub	objptr, ##29128
01d68     08 01 90 5D |  if_ne	jmp	#LR__0093
01d6c                 | LR__0089
01d6c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01d6c     38 00 00 FF 
01d70     C8 65 06 F1 | 	add	objptr, ##29128
01d74     32 AD 02 FB | 	rdlong	local04, objptr
01d78     38 00 00 FF 
01d7c     C8 65 86 F1 | 	sub	objptr, ##29128
01d80     FF FF 7F FF 
01d84     FF AD 0E F2 | 	cmp	local04, ##-1 wz
01d88     3C 00 90 5D |  if_ne	jmp	#LR__0090
01d8c     54 00 00 FF 
01d90     D0 64 06 F1 | 	add	objptr, ##43216
01d94     32 93 02 FB | 	rdlong	arg01, objptr
01d98     54 00 00 FF 
01d9c     D0 64 86 F1 | 	sub	objptr, ##43216
01da0     93 01 00 FF 
01da4     1A 95 06 F6 | 	mov	arg02, ##@LR__5496
01da8     20 2E B2 FD | 	call	#__system___string_cmp
01dac     00 7A 0E F2 | 	cmp	result1, #0 wz
01db0     38 00 00 AF 
01db4     C8 65 06 A1 |  if_e	add	objptr, ##29128
01db8     32 07 68 AC |  if_e	wrlong	#3, objptr
01dbc     38 00 00 AF 
01dc0     C8 65 86 A1 |  if_e	sub	objptr, ##29128
01dc4     AC 00 90 AD |  if_e	jmp	#LR__0093
01dc8                 | LR__0090
01dc8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01dc8     38 00 00 FF 
01dcc     C8 65 06 F1 | 	add	objptr, ##29128
01dd0     32 AD 02 FB | 	rdlong	local04, objptr
01dd4     38 00 00 FF 
01dd8     C8 65 86 F1 | 	sub	objptr, ##29128
01ddc     04 AC 0E F2 | 	cmp	local04, #4 wz
01de0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01de4     54 00 00 FF 
01de8     D0 64 06 F1 | 	add	objptr, ##43216
01dec     32 93 02 FB | 	rdlong	arg01, objptr
01df0     54 00 00 FF 
01df4     D0 64 86 F1 | 	sub	objptr, ##43216
01df8     93 01 00 FF 
01dfc     1B 95 06 F6 | 	mov	arg02, ##@LR__5497
01e00     C8 2D B2 FD | 	call	#__system___string_cmp
01e04     00 7A 0E F2 | 	cmp	result1, #0 wz
01e08     38 00 00 5F 
01e0c     C8 65 06 51 |  if_ne	add	objptr, ##29128
01e10     32 03 68 5C |  if_ne	wrlong	#1, objptr
01e14     38 00 00 5F 
01e18     C8 65 86 51 |  if_ne	sub	objptr, ##29128
01e1c     54 00 90 5D |  if_ne	jmp	#LR__0093
01e20                 | LR__0091
01e20                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01e20     38 00 00 FF 
01e24     C8 65 06 F1 | 	add	objptr, ##29128
01e28     32 AD 02 FB | 	rdlong	local04, objptr
01e2c     38 00 00 FF 
01e30     C8 65 86 F1 | 	sub	objptr, ##29128
01e34     04 AC 0E F2 | 	cmp	local04, #4 wz
01e38     38 00 90 5D |  if_ne	jmp	#LR__0092
01e3c     54 00 00 FF 
01e40     D0 64 06 F1 | 	add	objptr, ##43216
01e44     32 93 02 FB | 	rdlong	arg01, objptr
01e48     54 00 00 FF 
01e4c     D0 64 86 F1 | 	sub	objptr, ##43216
01e50     93 01 00 FF 
01e54     1C 95 06 F6 | 	mov	arg02, ##@LR__5498
01e58     70 2D B2 FD | 	call	#__system___string_cmp
01e5c     00 7A 0E F2 | 	cmp	result1, #0 wz
01e60     38 00 00 AF 
01e64     C8 65 06 A1 |  if_e	add	objptr, ##29128
01e68     32 05 68 AC |  if_e	wrlong	#2, objptr
01e6c     38 00 00 AF 
01e70     C8 65 86 A1 |  if_e	sub	objptr, ##29128
01e74                 | LR__0092
01e74                 | LR__0093
01e74     38 CE 05 F1 | 	add	fp, #56
01e78     E7 00 68 FC | 	wrlong	#0, fp
01e7c     38 CE 85 F1 | 	sub	fp, #56
01e80     00 A8 06 F6 | 	mov	local02, #0
01e84     01 C2 06 F6 | 	mov	local15, #1
01e88                 | ' 
01e88                 | ' ' 1b: find separators
01e88                 | ' 
01e88                 | ' 107
01e88                 | ' separators(0)=0
01e88                 | ' i=0: j=1
01e88                 | ' do: 
01e88                 | LR__0094
01e88     01 A8 06 F1 | 	add	local02, #1
01e8c     38 00 00 FF 
01e90     C0 65 06 F1 | 	add	objptr, ##29120
01e94     32 93 02 FB | 	rdlong	arg01, objptr
01e98     38 00 00 FF 
01e9c     C0 65 86 F1 | 	sub	objptr, ##29120
01ea0     54 95 02 F6 | 	mov	arg02, local02
01ea4     01 96 06 F6 | 	mov	arg03, #1
01ea8     B8 46 B2 FD | 	call	#__system__Mid_S
01eac     3D C5 02 F6 | 	mov	local16, result1
01eb0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01eb0     62 93 02 F6 | 	mov	arg01, local16
01eb4     48 2D B0 FD | 	call	#_isseparator
01eb8     00 7A 0E F2 | 	cmp	result1, #0 wz
01ebc     1C 00 90 AD |  if_e	jmp	#LR__0095
01ec0     61 AB 02 F6 | 	mov	local03, local15
01ec4     02 AA 66 F0 | 	shl	local03, #2
01ec8     E7 B8 02 F6 | 	mov	local10, fp
01ecc     38 B8 06 F1 | 	add	local10, #56
01ed0     5C AB 02 F1 | 	add	local03, local10
01ed4     55 A9 62 FC | 	wrlong	local02, local03
01ed8     01 C2 06 F1 | 	add	local15, #1
01edc                 | LR__0095
01edc     54 00 00 FF 
01ee0     CC 64 06 F1 | 	add	objptr, ##43212
01ee4     32 AD 02 FB | 	rdlong	local04, objptr
01ee8     54 00 00 FF 
01eec     CC 64 86 F1 | 	sub	objptr, ##43212
01ef0     56 A9 5A F2 | 	cmps	local02, local04 wcz
01ef4     90 FF 9F ED |  if_be	jmp	#LR__0094
01ef8     61 AB 02 F6 | 	mov	local03, local15
01efc     02 AA 66 F0 | 	shl	local03, #2
01f00     E7 B8 02 F6 | 	mov	local10, fp
01f04     38 B8 06 F1 | 	add	local10, #56
01f08     5C AB 02 F1 | 	add	local03, local10
01f0c     55 A9 62 FC | 	wrlong	local02, local03
01f10     00 C6 06 F6 | 	mov	local17, #0
01f14                 | ' for i=0 to j-1 
01f14     00 A8 06 F6 | 	mov	local02, #0
01f18     61 C9 02 F6 | 	mov	local18, local15
01f1c                 | LR__0096
01f1c     64 A9 52 F2 | 	cmps	local02, local18 wc
01f20     48 01 90 3D |  if_ae	jmp	#LR__0100
01f24     54 AB 02 F6 | 	mov	local03, local02
01f28     02 AA 66 F0 | 	shl	local03, #2
01f2c     38 CE 05 F1 | 	add	fp, #56
01f30     E7 AA 02 F1 | 	add	local03, fp
01f34     55 AF 02 FB | 	rdlong	local05, local03
01f38     54 00 00 FF 
01f3c     D8 64 06 F1 | 	add	objptr, ##43224
01f40     32 AF 62 FC | 	wrlong	local05, objptr
01f44     54 AB 02 F6 | 	mov	local03, local02
01f48     01 AA 06 F1 | 	add	local03, #1
01f4c     02 AA 66 F0 | 	shl	local03, #2
01f50     E7 B8 02 F6 | 	mov	local10, fp
01f54     E7 AA 02 F1 | 	add	local03, fp
01f58     55 AF 02 FB | 	rdlong	local05, local03
01f5c     04 64 06 F1 | 	add	objptr, #4
01f60     32 AF 62 FC | 	wrlong	local05, objptr
01f64                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f64     04 64 86 F1 | 	sub	objptr, #4
01f68     32 AD 02 FB | 	rdlong	local04, objptr
01f6c     54 00 00 FF 
01f70     D8 64 86 F1 | 	sub	objptr, ##43224
01f74     01 AC 56 F2 | 	cmps	local04, #1 wc
01f78     38 CE 85 F1 | 	sub	fp, #56
01f7c     64 00 90 CD |  if_b	jmp	#LR__0098
01f80     38 00 00 FF 
01f84     C0 65 06 F1 | 	add	objptr, ##29120
01f88     32 93 02 FB | 	rdlong	arg01, objptr
01f8c     1B 00 00 FF 
01f90     18 65 06 F1 | 	add	objptr, ##14104
01f94     32 95 02 FB | 	rdlong	arg02, objptr
01f98     54 00 00 FF 
01f9c     D8 64 86 F1 | 	sub	objptr, ##43224
01fa0     01 96 06 F6 | 	mov	arg03, #1
01fa4     BC 45 B2 FD | 	call	#__system__Mid_S
01fa8     3D CB 02 F6 | 	mov	local19, result1
01fac     93 01 00 FF 
01fb0     1D 95 06 F6 | 	mov	arg02, ##@LR__5499
01fb4     65 93 02 F6 | 	mov	arg01, local19
01fb8     10 2C B2 FD | 	call	#__system___string_cmp
01fbc     00 7A 0E F2 | 	cmp	result1, #0 wz
01fc0     20 00 90 AD |  if_e	jmp	#LR__0097
01fc4     63 B9 02 F6 | 	mov	local10, local17
01fc8     03 B8 66 F0 | 	shl	local10, #3
01fcc     32 AF 02 F6 | 	mov	local05, objptr
01fd0     36 00 00 FF 
01fd4     B0 AF 06 F1 | 	add	local05, ##28080
01fd8     57 B9 02 F1 | 	add	local10, local05
01fdc     5C CB 62 FC | 	wrlong	local19, local10
01fe0     01 C6 06 F1 | 	add	local17, #1
01fe4                 | LR__0097
01fe4                 | LR__0098
01fe4     38 00 00 FF 
01fe8     C0 65 06 F1 | 	add	objptr, ##29120
01fec     32 93 02 FB | 	rdlong	arg01, objptr
01ff0     1B 00 00 FF 
01ff4     18 65 06 F1 | 	add	objptr, ##14104
01ff8     32 95 02 FB | 	rdlong	arg02, objptr
01ffc     01 94 06 F1 | 	add	arg02, #1
02000     04 64 06 F1 | 	add	objptr, #4
02004     32 97 02 FB | 	rdlong	arg03, objptr
02008     04 64 86 F1 | 	sub	objptr, #4
0200c     32 BB 02 FB | 	rdlong	local11, objptr
02010     54 00 00 FF 
02014     D8 64 86 F1 | 	sub	objptr, ##43224
02018     5D BD 02 F6 | 	mov	local12, local11
0201c     5E 97 82 F1 | 	sub	arg03, local12
02020     01 96 86 F1 | 	sub	arg03, #1
02024     3C 45 B2 FD | 	call	#__system__Mid_S
02028     3D CB 02 F6 | 	mov	local19, result1
0202c                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
0202c     93 01 00 FF 
02030     1E 95 06 F6 | 	mov	arg02, ##@LR__5500
02034     65 93 02 F6 | 	mov	arg01, local19
02038     90 2B B2 FD | 	call	#__system___string_cmp
0203c     00 7A 0E F2 | 	cmp	result1, #0 wz
02040     20 00 90 AD |  if_e	jmp	#LR__0099
02044     63 B9 02 F6 | 	mov	local10, local17
02048     03 B8 66 F0 | 	shl	local10, #3
0204c     32 AF 02 F6 | 	mov	local05, objptr
02050     36 00 00 FF 
02054     B0 AF 06 F1 | 	add	local05, ##28080
02058     57 B9 02 F1 | 	add	local10, local05
0205c     5C CB 62 FC | 	wrlong	local19, local10
02060     01 C6 06 F1 | 	add	local17, #1
02064                 | LR__0099
02064     01 A8 06 F1 | 	add	local02, #1
02068     B0 FE 9F FD | 	jmp	#LR__0096
0206c                 | LR__0100
0206c                 | ' 
0206c                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
0206c                 | ' 
0206c                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
0206c     38 00 00 FF 
02070     C8 65 06 F1 | 	add	objptr, ##29128
02074     32 AD 0A FB | 	rdlong	local04, objptr wz
02078     38 00 00 FF 
0207c     C8 65 86 F1 | 	sub	objptr, ##29128
02080     38 00 00 5F 
02084     C8 65 06 51 |  if_ne	add	objptr, ##29128
02088     32 B9 02 5B |  if_ne	rdlong	local10, objptr
0208c     38 00 00 5F 
02090     C8 65 86 51 |  if_ne	sub	objptr, ##29128
02094     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
02098     C0 00 90 5D |  if_ne	jmp	#LR__0103
0209c     36 00 00 FF 
020a0     B0 65 06 F1 | 	add	objptr, ##28080
020a4     32 BB 02 FB | 	rdlong	local11, objptr
020a8     36 00 00 FF 
020ac     B0 65 86 F1 | 	sub	objptr, ##28080
020b0     5D 93 02 F6 | 	mov	arg01, local11
020b4     2C 50 B0 FD | 	call	#_isdec
020b8     3D BD 02 F6 | 	mov	local12, result1
020bc     5E B1 02 F6 | 	mov	local06, local12
020c0     07 B0 66 F7 | 	signx	local06, #7
020c4     58 B1 22 F6 | 	not	local06, local06
020c8     00 B0 0E F2 | 	cmp	local06, #0 wz
020cc     8C 00 90 AD |  if_e	jmp	#LR__0103
020d0     63 A9 02 F6 | 	mov	local02, local17
020d4     36 00 00 FF 
020d8     B0 65 06 F1 | 	add	objptr, ##28080
020dc     D7 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
020e0                 | LR__0101
020e0     54 AF 02 F6 | 	mov	local05, local02
020e4     01 AE 86 F1 | 	sub	local05, #1
020e8     03 AE 66 F0 | 	shl	local05, #3
020ec     32 AF 02 F1 | 	add	local05, objptr
020f0     57 AD 02 FB | 	rdlong	local04, local05
020f4     54 B1 02 F6 | 	mov	local06, local02
020f8     01 B0 86 F1 | 	sub	local06, #1
020fc     03 B0 66 F0 | 	shl	local06, #3
02100     32 B1 02 F1 | 	add	local06, objptr
02104     04 B0 06 F1 | 	add	local06, #4
02108     58 AB 02 FB | 	rdlong	local03, local06
0210c     54 B1 02 F6 | 	mov	local06, local02
02110     03 B0 66 F0 | 	shl	local06, #3
02114     32 BD 02 F6 | 	mov	local12, objptr
02118     32 B1 02 F1 | 	add	local06, objptr
0211c     58 AD 62 FC | 	wrlong	local04, local06
02120     54 BB 02 F6 | 	mov	local11, local02
02124     5D BF 02 F6 | 	mov	local13, local11
02128     03 BE 66 F0 | 	shl	local13, #3
0212c     32 BF 02 F1 | 	add	local13, objptr
02130     04 BE 06 F1 | 	add	local13, #4
02134     5F AB 62 FC | 	wrlong	local03, local13
02138     01 A8 86 F1 | 	sub	local02, #1
0213c     01 A8 56 F2 | 	cmps	local02, #1 wc
02140     9C FF 9F 3D |  if_ae	jmp	#LR__0101
02144                 | LR__0102
02144     93 01 00 FF 
02148     1F AD 06 F6 | 	mov	local04, ##@LR__5501
0214c     32 AD 62 FC | 	wrlong	local04, objptr
02150     36 00 00 FF 
02154     B0 65 86 F1 | 	sub	objptr, ##28080
02158     01 C6 06 F1 | 	add	local17, #1
0215c                 | LR__0103
0215c     00 A8 06 F6 | 	mov	local02, #0
02160                 | ' 
02160                 | ' ' 1e : find strings
02160                 | ' 
02160                 | ' i=0
02160                 | ' do
02160                 | LR__0104
02160                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
02160     54 AF 02 F6 | 	mov	local05, local02
02164     03 AE 66 F0 | 	shl	local05, #3
02168     32 B1 02 F6 | 	mov	local06, objptr
0216c     36 00 00 FF 
02170     B0 B1 06 F1 | 	add	local06, ##28080
02174     58 AF 02 F1 | 	add	local05, local06
02178     57 93 02 FB | 	rdlong	arg01, local05
0217c     93 01 00 FF 
02180     21 95 06 F6 | 	mov	arg02, ##@LR__5502
02184     44 2A B2 FD | 	call	#__system___string_cmp
02188     00 7A 0E F2 | 	cmp	result1, #0 wz
0218c     01 A8 06 51 |  if_ne	add	local02, #1
02190     20 01 90 5D |  if_ne	jmp	#LR__0109
02194     54 CD 02 F6 | 	mov	local20, local02
02198                 | LR__0105
02198     54 B9 02 F6 | 	mov	local10, local02
0219c     01 B8 06 F1 | 	add	local10, #1
021a0     03 B8 66 F0 | 	shl	local10, #3
021a4     36 00 00 FF 
021a8     B0 65 06 F1 | 	add	objptr, ##28080
021ac     32 B9 02 F1 | 	add	local10, objptr
021b0     5C CB 02 FB | 	rdlong	local19, local10
021b4     66 B9 02 F6 | 	mov	local10, local20
021b8     03 B8 66 F0 | 	shl	local10, #3
021bc     32 B9 02 F1 | 	add	local10, objptr
021c0     66 BB 02 F6 | 	mov	local11, local20
021c4     5D C1 02 F6 | 	mov	local14, local11
021c8     03 C0 66 F0 | 	shl	local14, #3
021cc     32 C1 02 F1 | 	add	local14, objptr
021d0     60 93 02 FB | 	rdlong	arg01, local14
021d4     65 BD 02 F6 | 	mov	local12, local19
021d8     5E 95 02 F6 | 	mov	arg02, local12
021dc     36 00 00 FF 
021e0     B0 65 86 F1 | 	sub	objptr, ##28080
021e4     18 2A B2 FD | 	call	#__system___string_concat
021e8     5C 7B 62 FC | 	wrlong	result1, local10
021ec     54 C3 02 F6 | 	mov	local15, local02
021f0     01 C2 06 F1 | 	add	local15, #1
021f4     63 CF 02 F6 | 	mov	local21, local17
021f8     01 CE 06 F1 | 	add	local21, #1
021fc     D7 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02200                 | LR__0106
02200     67 C3 52 F2 | 	cmps	local15, local21 wc
02204     70 00 90 3D |  if_ae	jmp	#LR__0108
02208     61 AF 02 F6 | 	mov	local05, local15
0220c     01 AE 06 F1 | 	add	local05, #1
02210     03 AE 66 F0 | 	shl	local05, #3
02214     36 00 00 FF 
02218     B0 65 06 F1 | 	add	objptr, ##28080
0221c     32 AF 02 F1 | 	add	local05, objptr
02220     57 AD 02 FB | 	rdlong	local04, local05
02224     61 B1 02 F6 | 	mov	local06, local15
02228     01 B0 06 F1 | 	add	local06, #1
0222c     03 B0 66 F0 | 	shl	local06, #3
02230     32 B1 02 F1 | 	add	local06, objptr
02234     04 B0 06 F1 | 	add	local06, #4
02238     58 AB 02 FB | 	rdlong	local03, local06
0223c     61 B1 02 F6 | 	mov	local06, local15
02240     03 B0 66 F0 | 	shl	local06, #3
02244     32 BD 02 F6 | 	mov	local12, objptr
02248     32 B1 02 F1 | 	add	local06, objptr
0224c     58 AD 62 FC | 	wrlong	local04, local06
02250     61 BB 02 F6 | 	mov	local11, local15
02254     5D BF 02 F6 | 	mov	local13, local11
02258     03 BE 66 F0 | 	shl	local13, #3
0225c     32 BF 02 F1 | 	add	local13, objptr
02260     04 BE 06 F1 | 	add	local13, #4
02264     5F AB 62 FC | 	wrlong	local03, local13
02268     01 C2 06 F1 | 	add	local15, #1
0226c     36 00 00 FF 
02270     B0 65 86 F1 | 	sub	objptr, ##28080
02274     88 FF 9F FD | 	jmp	#LR__0106
02278                 | LR__0107
02278                 | LR__0108
02278     01 C6 86 F1 | 	sub	local17, #1
0227c     93 01 00 FF 
02280     23 95 06 F6 | 	mov	arg02, ##@LR__5503
02284     65 93 02 F6 | 	mov	arg01, local19
02288     40 29 B2 FD | 	call	#__system___string_cmp
0228c     00 7A 0E F2 | 	cmp	result1, #0 wz
02290     63 A9 52 52 |  if_ne	cmps	local02, local17 wc
02294     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
02298                 | '   if p$<>"""" then k+=1:i+=1
02298     93 01 00 FF 
0229c     25 95 06 F6 | 	mov	arg02, ##@LR__5504
022a0     65 93 02 F6 | 	mov	arg01, local19
022a4     24 29 B2 FD | 	call	#__system___string_cmp
022a8     00 7A 0E F2 | 	cmp	result1, #0 wz
022ac     01 C6 06 51 |  if_ne	add	local17, #1
022b0     01 A8 06 51 |  if_ne	add	local02, #1
022b4                 | LR__0109
022b4     63 A9 52 F2 | 	cmps	local02, local17 wc
022b8     A4 FE 9F CD |  if_b	jmp	#LR__0104
022bc     00 A8 06 F6 | 	mov	local02, #0
022c0                 | ' 
022c0                 | ' ' 1f : concatenate strings if "" detected between
022c0                 | '  
022c0                 | ' i=0
022c0                 | ' do
022c0                 | LR__0110
022c0                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
022c0     54 AF 02 F6 | 	mov	local05, local02
022c4     03 AE 66 F0 | 	shl	local05, #3
022c8     32 B1 02 F6 | 	mov	local06, objptr
022cc     36 00 00 FF 
022d0     B0 B1 06 F1 | 	add	local06, ##28080
022d4     58 AF 02 F1 | 	add	local05, local06
022d8     57 93 02 FB | 	rdlong	arg01, local05
022dc     01 94 06 F6 | 	mov	arg02, #1
022e0     F0 41 B2 FD | 	call	#__system__Right_S
022e4     3D 93 02 F6 | 	mov	arg01, result1
022e8     93 01 00 FF 
022ec     27 95 06 F6 | 	mov	arg02, ##@LR__5505
022f0     D8 28 B2 FD | 	call	#__system___string_cmp
022f4     00 7A 0E F2 | 	cmp	result1, #0 wz
022f8     74 01 90 5D |  if_ne	jmp	#LR__0116
022fc     54 B1 02 F6 | 	mov	local06, local02
02300     01 B0 06 F1 | 	add	local06, #1
02304     03 B0 66 F0 | 	shl	local06, #3
02308     32 BD 02 F6 | 	mov	local12, objptr
0230c     36 00 00 FF 
02310     B0 BD 06 F1 | 	add	local12, ##28080
02314     5E B1 02 F1 | 	add	local06, local12
02318     58 93 02 FB | 	rdlong	arg01, local06
0231c     01 94 06 F6 | 	mov	arg02, #1
02320     28 41 B2 FD | 	call	#__system__Left_S
02324     3D 93 02 F6 | 	mov	arg01, result1
02328     93 01 00 FF 
0232c     29 95 06 F6 | 	mov	arg02, ##@LR__5506
02330     98 28 B2 FD | 	call	#__system___string_cmp
02334     00 7A 0E F2 | 	cmp	result1, #0 wz
02338     34 01 90 5D |  if_ne	jmp	#LR__0116
0233c     54 B9 02 F6 | 	mov	local10, local02
02340     03 B8 66 F0 | 	shl	local10, #3
02344     36 00 00 FF 
02348     B0 65 06 F1 | 	add	objptr, ##28080
0234c     32 B9 02 F1 | 	add	local10, objptr
02350     54 C1 02 F6 | 	mov	local14, local02
02354     03 C0 66 F0 | 	shl	local14, #3
02358     32 C1 02 F1 | 	add	local14, objptr
0235c     60 B1 02 FB | 	rdlong	local06, local14
02360     54 BF 02 F6 | 	mov	local13, local02
02364     01 BE 06 F1 | 	add	local13, #1
02368     03 BE 66 F0 | 	shl	local13, #3
0236c     32 BF 02 F1 | 	add	local13, objptr
02370     5F BD 02 FB | 	rdlong	local12, local13
02374     54 D1 02 F6 | 	mov	local22, local02
02378     01 D0 06 F1 | 	add	local22, #1
0237c     68 D3 02 F6 | 	mov	local23, local22
02380     03 D2 66 F0 | 	shl	local23, #3
02384     32 D5 02 F6 | 	mov	local24, objptr
02388     32 D3 02 F1 | 	add	local23, objptr
0238c     69 93 02 FB | 	rdlong	arg01, local23
02390     36 00 00 FF 
02394     B0 65 86 F1 | 	sub	objptr, ##28080
02398     49 B3 02 F6 | 	mov	local07, arg01
0239c     D7 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
023a0                 | LR__0111
023a0     59 7B CA FA | 	rdbyte	result1, local07 wz
023a4     01 B2 06 51 |  if_ne	add	local07, #1
023a8     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
023ac                 | LR__0112
023ac     49 B3 82 F1 | 	sub	local07, arg01
023b0     59 BB 02 F6 | 	mov	local11, local07
023b4     01 BA 86 F1 | 	sub	local11, #1
023b8     5E 93 02 F6 | 	mov	arg01, local12
023bc     5D 95 02 F6 | 	mov	arg02, local11
023c0     10 41 B2 FD | 	call	#__system__Right_S
023c4     3D BD 02 F6 | 	mov	local12, result1
023c8     58 93 02 F6 | 	mov	arg01, local06
023cc     5E 95 02 F6 | 	mov	arg02, local12
023d0     2C 28 B2 FD | 	call	#__system___string_concat
023d4     3D B1 02 F6 | 	mov	local06, result1
023d8     5C B1 62 FC | 	wrlong	local06, local10
023dc                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
023dc     54 C3 02 F6 | 	mov	local15, local02
023e0     01 C2 06 F1 | 	add	local15, #1
023e4     63 D7 02 F6 | 	mov	local25, local17
023e8     01 D6 06 F1 | 	add	local25, #1
023ec     D7 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
023f0                 | LR__0113
023f0     6B C3 52 F2 | 	cmps	local15, local25 wc
023f4     70 00 90 3D |  if_ae	jmp	#LR__0115
023f8     61 AF 02 F6 | 	mov	local05, local15
023fc     01 AE 06 F1 | 	add	local05, #1
02400     03 AE 66 F0 | 	shl	local05, #3
02404     36 00 00 FF 
02408     B0 65 06 F1 | 	add	objptr, ##28080
0240c     32 AF 02 F1 | 	add	local05, objptr
02410     57 AD 02 FB | 	rdlong	local04, local05
02414     61 B1 02 F6 | 	mov	local06, local15
02418     01 B0 06 F1 | 	add	local06, #1
0241c     03 B0 66 F0 | 	shl	local06, #3
02420     32 B1 02 F1 | 	add	local06, objptr
02424     04 B0 06 F1 | 	add	local06, #4
02428     58 AB 02 FB | 	rdlong	local03, local06
0242c     61 B1 02 F6 | 	mov	local06, local15
02430     03 B0 66 F0 | 	shl	local06, #3
02434     32 BD 02 F6 | 	mov	local12, objptr
02438     32 B1 02 F1 | 	add	local06, objptr
0243c     58 AD 62 FC | 	wrlong	local04, local06
02440     61 BB 02 F6 | 	mov	local11, local15
02444     5D BF 02 F6 | 	mov	local13, local11
02448     03 BE 66 F0 | 	shl	local13, #3
0244c     32 BF 02 F1 | 	add	local13, objptr
02450     04 BE 06 F1 | 	add	local13, #4
02454     5F AB 62 FC | 	wrlong	local03, local13
02458     01 C2 06 F1 | 	add	local15, #1
0245c     36 00 00 FF 
02460     B0 65 86 F1 | 	sub	objptr, ##28080
02464     88 FF 9F FD | 	jmp	#LR__0113
02468                 | LR__0114
02468                 | LR__0115
02468     01 A8 86 F1 | 	sub	local02, #1
0246c     01 C6 86 F1 | 	sub	local17, #1
02470                 | LR__0116
02470     01 A8 06 F1 | 	add	local02, #1
02474     63 A9 52 F2 | 	cmps	local02, local17 wc
02478     44 FE 9F CD |  if_b	jmp	#LR__0110
0247c     00 A8 06 F6 | 	mov	local02, #0
02480                 | '  
02480                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
02480                 | '  
02480                 | ' i=0 
02480                 | ' do
02480                 | LR__0117
02480     54 B9 02 F6 | 	mov	local10, local02
02484     03 B8 66 F0 | 	shl	local10, #3
02488     36 00 00 FF 
0248c     B0 65 06 F1 | 	add	objptr, ##28080
02490     32 B9 02 F1 | 	add	local10, objptr
02494     5C D9 02 FB | 	rdlong	local26, local10
02498     54 B9 02 F6 | 	mov	local10, local02
0249c     01 B8 06 F1 | 	add	local10, #1
024a0     03 B8 66 F0 | 	shl	local10, #3
024a4     32 B9 02 F1 | 	add	local10, objptr
024a8     5C DB 02 FB | 	rdlong	local27, local10
024ac                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
024ac                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
024ac     93 01 00 FF 
024b0     2B 95 06 F6 | 	mov	arg02, ##@LR__5507
024b4     6C 93 02 F6 | 	mov	arg01, local26
024b8     36 00 00 FF 
024bc     B0 65 86 F1 | 	sub	objptr, ##28080
024c0     08 27 B2 FD | 	call	#__system___string_cmp
024c4     00 7A 0E F2 | 	cmp	result1, #0 wz
024c8     A8 00 90 AD |  if_e	jmp	#LR__0118
024cc     93 01 00 FF 
024d0     2D 95 06 F6 | 	mov	arg02, ##@LR__5508
024d4     6C 93 02 F6 | 	mov	arg01, local26
024d8     F0 26 B2 FD | 	call	#__system___string_cmp
024dc     3D AB 0A F6 | 	mov	local03, result1 wz
024e0     90 00 90 AD |  if_e	jmp	#LR__0118
024e4     93 01 00 FF 
024e8     2F B1 06 F6 | 	mov	local06, ##@LR__5509
024ec     6C 93 02 F6 | 	mov	arg01, local26
024f0     58 95 02 F6 | 	mov	arg02, local06
024f4     D4 26 B2 FD | 	call	#__system___string_cmp
024f8     00 7A 0E F2 | 	cmp	result1, #0 wz
024fc     74 00 90 AD |  if_e	jmp	#LR__0118
02500     93 01 00 FF 
02504     31 BD 06 F6 | 	mov	local12, ##@LR__5510
02508     6C 93 02 F6 | 	mov	arg01, local26
0250c     5E 95 02 F6 | 	mov	arg02, local12
02510     B8 26 B2 FD | 	call	#__system___string_cmp
02514     00 7A 0E F2 | 	cmp	result1, #0 wz
02518     58 00 90 AD |  if_e	jmp	#LR__0118
0251c     93 01 00 FF 
02520     33 BB 06 F6 | 	mov	local11, ##@LR__5511
02524     5D BD 02 F6 | 	mov	local12, local11
02528     6C 93 02 F6 | 	mov	arg01, local26
0252c     5E 95 02 F6 | 	mov	arg02, local12
02530     98 26 B2 FD | 	call	#__system___string_cmp
02534     3D B1 0A F6 | 	mov	local06, result1 wz
02538     38 00 90 AD |  if_e	jmp	#LR__0118
0253c     93 01 00 FF 
02540     35 BB 06 F6 | 	mov	local11, ##@LR__5512
02544     6C 93 02 F6 | 	mov	arg01, local26
02548     5D 95 02 F6 | 	mov	arg02, local11
0254c     7C 26 B2 FD | 	call	#__system___string_cmp
02550     3D BD 0A F6 | 	mov	local12, result1 wz
02554     1C 00 90 AD |  if_e	jmp	#LR__0118
02558     93 01 00 FF 
0255c     37 C1 06 F6 | 	mov	local14, ##@LR__5513
02560     6C 93 02 F6 | 	mov	arg01, local26
02564     60 95 02 F6 | 	mov	arg02, local14
02568     60 26 B2 FD | 	call	#__system___string_cmp
0256c     3D BB 0A F6 | 	mov	local11, result1 wz
02570     20 00 90 5D |  if_ne	jmp	#LR__0119
02574                 | LR__0118
02574     93 01 00 FF 
02578     39 DD 06 F6 | 	mov	local28, ##@LR__5514
0257c     6E BF 02 F6 | 	mov	local13, local28
02580     6D 93 02 F6 | 	mov	arg01, local27
02584     5F 95 02 F6 | 	mov	arg02, local13
02588     40 26 B2 FD | 	call	#__system___string_cmp
0258c     3D C1 0A F6 | 	mov	local14, result1 wz
02590     B8 00 90 AD |  if_e	jmp	#LR__0122
02594                 | LR__0119
02594     93 01 00 FF 
02598     3B DD 06 F6 | 	mov	local28, ##@LR__5515
0259c     6C 93 02 F6 | 	mov	arg01, local26
025a0     6E 95 02 F6 | 	mov	arg02, local28
025a4     24 26 B2 FD | 	call	#__system___string_cmp
025a8     3D BF 0A F6 | 	mov	local13, result1 wz
025ac     20 00 90 5D |  if_ne	jmp	#LR__0120
025b0     93 01 00 FF 
025b4     3D D3 06 F6 | 	mov	local23, ##@LR__5516
025b8     69 D1 02 F6 | 	mov	local22, local23
025bc     6D 93 02 F6 | 	mov	arg01, local27
025c0     68 95 02 F6 | 	mov	arg02, local22
025c4     04 26 B2 FD | 	call	#__system___string_cmp
025c8     3D DD 0A F6 | 	mov	local28, result1 wz
025cc     7C 00 90 AD |  if_e	jmp	#LR__0122
025d0                 | LR__0120
025d0     93 01 00 FF 
025d4     3F D3 06 F6 | 	mov	local23, ##@LR__5517
025d8     6C 93 02 F6 | 	mov	arg01, local26
025dc     69 95 02 F6 | 	mov	arg02, local23
025e0     E8 25 B2 FD | 	call	#__system___string_cmp
025e4     3D D1 0A F6 | 	mov	local22, result1 wz
025e8     20 00 90 5D |  if_ne	jmp	#LR__0121
025ec     93 01 00 FF 
025f0     41 DF 06 F6 | 	mov	local29, ##@LR__5518
025f4     6F D5 02 F6 | 	mov	local24, local29
025f8     6D 93 02 F6 | 	mov	arg01, local27
025fc     6A 95 02 F6 | 	mov	arg02, local24
02600     C8 25 B2 FD | 	call	#__system___string_cmp
02604     3D D3 0A F6 | 	mov	local23, result1 wz
02608     40 00 90 AD |  if_e	jmp	#LR__0122
0260c                 | LR__0121
0260c     93 01 00 FF 
02610     43 E1 06 F6 | 	mov	local30, ##@LR__5519
02614     70 DF 02 F6 | 	mov	local29, local30
02618     6C 93 02 F6 | 	mov	arg01, local26
0261c     6F 95 02 F6 | 	mov	arg02, local29
02620     A8 25 B2 FD | 	call	#__system___string_cmp
02624     3D D5 0A F6 | 	mov	local24, result1 wz
02628     EC 00 90 5D |  if_ne	jmp	#LR__0126
0262c     93 01 00 FF 
02630     45 E3 06 F6 | 	mov	local31, ##@LR__5520
02634     71 E1 02 F6 | 	mov	local30, local31
02638     6D 93 02 F6 | 	mov	arg01, local27
0263c     70 95 02 F6 | 	mov	arg02, local30
02640     88 25 B2 FD | 	call	#__system___string_cmp
02644     3D DF 0A F6 | 	mov	local29, result1 wz
02648     CC 00 90 5D |  if_ne	jmp	#LR__0126
0264c                 | LR__0122
0264c     54 B9 02 F6 | 	mov	local10, local02
02650     03 B8 66 F0 | 	shl	local10, #3
02654     32 AF 02 F6 | 	mov	local05, objptr
02658     36 00 00 FF 
0265c     B0 AF 06 F1 | 	add	local05, ##28080
02660     57 B9 02 F1 | 	add	local10, local05
02664     6D BD 02 F6 | 	mov	local12, local27
02668     6C 93 02 F6 | 	mov	arg01, local26
0266c     5E 95 02 F6 | 	mov	arg02, local12
02670     8C 25 B2 FD | 	call	#__system___string_concat
02674     5C 7B 62 FC | 	wrlong	result1, local10
02678                 | '     lparts(i).part$=s1$+s2$
02678                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02678     54 C3 02 F6 | 	mov	local15, local02
0267c     01 C2 06 F1 | 	add	local15, #1
02680     63 E5 02 F6 | 	mov	local32, local17
02684     01 E4 06 F1 | 	add	local32, #1
02688     D7 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
0268c                 | LR__0123
0268c     72 C3 52 F2 | 	cmps	local15, local32 wc
02690     7C 00 90 3D |  if_ae	jmp	#LR__0125
02694     61 AF 02 F6 | 	mov	local05, local15
02698     01 AE 06 F1 | 	add	local05, #1
0269c     03 AE 66 F0 | 	shl	local05, #3
026a0     36 00 00 FF 
026a4     B0 65 06 F1 | 	add	objptr, ##28080
026a8     32 AF 02 F1 | 	add	local05, objptr
026ac     57 AD 02 FB | 	rdlong	local04, local05
026b0     61 B1 02 F6 | 	mov	local06, local15
026b4     01 B0 06 F1 | 	add	local06, #1
026b8     03 B0 66 F0 | 	shl	local06, #3
026bc     32 B1 02 F1 | 	add	local06, objptr
026c0     04 B0 06 F1 | 	add	local06, #4
026c4     58 AB 02 FB | 	rdlong	local03, local06
026c8     61 B1 02 F6 | 	mov	local06, local15
026cc     03 B0 66 F0 | 	shl	local06, #3
026d0     32 BD 02 F6 | 	mov	local12, objptr
026d4     32 B1 02 F1 | 	add	local06, objptr
026d8     58 AD 62 FC | 	wrlong	local04, local06
026dc     61 BB 02 F6 | 	mov	local11, local15
026e0     5D C1 02 F6 | 	mov	local14, local11
026e4     60 BF 02 F6 | 	mov	local13, local14
026e8     03 BE 66 F0 | 	shl	local13, #3
026ec     32 DD 02 F6 | 	mov	local28, objptr
026f0     32 BF 02 F1 | 	add	local13, objptr
026f4     04 BE 06 F1 | 	add	local13, #4
026f8     5F AB 62 FC | 	wrlong	local03, local13
026fc     04 BE 86 F1 | 	sub	local13, #4
02700     01 C2 06 F1 | 	add	local15, #1
02704     36 00 00 FF 
02708     B0 65 86 F1 | 	sub	objptr, ##28080
0270c     7C FF 9F FD | 	jmp	#LR__0123
02710                 | LR__0124
02710                 | LR__0125
02710     01 A8 86 F1 | 	sub	local02, #1
02714     01 C6 86 F1 | 	sub	local17, #1
02718                 | LR__0126
02718     01 A8 06 F1 | 	add	local02, #1
0271c     63 A9 52 F2 | 	cmps	local02, local17 wc
02720     5C FD 9F CD |  if_b	jmp	#LR__0117
02724                 | '  
02724                 | ' ' 1h : now remove parts that are spaces
02724                 | ' 
02724                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02724     00 A8 06 F6 | 	mov	local02, #0
02728     63 E7 02 F6 | 	mov	local33, local17
0272c     01 E6 06 F1 | 	add	local33, #1
02730                 | LR__0127
02730     73 A9 52 F2 | 	cmps	local02, local33 wc
02734     50 00 90 3D |  if_ae	jmp	#LR__0128
02738     54 B9 02 F6 | 	mov	local10, local02
0273c     03 B8 66 F0 | 	shl	local10, #3
02740     36 00 00 FF 
02744     B0 65 06 F1 | 	add	objptr, ##28080
02748     32 B9 02 F1 | 	add	local10, objptr
0274c     54 BD 02 F6 | 	mov	local12, local02
02750     5E BB 02 F6 | 	mov	local11, local12
02754     5D C1 02 F6 | 	mov	local14, local11
02758     03 C0 66 F0 | 	shl	local14, #3
0275c     32 BF 02 F6 | 	mov	local13, objptr
02760     32 C1 02 F1 | 	add	local14, objptr
02764     60 93 02 FB | 	rdlong	arg01, local14
02768     36 00 00 FF 
0276c     B0 65 86 F1 | 	sub	objptr, ##28080
02770     68 41 B2 FD | 	call	#__system__RTrim_S
02774     3D 93 02 F6 | 	mov	arg01, result1
02778     A0 40 B2 FD | 	call	#__system__LTrim_S
0277c     5C 7B 62 FC | 	wrlong	result1, local10
02780     01 A8 06 F1 | 	add	local02, #1
02784     A8 FF 9F FD | 	jmp	#LR__0127
02788                 | LR__0128
02788     00 A8 06 F6 | 	mov	local02, #0
0278c     D7 86 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
02790                 | ' i=0
02790                 | ' do 
02790                 | LR__0129
02790                 | '   if len(lparts(i).part$)=0 then 
02790     54 AF 02 F6 | 	mov	local05, local02
02794     03 AE 66 F0 | 	shl	local05, #3
02798     32 B1 02 F6 | 	mov	local06, objptr
0279c     36 00 00 FF 
027a0     B0 B1 06 F1 | 	add	local06, ##28080
027a4     58 AF 02 F1 | 	add	local05, local06
027a8     57 93 02 FB | 	rdlong	arg01, local05
027ac     49 B3 02 F6 | 	mov	local07, arg01
027b0                 | LR__0130
027b0     59 7B CA FA | 	rdbyte	result1, local07 wz
027b4     01 B2 06 51 |  if_ne	add	local07, #1
027b8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
027bc     49 B3 8A F1 | 	sub	local07, arg01 wz
027c0     C4 00 90 5D |  if_ne	jmp	#LR__0134
027c4                 | '     if i=k-1 then k-=1  :  exit
027c4     63 AD 02 F6 | 	mov	local04, local17
027c8     01 AC 86 F1 | 	sub	local04, #1
027cc     56 A9 0A F2 | 	cmp	local02, local04 wz
027d0     01 C6 86 A1 |  if_e	sub	local17, #1
027d4     C4 00 90 AD |  if_e	jmp	#LR__0136
027d8                 | '     if i<k-1 then 
027d8     63 AD 02 F6 | 	mov	local04, local17
027dc     01 AC 86 F1 | 	sub	local04, #1
027e0     56 A9 52 F2 | 	cmps	local02, local04 wc
027e4     A0 00 90 3D |  if_ae	jmp	#LR__0133
027e8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
027e8     54 C3 02 F6 | 	mov	local15, local02
027ec     63 E9 02 F6 | 	mov	local34, local17
027f0     01 E8 86 F1 | 	sub	local34, #1
027f4                 | LR__0131
027f4     74 C3 52 F2 | 	cmps	local15, local34 wc
027f8     80 00 90 3D |  if_ae	jmp	#LR__0132
027fc     61 AF 02 F6 | 	mov	local05, local15
02800     01 AE 06 F1 | 	add	local05, #1
02804     03 AE 66 F0 | 	shl	local05, #3
02808     36 00 00 FF 
0280c     B0 65 06 F1 | 	add	objptr, ##28080
02810     32 AF 02 F1 | 	add	local05, objptr
02814     57 AD 02 FB | 	rdlong	local04, local05
02818     61 B1 02 F6 | 	mov	local06, local15
0281c     01 B0 06 F1 | 	add	local06, #1
02820     03 B0 66 F0 | 	shl	local06, #3
02824     32 B1 02 F1 | 	add	local06, objptr
02828     04 B0 06 F1 | 	add	local06, #4
0282c     58 AB 02 FB | 	rdlong	local03, local06
02830     61 B9 02 F6 | 	mov	local10, local15
02834     5C B1 02 F6 | 	mov	local06, local10
02838     03 B0 66 F0 | 	shl	local06, #3
0283c     32 BD 02 F6 | 	mov	local12, objptr
02840     32 B1 02 F1 | 	add	local06, objptr
02844     58 AD 62 FC | 	wrlong	local04, local06
02848     61 BB 02 F6 | 	mov	local11, local15
0284c     5D C1 02 F6 | 	mov	local14, local11
02850     60 BF 02 F6 | 	mov	local13, local14
02854     03 BE 66 F0 | 	shl	local13, #3
02858     32 DD 02 F6 | 	mov	local28, objptr
0285c     32 BF 02 F1 | 	add	local13, objptr
02860     04 BE 06 F1 | 	add	local13, #4
02864     5F AB 62 FC | 	wrlong	local03, local13
02868     04 BE 86 F1 | 	sub	local13, #4
0286c     01 C2 06 F1 | 	add	local15, #1
02870     36 00 00 FF 
02874     B0 65 86 F1 | 	sub	objptr, ##28080
02878     78 FF 9F FD | 	jmp	#LR__0131
0287c                 | LR__0132
0287c     01 C6 86 F1 | 	sub	local17, #1
02880                 | '       if i>0 then i-=1 
02880     01 A8 56 F2 | 	cmps	local02, #1 wc
02884     01 A8 86 31 |  if_ae	sub	local02, #1
02888                 | LR__0133
02888                 | LR__0134
02888     01 A8 06 F1 | 	add	local02, #1
0288c     63 AD 02 F6 | 	mov	local04, local17
02890     01 AC 86 F1 | 	sub	local04, #1
02894     56 A9 5A F2 | 	cmps	local02, local04 wcz
02898     F4 FE 9F ED |  if_be	jmp	#LR__0129
0289c                 | LR__0135
0289c                 | LR__0136
0289c                 | ' 
0289c                 | ' ' 1i: lowercase all that is not a string
0289c                 | ' 
0289c                 | ' for j=0 to k-1
0289c     00 C2 06 F6 | 	mov	local15, #0
028a0     63 EB 02 F6 | 	mov	local35, local17
028a4                 | LR__0137
028a4     75 C3 52 F2 | 	cmps	local15, local35 wc
028a8     C0 00 90 3D |  if_ae	jmp	#LR__0140
028ac                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
028ac     61 AF 02 F6 | 	mov	local05, local15
028b0     03 AE 66 F0 | 	shl	local05, #3
028b4     32 B1 02 F6 | 	mov	local06, objptr
028b8     36 00 00 FF 
028bc     B0 B1 06 F1 | 	add	local06, ##28080
028c0     58 AF 02 F1 | 	add	local05, local06
028c4     57 93 02 FB | 	rdlong	arg01, local05
028c8     01 94 06 F6 | 	mov	arg02, #1
028cc     7C 3B B2 FD | 	call	#__system__Left_S
028d0     3D 93 02 F6 | 	mov	arg01, result1
028d4     93 01 00 FF 
028d8     47 95 06 F6 | 	mov	arg02, ##@LR__5521
028dc     EC 22 B2 FD | 	call	#__system___string_cmp
028e0     00 7A 0E F2 | 	cmp	result1, #0 wz
028e4     3C 00 90 5D |  if_ne	jmp	#LR__0138
028e8     61 B1 02 F6 | 	mov	local06, local15
028ec     03 B0 66 F0 | 	shl	local06, #3
028f0     32 BD 02 F6 | 	mov	local12, objptr
028f4     36 00 00 FF 
028f8     B0 BD 06 F1 | 	add	local12, ##28080
028fc     5E B1 02 F1 | 	add	local06, local12
02900     58 93 02 FB | 	rdlong	arg01, local06
02904     01 94 06 F6 | 	mov	arg02, #1
02908     C8 3B B2 FD | 	call	#__system__Right_S
0290c     3D 93 02 F6 | 	mov	arg01, result1
02910     93 01 00 FF 
02914     49 95 06 F6 | 	mov	arg02, ##@LR__5522
02918     B0 22 B2 FD | 	call	#__system___string_cmp
0291c     00 7A 0E F2 | 	cmp	result1, #0 wz
02920     40 00 90 AD |  if_e	jmp	#LR__0139
02924                 | LR__0138
02924     61 B9 02 F6 | 	mov	local10, local15
02928     03 B8 66 F0 | 	shl	local10, #3
0292c     36 00 00 FF 
02930     B0 65 06 F1 | 	add	objptr, ##28080
02934     32 B9 02 F1 | 	add	local10, objptr
02938     61 BD 02 F6 | 	mov	local12, local15
0293c     5E BB 02 F6 | 	mov	local11, local12
02940     5D C1 02 F6 | 	mov	local14, local11
02944     03 C0 66 F0 | 	shl	local14, #3
02948     32 BF 02 F6 | 	mov	local13, objptr
0294c     32 C1 02 F1 | 	add	local14, objptr
02950     60 93 02 FB | 	rdlong	arg01, local14
02954     36 00 00 FF 
02958     B0 65 86 F1 | 	sub	objptr, ##28080
0295c     FC 3D B2 FD | 	call	#__system__LCase_S
02960     5C 7B 62 FC | 	wrlong	result1, local10
02964                 | LR__0139
02964     01 C2 06 F1 | 	add	local15, #1
02968     38 FF 9F FD | 	jmp	#LR__0137
0296c                 | LR__0140
0296c                 | ' 
0296c                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
0296c                 | ' 
0296c                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
0296c     00 A8 06 F6 | 	mov	local02, #0
02970     63 ED 02 F6 | 	mov	local36, local17
02974     01 EC 06 F1 | 	add	local36, #1
02978     D7 1A 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
0297c                 | LR__0141
0297c     76 A9 52 F2 | 	cmps	local02, local36 wc
02980     2C 00 90 3D |  if_ae	jmp	#LR__0143
02984     54 B9 02 F6 | 	mov	local10, local02
02988     03 B8 66 F0 | 	shl	local10, #3
0298c     32 AF 02 F6 | 	mov	local05, objptr
02990     36 00 00 FF 
02994     B0 AF 06 F1 | 	add	local05, ##28080
02998     57 B9 02 F1 | 	add	local10, local05
0299c     04 B8 06 F1 | 	add	local10, #4
029a0     FF FF FF FF 
029a4     5C FF 6B FC | 	wrlong	##-1, local10
029a8     01 A8 06 F1 | 	add	local02, #1
029ac     CC FF 9F FD | 	jmp	#LR__0141
029b0                 | LR__0142
029b0                 | LR__0143
029b0                 | ' 
029b0                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
029b0     36 00 00 FF 
029b4     B0 65 06 F1 | 	add	objptr, ##28080
029b8     32 93 02 FB | 	rdlong	arg01, objptr
029bc     36 00 00 FF 
029c0     B0 65 86 F1 | 	sub	objptr, ##28080
029c4     1C 47 B0 FD | 	call	#_isdec
029c8     00 7A 0E F2 | 	cmp	result1, #0 wz
029cc     01 EE 06 56 |  if_ne	mov	local37, #1
029d0     00 EE 06 A6 |  if_e	mov	local37, #0
029d4                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
029d4     36 00 00 FF 
029d8     B0 65 06 F1 | 	add	objptr, ##28080
029dc     32 93 02 FB | 	rdlong	arg01, objptr
029e0     36 00 00 FF 
029e4     B0 65 86 F1 | 	sub	objptr, ##28080
029e8     93 01 00 FF 
029ec     4B 95 06 F6 | 	mov	arg02, ##@LR__5523
029f0     D8 21 B2 FD | 	call	#__system___string_cmp
029f4     00 7A 0E F2 | 	cmp	result1, #0 wz
029f8     01 EE 06 A6 |  if_e	mov	local37, #1
029fc     00 A8 06 F6 | 	mov	local02, #0
02a00                 | ' i=0 : do 
02a00                 | LR__0144
02a00                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02a00     54 AF 02 F6 | 	mov	local05, local02
02a04     03 AE 66 F0 | 	shl	local05, #3
02a08     32 B1 02 F6 | 	mov	local06, objptr
02a0c     36 00 00 FF 
02a10     B0 B1 06 F1 | 	add	local06, ##28080
02a14     58 AF 02 F1 | 	add	local05, local06
02a18     57 93 02 FB | 	rdlong	arg01, local05
02a1c     93 01 00 FF 
02a20     50 95 06 F6 | 	mov	arg02, ##@LR__5524
02a24     A4 21 B2 FD | 	call	#__system___string_cmp
02a28     00 7A 0E F2 | 	cmp	result1, #0 wz
02a2c     0C 00 90 AD |  if_e	jmp	#LR__0145
02a30     01 A8 06 F1 | 	add	local02, #1
02a34     63 A9 5A F2 | 	cmps	local02, local17 wcz
02a38     C4 FF 9F ED |  if_be	jmp	#LR__0144
02a3c                 | LR__0145
02a3c                 | ' if i<k then addptr=i+1	 							' then found
02a3c     63 A9 52 F2 | 	cmps	local02, local17 wc
02a40     54 EF 02 C6 |  if_b	mov	local37, local02
02a44     01 EE 06 C1 |  if_b	add	local37, #1
02a48     36 00 00 FF 
02a4c     B0 65 06 F1 | 	add	objptr, ##28080
02a50                 | ' lp$=lparts(addptr).part$ 
02a50                 | ' 
02a50                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a50     77 AF 02 F6 | 	mov	local05, local37
02a54     03 AE 66 F0 | 	shl	local05, #3
02a58     32 AF 02 F1 | 	add	local05, objptr
02a5c     57 93 02 FB | 	rdlong	arg01, local05
02a60     01 94 06 F6 | 	mov	arg02, #1
02a64     36 00 00 FF 
02a68     B0 65 86 F1 | 	sub	objptr, ##28080
02a6c     DC 39 B2 FD | 	call	#__system__Left_S
02a70     3D 93 02 F6 | 	mov	arg01, result1
02a74     93 01 00 FF 
02a78     55 95 06 F6 | 	mov	arg02, ##@LR__5525
02a7c     4C 21 B2 FD | 	call	#__system___string_cmp
02a80     00 7A 0E F2 | 	cmp	result1, #0 wz
02a84     58 01 90 5D |  if_ne	jmp	#LR__0152
02a88     77 B1 02 F6 | 	mov	local06, local37
02a8c     03 B0 66 F0 | 	shl	local06, #3
02a90     32 BD 02 F6 | 	mov	local12, objptr
02a94     36 00 00 FF 
02a98     B0 BD 06 F1 | 	add	local12, ##28080
02a9c     5E B1 02 F1 | 	add	local06, local12
02aa0     58 93 02 FB | 	rdlong	arg01, local06
02aa4     49 B3 02 F6 | 	mov	local07, arg01
02aa8     D7 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
02aac                 | LR__0146
02aac     59 7B CA FA | 	rdbyte	result1, local07 wz
02ab0     01 B2 06 51 |  if_ne	add	local07, #1
02ab4     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
02ab8                 | LR__0147
02ab8     49 B3 82 F1 | 	sub	local07, arg01
02abc     02 B2 56 F2 | 	cmps	local07, #2 wc
02ac0     1C 01 90 CD |  if_b	jmp	#LR__0152
02ac4     01 C6 06 F1 | 	add	local17, #1
02ac8                 | '   k+=1
02ac8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02ac8     63 A9 02 F6 | 	mov	local02, local17
02acc     77 F1 02 F6 | 	mov	local38, local37
02ad0     01 F0 06 F1 | 	add	local38, #1
02ad4     36 00 00 FF 
02ad8     B0 65 06 F1 | 	add	objptr, ##28080
02adc     D7 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02ae0                 | LR__0148
02ae0     54 AF 02 F6 | 	mov	local05, local02
02ae4     01 AE 86 F1 | 	sub	local05, #1
02ae8     03 AE 66 F0 | 	shl	local05, #3
02aec     32 AF 02 F1 | 	add	local05, objptr
02af0     57 AD 02 FB | 	rdlong	local04, local05
02af4     54 B1 02 F6 | 	mov	local06, local02
02af8     01 B0 86 F1 | 	sub	local06, #1
02afc     03 B0 66 F0 | 	shl	local06, #3
02b00     32 B1 02 F1 | 	add	local06, objptr
02b04     04 B0 06 F1 | 	add	local06, #4
02b08     58 AB 02 FB | 	rdlong	local03, local06
02b0c     54 B1 02 F6 | 	mov	local06, local02
02b10     03 B0 66 F0 | 	shl	local06, #3
02b14     32 B1 02 F1 | 	add	local06, objptr
02b18     58 AD 62 FC | 	wrlong	local04, local06
02b1c     54 BF 02 F6 | 	mov	local13, local02
02b20     03 BE 66 F0 | 	shl	local13, #3
02b24     32 BF 02 F1 | 	add	local13, objptr
02b28     04 BE 06 F1 | 	add	local13, #4
02b2c     5F AB 62 FC | 	wrlong	local03, local13
02b30     01 A8 86 F1 | 	sub	local02, #1
02b34     78 A9 52 F2 | 	cmps	local02, local38 wc
02b38     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02b3c                 | LR__0149
02b3c     77 B9 02 F6 | 	mov	local10, local37
02b40     01 B8 06 F1 | 	add	local10, #1
02b44     03 B8 66 F0 | 	shl	local10, #3
02b48     32 B9 02 F1 | 	add	local10, objptr
02b4c     77 C1 02 F6 | 	mov	local14, local37
02b50     03 C0 66 F0 | 	shl	local14, #3
02b54     32 C1 02 F1 | 	add	local14, objptr
02b58     60 B1 02 FB | 	rdlong	local06, local14
02b5c     77 BF 02 F6 | 	mov	local13, local37
02b60     5F DD 02 F6 | 	mov	local28, local13
02b64     6E D1 02 F6 | 	mov	local22, local28
02b68     03 D0 66 F0 | 	shl	local22, #3
02b6c     32 D3 02 F6 | 	mov	local23, objptr
02b70     32 D1 02 F1 | 	add	local22, objptr
02b74     68 93 02 FB | 	rdlong	arg01, local22
02b78     36 00 00 FF 
02b7c     B0 65 86 F1 | 	sub	objptr, ##28080
02b80     49 B3 02 F6 | 	mov	local07, arg01
02b84     D7 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02b88                 | LR__0150
02b88     59 7B CA FA | 	rdbyte	result1, local07 wz
02b8c     01 B2 06 51 |  if_ne	add	local07, #1
02b90     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02b94                 | LR__0151
02b94     49 B3 82 F1 | 	sub	local07, arg01
02b98     59 C1 02 F6 | 	mov	local14, local07
02b9c     60 BB 02 F6 | 	mov	local11, local14
02ba0     01 BA 86 F1 | 	sub	local11, #1
02ba4     5D BD 02 F6 | 	mov	local12, local11
02ba8     58 93 02 F6 | 	mov	arg01, local06
02bac     5E 95 02 F6 | 	mov	arg02, local12
02bb0     20 39 B2 FD | 	call	#__system__Right_S
02bb4     5C 7B 62 FC | 	wrlong	result1, local10
02bb8     77 B9 02 F6 | 	mov	local10, local37
02bbc     03 B8 66 F0 | 	shl	local10, #3
02bc0     32 AF 02 F6 | 	mov	local05, objptr
02bc4     36 00 00 FF 
02bc8     B0 AF 06 F1 | 	add	local05, ##28080
02bcc     57 B9 02 F1 | 	add	local10, local05
02bd0     93 01 00 FF 
02bd4     57 B1 06 F6 | 	mov	local06, ##@LR__5526
02bd8     5C B1 62 FC | 	wrlong	local06, local10
02bdc     9C 01 90 FD | 	jmp	#LR__0160
02be0                 | LR__0152
02be0     77 B1 02 F6 | 	mov	local06, local37
02be4     03 B0 66 F0 | 	shl	local06, #3
02be8     32 BD 02 F6 | 	mov	local12, objptr
02bec     36 00 00 FF 
02bf0     B0 BD 06 F1 | 	add	local12, ##28080
02bf4     5E B1 02 F1 | 	add	local06, local12
02bf8     58 95 02 FB | 	rdlong	arg02, local06
02bfc     93 01 00 FF 
02c00     59 97 06 F6 | 	mov	arg03, ##@LR__5527
02c04     01 92 06 F6 | 	mov	arg01, #1
02c08     88 3D B2 FD | 	call	#__system__Instr
02c0c     3D F3 02 F6 | 	mov	local39, result1
02c10                 | ' 
02c10                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02c10                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02c10     01 F2 56 F2 | 	cmps	local39, #1 wc
02c14     64 01 90 CD |  if_b	jmp	#LR__0159
02c18     77 AF 02 F6 | 	mov	local05, local37
02c1c     03 AE 66 F0 | 	shl	local05, #3
02c20     32 B1 02 F6 | 	mov	local06, objptr
02c24     36 00 00 FF 
02c28     B0 B1 06 F1 | 	add	local06, ##28080
02c2c     58 AF 02 F1 | 	add	local05, local06
02c30     57 93 02 FB | 	rdlong	arg01, local05
02c34     49 B3 02 F6 | 	mov	local07, arg01
02c38     D7 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02c3c                 | LR__0153
02c3c     59 7B CA FA | 	rdbyte	result1, local07 wz
02c40     01 B2 06 51 |  if_ne	add	local07, #1
02c44     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02c48                 | LR__0154
02c48     49 B3 82 F1 | 	sub	local07, arg01
02c4c     59 F3 52 F2 | 	cmps	local39, local07 wc
02c50     28 01 90 3D |  if_ae	jmp	#LR__0159
02c54     01 C6 06 F1 | 	add	local17, #1
02c58                 | '   k+=1
02c58                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02c58     63 A9 02 F6 | 	mov	local02, local17
02c5c     77 F5 02 F6 | 	mov	local40, local37
02c60     01 F4 06 F1 | 	add	local40, #1
02c64     36 00 00 FF 
02c68     B0 65 06 F1 | 	add	objptr, ##28080
02c6c     D7 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02c70                 | LR__0155
02c70     54 AF 02 F6 | 	mov	local05, local02
02c74     01 AE 86 F1 | 	sub	local05, #1
02c78     03 AE 66 F0 | 	shl	local05, #3
02c7c     32 AF 02 F1 | 	add	local05, objptr
02c80     57 AD 02 FB | 	rdlong	local04, local05
02c84     54 B1 02 F6 | 	mov	local06, local02
02c88     01 B0 86 F1 | 	sub	local06, #1
02c8c     03 B0 66 F0 | 	shl	local06, #3
02c90     32 B1 02 F1 | 	add	local06, objptr
02c94     04 B0 06 F1 | 	add	local06, #4
02c98     58 AB 02 FB | 	rdlong	local03, local06
02c9c     54 B1 02 F6 | 	mov	local06, local02
02ca0     03 B0 66 F0 | 	shl	local06, #3
02ca4     32 B1 02 F1 | 	add	local06, objptr
02ca8     58 AD 62 FC | 	wrlong	local04, local06
02cac     54 BF 02 F6 | 	mov	local13, local02
02cb0     03 BE 66 F0 | 	shl	local13, #3
02cb4     32 BF 02 F1 | 	add	local13, objptr
02cb8     04 BE 06 F1 | 	add	local13, #4
02cbc     5F AB 62 FC | 	wrlong	local03, local13
02cc0     01 A8 86 F1 | 	sub	local02, #1
02cc4     7A A9 52 F2 | 	cmps	local02, local40 wc
02cc8     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02ccc                 | LR__0156
02ccc     77 B9 02 F6 | 	mov	local10, local37
02cd0     01 B8 06 F1 | 	add	local10, #1
02cd4     03 B8 66 F0 | 	shl	local10, #3
02cd8     32 B9 02 F1 | 	add	local10, objptr
02cdc     77 C1 02 F6 | 	mov	local14, local37
02ce0     03 C0 66 F0 | 	shl	local14, #3
02ce4     32 C1 02 F1 | 	add	local14, objptr
02ce8     60 B1 02 FB | 	rdlong	local06, local14
02cec     77 DD 02 F6 | 	mov	local28, local37
02cf0     6E D1 02 F6 | 	mov	local22, local28
02cf4     03 D0 66 F0 | 	shl	local22, #3
02cf8     32 D3 02 F6 | 	mov	local23, objptr
02cfc     32 D1 02 F1 | 	add	local22, objptr
02d00     68 93 02 FB | 	rdlong	arg01, local22
02d04     36 00 00 FF 
02d08     B0 65 86 F1 | 	sub	objptr, ##28080
02d0c     49 B3 02 F6 | 	mov	local07, arg01
02d10     D7 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02d14                 | LR__0157
02d14     59 7B CA FA | 	rdbyte	result1, local07 wz
02d18     01 B2 06 51 |  if_ne	add	local07, #1
02d1c     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02d20                 | LR__0158
02d20     49 B3 82 F1 | 	sub	local07, arg01
02d24     59 95 02 F6 | 	mov	arg02, local07
02d28     79 95 82 F1 | 	sub	arg02, local39
02d2c     58 93 02 F6 | 	mov	arg01, local06
02d30     A0 37 B2 FD | 	call	#__system__Right_S
02d34     5C 7B 62 FC | 	wrlong	result1, local10
02d38     77 B9 02 F6 | 	mov	local10, local37
02d3c     03 B8 66 F0 | 	shl	local10, #3
02d40     36 00 00 FF 
02d44     B0 65 06 F1 | 	add	objptr, ##28080
02d48     32 B9 02 F1 | 	add	local10, objptr
02d4c     77 BB 02 F6 | 	mov	local11, local37
02d50     5D C1 02 F6 | 	mov	local14, local11
02d54     03 C0 66 F0 | 	shl	local14, #3
02d58     32 BF 02 F6 | 	mov	local13, objptr
02d5c     32 C1 02 F1 | 	add	local14, objptr
02d60     60 93 02 FB | 	rdlong	arg01, local14
02d64     79 BD 02 F6 | 	mov	local12, local39
02d68     5E 95 02 F6 | 	mov	arg02, local12
02d6c     36 00 00 FF 
02d70     B0 65 86 F1 | 	sub	objptr, ##28080
02d74     D4 36 B2 FD | 	call	#__system__Left_S
02d78     5C 7B 62 FC | 	wrlong	result1, local10
02d7c                 | LR__0159
02d7c                 | LR__0160
02d7c     77 B9 02 F6 | 	mov	local10, local37
02d80     03 B8 66 F0 | 	shl	local10, #3
02d84     32 AF 02 F6 | 	mov	local05, objptr
02d88     36 00 00 FF 
02d8c     B0 AF 06 F1 | 	add	local05, ##28080
02d90     57 B9 02 F1 | 	add	local10, local05
02d94     5C F7 02 FB | 	rdlong	local41, local10
02d98                 | ' 
02d98                 | ' 825
02d98                 | ' lp$=lparts(addptr).part$ 
02d98                 | ' 
02d98                 | ' ' process mouse/cursor/click on/off
02d98                 | ' 
02d98                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02d98     93 01 00 FF 
02d9c     5B 95 06 F6 | 	mov	arg02, ##@LR__5528
02da0     7B 93 02 F6 | 	mov	arg01, local41
02da4     24 1E B2 FD | 	call	#__system___string_cmp
02da8     00 7A 0E F2 | 	cmp	result1, #0 wz
02dac     30 00 90 AD |  if_e	jmp	#LR__0161
02db0     93 01 00 FF 
02db4     61 95 06 F6 | 	mov	arg02, ##@LR__5529
02db8     7B 93 02 F6 | 	mov	arg01, local41
02dbc     0C 1E B2 FD | 	call	#__system___string_cmp
02dc0     00 7A 0E F2 | 	cmp	result1, #0 wz
02dc4     18 00 90 AD |  if_e	jmp	#LR__0161
02dc8     93 01 00 FF 
02dcc     68 95 06 F6 | 	mov	arg02, ##@LR__5530
02dd0     7B 93 02 F6 | 	mov	arg01, local41
02dd4     F4 1D B2 FD | 	call	#__system___string_cmp
02dd8     00 7A 0E F2 | 	cmp	result1, #0 wz
02ddc     D8 00 90 5D |  if_ne	jmp	#LR__0164
02de0                 | LR__0161
02de0                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02de0     77 AF 02 F6 | 	mov	local05, local37
02de4     01 AE 06 F1 | 	add	local05, #1
02de8     03 AE 66 F0 | 	shl	local05, #3
02dec     32 B1 02 F6 | 	mov	local06, objptr
02df0     36 00 00 FF 
02df4     B0 B1 06 F1 | 	add	local06, ##28080
02df8     58 AF 02 F1 | 	add	local05, local06
02dfc     57 93 02 FB | 	rdlong	arg01, local05
02e00     93 01 00 FF 
02e04     6E 95 06 F6 | 	mov	arg02, ##@LR__5531
02e08     C0 1D B2 FD | 	call	#__system___string_cmp
02e0c     00 7A 0E F2 | 	cmp	result1, #0 wz
02e10     38 00 90 5D |  if_ne	jmp	#LR__0162
02e14     77 B9 02 F6 | 	mov	local10, local37
02e18     01 B8 06 F1 | 	add	local10, #1
02e1c     03 B8 66 F0 | 	shl	local10, #3
02e20     36 00 00 FF 
02e24     B0 65 06 F1 | 	add	objptr, ##28080
02e28     32 B9 02 F1 | 	add	local10, objptr
02e2c     93 01 00 FF 
02e30     71 B1 06 F6 | 	mov	local06, ##@LR__5532
02e34     5C B1 62 FC | 	wrlong	local06, local10
02e38     14 64 06 F1 | 	add	objptr, #20
02e3c     01 00 80 FF 
02e40     32 01 68 FC | 	wrlong	##512, objptr
02e44     36 00 00 FF 
02e48     C4 65 86 F1 | 	sub	objptr, ##28100
02e4c                 | LR__0162
02e4c                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02e4c     77 AF 02 F6 | 	mov	local05, local37
02e50     01 AE 06 F1 | 	add	local05, #1
02e54     03 AE 66 F0 | 	shl	local05, #3
02e58     32 B1 02 F6 | 	mov	local06, objptr
02e5c     36 00 00 FF 
02e60     B0 B1 06 F1 | 	add	local06, ##28080
02e64     58 AF 02 F1 | 	add	local05, local06
02e68     57 93 02 FB | 	rdlong	arg01, local05
02e6c     93 01 00 FF 
02e70     73 95 06 F6 | 	mov	arg02, ##@LR__5533
02e74     54 1D B2 FD | 	call	#__system___string_cmp
02e78     00 7A 0E F2 | 	cmp	result1, #0 wz
02e7c     38 00 90 5D |  if_ne	jmp	#LR__0163
02e80     77 B9 02 F6 | 	mov	local10, local37
02e84     01 B8 06 F1 | 	add	local10, #1
02e88     03 B8 66 F0 | 	shl	local10, #3
02e8c     36 00 00 FF 
02e90     B0 65 06 F1 | 	add	objptr, ##28080
02e94     32 B9 02 F1 | 	add	local10, objptr
02e98     93 01 00 FF 
02e9c     77 B1 06 F6 | 	mov	local06, ##@LR__5534
02ea0     5C B1 62 FC | 	wrlong	local06, local10
02ea4     14 64 06 F1 | 	add	objptr, #20
02ea8     01 00 80 FF 
02eac     32 01 68 FC | 	wrlong	##512, objptr
02eb0     36 00 00 FF 
02eb4     C4 65 86 F1 | 	sub	objptr, ##28100
02eb8                 | LR__0163
02eb8                 | LR__0164
02eb8                 | ' 		
02eb8                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02eb8                 | ' 
02eb8                 | ' if (lp$="mode" orelse lp$="m.") then 
02eb8     93 01 00 FF 
02ebc     79 95 06 F6 | 	mov	arg02, ##@LR__5535
02ec0     7B 93 02 F6 | 	mov	arg01, local41
02ec4     04 1D B2 FD | 	call	#__system___string_cmp
02ec8     00 7A 0E F2 | 	cmp	result1, #0 wz
02ecc     18 00 90 AD |  if_e	jmp	#LR__0165
02ed0     93 01 00 FF 
02ed4     7E 95 06 F6 | 	mov	arg02, ##@LR__5536
02ed8     7B 93 02 F6 | 	mov	arg01, local41
02edc     EC 1C B2 FD | 	call	#__system___string_cmp
02ee0     00 7A 0E F2 | 	cmp	result1, #0 wz
02ee4     28 02 90 5D |  if_ne	jmp	#LR__0172
02ee8                 | LR__0165
02ee8                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02ee8     77 AF 02 F6 | 	mov	local05, local37
02eec     01 AE 06 F1 | 	add	local05, #1
02ef0     03 AE 66 F0 | 	shl	local05, #3
02ef4     32 B1 02 F6 | 	mov	local06, objptr
02ef8     36 00 00 FF 
02efc     B0 B1 06 F1 | 	add	local06, ##28080
02f00     58 AF 02 F1 | 	add	local05, local06
02f04     57 93 02 FB | 	rdlong	arg01, local05
02f08     93 01 00 FF 
02f0c     81 95 06 F6 | 	mov	arg02, ##@LR__5537
02f10     B8 1C B2 FD | 	call	#__system___string_cmp
02f14     00 7A 0E F2 | 	cmp	result1, #0 wz
02f18     28 00 90 5D |  if_ne	jmp	#LR__0166
02f1c     77 B9 02 F6 | 	mov	local10, local37
02f20     01 B8 06 F1 | 	add	local10, #1
02f24     03 B8 66 F0 | 	shl	local10, #3
02f28     32 AF 02 F6 | 	mov	local05, objptr
02f2c     36 00 00 FF 
02f30     B0 AF 06 F1 | 	add	local05, ##28080
02f34     57 B9 02 F1 | 	add	local10, local05
02f38     93 01 00 FF 
02f3c     87 B1 06 F6 | 	mov	local06, ##@LR__5538
02f40     5C B1 62 FC | 	wrlong	local06, local10
02f44                 | LR__0166
02f44                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02f44     77 AF 02 F6 | 	mov	local05, local37
02f48     01 AE 06 F1 | 	add	local05, #1
02f4c     03 AE 66 F0 | 	shl	local05, #3
02f50     32 B1 02 F6 | 	mov	local06, objptr
02f54     36 00 00 FF 
02f58     B0 B1 06 F1 | 	add	local06, ##28080
02f5c     58 AF 02 F1 | 	add	local05, local06
02f60     57 93 02 FB | 	rdlong	arg01, local05
02f64     93 01 00 FF 
02f68     89 95 06 F6 | 	mov	arg02, ##@LR__5539
02f6c     5C 1C B2 FD | 	call	#__system___string_cmp
02f70     00 7A 0E F2 | 	cmp	result1, #0 wz
02f74     28 00 90 5D |  if_ne	jmp	#LR__0167
02f78     77 B9 02 F6 | 	mov	local10, local37
02f7c     01 B8 06 F1 | 	add	local10, #1
02f80     03 B8 66 F0 | 	shl	local10, #3
02f84     32 AF 02 F6 | 	mov	local05, objptr
02f88     36 00 00 FF 
02f8c     B0 AF 06 F1 | 	add	local05, ##28080
02f90     57 B9 02 F1 | 	add	local10, local05
02f94     93 01 00 FF 
02f98     92 B1 06 F6 | 	mov	local06, ##@LR__5540
02f9c     5C B1 62 FC | 	wrlong	local06, local10
02fa0                 | LR__0167
02fa0                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02fa0     77 AF 02 F6 | 	mov	local05, local37
02fa4     01 AE 06 F1 | 	add	local05, #1
02fa8     03 AE 66 F0 | 	shl	local05, #3
02fac     32 B1 02 F6 | 	mov	local06, objptr
02fb0     36 00 00 FF 
02fb4     B0 B1 06 F1 | 	add	local06, ##28080
02fb8     58 AF 02 F1 | 	add	local05, local06
02fbc     57 93 02 FB | 	rdlong	arg01, local05
02fc0     93 01 00 FF 
02fc4     94 95 06 F6 | 	mov	arg02, ##@LR__5541
02fc8     00 1C B2 FD | 	call	#__system___string_cmp
02fcc     00 7A 0E F2 | 	cmp	result1, #0 wz
02fd0     28 00 90 5D |  if_ne	jmp	#LR__0168
02fd4     77 B9 02 F6 | 	mov	local10, local37
02fd8     01 B8 06 F1 | 	add	local10, #1
02fdc     03 B8 66 F0 | 	shl	local10, #3
02fe0     32 AF 02 F6 | 	mov	local05, objptr
02fe4     36 00 00 FF 
02fe8     B0 AF 06 F1 | 	add	local05, ##28080
02fec     57 B9 02 F1 | 	add	local10, local05
02ff0     93 01 00 FF 
02ff4     9D B1 06 F6 | 	mov	local06, ##@LR__5542
02ff8     5C B1 62 FC | 	wrlong	local06, local10
02ffc                 | LR__0168
02ffc                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02ffc     77 AF 02 F6 | 	mov	local05, local37
03000     01 AE 06 F1 | 	add	local05, #1
03004     03 AE 66 F0 | 	shl	local05, #3
03008     32 B1 02 F6 | 	mov	local06, objptr
0300c     36 00 00 FF 
03010     B0 B1 06 F1 | 	add	local06, ##28080
03014     58 AF 02 F1 | 	add	local05, local06
03018     57 93 02 FB | 	rdlong	arg01, local05
0301c     93 01 00 FF 
03020     9F 95 06 F6 | 	mov	arg02, ##@LR__5543
03024     A4 1B B2 FD | 	call	#__system___string_cmp
03028     00 7A 0E F2 | 	cmp	result1, #0 wz
0302c     28 00 90 5D |  if_ne	jmp	#LR__0169
03030     77 B9 02 F6 | 	mov	local10, local37
03034     01 B8 06 F1 | 	add	local10, #1
03038     03 B8 66 F0 | 	shl	local10, #3
0303c     32 AF 02 F6 | 	mov	local05, objptr
03040     36 00 00 FF 
03044     B0 AF 06 F1 | 	add	local05, ##28080
03048     57 B9 02 F1 | 	add	local10, local05
0304c     93 01 00 FF 
03050     A8 B1 06 F6 | 	mov	local06, ##@LR__5544
03054     5C B1 62 FC | 	wrlong	local06, local10
03058                 | LR__0169
03058                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
03058     77 AF 02 F6 | 	mov	local05, local37
0305c     01 AE 06 F1 | 	add	local05, #1
03060     03 AE 66 F0 | 	shl	local05, #3
03064     32 B1 02 F6 | 	mov	local06, objptr
03068     36 00 00 FF 
0306c     B0 B1 06 F1 | 	add	local06, ##28080
03070     58 AF 02 F1 | 	add	local05, local06
03074     57 93 02 FB | 	rdlong	arg01, local05
03078     93 01 00 FF 
0307c     AA 95 06 F6 | 	mov	arg02, ##@LR__5545
03080     48 1B B2 FD | 	call	#__system___string_cmp
03084     00 7A 0E F2 | 	cmp	result1, #0 wz
03088     28 00 90 5D |  if_ne	jmp	#LR__0170
0308c     77 B9 02 F6 | 	mov	local10, local37
03090     01 B8 06 F1 | 	add	local10, #1
03094     03 B8 66 F0 | 	shl	local10, #3
03098     32 AF 02 F6 | 	mov	local05, objptr
0309c     36 00 00 FF 
030a0     B0 AF 06 F1 | 	add	local05, ##28080
030a4     57 B9 02 F1 | 	add	local10, local05
030a8     93 01 00 FF 
030ac     AD B1 06 F6 | 	mov	local06, ##@LR__5546
030b0     5C B1 62 FC | 	wrlong	local06, local10
030b4                 | LR__0170
030b4                 | '   if lparts(addptr+1).part$="amiga" then lparts(addptr+1).part$="5"  
030b4     77 AF 02 F6 | 	mov	local05, local37
030b8     01 AE 06 F1 | 	add	local05, #1
030bc     03 AE 66 F0 | 	shl	local05, #3
030c0     32 B1 02 F6 | 	mov	local06, objptr
030c4     36 00 00 FF 
030c8     B0 B1 06 F1 | 	add	local06, ##28080
030cc     58 AF 02 F1 | 	add	local05, local06
030d0     57 93 02 FB | 	rdlong	arg01, local05
030d4     93 01 00 FF 
030d8     AF 95 06 F6 | 	mov	arg02, ##@LR__5547
030dc     EC 1A B2 FD | 	call	#__system___string_cmp
030e0     00 7A 0E F2 | 	cmp	result1, #0 wz
030e4     28 00 90 5D |  if_ne	jmp	#LR__0171
030e8     77 B9 02 F6 | 	mov	local10, local37
030ec     01 B8 06 F1 | 	add	local10, #1
030f0     03 B8 66 F0 | 	shl	local10, #3
030f4     32 AF 02 F6 | 	mov	local05, objptr
030f8     36 00 00 FF 
030fc     B0 AF 06 F1 | 	add	local05, ##28080
03100     57 B9 02 F1 | 	add	local10, local05
03104     93 01 00 FF 
03108     B5 B1 06 F6 | 	mov	local06, ##@LR__5548
0310c     5C B1 62 FC | 	wrlong	local06, local10
03110                 | LR__0171
03110                 | LR__0172
03110                 | ' 
03110                 | ' ' find part types 
03110                 | ' 
03110                 | ' for i=0 to k-1
03110     00 A8 06 F6 | 	mov	local02, #0
03114     63 F9 02 F6 | 	mov	local42, local17
03118                 | LR__0173
03118     7C A9 52 F2 | 	cmps	local02, local42 wc
0311c     58 07 90 3D |  if_ae	jmp	#LR__0185
03120     54 B9 02 F6 | 	mov	local10, local02
03124     03 B8 66 F0 | 	shl	local10, #3
03128     36 00 00 FF 
0312c     B0 65 06 F1 | 	add	objptr, ##28080
03130     32 B9 02 F1 | 	add	local10, objptr
03134     54 BB 02 F6 | 	mov	local11, local02
03138     5D C1 02 F6 | 	mov	local14, local11
0313c     60 BF 02 F6 | 	mov	local13, local14
03140     03 BE 66 F0 | 	shl	local13, #3
03144     32 BF 02 F1 | 	add	local13, objptr
03148     5F 93 02 FB | 	rdlong	arg01, local13
0314c     36 00 00 FF 
03150     B0 65 86 F1 | 	sub	objptr, ##28080
03154     A8 1A B0 FD | 	call	#_isseparator
03158     3D 7B E2 F8 | 	getbyte	result1, result1, #0
0315c     04 B8 06 F1 | 	add	local10, #4
03160     5C 7B 62 FC | 	wrlong	result1, local10
03164                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03164     54 B9 02 F6 | 	mov	local10, local02
03168     03 B8 66 F0 | 	shl	local10, #3
0316c     32 AF 02 F6 | 	mov	local05, objptr
03170     36 00 00 FF 
03174     B0 AF 06 F1 | 	add	local05, ##28080
03178     57 B9 02 F1 | 	add	local10, local05
0317c     04 B8 06 F1 | 	add	local10, #4
03180     5C BD 02 FB | 	rdlong	local12, local10
03184     01 BC 56 F2 | 	cmps	local12, #1 wc
03188     E4 06 90 3D |  if_ae	jmp	#LR__0184
0318c     54 B9 02 F6 | 	mov	local10, local02
03190     03 B8 66 F0 | 	shl	local10, #3
03194     36 00 00 FF 
03198     B0 65 06 F1 | 	add	objptr, ##28080
0319c     32 B9 02 F1 | 	add	local10, objptr
031a0     54 BB 02 F6 | 	mov	local11, local02
031a4     5D C1 02 F6 | 	mov	local14, local11
031a8     60 BF 02 F6 | 	mov	local13, local14
031ac     03 BE 66 F0 | 	shl	local13, #3
031b0     32 BF 02 F1 | 	add	local13, objptr
031b4     5F 93 02 FB | 	rdlong	arg01, local13
031b8     36 00 00 FF 
031bc     B0 65 86 F1 | 	sub	objptr, ##28080
031c0     88 12 B0 FD | 	call	#_isoperator
031c4     3D 7B E2 F8 | 	getbyte	result1, result1, #0
031c8     04 B8 06 F1 | 	add	local10, #4
031cc     5C 7B 62 FC | 	wrlong	result1, local10
031d0                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031d0     54 B9 02 F6 | 	mov	local10, local02
031d4     03 B8 66 F0 | 	shl	local10, #3
031d8     32 AF 02 F6 | 	mov	local05, objptr
031dc     36 00 00 FF 
031e0     B0 AF 06 F1 | 	add	local05, ##28080
031e4     57 B9 02 F1 | 	add	local10, local05
031e8     04 B8 06 F1 | 	add	local10, #4
031ec     5C BD 02 FB | 	rdlong	local12, local10
031f0     01 BC 56 F2 | 	cmps	local12, #1 wc
031f4     78 06 90 3D |  if_ae	jmp	#LR__0184
031f8     54 B9 02 F6 | 	mov	local10, local02
031fc     03 B8 66 F0 | 	shl	local10, #3
03200     36 00 00 FF 
03204     B0 65 06 F1 | 	add	objptr, ##28080
03208     32 B9 02 F1 | 	add	local10, objptr
0320c     54 BB 02 F6 | 	mov	local11, local02
03210     5D C1 02 F6 | 	mov	local14, local11
03214     60 BF 02 F6 | 	mov	local13, local14
03218     03 BE 66 F0 | 	shl	local13, #3
0321c     32 BF 02 F1 | 	add	local13, objptr
03220     5F 93 02 FB | 	rdlong	arg01, local13
03224     36 00 00 FF 
03228     B0 65 86 F1 | 	sub	objptr, ##28080
0322c                 | ' 
0322c                 | ' select case s
0322c     94 01 00 FF 
03230     BA 94 06 F6 | 	mov	arg02, ##@LR__5639
03234     94 19 B2 FD | 	call	#__system___string_cmp
03238     00 7A 0E F2 | 	cmp	result1, #0 wz
0323c     1B 7A 06 A6 |  if_e	mov	result1, #27
03240     00 7A 06 56 |  if_ne	mov	result1, #0
03244     3D 7B E2 F8 | 	getbyte	result1, result1, #0
03248     04 B8 06 F1 | 	add	local10, #4
0324c     5C 7B 62 FC | 	wrlong	result1, local10
03250                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03250     54 B9 02 F6 | 	mov	local10, local02
03254     03 B8 66 F0 | 	shl	local10, #3
03258     32 AF 02 F6 | 	mov	local05, objptr
0325c     36 00 00 FF 
03260     B0 AF 06 F1 | 	add	local05, ##28080
03264     57 B9 02 F1 | 	add	local10, local05
03268     04 B8 06 F1 | 	add	local10, #4
0326c     5C BD 02 FB | 	rdlong	local12, local10
03270     01 BC 56 F2 | 	cmps	local12, #1 wc
03274     F8 05 90 3D |  if_ae	jmp	#LR__0184
03278     54 B9 02 F6 | 	mov	local10, local02
0327c     03 B8 66 F0 | 	shl	local10, #3
03280     36 00 00 FF 
03284     B0 65 06 F1 | 	add	objptr, ##28080
03288     32 B9 02 F1 | 	add	local10, objptr
0328c     54 BB 02 F6 | 	mov	local11, local02
03290     5D C1 02 F6 | 	mov	local14, local11
03294     60 BF 02 F6 | 	mov	local13, local14
03298     03 BE 66 F0 | 	shl	local13, #3
0329c     32 BF 02 F1 | 	add	local13, objptr
032a0     5F 93 02 FB | 	rdlong	arg01, local13
032a4     36 00 00 FF 
032a8     B0 65 86 F1 | 	sub	objptr, ##28080
032ac     50 1B B0 FD | 	call	#_iscommand
032b0     3D 7B E2 F8 | 	getbyte	result1, result1, #0
032b4     04 B8 06 F1 | 	add	local10, #4
032b8     5C 7B 62 FC | 	wrlong	result1, local10
032bc                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
032bc     54 B9 02 F6 | 	mov	local10, local02
032c0     03 B8 66 F0 | 	shl	local10, #3
032c4     32 AF 02 F6 | 	mov	local05, objptr
032c8     36 00 00 FF 
032cc     B0 AF 06 F1 | 	add	local05, ##28080
032d0     57 B9 02 F1 | 	add	local10, local05
032d4     04 B8 06 F1 | 	add	local10, #4
032d8     5C BD 02 FB | 	rdlong	local12, local10
032dc     01 BC 56 F2 | 	cmps	local12, #1 wc
032e0     8C 05 90 3D |  if_ae	jmp	#LR__0184
032e4     54 B9 02 F6 | 	mov	local10, local02
032e8     03 B8 66 F0 | 	shl	local10, #3
032ec     36 00 00 FF 
032f0     B0 65 06 F1 | 	add	objptr, ##28080
032f4     32 B9 02 F1 | 	add	local10, objptr
032f8     54 BB 02 F6 | 	mov	local11, local02
032fc     5D C1 02 F6 | 	mov	local14, local11
03300     60 BF 02 F6 | 	mov	local13, local14
03304     03 BE 66 F0 | 	shl	local13, #3
03308     32 DD 02 F6 | 	mov	local28, objptr
0330c     32 BF 02 F1 | 	add	local13, objptr
03310     5F 93 02 FB | 	rdlong	arg01, local13
03314     36 00 00 FF 
03318     B0 65 86 F1 | 	sub	objptr, ##28080
0331c     A0 2C B0 FD | 	call	#_isfunction
03320     3D 7B E2 F8 | 	getbyte	result1, result1, #0
03324     04 B8 06 F1 | 	add	local10, #4
03328     5C 7B 62 FC | 	wrlong	result1, local10
0332c                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0332c     54 B9 02 F6 | 	mov	local10, local02
03330     03 B8 66 F0 | 	shl	local10, #3
03334     32 AF 02 F6 | 	mov	local05, objptr
03338     36 00 00 FF 
0333c     B0 AF 06 F1 | 	add	local05, ##28080
03340     57 B9 02 F1 | 	add	local10, local05
03344     04 B8 06 F1 | 	add	local10, #4
03348     5C BD 02 FB | 	rdlong	local12, local10
0334c     01 BC 56 F2 | 	cmps	local12, #1 wc
03350     1C 05 90 3D |  if_ae	jmp	#LR__0184
03354     54 B9 02 F6 | 	mov	local10, local02
03358     03 B8 66 F0 | 	shl	local10, #3
0335c     36 00 00 FF 
03360     B0 65 06 F1 | 	add	objptr, ##28080
03364     32 B9 02 F1 | 	add	local10, objptr
03368     54 BB 02 F6 | 	mov	local11, local02
0336c     5D C1 02 F6 | 	mov	local14, local11
03370     03 C0 66 F0 | 	shl	local14, #3
03374     32 BF 02 F6 | 	mov	local13, objptr
03378     32 C1 02 F1 | 	add	local14, objptr
0337c     60 93 02 FB | 	rdlong	arg01, local14
03380     36 00 00 FF 
03384     B0 65 86 F1 | 	sub	objptr, ##28080
03388     08 15 B0 FD | 	call	#_isnotename
0338c     04 B8 06 F1 | 	add	local10, #4
03390     5C 7B 62 FC | 	wrlong	result1, local10
03394                 | ' lparts(i).token=isnotename(lparts(i).part$) 
03394                 | ' if lparts(i).token>0 then 
03394     54 B9 02 F6 | 	mov	local10, local02
03398     03 B8 66 F0 | 	shl	local10, #3
0339c     32 AF 02 F6 | 	mov	local05, objptr
033a0     36 00 00 FF 
033a4     B0 AF 06 F1 | 	add	local05, ##28080
033a8     57 B9 02 F1 | 	add	local10, local05
033ac     04 B8 06 F1 | 	add	local10, #4
033b0     5C B1 02 FB | 	rdlong	local06, local10
033b4     01 B0 56 F2 | 	cmps	local06, #1 wc
033b8     80 00 90 CD |  if_b	jmp	#LR__0174
033bc     54 AF 02 F6 | 	mov	local05, local02
033c0     03 AE 66 F0 | 	shl	local05, #3
033c4     32 B1 02 F6 | 	mov	local06, objptr
033c8     36 00 00 FF 
033cc     B0 B1 06 F1 | 	add	local06, ##28080
033d0     58 AF 02 F1 | 	add	local05, local06
033d4     04 AE 06 F1 | 	add	local05, #4
033d8     57 BD 02 FB | 	rdlong	local12, local05
033dc     5E 93 02 F6 | 	mov	arg01, local12
033e0     24 3E B0 FD | 	call	#_getnoteval
033e4     3D FB 02 F6 | 	mov	local43, result1
033e8     54 B9 02 F6 | 	mov	local10, local02
033ec     03 B8 66 F0 | 	shl	local10, #3
033f0     32 AF 02 F6 | 	mov	local05, objptr
033f4     36 00 00 FF 
033f8     B0 AF 06 F1 | 	add	local05, ##28080
033fc     57 B9 02 F1 | 	add	local10, local05
03400     7D 93 02 F6 | 	mov	arg01, local43
03404     3C 32 B2 FD | 	call	#__system__str_S
03408     5C 7B 62 FC | 	wrlong	result1, local10
0340c     54 AD 02 F6 | 	mov	local04, local02
03410     56 AB 02 F6 | 	mov	local03, local04
03414     55 B9 02 F6 | 	mov	local10, local03
03418     03 B8 66 F0 | 	shl	local10, #3
0341c     32 AF 02 F6 | 	mov	local05, objptr
03420     36 00 00 FF 
03424     B0 AF 06 F1 | 	add	local05, ##28080
03428     57 B9 02 F1 | 	add	local10, local05
0342c     04 B8 06 F1 | 	add	local10, #4
03430     01 00 80 FF 
03434     5C 05 68 FC | 	wrlong	##514, local10
03438     34 04 90 FD | 	jmp	#LR__0184
0343c                 | LR__0174
0343c     54 B9 02 F6 | 	mov	local10, local02
03440     03 B8 66 F0 | 	shl	local10, #3
03444     36 00 00 FF 
03448     B0 65 06 F1 | 	add	objptr, ##28080
0344c     32 B9 02 F1 | 	add	local10, objptr
03450     54 C1 02 F6 | 	mov	local14, local02
03454     03 C0 66 F0 | 	shl	local14, #3
03458     32 C1 02 F1 | 	add	local14, objptr
0345c     60 93 02 FB | 	rdlong	arg01, local14
03460     36 00 00 FF 
03464     B0 65 86 F1 | 	sub	objptr, ##28080
03468     C0 12 B0 FD | 	call	#_ischannel
0346c     04 B8 06 F1 | 	add	local10, #4
03470     5C 7B 62 FC | 	wrlong	result1, local10
03474                 | ' 
03474                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
03474                 | ' 
03474                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
03474     54 B9 02 F6 | 	mov	local10, local02
03478     03 B8 66 F0 | 	shl	local10, #3
0347c     32 AF 02 F6 | 	mov	local05, objptr
03480     36 00 00 FF 
03484     B0 AF 06 F1 | 	add	local05, ##28080
03488     57 B9 02 F1 | 	add	local10, local05
0348c     04 B8 06 F1 | 	add	local10, #4
03490     5C B1 02 FB | 	rdlong	local06, local10
03494     01 B0 56 F2 | 	cmps	local06, #1 wc
03498     70 00 90 CD |  if_b	jmp	#LR__0175
0349c     54 B9 02 F6 | 	mov	local10, local02
034a0     03 B8 66 F0 | 	shl	local10, #3
034a4     36 00 00 FF 
034a8     B0 65 06 F1 | 	add	objptr, ##28080
034ac     32 B9 02 F1 | 	add	local10, objptr
034b0     54 BB 02 F6 | 	mov	local11, local02
034b4     5D C1 02 F6 | 	mov	local14, local11
034b8     03 C0 66 F0 | 	shl	local14, #3
034bc     32 BF 02 F6 | 	mov	local13, objptr
034c0     32 C1 02 F1 | 	add	local14, objptr
034c4     60 93 02 FB | 	rdlong	arg01, local14
034c8     01 BC 06 F6 | 	mov	local12, #1
034cc     01 94 06 F6 | 	mov	arg02, #1
034d0     36 00 00 FF 
034d4     B0 65 86 F1 | 	sub	objptr, ##28080
034d8     F8 2F B2 FD | 	call	#__system__Right_S
034dc     5C 7B 62 FC | 	wrlong	result1, local10
034e0     54 AD 02 F6 | 	mov	local04, local02
034e4     56 AB 02 F6 | 	mov	local03, local04
034e8     55 B9 02 F6 | 	mov	local10, local03
034ec     03 B8 66 F0 | 	shl	local10, #3
034f0     32 AF 02 F6 | 	mov	local05, objptr
034f4     36 00 00 FF 
034f8     B0 AF 06 F1 | 	add	local05, ##28080
034fc     57 B9 02 F1 | 	add	local10, local05
03500     04 B8 06 F1 | 	add	local10, #4
03504     5C 59 68 FC | 	wrlong	#44, local10
03508     64 03 90 FD | 	jmp	#LR__0184
0350c                 | LR__0175
0350c     54 B9 02 F6 | 	mov	local10, local02
03510     03 B8 66 F0 | 	shl	local10, #3
03514     36 00 00 FF 
03518     B0 65 06 F1 | 	add	objptr, ##28080
0351c     32 B9 02 F1 | 	add	local10, objptr
03520     54 BB 02 F6 | 	mov	local11, local02
03524     5D C1 02 F6 | 	mov	local14, local11
03528     03 C0 66 F0 | 	shl	local14, #3
0352c     32 BF 02 F6 | 	mov	local13, objptr
03530     32 C1 02 F1 | 	add	local14, objptr
03534     60 93 02 FB | 	rdlong	arg01, local14
03538     36 00 00 FF 
0353c     B0 65 86 F1 | 	sub	objptr, ##28080
03540     D0 12 B0 FD | 	call	#_isconstant
03544     04 B8 06 F1 | 	add	local10, #4
03548     5C 7B 62 FC | 	wrlong	result1, local10
0354c                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
0354c     54 B9 02 F6 | 	mov	local10, local02
03550     03 B8 66 F0 | 	shl	local10, #3
03554     32 AF 02 F6 | 	mov	local05, objptr
03558     36 00 00 FF 
0355c     B0 AF 06 F1 | 	add	local05, ##28080
03560     57 B9 02 F1 | 	add	local10, local05
03564     04 B8 06 F1 | 	add	local10, #4
03568     5C B1 02 FB | 	rdlong	local06, local10
0356c     01 B0 56 F2 | 	cmps	local06, #1 wc
03570     90 00 90 CD |  if_b	jmp	#LR__0176
03574     54 B9 02 F6 | 	mov	local10, local02
03578     03 B8 66 F0 | 	shl	local10, #3
0357c     36 00 00 FF 
03580     B0 65 06 F1 | 	add	objptr, ##28080
03584     32 B9 02 F1 | 	add	local10, objptr
03588     54 BD 02 F6 | 	mov	local12, local02
0358c     5E BB 02 F6 | 	mov	local11, local12
03590     5D C1 02 F6 | 	mov	local14, local11
03594     03 C0 66 F0 | 	shl	local14, #3
03598     32 BF 02 F6 | 	mov	local13, objptr
0359c     32 C1 02 F1 | 	add	local14, objptr
035a0     04 C0 06 F1 | 	add	local14, #4
035a4     60 93 02 FB | 	rdlong	arg01, local14
035a8     04 C0 86 F1 | 	sub	local14, #4
035ac     36 00 00 FF 
035b0     B0 65 86 F1 | 	sub	objptr, ##28080
035b4     49 93 52 F6 | 	abs	arg01, arg01 wc
035b8     1F FC C6 C9 |  if_b	decod	local44, #31
035bc     00 FC 06 36 |  if_ae	mov	local44, #0
035c0     AC 38 B2 FD | 	call	#__system___float_fromuns
035c4     7E 7B 62 F5 | 	xor	result1, local44
035c8     3D 93 02 F6 | 	mov	arg01, result1
035cc     74 30 B2 FD | 	call	#__system__str_S
035d0     5C 7B 62 FC | 	wrlong	result1, local10
035d4     54 AD 02 F6 | 	mov	local04, local02
035d8     56 AB 02 F6 | 	mov	local03, local04
035dc     55 B9 02 F6 | 	mov	local10, local03
035e0     03 B8 66 F0 | 	shl	local10, #3
035e4     32 AF 02 F6 | 	mov	local05, objptr
035e8     36 00 00 FF 
035ec     B0 AF 06 F1 | 	add	local05, ##28080
035f0     57 B9 02 F1 | 	add	local10, local05
035f4     04 B8 06 F1 | 	add	local10, #4
035f8     01 00 80 FF 
035fc     5C 03 68 FC | 	wrlong	##513, local10
03600     6C 02 90 FD | 	jmp	#LR__0184
03604                 | LR__0176
03604     54 B1 02 F6 | 	mov	local06, local02
03608     03 B0 66 F0 | 	shl	local06, #3
0360c     32 BD 02 F6 | 	mov	local12, objptr
03610     36 00 00 FF 
03614     B0 BD 06 F1 | 	add	local12, ##28080
03618     5E B1 02 F1 | 	add	local06, local12
0361c     58 93 02 FB | 	rdlong	arg01, local06
03620     30 34 B0 FD | 	call	#_isnum
03624     3D FF 02 F6 | 	mov	local45, result1
03628     07 FE 66 F7 | 	signx	local45, #7
0362c     54 B1 02 F6 | 	mov	local06, local02
03630     03 B0 66 F0 | 	shl	local06, #3
03634     32 BD 02 F6 | 	mov	local12, objptr
03638     36 00 00 FF 
0363c     B0 BD 06 F1 | 	add	local12, ##28080
03640     5E B1 02 F1 | 	add	local06, local12
03644     58 93 02 FB | 	rdlong	arg01, local06
03648     F4 37 B0 FD | 	call	#_isint
0364c     3D 01 03 F6 | 	mov	local46, result1
03650     07 00 67 F7 | 	signx	local46, #7
03654     54 B1 02 F6 | 	mov	local06, local02
03658     03 B0 66 F0 | 	shl	local06, #3
0365c     32 BD 02 F6 | 	mov	local12, objptr
03660     36 00 00 FF 
03664     B0 BD 06 F1 | 	add	local12, ##28080
03668     5E B1 02 F1 | 	add	local06, local12
0366c     58 93 02 FB | 	rdlong	arg01, local06
03670     70 3A B0 FD | 	call	#_isdec
03674     07 7A 66 F7 | 	signx	result1, #7
03678     3D 03 03 F6 | 	mov	local47, result1
0367c                 | ' 
0367c                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
0367c                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
0367c     00 FE 0E F2 | 	cmp	local45, #0 wz
03680     00 00 0F 52 |  if_ne	cmp	local46, #0 wz
03684     00 02 0F 52 |  if_ne	cmp	local47, #0 wz
03688     30 00 90 AD |  if_e	jmp	#LR__0177
0368c     54 AD 02 F6 | 	mov	local04, local02
03690     56 AB 02 F6 | 	mov	local03, local04
03694     55 B9 02 F6 | 	mov	local10, local03
03698     03 B8 66 F0 | 	shl	local10, #3
0369c     32 AF 02 F6 | 	mov	local05, objptr
036a0     36 00 00 FF 
036a4     B0 AF 06 F1 | 	add	local05, ##28080
036a8     57 B9 02 F1 | 	add	local10, local05
036ac     04 B8 06 F1 | 	add	local10, #4
036b0     01 00 80 FF 
036b4     5C 01 68 FC | 	wrlong	##512, local10
036b8     B4 01 90 FD | 	jmp	#LR__0184
036bc                 | LR__0177
036bc                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
036bc     00 FE 0E F2 | 	cmp	local45, #0 wz
036c0     00 00 0F 52 |  if_ne	cmp	local46, #0 wz
036c4     81 AD 22 56 |  if_ne	not	local04, local47
036c8     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
036cc     30 00 90 AD |  if_e	jmp	#LR__0178
036d0     54 AD 02 F6 | 	mov	local04, local02
036d4     56 AB 02 F6 | 	mov	local03, local04
036d8     55 B9 02 F6 | 	mov	local10, local03
036dc     03 B8 66 F0 | 	shl	local10, #3
036e0     32 AF 02 F6 | 	mov	local05, objptr
036e4     36 00 00 FF 
036e8     B0 AF 06 F1 | 	add	local05, ##28080
036ec     57 B9 02 F1 | 	add	local10, local05
036f0     04 B8 06 F1 | 	add	local10, #4
036f4     01 00 80 FF 
036f8     5C 03 68 FC | 	wrlong	##513, local10
036fc     70 01 90 FD | 	jmp	#LR__0184
03700                 | LR__0178
03700                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03700     00 FE 0E F2 | 	cmp	local45, #0 wz
03704     80 AD 22 56 |  if_ne	not	local04, local46
03708     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
0370c     81 AB 22 56 |  if_ne	not	local03, local47
03710     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
03714     30 00 90 AD |  if_e	jmp	#LR__0179
03718     54 AD 02 F6 | 	mov	local04, local02
0371c     56 AB 02 F6 | 	mov	local03, local04
03720     55 B9 02 F6 | 	mov	local10, local03
03724     03 B8 66 F0 | 	shl	local10, #3
03728     32 AF 02 F6 | 	mov	local05, objptr
0372c     36 00 00 FF 
03730     B0 AF 06 F1 | 	add	local05, ##28080
03734     57 B9 02 F1 | 	add	local10, local05
03738     04 B8 06 F1 | 	add	local10, #4
0373c     01 00 80 FF 
03740     5C 05 68 FC | 	wrlong	##514, local10
03744     28 01 90 FD | 	jmp	#LR__0184
03748                 | LR__0179
03748                 | ' 
03748                 | ' if isstring(lparts(i).part$) then 
03748     54 AF 02 F6 | 	mov	local05, local02
0374c     03 AE 66 F0 | 	shl	local05, #3
03750     32 B1 02 F6 | 	mov	local06, objptr
03754     36 00 00 FF 
03758     B0 B1 06 F1 | 	add	local06, ##28080
0375c     58 AF 02 F1 | 	add	local05, local06
03760     57 93 02 FB | 	rdlong	arg01, local05
03764     3C 3A B0 FD | 	call	#_isstring
03768     00 7A 0E F2 | 	cmp	result1, #0 wz
0376c     A8 00 90 AD |  if_e	jmp	#LR__0182
03770     54 B9 02 F6 | 	mov	local10, local02
03774     03 B8 66 F0 | 	shl	local10, #3
03778     36 00 00 FF 
0377c     B0 65 06 F1 | 	add	objptr, ##28080
03780     32 B9 02 F1 | 	add	local10, objptr
03784     04 B8 06 F1 | 	add	local10, #4
03788     01 00 80 FF 
0378c     5C 07 68 FC | 	wrlong	##515, local10
03790     54 AD 02 F6 | 	mov	local04, local02
03794     56 AB 02 F6 | 	mov	local03, local04
03798     55 B9 02 F6 | 	mov	local10, local03
0379c     03 B8 66 F0 | 	shl	local10, #3
037a0     32 B9 02 F1 | 	add	local10, objptr
037a4     54 C1 02 F6 | 	mov	local14, local02
037a8     03 C0 66 F0 | 	shl	local14, #3
037ac     32 C1 02 F1 | 	add	local14, objptr
037b0     60 B1 02 FB | 	rdlong	local06, local14
037b4     02 BC 06 F6 | 	mov	local12, #2
037b8     54 D1 02 F6 | 	mov	local22, local02
037bc     68 D3 02 F6 | 	mov	local23, local22
037c0     03 D2 66 F0 | 	shl	local23, #3
037c4     32 D5 02 F6 | 	mov	local24, objptr
037c8     32 D3 02 F1 | 	add	local23, objptr
037cc     69 93 02 FB | 	rdlong	arg01, local23
037d0     36 00 00 FF 
037d4     B0 65 86 F1 | 	sub	objptr, ##28080
037d8     49 B3 02 F6 | 	mov	local07, arg01
037dc     D7 06 48 FB | 	callpa	#(@LR__0181-@LR__0180)>>2,fcache_load_ptr_
037e0                 | LR__0180
037e0     59 7B CA FA | 	rdbyte	result1, local07 wz
037e4     01 B2 06 51 |  if_ne	add	local07, #1
037e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0180
037ec                 | LR__0181
037ec     49 B3 82 F1 | 	sub	local07, arg01
037f0     59 BF 02 F6 | 	mov	local13, local07
037f4     5F C1 02 F6 | 	mov	local14, local13
037f8     02 C0 86 F1 | 	sub	local14, #2
037fc     60 BB 02 F6 | 	mov	local11, local14
03800     58 93 02 F6 | 	mov	arg01, local06
03804     5E 95 02 F6 | 	mov	arg02, local12
03808     5D 97 02 F6 | 	mov	arg03, local11
0380c     54 2D B2 FD | 	call	#__system__Mid_S
03810     5C 7B 62 FC | 	wrlong	result1, local10
03814     58 00 90 FD | 	jmp	#LR__0184
03818                 | LR__0182
03818                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03818     54 AB 02 F6 | 	mov	local03, local02
0381c     55 AF 02 F6 | 	mov	local05, local03
03820     03 AE 66 F0 | 	shl	local05, #3
03824     32 B1 02 F6 | 	mov	local06, objptr
03828     36 00 00 FF 
0382c     B0 B1 06 F1 | 	add	local06, ##28080
03830     58 AF 02 F1 | 	add	local05, local06
03834     57 93 02 FB | 	rdlong	arg01, local05
03838     A4 2F B0 FD | 	call	#_isname
0383c     3D AD 0A F6 | 	mov	local04, result1 wz
03840     2C 00 90 AD |  if_e	jmp	#LR__0183
03844     54 AD 02 F6 | 	mov	local04, local02
03848     56 AB 02 F6 | 	mov	local03, local04
0384c     55 B9 02 F6 | 	mov	local10, local03
03850     03 B8 66 F0 | 	shl	local10, #3
03854     32 AF 02 F6 | 	mov	local05, objptr
03858     36 00 00 FF 
0385c     B0 AF 06 F1 | 	add	local05, ##28080
03860     57 B9 02 F1 | 	add	local10, local05
03864     04 B8 06 F1 | 	add	local10, #4
03868     01 00 80 FF 
0386c     5C 09 68 FC | 	wrlong	##516, local10
03870                 | LR__0183
03870                 | LR__0184
03870     01 A8 06 F1 | 	add	local02, #1
03874     A0 F8 9F FD | 	jmp	#LR__0173
03878                 | LR__0185
03878     63 B9 02 F6 | 	mov	local10, local17
0387c     03 B8 66 F0 | 	shl	local10, #3
03880     36 00 00 FF 
03884     B0 65 06 F1 | 	add	objptr, ##28080
03888     32 B9 02 F1 | 	add	local10, objptr
0388c     04 B8 06 F1 | 	add	local10, #4
03890     5C FD 6B FC | 	wrlong	#510, local10
03894     63 B9 02 F6 | 	mov	local10, local17
03898     03 B8 66 F0 | 	shl	local10, #3
0389c     32 B9 02 F1 | 	add	local10, objptr
038a0     93 01 00 FF 
038a4     B7 B1 06 F6 | 	mov	local06, ##@LR__5549
038a8     5C B1 62 FC | 	wrlong	local06, local10
038ac     10 00 00 FF 
038b0     54 64 06 F1 | 	add	objptr, ##8276
038b4     32 C7 62 FC | 	wrlong	local17, objptr
038b8     47 00 00 FF 
038bc     04 64 86 F1 | 	sub	objptr, ##36356
038c0                 | ' 
038c0                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
038c0                 | ' 
038c0                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
038c0                 | '  
038c0                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
038c0     93 01 00 FF 
038c4     B8 95 06 F6 | 	mov	arg02, ##@LR__5550
038c8     7B 93 02 F6 | 	mov	arg01, local41
038cc     FC 12 B2 FD | 	call	#__system___string_cmp
038d0     00 7A 0E F2 | 	cmp	result1, #0 wz
038d4     F0 00 90 AD |  if_e	jmp	#LR__0186
038d8     93 01 00 FF 
038dc     BD 95 06 F6 | 	mov	arg02, ##@LR__5551
038e0     7B 93 02 F6 | 	mov	arg01, local41
038e4     E4 12 B2 FD | 	call	#__system___string_cmp
038e8     00 7A 0E F2 | 	cmp	result1, #0 wz
038ec     D8 00 90 AD |  if_e	jmp	#LR__0186
038f0     93 01 00 FF 
038f4     C2 B1 06 F6 | 	mov	local06, ##@LR__5552
038f8     7B 93 02 F6 | 	mov	arg01, local41
038fc     58 95 02 F6 | 	mov	arg02, local06
03900     C8 12 B2 FD | 	call	#__system___string_cmp
03904     00 7A 0E F2 | 	cmp	result1, #0 wz
03908     BC 00 90 AD |  if_e	jmp	#LR__0186
0390c     93 01 00 FF 
03910     C7 BD 06 F6 | 	mov	local12, ##@LR__5553
03914     5E B1 02 F6 | 	mov	local06, local12
03918     7B 93 02 F6 | 	mov	arg01, local41
0391c     58 95 02 F6 | 	mov	arg02, local06
03920     A8 12 B2 FD | 	call	#__system___string_cmp
03924     00 7A 0E F2 | 	cmp	result1, #0 wz
03928     9C 00 90 AD |  if_e	jmp	#LR__0186
0392c     93 01 00 FF 
03930     CB BB 06 F6 | 	mov	local11, ##@LR__5554
03934     5D BD 02 F6 | 	mov	local12, local11
03938     7B 93 02 F6 | 	mov	arg01, local41
0393c     5E 95 02 F6 | 	mov	arg02, local12
03940     88 12 B2 FD | 	call	#__system___string_cmp
03944     3D B1 0A F6 | 	mov	local06, result1 wz
03948     7C 00 90 AD |  if_e	jmp	#LR__0186
0394c     93 01 00 FF 
03950     CF C1 06 F6 | 	mov	local14, ##@LR__5555
03954     60 BB 02 F6 | 	mov	local11, local14
03958     7B 93 02 F6 | 	mov	arg01, local41
0395c     5D 95 02 F6 | 	mov	arg02, local11
03960     68 12 B2 FD | 	call	#__system___string_cmp
03964     3D BD 0A F6 | 	mov	local12, result1 wz
03968     5C 00 90 AD |  if_e	jmp	#LR__0186
0396c     93 01 00 FF 
03970     D2 BF 06 F6 | 	mov	local13, ##@LR__5556
03974     5F C1 02 F6 | 	mov	local14, local13
03978     7B 93 02 F6 | 	mov	arg01, local41
0397c     60 95 02 F6 | 	mov	arg02, local14
03980     48 12 B2 FD | 	call	#__system___string_cmp
03984     3D BB 0A F6 | 	mov	local11, result1 wz
03988     3C 00 90 AD |  if_e	jmp	#LR__0186
0398c     93 01 00 FF 
03990     D6 BF 06 F6 | 	mov	local13, ##@LR__5557
03994     7B 93 02 F6 | 	mov	arg01, local41
03998     5F 95 02 F6 | 	mov	arg02, local13
0399c     2C 12 B2 FD | 	call	#__system___string_cmp
039a0     3D C1 0A F6 | 	mov	local14, result1 wz
039a4     20 00 90 AD |  if_e	jmp	#LR__0186
039a8     93 01 00 FF 
039ac     DC D1 06 F6 | 	mov	local22, ##@LR__5558
039b0     68 DD 02 F6 | 	mov	local28, local22
039b4     7B 93 02 F6 | 	mov	arg01, local41
039b8     6E 95 02 F6 | 	mov	arg02, local28
039bc     0C 12 B2 FD | 	call	#__system___string_cmp
039c0     3D BF 0A F6 | 	mov	local13, result1 wz
039c4     B8 00 90 5D |  if_ne	jmp	#LR__0187
039c8                 | LR__0186
039c8     77 DD 02 F6 | 	mov	local28, local37
039cc     01 DC 06 F1 | 	add	local28, #1
039d0     6E D1 02 F6 | 	mov	local22, local28
039d4     68 D3 02 F6 | 	mov	local23, local22
039d8     03 D2 66 F0 | 	shl	local23, #3
039dc     32 D5 02 F6 | 	mov	local24, objptr
039e0     36 00 00 FF 
039e4     B0 D5 06 F1 | 	add	local24, ##28080
039e8     6A D3 02 F1 | 	add	local23, local24
039ec     04 D2 06 F1 | 	add	local23, #4
039f0     69 E1 02 FB | 	rdlong	local30, local23
039f4     04 D2 86 F1 | 	sub	local23, #4
039f8     70 DF 02 F6 | 	mov	local29, local30
039fc     01 00 00 FF 
03a00     04 DE 0E F2 | 	cmp	local29, ##516 wz
03a04     78 00 90 5D |  if_ne	jmp	#LR__0187
03a08     77 05 03 F6 | 	mov	local48, local37
03a0c     01 04 07 F1 | 	add	local48, #1
03a10     03 04 67 F0 | 	shl	local48, #3
03a14     32 07 03 F6 | 	mov	local49, objptr
03a18     36 00 00 FF 
03a1c     B0 07 07 F1 | 	add	local49, ##28080
03a20     83 05 03 F1 | 	add	local48, local49
03a24     82 93 02 FB | 	rdlong	arg01, local48
03a28     01 94 06 F6 | 	mov	arg02, #1
03a2c     A4 2A B2 FD | 	call	#__system__Right_S
03a30     3D 93 02 F6 | 	mov	arg01, result1
03a34     93 01 00 FF 
03a38     DF 09 07 F6 | 	mov	local50, ##@LR__5559
03a3c     84 0B 03 F6 | 	mov	local51, local50
03a40     85 95 02 F6 | 	mov	arg02, local51
03a44     84 11 B2 FD | 	call	#__system___string_cmp
03a48     3D E3 0A F6 | 	mov	local31, result1 wz
03a4c     30 00 90 AD |  if_e	jmp	#LR__0187
03a50     77 B9 02 F6 | 	mov	local10, local37
03a54     01 B8 06 F1 | 	add	local10, #1
03a58     03 B8 66 F0 | 	shl	local10, #3
03a5c     32 AF 02 F6 | 	mov	local05, objptr
03a60     36 00 00 FF 
03a64     B0 AF 06 F1 | 	add	local05, ##28080
03a68     57 B9 02 F1 | 	add	local10, local05
03a6c     01 00 00 FF 
03a70     03 B0 06 F6 | 	mov	local06, ##515
03a74     04 B8 06 F1 | 	add	local10, #4
03a78     01 00 80 FF 
03a7c     5C 07 68 FC | 	wrlong	##515, local10
03a80                 | LR__0187
03a80                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03a80     93 01 00 FF 
03a84     E1 95 06 F6 | 	mov	arg02, ##@LR__5560
03a88     7B 93 02 F6 | 	mov	arg01, local41
03a8c     3C 11 B2 FD | 	call	#__system___string_cmp
03a90     00 7A 0E F2 | 	cmp	result1, #0 wz
03a94     1C 00 90 AD |  if_e	jmp	#LR__0188
03a98     93 01 00 FF 
03a9c     E8 AF 06 F6 | 	mov	local05, ##@LR__5561
03aa0     7B 93 02 F6 | 	mov	arg01, local41
03aa4     57 95 02 F6 | 	mov	arg02, local05
03aa8     20 11 B2 FD | 	call	#__system___string_cmp
03aac     00 7A 0E F2 | 	cmp	result1, #0 wz
03ab0     B4 00 90 5D |  if_ne	jmp	#LR__0189
03ab4                 | LR__0188
03ab4     77 AF 02 F6 | 	mov	local05, local37
03ab8     01 AE 06 F1 | 	add	local05, #1
03abc     57 B1 02 F6 | 	mov	local06, local05
03ac0     03 B0 66 F0 | 	shl	local06, #3
03ac4     32 BD 02 F6 | 	mov	local12, objptr
03ac8     36 00 00 FF 
03acc     B0 BD 06 F1 | 	add	local12, ##28080
03ad0     5E B1 02 F1 | 	add	local06, local12
03ad4     04 B0 06 F1 | 	add	local06, #4
03ad8     58 C1 02 FB | 	rdlong	local14, local06
03adc     04 B0 86 F1 | 	sub	local06, #4
03ae0     60 BB 02 F6 | 	mov	local11, local14
03ae4     01 00 00 FF 
03ae8     04 BA 0E F2 | 	cmp	local11, ##516 wz
03aec     78 00 90 5D |  if_ne	jmp	#LR__0189
03af0     77 D3 02 F6 | 	mov	local23, local37
03af4     01 D2 06 F1 | 	add	local23, #1
03af8     03 D2 66 F0 | 	shl	local23, #3
03afc     32 D5 02 F6 | 	mov	local24, objptr
03b00     36 00 00 FF 
03b04     B0 D5 06 F1 | 	add	local24, ##28080
03b08     6A D3 02 F1 | 	add	local23, local24
03b0c     69 93 02 FB | 	rdlong	arg01, local23
03b10     01 94 06 F6 | 	mov	arg02, #1
03b14     BC 29 B2 FD | 	call	#__system__Right_S
03b18     3D 93 02 F6 | 	mov	arg01, result1
03b1c     93 01 00 FF 
03b20     EE D1 06 F6 | 	mov	local22, ##@LR__5562
03b24     68 DD 02 F6 | 	mov	local28, local22
03b28     6E 95 02 F6 | 	mov	arg02, local28
03b2c     9C 10 B2 FD | 	call	#__system___string_cmp
03b30     3D BF 0A F6 | 	mov	local13, result1 wz
03b34     30 00 90 AD |  if_e	jmp	#LR__0189
03b38     77 B9 02 F6 | 	mov	local10, local37
03b3c     01 B8 06 F1 | 	add	local10, #1
03b40     03 B8 66 F0 | 	shl	local10, #3
03b44     32 AF 02 F6 | 	mov	local05, objptr
03b48     36 00 00 FF 
03b4c     B0 AF 06 F1 | 	add	local05, ##28080
03b50     57 B9 02 F1 | 	add	local10, local05
03b54     01 00 00 FF 
03b58     03 B0 06 F6 | 	mov	local06, ##515
03b5c     04 B8 06 F1 | 	add	local10, #4
03b60     01 00 80 FF 
03b64     5C 07 68 FC | 	wrlong	##515, local10
03b68                 | LR__0189
03b68                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03b68     93 01 00 FF 
03b6c     F0 95 06 F6 | 	mov	arg02, ##@LR__5563
03b70     7B 93 02 F6 | 	mov	arg01, local41
03b74     54 10 B2 FD | 	call	#__system___string_cmp
03b78     00 7A 0E F2 | 	cmp	result1, #0 wz
03b7c     B0 00 90 5D |  if_ne	jmp	#LR__0190
03b80     77 AF 02 F6 | 	mov	local05, local37
03b84     01 AE 06 F1 | 	add	local05, #1
03b88     03 AE 66 F0 | 	shl	local05, #3
03b8c     32 B1 02 F6 | 	mov	local06, objptr
03b90     36 00 00 FF 
03b94     B0 B1 06 F1 | 	add	local06, ##28080
03b98     58 AF 02 F1 | 	add	local05, local06
03b9c     04 AE 06 F1 | 	add	local05, #4
03ba0     57 BB 02 FB | 	rdlong	local11, local05
03ba4     04 AE 86 F1 | 	sub	local05, #4
03ba8     5D BD 02 F6 | 	mov	local12, local11
03bac     01 00 00 FF 
03bb0     04 BC 0E F2 | 	cmp	local12, ##516 wz
03bb4     78 00 90 5D |  if_ne	jmp	#LR__0190
03bb8     77 D1 02 F6 | 	mov	local22, local37
03bbc     01 D0 06 F1 | 	add	local22, #1
03bc0     03 D0 66 F0 | 	shl	local22, #3
03bc4     32 D3 02 F6 | 	mov	local23, objptr
03bc8     36 00 00 FF 
03bcc     B0 D3 06 F1 | 	add	local23, ##28080
03bd0     69 D1 02 F1 | 	add	local22, local23
03bd4     68 93 02 FB | 	rdlong	arg01, local22
03bd8     01 94 06 F6 | 	mov	arg02, #1
03bdc     F4 28 B2 FD | 	call	#__system__Right_S
03be0     3D 93 02 F6 | 	mov	arg01, result1
03be4     93 01 00 FF 
03be8     F5 DD 06 F6 | 	mov	local28, ##@LR__5564
03bec     6E BF 02 F6 | 	mov	local13, local28
03bf0     5F 95 02 F6 | 	mov	arg02, local13
03bf4     D4 0F B2 FD | 	call	#__system___string_cmp
03bf8     3D C1 0A F6 | 	mov	local14, result1 wz
03bfc     30 00 90 AD |  if_e	jmp	#LR__0190
03c00     77 B9 02 F6 | 	mov	local10, local37
03c04     01 B8 06 F1 | 	add	local10, #1
03c08     03 B8 66 F0 | 	shl	local10, #3
03c0c     32 AF 02 F6 | 	mov	local05, objptr
03c10     36 00 00 FF 
03c14     B0 AF 06 F1 | 	add	local05, ##28080
03c18     57 B9 02 F1 | 	add	local10, local05
03c1c     01 00 00 FF 
03c20     03 B0 06 F6 | 	mov	local06, ##515
03c24     04 B8 06 F1 | 	add	local10, #4
03c28     01 00 80 FF 
03c2c     5C 07 68 FC | 	wrlong	##515, local10
03c30                 | LR__0190
03c30                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03c30     93 01 00 FF 
03c34     F7 95 06 F6 | 	mov	arg02, ##@LR__5565
03c38     7B 93 02 F6 | 	mov	arg01, local41
03c3c     8C 0F B2 FD | 	call	#__system___string_cmp
03c40     00 7A 0E F2 | 	cmp	result1, #0 wz
03c44     B0 00 90 5D |  if_ne	jmp	#LR__0191
03c48     77 AF 02 F6 | 	mov	local05, local37
03c4c     03 AE 06 F1 | 	add	local05, #3
03c50     03 AE 66 F0 | 	shl	local05, #3
03c54     32 B1 02 F6 | 	mov	local06, objptr
03c58     36 00 00 FF 
03c5c     B0 B1 06 F1 | 	add	local06, ##28080
03c60     58 AF 02 F1 | 	add	local05, local06
03c64     04 AE 06 F1 | 	add	local05, #4
03c68     57 BB 02 FB | 	rdlong	local11, local05
03c6c     04 AE 86 F1 | 	sub	local05, #4
03c70     5D BD 02 F6 | 	mov	local12, local11
03c74     01 00 00 FF 
03c78     04 BC 0E F2 | 	cmp	local12, ##516 wz
03c7c     78 00 90 5D |  if_ne	jmp	#LR__0191
03c80     77 D1 02 F6 | 	mov	local22, local37
03c84     03 D0 06 F1 | 	add	local22, #3
03c88     03 D0 66 F0 | 	shl	local22, #3
03c8c     32 D3 02 F6 | 	mov	local23, objptr
03c90     36 00 00 FF 
03c94     B0 D3 06 F1 | 	add	local23, ##28080
03c98     69 D1 02 F1 | 	add	local22, local23
03c9c     68 93 02 FB | 	rdlong	arg01, local22
03ca0     01 94 06 F6 | 	mov	arg02, #1
03ca4     2C 28 B2 FD | 	call	#__system__Right_S
03ca8     3D 93 02 F6 | 	mov	arg01, result1
03cac     93 01 00 FF 
03cb0     FC DD 06 F6 | 	mov	local28, ##@LR__5566
03cb4     6E BF 02 F6 | 	mov	local13, local28
03cb8     5F 95 02 F6 | 	mov	arg02, local13
03cbc     0C 0F B2 FD | 	call	#__system___string_cmp
03cc0     3D C1 0A F6 | 	mov	local14, result1 wz
03cc4     30 00 90 AD |  if_e	jmp	#LR__0191
03cc8     77 B9 02 F6 | 	mov	local10, local37
03ccc     03 B8 06 F1 | 	add	local10, #3
03cd0     03 B8 66 F0 | 	shl	local10, #3
03cd4     32 AF 02 F6 | 	mov	local05, objptr
03cd8     36 00 00 FF 
03cdc     B0 AF 06 F1 | 	add	local05, ##28080
03ce0     57 B9 02 F1 | 	add	local10, local05
03ce4     01 00 00 FF 
03ce8     03 B0 06 F6 | 	mov	local06, ##515
03cec     04 B8 06 F1 | 	add	local10, #4
03cf0     01 00 80 FF 
03cf4     5C 07 68 FC | 	wrlong	##515, local10
03cf8                 | LR__0191
03cf8                 | ' 
03cf8                 | ' ' cd needs special treatment..
03cf8                 | ' 
03cf8                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03cf8     93 01 00 FF 
03cfc     FE 95 06 F6 | 	mov	arg02, ##@LR__5567
03d00     7B 93 02 F6 | 	mov	arg01, local41
03d04     C4 0E B2 FD | 	call	#__system___string_cmp
03d08     00 7A 0E F2 | 	cmp	result1, #0 wz
03d0c     30 00 90 5D |  if_ne	jmp	#LR__0192
03d10     77 B9 02 F6 | 	mov	local10, local37
03d14     01 B8 06 F1 | 	add	local10, #1
03d18     03 B8 66 F0 | 	shl	local10, #3
03d1c     32 AF 02 F6 | 	mov	local05, objptr
03d20     36 00 00 FF 
03d24     B0 AF 06 F1 | 	add	local05, ##28080
03d28     57 B9 02 F1 | 	add	local10, local05
03d2c     01 00 00 FF 
03d30     03 B0 06 F6 | 	mov	local06, ##515
03d34     04 B8 06 F1 | 	add	local10, #4
03d38     01 00 80 FF 
03d3c     5C 07 68 FC | 	wrlong	##515, local10
03d40                 | LR__0192
03d40                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03d40     94 01 00 FF 
03d44     01 94 06 F6 | 	mov	arg02, ##@LR__5568
03d48     7B 93 02 F6 | 	mov	arg01, local41
03d4c     7C 0E B2 FD | 	call	#__system___string_cmp
03d50     00 7A 0E F2 | 	cmp	result1, #0 wz
03d54     9C 00 90 5D |  if_ne	jmp	#LR__0193
03d58     77 B1 02 F6 | 	mov	local06, local37
03d5c     01 B0 06 F1 | 	add	local06, #1
03d60     03 B0 66 F0 | 	shl	local06, #3
03d64     32 BD 02 F6 | 	mov	local12, objptr
03d68     36 00 00 FF 
03d6c     B0 BD 06 F1 | 	add	local12, ##28080
03d70     5E B1 02 F1 | 	add	local06, local12
03d74     58 93 02 FB | 	rdlong	arg01, local06
03d78     94 01 00 FF 
03d7c     05 AE 06 F6 | 	mov	local05, ##@LR__5569
03d80     57 95 02 F6 | 	mov	arg02, local05
03d84     44 0E B2 FD | 	call	#__system___string_cmp
03d88     00 7A 0E F2 | 	cmp	result1, #0 wz
03d8c     64 00 90 5D |  if_ne	jmp	#LR__0193
03d90     77 B9 02 F6 | 	mov	local10, local37
03d94     01 B8 06 F1 | 	add	local10, #1
03d98     03 B8 66 F0 | 	shl	local10, #3
03d9c     36 00 00 FF 
03da0     B0 65 06 F1 | 	add	objptr, ##28080
03da4     32 B9 02 F1 | 	add	local10, objptr
03da8     04 B8 06 F1 | 	add	local10, #4
03dac     01 00 80 FF 
03db0     5C 07 68 FC | 	wrlong	##515, local10
03db4     77 B9 02 F6 | 	mov	local10, local37
03db8     01 B8 06 F1 | 	add	local10, #1
03dbc     03 B8 66 F0 | 	shl	local10, #3
03dc0     32 B9 02 F1 | 	add	local10, objptr
03dc4     94 01 00 FF 
03dc8     07 B0 06 F6 | 	mov	local06, ##@LR__5570
03dcc     5C B1 62 FC | 	wrlong	local06, local10
03dd0     77 B9 02 F6 | 	mov	local10, local37
03dd4     03 B8 66 F0 | 	shl	local10, #3
03dd8     32 AF 02 F6 | 	mov	local05, objptr
03ddc     32 B9 02 F1 | 	add	local10, objptr
03de0     C3 B0 06 F6 | 	mov	local06, #195
03de4     04 B8 06 F1 | 	add	local10, #4
03de8     5C 87 69 FC | 	wrlong	#195, local10
03dec     36 00 00 FF 
03df0     B0 65 86 F1 | 	sub	objptr, ##28080
03df4                 | LR__0193
03df4                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03df4     94 01 00 FF 
03df8     0A B8 06 F6 | 	mov	local10, ##@LR__5571
03dfc     7B 93 02 F6 | 	mov	arg01, local41
03e00     5C 95 02 F6 | 	mov	arg02, local10
03e04     C4 0D B2 FD | 	call	#__system___string_cmp
03e08     00 7A 0E F2 | 	cmp	result1, #0 wz
03e0c     F4 00 90 5D |  if_ne	jmp	#LR__0196
03e10     77 B1 02 F6 | 	mov	local06, local37
03e14     01 B0 06 F1 | 	add	local06, #1
03e18     03 B0 66 F0 | 	shl	local06, #3
03e1c     32 BD 02 F6 | 	mov	local12, objptr
03e20     36 00 00 FF 
03e24     B0 BD 06 F1 | 	add	local12, ##28080
03e28     5E B1 02 F1 | 	add	local06, local12
03e2c     58 93 02 FB | 	rdlong	arg01, local06
03e30     94 01 00 FF 
03e34     0D AE 06 F6 | 	mov	local05, ##@LR__5572
03e38     57 B9 02 F6 | 	mov	local10, local05
03e3c     5C 95 02 F6 | 	mov	arg02, local10
03e40     88 0D B2 FD | 	call	#__system___string_cmp
03e44     00 7A 0E F2 | 	cmp	result1, #0 wz
03e48     B8 00 90 5D |  if_ne	jmp	#LR__0196
03e4c     77 B9 02 F6 | 	mov	local10, local37
03e50     01 B8 06 F1 | 	add	local10, #1
03e54     03 B8 66 F0 | 	shl	local10, #3
03e58     32 AF 02 F6 | 	mov	local05, objptr
03e5c     36 00 00 FF 
03e60     B0 AF 06 F1 | 	add	local05, ##28080
03e64     57 B9 02 F1 | 	add	local10, local05
03e68     01 00 00 FF 
03e6c     03 B0 06 F6 | 	mov	local06, ##515
03e70     04 B8 06 F1 | 	add	local10, #4
03e74     01 00 80 FF 
03e78     5C 07 68 FC | 	wrlong	##515, local10
03e7c     04 B8 86 F1 | 	sub	local10, #4
03e80     77 A9 02 F6 | 	mov	local02, local37
03e84     02 A8 06 F1 | 	add	local02, #2
03e88     63 0D 03 F6 | 	mov	local52, local17
03e8c     01 0C 07 F1 | 	add	local52, #1
03e90                 | LR__0194
03e90     86 A9 52 F2 | 	cmps	local02, local52 wc
03e94     6C 00 90 3D |  if_ae	jmp	#LR__0195
03e98     77 B9 02 F6 | 	mov	local10, local37
03e9c     01 B8 06 F1 | 	add	local10, #1
03ea0     03 B8 66 F0 | 	shl	local10, #3
03ea4     36 00 00 FF 
03ea8     B0 65 06 F1 | 	add	objptr, ##28080
03eac     32 AF 02 F6 | 	mov	local05, objptr
03eb0     32 B9 02 F1 | 	add	local10, objptr
03eb4     77 C1 02 F6 | 	mov	local14, local37
03eb8     01 C0 06 F1 | 	add	local14, #1
03ebc     03 C0 66 F0 | 	shl	local14, #3
03ec0     32 C1 02 F1 | 	add	local14, objptr
03ec4     60 93 02 FB | 	rdlong	arg01, local14
03ec8     54 BB 02 F6 | 	mov	local11, local02
03ecc     5D C1 02 F6 | 	mov	local14, local11
03ed0     60 BF 02 F6 | 	mov	local13, local14
03ed4     03 BE 66 F0 | 	shl	local13, #3
03ed8     32 DD 02 F6 | 	mov	local28, objptr
03edc     32 BF 02 F1 | 	add	local13, objptr
03ee0     5F BD 02 FB | 	rdlong	local12, local13
03ee4     5E 95 02 F6 | 	mov	arg02, local12
03ee8     36 00 00 FF 
03eec     B0 65 86 F1 | 	sub	objptr, ##28080
03ef0     0C 0D B2 FD | 	call	#__system___string_concat
03ef4     3D B1 02 F6 | 	mov	local06, result1
03ef8     5C B1 62 FC | 	wrlong	local06, local10
03efc     01 A8 06 F1 | 	add	local02, #1
03f00     8C FF 9F FD | 	jmp	#LR__0194
03f04                 | LR__0195
03f04                 | LR__0196
03f04                 | ' 
03f04                 | ' ' determine a type of the line and compile it
03f04                 | ' 
03f04                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03f04     36 00 00 FF 
03f08     B0 65 06 F1 | 	add	objptr, ##28080
03f0c     32 93 02 FB | 	rdlong	arg01, objptr
03f10     36 00 00 FF 
03f14     B0 65 86 F1 | 	sub	objptr, ##28080
03f18     C8 31 B0 FD | 	call	#_isdec
03f1c     00 7A 0E F2 | 	cmp	result1, #0 wz
03f20     30 00 90 AD |  if_e	jmp	#LR__0197
03f24     36 00 00 FF 
03f28     B0 65 06 F1 | 	add	objptr, ##28080
03f2c     32 93 02 FB | 	rdlong	arg01, objptr
03f30     36 00 00 FF 
03f34     B0 65 86 F1 | 	sub	objptr, ##28080
03f38     00 94 06 F6 | 	mov	arg02, #0
03f3c     B8 39 B2 FD | 	call	#__system____builtin_atoi
03f40     54 00 00 FF 
03f44     8C 64 06 F1 | 	add	objptr, ##43148
03f48     32 7B 62 FC | 	wrlong	result1, objptr
03f4c     54 00 00 FF 
03f50     8C 64 86 F1 | 	sub	objptr, ##43148
03f54                 | LR__0197
03f54                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03f54     54 00 00 FF 
03f58     8C 64 06 F1 | 	add	objptr, ##43148
03f5c     32 AD 02 FB | 	rdlong	local04, objptr
03f60     54 00 00 FF 
03f64     8C 64 86 F1 | 	sub	objptr, ##43148
03f68     01 AC 16 F2 | 	cmp	local04, #1 wc
03f6c     40 00 90 CD |  if_b	jmp	#LR__0198
03f70     01 C6 0E F2 | 	cmp	local17, #1 wz
03f74     38 00 00 AF 
03f78     C8 65 06 A1 |  if_e	add	objptr, ##29128
03f7c     32 AF 02 AB |  if_e	rdlong	local05, objptr
03f80     38 00 00 AF 
03f84     C8 65 86 A1 |  if_e	sub	objptr, ##29128
03f88     57 B9 02 A6 |  if_e	mov	local10, local05
03f8c     03 B8 0E A2 |  if_e	cmp	local10, #3 wz
03f90     1C 00 90 5D |  if_ne	jmp	#LR__0198
03f94     54 00 00 FF 
03f98     8C 64 06 F1 | 	add	objptr, ##43148
03f9c     32 93 02 FB | 	rdlong	arg01, objptr
03fa0     54 00 00 FF 
03fa4     8C 64 86 F1 | 	sub	objptr, ##43148
03fa8     E0 32 B0 FD | 	call	#_deleteline
03fac     C8 03 90 FD | 	jmp	#LR__0209
03fb0                 | LR__0198
03fb0                 | ' 
03fb0                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03fb0     38 00 00 FF 
03fb4     C8 65 06 F1 | 	add	objptr, ##29128
03fb8     32 AD 0A FB | 	rdlong	local04, objptr wz
03fbc     38 00 00 FF 
03fc0     C8 65 86 F1 | 	sub	objptr, ##29128
03fc4     20 00 90 AD |  if_e	jmp	#LR__0199
03fc8     38 00 00 FF 
03fcc     C8 65 06 F1 | 	add	objptr, ##29128
03fd0     32 AF 02 FB | 	rdlong	local05, objptr
03fd4     38 00 00 FF 
03fd8     C8 65 86 F1 | 	sub	objptr, ##29128
03fdc     57 B9 02 F6 | 	mov	local10, local05
03fe0     03 B8 0E F2 | 	cmp	local10, #3 wz
03fe4     C0 00 90 5D |  if_ne	jmp	#LR__0201
03fe8                 | LR__0199
03fe8     36 00 00 FF 
03fec     C4 65 06 F1 | 	add	objptr, ##28100
03ff0     32 BD 02 FB | 	rdlong	local12, objptr
03ff4     36 00 00 FF 
03ff8     C4 65 86 F1 | 	sub	objptr, ##28100
03ffc     1B BC 0E F2 | 	cmp	local12, #27 wz
04000     A4 00 90 AD |  if_e	jmp	#LR__0201
04004     54 00 00 FF 
04008     8C 64 06 F1 | 	add	objptr, ##43148
0400c     32 93 02 FB | 	rdlong	arg01, objptr
04010     1B 00 00 FF 
04014     C4 64 86 F1 | 	sub	objptr, ##14020
04018     32 97 02 FB | 	rdlong	arg03, objptr
0401c     38 00 00 FF 
04020     C8 65 86 F1 | 	sub	objptr, ##29128
04024     00 94 06 F6 | 	mov	arg02, #0
04028     38 46 B0 FD | 	call	#_compile
0402c     3D A7 0A F6 | 	mov	local01, result1 wz
04030                 | '   err=compile(linenum,0,cont) 
04030                 | '   if err<>0 then printerror(err,linenum): goto 101
04030     20 00 90 AD |  if_e	jmp	#LR__0200
04034     54 00 00 FF 
04038     8C 64 06 F1 | 	add	objptr, ##43148
0403c     32 95 02 FB | 	rdlong	arg02, objptr
04040     54 00 00 FF 
04044     8C 64 86 F1 | 	sub	objptr, ##43148
04048     53 93 02 F6 | 	mov	arg01, local01
0404c     30 CE B1 FD | 	call	#_printerror
04050     44 03 90 FD | 	jmp	#LR__0210
04054                 | LR__0200
04054                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
04054     54 00 00 FF 
04058     D0 64 06 F1 | 	add	objptr, ##43216
0405c     32 93 02 FB | 	rdlong	arg01, objptr
04060     54 00 00 FF 
04064     D0 64 86 F1 | 	sub	objptr, ##43216
04068     94 01 00 FF 
0406c     0F 94 06 F6 | 	mov	arg02, ##@LR__5573
04070     58 0B B2 FD | 	call	#__system___string_cmp
04074     00 7A 0E F2 | 	cmp	result1, #0 wz
04078     FC 02 90 AD |  if_e	jmp	#LR__0209
0407c     54 00 00 FF 
04080     D0 64 06 F1 | 	add	objptr, ##43216
04084     32 AD 02 FB | 	rdlong	local04, objptr
04088     1B 00 00 FF 
0408c     10 65 86 F1 | 	sub	objptr, ##14096
04090     32 AD 62 FC | 	wrlong	local04, objptr
04094     08 64 06 F1 | 	add	objptr, #8
04098     32 09 68 FC | 	wrlong	#4, objptr
0409c     38 00 00 FF 
040a0     C8 65 86 F1 | 	sub	objptr, ##29128
040a4     0C D9 9F FD | 	jmp	#LR__0070
040a8                 | LR__0201
040a8                 | '       							
040a8                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
040a8     38 00 00 FF 
040ac     C8 65 06 F1 | 	add	objptr, ##29128
040b0     32 AD 02 FB | 	rdlong	local04, objptr
040b4     38 00 00 FF 
040b8     C8 65 86 F1 | 	sub	objptr, ##29128
040bc     01 AC 0E F2 | 	cmp	local04, #1 wz
040c0     38 00 00 5F 
040c4     C8 65 06 51 |  if_ne	add	objptr, ##29128
040c8     32 B9 02 5B |  if_ne	rdlong	local10, objptr
040cc     38 00 00 5F 
040d0     C8 65 86 51 |  if_ne	sub	objptr, ##29128
040d4     02 B8 0E 52 |  if_ne	cmp	local10, #2 wz
040d8     C0 00 90 5D |  if_ne	jmp	#LR__0203
040dc     36 00 00 FF 
040e0     BC 65 06 F1 | 	add	objptr, ##28092
040e4     32 BD 02 FB | 	rdlong	local12, objptr
040e8     36 00 00 FF 
040ec     BC 65 86 F1 | 	sub	objptr, ##28092
040f0     1B BC 0E F2 | 	cmp	local12, #27 wz
040f4     A4 00 90 AD |  if_e	jmp	#LR__0203
040f8     54 00 00 FF 
040fc     8C 64 06 F1 | 	add	objptr, ##43148
04100     32 93 02 FB | 	rdlong	arg01, objptr
04104     1B 00 00 FF 
04108     C4 64 86 F1 | 	sub	objptr, ##14020
0410c     32 97 02 FB | 	rdlong	arg03, objptr
04110     38 00 00 FF 
04114     C8 65 86 F1 | 	sub	objptr, ##29128
04118     00 94 06 F6 | 	mov	arg02, #0
0411c     44 45 B0 FD | 	call	#_compile
04120     3D A7 0A F6 | 	mov	local01, result1 wz
04124                 | '   err=compile(linenum,0,cont) 
04124                 | '   if err<>0 then printerror(err,linenum): goto 101
04124     20 00 90 AD |  if_e	jmp	#LR__0202
04128     54 00 00 FF 
0412c     8C 64 06 F1 | 	add	objptr, ##43148
04130     32 95 02 FB | 	rdlong	arg02, objptr
04134     54 00 00 FF 
04138     8C 64 86 F1 | 	sub	objptr, ##43148
0413c     53 93 02 F6 | 	mov	arg01, local01
04140     3C CD B1 FD | 	call	#_printerror
04144     50 02 90 FD | 	jmp	#LR__0210
04148                 | LR__0202
04148                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
04148     54 00 00 FF 
0414c     D0 64 06 F1 | 	add	objptr, ##43216
04150     32 93 02 FB | 	rdlong	arg01, objptr
04154     54 00 00 FF 
04158     D0 64 86 F1 | 	sub	objptr, ##43216
0415c     94 01 00 FF 
04160     10 94 06 F6 | 	mov	arg02, ##@LR__5574
04164     64 0A B2 FD | 	call	#__system___string_cmp
04168     00 7A 0E F2 | 	cmp	result1, #0 wz
0416c     08 02 90 AD |  if_e	jmp	#LR__0209
04170     54 00 00 FF 
04174     D0 64 06 F1 | 	add	objptr, ##43216
04178     32 AD 02 FB | 	rdlong	local04, objptr
0417c     1B 00 00 FF 
04180     10 65 86 F1 | 	sub	objptr, ##14096
04184     32 AD 62 FC | 	wrlong	local04, objptr
04188     08 64 06 F1 | 	add	objptr, #8
0418c     32 09 68 FC | 	wrlong	#4, objptr
04190     38 00 00 FF 
04194     C8 65 86 F1 | 	sub	objptr, ##29128
04198     18 D8 9F FD | 	jmp	#LR__0070
0419c                 | LR__0203
0419c                 | ' 							 
0419c                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
0419c     38 00 00 FF 
041a0     C8 65 06 F1 | 	add	objptr, ##29128
041a4     32 AD 0A FB | 	rdlong	local04, objptr wz
041a8     38 00 00 FF 
041ac     C8 65 86 F1 | 	sub	objptr, ##29128
041b0     38 00 00 5F 
041b4     C8 65 06 51 |  if_ne	add	objptr, ##29128
041b8     32 B9 02 5B |  if_ne	rdlong	local10, objptr
041bc     38 00 00 5F 
041c0     C8 65 86 51 |  if_ne	sub	objptr, ##29128
041c4     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
041c8     36 00 00 AF 
041cc     C4 65 06 A1 |  if_e	add	objptr, ##28100
041d0     32 BD 02 AB |  if_e	rdlong	local12, objptr
041d4     36 00 00 AF 
041d8     C4 65 86 A1 |  if_e	sub	objptr, ##28100
041dc     1B BC 0E A2 |  if_e	cmp	local12, #27 wz
041e0     A4 00 90 5D |  if_ne	jmp	#LR__0205
041e4     54 00 00 FF 
041e8     8C 64 06 F1 | 	add	objptr, ##43148
041ec     32 93 02 FB | 	rdlong	arg01, objptr
041f0     1B 00 00 FF 
041f4     C4 64 86 F1 | 	sub	objptr, ##14020
041f8     32 97 02 FB | 	rdlong	arg03, objptr
041fc     38 00 00 FF 
04200     C8 65 86 F1 | 	sub	objptr, ##29128
04204     00 94 06 F6 | 	mov	arg02, #0
04208     20 45 B0 FD | 	call	#_compile_assign
0420c     3D A7 0A F6 | 	mov	local01, result1 wz
04210                 | '   err=compile_assign(linenum,0,cont)
04210                 | '   if err<>0 then printerror(err,linenum): goto 101
04210     20 00 90 AD |  if_e	jmp	#LR__0204
04214     54 00 00 FF 
04218     8C 64 06 F1 | 	add	objptr, ##43148
0421c     32 95 02 FB | 	rdlong	arg02, objptr
04220     54 00 00 FF 
04224     8C 64 86 F1 | 	sub	objptr, ##43148
04228     53 93 02 F6 | 	mov	arg01, local01
0422c     50 CC B1 FD | 	call	#_printerror
04230     64 01 90 FD | 	jmp	#LR__0210
04234                 | LR__0204
04234                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
04234     54 00 00 FF 
04238     D0 64 06 F1 | 	add	objptr, ##43216
0423c     32 93 02 FB | 	rdlong	arg01, objptr
04240     54 00 00 FF 
04244     D0 64 86 F1 | 	sub	objptr, ##43216
04248     94 01 00 FF 
0424c     11 94 06 F6 | 	mov	arg02, ##@LR__5575
04250     78 09 B2 FD | 	call	#__system___string_cmp
04254     00 7A 0E F2 | 	cmp	result1, #0 wz
04258     1C 01 90 AD |  if_e	jmp	#LR__0209
0425c     54 00 00 FF 
04260     D0 64 06 F1 | 	add	objptr, ##43216
04264     32 AD 02 FB | 	rdlong	local04, objptr
04268     1B 00 00 FF 
0426c     10 65 86 F1 | 	sub	objptr, ##14096
04270     32 AD 62 FC | 	wrlong	local04, objptr
04274     08 64 06 F1 | 	add	objptr, #8
04278     32 09 68 FC | 	wrlong	#4, objptr
0427c     38 00 00 FF 
04280     C8 65 86 F1 | 	sub	objptr, ##29128
04284     2C D7 9F FD | 	jmp	#LR__0070
04288                 | LR__0205
04288                 | '     							 
04288                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
04288     38 00 00 FF 
0428c     C8 65 06 F1 | 	add	objptr, ##29128
04290     32 AD 02 FB | 	rdlong	local04, objptr
04294     38 00 00 FF 
04298     C8 65 86 F1 | 	sub	objptr, ##29128
0429c     01 AC 0E F2 | 	cmp	local04, #1 wz
042a0     38 00 00 5F 
042a4     C8 65 06 51 |  if_ne	add	objptr, ##29128
042a8     32 B9 02 5B |  if_ne	rdlong	local10, objptr
042ac     38 00 00 5F 
042b0     C8 65 86 51 |  if_ne	sub	objptr, ##29128
042b4     02 B8 0E 52 |  if_ne	cmp	local10, #2 wz
042b8     36 00 00 AF 
042bc     BC 65 06 A1 |  if_e	add	objptr, ##28092
042c0     32 BD 02 AB |  if_e	rdlong	local12, objptr
042c4     36 00 00 AF 
042c8     BC 65 86 A1 |  if_e	sub	objptr, ##28092
042cc     1B BC 0E A2 |  if_e	cmp	local12, #27 wz
042d0     A4 00 90 5D |  if_ne	jmp	#LR__0208
042d4     54 00 00 FF 
042d8     8C 64 06 F1 | 	add	objptr, ##43148
042dc     32 93 02 FB | 	rdlong	arg01, objptr
042e0     1B 00 00 FF 
042e4     C4 64 86 F1 | 	sub	objptr, ##14020
042e8     32 97 02 FB | 	rdlong	arg03, objptr
042ec     38 00 00 FF 
042f0     C8 65 86 F1 | 	sub	objptr, ##29128
042f4     00 94 06 F6 | 	mov	arg02, #0
042f8     30 44 B0 FD | 	call	#_compile_assign
042fc     3D A7 0A F6 | 	mov	local01, result1 wz
04300                 | '   err=compile_assign(linenum,0,cont) 
04300                 | '   if err<>0 then printerror(err,linenum): goto 101
04300     20 00 90 AD |  if_e	jmp	#LR__0206
04304     54 00 00 FF 
04308     8C 64 06 F1 | 	add	objptr, ##43148
0430c     32 95 02 FB | 	rdlong	arg02, objptr
04310     54 00 00 FF 
04314     8C 64 86 F1 | 	sub	objptr, ##43148
04318     53 93 02 F6 | 	mov	arg01, local01
0431c     60 CB B1 FD | 	call	#_printerror
04320     74 00 90 FD | 	jmp	#LR__0210
04324                 | LR__0206
04324                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
04324     54 00 00 FF 
04328     D0 64 06 F1 | 	add	objptr, ##43216
0432c     32 93 02 FB | 	rdlong	arg01, objptr
04330     54 00 00 FF 
04334     D0 64 86 F1 | 	sub	objptr, ##43216
04338     94 01 00 FF 
0433c     12 94 06 F6 | 	mov	arg02, ##@LR__5576
04340     88 08 B2 FD | 	call	#__system___string_cmp
04344     00 7A 4E F2 | 	cmps	result1, #0 wz
04348     2C 00 90 AD |  if_e	jmp	#LR__0207
0434c     54 00 00 FF 
04350     D0 64 06 F1 | 	add	objptr, ##43216
04354     32 AD 02 FB | 	rdlong	local04, objptr
04358     1B 00 00 FF 
0435c     10 65 86 F1 | 	sub	objptr, ##14096
04360     32 AD 62 FC | 	wrlong	local04, objptr
04364     08 64 06 F1 | 	add	objptr, #8
04368     32 09 68 FC | 	wrlong	#4, objptr
0436c     38 00 00 FF 
04370     C8 65 86 F1 | 	sub	objptr, ##29128
04374     3C D6 9F FD | 	jmp	#LR__0070
04378                 | LR__0207
04378                 | LR__0208
04378                 | LR__0209
04378                 | ' 
04378                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
04378     54 00 00 FF 
0437c     8C 64 06 F1 | 	add	objptr, ##43148
04380     32 AD 0A FB | 	rdlong	local04, objptr wz
04384     54 00 00 FF 
04388     8C 64 86 F1 | 	sub	objptr, ##43148
0438c     B0 00 90 5D |  if_ne	jmp	#LR__0213
04390     02 92 06 F6 | 	mov	arg01, #2
04394     D4 91 B0 FD | 	call	#_execute_line
04398                 | LR__0210
04398                 | '   execute_line(2)
04398                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
04398     54 00 00 FF 
0439c     B0 64 06 F1 | 	add	objptr, ##43184
043a0     32 AD 0A FB | 	rdlong	local04, objptr wz
043a4     54 00 00 FF 
043a8     B0 64 86 F1 | 	sub	objptr, ##43184
043ac     20 00 90 5D |  if_ne	jmp	#LR__0211
043b0     94 01 00 FF 
043b4     13 92 06 F6 | 	mov	arg01, ##@LR__5577
043b8                 | ' 
043b8                 | ' write(text)
043b8     58 EC B1 FD | 	call	#_hg010b_spin2_write
043bc                 | ' crlf
043bc     F4 F0 B1 FD | 	call	#_hg010b_spin2_crlf
043c0     94 01 00 FF 
043c4     14 92 06 F6 | 	mov	arg01, ##@LR__5578
043c8                 | ' 
043c8                 | ' write(text)
043c8     48 EC B1 FD | 	call	#_hg010b_spin2_write
043cc                 | ' crlf
043cc     E4 F0 B1 FD | 	call	#_hg010b_spin2_crlf
043d0                 | LR__0211
043d0                 | '     if inload=1 andalso err>0 then print fullline$
043d0     54 00 00 FF 
043d4     B0 64 06 F1 | 	add	objptr, ##43184
043d8     32 AD 02 FB | 	rdlong	local04, objptr
043dc     54 00 00 FF 
043e0     B0 64 86 F1 | 	sub	objptr, ##43184
043e4     01 AC 0E F2 | 	cmp	local04, #1 wz
043e8     54 00 90 5D |  if_ne	jmp	#LR__0212
043ec     01 A6 56 F2 | 	cmps	local01, #1 wc
043f0     4C 00 90 CD |  if_b	jmp	#LR__0212
043f4     00 92 06 F6 | 	mov	arg01, #0
043f8     2C 5D B2 FD | 	call	#__system___getiolock_0622
043fc     3D 93 02 F6 | 	mov	arg01, result1
04400     A0 07 B2 FD | 	call	#__system___lockmem
04404     38 00 00 FF 
04408     C4 65 06 F1 | 	add	objptr, ##29124
0440c     32 95 02 FB | 	rdlong	arg02, objptr
04410     38 00 00 FF 
04414     C4 65 86 F1 | 	sub	objptr, ##29124
04418     00 92 06 F6 | 	mov	arg01, #0
0441c     00 96 06 F6 | 	mov	arg03, #0
04420     74 14 B2 FD | 	call	#__system___basic_print_string
04424     00 92 06 F6 | 	mov	arg01, #0
04428     0A 94 06 F6 | 	mov	arg02, #10
0442c     00 96 06 F6 | 	mov	arg03, #0
04430     0C 14 B2 FD | 	call	#__system___basic_print_char
04434     00 92 06 F6 | 	mov	arg01, #0
04438     EC 5C B2 FD | 	call	#__system___getiolock_0622
0443c     3D 01 68 FC | 	wrlong	#0, result1
04440                 | LR__0212
04440                 | LR__0213
04440     E7 F0 03 F6 | 	mov	ptra, fp
04444     F2 00 A0 FD | 	call	#popregs_
04448                 | _interpret_ret
04448     2D 00 64 FD | 	ret
0444c                 | 
0444c                 | ' 
0444c                 | ' '---------------------------------------------------------------------------------------------------------------------
0444c                 | ' '
0444c                 | ' '                          END OF TOKENIZER MAIN CODE
0444c                 | ' '
0444c                 | ' '---------------------------------------------------------------------------------------------------------------------
0444c                 | ' 
0444c                 | ' '---------------------------------------------------------------------------------------------------------------------
0444c                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
0444c                 | ' '---------------------------------------------------------------------------------------------------------------------
0444c                 | ' 
0444c                 | ' ' Check if the part is an operator, return a token or 0 if not found
0444c                 | ' 
0444c                 | ' function isoperator(s as string) as ubyte
0444c                 | _isoperator
0444c     01 CA 05 F6 | 	mov	COUNT_, #1
04450     E8 00 A0 FD | 	call	#pushregs_
04454                 | ' 
04454                 | ' select case s
04454     49 A7 02 F6 | 	mov	local01, arg01
04458     94 01 00 FF 
0445c     1A 94 06 F6 | 	mov	arg02, ##@LR__5579
04460     53 93 02 F6 | 	mov	arg01, local01
04464     64 07 B2 FD | 	call	#__system___string_cmp
04468     00 7A 0E F2 | 	cmp	result1, #0 wz
0446c     FC 01 90 AD |  if_e	jmp	#LR__0220
04470     94 01 00 FF 
04474     1C 94 06 F6 | 	mov	arg02, ##@LR__5580
04478     53 93 02 F6 | 	mov	arg01, local01
0447c     4C 07 B2 FD | 	call	#__system___string_cmp
04480     00 7A 0E F2 | 	cmp	result1, #0 wz
04484     EC 01 90 AD |  if_e	jmp	#LR__0221
04488     94 01 00 FF 
0448c     1E 94 06 F6 | 	mov	arg02, ##@LR__5581
04490     53 93 02 F6 | 	mov	arg01, local01
04494     34 07 B2 FD | 	call	#__system___string_cmp
04498     00 7A 0E F2 | 	cmp	result1, #0 wz
0449c     DC 01 90 AD |  if_e	jmp	#LR__0222
044a0     94 01 00 FF 
044a4     21 94 06 F6 | 	mov	arg02, ##@LR__5582
044a8     53 93 02 F6 | 	mov	arg01, local01
044ac     1C 07 B2 FD | 	call	#__system___string_cmp
044b0     00 7A 0E F2 | 	cmp	result1, #0 wz
044b4     CC 01 90 AD |  if_e	jmp	#LR__0223
044b8     94 01 00 FF 
044bc     25 94 06 F6 | 	mov	arg02, ##@LR__5583
044c0     53 93 02 F6 | 	mov	arg01, local01
044c4     04 07 B2 FD | 	call	#__system___string_cmp
044c8     00 7A 0E F2 | 	cmp	result1, #0 wz
044cc     BC 01 90 AD |  if_e	jmp	#LR__0224
044d0     94 01 00 FF 
044d4     27 94 06 F6 | 	mov	arg02, ##@LR__5584
044d8     53 93 02 F6 | 	mov	arg01, local01
044dc     EC 06 B2 FD | 	call	#__system___string_cmp
044e0     00 7A 0E F2 | 	cmp	result1, #0 wz
044e4     AC 01 90 AD |  if_e	jmp	#LR__0225
044e8     94 01 00 FF 
044ec     29 94 06 F6 | 	mov	arg02, ##@LR__5585
044f0     53 93 02 F6 | 	mov	arg01, local01
044f4     D4 06 B2 FD | 	call	#__system___string_cmp
044f8     00 7A 0E F2 | 	cmp	result1, #0 wz
044fc     9C 01 90 AD |  if_e	jmp	#LR__0226
04500     94 01 00 FF 
04504     2D 94 06 F6 | 	mov	arg02, ##@LR__5586
04508     53 93 02 F6 | 	mov	arg01, local01
0450c     BC 06 B2 FD | 	call	#__system___string_cmp
04510     00 7A 0E F2 | 	cmp	result1, #0 wz
04514     8C 01 90 AD |  if_e	jmp	#LR__0227
04518     94 01 00 FF 
0451c     31 94 06 F6 | 	mov	arg02, ##@LR__5587
04520     53 93 02 F6 | 	mov	arg01, local01
04524     A4 06 B2 FD | 	call	#__system___string_cmp
04528     00 7A 0E F2 | 	cmp	result1, #0 wz
0452c     7C 01 90 AD |  if_e	jmp	#LR__0228
04530     94 01 00 FF 
04534     35 94 06 F6 | 	mov	arg02, ##@LR__5588
04538     53 93 02 F6 | 	mov	arg01, local01
0453c     8C 06 B2 FD | 	call	#__system___string_cmp
04540     00 7A 0E F2 | 	cmp	result1, #0 wz
04544     6C 01 90 AD |  if_e	jmp	#LR__0229
04548     94 01 00 FF 
0454c     39 94 06 F6 | 	mov	arg02, ##@LR__5589
04550     53 93 02 F6 | 	mov	arg01, local01
04554     74 06 B2 FD | 	call	#__system___string_cmp
04558     00 7A 0E F2 | 	cmp	result1, #0 wz
0455c     5C 01 90 AD |  if_e	jmp	#LR__0230
04560     94 01 00 FF 
04564     3D 94 06 F6 | 	mov	arg02, ##@LR__5590
04568     53 93 02 F6 | 	mov	arg01, local01
0456c     5C 06 B2 FD | 	call	#__system___string_cmp
04570     00 7A 0E F2 | 	cmp	result1, #0 wz
04574     4C 01 90 AD |  if_e	jmp	#LR__0231
04578     94 01 00 FF 
0457c     3F 94 06 F6 | 	mov	arg02, ##@LR__5591
04580     53 93 02 F6 | 	mov	arg01, local01
04584     44 06 B2 FD | 	call	#__system___string_cmp
04588     00 7A 0E F2 | 	cmp	result1, #0 wz
0458c     3C 01 90 AD |  if_e	jmp	#LR__0232
04590     94 01 00 FF 
04594     43 94 06 F6 | 	mov	arg02, ##@LR__5592
04598     53 93 02 F6 | 	mov	arg01, local01
0459c     2C 06 B2 FD | 	call	#__system___string_cmp
045a0     00 7A 0E F2 | 	cmp	result1, #0 wz
045a4     2C 01 90 AD |  if_e	jmp	#LR__0233
045a8     94 01 00 FF 
045ac     45 94 06 F6 | 	mov	arg02, ##@LR__5593
045b0     53 93 02 F6 | 	mov	arg01, local01
045b4     14 06 B2 FD | 	call	#__system___string_cmp
045b8     00 7A 0E F2 | 	cmp	result1, #0 wz
045bc     1C 01 90 AD |  if_e	jmp	#LR__0234
045c0     94 01 00 FF 
045c4     47 94 06 F6 | 	mov	arg02, ##@LR__5594
045c8     53 93 02 F6 | 	mov	arg01, local01
045cc     FC 05 B2 FD | 	call	#__system___string_cmp
045d0     00 7A 0E F2 | 	cmp	result1, #0 wz
045d4     0C 01 90 AD |  if_e	jmp	#LR__0235
045d8     94 01 00 FF 
045dc     4A 94 06 F6 | 	mov	arg02, ##@LR__5595
045e0     53 93 02 F6 | 	mov	arg01, local01
045e4     E4 05 B2 FD | 	call	#__system___string_cmp
045e8     00 7A 0E F2 | 	cmp	result1, #0 wz
045ec     FC 00 90 AD |  if_e	jmp	#LR__0236
045f0     94 01 00 FF 
045f4     4D 94 06 F6 | 	mov	arg02, ##@LR__5596
045f8     53 93 02 F6 | 	mov	arg01, local01
045fc     CC 05 B2 FD | 	call	#__system___string_cmp
04600     00 7A 0E F2 | 	cmp	result1, #0 wz
04604     EC 00 90 AD |  if_e	jmp	#LR__0237
04608     94 01 00 FF 
0460c     4F 94 06 F6 | 	mov	arg02, ##@LR__5597
04610     53 93 02 F6 | 	mov	arg01, local01
04614     B4 05 B2 FD | 	call	#__system___string_cmp
04618     00 7A 0E F2 | 	cmp	result1, #0 wz
0461c     DC 00 90 AD |  if_e	jmp	#LR__0238
04620     94 01 00 FF 
04624     51 94 06 F6 | 	mov	arg02, ##@LR__5598
04628     53 93 02 F6 | 	mov	arg01, local01
0462c     9C 05 B2 FD | 	call	#__system___string_cmp
04630     00 7A 0E F2 | 	cmp	result1, #0 wz
04634     CC 00 90 AD |  if_e	jmp	#LR__0239
04638     94 01 00 FF 
0463c     54 94 06 F6 | 	mov	arg02, ##@LR__5599
04640     53 93 02 F6 | 	mov	arg01, local01
04644     84 05 B2 FD | 	call	#__system___string_cmp
04648     00 7A 0E F2 | 	cmp	result1, #0 wz
0464c     BC 00 90 AD |  if_e	jmp	#LR__0240
04650     94 01 00 FF 
04654     57 94 06 F6 | 	mov	arg02, ##@LR__5600
04658     53 93 02 F6 | 	mov	arg01, local01
0465c     6C 05 B2 FD | 	call	#__system___string_cmp
04660     00 7A 0E F2 | 	cmp	result1, #0 wz
04664     AC 00 90 AD |  if_e	jmp	#LR__0241
04668     B0 00 90 FD | 	jmp	#LR__0242
0466c                 | LR__0220
0466c     01 7A 06 F6 | 	mov	result1, #1
04670     AC 00 90 FD | 	jmp	#LR__0243
04674                 | LR__0221
04674     02 7A 06 F6 | 	mov	result1, #2
04678     A4 00 90 FD | 	jmp	#LR__0243
0467c                 | LR__0222
0467c     03 7A 06 F6 | 	mov	result1, #3
04680     9C 00 90 FD | 	jmp	#LR__0243
04684                 | LR__0223
04684     04 7A 06 F6 | 	mov	result1, #4
04688     94 00 90 FD | 	jmp	#LR__0243
0468c                 | LR__0224
0468c     05 7A 06 F6 | 	mov	result1, #5
04690     8C 00 90 FD | 	jmp	#LR__0243
04694                 | LR__0225
04694     06 7A 06 F6 | 	mov	result1, #6
04698     84 00 90 FD | 	jmp	#LR__0243
0469c                 | LR__0226
0469c     07 7A 06 F6 | 	mov	result1, #7
046a0     7C 00 90 FD | 	jmp	#LR__0243
046a4                 | LR__0227
046a4     08 7A 06 F6 | 	mov	result1, #8
046a8     74 00 90 FD | 	jmp	#LR__0243
046ac                 | LR__0228
046ac     09 7A 06 F6 | 	mov	result1, #9
046b0     6C 00 90 FD | 	jmp	#LR__0243
046b4                 | LR__0229
046b4     0A 7A 06 F6 | 	mov	result1, #10
046b8     64 00 90 FD | 	jmp	#LR__0243
046bc                 | LR__0230
046bc     0B 7A 06 F6 | 	mov	result1, #11
046c0     5C 00 90 FD | 	jmp	#LR__0243
046c4                 | LR__0231
046c4     0C 7A 06 F6 | 	mov	result1, #12
046c8     54 00 90 FD | 	jmp	#LR__0243
046cc                 | LR__0232
046cc     0D 7A 06 F6 | 	mov	result1, #13
046d0     4C 00 90 FD | 	jmp	#LR__0243
046d4                 | LR__0233
046d4     0E 7A 06 F6 | 	mov	result1, #14
046d8     44 00 90 FD | 	jmp	#LR__0243
046dc                 | LR__0234
046dc     1B 7A 06 F6 | 	mov	result1, #27
046e0     3C 00 90 FD | 	jmp	#LR__0243
046e4                 | LR__0235
046e4     27 7A 06 F6 | 	mov	result1, #39
046e8     34 00 90 FD | 	jmp	#LR__0243
046ec                 | LR__0236
046ec     26 7A 06 F6 | 	mov	result1, #38
046f0     2C 00 90 FD | 	jmp	#LR__0243
046f4                 | LR__0237
046f4     10 7A 06 F6 | 	mov	result1, #16
046f8     24 00 90 FD | 	jmp	#LR__0243
046fc                 | LR__0238
046fc     0F 7A 06 F6 | 	mov	result1, #15
04700     1C 00 90 FD | 	jmp	#LR__0243
04704                 | LR__0239
04704     2A 7A 06 F6 | 	mov	result1, #42
04708     14 00 90 FD | 	jmp	#LR__0243
0470c                 | LR__0240
0470c     28 7A 06 F6 | 	mov	result1, #40
04710     0C 00 90 FD | 	jmp	#LR__0243
04714                 | LR__0241
04714     29 7A 06 F6 | 	mov	result1, #41
04718     04 00 90 FD | 	jmp	#LR__0243
0471c                 | LR__0242
0471c     00 7A 06 F6 | 	mov	result1, #0
04720                 | LR__0243
04720     E7 F0 03 F6 | 	mov	ptra, fp
04724     F2 00 A0 FD | 	call	#popregs_
04728                 | _isoperator_ret
04728     2D 00 64 FD | 	ret
0472c                 | 
0472c                 | ' 
0472c                 | ' ' Check if the part is a channel#, return a token or 0 if not found
0472c                 | ' 
0472c                 | ' function ischannel(s as string) as ulong
0472c                 | _ischannel
0472c     02 CA 05 F6 | 	mov	COUNT_, #2
04730     E8 00 A0 FD | 	call	#pushregs_
04734                 | ' if left$(s,1)<>"#" then return 0
04734     49 A7 02 F6 | 	mov	local01, arg01
04738     01 94 06 F6 | 	mov	arg02, #1
0473c     0C 1D B2 FD | 	call	#__system__Left_S
04740     3D 93 02 F6 | 	mov	arg01, result1
04744     94 01 00 FF 
04748     5A 94 06 F6 | 	mov	arg02, ##@LR__5601
0474c     7C 04 B2 FD | 	call	#__system___string_cmp
04750     00 7A 0E F2 | 	cmp	result1, #0 wz
04754     00 7A 06 56 |  if_ne	mov	result1, #0
04758     AC 00 90 5D |  if_ne	jmp	#LR__0254
0475c                 | ' if len(s)<>2 then return 0
0475c     53 93 02 F6 | 	mov	arg01, local01
04760     49 A9 02 F6 | 	mov	local02, arg01
04764     D7 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
04768                 | LR__0250
04768     54 7B CA FA | 	rdbyte	result1, local02 wz
0476c     01 A8 06 51 |  if_ne	add	local02, #1
04770     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
04774                 | LR__0251
04774     49 A9 82 F1 | 	sub	local02, arg01
04778     54 7B 02 F6 | 	mov	result1, local02
0477c     02 7A 0E F2 | 	cmp	result1, #2 wz
04780     00 7A 06 56 |  if_ne	mov	result1, #0
04784     80 00 90 5D |  if_ne	jmp	#LR__0254
04788                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04788     53 93 02 F6 | 	mov	arg01, local01
0478c     01 94 06 F6 | 	mov	arg02, #1
04790     40 1D B2 FD | 	call	#__system__Right_S
04794     3D 93 02 F6 | 	mov	arg01, result1
04798     94 01 00 FF 
0479c     5C 94 06 F6 | 	mov	arg02, ##@LR__5602
047a0     28 04 B2 FD | 	call	#__system___string_cmp
047a4     00 7A 56 F2 | 	cmps	result1, #0 wc
047a8     24 00 90 CD |  if_b	jmp	#LR__0252
047ac     53 93 02 F6 | 	mov	arg01, local01
047b0     01 94 06 F6 | 	mov	arg02, #1
047b4     1C 1D B2 FD | 	call	#__system__Right_S
047b8     3D 93 02 F6 | 	mov	arg01, result1
047bc     94 01 00 FF 
047c0     5E 94 06 F6 | 	mov	arg02, ##@LR__5603
047c4     04 04 B2 FD | 	call	#__system___string_cmp
047c8     01 7A 56 F2 | 	cmps	result1, #1 wc
047cc     08 00 90 CD |  if_b	jmp	#LR__0253
047d0                 | LR__0252
047d0     00 7A 06 F6 | 	mov	result1, #0
047d4     30 00 90 FD | 	jmp	#LR__0254
047d8                 | LR__0253
047d8                 | ' return token_channel+val(right$(s,1))
047d8     53 93 02 F6 | 	mov	arg01, local01
047dc     01 94 06 F6 | 	mov	arg02, #1
047e0     F0 1C B2 FD | 	call	#__system__Right_S
047e4     3D 93 02 F6 | 	mov	arg01, result1
047e8     A4 32 B2 FD | 	call	#__system____builtin_atof
047ec     3D 95 02 F6 | 	mov	arg02, result1
047f0     00 18 21 FF 
047f4     00 92 06 F6 | 	mov	arg01, ##1110441984
047f8     A8 26 B2 FD | 	call	#__system___float_add
047fc     3D 93 02 F6 | 	mov	arg01, result1
04800     00 94 06 F6 | 	mov	arg02, #0
04804     34 2F B2 FD | 	call	#__system___float_tointeger
04808                 | LR__0254
04808     E7 F0 03 F6 | 	mov	ptra, fp
0480c     F2 00 A0 FD | 	call	#popregs_
04810                 | _ischannel_ret
04810     2D 00 64 FD | 	ret
04814                 | 
04814                 | ' 
04814                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
04814                 | ' ' todo: add spin2/pasm constants for pin control
04814                 | ' 
04814                 | ' function isconstant(s as string) as integer
04814                 | _isconstant
04814     01 CA 05 F6 | 	mov	COUNT_, #1
04818     E8 00 A0 FD | 	call	#pushregs_
0481c                 | ' 
0481c                 | ' select case s
0481c     49 A7 02 F6 | 	mov	local01, arg01
04820     94 01 00 FF 
04824     60 94 06 F6 | 	mov	arg02, ##@LR__5604
04828     53 93 02 F6 | 	mov	arg01, local01
0482c     9C 03 B2 FD | 	call	#__system___string_cmp
04830     00 7A 0E F2 | 	cmp	result1, #0 wz
04834     34 00 90 AD |  if_e	jmp	#LR__0260
04838     94 01 00 FF 
0483c     66 94 06 F6 | 	mov	arg02, ##@LR__5605
04840     53 93 02 F6 | 	mov	arg01, local01
04844     84 03 B2 FD | 	call	#__system___string_cmp
04848     00 7A 0E F2 | 	cmp	result1, #0 wz
0484c     24 00 90 AD |  if_e	jmp	#LR__0261
04850     94 01 00 FF 
04854     6D 94 06 F6 | 	mov	arg02, ##@LR__5606
04858     53 93 02 F6 | 	mov	arg01, local01
0485c     6C 03 B2 FD | 	call	#__system___string_cmp
04860     00 7A 0E F2 | 	cmp	result1, #0 wz
04864     14 00 90 AD |  if_e	jmp	#LR__0262
04868     18 00 90 FD | 	jmp	#LR__0263
0486c                 | LR__0260
0486c     01 7A 06 F6 | 	mov	result1, #1
04870     14 00 90 FD | 	jmp	#LR__0264
04874                 | LR__0261
04874     02 7A 06 F6 | 	mov	result1, #2
04878     0C 00 90 FD | 	jmp	#LR__0264
0487c                 | LR__0262
0487c     04 7A 06 F6 | 	mov	result1, #4
04880     04 00 90 FD | 	jmp	#LR__0264
04884                 | LR__0263
04884     00 7A 06 F6 | 	mov	result1, #0
04888                 | LR__0264
04888     E7 F0 03 F6 | 	mov	ptra, fp
0488c     F2 00 A0 FD | 	call	#popregs_
04890                 | _isconstant_ret
04890     2D 00 64 FD | 	ret
04894                 | 
04894                 | ' 
04894                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04894                 | ' 
04894                 | ' function isnotename(s as string) as ulong
04894                 | _isnotename
04894     07 CA 05 F6 | 	mov	COUNT_, #7
04898     E8 00 A0 FD | 	call	#pushregs_
0489c                 | ' if left$(s,1)<>"#" then return 0
0489c     49 A7 02 F6 | 	mov	local01, arg01
048a0     01 94 06 F6 | 	mov	arg02, #1
048a4     A4 1B B2 FD | 	call	#__system__Left_S
048a8     3D 93 02 F6 | 	mov	arg01, result1
048ac     94 01 00 FF 
048b0     75 94 06 F6 | 	mov	arg02, ##@LR__5607
048b4     14 03 B2 FD | 	call	#__system___string_cmp
048b8     00 7A 0E F2 | 	cmp	result1, #0 wz
048bc     00 7A 06 56 |  if_ne	mov	result1, #0
048c0     30 03 90 5D |  if_ne	jmp	#LR__0293
048c4                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
048c4     53 93 02 F6 | 	mov	arg01, local01
048c8     03 94 06 F6 | 	mov	arg02, #3
048cc     01 96 06 F6 | 	mov	arg03, #1
048d0     90 1C B2 FD | 	call	#__system__Mid_S
048d4     3D 93 02 F6 | 	mov	arg01, result1
048d8     94 01 00 FF 
048dc     77 94 06 F6 | 	mov	arg02, ##@LR__5608
048e0     E8 02 B2 FD | 	call	#__system___string_cmp
048e4     00 7A 0E F2 | 	cmp	result1, #0 wz
048e8     18 00 90 5D |  if_ne	jmp	#LR__0270
048ec     53 93 02 F6 | 	mov	arg01, local01
048f0     02 94 06 F6 | 	mov	arg02, #2
048f4     02 96 06 F6 | 	mov	arg03, #2
048f8     68 1C B2 FD | 	call	#__system__Mid_S
048fc     3D A9 02 F6 | 	mov	local02, result1
04900     14 00 90 FD | 	jmp	#LR__0271
04904                 | LR__0270
04904     53 93 02 F6 | 	mov	arg01, local01
04908     02 94 06 F6 | 	mov	arg02, #2
0490c     01 96 06 F6 | 	mov	arg03, #1
04910     50 1C B2 FD | 	call	#__system__Mid_S
04914     3D A9 02 F6 | 	mov	local02, result1
04918                 | LR__0271
04918                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
04918     53 93 02 F6 | 	mov	arg01, local01
0491c     49 AB 02 F6 | 	mov	local03, arg01
04920     D7 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
04924                 | LR__0272
04924     55 7B CA FA | 	rdbyte	result1, local03 wz
04928     01 AA 06 51 |  if_ne	add	local03, #1
0492c     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
04930                 | LR__0273
04930     49 AB 82 F1 | 	sub	local03, arg01
04934     55 95 02 F6 | 	mov	arg02, local03
04938     01 94 86 F1 | 	sub	arg02, #1
0493c     53 93 02 F6 | 	mov	arg01, local01
04940     01 96 06 F6 | 	mov	arg03, #1
04944     1C 1C B2 FD | 	call	#__system__Mid_S
04948     3D 93 02 F6 | 	mov	arg01, result1
0494c     94 01 00 FF 
04950     79 94 06 F6 | 	mov	arg02, ##@LR__5609
04954     74 02 B2 FD | 	call	#__system___string_cmp
04958     00 7A 0E F2 | 	cmp	result1, #0 wz
0495c     28 00 90 AD |  if_e	jmp	#LR__0274
04960     53 93 02 F6 | 	mov	arg01, local01
04964     01 94 06 F6 | 	mov	arg02, #1
04968     68 1B B2 FD | 	call	#__system__Right_S
0496c     3D 93 02 F6 | 	mov	arg01, result1
04970     1C 31 B2 FD | 	call	#__system____builtin_atof
04974     3D 93 02 F6 | 	mov	arg01, result1
04978     00 94 06 F6 | 	mov	arg02, #0
0497c     BC 2D B2 FD | 	call	#__system___float_tointeger
04980     3D AD 02 F6 | 	mov	local04, result1
04984     34 00 90 FD | 	jmp	#LR__0275
04988                 | LR__0274
04988     53 93 02 F6 | 	mov	arg01, local01
0498c     01 94 06 F6 | 	mov	arg02, #1
04990     40 1B B2 FD | 	call	#__system__Right_S
04994     3D 93 02 F6 | 	mov	arg01, result1
04998     F4 30 B2 FD | 	call	#__system____builtin_atof
0499c     3D 95 02 F6 | 	mov	arg02, result1
049a0     00 C0 5F FF 
049a4     00 92 06 F6 | 	mov	arg01, ##-1082130432
049a8     C8 28 B2 FD | 	call	#__system___float_mul
049ac     3D 93 02 F6 | 	mov	arg01, result1
049b0     00 94 06 F6 | 	mov	arg02, #0
049b4     84 2D B2 FD | 	call	#__system___float_tointeger
049b8     3D AD 02 F6 | 	mov	local04, result1
049bc                 | LR__0275
049bc                 | ' 
049bc                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
049bc     00 AC 0E F2 | 	cmp	local04, #0 wz
049c0     24 00 90 5D |  if_ne	jmp	#LR__0276
049c4     53 93 02 F6 | 	mov	arg01, local01
049c8     01 94 06 F6 | 	mov	arg02, #1
049cc     04 1B B2 FD | 	call	#__system__Right_S
049d0     3D 93 02 F6 | 	mov	arg01, result1
049d4     94 01 00 FF 
049d8     7B 94 06 F6 | 	mov	arg02, ##@LR__5610
049dc     EC 01 B2 FD | 	call	#__system___string_cmp
049e0     00 7A 0E F2 | 	cmp	result1, #0 wz
049e4     04 AC 06 56 |  if_ne	mov	local04, #4
049e8                 | LR__0276
049e8                 | ' 
049e8                 | ' select case s1
049e8     54 AF 02 F6 | 	mov	local05, local02
049ec     94 01 00 FF 
049f0     7D 94 06 F6 | 	mov	arg02, ##@LR__5611
049f4     57 93 02 F6 | 	mov	arg01, local05
049f8     D0 01 B2 FD | 	call	#__system___string_cmp
049fc     00 7A 0E F2 | 	cmp	result1, #0 wz
04a00     24 01 90 AD |  if_e	jmp	#LR__0277
04a04     94 01 00 FF 
04a08     7F 94 06 F6 | 	mov	arg02, ##@LR__5612
04a0c     57 93 02 F6 | 	mov	arg01, local05
04a10     B8 01 B2 FD | 	call	#__system___string_cmp
04a14     00 7A 0E F2 | 	cmp	result1, #0 wz
04a18     18 01 90 AD |  if_e	jmp	#LR__0278
04a1c     94 01 00 FF 
04a20     82 94 06 F6 | 	mov	arg02, ##@LR__5613
04a24     57 93 02 F6 | 	mov	arg01, local05
04a28     A0 01 B2 FD | 	call	#__system___string_cmp
04a2c     00 7A 0E F2 | 	cmp	result1, #0 wz
04a30     0C 01 90 AD |  if_e	jmp	#LR__0279
04a34     94 01 00 FF 
04a38     84 94 06 F6 | 	mov	arg02, ##@LR__5614
04a3c     57 93 02 F6 | 	mov	arg01, local05
04a40     88 01 B2 FD | 	call	#__system___string_cmp
04a44     00 7A 0E F2 | 	cmp	result1, #0 wz
04a48     00 01 90 AD |  if_e	jmp	#LR__0280
04a4c     94 01 00 FF 
04a50     87 94 06 F6 | 	mov	arg02, ##@LR__5615
04a54     57 93 02 F6 | 	mov	arg01, local05
04a58     70 01 B2 FD | 	call	#__system___string_cmp
04a5c     00 7A 0E F2 | 	cmp	result1, #0 wz
04a60     F4 00 90 AD |  if_e	jmp	#LR__0281
04a64     94 01 00 FF 
04a68     89 94 06 F6 | 	mov	arg02, ##@LR__5616
04a6c     57 93 02 F6 | 	mov	arg01, local05
04a70     58 01 B2 FD | 	call	#__system___string_cmp
04a74     00 7A 0E F2 | 	cmp	result1, #0 wz
04a78     E8 00 90 AD |  if_e	jmp	#LR__0282
04a7c     94 01 00 FF 
04a80     8B 94 06 F6 | 	mov	arg02, ##@LR__5617
04a84     57 93 02 F6 | 	mov	arg01, local05
04a88     40 01 B2 FD | 	call	#__system___string_cmp
04a8c     00 7A 0E F2 | 	cmp	result1, #0 wz
04a90     DC 00 90 AD |  if_e	jmp	#LR__0283
04a94     94 01 00 FF 
04a98     8E 94 06 F6 | 	mov	arg02, ##@LR__5618
04a9c     57 93 02 F6 | 	mov	arg01, local05
04aa0     28 01 B2 FD | 	call	#__system___string_cmp
04aa4     00 7A 0E F2 | 	cmp	result1, #0 wz
04aa8     D0 00 90 AD |  if_e	jmp	#LR__0284
04aac     94 01 00 FF 
04ab0     90 94 06 F6 | 	mov	arg02, ##@LR__5619
04ab4     57 93 02 F6 | 	mov	arg01, local05
04ab8     10 01 B2 FD | 	call	#__system___string_cmp
04abc     00 7A 0E F2 | 	cmp	result1, #0 wz
04ac0     C4 00 90 AD |  if_e	jmp	#LR__0285
04ac4     94 01 00 FF 
04ac8     93 94 06 F6 | 	mov	arg02, ##@LR__5620
04acc     57 93 02 F6 | 	mov	arg01, local05
04ad0     F8 00 B2 FD | 	call	#__system___string_cmp
04ad4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ad8     B8 00 90 AD |  if_e	jmp	#LR__0286
04adc     94 01 00 FF 
04ae0     95 94 06 F6 | 	mov	arg02, ##@LR__5621
04ae4     57 93 02 F6 | 	mov	arg01, local05
04ae8     E0 00 B2 FD | 	call	#__system___string_cmp
04aec     00 7A 0E F2 | 	cmp	result1, #0 wz
04af0     AC 00 90 AD |  if_e	jmp	#LR__0287
04af4     94 01 00 FF 
04af8     98 94 06 F6 | 	mov	arg02, ##@LR__5622
04afc     57 93 02 F6 | 	mov	arg01, local05
04b00     C8 00 B2 FD | 	call	#__system___string_cmp
04b04     00 7A 0E F2 | 	cmp	result1, #0 wz
04b08     A0 00 90 AD |  if_e	jmp	#LR__0288
04b0c     94 01 00 FF 
04b10     9A 94 06 F6 | 	mov	arg02, ##@LR__5623
04b14     57 93 02 F6 | 	mov	arg01, local05
04b18     B0 00 B2 FD | 	call	#__system___string_cmp
04b1c     00 7A 0E F2 | 	cmp	result1, #0 wz
04b20     94 00 90 AD |  if_e	jmp	#LR__0289
04b24     9C 00 90 FD | 	jmp	#LR__0290
04b28                 | LR__0277
04b28     01 00 00 FF 
04b2c     00 B1 06 F6 | 	mov	local06, ##768
04b30     98 00 90 FD | 	jmp	#LR__0291
04b34                 | LR__0278
04b34     01 00 00 FF 
04b38     01 B1 06 F6 | 	mov	local06, ##769
04b3c     8C 00 90 FD | 	jmp	#LR__0291
04b40                 | LR__0279
04b40     01 00 00 FF 
04b44     02 B1 06 F6 | 	mov	local06, ##770
04b48     80 00 90 FD | 	jmp	#LR__0291
04b4c                 | LR__0280
04b4c     01 00 00 FF 
04b50     03 B1 06 F6 | 	mov	local06, ##771
04b54     74 00 90 FD | 	jmp	#LR__0291
04b58                 | LR__0281
04b58     01 00 00 FF 
04b5c     04 B1 06 F6 | 	mov	local06, ##772
04b60     68 00 90 FD | 	jmp	#LR__0291
04b64                 | LR__0282
04b64     01 00 00 FF 
04b68     05 B1 06 F6 | 	mov	local06, ##773
04b6c     5C 00 90 FD | 	jmp	#LR__0291
04b70                 | LR__0283
04b70     01 00 00 FF 
04b74     06 B1 06 F6 | 	mov	local06, ##774
04b78     50 00 90 FD | 	jmp	#LR__0291
04b7c                 | LR__0284
04b7c     01 00 00 FF 
04b80     07 B1 06 F6 | 	mov	local06, ##775
04b84     44 00 90 FD | 	jmp	#LR__0291
04b88                 | LR__0285
04b88     01 00 00 FF 
04b8c     08 B1 06 F6 | 	mov	local06, ##776
04b90     38 00 90 FD | 	jmp	#LR__0291
04b94                 | LR__0286
04b94     01 00 00 FF 
04b98     09 B1 06 F6 | 	mov	local06, ##777
04b9c     2C 00 90 FD | 	jmp	#LR__0291
04ba0                 | LR__0287
04ba0     01 00 00 FF 
04ba4     0A B1 06 F6 | 	mov	local06, ##778
04ba8     20 00 90 FD | 	jmp	#LR__0291
04bac                 | LR__0288
04bac     01 00 00 FF 
04bb0     0B B1 06 F6 | 	mov	local06, ##779
04bb4     14 00 90 FD | 	jmp	#LR__0291
04bb8                 | LR__0289
04bb8     01 00 00 FF 
04bbc     0B B1 06 F6 | 	mov	local06, ##779
04bc0     08 00 90 FD | 	jmp	#LR__0291
04bc4                 | LR__0290
04bc4     00 7A 06 F6 | 	mov	result1, #0
04bc8     28 00 90 FD | 	jmp	#LR__0293
04bcc                 | LR__0291
04bcc                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04bcc     FF FF 7F FF 
04bd0     FF AD 56 F2 | 	cmps	local04, ##-1 wc
04bd4     18 00 90 CD |  if_b	jmp	#LR__0292
04bd8     0A AC 56 F2 | 	cmps	local04, #10 wc
04bdc     56 B3 02 C6 |  if_b	mov	local07, local04
04be0     01 B2 66 C0 |  if_b	shl	local07, #1
04be4     56 B3 02 C1 |  if_b	add	local07, local04
04be8     02 B2 66 C0 |  if_b	shl	local07, #2
04bec     59 B1 02 C1 |  if_b	add	local06, local07
04bf0                 | LR__0292
04bf0                 | ' return token
04bf0     58 7B 02 F6 | 	mov	result1, local06
04bf4                 | LR__0293
04bf4     E7 F0 03 F6 | 	mov	ptra, fp
04bf8     F2 00 A0 FD | 	call	#popregs_
04bfc                 | _isnotename_ret
04bfc     2D 00 64 FD | 	ret
04c00                 | 
04c00                 | ' 
04c00                 | ' ' Check if the part is a separator, return a token or 0 if not found
04c00                 | ' 
04c00                 | ' function isseparator(s as string) as ubyte
04c00                 | _isseparator
04c00     01 CA 05 F6 | 	mov	COUNT_, #1
04c04     E8 00 A0 FD | 	call	#pushregs_
04c08                 | ' 
04c08                 | ' select case s
04c08     49 A7 02 F6 | 	mov	local01, arg01
04c0c     94 01 00 FF 
04c10     9C 94 06 F6 | 	mov	arg02, ##@LR__5624
04c14     53 93 02 F6 | 	mov	arg01, local01
04c18     B0 FF B1 FD | 	call	#__system___string_cmp
04c1c     00 7A 0E F2 | 	cmp	result1, #0 wz
04c20     54 01 90 AD |  if_e	jmp	#LR__0300
04c24     94 01 00 FF 
04c28     9E 94 06 F6 | 	mov	arg02, ##@LR__5625
04c2c     53 93 02 F6 | 	mov	arg01, local01
04c30     98 FF B1 FD | 	call	#__system___string_cmp
04c34     00 7A 0E F2 | 	cmp	result1, #0 wz
04c38     44 01 90 AD |  if_e	jmp	#LR__0301
04c3c     94 01 00 FF 
04c40     A0 94 06 F6 | 	mov	arg02, ##@LR__5626
04c44     53 93 02 F6 | 	mov	arg01, local01
04c48     80 FF B1 FD | 	call	#__system___string_cmp
04c4c     00 7A 0E F2 | 	cmp	result1, #0 wz
04c50     34 01 90 AD |  if_e	jmp	#LR__0302
04c54     94 01 00 FF 
04c58     A2 94 06 F6 | 	mov	arg02, ##@LR__5627
04c5c     53 93 02 F6 | 	mov	arg01, local01
04c60     68 FF B1 FD | 	call	#__system___string_cmp
04c64     00 7A 0E F2 | 	cmp	result1, #0 wz
04c68     24 01 90 AD |  if_e	jmp	#LR__0303
04c6c     94 01 00 FF 
04c70     A4 94 06 F6 | 	mov	arg02, ##@LR__5628
04c74     53 93 02 F6 | 	mov	arg01, local01
04c78     50 FF B1 FD | 	call	#__system___string_cmp
04c7c     00 7A 0E F2 | 	cmp	result1, #0 wz
04c80     14 01 90 AD |  if_e	jmp	#LR__0304
04c84     94 01 00 FF 
04c88     A6 94 06 F6 | 	mov	arg02, ##@LR__5629
04c8c     53 93 02 F6 | 	mov	arg01, local01
04c90     38 FF B1 FD | 	call	#__system___string_cmp
04c94     00 7A 0E F2 | 	cmp	result1, #0 wz
04c98     04 01 90 AD |  if_e	jmp	#LR__0305
04c9c     94 01 00 FF 
04ca0     A8 94 06 F6 | 	mov	arg02, ##@LR__5630
04ca4     53 93 02 F6 | 	mov	arg01, local01
04ca8     20 FF B1 FD | 	call	#__system___string_cmp
04cac     00 7A 0E F2 | 	cmp	result1, #0 wz
04cb0     F4 00 90 AD |  if_e	jmp	#LR__0306
04cb4     94 01 00 FF 
04cb8     AA 94 06 F6 | 	mov	arg02, ##@LR__5631
04cbc     53 93 02 F6 | 	mov	arg01, local01
04cc0     08 FF B1 FD | 	call	#__system___string_cmp
04cc4     00 7A 0E F2 | 	cmp	result1, #0 wz
04cc8     E4 00 90 AD |  if_e	jmp	#LR__0307
04ccc     94 01 00 FF 
04cd0     AC 94 06 F6 | 	mov	arg02, ##@LR__5632
04cd4     53 93 02 F6 | 	mov	arg01, local01
04cd8     F0 FE B1 FD | 	call	#__system___string_cmp
04cdc     00 7A 0E F2 | 	cmp	result1, #0 wz
04ce0     D4 00 90 AD |  if_e	jmp	#LR__0308
04ce4     94 01 00 FF 
04ce8     AE 94 06 F6 | 	mov	arg02, ##@LR__5633
04cec     53 93 02 F6 | 	mov	arg01, local01
04cf0     D8 FE B1 FD | 	call	#__system___string_cmp
04cf4     00 7A 0E F2 | 	cmp	result1, #0 wz
04cf8     C4 00 90 AD |  if_e	jmp	#LR__0309
04cfc     94 01 00 FF 
04d00     B0 94 06 F6 | 	mov	arg02, ##@LR__5634
04d04     53 93 02 F6 | 	mov	arg01, local01
04d08     C0 FE B1 FD | 	call	#__system___string_cmp
04d0c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d10     B4 00 90 AD |  if_e	jmp	#LR__0310
04d14     94 01 00 FF 
04d18     B2 94 06 F6 | 	mov	arg02, ##@LR__5635
04d1c     53 93 02 F6 | 	mov	arg01, local01
04d20     A8 FE B1 FD | 	call	#__system___string_cmp
04d24     00 7A 0E F2 | 	cmp	result1, #0 wz
04d28     A4 00 90 AD |  if_e	jmp	#LR__0311
04d2c     94 01 00 FF 
04d30     B4 94 06 F6 | 	mov	arg02, ##@LR__5636
04d34     53 93 02 F6 | 	mov	arg01, local01
04d38     90 FE B1 FD | 	call	#__system___string_cmp
04d3c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d40     94 00 90 AD |  if_e	jmp	#LR__0312
04d44     94 01 00 FF 
04d48     B6 94 06 F6 | 	mov	arg02, ##@LR__5637
04d4c     53 93 02 F6 | 	mov	arg01, local01
04d50     78 FE B1 FD | 	call	#__system___string_cmp
04d54     00 7A 0E F2 | 	cmp	result1, #0 wz
04d58     84 00 90 AD |  if_e	jmp	#LR__0313
04d5c     94 01 00 FF 
04d60     B8 94 06 F6 | 	mov	arg02, ##@LR__5638
04d64     53 93 02 F6 | 	mov	arg01, local01
04d68     60 FE B1 FD | 	call	#__system___string_cmp
04d6c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d70     74 00 90 AD |  if_e	jmp	#LR__0314
04d74     78 00 90 FD | 	jmp	#LR__0315
04d78                 | LR__0300
04d78     01 7A 06 F6 | 	mov	result1, #1
04d7c     74 00 90 FD | 	jmp	#LR__0316
04d80                 | LR__0301
04d80     02 7A 06 F6 | 	mov	result1, #2
04d84     6C 00 90 FD | 	jmp	#LR__0316
04d88                 | LR__0302
04d88     1B 7A 06 F6 | 	mov	result1, #27
04d8c     64 00 90 FD | 	jmp	#LR__0316
04d90                 | LR__0303
04d90     11 7A 06 F6 | 	mov	result1, #17
04d94     5C 00 90 FD | 	jmp	#LR__0316
04d98                 | LR__0304
04d98     05 7A 06 F6 | 	mov	result1, #5
04d9c     54 00 90 FD | 	jmp	#LR__0316
04da0                 | LR__0305
04da0     06 7A 06 F6 | 	mov	result1, #6
04da4     4C 00 90 FD | 	jmp	#LR__0316
04da8                 | LR__0306
04da8     12 7A 06 F6 | 	mov	result1, #18
04dac     44 00 90 FD | 	jmp	#LR__0316
04db0                 | LR__0307
04db0     13 7A 06 F6 | 	mov	result1, #19
04db4     3C 00 90 FD | 	jmp	#LR__0316
04db8                 | LR__0308
04db8     0C 7A 06 F6 | 	mov	result1, #12
04dbc     34 00 90 FD | 	jmp	#LR__0316
04dc0                 | LR__0309
04dc0     14 7A 06 F6 | 	mov	result1, #20
04dc4     2C 00 90 FD | 	jmp	#LR__0316
04dc8                 | LR__0310
04dc8     15 7A 06 F6 | 	mov	result1, #21
04dcc     24 00 90 FD | 	jmp	#LR__0316
04dd0                 | LR__0311
04dd0     16 7A 06 F6 | 	mov	result1, #22
04dd4     1C 00 90 FD | 	jmp	#LR__0316
04dd8                 | LR__0312
04dd8     FF 7B 06 F6 | 	mov	result1, #511
04ddc     14 00 90 FD | 	jmp	#LR__0316
04de0                 | LR__0313
04de0     0F 7A 06 F6 | 	mov	result1, #15
04de4     0C 00 90 FD | 	jmp	#LR__0316
04de8                 | LR__0314
04de8     10 7A 06 F6 | 	mov	result1, #16
04dec     04 00 90 FD | 	jmp	#LR__0316
04df0                 | LR__0315
04df0     00 7A 06 F6 | 	mov	result1, #0
04df4                 | LR__0316
04df4     E7 F0 03 F6 | 	mov	ptra, fp
04df8     F2 00 A0 FD | 	call	#popregs_
04dfc                 | _isseparator_ret
04dfc     2D 00 64 FD | 	ret
04e00                 | 
04e00                 | ' 
04e00                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04e00                 | ' 
04e00                 | ' function iscommand(s as string) as ubyte
04e00                 | _iscommand
04e00     01 CA 05 F6 | 	mov	COUNT_, #1
04e04     E8 00 A0 FD | 	call	#pushregs_
04e08                 | ' 
04e08                 | ' select case s
04e08     49 A7 02 F6 | 	mov	local01, arg01
04e0c     94 01 00 FF 
04e10     BC 94 06 F6 | 	mov	arg02, ##@LR__5640
04e14     53 93 02 F6 | 	mov	arg01, local01
04e18     B0 FD B1 FD | 	call	#__system___string_cmp
04e1c     00 7A 0E F2 | 	cmp	result1, #0 wz
04e20     24 0D 90 AD |  if_e	jmp	#LR__0320
04e24     94 01 00 FF 
04e28     C1 94 06 F6 | 	mov	arg02, ##@LR__5641
04e2c     53 93 02 F6 | 	mov	arg01, local01
04e30     98 FD B1 FD | 	call	#__system___string_cmp
04e34     00 7A 0E F2 | 	cmp	result1, #0 wz
04e38     14 0D 90 AD |  if_e	jmp	#LR__0321
04e3c     94 01 00 FF 
04e40     C4 94 06 F6 | 	mov	arg02, ##@LR__5642
04e44     53 93 02 F6 | 	mov	arg01, local01
04e48     80 FD B1 FD | 	call	#__system___string_cmp
04e4c     00 7A 0E F2 | 	cmp	result1, #0 wz
04e50     04 0D 90 AD |  if_e	jmp	#LR__0322
04e54     94 01 00 FF 
04e58     C9 94 06 F6 | 	mov	arg02, ##@LR__5643
04e5c     53 93 02 F6 | 	mov	arg01, local01
04e60     68 FD B1 FD | 	call	#__system___string_cmp
04e64     00 7A 0E F2 | 	cmp	result1, #0 wz
04e68     F4 0C 90 AD |  if_e	jmp	#LR__0323
04e6c     94 01 00 FF 
04e70     CD 94 06 F6 | 	mov	arg02, ##@LR__5644
04e74     53 93 02 F6 | 	mov	arg01, local01
04e78     50 FD B1 FD | 	call	#__system___string_cmp
04e7c     00 7A 0E F2 | 	cmp	result1, #0 wz
04e80     E4 0C 90 AD |  if_e	jmp	#LR__0324
04e84     94 01 00 FF 
04e88     D2 94 06 F6 | 	mov	arg02, ##@LR__5645
04e8c     53 93 02 F6 | 	mov	arg01, local01
04e90     38 FD B1 FD | 	call	#__system___string_cmp
04e94     00 7A 0E F2 | 	cmp	result1, #0 wz
04e98     D4 0C 90 AD |  if_e	jmp	#LR__0325
04e9c     94 01 00 FF 
04ea0     D6 94 06 F6 | 	mov	arg02, ##@LR__5646
04ea4     53 93 02 F6 | 	mov	arg01, local01
04ea8     20 FD B1 FD | 	call	#__system___string_cmp
04eac     00 7A 0E F2 | 	cmp	result1, #0 wz
04eb0     C4 0C 90 AD |  if_e	jmp	#LR__0326
04eb4     94 01 00 FF 
04eb8     D9 94 06 F6 | 	mov	arg02, ##@LR__5647
04ebc     53 93 02 F6 | 	mov	arg01, local01
04ec0     08 FD B1 FD | 	call	#__system___string_cmp
04ec4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ec8     B4 0C 90 AD |  if_e	jmp	#LR__0327
04ecc     94 01 00 FF 
04ed0     E4 94 06 F6 | 	mov	arg02, ##@LR__5648
04ed4     53 93 02 F6 | 	mov	arg01, local01
04ed8     F0 FC B1 FD | 	call	#__system___string_cmp
04edc     00 7A 0E F2 | 	cmp	result1, #0 wz
04ee0     A4 0C 90 AD |  if_e	jmp	#LR__0328
04ee4     94 01 00 FF 
04ee8     E8 94 06 F6 | 	mov	arg02, ##@LR__5649
04eec     53 93 02 F6 | 	mov	arg01, local01
04ef0     D8 FC B1 FD | 	call	#__system___string_cmp
04ef4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ef8     94 0C 90 AD |  if_e	jmp	#LR__0329
04efc     94 01 00 FF 
04f00     F2 94 06 F6 | 	mov	arg02, ##@LR__5650
04f04     53 93 02 F6 | 	mov	arg01, local01
04f08     C0 FC B1 FD | 	call	#__system___string_cmp
04f0c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f10     84 0C 90 AD |  if_e	jmp	#LR__0330
04f14     94 01 00 FF 
04f18     F6 94 06 F6 | 	mov	arg02, ##@LR__5651
04f1c     53 93 02 F6 | 	mov	arg01, local01
04f20     A8 FC B1 FD | 	call	#__system___string_cmp
04f24     00 7A 0E F2 | 	cmp	result1, #0 wz
04f28     74 0C 90 AD |  if_e	jmp	#LR__0331
04f2c     94 01 00 FF 
04f30     00 95 06 F6 | 	mov	arg02, ##@LR__5652
04f34     53 93 02 F6 | 	mov	arg01, local01
04f38     90 FC B1 FD | 	call	#__system___string_cmp
04f3c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f40     64 0C 90 AD |  if_e	jmp	#LR__0332
04f44     94 01 00 FF 
04f48     04 95 06 F6 | 	mov	arg02, ##@LR__5653
04f4c     53 93 02 F6 | 	mov	arg01, local01
04f50     78 FC B1 FD | 	call	#__system___string_cmp
04f54     00 7A 0E F2 | 	cmp	result1, #0 wz
04f58     54 0C 90 AD |  if_e	jmp	#LR__0333
04f5c     94 01 00 FF 
04f60     0F 95 06 F6 | 	mov	arg02, ##@LR__5654
04f64     53 93 02 F6 | 	mov	arg01, local01
04f68     60 FC B1 FD | 	call	#__system___string_cmp
04f6c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f70     44 0C 90 AD |  if_e	jmp	#LR__0334
04f74     94 01 00 FF 
04f78     13 95 06 F6 | 	mov	arg02, ##@LR__5655
04f7c     53 93 02 F6 | 	mov	arg01, local01
04f80     48 FC B1 FD | 	call	#__system___string_cmp
04f84     00 7A 0E F2 | 	cmp	result1, #0 wz
04f88     34 0C 90 AD |  if_e	jmp	#LR__0335
04f8c     94 01 00 FF 
04f90     1A 95 06 F6 | 	mov	arg02, ##@LR__5656
04f94     53 93 02 F6 | 	mov	arg01, local01
04f98     30 FC B1 FD | 	call	#__system___string_cmp
04f9c     00 7A 0E F2 | 	cmp	result1, #0 wz
04fa0     24 0C 90 AD |  if_e	jmp	#LR__0336
04fa4     94 01 00 FF 
04fa8     1E 95 06 F6 | 	mov	arg02, ##@LR__5657
04fac     53 93 02 F6 | 	mov	arg01, local01
04fb0     18 FC B1 FD | 	call	#__system___string_cmp
04fb4     00 7A 0E F2 | 	cmp	result1, #0 wz
04fb8     14 0C 90 AD |  if_e	jmp	#LR__0337
04fbc     94 01 00 FF 
04fc0     24 95 06 F6 | 	mov	arg02, ##@LR__5658
04fc4     53 93 02 F6 | 	mov	arg01, local01
04fc8     00 FC B1 FD | 	call	#__system___string_cmp
04fcc     00 7A 0E F2 | 	cmp	result1, #0 wz
04fd0     04 0C 90 AD |  if_e	jmp	#LR__0338
04fd4     94 01 00 FF 
04fd8     2A 95 06 F6 | 	mov	arg02, ##@LR__5659
04fdc     53 93 02 F6 | 	mov	arg01, local01
04fe0     E8 FB B1 FD | 	call	#__system___string_cmp
04fe4     00 7A 0E F2 | 	cmp	result1, #0 wz
04fe8     F4 0B 90 AD |  if_e	jmp	#LR__0339
04fec     94 01 00 FF 
04ff0     2E 95 06 F6 | 	mov	arg02, ##@LR__5660
04ff4     53 93 02 F6 | 	mov	arg01, local01
04ff8     D0 FB B1 FD | 	call	#__system___string_cmp
04ffc     00 7A 0E F2 | 	cmp	result1, #0 wz
05000     E4 0B 90 AD |  if_e	jmp	#LR__0340
05004     94 01 00 FF 
05008     36 95 06 F6 | 	mov	arg02, ##@LR__5661
0500c     53 93 02 F6 | 	mov	arg01, local01
05010     B8 FB B1 FD | 	call	#__system___string_cmp
05014     00 7A 0E F2 | 	cmp	result1, #0 wz
05018     D4 0B 90 AD |  if_e	jmp	#LR__0341
0501c     94 01 00 FF 
05020     3C 95 06 F6 | 	mov	arg02, ##@LR__5662
05024     53 93 02 F6 | 	mov	arg01, local01
05028     A0 FB B1 FD | 	call	#__system___string_cmp
0502c     00 7A 0E F2 | 	cmp	result1, #0 wz
05030     C4 0B 90 AD |  if_e	jmp	#LR__0342
05034     94 01 00 FF 
05038     3F 95 06 F6 | 	mov	arg02, ##@LR__5663
0503c     53 93 02 F6 | 	mov	arg01, local01
05040     88 FB B1 FD | 	call	#__system___string_cmp
05044     00 7A 0E F2 | 	cmp	result1, #0 wz
05048     B4 0B 90 AD |  if_e	jmp	#LR__0343
0504c     94 01 00 FF 
05050     44 95 06 F6 | 	mov	arg02, ##@LR__5664
05054     53 93 02 F6 | 	mov	arg01, local01
05058     70 FB B1 FD | 	call	#__system___string_cmp
0505c     00 7A 0E F2 | 	cmp	result1, #0 wz
05060     A4 0B 90 AD |  if_e	jmp	#LR__0344
05064     94 01 00 FF 
05068     4B 95 06 F6 | 	mov	arg02, ##@LR__5665
0506c     53 93 02 F6 | 	mov	arg01, local01
05070     58 FB B1 FD | 	call	#__system___string_cmp
05074     00 7A 0E F2 | 	cmp	result1, #0 wz
05078     94 0B 90 AD |  if_e	jmp	#LR__0345
0507c     94 01 00 FF 
05080     50 95 06 F6 | 	mov	arg02, ##@LR__5666
05084     53 93 02 F6 | 	mov	arg01, local01
05088     40 FB B1 FD | 	call	#__system___string_cmp
0508c     00 7A 0E F2 | 	cmp	result1, #0 wz
05090     84 0B 90 AD |  if_e	jmp	#LR__0346
05094     94 01 00 FF 
05098     58 95 06 F6 | 	mov	arg02, ##@LR__5667
0509c     53 93 02 F6 | 	mov	arg01, local01
050a0     28 FB B1 FD | 	call	#__system___string_cmp
050a4     00 7A 0E F2 | 	cmp	result1, #0 wz
050a8     74 0B 90 AD |  if_e	jmp	#LR__0347
050ac     94 01 00 FF 
050b0     5F 95 06 F6 | 	mov	arg02, ##@LR__5668
050b4     53 93 02 F6 | 	mov	arg01, local01
050b8     10 FB B1 FD | 	call	#__system___string_cmp
050bc     00 7A 0E F2 | 	cmp	result1, #0 wz
050c0     64 0B 90 AD |  if_e	jmp	#LR__0348
050c4     94 01 00 FF 
050c8     66 95 06 F6 | 	mov	arg02, ##@LR__5669
050cc     53 93 02 F6 | 	mov	arg01, local01
050d0     F8 FA B1 FD | 	call	#__system___string_cmp
050d4     00 7A 0E F2 | 	cmp	result1, #0 wz
050d8     54 0B 90 AD |  if_e	jmp	#LR__0349
050dc     94 01 00 FF 
050e0     70 95 06 F6 | 	mov	arg02, ##@LR__5670
050e4     53 93 02 F6 | 	mov	arg01, local01
050e8     E0 FA B1 FD | 	call	#__system___string_cmp
050ec     00 7A 0E F2 | 	cmp	result1, #0 wz
050f0     44 0B 90 AD |  if_e	jmp	#LR__0350
050f4     94 01 00 FF 
050f8     74 95 06 F6 | 	mov	arg02, ##@LR__5671
050fc     53 93 02 F6 | 	mov	arg01, local01
05100     C8 FA B1 FD | 	call	#__system___string_cmp
05104     00 7A 0E F2 | 	cmp	result1, #0 wz
05108     34 0B 90 AD |  if_e	jmp	#LR__0351
0510c     94 01 00 FF 
05110     78 95 06 F6 | 	mov	arg02, ##@LR__5672
05114     53 93 02 F6 | 	mov	arg01, local01
05118     B0 FA B1 FD | 	call	#__system___string_cmp
0511c     00 7A 0E F2 | 	cmp	result1, #0 wz
05120     24 0B 90 AD |  if_e	jmp	#LR__0352
05124     94 01 00 FF 
05128     7F 95 06 F6 | 	mov	arg02, ##@LR__5673
0512c     53 93 02 F6 | 	mov	arg01, local01
05130     98 FA B1 FD | 	call	#__system___string_cmp
05134     00 7A 0E F2 | 	cmp	result1, #0 wz
05138     14 0B 90 AD |  if_e	jmp	#LR__0353
0513c     94 01 00 FF 
05140     83 95 06 F6 | 	mov	arg02, ##@LR__5674
05144     53 93 02 F6 | 	mov	arg01, local01
05148     80 FA B1 FD | 	call	#__system___string_cmp
0514c     00 7A 0E F2 | 	cmp	result1, #0 wz
05150     04 0B 90 AD |  if_e	jmp	#LR__0354
05154     94 01 00 FF 
05158     87 95 06 F6 | 	mov	arg02, ##@LR__5675
0515c     53 93 02 F6 | 	mov	arg01, local01
05160     68 FA B1 FD | 	call	#__system___string_cmp
05164     00 7A 0E F2 | 	cmp	result1, #0 wz
05168     F4 0A 90 AD |  if_e	jmp	#LR__0355
0516c     94 01 00 FF 
05170     8D 95 06 F6 | 	mov	arg02, ##@LR__5676
05174     53 93 02 F6 | 	mov	arg01, local01
05178     50 FA B1 FD | 	call	#__system___string_cmp
0517c     00 7A 0E F2 | 	cmp	result1, #0 wz
05180     E4 0A 90 AD |  if_e	jmp	#LR__0356
05184     94 01 00 FF 
05188     92 95 06 F6 | 	mov	arg02, ##@LR__5677
0518c     53 93 02 F6 | 	mov	arg01, local01
05190     38 FA B1 FD | 	call	#__system___string_cmp
05194     00 7A 0E F2 | 	cmp	result1, #0 wz
05198     D4 0A 90 AD |  if_e	jmp	#LR__0357
0519c     94 01 00 FF 
051a0     99 95 06 F6 | 	mov	arg02, ##@LR__5678
051a4     53 93 02 F6 | 	mov	arg01, local01
051a8     20 FA B1 FD | 	call	#__system___string_cmp
051ac     00 7A 0E F2 | 	cmp	result1, #0 wz
051b0     C4 0A 90 AD |  if_e	jmp	#LR__0358
051b4     94 01 00 FF 
051b8     9D 95 06 F6 | 	mov	arg02, ##@LR__5679
051bc     53 93 02 F6 | 	mov	arg01, local01
051c0     08 FA B1 FD | 	call	#__system___string_cmp
051c4     00 7A 0E F2 | 	cmp	result1, #0 wz
051c8     B4 0A 90 AD |  if_e	jmp	#LR__0359
051cc     94 01 00 FF 
051d0     A2 95 06 F6 | 	mov	arg02, ##@LR__5680
051d4     53 93 02 F6 | 	mov	arg01, local01
051d8     F0 F9 B1 FD | 	call	#__system___string_cmp
051dc     00 7A 0E F2 | 	cmp	result1, #0 wz
051e0     A4 0A 90 AD |  if_e	jmp	#LR__0360
051e4     94 01 00 FF 
051e8     A6 95 06 F6 | 	mov	arg02, ##@LR__5681
051ec     53 93 02 F6 | 	mov	arg01, local01
051f0     D8 F9 B1 FD | 	call	#__system___string_cmp
051f4     00 7A 0E F2 | 	cmp	result1, #0 wz
051f8     94 0A 90 AD |  if_e	jmp	#LR__0361
051fc     94 01 00 FF 
05200     AC 95 06 F6 | 	mov	arg02, ##@LR__5682
05204     53 93 02 F6 | 	mov	arg01, local01
05208     C0 F9 B1 FD | 	call	#__system___string_cmp
0520c     00 7A 0E F2 | 	cmp	result1, #0 wz
05210     84 0A 90 AD |  if_e	jmp	#LR__0362
05214     94 01 00 FF 
05218     AF 95 06 F6 | 	mov	arg02, ##@LR__5683
0521c     53 93 02 F6 | 	mov	arg01, local01
05220     A8 F9 B1 FD | 	call	#__system___string_cmp
05224     00 7A 0E F2 | 	cmp	result1, #0 wz
05228     74 0A 90 AD |  if_e	jmp	#LR__0363
0522c     94 01 00 FF 
05230     B7 95 06 F6 | 	mov	arg02, ##@LR__5684
05234     53 93 02 F6 | 	mov	arg01, local01
05238     90 F9 B1 FD | 	call	#__system___string_cmp
0523c     00 7A 0E F2 | 	cmp	result1, #0 wz
05240     64 0A 90 AD |  if_e	jmp	#LR__0364
05244     94 01 00 FF 
05248     BB 95 06 F6 | 	mov	arg02, ##@LR__5685
0524c     53 93 02 F6 | 	mov	arg01, local01
05250     78 F9 B1 FD | 	call	#__system___string_cmp
05254     00 7A 0E F2 | 	cmp	result1, #0 wz
05258     54 0A 90 AD |  if_e	jmp	#LR__0365
0525c     94 01 00 FF 
05260     C0 95 06 F6 | 	mov	arg02, ##@LR__5686
05264     53 93 02 F6 | 	mov	arg01, local01
05268     60 F9 B1 FD | 	call	#__system___string_cmp
0526c     00 7A 0E F2 | 	cmp	result1, #0 wz
05270     44 0A 90 AD |  if_e	jmp	#LR__0366
05274     94 01 00 FF 
05278     C4 95 06 F6 | 	mov	arg02, ##@LR__5687
0527c     53 93 02 F6 | 	mov	arg01, local01
05280     48 F9 B1 FD | 	call	#__system___string_cmp
05284     00 7A 0E F2 | 	cmp	result1, #0 wz
05288     34 0A 90 AD |  if_e	jmp	#LR__0367
0528c     94 01 00 FF 
05290     C9 95 06 F6 | 	mov	arg02, ##@LR__5688
05294     53 93 02 F6 | 	mov	arg01, local01
05298     30 F9 B1 FD | 	call	#__system___string_cmp
0529c     00 7A 0E F2 | 	cmp	result1, #0 wz
052a0     24 0A 90 AD |  if_e	jmp	#LR__0368
052a4     94 01 00 FF 
052a8     CD 95 06 F6 | 	mov	arg02, ##@LR__5689
052ac     53 93 02 F6 | 	mov	arg01, local01
052b0     18 F9 B1 FD | 	call	#__system___string_cmp
052b4     00 7A 0E F2 | 	cmp	result1, #0 wz
052b8     14 0A 90 AD |  if_e	jmp	#LR__0369
052bc     94 01 00 FF 
052c0     D0 95 06 F6 | 	mov	arg02, ##@LR__5690
052c4     53 93 02 F6 | 	mov	arg01, local01
052c8     00 F9 B1 FD | 	call	#__system___string_cmp
052cc     00 7A 0E F2 | 	cmp	result1, #0 wz
052d0     04 0A 90 AD |  if_e	jmp	#LR__0370
052d4     94 01 00 FF 
052d8     D6 95 06 F6 | 	mov	arg02, ##@LR__5691
052dc     53 93 02 F6 | 	mov	arg01, local01
052e0     E8 F8 B1 FD | 	call	#__system___string_cmp
052e4     00 7A 0E F2 | 	cmp	result1, #0 wz
052e8     F4 09 90 AD |  if_e	jmp	#LR__0371
052ec     94 01 00 FF 
052f0     DA 95 06 F6 | 	mov	arg02, ##@LR__5692
052f4     53 93 02 F6 | 	mov	arg01, local01
052f8     D0 F8 B1 FD | 	call	#__system___string_cmp
052fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05300     E4 09 90 AD |  if_e	jmp	#LR__0372
05304     94 01 00 FF 
05308     DE 95 06 F6 | 	mov	arg02, ##@LR__5693
0530c     53 93 02 F6 | 	mov	arg01, local01
05310     B8 F8 B1 FD | 	call	#__system___string_cmp
05314     00 7A 0E F2 | 	cmp	result1, #0 wz
05318     D4 09 90 AD |  if_e	jmp	#LR__0373
0531c     94 01 00 FF 
05320     E4 95 06 F6 | 	mov	arg02, ##@LR__5694
05324     53 93 02 F6 | 	mov	arg01, local01
05328     A0 F8 B1 FD | 	call	#__system___string_cmp
0532c     00 7A 0E F2 | 	cmp	result1, #0 wz
05330     C4 09 90 AD |  if_e	jmp	#LR__0374
05334     94 01 00 FF 
05338     E9 95 06 F6 | 	mov	arg02, ##@LR__5695
0533c     53 93 02 F6 | 	mov	arg01, local01
05340     88 F8 B1 FD | 	call	#__system___string_cmp
05344     00 7A 0E F2 | 	cmp	result1, #0 wz
05348     B4 09 90 AD |  if_e	jmp	#LR__0375
0534c     94 01 00 FF 
05350     EC 95 06 F6 | 	mov	arg02, ##@LR__5696
05354     53 93 02 F6 | 	mov	arg01, local01
05358     70 F8 B1 FD | 	call	#__system___string_cmp
0535c     00 7A 0E F2 | 	cmp	result1, #0 wz
05360     A4 09 90 AD |  if_e	jmp	#LR__0376
05364     94 01 00 FF 
05368     EF 95 06 F6 | 	mov	arg02, ##@LR__5697
0536c     53 93 02 F6 | 	mov	arg01, local01
05370     58 F8 B1 FD | 	call	#__system___string_cmp
05374     00 7A 0E F2 | 	cmp	result1, #0 wz
05378     94 09 90 AD |  if_e	jmp	#LR__0377
0537c     94 01 00 FF 
05380     F3 95 06 F6 | 	mov	arg02, ##@LR__5698
05384     53 93 02 F6 | 	mov	arg01, local01
05388     40 F8 B1 FD | 	call	#__system___string_cmp
0538c     00 7A 0E F2 | 	cmp	result1, #0 wz
05390     84 09 90 AD |  if_e	jmp	#LR__0378
05394     94 01 00 FF 
05398     F6 95 06 F6 | 	mov	arg02, ##@LR__5699
0539c     53 93 02 F6 | 	mov	arg01, local01
053a0     28 F8 B1 FD | 	call	#__system___string_cmp
053a4     00 7A 0E F2 | 	cmp	result1, #0 wz
053a8     74 09 90 AD |  if_e	jmp	#LR__0379
053ac     94 01 00 FF 
053b0     FC 95 06 F6 | 	mov	arg02, ##@LR__5700
053b4     53 93 02 F6 | 	mov	arg01, local01
053b8     10 F8 B1 FD | 	call	#__system___string_cmp
053bc     00 7A 0E F2 | 	cmp	result1, #0 wz
053c0     64 09 90 AD |  if_e	jmp	#LR__0380
053c4     95 01 00 FF 
053c8     01 94 06 F6 | 	mov	arg02, ##@LR__5701
053cc     53 93 02 F6 | 	mov	arg01, local01
053d0     F8 F7 B1 FD | 	call	#__system___string_cmp
053d4     00 7A 0E F2 | 	cmp	result1, #0 wz
053d8     54 09 90 AD |  if_e	jmp	#LR__0381
053dc     95 01 00 FF 
053e0     04 94 06 F6 | 	mov	arg02, ##@LR__5702
053e4     53 93 02 F6 | 	mov	arg01, local01
053e8     E0 F7 B1 FD | 	call	#__system___string_cmp
053ec     00 7A 0E F2 | 	cmp	result1, #0 wz
053f0     44 09 90 AD |  if_e	jmp	#LR__0382
053f4     95 01 00 FF 
053f8     09 94 06 F6 | 	mov	arg02, ##@LR__5703
053fc     53 93 02 F6 | 	mov	arg01, local01
05400     C8 F7 B1 FD | 	call	#__system___string_cmp
05404     00 7A 0E F2 | 	cmp	result1, #0 wz
05408     34 09 90 AD |  if_e	jmp	#LR__0383
0540c     95 01 00 FF 
05410     0D 94 06 F6 | 	mov	arg02, ##@LR__5704
05414     53 93 02 F6 | 	mov	arg01, local01
05418     B0 F7 B1 FD | 	call	#__system___string_cmp
0541c     00 7A 0E F2 | 	cmp	result1, #0 wz
05420     24 09 90 AD |  if_e	jmp	#LR__0384
05424     95 01 00 FF 
05428     13 94 06 F6 | 	mov	arg02, ##@LR__5705
0542c     53 93 02 F6 | 	mov	arg01, local01
05430     98 F7 B1 FD | 	call	#__system___string_cmp
05434     00 7A 0E F2 | 	cmp	result1, #0 wz
05438     14 09 90 AD |  if_e	jmp	#LR__0385
0543c     95 01 00 FF 
05440     19 94 06 F6 | 	mov	arg02, ##@LR__5706
05444     53 93 02 F6 | 	mov	arg01, local01
05448     80 F7 B1 FD | 	call	#__system___string_cmp
0544c     00 7A 0E F2 | 	cmp	result1, #0 wz
05450     04 09 90 AD |  if_e	jmp	#LR__0386
05454     95 01 00 FF 
05458     1E 94 06 F6 | 	mov	arg02, ##@LR__5707
0545c     53 93 02 F6 | 	mov	arg01, local01
05460     68 F7 B1 FD | 	call	#__system___string_cmp
05464     00 7A 0E F2 | 	cmp	result1, #0 wz
05468     F4 08 90 AD |  if_e	jmp	#LR__0387
0546c     95 01 00 FF 
05470     21 94 06 F6 | 	mov	arg02, ##@LR__5708
05474     53 93 02 F6 | 	mov	arg01, local01
05478     50 F7 B1 FD | 	call	#__system___string_cmp
0547c     00 7A 0E F2 | 	cmp	result1, #0 wz
05480     E4 08 90 AD |  if_e	jmp	#LR__0388
05484     95 01 00 FF 
05488     27 94 06 F6 | 	mov	arg02, ##@LR__5709
0548c     53 93 02 F6 | 	mov	arg01, local01
05490     38 F7 B1 FD | 	call	#__system___string_cmp
05494     00 7A 0E F2 | 	cmp	result1, #0 wz
05498     D4 08 90 AD |  if_e	jmp	#LR__0389
0549c     95 01 00 FF 
054a0     2B 94 06 F6 | 	mov	arg02, ##@LR__5710
054a4     53 93 02 F6 | 	mov	arg01, local01
054a8     20 F7 B1 FD | 	call	#__system___string_cmp
054ac     00 7A 0E F2 | 	cmp	result1, #0 wz
054b0     C4 08 90 AD |  if_e	jmp	#LR__0390
054b4     95 01 00 FF 
054b8     30 94 06 F6 | 	mov	arg02, ##@LR__5711
054bc     53 93 02 F6 | 	mov	arg01, local01
054c0     08 F7 B1 FD | 	call	#__system___string_cmp
054c4     00 7A 0E F2 | 	cmp	result1, #0 wz
054c8     B4 08 90 AD |  if_e	jmp	#LR__0391
054cc     95 01 00 FF 
054d0     33 94 06 F6 | 	mov	arg02, ##@LR__5712
054d4     53 93 02 F6 | 	mov	arg01, local01
054d8     F0 F6 B1 FD | 	call	#__system___string_cmp
054dc     00 7A 0E F2 | 	cmp	result1, #0 wz
054e0     A4 08 90 AD |  if_e	jmp	#LR__0392
054e4     95 01 00 FF 
054e8     36 94 06 F6 | 	mov	arg02, ##@LR__5713
054ec     53 93 02 F6 | 	mov	arg01, local01
054f0     D8 F6 B1 FD | 	call	#__system___string_cmp
054f4     00 7A 0E F2 | 	cmp	result1, #0 wz
054f8     94 08 90 AD |  if_e	jmp	#LR__0393
054fc     95 01 00 FF 
05500     3B 94 06 F6 | 	mov	arg02, ##@LR__5714
05504     53 93 02 F6 | 	mov	arg01, local01
05508     C0 F6 B1 FD | 	call	#__system___string_cmp
0550c     00 7A 0E F2 | 	cmp	result1, #0 wz
05510     84 08 90 AD |  if_e	jmp	#LR__0394
05514     95 01 00 FF 
05518     41 94 06 F6 | 	mov	arg02, ##@LR__5715
0551c     53 93 02 F6 | 	mov	arg01, local01
05520     A8 F6 B1 FD | 	call	#__system___string_cmp
05524     00 7A 0E F2 | 	cmp	result1, #0 wz
05528     74 08 90 AD |  if_e	jmp	#LR__0395
0552c     95 01 00 FF 
05530     45 94 06 F6 | 	mov	arg02, ##@LR__5716
05534     53 93 02 F6 | 	mov	arg01, local01
05538     90 F6 B1 FD | 	call	#__system___string_cmp
0553c     00 7A 0E F2 | 	cmp	result1, #0 wz
05540     64 08 90 AD |  if_e	jmp	#LR__0396
05544     95 01 00 FF 
05548     4E 94 06 F6 | 	mov	arg02, ##@LR__5717
0554c     53 93 02 F6 | 	mov	arg01, local01
05550     78 F6 B1 FD | 	call	#__system___string_cmp
05554     00 7A 0E F2 | 	cmp	result1, #0 wz
05558     54 08 90 AD |  if_e	jmp	#LR__0397
0555c     95 01 00 FF 
05560     54 94 06 F6 | 	mov	arg02, ##@LR__5718
05564     53 93 02 F6 | 	mov	arg01, local01
05568     60 F6 B1 FD | 	call	#__system___string_cmp
0556c     00 7A 0E F2 | 	cmp	result1, #0 wz
05570     44 08 90 AD |  if_e	jmp	#LR__0398
05574     95 01 00 FF 
05578     5A 94 06 F6 | 	mov	arg02, ##@LR__5719
0557c     53 93 02 F6 | 	mov	arg01, local01
05580     48 F6 B1 FD | 	call	#__system___string_cmp
05584     00 7A 0E F2 | 	cmp	result1, #0 wz
05588     34 08 90 AD |  if_e	jmp	#LR__0399
0558c     95 01 00 FF 
05590     63 94 06 F6 | 	mov	arg02, ##@LR__5720
05594     53 93 02 F6 | 	mov	arg01, local01
05598     30 F6 B1 FD | 	call	#__system___string_cmp
0559c     00 7A 0E F2 | 	cmp	result1, #0 wz
055a0     24 08 90 AD |  if_e	jmp	#LR__0400
055a4     95 01 00 FF 
055a8     6D 94 06 F6 | 	mov	arg02, ##@LR__5721
055ac     53 93 02 F6 | 	mov	arg01, local01
055b0     18 F6 B1 FD | 	call	#__system___string_cmp
055b4     00 7A 0E F2 | 	cmp	result1, #0 wz
055b8     14 08 90 AD |  if_e	jmp	#LR__0401
055bc     95 01 00 FF 
055c0     76 94 06 F6 | 	mov	arg02, ##@LR__5722
055c4     53 93 02 F6 | 	mov	arg01, local01
055c8     00 F6 B1 FD | 	call	#__system___string_cmp
055cc     00 7A 0E F2 | 	cmp	result1, #0 wz
055d0     04 08 90 AD |  if_e	jmp	#LR__0402
055d4     95 01 00 FF 
055d8     7B 94 06 F6 | 	mov	arg02, ##@LR__5723
055dc     53 93 02 F6 | 	mov	arg01, local01
055e0     E8 F5 B1 FD | 	call	#__system___string_cmp
055e4     00 7A 0E F2 | 	cmp	result1, #0 wz
055e8     F4 07 90 AD |  if_e	jmp	#LR__0403
055ec     95 01 00 FF 
055f0     7E 94 06 F6 | 	mov	arg02, ##@LR__5724
055f4     53 93 02 F6 | 	mov	arg01, local01
055f8     D0 F5 B1 FD | 	call	#__system___string_cmp
055fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05600     E4 07 90 AD |  if_e	jmp	#LR__0404
05604     95 01 00 FF 
05608     83 94 06 F6 | 	mov	arg02, ##@LR__5725
0560c     53 93 02 F6 | 	mov	arg01, local01
05610     B8 F5 B1 FD | 	call	#__system___string_cmp
05614     00 7A 0E F2 | 	cmp	result1, #0 wz
05618     D4 07 90 AD |  if_e	jmp	#LR__0405
0561c     95 01 00 FF 
05620     87 94 06 F6 | 	mov	arg02, ##@LR__5726
05624     53 93 02 F6 | 	mov	arg01, local01
05628     A0 F5 B1 FD | 	call	#__system___string_cmp
0562c     00 7A 0E F2 | 	cmp	result1, #0 wz
05630     C4 07 90 AD |  if_e	jmp	#LR__0406
05634     95 01 00 FF 
05638     8C 94 06 F6 | 	mov	arg02, ##@LR__5727
0563c     53 93 02 F6 | 	mov	arg01, local01
05640     88 F5 B1 FD | 	call	#__system___string_cmp
05644     00 7A 0E F2 | 	cmp	result1, #0 wz
05648     B4 07 90 AD |  if_e	jmp	#LR__0407
0564c     95 01 00 FF 
05650     90 94 06 F6 | 	mov	arg02, ##@LR__5728
05654     53 93 02 F6 | 	mov	arg01, local01
05658     70 F5 B1 FD | 	call	#__system___string_cmp
0565c     00 7A 0E F2 | 	cmp	result1, #0 wz
05660     A4 07 90 AD |  if_e	jmp	#LR__0408
05664     95 01 00 FF 
05668     99 94 06 F6 | 	mov	arg02, ##@LR__5729
0566c     53 93 02 F6 | 	mov	arg01, local01
05670     58 F5 B1 FD | 	call	#__system___string_cmp
05674     00 7A 0E F2 | 	cmp	result1, #0 wz
05678     94 07 90 AD |  if_e	jmp	#LR__0409
0567c     95 01 00 FF 
05680     9E 94 06 F6 | 	mov	arg02, ##@LR__5730
05684     53 93 02 F6 | 	mov	arg01, local01
05688     40 F5 B1 FD | 	call	#__system___string_cmp
0568c     00 7A 0E F2 | 	cmp	result1, #0 wz
05690     84 07 90 AD |  if_e	jmp	#LR__0410
05694     95 01 00 FF 
05698     A4 94 06 F6 | 	mov	arg02, ##@LR__5731
0569c     53 93 02 F6 | 	mov	arg01, local01
056a0     28 F5 B1 FD | 	call	#__system___string_cmp
056a4     00 7A 0E F2 | 	cmp	result1, #0 wz
056a8     74 07 90 AD |  if_e	jmp	#LR__0411
056ac     95 01 00 FF 
056b0     A6 94 06 F6 | 	mov	arg02, ##@LR__5732
056b4     53 93 02 F6 | 	mov	arg01, local01
056b8     10 F5 B1 FD | 	call	#__system___string_cmp
056bc     00 7A 0E F2 | 	cmp	result1, #0 wz
056c0     64 07 90 AD |  if_e	jmp	#LR__0412
056c4     95 01 00 FF 
056c8     AA 94 06 F6 | 	mov	arg02, ##@LR__5733
056cc     53 93 02 F6 | 	mov	arg01, local01
056d0     F8 F4 B1 FD | 	call	#__system___string_cmp
056d4     00 7A 0E F2 | 	cmp	result1, #0 wz
056d8     54 07 90 AD |  if_e	jmp	#LR__0413
056dc     95 01 00 FF 
056e0     AE 94 06 F6 | 	mov	arg02, ##@LR__5734
056e4     53 93 02 F6 | 	mov	arg01, local01
056e8     E0 F4 B1 FD | 	call	#__system___string_cmp
056ec     00 7A 0E F2 | 	cmp	result1, #0 wz
056f0     44 07 90 AD |  if_e	jmp	#LR__0414
056f4     95 01 00 FF 
056f8     B3 94 06 F6 | 	mov	arg02, ##@LR__5735
056fc     53 93 02 F6 | 	mov	arg01, local01
05700     C8 F4 B1 FD | 	call	#__system___string_cmp
05704     00 7A 0E F2 | 	cmp	result1, #0 wz
05708     34 07 90 AD |  if_e	jmp	#LR__0415
0570c     95 01 00 FF 
05710     BB 94 06 F6 | 	mov	arg02, ##@LR__5736
05714     53 93 02 F6 | 	mov	arg01, local01
05718     B0 F4 B1 FD | 	call	#__system___string_cmp
0571c     00 7A 0E F2 | 	cmp	result1, #0 wz
05720     24 07 90 AD |  if_e	jmp	#LR__0416
05724     95 01 00 FF 
05728     BF 94 06 F6 | 	mov	arg02, ##@LR__5737
0572c     53 93 02 F6 | 	mov	arg01, local01
05730     98 F4 B1 FD | 	call	#__system___string_cmp
05734     00 7A 0E F2 | 	cmp	result1, #0 wz
05738     14 07 90 AD |  if_e	jmp	#LR__0417
0573c     95 01 00 FF 
05740     C1 94 06 F6 | 	mov	arg02, ##@LR__5738
05744     53 93 02 F6 | 	mov	arg01, local01
05748     80 F4 B1 FD | 	call	#__system___string_cmp
0574c     00 7A 0E F2 | 	cmp	result1, #0 wz
05750     04 07 90 AD |  if_e	jmp	#LR__0418
05754     95 01 00 FF 
05758     C9 94 06 F6 | 	mov	arg02, ##@LR__5739
0575c     53 93 02 F6 | 	mov	arg01, local01
05760     68 F4 B1 FD | 	call	#__system___string_cmp
05764     00 7A 0E F2 | 	cmp	result1, #0 wz
05768     F4 06 90 AD |  if_e	jmp	#LR__0419
0576c     95 01 00 FF 
05770     D8 94 06 F6 | 	mov	arg02, ##@LR__5740
05774     53 93 02 F6 | 	mov	arg01, local01
05778     50 F4 B1 FD | 	call	#__system___string_cmp
0577c     00 7A 0E F2 | 	cmp	result1, #0 wz
05780     E4 06 90 AD |  if_e	jmp	#LR__0420
05784     95 01 00 FF 
05788     DC 94 06 F6 | 	mov	arg02, ##@LR__5741
0578c     53 93 02 F6 | 	mov	arg01, local01
05790     38 F4 B1 FD | 	call	#__system___string_cmp
05794     00 7A 0E F2 | 	cmp	result1, #0 wz
05798     D4 06 90 AD |  if_e	jmp	#LR__0421
0579c     95 01 00 FF 
057a0     E3 94 06 F6 | 	mov	arg02, ##@LR__5742
057a4     53 93 02 F6 | 	mov	arg01, local01
057a8     20 F4 B1 FD | 	call	#__system___string_cmp
057ac     00 7A 0E F2 | 	cmp	result1, #0 wz
057b0     C4 06 90 AD |  if_e	jmp	#LR__0422
057b4     95 01 00 FF 
057b8     E7 94 06 F6 | 	mov	arg02, ##@LR__5743
057bc     53 93 02 F6 | 	mov	arg01, local01
057c0     08 F4 B1 FD | 	call	#__system___string_cmp
057c4     00 7A 0E F2 | 	cmp	result1, #0 wz
057c8     B4 06 90 AD |  if_e	jmp	#LR__0423
057cc     95 01 00 FF 
057d0     EA 94 06 F6 | 	mov	arg02, ##@LR__5744
057d4     53 93 02 F6 | 	mov	arg01, local01
057d8     F0 F3 B1 FD | 	call	#__system___string_cmp
057dc     00 7A 0E F2 | 	cmp	result1, #0 wz
057e0     A4 06 90 AD |  if_e	jmp	#LR__0424
057e4     95 01 00 FF 
057e8     EF 94 06 F6 | 	mov	arg02, ##@LR__5745
057ec     53 93 02 F6 | 	mov	arg01, local01
057f0     D8 F3 B1 FD | 	call	#__system___string_cmp
057f4     00 7A 0E F2 | 	cmp	result1, #0 wz
057f8     94 06 90 AD |  if_e	jmp	#LR__0425
057fc     95 01 00 FF 
05800     F2 94 06 F6 | 	mov	arg02, ##@LR__5746
05804     53 93 02 F6 | 	mov	arg01, local01
05808     C0 F3 B1 FD | 	call	#__system___string_cmp
0580c     00 7A 0E F2 | 	cmp	result1, #0 wz
05810     84 06 90 AD |  if_e	jmp	#LR__0426
05814     95 01 00 FF 
05818     FB 94 06 F6 | 	mov	arg02, ##@LR__5747
0581c     53 93 02 F6 | 	mov	arg01, local01
05820     A8 F3 B1 FD | 	call	#__system___string_cmp
05824     00 7A 0E F2 | 	cmp	result1, #0 wz
05828     74 06 90 AD |  if_e	jmp	#LR__0427
0582c     95 01 00 FF 
05830     FF 94 06 F6 | 	mov	arg02, ##@LR__5748
05834     53 93 02 F6 | 	mov	arg01, local01
05838     90 F3 B1 FD | 	call	#__system___string_cmp
0583c     00 7A 0E F2 | 	cmp	result1, #0 wz
05840     64 06 90 AD |  if_e	jmp	#LR__0428
05844     95 01 00 FF 
05848     08 95 06 F6 | 	mov	arg02, ##@LR__5749
0584c     53 93 02 F6 | 	mov	arg01, local01
05850     78 F3 B1 FD | 	call	#__system___string_cmp
05854     00 7A 0E F2 | 	cmp	result1, #0 wz
05858     54 06 90 AD |  if_e	jmp	#LR__0429
0585c     95 01 00 FF 
05860     0C 95 06 F6 | 	mov	arg02, ##@LR__5750
05864     53 93 02 F6 | 	mov	arg01, local01
05868     60 F3 B1 FD | 	call	#__system___string_cmp
0586c     00 7A 0E F2 | 	cmp	result1, #0 wz
05870     44 06 90 AD |  if_e	jmp	#LR__0430
05874     95 01 00 FF 
05878     15 95 06 F6 | 	mov	arg02, ##@LR__5751
0587c     53 93 02 F6 | 	mov	arg01, local01
05880     48 F3 B1 FD | 	call	#__system___string_cmp
05884     00 7A 0E F2 | 	cmp	result1, #0 wz
05888     34 06 90 AD |  if_e	jmp	#LR__0431
0588c     95 01 00 FF 
05890     19 95 06 F6 | 	mov	arg02, ##@LR__5752
05894     53 93 02 F6 | 	mov	arg01, local01
05898     30 F3 B1 FD | 	call	#__system___string_cmp
0589c     00 7A 0E F2 | 	cmp	result1, #0 wz
058a0     24 06 90 AD |  if_e	jmp	#LR__0432
058a4     95 01 00 FF 
058a8     20 95 06 F6 | 	mov	arg02, ##@LR__5753
058ac     53 93 02 F6 | 	mov	arg01, local01
058b0     18 F3 B1 FD | 	call	#__system___string_cmp
058b4     00 7A 0E F2 | 	cmp	result1, #0 wz
058b8     14 06 90 AD |  if_e	jmp	#LR__0433
058bc     95 01 00 FF 
058c0     24 95 06 F6 | 	mov	arg02, ##@LR__5754
058c4     53 93 02 F6 | 	mov	arg01, local01
058c8     00 F3 B1 FD | 	call	#__system___string_cmp
058cc     00 7A 0E F2 | 	cmp	result1, #0 wz
058d0     04 06 90 AD |  if_e	jmp	#LR__0434
058d4     95 01 00 FF 
058d8     2B 95 06 F6 | 	mov	arg02, ##@LR__5755
058dc     53 93 02 F6 | 	mov	arg01, local01
058e0     E8 F2 B1 FD | 	call	#__system___string_cmp
058e4     00 7A 0E F2 | 	cmp	result1, #0 wz
058e8     F4 05 90 AD |  if_e	jmp	#LR__0435
058ec     95 01 00 FF 
058f0     2F 95 06 F6 | 	mov	arg02, ##@LR__5756
058f4     53 93 02 F6 | 	mov	arg01, local01
058f8     D0 F2 B1 FD | 	call	#__system___string_cmp
058fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05900     E4 05 90 AD |  if_e	jmp	#LR__0436
05904     95 01 00 FF 
05908     36 95 06 F6 | 	mov	arg02, ##@LR__5757
0590c     53 93 02 F6 | 	mov	arg01, local01
05910     B8 F2 B1 FD | 	call	#__system___string_cmp
05914     00 7A 0E F2 | 	cmp	result1, #0 wz
05918     D4 05 90 AD |  if_e	jmp	#LR__0437
0591c     95 01 00 FF 
05920     3A 95 06 F6 | 	mov	arg02, ##@LR__5758
05924     53 93 02 F6 | 	mov	arg01, local01
05928     A0 F2 B1 FD | 	call	#__system___string_cmp
0592c     00 7A 0E F2 | 	cmp	result1, #0 wz
05930     C4 05 90 AD |  if_e	jmp	#LR__0438
05934     95 01 00 FF 
05938     45 95 06 F6 | 	mov	arg02, ##@LR__5759
0593c     53 93 02 F6 | 	mov	arg01, local01
05940     88 F2 B1 FD | 	call	#__system___string_cmp
05944     00 7A 0E F2 | 	cmp	result1, #0 wz
05948     B4 05 90 AD |  if_e	jmp	#LR__0439
0594c     95 01 00 FF 
05950     49 95 06 F6 | 	mov	arg02, ##@LR__5760
05954     53 93 02 F6 | 	mov	arg01, local01
05958     70 F2 B1 FD | 	call	#__system___string_cmp
0595c     00 7A 0E F2 | 	cmp	result1, #0 wz
05960     A4 05 90 AD |  if_e	jmp	#LR__0440
05964     95 01 00 FF 
05968     50 95 06 F6 | 	mov	arg02, ##@LR__5761
0596c     53 93 02 F6 | 	mov	arg01, local01
05970     58 F2 B1 FD | 	call	#__system___string_cmp
05974     00 7A 0E F2 | 	cmp	result1, #0 wz
05978     94 05 90 AD |  if_e	jmp	#LR__0441
0597c     95 01 00 FF 
05980     54 95 06 F6 | 	mov	arg02, ##@LR__5762
05984     53 93 02 F6 | 	mov	arg01, local01
05988     40 F2 B1 FD | 	call	#__system___string_cmp
0598c     00 7A 0E F2 | 	cmp	result1, #0 wz
05990     84 05 90 AD |  if_e	jmp	#LR__0442
05994     95 01 00 FF 
05998     5C 95 06 F6 | 	mov	arg02, ##@LR__5763
0599c     53 93 02 F6 | 	mov	arg01, local01
059a0     28 F2 B1 FD | 	call	#__system___string_cmp
059a4     00 7A 0E F2 | 	cmp	result1, #0 wz
059a8     74 05 90 AD |  if_e	jmp	#LR__0443
059ac     95 01 00 FF 
059b0     60 95 06 F6 | 	mov	arg02, ##@LR__5764
059b4     53 93 02 F6 | 	mov	arg01, local01
059b8     10 F2 B1 FD | 	call	#__system___string_cmp
059bc     00 7A 0E F2 | 	cmp	result1, #0 wz
059c0     64 05 90 AD |  if_e	jmp	#LR__0444
059c4     95 01 00 FF 
059c8     67 95 06 F6 | 	mov	arg02, ##@LR__5765
059cc     53 93 02 F6 | 	mov	arg01, local01
059d0     F8 F1 B1 FD | 	call	#__system___string_cmp
059d4     00 7A 0E F2 | 	cmp	result1, #0 wz
059d8     54 05 90 AD |  if_e	jmp	#LR__0445
059dc     95 01 00 FF 
059e0     6E 95 06 F6 | 	mov	arg02, ##@LR__5766
059e4     53 93 02 F6 | 	mov	arg01, local01
059e8     E0 F1 B1 FD | 	call	#__system___string_cmp
059ec     00 7A 0E F2 | 	cmp	result1, #0 wz
059f0     44 05 90 AD |  if_e	jmp	#LR__0446
059f4     95 01 00 FF 
059f8     72 95 06 F6 | 	mov	arg02, ##@LR__5767
059fc     53 93 02 F6 | 	mov	arg01, local01
05a00     C8 F1 B1 FD | 	call	#__system___string_cmp
05a04     00 7A 0E F2 | 	cmp	result1, #0 wz
05a08     34 05 90 AD |  if_e	jmp	#LR__0447
05a0c     95 01 00 FF 
05a10     78 95 06 F6 | 	mov	arg02, ##@LR__5768
05a14     53 93 02 F6 | 	mov	arg01, local01
05a18     B0 F1 B1 FD | 	call	#__system___string_cmp
05a1c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a20     24 05 90 AD |  if_e	jmp	#LR__0448
05a24     95 01 00 FF 
05a28     7C 95 06 F6 | 	mov	arg02, ##@LR__5769
05a2c     53 93 02 F6 | 	mov	arg01, local01
05a30     98 F1 B1 FD | 	call	#__system___string_cmp
05a34     00 7A 0E F2 | 	cmp	result1, #0 wz
05a38     14 05 90 AD |  if_e	jmp	#LR__0449
05a3c     95 01 00 FF 
05a40     83 95 06 F6 | 	mov	arg02, ##@LR__5770
05a44     53 93 02 F6 | 	mov	arg01, local01
05a48     80 F1 B1 FD | 	call	#__system___string_cmp
05a4c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a50     04 05 90 AD |  if_e	jmp	#LR__0450
05a54     95 01 00 FF 
05a58     88 95 06 F6 | 	mov	arg02, ##@LR__5771
05a5c     53 93 02 F6 | 	mov	arg01, local01
05a60     68 F1 B1 FD | 	call	#__system___string_cmp
05a64     00 7A 0E F2 | 	cmp	result1, #0 wz
05a68     F4 04 90 AD |  if_e	jmp	#LR__0451
05a6c     95 01 00 FF 
05a70     8D 95 06 F6 | 	mov	arg02, ##@LR__5772
05a74     53 93 02 F6 | 	mov	arg01, local01
05a78     50 F1 B1 FD | 	call	#__system___string_cmp
05a7c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a80     E4 04 90 AD |  if_e	jmp	#LR__0452
05a84     95 01 00 FF 
05a88     94 95 06 F6 | 	mov	arg02, ##@LR__5773
05a8c     53 93 02 F6 | 	mov	arg01, local01
05a90     38 F1 B1 FD | 	call	#__system___string_cmp
05a94     00 7A 0E F2 | 	cmp	result1, #0 wz
05a98     D4 04 90 AD |  if_e	jmp	#LR__0453
05a9c     95 01 00 FF 
05aa0     97 95 06 F6 | 	mov	arg02, ##@LR__5774
05aa4     53 93 02 F6 | 	mov	arg01, local01
05aa8     20 F1 B1 FD | 	call	#__system___string_cmp
05aac     00 7A 0E F2 | 	cmp	result1, #0 wz
05ab0     C4 04 90 AD |  if_e	jmp	#LR__0454
05ab4     95 01 00 FF 
05ab8     A1 95 06 F6 | 	mov	arg02, ##@LR__5775
05abc     53 93 02 F6 | 	mov	arg01, local01
05ac0     08 F1 B1 FD | 	call	#__system___string_cmp
05ac4     00 7A 0E F2 | 	cmp	result1, #0 wz
05ac8     B4 04 90 AD |  if_e	jmp	#LR__0455
05acc     95 01 00 FF 
05ad0     A5 95 06 F6 | 	mov	arg02, ##@LR__5776
05ad4     53 93 02 F6 | 	mov	arg01, local01
05ad8     F0 F0 B1 FD | 	call	#__system___string_cmp
05adc     00 7A 0E F2 | 	cmp	result1, #0 wz
05ae0     A4 04 90 AD |  if_e	jmp	#LR__0456
05ae4     95 01 00 FF 
05ae8     AD 95 06 F6 | 	mov	arg02, ##@LR__5777
05aec     53 93 02 F6 | 	mov	arg01, local01
05af0     D8 F0 B1 FD | 	call	#__system___string_cmp
05af4     00 7A 0E F2 | 	cmp	result1, #0 wz
05af8     94 04 90 AD |  if_e	jmp	#LR__0457
05afc     95 01 00 FF 
05b00     B1 95 06 F6 | 	mov	arg02, ##@LR__5778
05b04     53 93 02 F6 | 	mov	arg01, local01
05b08     C0 F0 B1 FD | 	call	#__system___string_cmp
05b0c     00 7A 0E F2 | 	cmp	result1, #0 wz
05b10     84 04 90 AD |  if_e	jmp	#LR__0458
05b14     95 01 00 FF 
05b18     B7 95 06 F6 | 	mov	arg02, ##@LR__5779
05b1c     53 93 02 F6 | 	mov	arg01, local01
05b20     A8 F0 B1 FD | 	call	#__system___string_cmp
05b24     00 7A 0E F2 | 	cmp	result1, #0 wz
05b28     74 04 90 AD |  if_e	jmp	#LR__0459
05b2c     95 01 00 FF 
05b30     BD 95 06 F6 | 	mov	arg02, ##@LR__5780
05b34     53 93 02 F6 | 	mov	arg01, local01
05b38     90 F0 B1 FD | 	call	#__system___string_cmp
05b3c     00 7A 0E F2 | 	cmp	result1, #0 wz
05b40     64 04 90 AD |  if_e	jmp	#LR__0460
05b44     68 04 90 FD | 	jmp	#LR__0461
05b48                 | LR__0320
05b48     5C 7A 06 F6 | 	mov	result1, #92
05b4c     64 04 90 FD | 	jmp	#LR__0462
05b50                 | LR__0321
05b50     5C 7A 06 F6 | 	mov	result1, #92
05b54     5C 04 90 FD | 	jmp	#LR__0462
05b58                 | LR__0322
05b58     B9 7A 06 F6 | 	mov	result1, #185
05b5c     54 04 90 FD | 	jmp	#LR__0462
05b60                 | LR__0323
05b60     47 7A 06 F6 | 	mov	result1, #71
05b64     4C 04 90 FD | 	jmp	#LR__0462
05b68                 | LR__0324
05b68     59 7A 06 F6 | 	mov	result1, #89
05b6c     44 04 90 FD | 	jmp	#LR__0462
05b70                 | LR__0325
05b70     59 7A 06 F6 | 	mov	result1, #89
05b74     3C 04 90 FD | 	jmp	#LR__0462
05b78                 | LR__0326
05b78     C3 7A 06 F6 | 	mov	result1, #195
05b7c     34 04 90 FD | 	jmp	#LR__0462
05b80                 | LR__0327
05b80     AE 7A 06 F6 | 	mov	result1, #174
05b84     2C 04 90 FD | 	jmp	#LR__0462
05b88                 | LR__0328
05b88     AE 7A 06 F6 | 	mov	result1, #174
05b8c     24 04 90 FD | 	jmp	#LR__0462
05b90                 | LR__0329
05b90     B1 7A 06 F6 | 	mov	result1, #177
05b94     1C 04 90 FD | 	jmp	#LR__0462
05b98                 | LR__0330
05b98     B1 7A 06 F6 | 	mov	result1, #177
05b9c     14 04 90 FD | 	jmp	#LR__0462
05ba0                 | LR__0331
05ba0     AF 7A 06 F6 | 	mov	result1, #175
05ba4     0C 04 90 FD | 	jmp	#LR__0462
05ba8                 | LR__0332
05ba8     AF 7A 06 F6 | 	mov	result1, #175
05bac     04 04 90 FD | 	jmp	#LR__0462
05bb0                 | LR__0333
05bb0     B0 7A 06 F6 | 	mov	result1, #176
05bb4     FC 03 90 FD | 	jmp	#LR__0462
05bb8                 | LR__0334
05bb8     B0 7A 06 F6 | 	mov	result1, #176
05bbc     F4 03 90 FD | 	jmp	#LR__0462
05bc0                 | LR__0335
05bc0     45 7A 06 F6 | 	mov	result1, #69
05bc4     EC 03 90 FD | 	jmp	#LR__0462
05bc8                 | LR__0336
05bc8     45 7A 06 F6 | 	mov	result1, #69
05bcc     E4 03 90 FD | 	jmp	#LR__0462
05bd0                 | LR__0337
05bd0     69 7A 06 F6 | 	mov	result1, #105
05bd4     DC 03 90 FD | 	jmp	#LR__0462
05bd8                 | LR__0338
05bd8     B4 7A 06 F6 | 	mov	result1, #180
05bdc     D4 03 90 FD | 	jmp	#LR__0462
05be0                 | LR__0339
05be0     40 7A 06 F6 | 	mov	result1, #64
05be4     CC 03 90 FD | 	jmp	#LR__0462
05be8                 | LR__0340
05be8     CF 7A 06 F6 | 	mov	result1, #207
05bec     C4 03 90 FD | 	jmp	#LR__0462
05bf0                 | LR__0341
05bf0     49 7A 06 F6 | 	mov	result1, #73
05bf4     BC 03 90 FD | 	jmp	#LR__0462
05bf8                 | LR__0342
05bf8     49 7A 06 F6 | 	mov	result1, #73
05bfc     B4 03 90 FD | 	jmp	#LR__0462
05c00                 | LR__0343
05c00     C4 7A 06 F6 | 	mov	result1, #196
05c04     AC 03 90 FD | 	jmp	#LR__0462
05c08                 | LR__0344
05c08     68 7A 06 F6 | 	mov	result1, #104
05c0c     A4 03 90 FD | 	jmp	#LR__0462
05c10                 | LR__0345
05c10     B7 7A 06 F6 | 	mov	result1, #183
05c14     9C 03 90 FD | 	jmp	#LR__0462
05c18                 | LR__0346
05c18     D9 7A 06 F6 | 	mov	result1, #217
05c1c     94 03 90 FD | 	jmp	#LR__0462
05c20                 | LR__0347
05c20     73 7A 06 F6 | 	mov	result1, #115
05c24     8C 03 90 FD | 	jmp	#LR__0462
05c28                 | LR__0348
05c28     74 7A 06 F6 | 	mov	result1, #116
05c2c     84 03 90 FD | 	jmp	#LR__0462
05c30                 | LR__0349
05c30     6C 7A 06 F6 | 	mov	result1, #108
05c34     7C 03 90 FD | 	jmp	#LR__0462
05c38                 | LR__0350
05c38     6C 7A 06 F6 | 	mov	result1, #108
05c3c     74 03 90 FD | 	jmp	#LR__0462
05c40                 | LR__0351
05c40     89 7A 06 F6 | 	mov	result1, #137
05c44     6C 03 90 FD | 	jmp	#LR__0462
05c48                 | LR__0352
05c48     C2 7A 06 F6 | 	mov	result1, #194
05c4c     64 03 90 FD | 	jmp	#LR__0462
05c50                 | LR__0353
05c50     72 7A 06 F6 | 	mov	result1, #114
05c54     5C 03 90 FD | 	jmp	#LR__0462
05c58                 | LR__0354
05c58     5D 7A 06 F6 | 	mov	result1, #93
05c5c     54 03 90 FD | 	jmp	#LR__0462
05c60                 | LR__0355
05c60     96 7A 06 F6 | 	mov	result1, #150
05c64     4C 03 90 FD | 	jmp	#LR__0462
05c68                 | LR__0356
05c68     43 7A 06 F6 | 	mov	result1, #67
05c6c     44 03 90 FD | 	jmp	#LR__0462
05c70                 | LR__0357
05c70     43 7A 06 F6 | 	mov	result1, #67
05c74     3C 03 90 FD | 	jmp	#LR__0462
05c78                 | LR__0358
05c78     43 7A 06 F6 | 	mov	result1, #67
05c7c     34 03 90 FD | 	jmp	#LR__0462
05c80                 | LR__0359
05c80     5A 7A 06 F6 | 	mov	result1, #90
05c84     2C 03 90 FD | 	jmp	#LR__0462
05c88                 | LR__0360
05c88     AB 7A 06 F6 | 	mov	result1, #171
05c8c     24 03 90 FD | 	jmp	#LR__0462
05c90                 | LR__0361
05c90     BD 7A 06 F6 | 	mov	result1, #189
05c94     1C 03 90 FD | 	jmp	#LR__0462
05c98                 | LR__0362
05c98     BD 7A 06 F6 | 	mov	result1, #189
05c9c     14 03 90 FD | 	jmp	#LR__0462
05ca0                 | LR__0363
05ca0     46 7A 06 F6 | 	mov	result1, #70
05ca4     0C 03 90 FD | 	jmp	#LR__0462
05ca8                 | LR__0364
05ca8     46 7A 06 F6 | 	mov	result1, #70
05cac     04 03 90 FD | 	jmp	#LR__0462
05cb0                 | LR__0365
05cb0     71 7A 06 F6 | 	mov	result1, #113
05cb4     FC 02 90 FD | 	jmp	#LR__0462
05cb8                 | LR__0366
05cb8     71 7A 06 F6 | 	mov	result1, #113
05cbc     F4 02 90 FD | 	jmp	#LR__0462
05cc0                 | LR__0367
05cc0     60 7A 06 F6 | 	mov	result1, #96
05cc4     EC 02 90 FD | 	jmp	#LR__0462
05cc8                 | LR__0368
05cc8     4A 7A 06 F6 | 	mov	result1, #74
05ccc     E4 02 90 FD | 	jmp	#LR__0462
05cd0                 | LR__0369
05cd0     4A 7A 06 F6 | 	mov	result1, #74
05cd4     DC 02 90 FD | 	jmp	#LR__0462
05cd8                 | LR__0370
05cd8     48 7A 06 F6 | 	mov	result1, #72
05cdc     D4 02 90 FD | 	jmp	#LR__0462
05ce0                 | LR__0371
05ce0     48 7A 06 F6 | 	mov	result1, #72
05ce4     CC 02 90 FD | 	jmp	#LR__0462
05ce8                 | LR__0372
05ce8     BB 7A 06 F6 | 	mov	result1, #187
05cec     C4 02 90 FD | 	jmp	#LR__0462
05cf0                 | LR__0373
05cf0     A9 7A 06 F6 | 	mov	result1, #169
05cf4     BC 02 90 FD | 	jmp	#LR__0462
05cf8                 | LR__0374
05cf8     4E 7A 06 F6 | 	mov	result1, #78
05cfc     B4 02 90 FD | 	jmp	#LR__0462
05d00                 | LR__0375
05d00     4E 7A 06 F6 | 	mov	result1, #78
05d04     AC 02 90 FD | 	jmp	#LR__0462
05d08                 | LR__0376
05d08     58 7A 06 F6 | 	mov	result1, #88
05d0c     A4 02 90 FD | 	jmp	#LR__0462
05d10                 | LR__0377
05d10     5F 7A 06 F6 | 	mov	result1, #95
05d14     9C 02 90 FD | 	jmp	#LR__0462
05d18                 | LR__0378
05d18     5F 7A 06 F6 | 	mov	result1, #95
05d1c     94 02 90 FD | 	jmp	#LR__0462
05d20                 | LR__0379
05d20     B5 7A 06 F6 | 	mov	result1, #181
05d24     8C 02 90 FD | 	jmp	#LR__0462
05d28                 | LR__0380
05d28     4C 7A 06 F6 | 	mov	result1, #76
05d2c     84 02 90 FD | 	jmp	#LR__0462
05d30                 | LR__0381
05d30     4C 7A 06 F6 | 	mov	result1, #76
05d34     7C 02 90 FD | 	jmp	#LR__0462
05d38                 | LR__0382
05d38     52 7A 06 F6 | 	mov	result1, #82
05d3c     74 02 90 FD | 	jmp	#LR__0462
05d40                 | LR__0383
05d40     52 7A 06 F6 | 	mov	result1, #82
05d44     6C 02 90 FD | 	jmp	#LR__0462
05d48                 | LR__0384
05d48     97 7A 06 F6 | 	mov	result1, #151
05d4c     64 02 90 FD | 	jmp	#LR__0462
05d50                 | LR__0385
05d50     C6 7A 06 F6 | 	mov	result1, #198
05d54     5C 02 90 FD | 	jmp	#LR__0462
05d58                 | LR__0386
05d58     61 7A 06 F6 | 	mov	result1, #97
05d5c     54 02 90 FD | 	jmp	#LR__0462
05d60                 | LR__0387
05d60     61 7A 06 F6 | 	mov	result1, #97
05d64     4C 02 90 FD | 	jmp	#LR__0462
05d68                 | LR__0388
05d68     63 7A 06 F6 | 	mov	result1, #99
05d6c     44 02 90 FD | 	jmp	#LR__0462
05d70                 | LR__0389
05d70     41 7A 06 F6 | 	mov	result1, #65
05d74     3C 02 90 FD | 	jmp	#LR__0462
05d78                 | LR__0390
05d78     4B 7A 06 F6 | 	mov	result1, #75
05d7c     34 02 90 FD | 	jmp	#LR__0462
05d80                 | LR__0391
05d80     4B 7A 06 F6 | 	mov	result1, #75
05d84     2C 02 90 FD | 	jmp	#LR__0462
05d88                 | LR__0392
05d88     C1 7A 06 F6 | 	mov	result1, #193
05d8c     24 02 90 FD | 	jmp	#LR__0462
05d90                 | LR__0393
05d90     B3 7A 06 F6 | 	mov	result1, #179
05d94     1C 02 90 FD | 	jmp	#LR__0462
05d98                 | LR__0394
05d98     5E 7A 06 F6 | 	mov	result1, #94
05d9c     14 02 90 FD | 	jmp	#LR__0462
05da0                 | LR__0395
05da0     5E 7A 06 F6 | 	mov	result1, #94
05da4     0C 02 90 FD | 	jmp	#LR__0462
05da8                 | LR__0396
05da8     7C 7A 06 F6 | 	mov	result1, #124
05dac     04 02 90 FD | 	jmp	#LR__0462
05db0                 | LR__0397
05db0     7E 7A 06 F6 | 	mov	result1, #126
05db4     FC 01 90 FD | 	jmp	#LR__0462
05db8                 | LR__0398
05db8     7D 7A 06 F6 | 	mov	result1, #125
05dbc     F4 01 90 FD | 	jmp	#LR__0462
05dc0                 | LR__0399
05dc0     7F 7A 06 F6 | 	mov	result1, #127
05dc4     EC 01 90 FD | 	jmp	#LR__0462
05dc8                 | LR__0400
05dc8     80 7A 06 F6 | 	mov	result1, #128
05dcc     E4 01 90 FD | 	jmp	#LR__0462
05dd0                 | LR__0401
05dd0     55 7A 06 F6 | 	mov	result1, #85
05dd4     DC 01 90 FD | 	jmp	#LR__0462
05dd8                 | LR__0402
05dd8     75 7A 06 F6 | 	mov	result1, #117
05ddc     D4 01 90 FD | 	jmp	#LR__0462
05de0                 | LR__0403
05de0     75 7A 06 F6 | 	mov	result1, #117
05de4     CC 01 90 FD | 	jmp	#LR__0462
05de8                 | LR__0404
05de8     42 7A 06 F6 | 	mov	result1, #66
05dec     C4 01 90 FD | 	jmp	#LR__0462
05df0                 | LR__0405
05df0     42 7A 06 F6 | 	mov	result1, #66
05df4     BC 01 90 FD | 	jmp	#LR__0462
05df8                 | LR__0406
05df8     95 7A 06 F6 | 	mov	result1, #149
05dfc     B4 01 90 FD | 	jmp	#LR__0462
05e00                 | LR__0407
05e00     AC 7A 06 F6 | 	mov	result1, #172
05e04     AC 01 90 FD | 	jmp	#LR__0462
05e08                 | LR__0408
05e08     81 7A 06 F6 | 	mov	result1, #129
05e0c     A4 01 90 FD | 	jmp	#LR__0462
05e10                 | LR__0409
05e10     81 7A 06 F6 | 	mov	result1, #129
05e14     9C 01 90 FD | 	jmp	#LR__0462
05e18                 | LR__0410
05e18     44 7A 06 F6 | 	mov	result1, #68
05e1c     94 01 90 FD | 	jmp	#LR__0462
05e20                 | LR__0411
05e20     44 7A 06 F6 | 	mov	result1, #68
05e24     8C 01 90 FD | 	jmp	#LR__0462
05e28                 | LR__0412
05e28     BC 7A 06 F6 | 	mov	result1, #188
05e2c     84 01 90 FD | 	jmp	#LR__0462
05e30                 | LR__0413
05e30     88 7A 06 F6 | 	mov	result1, #136
05e34     7C 01 90 FD | 	jmp	#LR__0462
05e38                 | LR__0414
05e38     B6 7A 06 F6 | 	mov	result1, #182
05e3c     74 01 90 FD | 	jmp	#LR__0462
05e40                 | LR__0415
05e40     92 7A 06 F6 | 	mov	result1, #146
05e44     6C 01 90 FD | 	jmp	#LR__0462
05e48                 | LR__0416
05e48     BE 7A 06 F6 | 	mov	result1, #190
05e4c     64 01 90 FD | 	jmp	#LR__0462
05e50                 | LR__0417
05e50     BE 7A 06 F6 | 	mov	result1, #190
05e54     5C 01 90 FD | 	jmp	#LR__0462
05e58                 | LR__0418
05e58     C7 7A 06 F6 | 	mov	result1, #199
05e5c     54 01 90 FD | 	jmp	#LR__0462
05e60                 | LR__0419
05e60     D4 7A 06 F6 | 	mov	result1, #212
05e64     4C 01 90 FD | 	jmp	#LR__0462
05e68                 | LR__0420
05e68     D4 7A 06 F6 | 	mov	result1, #212
05e6c     44 01 90 FD | 	jmp	#LR__0462
05e70                 | LR__0421
05e70     AA 7A 06 F6 | 	mov	result1, #170
05e74     3C 01 90 FD | 	jmp	#LR__0462
05e78                 | LR__0422
05e78     4D 7A 06 F6 | 	mov	result1, #77
05e7c     34 01 90 FD | 	jmp	#LR__0462
05e80                 | LR__0423
05e80     4D 7A 06 F6 | 	mov	result1, #77
05e84     2C 01 90 FD | 	jmp	#LR__0462
05e88                 | LR__0424
05e88     51 7A 06 F6 | 	mov	result1, #81
05e8c     24 01 90 FD | 	jmp	#LR__0462
05e90                 | LR__0425
05e90     51 7A 06 F6 | 	mov	result1, #81
05e94     1C 01 90 FD | 	jmp	#LR__0462
05e98                 | LR__0426
05e98     D2 7A 06 F6 | 	mov	result1, #210
05e9c     14 01 90 FD | 	jmp	#LR__0462
05ea0                 | LR__0427
05ea0     D2 7A 06 F6 | 	mov	result1, #210
05ea4     0C 01 90 FD | 	jmp	#LR__0462
05ea8                 | LR__0428
05ea8     DA 7A 06 F6 | 	mov	result1, #218
05eac     04 01 90 FD | 	jmp	#LR__0462
05eb0                 | LR__0429
05eb0     DA 7A 06 F6 | 	mov	result1, #218
05eb4     FC 00 90 FD | 	jmp	#LR__0462
05eb8                 | LR__0430
05eb8     8E 7A 06 F6 | 	mov	result1, #142
05ebc     F4 00 90 FD | 	jmp	#LR__0462
05ec0                 | LR__0431
05ec0     8E 7A 06 F6 | 	mov	result1, #142
05ec4     EC 00 90 FD | 	jmp	#LR__0462
05ec8                 | LR__0432
05ec8     90 7A 06 F6 | 	mov	result1, #144
05ecc     E4 00 90 FD | 	jmp	#LR__0462
05ed0                 | LR__0433
05ed0     90 7A 06 F6 | 	mov	result1, #144
05ed4     DC 00 90 FD | 	jmp	#LR__0462
05ed8                 | LR__0434
05ed8     8D 7A 06 F6 | 	mov	result1, #141
05edc     D4 00 90 FD | 	jmp	#LR__0462
05ee0                 | LR__0435
05ee0     8D 7A 06 F6 | 	mov	result1, #141
05ee4     CC 00 90 FD | 	jmp	#LR__0462
05ee8                 | LR__0436
05ee8     8C 7A 06 F6 | 	mov	result1, #140
05eec     C4 00 90 FD | 	jmp	#LR__0462
05ef0                 | LR__0437
05ef0     8C 7A 06 F6 | 	mov	result1, #140
05ef4     BC 00 90 FD | 	jmp	#LR__0462
05ef8                 | LR__0438
05ef8     91 7A 06 F6 | 	mov	result1, #145
05efc     B4 00 90 FD | 	jmp	#LR__0462
05f00                 | LR__0439
05f00     91 7A 06 F6 | 	mov	result1, #145
05f04     AC 00 90 FD | 	jmp	#LR__0462
05f08                 | LR__0440
05f08     8B 7A 06 F6 | 	mov	result1, #139
05f0c     A4 00 90 FD | 	jmp	#LR__0462
05f10                 | LR__0441
05f10     8B 7A 06 F6 | 	mov	result1, #139
05f14     9C 00 90 FD | 	jmp	#LR__0462
05f18                 | LR__0442
05f18     8F 7A 06 F6 | 	mov	result1, #143
05f1c     94 00 90 FD | 	jmp	#LR__0462
05f20                 | LR__0443
05f20     8F 7A 06 F6 | 	mov	result1, #143
05f24     8C 00 90 FD | 	jmp	#LR__0462
05f28                 | LR__0444
05f28     8F 7A 06 F6 | 	mov	result1, #143
05f2c     84 00 90 FD | 	jmp	#LR__0462
05f30                 | LR__0445
05f30     B2 7A 06 F6 | 	mov	result1, #178
05f34     7C 00 90 FD | 	jmp	#LR__0462
05f38                 | LR__0446
05f38     B2 7A 06 F6 | 	mov	result1, #178
05f3c     74 00 90 FD | 	jmp	#LR__0462
05f40                 | LR__0447
05f40     75 7A 06 F6 | 	mov	result1, #117
05f44     6C 00 90 FD | 	jmp	#LR__0462
05f48                 | LR__0448
05f48     75 7A 06 F6 | 	mov	result1, #117
05f4c     64 00 90 FD | 	jmp	#LR__0462
05f50                 | LR__0449
05f50     6D 7A 06 F6 | 	mov	result1, #109
05f54     5C 00 90 FD | 	jmp	#LR__0462
05f58                 | LR__0450
05f58     6D 7A 06 F6 | 	mov	result1, #109
05f5c     54 00 90 FD | 	jmp	#LR__0462
05f60                 | LR__0451
05f60     5B 7A 06 F6 | 	mov	result1, #91
05f64     4C 00 90 FD | 	jmp	#LR__0462
05f68                 | LR__0452
05f68     56 7A 06 F6 | 	mov	result1, #86
05f6c     44 00 90 FD | 	jmp	#LR__0462
05f70                 | LR__0453
05f70     56 7A 06 F6 | 	mov	result1, #86
05f74     3C 00 90 FD | 	jmp	#LR__0462
05f78                 | LR__0454
05f78     70 7A 06 F6 | 	mov	result1, #112
05f7c     34 00 90 FD | 	jmp	#LR__0462
05f80                 | LR__0455
05f80     70 7A 06 F6 | 	mov	result1, #112
05f84     2C 00 90 FD | 	jmp	#LR__0462
05f88                 | LR__0456
05f88     57 7A 06 F6 | 	mov	result1, #87
05f8c     24 00 90 FD | 	jmp	#LR__0462
05f90                 | LR__0457
05f90     57 7A 06 F6 | 	mov	result1, #87
05f94     1C 00 90 FD | 	jmp	#LR__0462
05f98                 | LR__0458
05f98     79 7A 06 F6 | 	mov	result1, #121
05f9c     14 00 90 FD | 	jmp	#LR__0462
05fa0                 | LR__0459
05fa0     77 7A 06 F6 | 	mov	result1, #119
05fa4     0C 00 90 FD | 	jmp	#LR__0462
05fa8                 | LR__0460
05fa8     78 7A 06 F6 | 	mov	result1, #120
05fac     04 00 90 FD | 	jmp	#LR__0462
05fb0                 | LR__0461
05fb0     00 7A 06 F6 | 	mov	result1, #0
05fb4                 | LR__0462
05fb4     E7 F0 03 F6 | 	mov	ptra, fp
05fb8     F2 00 A0 FD | 	call	#popregs_
05fbc                 | _iscommand_ret
05fbc     2D 00 64 FD | 	ret
05fc0                 | 
05fc0                 | ' 
05fc0                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05fc0                 | ' 
05fc0                 | ' function isfunction(s as string) as ubyte
05fc0                 | _isfunction
05fc0     01 CA 05 F6 | 	mov	COUNT_, #1
05fc4     E8 00 A0 FD | 	call	#pushregs_
05fc8                 | ' 
05fc8                 | ' select case s
05fc8     49 A7 02 F6 | 	mov	local01, arg01
05fcc     95 01 00 FF 
05fd0     C3 95 06 F6 | 	mov	arg02, ##@LR__5781
05fd4     53 93 02 F6 | 	mov	arg01, local01
05fd8     F0 EB B1 FD | 	call	#__system___string_cmp
05fdc     00 7A 0E F2 | 	cmp	result1, #0 wz
05fe0     EC 05 90 AD |  if_e	jmp	#LR__0470
05fe4     95 01 00 FF 
05fe8     C7 95 06 F6 | 	mov	arg02, ##@LR__5782
05fec     53 93 02 F6 | 	mov	arg01, local01
05ff0     D8 EB B1 FD | 	call	#__system___string_cmp
05ff4     00 7A 0E F2 | 	cmp	result1, #0 wz
05ff8     DC 05 90 AD |  if_e	jmp	#LR__0471
05ffc     95 01 00 FF 
06000     CC 95 06 F6 | 	mov	arg02, ##@LR__5783
06004     53 93 02 F6 | 	mov	arg01, local01
06008     C0 EB B1 FD | 	call	#__system___string_cmp
0600c     00 7A 0E F2 | 	cmp	result1, #0 wz
06010     CC 05 90 AD |  if_e	jmp	#LR__0472
06014     95 01 00 FF 
06018     D0 95 06 F6 | 	mov	arg02, ##@LR__5784
0601c     53 93 02 F6 | 	mov	arg01, local01
06020     A8 EB B1 FD | 	call	#__system___string_cmp
06024     00 7A 0E F2 | 	cmp	result1, #0 wz
06028     BC 05 90 AD |  if_e	jmp	#LR__0473
0602c     95 01 00 FF 
06030     D5 95 06 F6 | 	mov	arg02, ##@LR__5785
06034     53 93 02 F6 | 	mov	arg01, local01
06038     90 EB B1 FD | 	call	#__system___string_cmp
0603c     00 7A 0E F2 | 	cmp	result1, #0 wz
06040     AC 05 90 AD |  if_e	jmp	#LR__0474
06044     95 01 00 FF 
06048     D9 95 06 F6 | 	mov	arg02, ##@LR__5786
0604c     53 93 02 F6 | 	mov	arg01, local01
06050     78 EB B1 FD | 	call	#__system___string_cmp
06054     00 7A 0E F2 | 	cmp	result1, #0 wz
06058     9C 05 90 AD |  if_e	jmp	#LR__0475
0605c     95 01 00 FF 
06060     DE 95 06 F6 | 	mov	arg02, ##@LR__5787
06064     53 93 02 F6 | 	mov	arg01, local01
06068     60 EB B1 FD | 	call	#__system___string_cmp
0606c     00 7A 0E F2 | 	cmp	result1, #0 wz
06070     8C 05 90 AD |  if_e	jmp	#LR__0476
06074     95 01 00 FF 
06078     E2 95 06 F6 | 	mov	arg02, ##@LR__5788
0607c     53 93 02 F6 | 	mov	arg01, local01
06080     48 EB B1 FD | 	call	#__system___string_cmp
06084     00 7A 0E F2 | 	cmp	result1, #0 wz
06088     7C 05 90 AD |  if_e	jmp	#LR__0477
0608c     95 01 00 FF 
06090     E7 95 06 F6 | 	mov	arg02, ##@LR__5789
06094     53 93 02 F6 | 	mov	arg01, local01
06098     30 EB B1 FD | 	call	#__system___string_cmp
0609c     00 7A 0E F2 | 	cmp	result1, #0 wz
060a0     6C 05 90 AD |  if_e	jmp	#LR__0478
060a4     95 01 00 FF 
060a8     EC 95 06 F6 | 	mov	arg02, ##@LR__5790
060ac     53 93 02 F6 | 	mov	arg01, local01
060b0     18 EB B1 FD | 	call	#__system___string_cmp
060b4     00 7A 0E F2 | 	cmp	result1, #0 wz
060b8     5C 05 90 AD |  if_e	jmp	#LR__0479
060bc     95 01 00 FF 
060c0     F4 95 06 F6 | 	mov	arg02, ##@LR__5791
060c4     53 93 02 F6 | 	mov	arg01, local01
060c8     00 EB B1 FD | 	call	#__system___string_cmp
060cc     00 7A 0E F2 | 	cmp	result1, #0 wz
060d0     4C 05 90 AD |  if_e	jmp	#LR__0480
060d4     95 01 00 FF 
060d8     F8 95 06 F6 | 	mov	arg02, ##@LR__5792
060dc     53 93 02 F6 | 	mov	arg01, local01
060e0     E8 EA B1 FD | 	call	#__system___string_cmp
060e4     00 7A 0E F2 | 	cmp	result1, #0 wz
060e8     3C 05 90 AD |  if_e	jmp	#LR__0481
060ec     95 01 00 FF 
060f0     FE 95 06 F6 | 	mov	arg02, ##@LR__5793
060f4     53 93 02 F6 | 	mov	arg01, local01
060f8     D0 EA B1 FD | 	call	#__system___string_cmp
060fc     00 7A 0E F2 | 	cmp	result1, #0 wz
06100     2C 05 90 AD |  if_e	jmp	#LR__0482
06104     96 01 00 FF 
06108     08 94 06 F6 | 	mov	arg02, ##@LR__5794
0610c     53 93 02 F6 | 	mov	arg01, local01
06110     B8 EA B1 FD | 	call	#__system___string_cmp
06114     00 7A 0E F2 | 	cmp	result1, #0 wz
06118     1C 05 90 AD |  if_e	jmp	#LR__0483
0611c     96 01 00 FF 
06120     11 94 06 F6 | 	mov	arg02, ##@LR__5795
06124     53 93 02 F6 | 	mov	arg01, local01
06128     A0 EA B1 FD | 	call	#__system___string_cmp
0612c     00 7A 0E F2 | 	cmp	result1, #0 wz
06130     0C 05 90 AD |  if_e	jmp	#LR__0484
06134     96 01 00 FF 
06138     1A 94 06 F6 | 	mov	arg02, ##@LR__5796
0613c     53 93 02 F6 | 	mov	arg01, local01
06140     88 EA B1 FD | 	call	#__system___string_cmp
06144     00 7A 0E F2 | 	cmp	result1, #0 wz
06148     FC 04 90 AD |  if_e	jmp	#LR__0485
0614c     96 01 00 FF 
06150     1E 94 06 F6 | 	mov	arg02, ##@LR__5797
06154     53 93 02 F6 | 	mov	arg01, local01
06158     70 EA B1 FD | 	call	#__system___string_cmp
0615c     00 7A 0E F2 | 	cmp	result1, #0 wz
06160     EC 04 90 AD |  if_e	jmp	#LR__0486
06164     96 01 00 FF 
06168     22 94 06 F6 | 	mov	arg02, ##@LR__5798
0616c     53 93 02 F6 | 	mov	arg01, local01
06170     58 EA B1 FD | 	call	#__system___string_cmp
06174     00 7A 0E F2 | 	cmp	result1, #0 wz
06178     DC 04 90 AD |  if_e	jmp	#LR__0487
0617c     96 01 00 FF 
06180     26 94 06 F6 | 	mov	arg02, ##@LR__5799
06184     53 93 02 F6 | 	mov	arg01, local01
06188     40 EA B1 FD | 	call	#__system___string_cmp
0618c     00 7A 0E F2 | 	cmp	result1, #0 wz
06190     CC 04 90 AD |  if_e	jmp	#LR__0488
06194     96 01 00 FF 
06198     2F 94 06 F6 | 	mov	arg02, ##@LR__5800
0619c     53 93 02 F6 | 	mov	arg01, local01
061a0     28 EA B1 FD | 	call	#__system___string_cmp
061a4     00 7A 0E F2 | 	cmp	result1, #0 wz
061a8     BC 04 90 AD |  if_e	jmp	#LR__0489
061ac     96 01 00 FF 
061b0     38 94 06 F6 | 	mov	arg02, ##@LR__5801
061b4     53 93 02 F6 | 	mov	arg01, local01
061b8     10 EA B1 FD | 	call	#__system___string_cmp
061bc     00 7A 0E F2 | 	cmp	result1, #0 wz
061c0     AC 04 90 AD |  if_e	jmp	#LR__0490
061c4     96 01 00 FF 
061c8     3C 94 06 F6 | 	mov	arg02, ##@LR__5802
061cc     53 93 02 F6 | 	mov	arg01, local01
061d0     F8 E9 B1 FD | 	call	#__system___string_cmp
061d4     00 7A 0E F2 | 	cmp	result1, #0 wz
061d8     9C 04 90 AD |  if_e	jmp	#LR__0491
061dc     96 01 00 FF 
061e0     4A 94 06 F6 | 	mov	arg02, ##@LR__5803
061e4     53 93 02 F6 | 	mov	arg01, local01
061e8     E0 E9 B1 FD | 	call	#__system___string_cmp
061ec     00 7A 0E F2 | 	cmp	result1, #0 wz
061f0     8C 04 90 AD |  if_e	jmp	#LR__0492
061f4     96 01 00 FF 
061f8     57 94 06 F6 | 	mov	arg02, ##@LR__5804
061fc     53 93 02 F6 | 	mov	arg01, local01
06200     C8 E9 B1 FD | 	call	#__system___string_cmp
06204     00 7A 0E F2 | 	cmp	result1, #0 wz
06208     7C 04 90 AD |  if_e	jmp	#LR__0493
0620c     96 01 00 FF 
06210     63 94 06 F6 | 	mov	arg02, ##@LR__5805
06214     53 93 02 F6 | 	mov	arg01, local01
06218     B0 E9 B1 FD | 	call	#__system___string_cmp
0621c     00 7A 0E F2 | 	cmp	result1, #0 wz
06220     6C 04 90 AD |  if_e	jmp	#LR__0494
06224     96 01 00 FF 
06228     6B 94 06 F6 | 	mov	arg02, ##@LR__5806
0622c     53 93 02 F6 | 	mov	arg01, local01
06230     98 E9 B1 FD | 	call	#__system___string_cmp
06234     00 7A 0E F2 | 	cmp	result1, #0 wz
06238     5C 04 90 AD |  if_e	jmp	#LR__0495
0623c     96 01 00 FF 
06240     6F 94 06 F6 | 	mov	arg02, ##@LR__5807
06244     53 93 02 F6 | 	mov	arg01, local01
06248     80 E9 B1 FD | 	call	#__system___string_cmp
0624c     00 7A 0E F2 | 	cmp	result1, #0 wz
06250     4C 04 90 AD |  if_e	jmp	#LR__0496
06254     96 01 00 FF 
06258     74 94 06 F6 | 	mov	arg02, ##@LR__5808
0625c     53 93 02 F6 | 	mov	arg01, local01
06260     68 E9 B1 FD | 	call	#__system___string_cmp
06264     00 7A 0E F2 | 	cmp	result1, #0 wz
06268     3C 04 90 AD |  if_e	jmp	#LR__0497
0626c     96 01 00 FF 
06270     7B 94 06 F6 | 	mov	arg02, ##@LR__5809
06274     53 93 02 F6 | 	mov	arg01, local01
06278     50 E9 B1 FD | 	call	#__system___string_cmp
0627c     00 7A 0E F2 | 	cmp	result1, #0 wz
06280     2C 04 90 AD |  if_e	jmp	#LR__0498
06284     96 01 00 FF 
06288     7F 94 06 F6 | 	mov	arg02, ##@LR__5810
0628c     53 93 02 F6 | 	mov	arg01, local01
06290     38 E9 B1 FD | 	call	#__system___string_cmp
06294     00 7A 0E F2 | 	cmp	result1, #0 wz
06298     1C 04 90 AD |  if_e	jmp	#LR__0499
0629c     96 01 00 FF 
062a0     85 94 06 F6 | 	mov	arg02, ##@LR__5811
062a4     53 93 02 F6 | 	mov	arg01, local01
062a8     20 E9 B1 FD | 	call	#__system___string_cmp
062ac     00 7A 0E F2 | 	cmp	result1, #0 wz
062b0     0C 04 90 AD |  if_e	jmp	#LR__0500
062b4     96 01 00 FF 
062b8     89 94 06 F6 | 	mov	arg02, ##@LR__5812
062bc     53 93 02 F6 | 	mov	arg01, local01
062c0     08 E9 B1 FD | 	call	#__system___string_cmp
062c4     00 7A 0E F2 | 	cmp	result1, #0 wz
062c8     FC 03 90 AD |  if_e	jmp	#LR__0501
062cc     96 01 00 FF 
062d0     8D 94 06 F6 | 	mov	arg02, ##@LR__5813
062d4     53 93 02 F6 | 	mov	arg01, local01
062d8     F0 E8 B1 FD | 	call	#__system___string_cmp
062dc     00 7A 0E F2 | 	cmp	result1, #0 wz
062e0     EC 03 90 AD |  if_e	jmp	#LR__0502
062e4     96 01 00 FF 
062e8     93 94 06 F6 | 	mov	arg02, ##@LR__5814
062ec     53 93 02 F6 | 	mov	arg01, local01
062f0     D8 E8 B1 FD | 	call	#__system___string_cmp
062f4     00 7A 0E F2 | 	cmp	result1, #0 wz
062f8     DC 03 90 AD |  if_e	jmp	#LR__0503
062fc     96 01 00 FF 
06300     9A 94 06 F6 | 	mov	arg02, ##@LR__5815
06304     53 93 02 F6 | 	mov	arg01, local01
06308     C0 E8 B1 FD | 	call	#__system___string_cmp
0630c     00 7A 0E F2 | 	cmp	result1, #0 wz
06310     CC 03 90 AD |  if_e	jmp	#LR__0504
06314     96 01 00 FF 
06318     A0 94 06 F6 | 	mov	arg02, ##@LR__5816
0631c     53 93 02 F6 | 	mov	arg01, local01
06320     A8 E8 B1 FD | 	call	#__system___string_cmp
06324     00 7A 0E F2 | 	cmp	result1, #0 wz
06328     BC 03 90 AD |  if_e	jmp	#LR__0505
0632c     96 01 00 FF 
06330     A5 94 06 F6 | 	mov	arg02, ##@LR__5817
06334     53 93 02 F6 | 	mov	arg01, local01
06338     90 E8 B1 FD | 	call	#__system___string_cmp
0633c     00 7A 0E F2 | 	cmp	result1, #0 wz
06340     AC 03 90 AD |  if_e	jmp	#LR__0506
06344     96 01 00 FF 
06348     AC 94 06 F6 | 	mov	arg02, ##@LR__5818
0634c     53 93 02 F6 | 	mov	arg01, local01
06350     78 E8 B1 FD | 	call	#__system___string_cmp
06354     00 7A 0E F2 | 	cmp	result1, #0 wz
06358     9C 03 90 AD |  if_e	jmp	#LR__0507
0635c     96 01 00 FF 
06360     B3 94 06 F6 | 	mov	arg02, ##@LR__5819
06364     53 93 02 F6 | 	mov	arg01, local01
06368     60 E8 B1 FD | 	call	#__system___string_cmp
0636c     00 7A 0E F2 | 	cmp	result1, #0 wz
06370     8C 03 90 AD |  if_e	jmp	#LR__0508
06374     96 01 00 FF 
06378     BA 94 06 F6 | 	mov	arg02, ##@LR__5820
0637c     53 93 02 F6 | 	mov	arg01, local01
06380     48 E8 B1 FD | 	call	#__system___string_cmp
06384     00 7A 0E F2 | 	cmp	result1, #0 wz
06388     7C 03 90 AD |  if_e	jmp	#LR__0509
0638c     96 01 00 FF 
06390     C1 94 06 F6 | 	mov	arg02, ##@LR__5821
06394     53 93 02 F6 | 	mov	arg01, local01
06398     30 E8 B1 FD | 	call	#__system___string_cmp
0639c     00 7A 0E F2 | 	cmp	result1, #0 wz
063a0     6C 03 90 AD |  if_e	jmp	#LR__0510
063a4     96 01 00 FF 
063a8     C6 94 06 F6 | 	mov	arg02, ##@LR__5822
063ac     53 93 02 F6 | 	mov	arg01, local01
063b0     18 E8 B1 FD | 	call	#__system___string_cmp
063b4     00 7A 0E F2 | 	cmp	result1, #0 wz
063b8     5C 03 90 AD |  if_e	jmp	#LR__0511
063bc     96 01 00 FF 
063c0     CB 94 06 F6 | 	mov	arg02, ##@LR__5823
063c4     53 93 02 F6 | 	mov	arg01, local01
063c8     00 E8 B1 FD | 	call	#__system___string_cmp
063cc     00 7A 0E F2 | 	cmp	result1, #0 wz
063d0     4C 03 90 AD |  if_e	jmp	#LR__0512
063d4     96 01 00 FF 
063d8     D0 94 06 F6 | 	mov	arg02, ##@LR__5824
063dc     53 93 02 F6 | 	mov	arg01, local01
063e0     E8 E7 B1 FD | 	call	#__system___string_cmp
063e4     00 7A 0E F2 | 	cmp	result1, #0 wz
063e8     3C 03 90 AD |  if_e	jmp	#LR__0513
063ec     96 01 00 FF 
063f0     D5 94 06 F6 | 	mov	arg02, ##@LR__5825
063f4     53 93 02 F6 | 	mov	arg01, local01
063f8     D0 E7 B1 FD | 	call	#__system___string_cmp
063fc     00 7A 0E F2 | 	cmp	result1, #0 wz
06400     2C 03 90 AD |  if_e	jmp	#LR__0514
06404     96 01 00 FF 
06408     DA 94 06 F6 | 	mov	arg02, ##@LR__5826
0640c     53 93 02 F6 | 	mov	arg01, local01
06410     B8 E7 B1 FD | 	call	#__system___string_cmp
06414     00 7A 0E F2 | 	cmp	result1, #0 wz
06418     1C 03 90 AD |  if_e	jmp	#LR__0515
0641c     96 01 00 FF 
06420     E0 94 06 F6 | 	mov	arg02, ##@LR__5827
06424     53 93 02 F6 | 	mov	arg01, local01
06428     A0 E7 B1 FD | 	call	#__system___string_cmp
0642c     00 7A 0E F2 | 	cmp	result1, #0 wz
06430     0C 03 90 AD |  if_e	jmp	#LR__0516
06434     96 01 00 FF 
06438     E6 94 06 F6 | 	mov	arg02, ##@LR__5828
0643c     53 93 02 F6 | 	mov	arg01, local01
06440     88 E7 B1 FD | 	call	#__system___string_cmp
06444     00 7A 0E F2 | 	cmp	result1, #0 wz
06448     FC 02 90 AD |  if_e	jmp	#LR__0517
0644c     96 01 00 FF 
06450     EC 94 06 F6 | 	mov	arg02, ##@LR__5829
06454     53 93 02 F6 | 	mov	arg01, local01
06458     70 E7 B1 FD | 	call	#__system___string_cmp
0645c     00 7A 0E F2 | 	cmp	result1, #0 wz
06460     EC 02 90 AD |  if_e	jmp	#LR__0518
06464     96 01 00 FF 
06468     F1 94 06 F6 | 	mov	arg02, ##@LR__5830
0646c     53 93 02 F6 | 	mov	arg01, local01
06470     58 E7 B1 FD | 	call	#__system___string_cmp
06474     00 7A 0E F2 | 	cmp	result1, #0 wz
06478     DC 02 90 AD |  if_e	jmp	#LR__0519
0647c     96 01 00 FF 
06480     F6 94 06 F6 | 	mov	arg02, ##@LR__5831
06484     53 93 02 F6 | 	mov	arg01, local01
06488     40 E7 B1 FD | 	call	#__system___string_cmp
0648c     00 7A 0E F2 | 	cmp	result1, #0 wz
06490     CC 02 90 AD |  if_e	jmp	#LR__0520
06494     96 01 00 FF 
06498     FE 94 06 F6 | 	mov	arg02, ##@LR__5832
0649c     53 93 02 F6 | 	mov	arg01, local01
064a0     28 E7 B1 FD | 	call	#__system___string_cmp
064a4     00 7A 0E F2 | 	cmp	result1, #0 wz
064a8     BC 02 90 AD |  if_e	jmp	#LR__0521
064ac     96 01 00 FF 
064b0     04 95 06 F6 | 	mov	arg02, ##@LR__5833
064b4     53 93 02 F6 | 	mov	arg01, local01
064b8     10 E7 B1 FD | 	call	#__system___string_cmp
064bc     00 7A 0E F2 | 	cmp	result1, #0 wz
064c0     AC 02 90 AD |  if_e	jmp	#LR__0522
064c4     96 01 00 FF 
064c8     0B 95 06 F6 | 	mov	arg02, ##@LR__5834
064cc     53 93 02 F6 | 	mov	arg01, local01
064d0     F8 E6 B1 FD | 	call	#__system___string_cmp
064d4     00 7A 0E F2 | 	cmp	result1, #0 wz
064d8     9C 02 90 AD |  if_e	jmp	#LR__0523
064dc     96 01 00 FF 
064e0     11 95 06 F6 | 	mov	arg02, ##@LR__5835
064e4     53 93 02 F6 | 	mov	arg01, local01
064e8     E0 E6 B1 FD | 	call	#__system___string_cmp
064ec     00 7A 0E F2 | 	cmp	result1, #0 wz
064f0     8C 02 90 AD |  if_e	jmp	#LR__0524
064f4     96 01 00 FF 
064f8     17 95 06 F6 | 	mov	arg02, ##@LR__5836
064fc     53 93 02 F6 | 	mov	arg01, local01
06500     C8 E6 B1 FD | 	call	#__system___string_cmp
06504     00 7A 0E F2 | 	cmp	result1, #0 wz
06508     7C 02 90 AD |  if_e	jmp	#LR__0525
0650c     96 01 00 FF 
06510     1B 95 06 F6 | 	mov	arg02, ##@LR__5837
06514     53 93 02 F6 | 	mov	arg01, local01
06518     B0 E6 B1 FD | 	call	#__system___string_cmp
0651c     00 7A 0E F2 | 	cmp	result1, #0 wz
06520     6C 02 90 AD |  if_e	jmp	#LR__0526
06524     96 01 00 FF 
06528     1F 95 06 F6 | 	mov	arg02, ##@LR__5838
0652c     53 93 02 F6 | 	mov	arg01, local01
06530     98 E6 B1 FD | 	call	#__system___string_cmp
06534     00 7A 0E F2 | 	cmp	result1, #0 wz
06538     5C 02 90 AD |  if_e	jmp	#LR__0527
0653c     96 01 00 FF 
06540     23 95 06 F6 | 	mov	arg02, ##@LR__5839
06544     53 93 02 F6 | 	mov	arg01, local01
06548     80 E6 B1 FD | 	call	#__system___string_cmp
0654c     00 7A 0E F2 | 	cmp	result1, #0 wz
06550     4C 02 90 AD |  if_e	jmp	#LR__0528
06554     96 01 00 FF 
06558     29 95 06 F6 | 	mov	arg02, ##@LR__5840
0655c     53 93 02 F6 | 	mov	arg01, local01
06560     68 E6 B1 FD | 	call	#__system___string_cmp
06564     00 7A 0E F2 | 	cmp	result1, #0 wz
06568     3C 02 90 AD |  if_e	jmp	#LR__0529
0656c     96 01 00 FF 
06570     2F 95 06 F6 | 	mov	arg02, ##@LR__5841
06574     53 93 02 F6 | 	mov	arg01, local01
06578     50 E6 B1 FD | 	call	#__system___string_cmp
0657c     00 7A 0E F2 | 	cmp	result1, #0 wz
06580     2C 02 90 AD |  if_e	jmp	#LR__0530
06584     96 01 00 FF 
06588     34 95 06 F6 | 	mov	arg02, ##@LR__5842
0658c     53 93 02 F6 | 	mov	arg01, local01
06590     38 E6 B1 FD | 	call	#__system___string_cmp
06594     00 7A 0E F2 | 	cmp	result1, #0 wz
06598     1C 02 90 AD |  if_e	jmp	#LR__0531
0659c     96 01 00 FF 
065a0     38 95 06 F6 | 	mov	arg02, ##@LR__5843
065a4     53 93 02 F6 | 	mov	arg01, local01
065a8     20 E6 B1 FD | 	call	#__system___string_cmp
065ac     00 7A 0E F2 | 	cmp	result1, #0 wz
065b0     0C 02 90 AD |  if_e	jmp	#LR__0532
065b4     96 01 00 FF 
065b8     3C 95 06 F6 | 	mov	arg02, ##@LR__5844
065bc     53 93 02 F6 | 	mov	arg01, local01
065c0     08 E6 B1 FD | 	call	#__system___string_cmp
065c4     00 7A 0E F2 | 	cmp	result1, #0 wz
065c8     FC 01 90 AD |  if_e	jmp	#LR__0533
065cc     00 02 90 FD | 	jmp	#LR__0534
065d0                 | LR__0470
065d0     9E 7A 06 F6 | 	mov	result1, #158
065d4     FC 01 90 FD | 	jmp	#LR__0535
065d8                 | LR__0471
065d8     85 7A 06 F6 | 	mov	result1, #133
065dc     F4 01 90 FD | 	jmp	#LR__0535
065e0                 | LR__0472
065e0     9B 7A 06 F6 | 	mov	result1, #155
065e4     EC 01 90 FD | 	jmp	#LR__0535
065e8                 | LR__0473
065e8     9B 7A 06 F6 | 	mov	result1, #155
065ec     E4 01 90 FD | 	jmp	#LR__0535
065f0                 | LR__0474
065f0     A7 7A 06 F6 | 	mov	result1, #167
065f4     DC 01 90 FD | 	jmp	#LR__0535
065f8                 | LR__0475
065f8     84 7A 06 F6 | 	mov	result1, #132
065fc     D4 01 90 FD | 	jmp	#LR__0535
06600                 | LR__0476
06600     86 7A 06 F6 | 	mov	result1, #134
06604     CC 01 90 FD | 	jmp	#LR__0535
06608                 | LR__0477
06608     A2 7A 06 F6 | 	mov	result1, #162
0660c     C4 01 90 FD | 	jmp	#LR__0535
06610                 | LR__0478
06610     9F 7A 06 F6 | 	mov	result1, #159
06614     BC 01 90 FD | 	jmp	#LR__0535
06618                 | LR__0479
06618     C0 7A 06 F6 | 	mov	result1, #192
0661c     B4 01 90 FD | 	jmp	#LR__0535
06620                 | LR__0480
06620     82 7A 06 F6 | 	mov	result1, #130
06624     AC 01 90 FD | 	jmp	#LR__0535
06628                 | LR__0481
06628     99 7A 06 F6 | 	mov	result1, #153
0662c     A4 01 90 FD | 	jmp	#LR__0535
06630                 | LR__0482
06630     D7 7A 06 F6 | 	mov	result1, #215
06634     9C 01 90 FD | 	jmp	#LR__0535
06638                 | LR__0483
06638     D8 7A 06 F6 | 	mov	result1, #216
0663c     94 01 90 FD | 	jmp	#LR__0535
06640                 | LR__0484
06640     C5 7A 06 F6 | 	mov	result1, #197
06644     8C 01 90 FD | 	jmp	#LR__0535
06648                 | LR__0485
06648     C5 7A 06 F6 | 	mov	result1, #197
0664c     84 01 90 FD | 	jmp	#LR__0535
06650                 | LR__0486
06650     9C 7A 06 F6 | 	mov	result1, #156
06654     7C 01 90 FD | 	jmp	#LR__0535
06658                 | LR__0487
06658     D3 7A 06 F6 | 	mov	result1, #211
0665c     74 01 90 FD | 	jmp	#LR__0535
06660                 | LR__0488
06660     D3 7A 06 F6 | 	mov	result1, #211
06664     6C 01 90 FD | 	jmp	#LR__0535
06668                 | LR__0489
06668     6F 7A 06 F6 | 	mov	result1, #111
0666c     64 01 90 FD | 	jmp	#LR__0535
06670                 | LR__0490
06670     6F 7A 06 F6 | 	mov	result1, #111
06674     5C 01 90 FD | 	jmp	#LR__0535
06678                 | LR__0491
06678     93 7A 06 F6 | 	mov	result1, #147
0667c     54 01 90 FD | 	jmp	#LR__0535
06680                 | LR__0492
06680     94 7A 06 F6 | 	mov	result1, #148
06684     4C 01 90 FD | 	jmp	#LR__0535
06688                 | LR__0493
06688     DB 7A 06 F6 | 	mov	result1, #219
0668c     44 01 90 FD | 	jmp	#LR__0535
06690                 | LR__0494
06690     62 7A 06 F6 | 	mov	result1, #98
06694     3C 01 90 FD | 	jmp	#LR__0535
06698                 | LR__0495
06698     62 7A 06 F6 | 	mov	result1, #98
0669c     34 01 90 FD | 	jmp	#LR__0535
066a0                 | LR__0496
066a0     A3 7A 06 F6 | 	mov	result1, #163
066a4     2C 01 90 FD | 	jmp	#LR__0535
066a8                 | LR__0497
066a8     9D 7A 06 F6 | 	mov	result1, #157
066ac     24 01 90 FD | 	jmp	#LR__0535
066b0                 | LR__0498
066b0     8A 7A 06 F6 | 	mov	result1, #138
066b4     1C 01 90 FD | 	jmp	#LR__0535
066b8                 | LR__0499
066b8     A4 7A 06 F6 | 	mov	result1, #164
066bc     14 01 90 FD | 	jmp	#LR__0535
066c0                 | LR__0500
066c0     A8 7A 06 F6 | 	mov	result1, #168
066c4     0C 01 90 FD | 	jmp	#LR__0535
066c8                 | LR__0501
066c8     AD 7A 06 F6 | 	mov	result1, #173
066cc     04 01 90 FD | 	jmp	#LR__0535
066d0                 | LR__0502
066d0     9A 7A 06 F6 | 	mov	result1, #154
066d4     FC 00 90 FD | 	jmp	#LR__0535
066d8                 | LR__0503
066d8     D1 7A 06 F6 | 	mov	result1, #209
066dc     F4 00 90 FD | 	jmp	#LR__0535
066e0                 | LR__0504
066e0     D0 7A 06 F6 | 	mov	result1, #208
066e4     EC 00 90 FD | 	jmp	#LR__0535
066e8                 | LR__0505
066e8     A6 7A 06 F6 | 	mov	result1, #166
066ec     E4 00 90 FD | 	jmp	#LR__0535
066f0                 | LR__0506
066f0     66 7A 06 F6 | 	mov	result1, #102
066f4     DC 00 90 FD | 	jmp	#LR__0535
066f8                 | LR__0507
066f8     67 7A 06 F6 | 	mov	result1, #103
066fc     D4 00 90 FD | 	jmp	#LR__0535
06700                 | LR__0508
06700     64 7A 06 F6 | 	mov	result1, #100
06704     CC 00 90 FD | 	jmp	#LR__0535
06708                 | LR__0509
06708     65 7A 06 F6 | 	mov	result1, #101
0670c     C4 00 90 FD | 	jmp	#LR__0535
06710                 | LR__0510
06710     D5 7A 06 F6 | 	mov	result1, #213
06714     BC 00 90 FD | 	jmp	#LR__0535
06718                 | LR__0511
06718     D6 7A 06 F6 | 	mov	result1, #214
0671c     B4 00 90 FD | 	jmp	#LR__0535
06720                 | LR__0512
06720     C8 7A 06 F6 | 	mov	result1, #200
06724     AC 00 90 FD | 	jmp	#LR__0535
06728                 | LR__0513
06728     C9 7A 06 F6 | 	mov	result1, #201
0672c     A4 00 90 FD | 	jmp	#LR__0535
06730                 | LR__0514
06730     CA 7A 06 F6 | 	mov	result1, #202
06734     9C 00 90 FD | 	jmp	#LR__0535
06738                 | LR__0515
06738     CC 7A 06 F6 | 	mov	result1, #204
0673c     94 00 90 FD | 	jmp	#LR__0535
06740                 | LR__0516
06740     CD 7A 06 F6 | 	mov	result1, #205
06744     8C 00 90 FD | 	jmp	#LR__0535
06748                 | LR__0517
06748     CE 7A 06 F6 | 	mov	result1, #206
0674c     84 00 90 FD | 	jmp	#LR__0535
06750                 | LR__0518
06750     CB 7A 06 F6 | 	mov	result1, #203
06754     7C 00 90 FD | 	jmp	#LR__0535
06758                 | LR__0519
06758     98 7A 06 F6 | 	mov	result1, #152
0675c     74 00 90 FD | 	jmp	#LR__0535
06760                 | LR__0520
06760     7B 7A 06 F6 | 	mov	result1, #123
06764     6C 00 90 FD | 	jmp	#LR__0535
06768                 | LR__0521
06768     76 7A 06 F6 | 	mov	result1, #118
0676c     64 00 90 FD | 	jmp	#LR__0535
06770                 | LR__0522
06770     A5 7A 06 F6 | 	mov	result1, #165
06774     5C 00 90 FD | 	jmp	#LR__0535
06778                 | LR__0523
06778     7A 7A 06 F6 | 	mov	result1, #122
0677c     54 00 90 FD | 	jmp	#LR__0535
06780                 | LR__0524
06780     BF 7A 06 F6 | 	mov	result1, #191
06784     4C 00 90 FD | 	jmp	#LR__0535
06788                 | LR__0525
06788     54 7A 06 F6 | 	mov	result1, #84
0678c     44 00 90 FD | 	jmp	#LR__0535
06790                 | LR__0526
06790     6B 7A 06 F6 | 	mov	result1, #107
06794     3C 00 90 FD | 	jmp	#LR__0535
06798                 | LR__0527
06798     87 7A 06 F6 | 	mov	result1, #135
0679c     34 00 90 FD | 	jmp	#LR__0535
067a0                 | LR__0528
067a0     6A 7A 06 F6 | 	mov	result1, #106
067a4     2C 00 90 FD | 	jmp	#LR__0535
067a8                 | LR__0529
067a8     6E 7A 06 F6 | 	mov	result1, #110
067ac     24 00 90 FD | 	jmp	#LR__0535
067b0                 | LR__0530
067b0     A1 7A 06 F6 | 	mov	result1, #161
067b4     1C 00 90 FD | 	jmp	#LR__0535
067b8                 | LR__0531
067b8     83 7A 06 F6 | 	mov	result1, #131
067bc     14 00 90 FD | 	jmp	#LR__0535
067c0                 | LR__0532
067c0     A0 7A 06 F6 | 	mov	result1, #160
067c4     0C 00 90 FD | 	jmp	#LR__0535
067c8                 | LR__0533
067c8     9B 7A 06 F6 | 	mov	result1, #155
067cc     04 00 90 FD | 	jmp	#LR__0535
067d0                 | LR__0534
067d0     00 7A 06 F6 | 	mov	result1, #0
067d4                 | LR__0535
067d4     E7 F0 03 F6 | 	mov	ptra, fp
067d8     F2 00 A0 FD | 	call	#popregs_
067dc                 | _isfunction_ret
067dc     2D 00 64 FD | 	ret
067e0                 | 
067e0                 | ' 
067e0                 | ' ' Check if the part is a name
067e0                 | ' 
067e0                 | ' function isname(s as string) as boolean
067e0                 | _isname
067e0     0D CA 05 F6 | 	mov	COUNT_, #13
067e4     E8 00 A0 FD | 	call	#pushregs_
067e8     49 A7 02 F6 | 	mov	local01, arg01
067ec     49 A9 02 F6 | 	mov	local02, arg01
067f0     D7 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
067f4                 | LR__0540
067f4     54 7B CA FA | 	rdbyte	result1, local02 wz
067f8     01 A8 06 51 |  if_ne	add	local02, #1
067fc     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06800                 | LR__0541
06800     49 A9 82 F1 | 	sub	local02, arg01
06804     54 7B 02 F6 | 	mov	result1, local02
06808     3D AB 0A F6 | 	mov	local03, result1 wz
0680c     00 7A 06 A6 |  if_e	mov	result1, #0
06810     34 02 90 AD |  if_e	jmp	#LR__0553
06814     53 93 02 F6 | 	mov	arg01, local01
06818     01 94 06 F6 | 	mov	arg02, #1
0681c     01 96 06 F6 | 	mov	arg03, #1
06820     40 FD B1 FD | 	call	#__system__Mid_S
06824     3D AD 02 F6 | 	mov	local04, result1
06828                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
06828     96 01 00 FF 
0682c     43 95 06 F6 | 	mov	arg02, ##@LR__5845
06830     56 93 02 F6 | 	mov	arg01, local04
06834     94 E3 B1 FD | 	call	#__system___string_cmp
06838     00 7A 56 F2 | 	cmps	result1, #0 wc
0683c     18 00 90 CD |  if_b	jmp	#LR__0542
06840     96 01 00 FF 
06844     45 95 06 F6 | 	mov	arg02, ##@LR__5846
06848     56 93 02 F6 | 	mov	arg01, local04
0684c     7C E3 B1 FD | 	call	#__system___string_cmp
06850     01 7A 56 F2 | 	cmps	result1, #1 wc
06854     1C 00 90 CD |  if_b	jmp	#LR__0543
06858                 | LR__0542
06858     96 01 00 FF 
0685c     47 95 06 F6 | 	mov	arg02, ##@LR__5847
06860     56 93 02 F6 | 	mov	arg01, local04
06864     64 E3 B1 FD | 	call	#__system___string_cmp
06868     00 7A 0E F2 | 	cmp	result1, #0 wz
0686c     00 7A 06 56 |  if_ne	mov	result1, #0
06870     D4 01 90 5D |  if_ne	jmp	#LR__0553
06874                 | LR__0543
06874                 | ' if l>2 then 
06874     03 AA 56 F2 | 	cmps	local03, #3 wc
06878     C8 01 90 CD |  if_b	jmp	#LR__0552
0687c                 | '   for i=2 to l
0687c     02 AE 06 F6 | 	mov	local05, #2
06880     55 B1 02 F6 | 	mov	local06, local03
06884     01 B0 06 F1 | 	add	local06, #1
06888                 | LR__0544
06888     58 AF 52 F2 | 	cmps	local05, local06 wc
0688c     B4 01 90 3D |  if_ae	jmp	#LR__0551
06890     53 93 02 F6 | 	mov	arg01, local01
06894     57 95 02 F6 | 	mov	arg02, local05
06898     01 96 06 F6 | 	mov	arg03, #1
0689c     C4 FC B1 FD | 	call	#__system__Mid_S
068a0     3D AD 02 F6 | 	mov	local04, result1
068a4                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
068a4     55 AF 52 F2 | 	cmps	local05, local03 wc
068a8     9C 00 90 3D |  if_ae	jmp	#LR__0547
068ac     96 01 00 FF 
068b0     49 95 06 F6 | 	mov	arg02, ##@LR__5848
068b4     56 93 02 F6 | 	mov	arg01, local04
068b8     10 E3 B1 FD | 	call	#__system___string_cmp
068bc     00 7A 56 F2 | 	cmps	result1, #0 wc
068c0     18 00 90 CD |  if_b	jmp	#LR__0545
068c4     96 01 00 FF 
068c8     4B 95 06 F6 | 	mov	arg02, ##@LR__5849
068cc     56 93 02 F6 | 	mov	arg01, local04
068d0     F8 E2 B1 FD | 	call	#__system___string_cmp
068d4     01 7A 56 F2 | 	cmps	result1, #1 wc
068d8     6C 00 90 CD |  if_b	jmp	#LR__0547
068dc                 | LR__0545
068dc     96 01 00 FF 
068e0     4D 95 06 F6 | 	mov	arg02, ##@LR__5850
068e4     56 93 02 F6 | 	mov	arg01, local04
068e8     E0 E2 B1 FD | 	call	#__system___string_cmp
068ec     00 7A 56 F2 | 	cmps	result1, #0 wc
068f0     18 00 90 CD |  if_b	jmp	#LR__0546
068f4     96 01 00 FF 
068f8     4F 95 06 F6 | 	mov	arg02, ##@LR__5851
068fc     56 93 02 F6 | 	mov	arg01, local04
06900     C8 E2 B1 FD | 	call	#__system___string_cmp
06904     01 7A 56 F2 | 	cmps	result1, #1 wc
06908     3C 00 90 CD |  if_b	jmp	#LR__0547
0690c                 | LR__0546
0690c     96 01 00 FF 
06910     51 B3 06 F6 | 	mov	local07, ##@LR__5852
06914     56 93 02 F6 | 	mov	arg01, local04
06918     59 95 02 F6 | 	mov	arg02, local07
0691c     AC E2 B1 FD | 	call	#__system___string_cmp
06920     00 7A 0E F2 | 	cmp	result1, #0 wz
06924     20 00 90 AD |  if_e	jmp	#LR__0547
06928     96 01 00 FF 
0692c     53 B5 06 F6 | 	mov	local08, ##@LR__5853
06930     56 93 02 F6 | 	mov	arg01, local04
06934     5A 95 02 F6 | 	mov	arg02, local08
06938     90 E2 B1 FD | 	call	#__system___string_cmp
0693c     3D B7 0A F6 | 	mov	local09, result1 wz
06940     00 7A 06 56 |  if_ne	mov	result1, #0
06944     00 01 90 5D |  if_ne	jmp	#LR__0553
06948                 | LR__0547
06948                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06948     55 AF 0A F2 | 	cmp	local05, local03 wz
0694c     EC 00 90 5D |  if_ne	jmp	#LR__0550
06950     96 01 00 FF 
06954     55 B9 06 F6 | 	mov	local10, ##@LR__5854
06958     56 93 02 F6 | 	mov	arg01, local04
0695c     5C 95 02 F6 | 	mov	arg02, local10
06960     68 E2 B1 FD | 	call	#__system___string_cmp
06964     3D BB 02 F6 | 	mov	local11, result1
06968     00 BA 56 F2 | 	cmps	local11, #0 wc
0696c     1C 00 90 CD |  if_b	jmp	#LR__0548
06970     96 01 00 FF 
06974     57 95 06 F6 | 	mov	arg02, ##@LR__5855
06978     56 93 02 F6 | 	mov	arg01, local04
0697c     4C E2 B1 FD | 	call	#__system___string_cmp
06980     3D B9 02 F6 | 	mov	local10, result1
06984     01 B8 56 F2 | 	cmps	local10, #1 wc
06988     B0 00 90 CD |  if_b	jmp	#LR__0550
0698c                 | LR__0548
0698c     96 01 00 FF 
06990     59 95 06 F6 | 	mov	arg02, ##@LR__5856
06994     56 93 02 F6 | 	mov	arg01, local04
06998     30 E2 B1 FD | 	call	#__system___string_cmp
0699c     00 7A 56 F2 | 	cmps	result1, #0 wc
069a0     1C 00 90 CD |  if_b	jmp	#LR__0549
069a4     96 01 00 FF 
069a8     5B B7 06 F6 | 	mov	local09, ##@LR__5857
069ac     56 93 02 F6 | 	mov	arg01, local04
069b0     5B 95 02 F6 | 	mov	arg02, local09
069b4     14 E2 B1 FD | 	call	#__system___string_cmp
069b8     01 7A 56 F2 | 	cmps	result1, #1 wc
069bc     7C 00 90 CD |  if_b	jmp	#LR__0550
069c0                 | LR__0549
069c0     96 01 00 FF 
069c4     5D B7 06 F6 | 	mov	local09, ##@LR__5858
069c8     56 93 02 F6 | 	mov	arg01, local04
069cc     5B 95 02 F6 | 	mov	arg02, local09
069d0     F8 E1 B1 FD | 	call	#__system___string_cmp
069d4     00 7A 4E F2 | 	cmps	result1, #0 wz
069d8     60 00 90 AD |  if_e	jmp	#LR__0550
069dc     96 01 00 FF 
069e0     5F B5 06 F6 | 	mov	local08, ##@LR__5859
069e4     56 93 02 F6 | 	mov	arg01, local04
069e8     5A 95 02 F6 | 	mov	arg02, local08
069ec     DC E1 B1 FD | 	call	#__system___string_cmp
069f0     3D B7 0A F6 | 	mov	local09, result1 wz
069f4     44 00 90 AD |  if_e	jmp	#LR__0550
069f8     96 01 00 FF 
069fc     61 BD 06 F6 | 	mov	local12, ##@LR__5860
06a00     5E B5 02 F6 | 	mov	local08, local12
06a04     56 93 02 F6 | 	mov	arg01, local04
06a08     5A 95 02 F6 | 	mov	arg02, local08
06a0c     BC E1 B1 FD | 	call	#__system___string_cmp
06a10     3D B3 0A F6 | 	mov	local07, result1 wz
06a14     24 00 90 AD |  if_e	jmp	#LR__0550
06a18     96 01 00 FF 
06a1c     63 BF 06 F6 | 	mov	local13, ##@LR__5861
06a20     5F BD 02 F6 | 	mov	local12, local13
06a24     56 93 02 F6 | 	mov	arg01, local04
06a28     5E 95 02 F6 | 	mov	arg02, local12
06a2c     9C E1 B1 FD | 	call	#__system___string_cmp
06a30     3D B5 0A F6 | 	mov	local08, result1 wz
06a34     00 7A 06 56 |  if_ne	mov	result1, #0
06a38     0C 00 90 5D |  if_ne	jmp	#LR__0553
06a3c                 | LR__0550
06a3c     01 AE 06 F1 | 	add	local05, #1
06a40     44 FE 9F FD | 	jmp	#LR__0544
06a44                 | LR__0551
06a44                 | LR__0552
06a44                 | ' return true
06a44     01 7A 66 F6 | 	neg	result1, #1
06a48                 | LR__0553
06a48     E7 F0 03 F6 | 	mov	ptra, fp
06a4c     F2 00 A0 FD | 	call	#popregs_
06a50                 | _isname_ret
06a50     2D 00 64 FD | 	ret
06a54                 | 
06a54                 | ' 
06a54                 | ' ' Check if the part is a number.  
06a54                 | ' 
06a54                 | ' function isnum(s as string) as boolean 
06a54                 | _isnum
06a54     13 CA 05 F6 | 	mov	COUNT_, #19
06a58     E8 00 A0 FD | 	call	#pushregs_
06a5c     49 A7 02 F6 | 	mov	local01, arg01
06a60     00 A8 06 F6 | 	mov	local02, #0
06a64     00 AA 06 F6 | 	mov	local03, #0
06a68     53 93 02 F6 | 	mov	arg01, local01
06a6c     49 AD 02 F6 | 	mov	local04, arg01
06a70     D7 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
06a74                 | LR__0560
06a74     56 7B CA FA | 	rdbyte	result1, local04 wz
06a78     01 AC 06 51 |  if_ne	add	local04, #1
06a7c     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
06a80                 | LR__0561
06a80     49 AD 82 F1 | 	sub	local04, arg01
06a84     56 7B 02 F6 | 	mov	result1, local04
06a88     3D AF 0A F6 | 	mov	local05, result1 wz
06a8c     00 7A 06 A6 |  if_e	mov	result1, #0
06a90     A0 03 90 AD |  if_e	jmp	#LR__0576
06a94     53 93 02 F6 | 	mov	arg01, local01
06a98     01 94 06 F6 | 	mov	arg02, #1
06a9c     01 96 06 F6 | 	mov	arg03, #1
06aa0     C0 FA B1 FD | 	call	#__system__Mid_S
06aa4     3D B1 02 F6 | 	mov	local06, result1
06aa8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06aa8     96 01 00 FF 
06aac     65 95 06 F6 | 	mov	arg02, ##@LR__5862
06ab0     58 93 02 F6 | 	mov	arg01, local06
06ab4     14 E1 B1 FD | 	call	#__system___string_cmp
06ab8     00 7A 56 F2 | 	cmps	result1, #0 wc
06abc     1C 00 90 CD |  if_b	jmp	#LR__0562
06ac0     96 01 00 FF 
06ac4     67 B3 06 F6 | 	mov	local07, ##@LR__5863
06ac8     58 93 02 F6 | 	mov	arg01, local06
06acc     59 95 02 F6 | 	mov	arg02, local07
06ad0     F8 E0 B1 FD | 	call	#__system___string_cmp
06ad4     01 7A 56 F2 | 	cmps	result1, #1 wc
06ad8     84 00 90 CD |  if_b	jmp	#LR__0563
06adc                 | LR__0562
06adc     96 01 00 FF 
06ae0     69 B5 06 F6 | 	mov	local08, ##@LR__5864
06ae4     5A B3 02 F6 | 	mov	local07, local08
06ae8     58 93 02 F6 | 	mov	arg01, local06
06aec     59 95 02 F6 | 	mov	arg02, local07
06af0     D8 E0 B1 FD | 	call	#__system___string_cmp
06af4     00 7A 0E F2 | 	cmp	result1, #0 wz
06af8     64 00 90 AD |  if_e	jmp	#LR__0563
06afc     96 01 00 FF 
06b00     6B B7 06 F6 | 	mov	local09, ##@LR__5865
06b04     5B B5 02 F6 | 	mov	local08, local09
06b08     58 93 02 F6 | 	mov	arg01, local06
06b0c     5A 95 02 F6 | 	mov	arg02, local08
06b10     B8 E0 B1 FD | 	call	#__system___string_cmp
06b14     3D B3 0A F6 | 	mov	local07, result1 wz
06b18     44 00 90 AD |  if_e	jmp	#LR__0563
06b1c     96 01 00 FF 
06b20     6D B9 06 F6 | 	mov	local10, ##@LR__5866
06b24     5C B7 02 F6 | 	mov	local09, local10
06b28     58 93 02 F6 | 	mov	arg01, local06
06b2c     5B 95 02 F6 | 	mov	arg02, local09
06b30     98 E0 B1 FD | 	call	#__system___string_cmp
06b34     3D B5 0A F6 | 	mov	local08, result1 wz
06b38     24 00 90 AD |  if_e	jmp	#LR__0563
06b3c     96 01 00 FF 
06b40     6F BB 06 F6 | 	mov	local11, ##@LR__5867
06b44     5D B9 02 F6 | 	mov	local10, local11
06b48     58 93 02 F6 | 	mov	arg01, local06
06b4c     5C 95 02 F6 | 	mov	arg02, local10
06b50     78 E0 B1 FD | 	call	#__system___string_cmp
06b54     3D B7 0A F6 | 	mov	local09, result1 wz
06b58     00 7A 06 56 |  if_ne	mov	result1, #0
06b5c     D4 02 90 5D |  if_ne	jmp	#LR__0576
06b60                 | LR__0563
06b60                 | ' if m$="." then ds=1
06b60     96 01 00 FF 
06b64     71 95 06 F6 | 	mov	arg02, ##@LR__5868
06b68     58 93 02 F6 | 	mov	arg01, local06
06b6c     5C E0 B1 FD | 	call	#__system___string_cmp
06b70     00 7A 0E F2 | 	cmp	result1, #0 wz
06b74     01 A8 06 A6 |  if_e	mov	local02, #1
06b78                 | ' if m$="$" then hex=1 else hex=0
06b78     96 01 00 FF 
06b7c     73 95 06 F6 | 	mov	arg02, ##@LR__5869
06b80     58 93 02 F6 | 	mov	arg01, local06
06b84     44 E0 B1 FD | 	call	#__system___string_cmp
06b88     00 7A 0E F2 | 	cmp	result1, #0 wz
06b8c     01 BC 06 A6 |  if_e	mov	local12, #1
06b90     00 BC 06 56 |  if_ne	mov	local12, #0
06b94                 | ' if m$="%" then bin=1 else bin=0
06b94     96 01 00 FF 
06b98     75 95 06 F6 | 	mov	arg02, ##@LR__5870
06b9c     58 93 02 F6 | 	mov	arg01, local06
06ba0     28 E0 B1 FD | 	call	#__system___string_cmp
06ba4     00 7A 0E F2 | 	cmp	result1, #0 wz
06ba8     01 BE 06 A6 |  if_e	mov	local13, #1
06bac     00 BE 06 56 |  if_ne	mov	local13, #0
06bb0                 | ' if l>1 then 
06bb0     02 AE 56 F2 | 	cmps	local05, #2 wc
06bb4     78 02 90 CD |  if_b	jmp	#LR__0575
06bb8                 | '   for i=2 to l
06bb8     02 C0 06 F6 | 	mov	local14, #2
06bbc     57 C3 02 F6 | 	mov	local15, local05
06bc0     01 C2 06 F1 | 	add	local15, #1
06bc4                 | LR__0564
06bc4     61 C1 52 F2 | 	cmps	local14, local15 wc
06bc8     64 02 90 3D |  if_ae	jmp	#LR__0574
06bcc     53 93 02 F6 | 	mov	arg01, local01
06bd0     60 95 02 F6 | 	mov	arg02, local14
06bd4     01 96 06 F6 | 	mov	arg03, #1
06bd8     88 F9 B1 FD | 	call	#__system__Mid_S
06bdc     3D B1 02 F6 | 	mov	local06, result1
06be0     00 C4 06 F6 | 	mov	local16, #0
06be4                 | '     m$=mid$(s,i,1) : b=false
06be4                 | '     if m$>="0" andalso m$<="9" then b=true  
06be4     96 01 00 FF 
06be8     77 95 06 F6 | 	mov	arg02, ##@LR__5871
06bec     58 93 02 F6 | 	mov	arg01, local06
06bf0     D8 DF B1 FD | 	call	#__system___string_cmp
06bf4     00 7A 56 F2 | 	cmps	result1, #0 wc
06bf8     1C 00 90 CD |  if_b	jmp	#LR__0565
06bfc     96 01 00 FF 
06c00     79 B3 06 F6 | 	mov	local07, ##@LR__5872
06c04     58 93 02 F6 | 	mov	arg01, local06
06c08     59 95 02 F6 | 	mov	arg02, local07
06c0c     BC DF B1 FD | 	call	#__system___string_cmp
06c10     01 7A 56 F2 | 	cmps	result1, #1 wc
06c14     01 C4 66 C6 |  if_b	neg	local16, #1
06c18                 | LR__0565
06c18                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06c18     96 01 00 FF 
06c1c     7B 95 06 F6 | 	mov	arg02, ##@LR__5873
06c20     58 93 02 F6 | 	mov	arg01, local06
06c24     A4 DF B1 FD | 	call	#__system___string_cmp
06c28     00 7A 0E F2 | 	cmp	result1, #0 wz
06c2c     7C 00 90 AD |  if_e	jmp	#LR__0566
06c30     96 01 00 FF 
06c34     7D B3 06 F6 | 	mov	local07, ##@LR__5874
06c38     58 93 02 F6 | 	mov	arg01, local06
06c3c     59 95 02 F6 | 	mov	arg02, local07
06c40     88 DF B1 FD | 	call	#__system___string_cmp
06c44     00 7A 0E F2 | 	cmp	result1, #0 wz
06c48     60 00 90 AD |  if_e	jmp	#LR__0566
06c4c     96 01 00 FF 
06c50     7F B5 06 F6 | 	mov	local08, ##@LR__5875
06c54     5A B3 02 F6 | 	mov	local07, local08
06c58     58 93 02 F6 | 	mov	arg01, local06
06c5c     59 95 02 F6 | 	mov	arg02, local07
06c60     68 DF B1 FD | 	call	#__system___string_cmp
06c64     00 7A 0E F2 | 	cmp	result1, #0 wz
06c68     40 00 90 AD |  if_e	jmp	#LR__0566
06c6c     96 01 00 FF 
06c70     81 B7 06 F6 | 	mov	local09, ##@LR__5876
06c74     5B B5 02 F6 | 	mov	local08, local09
06c78     58 93 02 F6 | 	mov	arg01, local06
06c7c     5A 95 02 F6 | 	mov	arg02, local08
06c80     48 DF B1 FD | 	call	#__system___string_cmp
06c84     3D B3 0A F6 | 	mov	local07, result1 wz
06c88     20 00 90 AD |  if_e	jmp	#LR__0566
06c8c     96 01 00 FF 
06c90     83 B9 06 F6 | 	mov	local10, ##@LR__5877
06c94     5C B7 02 F6 | 	mov	local09, local10
06c98     58 93 02 F6 | 	mov	arg01, local06
06c9c     5B 95 02 F6 | 	mov	arg02, local09
06ca0     28 DF B1 FD | 	call	#__system___string_cmp
06ca4     3D B5 0A F6 | 	mov	local08, result1 wz
06ca8     04 00 90 5D |  if_ne	jmp	#LR__0567
06cac                 | LR__0566
06cac     01 C4 66 F6 | 	neg	local16, #1
06cb0                 | LR__0567
06cb0                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06cb0     01 BC 0E F2 | 	cmp	local12, #1 wz
06cb4     34 00 90 5D |  if_ne	jmp	#LR__0568
06cb8     96 01 00 FF 
06cbc     85 95 06 F6 | 	mov	arg02, ##@LR__5878
06cc0     58 93 02 F6 | 	mov	arg01, local06
06cc4     04 DF B1 FD | 	call	#__system___string_cmp
06cc8     00 7A 56 F2 | 	cmps	result1, #0 wc
06ccc     1C 00 90 CD |  if_b	jmp	#LR__0568
06cd0     96 01 00 FF 
06cd4     87 B3 06 F6 | 	mov	local07, ##@LR__5879
06cd8     58 93 02 F6 | 	mov	arg01, local06
06cdc     59 95 02 F6 | 	mov	arg02, local07
06ce0     E8 DE B1 FD | 	call	#__system___string_cmp
06ce4     01 7A 56 F2 | 	cmps	result1, #1 wc
06ce8     01 C4 66 C6 |  if_b	neg	local16, #1
06cec                 | LR__0568
06cec                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06cec     01 BE 0E F2 | 	cmp	local13, #1 wz
06cf0     58 00 90 5D |  if_ne	jmp	#LR__0570
06cf4     96 01 00 FF 
06cf8     89 95 06 F6 | 	mov	arg02, ##@LR__5880
06cfc     58 93 02 F6 | 	mov	arg01, local06
06d00     C8 DE B1 FD | 	call	#__system___string_cmp
06d04     00 7A 56 F2 | 	cmps	result1, #0 wc
06d08     1C 00 90 CD |  if_b	jmp	#LR__0569
06d0c     96 01 00 FF 
06d10     8B B3 06 F6 | 	mov	local07, ##@LR__5881
06d14     58 93 02 F6 | 	mov	arg01, local06
06d18     59 95 02 F6 | 	mov	arg02, local07
06d1c     AC DE B1 FD | 	call	#__system___string_cmp
06d20     01 7A 56 F2 | 	cmps	result1, #1 wc
06d24     24 00 90 CD |  if_b	jmp	#LR__0570
06d28                 | LR__0569
06d28     96 01 00 FF 
06d2c     8D B5 06 F6 | 	mov	local08, ##@LR__5882
06d30     5A B3 02 F6 | 	mov	local07, local08
06d34     58 93 02 F6 | 	mov	arg01, local06
06d38     59 95 02 F6 | 	mov	arg02, local07
06d3c     8C DE B1 FD | 	call	#__system___string_cmp
06d40     00 7A 0E F2 | 	cmp	result1, #0 wz
06d44     00 7A 06 56 |  if_ne	mov	result1, #0
06d48     E8 00 90 5D |  if_ne	jmp	#LR__0576
06d4c                 | LR__0570
06d4c                 | '     if not b then return false
06d4c     62 C5 22 F6 | 	not	local16, local16
06d50     00 C4 0E F2 | 	cmp	local16, #0 wz
06d54     00 7A 06 56 |  if_ne	mov	result1, #0
06d58     D8 00 90 5D |  if_ne	jmp	#LR__0576
06d5c                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06d5c     96 01 00 FF 
06d60     8F 95 06 F6 | 	mov	arg02, ##@LR__5883
06d64     58 93 02 F6 | 	mov	arg01, local06
06d68     60 DE B1 FD | 	call	#__system___string_cmp
06d6c     00 7A 0E F2 | 	cmp	result1, #0 wz
06d70     3C 00 90 5D |  if_ne	jmp	#LR__0571
06d74     60 95 02 F6 | 	mov	arg02, local14
06d78     01 94 86 F1 | 	sub	arg02, #1
06d7c     53 93 02 F6 | 	mov	arg01, local01
06d80     01 96 06 F6 | 	mov	arg03, #1
06d84     DC F7 B1 FD | 	call	#__system__Mid_S
06d88     3D 93 02 F6 | 	mov	arg01, result1
06d8c     CC F9 B1 FD | 	call	#__system__LCase_S
06d90     3D 93 02 F6 | 	mov	arg01, result1
06d94     96 01 00 FF 
06d98     91 B3 06 F6 | 	mov	local07, ##@LR__5884
06d9c     59 95 02 F6 | 	mov	arg02, local07
06da0     28 DE B1 FD | 	call	#__system___string_cmp
06da4     00 7A 0E F2 | 	cmp	result1, #0 wz
06da8     00 7A 06 56 |  if_ne	mov	result1, #0
06dac     84 00 90 5D |  if_ne	jmp	#LR__0576
06db0                 | LR__0571
06db0                 | '     if m$="." then ds+=1: if ds>1 then return false
06db0     96 01 00 FF 
06db4     93 95 06 F6 | 	mov	arg02, ##@LR__5885
06db8     58 93 02 F6 | 	mov	arg01, local06
06dbc     0C DE B1 FD | 	call	#__system___string_cmp
06dc0     00 7A 0E F2 | 	cmp	result1, #0 wz
06dc4     01 A8 06 A1 |  if_e	add	local02, #1
06dc8     02 A8 56 A2 |  if_e	cmps	local02, #2 wc
06dcc     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
06dd0     60 00 90 2D |  if_nc_and_z	jmp	#LR__0576
06dd4                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06dd4     96 01 00 FF 
06dd8     95 C7 06 F6 | 	mov	local17, ##@LR__5886
06ddc     63 C9 02 F6 | 	mov	local18, local17
06de0     58 93 02 F6 | 	mov	arg01, local06
06de4     64 95 02 F6 | 	mov	arg02, local18
06de8     E0 DD B1 FD | 	call	#__system___string_cmp
06dec     3D CB 0A F6 | 	mov	local19, result1 wz
06df0     20 00 90 AD |  if_e	jmp	#LR__0572
06df4     96 01 00 FF 
06df8     97 B3 06 F6 | 	mov	local07, ##@LR__5887
06dfc     59 C7 02 F6 | 	mov	local17, local07
06e00     58 93 02 F6 | 	mov	arg01, local06
06e04     63 95 02 F6 | 	mov	arg02, local17
06e08     C0 DD B1 FD | 	call	#__system___string_cmp
06e0c     3D C9 0A F6 | 	mov	local18, result1 wz
06e10     14 00 90 5D |  if_ne	jmp	#LR__0573
06e14                 | LR__0572
06e14     01 AA 06 F1 | 	add	local03, #1
06e18     00 BC 0E F2 | 	cmp	local12, #0 wz
06e1c     02 AA 56 A2 |  if_e	cmps	local03, #2 wc
06e20     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
06e24     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0576
06e28                 | LR__0573
06e28     01 C0 06 F1 | 	add	local14, #1
06e2c     94 FD 9F FD | 	jmp	#LR__0564
06e30                 | LR__0574
06e30                 | LR__0575
06e30                 | ' return true
06e30     01 7A 66 F6 | 	neg	result1, #1
06e34                 | LR__0576
06e34     E7 F0 03 F6 | 	mov	ptra, fp
06e38     F2 00 A0 FD | 	call	#popregs_
06e3c                 | _isnum_ret
06e3c     2D 00 64 FD | 	ret
06e40                 | 
06e40                 | '   
06e40                 | ' ' Check if the part is an integer number.    
06e40                 | '   
06e40                 | ' function isint(s as string) as boolean
06e40                 | _isint
06e40     0E CA 05 F6 | 	mov	COUNT_, #14
06e44     E8 00 A0 FD | 	call	#pushregs_
06e48     49 A7 02 F6 | 	mov	local01, arg01
06e4c     49 A9 02 F6 | 	mov	local02, arg01
06e50     D7 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06e54                 | LR__0580
06e54     54 7B CA FA | 	rdbyte	result1, local02 wz
06e58     01 A8 06 51 |  if_ne	add	local02, #1
06e5c     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06e60                 | LR__0581
06e60     49 A9 82 F1 | 	sub	local02, arg01
06e64     54 7B 02 F6 | 	mov	result1, local02
06e68     3D AB 0A F6 | 	mov	local03, result1 wz
06e6c     00 7A 06 A6 |  if_e	mov	result1, #0
06e70     64 02 90 AD |  if_e	jmp	#LR__0594
06e74     53 93 02 F6 | 	mov	arg01, local01
06e78     01 94 06 F6 | 	mov	arg02, #1
06e7c     01 96 06 F6 | 	mov	arg03, #1
06e80     E0 F6 B1 FD | 	call	#__system__Mid_S
06e84     3D AD 02 F6 | 	mov	local04, result1
06e88                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06e88     96 01 00 FF 
06e8c     99 95 06 F6 | 	mov	arg02, ##@LR__5888
06e90     56 93 02 F6 | 	mov	arg01, local04
06e94     34 DD B1 FD | 	call	#__system___string_cmp
06e98     00 7A 56 F2 | 	cmps	result1, #0 wc
06e9c     1C 00 90 CD |  if_b	jmp	#LR__0582
06ea0     96 01 00 FF 
06ea4     9B AF 06 F6 | 	mov	local05, ##@LR__5889
06ea8     56 93 02 F6 | 	mov	arg01, local04
06eac     57 95 02 F6 | 	mov	arg02, local05
06eb0     18 DD B1 FD | 	call	#__system___string_cmp
06eb4     01 7A 56 F2 | 	cmps	result1, #1 wc
06eb8     64 00 90 CD |  if_b	jmp	#LR__0583
06ebc                 | LR__0582
06ebc     96 01 00 FF 
06ec0     9D B1 06 F6 | 	mov	local06, ##@LR__5890
06ec4     58 AF 02 F6 | 	mov	local05, local06
06ec8     56 93 02 F6 | 	mov	arg01, local04
06ecc     57 95 02 F6 | 	mov	arg02, local05
06ed0     F8 DC B1 FD | 	call	#__system___string_cmp
06ed4     00 7A 0E F2 | 	cmp	result1, #0 wz
06ed8     44 00 90 AD |  if_e	jmp	#LR__0583
06edc     96 01 00 FF 
06ee0     9F B3 06 F6 | 	mov	local07, ##@LR__5891
06ee4     59 B1 02 F6 | 	mov	local06, local07
06ee8     56 93 02 F6 | 	mov	arg01, local04
06eec     58 95 02 F6 | 	mov	arg02, local06
06ef0     D8 DC B1 FD | 	call	#__system___string_cmp
06ef4     3D AF 0A F6 | 	mov	local05, result1 wz
06ef8     24 00 90 AD |  if_e	jmp	#LR__0583
06efc     96 01 00 FF 
06f00     A1 B5 06 F6 | 	mov	local08, ##@LR__5892
06f04     5A B3 02 F6 | 	mov	local07, local08
06f08     56 93 02 F6 | 	mov	arg01, local04
06f0c     59 95 02 F6 | 	mov	arg02, local07
06f10     B8 DC B1 FD | 	call	#__system___string_cmp
06f14     3D B1 0A F6 | 	mov	local06, result1 wz
06f18     00 7A 06 56 |  if_ne	mov	result1, #0
06f1c     B8 01 90 5D |  if_ne	jmp	#LR__0594
06f20                 | LR__0583
06f20                 | ' if m$="$" then hex=1 else hex=0
06f20     96 01 00 FF 
06f24     A3 95 06 F6 | 	mov	arg02, ##@LR__5893
06f28     56 93 02 F6 | 	mov	arg01, local04
06f2c     9C DC B1 FD | 	call	#__system___string_cmp
06f30     00 7A 0E F2 | 	cmp	result1, #0 wz
06f34     01 B6 06 A6 |  if_e	mov	local09, #1
06f38     00 B6 06 56 |  if_ne	mov	local09, #0
06f3c                 | ' if m$="%" then bin=1 else bin=0
06f3c     96 01 00 FF 
06f40     A5 95 06 F6 | 	mov	arg02, ##@LR__5894
06f44     56 93 02 F6 | 	mov	arg01, local04
06f48     80 DC B1 FD | 	call	#__system___string_cmp
06f4c     00 7A 0E F2 | 	cmp	result1, #0 wz
06f50     01 B8 06 A6 |  if_e	mov	local10, #1
06f54     00 B8 06 56 |  if_ne	mov	local10, #0
06f58                 | ' if l>1 then 
06f58     02 AA 56 F2 | 	cmps	local03, #2 wc
06f5c     74 01 90 CD |  if_b	jmp	#LR__0593
06f60                 | '   for i=2 to l
06f60     02 BA 06 F6 | 	mov	local11, #2
06f64     55 BD 02 F6 | 	mov	local12, local03
06f68     01 BC 06 F1 | 	add	local12, #1
06f6c                 | LR__0584
06f6c     5E BB 52 F2 | 	cmps	local11, local12 wc
06f70     60 01 90 3D |  if_ae	jmp	#LR__0592
06f74     53 93 02 F6 | 	mov	arg01, local01
06f78     5D 95 02 F6 | 	mov	arg02, local11
06f7c     01 96 06 F6 | 	mov	arg03, #1
06f80     E0 F5 B1 FD | 	call	#__system__Mid_S
06f84     3D AD 02 F6 | 	mov	local04, result1
06f88                 | '     m$=mid$(s,i,1) 
06f88                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06f88     00 B6 0E F2 | 	cmp	local09, #0 wz
06f8c     50 00 90 5D |  if_ne	jmp	#LR__0586
06f90     96 01 00 FF 
06f94     A7 95 06 F6 | 	mov	arg02, ##@LR__5895
06f98     56 93 02 F6 | 	mov	arg01, local04
06f9c     2C DC B1 FD | 	call	#__system___string_cmp
06fa0     00 7A 56 F2 | 	cmps	result1, #0 wc
06fa4     18 00 90 CD |  if_b	jmp	#LR__0585
06fa8     96 01 00 FF 
06fac     A9 95 06 F6 | 	mov	arg02, ##@LR__5896
06fb0     56 93 02 F6 | 	mov	arg01, local04
06fb4     14 DC B1 FD | 	call	#__system___string_cmp
06fb8     01 7A 56 F2 | 	cmps	result1, #1 wc
06fbc     20 00 90 CD |  if_b	jmp	#LR__0586
06fc0                 | LR__0585
06fc0     96 01 00 FF 
06fc4     AB B1 06 F6 | 	mov	local06, ##@LR__5897
06fc8     56 93 02 F6 | 	mov	arg01, local04
06fcc     58 95 02 F6 | 	mov	arg02, local06
06fd0     F8 DB B1 FD | 	call	#__system___string_cmp
06fd4     00 7A 0E F2 | 	cmp	result1, #0 wz
06fd8     00 7A 06 56 |  if_ne	mov	result1, #0
06fdc     F8 00 90 5D |  if_ne	jmp	#LR__0594
06fe0                 | LR__0586
06fe0                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06fe0     01 B6 0E F2 | 	cmp	local09, #1 wz
06fe4     90 00 90 5D |  if_ne	jmp	#LR__0589
06fe8     96 01 00 FF 
06fec     AD 95 06 F6 | 	mov	arg02, ##@LR__5898
06ff0     56 93 02 F6 | 	mov	arg01, local04
06ff4     D4 DB B1 FD | 	call	#__system___string_cmp
06ff8     00 7A 56 F2 | 	cmps	result1, #0 wc
06ffc     1C 00 90 CD |  if_b	jmp	#LR__0587
07000     96 01 00 FF 
07004     AF 95 06 F6 | 	mov	arg02, ##@LR__5899
07008     56 93 02 F6 | 	mov	arg01, local04
0700c     BC DB B1 FD | 	call	#__system___string_cmp
07010     3D BF 02 F6 | 	mov	local13, result1
07014     01 BE 56 F2 | 	cmps	local13, #1 wc
07018     5C 00 90 CD |  if_b	jmp	#LR__0589
0701c                 | LR__0587
0701c     96 01 00 FF 
07020     B1 AF 06 F6 | 	mov	local05, ##@LR__5900
07024     56 93 02 F6 | 	mov	arg01, local04
07028     57 95 02 F6 | 	mov	arg02, local05
0702c     9C DB B1 FD | 	call	#__system___string_cmp
07030     3D C1 02 F6 | 	mov	local14, result1
07034     00 C0 56 F2 | 	cmps	local14, #0 wc
07038     1C 00 90 CD |  if_b	jmp	#LR__0588
0703c     96 01 00 FF 
07040     B3 B3 06 F6 | 	mov	local07, ##@LR__5901
07044     56 93 02 F6 | 	mov	arg01, local04
07048     59 95 02 F6 | 	mov	arg02, local07
0704c     7C DB B1 FD | 	call	#__system___string_cmp
07050     01 7A 56 F2 | 	cmps	result1, #1 wc
07054     20 00 90 CD |  if_b	jmp	#LR__0589
07058                 | LR__0588
07058     96 01 00 FF 
0705c     B5 B5 06 F6 | 	mov	local08, ##@LR__5902
07060     56 93 02 F6 | 	mov	arg01, local04
07064     5A 95 02 F6 | 	mov	arg02, local08
07068     60 DB B1 FD | 	call	#__system___string_cmp
0706c     00 7A 0E F2 | 	cmp	result1, #0 wz
07070     00 7A 06 56 |  if_ne	mov	result1, #0
07074     60 00 90 5D |  if_ne	jmp	#LR__0594
07078                 | LR__0589
07078                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
07078     01 B8 0E F2 | 	cmp	local10, #1 wz
0707c     4C 00 90 5D |  if_ne	jmp	#LR__0591
07080     96 01 00 FF 
07084     B7 95 06 F6 | 	mov	arg02, ##@LR__5903
07088     56 93 02 F6 | 	mov	arg01, local04
0708c     3C DB B1 FD | 	call	#__system___string_cmp
07090     00 7A 56 F2 | 	cmps	result1, #0 wc
07094     18 00 90 CD |  if_b	jmp	#LR__0590
07098     96 01 00 FF 
0709c     B9 95 06 F6 | 	mov	arg02, ##@LR__5904
070a0     56 93 02 F6 | 	mov	arg01, local04
070a4     24 DB B1 FD | 	call	#__system___string_cmp
070a8     01 7A 56 F2 | 	cmps	result1, #1 wc
070ac     1C 00 90 CD |  if_b	jmp	#LR__0591
070b0                 | LR__0590
070b0     96 01 00 FF 
070b4     BB 95 06 F6 | 	mov	arg02, ##@LR__5905
070b8     56 93 02 F6 | 	mov	arg01, local04
070bc     0C DB B1 FD | 	call	#__system___string_cmp
070c0     00 7A 0E F2 | 	cmp	result1, #0 wz
070c4     00 7A 06 56 |  if_ne	mov	result1, #0
070c8     0C 00 90 5D |  if_ne	jmp	#LR__0594
070cc                 | LR__0591
070cc     01 BA 06 F1 | 	add	local11, #1
070d0     98 FE 9F FD | 	jmp	#LR__0584
070d4                 | LR__0592
070d4                 | LR__0593
070d4                 | ' return true
070d4     01 7A 66 F6 | 	neg	result1, #1
070d8                 | LR__0594
070d8     E7 F0 03 F6 | 	mov	ptra, fp
070dc     F2 00 A0 FD | 	call	#popregs_
070e0                 | _isint_ret
070e0     2D 00 64 FD | 	ret
070e4                 | 
070e4                 | ' 
070e4                 | ' ' Check if the part is a positive decimal number.  
070e4                 | ' 
070e4                 | ' function isdec(s as string) as boolean
070e4                 | _isdec
070e4     05 CA 05 F6 | 	mov	COUNT_, #5
070e8     E8 00 A0 FD | 	call	#pushregs_
070ec     49 A7 02 F6 | 	mov	local01, arg01
070f0     49 A9 02 F6 | 	mov	local02, arg01
070f4     D7 06 48 FB | 	callpa	#(@LR__0601-@LR__0600)>>2,fcache_load_ptr_
070f8                 | LR__0600
070f8     54 7B CA FA | 	rdbyte	result1, local02 wz
070fc     01 A8 06 51 |  if_ne	add	local02, #1
07100     F4 FF 9F 5D |  if_ne	jmp	#LR__0600
07104                 | LR__0601
07104     49 A9 82 F1 | 	sub	local02, arg01
07108     54 7B 02 F6 | 	mov	result1, local02
0710c     3D A9 0A F6 | 	mov	local02, result1 wz
07110     00 7A 06 A6 |  if_e	mov	result1, #0
07114     80 00 90 AD |  if_e	jmp	#LR__0606
07118                 | ' for i=1 to l
07118     01 AA 06 F6 | 	mov	local03, #1
0711c     54 AD 02 F6 | 	mov	local04, local02
07120     01 AC 06 F1 | 	add	local04, #1
07124                 | LR__0602
07124     56 AB 52 F2 | 	cmps	local03, local04 wc
07128     68 00 90 3D |  if_ae	jmp	#LR__0605
0712c     53 93 02 F6 | 	mov	arg01, local01
07130     55 95 02 F6 | 	mov	arg02, local03
07134     01 96 06 F6 | 	mov	arg03, #1
07138     28 F4 B1 FD | 	call	#__system__Mid_S
0713c     3D AF 02 F6 | 	mov	local05, result1
07140                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
07140     96 01 00 FF 
07144     BD 95 06 F6 | 	mov	arg02, ##@LR__5906
07148     57 93 02 F6 | 	mov	arg01, local05
0714c     7C DA B1 FD | 	call	#__system___string_cmp
07150     00 7A 56 F2 | 	cmps	result1, #0 wc
07154     18 00 90 CD |  if_b	jmp	#LR__0603
07158     96 01 00 FF 
0715c     BF 95 06 F6 | 	mov	arg02, ##@LR__5907
07160     57 93 02 F6 | 	mov	arg01, local05
07164     64 DA B1 FD | 	call	#__system___string_cmp
07168     01 7A 56 F2 | 	cmps	result1, #1 wc
0716c     1C 00 90 CD |  if_b	jmp	#LR__0604
07170                 | LR__0603
07170     96 01 00 FF 
07174     C1 95 06 F6 | 	mov	arg02, ##@LR__5908
07178     57 93 02 F6 | 	mov	arg01, local05
0717c     4C DA B1 FD | 	call	#__system___string_cmp
07180     00 7A 0E F2 | 	cmp	result1, #0 wz
07184     00 7A 06 56 |  if_ne	mov	result1, #0
07188     0C 00 90 5D |  if_ne	jmp	#LR__0606
0718c                 | LR__0604
0718c     01 AA 06 F1 | 	add	local03, #1
07190     90 FF 9F FD | 	jmp	#LR__0602
07194                 | LR__0605
07194                 | ' return true
07194     01 7A 66 F6 | 	neg	result1, #1
07198                 | LR__0606
07198     E7 F0 03 F6 | 	mov	ptra, fp
0719c     F2 00 A0 FD | 	call	#popregs_
071a0                 | _isdec_ret
071a0     2D 00 64 FD | 	ret
071a4                 | 
071a4                 | ' 
071a4                 | ' ' Check if the part is a string.  
071a4                 | ' 
071a4                 | ' function isstring(s as string) as boolean
071a4                 | _isstring
071a4     01 CA 05 F6 | 	mov	COUNT_, #1
071a8     E8 00 A0 FD | 	call	#pushregs_
071ac                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
071ac     49 A7 02 F6 | 	mov	local01, arg01
071b0     01 94 06 F6 | 	mov	arg02, #1
071b4     94 F2 B1 FD | 	call	#__system__Left_S
071b8     3D 93 02 F6 | 	mov	arg01, result1
071bc     96 01 00 FF 
071c0     C3 95 06 F6 | 	mov	arg02, ##@LR__5909
071c4     04 DA B1 FD | 	call	#__system___string_cmp
071c8     00 7A 4E F2 | 	cmps	result1, #0 wz
071cc     28 00 90 5D |  if_ne	jmp	#LR__0610
071d0     53 93 02 F6 | 	mov	arg01, local01
071d4     01 94 06 F6 | 	mov	arg02, #1
071d8     F8 F2 B1 FD | 	call	#__system__Right_S
071dc     3D 93 02 F6 | 	mov	arg01, result1
071e0     96 01 00 FF 
071e4     C5 95 06 F6 | 	mov	arg02, ##@LR__5910
071e8     E0 D9 B1 FD | 	call	#__system___string_cmp
071ec     00 7A 4E F2 | 	cmps	result1, #0 wz
071f0     01 7A 66 A6 |  if_e	neg	result1, #1
071f4     04 00 90 AD |  if_e	jmp	#LR__0611
071f8                 | LR__0610
071f8     00 7A 06 F6 | 	mov	result1, #0
071fc                 | LR__0611
071fc     E7 F0 03 F6 | 	mov	ptra, fp
07200     F2 00 A0 FD | 	call	#popregs_
07204                 | _isstring_ret
07204     2D 00 64 FD | 	ret
07208                 | 
07208                 | ' 
07208                 | ' ' getnoteval. Returns the frequency of note token
07208                 | ' 
07208                 | ' function getnoteval(token) as single
07208                 | _getnoteval
07208     02 CA 05 F6 | 	mov	COUNT_, #2
0720c     E8 00 A0 FD | 	call	#pushregs_
07210     01 00 00 FF 
07214     00 93 86 F1 | 	sub	arg01, ##768
07218     49 95 52 F6 | 	abs	arg02, arg01 wc
0721c     0C 94 16 FD | 	qdiv	arg02, #12
07220     32 95 02 F6 | 	mov	arg02, objptr
07224     16 00 00 FF 
07228     38 94 06 F1 | 	add	arg02, ##11320
0722c     19 7A 62 FD | 	getqy	result1
07230     3D 7B 82 F6 | 	negc	result1, result1
07234     02 7A 66 F0 | 	shl	result1, #2
07238     4A 7B 02 F1 | 	add	result1, arg02
0723c     49 95 52 F6 | 	abs	arg02, arg01 wc
07240     0C 94 16 FD | 	qdiv	arg02, #12
07244     3D A7 02 FB | 	rdlong	local01, result1
07248     01 92 06 F6 | 	mov	arg01, #1
0724c                 | ' noteexp=1+(note/12) 
0724c                 | ' return (2.0^noteexp)*notebase
0724c     18 94 62 FD | 	getqx	arg02
07250     4A 93 82 F3 | 	sumc	arg01, arg02
07254     49 93 52 F6 | 	abs	arg01, arg01 wc
07258     1F A8 C6 C9 |  if_b	decod	local02, #31
0725c     00 A8 06 36 |  if_ae	mov	local02, #0
07260     0C FC B1 FD | 	call	#__system___float_fromuns
07264     54 7B 62 F5 | 	xor	result1, local02
07268     3D 95 02 F6 | 	mov	arg02, result1
0726c     1E 92 C6 F9 | 	decod	arg01, #30
07270     18 0F B2 FD | 	call	#__system____builtin_powf
07274     3D 93 02 F6 | 	mov	arg01, result1
07278     53 95 02 F6 | 	mov	arg02, local01
0727c     F4 FF B1 FD | 	call	#__system___float_mul
07280     E7 F0 03 F6 | 	mov	ptra, fp
07284     F2 00 A0 FD | 	call	#popregs_
07288                 | _getnoteval_ret
07288     2D 00 64 FD | 	ret
0728c                 | 
0728c                 | ' 
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' 
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' '
0728c                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
0728c                 | ' '
0728c                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
0728c                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
0728c                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
0728c                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
0728c                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
0728c                 | ' ' 
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' 
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' ' Helper functions to manage program lines
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' 
0728c                 | ' '----- delete a line from a program
0728c                 | ' 
0728c                 | ' function deleteline(aline as ulong) as integer
0728c                 | _deleteline
0728c     05 CA 05 F6 | 	mov	COUNT_, #5
07290     E8 00 A0 FD | 	call	#pushregs_
07294     2C F0 07 F1 | 	add	ptra, #44
07298     49 A7 02 F6 | 	mov	local01, arg01
0729c     4C 00 00 FF 
072a0     2C 64 06 F1 | 	add	objptr, ##38956
072a4     32 A9 02 FB | 	rdlong	local02, objptr
072a8                 | ' 
072a8                 | ' searchptr=programstart
072a8                 | ' do
072a8     40 00 00 FF 
072ac     60 65 86 F1 | 	sub	objptr, ##33120
072b0                 | LR__0620
072b0     E7 92 02 F6 | 	mov	arg01, fp
072b4     14 92 06 F1 | 	add	arg01, #20
072b8     54 95 02 F6 | 	mov	arg02, local02
072bc     18 96 06 F6 | 	mov	arg03, #24
072c0     64 C9 B1 FD | 	call	#_psram_spin2_read1
072c4     54 97 02 F6 | 	mov	arg03, local02
072c8     28 CE 05 F1 | 	add	fp, #40
072cc     E7 A8 02 FB | 	rdlong	local02, fp
072d0     14 CE 85 F1 | 	sub	fp, #20
072d4     E7 94 02 FB | 	rdlong	arg02, fp
072d8     14 CE 85 F1 | 	sub	fp, #20
072dc     53 95 12 F2 | 	cmp	arg02, local01 wc
072e0     28 CE 05 C1 |  if_b	add	fp, #40
072e4     E7 AA 02 CB |  if_b	rdlong	local03, fp
072e8     28 CE 85 C1 |  if_b	sub	fp, #40
072ec     FF FF 3F CF 
072f0     FF AB 0E C2 |  if_b	cmp	local03, ##2147483647 wz
072f4     B8 FF 9F 4D |  if_c_and_nz	jmp	#LR__0620
072f8     0B 00 00 FF 
072fc     CC 64 86 F1 | 	sub	objptr, ##5836
07300                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
07300     14 CE 05 F1 | 	add	fp, #20
07304     E7 AA 02 FB | 	rdlong	local03, fp
07308     14 CE 85 F1 | 	sub	fp, #20
0730c     53 AB 0A F2 | 	cmp	local03, local01 wz
07310     01 7A 66 56 |  if_ne	neg	result1, #1
07314     2C 02 90 5D |  if_ne	jmp	#LR__0625
07318     4B 93 02 F6 | 	mov	arg01, arg03
0731c     01 94 66 F6 | 	neg	arg02, #1
07320     F4 9C B1 FD | 	call	#_pslpoke
07324                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
07324                 | ' 
07324                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
07324     28 CE 05 F1 | 	add	fp, #40
07328     E7 96 02 FB | 	rdlong	arg03, fp
0732c     28 CE 85 F1 | 	sub	fp, #40
07330     FF FF 3F FF 
07334     FF 97 0E F2 | 	cmp	arg03, ##2147483647 wz
07338     24 CE 05 A1 |  if_e	add	fp, #36
0733c     E7 AC 02 AB |  if_e	rdlong	local04, fp
07340     24 CE 85 A1 |  if_e	sub	fp, #36
07344     FF FF 7F AF 
07348     FF AD 0E A2 |  if_e	cmp	local04, ##-1 wz
0734c     88 00 90 5D |  if_ne	jmp	#LR__0621
07350     4C 00 00 FF 
07354     2C 64 06 F1 | 	add	objptr, ##38956
07358     00 04 80 FF 
0735c     32 01 68 FC | 	wrlong	##524288, objptr
07360     07 00 00 FF 
07364     2C 64 86 F1 | 	sub	objptr, ##3628
07368     00 04 80 FF 
0736c     32 01 68 FC | 	wrlong	##524288, objptr
07370     07 00 00 FF 
07374     30 64 06 F1 | 	add	objptr, ##3632
07378     32 01 68 FC | 	wrlong	#0, objptr
0737c     04 64 06 F1 | 	add	objptr, #4
07380     FF FF FF FF 
07384     32 FF 6B FC | 	wrlong	##-1, objptr
07388     4C 00 00 FF 
0738c     34 64 86 F1 | 	sub	objptr, ##38964
07390     00 92 06 F6 | 	mov	arg01, #0
07394     01 94 66 F6 | 	neg	arg02, #1
07398     7C 9C B1 FD | 	call	#_pslpoke
0739c     10 92 06 F6 | 	mov	arg01, #16
073a0     01 94 66 F6 | 	neg	arg02, #1
073a4     70 9C B1 FD | 	call	#_pslpoke
073a8     14 92 06 F6 | 	mov	arg01, #20
073ac     1E 94 CE F9 | 	bmask	arg02, #30
073b0     64 9C B1 FD | 	call	#_pslpoke
073b4     52 00 00 FF 
073b8     5C 64 06 F1 | 	add	objptr, ##42076
073bc     00 04 80 FF 
073c0     32 01 68 FC | 	wrlong	##524288, objptr
073c4     04 64 06 F1 | 	add	objptr, #4
073c8     00 04 80 FF 
073cc     32 01 68 FC | 	wrlong	##524288, objptr
073d0     52 00 00 FF 
073d4     60 64 86 F1 | 	sub	objptr, ##42080
073d8                 | LR__0621
073d8                 | ' 
073d8                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
073d8     28 CE 05 F1 | 	add	fp, #40
073dc     E7 AE 02 FB | 	rdlong	local05, fp
073e0     28 CE 85 F1 | 	sub	fp, #40
073e4     FF FF 3F FF 
073e8     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
073ec     74 00 90 5D |  if_ne	jmp	#LR__0622
073f0     24 CE 05 F1 | 	add	fp, #36
073f4     E7 AC 02 FB | 	rdlong	local04, fp
073f8     24 CE 85 F1 | 	sub	fp, #36
073fc     FF FF 7F FF 
07400     FF AD 0E F2 | 	cmp	local04, ##-1 wz
07404     5C 00 90 AD |  if_e	jmp	#LR__0622
07408     24 CE 05 F1 | 	add	fp, #36
0740c     E7 92 02 FB | 	rdlong	arg01, fp
07410     24 CE 85 F1 | 	sub	fp, #36
07414     14 92 06 F1 | 	add	arg01, #20
07418     1E 94 CE F9 | 	bmask	arg02, #30
0741c     F8 9B B1 FD | 	call	#_pslpoke
07420     24 CE 05 F1 | 	add	fp, #36
07424     E7 AE 02 FB | 	rdlong	local05, fp
07428     4C 00 00 FF 
0742c     34 64 06 F1 | 	add	objptr, ##38964
07430     32 AF 62 FC | 	wrlong	local05, objptr
07434     4C 00 00 FF 
07438     34 64 86 F1 | 	sub	objptr, ##38964
0743c     E7 92 02 FB | 	rdlong	arg01, fp
07440     24 CE 85 F1 | 	sub	fp, #36
07444     F0 9C B1 FD | 	call	#_pslpeek
07448     4C 00 00 FF 
0744c     30 64 06 F1 | 	add	objptr, ##38960
07450     32 7B 62 FC | 	wrlong	result1, objptr
07454     4C 00 00 FF 
07458     30 64 86 F1 | 	sub	objptr, ##38960
0745c                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
0745c                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
0745c                 | '   lastline=pslpeek(header(4))
0745c                 | '   return 0
0745c     00 7A 06 F6 | 	mov	result1, #0
07460     E0 00 90 FD | 	jmp	#LR__0625
07464                 | LR__0622
07464                 | ' 
07464                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
07464     28 CE 05 F1 | 	add	fp, #40
07468     E7 AE 02 FB | 	rdlong	local05, fp
0746c     28 CE 85 F1 | 	sub	fp, #40
07470     FF FF 3F FF 
07474     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
07478     58 00 90 AD |  if_e	jmp	#LR__0623
0747c     24 CE 05 F1 | 	add	fp, #36
07480     E7 AC 02 FB | 	rdlong	local04, fp
07484     24 CE 85 F1 | 	sub	fp, #36
07488     FF FF 7F FF 
0748c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
07490     40 00 90 5D |  if_ne	jmp	#LR__0623
07494     28 CE 05 F1 | 	add	fp, #40
07498     E7 92 02 FB | 	rdlong	arg01, fp
0749c     28 CE 85 F1 | 	sub	fp, #40
074a0     10 92 06 F1 | 	add	arg01, #16
074a4     01 94 66 F6 | 	neg	arg02, #1
074a8     6C 9B B1 FD | 	call	#_pslpoke
074ac     28 CE 05 F1 | 	add	fp, #40
074b0     E7 AE 02 FB | 	rdlong	local05, fp
074b4     28 CE 85 F1 | 	sub	fp, #40
074b8     4C 00 00 FF 
074bc     2C 64 06 F1 | 	add	objptr, ##38956
074c0     32 AF 62 FC | 	wrlong	local05, objptr
074c4     4C 00 00 FF 
074c8     2C 64 86 F1 | 	sub	objptr, ##38956
074cc                 | ' '   print "deleted first line"
074cc                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
074cc                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
074cc                 | '   return 0
074cc     00 7A 06 F6 | 	mov	result1, #0
074d0     70 00 90 FD | 	jmp	#LR__0625
074d4                 | LR__0623
074d4                 | ' 
074d4                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
074d4     28 CE 05 F1 | 	add	fp, #40
074d8     E7 AE 02 FB | 	rdlong	local05, fp
074dc     28 CE 85 F1 | 	sub	fp, #40
074e0     FF FF 3F FF 
074e4     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
074e8     24 CE 05 51 |  if_ne	add	fp, #36
074ec     E7 AC 02 5B |  if_ne	rdlong	local04, fp
074f0     24 CE 85 51 |  if_ne	sub	fp, #36
074f4     FF FF 7F 5F 
074f8     FF AD 0E 52 |  if_ne	cmp	local04, ##-1 wz
074fc     40 00 90 AD |  if_e	jmp	#LR__0624
07500     28 CE 05 F1 | 	add	fp, #40
07504     E7 92 02 FB | 	rdlong	arg01, fp
07508     10 92 06 F1 | 	add	arg01, #16
0750c     04 CE 85 F1 | 	sub	fp, #4
07510     E7 94 02 FB | 	rdlong	arg02, fp
07514     24 CE 85 F1 | 	sub	fp, #36
07518     FC 9A B1 FD | 	call	#_pslpoke
0751c     24 CE 05 F1 | 	add	fp, #36
07520     E7 92 02 FB | 	rdlong	arg01, fp
07524     14 92 06 F1 | 	add	arg01, #20
07528     04 CE 05 F1 | 	add	fp, #4
0752c     E7 94 02 FB | 	rdlong	arg02, fp
07530     28 CE 85 F1 | 	sub	fp, #40
07534     E0 9A B1 FD | 	call	#_pslpoke
07538                 | '    pslpoke(header(5)+16,header(4))  
07538                 | '    pslpoke(header(4)+20, header(5))
07538                 | '    return 0
07538     00 7A 06 F6 | 	mov	result1, #0
0753c     04 00 90 FD | 	jmp	#LR__0625
07540                 | LR__0624
07540     00 7A 06 F6 | 	mov	result1, #0
07544                 | LR__0625
07544     E7 F0 03 F6 | 	mov	ptra, fp
07548     F2 00 A0 FD | 	call	#popregs_
0754c                 | _deleteline_ret
0754c     2D 00 64 FD | 	ret
07550                 | 
07550                 | ' 
07550                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
07550                 | ' 
07550                 | ' sub save_line
07550                 | _save_line
07550     03 CA 05 F6 | 	mov	COUNT_, #3
07554     E8 00 A0 FD | 	call	#pushregs_
07558     4C 00 00 FF 
0755c     20 64 06 F1 | 	add	objptr, ##38944
07560     32 97 02 FB | 	rdlong	arg03, objptr
07564     01 96 06 F1 | 	add	arg03, #1
07568     05 00 00 FF 
0756c     18 64 86 F1 | 	sub	objptr, ##2584
07570     32 95 02 FB | 	rdlong	arg02, objptr
07574     4B 95 02 FD | 	qmul	arg02, arg03
07578     0E 00 00 FF 
0757c     44 64 86 F1 | 	sub	objptr, ##7236
07580     32 93 02 FB | 	rdlong	arg01, objptr
07584     38 00 00 FF 
07588     C4 65 86 F1 | 	sub	objptr, ##29124
0758c     49 A7 02 F6 | 	mov	local01, arg01
07590     18 A8 62 FD | 	getqx	local02
07594     D7 06 48 FB | 	callpa	#(@LR__0631-@LR__0630)>>2,fcache_load_ptr_
07598                 | LR__0630
07598     53 7B CA FA | 	rdbyte	result1, local01 wz
0759c     01 A6 06 51 |  if_ne	add	local01, #1
075a0     F4 FF 9F 5D |  if_ne	jmp	#LR__0630
075a4                 | LR__0631
075a4     49 A7 82 F1 | 	sub	local01, arg01
075a8     03 A6 CE F7 | 	test	local01, #3 wz
075ac     02 A6 46 50 |  if_ne	shr	local01, #2
075b0     01 A6 06 51 |  if_ne	add	local01, #1
075b4     02 A6 66 50 |  if_ne	shl	local01, #2
075b8     54 AB 02 F6 | 	mov	local03, local02
075bc     53 AB 02 F1 | 	add	local03, local01
075c0     45 00 00 FF 
075c4     00 64 06 F1 | 	add	objptr, ##35328
075c8     32 97 02 FB | 	rdlong	arg03, objptr
075cc     54 97 02 F1 | 	add	arg03, local02
075d0     04 00 00 FF 
075d4     28 64 06 F1 | 	add	objptr, ##2088
075d8     32 97 62 FC | 	wrlong	arg03, objptr
075dc     04 64 06 F1 | 	add	objptr, #4
075e0     32 A7 62 FC | 	wrlong	local01, objptr
075e4     0C 64 86 F1 | 	sub	objptr, #12
075e8     32 93 02 F6 | 	mov	arg01, objptr
075ec     04 00 00 FF 
075f0     20 64 86 F1 | 	sub	objptr, ##2080
075f4     32 95 02 FB | 	rdlong	arg02, objptr
075f8     54 97 02 F6 | 	mov	arg03, local02
075fc     39 00 00 FF 
07600     34 65 86 F1 | 	sub	objptr, ##29492
07604     BC C6 B1 FD | 	call	#_psram_spin2_write
07608     2D 00 00 FF 
0760c     F8 64 06 F1 | 	add	objptr, ##23288
07610     32 93 02 FB | 	rdlong	arg01, objptr
07614     0C 00 00 FF 
07618     3C 64 06 F1 | 	add	objptr, ##6204
0761c     32 95 02 FB | 	rdlong	arg02, objptr
07620     54 95 02 F1 | 	add	arg02, local02
07624     53 97 02 F6 | 	mov	arg03, local01
07628     39 00 00 FF 
0762c     34 65 86 F1 | 	sub	objptr, ##29492
07630     90 C6 B1 FD | 	call	#_psram_spin2_write
07634     39 00 00 FF 
07638     34 65 06 F1 | 	add	objptr, ##29492
0763c     32 A7 02 FB | 	rdlong	local01, objptr
07640     55 A7 02 F1 | 	add	local01, local03
07644     32 A7 62 FC | 	wrlong	local01, objptr
07648     45 00 00 FF 
0764c     00 64 86 F1 | 	sub	objptr, ##35328
07650     E7 F0 03 F6 | 	mov	ptra, fp
07654     F2 00 A0 FD | 	call	#popregs_
07658                 | _save_line_ret
07658     2D 00 64 FD | 	ret
0765c                 | 
0765c                 | ' 
0765c                 | ' '----- Insert a new line into the middle of the program
0765c                 | ' 
0765c                 | ' function insertline(aline as ulong) as integer
0765c                 | _insertline
0765c     04 CA 05 F6 | 	mov	COUNT_, #4
07660     E8 00 A0 FD | 	call	#pushregs_
07664     28 F0 07 F1 | 	add	ptra, #40
07668     49 A7 02 F6 | 	mov	local01, arg01
0766c     4C 00 00 FF 
07670     2C 64 06 F1 | 	add	objptr, ##38956
07674     32 A9 02 FB | 	rdlong	local02, objptr
07678                 | ' 
07678                 | ' do
07678     40 00 00 FF 
0767c     60 65 86 F1 | 	sub	objptr, ##33120
07680                 | LR__0640
07680     E7 92 02 F6 | 	mov	arg01, fp
07684     10 92 06 F1 | 	add	arg01, #16
07688     54 95 02 F6 | 	mov	arg02, local02
0768c     18 96 06 F6 | 	mov	arg03, #24
07690     94 C5 B1 FD | 	call	#_psram_spin2_read1
07694     54 AB 02 F6 | 	mov	local03, local02
07698     24 CE 05 F1 | 	add	fp, #36
0769c     E7 A8 02 FB | 	rdlong	local02, fp
076a0     14 CE 85 F1 | 	sub	fp, #20
076a4     E7 96 02 FB | 	rdlong	arg03, fp
076a8     10 CE 85 F1 | 	sub	fp, #16
076ac     53 97 12 F2 | 	cmp	arg03, local01 wc
076b0     24 CE 05 C1 |  if_b	add	fp, #36
076b4     E7 AC 02 CB |  if_b	rdlong	local04, fp
076b8     24 CE 85 C1 |  if_b	sub	fp, #36
076bc     FF FF 3F CF 
076c0     FF AD 0E C2 |  if_b	cmp	local04, ##2147483647 wz
076c4     B8 FF 9F 4D |  if_c_and_nz	jmp	#LR__0640
076c8     0B 00 00 FF 
076cc     CC 64 86 F1 | 	sub	objptr, ##5836
076d0                 | ' 
076d0                 | ' if header(0)=aline then return -1 				' delete it first
076d0     10 CE 05 F1 | 	add	fp, #16
076d4     E7 AC 02 FB | 	rdlong	local04, fp
076d8     10 CE 85 F1 | 	sub	fp, #16
076dc     53 AD 0A F2 | 	cmp	local04, local01 wz
076e0     01 7A 66 A6 |  if_e	neg	result1, #1
076e4     24 01 90 AD |  if_e	jmp	#LR__0643
076e8                 | ' if header(0)<aline then return -2 				' end of program reached
076e8     10 CE 05 F1 | 	add	fp, #16
076ec     E7 AC 02 FB | 	rdlong	local04, fp
076f0     10 CE 85 F1 | 	sub	fp, #16
076f4     53 AD 12 F2 | 	cmp	local04, local01 wc
076f8     02 7A 66 C6 |  if_b	neg	result1, #2
076fc     0C 01 90 CD |  if_b	jmp	#LR__0643
07700                 | ' 
07700                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
07700     20 CE 05 F1 | 	add	fp, #32
07704     E7 AC 02 FB | 	rdlong	local04, fp
07708     20 CE 85 F1 | 	sub	fp, #32
0770c     FF FF 7F FF 
07710     FF AD 0E F2 | 	cmp	local04, ##-1 wz
07714     64 00 90 5D |  if_ne	jmp	#LR__0641
07718     45 00 00 FF 
0771c     00 64 06 F1 | 	add	objptr, ##35328
07720     32 AD 02 FB | 	rdlong	local04, objptr
07724     07 00 00 FF 
07728     2C 64 06 F1 | 	add	objptr, ##3628
0772c     32 AD 62 FC | 	wrlong	local04, objptr
07730     55 93 02 F6 | 	mov	arg01, local03
07734     10 92 06 F1 | 	add	arg01, #16
07738     07 00 00 FF 
0773c     2C 64 86 F1 | 	sub	objptr, ##3628
07740     32 95 02 FB | 	rdlong	arg02, objptr
07744     45 00 00 FF 
07748     00 64 86 F1 | 	sub	objptr, ##35328
0774c     C8 98 B1 FD | 	call	#_pslpoke
07750     49 00 00 FF 
07754     30 64 06 F1 | 	add	objptr, ##37424
07758     FF FF FF FF 
0775c     32 FF 6B FC | 	wrlong	##-1, objptr
07760     04 64 06 F1 | 	add	objptr, #4
07764     32 AB 62 FC | 	wrlong	local03, objptr
07768     49 00 00 FF 
0776c     34 64 86 F1 | 	sub	objptr, ##37428
07770     DC FD BF FD | 	call	#_save_line
07774                 | '   programstart=programptr
07774                 | '   pslpoke(lineptr2+16,programptr)
07774                 | '   ucompiledline(4)=$FFFF_FFFF
07774                 | '   ucompiledline(5)=lineptr2
07774                 | '   save_line
07774                 | '   return 0
07774     00 7A 06 F6 | 	mov	result1, #0
07778     90 00 90 FD | 	jmp	#LR__0643
0777c                 | LR__0641
0777c                 | ' 
0777c                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
0777c     20 CE 05 F1 | 	add	fp, #32
07780     E7 AC 02 FB | 	rdlong	local04, fp
07784     20 CE 85 F1 | 	sub	fp, #32
07788     FF FF 7F FF 
0778c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
07790     74 00 90 AD |  if_e	jmp	#LR__0642
07794     20 CE 05 F1 | 	add	fp, #32
07798     E7 AC 02 FB | 	rdlong	local04, fp
0779c     20 CE 85 F1 | 	sub	fp, #32
077a0     49 00 00 FF 
077a4     30 64 06 F1 | 	add	objptr, ##37424
077a8     32 AD 62 FC | 	wrlong	local04, objptr
077ac     04 64 06 F1 | 	add	objptr, #4
077b0     32 AB 62 FC | 	wrlong	local03, objptr
077b4     10 AA 06 F1 | 	add	local03, #16
077b8     04 00 00 FF 
077bc     34 64 86 F1 | 	sub	objptr, ##2100
077c0     32 95 02 FB | 	rdlong	arg02, objptr
077c4     45 00 00 FF 
077c8     00 64 86 F1 | 	sub	objptr, ##35328
077cc     55 93 02 F6 | 	mov	arg01, local03
077d0     44 98 B1 FD | 	call	#_pslpoke
077d4     20 CE 05 F1 | 	add	fp, #32
077d8     E7 92 02 FB | 	rdlong	arg01, fp
077dc     20 CE 85 F1 | 	sub	fp, #32
077e0     14 92 06 F1 | 	add	arg01, #20
077e4     45 00 00 FF 
077e8     00 64 06 F1 | 	add	objptr, ##35328
077ec     32 95 02 FB | 	rdlong	arg02, objptr
077f0     45 00 00 FF 
077f4     00 64 86 F1 | 	sub	objptr, ##35328
077f8     1C 98 B1 FD | 	call	#_pslpoke
077fc     50 FD BF FD | 	call	#_save_line
07800                 | '   ucompiledline(4)=header(4)
07800                 | '   ucompiledline(5)=lineptr2
07800                 | '   pslpoke(lineptr2+16,programptr)
07800                 | '   pslpoke(header(4)+20,programptr)
07800                 | '   save_line
07800                 | '   return 0
07800     00 7A 06 F6 | 	mov	result1, #0
07804     04 00 90 FD | 	jmp	#LR__0643
07808                 | LR__0642
07808     00 7A 06 F6 | 	mov	result1, #0
0780c                 | LR__0643
0780c     E7 F0 03 F6 | 	mov	ptra, fp
07810     F2 00 A0 FD | 	call	#popregs_
07814                 | _insertline_ret
07814     2D 00 64 FD | 	ret
07818                 | 
07818                 | ' 
07818                 | ' '----- Adds a new line at the end of the program
07818                 | ' 
07818                 | ' sub add_line_at_end(aline) 
07818                 | _add_line_at_end
07818     4C 00 00 FF 
0781c     30 64 06 F1 | 	add	objptr, ##38960
07820     32 93 62 FC | 	wrlong	arg01, objptr
07824     04 64 06 F1 | 	add	objptr, #4
07828     32 95 02 FB | 	rdlong	arg02, objptr
0782c     03 00 00 FF 
07830     04 64 86 F1 | 	sub	objptr, ##1540
07834     32 95 62 FC | 	wrlong	arg02, objptr
07838     03 00 00 FF 
0783c     04 64 06 F1 | 	add	objptr, ##1540
07840     32 93 02 FB | 	rdlong	arg01, objptr
07844     14 92 06 F1 | 	add	arg01, #20
07848     07 00 00 FF 
0784c     34 64 86 F1 | 	sub	objptr, ##3636
07850     32 95 02 FB | 	rdlong	arg02, objptr
07854     45 00 00 FF 
07858     00 64 86 F1 | 	sub	objptr, ##35328
0785c     B8 97 B1 FD | 	call	#_pslpoke
07860     45 00 00 FF 
07864     00 64 06 F1 | 	add	objptr, ##35328
07868     32 95 02 FB | 	rdlong	arg02, objptr
0786c     07 00 00 FF 
07870     34 64 06 F1 | 	add	objptr, ##3636
07874     32 95 62 FC | 	wrlong	arg02, objptr
07878     03 00 00 FF 
0787c     00 64 86 F1 | 	sub	objptr, ##1536
07880     FF FF BF FF 
07884     32 FF 6B FC | 	wrlong	##2147483647, objptr
07888                 | ' 
07888                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07888                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07888     04 00 00 FF 
0788c     34 64 86 F1 | 	sub	objptr, ##2100
07890     32 95 02 FB | 	rdlong	arg02, objptr
07894     45 00 00 FF 
07898     00 64 86 F1 | 	sub	objptr, ##35328
0789c     00 04 00 FF 
078a0     00 94 0E F2 | 	cmp	arg02, ##524288 wz
078a4     49 00 00 AF 
078a8     30 64 06 A1 |  if_e	add	objptr, ##37424
078ac     FF FF FF AF 
078b0     32 FF 6B AC |  if_e	wrlong	##-1, objptr
078b4     49 00 00 AF 
078b8     30 64 86 A1 |  if_e	sub	objptr, ##37424
078bc     90 FC BF FD | 	call	#_save_line
078c0     45 00 00 FF 
078c4     00 64 06 F1 | 	add	objptr, ##35328
078c8     32 93 02 FB | 	rdlong	arg01, objptr
078cc     45 00 00 FF 
078d0     00 64 86 F1 | 	sub	objptr, ##35328
078d4     01 94 66 F6 | 	neg	arg02, #1
078d8     3C 97 B1 FD | 	call	#_pslpoke
078dc                 | _add_line_at_end_ret
078dc     2D 00 64 FD | 	ret
078e0                 | 
078e0                 | ' 
078e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
078e0                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
078e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
078e0                 | ' 
078e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
078e0                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
078e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
078e0                 | ' 
078e0                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
078e0                 | ' 
078e0                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
078e0                 | _compile_immediate
078e0     0A CA 05 F6 | 	mov	COUNT_, #10
078e4     E8 00 A0 FD | 	call	#pushregs_
078e8                 | _compile_immediate_enter
078e8     49 AD 02 F6 | 	mov	local04, arg01
078ec     4A AF 02 F6 | 	mov	local05, arg02
078f0     00 B0 06 F6 | 	mov	local06, #0
078f4     00 B2 06 F6 | 	mov	local07, #0
078f8     00 B4 06 F6 | 	mov	local08, #0
078fc                 | ' 
078fc                 | ' ' linetype=cont+1
078fc                 | ' ' 1 : this is the first part of the line that will continue
078fc                 | ' ' 2 - this is the continuation of the line
078fc                 | ' ' 3 - this is the last continued line
078fc                 | ' ' 4 - this is the one and only part
078fc                 | ' ' 5 - continued after if/else
078fc                 | ' 
078fc                 | ' err=0
078fc                 | ' cmd=0
078fc                 | ' vars=0
078fc                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
078fc     02 AC 0E F2 | 	cmp	local04, #2 wz
07900     03 AC 0E 52 |  if_ne	cmp	local04, #3 wz
07904     36 00 00 AF 
07908     B4 65 06 A1 |  if_e	add	objptr, ##28084
0790c     32 B3 02 AB |  if_e	rdlong	local07, objptr
07910     02 00 00 AF 
07914     34 64 06 A1 |  if_e	add	objptr, ##1076
07918     32 03 68 AC |  if_e	wrlong	#1, objptr
0791c     38 00 00 AF 
07920     E8 65 86 A1 |  if_e	sub	objptr, ##29160
07924                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
07924     04 AC 0E F2 | 	cmp	local04, #4 wz
07928     01 AC 0E 52 |  if_ne	cmp	local04, #1 wz
0792c     2C 00 90 5D |  if_ne	jmp	#LR__0650
07930     36 00 00 FF 
07934     BC 65 06 F1 | 	add	objptr, ##28092
07938     32 B3 02 FB | 	rdlong	local07, objptr
0793c     02 00 00 FF 
07940     2C 64 06 F1 | 	add	objptr, ##1068
07944     32 05 68 FC | 	wrlong	#2, objptr
07948     13 00 00 FF 
0794c     38 64 06 F1 | 	add	objptr, ##9784
07950     32 05 68 FC | 	wrlong	#2, objptr
07954     4C 00 00 FF 
07958     20 64 86 F1 | 	sub	objptr, ##38944
0795c                 | LR__0650
0795c                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
0795c     05 AC 0E F2 | 	cmp	local04, #5 wz
07960     40 00 90 5D |  if_ne	jmp	#LR__0651
07964     38 00 00 FF 
07968     E8 65 06 F1 | 	add	objptr, ##29160
0796c     32 7D 02 FB | 	rdlong	result2, objptr
07970     3E B7 02 F6 | 	mov	local09, result2
07974     03 B6 66 F0 | 	shl	local09, #3
07978     02 00 00 FF 
0797c     38 64 86 F1 | 	sub	objptr, ##1080
07980     32 B7 02 F1 | 	add	local09, objptr
07984     04 B6 06 F1 | 	add	local09, #4
07988     5B B3 02 FB | 	rdlong	local07, local09
0798c     01 7C 06 F1 | 	add	result2, #1
07990     02 00 00 FF 
07994     38 64 06 F1 | 	add	objptr, ##1080
07998     32 7D 62 FC | 	wrlong	result2, objptr
0799c     38 00 00 FF 
079a0     E8 65 86 F1 | 	sub	objptr, ##29160
079a4                 | LR__0651
079a4                 | ' 
079a4                 | ' 'print  "In compile_immediate cmd=:", cmd
079a4                 | ' 451 select case cmd
079a4     5C B2 0E F2 | 	cmp	local07, #92 wz
079a8     E8 02 90 AD |  if_e	jmp	#LR__0652
079ac     B9 B2 0E F2 | 	cmp	local07, #185 wz
079b0     EC 02 90 AD |  if_e	jmp	#LR__0653
079b4     47 B2 0E F2 | 	cmp	local07, #71 wz
079b8     F4 02 90 AD |  if_e	jmp	#LR__0654
079bc     59 B2 0E F2 | 	cmp	local07, #89 wz
079c0     FC 02 90 AD |  if_e	jmp	#LR__0655
079c4     C3 B2 0E F2 | 	cmp	local07, #195 wz
079c8     04 03 90 AD |  if_e	jmp	#LR__0656
079cc     45 B2 0E F2 | 	cmp	local07, #69 wz
079d0     08 03 90 AD |  if_e	jmp	#LR__0657
079d4     69 B2 0E F2 | 	cmp	local07, #105 wz
079d8     10 03 90 AD |  if_e	jmp	#LR__0658
079dc     40 B2 0E F2 | 	cmp	local07, #64 wz
079e0     18 07 90 AD |  if_e	jmp	#LR__0735
079e4     B4 B2 0E F2 | 	cmp	local07, #180 wz
079e8     0C 03 90 AD |  if_e	jmp	#LR__0659
079ec     49 B2 0E F2 | 	cmp	local07, #73 wz
079f0     10 03 90 AD |  if_e	jmp	#LR__0660
079f4     C4 B2 0E F2 | 	cmp	local07, #196 wz
079f8     14 03 90 AD |  if_e	jmp	#LR__0661
079fc     AE B2 0E F2 | 	cmp	local07, #174 wz
07a00     18 03 90 AD |  if_e	jmp	#LR__0662
07a04     B0 B2 0E F2 | 	cmp	local07, #176 wz
07a08     1C 03 90 AD |  if_e	jmp	#LR__0663
07a0c     AF B2 0E F2 | 	cmp	local07, #175 wz
07a10     20 03 90 AD |  if_e	jmp	#LR__0664
07a14     B1 B2 0E F2 | 	cmp	local07, #177 wz
07a18     24 03 90 AD |  if_e	jmp	#LR__0665
07a1c     CF B2 0E F2 | 	cmp	local07, #207 wz
07a20     28 03 90 AD |  if_e	jmp	#LR__0666
07a24     68 B2 0E F2 | 	cmp	local07, #104 wz
07a28     2C 03 90 AD |  if_e	jmp	#LR__0667
07a2c     B7 B2 0E F2 | 	cmp	local07, #183 wz
07a30     C8 06 90 AD |  if_e	jmp	#LR__0735
07a34     D9 B2 0E F2 | 	cmp	local07, #217 wz
07a38     28 03 90 AD |  if_e	jmp	#LR__0668
07a3c     74 B2 0E F2 | 	cmp	local07, #116 wz
07a40     2C 03 90 AD |  if_e	jmp	#LR__0669
07a44     73 B2 0E F2 | 	cmp	local07, #115 wz
07a48     34 03 90 AD |  if_e	jmp	#LR__0670
07a4c     6C B2 0E F2 | 	cmp	local07, #108 wz
07a50     3C 03 90 AD |  if_e	jmp	#LR__0671
07a54     89 B2 0E F2 | 	cmp	local07, #137 wz
07a58     A0 06 90 AD |  if_e	jmp	#LR__0735
07a5c     C2 B2 0E F2 | 	cmp	local07, #194 wz
07a60     3C 03 90 AD |  if_e	jmp	#LR__0672
07a64     72 B2 0E F2 | 	cmp	local07, #114 wz
07a68     40 03 90 AD |  if_e	jmp	#LR__0673
07a6c     5D B2 0E F2 | 	cmp	local07, #93 wz
07a70     44 03 90 AD |  if_e	jmp	#LR__0674
07a74     96 B2 0E F2 | 	cmp	local07, #150 wz
07a78     4C 03 90 AD |  if_e	jmp	#LR__0675
07a7c     43 B2 0E F2 | 	cmp	local07, #67 wz
07a80     50 03 90 AD |  if_e	jmp	#LR__0676
07a84     5A B2 0E F2 | 	cmp	local07, #90 wz
07a88     58 03 90 AD |  if_e	jmp	#LR__0677
07a8c     AB B2 0E F2 | 	cmp	local07, #171 wz
07a90     68 06 90 AD |  if_e	jmp	#LR__0735
07a94     BD B2 0E F2 | 	cmp	local07, #189 wz
07a98     58 03 90 AD |  if_e	jmp	#LR__0678
07a9c     BB B2 0E F2 | 	cmp	local07, #187 wz
07aa0     60 03 90 AD |  if_e	jmp	#LR__0679
07aa4     4E B2 0E F2 | 	cmp	local07, #78 wz
07aa8     68 03 90 AD |  if_e	jmp	#LR__0680
07aac     A9 B2 0E F2 | 	cmp	local07, #169 wz
07ab0     80 03 90 AD |  if_e	jmp	#LR__0682
07ab4     46 B2 0E F2 | 	cmp	local07, #70 wz
07ab8     98 03 90 AD |  if_e	jmp	#LR__0684
07abc     71 B2 0E F2 | 	cmp	local07, #113 wz
07ac0     A0 03 90 AD |  if_e	jmp	#LR__0685
07ac4     60 B2 0E F2 | 	cmp	local07, #96 wz
07ac8     A4 03 90 AD |  if_e	jmp	#LR__0686
07acc     4A B2 0E F2 | 	cmp	local07, #74 wz
07ad0     A8 03 90 AD |  if_e	jmp	#LR__0687
07ad4     48 B2 0E F2 | 	cmp	local07, #72 wz
07ad8     AC 03 90 AD |  if_e	jmp	#LR__0688
07adc     58 B2 0E F2 | 	cmp	local07, #88 wz
07ae0     B4 03 90 AD |  if_e	jmp	#LR__0689
07ae4     5F B2 0E F2 | 	cmp	local07, #95 wz
07ae8     BC 03 90 AD |  if_e	jmp	#LR__0690
07aec     B5 B2 0E F2 | 	cmp	local07, #181 wz
07af0     C0 03 90 AD |  if_e	jmp	#LR__0691
07af4     8A B2 0E F2 | 	cmp	local07, #138 wz
07af8     C8 03 90 AD |  if_e	jmp	#LR__0692
07afc     4C B2 0E F2 | 	cmp	local07, #76 wz
07b00     CC 03 90 AD |  if_e	jmp	#LR__0693
07b04     52 B2 0E F2 | 	cmp	local07, #82 wz
07b08     D4 03 90 AD |  if_e	jmp	#LR__0694
07b0c     97 B2 0E F2 | 	cmp	local07, #151 wz
07b10     DC 03 90 AD |  if_e	jmp	#LR__0695
07b14     C6 B2 0E F2 | 	cmp	local07, #198 wz
07b18     E0 03 90 AD |  if_e	jmp	#LR__0696
07b1c     61 B2 0E F2 | 	cmp	local07, #97 wz
07b20     E4 03 90 AD |  if_e	jmp	#LR__0697
07b24     63 B2 0E F2 | 	cmp	local07, #99 wz
07b28     E8 03 90 AD |  if_e	jmp	#LR__0698
07b2c     41 B2 0E F2 | 	cmp	local07, #65 wz
07b30     C8 05 90 AD |  if_e	jmp	#LR__0735
07b34     4B B2 0E F2 | 	cmp	local07, #75 wz
07b38     E4 03 90 AD |  if_e	jmp	#LR__0699
07b3c     C1 B2 0E F2 | 	cmp	local07, #193 wz
07b40     E8 03 90 AD |  if_e	jmp	#LR__0700
07b44     B3 B2 0E F2 | 	cmp	local07, #179 wz
07b48     EC 03 90 AD |  if_e	jmp	#LR__0701
07b4c     5E B2 0E F2 | 	cmp	local07, #94 wz
07b50     F0 03 90 AD |  if_e	jmp	#LR__0702
07b54     7C B2 0E F2 | 	cmp	local07, #124 wz
07b58     F4 03 90 AD |  if_e	jmp	#LR__0703
07b5c     7D B2 0E F2 | 	cmp	local07, #125 wz
07b60     F8 03 90 AD |  if_e	jmp	#LR__0704
07b64     7E B2 0E F2 | 	cmp	local07, #126 wz
07b68     FC 03 90 AD |  if_e	jmp	#LR__0705
07b6c     7F B2 0E F2 | 	cmp	local07, #127 wz
07b70     00 04 90 AD |  if_e	jmp	#LR__0706
07b74     80 B2 0E F2 | 	cmp	local07, #128 wz
07b78     04 04 90 AD |  if_e	jmp	#LR__0707
07b7c     55 B2 0E F2 | 	cmp	local07, #85 wz
07b80     08 04 90 AD |  if_e	jmp	#LR__0708
07b84     75 B2 0E F2 | 	cmp	local07, #117 wz
07b88     0C 04 90 AD |  if_e	jmp	#LR__0709
07b8c     42 B2 0E F2 | 	cmp	local07, #66 wz
07b90     14 04 90 AD |  if_e	jmp	#LR__0710
07b94     95 B2 0E F2 | 	cmp	local07, #149 wz
07b98     1C 04 90 AD |  if_e	jmp	#LR__0711
07b9c     AC B2 0E F2 | 	cmp	local07, #172 wz
07ba0     58 05 90 AD |  if_e	jmp	#LR__0735
07ba4     81 B2 0E F2 | 	cmp	local07, #129 wz
07ba8     18 04 90 AD |  if_e	jmp	#LR__0712
07bac     44 B2 0E F2 | 	cmp	local07, #68 wz
07bb0     1C 04 90 AD |  if_e	jmp	#LR__0713
07bb4     BC B2 0E F2 | 	cmp	local07, #188 wz
07bb8     20 04 90 AD |  if_e	jmp	#LR__0714
07bbc     88 B2 0E F2 | 	cmp	local07, #136 wz
07bc0     38 05 90 AD |  if_e	jmp	#LR__0735
07bc4     B6 B2 0E F2 | 	cmp	local07, #182 wz
07bc8     20 04 90 AD |  if_e	jmp	#LR__0715
07bcc     92 B2 0E F2 | 	cmp	local07, #146 wz
07bd0     28 04 90 AD |  if_e	jmp	#LR__0716
07bd4     BE B2 0E F2 | 	cmp	local07, #190 wz
07bd8     DC 05 90 AD |  if_e	jmp	#LR__0736
07bdc     C7 B2 0E F2 | 	cmp	local07, #199 wz
07be0     D4 B2 0E 52 |  if_ne	cmp	local07, #212 wz
07be4     AA B2 0E 52 |  if_ne	cmp	local07, #170 wz
07be8     10 05 90 AD |  if_e	jmp	#LR__0735
07bec     4D B2 0E F2 | 	cmp	local07, #77 wz
07bf0     14 04 90 AD |  if_e	jmp	#LR__0717
07bf4     51 B2 0E F2 | 	cmp	local07, #81 wz
07bf8     1C 04 90 AD |  if_e	jmp	#LR__0718
07bfc     DA B2 0E F2 | 	cmp	local07, #218 wz
07c00     24 04 90 AD |  if_e	jmp	#LR__0719
07c04     D2 B2 0E F2 | 	cmp	local07, #210 wz
07c08     28 04 90 AD |  if_e	jmp	#LR__0720
07c0c     8E B2 0E F2 | 	cmp	local07, #142 wz
07c10     30 04 90 AD |  if_e	jmp	#LR__0721
07c14     90 B2 0E F2 | 	cmp	local07, #144 wz
07c18     34 04 90 AD |  if_e	jmp	#LR__0722
07c1c     8D B2 0E F2 | 	cmp	local07, #141 wz
07c20     38 04 90 AD |  if_e	jmp	#LR__0723
07c24     8C B2 0E F2 | 	cmp	local07, #140 wz
07c28     3C 04 90 AD |  if_e	jmp	#LR__0724
07c2c     91 B2 0E F2 | 	cmp	local07, #145 wz
07c30     40 04 90 AD |  if_e	jmp	#LR__0725
07c34     8B B2 0E F2 | 	cmp	local07, #139 wz
07c38     44 04 90 AD |  if_e	jmp	#LR__0726
07c3c     8F B2 0E F2 | 	cmp	local07, #143 wz
07c40     48 04 90 AD |  if_e	jmp	#LR__0727
07c44     B2 B2 0E F2 | 	cmp	local07, #178 wz
07c48     4C 04 90 AD |  if_e	jmp	#LR__0728
07c4c     6D B2 0E F2 | 	cmp	local07, #109 wz
07c50     54 04 90 AD |  if_e	jmp	#LR__0729
07c54     70 B2 0E F2 | 	cmp	local07, #112 wz
07c58     A0 04 90 AD |  if_e	jmp	#LR__0735
07c5c     56 B2 0E F2 | 	cmp	local07, #86 wz
07c60     50 04 90 AD |  if_e	jmp	#LR__0730
07c64     57 B2 0E F2 | 	cmp	local07, #87 wz
07c68     90 04 90 AD |  if_e	jmp	#LR__0735
07c6c     79 B2 0E F2 | 	cmp	local07, #121 wz
07c70     4C 04 90 AD |  if_e	jmp	#LR__0731
07c74     77 B2 0E F2 | 	cmp	local07, #119 wz
07c78     50 04 90 AD |  if_e	jmp	#LR__0732
07c7c     78 B2 0E F2 | 	cmp	local07, #120 wz
07c80     54 04 90 AD |  if_e	jmp	#LR__0733
07c84     01 00 00 FF 
07c88     04 B2 0E F2 | 	cmp	local07, ##516 wz
07c8c     54 04 90 AD |  if_e	jmp	#LR__0734
07c90     24 05 90 FD | 	jmp	#LR__0736
07c94                 | LR__0652
07c94     54 0B B0 FD | 	call	#_compile_fun_2p
07c98     3D B1 02 F6 | 	mov	local06, result1
07c9c     5C 04 90 FD | 	jmp	#LR__0735
07ca0                 | LR__0653
07ca0     18 0E B0 FD | 	call	#_compile_fun_varp
07ca4     3D B5 02 F6 | 	mov	local08, result1
07ca8     3E B1 02 F6 | 	mov	local06, result2
07cac     4C 04 90 FD | 	jmp	#LR__0735
07cb0                 | LR__0654
07cb0     08 0E B0 FD | 	call	#_compile_fun_varp
07cb4     3D B5 02 F6 | 	mov	local08, result1
07cb8     3E B1 02 F6 | 	mov	local06, result2
07cbc     3C 04 90 FD | 	jmp	#LR__0735
07cc0                 | LR__0655
07cc0     F8 0D B0 FD | 	call	#_compile_fun_varp
07cc4     3D B5 02 F6 | 	mov	local08, result1
07cc8     3E B1 02 F6 | 	mov	local06, result2
07ccc     2C 04 90 FD | 	jmp	#LR__0735
07cd0                 | LR__0656
07cd0                 | ' return expr()
07cd0     84 41 B0 FD | 	call	#_expr
07cd4     3D B1 02 F6 | 	mov	local06, result1
07cd8     20 04 90 FD | 	jmp	#LR__0735
07cdc                 | LR__0657
07cdc     DC 0D B0 FD | 	call	#_compile_fun_varp
07ce0     3D B5 02 F6 | 	mov	local08, result1
07ce4     3E B1 02 F6 | 	mov	local06, result2
07ce8     10 04 90 FD | 	jmp	#LR__0735
07cec                 | LR__0658
07cec                 | ' return expr()
07cec     68 41 B0 FD | 	call	#_expr
07cf0     3D B1 02 F6 | 	mov	local06, result1
07cf4     04 04 90 FD | 	jmp	#LR__0735
07cf8                 | LR__0659
07cf8                 | ' return expr()
07cf8     5C 41 B0 FD | 	call	#_expr
07cfc     3D B1 02 F6 | 	mov	local06, result1
07d00     F8 03 90 FD | 	jmp	#LR__0735
07d04                 | LR__0660
07d04                 | ' return expr()
07d04     50 41 B0 FD | 	call	#_expr
07d08     3D B1 02 F6 | 	mov	local06, result1
07d0c     EC 03 90 FD | 	jmp	#LR__0735
07d10                 | LR__0661
07d10     D8 0A B0 FD | 	call	#_compile_fun_2p
07d14     3D B1 02 F6 | 	mov	local06, result1
07d18     E0 03 90 FD | 	jmp	#LR__0735
07d1c                 | LR__0662
07d1c     CC 0A B0 FD | 	call	#_compile_fun_2p
07d20     3D B1 02 F6 | 	mov	local06, result1
07d24     D4 03 90 FD | 	jmp	#LR__0735
07d28                 | LR__0663
07d28     C0 0A B0 FD | 	call	#_compile_fun_2p
07d2c     3D B1 02 F6 | 	mov	local06, result1
07d30     C8 03 90 FD | 	jmp	#LR__0735
07d34                 | LR__0664
07d34     B4 0A B0 FD | 	call	#_compile_fun_2p
07d38     3D B1 02 F6 | 	mov	local06, result1
07d3c     BC 03 90 FD | 	jmp	#LR__0735
07d40                 | LR__0665
07d40     A8 0A B0 FD | 	call	#_compile_fun_2p
07d44     3D B1 02 F6 | 	mov	local06, result1
07d48     B0 03 90 FD | 	jmp	#LR__0735
07d4c                 | LR__0666
07d4c                 | ' return expr()
07d4c     08 41 B0 FD | 	call	#_expr
07d50     3D B1 02 F6 | 	mov	local06, result1
07d54     A4 03 90 FD | 	jmp	#LR__0735
07d58                 | LR__0667
07d58                 | ' return expr()
07d58     FC 40 B0 FD | 	call	#_expr
07d5c     3D B1 02 F6 | 	mov	local06, result1
07d60     98 03 90 FD | 	jmp	#LR__0735
07d64                 | LR__0668
07d64     84 0A B0 FD | 	call	#_compile_fun_2p
07d68     3D B1 02 F6 | 	mov	local06, result1
07d6c     8C 03 90 FD | 	jmp	#LR__0735
07d70                 | LR__0669
07d70     48 0D B0 FD | 	call	#_compile_fun_varp
07d74     3D B5 02 F6 | 	mov	local08, result1
07d78     3E B1 02 F6 | 	mov	local06, result2
07d7c     7C 03 90 FD | 	jmp	#LR__0735
07d80                 | LR__0670
07d80     38 0D B0 FD | 	call	#_compile_fun_varp
07d84     3D B5 02 F6 | 	mov	local08, result1
07d88     3E B1 02 F6 | 	mov	local06, result2
07d8c     6C 03 90 FD | 	jmp	#LR__0735
07d90                 | LR__0671
07d90     28 0D B0 FD | 	call	#_compile_fun_varp
07d94     3D B5 02 F6 | 	mov	local08, result1
07d98     3E B1 02 F6 | 	mov	local06, result2
07d9c     5C 03 90 FD | 	jmp	#LR__0735
07da0                 | LR__0672
07da0                 | ' return expr()
07da0     B4 40 B0 FD | 	call	#_expr
07da4     3D B1 02 F6 | 	mov	local06, result1
07da8     50 03 90 FD | 	jmp	#LR__0735
07dac                 | LR__0673
07dac     2C 22 B0 FD | 	call	#_compile_dim
07db0     3D B1 02 F6 | 	mov	local06, result1
07db4     00 04 90 FD | 	jmp	#LR__0736
07db8                 | LR__0674
07db8     00 0D B0 FD | 	call	#_compile_fun_varp
07dbc     3D B5 02 F6 | 	mov	local08, result1
07dc0     3E B1 02 F6 | 	mov	local06, result2
07dc4     34 03 90 FD | 	jmp	#LR__0735
07dc8                 | LR__0675
07dc8     20 0A B0 FD | 	call	#_compile_fun_2p
07dcc     3D B1 02 F6 | 	mov	local06, result1
07dd0     28 03 90 FD | 	jmp	#LR__0735
07dd4                 | LR__0676
07dd4     E4 0C B0 FD | 	call	#_compile_fun_varp
07dd8     3D B5 02 F6 | 	mov	local08, result1
07ddc     3E B1 02 F6 | 	mov	local06, result2
07de0     18 03 90 FD | 	jmp	#LR__0735
07de4                 | LR__0677
07de4     57 93 02 F6 | 	mov	arg01, local05
07de8     B8 20 B0 FD | 	call	#_compile_else
07dec     3D B1 02 F6 | 	mov	local06, result1
07df0     C4 03 90 FD | 	jmp	#LR__0736
07df4                 | LR__0678
07df4     C4 0C B0 FD | 	call	#_compile_fun_varp
07df8     3D B5 02 F6 | 	mov	local08, result1
07dfc     3E B1 02 F6 | 	mov	local06, result2
07e00     F8 02 90 FD | 	jmp	#LR__0735
07e04                 | LR__0679
07e04     B4 0C B0 FD | 	call	#_compile_fun_varp
07e08     3D B5 02 F6 | 	mov	local08, result1
07e0c     3E B1 02 F6 | 	mov	local06, result2
07e10     E8 02 90 FD | 	jmp	#LR__0735
07e14                 | LR__0680
07e14     01 AE 16 F2 | 	cmp	local05, #1 wc
07e18     08 00 90 CD |  if_b	jmp	#LR__0681
07e1c     40 33 B0 FD | 	call	#_compile_goto
07e20     94 03 90 FD | 	jmp	#LR__0736
07e24                 | LR__0681
07e24     19 92 06 F6 | 	mov	arg01, #25
07e28     00 94 06 F6 | 	mov	arg02, #0
07e2c     50 90 B1 FD | 	call	#_printerror
07e30     84 03 90 FD | 	jmp	#LR__0736
07e34                 | LR__0682
07e34     01 AE 16 F2 | 	cmp	local05, #1 wc
07e38     08 00 90 CD |  if_b	jmp	#LR__0683
07e3c     BC 32 B0 FD | 	call	#_compile_gosub
07e40     74 03 90 FD | 	jmp	#LR__0736
07e44                 | LR__0683
07e44     19 92 06 F6 | 	mov	arg01, #25
07e48     00 94 06 F6 | 	mov	arg02, #0
07e4c     30 90 B1 FD | 	call	#_printerror
07e50     64 03 90 FD | 	jmp	#LR__0736
07e54                 | LR__0684
07e54     64 0C B0 FD | 	call	#_compile_fun_varp
07e58     3D B5 02 F6 | 	mov	local08, result1
07e5c     3E B1 02 F6 | 	mov	local06, result2
07e60     98 02 90 FD | 	jmp	#LR__0735
07e64                 | LR__0685
07e64     FC 0A B0 FD | 	call	#_compile_fun_4p
07e68     3D B1 02 F6 | 	mov	local06, result1
07e6c     8C 02 90 FD | 	jmp	#LR__0735
07e70                 | LR__0686
07e70                 | ' return expr()
07e70     E4 3F B0 FD | 	call	#_expr
07e74     3D B1 02 F6 | 	mov	local06, result1
07e78     80 02 90 FD | 	jmp	#LR__0735
07e7c                 | LR__0687
07e7c     10 28 B0 FD | 	call	#_compile_for
07e80     3D B1 02 F6 | 	mov	local06, result1
07e84     30 03 90 FD | 	jmp	#LR__0736
07e88                 | LR__0688
07e88     30 0C B0 FD | 	call	#_compile_fun_varp
07e8c     3D B5 02 F6 | 	mov	local08, result1
07e90     3E B1 02 F6 | 	mov	local06, result2
07e94     64 02 90 FD | 	jmp	#LR__0735
07e98                 | LR__0689
07e98     57 93 02 F6 | 	mov	arg01, local05
07e9c     7C 1E B0 FD | 	call	#_compile_if
07ea0     3D B1 02 F6 | 	mov	local06, result1
07ea4     10 03 90 FD | 	jmp	#LR__0736
07ea8                 | LR__0690
07ea8                 | ' return expr()
07ea8     AC 3F B0 FD | 	call	#_expr
07eac     3D B1 02 F6 | 	mov	local06, result1
07eb0     48 02 90 FD | 	jmp	#LR__0735
07eb4                 | LR__0691
07eb4     D0 0D B0 FD | 	call	#_compile_input
07eb8     3D B5 02 F6 | 	mov	local08, result1
07ebc     3E B1 02 F6 | 	mov	local06, result2
07ec0     38 02 90 FD | 	jmp	#LR__0735
07ec4                 | LR__0692
07ec4                 | ' return expr()
07ec4     90 3F B0 FD | 	call	#_expr
07ec8     3D B1 02 F6 | 	mov	local06, result1
07ecc     2C 02 90 FD | 	jmp	#LR__0735
07ed0                 | LR__0693
07ed0     E8 0B B0 FD | 	call	#_compile_fun_varp
07ed4     3D B5 02 F6 | 	mov	local08, result1
07ed8     3E B1 02 F6 | 	mov	local06, result2
07edc     1C 02 90 FD | 	jmp	#LR__0735
07ee0                 | LR__0694
07ee0     D8 0B B0 FD | 	call	#_compile_fun_varp
07ee4     3D B5 02 F6 | 	mov	local08, result1
07ee8     3E B1 02 F6 | 	mov	local06, result2
07eec     0C 02 90 FD | 	jmp	#LR__0735
07ef0                 | LR__0695
07ef0     F8 08 B0 FD | 	call	#_compile_fun_2p
07ef4     3D B1 02 F6 | 	mov	local06, result1
07ef8     00 02 90 FD | 	jmp	#LR__0735
07efc                 | LR__0696
07efc                 | ' return expr()
07efc     58 3F B0 FD | 	call	#_expr
07f00     3D B1 02 F6 | 	mov	local06, result1
07f04     F4 01 90 FD | 	jmp	#LR__0735
07f08                 | LR__0697
07f08                 | ' return expr()
07f08     4C 3F B0 FD | 	call	#_expr
07f0c     3D B1 02 F6 | 	mov	local06, result1
07f10     E8 01 90 FD | 	jmp	#LR__0735
07f14                 | LR__0698
07f14                 | ' return expr()
07f14     40 3F B0 FD | 	call	#_expr
07f18     3D B1 02 F6 | 	mov	local06, result1
07f1c     DC 01 90 FD | 	jmp	#LR__0735
07f20                 | LR__0699
07f20     44 30 B0 FD | 	call	#_compile_next
07f24     3D B1 02 F6 | 	mov	local06, result1
07f28     8C 02 90 FD | 	jmp	#LR__0736
07f2c                 | LR__0700
07f2c     A4 35 B0 FD | 	call	#_compile_on
07f30     3D B1 02 F6 | 	mov	local06, result1
07f34     80 02 90 FD | 	jmp	#LR__0736
07f38                 | LR__0701
07f38     38 09 B0 FD | 	call	#_compile_fun_3p
07f3c     3D B1 02 F6 | 	mov	local06, result1
07f40     B8 01 90 FD | 	jmp	#LR__0735
07f44                 | LR__0702
07f44                 | ' return expr()
07f44     10 3F B0 FD | 	call	#_expr
07f48     3D B1 02 F6 | 	mov	local06, result1
07f4c     AC 01 90 FD | 	jmp	#LR__0735
07f50                 | LR__0703
07f50                 | ' return expr()
07f50     04 3F B0 FD | 	call	#_expr
07f54     3D B1 02 F6 | 	mov	local06, result1
07f58     A0 01 90 FD | 	jmp	#LR__0735
07f5c                 | LR__0704
07f5c                 | ' return expr()
07f5c     F8 3E B0 FD | 	call	#_expr
07f60     3D B1 02 F6 | 	mov	local06, result1
07f64     94 01 90 FD | 	jmp	#LR__0735
07f68                 | LR__0705
07f68                 | ' return expr()
07f68     EC 3E B0 FD | 	call	#_expr
07f6c     3D B1 02 F6 | 	mov	local06, result1
07f70     88 01 90 FD | 	jmp	#LR__0735
07f74                 | LR__0706
07f74     EC 09 B0 FD | 	call	#_compile_fun_4p
07f78     3D B1 02 F6 | 	mov	local06, result1
07f7c     7C 01 90 FD | 	jmp	#LR__0735
07f80                 | LR__0707
07f80                 | ' return expr()
07f80     D4 3E B0 FD | 	call	#_expr
07f84     3D B1 02 F6 | 	mov	local06, result1
07f88     70 01 90 FD | 	jmp	#LR__0735
07f8c                 | LR__0708
07f8c     5C 08 B0 FD | 	call	#_compile_fun_2p
07f90     3D B1 02 F6 | 	mov	local06, result1
07f94     64 01 90 FD | 	jmp	#LR__0735
07f98                 | LR__0709
07f98     20 0B B0 FD | 	call	#_compile_fun_varp
07f9c     3D B5 02 F6 | 	mov	local08, result1
07fa0     3E B1 02 F6 | 	mov	local06, result2
07fa4     54 01 90 FD | 	jmp	#LR__0735
07fa8                 | LR__0710
07fa8     10 0B B0 FD | 	call	#_compile_fun_varp
07fac     3D B5 02 F6 | 	mov	local08, result1
07fb0     3E B1 02 F6 | 	mov	local06, result2
07fb4     44 01 90 FD | 	jmp	#LR__0735
07fb8                 | LR__0711
07fb8     30 08 B0 FD | 	call	#_compile_fun_2p
07fbc     3D B1 02 F6 | 	mov	local06, result1
07fc0     38 01 90 FD | 	jmp	#LR__0735
07fc4                 | LR__0712
07fc4     24 08 B0 FD | 	call	#_compile_fun_2p
07fc8     3D B1 02 F6 | 	mov	local06, result1
07fcc     2C 01 90 FD | 	jmp	#LR__0735
07fd0                 | LR__0713
07fd0     70 16 B0 FD | 	call	#_compile_print
07fd4     3D B1 02 F6 | 	mov	local06, result1
07fd8     DC 01 90 FD | 	jmp	#LR__0736
07fdc                 | LR__0714
07fdc     DC 0A B0 FD | 	call	#_compile_fun_varp
07fe0     3D B5 02 F6 | 	mov	local08, result1
07fe4     3E B1 02 F6 | 	mov	local06, result2
07fe8     10 01 90 FD | 	jmp	#LR__0735
07fec                 | LR__0715
07fec     A8 0B B0 FD | 	call	#_compile_read
07ff0     3D B5 02 F6 | 	mov	local08, result1
07ff4     3E B1 02 F6 | 	mov	local06, result2
07ff8     00 01 90 FD | 	jmp	#LR__0735
07ffc                 | LR__0716
07ffc                 | ' return expr()
07ffc     58 3E B0 FD | 	call	#_expr
08000     3D B1 02 F6 | 	mov	local06, result1
08004     F4 00 90 FD | 	jmp	#LR__0735
08008                 | LR__0717
08008     B0 0A B0 FD | 	call	#_compile_fun_varp
0800c     3D B5 02 F6 | 	mov	local08, result1
08010     3E B1 02 F6 | 	mov	local06, result2
08014     E4 00 90 FD | 	jmp	#LR__0735
08018                 | LR__0718
08018     A0 0A B0 FD | 	call	#_compile_fun_varp
0801c     3D B5 02 F6 | 	mov	local08, result1
08020     3E B1 02 F6 | 	mov	local06, result2
08024     D4 00 90 FD | 	jmp	#LR__0735
08028                 | LR__0719
08028     C0 07 B0 FD | 	call	#_compile_fun_2p
0802c     3D B1 02 F6 | 	mov	local06, result1
08030     C8 00 90 FD | 	jmp	#LR__0735
08034                 | LR__0720
08034     84 0A B0 FD | 	call	#_compile_fun_varp
08038     3D B5 02 F6 | 	mov	local08, result1
0803c     3E B1 02 F6 | 	mov	local06, result2
08040     B8 00 90 FD | 	jmp	#LR__0735
08044                 | LR__0721
08044     A4 07 B0 FD | 	call	#_compile_fun_2p
08048     3D B1 02 F6 | 	mov	local06, result1
0804c     AC 00 90 FD | 	jmp	#LR__0735
08050                 | LR__0722
08050     98 07 B0 FD | 	call	#_compile_fun_2p
08054     3D B1 02 F6 | 	mov	local06, result1
08058     A0 00 90 FD | 	jmp	#LR__0735
0805c                 | LR__0723
0805c     8C 07 B0 FD | 	call	#_compile_fun_2p
08060     3D B1 02 F6 | 	mov	local06, result1
08064     94 00 90 FD | 	jmp	#LR__0735
08068                 | LR__0724
08068     80 07 B0 FD | 	call	#_compile_fun_2p
0806c     3D B1 02 F6 | 	mov	local06, result1
08070     88 00 90 FD | 	jmp	#LR__0735
08074                 | LR__0725
08074     74 07 B0 FD | 	call	#_compile_fun_2p
08078     3D B1 02 F6 | 	mov	local06, result1
0807c     7C 00 90 FD | 	jmp	#LR__0735
08080                 | LR__0726
08080     68 07 B0 FD | 	call	#_compile_fun_2p
08084     3D B1 02 F6 | 	mov	local06, result1
08088     70 00 90 FD | 	jmp	#LR__0735
0808c                 | LR__0727
0808c     5C 07 B0 FD | 	call	#_compile_fun_2p
08090     3D B1 02 F6 | 	mov	local06, result1
08094     64 00 90 FD | 	jmp	#LR__0735
08098                 | LR__0728
08098     20 0A B0 FD | 	call	#_compile_fun_varp
0809c     3D B5 02 F6 | 	mov	local08, result1
080a0     3E B1 02 F6 | 	mov	local06, result2
080a4     54 00 90 FD | 	jmp	#LR__0735
080a8                 | LR__0729
080a8     C8 07 B0 FD | 	call	#_compile_fun_3p
080ac     3D B1 02 F6 | 	mov	local06, result1
080b0     48 00 90 FD | 	jmp	#LR__0735
080b4                 | LR__0730
080b4                 | ' return expr()
080b4     A0 3D B0 FD | 	call	#_expr
080b8     3D B1 02 F6 | 	mov	local06, result1
080bc     3C 00 90 FD | 	jmp	#LR__0735
080c0                 | LR__0731
080c0     28 07 B0 FD | 	call	#_compile_fun_2p
080c4     3D B1 02 F6 | 	mov	local06, result1
080c8     30 00 90 FD | 	jmp	#LR__0735
080cc                 | LR__0732
080cc     1C 07 B0 FD | 	call	#_compile_fun_2p
080d0     3D B1 02 F6 | 	mov	local06, result1
080d4     24 00 90 FD | 	jmp	#LR__0735
080d8                 | LR__0733
080d8     10 07 B0 FD | 	call	#_compile_fun_2p
080dc     3D B1 02 F6 | 	mov	local06, result1
080e0     18 00 90 FD | 	jmp	#LR__0735
080e4                 | LR__0734
080e4     00 13 B0 FD | 	call	#_compile_array_assign
080e8     3D B1 02 F6 | 	mov	local06, result1
080ec     0E B0 0E F2 | 	cmp	local06, #14 wz
080f0     C4 00 90 5D |  if_ne	jmp	#LR__0736
080f4                 | ' return 23
080f4     17 B0 06 F6 | 	mov	local06, #23
080f8     BC 00 90 FD | 	jmp	#LR__0736
080fc                 | ' return 23
080fc                 | LR__0735
080fc     59 AB 02 F6 | 	mov	local03, local07
08100     5A A7 02 F6 | 	mov	local01, local08
08104     53 B7 02 F6 | 	mov	local09, local01
08108     54 B9 02 F6 | 	mov	local10, local02
0810c     55 B3 02 F6 | 	mov	local07, local03
08110     4C 00 00 FF 
08114     20 64 06 F1 | 	add	objptr, ##38944
08118     32 A7 02 FB | 	rdlong	local01, objptr
0811c     53 B5 02 F6 | 	mov	local08, local01
08120     01 B4 66 F0 | 	shl	local08, #1
08124     53 B5 02 F1 | 	add	local08, local01
08128     02 B4 66 F0 | 	shl	local08, #2
0812c     03 00 00 FF 
08130     00 64 86 F1 | 	sub	objptr, ##1536
08134     32 B5 02 F1 | 	add	local08, objptr
08138     5A B7 62 FC | 	wrlong	local09, local08
0813c     03 00 00 FF 
08140     00 64 06 F1 | 	add	objptr, ##1536
08144     32 A7 02 FB | 	rdlong	local01, objptr
08148     53 B7 02 F6 | 	mov	local09, local01
0814c     01 B6 66 F0 | 	shl	local09, #1
08150     53 B7 02 F1 | 	add	local09, local01
08154     02 B6 66 F0 | 	shl	local09, #2
08158     03 00 00 FF 
0815c     00 64 86 F1 | 	sub	objptr, ##1536
08160     32 B7 02 F1 | 	add	local09, objptr
08164     04 B6 06 F1 | 	add	local09, #4
08168     5B B9 62 FC | 	wrlong	local10, local09
0816c     03 00 00 FF 
08170     00 64 06 F1 | 	add	objptr, ##1536
08174     32 A7 02 FB | 	rdlong	local01, objptr
08178     53 B9 02 F6 | 	mov	local10, local01
0817c     01 B8 66 F0 | 	shl	local10, #1
08180     53 B9 02 F1 | 	add	local10, local01
08184     02 B8 66 F0 | 	shl	local10, #2
08188     03 00 00 FF 
0818c     00 64 86 F1 | 	sub	objptr, ##1536
08190     32 B9 02 F1 | 	add	local10, objptr
08194     08 B8 06 F1 | 	add	local10, #8
08198     5C B3 62 FC | 	wrlong	local07, local10
0819c     03 00 00 FF 
081a0     00 64 06 F1 | 	add	objptr, ##1536
081a4     32 B7 02 FB | 	rdlong	local09, objptr
081a8     01 B6 06 F1 | 	add	local09, #1
081ac     32 B7 62 FC | 	wrlong	local09, objptr
081b0     4C 00 00 FF 
081b4     20 64 86 F1 | 	sub	objptr, ##38944
081b8                 | LR__0736
081b8                 | ' 
081b8                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
081b8                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
081b8     03 AC 0E F2 | 	cmp	local04, #3 wz
081bc     04 AC 0E 52 |  if_ne	cmp	local04, #4 wz
081c0     38 00 90 5D |  if_ne	jmp	#LR__0737
081c4     4C 00 00 FF 
081c8     20 64 06 F1 | 	add	objptr, ##38944
081cc     32 B9 02 FB | 	rdlong	local10, objptr
081d0     5C A7 02 F6 | 	mov	local01, local10
081d4     01 A6 66 F0 | 	shl	local01, #1
081d8     5C A7 02 F1 | 	add	local01, local10
081dc     02 A6 66 F0 | 	shl	local01, #2
081e0     03 00 00 FF 
081e4     00 64 86 F1 | 	sub	objptr, ##1536
081e8     32 A7 02 F1 | 	add	local01, objptr
081ec     08 A6 06 F1 | 	add	local01, #8
081f0     53 FD 6B FC | 	wrlong	#510, local01
081f4     49 00 00 FF 
081f8     20 64 86 F1 | 	sub	objptr, ##37408
081fc                 | LR__0737
081fc                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
081fc                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
081fc     4C 00 00 FF 
08200     20 64 06 F1 | 	add	objptr, ##38944
08204     32 A7 02 FB | 	rdlong	local01, objptr
08208     4C 00 00 FF 
0820c     20 64 86 F1 | 	sub	objptr, ##38944
08210     D7 52 48 FB | 	callpa	#(@LR__0740-@LR__0738)>>2,fcache_load_ptr_
08214                 | LR__0738
08214     53 B7 02 F6 | 	mov	local09, local01
08218     01 B6 66 F0 | 	shl	local09, #1
0821c     53 B7 02 F1 | 	add	local09, local01
08220     02 B6 66 F0 | 	shl	local09, #2
08224     32 B9 02 F6 | 	mov	local10, objptr
08228     49 00 00 FF 
0822c     20 B8 06 F1 | 	add	local10, ##37408
08230     5C B7 02 F1 | 	add	local09, local10
08234     08 B6 06 F1 | 	add	local09, #8
08238     5B B7 02 FB | 	rdlong	local09, local09
0823c     9B B6 0E F2 | 	cmp	local09, #155 wz
08240     68 00 90 5D |  if_ne	jmp	#LR__0739
08244     53 B7 02 F6 | 	mov	local09, local01
08248     01 B6 86 F1 | 	sub	local09, #1
0824c     5B B9 02 F6 | 	mov	local10, local09
08250     01 B8 66 F0 | 	shl	local10, #1
08254     5B B9 02 F1 | 	add	local10, local09
08258     02 B8 66 F0 | 	shl	local10, #2
0825c     32 B7 02 F6 | 	mov	local09, objptr
08260     49 00 00 FF 
08264     20 B6 06 F1 | 	add	local09, ##37408
08268     5B B9 02 F1 | 	add	local10, local09
0826c     08 B8 06 F1 | 	add	local10, #8
08270     5C B9 02 FB | 	rdlong	local10, local10
08274     11 B8 0E F2 | 	cmp	local10, #17 wz
08278     30 00 90 5D |  if_ne	jmp	#LR__0739
0827c     53 B7 02 F6 | 	mov	local09, local01
08280     01 B6 86 F1 | 	sub	local09, #1
08284     5B B9 02 F6 | 	mov	local10, local09
08288     01 B8 66 F0 | 	shl	local10, #1
0828c     5B B9 02 F1 | 	add	local10, local09
08290     02 B8 66 F0 | 	shl	local10, #2
08294     32 B7 02 F6 | 	mov	local09, objptr
08298     49 00 00 FF 
0829c     20 B6 06 F1 | 	add	local09, ##37408
082a0     5B B9 02 F1 | 	add	local10, local09
082a4     08 B8 06 F1 | 	add	local10, #8
082a8     5C 25 68 FC | 	wrlong	#18, local10
082ac                 | LR__0739
082ac     01 A6 86 F1 | 	sub	local01, #1
082b0     01 A6 56 F2 | 	cmps	local01, #1 wc
082b4     5C FF 9F 3D |  if_ae	jmp	#LR__0738
082b8                 | LR__0740
082b8                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
082b8                 | ' return err
082b8     58 7B 02 F6 | 	mov	result1, local06
082bc     E7 F0 03 F6 | 	mov	ptra, fp
082c0     F2 00 A0 FD | 	call	#popregs_
082c4                 | _compile_immediate_ret
082c4     2D 00 64 FD | 	ret
082c8                 | 
082c8                 | ' 
082c8                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
082c8                 | ' 
082c8                 | ' function compile_immediate_assign(linetype as ulong) as ulong
082c8                 | _compile_immediate_assign
082c8     0C CA 05 F6 | 	mov	COUNT_, #12
082cc     E8 00 A0 FD | 	call	#pushregs_
082d0     49 AD 02 F6 | 	mov	local04, arg01
082d4     FF AA 06 F6 | 	mov	local03, #255
082d8     01 AE 66 F6 | 	neg	local05, #1
082dc     00 B0 06 F6 | 	mov	local06, #0
082e0                 | ' 
082e0                 | ' t1.result_type=result_error : t1.result.uresult=0
082e0                 | ' i=-1: j=-1 : err=0
082e0                 | ' 
082e0                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
082e0     02 AC 0E F2 | 	cmp	local04, #2 wz
082e4     03 AC 0E 52 |  if_ne	cmp	local04, #3 wz
082e8     36 00 00 AF 
082ec     B0 65 06 A1 |  if_e	add	objptr, ##28080
082f0     32 B3 02 AB |  if_e	rdlong	local07, objptr
082f4     02 00 00 AF 
082f8     38 64 06 A1 |  if_e	add	objptr, ##1080
082fc     32 05 68 AC |  if_e	wrlong	#2, objptr
08300     38 00 00 AF 
08304     E8 65 86 A1 |  if_e	sub	objptr, ##29160
08308                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
08308     04 AC 0E F2 | 	cmp	local04, #4 wz
0830c     01 AC 0E 52 |  if_ne	cmp	local04, #1 wz
08310     2C 00 90 5D |  if_ne	jmp	#LR__0750
08314     36 00 00 FF 
08318     B8 65 06 F1 | 	add	objptr, ##28088
0831c     32 B3 02 FB | 	rdlong	local07, objptr
08320     02 00 00 FF 
08324     30 64 06 F1 | 	add	objptr, ##1072
08328     32 07 68 FC | 	wrlong	#3, objptr
0832c     13 00 00 FF 
08330     38 64 06 F1 | 	add	objptr, ##9784
08334     32 05 68 FC | 	wrlong	#2, objptr
08338     4C 00 00 FF 
0833c     20 64 86 F1 | 	sub	objptr, ##38944
08340                 | LR__0750
08340                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
08340     05 AC 0E F2 | 	cmp	local04, #5 wz
08344     3C 00 90 5D |  if_ne	jmp	#LR__0751
08348     38 00 00 FF 
0834c     E8 65 06 F1 | 	add	objptr, ##29160
08350     32 7B 02 FB | 	rdlong	result1, objptr
08354     3D B3 02 F6 | 	mov	local07, result1
08358     03 B2 66 F0 | 	shl	local07, #3
0835c     02 00 00 FF 
08360     38 64 86 F1 | 	sub	objptr, ##1080
08364     32 B3 02 F1 | 	add	local07, objptr
08368     59 B3 02 FB | 	rdlong	local07, local07
0836c     02 7A 06 F1 | 	add	result1, #2
08370     02 00 00 FF 
08374     38 64 06 F1 | 	add	objptr, ##1080
08378     32 7B 62 FC | 	wrlong	result1, objptr
0837c     38 00 00 FF 
08380     E8 65 86 F1 | 	sub	objptr, ##29160
08384                 | LR__0751
08384     59 93 02 F6 | 	mov	arg01, local07
08388     01 94 06 F6 | 	mov	arg02, #1
0838c     44 E1 B1 FD | 	call	#__system__Right_S
08390     3D B5 02 F6 | 	mov	local08, result1
08394     C0 3A B0 FD | 	call	#_expr
08398                 | ' 
08398                 | ' suffix2$=right$(varname2$,1)
08398                 | ' expr()
08398                 | ' if varnum>0 then					' try to find a variable
08398     36 00 00 FF 
0839c     AC 65 06 F1 | 	add	objptr, ##28076
083a0     32 B7 02 FB | 	rdlong	local09, objptr
083a4     36 00 00 FF 
083a8     AC 65 86 F1 | 	sub	objptr, ##28076
083ac     01 B6 56 F2 | 	cmps	local09, #1 wc
083b0     54 00 90 CD |  if_b	jmp	#LR__0754
083b4                 | '   for i=0 to varnum-1
083b4     00 B8 06 F6 | 	mov	local10, #0
083b8     36 00 00 FF 
083bc     AC 65 06 F1 | 	add	objptr, ##28076
083c0     32 BB 02 FB | 	rdlong	local11, objptr
083c4     36 00 00 FF 
083c8     AC 65 86 F1 | 	sub	objptr, ##28076
083cc                 | LR__0752
083cc     5D B9 52 F2 | 	cmps	local10, local11 wc
083d0     34 00 90 3D |  if_ae	jmp	#LR__0753
083d4                 | '     if variables(i).name=varname2$ then j=i : exit
083d4     5C B7 02 F6 | 	mov	local09, local10
083d8     04 B6 66 F0 | 	shl	local09, #4
083dc     32 95 02 F6 | 	mov	arg02, objptr
083e0     16 00 00 FF 
083e4     9C 95 06 F1 | 	add	arg02, ##11676
083e8     4A B7 02 F1 | 	add	local09, arg02
083ec     5B 93 02 FB | 	rdlong	arg01, local09
083f0     59 95 02 F6 | 	mov	arg02, local07
083f4     D4 C7 B1 FD | 	call	#__system___string_cmp
083f8     00 7A 0E F2 | 	cmp	result1, #0 wz
083fc     5C AF 02 A6 |  if_e	mov	local05, local10
08400     01 B8 06 51 |  if_ne	add	local10, #1
08404     C4 FF 9F 5D |  if_ne	jmp	#LR__0752
08408                 | LR__0753
08408                 | LR__0754
08408                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
08408     FF FF 7F FF 
0840c     FF AF 0E F2 | 	cmp	local05, ##-1 wz
08410     60 00 90 5D |  if_ne	jmp	#LR__0755
08414     36 00 00 FF 
08418     AC 65 06 F1 | 	add	objptr, ##28076
0841c     32 B7 02 FB | 	rdlong	local09, objptr
08420     36 00 00 FF 
08424     AC 65 86 F1 | 	sub	objptr, ##28076
08428     02 00 00 FF 
0842c     00 B6 56 F2 | 	cmps	local09, ##1024 wc
08430     40 00 90 3D |  if_ae	jmp	#LR__0755
08434     36 00 00 FF 
08438     AC 65 06 F1 | 	add	objptr, ##28076
0843c     32 BB 02 FB | 	rdlong	local11, objptr
08440     04 BA 66 F0 | 	shl	local11, #4
08444     20 00 00 FF 
08448     10 64 86 F1 | 	sub	objptr, ##16400
0844c     32 BB 02 F1 | 	add	local11, objptr
08450     5D B3 62 FC | 	wrlong	local07, local11
08454     20 00 00 FF 
08458     10 64 06 F1 | 	add	objptr, ##16400
0845c     32 B7 02 FB | 	rdlong	local09, objptr
08460     5B AF 02 F6 | 	mov	local05, local09
08464     01 B6 06 F1 | 	add	local09, #1
08468     32 B7 62 FC | 	wrlong	local09, objptr
0846c     36 00 00 FF 
08470     AC 65 86 F1 | 	sub	objptr, ##28076
08474                 | LR__0755
08474                 | ' if varnum>=maxvars then
08474     36 00 00 FF 
08478     AC 65 06 F1 | 	add	objptr, ##28076
0847c     32 B7 02 FB | 	rdlong	local09, objptr
08480     36 00 00 FF 
08484     AC 65 86 F1 | 	sub	objptr, ##28076
08488     02 00 00 FF 
0848c     00 B6 56 F2 | 	cmps	local09, ##1024 wc
08490     2D B0 06 36 |  if_ae	mov	local06, #45
08494     BC 01 90 3D |  if_ae	jmp	#LR__0760
08498     57 A7 02 F6 | 	mov	local01, local05
0849c     17 AA 06 F6 | 	mov	local03, #23
084a0     53 B7 02 F6 | 	mov	local09, local01
084a4     54 BD 02 F6 | 	mov	local12, local02
084a8     55 A7 02 F6 | 	mov	local01, local03
084ac     4C 00 00 FF 
084b0     20 64 06 F1 | 	add	objptr, ##38944
084b4     32 BB 02 FB | 	rdlong	local11, objptr
084b8     5D B9 02 F6 | 	mov	local10, local11
084bc     01 B8 66 F0 | 	shl	local10, #1
084c0     5D B9 02 F1 | 	add	local10, local11
084c4     02 B8 66 F0 | 	shl	local10, #2
084c8     03 00 00 FF 
084cc     00 64 86 F1 | 	sub	objptr, ##1536
084d0     32 B9 02 F1 | 	add	local10, objptr
084d4     5C B7 62 FC | 	wrlong	local09, local10
084d8     03 00 00 FF 
084dc     00 64 06 F1 | 	add	objptr, ##1536
084e0     32 B7 02 FB | 	rdlong	local09, objptr
084e4     5B BB 02 F6 | 	mov	local11, local09
084e8     01 BA 66 F0 | 	shl	local11, #1
084ec     5B BB 02 F1 | 	add	local11, local09
084f0     02 BA 66 F0 | 	shl	local11, #2
084f4     03 00 00 FF 
084f8     00 64 86 F1 | 	sub	objptr, ##1536
084fc     32 BB 02 F1 | 	add	local11, objptr
08500     04 BA 06 F1 | 	add	local11, #4
08504     5D BD 62 FC | 	wrlong	local12, local11
08508     03 00 00 FF 
0850c     00 64 06 F1 | 	add	objptr, ##1536
08510     32 B7 02 FB | 	rdlong	local09, objptr
08514     5B BD 02 F6 | 	mov	local12, local09
08518     01 BC 66 F0 | 	shl	local12, #1
0851c     5B BD 02 F1 | 	add	local12, local09
08520     02 BC 66 F0 | 	shl	local12, #2
08524     03 00 00 FF 
08528     00 64 86 F1 | 	sub	objptr, ##1536
0852c     32 BD 02 F1 | 	add	local12, objptr
08530     08 BC 06 F1 | 	add	local12, #8
08534     5E A7 62 FC | 	wrlong	local01, local12
08538     03 00 00 FF 
0853c     00 64 06 F1 | 	add	objptr, ##1536
08540     32 B7 02 FB | 	rdlong	local09, objptr
08544     01 B6 06 F1 | 	add	local09, #1
08548     32 B7 62 FC | 	wrlong	local09, objptr
0854c     4C 00 00 FF 
08550     20 64 86 F1 | 	sub	objptr, ##38944
08554                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
08554                 | '   compiledline(lineptr)=t1:  lineptr+=1 
08554                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
08554     03 AC 0E F2 | 	cmp	local04, #3 wz
08558     04 AC 0E 52 |  if_ne	cmp	local04, #4 wz
0855c     38 00 90 5D |  if_ne	jmp	#LR__0756
08560     4C 00 00 FF 
08564     20 64 06 F1 | 	add	objptr, ##38944
08568     32 BD 02 FB | 	rdlong	local12, objptr
0856c     5E A7 02 F6 | 	mov	local01, local12
08570     01 A6 66 F0 | 	shl	local01, #1
08574     5E A7 02 F1 | 	add	local01, local12
08578     02 A6 66 F0 | 	shl	local01, #2
0857c     03 00 00 FF 
08580     00 64 86 F1 | 	sub	objptr, ##1536
08584     32 A7 02 F1 | 	add	local01, objptr
08588     08 A6 06 F1 | 	add	local01, #8
0858c     53 FD 6B FC | 	wrlong	#510, local01
08590     49 00 00 FF 
08594     20 64 86 F1 | 	sub	objptr, ##37408
08598                 | LR__0756
08598                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08598     4C 00 00 FF 
0859c     20 64 06 F1 | 	add	objptr, ##38944
085a0     32 B9 02 FB | 	rdlong	local10, objptr
085a4     4C 00 00 FF 
085a8     20 64 86 F1 | 	sub	objptr, ##38944
085ac     D7 52 48 FB | 	callpa	#(@LR__0759-@LR__0757)>>2,fcache_load_ptr_
085b0                 | LR__0757
085b0     5C BD 02 F6 | 	mov	local12, local10
085b4     01 BC 66 F0 | 	shl	local12, #1
085b8     5C BD 02 F1 | 	add	local12, local10
085bc     02 BC 66 F0 | 	shl	local12, #2
085c0     32 A7 02 F6 | 	mov	local01, objptr
085c4     49 00 00 FF 
085c8     20 A6 06 F1 | 	add	local01, ##37408
085cc     53 BD 02 F1 | 	add	local12, local01
085d0     08 BC 06 F1 | 	add	local12, #8
085d4     5E BD 02 FB | 	rdlong	local12, local12
085d8     9B BC 0E F2 | 	cmp	local12, #155 wz
085dc     68 00 90 5D |  if_ne	jmp	#LR__0758
085e0     5C BD 02 F6 | 	mov	local12, local10
085e4     01 BC 86 F1 | 	sub	local12, #1
085e8     5E A7 02 F6 | 	mov	local01, local12
085ec     01 A6 66 F0 | 	shl	local01, #1
085f0     5E A7 02 F1 | 	add	local01, local12
085f4     02 A6 66 F0 | 	shl	local01, #2
085f8     32 BD 02 F6 | 	mov	local12, objptr
085fc     49 00 00 FF 
08600     20 BC 06 F1 | 	add	local12, ##37408
08604     5E A7 02 F1 | 	add	local01, local12
08608     08 A6 06 F1 | 	add	local01, #8
0860c     53 A7 02 FB | 	rdlong	local01, local01
08610     11 A6 0E F2 | 	cmp	local01, #17 wz
08614     30 00 90 5D |  if_ne	jmp	#LR__0758
08618     5C BD 02 F6 | 	mov	local12, local10
0861c     01 BC 86 F1 | 	sub	local12, #1
08620     5E A7 02 F6 | 	mov	local01, local12
08624     01 A6 66 F0 | 	shl	local01, #1
08628     5E A7 02 F1 | 	add	local01, local12
0862c     02 A6 66 F0 | 	shl	local01, #2
08630     32 BD 02 F6 | 	mov	local12, objptr
08634     49 00 00 FF 
08638     20 BC 06 F1 | 	add	local12, ##37408
0863c     5E A7 02 F1 | 	add	local01, local12
08640     08 A6 06 F1 | 	add	local01, #8
08644     53 25 68 FC | 	wrlong	#18, local01
08648                 | LR__0758
08648     01 B8 86 F1 | 	sub	local10, #1
0864c     01 B8 56 F2 | 	cmps	local10, #1 wc
08650     5C FF 9F 3D |  if_ae	jmp	#LR__0757
08654                 | LR__0759
08654                 | LR__0760
08654                 | ' return err
08654     58 7B 02 F6 | 	mov	result1, local06
08658     E7 F0 03 F6 | 	mov	ptra, fp
0865c     F2 00 A0 FD | 	call	#popregs_
08660                 | _compile_immediate_assign_ret
08660     2D 00 64 FD | 	ret
08664                 | 
08664                 | ' 
08664                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
08664                 | ' 
08664                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
08664                 | _compile
08664     03 CA 05 F6 | 	mov	COUNT_, #3
08668     E8 00 A0 FD | 	call	#pushregs_
0866c     49 A7 02 F6 | 	mov	local01, arg01
08670     4B A9 02 F6 | 	mov	local02, arg03
08674     49 00 00 FF 
08678     20 64 06 F1 | 	add	objptr, ##37408
0867c     32 A7 62 FC | 	wrlong	local01, objptr
08680     04 64 06 F1 | 	add	objptr, #4
08684     32 95 62 FC | 	wrlong	arg02, objptr
08688     49 00 00 FF 
0868c     24 64 86 F1 | 	sub	objptr, ##37412
08690     54 93 02 F6 | 	mov	arg01, local02
08694     01 92 06 F1 | 	add	arg01, #1
08698     53 95 02 F6 | 	mov	arg02, local01
0869c     40 F2 BF FD | 	call	#_compile_immediate
086a0     3D AB 0A F6 | 	mov	local03, result1 wz
086a4                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
086a4                 | ' ucompiledline(0)=alinemajor
086a4                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
086a4                 | ' 
086a4                 | ' ' cont: 
086a4                 | ' ' 0 - this is the first part of the line that will continue
086a4                 | ' ' 1 - this is the continuation of the line
086a4                 | ' ' 2 - this is the last continued line
086a4                 | ' ' 3 - this is the one and only part
086a4                 | ' 
086a4                 | ' err=compile_immediate(cont+1,alinemajor) 
086a4                 | ' if err=0 andalso alinemajor>0 then
086a4     74 00 90 5D |  if_ne	jmp	#LR__0775
086a8     01 A6 16 F2 | 	cmp	local01, #1 wc
086ac     6C 00 90 CD |  if_b	jmp	#LR__0775
086b0                 | '   if cont=3 orelse cont=2 then 
086b0     03 A8 0E F2 | 	cmp	local02, #3 wz
086b4     02 A8 0E 52 |  if_ne	cmp	local02, #2 wz
086b8     60 00 90 5D |  if_ne	jmp	#LR__0774
086bc                 | '     if alinemajor >lastline then 
086bc     4C 00 00 FF 
086c0     30 64 06 F1 | 	add	objptr, ##38960
086c4     32 95 02 FB | 	rdlong	arg02, objptr
086c8     4C 00 00 FF 
086cc     30 64 86 F1 | 	sub	objptr, ##38960
086d0     4A A7 1A F2 | 	cmp	local01, arg02 wcz
086d4     0C 00 90 ED |  if_be	jmp	#LR__0770
086d8     53 93 02 F6 | 	mov	arg01, local01
086dc     38 F1 BF FD | 	call	#_add_line_at_end
086e0     38 00 90 FD | 	jmp	#LR__0773
086e4                 | LR__0770
086e4     53 93 02 F6 | 	mov	arg01, local01
086e8     A0 EB BF FD | 	call	#_deleteline
086ec                 | '       deleteline(alinemajor)  
086ec                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
086ec     4C 00 00 FF 
086f0     30 64 06 F1 | 	add	objptr, ##38960
086f4     32 95 02 FB | 	rdlong	arg02, objptr
086f8     4C 00 00 FF 
086fc     30 64 86 F1 | 	sub	objptr, ##38960
08700     4A A7 1A F2 | 	cmp	local01, arg02 wcz
08704     0C 00 90 ED |  if_be	jmp	#LR__0771
08708     53 93 02 F6 | 	mov	arg01, local01
0870c     08 F1 BF FD | 	call	#_add_line_at_end
08710     08 00 90 FD | 	jmp	#LR__0772
08714                 | LR__0771
08714     53 93 02 F6 | 	mov	arg01, local01
08718     40 EF BF FD | 	call	#_insertline
0871c                 | LR__0772
0871c                 | LR__0773
0871c                 | LR__0774
0871c                 | LR__0775
0871c                 | ' return err
0871c     55 7B 02 F6 | 	mov	result1, local03
08720     E7 F0 03 F6 | 	mov	ptra, fp
08724     F2 00 A0 FD | 	call	#popregs_
08728                 | _compile_ret
08728     2D 00 64 FD | 	ret
0872c                 | 
0872c                 | ' 
0872c                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
0872c                 | ' 
0872c                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
0872c                 | _compile_assign
0872c     03 CA 05 F6 | 	mov	COUNT_, #3
08730     E8 00 A0 FD | 	call	#pushregs_
08734     49 A7 02 F6 | 	mov	local01, arg01
08738     4B A9 02 F6 | 	mov	local02, arg03
0873c     49 00 00 FF 
08740     20 64 06 F1 | 	add	objptr, ##37408
08744     32 A7 62 FC | 	wrlong	local01, objptr
08748     04 64 06 F1 | 	add	objptr, #4
0874c     32 95 62 FC | 	wrlong	arg02, objptr
08750     49 00 00 FF 
08754     24 64 86 F1 | 	sub	objptr, ##37412
08758     54 93 02 F6 | 	mov	arg01, local02
0875c     01 92 06 F1 | 	add	arg01, #1
08760     64 FB BF FD | 	call	#_compile_immediate_assign
08764     3D AB 02 F6 | 	mov	local03, result1
08768                 | ' 
08768                 | ' ucompiledline(0)=alinemajor
08768                 | ' ucompiledline(1)=alineminor
08768                 | ' 
08768                 | ' err=compile_immediate_assign(cont+1) 
08768                 | ' if alinemajor>0 then
08768     01 A6 16 F2 | 	cmp	local01, #1 wc
0876c     6C 00 90 CD |  if_b	jmp	#LR__0785
08770                 | '   if cont=3 orelse cont=2 then 
08770     03 A8 0E F2 | 	cmp	local02, #3 wz
08774     02 A8 0E 52 |  if_ne	cmp	local02, #2 wz
08778     60 00 90 5D |  if_ne	jmp	#LR__0784
0877c                 | '     if alinemajor >lastline then 
0877c     4C 00 00 FF 
08780     30 64 06 F1 | 	add	objptr, ##38960
08784     32 95 02 FB | 	rdlong	arg02, objptr
08788     4C 00 00 FF 
0878c     30 64 86 F1 | 	sub	objptr, ##38960
08790     4A A7 1A F2 | 	cmp	local01, arg02 wcz
08794     0C 00 90 ED |  if_be	jmp	#LR__0780
08798     53 93 02 F6 | 	mov	arg01, local01
0879c     78 F0 BF FD | 	call	#_add_line_at_end
087a0     38 00 90 FD | 	jmp	#LR__0783
087a4                 | LR__0780
087a4     53 93 02 F6 | 	mov	arg01, local01
087a8     E0 EA BF FD | 	call	#_deleteline
087ac                 | '       deleteline(alinemajor)  
087ac                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
087ac     4C 00 00 FF 
087b0     30 64 06 F1 | 	add	objptr, ##38960
087b4     32 95 02 FB | 	rdlong	arg02, objptr
087b8     4C 00 00 FF 
087bc     30 64 86 F1 | 	sub	objptr, ##38960
087c0     4A A7 1A F2 | 	cmp	local01, arg02 wcz
087c4     0C 00 90 ED |  if_be	jmp	#LR__0781
087c8     53 93 02 F6 | 	mov	arg01, local01
087cc     48 F0 BF FD | 	call	#_add_line_at_end
087d0     08 00 90 FD | 	jmp	#LR__0782
087d4                 | LR__0781
087d4     53 93 02 F6 | 	mov	arg01, local01
087d8     80 EE BF FD | 	call	#_insertline
087dc                 | LR__0782
087dc                 | LR__0783
087dc                 | LR__0784
087dc                 | LR__0785
087dc                 | ' return err
087dc     55 7B 02 F6 | 	mov	result1, local03
087e0     E7 F0 03 F6 | 	mov	ptra, fp
087e4     F2 00 A0 FD | 	call	#popregs_
087e8                 | _compile_assign_ret
087e8     2D 00 64 FD | 	ret
087ec                 | 
087ec                 | ' 
087ec                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
087ec                 | ' 
087ec                 | ' function compile_fun_2p() as ulong
087ec                 | _compile_fun_2p
087ec     01 CA 05 F6 | 	mov	COUNT_, #1
087f0     E8 00 A0 FD | 	call	#pushregs_
087f4     60 36 B0 FD | 	call	#_expr
087f8     3D A7 02 F6 | 	mov	local01, result1
087fc                 | ' err=expr() : if err>0 then return err
087fc     01 A6 16 F2 | 	cmp	local01, #1 wc
08800     53 7B 02 36 |  if_ae	mov	result1, local01
08804     60 00 90 3D |  if_ae	jmp	#LR__0790
08808                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08808     38 00 00 FF 
0880c     E8 65 06 F1 | 	add	objptr, ##29160
08810     32 A7 02 FB | 	rdlong	local01, objptr
08814     03 A6 66 F0 | 	shl	local01, #3
08818     02 00 00 FF 
0881c     38 64 86 F1 | 	sub	objptr, ##1080
08820     32 A7 02 F1 | 	add	local01, objptr
08824     04 A6 06 F1 | 	add	local01, #4
08828     53 A7 02 FB | 	rdlong	local01, local01
0882c     11 A6 0E F2 | 	cmp	local01, #17 wz
08830     36 00 00 FF 
08834     B0 65 86 F1 | 	sub	objptr, ##28080
08838     15 7A 06 56 |  if_ne	mov	result1, #21
0883c     28 00 90 5D |  if_ne	jmp	#LR__0790
08840     38 00 00 FF 
08844     E8 65 06 F1 | 	add	objptr, ##29160
08848     32 A7 02 FB | 	rdlong	local01, objptr
0884c     01 A6 06 F1 | 	add	local01, #1
08850     32 A7 62 FC | 	wrlong	local01, objptr
08854     38 00 00 FF 
08858     E8 65 86 F1 | 	sub	objptr, ##29160
0885c     F8 35 B0 FD | 	call	#_expr
08860                 | ' err=expr() : if err>0 then return err
08860     01 7A 16 F2 | 	cmp	result1, #1 wc
08864                 | ' return 0
08864     00 7A 06 C6 |  if_b	mov	result1, #0
08868                 | LR__0790
08868     E7 F0 03 F6 | 	mov	ptra, fp
0886c     F2 00 A0 FD | 	call	#popregs_
08870                 | _compile_fun_2p_ret
08870     2D 00 64 FD | 	ret
08874                 | 
08874                 | ' 
08874                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08874                 | ' 
08874                 | ' function compile_fun_3p() as ulong
08874                 | _compile_fun_3p
08874     01 CA 05 F6 | 	mov	COUNT_, #1
08878     E8 00 A0 FD | 	call	#pushregs_
0887c     D8 35 B0 FD | 	call	#_expr
08880     3D A7 02 F6 | 	mov	local01, result1
08884                 | ' err=expr() : if err>0 then return err
08884     01 A6 16 F2 | 	cmp	local01, #1 wc
08888     53 7B 02 36 |  if_ae	mov	result1, local01
0888c     C8 00 90 3D |  if_ae	jmp	#LR__0800
08890                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08890     38 00 00 FF 
08894     E8 65 06 F1 | 	add	objptr, ##29160
08898     32 A7 02 FB | 	rdlong	local01, objptr
0889c     03 A6 66 F0 | 	shl	local01, #3
088a0     02 00 00 FF 
088a4     38 64 86 F1 | 	sub	objptr, ##1080
088a8     32 A7 02 F1 | 	add	local01, objptr
088ac     04 A6 06 F1 | 	add	local01, #4
088b0     53 A7 02 FB | 	rdlong	local01, local01
088b4     11 A6 0E F2 | 	cmp	local01, #17 wz
088b8     36 00 00 FF 
088bc     B0 65 86 F1 | 	sub	objptr, ##28080
088c0     15 7A 06 56 |  if_ne	mov	result1, #21
088c4     90 00 90 5D |  if_ne	jmp	#LR__0800
088c8     38 00 00 FF 
088cc     E8 65 06 F1 | 	add	objptr, ##29160
088d0     32 A7 02 FB | 	rdlong	local01, objptr
088d4     01 A6 06 F1 | 	add	local01, #1
088d8     32 A7 62 FC | 	wrlong	local01, objptr
088dc     38 00 00 FF 
088e0     E8 65 86 F1 | 	sub	objptr, ##29160
088e4     70 35 B0 FD | 	call	#_expr
088e8     3D A7 02 F6 | 	mov	local01, result1
088ec                 | ' err=expr() : if err>0 then return err
088ec     01 A6 16 F2 | 	cmp	local01, #1 wc
088f0     53 7B 02 36 |  if_ae	mov	result1, local01
088f4     60 00 90 3D |  if_ae	jmp	#LR__0800
088f8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
088f8     38 00 00 FF 
088fc     E8 65 06 F1 | 	add	objptr, ##29160
08900     32 A7 02 FB | 	rdlong	local01, objptr
08904     03 A6 66 F0 | 	shl	local01, #3
08908     02 00 00 FF 
0890c     38 64 86 F1 | 	sub	objptr, ##1080
08910     32 A7 02 F1 | 	add	local01, objptr
08914     04 A6 06 F1 | 	add	local01, #4
08918     53 A7 02 FB | 	rdlong	local01, local01
0891c     11 A6 0E F2 | 	cmp	local01, #17 wz
08920     36 00 00 FF 
08924     B0 65 86 F1 | 	sub	objptr, ##28080
08928     15 7A 06 56 |  if_ne	mov	result1, #21
0892c     28 00 90 5D |  if_ne	jmp	#LR__0800
08930     38 00 00 FF 
08934     E8 65 06 F1 | 	add	objptr, ##29160
08938     32 A7 02 FB | 	rdlong	local01, objptr
0893c     01 A6 06 F1 | 	add	local01, #1
08940     32 A7 62 FC | 	wrlong	local01, objptr
08944     38 00 00 FF 
08948     E8 65 86 F1 | 	sub	objptr, ##29160
0894c     08 35 B0 FD | 	call	#_expr
08950                 | ' err=expr() : if err>0 then return err
08950     01 7A 16 F2 | 	cmp	result1, #1 wc
08954                 | ' return 0
08954     00 7A 06 C6 |  if_b	mov	result1, #0
08958                 | LR__0800
08958     E7 F0 03 F6 | 	mov	ptra, fp
0895c     F2 00 A0 FD | 	call	#popregs_
08960                 | _compile_fun_3p_ret
08960     2D 00 64 FD | 	ret
08964                 | 
08964                 | ' 
08964                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08964                 | ' 
08964                 | ' function compile_fun_4p() as ulong
08964                 | _compile_fun_4p
08964     01 CA 05 F6 | 	mov	COUNT_, #1
08968     E8 00 A0 FD | 	call	#pushregs_
0896c     E8 34 B0 FD | 	call	#_expr
08970     3D A7 02 F6 | 	mov	local01, result1
08974                 | ' err=expr() : if err>0 then return err
08974     01 A6 16 F2 | 	cmp	local01, #1 wc
08978     53 7B 02 36 |  if_ae	mov	result1, local01
0897c     30 01 90 3D |  if_ae	jmp	#LR__0810
08980                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08980     38 00 00 FF 
08984     E8 65 06 F1 | 	add	objptr, ##29160
08988     32 A7 02 FB | 	rdlong	local01, objptr
0898c     03 A6 66 F0 | 	shl	local01, #3
08990     02 00 00 FF 
08994     38 64 86 F1 | 	sub	objptr, ##1080
08998     32 A7 02 F1 | 	add	local01, objptr
0899c     04 A6 06 F1 | 	add	local01, #4
089a0     53 A7 02 FB | 	rdlong	local01, local01
089a4     11 A6 0E F2 | 	cmp	local01, #17 wz
089a8     36 00 00 FF 
089ac     B0 65 86 F1 | 	sub	objptr, ##28080
089b0     15 7A 06 56 |  if_ne	mov	result1, #21
089b4     F8 00 90 5D |  if_ne	jmp	#LR__0810
089b8     38 00 00 FF 
089bc     E8 65 06 F1 | 	add	objptr, ##29160
089c0     32 A7 02 FB | 	rdlong	local01, objptr
089c4     01 A6 06 F1 | 	add	local01, #1
089c8     32 A7 62 FC | 	wrlong	local01, objptr
089cc     38 00 00 FF 
089d0     E8 65 86 F1 | 	sub	objptr, ##29160
089d4     80 34 B0 FD | 	call	#_expr
089d8     3D A7 02 F6 | 	mov	local01, result1
089dc                 | ' err=expr() : if err>0 then return err
089dc     01 A6 16 F2 | 	cmp	local01, #1 wc
089e0     53 7B 02 36 |  if_ae	mov	result1, local01
089e4     C8 00 90 3D |  if_ae	jmp	#LR__0810
089e8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
089e8     38 00 00 FF 
089ec     E8 65 06 F1 | 	add	objptr, ##29160
089f0     32 A7 02 FB | 	rdlong	local01, objptr
089f4     03 A6 66 F0 | 	shl	local01, #3
089f8     02 00 00 FF 
089fc     38 64 86 F1 | 	sub	objptr, ##1080
08a00     32 A7 02 F1 | 	add	local01, objptr
08a04     04 A6 06 F1 | 	add	local01, #4
08a08     53 A7 02 FB | 	rdlong	local01, local01
08a0c     11 A6 0E F2 | 	cmp	local01, #17 wz
08a10     36 00 00 FF 
08a14     B0 65 86 F1 | 	sub	objptr, ##28080
08a18     15 7A 06 56 |  if_ne	mov	result1, #21
08a1c     90 00 90 5D |  if_ne	jmp	#LR__0810
08a20     38 00 00 FF 
08a24     E8 65 06 F1 | 	add	objptr, ##29160
08a28     32 A7 02 FB | 	rdlong	local01, objptr
08a2c     01 A6 06 F1 | 	add	local01, #1
08a30     32 A7 62 FC | 	wrlong	local01, objptr
08a34     38 00 00 FF 
08a38     E8 65 86 F1 | 	sub	objptr, ##29160
08a3c     18 34 B0 FD | 	call	#_expr
08a40     3D A7 02 F6 | 	mov	local01, result1
08a44                 | ' err=expr() : if err>0 then return err
08a44     01 A6 16 F2 | 	cmp	local01, #1 wc
08a48     53 7B 02 36 |  if_ae	mov	result1, local01
08a4c     60 00 90 3D |  if_ae	jmp	#LR__0810
08a50                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08a50     38 00 00 FF 
08a54     E8 65 06 F1 | 	add	objptr, ##29160
08a58     32 A7 02 FB | 	rdlong	local01, objptr
08a5c     03 A6 66 F0 | 	shl	local01, #3
08a60     02 00 00 FF 
08a64     38 64 86 F1 | 	sub	objptr, ##1080
08a68     32 A7 02 F1 | 	add	local01, objptr
08a6c     04 A6 06 F1 | 	add	local01, #4
08a70     53 A7 02 FB | 	rdlong	local01, local01
08a74     11 A6 0E F2 | 	cmp	local01, #17 wz
08a78     36 00 00 FF 
08a7c     B0 65 86 F1 | 	sub	objptr, ##28080
08a80     15 7A 06 56 |  if_ne	mov	result1, #21
08a84     28 00 90 5D |  if_ne	jmp	#LR__0810
08a88     38 00 00 FF 
08a8c     E8 65 06 F1 | 	add	objptr, ##29160
08a90     32 A7 02 FB | 	rdlong	local01, objptr
08a94     01 A6 06 F1 | 	add	local01, #1
08a98     32 A7 62 FC | 	wrlong	local01, objptr
08a9c     38 00 00 FF 
08aa0     E8 65 86 F1 | 	sub	objptr, ##29160
08aa4     B0 33 B0 FD | 	call	#_expr
08aa8                 | ' err=expr() : if err>0 then return err
08aa8     01 7A 16 F2 | 	cmp	result1, #1 wc
08aac                 | ' return 0
08aac     00 7A 06 C6 |  if_b	mov	result1, #0
08ab0                 | LR__0810
08ab0     E7 F0 03 F6 | 	mov	ptra, fp
08ab4     F2 00 A0 FD | 	call	#popregs_
08ab8                 | _compile_fun_4p_ret
08ab8     2D 00 64 FD | 	ret
08abc                 | 
08abc                 | ' 
08abc                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08abc                 | ' 
08abc                 | ' function compile_fun_varp() as ulong,ulong 
08abc                 | _compile_fun_varp
08abc     03 CA 05 F6 | 	mov	COUNT_, #3
08ac0     E8 00 A0 FD | 	call	#pushregs_
08ac4     00 A6 06 F6 | 	mov	local01, #0
08ac8                 | ' 
08ac8                 | ' i=0 : err=0
08ac8                 | ' if lparts(ct).token<>token_end then
08ac8     38 00 00 FF 
08acc     E8 65 06 F1 | 	add	objptr, ##29160
08ad0     32 A9 02 FB | 	rdlong	local02, objptr
08ad4     03 A8 66 F0 | 	shl	local02, #3
08ad8     02 00 00 FF 
08adc     38 64 86 F1 | 	sub	objptr, ##1080
08ae0     32 A9 02 F1 | 	add	local02, objptr
08ae4     04 A8 06 F1 | 	add	local02, #4
08ae8     54 A9 02 FB | 	rdlong	local02, local02
08aec     FE A9 0E F2 | 	cmp	local02, #510 wz
08af0     36 00 00 FF 
08af4     B0 65 86 F1 | 	sub	objptr, ##28080
08af8     88 00 90 AD |  if_e	jmp	#LR__0821
08afc                 | '   do
08afc                 | LR__0820
08afc     58 33 B0 FD | 	call	#_expr
08b00     01 A6 06 F1 | 	add	local01, #1
08b04                 | '     expr()
08b04                 | '     i+=1
08b04                 | '     if lparts(ct).token=token_comma then ct+=1
08b04     38 00 00 FF 
08b08     E8 65 06 F1 | 	add	objptr, ##29160
08b0c     32 A9 02 FB | 	rdlong	local02, objptr
08b10     03 A8 66 F0 | 	shl	local02, #3
08b14     02 00 00 FF 
08b18     38 64 86 F1 | 	sub	objptr, ##1080
08b1c     32 A9 02 F1 | 	add	local02, objptr
08b20     04 A8 06 F1 | 	add	local02, #4
08b24     54 A9 02 FB | 	rdlong	local02, local02
08b28     11 A8 0E F2 | 	cmp	local02, #17 wz
08b2c     36 00 00 FF 
08b30     B0 65 86 F1 | 	sub	objptr, ##28080
08b34     38 00 00 AF 
08b38     E8 65 06 A1 |  if_e	add	objptr, ##29160
08b3c     32 AB 02 AB |  if_e	rdlong	local03, objptr
08b40     01 AA 06 A1 |  if_e	add	local03, #1
08b44     32 AB 62 AC |  if_e	wrlong	local03, objptr
08b48     38 00 00 AF 
08b4c     E8 65 86 A1 |  if_e	sub	objptr, ##29160
08b50                 | '     if lparts(ct).token=token_end then exit loop
08b50     38 00 00 FF 
08b54     E8 65 06 F1 | 	add	objptr, ##29160
08b58     32 A9 02 FB | 	rdlong	local02, objptr
08b5c     03 A8 66 F0 | 	shl	local02, #3
08b60     02 00 00 FF 
08b64     38 64 86 F1 | 	sub	objptr, ##1080
08b68     32 A9 02 F1 | 	add	local02, objptr
08b6c     04 A8 06 F1 | 	add	local02, #4
08b70     54 A9 02 FB | 	rdlong	local02, local02
08b74     FE A9 0E F2 | 	cmp	local02, #510 wz
08b78     36 00 00 FF 
08b7c     B0 65 86 F1 | 	sub	objptr, ##28080
08b80     78 FF 9F 5D |  if_ne	jmp	#LR__0820
08b84                 | LR__0821
08b84                 | ' return i,err
08b84     53 7B 02 F6 | 	mov	result1, local01
08b88     00 7C 06 F6 | 	mov	result2, #0
08b8c     E7 F0 03 F6 | 	mov	ptra, fp
08b90     F2 00 A0 FD | 	call	#popregs_
08b94                 | _compile_fun_varp_ret
08b94     2D 00 64 FD | 	ret
08b98                 | 
08b98                 | ' 
08b98                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08b98                 | ' 
08b98                 | ' function compile_read() as ulong,ulong 
08b98                 | _compile_read
08b98     04 CA 05 F6 | 	mov	COUNT_, #4
08b9c     E8 00 A0 FD | 	call	#pushregs_
08ba0     00 A6 06 F6 | 	mov	local01, #0
08ba4                 | ' 
08ba4                 | ' i=0 : err=0
08ba4                 | ' if lparts(ct).token<>token_end then
08ba4     38 00 00 FF 
08ba8     E8 65 06 F1 | 	add	objptr, ##29160
08bac     32 A9 02 FB | 	rdlong	local02, objptr
08bb0     03 A8 66 F0 | 	shl	local02, #3
08bb4     02 00 00 FF 
08bb8     38 64 86 F1 | 	sub	objptr, ##1080
08bbc     32 A9 02 F1 | 	add	local02, objptr
08bc0     04 A8 06 F1 | 	add	local02, #4
08bc4     54 A9 02 FB | 	rdlong	local02, local02
08bc8     FE A9 0E F2 | 	cmp	local02, #510 wz
08bcc     36 00 00 FF 
08bd0     B0 65 86 F1 | 	sub	objptr, ##28080
08bd4     98 00 90 AD |  if_e	jmp	#LR__0831
08bd8                 | '   do
08bd8                 | LR__0830
08bd8     EC 2E B0 FD | 	call	#_getaddr
08bdc     3D AB 02 F6 | 	mov	local03, result1
08be0     38 00 00 FF 
08be4     E8 65 06 F1 | 	add	objptr, ##29160
08be8     32 A9 02 FB | 	rdlong	local02, objptr
08bec     01 A8 06 F1 | 	add	local02, #1
08bf0     32 A9 62 FC | 	wrlong	local02, objptr
08bf4     01 A6 06 F1 | 	add	local01, #1
08bf8                 | '     err=getaddr() :ct+=1
08bf8                 | '     i+=1 
08bf8                 | '     if lparts(ct).token=token_comma then ct+=1 
08bf8     03 A8 66 F0 | 	shl	local02, #3
08bfc     02 00 00 FF 
08c00     38 64 86 F1 | 	sub	objptr, ##1080
08c04     32 A9 02 F1 | 	add	local02, objptr
08c08     04 A8 06 F1 | 	add	local02, #4
08c0c     54 A9 02 FB | 	rdlong	local02, local02
08c10     11 A8 0E F2 | 	cmp	local02, #17 wz
08c14     36 00 00 FF 
08c18     B0 65 86 F1 | 	sub	objptr, ##28080
08c1c     38 00 00 AF 
08c20     E8 65 06 A1 |  if_e	add	objptr, ##29160
08c24     32 AD 02 AB |  if_e	rdlong	local04, objptr
08c28     01 AC 06 A1 |  if_e	add	local04, #1
08c2c     32 AD 62 AC |  if_e	wrlong	local04, objptr
08c30     38 00 00 AF 
08c34     E8 65 86 A1 |  if_e	sub	objptr, ##29160
08c38                 | '     if lparts(ct).token=token_end then exit loop
08c38     38 00 00 FF 
08c3c     E8 65 06 F1 | 	add	objptr, ##29160
08c40     32 A9 02 FB | 	rdlong	local02, objptr
08c44     03 A8 66 F0 | 	shl	local02, #3
08c48     02 00 00 FF 
08c4c     38 64 86 F1 | 	sub	objptr, ##1080
08c50     32 A9 02 F1 | 	add	local02, objptr
08c54     04 A8 06 F1 | 	add	local02, #4
08c58     54 A9 02 FB | 	rdlong	local02, local02
08c5c     FE A9 0E F2 | 	cmp	local02, #510 wz
08c60     36 00 00 FF 
08c64     B0 65 86 F1 | 	sub	objptr, ##28080
08c68     08 00 90 AD |  if_e	jmp	#LR__0832
08c6c     68 FF 9F FD | 	jmp	#LR__0830
08c70                 | LR__0831
08c70     36 AA 06 F6 | 	mov	local03, #54
08c74                 | LR__0832
08c74                 | ' return i,err
08c74     53 7B 02 F6 | 	mov	result1, local01
08c78     55 7D 02 F6 | 	mov	result2, local03
08c7c     E7 F0 03 F6 | 	mov	ptra, fp
08c80     F2 00 A0 FD | 	call	#popregs_
08c84                 | _compile_read_ret
08c84     2D 00 64 FD | 	ret
08c88                 | 
08c88                 | ' 
08c88                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08c88                 | ' 
08c88                 | ' function compile_input() as ulong,ulong 
08c88                 | _compile_input
08c88     0F CA 05 F6 | 	mov	COUNT_, #15
08c8c     E8 00 A0 FD | 	call	#pushregs_
08c90                 | ' 
08c90                 | ' if lparts(ct).token=token_string then
08c90     38 00 00 FF 
08c94     E8 65 06 F1 | 	add	objptr, ##29160
08c98     32 97 02 FB | 	rdlong	arg03, objptr
08c9c     03 96 66 F0 | 	shl	arg03, #3
08ca0     02 00 00 FF 
08ca4     38 64 86 F1 | 	sub	objptr, ##1080
08ca8     32 97 02 F1 | 	add	arg03, objptr
08cac     04 96 06 F1 | 	add	arg03, #4
08cb0     4B 7D 02 FB | 	rdlong	result2, arg03
08cb4     01 00 00 FF 
08cb8     03 7C 0E F2 | 	cmp	result2, ##515 wz
08cbc     36 00 00 FF 
08cc0     B0 65 86 F1 | 	sub	objptr, ##28080
08cc4     38 06 90 5D |  if_ne	jmp	#LR__0847
08cc8     38 00 00 FF 
08ccc     E8 65 06 F1 | 	add	objptr, ##29160
08cd0     32 95 02 FB | 	rdlong	arg02, objptr
08cd4     03 94 66 F0 | 	shl	arg02, #3
08cd8     02 00 00 FF 
08cdc     38 64 86 F1 | 	sub	objptr, ##1080
08ce0     32 95 02 F1 | 	add	arg02, objptr
08ce4     4A 93 02 FB | 	rdlong	arg01, arg02
08ce8     36 00 00 FF 
08cec     B0 65 86 F1 | 	sub	objptr, ##28080
08cf0     49 AD 02 F6 | 	mov	local04, arg01
08cf4     D7 06 48 FB | 	callpa	#(@LR__0841-@LR__0840)>>2,fcache_load_ptr_
08cf8                 | LR__0840
08cf8     56 7B CA FA | 	rdbyte	result1, local04 wz
08cfc     01 AC 06 51 |  if_ne	add	local04, #1
08d00     F4 FF 9F 5D |  if_ne	jmp	#LR__0840
08d04                 | LR__0841
08d04     49 AD 82 F1 | 	sub	local04, arg01
08d08     56 7B 02 F6 | 	mov	result1, local04
08d0c     54 00 00 FF 
08d10     CC 64 06 F1 | 	add	objptr, ##43212
08d14     32 7B 62 FC | 	wrlong	result1, objptr
08d18     58 64 86 F1 | 	sub	objptr, #88
08d1c     32 93 02 FB | 	rdlong	arg01, objptr
08d20     3D 93 82 F1 | 	sub	arg01, result1
08d24     04 92 86 F1 | 	sub	arg01, #4
08d28     03 92 26 F5 | 	andn	arg01, #3
08d2c     32 93 62 FC | 	wrlong	arg01, objptr
08d30     58 64 06 F1 | 	add	objptr, #88
08d34     32 95 02 FB | 	rdlong	arg02, objptr
08d38     54 00 00 FF 
08d3c     CC 64 86 F1 | 	sub	objptr, ##43212
08d40     D4 82 B1 FD | 	call	#_pslpoke
08d44                 | '   pslpoke memtop,l
08d44                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08d44     01 AE 06 F6 | 	mov	local05, #1
08d48     54 00 00 FF 
08d4c     CC 64 06 F1 | 	add	objptr, ##43212
08d50     32 B1 02 FB | 	rdlong	local06, objptr
08d54     54 00 00 FF 
08d58     CC 64 86 F1 | 	sub	objptr, ##43212
08d5c     01 B0 06 F1 | 	add	local06, #1
08d60                 | LR__0842
08d60     58 AF 52 F2 | 	cmps	local05, local06 wc
08d64     5C 00 90 3D |  if_ae	jmp	#LR__0843
08d68     54 00 00 FF 
08d6c     74 64 06 F1 | 	add	objptr, ##43124
08d70     32 B3 02 FB | 	rdlong	local07, objptr
08d74     03 B2 06 F1 | 	add	local07, #3
08d78     57 B3 02 F1 | 	add	local07, local05
08d7c     1B 00 00 FF 
08d80     8C 64 86 F1 | 	sub	objptr, ##13964
08d84     32 95 02 FB | 	rdlong	arg02, objptr
08d88     03 94 66 F0 | 	shl	arg02, #3
08d8c     02 00 00 FF 
08d90     38 64 86 F1 | 	sub	objptr, ##1080
08d94     32 95 02 F1 | 	add	arg02, objptr
08d98     4A 93 02 FB | 	rdlong	arg01, arg02
08d9c     57 95 02 F6 | 	mov	arg02, local05
08da0     01 96 06 F6 | 	mov	arg03, #1
08da4     36 00 00 FF 
08da8     B0 65 86 F1 | 	sub	objptr, ##28080
08dac     B4 D7 B1 FD | 	call	#__system__Mid_S
08db0     3D 95 C2 FA | 	rdbyte	arg02, result1
08db4     59 93 02 F6 | 	mov	arg01, local07
08db8     EC 82 B1 FD | 	call	#_pspoke
08dbc     01 AE 06 F1 | 	add	local05, #1
08dc0     9C FF 9F FD | 	jmp	#LR__0842
08dc4                 | LR__0843
08dc4     54 00 00 FF 
08dc8     74 64 06 F1 | 	add	objptr, ##43124
08dcc     32 A7 02 FB | 	rdlong	local01, objptr
08dd0     2B AA 06 F6 | 	mov	local03, #43
08dd4     53 B5 02 F6 | 	mov	local08, local01
08dd8     54 B3 02 F6 | 	mov	local07, local02
08ddc     55 B7 02 F6 | 	mov	local09, local03
08de0     08 00 00 FF 
08de4     54 64 86 F1 | 	sub	objptr, ##4180
08de8     32 B1 02 FB | 	rdlong	local06, objptr
08dec     58 AF 02 F6 | 	mov	local05, local06
08df0     01 AE 66 F0 | 	shl	local05, #1
08df4     58 AF 02 F1 | 	add	local05, local06
08df8     02 AE 66 F0 | 	shl	local05, #2
08dfc     03 00 00 FF 
08e00     00 64 86 F1 | 	sub	objptr, ##1536
08e04     32 AF 02 F1 | 	add	local05, objptr
08e08     57 B5 62 FC | 	wrlong	local08, local05
08e0c     03 00 00 FF 
08e10     00 64 06 F1 | 	add	objptr, ##1536
08e14     32 B5 02 FB | 	rdlong	local08, objptr
08e18     5A B1 02 F6 | 	mov	local06, local08
08e1c     01 B0 66 F0 | 	shl	local06, #1
08e20     5A B1 02 F1 | 	add	local06, local08
08e24     02 B0 66 F0 | 	shl	local06, #2
08e28     03 00 00 FF 
08e2c     00 64 86 F1 | 	sub	objptr, ##1536
08e30     32 B1 02 F1 | 	add	local06, objptr
08e34     04 B0 06 F1 | 	add	local06, #4
08e38     58 B3 62 FC | 	wrlong	local07, local06
08e3c     03 00 00 FF 
08e40     00 64 06 F1 | 	add	objptr, ##1536
08e44     32 B5 02 FB | 	rdlong	local08, objptr
08e48     5A B3 02 F6 | 	mov	local07, local08
08e4c     01 B2 66 F0 | 	shl	local07, #1
08e50     5A B3 02 F1 | 	add	local07, local08
08e54     02 B2 66 F0 | 	shl	local07, #2
08e58     03 00 00 FF 
08e5c     00 64 86 F1 | 	sub	objptr, ##1536
08e60     32 B3 02 F1 | 	add	local07, objptr
08e64     08 B2 06 F1 | 	add	local07, #8
08e68     59 B7 62 FC | 	wrlong	local09, local07
08e6c     03 00 00 FF 
08e70     00 64 06 F1 | 	add	objptr, ##1536
08e74     32 B5 02 FB | 	rdlong	local08, objptr
08e78     01 B4 06 F1 | 	add	local08, #1
08e7c     32 B5 62 FC | 	wrlong	local08, objptr
08e80     13 00 00 FF 
08e84     38 64 86 F1 | 	sub	objptr, ##9784
08e88     32 B5 02 FB | 	rdlong	local08, objptr
08e8c     01 B4 06 F1 | 	add	local08, #1
08e90     32 B5 62 FC | 	wrlong	local08, objptr
08e94                 | '   t1.result.uresult=memtop
08e94                 | '   t1.result_type=result_string2  
08e94                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08e94                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08e94     03 B4 66 F0 | 	shl	local08, #3
08e98     02 00 00 FF 
08e9c     38 64 86 F1 | 	sub	objptr, ##1080
08ea0     32 B5 02 F1 | 	add	local08, objptr
08ea4     04 B4 06 F1 | 	add	local08, #4
08ea8     5A B5 02 FB | 	rdlong	local08, local08
08eac     11 B4 0E F2 | 	cmp	local08, #17 wz
08eb0     36 00 00 FF 
08eb4     B0 65 86 F1 | 	sub	objptr, ##28080
08eb8     60 01 90 5D |  if_ne	jmp	#LR__0844
08ebc     21 AA 06 F6 | 	mov	local03, #33
08ec0     53 B5 02 F6 | 	mov	local08, local01
08ec4     54 B3 02 F6 | 	mov	local07, local02
08ec8     55 B9 02 F6 | 	mov	local10, local03
08ecc     4C 00 00 FF 
08ed0     20 64 06 F1 | 	add	objptr, ##38944
08ed4     32 BB 02 FB | 	rdlong	local11, objptr
08ed8     5D BD 02 F6 | 	mov	local12, local11
08edc     01 BC 66 F0 | 	shl	local12, #1
08ee0     5D BD 02 F1 | 	add	local12, local11
08ee4     02 BC 66 F0 | 	shl	local12, #2
08ee8     03 00 00 FF 
08eec     00 64 86 F1 | 	sub	objptr, ##1536
08ef0     32 BD 02 F1 | 	add	local12, objptr
08ef4     5E B5 62 FC | 	wrlong	local08, local12
08ef8     03 00 00 FF 
08efc     00 64 06 F1 | 	add	objptr, ##1536
08f00     32 BF 02 FB | 	rdlong	local13, objptr
08f04     5F B5 02 F6 | 	mov	local08, local13
08f08     01 B4 66 F0 | 	shl	local08, #1
08f0c     5F B5 02 F1 | 	add	local08, local13
08f10     02 B4 66 F0 | 	shl	local08, #2
08f14     03 00 00 FF 
08f18     00 64 86 F1 | 	sub	objptr, ##1536
08f1c     32 B5 02 F1 | 	add	local08, objptr
08f20     04 B4 06 F1 | 	add	local08, #4
08f24     5A B3 62 FC | 	wrlong	local07, local08
08f28     03 00 00 FF 
08f2c     00 64 06 F1 | 	add	objptr, ##1536
08f30     32 B5 02 FB | 	rdlong	local08, objptr
08f34     5A C1 02 F6 | 	mov	local14, local08
08f38     01 C0 66 F0 | 	shl	local14, #1
08f3c     5A C1 02 F1 | 	add	local14, local08
08f40     02 C0 66 F0 | 	shl	local14, #2
08f44     03 00 00 FF 
08f48     00 64 86 F1 | 	sub	objptr, ##1536
08f4c     32 C1 02 F1 | 	add	local14, objptr
08f50     08 C0 06 F1 | 	add	local14, #8
08f54     60 B9 62 FC | 	wrlong	local10, local14
08f58     03 00 00 FF 
08f5c     00 64 06 F1 | 	add	objptr, ##1536
08f60     32 B5 02 FB | 	rdlong	local08, objptr
08f64     01 B4 06 F1 | 	add	local08, #1
08f68     32 B5 62 FC | 	wrlong	local08, objptr
08f6c     44 AA 06 F6 | 	mov	local03, #68
08f70     53 B5 02 F6 | 	mov	local08, local01
08f74     54 B3 02 F6 | 	mov	local07, local02
08f78     55 B9 02 F6 | 	mov	local10, local03
08f7c     32 C1 02 FB | 	rdlong	local14, objptr
08f80     60 BF 02 F6 | 	mov	local13, local14
08f84     01 BE 66 F0 | 	shl	local13, #1
08f88     60 BF 02 F1 | 	add	local13, local14
08f8c     02 BE 66 F0 | 	shl	local13, #2
08f90     03 00 00 FF 
08f94     00 64 86 F1 | 	sub	objptr, ##1536
08f98     32 BF 02 F1 | 	add	local13, objptr
08f9c     5F B5 62 FC | 	wrlong	local08, local13
08fa0     03 00 00 FF 
08fa4     00 64 06 F1 | 	add	objptr, ##1536
08fa8     32 C1 02 FB | 	rdlong	local14, objptr
08fac     60 BF 02 F6 | 	mov	local13, local14
08fb0     01 BE 66 F0 | 	shl	local13, #1
08fb4     60 BF 02 F1 | 	add	local13, local14
08fb8     02 BE 66 F0 | 	shl	local13, #2
08fbc     03 00 00 FF 
08fc0     00 64 86 F1 | 	sub	objptr, ##1536
08fc4     32 BF 02 F1 | 	add	local13, objptr
08fc8     04 BE 06 F1 | 	add	local13, #4
08fcc     5F B3 62 FC | 	wrlong	local07, local13
08fd0     03 00 00 FF 
08fd4     00 64 06 F1 | 	add	objptr, ##1536
08fd8     32 BF 02 FB | 	rdlong	local13, objptr
08fdc     5F C1 02 F6 | 	mov	local14, local13
08fe0     01 C0 66 F0 | 	shl	local14, #1
08fe4     5F C1 02 F1 | 	add	local14, local13
08fe8     02 C0 66 F0 | 	shl	local14, #2
08fec     03 00 00 FF 
08ff0     00 64 86 F1 | 	sub	objptr, ##1536
08ff4     32 C1 02 F1 | 	add	local14, objptr
08ff8     08 C0 06 F1 | 	add	local14, #8
08ffc     60 B9 62 FC | 	wrlong	local10, local14
09000     03 00 00 FF 
09004     00 64 06 F1 | 	add	objptr, ##1536
09008     32 B5 02 FB | 	rdlong	local08, objptr
0900c     01 B4 06 F1 | 	add	local08, #1
09010     32 B5 62 FC | 	wrlong	local08, objptr
09014     4C 00 00 FF 
09018     20 64 86 F1 | 	sub	objptr, ##38944
0901c                 | LR__0844
0901c                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0901c     38 00 00 FF 
09020     E8 65 06 F1 | 	add	objptr, ##29160
09024     32 B5 02 FB | 	rdlong	local08, objptr
09028     03 B4 66 F0 | 	shl	local08, #3
0902c     02 00 00 FF 
09030     38 64 86 F1 | 	sub	objptr, ##1080
09034     32 B5 02 F1 | 	add	local08, objptr
09038     04 B4 06 F1 | 	add	local08, #4
0903c     5A C1 02 FB | 	rdlong	local14, local08
09040     12 C0 0E F2 | 	cmp	local14, #18 wz
09044     36 00 00 FF 
09048     B0 65 86 F1 | 	sub	objptr, ##28080
0904c     60 01 90 5D |  if_ne	jmp	#LR__0845
09050     22 AA 06 F6 | 	mov	local03, #34
09054     53 B5 02 F6 | 	mov	local08, local01
09058     54 B3 02 F6 | 	mov	local07, local02
0905c     55 B9 02 F6 | 	mov	local10, local03
09060     4C 00 00 FF 
09064     20 64 06 F1 | 	add	objptr, ##38944
09068     32 C1 02 FB | 	rdlong	local14, objptr
0906c     60 BF 02 F6 | 	mov	local13, local14
09070     01 BE 66 F0 | 	shl	local13, #1
09074     60 BF 02 F1 | 	add	local13, local14
09078     02 BE 66 F0 | 	shl	local13, #2
0907c     03 00 00 FF 
09080     00 64 86 F1 | 	sub	objptr, ##1536
09084     32 BF 02 F1 | 	add	local13, objptr
09088     5F B5 62 FC | 	wrlong	local08, local13
0908c     03 00 00 FF 
09090     00 64 06 F1 | 	add	objptr, ##1536
09094     32 C1 02 FB | 	rdlong	local14, objptr
09098     60 B5 02 F6 | 	mov	local08, local14
0909c     01 B4 66 F0 | 	shl	local08, #1
090a0     60 B5 02 F1 | 	add	local08, local14
090a4     02 B4 66 F0 | 	shl	local08, #2
090a8     03 00 00 FF 
090ac     00 64 86 F1 | 	sub	objptr, ##1536
090b0     32 B5 02 F1 | 	add	local08, objptr
090b4     04 B4 06 F1 | 	add	local08, #4
090b8     5A B3 62 FC | 	wrlong	local07, local08
090bc     03 00 00 FF 
090c0     00 64 06 F1 | 	add	objptr, ##1536
090c4     32 B5 02 FB | 	rdlong	local08, objptr
090c8     5A C1 02 F6 | 	mov	local14, local08
090cc     01 C0 66 F0 | 	shl	local14, #1
090d0     5A C1 02 F1 | 	add	local14, local08
090d4     02 C0 66 F0 | 	shl	local14, #2
090d8     03 00 00 FF 
090dc     00 64 86 F1 | 	sub	objptr, ##1536
090e0     32 C1 02 F1 | 	add	local14, objptr
090e4     08 C0 06 F1 | 	add	local14, #8
090e8     60 B9 62 FC | 	wrlong	local10, local14
090ec     03 00 00 FF 
090f0     00 64 06 F1 | 	add	objptr, ##1536
090f4     32 B5 02 FB | 	rdlong	local08, objptr
090f8     01 B4 06 F1 | 	add	local08, #1
090fc     32 B5 62 FC | 	wrlong	local08, objptr
09100     44 AA 06 F6 | 	mov	local03, #68
09104     53 B5 02 F6 | 	mov	local08, local01
09108     54 B3 02 F6 | 	mov	local07, local02
0910c     55 B9 02 F6 | 	mov	local10, local03
09110     32 C1 02 FB | 	rdlong	local14, objptr
09114     60 BF 02 F6 | 	mov	local13, local14
09118     01 BE 66 F0 | 	shl	local13, #1
0911c     60 BF 02 F1 | 	add	local13, local14
09120     02 BE 66 F0 | 	shl	local13, #2
09124     03 00 00 FF 
09128     00 64 86 F1 | 	sub	objptr, ##1536
0912c     32 BF 02 F1 | 	add	local13, objptr
09130     5F B5 62 FC | 	wrlong	local08, local13
09134     03 00 00 FF 
09138     00 64 06 F1 | 	add	objptr, ##1536
0913c     32 C1 02 FB | 	rdlong	local14, objptr
09140     60 BF 02 F6 | 	mov	local13, local14
09144     01 BE 66 F0 | 	shl	local13, #1
09148     60 BF 02 F1 | 	add	local13, local14
0914c     02 BE 66 F0 | 	shl	local13, #2
09150     03 00 00 FF 
09154     00 64 86 F1 | 	sub	objptr, ##1536
09158     32 BF 02 F1 | 	add	local13, objptr
0915c     04 BE 06 F1 | 	add	local13, #4
09160     5F B3 62 FC | 	wrlong	local07, local13
09164     03 00 00 FF 
09168     00 64 06 F1 | 	add	objptr, ##1536
0916c     32 BF 02 FB | 	rdlong	local13, objptr
09170     5F C1 02 F6 | 	mov	local14, local13
09174     01 C0 66 F0 | 	shl	local14, #1
09178     5F C1 02 F1 | 	add	local14, local13
0917c     02 C0 66 F0 | 	shl	local14, #2
09180     03 00 00 FF 
09184     00 64 86 F1 | 	sub	objptr, ##1536
09188     32 C1 02 F1 | 	add	local14, objptr
0918c     08 C0 06 F1 | 	add	local14, #8
09190     60 B9 62 FC | 	wrlong	local10, local14
09194     03 00 00 FF 
09198     00 64 06 F1 | 	add	objptr, ##1536
0919c     32 B5 02 FB | 	rdlong	local08, objptr
091a0     01 B4 06 F1 | 	add	local08, #1
091a4     32 B5 62 FC | 	wrlong	local08, objptr
091a8     4C 00 00 FF 
091ac     20 64 86 F1 | 	sub	objptr, ##38944
091b0                 | LR__0845
091b0                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
091b0     38 00 00 FF 
091b4     E8 65 06 F1 | 	add	objptr, ##29160
091b8     32 B5 02 FB | 	rdlong	local08, objptr
091bc     03 B4 66 F0 | 	shl	local08, #3
091c0     02 00 00 FF 
091c4     38 64 86 F1 | 	sub	objptr, ##1080
091c8     32 B5 02 F1 | 	add	local08, objptr
091cc     04 B4 06 F1 | 	add	local08, #4
091d0     5A C1 02 FB | 	rdlong	local14, local08
091d4     12 C0 0E F2 | 	cmp	local14, #18 wz
091d8     36 00 00 FF 
091dc     B0 65 86 F1 | 	sub	objptr, ##28080
091e0     00 01 90 AD |  if_e	jmp	#LR__0846
091e4     38 00 00 FF 
091e8     E8 65 06 F1 | 	add	objptr, ##29160
091ec     32 B5 02 FB | 	rdlong	local08, objptr
091f0     03 B4 66 F0 | 	shl	local08, #3
091f4     02 00 00 FF 
091f8     38 64 86 F1 | 	sub	objptr, ##1080
091fc     32 B5 02 F1 | 	add	local08, objptr
09200     04 B4 06 F1 | 	add	local08, #4
09204     5A C1 02 FB | 	rdlong	local14, local08
09208     11 C0 0E F2 | 	cmp	local14, #17 wz
0920c     36 00 00 FF 
09210     B0 65 86 F1 | 	sub	objptr, ##28080
09214     CC 00 90 AD |  if_e	jmp	#LR__0846
09218     44 AA 06 F6 | 	mov	local03, #68
0921c     53 B5 02 F6 | 	mov	local08, local01
09220     54 B3 02 F6 | 	mov	local07, local02
09224     55 B9 02 F6 | 	mov	local10, local03
09228     4C 00 00 FF 
0922c     20 64 06 F1 | 	add	objptr, ##38944
09230     32 C1 02 FB | 	rdlong	local14, objptr
09234     60 BF 02 F6 | 	mov	local13, local14
09238     01 BE 66 F0 | 	shl	local13, #1
0923c     60 BF 02 F1 | 	add	local13, local14
09240     02 BE 66 F0 | 	shl	local13, #2
09244     03 00 00 FF 
09248     00 64 86 F1 | 	sub	objptr, ##1536
0924c     32 BF 02 F1 | 	add	local13, objptr
09250     5F B5 62 FC | 	wrlong	local08, local13
09254     03 00 00 FF 
09258     00 64 06 F1 | 	add	objptr, ##1536
0925c     32 C1 02 FB | 	rdlong	local14, objptr
09260     60 BF 02 F6 | 	mov	local13, local14
09264     01 BE 66 F0 | 	shl	local13, #1
09268     60 BF 02 F1 | 	add	local13, local14
0926c     02 BE 66 F0 | 	shl	local13, #2
09270     03 00 00 FF 
09274     00 64 86 F1 | 	sub	objptr, ##1536
09278     32 BF 02 F1 | 	add	local13, objptr
0927c     04 BE 06 F1 | 	add	local13, #4
09280     5F B3 62 FC | 	wrlong	local07, local13
09284     03 00 00 FF 
09288     00 64 06 F1 | 	add	objptr, ##1536
0928c     32 BF 02 FB | 	rdlong	local13, objptr
09290     5F C1 02 F6 | 	mov	local14, local13
09294     01 C0 66 F0 | 	shl	local14, #1
09298     5F C1 02 F1 | 	add	local14, local13
0929c     02 C0 66 F0 | 	shl	local14, #2
092a0     03 00 00 FF 
092a4     00 64 86 F1 | 	sub	objptr, ##1536
092a8     32 C1 02 F1 | 	add	local14, objptr
092ac     08 C0 06 F1 | 	add	local14, #8
092b0     60 B9 62 FC | 	wrlong	local10, local14
092b4     03 00 00 FF 
092b8     00 64 06 F1 | 	add	objptr, ##1536
092bc     32 B5 02 FB | 	rdlong	local08, objptr
092c0     01 B4 06 F1 | 	add	local08, #1
092c4     32 B5 62 FC | 	wrlong	local08, objptr
092c8     13 00 00 FF 
092cc     38 64 86 F1 | 	sub	objptr, ##9784
092d0     32 B5 02 FB | 	rdlong	local08, objptr
092d4     01 B4 86 F1 | 	sub	local08, #1
092d8     32 B5 62 FC | 	wrlong	local08, objptr
092dc     38 00 00 FF 
092e0     E8 65 86 F1 | 	sub	objptr, ##29160
092e4                 | LR__0846
092e4     38 00 00 FF 
092e8     E8 65 06 F1 | 	add	objptr, ##29160
092ec     32 B5 02 FB | 	rdlong	local08, objptr
092f0     01 B4 06 F1 | 	add	local08, #1
092f4     32 B5 62 FC | 	wrlong	local08, objptr
092f8     38 00 00 FF 
092fc     E8 65 86 F1 | 	sub	objptr, ##29160
09300                 | LR__0847
09300     00 AE 06 F6 | 	mov	local05, #0
09304                 | ' i=0 : err=0
09304                 | ' if lparts(ct).token<>token_end then
09304     38 00 00 FF 
09308     E8 65 06 F1 | 	add	objptr, ##29160
0930c     32 C1 02 FB | 	rdlong	local14, objptr
09310     03 C0 66 F0 | 	shl	local14, #3
09314     02 00 00 FF 
09318     38 64 86 F1 | 	sub	objptr, ##1080
0931c     32 C1 02 F1 | 	add	local14, objptr
09320     04 C0 06 F1 | 	add	local14, #4
09324     60 C1 02 FB | 	rdlong	local14, local14
09328     FE C1 0E F2 | 	cmp	local14, #510 wz
0932c     36 00 00 FF 
09330     B0 65 86 F1 | 	sub	objptr, ##28080
09334     98 00 90 AD |  if_e	jmp	#LR__0849
09338                 | '   do
09338                 | LR__0848
09338     8C 27 B0 FD | 	call	#_getaddr
0933c     3D C3 02 F6 | 	mov	local15, result1
09340     38 00 00 FF 
09344     E8 65 06 F1 | 	add	objptr, ##29160
09348     32 C1 02 FB | 	rdlong	local14, objptr
0934c     01 C0 06 F1 | 	add	local14, #1
09350     32 C1 62 FC | 	wrlong	local14, objptr
09354     01 AE 06 F1 | 	add	local05, #1
09358                 | '     err=getaddr() :ct+=1
09358                 | '     i+=1 
09358                 | '     if lparts(ct).token=token_comma then ct+=1 
09358     03 C0 66 F0 | 	shl	local14, #3
0935c     02 00 00 FF 
09360     38 64 86 F1 | 	sub	objptr, ##1080
09364     32 C1 02 F1 | 	add	local14, objptr
09368     04 C0 06 F1 | 	add	local14, #4
0936c     60 C1 02 FB | 	rdlong	local14, local14
09370     11 C0 0E F2 | 	cmp	local14, #17 wz
09374     36 00 00 FF 
09378     B0 65 86 F1 | 	sub	objptr, ##28080
0937c     38 00 00 AF 
09380     E8 65 06 A1 |  if_e	add	objptr, ##29160
09384     32 B5 02 AB |  if_e	rdlong	local08, objptr
09388     01 B4 06 A1 |  if_e	add	local08, #1
0938c     32 B5 62 AC |  if_e	wrlong	local08, objptr
09390     38 00 00 AF 
09394     E8 65 86 A1 |  if_e	sub	objptr, ##29160
09398                 | '     if lparts(ct).token=token_end then exit loop
09398     38 00 00 FF 
0939c     E8 65 06 F1 | 	add	objptr, ##29160
093a0     32 C1 02 FB | 	rdlong	local14, objptr
093a4     03 C0 66 F0 | 	shl	local14, #3
093a8     02 00 00 FF 
093ac     38 64 86 F1 | 	sub	objptr, ##1080
093b0     32 C1 02 F1 | 	add	local14, objptr
093b4     04 C0 06 F1 | 	add	local14, #4
093b8     60 C1 02 FB | 	rdlong	local14, local14
093bc     FE C1 0E F2 | 	cmp	local14, #510 wz
093c0     36 00 00 FF 
093c4     B0 65 86 F1 | 	sub	objptr, ##28080
093c8     08 00 90 AD |  if_e	jmp	#LR__0850
093cc     68 FF 9F FD | 	jmp	#LR__0848
093d0                 | LR__0849
093d0     36 C2 06 F6 | 	mov	local15, #54
093d4                 | LR__0850
093d4                 | ' return i,err
093d4     57 7B 02 F6 | 	mov	result1, local05
093d8     61 7D 02 F6 | 	mov	result2, local15
093dc     E7 F0 03 F6 | 	mov	ptra, fp
093e0     F2 00 A0 FD | 	call	#popregs_
093e4                 | _compile_input_ret
093e4     2D 00 64 FD | 	ret
093e8                 | 
093e8                 | ' 
093e8                 | ' '----- compile assign to an array element
093e8                 | ' 
093e8                 | ' function compile_array_assign() as ulong 
093e8                 | _compile_array_assign
093e8     0B CA 05 F6 | 	mov	COUNT_, #11
093ec     E8 00 A0 FD | 	call	#pushregs_
093f0     00 AC 06 F6 | 	mov	local04, #0
093f4     00 AE 06 F6 | 	mov	local05, #0
093f8     38 00 00 FF 
093fc     E8 65 06 F1 | 	add	objptr, ##29160
09400     32 B1 02 FB | 	rdlong	local06, objptr
09404     58 7B 02 F6 | 	mov	result1, local06
09408     01 7A 86 F1 | 	sub	result1, #1
0940c     03 7A 66 F0 | 	shl	result1, #3
09410     02 00 00 FF 
09414     38 64 86 F1 | 	sub	objptr, ##1080
09418     32 7B 02 F1 | 	add	result1, objptr
0941c     3D B3 02 FB | 	rdlong	local07, result1
09420                 | ' numpar=0 : err=0
09420                 | ' varname$=lparts(ct-1).part$
09420                 | ' if lparts(ct).token=token_lpar then
09420     03 B0 66 F0 | 	shl	local06, #3
09424     32 B1 02 F1 | 	add	local06, objptr
09428     04 B0 06 F1 | 	add	local06, #4
0942c     58 B1 02 FB | 	rdlong	local06, local06
09430     15 B0 0E F2 | 	cmp	local06, #21 wz
09434     36 00 00 FF 
09438     B0 65 86 F1 | 	sub	objptr, ##28080
0943c     F0 01 90 5D |  if_ne	jmp	#LR__0864
09440     38 00 00 FF 
09444     E8 65 06 F1 | 	add	objptr, ##29160
09448     32 B5 02 FB | 	rdlong	local08, objptr
0944c     01 B4 06 F1 | 	add	local08, #1
09450     32 B5 62 FC | 	wrlong	local08, objptr
09454     38 00 00 FF 
09458     E8 65 86 F1 | 	sub	objptr, ##29160
0945c                 | '   ct+=1 											' omit this lpar, this is for expr list
0945c                 | '   do
0945c                 | LR__0860
0945c     F8 29 B0 FD | 	call	#_expr
09460     38 00 00 FF 
09464     E8 65 06 F1 | 	add	objptr, ##29160
09468     32 B1 02 FB | 	rdlong	local06, objptr
0946c     01 B0 06 F1 | 	add	local06, #1
09470     32 B1 62 FC | 	wrlong	local06, objptr
09474     01 AC 06 F1 | 	add	local04, #1
09478     01 B0 86 F1 | 	sub	local06, #1
0947c     03 B0 66 F0 | 	shl	local06, #3
09480     02 00 00 FF 
09484     38 64 86 F1 | 	sub	objptr, ##1080
09488     32 B1 02 F1 | 	add	local06, objptr
0948c     04 B0 06 F1 | 	add	local06, #4
09490     58 B5 02 FB | 	rdlong	local08, local06
09494     14 B4 0E F2 | 	cmp	local08, #20 wz
09498     36 00 00 FF 
0949c     B0 65 86 F1 | 	sub	objptr, ##28080
094a0     34 00 90 AD |  if_e	jmp	#LR__0861
094a4     38 00 00 FF 
094a8     E8 65 06 F1 | 	add	objptr, ##29160
094ac     32 B5 02 FB | 	rdlong	local08, objptr
094b0     03 B4 66 F0 | 	shl	local08, #3
094b4     02 00 00 FF 
094b8     38 64 86 F1 | 	sub	objptr, ##1080
094bc     32 B5 02 F1 | 	add	local08, objptr
094c0     04 B4 06 F1 | 	add	local08, #4
094c4     5A B5 02 FB | 	rdlong	local08, local08
094c8     FE B5 0E F2 | 	cmp	local08, #510 wz
094cc     36 00 00 FF 
094d0     B0 65 86 F1 | 	sub	objptr, ##28080
094d4     84 FF 9F 5D |  if_ne	jmp	#LR__0860
094d8                 | LR__0861
094d8     38 00 00 FF 
094dc     E8 65 06 F1 | 	add	objptr, ##29160
094e0     32 B5 02 FB | 	rdlong	local08, objptr
094e4     01 B4 06 F1 | 	add	local08, #1
094e8     32 B5 62 FC | 	wrlong	local08, objptr
094ec     38 00 00 FF 
094f0     E8 65 86 F1 | 	sub	objptr, ##29160
094f4     60 29 B0 FD | 	call	#_expr
094f8     01 B6 66 F6 | 	neg	local09, #1
094fc     00 B8 06 F6 | 	mov	local10, #0
09500                 | '   ct+=1 : expr()
09500                 | '   j=-1 : i=0 
09500                 | '   do 
09500                 | LR__0862
09500                 | '     if variables(i).name=varname$ then j=i: exit loop
09500     5C B1 02 F6 | 	mov	local06, local10
09504     04 B0 66 F0 | 	shl	local06, #4
09508     32 B5 02 F6 | 	mov	local08, objptr
0950c     16 00 00 FF 
09510     9C B5 06 F1 | 	add	local08, ##11676
09514     5A B1 02 F1 | 	add	local06, local08
09518     58 93 02 FB | 	rdlong	arg01, local06
0951c     59 95 02 F6 | 	mov	arg02, local07
09520     A8 B6 B1 FD | 	call	#__system___string_cmp
09524     00 7A 0E F2 | 	cmp	result1, #0 wz
09528     5C B7 02 A6 |  if_e	mov	local09, local10
0952c     20 00 90 AD |  if_e	jmp	#LR__0863
09530     01 B8 06 F1 | 	add	local10, #1
09534     36 00 00 FF 
09538     AC 65 06 F1 | 	add	objptr, ##28076
0953c     32 B5 02 FB | 	rdlong	local08, objptr
09540     36 00 00 FF 
09544     AC 65 86 F1 | 	sub	objptr, ##28076
09548     5A B9 5A F2 | 	cmps	local10, local08 wcz
0954c     B0 FF 9F ED |  if_be	jmp	#LR__0862
09550                 | LR__0863
09550     5B A7 02 F6 | 	mov	local01, local09
09554     56 A9 02 F6 | 	mov	local02, local04
09558     17 AA 06 F6 | 	mov	local03, #23
0955c     53 B5 02 F6 | 	mov	local08, local01
09560     54 BB 02 F6 | 	mov	local11, local02
09564     55 B3 02 F6 | 	mov	local07, local03
09568     4C 00 00 FF 
0956c     20 64 06 F1 | 	add	objptr, ##38944
09570     32 A7 02 FB | 	rdlong	local01, objptr
09574     53 B7 02 F6 | 	mov	local09, local01
09578     01 B6 66 F0 | 	shl	local09, #1
0957c     53 B7 02 F1 | 	add	local09, local01
09580     02 B6 66 F0 | 	shl	local09, #2
09584     03 00 00 FF 
09588     00 64 86 F1 | 	sub	objptr, ##1536
0958c     32 B7 02 F1 | 	add	local09, objptr
09590     5B B5 62 FC | 	wrlong	local08, local09
09594     03 00 00 FF 
09598     00 64 06 F1 | 	add	objptr, ##1536
0959c     32 A7 02 FB | 	rdlong	local01, objptr
095a0     53 B7 02 F6 | 	mov	local09, local01
095a4     01 B6 66 F0 | 	shl	local09, #1
095a8     53 B7 02 F1 | 	add	local09, local01
095ac     02 B6 66 F0 | 	shl	local09, #2
095b0     03 00 00 FF 
095b4     00 64 86 F1 | 	sub	objptr, ##1536
095b8     32 B7 02 F1 | 	add	local09, objptr
095bc     04 B6 06 F1 | 	add	local09, #4
095c0     5B BB 62 FC | 	wrlong	local11, local09
095c4     03 00 00 FF 
095c8     00 64 06 F1 | 	add	objptr, ##1536
095cc     32 BB 02 FB | 	rdlong	local11, objptr
095d0     5D A7 02 F6 | 	mov	local01, local11
095d4     01 A6 66 F0 | 	shl	local01, #1
095d8     5D A7 02 F1 | 	add	local01, local11
095dc     02 A6 66 F0 | 	shl	local01, #2
095e0     03 00 00 FF 
095e4     00 64 86 F1 | 	sub	objptr, ##1536
095e8     32 A7 02 F1 | 	add	local01, objptr
095ec     08 A6 06 F1 | 	add	local01, #8
095f0     53 B3 62 FC | 	wrlong	local07, local01
095f4     03 00 00 FF 
095f8     00 64 06 F1 | 	add	objptr, ##1536
095fc     32 B5 02 FB | 	rdlong	local08, objptr
09600     01 B4 06 F1 | 	add	local08, #1
09604     32 B5 62 FC | 	wrlong	local08, objptr
09608                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
09608                 | '   if numpar>3 then err=45
09608     04 AC 16 F2 | 	cmp	local04, #4 wc
0960c     2D AE 06 36 |  if_ae	mov	local05, #45
09610                 | '   if i>varnum then err=20
09610     15 00 00 FF 
09614     74 64 86 F1 | 	sub	objptr, ##10868
09618     32 B5 02 FB | 	rdlong	local08, objptr
0961c     36 00 00 FF 
09620     AC 65 86 F1 | 	sub	objptr, ##28076
09624     5A B9 5A F2 | 	cmps	local10, local08 wcz
09628     14 AE 06 16 |  if_a	mov	local05, #20
0962c     04 00 90 FD | 	jmp	#LR__0865
09630                 | LR__0864
09630     0E AE 06 F6 | 	mov	local05, #14
09634                 | LR__0865
09634                 | ' return err
09634     57 7B 02 F6 | 	mov	result1, local05
09638     E7 F0 03 F6 | 	mov	ptra, fp
0963c     F2 00 A0 FD | 	call	#popregs_
09640                 | _compile_array_assign_ret
09640     2D 00 64 FD | 	ret
09644                 | 
09644                 | ' 
09644                 | ' '----- compile print command with its ";" and "," modifiers
09644                 | ' 
09644                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
09644                 | _compile_print
09644     0B CA 05 F6 | 	mov	COUNT_, #11
09648     E8 00 A0 FD | 	call	#pushregs_
0964c     00 A6 06 F6 | 	mov	local01, #0
09650     1D AA 06 F6 | 	mov	local03, #29
09654                 | ' t1.result.uresult=0 : t1.result_type=result_uint
09654                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
09654     38 00 00 FF 
09658     E8 65 06 F1 | 	add	objptr, ##29160
0965c     32 AD 02 FB | 	rdlong	local04, objptr
09660     03 AC 66 F0 | 	shl	local04, #3
09664     02 00 00 FF 
09668     38 64 86 F1 | 	sub	objptr, ##1080
0966c     32 AD 02 F1 | 	add	local04, objptr
09670     04 AC 06 F1 | 	add	local04, #4
09674     56 AD 02 FB | 	rdlong	local04, local04
09678     FE AD 0E F2 | 	cmp	local04, #510 wz
0967c     36 00 00 FF 
09680     B0 65 86 F1 | 	sub	objptr, ##28080
09684     68 01 90 5D |  if_ne	jmp	#LR__0870
09688     20 AA 06 F6 | 	mov	local03, #32
0968c     53 AF 02 F6 | 	mov	local05, local01
09690     54 B1 02 F6 | 	mov	local06, local02
09694     55 B3 02 F6 | 	mov	local07, local03
09698     4C 00 00 FF 
0969c     20 64 06 F1 | 	add	objptr, ##38944
096a0     32 B5 02 FB | 	rdlong	local08, objptr
096a4     5A B7 02 F6 | 	mov	local09, local08
096a8     01 B6 66 F0 | 	shl	local09, #1
096ac     5A B7 02 F1 | 	add	local09, local08
096b0     02 B6 66 F0 | 	shl	local09, #2
096b4     03 00 00 FF 
096b8     00 64 86 F1 | 	sub	objptr, ##1536
096bc     32 B7 02 F1 | 	add	local09, objptr
096c0     5B AF 62 FC | 	wrlong	local05, local09
096c4     03 00 00 FF 
096c8     00 64 06 F1 | 	add	objptr, ##1536
096cc     32 AF 02 FB | 	rdlong	local05, objptr
096d0     57 B9 02 F6 | 	mov	local10, local05
096d4     01 B8 66 F0 | 	shl	local10, #1
096d8     57 B9 02 F1 | 	add	local10, local05
096dc     02 B8 66 F0 | 	shl	local10, #2
096e0     03 00 00 FF 
096e4     00 64 86 F1 | 	sub	objptr, ##1536
096e8     32 B9 02 F1 | 	add	local10, objptr
096ec     04 B8 06 F1 | 	add	local10, #4
096f0     5C B1 62 FC | 	wrlong	local06, local10
096f4     03 00 00 FF 
096f8     00 64 06 F1 | 	add	objptr, ##1536
096fc     32 AF 02 FB | 	rdlong	local05, objptr
09700     57 BB 02 F6 | 	mov	local11, local05
09704     01 BA 66 F0 | 	shl	local11, #1
09708     57 BB 02 F1 | 	add	local11, local05
0970c     02 BA 66 F0 | 	shl	local11, #2
09710     03 00 00 FF 
09714     00 64 86 F1 | 	sub	objptr, ##1536
09718     32 BB 02 F1 | 	add	local11, objptr
0971c     08 BA 06 F1 | 	add	local11, #8
09720     5D B3 62 FC | 	wrlong	local07, local11
09724     03 00 00 FF 
09728     00 64 06 F1 | 	add	objptr, ##1536
0972c     32 AF 02 FB | 	rdlong	local05, objptr
09730     01 AE 06 F1 | 	add	local05, #1
09734     32 AF 62 FC | 	wrlong	local05, objptr
09738     44 AA 06 F6 | 	mov	local03, #68
0973c     53 AF 02 F6 | 	mov	local05, local01
09740     54 B1 02 F6 | 	mov	local06, local02
09744     55 B3 02 F6 | 	mov	local07, local03
09748     32 B5 02 FB | 	rdlong	local08, objptr
0974c     5A B7 02 F6 | 	mov	local09, local08
09750     01 B6 66 F0 | 	shl	local09, #1
09754     5A B7 02 F1 | 	add	local09, local08
09758     02 B6 66 F0 | 	shl	local09, #2
0975c     03 00 00 FF 
09760     00 64 86 F1 | 	sub	objptr, ##1536
09764     32 B7 02 F1 | 	add	local09, objptr
09768     5B AF 62 FC | 	wrlong	local05, local09
0976c     03 00 00 FF 
09770     00 64 06 F1 | 	add	objptr, ##1536
09774     32 BB 02 FB | 	rdlong	local11, objptr
09778     5D B9 02 F6 | 	mov	local10, local11
0977c     01 B8 66 F0 | 	shl	local10, #1
09780     5D B9 02 F1 | 	add	local10, local11
09784     02 B8 66 F0 | 	shl	local10, #2
09788     03 00 00 FF 
0978c     00 64 86 F1 | 	sub	objptr, ##1536
09790     32 B9 02 F1 | 	add	local10, objptr
09794     04 B8 06 F1 | 	add	local10, #4
09798     5C B1 62 FC | 	wrlong	local06, local10
0979c     03 00 00 FF 
097a0     00 64 06 F1 | 	add	objptr, ##1536
097a4     32 B9 02 FB | 	rdlong	local10, objptr
097a8     5C BB 02 F6 | 	mov	local11, local10
097ac     01 BA 66 F0 | 	shl	local11, #1
097b0     5C BB 02 F1 | 	add	local11, local10
097b4     02 BA 66 F0 | 	shl	local11, #2
097b8     03 00 00 FF 
097bc     00 64 86 F1 | 	sub	objptr, ##1536
097c0     32 BB 02 F1 | 	add	local11, objptr
097c4     08 BA 06 F1 | 	add	local11, #8
097c8     5D B3 62 FC | 	wrlong	local07, local11
097cc     03 00 00 FF 
097d0     00 64 06 F1 | 	add	objptr, ##1536
097d4     32 AF 02 FB | 	rdlong	local05, objptr
097d8     01 AE 06 F1 | 	add	local05, #1
097dc     32 AF 62 FC | 	wrlong	local05, objptr
097e0     4C 00 00 FF 
097e4     20 64 86 F1 | 	sub	objptr, ##38944
097e8     00 7A 06 F6 | 	mov	result1, #0
097ec     20 05 90 FD | 	jmp	#LR__0877
097f0                 | LR__0870
097f0                 | ' do
097f0                 | LR__0871
097f0     64 26 B0 FD | 	call	#_expr
097f4                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
097f4                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
097f4     38 00 00 FF 
097f8     E8 65 06 F1 | 	add	objptr, ##29160
097fc     32 AD 02 FB | 	rdlong	local04, objptr
09800     03 AC 66 F0 | 	shl	local04, #3
09804     02 00 00 FF 
09808     38 64 86 F1 | 	sub	objptr, ##1080
0980c     32 AD 02 F1 | 	add	local04, objptr
09810     04 AC 06 F1 | 	add	local04, #4
09814     56 B5 02 FB | 	rdlong	local08, local04
09818     11 B4 0E F2 | 	cmp	local08, #17 wz
0981c     36 00 00 FF 
09820     B0 65 86 F1 | 	sub	objptr, ##28080
09824     60 01 90 5D |  if_ne	jmp	#LR__0872
09828     21 AA 06 F6 | 	mov	local03, #33
0982c     53 AF 02 F6 | 	mov	local05, local01
09830     54 B1 02 F6 | 	mov	local06, local02
09834     55 B3 02 F6 | 	mov	local07, local03
09838     4C 00 00 FF 
0983c     20 64 06 F1 | 	add	objptr, ##38944
09840     32 B5 02 FB | 	rdlong	local08, objptr
09844     5A B7 02 F6 | 	mov	local09, local08
09848     01 B6 66 F0 | 	shl	local09, #1
0984c     5A B7 02 F1 | 	add	local09, local08
09850     02 B6 66 F0 | 	shl	local09, #2
09854     03 00 00 FF 
09858     00 64 86 F1 | 	sub	objptr, ##1536
0985c     32 B7 02 F1 | 	add	local09, objptr
09860     5B AF 62 FC | 	wrlong	local05, local09
09864     03 00 00 FF 
09868     00 64 06 F1 | 	add	objptr, ##1536
0986c     32 BB 02 FB | 	rdlong	local11, objptr
09870     5D B9 02 F6 | 	mov	local10, local11
09874     01 B8 66 F0 | 	shl	local10, #1
09878     5D B9 02 F1 | 	add	local10, local11
0987c     02 B8 66 F0 | 	shl	local10, #2
09880     03 00 00 FF 
09884     00 64 86 F1 | 	sub	objptr, ##1536
09888     32 B9 02 F1 | 	add	local10, objptr
0988c     04 B8 06 F1 | 	add	local10, #4
09890     5C B1 62 FC | 	wrlong	local06, local10
09894     03 00 00 FF 
09898     00 64 06 F1 | 	add	objptr, ##1536
0989c     32 AF 02 FB | 	rdlong	local05, objptr
098a0     57 BB 02 F6 | 	mov	local11, local05
098a4     01 BA 66 F0 | 	shl	local11, #1
098a8     57 BB 02 F1 | 	add	local11, local05
098ac     02 BA 66 F0 | 	shl	local11, #2
098b0     03 00 00 FF 
098b4     00 64 86 F1 | 	sub	objptr, ##1536
098b8     32 BB 02 F1 | 	add	local11, objptr
098bc     08 BA 06 F1 | 	add	local11, #8
098c0     5D B3 62 FC | 	wrlong	local07, local11
098c4     03 00 00 FF 
098c8     00 64 06 F1 | 	add	objptr, ##1536
098cc     32 AF 02 FB | 	rdlong	local05, objptr
098d0     01 AE 06 F1 | 	add	local05, #1
098d4     32 AF 62 FC | 	wrlong	local05, objptr
098d8     44 AA 06 F6 | 	mov	local03, #68
098dc     53 AF 02 F6 | 	mov	local05, local01
098e0     54 B1 02 F6 | 	mov	local06, local02
098e4     55 B3 02 F6 | 	mov	local07, local03
098e8     32 B5 02 FB | 	rdlong	local08, objptr
098ec     5A B7 02 F6 | 	mov	local09, local08
098f0     01 B6 66 F0 | 	shl	local09, #1
098f4     5A B7 02 F1 | 	add	local09, local08
098f8     02 B6 66 F0 | 	shl	local09, #2
098fc     03 00 00 FF 
09900     00 64 86 F1 | 	sub	objptr, ##1536
09904     32 B7 02 F1 | 	add	local09, objptr
09908     5B AF 62 FC | 	wrlong	local05, local09
0990c     03 00 00 FF 
09910     00 64 06 F1 | 	add	objptr, ##1536
09914     32 BB 02 FB | 	rdlong	local11, objptr
09918     5D B9 02 F6 | 	mov	local10, local11
0991c     01 B8 66 F0 | 	shl	local10, #1
09920     5D B9 02 F1 | 	add	local10, local11
09924     02 B8 66 F0 | 	shl	local10, #2
09928     03 00 00 FF 
0992c     00 64 86 F1 | 	sub	objptr, ##1536
09930     32 B9 02 F1 | 	add	local10, objptr
09934     04 B8 06 F1 | 	add	local10, #4
09938     5C B1 62 FC | 	wrlong	local06, local10
0993c     03 00 00 FF 
09940     00 64 06 F1 | 	add	objptr, ##1536
09944     32 B9 02 FB | 	rdlong	local10, objptr
09948     5C BB 02 F6 | 	mov	local11, local10
0994c     01 BA 66 F0 | 	shl	local11, #1
09950     5C BB 02 F1 | 	add	local11, local10
09954     02 BA 66 F0 | 	shl	local11, #2
09958     03 00 00 FF 
0995c     00 64 86 F1 | 	sub	objptr, ##1536
09960     32 BB 02 F1 | 	add	local11, objptr
09964     08 BA 06 F1 | 	add	local11, #8
09968     5D B3 62 FC | 	wrlong	local07, local11
0996c     03 00 00 FF 
09970     00 64 06 F1 | 	add	objptr, ##1536
09974     32 AF 02 FB | 	rdlong	local05, objptr
09978     01 AE 06 F1 | 	add	local05, #1
0997c     32 AF 62 FC | 	wrlong	local05, objptr
09980     4C 00 00 FF 
09984     20 64 86 F1 | 	sub	objptr, ##38944
09988                 | LR__0872
09988                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09988     38 00 00 FF 
0998c     E8 65 06 F1 | 	add	objptr, ##29160
09990     32 AD 02 FB | 	rdlong	local04, objptr
09994     03 AC 66 F0 | 	shl	local04, #3
09998     02 00 00 FF 
0999c     38 64 86 F1 | 	sub	objptr, ##1080
099a0     32 AD 02 F1 | 	add	local04, objptr
099a4     04 AC 06 F1 | 	add	local04, #4
099a8     56 B5 02 FB | 	rdlong	local08, local04
099ac     12 B4 0E F2 | 	cmp	local08, #18 wz
099b0     36 00 00 FF 
099b4     B0 65 86 F1 | 	sub	objptr, ##28080
099b8     60 01 90 5D |  if_ne	jmp	#LR__0873
099bc     22 AA 06 F6 | 	mov	local03, #34
099c0     53 AF 02 F6 | 	mov	local05, local01
099c4     54 B1 02 F6 | 	mov	local06, local02
099c8     55 B3 02 F6 | 	mov	local07, local03
099cc     4C 00 00 FF 
099d0     20 64 06 F1 | 	add	objptr, ##38944
099d4     32 B5 02 FB | 	rdlong	local08, objptr
099d8     5A B7 02 F6 | 	mov	local09, local08
099dc     01 B6 66 F0 | 	shl	local09, #1
099e0     5A B7 02 F1 | 	add	local09, local08
099e4     02 B6 66 F0 | 	shl	local09, #2
099e8     03 00 00 FF 
099ec     00 64 86 F1 | 	sub	objptr, ##1536
099f0     32 B7 02 F1 | 	add	local09, objptr
099f4     5B AF 62 FC | 	wrlong	local05, local09
099f8     03 00 00 FF 
099fc     00 64 06 F1 | 	add	objptr, ##1536
09a00     32 BB 02 FB | 	rdlong	local11, objptr
09a04     5D B9 02 F6 | 	mov	local10, local11
09a08     01 B8 66 F0 | 	shl	local10, #1
09a0c     5D B9 02 F1 | 	add	local10, local11
09a10     02 B8 66 F0 | 	shl	local10, #2
09a14     03 00 00 FF 
09a18     00 64 86 F1 | 	sub	objptr, ##1536
09a1c     32 B9 02 F1 | 	add	local10, objptr
09a20     04 B8 06 F1 | 	add	local10, #4
09a24     5C B1 62 FC | 	wrlong	local06, local10
09a28     03 00 00 FF 
09a2c     00 64 06 F1 | 	add	objptr, ##1536
09a30     32 AF 02 FB | 	rdlong	local05, objptr
09a34     57 BB 02 F6 | 	mov	local11, local05
09a38     01 BA 66 F0 | 	shl	local11, #1
09a3c     57 BB 02 F1 | 	add	local11, local05
09a40     02 BA 66 F0 | 	shl	local11, #2
09a44     03 00 00 FF 
09a48     00 64 86 F1 | 	sub	objptr, ##1536
09a4c     32 BB 02 F1 | 	add	local11, objptr
09a50     08 BA 06 F1 | 	add	local11, #8
09a54     5D B3 62 FC | 	wrlong	local07, local11
09a58     03 00 00 FF 
09a5c     00 64 06 F1 | 	add	objptr, ##1536
09a60     32 AF 02 FB | 	rdlong	local05, objptr
09a64     01 AE 06 F1 | 	add	local05, #1
09a68     32 AF 62 FC | 	wrlong	local05, objptr
09a6c     44 AA 06 F6 | 	mov	local03, #68
09a70     53 AF 02 F6 | 	mov	local05, local01
09a74     54 B1 02 F6 | 	mov	local06, local02
09a78     55 B3 02 F6 | 	mov	local07, local03
09a7c     32 B5 02 FB | 	rdlong	local08, objptr
09a80     5A B7 02 F6 | 	mov	local09, local08
09a84     01 B6 66 F0 | 	shl	local09, #1
09a88     5A B7 02 F1 | 	add	local09, local08
09a8c     02 B6 66 F0 | 	shl	local09, #2
09a90     03 00 00 FF 
09a94     00 64 86 F1 | 	sub	objptr, ##1536
09a98     32 B7 02 F1 | 	add	local09, objptr
09a9c     5B AF 62 FC | 	wrlong	local05, local09
09aa0     03 00 00 FF 
09aa4     00 64 06 F1 | 	add	objptr, ##1536
09aa8     32 BB 02 FB | 	rdlong	local11, objptr
09aac     5D B9 02 F6 | 	mov	local10, local11
09ab0     01 B8 66 F0 | 	shl	local10, #1
09ab4     5D B9 02 F1 | 	add	local10, local11
09ab8     02 B8 66 F0 | 	shl	local10, #2
09abc     03 00 00 FF 
09ac0     00 64 86 F1 | 	sub	objptr, ##1536
09ac4     32 B9 02 F1 | 	add	local10, objptr
09ac8     04 B8 06 F1 | 	add	local10, #4
09acc     5C B1 62 FC | 	wrlong	local06, local10
09ad0     03 00 00 FF 
09ad4     00 64 06 F1 | 	add	objptr, ##1536
09ad8     32 B9 02 FB | 	rdlong	local10, objptr
09adc     5C BB 02 F6 | 	mov	local11, local10
09ae0     01 BA 66 F0 | 	shl	local11, #1
09ae4     5C BB 02 F1 | 	add	local11, local10
09ae8     02 BA 66 F0 | 	shl	local11, #2
09aec     03 00 00 FF 
09af0     00 64 86 F1 | 	sub	objptr, ##1536
09af4     32 BB 02 F1 | 	add	local11, objptr
09af8     08 BA 06 F1 | 	add	local11, #8
09afc     5D B3 62 FC | 	wrlong	local07, local11
09b00     03 00 00 FF 
09b04     00 64 06 F1 | 	add	objptr, ##1536
09b08     32 AF 02 FB | 	rdlong	local05, objptr
09b0c     01 AE 06 F1 | 	add	local05, #1
09b10     32 AF 62 FC | 	wrlong	local05, objptr
09b14     4C 00 00 FF 
09b18     20 64 86 F1 | 	sub	objptr, ##38944
09b1c                 | LR__0873
09b1c                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09b1c     38 00 00 FF 
09b20     E8 65 06 F1 | 	add	objptr, ##29160
09b24     32 AD 02 FB | 	rdlong	local04, objptr
09b28     03 AC 66 F0 | 	shl	local04, #3
09b2c     02 00 00 FF 
09b30     38 64 86 F1 | 	sub	objptr, ##1080
09b34     32 AD 02 F1 | 	add	local04, objptr
09b38     04 AC 06 F1 | 	add	local04, #4
09b3c     56 B5 02 FB | 	rdlong	local08, local04
09b40     FE B5 0E F2 | 	cmp	local08, #510 wz
09b44     36 00 00 FF 
09b48     B0 65 86 F1 | 	sub	objptr, ##28080
09b4c     B8 00 90 5D |  if_ne	jmp	#LR__0874
09b50     44 AA 06 F6 | 	mov	local03, #68
09b54     53 AF 02 F6 | 	mov	local05, local01
09b58     54 B1 02 F6 | 	mov	local06, local02
09b5c     55 B3 02 F6 | 	mov	local07, local03
09b60     4C 00 00 FF 
09b64     20 64 06 F1 | 	add	objptr, ##38944
09b68     32 B5 02 FB | 	rdlong	local08, objptr
09b6c     5A B7 02 F6 | 	mov	local09, local08
09b70     01 B6 66 F0 | 	shl	local09, #1
09b74     5A B7 02 F1 | 	add	local09, local08
09b78     02 B6 66 F0 | 	shl	local09, #2
09b7c     03 00 00 FF 
09b80     00 64 86 F1 | 	sub	objptr, ##1536
09b84     32 B7 02 F1 | 	add	local09, objptr
09b88     5B AF 62 FC | 	wrlong	local05, local09
09b8c     03 00 00 FF 
09b90     00 64 06 F1 | 	add	objptr, ##1536
09b94     32 BB 02 FB | 	rdlong	local11, objptr
09b98     5D B9 02 F6 | 	mov	local10, local11
09b9c     01 B8 66 F0 | 	shl	local10, #1
09ba0     5D B9 02 F1 | 	add	local10, local11
09ba4     02 B8 66 F0 | 	shl	local10, #2
09ba8     03 00 00 FF 
09bac     00 64 86 F1 | 	sub	objptr, ##1536
09bb0     32 B9 02 F1 | 	add	local10, objptr
09bb4     04 B8 06 F1 | 	add	local10, #4
09bb8     5C B1 62 FC | 	wrlong	local06, local10
09bbc     03 00 00 FF 
09bc0     00 64 06 F1 | 	add	objptr, ##1536
09bc4     32 B9 02 FB | 	rdlong	local10, objptr
09bc8     5C BB 02 F6 | 	mov	local11, local10
09bcc     01 BA 66 F0 | 	shl	local11, #1
09bd0     5C BB 02 F1 | 	add	local11, local10
09bd4     02 BA 66 F0 | 	shl	local11, #2
09bd8     03 00 00 FF 
09bdc     00 64 86 F1 | 	sub	objptr, ##1536
09be0     32 BB 02 F1 | 	add	local11, objptr
09be4     08 BA 06 F1 | 	add	local11, #8
09be8     5D B3 62 FC | 	wrlong	local07, local11
09bec     03 00 00 FF 
09bf0     00 64 06 F1 | 	add	objptr, ##1536
09bf4     32 AF 02 FB | 	rdlong	local05, objptr
09bf8     01 AE 06 F1 | 	add	local05, #1
09bfc     32 AF 62 FC | 	wrlong	local05, objptr
09c00     4C 00 00 FF 
09c04     20 64 86 F1 | 	sub	objptr, ##38944
09c08                 | LR__0874
09c08                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09c08     38 00 00 FF 
09c0c     E8 65 06 F1 | 	add	objptr, ##29160
09c10     32 AD 02 FB | 	rdlong	local04, objptr
09c14     03 AC 66 F0 | 	shl	local04, #3
09c18     02 00 00 FF 
09c1c     38 64 86 F1 | 	sub	objptr, ##1080
09c20     32 AD 02 F1 | 	add	local04, objptr
09c24     04 AC 06 F1 | 	add	local04, #4
09c28     56 B5 02 FB | 	rdlong	local08, local04
09c2c     11 B4 0E F2 | 	cmp	local08, #17 wz
09c30     36 00 00 FF 
09c34     B0 65 86 F1 | 	sub	objptr, ##28080
09c38     6C 00 90 AD |  if_e	jmp	#LR__0875
09c3c     38 00 00 FF 
09c40     E8 65 06 F1 | 	add	objptr, ##29160
09c44     32 B5 02 FB | 	rdlong	local08, objptr
09c48     03 B4 66 F0 | 	shl	local08, #3
09c4c     02 00 00 FF 
09c50     38 64 86 F1 | 	sub	objptr, ##1080
09c54     32 B5 02 F1 | 	add	local08, objptr
09c58     04 B4 06 F1 | 	add	local08, #4
09c5c     5A B5 02 FB | 	rdlong	local08, local08
09c60     12 B4 0E F2 | 	cmp	local08, #18 wz
09c64     36 00 00 FF 
09c68     B0 65 86 F1 | 	sub	objptr, ##28080
09c6c     38 00 90 AD |  if_e	jmp	#LR__0875
09c70     38 00 00 FF 
09c74     E8 65 06 F1 | 	add	objptr, ##29160
09c78     32 BB 02 FB | 	rdlong	local11, objptr
09c7c     03 BA 66 F0 | 	shl	local11, #3
09c80     02 00 00 FF 
09c84     38 64 86 F1 | 	sub	objptr, ##1080
09c88     32 BB 02 F1 | 	add	local11, objptr
09c8c     04 BA 06 F1 | 	add	local11, #4
09c90     5D BB 02 FB | 	rdlong	local11, local11
09c94     FE BB 0E F2 | 	cmp	local11, #510 wz
09c98     36 00 00 FF 
09c9c     B0 65 86 F1 | 	sub	objptr, ##28080
09ca0     16 7A 06 56 |  if_ne	mov	result1, #22
09ca4     68 00 90 5D |  if_ne	jmp	#LR__0877
09ca8                 | LR__0875
09ca8     38 00 00 FF 
09cac     E8 65 06 F1 | 	add	objptr, ##29160
09cb0     32 AD 02 FB | 	rdlong	local04, objptr
09cb4     01 AC 06 F1 | 	add	local04, #1
09cb8     32 AD 62 FC | 	wrlong	local04, objptr
09cbc     03 AC 66 F0 | 	shl	local04, #3
09cc0     02 00 00 FF 
09cc4     38 64 86 F1 | 	sub	objptr, ##1080
09cc8     32 AD 02 F1 | 	add	local04, objptr
09ccc     04 AC 06 F1 | 	add	local04, #4
09cd0     56 B5 02 FB | 	rdlong	local08, local04
09cd4     FE B5 0E F2 | 	cmp	local08, #510 wz
09cd8     36 00 00 FF 
09cdc     B0 65 86 F1 | 	sub	objptr, ##28080
09ce0     28 00 90 AD |  if_e	jmp	#LR__0876
09ce4     38 00 00 FF 
09ce8     E8 65 06 F1 | 	add	objptr, ##29160
09cec     32 BB 02 FB | 	rdlong	local11, objptr
09cf0     0E 00 00 FF 
09cf4     1C 64 06 F1 | 	add	objptr, ##7196
09cf8     32 B9 02 FB | 	rdlong	local10, objptr
09cfc     47 00 00 FF 
09d00     04 64 86 F1 | 	sub	objptr, ##36356
09d04     5C BB 52 F2 | 	cmps	local11, local10 wc
09d08     E4 FA 9F CD |  if_b	jmp	#LR__0871
09d0c                 | LR__0876
09d0c                 | ' return 0
09d0c     00 7A 06 F6 | 	mov	result1, #0
09d10                 | LR__0877
09d10     E7 F0 03 F6 | 	mov	ptra, fp
09d14     F2 00 A0 FD | 	call	#popregs_
09d18                 | _compile_print_ret
09d18     2D 00 64 FD | 	ret
09d1c                 | 
09d1c                 | ' 
09d1c                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09d1c                 | ' 
09d1c                 | ' function compile_if(aline as ulong) as ulong  
09d1c                 | _compile_if
09d1c     09 CA 05 F6 | 	mov	COUNT_, #9
09d20     E8 00 A0 FD | 	call	#pushregs_
09d24                 | _compile_if_enter
09d24     49 AD 02 F6 | 	mov	local04, arg01
09d28                 | ' return expr()
09d28     2C 21 B0 FD | 	call	#_expr
09d2c     38 00 00 FF 
09d30     E8 65 06 F1 | 	add	objptr, ##29160
09d34     32 95 02 FB | 	rdlong	arg02, objptr
09d38     4A AF 02 F6 | 	mov	local05, arg02
09d3c     03 AE 66 F0 | 	shl	local05, #3
09d40     02 00 00 FF 
09d44     38 64 86 F1 | 	sub	objptr, ##1080
09d48     32 AF 02 F1 | 	add	local05, objptr
09d4c     04 AE 06 F1 | 	add	local05, #4
09d50     57 AF 02 FB | 	rdlong	local05, local05
09d54     01 94 06 F1 | 	add	arg02, #1
09d58     02 00 00 FF 
09d5c     38 64 06 F1 | 	add	objptr, ##1080
09d60     32 95 62 FC | 	wrlong	arg02, objptr
09d64     38 00 00 FF 
09d68     E8 65 86 F1 | 	sub	objptr, ##29160
09d6c                 | ' 
09d6c                 | ' err=compile_fun_1p()
09d6c                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09d6c     5B AE 0E F2 | 	cmp	local05, #91 wz
09d70     34 7A 06 56 |  if_ne	mov	result1, #52
09d74     20 01 90 5D |  if_ne	jmp	#LR__0882
09d78     58 AA 06 F6 | 	mov	local03, #88
09d7c     53 B1 02 F6 | 	mov	local06, local01
09d80     54 B3 02 F6 | 	mov	local07, local02
09d84     55 95 02 F6 | 	mov	arg02, local03
09d88     4C 00 00 FF 
09d8c     20 64 06 F1 | 	add	objptr, ##38944
09d90     32 93 02 FB | 	rdlong	arg01, objptr
09d94     49 B5 02 F6 | 	mov	local08, arg01
09d98     01 B4 66 F0 | 	shl	local08, #1
09d9c     49 B5 02 F1 | 	add	local08, arg01
09da0     02 B4 66 F0 | 	shl	local08, #2
09da4     03 00 00 FF 
09da8     00 64 86 F1 | 	sub	objptr, ##1536
09dac     32 B5 02 F1 | 	add	local08, objptr
09db0     5A B1 62 FC | 	wrlong	local06, local08
09db4     03 00 00 FF 
09db8     00 64 06 F1 | 	add	objptr, ##1536
09dbc     32 B1 02 FB | 	rdlong	local06, objptr
09dc0     58 93 02 F6 | 	mov	arg01, local06
09dc4     01 92 66 F0 | 	shl	arg01, #1
09dc8     58 93 02 F1 | 	add	arg01, local06
09dcc     02 92 66 F0 | 	shl	arg01, #2
09dd0     03 00 00 FF 
09dd4     00 64 86 F1 | 	sub	objptr, ##1536
09dd8     32 93 02 F1 | 	add	arg01, objptr
09ddc     04 92 06 F1 | 	add	arg01, #4
09de0     49 B3 62 FC | 	wrlong	local07, arg01
09de4     03 00 00 FF 
09de8     00 64 06 F1 | 	add	objptr, ##1536
09dec     32 B1 02 FB | 	rdlong	local06, objptr
09df0     58 93 02 F6 | 	mov	arg01, local06
09df4     01 92 66 F0 | 	shl	arg01, #1
09df8     58 93 02 F1 | 	add	arg01, local06
09dfc     02 92 66 F0 | 	shl	arg01, #2
09e00     03 00 00 FF 
09e04     00 64 86 F1 | 	sub	objptr, ##1536
09e08     32 93 02 F1 | 	add	arg01, objptr
09e0c     08 92 06 F1 | 	add	arg01, #8
09e10     49 95 62 FC | 	wrlong	arg02, arg01
09e14     03 00 00 FF 
09e18     00 64 06 F1 | 	add	objptr, ##1536
09e1c     32 B1 02 FB | 	rdlong	local06, objptr
09e20     01 B0 06 F1 | 	add	local06, #1
09e24     32 B1 62 FC | 	wrlong	local06, objptr
09e28                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09e28                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09e28     13 00 00 FF 
09e2c     38 64 86 F1 | 	sub	objptr, ##9784
09e30     32 95 02 FB | 	rdlong	arg02, objptr
09e34     01 94 06 F1 | 	add	arg02, #1
09e38     03 94 66 F0 | 	shl	arg02, #3
09e3c     02 00 00 FF 
09e40     38 64 86 F1 | 	sub	objptr, ##1080
09e44     32 95 02 F1 | 	add	arg02, objptr
09e48     4A 93 02 FB | 	rdlong	arg01, arg02
09e4c     36 00 00 FF 
09e50     B0 65 86 F1 | 	sub	objptr, ##28080
09e54                 | ' 
09e54                 | ' select case s
09e54     94 01 00 FF 
09e58     BA 94 06 F6 | 	mov	arg02, ##@LR__5639
09e5c     6C AD B1 FD | 	call	#__system___string_cmp
09e60     00 7A 0E F2 | 	cmp	result1, #0 wz
09e64     1B 7A 06 A6 |  if_e	mov	result1, #27
09e68     00 7A 06 56 |  if_ne	mov	result1, #0
09e6c     00 7A 0E F2 | 	cmp	result1, #0 wz
09e70     10 00 90 AD |  if_e	jmp	#LR__0880
09e74     05 92 06 F6 | 	mov	arg01, #5
09e78     4C E4 BF FD | 	call	#_compile_immediate_assign
09e7c     3D B7 02 F6 | 	mov	local09, result1
09e80     10 00 90 FD | 	jmp	#LR__0881
09e84                 | LR__0880
09e84     05 92 06 F6 | 	mov	arg01, #5
09e88     56 95 02 F6 | 	mov	arg02, local04
09e8c     50 DA BF FD | 	call	#_compile_immediate
09e90     3D B7 02 F6 | 	mov	local09, result1
09e94                 | LR__0881
09e94                 | ' return err
09e94     5B 7B 02 F6 | 	mov	result1, local09
09e98                 | LR__0882
09e98     E7 F0 03 F6 | 	mov	ptra, fp
09e9c     F2 00 A0 FD | 	call	#popregs_
09ea0                 | _compile_if_ret
09ea0     2D 00 64 FD | 	ret
09ea4                 | 
09ea4                 | ' 
09ea4                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09ea4                 | ' 
09ea4                 | ' function compile_else(aline as ulong) as ulong  
09ea4                 | _compile_else
09ea4     07 CA 05 F6 | 	mov	COUNT_, #7
09ea8     E8 00 A0 FD | 	call	#pushregs_
09eac                 | _compile_else_enter
09eac     49 AD 02 F6 | 	mov	local04, arg01
09eb0     5A AA 06 F6 | 	mov	local03, #90
09eb4     53 AF 02 F6 | 	mov	local05, local01
09eb8     54 B1 02 F6 | 	mov	local06, local02
09ebc     55 A7 02 F6 | 	mov	local01, local03
09ec0     4C 00 00 FF 
09ec4     20 64 06 F1 | 	add	objptr, ##38944
09ec8     32 95 02 FB | 	rdlong	arg02, objptr
09ecc     4A 93 02 F6 | 	mov	arg01, arg02
09ed0     01 92 66 F0 | 	shl	arg01, #1
09ed4     4A 93 02 F1 | 	add	arg01, arg02
09ed8     02 92 66 F0 | 	shl	arg01, #2
09edc     03 00 00 FF 
09ee0     00 64 86 F1 | 	sub	objptr, ##1536
09ee4     32 93 02 F1 | 	add	arg01, objptr
09ee8     49 AF 62 FC | 	wrlong	local05, arg01
09eec     03 00 00 FF 
09ef0     00 64 06 F1 | 	add	objptr, ##1536
09ef4     32 AF 02 FB | 	rdlong	local05, objptr
09ef8     57 95 02 F6 | 	mov	arg02, local05
09efc     01 94 66 F0 | 	shl	arg02, #1
09f00     57 95 02 F1 | 	add	arg02, local05
09f04     02 94 66 F0 | 	shl	arg02, #2
09f08     03 00 00 FF 
09f0c     00 64 86 F1 | 	sub	objptr, ##1536
09f10     32 95 02 F1 | 	add	arg02, objptr
09f14     04 94 06 F1 | 	add	arg02, #4
09f18     4A B1 62 FC | 	wrlong	local06, arg02
09f1c     03 00 00 FF 
09f20     00 64 06 F1 | 	add	objptr, ##1536
09f24     32 B1 02 FB | 	rdlong	local06, objptr
09f28     58 AF 02 F6 | 	mov	local05, local06
09f2c     01 AE 66 F0 | 	shl	local05, #1
09f30     58 AF 02 F1 | 	add	local05, local06
09f34     02 AE 66 F0 | 	shl	local05, #2
09f38     03 00 00 FF 
09f3c     00 64 86 F1 | 	sub	objptr, ##1536
09f40     32 AF 02 F1 | 	add	local05, objptr
09f44     08 AE 06 F1 | 	add	local05, #8
09f48     57 A7 62 FC | 	wrlong	local01, local05
09f4c     03 00 00 FF 
09f50     00 64 06 F1 | 	add	objptr, ##1536
09f54     32 AF 02 FB | 	rdlong	local05, objptr
09f58     01 AE 06 F1 | 	add	local05, #1
09f5c     32 AF 62 FC | 	wrlong	local05, objptr
09f60                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09f60                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09f60     13 00 00 FF 
09f64     38 64 86 F1 | 	sub	objptr, ##9784
09f68     32 B1 02 FB | 	rdlong	local06, objptr
09f6c     01 B0 06 F1 | 	add	local06, #1
09f70     03 B0 66 F0 | 	shl	local06, #3
09f74     02 00 00 FF 
09f78     38 64 86 F1 | 	sub	objptr, ##1080
09f7c     32 B1 02 F1 | 	add	local06, objptr
09f80     58 93 02 FB | 	rdlong	arg01, local06
09f84     36 00 00 FF 
09f88     B0 65 86 F1 | 	sub	objptr, ##28080
09f8c                 | ' 
09f8c                 | ' select case s
09f8c     94 01 00 FF 
09f90     BA 94 06 F6 | 	mov	arg02, ##@LR__5639
09f94     34 AC B1 FD | 	call	#__system___string_cmp
09f98     00 7A 0E F2 | 	cmp	result1, #0 wz
09f9c     1B 7A 06 A6 |  if_e	mov	result1, #27
09fa0     00 7A 06 56 |  if_ne	mov	result1, #0
09fa4     00 7A 0E F2 | 	cmp	result1, #0 wz
09fa8     10 00 90 AD |  if_e	jmp	#LR__0890
09fac     05 92 06 F6 | 	mov	arg01, #5
09fb0     14 E3 BF FD | 	call	#_compile_immediate_assign
09fb4     3D B3 02 F6 | 	mov	local07, result1
09fb8     10 00 90 FD | 	jmp	#LR__0891
09fbc                 | LR__0890
09fbc     05 92 06 F6 | 	mov	arg01, #5
09fc0     56 95 02 F6 | 	mov	arg02, local04
09fc4     18 D9 BF FD | 	call	#_compile_immediate
09fc8     3D B3 02 F6 | 	mov	local07, result1
09fcc                 | LR__0891
09fcc                 | ' return err
09fcc     59 7B 02 F6 | 	mov	result1, local07
09fd0     E7 F0 03 F6 | 	mov	ptra, fp
09fd4     F2 00 A0 FD | 	call	#popregs_
09fd8                 | _compile_else_ret
09fd8     2D 00 64 FD | 	ret
09fdc                 | 
09fdc                 | ' 
09fdc                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09fdc                 | ' 
09fdc                 | ' function compile_dim() as ulong  
09fdc                 | _compile_dim
09fdc     11 CA 05 F6 | 	mov	COUNT_, #17
09fe0     E8 00 A0 FD | 	call	#pushregs_
09fe4     01 A6 06 F6 | 	mov	local01, #1
09fe8     01 A8 06 F6 | 	mov	local02, #1
09fec     01 AA 06 F6 | 	mov	local03, #1
09ff0                 | ' 
09ff0                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09ff0                 | ' if isname(lparts(ct).part$) then 
09ff0     38 00 00 FF 
09ff4     E8 65 06 F1 | 	add	objptr, ##29160
09ff8     32 99 02 FB | 	rdlong	arg04, objptr
09ffc     03 98 66 F0 | 	shl	arg04, #3
0a000     02 00 00 FF 
0a004     38 64 86 F1 | 	sub	objptr, ##1080
0a008     32 99 02 F1 | 	add	arg04, objptr
0a00c     4C 93 02 FB | 	rdlong	arg01, arg04
0a010     36 00 00 FF 
0a014     B0 65 86 F1 | 	sub	objptr, ##28080
0a018     C4 C7 BF FD | 	call	#_isname
0a01c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a020     58 05 90 AD |  if_e	jmp	#LR__0923
0a024     38 00 00 FF 
0a028     E8 65 06 F1 | 	add	objptr, ##29160
0a02c     32 AD 02 FB | 	rdlong	local04, objptr
0a030     03 AC 66 F0 | 	shl	local04, #3
0a034     02 00 00 FF 
0a038     38 64 86 F1 | 	sub	objptr, ##1080
0a03c     32 AD 02 F1 | 	add	local04, objptr
0a040     56 AF 02 FB | 	rdlong	local05, local04
0a044     01 B0 66 F6 | 	neg	local06, #1
0a048                 | '   varname2$=lparts(ct).part$ 
0a048                 | '   j=-1
0a048                 | '   if varnum>0 then
0a048     04 64 86 F1 | 	sub	objptr, #4
0a04c     32 B3 02 FB | 	rdlong	local07, objptr
0a050     36 00 00 FF 
0a054     AC 65 86 F1 | 	sub	objptr, ##28076
0a058     01 B2 56 F2 | 	cmps	local07, #1 wc
0a05c     54 00 90 CD |  if_b	jmp	#LR__0902
0a060                 | '     for i=0 to varnum-1
0a060     00 B4 06 F6 | 	mov	local08, #0
0a064     36 00 00 FF 
0a068     AC 65 06 F1 | 	add	objptr, ##28076
0a06c     32 B7 02 FB | 	rdlong	local09, objptr
0a070     36 00 00 FF 
0a074     AC 65 86 F1 | 	sub	objptr, ##28076
0a078                 | LR__0900
0a078     5B B5 52 F2 | 	cmps	local08, local09 wc
0a07c     34 00 90 3D |  if_ae	jmp	#LR__0901
0a080                 | '       if variables(i).name=varname2$ then j=i : exit
0a080     5A AD 02 F6 | 	mov	local04, local08
0a084     04 AC 66 F0 | 	shl	local04, #4
0a088     32 95 02 F6 | 	mov	arg02, objptr
0a08c     16 00 00 FF 
0a090     9C 95 06 F1 | 	add	arg02, ##11676
0a094     4A AD 02 F1 | 	add	local04, arg02
0a098     56 93 02 FB | 	rdlong	arg01, local04
0a09c     57 95 02 F6 | 	mov	arg02, local05
0a0a0     28 AB B1 FD | 	call	#__system___string_cmp
0a0a4     00 7A 0E F2 | 	cmp	result1, #0 wz
0a0a8     5A B1 02 A6 |  if_e	mov	local06, local08
0a0ac     01 B4 06 51 |  if_ne	add	local08, #1
0a0b0     C4 FF 9F 5D |  if_ne	jmp	#LR__0900
0a0b4                 | LR__0901
0a0b4                 | LR__0902
0a0b4                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
0a0b4     FF FF 7F FF 
0a0b8     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0a0bc     36 00 00 AF 
0a0c0     AC 65 06 A1 |  if_e	add	objptr, ##28076
0a0c4     32 B1 02 AB |  if_e	rdlong	local06, objptr
0a0c8     36 00 00 AF 
0a0cc     AC 65 86 A1 |  if_e	sub	objptr, ##28076
0a0d0     78 00 90 AD |  if_e	jmp	#LR__0903
0a0d4     00 92 06 F6 | 	mov	arg01, #0
0a0d8     4C 00 B2 FD | 	call	#__system___getiolock_0622
0a0dc     3D 93 02 F6 | 	mov	arg01, result1
0a0e0     C0 AA B1 FD | 	call	#__system___lockmem
0a0e4     96 01 00 FF 
0a0e8     C7 95 06 F6 | 	mov	arg02, ##@LR__5911
0a0ec     00 92 06 F6 | 	mov	arg01, #0
0a0f0     00 96 06 F6 | 	mov	arg03, #0
0a0f4     A0 B7 B1 FD | 	call	#__system___basic_print_string
0a0f8     54 00 00 FF 
0a0fc     8C 64 06 F1 | 	add	objptr, ##43148
0a100     32 95 02 FB | 	rdlong	arg02, objptr
0a104     54 00 00 FF 
0a108     8C 64 86 F1 | 	sub	objptr, ##43148
0a10c     00 92 06 F6 | 	mov	arg01, #0
0a110     00 96 06 F6 | 	mov	arg03, #0
0a114     0A 98 06 F6 | 	mov	arg04, #10
0a118     00 B8 B1 FD | 	call	#__system___basic_print_unsigned
0a11c     96 01 00 FF 
0a120     D5 95 06 F6 | 	mov	arg02, ##@LR__5912
0a124     00 92 06 F6 | 	mov	arg01, #0
0a128     00 96 06 F6 | 	mov	arg03, #0
0a12c     68 B7 B1 FD | 	call	#__system___basic_print_string
0a130     00 92 06 F6 | 	mov	arg01, #0
0a134     0A 94 06 F6 | 	mov	arg02, #10
0a138     00 96 06 F6 | 	mov	arg03, #0
0a13c     00 B7 B1 FD | 	call	#__system___basic_print_char
0a140     00 92 06 F6 | 	mov	arg01, #0
0a144     E0 FF B1 FD | 	call	#__system___getiolock_0622
0a148     3D 01 68 FC | 	wrlong	#0, result1
0a14c                 | LR__0903
0a14c                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
0a14c     38 00 00 FF 
0a150     E8 65 06 F1 | 	add	objptr, ##29160
0a154     32 95 02 FB | 	rdlong	arg02, objptr
0a158     01 94 06 F1 | 	add	arg02, #1
0a15c     03 94 66 F0 | 	shl	arg02, #3
0a160     02 00 00 FF 
0a164     38 64 86 F1 | 	sub	objptr, ##1080
0a168     32 95 02 F1 | 	add	arg02, objptr
0a16c     4A 93 02 FB | 	rdlong	arg01, arg02
0a170     96 01 00 FF 
0a174     F6 95 06 F6 | 	mov	arg02, ##@LR__5913
0a178     36 00 00 FF 
0a17c     B0 65 86 F1 | 	sub	objptr, ##28080
0a180     48 AA B1 FD | 	call	#__system___string_cmp
0a184     00 7A 0E F2 | 	cmp	result1, #0 wz
0a188     44 00 90 AD |  if_e	jmp	#LR__0904
0a18c     38 00 00 FF 
0a190     E8 65 06 F1 | 	add	objptr, ##29160
0a194     32 B7 02 FB | 	rdlong	local09, objptr
0a198     01 B6 06 F1 | 	add	local09, #1
0a19c     03 B6 66 F0 | 	shl	local09, #3
0a1a0     02 00 00 FF 
0a1a4     38 64 86 F1 | 	sub	objptr, ##1080
0a1a8     32 B7 02 F1 | 	add	local09, objptr
0a1ac     5B 93 02 FB | 	rdlong	arg01, local09
0a1b0     96 01 00 FF 
0a1b4     F8 95 06 F6 | 	mov	arg02, ##@LR__5914
0a1b8     36 00 00 FF 
0a1bc     B0 65 86 F1 | 	sub	objptr, ##28080
0a1c0     08 AA B1 FD | 	call	#__system___string_cmp
0a1c4     00 7A 0E F2 | 	cmp	result1, #0 wz
0a1c8     2B 7A 06 56 |  if_ne	mov	result1, #43
0a1cc     B4 04 90 5D |  if_ne	jmp	#LR__0925
0a1d0                 | LR__0904
0a1d0                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
0a1d0     38 00 00 FF 
0a1d4     E8 65 06 F1 | 	add	objptr, ##29160
0a1d8     32 95 02 FB | 	rdlong	arg02, objptr
0a1dc     01 94 06 F1 | 	add	arg02, #1
0a1e0     03 94 66 F0 | 	shl	arg02, #3
0a1e4     02 00 00 FF 
0a1e8     38 64 86 F1 | 	sub	objptr, ##1080
0a1ec     32 95 02 F1 | 	add	arg02, objptr
0a1f0     4A 93 02 FB | 	rdlong	arg01, arg02
0a1f4     96 01 00 FF 
0a1f8     FB 95 06 F6 | 	mov	arg02, ##@LR__5915
0a1fc     36 00 00 FF 
0a200     B0 65 86 F1 | 	sub	objptr, ##28080
0a204     C4 A9 B1 FD | 	call	#__system___string_cmp
0a208     00 7A 0E F2 | 	cmp	result1, #0 wz
0a20c     38 00 00 AF 
0a210     E8 65 06 A1 |  if_e	add	objptr, ##29160
0a214     32 B9 02 AB |  if_e	rdlong	local10, objptr
0a218     38 00 00 AF 
0a21c     E8 65 86 A1 |  if_e	sub	objptr, ##29160
0a220     01 B8 06 A1 |  if_e	add	local10, #1
0a224     48 01 90 AD |  if_e	jmp	#LR__0909
0a228     38 00 00 FF 
0a22c     E8 65 06 F1 | 	add	objptr, ##29160
0a230     32 B9 02 FB | 	rdlong	local10, objptr
0a234     38 00 00 FF 
0a238     E8 65 86 F1 | 	sub	objptr, ##29160
0a23c     02 B8 06 F1 | 	add	local10, #2
0a240     00 BA 06 F6 | 	mov	local11, #0
0a244                 | '   l=ct+2 : m=0 : do
0a244                 | LR__0905
0a244                 | '   if isdec(lparts(l).part$) then 
0a244     5C AD 02 F6 | 	mov	local04, local10
0a248     03 AC 66 F0 | 	shl	local04, #3
0a24c     32 B7 02 F6 | 	mov	local09, objptr
0a250     36 00 00 FF 
0a254     B0 B7 06 F1 | 	add	local09, ##28080
0a258     5B AD 02 F1 | 	add	local04, local09
0a25c     56 93 02 FB | 	rdlong	arg01, local04
0a260     80 CE BF FD | 	call	#_isdec
0a264     00 7A 0E F2 | 	cmp	result1, #0 wz
0a268     40 00 90 AD |  if_e	jmp	#LR__0906
0a26c     5D BD 02 F6 | 	mov	local12, local11
0a270     53 BD 06 F1 | 	add	local12, #local01
0a274     5C B7 02 F6 | 	mov	local09, local10
0a278     03 B6 66 F0 | 	shl	local09, #3
0a27c     32 B5 02 F6 | 	mov	local08, objptr
0a280     36 00 00 FF 
0a284     B0 B5 06 F1 | 	add	local08, ##28080
0a288     5A B7 02 F1 | 	add	local09, local08
0a28c     5B 93 02 FB | 	rdlong	arg01, local09
0a290     00 94 06 F6 | 	mov	arg02, #0
0a294     60 D6 B1 FD | 	call	#__system____builtin_atoi
0a298     3D BF 02 F6 | 	mov	local13, result1
0a29c                 | 	'.live	local13
0a29c                 | 	'.live	local12
0a29c     00 BC 8E F9 | 	altd	local12, #0
0a2a0     5F BD 02 F6 | 	mov	local12, local13
0a2a4     01 BA 06 F1 | 	add	local11, #1
0a2a8     08 00 90 FD | 	jmp	#LR__0907
0a2ac                 | LR__0906
0a2ac                 | '     return(17)
0a2ac     11 7A 06 F6 | 	mov	result1, #17
0a2b0     D0 03 90 FD | 	jmp	#LR__0925
0a2b4                 | LR__0907
0a2b4                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a2b4     5C AD 02 F6 | 	mov	local04, local10
0a2b8     01 AC 06 F1 | 	add	local04, #1
0a2bc     03 AC 66 F0 | 	shl	local04, #3
0a2c0     32 BF 02 F6 | 	mov	local13, objptr
0a2c4     36 00 00 FF 
0a2c8     B0 BF 06 F1 | 	add	local13, ##28080
0a2cc     5F AD 02 F1 | 	add	local04, local13
0a2d0     56 93 02 FB | 	rdlong	arg01, local04
0a2d4     96 01 00 FF 
0a2d8     FE 95 06 F6 | 	mov	arg02, ##@LR__5916
0a2dc     EC A8 B1 FD | 	call	#__system___string_cmp
0a2e0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a2e4     38 00 90 AD |  if_e	jmp	#LR__0908
0a2e8     5C BF 02 F6 | 	mov	local13, local10
0a2ec     01 BE 06 F1 | 	add	local13, #1
0a2f0     03 BE 66 F0 | 	shl	local13, #3
0a2f4     32 BD 02 F6 | 	mov	local12, objptr
0a2f8     36 00 00 FF 
0a2fc     B0 BD 06 F1 | 	add	local12, ##28080
0a300     5E BF 02 F1 | 	add	local13, local12
0a304     5F 93 02 FB | 	rdlong	arg01, local13
0a308     97 01 00 FF 
0a30c     00 94 06 F6 | 	mov	arg02, ##@LR__5917
0a310     B8 A8 B1 FD | 	call	#__system___string_cmp
0a314     00 7A 0E F2 | 	cmp	result1, #0 wz
0a318     2C 7A 06 56 |  if_ne	mov	result1, #44
0a31c     64 03 90 5D |  if_ne	jmp	#LR__0925
0a320                 | LR__0908
0a320     02 B8 06 F1 | 	add	local10, #2
0a324     5C AD 02 F6 | 	mov	local04, local10
0a328     01 AC 86 F1 | 	sub	local04, #1
0a32c     03 AC 66 F0 | 	shl	local04, #3
0a330     32 BF 02 F6 | 	mov	local13, objptr
0a334     36 00 00 FF 
0a338     B0 BF 06 F1 | 	add	local13, ##28080
0a33c     5F AD 02 F1 | 	add	local04, local13
0a340     56 93 02 FB | 	rdlong	arg01, local04
0a344     97 01 00 FF 
0a348     02 94 06 F6 | 	mov	arg02, ##@LR__5918
0a34c     7C A8 B1 FD | 	call	#__system___string_cmp
0a350     00 7A 0E F2 | 	cmp	result1, #0 wz
0a354     03 BA 56 52 |  if_ne	cmps	local11, #3 wc
0a358     E8 FE 9F 4D |  if_c_and_nz	jmp	#LR__0905
0a35c                 | '   if m>3 then return 45
0a35c     04 BA 56 F2 | 	cmps	local11, #4 wc
0a360     2D 7A 06 36 |  if_ae	mov	result1, #45
0a364     1C 03 90 3D |  if_ae	jmp	#LR__0925
0a368     00 C1 06 F6 | 	mov	local14, #256
0a36c     0C C2 06 F6 | 	mov	local15, #12
0a370                 | LR__0909
0a370                 | '   arraytype=array_no_type : esize=12
0a370                 | ' 1350 
0a370                 | '   if lparts(l).part$="as" then
0a370     5C AD 02 F6 | 	mov	local04, local10
0a374     03 AC 66 F0 | 	shl	local04, #3
0a378     32 BF 02 F6 | 	mov	local13, objptr
0a37c     36 00 00 FF 
0a380     B0 BF 06 F1 | 	add	local13, ##28080
0a384     5F AD 02 F1 | 	add	local04, local13
0a388     56 93 02 FB | 	rdlong	arg01, local04
0a38c     97 01 00 FF 
0a390     04 94 06 F6 | 	mov	arg02, ##@LR__5919
0a394     34 A8 B1 FD | 	call	#__system___string_cmp
0a398     00 7A 0E F2 | 	cmp	result1, #0 wz
0a39c     E4 01 90 5D |  if_ne	jmp	#LR__0924
0a3a0                 | '     select case lparts(l+1).part$
0a3a0     5C BD 02 F6 | 	mov	local12, local10
0a3a4     01 BC 06 F1 | 	add	local12, #1
0a3a8     03 BC 66 F0 | 	shl	local12, #3
0a3ac     32 AD 02 F6 | 	mov	local04, objptr
0a3b0     36 00 00 FF 
0a3b4     B0 AD 06 F1 | 	add	local04, ##28080
0a3b8     56 BD 02 F1 | 	add	local12, local04
0a3bc     5E C5 02 FB | 	rdlong	local16, local12
0a3c0     97 01 00 FF 
0a3c4     07 94 06 F6 | 	mov	arg02, ##@LR__5920
0a3c8     62 93 02 F6 | 	mov	arg01, local16
0a3cc     FC A7 B1 FD | 	call	#__system___string_cmp
0a3d0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a3d4     0C 01 90 AD |  if_e	jmp	#LR__0910
0a3d8     97 01 00 FF 
0a3dc     0C 94 06 F6 | 	mov	arg02, ##@LR__5921
0a3e0     62 93 02 F6 | 	mov	arg01, local16
0a3e4     E4 A7 B1 FD | 	call	#__system___string_cmp
0a3e8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a3ec     00 01 90 AD |  if_e	jmp	#LR__0911
0a3f0     97 01 00 FF 
0a3f4     12 94 06 F6 | 	mov	arg02, ##@LR__5922
0a3f8     62 93 02 F6 | 	mov	arg01, local16
0a3fc     CC A7 B1 FD | 	call	#__system___string_cmp
0a400     00 7A 0E F2 | 	cmp	result1, #0 wz
0a404     F4 00 90 AD |  if_e	jmp	#LR__0912
0a408     97 01 00 FF 
0a40c     18 94 06 F6 | 	mov	arg02, ##@LR__5923
0a410     62 93 02 F6 | 	mov	arg01, local16
0a414     B4 A7 B1 FD | 	call	#__system___string_cmp
0a418     00 7A 0E F2 | 	cmp	result1, #0 wz
0a41c     E8 00 90 AD |  if_e	jmp	#LR__0913
0a420     97 01 00 FF 
0a424     1F 94 06 F6 | 	mov	arg02, ##@LR__5924
0a428     62 93 02 F6 | 	mov	arg01, local16
0a42c     9C A7 B1 FD | 	call	#__system___string_cmp
0a430     00 7A 0E F2 | 	cmp	result1, #0 wz
0a434     DC 00 90 AD |  if_e	jmp	#LR__0914
0a438     97 01 00 FF 
0a43c     24 94 06 F6 | 	mov	arg02, ##@LR__5925
0a440     62 93 02 F6 | 	mov	arg01, local16
0a444     84 A7 B1 FD | 	call	#__system___string_cmp
0a448     00 7A 0E F2 | 	cmp	result1, #0 wz
0a44c     D0 00 90 AD |  if_e	jmp	#LR__0915
0a450     97 01 00 FF 
0a454     2C 94 06 F6 | 	mov	arg02, ##@LR__5926
0a458     62 93 02 F6 | 	mov	arg01, local16
0a45c     6C A7 B1 FD | 	call	#__system___string_cmp
0a460     00 7A 0E F2 | 	cmp	result1, #0 wz
0a464     C4 00 90 AD |  if_e	jmp	#LR__0916
0a468     97 01 00 FF 
0a46c     32 94 06 F6 | 	mov	arg02, ##@LR__5927
0a470     62 93 02 F6 | 	mov	arg01, local16
0a474     54 A7 B1 FD | 	call	#__system___string_cmp
0a478     00 7A 0E F2 | 	cmp	result1, #0 wz
0a47c     B8 00 90 AD |  if_e	jmp	#LR__0917
0a480     97 01 00 FF 
0a484     38 94 06 F6 | 	mov	arg02, ##@LR__5928
0a488     62 93 02 F6 | 	mov	arg01, local16
0a48c     3C A7 B1 FD | 	call	#__system___string_cmp
0a490     00 7A 0E F2 | 	cmp	result1, #0 wz
0a494     AC 00 90 AD |  if_e	jmp	#LR__0918
0a498     97 01 00 FF 
0a49c     3F 94 06 F6 | 	mov	arg02, ##@LR__5929
0a4a0     62 93 02 F6 | 	mov	arg01, local16
0a4a4     24 A7 B1 FD | 	call	#__system___string_cmp
0a4a8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4ac     A0 00 90 AD |  if_e	jmp	#LR__0919
0a4b0     97 01 00 FF 
0a4b4     46 94 06 F6 | 	mov	arg02, ##@LR__5930
0a4b8     62 93 02 F6 | 	mov	arg01, local16
0a4bc     0C A7 B1 FD | 	call	#__system___string_cmp
0a4c0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4c4     94 00 90 AD |  if_e	jmp	#LR__0920
0a4c8     97 01 00 FF 
0a4cc     4D 94 06 F6 | 	mov	arg02, ##@LR__5931
0a4d0     62 93 02 F6 | 	mov	arg01, local16
0a4d4     F4 A6 B1 FD | 	call	#__system___string_cmp
0a4d8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4dc     88 00 90 AD |  if_e	jmp	#LR__0921
0a4e0     90 00 90 FD | 	jmp	#LR__0922
0a4e4                 | LR__0910
0a4e4     01 C1 06 F6 | 	mov	local14, #257
0a4e8     01 C2 06 F6 | 	mov	local15, #1
0a4ec     94 00 90 FD | 	jmp	#LR__0924
0a4f0                 | LR__0911
0a4f0     02 C1 06 F6 | 	mov	local14, #258
0a4f4     01 C2 06 F6 | 	mov	local15, #1
0a4f8     88 00 90 FD | 	jmp	#LR__0924
0a4fc                 | LR__0912
0a4fc     03 C1 06 F6 | 	mov	local14, #259
0a500     02 C2 06 F6 | 	mov	local15, #2
0a504     7C 00 90 FD | 	jmp	#LR__0924
0a508                 | LR__0913
0a508     04 C1 06 F6 | 	mov	local14, #260
0a50c     02 C2 06 F6 | 	mov	local15, #2
0a510     70 00 90 FD | 	jmp	#LR__0924
0a514                 | LR__0914
0a514     05 C1 06 F6 | 	mov	local14, #261
0a518     04 C2 06 F6 | 	mov	local15, #4
0a51c     64 00 90 FD | 	jmp	#LR__0924
0a520                 | LR__0915
0a520     05 C1 06 F6 | 	mov	local14, #261
0a524     04 C2 06 F6 | 	mov	local15, #4
0a528     58 00 90 FD | 	jmp	#LR__0924
0a52c                 | LR__0916
0a52c     06 C1 06 F6 | 	mov	local14, #262
0a530     04 C2 06 F6 | 	mov	local15, #4
0a534     4C 00 90 FD | 	jmp	#LR__0924
0a538                 | LR__0917
0a538     07 C1 06 F6 | 	mov	local14, #263
0a53c     08 C2 06 F6 | 	mov	local15, #8
0a540     40 00 90 FD | 	jmp	#LR__0924
0a544                 | LR__0918
0a544     08 C1 06 F6 | 	mov	local14, #264
0a548     08 C2 06 F6 | 	mov	local15, #8
0a54c     34 00 90 FD | 	jmp	#LR__0924
0a550                 | LR__0919
0a550     09 C1 06 F6 | 	mov	local14, #265
0a554     04 C2 06 F6 | 	mov	local15, #4
0a558     28 00 90 FD | 	jmp	#LR__0924
0a55c                 | LR__0920
0a55c     0A C1 06 F6 | 	mov	local14, #266
0a560     08 C2 06 F6 | 	mov	local15, #8
0a564     1C 00 90 FD | 	jmp	#LR__0924
0a568                 | LR__0921
0a568     0B C1 06 F6 | 	mov	local14, #267
0a56c     04 C2 06 F6 | 	mov	local15, #4
0a570     10 00 90 FD | 	jmp	#LR__0924
0a574                 | LR__0922
0a574     2F 7A 06 F6 | 	mov	result1, #47
0a578     08 01 90 FD | 	jmp	#LR__0925
0a57c                 | LR__0923
0a57c                 | '   return 46
0a57c     2E 7A 06 F6 | 	mov	result1, #46
0a580     00 01 90 FD | 	jmp	#LR__0925
0a584                 | LR__0924
0a584     53 C3 02 FD | 	qmul	local15, local01
0a588     18 B2 62 FD | 	getqx	local07
0a58c     54 B3 02 FD | 	qmul	local07, local02
0a590     18 C4 62 FD | 	getqx	local16
0a594     55 C5 02 FD | 	qmul	local16, local03
0a598     54 00 00 FF 
0a59c     74 64 06 F1 | 	add	objptr, ##43124
0a5a0     32 C7 02 FB | 	rdlong	local17, objptr
0a5a4     60 95 02 F6 | 	mov	arg02, local14
0a5a8     18 C4 62 FD | 	getqx	local16
0a5ac     62 C7 82 F1 | 	sub	local17, local16
0a5b0     10 C6 86 F1 | 	sub	local17, #16
0a5b4     0F C6 26 F5 | 	andn	local17, #15
0a5b8     32 C7 62 FC | 	wrlong	local17, objptr
0a5bc     54 00 00 FF 
0a5c0     74 64 86 F1 | 	sub	objptr, ##43124
0a5c4     63 93 02 F6 | 	mov	arg01, local17
0a5c8     94 6A B1 FD | 	call	#_psdpoke
0a5cc     63 93 02 F6 | 	mov	arg01, local17
0a5d0     02 92 06 F1 | 	add	arg01, #2
0a5d4     61 95 02 F6 | 	mov	arg02, local15
0a5d8     84 6A B1 FD | 	call	#_psdpoke
0a5dc     63 93 02 F6 | 	mov	arg01, local17
0a5e0     04 92 06 F1 | 	add	arg01, #4
0a5e4     53 95 02 F6 | 	mov	arg02, local01
0a5e8     2C 6A B1 FD | 	call	#_pslpoke
0a5ec     63 93 02 F6 | 	mov	arg01, local17
0a5f0     08 92 06 F1 | 	add	arg01, #8
0a5f4     54 95 02 F6 | 	mov	arg02, local02
0a5f8     1C 6A B1 FD | 	call	#_pslpoke
0a5fc     63 93 02 F6 | 	mov	arg01, local17
0a600     0C 92 06 F1 | 	add	arg01, #12
0a604     55 95 02 F6 | 	mov	arg02, local03
0a608     0C 6A B1 FD | 	call	#_pslpoke
0a60c     58 BD 02 F6 | 	mov	local12, local06
0a610     04 BC 66 F0 | 	shl	local12, #4
0a614     16 00 00 FF 
0a618     9C 65 06 F1 | 	add	objptr, ##11676
0a61c     32 BD 02 F1 | 	add	local12, objptr
0a620     5E AF 62 FC | 	wrlong	local05, local12
0a624     58 BD 02 F6 | 	mov	local12, local06
0a628     04 BC 66 F0 | 	shl	local12, #4
0a62c     32 BD 02 F1 | 	add	local12, objptr
0a630     04 BC 06 F1 | 	add	local12, #4
0a634     5E C7 62 FC | 	wrlong	local17, local12
0a638     58 BD 02 F6 | 	mov	local12, local06
0a63c     04 BC 66 F0 | 	shl	local12, #4
0a640     32 BD 02 F1 | 	add	local12, objptr
0a644     0C BC 06 F1 | 	add	local12, #12
0a648     5E C1 62 FC | 	wrlong	local14, local12
0a64c                 | ' memtop=arrayptr
0a64c                 | ' psdpoke arrayptr,arraytype 
0a64c                 | ' psdpoke arrayptr+2,esize 
0a64c                 | ' pslpoke arrayptr+4,dims(0)
0a64c                 | ' pslpoke arrayptr+8,dims(1)
0a64c                 | ' pslpoke arrayptr+12,dims(2)
0a64c                 | ' variables(j).name=varname2$
0a64c                 | ' variables(j).value.uresult=arrayptr
0a64c                 | ' variables(j).vartype=arraytype
0a64c                 | ' if j=varnum then varnum+=1
0a64c     20 00 00 FF 
0a650     10 64 06 F1 | 	add	objptr, ##16400
0a654     32 B3 02 FB | 	rdlong	local07, objptr
0a658     36 00 00 FF 
0a65c     AC 65 86 F1 | 	sub	objptr, ##28076
0a660     59 B1 0A F2 | 	cmp	local06, local07 wz
0a664     36 00 00 AF 
0a668     AC 65 06 A1 |  if_e	add	objptr, ##28076
0a66c     32 B3 02 AB |  if_e	rdlong	local07, objptr
0a670     01 B2 06 A1 |  if_e	add	local07, #1
0a674     32 B3 62 AC |  if_e	wrlong	local07, objptr
0a678     36 00 00 AF 
0a67c     AC 65 86 A1 |  if_e	sub	objptr, ##28076
0a680                 | ' return 0
0a680     00 7A 06 F6 | 	mov	result1, #0
0a684                 | LR__0925
0a684     E7 F0 03 F6 | 	mov	ptra, fp
0a688     F2 00 A0 FD | 	call	#popregs_
0a68c                 | _compile_dim_ret
0a68c     2D 00 64 FD | 	ret
0a690                 | 
0a690                 | ' 
0a690                 | ' '----- compile 'for' command. 
0a690                 | ' 
0a690                 | ' function compile_for() as ulong  
0a690                 | _compile_for
0a690     0F CA 05 F6 | 	mov	COUNT_, #15
0a694     E8 00 A0 FD | 	call	#pushregs_
0a698                 | ' 
0a698                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a698     38 00 00 FF 
0a69c     E8 65 06 F1 | 	add	objptr, ##29160
0a6a0     32 95 02 FB | 	rdlong	arg02, objptr
0a6a4     01 94 06 F1 | 	add	arg02, #1
0a6a8     03 94 66 F0 | 	shl	arg02, #3
0a6ac     02 00 00 FF 
0a6b0     38 64 86 F1 | 	sub	objptr, ##1080
0a6b4     32 95 02 F1 | 	add	arg02, objptr
0a6b8     4A 93 02 FB | 	rdlong	arg01, arg02
0a6bc     36 00 00 FF 
0a6c0     B0 65 86 F1 | 	sub	objptr, ##28080
0a6c4                 | ' 
0a6c4                 | ' select case s
0a6c4     94 01 00 FF 
0a6c8     BA 94 06 F6 | 	mov	arg02, ##@LR__5639
0a6cc     FC A4 B1 FD | 	call	#__system___string_cmp
0a6d0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a6d4     1B 7A 06 A6 |  if_e	mov	result1, #27
0a6d8     00 7A 06 56 |  if_ne	mov	result1, #0
0a6dc     00 7A 0E F2 | 	cmp	result1, #0 wz
0a6e0     0C 00 90 AD |  if_e	jmp	#LR__0930
0a6e4     05 92 06 F6 | 	mov	arg01, #5
0a6e8     DC DB BF FD | 	call	#_compile_immediate_assign
0a6ec     08 00 90 FD | 	jmp	#LR__0931
0a6f0                 | LR__0930
0a6f0     20 7A 06 F6 | 	mov	result1, #32
0a6f4     64 08 90 FD | 	jmp	#LR__0947
0a6f8                 | LR__0931
0a6f8     4C 00 00 FF 
0a6fc     20 64 06 F1 | 	add	objptr, ##38944
0a700     32 95 02 FB | 	rdlong	arg02, objptr
0a704     4A 93 02 F6 | 	mov	arg01, arg02
0a708     01 92 86 F1 | 	sub	arg01, #1
0a70c     49 AD 02 F6 | 	mov	local04, arg01
0a710     01 AC 66 F0 | 	shl	local04, #1
0a714     49 AD 02 F1 | 	add	local04, arg01
0a718     02 AC 66 F0 | 	shl	local04, #2
0a71c     03 00 00 FF 
0a720     00 64 86 F1 | 	sub	objptr, ##1536
0a724     32 AD 02 F1 | 	add	local04, objptr
0a728     56 A7 02 FB | 	rdlong	local01, local04
0a72c     04 AC 06 F1 | 	add	local04, #4
0a730     56 AF 02 FB | 	rdlong	local05, local04
0a734     01 94 86 F1 | 	sub	arg02, #1
0a738     4A B1 02 F6 | 	mov	local06, arg02
0a73c     01 B0 66 F0 | 	shl	local06, #1
0a740     4A B1 02 F1 | 	add	local06, arg02
0a744     02 B0 66 F0 | 	shl	local06, #2
0a748     32 B3 02 F6 | 	mov	local07, objptr
0a74c     32 B1 02 F1 | 	add	local06, objptr
0a750     08 B0 06 F1 | 	add	local06, #8
0a754     58 AD 02 FB | 	rdlong	local04, local06
0a758     57 A9 02 F6 | 	mov	local02, local05
0a75c     56 AB 02 F6 | 	mov	local03, local04
0a760                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a760     17 AA 0E F2 | 	cmp	local03, #23 wz
0a764     49 00 00 FF 
0a768     20 64 86 F1 | 	sub	objptr, ##37408
0a76c     22 7A 06 56 |  if_ne	mov	result1, #34
0a770     E8 07 90 5D |  if_ne	jmp	#LR__0947
0a774     53 B5 02 F6 | 	mov	local08, local01
0a778                 | ' varnum=t1.result.uresult
0a778                 | ' if lparts(ct).part$<>"to" then return 33
0a778     38 00 00 FF 
0a77c     E8 65 06 F1 | 	add	objptr, ##29160
0a780     32 AD 02 FB | 	rdlong	local04, objptr
0a784     03 AC 66 F0 | 	shl	local04, #3
0a788     02 00 00 FF 
0a78c     38 64 86 F1 | 	sub	objptr, ##1080
0a790     32 AD 02 F1 | 	add	local04, objptr
0a794     56 93 02 FB | 	rdlong	arg01, local04
0a798     97 01 00 FF 
0a79c     54 94 06 F6 | 	mov	arg02, ##@LR__5932
0a7a0     36 00 00 FF 
0a7a4     B0 65 86 F1 | 	sub	objptr, ##28080
0a7a8     20 A4 B1 FD | 	call	#__system___string_cmp
0a7ac     00 7A 0E F2 | 	cmp	result1, #0 wz
0a7b0     21 7A 06 56 |  if_ne	mov	result1, #33
0a7b4     A4 07 90 5D |  if_ne	jmp	#LR__0947
0a7b8     38 00 00 FF 
0a7bc     E8 65 06 F1 | 	add	objptr, ##29160
0a7c0     32 B7 02 FB | 	rdlong	local09, objptr
0a7c4     01 B6 06 F1 | 	add	local09, #1
0a7c8     32 B7 62 FC | 	wrlong	local09, objptr
0a7cc     38 00 00 FF 
0a7d0     E8 65 86 F1 | 	sub	objptr, ##29160
0a7d4     80 16 B0 FD | 	call	#_expr
0a7d8                 | ' ct+=1
0a7d8                 | ' expr()  										' there is "to" value pushed on the stack
0a7d8                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a7d8     38 00 00 FF 
0a7dc     E8 65 06 F1 | 	add	objptr, ##29160
0a7e0     32 AD 02 FB | 	rdlong	local04, objptr
0a7e4     03 AC 66 F0 | 	shl	local04, #3
0a7e8     02 00 00 FF 
0a7ec     38 64 86 F1 | 	sub	objptr, ##1080
0a7f0     32 AD 02 F1 | 	add	local04, objptr
0a7f4     56 93 02 FB | 	rdlong	arg01, local04
0a7f8     97 01 00 FF 
0a7fc     57 94 06 F6 | 	mov	arg02, ##@LR__5933
0a800     36 00 00 FF 
0a804     B0 65 86 F1 | 	sub	objptr, ##28080
0a808     C0 A3 B1 FD | 	call	#__system___string_cmp
0a80c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a810     48 00 90 AD |  if_e	jmp	#LR__0932
0a814     38 00 00 FF 
0a818     E8 65 06 F1 | 	add	objptr, ##29160
0a81c     32 AD 02 FB | 	rdlong	local04, objptr
0a820     03 AC 66 F0 | 	shl	local04, #3
0a824     02 00 00 FF 
0a828     38 64 86 F1 | 	sub	objptr, ##1080
0a82c     32 AD 02 F1 | 	add	local04, objptr
0a830     56 93 02 FB | 	rdlong	arg01, local04
0a834     02 94 06 F6 | 	mov	arg02, #2
0a838     36 00 00 FF 
0a83c     B0 65 86 F1 | 	sub	objptr, ##28080
0a840     08 BC B1 FD | 	call	#__system__Left_S
0a844     3D 93 02 F6 | 	mov	arg01, result1
0a848     97 01 00 FF 
0a84c     5C 94 06 F6 | 	mov	arg02, ##@LR__5934
0a850     78 A3 B1 FD | 	call	#__system___string_cmp
0a854     00 7A 0E F2 | 	cmp	result1, #0 wz
0a858     A8 05 90 5D |  if_ne	jmp	#LR__0945
0a85c                 | LR__0932
0a85c                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a85c     38 00 00 FF 
0a860     E8 65 06 F1 | 	add	objptr, ##29160
0a864     32 AD 02 FB | 	rdlong	local04, objptr
0a868     03 AC 66 F0 | 	shl	local04, #3
0a86c     02 00 00 FF 
0a870     38 64 86 F1 | 	sub	objptr, ##1080
0a874     32 AD 02 F1 | 	add	local04, objptr
0a878     56 93 02 FB | 	rdlong	arg01, local04
0a87c     02 94 06 F6 | 	mov	arg02, #2
0a880     36 00 00 FF 
0a884     B0 65 86 F1 | 	sub	objptr, ##28080
0a888     C0 BB B1 FD | 	call	#__system__Left_S
0a88c     3D 93 02 F6 | 	mov	arg01, result1
0a890     97 01 00 FF 
0a894     5F 94 06 F6 | 	mov	arg02, ##@LR__5935
0a898     30 A3 B1 FD | 	call	#__system___string_cmp
0a89c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a8a0     3C 05 90 5D |  if_ne	jmp	#LR__0944
0a8a4     38 00 00 FF 
0a8a8     E8 65 06 F1 | 	add	objptr, ##29160
0a8ac     32 AD 02 FB | 	rdlong	local04, objptr
0a8b0     03 AC 66 F0 | 	shl	local04, #3
0a8b4     02 00 00 FF 
0a8b8     38 64 86 F1 | 	sub	objptr, ##1080
0a8bc     32 AD 02 F1 | 	add	local04, objptr
0a8c0     56 93 02 FB | 	rdlong	arg01, local04
0a8c4     36 00 00 FF 
0a8c8     B0 65 86 F1 | 	sub	objptr, ##28080
0a8cc     49 B9 02 F6 | 	mov	local10, arg01
0a8d0     D7 06 48 FB | 	callpa	#(@LR__0934-@LR__0933)>>2,fcache_load_ptr_
0a8d4                 | LR__0933
0a8d4     5C 7B CA FA | 	rdbyte	result1, local10 wz
0a8d8     01 B8 06 51 |  if_ne	add	local10, #1
0a8dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0933
0a8e0                 | LR__0934
0a8e0     49 B9 82 F1 | 	sub	local10, arg01
0a8e4     03 B8 56 F2 | 	cmps	local10, #3 wc
0a8e8     F4 04 90 CD |  if_b	jmp	#LR__0944
0a8ec     38 00 00 FF 
0a8f0     E8 65 06 F1 | 	add	objptr, ##29160
0a8f4     32 AD 02 FB | 	rdlong	local04, objptr
0a8f8     56 BB 02 F6 | 	mov	local11, local04
0a8fc     03 BA 66 F0 | 	shl	local11, #3
0a900     02 00 00 FF 
0a904     38 64 86 F1 | 	sub	objptr, ##1080
0a908     32 BB 02 F1 | 	add	local11, objptr
0a90c     03 AC 66 F0 | 	shl	local04, #3
0a910     32 AD 02 F1 | 	add	local04, objptr
0a914     56 AD 02 FB | 	rdlong	local04, local04
0a918     02 00 00 FF 
0a91c     38 64 06 F1 | 	add	objptr, ##1080
0a920     32 93 02 FB | 	rdlong	arg01, objptr
0a924     03 92 66 F0 | 	shl	arg01, #3
0a928     02 00 00 FF 
0a92c     38 64 86 F1 | 	sub	objptr, ##1080
0a930     32 93 02 F1 | 	add	arg01, objptr
0a934     49 93 02 FB | 	rdlong	arg01, arg01
0a938     36 00 00 FF 
0a93c     B0 65 86 F1 | 	sub	objptr, ##28080
0a940     49 B9 02 F6 | 	mov	local10, arg01
0a944     D7 06 48 FB | 	callpa	#(@LR__0936-@LR__0935)>>2,fcache_load_ptr_
0a948                 | LR__0935
0a948     5C 7B CA FA | 	rdbyte	result1, local10 wz
0a94c     01 B8 06 51 |  if_ne	add	local10, #1
0a950     F4 FF 9F 5D |  if_ne	jmp	#LR__0935
0a954                 | LR__0936
0a954     49 B9 82 F1 | 	sub	local10, arg01
0a958     5C 95 02 F6 | 	mov	arg02, local10
0a95c     02 94 86 F1 | 	sub	arg02, #2
0a960     56 93 02 F6 | 	mov	arg01, local04
0a964     6C BB B1 FD | 	call	#__system__Right_S
0a968     5D 7B 62 FC | 	wrlong	result1, local11
0a96c     38 00 00 FF 
0a970     E8 65 06 F1 | 	add	objptr, ##29160
0a974     32 AD 02 FB | 	rdlong	local04, objptr
0a978     56 BB 02 F6 | 	mov	local11, local04
0a97c     03 BA 66 F0 | 	shl	local11, #3
0a980     02 00 00 FF 
0a984     38 64 86 F1 | 	sub	objptr, ##1080
0a988     32 BB 02 F1 | 	add	local11, objptr
0a98c     03 AC 66 F0 | 	shl	local04, #3
0a990     32 AD 02 F1 | 	add	local04, objptr
0a994     56 93 02 FB | 	rdlong	arg01, local04
0a998     36 00 00 FF 
0a99c     B0 65 86 F1 | 	sub	objptr, ##28080
0a9a0     1C B6 BF FD | 	call	#_isfunction
0a9a4     3D 7B E2 F8 | 	getbyte	result1, result1, #0
0a9a8     04 BA 06 F1 | 	add	local11, #4
0a9ac     5D 7B 62 FC | 	wrlong	result1, local11
0a9b0                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0a9b0     38 00 00 FF 
0a9b4     E8 65 06 F1 | 	add	objptr, ##29160
0a9b8     32 BB 02 FB | 	rdlong	local11, objptr
0a9bc     03 BA 66 F0 | 	shl	local11, #3
0a9c0     02 00 00 FF 
0a9c4     38 64 86 F1 | 	sub	objptr, ##1080
0a9c8     32 BB 02 F1 | 	add	local11, objptr
0a9cc     04 BA 06 F1 | 	add	local11, #4
0a9d0     5D AD 02 FB | 	rdlong	local04, local11
0a9d4     01 AC 56 F2 | 	cmps	local04, #1 wc
0a9d8     36 00 00 FF 
0a9dc     B0 65 86 F1 | 	sub	objptr, ##28080
0a9e0     E0 03 90 3D |  if_ae	jmp	#LR__0943
0a9e4     38 00 00 FF 
0a9e8     E8 65 06 F1 | 	add	objptr, ##29160
0a9ec     32 AD 02 FB | 	rdlong	local04, objptr
0a9f0     56 BB 02 F6 | 	mov	local11, local04
0a9f4     03 BA 66 F0 | 	shl	local11, #3
0a9f8     02 00 00 FF 
0a9fc     38 64 86 F1 | 	sub	objptr, ##1080
0aa00     32 BB 02 F1 | 	add	local11, objptr
0aa04     03 AC 66 F0 | 	shl	local04, #3
0aa08     32 AD 02 F1 | 	add	local04, objptr
0aa0c     56 93 02 FB | 	rdlong	arg01, local04
0aa10     36 00 00 FF 
0aa14     B0 65 86 F1 | 	sub	objptr, ##28080
0aa18     78 9E BF FD | 	call	#_isnotename
0aa1c     04 BA 06 F1 | 	add	local11, #4
0aa20     5D 7B 62 FC | 	wrlong	result1, local11
0aa24                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0aa24                 | '     if lparts(ct).token>0 then 
0aa24     38 00 00 FF 
0aa28     E8 65 06 F1 | 	add	objptr, ##29160
0aa2c     32 BB 02 FB | 	rdlong	local11, objptr
0aa30     03 BA 66 F0 | 	shl	local11, #3
0aa34     02 00 00 FF 
0aa38     38 64 86 F1 | 	sub	objptr, ##1080
0aa3c     32 BB 02 F1 | 	add	local11, objptr
0aa40     04 BA 06 F1 | 	add	local11, #4
0aa44     5D AD 02 FB | 	rdlong	local04, local11
0aa48     01 AC 56 F2 | 	cmps	local04, #1 wc
0aa4c     36 00 00 FF 
0aa50     B0 65 86 F1 | 	sub	objptr, ##28080
0aa54     94 00 90 CD |  if_b	jmp	#LR__0937
0aa58     38 00 00 FF 
0aa5c     E8 65 06 F1 | 	add	objptr, ##29160
0aa60     32 BB 02 FB | 	rdlong	local11, objptr
0aa64     03 BA 66 F0 | 	shl	local11, #3
0aa68     02 00 00 FF 
0aa6c     38 64 86 F1 | 	sub	objptr, ##1080
0aa70     32 BB 02 F1 | 	add	local11, objptr
0aa74     04 BA 06 F1 | 	add	local11, #4
0aa78     5D 93 02 FB | 	rdlong	arg01, local11
0aa7c     36 00 00 FF 
0aa80     B0 65 86 F1 | 	sub	objptr, ##28080
0aa84     80 C7 BF FD | 	call	#_getnoteval
0aa88     3D 93 02 F6 | 	mov	arg01, result1
0aa8c     38 00 00 FF 
0aa90     E8 65 06 F1 | 	add	objptr, ##29160
0aa94     32 BB 02 FB | 	rdlong	local11, objptr
0aa98     03 BA 66 F0 | 	shl	local11, #3
0aa9c     02 00 00 FF 
0aaa0     38 64 86 F1 | 	sub	objptr, ##1080
0aaa4     32 BB 02 F1 | 	add	local11, objptr
0aaa8     36 00 00 FF 
0aaac     B0 65 86 F1 | 	sub	objptr, ##28080
0aab0     90 BB B1 FD | 	call	#__system__str_S
0aab4     5D 7B 62 FC | 	wrlong	result1, local11
0aab8     38 00 00 FF 
0aabc     E8 65 06 F1 | 	add	objptr, ##29160
0aac0     32 BB 02 FB | 	rdlong	local11, objptr
0aac4     03 BA 66 F0 | 	shl	local11, #3
0aac8     02 00 00 FF 
0aacc     38 64 86 F1 | 	sub	objptr, ##1080
0aad0     32 BB 02 F1 | 	add	local11, objptr
0aad4     04 BA 06 F1 | 	add	local11, #4
0aad8     01 00 80 FF 
0aadc     5D 05 68 FC | 	wrlong	##514, local11
0aae0     36 00 00 FF 
0aae4     B0 65 86 F1 | 	sub	objptr, ##28080
0aae8     D8 02 90 FD | 	jmp	#LR__0943
0aaec                 | LR__0937
0aaec     38 00 00 FF 
0aaf0     E8 65 06 F1 | 	add	objptr, ##29160
0aaf4     32 AD 02 FB | 	rdlong	local04, objptr
0aaf8     56 BB 02 F6 | 	mov	local11, local04
0aafc     03 BA 66 F0 | 	shl	local11, #3
0ab00     02 00 00 FF 
0ab04     38 64 86 F1 | 	sub	objptr, ##1080
0ab08     32 BB 02 F1 | 	add	local11, objptr
0ab0c     03 AC 66 F0 | 	shl	local04, #3
0ab10     32 AD 02 F1 | 	add	local04, objptr
0ab14     56 93 02 FB | 	rdlong	arg01, local04
0ab18     36 00 00 FF 
0ab1c     B0 65 86 F1 | 	sub	objptr, ##28080
0ab20     F0 9C BF FD | 	call	#_isconstant
0ab24     04 BA 06 F1 | 	add	local11, #4
0ab28     5D 7B 62 FC | 	wrlong	result1, local11
0ab2c                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0ab2c     38 00 00 FF 
0ab30     E8 65 06 F1 | 	add	objptr, ##29160
0ab34     32 BB 02 FB | 	rdlong	local11, objptr
0ab38     03 BA 66 F0 | 	shl	local11, #3
0ab3c     02 00 00 FF 
0ab40     38 64 86 F1 | 	sub	objptr, ##1080
0ab44     32 BB 02 F1 | 	add	local11, objptr
0ab48     04 BA 06 F1 | 	add	local11, #4
0ab4c     5D AD 02 FB | 	rdlong	local04, local11
0ab50     01 AC 56 F2 | 	cmps	local04, #1 wc
0ab54     36 00 00 FF 
0ab58     B0 65 86 F1 | 	sub	objptr, ##28080
0ab5c     8C 00 90 CD |  if_b	jmp	#LR__0938
0ab60     38 00 00 FF 
0ab64     E8 65 06 F1 | 	add	objptr, ##29160
0ab68     32 B7 02 FB | 	rdlong	local09, objptr
0ab6c     5B BB 02 F6 | 	mov	local11, local09
0ab70     03 BA 66 F0 | 	shl	local11, #3
0ab74     02 00 00 FF 
0ab78     38 64 86 F1 | 	sub	objptr, ##1080
0ab7c     32 BB 02 F1 | 	add	local11, objptr
0ab80     03 B6 66 F0 | 	shl	local09, #3
0ab84     32 B7 02 F1 | 	add	local09, objptr
0ab88     04 B6 06 F1 | 	add	local09, #4
0ab8c     5B 93 02 FB | 	rdlong	arg01, local09
0ab90     36 00 00 FF 
0ab94     B0 65 86 F1 | 	sub	objptr, ##28080
0ab98     49 93 52 F6 | 	abs	arg01, arg01 wc
0ab9c     1F BC C6 C9 |  if_b	decod	local12, #31
0aba0     00 BC 06 36 |  if_ae	mov	local12, #0
0aba4     C8 C2 B1 FD | 	call	#__system___float_fromuns
0aba8     5E 7B 62 F5 | 	xor	result1, local12
0abac     3D 93 02 F6 | 	mov	arg01, result1
0abb0     90 BA B1 FD | 	call	#__system__str_S
0abb4     5D 7B 62 FC | 	wrlong	result1, local11
0abb8     38 00 00 FF 
0abbc     E8 65 06 F1 | 	add	objptr, ##29160
0abc0     32 BB 02 FB | 	rdlong	local11, objptr
0abc4     03 BA 66 F0 | 	shl	local11, #3
0abc8     02 00 00 FF 
0abcc     38 64 86 F1 | 	sub	objptr, ##1080
0abd0     32 BB 02 F1 | 	add	local11, objptr
0abd4     04 BA 06 F1 | 	add	local11, #4
0abd8     01 00 80 FF 
0abdc     5D 03 68 FC | 	wrlong	##513, local11
0abe0     36 00 00 FF 
0abe4     B0 65 86 F1 | 	sub	objptr, ##28080
0abe8     D8 01 90 FD | 	jmp	#LR__0943
0abec                 | LR__0938
0abec     38 00 00 FF 
0abf0     E8 65 06 F1 | 	add	objptr, ##29160
0abf4     32 AD 02 FB | 	rdlong	local04, objptr
0abf8     03 AC 66 F0 | 	shl	local04, #3
0abfc     02 00 00 FF 
0ac00     38 64 86 F1 | 	sub	objptr, ##1080
0ac04     32 AD 02 F1 | 	add	local04, objptr
0ac08     56 93 02 FB | 	rdlong	arg01, local04
0ac0c     36 00 00 FF 
0ac10     B0 65 86 F1 | 	sub	objptr, ##28080
0ac14     3C BE BF FD | 	call	#_isnum
0ac18     3D BF 02 F6 | 	mov	local13, result1
0ac1c     07 BE 66 F7 | 	signx	local13, #7
0ac20     38 00 00 FF 
0ac24     E8 65 06 F1 | 	add	objptr, ##29160
0ac28     32 AD 02 FB | 	rdlong	local04, objptr
0ac2c     03 AC 66 F0 | 	shl	local04, #3
0ac30     02 00 00 FF 
0ac34     38 64 86 F1 | 	sub	objptr, ##1080
0ac38     32 AD 02 F1 | 	add	local04, objptr
0ac3c     56 93 02 FB | 	rdlong	arg01, local04
0ac40     36 00 00 FF 
0ac44     B0 65 86 F1 | 	sub	objptr, ##28080
0ac48     F4 C1 BF FD | 	call	#_isint
0ac4c     3D C1 02 F6 | 	mov	local14, result1
0ac50     07 C0 66 F7 | 	signx	local14, #7
0ac54     38 00 00 FF 
0ac58     E8 65 06 F1 | 	add	objptr, ##29160
0ac5c     32 AD 02 FB | 	rdlong	local04, objptr
0ac60     03 AC 66 F0 | 	shl	local04, #3
0ac64     02 00 00 FF 
0ac68     38 64 86 F1 | 	sub	objptr, ##1080
0ac6c     32 AD 02 F1 | 	add	local04, objptr
0ac70     56 93 02 FB | 	rdlong	arg01, local04
0ac74     36 00 00 FF 
0ac78     B0 65 86 F1 | 	sub	objptr, ##28080
0ac7c     64 C4 BF FD | 	call	#_isdec
0ac80     07 7A 66 F7 | 	signx	result1, #7
0ac84     3D C3 02 F6 | 	mov	local15, result1
0ac88                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0ac88                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0ac88     00 BE 0E F2 | 	cmp	local13, #0 wz
0ac8c     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0ac90     00 C2 0E 52 |  if_ne	cmp	local15, #0 wz
0ac94     34 00 90 AD |  if_e	jmp	#LR__0939
0ac98     38 00 00 FF 
0ac9c     E8 65 06 F1 | 	add	objptr, ##29160
0aca0     32 BB 02 FB | 	rdlong	local11, objptr
0aca4     03 BA 66 F0 | 	shl	local11, #3
0aca8     02 00 00 FF 
0acac     38 64 86 F1 | 	sub	objptr, ##1080
0acb0     32 BB 02 F1 | 	add	local11, objptr
0acb4     04 BA 06 F1 | 	add	local11, #4
0acb8     01 00 80 FF 
0acbc     5D 01 68 FC | 	wrlong	##512, local11
0acc0     36 00 00 FF 
0acc4     B0 65 86 F1 | 	sub	objptr, ##28080
0acc8     F8 00 90 FD | 	jmp	#LR__0943
0accc                 | LR__0939
0accc                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0accc     00 BE 0E F2 | 	cmp	local13, #0 wz
0acd0     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0acd4     61 B7 22 56 |  if_ne	not	local09, local15
0acd8     00 B6 0E 52 |  if_ne	cmp	local09, #0 wz
0acdc     34 00 90 AD |  if_e	jmp	#LR__0940
0ace0     38 00 00 FF 
0ace4     E8 65 06 F1 | 	add	objptr, ##29160
0ace8     32 BB 02 FB | 	rdlong	local11, objptr
0acec     03 BA 66 F0 | 	shl	local11, #3
0acf0     02 00 00 FF 
0acf4     38 64 86 F1 | 	sub	objptr, ##1080
0acf8     32 BB 02 F1 | 	add	local11, objptr
0acfc     04 BA 06 F1 | 	add	local11, #4
0ad00     01 00 80 FF 
0ad04     5D 03 68 FC | 	wrlong	##513, local11
0ad08     36 00 00 FF 
0ad0c     B0 65 86 F1 | 	sub	objptr, ##28080
0ad10     B0 00 90 FD | 	jmp	#LR__0943
0ad14                 | LR__0940
0ad14                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0ad14     00 BE 0E F2 | 	cmp	local13, #0 wz
0ad18     60 C1 22 56 |  if_ne	not	local14, local14
0ad1c     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0ad20     61 C3 22 56 |  if_ne	not	local15, local15
0ad24     00 C2 0E 52 |  if_ne	cmp	local15, #0 wz
0ad28     34 00 90 AD |  if_e	jmp	#LR__0941
0ad2c     38 00 00 FF 
0ad30     E8 65 06 F1 | 	add	objptr, ##29160
0ad34     32 BB 02 FB | 	rdlong	local11, objptr
0ad38     03 BA 66 F0 | 	shl	local11, #3
0ad3c     02 00 00 FF 
0ad40     38 64 86 F1 | 	sub	objptr, ##1080
0ad44     32 BB 02 F1 | 	add	local11, objptr
0ad48     04 BA 06 F1 | 	add	local11, #4
0ad4c     01 00 80 FF 
0ad50     5D 05 68 FC | 	wrlong	##514, local11
0ad54     36 00 00 FF 
0ad58     B0 65 86 F1 | 	sub	objptr, ##28080
0ad5c     64 00 90 FD | 	jmp	#LR__0943
0ad60                 | LR__0941
0ad60                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0ad60     38 00 00 FF 
0ad64     E8 65 06 F1 | 	add	objptr, ##29160
0ad68     32 BB 02 FB | 	rdlong	local11, objptr
0ad6c     03 BA 66 F0 | 	shl	local11, #3
0ad70     02 00 00 FF 
0ad74     38 64 86 F1 | 	sub	objptr, ##1080
0ad78     32 BB 02 F1 | 	add	local11, objptr
0ad7c     5D 93 02 FB | 	rdlong	arg01, local11
0ad80     36 00 00 FF 
0ad84     B0 65 86 F1 | 	sub	objptr, ##28080
0ad88     54 BA BF FD | 	call	#_isname
0ad8c     00 7A 0E F2 | 	cmp	result1, #0 wz
0ad90     30 00 90 AD |  if_e	jmp	#LR__0942
0ad94     38 00 00 FF 
0ad98     E8 65 06 F1 | 	add	objptr, ##29160
0ad9c     32 BB 02 FB | 	rdlong	local11, objptr
0ada0     03 BA 66 F0 | 	shl	local11, #3
0ada4     02 00 00 FF 
0ada8     38 64 86 F1 | 	sub	objptr, ##1080
0adac     32 BB 02 F1 | 	add	local11, objptr
0adb0     04 BA 06 F1 | 	add	local11, #4
0adb4     01 00 80 FF 
0adb8     5D 09 68 FC | 	wrlong	##516, local11
0adbc     36 00 00 FF 
0adc0     B0 65 86 F1 | 	sub	objptr, ##28080
0adc4                 | LR__0942
0adc4                 | LR__0943
0adc4     38 00 00 FF 
0adc8     E8 65 06 F1 | 	add	objptr, ##29160
0adcc     32 B7 02 FB | 	rdlong	local09, objptr
0add0     01 B6 86 F1 | 	sub	local09, #1
0add4     32 B7 62 FC | 	wrlong	local09, objptr
0add8     38 00 00 FF 
0addc     E8 65 86 F1 | 	sub	objptr, ##29160
0ade0                 | LR__0944
0ade0     38 00 00 FF 
0ade4     E8 65 06 F1 | 	add	objptr, ##29160
0ade8     32 B7 02 FB | 	rdlong	local09, objptr
0adec     01 B6 06 F1 | 	add	local09, #1
0adf0     32 B7 62 FC | 	wrlong	local09, objptr
0adf4     38 00 00 FF 
0adf8     E8 65 86 F1 | 	sub	objptr, ##29160
0adfc     58 10 B0 FD | 	call	#_expr
0ae00     78 00 90 FD | 	jmp	#LR__0946
0ae04                 | LR__0945
0ae04     4C 00 00 FF 
0ae08     20 64 06 F1 | 	add	objptr, ##38944
0ae0c     32 C3 02 FB | 	rdlong	local15, objptr
0ae10     61 BB 02 F6 | 	mov	local11, local15
0ae14     01 BA 66 F0 | 	shl	local11, #1
0ae18     61 BB 02 F1 | 	add	local11, local15
0ae1c     02 BA 66 F0 | 	shl	local11, #2
0ae20     03 00 00 FF 
0ae24     00 64 86 F1 | 	sub	objptr, ##1536
0ae28     32 BB 02 F1 | 	add	local11, objptr
0ae2c     08 BA 06 F1 | 	add	local11, #8
0ae30     5D 39 68 FC | 	wrlong	#28, local11
0ae34     03 00 00 FF 
0ae38     00 64 06 F1 | 	add	objptr, ##1536
0ae3c     32 C3 02 FB | 	rdlong	local15, objptr
0ae40     61 BB 02 F6 | 	mov	local11, local15
0ae44     01 BA 66 F0 | 	shl	local11, #1
0ae48     61 BB 02 F1 | 	add	local11, local15
0ae4c     02 BA 66 F0 | 	shl	local11, #2
0ae50     03 00 00 FF 
0ae54     00 64 86 F1 | 	sub	objptr, ##1536
0ae58     32 BB 02 F1 | 	add	local11, objptr
0ae5c     5D 03 68 FC | 	wrlong	#1, local11
0ae60     03 00 00 FF 
0ae64     00 64 06 F1 | 	add	objptr, ##1536
0ae68     32 B7 02 FB | 	rdlong	local09, objptr
0ae6c     01 B6 06 F1 | 	add	local09, #1
0ae70     32 B7 62 FC | 	wrlong	local09, objptr
0ae74     4C 00 00 FF 
0ae78     20 64 86 F1 | 	sub	objptr, ##38944
0ae7c                 | LR__0946
0ae7c     4C 00 00 FF 
0ae80     20 64 06 F1 | 	add	objptr, ##38944
0ae84     32 C3 02 FB | 	rdlong	local15, objptr
0ae88     61 BB 02 F6 | 	mov	local11, local15
0ae8c     01 BA 66 F0 | 	shl	local11, #1
0ae90     61 BB 02 F1 | 	add	local11, local15
0ae94     02 BA 66 F0 | 	shl	local11, #2
0ae98     03 00 00 FF 
0ae9c     00 64 86 F1 | 	sub	objptr, ##1536
0aea0     32 BB 02 F1 | 	add	local11, objptr
0aea4     08 BA 06 F1 | 	add	local11, #8
0aea8     5D 39 68 FC | 	wrlong	#28, local11
0aeac     03 00 00 FF 
0aeb0     00 64 06 F1 | 	add	objptr, ##1536
0aeb4     32 C3 02 FB | 	rdlong	local15, objptr
0aeb8     61 BB 02 F6 | 	mov	local11, local15
0aebc     01 BA 66 F0 | 	shl	local11, #1
0aec0     61 BB 02 F1 | 	add	local11, local15
0aec4     02 BA 66 F0 | 	shl	local11, #2
0aec8     03 00 00 FF 
0aecc     00 64 86 F1 | 	sub	objptr, ##1536
0aed0     32 BB 02 F1 | 	add	local11, objptr
0aed4     5D B5 62 FC | 	wrlong	local08, local11
0aed8     03 00 00 FF 
0aedc     00 64 06 F1 | 	add	objptr, ##1536
0aee0     32 C3 02 FB | 	rdlong	local15, objptr
0aee4     01 C2 06 F1 | 	add	local15, #1
0aee8     32 C3 62 FC | 	wrlong	local15, objptr
0aeec     61 BB 02 F6 | 	mov	local11, local15
0aef0     01 BA 66 F0 | 	shl	local11, #1
0aef4     61 BB 02 F1 | 	add	local11, local15
0aef8     02 BA 66 F0 | 	shl	local11, #2
0aefc     03 00 00 FF 
0af00     00 64 86 F1 | 	sub	objptr, ##1536
0af04     32 BB 02 F1 | 	add	local11, objptr
0af08     08 BA 06 F1 | 	add	local11, #8
0af0c     5D 95 68 FC | 	wrlong	#74, local11
0af10     03 00 00 FF 
0af14     00 64 06 F1 | 	add	objptr, ##1536
0af18     32 C3 02 FB | 	rdlong	local15, objptr
0af1c     61 BB 02 F6 | 	mov	local11, local15
0af20     01 BA 66 F0 | 	shl	local11, #1
0af24     61 BB 02 F1 | 	add	local11, local15
0af28     02 BA 66 F0 | 	shl	local11, #2
0af2c     03 00 00 FF 
0af30     00 64 86 F1 | 	sub	objptr, ##1536
0af34     32 BB 02 F1 | 	add	local11, objptr
0af38     5D 01 68 FC | 	wrlong	#0, local11
0af3c     03 00 00 FF 
0af40     00 64 06 F1 | 	add	objptr, ##1536
0af44     32 B7 02 FB | 	rdlong	local09, objptr
0af48     01 B6 06 F1 | 	add	local09, #1
0af4c     32 B7 62 FC | 	wrlong	local09, objptr
0af50     4C 00 00 FF 
0af54     20 64 86 F1 | 	sub	objptr, ##38944
0af58                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0af58                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0af58                 | ' return 0
0af58     00 7A 06 F6 | 	mov	result1, #0
0af5c                 | LR__0947
0af5c     E7 F0 03 F6 | 	mov	ptra, fp
0af60     F2 00 A0 FD | 	call	#popregs_
0af64                 | _compile_for_ret
0af64     2D 00 64 FD | 	ret
0af68                 | 
0af68                 | ' 
0af68                 | ' '----- compile 'next' command. 
0af68                 | ' 
0af68                 | ' function compile_next() as ulong
0af68                 | _compile_next
0af68     04 CA 05 F6 | 	mov	COUNT_, #4
0af6c     E8 00 A0 FD | 	call	#pushregs_
0af70     38 00 00 FF 
0af74     E8 65 06 F1 | 	add	objptr, ##29160
0af78     32 93 02 FB | 	rdlong	arg01, objptr
0af7c     03 92 66 F0 | 	shl	arg01, #3
0af80     02 00 00 FF 
0af84     38 64 86 F1 | 	sub	objptr, ##1080
0af88     32 93 02 F1 | 	add	arg01, objptr
0af8c     49 A7 02 FB | 	rdlong	local01, arg01
0af90                 | ' 
0af90                 | ' varname$=lparts(ct).part$ 
0af90                 | ' if varnum=0 then return 35
0af90     04 64 86 F1 | 	sub	objptr, #4
0af94     32 93 0A FB | 	rdlong	arg01, objptr wz
0af98     36 00 00 FF 
0af9c     AC 65 86 F1 | 	sub	objptr, ##28076
0afa0     23 7A 06 A6 |  if_e	mov	result1, #35
0afa4     48 01 90 AD |  if_e	jmp	#LR__0952
0afa8     01 A8 66 F6 | 	neg	local02, #1
0afac                 | ' j=-1
0afac                 | ' for i=0 to varnum-1
0afac     00 AA 06 F6 | 	mov	local03, #0
0afb0     36 00 00 FF 
0afb4     AC 65 06 F1 | 	add	objptr, ##28076
0afb8     32 AD 02 FB | 	rdlong	local04, objptr
0afbc     36 00 00 FF 
0afc0     AC 65 86 F1 | 	sub	objptr, ##28076
0afc4                 | LR__0950
0afc4     56 AB 12 F2 | 	cmp	local03, local04 wc
0afc8     34 00 90 3D |  if_ae	jmp	#LR__0951
0afcc                 | '   if variables(i).name=varname$ then j=i : exit
0afcc     55 93 02 F6 | 	mov	arg01, local03
0afd0     04 92 66 F0 | 	shl	arg01, #4
0afd4     32 95 02 F6 | 	mov	arg02, objptr
0afd8     16 00 00 FF 
0afdc     9C 95 06 F1 | 	add	arg02, ##11676
0afe0     4A 93 02 F1 | 	add	arg01, arg02
0afe4     49 93 02 FB | 	rdlong	arg01, arg01
0afe8     53 95 02 F6 | 	mov	arg02, local01
0afec     DC 9B B1 FD | 	call	#__system___string_cmp
0aff0     00 7A 0E F2 | 	cmp	result1, #0 wz
0aff4     55 A9 02 A6 |  if_e	mov	local02, local03
0aff8     01 AA 06 51 |  if_ne	add	local03, #1
0affc     C4 FF 9F 5D |  if_ne	jmp	#LR__0950
0b000                 | LR__0951
0b000                 | ' if j=-1 then return 35
0b000     FF FF 7F FF 
0b004     FF A9 0E F2 | 	cmp	local02, ##-1 wz
0b008     23 7A 06 A6 |  if_e	mov	result1, #35
0b00c     E0 00 90 AD |  if_e	jmp	#LR__0952
0b010     4C 00 00 FF 
0b014     20 64 06 F1 | 	add	objptr, ##38944
0b018     32 AD 02 FB | 	rdlong	local04, objptr
0b01c     56 AB 02 F6 | 	mov	local03, local04
0b020     01 AA 66 F0 | 	shl	local03, #1
0b024     56 AB 02 F1 | 	add	local03, local04
0b028     02 AA 66 F0 | 	shl	local03, #2
0b02c     03 00 00 FF 
0b030     00 64 86 F1 | 	sub	objptr, ##1536
0b034     32 AB 02 F1 | 	add	local03, objptr
0b038     08 AA 06 F1 | 	add	local03, #8
0b03c     55 39 68 FC | 	wrlong	#28, local03
0b040     03 00 00 FF 
0b044     00 64 06 F1 | 	add	objptr, ##1536
0b048     32 AD 02 FB | 	rdlong	local04, objptr
0b04c     56 AB 02 F6 | 	mov	local03, local04
0b050     01 AA 66 F0 | 	shl	local03, #1
0b054     56 AB 02 F1 | 	add	local03, local04
0b058     02 AA 66 F0 | 	shl	local03, #2
0b05c     03 00 00 FF 
0b060     00 64 86 F1 | 	sub	objptr, ##1536
0b064     32 AB 02 F1 | 	add	local03, objptr
0b068     55 A9 62 FC | 	wrlong	local02, local03
0b06c     03 00 00 FF 
0b070     00 64 06 F1 | 	add	objptr, ##1536
0b074     32 AD 02 FB | 	rdlong	local04, objptr
0b078     01 AC 06 F1 | 	add	local04, #1
0b07c     32 AD 62 FC | 	wrlong	local04, objptr
0b080     56 AB 02 F6 | 	mov	local03, local04
0b084     01 AA 66 F0 | 	shl	local03, #1
0b088     56 AB 02 F1 | 	add	local03, local04
0b08c     02 AA 66 F0 | 	shl	local03, #2
0b090     03 00 00 FF 
0b094     00 64 86 F1 | 	sub	objptr, ##1536
0b098     32 AB 02 F1 | 	add	local03, objptr
0b09c     08 AA 06 F1 | 	add	local03, #8
0b0a0     55 97 68 FC | 	wrlong	#75, local03
0b0a4     03 00 00 FF 
0b0a8     00 64 06 F1 | 	add	objptr, ##1536
0b0ac     32 AD 02 FB | 	rdlong	local04, objptr
0b0b0     56 AB 02 F6 | 	mov	local03, local04
0b0b4     01 AA 66 F0 | 	shl	local03, #1
0b0b8     56 AB 02 F1 | 	add	local03, local04
0b0bc     02 AA 66 F0 | 	shl	local03, #2
0b0c0     03 00 00 FF 
0b0c4     00 64 86 F1 | 	sub	objptr, ##1536
0b0c8     32 AB 02 F1 | 	add	local03, objptr
0b0cc     55 01 68 FC | 	wrlong	#0, local03
0b0d0     03 00 00 FF 
0b0d4     00 64 06 F1 | 	add	objptr, ##1536
0b0d8     32 AD 02 FB | 	rdlong	local04, objptr
0b0dc     01 AC 06 F1 | 	add	local04, #1
0b0e0     32 AD 62 FC | 	wrlong	local04, objptr
0b0e4     4C 00 00 FF 
0b0e8     20 64 86 F1 | 	sub	objptr, ##38944
0b0ec                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0b0ec                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0b0ec                 | ' return 0
0b0ec     00 7A 06 F6 | 	mov	result1, #0
0b0f0                 | LR__0952
0b0f0     E7 F0 03 F6 | 	mov	ptra, fp
0b0f4     F2 00 A0 FD | 	call	#popregs_
0b0f8                 | _compile_next_ret
0b0f8     2D 00 64 FD | 	ret
0b0fc                 | 
0b0fc                 | ' 
0b0fc                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0b0fc                 | ' 
0b0fc                 | ' function compile_gosub() as ulong
0b0fc                 | _compile_gosub
0b0fc     02 CA 05 F6 | 	mov	COUNT_, #2
0b100     E8 00 A0 FD | 	call	#pushregs_
0b104     4C 00 00 FF 
0b108     20 64 06 F1 | 	add	objptr, ##38944
0b10c     32 A7 02 FB | 	rdlong	local01, objptr
0b110     53 A9 02 F6 | 	mov	local02, local01
0b114     01 A8 66 F0 | 	shl	local02, #1
0b118     53 A9 02 F1 | 	add	local02, local01
0b11c     02 A8 66 F0 | 	shl	local02, #2
0b120     03 00 00 FF 
0b124     00 64 86 F1 | 	sub	objptr, ##1536
0b128     32 A9 02 F1 | 	add	local02, objptr
0b12c     08 A8 06 F1 | 	add	local02, #8
0b130     54 53 69 FC | 	wrlong	#169, local02
0b134     03 00 00 FF 
0b138     00 64 06 F1 | 	add	objptr, ##1536
0b13c     32 A9 02 FB | 	rdlong	local02, objptr
0b140     01 A8 06 F1 | 	add	local02, #1
0b144     32 A9 62 FC | 	wrlong	local02, objptr
0b148     4C 00 00 FF 
0b14c     20 64 86 F1 | 	sub	objptr, ##38944
0b150     0C 00 B0 FD | 	call	#_compile_goto
0b154                 | ' compiledline(lineptr).result_type=token_gosub
0b154                 | ' lineptr+=1
0b154                 | ' err=compile_goto()
0b154                 | ' return err
0b154     E7 F0 03 F6 | 	mov	ptra, fp
0b158     F2 00 A0 FD | 	call	#popregs_
0b15c                 | _compile_gosub_ret
0b15c     2D 00 64 FD | 	ret
0b160                 | 
0b160                 | ' 
0b160                 | ' '----- compile 'goto' 
0b160                 | ' 
0b160                 | ' function compile_goto() as ulong
0b160                 | _compile_goto
0b160     0A CA 05 F6 | 	mov	COUNT_, #10
0b164     E8 00 A0 FD | 	call	#pushregs_
0b168     34 F0 07 F1 | 	add	ptra, #52
0b16c                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0b16c     38 00 00 FF 
0b170     E8 65 06 F1 | 	add	objptr, ##29160
0b174     32 97 02 FB | 	rdlong	arg03, objptr
0b178     03 96 66 F0 | 	shl	arg03, #3
0b17c     02 00 00 FF 
0b180     38 64 86 F1 | 	sub	objptr, ##1080
0b184     32 97 02 F1 | 	add	arg03, objptr
0b188     04 96 06 F1 | 	add	arg03, #4
0b18c     4B 97 02 FB | 	rdlong	arg03, arg03
0b190     01 00 00 FF 
0b194     00 96 0E F2 | 	cmp	arg03, ##512 wz
0b198     36 00 00 FF 
0b19c     B0 65 86 F1 | 	sub	objptr, ##28080
0b1a0     64 02 90 5D |  if_ne	jmp	#LR__0963
0b1a4     38 00 00 FF 
0b1a8     E8 65 06 F1 | 	add	objptr, ##29160
0b1ac     32 97 02 FB | 	rdlong	arg03, objptr
0b1b0     01 96 06 F1 | 	add	arg03, #1
0b1b4     03 96 66 F0 | 	shl	arg03, #3
0b1b8     02 00 00 FF 
0b1bc     38 64 86 F1 | 	sub	objptr, ##1080
0b1c0     32 97 02 F1 | 	add	arg03, objptr
0b1c4     04 96 06 F1 | 	add	arg03, #4
0b1c8     4B 97 02 FB | 	rdlong	arg03, arg03
0b1cc     FE 97 0E F2 | 	cmp	arg03, #510 wz
0b1d0     36 00 00 FF 
0b1d4     B0 65 86 F1 | 	sub	objptr, ##28080
0b1d8     2C 02 90 5D |  if_ne	jmp	#LR__0963
0b1dc     38 00 00 FF 
0b1e0     E8 65 06 F1 | 	add	objptr, ##29160
0b1e4     32 97 02 FB | 	rdlong	arg03, objptr
0b1e8     03 96 66 F0 | 	shl	arg03, #3
0b1ec     02 00 00 FF 
0b1f0     38 64 86 F1 | 	sub	objptr, ##1080
0b1f4     32 97 02 F1 | 	add	arg03, objptr
0b1f8     4B 93 02 FB | 	rdlong	arg01, arg03
0b1fc     00 94 06 F6 | 	mov	arg02, #0
0b200     36 00 00 FF 
0b204     B0 65 86 F1 | 	sub	objptr, ##28080
0b208     EC C6 B1 FD | 	call	#__system____builtin_atoi
0b20c     3D AD 02 F6 | 	mov	local04, result1
0b210     4C 00 00 FF 
0b214     20 64 06 F1 | 	add	objptr, ##38944
0b218     32 AF 02 FB | 	rdlong	local05, objptr
0b21c     57 B1 02 F6 | 	mov	local06, local05
0b220     01 B0 66 F0 | 	shl	local06, #1
0b224     57 B1 02 F1 | 	add	local06, local05
0b228     02 B0 66 F0 | 	shl	local06, #2
0b22c     03 00 00 FF 
0b230     00 64 86 F1 | 	sub	objptr, ##1536
0b234     32 B3 02 F6 | 	mov	local07, objptr
0b238     32 B1 02 F1 | 	add	local06, objptr
0b23c     08 B0 06 F1 | 	add	local06, #8
0b240     58 9D 68 FC | 	wrlong	#78, local06
0b244     03 00 00 FF 
0b248     0C 64 06 F1 | 	add	objptr, ##1548
0b24c     32 B5 02 FB | 	rdlong	local08, objptr
0b250                 | '   gotoline=val%(lparts(ct).part$) 
0b250                 | '   compiledline(lineptr).result_type=token_fast_goto
0b250                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b250                 | '   do
0b250     40 00 00 FF 
0b254     60 65 86 F1 | 	sub	objptr, ##33120
0b258                 | LR__0960
0b258     E7 92 02 F6 | 	mov	arg01, fp
0b25c     10 92 06 F1 | 	add	arg01, #16
0b260     5A 95 02 F6 | 	mov	arg02, local08
0b264     18 96 06 F6 | 	mov	arg03, #24
0b268     BC 89 B1 FD | 	call	#_psram_spin2_read1
0b26c                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b26c                 | '     if gotoheader(0)<>$FFFFFFFF then
0b26c     10 CE 05 F1 | 	add	fp, #16
0b270     E7 B0 02 FB | 	rdlong	local06, fp
0b274     10 CE 85 F1 | 	sub	fp, #16
0b278     FF FF 7F FF 
0b27c     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0b280     5A B7 02 56 |  if_ne	mov	local09, local08
0b284     24 CE 05 51 |  if_ne	add	fp, #36
0b288     E7 B4 02 5B |  if_ne	rdlong	local08, fp
0b28c     24 CE 85 51 |  if_ne	sub	fp, #36
0b290     24 CE 05 F1 | 	add	fp, #36
0b294     E7 B0 02 FB | 	rdlong	local06, fp
0b298     24 CE 85 F1 | 	sub	fp, #36
0b29c     FF FF 3F FF 
0b2a0     FF B1 0E F2 | 	cmp	local06, ##2147483647 wz
0b2a4     10 CE 05 51 |  if_ne	add	fp, #16
0b2a8     E7 AE 02 5B |  if_ne	rdlong	local05, fp
0b2ac     10 CE 85 51 |  if_ne	sub	fp, #16
0b2b0     FF FF 7F 5F 
0b2b4     FF AF 0E 52 |  if_ne	cmp	local05, ##-1 wz
0b2b8     10 CE 05 51 |  if_ne	add	fp, #16
0b2bc     57 B3 02 56 |  if_ne	mov	local07, local05
0b2c0     10 CE 85 51 |  if_ne	sub	fp, #16
0b2c4     56 B3 0A 52 |  if_ne	cmp	local07, local04 wz
0b2c8     8C FF 9F 5D |  if_ne	jmp	#LR__0960
0b2cc     0B 00 00 FF 
0b2d0     CC 64 86 F1 | 	sub	objptr, ##5836
0b2d4                 | '   if gotoheader(0)=gotoline then
0b2d4     10 CE 05 F1 | 	add	fp, #16
0b2d8     E7 B0 02 FB | 	rdlong	local06, fp
0b2dc     10 CE 85 F1 | 	sub	fp, #16
0b2e0     56 B1 0A F2 | 	cmp	local06, local04 wz
0b2e4     68 00 90 5D |  if_ne	jmp	#LR__0961
0b2e8     4C 00 00 FF 
0b2ec     20 64 06 F1 | 	add	objptr, ##38944
0b2f0     32 AF 02 FB | 	rdlong	local05, objptr
0b2f4     57 B1 02 F6 | 	mov	local06, local05
0b2f8     01 B0 66 F0 | 	shl	local06, #1
0b2fc     57 B1 02 F1 | 	add	local06, local05
0b300     02 B0 66 F0 | 	shl	local06, #2
0b304     03 00 00 FF 
0b308     00 64 86 F1 | 	sub	objptr, ##1536
0b30c     32 B1 02 F1 | 	add	local06, objptr
0b310     58 B7 62 FC | 	wrlong	local09, local06
0b314     03 00 00 FF 
0b318     00 64 06 F1 | 	add	objptr, ##1536
0b31c     32 AF 02 FB | 	rdlong	local05, objptr
0b320     57 B1 02 F6 | 	mov	local06, local05
0b324     01 B0 66 F0 | 	shl	local06, #1
0b328     57 B1 02 F1 | 	add	local06, local05
0b32c     02 B0 66 F0 | 	shl	local06, #2
0b330     03 00 00 FF 
0b334     00 64 86 F1 | 	sub	objptr, ##1536
0b338     32 B1 02 F1 | 	add	local06, objptr
0b33c     04 B0 06 F1 | 	add	local06, #4
0b340     58 AD 62 FC | 	wrlong	local04, local06
0b344     49 00 00 FF 
0b348     20 64 86 F1 | 	sub	objptr, ##37408
0b34c     98 00 90 FD | 	jmp	#LR__0962
0b350                 | LR__0961
0b350     4C 00 00 FF 
0b354     20 64 06 F1 | 	add	objptr, ##38944
0b358     32 AF 02 FB | 	rdlong	local05, objptr
0b35c     57 B1 02 F6 | 	mov	local06, local05
0b360     01 B0 66 F0 | 	shl	local06, #1
0b364     57 B1 02 F1 | 	add	local06, local05
0b368     02 B0 66 F0 | 	shl	local06, #2
0b36c     03 00 00 FF 
0b370     00 64 86 F1 | 	sub	objptr, ##1536
0b374     32 B1 02 F1 | 	add	local06, objptr
0b378     00 00 C0 FF 
0b37c     58 01 68 FC | 	wrlong	##-2147483648, local06
0b380     03 00 00 FF 
0b384     00 64 06 F1 | 	add	objptr, ##1536
0b388     32 AF 02 FB | 	rdlong	local05, objptr
0b38c     57 B1 02 F6 | 	mov	local06, local05
0b390     01 B0 66 F0 | 	shl	local06, #1
0b394     57 B1 02 F1 | 	add	local06, local05
0b398     02 B0 66 F0 | 	shl	local06, #2
0b39c     03 00 00 FF 
0b3a0     00 64 86 F1 | 	sub	objptr, ##1536
0b3a4     32 B1 02 F1 | 	add	local06, objptr
0b3a8     04 B0 06 F1 | 	add	local06, #4
0b3ac     58 AD 62 FC | 	wrlong	local04, local06
0b3b0     03 00 00 FF 
0b3b4     00 64 06 F1 | 	add	objptr, ##1536
0b3b8     32 AF 02 FB | 	rdlong	local05, objptr
0b3bc     57 B1 02 F6 | 	mov	local06, local05
0b3c0     01 B0 66 F0 | 	shl	local06, #1
0b3c4     57 B1 02 F1 | 	add	local06, local05
0b3c8     02 B0 66 F0 | 	shl	local06, #2
0b3cc     03 00 00 FF 
0b3d0     00 64 86 F1 | 	sub	objptr, ##1536
0b3d4     32 B1 02 F1 | 	add	local06, objptr
0b3d8     08 B0 06 F1 | 	add	local06, #8
0b3dc     58 A7 68 FC | 	wrlong	#83, local06
0b3e0     49 00 00 FF 
0b3e4     20 64 86 F1 | 	sub	objptr, ##37408
0b3e8                 | LR__0962
0b3e8     4C 00 00 FF 
0b3ec     20 64 06 F1 | 	add	objptr, ##38944
0b3f0     32 B7 02 FB | 	rdlong	local09, objptr
0b3f4     01 B6 06 F1 | 	add	local09, #1
0b3f8     32 B7 62 FC | 	wrlong	local09, objptr
0b3fc     4C 00 00 FF 
0b400     20 64 86 F1 | 	sub	objptr, ##38944
0b404     BC 00 90 FD | 	jmp	#LR__0964
0b408                 | LR__0963
0b408     4C 0A B0 FD | 	call	#_expr
0b40c     4F AA 06 F6 | 	mov	local03, #79
0b410     00 A6 06 F6 | 	mov	local01, #0
0b414     54 B9 02 F6 | 	mov	local10, local02
0b418     55 AF 02 F6 | 	mov	local05, local03
0b41c     4C 00 00 FF 
0b420     20 64 06 F1 | 	add	objptr, ##38944
0b424     32 A7 02 FB | 	rdlong	local01, objptr
0b428     53 B7 02 F6 | 	mov	local09, local01
0b42c     01 B6 66 F0 | 	shl	local09, #1
0b430     53 B7 02 F1 | 	add	local09, local01
0b434     02 B6 66 F0 | 	shl	local09, #2
0b438     03 00 00 FF 
0b43c     00 64 86 F1 | 	sub	objptr, ##1536
0b440     32 B7 02 F1 | 	add	local09, objptr
0b444     5B 01 68 FC | 	wrlong	#0, local09
0b448     03 00 00 FF 
0b44c     00 64 06 F1 | 	add	objptr, ##1536
0b450     32 A7 02 FB | 	rdlong	local01, objptr
0b454     53 B7 02 F6 | 	mov	local09, local01
0b458     01 B6 66 F0 | 	shl	local09, #1
0b45c     53 B7 02 F1 | 	add	local09, local01
0b460     02 B6 66 F0 | 	shl	local09, #2
0b464     03 00 00 FF 
0b468     00 64 86 F1 | 	sub	objptr, ##1536
0b46c     32 B7 02 F1 | 	add	local09, objptr
0b470     04 B6 06 F1 | 	add	local09, #4
0b474     5B B9 62 FC | 	wrlong	local10, local09
0b478     03 00 00 FF 
0b47c     00 64 06 F1 | 	add	objptr, ##1536
0b480     32 B9 02 FB | 	rdlong	local10, objptr
0b484     5C A7 02 F6 | 	mov	local01, local10
0b488     01 A6 66 F0 | 	shl	local01, #1
0b48c     5C A7 02 F1 | 	add	local01, local10
0b490     02 A6 66 F0 | 	shl	local01, #2
0b494     03 00 00 FF 
0b498     00 64 86 F1 | 	sub	objptr, ##1536
0b49c     32 A7 02 F1 | 	add	local01, objptr
0b4a0     08 A6 06 F1 | 	add	local01, #8
0b4a4     53 AF 62 FC | 	wrlong	local05, local01
0b4a8     03 00 00 FF 
0b4ac     00 64 06 F1 | 	add	objptr, ##1536
0b4b0     32 B9 02 FB | 	rdlong	local10, objptr
0b4b4     01 B8 06 F1 | 	add	local10, #1
0b4b8     32 B9 62 FC | 	wrlong	local10, objptr
0b4bc     4C 00 00 FF 
0b4c0     20 64 86 F1 | 	sub	objptr, ##38944
0b4c4                 | LR__0964
0b4c4                 | ' return 0
0b4c4     00 7A 06 F6 | 	mov	result1, #0
0b4c8     E7 F0 03 F6 | 	mov	ptra, fp
0b4cc     F2 00 A0 FD | 	call	#popregs_
0b4d0                 | _compile_goto_ret
0b4d0     2D 00 64 FD | 	ret
0b4d4                 | 
0b4d4                 | ' 
0b4d4                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b4d4                 | ' 
0b4d4                 | ' function compile_on() as ulong
0b4d4                 | _compile_on
0b4d4     04 CA 05 F6 | 	mov	COUNT_, #4
0b4d8     E8 00 A0 FD | 	call	#pushregs_
0b4dc     78 09 B0 FD | 	call	#_expr
0b4e0     00 A6 06 F6 | 	mov	local01, #0
0b4e4     4C 00 00 FF 
0b4e8     20 64 06 F1 | 	add	objptr, ##38944
0b4ec     32 95 02 FB | 	rdlong	arg02, objptr
0b4f0     4A 93 02 F6 | 	mov	arg01, arg02
0b4f4     01 92 66 F0 | 	shl	arg01, #1
0b4f8     4A 93 02 F1 | 	add	arg01, arg02
0b4fc     02 92 66 F0 | 	shl	arg01, #2
0b500     03 00 00 FF 
0b504     00 64 86 F1 | 	sub	objptr, ##1536
0b508     32 93 02 F1 | 	add	arg01, objptr
0b50c     08 92 06 F1 | 	add	arg01, #8
0b510     49 83 69 FC | 	wrlong	#193, arg01
0b514     03 00 00 FF 
0b518     00 64 06 F1 | 	add	objptr, ##1536
0b51c     32 95 02 FB | 	rdlong	arg02, objptr
0b520     4A A9 02 F6 | 	mov	local02, arg02
0b524     01 94 06 F1 | 	add	arg02, #1
0b528     32 95 62 FC | 	wrlong	arg02, objptr
0b52c                 | ' expr()
0b52c                 | ' 'print lparts(ct).part$ 'ok
0b52c                 | ' numpar=0
0b52c                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b52c                 | ' if lparts(ct).part$="goto" then
0b52c     13 00 00 FF 
0b530     38 64 86 F1 | 	sub	objptr, ##9784
0b534     32 95 02 FB | 	rdlong	arg02, objptr
0b538     03 94 66 F0 | 	shl	arg02, #3
0b53c     02 00 00 FF 
0b540     38 64 86 F1 | 	sub	objptr, ##1080
0b544     32 95 02 F1 | 	add	arg02, objptr
0b548     4A 93 02 FB | 	rdlong	arg01, arg02
0b54c     97 01 00 FF 
0b550     62 94 06 F6 | 	mov	arg02, ##@LR__5936
0b554     36 00 00 FF 
0b558     B0 65 86 F1 | 	sub	objptr, ##28080
0b55c     6C 96 B1 FD | 	call	#__system___string_cmp
0b560     00 7A 0E F2 | 	cmp	result1, #0 wz
0b564     FC 01 90 5D |  if_ne	jmp	#LR__0975
0b568     38 00 00 FF 
0b56c     E8 65 06 F1 | 	add	objptr, ##29160
0b570     32 AB 02 FB | 	rdlong	local03, objptr
0b574     38 00 00 FF 
0b578     E8 65 86 F1 | 	sub	objptr, ##29160
0b57c     01 AA 06 F1 | 	add	local03, #1
0b580                 | '   i=ct+1
0b580                 | '   do
0b580                 | LR__0970
0b580                 | '     if lparts(i).token=token_decimal then
0b580     55 7B 02 F6 | 	mov	result1, local03
0b584     03 7A 66 F0 | 	shl	result1, #3
0b588     32 95 02 F6 | 	mov	arg02, objptr
0b58c     36 00 00 FF 
0b590     B0 95 06 F1 | 	add	arg02, ##28080
0b594     4A 7B 02 F1 | 	add	result1, arg02
0b598     04 7A 06 F1 | 	add	result1, #4
0b59c     3D 7B 02 FB | 	rdlong	result1, result1
0b5a0     01 00 00 FF 
0b5a4     00 7A 0E F2 | 	cmp	result1, ##512 wz
0b5a8     DC 00 90 5D |  if_ne	jmp	#LR__0971
0b5ac     4C 00 00 FF 
0b5b0     20 64 06 F1 | 	add	objptr, ##38944
0b5b4     32 7B 02 FB | 	rdlong	result1, objptr
0b5b8     3D 95 02 F6 | 	mov	arg02, result1
0b5bc     01 94 66 F0 | 	shl	arg02, #1
0b5c0     3D 95 02 F1 | 	add	arg02, result1
0b5c4     02 94 66 F0 | 	shl	arg02, #2
0b5c8     03 00 00 FF 
0b5cc     00 64 86 F1 | 	sub	objptr, ##1536
0b5d0     32 95 02 F1 | 	add	arg02, objptr
0b5d4     00 00 C0 FF 
0b5d8     4A 01 68 FC | 	wrlong	##-2147483648, arg02
0b5dc     03 00 00 FF 
0b5e0     00 64 06 F1 | 	add	objptr, ##1536
0b5e4     32 95 02 FB | 	rdlong	arg02, objptr
0b5e8     4A AD 02 F6 | 	mov	local04, arg02
0b5ec     01 AC 66 F0 | 	shl	local04, #1
0b5f0     4A AD 02 F1 | 	add	local04, arg02
0b5f4     02 AC 66 F0 | 	shl	local04, #2
0b5f8     03 00 00 FF 
0b5fc     00 64 86 F1 | 	sub	objptr, ##1536
0b600     32 AD 02 F1 | 	add	local04, objptr
0b604     55 95 02 F6 | 	mov	arg02, local03
0b608     03 94 66 F0 | 	shl	arg02, #3
0b60c     12 00 00 FF 
0b610     70 64 86 F1 | 	sub	objptr, ##9328
0b614     32 95 02 F1 | 	add	arg02, objptr
0b618     4A 93 02 FB | 	rdlong	arg01, arg02
0b61c     00 94 06 F6 | 	mov	arg02, #0
0b620     36 00 00 FF 
0b624     B0 65 86 F1 | 	sub	objptr, ##28080
0b628     CC C2 B1 FD | 	call	#__system____builtin_atoi
0b62c     04 AC 06 F1 | 	add	local04, #4
0b630     56 7B 62 FC | 	wrlong	result1, local04
0b634     4C 00 00 FF 
0b638     20 64 06 F1 | 	add	objptr, ##38944
0b63c     32 95 02 FB | 	rdlong	arg02, objptr
0b640     4A AD 02 F6 | 	mov	local04, arg02
0b644     01 AC 66 F0 | 	shl	local04, #1
0b648     4A AD 02 F1 | 	add	local04, arg02
0b64c     02 AC 66 F0 | 	shl	local04, #2
0b650     03 00 00 FF 
0b654     00 64 86 F1 | 	sub	objptr, ##1536
0b658     32 AD 02 F1 | 	add	local04, objptr
0b65c     08 AC 06 F1 | 	add	local04, #8
0b660     56 A7 68 FC | 	wrlong	#83, local04
0b664     03 00 00 FF 
0b668     00 64 06 F1 | 	add	objptr, ##1536
0b66c     32 AD 02 FB | 	rdlong	local04, objptr
0b670     01 AC 06 F1 | 	add	local04, #1
0b674     32 AD 62 FC | 	wrlong	local04, objptr
0b678     4C 00 00 FF 
0b67c     20 64 86 F1 | 	sub	objptr, ##38944
0b680     01 A6 06 F1 | 	add	local01, #1
0b684     08 00 90 FD | 	jmp	#LR__0972
0b688                 | LR__0971
0b688                 | '       return 17
0b688     11 7A 06 F6 | 	mov	result1, #17
0b68c     2C 04 90 FD | 	jmp	#LR__0985
0b690                 | LR__0972
0b690     01 AA 06 F1 | 	add	local03, #1
0b694                 | '     i+=1
0b694                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b694     55 93 02 F6 | 	mov	arg01, local03
0b698     03 92 66 F0 | 	shl	arg01, #3
0b69c     32 AD 02 F6 | 	mov	local04, objptr
0b6a0     36 00 00 FF 
0b6a4     B0 AD 06 F1 | 	add	local04, ##28080
0b6a8     56 93 02 F1 | 	add	arg01, local04
0b6ac     04 92 06 F1 | 	add	arg01, #4
0b6b0     49 93 02 FB | 	rdlong	arg01, arg01
0b6b4     11 92 0E F2 | 	cmp	arg01, #17 wz
0b6b8     2C 00 90 AD |  if_e	jmp	#LR__0973
0b6bc     55 93 02 F6 | 	mov	arg01, local03
0b6c0     03 92 66 F0 | 	shl	arg01, #3
0b6c4     32 AD 02 F6 | 	mov	local04, objptr
0b6c8     36 00 00 FF 
0b6cc     B0 AD 06 F1 | 	add	local04, ##28080
0b6d0     56 93 02 F1 | 	add	arg01, local04
0b6d4     04 92 06 F1 | 	add	arg01, #4
0b6d8     49 AD 02 FB | 	rdlong	local04, arg01
0b6dc     FE AD 0E F2 | 	cmp	local04, #510 wz
0b6e0     15 7A 06 56 |  if_ne	mov	result1, #21
0b6e4     D4 03 90 5D |  if_ne	jmp	#LR__0985
0b6e8                 | LR__0973
0b6e8                 | '     if lparts(i).token=token_end then exit loop
0b6e8     55 7B 02 F6 | 	mov	result1, local03
0b6ec     03 7A 66 F0 | 	shl	result1, #3
0b6f0     32 AD 02 F6 | 	mov	local04, objptr
0b6f4     36 00 00 FF 
0b6f8     B0 AD 06 F1 | 	add	local04, ##28080
0b6fc     56 7B 02 F1 | 	add	result1, local04
0b700     04 7A 06 F1 | 	add	result1, #4
0b704     3D 7B 02 FB | 	rdlong	result1, result1
0b708     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b70c     2C 00 90 AD |  if_e	jmp	#LR__0974
0b710     01 AA 06 F1 | 	add	local03, #1
0b714     55 7B 02 F6 | 	mov	result1, local03
0b718     03 7A 66 F0 | 	shl	result1, #3
0b71c     32 AD 02 F6 | 	mov	local04, objptr
0b720     36 00 00 FF 
0b724     B0 AD 06 F1 | 	add	local04, ##28080
0b728     56 7B 02 F1 | 	add	result1, local04
0b72c     04 7A 06 F1 | 	add	result1, #4
0b730     3D 7B 02 FB | 	rdlong	result1, result1
0b734     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b738     44 FE 9F 5D |  if_ne	jmp	#LR__0970
0b73c                 | LR__0974
0b73c     54 AB 02 F6 | 	mov	local03, local02
0b740     01 AA 66 F0 | 	shl	local03, #1
0b744     54 AB 02 F1 | 	add	local03, local02
0b748     02 AA 66 F0 | 	shl	local03, #2
0b74c     32 AD 02 F6 | 	mov	local04, objptr
0b750     49 00 00 FF 
0b754     20 AC 06 F1 | 	add	local04, ##37408
0b758     56 AB 02 F1 | 	add	local03, local04
0b75c     04 AA 06 F1 | 	add	local03, #4
0b760     55 03 68 FC | 	wrlong	#1, local03
0b764                 | LR__0975
0b764                 | ' 
0b764                 | ' if lparts(ct).part$="gosub" then
0b764     38 00 00 FF 
0b768     E8 65 06 F1 | 	add	objptr, ##29160
0b76c     32 AB 02 FB | 	rdlong	local03, objptr
0b770     03 AA 66 F0 | 	shl	local03, #3
0b774     02 00 00 FF 
0b778     38 64 86 F1 | 	sub	objptr, ##1080
0b77c     32 AB 02 F1 | 	add	local03, objptr
0b780     55 93 02 FB | 	rdlong	arg01, local03
0b784     97 01 00 FF 
0b788     67 94 06 F6 | 	mov	arg02, ##@LR__5937
0b78c     36 00 00 FF 
0b790     B0 65 86 F1 | 	sub	objptr, ##28080
0b794     34 94 B1 FD | 	call	#__system___string_cmp
0b798     00 7A 0E F2 | 	cmp	result1, #0 wz
0b79c     6C 02 90 5D |  if_ne	jmp	#LR__0981
0b7a0     38 00 00 FF 
0b7a4     E8 65 06 F1 | 	add	objptr, ##29160
0b7a8     32 AB 02 FB | 	rdlong	local03, objptr
0b7ac     38 00 00 FF 
0b7b0     E8 65 86 F1 | 	sub	objptr, ##29160
0b7b4     01 AA 06 F1 | 	add	local03, #1
0b7b8                 | '   i=ct+1
0b7b8                 | '   do
0b7b8                 | LR__0976
0b7b8                 | '     if lparts(i).token=token_decimal then
0b7b8     55 7B 02 F6 | 	mov	result1, local03
0b7bc     03 7A 66 F0 | 	shl	result1, #3
0b7c0     32 AD 02 F6 | 	mov	local04, objptr
0b7c4     36 00 00 FF 
0b7c8     B0 AD 06 F1 | 	add	local04, ##28080
0b7cc     56 7B 02 F1 | 	add	result1, local04
0b7d0     04 7A 06 F1 | 	add	result1, #4
0b7d4     3D 7B 02 FB | 	rdlong	result1, result1
0b7d8     01 00 00 FF 
0b7dc     00 7A 0E F2 | 	cmp	result1, ##512 wz
0b7e0     4C 01 90 5D |  if_ne	jmp	#LR__0977
0b7e4     4C 00 00 FF 
0b7e8     20 64 06 F1 | 	add	objptr, ##38944
0b7ec     32 7B 02 FB | 	rdlong	result1, objptr
0b7f0     3D AD 02 F6 | 	mov	local04, result1
0b7f4     01 AC 66 F0 | 	shl	local04, #1
0b7f8     3D AD 02 F1 | 	add	local04, result1
0b7fc     02 AC 66 F0 | 	shl	local04, #2
0b800     03 00 00 FF 
0b804     00 64 86 F1 | 	sub	objptr, ##1536
0b808     32 AD 02 F1 | 	add	local04, objptr
0b80c     08 AC 06 F1 | 	add	local04, #8
0b810     56 53 69 FC | 	wrlong	#169, local04
0b814     03 00 00 FF 
0b818     00 64 06 F1 | 	add	objptr, ##1536
0b81c     32 7B 02 FB | 	rdlong	result1, objptr
0b820     01 7A 06 F1 | 	add	result1, #1
0b824     32 7B 62 FC | 	wrlong	result1, objptr
0b828     3D AD 02 F6 | 	mov	local04, result1
0b82c     01 AC 66 F0 | 	shl	local04, #1
0b830     3D AD 02 F1 | 	add	local04, result1
0b834     02 AC 66 F0 | 	shl	local04, #2
0b838     03 00 00 FF 
0b83c     00 64 86 F1 | 	sub	objptr, ##1536
0b840     32 AD 02 F1 | 	add	local04, objptr
0b844     00 00 C0 FF 
0b848     56 01 68 FC | 	wrlong	##-2147483648, local04
0b84c     03 00 00 FF 
0b850     00 64 06 F1 | 	add	objptr, ##1536
0b854     32 7B 02 FB | 	rdlong	result1, objptr
0b858     3D AD 02 F6 | 	mov	local04, result1
0b85c     01 AC 66 F0 | 	shl	local04, #1
0b860     3D AD 02 F1 | 	add	local04, result1
0b864     02 AC 66 F0 | 	shl	local04, #2
0b868     03 00 00 FF 
0b86c     00 64 86 F1 | 	sub	objptr, ##1536
0b870     32 AD 02 F1 | 	add	local04, objptr
0b874     55 93 02 F6 | 	mov	arg01, local03
0b878     03 92 66 F0 | 	shl	arg01, #3
0b87c     12 00 00 FF 
0b880     70 64 86 F1 | 	sub	objptr, ##9328
0b884     32 93 02 F1 | 	add	arg01, objptr
0b888     49 93 02 FB | 	rdlong	arg01, arg01
0b88c     00 94 06 F6 | 	mov	arg02, #0
0b890     36 00 00 FF 
0b894     B0 65 86 F1 | 	sub	objptr, ##28080
0b898     5C C0 B1 FD | 	call	#__system____builtin_atoi
0b89c     04 AC 06 F1 | 	add	local04, #4
0b8a0     56 7B 62 FC | 	wrlong	result1, local04
0b8a4     4C 00 00 FF 
0b8a8     20 64 06 F1 | 	add	objptr, ##38944
0b8ac     32 93 02 FB | 	rdlong	arg01, objptr
0b8b0     49 AD 02 F6 | 	mov	local04, arg01
0b8b4     01 AC 66 F0 | 	shl	local04, #1
0b8b8     49 AD 02 F1 | 	add	local04, arg01
0b8bc     02 AC 66 F0 | 	shl	local04, #2
0b8c0     03 00 00 FF 
0b8c4     00 64 86 F1 | 	sub	objptr, ##1536
0b8c8     32 AD 02 F1 | 	add	local04, objptr
0b8cc     08 AC 06 F1 | 	add	local04, #8
0b8d0     56 A7 68 FC | 	wrlong	#83, local04
0b8d4     03 00 00 FF 
0b8d8     00 64 06 F1 | 	add	objptr, ##1536
0b8dc     32 93 02 FB | 	rdlong	arg01, objptr
0b8e0     01 92 06 F1 | 	add	arg01, #1
0b8e4     32 93 62 FC | 	wrlong	arg01, objptr
0b8e8     01 A6 06 F1 | 	add	local01, #1
0b8ec     49 AD 02 F6 | 	mov	local04, arg01
0b8f0     01 AC 66 F0 | 	shl	local04, #1
0b8f4     49 AD 02 F1 | 	add	local04, arg01
0b8f8     02 AC 66 F0 | 	shl	local04, #2
0b8fc     03 00 00 FF 
0b900     00 64 86 F1 | 	sub	objptr, ##1536
0b904     32 AD 02 F1 | 	add	local04, objptr
0b908     08 AC 06 F1 | 	add	local04, #8
0b90c     56 5B 68 FC | 	wrlong	#45, local04
0b910     03 00 00 FF 
0b914     00 64 06 F1 | 	add	objptr, ##1536
0b918     32 AD 02 FB | 	rdlong	local04, objptr
0b91c     01 AC 06 F1 | 	add	local04, #1
0b920     32 AD 62 FC | 	wrlong	local04, objptr
0b924     4C 00 00 FF 
0b928     20 64 86 F1 | 	sub	objptr, ##38944
0b92c     08 00 90 FD | 	jmp	#LR__0978
0b930                 | LR__0977
0b930                 | '       return 17
0b930     11 7A 06 F6 | 	mov	result1, #17
0b934     84 01 90 FD | 	jmp	#LR__0985
0b938                 | LR__0978
0b938     01 AA 06 F1 | 	add	local03, #1
0b93c                 | '     i+=1
0b93c                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b93c     55 93 02 F6 | 	mov	arg01, local03
0b940     03 92 66 F0 | 	shl	arg01, #3
0b944     32 AD 02 F6 | 	mov	local04, objptr
0b948     36 00 00 FF 
0b94c     B0 AD 06 F1 | 	add	local04, ##28080
0b950     56 93 02 F1 | 	add	arg01, local04
0b954     04 92 06 F1 | 	add	arg01, #4
0b958     49 93 02 FB | 	rdlong	arg01, arg01
0b95c     11 92 0E F2 | 	cmp	arg01, #17 wz
0b960     2C 00 90 AD |  if_e	jmp	#LR__0979
0b964     55 93 02 F6 | 	mov	arg01, local03
0b968     03 92 66 F0 | 	shl	arg01, #3
0b96c     32 AD 02 F6 | 	mov	local04, objptr
0b970     36 00 00 FF 
0b974     B0 AD 06 F1 | 	add	local04, ##28080
0b978     56 93 02 F1 | 	add	arg01, local04
0b97c     04 92 06 F1 | 	add	arg01, #4
0b980     49 93 02 FB | 	rdlong	arg01, arg01
0b984     FE 93 0E F2 | 	cmp	arg01, #510 wz
0b988     15 7A 06 56 |  if_ne	mov	result1, #21
0b98c     2C 01 90 5D |  if_ne	jmp	#LR__0985
0b990                 | LR__0979
0b990                 | '     if lparts(i).token=token_end then exit loop
0b990     55 7B 02 F6 | 	mov	result1, local03
0b994     03 7A 66 F0 | 	shl	result1, #3
0b998     32 AD 02 F6 | 	mov	local04, objptr
0b99c     36 00 00 FF 
0b9a0     B0 AD 06 F1 | 	add	local04, ##28080
0b9a4     56 7B 02 F1 | 	add	result1, local04
0b9a8     04 7A 06 F1 | 	add	result1, #4
0b9ac     3D 7B 02 FB | 	rdlong	result1, result1
0b9b0     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b9b4     2C 00 90 AD |  if_e	jmp	#LR__0980
0b9b8     01 AA 06 F1 | 	add	local03, #1
0b9bc     55 7B 02 F6 | 	mov	result1, local03
0b9c0     03 7A 66 F0 | 	shl	result1, #3
0b9c4     32 AD 02 F6 | 	mov	local04, objptr
0b9c8     36 00 00 FF 
0b9cc     B0 AD 06 F1 | 	add	local04, ##28080
0b9d0     56 7B 02 F1 | 	add	result1, local04
0b9d4     04 7A 06 F1 | 	add	result1, #4
0b9d8     3D 7B 02 FB | 	rdlong	result1, result1
0b9dc     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b9e0     D4 FD 9F 5D |  if_ne	jmp	#LR__0976
0b9e4                 | LR__0980
0b9e4     54 AB 02 F6 | 	mov	local03, local02
0b9e8     01 AA 66 F0 | 	shl	local03, #1
0b9ec     54 AB 02 F1 | 	add	local03, local02
0b9f0     02 AA 66 F0 | 	shl	local03, #2
0b9f4     32 AD 02 F6 | 	mov	local04, objptr
0b9f8     49 00 00 FF 
0b9fc     20 AC 06 F1 | 	add	local04, ##37408
0ba00     56 AB 02 F1 | 	add	local03, local04
0ba04     04 AA 06 F1 | 	add	local03, #4
0ba08     55 07 68 FC | 	wrlong	#3, local03
0ba0c                 | LR__0981
0ba0c     54 AB 02 F6 | 	mov	local03, local02
0ba10     01 AA 66 F0 | 	shl	local03, #1
0ba14     54 AB 02 F1 | 	add	local03, local02
0ba18     02 AA 66 F0 | 	shl	local03, #2
0ba1c     49 00 00 FF 
0ba20     20 64 06 F1 | 	add	objptr, ##37408
0ba24     32 AB 02 F1 | 	add	local03, objptr
0ba28     55 A7 62 FC | 	wrlong	local01, local03
0ba2c                 | ' compiledline(onlineptr).result.uresult=numpar
0ba2c                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0ba2c     03 00 00 FF 
0ba30     00 64 06 F1 | 	add	objptr, ##1536
0ba34     32 AB 02 FB | 	rdlong	local03, objptr
0ba38     4C 00 00 FF 
0ba3c     20 64 86 F1 | 	sub	objptr, ##38944
0ba40     D7 3A 48 FB | 	callpa	#(@LR__0984-@LR__0982)>>2,fcache_load_ptr_
0ba44                 | LR__0982
0ba44     55 AD 02 F6 | 	mov	local04, local03
0ba48     01 AC 66 F0 | 	shl	local04, #1
0ba4c     55 AD 02 F1 | 	add	local04, local03
0ba50     02 AC 66 F0 | 	shl	local04, #2
0ba54     32 A7 02 F6 | 	mov	local01, objptr
0ba58     49 00 00 FF 
0ba5c     20 A6 06 F1 | 	add	local01, ##37408
0ba60     53 AD 02 F1 | 	add	local04, local01
0ba64     08 AC 06 F1 | 	add	local04, #8
0ba68     56 AD 02 FB | 	rdlong	local04, local04
0ba6c     2D AC 0E F2 | 	cmp	local04, #45 wz
0ba70     38 00 90 5D |  if_ne	jmp	#LR__0983
0ba74     55 AD 02 F6 | 	mov	local04, local03
0ba78     01 AC 66 F0 | 	shl	local04, #1
0ba7c     55 AD 02 F1 | 	add	local04, local03
0ba80     02 AC 66 F0 | 	shl	local04, #2
0ba84     49 00 00 FF 
0ba88     20 64 06 F1 | 	add	objptr, ##37408
0ba8c     32 AD 02 F1 | 	add	local04, objptr
0ba90     03 00 00 FF 
0ba94     00 64 06 F1 | 	add	objptr, ##1536
0ba98     32 A7 02 FB | 	rdlong	local01, objptr
0ba9c     4C 00 00 FF 
0baa0     20 64 86 F1 | 	sub	objptr, ##38944
0baa4     02 A6 86 F1 | 	sub	local01, #2
0baa8     56 A7 62 FC | 	wrlong	local01, local04
0baac                 | LR__0983
0baac     01 AA 86 F1 | 	sub	local03, #1
0bab0     54 AB 52 F2 | 	cmps	local03, local02 wc
0bab4     8C FF 9F 3D |  if_ae	jmp	#LR__0982
0bab8                 | LR__0984
0bab8                 | ' return 0
0bab8     00 7A 06 F6 | 	mov	result1, #0
0babc                 | LR__0985
0babc     E7 F0 03 F6 | 	mov	ptra, fp
0bac0     F2 00 A0 FD | 	call	#popregs_
0bac4                 | _compile_on_ret
0bac4     2D 00 64 FD | 	ret
0bac8                 | 
0bac8                 | ' 
0bac8                 | ' '----- A helper for compile_input and compile_read
0bac8                 | '  
0bac8                 | ' function getaddr() as ulong
0bac8                 | _getaddr
0bac8     0B CA 05 F6 | 	mov	COUNT_, #11
0bacc     E8 00 A0 FD | 	call	#pushregs_
0bad0     38 00 00 FF 
0bad4     E8 65 06 F1 | 	add	objptr, ##29160
0bad8     32 AD 02 FB | 	rdlong	local04, objptr
0badc     03 AC 66 F0 | 	shl	local04, #3
0bae0     02 00 00 FF 
0bae4     38 64 86 F1 | 	sub	objptr, ##1080
0bae8     32 AD 02 F1 | 	add	local04, objptr
0baec     56 AF 02 FB | 	rdlong	local05, local04
0baf0     01 B0 66 F6 | 	neg	local06, #1
0baf4                 | ' 
0baf4                 | ' varname$=lparts(ct).part$
0baf4                 | ' j=-1
0baf4                 | ' 
0baf4                 | ' for i=0 to varnum-1
0baf4     00 B2 06 F6 | 	mov	local07, #0
0baf8     04 64 86 F1 | 	sub	objptr, #4
0bafc     32 B5 02 FB | 	rdlong	local08, objptr
0bb00     36 00 00 FF 
0bb04     AC 65 86 F1 | 	sub	objptr, ##28076
0bb08                 | LR__0990
0bb08     5A B3 52 F2 | 	cmps	local07, local08 wc
0bb0c     34 00 90 3D |  if_ae	jmp	#LR__0991
0bb10                 | '   if variables(i).name=varname$ then j=i : exit
0bb10     59 AD 02 F6 | 	mov	local04, local07
0bb14     04 AC 66 F0 | 	shl	local04, #4
0bb18     32 95 02 F6 | 	mov	arg02, objptr
0bb1c     16 00 00 FF 
0bb20     9C 95 06 F1 | 	add	arg02, ##11676
0bb24     4A AD 02 F1 | 	add	local04, arg02
0bb28     56 93 02 FB | 	rdlong	arg01, local04
0bb2c     57 95 02 F6 | 	mov	arg02, local05
0bb30     98 90 B1 FD | 	call	#__system___string_cmp
0bb34     00 7A 0E F2 | 	cmp	result1, #0 wz
0bb38     59 B1 02 A6 |  if_e	mov	local06, local07
0bb3c     01 B2 06 51 |  if_ne	add	local07, #1
0bb40     C4 FF 9F 5D |  if_ne	jmp	#LR__0990
0bb44                 | LR__0991
0bb44                 | ' if  j=-1 andalso varnum<maxvars then   
0bb44     FF FF 7F FF 
0bb48     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0bb4c     A8 00 90 5D |  if_ne	jmp	#LR__0992
0bb50     36 00 00 FF 
0bb54     AC 65 06 F1 | 	add	objptr, ##28076
0bb58     32 B5 02 FB | 	rdlong	local08, objptr
0bb5c     36 00 00 FF 
0bb60     AC 65 86 F1 | 	sub	objptr, ##28076
0bb64     02 00 00 FF 
0bb68     00 B4 56 F2 | 	cmps	local08, ##1024 wc
0bb6c     88 00 90 3D |  if_ae	jmp	#LR__0992
0bb70     36 00 00 FF 
0bb74     AC 65 06 F1 | 	add	objptr, ##28076
0bb78     32 AD 02 FB | 	rdlong	local04, objptr
0bb7c     04 AC 66 F0 | 	shl	local04, #4
0bb80     20 00 00 FF 
0bb84     10 64 86 F1 | 	sub	objptr, ##16400
0bb88     32 AD 02 F1 | 	add	local04, objptr
0bb8c     56 AF 62 FC | 	wrlong	local05, local04
0bb90     20 00 00 FF 
0bb94     10 64 06 F1 | 	add	objptr, ##16400
0bb98     32 AD 02 FB | 	rdlong	local04, objptr
0bb9c     04 AC 66 F0 | 	shl	local04, #4
0bba0     20 00 00 FF 
0bba4     10 64 86 F1 | 	sub	objptr, ##16400
0bba8     32 AD 02 F1 | 	add	local04, objptr
0bbac     04 AC 06 F1 | 	add	local04, #4
0bbb0     56 01 68 FC | 	wrlong	#0, local04
0bbb4     20 00 00 FF 
0bbb8     10 64 06 F1 | 	add	objptr, ##16400
0bbbc     32 AD 02 FB | 	rdlong	local04, objptr
0bbc0     04 AC 66 F0 | 	shl	local04, #4
0bbc4     20 00 00 FF 
0bbc8     10 64 86 F1 | 	sub	objptr, ##16400
0bbcc     32 AD 02 F1 | 	add	local04, objptr
0bbd0     0C AC 06 F1 | 	add	local04, #12
0bbd4     56 39 68 FC | 	wrlong	#28, local04
0bbd8     20 00 00 FF 
0bbdc     10 64 06 F1 | 	add	objptr, ##16400
0bbe0     32 B5 02 FB | 	rdlong	local08, objptr
0bbe4     5A B1 02 F6 | 	mov	local06, local08
0bbe8     01 B4 06 F1 | 	add	local08, #1
0bbec     32 B5 62 FC | 	wrlong	local08, objptr
0bbf0     36 00 00 FF 
0bbf4     AC 65 86 F1 | 	sub	objptr, ##28076
0bbf8                 | LR__0992
0bbf8     00 B2 06 F6 | 	mov	local07, #0
0bbfc                 | ' numpar=0
0bbfc                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0bbfc     38 00 00 FF 
0bc00     E8 65 06 F1 | 	add	objptr, ##29160
0bc04     32 AD 02 FB | 	rdlong	local04, objptr
0bc08     01 AC 06 F1 | 	add	local04, #1
0bc0c     03 AC 66 F0 | 	shl	local04, #3
0bc10     02 00 00 FF 
0bc14     38 64 86 F1 | 	sub	objptr, ##1080
0bc18     32 AD 02 F1 | 	add	local04, objptr
0bc1c     04 AC 06 F1 | 	add	local04, #4
0bc20     56 B5 02 FB | 	rdlong	local08, local04
0bc24     15 B4 0E F2 | 	cmp	local08, #21 wz
0bc28     36 00 00 FF 
0bc2c     B0 65 86 F1 | 	sub	objptr, ##28080
0bc30     54 01 90 5D |  if_ne	jmp	#LR__0997
0bc34     38 00 00 FF 
0bc38     E8 65 06 F1 | 	add	objptr, ##29160
0bc3c     32 B7 02 FB | 	rdlong	local09, objptr
0bc40     01 B6 06 F1 | 	add	local09, #1
0bc44     32 B7 62 FC | 	wrlong	local09, objptr
0bc48     38 00 00 FF 
0bc4c     E8 65 86 F1 | 	sub	objptr, ##29160
0bc50                 | '   ct+=1 											' omit this lpar, this is for expr list
0bc50                 | '   do
0bc50                 | LR__0993
0bc50     38 00 00 FF 
0bc54     E8 65 06 F1 | 	add	objptr, ##29160
0bc58     32 AD 02 FB | 	rdlong	local04, objptr
0bc5c     01 AC 06 F1 | 	add	local04, #1
0bc60     32 AD 62 FC | 	wrlong	local04, objptr
0bc64                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0bc64                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0bc64     03 AC 66 F0 | 	shl	local04, #3
0bc68     02 00 00 FF 
0bc6c     38 64 86 F1 | 	sub	objptr, ##1080
0bc70     32 AD 02 F1 | 	add	local04, objptr
0bc74     04 AC 06 F1 | 	add	local04, #4
0bc78     56 B7 02 FB | 	rdlong	local09, local04
0bc7c     15 B6 0E F2 | 	cmp	local09, #21 wz
0bc80     36 00 00 FF 
0bc84     B0 65 86 F1 | 	sub	objptr, ##28080
0bc88     44 00 90 5D |  if_ne	jmp	#LR__0994
0bc8c     38 00 00 FF 
0bc90     E8 65 06 F1 | 	add	objptr, ##29160
0bc94     32 B7 02 FB | 	rdlong	local09, objptr
0bc98     01 B6 06 F1 | 	add	local09, #1
0bc9c     32 B7 62 FC | 	wrlong	local09, objptr
0bca0     38 00 00 FF 
0bca4     E8 65 86 F1 | 	sub	objptr, ##29160
0bca8     AC 01 B0 FD | 	call	#_expr
0bcac     3D B9 02 F6 | 	mov	local10, result1
0bcb0     38 00 00 FF 
0bcb4     E8 65 06 F1 | 	add	objptr, ##29160
0bcb8     32 B7 02 FB | 	rdlong	local09, objptr
0bcbc     01 B6 06 F1 | 	add	local09, #1
0bcc0     32 B7 62 FC | 	wrlong	local09, objptr
0bcc4     38 00 00 FF 
0bcc8     E8 65 86 F1 | 	sub	objptr, ##29160
0bccc     08 00 90 FD | 	jmp	#LR__0995
0bcd0                 | LR__0994
0bcd0     84 01 B0 FD | 	call	#_expr
0bcd4     3D B9 02 F6 | 	mov	local10, result1
0bcd8                 | LR__0995
0bcd8                 | '     if err>0 then return err
0bcd8     01 B8 56 F2 | 	cmps	local10, #1 wc
0bcdc     5C 7B 02 36 |  if_ae	mov	result1, local10
0bce0     68 01 90 3D |  if_ae	jmp	#LR__0998
0bce4     01 B2 06 F1 | 	add	local07, #1
0bce8     38 00 00 FF 
0bcec     E8 65 06 F1 | 	add	objptr, ##29160
0bcf0     32 AD 02 FB | 	rdlong	local04, objptr
0bcf4     03 AC 66 F0 | 	shl	local04, #3
0bcf8     02 00 00 FF 
0bcfc     38 64 86 F1 | 	sub	objptr, ##1080
0bd00     32 AD 02 F1 | 	add	local04, objptr
0bd04     04 AC 06 F1 | 	add	local04, #4
0bd08     56 B9 02 FB | 	rdlong	local10, local04
0bd0c     14 B8 0E F2 | 	cmp	local10, #20 wz
0bd10     36 00 00 FF 
0bd14     B0 65 86 F1 | 	sub	objptr, ##28080
0bd18     34 00 90 AD |  if_e	jmp	#LR__0996
0bd1c     38 00 00 FF 
0bd20     E8 65 06 F1 | 	add	objptr, ##29160
0bd24     32 B9 02 FB | 	rdlong	local10, objptr
0bd28     03 B8 66 F0 | 	shl	local10, #3
0bd2c     02 00 00 FF 
0bd30     38 64 86 F1 | 	sub	objptr, ##1080
0bd34     32 B9 02 F1 | 	add	local10, objptr
0bd38     04 B8 06 F1 | 	add	local10, #4
0bd3c     5C B9 02 FB | 	rdlong	local10, local10
0bd40     FE B9 0E F2 | 	cmp	local10, #510 wz
0bd44     36 00 00 FF 
0bd48     B0 65 86 F1 | 	sub	objptr, ##28080
0bd4c     00 FF 9F 5D |  if_ne	jmp	#LR__0993
0bd50                 | LR__0996
0bd50                 | '     if lparts(ct).token=token_end then return 14
0bd50     38 00 00 FF 
0bd54     E8 65 06 F1 | 	add	objptr, ##29160
0bd58     32 AD 02 FB | 	rdlong	local04, objptr
0bd5c     03 AC 66 F0 | 	shl	local04, #3
0bd60     02 00 00 FF 
0bd64     38 64 86 F1 | 	sub	objptr, ##1080
0bd68     32 AD 02 F1 | 	add	local04, objptr
0bd6c     04 AC 06 F1 | 	add	local04, #4
0bd70     56 B9 02 FB | 	rdlong	local10, local04
0bd74     FE B9 0E F2 | 	cmp	local10, #510 wz
0bd78     36 00 00 FF 
0bd7c     B0 65 86 F1 | 	sub	objptr, ##28080
0bd80     0E 7A 06 A6 |  if_e	mov	result1, #14
0bd84     C4 00 90 AD |  if_e	jmp	#LR__0998
0bd88                 | LR__0997
0bd88     59 A9 02 F6 | 	mov	local02, local07
0bd8c     12 AA 06 F6 | 	mov	local03, #18
0bd90     58 A7 02 F6 | 	mov	local01, local06
0bd94     53 B7 02 F6 | 	mov	local09, local01
0bd98     54 BB 02 F6 | 	mov	local11, local02
0bd9c     55 A7 02 F6 | 	mov	local01, local03
0bda0     4C 00 00 FF 
0bda4     20 64 06 F1 | 	add	objptr, ##38944
0bda8     32 B9 02 FB | 	rdlong	local10, objptr
0bdac     5C B3 02 F6 | 	mov	local07, local10
0bdb0     01 B2 66 F0 | 	shl	local07, #1
0bdb4     5C B3 02 F1 | 	add	local07, local10
0bdb8     02 B2 66 F0 | 	shl	local07, #2
0bdbc     03 00 00 FF 
0bdc0     00 64 86 F1 | 	sub	objptr, ##1536
0bdc4     32 B3 02 F1 | 	add	local07, objptr
0bdc8     59 B7 62 FC | 	wrlong	local09, local07
0bdcc     03 00 00 FF 
0bdd0     00 64 06 F1 | 	add	objptr, ##1536
0bdd4     32 B9 02 FB | 	rdlong	local10, objptr
0bdd8     5C B7 02 F6 | 	mov	local09, local10
0bddc     01 B6 66 F0 | 	shl	local09, #1
0bde0     5C B7 02 F1 | 	add	local09, local10
0bde4     02 B6 66 F0 | 	shl	local09, #2
0bde8     03 00 00 FF 
0bdec     00 64 86 F1 | 	sub	objptr, ##1536
0bdf0     32 B7 02 F1 | 	add	local09, objptr
0bdf4     04 B6 06 F1 | 	add	local09, #4
0bdf8     5B BB 62 FC | 	wrlong	local11, local09
0bdfc     03 00 00 FF 
0be00     00 64 06 F1 | 	add	objptr, ##1536
0be04     32 BB 02 FB | 	rdlong	local11, objptr
0be08     5D B9 02 F6 | 	mov	local10, local11
0be0c     01 B8 66 F0 | 	shl	local10, #1
0be10     5D B9 02 F1 | 	add	local10, local11
0be14     02 B8 66 F0 | 	shl	local10, #2
0be18     03 00 00 FF 
0be1c     00 64 86 F1 | 	sub	objptr, ##1536
0be20     32 B9 02 F1 | 	add	local10, objptr
0be24     08 B8 06 F1 | 	add	local10, #8
0be28     5C A7 62 FC | 	wrlong	local01, local10
0be2c     03 00 00 FF 
0be30     00 64 06 F1 | 	add	objptr, ##1536
0be34     32 B7 02 FB | 	rdlong	local09, objptr
0be38     01 B6 06 F1 | 	add	local09, #1
0be3c     32 B7 62 FC | 	wrlong	local09, objptr
0be40     4C 00 00 FF 
0be44     20 64 86 F1 | 	sub	objptr, ##38944
0be48                 | ' t2.result.twowords(1)=numpar
0be48                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0be48                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0be48                 | ' return 0
0be48     00 7A 06 F6 | 	mov	result1, #0
0be4c                 | LR__0998
0be4c     E7 F0 03 F6 | 	mov	ptra, fp
0be50     F2 00 A0 FD | 	call	#popregs_
0be54                 | _getaddr_ret
0be54     2D 00 64 FD | 	ret
0be58                 | 
0be58                 | ' 
0be58                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' '--------------------------------------------- 
0be58                 | ' 
0be58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0be58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' 
0be58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' '
0be58                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0be58                 | ' '
0be58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' 
0be58                 | ' function expr() as ulong 
0be58                 | _expr
0be58     07 CA 05 F6 | 	mov	COUNT_, #7
0be5c     E8 00 A0 FD | 	call	#pushregs_
0be60                 | _expr_enter
0be60     38 00 00 FF 
0be64     E8 65 06 F1 | 	add	objptr, ##29160
0be68     32 AD 02 FB | 	rdlong	local04, objptr
0be6c     03 AC 66 F0 | 	shl	local04, #3
0be70     02 00 00 FF 
0be74     38 64 86 F1 | 	sub	objptr, ##1080
0be78     32 AD 02 F1 | 	add	local04, objptr
0be7c     04 AC 06 F1 | 	add	local04, #4
0be80     56 AF 02 FB | 	rdlong	local05, local04
0be84                 | ' 
0be84                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0be84     FE AF 0E F2 | 	cmp	local05, #510 wz
0be88     36 00 00 FF 
0be8c     B0 65 86 F1 | 	sub	objptr, ##28080
0be90     C4 00 90 5D |  if_ne	jmp	#LR__1000
0be94     1D A6 06 F6 | 	mov	local01, #29
0be98     FF AA 06 F6 | 	mov	local03, #255
0be9c     53 B1 02 F6 | 	mov	local06, local01
0bea0     54 B3 02 F6 | 	mov	local07, local02
0bea4     55 A7 02 F6 | 	mov	local01, local03
0bea8     4C 00 00 FF 
0beac     20 64 06 F1 | 	add	objptr, ##38944
0beb0     32 AF 02 FB | 	rdlong	local05, objptr
0beb4     57 AD 02 F6 | 	mov	local04, local05
0beb8     01 AC 66 F0 | 	shl	local04, #1
0bebc     57 AD 02 F1 | 	add	local04, local05
0bec0     02 AC 66 F0 | 	shl	local04, #2
0bec4     03 00 00 FF 
0bec8     00 64 86 F1 | 	sub	objptr, ##1536
0becc     32 AD 02 F1 | 	add	local04, objptr
0bed0     56 B1 62 FC | 	wrlong	local06, local04
0bed4     03 00 00 FF 
0bed8     00 64 06 F1 | 	add	objptr, ##1536
0bedc     32 B1 02 FB | 	rdlong	local06, objptr
0bee0     58 AF 02 F6 | 	mov	local05, local06
0bee4     01 AE 66 F0 | 	shl	local05, #1
0bee8     58 AF 02 F1 | 	add	local05, local06
0beec     02 AE 66 F0 | 	shl	local05, #2
0bef0     03 00 00 FF 
0bef4     00 64 86 F1 | 	sub	objptr, ##1536
0bef8     32 AF 02 F1 | 	add	local05, objptr
0befc     04 AE 06 F1 | 	add	local05, #4
0bf00     57 B3 62 FC | 	wrlong	local07, local05
0bf04     03 00 00 FF 
0bf08     00 64 06 F1 | 	add	objptr, ##1536
0bf0c     32 B3 02 FB | 	rdlong	local07, objptr
0bf10     59 B1 02 F6 | 	mov	local06, local07
0bf14     01 B0 66 F0 | 	shl	local06, #1
0bf18     59 B1 02 F1 | 	add	local06, local07
0bf1c     02 B0 66 F0 | 	shl	local06, #2
0bf20     03 00 00 FF 
0bf24     00 64 86 F1 | 	sub	objptr, ##1536
0bf28     32 B1 02 F1 | 	add	local06, objptr
0bf2c     08 B0 06 F1 | 	add	local06, #8
0bf30     58 A7 62 FC | 	wrlong	local01, local06
0bf34     03 00 00 FF 
0bf38     00 64 06 F1 | 	add	objptr, ##1536
0bf3c     32 B1 02 FB | 	rdlong	local06, objptr
0bf40     01 B0 06 F1 | 	add	local06, #1
0bf44     32 B1 62 FC | 	wrlong	local06, objptr
0bf48     4C 00 00 FF 
0bf4c     20 64 86 F1 | 	sub	objptr, ##38944
0bf50     1D 7A 06 F6 | 	mov	result1, #29
0bf54     64 01 90 FD | 	jmp	#LR__1003
0bf58                 | LR__1000
0bf58     00 A6 06 F6 | 	mov	local01, #0
0bf5c     68 01 B0 FD | 	call	#_addsub
0bf60                 | ' t3.result.uresult=0
0bf60                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0bf60                 | ' if err>0 then return err
0bf60     01 7A 16 F2 | 	cmp	result1, #1 wc
0bf64     54 01 90 3D |  if_ae	jmp	#LR__1003
0bf68     38 00 00 FF 
0bf6c     E8 65 06 F1 | 	add	objptr, ##29160
0bf70     32 AD 02 FB | 	rdlong	local04, objptr
0bf74     03 AC 66 F0 | 	shl	local04, #3
0bf78     02 00 00 FF 
0bf7c     38 64 86 F1 | 	sub	objptr, ##1080
0bf80     32 AD 02 F1 | 	add	local04, objptr
0bf84     04 AC 06 F1 | 	add	local04, #4
0bf88     56 AF 02 FB | 	rdlong	local05, local04
0bf8c                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0bf8c                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0bf8c     36 00 00 FF 
0bf90     B0 65 86 F1 | 	sub	objptr, ##28080
0bf94                 | LR__1001
0bf94     1B AE 0E F2 | 	cmp	local05, #27 wz
0bf98     0F AE 0E 52 |  if_ne	cmp	local05, #15 wz
0bf9c     10 AE 0E 52 |  if_ne	cmp	local05, #16 wz
0bfa0     27 AE 0E 52 |  if_ne	cmp	local05, #39 wz
0bfa4     26 AE 0E 52 |  if_ne	cmp	local05, #38 wz
0bfa8     2A AE 0E 52 |  if_ne	cmp	local05, #42 wz
0bfac     08 01 90 5D |  if_ne	jmp	#LR__1002
0bfb0     38 00 00 FF 
0bfb4     E8 65 06 F1 | 	add	objptr, ##29160
0bfb8     32 B1 02 FB | 	rdlong	local06, objptr
0bfbc     01 B0 06 F1 | 	add	local06, #1
0bfc0     32 B1 62 FC | 	wrlong	local06, objptr
0bfc4     38 00 00 FF 
0bfc8     E8 65 86 F1 | 	sub	objptr, ##29160
0bfcc     F8 00 B0 FD | 	call	#_addsub
0bfd0                 | '   ct+=1
0bfd0                 | '   err=addsub() : if err>0 then return err
0bfd0     01 7A 16 F2 | 	cmp	result1, #1 wc
0bfd4     E4 00 90 3D |  if_ae	jmp	#LR__1003
0bfd8     57 AB 02 F6 | 	mov	local03, local05
0bfdc     53 B1 02 F6 | 	mov	local06, local01
0bfe0     54 B3 02 F6 | 	mov	local07, local02
0bfe4     55 AF 02 F6 | 	mov	local05, local03
0bfe8     4C 00 00 FF 
0bfec     20 64 06 F1 | 	add	objptr, ##38944
0bff0     32 AD 02 FB | 	rdlong	local04, objptr
0bff4     56 7B 02 F6 | 	mov	result1, local04
0bff8     01 7A 66 F0 | 	shl	result1, #1
0bffc     56 7B 02 F1 | 	add	result1, local04
0c000     02 7A 66 F0 | 	shl	result1, #2
0c004     03 00 00 FF 
0c008     00 64 86 F1 | 	sub	objptr, ##1536
0c00c     32 7B 02 F1 | 	add	result1, objptr
0c010     3D B1 62 FC | 	wrlong	local06, result1
0c014     03 00 00 FF 
0c018     00 64 06 F1 | 	add	objptr, ##1536
0c01c     32 B1 02 FB | 	rdlong	local06, objptr
0c020     58 AD 02 F6 | 	mov	local04, local06
0c024     01 AC 66 F0 | 	shl	local04, #1
0c028     58 AD 02 F1 | 	add	local04, local06
0c02c     02 AC 66 F0 | 	shl	local04, #2
0c030     03 00 00 FF 
0c034     00 64 86 F1 | 	sub	objptr, ##1536
0c038     32 AD 02 F1 | 	add	local04, objptr
0c03c     04 AC 06 F1 | 	add	local04, #4
0c040     56 B3 62 FC | 	wrlong	local07, local04
0c044     03 00 00 FF 
0c048     00 64 06 F1 | 	add	objptr, ##1536
0c04c     32 B3 02 FB | 	rdlong	local07, objptr
0c050     59 B1 02 F6 | 	mov	local06, local07
0c054     01 B0 66 F0 | 	shl	local06, #1
0c058     59 B1 02 F1 | 	add	local06, local07
0c05c     02 B0 66 F0 | 	shl	local06, #2
0c060     03 00 00 FF 
0c064     00 64 86 F1 | 	sub	objptr, ##1536
0c068     32 B1 02 F1 | 	add	local06, objptr
0c06c     08 B0 06 F1 | 	add	local06, #8
0c070     58 AF 62 FC | 	wrlong	local05, local06
0c074     03 00 00 FF 
0c078     00 64 06 F1 | 	add	objptr, ##1536
0c07c     32 B1 02 FB | 	rdlong	local06, objptr
0c080     01 B0 06 F1 | 	add	local06, #1
0c084     32 B1 62 FC | 	wrlong	local06, objptr
0c088     13 00 00 FF 
0c08c     38 64 86 F1 | 	sub	objptr, ##9784
0c090     32 AD 02 FB | 	rdlong	local04, objptr
0c094     03 AC 66 F0 | 	shl	local04, #3
0c098     02 00 00 FF 
0c09c     38 64 86 F1 | 	sub	objptr, ##1080
0c0a0     32 AD 02 F1 | 	add	local04, objptr
0c0a4     04 AC 06 F1 | 	add	local04, #4
0c0a8     56 AF 02 FB | 	rdlong	local05, local04
0c0ac     36 00 00 FF 
0c0b0     B0 65 86 F1 | 	sub	objptr, ##28080
0c0b4     DC FE 9F FD | 	jmp	#LR__1001
0c0b8                 | LR__1002
0c0b8                 | ' return 0  
0c0b8     00 7A 06 F6 | 	mov	result1, #0
0c0bc                 | LR__1003
0c0bc     E7 F0 03 F6 | 	mov	ptra, fp
0c0c0     F2 00 A0 FD | 	call	#popregs_
0c0c4                 | _expr_ret
0c0c4     2D 00 64 FD | 	ret
0c0c8                 | 
0c0c8                 | ' 
0c0c8                 | ' ' Second level operators : add, sub, logic
0c0c8                 | ' 
0c0c8                 | ' function addsub() as ulong
0c0c8                 | _addsub
0c0c8     07 CA 05 F6 | 	mov	COUNT_, #7
0c0cc     E8 00 A0 FD | 	call	#pushregs_
0c0d0                 | _addsub_enter
0c0d0     00 A6 06 F6 | 	mov	local01, #0
0c0d4     60 01 B0 FD | 	call	#_muldiv
0c0d8                 | ' 
0c0d8                 | ' t3.result.uresult=0
0c0d8                 | ' err=muldiv() : if err>0 then return err           			 
0c0d8     01 7A 16 F2 | 	cmp	result1, #1 wc
0c0dc     4C 01 90 3D |  if_ae	jmp	#LR__1012
0c0e0     38 00 00 FF 
0c0e4     E8 65 06 F1 | 	add	objptr, ##29160
0c0e8     32 AD 02 FB | 	rdlong	local04, objptr
0c0ec     03 AC 66 F0 | 	shl	local04, #3
0c0f0     02 00 00 FF 
0c0f4     38 64 86 F1 | 	sub	objptr, ##1080
0c0f8     32 AD 02 F1 | 	add	local04, objptr
0c0fc     04 AC 06 F1 | 	add	local04, #4
0c100     56 AF 02 FB | 	rdlong	local05, local04
0c104                 | ' op = lparts(ct).token				 
0c104                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0c104     36 00 00 FF 
0c108     B0 65 86 F1 | 	sub	objptr, ##28080
0c10c                 | LR__1010
0c10c     01 AE 0E F2 | 	cmp	local05, #1 wz
0c110     02 AE 0E 52 |  if_ne	cmp	local05, #2 wz
0c114     07 AE 0E 52 |  if_ne	cmp	local05, #7 wz
0c118     03 AE 0E 52 |  if_ne	cmp	local05, #3 wz
0c11c     08 01 90 5D |  if_ne	jmp	#LR__1011
0c120     38 00 00 FF 
0c124     E8 65 06 F1 | 	add	objptr, ##29160
0c128     32 AD 02 FB | 	rdlong	local04, objptr
0c12c     01 AC 06 F1 | 	add	local04, #1
0c130     32 AD 62 FC | 	wrlong	local04, objptr
0c134     38 00 00 FF 
0c138     E8 65 86 F1 | 	sub	objptr, ##29160
0c13c     F8 00 B0 FD | 	call	#_muldiv
0c140                 | '   ct+=1
0c140                 | '   err=muldiv() : if err>0 then return err   
0c140     01 7A 16 F2 | 	cmp	result1, #1 wc
0c144     E4 00 90 3D |  if_ae	jmp	#LR__1012
0c148     57 AB 02 F6 | 	mov	local03, local05
0c14c     53 B1 02 F6 | 	mov	local06, local01
0c150     54 B3 02 F6 | 	mov	local07, local02
0c154     55 AF 02 F6 | 	mov	local05, local03
0c158     4C 00 00 FF 
0c15c     20 64 06 F1 | 	add	objptr, ##38944
0c160     32 AD 02 FB | 	rdlong	local04, objptr
0c164     56 7B 02 F6 | 	mov	result1, local04
0c168     01 7A 66 F0 | 	shl	result1, #1
0c16c     56 7B 02 F1 | 	add	result1, local04
0c170     02 7A 66 F0 | 	shl	result1, #2
0c174     03 00 00 FF 
0c178     00 64 86 F1 | 	sub	objptr, ##1536
0c17c     32 7B 02 F1 | 	add	result1, objptr
0c180     3D B1 62 FC | 	wrlong	local06, result1
0c184     03 00 00 FF 
0c188     00 64 06 F1 | 	add	objptr, ##1536
0c18c     32 B1 02 FB | 	rdlong	local06, objptr
0c190     58 AD 02 F6 | 	mov	local04, local06
0c194     01 AC 66 F0 | 	shl	local04, #1
0c198     58 AD 02 F1 | 	add	local04, local06
0c19c     02 AC 66 F0 | 	shl	local04, #2
0c1a0     03 00 00 FF 
0c1a4     00 64 86 F1 | 	sub	objptr, ##1536
0c1a8     32 AD 02 F1 | 	add	local04, objptr
0c1ac     04 AC 06 F1 | 	add	local04, #4
0c1b0     56 B3 62 FC | 	wrlong	local07, local04
0c1b4     03 00 00 FF 
0c1b8     00 64 06 F1 | 	add	objptr, ##1536
0c1bc     32 B3 02 FB | 	rdlong	local07, objptr
0c1c0     59 B1 02 F6 | 	mov	local06, local07
0c1c4     01 B0 66 F0 | 	shl	local06, #1
0c1c8     59 B1 02 F1 | 	add	local06, local07
0c1cc     02 B0 66 F0 | 	shl	local06, #2
0c1d0     03 00 00 FF 
0c1d4     00 64 86 F1 | 	sub	objptr, ##1536
0c1d8     32 B1 02 F1 | 	add	local06, objptr
0c1dc     08 B0 06 F1 | 	add	local06, #8
0c1e0     58 AF 62 FC | 	wrlong	local05, local06
0c1e4     03 00 00 FF 
0c1e8     00 64 06 F1 | 	add	objptr, ##1536
0c1ec     32 B1 02 FB | 	rdlong	local06, objptr
0c1f0     01 B0 06 F1 | 	add	local06, #1
0c1f4     32 B1 62 FC | 	wrlong	local06, objptr
0c1f8     13 00 00 FF 
0c1fc     38 64 86 F1 | 	sub	objptr, ##9784
0c200     32 AD 02 FB | 	rdlong	local04, objptr
0c204     03 AC 66 F0 | 	shl	local04, #3
0c208     02 00 00 FF 
0c20c     38 64 86 F1 | 	sub	objptr, ##1080
0c210     32 AD 02 F1 | 	add	local04, objptr
0c214     04 AC 06 F1 | 	add	local04, #4
0c218     56 AF 02 FB | 	rdlong	local05, local04
0c21c     36 00 00 FF 
0c220     B0 65 86 F1 | 	sub	objptr, ##28080
0c224     E4 FE 9F FD | 	jmp	#LR__1010
0c228                 | LR__1011
0c228                 | ' return 0
0c228     00 7A 06 F6 | 	mov	result1, #0
0c22c                 | LR__1012
0c22c     E7 F0 03 F6 | 	mov	ptra, fp
0c230     F2 00 A0 FD | 	call	#popregs_
0c234                 | _addsub_ret
0c234     2D 00 64 FD | 	ret
0c238                 | 
0c238                 | ' 
0c238                 | ' ' Third level operators : mul,div,shift,power
0c238                 | ' 
0c238                 | ' function muldiv() as ulong
0c238                 | _muldiv
0c238     07 CA 05 F6 | 	mov	COUNT_, #7
0c23c     E8 00 A0 FD | 	call	#pushregs_
0c240                 | _muldiv_enter
0c240     00 A6 06 F6 | 	mov	local01, #0
0c244     6C 01 B0 FD | 	call	#_getvalue
0c248                 | ' 
0c248                 | ' t3.result.uresult=0
0c248                 | ' err=getvalue() : if err>0 then return err     
0c248     01 7A 16 F2 | 	cmp	result1, #1 wc
0c24c     58 01 90 3D |  if_ae	jmp	#LR__1022
0c250     38 00 00 FF 
0c254     E8 65 06 F1 | 	add	objptr, ##29160
0c258     32 AD 02 FB | 	rdlong	local04, objptr
0c25c     03 AC 66 F0 | 	shl	local04, #3
0c260     02 00 00 FF 
0c264     38 64 86 F1 | 	sub	objptr, ##1080
0c268     32 AD 02 F1 | 	add	local04, objptr
0c26c     04 AC 06 F1 | 	add	local04, #4
0c270     56 AF 02 FB | 	rdlong	local05, local04
0c274                 | ' op = lparts(ct).token
0c274                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c274     36 00 00 FF 
0c278     B0 65 86 F1 | 	sub	objptr, ##28080
0c27c                 | LR__1020
0c27c     05 AE 0E F2 | 	cmp	local05, #5 wz
0c280     08 AE 0E 52 |  if_ne	cmp	local05, #8 wz
0c284     06 AE 0E 52 |  if_ne	cmp	local05, #6 wz
0c288     09 AE 0E 52 |  if_ne	cmp	local05, #9 wz
0c28c     0A AE 0E 52 |  if_ne	cmp	local05, #10 wz
0c290     0B AE 0E 52 |  if_ne	cmp	local05, #11 wz
0c294     0C AE 0E 52 |  if_ne	cmp	local05, #12 wz
0c298     08 01 90 5D |  if_ne	jmp	#LR__1021
0c29c     38 00 00 FF 
0c2a0     E8 65 06 F1 | 	add	objptr, ##29160
0c2a4     32 AD 02 FB | 	rdlong	local04, objptr
0c2a8     01 AC 06 F1 | 	add	local04, #1
0c2ac     32 AD 62 FC | 	wrlong	local04, objptr
0c2b0     38 00 00 FF 
0c2b4     E8 65 86 F1 | 	sub	objptr, ##29160
0c2b8     F8 00 B0 FD | 	call	#_getvalue
0c2bc                 | '   ct+=1
0c2bc                 | '   err=getvalue() :if err>0 then return err   
0c2bc     01 7A 16 F2 | 	cmp	result1, #1 wc
0c2c0     E4 00 90 3D |  if_ae	jmp	#LR__1022
0c2c4     57 AB 02 F6 | 	mov	local03, local05
0c2c8     53 B1 02 F6 | 	mov	local06, local01
0c2cc     54 B3 02 F6 | 	mov	local07, local02
0c2d0     55 AF 02 F6 | 	mov	local05, local03
0c2d4     4C 00 00 FF 
0c2d8     20 64 06 F1 | 	add	objptr, ##38944
0c2dc     32 AD 02 FB | 	rdlong	local04, objptr
0c2e0     56 7B 02 F6 | 	mov	result1, local04
0c2e4     01 7A 66 F0 | 	shl	result1, #1
0c2e8     56 7B 02 F1 | 	add	result1, local04
0c2ec     02 7A 66 F0 | 	shl	result1, #2
0c2f0     03 00 00 FF 
0c2f4     00 64 86 F1 | 	sub	objptr, ##1536
0c2f8     32 7B 02 F1 | 	add	result1, objptr
0c2fc     3D B1 62 FC | 	wrlong	local06, result1
0c300     03 00 00 FF 
0c304     00 64 06 F1 | 	add	objptr, ##1536
0c308     32 B1 02 FB | 	rdlong	local06, objptr
0c30c     58 AD 02 F6 | 	mov	local04, local06
0c310     01 AC 66 F0 | 	shl	local04, #1
0c314     58 AD 02 F1 | 	add	local04, local06
0c318     02 AC 66 F0 | 	shl	local04, #2
0c31c     03 00 00 FF 
0c320     00 64 86 F1 | 	sub	objptr, ##1536
0c324     32 AD 02 F1 | 	add	local04, objptr
0c328     04 AC 06 F1 | 	add	local04, #4
0c32c     56 B3 62 FC | 	wrlong	local07, local04
0c330     03 00 00 FF 
0c334     00 64 06 F1 | 	add	objptr, ##1536
0c338     32 B3 02 FB | 	rdlong	local07, objptr
0c33c     59 B1 02 F6 | 	mov	local06, local07
0c340     01 B0 66 F0 | 	shl	local06, #1
0c344     59 B1 02 F1 | 	add	local06, local07
0c348     02 B0 66 F0 | 	shl	local06, #2
0c34c     03 00 00 FF 
0c350     00 64 86 F1 | 	sub	objptr, ##1536
0c354     32 B1 02 F1 | 	add	local06, objptr
0c358     08 B0 06 F1 | 	add	local06, #8
0c35c     58 AF 62 FC | 	wrlong	local05, local06
0c360     03 00 00 FF 
0c364     00 64 06 F1 | 	add	objptr, ##1536
0c368     32 B1 02 FB | 	rdlong	local06, objptr
0c36c     01 B0 06 F1 | 	add	local06, #1
0c370     32 B1 62 FC | 	wrlong	local06, objptr
0c374     13 00 00 FF 
0c378     38 64 86 F1 | 	sub	objptr, ##9784
0c37c     32 AD 02 FB | 	rdlong	local04, objptr
0c380     03 AC 66 F0 | 	shl	local04, #3
0c384     02 00 00 FF 
0c388     38 64 86 F1 | 	sub	objptr, ##1080
0c38c     32 AD 02 F1 | 	add	local04, objptr
0c390     04 AC 06 F1 | 	add	local04, #4
0c394     56 AF 02 FB | 	rdlong	local05, local04
0c398     36 00 00 FF 
0c39c     B0 65 86 F1 | 	sub	objptr, ##28080
0c3a0     D8 FE 9F FD | 	jmp	#LR__1020
0c3a4                 | LR__1021
0c3a4                 | ' return 0
0c3a4     00 7A 06 F6 | 	mov	result1, #0
0c3a8                 | LR__1022
0c3a8     E7 F0 03 F6 | 	mov	ptra, fp
0c3ac     F2 00 A0 FD | 	call	#popregs_
0c3b0                 | _muldiv_ret
0c3b0     2D 00 64 FD | 	ret
0c3b4                 | 
0c3b4                 | ' 
0c3b4                 | ' ' Get a value for operations
0c3b4                 | ' 
0c3b4                 | ' function getvalue()  as ulong
0c3b4                 | _getvalue
0c3b4     0B CA 05 F6 | 	mov	COUNT_, #11
0c3b8     E8 00 A0 FD | 	call	#pushregs_
0c3bc                 | _getvalue_enter
0c3bc     01 AC 06 F6 | 	mov	local04, #1
0c3c0     00 A6 06 F6 | 	mov	local01, #0
0c3c4     1D AA 06 F6 | 	mov	local03, #29
0c3c8     38 00 00 FF 
0c3cc     E8 65 06 F1 | 	add	objptr, ##29160
0c3d0     32 97 02 FB | 	rdlong	arg03, objptr
0c3d4     03 96 66 F0 | 	shl	arg03, #3
0c3d8     02 00 00 FF 
0c3dc     38 64 86 F1 | 	sub	objptr, ##1080
0c3e0     32 97 02 F1 | 	add	arg03, objptr
0c3e4     04 96 06 F1 | 	add	arg03, #4
0c3e8     4B AF 02 FB | 	rdlong	local05, arg03
0c3ec                 | ' 
0c3ec                 | ' m=1											' for negative numbers
0c3ec                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c3ec                 | ' op=lparts(ct).token
0c3ec                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c3ec     02 AE 0E F2 | 	cmp	local05, #2 wz
0c3f0     36 00 00 FF 
0c3f4     B0 65 86 F1 | 	sub	objptr, ##28080
0c3f8     38 00 90 5D |  if_ne	jmp	#LR__1030
0c3fc     01 AC 66 F6 | 	neg	local04, #1
0c400     38 00 00 FF 
0c404     E8 65 06 F1 | 	add	objptr, ##29160
0c408     32 AF 02 FB | 	rdlong	local05, objptr
0c40c     01 AE 06 F1 | 	add	local05, #1
0c410     32 AF 62 FC | 	wrlong	local05, objptr
0c414     03 AE 66 F0 | 	shl	local05, #3
0c418     02 00 00 FF 
0c41c     38 64 86 F1 | 	sub	objptr, ##1080
0c420     32 AF 02 F1 | 	add	local05, objptr
0c424     04 AE 06 F1 | 	add	local05, #4
0c428     57 AF 02 FB | 	rdlong	local05, local05
0c42c     36 00 00 FF 
0c430     B0 65 86 F1 | 	sub	objptr, ##28080
0c434                 | LR__1030
0c434                 | ' select case op
0c434     01 00 00 FF 
0c438     00 AE 0E F2 | 	cmp	local05, ##512 wz
0c43c     44 00 90 AD |  if_e	jmp	#LR__1031
0c440     01 00 00 FF 
0c444     01 AE 0E F2 | 	cmp	local05, ##513 wz
0c448     90 01 90 AD |  if_e	jmp	#LR__1034
0c44c     01 00 00 FF 
0c450     02 AE 0E F2 | 	cmp	local05, ##514 wz
0c454     44 04 90 AD |  if_e	jmp	#LR__1041
0c458     01 00 00 FF 
0c45c     03 AE 0E F2 | 	cmp	local05, ##515 wz
0c460     A8 05 90 AD |  if_e	jmp	#LR__1044
0c464     2C AE 0E F2 | 	cmp	local05, #44 wz
0c468     78 07 90 AD |  if_e	jmp	#LR__1049
0c46c     01 00 00 FF 
0c470     04 AE 0E F2 | 	cmp	local05, ##516 wz
0c474     70 08 90 AD |  if_e	jmp	#LR__1050
0c478     15 AE 0E F2 | 	cmp	local05, #21 wz
0c47c     98 08 90 AD |  if_e	jmp	#LR__1051
0c480     10 09 90 FD | 	jmp	#LR__1052
0c484                 | LR__1031
0c484                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c484     01 AC 0E F2 | 	cmp	local04, #1 wz
0c488     3C 00 90 5D |  if_ne	jmp	#LR__1032
0c48c     38 00 00 FF 
0c490     E8 65 06 F1 | 	add	objptr, ##29160
0c494     32 AF 02 FB | 	rdlong	local05, objptr
0c498     03 AE 66 F0 | 	shl	local05, #3
0c49c     02 00 00 FF 
0c4a0     38 64 86 F1 | 	sub	objptr, ##1080
0c4a4     32 AF 02 F1 | 	add	local05, objptr
0c4a8     57 93 02 FB | 	rdlong	arg01, local05
0c4ac     00 94 06 F6 | 	mov	arg02, #0
0c4b0     36 00 00 FF 
0c4b4     B0 65 86 F1 | 	sub	objptr, ##28080
0c4b8     3C B4 B1 FD | 	call	#__system____builtin_atoi
0c4bc     3D AD 02 FD | 	qmul	local04, result1
0c4c0     18 A6 62 FD | 	getqx	local01
0c4c4     1C AA 06 F6 | 	mov	local03, #28
0c4c8                 | LR__1032
0c4c8                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c4c8     FF FF 7F FF 
0c4cc     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0c4d0     3C 00 90 5D |  if_ne	jmp	#LR__1033
0c4d4     38 00 00 FF 
0c4d8     E8 65 06 F1 | 	add	objptr, ##29160
0c4dc     32 AF 02 FB | 	rdlong	local05, objptr
0c4e0     03 AE 66 F0 | 	shl	local05, #3
0c4e4     02 00 00 FF 
0c4e8     38 64 86 F1 | 	sub	objptr, ##1080
0c4ec     32 AF 02 F1 | 	add	local05, objptr
0c4f0     57 93 02 FB | 	rdlong	arg01, local05
0c4f4     00 94 06 F6 | 	mov	arg02, #0
0c4f8     36 00 00 FF 
0c4fc     B0 65 86 F1 | 	sub	objptr, ##28080
0c500     F4 B3 B1 FD | 	call	#__system____builtin_atoi
0c504     3D AD 02 FD | 	qmul	local04, result1
0c508     18 A6 62 FD | 	getqx	local01
0c50c     1C AA 06 F6 | 	mov	local03, #28
0c510                 | LR__1033
0c510     53 B1 02 F6 | 	mov	local06, local01
0c514     54 B3 02 F6 | 	mov	local07, local02
0c518     55 AF 02 F6 | 	mov	local05, local03
0c51c     4C 00 00 FF 
0c520     20 64 06 F1 | 	add	objptr, ##38944
0c524     32 A7 02 FB | 	rdlong	local01, objptr
0c528     53 AD 02 F6 | 	mov	local04, local01
0c52c     01 AC 66 F0 | 	shl	local04, #1
0c530     53 AD 02 F1 | 	add	local04, local01
0c534     02 AC 66 F0 | 	shl	local04, #2
0c538     03 00 00 FF 
0c53c     00 64 86 F1 | 	sub	objptr, ##1536
0c540     32 AD 02 F1 | 	add	local04, objptr
0c544     56 B1 62 FC | 	wrlong	local06, local04
0c548     03 00 00 FF 
0c54c     00 64 06 F1 | 	add	objptr, ##1536
0c550     32 B1 02 FB | 	rdlong	local06, objptr
0c554     58 A7 02 F6 | 	mov	local01, local06
0c558     01 A6 66 F0 | 	shl	local01, #1
0c55c     58 A7 02 F1 | 	add	local01, local06
0c560     02 A6 66 F0 | 	shl	local01, #2
0c564     03 00 00 FF 
0c568     00 64 86 F1 | 	sub	objptr, ##1536
0c56c     32 A7 02 F1 | 	add	local01, objptr
0c570     04 A6 06 F1 | 	add	local01, #4
0c574     53 B3 62 FC | 	wrlong	local07, local01
0c578     03 00 00 FF 
0c57c     00 64 06 F1 | 	add	objptr, ##1536
0c580     32 B3 02 FB | 	rdlong	local07, objptr
0c584     59 B1 02 F6 | 	mov	local06, local07
0c588     01 B0 66 F0 | 	shl	local06, #1
0c58c     59 B1 02 F1 | 	add	local06, local07
0c590     02 B0 66 F0 | 	shl	local06, #2
0c594     03 00 00 FF 
0c598     00 64 86 F1 | 	sub	objptr, ##1536
0c59c     32 B1 02 F1 | 	add	local06, objptr
0c5a0     08 B0 06 F1 | 	add	local06, #8
0c5a4     58 AF 62 FC | 	wrlong	local05, local06
0c5a8     03 00 00 FF 
0c5ac     00 64 06 F1 | 	add	objptr, ##1536
0c5b0     32 B1 02 FB | 	rdlong	local06, objptr
0c5b4     01 B0 06 F1 | 	add	local06, #1
0c5b8     32 B1 62 FC | 	wrlong	local06, objptr
0c5bc     13 00 00 FF 
0c5c0     38 64 86 F1 | 	sub	objptr, ##9784
0c5c4     32 B1 02 FB | 	rdlong	local06, objptr
0c5c8     01 B0 06 F1 | 	add	local06, #1
0c5cc     32 B1 62 FC | 	wrlong	local06, objptr
0c5d0     38 00 00 FF 
0c5d4     E8 65 86 F1 | 	sub	objptr, ##29160
0c5d8     E4 07 90 FD | 	jmp	#LR__1053
0c5dc                 | LR__1034
0c5dc                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c5dc     38 00 00 FF 
0c5e0     E8 65 06 F1 | 	add	objptr, ##29160
0c5e4     32 97 02 FB | 	rdlong	arg03, objptr
0c5e8     03 96 66 F0 | 	shl	arg03, #3
0c5ec     02 00 00 FF 
0c5f0     38 64 86 F1 | 	sub	objptr, ##1080
0c5f4     32 97 02 F1 | 	add	arg03, objptr
0c5f8     4B 93 02 FB | 	rdlong	arg01, arg03
0c5fc     01 94 06 F6 | 	mov	arg02, #1
0c600     36 00 00 FF 
0c604     B0 65 86 F1 | 	sub	objptr, ##28080
0c608     40 9E B1 FD | 	call	#__system__Left_S
0c60c     3D 93 02 F6 | 	mov	arg01, result1
0c610     97 01 00 FF 
0c614     6D 94 06 F6 | 	mov	arg02, ##@LR__5938
0c618     B0 85 B1 FD | 	call	#__system___string_cmp
0c61c     00 7A 0E F2 | 	cmp	result1, #0 wz
0c620     94 00 90 5D |  if_ne	jmp	#LR__1037
0c624     38 00 00 FF 
0c628     E8 65 06 F1 | 	add	objptr, ##29160
0c62c     32 B3 02 FB | 	rdlong	local07, objptr
0c630     59 B1 02 F6 | 	mov	local06, local07
0c634     03 B0 66 F0 | 	shl	local06, #3
0c638     02 00 00 FF 
0c63c     38 64 86 F1 | 	sub	objptr, ##1080
0c640     32 B1 02 F1 | 	add	local06, objptr
0c644     97 01 00 FF 
0c648     6F AE 06 F6 | 	mov	local05, ##@LR__5939
0c64c     03 B2 66 F0 | 	shl	local07, #3
0c650     32 B3 02 F1 | 	add	local07, objptr
0c654     59 B3 02 FB | 	rdlong	local07, local07
0c658     02 00 00 FF 
0c65c     38 64 06 F1 | 	add	objptr, ##1080
0c660     32 A7 02 FB | 	rdlong	local01, objptr
0c664     03 A6 66 F0 | 	shl	local01, #3
0c668     02 00 00 FF 
0c66c     38 64 86 F1 | 	sub	objptr, ##1080
0c670     32 A7 02 F1 | 	add	local01, objptr
0c674     53 93 02 FB | 	rdlong	arg01, local01
0c678     36 00 00 FF 
0c67c     B0 65 86 F1 | 	sub	objptr, ##28080
0c680     49 B5 02 F6 | 	mov	local08, arg01
0c684     D7 06 48 FB | 	callpa	#(@LR__1036-@LR__1035)>>2,fcache_load_ptr_
0c688                 | LR__1035
0c688     5A 7B CA FA | 	rdbyte	result1, local08 wz
0c68c     01 B4 06 51 |  if_ne	add	local08, #1
0c690     F4 FF 9F 5D |  if_ne	jmp	#LR__1035
0c694                 | LR__1036
0c694     49 B5 82 F1 | 	sub	local08, arg01
0c698     5A 95 02 F6 | 	mov	arg02, local08
0c69c     01 94 86 F1 | 	sub	arg02, #1
0c6a0     59 93 02 F6 | 	mov	arg01, local07
0c6a4     2C 9E B1 FD | 	call	#__system__Right_S
0c6a8     3D 95 02 F6 | 	mov	arg02, result1
0c6ac     57 93 02 F6 | 	mov	arg01, local05
0c6b0     4C 85 B1 FD | 	call	#__system___string_concat
0c6b4     58 7B 62 FC | 	wrlong	result1, local06
0c6b8                 | LR__1037
0c6b8                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c6b8     38 00 00 FF 
0c6bc     E8 65 06 F1 | 	add	objptr, ##29160
0c6c0     32 97 02 FB | 	rdlong	arg03, objptr
0c6c4     03 96 66 F0 | 	shl	arg03, #3
0c6c8     02 00 00 FF 
0c6cc     38 64 86 F1 | 	sub	objptr, ##1080
0c6d0     32 97 02 F1 | 	add	arg03, objptr
0c6d4     4B 93 02 FB | 	rdlong	arg01, arg03
0c6d8     01 94 06 F6 | 	mov	arg02, #1
0c6dc     36 00 00 FF 
0c6e0     B0 65 86 F1 | 	sub	objptr, ##28080
0c6e4     64 9D B1 FD | 	call	#__system__Left_S
0c6e8     3D 93 02 F6 | 	mov	arg01, result1
0c6ec     97 01 00 FF 
0c6f0     72 94 06 F6 | 	mov	arg02, ##@LR__5940
0c6f4     D4 84 B1 FD | 	call	#__system___string_cmp
0c6f8     00 7A 0E F2 | 	cmp	result1, #0 wz
0c6fc     94 00 90 5D |  if_ne	jmp	#LR__1040
0c700     38 00 00 FF 
0c704     E8 65 06 F1 | 	add	objptr, ##29160
0c708     32 B3 02 FB | 	rdlong	local07, objptr
0c70c     59 B1 02 F6 | 	mov	local06, local07
0c710     03 B0 66 F0 | 	shl	local06, #3
0c714     02 00 00 FF 
0c718     38 64 86 F1 | 	sub	objptr, ##1080
0c71c     32 B1 02 F1 | 	add	local06, objptr
0c720     97 01 00 FF 
0c724     74 AE 06 F6 | 	mov	local05, ##@LR__5941
0c728     03 B2 66 F0 | 	shl	local07, #3
0c72c     32 B3 02 F1 | 	add	local07, objptr
0c730     59 B3 02 FB | 	rdlong	local07, local07
0c734     02 00 00 FF 
0c738     38 64 06 F1 | 	add	objptr, ##1080
0c73c     32 A7 02 FB | 	rdlong	local01, objptr
0c740     03 A6 66 F0 | 	shl	local01, #3
0c744     02 00 00 FF 
0c748     38 64 86 F1 | 	sub	objptr, ##1080
0c74c     32 A7 02 F1 | 	add	local01, objptr
0c750     53 93 02 FB | 	rdlong	arg01, local01
0c754     36 00 00 FF 
0c758     B0 65 86 F1 | 	sub	objptr, ##28080
0c75c     49 B5 02 F6 | 	mov	local08, arg01
0c760     D7 06 48 FB | 	callpa	#(@LR__1039-@LR__1038)>>2,fcache_load_ptr_
0c764                 | LR__1038
0c764     5A 7B CA FA | 	rdbyte	result1, local08 wz
0c768     01 B4 06 51 |  if_ne	add	local08, #1
0c76c     F4 FF 9F 5D |  if_ne	jmp	#LR__1038
0c770                 | LR__1039
0c770     49 B5 82 F1 | 	sub	local08, arg01
0c774     5A 95 02 F6 | 	mov	arg02, local08
0c778     01 94 86 F1 | 	sub	arg02, #1
0c77c     59 93 02 F6 | 	mov	arg01, local07
0c780     50 9D B1 FD | 	call	#__system__Right_S
0c784     3D 95 02 F6 | 	mov	arg02, result1
0c788     57 93 02 F6 | 	mov	arg01, local05
0c78c     70 84 B1 FD | 	call	#__system___string_concat
0c790     58 7B 62 FC | 	wrlong	result1, local06
0c794                 | LR__1040
0c794     38 00 00 FF 
0c798     E8 65 06 F1 | 	add	objptr, ##29160
0c79c     32 B1 02 FB | 	rdlong	local06, objptr
0c7a0     03 B0 66 F0 | 	shl	local06, #3
0c7a4     02 00 00 FF 
0c7a8     38 64 86 F1 | 	sub	objptr, ##1080
0c7ac     32 B1 02 F1 | 	add	local06, objptr
0c7b0     58 93 02 FB | 	rdlong	arg01, local06
0c7b4     00 94 06 F6 | 	mov	arg02, #0
0c7b8     36 00 00 FF 
0c7bc     B0 65 86 F1 | 	sub	objptr, ##28080
0c7c0     34 B1 B1 FD | 	call	#__system____builtin_atoi
0c7c4     3D AD 02 FD | 	qmul	local04, result1
0c7c8     4C 00 00 FF 
0c7cc     20 64 06 F1 | 	add	objptr, ##38944
0c7d0     32 B1 02 FB | 	rdlong	local06, objptr
0c7d4     58 B7 02 F6 | 	mov	local09, local06
0c7d8     01 B6 66 F0 | 	shl	local09, #1
0c7dc     58 B7 02 F1 | 	add	local09, local06
0c7e0     02 B6 66 F0 | 	shl	local09, #2
0c7e4     03 00 00 FF 
0c7e8     00 64 86 F1 | 	sub	objptr, ##1536
0c7ec     32 B7 02 F1 | 	add	local09, objptr
0c7f0     03 00 00 FF 
0c7f4     00 64 06 F1 | 	add	objptr, ##1536
0c7f8     18 A6 62 FD | 	getqx	local01
0c7fc     1C AA 06 F6 | 	mov	local03, #28
0c800     53 B1 02 F6 | 	mov	local06, local01
0c804     54 B3 02 F6 | 	mov	local07, local02
0c808     5B B1 62 FC | 	wrlong	local06, local09
0c80c     55 B7 02 F6 | 	mov	local09, local03
0c810     32 B1 02 FB | 	rdlong	local06, objptr
0c814     58 AF 02 F6 | 	mov	local05, local06
0c818     01 AE 66 F0 | 	shl	local05, #1
0c81c     58 AF 02 F1 | 	add	local05, local06
0c820     02 AE 66 F0 | 	shl	local05, #2
0c824     03 00 00 FF 
0c828     00 64 86 F1 | 	sub	objptr, ##1536
0c82c     32 AF 02 F1 | 	add	local05, objptr
0c830     04 AE 06 F1 | 	add	local05, #4
0c834     57 B3 62 FC | 	wrlong	local07, local05
0c838     03 00 00 FF 
0c83c     00 64 06 F1 | 	add	objptr, ##1536
0c840     32 B3 02 FB | 	rdlong	local07, objptr
0c844     59 B1 02 F6 | 	mov	local06, local07
0c848     01 B0 66 F0 | 	shl	local06, #1
0c84c     59 B1 02 F1 | 	add	local06, local07
0c850     02 B0 66 F0 | 	shl	local06, #2
0c854     03 00 00 FF 
0c858     00 64 86 F1 | 	sub	objptr, ##1536
0c85c     32 B1 02 F1 | 	add	local06, objptr
0c860     08 B0 06 F1 | 	add	local06, #8
0c864     58 B7 62 FC | 	wrlong	local09, local06
0c868     03 00 00 FF 
0c86c     00 64 06 F1 | 	add	objptr, ##1536
0c870     32 B1 02 FB | 	rdlong	local06, objptr
0c874     01 B0 06 F1 | 	add	local06, #1
0c878     32 B1 62 FC | 	wrlong	local06, objptr
0c87c     13 00 00 FF 
0c880     38 64 86 F1 | 	sub	objptr, ##9784
0c884     32 B1 02 FB | 	rdlong	local06, objptr
0c888     01 B0 06 F1 | 	add	local06, #1
0c88c     32 B1 62 FC | 	wrlong	local06, objptr
0c890     38 00 00 FF 
0c894     E8 65 86 F1 | 	sub	objptr, ##29160
0c898     24 05 90 FD | 	jmp	#LR__1053
0c89c                 | LR__1041
0c89c                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0c89c     01 AC 0E F2 | 	cmp	local04, #1 wz
0c8a0     48 00 90 5D |  if_ne	jmp	#LR__1042
0c8a4     00 C0 1F FF 
0c8a8     00 B0 06 F6 | 	mov	local06, ##1065353216
0c8ac     38 00 00 FF 
0c8b0     E8 65 06 F1 | 	add	objptr, ##29160
0c8b4     32 B7 02 FB | 	rdlong	local09, objptr
0c8b8     03 B6 66 F0 | 	shl	local09, #3
0c8bc     02 00 00 FF 
0c8c0     38 64 86 F1 | 	sub	objptr, ##1080
0c8c4     32 B7 02 F1 | 	add	local09, objptr
0c8c8     5B 93 02 FB | 	rdlong	arg01, local09
0c8cc     36 00 00 FF 
0c8d0     B0 65 86 F1 | 	sub	objptr, ##28080
0c8d4     B8 B1 B1 FD | 	call	#__system____builtin_atof
0c8d8     3D 95 02 F6 | 	mov	arg02, result1
0c8dc     58 93 02 F6 | 	mov	arg01, local06
0c8e0     90 A9 B1 FD | 	call	#__system___float_mul
0c8e4     3D A7 02 F6 | 	mov	local01, result1
0c8e8     1E AA 06 F6 | 	mov	local03, #30
0c8ec                 | LR__1042
0c8ec                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0c8ec     FF FF 7F FF 
0c8f0     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0c8f4     48 00 90 5D |  if_ne	jmp	#LR__1043
0c8f8     00 C0 5F FF 
0c8fc     00 B0 06 F6 | 	mov	local06, ##-1082130432
0c900     38 00 00 FF 
0c904     E8 65 06 F1 | 	add	objptr, ##29160
0c908     32 B7 02 FB | 	rdlong	local09, objptr
0c90c     03 B6 66 F0 | 	shl	local09, #3
0c910     02 00 00 FF 
0c914     38 64 86 F1 | 	sub	objptr, ##1080
0c918     32 B7 02 F1 | 	add	local09, objptr
0c91c     5B 93 02 FB | 	rdlong	arg01, local09
0c920     36 00 00 FF 
0c924     B0 65 86 F1 | 	sub	objptr, ##28080
0c928     64 B1 B1 FD | 	call	#__system____builtin_atof
0c92c     3D 95 02 F6 | 	mov	arg02, result1
0c930     58 93 02 F6 | 	mov	arg01, local06
0c934     3C A9 B1 FD | 	call	#__system___float_mul
0c938     3D A7 02 F6 | 	mov	local01, result1
0c93c     1E AA 06 F6 | 	mov	local03, #30
0c940                 | LR__1043
0c940     53 B1 02 F6 | 	mov	local06, local01
0c944     54 B3 02 F6 | 	mov	local07, local02
0c948     55 AF 02 F6 | 	mov	local05, local03
0c94c     4C 00 00 FF 
0c950     20 64 06 F1 | 	add	objptr, ##38944
0c954     32 A7 02 FB | 	rdlong	local01, objptr
0c958     53 B7 02 F6 | 	mov	local09, local01
0c95c     01 B6 66 F0 | 	shl	local09, #1
0c960     53 B7 02 F1 | 	add	local09, local01
0c964     02 B6 66 F0 | 	shl	local09, #2
0c968     03 00 00 FF 
0c96c     00 64 86 F1 | 	sub	objptr, ##1536
0c970     32 B7 02 F1 | 	add	local09, objptr
0c974     5B B1 62 FC | 	wrlong	local06, local09
0c978     03 00 00 FF 
0c97c     00 64 06 F1 | 	add	objptr, ##1536
0c980     32 B7 02 FB | 	rdlong	local09, objptr
0c984     5B B1 02 F6 | 	mov	local06, local09
0c988     01 B0 66 F0 | 	shl	local06, #1
0c98c     5B B1 02 F1 | 	add	local06, local09
0c990     02 B0 66 F0 | 	shl	local06, #2
0c994     03 00 00 FF 
0c998     00 64 86 F1 | 	sub	objptr, ##1536
0c99c     32 B1 02 F1 | 	add	local06, objptr
0c9a0     04 B0 06 F1 | 	add	local06, #4
0c9a4     58 B3 62 FC | 	wrlong	local07, local06
0c9a8     03 00 00 FF 
0c9ac     00 64 06 F1 | 	add	objptr, ##1536
0c9b0     32 B7 02 FB | 	rdlong	local09, objptr
0c9b4     5B B3 02 F6 | 	mov	local07, local09
0c9b8     01 B2 66 F0 | 	shl	local07, #1
0c9bc     5B B3 02 F1 | 	add	local07, local09
0c9c0     02 B2 66 F0 | 	shl	local07, #2
0c9c4     03 00 00 FF 
0c9c8     00 64 86 F1 | 	sub	objptr, ##1536
0c9cc     32 B3 02 F1 | 	add	local07, objptr
0c9d0     08 B2 06 F1 | 	add	local07, #8
0c9d4     59 AF 62 FC | 	wrlong	local05, local07
0c9d8     03 00 00 FF 
0c9dc     00 64 06 F1 | 	add	objptr, ##1536
0c9e0     32 B1 02 FB | 	rdlong	local06, objptr
0c9e4     01 B0 06 F1 | 	add	local06, #1
0c9e8     32 B1 62 FC | 	wrlong	local06, objptr
0c9ec     13 00 00 FF 
0c9f0     38 64 86 F1 | 	sub	objptr, ##9784
0c9f4     32 B1 02 FB | 	rdlong	local06, objptr
0c9f8     01 B0 06 F1 | 	add	local06, #1
0c9fc     32 B1 62 FC | 	wrlong	local06, objptr
0ca00     38 00 00 FF 
0ca04     E8 65 86 F1 | 	sub	objptr, ##29160
0ca08     B4 03 90 FD | 	jmp	#LR__1053
0ca0c                 | LR__1044
0ca0c     38 00 00 FF 
0ca10     E8 65 06 F1 | 	add	objptr, ##29160
0ca14     32 97 02 FB | 	rdlong	arg03, objptr
0ca18     03 96 66 F0 | 	shl	arg03, #3
0ca1c     02 00 00 FF 
0ca20     38 64 86 F1 | 	sub	objptr, ##1080
0ca24     32 97 02 F1 | 	add	arg03, objptr
0ca28     4B 93 02 FB | 	rdlong	arg01, arg03
0ca2c     36 00 00 FF 
0ca30     B0 65 86 F1 | 	sub	objptr, ##28080
0ca34     49 B5 02 F6 | 	mov	local08, arg01
0ca38     D7 06 48 FB | 	callpa	#(@LR__1046-@LR__1045)>>2,fcache_load_ptr_
0ca3c                 | LR__1045
0ca3c     5A 7B CA FA | 	rdbyte	result1, local08 wz
0ca40     01 B4 06 51 |  if_ne	add	local08, #1
0ca44     F4 FF 9F 5D |  if_ne	jmp	#LR__1045
0ca48                 | LR__1046
0ca48     49 B5 82 F1 | 	sub	local08, arg01
0ca4c     5A 7B 02 F6 | 	mov	result1, local08
0ca50     54 00 00 FF 
0ca54     CC 64 06 F1 | 	add	objptr, ##43212
0ca58     32 7B 62 FC | 	wrlong	result1, objptr
0ca5c     58 64 86 F1 | 	sub	objptr, #88
0ca60     32 93 02 FB | 	rdlong	arg01, objptr
0ca64     3D 93 82 F1 | 	sub	arg01, result1
0ca68     04 92 86 F1 | 	sub	arg01, #4
0ca6c     03 92 26 F5 | 	andn	arg01, #3
0ca70     32 93 62 FC | 	wrlong	arg01, objptr
0ca74     58 64 06 F1 | 	add	objptr, #88
0ca78     32 95 02 FB | 	rdlong	arg02, objptr
0ca7c     54 00 00 FF 
0ca80     CC 64 86 F1 | 	sub	objptr, ##43212
0ca84     90 45 B1 FD | 	call	#_pslpoke
0ca88                 | '     pslpoke memtop,l
0ca88                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0ca88     01 B8 06 F6 | 	mov	local10, #1
0ca8c     54 00 00 FF 
0ca90     CC 64 06 F1 | 	add	objptr, ##43212
0ca94     32 BB 02 FB | 	rdlong	local11, objptr
0ca98     54 00 00 FF 
0ca9c     CC 64 86 F1 | 	sub	objptr, ##43212
0caa0     01 BA 06 F1 | 	add	local11, #1
0caa4                 | LR__1047
0caa4     5D B9 52 F2 | 	cmps	local10, local11 wc
0caa8     5C 00 90 3D |  if_ae	jmp	#LR__1048
0caac     54 00 00 FF 
0cab0     74 64 06 F1 | 	add	objptr, ##43124
0cab4     32 B3 02 FB | 	rdlong	local07, objptr
0cab8     03 B2 06 F1 | 	add	local07, #3
0cabc     5C B3 02 F1 | 	add	local07, local10
0cac0     1B 00 00 FF 
0cac4     8C 64 86 F1 | 	sub	objptr, ##13964
0cac8     32 B7 02 FB | 	rdlong	local09, objptr
0cacc     03 B6 66 F0 | 	shl	local09, #3
0cad0     02 00 00 FF 
0cad4     38 64 86 F1 | 	sub	objptr, ##1080
0cad8     32 B7 02 F1 | 	add	local09, objptr
0cadc     5B 93 02 FB | 	rdlong	arg01, local09
0cae0     5C 95 02 F6 | 	mov	arg02, local10
0cae4     01 96 06 F6 | 	mov	arg03, #1
0cae8     36 00 00 FF 
0caec     B0 65 86 F1 | 	sub	objptr, ##28080
0caf0     70 9A B1 FD | 	call	#__system__Mid_S
0caf4     3D 95 C2 FA | 	rdbyte	arg02, result1
0caf8     59 93 02 F6 | 	mov	arg01, local07
0cafc     A8 45 B1 FD | 	call	#_pspoke
0cb00     01 B8 06 F1 | 	add	local10, #1
0cb04     9C FF 9F FD | 	jmp	#LR__1047
0cb08                 | LR__1048
0cb08     54 00 00 FF 
0cb0c     74 64 06 F1 | 	add	objptr, ##43124
0cb10     32 A7 02 FB | 	rdlong	local01, objptr
0cb14     2B AA 06 F6 | 	mov	local03, #43
0cb18     53 B1 02 F6 | 	mov	local06, local01
0cb1c     54 B3 02 F6 | 	mov	local07, local02
0cb20     55 BB 02 F6 | 	mov	local11, local03
0cb24     08 00 00 FF 
0cb28     54 64 86 F1 | 	sub	objptr, ##4180
0cb2c     32 B9 02 FB | 	rdlong	local10, objptr
0cb30     5C B7 02 F6 | 	mov	local09, local10
0cb34     01 B6 66 F0 | 	shl	local09, #1
0cb38     5C B7 02 F1 | 	add	local09, local10
0cb3c     02 B6 66 F0 | 	shl	local09, #2
0cb40     03 00 00 FF 
0cb44     00 64 86 F1 | 	sub	objptr, ##1536
0cb48     32 B7 02 F1 | 	add	local09, objptr
0cb4c     5B B1 62 FC | 	wrlong	local06, local09
0cb50     03 00 00 FF 
0cb54     00 64 06 F1 | 	add	objptr, ##1536
0cb58     32 B9 02 FB | 	rdlong	local10, objptr
0cb5c     5C B7 02 F6 | 	mov	local09, local10
0cb60     01 B6 66 F0 | 	shl	local09, #1
0cb64     5C B7 02 F1 | 	add	local09, local10
0cb68     02 B6 66 F0 | 	shl	local09, #2
0cb6c     03 00 00 FF 
0cb70     00 64 86 F1 | 	sub	objptr, ##1536
0cb74     32 B7 02 F1 | 	add	local09, objptr
0cb78     04 B6 06 F1 | 	add	local09, #4
0cb7c     5B B3 62 FC | 	wrlong	local07, local09
0cb80     03 00 00 FF 
0cb84     00 64 06 F1 | 	add	objptr, ##1536
0cb88     32 B9 02 FB | 	rdlong	local10, objptr
0cb8c     5C B7 02 F6 | 	mov	local09, local10
0cb90     01 B6 66 F0 | 	shl	local09, #1
0cb94     5C B7 02 F1 | 	add	local09, local10
0cb98     02 B6 66 F0 | 	shl	local09, #2
0cb9c     03 00 00 FF 
0cba0     00 64 86 F1 | 	sub	objptr, ##1536
0cba4     32 B7 02 F1 | 	add	local09, objptr
0cba8     08 B6 06 F1 | 	add	local09, #8
0cbac     5B BB 62 FC | 	wrlong	local11, local09
0cbb0     03 00 00 FF 
0cbb4     00 64 06 F1 | 	add	objptr, ##1536
0cbb8     32 B1 02 FB | 	rdlong	local06, objptr
0cbbc     01 B0 06 F1 | 	add	local06, #1
0cbc0     32 B1 62 FC | 	wrlong	local06, objptr
0cbc4     13 00 00 FF 
0cbc8     38 64 86 F1 | 	sub	objptr, ##9784
0cbcc     32 B1 02 FB | 	rdlong	local06, objptr
0cbd0     01 B0 06 F1 | 	add	local06, #1
0cbd4     32 B1 62 FC | 	wrlong	local06, objptr
0cbd8     38 00 00 FF 
0cbdc     E8 65 86 F1 | 	sub	objptr, ##29160
0cbe0     DC 01 90 FD | 	jmp	#LR__1053
0cbe4                 | LR__1049
0cbe4     2C AA 06 F6 | 	mov	local03, #44
0cbe8     38 00 00 FF 
0cbec     E8 65 06 F1 | 	add	objptr, ##29160
0cbf0     32 B1 02 FB | 	rdlong	local06, objptr
0cbf4     03 B0 66 F0 | 	shl	local06, #3
0cbf8     02 00 00 FF 
0cbfc     38 64 86 F1 | 	sub	objptr, ##1080
0cc00     32 B1 02 F1 | 	add	local06, objptr
0cc04     58 93 02 FB | 	rdlong	arg01, local06
0cc08     00 94 06 F6 | 	mov	arg02, #0
0cc0c     36 00 00 FF 
0cc10     B0 65 86 F1 | 	sub	objptr, ##28080
0cc14     E0 AC B1 FD | 	call	#__system____builtin_atoi
0cc18     3D A7 02 F6 | 	mov	local01, result1
0cc1c     53 B1 02 F6 | 	mov	local06, local01
0cc20     54 B3 02 F6 | 	mov	local07, local02
0cc24     55 BB 02 F6 | 	mov	local11, local03
0cc28     4C 00 00 FF 
0cc2c     20 64 06 F1 | 	add	objptr, ##38944
0cc30     32 B9 02 FB | 	rdlong	local10, objptr
0cc34     5C B7 02 F6 | 	mov	local09, local10
0cc38     01 B6 66 F0 | 	shl	local09, #1
0cc3c     5C B7 02 F1 | 	add	local09, local10
0cc40     02 B6 66 F0 | 	shl	local09, #2
0cc44     03 00 00 FF 
0cc48     00 64 86 F1 | 	sub	objptr, ##1536
0cc4c     32 B7 02 F1 | 	add	local09, objptr
0cc50     5B B1 62 FC | 	wrlong	local06, local09
0cc54     03 00 00 FF 
0cc58     00 64 06 F1 | 	add	objptr, ##1536
0cc5c     32 B9 02 FB | 	rdlong	local10, objptr
0cc60     5C B7 02 F6 | 	mov	local09, local10
0cc64     01 B6 66 F0 | 	shl	local09, #1
0cc68     5C B7 02 F1 | 	add	local09, local10
0cc6c     02 B6 66 F0 | 	shl	local09, #2
0cc70     03 00 00 FF 
0cc74     00 64 86 F1 | 	sub	objptr, ##1536
0cc78     32 B7 02 F1 | 	add	local09, objptr
0cc7c     04 B6 06 F1 | 	add	local09, #4
0cc80     5B B3 62 FC | 	wrlong	local07, local09
0cc84     03 00 00 FF 
0cc88     00 64 06 F1 | 	add	objptr, ##1536
0cc8c     32 B9 02 FB | 	rdlong	local10, objptr
0cc90     5C B7 02 F6 | 	mov	local09, local10
0cc94     01 B6 66 F0 | 	shl	local09, #1
0cc98     5C B7 02 F1 | 	add	local09, local10
0cc9c     02 B6 66 F0 | 	shl	local09, #2
0cca0     03 00 00 FF 
0cca4     00 64 86 F1 | 	sub	objptr, ##1536
0cca8     32 B7 02 F1 | 	add	local09, objptr
0ccac     08 B6 06 F1 | 	add	local09, #8
0ccb0     5B BB 62 FC | 	wrlong	local11, local09
0ccb4     03 00 00 FF 
0ccb8     00 64 06 F1 | 	add	objptr, ##1536
0ccbc     32 B1 02 FB | 	rdlong	local06, objptr
0ccc0     01 B0 06 F1 | 	add	local06, #1
0ccc4     32 B1 62 FC | 	wrlong	local06, objptr
0ccc8     13 00 00 FF 
0cccc     38 64 86 F1 | 	sub	objptr, ##9784
0ccd0     32 B1 02 FB | 	rdlong	local06, objptr
0ccd4     01 B0 06 F1 | 	add	local06, #1
0ccd8     32 B1 62 FC | 	wrlong	local06, objptr
0ccdc     38 00 00 FF 
0cce0     E8 65 86 F1 | 	sub	objptr, ##29160
0cce4     D8 00 90 FD | 	jmp	#LR__1053
0cce8                 | LR__1050
0cce8     56 93 02 F6 | 	mov	arg01, local04
0ccec     24 04 B0 FD | 	call	#_getvar
0ccf0     38 00 00 FF 
0ccf4     E8 65 06 F1 | 	add	objptr, ##29160
0ccf8     32 B1 02 FB | 	rdlong	local06, objptr
0ccfc     01 B0 06 F1 | 	add	local06, #1
0cd00     32 B1 62 FC | 	wrlong	local06, objptr
0cd04     38 00 00 FF 
0cd08     E8 65 86 F1 | 	sub	objptr, ##29160
0cd0c                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0cd0c     01 7A 56 F2 | 	cmps	result1, #1 wc
0cd10     B0 00 90 3D |  if_ae	jmp	#LR__1054
0cd14     A8 00 90 FD | 	jmp	#LR__1053
0cd18                 | LR__1051
0cd18     38 00 00 FF 
0cd1c     E8 65 06 F1 | 	add	objptr, ##29160
0cd20     32 B1 02 FB | 	rdlong	local06, objptr
0cd24     01 B0 06 F1 | 	add	local06, #1
0cd28     32 B1 62 FC | 	wrlong	local06, objptr
0cd2c     38 00 00 FF 
0cd30     E8 65 86 F1 | 	sub	objptr, ##29160
0cd34     20 F1 BF FD | 	call	#_expr
0cd38                 | '     ct+=1
0cd38                 | '     err=expr() : if err>0 then return err 
0cd38     01 7A 56 F2 | 	cmps	result1, #1 wc
0cd3c     84 00 90 3D |  if_ae	jmp	#LR__1054
0cd40                 | '     if lparts(ct).token=token_rpar then ct+=1
0cd40     38 00 00 FF 
0cd44     E8 65 06 F1 | 	add	objptr, ##29160
0cd48     32 BB 02 FB | 	rdlong	local11, objptr
0cd4c     03 BA 66 F0 | 	shl	local11, #3
0cd50     02 00 00 FF 
0cd54     38 64 86 F1 | 	sub	objptr, ##1080
0cd58     32 BB 02 F1 | 	add	local11, objptr
0cd5c     04 BA 06 F1 | 	add	local11, #4
0cd60     5D BB 02 FB | 	rdlong	local11, local11
0cd64     14 BA 0E F2 | 	cmp	local11, #20 wz
0cd68     36 00 00 FF 
0cd6c     B0 65 86 F1 | 	sub	objptr, ##28080
0cd70     4C 00 90 5D |  if_ne	jmp	#LR__1053
0cd74     38 00 00 FF 
0cd78     E8 65 06 F1 | 	add	objptr, ##29160
0cd7c     32 B1 02 FB | 	rdlong	local06, objptr
0cd80     01 B0 06 F1 | 	add	local06, #1
0cd84     32 B1 62 FC | 	wrlong	local06, objptr
0cd88     38 00 00 FF 
0cd8c     E8 65 86 F1 | 	sub	objptr, ##29160
0cd90     2C 00 90 FD | 	jmp	#LR__1053
0cd94                 | LR__1052
0cd94     56 93 02 F6 | 	mov	arg01, local04
0cd98     34 00 B0 FD | 	call	#_getfun
0cd9c     38 00 00 FF 
0cda0     E8 65 06 F1 | 	add	objptr, ##29160
0cda4     32 B1 02 FB | 	rdlong	local06, objptr
0cda8     01 B0 06 F1 | 	add	local06, #1
0cdac     32 B1 62 FC | 	wrlong	local06, objptr
0cdb0     38 00 00 FF 
0cdb4     E8 65 86 F1 | 	sub	objptr, ##29160
0cdb8                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0cdb8     01 7A 56 F2 | 	cmps	result1, #1 wc
0cdbc     04 00 90 3D |  if_ae	jmp	#LR__1054
0cdc0                 | LR__1053
0cdc0                 | ' return 0  
0cdc0     00 7A 06 F6 | 	mov	result1, #0
0cdc4                 | LR__1054
0cdc4     E7 F0 03 F6 | 	mov	ptra, fp
0cdc8     F2 00 A0 FD | 	call	#popregs_
0cdcc                 | _getvalue_ret
0cdcc     2D 00 64 FD | 	ret
0cdd0                 | 
0cdd0                 | ' 
0cdd0                 | ' ' Get a function result 
0cdd0                 | ' 
0cdd0                 | ' function getfun(m as integer) as ulong
0cdd0                 | _getfun
0cdd0     0F CA 05 F6 | 	mov	COUNT_, #15
0cdd4     E8 00 A0 FD | 	call	#pushregs_
0cdd8                 | _getfun_enter
0cdd8     49 AD 02 F6 | 	mov	local04, arg01
0cddc     38 00 00 FF 
0cde0     E8 65 06 F1 | 	add	objptr, ##29160
0cde4     32 AF 02 FB | 	rdlong	local05, objptr
0cde8     57 B1 02 F6 | 	mov	local06, local05
0cdec     00 B2 06 F6 | 	mov	local07, #0
0cdf0                 | ' oldct=ct
0cdf0                 | ' numpar=0
0cdf0                 | ' if lparts(ct+1).token=token_lpar then
0cdf0     01 AE 06 F1 | 	add	local05, #1
0cdf4     03 AE 66 F0 | 	shl	local05, #3
0cdf8     02 00 00 FF 
0cdfc     38 64 86 F1 | 	sub	objptr, ##1080
0ce00     32 AF 02 F1 | 	add	local05, objptr
0ce04     04 AE 06 F1 | 	add	local05, #4
0ce08     57 AF 02 FB | 	rdlong	local05, local05
0ce0c     15 AE 0E F2 | 	cmp	local05, #21 wz
0ce10     36 00 00 FF 
0ce14     B0 65 86 F1 | 	sub	objptr, ##28080
0ce18     54 01 90 5D |  if_ne	jmp	#LR__1064
0ce1c     38 00 00 FF 
0ce20     E8 65 06 F1 | 	add	objptr, ##29160
0ce24     32 B5 02 FB | 	rdlong	local08, objptr
0ce28     01 B4 06 F1 | 	add	local08, #1
0ce2c     32 B5 62 FC | 	wrlong	local08, objptr
0ce30     38 00 00 FF 
0ce34     E8 65 86 F1 | 	sub	objptr, ##29160
0ce38                 | '   ct+=1 											' omit this lpar, this is for expr list
0ce38                 | '   do
0ce38                 | LR__1060
0ce38     38 00 00 FF 
0ce3c     E8 65 06 F1 | 	add	objptr, ##29160
0ce40     32 AF 02 FB | 	rdlong	local05, objptr
0ce44     01 AE 06 F1 | 	add	local05, #1
0ce48     32 AF 62 FC | 	wrlong	local05, objptr
0ce4c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0ce4c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0ce4c     03 AE 66 F0 | 	shl	local05, #3
0ce50     02 00 00 FF 
0ce54     38 64 86 F1 | 	sub	objptr, ##1080
0ce58     32 AF 02 F1 | 	add	local05, objptr
0ce5c     04 AE 06 F1 | 	add	local05, #4
0ce60     57 B5 02 FB | 	rdlong	local08, local05
0ce64     15 B4 0E F2 | 	cmp	local08, #21 wz
0ce68     36 00 00 FF 
0ce6c     B0 65 86 F1 | 	sub	objptr, ##28080
0ce70     44 00 90 5D |  if_ne	jmp	#LR__1061
0ce74     38 00 00 FF 
0ce78     E8 65 06 F1 | 	add	objptr, ##29160
0ce7c     32 B5 02 FB | 	rdlong	local08, objptr
0ce80     01 B4 06 F1 | 	add	local08, #1
0ce84     32 B5 62 FC | 	wrlong	local08, objptr
0ce88     38 00 00 FF 
0ce8c     E8 65 86 F1 | 	sub	objptr, ##29160
0ce90     C4 EF BF FD | 	call	#_expr
0ce94     3D B7 02 F6 | 	mov	local09, result1
0ce98     38 00 00 FF 
0ce9c     E8 65 06 F1 | 	add	objptr, ##29160
0cea0     32 B5 02 FB | 	rdlong	local08, objptr
0cea4     01 B4 06 F1 | 	add	local08, #1
0cea8     32 B5 62 FC | 	wrlong	local08, objptr
0ceac     38 00 00 FF 
0ceb0     E8 65 86 F1 | 	sub	objptr, ##29160
0ceb4     08 00 90 FD | 	jmp	#LR__1062
0ceb8                 | LR__1061
0ceb8     9C EF BF FD | 	call	#_expr
0cebc     3D B7 02 F6 | 	mov	local09, result1
0cec0                 | LR__1062
0cec0                 | '     if err>0 then return err
0cec0     01 B6 16 F2 | 	cmp	local09, #1 wc
0cec4     5B 7B 02 36 |  if_ae	mov	result1, local09
0cec8     3C 02 90 3D |  if_ae	jmp	#LR__1066
0cecc     01 B2 06 F1 | 	add	local07, #1
0ced0     38 00 00 FF 
0ced4     E8 65 06 F1 | 	add	objptr, ##29160
0ced8     32 AF 02 FB | 	rdlong	local05, objptr
0cedc     03 AE 66 F0 | 	shl	local05, #3
0cee0     02 00 00 FF 
0cee4     38 64 86 F1 | 	sub	objptr, ##1080
0cee8     32 AF 02 F1 | 	add	local05, objptr
0ceec     04 AE 06 F1 | 	add	local05, #4
0cef0     57 B7 02 FB | 	rdlong	local09, local05
0cef4     14 B6 0E F2 | 	cmp	local09, #20 wz
0cef8     36 00 00 FF 
0cefc     B0 65 86 F1 | 	sub	objptr, ##28080
0cf00     34 00 90 AD |  if_e	jmp	#LR__1063
0cf04     38 00 00 FF 
0cf08     E8 65 06 F1 | 	add	objptr, ##29160
0cf0c     32 B7 02 FB | 	rdlong	local09, objptr
0cf10     03 B6 66 F0 | 	shl	local09, #3
0cf14     02 00 00 FF 
0cf18     38 64 86 F1 | 	sub	objptr, ##1080
0cf1c     32 B7 02 F1 | 	add	local09, objptr
0cf20     04 B6 06 F1 | 	add	local09, #4
0cf24     5B B7 02 FB | 	rdlong	local09, local09
0cf28     FE B7 0E F2 | 	cmp	local09, #510 wz
0cf2c     36 00 00 FF 
0cf30     B0 65 86 F1 | 	sub	objptr, ##28080
0cf34     00 FF 9F 5D |  if_ne	jmp	#LR__1060
0cf38                 | LR__1063
0cf38                 | '   if lparts(ct).token=token_end then return 14
0cf38     38 00 00 FF 
0cf3c     E8 65 06 F1 | 	add	objptr, ##29160
0cf40     32 AF 02 FB | 	rdlong	local05, objptr
0cf44     03 AE 66 F0 | 	shl	local05, #3
0cf48     02 00 00 FF 
0cf4c     38 64 86 F1 | 	sub	objptr, ##1080
0cf50     32 AF 02 F1 | 	add	local05, objptr
0cf54     04 AE 06 F1 | 	add	local05, #4
0cf58     57 B7 02 FB | 	rdlong	local09, local05
0cf5c     FE B7 0E F2 | 	cmp	local09, #510 wz
0cf60     36 00 00 FF 
0cf64     B0 65 86 F1 | 	sub	objptr, ##28080
0cf68     0E 7A 06 A6 |  if_e	mov	result1, #14
0cf6c     98 01 90 AD |  if_e	jmp	#LR__1066
0cf70                 | LR__1064
0cf70     59 A7 02 F6 | 	mov	local01, local07
0cf74     03 B0 66 F0 | 	shl	local06, #3
0cf78     36 00 00 FF 
0cf7c     B0 65 06 F1 | 	add	objptr, ##28080
0cf80     32 B1 02 F1 | 	add	local06, objptr
0cf84     04 B0 06 F1 | 	add	local06, #4
0cf88     58 AB 02 FB | 	rdlong	local03, local06
0cf8c     53 B5 02 F6 | 	mov	local08, local01
0cf90     54 B9 02 F6 | 	mov	local10, local02
0cf94     55 BB 02 F6 | 	mov	local11, local03
0cf98     15 00 00 FF 
0cf9c     70 64 06 F1 | 	add	objptr, ##10864
0cfa0     32 BD 02 FB | 	rdlong	local12, objptr
0cfa4     5E BF 02 F6 | 	mov	local13, local12
0cfa8     01 BE 66 F0 | 	shl	local13, #1
0cfac     5E BF 02 F1 | 	add	local13, local12
0cfb0     02 BE 66 F0 | 	shl	local13, #2
0cfb4     03 00 00 FF 
0cfb8     00 64 86 F1 | 	sub	objptr, ##1536
0cfbc     32 BF 02 F1 | 	add	local13, objptr
0cfc0     5F B5 62 FC | 	wrlong	local08, local13
0cfc4     03 00 00 FF 
0cfc8     00 64 06 F1 | 	add	objptr, ##1536
0cfcc     32 B5 02 FB | 	rdlong	local08, objptr
0cfd0     5A C1 02 F6 | 	mov	local14, local08
0cfd4     01 C0 66 F0 | 	shl	local14, #1
0cfd8     5A C1 02 F1 | 	add	local14, local08
0cfdc     02 C0 66 F0 | 	shl	local14, #2
0cfe0     03 00 00 FF 
0cfe4     00 64 86 F1 | 	sub	objptr, ##1536
0cfe8     32 C1 02 F1 | 	add	local14, objptr
0cfec     04 C0 06 F1 | 	add	local14, #4
0cff0     60 B9 62 FC | 	wrlong	local10, local14
0cff4     03 00 00 FF 
0cff8     00 64 06 F1 | 	add	objptr, ##1536
0cffc     32 B5 02 FB | 	rdlong	local08, objptr
0d000     5A C3 02 F6 | 	mov	local15, local08
0d004     01 C2 66 F0 | 	shl	local15, #1
0d008     5A C3 02 F1 | 	add	local15, local08
0d00c     02 C2 66 F0 | 	shl	local15, #2
0d010     03 00 00 FF 
0d014     00 64 86 F1 | 	sub	objptr, ##1536
0d018     32 C3 02 F1 | 	add	local15, objptr
0d01c     08 C2 06 F1 | 	add	local15, #8
0d020     61 BB 62 FC | 	wrlong	local11, local15
0d024     03 00 00 FF 
0d028     00 64 06 F1 | 	add	objptr, ##1536
0d02c     32 B5 02 FB | 	rdlong	local08, objptr
0d030     01 B4 06 F1 | 	add	local08, #1
0d034     32 B5 62 FC | 	wrlong	local08, objptr
0d038     4C 00 00 FF 
0d03c     20 64 86 F1 | 	sub	objptr, ##38944
0d040                 | ' t2.result.uresult=numpar
0d040                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0d040                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d040                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d040     FF FF 7F FF 
0d044     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0d048     B8 00 90 5D |  if_ne	jmp	#LR__1065
0d04c     15 AA 06 F6 | 	mov	local03, #21
0d050     53 B5 02 F6 | 	mov	local08, local01
0d054     54 B9 02 F6 | 	mov	local10, local02
0d058     55 BB 02 F6 | 	mov	local11, local03
0d05c     4C 00 00 FF 
0d060     20 64 06 F1 | 	add	objptr, ##38944
0d064     32 BD 02 FB | 	rdlong	local12, objptr
0d068     5E BF 02 F6 | 	mov	local13, local12
0d06c     01 BE 66 F0 | 	shl	local13, #1
0d070     5E BF 02 F1 | 	add	local13, local12
0d074     02 BE 66 F0 | 	shl	local13, #2
0d078     03 00 00 FF 
0d07c     00 64 86 F1 | 	sub	objptr, ##1536
0d080     32 BF 02 F1 | 	add	local13, objptr
0d084     5F B5 62 FC | 	wrlong	local08, local13
0d088     03 00 00 FF 
0d08c     00 64 06 F1 | 	add	objptr, ##1536
0d090     32 C3 02 FB | 	rdlong	local15, objptr
0d094     61 C1 02 F6 | 	mov	local14, local15
0d098     01 C0 66 F0 | 	shl	local14, #1
0d09c     61 C1 02 F1 | 	add	local14, local15
0d0a0     02 C0 66 F0 | 	shl	local14, #2
0d0a4     03 00 00 FF 
0d0a8     00 64 86 F1 | 	sub	objptr, ##1536
0d0ac     32 C1 02 F1 | 	add	local14, objptr
0d0b0     04 C0 06 F1 | 	add	local14, #4
0d0b4     60 B9 62 FC | 	wrlong	local10, local14
0d0b8     03 00 00 FF 
0d0bc     00 64 06 F1 | 	add	objptr, ##1536
0d0c0     32 C1 02 FB | 	rdlong	local14, objptr
0d0c4     60 C3 02 F6 | 	mov	local15, local14
0d0c8     01 C2 66 F0 | 	shl	local15, #1
0d0cc     60 C3 02 F1 | 	add	local15, local14
0d0d0     02 C2 66 F0 | 	shl	local15, #2
0d0d4     03 00 00 FF 
0d0d8     00 64 86 F1 | 	sub	objptr, ##1536
0d0dc     32 C3 02 F1 | 	add	local15, objptr
0d0e0     08 C2 06 F1 | 	add	local15, #8
0d0e4     61 BB 62 FC | 	wrlong	local11, local15
0d0e8     03 00 00 FF 
0d0ec     00 64 06 F1 | 	add	objptr, ##1536
0d0f0     32 B5 02 FB | 	rdlong	local08, objptr
0d0f4     01 B4 06 F1 | 	add	local08, #1
0d0f8     32 B5 62 FC | 	wrlong	local08, objptr
0d0fc     4C 00 00 FF 
0d100     20 64 86 F1 | 	sub	objptr, ##38944
0d104                 | LR__1065
0d104                 | ' return 0
0d104     00 7A 06 F6 | 	mov	result1, #0
0d108                 | LR__1066
0d108     E7 F0 03 F6 | 	mov	ptra, fp
0d10c     F2 00 A0 FD | 	call	#popregs_
0d110                 | _getfun_ret
0d110     2D 00 64 FD | 	ret
0d114                 | 
0d114                 | '   
0d114                 | '   
0d114                 | ' function getvar(m as integer) as ulong
0d114                 | _getvar
0d114     11 CA 05 F6 | 	mov	COUNT_, #17
0d118     E8 00 A0 FD | 	call	#pushregs_
0d11c                 | _getvar_enter
0d11c     49 AD 02 F6 | 	mov	local04, arg01
0d120     38 00 00 FF 
0d124     E8 65 06 F1 | 	add	objptr, ##29160
0d128     32 AF 02 FB | 	rdlong	local05, objptr
0d12c     03 AE 66 F0 | 	shl	local05, #3
0d130     02 00 00 FF 
0d134     38 64 86 F1 | 	sub	objptr, ##1080
0d138     32 AF 02 F1 | 	add	local05, objptr
0d13c     57 B1 02 FB | 	rdlong	local06, local05
0d140     01 B2 66 F6 | 	neg	local07, #1
0d144                 | ' 
0d144                 | ' varname$=lparts(ct).part$
0d144                 | ' j=-1
0d144                 | ' 
0d144                 | ' for i=0 to varnum-1
0d144     00 B4 06 F6 | 	mov	local08, #0
0d148     04 64 86 F1 | 	sub	objptr, #4
0d14c     32 B7 02 FB | 	rdlong	local09, objptr
0d150     36 00 00 FF 
0d154     AC 65 86 F1 | 	sub	objptr, ##28076
0d158                 | LR__1070
0d158     5B B5 52 F2 | 	cmps	local08, local09 wc
0d15c     34 00 90 3D |  if_ae	jmp	#LR__1071
0d160                 | '   if variables(i).name=varname$ then j=i : exit
0d160     5A AF 02 F6 | 	mov	local05, local08
0d164     04 AE 66 F0 | 	shl	local05, #4
0d168     32 95 02 F6 | 	mov	arg02, objptr
0d16c     16 00 00 FF 
0d170     9C 95 06 F1 | 	add	arg02, ##11676
0d174     4A AF 02 F1 | 	add	local05, arg02
0d178     57 93 02 FB | 	rdlong	arg01, local05
0d17c     58 95 02 F6 | 	mov	arg02, local06
0d180     48 7A B1 FD | 	call	#__system___string_cmp
0d184     00 7A 0E F2 | 	cmp	result1, #0 wz
0d188     5A B3 02 A6 |  if_e	mov	local07, local08
0d18c     01 B4 06 51 |  if_ne	add	local08, #1
0d190     C4 FF 9F 5D |  if_ne	jmp	#LR__1070
0d194                 | LR__1071
0d194                 | ' if  j=-1 andalso varnum<maxvars then   
0d194     FF FF 7F FF 
0d198     FF B3 0E F2 | 	cmp	local07, ##-1 wz
0d19c     A8 00 90 5D |  if_ne	jmp	#LR__1072
0d1a0     36 00 00 FF 
0d1a4     AC 65 06 F1 | 	add	objptr, ##28076
0d1a8     32 B7 02 FB | 	rdlong	local09, objptr
0d1ac     36 00 00 FF 
0d1b0     AC 65 86 F1 | 	sub	objptr, ##28076
0d1b4     02 00 00 FF 
0d1b8     00 B6 56 F2 | 	cmps	local09, ##1024 wc
0d1bc     88 00 90 3D |  if_ae	jmp	#LR__1072
0d1c0     36 00 00 FF 
0d1c4     AC 65 06 F1 | 	add	objptr, ##28076
0d1c8     32 AF 02 FB | 	rdlong	local05, objptr
0d1cc     04 AE 66 F0 | 	shl	local05, #4
0d1d0     20 00 00 FF 
0d1d4     10 64 86 F1 | 	sub	objptr, ##16400
0d1d8     32 AF 02 F1 | 	add	local05, objptr
0d1dc     57 B1 62 FC | 	wrlong	local06, local05
0d1e0     20 00 00 FF 
0d1e4     10 64 06 F1 | 	add	objptr, ##16400
0d1e8     32 AF 02 FB | 	rdlong	local05, objptr
0d1ec     04 AE 66 F0 | 	shl	local05, #4
0d1f0     20 00 00 FF 
0d1f4     10 64 86 F1 | 	sub	objptr, ##16400
0d1f8     32 AF 02 F1 | 	add	local05, objptr
0d1fc     04 AE 06 F1 | 	add	local05, #4
0d200     57 01 68 FC | 	wrlong	#0, local05
0d204     20 00 00 FF 
0d208     10 64 06 F1 | 	add	objptr, ##16400
0d20c     32 AF 02 FB | 	rdlong	local05, objptr
0d210     04 AE 66 F0 | 	shl	local05, #4
0d214     20 00 00 FF 
0d218     10 64 86 F1 | 	sub	objptr, ##16400
0d21c     32 AF 02 F1 | 	add	local05, objptr
0d220     0C AE 06 F1 | 	add	local05, #12
0d224     57 39 68 FC | 	wrlong	#28, local05
0d228     20 00 00 FF 
0d22c     10 64 06 F1 | 	add	objptr, ##16400
0d230     32 B7 02 FB | 	rdlong	local09, objptr
0d234     5B B3 02 F6 | 	mov	local07, local09
0d238     01 B6 06 F1 | 	add	local09, #1
0d23c     32 B7 62 FC | 	wrlong	local09, objptr
0d240     36 00 00 FF 
0d244     AC 65 86 F1 | 	sub	objptr, ##28076
0d248                 | LR__1072
0d248     00 B4 06 F6 | 	mov	local08, #0
0d24c                 | ' numpar=0
0d24c                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d24c     38 00 00 FF 
0d250     E8 65 06 F1 | 	add	objptr, ##29160
0d254     32 AF 02 FB | 	rdlong	local05, objptr
0d258     01 AE 06 F1 | 	add	local05, #1
0d25c     03 AE 66 F0 | 	shl	local05, #3
0d260     02 00 00 FF 
0d264     38 64 86 F1 | 	sub	objptr, ##1080
0d268     32 AF 02 F1 | 	add	local05, objptr
0d26c     04 AE 06 F1 | 	add	local05, #4
0d270     57 B7 02 FB | 	rdlong	local09, local05
0d274     15 B6 0E F2 | 	cmp	local09, #21 wz
0d278     36 00 00 FF 
0d27c     B0 65 86 F1 | 	sub	objptr, ##28080
0d280     54 01 90 5D |  if_ne	jmp	#LR__1077
0d284     38 00 00 FF 
0d288     E8 65 06 F1 | 	add	objptr, ##29160
0d28c     32 B9 02 FB | 	rdlong	local10, objptr
0d290     01 B8 06 F1 | 	add	local10, #1
0d294     32 B9 62 FC | 	wrlong	local10, objptr
0d298     38 00 00 FF 
0d29c     E8 65 86 F1 | 	sub	objptr, ##29160
0d2a0                 | '   ct+=1 											' omit this lpar, this is for expr list
0d2a0                 | '   do
0d2a0                 | LR__1073
0d2a0     38 00 00 FF 
0d2a4     E8 65 06 F1 | 	add	objptr, ##29160
0d2a8     32 AF 02 FB | 	rdlong	local05, objptr
0d2ac     01 AE 06 F1 | 	add	local05, #1
0d2b0     32 AF 62 FC | 	wrlong	local05, objptr
0d2b4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d2b4                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d2b4     03 AE 66 F0 | 	shl	local05, #3
0d2b8     02 00 00 FF 
0d2bc     38 64 86 F1 | 	sub	objptr, ##1080
0d2c0     32 AF 02 F1 | 	add	local05, objptr
0d2c4     04 AE 06 F1 | 	add	local05, #4
0d2c8     57 B9 02 FB | 	rdlong	local10, local05
0d2cc     15 B8 0E F2 | 	cmp	local10, #21 wz
0d2d0     36 00 00 FF 
0d2d4     B0 65 86 F1 | 	sub	objptr, ##28080
0d2d8     44 00 90 5D |  if_ne	jmp	#LR__1074
0d2dc     38 00 00 FF 
0d2e0     E8 65 06 F1 | 	add	objptr, ##29160
0d2e4     32 B9 02 FB | 	rdlong	local10, objptr
0d2e8     01 B8 06 F1 | 	add	local10, #1
0d2ec     32 B9 62 FC | 	wrlong	local10, objptr
0d2f0     38 00 00 FF 
0d2f4     E8 65 86 F1 | 	sub	objptr, ##29160
0d2f8     5C EB BF FD | 	call	#_expr
0d2fc     3D BB 02 F6 | 	mov	local11, result1
0d300     38 00 00 FF 
0d304     E8 65 06 F1 | 	add	objptr, ##29160
0d308     32 B9 02 FB | 	rdlong	local10, objptr
0d30c     01 B8 06 F1 | 	add	local10, #1
0d310     32 B9 62 FC | 	wrlong	local10, objptr
0d314     38 00 00 FF 
0d318     E8 65 86 F1 | 	sub	objptr, ##29160
0d31c     08 00 90 FD | 	jmp	#LR__1075
0d320                 | LR__1074
0d320     34 EB BF FD | 	call	#_expr
0d324     3D BB 02 F6 | 	mov	local11, result1
0d328                 | LR__1075
0d328                 | '     if err>0 then return err
0d328     01 BA 56 F2 | 	cmps	local11, #1 wc
0d32c     5D 7B 02 36 |  if_ae	mov	result1, local11
0d330     2C 02 90 3D |  if_ae	jmp	#LR__1079
0d334     01 B4 06 F1 | 	add	local08, #1
0d338     38 00 00 FF 
0d33c     E8 65 06 F1 | 	add	objptr, ##29160
0d340     32 AF 02 FB | 	rdlong	local05, objptr
0d344     03 AE 66 F0 | 	shl	local05, #3
0d348     02 00 00 FF 
0d34c     38 64 86 F1 | 	sub	objptr, ##1080
0d350     32 AF 02 F1 | 	add	local05, objptr
0d354     04 AE 06 F1 | 	add	local05, #4
0d358     57 BB 02 FB | 	rdlong	local11, local05
0d35c     14 BA 0E F2 | 	cmp	local11, #20 wz
0d360     36 00 00 FF 
0d364     B0 65 86 F1 | 	sub	objptr, ##28080
0d368     34 00 90 AD |  if_e	jmp	#LR__1076
0d36c     38 00 00 FF 
0d370     E8 65 06 F1 | 	add	objptr, ##29160
0d374     32 BB 02 FB | 	rdlong	local11, objptr
0d378     03 BA 66 F0 | 	shl	local11, #3
0d37c     02 00 00 FF 
0d380     38 64 86 F1 | 	sub	objptr, ##1080
0d384     32 BB 02 F1 | 	add	local11, objptr
0d388     04 BA 06 F1 | 	add	local11, #4
0d38c     5D BB 02 FB | 	rdlong	local11, local11
0d390     FE BB 0E F2 | 	cmp	local11, #510 wz
0d394     36 00 00 FF 
0d398     B0 65 86 F1 | 	sub	objptr, ##28080
0d39c     00 FF 9F 5D |  if_ne	jmp	#LR__1073
0d3a0                 | LR__1076
0d3a0                 | '     if lparts(ct).token=token_end then return 14
0d3a0     38 00 00 FF 
0d3a4     E8 65 06 F1 | 	add	objptr, ##29160
0d3a8     32 AF 02 FB | 	rdlong	local05, objptr
0d3ac     03 AE 66 F0 | 	shl	local05, #3
0d3b0     02 00 00 FF 
0d3b4     38 64 86 F1 | 	sub	objptr, ##1080
0d3b8     32 AF 02 F1 | 	add	local05, objptr
0d3bc     04 AE 06 F1 | 	add	local05, #4
0d3c0     57 BB 02 FB | 	rdlong	local11, local05
0d3c4     FE BB 0E F2 | 	cmp	local11, #510 wz
0d3c8     36 00 00 FF 
0d3cc     B0 65 86 F1 | 	sub	objptr, ##28080
0d3d0     0E 7A 06 A6 |  if_e	mov	result1, #14
0d3d4     88 01 90 AD |  if_e	jmp	#LR__1079
0d3d8                 | LR__1077
0d3d8     5A A9 02 F6 | 	mov	local02, local08
0d3dc     11 AA 06 F6 | 	mov	local03, #17
0d3e0     59 A7 02 F6 | 	mov	local01, local07
0d3e4     53 B9 02 F6 | 	mov	local10, local01
0d3e8     54 BD 02 F6 | 	mov	local12, local02
0d3ec     55 BF 02 F6 | 	mov	local13, local03
0d3f0     4C 00 00 FF 
0d3f4     20 64 06 F1 | 	add	objptr, ##38944
0d3f8     32 C1 02 FB | 	rdlong	local14, objptr
0d3fc     60 C3 02 F6 | 	mov	local15, local14
0d400     01 C2 66 F0 | 	shl	local15, #1
0d404     60 C3 02 F1 | 	add	local15, local14
0d408     02 C2 66 F0 | 	shl	local15, #2
0d40c     03 00 00 FF 
0d410     00 64 86 F1 | 	sub	objptr, ##1536
0d414     32 C3 02 F1 | 	add	local15, objptr
0d418     61 B9 62 FC | 	wrlong	local10, local15
0d41c     03 00 00 FF 
0d420     00 64 06 F1 | 	add	objptr, ##1536
0d424     32 B9 02 FB | 	rdlong	local10, objptr
0d428     5C C5 02 F6 | 	mov	local16, local10
0d42c     01 C4 66 F0 | 	shl	local16, #1
0d430     5C C5 02 F1 | 	add	local16, local10
0d434     02 C4 66 F0 | 	shl	local16, #2
0d438     03 00 00 FF 
0d43c     00 64 86 F1 | 	sub	objptr, ##1536
0d440     32 C5 02 F1 | 	add	local16, objptr
0d444     04 C4 06 F1 | 	add	local16, #4
0d448     62 BD 62 FC | 	wrlong	local12, local16
0d44c     03 00 00 FF 
0d450     00 64 06 F1 | 	add	objptr, ##1536
0d454     32 B9 02 FB | 	rdlong	local10, objptr
0d458     5C C7 02 F6 | 	mov	local17, local10
0d45c     01 C6 66 F0 | 	shl	local17, #1
0d460     5C C7 02 F1 | 	add	local17, local10
0d464     02 C6 66 F0 | 	shl	local17, #2
0d468     03 00 00 FF 
0d46c     00 64 86 F1 | 	sub	objptr, ##1536
0d470     32 C7 02 F1 | 	add	local17, objptr
0d474     08 C6 06 F1 | 	add	local17, #8
0d478     63 BF 62 FC | 	wrlong	local13, local17
0d47c     03 00 00 FF 
0d480     00 64 06 F1 | 	add	objptr, ##1536
0d484     32 B9 02 FB | 	rdlong	local10, objptr
0d488     01 B8 06 F1 | 	add	local10, #1
0d48c     32 B9 62 FC | 	wrlong	local10, objptr
0d490     4C 00 00 FF 
0d494     20 64 86 F1 | 	sub	objptr, ##38944
0d498                 | ' t2.result.twowords(1)=numpar
0d498                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d498                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d498                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d498     FF FF 7F FF 
0d49c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0d4a0     B8 00 90 5D |  if_ne	jmp	#LR__1078
0d4a4     15 AA 06 F6 | 	mov	local03, #21
0d4a8     53 B9 02 F6 | 	mov	local10, local01
0d4ac     54 BD 02 F6 | 	mov	local12, local02
0d4b0     55 BF 02 F6 | 	mov	local13, local03
0d4b4     4C 00 00 FF 
0d4b8     20 64 06 F1 | 	add	objptr, ##38944
0d4bc     32 C1 02 FB | 	rdlong	local14, objptr
0d4c0     60 C3 02 F6 | 	mov	local15, local14
0d4c4     01 C2 66 F0 | 	shl	local15, #1
0d4c8     60 C3 02 F1 | 	add	local15, local14
0d4cc     02 C2 66 F0 | 	shl	local15, #2
0d4d0     03 00 00 FF 
0d4d4     00 64 86 F1 | 	sub	objptr, ##1536
0d4d8     32 C3 02 F1 | 	add	local15, objptr
0d4dc     61 B9 62 FC | 	wrlong	local10, local15
0d4e0     03 00 00 FF 
0d4e4     00 64 06 F1 | 	add	objptr, ##1536
0d4e8     32 C7 02 FB | 	rdlong	local17, objptr
0d4ec     63 C5 02 F6 | 	mov	local16, local17
0d4f0     01 C4 66 F0 | 	shl	local16, #1
0d4f4     63 C5 02 F1 | 	add	local16, local17
0d4f8     02 C4 66 F0 | 	shl	local16, #2
0d4fc     03 00 00 FF 
0d500     00 64 86 F1 | 	sub	objptr, ##1536
0d504     32 C5 02 F1 | 	add	local16, objptr
0d508     04 C4 06 F1 | 	add	local16, #4
0d50c     62 BD 62 FC | 	wrlong	local12, local16
0d510     03 00 00 FF 
0d514     00 64 06 F1 | 	add	objptr, ##1536
0d518     32 C5 02 FB | 	rdlong	local16, objptr
0d51c     62 C7 02 F6 | 	mov	local17, local16
0d520     01 C6 66 F0 | 	shl	local17, #1
0d524     62 C7 02 F1 | 	add	local17, local16
0d528     02 C6 66 F0 | 	shl	local17, #2
0d52c     03 00 00 FF 
0d530     00 64 86 F1 | 	sub	objptr, ##1536
0d534     32 C7 02 F1 | 	add	local17, objptr
0d538     08 C6 06 F1 | 	add	local17, #8
0d53c     63 BF 62 FC | 	wrlong	local13, local17
0d540     03 00 00 FF 
0d544     00 64 06 F1 | 	add	objptr, ##1536
0d548     32 B9 02 FB | 	rdlong	local10, objptr
0d54c     01 B8 06 F1 | 	add	local10, #1
0d550     32 B9 62 FC | 	wrlong	local10, objptr
0d554     4C 00 00 FF 
0d558     20 64 86 F1 | 	sub	objptr, ##38944
0d55c                 | LR__1078
0d55c                 | ' return 0
0d55c     00 7A 06 F6 | 	mov	result1, #0
0d560                 | LR__1079
0d560     E7 F0 03 F6 | 	mov	ptra, fp
0d564     F2 00 A0 FD | 	call	#popregs_
0d568                 | _getvar_ret
0d568     2D 00 64 FD | 	ret
0d56c                 | 
0d56c                 | ' 
0d56c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d56c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' 
0d56c                 | ' 
0d56c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' '                                                                                                                                       -
0d56c                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d56c                 | ' '                                                                                                                                       -
0d56c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' 
0d56c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d56c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' 
0d56c                 | ' function execute_line (astart=0 as integer) as integer
0d56c                 | _execute_line
0d56c     04 CA 05 F6 | 	mov	COUNT_, #4
0d570     E8 00 A0 FD | 	call	#pushregs_
0d574     52 00 00 FF 
0d578     60 64 06 F1 | 	add	objptr, ##42080
0d57c     32 01 68 FC | 	wrlong	#0, objptr
0d580                 | ' 
0d580                 | ' runptr2=0
0d580                 | ' for lineptr_e=astart to lineptr-1
0d580     06 00 00 FF 
0d584     3C 64 86 F1 | 	sub	objptr, ##3132
0d588     32 93 62 FC | 	wrlong	arg01, objptr
0d58c     04 64 86 F1 | 	sub	objptr, #4
0d590     32 A7 02 FB | 	rdlong	local01, objptr
0d594     4C 00 00 FF 
0d598     20 64 86 F1 | 	sub	objptr, ##38944
0d59c                 | LR__1080
0d59c     4C 00 00 FF 
0d5a0     24 64 06 F1 | 	add	objptr, ##38948
0d5a4     32 7B 02 FB | 	rdlong	result1, objptr
0d5a8     4C 00 00 FF 
0d5ac     24 64 86 F1 | 	sub	objptr, ##38948
0d5b0     53 7B 52 F2 | 	cmps	result1, local01 wc
0d5b4     98 00 90 3D |  if_ae	jmp	#LR__1081
0d5b8     4C 00 00 FF 
0d5bc     24 64 06 F1 | 	add	objptr, ##38948
0d5c0     32 7B 02 FB | 	rdlong	result1, objptr
0d5c4     3D A9 02 F6 | 	mov	local02, result1
0d5c8     01 A8 66 F0 | 	shl	local02, #1
0d5cc     3D A9 02 F1 | 	add	local02, result1
0d5d0     02 A8 66 F0 | 	shl	local02, #2
0d5d4     03 00 00 FF 
0d5d8     04 64 86 F1 | 	sub	objptr, ##1540
0d5dc     32 A9 02 F1 | 	add	local02, objptr
0d5e0     08 A8 06 F1 | 	add	local02, #8
0d5e4     54 A9 02 FB | 	rdlong	local02, local02
0d5e8     54 A9 E2 F8 | 	getbyte	local02, local02, #0
0d5ec     02 A8 66 F0 | 	shl	local02, #2
0d5f0     04 00 00 FF 
0d5f4     1C 64 86 F1 | 	sub	objptr, ##2076
0d5f8     32 A9 02 F1 | 	add	local02, objptr
0d5fc     54 A9 02 FB | 	rdlong	local02, local02
0d600     54 AB 02 F6 | 	mov	local03, local02
0d604     13 A8 46 F7 | 	zerox	local02, #19
0d608     14 AA 46 F0 | 	shr	local03, #20
0d60c     02 AA 66 F0 | 	shl	local03, #2
0d610     2D AB 02 F1 | 	add	local03, __methods__
0d614     55 AB 02 FB | 	rdlong	local03, local03
0d618     45 00 00 FF 
0d61c     04 64 86 F1 | 	sub	objptr, ##35332
0d620     32 AD 02 F6 | 	mov	local04, objptr
0d624     54 65 02 F6 | 	mov	objptr, local02
0d628     2D AA 62 FD | 	call	local03
0d62c     56 65 02 F6 | 	mov	objptr, local04
0d630     4C 00 00 FF 
0d634     24 64 06 F1 | 	add	objptr, ##38948
0d638     32 AD 02 FB | 	rdlong	local04, objptr
0d63c     01 AC 06 F1 | 	add	local04, #1
0d640     32 AD 62 FC | 	wrlong	local04, objptr
0d644     4C 00 00 FF 
0d648     24 64 86 F1 | 	sub	objptr, ##38948
0d64c     4C FF 9F FD | 	jmp	#LR__1080
0d650                 | LR__1081
0d650                 | ' return runptr2
0d650     52 00 00 FF 
0d654     60 64 06 F1 | 	add	objptr, ##42080
0d658     32 7B 02 FB | 	rdlong	result1, objptr
0d65c     52 00 00 FF 
0d660     60 64 86 F1 | 	sub	objptr, ##42080
0d664     E7 F0 03 F6 | 	mov	ptra, fp
0d668     F2 00 A0 FD | 	call	#popregs_
0d66c                 | _execute_line_ret
0d66c     2D 00 64 FD | 	ret
0d670                 | 
0d670                 | ' 
0d670                 | ' 
0d670                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d670                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d670                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d670                 | ' 
0d670                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d670                 | ' 
0d670                 | ' function pop() as expr_result
0d670                 | _pop
0d670                 | ' if stackpointer=0 then
0d670     44 00 00 FF 
0d674     FC 65 06 F1 | 	add	objptr, ##35324
0d678     32 7B 0A FB | 	rdlong	result1, objptr wz
0d67c     44 00 00 FF 
0d680     FC 65 86 F1 | 	sub	objptr, ##35324
0d684     FF 84 06 A6 |  if_e	mov	_var03, #255
0d688     18 80 06 A6 |  if_e	mov	_var01, #24
0d68c     60 00 90 AD |  if_e	jmp	#LR__1090
0d690     44 00 00 FF 
0d694     FC 65 06 F1 | 	add	objptr, ##35324
0d698     32 7B 02 FB | 	rdlong	result1, objptr
0d69c     01 7A 86 F1 | 	sub	result1, #1
0d6a0     32 7B 62 FC | 	wrlong	result1, objptr
0d6a4     3D 7F 02 F6 | 	mov	result3, result1
0d6a8     01 7E 66 F0 | 	shl	result3, #1
0d6ac     3D 7F 02 F1 | 	add	result3, result1
0d6b0     02 7E 66 F0 | 	shl	result3, #2
0d6b4     0C 00 00 FF 
0d6b8     0C 64 86 F1 | 	sub	objptr, ##6156
0d6bc     32 7F 02 F1 | 	add	result3, objptr
0d6c0     3F 81 02 FB | 	rdlong	_var01, result3
0d6c4     04 7E 06 F1 | 	add	result3, #4
0d6c8     3F 83 02 FB | 	rdlong	_var02, result3
0d6cc     3D 7D 02 F6 | 	mov	result2, result1
0d6d0     01 7C 66 F0 | 	shl	result2, #1
0d6d4     3D 7D 02 F1 | 	add	result2, result1
0d6d8     02 7C 66 F0 | 	shl	result2, #2
0d6dc     32 7D 02 F1 | 	add	result2, objptr
0d6e0     08 7C 06 F1 | 	add	result2, #8
0d6e4     3E 85 02 FB | 	rdlong	_var03, result2
0d6e8     38 00 00 FF 
0d6ec     F0 65 86 F1 | 	sub	objptr, ##29168
0d6f0                 | LR__1090
0d6f0                 | ' return t1
0d6f0     41 7D 02 F6 | 	mov	result2, _var02
0d6f4     42 7F 02 F6 | 	mov	result3, _var03
0d6f8     40 7B 02 F6 | 	mov	result1, _var01
0d6fc                 | _pop_ret
0d6fc     2D 00 64 FD | 	ret
0d700                 | 
0d700                 | ' 
0d700                 | ' sub push(t1 as expr_result )
0d700                 | _push
0d700                 | ' if stackpointer<maxstack then 
0d700     44 00 00 FF 
0d704     FC 65 06 F1 | 	add	objptr, ##35324
0d708     32 81 02 FB | 	rdlong	_var01, objptr
0d70c     44 00 00 FF 
0d710     FC 65 86 F1 | 	sub	objptr, ##35324
0d714     01 00 00 FF 
0d718     00 80 56 F2 | 	cmps	_var01, ##512 wc
0d71c     BC 00 90 3D |  if_ae	jmp	#LR__1100
0d720     49 81 02 FB | 	rdlong	_var01, arg01
0d724     04 92 06 F1 | 	add	arg01, #4
0d728     49 83 02 FB | 	rdlong	_var02, arg01
0d72c     04 92 06 F1 | 	add	arg01, #4
0d730     49 93 02 FB | 	rdlong	arg01, arg01
0d734     44 00 00 FF 
0d738     FC 65 06 F1 | 	add	objptr, ##35324
0d73c     32 85 02 FB | 	rdlong	_var03, objptr
0d740     42 87 02 F6 | 	mov	_var04, _var03
0d744     01 86 66 F0 | 	shl	_var04, #1
0d748     42 87 02 F1 | 	add	_var04, _var03
0d74c     02 86 66 F0 | 	shl	_var04, #2
0d750     0C 00 00 FF 
0d754     0C 64 86 F1 | 	sub	objptr, ##6156
0d758     32 87 02 F1 | 	add	_var04, objptr
0d75c     43 81 62 FC | 	wrlong	_var01, _var04
0d760     0C 00 00 FF 
0d764     0C 64 06 F1 | 	add	objptr, ##6156
0d768     32 87 02 FB | 	rdlong	_var04, objptr
0d76c     43 85 02 F6 | 	mov	_var03, _var04
0d770     01 84 66 F0 | 	shl	_var03, #1
0d774     43 85 02 F1 | 	add	_var03, _var04
0d778     02 84 66 F0 | 	shl	_var03, #2
0d77c     0C 00 00 FF 
0d780     0C 64 86 F1 | 	sub	objptr, ##6156
0d784     32 85 02 F1 | 	add	_var03, objptr
0d788     04 84 06 F1 | 	add	_var03, #4
0d78c     42 83 62 FC | 	wrlong	_var02, _var03
0d790     0C 00 00 FF 
0d794     0C 64 06 F1 | 	add	objptr, ##6156
0d798     32 87 02 FB | 	rdlong	_var04, objptr
0d79c     43 85 02 F6 | 	mov	_var03, _var04
0d7a0     01 84 66 F0 | 	shl	_var03, #1
0d7a4     43 85 02 F1 | 	add	_var03, _var04
0d7a8     02 84 66 F0 | 	shl	_var03, #2
0d7ac     0C 00 00 FF 
0d7b0     0C 64 86 F1 | 	sub	objptr, ##6156
0d7b4     32 85 02 F1 | 	add	_var03, objptr
0d7b8     08 84 06 F1 | 	add	_var03, #8
0d7bc     42 93 62 FC | 	wrlong	arg01, _var03
0d7c0     0C 00 00 FF 
0d7c4     0C 64 06 F1 | 	add	objptr, ##6156
0d7c8     32 81 02 FB | 	rdlong	_var01, objptr
0d7cc     01 80 06 F1 | 	add	_var01, #1
0d7d0     32 81 62 FC | 	wrlong	_var01, objptr
0d7d4     44 00 00 FF 
0d7d8     FC 65 86 F1 | 	sub	objptr, ##35324
0d7dc                 | LR__1100
0d7dc                 | _push_ret
0d7dc     2D 00 64 FD | 	ret
0d7e0                 | 
0d7e0                 | ' 
0d7e0                 | ' ' -------------------------------- Runtime converting functions
0d7e0                 | ' 
0d7e0                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d7e0                 | ' 
0d7e0                 | ' function  convertstring(psaddr as ulong) as string
0d7e0                 | _convertstring
0d7e0     04 CA 05 F6 | 	mov	COUNT_, #4
0d7e4     E8 00 A0 FD | 	call	#pushregs_
0d7e8     49 A7 02 F6 | 	mov	local01, arg01
0d7ec     48 39 B1 FD | 	call	#_pslpeek
0d7f0     3D A9 02 F6 | 	mov	local02, result1
0d7f4     97 01 00 FF 
0d7f8     77 AA 06 F6 | 	mov	local03, ##@LR__5942
0d7fc                 | ' l=pslpeek(psaddr) 
0d7fc                 | ' s="" 
0d7fc                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d7fc     01 AC 06 F6 | 	mov	local04, #1
0d800     01 A8 06 F1 | 	add	local02, #1
0d804                 | LR__1110
0d804     54 AD 52 F2 | 	cmps	local04, local02 wc
0d808     30 00 90 3D |  if_ae	jmp	#LR__1111
0d80c     53 93 02 F6 | 	mov	arg01, local01
0d810     03 92 06 F1 | 	add	arg01, #3
0d814     56 93 02 F1 | 	add	arg01, local04
0d818     D4 38 B1 FD | 	call	#_pspeek
0d81c     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
0d820     EC 8D B1 FD | 	call	#__system__Chr_S
0d824     3D 95 02 F6 | 	mov	arg02, result1
0d828     55 93 02 F6 | 	mov	arg01, local03
0d82c     D0 73 B1 FD | 	call	#__system___string_concat
0d830     3D AB 02 F6 | 	mov	local03, result1
0d834     01 AC 06 F1 | 	add	local04, #1
0d838     C8 FF 9F FD | 	jmp	#LR__1110
0d83c                 | LR__1111
0d83c                 | ' return s
0d83c     55 7B 02 F6 | 	mov	result1, local03
0d840     E7 F0 03 F6 | 	mov	ptra, fp
0d844     F2 00 A0 FD | 	call	#popregs_
0d848                 | _convertstring_ret
0d848     2D 00 64 FD | 	ret
0d84c                 | 
0d84c                 | ' 
0d84c                 | ' ' converts a variable to an integer
0d84c                 | ' 
0d84c                 | ' function converttoint (t1 as expr_result) as integer 
0d84c                 | _converttoint
0d84c     02 CA 05 F6 | 	mov	COUNT_, #2
0d850     E8 00 A0 FD | 	call	#pushregs_
0d854     49 A7 02 F6 | 	mov	local01, arg01
0d858                 | ' 
0d858                 | ' select case t1.result_type
0d858     08 A6 06 F1 | 	add	local01, #8
0d85c     53 A9 02 FB | 	rdlong	local02, local01
0d860     08 A6 86 F1 | 	sub	local01, #8
0d864     1C A8 0E F2 | 	cmp	local02, #28 wz
0d868     2C 00 90 AD |  if_e	jmp	#LR__1120
0d86c     1D A8 0E F2 | 	cmp	local02, #29 wz
0d870     2C 00 90 AD |  if_e	jmp	#LR__1121
0d874     1E A8 0E F2 | 	cmp	local02, #30 wz
0d878     2C 00 90 AD |  if_e	jmp	#LR__1122
0d87c     1F A8 0E F2 | 	cmp	local02, #31 wz
0d880     34 00 90 AD |  if_e	jmp	#LR__1123
0d884     2B A8 0E F2 | 	cmp	local02, #43 wz
0d888     44 00 90 AD |  if_e	jmp	#LR__1124
0d88c     2C A8 0E F2 | 	cmp	local02, #44 wz
0d890     5C 00 90 AD |  if_e	jmp	#LR__1125
0d894     60 00 90 FD | 	jmp	#LR__1126
0d898                 | LR__1120
0d898     53 7B 02 FB | 	rdlong	result1, local01
0d89c     5C 00 90 FD | 	jmp	#LR__1127
0d8a0                 | LR__1121
0d8a0     53 7B 02 FB | 	rdlong	result1, local01
0d8a4     54 00 90 FD | 	jmp	#LR__1127
0d8a8                 | LR__1122
0d8a8     53 93 02 FB | 	rdlong	arg01, local01
0d8ac     01 94 06 F6 | 	mov	arg02, #1
0d8b0     88 9E B1 FD | 	call	#__system___float_tointeger
0d8b4     44 00 90 FD | 	jmp	#LR__1127
0d8b8                 | LR__1123
0d8b8     53 93 02 FB | 	rdlong	arg01, local01
0d8bc     D0 A1 B1 FD | 	call	#__system____builtin_atof
0d8c0     3D 93 02 F6 | 	mov	arg01, result1
0d8c4     01 94 06 F6 | 	mov	arg02, #1
0d8c8     70 9E B1 FD | 	call	#__system___float_tointeger
0d8cc     2C 00 90 FD | 	jmp	#LR__1127
0d8d0                 | LR__1124
0d8d0     53 93 02 FB | 	rdlong	arg01, local01
0d8d4     08 FF BF FD | 	call	#_convertstring
0d8d8     3D 93 02 F6 | 	mov	arg01, result1
0d8dc     B0 A1 B1 FD | 	call	#__system____builtin_atof
0d8e0     3D 93 02 F6 | 	mov	arg01, result1
0d8e4     01 94 06 F6 | 	mov	arg02, #1
0d8e8     50 9E B1 FD | 	call	#__system___float_tointeger
0d8ec     0C 00 90 FD | 	jmp	#LR__1127
0d8f0                 | LR__1125
0d8f0     53 7B 02 FB | 	rdlong	result1, local01
0d8f4     04 00 90 FD | 	jmp	#LR__1127
0d8f8                 | LR__1126
0d8f8     00 7A 06 F6 | 	mov	result1, #0
0d8fc                 | LR__1127
0d8fc     E7 F0 03 F6 | 	mov	ptra, fp
0d900     F2 00 A0 FD | 	call	#popregs_
0d904                 | _converttoint_ret
0d904     2D 00 64 FD | 	ret
0d908                 | 
0d908                 | ' 
0d908                 | ' ' converts a variable to float
0d908                 | ' 
0d908                 | ' function converttofloat (t1 as expr_result) as single
0d908                 | _converttofloat
0d908     03 CA 05 F6 | 	mov	COUNT_, #3
0d90c     E8 00 A0 FD | 	call	#pushregs_
0d910     49 A7 02 F6 | 	mov	local01, arg01
0d914                 | ' 
0d914                 | ' select case t1.result_type
0d914     08 A6 06 F1 | 	add	local01, #8
0d918     53 A9 02 FB | 	rdlong	local02, local01
0d91c     08 A6 86 F1 | 	sub	local01, #8
0d920     1C A8 0E F2 | 	cmp	local02, #28 wz
0d924     24 00 90 AD |  if_e	jmp	#LR__1130
0d928     1D A8 0E F2 | 	cmp	local02, #29 wz
0d92c     38 00 90 AD |  if_e	jmp	#LR__1131
0d930     1E A8 0E F2 | 	cmp	local02, #30 wz
0d934     3C 00 90 AD |  if_e	jmp	#LR__1132
0d938     1F A8 0E F2 | 	cmp	local02, #31 wz
0d93c     3C 00 90 AD |  if_e	jmp	#LR__1133
0d940     2B A8 0E F2 | 	cmp	local02, #43 wz
0d944     40 00 90 AD |  if_e	jmp	#LR__1134
0d948     50 00 90 FD | 	jmp	#LR__1135
0d94c                 | LR__1130
0d94c     53 93 02 FB | 	rdlong	arg01, local01
0d950     49 93 52 F6 | 	abs	arg01, arg01 wc
0d954     1F AA C6 C9 |  if_b	decod	local03, #31
0d958     00 AA 06 36 |  if_ae	mov	local03, #0
0d95c     10 95 B1 FD | 	call	#__system___float_fromuns
0d960     55 7B 62 F5 | 	xor	result1, local03
0d964     38 00 90 FD | 	jmp	#LR__1136
0d968                 | LR__1131
0d968     53 93 02 FB | 	rdlong	arg01, local01
0d96c     00 95 B1 FD | 	call	#__system___float_fromuns
0d970     2C 00 90 FD | 	jmp	#LR__1136
0d974                 | LR__1132
0d974     53 7B 02 FB | 	rdlong	result1, local01
0d978     24 00 90 FD | 	jmp	#LR__1136
0d97c                 | LR__1133
0d97c     53 93 02 FB | 	rdlong	arg01, local01
0d980     0C A1 B1 FD | 	call	#__system____builtin_atof
0d984     18 00 90 FD | 	jmp	#LR__1136
0d988                 | LR__1134
0d988     53 93 02 FB | 	rdlong	arg01, local01
0d98c     50 FE BF FD | 	call	#_convertstring
0d990     3D 93 02 F6 | 	mov	arg01, result1
0d994     F8 A0 B1 FD | 	call	#__system____builtin_atof
0d998     04 00 90 FD | 	jmp	#LR__1136
0d99c                 | LR__1135
0d99c     00 7A 06 F6 | 	mov	result1, #0
0d9a0                 | LR__1136
0d9a0     E7 F0 03 F6 | 	mov	ptra, fp
0d9a4     F2 00 A0 FD | 	call	#popregs_
0d9a8                 | _converttofloat_ret
0d9a8     2D 00 64 FD | 	ret
0d9ac                 | 
0d9ac                 | ' 
0d9ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9ac                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d9ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9ac                 | ' 
0d9ac                 | ' 
0d9ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9ac                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d9ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9ac                 | ' 
0d9ac                 | ' '-------------------- abs
0d9ac                 | ' 
0d9ac                 | ' sub do_abs
0d9ac                 | _do_abs
0d9ac     01 CA 05 F6 | 	mov	COUNT_, #1
0d9b0     E8 00 A0 FD | 	call	#pushregs_
0d9b4     0C F0 07 F1 | 	add	ptra, #12
0d9b8     B4 FC BF FD | 	call	#_pop
0d9bc     3F A7 02 F6 | 	mov	local01, result3
0d9c0     E7 7A 62 FC | 	wrlong	result1, fp
0d9c4     04 CE 05 F1 | 	add	fp, #4
0d9c8     E7 7C 62 FC | 	wrlong	result2, fp
0d9cc     04 CE 05 F1 | 	add	fp, #4
0d9d0     E7 A6 62 FC | 	wrlong	local01, fp
0d9d4                 | ' 
0d9d4                 | ' t1=pop()
0d9d4                 | ' if t1.result_type=result_int then 
0d9d4     08 CE 85 F1 | 	sub	fp, #8
0d9d8     1C A6 0E F2 | 	cmp	local01, #28 wz
0d9dc     E7 92 02 AB |  if_e	rdlong	arg01, fp
0d9e0     49 A7 42 A6 |  if_e	abs	local01, arg01
0d9e4     E7 A6 62 AC |  if_e	wrlong	local01, fp
0d9e8     2C 00 90 AD |  if_e	jmp	#LR__1140
0d9ec     08 CE 05 F1 | 	add	fp, #8
0d9f0     E7 A6 02 FB | 	rdlong	local01, fp
0d9f4     08 CE 85 F1 | 	sub	fp, #8
0d9f8     1E A6 0E F2 | 	cmp	local01, #30 wz
0d9fc     E7 7A 02 AB |  if_e	rdlong	result1, fp
0da00     1F 7A 06 A4 |  if_e	bitl	result1, #31
0da04     E7 7A 62 AC |  if_e	wrlong	result1, fp
0da08     08 CE 05 51 |  if_ne	add	fp, #8
0da0c     E7 FE 69 5C |  if_ne	wrlong	#255, fp
0da10     08 CE 85 51 |  if_ne	sub	fp, #8
0da14     E7 50 68 5C |  if_ne	wrlong	#40, fp
0da18                 | LR__1140
0da18     E7 92 02 F6 | 	mov	arg01, fp
0da1c     E0 FC BF FD | 	call	#_push
0da20     E7 F0 03 F6 | 	mov	ptra, fp
0da24     F2 00 A0 FD | 	call	#popregs_
0da28                 | _do_abs_ret
0da28     2D 00 64 FD | 	ret
0da2c                 | 
0da2c                 | ' 
0da2c                 | ' '-------------------- acos
0da2c                 | ' 
0da2c                 | ' sub do_acos
0da2c                 | _do_acos
0da2c     00 CA 05 F6 | 	mov	COUNT_, #0
0da30     E8 00 A0 FD | 	call	#pushregs_
0da34     10 F0 07 F1 | 	add	ptra, #16
0da38     4C 00 00 FF 
0da3c     24 64 06 F1 | 	add	objptr, ##38948
0da40     32 97 02 FB | 	rdlong	arg03, objptr
0da44     4B 95 02 F6 | 	mov	arg02, arg03
0da48     01 94 66 F0 | 	shl	arg02, #1
0da4c     4B 95 02 F1 | 	add	arg02, arg03
0da50     02 94 66 F0 | 	shl	arg02, #2
0da54     03 00 00 FF 
0da58     04 64 86 F1 | 	sub	objptr, ##1540
0da5c     32 95 02 F1 | 	add	arg02, objptr
0da60     4A 97 02 FB | 	rdlong	arg03, arg02
0da64                 | ' 
0da64                 | ' numpar=compiledline(lineptr_e).result.uresult
0da64                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0da64     02 96 16 F2 | 	cmp	arg03, #2 wc
0da68     49 00 00 FF 
0da6c     20 64 86 F1 | 	sub	objptr, ##37408
0da70     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0da74     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0da78     00 92 06 F6 | 	mov	arg01, #0
0da7c     A8 C6 B1 FD | 	call	#__system___getiolock_0622
0da80     3D 93 02 F6 | 	mov	arg01, result1
0da84     1C 71 B1 FD | 	call	#__system___lockmem
0da88     97 01 00 FF 
0da8c     78 94 06 F6 | 	mov	arg02, ##@LR__5943
0da90     00 92 06 F6 | 	mov	arg01, #0
0da94     00 96 06 F6 | 	mov	arg03, #0
0da98     FC 7D B1 FD | 	call	#__system___basic_print_string
0da9c     00 92 06 F6 | 	mov	arg01, #0
0daa0     84 C6 B1 FD | 	call	#__system___getiolock_0622
0daa4     3D 01 68 FC | 	wrlong	#0, result1
0daa8     27 92 06 F6 | 	mov	arg01, #39
0daac     00 94 06 F6 | 	mov	arg02, #0
0dab0     CC 33 B1 FD | 	call	#_printerror
0dab4     64 00 90 FD | 	jmp	#LR__1151
0dab8                 | LR__1150
0dab8     B4 FB BF FD | 	call	#_pop
0dabc     3F 97 02 F6 | 	mov	arg03, result3
0dac0     E7 7A 62 FC | 	wrlong	result1, fp
0dac4     04 CE 05 F1 | 	add	fp, #4
0dac8     E7 7C 62 FC | 	wrlong	result2, fp
0dacc     04 CE 05 F1 | 	add	fp, #4
0dad0     E7 96 62 FC | 	wrlong	arg03, fp
0dad4     08 CE 85 F1 | 	sub	fp, #8
0dad8     E7 92 02 F6 | 	mov	arg01, fp
0dadc     28 FE BF FD | 	call	#_converttofloat
0dae0     3D 93 02 F6 | 	mov	arg01, result1
0dae4     DC A2 B1 FD | 	call	#__system____builtin_acosf
0dae8     3D 93 02 F6 | 	mov	arg01, result1
0daec     54 00 00 FF 
0daf0     88 64 06 F1 | 	add	objptr, ##43144
0daf4     32 95 02 FB | 	rdlong	arg02, objptr
0daf8     54 00 00 FF 
0dafc     88 64 86 F1 | 	sub	objptr, ##43144
0db00     70 97 B1 FD | 	call	#__system___float_mul
0db04     E7 7A 62 FC | 	wrlong	result1, fp
0db08     08 CE 05 F1 | 	add	fp, #8
0db0c     E7 3C 68 FC | 	wrlong	#30, fp
0db10     08 CE 85 F1 | 	sub	fp, #8
0db14     E7 92 02 F6 | 	mov	arg01, fp
0db18     E4 FB BF FD | 	call	#_push
0db1c                 | LR__1151
0db1c     E7 F0 03 F6 | 	mov	ptra, fp
0db20     F2 00 A0 FD | 	call	#popregs_
0db24                 | _do_acos_ret
0db24     2D 00 64 FD | 	ret
0db28                 | 
0db28                 | ' 
0db28                 | ' '-------------------- asc
0db28                 | ' 
0db28                 | ' sub do_asc
0db28                 | _do_asc
0db28     00 CA 05 F6 | 	mov	COUNT_, #0
0db2c     E8 00 A0 FD | 	call	#pushregs_
0db30     14 F0 07 F1 | 	add	ptra, #20
0db34     4C 00 00 FF 
0db38     24 64 06 F1 | 	add	objptr, ##38948
0db3c     32 97 02 FB | 	rdlong	arg03, objptr
0db40     4B 95 02 F6 | 	mov	arg02, arg03
0db44     01 94 66 F0 | 	shl	arg02, #1
0db48     4B 95 02 F1 | 	add	arg02, arg03
0db4c     02 94 66 F0 | 	shl	arg02, #2
0db50     03 00 00 FF 
0db54     04 64 86 F1 | 	sub	objptr, ##1540
0db58     32 95 02 F1 | 	add	arg02, objptr
0db5c     4A 97 02 FB | 	rdlong	arg03, arg02
0db60                 | ' 
0db60                 | ' numpar=compiledline(lineptr_e).result.uresult
0db60                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0db60     02 96 16 F2 | 	cmp	arg03, #2 wc
0db64     49 00 00 FF 
0db68     20 64 86 F1 | 	sub	objptr, ##37408
0db6c     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0db70     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0db74     00 92 06 F6 | 	mov	arg01, #0
0db78     AC C5 B1 FD | 	call	#__system___getiolock_0622
0db7c     3D 93 02 F6 | 	mov	arg01, result1
0db80     20 70 B1 FD | 	call	#__system___lockmem
0db84     97 01 00 FF 
0db88     7F 94 06 F6 | 	mov	arg02, ##@LR__5944
0db8c     00 92 06 F6 | 	mov	arg01, #0
0db90     00 96 06 F6 | 	mov	arg03, #0
0db94     00 7D B1 FD | 	call	#__system___basic_print_string
0db98     00 92 06 F6 | 	mov	arg01, #0
0db9c     88 C5 B1 FD | 	call	#__system___getiolock_0622
0dba0     3D 01 68 FC | 	wrlong	#0, result1
0dba4     27 92 06 F6 | 	mov	arg01, #39
0dba8     00 94 06 F6 | 	mov	arg02, #0
0dbac     D0 32 B1 FD | 	call	#_printerror
0dbb0     B4 00 90 FD | 	jmp	#LR__1163
0dbb4                 | LR__1160
0dbb4     B8 FA BF FD | 	call	#_pop
0dbb8     3F 97 02 F6 | 	mov	arg03, result3
0dbbc     E7 7A 62 FC | 	wrlong	result1, fp
0dbc0     04 CE 05 F1 | 	add	fp, #4
0dbc4     E7 7C 62 FC | 	wrlong	result2, fp
0dbc8     04 CE 05 F1 | 	add	fp, #4
0dbcc     E7 96 62 FC | 	wrlong	arg03, fp
0dbd0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0dbd0     08 CE 85 F1 | 	sub	fp, #8
0dbd4     2B 96 0E F2 | 	cmp	arg03, #43 wz
0dbd8     18 00 90 5D |  if_ne	jmp	#LR__1161
0dbdc     E7 92 02 FB | 	rdlong	arg01, fp
0dbe0     FC FB BF FD | 	call	#_convertstring
0dbe4     E7 7A 62 FC | 	wrlong	result1, fp
0dbe8     08 CE 05 F1 | 	add	fp, #8
0dbec     E7 3E 68 FC | 	wrlong	#31, fp
0dbf0     08 CE 85 F1 | 	sub	fp, #8
0dbf4                 | LR__1161
0dbf4                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0dbf4     08 CE 05 F1 | 	add	fp, #8
0dbf8     E7 96 02 FB | 	rdlong	arg03, fp
0dbfc     08 CE 85 F1 | 	sub	fp, #8
0dc00     1F 96 0E F2 | 	cmp	arg03, #31 wz
0dc04     40 00 90 AD |  if_e	jmp	#LR__1162
0dc08     00 92 06 F6 | 	mov	arg01, #0
0dc0c     18 C5 B1 FD | 	call	#__system___getiolock_0622
0dc10     3D 93 02 F6 | 	mov	arg01, result1
0dc14     8C 6F B1 FD | 	call	#__system___lockmem
0dc18     97 01 00 FF 
0dc1c     85 94 06 F6 | 	mov	arg02, ##@LR__5945
0dc20     00 92 06 F6 | 	mov	arg01, #0
0dc24     00 96 06 F6 | 	mov	arg03, #0
0dc28     6C 7C B1 FD | 	call	#__system___basic_print_string
0dc2c     00 92 06 F6 | 	mov	arg01, #0
0dc30     F4 C4 B1 FD | 	call	#__system___getiolock_0622
0dc34     3D 01 68 FC | 	wrlong	#0, result1
0dc38     0F 92 06 F6 | 	mov	arg01, #15
0dc3c     00 94 06 F6 | 	mov	arg02, #0
0dc40     3C 32 B1 FD | 	call	#_printerror
0dc44     20 00 90 FD | 	jmp	#LR__1163
0dc48                 | LR__1162
0dc48     E7 7C 02 FB | 	rdlong	result2, fp
0dc4c     3E 7D C2 FA | 	rdbyte	result2, result2
0dc50     E7 7C 62 FC | 	wrlong	result2, fp
0dc54     08 CE 05 F1 | 	add	fp, #8
0dc58     E7 38 68 FC | 	wrlong	#28, fp
0dc5c     08 CE 85 F1 | 	sub	fp, #8
0dc60     E7 92 02 F6 | 	mov	arg01, fp
0dc64     98 FA BF FD | 	call	#_push
0dc68                 | LR__1163
0dc68     E7 F0 03 F6 | 	mov	ptra, fp
0dc6c     F2 00 A0 FD | 	call	#popregs_
0dc70                 | _do_asc_ret
0dc70     2D 00 64 FD | 	ret
0dc74                 | 
0dc74                 | ' 
0dc74                 | ' '-------------------- asin
0dc74                 | ' 
0dc74                 | ' sub do_asin
0dc74                 | _do_asin
0dc74     00 CA 05 F6 | 	mov	COUNT_, #0
0dc78     E8 00 A0 FD | 	call	#pushregs_
0dc7c     10 F0 07 F1 | 	add	ptra, #16
0dc80     4C 00 00 FF 
0dc84     24 64 06 F1 | 	add	objptr, ##38948
0dc88     32 97 02 FB | 	rdlong	arg03, objptr
0dc8c     4B 95 02 F6 | 	mov	arg02, arg03
0dc90     01 94 66 F0 | 	shl	arg02, #1
0dc94     4B 95 02 F1 | 	add	arg02, arg03
0dc98     02 94 66 F0 | 	shl	arg02, #2
0dc9c     03 00 00 FF 
0dca0     04 64 86 F1 | 	sub	objptr, ##1540
0dca4     32 95 02 F1 | 	add	arg02, objptr
0dca8     4A 97 02 FB | 	rdlong	arg03, arg02
0dcac                 | ' 
0dcac                 | ' numpar=compiledline(lineptr_e).result.uresult
0dcac                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0dcac     02 96 16 F2 | 	cmp	arg03, #2 wc
0dcb0     49 00 00 FF 
0dcb4     20 64 86 F1 | 	sub	objptr, ##37408
0dcb8     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0dcbc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0dcc0     00 92 06 F6 | 	mov	arg01, #0
0dcc4     60 C4 B1 FD | 	call	#__system___getiolock_0622
0dcc8     3D 93 02 F6 | 	mov	arg01, result1
0dccc     D4 6E B1 FD | 	call	#__system___lockmem
0dcd0     97 01 00 FF 
0dcd4     8B 94 06 F6 | 	mov	arg02, ##@LR__5946
0dcd8     00 92 06 F6 | 	mov	arg01, #0
0dcdc     00 96 06 F6 | 	mov	arg03, #0
0dce0     B4 7B B1 FD | 	call	#__system___basic_print_string
0dce4     00 92 06 F6 | 	mov	arg01, #0
0dce8     3C C4 B1 FD | 	call	#__system___getiolock_0622
0dcec     3D 01 68 FC | 	wrlong	#0, result1
0dcf0     27 92 06 F6 | 	mov	arg01, #39
0dcf4     00 94 06 F6 | 	mov	arg02, #0
0dcf8     84 31 B1 FD | 	call	#_printerror
0dcfc     64 00 90 FD | 	jmp	#LR__1171
0dd00                 | LR__1170
0dd00     6C F9 BF FD | 	call	#_pop
0dd04     3F 97 02 F6 | 	mov	arg03, result3
0dd08     E7 7A 62 FC | 	wrlong	result1, fp
0dd0c     04 CE 05 F1 | 	add	fp, #4
0dd10     E7 7C 62 FC | 	wrlong	result2, fp
0dd14     04 CE 05 F1 | 	add	fp, #4
0dd18     E7 96 62 FC | 	wrlong	arg03, fp
0dd1c     08 CE 85 F1 | 	sub	fp, #8
0dd20     E7 92 02 F6 | 	mov	arg01, fp
0dd24     E0 FB BF FD | 	call	#_converttofloat
0dd28     3D 93 02 F6 | 	mov	arg01, result1
0dd2c     48 A0 B1 FD | 	call	#__system____builtin_asinf
0dd30     3D 93 02 F6 | 	mov	arg01, result1
0dd34     54 00 00 FF 
0dd38     88 64 06 F1 | 	add	objptr, ##43144
0dd3c     32 95 02 FB | 	rdlong	arg02, objptr
0dd40     54 00 00 FF 
0dd44     88 64 86 F1 | 	sub	objptr, ##43144
0dd48     28 95 B1 FD | 	call	#__system___float_mul
0dd4c     E7 7A 62 FC | 	wrlong	result1, fp
0dd50     08 CE 05 F1 | 	add	fp, #8
0dd54     E7 3C 68 FC | 	wrlong	#30, fp
0dd58     08 CE 85 F1 | 	sub	fp, #8
0dd5c     E7 92 02 F6 | 	mov	arg01, fp
0dd60     9C F9 BF FD | 	call	#_push
0dd64                 | LR__1171
0dd64     E7 F0 03 F6 | 	mov	ptra, fp
0dd68     F2 00 A0 FD | 	call	#popregs_
0dd6c                 | _do_asin_ret
0dd6c     2D 00 64 FD | 	ret
0dd70                 | 
0dd70                 | ' 
0dd70                 | ' '-------------------- atn
0dd70                 | ' 
0dd70                 | ' sub do_atn
0dd70                 | _do_atn
0dd70     00 CA 05 F6 | 	mov	COUNT_, #0
0dd74     E8 00 A0 FD | 	call	#pushregs_
0dd78     10 F0 07 F1 | 	add	ptra, #16
0dd7c     4C 00 00 FF 
0dd80     24 64 06 F1 | 	add	objptr, ##38948
0dd84     32 97 02 FB | 	rdlong	arg03, objptr
0dd88     4B 95 02 F6 | 	mov	arg02, arg03
0dd8c     01 94 66 F0 | 	shl	arg02, #1
0dd90     4B 95 02 F1 | 	add	arg02, arg03
0dd94     02 94 66 F0 | 	shl	arg02, #2
0dd98     03 00 00 FF 
0dd9c     04 64 86 F1 | 	sub	objptr, ##1540
0dda0     32 95 02 F1 | 	add	arg02, objptr
0dda4     4A 97 02 FB | 	rdlong	arg03, arg02
0dda8                 | ' 
0dda8                 | ' numpar=compiledline(lineptr_e).result.uresult
0dda8                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0dda8     02 96 16 F2 | 	cmp	arg03, #2 wc
0ddac     49 00 00 FF 
0ddb0     20 64 86 F1 | 	sub	objptr, ##37408
0ddb4     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0ddb8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1180
0ddbc     00 92 06 F6 | 	mov	arg01, #0
0ddc0     64 C3 B1 FD | 	call	#__system___getiolock_0622
0ddc4     3D 93 02 F6 | 	mov	arg01, result1
0ddc8     D8 6D B1 FD | 	call	#__system___lockmem
0ddcc     97 01 00 FF 
0ddd0     92 94 06 F6 | 	mov	arg02, ##@LR__5947
0ddd4     00 92 06 F6 | 	mov	arg01, #0
0ddd8     00 96 06 F6 | 	mov	arg03, #0
0dddc     B8 7A B1 FD | 	call	#__system___basic_print_string
0dde0     00 92 06 F6 | 	mov	arg01, #0
0dde4     40 C3 B1 FD | 	call	#__system___getiolock_0622
0dde8     3D 01 68 FC | 	wrlong	#0, result1
0ddec     27 92 06 F6 | 	mov	arg01, #39
0ddf0     00 94 06 F6 | 	mov	arg02, #0
0ddf4     88 30 B1 FD | 	call	#_printerror
0ddf8     6C 00 90 FD | 	jmp	#LR__1181
0ddfc                 | LR__1180
0ddfc     70 F8 BF FD | 	call	#_pop
0de00     3F 97 02 F6 | 	mov	arg03, result3
0de04     E7 7A 62 FC | 	wrlong	result1, fp
0de08     04 CE 05 F1 | 	add	fp, #4
0de0c     E7 7C 62 FC | 	wrlong	result2, fp
0de10     04 CE 05 F1 | 	add	fp, #4
0de14     E7 96 62 FC | 	wrlong	arg03, fp
0de18     08 CE 85 F1 | 	sub	fp, #8
0de1c     E7 92 02 F6 | 	mov	arg01, fp
0de20     E4 FA BF FD | 	call	#_converttofloat
0de24     3D 93 02 F6 | 	mov	arg01, result1
0de28     00 C0 1F FF 
0de2c     00 94 06 F6 | 	mov	arg02, ##1065353216
0de30     DC 9F B1 FD | 	call	#__system____builtin_atan2f
0de34     3D 93 02 F6 | 	mov	arg01, result1
0de38     54 00 00 FF 
0de3c     88 64 06 F1 | 	add	objptr, ##43144
0de40     32 95 02 FB | 	rdlong	arg02, objptr
0de44     54 00 00 FF 
0de48     88 64 86 F1 | 	sub	objptr, ##43144
0de4c     24 94 B1 FD | 	call	#__system___float_mul
0de50     E7 7A 62 FC | 	wrlong	result1, fp
0de54     08 CE 05 F1 | 	add	fp, #8
0de58     E7 3C 68 FC | 	wrlong	#30, fp
0de5c     08 CE 85 F1 | 	sub	fp, #8
0de60     E7 92 02 F6 | 	mov	arg01, fp
0de64     98 F8 BF FD | 	call	#_push
0de68                 | LR__1181
0de68     E7 F0 03 F6 | 	mov	ptra, fp
0de6c     F2 00 A0 FD | 	call	#popregs_
0de70                 | _do_atn_ret
0de70     2D 00 64 FD | 	ret
0de74                 | 
0de74                 | ' 
0de74                 | ' '-------------------- beep
0de74                 | ' 
0de74                 | ' sub do_beep
0de74                 | _do_beep
0de74     02 CA 05 F6 | 	mov	COUNT_, #2
0de78     E8 00 A0 FD | 	call	#pushregs_
0de7c     1C F0 07 F1 | 	add	ptra, #28
0de80     EC F7 BF FD | 	call	#_pop
0de84     3D 9F 02 F6 | 	mov	arg07, result1
0de88     3E 9D 02 F6 | 	mov	arg06, result2
0de8c     3F A7 02 F6 | 	mov	local01, result3
0de90     0C CE 05 F1 | 	add	fp, #12
0de94     E7 9E 62 FC | 	wrlong	arg07, fp
0de98     04 CE 05 F1 | 	add	fp, #4
0de9c     E7 9C 62 FC | 	wrlong	arg06, fp
0dea0     04 CE 05 F1 | 	add	fp, #4
0dea4     E7 A6 62 FC | 	wrlong	local01, fp
0dea8     14 CE 85 F1 | 	sub	fp, #20
0deac     C0 F7 BF FD | 	call	#_pop
0deb0     E7 7A 62 FC | 	wrlong	result1, fp
0deb4     04 CE 05 F1 | 	add	fp, #4
0deb8     E7 7C 62 FC | 	wrlong	result2, fp
0debc     04 CE 05 F1 | 	add	fp, #4
0dec0     E7 7E 62 FC | 	wrlong	result3, fp
0dec4                 | ' 
0dec4                 | ' 
0dec4                 | ' t2=pop()
0dec4                 | ' t1=pop()
0dec4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0dec4     3F 9F 02 F6 | 	mov	arg07, result3
0dec8     08 CE 85 F1 | 	sub	fp, #8
0decc     1C 9E 0E F2 | 	cmp	arg07, #28 wz
0ded0     08 CE 05 51 |  if_ne	add	fp, #8
0ded4     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0ded8     08 CE 85 51 |  if_ne	sub	fp, #8
0dedc     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0dee0     E7 A8 02 AB |  if_e	rdlong	local02, fp
0dee4     0C 00 90 AD |  if_e	jmp	#LR__1190
0dee8     E7 92 02 F6 | 	mov	arg01, fp
0deec     5C F9 BF FD | 	call	#_converttoint
0def0     3D A9 02 F6 | 	mov	local02, result1
0def4                 | LR__1190
0def4     32 95 02 F6 | 	mov	arg02, objptr
0def8     16 00 00 FF 
0defc     98 94 06 F1 | 	add	arg02, ##11416
0df00     07 92 06 F6 | 	mov	arg01, #7
0df04     54 97 02 F6 | 	mov	arg03, local02
0df08     0C 98 C6 F9 | 	decod	arg04, #12
0df0c     08 9A 06 F6 | 	mov	arg05, #8
0df10     00 9C 06 F6 | 	mov	arg06, #0
0df14     00 9E 06 F6 | 	mov	arg07, #0
0df18     0B 00 00 FF 
0df1c     CC 64 06 F1 | 	add	objptr, ##5836
0df20     E0 68 B1 FD | 	call	#_Audio2_004_spin2_beep
0df24     0B 00 00 FF 
0df28     CC 64 86 F1 | 	sub	objptr, ##5836
0df2c     E7 92 02 F6 | 	mov	arg01, fp
0df30     0C 92 06 F1 | 	add	arg01, #12
0df34     C8 F7 BF FD | 	call	#_push
0df38     28 D6 B0 FD | 	call	#_do_waitms
0df3c     0B 00 00 FF 
0df40     CC 64 06 F1 | 	add	objptr, ##5836
0df44                 | ' 
0df44                 | ' base2:=@channel0[0]+64*channel
0df44     32 A9 02 F6 | 	mov	local02, objptr
0df48                 | ' word[base2+32]:=0
0df48     EC A9 06 F1 | 	add	local02, #492
0df4c     54 01 58 FC | 	wrword	#0, local02
0df50     0B 00 00 FF 
0df54     CC 64 86 F1 | 	sub	objptr, ##5836
0df58     E7 F0 03 F6 | 	mov	ptra, fp
0df5c     F2 00 A0 FD | 	call	#popregs_
0df60                 | _do_beep_ret
0df60     2D 00 64 FD | 	ret
0df64                 | 
0df64                 | ' 
0df64                 | ' '-------------------- blit
0df64                 | ' 
0df64                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0df64                 | ' sub do_blit
0df64                 | _do_blit
0df64     03 CA 05 F6 | 	mov	COUNT_, #3
0df68     E8 00 A0 FD | 	call	#pushregs_
0df6c     3C F0 07 F1 | 	add	ptra, #60
0df70     4C 00 00 FF 
0df74     24 64 06 F1 | 	add	objptr, ##38948
0df78     32 A5 02 FB | 	rdlong	arg10, objptr
0df7c     52 A3 02 F6 | 	mov	arg09, arg10
0df80     01 A2 66 F0 | 	shl	arg09, #1
0df84     52 A3 02 F1 | 	add	arg09, arg10
0df88     02 A2 66 F0 | 	shl	arg09, #2
0df8c     03 00 00 FF 
0df90     04 64 86 F1 | 	sub	objptr, ##1540
0df94     32 A3 02 F1 | 	add	arg09, objptr
0df98     51 A7 02 FB | 	rdlong	local01, arg09
0df9c                 | ' 
0df9c                 | ' numpar=compiledline(lineptr_e).result.uresult
0df9c                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0df9c     0A A6 0E F2 | 	cmp	local01, #10 wz
0dfa0     49 00 00 FF 
0dfa4     20 64 86 F1 | 	sub	objptr, ##37408
0dfa8     06 A6 0E 52 |  if_ne	cmp	local01, #6 wz
0dfac     50 00 90 AD |  if_e	jmp	#LR__1200
0dfb0     00 92 06 F6 | 	mov	arg01, #0
0dfb4     70 C1 B1 FD | 	call	#__system___getiolock_0622
0dfb8     3D 93 02 F6 | 	mov	arg01, result1
0dfbc     E4 6B B1 FD | 	call	#__system___lockmem
0dfc0     97 01 00 FF 
0dfc4     98 94 06 F6 | 	mov	arg02, ##@LR__5948
0dfc8     00 92 06 F6 | 	mov	arg01, #0
0dfcc     00 96 06 F6 | 	mov	arg03, #0
0dfd0     C4 78 B1 FD | 	call	#__system___basic_print_string
0dfd4     00 92 06 F6 | 	mov	arg01, #0
0dfd8     4C C1 B1 FD | 	call	#__system___getiolock_0622
0dfdc     3D 01 68 FC | 	wrlong	#0, result1
0dfe0     52 00 00 FF 
0dfe4     94 64 06 F1 | 	add	objptr, ##42132
0dfe8     32 95 02 FB | 	rdlong	arg02, objptr
0dfec     52 00 00 FF 
0dff0     94 64 86 F1 | 	sub	objptr, ##42132
0dff4     27 92 06 F6 | 	mov	arg01, #39
0dff8     84 2E B1 FD | 	call	#_printerror
0dffc     04 01 90 FD | 	jmp	#LR__1205
0e000                 | LR__1200
0e000                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0e000     53 A9 02 F6 | 	mov	local02, local01
0e004     01 A8 86 F1 | 	sub	local02, #1
0e008                 | LR__1201
0e008     53 A5 02 F6 | 	mov	arg10, local01
0e00c     01 A4 86 F1 | 	sub	arg10, #1
0e010     52 A9 1A F2 | 	cmp	local02, arg10 wcz
0e014     40 00 90 1D |  if_a	jmp	#LR__1202
0e018     54 F6 BF FD | 	call	#_pop
0e01c     E7 7A 62 FC | 	wrlong	result1, fp
0e020     04 CE 05 F1 | 	add	fp, #4
0e024     E7 7C 62 FC | 	wrlong	result2, fp
0e028     04 CE 05 F1 | 	add	fp, #4
0e02c     E7 7E 62 FC | 	wrlong	result3, fp
0e030     54 AB 02 F6 | 	mov	local03, local02
0e034     02 AA 66 F0 | 	shl	local03, #2
0e038     04 CE 05 F1 | 	add	fp, #4
0e03c     E7 AA 02 F1 | 	add	local03, fp
0e040     0C CE 85 F1 | 	sub	fp, #12
0e044     E7 92 02 F6 | 	mov	arg01, fp
0e048     00 F8 BF FD | 	call	#_converttoint
0e04c     55 7B 62 FC | 	wrlong	result1, local03
0e050     01 A8 86 F1 | 	sub	local02, #1
0e054     B0 FF 9F FD | 	jmp	#LR__1201
0e058                 | LR__1202
0e058                 | ' if numpar=10 then 
0e058     0A A6 0E F2 | 	cmp	local01, #10 wz
0e05c     5C 00 90 5D |  if_ne	jmp	#LR__1203
0e060     0C CE 05 F1 | 	add	fp, #12
0e064     E7 92 02 FB | 	rdlong	arg01, fp
0e068     04 CE 05 F1 | 	add	fp, #4
0e06c     E7 94 02 FB | 	rdlong	arg02, fp
0e070     04 CE 05 F1 | 	add	fp, #4
0e074     E7 96 02 FB | 	rdlong	arg03, fp
0e078     04 CE 05 F1 | 	add	fp, #4
0e07c     E7 98 02 FB | 	rdlong	arg04, fp
0e080     04 CE 05 F1 | 	add	fp, #4
0e084     E7 9A 02 FB | 	rdlong	arg05, fp
0e088     04 CE 05 F1 | 	add	fp, #4
0e08c     E7 9C 02 FB | 	rdlong	arg06, fp
0e090     04 CE 05 F1 | 	add	fp, #4
0e094     E7 9E 02 FB | 	rdlong	arg07, fp
0e098     04 CE 05 F1 | 	add	fp, #4
0e09c     E7 A0 02 FB | 	rdlong	arg08, fp
0e0a0     04 CE 05 F1 | 	add	fp, #4
0e0a4     E7 A2 02 FB | 	rdlong	arg09, fp
0e0a8     04 CE 05 F1 | 	add	fp, #4
0e0ac     E7 A4 02 FB | 	rdlong	arg10, fp
0e0b0     30 CE 85 F1 | 	sub	fp, #48
0e0b4     A8 55 B1 FD | 	call	#_hg010b_spin2_blit
0e0b8     48 00 90 FD | 	jmp	#LR__1204
0e0bc                 | LR__1203
0e0bc     32 9F 02 FB | 	rdlong	arg07, objptr
0e0c0     0C CE 05 F1 | 	add	fp, #12
0e0c4     E7 94 02 FB | 	rdlong	arg02, fp
0e0c8     04 CE 05 F1 | 	add	fp, #4
0e0cc     E7 96 02 FB | 	rdlong	arg03, fp
0e0d0     04 CE 05 F1 | 	add	fp, #4
0e0d4     E7 98 02 FB | 	rdlong	arg04, fp
0e0d8     04 CE 05 F1 | 	add	fp, #4
0e0dc     E7 9A 02 FB | 	rdlong	arg05, fp
0e0e0     04 CE 05 F1 | 	add	fp, #4
0e0e4     E7 A0 02 FB | 	rdlong	arg08, fp
0e0e8     04 CE 05 F1 | 	add	fp, #4
0e0ec     E7 A2 02 FB | 	rdlong	arg09, fp
0e0f0     20 CE 85 F1 | 	sub	fp, #32
0e0f4     4F 93 02 F6 | 	mov	arg01, arg07
0e0f8     0A 9C C6 F9 | 	decod	arg06, #10
0e0fc     0A A4 C6 F9 | 	decod	arg10, #10
0e100     5C 55 B1 FD | 	call	#_hg010b_spin2_blit
0e104                 | LR__1204
0e104                 | LR__1205
0e104     E7 F0 03 F6 | 	mov	ptra, fp
0e108     F2 00 A0 FD | 	call	#popregs_
0e10c                 | _do_blit_ret
0e10c     2D 00 64 FD | 	ret
0e110                 | 
0e110                 | ' 
0e110                 | ' 
0e110                 | ' '-------------------- bin$
0e110                 | ' 
0e110                 | ' sub do_bin
0e110                 | _do_bin
0e110     02 CA 05 F6 | 	mov	COUNT_, #2
0e114     E8 00 A0 FD | 	call	#pushregs_
0e118     18 F0 07 F1 | 	add	ptra, #24
0e11c     4C 00 00 FF 
0e120     24 64 06 F1 | 	add	objptr, ##38948
0e124     32 97 02 FB | 	rdlong	arg03, objptr
0e128     4B 95 02 F6 | 	mov	arg02, arg03
0e12c     01 94 66 F0 | 	shl	arg02, #1
0e130     4B 95 02 F1 | 	add	arg02, arg03
0e134     02 94 66 F0 | 	shl	arg02, #2
0e138     03 00 00 FF 
0e13c     04 64 86 F1 | 	sub	objptr, ##1540
0e140     32 95 02 F1 | 	add	arg02, objptr
0e144     4A A7 02 FB | 	rdlong	local01, arg02
0e148                 | ' 
0e148                 | ' numpar=compiledline(lineptr_e).result.uresult
0e148                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e148     03 A6 16 F2 | 	cmp	local01, #3 wc
0e14c     49 00 00 FF 
0e150     20 64 86 F1 | 	sub	objptr, ##37408
0e154     00 A6 0E C2 |  if_b	cmp	local01, #0 wz
0e158     40 00 90 4D |  if_c_and_nz	jmp	#LR__1210
0e15c     00 92 06 F6 | 	mov	arg01, #0
0e160     C4 BF B1 FD | 	call	#__system___getiolock_0622
0e164     3D 93 02 F6 | 	mov	arg01, result1
0e168     38 6A B1 FD | 	call	#__system___lockmem
0e16c     97 01 00 FF 
0e170     9F 94 06 F6 | 	mov	arg02, ##@LR__5949
0e174     00 92 06 F6 | 	mov	arg01, #0
0e178     00 96 06 F6 | 	mov	arg03, #0
0e17c     18 77 B1 FD | 	call	#__system___basic_print_string
0e180     00 92 06 F6 | 	mov	arg01, #0
0e184     A0 BF B1 FD | 	call	#__system___getiolock_0622
0e188     3D 01 68 FC | 	wrlong	#0, result1
0e18c     27 92 06 F6 | 	mov	arg01, #39
0e190     00 94 06 F6 | 	mov	arg02, #0
0e194     E8 2C B1 FD | 	call	#_printerror
0e198     8C 00 90 FD | 	jmp	#LR__1213
0e19c                 | LR__1210
0e19c                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e19c     02 A6 0E F2 | 	cmp	local01, #2 wz
0e1a0     30 00 90 5D |  if_ne	jmp	#LR__1211
0e1a4     C8 F4 BF FD | 	call	#_pop
0e1a8     3F A7 02 F6 | 	mov	local01, result3
0e1ac     E7 7A 62 FC | 	wrlong	result1, fp
0e1b0     04 CE 05 F1 | 	add	fp, #4
0e1b4     E7 7C 62 FC | 	wrlong	result2, fp
0e1b8     04 CE 05 F1 | 	add	fp, #4
0e1bc     E7 A6 62 FC | 	wrlong	local01, fp
0e1c0     08 CE 85 F1 | 	sub	fp, #8
0e1c4     E7 92 02 F6 | 	mov	arg01, fp
0e1c8     80 F6 BF FD | 	call	#_converttoint
0e1cc     3D A9 02 F6 | 	mov	local02, result1
0e1d0     04 00 90 FD | 	jmp	#LR__1212
0e1d4                 | LR__1211
0e1d4     00 A8 06 F6 | 	mov	local02, #0
0e1d8                 | LR__1212
0e1d8     94 F4 BF FD | 	call	#_pop
0e1dc     3F A7 02 F6 | 	mov	local01, result3
0e1e0     E7 7A 62 FC | 	wrlong	result1, fp
0e1e4     04 CE 05 F1 | 	add	fp, #4
0e1e8     E7 7C 62 FC | 	wrlong	result2, fp
0e1ec     04 CE 05 F1 | 	add	fp, #4
0e1f0     E7 A6 62 FC | 	wrlong	local01, fp
0e1f4     08 CE 85 F1 | 	sub	fp, #8
0e1f8     E7 92 02 F6 | 	mov	arg01, fp
0e1fc     4C F6 BF FD | 	call	#_converttoint
0e200     3D 93 02 F6 | 	mov	arg01, result1
0e204     54 95 02 F6 | 	mov	arg02, local02
0e208     02 96 06 F6 | 	mov	arg03, #2
0e20c     90 84 B1 FD | 	call	#__system__Number_S
0e210     E7 7A 62 FC | 	wrlong	result1, fp
0e214     08 CE 05 F1 | 	add	fp, #8
0e218     E7 3E 68 FC | 	wrlong	#31, fp
0e21c     08 CE 85 F1 | 	sub	fp, #8
0e220     E7 92 02 F6 | 	mov	arg01, fp
0e224     D8 F4 BF FD | 	call	#_push
0e228                 | LR__1213
0e228     E7 F0 03 F6 | 	mov	ptra, fp
0e22c     F2 00 A0 FD | 	call	#popregs_
0e230                 | _do_bin_ret
0e230     2D 00 64 FD | 	ret
0e234                 | 
0e234                 | ' 
0e234                 | ' '-------------------- box
0e234                 | ' 
0e234                 | ' sub do_box
0e234                 | _do_box
0e234     03 CA 05 F6 | 	mov	COUNT_, #3
0e238     E8 00 A0 FD | 	call	#pushregs_
0e23c     30 F0 07 F1 | 	add	ptra, #48
0e240     2C F4 BF FD | 	call	#_pop
0e244     3D 9B 02 F6 | 	mov	arg05, result1
0e248     3E 99 02 F6 | 	mov	arg04, result2
0e24c     3F 97 02 F6 | 	mov	arg03, result3
0e250     24 CE 05 F1 | 	add	fp, #36
0e254     E7 9A 62 FC | 	wrlong	arg05, fp
0e258     04 CE 05 F1 | 	add	fp, #4
0e25c     E7 98 62 FC | 	wrlong	arg04, fp
0e260     04 CE 05 F1 | 	add	fp, #4
0e264     E7 96 62 FC | 	wrlong	arg03, fp
0e268     2C CE 85 F1 | 	sub	fp, #44
0e26c     00 F4 BF FD | 	call	#_pop
0e270     3D 9B 02 F6 | 	mov	arg05, result1
0e274     3E 99 02 F6 | 	mov	arg04, result2
0e278     3F 97 02 F6 | 	mov	arg03, result3
0e27c     18 CE 05 F1 | 	add	fp, #24
0e280     E7 9A 62 FC | 	wrlong	arg05, fp
0e284     04 CE 05 F1 | 	add	fp, #4
0e288     E7 98 62 FC | 	wrlong	arg04, fp
0e28c     04 CE 05 F1 | 	add	fp, #4
0e290     E7 96 62 FC | 	wrlong	arg03, fp
0e294     20 CE 85 F1 | 	sub	fp, #32
0e298     D4 F3 BF FD | 	call	#_pop
0e29c     3D 9B 02 F6 | 	mov	arg05, result1
0e2a0     3E 99 02 F6 | 	mov	arg04, result2
0e2a4     3F A7 02 F6 | 	mov	local01, result3
0e2a8     0C CE 05 F1 | 	add	fp, #12
0e2ac     E7 9A 62 FC | 	wrlong	arg05, fp
0e2b0     04 CE 05 F1 | 	add	fp, #4
0e2b4     E7 98 62 FC | 	wrlong	arg04, fp
0e2b8     04 CE 05 F1 | 	add	fp, #4
0e2bc     E7 A6 62 FC | 	wrlong	local01, fp
0e2c0     14 CE 85 F1 | 	sub	fp, #20
0e2c4     A8 F3 BF FD | 	call	#_pop
0e2c8     E7 7A 62 FC | 	wrlong	result1, fp
0e2cc     04 CE 05 F1 | 	add	fp, #4
0e2d0     E7 7C 62 FC | 	wrlong	result2, fp
0e2d4     04 CE 05 F1 | 	add	fp, #4
0e2d8     E7 7E 62 FC | 	wrlong	result3, fp
0e2dc                 | ' 
0e2dc                 | ' t4=pop()
0e2dc                 | ' t3=pop()
0e2dc                 | ' t2=pop()
0e2dc                 | ' t1=pop()
0e2dc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e2dc     3F 9B 02 F6 | 	mov	arg05, result3
0e2e0     08 CE 85 F1 | 	sub	fp, #8
0e2e4     1C 9A 0E F2 | 	cmp	arg05, #28 wz
0e2e8     08 CE 05 51 |  if_ne	add	fp, #8
0e2ec     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0e2f0     08 CE 85 51 |  if_ne	sub	fp, #8
0e2f4     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0e2f8     A8 00 90 5D |  if_ne	jmp	#LR__1220
0e2fc     14 CE 05 F1 | 	add	fp, #20
0e300     E7 A6 02 FB | 	rdlong	local01, fp
0e304     14 CE 85 F1 | 	sub	fp, #20
0e308     1C A6 0E F2 | 	cmp	local01, #28 wz
0e30c     14 CE 05 51 |  if_ne	add	fp, #20
0e310     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e314     14 CE 85 51 |  if_ne	sub	fp, #20
0e318     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e31c     84 00 90 5D |  if_ne	jmp	#LR__1220
0e320     20 CE 05 F1 | 	add	fp, #32
0e324     E7 A6 02 FB | 	rdlong	local01, fp
0e328     20 CE 85 F1 | 	sub	fp, #32
0e32c     1C A6 0E F2 | 	cmp	local01, #28 wz
0e330     20 CE 05 51 |  if_ne	add	fp, #32
0e334     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e338     20 CE 85 51 |  if_ne	sub	fp, #32
0e33c     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e340     60 00 90 5D |  if_ne	jmp	#LR__1220
0e344     2C CE 05 F1 | 	add	fp, #44
0e348     E7 A6 02 FB | 	rdlong	local01, fp
0e34c     2C CE 85 F1 | 	sub	fp, #44
0e350     1C A6 0E F2 | 	cmp	local01, #28 wz
0e354     2C CE 05 51 |  if_ne	add	fp, #44
0e358     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e35c     2C CE 85 51 |  if_ne	sub	fp, #44
0e360     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e364     3C 00 90 5D |  if_ne	jmp	#LR__1220
0e368     E7 92 02 FB | 	rdlong	arg01, fp
0e36c     0C CE 05 F1 | 	add	fp, #12
0e370     E7 94 02 FB | 	rdlong	arg02, fp
0e374     0C CE 05 F1 | 	add	fp, #12
0e378     E7 96 02 FB | 	rdlong	arg03, fp
0e37c     0C CE 05 F1 | 	add	fp, #12
0e380     E7 98 02 FB | 	rdlong	arg04, fp
0e384     24 CE 85 F1 | 	sub	fp, #36
0e388     38 00 00 FF 
0e38c     CC 65 06 F1 | 	add	objptr, ##29132
0e390     32 9B 02 FB | 	rdlong	arg05, objptr
0e394     38 00 00 FF 
0e398     CC 65 86 F1 | 	sub	objptr, ##29132
0e39c     80 45 B1 FD | 	call	#_hg010b_spin2_box
0e3a0                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e3a0     60 00 90 FD | 	jmp	#LR__1221
0e3a4                 | LR__1220
0e3a4     E7 92 02 F6 | 	mov	arg01, fp
0e3a8     A0 F4 BF FD | 	call	#_converttoint
0e3ac     3D A9 02 F6 | 	mov	local02, result1
0e3b0     E7 92 02 F6 | 	mov	arg01, fp
0e3b4     0C 92 06 F1 | 	add	arg01, #12
0e3b8     90 F4 BF FD | 	call	#_converttoint
0e3bc     3D AB 02 F6 | 	mov	local03, result1
0e3c0     E7 92 02 F6 | 	mov	arg01, fp
0e3c4     18 92 06 F1 | 	add	arg01, #24
0e3c8     80 F4 BF FD | 	call	#_converttoint
0e3cc     3D A7 02 F6 | 	mov	local01, result1
0e3d0     E7 92 02 F6 | 	mov	arg01, fp
0e3d4     24 92 06 F1 | 	add	arg01, #36
0e3d8     70 F4 BF FD | 	call	#_converttoint
0e3dc     3D 99 02 F6 | 	mov	arg04, result1
0e3e0     38 00 00 FF 
0e3e4     CC 65 06 F1 | 	add	objptr, ##29132
0e3e8     32 9B 02 FB | 	rdlong	arg05, objptr
0e3ec     38 00 00 FF 
0e3f0     CC 65 86 F1 | 	sub	objptr, ##29132
0e3f4     54 93 02 F6 | 	mov	arg01, local02
0e3f8     55 95 02 F6 | 	mov	arg02, local03
0e3fc     53 97 02 F6 | 	mov	arg03, local01
0e400     1C 45 B1 FD | 	call	#_hg010b_spin2_box
0e404                 | LR__1221
0e404     E7 F0 03 F6 | 	mov	ptra, fp
0e408     F2 00 A0 FD | 	call	#popregs_
0e40c                 | _do_box_ret
0e40c     2D 00 64 FD | 	ret
0e410                 | 
0e410                 | ' 
0e410                 | ' '-------------------- brun
0e410                 | ' 
0e410                 | ' sub do_brun
0e410                 | _do_brun
0e410     08 CA 05 F6 | 	mov	COUNT_, #8
0e414     E8 00 A0 FD | 	call	#pushregs_
0e418     54 F2 BF FD | 	call	#_pop
0e41c     3E 9B 02 F6 | 	mov	arg05, result2
0e420     3F 99 02 F6 | 	mov	arg04, result3
0e424     3D A7 02 F6 | 	mov	local01, result1
0e428     4D A9 02 F6 | 	mov	local02, arg05
0e42c     4C AB 02 F6 | 	mov	local03, arg04
0e430                 | ' 
0e430                 | ' t1=pop() 
0e430                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e430     2B AA 0E F2 | 	cmp	local03, #43 wz
0e434     10 00 90 5D |  if_ne	jmp	#LR__1230
0e438     53 93 02 F6 | 	mov	arg01, local01
0e43c     A0 F3 BF FD | 	call	#_convertstring
0e440     3D A7 02 F6 | 	mov	local01, result1
0e444     1F AA 06 F6 | 	mov	local03, #31
0e448                 | LR__1230
0e448                 | ' if t1.result_type=result_string then
0e448     1F AA 0E F2 | 	cmp	local03, #31 wz
0e44c     EC 01 90 5D |  if_ne	jmp	#LR__1234
0e450     53 AD 02 F6 | 	mov	local04, local01
0e454                 | '   filename=t1.result.sresult
0e454                 | '   if left$(filename,1)="/" then 
0e454     56 93 02 F6 | 	mov	arg01, local04
0e458     01 94 06 F6 | 	mov	arg02, #1
0e45c     EC 7F B1 FD | 	call	#__system__Left_S
0e460     3D 93 02 F6 | 	mov	arg01, result1
0e464     97 01 00 FF 
0e468     A6 94 06 F6 | 	mov	arg02, ##@LR__5950
0e46c     5C 67 B1 FD | 	call	#__system___string_cmp
0e470     00 7A 0E F2 | 	cmp	result1, #0 wz
0e474     56 AF 02 A6 |  if_e	mov	local05, local04
0e478     14 00 90 AD |  if_e	jmp	#LR__1231
0e47c     97 01 00 FF 
0e480     A8 92 06 F6 | 	mov	arg01, ##@LR__5951
0e484     56 95 02 F6 | 	mov	arg02, local04
0e488     74 67 B1 FD | 	call	#__system___string_concat
0e48c     3D AF 02 F6 | 	mov	local05, result1
0e490                 | LR__1231
0e490                 | '   open fullfilename for input as #9
0e490     09 92 06 F6 | 	mov	arg01, #9
0e494     57 95 02 F6 | 	mov	arg02, local05
0e498     00 96 06 F6 | 	mov	arg03, #0
0e49c     B4 72 B1 FD | 	call	#__system___basic_open_string
0e4a0     20 68 06 F1 | 	add	ptr___system__dat__, #32
0e4a4     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e4a8     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e4ac     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0e4b0     3D B1 0A F6 | 	mov	local06, result1 wz
0e4b4                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e4b4     8C 00 90 AD |  if_e	jmp	#LR__1232
0e4b8     00 92 06 F6 | 	mov	arg01, #0
0e4bc     68 BC B1 FD | 	call	#__system___getiolock_0622
0e4c0     3D 93 02 F6 | 	mov	arg01, result1
0e4c4     DC 66 B1 FD | 	call	#__system___lockmem
0e4c8     97 01 00 FF 
0e4cc     B1 94 06 F6 | 	mov	arg02, ##@LR__5952
0e4d0     00 92 06 F6 | 	mov	arg01, #0
0e4d4     00 96 06 F6 | 	mov	arg03, #0
0e4d8     BC 73 B1 FD | 	call	#__system___basic_print_string
0e4dc     00 92 06 F6 | 	mov	arg01, #0
0e4e0     58 95 02 F6 | 	mov	arg02, local06
0e4e4     00 96 06 F6 | 	mov	arg03, #0
0e4e8     0A 98 06 F6 | 	mov	arg04, #10
0e4ec     EC 73 B1 FD | 	call	#__system___basic_print_integer
0e4f0     97 01 00 FF 
0e4f4     BF 94 06 F6 | 	mov	arg02, ##@LR__5953
0e4f8     00 92 06 F6 | 	mov	arg01, #0
0e4fc     00 96 06 F6 | 	mov	arg03, #0
0e500     94 73 B1 FD | 	call	#__system___basic_print_string
0e504     58 93 02 F6 | 	mov	arg01, local06
0e508     48 88 B1 FD | 	call	#__system___strerror
0e50c     3D 95 02 F6 | 	mov	arg02, result1
0e510     00 92 06 F6 | 	mov	arg01, #0
0e514     00 96 06 F6 | 	mov	arg03, #0
0e518     7C 73 B1 FD | 	call	#__system___basic_print_string
0e51c     00 92 06 F6 | 	mov	arg01, #0
0e520     0A 94 06 F6 | 	mov	arg02, #10
0e524     00 96 06 F6 | 	mov	arg03, #0
0e528     14 73 B1 FD | 	call	#__system___basic_print_char
0e52c     00 92 06 F6 | 	mov	arg01, #0
0e530     F4 BB B1 FD | 	call	#__system___getiolock_0622
0e534     3D 01 68 FC | 	wrlong	#0, result1
0e538     09 92 06 F6 | 	mov	arg01, #9
0e53c     40 B2 B1 FD | 	call	#__system__close
0e540     F8 00 90 FD | 	jmp	#LR__1235
0e544                 | LR__1232
0e544     01 B2 06 F6 | 	mov	local07, #1
0e548     00 B4 06 F6 | 	mov	local08, #0
0e54c                 | '   do
0e54c                 | LR__1233
0e54c                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e54c     32 97 02 F6 | 	mov	arg03, objptr
0e550     50 00 00 FF 
0e554     58 96 06 F1 | 	add	arg03, ##41048
0e558     09 92 06 F6 | 	mov	arg01, #9
0e55c     59 95 02 F6 | 	mov	arg02, local07
0e560     0A 98 C6 F9 | 	decod	arg04, #10
0e564     01 9A 06 F6 | 	mov	arg05, #1
0e568     B4 74 B1 FD | 	call	#__system___basic_get
0e56c     3D B1 02 F6 | 	mov	local06, result1
0e570     3D B3 02 F1 | 	add	local07, result1
0e574     32 93 02 F6 | 	mov	arg01, objptr
0e578     50 00 00 FF 
0e57c     58 92 06 F1 | 	add	arg01, ##41048
0e580     5A 95 02 F6 | 	mov	arg02, local08
0e584     0A 96 C6 F9 | 	decod	arg03, #10
0e588     0B 00 00 FF 
0e58c     CC 64 06 F1 | 	add	objptr, ##5836
0e590     30 57 B1 FD | 	call	#_psram_spin2_write
0e594     0B 00 00 FF 
0e598     CC 64 86 F1 | 	sub	objptr, ##5836
0e59c     58 B5 02 F1 | 	add	local08, local06
0e5a0     02 00 00 FF 
0e5a4     00 B0 0E F2 | 	cmp	local06, ##1024 wz
0e5a8     E0 03 00 AF 
0e5ac     00 B4 56 A2 |  if_e	cmps	local08, ##507904 wc
0e5b0     98 FF 9F 8D |  if_c_and_z	jmp	#LR__1233
0e5b4     38 00 00 FF 
0e5b8     A0 65 06 F1 | 	add	objptr, ##29088
0e5bc     32 93 02 FB | 	rdlong	arg01, objptr
0e5c0     03 92 62 FD | 	cogstop	arg01
0e5c4     04 64 06 F1 | 	add	objptr, #4
0e5c8     32 93 02 FB | 	rdlong	arg01, objptr
0e5cc     03 92 62 FD | 	cogstop	arg01
0e5d0     04 64 06 F1 | 	add	objptr, #4
0e5d4     32 93 02 FB | 	rdlong	arg01, objptr
0e5d8     03 92 62 FD | 	cogstop	arg01
0e5dc     19 00 00 FF 
0e5e0     3C 65 06 F1 | 	add	objptr, ##13116
0e5e4     32 93 02 FB | 	rdlong	arg01, objptr
0e5e8     52 00 00 FF 
0e5ec     E4 64 86 F1 | 	sub	objptr, ##42212
0e5f0     03 92 62 FD | 	cogstop	arg01
0e5f4     35 95 02 F6 | 	mov	arg02, ptr__dat__
0e5f8     18 00 00 FF 
0e5fc     CC 94 06 F1 | 	add	arg02, ##12492
0e600     32 97 02 F6 | 	mov	arg03, objptr
0e604     38 00 00 FF 
0e608     B0 97 06 F1 | 	add	arg03, ##29104
0e60c     1E B4 06 F6 | 	mov	local08, #30
0e610     28 96 62 FD | 	setq	arg03
0e614     4A B5 F2 FC | 	coginit	local08, arg02 wc
0e618     01 B4 66 C6 |  if_b	neg	local08, #1
0e61c     54 00 00 FF 
0e620     F4 64 06 F1 | 	add	objptr, ##43252
0e624     32 B5 62 FC | 	wrlong	local08, objptr
0e628     54 00 00 FF 
0e62c     F4 64 86 F1 | 	sub	objptr, ##43252
0e630     00 92 06 F6 | 	mov	arg01, #0
0e634     01 92 62 FD | 	cogid	arg01
0e638     03 92 62 FD | 	cogstop	arg01
0e63c                 | LR__1234
0e63c                 | LR__1235
0e63c     E7 F0 03 F6 | 	mov	ptra, fp
0e640     F2 00 A0 FD | 	call	#popregs_
0e644                 | _do_brun_ret
0e644     2D 00 64 FD | 	ret
0e648                 | 
0e648                 | ' 
0e648                 | ' '-------------------- cd
0e648                 | ' 
0e648                 | ' sub do_cd
0e648                 | _do_cd
0e648     06 CA 05 F6 | 	mov	COUNT_, #6
0e64c     E8 00 A0 FD | 	call	#pushregs_
0e650     97 01 00 FF 
0e654     C2 92 06 F6 | 	mov	arg01, ##@LR__5954
0e658     31 94 06 F6 | 	mov	arg02, #49
0e65c     80 BC B1 FD | 	call	#__system___basic_dir
0e660     0C F0 BF FD | 	call	#_pop
0e664     3E 99 02 F6 | 	mov	arg04, result2
0e668     3F 97 02 F6 | 	mov	arg03, result3
0e66c     3D A7 02 F6 | 	mov	local01, result1
0e670     4C A9 02 F6 | 	mov	local02, arg04
0e674     4B AB 02 F6 | 	mov	local03, arg03
0e678                 | ' t1=pop()
0e678                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e678     2B AA 0E F2 | 	cmp	local03, #43 wz
0e67c     10 00 90 5D |  if_ne	jmp	#LR__1240
0e680     53 93 02 F6 | 	mov	arg01, local01
0e684     58 F1 BF FD | 	call	#_convertstring
0e688     3D A7 02 F6 | 	mov	local01, result1
0e68c     1F AA 06 F6 | 	mov	local03, #31
0e690                 | LR__1240
0e690                 | ' if t1.result_type<>result_string then printerror(15): return
0e690     1F AA 0E F2 | 	cmp	local03, #31 wz
0e694     10 00 90 AD |  if_e	jmp	#LR__1241
0e698     0F 92 06 F6 | 	mov	arg01, #15
0e69c     00 94 06 F6 | 	mov	arg02, #0
0e6a0     DC 27 B1 FD | 	call	#_printerror
0e6a4     54 05 90 FD | 	jmp	#LR__1259
0e6a8                 | LR__1241
0e6a8     53 AD 02 F6 | 	mov	local04, local01
0e6ac                 | ' newdir$=t1.result.sresult
0e6ac                 | ' if newdir$=".." then 
0e6ac     97 01 00 FF 
0e6b0     C4 94 06 F6 | 	mov	arg02, ##@LR__5955
0e6b4     56 93 02 F6 | 	mov	arg01, local04
0e6b8     10 65 B1 FD | 	call	#__system___string_cmp
0e6bc     00 7A 0E F2 | 	cmp	result1, #0 wz
0e6c0     C8 01 90 5D |  if_ne	jmp	#LR__1248
0e6c4     4C 00 00 FF 
0e6c8     38 64 06 F1 | 	add	objptr, ##38968
0e6cc     32 93 02 FB | 	rdlong	arg01, objptr
0e6d0     4C 00 00 FF 
0e6d4     38 64 86 F1 | 	sub	objptr, ##38968
0e6d8     49 AF 02 F6 | 	mov	local05, arg01
0e6dc     D7 06 48 FB | 	callpa	#(@LR__1243-@LR__1242)>>2,fcache_load_ptr_
0e6e0                 | LR__1242
0e6e0     57 7B CA FA | 	rdbyte	result1, local05 wz
0e6e4     01 AE 06 51 |  if_ne	add	local05, #1
0e6e8     F4 FF 9F 5D |  if_ne	jmp	#LR__1242
0e6ec                 | LR__1243
0e6ec     57 93 C2 F2 | 	subr	arg01, local05
0e6f0     4C 00 00 FF 
0e6f4     38 64 06 F1 | 	add	objptr, ##38968
0e6f8     32 95 02 FB | 	rdlong	arg02, objptr
0e6fc     4C 00 00 FF 
0e700     38 64 86 F1 | 	sub	objptr, ##38968
0e704     97 01 00 FF 
0e708     C7 96 06 F6 | 	mov	arg03, ##@LR__5956
0e70c     88 83 B1 FD | 	call	#__system__InstrRev
0e710     3D AD 02 F6 | 	mov	local04, result1
0e714                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e714     02 AC 56 F2 | 	cmps	local04, #2 wc
0e718     28 00 90 CD |  if_b	jmp	#LR__1244
0e71c     4C 00 00 FF 
0e720     38 64 06 F1 | 	add	objptr, ##38968
0e724     32 93 02 FB | 	rdlong	arg01, objptr
0e728     4C 00 00 FF 
0e72c     38 64 86 F1 | 	sub	objptr, ##38968
0e730     01 AC 86 F1 | 	sub	local04, #1
0e734     56 95 02 F6 | 	mov	arg02, local04
0e738     10 7D B1 FD | 	call	#__system__Left_S
0e73c     3D AD 02 F6 | 	mov	local04, result1
0e740     08 00 90 FD | 	jmp	#LR__1245
0e744                 | LR__1244
0e744     97 01 00 FF 
0e748     C9 AC 06 F6 | 	mov	local04, ##@LR__5957
0e74c                 | LR__1245
0e74c     56 93 02 F6 | 	mov	arg01, local04
0e750     E0 6A B1 FD | 	call	#__system___chdir
0e754     20 68 06 F1 | 	add	ptr___system__dat__, #32
0e758     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e75c     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e760     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0e764     3D B1 0A F6 | 	mov	local06, result1 wz
0e768                 | '   chdir newdir$
0e768                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e768     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0e76c     A4 00 90 AD |  if_e	jmp	#LR__1246
0e770     00 92 06 F6 | 	mov	arg01, #0
0e774     B0 B9 B1 FD | 	call	#__system___getiolock_0622
0e778     3D 93 02 F6 | 	mov	arg01, result1
0e77c     24 64 B1 FD | 	call	#__system___lockmem
0e780     97 01 00 FF 
0e784     CB 94 06 F6 | 	mov	arg02, ##@LR__5958
0e788     00 92 06 F6 | 	mov	arg01, #0
0e78c     00 96 06 F6 | 	mov	arg03, #0
0e790     04 71 B1 FD | 	call	#__system___basic_print_string
0e794     00 92 06 F6 | 	mov	arg01, #0
0e798     58 95 02 F6 | 	mov	arg02, local06
0e79c     00 96 06 F6 | 	mov	arg03, #0
0e7a0     0A 98 06 F6 | 	mov	arg04, #10
0e7a4     34 71 B1 FD | 	call	#__system___basic_print_integer
0e7a8     97 01 00 FF 
0e7ac     D9 94 06 F6 | 	mov	arg02, ##@LR__5959
0e7b0     00 92 06 F6 | 	mov	arg01, #0
0e7b4     00 96 06 F6 | 	mov	arg03, #0
0e7b8     DC 70 B1 FD | 	call	#__system___basic_print_string
0e7bc     47 00 00 FF 
0e7c0     F4 64 06 F1 | 	add	objptr, ##36596
0e7c4     32 95 02 FB | 	rdlong	arg02, objptr
0e7c8     47 00 00 FF 
0e7cc     F4 64 86 F1 | 	sub	objptr, ##36596
0e7d0     00 92 06 F6 | 	mov	arg01, #0
0e7d4     00 96 06 F6 | 	mov	arg03, #0
0e7d8     BC 70 B1 FD | 	call	#__system___basic_print_string
0e7dc     00 92 06 F6 | 	mov	arg01, #0
0e7e0     0A 94 06 F6 | 	mov	arg02, #10
0e7e4     00 96 06 F6 | 	mov	arg03, #0
0e7e8     54 70 B1 FD | 	call	#__system___basic_print_char
0e7ec     00 92 06 F6 | 	mov	arg01, #0
0e7f0     34 B9 B1 FD | 	call	#__system___getiolock_0622
0e7f4     3D 01 68 FC | 	wrlong	#0, result1
0e7f8     4C 00 00 FF 
0e7fc     38 64 06 F1 | 	add	objptr, ##38968
0e800     32 93 02 FB | 	rdlong	arg01, objptr
0e804     4C 00 00 FF 
0e808     38 64 86 F1 | 	sub	objptr, ##38968
0e80c     24 6A B1 FD | 	call	#__system___chdir
0e810     14 00 90 FD | 	jmp	#LR__1247
0e814                 | LR__1246
0e814     4C 00 00 FF 
0e818     38 64 06 F1 | 	add	objptr, ##38968
0e81c     32 AD 62 FC | 	wrlong	local04, objptr
0e820     4C 00 00 FF 
0e824     38 64 86 F1 | 	sub	objptr, ##38968
0e828                 | LR__1247
0e828                 | '   print "Current directory: ";currentdir$
0e828     00 92 06 F6 | 	mov	arg01, #0
0e82c     F8 B8 B1 FD | 	call	#__system___getiolock_0622
0e830     3D 93 02 F6 | 	mov	arg01, result1
0e834     6C 63 B1 FD | 	call	#__system___lockmem
0e838     97 01 00 FF 
0e83c     DC 94 06 F6 | 	mov	arg02, ##@LR__5960
0e840     00 92 06 F6 | 	mov	arg01, #0
0e844     00 96 06 F6 | 	mov	arg03, #0
0e848     4C 70 B1 FD | 	call	#__system___basic_print_string
0e84c     4C 00 00 FF 
0e850     38 64 06 F1 | 	add	objptr, ##38968
0e854     32 95 02 FB | 	rdlong	arg02, objptr
0e858     4C 00 00 FF 
0e85c     38 64 86 F1 | 	sub	objptr, ##38968
0e860     00 92 06 F6 | 	mov	arg01, #0
0e864     00 96 06 F6 | 	mov	arg03, #0
0e868     2C 70 B1 FD | 	call	#__system___basic_print_string
0e86c     00 92 06 F6 | 	mov	arg01, #0
0e870     0A 94 06 F6 | 	mov	arg02, #10
0e874     00 96 06 F6 | 	mov	arg03, #0
0e878     C4 6F B1 FD | 	call	#__system___basic_print_char
0e87c     00 92 06 F6 | 	mov	arg01, #0
0e880     A4 B8 B1 FD | 	call	#__system___getiolock_0622
0e884     3D 01 68 FC | 	wrlong	#0, result1
0e888                 | '   return
0e888     70 03 90 FD | 	jmp	#LR__1259
0e88c                 | LR__1248
0e88c                 | ' if left$(newdir$,1)="/" then 
0e88c     56 93 02 F6 | 	mov	arg01, local04
0e890     01 94 06 F6 | 	mov	arg02, #1
0e894     B4 7B B1 FD | 	call	#__system__Left_S
0e898     3D 93 02 F6 | 	mov	arg01, result1
0e89c     97 01 00 FF 
0e8a0     F0 94 06 F6 | 	mov	arg02, ##@LR__5961
0e8a4     24 63 B1 FD | 	call	#__system___string_cmp
0e8a8     00 7A 0E F2 | 	cmp	result1, #0 wz
0e8ac     40 01 90 5D |  if_ne	jmp	#LR__1251
0e8b0     56 93 02 F6 | 	mov	arg01, local04
0e8b4     7C 69 B1 FD | 	call	#__system___chdir
0e8b8     20 68 06 F1 | 	add	ptr___system__dat__, #32
0e8bc     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e8c0     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e8c4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0e8c8     3D B1 0A F6 | 	mov	local06, result1 wz
0e8cc                 | '   chdir(newdir$)
0e8cc                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e8cc     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0e8d0     A4 00 90 AD |  if_e	jmp	#LR__1249
0e8d4     00 92 06 F6 | 	mov	arg01, #0
0e8d8     4C B8 B1 FD | 	call	#__system___getiolock_0622
0e8dc     3D 93 02 F6 | 	mov	arg01, result1
0e8e0     C0 62 B1 FD | 	call	#__system___lockmem
0e8e4     97 01 00 FF 
0e8e8     F2 94 06 F6 | 	mov	arg02, ##@LR__5962
0e8ec     00 92 06 F6 | 	mov	arg01, #0
0e8f0     00 96 06 F6 | 	mov	arg03, #0
0e8f4     A0 6F B1 FD | 	call	#__system___basic_print_string
0e8f8     00 92 06 F6 | 	mov	arg01, #0
0e8fc     58 95 02 F6 | 	mov	arg02, local06
0e900     00 96 06 F6 | 	mov	arg03, #0
0e904     0A 98 06 F6 | 	mov	arg04, #10
0e908     D0 6F B1 FD | 	call	#__system___basic_print_integer
0e90c     97 01 00 FF 
0e910     00 95 06 F6 | 	mov	arg02, ##@LR__5963
0e914     00 92 06 F6 | 	mov	arg01, #0
0e918     00 96 06 F6 | 	mov	arg03, #0
0e91c     78 6F B1 FD | 	call	#__system___basic_print_string
0e920     47 00 00 FF 
0e924     F4 64 06 F1 | 	add	objptr, ##36596
0e928     32 95 02 FB | 	rdlong	arg02, objptr
0e92c     47 00 00 FF 
0e930     F4 64 86 F1 | 	sub	objptr, ##36596
0e934     00 92 06 F6 | 	mov	arg01, #0
0e938     00 96 06 F6 | 	mov	arg03, #0
0e93c     58 6F B1 FD | 	call	#__system___basic_print_string
0e940     00 92 06 F6 | 	mov	arg01, #0
0e944     0A 94 06 F6 | 	mov	arg02, #10
0e948     00 96 06 F6 | 	mov	arg03, #0
0e94c     F0 6E B1 FD | 	call	#__system___basic_print_char
0e950     00 92 06 F6 | 	mov	arg01, #0
0e954     D0 B7 B1 FD | 	call	#__system___getiolock_0622
0e958     3D 01 68 FC | 	wrlong	#0, result1
0e95c     4C 00 00 FF 
0e960     38 64 06 F1 | 	add	objptr, ##38968
0e964     32 93 02 FB | 	rdlong	arg01, objptr
0e968     4C 00 00 FF 
0e96c     38 64 86 F1 | 	sub	objptr, ##38968
0e970     C0 68 B1 FD | 	call	#__system___chdir
0e974     14 00 90 FD | 	jmp	#LR__1250
0e978                 | LR__1249
0e978     4C 00 00 FF 
0e97c     38 64 06 F1 | 	add	objptr, ##38968
0e980     32 AD 62 FC | 	wrlong	local04, objptr
0e984     4C 00 00 FF 
0e988     38 64 86 F1 | 	sub	objptr, ##38968
0e98c                 | LR__1250
0e98c                 | '   print "Current directory: ";currentdir$
0e98c     00 92 06 F6 | 	mov	arg01, #0
0e990     94 B7 B1 FD | 	call	#__system___getiolock_0622
0e994     3D 93 02 F6 | 	mov	arg01, result1
0e998     08 62 B1 FD | 	call	#__system___lockmem
0e99c     97 01 00 FF 
0e9a0     03 95 06 F6 | 	mov	arg02, ##@LR__5964
0e9a4     00 92 06 F6 | 	mov	arg01, #0
0e9a8     00 96 06 F6 | 	mov	arg03, #0
0e9ac     E8 6E B1 FD | 	call	#__system___basic_print_string
0e9b0     4C 00 00 FF 
0e9b4     38 64 06 F1 | 	add	objptr, ##38968
0e9b8     32 95 02 FB | 	rdlong	arg02, objptr
0e9bc     4C 00 00 FF 
0e9c0     38 64 86 F1 | 	sub	objptr, ##38968
0e9c4     00 92 06 F6 | 	mov	arg01, #0
0e9c8     00 96 06 F6 | 	mov	arg03, #0
0e9cc     C8 6E B1 FD | 	call	#__system___basic_print_string
0e9d0     00 92 06 F6 | 	mov	arg01, #0
0e9d4     0A 94 06 F6 | 	mov	arg02, #10
0e9d8     00 96 06 F6 | 	mov	arg03, #0
0e9dc     60 6E B1 FD | 	call	#__system___basic_print_char
0e9e0     00 92 06 F6 | 	mov	arg01, #0
0e9e4     40 B7 B1 FD | 	call	#__system___getiolock_0622
0e9e8     3D 01 68 FC | 	wrlong	#0, result1
0e9ec                 | '   return
0e9ec     0C 02 90 FD | 	jmp	#LR__1259
0e9f0                 | LR__1251
0e9f0                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0e9f0     4C 00 00 FF 
0e9f4     38 64 06 F1 | 	add	objptr, ##38968
0e9f8     32 93 02 FB | 	rdlong	arg01, objptr
0e9fc     4C 00 00 FF 
0ea00     38 64 86 F1 | 	sub	objptr, ##38968
0ea04     97 01 00 FF 
0ea08     17 95 06 F6 | 	mov	arg02, ##@LR__5965
0ea0c     BC 61 B1 FD | 	call	#__system___string_cmp
0ea10     00 7A 0E F2 | 	cmp	result1, #0 wz
0ea14     34 00 90 AD |  if_e	jmp	#LR__1252
0ea18     4C 00 00 FF 
0ea1c     38 64 06 F1 | 	add	objptr, ##38968
0ea20     32 93 02 FB | 	rdlong	arg01, objptr
0ea24     4C 00 00 FF 
0ea28     38 64 86 F1 | 	sub	objptr, ##38968
0ea2c     97 01 00 FF 
0ea30     19 95 06 F6 | 	mov	arg02, ##@LR__5966
0ea34     C8 61 B1 FD | 	call	#__system___string_concat
0ea38     3D 93 02 F6 | 	mov	arg01, result1
0ea3c     56 95 02 F6 | 	mov	arg02, local04
0ea40     BC 61 B1 FD | 	call	#__system___string_concat
0ea44     3D AD 02 F6 | 	mov	local04, result1
0ea48     20 00 90 FD | 	jmp	#LR__1253
0ea4c                 | LR__1252
0ea4c     4C 00 00 FF 
0ea50     38 64 06 F1 | 	add	objptr, ##38968
0ea54     32 93 02 FB | 	rdlong	arg01, objptr
0ea58     4C 00 00 FF 
0ea5c     38 64 86 F1 | 	sub	objptr, ##38968
0ea60     56 95 02 F6 | 	mov	arg02, local04
0ea64     98 61 B1 FD | 	call	#__system___string_concat
0ea68     3D AD 02 F6 | 	mov	local04, result1
0ea6c                 | LR__1253
0ea6c                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0ea6c     56 93 02 F6 | 	mov	arg01, local04
0ea70     01 94 06 F6 | 	mov	arg02, #1
0ea74     5C 7A B1 FD | 	call	#__system__Right_S
0ea78     3D 93 02 F6 | 	mov	arg01, result1
0ea7c     97 01 00 FF 
0ea80     1B 95 06 F6 | 	mov	arg02, ##@LR__5967
0ea84     44 61 B1 FD | 	call	#__system___string_cmp
0ea88     00 7A 0E F2 | 	cmp	result1, #0 wz
0ea8c     30 00 90 5D |  if_ne	jmp	#LR__1256
0ea90     56 93 02 F6 | 	mov	arg01, local04
0ea94     49 AF 02 F6 | 	mov	local05, arg01
0ea98     D7 06 48 FB | 	callpa	#(@LR__1255-@LR__1254)>>2,fcache_load_ptr_
0ea9c                 | LR__1254
0ea9c     57 7B CA FA | 	rdbyte	result1, local05 wz
0eaa0     01 AE 06 51 |  if_ne	add	local05, #1
0eaa4     F4 FF 9F 5D |  if_ne	jmp	#LR__1254
0eaa8                 | LR__1255
0eaa8     49 AF 82 F1 | 	sub	local05, arg01
0eaac     57 95 02 F6 | 	mov	arg02, local05
0eab0     01 94 86 F1 | 	sub	arg02, #1
0eab4     56 93 02 F6 | 	mov	arg01, local04
0eab8     90 79 B1 FD | 	call	#__system__Left_S
0eabc     3D AD 02 F6 | 	mov	local04, result1
0eac0                 | LR__1256
0eac0     56 93 02 F6 | 	mov	arg01, local04
0eac4     6C 67 B1 FD | 	call	#__system___chdir
0eac8     20 68 06 F1 | 	add	ptr___system__dat__, #32
0eacc     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0ead0     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0ead4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0ead8     3D B1 0A F6 | 	mov	local06, result1 wz
0eadc                 | '   chdir(newdir$)
0eadc                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0eadc     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0eae0     A4 00 90 AD |  if_e	jmp	#LR__1257
0eae4     00 92 06 F6 | 	mov	arg01, #0
0eae8     3C B6 B1 FD | 	call	#__system___getiolock_0622
0eaec     3D 93 02 F6 | 	mov	arg01, result1
0eaf0     B0 60 B1 FD | 	call	#__system___lockmem
0eaf4     97 01 00 FF 
0eaf8     1D 95 06 F6 | 	mov	arg02, ##@LR__5968
0eafc     00 92 06 F6 | 	mov	arg01, #0
0eb00     00 96 06 F6 | 	mov	arg03, #0
0eb04     90 6D B1 FD | 	call	#__system___basic_print_string
0eb08     00 92 06 F6 | 	mov	arg01, #0
0eb0c     58 95 02 F6 | 	mov	arg02, local06
0eb10     00 96 06 F6 | 	mov	arg03, #0
0eb14     0A 98 06 F6 | 	mov	arg04, #10
0eb18     C0 6D B1 FD | 	call	#__system___basic_print_integer
0eb1c     97 01 00 FF 
0eb20     2B 95 06 F6 | 	mov	arg02, ##@LR__5969
0eb24     00 92 06 F6 | 	mov	arg01, #0
0eb28     00 96 06 F6 | 	mov	arg03, #0
0eb2c     68 6D B1 FD | 	call	#__system___basic_print_string
0eb30     47 00 00 FF 
0eb34     F4 64 06 F1 | 	add	objptr, ##36596
0eb38     32 95 02 FB | 	rdlong	arg02, objptr
0eb3c     47 00 00 FF 
0eb40     F4 64 86 F1 | 	sub	objptr, ##36596
0eb44     00 92 06 F6 | 	mov	arg01, #0
0eb48     00 96 06 F6 | 	mov	arg03, #0
0eb4c     48 6D B1 FD | 	call	#__system___basic_print_string
0eb50     00 92 06 F6 | 	mov	arg01, #0
0eb54     0A 94 06 F6 | 	mov	arg02, #10
0eb58     00 96 06 F6 | 	mov	arg03, #0
0eb5c     E0 6C B1 FD | 	call	#__system___basic_print_char
0eb60     00 92 06 F6 | 	mov	arg01, #0
0eb64     C0 B5 B1 FD | 	call	#__system___getiolock_0622
0eb68     3D 01 68 FC | 	wrlong	#0, result1
0eb6c     4C 00 00 FF 
0eb70     38 64 06 F1 | 	add	objptr, ##38968
0eb74     32 93 02 FB | 	rdlong	arg01, objptr
0eb78     4C 00 00 FF 
0eb7c     38 64 86 F1 | 	sub	objptr, ##38968
0eb80     B0 66 B1 FD | 	call	#__system___chdir
0eb84     14 00 90 FD | 	jmp	#LR__1258
0eb88                 | LR__1257
0eb88     4C 00 00 FF 
0eb8c     38 64 06 F1 | 	add	objptr, ##38968
0eb90     32 AD 62 FC | 	wrlong	local04, objptr
0eb94     4C 00 00 FF 
0eb98     38 64 86 F1 | 	sub	objptr, ##38968
0eb9c                 | LR__1258
0eb9c                 | '   print "Current directory: ";currentdir$
0eb9c     00 92 06 F6 | 	mov	arg01, #0
0eba0     84 B5 B1 FD | 	call	#__system___getiolock_0622
0eba4     3D 93 02 F6 | 	mov	arg01, result1
0eba8     F8 5F B1 FD | 	call	#__system___lockmem
0ebac     97 01 00 FF 
0ebb0     2E 95 06 F6 | 	mov	arg02, ##@LR__5970
0ebb4     00 92 06 F6 | 	mov	arg01, #0
0ebb8     00 96 06 F6 | 	mov	arg03, #0
0ebbc     D8 6C B1 FD | 	call	#__system___basic_print_string
0ebc0     4C 00 00 FF 
0ebc4     38 64 06 F1 | 	add	objptr, ##38968
0ebc8     32 95 02 FB | 	rdlong	arg02, objptr
0ebcc     4C 00 00 FF 
0ebd0     38 64 86 F1 | 	sub	objptr, ##38968
0ebd4     00 92 06 F6 | 	mov	arg01, #0
0ebd8     00 96 06 F6 | 	mov	arg03, #0
0ebdc     B8 6C B1 FD | 	call	#__system___basic_print_string
0ebe0     00 92 06 F6 | 	mov	arg01, #0
0ebe4     0A 94 06 F6 | 	mov	arg02, #10
0ebe8     00 96 06 F6 | 	mov	arg03, #0
0ebec     50 6C B1 FD | 	call	#__system___basic_print_char
0ebf0     00 92 06 F6 | 	mov	arg01, #0
0ebf4     30 B5 B1 FD | 	call	#__system___getiolock_0622
0ebf8     3D 01 68 FC | 	wrlong	#0, result1
0ebfc                 | LR__1259
0ebfc     E7 F0 03 F6 | 	mov	ptra, fp
0ec00     F2 00 A0 FD | 	call	#popregs_
0ec04                 | _do_cd_ret
0ec04     2D 00 64 FD | 	ret
0ec08                 | 
0ec08                 | ' 
0ec08                 | ' '-------------------- changefreq
0ec08                 | ' 
0ec08                 | ' sub do_changefreq
0ec08                 | _do_changefreq
0ec08     0A CA 05 F6 | 	mov	COUNT_, #10
0ec0c     E8 00 A0 FD | 	call	#pushregs_
0ec10     2C F0 07 F1 | 	add	ptra, #44
0ec14     58 EA BF FD | 	call	#_pop
0ec18     3F 95 02 F6 | 	mov	arg02, result3
0ec1c     E7 7A 62 FC | 	wrlong	result1, fp
0ec20     04 CE 05 F1 | 	add	fp, #4
0ec24     E7 7C 62 FC | 	wrlong	result2, fp
0ec28     04 CE 05 F1 | 	add	fp, #4
0ec2c     E7 94 62 FC | 	wrlong	arg02, fp
0ec30     08 CE 85 F1 | 	sub	fp, #8
0ec34     E7 92 02 F6 | 	mov	arg01, fp
0ec38     CC EC BF FD | 	call	#_converttofloat
0ec3c     3D A7 02 F6 | 	mov	local01, result1
0ec40     2C EA BF FD | 	call	#_pop
0ec44     3F 95 02 F6 | 	mov	arg02, result3
0ec48     E7 7A 62 FC | 	wrlong	result1, fp
0ec4c     04 CE 05 F1 | 	add	fp, #4
0ec50     E7 7C 62 FC | 	wrlong	result2, fp
0ec54     04 CE 05 F1 | 	add	fp, #4
0ec58     E7 94 62 FC | 	wrlong	arg02, fp
0ec5c     08 CE 85 F1 | 	sub	fp, #8
0ec60     E7 92 02 F6 | 	mov	arg01, fp
0ec64     E4 EB BF FD | 	call	#_converttoint
0ec68     3D A9 52 F6 | 	abs	local02, result1 wc
0ec6c     07 A8 06 F5 | 	and	local02, #7
0ec70     54 A9 82 F6 | 	negc	local02, local02
0ec74     54 95 02 F6 | 	mov	arg02, local02
0ec78     03 94 66 F0 | 	shl	arg02, #3
0ec7c     54 95 82 F1 | 	sub	arg02, local02
0ec80     02 94 66 F0 | 	shl	arg02, #2
0ec84     32 93 02 F6 | 	mov	arg01, objptr
0ec88     16 00 00 FF 
0ec8c     BC 92 06 F1 | 	add	arg01, ##11452
0ec90     49 95 02 F1 | 	add	arg02, arg01
0ec94     16 94 06 F1 | 	add	arg02, #22
0ec98     4A AB E2 FA | 	rdword	local03, arg02
0ec9c                 | ' amode=channels(channel).amode
0ec9c                 | ' if amode>0 then
0ec9c     01 AA 56 F2 | 	cmps	local03, #1 wc
0eca0     AC 01 90 CD |  if_b	jmp	#LR__1262
0eca4     53 95 02 F6 | 	mov	arg02, local01
0eca8     FC 16 20 FF 
0ecac     54 92 06 F6 | 	mov	arg01, ##1076754516
0ecb0     A0 95 B1 FD | 	call	#__system____builtin_logbase
0ecb4     3D AD 02 F6 | 	mov	local04, result1
0ecb8     1E 94 C6 F9 | 	decod	arg02, #30
0ecbc     FC 16 20 FF 
0ecc0     54 92 06 F6 | 	mov	arg01, ##1076754516
0ecc4     8C 95 B1 FD | 	call	#__system____builtin_logbase
0ecc8     3D 95 02 F6 | 	mov	arg02, result1
0eccc     56 93 02 F6 | 	mov	arg01, local04
0ecd0     A4 87 B1 FD | 	call	#__system___float_div
0ecd4     3D 93 02 F6 | 	mov	arg01, result1
0ecd8     00 94 06 F6 | 	mov	arg02, #0
0ecdc     5C 8A B1 FD | 	call	#__system___float_tointeger
0ece0     3D AF 02 F6 | 	mov	local05, result1
0ece4     1E AC C6 F9 | 	decod	local04, #30
0ece8     57 93 02 F6 | 	mov	arg01, local05
0ecec     55 93 02 F1 | 	add	arg01, local03
0ecf0     49 93 52 F6 | 	abs	arg01, arg01 wc
0ecf4     1F B0 C6 C9 |  if_b	decod	local06, #31
0ecf8     00 B0 06 36 |  if_ae	mov	local06, #0
0ecfc     70 81 B1 FD | 	call	#__system___float_fromuns
0ed00     58 7B 62 F5 | 	xor	result1, local06
0ed04     3D 95 02 F6 | 	mov	arg02, result1
0ed08     56 93 02 F6 | 	mov	arg01, local04
0ed0c     7C 94 B1 FD | 	call	#__system____builtin_powf
0ed10     3D 93 02 F6 | 	mov	arg01, result1
0ed14     01 94 06 F6 | 	mov	arg02, #1
0ed18     20 8A B1 FD | 	call	#__system___float_tointeger
0ed1c     3D B3 02 F6 | 	mov	local07, result1
0ed20                 | '   skip=round(2^(lfreq+amode))                     '''' this const + const 2 lines lower=18
0ed20                 | '   if skip>32768 then i=skip/32768: skip=32768 else i=1
0ed20     40 00 00 FF 
0ed24     01 B2 56 F2 | 	cmps	local07, ##32769 wc
0ed28     14 00 90 CD |  if_b	jmp	#LR__1260
0ed2c     59 B5 52 F6 | 	abs	local08, local07 wc
0ed30     0F B4 46 F0 | 	shr	local08, #15
0ed34     5A B5 82 F6 | 	negc	local08, local08
0ed38     0F B2 C6 F9 | 	decod	local07, #15
0ed3c     04 00 90 FD | 	jmp	#LR__1261
0ed40                 | LR__1260
0ed40     01 B4 06 F6 | 	mov	local08, #1
0ed44                 | LR__1261
0ed44     AA 2B 25 FF 
0ed48     00 93 06 F6 | 	mov	arg01, ##1247237376
0ed4c     53 95 02 F6 | 	mov	arg02, local01
0ed50     24 87 B1 FD | 	call	#__system___float_div
0ed54     3D AD 02 F6 | 	mov	local04, result1
0ed58     5A 93 52 F6 | 	abs	arg01, local08 wc
0ed5c     1F B0 C6 C9 |  if_b	decod	local06, #31
0ed60     00 B0 06 36 |  if_ae	mov	local06, #0
0ed64     08 81 B1 FD | 	call	#__system___float_fromuns
0ed68     58 7B 62 F5 | 	xor	result1, local06
0ed6c     3D B5 02 F6 | 	mov	local08, result1
0ed70     1E B6 C6 F9 | 	decod	local09, #30
0ed74     12 92 06 F6 | 	mov	arg01, #18
0ed78     55 93 82 F1 | 	sub	arg01, local03
0ed7c     57 93 82 F1 | 	sub	arg01, local05
0ed80     49 93 52 F6 | 	abs	arg01, arg01 wc
0ed84     1F B0 C6 C9 |  if_b	decod	local06, #31
0ed88     00 B0 06 36 |  if_ae	mov	local06, #0
0ed8c     E0 80 B1 FD | 	call	#__system___float_fromuns
0ed90     58 7B 62 F5 | 	xor	result1, local06
0ed94     3D 95 02 F6 | 	mov	arg02, result1
0ed98     5B 93 02 F6 | 	mov	arg01, local09
0ed9c     EC 93 B1 FD | 	call	#__system____builtin_powf
0eda0     3D 95 02 F6 | 	mov	arg02, result1
0eda4     5A 93 02 F6 | 	mov	arg01, local08
0eda8     C8 84 B1 FD | 	call	#__system___float_mul
0edac     3D 95 02 F6 | 	mov	arg02, result1
0edb0     56 93 02 F6 | 	mov	arg01, local04
0edb4     C0 86 B1 FD | 	call	#__system___float_div
0edb8     3D 93 02 F6 | 	mov	arg01, result1
0edbc     01 94 06 F6 | 	mov	arg02, #1
0edc0     78 89 B1 FD | 	call	#__system___float_tointeger
0edc4     3D B9 02 F6 | 	mov	local10, result1
0edc8     54 B7 02 F6 | 	mov	local09, local02
0edcc     03 B6 66 F0 | 	shl	local09, #3
0edd0     54 B7 82 F1 | 	sub	local09, local02
0edd4     02 B6 66 F0 | 	shl	local09, #2
0edd8     32 B5 02 F6 | 	mov	local08, objptr
0eddc     16 00 00 FF 
0ede0     BC B4 06 F1 | 	add	local08, ##11452
0ede4     5A B7 02 F1 | 	add	local09, local08
0ede8     AA 2B 25 FF 
0edec     00 B5 06 F6 | 	mov	local08, ##1247237376
0edf0     5C 93 52 F6 | 	abs	arg01, local10 wc
0edf4     1F B0 C6 C9 |  if_b	decod	local06, #31
0edf8     00 B0 06 36 |  if_ae	mov	local06, #0
0edfc     70 80 B1 FD | 	call	#__system___float_fromuns
0ee00     58 7B 62 F5 | 	xor	result1, local06
0ee04     3D 95 02 F6 | 	mov	arg02, result1
0ee08     5A 93 02 F6 | 	mov	arg01, local08
0ee0c     68 86 B1 FD | 	call	#__system___float_div
0ee10     3D B5 02 F6 | 	mov	local08, result1
0ee14     59 93 52 F6 | 	abs	arg01, local07 wc
0ee18     1F B0 C6 C9 |  if_b	decod	local06, #31
0ee1c     00 B0 06 36 |  if_ae	mov	local06, #0
0ee20     4C 80 B1 FD | 	call	#__system___float_fromuns
0ee24     58 7B 62 F5 | 	xor	result1, local06
0ee28     3D 93 02 F6 | 	mov	arg01, result1
0ee2c     00 40 24 FF 
0ee30     00 94 06 F6 | 	mov	arg02, ##1216348160
0ee34     40 86 B1 FD | 	call	#__system___float_div
0ee38     3D 95 02 F6 | 	mov	arg02, result1
0ee3c     5A 93 02 F6 | 	mov	arg01, local08
0ee40     30 84 B1 FD | 	call	#__system___float_mul
0ee44     18 B6 06 F1 | 	add	local09, #24
0ee48     5B 7B 62 FC | 	wrlong	result1, local09
0ee4c     BC 00 90 FD | 	jmp	#LR__1263
0ee50                 | LR__1262
0ee50     18 B8 06 F6 | 	mov	local10, #24
0ee54     00 40 24 FF 
0ee58     00 AC 06 F6 | 	mov	local04, ##1216348160
0ee5c     53 93 02 F6 | 	mov	arg01, local01
0ee60     C7 07 24 FF 
0ee64     00 94 06 F6 | 	mov	arg02, ##1208978944
0ee68     0C 86 B1 FD | 	call	#__system___float_div
0ee6c     3D 95 02 F6 | 	mov	arg02, result1
0ee70     56 93 02 F6 | 	mov	arg01, local04
0ee74     FC 83 B1 FD | 	call	#__system___float_mul
0ee78     3D 93 02 F6 | 	mov	arg01, result1
0ee7c     01 94 06 F6 | 	mov	arg02, #1
0ee80     B8 88 B1 FD | 	call	#__system___float_tointeger
0ee84     3D B3 02 F6 | 	mov	local07, result1
0ee88     54 B7 02 F6 | 	mov	local09, local02
0ee8c     03 B6 66 F0 | 	shl	local09, #3
0ee90     54 B7 82 F1 | 	sub	local09, local02
0ee94     02 B6 66 F0 | 	shl	local09, #2
0ee98     32 B5 02 F6 | 	mov	local08, objptr
0ee9c     16 00 00 FF 
0eea0     BC B4 06 F1 | 	add	local08, ##11452
0eea4     5A B7 02 F1 | 	add	local09, local08
0eea8     AA 2B 25 FF 
0eeac     00 B5 06 F6 | 	mov	local08, ##1247237376
0eeb0     5C 93 52 F6 | 	abs	arg01, local10 wc
0eeb4     1F B0 C6 C9 |  if_b	decod	local06, #31
0eeb8     00 B0 06 36 |  if_ae	mov	local06, #0
0eebc     B0 7F B1 FD | 	call	#__system___float_fromuns
0eec0     58 7B 62 F5 | 	xor	result1, local06
0eec4     3D 95 02 F6 | 	mov	arg02, result1
0eec8     5A 93 02 F6 | 	mov	arg01, local08
0eecc     A8 85 B1 FD | 	call	#__system___float_div
0eed0     3D B5 02 F6 | 	mov	local08, result1
0eed4     59 93 52 F6 | 	abs	arg01, local07 wc
0eed8     1F B0 C6 C9 |  if_b	decod	local06, #31
0eedc     00 B0 06 36 |  if_ae	mov	local06, #0
0eee0     8C 7F B1 FD | 	call	#__system___float_fromuns
0eee4     58 7B 62 F5 | 	xor	result1, local06
0eee8     3D 93 02 F6 | 	mov	arg01, result1
0eeec     00 40 24 FF 
0eef0     00 94 06 F6 | 	mov	arg02, ##1216348160
0eef4     80 85 B1 FD | 	call	#__system___float_div
0eef8     3D 95 02 F6 | 	mov	arg02, result1
0eefc     5A 93 02 F6 | 	mov	arg01, local08
0ef00     70 83 B1 FD | 	call	#__system___float_mul
0ef04     18 B6 06 F1 | 	add	local09, #24
0ef08     5B 7B 62 FC | 	wrlong	result1, local09
0ef0c                 | LR__1263
0ef0c     10 B2 66 F0 | 	shl	local07, #16
0ef10     5C B3 02 F1 | 	add	local07, local10
0ef14                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0ef14     38 00 00 FF 
0ef18     B4 65 06 F1 | 	add	objptr, ##29108
0ef1c     32 93 02 FB | 	rdlong	arg01, objptr
0ef20     38 00 00 FF 
0ef24     B4 65 86 F1 | 	sub	objptr, ##29108
0ef28     54 B9 02 F6 | 	mov	local10, local02
0ef2c     06 B8 66 F0 | 	shl	local10, #6
0ef30     5C 93 02 F1 | 	add	arg01, local10
0ef34     08 92 06 F1 | 	add	arg01, #8
0ef38     49 7B 02 FB | 	rdlong	result1, arg01
0ef3c     1B 7A 2E F4 | 	testbn	result1, #27 wz
0ef40     28 00 90 5D |  if_ne	jmp	#LR__1264
0ef44     38 00 00 FF 
0ef48     B4 65 06 F1 | 	add	objptr, ##29108
0ef4c     32 93 02 FB | 	rdlong	arg01, objptr
0ef50     38 00 00 FF 
0ef54     B4 65 86 F1 | 	sub	objptr, ##29108
0ef58     06 A8 66 F0 | 	shl	local02, #6
0ef5c     54 93 02 F1 | 	add	arg01, local02
0ef60     18 92 06 F1 | 	add	arg01, #24
0ef64     49 B3 62 FC | 	wrlong	local07, arg01
0ef68     68 00 90 FD | 	jmp	#LR__1265
0ef6c                 | LR__1264
0ef6c     38 00 00 FF 
0ef70     B4 65 06 F1 | 	add	objptr, ##29108
0ef74     32 AD 02 FB | 	rdlong	local04, objptr
0ef78     38 00 00 FF 
0ef7c     B4 65 86 F1 | 	sub	objptr, ##29108
0ef80     54 B9 02 F6 | 	mov	local10, local02
0ef84     06 B8 66 F0 | 	shl	local10, #6
0ef88     5C AD 02 F1 | 	add	local04, local10
0ef8c     18 AC 06 F1 | 	add	local04, #24
0ef90     3E 2C 25 FF 
0ef94     3C 92 06 F6 | 	mov	arg01, ##1247312956
0ef98     53 95 02 F6 | 	mov	arg02, local01
0ef9c     D8 84 B1 FD | 	call	#__system___float_div
0efa0     3D 93 02 F6 | 	mov	arg01, result1
0efa4     01 94 06 F6 | 	mov	arg02, #1
0efa8     90 87 B1 FD | 	call	#__system___float_tointeger
0efac     56 7B 52 FC | 	wrword	result1, local04
0efb0     38 00 00 FF 
0efb4     B4 65 06 F1 | 	add	objptr, ##29108
0efb8     32 93 02 FB | 	rdlong	arg01, objptr
0efbc     38 00 00 FF 
0efc0     B4 65 86 F1 | 	sub	objptr, ##29108
0efc4     06 A8 66 F0 | 	shl	local02, #6
0efc8     54 93 02 F1 | 	add	arg01, local02
0efcc     1A 92 06 F1 | 	add	arg01, #26
0efd0     49 01 5A FC | 	wrword	#256, arg01
0efd4                 | LR__1265
0efd4     E7 F0 03 F6 | 	mov	ptra, fp
0efd8     F2 00 A0 FD | 	call	#popregs_
0efdc                 | _do_changefreq_ret
0efdc     2D 00 64 FD | 	ret
0efe0                 | 
0efe0                 | ' 
0efe0                 | ' '-------------------- changepan
0efe0                 | ' 
0efe0                 | ' sub do_changepan
0efe0                 | _do_changepan
0efe0     02 CA 05 F6 | 	mov	COUNT_, #2
0efe4     E8 00 A0 FD | 	call	#pushregs_
0efe8     14 F0 07 F1 | 	add	ptra, #20
0efec     80 E6 BF FD | 	call	#_pop
0eff0     E7 7A 62 FC | 	wrlong	result1, fp
0eff4     04 CE 05 F1 | 	add	fp, #4
0eff8     E7 7C 62 FC | 	wrlong	result2, fp
0effc     04 CE 05 F1 | 	add	fp, #4
0f000     E7 7E 62 FC | 	wrlong	result3, fp
0f004     08 CE 85 F1 | 	sub	fp, #8
0f008     00 00 23 FF 
0f00c     00 A6 06 F6 | 	mov	local01, ##1174405120
0f010     E7 92 02 F6 | 	mov	arg01, fp
0f014     F0 E8 BF FD | 	call	#_converttofloat
0f018     3D 95 02 F6 | 	mov	arg02, result1
0f01c     53 93 02 F6 | 	mov	arg01, local01
0f020     50 82 B1 FD | 	call	#__system___float_mul
0f024     3D 93 02 F6 | 	mov	arg01, result1
0f028     01 94 06 F6 | 	mov	arg02, #1
0f02c     0C 87 B1 FD | 	call	#__system___float_tointeger
0f030     3D A7 02 F6 | 	mov	local01, result1
0f034     0D A8 C6 F9 | 	decod	local02, #13
0f038     53 A9 02 F1 | 	add	local02, local01
0f03c                 | ' 
0f03c                 | ' t1=pop()
0f03c                 | ' pan=8192+round(8192*converttofloat(t1)) 
0f03c                 | ' if pan<0 then pan=0
0f03c     00 A8 56 F2 | 	cmps	local02, #0 wc
0f040     00 A8 06 C6 |  if_b	mov	local02, #0
0f044                 | ' if pan>16384 then pan=16384
0f044     20 00 00 FF 
0f048     01 A8 56 F2 | 	cmps	local02, ##16385 wc
0f04c     0E A8 C6 39 |  if_ae	decod	local02, #14
0f050     1C E6 BF FD | 	call	#_pop
0f054     3F A7 02 F6 | 	mov	local01, result3
0f058     E7 7A 62 FC | 	wrlong	result1, fp
0f05c     04 CE 05 F1 | 	add	fp, #4
0f060     E7 7C 62 FC | 	wrlong	result2, fp
0f064     04 CE 05 F1 | 	add	fp, #4
0f068     E7 A6 62 FC | 	wrlong	local01, fp
0f06c     08 CE 85 F1 | 	sub	fp, #8
0f070     E7 92 02 F6 | 	mov	arg01, fp
0f074     D4 E7 BF FD | 	call	#_converttoint
0f078     3D A7 52 F6 | 	abs	local01, result1 wc
0f07c     07 A6 06 F5 | 	and	local01, #7
0f080     53 A7 82 F6 | 	negc	local01, local01
0f084     38 00 00 FF 
0f088     B4 65 06 F1 | 	add	objptr, ##29108
0f08c     32 93 02 FB | 	rdlong	arg01, objptr
0f090     38 00 00 FF 
0f094     B4 65 86 F1 | 	sub	objptr, ##29108
0f098     06 A6 66 F0 | 	shl	local01, #6
0f09c     53 93 02 F1 | 	add	arg01, local01
0f0a0     16 92 06 F1 | 	add	arg01, #22
0f0a4     49 A9 52 FC | 	wrword	local02, arg01
0f0a8     E7 F0 03 F6 | 	mov	ptra, fp
0f0ac     F2 00 A0 FD | 	call	#popregs_
0f0b0                 | _do_changepan_ret
0f0b0     2D 00 64 FD | 	ret
0f0b4                 | 
0f0b4                 | ' 
0f0b4                 | ' '-------------------- changevol
0f0b4                 | ' 
0f0b4                 | ' sub do_changevol
0f0b4                 | _do_changevol
0f0b4     01 CA 05 F6 | 	mov	COUNT_, #1
0f0b8     E8 00 A0 FD | 	call	#pushregs_
0f0bc     14 F0 07 F1 | 	add	ptra, #20
0f0c0     AC E5 BF FD | 	call	#_pop
0f0c4     3F 95 02 F6 | 	mov	arg02, result3
0f0c8     E7 7A 62 FC | 	wrlong	result1, fp
0f0cc     04 CE 05 F1 | 	add	fp, #4
0f0d0     E7 7C 62 FC | 	wrlong	result2, fp
0f0d4     04 CE 05 F1 | 	add	fp, #4
0f0d8     E7 94 62 FC | 	wrlong	arg02, fp
0f0dc     08 CE 85 F1 | 	sub	fp, #8
0f0e0     E7 92 02 F6 | 	mov	arg01, fp
0f0e4     20 E8 BF FD | 	call	#_converttofloat
0f0e8     3D 93 02 F6 | 	mov	arg01, result1
0f0ec     00 3D 22 FF 
0f0f0     00 94 06 F6 | 	mov	arg02, ##1148846080
0f0f4     7C 81 B1 FD | 	call	#__system___float_mul
0f0f8     3D 93 02 F6 | 	mov	arg01, result1
0f0fc     01 94 06 F6 | 	mov	arg02, #1
0f100     38 86 B1 FD | 	call	#__system___float_tointeger
0f104     3D 95 52 F6 | 	abs	arg02, result1 wc
0f108     0D 94 46 F7 | 	zerox	arg02, #13
0f10c     4A A7 82 F6 | 	negc	local01, arg02
0f110     5C E5 BF FD | 	call	#_pop
0f114     3F 95 02 F6 | 	mov	arg02, result3
0f118     E7 7A 62 FC | 	wrlong	result1, fp
0f11c     04 CE 05 F1 | 	add	fp, #4
0f120     E7 7C 62 FC | 	wrlong	result2, fp
0f124     04 CE 05 F1 | 	add	fp, #4
0f128     E7 94 62 FC | 	wrlong	arg02, fp
0f12c     08 CE 85 F1 | 	sub	fp, #8
0f130     E7 92 02 F6 | 	mov	arg01, fp
0f134     14 E7 BF FD | 	call	#_converttoint
0f138     3D 95 52 F6 | 	abs	arg02, result1 wc
0f13c     07 94 06 F5 | 	and	arg02, #7
0f140     4A 95 82 F6 | 	negc	arg02, arg02
0f144     38 00 00 FF 
0f148     B4 65 06 F1 | 	add	objptr, ##29108
0f14c     32 93 02 FB | 	rdlong	arg01, objptr
0f150     38 00 00 FF 
0f154     B4 65 86 F1 | 	sub	objptr, ##29108
0f158     06 94 66 F0 | 	shl	arg02, #6
0f15c     4A 93 02 F1 | 	add	arg01, arg02
0f160     14 92 06 F1 | 	add	arg01, #20
0f164     49 A7 52 FC | 	wrword	local01, arg01
0f168     E7 F0 03 F6 | 	mov	ptra, fp
0f16c     F2 00 A0 FD | 	call	#popregs_
0f170                 | _do_changevol_ret
0f170     2D 00 64 FD | 	ret
0f174                 | 
0f174                 | ' 
0f174                 | ' '-------------------- changewav
0f174                 | ' 
0f174                 | ' sub do_changewav
0f174                 | _do_changewav
0f174     01 CA 05 F6 | 	mov	COUNT_, #1
0f178     E8 00 A0 FD | 	call	#pushregs_
0f17c     14 F0 07 F1 | 	add	ptra, #20
0f180     EC E4 BF FD | 	call	#_pop
0f184     3F 95 02 F6 | 	mov	arg02, result3
0f188     E7 7A 62 FC | 	wrlong	result1, fp
0f18c     04 CE 05 F1 | 	add	fp, #4
0f190     E7 7C 62 FC | 	wrlong	result2, fp
0f194     04 CE 05 F1 | 	add	fp, #4
0f198     E7 94 62 FC | 	wrlong	arg02, fp
0f19c     08 CE 85 F1 | 	sub	fp, #8
0f1a0     E7 92 02 F6 | 	mov	arg01, fp
0f1a4     A4 E6 BF FD | 	call	#_converttoint
0f1a8     3D A7 02 F6 | 	mov	local01, result1
0f1ac                 | ' 
0f1ac                 | ' t1=pop()
0f1ac                 | ' wave=converttoint(t1)
0f1ac                 | ' if wave<0 then wave=0
0f1ac     00 A6 56 F2 | 	cmps	local01, #0 wc
0f1b0     00 A6 06 C6 |  if_b	mov	local01, #0
0f1b4     B8 E4 BF FD | 	call	#_pop
0f1b8     3F 95 02 F6 | 	mov	arg02, result3
0f1bc     E7 7A 62 FC | 	wrlong	result1, fp
0f1c0     04 CE 05 F1 | 	add	fp, #4
0f1c4     E7 7C 62 FC | 	wrlong	result2, fp
0f1c8     04 CE 05 F1 | 	add	fp, #4
0f1cc     E7 94 62 FC | 	wrlong	arg02, fp
0f1d0     08 CE 85 F1 | 	sub	fp, #8
0f1d4     E7 92 02 F6 | 	mov	arg01, fp
0f1d8     70 E6 BF FD | 	call	#_converttoint
0f1dc     3D 7D 52 F6 | 	abs	result2, result1 wc
0f1e0     07 7C 06 F5 | 	and	result2, #7
0f1e4     3E 7D 82 F6 | 	negc	result2, result2
0f1e8                 | ' if wave <32 then 
0f1e8     20 A6 56 F2 | 	cmps	local01, #32 wc
0f1ec     34 00 90 3D |  if_ae	jmp	#LR__1270
0f1f0     38 00 00 FF 
0f1f4     B4 65 06 F1 | 	add	objptr, ##29108
0f1f8     32 93 02 FB | 	rdlong	arg01, objptr
0f1fc     38 00 00 FF 
0f200     B4 65 86 F1 | 	sub	objptr, ##29108
0f204     06 7C 66 F0 | 	shl	result2, #6
0f208     3E 93 02 F1 | 	add	arg01, result2
0f20c     08 92 06 F1 | 	add	arg01, #8
0f210     0B A6 66 F0 | 	shl	local01, #11
0f214     00 00 40 FF 
0f218     00 A6 06 F1 | 	add	local01, ##-2147483648
0f21c     49 A7 62 FC | 	wrlong	local01, arg01
0f220     28 00 90 FD | 	jmp	#LR__1271
0f224                 | LR__1270
0f224     38 00 00 FF 
0f228     B4 65 06 F1 | 	add	objptr, ##29108
0f22c     32 93 02 FB | 	rdlong	arg01, objptr
0f230     38 00 00 FF 
0f234     B4 65 86 F1 | 	sub	objptr, ##29108
0f238     06 7C 66 F0 | 	shl	result2, #6
0f23c     3E 93 02 F1 | 	add	arg01, result2
0f240     08 92 06 F1 | 	add	arg01, #8
0f244     00 00 C4 FF 
0f248     49 01 68 FC | 	wrlong	##-2013265920, arg01
0f24c                 | LR__1271
0f24c     E7 F0 03 F6 | 	mov	ptra, fp
0f250     F2 00 A0 FD | 	call	#popregs_
0f254                 | _do_changewav_ret
0f254     2D 00 64 FD | 	ret
0f258                 | 
0f258                 | ' 
0f258                 | ' '-------------------- chr$
0f258                 | ' 
0f258                 | ' sub do_chr
0f258                 | _do_chr
0f258     00 CA 05 F6 | 	mov	COUNT_, #0
0f25c     E8 00 A0 FD | 	call	#pushregs_
0f260     14 F0 07 F1 | 	add	ptra, #20
0f264     4C 00 00 FF 
0f268     24 64 06 F1 | 	add	objptr, ##38948
0f26c     32 97 02 FB | 	rdlong	arg03, objptr
0f270     4B 95 02 F6 | 	mov	arg02, arg03
0f274     01 94 66 F0 | 	shl	arg02, #1
0f278     4B 95 02 F1 | 	add	arg02, arg03
0f27c     02 94 66 F0 | 	shl	arg02, #2
0f280     03 00 00 FF 
0f284     04 64 86 F1 | 	sub	objptr, ##1540
0f288     32 95 02 F1 | 	add	arg02, objptr
0f28c     4A 97 02 FB | 	rdlong	arg03, arg02
0f290                 | ' 
0f290                 | ' numpar=compiledline(lineptr_e).result.uresult
0f290                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f290     02 96 16 F2 | 	cmp	arg03, #2 wc
0f294     49 00 00 FF 
0f298     20 64 86 F1 | 	sub	objptr, ##37408
0f29c     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0f2a0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1280
0f2a4     00 92 06 F6 | 	mov	arg01, #0
0f2a8     7C AE B1 FD | 	call	#__system___getiolock_0622
0f2ac     3D 93 02 F6 | 	mov	arg01, result1
0f2b0     F0 58 B1 FD | 	call	#__system___lockmem
0f2b4     97 01 00 FF 
0f2b8     42 95 06 F6 | 	mov	arg02, ##@LR__5971
0f2bc     00 92 06 F6 | 	mov	arg01, #0
0f2c0     00 96 06 F6 | 	mov	arg03, #0
0f2c4     D0 65 B1 FD | 	call	#__system___basic_print_string
0f2c8     00 92 06 F6 | 	mov	arg01, #0
0f2cc     58 AE B1 FD | 	call	#__system___getiolock_0622
0f2d0     3D 01 68 FC | 	wrlong	#0, result1
0f2d4     27 92 06 F6 | 	mov	arg01, #39
0f2d8     00 94 06 F6 | 	mov	arg02, #0
0f2dc     A0 1B B1 FD | 	call	#_printerror
0f2e0     48 00 90 FD | 	jmp	#LR__1281
0f2e4                 | LR__1280
0f2e4     88 E3 BF FD | 	call	#_pop
0f2e8     3F 97 02 F6 | 	mov	arg03, result3
0f2ec     E7 7A 62 FC | 	wrlong	result1, fp
0f2f0     04 CE 05 F1 | 	add	fp, #4
0f2f4     E7 7C 62 FC | 	wrlong	result2, fp
0f2f8     04 CE 05 F1 | 	add	fp, #4
0f2fc     E7 96 62 FC | 	wrlong	arg03, fp
0f300     08 CE 85 F1 | 	sub	fp, #8
0f304     E7 92 02 F6 | 	mov	arg01, fp
0f308     40 E5 BF FD | 	call	#_converttoint
0f30c     3D 93 02 F6 | 	mov	arg01, result1
0f310     FC 72 B1 FD | 	call	#__system__Chr_S
0f314     E7 7A 62 FC | 	wrlong	result1, fp
0f318     08 CE 05 F1 | 	add	fp, #8
0f31c     E7 3E 68 FC | 	wrlong	#31, fp
0f320     08 CE 85 F1 | 	sub	fp, #8
0f324     E7 92 02 F6 | 	mov	arg01, fp
0f328     D4 E3 BF FD | 	call	#_push
0f32c                 | LR__1281
0f32c     E7 F0 03 F6 | 	mov	ptra, fp
0f330     F2 00 A0 FD | 	call	#popregs_
0f334                 | _do_chr_ret
0f334     2D 00 64 FD | 	ret
0f338                 | 
0f338                 | ' 
0f338                 | ' '-------------------- circle
0f338                 | ' 
0f338                 | ' sub do_circle
0f338                 | _do_circle
0f338     02 CA 05 F6 | 	mov	COUNT_, #2
0f33c     E8 00 A0 FD | 	call	#pushregs_
0f340     24 F0 07 F1 | 	add	ptra, #36
0f344     28 E3 BF FD | 	call	#_pop
0f348     3D 99 02 F6 | 	mov	arg04, result1
0f34c     3E 97 02 F6 | 	mov	arg03, result2
0f350     3F 95 02 F6 | 	mov	arg02, result3
0f354     18 CE 05 F1 | 	add	fp, #24
0f358     E7 98 62 FC | 	wrlong	arg04, fp
0f35c     04 CE 05 F1 | 	add	fp, #4
0f360     E7 96 62 FC | 	wrlong	arg03, fp
0f364     04 CE 05 F1 | 	add	fp, #4
0f368     E7 94 62 FC | 	wrlong	arg02, fp
0f36c     20 CE 85 F1 | 	sub	fp, #32
0f370     FC E2 BF FD | 	call	#_pop
0f374     3D 99 02 F6 | 	mov	arg04, result1
0f378     3E 97 02 F6 | 	mov	arg03, result2
0f37c     3F A7 02 F6 | 	mov	local01, result3
0f380     0C CE 05 F1 | 	add	fp, #12
0f384     E7 98 62 FC | 	wrlong	arg04, fp
0f388     04 CE 05 F1 | 	add	fp, #4
0f38c     E7 96 62 FC | 	wrlong	arg03, fp
0f390     04 CE 05 F1 | 	add	fp, #4
0f394     E7 A6 62 FC | 	wrlong	local01, fp
0f398     14 CE 85 F1 | 	sub	fp, #20
0f39c     D0 E2 BF FD | 	call	#_pop
0f3a0     E7 7A 62 FC | 	wrlong	result1, fp
0f3a4     04 CE 05 F1 | 	add	fp, #4
0f3a8     E7 7C 62 FC | 	wrlong	result2, fp
0f3ac     04 CE 05 F1 | 	add	fp, #4
0f3b0     E7 7E 62 FC | 	wrlong	result3, fp
0f3b4                 | ' 
0f3b4                 | ' t3=pop()
0f3b4                 | ' t2=pop()
0f3b4                 | ' t1=pop()
0f3b4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f3b4     3F 99 02 F6 | 	mov	arg04, result3
0f3b8     08 CE 85 F1 | 	sub	fp, #8
0f3bc     1C 98 0E F2 | 	cmp	arg04, #28 wz
0f3c0     08 CE 05 51 |  if_ne	add	fp, #8
0f3c4     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0f3c8     08 CE 85 51 |  if_ne	sub	fp, #8
0f3cc     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0f3d0     7C 00 90 5D |  if_ne	jmp	#LR__1290
0f3d4     14 CE 05 F1 | 	add	fp, #20
0f3d8     E7 A6 02 FB | 	rdlong	local01, fp
0f3dc     14 CE 85 F1 | 	sub	fp, #20
0f3e0     1C A6 0E F2 | 	cmp	local01, #28 wz
0f3e4     14 CE 05 51 |  if_ne	add	fp, #20
0f3e8     E7 98 02 5B |  if_ne	rdlong	arg04, fp
0f3ec     14 CE 85 51 |  if_ne	sub	fp, #20
0f3f0     1D 98 0E 52 |  if_ne	cmp	arg04, #29 wz
0f3f4     58 00 90 5D |  if_ne	jmp	#LR__1290
0f3f8     20 CE 05 F1 | 	add	fp, #32
0f3fc     E7 A6 02 FB | 	rdlong	local01, fp
0f400     20 CE 85 F1 | 	sub	fp, #32
0f404     1C A6 0E F2 | 	cmp	local01, #28 wz
0f408     20 CE 05 51 |  if_ne	add	fp, #32
0f40c     E7 98 02 5B |  if_ne	rdlong	arg04, fp
0f410     20 CE 85 51 |  if_ne	sub	fp, #32
0f414     1D 98 0E 52 |  if_ne	cmp	arg04, #29 wz
0f418     34 00 90 5D |  if_ne	jmp	#LR__1290
0f41c     E7 92 02 FB | 	rdlong	arg01, fp
0f420     0C CE 05 F1 | 	add	fp, #12
0f424     E7 94 02 FB | 	rdlong	arg02, fp
0f428     0C CE 05 F1 | 	add	fp, #12
0f42c     E7 96 02 FB | 	rdlong	arg03, fp
0f430     18 CE 85 F1 | 	sub	fp, #24
0f434     38 00 00 FF 
0f438     CC 65 06 F1 | 	add	objptr, ##29132
0f43c     32 99 02 FB | 	rdlong	arg04, objptr
0f440     38 00 00 FF 
0f444     CC 65 86 F1 | 	sub	objptr, ##29132
0f448     08 33 B1 FD | 	call	#_hg010b_spin2_circle
0f44c                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f44c     4C 00 90 FD | 	jmp	#LR__1291
0f450                 | LR__1290
0f450     E7 92 02 F6 | 	mov	arg01, fp
0f454     F4 E3 BF FD | 	call	#_converttoint
0f458     3D A7 02 F6 | 	mov	local01, result1
0f45c     E7 92 02 F6 | 	mov	arg01, fp
0f460     0C 92 06 F1 | 	add	arg01, #12
0f464     E4 E3 BF FD | 	call	#_converttoint
0f468     3D A9 02 F6 | 	mov	local02, result1
0f46c     E7 92 02 F6 | 	mov	arg01, fp
0f470     18 92 06 F1 | 	add	arg01, #24
0f474     D4 E3 BF FD | 	call	#_converttoint
0f478     3D 97 02 F6 | 	mov	arg03, result1
0f47c     38 00 00 FF 
0f480     CC 65 06 F1 | 	add	objptr, ##29132
0f484     32 99 02 FB | 	rdlong	arg04, objptr
0f488     38 00 00 FF 
0f48c     CC 65 86 F1 | 	sub	objptr, ##29132
0f490     53 93 02 F6 | 	mov	arg01, local01
0f494     54 95 02 F6 | 	mov	arg02, local02
0f498     B8 32 B1 FD | 	call	#_hg010b_spin2_circle
0f49c                 | LR__1291
0f49c     E7 F0 03 F6 | 	mov	ptra, fp
0f4a0     F2 00 A0 FD | 	call	#popregs_
0f4a4                 | _do_circle_ret
0f4a4     2D 00 64 FD | 	ret
0f4a8                 | 
0f4a8                 | ' 
0f4a8                 | ' '-------------------- click
0f4a8                 | ' 
0f4a8                 | ' sub do_click
0f4a8                 | _do_click
0f4a8     C4 E1 BF FD | 	call	#_pop
0f4ac     00 7A 4E F2 | 	cmps	result1, #0 wz
0f4b0                 | ' 
0f4b0                 | ' t1=pop()
0f4b0                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f4b0     52 00 00 AF 
0f4b4     E0 64 06 A1 |  if_e	add	objptr, ##42208
0f4b8     32 01 68 AC |  if_e	wrlong	#0, objptr
0f4bc     52 00 00 FF 
0f4c0     E0 64 C6 F3 | 	sumz	objptr, ##42208
0f4c4     32 03 68 5C |  if_ne	wrlong	#1, objptr
0f4c8     52 00 00 5F 
0f4cc     E0 64 86 51 |  if_ne	sub	objptr, ##42208
0f4d0                 | _do_click_ret
0f4d0     2D 00 64 FD | 	ret
0f4d4                 | 
0f4d4                 | ' 
0f4d4                 | ' '-------------------- close
0f4d4                 | ' 
0f4d4                 | ' sub do_close
0f4d4                 | _do_close
0f4d4     03 CA 05 F6 | 	mov	COUNT_, #3
0f4d8     E8 00 A0 FD | 	call	#pushregs_
0f4dc     90 E1 BF FD | 	call	#_pop
0f4e0     3D A7 02 F6 | 	mov	local01, result1
0f4e4     3F 97 02 F6 | 	mov	arg03, result3
0f4e8     3E A9 02 F6 | 	mov	local02, result2
0f4ec     4B AB 02 F6 | 	mov	local03, arg03
0f4f0                 | ' 
0f4f0                 | ' numpar=compiledline(lineptr_e).result.uresult
0f4f0                 | ' t1=pop()
0f4f0                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f4f0     2C AA 0E F2 | 	cmp	local03, #44 wz
0f4f4     44 00 90 AD |  if_e	jmp	#LR__1300
0f4f8     00 92 06 F6 | 	mov	arg01, #0
0f4fc     28 AC B1 FD | 	call	#__system___getiolock_0622
0f500     3D 93 02 F6 | 	mov	arg01, result1
0f504     9C 56 B1 FD | 	call	#__system___lockmem
0f508     97 01 00 FF 
0f50c     49 95 06 F6 | 	mov	arg02, ##@LR__5972
0f510     00 92 06 F6 | 	mov	arg01, #0
0f514     00 96 06 F6 | 	mov	arg03, #0
0f518     7C 63 B1 FD | 	call	#__system___basic_print_string
0f51c     00 92 06 F6 | 	mov	arg01, #0
0f520     0A 94 06 F6 | 	mov	arg02, #10
0f524     00 96 06 F6 | 	mov	arg03, #0
0f528     14 63 B1 FD | 	call	#__system___basic_print_char
0f52c     00 92 06 F6 | 	mov	arg01, #0
0f530     F4 AB B1 FD | 	call	#__system___getiolock_0622
0f534     3D 01 68 FC | 	wrlong	#0, result1
0f538     08 00 90 FD | 	jmp	#LR__1301
0f53c                 | LR__1300
0f53c                 | ' channel  = t1.result.iresult
0f53c                 | ' close #channel
0f53c     53 93 02 F6 | 	mov	arg01, local01
0f540     3C A2 B1 FD | 	call	#__system__close
0f544                 | LR__1301
0f544     E7 F0 03 F6 | 	mov	ptra, fp
0f548     F2 00 A0 FD | 	call	#popregs_
0f54c                 | _do_close_ret
0f54c     2D 00 64 FD | 	ret
0f550                 | 
0f550                 | ' 
0f550                 | ' '-------------------- cls
0f550                 | ' 
0f550                 | ' sub do_cls
0f550                 | _do_cls
0f550     38 00 00 FF 
0f554     E0 65 06 F1 | 	add	objptr, ##29152
0f558     32 93 02 FB | 	rdlong	arg01, objptr
0f55c     04 64 86 F1 | 	sub	objptr, #4
0f560     32 95 02 FB | 	rdlong	arg02, objptr
0f564     38 00 00 FF 
0f568     DC 65 86 F1 | 	sub	objptr, ##29148
0f56c     F0 36 B1 FD | 	call	#_hg010b_spin2_cls
0f570     38 00 00 FF 
0f574     E0 65 06 F1 | 	add	objptr, ##29152
0f578     32 95 02 FB | 	rdlong	arg02, objptr
0f57c     14 64 86 F1 | 	sub	objptr, #20
0f580     32 95 62 FC | 	wrlong	arg02, objptr
0f584     38 00 00 FF 
0f588     CC 65 86 F1 | 	sub	objptr, ##29132
0f58c                 | _do_cls_ret
0f58c     2D 00 64 FD | 	ret
0f590                 | 
0f590                 | ' 
0f590                 | ' sub do_coginit
0f590                 | _do_coginit
0f590     05 CA 05 F6 | 	mov	COUNT_, #5
0f594     E8 00 A0 FD | 	call	#pushregs_
0f598     08 00 00 FF 
0f59c     1C F0 07 F1 | 	add	ptra, ##4124
0f5a0     4C 00 00 FF 
0f5a4     24 64 06 F1 | 	add	objptr, ##38948
0f5a8     32 A7 02 FB | 	rdlong	local01, objptr
0f5ac     53 A9 02 F6 | 	mov	local02, local01
0f5b0     01 A8 66 F0 | 	shl	local02, #1
0f5b4     53 A9 02 F1 | 	add	local02, local01
0f5b8     02 A8 66 F0 | 	shl	local02, #2
0f5bc     03 00 00 FF 
0f5c0     04 64 86 F1 | 	sub	objptr, ##1540
0f5c4     32 A9 02 F1 | 	add	local02, objptr
0f5c8     54 A9 02 FB | 	rdlong	local02, local02
0f5cc                 | ' numpar=compiledline(lineptr_e).result.uresult
0f5cc                 | ' if numpar<2 orelse numpar>3 then print "coginit: "; : printerror(39) : return
0f5cc     02 A8 56 F2 | 	cmps	local02, #2 wc
0f5d0     49 00 00 FF 
0f5d4     20 64 86 F1 | 	sub	objptr, ##37408
0f5d8     08 00 90 CD |  if_b	jmp	#LR__1310
0f5dc     04 A8 56 F2 | 	cmps	local02, #4 wc
0f5e0     40 00 90 CD |  if_b	jmp	#LR__1311
0f5e4                 | LR__1310
0f5e4     00 92 06 F6 | 	mov	arg01, #0
0f5e8     3C AB B1 FD | 	call	#__system___getiolock_0622
0f5ec     3D 93 02 F6 | 	mov	arg01, result1
0f5f0     B0 55 B1 FD | 	call	#__system___lockmem
0f5f4     97 01 00 FF 
0f5f8     5B 95 06 F6 | 	mov	arg02, ##@LR__5973
0f5fc     00 92 06 F6 | 	mov	arg01, #0
0f600     00 96 06 F6 | 	mov	arg03, #0
0f604     90 62 B1 FD | 	call	#__system___basic_print_string
0f608     00 92 06 F6 | 	mov	arg01, #0
0f60c     18 AB B1 FD | 	call	#__system___getiolock_0622
0f610     3D 01 68 FC | 	wrlong	#0, result1
0f614     27 92 06 F6 | 	mov	arg01, #39
0f618     00 94 06 F6 | 	mov	arg02, #0
0f61c     60 18 B1 FD | 	call	#_printerror
0f620     2C 01 90 FD | 	jmp	#LR__1315
0f624                 | LR__1311
0f624     48 E0 BF FD | 	call	#_pop
0f628     3F A7 02 F6 | 	mov	local01, result3
0f62c     08 00 00 FF 
0f630     10 CE 05 F1 | 	add	fp, ##4112
0f634     E7 7A 62 FC | 	wrlong	result1, fp
0f638     04 CE 05 F1 | 	add	fp, #4
0f63c     E7 7C 62 FC | 	wrlong	result2, fp
0f640     04 CE 05 F1 | 	add	fp, #4
0f644     E7 A6 62 FC | 	wrlong	local01, fp
0f648     08 CE 85 F1 | 	sub	fp, #8
0f64c     E7 92 02 F6 | 	mov	arg01, fp
0f650     08 00 00 FF 
0f654     10 CE 85 F1 | 	sub	fp, ##4112
0f658     F0 E1 BF FD | 	call	#_converttoint
0f65c     3D AB 02 F6 | 	mov	local03, result1
0f660     0C E0 BF FD | 	call	#_pop
0f664     3F A7 02 F6 | 	mov	local01, result3
0f668     08 00 00 FF 
0f66c     10 CE 05 F1 | 	add	fp, ##4112
0f670     E7 7A 62 FC | 	wrlong	result1, fp
0f674     04 CE 05 F1 | 	add	fp, #4
0f678     E7 7C 62 FC | 	wrlong	result2, fp
0f67c     04 CE 05 F1 | 	add	fp, #4
0f680     E7 A6 62 FC | 	wrlong	local01, fp
0f684     08 CE 85 F1 | 	sub	fp, #8
0f688     E7 92 02 F6 | 	mov	arg01, fp
0f68c     08 00 00 FF 
0f690     10 CE 85 F1 | 	sub	fp, ##4112
0f694     B4 E1 BF FD | 	call	#_converttoint
0f698     3D AD 02 F6 | 	mov	local04, result1
0f69c                 | ' t1=pop()
0f69c                 | ' ptra_val=converttoint(t1)
0f69c                 | ' t1=pop()
0f69c                 | ' addrval=converttoint(t1)
0f69c                 | ' if numpar=3 then 
0f69c     03 A8 0E F2 | 	cmp	local02, #3 wz
0f6a0     40 00 90 5D |  if_ne	jmp	#LR__1312
0f6a4     C8 DF BF FD | 	call	#_pop
0f6a8     3F A7 02 F6 | 	mov	local01, result3
0f6ac     08 00 00 FF 
0f6b0     10 CE 05 F1 | 	add	fp, ##4112
0f6b4     E7 7A 62 FC | 	wrlong	result1, fp
0f6b8     04 CE 05 F1 | 	add	fp, #4
0f6bc     E7 7C 62 FC | 	wrlong	result2, fp
0f6c0     04 CE 05 F1 | 	add	fp, #4
0f6c4     E7 A6 62 FC | 	wrlong	local01, fp
0f6c8     08 CE 85 F1 | 	sub	fp, #8
0f6cc     E7 92 02 F6 | 	mov	arg01, fp
0f6d0     08 00 00 FF 
0f6d4     10 CE 85 F1 | 	sub	fp, ##4112
0f6d8     70 E1 BF FD | 	call	#_converttoint
0f6dc     3D AF 02 F6 | 	mov	local05, result1
0f6e0     04 00 90 FD | 	jmp	#LR__1313
0f6e4                 | LR__1312
0f6e4     10 AE 06 F6 | 	mov	local05, #16
0f6e8                 | LR__1313
0f6e8                 | '     
0f6e8                 | ' if addrval>$80000 then psram.read1(varptr(tempbuf(0)),addrval,4096) : addrval=varptr(tempbuf(0))
0f6e8     00 04 00 FF 
0f6ec     01 AC 56 F2 | 	cmps	local04, ##524289 wc
0f6f0     2C 00 90 CD |  if_b	jmp	#LR__1314
0f6f4     E7 92 02 F6 | 	mov	arg01, fp
0f6f8     10 92 06 F1 | 	add	arg01, #16
0f6fc     56 95 02 F6 | 	mov	arg02, local04
0f700     0C 96 C6 F9 | 	decod	arg03, #12
0f704     0B 00 00 FF 
0f708     CC 64 06 F1 | 	add	objptr, ##5836
0f70c     18 45 B1 FD | 	call	#_psram_spin2_read1
0f710     0B 00 00 FF 
0f714     CC 64 86 F1 | 	sub	objptr, ##5836
0f718     E7 AC 02 F6 | 	mov	local04, fp
0f71c     10 AC 06 F1 | 	add	local04, #16
0f720                 | LR__1314
0f720                 | ' 
0f720                 | '  asm
0f720     28 AA 62 FD | 	setq	local03
0f724     56 AF F2 FC | 	coginit	local05, local04 wc
0f728                 | '  
0f728                 | ' return cog 
0f728     08 00 00 FF 
0f72c     10 CE 05 F1 | 	add	fp, ##4112
0f730     E7 AE 62 FC | 	wrlong	local05, fp
0f734     08 CE 05 F1 | 	add	fp, #8
0f738     E7 38 68 FC | 	wrlong	#28, fp
0f73c     08 CE 85 F1 | 	sub	fp, #8
0f740     E7 92 02 F6 | 	mov	arg01, fp
0f744     08 00 00 FF 
0f748     10 CE 85 F1 | 	sub	fp, ##4112
0f74c     B0 DF BF FD | 	call	#_push
0f750                 | LR__1315
0f750     E7 F0 03 F6 | 	mov	ptra, fp
0f754     F2 00 A0 FD | 	call	#popregs_
0f758                 | _do_coginit_ret
0f758     2D 00 64 FD | 	ret
0f75c                 | 
0f75c                 | ' 
0f75c                 | ' '-------------------- cogstop
0f75c                 | ' 
0f75c                 | ' sub do_cogstop
0f75c                 | _do_cogstop
0f75c     00 CA 05 F6 | 	mov	COUNT_, #0
0f760     E8 00 A0 FD | 	call	#pushregs_
0f764     0C F0 07 F1 | 	add	ptra, #12
0f768     04 DF BF FD | 	call	#_pop
0f76c     E7 7A 62 FC | 	wrlong	result1, fp
0f770     04 CE 05 F1 | 	add	fp, #4
0f774     E7 7C 62 FC | 	wrlong	result2, fp
0f778     04 CE 05 F1 | 	add	fp, #4
0f77c     E7 7E 62 FC | 	wrlong	result3, fp
0f780     08 CE 85 F1 | 	sub	fp, #8
0f784     E7 92 02 F6 | 	mov	arg01, fp
0f788     C0 E0 BF FD | 	call	#_converttoint
0f78c     03 7A 62 FD | 	cogstop	result1
0f790     E7 F0 03 F6 | 	mov	ptra, fp
0f794     F2 00 A0 FD | 	call	#popregs_
0f798                 | _do_cogstop_ret
0f798     2D 00 64 FD | 	ret
0f79c                 | 
0f79c                 | ' 
0f79c                 | ' '-------------------- color
0f79c                 | ' 
0f79c                 | ' sub do_color
0f79c                 | _do_color
0f79c     03 CA 05 F6 | 	mov	COUNT_, #3
0f7a0     E8 00 A0 FD | 	call	#pushregs_
0f7a4     C8 DE BF FD | 	call	#_pop
0f7a8     3D A7 02 F6 | 	mov	local01, result1
0f7ac     3E A9 02 F6 | 	mov	local02, result2
0f7b0     3F AB 02 F6 | 	mov	local03, result3
0f7b4     38 00 00 FF 
0f7b8     CC 65 06 F1 | 	add	objptr, ##29132
0f7bc     32 A7 62 FC | 	wrlong	local01, objptr
0f7c0     38 00 00 FF 
0f7c4     CC 65 86 F1 | 	sub	objptr, ##29132
0f7c8     E7 F0 03 F6 | 	mov	ptra, fp
0f7cc     F2 00 A0 FD | 	call	#popregs_
0f7d0                 | _do_color_ret
0f7d0     2D 00 64 FD | 	ret
0f7d4                 | 
0f7d4                 | ' 
0f7d4                 | ' '-------------------- copy
0f7d4                 | ' 
0f7d4                 | ' sub do_copy
0f7d4                 | _do_copy
0f7d4     08 CA 05 F6 | 	mov	COUNT_, #8
0f7d8     E8 00 A0 FD | 	call	#pushregs_
0f7dc     90 DE BF FD | 	call	#_pop
0f7e0     3D A7 02 F6 | 	mov	local01, result1
0f7e4     3E 9B 02 F6 | 	mov	arg05, result2
0f7e8     3F 99 02 F6 | 	mov	arg04, result3
0f7ec     4D A9 02 F6 | 	mov	local02, arg05
0f7f0     4C AB 02 F6 | 	mov	local03, arg04
0f7f4     78 DE BF FD | 	call	#_pop
0f7f8     3E 9B 02 F6 | 	mov	arg05, result2
0f7fc     3F 99 02 F6 | 	mov	arg04, result3
0f800     3D AD 02 F6 | 	mov	local04, result1
0f804     4D AF 02 F6 | 	mov	local05, arg05
0f808     4C B1 02 F6 | 	mov	local06, arg04
0f80c                 | ' 
0f80c                 | ' t1=pop()
0f80c                 | ' t2=pop()
0f80c                 | ' if t2.result_type=result_string2 then 
0f80c     2B B0 0E F2 | 	cmp	local06, #43 wz
0f810     10 00 90 5D |  if_ne	jmp	#LR__1320
0f814     56 93 02 F6 | 	mov	arg01, local04
0f818     C4 DF BF FD | 	call	#_convertstring
0f81c     3D B3 02 F6 | 	mov	local07, result1
0f820     2C 00 90 FD | 	jmp	#LR__1322
0f824                 | LR__1320
0f824     1F B0 0E F2 | 	cmp	local06, #31 wz
0f828     56 B3 02 A6 |  if_e	mov	local07, local04
0f82c     20 00 90 AD |  if_e	jmp	#LR__1321
0f830     52 00 00 FF 
0f834     94 64 06 F1 | 	add	objptr, ##42132
0f838     32 95 02 FB | 	rdlong	arg02, objptr
0f83c     52 00 00 FF 
0f840     94 64 86 F1 | 	sub	objptr, ##42132
0f844     0F 92 06 F6 | 	mov	arg01, #15
0f848     34 16 B1 FD | 	call	#_printerror
0f84c                 | '   printerror(15,runheader(0)) : return
0f84c     50 03 90 FD | 	jmp	#LR__1329
0f850                 | LR__1321
0f850                 | LR__1322
0f850                 | ' if t1.result_type=result_string2 then 
0f850     2B AA 0E F2 | 	cmp	local03, #43 wz
0f854     10 00 90 5D |  if_ne	jmp	#LR__1323
0f858     53 93 02 F6 | 	mov	arg01, local01
0f85c     80 DF BF FD | 	call	#_convertstring
0f860     3D B5 02 F6 | 	mov	local08, result1
0f864     2C 00 90 FD | 	jmp	#LR__1325
0f868                 | LR__1323
0f868     1F AA 0E F2 | 	cmp	local03, #31 wz
0f86c     53 B5 02 A6 |  if_e	mov	local08, local01
0f870     20 00 90 AD |  if_e	jmp	#LR__1324
0f874     52 00 00 FF 
0f878     94 64 06 F1 | 	add	objptr, ##42132
0f87c     32 95 02 FB | 	rdlong	arg02, objptr
0f880     52 00 00 FF 
0f884     94 64 86 F1 | 	sub	objptr, ##42132
0f888     0F 92 06 F6 | 	mov	arg01, #15
0f88c     F0 15 B1 FD | 	call	#_printerror
0f890                 | '   printerror(15,runheader(0)) : return
0f890     0C 03 90 FD | 	jmp	#LR__1329
0f894                 | LR__1324
0f894                 | LR__1325
0f894                 | ' 
0f894                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0f894     09 92 06 F6 | 	mov	arg01, #9
0f898     59 95 02 F6 | 	mov	arg02, local07
0f89c     00 96 06 F6 | 	mov	arg03, #0
0f8a0     B0 5E B1 FD | 	call	#__system___basic_open_string
0f8a4     20 68 06 F1 | 	add	ptr___system__dat__, #32
0f8a8     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
0f8ac     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0f8b0     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0f8b4     54 00 00 FF 
0f8b8     B4 64 06 F1 | 	add	objptr, ##43188
0f8bc     32 7B 62 FC | 	wrlong	result1, objptr
0f8c0     54 00 00 FF 
0f8c4     B4 64 86 F1 | 	sub	objptr, ##43188
0f8c8     0C 01 90 AD |  if_e	jmp	#LR__1326
0f8cc     00 92 06 F6 | 	mov	arg01, #0
0f8d0     54 A8 B1 FD | 	call	#__system___getiolock_0622
0f8d4     3D 93 02 F6 | 	mov	arg01, result1
0f8d8     C8 52 B1 FD | 	call	#__system___lockmem
0f8dc     97 01 00 FF 
0f8e0     65 95 06 F6 | 	mov	arg02, ##@LR__5974
0f8e4     00 92 06 F6 | 	mov	arg01, #0
0f8e8     00 96 06 F6 | 	mov	arg03, #0
0f8ec     A8 5F B1 FD | 	call	#__system___basic_print_string
0f8f0     54 00 00 FF 
0f8f4     B4 64 06 F1 | 	add	objptr, ##43188
0f8f8     32 95 02 FB | 	rdlong	arg02, objptr
0f8fc     54 00 00 FF 
0f900     B4 64 86 F1 | 	sub	objptr, ##43188
0f904     00 92 06 F6 | 	mov	arg01, #0
0f908     00 96 06 F6 | 	mov	arg03, #0
0f90c     0A 98 06 F6 | 	mov	arg04, #10
0f910     C8 5F B1 FD | 	call	#__system___basic_print_integer
0f914     97 01 00 FF 
0f918     75 95 06 F6 | 	mov	arg02, ##@LR__5975
0f91c     00 92 06 F6 | 	mov	arg01, #0
0f920     00 96 06 F6 | 	mov	arg03, #0
0f924     70 5F B1 FD | 	call	#__system___basic_print_string
0f928     52 00 00 FF 
0f92c     94 64 06 F1 | 	add	objptr, ##42132
0f930     32 95 02 FB | 	rdlong	arg02, objptr
0f934     52 00 00 FF 
0f938     94 64 86 F1 | 	sub	objptr, ##42132
0f93c     00 92 06 F6 | 	mov	arg01, #0
0f940     00 96 06 F6 | 	mov	arg03, #0
0f944     0A 98 06 F6 | 	mov	arg04, #10
0f948     D0 5F B1 FD | 	call	#__system___basic_print_unsigned
0f94c     97 01 00 FF 
0f950     7F 95 06 F6 | 	mov	arg02, ##@LR__5976
0f954     00 92 06 F6 | 	mov	arg01, #0
0f958     00 96 06 F6 | 	mov	arg03, #0
0f95c     38 5F B1 FD | 	call	#__system___basic_print_string
0f960     00 B4 06 F6 | 	mov	local08, #0
0f964     54 00 00 FF 
0f968     B4 64 06 F1 | 	add	objptr, ##43188
0f96c     32 93 02 FB | 	rdlong	arg01, objptr
0f970     54 00 00 FF 
0f974     B4 64 86 F1 | 	sub	objptr, ##43188
0f978     D8 73 B1 FD | 	call	#__system___strerror
0f97c     3D 95 02 F6 | 	mov	arg02, result1
0f980     5A 93 02 F6 | 	mov	arg01, local08
0f984     00 96 06 F6 | 	mov	arg03, #0
0f988     0C 5F B1 FD | 	call	#__system___basic_print_string
0f98c     97 01 00 FF 
0f990     82 95 06 F6 | 	mov	arg02, ##@LR__5977
0f994     00 92 06 F6 | 	mov	arg01, #0
0f998     00 96 06 F6 | 	mov	arg03, #0
0f99c     F8 5E B1 FD | 	call	#__system___basic_print_string
0f9a0     00 92 06 F6 | 	mov	arg01, #0
0f9a4     59 95 02 F6 | 	mov	arg02, local07
0f9a8     00 96 06 F6 | 	mov	arg03, #0
0f9ac     E8 5E B1 FD | 	call	#__system___basic_print_string
0f9b0     00 92 06 F6 | 	mov	arg01, #0
0f9b4     0A 94 06 F6 | 	mov	arg02, #10
0f9b8     00 96 06 F6 | 	mov	arg03, #0
0f9bc     80 5E B1 FD | 	call	#__system___basic_print_char
0f9c0     00 92 06 F6 | 	mov	arg01, #0
0f9c4     60 A7 B1 FD | 	call	#__system___getiolock_0622
0f9c8     3D 01 68 FC | 	wrlong	#0, result1
0f9cc     09 92 06 F6 | 	mov	arg01, #9
0f9d0     AC 9D B1 FD | 	call	#__system__close
0f9d4     C8 01 90 FD | 	jmp	#LR__1329
0f9d8                 | LR__1326
0f9d8                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0f9d8     08 92 06 F6 | 	mov	arg01, #8
0f9dc     5A 95 02 F6 | 	mov	arg02, local08
0f9e0     0D 96 06 F6 | 	mov	arg03, #13
0f9e4     6C 5D B1 FD | 	call	#__system___basic_open_string
0f9e8     20 68 06 F1 | 	add	ptr___system__dat__, #32
0f9ec     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
0f9f0     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0f9f4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0f9f8     54 00 00 FF 
0f9fc     B4 64 06 F1 | 	add	objptr, ##43188
0fa00     32 7B 62 FC | 	wrlong	result1, objptr
0fa04     54 00 00 FF 
0fa08     B4 64 86 F1 | 	sub	objptr, ##43188
0fa0c     0C 01 90 AD |  if_e	jmp	#LR__1327
0fa10     00 92 06 F6 | 	mov	arg01, #0
0fa14     10 A7 B1 FD | 	call	#__system___getiolock_0622
0fa18     3D 93 02 F6 | 	mov	arg01, result1
0fa1c     84 51 B1 FD | 	call	#__system___lockmem
0fa20     97 01 00 FF 
0fa24     90 95 06 F6 | 	mov	arg02, ##@LR__5978
0fa28     00 92 06 F6 | 	mov	arg01, #0
0fa2c     00 96 06 F6 | 	mov	arg03, #0
0fa30     64 5E B1 FD | 	call	#__system___basic_print_string
0fa34     54 00 00 FF 
0fa38     B4 64 06 F1 | 	add	objptr, ##43188
0fa3c     32 95 02 FB | 	rdlong	arg02, objptr
0fa40     54 00 00 FF 
0fa44     B4 64 86 F1 | 	sub	objptr, ##43188
0fa48     00 92 06 F6 | 	mov	arg01, #0
0fa4c     00 96 06 F6 | 	mov	arg03, #0
0fa50     0A 98 06 F6 | 	mov	arg04, #10
0fa54     84 5E B1 FD | 	call	#__system___basic_print_integer
0fa58     97 01 00 FF 
0fa5c     A0 95 06 F6 | 	mov	arg02, ##@LR__5979
0fa60     00 92 06 F6 | 	mov	arg01, #0
0fa64     00 96 06 F6 | 	mov	arg03, #0
0fa68     2C 5E B1 FD | 	call	#__system___basic_print_string
0fa6c     52 00 00 FF 
0fa70     94 64 06 F1 | 	add	objptr, ##42132
0fa74     32 95 02 FB | 	rdlong	arg02, objptr
0fa78     52 00 00 FF 
0fa7c     94 64 86 F1 | 	sub	objptr, ##42132
0fa80     00 92 06 F6 | 	mov	arg01, #0
0fa84     00 96 06 F6 | 	mov	arg03, #0
0fa88     0A 98 06 F6 | 	mov	arg04, #10
0fa8c     8C 5E B1 FD | 	call	#__system___basic_print_unsigned
0fa90     97 01 00 FF 
0fa94     AA 95 06 F6 | 	mov	arg02, ##@LR__5980
0fa98     00 92 06 F6 | 	mov	arg01, #0
0fa9c     00 96 06 F6 | 	mov	arg03, #0
0faa0     F4 5D B1 FD | 	call	#__system___basic_print_string
0faa4     00 B2 06 F6 | 	mov	local07, #0
0faa8     54 00 00 FF 
0faac     B4 64 06 F1 | 	add	objptr, ##43188
0fab0     32 93 02 FB | 	rdlong	arg01, objptr
0fab4     54 00 00 FF 
0fab8     B4 64 86 F1 | 	sub	objptr, ##43188
0fabc     94 72 B1 FD | 	call	#__system___strerror
0fac0     3D 95 02 F6 | 	mov	arg02, result1
0fac4     59 93 02 F6 | 	mov	arg01, local07
0fac8     00 96 06 F6 | 	mov	arg03, #0
0facc     C8 5D B1 FD | 	call	#__system___basic_print_string
0fad0     97 01 00 FF 
0fad4     AD 95 06 F6 | 	mov	arg02, ##@LR__5981
0fad8     00 92 06 F6 | 	mov	arg01, #0
0fadc     00 96 06 F6 | 	mov	arg03, #0
0fae0     B4 5D B1 FD | 	call	#__system___basic_print_string
0fae4     00 92 06 F6 | 	mov	arg01, #0
0fae8     5A 95 02 F6 | 	mov	arg02, local08
0faec     00 96 06 F6 | 	mov	arg03, #0
0faf0     A4 5D B1 FD | 	call	#__system___basic_print_string
0faf4     00 92 06 F6 | 	mov	arg01, #0
0faf8     0A 94 06 F6 | 	mov	arg02, #10
0fafc     00 96 06 F6 | 	mov	arg03, #0
0fb00     3C 5D B1 FD | 	call	#__system___basic_print_char
0fb04     00 92 06 F6 | 	mov	arg01, #0
0fb08     1C A6 B1 FD | 	call	#__system___getiolock_0622
0fb0c     3D 01 68 FC | 	wrlong	#0, result1
0fb10     08 92 06 F6 | 	mov	arg01, #8
0fb14     68 9C B1 FD | 	call	#__system__close
0fb18     84 00 90 FD | 	jmp	#LR__1329
0fb1c                 | LR__1327
0fb1c                 | ' 
0fb1c                 | ' do
0fb1c                 | LR__1328
0fb1c                 | '   get #9,,block(0),1024,r
0fb1c     32 97 02 F6 | 	mov	arg03, objptr
0fb20     50 00 00 FF 
0fb24     58 96 06 F1 | 	add	arg03, ##41048
0fb28     09 92 06 F6 | 	mov	arg01, #9
0fb2c     00 94 06 F6 | 	mov	arg02, #0
0fb30     0A 98 C6 F9 | 	decod	arg04, #10
0fb34     01 9A 06 F6 | 	mov	arg05, #1
0fb38     E4 5E B1 FD | 	call	#__system___basic_get
0fb3c     54 00 00 FF 
0fb40     EC 64 06 F1 | 	add	objptr, ##43244
0fb44     32 7B 62 FC | 	wrlong	result1, objptr
0fb48                 | '   put #8,,block(0),r
0fb48     04 00 00 FF 
0fb4c     94 64 86 F1 | 	sub	objptr, ##2196
0fb50     32 97 02 F6 | 	mov	arg03, objptr
0fb54     3D 99 02 F6 | 	mov	arg04, result1
0fb58     50 00 00 FF 
0fb5c     58 64 86 F1 | 	sub	objptr, ##41048
0fb60     08 92 06 F6 | 	mov	arg01, #8
0fb64     00 94 06 F6 | 	mov	arg02, #0
0fb68     01 9A 06 F6 | 	mov	arg05, #1
0fb6c     38 5E B1 FD | 	call	#__system___basic_put
0fb70     54 00 00 FF 
0fb74     EC 64 06 F1 | 	add	objptr, ##43244
0fb78     32 B5 02 FB | 	rdlong	local08, objptr
0fb7c     54 00 00 FF 
0fb80     EC 64 86 F1 | 	sub	objptr, ##43244
0fb84     02 00 00 FF 
0fb88     00 B4 0E F2 | 	cmp	local08, ##1024 wz
0fb8c     8C FF 9F AD |  if_e	jmp	#LR__1328
0fb90                 | ' close #8
0fb90     08 92 06 F6 | 	mov	arg01, #8
0fb94     E8 9B B1 FD | 	call	#__system__close
0fb98                 | ' close #9
0fb98     09 92 06 F6 | 	mov	arg01, #9
0fb9c     E0 9B B1 FD | 	call	#__system__close
0fba0                 | LR__1329
0fba0     E7 F0 03 F6 | 	mov	ptra, fp
0fba4     F2 00 A0 FD | 	call	#popregs_
0fba8                 | _do_copy_ret
0fba8     2D 00 64 FD | 	ret
0fbac                 | 
0fbac                 | ' 
0fbac                 | ' '-------------------- cos
0fbac                 | ' 
0fbac                 | ' sub do_cos
0fbac                 | _do_cos
0fbac     01 CA 05 F6 | 	mov	COUNT_, #1
0fbb0     E8 00 A0 FD | 	call	#pushregs_
0fbb4     10 F0 07 F1 | 	add	ptra, #16
0fbb8     4C 00 00 FF 
0fbbc     24 64 06 F1 | 	add	objptr, ##38948
0fbc0     32 97 02 FB | 	rdlong	arg03, objptr
0fbc4     4B 95 02 F6 | 	mov	arg02, arg03
0fbc8     01 94 66 F0 | 	shl	arg02, #1
0fbcc     4B 95 02 F1 | 	add	arg02, arg03
0fbd0     02 94 66 F0 | 	shl	arg02, #2
0fbd4     03 00 00 FF 
0fbd8     04 64 86 F1 | 	sub	objptr, ##1540
0fbdc     32 95 02 F1 | 	add	arg02, objptr
0fbe0     4A 97 02 FB | 	rdlong	arg03, arg02
0fbe4                 | ' 
0fbe4                 | ' numpar=compiledline(lineptr_e).result.uresult
0fbe4                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0fbe4     02 96 16 F2 | 	cmp	arg03, #2 wc
0fbe8     49 00 00 FF 
0fbec     20 64 86 F1 | 	sub	objptr, ##37408
0fbf0     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0fbf4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1330
0fbf8     00 92 06 F6 | 	mov	arg01, #0
0fbfc     28 A5 B1 FD | 	call	#__system___getiolock_0622
0fc00     3D 93 02 F6 | 	mov	arg01, result1
0fc04     9C 4F B1 FD | 	call	#__system___lockmem
0fc08     97 01 00 FF 
0fc0c     BB 95 06 F6 | 	mov	arg02, ##@LR__5982
0fc10     00 92 06 F6 | 	mov	arg01, #0
0fc14     00 96 06 F6 | 	mov	arg03, #0
0fc18     7C 5C B1 FD | 	call	#__system___basic_print_string
0fc1c     00 92 06 F6 | 	mov	arg01, #0
0fc20     04 A5 B1 FD | 	call	#__system___getiolock_0622
0fc24     3D 01 68 FC | 	wrlong	#0, result1
0fc28     27 92 06 F6 | 	mov	arg01, #39
0fc2c     00 94 06 F6 | 	mov	arg02, #0
0fc30     4C 12 B1 FD | 	call	#_printerror
0fc34     78 00 90 FD | 	jmp	#LR__1331
0fc38                 | LR__1330
0fc38     34 DA BF FD | 	call	#_pop
0fc3c     E7 7A 62 FC | 	wrlong	result1, fp
0fc40     04 CE 05 F1 | 	add	fp, #4
0fc44     E7 7C 62 FC | 	wrlong	result2, fp
0fc48     04 CE 05 F1 | 	add	fp, #4
0fc4c     E7 7E 62 FC | 	wrlong	result3, fp
0fc50     08 CE 85 F1 | 	sub	fp, #8
0fc54     54 00 00 FF 
0fc58     84 64 06 F1 | 	add	objptr, ##43140
0fc5c     32 A7 02 FB | 	rdlong	local01, objptr
0fc60     54 00 00 FF 
0fc64     84 64 86 F1 | 	sub	objptr, ##43140
0fc68     E7 92 02 F6 | 	mov	arg01, fp
0fc6c     98 DC BF FD | 	call	#_converttofloat
0fc70     3D 95 02 F6 | 	mov	arg02, result1
0fc74     53 93 02 F6 | 	mov	arg01, local01
0fc78     F8 75 B1 FD | 	call	#__system___float_mul
0fc7c     3D 95 02 F6 | 	mov	arg02, result1
0fc80     87 E4 1F FF 
0fc84     DB 93 06 F6 | 	mov	arg01, ##1070141403
0fc88     1F 94 E6 F4 | 	bitnot	arg02, #31
0fc8c     14 72 B1 FD | 	call	#__system___float_add
0fc90     3D 93 02 F6 | 	mov	arg01, result1
0fc94     4C 7F B1 FD | 	call	#__system____builtin_sinf
0fc98     E7 7A 62 FC | 	wrlong	result1, fp
0fc9c     08 CE 05 F1 | 	add	fp, #8
0fca0     E7 3C 68 FC | 	wrlong	#30, fp
0fca4     08 CE 85 F1 | 	sub	fp, #8
0fca8     E7 92 02 F6 | 	mov	arg01, fp
0fcac     50 DA BF FD | 	call	#_push
0fcb0                 | LR__1331
0fcb0     E7 F0 03 F6 | 	mov	ptra, fp
0fcb4     F2 00 A0 FD | 	call	#popregs_
0fcb8                 | _do_cos_ret
0fcb8     2D 00 64 FD | 	ret
0fcbc                 | 
0fcbc                 | ' 
0fcbc                 | ' '-------------------- cursor
0fcbc                 | ' 
0fcbc                 | ' sub do_cursor
0fcbc                 | _do_cursor
0fcbc     B0 D9 BF FD | 	call	#_pop
0fcc0     00 7A 4E F2 | 	cmps	result1, #0 wz
0fcc4                 | ' t1=pop()
0fcc4                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0fcc4     14 00 90 5D |  if_ne	jmp	#LR__1340
0fcc8     11 92 06 F6 | 	mov	arg01, #17
0fccc     00 94 06 F6 | 	mov	arg02, #0
0fcd0     00 96 06 F6 | 	mov	arg03, #0
0fcd4     F0 21 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fcd8     10 00 90 FD | 	jmp	#LR__1341
0fcdc                 | LR__1340
0fcdc     11 92 06 F6 | 	mov	arg01, #17
0fce0     08 94 06 F6 | 	mov	arg02, #8
0fce4     10 96 06 F6 | 	mov	arg03, #16
0fce8     DC 21 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fcec                 | LR__1341
0fcec                 | _do_cursor_ret
0fcec     2D 00 64 FD | 	ret
0fcf0                 | 
0fcf0                 | ' 
0fcf0                 | ' '-------------------- defchar
0fcf0                 | ' 
0fcf0                 | ' sub do_defchar
0fcf0                 | _do_defchar
0fcf0     04 CA 05 F6 | 	mov	COUNT_, #4
0fcf4     E8 00 A0 FD | 	call	#pushregs_
0fcf8     28 F0 07 F1 | 	add	ptra, #40
0fcfc     70 D9 BF FD | 	call	#_pop
0fd00     3F 95 02 F6 | 	mov	arg02, result3
0fd04     E7 7A 62 FC | 	wrlong	result1, fp
0fd08     04 CE 05 F1 | 	add	fp, #4
0fd0c     E7 7C 62 FC | 	wrlong	result2, fp
0fd10     04 CE 05 F1 | 	add	fp, #4
0fd14     E7 94 62 FC | 	wrlong	arg02, fp
0fd18     08 CE 85 F1 | 	sub	fp, #8
0fd1c     E7 92 02 F6 | 	mov	arg01, fp
0fd20     28 DB BF FD | 	call	#_converttoint
0fd24     3D A7 02 F6 | 	mov	local01, result1
0fd28     44 D9 BF FD | 	call	#_pop
0fd2c     3F 95 02 F6 | 	mov	arg02, result3
0fd30     E7 7A 62 FC | 	wrlong	result1, fp
0fd34     04 CE 05 F1 | 	add	fp, #4
0fd38     E7 7C 62 FC | 	wrlong	result2, fp
0fd3c     04 CE 05 F1 | 	add	fp, #4
0fd40     E7 94 62 FC | 	wrlong	arg02, fp
0fd44     08 CE 85 F1 | 	sub	fp, #8
0fd48     E7 92 02 F6 | 	mov	arg01, fp
0fd4c     FC DA BF FD | 	call	#_converttoint
0fd50     3D A9 02 F6 | 	mov	local02, result1
0fd54                 | ' 
0fd54                 | ' t1=pop() : cptr=converttoint(t1)
0fd54                 | ' t1=pop() : c=converttoint(t1)
0fd54                 | ' if cptr<$80000 then 
0fd54     00 04 00 FF 
0fd58     00 A6 16 F2 | 	cmp	local01, ##524288 wc
0fd5c     10 00 90 3D |  if_ae	jmp	#LR__1350
0fd60     54 93 02 F6 | 	mov	arg01, local02
0fd64     53 95 02 F6 | 	mov	arg02, local01
0fd68     64 2D B1 FD | 	call	#_hg010b_spin2_defchar
0fd6c     40 00 90 FD | 	jmp	#LR__1352
0fd70                 | LR__1350
0fd70                 | '   for i=0 to 15: buf(i)=pspeek(cptr+i): next i
0fd70     00 AA 06 F6 | 	mov	local03, #0
0fd74                 | LR__1351
0fd74     55 AD 02 F6 | 	mov	local04, local03
0fd78     E7 94 02 F6 | 	mov	arg02, fp
0fd7c     14 94 06 F1 | 	add	arg02, #20
0fd80     4A AD 02 F1 | 	add	local04, arg02
0fd84     53 93 02 F6 | 	mov	arg01, local01
0fd88     55 93 02 F1 | 	add	arg01, local03
0fd8c     60 13 B1 FD | 	call	#_pspeek
0fd90     56 7B 42 FC | 	wrbyte	result1, local04
0fd94     01 AA 06 F1 | 	add	local03, #1
0fd98     10 AA 56 F2 | 	cmps	local03, #16 wc
0fd9c     D4 FF 9F CD |  if_b	jmp	#LR__1351
0fda0     E7 94 02 F6 | 	mov	arg02, fp
0fda4     14 94 06 F1 | 	add	arg02, #20
0fda8     54 93 02 F6 | 	mov	arg01, local02
0fdac     20 2D B1 FD | 	call	#_hg010b_spin2_defchar
0fdb0                 | LR__1352
0fdb0     E7 F0 03 F6 | 	mov	ptra, fp
0fdb4     F2 00 A0 FD | 	call	#popregs_
0fdb8                 | _do_defchar_ret
0fdb8     2D 00 64 FD | 	ret
0fdbc                 | 
0fdbc                 | ' 
0fdbc                 | ' '-------------------- defenv
0fdbc                 | ' 
0fdbc                 | ' sub do_defenv
0fdbc                 | _do_defenv
0fdbc     14 CA 05 F6 | 	mov	COUNT_, #20
0fdc0     E8 00 A0 FD | 	call	#pushregs_
0fdc4     58 F0 07 F1 | 	add	ptra, #88
0fdc8     4C 00 00 FF 
0fdcc     24 64 06 F1 | 	add	objptr, ##38948
0fdd0     32 9B 02 FB | 	rdlong	arg05, objptr
0fdd4     4D 99 02 F6 | 	mov	arg04, arg05
0fdd8     01 98 66 F0 | 	shl	arg04, #1
0fddc     4D 99 02 F1 | 	add	arg04, arg05
0fde0     02 98 66 F0 | 	shl	arg04, #2
0fde4     03 00 00 FF 
0fde8     04 64 86 F1 | 	sub	objptr, ##1540
0fdec     32 99 02 F1 | 	add	arg04, objptr
0fdf0     4C A7 02 FB | 	rdlong	local01, arg04
0fdf4                 | ' 
0fdf4                 | ' numpar=compiledline(lineptr_e).result.uresult
0fdf4                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0fdf4     02 A6 0E F2 | 	cmp	local01, #2 wz
0fdf8     49 00 00 FF 
0fdfc     20 64 86 F1 | 	sub	objptr, ##37408
0fe00     05 A6 0E 52 |  if_ne	cmp	local01, #5 wz
0fe04     50 07 90 5D |  if_ne	jmp	#LR__1380
0fe08                 | ' 
0fe08                 | ' if numpar=2 then						' env from .h2 or from a pointer
0fe08     02 A6 0E F2 | 	cmp	local01, #2 wz
0fe0c     1C 03 90 5D |  if_ne	jmp	#LR__1372
0fe10     5C D8 BF FD | 	call	#_pop
0fe14     3F 9B 02 F6 | 	mov	arg05, result3
0fe18     40 CE 05 F1 | 	add	fp, #64
0fe1c     E7 7A 62 FC | 	wrlong	result1, fp
0fe20     04 CE 05 F1 | 	add	fp, #4
0fe24     E7 7C 62 FC | 	wrlong	result2, fp
0fe28     04 CE 05 F1 | 	add	fp, #4
0fe2c     E7 9A 62 FC | 	wrlong	arg05, fp
0fe30                 | '   t1=pop()
0fe30                 | '   if t1.result_type=result_string2 then 
0fe30     48 CE 85 F1 | 	sub	fp, #72
0fe34     2B 9A 0E F2 | 	cmp	arg05, #43 wz
0fe38     18 00 90 5D |  if_ne	jmp	#LR__1360
0fe3c     40 CE 05 F1 | 	add	fp, #64
0fe40     E7 92 02 FB | 	rdlong	arg01, fp
0fe44     40 CE 85 F1 | 	sub	fp, #64
0fe48     94 D9 BF FD | 	call	#_convertstring
0fe4c     3D A9 02 F6 | 	mov	local02, result1
0fe50     38 00 90 FD | 	jmp	#LR__1362
0fe54                 | LR__1360
0fe54     48 CE 05 F1 | 	add	fp, #72
0fe58     E7 9A 02 FB | 	rdlong	arg05, fp
0fe5c     48 CE 85 F1 | 	sub	fp, #72
0fe60     1F 9A 0E F2 | 	cmp	arg05, #31 wz
0fe64     40 CE 05 A1 |  if_e	add	fp, #64
0fe68     E7 A8 02 AB |  if_e	rdlong	local02, fp
0fe6c     40 CE 85 A1 |  if_e	sub	fp, #64
0fe70     18 00 90 AD |  if_e	jmp	#LR__1361
0fe74     97 01 00 FF 
0fe78     C1 A9 06 F6 | 	mov	local02, ##@LR__5983
0fe7c     E7 92 02 F6 | 	mov	arg01, fp
0fe80     40 92 06 F1 | 	add	arg01, #64
0fe84     C4 D9 BF FD | 	call	#_converttoint
0fe88     3D AB 02 F6 | 	mov	local03, result1
0fe8c                 | LR__1361
0fe8c                 | LR__1362
0fe8c                 | '   if s1<>"" then 
0fe8c     97 01 00 FF 
0fe90     C2 95 06 F6 | 	mov	arg02, ##@LR__5984
0fe94     54 93 02 F6 | 	mov	arg01, local02
0fe98     30 4D B1 FD | 	call	#__system___string_cmp
0fe9c     00 7A 0E F2 | 	cmp	result1, #0 wz
0fea0     BC 01 90 AD |  if_e	jmp	#LR__1366
0fea4     C8 D7 BF FD | 	call	#_pop
0fea8     3F 9B 02 F6 | 	mov	arg05, result3
0feac     40 CE 05 F1 | 	add	fp, #64
0feb0     E7 7A 62 FC | 	wrlong	result1, fp
0feb4     04 CE 05 F1 | 	add	fp, #4
0feb8     E7 7C 62 FC | 	wrlong	result2, fp
0febc     04 CE 05 F1 | 	add	fp, #4
0fec0     E7 9A 62 FC | 	wrlong	arg05, fp
0fec4     08 CE 85 F1 | 	sub	fp, #8
0fec8     E7 92 02 F6 | 	mov	arg01, fp
0fecc     40 CE 85 F1 | 	sub	fp, #64
0fed0     78 D9 BF FD | 	call	#_converttoint
0fed4     3D AD 02 F6 | 	mov	local04, result1
0fed8                 | '     t1=pop()
0fed8                 | '     channel=converttoint(t1) 
0fed8                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0fed8     09 92 06 F6 | 	mov	arg01, #9
0fedc     A0 98 B1 FD | 	call	#__system__close
0fee0     09 AE 06 F6 | 	mov	local05, #9
0fee4     97 01 00 FF 
0fee8     C3 93 06 F6 | 	mov	arg01, ##@LR__5985
0feec     54 95 02 F6 | 	mov	arg02, local02
0fef0     0C 4D B1 FD | 	call	#__system___string_concat
0fef4     3D 95 02 F6 | 	mov	arg02, result1
0fef8     57 93 02 F6 | 	mov	arg01, local05
0fefc     00 96 06 F6 | 	mov	arg03, #0
0ff00     50 58 B1 FD | 	call	#__system___basic_open_string
0ff04     20 68 06 F1 | 	add	ptr___system__dat__, #32
0ff08     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0ff0c     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0ff10     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0ff14     3D B1 0A F6 | 	mov	local06, result1 wz
0ff18                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0ff18     8C 00 90 AD |  if_e	jmp	#LR__1363
0ff1c     00 92 06 F6 | 	mov	arg01, #0
0ff20     04 A2 B1 FD | 	call	#__system___getiolock_0622
0ff24     3D 93 02 F6 | 	mov	arg01, result1
0ff28     78 4C B1 FD | 	call	#__system___lockmem
0ff2c     97 01 00 FF 
0ff30     D0 95 06 F6 | 	mov	arg02, ##@LR__5986
0ff34     00 92 06 F6 | 	mov	arg01, #0
0ff38     00 96 06 F6 | 	mov	arg03, #0
0ff3c     58 59 B1 FD | 	call	#__system___basic_print_string
0ff40     00 92 06 F6 | 	mov	arg01, #0
0ff44     58 95 02 F6 | 	mov	arg02, local06
0ff48     00 96 06 F6 | 	mov	arg03, #0
0ff4c     0A 98 06 F6 | 	mov	arg04, #10
0ff50     88 59 B1 FD | 	call	#__system___basic_print_integer
0ff54     97 01 00 FF 
0ff58     DE 95 06 F6 | 	mov	arg02, ##@LR__5987
0ff5c     00 92 06 F6 | 	mov	arg01, #0
0ff60     00 96 06 F6 | 	mov	arg03, #0
0ff64     30 59 B1 FD | 	call	#__system___basic_print_string
0ff68     58 93 02 F6 | 	mov	arg01, local06
0ff6c     E4 6D B1 FD | 	call	#__system___strerror
0ff70     3D 95 02 F6 | 	mov	arg02, result1
0ff74     00 92 06 F6 | 	mov	arg01, #0
0ff78     00 96 06 F6 | 	mov	arg03, #0
0ff7c     18 59 B1 FD | 	call	#__system___basic_print_string
0ff80     00 92 06 F6 | 	mov	arg01, #0
0ff84     0A 94 06 F6 | 	mov	arg02, #10
0ff88     00 96 06 F6 | 	mov	arg03, #0
0ff8c     B0 58 B1 FD | 	call	#__system___basic_print_char
0ff90     00 92 06 F6 | 	mov	arg01, #0
0ff94     90 A1 B1 FD | 	call	#__system___getiolock_0622
0ff98     3D 01 68 FC | 	wrlong	#0, result1
0ff9c     09 92 06 F6 | 	mov	arg01, #9
0ffa0     DC 97 B1 FD | 	call	#__system__close
0ffa4     B0 05 90 FD | 	jmp	#LR__1380
0ffa8                 | LR__1363
0ffa8                 | '     get #9,17,envbuf8(channel,0),256
0ffa8     56 97 02 F6 | 	mov	arg03, local04
0ffac     09 96 66 F0 | 	shl	arg03, #9
0ffb0     56 97 02 F1 | 	add	arg03, local04
0ffb4     32 9B 02 F6 | 	mov	arg05, objptr
0ffb8     0E 00 00 FF 
0ffbc     38 9A 06 F1 | 	add	arg05, ##7224
0ffc0     4D 97 02 F1 | 	add	arg03, arg05
0ffc4     09 92 06 F6 | 	mov	arg01, #9
0ffc8     11 94 06 F6 | 	mov	arg02, #17
0ffcc     00 99 06 F6 | 	mov	arg04, #256
0ffd0     01 9A 06 F6 | 	mov	arg05, #1
0ffd4     48 5A B1 FD | 	call	#__system___basic_get
0ffd8                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0ffd8     FF B2 06 F6 | 	mov	local07, #255
0ffdc     0E 00 00 FF 
0ffe0     38 64 06 F1 | 	add	objptr, ##7224
0ffe4     D7 24 48 FB | 	callpa	#(@LR__1365-@LR__1364)>>2,fcache_load_ptr_
0ffe8                 | LR__1364
0ffe8     56 B1 02 F6 | 	mov	local06, local04
0ffec     09 B0 66 F0 | 	shl	local06, #9
0fff0     32 B1 02 F1 | 	add	local06, objptr
0fff4     59 AF 02 F6 | 	mov	local05, local07
0fff8     01 AE 66 F0 | 	shl	local05, #1
0fffc     58 AF 02 F1 | 	add	local05, local06
10000     56 AB 02 F6 | 	mov	local03, local04
10004     09 AA 66 F0 | 	shl	local03, #9
10008     56 AB 02 F1 | 	add	local03, local04
1000c     32 AB 02 F1 | 	add	local03, objptr
10010     59 B1 02 F6 | 	mov	local06, local07
10014     55 B1 02 F1 | 	add	local06, local03
10018     58 B1 C2 FA | 	rdbyte	local06, local06
1001c     08 B0 66 F0 | 	shl	local06, #8
10020     57 B1 52 FC | 	wrword	local06, local05
10024     01 B2 86 F1 | 	sub	local07, #1
10028     00 B2 56 F2 | 	cmps	local07, #0 wc
1002c     B8 FF 9F 3D |  if_ae	jmp	#LR__1364
10030                 | LR__1365
10030     0E 00 00 FF 
10034     38 64 86 F1 | 	sub	objptr, ##7224
10038                 | '     close #9
10038     09 92 06 F6 | 	mov	arg01, #9
1003c     40 97 B1 FD | 	call	#__system__close
10040     09 AC 66 F0 | 	shl	local04, #9
10044     32 B3 02 F6 | 	mov	local07, objptr
10048     0E 00 00 FF 
1004c     38 B2 06 F1 | 	add	local07, ##7224
10050     59 AD 02 F1 | 	add	local04, local07
10054     FE AD 06 F1 | 	add	local04, #510
10058     56 01 58 FC | 	wrword	#0, local04
1005c                 | '     envbuf(channel,255)=0                                                              
1005c                 | '     return
1005c     F8 04 90 FD | 	jmp	#LR__1380
10060                 | LR__1366
10060                 | '     if wptr < $80000 then 
10060     00 04 00 FF 
10064     00 AA 56 F2 | 	cmps	local03, ##524288 wc
10068     54 00 90 3D |  if_ae	jmp	#LR__1369
1006c                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
1006c     00 B2 06 F6 | 	mov	local07, #0
10070     D7 24 48 FB | 	callpa	#(@LR__1368-@LR__1367)>>2,fcache_load_ptr_
10074                 | LR__1367
10074     56 B1 02 F6 | 	mov	local06, local04
10078     09 B0 66 F0 | 	shl	local06, #9
1007c     32 AF 02 F6 | 	mov	local05, objptr
10080     0E 00 00 FF 
10084     38 AE 06 F1 | 	add	local05, ##7224
10088     57 B1 02 F1 | 	add	local06, local05
1008c     59 AF 02 F6 | 	mov	local05, local07
10090     01 AE 66 F0 | 	shl	local05, #1
10094     58 AF 02 F1 | 	add	local05, local06
10098     55 93 02 F6 | 	mov	arg01, local03
1009c     59 B1 02 F6 | 	mov	local06, local07
100a0     01 B0 66 F0 | 	shl	local06, #1
100a4     58 93 02 F1 | 	add	arg01, local06
100a8     49 7B E2 FA | 	rdword	result1, arg01
100ac     57 7B 52 FC | 	wrword	result1, local05
100b0     01 B2 06 F1 | 	add	local07, #1
100b4     00 B3 56 F2 | 	cmps	local07, #256 wc
100b8     B8 FF 9F CD |  if_b	jmp	#LR__1367
100bc                 | LR__1368
100bc     4C 00 90 FD | 	jmp	#LR__1371
100c0                 | LR__1369
100c0                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
100c0     00 B2 06 F6 | 	mov	local07, #0
100c4                 | LR__1370
100c4     56 B1 02 F6 | 	mov	local06, local04
100c8     09 B0 66 F0 | 	shl	local06, #9
100cc     32 AF 02 F6 | 	mov	local05, objptr
100d0     0E 00 00 FF 
100d4     38 AE 06 F1 | 	add	local05, ##7224
100d8     57 B1 02 F1 | 	add	local06, local05
100dc     59 AF 02 F6 | 	mov	local05, local07
100e0     01 AE 66 F0 | 	shl	local05, #1
100e4     58 AF 02 F1 | 	add	local05, local06
100e8     55 93 02 F6 | 	mov	arg01, local03
100ec     59 B1 02 F6 | 	mov	local06, local07
100f0     01 B0 66 F0 | 	shl	local06, #1
100f4     58 93 02 F1 | 	add	arg01, local06
100f8     84 10 B1 FD | 	call	#_psdpeek
100fc     57 7B 52 FC | 	wrword	result1, local05
10100     01 B2 06 F1 | 	add	local07, #1
10104     00 B3 56 F2 | 	cmps	local07, #256 wc
10108     B8 FF 9F CD |  if_b	jmp	#LR__1370
1010c                 | LR__1371
1010c     09 AC 66 F0 | 	shl	local04, #9
10110     32 B3 02 F6 | 	mov	local07, objptr
10114     0E 00 00 FF 
10118     38 B2 06 F1 | 	add	local07, ##7224
1011c     59 AD 02 F1 | 	add	local04, local07
10120     FE AD 06 F1 | 	add	local04, #510
10124     56 01 58 FC | 	wrword	#0, local04
10128                 | '     envbuf(channel,255)=0
10128                 | '     return   
10128     2C 04 90 FD | 	jmp	#LR__1380
1012c                 | LR__1372
1012c                 | ' 
1012c                 | ' if numpar=5 then   						 'simple adsr
1012c     05 A6 0E F2 | 	cmp	local01, #5 wz
10130     08 04 90 5D |  if_ne	jmp	#LR__1379
10134     38 D5 BF FD | 	call	#_pop
10138     3F B3 02 F6 | 	mov	local07, result3
1013c     40 CE 05 F1 | 	add	fp, #64
10140     E7 7A 62 FC | 	wrlong	result1, fp
10144     04 CE 05 F1 | 	add	fp, #4
10148     E7 7C 62 FC | 	wrlong	result2, fp
1014c     04 CE 05 F1 | 	add	fp, #4
10150     E7 B2 62 FC | 	wrlong	local07, fp
10154     08 CE 85 F1 | 	sub	fp, #8
10158     E7 92 02 F6 | 	mov	arg01, fp
1015c     40 CE 85 F1 | 	sub	fp, #64
10160     A4 D7 BF FD | 	call	#_converttofloat
10164     3D B3 02 F6 | 	mov	local07, result1
10168     04 D5 BF FD | 	call	#_pop
1016c     3F B1 02 F6 | 	mov	local06, result3
10170     40 CE 05 F1 | 	add	fp, #64
10174     E7 7A 62 FC | 	wrlong	result1, fp
10178     04 CE 05 F1 | 	add	fp, #4
1017c     E7 7C 62 FC | 	wrlong	result2, fp
10180     04 CE 05 F1 | 	add	fp, #4
10184     E7 B0 62 FC | 	wrlong	local06, fp
10188     08 CE 85 F1 | 	sub	fp, #8
1018c     E7 92 02 F6 | 	mov	arg01, fp
10190     40 CE 85 F1 | 	sub	fp, #64
10194     70 D7 BF FD | 	call	#_converttofloat
10198     3D B5 02 F6 | 	mov	local08, result1
1019c     D0 D4 BF FD | 	call	#_pop
101a0     3F B1 02 F6 | 	mov	local06, result3
101a4     40 CE 05 F1 | 	add	fp, #64
101a8     E7 7A 62 FC | 	wrlong	result1, fp
101ac     04 CE 05 F1 | 	add	fp, #4
101b0     E7 7C 62 FC | 	wrlong	result2, fp
101b4     04 CE 05 F1 | 	add	fp, #4
101b8     E7 B0 62 FC | 	wrlong	local06, fp
101bc     08 CE 85 F1 | 	sub	fp, #8
101c0     E7 92 02 F6 | 	mov	arg01, fp
101c4     40 CE 85 F1 | 	sub	fp, #64
101c8     3C D7 BF FD | 	call	#_converttofloat
101cc     3D B1 02 F6 | 	mov	local06, result1
101d0     9C D4 BF FD | 	call	#_pop
101d4     3F AF 02 F6 | 	mov	local05, result3
101d8     40 CE 05 F1 | 	add	fp, #64
101dc     E7 7A 62 FC | 	wrlong	result1, fp
101e0     04 CE 05 F1 | 	add	fp, #4
101e4     E7 7C 62 FC | 	wrlong	result2, fp
101e8     04 CE 05 F1 | 	add	fp, #4
101ec     E7 AE 62 FC | 	wrlong	local05, fp
101f0     08 CE 85 F1 | 	sub	fp, #8
101f4     E7 92 02 F6 | 	mov	arg01, fp
101f8     40 CE 85 F1 | 	sub	fp, #64
101fc     08 D7 BF FD | 	call	#_converttofloat
10200     3D AF 02 F6 | 	mov	local05, result1
10204     68 D4 BF FD | 	call	#_pop
10208     3F AD 02 F6 | 	mov	local04, result3
1020c     40 CE 05 F1 | 	add	fp, #64
10210     E7 7A 62 FC | 	wrlong	result1, fp
10214     04 CE 05 F1 | 	add	fp, #4
10218     E7 7C 62 FC | 	wrlong	result2, fp
1021c     04 CE 05 F1 | 	add	fp, #4
10220     E7 AC 62 FC | 	wrlong	local04, fp
10224     08 CE 85 F1 | 	sub	fp, #8
10228     E7 92 02 F6 | 	mov	arg01, fp
1022c     40 CE 85 F1 | 	sub	fp, #64
10230     18 D6 BF FD | 	call	#_converttoint
10234     3D AD 02 F6 | 	mov	local04, result1
10238                 | '   t1=pop() : rr=converttofloat(t1)
10238                 | '   t1=pop() : ss=converttofloat(t1) 
10238                 | '   t1=pop() : dd=converttofloat(t1)
10238                 | '   t1=pop() : aa=converttofloat(t1)
10238                 | '   t1=pop() : channel=converttoint(t1)
10238                 | '   if ss<0.0 then ss=0.0 
10238     5A 93 02 F6 | 	mov	arg01, local08
1023c     00 94 06 F6 | 	mov	arg02, #0
10240     01 96 06 F6 | 	mov	arg03, #1
10244     60 74 B1 FD | 	call	#__system___float_cmp
10248     00 7A 56 F2 | 	cmps	result1, #0 wc
1024c     00 B4 06 C6 |  if_b	mov	local08, #0
10250                 | '   if ss>1.0 then ss=1.0
10250     5A 93 02 F6 | 	mov	arg01, local08
10254     00 C0 1F FF 
10258     00 94 06 F6 | 	mov	arg02, ##1065353216
1025c     01 96 66 F6 | 	neg	arg03, #1
10260     44 74 B1 FD | 	call	#__system___float_cmp
10264     01 7A 56 F2 | 	cmps	result1, #1 wc
10268     00 C0 1F 3F 
1026c     00 B4 06 36 |  if_ae	mov	local08, ##1065353216
10270     57 93 02 F6 | 	mov	arg01, local05
10274     58 95 02 F6 | 	mov	arg02, local06
10278     28 6C B1 FD | 	call	#__system___float_add
1027c     3D 93 02 F6 | 	mov	arg01, result1
10280     59 95 02 F6 | 	mov	arg02, local07
10284     1C 6C B1 FD | 	call	#__system___float_add
10288     3D 95 02 F6 | 	mov	arg02, result1
1028c     00 C0 21 FF 
10290     00 92 06 F6 | 	mov	arg01, ##1132462080
10294     E0 71 B1 FD | 	call	#__system___float_div
10298     3D B7 02 F6 | 	mov	local09, result1
1029c     57 93 02 F6 | 	mov	arg01, local05
102a0     5B 95 02 F6 | 	mov	arg02, local09
102a4     CC 6F B1 FD | 	call	#__system___float_mul
102a8     3D 93 02 F6 | 	mov	arg01, result1
102ac     01 94 06 F6 | 	mov	arg02, #1
102b0     88 74 B1 FD | 	call	#__system___float_tointeger
102b4     3D B9 02 F6 | 	mov	local10, result1
102b8     58 93 02 F6 | 	mov	arg01, local06
102bc     5B 95 02 F6 | 	mov	arg02, local09
102c0     B0 6F B1 FD | 	call	#__system___float_mul
102c4     3D 93 02 F6 | 	mov	arg01, result1
102c8     01 94 06 F6 | 	mov	arg02, #1
102cc     6C 74 B1 FD | 	call	#__system___float_tointeger
102d0     3D BB 02 F6 | 	mov	local11, result1
102d4     59 93 02 F6 | 	mov	arg01, local07
102d8     5B 95 02 F6 | 	mov	arg02, local09
102dc     94 6F B1 FD | 	call	#__system___float_mul
102e0     3D 93 02 F6 | 	mov	arg01, result1
102e4     01 94 06 F6 | 	mov	arg02, #1
102e8     50 74 B1 FD | 	call	#__system___float_tointeger
102ec     3D B1 02 F6 | 	mov	local06, result1
102f0     F8 BF 23 FF 
102f4     00 AE 06 F6 | 	mov	local05, ##1199566848
102f8     5C 93 52 F6 | 	abs	arg01, local10 wc
102fc     1F BC C6 C9 |  if_b	decod	local12, #31
10300     00 BC 06 36 |  if_ae	mov	local12, #0
10304     68 6B B1 FD | 	call	#__system___float_fromuns
10308     5E 7B 62 F5 | 	xor	result1, local12
1030c     3D 95 02 F6 | 	mov	arg02, result1
10310     57 93 02 F6 | 	mov	arg01, local05
10314     60 71 B1 FD | 	call	#__system___float_div
10318     3D BF 02 F6 | 	mov	local13, result1
1031c     F8 BF 23 FF 
10320     00 AE 06 F6 | 	mov	local05, ##1199566848
10324     F8 BF 23 FF 
10328     00 92 06 F6 | 	mov	arg01, ##1199566848
1032c     5A 95 02 F6 | 	mov	arg02, local08
10330     40 6F B1 FD | 	call	#__system___float_mul
10334     3D 95 02 F6 | 	mov	arg02, result1
10338     57 93 02 F6 | 	mov	arg01, local05
1033c     1F 94 E6 F4 | 	bitnot	arg02, #31
10340     60 6B B1 FD | 	call	#__system___float_add
10344     3D AF 02 F6 | 	mov	local05, result1
10348     5D 93 52 F6 | 	abs	arg01, local11 wc
1034c     1F BC C6 C9 |  if_b	decod	local12, #31
10350     00 BC 06 36 |  if_ae	mov	local12, #0
10354     18 6B B1 FD | 	call	#__system___float_fromuns
10358     5E 7B 62 F5 | 	xor	result1, local12
1035c     3D 95 02 F6 | 	mov	arg02, result1
10360     57 93 02 F6 | 	mov	arg01, local05
10364     10 71 B1 FD | 	call	#__system___float_div
10368     3D C1 02 F6 | 	mov	local14, result1
1036c     F8 BF 23 FF 
10370     00 92 06 F6 | 	mov	arg01, ##1199566848
10374     5A 95 02 F6 | 	mov	arg02, local08
10378     F8 6E B1 FD | 	call	#__system___float_mul
1037c     3D AF 02 F6 | 	mov	local05, result1
10380     58 93 52 F6 | 	abs	arg01, local06 wc
10384     1F BC C6 C9 |  if_b	decod	local12, #31
10388     00 BC 06 36 |  if_ae	mov	local12, #0
1038c     E0 6A B1 FD | 	call	#__system___float_fromuns
10390     5E 7B 62 F5 | 	xor	result1, local12
10394     3D 95 02 F6 | 	mov	arg02, result1
10398     57 93 02 F6 | 	mov	arg01, local05
1039c     D8 70 B1 FD | 	call	#__system___float_div
103a0     3D C3 02 F6 | 	mov	local15, result1
103a4     56 B3 02 F6 | 	mov	local07, local04
103a8     01 B2 66 F0 | 	shl	local07, #1
103ac     32 C5 02 F6 | 	mov	local16, objptr
103b0     54 00 00 FF 
103b4     90 C4 06 F1 | 	add	local16, ##43152
103b8     62 B3 02 F1 | 	add	local07, local16
103bc     5C C7 02 F6 | 	mov	local17, local10
103c0     5D C7 02 F1 | 	add	local17, local11
103c4     59 C7 52 FC | 	wrword	local17, local07
103c8     00 C8 06 F6 | 	mov	local18, #0
103cc                 | '   fulltime=aa+dd+rr
103cc                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
103cc                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
103cc                 | '   suspoints(channel)=a+d
103cc                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
103cc     00 B2 06 F6 | 	mov	local07, #0
103d0     5C CB 02 F6 | 	mov	local19, local10
103d4                 | LR__1373
103d4     65 B3 52 F2 | 	cmps	local07, local19 wc
103d8     4C 00 90 3D |  if_ae	jmp	#LR__1374
103dc     56 C7 02 F6 | 	mov	local17, local04
103e0     09 C6 66 F0 | 	shl	local17, #9
103e4     32 C5 02 F6 | 	mov	local16, objptr
103e8     0E 00 00 FF 
103ec     38 C4 06 F1 | 	add	local16, ##7224
103f0     62 C7 02 F1 | 	add	local17, local16
103f4     59 C5 02 F6 | 	mov	local16, local07
103f8     01 C4 66 F0 | 	shl	local16, #1
103fc     63 C5 02 F1 | 	add	local16, local17
10400     64 93 02 F6 | 	mov	arg01, local18
10404     01 94 06 F6 | 	mov	arg02, #1
10408     30 73 B1 FD | 	call	#__system___float_tointeger
1040c     62 7B 52 FC | 	wrword	result1, local16
10410     5F 95 02 F6 | 	mov	arg02, local13
10414     64 93 02 F6 | 	mov	arg01, local18
10418     88 6A B1 FD | 	call	#__system___float_add
1041c     3D C9 02 F6 | 	mov	local18, result1
10420     01 B2 06 F1 | 	add	local07, #1
10424     AC FF 9F FD | 	jmp	#LR__1373
10428                 | LR__1374
10428                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
10428     5C B3 02 F6 | 	mov	local07, local10
1042c     5C CD 02 F6 | 	mov	local20, local10
10430     5D CD 02 F1 | 	add	local20, local11
10434                 | LR__1375
10434     66 B3 52 F2 | 	cmps	local07, local20 wc
10438     68 00 90 3D |  if_ae	jmp	#LR__1376
1043c     56 CB 02 F6 | 	mov	local19, local04
10440     09 CA 66 F0 | 	shl	local19, #9
10444     32 C5 02 F6 | 	mov	local16, objptr
10448     0E 00 00 FF 
1044c     38 C4 06 F1 | 	add	local16, ##7224
10450     62 CB 02 F1 | 	add	local19, local16
10454     59 C7 02 F6 | 	mov	local17, local07
10458     01 C6 66 F0 | 	shl	local17, #1
1045c     65 C7 02 F1 | 	add	local17, local19
10460     64 93 02 F6 | 	mov	arg01, local18
10464     01 94 06 F6 | 	mov	arg02, #1
10468     D0 72 B1 FD | 	call	#__system___float_tointeger
1046c     63 7B 52 FC | 	wrword	result1, local17
10470     64 93 02 F6 | 	mov	arg01, local18
10474     60 95 02 F6 | 	mov	arg02, local14
10478     1F 94 E6 F4 | 	bitnot	arg02, #31
1047c     24 6A B1 FD | 	call	#__system___float_add
10480     3D C9 02 F6 | 	mov	local18, result1
10484     64 93 02 F6 | 	mov	arg01, local18
10488     00 94 06 F6 | 	mov	arg02, #0
1048c     01 96 06 F6 | 	mov	arg03, #1
10490     14 72 B1 FD | 	call	#__system___float_cmp
10494     00 7A 56 F2 | 	cmps	result1, #0 wc
10498     00 C8 06 C6 |  if_b	mov	local18, #0
1049c     01 B2 06 F1 | 	add	local07, #1
104a0     90 FF 9F FD | 	jmp	#LR__1375
104a4                 | LR__1376
104a4                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
104a4     5C B3 02 F6 | 	mov	local07, local10
104a8     5D B3 02 F1 | 	add	local07, local11
104ac                 | LR__1377
104ac     00 B3 56 F2 | 	cmps	local07, #256 wc
104b0     68 00 90 3D |  if_ae	jmp	#LR__1378
104b4     56 CD 02 F6 | 	mov	local20, local04
104b8     09 CC 66 F0 | 	shl	local20, #9
104bc     32 C7 02 F6 | 	mov	local17, objptr
104c0     0E 00 00 FF 
104c4     38 C6 06 F1 | 	add	local17, ##7224
104c8     63 CD 02 F1 | 	add	local20, local17
104cc     59 CB 02 F6 | 	mov	local19, local07
104d0     01 CA 66 F0 | 	shl	local19, #1
104d4     66 CB 02 F1 | 	add	local19, local20
104d8     64 93 02 F6 | 	mov	arg01, local18
104dc     01 94 06 F6 | 	mov	arg02, #1
104e0     58 72 B1 FD | 	call	#__system___float_tointeger
104e4     65 7B 52 FC | 	wrword	result1, local19
104e8     64 93 02 F6 | 	mov	arg01, local18
104ec     61 95 02 F6 | 	mov	arg02, local15
104f0     1F 94 E6 F4 | 	bitnot	arg02, #31
104f4     AC 69 B1 FD | 	call	#__system___float_add
104f8     3D C9 02 F6 | 	mov	local18, result1
104fc     64 93 02 F6 | 	mov	arg01, local18
10500     00 94 06 F6 | 	mov	arg02, #0
10504     01 96 06 F6 | 	mov	arg03, #1
10508     9C 71 B1 FD | 	call	#__system___float_cmp
1050c     00 7A 56 F2 | 	cmps	result1, #0 wc
10510     00 C8 06 C6 |  if_b	mov	local18, #0
10514     01 B2 06 F1 | 	add	local07, #1
10518     90 FF 9F FD | 	jmp	#LR__1377
1051c                 | LR__1378
1051c     56 CD 02 F6 | 	mov	local20, local04
10520     09 CC 66 F0 | 	shl	local20, #9
10524     32 C5 02 F6 | 	mov	local16, objptr
10528     0E 00 00 FF 
1052c     38 C4 06 F1 | 	add	local16, ##7224
10530     62 CD 02 F1 | 	add	local20, local16
10534     FE CD 06 F1 | 	add	local20, #510
10538     66 01 58 FC | 	wrword	#0, local20
1053c                 | LR__1379
1053c     09 AC 66 F0 | 	shl	local04, #9
10540     32 C5 02 F6 | 	mov	local16, objptr
10544     0E 00 00 FF 
10548     38 C4 06 F1 | 	add	local16, ##7224
1054c     62 AD 02 F1 | 	add	local04, local16
10550     FE AD 06 F1 | 	add	local04, #510
10554     56 01 58 FC | 	wrword	#0, local04
10558                 | LR__1380
10558     E7 F0 03 F6 | 	mov	ptra, fp
1055c     F2 00 A0 FD | 	call	#popregs_
10560                 | _do_defenv_ret
10560     2D 00 64 FD | 	ret
10564                 | 
10564                 | ' 
10564                 | ' '-------------------- defsnd
10564                 | ' 
10564                 | ' sub do_defsnd
10564                 | _do_defsnd
10564     0D CA 05 F6 | 	mov	COUNT_, #13
10568     E8 00 A0 FD | 	call	#pushregs_
1056c     80 F0 07 F1 | 	add	ptra, #128
10570     4C 00 00 FF 
10574     24 64 06 F1 | 	add	objptr, ##38948
10578     32 9B 02 FB | 	rdlong	arg05, objptr
1057c     4D 99 02 F6 | 	mov	arg04, arg05
10580     01 98 66 F0 | 	shl	arg04, #1
10584     4D 99 02 F1 | 	add	arg04, arg05
10588     02 98 66 F0 | 	shl	arg04, #2
1058c     03 00 00 FF 
10590     04 64 86 F1 | 	sub	objptr, ##1540
10594     32 99 02 F1 | 	add	arg04, objptr
10598     4C A7 02 FB | 	rdlong	local01, arg04
1059c                 | ' 
1059c                 | ' numpar=compiledline(lineptr_e).result.uresult
1059c                 | ' 
1059c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
1059c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
1059c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
1059c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
1059c                 | ' 
1059c                 | ' if numpar<2 then return
1059c     02 A6 56 F2 | 	cmps	local01, #2 wc
105a0     49 00 00 FF 
105a4     20 64 86 F1 | 	sub	objptr, ##37408
105a8     88 06 90 CD |  if_b	jmp	#LR__1411
105ac                 | '  
105ac                 | ' if numpar=2 then
105ac     02 A6 0E F2 | 	cmp	local01, #2 wz
105b0     E4 02 90 5D |  if_ne	jmp	#LR__1399
105b4     B8 D0 BF FD | 	call	#_pop
105b8     3F 9B 02 F6 | 	mov	arg05, result3
105bc     2C CE 05 F1 | 	add	fp, #44
105c0     E7 7A 62 FC | 	wrlong	result1, fp
105c4     04 CE 05 F1 | 	add	fp, #4
105c8     E7 7C 62 FC | 	wrlong	result2, fp
105cc     04 CE 05 F1 | 	add	fp, #4
105d0     E7 9A 62 FC | 	wrlong	arg05, fp
105d4                 | '   t1=pop()
105d4                 | '   if t1.result_type=result_string2 then 
105d4     34 CE 85 F1 | 	sub	fp, #52
105d8     2B 9A 0E F2 | 	cmp	arg05, #43 wz
105dc     18 00 90 5D |  if_ne	jmp	#LR__1390
105e0     2C CE 05 F1 | 	add	fp, #44
105e4     E7 92 02 FB | 	rdlong	arg01, fp
105e8     2C CE 85 F1 | 	sub	fp, #44
105ec     F0 D1 BF FD | 	call	#_convertstring
105f0     3D A9 02 F6 | 	mov	local02, result1
105f4     38 00 90 FD | 	jmp	#LR__1392
105f8                 | LR__1390
105f8     34 CE 05 F1 | 	add	fp, #52
105fc     E7 9A 02 FB | 	rdlong	arg05, fp
10600     34 CE 85 F1 | 	sub	fp, #52
10604     1F 9A 0E F2 | 	cmp	arg05, #31 wz
10608     2C CE 05 A1 |  if_e	add	fp, #44
1060c     E7 A8 02 AB |  if_e	rdlong	local02, fp
10610     2C CE 85 A1 |  if_e	sub	fp, #44
10614     18 00 90 AD |  if_e	jmp	#LR__1391
10618     97 01 00 FF 
1061c     E1 A9 06 F6 | 	mov	local02, ##@LR__5988
10620     E7 92 02 F6 | 	mov	arg01, fp
10624     2C 92 06 F1 | 	add	arg01, #44
10628     20 D2 BF FD | 	call	#_converttoint
1062c     3D AB 02 F6 | 	mov	local03, result1
10630                 | LR__1391
10630                 | LR__1392
10630                 | '   if s<>"" then 
10630     97 01 00 FF 
10634     E2 95 06 F6 | 	mov	arg02, ##@LR__5989
10638     54 93 02 F6 | 	mov	arg01, local02
1063c     8C 45 B1 FD | 	call	#__system___string_cmp
10640     00 7A 0E F2 | 	cmp	result1, #0 wz
10644     B0 01 90 AD |  if_e	jmp	#LR__1395
10648     24 D0 BF FD | 	call	#_pop
1064c     3F 9B 02 F6 | 	mov	arg05, result3
10650     2C CE 05 F1 | 	add	fp, #44
10654     E7 7A 62 FC | 	wrlong	result1, fp
10658     04 CE 05 F1 | 	add	fp, #4
1065c     E7 7C 62 FC | 	wrlong	result2, fp
10660     04 CE 05 F1 | 	add	fp, #4
10664     E7 9A 62 FC | 	wrlong	arg05, fp
10668     08 CE 85 F1 | 	sub	fp, #8
1066c     E7 92 02 F6 | 	mov	arg01, fp
10670     2C CE 85 F1 | 	sub	fp, #44
10674     D4 D1 BF FD | 	call	#_converttoint
10678     3D AD 02 F6 | 	mov	local04, result1
1067c                 | '     t1=pop()
1067c                 | '     channel=converttoint(t1) : if channel>31 then return
1067c     20 AC 56 F2 | 	cmps	local04, #32 wc
10680     B0 05 90 3D |  if_ae	jmp	#LR__1411
10684                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10684     09 92 06 F6 | 	mov	arg01, #9
10688     F4 90 B1 FD | 	call	#__system__close
1068c     09 AA 06 F6 | 	mov	local03, #9
10690     97 01 00 FF 
10694     E3 93 06 F6 | 	mov	arg01, ##@LR__5990
10698     54 95 02 F6 | 	mov	arg02, local02
1069c     60 45 B1 FD | 	call	#__system___string_concat
106a0     3D 95 02 F6 | 	mov	arg02, result1
106a4     55 93 02 F6 | 	mov	arg01, local03
106a8     00 96 06 F6 | 	mov	arg03, #0
106ac     A4 50 B1 FD | 	call	#__system___basic_open_string
106b0     20 68 06 F1 | 	add	ptr___system__dat__, #32
106b4     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
106b8     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
106bc     20 68 86 F1 | 	sub	ptr___system__dat__, #32
106c0     54 00 00 FF 
106c4     EC 64 06 F1 | 	add	objptr, ##43244
106c8     32 7B 62 FC | 	wrlong	result1, objptr
106cc                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
106cc     54 00 00 FF 
106d0     EC 64 86 F1 | 	sub	objptr, ##43244
106d4     B0 00 90 AD |  if_e	jmp	#LR__1393
106d8     00 92 06 F6 | 	mov	arg01, #0
106dc     48 9A B1 FD | 	call	#__system___getiolock_0622
106e0     3D 93 02 F6 | 	mov	arg01, result1
106e4     BC 44 B1 FD | 	call	#__system___lockmem
106e8     97 01 00 FF 
106ec     F0 95 06 F6 | 	mov	arg02, ##@LR__5991
106f0     00 92 06 F6 | 	mov	arg01, #0
106f4     00 96 06 F6 | 	mov	arg03, #0
106f8     9C 51 B1 FD | 	call	#__system___basic_print_string
106fc     54 00 00 FF 
10700     EC 64 06 F1 | 	add	objptr, ##43244
10704     32 95 02 FB | 	rdlong	arg02, objptr
10708     54 00 00 FF 
1070c     EC 64 86 F1 | 	sub	objptr, ##43244
10710     00 92 06 F6 | 	mov	arg01, #0
10714     00 96 06 F6 | 	mov	arg03, #0
10718     0A 98 06 F6 | 	mov	arg04, #10
1071c     BC 51 B1 FD | 	call	#__system___basic_print_integer
10720     97 01 00 FF 
10724     FE 95 06 F6 | 	mov	arg02, ##@LR__5992
10728     00 92 06 F6 | 	mov	arg01, #0
1072c     00 96 06 F6 | 	mov	arg03, #0
10730     64 51 B1 FD | 	call	#__system___basic_print_string
10734     00 AC 06 F6 | 	mov	local04, #0
10738     54 00 00 FF 
1073c     EC 64 06 F1 | 	add	objptr, ##43244
10740     32 93 02 FB | 	rdlong	arg01, objptr
10744     54 00 00 FF 
10748     EC 64 86 F1 | 	sub	objptr, ##43244
1074c     04 66 B1 FD | 	call	#__system___strerror
10750     3D 95 02 F6 | 	mov	arg02, result1
10754     56 93 02 F6 | 	mov	arg01, local04
10758     00 96 06 F6 | 	mov	arg03, #0
1075c     38 51 B1 FD | 	call	#__system___basic_print_string
10760     00 92 06 F6 | 	mov	arg01, #0
10764     0A 94 06 F6 | 	mov	arg02, #10
10768     00 96 06 F6 | 	mov	arg03, #0
1076c     D0 50 B1 FD | 	call	#__system___basic_print_char
10770     00 92 06 F6 | 	mov	arg01, #0
10774     B0 99 B1 FD | 	call	#__system___getiolock_0622
10778     3D 01 68 FC | 	wrlong	#0, result1
1077c     09 92 06 F6 | 	mov	arg01, #9
10780     FC 8F B1 FD | 	call	#__system__close
10784     AC 04 90 FD | 	jmp	#LR__1411
10788                 | LR__1393
10788                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
10788     00 AE 06 F6 | 	mov	local05, #0
1078c                 | LR__1394
1078c     57 AB 02 F6 | 	mov	local03, local05
10790     01 AA 66 F0 | 	shl	local03, #1
10794     11 94 06 F6 | 	mov	arg02, #17
10798     55 95 02 F1 | 	add	arg02, local03
1079c     E7 96 02 F6 | 	mov	arg03, fp
107a0     7C 96 06 F1 | 	add	arg03, #124
107a4     09 92 06 F6 | 	mov	arg01, #9
107a8     01 98 06 F6 | 	mov	arg04, #1
107ac     02 9A 06 F6 | 	mov	arg05, #2
107b0     6C 52 B1 FD | 	call	#__system___basic_get
107b4     56 93 02 F6 | 	mov	arg01, local04
107b8     0B 92 66 F0 | 	shl	arg01, #11
107bc     57 AB 02 F6 | 	mov	local03, local05
107c0     01 AA 66 F0 | 	shl	local03, #1
107c4     55 93 02 F1 | 	add	arg01, local03
107c8     7C CE 05 F1 | 	add	fp, #124
107cc     E7 94 E2 FA | 	rdword	arg02, fp
107d0     7C CE 85 F1 | 	sub	fp, #124
107d4     0F 94 66 F7 | 	signx	arg02, #15
107d8     84 08 B1 FD | 	call	#_psdpoke
107dc     01 AE 06 F1 | 	add	local05, #1
107e0     02 00 00 FF 
107e4     01 AE 56 F2 | 	cmps	local05, ##1025 wc
107e8     A0 FF 9F CD |  if_b	jmp	#LR__1394
107ec                 | '     close #9
107ec     09 92 06 F6 | 	mov	arg01, #9
107f0     8C 8F B1 FD | 	call	#__system__close
107f4                 | '     return
107f4     3C 04 90 FD | 	jmp	#LR__1411
107f8                 | LR__1395
107f8                 | '     if wptr < ($80000 - 2048) then 
107f8     FC 03 00 FF 
107fc     00 AA 56 F2 | 	cmps	local03, ##522240 wc
10800     48 00 90 3D |  if_ae	jmp	#LR__1397
10804                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
10804     00 AE 06 F6 | 	mov	local05, #0
10808                 | LR__1396
10808     56 A7 02 F6 | 	mov	local01, local04
1080c     0B A6 66 F0 | 	shl	local01, #11
10810     57 A9 02 F6 | 	mov	local02, local05
10814     01 A8 66 F0 | 	shl	local02, #1
10818     54 A7 02 F1 | 	add	local01, local02
1081c     55 93 02 F6 | 	mov	arg01, local03
10820     57 A9 02 F6 | 	mov	local02, local05
10824     01 A8 66 F0 | 	shl	local02, #1
10828     54 93 02 F1 | 	add	arg01, local02
1082c     49 95 E2 FA | 	rdword	arg02, arg01
10830     53 93 02 F6 | 	mov	arg01, local01
10834     28 08 B1 FD | 	call	#_psdpoke
10838     01 AE 06 F1 | 	add	local05, #1
1083c     02 00 00 FF 
10840     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10844     C0 FF 9F CD |  if_b	jmp	#LR__1396
10848     E8 03 90 FD | 	jmp	#LR__1411
1084c                 | LR__1397
1084c                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
1084c     00 AE 06 F6 | 	mov	local05, #0
10850                 | LR__1398
10850     56 A7 02 F6 | 	mov	local01, local04
10854     0B A6 66 F0 | 	shl	local01, #11
10858     57 A9 02 F6 | 	mov	local02, local05
1085c     01 A8 66 F0 | 	shl	local02, #1
10860     54 A7 02 F1 | 	add	local01, local02
10864     55 93 02 F6 | 	mov	arg01, local03
10868     57 A9 02 F6 | 	mov	local02, local05
1086c     01 A8 66 F0 | 	shl	local02, #1
10870     54 93 02 F1 | 	add	arg01, local02
10874     08 09 B1 FD | 	call	#_psdpeek
10878     3D 95 02 F6 | 	mov	arg02, result1
1087c     53 93 02 F6 | 	mov	arg01, local01
10880     DC 07 B1 FD | 	call	#_psdpoke
10884     01 AE 06 F1 | 	add	local05, #1
10888     02 00 00 FF 
1088c     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10890     BC FF 9F CD |  if_b	jmp	#LR__1398
10894                 | '     return 
10894     9C 03 90 FD | 	jmp	#LR__1411
10898                 | '   return
10898                 | LR__1399
10898                 | ' for i=0 to 15 : harm(i)=0: next i  
10898     00 AE 06 F6 | 	mov	local05, #0
1089c     3C CE 05 F1 | 	add	fp, #60
108a0     D7 0E 48 FB | 	callpa	#(@LR__1401-@LR__1400)>>2,fcache_load_ptr_
108a4                 | LR__1400
108a4     57 B1 02 F6 | 	mov	local06, local05
108a8     02 B0 66 F0 | 	shl	local06, #2
108ac     E7 B0 02 F1 | 	add	local06, fp
108b0     58 01 68 FC | 	wrlong	#0, local06
108b4     01 AE 06 F1 | 	add	local05, #1
108b8     10 AE 56 F2 | 	cmps	local05, #16 wc
108bc     E4 FF 9F CD |  if_b	jmp	#LR__1400
108c0                 | LR__1401
108c0     3C CE 85 F1 | 	sub	fp, #60
108c4                 | ' for i=numpar to 2 step -1 
108c4     53 AF 02 F6 | 	mov	local05, local01
108c8                 | LR__1402
108c8     A4 CD BF FD | 	call	#_pop
108cc     2C CE 05 F1 | 	add	fp, #44
108d0     E7 7A 62 FC | 	wrlong	result1, fp
108d4     04 CE 05 F1 | 	add	fp, #4
108d8     E7 7C 62 FC | 	wrlong	result2, fp
108dc     04 CE 05 F1 | 	add	fp, #4
108e0     E7 7E 62 FC | 	wrlong	result3, fp
108e4     57 B1 02 F6 | 	mov	local06, local05
108e8     02 B0 86 F1 | 	sub	local06, #2
108ec     02 B0 66 F0 | 	shl	local06, #2
108f0     08 CE 05 F1 | 	add	fp, #8
108f4     E7 B0 02 F1 | 	add	local06, fp
108f8     10 CE 85 F1 | 	sub	fp, #16
108fc     E7 92 02 F6 | 	mov	arg01, fp
10900     2C CE 85 F1 | 	sub	fp, #44
10904     00 D0 BF FD | 	call	#_converttofloat
10908     58 7B 62 FC | 	wrlong	result1, local06
1090c     01 AE 86 F1 | 	sub	local05, #1
10910     02 AE 56 F2 | 	cmps	local05, #2 wc
10914     B0 FF 9F 3D |  if_ae	jmp	#LR__1402
10918     54 CD BF FD | 	call	#_pop
1091c     3F AF 02 F6 | 	mov	local05, result3
10920     2C CE 05 F1 | 	add	fp, #44
10924     E7 7A 62 FC | 	wrlong	result1, fp
10928     04 CE 05 F1 | 	add	fp, #4
1092c     E7 7C 62 FC | 	wrlong	result2, fp
10930     04 CE 05 F1 | 	add	fp, #4
10934     E7 AE 62 FC | 	wrlong	local05, fp
10938     08 CE 85 F1 | 	sub	fp, #8
1093c     E7 92 02 F6 | 	mov	arg01, fp
10940     2C CE 85 F1 | 	sub	fp, #44
10944     04 CF BF FD | 	call	#_converttoint
10948     3D AD 02 F6 | 	mov	local04, result1
1094c                 | ' t1=pop()
1094c                 | ' channel=converttoint(t1) : : if channel>31 then return
1094c     20 AC 56 F2 | 	cmps	local04, #32 wc
10950     E0 02 90 3D |  if_ae	jmp	#LR__1411
10954     00 B2 06 F6 | 	mov	local07, #0
10958                 | ' max=0
10958                 | ' if harm(0)<0 then
10958     3C CE 05 F1 | 	add	fp, #60
1095c     E7 92 02 FB | 	rdlong	arg01, fp
10960     3C CE 85 F1 | 	sub	fp, #60
10964     00 94 06 F6 | 	mov	arg02, #0
10968     01 96 06 F6 | 	mov	arg03, #1
1096c     38 6D B1 FD | 	call	#__system___float_cmp
10970     00 7A 56 F2 | 	cmps	result1, #0 wc
10974     C0 00 90 3D |  if_ae	jmp	#LR__1405
10978     3C CE 05 F1 | 	add	fp, #60
1097c     E7 B4 02 FB | 	rdlong	local08, fp
10980     1F B4 06 F4 | 	bitl	local08, #31
10984     04 CE 05 F1 | 	add	fp, #4
10988     E7 B6 02 FB | 	rdlong	local09, fp
1098c     1F B6 06 F4 | 	bitl	local09, #31
10990     04 CE 85 F1 | 	sub	fp, #4
10994     00 C0 9F FF 
10998     E7 00 68 FC | 	wrlong	##1065353216, fp
1099c     04 CE 05 F1 | 	add	fp, #4
109a0     E7 B4 62 FC | 	wrlong	local08, fp
109a4     04 CE 05 F1 | 	add	fp, #4
109a8     E7 B6 62 FC | 	wrlong	local09, fp
109ac     44 CE 85 F1 | 	sub	fp, #68
109b0                 | '   harm(0)=1
109b0                 | '   harm(1)=even
109b0                 | '   harm(2)=odd
109b0                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
109b0     03 AE 06 F6 | 	mov	local05, #3
109b4                 | LR__1403
109b4     57 B1 02 F6 | 	mov	local06, local05
109b8     02 B0 66 F0 | 	shl	local06, #2
109bc     3C CE 05 F1 | 	add	fp, #60
109c0     E7 B0 02 F1 | 	add	local06, fp
109c4     57 9B 02 F6 | 	mov	arg05, local05
109c8     02 9A 86 F1 | 	sub	arg05, #2
109cc     02 9A 66 F0 | 	shl	arg05, #2
109d0     E7 9A 02 F1 | 	add	arg05, fp
109d4     4D 93 02 FB | 	rdlong	arg01, arg05
109d8     5A 95 02 F6 | 	mov	arg02, local08
109dc     3C CE 85 F1 | 	sub	fp, #60
109e0     90 68 B1 FD | 	call	#__system___float_mul
109e4     58 7B 62 FC | 	wrlong	result1, local06
109e8     02 AE 06 F1 | 	add	local05, #2
109ec     10 AE 56 F2 | 	cmps	local05, #16 wc
109f0     C0 FF 9F CD |  if_b	jmp	#LR__1403
109f4                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
109f4     04 AE 06 F6 | 	mov	local05, #4
109f8                 | LR__1404
109f8     57 B1 02 F6 | 	mov	local06, local05
109fc     02 B0 66 F0 | 	shl	local06, #2
10a00     3C CE 05 F1 | 	add	fp, #60
10a04     E7 B0 02 F1 | 	add	local06, fp
10a08     57 B5 02 F6 | 	mov	local08, local05
10a0c     02 B4 86 F1 | 	sub	local08, #2
10a10     02 B4 66 F0 | 	shl	local08, #2
10a14     E7 B4 02 F1 | 	add	local08, fp
10a18     5A 93 02 FB | 	rdlong	arg01, local08
10a1c     5B 95 02 F6 | 	mov	arg02, local09
10a20     3C CE 85 F1 | 	sub	fp, #60
10a24     4C 68 B1 FD | 	call	#__system___float_mul
10a28     58 7B 62 FC | 	wrlong	result1, local06
10a2c     02 AE 06 F1 | 	add	local05, #2
10a30     0F AE 56 F2 | 	cmps	local05, #15 wc
10a34     C0 FF 9F CD |  if_b	jmp	#LR__1404
10a38                 | LR__1405
10a38                 | ' if harm(0)>=0 then ' synthesize with harmonics
10a38     3C CE 05 F1 | 	add	fp, #60
10a3c     E7 92 02 FB | 	rdlong	arg01, fp
10a40     3C CE 85 F1 | 	sub	fp, #60
10a44     00 94 06 F6 | 	mov	arg02, #0
10a48     01 96 66 F6 | 	neg	arg03, #1
10a4c     58 6C B1 FD | 	call	#__system___float_cmp
10a50     00 7A 56 F2 | 	cmps	result1, #0 wc
10a54     DC 01 90 CD |  if_b	jmp	#LR__1410
10a58                 | '   for i=0 to 1023
10a58     00 AE 06 F6 | 	mov	local05, #0
10a5c                 | LR__1406
10a5c     00 B8 06 F6 | 	mov	local10, #0
10a60                 | '     spl=0
10a60                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
10a60     00 BA 06 F6 | 	mov	local11, #0
10a64                 | LR__1407
10a64     5D B1 02 F6 | 	mov	local06, local11
10a68     02 B0 66 F0 | 	shl	local06, #2
10a6c     E7 9A 02 F6 | 	mov	arg05, fp
10a70     3C 9A 06 F1 | 	add	arg05, #60
10a74     4D B1 02 F1 | 	add	local06, arg05
10a78     58 B1 02 FB | 	rdlong	local06, local06
10a7c     87 E4 1D FF 
10a80     DB B7 06 F6 | 	mov	local09, ##1003032539
10a84     57 93 52 F6 | 	abs	arg01, local05 wc
10a88     1F BC C6 C9 |  if_b	decod	local12, #31
10a8c     00 BC 06 36 |  if_ae	mov	local12, #0
10a90     DC 63 B1 FD | 	call	#__system___float_fromuns
10a94     5E 7B 62 F5 | 	xor	result1, local12
10a98     3D 95 02 F6 | 	mov	arg02, result1
10a9c     5B 93 02 F6 | 	mov	arg01, local09
10aa0     D0 67 B1 FD | 	call	#__system___float_mul
10aa4     3D BF 02 F6 | 	mov	local13, result1
10aa8     5D 93 02 F6 | 	mov	arg01, local11
10aac     01 92 06 F1 | 	add	arg01, #1
10ab0     49 93 52 F6 | 	abs	arg01, arg01 wc
10ab4     1F BC C6 C9 |  if_b	decod	local12, #31
10ab8     00 BC 06 36 |  if_ae	mov	local12, #0
10abc     B0 63 B1 FD | 	call	#__system___float_fromuns
10ac0     5E 7B 62 F5 | 	xor	result1, local12
10ac4     3D 95 02 F6 | 	mov	arg02, result1
10ac8     5F 93 02 F6 | 	mov	arg01, local13
10acc     A4 67 B1 FD | 	call	#__system___float_mul
10ad0     3D 93 02 F6 | 	mov	arg01, result1
10ad4     0C 71 B1 FD | 	call	#__system____builtin_sinf
10ad8     3D 95 02 F6 | 	mov	arg02, result1
10adc     58 93 02 F6 | 	mov	arg01, local06
10ae0     90 67 B1 FD | 	call	#__system___float_mul
10ae4     3D 95 02 F6 | 	mov	arg02, result1
10ae8     5C 93 02 F6 | 	mov	arg01, local10
10aec     B4 63 B1 FD | 	call	#__system___float_add
10af0     3D B9 02 F6 | 	mov	local10, result1
10af4     01 BA 06 F1 | 	add	local11, #1
10af8     10 BA 56 F2 | 	cmps	local11, #16 wc
10afc     64 FF 9F CD |  if_b	jmp	#LR__1407
10b00                 | '     if abs(spl)>max then max=abs(spl)  
10b00     5C 93 02 F6 | 	mov	arg01, local10
10b04     1F 92 06 F4 | 	bitl	arg01, #31
10b08     59 95 02 F6 | 	mov	arg02, local07
10b0c     01 96 66 F6 | 	neg	arg03, #1
10b10     94 6B B1 FD | 	call	#__system___float_cmp
10b14     01 7A 56 F2 | 	cmps	result1, #1 wc
10b18     1F B8 06 34 |  if_ae	bitl	local10, #31
10b1c     5C B3 02 36 |  if_ae	mov	local07, local10
10b20     01 AE 06 F1 | 	add	local05, #1
10b24     02 00 00 FF 
10b28     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10b2c     2C FF 9F CD |  if_b	jmp	#LR__1406
10b30                 | '   for i=0 to 1023
10b30     00 AE 06 F6 | 	mov	local05, #0
10b34                 | LR__1408
10b34     00 B8 06 F6 | 	mov	local10, #0
10b38                 | '     spl=0
10b38                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
10b38     00 BA 06 F6 | 	mov	local11, #0
10b3c                 | LR__1409
10b3c     5D BF 02 F6 | 	mov	local13, local11
10b40     02 BE 66 F0 | 	shl	local13, #2
10b44     E7 B6 02 F6 | 	mov	local09, fp
10b48     3C B6 06 F1 | 	add	local09, #60
10b4c     5B BF 02 F1 | 	add	local13, local09
10b50     5F B1 02 FB | 	rdlong	local06, local13
10b54     58 7F 23 FF 
10b58     00 92 06 F6 | 	mov	arg01, ##1191096320
10b5c     59 95 02 F6 | 	mov	arg02, local07
10b60     14 69 B1 FD | 	call	#__system___float_div
10b64     3D 95 02 F6 | 	mov	arg02, result1
10b68     58 93 02 F6 | 	mov	arg01, local06
10b6c     04 67 B1 FD | 	call	#__system___float_mul
10b70     3D B1 02 F6 | 	mov	local06, result1
10b74     87 E4 1D FF 
10b78     DB BF 06 F6 | 	mov	local13, ##1003032539
10b7c     57 93 52 F6 | 	abs	arg01, local05 wc
10b80     1F BC C6 C9 |  if_b	decod	local12, #31
10b84     00 BC 06 36 |  if_ae	mov	local12, #0
10b88     E4 62 B1 FD | 	call	#__system___float_fromuns
10b8c     5E 7B 62 F5 | 	xor	result1, local12
10b90     3D 95 02 F6 | 	mov	arg02, result1
10b94     5F 93 02 F6 | 	mov	arg01, local13
10b98     D8 66 B1 FD | 	call	#__system___float_mul
10b9c     3D BF 02 F6 | 	mov	local13, result1
10ba0     5D 93 02 F6 | 	mov	arg01, local11
10ba4     01 92 06 F1 | 	add	arg01, #1
10ba8     49 93 52 F6 | 	abs	arg01, arg01 wc
10bac     1F BC C6 C9 |  if_b	decod	local12, #31
10bb0     00 BC 06 36 |  if_ae	mov	local12, #0
10bb4     B8 62 B1 FD | 	call	#__system___float_fromuns
10bb8     5E 7B 62 F5 | 	xor	result1, local12
10bbc     3D 95 02 F6 | 	mov	arg02, result1
10bc0     5F 93 02 F6 | 	mov	arg01, local13
10bc4     AC 66 B1 FD | 	call	#__system___float_mul
10bc8     3D 93 02 F6 | 	mov	arg01, result1
10bcc     14 70 B1 FD | 	call	#__system____builtin_sinf
10bd0     3D 95 02 F6 | 	mov	arg02, result1
10bd4     58 93 02 F6 | 	mov	arg01, local06
10bd8     98 66 B1 FD | 	call	#__system___float_mul
10bdc     3D 95 02 F6 | 	mov	arg02, result1
10be0     5C 93 02 F6 | 	mov	arg01, local10
10be4     BC 62 B1 FD | 	call	#__system___float_add
10be8     3D B9 02 F6 | 	mov	local10, result1
10bec     01 BA 06 F1 | 	add	local11, #1
10bf0     10 BA 56 F2 | 	cmps	local11, #16 wc
10bf4     44 FF 9F CD |  if_b	jmp	#LR__1409
10bf8     56 BB 02 F6 | 	mov	local11, local04
10bfc     0B BA 66 F0 | 	shl	local11, #11
10c00     57 BF 02 F6 | 	mov	local13, local05
10c04     01 BE 66 F0 | 	shl	local13, #1
10c08     5F BB 02 F1 | 	add	local11, local13
10c0c     5C 93 02 F6 | 	mov	arg01, local10
10c10     01 94 06 F6 | 	mov	arg02, #1
10c14     24 6B B1 FD | 	call	#__system___float_tointeger
10c18     3D 95 02 F6 | 	mov	arg02, result1
10c1c     5D 93 02 F6 | 	mov	arg01, local11
10c20     3C 04 B1 FD | 	call	#_psdpoke
10c24     01 AE 06 F1 | 	add	local05, #1
10c28     02 00 00 FF 
10c2c     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10c30     00 FF 9F CD |  if_b	jmp	#LR__1408
10c34                 | LR__1410
10c34                 | LR__1411
10c34     E7 F0 03 F6 | 	mov	ptra, fp
10c38     F2 00 A0 FD | 	call	#popregs_
10c3c                 | _do_defsnd_ret
10c3c     2D 00 64 FD | 	ret
10c40                 | 
10c40                 | ' 
10c40                 | ' '-------------------- defsprite
10c40                 | ' 
10c40                 | ' sub do_defsprite
10c40                 | _do_defsprite
10c40     0B CA 05 F6 | 	mov	COUNT_, #11
10c44     E8 00 A0 FD | 	call	#pushregs_
10c48     60 F0 07 F1 | 	add	ptra, #96
10c4c     20 CA BF FD | 	call	#_pop
10c50     3D 97 02 F6 | 	mov	arg03, result1
10c54     3E 95 02 F6 | 	mov	arg02, result2
10c58     3F 93 02 F6 | 	mov	arg01, result3
10c5c     30 CE 05 F1 | 	add	fp, #48
10c60     E7 96 62 FC | 	wrlong	arg03, fp
10c64     04 CE 05 F1 | 	add	fp, #4
10c68     E7 94 62 FC | 	wrlong	arg02, fp
10c6c     04 CE 05 F1 | 	add	fp, #4
10c70     E7 92 62 FC | 	wrlong	arg01, fp
10c74     38 CE 85 F1 | 	sub	fp, #56
10c78     F4 C9 BF FD | 	call	#_pop
10c7c     3D 97 02 F6 | 	mov	arg03, result1
10c80     3E 95 02 F6 | 	mov	arg02, result2
10c84     3F 93 02 F6 | 	mov	arg01, result3
10c88     24 CE 05 F1 | 	add	fp, #36
10c8c     E7 96 62 FC | 	wrlong	arg03, fp
10c90     04 CE 05 F1 | 	add	fp, #4
10c94     E7 94 62 FC | 	wrlong	arg02, fp
10c98     04 CE 05 F1 | 	add	fp, #4
10c9c     E7 92 62 FC | 	wrlong	arg01, fp
10ca0     2C CE 85 F1 | 	sub	fp, #44
10ca4     C8 C9 BF FD | 	call	#_pop
10ca8     3D 97 02 F6 | 	mov	arg03, result1
10cac     3E 95 02 F6 | 	mov	arg02, result2
10cb0     3F 93 02 F6 | 	mov	arg01, result3
10cb4     18 CE 05 F1 | 	add	fp, #24
10cb8     E7 96 62 FC | 	wrlong	arg03, fp
10cbc     04 CE 05 F1 | 	add	fp, #4
10cc0     E7 94 62 FC | 	wrlong	arg02, fp
10cc4     04 CE 05 F1 | 	add	fp, #4
10cc8     E7 92 62 FC | 	wrlong	arg01, fp
10ccc     20 CE 85 F1 | 	sub	fp, #32
10cd0     9C C9 BF FD | 	call	#_pop
10cd4     3D 97 02 F6 | 	mov	arg03, result1
10cd8     3E 95 02 F6 | 	mov	arg02, result2
10cdc     3F 93 02 F6 | 	mov	arg01, result3
10ce0     0C CE 05 F1 | 	add	fp, #12
10ce4     E7 96 62 FC | 	wrlong	arg03, fp
10ce8     04 CE 05 F1 | 	add	fp, #4
10cec     E7 94 62 FC | 	wrlong	arg02, fp
10cf0     04 CE 05 F1 | 	add	fp, #4
10cf4     E7 92 62 FC | 	wrlong	arg01, fp
10cf8     14 CE 85 F1 | 	sub	fp, #20
10cfc     70 C9 BF FD | 	call	#_pop
10d00     3F 97 02 F6 | 	mov	arg03, result3
10d04     E7 7A 62 FC | 	wrlong	result1, fp
10d08     04 CE 05 F1 | 	add	fp, #4
10d0c     E7 7C 62 FC | 	wrlong	result2, fp
10d10     04 CE 05 F1 | 	add	fp, #4
10d14     E7 96 62 FC | 	wrlong	arg03, fp
10d18     08 CE 85 F1 | 	sub	fp, #8
10d1c     E7 92 02 F6 | 	mov	arg01, fp
10d20     28 CB BF FD | 	call	#_converttoint
10d24     3D A7 02 F6 | 	mov	local01, result1
10d28     E7 92 02 F6 | 	mov	arg01, fp
10d2c     0C 92 06 F1 | 	add	arg01, #12
10d30     18 CB BF FD | 	call	#_converttoint
10d34     3D A9 02 F6 | 	mov	local02, result1
10d38     E7 92 02 F6 | 	mov	arg01, fp
10d3c     18 92 06 F1 | 	add	arg01, #24
10d40     08 CB BF FD | 	call	#_converttoint
10d44     3D AB 02 F6 | 	mov	local03, result1
10d48     E7 92 02 F6 | 	mov	arg01, fp
10d4c     24 92 06 F1 | 	add	arg01, #36
10d50     F8 CA BF FD | 	call	#_converttoint
10d54     3D AD 02 F6 | 	mov	local04, result1
10d58     E7 92 02 F6 | 	mov	arg01, fp
10d5c     30 92 06 F1 | 	add	arg01, #48
10d60     E8 CA BF FD | 	call	#_converttoint
10d64     3D AF 02 F6 | 	mov	local05, result1
10d68                 | ' 
10d68                 | ' t5=pop()
10d68                 | ' t4=pop()
10d68                 | ' t3=pop()
10d68                 | ' t2=pop()
10d68                 | ' t1=pop()
10d68                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
10d68                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
10d68     53 97 02 F6 | 	mov	arg03, local01
10d6c     02 96 66 F0 | 	shl	arg03, #2
10d70     32 95 02 F6 | 	mov	arg02, objptr
10d74     54 00 00 FF 
10d78     30 94 06 F1 | 	add	arg02, ##43056
10d7c     4A 97 02 F1 | 	add	arg03, arg02
10d80     4B 97 0A FB | 	rdlong	arg03, arg03 wz
10d84     20 00 90 AD |  if_e	jmp	#LR__1420
10d88     53 97 02 F6 | 	mov	arg03, local01
10d8c     02 96 66 F0 | 	shl	arg03, #2
10d90     32 95 02 F6 | 	mov	arg02, objptr
10d94     54 00 00 FF 
10d98     30 94 06 F1 | 	add	arg02, ##43056
10d9c     4A 97 02 F1 | 	add	arg03, arg02
10da0     4B 93 02 FB | 	rdlong	arg01, arg03
10da4     38 79 B1 FD | 	call	#__system___gc_free
10da8                 | LR__1420
10da8     57 AD 02 FD | 	qmul	local04, local05
10dac     53 B1 02 F6 | 	mov	local06, local01
10db0     02 B0 66 F0 | 	shl	local06, #2
10db4     32 97 02 F6 | 	mov	arg03, objptr
10db8     54 00 00 FF 
10dbc     30 96 06 F1 | 	add	arg03, ##43056
10dc0     4B B1 02 F1 | 	add	local06, arg03
10dc4     18 92 62 FD | 	getqx	arg01
10dc8     E0 77 B1 FD | 	call	#__system___gc_alloc_managed
10dcc     58 7B 62 FC | 	wrlong	result1, local06
10dd0                 | ' for y=a3 to a3+a5-1
10dd0     55 B3 02 F6 | 	mov	local07, local03
10dd4     55 B5 02 F6 | 	mov	local08, local03
10dd8     57 B5 02 F1 | 	add	local08, local05
10ddc                 | LR__1421
10ddc     5A B3 52 F2 | 	cmps	local07, local08 wc
10de0     7C 00 90 3D |  if_ae	jmp	#LR__1424
10de4                 | '   for x=a2 to a4+a2-1
10de4     54 B7 02 F6 | 	mov	local09, local02
10de8     56 B9 02 F6 | 	mov	local10, local04
10dec     54 B9 02 F1 | 	add	local10, local02
10df0                 | LR__1422
10df0     5C B7 52 F2 | 	cmps	local09, local10 wc
10df4     60 00 90 3D |  if_ae	jmp	#LR__1423
10df8     59 B1 02 F6 | 	mov	local06, local07
10dfc     55 B1 82 F1 | 	sub	local06, local03
10e00     56 B1 02 FD | 	qmul	local06, local04
10e04     53 B1 02 F6 | 	mov	local06, local01
10e08     02 B0 66 F0 | 	shl	local06, #2
10e0c     32 97 02 F6 | 	mov	arg03, objptr
10e10     54 00 00 FF 
10e14     30 96 06 F1 | 	add	arg03, ##43056
10e18     4B B1 02 F1 | 	add	local06, arg03
10e1c     58 B1 02 FB | 	rdlong	local06, local06
10e20     5B BB 02 F6 | 	mov	local11, local09
10e24     54 BB 82 F1 | 	sub	local11, local02
10e28     32 93 02 FB | 	rdlong	arg01, objptr
10e2c     5B 93 02 F1 | 	add	arg01, local09
10e30     59 97 02 F6 | 	mov	arg03, local07
10e34     0A 96 66 F0 | 	shl	arg03, #10
10e38     4B 93 02 F1 | 	add	arg01, arg03
10e3c     18 96 62 FD | 	getqx	arg03
10e40     4B BB 02 F1 | 	add	local11, arg03
10e44     58 BB 02 F1 | 	add	local11, local06
10e48     A4 02 B1 FD | 	call	#_pspeek
10e4c     5D 7B 42 FC | 	wrbyte	result1, local11
10e50     01 B6 06 F1 | 	add	local09, #1
10e54     98 FF 9F FD | 	jmp	#LR__1422
10e58                 | LR__1423
10e58     01 B2 06 F1 | 	add	local07, #1
10e5c     7C FF 9F FD | 	jmp	#LR__1421
10e60                 | LR__1424
10e60     53 BB 02 F6 | 	mov	local11, local01
10e64     02 BA 66 F0 | 	shl	local11, #2
10e68     32 B9 02 F6 | 	mov	local10, objptr
10e6c     54 00 00 FF 
10e70     30 B8 06 F1 | 	add	local10, ##43056
10e74     5C BB 02 F1 | 	add	local11, local10
10e78     5D 95 02 FB | 	rdlong	arg02, local11
10e7c     53 93 02 F6 | 	mov	arg01, local01
10e80     B8 0F B1 FD | 	call	#_hg010b_spin2_setspriteptr
10e84     53 93 02 F6 | 	mov	arg01, local01
10e88     56 95 02 F6 | 	mov	arg02, local04
10e8c     57 97 02 F6 | 	mov	arg03, local05
10e90     34 10 B1 FD | 	call	#_hg010b_spin2_setspritesize
10e94     E7 F0 03 F6 | 	mov	ptra, fp
10e98     F2 00 A0 FD | 	call	#popregs_
10e9c                 | _do_defsprite_ret
10e9c     2D 00 64 FD | 	ret
10ea0                 | 
10ea0                 | ' 
10ea0                 | ' '-------------------- deg
10ea0                 | ' 
10ea0                 | ' sub do_deg
10ea0                 | _do_deg
10ea0     54 00 00 FF 
10ea4     84 64 06 F1 | 	add	objptr, ##43140
10ea8     7D 47 9E FF 
10eac     32 6B 68 FC | 	wrlong	##1016003125, objptr
10eb0     04 64 06 F1 | 	add	objptr, #4
10eb4     97 32 A1 FF 
10eb8     32 C3 69 FC | 	wrlong	##1113927393, objptr
10ebc     54 00 00 FF 
10ec0     88 64 86 F1 | 	sub	objptr, ##43144
10ec4                 | _do_deg_ret
10ec4     2D 00 64 FD | 	ret
10ec8                 | 
10ec8                 | ' 
10ec8                 | ' '-------------------- delete
10ec8                 | ' 
10ec8                 | ' sub do_delete
10ec8                 | _do_delete
10ec8     05 CA 05 F6 | 	mov	COUNT_, #5
10ecc     E8 00 A0 FD | 	call	#pushregs_
10ed0     9C C7 BF FD | 	call	#_pop
10ed4     3E 99 02 F6 | 	mov	arg04, result2
10ed8     3F 97 02 F6 | 	mov	arg03, result3
10edc     3D A7 02 F6 | 	mov	local01, result1
10ee0     4C A9 02 F6 | 	mov	local02, arg04
10ee4     4B AB 02 F6 | 	mov	local03, arg03
10ee8                 | ' 
10ee8                 | ' t1=pop()
10ee8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10ee8     2B AA 0E F2 | 	cmp	local03, #43 wz
10eec     10 00 90 5D |  if_ne	jmp	#LR__1430
10ef0     53 93 02 F6 | 	mov	arg01, local01
10ef4     E8 C8 BF FD | 	call	#_convertstring
10ef8     3D A7 02 F6 | 	mov	local01, result1
10efc     1F AA 06 F6 | 	mov	local03, #31
10f00                 | LR__1430
10f00                 | ' if t1.result_type<>result_string then printerror(15): return
10f00     1F AA 0E F2 | 	cmp	local03, #31 wz
10f04     10 00 90 AD |  if_e	jmp	#LR__1431
10f08     0F 92 06 F6 | 	mov	arg01, #15
10f0c     00 94 06 F6 | 	mov	arg02, #0
10f10     6C FF B0 FD | 	call	#_printerror
10f14     E4 00 90 FD | 	jmp	#LR__1435
10f18                 | LR__1431
10f18                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
10f18     4C 00 00 FF 
10f1c     38 64 06 F1 | 	add	objptr, ##38968
10f20     32 93 02 FB | 	rdlong	arg01, objptr
10f24     4C 00 00 FF 
10f28     38 64 86 F1 | 	sub	objptr, ##38968
10f2c     98 01 00 FF 
10f30     01 94 06 F6 | 	mov	arg02, ##@LR__5993
10f34     94 3C B1 FD | 	call	#__system___string_cmp
10f38     00 7A 0E F2 | 	cmp	result1, #0 wz
10f3c     34 00 90 AD |  if_e	jmp	#LR__1432
10f40     4C 00 00 FF 
10f44     38 64 06 F1 | 	add	objptr, ##38968
10f48     32 93 02 FB | 	rdlong	arg01, objptr
10f4c     4C 00 00 FF 
10f50     38 64 86 F1 | 	sub	objptr, ##38968
10f54     98 01 00 FF 
10f58     03 94 06 F6 | 	mov	arg02, ##@LR__5994
10f5c     A0 3C B1 FD | 	call	#__system___string_concat
10f60     3D 93 02 F6 | 	mov	arg01, result1
10f64     53 95 02 F6 | 	mov	arg02, local01
10f68     94 3C B1 FD | 	call	#__system___string_concat
10f6c     3D AD 02 F6 | 	mov	local04, result1
10f70     14 00 90 FD | 	jmp	#LR__1433
10f74                 | LR__1432
10f74     98 01 00 FF 
10f78     05 92 06 F6 | 	mov	arg01, ##@LR__5995
10f7c     53 95 02 F6 | 	mov	arg02, local01
10f80     7C 3C B1 FD | 	call	#__system___string_concat
10f84     3D AD 02 F6 | 	mov	local04, result1
10f88                 | LR__1433
10f88     56 93 02 F6 | 	mov	arg01, local04
10f8c     0C 5C B1 FD | 	call	#__system___remove
10f90     20 68 06 F1 | 	add	ptr___system__dat__, #32
10f94     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
10f98     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
10f9c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
10fa0     3D AF 0A F6 | 	mov	local05, result1 wz
10fa4                 | ' kill filename$
10fa4                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
10fa4     54 00 90 AD |  if_e	jmp	#LR__1434
10fa8     00 92 06 F6 | 	mov	arg01, #0
10fac     78 91 B1 FD | 	call	#__system___getiolock_0622
10fb0     3D 93 02 F6 | 	mov	arg01, result1
10fb4     EC 3B B1 FD | 	call	#__system___lockmem
10fb8     98 01 00 FF 
10fbc     07 94 06 F6 | 	mov	arg02, ##@LR__5996
10fc0     00 92 06 F6 | 	mov	arg01, #0
10fc4     00 96 06 F6 | 	mov	arg03, #0
10fc8     CC 48 B1 FD | 	call	#__system___basic_print_string
10fcc     00 92 06 F6 | 	mov	arg01, #0
10fd0     57 95 02 F6 | 	mov	arg02, local05
10fd4     00 96 06 F6 | 	mov	arg03, #0
10fd8     0A 98 06 F6 | 	mov	arg04, #10
10fdc     FC 48 B1 FD | 	call	#__system___basic_print_integer
10fe0     00 92 06 F6 | 	mov	arg01, #0
10fe4     0A 94 06 F6 | 	mov	arg02, #10
10fe8     00 96 06 F6 | 	mov	arg03, #0
10fec     50 48 B1 FD | 	call	#__system___basic_print_char
10ff0     00 92 06 F6 | 	mov	arg01, #0
10ff4     30 91 B1 FD | 	call	#__system___getiolock_0622
10ff8     3D 01 68 FC | 	wrlong	#0, result1
10ffc                 | LR__1434
10ffc                 | LR__1435
10ffc     E7 F0 03 F6 | 	mov	ptra, fp
11000     F2 00 A0 FD | 	call	#popregs_
11004                 | _do_delete_ret
11004     2D 00 64 FD | 	ret
11008                 | 
11008                 | ' 
11008                 | ' '-------------------- dir
11008                 | ' 
11008                 | ' sub do_dir
11008                 | _do_dir
11008     13 CA 05 F6 | 	mov	COUNT_, #19
1100c     E8 00 A0 FD | 	call	#pushregs_
11010     01 00 00 FF 
11014     38 F0 07 F1 | 	add	ptra, ##568
11018                 | ' 
11018                 | ' print "Current directory: "; currentdir$ 
11018     00 92 06 F6 | 	mov	arg01, #0
1101c     08 91 B1 FD | 	call	#__system___getiolock_0622
11020     3D 93 02 F6 | 	mov	arg01, result1
11024     7C 3B B1 FD | 	call	#__system___lockmem
11028     98 01 00 FF 
1102c     3F 94 06 F6 | 	mov	arg02, ##@LR__5997
11030     00 92 06 F6 | 	mov	arg01, #0
11034     00 96 06 F6 | 	mov	arg03, #0
11038     5C 48 B1 FD | 	call	#__system___basic_print_string
1103c     4C 00 00 FF 
11040     38 64 06 F1 | 	add	objptr, ##38968
11044     32 95 02 FB | 	rdlong	arg02, objptr
11048     4C 00 00 FF 
1104c     38 64 86 F1 | 	sub	objptr, ##38968
11050     00 92 06 F6 | 	mov	arg01, #0
11054     00 96 06 F6 | 	mov	arg03, #0
11058     3C 48 B1 FD | 	call	#__system___basic_print_string
1105c     00 92 06 F6 | 	mov	arg01, #0
11060     0A 94 06 F6 | 	mov	arg02, #10
11064     00 96 06 F6 | 	mov	arg03, #0
11068     D4 47 B1 FD | 	call	#__system___basic_print_char
1106c     01 A6 06 F6 | 	mov	local01, #1
11070     00 92 06 F6 | 	mov	arg01, #0
11074     B0 90 B1 FD | 	call	#__system___getiolock_0622
11078     3D 01 68 FC | 	wrlong	#0, result1
1107c     00 A8 06 F6 | 	mov	local02, #0
11080     00 AA 06 F6 | 	mov	local03, #0
11084                 | ' px=0
11084                 | ' for i=0 to 127: filelist(i)="" : next i
11084     00 AC 06 F6 | 	mov	local04, #0
11088     1C CE 05 F1 | 	add	fp, #28
1108c     D7 12 48 FB | 	callpa	#(@LR__1441-@LR__1440)>>2,fcache_load_ptr_
11090                 | LR__1440
11090     56 AF 02 F6 | 	mov	local05, local04
11094     02 AE 66 F0 | 	shl	local05, #2
11098     E7 AE 02 F1 | 	add	local05, fp
1109c     98 01 00 FF 
110a0     53 B0 06 F6 | 	mov	local06, ##@LR__5998
110a4     57 B1 62 FC | 	wrlong	local06, local05
110a8     01 AC 06 F1 | 	add	local04, #1
110ac     80 AC 56 F2 | 	cmps	local04, #128 wc
110b0     DC FF 9F CD |  if_b	jmp	#LR__1440
110b4                 | LR__1441
110b4     1C CE 85 F1 | 	sub	fp, #28
110b8     98 01 00 FF 
110bc     54 92 06 F6 | 	mov	arg01, ##@LR__5999
110c0     10 94 06 F6 | 	mov	arg02, #16
110c4     18 92 B1 FD | 	call	#__system___basic_dir
110c8     3D B3 02 F6 | 	mov	local07, result1
110cc     00 B4 06 F6 | 	mov	local08, #0
110d0                 | ' filename=dir$("*", fbDirectory)
110d0                 | ' n=0
110d0                 | ' while filename <> "" andalso filename <> nil andalso n<128
110d0                 | LR__1442
110d0     98 01 00 FF 
110d4     56 B6 06 F6 | 	mov	local09, ##@LR__6000
110d8     59 93 02 F6 | 	mov	arg01, local07
110dc     5B 95 02 F6 | 	mov	arg02, local09
110e0     E8 3A B1 FD | 	call	#__system___string_cmp
110e4     00 7A 0E F2 | 	cmp	result1, #0 wz
110e8     68 00 90 AD |  if_e	jmp	#LR__1443
110ec     00 B6 06 F6 | 	mov	local09, #0
110f0     59 93 02 F6 | 	mov	arg01, local07
110f4     00 94 06 F6 | 	mov	arg02, #0
110f8     D0 3A B1 FD | 	call	#__system___string_cmp
110fc     00 7A 0E F2 | 	cmp	result1, #0 wz
11100     50 00 90 AD |  if_e	jmp	#LR__1443
11104     80 B4 56 F2 | 	cmps	local08, #128 wc
11108     48 00 90 3D |  if_ae	jmp	#LR__1443
1110c     98 01 00 FF 
11110     57 92 06 F6 | 	mov	arg01, ##@LR__6001
11114     59 95 02 F6 | 	mov	arg02, local07
11118     E4 3A B1 FD | 	call	#__system___string_concat
1111c     3D B3 02 F6 | 	mov	local07, result1
11120     5A AF 02 F6 | 	mov	local05, local08
11124     02 AE 66 F0 | 	shl	local05, #2
11128     E7 B6 02 F6 | 	mov	local09, fp
1112c     1C B6 06 F1 | 	add	local09, #28
11130     5B AF 02 F1 | 	add	local05, local09
11134     57 B3 62 FC | 	wrlong	local07, local05
11138     01 B4 06 F1 | 	add	local08, #1
1113c     00 AE 06 F6 | 	mov	local05, #0
11140     00 92 06 F6 | 	mov	arg01, #0
11144     00 94 06 F6 | 	mov	arg02, #0
11148     94 91 B1 FD | 	call	#__system___basic_dir
1114c     3D B3 02 F6 | 	mov	local07, result1
11150     7C FF 9F FD | 	jmp	#LR__1442
11154                 | LR__1443
11154                 | ' for i=0 to n-1			' now sort this
11154     00 AC 06 F6 | 	mov	local04, #0
11158     5A B9 02 F6 | 	mov	local10, local08
1115c                 | LR__1444
1115c     5C AD 52 F2 | 	cmps	local04, local10 wc
11160     DC 00 90 3D |  if_ae	jmp	#LR__1448
11164     00 BA 06 F6 | 	mov	local11, #0
11168                 | '   swapped=false
11168                 | '   for j=0 to n-i-2
11168     00 BC 06 F6 | 	mov	local12, #0
1116c     5A BF 02 F6 | 	mov	local13, local08
11170     56 BF 82 F1 | 	sub	local13, local04
11174     01 BE 86 F1 | 	sub	local13, #1
11178                 | LR__1445
11178     5F BD 52 F2 | 	cmps	local12, local13 wc
1117c     B0 00 90 3D |  if_ae	jmp	#LR__1447
11180                 | '     if filelist(j) > filelist(j+1) then
11180     5E B7 02 F6 | 	mov	local09, local12
11184     02 B6 66 F0 | 	shl	local09, #2
11188     1C CE 05 F1 | 	add	fp, #28
1118c     E7 B6 02 F1 | 	add	local09, fp
11190     5B 93 02 FB | 	rdlong	arg01, local09
11194     5E B7 02 F6 | 	mov	local09, local12
11198     01 B6 06 F1 | 	add	local09, #1
1119c     5B B1 02 F6 | 	mov	local06, local09
111a0     02 B0 66 F0 | 	shl	local06, #2
111a4     E7 A6 02 F6 | 	mov	local01, fp
111a8     E7 B0 02 F1 | 	add	local06, fp
111ac     58 AF 02 FB | 	rdlong	local05, local06
111b0     57 95 02 F6 | 	mov	arg02, local05
111b4     1C CE 85 F1 | 	sub	fp, #28
111b8     10 3A B1 FD | 	call	#__system___string_cmp
111bc     01 7A 56 F2 | 	cmps	result1, #1 wc
111c0     64 00 90 CD |  if_b	jmp	#LR__1446
111c4     5E B7 02 F6 | 	mov	local09, local12
111c8     01 B6 06 F1 | 	add	local09, #1
111cc     02 B6 66 F0 | 	shl	local09, #2
111d0     1C CE 05 F1 | 	add	fp, #28
111d4     E7 B6 02 F1 | 	add	local09, fp
111d8     5B BB 02 FB | 	rdlong	local11, local09
111dc     5E B1 02 F6 | 	mov	local06, local12
111e0     02 B0 66 F0 | 	shl	local06, #2
111e4     E7 B0 02 F1 | 	add	local06, fp
111e8     58 AF 02 FB | 	rdlong	local05, local06
111ec     5E B7 02 F6 | 	mov	local09, local12
111f0     5B B1 02 F6 | 	mov	local06, local09
111f4     02 B0 66 F0 | 	shl	local06, #2
111f8     E7 A6 02 F6 | 	mov	local01, fp
111fc     E7 B0 02 F1 | 	add	local06, fp
11200     58 BB 62 FC | 	wrlong	local11, local06
11204     5E A9 02 F6 | 	mov	local02, local12
11208     01 A8 06 F1 | 	add	local02, #1
1120c     54 C1 02 F6 | 	mov	local14, local02
11210     02 C0 66 F0 | 	shl	local14, #2
11214     E7 C2 02 F6 | 	mov	local15, fp
11218     E7 C0 02 F1 | 	add	local14, fp
1121c     60 AF 62 FC | 	wrlong	local05, local14
11220     01 BA 66 F6 | 	neg	local11, #1
11224     1C CE 85 F1 | 	sub	fp, #28
11228                 | LR__1446
11228     01 BC 06 F1 | 	add	local12, #1
1122c     48 FF 9F FD | 	jmp	#LR__1445
11230                 | LR__1447
11230                 | ' if not swapped then exit for
11230     5D C5 22 F6 | 	not	local16, local11
11234     00 C4 0E F2 | 	cmp	local16, #0 wz
11238     01 AC 06 A1 |  if_e	add	local04, #1
1123c     1C FF 9F AD |  if_e	jmp	#LR__1444
11240                 | LR__1448
11240                 | ' for i=0 to n-1
11240     00 AC 06 F6 | 	mov	local04, #0
11244     5A C7 02 F6 | 	mov	local17, local08
11248                 | LR__1449
11248     63 AD 52 F2 | 	cmps	local04, local17 wc
1124c     90 00 90 3D |  if_ae	jmp	#LR__1451
11250                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11250     00 92 06 F6 | 	mov	arg01, #0
11254     D0 8E B1 FD | 	call	#__system___getiolock_0622
11258     3D 93 02 F6 | 	mov	arg01, result1
1125c     44 39 B1 FD | 	call	#__system___lockmem
11260     56 A9 02 F6 | 	mov	local02, local04
11264     02 A8 66 F0 | 	shl	local02, #2
11268     E7 C0 02 F6 | 	mov	local14, fp
1126c     1C C0 06 F1 | 	add	local14, #28
11270     60 A9 02 F1 | 	add	local02, local14
11274     54 95 02 FB | 	rdlong	arg02, local02
11278     00 A6 06 F6 | 	mov	local01, #0
1127c     00 92 06 F6 | 	mov	arg01, #0
11280     00 96 06 F6 | 	mov	arg03, #0
11284     10 46 B1 FD | 	call	#__system___basic_print_string
11288     00 92 06 F6 | 	mov	arg01, #0
1128c     98 8E B1 FD | 	call	#__system___getiolock_0622
11290     3D 01 68 FC | 	wrlong	#0, result1
11294     40 AA 06 F1 | 	add	local03, #64
11298     55 93 02 F6 | 	mov	arg01, local03
1129c     C0 18 B1 FD | 	call	#_hg010b_spin2_setcursorx
112a0     00 AB 56 F2 | 	cmps	local03, #256 wc
112a4     30 00 90 CD |  if_b	jmp	#LR__1450
112a8     00 AA 06 F6 | 	mov	local03, #0
112ac     00 92 06 F6 | 	mov	arg01, #0
112b0     74 8E B1 FD | 	call	#__system___getiolock_0622
112b4     3D 93 02 F6 | 	mov	arg01, result1
112b8     E8 38 B1 FD | 	call	#__system___lockmem
112bc     00 92 06 F6 | 	mov	arg01, #0
112c0     0A 94 06 F6 | 	mov	arg02, #10
112c4     00 96 06 F6 | 	mov	arg03, #0
112c8     74 45 B1 FD | 	call	#__system___basic_print_char
112cc     00 92 06 F6 | 	mov	arg01, #0
112d0     54 8E B1 FD | 	call	#__system___getiolock_0622
112d4     3D 01 68 FC | 	wrlong	#0, result1
112d8                 | LR__1450
112d8     01 AC 06 F1 | 	add	local04, #1
112dc     68 FF 9F FD | 	jmp	#LR__1449
112e0                 | LR__1451
112e0                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
112e0     80 B4 56 F2 | 	cmps	local08, #128 wc
112e4     44 00 90 CD |  if_b	jmp	#LR__1452
112e8     00 92 06 F6 | 	mov	arg01, #0
112ec     38 8E B1 FD | 	call	#__system___getiolock_0622
112f0     3D 93 02 F6 | 	mov	arg01, result1
112f4     AC 38 B1 FD | 	call	#__system___lockmem
112f8     98 01 00 FF 
112fc     5E 94 06 F6 | 	mov	arg02, ##@LR__6002
11300     00 92 06 F6 | 	mov	arg01, #0
11304     00 96 06 F6 | 	mov	arg03, #0
11308     8C 45 B1 FD | 	call	#__system___basic_print_string
1130c     00 92 06 F6 | 	mov	arg01, #0
11310     0A 94 06 F6 | 	mov	arg02, #10
11314     00 96 06 F6 | 	mov	arg03, #0
11318     24 45 B1 FD | 	call	#__system___basic_print_char
1131c     00 92 06 F6 | 	mov	arg01, #0
11320     04 8E B1 FD | 	call	#__system___getiolock_0622
11324     3D 01 68 FC | 	wrlong	#0, result1
11328     00 A6 06 F6 | 	mov	local01, #0
1132c                 | LR__1452
1132c                 | ' print
1132c     00 92 06 F6 | 	mov	arg01, #0
11330     F4 8D B1 FD | 	call	#__system___getiolock_0622
11334     3D 93 02 F6 | 	mov	arg01, result1
11338     68 38 B1 FD | 	call	#__system___lockmem
1133c     00 92 06 F6 | 	mov	arg01, #0
11340     0A 94 06 F6 | 	mov	arg02, #10
11344     00 96 06 F6 | 	mov	arg03, #0
11348     F4 44 B1 FD | 	call	#__system___basic_print_char
1134c     00 92 06 F6 | 	mov	arg01, #0
11350     D4 8D B1 FD | 	call	#__system___getiolock_0622
11354     3D 01 68 FC | 	wrlong	#0, result1
11358     00 B0 06 F6 | 	mov	local06, #0
1135c     00 B4 06 F6 | 	mov	local08, #0
11360     00 AA 06 F6 | 	mov	local03, #0
11364                 | ' return cursor_y
11364     3E 64 06 F1 | 	add	objptr, #62
11368     32 C9 C2 FA | 	rdbyte	local18, objptr
1136c     3E 64 86 F1 | 	sub	objptr, #62
11370     98 01 00 FF 
11374     90 92 06 F6 | 	mov	arg01, ##@LR__6003
11378     21 94 06 F6 | 	mov	arg02, #33
1137c     60 8F B1 FD | 	call	#__system___basic_dir
11380     3D B3 02 F6 | 	mov	local07, result1
11384                 | ' n=0
11384                 | ' px=0: py=v.getcursory()
11384                 | ' filename = dir$("*", fbNormal )   
11384                 | ' do while filename <> "" andalso filename <> nil andalso n<128
11384                 | LR__1453
11384     98 01 00 FF 
11388     92 B6 06 F6 | 	mov	local09, ##@LR__6004
1138c     59 93 02 F6 | 	mov	arg01, local07
11390     5B 95 02 F6 | 	mov	arg02, local09
11394     34 38 B1 FD | 	call	#__system___string_cmp
11398     00 7A 0E F2 | 	cmp	result1, #0 wz
1139c     54 00 90 AD |  if_e	jmp	#LR__1454
113a0     00 B6 06 F6 | 	mov	local09, #0
113a4     59 93 02 F6 | 	mov	arg01, local07
113a8     00 94 06 F6 | 	mov	arg02, #0
113ac     1C 38 B1 FD | 	call	#__system___string_cmp
113b0     00 7A 0E F2 | 	cmp	result1, #0 wz
113b4     3C 00 90 AD |  if_e	jmp	#LR__1454
113b8     80 B4 56 F2 | 	cmps	local08, #128 wc
113bc     34 00 90 3D |  if_ae	jmp	#LR__1454
113c0     5A AF 02 F6 | 	mov	local05, local08
113c4     02 AE 66 F0 | 	shl	local05, #2
113c8     E7 B6 02 F6 | 	mov	local09, fp
113cc     1C B6 06 F1 | 	add	local09, #28
113d0     5B AF 02 F1 | 	add	local05, local09
113d4     57 B3 62 FC | 	wrlong	local07, local05
113d8     01 B4 06 F1 | 	add	local08, #1
113dc     00 AE 06 F6 | 	mov	local05, #0
113e0     00 92 06 F6 | 	mov	arg01, #0
113e4     00 94 06 F6 | 	mov	arg02, #0
113e8     F4 8E B1 FD | 	call	#__system___basic_dir
113ec     3D B3 02 F6 | 	mov	local07, result1
113f0     90 FF 9F FD | 	jmp	#LR__1453
113f4                 | LR__1454
113f4                 | ' for i =0 to n-1
113f4     00 AC 06 F6 | 	mov	local04, #0
113f8                 | LR__1455
113f8     5A AD 52 F2 | 	cmps	local04, local08 wc
113fc     D8 00 90 3D |  if_ae	jmp	#LR__1459
11400     00 BA 06 F6 | 	mov	local11, #0
11404                 | '   swapped=false
11404                 | '   for j=0 to n-i-2
11404     00 BC 06 F6 | 	mov	local12, #0
11408     5A CB 02 F6 | 	mov	local19, local08
1140c     56 CB 82 F1 | 	sub	local19, local04
11410     01 CA 86 F1 | 	sub	local19, #1
11414                 | LR__1456
11414     65 BD 52 F2 | 	cmps	local12, local19 wc
11418     AC 00 90 3D |  if_ae	jmp	#LR__1458
1141c                 | '     if filelist(j) > filelist(j+1) then
1141c     5E B7 02 F6 | 	mov	local09, local12
11420     02 B6 66 F0 | 	shl	local09, #2
11424     1C CE 05 F1 | 	add	fp, #28
11428     E7 B6 02 F1 | 	add	local09, fp
1142c     5B 93 02 FB | 	rdlong	arg01, local09
11430     5E B7 02 F6 | 	mov	local09, local12
11434     01 B6 06 F1 | 	add	local09, #1
11438     5B B1 02 F6 | 	mov	local06, local09
1143c     02 B0 66 F0 | 	shl	local06, #2
11440     E7 A6 02 F6 | 	mov	local01, fp
11444     E7 B0 02 F1 | 	add	local06, fp
11448     58 AF 02 FB | 	rdlong	local05, local06
1144c     57 95 02 F6 | 	mov	arg02, local05
11450     1C CE 85 F1 | 	sub	fp, #28
11454     74 37 B1 FD | 	call	#__system___string_cmp
11458     01 7A 56 F2 | 	cmps	result1, #1 wc
1145c     60 00 90 CD |  if_b	jmp	#LR__1457
11460     5E B7 02 F6 | 	mov	local09, local12
11464     01 B6 06 F1 | 	add	local09, #1
11468     02 B6 66 F0 | 	shl	local09, #2
1146c     1C CE 05 F1 | 	add	fp, #28
11470     E7 B6 02 F1 | 	add	local09, fp
11474     5B C5 02 FB | 	rdlong	local16, local09
11478     5E B1 02 F6 | 	mov	local06, local12
1147c     02 B0 66 F0 | 	shl	local06, #2
11480     E7 B0 02 F1 | 	add	local06, fp
11484     58 AF 02 FB | 	rdlong	local05, local06
11488     5E B7 02 F6 | 	mov	local09, local12
1148c     5B B1 02 F6 | 	mov	local06, local09
11490     02 B0 66 F0 | 	shl	local06, #2
11494     E7 A6 02 F6 | 	mov	local01, fp
11498     E7 B0 02 F1 | 	add	local06, fp
1149c     58 C5 62 FC | 	wrlong	local16, local06
114a0     5E C1 02 F6 | 	mov	local14, local12
114a4     01 C0 06 F1 | 	add	local14, #1
114a8     02 C0 66 F0 | 	shl	local14, #2
114ac     E7 C2 02 F6 | 	mov	local15, fp
114b0     E7 C0 02 F1 | 	add	local14, fp
114b4     60 AF 62 FC | 	wrlong	local05, local14
114b8     01 BA 66 F6 | 	neg	local11, #1
114bc     1C CE 85 F1 | 	sub	fp, #28
114c0                 | LR__1457
114c0     01 BC 06 F1 | 	add	local12, #1
114c4     4C FF 9F FD | 	jmp	#LR__1456
114c8                 | LR__1458
114c8                 | ' if not swapped then exit for
114c8     5D C5 22 F6 | 	not	local16, local11
114cc     00 C4 0E F2 | 	cmp	local16, #0 wz
114d0     01 AC 06 A1 |  if_e	add	local04, #1
114d4     20 FF 9F AD |  if_e	jmp	#LR__1455
114d8                 | LR__1459
114d8                 | ' for i=0 to n-1
114d8     00 AC 06 F6 | 	mov	local04, #0
114dc                 | LR__1460
114dc     5A AD 52 F2 | 	cmps	local04, local08 wc
114e0     8C 00 90 3D |  if_ae	jmp	#LR__1462
114e4                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
114e4     00 92 06 F6 | 	mov	arg01, #0
114e8     3C 8C B1 FD | 	call	#__system___getiolock_0622
114ec     3D 93 02 F6 | 	mov	arg01, result1
114f0     B0 36 B1 FD | 	call	#__system___lockmem
114f4     56 A9 02 F6 | 	mov	local02, local04
114f8     02 A8 66 F0 | 	shl	local02, #2
114fc     E7 C0 02 F6 | 	mov	local14, fp
11500     1C C0 06 F1 | 	add	local14, #28
11504     60 A9 02 F1 | 	add	local02, local14
11508     54 95 02 FB | 	rdlong	arg02, local02
1150c     00 92 06 F6 | 	mov	arg01, #0
11510     00 96 06 F6 | 	mov	arg03, #0
11514     80 43 B1 FD | 	call	#__system___basic_print_string
11518     00 92 06 F6 | 	mov	arg01, #0
1151c     08 8C B1 FD | 	call	#__system___getiolock_0622
11520     3D 01 68 FC | 	wrlong	#0, result1
11524     40 AA 06 F1 | 	add	local03, #64
11528     55 93 02 F6 | 	mov	arg01, local03
1152c     30 16 B1 FD | 	call	#_hg010b_spin2_setcursorx
11530     00 AB 56 F2 | 	cmps	local03, #256 wc
11534     30 00 90 CD |  if_b	jmp	#LR__1461
11538     00 AA 06 F6 | 	mov	local03, #0
1153c     00 92 06 F6 | 	mov	arg01, #0
11540     E4 8B B1 FD | 	call	#__system___getiolock_0622
11544     3D 93 02 F6 | 	mov	arg01, result1
11548     58 36 B1 FD | 	call	#__system___lockmem
1154c     00 92 06 F6 | 	mov	arg01, #0
11550     0A 94 06 F6 | 	mov	arg02, #10
11554     00 96 06 F6 | 	mov	arg03, #0
11558     E4 42 B1 FD | 	call	#__system___basic_print_char
1155c     00 92 06 F6 | 	mov	arg01, #0
11560     C4 8B B1 FD | 	call	#__system___getiolock_0622
11564     3D 01 68 FC | 	wrlong	#0, result1
11568                 | LR__1461
11568     01 AC 06 F1 | 	add	local04, #1
1156c     6C FF 9F FD | 	jmp	#LR__1460
11570                 | LR__1462
11570                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11570     80 B4 56 F2 | 	cmps	local08, #128 wc
11574     40 00 90 CD |  if_b	jmp	#LR__1463
11578     00 92 06 F6 | 	mov	arg01, #0
1157c     A8 8B B1 FD | 	call	#__system___getiolock_0622
11580     3D 93 02 F6 | 	mov	arg01, result1
11584     1C 36 B1 FD | 	call	#__system___lockmem
11588     98 01 00 FF 
1158c     93 94 06 F6 | 	mov	arg02, ##@LR__6005
11590     00 92 06 F6 | 	mov	arg01, #0
11594     00 96 06 F6 | 	mov	arg03, #0
11598     FC 42 B1 FD | 	call	#__system___basic_print_string
1159c     00 92 06 F6 | 	mov	arg01, #0
115a0     0A 94 06 F6 | 	mov	arg02, #10
115a4     00 96 06 F6 | 	mov	arg03, #0
115a8     94 42 B1 FD | 	call	#__system___basic_print_char
115ac     00 92 06 F6 | 	mov	arg01, #0
115b0     74 8B B1 FD | 	call	#__system___getiolock_0622
115b4     3D 01 68 FC | 	wrlong	#0, result1
115b8                 | LR__1463
115b8                 | ' print
115b8     00 92 06 F6 | 	mov	arg01, #0
115bc     68 8B B1 FD | 	call	#__system___getiolock_0622
115c0     3D 93 02 F6 | 	mov	arg01, result1
115c4     DC 35 B1 FD | 	call	#__system___lockmem
115c8     00 92 06 F6 | 	mov	arg01, #0
115cc     0A 94 06 F6 | 	mov	arg02, #10
115d0     00 96 06 F6 | 	mov	arg03, #0
115d4     68 42 B1 FD | 	call	#__system___basic_print_char
115d8     00 92 06 F6 | 	mov	arg01, #0
115dc     48 8B B1 FD | 	call	#__system___getiolock_0622
115e0     3D 01 68 FC | 	wrlong	#0, result1
115e4     E7 F0 03 F6 | 	mov	ptra, fp
115e8     F2 00 A0 FD | 	call	#popregs_
115ec                 | _do_dir_ret
115ec     2D 00 64 FD | 	ret
115f0                 | 
115f0                 | ' 
115f0                 | ' '-------------------- dpeek
115f0                 | ' 
115f0                 | ' sub do_dpeek
115f0                 | _do_dpeek
115f0     01 CA 05 F6 | 	mov	COUNT_, #1
115f4     E8 00 A0 FD | 	call	#pushregs_
115f8     14 F0 07 F1 | 	add	ptra, #20
115fc     70 C0 BF FD | 	call	#_pop
11600     E7 7A 62 FC | 	wrlong	result1, fp
11604     04 CE 05 F1 | 	add	fp, #4
11608     E7 7C 62 FC | 	wrlong	result2, fp
1160c     04 CE 05 F1 | 	add	fp, #4
11610     E7 7E 62 FC | 	wrlong	result3, fp
11614     08 CE 85 F1 | 	sub	fp, #8
11618     E7 92 02 F6 | 	mov	arg01, fp
1161c     2C C2 BF FD | 	call	#_converttoint
11620     3D 93 02 F6 | 	mov	arg01, result1
11624                 | ' 
11624                 | ' t1=pop()
11624                 | ' a=converttoint(t1)
11624                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
11624     00 04 00 FF 
11628     00 92 16 F2 | 	cmp	arg01, ##524288 wc
1162c     49 A7 E2 CA |  if_b	rdword	local01, arg01
11630     08 00 90 CD |  if_b	jmp	#LR__1470
11634     48 FB B0 FD | 	call	#_psdpeek
11638     3D A7 02 F6 | 	mov	local01, result1
1163c                 | LR__1470
1163c     08 CE 05 F1 | 	add	fp, #8
11640     E7 3A 68 FC | 	wrlong	#29, fp
11644     08 CE 85 F1 | 	sub	fp, #8
11648     E7 A6 62 FC | 	wrlong	local01, fp
1164c     E7 92 02 F6 | 	mov	arg01, fp
11650     AC C0 BF FD | 	call	#_push
11654     E7 F0 03 F6 | 	mov	ptra, fp
11658     F2 00 A0 FD | 	call	#popregs_
1165c                 | _do_dpeek_ret
1165c     2D 00 64 FD | 	ret
11660                 | 
11660                 | ' 
11660                 | ' '-------------------- dpoke
11660                 | ' 
11660                 | ' sub do_dpoke
11660                 | _do_dpoke
11660     02 CA 05 F6 | 	mov	COUNT_, #2
11664     E8 00 A0 FD | 	call	#pushregs_
11668     20 F0 07 F1 | 	add	ptra, #32
1166c     00 C0 BF FD | 	call	#_pop
11670     3D 95 02 F6 | 	mov	arg02, result1
11674     3E 93 02 F6 | 	mov	arg01, result2
11678     3F A7 02 F6 | 	mov	local01, result3
1167c     E7 94 62 FC | 	wrlong	arg02, fp
11680     04 CE 05 F1 | 	add	fp, #4
11684     E7 92 62 FC | 	wrlong	arg01, fp
11688     04 CE 05 F1 | 	add	fp, #4
1168c     E7 A6 62 FC | 	wrlong	local01, fp
11690     08 CE 85 F1 | 	sub	fp, #8
11694     D8 BF BF FD | 	call	#_pop
11698     3F A7 02 F6 | 	mov	local01, result3
1169c     0C CE 05 F1 | 	add	fp, #12
116a0     E7 7A 62 FC | 	wrlong	result1, fp
116a4     04 CE 05 F1 | 	add	fp, #4
116a8     E7 7C 62 FC | 	wrlong	result2, fp
116ac     04 CE 05 F1 | 	add	fp, #4
116b0     E7 A6 62 FC | 	wrlong	local01, fp
116b4     08 CE 85 F1 | 	sub	fp, #8
116b8     E7 92 02 F6 | 	mov	arg01, fp
116bc     0C CE 85 F1 | 	sub	fp, #12
116c0     88 C1 BF FD | 	call	#_converttoint
116c4     3D A7 02 F6 | 	mov	local01, result1
116c8     E7 92 02 F6 | 	mov	arg01, fp
116cc     7C C1 BF FD | 	call	#_converttoint
116d0     3D A9 02 F6 | 	mov	local02, result1
116d4                 | ' 
116d4                 | ' t1=pop() 'value
116d4                 | ' t2=pop() 
116d4                 | ' a=converttoint(t2) : v=converttoint(t1)
116d4                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
116d4     00 04 00 FF 
116d8     00 A6 16 F2 | 	cmp	local01, ##524288 wc
116dc     53 A9 52 CC |  if_b	wrword	local02, local01
116e0     53 93 02 36 |  if_ae	mov	arg01, local01
116e4     54 95 02 36 |  if_ae	mov	arg02, local02
116e8     74 F9 B0 3D |  if_ae	call	#_psdpoke
116ec     E7 F0 03 F6 | 	mov	ptra, fp
116f0     F2 00 A0 FD | 	call	#popregs_
116f4                 | _do_dpoke_ret
116f4     2D 00 64 FD | 	ret
116f8                 | 
116f8                 | ' '-------------------- draw
116f8                 | ' 
116f8                 | ' sub do_draw
116f8                 | _do_draw
116f8     02 CA 05 F6 | 	mov	COUNT_, #2
116fc     E8 00 A0 FD | 	call	#pushregs_
11700     20 F0 07 F1 | 	add	ptra, #32
11704     68 BF BF FD | 	call	#_pop
11708     3D 99 02 F6 | 	mov	arg04, result1
1170c     3E 97 02 F6 | 	mov	arg03, result2
11710     3F 9B 02 F6 | 	mov	arg05, result3
11714     0C CE 05 F1 | 	add	fp, #12
11718     E7 98 62 FC | 	wrlong	arg04, fp
1171c     04 CE 05 F1 | 	add	fp, #4
11720     E7 96 62 FC | 	wrlong	arg03, fp
11724     04 CE 05 F1 | 	add	fp, #4
11728     E7 9A 62 FC | 	wrlong	arg05, fp
1172c     14 CE 85 F1 | 	sub	fp, #20
11730     3C BF BF FD | 	call	#_pop
11734     3F 99 02 F6 | 	mov	arg04, result3
11738     E7 7A 62 FC | 	wrlong	result1, fp
1173c     04 CE 05 F1 | 	add	fp, #4
11740     E7 7C 62 FC | 	wrlong	result2, fp
11744     04 CE 05 F1 | 	add	fp, #4
11748     E7 98 62 FC | 	wrlong	arg04, fp
1174c     08 CE 85 F1 | 	sub	fp, #8
11750     E7 92 02 F6 | 	mov	arg01, fp
11754     F4 C0 BF FD | 	call	#_converttoint
11758     3D A7 02 F6 | 	mov	local01, result1
1175c     E7 92 02 F6 | 	mov	arg01, fp
11760     0C 92 06 F1 | 	add	arg01, #12
11764     E4 C0 BF FD | 	call	#_converttoint
11768     3D A9 02 F6 | 	mov	local02, result1
1176c     38 00 00 FF 
11770     D0 65 06 F1 | 	add	objptr, ##29136
11774     32 93 02 FB | 	rdlong	arg01, objptr
11778     04 64 06 F1 | 	add	objptr, #4
1177c     32 95 02 FB | 	rdlong	arg02, objptr
11780     08 64 86 F1 | 	sub	objptr, #8
11784     32 9B 02 FB | 	rdlong	arg05, objptr
11788     38 00 00 FF 
1178c     CC 65 86 F1 | 	sub	objptr, ##29132
11790     53 97 02 F6 | 	mov	arg03, local01
11794     54 99 02 F6 | 	mov	arg04, local02
11798     28 0A B1 FD | 	call	#_hg010b_spin2_draw
1179c     38 00 00 FF 
117a0     D0 65 06 F1 | 	add	objptr, ##29136
117a4     32 A7 62 FC | 	wrlong	local01, objptr
117a8     04 64 06 F1 | 	add	objptr, #4
117ac     32 A9 62 FC | 	wrlong	local02, objptr
117b0     38 00 00 FF 
117b4     D4 65 86 F1 | 	sub	objptr, ##29140
117b8     E7 F0 03 F6 | 	mov	ptra, fp
117bc     F2 00 A0 FD | 	call	#popregs_
117c0                 | _do_draw_ret
117c0     2D 00 64 FD | 	ret
117c4                 | 
117c4                 | ' 
117c4                 | ' '-------------------- else
117c4                 | ' 
117c4                 | ' sub do_else
117c4                 | _do_else
117c4     4C 00 00 FF 
117c8     20 64 06 F1 | 	add	objptr, ##38944
117cc     32 81 02 FB | 	rdlong	_var01, objptr
117d0     01 80 86 F1 | 	sub	_var01, #1
117d4     04 64 06 F1 | 	add	objptr, #4
117d8     32 81 62 FC | 	wrlong	_var01, objptr
117dc     4C 00 00 FF 
117e0     24 64 86 F1 | 	sub	objptr, ##38948
117e4                 | _do_else_ret
117e4     2D 00 64 FD | 	ret
117e8                 | 
117e8                 | ' 
117e8                 | ' '-------------------- end
117e8                 | ' 
117e8                 | ' sub do_end
117e8                 | _do_end
117e8     4C 00 00 FF 
117ec     20 64 06 F1 | 	add	objptr, ##38944
117f0     32 81 02 FB | 	rdlong	_var01, objptr
117f4     01 80 86 F1 | 	sub	_var01, #1
117f8     04 64 06 F1 | 	add	objptr, #4
117fc     32 81 62 FC | 	wrlong	_var01, objptr
11800     06 00 00 FF 
11804     38 64 06 F1 | 	add	objptr, ##3128
11808     FF FF BF FF 
1180c     32 FF 6B FC | 	wrlong	##2147483647, objptr
11810     52 00 00 FF 
11814     5C 64 86 F1 | 	sub	objptr, ##42076
11818                 | _do_end_ret
11818     2D 00 64 FD | 	ret
1181c                 | 
1181c                 | ' 
1181c                 | ' '-------------------- enter
1181c                 | ' 
1181c                 | ' sub do_enter
1181c                 | _do_enter
1181c     02 00 00 FF 
11820     D2 92 06 F6 | 	mov	arg01, ##1234
11824     A4 2D B0 FD | 	call	#_do_load
11828                 | _do_enter_ret
11828     2D 00 64 FD | 	ret
1182c                 | 
1182c                 | ' 
1182c                 | ' '------------------- error processing
1182c                 | ' 
1182c                 | ' sub do_error
1182c                 | _do_error
1182c     01 CA 05 F6 | 	mov	COUNT_, #1
11830     E8 00 A0 FD | 	call	#pushregs_
11834     4C 00 00 FF 
11838     24 64 06 F1 | 	add	objptr, ##38948
1183c     32 99 02 FB | 	rdlong	arg04, objptr
11840     4C 97 02 F6 | 	mov	arg03, arg04
11844     01 96 66 F0 | 	shl	arg03, #1
11848     4C 97 02 F1 | 	add	arg03, arg04
1184c     02 96 66 F0 | 	shl	arg03, #2
11850     03 00 00 FF 
11854     04 64 86 F1 | 	sub	objptr, ##1540
11858     32 97 02 F1 | 	add	arg03, objptr
1185c     4B A7 02 FB | 	rdlong	local01, arg03
11860                 | ' r=compiledline(lineptr_e).result.uresult
11860                 | ' print "Error ";r;": ";errors$(r)
11860     00 92 06 F6 | 	mov	arg01, #0
11864     49 00 00 FF 
11868     20 64 86 F1 | 	sub	objptr, ##37408
1186c     B8 88 B1 FD | 	call	#__system___getiolock_0622
11870     3D 93 02 F6 | 	mov	arg01, result1
11874     2C 33 B1 FD | 	call	#__system___lockmem
11878     98 01 00 FF 
1187c     C5 94 06 F6 | 	mov	arg02, ##@LR__6006
11880     00 92 06 F6 | 	mov	arg01, #0
11884     00 96 06 F6 | 	mov	arg03, #0
11888     0C 40 B1 FD | 	call	#__system___basic_print_string
1188c     00 92 06 F6 | 	mov	arg01, #0
11890     53 95 02 F6 | 	mov	arg02, local01
11894     00 96 06 F6 | 	mov	arg03, #0
11898     0A 98 06 F6 | 	mov	arg04, #10
1189c     7C 40 B1 FD | 	call	#__system___basic_print_unsigned
118a0     98 01 00 FF 
118a4     CC 94 06 F6 | 	mov	arg02, ##@LR__6007
118a8     00 92 06 F6 | 	mov	arg01, #0
118ac     00 96 06 F6 | 	mov	arg03, #0
118b0     E4 3F B1 FD | 	call	#__system___basic_print_string
118b4     02 A6 66 F0 | 	shl	local01, #2
118b8     32 99 02 F6 | 	mov	arg04, objptr
118bc     47 00 00 FF 
118c0     20 98 06 F1 | 	add	arg04, ##36384
118c4     4C A7 02 F1 | 	add	local01, arg04
118c8     53 95 02 FB | 	rdlong	arg02, local01
118cc     00 92 06 F6 | 	mov	arg01, #0
118d0     00 96 06 F6 | 	mov	arg03, #0
118d4     C0 3F B1 FD | 	call	#__system___basic_print_string
118d8     00 92 06 F6 | 	mov	arg01, #0
118dc     0A 94 06 F6 | 	mov	arg02, #10
118e0     00 96 06 F6 | 	mov	arg03, #0
118e4     58 3F B1 FD | 	call	#__system___basic_print_char
118e8     00 92 06 F6 | 	mov	arg01, #0
118ec     38 88 B1 FD | 	call	#__system___getiolock_0622
118f0     3D 01 68 FC | 	wrlong	#0, result1
118f4     E7 F0 03 F6 | 	mov	ptra, fp
118f8     F2 00 A0 FD | 	call	#popregs_
118fc                 | _do_error_ret
118fc     2D 00 64 FD | 	ret
11900                 | 
11900                 | ' 
11900                 | ' '-------------------- fcircle
11900                 | ' 
11900                 | ' sub do_fcircle
11900                 | _do_fcircle
11900     02 CA 05 F6 | 	mov	COUNT_, #2
11904     E8 00 A0 FD | 	call	#pushregs_
11908     24 F0 07 F1 | 	add	ptra, #36
1190c     60 BD BF FD | 	call	#_pop
11910     3D 95 02 F6 | 	mov	arg02, result1
11914     3E 99 02 F6 | 	mov	arg04, result2
11918     3F 97 02 F6 | 	mov	arg03, result3
1191c     18 CE 05 F1 | 	add	fp, #24
11920     E7 94 62 FC | 	wrlong	arg02, fp
11924     04 CE 05 F1 | 	add	fp, #4
11928     E7 98 62 FC | 	wrlong	arg04, fp
1192c     04 CE 05 F1 | 	add	fp, #4
11930     E7 96 62 FC | 	wrlong	arg03, fp
11934     20 CE 85 F1 | 	sub	fp, #32
11938     34 BD BF FD | 	call	#_pop
1193c     3D 95 02 F6 | 	mov	arg02, result1
11940     3E 99 02 F6 | 	mov	arg04, result2
11944     3F 97 02 F6 | 	mov	arg03, result3
11948     0C CE 05 F1 | 	add	fp, #12
1194c     E7 94 62 FC | 	wrlong	arg02, fp
11950     04 CE 05 F1 | 	add	fp, #4
11954     E7 98 62 FC | 	wrlong	arg04, fp
11958     04 CE 05 F1 | 	add	fp, #4
1195c     E7 96 62 FC | 	wrlong	arg03, fp
11960     14 CE 85 F1 | 	sub	fp, #20
11964     08 BD BF FD | 	call	#_pop
11968     3F 95 02 F6 | 	mov	arg02, result3
1196c     E7 7A 62 FC | 	wrlong	result1, fp
11970     04 CE 05 F1 | 	add	fp, #4
11974     E7 7C 62 FC | 	wrlong	result2, fp
11978     04 CE 05 F1 | 	add	fp, #4
1197c     E7 94 62 FC | 	wrlong	arg02, fp
11980     08 CE 85 F1 | 	sub	fp, #8
11984     E7 92 02 F6 | 	mov	arg01, fp
11988     C0 BE BF FD | 	call	#_converttoint
1198c     3D A7 02 F6 | 	mov	local01, result1
11990     E7 92 02 F6 | 	mov	arg01, fp
11994     0C 92 06 F1 | 	add	arg01, #12
11998     B0 BE BF FD | 	call	#_converttoint
1199c     3D A9 02 F6 | 	mov	local02, result1
119a0     E7 92 02 F6 | 	mov	arg01, fp
119a4     18 92 06 F1 | 	add	arg01, #24
119a8     A0 BE BF FD | 	call	#_converttoint
119ac     3D 97 02 F6 | 	mov	arg03, result1
119b0     38 00 00 FF 
119b4     CC 65 06 F1 | 	add	objptr, ##29132
119b8     32 99 02 FB | 	rdlong	arg04, objptr
119bc     38 00 00 FF 
119c0     CC 65 86 F1 | 	sub	objptr, ##29132
119c4     53 93 02 F6 | 	mov	arg01, local01
119c8     54 95 02 F6 | 	mov	arg02, local02
119cc     78 0C B1 FD | 	call	#_hg010b_spin2_fcircle
119d0     E7 F0 03 F6 | 	mov	ptra, fp
119d4     F2 00 A0 FD | 	call	#popregs_
119d8                 | _do_fcircle_ret
119d8     2D 00 64 FD | 	ret
119dc                 | 
119dc                 | ' 
119dc                 | ' '-------------------- fill
119dc                 | ' 
119dc                 | ' sub do_fill
119dc                 | _do_fill
119dc     03 CA 05 F6 | 	mov	COUNT_, #3
119e0     E8 00 A0 FD | 	call	#pushregs_
119e4     30 F0 07 F1 | 	add	ptra, #48
119e8     84 BC BF FD | 	call	#_pop
119ec     3D 97 02 F6 | 	mov	arg03, result1
119f0     3E 95 02 F6 | 	mov	arg02, result2
119f4     3F 99 02 F6 | 	mov	arg04, result3
119f8     24 CE 05 F1 | 	add	fp, #36
119fc     E7 96 62 FC | 	wrlong	arg03, fp
11a00     04 CE 05 F1 | 	add	fp, #4
11a04     E7 94 62 FC | 	wrlong	arg02, fp
11a08     04 CE 05 F1 | 	add	fp, #4
11a0c     E7 98 62 FC | 	wrlong	arg04, fp
11a10     2C CE 85 F1 | 	sub	fp, #44
11a14     58 BC BF FD | 	call	#_pop
11a18     3D 97 02 F6 | 	mov	arg03, result1
11a1c     3E 95 02 F6 | 	mov	arg02, result2
11a20     3F 99 02 F6 | 	mov	arg04, result3
11a24     18 CE 05 F1 | 	add	fp, #24
11a28     E7 96 62 FC | 	wrlong	arg03, fp
11a2c     04 CE 05 F1 | 	add	fp, #4
11a30     E7 94 62 FC | 	wrlong	arg02, fp
11a34     04 CE 05 F1 | 	add	fp, #4
11a38     E7 98 62 FC | 	wrlong	arg04, fp
11a3c     20 CE 85 F1 | 	sub	fp, #32
11a40     2C BC BF FD | 	call	#_pop
11a44     3D 97 02 F6 | 	mov	arg03, result1
11a48     3E 95 02 F6 | 	mov	arg02, result2
11a4c     3F 99 02 F6 | 	mov	arg04, result3
11a50     0C CE 05 F1 | 	add	fp, #12
11a54     E7 96 62 FC | 	wrlong	arg03, fp
11a58     04 CE 05 F1 | 	add	fp, #4
11a5c     E7 94 62 FC | 	wrlong	arg02, fp
11a60     04 CE 05 F1 | 	add	fp, #4
11a64     E7 98 62 FC | 	wrlong	arg04, fp
11a68     14 CE 85 F1 | 	sub	fp, #20
11a6c     00 BC BF FD | 	call	#_pop
11a70     3F 97 02 F6 | 	mov	arg03, result3
11a74     E7 7A 62 FC | 	wrlong	result1, fp
11a78     04 CE 05 F1 | 	add	fp, #4
11a7c     E7 7C 62 FC | 	wrlong	result2, fp
11a80     04 CE 05 F1 | 	add	fp, #4
11a84     E7 96 62 FC | 	wrlong	arg03, fp
11a88     08 CE 85 F1 | 	sub	fp, #8
11a8c     E7 92 02 F6 | 	mov	arg01, fp
11a90     B8 BD BF FD | 	call	#_converttoint
11a94     3D A7 02 F6 | 	mov	local01, result1
11a98     E7 92 02 F6 | 	mov	arg01, fp
11a9c     0C 92 06 F1 | 	add	arg01, #12
11aa0     A8 BD BF FD | 	call	#_converttoint
11aa4     3D A9 02 F6 | 	mov	local02, result1
11aa8     E7 92 02 F6 | 	mov	arg01, fp
11aac     18 92 06 F1 | 	add	arg01, #24
11ab0     98 BD BF FD | 	call	#_converttoint
11ab4     3D AB 02 F6 | 	mov	local03, result1
11ab8     E7 92 02 F6 | 	mov	arg01, fp
11abc     24 92 06 F1 | 	add	arg01, #36
11ac0     88 BD BF FD | 	call	#_converttoint
11ac4     3D 99 02 F6 | 	mov	arg04, result1
11ac8     53 93 02 F6 | 	mov	arg01, local01
11acc     54 95 02 F6 | 	mov	arg02, local02
11ad0     55 97 02 F6 | 	mov	arg03, local03
11ad4     DC 08 B1 FD | 	call	#_hg010b_spin2_fill
11ad8     E7 F0 03 F6 | 	mov	ptra, fp
11adc     F2 00 A0 FD | 	call	#popregs_
11ae0                 | _do_fill_ret
11ae0     2D 00 64 FD | 	ret
11ae4                 | 
11ae4                 | ' 
11ae4                 | ' '-------------------- findfirst
11ae4                 | ' 
11ae4                 | ' sub do_findfirst
11ae4                 | _do_findfirst
11ae4     04 CA 05 F6 | 	mov	COUNT_, #4
11ae8     E8 00 A0 FD | 	call	#pushregs_
11aec     1C F0 07 F1 | 	add	ptra, #28
11af0     4C 00 00 FF 
11af4     24 64 06 F1 | 	add	objptr, ##38948
11af8     32 97 02 FB | 	rdlong	arg03, objptr
11afc     4B 95 02 F6 | 	mov	arg02, arg03
11b00     01 94 66 F0 | 	shl	arg02, #1
11b04     4B 95 02 F1 | 	add	arg02, arg03
11b08     02 94 66 F0 | 	shl	arg02, #2
11b0c     03 00 00 FF 
11b10     04 64 86 F1 | 	sub	objptr, ##1540
11b14     32 95 02 F1 | 	add	arg02, objptr
11b18     4A A7 02 FB | 	rdlong	local01, arg02
11b1c                 | ' 
11b1c                 | ' numpar=compiledline(lineptr_e).result.uresult
11b1c                 | ' if numpar=2 then
11b1c     02 A6 0E F2 | 	cmp	local01, #2 wz
11b20     49 00 00 FF 
11b24     20 64 86 F1 | 	sub	objptr, ##37408
11b28     48 01 90 5D |  if_ne	jmp	#LR__1484
11b2c     40 BB BF FD | 	call	#_pop
11b30     3F 97 02 F6 | 	mov	arg03, result3
11b34     08 CE 05 F1 | 	add	fp, #8
11b38     E7 7A 62 FC | 	wrlong	result1, fp
11b3c     04 CE 05 F1 | 	add	fp, #4
11b40     E7 7C 62 FC | 	wrlong	result2, fp
11b44     04 CE 05 F1 | 	add	fp, #4
11b48     E7 96 62 FC | 	wrlong	arg03, fp
11b4c                 | '   t1=pop()
11b4c                 | '   if t1.result_type=result_string2 then 
11b4c     10 CE 85 F1 | 	sub	fp, #16
11b50     2B 96 0E F2 | 	cmp	arg03, #43 wz
11b54     18 00 90 5D |  if_ne	jmp	#LR__1480
11b58     08 CE 05 F1 | 	add	fp, #8
11b5c     E7 92 02 FB | 	rdlong	arg01, fp
11b60     08 CE 85 F1 | 	sub	fp, #8
11b64     78 BC BF FD | 	call	#_convertstring
11b68     3D A9 02 F6 | 	mov	local02, result1
11b6c     60 00 90 FD | 	jmp	#LR__1482
11b70                 | LR__1480
11b70     10 CE 05 F1 | 	add	fp, #16
11b74     E7 96 02 FB | 	rdlong	arg03, fp
11b78     10 CE 85 F1 | 	sub	fp, #16
11b7c     1F 96 0E F2 | 	cmp	arg03, #31 wz
11b80     08 CE 05 A1 |  if_e	add	fp, #8
11b84     E7 A8 02 AB |  if_e	rdlong	local02, fp
11b88     08 CE 85 A1 |  if_e	sub	fp, #8
11b8c     40 00 90 AD |  if_e	jmp	#LR__1481
11b90                 | '     print "findfirst: "; : printerror(30) : return  
11b90     00 92 06 F6 | 	mov	arg01, #0
11b94     90 85 B1 FD | 	call	#__system___getiolock_0622
11b98     3D 93 02 F6 | 	mov	arg01, result1
11b9c     04 30 B1 FD | 	call	#__system___lockmem
11ba0     98 01 00 FF 
11ba4     CF 94 06 F6 | 	mov	arg02, ##@LR__6008
11ba8     00 92 06 F6 | 	mov	arg01, #0
11bac     00 96 06 F6 | 	mov	arg03, #0
11bb0     E4 3C B1 FD | 	call	#__system___basic_print_string
11bb4     00 92 06 F6 | 	mov	arg01, #0
11bb8     6C 85 B1 FD | 	call	#__system___getiolock_0622
11bbc     3D 01 68 FC | 	wrlong	#0, result1
11bc0     1E 92 06 F6 | 	mov	arg01, #30
11bc4     00 94 06 F6 | 	mov	arg02, #0
11bc8     B4 F2 B0 FD | 	call	#_printerror
11bcc     08 02 90 FD | 	jmp	#LR__1492
11bd0                 | LR__1481
11bd0                 | LR__1482
11bd0     9C BA BF FD | 	call	#_pop
11bd4     3F 97 02 F6 | 	mov	arg03, result3
11bd8     08 CE 05 F1 | 	add	fp, #8
11bdc     E7 7A 62 FC | 	wrlong	result1, fp
11be0     04 CE 05 F1 | 	add	fp, #4
11be4     E7 7C 62 FC | 	wrlong	result2, fp
11be8     04 CE 05 F1 | 	add	fp, #4
11bec     E7 96 62 FC | 	wrlong	arg03, fp
11bf0                 | '   t1=pop()
11bf0                 | '   if t1.result_type=result_string2 then 
11bf0     10 CE 85 F1 | 	sub	fp, #16
11bf4     2B 96 0E F2 | 	cmp	arg03, #43 wz
11bf8     18 00 90 5D |  if_ne	jmp	#LR__1483
11bfc     08 CE 05 F1 | 	add	fp, #8
11c00     E7 92 02 FB | 	rdlong	arg01, fp
11c04     08 CE 85 F1 | 	sub	fp, #8
11c08     D4 BB BF FD | 	call	#_convertstring
11c0c     3D AB 02 F6 | 	mov	local03, result1
11c10     58 01 90 FD | 	jmp	#LR__1490
11c14                 | LR__1483
11c14     10 CE 05 F1 | 	add	fp, #16
11c18     E7 A6 02 FB | 	rdlong	local01, fp
11c1c     10 CE 85 F1 | 	sub	fp, #16
11c20     1F A6 0E F2 | 	cmp	local01, #31 wz
11c24     08 CE 05 A1 |  if_e	add	fp, #8
11c28     E7 AA 02 AB |  if_e	rdlong	local03, fp
11c2c     08 CE 85 A1 |  if_e	sub	fp, #8
11c30     38 01 90 AD |  if_e	jmp	#LR__1490
11c34                 | '     print "findfirst: "; : printerror(30) : return  
11c34     00 92 06 F6 | 	mov	arg01, #0
11c38     EC 84 B1 FD | 	call	#__system___getiolock_0622
11c3c     3D 93 02 F6 | 	mov	arg01, result1
11c40     60 2F B1 FD | 	call	#__system___lockmem
11c44     98 01 00 FF 
11c48     DB 94 06 F6 | 	mov	arg02, ##@LR__6009
11c4c     00 92 06 F6 | 	mov	arg01, #0
11c50     00 96 06 F6 | 	mov	arg03, #0
11c54     40 3C B1 FD | 	call	#__system___basic_print_string
11c58     00 92 06 F6 | 	mov	arg01, #0
11c5c     C8 84 B1 FD | 	call	#__system___getiolock_0622
11c60     3D 01 68 FC | 	wrlong	#0, result1
11c64     1E 92 06 F6 | 	mov	arg01, #30
11c68     00 94 06 F6 | 	mov	arg02, #0
11c6c     10 F2 B0 FD | 	call	#_printerror
11c70     64 01 90 FD | 	jmp	#LR__1492
11c74                 | LR__1484
11c74     01 A6 0E F2 | 	cmp	local01, #1 wz
11c78     B0 00 90 5D |  if_ne	jmp	#LR__1488
11c7c     F0 B9 BF FD | 	call	#_pop
11c80     3F 97 02 F6 | 	mov	arg03, result3
11c84     08 CE 05 F1 | 	add	fp, #8
11c88     E7 7A 62 FC | 	wrlong	result1, fp
11c8c     04 CE 05 F1 | 	add	fp, #4
11c90     E7 7C 62 FC | 	wrlong	result2, fp
11c94     04 CE 05 F1 | 	add	fp, #4
11c98     E7 96 62 FC | 	wrlong	arg03, fp
11c9c                 | '   t1=pop()
11c9c                 | '   if t1.result_type=result_string2 then 
11c9c     10 CE 85 F1 | 	sub	fp, #16
11ca0     2B 96 0E F2 | 	cmp	arg03, #43 wz
11ca4     18 00 90 5D |  if_ne	jmp	#LR__1485
11ca8     08 CE 05 F1 | 	add	fp, #8
11cac     E7 92 02 FB | 	rdlong	arg01, fp
11cb0     08 CE 85 F1 | 	sub	fp, #8
11cb4     28 BB BF FD | 	call	#_convertstring
11cb8     3D AB 02 F6 | 	mov	local03, result1
11cbc     60 00 90 FD | 	jmp	#LR__1487
11cc0                 | LR__1485
11cc0     10 CE 05 F1 | 	add	fp, #16
11cc4     E7 96 02 FB | 	rdlong	arg03, fp
11cc8     10 CE 85 F1 | 	sub	fp, #16
11ccc     1F 96 0E F2 | 	cmp	arg03, #31 wz
11cd0     08 CE 05 A1 |  if_e	add	fp, #8
11cd4     E7 AA 02 AB |  if_e	rdlong	local03, fp
11cd8     08 CE 85 A1 |  if_e	sub	fp, #8
11cdc     40 00 90 AD |  if_e	jmp	#LR__1486
11ce0                 | '     print "findfirst: "; : printerror(30) : return  
11ce0     00 92 06 F6 | 	mov	arg01, #0
11ce4     40 84 B1 FD | 	call	#__system___getiolock_0622
11ce8     3D 93 02 F6 | 	mov	arg01, result1
11cec     B4 2E B1 FD | 	call	#__system___lockmem
11cf0     98 01 00 FF 
11cf4     E7 94 06 F6 | 	mov	arg02, ##@LR__6010
11cf8     00 92 06 F6 | 	mov	arg01, #0
11cfc     00 96 06 F6 | 	mov	arg03, #0
11d00     94 3B B1 FD | 	call	#__system___basic_print_string
11d04     00 92 06 F6 | 	mov	arg01, #0
11d08     1C 84 B1 FD | 	call	#__system___getiolock_0622
11d0c     3D 01 68 FC | 	wrlong	#0, result1
11d10     1E 92 06 F6 | 	mov	arg01, #30
11d14     00 94 06 F6 | 	mov	arg02, #0
11d18     64 F1 B0 FD | 	call	#_printerror
11d1c     B8 00 90 FD | 	jmp	#LR__1492
11d20                 | LR__1486
11d20                 | LR__1487
11d20     98 01 00 FF 
11d24     F3 A8 06 F6 | 	mov	local02, ##@LR__6011
11d28     40 00 90 FD | 	jmp	#LR__1489
11d2c                 | LR__1488
11d2c                 | '   print "findfirst: "; : printerror(39) : return     
11d2c     00 92 06 F6 | 	mov	arg01, #0
11d30     F4 83 B1 FD | 	call	#__system___getiolock_0622
11d34     3D 93 02 F6 | 	mov	arg01, result1
11d38     68 2E B1 FD | 	call	#__system___lockmem
11d3c     98 01 00 FF 
11d40     F4 94 06 F6 | 	mov	arg02, ##@LR__6012
11d44     00 92 06 F6 | 	mov	arg01, #0
11d48     00 96 06 F6 | 	mov	arg03, #0
11d4c     48 3B B1 FD | 	call	#__system___basic_print_string
11d50     00 92 06 F6 | 	mov	arg01, #0
11d54     D0 83 B1 FD | 	call	#__system___getiolock_0622
11d58     3D 01 68 FC | 	wrlong	#0, result1
11d5c     27 92 06 F6 | 	mov	arg01, #39
11d60     00 94 06 F6 | 	mov	arg02, #0
11d64     18 F1 B0 FD | 	call	#_printerror
11d68     6C 00 90 FD | 	jmp	#LR__1492
11d6c                 | LR__1489
11d6c                 | LR__1490
11d6c                 | ' 
11d6c                 | ' if s2="" then
11d6c     98 01 00 FF 
11d70     00 95 06 F6 | 	mov	arg02, ##@LR__6013
11d74     54 93 02 F6 | 	mov	arg01, local02
11d78     50 2E B1 FD | 	call	#__system___string_cmp
11d7c     00 7A 0E F2 | 	cmp	result1, #0 wz
11d80     31 AC 06 A6 |  if_e	mov	local04, #49
11d84     24 00 90 AD |  if_e	jmp	#LR__1491
11d88     54 93 02 F6 | 	mov	arg01, local02
11d8c     CC 49 B1 FD | 	call	#__system__LCase_S
11d90     3D 93 02 F6 | 	mov	arg01, result1
11d94     98 01 00 FF 
11d98     01 95 06 F6 | 	mov	arg02, ##@LR__6014
11d9c     2C 2E B1 FD | 	call	#__system___string_cmp
11da0     00 7A 0E F2 | 	cmp	result1, #0 wz
11da4     10 AC 06 A6 |  if_e	mov	local04, #16
11da8     21 AC 06 56 |  if_ne	mov	local04, #33
11dac                 | LR__1491
11dac     55 93 02 F6 | 	mov	arg01, local03
11db0     56 95 02 F6 | 	mov	arg02, local04
11db4     28 85 B1 FD | 	call	#__system___basic_dir
11db8     3D A9 02 F6 | 	mov	local02, result1
11dbc     10 CE 05 F1 | 	add	fp, #16
11dc0     E7 3E 68 FC | 	wrlong	#31, fp
11dc4     08 CE 85 F1 | 	sub	fp, #8
11dc8     E7 A8 62 FC | 	wrlong	local02, fp
11dcc     E7 92 02 F6 | 	mov	arg01, fp
11dd0     08 CE 85 F1 | 	sub	fp, #8
11dd4     28 B9 BF FD | 	call	#_push
11dd8                 | LR__1492
11dd8     E7 F0 03 F6 | 	mov	ptra, fp
11ddc     F2 00 A0 FD | 	call	#popregs_
11de0                 | _do_findfirst_ret
11de0     2D 00 64 FD | 	ret
11de4                 | 
11de4                 | ' 
11de4                 | ' '-------------------- findnext
11de4                 | ' 
11de4                 | ' sub do_findnext
11de4                 | _do_findnext
11de4     00 CA 05 F6 | 	mov	COUNT_, #0
11de8     E8 00 A0 FD | 	call	#pushregs_
11dec     10 F0 07 F1 | 	add	ptra, #16
11df0                 | ' 
11df0                 | ' if compiledline(lineptr_e).result.uresult>0 then print "findnext: "; : printerror(39) : return    
11df0     4C 00 00 FF 
11df4     24 64 06 F1 | 	add	objptr, ##38948
11df8     32 97 02 FB | 	rdlong	arg03, objptr
11dfc     4B 95 02 F6 | 	mov	arg02, arg03
11e00     01 94 66 F0 | 	shl	arg02, #1
11e04     4B 95 02 F1 | 	add	arg02, arg03
11e08     02 94 66 F0 | 	shl	arg02, #2
11e0c     03 00 00 FF 
11e10     04 64 86 F1 | 	sub	objptr, ##1540
11e14     32 95 02 F1 | 	add	arg02, objptr
11e18     4A 7B 02 FB | 	rdlong	result1, arg02
11e1c     01 7A 16 F2 | 	cmp	result1, #1 wc
11e20     49 00 00 FF 
11e24     20 64 86 F1 | 	sub	objptr, ##37408
11e28     40 00 90 CD |  if_b	jmp	#LR__1500
11e2c     00 92 06 F6 | 	mov	arg01, #0
11e30     F4 82 B1 FD | 	call	#__system___getiolock_0622
11e34     3D 93 02 F6 | 	mov	arg01, result1
11e38     68 2D B1 FD | 	call	#__system___lockmem
11e3c     98 01 00 FF 
11e40     05 95 06 F6 | 	mov	arg02, ##@LR__6015
11e44     00 92 06 F6 | 	mov	arg01, #0
11e48     00 96 06 F6 | 	mov	arg03, #0
11e4c     48 3A B1 FD | 	call	#__system___basic_print_string
11e50     00 92 06 F6 | 	mov	arg01, #0
11e54     D0 82 B1 FD | 	call	#__system___getiolock_0622
11e58     3D 01 68 FC | 	wrlong	#0, result1
11e5c     27 92 06 F6 | 	mov	arg01, #39
11e60     00 94 06 F6 | 	mov	arg02, #0
11e64     18 F0 B0 FD | 	call	#_printerror
11e68     28 00 90 FD | 	jmp	#LR__1501
11e6c                 | LR__1500
11e6c     00 92 06 F6 | 	mov	arg01, #0
11e70     00 94 06 F6 | 	mov	arg02, #0
11e74     68 84 B1 FD | 	call	#__system___basic_dir
11e78     3D 97 02 F6 | 	mov	arg03, result1
11e7c     08 CE 05 F1 | 	add	fp, #8
11e80     E7 3E 68 FC | 	wrlong	#31, fp
11e84     08 CE 85 F1 | 	sub	fp, #8
11e88     E7 96 62 FC | 	wrlong	arg03, fp
11e8c     E7 92 02 F6 | 	mov	arg01, fp
11e90     6C B8 BF FD | 	call	#_push
11e94                 | LR__1501
11e94     E7 F0 03 F6 | 	mov	ptra, fp
11e98     F2 00 A0 FD | 	call	#popregs_
11e9c                 | _do_findnext_ret
11e9c     2D 00 64 FD | 	ret
11ea0                 | 
11ea0                 | ' 
11ea0                 | ' '-------------------- font
11ea0                 | ' 
11ea0                 | ' sub do_font
11ea0                 | _do_font
11ea0     03 CA 05 F6 | 	mov	COUNT_, #3
11ea4     E8 00 A0 FD | 	call	#pushregs_
11ea8     C4 B7 BF FD | 	call	#_pop
11eac     3D A7 02 F6 | 	mov	local01, result1
11eb0     3E A9 02 F6 | 	mov	local02, result2
11eb4     3F AB 02 F6 | 	mov	local03, result3
11eb8                 | ' 
11eb8                 | ' t1=pop() 
11eb8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
11eb8     1E AA 0E F2 | 	cmp	local03, #30 wz
11ebc     10 00 90 5D |  if_ne	jmp	#LR__1510
11ec0     53 93 02 F6 | 	mov	arg01, local01
11ec4     00 94 06 F6 | 	mov	arg02, #0
11ec8     70 58 B1 FD | 	call	#__system___float_tointeger
11ecc     3D A7 02 F6 | 	mov	local01, result1
11ed0                 | LR__1510
11ed0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
11ed0     1F AA 0E F2 | 	cmp	local03, #31 wz
11ed4     18 00 90 5D |  if_ne	jmp	#LR__1511
11ed8     53 93 02 F6 | 	mov	arg01, local01
11edc     B0 5B B1 FD | 	call	#__system____builtin_atof
11ee0     3D 93 02 F6 | 	mov	arg01, result1
11ee4     00 94 06 F6 | 	mov	arg02, #0
11ee8     50 58 B1 FD | 	call	#__system___float_tointeger
11eec     3D A7 02 F6 | 	mov	local01, result1
11ef0                 | LR__1511
11ef0     38 00 00 FF 
11ef4     E4 65 06 F1 | 	add	objptr, ##29156
11ef8     32 A7 62 FC | 	wrlong	local01, objptr
11efc     38 00 00 FF 
11f00     E4 65 86 F1 | 	sub	objptr, ##29156
11f04     02 A6 66 F0 | 	shl	local01, #2
11f08     53 93 02 F6 | 	mov	arg01, local01
11f0c     84 0B B1 FD | 	call	#_hg010b_spin2_setfontfamily
11f10     E7 F0 03 F6 | 	mov	ptra, fp
11f14     F2 00 A0 FD | 	call	#popregs_
11f18                 | _do_font_ret
11f18     2D 00 64 FD | 	ret
11f1c                 | 
11f1c                 | ' 
11f1c                 | ' '-------------------- for
11f1c                 | ' 
11f1c                 | ' sub do_for()
11f1c                 | _do_for
11f1c     01 CA 05 F6 | 	mov	COUNT_, #1
11f20     E8 00 A0 FD | 	call	#pushregs_
11f24     10 F0 07 F1 | 	add	ptra, #16
11f28     52 00 00 FF 
11f2c     D4 64 06 F1 | 	add	objptr, ##42196
11f30     32 93 02 FB | 	rdlong	arg01, objptr
11f34     01 92 06 F1 | 	add	arg01, #1
11f38     32 93 62 FC | 	wrlong	arg01, objptr
11f3c     52 00 00 FF 
11f40     D4 64 86 F1 | 	sub	objptr, ##42196
11f44     28 B7 BF FD | 	call	#_pop
11f48     E7 7A 62 FC | 	wrlong	result1, fp
11f4c     04 CE 05 F1 | 	add	fp, #4
11f50     E7 7C 62 FC | 	wrlong	result2, fp
11f54     04 CE 05 F1 | 	add	fp, #4
11f58     E7 7E 62 FC | 	wrlong	result3, fp
11f5c     08 CE 85 F1 | 	sub	fp, #8
11f60     52 00 00 FF 
11f64     D4 64 06 F1 | 	add	objptr, ##42196
11f68     32 93 02 FB | 	rdlong	arg01, objptr
11f6c     49 A7 02 F6 | 	mov	local01, arg01
11f70     02 A6 66 F0 | 	shl	local01, #2
11f74     49 A7 02 F1 | 	add	local01, arg01
11f78     02 A6 66 F0 | 	shl	local01, #2
11f7c     06 00 00 FF 
11f80     98 64 86 F1 | 	sub	objptr, ##3224
11f84     32 A7 02 F1 | 	add	local01, objptr
11f88     E7 92 02 FB | 	rdlong	arg01, fp
11f8c     08 A6 06 F1 | 	add	local01, #8
11f90     53 93 62 FC | 	wrlong	arg01, local01
11f94     4C 00 00 FF 
11f98     3C 64 86 F1 | 	sub	objptr, ##38972
11f9c     D0 B6 BF FD | 	call	#_pop
11fa0     E7 7A 62 FC | 	wrlong	result1, fp
11fa4     04 CE 05 F1 | 	add	fp, #4
11fa8     E7 7C 62 FC | 	wrlong	result2, fp
11fac     04 CE 05 F1 | 	add	fp, #4
11fb0     E7 7E 62 FC | 	wrlong	result3, fp
11fb4     08 CE 85 F1 | 	sub	fp, #8
11fb8     52 00 00 FF 
11fbc     D4 64 06 F1 | 	add	objptr, ##42196
11fc0     32 93 02 FB | 	rdlong	arg01, objptr
11fc4     49 A7 02 F6 | 	mov	local01, arg01
11fc8     02 A6 66 F0 | 	shl	local01, #2
11fcc     49 A7 02 F1 | 	add	local01, arg01
11fd0     02 A6 66 F0 | 	shl	local01, #2
11fd4     06 00 00 FF 
11fd8     98 64 86 F1 | 	sub	objptr, ##3224
11fdc     32 A7 02 F1 | 	add	local01, objptr
11fe0     E7 92 02 F6 | 	mov	arg01, fp
11fe4     4C 00 00 FF 
11fe8     3C 64 86 F1 | 	sub	objptr, ##38972
11fec     5C B8 BF FD | 	call	#_converttoint
11ff0     3D 93 02 F6 | 	mov	arg01, result1
11ff4     0C A6 06 F1 | 	add	local01, #12
11ff8     53 93 62 FC | 	wrlong	arg01, local01
11ffc     70 B6 BF FD | 	call	#_pop
12000     E7 7A 62 FC | 	wrlong	result1, fp
12004     04 CE 05 F1 | 	add	fp, #4
12008     E7 7C 62 FC | 	wrlong	result2, fp
1200c     04 CE 05 F1 | 	add	fp, #4
12010     E7 7E 62 FC | 	wrlong	result3, fp
12014     08 CE 85 F1 | 	sub	fp, #8
12018     52 00 00 FF 
1201c     D4 64 06 F1 | 	add	objptr, ##42196
12020     32 93 02 FB | 	rdlong	arg01, objptr
12024     49 A7 02 F6 | 	mov	local01, arg01
12028     02 A6 66 F0 | 	shl	local01, #2
1202c     49 A7 02 F1 | 	add	local01, arg01
12030     02 A6 66 F0 | 	shl	local01, #2
12034     06 00 00 FF 
12038     98 64 86 F1 | 	sub	objptr, ##3224
1203c     32 A7 02 F1 | 	add	local01, objptr
12040     E7 92 02 F6 | 	mov	arg01, fp
12044     4C 00 00 FF 
12048     3C 64 86 F1 | 	sub	objptr, ##38972
1204c     FC B7 BF FD | 	call	#_converttoint
12050     10 A6 06 F1 | 	add	local01, #16
12054     53 7B 62 FC | 	wrlong	result1, local01
12058                 | ' fortop+=1
12058                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
12058                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
12058                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
12058                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
12058     4C 00 00 FF 
1205c     24 64 06 F1 | 	add	objptr, ##38948
12060     32 93 02 FB | 	rdlong	arg01, objptr
12064     49 A7 02 F6 | 	mov	local01, arg01
12068     01 A6 66 F0 | 	shl	local01, #1
1206c     49 A7 02 F1 | 	add	local01, arg01
12070     02 A6 66 F0 | 	shl	local01, #2
12074     03 00 00 FF 
12078     04 64 86 F1 | 	sub	objptr, ##1540
1207c     32 A7 02 F1 | 	add	local01, objptr
12080     08 A6 06 F1 | 	add	local01, #8
12084     53 A7 02 FB | 	rdlong	local01, local01
12088     FE A7 0E F2 | 	cmp	local01, #510 wz
1208c     49 00 00 FF 
12090     20 64 86 F1 | 	sub	objptr, ##37408
12094     70 00 90 5D |  if_ne	jmp	#LR__1520
12098     52 00 00 FF 
1209c     D4 64 06 F1 | 	add	objptr, ##42196
120a0     32 93 02 FB | 	rdlong	arg01, objptr
120a4     49 A7 02 F6 | 	mov	local01, arg01
120a8     02 A6 66 F0 | 	shl	local01, #2
120ac     49 A7 02 F1 | 	add	local01, arg01
120b0     02 A6 66 F0 | 	shl	local01, #2
120b4     06 00 00 FF 
120b8     98 64 86 F1 | 	sub	objptr, ##3224
120bc     32 A7 02 F1 | 	add	local01, objptr
120c0     06 00 00 FF 
120c4     20 64 06 F1 | 	add	objptr, ##3104
120c8     32 93 02 FB | 	rdlong	arg01, objptr
120cc     53 93 62 FC | 	wrlong	arg01, local01
120d0     78 64 06 F1 | 	add	objptr, #120
120d4     32 93 02 FB | 	rdlong	arg01, objptr
120d8     49 A7 02 F6 | 	mov	local01, arg01
120dc     02 A6 66 F0 | 	shl	local01, #2
120e0     49 A7 02 F1 | 	add	local01, arg01
120e4     02 A6 66 F0 | 	shl	local01, #2
120e8     06 00 00 FF 
120ec     98 64 86 F1 | 	sub	objptr, ##3224
120f0     32 A7 02 F1 | 	add	local01, objptr
120f4     04 A6 06 F1 | 	add	local01, #4
120f8     53 01 68 FC | 	wrlong	#0, local01
120fc     4C 00 00 FF 
12100     3C 64 86 F1 | 	sub	objptr, ##38972
12104     78 00 90 FD | 	jmp	#LR__1521
12108                 | LR__1520
12108     52 00 00 FF 
1210c     D4 64 06 F1 | 	add	objptr, ##42196
12110     32 93 02 FB | 	rdlong	arg01, objptr
12114     49 A7 02 F6 | 	mov	local01, arg01
12118     02 A6 66 F0 | 	shl	local01, #2
1211c     49 A7 02 F1 | 	add	local01, arg01
12120     02 A6 66 F0 | 	shl	local01, #2
12124     06 00 00 FF 
12128     98 64 86 F1 | 	sub	objptr, ##3224
1212c     32 A7 02 F1 | 	add	local01, objptr
12130     06 00 00 FF 
12134     28 64 06 F1 | 	add	objptr, ##3112
12138     32 93 02 FB | 	rdlong	arg01, objptr
1213c     53 93 62 FC | 	wrlong	arg01, local01
12140     70 64 06 F1 | 	add	objptr, #112
12144     32 93 02 FB | 	rdlong	arg01, objptr
12148     49 A7 02 F6 | 	mov	local01, arg01
1214c     02 A6 66 F0 | 	shl	local01, #2
12150     49 A7 02 F1 | 	add	local01, arg01
12154     02 A6 66 F0 | 	shl	local01, #2
12158     06 00 00 FF 
1215c     98 64 86 F1 | 	sub	objptr, ##3224
12160     32 A7 02 F1 | 	add	local01, objptr
12164     18 64 86 F1 | 	sub	objptr, #24
12168     32 93 02 FB | 	rdlong	arg01, objptr
1216c     4C 00 00 FF 
12170     24 64 86 F1 | 	sub	objptr, ##38948
12174     01 92 06 F1 | 	add	arg01, #1
12178     04 A6 06 F1 | 	add	local01, #4
1217c     53 93 62 FC | 	wrlong	arg01, local01
12180                 | LR__1521
12180     E7 F0 03 F6 | 	mov	ptra, fp
12184     F2 00 A0 FD | 	call	#popregs_
12188                 | _do_for_ret
12188     2D 00 64 FD | 	ret
1218c                 | 
1218c                 | ' 
1218c                 | ' '-------------------- frame
1218c                 | ' 
1218c                 | ' sub do_frame
1218c                 | _do_frame
1218c     03 CA 05 F6 | 	mov	COUNT_, #3
12190     E8 00 A0 FD | 	call	#pushregs_
12194     30 F0 07 F1 | 	add	ptra, #48
12198     D4 B4 BF FD | 	call	#_pop
1219c     3D 97 02 F6 | 	mov	arg03, result1
121a0     3E 95 02 F6 | 	mov	arg02, result2
121a4     3F 9B 02 F6 | 	mov	arg05, result3
121a8     24 CE 05 F1 | 	add	fp, #36
121ac     E7 96 62 FC | 	wrlong	arg03, fp
121b0     04 CE 05 F1 | 	add	fp, #4
121b4     E7 94 62 FC | 	wrlong	arg02, fp
121b8     04 CE 05 F1 | 	add	fp, #4
121bc     E7 9A 62 FC | 	wrlong	arg05, fp
121c0     2C CE 85 F1 | 	sub	fp, #44
121c4     A8 B4 BF FD | 	call	#_pop
121c8     3D 97 02 F6 | 	mov	arg03, result1
121cc     3E 95 02 F6 | 	mov	arg02, result2
121d0     3F 9B 02 F6 | 	mov	arg05, result3
121d4     18 CE 05 F1 | 	add	fp, #24
121d8     E7 96 62 FC | 	wrlong	arg03, fp
121dc     04 CE 05 F1 | 	add	fp, #4
121e0     E7 94 62 FC | 	wrlong	arg02, fp
121e4     04 CE 05 F1 | 	add	fp, #4
121e8     E7 9A 62 FC | 	wrlong	arg05, fp
121ec     20 CE 85 F1 | 	sub	fp, #32
121f0     7C B4 BF FD | 	call	#_pop
121f4     3D 97 02 F6 | 	mov	arg03, result1
121f8     3E 95 02 F6 | 	mov	arg02, result2
121fc     3F 9B 02 F6 | 	mov	arg05, result3
12200     0C CE 05 F1 | 	add	fp, #12
12204     E7 96 62 FC | 	wrlong	arg03, fp
12208     04 CE 05 F1 | 	add	fp, #4
1220c     E7 94 62 FC | 	wrlong	arg02, fp
12210     04 CE 05 F1 | 	add	fp, #4
12214     E7 9A 62 FC | 	wrlong	arg05, fp
12218     14 CE 85 F1 | 	sub	fp, #20
1221c     50 B4 BF FD | 	call	#_pop
12220     3F 97 02 F6 | 	mov	arg03, result3
12224     E7 7A 62 FC | 	wrlong	result1, fp
12228     04 CE 05 F1 | 	add	fp, #4
1222c     E7 7C 62 FC | 	wrlong	result2, fp
12230     04 CE 05 F1 | 	add	fp, #4
12234     E7 96 62 FC | 	wrlong	arg03, fp
12238     08 CE 85 F1 | 	sub	fp, #8
1223c     E7 92 02 F6 | 	mov	arg01, fp
12240     08 B6 BF FD | 	call	#_converttoint
12244     3D A7 02 F6 | 	mov	local01, result1
12248     E7 92 02 F6 | 	mov	arg01, fp
1224c     0C 92 06 F1 | 	add	arg01, #12
12250     F8 B5 BF FD | 	call	#_converttoint
12254     3D A9 02 F6 | 	mov	local02, result1
12258     E7 92 02 F6 | 	mov	arg01, fp
1225c     18 92 06 F1 | 	add	arg01, #24
12260     E8 B5 BF FD | 	call	#_converttoint
12264     3D AB 02 F6 | 	mov	local03, result1
12268     E7 92 02 F6 | 	mov	arg01, fp
1226c     24 92 06 F1 | 	add	arg01, #36
12270     D8 B5 BF FD | 	call	#_converttoint
12274     3D 99 02 F6 | 	mov	arg04, result1
12278     38 00 00 FF 
1227c     CC 65 06 F1 | 	add	objptr, ##29132
12280     32 9B 02 FB | 	rdlong	arg05, objptr
12284     38 00 00 FF 
12288     CC 65 86 F1 | 	sub	objptr, ##29132
1228c     53 93 02 F6 | 	mov	arg01, local01
12290     54 95 02 F6 | 	mov	arg02, local02
12294     55 97 02 F6 | 	mov	arg03, local03
12298     04 06 B1 FD | 	call	#_hg010b_spin2_frame
1229c     E7 F0 03 F6 | 	mov	ptra, fp
122a0     F2 00 A0 FD | 	call	#popregs_
122a4                 | _do_frame_ret
122a4     2D 00 64 FD | 	ret
122a8                 | 
122a8                 | ' 
122a8                 | ' '-------------------- framebuf
122a8                 | ' 
122a8                 | ' sub do_framebuf
122a8                 | _do_framebuf
122a8     00 CA 05 F6 | 	mov	COUNT_, #0
122ac     E8 00 A0 FD | 	call	#pushregs_
122b0     0C F0 07 F1 | 	add	ptra, #12
122b4     08 CE 05 F1 | 	add	fp, #8
122b8     E7 3A 68 FC | 	wrlong	#29, fp
122bc     32 93 02 FB | 	rdlong	arg01, objptr
122c0     08 CE 85 F1 | 	sub	fp, #8
122c4     E7 92 62 FC | 	wrlong	arg01, fp
122c8     E7 92 02 F6 | 	mov	arg01, fp
122cc     30 B4 BF FD | 	call	#_push
122d0     E7 F0 03 F6 | 	mov	ptra, fp
122d4     F2 00 A0 FD | 	call	#popregs_
122d8                 | _do_framebuf_ret
122d8     2D 00 64 FD | 	ret
122dc                 | 
122dc                 | ' '-------------------- fre
122dc                 | ' 
122dc                 | ' sub do_fre
122dc                 | _do_fre
122dc     01 CA 05 F6 | 	mov	COUNT_, #1
122e0     E8 00 A0 FD | 	call	#pushregs_
122e4     0C F0 07 F1 | 	add	ptra, #12
122e8     54 00 00 FF 
122ec     74 64 06 F1 | 	add	objptr, ##43124
122f0     32 93 02 FB | 	rdlong	arg01, objptr
122f4     0F 00 00 FF 
122f8     74 64 86 F1 | 	sub	objptr, ##7796
122fc     32 A7 02 FB | 	rdlong	local01, objptr
12300     53 93 82 F1 | 	sub	arg01, local01
12304     0F 00 00 FF 
12308     EC 64 06 F1 | 	add	objptr, ##7916
1230c     32 93 62 FC | 	wrlong	arg01, objptr
12310     08 CE 05 F1 | 	add	fp, #8
12314     E7 3A 68 FC | 	wrlong	#29, fp
12318     08 CE 85 F1 | 	sub	fp, #8
1231c     32 A7 02 FB | 	rdlong	local01, objptr
12320     54 00 00 FF 
12324     EC 64 86 F1 | 	sub	objptr, ##43244
12328     E7 A6 62 FC | 	wrlong	local01, fp
1232c     E7 92 02 F6 | 	mov	arg01, fp
12330     CC B3 BF FD | 	call	#_push
12334     E7 F0 03 F6 | 	mov	ptra, fp
12338     F2 00 A0 FD | 	call	#popregs_
1233c                 | _do_fre_ret
1233c     2D 00 64 FD | 	ret
12340                 | 
12340                 | ' 
12340                 | ' '-------------------- get
12340                 | ' 
12340                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
12340                 | _do_get
12340     10 CA 05 F6 | 	mov	COUNT_, #16
12344     E8 00 A0 FD | 	call	#pushregs_
12348     40 F0 07 F1 | 	add	ptra, #64
1234c     4C 00 00 FF 
12350     24 64 06 F1 | 	add	objptr, ##38948
12354     32 9B 02 FB | 	rdlong	arg05, objptr
12358     4D A7 02 F6 | 	mov	local01, arg05
1235c     01 A6 66 F0 | 	shl	local01, #1
12360     4D A7 02 F1 | 	add	local01, arg05
12364     02 A6 66 F0 | 	shl	local01, #2
12368     03 00 00 FF 
1236c     04 64 86 F1 | 	sub	objptr, ##1540
12370     32 A9 02 F6 | 	mov	local02, objptr
12374     32 A7 02 F1 | 	add	local01, objptr
12378     53 AB 02 FB | 	rdlong	local03, local01
1237c                 | ' 
1237c                 | ' numpar=compiledline(lineptr_e).result.uresult
1237c                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
1237c     04 AA 0E F2 | 	cmp	local03, #4 wz
12380     49 00 00 FF 
12384     20 64 86 F1 | 	sub	objptr, ##37408
12388     48 00 90 5D |  if_ne	jmp	#LR__1530
1238c     E0 B2 BF FD | 	call	#_pop
12390     3F 9B 02 F6 | 	mov	arg05, result3
12394     1C CE 05 F1 | 	add	fp, #28
12398     E7 7A 62 FC | 	wrlong	result1, fp
1239c     04 CE 05 F1 | 	add	fp, #4
123a0     E7 7C 62 FC | 	wrlong	result2, fp
123a4     04 CE 05 F1 | 	add	fp, #4
123a8     E7 9A 62 FC | 	wrlong	arg05, fp
123ac     08 CE 85 F1 | 	sub	fp, #8
123b0     E7 92 02 F6 | 	mov	arg01, fp
123b4     1C CE 85 F1 | 	sub	fp, #28
123b8     90 B4 BF FD | 	call	#_converttoint
123bc     54 00 00 FF 
123c0     E8 64 06 F1 | 	add	objptr, ##43240
123c4     32 7B 62 FC | 	wrlong	result1, objptr
123c8     54 00 00 FF 
123cc     E8 64 86 F1 | 	sub	objptr, ##43240
123d0     18 00 90 FD | 	jmp	#LR__1531
123d4                 | LR__1530
123d4     54 00 00 FF 
123d8     E8 64 06 F1 | 	add	objptr, ##43240
123dc     FF FF FF FF 
123e0     32 FF 6B FC | 	wrlong	##-1, objptr
123e4     54 00 00 FF 
123e8     E8 64 86 F1 | 	sub	objptr, ##43240
123ec                 | LR__1531
123ec                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
123ec     03 AA 56 F2 | 	cmps	local03, #3 wc
123f0     38 00 90 CD |  if_b	jmp	#LR__1532
123f4     78 B2 BF FD | 	call	#_pop
123f8     3F A7 02 F6 | 	mov	local01, result3
123fc     1C CE 05 F1 | 	add	fp, #28
12400     E7 7A 62 FC | 	wrlong	result1, fp
12404     04 CE 05 F1 | 	add	fp, #4
12408     E7 7C 62 FC | 	wrlong	result2, fp
1240c     04 CE 05 F1 | 	add	fp, #4
12410     E7 A6 62 FC | 	wrlong	local01, fp
12414     08 CE 85 F1 | 	sub	fp, #8
12418     E7 92 02 F6 | 	mov	arg01, fp
1241c     1C CE 85 F1 | 	sub	fp, #28
12420     28 B4 BF FD | 	call	#_converttoint
12424     3D AD 02 F6 | 	mov	local04, result1
12428     04 00 90 FD | 	jmp	#LR__1533
1242c                 | LR__1532
1242c     01 AC 06 F6 | 	mov	local04, #1
12430                 | LR__1533
12430                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
12430     02 AA 56 F2 | 	cmps	local03, #2 wc
12434     34 00 90 CD |  if_b	jmp	#LR__1534
12438     34 B2 BF FD | 	call	#_pop
1243c     3F A9 02 F6 | 	mov	local02, result3
12440     1C CE 05 F1 | 	add	fp, #28
12444     E7 7A 62 FC | 	wrlong	result1, fp
12448     04 CE 05 F1 | 	add	fp, #4
1244c     E7 7C 62 FC | 	wrlong	result2, fp
12450     04 CE 05 F1 | 	add	fp, #4
12454     E7 A8 62 FC | 	wrlong	local02, fp
12458     08 CE 85 F1 | 	sub	fp, #8
1245c     E7 92 02 F6 | 	mov	arg01, fp
12460     1C CE 85 F1 | 	sub	fp, #28
12464     E4 B3 BF FD | 	call	#_converttoint
12468     3D AF 02 F6 | 	mov	local05, result1
1246c                 | LR__1534
1246c     00 B2 BF FD | 	call	#_pop
12470     3F 9B 02 F6 | 	mov	arg05, result3
12474     1C CE 05 F1 | 	add	fp, #28
12478     E7 7A 62 FC | 	wrlong	result1, fp
1247c     04 CE 05 F1 | 	add	fp, #4
12480     E7 7C 62 FC | 	wrlong	result2, fp
12484     04 CE 05 F1 | 	add	fp, #4
12488     E7 9A 62 FC | 	wrlong	arg05, fp
1248c     08 CE 85 F1 | 	sub	fp, #8
12490     E7 92 02 F6 | 	mov	arg01, fp
12494     1C CE 85 F1 | 	sub	fp, #28
12498     B0 B3 BF FD | 	call	#_converttoint
1249c     3D B1 02 F6 | 	mov	local06, result1
124a0     02 B2 66 F0 | 	shl	local07, #2
124a4     52 00 00 FF 
124a8     68 64 06 F1 | 	add	objptr, ##42088
124ac     32 B3 02 F1 | 	add	local07, objptr
124b0     59 01 68 FC | 	wrlong	#0, local07
124b4                 | ' t1=pop() : channel=converttoint(t1)
124b4                 | ' getres(j)=0
124b4                 | ' if pos>=0 then
124b4     02 00 00 FF 
124b8     80 64 06 F1 | 	add	objptr, ##1152
124bc     32 B5 02 FB | 	rdlong	local08, objptr
124c0     54 00 00 FF 
124c4     E8 64 86 F1 | 	sub	objptr, ##43240
124c8     00 B4 56 F2 | 	cmps	local08, #0 wc
124cc     28 01 90 CD |  if_b	jmp	#LR__1541
124d0                 | '   for i=0 to  amount/1024
124d0     00 B6 06 F6 | 	mov	local09, #0
124d4     56 B9 52 F6 | 	abs	local10, local04 wc
124d8     0A B8 46 F0 | 	shr	local10, #10
124dc     5C B9 82 F6 | 	negc	local10, local10
124e0     01 B8 06 F1 | 	add	local10, #1
124e4                 | LR__1535
124e4     5C B7 52 F2 | 	cmps	local09, local10 wc
124e8     20 02 90 3D |  if_ae	jmp	#LR__1549
124ec                 | '     get #channel,pos+1,block(0),amount,r
124ec     54 00 00 FF 
124f0     E8 64 06 F1 | 	add	objptr, ##43240
124f4     32 95 02 FB | 	rdlong	arg02, objptr
124f8     01 94 06 F1 | 	add	arg02, #1
124fc     04 00 00 FF 
12500     90 64 86 F1 | 	sub	objptr, ##2192
12504     32 97 02 F6 | 	mov	arg03, objptr
12508     50 00 00 FF 
1250c     58 64 86 F1 | 	sub	objptr, ##41048
12510     56 99 02 F6 | 	mov	arg04, local04
12514     58 93 02 F6 | 	mov	arg01, local06
12518     01 9A 06 F6 | 	mov	arg05, #1
1251c     00 35 B1 FD | 	call	#__system___basic_get
12520     3D BB 02 F6 | 	mov	local11, result1
12524                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12524     00 04 00 FF 
12528     00 AE 56 F2 | 	cmps	local05, ##524288 wc
1252c     48 00 90 3D |  if_ae	jmp	#LR__1537
12530     00 B2 06 F6 | 	mov	local07, #0
12534     5D BD 02 F6 | 	mov	local12, local11
12538                 | LR__1536
12538     5E B3 52 F2 | 	cmps	local07, local12 wc
1253c     80 00 90 3D |  if_ae	jmp	#LR__1540
12540     57 93 02 F6 | 	mov	arg01, local05
12544     5B B5 02 F6 | 	mov	local08, local09
12548     0A B4 66 F0 | 	shl	local08, #10
1254c     5A 93 02 F1 | 	add	arg01, local08
12550     59 93 02 F1 | 	add	arg01, local07
12554     59 A9 02 F6 | 	mov	local02, local07
12558     32 B5 02 F6 | 	mov	local08, objptr
1255c     50 00 00 FF 
12560     58 B4 06 F1 | 	add	local08, ##41048
12564     5A A9 02 F1 | 	add	local02, local08
12568     54 95 C2 FA | 	rdbyte	arg02, local02
1256c     49 95 42 FC | 	wrbyte	arg02, arg01
12570     01 B2 06 F1 | 	add	local07, #1
12574     C0 FF 9F FD | 	jmp	#LR__1536
12578                 | LR__1537
12578     00 B2 06 F6 | 	mov	local07, #0
1257c     5D BF 02 F6 | 	mov	local13, local11
12580                 | LR__1538
12580     5F B3 52 F2 | 	cmps	local07, local13 wc
12584     38 00 90 3D |  if_ae	jmp	#LR__1539
12588     57 93 02 F6 | 	mov	arg01, local05
1258c     5B BD 02 F6 | 	mov	local12, local09
12590     0A BC 66 F0 | 	shl	local12, #10
12594     5E 93 02 F1 | 	add	arg01, local12
12598     59 93 02 F1 | 	add	arg01, local07
1259c     59 A9 02 F6 | 	mov	local02, local07
125a0     32 BD 02 F6 | 	mov	local12, objptr
125a4     50 00 00 FF 
125a8     58 BC 06 F1 | 	add	local12, ##41048
125ac     5E A9 02 F1 | 	add	local02, local12
125b0     54 95 C2 FA | 	rdbyte	arg02, local02
125b4     F0 EA B0 FD | 	call	#_pspoke
125b8     01 B2 06 F1 | 	add	local07, #1
125bc     C0 FF 9F FD | 	jmp	#LR__1538
125c0                 | LR__1539
125c0                 | LR__1540
125c0     59 BF 02 F6 | 	mov	local13, local07
125c4     02 BE 66 F0 | 	shl	local13, #2
125c8     52 00 00 FF 
125cc     68 64 06 F1 | 	add	objptr, ##42088
125d0     32 BF 02 F1 | 	add	local13, objptr
125d4     02 B2 66 F0 | 	shl	local07, #2
125d8     32 B3 02 F1 | 	add	local07, objptr
125dc     59 A7 02 FB | 	rdlong	local01, local07
125e0     5D A7 02 F1 | 	add	local01, local11
125e4     5F A7 62 FC | 	wrlong	local01, local13
125e8     01 B6 06 F1 | 	add	local09, #1
125ec     52 00 00 FF 
125f0     68 64 86 F1 | 	sub	objptr, ##42088
125f4     EC FE 9F FD | 	jmp	#LR__1535
125f8                 | LR__1541
125f8                 | '   for i=0 to  amount/1024
125f8     00 B6 06 F6 | 	mov	local09, #0
125fc     56 C1 52 F6 | 	abs	local14, local04 wc
12600     0A C0 46 F0 | 	shr	local14, #10
12604     60 C1 82 F6 | 	negc	local14, local14
12608     01 C0 06 F1 | 	add	local14, #1
1260c                 | LR__1542
1260c     60 B7 52 F2 | 	cmps	local09, local14 wc
12610     F8 00 90 3D |  if_ae	jmp	#LR__1548
12614                 | '     get #channel,,block(0),amount,r
12614     32 97 02 F6 | 	mov	arg03, objptr
12618     50 00 00 FF 
1261c     58 96 06 F1 | 	add	arg03, ##41048
12620     56 99 02 F6 | 	mov	arg04, local04
12624     58 93 02 F6 | 	mov	arg01, local06
12628     00 94 06 F6 | 	mov	arg02, #0
1262c     01 9A 06 F6 | 	mov	arg05, #1
12630     EC 33 B1 FD | 	call	#__system___basic_get
12634     3D BB 02 F6 | 	mov	local11, result1
12638                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12638     00 04 00 FF 
1263c     00 AE 56 F2 | 	cmps	local05, ##524288 wc
12640     48 00 90 3D |  if_ae	jmp	#LR__1544
12644     00 B2 06 F6 | 	mov	local07, #0
12648     5D C3 02 F6 | 	mov	local15, local11
1264c                 | LR__1543
1264c     61 B3 52 F2 | 	cmps	local07, local15 wc
12650     80 00 90 3D |  if_ae	jmp	#LR__1547
12654     57 93 02 F6 | 	mov	arg01, local05
12658     5B BF 02 F6 | 	mov	local13, local09
1265c     0A BE 66 F0 | 	shl	local13, #10
12660     5F 93 02 F1 | 	add	arg01, local13
12664     59 93 02 F1 | 	add	arg01, local07
12668     59 A9 02 F6 | 	mov	local02, local07
1266c     32 BF 02 F6 | 	mov	local13, objptr
12670     50 00 00 FF 
12674     58 BE 06 F1 | 	add	local13, ##41048
12678     5F A9 02 F1 | 	add	local02, local13
1267c     54 95 C2 FA | 	rdbyte	arg02, local02
12680     49 95 42 FC | 	wrbyte	arg02, arg01
12684     01 B2 06 F1 | 	add	local07, #1
12688     C0 FF 9F FD | 	jmp	#LR__1543
1268c                 | LR__1544
1268c     00 B2 06 F6 | 	mov	local07, #0
12690     5D C5 02 F6 | 	mov	local16, local11
12694                 | LR__1545
12694     62 B3 52 F2 | 	cmps	local07, local16 wc
12698     38 00 90 3D |  if_ae	jmp	#LR__1546
1269c     57 93 02 F6 | 	mov	arg01, local05
126a0     5B C3 02 F6 | 	mov	local15, local09
126a4     0A C2 66 F0 | 	shl	local15, #10
126a8     61 93 02 F1 | 	add	arg01, local15
126ac     59 93 02 F1 | 	add	arg01, local07
126b0     59 A9 02 F6 | 	mov	local02, local07
126b4     32 C3 02 F6 | 	mov	local15, objptr
126b8     50 00 00 FF 
126bc     58 C2 06 F1 | 	add	local15, ##41048
126c0     61 A9 02 F1 | 	add	local02, local15
126c4     54 95 C2 FA | 	rdbyte	arg02, local02
126c8     DC E9 B0 FD | 	call	#_pspoke
126cc     01 B2 06 F1 | 	add	local07, #1
126d0     C0 FF 9F FD | 	jmp	#LR__1545
126d4                 | LR__1546
126d4                 | LR__1547
126d4     59 C5 02 F6 | 	mov	local16, local07
126d8     02 C4 66 F0 | 	shl	local16, #2
126dc     52 00 00 FF 
126e0     68 64 06 F1 | 	add	objptr, ##42088
126e4     32 C5 02 F1 | 	add	local16, objptr
126e8     02 B2 66 F0 | 	shl	local07, #2
126ec     32 B3 02 F1 | 	add	local07, objptr
126f0     59 A7 02 FB | 	rdlong	local01, local07
126f4     5D A7 02 F1 | 	add	local01, local11
126f8     62 A7 62 FC | 	wrlong	local01, local16
126fc     01 B6 06 F1 | 	add	local09, #1
12700     52 00 00 FF 
12704     68 64 86 F1 | 	sub	objptr, ##42088
12708     00 FF 9F FD | 	jmp	#LR__1542
1270c                 | LR__1548
1270c                 | LR__1549
1270c     E7 F0 03 F6 | 	mov	ptra, fp
12710     F2 00 A0 FD | 	call	#popregs_
12714                 | _do_get_ret
12714     2D 00 64 FD | 	ret
12718                 | 
12718                 | ' 
12718                 | ' '-------------------- getcolor
12718                 | ' 
12718                 | ' sub do_getcolor
12718                 | _do_getcolor
12718     00 CA 05 F6 | 	mov	COUNT_, #0
1271c     E8 00 A0 FD | 	call	#pushregs_
12720     10 F0 07 F1 | 	add	ptra, #16
12724     4C 00 00 FF 
12728     24 64 06 F1 | 	add	objptr, ##38948
1272c     32 97 02 FB | 	rdlong	arg03, objptr
12730     4B 95 02 F6 | 	mov	arg02, arg03
12734     01 94 66 F0 | 	shl	arg02, #1
12738     4B 95 02 F1 | 	add	arg02, arg03
1273c     02 94 66 F0 | 	shl	arg02, #2
12740     03 00 00 FF 
12744     04 64 86 F1 | 	sub	objptr, ##1540
12748     32 95 02 F1 | 	add	arg02, objptr
1274c     4A 97 02 FB | 	rdlong	arg03, arg02
12750                 | ' 
12750                 | ' numpar=compiledline(lineptr_e).result.uresult
12750                 | ' if numpar>1 orelse numpar=0 then print "getcolor "; : printerror(39) : return
12750     02 96 16 F2 | 	cmp	arg03, #2 wc
12754     49 00 00 FF 
12758     20 64 86 F1 | 	sub	objptr, ##37408
1275c     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
12760     40 00 90 4D |  if_c_and_nz	jmp	#LR__1550
12764     00 92 06 F6 | 	mov	arg01, #0
12768     BC 79 B1 FD | 	call	#__system___getiolock_0622
1276c     3D 93 02 F6 | 	mov	arg01, result1
12770     30 24 B1 FD | 	call	#__system___lockmem
12774     98 01 00 FF 
12778     10 95 06 F6 | 	mov	arg02, ##@LR__6016
1277c     00 92 06 F6 | 	mov	arg01, #0
12780     00 96 06 F6 | 	mov	arg03, #0
12784     10 31 B1 FD | 	call	#__system___basic_print_string
12788     00 92 06 F6 | 	mov	arg01, #0
1278c     98 79 B1 FD | 	call	#__system___getiolock_0622
12790     3D 01 68 FC | 	wrlong	#0, result1
12794     27 92 06 F6 | 	mov	arg01, #39
12798     00 94 06 F6 | 	mov	arg02, #0
1279c     E0 E6 B0 FD | 	call	#_printerror
127a0     60 00 90 FD | 	jmp	#LR__1551
127a4                 | LR__1550
127a4     C8 AE BF FD | 	call	#_pop
127a8     E7 7A 62 FC | 	wrlong	result1, fp
127ac     04 CE 05 F1 | 	add	fp, #4
127b0     E7 7C 62 FC | 	wrlong	result2, fp
127b4     04 CE 05 F1 | 	add	fp, #4
127b8     E7 7E 62 FC | 	wrlong	result3, fp
127bc     08 CE 85 F1 | 	sub	fp, #8
127c0     E7 92 02 F6 | 	mov	arg01, fp
127c4     84 B0 BF FD | 	call	#_converttoint
127c8     3D 93 02 F6 | 	mov	arg01, result1
127cc                 | ' 
127cc                 | ' return long[palette_ptr+4*color]
127cc     1C 64 06 F1 | 	add	objptr, #28
127d0     32 7B 02 FB | 	rdlong	result1, objptr
127d4     1C 64 86 F1 | 	sub	objptr, #28
127d8     02 92 66 F0 | 	shl	arg01, #2
127dc     49 7B 02 F1 | 	add	result1, arg01
127e0     3D 7B 02 FB | 	rdlong	result1, result1
127e4     08 7A C6 F0 | 	sar	result1, #8
127e8     F8 7A 06 F4 | 	bitl	result1, #248
127ec     E7 7A 62 FC | 	wrlong	result1, fp
127f0     08 CE 05 F1 | 	add	fp, #8
127f4     E7 3A 68 FC | 	wrlong	#29, fp
127f8     08 CE 85 F1 | 	sub	fp, #8
127fc     E7 92 02 F6 | 	mov	arg01, fp
12800     FC AE BF FD | 	call	#_push
12804                 | LR__1551
12804     E7 F0 03 F6 | 	mov	ptra, fp
12808     F2 00 A0 FD | 	call	#popregs_
1280c                 | _do_getcolor_ret
1280c     2D 00 64 FD | 	ret
12810                 | 
12810                 | ' 
12810                 | ' '-------------------- getenvsustain
12810                 | ' 
12810                 | ' sub do_getenvsustain
12810                 | _do_getenvsustain
12810     00 CA 05 F6 | 	mov	COUNT_, #0
12814     E8 00 A0 FD | 	call	#pushregs_
12818     10 F0 07 F1 | 	add	ptra, #16
1281c     4C 00 00 FF 
12820     24 64 06 F1 | 	add	objptr, ##38948
12824     32 97 02 FB | 	rdlong	arg03, objptr
12828     4B 95 02 F6 | 	mov	arg02, arg03
1282c     01 94 66 F0 | 	shl	arg02, #1
12830     4B 95 02 F1 | 	add	arg02, arg03
12834     02 94 66 F0 | 	shl	arg02, #2
12838     03 00 00 FF 
1283c     04 64 86 F1 | 	sub	objptr, ##1540
12840     32 95 02 F1 | 	add	arg02, objptr
12844     4A 97 02 FB | 	rdlong	arg03, arg02
12848                 | ' 
12848                 | ' numpar=compiledline(lineptr_e).result.uresult
12848                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12848     02 96 16 F2 | 	cmp	arg03, #2 wc
1284c     49 00 00 FF 
12850     20 64 86 F1 | 	sub	objptr, ##37408
12854     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
12858     40 00 90 4D |  if_c_and_nz	jmp	#LR__1560
1285c     00 92 06 F6 | 	mov	arg01, #0
12860     C4 78 B1 FD | 	call	#__system___getiolock_0622
12864     3D 93 02 F6 | 	mov	arg01, result1
12868     38 23 B1 FD | 	call	#__system___lockmem
1286c     98 01 00 FF 
12870     1A 95 06 F6 | 	mov	arg02, ##@LR__6017
12874     00 92 06 F6 | 	mov	arg01, #0
12878     00 96 06 F6 | 	mov	arg03, #0
1287c     18 30 B1 FD | 	call	#__system___basic_print_string
12880     00 92 06 F6 | 	mov	arg01, #0
12884     A0 78 B1 FD | 	call	#__system___getiolock_0622
12888     3D 01 68 FC | 	wrlong	#0, result1
1288c     27 92 06 F6 | 	mov	arg01, #39
12890     00 94 06 F6 | 	mov	arg02, #0
12894     E8 E5 B0 FD | 	call	#_printerror
12898     60 00 90 FD | 	jmp	#LR__1561
1289c                 | LR__1560
1289c     D0 AD BF FD | 	call	#_pop
128a0     3D 97 02 F6 | 	mov	arg03, result1
128a4     3E 95 02 F6 | 	mov	arg02, result2
128a8     E7 96 62 FC | 	wrlong	arg03, fp
128ac     04 CE 05 F1 | 	add	fp, #4
128b0     E7 94 62 FC | 	wrlong	arg02, fp
128b4     04 CE 05 F1 | 	add	fp, #4
128b8     E7 7E 62 FC | 	wrlong	result3, fp
128bc     08 CE 85 F1 | 	sub	fp, #8
128c0     E7 92 02 F6 | 	mov	arg01, fp
128c4     84 AF BF FD | 	call	#_converttoint
128c8     3D 97 02 F6 | 	mov	arg03, result1
128cc     01 96 66 F0 | 	shl	arg03, #1
128d0     32 95 02 F6 | 	mov	arg02, objptr
128d4     54 00 00 FF 
128d8     90 94 06 F1 | 	add	arg02, ##43152
128dc     4A 97 02 F1 | 	add	arg03, arg02
128e0     4B 7F E2 FA | 	rdword	result3, arg03
128e4     E7 7E 62 FC | 	wrlong	result3, fp
128e8     08 CE 05 F1 | 	add	fp, #8
128ec     E7 38 68 FC | 	wrlong	#28, fp
128f0     08 CE 85 F1 | 	sub	fp, #8
128f4     E7 92 02 F6 | 	mov	arg01, fp
128f8     04 AE BF FD | 	call	#_push
128fc                 | LR__1561
128fc     E7 F0 03 F6 | 	mov	ptra, fp
12900     F2 00 A0 FD | 	call	#popregs_
12904                 | _do_getenvsustain_ret
12904     2D 00 64 FD | 	ret
12908                 | 
12908                 | ' 
12908                 | ' '-------------------- getnotevalue
12908                 | ' 
12908                 | ' sub do_getnotevalue
12908                 | _do_getnotevalue
12908     02 CA 05 F6 | 	mov	COUNT_, #2
1290c     E8 00 A0 FD | 	call	#pushregs_
12910     1C F0 07 F1 | 	add	ptra, #28
12914     58 AD BF FD | 	call	#_pop
12918     3F 95 02 F6 | 	mov	arg02, result3
1291c     10 CE 05 F1 | 	add	fp, #16
12920     E7 7A 62 FC | 	wrlong	result1, fp
12924     04 CE 05 F1 | 	add	fp, #4
12928     E7 7C 62 FC | 	wrlong	result2, fp
1292c     04 CE 05 F1 | 	add	fp, #4
12930     E7 94 62 FC | 	wrlong	arg02, fp
12934     08 CE 85 F1 | 	sub	fp, #8
12938     E7 92 02 F6 | 	mov	arg01, fp
1293c     10 CE 85 F1 | 	sub	fp, #16
12940     08 AF BF FD | 	call	#_converttoint
12944     3D 93 52 F6 | 	abs	arg01, result1 wc
12948     0C 92 16 FD | 	qdiv	arg01, #12
1294c     32 93 02 F6 | 	mov	arg01, objptr
12950     16 00 00 FF 
12954     38 92 06 F1 | 	add	arg01, ##11320
12958     19 7C 62 FD | 	getqy	result2
1295c     3E 7D 82 F6 | 	negc	result2, result2
12960     3D 7B 52 F6 | 	abs	result1, result1 wc
12964     0C 7A 16 FD | 	qdiv	result1, #12
12968     02 7C 66 F0 | 	shl	result2, #2
1296c     49 7D 02 F1 | 	add	result2, arg01
12970     3E A7 02 FB | 	rdlong	local01, result2
12974     18 94 62 FD | 	getqx	arg02
12978     4A 93 82 F6 | 	negc	arg01, arg02
1297c     49 93 52 F6 | 	abs	arg01, arg01 wc
12980     1F A8 C6 C9 |  if_b	decod	local02, #31
12984     00 A8 06 36 |  if_ae	mov	local02, #0
12988     E4 44 B1 FD | 	call	#__system___float_fromuns
1298c     54 7B 62 F5 | 	xor	result1, local02
12990     3D 95 02 F6 | 	mov	arg02, result1
12994     1E 92 C6 F9 | 	decod	arg01, #30
12998     F0 57 B1 FD | 	call	#__system____builtin_powf
1299c     3D 93 02 F6 | 	mov	arg01, result1
129a0     53 95 02 F6 | 	mov	arg02, local01
129a4     CC 48 B1 FD | 	call	#__system___float_mul
129a8     3D A7 02 F6 | 	mov	local01, result1
129ac     10 CE 05 F1 | 	add	fp, #16
129b0     E7 A6 62 FC | 	wrlong	local01, fp
129b4     08 CE 05 F1 | 	add	fp, #8
129b8     E7 3C 68 FC | 	wrlong	#30, fp
129bc     08 CE 85 F1 | 	sub	fp, #8
129c0     E7 92 02 F6 | 	mov	arg01, fp
129c4     10 CE 85 F1 | 	sub	fp, #16
129c8     34 AD BF FD | 	call	#_push
129cc     E7 F0 03 F6 | 	mov	ptra, fp
129d0     F2 00 A0 FD | 	call	#popregs_
129d4                 | _do_getnotevalue_ret
129d4     2D 00 64 FD | 	ret
129d8                 | 
129d8                 | ' 
129d8                 | ' '-------------------- getpixel
129d8                 | ' 
129d8                 | ' sub do_getpixel
129d8                 | _do_getpixel
129d8     01 CA 05 F6 | 	mov	COUNT_, #1
129dc     E8 00 A0 FD | 	call	#pushregs_
129e0     24 F0 07 F1 | 	add	ptra, #36
129e4     4C 00 00 FF 
129e8     24 64 06 F1 | 	add	objptr, ##38948
129ec     32 97 02 FB | 	rdlong	arg03, objptr
129f0     4B 95 02 F6 | 	mov	arg02, arg03
129f4     01 94 66 F0 | 	shl	arg02, #1
129f8     4B 95 02 F1 | 	add	arg02, arg03
129fc     02 94 66 F0 | 	shl	arg02, #2
12a00     03 00 00 FF 
12a04     04 64 86 F1 | 	sub	objptr, ##1540
12a08     32 95 02 F1 | 	add	arg02, objptr
12a0c     4A 97 02 FB | 	rdlong	arg03, arg02
12a10                 | ' 
12a10                 | ' numpar=compiledline(lineptr_e).result.uresult
12a10                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
12a10     02 96 0E F2 | 	cmp	arg03, #2 wz
12a14     49 00 00 FF 
12a18     20 64 86 F1 | 	sub	objptr, ##37408
12a1c     40 00 90 AD |  if_e	jmp	#LR__1570
12a20     00 92 06 F6 | 	mov	arg01, #0
12a24     00 77 B1 FD | 	call	#__system___getiolock_0622
12a28     3D 93 02 F6 | 	mov	arg01, result1
12a2c     74 21 B1 FD | 	call	#__system___lockmem
12a30     98 01 00 FF 
12a34     2A 95 06 F6 | 	mov	arg02, ##@LR__6018
12a38     00 92 06 F6 | 	mov	arg01, #0
12a3c     00 96 06 F6 | 	mov	arg03, #0
12a40     54 2E B1 FD | 	call	#__system___basic_print_string
12a44     00 92 06 F6 | 	mov	arg01, #0
12a48     DC 76 B1 FD | 	call	#__system___getiolock_0622
12a4c     3D 01 68 FC | 	wrlong	#0, result1
12a50     27 92 06 F6 | 	mov	arg01, #39
12a54     00 94 06 F6 | 	mov	arg02, #0
12a58     24 E4 B0 FD | 	call	#_printerror
12a5c     98 00 90 FD | 	jmp	#LR__1571
12a60                 | LR__1570
12a60     0C AC BF FD | 	call	#_pop
12a64     3D 97 02 F6 | 	mov	arg03, result1
12a68     3E 95 02 F6 | 	mov	arg02, result2
12a6c     3F 93 02 F6 | 	mov	arg01, result3
12a70     0C CE 05 F1 | 	add	fp, #12
12a74     E7 96 62 FC | 	wrlong	arg03, fp
12a78     04 CE 05 F1 | 	add	fp, #4
12a7c     E7 94 62 FC | 	wrlong	arg02, fp
12a80     04 CE 05 F1 | 	add	fp, #4
12a84     E7 92 62 FC | 	wrlong	arg01, fp
12a88     14 CE 85 F1 | 	sub	fp, #20
12a8c     E0 AB BF FD | 	call	#_pop
12a90     3F 97 02 F6 | 	mov	arg03, result3
12a94     E7 7A 62 FC | 	wrlong	result1, fp
12a98     04 CE 05 F1 | 	add	fp, #4
12a9c     E7 7C 62 FC | 	wrlong	result2, fp
12aa0     04 CE 05 F1 | 	add	fp, #4
12aa4     E7 96 62 FC | 	wrlong	arg03, fp
12aa8     08 CE 85 F1 | 	sub	fp, #8
12aac     E7 92 02 F6 | 	mov	arg01, fp
12ab0     98 AD BF FD | 	call	#_converttoint
12ab4     3D A7 02 F6 | 	mov	local01, result1
12ab8     E7 92 02 F6 | 	mov	arg01, fp
12abc     0C 92 06 F1 | 	add	arg01, #12
12ac0     88 AD BF FD | 	call	#_converttoint
12ac4     3D 97 02 F6 | 	mov	arg03, result1
12ac8     32 93 02 FB | 	rdlong	arg01, objptr
12acc     53 93 02 F1 | 	add	arg01, local01
12ad0     0A 96 66 F0 | 	shl	arg03, #10
12ad4     4B 93 02 F1 | 	add	arg01, arg03
12ad8     14 E6 B0 FD | 	call	#_pspeek
12adc     3D 7B E2 F8 | 	getbyte	result1, result1, #0
12ae0     E7 7A 62 FC | 	wrlong	result1, fp
12ae4     08 CE 05 F1 | 	add	fp, #8
12ae8     E7 3A 68 FC | 	wrlong	#29, fp
12aec     08 CE 85 F1 | 	sub	fp, #8
12af0     E7 92 02 F6 | 	mov	arg01, fp
12af4     08 AC BF FD | 	call	#_push
12af8                 | LR__1571
12af8     E7 F0 03 F6 | 	mov	ptra, fp
12afc     F2 00 A0 FD | 	call	#popregs_
12b00                 | _do_getpixel_ret
12b00     2D 00 64 FD | 	ret
12b04                 | 
12b04                 | ' 
12b04                 | ' 
12b04                 | ' sub do_getrealfreq
12b04                 | _do_getrealfreq
12b04     00 CA 05 F6 | 	mov	COUNT_, #0
12b08     E8 00 A0 FD | 	call	#pushregs_
12b0c     14 F0 07 F1 | 	add	ptra, #20
12b10     4C 00 00 FF 
12b14     24 64 06 F1 | 	add	objptr, ##38948
12b18     32 97 02 FB | 	rdlong	arg03, objptr
12b1c     4B 95 02 F6 | 	mov	arg02, arg03
12b20     01 94 66 F0 | 	shl	arg02, #1
12b24     4B 95 02 F1 | 	add	arg02, arg03
12b28     02 94 66 F0 | 	shl	arg02, #2
12b2c     03 00 00 FF 
12b30     04 64 86 F1 | 	sub	objptr, ##1540
12b34     32 95 02 F1 | 	add	arg02, objptr
12b38     4A 97 02 FB | 	rdlong	arg03, arg02
12b3c                 | ' 
12b3c                 | ' numpar=compiledline(lineptr_e).result.uresult
12b3c                 | ' if numpar<>1 then print "getrealfreq: "; : printerror(39) : return
12b3c     01 96 0E F2 | 	cmp	arg03, #1 wz
12b40     49 00 00 FF 
12b44     20 64 86 F1 | 	sub	objptr, ##37408
12b48     40 00 90 AD |  if_e	jmp	#LR__1580
12b4c     00 92 06 F6 | 	mov	arg01, #0
12b50     D4 75 B1 FD | 	call	#__system___getiolock_0622
12b54     3D 93 02 F6 | 	mov	arg01, result1
12b58     48 20 B1 FD | 	call	#__system___lockmem
12b5c     98 01 00 FF 
12b60     35 95 06 F6 | 	mov	arg02, ##@LR__6019
12b64     00 92 06 F6 | 	mov	arg01, #0
12b68     00 96 06 F6 | 	mov	arg03, #0
12b6c     28 2D B1 FD | 	call	#__system___basic_print_string
12b70     00 92 06 F6 | 	mov	arg01, #0
12b74     B0 75 B1 FD | 	call	#__system___getiolock_0622
12b78     3D 01 68 FC | 	wrlong	#0, result1
12b7c     27 92 06 F6 | 	mov	arg01, #39
12b80     00 94 06 F6 | 	mov	arg02, #0
12b84     F8 E2 B0 FD | 	call	#_printerror
12b88     78 00 90 FD | 	jmp	#LR__1581
12b8c                 | LR__1580
12b8c     E0 AA BF FD | 	call	#_pop
12b90     3D 97 02 F6 | 	mov	arg03, result1
12b94     04 CE 05 F1 | 	add	fp, #4
12b98     E7 96 62 FC | 	wrlong	arg03, fp
12b9c     04 CE 05 F1 | 	add	fp, #4
12ba0     E7 7C 62 FC | 	wrlong	result2, fp
12ba4     04 CE 05 F1 | 	add	fp, #4
12ba8     E7 7E 62 FC | 	wrlong	result3, fp
12bac     08 CE 85 F1 | 	sub	fp, #8
12bb0     E7 92 02 F6 | 	mov	arg01, fp
12bb4     04 CE 85 F1 | 	sub	fp, #4
12bb8     90 AC BF FD | 	call	#_converttoint
12bbc     3D 95 02 F6 | 	mov	arg02, result1
12bc0     03 94 66 F0 | 	shl	arg02, #3
12bc4     3D 95 82 F1 | 	sub	arg02, result1
12bc8     02 94 66 F0 | 	shl	arg02, #2
12bcc     32 97 02 F6 | 	mov	arg03, objptr
12bd0     16 00 00 FF 
12bd4     BC 96 06 F1 | 	add	arg03, ##11452
12bd8     4B 95 02 F1 | 	add	arg02, arg03
12bdc     18 94 06 F1 | 	add	arg02, #24
12be0     4A 97 02 FB | 	rdlong	arg03, arg02
12be4     04 CE 05 F1 | 	add	fp, #4
12be8     E7 96 62 FC | 	wrlong	arg03, fp
12bec     08 CE 05 F1 | 	add	fp, #8
12bf0     E7 3C 68 FC | 	wrlong	#30, fp
12bf4     08 CE 85 F1 | 	sub	fp, #8
12bf8     E7 92 02 F6 | 	mov	arg01, fp
12bfc     04 CE 85 F1 | 	sub	fp, #4
12c00     FC AA BF FD | 	call	#_push
12c04                 | LR__1581
12c04     E7 F0 03 F6 | 	mov	ptra, fp
12c08     F2 00 A0 FD | 	call	#popregs_
12c0c                 | _do_getrealfreq_ret
12c0c     2D 00 64 FD | 	ret
12c10                 | 
12c10                 | ' 
12c10                 | ' 
12c10                 | ' '-------------------- gettime
12c10                 | ' 
12c10                 | ' sub do_gettime
12c10                 | _do_gettime
12c10     02 CA 05 F6 | 	mov	COUNT_, #2
12c14     E8 00 A0 FD | 	call	#pushregs_
12c18     14 F0 07 F1 | 	add	ptra, #20
12c1c                 | ' 
12c1c                 | ' const asm 
12c1c     1A A6 72 FD | 	getct	local01 wc
12c20     1A A8 62 FD | 	getct	local02
12c24                 | ' return hi1, lo1
12c24     54 7D 02 F6 | 	mov	result2, local02
12c28     53 7B 02 F6 | 	mov	result1, local01
12c2c     10 CE 05 F1 | 	add	fp, #16
12c30     E7 3A 68 FC | 	wrlong	#29, fp
12c34     08 CE 85 F1 | 	sub	fp, #8
12c38     E7 7C 62 FC | 	wrlong	result2, fp
12c3c     04 CE 05 F1 | 	add	fp, #4
12c40     E7 7A 62 FC | 	wrlong	result1, fp
12c44     04 CE 85 F1 | 	sub	fp, #4
12c48     E7 92 02 F6 | 	mov	arg01, fp
12c4c     08 CE 85 F1 | 	sub	fp, #8
12c50     AC AA BF FD | 	call	#_push
12c54     E7 F0 03 F6 | 	mov	ptra, fp
12c58     F2 00 A0 FD | 	call	#popregs_
12c5c                 | _do_gettime_ret
12c5c     2D 00 64 FD | 	ret
12c60                 | 
12c60                 | ' 
12c60                 | ' '-------------------- gosub
12c60                 | ' 
12c60                 | ' sub do_gosub()
12c60                 | _do_gosub
12c60     52 00 00 FF 
12c64     D8 64 06 F1 | 	add	objptr, ##42200
12c68     32 81 02 FB | 	rdlong	_var01, objptr
12c6c     01 80 06 F1 | 	add	_var01, #1
12c70     32 81 62 FC | 	wrlong	_var01, objptr
12c74                 | ' gosubtop+=1
12c74                 | ' if compiledline(lineptr_e+1).result_type=token_end then
12c74     06 00 00 FF 
12c78     B4 64 86 F1 | 	sub	objptr, ##3252
12c7c     32 81 02 FB | 	rdlong	_var01, objptr
12c80     01 80 06 F1 | 	add	_var01, #1
12c84     40 83 02 F6 | 	mov	_var02, _var01
12c88     01 82 66 F0 | 	shl	_var02, #1
12c8c     40 83 02 F1 | 	add	_var02, _var01
12c90     02 82 66 F0 | 	shl	_var02, #2
12c94     03 00 00 FF 
12c98     04 64 86 F1 | 	sub	objptr, ##1540
12c9c     32 83 02 F1 | 	add	_var02, objptr
12ca0     08 82 06 F1 | 	add	_var02, #8
12ca4     41 83 02 FB | 	rdlong	_var02, _var02
12ca8     FE 83 0E F2 | 	cmp	_var02, #510 wz
12cac     49 00 00 FF 
12cb0     20 64 86 F1 | 	sub	objptr, ##37408
12cb4     58 00 90 5D |  if_ne	jmp	#LR__1590
12cb8     52 00 00 FF 
12cbc     D8 64 06 F1 | 	add	objptr, ##42200
12cc0     32 83 02 FB | 	rdlong	_var02, objptr
12cc4     03 82 66 F0 | 	shl	_var02, #3
12cc8     03 00 00 FF 
12ccc     88 65 86 F1 | 	sub	objptr, ##1928
12cd0     32 83 02 F1 | 	add	_var02, objptr
12cd4     03 00 00 FF 
12cd8     0C 65 06 F1 | 	add	objptr, ##1804
12cdc     32 81 02 FB | 	rdlong	_var01, objptr
12ce0     41 81 62 FC | 	wrlong	_var01, _var02
12ce4     7C 64 06 F1 | 	add	objptr, #124
12ce8     32 83 02 FB | 	rdlong	_var02, objptr
12cec     03 82 66 F0 | 	shl	_var02, #3
12cf0     03 00 00 FF 
12cf4     88 65 86 F1 | 	sub	objptr, ##1928
12cf8     32 83 02 F1 | 	add	_var02, objptr
12cfc     04 82 06 F1 | 	add	_var02, #4
12d00     41 01 68 FC | 	wrlong	#0, _var02
12d04     4E 00 00 FF 
12d08     50 65 86 F1 | 	sub	objptr, ##40272
12d0c     64 00 90 FD | 	jmp	#LR__1591
12d10                 | LR__1590
12d10     52 00 00 FF 
12d14     D8 64 06 F1 | 	add	objptr, ##42200
12d18     32 83 02 FB | 	rdlong	_var02, objptr
12d1c     03 82 66 F0 | 	shl	_var02, #3
12d20     03 00 00 FF 
12d24     88 65 86 F1 | 	sub	objptr, ##1928
12d28     32 83 02 F1 | 	add	_var02, objptr
12d2c     03 00 00 FF 
12d30     14 65 06 F1 | 	add	objptr, ##1812
12d34     32 81 02 FB | 	rdlong	_var01, objptr
12d38     41 81 62 FC | 	wrlong	_var01, _var02
12d3c     74 64 06 F1 | 	add	objptr, #116
12d40     32 83 02 FB | 	rdlong	_var02, objptr
12d44     03 82 66 F0 | 	shl	_var02, #3
12d48     03 00 00 FF 
12d4c     88 65 86 F1 | 	sub	objptr, ##1928
12d50     32 83 02 F1 | 	add	_var02, objptr
12d54     02 00 00 FF 
12d58     2C 65 86 F1 | 	sub	objptr, ##1324
12d5c     32 81 02 FB | 	rdlong	_var01, objptr
12d60     4C 00 00 FF 
12d64     24 64 86 F1 | 	sub	objptr, ##38948
12d68     02 80 06 F1 | 	add	_var01, #2
12d6c     04 82 06 F1 | 	add	_var02, #4
12d70     41 81 62 FC | 	wrlong	_var01, _var02
12d74                 | LR__1591
12d74                 | _do_gosub_ret
12d74     2D 00 64 FD | 	ret
12d78                 | 
12d78                 | ' 
12d78                 | ' '--------------------- goto
12d78                 | ' 
12d78                 | ' '------- fast goto
12d78                 | ' 
12d78                 | ' sub do_fast_goto
12d78                 | _do_fast_goto
12d78     02 CA 05 F6 | 	mov	COUNT_, #2
12d7c     E8 00 A0 FD | 	call	#pushregs_
12d80                 | _do_fast_goto_enter
12d80     4C 00 00 FF 
12d84     24 64 06 F1 | 	add	objptr, ##38948
12d88     32 93 02 FB | 	rdlong	arg01, objptr
12d8c     49 A7 02 F6 | 	mov	local01, arg01
12d90     01 A6 66 F0 | 	shl	local01, #1
12d94     49 A7 02 F1 | 	add	local01, arg01
12d98     02 A6 66 F0 | 	shl	local01, #2
12d9c     03 00 00 FF 
12da0     04 64 86 F1 | 	sub	objptr, ##1540
12da4     32 A7 02 F1 | 	add	local01, objptr
12da8     53 A9 02 FB | 	rdlong	local02, local01
12dac     54 93 02 F6 | 	mov	arg01, local02
12db0     49 00 00 FF 
12db4     20 64 86 F1 | 	sub	objptr, ##37408
12db8     7C E3 B0 FD | 	call	#_pslpeek
12dbc     3D 93 02 F6 | 	mov	arg01, result1
12dc0                 | ' 
12dc0                 | ' testptr=compiledline(lineptr_e).result.uresult
12dc0                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
12dc0                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
12dc0     4C 00 00 FF 
12dc4     24 64 06 F1 | 	add	objptr, ##38948
12dc8     32 7B 02 FB | 	rdlong	result1, objptr
12dcc     3D A7 02 F6 | 	mov	local01, result1
12dd0     01 A6 66 F0 | 	shl	local01, #1
12dd4     3D A7 02 F1 | 	add	local01, result1
12dd8     02 A6 66 F0 | 	shl	local01, #2
12ddc     03 00 00 FF 
12de0     04 64 86 F1 | 	sub	objptr, ##1540
12de4     32 A7 02 F1 | 	add	local01, objptr
12de8     04 A6 06 F1 | 	add	local01, #4
12dec     53 A7 02 FB | 	rdlong	local01, local01
12df0     53 93 0A F2 | 	cmp	arg01, local01 wz
12df4     49 00 00 FF 
12df8     20 64 86 F1 | 	sub	objptr, ##37408
12dfc     58 00 90 5D |  if_ne	jmp	#LR__1600
12e00     52 00 00 FF 
12e04     5C 64 06 F1 | 	add	objptr, ##42076
12e08     32 A9 62 FC | 	wrlong	local02, objptr
12e0c     06 00 00 FF 
12e10     3C 64 86 F1 | 	sub	objptr, ##3132
12e14     32 A9 02 FB | 	rdlong	local02, objptr
12e18     01 A8 86 F1 | 	sub	local02, #1
12e1c     04 64 06 F1 | 	add	objptr, #4
12e20     32 A9 62 FC | 	wrlong	local02, objptr
12e24                 | '   runptr=testptr
12e24                 | '   lineptr_e=lineptr-1
12e24                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
12e24     06 00 00 FF 
12e28     84 64 06 F1 | 	add	objptr, ##3204
12e2c     32 A9 02 FB | 	rdlong	local02, objptr
12e30     52 00 00 FF 
12e34     A8 64 86 F1 | 	sub	objptr, ##42152
12e38     FF FF 3F FF 
12e3c     FF A9 0E F2 | 	cmp	local02, ##2147483647 wz
12e40     52 00 00 AF 
12e44     A8 64 06 A1 |  if_e	add	objptr, ##42152
12e48     32 01 68 AC |  if_e	wrlong	#0, objptr
12e4c     52 00 00 AF 
12e50     A8 64 86 A1 |  if_e	sub	objptr, ##42152
12e54     04 00 90 FD | 	jmp	#LR__1601
12e58                 | LR__1600
12e58     0C 00 B0 FD | 	call	#_do_find_goto
12e5c                 | LR__1601
12e5c     E7 F0 03 F6 | 	mov	ptra, fp
12e60     F2 00 A0 FD | 	call	#popregs_
12e64                 | _do_fast_goto_ret
12e64     2D 00 64 FD | 	ret
12e68                 | 
12e68                 | ' 
12e68                 | ' '------- find goto  
12e68                 | ' 
12e68                 | ' sub do_find_goto
12e68                 | _do_find_goto
12e68     06 CA 05 F6 | 	mov	COUNT_, #6
12e6c     E8 00 A0 FD | 	call	#pushregs_
12e70     24 F0 07 F1 | 	add	ptra, #36
12e74                 | _do_find_goto_enter
12e74     4C 00 00 FF 
12e78     24 64 06 F1 | 	add	objptr, ##38948
12e7c     32 A7 02 FB | 	rdlong	local01, objptr
12e80     53 A9 02 F6 | 	mov	local02, local01
12e84     01 A8 66 F0 | 	shl	local02, #1
12e88     53 A9 02 F1 | 	add	local02, local01
12e8c     02 A8 66 F0 | 	shl	local02, #2
12e90     03 00 00 FF 
12e94     04 64 86 F1 | 	sub	objptr, ##1540
12e98     32 AB 02 F6 | 	mov	local03, objptr
12e9c     32 A9 02 F1 | 	add	local02, objptr
12ea0     04 A8 06 F1 | 	add	local02, #4
12ea4     54 AD 02 FB | 	rdlong	local04, local02
12ea8     03 00 00 FF 
12eac     0C 64 06 F1 | 	add	objptr, ##1548
12eb0     32 AF 02 FB | 	rdlong	local05, objptr
12eb4                 | ' 
12eb4                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
12eb4                 | ' gotoptr=programstart
12eb4                 | ' do
12eb4     40 00 00 FF 
12eb8     60 65 86 F1 | 	sub	objptr, ##33120
12ebc                 | LR__1610
12ebc     E7 92 02 F6 | 	mov	arg01, fp
12ec0     0C 92 06 F1 | 	add	arg01, #12
12ec4     57 95 02 F6 | 	mov	arg02, local05
12ec8     18 96 06 F6 | 	mov	arg03, #24
12ecc     58 0D B1 FD | 	call	#_psram_spin2_read1
12ed0                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12ed0                 | '   if gotoheader(0)<>$FFFFFFFF then
12ed0     0C CE 05 F1 | 	add	fp, #12
12ed4     E7 A8 02 FB | 	rdlong	local02, fp
12ed8     0C CE 85 F1 | 	sub	fp, #12
12edc     FF FF 7F FF 
12ee0     FF A9 0E F2 | 	cmp	local02, ##-1 wz
12ee4     57 B1 02 56 |  if_ne	mov	local06, local05
12ee8     20 CE 05 51 |  if_ne	add	fp, #32
12eec     E7 AE 02 5B |  if_ne	rdlong	local05, fp
12ef0     20 CE 85 51 |  if_ne	sub	fp, #32
12ef4     20 CE 05 F1 | 	add	fp, #32
12ef8     E7 A8 02 FB | 	rdlong	local02, fp
12efc     20 CE 85 F1 | 	sub	fp, #32
12f00     FF FF 3F FF 
12f04     FF A9 0E F2 | 	cmp	local02, ##2147483647 wz
12f08     0C CE 05 51 |  if_ne	add	fp, #12
12f0c     E7 A6 02 5B |  if_ne	rdlong	local01, fp
12f10     0C CE 85 51 |  if_ne	sub	fp, #12
12f14     FF FF 7F 5F 
12f18     FF A7 0E 52 |  if_ne	cmp	local01, ##-1 wz
12f1c     0C CE 05 51 |  if_ne	add	fp, #12
12f20     53 AB 02 56 |  if_ne	mov	local03, local01
12f24     0C CE 85 51 |  if_ne	sub	fp, #12
12f28     56 AB 0A 52 |  if_ne	cmp	local03, local04 wz
12f2c     8C FF 9F 5D |  if_ne	jmp	#LR__1610
12f30     0B 00 00 FF 
12f34     CC 64 86 F1 | 	sub	objptr, ##5836
12f38                 | ' 
12f38                 | ' if gotoheader(0)=gotoline then
12f38     0C CE 05 F1 | 	add	fp, #12
12f3c     E7 AE 02 FB | 	rdlong	local05, fp
12f40     0C CE 85 F1 | 	sub	fp, #12
12f44     56 AF 0A F2 | 	cmp	local05, local04 wz
12f48     CC 00 90 5D |  if_ne	jmp	#LR__1611
12f4c     4C 00 00 FF 
12f50     24 64 06 F1 | 	add	objptr, ##38948
12f54     32 A7 02 FB | 	rdlong	local01, objptr
12f58     53 A9 02 F6 | 	mov	local02, local01
12f5c     01 A8 66 F0 | 	shl	local02, #1
12f60     53 A9 02 F1 | 	add	local02, local01
12f64     02 A8 66 F0 | 	shl	local02, #2
12f68     03 00 00 FF 
12f6c     04 64 86 F1 | 	sub	objptr, ##1540
12f70     32 A9 02 F1 | 	add	local02, objptr
12f74     54 B1 62 FC | 	wrlong	local06, local02
12f78     03 00 00 FF 
12f7c     04 64 06 F1 | 	add	objptr, ##1540
12f80     32 A7 02 FB | 	rdlong	local01, objptr
12f84     53 A9 02 F6 | 	mov	local02, local01
12f88     01 A8 66 F0 | 	shl	local02, #1
12f8c     53 A9 02 F1 | 	add	local02, local01
12f90     02 A8 66 F0 | 	shl	local02, #2
12f94     03 00 00 FF 
12f98     04 64 86 F1 | 	sub	objptr, ##1540
12f9c     32 A9 02 F1 | 	add	local02, objptr
12fa0     08 A8 06 F1 | 	add	local02, #8
12fa4     54 9D 68 FC | 	wrlong	#78, local02
12fa8     03 00 00 FF 
12fac     04 64 06 F1 | 	add	objptr, ##1540
12fb0     32 B1 02 FB | 	rdlong	local06, objptr
12fb4     58 93 02 F6 | 	mov	arg01, local06
12fb8     01 92 66 F0 | 	shl	arg01, #1
12fbc     58 93 02 F1 | 	add	arg01, local06
12fc0     02 92 66 F0 | 	shl	arg01, #2
12fc4     03 00 00 FF 
12fc8     04 64 86 F1 | 	sub	objptr, ##1540
12fcc     32 93 02 F1 | 	add	arg01, objptr
12fd0     09 00 00 FF 
12fd4     44 64 06 F1 | 	add	objptr, ##4676
12fd8     32 95 02 FB | 	rdlong	arg02, objptr
12fdc     02 AA 06 F6 | 	mov	local03, #2
12fe0     58 AB 02 F1 | 	add	local03, local06
12fe4     0B 00 00 FF 
12fe8     5C 64 86 F1 | 	sub	objptr, ##5724
12fec     32 97 02 FB | 	rdlong	arg03, objptr
12ff0     4B AB 02 FD | 	qmul	local03, arg03
12ff4     3B 00 00 FF 
12ff8     3C 65 86 F1 | 	sub	objptr, ##30524
12ffc     18 B0 62 FD | 	getqx	local06
13000     58 95 02 F1 | 	add	arg02, local06
13004     BC 0C B1 FD | 	call	#_psram_spin2_write
13008     0B 00 00 FF 
1300c     CC 64 86 F1 | 	sub	objptr, ##5836
13010     64 FD BF FD | 	call	#_do_fast_goto
13014     0C 00 90 FD | 	jmp	#LR__1612
13018                 | LR__1611
13018     26 92 06 F6 | 	mov	arg01, #38
1301c     00 94 06 F6 | 	mov	arg02, #0
13020     5C DE B0 FD | 	call	#_printerror
13024                 | LR__1612
13024     E7 F0 03 F6 | 	mov	ptra, fp
13028     F2 00 A0 FD | 	call	#popregs_
1302c                 | _do_find_goto_ret
1302c     2D 00 64 FD | 	ret
13030                 | 
13030                 | ' 
13030                 | ' '------- slow goto  
13030                 | ' 
13030                 | ' sub do_slow_goto
13030                 | _do_slow_goto
13030     05 CA 05 F6 | 	mov	COUNT_, #5
13034     E8 00 A0 FD | 	call	#pushregs_
13038     30 F0 07 F1 | 	add	ptra, #48
1303c     30 A6 BF FD | 	call	#_pop
13040     3F A7 02 F6 | 	mov	local01, result3
13044     24 CE 05 F1 | 	add	fp, #36
13048     E7 7A 62 FC | 	wrlong	result1, fp
1304c     04 CE 05 F1 | 	add	fp, #4
13050     E7 7C 62 FC | 	wrlong	result2, fp
13054     04 CE 05 F1 | 	add	fp, #4
13058     E7 A6 62 FC | 	wrlong	local01, fp
1305c     08 CE 85 F1 | 	sub	fp, #8
13060     E7 92 02 F6 | 	mov	arg01, fp
13064     24 CE 85 F1 | 	sub	fp, #36
13068     E0 A7 BF FD | 	call	#_converttoint
1306c     3D A9 02 F6 | 	mov	local02, result1
13070     4C 00 00 FF 
13074     2C 64 06 F1 | 	add	objptr, ##38956
13078     32 AB 02 FB | 	rdlong	local03, objptr
1307c                 | ' 
1307c                 | ' t1=pop() : gotoline=converttoint(t1)
1307c                 | ' gotoptr=programstart
1307c                 | ' do
1307c     40 00 00 FF 
13080     60 65 86 F1 | 	sub	objptr, ##33120
13084                 | LR__1620
13084     E7 92 02 F6 | 	mov	arg01, fp
13088     0C 92 06 F1 | 	add	arg01, #12
1308c     55 95 02 F6 | 	mov	arg02, local03
13090     18 96 06 F6 | 	mov	arg03, #24
13094     90 0B B1 FD | 	call	#_psram_spin2_read1
13098                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
13098                 | '   if gotoheader(0)<>$FFFFFFFF then
13098     0C CE 05 F1 | 	add	fp, #12
1309c     E7 96 02 FB | 	rdlong	arg03, fp
130a0     0C CE 85 F1 | 	sub	fp, #12
130a4     FF FF 7F FF 
130a8     FF 97 0E F2 | 	cmp	arg03, ##-1 wz
130ac     55 AD 02 56 |  if_ne	mov	local04, local03
130b0     20 CE 05 51 |  if_ne	add	fp, #32
130b4     E7 AA 02 5B |  if_ne	rdlong	local03, fp
130b8     20 CE 85 51 |  if_ne	sub	fp, #32
130bc     20 CE 05 F1 | 	add	fp, #32
130c0     E7 96 02 FB | 	rdlong	arg03, fp
130c4     20 CE 85 F1 | 	sub	fp, #32
130c8     FF FF 3F FF 
130cc     FF 97 0E F2 | 	cmp	arg03, ##2147483647 wz
130d0     0C CE 05 51 |  if_ne	add	fp, #12
130d4     E7 A6 02 5B |  if_ne	rdlong	local01, fp
130d8     0C CE 85 51 |  if_ne	sub	fp, #12
130dc     FF FF 7F 5F 
130e0     FF A7 0E 52 |  if_ne	cmp	local01, ##-1 wz
130e4     0C CE 05 51 |  if_ne	add	fp, #12
130e8     53 AF 02 56 |  if_ne	mov	local05, local01
130ec     0C CE 85 51 |  if_ne	sub	fp, #12
130f0     54 AF 0A 52 |  if_ne	cmp	local05, local02 wz
130f4     8C FF 9F 5D |  if_ne	jmp	#LR__1620
130f8     0B 00 00 FF 
130fc     CC 64 86 F1 | 	sub	objptr, ##5836
13100                 | ' if gotoheader(0)=gotoline then  
13100     0C CE 05 F1 | 	add	fp, #12
13104     E7 AE 02 FB | 	rdlong	local05, fp
13108     0C CE 85 F1 | 	sub	fp, #12
1310c     54 AF 0A F2 | 	cmp	local05, local02 wz
13110     54 00 90 5D |  if_ne	jmp	#LR__1621
13114     52 00 00 FF 
13118     5C 64 06 F1 | 	add	objptr, ##42076
1311c     32 AD 62 FC | 	wrlong	local04, objptr
13120     06 00 00 FF 
13124     3C 64 86 F1 | 	sub	objptr, ##3132
13128     32 AF 02 FB | 	rdlong	local05, objptr
1312c     01 AE 86 F1 | 	sub	local05, #1
13130     04 64 06 F1 | 	add	objptr, #4
13134     32 AF 62 FC | 	wrlong	local05, objptr
13138                 | '    runptr=oldgotoptr
13138                 | '    lineptr_e=lineptr-1
13138                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
13138     06 00 00 FF 
1313c     84 64 06 F1 | 	add	objptr, ##3204
13140     32 AF 02 FB | 	rdlong	local05, objptr
13144     52 00 00 FF 
13148     A8 64 86 F1 | 	sub	objptr, ##42152
1314c     FF FF 3F FF 
13150     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
13154     52 00 00 AF 
13158     A8 64 06 A1 |  if_e	add	objptr, ##42152
1315c     32 01 68 AC |  if_e	wrlong	#0, objptr
13160     52 00 00 AF 
13164     A8 64 86 A1 |  if_e	sub	objptr, ##42152
13168                 | LR__1621
13168     E7 F0 03 F6 | 	mov	ptra, fp
1316c     F2 00 A0 FD | 	call	#popregs_
13170                 | _do_slow_goto_ret
13170     2D 00 64 FD | 	ret
13174                 | 
13174                 | ' 
13174                 | ' ' ----------------  hex$
13174                 | ' 
13174                 | ' sub do_hex
13174                 | _do_hex
13174     02 CA 05 F6 | 	mov	COUNT_, #2
13178     E8 00 A0 FD | 	call	#pushregs_
1317c     18 F0 07 F1 | 	add	ptra, #24
13180     4C 00 00 FF 
13184     24 64 06 F1 | 	add	objptr, ##38948
13188     32 97 02 FB | 	rdlong	arg03, objptr
1318c     4B 95 02 F6 | 	mov	arg02, arg03
13190     01 94 66 F0 | 	shl	arg02, #1
13194     4B 95 02 F1 | 	add	arg02, arg03
13198     02 94 66 F0 | 	shl	arg02, #2
1319c     03 00 00 FF 
131a0     04 64 86 F1 | 	sub	objptr, ##1540
131a4     32 95 02 F1 | 	add	arg02, objptr
131a8     4A A7 02 FB | 	rdlong	local01, arg02
131ac                 | ' 
131ac                 | ' numpar=compiledline(lineptr_e).result.uresult
131ac                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
131ac     03 A6 16 F2 | 	cmp	local01, #3 wc
131b0     49 00 00 FF 
131b4     20 64 86 F1 | 	sub	objptr, ##37408
131b8     00 A6 0E C2 |  if_b	cmp	local01, #0 wz
131bc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1630
131c0     00 92 06 F6 | 	mov	arg01, #0
131c4     60 6F B1 FD | 	call	#__system___getiolock_0622
131c8     3D 93 02 F6 | 	mov	arg01, result1
131cc     D4 19 B1 FD | 	call	#__system___lockmem
131d0     98 01 00 FF 
131d4     43 95 06 F6 | 	mov	arg02, ##@LR__6020
131d8     00 92 06 F6 | 	mov	arg01, #0
131dc     00 96 06 F6 | 	mov	arg03, #0
131e0     B4 26 B1 FD | 	call	#__system___basic_print_string
131e4     00 92 06 F6 | 	mov	arg01, #0
131e8     3C 6F B1 FD | 	call	#__system___getiolock_0622
131ec     3D 01 68 FC | 	wrlong	#0, result1
131f0     27 92 06 F6 | 	mov	arg01, #39
131f4     00 94 06 F6 | 	mov	arg02, #0
131f8     84 DC B0 FD | 	call	#_printerror
131fc     8C 00 90 FD | 	jmp	#LR__1633
13200                 | LR__1630
13200                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
13200     02 A6 0E F2 | 	cmp	local01, #2 wz
13204     30 00 90 5D |  if_ne	jmp	#LR__1631
13208     64 A4 BF FD | 	call	#_pop
1320c     3F A7 02 F6 | 	mov	local01, result3
13210     E7 7A 62 FC | 	wrlong	result1, fp
13214     04 CE 05 F1 | 	add	fp, #4
13218     E7 7C 62 FC | 	wrlong	result2, fp
1321c     04 CE 05 F1 | 	add	fp, #4
13220     E7 A6 62 FC | 	wrlong	local01, fp
13224     08 CE 85 F1 | 	sub	fp, #8
13228     E7 92 02 F6 | 	mov	arg01, fp
1322c     1C A6 BF FD | 	call	#_converttoint
13230     3D A9 02 F6 | 	mov	local02, result1
13234     04 00 90 FD | 	jmp	#LR__1632
13238                 | LR__1631
13238     08 A8 06 F6 | 	mov	local02, #8
1323c                 | LR__1632
1323c     30 A4 BF FD | 	call	#_pop
13240     3F A7 02 F6 | 	mov	local01, result3
13244     E7 7A 62 FC | 	wrlong	result1, fp
13248     04 CE 05 F1 | 	add	fp, #4
1324c     E7 7C 62 FC | 	wrlong	result2, fp
13250     04 CE 05 F1 | 	add	fp, #4
13254     E7 A6 62 FC | 	wrlong	local01, fp
13258     08 CE 85 F1 | 	sub	fp, #8
1325c     E7 92 02 F6 | 	mov	arg01, fp
13260     E8 A5 BF FD | 	call	#_converttoint
13264     3D 93 02 F6 | 	mov	arg01, result1
13268     54 95 02 F6 | 	mov	arg02, local02
1326c     10 96 06 F6 | 	mov	arg03, #16
13270     2C 34 B1 FD | 	call	#__system__Number_S
13274     E7 7A 62 FC | 	wrlong	result1, fp
13278     08 CE 05 F1 | 	add	fp, #8
1327c     E7 3E 68 FC | 	wrlong	#31, fp
13280     08 CE 85 F1 | 	sub	fp, #8
13284     E7 92 02 F6 | 	mov	arg01, fp
13288     74 A4 BF FD | 	call	#_push
1328c                 | LR__1633
1328c     E7 F0 03 F6 | 	mov	ptra, fp
13290     F2 00 A0 FD | 	call	#popregs_
13294                 | _do_hex_ret
13294     2D 00 64 FD | 	ret
13298                 | 
13298                 | ' 
13298                 | ' ' ----------------  if
13298                 | ' 
13298                 | ' sub do_if
13298                 | _do_if
13298     05 CA 05 F6 | 	mov	COUNT_, #5
1329c     E8 00 A0 FD | 	call	#pushregs_
132a0     CC A3 BF FD | 	call	#_pop
132a4     3D A7 0A F6 | 	mov	local01, result1 wz
132a8     3E A9 02 F6 | 	mov	local02, result2
132ac     3F AB 02 F6 | 	mov	local03, result3
132b0                 | ' t1=pop()
132b0                 | ' ' if uresult=0, jump over else
132b0                 | ' if t1.result.uresult = 0 then 
132b0     BC 00 90 5D |  if_ne	jmp	#LR__1642
132b4                 | '   for i=lineptr_e to lineptr-1
132b4     4C 00 00 FF 
132b8     24 64 06 F1 | 	add	objptr, ##38948
132bc     32 AD 02 FB | 	rdlong	local04, objptr
132c0     04 64 86 F1 | 	sub	objptr, #4
132c4     32 AF 02 FB | 	rdlong	local05, objptr
132c8     4C 00 00 FF 
132cc     20 64 86 F1 | 	sub	objptr, ##38944
132d0                 | LR__1640
132d0     57 AD 52 F2 | 	cmps	local04, local05 wc
132d4     78 00 90 3D |  if_ae	jmp	#LR__1641
132d8     56 7F 02 F6 | 	mov	result3, local04
132dc     01 7E 66 F0 | 	shl	result3, #1
132e0     56 7F 02 F1 | 	add	result3, local04
132e4     02 7E 66 F0 | 	shl	result3, #2
132e8     49 00 00 FF 
132ec     20 64 06 F1 | 	add	objptr, ##37408
132f0     32 7F 02 F1 | 	add	result3, objptr
132f4     3F A7 02 FB | 	rdlong	local01, result3
132f8     04 7E 06 F1 | 	add	result3, #4
132fc     3F 7D 02 FB | 	rdlong	result2, result3
13300     56 7F 02 F6 | 	mov	result3, local04
13304     01 7E 66 F0 | 	shl	result3, #1
13308     56 7F 02 F1 | 	add	result3, local04
1330c     02 7E 66 F0 | 	shl	result3, #2
13310     32 7F 02 F1 | 	add	result3, objptr
13314     08 7E 06 F1 | 	add	result3, #8
13318     3F 7F 02 FB | 	rdlong	result3, result3
1331c     3E A9 02 F6 | 	mov	local02, result2
13320     3F AB 02 F6 | 	mov	local03, result3
13324                 | '     t1=compiledline(i)
13324                 | '     if t1.result_type=token_else then lineptr_e=i : return
13324     5A AA 0E F2 | 	cmp	local03, #90 wz
13328     49 00 00 FF 
1332c     20 64 86 F1 | 	sub	objptr, ##37408
13330     4C 00 00 AF 
13334     24 64 06 A1 |  if_e	add	objptr, ##38948
13338     32 AD 62 AC |  if_e	wrlong	local04, objptr
1333c     4C 00 00 AF 
13340     24 64 86 A1 |  if_e	sub	objptr, ##38948
13344     28 00 90 AD |  if_e	jmp	#LR__1643
13348     01 AC 06 F1 | 	add	local04, #1
1334c     80 FF 9F FD | 	jmp	#LR__1640
13350                 | LR__1641
13350     4C 00 00 FF 
13354     20 64 06 F1 | 	add	objptr, ##38944
13358     32 AF 02 FB | 	rdlong	local05, objptr
1335c     01 AE 86 F1 | 	sub	local05, #1
13360     04 64 06 F1 | 	add	objptr, #4
13364     32 AF 62 FC | 	wrlong	local05, objptr
13368     4C 00 00 FF 
1336c     24 64 86 F1 | 	sub	objptr, ##38948
13370                 | LR__1642
13370                 | LR__1643
13370     E7 F0 03 F6 | 	mov	ptra, fp
13374     F2 00 A0 FD | 	call	#popregs_
13378                 | _do_if_ret
13378     2D 00 64 FD | 	ret
1337c                 | 
1337c                 | ' 
1337c                 | ' ' ----------------  inkey$
1337c                 | ' 
1337c                 | ' sub do_inkey
1337c                 | _do_inkey
1337c     02 CA 05 F6 | 	mov	COUNT_, #2
13380     E8 00 A0 FD | 	call	#pushregs_
13384     0C F0 07 F1 | 	add	ptra, #12
13388     C0 0C B1 FD | 	call	#_usbnew_spin2_get_key
1338c     47 00 00 FF 
13390     18 64 06 F1 | 	add	objptr, ##36376
13394     32 7B 62 FC | 	wrlong	result1, objptr
13398                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
13398     47 00 00 FF 
1339c     18 64 86 F1 | 	sub	objptr, ##36376
133a0     00 7A 0E F2 | 	cmp	result1, #0 wz
133a4     A0 00 90 AD |  if_e	jmp	#LR__1651
133a8     47 00 00 FF 
133ac     18 64 06 F1 | 	add	objptr, ##36376
133b0     32 A3 02 FB | 	rdlong	arg09, objptr
133b4     47 00 00 FF 
133b8     18 64 86 F1 | 	sub	objptr, ##36376
133bc     00 00 40 FF 
133c0     00 A2 16 F2 | 	cmp	arg09, ##-2147483648 wc
133c4     47 00 00 CF 
133c8     18 64 06 C1 |  if_b	add	objptr, ##36376
133cc     32 A7 02 CB |  if_b	rdlong	local01, objptr
133d0     47 00 00 CF 
133d4     18 64 86 C1 |  if_b	sub	objptr, ##36376
133d8     53 A7 E2 C8 |  if_b	getbyte	local01, local01, #0
133dc     E0 A6 16 C2 |  if_b	cmp	local01, #224 wc
133e0     64 00 90 3D |  if_ae	jmp	#LR__1651
133e4                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len) 
133e4     52 00 00 FF 
133e8     E0 64 06 F1 | 	add	objptr, ##42208
133ec     32 A3 02 FB | 	rdlong	arg09, objptr
133f0     52 00 00 FF 
133f4     E0 64 86 F1 | 	sub	objptr, ##42208
133f8     01 A2 0E F2 | 	cmp	arg09, #1 wz
133fc     48 00 90 5D |  if_ne	jmp	#LR__1650
13400     54 00 00 FF 
13404     80 64 06 F1 | 	add	objptr, ##43136
13408     32 95 02 FB | 	rdlong	arg02, objptr
1340c     04 64 86 F1 | 	sub	objptr, #4
13410     32 9B 02 FB | 	rdlong	arg05, objptr
13414     07 92 06 F6 | 	mov	arg01, #7
13418     56 00 00 FF 
1341c     44 96 06 F6 | 	mov	arg03, ##44100
13420     0C 98 C6 F9 | 	decod	arg04, #12
13424     01 9C 66 F6 | 	neg	arg06, #1
13428     01 9E 66 F6 | 	neg	arg07, #1
1342c     01 A0 66 F6 | 	neg	arg08, #1
13430     01 A2 66 F6 | 	neg	arg09, #1
13434     48 00 00 FF 
13438     B0 65 86 F1 | 	sub	objptr, ##37296
1343c     1C 10 B1 FD | 	call	#_Audio2_004_spin2_play
13440     0B 00 00 FF 
13444     CC 64 86 F1 | 	sub	objptr, ##5836
13448                 | LR__1650
13448                 | LR__1651
13448                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
13448     47 00 00 FF 
1344c     18 64 06 F1 | 	add	objptr, ##36376
13450     32 A3 0A FB | 	rdlong	arg09, objptr wz
13454     47 00 00 FF 
13458     18 64 86 F1 | 	sub	objptr, ##36376
1345c     D4 01 90 AD |  if_e	jmp	#LR__1660
13460     47 00 00 FF 
13464     18 64 06 F1 | 	add	objptr, ##36376
13468     32 A3 02 FB | 	rdlong	arg09, objptr
1346c     47 00 00 FF 
13470     18 64 86 F1 | 	sub	objptr, ##36376
13474     00 00 40 FF 
13478     00 A2 16 F2 | 	cmp	arg09, ##-2147483648 wc
1347c     47 00 00 CF 
13480     18 64 06 C1 |  if_b	add	objptr, ##36376
13484     32 A7 02 CB |  if_b	rdlong	local01, objptr
13488     47 00 00 CF 
1348c     18 64 86 C1 |  if_b	sub	objptr, ##36376
13490     53 A7 E2 C8 |  if_b	getbyte	local01, local01, #0
13494     E0 A6 16 C2 |  if_b	cmp	local01, #224 wc
13498     98 01 90 3D |  if_ae	jmp	#LR__1660
1349c                 | '   if leds and 2 = 2 then 
1349c     54 00 00 FF 
134a0     BC 64 06 F1 | 	add	objptr, ##43196
134a4     32 A7 0A FB | 	rdlong	local01, objptr wz
134a8     54 00 00 FF 
134ac     BC 64 86 F1 | 	sub	objptr, ##43196
134b0     58 01 90 AD |  if_e	jmp	#LR__1659
134b4                 | '     if key>96 andalso key<123 then
134b4     47 00 00 FF 
134b8     18 64 06 F1 | 	add	objptr, ##36376
134bc     32 A7 02 FB | 	rdlong	local01, objptr
134c0     47 00 00 FF 
134c4     18 64 86 F1 | 	sub	objptr, ##36376
134c8     61 A6 16 F2 | 	cmp	local01, #97 wc
134cc     3C 00 90 CD |  if_b	jmp	#LR__1652
134d0     47 00 00 FF 
134d4     18 64 06 F1 | 	add	objptr, ##36376
134d8     32 A7 02 FB | 	rdlong	local01, objptr
134dc     47 00 00 FF 
134e0     18 64 86 F1 | 	sub	objptr, ##36376
134e4     7B A6 16 F2 | 	cmp	local01, #123 wc
134e8     20 00 90 3D |  if_ae	jmp	#LR__1652
134ec     47 00 00 FF 
134f0     18 64 06 F1 | 	add	objptr, ##36376
134f4     32 A7 02 FB | 	rdlong	local01, objptr
134f8     20 A6 86 F1 | 	sub	local01, #32
134fc     32 A7 62 FC | 	wrlong	local01, objptr
13500     47 00 00 FF 
13504     18 64 86 F1 | 	sub	objptr, ##36376
13508     00 01 90 FD | 	jmp	#LR__1658
1350c                 | LR__1652
1350c     47 00 00 FF 
13510     18 64 06 F1 | 	add	objptr, ##36376
13514     32 A7 02 FB | 	rdlong	local01, objptr
13518     47 00 00 FF 
1351c     18 64 86 F1 | 	sub	objptr, ##36376
13520     41 A6 16 F2 | 	cmp	local01, #65 wc
13524     3C 00 90 CD |  if_b	jmp	#LR__1653
13528     47 00 00 FF 
1352c     18 64 06 F1 | 	add	objptr, ##36376
13530     32 A7 02 FB | 	rdlong	local01, objptr
13534     47 00 00 FF 
13538     18 64 86 F1 | 	sub	objptr, ##36376
1353c     5B A6 16 F2 | 	cmp	local01, #91 wc
13540     20 00 90 3D |  if_ae	jmp	#LR__1653
13544     47 00 00 FF 
13548     18 64 06 F1 | 	add	objptr, ##36376
1354c     32 A7 02 FB | 	rdlong	local01, objptr
13550     20 A6 06 F1 | 	add	local01, #32
13554     32 A7 62 FC | 	wrlong	local01, objptr
13558     47 00 00 FF 
1355c     18 64 86 F1 | 	sub	objptr, ##36376
13560     A8 00 90 FD | 	jmp	#LR__1657
13564                 | LR__1653
13564     47 00 00 FF 
13568     18 64 06 F1 | 	add	objptr, ##36376
1356c     32 A7 02 FB | 	rdlong	local01, objptr
13570     47 00 00 FF 
13574     18 64 86 F1 | 	sub	objptr, ##36376
13578     17 A6 16 F2 | 	cmp	local01, #23 wc
1357c     3C 00 90 CD |  if_b	jmp	#LR__1654
13580     47 00 00 FF 
13584     18 64 06 F1 | 	add	objptr, ##36376
13588     32 A7 02 FB | 	rdlong	local01, objptr
1358c     47 00 00 FF 
13590     18 64 86 F1 | 	sub	objptr, ##36376
13594     20 A6 16 F2 | 	cmp	local01, #32 wc
13598     20 00 90 3D |  if_ae	jmp	#LR__1654
1359c     47 00 00 FF 
135a0     18 64 06 F1 | 	add	objptr, ##36376
135a4     32 A7 02 FB | 	rdlong	local01, objptr
135a8     09 A6 86 F1 | 	sub	local01, #9
135ac     32 A7 62 FC | 	wrlong	local01, objptr
135b0     47 00 00 FF 
135b4     18 64 86 F1 | 	sub	objptr, ##36376
135b8     50 00 90 FD | 	jmp	#LR__1656
135bc                 | LR__1654
135bc     47 00 00 FF 
135c0     18 64 06 F1 | 	add	objptr, ##36376
135c4     32 A9 02 FB | 	rdlong	local02, objptr
135c8     47 00 00 FF 
135cc     18 64 86 F1 | 	sub	objptr, ##36376
135d0     0E A8 16 F2 | 	cmp	local02, #14 wc
135d4     34 00 90 CD |  if_b	jmp	#LR__1655
135d8     47 00 00 FF 
135dc     18 64 06 F1 | 	add	objptr, ##36376
135e0     32 A7 02 FB | 	rdlong	local01, objptr
135e4     47 00 00 FF 
135e8     18 64 86 F1 | 	sub	objptr, ##36376
135ec     17 A6 16 F2 | 	cmp	local01, #23 wc
135f0     54 00 00 CF 
135f4     C0 64 06 C1 |  if_b	add	objptr, ##43200
135f8     32 A9 02 CB |  if_b	rdlong	local02, objptr
135fc     27 A8 06 C1 |  if_b	add	local02, #39
13600     32 A9 62 CC |  if_b	wrlong	local02, objptr
13604     54 00 00 CF 
13608     C0 64 86 C1 |  if_b	sub	objptr, ##43200
1360c                 | LR__1655
1360c                 | LR__1656
1360c                 | LR__1657
1360c                 | LR__1658
1360c                 | LR__1659
1360c     47 00 00 FF 
13610     18 64 06 F1 | 	add	objptr, ##36376
13614     32 93 02 FB | 	rdlong	arg01, objptr
13618     47 00 00 FF 
1361c     18 64 86 F1 | 	sub	objptr, ##36376
13620     A4 DB B0 FD | 	call	#_scantochar
13624     3D 93 02 F6 | 	mov	arg01, result1
13628     E4 2F B1 FD | 	call	#__system__Chr_S
1362c     E7 7A 62 FC | 	wrlong	result1, fp
13630     0C 00 90 FD | 	jmp	#LR__1661
13634                 | LR__1660
13634     98 01 00 FF 
13638     4A A9 06 F6 | 	mov	local02, ##@LR__6021
1363c     E7 A8 62 FC | 	wrlong	local02, fp
13640                 | LR__1661
13640     08 CE 05 F1 | 	add	fp, #8
13644     E7 3E 68 FC | 	wrlong	#31, fp
13648     08 CE 85 F1 | 	sub	fp, #8
1364c     E7 92 02 F6 | 	mov	arg01, fp
13650     AC A0 BF FD | 	call	#_push
13654     E7 F0 03 F6 | 	mov	ptra, fp
13658     F2 00 A0 FD | 	call	#popregs_
1365c                 | _do_inkey_ret
1365c     2D 00 64 FD | 	ret
13660                 | 
13660                 | ' 
13660                 | ' ' ----------------  ink
13660                 | ' 
13660                 | ' sub do_ink
13660                 | _do_ink
13660     00 CA 05 F6 | 	mov	COUNT_, #0
13664     E8 00 A0 FD | 	call	#pushregs_
13668     0C F0 07 F1 | 	add	ptra, #12
1366c     00 A0 BF FD | 	call	#_pop
13670     3F 95 02 F6 | 	mov	arg02, result3
13674     E7 7A 62 FC | 	wrlong	result1, fp
13678     04 CE 05 F1 | 	add	fp, #4
1367c     E7 7C 62 FC | 	wrlong	result2, fp
13680     04 CE 05 F1 | 	add	fp, #4
13684     E7 94 62 FC | 	wrlong	arg02, fp
13688     08 CE 85 F1 | 	sub	fp, #8
1368c     E7 92 02 F6 | 	mov	arg01, fp
13690     B8 A1 BF FD | 	call	#_converttoint
13694     38 00 00 FF 
13698     E0 65 06 F1 | 	add	objptr, ##29152
1369c     32 7B 62 FC | 	wrlong	result1, objptr
136a0     04 64 86 F1 | 	sub	objptr, #4
136a4     32 95 02 FB | 	rdlong	arg02, objptr
136a8                 | ' 
136a8                 | ' write_color:=ff
136a8     38 00 00 FF 
136ac     9B 65 86 F1 | 	sub	objptr, ##29083
136b0     32 7B 62 FC | 	wrlong	result1, objptr
136b4                 | ' write_background:=bb
136b4     04 64 06 F1 | 	add	objptr, #4
136b8     32 95 62 FC | 	wrlong	arg02, objptr
136bc     38 00 00 FF 
136c0     9B 65 06 F1 | 	add	objptr, ##29083
136c4     32 93 02 FB | 	rdlong	arg01, objptr
136c8     38 00 00 FF 
136cc     E0 65 86 F1 | 	sub	objptr, ##29152
136d0     A0 E3 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
136d4     E7 F0 03 F6 | 	mov	ptra, fp
136d8     F2 00 A0 FD | 	call	#popregs_
136dc                 | _do_ink_ret
136dc     2D 00 64 FD | 	ret
136e0                 | 
136e0                 | ' 
136e0                 | ' ' ----------------  int
136e0                 | ' 
136e0                 | ' sub do_int
136e0                 | _do_int
136e0     02 CA 05 F6 | 	mov	COUNT_, #2
136e4     E8 00 A0 FD | 	call	#pushregs_
136e8     10 F0 07 F1 | 	add	ptra, #16
136ec     80 9F BF FD | 	call	#_pop
136f0     3E A7 02 F6 | 	mov	local01, result2
136f4     3F A9 02 F6 | 	mov	local02, result3
136f8     E7 7A 62 FC | 	wrlong	result1, fp
136fc     04 CE 05 F1 | 	add	fp, #4
13700     E7 A6 62 FC | 	wrlong	local01, fp
13704     04 CE 05 F1 | 	add	fp, #4
13708     E7 A8 62 FC | 	wrlong	local02, fp
1370c                 | ' 
1370c                 | ' t1=pop()
1370c                 | ' select case t1.result_type
1370c     08 CE 85 F1 | 	sub	fp, #8
13710     1E A8 0E F2 | 	cmp	local02, #30 wz
13714     14 00 90 AD |  if_e	jmp	#LR__1670
13718     1F A8 0E F2 | 	cmp	local02, #31 wz
1371c     20 00 90 AD |  if_e	jmp	#LR__1671
13720     2B A8 0E F2 | 	cmp	local02, #43 wz
13724     34 00 90 AD |  if_e	jmp	#LR__1672
13728     50 00 90 FD | 	jmp	#LR__1673
1372c                 | LR__1670
1372c     E7 92 02 FB | 	rdlong	arg01, fp
13730     00 94 06 F6 | 	mov	arg02, #0
13734     04 40 B1 FD | 	call	#__system___float_tointeger
13738     E7 7A 62 FC | 	wrlong	result1, fp
1373c     3C 00 90 FD | 	jmp	#LR__1673
13740                 | LR__1671
13740     E7 92 02 FB | 	rdlong	arg01, fp
13744     48 43 B1 FD | 	call	#__system____builtin_atof
13748     3D 93 02 F6 | 	mov	arg01, result1
1374c     00 94 06 F6 | 	mov	arg02, #0
13750     E8 3F B1 FD | 	call	#__system___float_tointeger
13754     E7 7A 62 FC | 	wrlong	result1, fp
13758     20 00 90 FD | 	jmp	#LR__1673
1375c                 | LR__1672
1375c     E7 92 02 FB | 	rdlong	arg01, fp
13760     7C A0 BF FD | 	call	#_convertstring
13764     3D 93 02 F6 | 	mov	arg01, result1
13768     24 43 B1 FD | 	call	#__system____builtin_atof
1376c     3D 93 02 F6 | 	mov	arg01, result1
13770     00 94 06 F6 | 	mov	arg02, #0
13774     C4 3F B1 FD | 	call	#__system___float_tointeger
13778     E7 7A 62 FC | 	wrlong	result1, fp
1377c                 | LR__1673
1377c     08 CE 05 F1 | 	add	fp, #8
13780     E7 38 68 FC | 	wrlong	#28, fp
13784     08 CE 85 F1 | 	sub	fp, #8
13788     E7 92 02 F6 | 	mov	arg01, fp
1378c     70 9F BF FD | 	call	#_push
13790     E7 F0 03 F6 | 	mov	ptra, fp
13794     F2 00 A0 FD | 	call	#popregs_
13798                 | _do_int_ret
13798     2D 00 64 FD | 	ret
1379c                 | 
1379c                 | ' 
1379c                 | ' ' ----------------  input
1379c                 | ' 
1379c                 | ' sub do_input
1379c                 | _do_input
1379c     1A CA 05 F6 | 	mov	COUNT_, #26
137a0     E8 00 A0 FD | 	call	#pushregs_
137a4     50 F1 07 F1 | 	add	ptra, #336
137a8     4C 00 00 FF 
137ac     24 64 06 F1 | 	add	objptr, ##38948
137b0     32 AD 02 FB | 	rdlong	local04, objptr
137b4     56 AF 02 F6 | 	mov	local05, local04
137b8     01 AE 66 F0 | 	shl	local05, #1
137bc     56 AF 02 F1 | 	add	local05, local04
137c0     02 AE 66 F0 | 	shl	local05, #2
137c4     03 00 00 FF 
137c8     04 64 86 F1 | 	sub	objptr, ##1540
137cc     32 B1 02 F6 | 	mov	local06, objptr
137d0     32 AF 02 F1 | 	add	local05, objptr
137d4     57 B3 02 FB | 	rdlong	local07, local05
137d8                 | ' 
137d8                 | ' numpar=compiledline(lineptr_e).result.uresult
137d8                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
137d8     01 B2 16 F2 | 	cmp	local07, #1 wc
137dc     49 00 00 FF 
137e0     20 64 86 F1 | 	sub	objptr, ##37408
137e4     08 00 90 CD |  if_b	jmp	#LR__1680
137e8     41 B2 16 F2 | 	cmp	local07, #65 wc
137ec     50 00 90 CD |  if_b	jmp	#LR__1681
137f0                 | LR__1680
137f0     00 92 06 F6 | 	mov	arg01, #0
137f4     30 69 B1 FD | 	call	#__system___getiolock_0622
137f8     3D 93 02 F6 | 	mov	arg01, result1
137fc     A4 13 B1 FD | 	call	#__system___lockmem
13800     98 01 00 FF 
13804     4B 95 06 F6 | 	mov	arg02, ##@LR__6022
13808     00 92 06 F6 | 	mov	arg01, #0
1380c     00 96 06 F6 | 	mov	arg03, #0
13810     84 20 B1 FD | 	call	#__system___basic_print_string
13814     00 92 06 F6 | 	mov	arg01, #0
13818     0C 69 B1 FD | 	call	#__system___getiolock_0622
1381c     3D 01 68 FC | 	wrlong	#0, result1
13820     52 00 00 FF 
13824     94 64 06 F1 | 	add	objptr, ##42132
13828     32 95 02 FB | 	rdlong	arg02, objptr
1382c     52 00 00 FF 
13830     94 64 86 F1 | 	sub	objptr, ##42132
13834     27 92 06 F6 | 	mov	arg01, #39
13838     44 D6 B0 FD | 	call	#_printerror
1383c     5C 08 90 FD | 	jmp	#LR__1727
13840                 | LR__1681
13840     59 B5 02 F6 | 	mov	local08, local07
13844     01 B4 86 F1 | 	sub	local08, #1
13848     3C 64 06 F1 | 	add	objptr, #60
1384c     32 AD E2 FA | 	rdword	local04, objptr
13850     56 B7 52 F6 | 	abs	local09, local04 wc
13854     01 B6 46 F0 | 	shr	local09, #1
13858     5B B7 82 F6 | 	negc	local09, local09
1385c     02 64 06 F1 | 	add	objptr, #2
13860     32 B9 C2 FA | 	rdbyte	local10, objptr
13864     3E 64 86 F1 | 	sub	objptr, #62
13868                 | ' i=numpar-1
13868                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13868                 | ' do
13868                 | LR__1682
13868     98 D0 BE FD | 	call	#_edit
1386c     3D BB 02 F6 | 	mov	local11, result1
13870                 | ' 
13870                 | '   line$=edit()
13870                 | ' 
13870                 | '   if v.cursor_y=cpy+1 then
13870     3E 64 06 F1 | 	add	objptr, #62
13874     32 97 C2 FA | 	rdbyte	arg03, objptr
13878     3E 64 86 F1 | 	sub	objptr, #62
1387c     5C AD 02 F6 | 	mov	local04, local10
13880     01 AC 06 F1 | 	add	local04, #1
13884     56 97 0A F2 | 	cmp	arg03, local04 wz
13888     5C 00 90 5D |  if_ne	jmp	#LR__1685
1388c     5D 93 02 F6 | 	mov	arg01, local11
13890     49 BD 02 F6 | 	mov	local12, arg01
13894     D7 06 48 FB | 	callpa	#(@LR__1684-@LR__1683)>>2,fcache_load_ptr_
13898                 | LR__1683
13898     5E 7B CA FA | 	rdbyte	result1, local12 wz
1389c     01 BC 06 51 |  if_ne	add	local12, #1
138a0     F4 FF 9F 5D |  if_ne	jmp	#LR__1683
138a4                 | LR__1684
138a4     49 BD 82 F1 | 	sub	local12, arg01
138a8     5E 95 02 F6 | 	mov	arg02, local12
138ac     5B 95 82 F1 | 	sub	arg02, local09
138b0     38 00 00 FF 
138b4     D8 65 06 F1 | 	add	objptr, ##29144
138b8     32 AD 02 FB | 	rdlong	local04, objptr
138bc     38 00 00 FF 
138c0     D8 65 86 F1 | 	sub	objptr, ##29144
138c4     56 95 02 F1 | 	add	arg02, local04
138c8     5D 93 02 F6 | 	mov	arg01, local11
138cc     04 2C B1 FD | 	call	#__system__Right_S
138d0     3D 93 02 F6 | 	mov	arg01, result1
138d4     04 30 B1 FD | 	call	#__system__RTrim_S
138d8     3D 93 02 F6 | 	mov	arg01, result1
138dc     3C 2F B1 FD | 	call	#__system__LTrim_S
138e0     3D BB 02 F6 | 	mov	local11, result1
138e4     14 00 90 FD | 	jmp	#LR__1686
138e8                 | LR__1685
138e8     5D 93 02 F6 | 	mov	arg01, local11
138ec     EC 2F B1 FD | 	call	#__system__RTrim_S
138f0     3D 93 02 F6 | 	mov	arg01, result1
138f4     24 2F B1 FD | 	call	#__system__LTrim_S
138f8     3D BB 02 F6 | 	mov	local11, result1
138fc                 | LR__1686
138fc                 | '   do
138fc                 | LR__1687
138fc     98 01 00 FF 
13900     56 97 06 F6 | 	mov	arg03, ##@LR__6023
13904     01 92 06 F6 | 	mov	arg01, #1
13908     5D 95 02 F6 | 	mov	arg02, local11
1390c     84 30 B1 FD | 	call	#__system__Instr
13910     3D BF 02 F6 | 	mov	local13, result1
13914                 | '    comma=instr(1,line$,",")  
13914                 | '    if comma>0  then 
13914     01 BE 16 F2 | 	cmp	local13, #1 wc
13918     48 00 90 CD |  if_b	jmp	#LR__1690
1391c     5F 95 02 F6 | 	mov	arg02, local13
13920     01 94 86 F1 | 	sub	arg02, #1
13924     5D 93 02 F6 | 	mov	arg01, local11
13928     20 2B B1 FD | 	call	#__system__Left_S
1392c     3D C1 02 F6 | 	mov	local14, result1
13930     5D 93 02 F6 | 	mov	arg01, local11
13934     49 BD 02 F6 | 	mov	local12, arg01
13938     D7 06 48 FB | 	callpa	#(@LR__1689-@LR__1688)>>2,fcache_load_ptr_
1393c                 | LR__1688
1393c     5E 7B CA FA | 	rdbyte	result1, local12 wz
13940     01 BC 06 51 |  if_ne	add	local12, #1
13944     F4 FF 9F 5D |  if_ne	jmp	#LR__1688
13948                 | LR__1689
13948     49 BD 82 F1 | 	sub	local12, arg01
1394c     5E 95 02 F6 | 	mov	arg02, local12
13950     5F 95 82 F1 | 	sub	arg02, local13
13954     5D 93 02 F6 | 	mov	arg01, local11
13958     78 2B B1 FD | 	call	#__system__Right_S
1395c     3D BB 02 F6 | 	mov	local11, result1
13960     1C 00 90 FD | 	jmp	#LR__1691
13964                 | LR__1690
13964     5D 93 02 F6 | 	mov	arg01, local11
13968     70 2F B1 FD | 	call	#__system__RTrim_S
1396c     3D 93 02 F6 | 	mov	arg01, result1
13970     A8 2E B1 FD | 	call	#__system__LTrim_S
13974     3D C1 02 F6 | 	mov	local14, result1
13978     98 01 00 FF 
1397c     58 BB 06 F6 | 	mov	local11, ##@LR__6024
13980                 | LR__1691
13980     5A 95 02 F6 | 	mov	arg02, local08
13984     02 94 66 F0 | 	shl	arg02, #2
13988     E7 AC 02 F6 | 	mov	local04, fp
1398c     2C AC 06 F1 | 	add	local04, #44
13990     56 95 02 F1 | 	add	arg02, local04
13994     4A C1 62 FC | 	wrlong	local14, arg02
13998     01 B4 86 F1 | 	sub	local08, #1
1399c     00 B4 56 F2 | 	cmps	local08, #0 wc
139a0     18 00 90 CD |  if_b	jmp	#LR__1692
139a4     98 01 00 FF 
139a8     59 95 06 F6 | 	mov	arg02, ##@LR__6025
139ac     5D 93 02 F6 | 	mov	arg01, local11
139b0     18 12 B1 FD | 	call	#__system___string_cmp
139b4     00 7A 0E F2 | 	cmp	result1, #0 wz
139b8     40 FF 9F 5D |  if_ne	jmp	#LR__1687
139bc                 | LR__1692
139bc     00 B4 56 F2 | 	cmps	local08, #0 wc
139c0     A4 FE 9F 3D |  if_ae	jmp	#LR__1682
139c4                 | ' 
139c4                 | ' for i=0 to numpar-1
139c4     00 B4 06 F6 | 	mov	local08, #0
139c8     59 C3 02 F6 | 	mov	local15, local07
139cc                 | LR__1693
139cc     61 B5 52 F2 | 	cmps	local08, local15 wc
139d0     C8 06 90 3D |  if_ae	jmp	#LR__1726
139d4                 | ' 
139d4                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
139d4     5A AF 02 F6 | 	mov	local05, local08
139d8     02 AE 66 F0 | 	shl	local05, #2
139dc     E7 B0 02 F6 | 	mov	local06, fp
139e0     2C B0 06 F1 | 	add	local06, #44
139e4     58 AF 02 F1 | 	add	local05, local06
139e8     57 93 02 FB | 	rdlong	arg01, local05
139ec     64 30 BF FD | 	call	#_isnum
139f0     3D B1 02 F6 | 	mov	local06, result1
139f4     5A C5 02 F6 | 	mov	local16, local08
139f8     02 C4 66 F0 | 	shl	local16, #2
139fc     E7 C6 02 F6 | 	mov	local17, fp
13a00     2C C6 06 F1 | 	add	local17, #44
13a04     63 C5 02 F1 | 	add	local16, local17
13a08     62 93 02 FB | 	rdlong	arg01, local16
13a0c     30 34 BF FD | 	call	#_isint
13a10     07 7A 66 F7 | 	signx	result1, #7
13a14     3D B1 2A F5 | 	andn	local06, result1 wz
13a18     54 00 00 5F 
13a1c     EC 64 06 51 |  if_ne	add	objptr, ##43244
13a20     32 3D 68 5C |  if_ne	wrlong	#30, objptr
13a24     54 00 00 5F 
13a28     EC 64 86 51 |  if_ne	sub	objptr, ##43244
13a2c                 | '   if isint(args(i)) then r=result_int 
13a2c     5A AD 02 F6 | 	mov	local04, local08
13a30     02 AC 66 F0 | 	shl	local04, #2
13a34     E7 AE 02 F6 | 	mov	local05, fp
13a38     2C AE 06 F1 | 	add	local05, #44
13a3c     57 AD 02 F1 | 	add	local04, local05
13a40     56 93 02 FB | 	rdlong	arg01, local04
13a44     F8 33 BF FD | 	call	#_isint
13a48     00 7A 0E F2 | 	cmp	result1, #0 wz
13a4c     54 00 00 5F 
13a50     EC 64 06 51 |  if_ne	add	objptr, ##43244
13a54     32 39 68 5C |  if_ne	wrlong	#28, objptr
13a58     54 00 00 5F 
13a5c     EC 64 86 51 |  if_ne	sub	objptr, ##43244
13a60                 | '   if isdec(args(i)) then r=result_uint 
13a60     5A AD 02 F6 | 	mov	local04, local08
13a64     02 AC 66 F0 | 	shl	local04, #2
13a68     E7 AE 02 F6 | 	mov	local05, fp
13a6c     2C AE 06 F1 | 	add	local05, #44
13a70     57 AD 02 F1 | 	add	local04, local05
13a74     56 93 02 FB | 	rdlong	arg01, local04
13a78     68 36 BF FD | 	call	#_isdec
13a7c     00 7A 0E F2 | 	cmp	result1, #0 wz
13a80     54 00 00 5F 
13a84     EC 64 06 51 |  if_ne	add	objptr, ##43244
13a88     32 3B 68 5C |  if_ne	wrlong	#29, objptr
13a8c     54 00 00 5F 
13a90     EC 64 86 51 |  if_ne	sub	objptr, ##43244
13a94                 | '   if not isnum(args(i)) then 
13a94     5A AF 02 F6 | 	mov	local05, local08
13a98     02 AE 66 F0 | 	shl	local05, #2
13a9c     E7 B0 02 F6 | 	mov	local06, fp
13aa0     2C B0 06 F1 | 	add	local06, #44
13aa4     58 AF 02 F1 | 	add	local05, local06
13aa8     57 93 02 FB | 	rdlong	arg01, local05
13aac     A4 2F BF FD | 	call	#_isnum
13ab0     07 7A 66 F7 | 	signx	result1, #7
13ab4     3D 7B 22 F6 | 	not	result1, result1
13ab8     00 7A 0E F2 | 	cmp	result1, #0 wz
13abc     E8 00 90 AD |  if_e	jmp	#LR__1698
13ac0     54 00 00 FF 
13ac4     EC 64 06 F1 | 	add	objptr, ##43244
13ac8     32 57 68 FC | 	wrlong	#43, objptr
13acc     54 00 00 FF 
13ad0     EC 64 86 F1 | 	sub	objptr, ##43244
13ad4     60 93 02 F6 | 	mov	arg01, local14
13ad8     49 BD 02 F6 | 	mov	local12, arg01
13adc     D7 06 48 FB | 	callpa	#(@LR__1695-@LR__1694)>>2,fcache_load_ptr_
13ae0                 | LR__1694
13ae0     5E 7B CA FA | 	rdbyte	result1, local12 wz
13ae4     01 BC 06 51 |  if_ne	add	local12, #1
13ae8     F4 FF 9F 5D |  if_ne	jmp	#LR__1694
13aec                 | LR__1695
13aec     49 BD 82 F1 | 	sub	local12, arg01
13af0     5E C9 02 F6 | 	mov	local18, local12
13af4     54 00 00 FF 
13af8     74 64 06 F1 | 	add	objptr, ##43124
13afc     32 93 02 FB | 	rdlong	arg01, objptr
13b00     64 93 82 F1 | 	sub	arg01, local18
13b04     04 92 86 F1 | 	sub	arg01, #4
13b08     03 92 26 F5 | 	andn	arg01, #3
13b0c     32 93 62 FC | 	wrlong	arg01, objptr
13b10     54 00 00 FF 
13b14     74 64 86 F1 | 	sub	objptr, ##43124
13b18     64 95 02 F6 | 	mov	arg02, local18
13b1c     F8 D4 B0 FD | 	call	#_pslpoke
13b20                 | '     pslpoke memtop,l
13b20                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
13b20     01 CA 06 F6 | 	mov	local19, #1
13b24     64 CD 02 F6 | 	mov	local20, local18
13b28     01 CC 06 F1 | 	add	local20, #1
13b2c                 | LR__1696
13b2c     66 CB 52 F2 | 	cmps	local19, local20 wc
13b30     60 00 90 3D |  if_ae	jmp	#LR__1697
13b34     54 00 00 FF 
13b38     74 64 06 F1 | 	add	objptr, ##43124
13b3c     32 AD 02 FB | 	rdlong	local04, objptr
13b40     54 00 00 FF 
13b44     74 64 86 F1 | 	sub	objptr, ##43124
13b48     03 AC 06 F1 | 	add	local04, #3
13b4c     65 AD 02 F1 | 	add	local04, local19
13b50     5A C5 02 F6 | 	mov	local16, local08
13b54     02 C4 66 F0 | 	shl	local16, #2
13b58     E7 C6 02 F6 | 	mov	local17, fp
13b5c     2C C6 06 F1 | 	add	local17, #44
13b60     63 C5 02 F1 | 	add	local16, local17
13b64     62 93 02 FB | 	rdlong	arg01, local16
13b68     65 B1 02 F6 | 	mov	local06, local19
13b6c     01 C4 06 F6 | 	mov	local16, #1
13b70     58 95 02 F6 | 	mov	arg02, local06
13b74     01 96 06 F6 | 	mov	arg03, #1
13b78     E8 29 B1 FD | 	call	#__system__Mid_S
13b7c     3D AF 02 F6 | 	mov	local05, result1
13b80     57 95 C2 FA | 	rdbyte	arg02, local05
13b84     56 93 02 F6 | 	mov	arg01, local04
13b88     1C D5 B0 FD | 	call	#_pspoke
13b8c     01 CA 06 F1 | 	add	local19, #1
13b90     98 FF 9F FD | 	jmp	#LR__1696
13b94                 | LR__1697
13b94     54 00 00 FF 
13b98     74 64 06 F1 | 	add	objptr, ##43124
13b9c     32 CF 02 FB | 	rdlong	local21, objptr
13ba0     54 00 00 FF 
13ba4     74 64 86 F1 | 	sub	objptr, ##43124
13ba8                 | LR__1698
13ba8     C4 9A BF FD | 	call	#_pop
13bac     3D D1 02 F6 | 	mov	local22, result1
13bb0     3E D3 02 F6 | 	mov	local23, result2
13bb4     3F AD 02 F6 | 	mov	local04, result3
13bb8     68 A7 02 F6 | 	mov	local01, local22
13bbc     69 A9 02 F6 | 	mov	local02, local23
13bc0     56 AB 02 F6 | 	mov	local03, local04
13bc4     54 D5 02 F6 | 	mov	local24, local02
13bc8                 | '   t1=pop() : vartype=t1.result.twowords(1)
13bc8                 | '   select case vartype
13bc8     6A D7 0A F6 | 	mov	local25, local24 wz
13bcc     64 00 90 AD |  if_e	jmp	#LR__1699
13bd0     00 D7 0E F2 | 	cmp	local25, #256 wz
13bd4     64 00 90 AD |  if_e	jmp	#LR__1700
13bd8     01 D7 0E F2 | 	cmp	local25, #257 wz
13bdc     64 00 90 AD |  if_e	jmp	#LR__1701
13be0     02 D7 0E F2 | 	cmp	local25, #258 wz
13be4     64 00 90 AD |  if_e	jmp	#LR__1702
13be8     03 D7 0E F2 | 	cmp	local25, #259 wz
13bec     64 00 90 AD |  if_e	jmp	#LR__1703
13bf0     04 D7 0E F2 | 	cmp	local25, #260 wz
13bf4     64 00 90 AD |  if_e	jmp	#LR__1704
13bf8     05 D7 0E F2 | 	cmp	local25, #261 wz
13bfc     64 00 90 AD |  if_e	jmp	#LR__1705
13c00     06 D7 0E F2 | 	cmp	local25, #262 wz
13c04     64 00 90 AD |  if_e	jmp	#LR__1706
13c08     07 D7 0E F2 | 	cmp	local25, #263 wz
13c0c     64 00 90 AD |  if_e	jmp	#LR__1707
13c10     08 D7 0E F2 | 	cmp	local25, #264 wz
13c14     64 00 90 AD |  if_e	jmp	#LR__1708
13c18     09 D7 0E F2 | 	cmp	local25, #265 wz
13c1c     64 00 90 AD |  if_e	jmp	#LR__1709
13c20     0A D7 0E F2 | 	cmp	local25, #266 wz
13c24     64 00 90 AD |  if_e	jmp	#LR__1710
13c28     0B D7 0E F2 | 	cmp	local25, #267 wz
13c2c     64 00 90 AD |  if_e	jmp	#LR__1711
13c30     68 00 90 FD | 	jmp	#LR__1712
13c34                 | LR__1699
13c34     0C D8 06 F6 | 	mov	local26, #12
13c38     64 00 90 FD | 	jmp	#LR__1713
13c3c                 | LR__1700
13c3c     0C D8 06 F6 | 	mov	local26, #12
13c40     5C 00 90 FD | 	jmp	#LR__1713
13c44                 | LR__1701
13c44     01 D8 06 F6 | 	mov	local26, #1
13c48     54 00 90 FD | 	jmp	#LR__1713
13c4c                 | LR__1702
13c4c     01 D8 06 F6 | 	mov	local26, #1
13c50     4C 00 90 FD | 	jmp	#LR__1713
13c54                 | LR__1703
13c54     02 D8 06 F6 | 	mov	local26, #2
13c58     44 00 90 FD | 	jmp	#LR__1713
13c5c                 | LR__1704
13c5c     02 D8 06 F6 | 	mov	local26, #2
13c60     3C 00 90 FD | 	jmp	#LR__1713
13c64                 | LR__1705
13c64     04 D8 06 F6 | 	mov	local26, #4
13c68     34 00 90 FD | 	jmp	#LR__1713
13c6c                 | LR__1706
13c6c     04 D8 06 F6 | 	mov	local26, #4
13c70     2C 00 90 FD | 	jmp	#LR__1713
13c74                 | LR__1707
13c74     08 D8 06 F6 | 	mov	local26, #8
13c78     24 00 90 FD | 	jmp	#LR__1713
13c7c                 | LR__1708
13c7c     08 D8 06 F6 | 	mov	local26, #8
13c80     1C 00 90 FD | 	jmp	#LR__1713
13c84                 | LR__1709
13c84     06 D8 06 F6 | 	mov	local26, #6
13c88     14 00 90 FD | 	jmp	#LR__1713
13c8c                 | LR__1710
13c8c     08 D8 06 F6 | 	mov	local26, #8
13c90     0C 00 90 FD | 	jmp	#LR__1713
13c94                 | LR__1711
13c94     05 D8 06 F6 | 	mov	local26, #5
13c98     04 00 90 FD | 	jmp	#LR__1713
13c9c                 | LR__1712
13c9c     0C D8 06 F6 | 	mov	local26, #12
13ca0                 | LR__1713
13ca0                 | '   if esize=12 andalso t1.result.uresult<$80000 then
13ca0     0C D8 0E F2 | 	cmp	local26, #12 wz
13ca4     34 01 90 5D |  if_ne	jmp	#LR__1717
13ca8     00 04 00 FF 
13cac     00 A6 16 F2 | 	cmp	local01, ##524288 wc
13cb0     28 01 90 3D |  if_ae	jmp	#LR__1717
13cb4                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
13cb4     54 00 00 FF 
13cb8     EC 64 06 F1 | 	add	objptr, ##43244
13cbc     32 D1 02 FB | 	rdlong	local22, objptr
13cc0     54 00 00 FF 
13cc4     EC 64 86 F1 | 	sub	objptr, ##43244
13cc8     1C D0 0E F2 | 	cmp	local22, #28 wz
13ccc     2C 00 90 5D |  if_ne	jmp	#LR__1714
13cd0     5A AF 02 F6 | 	mov	local05, local08
13cd4     02 AE 66 F0 | 	shl	local05, #2
13cd8     E7 B0 02 F6 | 	mov	local06, fp
13cdc     2C B0 06 F1 | 	add	local06, #44
13ce0     58 AF 02 F1 | 	add	local05, local06
13ce4     57 93 02 FB | 	rdlong	arg01, local05
13ce8     00 94 06 F6 | 	mov	arg02, #0
13cec     08 3C B1 FD | 	call	#__system____builtin_atoi
13cf0     3D 95 02 F6 | 	mov	arg02, result1
13cf4     53 93 02 F6 | 	mov	arg01, local01
13cf8     49 95 62 FC | 	wrlong	arg02, arg01
13cfc                 | LR__1714
13cfc                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
13cfc     54 00 00 FF 
13d00     EC 64 06 F1 | 	add	objptr, ##43244
13d04     32 D1 02 FB | 	rdlong	local22, objptr
13d08     54 00 00 FF 
13d0c     EC 64 86 F1 | 	sub	objptr, ##43244
13d10     1D D0 0E F2 | 	cmp	local22, #29 wz
13d14     2C 00 90 5D |  if_ne	jmp	#LR__1715
13d18     5A AF 02 F6 | 	mov	local05, local08
13d1c     02 AE 66 F0 | 	shl	local05, #2
13d20     E7 B0 02 F6 | 	mov	local06, fp
13d24     2C B0 06 F1 | 	add	local06, #44
13d28     58 AF 02 F1 | 	add	local05, local06
13d2c     57 93 02 FB | 	rdlong	arg01, local05
13d30     00 94 06 F6 | 	mov	arg02, #0
13d34     C0 3B B1 FD | 	call	#__system____builtin_atoi
13d38     3D 95 02 F6 | 	mov	arg02, result1
13d3c     53 93 02 F6 | 	mov	arg01, local01
13d40     49 95 62 FC | 	wrlong	arg02, arg01
13d44                 | LR__1715
13d44                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
13d44     54 00 00 FF 
13d48     EC 64 06 F1 | 	add	objptr, ##43244
13d4c     32 D1 02 FB | 	rdlong	local22, objptr
13d50     54 00 00 FF 
13d54     EC 64 86 F1 | 	sub	objptr, ##43244
13d58     1E D0 0E F2 | 	cmp	local22, #30 wz
13d5c     3C 00 90 5D |  if_ne	jmp	#LR__1716
13d60     5A AD 02 F6 | 	mov	local04, local08
13d64     02 AC 66 F0 | 	shl	local04, #2
13d68     E7 AE 02 F6 | 	mov	local05, fp
13d6c     2C AE 06 F1 | 	add	local05, #44
13d70     57 AD 02 F1 | 	add	local04, local05
13d74     56 93 02 FB | 	rdlong	arg01, local04
13d78     14 3D B1 FD | 	call	#__system____builtin_atof
13d7c     28 CE 05 F1 | 	add	fp, #40
13d80     E7 7A 62 FC | 	wrlong	result1, fp
13d84     E7 92 02 F6 | 	mov	arg01, fp
13d88     28 CE 85 F1 | 	sub	fp, #40
13d8c     49 7B 02 FB | 	rdlong	result1, arg01
13d90     3D 95 02 F6 | 	mov	arg02, result1
13d94     53 93 02 F6 | 	mov	arg01, local01
13d98     49 95 62 FC | 	wrlong	arg02, arg01
13d9c                 | LR__1716
13d9c                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
13d9c     54 00 00 FF 
13da0     EC 64 06 F1 | 	add	objptr, ##43244
13da4     32 D1 02 FB | 	rdlong	local22, objptr
13da8     2B D0 0E F2 | 	cmp	local22, #43 wz
13dac     53 93 02 A6 |  if_e	mov	arg01, local01
13db0     67 95 02 A6 |  if_e	mov	arg02, local21
13db4     49 95 62 AC |  if_e	wrlong	arg02, arg01
13db8     53 D1 02 F6 | 	mov	local22, local01
13dbc     08 D0 06 F1 | 	add	local22, #8
13dc0     32 AD 02 FB | 	rdlong	local04, objptr
13dc4     54 00 00 FF 
13dc8     EC 64 86 F1 | 	sub	objptr, ##43244
13dcc     56 D3 02 F6 | 	mov	local23, local04
13dd0     68 93 02 F6 | 	mov	arg01, local22
13dd4     69 95 02 F6 | 	mov	arg02, local23
13dd8     49 95 62 FC | 	wrlong	arg02, arg01
13ddc                 | LR__1717
13ddc                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
13ddc     0C D8 0E F2 | 	cmp	local26, #12 wz
13de0     38 01 90 5D |  if_ne	jmp	#LR__1721
13de4     00 04 00 FF 
13de8     00 A6 16 F2 | 	cmp	local01, ##524288 wc
13dec     2C 01 90 CD |  if_b	jmp	#LR__1721
13df0                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
13df0     54 00 00 FF 
13df4     EC 64 06 F1 | 	add	objptr, ##43244
13df8     32 D1 02 FB | 	rdlong	local22, objptr
13dfc     54 00 00 FF 
13e00     EC 64 86 F1 | 	sub	objptr, ##43244
13e04     1C D0 0E F2 | 	cmp	local22, #28 wz
13e08     2C 00 90 5D |  if_ne	jmp	#LR__1718
13e0c     5A AF 02 F6 | 	mov	local05, local08
13e10     02 AE 66 F0 | 	shl	local05, #2
13e14     E7 B0 02 F6 | 	mov	local06, fp
13e18     2C B0 06 F1 | 	add	local06, #44
13e1c     58 AF 02 F1 | 	add	local05, local06
13e20     57 93 02 FB | 	rdlong	arg01, local05
13e24     00 94 06 F6 | 	mov	arg02, #0
13e28     CC 3A B1 FD | 	call	#__system____builtin_atoi
13e2c     3D 95 02 F6 | 	mov	arg02, result1
13e30     53 93 02 F6 | 	mov	arg01, local01
13e34     E0 D1 B0 FD | 	call	#_pslpoke
13e38                 | LR__1718
13e38                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
13e38     54 00 00 FF 
13e3c     EC 64 06 F1 | 	add	objptr, ##43244
13e40     32 D1 02 FB | 	rdlong	local22, objptr
13e44     54 00 00 FF 
13e48     EC 64 86 F1 | 	sub	objptr, ##43244
13e4c     1D D0 0E F2 | 	cmp	local22, #29 wz
13e50     2C 00 90 5D |  if_ne	jmp	#LR__1719
13e54     5A AF 02 F6 | 	mov	local05, local08
13e58     02 AE 66 F0 | 	shl	local05, #2
13e5c     E7 B0 02 F6 | 	mov	local06, fp
13e60     2C B0 06 F1 | 	add	local06, #44
13e64     58 AF 02 F1 | 	add	local05, local06
13e68     57 93 02 FB | 	rdlong	arg01, local05
13e6c     00 94 06 F6 | 	mov	arg02, #0
13e70     84 3A B1 FD | 	call	#__system____builtin_atoi
13e74     3D 95 02 F6 | 	mov	arg02, result1
13e78     53 93 02 F6 | 	mov	arg01, local01
13e7c     98 D1 B0 FD | 	call	#_pslpoke
13e80                 | LR__1719
13e80                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13e80     54 00 00 FF 
13e84     EC 64 06 F1 | 	add	objptr, ##43244
13e88     32 D1 02 FB | 	rdlong	local22, objptr
13e8c     54 00 00 FF 
13e90     EC 64 86 F1 | 	sub	objptr, ##43244
13e94     1E D0 0E F2 | 	cmp	local22, #30 wz
13e98     38 00 90 5D |  if_ne	jmp	#LR__1720
13e9c     5A AD 02 F6 | 	mov	local04, local08
13ea0     02 AC 66 F0 | 	shl	local04, #2
13ea4     E7 AE 02 F6 | 	mov	local05, fp
13ea8     2C AE 06 F1 | 	add	local05, #44
13eac     57 AD 02 F1 | 	add	local04, local05
13eb0     56 93 02 FB | 	rdlong	arg01, local04
13eb4     D8 3B B1 FD | 	call	#__system____builtin_atof
13eb8     28 CE 05 F1 | 	add	fp, #40
13ebc     E7 7A 62 FC | 	wrlong	result1, fp
13ec0     E7 92 02 F6 | 	mov	arg01, fp
13ec4     28 CE 85 F1 | 	sub	fp, #40
13ec8     49 95 02 FB | 	rdlong	arg02, arg01
13ecc     53 93 02 F6 | 	mov	arg01, local01
13ed0     44 D1 B0 FD | 	call	#_pslpoke
13ed4                 | LR__1720
13ed4                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
13ed4     54 00 00 FF 
13ed8     EC 64 06 F1 | 	add	objptr, ##43244
13edc     32 D1 02 FB | 	rdlong	local22, objptr
13ee0     54 00 00 FF 
13ee4     EC 64 86 F1 | 	sub	objptr, ##43244
13ee8     2B D0 0E F2 | 	cmp	local22, #43 wz
13eec     53 93 02 A6 |  if_e	mov	arg01, local01
13ef0     67 95 02 A6 |  if_e	mov	arg02, local21
13ef4     20 D1 B0 AD |  if_e	call	#_pslpoke
13ef8     53 93 02 F6 | 	mov	arg01, local01
13efc     08 92 06 F1 | 	add	arg01, #8
13f00     54 00 00 FF 
13f04     EC 64 06 F1 | 	add	objptr, ##43244
13f08     32 D3 02 FB | 	rdlong	local23, objptr
13f0c     54 00 00 FF 
13f10     EC 64 86 F1 | 	sub	objptr, ##43244
13f14     69 95 02 F6 | 	mov	arg02, local23
13f18     FC D0 B0 FD | 	call	#_pslpoke
13f1c                 | LR__1721
13f1c                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
13f1c     05 D8 0E F2 | 	cmp	local26, #5 wz
13f20     54 00 00 AF 
13f24     EC 64 06 A1 |  if_e	add	objptr, ##43244
13f28     32 D3 02 AB |  if_e	rdlong	local23, objptr
13f2c     54 00 00 AF 
13f30     EC 64 86 A1 |  if_e	sub	objptr, ##43244
13f34     2B D2 0E A2 |  if_e	cmp	local23, #43 wz
13f38     67 D3 02 A6 |  if_e	mov	local23, local21
13f3c     53 93 02 A6 |  if_e	mov	arg01, local01
13f40     69 95 02 A6 |  if_e	mov	arg02, local23
13f44     D0 D0 B0 AD |  if_e	call	#_pslpoke
13f48                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
13f48     04 D8 0E F2 | 	cmp	local26, #4 wz
13f4c     48 00 90 5D |  if_ne	jmp	#LR__1722
13f50     54 00 00 FF 
13f54     EC 64 06 F1 | 	add	objptr, ##43244
13f58     32 D3 02 FB | 	rdlong	local23, objptr
13f5c     54 00 00 FF 
13f60     EC 64 86 F1 | 	sub	objptr, ##43244
13f64     2B D2 0E F2 | 	cmp	local23, #43 wz
13f68     2C 00 90 AD |  if_e	jmp	#LR__1722
13f6c     5A AF 02 F6 | 	mov	local05, local08
13f70     02 AE 66 F0 | 	shl	local05, #2
13f74     E7 B0 02 F6 | 	mov	local06, fp
13f78     2C B0 06 F1 | 	add	local06, #44
13f7c     58 AF 02 F1 | 	add	local05, local06
13f80     57 93 02 FB | 	rdlong	arg01, local05
13f84     00 94 06 F6 | 	mov	arg02, #0
13f88     6C 39 B1 FD | 	call	#__system____builtin_atoi
13f8c     3D 95 02 F6 | 	mov	arg02, result1
13f90     53 93 02 F6 | 	mov	arg01, local01
13f94     80 D0 B0 FD | 	call	#_pslpoke
13f98                 | LR__1722
13f98                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
13f98     02 D8 0E F2 | 	cmp	local26, #2 wz
13f9c     48 00 90 5D |  if_ne	jmp	#LR__1723
13fa0     54 00 00 FF 
13fa4     EC 64 06 F1 | 	add	objptr, ##43244
13fa8     32 D3 02 FB | 	rdlong	local23, objptr
13fac     54 00 00 FF 
13fb0     EC 64 86 F1 | 	sub	objptr, ##43244
13fb4     2B D2 0E F2 | 	cmp	local23, #43 wz
13fb8     2C 00 90 AD |  if_e	jmp	#LR__1723
13fbc     5A AF 02 F6 | 	mov	local05, local08
13fc0     02 AE 66 F0 | 	shl	local05, #2
13fc4     E7 B0 02 F6 | 	mov	local06, fp
13fc8     2C B0 06 F1 | 	add	local06, #44
13fcc     58 AF 02 F1 | 	add	local05, local06
13fd0     57 93 02 FB | 	rdlong	arg01, local05
13fd4     00 94 06 F6 | 	mov	arg02, #0
13fd8     1C 39 B1 FD | 	call	#__system____builtin_atoi
13fdc     3D 95 02 F6 | 	mov	arg02, result1
13fe0     53 93 02 F6 | 	mov	arg01, local01
13fe4     78 D0 B0 FD | 	call	#_psdpoke
13fe8                 | LR__1723
13fe8                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
13fe8     01 D8 0E F2 | 	cmp	local26, #1 wz
13fec     48 00 90 5D |  if_ne	jmp	#LR__1724
13ff0     54 00 00 FF 
13ff4     EC 64 06 F1 | 	add	objptr, ##43244
13ff8     32 D3 02 FB | 	rdlong	local23, objptr
13ffc     54 00 00 FF 
14000     EC 64 86 F1 | 	sub	objptr, ##43244
14004     2B D2 0E F2 | 	cmp	local23, #43 wz
14008     2C 00 90 AD |  if_e	jmp	#LR__1724
1400c     5A AF 02 F6 | 	mov	local05, local08
14010     02 AE 66 F0 | 	shl	local05, #2
14014     E7 B0 02 F6 | 	mov	local06, fp
14018     2C B0 06 F1 | 	add	local06, #44
1401c     58 AF 02 F1 | 	add	local05, local06
14020     57 93 02 FB | 	rdlong	arg01, local05
14024     00 94 06 F6 | 	mov	arg02, #0
14028     CC 38 B1 FD | 	call	#__system____builtin_atoi
1402c     3D 95 02 F6 | 	mov	arg02, result1
14030     53 93 02 F6 | 	mov	arg01, local01
14034     70 D0 B0 FD | 	call	#_pspoke
14038                 | LR__1724
14038                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
14038     06 D8 0E F2 | 	cmp	local26, #6 wz
1403c     54 00 90 5D |  if_ne	jmp	#LR__1725
14040     54 00 00 FF 
14044     EC 64 06 F1 | 	add	objptr, ##43244
14048     32 D3 02 FB | 	rdlong	local23, objptr
1404c     54 00 00 FF 
14050     EC 64 86 F1 | 	sub	objptr, ##43244
14054     2B D2 0E F2 | 	cmp	local23, #43 wz
14058     38 00 90 AD |  if_e	jmp	#LR__1725
1405c     5A AD 02 F6 | 	mov	local04, local08
14060     02 AC 66 F0 | 	shl	local04, #2
14064     E7 AE 02 F6 | 	mov	local05, fp
14068     2C AE 06 F1 | 	add	local05, #44
1406c     57 AD 02 F1 | 	add	local04, local05
14070     56 93 02 FB | 	rdlong	arg01, local04
14074     18 3A B1 FD | 	call	#__system____builtin_atof
14078     28 CE 05 F1 | 	add	fp, #40
1407c     E7 7A 62 FC | 	wrlong	result1, fp
14080     E7 92 02 F6 | 	mov	arg01, fp
14084     28 CE 85 F1 | 	sub	fp, #40
14088     49 95 02 FB | 	rdlong	arg02, arg01
1408c     53 93 02 F6 | 	mov	arg01, local01
14090     84 CF B0 FD | 	call	#_pslpoke
14094                 | LR__1725
14094     01 B4 06 F1 | 	add	local08, #1
14098     30 F9 9F FD | 	jmp	#LR__1693
1409c                 | LR__1726
1409c                 | LR__1727
1409c     E7 F0 03 F6 | 	mov	ptra, fp
140a0     F2 00 A0 FD | 	call	#popregs_
140a4                 | _do_input_ret
140a4     2D 00 64 FD | 	ret
140a8                 | 
140a8                 | ' 
140a8                 | ' ' ----------------  left$
140a8                 | ' 
140a8                 | ' sub do_left
140a8                 | _do_left
140a8     01 CA 05 F6 | 	mov	COUNT_, #1
140ac     E8 00 A0 FD | 	call	#pushregs_
140b0     14 F0 07 F1 | 	add	ptra, #20
140b4     4C 00 00 FF 
140b8     24 64 06 F1 | 	add	objptr, ##38948
140bc     32 97 02 FB | 	rdlong	arg03, objptr
140c0     4B 95 02 F6 | 	mov	arg02, arg03
140c4     01 94 66 F0 | 	shl	arg02, #1
140c8     4B 95 02 F1 | 	add	arg02, arg03
140cc     02 94 66 F0 | 	shl	arg02, #2
140d0     03 00 00 FF 
140d4     04 64 86 F1 | 	sub	objptr, ##1540
140d8     32 95 02 F1 | 	add	arg02, objptr
140dc     4A 97 02 FB | 	rdlong	arg03, arg02
140e0                 | ' 
140e0                 | ' numpar=compiledline(lineptr_e).result.uresult
140e0                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
140e0     02 96 0E F2 | 	cmp	arg03, #2 wz
140e4     49 00 00 FF 
140e8     20 64 86 F1 | 	sub	objptr, ##37408
140ec     40 00 90 AD |  if_e	jmp	#LR__1730
140f0     00 92 06 F6 | 	mov	arg01, #0
140f4     30 60 B1 FD | 	call	#__system___getiolock_0622
140f8     3D 93 02 F6 | 	mov	arg01, result1
140fc     A4 0A B1 FD | 	call	#__system___lockmem
14100     98 01 00 FF 
14104     5A 95 06 F6 | 	mov	arg02, ##@LR__6026
14108     00 92 06 F6 | 	mov	arg01, #0
1410c     00 96 06 F6 | 	mov	arg03, #0
14110     84 17 B1 FD | 	call	#__system___basic_print_string
14114     00 92 06 F6 | 	mov	arg01, #0
14118     0C 60 B1 FD | 	call	#__system___getiolock_0622
1411c     3D 01 68 FC | 	wrlong	#0, result1
14120     27 92 06 F6 | 	mov	arg01, #39
14124     00 94 06 F6 | 	mov	arg02, #0
14128     54 CD B0 FD | 	call	#_printerror
1412c     D8 00 90 FD | 	jmp	#LR__1733
14130                 | LR__1730
14130     3C 95 BF FD | 	call	#_pop
14134     3F 97 02 F6 | 	mov	arg03, result3
14138     E7 7A 62 FC | 	wrlong	result1, fp
1413c     04 CE 05 F1 | 	add	fp, #4
14140     E7 7C 62 FC | 	wrlong	result2, fp
14144     04 CE 05 F1 | 	add	fp, #4
14148     E7 96 62 FC | 	wrlong	arg03, fp
1414c     08 CE 85 F1 | 	sub	fp, #8
14150     E7 92 02 F6 | 	mov	arg01, fp
14154     F4 96 BF FD | 	call	#_converttoint
14158     3D A7 02 F6 | 	mov	local01, result1
1415c     10 95 BF FD | 	call	#_pop
14160     3F 97 02 F6 | 	mov	arg03, result3
14164     E7 7A 62 FC | 	wrlong	result1, fp
14168     04 CE 05 F1 | 	add	fp, #4
1416c     E7 7C 62 FC | 	wrlong	result2, fp
14170     04 CE 05 F1 | 	add	fp, #4
14174     E7 96 62 FC | 	wrlong	arg03, fp
14178                 | ' t1=pop() : arg=converttoint(t1)
14178                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14178     08 CE 85 F1 | 	sub	fp, #8
1417c     2B 96 0E F2 | 	cmp	arg03, #43 wz
14180     18 00 90 5D |  if_ne	jmp	#LR__1731
14184     E7 92 02 FB | 	rdlong	arg01, fp
14188     54 96 BF FD | 	call	#_convertstring
1418c     E7 7A 62 FC | 	wrlong	result1, fp
14190     08 CE 05 F1 | 	add	fp, #8
14194     E7 3E 68 FC | 	wrlong	#31, fp
14198     08 CE 85 F1 | 	sub	fp, #8
1419c                 | LR__1731
1419c                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
1419c     08 CE 05 F1 | 	add	fp, #8
141a0     E7 96 02 FB | 	rdlong	arg03, fp
141a4     08 CE 85 F1 | 	sub	fp, #8
141a8     1F 96 0E F2 | 	cmp	arg03, #31 wz
141ac     40 00 90 AD |  if_e	jmp	#LR__1732
141b0     00 92 06 F6 | 	mov	arg01, #0
141b4     70 5F B1 FD | 	call	#__system___getiolock_0622
141b8     3D 93 02 F6 | 	mov	arg01, result1
141bc     E4 09 B1 FD | 	call	#__system___lockmem
141c0     98 01 00 FF 
141c4     62 95 06 F6 | 	mov	arg02, ##@LR__6027
141c8     00 92 06 F6 | 	mov	arg01, #0
141cc     00 96 06 F6 | 	mov	arg03, #0
141d0     C4 16 B1 FD | 	call	#__system___basic_print_string
141d4     00 92 06 F6 | 	mov	arg01, #0
141d8     4C 5F B1 FD | 	call	#__system___getiolock_0622
141dc     3D 01 68 FC | 	wrlong	#0, result1
141e0     0F 92 06 F6 | 	mov	arg01, #15
141e4     00 94 06 F6 | 	mov	arg02, #0
141e8     94 CC B0 FD | 	call	#_printerror
141ec     18 00 90 FD | 	jmp	#LR__1733
141f0                 | LR__1732
141f0     E7 92 02 FB | 	rdlong	arg01, fp
141f4     53 95 02 F6 | 	mov	arg02, local01
141f8     50 22 B1 FD | 	call	#__system__Left_S
141fc     E7 7A 62 FC | 	wrlong	result1, fp
14200     E7 92 02 F6 | 	mov	arg01, fp
14204     F8 94 BF FD | 	call	#_push
14208                 | LR__1733
14208     E7 F0 03 F6 | 	mov	ptra, fp
1420c     F2 00 A0 FD | 	call	#popregs_
14210                 | _do_left_ret
14210     2D 00 64 FD | 	ret
14214                 | 
14214                 | ' 
14214                 | ' ' ----------------  len
14214                 | ' 
14214                 | ' sub do_len
14214                 | _do_len
14214     01 CA 05 F6 | 	mov	COUNT_, #1
14218     E8 00 A0 FD | 	call	#pushregs_
1421c     14 F0 07 F1 | 	add	ptra, #20
14220     4C 00 00 FF 
14224     24 64 06 F1 | 	add	objptr, ##38948
14228     32 97 02 FB | 	rdlong	arg03, objptr
1422c     4B 95 02 F6 | 	mov	arg02, arg03
14230     01 94 66 F0 | 	shl	arg02, #1
14234     4B 95 02 F1 | 	add	arg02, arg03
14238     02 94 66 F0 | 	shl	arg02, #2
1423c     03 00 00 FF 
14240     04 64 86 F1 | 	sub	objptr, ##1540
14244     32 95 02 F1 | 	add	arg02, objptr
14248     4A 97 02 FB | 	rdlong	arg03, arg02
1424c                 | ' 
1424c                 | ' numpar=compiledline(lineptr_e).result.uresult
1424c                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
1424c     02 96 16 F2 | 	cmp	arg03, #2 wc
14250     49 00 00 FF 
14254     20 64 86 F1 | 	sub	objptr, ##37408
14258     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1425c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1740
14260     00 92 06 F6 | 	mov	arg01, #0
14264     C0 5E B1 FD | 	call	#__system___getiolock_0622
14268     3D 93 02 F6 | 	mov	arg01, result1
1426c     34 09 B1 FD | 	call	#__system___lockmem
14270     98 01 00 FF 
14274     6A 95 06 F6 | 	mov	arg02, ##@LR__6028
14278     00 92 06 F6 | 	mov	arg01, #0
1427c     00 96 06 F6 | 	mov	arg03, #0
14280     14 16 B1 FD | 	call	#__system___basic_print_string
14284     00 92 06 F6 | 	mov	arg01, #0
14288     9C 5E B1 FD | 	call	#__system___getiolock_0622
1428c     3D 01 68 FC | 	wrlong	#0, result1
14290     27 92 06 F6 | 	mov	arg01, #39
14294     00 94 06 F6 | 	mov	arg02, #0
14298     E4 CB B0 FD | 	call	#_printerror
1429c     C8 00 90 FD | 	jmp	#LR__1745
142a0                 | LR__1740
142a0     CC 93 BF FD | 	call	#_pop
142a4     3F 97 02 F6 | 	mov	arg03, result3
142a8     E7 7A 62 FC | 	wrlong	result1, fp
142ac     04 CE 05 F1 | 	add	fp, #4
142b0     E7 7C 62 FC | 	wrlong	result2, fp
142b4     04 CE 05 F1 | 	add	fp, #4
142b8     E7 96 62 FC | 	wrlong	arg03, fp
142bc                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
142bc     08 CE 85 F1 | 	sub	fp, #8
142c0     2B 96 0E F2 | 	cmp	arg03, #43 wz
142c4     18 00 90 5D |  if_ne	jmp	#LR__1741
142c8     E7 92 02 FB | 	rdlong	arg01, fp
142cc     10 95 BF FD | 	call	#_convertstring
142d0     E7 7A 62 FC | 	wrlong	result1, fp
142d4     08 CE 05 F1 | 	add	fp, #8
142d8     E7 3E 68 FC | 	wrlong	#31, fp
142dc     08 CE 85 F1 | 	sub	fp, #8
142e0                 | LR__1741
142e0                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
142e0     08 CE 05 F1 | 	add	fp, #8
142e4     E7 96 02 FB | 	rdlong	arg03, fp
142e8     08 CE 85 F1 | 	sub	fp, #8
142ec     1F 96 0E F2 | 	cmp	arg03, #31 wz
142f0     40 00 90 AD |  if_e	jmp	#LR__1742
142f4     00 92 06 F6 | 	mov	arg01, #0
142f8     2C 5E B1 FD | 	call	#__system___getiolock_0622
142fc     3D 93 02 F6 | 	mov	arg01, result1
14300     A0 08 B1 FD | 	call	#__system___lockmem
14304     98 01 00 FF 
14308     70 95 06 F6 | 	mov	arg02, ##@LR__6029
1430c     00 92 06 F6 | 	mov	arg01, #0
14310     00 96 06 F6 | 	mov	arg03, #0
14314     80 15 B1 FD | 	call	#__system___basic_print_string
14318     00 92 06 F6 | 	mov	arg01, #0
1431c     08 5E B1 FD | 	call	#__system___getiolock_0622
14320     3D 01 68 FC | 	wrlong	#0, result1
14324     0F 92 06 F6 | 	mov	arg01, #15
14328     00 94 06 F6 | 	mov	arg02, #0
1432c     50 CB B0 FD | 	call	#_printerror
14330     34 00 90 FD | 	jmp	#LR__1745
14334                 | LR__1742
14334     E7 92 02 FB | 	rdlong	arg01, fp
14338     49 A7 02 F6 | 	mov	local01, arg01
1433c     D7 06 48 FB | 	callpa	#(@LR__1744-@LR__1743)>>2,fcache_load_ptr_
14340                 | LR__1743
14340     53 7B CA FA | 	rdbyte	result1, local01 wz
14344     01 A6 06 51 |  if_ne	add	local01, #1
14348     F4 FF 9F 5D |  if_ne	jmp	#LR__1743
1434c                 | LR__1744
1434c     49 A7 82 F1 | 	sub	local01, arg01
14350     E7 A6 62 FC | 	wrlong	local01, fp
14354     08 CE 05 F1 | 	add	fp, #8
14358     E7 38 68 FC | 	wrlong	#28, fp
1435c     08 CE 85 F1 | 	sub	fp, #8
14360     E7 92 02 F6 | 	mov	arg01, fp
14364     98 93 BF FD | 	call	#_push
14368                 | LR__1745
14368     E7 F0 03 F6 | 	mov	ptra, fp
1436c     F2 00 A0 FD | 	call	#popregs_
14370                 | _do_len_ret
14370     2D 00 64 FD | 	ret
14374                 | 
14374                 | ' 
14374                 | ' ' ----------------  list
14374                 | ' 
14374                 | ' sub do_list
14374                 | _do_list
14374     04 CA 05 F6 | 	mov	COUNT_, #4
14378     E8 00 A0 FD | 	call	#pushregs_
1437c     B8 F0 07 F1 | 	add	ptra, #184
14380     00 A6 06 F6 | 	mov	local01, #0
14384     1E A8 CE F9 | 	bmask	local02, #30
14388     4C 00 00 FF 
1438c     24 64 06 F1 | 	add	objptr, ##38948
14390     32 AB 02 FB | 	rdlong	local03, objptr
14394     55 97 02 F6 | 	mov	arg03, local03
14398     01 96 66 F0 | 	shl	arg03, #1
1439c     55 97 02 F1 | 	add	arg03, local03
143a0     02 96 66 F0 | 	shl	arg03, #2
143a4     03 00 00 FF 
143a8     04 64 86 F1 | 	sub	objptr, ##1540
143ac     32 97 02 F1 | 	add	arg03, objptr
143b0     4B AD 02 FB | 	rdlong	local04, arg03
143b4                 | ' 
143b4                 | ' startline=0 : endline=$7FFFFFFF
143b4                 | ' numpar=compiledline(lineptr_e).result.uresult
143b4                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
143b4     01 AC 0E F2 | 	cmp	local04, #1 wz
143b8     49 00 00 FF 
143bc     20 64 86 F1 | 	sub	objptr, ##37408
143c0     34 00 90 5D |  if_ne	jmp	#LR__1750
143c4     A8 92 BF FD | 	call	#_pop
143c8     3F AB 02 F6 | 	mov	local03, result3
143cc     0C CE 05 F1 | 	add	fp, #12
143d0     E7 7A 62 FC | 	wrlong	result1, fp
143d4     04 CE 05 F1 | 	add	fp, #4
143d8     E7 7C 62 FC | 	wrlong	result2, fp
143dc     04 CE 05 F1 | 	add	fp, #4
143e0     E7 AA 62 FC | 	wrlong	local03, fp
143e4     08 CE 85 F1 | 	sub	fp, #8
143e8     E7 92 02 F6 | 	mov	arg01, fp
143ec     0C CE 85 F1 | 	sub	fp, #12
143f0     58 94 BF FD | 	call	#_converttoint
143f4     3D A7 02 F6 | 	mov	local01, result1
143f8                 | LR__1750
143f8                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
143f8     02 AC 0E F2 | 	cmp	local04, #2 wz
143fc     68 00 90 5D |  if_ne	jmp	#LR__1751
14400     6C 92 BF FD | 	call	#_pop
14404     3F AB 02 F6 | 	mov	local03, result3
14408     0C CE 05 F1 | 	add	fp, #12
1440c     E7 7A 62 FC | 	wrlong	result1, fp
14410     04 CE 05 F1 | 	add	fp, #4
14414     E7 7C 62 FC | 	wrlong	result2, fp
14418     04 CE 05 F1 | 	add	fp, #4
1441c     E7 AA 62 FC | 	wrlong	local03, fp
14420     08 CE 85 F1 | 	sub	fp, #8
14424     E7 92 02 F6 | 	mov	arg01, fp
14428     0C CE 85 F1 | 	sub	fp, #12
1442c     1C 94 BF FD | 	call	#_converttoint
14430     3D A9 02 F6 | 	mov	local02, result1
14434     38 92 BF FD | 	call	#_pop
14438     3F AB 02 F6 | 	mov	local03, result3
1443c     0C CE 05 F1 | 	add	fp, #12
14440     E7 7A 62 FC | 	wrlong	result1, fp
14444     04 CE 05 F1 | 	add	fp, #4
14448     E7 7C 62 FC | 	wrlong	result2, fp
1444c     04 CE 05 F1 | 	add	fp, #4
14450     E7 AA 62 FC | 	wrlong	local03, fp
14454     08 CE 85 F1 | 	sub	fp, #8
14458     E7 92 02 F6 | 	mov	arg01, fp
1445c     0C CE 85 F1 | 	sub	fp, #12
14460     E8 93 BF FD | 	call	#_converttoint
14464     3D A7 02 F6 | 	mov	local01, result1
14468                 | LR__1751
14468                 | ' 
14468                 | ' 
14468                 | ' print
14468     00 92 06 F6 | 	mov	arg01, #0
1446c     B8 5C B1 FD | 	call	#__system___getiolock_0622
14470     3D 93 02 F6 | 	mov	arg01, result1
14474     2C 07 B1 FD | 	call	#__system___lockmem
14478     00 92 06 F6 | 	mov	arg01, #0
1447c     0A 94 06 F6 | 	mov	arg02, #10
14480     00 96 06 F6 | 	mov	arg03, #0
14484     B8 13 B1 FD | 	call	#__system___basic_print_char
14488     00 92 06 F6 | 	mov	arg01, #0
1448c     98 5C B1 FD | 	call	#__system___getiolock_0622
14490     3D 01 68 FC | 	wrlong	#0, result1
14494     4C 00 00 FF 
14498     2C 64 06 F1 | 	add	objptr, ##38956
1449c     32 AD 02 FB | 	rdlong	local04, objptr
144a0     08 00 00 FF 
144a4     CC 64 06 F1 | 	add	objptr, ##4300
144a8     32 AD 62 FC | 	wrlong	local04, objptr
144ac     54 00 00 FF 
144b0     F8 64 86 F1 | 	sub	objptr, ##43256
144b4                 | ' do 
144b4                 | LR__1752
144b4     E7 92 02 F6 | 	mov	arg01, fp
144b8     20 92 06 F1 | 	add	arg01, #32
144bc     54 00 00 FF 
144c0     F8 64 06 F1 | 	add	objptr, ##43256
144c4     32 95 02 FB | 	rdlong	arg02, objptr
144c8     18 96 06 F6 | 	mov	arg03, #24
144cc     49 00 00 FF 
144d0     2C 64 86 F1 | 	sub	objptr, ##37420
144d4     50 F7 B0 FD | 	call	#_psram_spin2_read1
144d8     0B 00 00 FF 
144dc     CC 64 86 F1 | 	sub	objptr, ##5836
144e0                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
144e0                 | '   
144e0                 | '   if header(0)<> $FFFFFFFF then
144e0     20 CE 05 F1 | 	add	fp, #32
144e4     E7 AC 02 FB | 	rdlong	local04, fp
144e8     20 CE 85 F1 | 	sub	fp, #32
144ec     FF FF 7F FF 
144f0     FF AD 0E F2 | 	cmp	local04, ##-1 wz
144f4     9C 00 90 AD |  if_e	jmp	#LR__1754
144f8     E7 92 02 F6 | 	mov	arg01, fp
144fc     38 92 06 F1 | 	add	arg01, #56
14500     3F 96 06 F6 | 	mov	arg03, #63
14504     28 96 62 FD | 	setq	arg03
14508     49 01 68 FC | 	wrlong	#0, arg01
1450c     E7 92 02 F6 | 	mov	arg01, fp
14510     38 92 06 F1 | 	add	arg01, #56
14514     28 CE 05 F1 | 	add	fp, #40
14518     E7 94 02 FB | 	rdlong	arg02, fp
1451c     04 CE 05 F1 | 	add	fp, #4
14520     E7 96 02 FB | 	rdlong	arg03, fp
14524     2C CE 85 F1 | 	sub	fp, #44
14528     0B 00 00 FF 
1452c     CC 64 06 F1 | 	add	objptr, ##5836
14530     F4 F6 B0 FD | 	call	#_psram_spin2_read1
14534     0B 00 00 FF 
14538     CC 64 86 F1 | 	sub	objptr, ##5836
1453c                 | '     longfill(linebuf,0,64)
1453c                 | '     psram.read1(varptr(linebuf),header(2),header(3))
1453c                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
1453c     20 CE 05 F1 | 	add	fp, #32
14540     E7 AC 02 FB | 	rdlong	local04, fp
14544     20 CE 85 F1 | 	sub	fp, #32
14548     53 AD 52 F2 | 	cmps	local04, local01 wc
1454c     24 00 90 CD |  if_b	jmp	#LR__1753
14550     20 CE 05 F1 | 	add	fp, #32
14554     E7 AA 02 FB | 	rdlong	local03, fp
14558     20 CE 85 F1 | 	sub	fp, #32
1455c     54 AB 5A F2 | 	cmps	local03, local02 wcz
14560     10 00 90 1D |  if_a	jmp	#LR__1753
14564     E7 92 02 F6 | 	mov	arg01, fp
14568     38 92 06 F1 | 	add	arg01, #56
1456c                 | ' 
1456c                 | ' write(text)
1456c     A4 EA B0 FD | 	call	#_hg010b_spin2_write
14570                 | ' crlf
14570     40 EF B0 FD | 	call	#_hg010b_spin2_crlf
14574                 | LR__1753
14574     34 CE 05 F1 | 	add	fp, #52
14578     E7 AC 02 FB | 	rdlong	local04, fp
1457c     34 CE 85 F1 | 	sub	fp, #52
14580     54 00 00 FF 
14584     F8 64 06 F1 | 	add	objptr, ##43256
14588     32 AD 62 FC | 	wrlong	local04, objptr
1458c     54 00 00 FF 
14590     F8 64 86 F1 | 	sub	objptr, ##43256
14594                 | LR__1754
14594     34 CE 05 F1 | 	add	fp, #52
14598     E7 AC 02 FB | 	rdlong	local04, fp
1459c     34 CE 85 F1 | 	sub	fp, #52
145a0     FF FF 3F FF 
145a4     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
145a8     20 CE 05 51 |  if_ne	add	fp, #32
145ac     E7 AA 02 5B |  if_ne	rdlong	local03, fp
145b0     20 CE 85 51 |  if_ne	sub	fp, #32
145b4     FF FF 7F 5F 
145b8     FF AB 0E 52 |  if_ne	cmp	local03, ##-1 wz
145bc     F4 FE 9F 5D |  if_ne	jmp	#LR__1752
145c0     E7 F0 03 F6 | 	mov	ptra, fp
145c4     F2 00 A0 FD | 	call	#popregs_
145c8                 | _do_list_ret
145c8     2D 00 64 FD | 	ret
145cc                 | 
145cc                 | ' 
145cc                 | ' '-------------------- load
145cc                 | ' 
145cc                 | ' sub do_load(amode=0 as integer)  
145cc                 | _do_load
145cc     07 CA 05 F6 | 	mov	COUNT_, #7
145d0     E8 00 A0 FD | 	call	#pushregs_
145d4     AC F0 07 F1 | 	add	ptra, #172
145d8     49 AD 02 F6 | 	mov	local04, arg01
145dc     54 00 00 FF 
145e0     B0 64 06 F1 | 	add	objptr, ##43184
145e4     32 03 68 FC | 	wrlong	#1, objptr
145e8     08 00 00 FF 
145ec     8C 64 86 F1 | 	sub	objptr, ##4236
145f0     32 95 02 FB | 	rdlong	arg02, objptr
145f4     4A 93 02 F6 | 	mov	arg01, arg02
145f8     01 92 66 F0 | 	shl	arg01, #1
145fc     4A 93 02 F1 | 	add	arg01, arg02
14600     02 92 66 F0 | 	shl	arg01, #2
14604     03 00 00 FF 
14608     04 64 86 F1 | 	sub	objptr, ##1540
1460c     32 93 02 F1 | 	add	arg01, objptr
14610     49 AF 02 FB | 	rdlong	local05, arg01
14614     E7 92 02 F6 | 	mov	arg01, fp
14618     A8 92 06 F1 | 	add	arg01, #168
1461c     49 00 00 FF 
14620     20 64 86 F1 | 	sub	objptr, ##37408
14624     E7 94 02 F6 | 	mov	arg02, fp
14628     28 94 06 F1 | 	add	arg02, #40
1462c     49 95 62 FC | 	wrlong	arg02, arg01
14630                 | ' 
14630                 | ' inload=1
14630                 | ' numpar=compiledline(lineptr_e).result.uresult
14630                 | ' lpoke varptr(line2$),varptr(line2)
14630                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
14630     01 AE 56 F2 | 	cmps	local05, #1 wc
14634     14 00 90 CD |  if_b	jmp	#LR__1760
14638     34 90 BF FD | 	call	#_pop
1463c     3D A7 02 F6 | 	mov	local01, result1
14640     3E A9 02 F6 | 	mov	local02, result2
14644     3F AB 02 F6 | 	mov	local03, result3
14648     18 00 90 FD | 	jmp	#LR__1761
1464c                 | LR__1760
1464c     54 00 00 FF 
14650     A0 64 06 F1 | 	add	objptr, ##43168
14654     32 A7 02 FB | 	rdlong	local01, objptr
14658     54 00 00 FF 
1465c     A0 64 86 F1 | 	sub	objptr, ##43168
14660     1F AA 06 F6 | 	mov	local03, #31
14664                 | LR__1761
14664                 | ' 'print "popped "; t1.result.uresult, t1.result_type
14664                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
14664     2B AA 0E F2 | 	cmp	local03, #43 wz
14668     10 00 90 5D |  if_ne	jmp	#LR__1762
1466c     53 93 02 F6 | 	mov	arg01, local01
14670     6C 91 BF FD | 	call	#_convertstring
14674     3D A7 02 F6 | 	mov	local01, result1
14678     1F AA 06 F6 | 	mov	local03, #31
1467c                 | LR__1762
1467c                 | ' if t1.result_type=result_string then
1467c     1F AA 0E F2 | 	cmp	local03, #31 wz
14680     7C 02 90 5D |  if_ne	jmp	#LR__1766
14684                 | '   if amode<>1234 then do_new
14684     02 00 00 FF 
14688     D2 AC 0E F2 | 	cmp	local04, ##1234 wz
1468c     D8 0D B0 5D |  if_ne	call	#_do_new
14690                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
14690     98 01 00 FF 
14694     76 95 06 F6 | 	mov	arg02, ##@LR__6030
14698     53 93 02 F6 | 	mov	arg01, local01
1469c     2C 05 B1 FD | 	call	#__system___string_cmp
146a0     00 7A 0E F2 | 	cmp	result1, #0 wz
146a4     54 00 00 AF 
146a8     A0 64 06 A1 |  if_e	add	objptr, ##43168
146ac     32 A7 02 AB |  if_e	rdlong	local01, objptr
146b0     54 00 00 FF 
146b4     A0 64 C6 F3 | 	sumz	objptr, ##43168
146b8     32 A7 62 5C |  if_ne	wrlong	local01, objptr
146bc     54 00 00 5F 
146c0     A0 64 86 51 |  if_ne	sub	objptr, ##43168
146c4                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
146c4     09 92 06 F6 | 	mov	arg01, #9
146c8     B4 50 B1 FD | 	call	#__system__close
146cc     09 AE 06 F6 | 	mov	local05, #9
146d0     4C 00 00 FF 
146d4     38 64 06 F1 | 	add	objptr, ##38968
146d8     32 93 02 FB | 	rdlong	arg01, objptr
146dc     4C 00 00 FF 
146e0     38 64 86 F1 | 	sub	objptr, ##38968
146e4     98 01 00 FF 
146e8     77 95 06 F6 | 	mov	arg02, ##@LR__6031
146ec     10 05 B1 FD | 	call	#__system___string_concat
146f0     3D 93 02 F6 | 	mov	arg01, result1
146f4     53 95 02 F6 | 	mov	arg02, local01
146f8     04 05 B1 FD | 	call	#__system___string_concat
146fc     3D 95 02 F6 | 	mov	arg02, result1
14700     57 93 02 F6 | 	mov	arg01, local05
14704     00 96 06 F6 | 	mov	arg03, #0
14708     48 10 B1 FD | 	call	#__system___basic_open_string
1470c     20 68 06 F1 | 	add	ptr___system__dat__, #32
14710     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
14714     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
14718     20 68 86 F1 | 	sub	ptr___system__dat__, #32
1471c                 | '   r=geterr() 
1471c                 | '   if r then 
1471c     30 01 90 AD |  if_e	jmp	#LR__1764
14720                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
14720     09 92 06 F6 | 	mov	arg01, #9
14724     58 50 B1 FD | 	call	#__system__close
14728     09 B0 06 F6 | 	mov	local06, #9
1472c     4C 00 00 FF 
14730     38 64 06 F1 | 	add	objptr, ##38968
14734     32 93 02 FB | 	rdlong	arg01, objptr
14738     4C 00 00 FF 
1473c     38 64 86 F1 | 	sub	objptr, ##38968
14740     98 01 00 FF 
14744     79 95 06 F6 | 	mov	arg02, ##@LR__6032
14748     B4 04 B1 FD | 	call	#__system___string_concat
1474c     3D 93 02 F6 | 	mov	arg01, result1
14750     53 95 02 F6 | 	mov	arg02, local01
14754     A8 04 B1 FD | 	call	#__system___string_concat
14758     3D 93 02 F6 | 	mov	arg01, result1
1475c     98 01 00 FF 
14760     7B 95 06 F6 | 	mov	arg02, ##@LR__6033
14764     98 04 B1 FD | 	call	#__system___string_concat
14768     3D 95 02 F6 | 	mov	arg02, result1
1476c     58 93 02 F6 | 	mov	arg01, local06
14770     00 96 06 F6 | 	mov	arg03, #0
14774     DC 0F B1 FD | 	call	#__system___basic_open_string
14778     20 68 06 F1 | 	add	ptr___system__dat__, #32
1477c     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
14780     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
14784     20 68 86 F1 | 	sub	ptr___system__dat__, #32
14788     3D B3 0A F6 | 	mov	local07, result1 wz
1478c                 | '     r=geterr() 
1478c                 | '     if r then 
1478c     8C 00 90 AD |  if_e	jmp	#LR__1763
14790                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
14790     00 92 06 F6 | 	mov	arg01, #0
14794     90 59 B1 FD | 	call	#__system___getiolock_0622
14798     3D 93 02 F6 | 	mov	arg01, result1
1479c     04 04 B1 FD | 	call	#__system___lockmem
147a0     98 01 00 FF 
147a4     80 95 06 F6 | 	mov	arg02, ##@LR__6034
147a8     00 92 06 F6 | 	mov	arg01, #0
147ac     00 96 06 F6 | 	mov	arg03, #0
147b0     E4 10 B1 FD | 	call	#__system___basic_print_string
147b4     00 92 06 F6 | 	mov	arg01, #0
147b8     59 95 02 F6 | 	mov	arg02, local07
147bc     00 96 06 F6 | 	mov	arg03, #0
147c0     0A 98 06 F6 | 	mov	arg04, #10
147c4     14 11 B1 FD | 	call	#__system___basic_print_integer
147c8     98 01 00 FF 
147cc     8E 95 06 F6 | 	mov	arg02, ##@LR__6035
147d0     00 92 06 F6 | 	mov	arg01, #0
147d4     00 96 06 F6 | 	mov	arg03, #0
147d8     BC 10 B1 FD | 	call	#__system___basic_print_string
147dc     59 93 02 F6 | 	mov	arg01, local07
147e0     70 25 B1 FD | 	call	#__system___strerror
147e4     3D 95 02 F6 | 	mov	arg02, result1
147e8     00 92 06 F6 | 	mov	arg01, #0
147ec     00 96 06 F6 | 	mov	arg03, #0
147f0     A4 10 B1 FD | 	call	#__system___basic_print_string
147f4     00 92 06 F6 | 	mov	arg01, #0
147f8     0A 94 06 F6 | 	mov	arg02, #10
147fc     00 96 06 F6 | 	mov	arg03, #0
14800     3C 10 B1 FD | 	call	#__system___basic_print_char
14804     00 92 06 F6 | 	mov	arg01, #0
14808     1C 59 B1 FD | 	call	#__system___getiolock_0622
1480c     3D 01 68 FC | 	wrlong	#0, result1
14810     09 92 06 F6 | 	mov	arg01, #9
14814     68 4F B1 FD | 	call	#__system__close
14818     94 01 90 FD | 	jmp	#LR__1768
1481c                 | LR__1763
1481c     54 00 00 FF 
14820     A0 64 06 F1 | 	add	objptr, ##43168
14824     32 93 02 FB | 	rdlong	arg01, objptr
14828     54 00 00 FF 
1482c     A0 64 86 F1 | 	sub	objptr, ##43168
14830     98 01 00 FF 
14834     91 95 06 F6 | 	mov	arg02, ##@LR__6036
14838     C4 03 B1 FD | 	call	#__system___string_concat
1483c     54 00 00 FF 
14840     A0 64 06 F1 | 	add	objptr, ##43168
14844     32 7B 62 FC | 	wrlong	result1, objptr
14848     54 00 00 FF 
1484c     A0 64 86 F1 | 	sub	objptr, ##43168
14850                 | LR__1764
14850                 | '   close #9: open currentdir$+"/"+loadname for input as #9
14850     09 92 06 F6 | 	mov	arg01, #9
14854     28 4F B1 FD | 	call	#__system__close
14858     09 B0 06 F6 | 	mov	local06, #9
1485c     4C 00 00 FF 
14860     38 64 06 F1 | 	add	objptr, ##38968
14864     32 93 02 FB | 	rdlong	arg01, objptr
14868     4C 00 00 FF 
1486c     38 64 86 F1 | 	sub	objptr, ##38968
14870     98 01 00 FF 
14874     96 95 06 F6 | 	mov	arg02, ##@LR__6037
14878     84 03 B1 FD | 	call	#__system___string_concat
1487c     3D 93 02 F6 | 	mov	arg01, result1
14880     54 00 00 FF 
14884     A0 64 06 F1 | 	add	objptr, ##43168
14888     32 95 02 FB | 	rdlong	arg02, objptr
1488c     54 00 00 FF 
14890     A0 64 86 F1 | 	sub	objptr, ##43168
14894     68 03 B1 FD | 	call	#__system___string_concat
14898     3D 95 02 F6 | 	mov	arg02, result1
1489c     58 93 02 F6 | 	mov	arg01, local06
148a0     00 96 06 F6 | 	mov	arg03, #0
148a4     AC 0E B1 FD | 	call	#__system___basic_open_string
148a8                 | '   do
148a8                 | LR__1765
148a8     09 92 06 F6 | 	mov	arg01, #9
148ac     00 05 B1 FD | 	call	#__system___basic_read_line
148b0     3D B1 02 F6 | 	mov	local06, result1
148b4     38 00 00 FF 
148b8     C0 65 06 F1 | 	add	objptr, ##29120
148bc     32 B1 62 FC | 	wrlong	local06, objptr
148c0     38 00 00 FF 
148c4     C0 65 86 F1 | 	sub	objptr, ##29120
148c8     7C D0 BE FD | 	call	#_interpret
148cc     38 00 00 FF 
148d0     C0 65 06 F1 | 	add	objptr, ##29120
148d4     32 93 02 FB | 	rdlong	arg01, objptr
148d8     38 00 00 FF 
148dc     C0 65 86 F1 | 	sub	objptr, ##29120
148e0     98 01 00 FF 
148e4     98 95 06 F6 | 	mov	arg02, ##@LR__6038
148e8     E0 02 B1 FD | 	call	#__system___string_cmp
148ec     00 7A 0E F2 | 	cmp	result1, #0 wz
148f0     B4 FF 9F 5D |  if_ne	jmp	#LR__1765
148f4                 | '   close #9   
148f4     09 92 06 F6 | 	mov	arg01, #9
148f8     84 4E B1 FD | 	call	#__system__close
148fc     0C 00 90 FD | 	jmp	#LR__1767
14900                 | LR__1766
14900     1E 92 06 F6 | 	mov	arg01, #30
14904     00 94 06 F6 | 	mov	arg02, #0
14908     74 C5 B0 FD | 	call	#_printerror
1490c                 | LR__1767
1490c                 | ' print "Loaded ";currentdir$+"/"+loadname
1490c     00 92 06 F6 | 	mov	arg01, #0
14910     14 58 B1 FD | 	call	#__system___getiolock_0622
14914     3D 93 02 F6 | 	mov	arg01, result1
14918     88 02 B1 FD | 	call	#__system___lockmem
1491c     98 01 00 FF 
14920     99 95 06 F6 | 	mov	arg02, ##@LR__6039
14924     00 92 06 F6 | 	mov	arg01, #0
14928     00 96 06 F6 | 	mov	arg03, #0
1492c     68 0F B1 FD | 	call	#__system___basic_print_string
14930     00 B2 06 F6 | 	mov	local07, #0
14934     4C 00 00 FF 
14938     38 64 06 F1 | 	add	objptr, ##38968
1493c     32 93 02 FB | 	rdlong	arg01, objptr
14940     4C 00 00 FF 
14944     38 64 86 F1 | 	sub	objptr, ##38968
14948     98 01 00 FF 
1494c     A1 95 06 F6 | 	mov	arg02, ##@LR__6040
14950     AC 02 B1 FD | 	call	#__system___string_concat
14954     3D 93 02 F6 | 	mov	arg01, result1
14958     54 00 00 FF 
1495c     A0 64 06 F1 | 	add	objptr, ##43168
14960     32 95 02 FB | 	rdlong	arg02, objptr
14964     54 00 00 FF 
14968     A0 64 86 F1 | 	sub	objptr, ##43168
1496c     90 02 B1 FD | 	call	#__system___string_concat
14970     3D 95 02 F6 | 	mov	arg02, result1
14974     59 93 02 F6 | 	mov	arg01, local07
14978     00 96 06 F6 | 	mov	arg03, #0
1497c     18 0F B1 FD | 	call	#__system___basic_print_string
14980     00 92 06 F6 | 	mov	arg01, #0
14984     0A 94 06 F6 | 	mov	arg02, #10
14988     00 96 06 F6 | 	mov	arg03, #0
1498c     B0 0E B1 FD | 	call	#__system___basic_print_char
14990     00 92 06 F6 | 	mov	arg01, #0
14994     90 57 B1 FD | 	call	#__system___getiolock_0622
14998     3D 01 68 FC | 	wrlong	#0, result1
1499c     54 00 00 FF 
149a0     B0 64 06 F1 | 	add	objptr, ##43184
149a4     32 01 68 FC | 	wrlong	#0, objptr
149a8     54 00 00 FF 
149ac     B0 64 86 F1 | 	sub	objptr, ##43184
149b0                 | LR__1768
149b0     E7 F0 03 F6 | 	mov	ptra, fp
149b4     F2 00 A0 FD | 	call	#popregs_
149b8                 | _do_load_ret
149b8     2D 00 64 FD | 	ret
149bc                 | 
149bc                 | ' 
149bc                 | ' '-------------------- log
149bc                 | ' 
149bc                 | ' sub do_log
149bc                 | _do_log
149bc     02 CA 05 F6 | 	mov	COUNT_, #2
149c0     E8 00 A0 FD | 	call	#pushregs_
149c4     14 F0 07 F1 | 	add	ptra, #20
149c8     4C 00 00 FF 
149cc     24 64 06 F1 | 	add	objptr, ##38948
149d0     32 97 02 FB | 	rdlong	arg03, objptr
149d4     4B 95 02 F6 | 	mov	arg02, arg03
149d8     01 94 66 F0 | 	shl	arg02, #1
149dc     4B 95 02 F1 | 	add	arg02, arg03
149e0     02 94 66 F0 | 	shl	arg02, #2
149e4     03 00 00 FF 
149e8     04 64 86 F1 | 	sub	objptr, ##1540
149ec     32 95 02 F1 | 	add	arg02, objptr
149f0     4A A7 0A FB | 	rdlong	local01, arg02 wz
149f4                 | ' 
149f4                 | ' numpar=compiledline(lineptr_e).result.uresult
149f4                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
149f4     49 00 00 FF 
149f8     20 64 86 F1 | 	sub	objptr, ##37408
149fc     03 A6 16 52 |  if_ne	cmp	local01, #3 wc
14a00     40 00 90 4D |  if_c_and_nz	jmp	#LR__1770
14a04     00 92 06 F6 | 	mov	arg01, #0
14a08     1C 57 B1 FD | 	call	#__system___getiolock_0622
14a0c     3D 93 02 F6 | 	mov	arg01, result1
14a10     90 01 B1 FD | 	call	#__system___lockmem
14a14     98 01 00 FF 
14a18     A3 95 06 F6 | 	mov	arg02, ##@LR__6041
14a1c     00 92 06 F6 | 	mov	arg01, #0
14a20     00 96 06 F6 | 	mov	arg03, #0
14a24     70 0E B1 FD | 	call	#__system___basic_print_string
14a28     00 92 06 F6 | 	mov	arg01, #0
14a2c     F8 56 B1 FD | 	call	#__system___getiolock_0622
14a30     3D 01 68 FC | 	wrlong	#0, result1
14a34     27 92 06 F6 | 	mov	arg01, #39
14a38     00 94 06 F6 | 	mov	arg02, #0
14a3c     40 C4 B0 FD | 	call	#_printerror
14a40     AC 00 90 FD | 	jmp	#LR__1773
14a44                 | LR__1770
14a44                 | ' if numpar=2 then 
14a44     02 A6 0E F2 | 	cmp	local01, #2 wz
14a48     40 00 90 5D |  if_ne	jmp	#LR__1771
14a4c     20 8C BF FD | 	call	#_pop
14a50     3F A7 02 F6 | 	mov	local01, result3
14a54     E7 7A 62 FC | 	wrlong	result1, fp
14a58     04 CE 05 F1 | 	add	fp, #4
14a5c     E7 7C 62 FC | 	wrlong	result2, fp
14a60     04 CE 05 F1 | 	add	fp, #4
14a64     E7 A6 62 FC | 	wrlong	local01, fp
14a68     08 CE 85 F1 | 	sub	fp, #8
14a6c     E7 92 02 F6 | 	mov	arg01, fp
14a70     94 8E BF FD | 	call	#_converttofloat
14a74     3D 95 02 F6 | 	mov	arg02, result1
14a78     FC 16 20 FF 
14a7c     54 92 06 F6 | 	mov	arg01, ##1076754516
14a80     D0 37 B1 FD | 	call	#__system____builtin_logbase
14a84     3D A9 02 F6 | 	mov	local02, result1
14a88     08 00 90 FD | 	jmp	#LR__1772
14a8c                 | LR__1771
14a8c     00 C0 1F FF 
14a90     00 A8 06 F6 | 	mov	local02, ##1065353216
14a94                 | LR__1772
14a94     D8 8B BF FD | 	call	#_pop
14a98     3F A7 02 F6 | 	mov	local01, result3
14a9c     E7 7A 62 FC | 	wrlong	result1, fp
14aa0     04 CE 05 F1 | 	add	fp, #4
14aa4     E7 7C 62 FC | 	wrlong	result2, fp
14aa8     04 CE 05 F1 | 	add	fp, #4
14aac     E7 A6 62 FC | 	wrlong	local01, fp
14ab0     08 CE 85 F1 | 	sub	fp, #8
14ab4     E7 92 02 F6 | 	mov	arg01, fp
14ab8     4C 8E BF FD | 	call	#_converttofloat
14abc     3D 95 02 F6 | 	mov	arg02, result1
14ac0     FC 16 20 FF 
14ac4     54 92 06 F6 | 	mov	arg01, ##1076754516
14ac8     88 37 B1 FD | 	call	#__system____builtin_logbase
14acc     3D 93 02 F6 | 	mov	arg01, result1
14ad0     54 95 02 F6 | 	mov	arg02, local02
14ad4     A0 29 B1 FD | 	call	#__system___float_div
14ad8     E7 7A 62 FC | 	wrlong	result1, fp
14adc     08 CE 05 F1 | 	add	fp, #8
14ae0     E7 3C 68 FC | 	wrlong	#30, fp
14ae4     08 CE 85 F1 | 	sub	fp, #8
14ae8     E7 92 02 F6 | 	mov	arg01, fp
14aec     10 8C BF FD | 	call	#_push
14af0                 | LR__1773
14af0     E7 F0 03 F6 | 	mov	ptra, fp
14af4     F2 00 A0 FD | 	call	#popregs_
14af8                 | _do_log_ret
14af8     2D 00 64 FD | 	ret
14afc                 | 
14afc                 | ' 
14afc                 | ' '-------------------- lpeek
14afc                 | ' 
14afc                 | ' sub do_lpeek
14afc                 | _do_lpeek
14afc     01 CA 05 F6 | 	mov	COUNT_, #1
14b00     E8 00 A0 FD | 	call	#pushregs_
14b04     14 F0 07 F1 | 	add	ptra, #20
14b08     64 8B BF FD | 	call	#_pop
14b0c     E7 7A 62 FC | 	wrlong	result1, fp
14b10     04 CE 05 F1 | 	add	fp, #4
14b14     E7 7C 62 FC | 	wrlong	result2, fp
14b18     04 CE 05 F1 | 	add	fp, #4
14b1c     E7 7E 62 FC | 	wrlong	result3, fp
14b20     08 CE 85 F1 | 	sub	fp, #8
14b24     E7 92 02 F6 | 	mov	arg01, fp
14b28     20 8D BF FD | 	call	#_converttoint
14b2c     3D 93 02 F6 | 	mov	arg01, result1
14b30                 | ' 
14b30                 | ' t1=pop()
14b30                 | ' a=converttoint(t1)
14b30                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
14b30     00 04 00 FF 
14b34     00 92 16 F2 | 	cmp	arg01, ##524288 wc
14b38     49 A7 02 CB |  if_b	rdlong	local01, arg01
14b3c     08 00 90 CD |  if_b	jmp	#LR__1780
14b40     F4 C5 B0 FD | 	call	#_pslpeek
14b44     3D A7 02 F6 | 	mov	local01, result1
14b48                 | LR__1780
14b48     08 CE 05 F1 | 	add	fp, #8
14b4c     E7 3A 68 FC | 	wrlong	#29, fp
14b50     08 CE 85 F1 | 	sub	fp, #8
14b54     E7 A6 62 FC | 	wrlong	local01, fp
14b58     E7 92 02 F6 | 	mov	arg01, fp
14b5c     A0 8B BF FD | 	call	#_push
14b60     E7 F0 03 F6 | 	mov	ptra, fp
14b64     F2 00 A0 FD | 	call	#popregs_
14b68                 | _do_lpeek_ret
14b68     2D 00 64 FD | 	ret
14b6c                 | 
14b6c                 | ' 
14b6c                 | ' '-------------------- lpoke
14b6c                 | ' 
14b6c                 | ' sub do_lpoke
14b6c                 | _do_lpoke
14b6c     02 CA 05 F6 | 	mov	COUNT_, #2
14b70     E8 00 A0 FD | 	call	#pushregs_
14b74     20 F0 07 F1 | 	add	ptra, #32
14b78     F4 8A BF FD | 	call	#_pop
14b7c     3D 95 02 F6 | 	mov	arg02, result1
14b80     3E 93 02 F6 | 	mov	arg01, result2
14b84     3F A7 02 F6 | 	mov	local01, result3
14b88     E7 94 62 FC | 	wrlong	arg02, fp
14b8c     04 CE 05 F1 | 	add	fp, #4
14b90     E7 92 62 FC | 	wrlong	arg01, fp
14b94     04 CE 05 F1 | 	add	fp, #4
14b98     E7 A6 62 FC | 	wrlong	local01, fp
14b9c     08 CE 85 F1 | 	sub	fp, #8
14ba0     CC 8A BF FD | 	call	#_pop
14ba4     3F A7 02 F6 | 	mov	local01, result3
14ba8     0C CE 05 F1 | 	add	fp, #12
14bac     E7 7A 62 FC | 	wrlong	result1, fp
14bb0     04 CE 05 F1 | 	add	fp, #4
14bb4     E7 7C 62 FC | 	wrlong	result2, fp
14bb8     04 CE 05 F1 | 	add	fp, #4
14bbc     E7 A6 62 FC | 	wrlong	local01, fp
14bc0     08 CE 85 F1 | 	sub	fp, #8
14bc4     E7 92 02 F6 | 	mov	arg01, fp
14bc8     0C CE 85 F1 | 	sub	fp, #12
14bcc     7C 8C BF FD | 	call	#_converttoint
14bd0     3D A7 02 F6 | 	mov	local01, result1
14bd4     E7 92 02 F6 | 	mov	arg01, fp
14bd8     70 8C BF FD | 	call	#_converttoint
14bdc     3D A9 02 F6 | 	mov	local02, result1
14be0                 | ' 
14be0                 | ' t1=pop() 'value
14be0                 | ' t2=pop() 
14be0                 | ' a=converttoint(t2) : v=converttoint(t1)
14be0                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
14be0     00 04 00 FF 
14be4     00 A6 16 F2 | 	cmp	local01, ##524288 wc
14be8     53 A9 62 CC |  if_b	wrlong	local02, local01
14bec     53 93 02 36 |  if_ae	mov	arg01, local01
14bf0     54 95 02 36 |  if_ae	mov	arg02, local02
14bf4     20 C4 B0 3D |  if_ae	call	#_pslpoke
14bf8     E7 F0 03 F6 | 	mov	ptra, fp
14bfc     F2 00 A0 FD | 	call	#popregs_
14c00                 | _do_lpoke_ret
14c00     2D 00 64 FD | 	ret
14c04                 | 
14c04                 | ' 
14c04                 | ' '-------------------- memlo
14c04                 | ' 
14c04                 | ' sub do_memlo
14c04                 | _do_memlo
14c04     00 CA 05 F6 | 	mov	COUNT_, #0
14c08     E8 00 A0 FD | 	call	#pushregs_
14c0c     0C F0 07 F1 | 	add	ptra, #12
14c10     45 00 00 FF 
14c14     00 64 06 F1 | 	add	objptr, ##35328
14c18     32 93 02 FB | 	rdlong	arg01, objptr
14c1c     45 00 00 FF 
14c20     00 64 86 F1 | 	sub	objptr, ##35328
14c24     E7 92 62 FC | 	wrlong	arg01, fp
14c28     08 CE 05 F1 | 	add	fp, #8
14c2c     E7 3A 68 FC | 	wrlong	#29, fp
14c30     08 CE 85 F1 | 	sub	fp, #8
14c34     E7 92 02 F6 | 	mov	arg01, fp
14c38     C4 8A BF FD | 	call	#_push
14c3c     E7 F0 03 F6 | 	mov	ptra, fp
14c40     F2 00 A0 FD | 	call	#popregs_
14c44                 | _do_memlo_ret
14c44     2D 00 64 FD | 	ret
14c48                 | 
14c48                 | ' 
14c48                 | ' '-------------------- memtop
14c48                 | ' 
14c48                 | ' sub do_memtop
14c48                 | _do_memtop
14c48     00 CA 05 F6 | 	mov	COUNT_, #0
14c4c     E8 00 A0 FD | 	call	#pushregs_
14c50     0C F0 07 F1 | 	add	ptra, #12
14c54     54 00 00 FF 
14c58     74 64 06 F1 | 	add	objptr, ##43124
14c5c     32 93 02 FB | 	rdlong	arg01, objptr
14c60     54 00 00 FF 
14c64     74 64 86 F1 | 	sub	objptr, ##43124
14c68     E7 92 62 FC | 	wrlong	arg01, fp
14c6c     08 CE 05 F1 | 	add	fp, #8
14c70     E7 3A 68 FC | 	wrlong	#29, fp
14c74     08 CE 85 F1 | 	sub	fp, #8
14c78     E7 92 02 F6 | 	mov	arg01, fp
14c7c     80 8A BF FD | 	call	#_push
14c80     E7 F0 03 F6 | 	mov	ptra, fp
14c84     F2 00 A0 FD | 	call	#popregs_
14c88                 | _do_memtop_ret
14c88     2D 00 64 FD | 	ret
14c8c                 | 
14c8c                 | ' 
14c8c                 | ' '-------------------- mid$
14c8c                 | ' 
14c8c                 | ' sub do_mid
14c8c                 | _do_mid
14c8c     02 CA 05 F6 | 	mov	COUNT_, #2
14c90     E8 00 A0 FD | 	call	#pushregs_
14c94     18 F0 07 F1 | 	add	ptra, #24
14c98     4C 00 00 FF 
14c9c     24 64 06 F1 | 	add	objptr, ##38948
14ca0     32 97 02 FB | 	rdlong	arg03, objptr
14ca4     4B 95 02 F6 | 	mov	arg02, arg03
14ca8     01 94 66 F0 | 	shl	arg02, #1
14cac     4B 95 02 F1 | 	add	arg02, arg03
14cb0     02 94 66 F0 | 	shl	arg02, #2
14cb4     03 00 00 FF 
14cb8     04 64 86 F1 | 	sub	objptr, ##1540
14cbc     32 95 02 F1 | 	add	arg02, objptr
14cc0     4A 97 02 FB | 	rdlong	arg03, arg02
14cc4                 | ' 
14cc4                 | ' numpar=compiledline(lineptr_e).result.uresult
14cc4                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
14cc4     03 96 0E F2 | 	cmp	arg03, #3 wz
14cc8     49 00 00 FF 
14ccc     20 64 86 F1 | 	sub	objptr, ##37408
14cd0     40 00 90 AD |  if_e	jmp	#LR__1790
14cd4     00 92 06 F6 | 	mov	arg01, #0
14cd8     4C 54 B1 FD | 	call	#__system___getiolock_0622
14cdc     3D 93 02 F6 | 	mov	arg01, result1
14ce0     C0 FE B0 FD | 	call	#__system___lockmem
14ce4     98 01 00 FF 
14ce8     A9 95 06 F6 | 	mov	arg02, ##@LR__6042
14cec     00 92 06 F6 | 	mov	arg01, #0
14cf0     00 96 06 F6 | 	mov	arg03, #0
14cf4     A0 0B B1 FD | 	call	#__system___basic_print_string
14cf8     00 92 06 F6 | 	mov	arg01, #0
14cfc     28 54 B1 FD | 	call	#__system___getiolock_0622
14d00     3D 01 68 FC | 	wrlong	#0, result1
14d04     27 92 06 F6 | 	mov	arg01, #39
14d08     00 94 06 F6 | 	mov	arg02, #0
14d0c     70 C1 B0 FD | 	call	#_printerror
14d10     08 01 90 FD | 	jmp	#LR__1793
14d14                 | LR__1790
14d14     58 89 BF FD | 	call	#_pop
14d18     3F 97 02 F6 | 	mov	arg03, result3
14d1c     E7 7A 62 FC | 	wrlong	result1, fp
14d20     04 CE 05 F1 | 	add	fp, #4
14d24     E7 7C 62 FC | 	wrlong	result2, fp
14d28     04 CE 05 F1 | 	add	fp, #4
14d2c     E7 96 62 FC | 	wrlong	arg03, fp
14d30     08 CE 85 F1 | 	sub	fp, #8
14d34     E7 92 02 F6 | 	mov	arg01, fp
14d38     10 8B BF FD | 	call	#_converttoint
14d3c     3D A7 02 F6 | 	mov	local01, result1
14d40     2C 89 BF FD | 	call	#_pop
14d44     3F 97 02 F6 | 	mov	arg03, result3
14d48     E7 7A 62 FC | 	wrlong	result1, fp
14d4c     04 CE 05 F1 | 	add	fp, #4
14d50     E7 7C 62 FC | 	wrlong	result2, fp
14d54     04 CE 05 F1 | 	add	fp, #4
14d58     E7 96 62 FC | 	wrlong	arg03, fp
14d5c     08 CE 85 F1 | 	sub	fp, #8
14d60     E7 92 02 F6 | 	mov	arg01, fp
14d64     E4 8A BF FD | 	call	#_converttoint
14d68     3D A9 02 F6 | 	mov	local02, result1
14d6c     00 89 BF FD | 	call	#_pop
14d70     3F 97 02 F6 | 	mov	arg03, result3
14d74     E7 7A 62 FC | 	wrlong	result1, fp
14d78     04 CE 05 F1 | 	add	fp, #4
14d7c     E7 7C 62 FC | 	wrlong	result2, fp
14d80     04 CE 05 F1 | 	add	fp, #4
14d84     E7 96 62 FC | 	wrlong	arg03, fp
14d88                 | ' t1=pop() : arg2=converttoint(t1)
14d88                 | ' t1=pop() : arg1=converttoint(t1)
14d88                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14d88     08 CE 85 F1 | 	sub	fp, #8
14d8c     2B 96 0E F2 | 	cmp	arg03, #43 wz
14d90     18 00 90 5D |  if_ne	jmp	#LR__1791
14d94     E7 92 02 FB | 	rdlong	arg01, fp
14d98     44 8A BF FD | 	call	#_convertstring
14d9c     E7 7A 62 FC | 	wrlong	result1, fp
14da0     08 CE 05 F1 | 	add	fp, #8
14da4     E7 3E 68 FC | 	wrlong	#31, fp
14da8     08 CE 85 F1 | 	sub	fp, #8
14dac                 | LR__1791
14dac                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
14dac     08 CE 05 F1 | 	add	fp, #8
14db0     E7 96 02 FB | 	rdlong	arg03, fp
14db4     08 CE 85 F1 | 	sub	fp, #8
14db8     1F 96 0E F2 | 	cmp	arg03, #31 wz
14dbc     40 00 90 AD |  if_e	jmp	#LR__1792
14dc0     00 92 06 F6 | 	mov	arg01, #0
14dc4     60 53 B1 FD | 	call	#__system___getiolock_0622
14dc8     3D 93 02 F6 | 	mov	arg01, result1
14dcc     D4 FD B0 FD | 	call	#__system___lockmem
14dd0     98 01 00 FF 
14dd4     B0 95 06 F6 | 	mov	arg02, ##@LR__6043
14dd8     00 92 06 F6 | 	mov	arg01, #0
14ddc     00 96 06 F6 | 	mov	arg03, #0
14de0     B4 0A B1 FD | 	call	#__system___basic_print_string
14de4     00 92 06 F6 | 	mov	arg01, #0
14de8     3C 53 B1 FD | 	call	#__system___getiolock_0622
14dec     3D 01 68 FC | 	wrlong	#0, result1
14df0     0F 92 06 F6 | 	mov	arg01, #15
14df4     00 94 06 F6 | 	mov	arg02, #0
14df8     84 C0 B0 FD | 	call	#_printerror
14dfc     1C 00 90 FD | 	jmp	#LR__1793
14e00                 | LR__1792
14e00     E7 92 02 FB | 	rdlong	arg01, fp
14e04     54 95 02 F6 | 	mov	arg02, local02
14e08     53 97 02 F6 | 	mov	arg03, local01
14e0c     54 17 B1 FD | 	call	#__system__Mid_S
14e10     E7 7A 62 FC | 	wrlong	result1, fp
14e14     E7 92 02 F6 | 	mov	arg01, fp
14e18     E4 88 BF FD | 	call	#_push
14e1c                 | LR__1793
14e1c     E7 F0 03 F6 | 	mov	ptra, fp
14e20     F2 00 A0 FD | 	call	#popregs_
14e24                 | _do_mid_ret
14e24     2D 00 64 FD | 	ret
14e28                 | 
14e28                 | ' 
14e28                 | ' '-------------------- mkdir
14e28                 | ' 
14e28                 | ' sub do_mkdir
14e28                 | _do_mkdir
14e28     04 CA 05 F6 | 	mov	COUNT_, #4
14e2c     E8 00 A0 FD | 	call	#pushregs_
14e30     3C 88 BF FD | 	call	#_pop
14e34     3E 99 02 F6 | 	mov	arg04, result2
14e38     3F 97 02 F6 | 	mov	arg03, result3
14e3c     3D A7 02 F6 | 	mov	local01, result1
14e40     4C A9 02 F6 | 	mov	local02, arg04
14e44     4B AB 02 F6 | 	mov	local03, arg03
14e48                 | ' 
14e48                 | ' t1=pop()
14e48                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14e48     2B AA 0E F2 | 	cmp	local03, #43 wz
14e4c     10 00 90 5D |  if_ne	jmp	#LR__1800
14e50     53 93 02 F6 | 	mov	arg01, local01
14e54     88 89 BF FD | 	call	#_convertstring
14e58     3D A7 02 F6 | 	mov	local01, result1
14e5c     1F AA 06 F6 | 	mov	local03, #31
14e60                 | LR__1800
14e60                 | ' if t1.result_type<>result_string then printerror(15): return
14e60     1F AA 0E F2 | 	cmp	local03, #31 wz
14e64     10 00 90 AD |  if_e	jmp	#LR__1801
14e68     0F 92 06 F6 | 	mov	arg01, #15
14e6c     00 94 06 F6 | 	mov	arg02, #0
14e70     0C C0 B0 FD | 	call	#_printerror
14e74     64 00 90 FD | 	jmp	#LR__1803
14e78                 | LR__1801
14e78     53 93 02 F6 | 	mov	arg01, local01
14e7c     1C 1E B1 FD | 	call	#__system___mkdir
14e80     3D AD 0A F6 | 	mov	local04, result1 wz
14e84                 | ' filename$=t1.result.sresult
14e84                 | ' err=mkdir(filename$)
14e84                 | ' 'err=geterr() : 
14e84                 | ' if err<>0 then print "Cannot create a directory: system error "; err
14e84     54 00 90 AD |  if_e	jmp	#LR__1802
14e88     00 92 06 F6 | 	mov	arg01, #0
14e8c     98 52 B1 FD | 	call	#__system___getiolock_0622
14e90     3D 93 02 F6 | 	mov	arg01, result1
14e94     0C FD B0 FD | 	call	#__system___lockmem
14e98     98 01 00 FF 
14e9c     B7 95 06 F6 | 	mov	arg02, ##@LR__6044
14ea0     00 92 06 F6 | 	mov	arg01, #0
14ea4     00 96 06 F6 | 	mov	arg03, #0
14ea8     EC 09 B1 FD | 	call	#__system___basic_print_string
14eac     00 92 06 F6 | 	mov	arg01, #0
14eb0     56 95 02 F6 | 	mov	arg02, local04
14eb4     00 96 06 F6 | 	mov	arg03, #0
14eb8     0A 98 06 F6 | 	mov	arg04, #10
14ebc     1C 0A B1 FD | 	call	#__system___basic_print_integer
14ec0     00 92 06 F6 | 	mov	arg01, #0
14ec4     0A 94 06 F6 | 	mov	arg02, #10
14ec8     00 96 06 F6 | 	mov	arg03, #0
14ecc     70 09 B1 FD | 	call	#__system___basic_print_char
14ed0     00 92 06 F6 | 	mov	arg01, #0
14ed4     50 52 B1 FD | 	call	#__system___getiolock_0622
14ed8     3D 01 68 FC | 	wrlong	#0, result1
14edc                 | LR__1802
14edc                 | LR__1803
14edc     E7 F0 03 F6 | 	mov	ptra, fp
14ee0     F2 00 A0 FD | 	call	#popregs_
14ee4                 | _do_mkdir_ret
14ee4     2D 00 64 FD | 	ret
14ee8                 | 
14ee8                 | ' 
14ee8                 | ' '-------------------- mode
14ee8                 | ' 
14ee8                 | ' sub do_mode
14ee8                 | _do_mode
14ee8     05 CA 05 F6 | 	mov	COUNT_, #5
14eec     E8 00 A0 FD | 	call	#pushregs_
14ef0     7C 87 BF FD | 	call	#_pop
14ef4     3D A7 02 F6 | 	mov	local01, result1
14ef8     3E A9 02 F6 | 	mov	local02, result2
14efc     3F AB 02 F6 | 	mov	local03, result3
14f00                 | ' t1=pop() 
14f00                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
14f00     1E AA 0E F2 | 	cmp	local03, #30 wz
14f04     10 00 90 5D |  if_ne	jmp	#LR__1810
14f08     53 93 02 F6 | 	mov	arg01, local01
14f0c     00 94 06 F6 | 	mov	arg02, #0
14f10     28 28 B1 FD | 	call	#__system___float_tointeger
14f14     3D A7 02 F6 | 	mov	local01, result1
14f18                 | LR__1810
14f18                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
14f18     1F AA 0E F2 | 	cmp	local03, #31 wz
14f1c     18 00 90 5D |  if_ne	jmp	#LR__1811
14f20     53 93 02 F6 | 	mov	arg01, local01
14f24     68 2B B1 FD | 	call	#__system____builtin_atof
14f28     3D 93 02 F6 | 	mov	arg01, result1
14f2c     00 94 06 F6 | 	mov	arg02, #0
14f30     08 28 B1 FD | 	call	#__system___float_tointeger
14f34     3D A7 02 F6 | 	mov	local01, result1
14f38                 | LR__1811
14f38                 | ' select case t1.result.iresult
14f38     53 AD 02 F6 | 	mov	local04, local01
14f3c     06 AC 26 F3 | 	fle	local04, #6
14f40     30 AC 62 FD | 	jmprel	local04
14f44                 | LR__1812
14f44     18 00 90 FD | 	jmp	#LR__1813
14f48     A8 00 90 FD | 	jmp	#LR__1814
14f4c     10 01 90 FD | 	jmp	#LR__1815
14f50     78 01 90 FD | 	jmp	#LR__1816
14f54     E0 01 90 FD | 	jmp	#LR__1817
14f58     70 02 90 FD | 	jmp	#LR__1818
14f5c     FC 02 90 FD | 	jmp	#LR__1819
14f60                 | LR__1813
14f60     38 00 00 FF 
14f64     E4 65 06 F1 | 	add	objptr, ##29156
14f68     32 03 68 FC | 	wrlong	#1, objptr
14f6c     04 64 86 F1 | 	sub	objptr, #4
14f70     32 35 69 FC | 	wrlong	#154, objptr
14f74     19 00 00 FF 
14f78     00 65 06 F1 | 	add	objptr, ##13056
14f7c     32 03 68 FC | 	wrlong	#1, objptr
14f80     19 00 00 FF 
14f84     04 65 86 F1 | 	sub	objptr, ##13060
14f88     32 27 69 FC | 	wrlong	#147, objptr
14f8c     38 00 00 FF 
14f90     DC 65 86 F1 | 	sub	objptr, ##29148
14f94     04 92 06 F6 | 	mov	arg01, #4
14f98     F8 DA B0 FD | 	call	#_hg010b_spin2_setfontfamily
14f9c     38 00 00 FF 
14fa0     E0 65 06 F1 | 	add	objptr, ##29152
14fa4     32 93 02 FB | 	rdlong	arg01, objptr
14fa8     04 64 86 F1 | 	sub	objptr, #4
14fac     32 95 02 FB | 	rdlong	arg02, objptr
14fb0                 | ' 
14fb0                 | ' write_color:=ff
14fb0     38 00 00 FF 
14fb4     9B 65 86 F1 | 	sub	objptr, ##29083
14fb8     32 93 62 FC | 	wrlong	arg01, objptr
14fbc                 | ' write_background:=bb
14fbc     04 64 06 F1 | 	add	objptr, #4
14fc0     32 95 62 FC | 	wrlong	arg02, objptr
14fc4     35 AD 02 F6 | 	mov	local04, ptr__dat__
14fc8     01 00 00 FF 
14fcc     00 AC 06 F1 | 	add	local04, ##512
14fd0     54 00 00 FF 
14fd4     3B 64 06 F1 | 	add	objptr, ##43067
14fd8     32 AD 62 FC | 	wrlong	local04, objptr
14fdc     04 64 86 F1 | 	sub	objptr, #4
14fe0     03 00 80 FF 
14fe4     32 31 69 FC | 	wrlong	##1688, objptr
14fe8     54 00 00 FF 
14fec     7C 64 86 F1 | 	sub	objptr, ##43132
14ff0     68 02 90 FD | 	jmp	#LR__1819
14ff4                 | LR__1814
14ff4     38 00 00 FF 
14ff8     E4 65 06 F1 | 	add	objptr, ##29156
14ffc     32 01 68 FC | 	wrlong	#0, objptr
15000     04 64 86 F1 | 	sub	objptr, #4
15004     32 2F 68 FC | 	wrlong	#23, objptr
15008     19 00 00 FF 
1500c     00 65 06 F1 | 	add	objptr, ##13056
15010     32 01 68 FC | 	wrlong	#0, objptr
15014     19 00 00 FF 
15018     04 65 86 F1 | 	sub	objptr, ##13060
1501c     32 01 68 FC | 	wrlong	#0, objptr
15020     38 00 00 FF 
15024     DC 65 86 F1 | 	sub	objptr, ##29148
15028     00 92 06 F6 | 	mov	arg01, #0
1502c     64 DA B0 FD | 	call	#_hg010b_spin2_setfontfamily
15030     38 00 00 FF 
15034     E0 65 06 F1 | 	add	objptr, ##29152
15038     32 93 02 FB | 	rdlong	arg01, objptr
1503c     04 64 86 F1 | 	sub	objptr, #4
15040     32 95 02 FB | 	rdlong	arg02, objptr
15044                 | ' 
15044                 | ' write_color:=ff
15044     38 00 00 FF 
15048     9B 65 86 F1 | 	sub	objptr, ##29083
1504c     32 93 62 FC | 	wrlong	arg01, objptr
15050                 | ' write_background:=bb
15050     04 64 06 F1 | 	add	objptr, #4
15054     32 95 62 FC | 	wrlong	arg02, objptr
15058     45 64 86 F1 | 	sub	objptr, #69
1505c     FC 01 90 FD | 	jmp	#LR__1819
15060                 | LR__1815
15060     38 00 00 FF 
15064     E4 65 06 F1 | 	add	objptr, ##29156
15068     32 01 68 FC | 	wrlong	#0, objptr
1506c     04 64 86 F1 | 	sub	objptr, #4
15070     32 6B 69 FC | 	wrlong	#181, objptr
15074     19 00 00 FF 
15078     00 65 06 F1 | 	add	objptr, ##13056
1507c     32 01 68 FC | 	wrlong	#0, objptr
15080     19 00 00 FF 
15084     04 65 86 F1 | 	sub	objptr, ##13060
15088     32 01 68 FC | 	wrlong	#0, objptr
1508c     38 00 00 FF 
15090     DC 65 86 F1 | 	sub	objptr, ##29148
15094     00 92 06 F6 | 	mov	arg01, #0
15098     F8 D9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1509c     38 00 00 FF 
150a0     E0 65 06 F1 | 	add	objptr, ##29152
150a4     32 93 02 FB | 	rdlong	arg01, objptr
150a8     04 64 86 F1 | 	sub	objptr, #4
150ac     32 95 02 FB | 	rdlong	arg02, objptr
150b0                 | ' 
150b0                 | ' write_color:=ff
150b0     38 00 00 FF 
150b4     9B 65 86 F1 | 	sub	objptr, ##29083
150b8     32 93 62 FC | 	wrlong	arg01, objptr
150bc                 | ' write_background:=bb
150bc     04 64 06 F1 | 	add	objptr, #4
150c0     32 95 62 FC | 	wrlong	arg02, objptr
150c4     45 64 86 F1 | 	sub	objptr, #69
150c8     90 01 90 FD | 	jmp	#LR__1819
150cc                 | LR__1816
150cc     38 00 00 FF 
150d0     E4 65 06 F1 | 	add	objptr, ##29156
150d4     32 01 68 FC | 	wrlong	#0, objptr
150d8     04 64 86 F1 | 	sub	objptr, #4
150dc     32 1F 68 FC | 	wrlong	#15, objptr
150e0     19 00 00 FF 
150e4     00 65 06 F1 | 	add	objptr, ##13056
150e8     32 01 68 FC | 	wrlong	#0, objptr
150ec     19 00 00 FF 
150f0     04 65 86 F1 | 	sub	objptr, ##13060
150f4     32 01 68 FC | 	wrlong	#0, objptr
150f8     38 00 00 FF 
150fc     DC 65 86 F1 | 	sub	objptr, ##29148
15100     00 92 06 F6 | 	mov	arg01, #0
15104     8C D9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15108     38 00 00 FF 
1510c     E0 65 06 F1 | 	add	objptr, ##29152
15110     32 93 02 FB | 	rdlong	arg01, objptr
15114     04 64 86 F1 | 	sub	objptr, #4
15118     32 95 02 FB | 	rdlong	arg02, objptr
1511c                 | ' 
1511c                 | ' write_color:=ff
1511c     38 00 00 FF 
15120     9B 65 86 F1 | 	sub	objptr, ##29083
15124     32 93 62 FC | 	wrlong	arg01, objptr
15128                 | ' write_background:=bb
15128     04 64 06 F1 | 	add	objptr, #4
1512c     32 95 62 FC | 	wrlong	arg02, objptr
15130     45 64 86 F1 | 	sub	objptr, #69
15134     24 01 90 FD | 	jmp	#LR__1819
15138                 | LR__1817
15138     38 00 00 FF 
1513c     E4 65 06 F1 | 	add	objptr, ##29156
15140     32 03 68 FC | 	wrlong	#1, objptr
15144     04 64 86 F1 | 	sub	objptr, #4
15148     32 03 68 FC | 	wrlong	#1, objptr
1514c     19 00 00 FF 
15150     00 65 06 F1 | 	add	objptr, ##13056
15154     32 03 68 FC | 	wrlong	#1, objptr
15158     19 00 00 FF 
1515c     04 65 86 F1 | 	sub	objptr, ##13060
15160     32 1D 68 FC | 	wrlong	#14, objptr
15164     38 00 00 FF 
15168     DC 65 86 F1 | 	sub	objptr, ##29148
1516c     04 92 06 F6 | 	mov	arg01, #4
15170     20 D9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15174     38 00 00 FF 
15178     E0 65 06 F1 | 	add	objptr, ##29152
1517c     32 93 02 FB | 	rdlong	arg01, objptr
15180     04 64 86 F1 | 	sub	objptr, #4
15184     32 95 02 FB | 	rdlong	arg02, objptr
15188                 | ' 
15188                 | ' write_color:=ff
15188     38 00 00 FF 
1518c     9B 65 86 F1 | 	sub	objptr, ##29083
15190     32 93 62 FC | 	wrlong	arg01, objptr
15194                 | ' write_background:=bb
15194     04 64 06 F1 | 	add	objptr, #4
15198     32 95 62 FC | 	wrlong	arg02, objptr
1519c     35 AF 02 F6 | 	mov	local05, ptr__dat__
151a0     07 00 00 FF 
151a4     82 AF 06 F1 | 	add	local05, ##3970
151a8     54 00 00 FF 
151ac     3B 64 06 F1 | 	add	objptr, ##43067
151b0     32 AF 62 FC | 	wrlong	local05, objptr
151b4     04 64 86 F1 | 	sub	objptr, #4
151b8     03 00 80 FF 
151bc     32 31 69 FC | 	wrlong	##1688, objptr
151c0     54 00 00 FF 
151c4     7C 64 86 F1 | 	sub	objptr, ##43132
151c8     90 00 90 FD | 	jmp	#LR__1819
151cc                 | LR__1818
151cc     38 00 00 FF 
151d0     E4 65 06 F1 | 	add	objptr, ##29156
151d4     32 05 68 FC | 	wrlong	#2, objptr
151d8     04 64 86 F1 | 	sub	objptr, #4
151dc     32 03 68 FC | 	wrlong	#1, objptr
151e0     19 00 00 FF 
151e4     00 65 06 F1 | 	add	objptr, ##13056
151e8     32 03 68 FC | 	wrlong	#1, objptr
151ec     19 00 00 FF 
151f0     04 65 86 F1 | 	sub	objptr, ##13060
151f4     32 0F 68 FC | 	wrlong	#7, objptr
151f8     38 00 00 FF 
151fc     DC 65 86 F1 | 	sub	objptr, ##29148
15200     08 92 06 F6 | 	mov	arg01, #8
15204     8C D8 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15208     38 00 00 FF 
1520c     E0 65 06 F1 | 	add	objptr, ##29152
15210     32 93 02 FB | 	rdlong	arg01, objptr
15214     04 64 86 F1 | 	sub	objptr, #4
15218     32 95 02 FB | 	rdlong	arg02, objptr
1521c                 | ' 
1521c                 | ' write_color:=ff
1521c     38 00 00 FF 
15220     9B 65 86 F1 | 	sub	objptr, ##29083
15224     32 93 62 FC | 	wrlong	arg01, objptr
15228                 | ' write_background:=bb
15228     04 64 06 F1 | 	add	objptr, #4
1522c     32 95 62 FC | 	wrlong	arg02, objptr
15230     35 AF 02 F6 | 	mov	local05, ptr__dat__
15234     07 00 00 FF 
15238     82 AF 06 F1 | 	add	local05, ##3970
1523c     54 00 00 FF 
15240     3B 64 06 F1 | 	add	objptr, ##43067
15244     32 AF 62 FC | 	wrlong	local05, objptr
15248     04 64 86 F1 | 	sub	objptr, #4
1524c     03 00 80 FF 
15250     32 31 69 FC | 	wrlong	##1688, objptr
15254     54 00 00 FF 
15258     7C 64 86 F1 | 	sub	objptr, ##43132
1525c                 | LR__1819
1525c     54 00 00 FF 
15260     78 64 06 F1 | 	add	objptr, ##43128
15264     32 A7 62 FC | 	wrlong	local01, objptr
15268     04 64 86 F1 | 	sub	objptr, #4
1526c     32 93 02 FB | 	rdlong	arg01, objptr
15270     0F 00 00 FF 
15274     74 64 86 F1 | 	sub	objptr, ##7796
15278     32 AF 02 FB | 	rdlong	local05, objptr
1527c     45 00 00 FF 
15280     00 64 86 F1 | 	sub	objptr, ##35328
15284     57 93 82 F1 | 	sub	arg01, local05
15288     00 94 06 F6 | 	mov	arg02, #0
1528c     0A 96 06 F6 | 	mov	arg03, #10
15290     0C 14 B1 FD | 	call	#__system__Number_S
15294     3D 93 02 F6 | 	mov	arg01, result1
15298     98 01 00 FF 
1529c     E0 95 06 F6 | 	mov	arg02, ##@LR__6045
152a0     5C F9 B0 FD | 	call	#__system___string_concat
152a4     52 00 00 FF 
152a8     DC 64 06 F1 | 	add	objptr, ##42204
152ac     32 7B 62 FC | 	wrlong	result1, objptr
152b0     19 00 00 FF 
152b4     FC 64 86 F1 | 	sub	objptr, ##13052
152b8     32 93 02 FB | 	rdlong	arg01, objptr
152bc     04 64 86 F1 | 	sub	objptr, #4
152c0     32 95 02 FB | 	rdlong	arg02, objptr
152c4     38 00 00 FF 
152c8     DC 65 86 F1 | 	sub	objptr, ##29148
152cc     90 D9 B0 FD | 	call	#_hg010b_spin2_cls
152d0     98 01 00 FF 
152d4     F2 93 06 F6 | 	mov	arg01, ##@LR__6046
152d8                 | ' 
152d8                 | ' write(text)
152d8     38 DD B0 FD | 	call	#_hg010b_spin2_write
152dc                 | ' crlf
152dc     D4 E1 B0 FD | 	call	#_hg010b_spin2_crlf
152e0     18 00 00 FF 
152e4     40 6B 06 F1 | 	add	ptr__dat__, ##12608
152e8     35 93 02 FB | 	rdlong	arg01, ptr__dat__
152ec     18 00 00 FF 
152f0     40 6B 86 F1 | 	sub	ptr__dat__, ##12608
152f4                 | ' 
152f4                 | ' write(text)
152f4     1C DD B0 FD | 	call	#_hg010b_spin2_write
152f8                 | ' crlf
152f8     B8 E1 B0 FD | 	call	#_hg010b_spin2_crlf
152fc     52 00 00 FF 
15300     DC 64 06 F1 | 	add	objptr, ##42204
15304     32 93 02 FB | 	rdlong	arg01, objptr
15308     52 00 00 FF 
1530c     DC 64 86 F1 | 	sub	objptr, ##42204
15310                 | ' 
15310                 | ' write(text)
15310     00 DD B0 FD | 	call	#_hg010b_spin2_write
15314                 | ' crlf
15314     9C E1 B0 FD | 	call	#_hg010b_spin2_crlf
15318     E7 F0 03 F6 | 	mov	ptra, fp
1531c     F2 00 A0 FD | 	call	#popregs_
15320                 | _do_mode_ret
15320     2D 00 64 FD | 	ret
15324                 | 
15324                 | ' 
15324                 | ' '-------------------- mouse
15324                 | ' 
15324                 | ' sub do_mouse
15324                 | _do_mouse
15324     48 83 BF FD | 	call	#_pop
15328     00 7A 4E F2 | 	cmps	result1, #0 wz
1532c                 | ' 
1532c                 | ' t1=pop()
1532c                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
1532c     14 00 90 5D |  if_ne	jmp	#LR__1820
15330     10 92 06 F6 | 	mov	arg01, #16
15334     00 94 06 F6 | 	mov	arg02, #0
15338     00 96 06 F6 | 	mov	arg03, #0
1533c     88 CB B0 FD | 	call	#_hg010b_spin2_setspritesize
15340     10 00 90 FD | 	jmp	#LR__1821
15344                 | LR__1820
15344     10 92 06 F6 | 	mov	arg01, #16
15348     20 94 06 F6 | 	mov	arg02, #32
1534c     20 96 06 F6 | 	mov	arg03, #32
15350     74 CB B0 FD | 	call	#_hg010b_spin2_setspritesize
15354                 | LR__1821
15354                 | _do_mouse_ret
15354     2D 00 64 FD | 	ret
15358                 | 
15358                 | ' 
15358                 | ' '-------------------- mousek
15358                 | ' 
15358                 | ' sub do_mousek
15358                 | _do_mousek
15358     00 CA 05 F6 | 	mov	COUNT_, #0
1535c     E8 00 A0 FD | 	call	#pushregs_
15360     0C F0 07 F1 | 	add	ptra, #12
15364     08 CE 05 F1 | 	add	fp, #8
15368     E7 3A 68 FC | 	wrlong	#29, fp
1536c     08 CE 85 F1 | 	sub	fp, #8
15370     53 00 00 FF 
15374     F4 64 06 F1 | 	add	objptr, ##42740
15378     32 93 02 FB | 	rdlong	arg01, objptr
1537c     53 00 00 FF 
15380     F4 64 86 F1 | 	sub	objptr, ##42740
15384     E7 92 62 FC | 	wrlong	arg01, fp
15388     E7 92 02 F6 | 	mov	arg01, fp
1538c     70 83 BF FD | 	call	#_push
15390     E7 F0 03 F6 | 	mov	ptra, fp
15394     F2 00 A0 FD | 	call	#popregs_
15398                 | _do_mousek_ret
15398     2D 00 64 FD | 	ret
1539c                 | 
1539c                 | ' 
1539c                 | ' '-------------------- mousew
1539c                 | ' 
1539c                 | ' sub do_mousew
1539c                 | _do_mousew
1539c     00 CA 05 F6 | 	mov	COUNT_, #0
153a0     E8 00 A0 FD | 	call	#pushregs_
153a4     0C F0 07 F1 | 	add	ptra, #12
153a8     08 CE 05 F1 | 	add	fp, #8
153ac     E7 38 68 FC | 	wrlong	#28, fp
153b0     08 CE 85 F1 | 	sub	fp, #8
153b4     53 00 00 FF 
153b8     F8 64 06 F1 | 	add	objptr, ##42744
153bc     32 93 02 FB | 	rdlong	arg01, objptr
153c0     53 00 00 FF 
153c4     F8 64 86 F1 | 	sub	objptr, ##42744
153c8     E7 92 62 FC | 	wrlong	arg01, fp
153cc     E7 92 02 F6 | 	mov	arg01, fp
153d0     2C 83 BF FD | 	call	#_push
153d4     E7 F0 03 F6 | 	mov	ptra, fp
153d8     F2 00 A0 FD | 	call	#popregs_
153dc                 | _do_mousew_ret
153dc     2D 00 64 FD | 	ret
153e0                 | 
153e0                 | ' 
153e0                 | ' '-------------------- mousex
153e0                 | ' 
153e0                 | ' sub do_mousex
153e0                 | _do_mousex
153e0     00 CA 05 F6 | 	mov	COUNT_, #0
153e4     E8 00 A0 FD | 	call	#pushregs_
153e8     0C F0 07 F1 | 	add	ptra, #12
153ec     08 CE 05 F1 | 	add	fp, #8
153f0     E7 3A 68 FC | 	wrlong	#29, fp
153f4     08 CE 85 F1 | 	sub	fp, #8
153f8     53 00 00 FF 
153fc     EC 64 06 F1 | 	add	objptr, ##42732
15400     32 93 02 FB | 	rdlong	arg01, objptr
15404     53 00 00 FF 
15408     EC 64 86 F1 | 	sub	objptr, ##42732
1540c     E7 92 62 FC | 	wrlong	arg01, fp
15410     E7 92 02 F6 | 	mov	arg01, fp
15414     E8 82 BF FD | 	call	#_push
15418     E7 F0 03 F6 | 	mov	ptra, fp
1541c     F2 00 A0 FD | 	call	#popregs_
15420                 | _do_mousex_ret
15420     2D 00 64 FD | 	ret
15424                 | 
15424                 | ' 
15424                 | ' '-------------------- mousey
15424                 | ' 
15424                 | ' sub do_mousey
15424                 | _do_mousey
15424     00 CA 05 F6 | 	mov	COUNT_, #0
15428     E8 00 A0 FD | 	call	#pushregs_
1542c     0C F0 07 F1 | 	add	ptra, #12
15430     08 CE 05 F1 | 	add	fp, #8
15434     E7 3A 68 FC | 	wrlong	#29, fp
15438     08 CE 85 F1 | 	sub	fp, #8
1543c     53 00 00 FF 
15440     F0 64 06 F1 | 	add	objptr, ##42736
15444     32 93 02 FB | 	rdlong	arg01, objptr
15448     53 00 00 FF 
1544c     F0 64 86 F1 | 	sub	objptr, ##42736
15450     E7 92 62 FC | 	wrlong	arg01, fp
15454     E7 92 02 F6 | 	mov	arg01, fp
15458     A4 82 BF FD | 	call	#_push
1545c     E7 F0 03 F6 | 	mov	ptra, fp
15460     F2 00 A0 FD | 	call	#popregs_
15464                 | _do_mousey_ret
15464     2D 00 64 FD | 	ret
15468                 | 
15468                 | ' 
15468                 | ' '------------------ new
15468                 | ' 
15468                 | ' sub do_new
15468                 | _do_new
15468     03 CA 05 F6 | 	mov	COUNT_, #3
1546c     E8 00 A0 FD | 	call	#pushregs_
15470                 | ' 
15470                 | ' if inrun=1 then inrun=2
15470     52 00 00 FF 
15474     90 64 06 F1 | 	add	objptr, ##42128
15478     32 97 02 FB | 	rdlong	arg03, objptr
1547c     52 00 00 FF 
15480     90 64 86 F1 | 	sub	objptr, ##42128
15484     01 96 0E F2 | 	cmp	arg03, #1 wz
15488     52 00 00 AF 
1548c     90 64 06 A1 |  if_e	add	objptr, ##42128
15490     32 05 68 AC |  if_e	wrlong	#2, objptr
15494     52 00 00 AF 
15498     90 64 86 A1 |  if_e	sub	objptr, ##42128
1549c     13 92 C6 F9 | 	decod	arg01, #19
154a0     01 94 66 F6 | 	neg	arg02, #1
154a4     70 BB B0 FD | 	call	#_pslpoke
154a8     36 00 00 FF 
154ac     AC 65 06 F1 | 	add	objptr, ##28076
154b0     32 01 68 FC | 	wrlong	#0, objptr
154b4                 | ' pslpoke(memlo,$FFFFFFFF)
154b4                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
154b4     00 A6 06 F6 | 	mov	local01, #0
154b8     20 00 00 FF 
154bc     10 64 86 F1 | 	sub	objptr, ##16400
154c0     D7 1E 48 FB | 	callpa	#(@LR__1831-@LR__1830)>>2,fcache_load_ptr_
154c4                 | LR__1830
154c4     53 97 02 F6 | 	mov	arg03, local01
154c8     04 96 66 F0 | 	shl	arg03, #4
154cc     32 97 02 F1 | 	add	arg03, objptr
154d0     98 01 00 FF 
154d4     F3 95 06 F6 | 	mov	arg02, ##@LR__6047
154d8     4B 95 62 FC | 	wrlong	arg02, arg03
154dc     53 A9 02 F6 | 	mov	local02, local01
154e0     04 A8 66 F0 | 	shl	local02, #4
154e4     32 A9 02 F1 | 	add	local02, objptr
154e8     0C A8 06 F1 | 	add	local02, #12
154ec     54 01 68 FC | 	wrlong	#0, local02
154f0     01 A6 06 F1 | 	add	local01, #1
154f4     02 00 00 FF 
154f8     01 A6 56 F2 | 	cmps	local01, ##1025 wc
154fc     C4 FF 9F CD |  if_b	jmp	#LR__1830
15500                 | LR__1831
15500     35 00 00 FF 
15504     90 64 06 F1 | 	add	objptr, ##27280
15508     00 04 80 FF 
1550c     32 01 68 FC | 	wrlong	##524288, objptr
15510     06 00 00 FF 
15514     30 64 06 F1 | 	add	objptr, ##3120
15518     00 04 80 FF 
1551c     32 01 68 FC | 	wrlong	##524288, objptr
15520     04 64 06 F1 | 	add	objptr, #4
15524     00 04 80 FF 
15528     32 01 68 FC | 	wrlong	##524288, objptr
1552c     0D 00 00 FF 
15530     64 64 86 F1 | 	sub	objptr, ##6756
15534     32 01 68 FC | 	wrlong	#0, objptr
15538     07 00 00 FF 
1553c     24 64 06 F1 | 	add	objptr, ##3620
15540     32 01 68 FC | 	wrlong	#0, objptr
15544     07 00 00 FF 
15548     20 64 86 F1 | 	sub	objptr, ##3616
1554c     00 04 80 FF 
15550     32 01 68 FC | 	wrlong	##524288, objptr
15554     0D 00 00 FF 
15558     D0 64 06 F1 | 	add	objptr, ##6864
1555c     32 01 68 FC | 	wrlong	#0, objptr
15560     98 01 00 FF 
15564     F4 AB 06 F6 | 	mov	local03, ##@LR__6048
15568     01 00 00 FF 
1556c     E8 65 06 F1 | 	add	objptr, ##1000
15570     32 AB 62 FC | 	wrlong	local03, objptr
15574     08 00 00 FF 
15578     88 64 86 F1 | 	sub	objptr, ##4232
1557c     32 01 68 FC | 	wrlong	#0, objptr
15580     04 64 06 F1 | 	add	objptr, #4
15584     FF FF FF FF 
15588     32 FF 6B FC | 	wrlong	##-1, objptr
1558c     06 00 00 FF 
15590     A0 64 06 F1 | 	add	objptr, ##3232
15594     32 01 68 FC | 	wrlong	#0, objptr
15598     04 64 06 F1 | 	add	objptr, #4
1559c     32 01 68 FC | 	wrlong	#0, objptr
155a0                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
155a0                 | ' stackpointer=0
155a0                 | ' lineptr=0 
155a0                 | ' programptr=memlo ': stringptr=0
155a0                 | ' dataptr=0 : readline=""
155a0                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
155a0                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
155a0     00 A6 06 F6 | 	mov	local01, #0
155a4     06 00 00 FF 
155a8     9C 64 86 F1 | 	sub	objptr, ##3228
155ac     D7 16 48 FB | 	callpa	#(@LR__1833-@LR__1832)>>2,fcache_load_ptr_
155b0                 | LR__1832
155b0     53 A9 02 F6 | 	mov	local02, local01
155b4     02 A8 66 F0 | 	shl	local02, #2
155b8     53 A9 02 F1 | 	add	local02, local01
155bc     02 A8 66 F0 | 	shl	local02, #2
155c0     32 A9 02 F1 | 	add	local02, objptr
155c4     08 A8 06 F1 | 	add	local02, #8
155c8     FF FF FF FF 
155cc     54 FF 6B FC | 	wrlong	##-1, local02
155d0     01 A6 06 F1 | 	add	local01, #1
155d4     41 A6 56 F2 | 	cmps	local01, #65 wc
155d8     D4 FF 9F CD |  if_b	jmp	#LR__1832
155dc                 | LR__1833
155dc     4C 00 00 FF 
155e0     3C 64 86 F1 | 	sub	objptr, ##38972
155e4                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
155e4     00 A6 06 F6 | 	mov	local01, #0
155e8                 | LR__1834
155e8     53 97 02 F6 | 	mov	arg03, local01
155ec     02 96 66 F0 | 	shl	arg03, #2
155f0     32 A9 02 F6 | 	mov	local02, objptr
155f4     54 00 00 FF 
155f8     30 A8 06 F1 | 	add	local02, ##43056
155fc     54 97 02 F1 | 	add	arg03, local02
15600     4B AB 0A FB | 	rdlong	local03, arg03 wz
15604     30 00 90 AD |  if_e	jmp	#LR__1835
15608     53 93 02 F6 | 	mov	arg01, local01
1560c     00 94 06 F6 | 	mov	arg02, #0
15610     00 96 06 F6 | 	mov	arg03, #0
15614     B0 C8 B0 FD | 	call	#_hg010b_spin2_setspritesize
15618     53 A9 02 F6 | 	mov	local02, local01
1561c     02 A8 66 F0 | 	shl	local02, #2
15620     32 AB 02 F6 | 	mov	local03, objptr
15624     54 00 00 FF 
15628     30 AA 06 F1 | 	add	local03, ##43056
1562c     55 A9 02 F1 | 	add	local02, local03
15630     54 93 02 FB | 	rdlong	arg01, local02
15634     A8 30 B1 FD | 	call	#__system___gc_free
15638                 | LR__1835
15638     01 A6 06 F1 | 	add	local01, #1
1563c     10 A6 56 F2 | 	cmps	local01, #16 wc
15640     A4 FF 9F CD |  if_b	jmp	#LR__1834
15644     54 00 00 FF 
15648     84 64 06 F1 | 	add	objptr, ##43140
1564c     00 C0 9F FF 
15650     32 01 68 FC | 	wrlong	##1065353216, objptr
15654     04 64 06 F1 | 	add	objptr, #4
15658     00 C0 9F FF 
1565c     32 01 68 FC | 	wrlong	##1065353216, objptr
15660     54 00 00 FF 
15664     84 64 86 F1 | 	sub	objptr, ##43140
15668     32 AB 02 FB | 	rdlong	local03, objptr
1566c     54 00 00 FF 
15670     70 64 06 F1 | 	add	objptr, ##43120
15674     32 AB 62 FC | 	wrlong	local03, objptr
15678     54 00 00 FF 
1567c     74 64 86 F1 | 	sub	objptr, ##43124
15680     11 92 06 F6 | 	mov	arg01, #17
15684     08 94 06 F6 | 	mov	arg02, #8
15688     10 96 06 F6 | 	mov	arg03, #16
1568c     38 C8 B0 FD | 	call	#_hg010b_spin2_setspritesize
15690     10 92 06 F6 | 	mov	arg01, #16
15694     20 94 06 F6 | 	mov	arg02, #32
15698     20 96 06 F6 | 	mov	arg03, #32
1569c     28 C8 B0 FD | 	call	#_hg010b_spin2_setspritesize
156a0     98 01 00 FF 
156a4     F5 AB 06 F6 | 	mov	local03, ##@LR__6049
156a8     54 00 00 FF 
156ac     A0 64 06 F1 | 	add	objptr, ##43168
156b0     32 AB 62 FC | 	wrlong	local03, objptr
156b4     54 00 00 FF 
156b8     A0 64 86 F1 | 	sub	objptr, ##43168
156bc     9C AB B0 FD | 	call	#_init_audio
156c0     E7 F0 03 F6 | 	mov	ptra, fp
156c4     F2 00 A0 FD | 	call	#popregs_
156c8                 | _do_new_ret
156c8     2D 00 64 FD | 	ret
156cc                 | 
156cc                 | ' 
156cc                 | ' '-------------------- next
156cc                 | ' 
156cc                 | ' sub do_next()
156cc                 | _do_next
156cc     04 CA 05 F6 | 	mov	COUNT_, #4
156d0     E8 00 A0 FD | 	call	#pushregs_
156d4     98 7F BF FD | 	call	#_pop
156d8     3D A7 02 F6 | 	mov	local01, result1
156dc     3E A9 02 F6 | 	mov	local02, result2
156e0     3F AB 02 F6 | 	mov	local03, result3
156e4                 | ' t1=pop() :varnum=t1.result.uresult
156e4                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
156e4     52 00 00 FF 
156e8     D4 64 06 F1 | 	add	objptr, ##42196
156ec     32 95 02 FB | 	rdlong	arg02, objptr
156f0     4A 93 02 F6 | 	mov	arg01, arg02
156f4     02 92 66 F0 | 	shl	arg01, #2
156f8     4A 93 02 F1 | 	add	arg01, arg02
156fc     02 92 66 F0 | 	shl	arg01, #2
15700     06 00 00 FF 
15704     98 64 86 F1 | 	sub	objptr, ##3224
15708     32 93 02 F1 | 	add	arg01, objptr
1570c     08 92 06 F1 | 	add	arg01, #8
15710     49 95 02 FB | 	rdlong	arg02, arg01
15714     53 95 0A F2 | 	cmp	arg02, local01 wz
15718     4C 00 00 FF 
1571c     3C 64 86 F1 | 	sub	objptr, ##38972
15720     10 00 90 AD |  if_e	jmp	#LR__1840
15724     25 92 06 F6 | 	mov	arg01, #37
15728     00 94 06 F6 | 	mov	arg02, #0
1572c     50 B7 B0 FD | 	call	#_printerror
15730     50 03 90 FD | 	jmp	#LR__1847
15734                 | LR__1840
15734                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
15734     53 95 02 F6 | 	mov	arg02, local01
15738     04 94 66 F0 | 	shl	arg02, #4
1573c     32 93 02 F6 | 	mov	arg01, objptr
15740     16 00 00 FF 
15744     9C 93 06 F1 | 	add	arg01, ##11676
15748     49 95 02 F1 | 	add	arg02, arg01
1574c     0C 94 06 F1 | 	add	arg02, #12
15750     4A 95 02 FB | 	rdlong	arg02, arg02
15754     1E 94 0E F2 | 	cmp	arg02, #30 wz
15758     54 00 90 5D |  if_ne	jmp	#LR__1841
1575c     53 95 02 F6 | 	mov	arg02, local01
15760     04 94 66 F0 | 	shl	arg02, #4
15764     16 00 00 FF 
15768     9C 65 06 F1 | 	add	objptr, ##11676
1576c     32 95 02 F1 | 	add	arg02, objptr
15770     0C 94 06 F1 | 	add	arg02, #12
15774     4A 39 68 FC | 	wrlong	#28, arg02
15778     53 AD 02 F6 | 	mov	local04, local01
1577c     04 AC 66 F0 | 	shl	local04, #4
15780     32 AD 02 F1 | 	add	local04, objptr
15784     53 95 02 F6 | 	mov	arg02, local01
15788     04 94 66 F0 | 	shl	arg02, #4
1578c     32 95 02 F1 | 	add	arg02, objptr
15790     04 94 06 F1 | 	add	arg02, #4
15794     4A 93 02 FB | 	rdlong	arg01, arg02
15798     16 00 00 FF 
1579c     9C 65 86 F1 | 	sub	objptr, ##11676
157a0     01 94 06 F6 | 	mov	arg02, #1
157a4     94 1F B1 FD | 	call	#__system___float_tointeger
157a8     04 AC 06 F1 | 	add	local04, #4
157ac     56 7B 62 FC | 	wrlong	result1, local04
157b0                 | LR__1841
157b0     53 AD 02 F6 | 	mov	local04, local01
157b4     04 AC 66 F0 | 	shl	local04, #4
157b8     16 00 00 FF 
157bc     9C 65 06 F1 | 	add	objptr, ##11676
157c0     32 AD 02 F1 | 	add	local04, objptr
157c4     53 95 02 F6 | 	mov	arg02, local01
157c8     04 94 66 F0 | 	shl	arg02, #4
157cc     32 95 02 F1 | 	add	arg02, objptr
157d0     3B 00 00 FF 
157d4     38 65 06 F1 | 	add	objptr, ##30520
157d8     32 93 02 FB | 	rdlong	arg01, objptr
157dc     49 7F 02 F6 | 	mov	result3, arg01
157e0     02 7E 66 F0 | 	shl	result3, #2
157e4     49 7F 02 F1 | 	add	result3, arg01
157e8     02 7E 66 F0 | 	shl	result3, #2
157ec     06 00 00 FF 
157f0     98 64 86 F1 | 	sub	objptr, ##3224
157f4     32 7F 02 F1 | 	add	result3, objptr
157f8     04 94 06 F1 | 	add	arg02, #4
157fc     4A 93 02 FB | 	rdlong	arg01, arg02
15800     0C 7E 06 F1 | 	add	result3, #12
15804     3F 7F 02 FB | 	rdlong	result3, result3
15808     3F 93 02 F1 | 	add	arg01, result3
1580c     04 AC 06 F1 | 	add	local04, #4
15810     56 93 62 FC | 	wrlong	arg01, local04
15814                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
15814                 | ' if fortable(fortop).stepval>=0 then
15814     06 00 00 FF 
15818     98 64 06 F1 | 	add	objptr, ##3224
1581c     32 AD 02 FB | 	rdlong	local04, objptr
15820     56 93 02 F6 | 	mov	arg01, local04
15824     02 92 66 F0 | 	shl	arg01, #2
15828     56 93 02 F1 | 	add	arg01, local04
1582c     02 92 66 F0 | 	shl	arg01, #2
15830     06 00 00 FF 
15834     98 64 86 F1 | 	sub	objptr, ##3224
15838     32 93 02 F1 | 	add	arg01, objptr
1583c     0C 92 06 F1 | 	add	arg01, #12
15840     49 93 02 FB | 	rdlong	arg01, arg01
15844     00 92 56 F2 | 	cmps	arg01, #0 wc
15848     4C 00 00 FF 
1584c     3C 64 86 F1 | 	sub	objptr, ##38972
15850     78 00 90 CD |  if_b	jmp	#LR__1842
15854                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
15854     04 A6 66 F0 | 	shl	local01, #4
15858     16 00 00 FF 
1585c     9C 65 06 F1 | 	add	objptr, ##11676
15860     32 A7 02 F1 | 	add	local01, objptr
15864     3B 00 00 FF 
15868     38 65 06 F1 | 	add	objptr, ##30520
1586c     32 93 02 FB | 	rdlong	arg01, objptr
15870     49 AD 02 F6 | 	mov	local04, arg01
15874     02 AC 66 F0 | 	shl	local04, #2
15878     49 AD 02 F1 | 	add	local04, arg01
1587c     02 AC 66 F0 | 	shl	local04, #2
15880     06 00 00 FF 
15884     98 64 86 F1 | 	sub	objptr, ##3224
15888     32 AD 02 F1 | 	add	local04, objptr
1588c     04 A6 06 F1 | 	add	local01, #4
15890     53 A7 02 FB | 	rdlong	local01, local01
15894     10 AC 06 F1 | 	add	local04, #16
15898     56 AD 02 FB | 	rdlong	local04, local04
1589c     56 A7 5A F2 | 	cmps	local01, local04 wcz
158a0     4C 00 00 FF 
158a4     3C 64 86 F1 | 	sub	objptr, ##38972
158a8     9C 00 90 ED |  if_be	jmp	#LR__1844
158ac     52 00 00 FF 
158b0     D4 64 06 F1 | 	add	objptr, ##42196
158b4     32 AD 02 FB | 	rdlong	local04, objptr
158b8     01 AC 86 F1 | 	sub	local04, #1
158bc     32 AD 62 FC | 	wrlong	local04, objptr
158c0     52 00 00 FF 
158c4     D4 64 86 F1 | 	sub	objptr, ##42196
158c8     B8 01 90 FD | 	jmp	#LR__1847
158cc                 | LR__1842
158cc                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
158cc     53 AD 02 F6 | 	mov	local04, local01
158d0     04 AC 66 F0 | 	shl	local04, #4
158d4     16 00 00 FF 
158d8     9C 65 06 F1 | 	add	objptr, ##11676
158dc     32 AD 02 F1 | 	add	local04, objptr
158e0     3B 00 00 FF 
158e4     38 65 06 F1 | 	add	objptr, ##30520
158e8     32 A7 02 FB | 	rdlong	local01, objptr
158ec     53 93 02 F6 | 	mov	arg01, local01
158f0     02 92 66 F0 | 	shl	arg01, #2
158f4     53 93 02 F1 | 	add	arg01, local01
158f8     02 92 66 F0 | 	shl	arg01, #2
158fc     06 00 00 FF 
15900     98 64 86 F1 | 	sub	objptr, ##3224
15904     32 93 02 F1 | 	add	arg01, objptr
15908     04 AC 06 F1 | 	add	local04, #4
1590c     56 AD 02 FB | 	rdlong	local04, local04
15910     10 92 06 F1 | 	add	arg01, #16
15914     49 93 02 FB | 	rdlong	arg01, arg01
15918     49 AD 52 F2 | 	cmps	local04, arg01 wc
1591c     4C 00 00 FF 
15920     3C 64 86 F1 | 	sub	objptr, ##38972
15924     20 00 90 3D |  if_ae	jmp	#LR__1843
15928     52 00 00 FF 
1592c     D4 64 06 F1 | 	add	objptr, ##42196
15930     32 AD 02 FB | 	rdlong	local04, objptr
15934     01 AC 86 F1 | 	sub	local04, #1
15938     32 AD 62 FC | 	wrlong	local04, objptr
1593c     52 00 00 FF 
15940     D4 64 86 F1 | 	sub	objptr, ##42196
15944     3C 01 90 FD | 	jmp	#LR__1847
15948                 | LR__1843
15948                 | LR__1844
15948                 | ' ' if not returned, goto pointer 
15948                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
15948     52 00 00 FF 
1594c     90 64 06 F1 | 	add	objptr, ##42128
15950     32 AD 02 FB | 	rdlong	local04, objptr
15954     52 00 00 FF 
15958     90 64 86 F1 | 	sub	objptr, ##42128
1595c     01 AC 16 F2 | 	cmp	local04, #1 wc
15960     DC 00 90 CD |  if_b	jmp	#LR__1845
15964     52 00 00 FF 
15968     D4 64 06 F1 | 	add	objptr, ##42196
1596c     32 AD 02 FB | 	rdlong	local04, objptr
15970     56 A7 02 F6 | 	mov	local01, local04
15974     02 A6 66 F0 | 	shl	local01, #2
15978     56 A7 02 F1 | 	add	local01, local04
1597c     02 A6 66 F0 | 	shl	local01, #2
15980     06 00 00 FF 
15984     98 64 86 F1 | 	sub	objptr, ##3224
15988     32 A7 02 F1 | 	add	local01, objptr
1598c     06 00 00 FF 
15990     20 64 06 F1 | 	add	objptr, ##3104
15994     32 AD 02 FB | 	rdlong	local04, objptr
15998     52 00 00 FF 
1599c     5C 64 86 F1 | 	sub	objptr, ##42076
159a0     53 A7 02 FB | 	rdlong	local01, local01
159a4     53 AD 0A F2 | 	cmp	local04, local01 wz
159a8     94 00 90 AD |  if_e	jmp	#LR__1845
159ac     52 00 00 FF 
159b0     D4 64 06 F1 | 	add	objptr, ##42196
159b4     32 AD 02 FB | 	rdlong	local04, objptr
159b8     56 A7 02 F6 | 	mov	local01, local04
159bc     02 A6 66 F0 | 	shl	local01, #2
159c0     56 A7 02 F1 | 	add	local01, local04
159c4     02 A6 66 F0 | 	shl	local01, #2
159c8     06 00 00 FF 
159cc     98 64 86 F1 | 	sub	objptr, ##3224
159d0     32 A7 02 F1 | 	add	local01, objptr
159d4     53 A7 02 FB | 	rdlong	local01, local01
159d8     06 00 00 FF 
159dc     20 64 06 F1 | 	add	objptr, ##3104
159e0     32 A7 62 FC | 	wrlong	local01, objptr
159e4     78 64 06 F1 | 	add	objptr, #120
159e8     32 AD 02 FB | 	rdlong	local04, objptr
159ec     56 A7 02 F6 | 	mov	local01, local04
159f0     02 A6 66 F0 | 	shl	local01, #2
159f4     56 A7 02 F1 | 	add	local01, local04
159f8     02 A6 66 F0 | 	shl	local01, #2
159fc     06 00 00 FF 
15a00     98 64 86 F1 | 	sub	objptr, ##3224
15a04     32 A7 02 F1 | 	add	local01, objptr
15a08     04 A6 06 F1 | 	add	local01, #4
15a0c     53 A7 02 FB | 	rdlong	local01, local01
15a10     06 00 00 FF 
15a14     24 64 06 F1 | 	add	objptr, ##3108
15a18     32 A7 62 FC | 	wrlong	local01, objptr
15a1c     06 00 00 FF 
15a20     40 64 86 F1 | 	sub	objptr, ##3136
15a24     32 AD 02 FB | 	rdlong	local04, objptr
15a28     01 AC 86 F1 | 	sub	local04, #1
15a2c     04 64 06 F1 | 	add	objptr, #4
15a30     32 AD 62 FC | 	wrlong	local04, objptr
15a34     4C 00 00 FF 
15a38     24 64 86 F1 | 	sub	objptr, ##38948
15a3c     44 00 90 FD | 	jmp	#LR__1846
15a40                 | LR__1845
15a40     52 00 00 FF 
15a44     D4 64 06 F1 | 	add	objptr, ##42196
15a48     32 AD 02 FB | 	rdlong	local04, objptr
15a4c     56 A7 02 F6 | 	mov	local01, local04
15a50     02 A6 66 F0 | 	shl	local01, #2
15a54     56 A7 02 F1 | 	add	local01, local04
15a58     02 A6 66 F0 | 	shl	local01, #2
15a5c     06 00 00 FF 
15a60     98 64 86 F1 | 	sub	objptr, ##3224
15a64     32 A7 02 F1 | 	add	local01, objptr
15a68     04 A6 06 F1 | 	add	local01, #4
15a6c     53 A7 02 FB | 	rdlong	local01, local01
15a70     01 A6 86 F1 | 	sub	local01, #1
15a74     18 64 86 F1 | 	sub	objptr, #24
15a78     32 A7 62 FC | 	wrlong	local01, objptr
15a7c     4C 00 00 FF 
15a80     24 64 86 F1 | 	sub	objptr, ##38948
15a84                 | LR__1846
15a84                 | LR__1847
15a84     E7 F0 03 F6 | 	mov	ptra, fp
15a88     F2 00 A0 FD | 	call	#popregs_
15a8c                 | _do_next_ret
15a8c     2D 00 64 FD | 	ret
15a90                 | 
15a90                 | ' 
15a90                 | ' '-------------------- no command (print "Unknown command")
15a90                 | ' 
15a90                 | ' sub do_no_command
15a90                 | _do_no_command
15a90     52 00 00 FF 
15a94     94 64 06 F1 | 	add	objptr, ##42132
15a98     32 95 02 FB | 	rdlong	arg02, objptr
15a9c     52 00 00 FF 
15aa0     94 64 86 F1 | 	sub	objptr, ##42132
15aa4     17 92 06 F6 | 	mov	arg01, #23
15aa8     D4 B3 B0 FD | 	call	#_printerror
15aac                 | _do_no_command_ret
15aac     2D 00 64 FD | 	ret
15ab0                 | 
15ab0                 | ' 
15ab0                 | ' '-------------------- nothing
15ab0                 | ' 
15ab0                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
15ab0                 | _do_nothing
15ab0                 | _do_nothing_ret
15ab0     2D 00 64 FD | 	ret
15ab4                 | 
15ab4                 | ' 
15ab4                 | ' '-------------------- on
15ab4                 | ' 
15ab4                 | ' sub do_on
15ab4                 | _do_on
15ab4     02 CA 05 F6 | 	mov	COUNT_, #2
15ab8     E8 00 A0 FD | 	call	#pushregs_
15abc     18 F0 07 F1 | 	add	ptra, #24
15ac0     4C 00 00 FF 
15ac4     24 64 06 F1 | 	add	objptr, ##38948
15ac8     32 93 02 FB | 	rdlong	arg01, objptr
15acc     49 7D 02 F6 | 	mov	result2, arg01
15ad0     01 7C 66 F0 | 	shl	result2, #1
15ad4     49 7D 02 F1 | 	add	result2, arg01
15ad8     02 7C 66 F0 | 	shl	result2, #2
15adc     03 00 00 FF 
15ae0     04 64 86 F1 | 	sub	objptr, ##1540
15ae4     32 7D 02 F1 | 	add	result2, objptr
15ae8     3E A7 02 FB | 	rdlong	local01, result2
15aec     49 A9 02 F6 | 	mov	local02, arg01
15af0     01 A8 66 F0 | 	shl	local02, #1
15af4     49 A9 02 F1 | 	add	local02, arg01
15af8     02 A8 66 F0 | 	shl	local02, #2
15afc     32 A9 02 F1 | 	add	local02, objptr
15b00     04 A8 06 F1 | 	add	local02, #4
15b04     54 A9 02 FB | 	rdlong	local02, local02
15b08     49 00 00 FF 
15b0c     20 64 86 F1 | 	sub	objptr, ##37408
15b10     5C 7B BF FD | 	call	#_pop
15b14     E7 7A 62 FC | 	wrlong	result1, fp
15b18     04 CE 05 F1 | 	add	fp, #4
15b1c     E7 7C 62 FC | 	wrlong	result2, fp
15b20     04 CE 05 F1 | 	add	fp, #4
15b24     E7 7E 62 FC | 	wrlong	result3, fp
15b28     08 CE 85 F1 | 	sub	fp, #8
15b2c     E7 92 02 F6 | 	mov	arg01, fp
15b30     18 7D BF FD | 	call	#_converttoint
15b34                 | ' 
15b34                 | ' numpar=compiledline(lineptr_e).result.uresult
15b34                 | ' skip=compiledline(lineptr_e).result.twowords(1)
15b34                 | ' t1=pop()
15b34                 | ' t=converttoint(t1)
15b34                 | ' if t<1 orelse t>numpar then return
15b34     01 7A 56 F2 | 	cmps	result1, #1 wc
15b38     30 00 90 CD |  if_b	jmp	#LR__1850
15b3c     53 7B 5A F2 | 	cmps	result1, local01 wcz
15b40     28 00 90 1D |  if_a	jmp	#LR__1850
15b44     01 7A 86 F1 | 	sub	result1, #1
15b48     3D A9 02 FD | 	qmul	local02, result1
15b4c     4C 00 00 FF 
15b50     24 64 06 F1 | 	add	objptr, ##38948
15b54     32 A7 02 FB | 	rdlong	local01, objptr
15b58     18 A8 62 FD | 	getqx	local02
15b5c     54 A7 02 F1 | 	add	local01, local02
15b60     32 A7 62 FC | 	wrlong	local01, objptr
15b64     4C 00 00 FF 
15b68     24 64 86 F1 | 	sub	objptr, ##38948
15b6c                 | LR__1850
15b6c     E7 F0 03 F6 | 	mov	ptra, fp
15b70     F2 00 A0 FD | 	call	#popregs_
15b74                 | _do_on_ret
15b74     2D 00 64 FD | 	ret
15b78                 | 
15b78                 | ' 
15b78                 | ' '-------------------- open
15b78                 | ' 
15b78                 | ' sub do_open
15b78                 | _do_open
15b78     04 CA 05 F6 | 	mov	COUNT_, #4
15b7c     E8 00 A0 FD | 	call	#pushregs_
15b80     20 F0 07 F1 | 	add	ptra, #32
15b84     E8 7A BF FD | 	call	#_pop
15b88     3F 97 02 F6 | 	mov	arg03, result3
15b8c     E7 7A 62 FC | 	wrlong	result1, fp
15b90     04 CE 05 F1 | 	add	fp, #4
15b94     E7 7C 62 FC | 	wrlong	result2, fp
15b98     04 CE 05 F1 | 	add	fp, #4
15b9c     E7 96 62 FC | 	wrlong	arg03, fp
15ba0                 | ' 
15ba0                 | ' numpar=compiledline(lineptr_e).result.uresult
15ba0                 | ' 
15ba0                 | ' t1=pop()
15ba0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15ba0     08 CE 85 F1 | 	sub	fp, #8
15ba4     2B 96 0E F2 | 	cmp	arg03, #43 wz
15ba8     18 00 90 5D |  if_ne	jmp	#LR__1860
15bac     E7 92 02 FB | 	rdlong	arg01, fp
15bb0     2C 7C BF FD | 	call	#_convertstring
15bb4     E7 7A 62 FC | 	wrlong	result1, fp
15bb8     08 CE 05 F1 | 	add	fp, #8
15bbc     E7 3E 68 FC | 	wrlong	#31, fp
15bc0     08 CE 85 F1 | 	sub	fp, #8
15bc4                 | LR__1860
15bc4                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
15bc4     08 CE 05 F1 | 	add	fp, #8
15bc8     E7 96 02 FB | 	rdlong	arg03, fp
15bcc     08 CE 85 F1 | 	sub	fp, #8
15bd0     1F 96 0E F2 | 	cmp	arg03, #31 wz
15bd4     44 00 90 AD |  if_e	jmp	#LR__1861
15bd8     00 92 06 F6 | 	mov	arg01, #0
15bdc     48 45 B1 FD | 	call	#__system___getiolock_0622
15be0     3D 93 02 F6 | 	mov	arg01, result1
15be4     BC EF B0 FD | 	call	#__system___lockmem
15be8     99 01 00 FF 
15bec     00 94 06 F6 | 	mov	arg02, ##@LR__6050
15bf0     00 92 06 F6 | 	mov	arg01, #0
15bf4     00 96 06 F6 | 	mov	arg03, #0
15bf8     9C FC B0 FD | 	call	#__system___basic_print_string
15bfc     00 92 06 F6 | 	mov	arg01, #0
15c00     0A 94 06 F6 | 	mov	arg02, #10
15c04     00 96 06 F6 | 	mov	arg03, #0
15c08     34 FC B0 FD | 	call	#__system___basic_print_char
15c0c     00 92 06 F6 | 	mov	arg01, #0
15c10     14 45 B1 FD | 	call	#__system___getiolock_0622
15c14     3D 01 68 FC | 	wrlong	#0, result1
15c18     C4 01 90 FD | 	jmp	#LR__1872
15c1c                 | LR__1861
15c1c     E7 A6 02 FB | 	rdlong	local01, fp
15c20     4C 7A BF FD | 	call	#_pop
15c24     3F 97 02 F6 | 	mov	arg03, result3
15c28     E7 7A 62 FC | 	wrlong	result1, fp
15c2c     04 CE 05 F1 | 	add	fp, #4
15c30     E7 7C 62 FC | 	wrlong	result2, fp
15c34     04 CE 05 F1 | 	add	fp, #4
15c38     E7 96 62 FC | 	wrlong	arg03, fp
15c3c                 | ' filename=t1.result.sresult
15c3c                 | ' t1=pop()
15c3c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15c3c     08 CE 85 F1 | 	sub	fp, #8
15c40     2B 96 0E F2 | 	cmp	arg03, #43 wz
15c44     18 00 90 5D |  if_ne	jmp	#LR__1862
15c48     E7 92 02 FB | 	rdlong	arg01, fp
15c4c     90 7B BF FD | 	call	#_convertstring
15c50     E7 7A 62 FC | 	wrlong	result1, fp
15c54     08 CE 05 F1 | 	add	fp, #8
15c58     E7 3E 68 FC | 	wrlong	#31, fp
15c5c     08 CE 85 F1 | 	sub	fp, #8
15c60                 | LR__1862
15c60     00 A8 06 F6 | 	mov	local02, #0
15c64                 | ' mode=0
15c64                 | ' if t1.result_type=result_string then
15c64     08 CE 05 F1 | 	add	fp, #8
15c68     E7 94 02 FB | 	rdlong	arg02, fp
15c6c     08 CE 85 F1 | 	sub	fp, #8
15c70     1F 94 0E F2 | 	cmp	arg02, #31 wz
15c74     4C 00 90 5D |  if_ne	jmp	#LR__1863
15c78                 | '   if t1.result.sresult="read" then mode=1
15c78     E7 92 02 FB | 	rdlong	arg01, fp
15c7c     99 01 00 FF 
15c80     12 94 06 F6 | 	mov	arg02, ##@LR__6051
15c84     44 EF B0 FD | 	call	#__system___string_cmp
15c88     00 7A 0E F2 | 	cmp	result1, #0 wz
15c8c     01 A8 06 A6 |  if_e	mov	local02, #1
15c90                 | '   if t1.result.sresult="write" then mode=2
15c90     E7 92 02 FB | 	rdlong	arg01, fp
15c94     99 01 00 FF 
15c98     17 94 06 F6 | 	mov	arg02, ##@LR__6052
15c9c     2C EF B0 FD | 	call	#__system___string_cmp
15ca0     00 7A 0E F2 | 	cmp	result1, #0 wz
15ca4     02 A8 06 A6 |  if_e	mov	local02, #2
15ca8                 | '   if t1.result.sresult="append" then mode=4
15ca8     E7 92 02 FB | 	rdlong	arg01, fp
15cac     99 01 00 FF 
15cb0     1D 94 06 F6 | 	mov	arg02, ##@LR__6053
15cb4     14 EF B0 FD | 	call	#__system___string_cmp
15cb8     00 7A 0E F2 | 	cmp	result1, #0 wz
15cbc     04 A8 06 A6 |  if_e	mov	local02, #4
15cc0     0C 00 90 FD | 	jmp	#LR__1864
15cc4                 | LR__1863
15cc4     E7 92 02 F6 | 	mov	arg01, fp
15cc8     80 7B BF FD | 	call	#_converttoint
15ccc     3D A9 02 F6 | 	mov	local02, result1
15cd0                 | LR__1864
15cd0     9C 79 BF FD | 	call	#_pop
15cd4     3F 97 02 F6 | 	mov	arg03, result3
15cd8     E7 7A 62 FC | 	wrlong	result1, fp
15cdc     04 CE 05 F1 | 	add	fp, #4
15ce0     E7 7C 62 FC | 	wrlong	result2, fp
15ce4     04 CE 05 F1 | 	add	fp, #4
15ce8     E7 96 62 FC | 	wrlong	arg03, fp
15cec                 | ' t1=pop()
15cec                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
15cec     08 CE 85 F1 | 	sub	fp, #8
15cf0     2C 96 0E F2 | 	cmp	arg03, #44 wz
15cf4     44 00 90 AD |  if_e	jmp	#LR__1865
15cf8     00 92 06 F6 | 	mov	arg01, #0
15cfc     28 44 B1 FD | 	call	#__system___getiolock_0622
15d00     3D 93 02 F6 | 	mov	arg01, result1
15d04     9C EE B0 FD | 	call	#__system___lockmem
15d08     99 01 00 FF 
15d0c     24 94 06 F6 | 	mov	arg02, ##@LR__6054
15d10     00 92 06 F6 | 	mov	arg01, #0
15d14     00 96 06 F6 | 	mov	arg03, #0
15d18     7C FB B0 FD | 	call	#__system___basic_print_string
15d1c     00 92 06 F6 | 	mov	arg01, #0
15d20     0A 94 06 F6 | 	mov	arg02, #10
15d24     00 96 06 F6 | 	mov	arg03, #0
15d28     14 FB B0 FD | 	call	#__system___basic_print_char
15d2c     00 92 06 F6 | 	mov	arg01, #0
15d30     F4 43 B1 FD | 	call	#__system___getiolock_0622
15d34     3D 01 68 FC | 	wrlong	#0, result1
15d38     A4 00 90 FD | 	jmp	#LR__1872
15d3c                 | LR__1865
15d3c     E7 AA 02 FB | 	rdlong	local03, fp
15d40                 | ' channel  = t1.result.iresult
15d40                 | ' select case  mode
15d40     54 AD 02 F6 | 	mov	local04, local02
15d44     01 AC 86 F1 | 	sub	local04, #1
15d48     04 AC 26 F3 | 	fle	local04, #4
15d4c     30 AC 62 FD | 	jmprel	local04
15d50                 | LR__1866
15d50     10 00 90 FD | 	jmp	#LR__1867
15d54     20 00 90 FD | 	jmp	#LR__1868
15d58     44 00 90 FD | 	jmp	#LR__1870
15d5c     2C 00 90 FD | 	jmp	#LR__1869
15d60     3C 00 90 FD | 	jmp	#LR__1870
15d64                 | LR__1867
15d64     55 93 02 F6 | 	mov	arg01, local03
15d68     53 95 02 F6 | 	mov	arg02, local01
15d6c     00 96 06 F6 | 	mov	arg03, #0
15d70     E0 F9 B0 FD | 	call	#__system___basic_open_string
15d74     68 00 90 FD | 	jmp	#LR__1871
15d78                 | LR__1868
15d78     55 93 02 F6 | 	mov	arg01, local03
15d7c     53 95 02 F6 | 	mov	arg02, local01
15d80     0D 96 06 F6 | 	mov	arg03, #13
15d84     CC F9 B0 FD | 	call	#__system___basic_open_string
15d88     54 00 90 FD | 	jmp	#LR__1871
15d8c                 | LR__1869
15d8c     55 93 02 F6 | 	mov	arg01, local03
15d90     53 95 02 F6 | 	mov	arg02, local01
15d94     25 96 06 F6 | 	mov	arg03, #37
15d98     B8 F9 B0 FD | 	call	#__system___basic_open_string
15d9c     40 00 90 FD | 	jmp	#LR__1871
15da0                 | LR__1870
15da0     00 92 06 F6 | 	mov	arg01, #0
15da4     80 43 B1 FD | 	call	#__system___getiolock_0622
15da8     3D 93 02 F6 | 	mov	arg01, result1
15dac     F4 ED B0 FD | 	call	#__system___lockmem
15db0     99 01 00 FF 
15db4     36 94 06 F6 | 	mov	arg02, ##@LR__6055
15db8     00 92 06 F6 | 	mov	arg01, #0
15dbc     00 96 06 F6 | 	mov	arg03, #0
15dc0     D4 FA B0 FD | 	call	#__system___basic_print_string
15dc4     00 92 06 F6 | 	mov	arg01, #0
15dc8     0A 94 06 F6 | 	mov	arg02, #10
15dcc     00 96 06 F6 | 	mov	arg03, #0
15dd0     6C FA B0 FD | 	call	#__system___basic_print_char
15dd4     00 92 06 F6 | 	mov	arg01, #0
15dd8     4C 43 B1 FD | 	call	#__system___getiolock_0622
15ddc     3D 01 68 FC | 	wrlong	#0, result1
15de0                 | LR__1871
15de0                 | LR__1872
15de0     E7 F0 03 F6 | 	mov	ptra, fp
15de4     F2 00 A0 FD | 	call	#popregs_
15de8                 | _do_open_ret
15de8     2D 00 64 FD | 	ret
15dec                 | 
15dec                 | ' 
15dec                 | ' ' ------------------ padrx
15dec                 | ' 
15dec                 | ' sub do_padrx
15dec                 | _do_padrx
15dec     04 CA 05 F6 | 	mov	COUNT_, #4
15df0     E8 00 A0 FD | 	call	#pushregs_
15df4     14 F0 07 F1 | 	add	ptra, #20
15df8     4C 00 00 FF 
15dfc     24 64 06 F1 | 	add	objptr, ##38948
15e00     32 A7 02 FB | 	rdlong	local01, objptr
15e04     53 97 02 F6 | 	mov	arg03, local01
15e08     01 96 66 F0 | 	shl	arg03, #1
15e0c     53 97 02 F1 | 	add	arg03, local01
15e10     02 96 66 F0 | 	shl	arg03, #2
15e14     03 00 00 FF 
15e18     04 64 86 F1 | 	sub	objptr, ##1540
15e1c     32 97 02 F1 | 	add	arg03, objptr
15e20     4B A9 02 FB | 	rdlong	local02, arg03
15e24                 | ' 
15e24                 | ' numpar=compiledline(lineptr_e).result.uresult
15e24                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
15e24     02 A8 16 F2 | 	cmp	local02, #2 wc
15e28     49 00 00 FF 
15e2c     20 64 86 F1 | 	sub	objptr, ##37408
15e30     40 00 90 CD |  if_b	jmp	#LR__1880
15e34     00 92 06 F6 | 	mov	arg01, #0
15e38     EC 42 B1 FD | 	call	#__system___getiolock_0622
15e3c     3D 93 02 F6 | 	mov	arg01, result1
15e40     60 ED B0 FD | 	call	#__system___lockmem
15e44     99 01 00 FF 
15e48     49 94 06 F6 | 	mov	arg02, ##@LR__6056
15e4c     00 92 06 F6 | 	mov	arg01, #0
15e50     00 96 06 F6 | 	mov	arg03, #0
15e54     40 FA B0 FD | 	call	#__system___basic_print_string
15e58     00 92 06 F6 | 	mov	arg01, #0
15e5c     C8 42 B1 FD | 	call	#__system___getiolock_0622
15e60     3D 01 68 FC | 	wrlong	#0, result1
15e64     27 92 06 F6 | 	mov	arg01, #39
15e68     00 94 06 F6 | 	mov	arg02, #0
15e6c     10 B0 B0 FD | 	call	#_printerror
15e70     A0 01 90 FD | 	jmp	#LR__1884
15e74                 | LR__1880
15e74                 | ' if numpar=0 then 
15e74     00 A8 0E F2 | 	cmp	local02, #0 wz
15e78     8C 00 90 5D |  if_ne	jmp	#LR__1881
15e7c     00 C0 1B FF 
15e80     00 A8 06 F6 | 	mov	local02, ##931135488
15e84     53 00 00 FF 
15e88     6C 65 06 F1 | 	add	objptr, ##42860
15e8c     32 93 02 FB | 	rdlong	arg01, objptr
15e90     53 00 00 FF 
15e94     6C 65 86 F1 | 	sub	objptr, ##42860
15e98     49 93 52 F6 | 	abs	arg01, arg01 wc
15e9c     1F AA C6 C9 |  if_b	decod	local03, #31
15ea0     00 AA 06 36 |  if_ae	mov	local03, #0
15ea4     C8 0F B1 FD | 	call	#__system___float_fromuns
15ea8     55 7B 62 F5 | 	xor	result1, local03
15eac     3D 93 02 F6 | 	mov	arg01, result1
15eb0     FF 7F 23 FF 
15eb4     00 94 06 F6 | 	mov	arg02, ##1191181824
15eb8     BC 15 B1 FD | 	call	#__system___float_div
15ebc     3D 95 02 F6 | 	mov	arg02, result1
15ec0     54 93 02 F6 | 	mov	arg01, local02
15ec4     DC 0F B1 FD | 	call	#__system___float_add
15ec8     3D AD 02 F6 | 	mov	local04, result1
15ecc                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
15ecc     56 93 02 F6 | 	mov	arg01, local04
15ed0     1F 92 06 F4 | 	bitl	arg01, #31
15ed4     89 41 1D FF 
15ed8     6F 94 06 F6 | 	mov	arg02, ##981668463
15edc     01 96 06 F6 | 	mov	arg03, #1
15ee0     C4 17 B1 FD | 	call	#__system___float_cmp
15ee4     00 7A 56 F2 | 	cmps	result1, #0 wc
15ee8     00 AC 06 C6 |  if_b	mov	local04, #0
15eec     E7 AC 62 FC | 	wrlong	local04, fp
15ef0     08 CE 05 F1 | 	add	fp, #8
15ef4     E7 3C 68 FC | 	wrlong	#30, fp
15ef8     08 CE 85 F1 | 	sub	fp, #8
15efc     E7 92 02 F6 | 	mov	arg01, fp
15f00     FC 77 BF FD | 	call	#_push
15f04                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
15f04     0C 01 90 FD | 	jmp	#LR__1884
15f08                 | LR__1881
15f08     64 77 BF FD | 	call	#_pop
15f0c     E7 7A 62 FC | 	wrlong	result1, fp
15f10     04 CE 05 F1 | 	add	fp, #4
15f14     E7 7C 62 FC | 	wrlong	result2, fp
15f18     04 CE 05 F1 | 	add	fp, #4
15f1c     E7 7E 62 FC | 	wrlong	result3, fp
15f20                 | ' t1=pop()
15f20                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
15f20     08 CE 85 F1 | 	sub	fp, #8
15f24     1C 7E 0E F2 | 	cmp	result3, #28 wz
15f28     08 CE 05 51 |  if_ne	add	fp, #8
15f2c     E7 A6 02 5B |  if_ne	rdlong	local01, fp
15f30     08 CE 85 51 |  if_ne	sub	fp, #8
15f34     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
15f38     CC 00 90 5D |  if_ne	jmp	#LR__1883
15f3c     E7 AC 02 FB | 	rdlong	local04, fp
15f40     54 00 00 FF 
15f44     E4 64 06 F1 | 	add	objptr, ##43236
15f48     32 AD 62 FC | 	wrlong	local04, objptr
15f4c                 | '   q=t1.result.uresult
15f4c                 | '   if q<7 then 
15f4c     54 00 00 FF 
15f50     E4 64 86 F1 | 	sub	objptr, ##43236
15f54     07 AC 56 F2 | 	cmps	local04, #7 wc
15f58     9C 00 90 3D |  if_ae	jmp	#LR__1882
15f5c     00 C0 1B FF 
15f60     00 AC 06 F6 | 	mov	local04, ##931135488
15f64     54 00 00 FF 
15f68     E4 64 06 F1 | 	add	objptr, ##43236
15f6c     32 A9 02 FB | 	rdlong	local02, objptr
15f70     02 A8 66 F0 | 	shl	local02, #2
15f74     78 65 86 F1 | 	sub	objptr, #376
15f78     32 A9 02 F1 | 	add	local02, objptr
15f7c     54 93 02 FB | 	rdlong	arg01, local02
15f80     53 00 00 FF 
15f84     6C 65 86 F1 | 	sub	objptr, ##42860
15f88     49 93 52 F6 | 	abs	arg01, arg01 wc
15f8c     1F AA C6 C9 |  if_b	decod	local03, #31
15f90     00 AA 06 36 |  if_ae	mov	local03, #0
15f94     D8 0E B1 FD | 	call	#__system___float_fromuns
15f98     55 7B 62 F5 | 	xor	result1, local03
15f9c     3D 93 02 F6 | 	mov	arg01, result1
15fa0     FF 7F 23 FF 
15fa4     00 94 06 F6 | 	mov	arg02, ##1191181824
15fa8     CC 14 B1 FD | 	call	#__system___float_div
15fac     3D 95 02 F6 | 	mov	arg02, result1
15fb0     56 93 02 F6 | 	mov	arg01, local04
15fb4     EC 0E B1 FD | 	call	#__system___float_add
15fb8     3D AD 02 F6 | 	mov	local04, result1
15fbc                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
15fbc     56 93 02 F6 | 	mov	arg01, local04
15fc0     1F 92 06 F4 | 	bitl	arg01, #31
15fc4     89 41 1D FF 
15fc8     6F 94 06 F6 | 	mov	arg02, ##981668463
15fcc     01 96 06 F6 | 	mov	arg03, #1
15fd0     D4 16 B1 FD | 	call	#__system___float_cmp
15fd4     00 7A 56 F2 | 	cmps	result1, #0 wc
15fd8     00 AC 06 C6 |  if_b	mov	local04, #0
15fdc     E7 AC 62 FC | 	wrlong	local04, fp
15fe0     08 CE 05 F1 | 	add	fp, #8
15fe4     E7 3C 68 FC | 	wrlong	#30, fp
15fe8     08 CE 85 F1 | 	sub	fp, #8
15fec     E7 92 02 F6 | 	mov	arg01, fp
15ff0     0C 77 BF FD | 	call	#_push
15ff4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
15ff4     1C 00 90 FD | 	jmp	#LR__1884
15ff8                 | LR__1882
15ff8     29 92 06 F6 | 	mov	arg01, #41
15ffc     00 94 06 F6 | 	mov	arg02, #0
16000     7C AE B0 FD | 	call	#_printerror
16004                 | '      printerror(41) : return
16004     0C 00 90 FD | 	jmp	#LR__1884
16008                 | LR__1883
16008     29 92 06 F6 | 	mov	arg01, #41
1600c     00 94 06 F6 | 	mov	arg02, #0
16010     6C AE B0 FD | 	call	#_printerror
16014                 | LR__1884
16014     E7 F0 03 F6 | 	mov	ptra, fp
16018     F2 00 A0 FD | 	call	#popregs_
1601c                 | _do_padrx_ret
1601c     2D 00 64 FD | 	ret
16020                 | 
16020                 | ' 
16020                 | ' ' ------------------ padry
16020                 | ' 
16020                 | ' sub do_padry
16020                 | _do_padry
16020     04 CA 05 F6 | 	mov	COUNT_, #4
16024     E8 00 A0 FD | 	call	#pushregs_
16028     14 F0 07 F1 | 	add	ptra, #20
1602c     4C 00 00 FF 
16030     24 64 06 F1 | 	add	objptr, ##38948
16034     32 A7 02 FB | 	rdlong	local01, objptr
16038     53 97 02 F6 | 	mov	arg03, local01
1603c     01 96 66 F0 | 	shl	arg03, #1
16040     53 97 02 F1 | 	add	arg03, local01
16044     02 96 66 F0 | 	shl	arg03, #2
16048     03 00 00 FF 
1604c     04 64 86 F1 | 	sub	objptr, ##1540
16050     32 97 02 F1 | 	add	arg03, objptr
16054     4B A9 02 FB | 	rdlong	local02, arg03
16058                 | ' 
16058                 | ' numpar=compiledline(lineptr_e).result.uresult
16058                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
16058     02 A8 16 F2 | 	cmp	local02, #2 wc
1605c     49 00 00 FF 
16060     20 64 86 F1 | 	sub	objptr, ##37408
16064     40 00 90 CD |  if_b	jmp	#LR__1890
16068     00 92 06 F6 | 	mov	arg01, #0
1606c     B8 40 B1 FD | 	call	#__system___getiolock_0622
16070     3D 93 02 F6 | 	mov	arg01, result1
16074     2C EB B0 FD | 	call	#__system___lockmem
16078     99 01 00 FF 
1607c     51 94 06 F6 | 	mov	arg02, ##@LR__6057
16080     00 92 06 F6 | 	mov	arg01, #0
16084     00 96 06 F6 | 	mov	arg03, #0
16088     0C F8 B0 FD | 	call	#__system___basic_print_string
1608c     00 92 06 F6 | 	mov	arg01, #0
16090     94 40 B1 FD | 	call	#__system___getiolock_0622
16094     3D 01 68 FC | 	wrlong	#0, result1
16098     27 92 06 F6 | 	mov	arg01, #39
1609c     00 94 06 F6 | 	mov	arg02, #0
160a0     DC AD B0 FD | 	call	#_printerror
160a4     A0 01 90 FD | 	jmp	#LR__1894
160a8                 | LR__1890
160a8                 | ' if numpar=0 then 
160a8     00 A8 0E F2 | 	cmp	local02, #0 wz
160ac     8C 00 90 5D |  if_ne	jmp	#LR__1891
160b0     00 C0 1B FF 
160b4     00 A8 06 F6 | 	mov	local02, ##931135488
160b8     53 00 00 FF 
160bc     88 65 06 F1 | 	add	objptr, ##42888
160c0     32 93 02 FB | 	rdlong	arg01, objptr
160c4     53 00 00 FF 
160c8     88 65 86 F1 | 	sub	objptr, ##42888
160cc     49 93 52 F6 | 	abs	arg01, arg01 wc
160d0     1F AA C6 C9 |  if_b	decod	local03, #31
160d4     00 AA 06 36 |  if_ae	mov	local03, #0
160d8     94 0D B1 FD | 	call	#__system___float_fromuns
160dc     55 7B 62 F5 | 	xor	result1, local03
160e0     3D 93 02 F6 | 	mov	arg01, result1
160e4     FF 7F 23 FF 
160e8     00 94 06 F6 | 	mov	arg02, ##1191181824
160ec     88 13 B1 FD | 	call	#__system___float_div
160f0     3D 95 02 F6 | 	mov	arg02, result1
160f4     54 93 02 F6 | 	mov	arg01, local02
160f8     A8 0D B1 FD | 	call	#__system___float_add
160fc     3D AD 02 F6 | 	mov	local04, result1
16100                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16100     56 93 02 F6 | 	mov	arg01, local04
16104     1F 92 06 F4 | 	bitl	arg01, #31
16108     89 41 1D FF 
1610c     6F 94 06 F6 | 	mov	arg02, ##981668463
16110     01 96 06 F6 | 	mov	arg03, #1
16114     90 15 B1 FD | 	call	#__system___float_cmp
16118     00 7A 56 F2 | 	cmps	result1, #0 wc
1611c     00 AC 06 C6 |  if_b	mov	local04, #0
16120     E7 AC 62 FC | 	wrlong	local04, fp
16124     08 CE 05 F1 | 	add	fp, #8
16128     E7 3C 68 FC | 	wrlong	#30, fp
1612c     08 CE 85 F1 | 	sub	fp, #8
16130     E7 92 02 F6 | 	mov	arg01, fp
16134     C8 75 BF FD | 	call	#_push
16138                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16138     0C 01 90 FD | 	jmp	#LR__1894
1613c                 | LR__1891
1613c     30 75 BF FD | 	call	#_pop
16140     E7 7A 62 FC | 	wrlong	result1, fp
16144     04 CE 05 F1 | 	add	fp, #4
16148     E7 7C 62 FC | 	wrlong	result2, fp
1614c     04 CE 05 F1 | 	add	fp, #4
16150     E7 7E 62 FC | 	wrlong	result3, fp
16154                 | ' t1=pop()
16154                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16154     08 CE 85 F1 | 	sub	fp, #8
16158     1C 7E 0E F2 | 	cmp	result3, #28 wz
1615c     08 CE 05 51 |  if_ne	add	fp, #8
16160     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16164     08 CE 85 51 |  if_ne	sub	fp, #8
16168     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
1616c     CC 00 90 5D |  if_ne	jmp	#LR__1893
16170     E7 AC 02 FB | 	rdlong	local04, fp
16174     54 00 00 FF 
16178     E4 64 06 F1 | 	add	objptr, ##43236
1617c     32 AD 62 FC | 	wrlong	local04, objptr
16180                 | '   q=t1.result.uresult
16180                 | '   if q<7 then 
16180     54 00 00 FF 
16184     E4 64 86 F1 | 	sub	objptr, ##43236
16188     07 AC 56 F2 | 	cmps	local04, #7 wc
1618c     9C 00 90 3D |  if_ae	jmp	#LR__1892
16190     00 C0 1B FF 
16194     00 AC 06 F6 | 	mov	local04, ##931135488
16198     54 00 00 FF 
1619c     E4 64 06 F1 | 	add	objptr, ##43236
161a0     32 A9 02 FB | 	rdlong	local02, objptr
161a4     02 A8 66 F0 | 	shl	local02, #2
161a8     5C 65 86 F1 | 	sub	objptr, #348
161ac     32 A9 02 F1 | 	add	local02, objptr
161b0     54 93 02 FB | 	rdlong	arg01, local02
161b4     53 00 00 FF 
161b8     88 65 86 F1 | 	sub	objptr, ##42888
161bc     49 93 52 F6 | 	abs	arg01, arg01 wc
161c0     1F AA C6 C9 |  if_b	decod	local03, #31
161c4     00 AA 06 36 |  if_ae	mov	local03, #0
161c8     A4 0C B1 FD | 	call	#__system___float_fromuns
161cc     55 7B 62 F5 | 	xor	result1, local03
161d0     3D 93 02 F6 | 	mov	arg01, result1
161d4     FF 7F 23 FF 
161d8     00 94 06 F6 | 	mov	arg02, ##1191181824
161dc     98 12 B1 FD | 	call	#__system___float_div
161e0     3D 95 02 F6 | 	mov	arg02, result1
161e4     56 93 02 F6 | 	mov	arg01, local04
161e8     B8 0C B1 FD | 	call	#__system___float_add
161ec     3D AD 02 F6 | 	mov	local04, result1
161f0                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
161f0     56 93 02 F6 | 	mov	arg01, local04
161f4     1F 92 06 F4 | 	bitl	arg01, #31
161f8     89 41 1D FF 
161fc     6F 94 06 F6 | 	mov	arg02, ##981668463
16200     01 96 06 F6 | 	mov	arg03, #1
16204     A0 14 B1 FD | 	call	#__system___float_cmp
16208     00 7A 56 F2 | 	cmps	result1, #0 wc
1620c     00 AC 06 C6 |  if_b	mov	local04, #0
16210     E7 AC 62 FC | 	wrlong	local04, fp
16214     08 CE 05 F1 | 	add	fp, #8
16218     E7 3C 68 FC | 	wrlong	#30, fp
1621c     08 CE 85 F1 | 	sub	fp, #8
16220     E7 92 02 F6 | 	mov	arg01, fp
16224     D8 74 BF FD | 	call	#_push
16228                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16228     1C 00 90 FD | 	jmp	#LR__1894
1622c                 | LR__1892
1622c     29 92 06 F6 | 	mov	arg01, #41
16230     00 94 06 F6 | 	mov	arg02, #0
16234     48 AC B0 FD | 	call	#_printerror
16238                 | '      printerror(41) : return
16238     0C 00 90 FD | 	jmp	#LR__1894
1623c                 | LR__1893
1623c     29 92 06 F6 | 	mov	arg01, #41
16240     00 94 06 F6 | 	mov	arg02, #0
16244     38 AC B0 FD | 	call	#_printerror
16248                 | LR__1894
16248     E7 F0 03 F6 | 	mov	ptra, fp
1624c     F2 00 A0 FD | 	call	#popregs_
16250                 | _do_padry_ret
16250     2D 00 64 FD | 	ret
16254                 | 
16254                 | ' 
16254                 | ' ' ------------------ padrz
16254                 | ' 
16254                 | ' sub do_padrz
16254                 | _do_padrz
16254     04 CA 05 F6 | 	mov	COUNT_, #4
16258     E8 00 A0 FD | 	call	#pushregs_
1625c     14 F0 07 F1 | 	add	ptra, #20
16260     4C 00 00 FF 
16264     24 64 06 F1 | 	add	objptr, ##38948
16268     32 A7 02 FB | 	rdlong	local01, objptr
1626c     53 97 02 F6 | 	mov	arg03, local01
16270     01 96 66 F0 | 	shl	arg03, #1
16274     53 97 02 F1 | 	add	arg03, local01
16278     02 96 66 F0 | 	shl	arg03, #2
1627c     03 00 00 FF 
16280     04 64 86 F1 | 	sub	objptr, ##1540
16284     32 97 02 F1 | 	add	arg03, objptr
16288     4B A9 02 FB | 	rdlong	local02, arg03
1628c                 | ' 
1628c                 | ' numpar=compiledline(lineptr_e).result.uresult
1628c                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
1628c     02 A8 16 F2 | 	cmp	local02, #2 wc
16290     49 00 00 FF 
16294     20 64 86 F1 | 	sub	objptr, ##37408
16298     40 00 90 CD |  if_b	jmp	#LR__1900
1629c     00 92 06 F6 | 	mov	arg01, #0
162a0     84 3E B1 FD | 	call	#__system___getiolock_0622
162a4     3D 93 02 F6 | 	mov	arg01, result1
162a8     F8 E8 B0 FD | 	call	#__system___lockmem
162ac     99 01 00 FF 
162b0     59 94 06 F6 | 	mov	arg02, ##@LR__6058
162b4     00 92 06 F6 | 	mov	arg01, #0
162b8     00 96 06 F6 | 	mov	arg03, #0
162bc     D8 F5 B0 FD | 	call	#__system___basic_print_string
162c0     00 92 06 F6 | 	mov	arg01, #0
162c4     60 3E B1 FD | 	call	#__system___getiolock_0622
162c8     3D 01 68 FC | 	wrlong	#0, result1
162cc     27 92 06 F6 | 	mov	arg01, #39
162d0     00 94 06 F6 | 	mov	arg02, #0
162d4     A8 AB B0 FD | 	call	#_printerror
162d8     A0 01 90 FD | 	jmp	#LR__1904
162dc                 | LR__1900
162dc                 | ' if numpar=0 then 
162dc     00 A8 0E F2 | 	cmp	local02, #0 wz
162e0     8C 00 90 5D |  if_ne	jmp	#LR__1901
162e4     00 C0 1B FF 
162e8     00 A8 06 F6 | 	mov	local02, ##931135488
162ec     53 00 00 FF 
162f0     A4 65 06 F1 | 	add	objptr, ##42916
162f4     32 93 02 FB | 	rdlong	arg01, objptr
162f8     53 00 00 FF 
162fc     A4 65 86 F1 | 	sub	objptr, ##42916
16300     49 93 52 F6 | 	abs	arg01, arg01 wc
16304     1F AA C6 C9 |  if_b	decod	local03, #31
16308     00 AA 06 36 |  if_ae	mov	local03, #0
1630c     60 0B B1 FD | 	call	#__system___float_fromuns
16310     55 7B 62 F5 | 	xor	result1, local03
16314     3D 93 02 F6 | 	mov	arg01, result1
16318     FF 7F 23 FF 
1631c     00 94 06 F6 | 	mov	arg02, ##1191181824
16320     54 11 B1 FD | 	call	#__system___float_div
16324     3D 95 02 F6 | 	mov	arg02, result1
16328     54 93 02 F6 | 	mov	arg01, local02
1632c     74 0B B1 FD | 	call	#__system___float_add
16330     3D AD 02 F6 | 	mov	local04, result1
16334                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16334     56 93 02 F6 | 	mov	arg01, local04
16338     1F 92 06 F4 | 	bitl	arg01, #31
1633c     89 41 1D FF 
16340     6F 94 06 F6 | 	mov	arg02, ##981668463
16344     01 96 06 F6 | 	mov	arg03, #1
16348     5C 13 B1 FD | 	call	#__system___float_cmp
1634c     00 7A 56 F2 | 	cmps	result1, #0 wc
16350     00 AC 06 C6 |  if_b	mov	local04, #0
16354     E7 AC 62 FC | 	wrlong	local04, fp
16358     08 CE 05 F1 | 	add	fp, #8
1635c     E7 3C 68 FC | 	wrlong	#30, fp
16360     08 CE 85 F1 | 	sub	fp, #8
16364     E7 92 02 F6 | 	mov	arg01, fp
16368     94 73 BF FD | 	call	#_push
1636c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
1636c     0C 01 90 FD | 	jmp	#LR__1904
16370                 | LR__1901
16370     FC 72 BF FD | 	call	#_pop
16374     E7 7A 62 FC | 	wrlong	result1, fp
16378     04 CE 05 F1 | 	add	fp, #4
1637c     E7 7C 62 FC | 	wrlong	result2, fp
16380     04 CE 05 F1 | 	add	fp, #4
16384     E7 7E 62 FC | 	wrlong	result3, fp
16388                 | ' t1=pop()
16388                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16388     08 CE 85 F1 | 	sub	fp, #8
1638c     1C 7E 0E F2 | 	cmp	result3, #28 wz
16390     08 CE 05 51 |  if_ne	add	fp, #8
16394     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16398     08 CE 85 51 |  if_ne	sub	fp, #8
1639c     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
163a0     CC 00 90 5D |  if_ne	jmp	#LR__1903
163a4     E7 AC 02 FB | 	rdlong	local04, fp
163a8     54 00 00 FF 
163ac     E4 64 06 F1 | 	add	objptr, ##43236
163b0     32 AD 62 FC | 	wrlong	local04, objptr
163b4                 | '   q=t1.result.uresult
163b4                 | '   if q<7 then 
163b4     54 00 00 FF 
163b8     E4 64 86 F1 | 	sub	objptr, ##43236
163bc     07 AC 56 F2 | 	cmps	local04, #7 wc
163c0     9C 00 90 3D |  if_ae	jmp	#LR__1902
163c4     00 C0 1B FF 
163c8     00 AC 06 F6 | 	mov	local04, ##931135488
163cc     54 00 00 FF 
163d0     E4 64 06 F1 | 	add	objptr, ##43236
163d4     32 A9 02 FB | 	rdlong	local02, objptr
163d8     02 A8 66 F0 | 	shl	local02, #2
163dc     40 65 86 F1 | 	sub	objptr, #320
163e0     32 A9 02 F1 | 	add	local02, objptr
163e4     54 93 02 FB | 	rdlong	arg01, local02
163e8     53 00 00 FF 
163ec     A4 65 86 F1 | 	sub	objptr, ##42916
163f0     49 93 52 F6 | 	abs	arg01, arg01 wc
163f4     1F AA C6 C9 |  if_b	decod	local03, #31
163f8     00 AA 06 36 |  if_ae	mov	local03, #0
163fc     70 0A B1 FD | 	call	#__system___float_fromuns
16400     55 7B 62 F5 | 	xor	result1, local03
16404     3D 93 02 F6 | 	mov	arg01, result1
16408     FF 7F 23 FF 
1640c     00 94 06 F6 | 	mov	arg02, ##1191181824
16410     64 10 B1 FD | 	call	#__system___float_div
16414     3D 95 02 F6 | 	mov	arg02, result1
16418     56 93 02 F6 | 	mov	arg01, local04
1641c     84 0A B1 FD | 	call	#__system___float_add
16420     3D AD 02 F6 | 	mov	local04, result1
16424                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16424     56 93 02 F6 | 	mov	arg01, local04
16428     1F 92 06 F4 | 	bitl	arg01, #31
1642c     89 41 1D FF 
16430     6F 94 06 F6 | 	mov	arg02, ##981668463
16434     01 96 06 F6 | 	mov	arg03, #1
16438     6C 12 B1 FD | 	call	#__system___float_cmp
1643c     00 7A 56 F2 | 	cmps	result1, #0 wc
16440     00 AC 06 C6 |  if_b	mov	local04, #0
16444     E7 AC 62 FC | 	wrlong	local04, fp
16448     08 CE 05 F1 | 	add	fp, #8
1644c     E7 3C 68 FC | 	wrlong	#30, fp
16450     08 CE 85 F1 | 	sub	fp, #8
16454     E7 92 02 F6 | 	mov	arg01, fp
16458     A4 72 BF FD | 	call	#_push
1645c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
1645c     1C 00 90 FD | 	jmp	#LR__1904
16460                 | LR__1902
16460     29 92 06 F6 | 	mov	arg01, #41
16464     00 94 06 F6 | 	mov	arg02, #0
16468     14 AA B0 FD | 	call	#_printerror
1646c                 | '      printerror(41) : return
1646c     0C 00 90 FD | 	jmp	#LR__1904
16470                 | LR__1903
16470     29 92 06 F6 | 	mov	arg01, #41
16474     00 94 06 F6 | 	mov	arg02, #0
16478     04 AA B0 FD | 	call	#_printerror
1647c                 | LR__1904
1647c     E7 F0 03 F6 | 	mov	ptra, fp
16480     F2 00 A0 FD | 	call	#popregs_
16484                 | _do_padrz_ret
16484     2D 00 64 FD | 	ret
16488                 | 
16488                 | ' 
16488                 | ' ' ------------------ pads
16488                 | ' 
16488                 | ' sub do_pads
16488                 | _do_pads
16488     04 CA 05 F6 | 	mov	COUNT_, #4
1648c     E8 00 A0 FD | 	call	#pushregs_
16490     14 F0 07 F1 | 	add	ptra, #20
16494     4C 00 00 FF 
16498     24 64 06 F1 | 	add	objptr, ##38948
1649c     32 A7 02 FB | 	rdlong	local01, objptr
164a0     53 97 02 F6 | 	mov	arg03, local01
164a4     01 96 66 F0 | 	shl	arg03, #1
164a8     53 97 02 F1 | 	add	arg03, local01
164ac     02 96 66 F0 | 	shl	arg03, #2
164b0     03 00 00 FF 
164b4     04 64 86 F1 | 	sub	objptr, ##1540
164b8     32 97 02 F1 | 	add	arg03, objptr
164bc     4B A9 02 FB | 	rdlong	local02, arg03
164c0                 | ' 
164c0                 | ' numpar=compiledline(lineptr_e).result.uresult
164c0                 | ' if numpar>1 then print "pads: "; : printerror(39) : return
164c0     02 A8 16 F2 | 	cmp	local02, #2 wc
164c4     49 00 00 FF 
164c8     20 64 86 F1 | 	sub	objptr, ##37408
164cc     40 00 90 CD |  if_b	jmp	#LR__1910
164d0     00 92 06 F6 | 	mov	arg01, #0
164d4     50 3C B1 FD | 	call	#__system___getiolock_0622
164d8     3D 93 02 F6 | 	mov	arg01, result1
164dc     C4 E6 B0 FD | 	call	#__system___lockmem
164e0     99 01 00 FF 
164e4     61 94 06 F6 | 	mov	arg02, ##@LR__6059
164e8     00 92 06 F6 | 	mov	arg01, #0
164ec     00 96 06 F6 | 	mov	arg03, #0
164f0     A4 F3 B0 FD | 	call	#__system___basic_print_string
164f4     00 92 06 F6 | 	mov	arg01, #0
164f8     2C 3C B1 FD | 	call	#__system___getiolock_0622
164fc     3D 01 68 FC | 	wrlong	#0, result1
16500     27 92 06 F6 | 	mov	arg01, #39
16504     00 94 06 F6 | 	mov	arg02, #0
16508     74 A9 B0 FD | 	call	#_printerror
1650c     A0 01 90 FD | 	jmp	#LR__1914
16510                 | LR__1910
16510                 | ' if numpar=0 then 
16510     00 A8 0E F2 | 	cmp	local02, #0 wz
16514     8C 00 90 5D |  if_ne	jmp	#LR__1911
16518     00 C0 1B FF 
1651c     00 A8 06 F6 | 	mov	local02, ##931135488
16520     53 00 00 FF 
16524     C0 65 06 F1 | 	add	objptr, ##42944
16528     32 93 02 FB | 	rdlong	arg01, objptr
1652c     53 00 00 FF 
16530     C0 65 86 F1 | 	sub	objptr, ##42944
16534     49 93 52 F6 | 	abs	arg01, arg01 wc
16538     1F AA C6 C9 |  if_b	decod	local03, #31
1653c     00 AA 06 36 |  if_ae	mov	local03, #0
16540     2C 09 B1 FD | 	call	#__system___float_fromuns
16544     55 7B 62 F5 | 	xor	result1, local03
16548     3D 93 02 F6 | 	mov	arg01, result1
1654c     FF 7F 23 FF 
16550     00 94 06 F6 | 	mov	arg02, ##1191181824
16554     20 0F B1 FD | 	call	#__system___float_div
16558     3D 95 02 F6 | 	mov	arg02, result1
1655c     54 93 02 F6 | 	mov	arg01, local02
16560     40 09 B1 FD | 	call	#__system___float_add
16564     3D AD 02 F6 | 	mov	local04, result1
16568                 | '   fpad=(1.0/65536.0)+pads(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16568     56 93 02 F6 | 	mov	arg01, local04
1656c     1F 92 06 F4 | 	bitl	arg01, #31
16570     89 41 1D FF 
16574     6F 94 06 F6 | 	mov	arg02, ##981668463
16578     01 96 06 F6 | 	mov	arg03, #1
1657c     28 11 B1 FD | 	call	#__system___float_cmp
16580     00 7A 56 F2 | 	cmps	result1, #0 wc
16584     00 AC 06 C6 |  if_b	mov	local04, #0
16588     E7 AC 62 FC | 	wrlong	local04, fp
1658c     08 CE 05 F1 | 	add	fp, #8
16590     E7 3C 68 FC | 	wrlong	#30, fp
16594     08 CE 85 F1 | 	sub	fp, #8
16598     E7 92 02 F6 | 	mov	arg01, fp
1659c     60 71 BF FD | 	call	#_push
165a0                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
165a0     0C 01 90 FD | 	jmp	#LR__1914
165a4                 | LR__1911
165a4     C8 70 BF FD | 	call	#_pop
165a8     E7 7A 62 FC | 	wrlong	result1, fp
165ac     04 CE 05 F1 | 	add	fp, #4
165b0     E7 7C 62 FC | 	wrlong	result2, fp
165b4     04 CE 05 F1 | 	add	fp, #4
165b8     E7 7E 62 FC | 	wrlong	result3, fp
165bc                 | ' t1=pop()
165bc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
165bc     08 CE 85 F1 | 	sub	fp, #8
165c0     1C 7E 0E F2 | 	cmp	result3, #28 wz
165c4     08 CE 05 51 |  if_ne	add	fp, #8
165c8     E7 A6 02 5B |  if_ne	rdlong	local01, fp
165cc     08 CE 85 51 |  if_ne	sub	fp, #8
165d0     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
165d4     CC 00 90 5D |  if_ne	jmp	#LR__1913
165d8     E7 AC 02 FB | 	rdlong	local04, fp
165dc     54 00 00 FF 
165e0     E4 64 06 F1 | 	add	objptr, ##43236
165e4     32 AD 62 FC | 	wrlong	local04, objptr
165e8                 | '   q=t1.result.uresult
165e8                 | '   if q<7 then 
165e8     54 00 00 FF 
165ec     E4 64 86 F1 | 	sub	objptr, ##43236
165f0     07 AC 56 F2 | 	cmps	local04, #7 wc
165f4     9C 00 90 3D |  if_ae	jmp	#LR__1912
165f8     00 C0 1B FF 
165fc     00 AC 06 F6 | 	mov	local04, ##931135488
16600     54 00 00 FF 
16604     E4 64 06 F1 | 	add	objptr, ##43236
16608     32 A9 02 FB | 	rdlong	local02, objptr
1660c     02 A8 66 F0 | 	shl	local02, #2
16610     24 65 86 F1 | 	sub	objptr, #292
16614     32 A9 02 F1 | 	add	local02, objptr
16618     54 93 02 FB | 	rdlong	arg01, local02
1661c     53 00 00 FF 
16620     C0 65 86 F1 | 	sub	objptr, ##42944
16624     49 93 52 F6 | 	abs	arg01, arg01 wc
16628     1F AA C6 C9 |  if_b	decod	local03, #31
1662c     00 AA 06 36 |  if_ae	mov	local03, #0
16630     3C 08 B1 FD | 	call	#__system___float_fromuns
16634     55 7B 62 F5 | 	xor	result1, local03
16638     3D 93 02 F6 | 	mov	arg01, result1
1663c     FF 7F 23 FF 
16640     00 94 06 F6 | 	mov	arg02, ##1191181824
16644     30 0E B1 FD | 	call	#__system___float_div
16648     3D 95 02 F6 | 	mov	arg02, result1
1664c     56 93 02 F6 | 	mov	arg01, local04
16650     50 08 B1 FD | 	call	#__system___float_add
16654     3D AD 02 F6 | 	mov	local04, result1
16658                 | '     fpad=(1.0/65536.0)+pads(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16658     56 93 02 F6 | 	mov	arg01, local04
1665c     1F 92 06 F4 | 	bitl	arg01, #31
16660     89 41 1D FF 
16664     6F 94 06 F6 | 	mov	arg02, ##981668463
16668     01 96 06 F6 | 	mov	arg03, #1
1666c     38 10 B1 FD | 	call	#__system___float_cmp
16670     00 7A 56 F2 | 	cmps	result1, #0 wc
16674     00 AC 06 C6 |  if_b	mov	local04, #0
16678     E7 AC 62 FC | 	wrlong	local04, fp
1667c     08 CE 05 F1 | 	add	fp, #8
16680     E7 3C 68 FC | 	wrlong	#30, fp
16684     08 CE 85 F1 | 	sub	fp, #8
16688     E7 92 02 F6 | 	mov	arg01, fp
1668c     70 70 BF FD | 	call	#_push
16690                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16690     1C 00 90 FD | 	jmp	#LR__1914
16694                 | LR__1912
16694     29 92 06 F6 | 	mov	arg01, #41
16698     00 94 06 F6 | 	mov	arg02, #0
1669c     E0 A7 B0 FD | 	call	#_printerror
166a0                 | '      printerror(41) : return
166a0     0C 00 90 FD | 	jmp	#LR__1914
166a4                 | LR__1913
166a4     29 92 06 F6 | 	mov	arg01, #41
166a8     00 94 06 F6 | 	mov	arg02, #0
166ac     D0 A7 B0 FD | 	call	#_printerror
166b0                 | LR__1914
166b0     E7 F0 03 F6 | 	mov	ptra, fp
166b4     F2 00 A0 FD | 	call	#popregs_
166b8                 | _do_pads_ret
166b8     2D 00 64 FD | 	ret
166bc                 | 
166bc                 | ' 
166bc                 | ' ' ------------------ padw
166bc                 | ' 
166bc                 | ' sub do_padw
166bc                 | _do_padw
166bc     04 CA 05 F6 | 	mov	COUNT_, #4
166c0     E8 00 A0 FD | 	call	#pushregs_
166c4     14 F0 07 F1 | 	add	ptra, #20
166c8     4C 00 00 FF 
166cc     24 64 06 F1 | 	add	objptr, ##38948
166d0     32 A7 02 FB | 	rdlong	local01, objptr
166d4     53 97 02 F6 | 	mov	arg03, local01
166d8     01 96 66 F0 | 	shl	arg03, #1
166dc     53 97 02 F1 | 	add	arg03, local01
166e0     02 96 66 F0 | 	shl	arg03, #2
166e4     03 00 00 FF 
166e8     04 64 86 F1 | 	sub	objptr, ##1540
166ec     32 97 02 F1 | 	add	arg03, objptr
166f0     4B A9 02 FB | 	rdlong	local02, arg03
166f4                 | ' 
166f4                 | ' numpar=compiledline(lineptr_e).result.uresult
166f4                 | ' if numpar>1 then print "padw: "; : printerror(39) : return
166f4     02 A8 16 F2 | 	cmp	local02, #2 wc
166f8     49 00 00 FF 
166fc     20 64 86 F1 | 	sub	objptr, ##37408
16700     40 00 90 CD |  if_b	jmp	#LR__1920
16704     00 92 06 F6 | 	mov	arg01, #0
16708     1C 3A B1 FD | 	call	#__system___getiolock_0622
1670c     3D 93 02 F6 | 	mov	arg01, result1
16710     90 E4 B0 FD | 	call	#__system___lockmem
16714     99 01 00 FF 
16718     68 94 06 F6 | 	mov	arg02, ##@LR__6060
1671c     00 92 06 F6 | 	mov	arg01, #0
16720     00 96 06 F6 | 	mov	arg03, #0
16724     70 F1 B0 FD | 	call	#__system___basic_print_string
16728     00 92 06 F6 | 	mov	arg01, #0
1672c     F8 39 B1 FD | 	call	#__system___getiolock_0622
16730     3D 01 68 FC | 	wrlong	#0, result1
16734     27 92 06 F6 | 	mov	arg01, #39
16738     00 94 06 F6 | 	mov	arg02, #0
1673c     40 A7 B0 FD | 	call	#_printerror
16740     A0 01 90 FD | 	jmp	#LR__1924
16744                 | LR__1920
16744                 | ' if numpar=0 then 
16744     00 A8 0E F2 | 	cmp	local02, #0 wz
16748     8C 00 90 5D |  if_ne	jmp	#LR__1921
1674c     00 C0 1B FF 
16750     00 A8 06 F6 | 	mov	local02, ##931135488
16754     53 00 00 FF 
16758     DC 65 06 F1 | 	add	objptr, ##42972
1675c     32 93 02 FB | 	rdlong	arg01, objptr
16760     53 00 00 FF 
16764     DC 65 86 F1 | 	sub	objptr, ##42972
16768     49 93 52 F6 | 	abs	arg01, arg01 wc
1676c     1F AA C6 C9 |  if_b	decod	local03, #31
16770     00 AA 06 36 |  if_ae	mov	local03, #0
16774     F8 06 B1 FD | 	call	#__system___float_fromuns
16778     55 7B 62 F5 | 	xor	result1, local03
1677c     3D 93 02 F6 | 	mov	arg01, result1
16780     FF 7F 23 FF 
16784     00 94 06 F6 | 	mov	arg02, ##1191181824
16788     EC 0C B1 FD | 	call	#__system___float_div
1678c     3D 95 02 F6 | 	mov	arg02, result1
16790     54 93 02 F6 | 	mov	arg01, local02
16794     0C 07 B1 FD | 	call	#__system___float_add
16798     3D AD 02 F6 | 	mov	local04, result1
1679c                 | '   fpad=(1.0/65536.0)+padw(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1679c     56 93 02 F6 | 	mov	arg01, local04
167a0     1F 92 06 F4 | 	bitl	arg01, #31
167a4     89 41 1D FF 
167a8     6F 94 06 F6 | 	mov	arg02, ##981668463
167ac     01 96 06 F6 | 	mov	arg03, #1
167b0     F4 0E B1 FD | 	call	#__system___float_cmp
167b4     00 7A 56 F2 | 	cmps	result1, #0 wc
167b8     00 AC 06 C6 |  if_b	mov	local04, #0
167bc     E7 AC 62 FC | 	wrlong	local04, fp
167c0     08 CE 05 F1 | 	add	fp, #8
167c4     E7 3C 68 FC | 	wrlong	#30, fp
167c8     08 CE 85 F1 | 	sub	fp, #8
167cc     E7 92 02 F6 | 	mov	arg01, fp
167d0     2C 6F BF FD | 	call	#_push
167d4                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
167d4     0C 01 90 FD | 	jmp	#LR__1924
167d8                 | LR__1921
167d8     94 6E BF FD | 	call	#_pop
167dc     E7 7A 62 FC | 	wrlong	result1, fp
167e0     04 CE 05 F1 | 	add	fp, #4
167e4     E7 7C 62 FC | 	wrlong	result2, fp
167e8     04 CE 05 F1 | 	add	fp, #4
167ec     E7 7E 62 FC | 	wrlong	result3, fp
167f0                 | ' t1=pop()
167f0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
167f0     08 CE 85 F1 | 	sub	fp, #8
167f4     1C 7E 0E F2 | 	cmp	result3, #28 wz
167f8     08 CE 05 51 |  if_ne	add	fp, #8
167fc     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16800     08 CE 85 51 |  if_ne	sub	fp, #8
16804     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16808     CC 00 90 5D |  if_ne	jmp	#LR__1923
1680c     E7 AC 02 FB | 	rdlong	local04, fp
16810     54 00 00 FF 
16814     E4 64 06 F1 | 	add	objptr, ##43236
16818     32 AD 62 FC | 	wrlong	local04, objptr
1681c                 | '   q=t1.result.uresult
1681c                 | '   if q<7 then 
1681c     54 00 00 FF 
16820     E4 64 86 F1 | 	sub	objptr, ##43236
16824     07 AC 56 F2 | 	cmps	local04, #7 wc
16828     9C 00 90 3D |  if_ae	jmp	#LR__1922
1682c     00 C0 1B FF 
16830     00 AC 06 F6 | 	mov	local04, ##931135488
16834     54 00 00 FF 
16838     E4 64 06 F1 | 	add	objptr, ##43236
1683c     32 A9 02 FB | 	rdlong	local02, objptr
16840     02 A8 66 F0 | 	shl	local02, #2
16844     08 65 86 F1 | 	sub	objptr, #264
16848     32 A9 02 F1 | 	add	local02, objptr
1684c     54 93 02 FB | 	rdlong	arg01, local02
16850     53 00 00 FF 
16854     DC 65 86 F1 | 	sub	objptr, ##42972
16858     49 93 52 F6 | 	abs	arg01, arg01 wc
1685c     1F AA C6 C9 |  if_b	decod	local03, #31
16860     00 AA 06 36 |  if_ae	mov	local03, #0
16864     08 06 B1 FD | 	call	#__system___float_fromuns
16868     55 7B 62 F5 | 	xor	result1, local03
1686c     3D 93 02 F6 | 	mov	arg01, result1
16870     FF 7F 23 FF 
16874     00 94 06 F6 | 	mov	arg02, ##1191181824
16878     FC 0B B1 FD | 	call	#__system___float_div
1687c     3D 95 02 F6 | 	mov	arg02, result1
16880     56 93 02 F6 | 	mov	arg01, local04
16884     1C 06 B1 FD | 	call	#__system___float_add
16888     3D AD 02 F6 | 	mov	local04, result1
1688c                 | '     fpad=(1.0/65536.0)+padw(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1688c     56 93 02 F6 | 	mov	arg01, local04
16890     1F 92 06 F4 | 	bitl	arg01, #31
16894     89 41 1D FF 
16898     6F 94 06 F6 | 	mov	arg02, ##981668463
1689c     01 96 06 F6 | 	mov	arg03, #1
168a0     04 0E B1 FD | 	call	#__system___float_cmp
168a4     00 7A 56 F2 | 	cmps	result1, #0 wc
168a8     00 AC 06 C6 |  if_b	mov	local04, #0
168ac     E7 AC 62 FC | 	wrlong	local04, fp
168b0     08 CE 05 F1 | 	add	fp, #8
168b4     E7 3C 68 FC | 	wrlong	#30, fp
168b8     08 CE 85 F1 | 	sub	fp, #8
168bc     E7 92 02 F6 | 	mov	arg01, fp
168c0     3C 6E BF FD | 	call	#_push
168c4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
168c4     1C 00 90 FD | 	jmp	#LR__1924
168c8                 | LR__1922
168c8     29 92 06 F6 | 	mov	arg01, #41
168cc     00 94 06 F6 | 	mov	arg02, #0
168d0     AC A5 B0 FD | 	call	#_printerror
168d4                 | '      printerror(41) : return
168d4     0C 00 90 FD | 	jmp	#LR__1924
168d8                 | LR__1923
168d8     29 92 06 F6 | 	mov	arg01, #41
168dc     00 94 06 F6 | 	mov	arg02, #0
168e0     9C A5 B0 FD | 	call	#_printerror
168e4                 | LR__1924
168e4     E7 F0 03 F6 | 	mov	ptra, fp
168e8     F2 00 A0 FD | 	call	#popregs_
168ec                 | _do_padw_ret
168ec     2D 00 64 FD | 	ret
168f0                 | 
168f0                 | ' 
168f0                 | ' ' ------------------ padx
168f0                 | ' 
168f0                 | ' sub do_padx
168f0                 | _do_padx
168f0     04 CA 05 F6 | 	mov	COUNT_, #4
168f4     E8 00 A0 FD | 	call	#pushregs_
168f8     14 F0 07 F1 | 	add	ptra, #20
168fc     4C 00 00 FF 
16900     24 64 06 F1 | 	add	objptr, ##38948
16904     32 A7 02 FB | 	rdlong	local01, objptr
16908     53 97 02 F6 | 	mov	arg03, local01
1690c     01 96 66 F0 | 	shl	arg03, #1
16910     53 97 02 F1 | 	add	arg03, local01
16914     02 96 66 F0 | 	shl	arg03, #2
16918     03 00 00 FF 
1691c     04 64 86 F1 | 	sub	objptr, ##1540
16920     32 97 02 F1 | 	add	arg03, objptr
16924     4B A9 02 FB | 	rdlong	local02, arg03
16928                 | ' 
16928                 | ' numpar=compiledline(lineptr_e).result.uresult
16928                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
16928     02 A8 16 F2 | 	cmp	local02, #2 wc
1692c     49 00 00 FF 
16930     20 64 86 F1 | 	sub	objptr, ##37408
16934     40 00 90 CD |  if_b	jmp	#LR__1930
16938     00 92 06 F6 | 	mov	arg01, #0
1693c     E8 37 B1 FD | 	call	#__system___getiolock_0622
16940     3D 93 02 F6 | 	mov	arg01, result1
16944     5C E2 B0 FD | 	call	#__system___lockmem
16948     99 01 00 FF 
1694c     6F 94 06 F6 | 	mov	arg02, ##@LR__6061
16950     00 92 06 F6 | 	mov	arg01, #0
16954     00 96 06 F6 | 	mov	arg03, #0
16958     3C EF B0 FD | 	call	#__system___basic_print_string
1695c     00 92 06 F6 | 	mov	arg01, #0
16960     C4 37 B1 FD | 	call	#__system___getiolock_0622
16964     3D 01 68 FC | 	wrlong	#0, result1
16968     27 92 06 F6 | 	mov	arg01, #39
1696c     00 94 06 F6 | 	mov	arg02, #0
16970     0C A5 B0 FD | 	call	#_printerror
16974     A0 01 90 FD | 	jmp	#LR__1934
16978                 | LR__1930
16978                 | ' if numpar=0 then 
16978     00 A8 0E F2 | 	cmp	local02, #0 wz
1697c     8C 00 90 5D |  if_ne	jmp	#LR__1931
16980     00 C0 1B FF 
16984     00 A8 06 F6 | 	mov	local02, ##931135488
16988     53 00 00 FF 
1698c     FC 64 06 F1 | 	add	objptr, ##42748
16990     32 93 02 FB | 	rdlong	arg01, objptr
16994     53 00 00 FF 
16998     FC 64 86 F1 | 	sub	objptr, ##42748
1699c     49 93 52 F6 | 	abs	arg01, arg01 wc
169a0     1F AA C6 C9 |  if_b	decod	local03, #31
169a4     00 AA 06 36 |  if_ae	mov	local03, #0
169a8     C4 04 B1 FD | 	call	#__system___float_fromuns
169ac     55 7B 62 F5 | 	xor	result1, local03
169b0     3D 93 02 F6 | 	mov	arg01, result1
169b4     FF 7F 23 FF 
169b8     00 94 06 F6 | 	mov	arg02, ##1191181824
169bc     B8 0A B1 FD | 	call	#__system___float_div
169c0     3D 95 02 F6 | 	mov	arg02, result1
169c4     54 93 02 F6 | 	mov	arg01, local02
169c8     D8 04 B1 FD | 	call	#__system___float_add
169cc     3D AD 02 F6 | 	mov	local04, result1
169d0                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
169d0     56 93 02 F6 | 	mov	arg01, local04
169d4     1F 92 06 F4 | 	bitl	arg01, #31
169d8     89 41 1D FF 
169dc     6F 94 06 F6 | 	mov	arg02, ##981668463
169e0     01 96 06 F6 | 	mov	arg03, #1
169e4     C0 0C B1 FD | 	call	#__system___float_cmp
169e8     00 7A 56 F2 | 	cmps	result1, #0 wc
169ec     00 AC 06 C6 |  if_b	mov	local04, #0
169f0     E7 AC 62 FC | 	wrlong	local04, fp
169f4     08 CE 05 F1 | 	add	fp, #8
169f8     E7 3C 68 FC | 	wrlong	#30, fp
169fc     08 CE 85 F1 | 	sub	fp, #8
16a00     E7 92 02 F6 | 	mov	arg01, fp
16a04     F8 6C BF FD | 	call	#_push
16a08                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16a08     0C 01 90 FD | 	jmp	#LR__1934
16a0c                 | LR__1931
16a0c     60 6C BF FD | 	call	#_pop
16a10     E7 7A 62 FC | 	wrlong	result1, fp
16a14     04 CE 05 F1 | 	add	fp, #4
16a18     E7 7C 62 FC | 	wrlong	result2, fp
16a1c     04 CE 05 F1 | 	add	fp, #4
16a20     E7 7E 62 FC | 	wrlong	result3, fp
16a24                 | ' t1=pop()
16a24                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16a24     08 CE 85 F1 | 	sub	fp, #8
16a28     1C 7E 0E F2 | 	cmp	result3, #28 wz
16a2c     08 CE 05 51 |  if_ne	add	fp, #8
16a30     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16a34     08 CE 85 51 |  if_ne	sub	fp, #8
16a38     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16a3c     CC 00 90 5D |  if_ne	jmp	#LR__1933
16a40     E7 AC 02 FB | 	rdlong	local04, fp
16a44     54 00 00 FF 
16a48     E4 64 06 F1 | 	add	objptr, ##43236
16a4c     32 AD 62 FC | 	wrlong	local04, objptr
16a50                 | '   q=t1.result.uresult
16a50                 | '   if q<7 then 
16a50     54 00 00 FF 
16a54     E4 64 86 F1 | 	sub	objptr, ##43236
16a58     07 AC 56 F2 | 	cmps	local04, #7 wc
16a5c     9C 00 90 3D |  if_ae	jmp	#LR__1932
16a60     00 C0 1B FF 
16a64     00 AC 06 F6 | 	mov	local04, ##931135488
16a68     54 00 00 FF 
16a6c     E4 64 06 F1 | 	add	objptr, ##43236
16a70     32 A9 02 FB | 	rdlong	local02, objptr
16a74     02 A8 66 F0 | 	shl	local02, #2
16a78     E8 65 86 F1 | 	sub	objptr, #488
16a7c     32 A9 02 F1 | 	add	local02, objptr
16a80     54 93 02 FB | 	rdlong	arg01, local02
16a84     53 00 00 FF 
16a88     FC 64 86 F1 | 	sub	objptr, ##42748
16a8c     49 93 52 F6 | 	abs	arg01, arg01 wc
16a90     1F AA C6 C9 |  if_b	decod	local03, #31
16a94     00 AA 06 36 |  if_ae	mov	local03, #0
16a98     D4 03 B1 FD | 	call	#__system___float_fromuns
16a9c     55 7B 62 F5 | 	xor	result1, local03
16aa0     3D 93 02 F6 | 	mov	arg01, result1
16aa4     FF 7F 23 FF 
16aa8     00 94 06 F6 | 	mov	arg02, ##1191181824
16aac     C8 09 B1 FD | 	call	#__system___float_div
16ab0     3D 95 02 F6 | 	mov	arg02, result1
16ab4     56 93 02 F6 | 	mov	arg01, local04
16ab8     E8 03 B1 FD | 	call	#__system___float_add
16abc     3D AD 02 F6 | 	mov	local04, result1
16ac0                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16ac0     56 93 02 F6 | 	mov	arg01, local04
16ac4     1F 92 06 F4 | 	bitl	arg01, #31
16ac8     89 41 1D FF 
16acc     6F 94 06 F6 | 	mov	arg02, ##981668463
16ad0     01 96 06 F6 | 	mov	arg03, #1
16ad4     D0 0B B1 FD | 	call	#__system___float_cmp
16ad8     00 7A 56 F2 | 	cmps	result1, #0 wc
16adc     00 AC 06 C6 |  if_b	mov	local04, #0
16ae0     E7 AC 62 FC | 	wrlong	local04, fp
16ae4     08 CE 05 F1 | 	add	fp, #8
16ae8     E7 3C 68 FC | 	wrlong	#30, fp
16aec     08 CE 85 F1 | 	sub	fp, #8
16af0     E7 92 02 F6 | 	mov	arg01, fp
16af4     08 6C BF FD | 	call	#_push
16af8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16af8     1C 00 90 FD | 	jmp	#LR__1934
16afc                 | LR__1932
16afc     29 92 06 F6 | 	mov	arg01, #41
16b00     00 94 06 F6 | 	mov	arg02, #0
16b04     78 A3 B0 FD | 	call	#_printerror
16b08                 | '      printerror(41) : return
16b08     0C 00 90 FD | 	jmp	#LR__1934
16b0c                 | LR__1933
16b0c     29 92 06 F6 | 	mov	arg01, #41
16b10     00 94 06 F6 | 	mov	arg02, #0
16b14     68 A3 B0 FD | 	call	#_printerror
16b18                 | LR__1934
16b18     E7 F0 03 F6 | 	mov	ptra, fp
16b1c     F2 00 A0 FD | 	call	#popregs_
16b20                 | _do_padx_ret
16b20     2D 00 64 FD | 	ret
16b24                 | 
16b24                 | ' 
16b24                 | ' ' ------------------ pady
16b24                 | ' 
16b24                 | ' sub do_pady
16b24                 | _do_pady
16b24     04 CA 05 F6 | 	mov	COUNT_, #4
16b28     E8 00 A0 FD | 	call	#pushregs_
16b2c     14 F0 07 F1 | 	add	ptra, #20
16b30     4C 00 00 FF 
16b34     24 64 06 F1 | 	add	objptr, ##38948
16b38     32 A7 02 FB | 	rdlong	local01, objptr
16b3c     53 97 02 F6 | 	mov	arg03, local01
16b40     01 96 66 F0 | 	shl	arg03, #1
16b44     53 97 02 F1 | 	add	arg03, local01
16b48     02 96 66 F0 | 	shl	arg03, #2
16b4c     03 00 00 FF 
16b50     04 64 86 F1 | 	sub	objptr, ##1540
16b54     32 97 02 F1 | 	add	arg03, objptr
16b58     4B A9 02 FB | 	rdlong	local02, arg03
16b5c                 | ' 
16b5c                 | ' numpar=compiledline(lineptr_e).result.uresult
16b5c                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
16b5c     02 A8 16 F2 | 	cmp	local02, #2 wc
16b60     49 00 00 FF 
16b64     20 64 86 F1 | 	sub	objptr, ##37408
16b68     40 00 90 CD |  if_b	jmp	#LR__1940
16b6c     00 92 06 F6 | 	mov	arg01, #0
16b70     B4 35 B1 FD | 	call	#__system___getiolock_0622
16b74     3D 93 02 F6 | 	mov	arg01, result1
16b78     28 E0 B0 FD | 	call	#__system___lockmem
16b7c     99 01 00 FF 
16b80     76 94 06 F6 | 	mov	arg02, ##@LR__6062
16b84     00 92 06 F6 | 	mov	arg01, #0
16b88     00 96 06 F6 | 	mov	arg03, #0
16b8c     08 ED B0 FD | 	call	#__system___basic_print_string
16b90     00 92 06 F6 | 	mov	arg01, #0
16b94     90 35 B1 FD | 	call	#__system___getiolock_0622
16b98     3D 01 68 FC | 	wrlong	#0, result1
16b9c     27 92 06 F6 | 	mov	arg01, #39
16ba0     00 94 06 F6 | 	mov	arg02, #0
16ba4     D8 A2 B0 FD | 	call	#_printerror
16ba8     A0 01 90 FD | 	jmp	#LR__1944
16bac                 | LR__1940
16bac                 | ' if numpar=0 then 
16bac     00 A8 0E F2 | 	cmp	local02, #0 wz
16bb0     8C 00 90 5D |  if_ne	jmp	#LR__1941
16bb4     00 C0 1B FF 
16bb8     00 A8 06 F6 | 	mov	local02, ##931135488
16bbc     53 00 00 FF 
16bc0     18 65 06 F1 | 	add	objptr, ##42776
16bc4     32 93 02 FB | 	rdlong	arg01, objptr
16bc8     53 00 00 FF 
16bcc     18 65 86 F1 | 	sub	objptr, ##42776
16bd0     49 93 52 F6 | 	abs	arg01, arg01 wc
16bd4     1F AA C6 C9 |  if_b	decod	local03, #31
16bd8     00 AA 06 36 |  if_ae	mov	local03, #0
16bdc     90 02 B1 FD | 	call	#__system___float_fromuns
16be0     55 7B 62 F5 | 	xor	result1, local03
16be4     3D 93 02 F6 | 	mov	arg01, result1
16be8     FF 7F 23 FF 
16bec     00 94 06 F6 | 	mov	arg02, ##1191181824
16bf0     84 08 B1 FD | 	call	#__system___float_div
16bf4     3D 95 02 F6 | 	mov	arg02, result1
16bf8     54 93 02 F6 | 	mov	arg01, local02
16bfc     A4 02 B1 FD | 	call	#__system___float_add
16c00     3D AD 02 F6 | 	mov	local04, result1
16c04                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16c04     56 93 02 F6 | 	mov	arg01, local04
16c08     1F 92 06 F4 | 	bitl	arg01, #31
16c0c     89 41 1D FF 
16c10     6F 94 06 F6 | 	mov	arg02, ##981668463
16c14     01 96 06 F6 | 	mov	arg03, #1
16c18     8C 0A B1 FD | 	call	#__system___float_cmp
16c1c     00 7A 56 F2 | 	cmps	result1, #0 wc
16c20     00 AC 06 C6 |  if_b	mov	local04, #0
16c24     E7 AC 62 FC | 	wrlong	local04, fp
16c28     08 CE 05 F1 | 	add	fp, #8
16c2c     E7 3C 68 FC | 	wrlong	#30, fp
16c30     08 CE 85 F1 | 	sub	fp, #8
16c34     E7 92 02 F6 | 	mov	arg01, fp
16c38     C4 6A BF FD | 	call	#_push
16c3c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16c3c     0C 01 90 FD | 	jmp	#LR__1944
16c40                 | LR__1941
16c40     2C 6A BF FD | 	call	#_pop
16c44     E7 7A 62 FC | 	wrlong	result1, fp
16c48     04 CE 05 F1 | 	add	fp, #4
16c4c     E7 7C 62 FC | 	wrlong	result2, fp
16c50     04 CE 05 F1 | 	add	fp, #4
16c54     E7 7E 62 FC | 	wrlong	result3, fp
16c58                 | ' t1=pop()
16c58                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16c58     08 CE 85 F1 | 	sub	fp, #8
16c5c     1C 7E 0E F2 | 	cmp	result3, #28 wz
16c60     08 CE 05 51 |  if_ne	add	fp, #8
16c64     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16c68     08 CE 85 51 |  if_ne	sub	fp, #8
16c6c     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16c70     CC 00 90 5D |  if_ne	jmp	#LR__1943
16c74     E7 AC 02 FB | 	rdlong	local04, fp
16c78     54 00 00 FF 
16c7c     E4 64 06 F1 | 	add	objptr, ##43236
16c80     32 AD 62 FC | 	wrlong	local04, objptr
16c84                 | '   q=t1.result.uresult
16c84                 | '   if q<7 then 
16c84     54 00 00 FF 
16c88     E4 64 86 F1 | 	sub	objptr, ##43236
16c8c     07 AC 56 F2 | 	cmps	local04, #7 wc
16c90     9C 00 90 3D |  if_ae	jmp	#LR__1942
16c94     00 C0 1B FF 
16c98     00 AC 06 F6 | 	mov	local04, ##931135488
16c9c     54 00 00 FF 
16ca0     E4 64 06 F1 | 	add	objptr, ##43236
16ca4     32 A9 02 FB | 	rdlong	local02, objptr
16ca8     02 A8 66 F0 | 	shl	local02, #2
16cac     CC 65 86 F1 | 	sub	objptr, #460
16cb0     32 A9 02 F1 | 	add	local02, objptr
16cb4     54 93 02 FB | 	rdlong	arg01, local02
16cb8     53 00 00 FF 
16cbc     18 65 86 F1 | 	sub	objptr, ##42776
16cc0     49 93 52 F6 | 	abs	arg01, arg01 wc
16cc4     1F AA C6 C9 |  if_b	decod	local03, #31
16cc8     00 AA 06 36 |  if_ae	mov	local03, #0
16ccc     A0 01 B1 FD | 	call	#__system___float_fromuns
16cd0     55 7B 62 F5 | 	xor	result1, local03
16cd4     3D 93 02 F6 | 	mov	arg01, result1
16cd8     FF 7F 23 FF 
16cdc     00 94 06 F6 | 	mov	arg02, ##1191181824
16ce0     94 07 B1 FD | 	call	#__system___float_div
16ce4     3D 95 02 F6 | 	mov	arg02, result1
16ce8     56 93 02 F6 | 	mov	arg01, local04
16cec     B4 01 B1 FD | 	call	#__system___float_add
16cf0     3D AD 02 F6 | 	mov	local04, result1
16cf4                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16cf4     56 93 02 F6 | 	mov	arg01, local04
16cf8     1F 92 06 F4 | 	bitl	arg01, #31
16cfc     89 41 1D FF 
16d00     6F 94 06 F6 | 	mov	arg02, ##981668463
16d04     01 96 06 F6 | 	mov	arg03, #1
16d08     9C 09 B1 FD | 	call	#__system___float_cmp
16d0c     00 7A 56 F2 | 	cmps	result1, #0 wc
16d10     00 AC 06 C6 |  if_b	mov	local04, #0
16d14     E7 AC 62 FC | 	wrlong	local04, fp
16d18     08 CE 05 F1 | 	add	fp, #8
16d1c     E7 3C 68 FC | 	wrlong	#30, fp
16d20     08 CE 85 F1 | 	sub	fp, #8
16d24     E7 92 02 F6 | 	mov	arg01, fp
16d28     D4 69 BF FD | 	call	#_push
16d2c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16d2c     1C 00 90 FD | 	jmp	#LR__1944
16d30                 | LR__1942
16d30     29 92 06 F6 | 	mov	arg01, #41
16d34     00 94 06 F6 | 	mov	arg02, #0
16d38     44 A1 B0 FD | 	call	#_printerror
16d3c                 | '      printerror(41) : return
16d3c     0C 00 90 FD | 	jmp	#LR__1944
16d40                 | LR__1943
16d40     29 92 06 F6 | 	mov	arg01, #41
16d44     00 94 06 F6 | 	mov	arg02, #0
16d48     34 A1 B0 FD | 	call	#_printerror
16d4c                 | LR__1944
16d4c     E7 F0 03 F6 | 	mov	ptra, fp
16d50     F2 00 A0 FD | 	call	#popregs_
16d54                 | _do_pady_ret
16d54     2D 00 64 FD | 	ret
16d58                 | 
16d58                 | ' 
16d58                 | ' ' ------------------ padz
16d58                 | ' 
16d58                 | ' sub do_padz
16d58                 | _do_padz
16d58     04 CA 05 F6 | 	mov	COUNT_, #4
16d5c     E8 00 A0 FD | 	call	#pushregs_
16d60     14 F0 07 F1 | 	add	ptra, #20
16d64     4C 00 00 FF 
16d68     24 64 06 F1 | 	add	objptr, ##38948
16d6c     32 A7 02 FB | 	rdlong	local01, objptr
16d70     53 97 02 F6 | 	mov	arg03, local01
16d74     01 96 66 F0 | 	shl	arg03, #1
16d78     53 97 02 F1 | 	add	arg03, local01
16d7c     02 96 66 F0 | 	shl	arg03, #2
16d80     03 00 00 FF 
16d84     04 64 86 F1 | 	sub	objptr, ##1540
16d88     32 97 02 F1 | 	add	arg03, objptr
16d8c     4B A9 02 FB | 	rdlong	local02, arg03
16d90                 | ' 
16d90                 | ' numpar=compiledline(lineptr_e).result.uresult
16d90                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
16d90     02 A8 16 F2 | 	cmp	local02, #2 wc
16d94     49 00 00 FF 
16d98     20 64 86 F1 | 	sub	objptr, ##37408
16d9c     40 00 90 CD |  if_b	jmp	#LR__1950
16da0     00 92 06 F6 | 	mov	arg01, #0
16da4     80 33 B1 FD | 	call	#__system___getiolock_0622
16da8     3D 93 02 F6 | 	mov	arg01, result1
16dac     F4 DD B0 FD | 	call	#__system___lockmem
16db0     99 01 00 FF 
16db4     7D 94 06 F6 | 	mov	arg02, ##@LR__6063
16db8     00 92 06 F6 | 	mov	arg01, #0
16dbc     00 96 06 F6 | 	mov	arg03, #0
16dc0     D4 EA B0 FD | 	call	#__system___basic_print_string
16dc4     00 92 06 F6 | 	mov	arg01, #0
16dc8     5C 33 B1 FD | 	call	#__system___getiolock_0622
16dcc     3D 01 68 FC | 	wrlong	#0, result1
16dd0     27 92 06 F6 | 	mov	arg01, #39
16dd4     00 94 06 F6 | 	mov	arg02, #0
16dd8     A4 A0 B0 FD | 	call	#_printerror
16ddc     A0 01 90 FD | 	jmp	#LR__1954
16de0                 | LR__1950
16de0                 | ' if numpar=0 then 
16de0     00 A8 0E F2 | 	cmp	local02, #0 wz
16de4     8C 00 90 5D |  if_ne	jmp	#LR__1951
16de8     00 C0 1B FF 
16dec     00 A8 06 F6 | 	mov	local02, ##931135488
16df0     53 00 00 FF 
16df4     34 65 06 F1 | 	add	objptr, ##42804
16df8     32 93 02 FB | 	rdlong	arg01, objptr
16dfc     53 00 00 FF 
16e00     34 65 86 F1 | 	sub	objptr, ##42804
16e04     49 93 52 F6 | 	abs	arg01, arg01 wc
16e08     1F AA C6 C9 |  if_b	decod	local03, #31
16e0c     00 AA 06 36 |  if_ae	mov	local03, #0
16e10     5C 00 B1 FD | 	call	#__system___float_fromuns
16e14     55 7B 62 F5 | 	xor	result1, local03
16e18     3D 93 02 F6 | 	mov	arg01, result1
16e1c     FF 7F 23 FF 
16e20     00 94 06 F6 | 	mov	arg02, ##1191181824
16e24     50 06 B1 FD | 	call	#__system___float_div
16e28     3D 95 02 F6 | 	mov	arg02, result1
16e2c     54 93 02 F6 | 	mov	arg01, local02
16e30     70 00 B1 FD | 	call	#__system___float_add
16e34     3D AD 02 F6 | 	mov	local04, result1
16e38                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16e38     56 93 02 F6 | 	mov	arg01, local04
16e3c     1F 92 06 F4 | 	bitl	arg01, #31
16e40     89 41 1D FF 
16e44     6F 94 06 F6 | 	mov	arg02, ##981668463
16e48     01 96 06 F6 | 	mov	arg03, #1
16e4c     58 08 B1 FD | 	call	#__system___float_cmp
16e50     00 7A 56 F2 | 	cmps	result1, #0 wc
16e54     00 AC 06 C6 |  if_b	mov	local04, #0
16e58     E7 AC 62 FC | 	wrlong	local04, fp
16e5c     08 CE 05 F1 | 	add	fp, #8
16e60     E7 3C 68 FC | 	wrlong	#30, fp
16e64     08 CE 85 F1 | 	sub	fp, #8
16e68     E7 92 02 F6 | 	mov	arg01, fp
16e6c     90 68 BF FD | 	call	#_push
16e70                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16e70     0C 01 90 FD | 	jmp	#LR__1954
16e74                 | LR__1951
16e74     F8 67 BF FD | 	call	#_pop
16e78     E7 7A 62 FC | 	wrlong	result1, fp
16e7c     04 CE 05 F1 | 	add	fp, #4
16e80     E7 7C 62 FC | 	wrlong	result2, fp
16e84     04 CE 05 F1 | 	add	fp, #4
16e88     E7 7E 62 FC | 	wrlong	result3, fp
16e8c                 | ' t1=pop()
16e8c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16e8c     08 CE 85 F1 | 	sub	fp, #8
16e90     1C 7E 0E F2 | 	cmp	result3, #28 wz
16e94     08 CE 05 51 |  if_ne	add	fp, #8
16e98     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16e9c     08 CE 85 51 |  if_ne	sub	fp, #8
16ea0     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16ea4     CC 00 90 5D |  if_ne	jmp	#LR__1953
16ea8     E7 AC 02 FB | 	rdlong	local04, fp
16eac     54 00 00 FF 
16eb0     E4 64 06 F1 | 	add	objptr, ##43236
16eb4     32 AD 62 FC | 	wrlong	local04, objptr
16eb8                 | '   q=t1.result.uresult
16eb8                 | '   if q<7 then 
16eb8     54 00 00 FF 
16ebc     E4 64 86 F1 | 	sub	objptr, ##43236
16ec0     07 AC 56 F2 | 	cmps	local04, #7 wc
16ec4     9C 00 90 3D |  if_ae	jmp	#LR__1952
16ec8     00 C0 1B FF 
16ecc     00 AC 06 F6 | 	mov	local04, ##931135488
16ed0     54 00 00 FF 
16ed4     E4 64 06 F1 | 	add	objptr, ##43236
16ed8     32 A9 02 FB | 	rdlong	local02, objptr
16edc     02 A8 66 F0 | 	shl	local02, #2
16ee0     B0 65 86 F1 | 	sub	objptr, #432
16ee4     32 A9 02 F1 | 	add	local02, objptr
16ee8     54 93 02 FB | 	rdlong	arg01, local02
16eec     53 00 00 FF 
16ef0     34 65 86 F1 | 	sub	objptr, ##42804
16ef4     49 93 52 F6 | 	abs	arg01, arg01 wc
16ef8     1F AA C6 C9 |  if_b	decod	local03, #31
16efc     00 AA 06 36 |  if_ae	mov	local03, #0
16f00     6C FF B0 FD | 	call	#__system___float_fromuns
16f04     55 7B 62 F5 | 	xor	result1, local03
16f08     3D 93 02 F6 | 	mov	arg01, result1
16f0c     FF 7F 23 FF 
16f10     00 94 06 F6 | 	mov	arg02, ##1191181824
16f14     60 05 B1 FD | 	call	#__system___float_div
16f18     3D 95 02 F6 | 	mov	arg02, result1
16f1c     56 93 02 F6 | 	mov	arg01, local04
16f20     80 FF B0 FD | 	call	#__system___float_add
16f24     3D AD 02 F6 | 	mov	local04, result1
16f28                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16f28     56 93 02 F6 | 	mov	arg01, local04
16f2c     1F 92 06 F4 | 	bitl	arg01, #31
16f30     89 41 1D FF 
16f34     6F 94 06 F6 | 	mov	arg02, ##981668463
16f38     01 96 06 F6 | 	mov	arg03, #1
16f3c     68 07 B1 FD | 	call	#__system___float_cmp
16f40     00 7A 56 F2 | 	cmps	result1, #0 wc
16f44     00 AC 06 C6 |  if_b	mov	local04, #0
16f48     E7 AC 62 FC | 	wrlong	local04, fp
16f4c     08 CE 05 F1 | 	add	fp, #8
16f50     E7 3C 68 FC | 	wrlong	#30, fp
16f54     08 CE 85 F1 | 	sub	fp, #8
16f58     E7 92 02 F6 | 	mov	arg01, fp
16f5c     A0 67 BF FD | 	call	#_push
16f60                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16f60     1C 00 90 FD | 	jmp	#LR__1954
16f64                 | LR__1952
16f64     29 92 06 F6 | 	mov	arg01, #41
16f68     00 94 06 F6 | 	mov	arg02, #0
16f6c     10 9F B0 FD | 	call	#_printerror
16f70                 | '      printerror(41) : return
16f70     0C 00 90 FD | 	jmp	#LR__1954
16f74                 | LR__1953
16f74     29 92 06 F6 | 	mov	arg01, #41
16f78     00 94 06 F6 | 	mov	arg02, #0
16f7c     00 9F B0 FD | 	call	#_printerror
16f80                 | LR__1954
16f80     E7 F0 03 F6 | 	mov	ptra, fp
16f84     F2 00 A0 FD | 	call	#popregs_
16f88                 | _do_padz_ret
16f88     2D 00 64 FD | 	ret
16f8c                 | 
16f8c                 | ' 
16f8c                 | ' '-------------------- paper
16f8c                 | ' 
16f8c                 | ' sub do_paper
16f8c                 | _do_paper
16f8c     03 CA 05 F6 | 	mov	COUNT_, #3
16f90     E8 00 A0 FD | 	call	#pushregs_
16f94     D8 66 BF FD | 	call	#_pop
16f98     3D A7 02 F6 | 	mov	local01, result1
16f9c     3E A9 02 F6 | 	mov	local02, result2
16fa0     3F AB 02 F6 | 	mov	local03, result3
16fa4                 | ' t1=pop() 
16fa4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16fa4     1E AA 0E F2 | 	cmp	local03, #30 wz
16fa8     10 00 90 5D |  if_ne	jmp	#LR__1960
16fac     53 93 02 F6 | 	mov	arg01, local01
16fb0     00 94 06 F6 | 	mov	arg02, #0
16fb4     84 07 B1 FD | 	call	#__system___float_tointeger
16fb8     3D A7 02 F6 | 	mov	local01, result1
16fbc                 | LR__1960
16fbc                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16fbc     1F AA 0E F2 | 	cmp	local03, #31 wz
16fc0     18 00 90 5D |  if_ne	jmp	#LR__1961
16fc4     53 93 02 F6 | 	mov	arg01, local01
16fc8     C4 0A B1 FD | 	call	#__system____builtin_atof
16fcc     3D 93 02 F6 | 	mov	arg01, result1
16fd0     00 94 06 F6 | 	mov	arg02, #0
16fd4     64 07 B1 FD | 	call	#__system___float_tointeger
16fd8     3D A7 02 F6 | 	mov	local01, result1
16fdc                 | LR__1961
16fdc     38 00 00 FF 
16fe0     DC 65 06 F1 | 	add	objptr, ##29148
16fe4     32 A7 62 FC | 	wrlong	local01, objptr
16fe8     04 64 06 F1 | 	add	objptr, #4
16fec     32 93 02 FB | 	rdlong	arg01, objptr
16ff0                 | ' 
16ff0                 | ' write_color:=ff
16ff0     38 00 00 FF 
16ff4     9F 65 86 F1 | 	sub	objptr, ##29087
16ff8     32 93 62 FC | 	wrlong	arg01, objptr
16ffc                 | ' write_background:=bb
16ffc     04 64 06 F1 | 	add	objptr, #4
17000     32 A7 62 FC | 	wrlong	local01, objptr
17004     45 64 86 F1 | 	sub	objptr, #69
17008     E7 F0 03 F6 | 	mov	ptra, fp
1700c     F2 00 A0 FD | 	call	#popregs_
17010                 | _do_paper_ret
17010     2D 00 64 FD | 	ret
17014                 | 
17014                 | ' 
17014                 | ' '-------------------- peek
17014                 | ' 
17014                 | ' sub do_peek
17014                 | _do_peek
17014     01 CA 05 F6 | 	mov	COUNT_, #1
17018     E8 00 A0 FD | 	call	#pushregs_
1701c     14 F0 07 F1 | 	add	ptra, #20
17020     4C 66 BF FD | 	call	#_pop
17024     E7 7A 62 FC | 	wrlong	result1, fp
17028     04 CE 05 F1 | 	add	fp, #4
1702c     E7 7C 62 FC | 	wrlong	result2, fp
17030     04 CE 05 F1 | 	add	fp, #4
17034     E7 7E 62 FC | 	wrlong	result3, fp
17038     08 CE 85 F1 | 	sub	fp, #8
1703c     E7 92 02 F6 | 	mov	arg01, fp
17040     08 68 BF FD | 	call	#_converttoint
17044     3D 93 02 F6 | 	mov	arg01, result1
17048                 | ' 
17048                 | ' t1=pop()
17048                 | ' a=converttoint(t1)
17048                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
17048     00 04 00 FF 
1704c     00 92 16 F2 | 	cmp	arg01, ##524288 wc
17050     49 A7 C2 CA |  if_b	rdbyte	local01, arg01
17054     08 00 90 CD |  if_b	jmp	#LR__1970
17058     94 A0 B0 FD | 	call	#_pspeek
1705c     3D A7 E2 F8 | 	getbyte	local01, result1, #0
17060                 | LR__1970
17060     08 CE 05 F1 | 	add	fp, #8
17064     E7 3A 68 FC | 	wrlong	#29, fp
17068     08 CE 85 F1 | 	sub	fp, #8
1706c     E7 A6 62 FC | 	wrlong	local01, fp
17070     E7 92 02 F6 | 	mov	arg01, fp
17074     88 66 BF FD | 	call	#_push
17078     E7 F0 03 F6 | 	mov	ptra, fp
1707c     F2 00 A0 FD | 	call	#popregs_
17080                 | _do_peek_ret
17080     2D 00 64 FD | 	ret
17084                 | 
17084                 | ' 
17084                 | ' '-------------------- pinfloat
17084                 | ' 
17084                 | ' sub do_pinfloat
17084                 | _do_pinfloat
17084     00 CA 05 F6 | 	mov	COUNT_, #0
17088     E8 00 A0 FD | 	call	#pushregs_
1708c     0C F0 07 F1 | 	add	ptra, #12
17090     DC 65 BF FD | 	call	#_pop
17094     E7 7A 62 FC | 	wrlong	result1, fp
17098     04 CE 05 F1 | 	add	fp, #4
1709c     E7 7C 62 FC | 	wrlong	result2, fp
170a0     04 CE 05 F1 | 	add	fp, #4
170a4     E7 7E 62 FC | 	wrlong	result3, fp
170a8     08 CE 85 F1 | 	sub	fp, #8
170ac     E7 92 02 F6 | 	mov	arg01, fp
170b0     98 67 BF FD | 	call	#_converttoint
170b4     50 7A 62 FD | 	fltl	result1
170b8     E7 F0 03 F6 | 	mov	ptra, fp
170bc     F2 00 A0 FD | 	call	#popregs_
170c0                 | _do_pinfloat_ret
170c0     2D 00 64 FD | 	ret
170c4                 | 
170c4                 | ' 
170c4                 | ' '-------------------- pinhi
170c4                 | ' 
170c4                 | ' sub do_pinhi
170c4                 | _do_pinhi
170c4     00 CA 05 F6 | 	mov	COUNT_, #0
170c8     E8 00 A0 FD | 	call	#pushregs_
170cc     0C F0 07 F1 | 	add	ptra, #12
170d0     9C 65 BF FD | 	call	#_pop
170d4     E7 7A 62 FC | 	wrlong	result1, fp
170d8     04 CE 05 F1 | 	add	fp, #4
170dc     E7 7C 62 FC | 	wrlong	result2, fp
170e0     04 CE 05 F1 | 	add	fp, #4
170e4     E7 7E 62 FC | 	wrlong	result3, fp
170e8     08 CE 85 F1 | 	sub	fp, #8
170ec     E7 92 02 F6 | 	mov	arg01, fp
170f0     58 67 BF FD | 	call	#_converttoint
170f4     59 7A 62 FD | 	drvh	result1
170f8     E7 F0 03 F6 | 	mov	ptra, fp
170fc     F2 00 A0 FD | 	call	#popregs_
17100                 | _do_pinhi_ret
17100     2D 00 64 FD | 	ret
17104                 | 
17104                 | ' 
17104                 | ' '-------------------- pinlo
17104                 | ' 
17104                 | ' sub do_pinlo
17104                 | _do_pinlo
17104     00 CA 05 F6 | 	mov	COUNT_, #0
17108     E8 00 A0 FD | 	call	#pushregs_
1710c     0C F0 07 F1 | 	add	ptra, #12
17110     5C 65 BF FD | 	call	#_pop
17114     E7 7A 62 FC | 	wrlong	result1, fp
17118     04 CE 05 F1 | 	add	fp, #4
1711c     E7 7C 62 FC | 	wrlong	result2, fp
17120     04 CE 05 F1 | 	add	fp, #4
17124     E7 7E 62 FC | 	wrlong	result3, fp
17128     08 CE 85 F1 | 	sub	fp, #8
1712c     E7 92 02 F6 | 	mov	arg01, fp
17130     18 67 BF FD | 	call	#_converttoint
17134     58 7A 62 FD | 	drvl	result1
17138     E7 F0 03 F6 | 	mov	ptra, fp
1713c     F2 00 A0 FD | 	call	#popregs_
17140                 | _do_pinlo_ret
17140     2D 00 64 FD | 	ret
17144                 | 
17144                 | ' 
17144                 | ' '-------------------- pinread
17144                 | ' 
17144                 | ' sub do_pinread
17144                 | _do_pinread
17144     00 CA 05 F6 | 	mov	COUNT_, #0
17148     E8 00 A0 FD | 	call	#pushregs_
1714c     0C F0 07 F1 | 	add	ptra, #12
17150     1C 65 BF FD | 	call	#_pop
17154     E7 7A 62 FC | 	wrlong	result1, fp
17158     04 CE 05 F1 | 	add	fp, #4
1715c     E7 7C 62 FC | 	wrlong	result2, fp
17160     04 CE 05 F1 | 	add	fp, #4
17164     E7 7E 62 FC | 	wrlong	result3, fp
17168     08 CE 85 F1 | 	sub	fp, #8
1716c     E7 92 02 F6 | 	mov	arg01, fp
17170     D8 66 BF FD | 	call	#_converttoint
17174     3D 93 02 F6 | 	mov	arg01, result1
17178     20 92 CE F7 | 	test	arg01, #32 wz
1717c     FF 7B 02 56 |  if_ne	mov	result1, inb
17180     FE 7B 02 A6 |  if_e	mov	result1, ina
17184     49 7B 42 F0 | 	shr	result1, arg01
17188     06 92 46 F0 | 	shr	arg01, #6
1718c     49 7B 42 F7 | 	zerox	result1, arg01
17190     54 00 00 FF 
17194     EC 64 06 F1 | 	add	objptr, ##43244
17198     32 7B 62 FC | 	wrlong	result1, objptr
1719c     54 00 00 FF 
171a0     EC 64 86 F1 | 	sub	objptr, ##43244
171a4     08 CE 05 F1 | 	add	fp, #8
171a8     E7 3A 68 FC | 	wrlong	#29, fp
171ac     08 CE 85 F1 | 	sub	fp, #8
171b0     E7 08 68 FC | 	wrlong	#4, fp
171b4     E7 92 02 F6 | 	mov	arg01, fp
171b8     44 65 BF FD | 	call	#_push
171bc     E7 F0 03 F6 | 	mov	ptra, fp
171c0     F2 00 A0 FD | 	call	#popregs_
171c4                 | _do_pinread_ret
171c4     2D 00 64 FD | 	ret
171c8                 | 
171c8                 | ' 
171c8                 | ' '-------------------- pinstart
171c8                 | ' 
171c8                 | ' sub do_pinstart
171c8                 | _do_pinstart
171c8     03 CA 05 F6 | 	mov	COUNT_, #3
171cc     E8 00 A0 FD | 	call	#pushregs_
171d0     30 F0 07 F1 | 	add	ptra, #48
171d4     98 64 BF FD | 	call	#_pop
171d8     3D 97 02 F6 | 	mov	arg03, result1
171dc     3E 95 02 F6 | 	mov	arg02, result2
171e0     3F 99 02 F6 | 	mov	arg04, result3
171e4     E7 96 62 FC | 	wrlong	arg03, fp
171e8     04 CE 05 F1 | 	add	fp, #4
171ec     E7 94 62 FC | 	wrlong	arg02, fp
171f0     04 CE 05 F1 | 	add	fp, #4
171f4     E7 98 62 FC | 	wrlong	arg04, fp
171f8     08 CE 85 F1 | 	sub	fp, #8
171fc     70 64 BF FD | 	call	#_pop
17200     3D 97 02 F6 | 	mov	arg03, result1
17204     3E 95 02 F6 | 	mov	arg02, result2
17208     3F 99 02 F6 | 	mov	arg04, result3
1720c     0C CE 05 F1 | 	add	fp, #12
17210     E7 96 62 FC | 	wrlong	arg03, fp
17214     04 CE 05 F1 | 	add	fp, #4
17218     E7 94 62 FC | 	wrlong	arg02, fp
1721c     04 CE 05 F1 | 	add	fp, #4
17220     E7 98 62 FC | 	wrlong	arg04, fp
17224     14 CE 85 F1 | 	sub	fp, #20
17228     44 64 BF FD | 	call	#_pop
1722c     3D 97 02 F6 | 	mov	arg03, result1
17230     3E 95 02 F6 | 	mov	arg02, result2
17234     3F 99 02 F6 | 	mov	arg04, result3
17238     18 CE 05 F1 | 	add	fp, #24
1723c     E7 96 62 FC | 	wrlong	arg03, fp
17240     04 CE 05 F1 | 	add	fp, #4
17244     E7 94 62 FC | 	wrlong	arg02, fp
17248     04 CE 05 F1 | 	add	fp, #4
1724c     E7 98 62 FC | 	wrlong	arg04, fp
17250     20 CE 85 F1 | 	sub	fp, #32
17254     18 64 BF FD | 	call	#_pop
17258     3F 97 02 F6 | 	mov	arg03, result3
1725c     24 CE 05 F1 | 	add	fp, #36
17260     E7 7A 62 FC | 	wrlong	result1, fp
17264     04 CE 05 F1 | 	add	fp, #4
17268     E7 7C 62 FC | 	wrlong	result2, fp
1726c     04 CE 05 F1 | 	add	fp, #4
17270     E7 96 62 FC | 	wrlong	arg03, fp
17274     08 CE 85 F1 | 	sub	fp, #8
17278     E7 92 02 F6 | 	mov	arg01, fp
1727c     24 CE 85 F1 | 	sub	fp, #36
17280     C8 65 BF FD | 	call	#_converttoint
17284     3D A7 02 F6 | 	mov	local01, result1
17288     E7 92 02 F6 | 	mov	arg01, fp
1728c     18 92 06 F1 | 	add	arg01, #24
17290     B8 65 BF FD | 	call	#_converttoint
17294     3D A9 02 F6 | 	mov	local02, result1
17298     E7 92 02 F6 | 	mov	arg01, fp
1729c     0C 92 06 F1 | 	add	arg01, #12
172a0     A8 65 BF FD | 	call	#_converttoint
172a4     3D AB 02 F6 | 	mov	local03, result1
172a8     E7 92 02 F6 | 	mov	arg01, fp
172ac     9C 65 BF FD | 	call	#_converttoint
172b0     40 A6 62 FD | 	dirl	local01
172b4     53 A9 02 FC | 	wrpin	local02, local01
172b8     53 AB 12 FC | 	wxpin	local03, local01
172bc     53 7B 22 FC | 	wypin	result1, local01
172c0     41 A6 62 FD | 	dirh	local01
172c4     E7 F0 03 F6 | 	mov	ptra, fp
172c8     F2 00 A0 FD | 	call	#popregs_
172cc                 | _do_pinstart_ret
172cc     2D 00 64 FD | 	ret
172d0                 | 
172d0                 | ' 
172d0                 | ' '-------------------- pintoggle
172d0                 | ' 
172d0                 | ' sub do_pintoggle
172d0                 | _do_pintoggle
172d0     00 CA 05 F6 | 	mov	COUNT_, #0
172d4     E8 00 A0 FD | 	call	#pushregs_
172d8     0C F0 07 F1 | 	add	ptra, #12
172dc     90 63 BF FD | 	call	#_pop
172e0     E7 7A 62 FC | 	wrlong	result1, fp
172e4     04 CE 05 F1 | 	add	fp, #4
172e8     E7 7C 62 FC | 	wrlong	result2, fp
172ec     04 CE 05 F1 | 	add	fp, #4
172f0     E7 7E 62 FC | 	wrlong	result3, fp
172f4     08 CE 85 F1 | 	sub	fp, #8
172f8     E7 92 02 F6 | 	mov	arg01, fp
172fc     4C 65 BF FD | 	call	#_converttoint
17300     5F 7A 62 FD | 	drvnot	result1
17304     E7 F0 03 F6 | 	mov	ptra, fp
17308     F2 00 A0 FD | 	call	#popregs_
1730c                 | _do_pintoggle_ret
1730c     2D 00 64 FD | 	ret
17310                 | 
17310                 | ' 
17310                 | ' '-------------------- pinwrite
17310                 | ' 
17310                 | ' sub do_pinwrite
17310                 | _do_pinwrite
17310     01 CA 05 F6 | 	mov	COUNT_, #1
17314     E8 00 A0 FD | 	call	#pushregs_
17318     18 F0 07 F1 | 	add	ptra, #24
1731c     50 63 BF FD | 	call	#_pop
17320     3D 95 02 F6 | 	mov	arg02, result1
17324     3E 93 02 F6 | 	mov	arg01, result2
17328     3F A7 02 F6 | 	mov	local01, result3
1732c     E7 94 62 FC | 	wrlong	arg02, fp
17330     04 CE 05 F1 | 	add	fp, #4
17334     E7 92 62 FC | 	wrlong	arg01, fp
17338     04 CE 05 F1 | 	add	fp, #4
1733c     E7 A6 62 FC | 	wrlong	local01, fp
17340     08 CE 85 F1 | 	sub	fp, #8
17344     28 63 BF FD | 	call	#_pop
17348     3F A7 02 F6 | 	mov	local01, result3
1734c     0C CE 05 F1 | 	add	fp, #12
17350     E7 7A 62 FC | 	wrlong	result1, fp
17354     04 CE 05 F1 | 	add	fp, #4
17358     E7 7C 62 FC | 	wrlong	result2, fp
1735c     04 CE 05 F1 | 	add	fp, #4
17360     E7 A6 62 FC | 	wrlong	local01, fp
17364     08 CE 85 F1 | 	sub	fp, #8
17368     E7 92 02 F6 | 	mov	arg01, fp
1736c     0C CE 85 F1 | 	sub	fp, #12
17370     D8 64 BF FD | 	call	#_converttoint
17374     3D A7 02 F6 | 	mov	local01, result1
17378     E7 92 02 F6 | 	mov	arg01, fp
1737c     CC 64 BF FD | 	call	#_converttoint
17380     3D 95 02 F6 | 	mov	arg02, result1
17384     53 93 02 F6 | 	mov	arg01, local01
17388     CC D9 B0 FD | 	call	#__system___pinwrite
1738c     E7 F0 03 F6 | 	mov	ptra, fp
17390     F2 00 A0 FD | 	call	#popregs_
17394                 | _do_pinwrite_ret
17394     2D 00 64 FD | 	ret
17398                 | 
17398                 | ' 
17398                 | ' '-------------------- play
17398                 | ' 
17398                 | ' sub do_play
17398                 | _do_play
17398     10 CA 05 F6 | 	mov	COUNT_, #16
1739c     E8 00 A0 FD | 	call	#pushregs_
173a0     88 F0 07 F1 | 	add	ptra, #136
173a4     77 CC 21 FF 
173a8     BE A7 06 F6 | 	mov	local01, ##1134096318
173ac                 | ' speed_coeff=305.873
173ac                 | ' 
173ac                 | ' for i=0 to 9 : params(i)=-2.0 : next i
173ac     00 A8 06 F6 | 	mov	local02, #0
173b0     40 CE 05 F1 | 	add	fp, #64
173b4     D7 10 48 FB | 	callpa	#(@LR__1981-@LR__1980)>>2,fcache_load_ptr_
173b8                 | LR__1980
173b8     54 AB 02 F6 | 	mov	local03, local02
173bc     02 AA 66 F0 | 	shl	local03, #2
173c0     E7 AA 02 F1 | 	add	local03, fp
173c4     00 00 E0 FF 
173c8     55 01 68 FC | 	wrlong	##-1073741824, local03
173cc     01 A8 06 F1 | 	add	local02, #1
173d0     0A A8 56 F2 | 	cmps	local02, #10 wc
173d4     E0 FF 9F CD |  if_b	jmp	#LR__1980
173d8                 | LR__1981
173d8     40 CE 85 F1 | 	sub	fp, #64
173dc     4C 00 00 FF 
173e0     24 64 06 F1 | 	add	objptr, ##38948
173e4     32 A9 02 FB | 	rdlong	local02, objptr
173e8     54 AD 02 F6 | 	mov	local04, local02
173ec     01 AC 66 F0 | 	shl	local04, #1
173f0     54 AD 02 F1 | 	add	local04, local02
173f4     02 AC 66 F0 | 	shl	local04, #2
173f8     03 00 00 FF 
173fc     04 64 86 F1 | 	sub	objptr, ##1540
17400     32 AD 02 F1 | 	add	local04, objptr
17404     56 AF 02 FB | 	rdlong	local05, local04
17408                 | ' numpar=compiledline(lineptr_e).result.uresult
17408                 | ' for i=numpar to 1 step -1 
17408     57 A9 02 F6 | 	mov	local02, local05
1740c     49 00 00 FF 
17410     20 64 86 F1 | 	sub	objptr, ##37408
17414                 | LR__1982
17414     58 62 BF FD | 	call	#_pop
17418     68 CE 05 F1 | 	add	fp, #104
1741c     E7 7A 62 FC | 	wrlong	result1, fp
17420     04 CE 05 F1 | 	add	fp, #4
17424     E7 7C 62 FC | 	wrlong	result2, fp
17428     04 CE 05 F1 | 	add	fp, #4
1742c     E7 7E 62 FC | 	wrlong	result3, fp
17430     54 AB 02 F6 | 	mov	local03, local02
17434     01 AA 86 F1 | 	sub	local03, #1
17438     02 AA 66 F0 | 	shl	local03, #2
1743c     30 CE 85 F1 | 	sub	fp, #48
17440     E7 AA 02 F1 | 	add	local03, fp
17444     28 CE 05 F1 | 	add	fp, #40
17448     E7 B0 02 F6 | 	mov	local06, fp
1744c     58 93 02 F6 | 	mov	arg01, local06
17450     68 CE 85 F1 | 	sub	fp, #104
17454     B0 64 BF FD | 	call	#_converttofloat
17458     55 7B 62 FC | 	wrlong	result1, local03
1745c     01 A8 86 F1 | 	sub	local02, #1
17460     01 A8 56 F2 | 	cmps	local02, #1 wc
17464     AC FF 9F 3D |  if_ae	jmp	#LR__1982
17468                 | ' 
17468                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
17468     40 CE 05 F1 | 	add	fp, #64
1746c     E7 92 02 FB | 	rdlong	arg01, fp
17470     40 CE 85 F1 | 	sub	fp, #64
17474     00 94 06 F6 | 	mov	arg02, #0
17478     01 96 06 F6 | 	mov	arg03, #1
1747c     28 02 B1 FD | 	call	#__system___float_cmp
17480     00 7A 56 F2 | 	cmps	result1, #0 wc
17484     00 B2 06 C6 |  if_b	mov	local07, #0
17488     20 00 90 CD |  if_b	jmp	#LR__1983
1748c     40 CE 05 F1 | 	add	fp, #64
17490     E7 92 02 FB | 	rdlong	arg01, fp
17494     40 CE 85 F1 | 	sub	fp, #64
17498     01 94 06 F6 | 	mov	arg02, #1
1749c     9C 02 B1 FD | 	call	#__system___float_tointeger
174a0     3D B3 52 F6 | 	abs	local07, result1 wc
174a4     07 B2 06 F5 | 	and	local07, #7
174a8     59 B3 82 F6 | 	negc	local07, local07
174ac                 | LR__1983
174ac                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
174ac     44 CE 05 F1 | 	add	fp, #68
174b0     E7 92 02 FB | 	rdlong	arg01, fp
174b4     44 CE 85 F1 | 	sub	fp, #68
174b8     00 94 06 F6 | 	mov	arg02, #0
174bc     01 96 06 F6 | 	mov	arg03, #1
174c0     E4 01 B1 FD | 	call	#__system___float_cmp
174c4     00 7A 56 F2 | 	cmps	result1, #0 wc
174c8     28 00 90 3D |  if_ae	jmp	#LR__1984
174cc     59 97 02 F6 | 	mov	arg03, local07
174d0     03 96 66 F0 | 	shl	arg03, #3
174d4     59 97 82 F1 | 	sub	arg03, local07
174d8     02 96 66 F0 | 	shl	arg03, #2
174dc     32 AD 02 F6 | 	mov	local04, objptr
174e0     16 00 00 FF 
174e4     BC AC 06 F1 | 	add	local04, ##11452
174e8     56 97 02 F1 | 	add	arg03, local04
174ec     4B B5 02 FB | 	rdlong	local08, arg03
174f0     30 00 90 FD | 	jmp	#LR__1985
174f4                 | LR__1984
174f4     44 CE 05 F1 | 	add	fp, #68
174f8     E7 B4 02 FB | 	rdlong	local08, fp
174fc     44 CE 85 F1 | 	sub	fp, #68
17500     59 97 02 F6 | 	mov	arg03, local07
17504     03 96 66 F0 | 	shl	arg03, #3
17508     59 97 82 F1 | 	sub	arg03, local07
1750c     02 96 66 F0 | 	shl	arg03, #2
17510     32 AD 02 F6 | 	mov	local04, objptr
17514     16 00 00 FF 
17518     BC AC 06 F1 | 	add	local04, ##11452
1751c     56 97 02 F1 | 	add	arg03, local04
17520     4B B5 62 FC | 	wrlong	local08, arg03
17524                 | LR__1985
17524                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
17524     48 CE 05 F1 | 	add	fp, #72
17528     E7 92 02 FB | 	rdlong	arg01, fp
1752c     48 CE 85 F1 | 	sub	fp, #72
17530     00 94 06 F6 | 	mov	arg02, #0
17534     01 96 06 F6 | 	mov	arg03, #1
17538     6C 01 B1 FD | 	call	#__system___float_cmp
1753c     00 7A 56 F2 | 	cmps	result1, #0 wc
17540     24 00 90 CD |  if_b	jmp	#LR__1986
17544     48 CE 05 F1 | 	add	fp, #72
17548     E7 92 02 FB | 	rdlong	arg01, fp
1754c     48 CE 85 F1 | 	sub	fp, #72
17550     20 0E 23 FF 
17554     00 94 06 F6 | 	mov	arg02, ##1176256512
17558     01 96 66 F6 | 	neg	arg03, #1
1755c     48 01 B1 FD | 	call	#__system___float_cmp
17560     01 7A 56 F2 | 	cmps	result1, #1 wc
17564     30 00 90 CD |  if_b	jmp	#LR__1987
17568                 | LR__1986
17568     59 AD 02 F6 | 	mov	local04, local07
1756c     03 AC 66 F0 | 	shl	local04, #3
17570     59 AD 82 F1 | 	sub	local04, local07
17574     02 AC 66 F0 | 	shl	local04, #2
17578     32 B1 02 F6 | 	mov	local06, objptr
1757c     16 00 00 FF 
17580     BC B0 06 F1 | 	add	local06, ##11452
17584     58 AD 02 F1 | 	add	local04, local06
17588     06 AC 06 F1 | 	add	local04, #6
1758c     56 B7 E2 FA | 	rdword	local09, local04
17590     5B B9 32 F9 | 	getword	local10, local09, #0
17594     40 00 90 FD | 	jmp	#LR__1988
17598                 | LR__1987
17598     48 CE 05 F1 | 	add	fp, #72
1759c     E7 92 02 FB | 	rdlong	arg01, fp
175a0     48 CE 85 F1 | 	sub	fp, #72
175a4     01 94 06 F6 | 	mov	arg02, #1
175a8     90 01 B1 FD | 	call	#__system___float_tointeger
175ac     3D B9 02 F6 | 	mov	local10, result1
175b0     59 97 02 F6 | 	mov	arg03, local07
175b4     03 96 66 F0 | 	shl	arg03, #3
175b8     59 97 82 F1 | 	sub	arg03, local07
175bc     02 96 66 F0 | 	shl	arg03, #2
175c0     32 AD 02 F6 | 	mov	local04, objptr
175c4     16 00 00 FF 
175c8     BC AC 06 F1 | 	add	local04, ##11452
175cc     56 97 02 F1 | 	add	arg03, local04
175d0     06 96 06 F1 | 	add	arg03, #6
175d4     4B B9 52 FC | 	wrword	local10, arg03
175d8                 | LR__1988
175d8                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
175d8     4C CE 05 F1 | 	add	fp, #76
175dc     E7 92 02 FB | 	rdlong	arg01, fp
175e0     4C CE 85 F1 | 	sub	fp, #76
175e4     00 94 06 F6 | 	mov	arg02, #0
175e8     01 96 06 F6 | 	mov	arg03, #1
175ec     B8 00 B1 FD | 	call	#__system___float_cmp
175f0     00 7A 56 F2 | 	cmps	result1, #0 wc
175f4     24 00 90 CD |  if_b	jmp	#LR__1989
175f8     4C CE 05 F1 | 	add	fp, #76
175fc     E7 92 02 FB | 	rdlong	arg01, fp
17600     4C CE 85 F1 | 	sub	fp, #76
17604     89 C1 20 FF 
17608     6F 94 06 F6 | 	mov	arg02, ##1099108975
1760c     01 96 66 F6 | 	neg	arg03, #1
17610     94 00 B1 FD | 	call	#__system___float_cmp
17614     01 7A 56 F2 | 	cmps	result1, #1 wc
17618     30 00 90 CD |  if_b	jmp	#LR__1990
1761c                 | LR__1989
1761c     59 B1 02 F6 | 	mov	local06, local07
17620     03 B0 66 F0 | 	shl	local06, #3
17624     59 B1 82 F1 | 	sub	local06, local07
17628     02 B0 66 F0 | 	shl	local06, #2
1762c     32 AD 02 F6 | 	mov	local04, objptr
17630     16 00 00 FF 
17634     BC AC 06 F1 | 	add	local04, ##11452
17638     56 B1 02 F1 | 	add	local06, local04
1763c     0C B0 06 F1 | 	add	local06, #12
17640     58 B1 02 FB | 	rdlong	local06, local06
17644     58 BB 02 F6 | 	mov	local11, local06
17648     34 00 90 FD | 	jmp	#LR__1991
1764c                 | LR__1990
1764c     4C CE 05 F1 | 	add	fp, #76
17650     E7 BA 02 FB | 	rdlong	local11, fp
17654     4C CE 85 F1 | 	sub	fp, #76
17658     59 97 02 F6 | 	mov	arg03, local07
1765c     03 96 66 F0 | 	shl	arg03, #3
17660     59 97 82 F1 | 	sub	arg03, local07
17664     02 96 66 F0 | 	shl	arg03, #2
17668     32 AD 02 F6 | 	mov	local04, objptr
1766c     16 00 00 FF 
17670     BC AC 06 F1 | 	add	local04, ##11452
17674     56 97 02 F1 | 	add	arg03, local04
17678     0C 96 06 F1 | 	add	arg03, #12
1767c     4B BB 62 FC | 	wrlong	local11, arg03
17680                 | LR__1991
17680                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
17680     50 CE 05 F1 | 	add	fp, #80
17684     E7 92 02 FB | 	rdlong	arg01, fp
17688     50 CE 85 F1 | 	sub	fp, #80
1768c     00 94 06 F6 | 	mov	arg02, #0
17690     01 96 06 F6 | 	mov	arg03, #1
17694     10 00 B1 FD | 	call	#__system___float_cmp
17698     00 7A 56 F2 | 	cmps	result1, #0 wc
1769c     24 00 90 CD |  if_b	jmp	#LR__1992
176a0     50 CE 05 F1 | 	add	fp, #80
176a4     E7 92 02 FB | 	rdlong	arg01, fp
176a8     50 CE 85 F1 | 	sub	fp, #80
176ac     00 00 21 FF 
176b0     00 94 06 F6 | 	mov	arg02, ##1107296256
176b4     01 96 66 F6 | 	neg	arg03, #1
176b8     EC FF B0 FD | 	call	#__system___float_cmp
176bc     01 7A 56 F2 | 	cmps	result1, #1 wc
176c0     30 00 90 CD |  if_b	jmp	#LR__1993
176c4                 | LR__1992
176c4     59 AD 02 F6 | 	mov	local04, local07
176c8     03 AC 66 F0 | 	shl	local04, #3
176cc     59 AD 82 F1 | 	sub	local04, local07
176d0     02 AC 66 F0 | 	shl	local04, #2
176d4     32 B1 02 F6 | 	mov	local06, objptr
176d8     16 00 00 FF 
176dc     BC B0 06 F1 | 	add	local06, ##11452
176e0     58 AD 02 F1 | 	add	local04, local06
176e4     04 AC 06 F1 | 	add	local04, #4
176e8     56 B7 C2 FA | 	rdbyte	local09, local04
176ec     5B BD E2 F8 | 	getbyte	local12, local09, #0
176f0     40 00 90 FD | 	jmp	#LR__1994
176f4                 | LR__1993
176f4     50 CE 05 F1 | 	add	fp, #80
176f8     E7 92 02 FB | 	rdlong	arg01, fp
176fc     50 CE 85 F1 | 	sub	fp, #80
17700     01 94 06 F6 | 	mov	arg02, #1
17704     34 00 B1 FD | 	call	#__system___float_tointeger
17708     3D BD 02 F6 | 	mov	local12, result1
1770c     59 97 02 F6 | 	mov	arg03, local07
17710     03 96 66 F0 | 	shl	arg03, #3
17714     59 97 82 F1 | 	sub	arg03, local07
17718     02 96 66 F0 | 	shl	arg03, #2
1771c     32 AD 02 F6 | 	mov	local04, objptr
17720     16 00 00 FF 
17724     BC AC 06 F1 | 	add	local04, ##11452
17728     56 97 02 F1 | 	add	arg03, local04
1772c     04 96 06 F1 | 	add	arg03, #4
17730     4B BD 42 FC | 	wrbyte	local12, arg03
17734                 | LR__1994
17734                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
17734     54 CE 05 F1 | 	add	fp, #84
17738     E7 92 02 FB | 	rdlong	arg01, fp
1773c     54 CE 85 F1 | 	sub	fp, #84
17740     00 94 06 F6 | 	mov	arg02, #0
17744     01 96 06 F6 | 	mov	arg03, #1
17748     5C FF B0 FD | 	call	#__system___float_cmp
1774c     00 7A 56 F2 | 	cmps	result1, #0 wc
17750     24 00 90 CD |  if_b	jmp	#LR__1995
17754     54 CE 05 F1 | 	add	fp, #84
17758     E7 92 02 FB | 	rdlong	arg01, fp
1775c     54 CE 85 F1 | 	sub	fp, #84
17760     00 80 20 FF 
17764     00 94 06 F6 | 	mov	arg02, ##1090519040
17768     01 96 66 F6 | 	neg	arg03, #1
1776c     38 FF B0 FD | 	call	#__system___float_cmp
17770     01 7A 56 F2 | 	cmps	result1, #1 wc
17774     30 00 90 CD |  if_b	jmp	#LR__1996
17778                 | LR__1995
17778     59 AD 02 F6 | 	mov	local04, local07
1777c     03 AC 66 F0 | 	shl	local04, #3
17780     59 AD 82 F1 | 	sub	local04, local07
17784     02 AC 66 F0 | 	shl	local04, #2
17788     32 B1 02 F6 | 	mov	local06, objptr
1778c     16 00 00 FF 
17790     BC B0 06 F1 | 	add	local06, ##11452
17794     58 AD 02 F1 | 	add	local04, local06
17798     05 AC 06 F1 | 	add	local04, #5
1779c     56 B7 C2 FA | 	rdbyte	local09, local04
177a0     5B BF E2 F8 | 	getbyte	local13, local09, #0
177a4     40 00 90 FD | 	jmp	#LR__1997
177a8                 | LR__1996
177a8     54 CE 05 F1 | 	add	fp, #84
177ac     E7 92 02 FB | 	rdlong	arg01, fp
177b0     54 CE 85 F1 | 	sub	fp, #84
177b4     01 94 06 F6 | 	mov	arg02, #1
177b8     80 FF B0 FD | 	call	#__system___float_tointeger
177bc     3D BF 02 F6 | 	mov	local13, result1
177c0     59 97 02 F6 | 	mov	arg03, local07
177c4     03 96 66 F0 | 	shl	arg03, #3
177c8     59 97 82 F1 | 	sub	arg03, local07
177cc     02 96 66 F0 | 	shl	arg03, #2
177d0     32 AD 02 F6 | 	mov	local04, objptr
177d4     16 00 00 FF 
177d8     BC AC 06 F1 | 	add	local04, ##11452
177dc     56 97 02 F1 | 	add	arg03, local04
177e0     05 96 06 F1 | 	add	arg03, #5
177e4     4B BF 42 FC | 	wrbyte	local13, arg03
177e8                 | LR__1997
177e8                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
177e8     58 CE 05 F1 | 	add	fp, #88
177ec     E7 92 02 FB | 	rdlong	arg01, fp
177f0     58 CE 85 F1 | 	sub	fp, #88
177f4     00 94 06 F6 | 	mov	arg02, #0
177f8     01 96 06 F6 | 	mov	arg03, #1
177fc     A8 FE B0 FD | 	call	#__system___float_cmp
17800     00 7A 56 F2 | 	cmps	result1, #0 wc
17804     24 00 90 CD |  if_b	jmp	#LR__1998
17808     58 CE 05 F1 | 	add	fp, #88
1780c     E7 92 02 FB | 	rdlong	arg01, fp
17810     58 CE 85 F1 | 	sub	fp, #88
17814     00 3D 22 FF 
17818     00 94 06 F6 | 	mov	arg02, ##1148846080
1781c     01 96 66 F6 | 	neg	arg03, #1
17820     84 FE B0 FD | 	call	#__system___float_cmp
17824     01 7A 56 F2 | 	cmps	result1, #1 wc
17828     2C 00 90 CD |  if_b	jmp	#LR__1999
1782c                 | LR__1998
1782c     59 B1 02 F6 | 	mov	local06, local07
17830     03 B0 66 F0 | 	shl	local06, #3
17834     59 B1 82 F1 | 	sub	local06, local07
17838     02 B0 66 F0 | 	shl	local06, #2
1783c     32 AD 02 F6 | 	mov	local04, objptr
17840     16 00 00 FF 
17844     BC AC 06 F1 | 	add	local04, ##11452
17848     56 B1 02 F1 | 	add	local06, local04
1784c     08 B0 06 F1 | 	add	local06, #8
17850     58 C1 02 FB | 	rdlong	local14, local06
17854     34 00 90 FD | 	jmp	#LR__2000
17858                 | LR__1999
17858     58 CE 05 F1 | 	add	fp, #88
1785c     E7 C0 02 FB | 	rdlong	local14, fp
17860     58 CE 85 F1 | 	sub	fp, #88
17864     59 B7 02 F6 | 	mov	local09, local07
17868     03 B6 66 F0 | 	shl	local09, #3
1786c     59 B7 82 F1 | 	sub	local09, local07
17870     02 B6 66 F0 | 	shl	local09, #2
17874     32 AD 02 F6 | 	mov	local04, objptr
17878     16 00 00 FF 
1787c     BC AC 06 F1 | 	add	local04, ##11452
17880     56 B7 02 F1 | 	add	local09, local04
17884     08 B6 06 F1 | 	add	local09, #8
17888     5B C1 62 FC | 	wrlong	local14, local09
1788c                 | LR__2000
1788c                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
1788c     5C CE 05 F1 | 	add	fp, #92
17890     E7 92 02 FB | 	rdlong	arg01, fp
17894     5C CE 85 F1 | 	sub	fp, #92
17898     00 C0 5F FF 
1789c     00 94 06 F6 | 	mov	arg02, ##-1082130432
178a0     01 96 06 F6 | 	mov	arg03, #1
178a4     00 FE B0 FD | 	call	#__system___float_cmp
178a8     00 7A 56 F2 | 	cmps	result1, #0 wc
178ac     24 00 90 CD |  if_b	jmp	#LR__2001
178b0     5C CE 05 F1 | 	add	fp, #92
178b4     E7 92 02 FB | 	rdlong	arg01, fp
178b8     5C CE 85 F1 | 	sub	fp, #92
178bc     00 C0 1F FF 
178c0     00 94 06 F6 | 	mov	arg02, ##1065353216
178c4     01 96 66 F6 | 	neg	arg03, #1
178c8     DC FD B0 FD | 	call	#__system___float_cmp
178cc     01 7A 56 F2 | 	cmps	result1, #1 wc
178d0     2C 00 90 CD |  if_b	jmp	#LR__2002
178d4                 | LR__2001
178d4     59 B7 02 F6 | 	mov	local09, local07
178d8     03 B6 66 F0 | 	shl	local09, #3
178dc     59 B7 82 F1 | 	sub	local09, local07
178e0     02 B6 66 F0 | 	shl	local09, #2
178e4     32 AD 02 F6 | 	mov	local04, objptr
178e8     16 00 00 FF 
178ec     BC AC 06 F1 | 	add	local04, ##11452
178f0     56 B7 02 F1 | 	add	local09, local04
178f4     10 B6 06 F1 | 	add	local09, #16
178f8     5B C3 02 FB | 	rdlong	local15, local09
178fc     34 00 90 FD | 	jmp	#LR__2003
17900                 | LR__2002
17900     5C CE 05 F1 | 	add	fp, #92
17904     E7 C2 02 FB | 	rdlong	local15, fp
17908     5C CE 85 F1 | 	sub	fp, #92
1790c     59 B7 02 F6 | 	mov	local09, local07
17910     03 B6 66 F0 | 	shl	local09, #3
17914     59 B7 82 F1 | 	sub	local09, local07
17918     02 B6 66 F0 | 	shl	local09, #2
1791c     32 AD 02 F6 | 	mov	local04, objptr
17920     16 00 00 FF 
17924     BC AC 06 F1 | 	add	local04, ##11452
17928     56 B7 02 F1 | 	add	local09, local04
1792c     10 B6 06 F1 | 	add	local09, #16
17930     5B C3 62 FC | 	wrlong	local15, local09
17934                 | LR__2003
17934                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
17934     60 CE 05 F1 | 	add	fp, #96
17938     E7 92 02 FB | 	rdlong	arg01, fp
1793c     60 CE 85 F1 | 	sub	fp, #96
17940     00 94 06 F6 | 	mov	arg02, #0
17944     01 96 06 F6 | 	mov	arg03, #1
17948     5C FD B0 FD | 	call	#__system___float_cmp
1794c     00 7A 56 F2 | 	cmps	result1, #0 wc
17950     24 00 90 CD |  if_b	jmp	#LR__2004
17954     60 CE 05 F1 | 	add	fp, #96
17958     E7 92 02 FB | 	rdlong	arg01, fp
1795c     60 CE 85 F1 | 	sub	fp, #96
17960     80 BF 21 FF 
17964     00 94 06 F6 | 	mov	arg02, ##1132396544
17968     01 96 66 F6 | 	neg	arg03, #1
1796c     38 FD B0 FD | 	call	#__system___float_cmp
17970     01 7A 56 F2 | 	cmps	result1, #1 wc
17974     2C 00 90 CD |  if_b	jmp	#LR__2005
17978                 | LR__2004
17978     59 AD 02 F6 | 	mov	local04, local07
1797c     03 AC 66 F0 | 	shl	local04, #3
17980     59 AD 82 F1 | 	sub	local04, local07
17984     02 AC 66 F0 | 	shl	local04, #2
17988     32 B1 02 F6 | 	mov	local06, objptr
1798c     16 00 00 FF 
17990     BC B0 06 F1 | 	add	local06, ##11452
17994     58 AD 02 F1 | 	add	local04, local06
17998     14 AC 06 F1 | 	add	local04, #20
1799c     56 C5 E2 FA | 	rdword	local16, local04
179a0     40 00 90 FD | 	jmp	#LR__2006
179a4                 | LR__2005
179a4     60 CE 05 F1 | 	add	fp, #96
179a8     E7 92 02 FB | 	rdlong	arg01, fp
179ac     60 CE 85 F1 | 	sub	fp, #96
179b0     01 94 06 F6 | 	mov	arg02, #1
179b4     84 FD B0 FD | 	call	#__system___float_tointeger
179b8     3D C5 02 F6 | 	mov	local16, result1
179bc     59 B7 02 F6 | 	mov	local09, local07
179c0     03 B6 66 F0 | 	shl	local09, #3
179c4     59 B7 82 F1 | 	sub	local09, local07
179c8     02 B6 66 F0 | 	shl	local09, #2
179cc     32 AD 02 F6 | 	mov	local04, objptr
179d0     16 00 00 FF 
179d4     BC AC 06 F1 | 	add	local04, ##11452
179d8     56 B7 02 F1 | 	add	local09, local04
179dc     14 B6 06 F1 | 	add	local09, #20
179e0     5B C5 52 FC | 	wrword	local16, local09
179e4                 | LR__2006
179e4                 | ' if params(9)<0 orelse params(9)>255 then amode=channels(channel).amode else amode= round(params(9)) : channels(channel).amode=amode
179e4     64 CE 05 F1 | 	add	fp, #100
179e8     E7 92 02 FB | 	rdlong	arg01, fp
179ec     64 CE 85 F1 | 	sub	fp, #100
179f0     00 94 06 F6 | 	mov	arg02, #0
179f4     01 96 06 F6 | 	mov	arg03, #1
179f8     AC FC B0 FD | 	call	#__system___float_cmp
179fc     00 7A 56 F2 | 	cmps	result1, #0 wc
17a00     60 00 90 CD |  if_b	jmp	#LR__2007
17a04     64 CE 05 F1 | 	add	fp, #100
17a08     E7 92 02 FB | 	rdlong	arg01, fp
17a0c     64 CE 85 F1 | 	sub	fp, #100
17a10     80 BF 21 FF 
17a14     00 94 06 F6 | 	mov	arg02, ##1132396544
17a18     01 96 66 F6 | 	neg	arg03, #1
17a1c     88 FC B0 FD | 	call	#__system___float_cmp
17a20     01 7A 56 F2 | 	cmps	result1, #1 wc
17a24     3C 00 90 3D |  if_ae	jmp	#LR__2007
17a28     64 CE 05 F1 | 	add	fp, #100
17a2c     E7 92 02 FB | 	rdlong	arg01, fp
17a30     64 CE 85 F1 | 	sub	fp, #100
17a34     01 94 06 F6 | 	mov	arg02, #1
17a38     00 FD B0 FD | 	call	#__system___float_tointeger
17a3c     59 B7 02 F6 | 	mov	local09, local07
17a40     03 B6 66 F0 | 	shl	local09, #3
17a44     59 B7 82 F1 | 	sub	local09, local07
17a48     02 B6 66 F0 | 	shl	local09, #2
17a4c     32 AD 02 F6 | 	mov	local04, objptr
17a50     16 00 00 FF 
17a54     BC AC 06 F1 | 	add	local04, ##11452
17a58     56 B7 02 F1 | 	add	local09, local04
17a5c     16 B6 06 F1 | 	add	local09, #22
17a60     5B 7B 52 FC | 	wrword	result1, local09
17a64                 | LR__2007
17a64                 | ' print wave
17a64     00 92 06 F6 | 	mov	arg01, #0
17a68     BC 26 B1 FD | 	call	#__system___getiolock_0622
17a6c     3D 93 02 F6 | 	mov	arg01, result1
17a70     30 D1 B0 FD | 	call	#__system___lockmem
17a74     00 92 06 F6 | 	mov	arg01, #0
17a78     5E 95 02 F6 | 	mov	arg02, local12
17a7c     00 96 06 F6 | 	mov	arg03, #0
17a80     0A 98 06 F6 | 	mov	arg04, #10
17a84     54 DE B0 FD | 	call	#__system___basic_print_integer
17a88     00 92 06 F6 | 	mov	arg01, #0
17a8c     0A 94 06 F6 | 	mov	arg02, #10
17a90     00 96 06 F6 | 	mov	arg03, #0
17a94     A8 DD B0 FD | 	call	#__system___basic_print_char
17a98     00 92 06 F6 | 	mov	arg01, #0
17a9c     88 26 B1 FD | 	call	#__system___getiolock_0622
17aa0     3D 01 68 FC | 	wrlong	#0, result1
17aa4     5A 93 02 F6 | 	mov	arg01, local08
17aa8     00 3D 22 FF 
17aac     00 94 06 F6 | 	mov	arg02, ##1148846080
17ab0     C0 F7 B0 FD | 	call	#__system___float_mul
17ab4     3D 93 02 F6 | 	mov	arg01, result1
17ab8     01 94 06 F6 | 	mov	arg02, #1
17abc     7C FC B0 FD | 	call	#__system___float_tointeger
17ac0     3D B7 02 F6 | 	mov	local09, result1
17ac4                 | ' 
17ac4                 | ' ifreq=round(freq*1000)
17ac4                 | ' if wave <32 then 
17ac4     20 BC 56 F2 | 	cmps	local12, #32 wc
17ac8     0B BC 66 C0 |  if_b	shl	local12, #11
17acc     00 00 61 CF 
17ad0     00 BC 06 C1 |  if_b	add	local12, ##-1040187392
17ad4     00 00 64 3F 
17ad8     00 BC 06 36 |  if_ae	mov	local12, ##-939524096
17adc                 | ' if env=8 then env=0 else env=varptr(envbuf(env,0))
17adc     08 BE 0E F2 | 	cmp	local13, #8 wz
17ae0     00 BE 06 A6 |  if_e	mov	local13, #0
17ae4     09 BE 66 50 |  if_ne	shl	local13, #9
17ae8     32 B1 02 56 |  if_ne	mov	local06, objptr
17aec     0E 00 00 5F 
17af0     38 B0 06 51 |  if_ne	add	local06, ##7224
17af4     58 BF 02 51 |  if_ne	add	local13, local06
17af8     77 CC 21 FF 
17afc     BE 93 06 F6 | 	mov	arg01, ##1134096318
17b00     60 95 02 F6 | 	mov	arg02, local14
17b04     70 F9 B0 FD | 	call	#__system___float_div
17b08     3D 93 02 F6 | 	mov	arg01, result1
17b0c     01 94 06 F6 | 	mov	arg02, #1
17b10     28 FC B0 FD | 	call	#__system___float_tointeger
17b14     00 00 23 FF 
17b18     00 92 06 F6 | 	mov	arg01, ##1174405120
17b1c     61 95 02 F6 | 	mov	arg02, local15
17b20     50 F7 B0 FD | 	call	#__system___float_mul
17b24     3D 93 02 F6 | 	mov	arg01, result1
17b28     01 94 06 F6 | 	mov	arg02, #1
17b2c     0C FC B0 FD | 	call	#__system___float_tointeger
17b30     0D C2 C6 F9 | 	decod	local15, #13
17b34     3D C3 02 F1 | 	add	local15, result1
17b38     00 3D 22 FF 
17b3c     00 92 06 F6 | 	mov	arg01, ##1148846080
17b40     5D 95 02 F6 | 	mov	arg02, local11
17b44     2C F7 B0 FD | 	call	#__system___float_mul
17b48     3D 93 02 F6 | 	mov	arg01, result1
17b4c     01 94 06 F6 | 	mov	arg02, #1
17b50     E8 FB B0 FD | 	call	#__system___float_tointeger
17b54     3D BB 02 F6 | 	mov	local11, result1
17b58     60 93 02 F6 | 	mov	arg01, local14
17b5c     01 94 06 F6 | 	mov	arg02, #1
17b60     D8 FB B0 FD | 	call	#__system___float_tointeger
17b64     3D 9F 02 F6 | 	mov	arg07, result1
17b68     59 93 02 F6 | 	mov	arg01, local07
17b6c     5B 95 02 F6 | 	mov	arg02, local09
17b70     5C 97 02 F6 | 	mov	arg03, local10
17b74     5D 99 02 F6 | 	mov	arg04, local11
17b78     5E 9B 02 F6 | 	mov	arg05, local12
17b7c     5F 9D 02 F6 | 	mov	arg06, local13
17b80     61 A1 02 F6 | 	mov	arg08, local15
17b84     62 A3 02 F6 | 	mov	arg09, local16
17b88     0B 00 00 FF 
17b8c     CC 64 06 F1 | 	add	objptr, ##5836
17b90     C8 C8 B0 FD | 	call	#_Audio2_004_spin2_play
17b94     0B 00 00 FF 
17b98     CC 64 86 F1 | 	sub	objptr, ##5836
17b9c                 | ' speed=round(speed_coeff/slen)
17b9c                 | ' ipan=8192+round(8192*pan)
17b9c                 | ' ivol=round(1000.0*vol)
17b9c                 | ' 
17b9c                 | ' audio.play(channel,ifreq,delay,ivol,wave,env,round(slen),ipan,sus)
17b9c                 | '  '  audio.play(1,440000,200,4096,$2000000,$0,600) 
17b9c                 | ' print channel, ifreq, delay, ivol,hex$(wave),env,slen,ipan, sus
17b9c     00 92 06 F6 | 	mov	arg01, #0
17ba0     84 25 B1 FD | 	call	#__system___getiolock_0622
17ba4     3D 93 02 F6 | 	mov	arg01, result1
17ba8     F8 CF B0 FD | 	call	#__system___lockmem
17bac     00 92 06 F6 | 	mov	arg01, #0
17bb0     59 95 02 F6 | 	mov	arg02, local07
17bb4     00 96 06 F6 | 	mov	arg03, #0
17bb8     0A 98 06 F6 | 	mov	arg04, #10
17bbc     1C DD B0 FD | 	call	#__system___basic_print_integer
17bc0     00 92 06 F6 | 	mov	arg01, #0
17bc4     09 94 06 F6 | 	mov	arg02, #9
17bc8     00 96 06 F6 | 	mov	arg03, #0
17bcc     70 DC B0 FD | 	call	#__system___basic_print_char
17bd0     00 92 06 F6 | 	mov	arg01, #0
17bd4     5B 95 02 F6 | 	mov	arg02, local09
17bd8     00 96 06 F6 | 	mov	arg03, #0
17bdc     0A 98 06 F6 | 	mov	arg04, #10
17be0     F8 DC B0 FD | 	call	#__system___basic_print_integer
17be4     00 92 06 F6 | 	mov	arg01, #0
17be8     09 94 06 F6 | 	mov	arg02, #9
17bec     00 96 06 F6 | 	mov	arg03, #0
17bf0     4C DC B0 FD | 	call	#__system___basic_print_char
17bf4     00 92 06 F6 | 	mov	arg01, #0
17bf8     5C 95 02 F6 | 	mov	arg02, local10
17bfc     00 96 06 F6 | 	mov	arg03, #0
17c00     0A 98 06 F6 | 	mov	arg04, #10
17c04     D4 DC B0 FD | 	call	#__system___basic_print_integer
17c08     00 92 06 F6 | 	mov	arg01, #0
17c0c     09 94 06 F6 | 	mov	arg02, #9
17c10     00 96 06 F6 | 	mov	arg03, #0
17c14     28 DC B0 FD | 	call	#__system___basic_print_char
17c18     00 92 06 F6 | 	mov	arg01, #0
17c1c     5D 95 02 F6 | 	mov	arg02, local11
17c20     00 96 06 F6 | 	mov	arg03, #0
17c24     0A 98 06 F6 | 	mov	arg04, #10
17c28     B0 DC B0 FD | 	call	#__system___basic_print_integer
17c2c     00 92 06 F6 | 	mov	arg01, #0
17c30     09 94 06 F6 | 	mov	arg02, #9
17c34     00 96 06 F6 | 	mov	arg03, #0
17c38     04 DC B0 FD | 	call	#__system___basic_print_char
17c3c     5E 93 02 F6 | 	mov	arg01, local12
17c40     00 94 06 F6 | 	mov	arg02, #0
17c44     10 96 06 F6 | 	mov	arg03, #16
17c48     54 EA B0 FD | 	call	#__system__Number_S
17c4c     3D 95 02 F6 | 	mov	arg02, result1
17c50     00 92 06 F6 | 	mov	arg01, #0
17c54     00 96 06 F6 | 	mov	arg03, #0
17c58     3C DC B0 FD | 	call	#__system___basic_print_string
17c5c     00 92 06 F6 | 	mov	arg01, #0
17c60     09 94 06 F6 | 	mov	arg02, #9
17c64     00 96 06 F6 | 	mov	arg03, #0
17c68     D4 DB B0 FD | 	call	#__system___basic_print_char
17c6c     00 92 06 F6 | 	mov	arg01, #0
17c70     5F 95 02 F6 | 	mov	arg02, local13
17c74     00 96 06 F6 | 	mov	arg03, #0
17c78     0A 98 06 F6 | 	mov	arg04, #10
17c7c     5C DC B0 FD | 	call	#__system___basic_print_integer
17c80     00 92 06 F6 | 	mov	arg01, #0
17c84     09 94 06 F6 | 	mov	arg02, #9
17c88     00 96 06 F6 | 	mov	arg03, #0
17c8c     B0 DB B0 FD | 	call	#__system___basic_print_char
17c90     00 92 06 F6 | 	mov	arg01, #0
17c94     60 95 02 F6 | 	mov	arg02, local14
17c98     00 96 06 F6 | 	mov	arg03, #0
17c9c     23 98 06 F6 | 	mov	arg04, #35
17ca0     F4 FB B0 FD | 	call	#__system___basic_print_float
17ca4     00 92 06 F6 | 	mov	arg01, #0
17ca8     09 94 06 F6 | 	mov	arg02, #9
17cac     00 96 06 F6 | 	mov	arg03, #0
17cb0     8C DB B0 FD | 	call	#__system___basic_print_char
17cb4     00 92 06 F6 | 	mov	arg01, #0
17cb8     61 95 02 F6 | 	mov	arg02, local15
17cbc     00 96 06 F6 | 	mov	arg03, #0
17cc0     0A 98 06 F6 | 	mov	arg04, #10
17cc4     14 DC B0 FD | 	call	#__system___basic_print_integer
17cc8     00 92 06 F6 | 	mov	arg01, #0
17ccc     09 94 06 F6 | 	mov	arg02, #9
17cd0     00 96 06 F6 | 	mov	arg03, #0
17cd4     68 DB B0 FD | 	call	#__system___basic_print_char
17cd8     00 92 06 F6 | 	mov	arg01, #0
17cdc     62 95 02 F6 | 	mov	arg02, local16
17ce0     00 96 06 F6 | 	mov	arg03, #0
17ce4     0A 98 06 F6 | 	mov	arg04, #10
17ce8     F0 DB B0 FD | 	call	#__system___basic_print_integer
17cec     00 92 06 F6 | 	mov	arg01, #0
17cf0     0A 94 06 F6 | 	mov	arg02, #10
17cf4     00 96 06 F6 | 	mov	arg03, #0
17cf8     44 DB B0 FD | 	call	#__system___basic_print_char
17cfc     00 92 06 F6 | 	mov	arg01, #0
17d00     24 24 B1 FD | 	call	#__system___getiolock_0622
17d04     3D 01 68 FC | 	wrlong	#0, result1
17d08                 | ' if delay>0 then waitms(delay) 
17d08     01 B8 56 F2 | 	cmps	local10, #1 wc
17d0c     5C 93 02 36 |  if_ae	mov	arg01, local10
17d10     84 D1 B0 3D |  if_ae	call	#__system___waitms
17d14     E7 F0 03 F6 | 	mov	ptra, fp
17d18     F2 00 A0 FD | 	call	#popregs_
17d1c                 | _do_play_ret
17d1c     2D 00 64 FD | 	ret
17d20                 | 
17d20                 | ' 
17d20                 | ' '-------------------- plot
17d20                 | ' 
17d20                 | ' sub do_plot
17d20                 | _do_plot
17d20     01 CA 05 F6 | 	mov	COUNT_, #1
17d24     E8 00 A0 FD | 	call	#pushregs_
17d28     20 F0 07 F1 | 	add	ptra, #32
17d2c     40 59 BF FD | 	call	#_pop
17d30     3D 97 02 F6 | 	mov	arg03, result1
17d34     3E 95 02 F6 | 	mov	arg02, result2
17d38     3F 93 02 F6 | 	mov	arg01, result3
17d3c     0C CE 05 F1 | 	add	fp, #12
17d40     E7 96 62 FC | 	wrlong	arg03, fp
17d44     04 CE 05 F1 | 	add	fp, #4
17d48     E7 94 62 FC | 	wrlong	arg02, fp
17d4c     04 CE 05 F1 | 	add	fp, #4
17d50     E7 92 62 FC | 	wrlong	arg01, fp
17d54     14 CE 85 F1 | 	sub	fp, #20
17d58     14 59 BF FD | 	call	#_pop
17d5c     3F 97 02 F6 | 	mov	arg03, result3
17d60     E7 7A 62 FC | 	wrlong	result1, fp
17d64     04 CE 05 F1 | 	add	fp, #4
17d68     E7 7C 62 FC | 	wrlong	result2, fp
17d6c     04 CE 05 F1 | 	add	fp, #4
17d70     E7 96 62 FC | 	wrlong	arg03, fp
17d74     08 CE 85 F1 | 	sub	fp, #8
17d78     E7 92 02 F6 | 	mov	arg01, fp
17d7c     CC 5A BF FD | 	call	#_converttoint
17d80     3D A7 02 F6 | 	mov	local01, result1
17d84     E7 92 02 F6 | 	mov	arg01, fp
17d88     0C 92 06 F1 | 	add	arg01, #12
17d8c     BC 5A BF FD | 	call	#_converttoint
17d90     3D 95 02 F6 | 	mov	arg02, result1
17d94     38 00 00 FF 
17d98     D0 65 06 F1 | 	add	objptr, ##29136
17d9c     32 A7 62 FC | 	wrlong	local01, objptr
17da0     04 64 06 F1 | 	add	objptr, #4
17da4     32 95 62 FC | 	wrlong	arg02, objptr
17da8     04 64 86 F1 | 	sub	objptr, #4
17dac     32 93 02 FB | 	rdlong	arg01, objptr
17db0     04 64 86 F1 | 	sub	objptr, #4
17db4     32 97 02 FB | 	rdlong	arg03, objptr
17db8     38 00 00 FF 
17dbc     CC 65 86 F1 | 	sub	objptr, ##29132
17dc0     50 A1 B0 FD | 	call	#_hg010b_spin2_putpixel
17dc4     E7 F0 03 F6 | 	mov	ptra, fp
17dc8     F2 00 A0 FD | 	call	#popregs_
17dcc                 | _do_plot_ret
17dcc     2D 00 64 FD | 	ret
17dd0                 | 
17dd0                 | ' 
17dd0                 | ' '-------------------- poke
17dd0                 | ' 
17dd0                 | ' sub do_poke
17dd0                 | _do_poke
17dd0     02 CA 05 F6 | 	mov	COUNT_, #2
17dd4     E8 00 A0 FD | 	call	#pushregs_
17dd8     20 F0 07 F1 | 	add	ptra, #32
17ddc     90 58 BF FD | 	call	#_pop
17de0     3D 95 02 F6 | 	mov	arg02, result1
17de4     3E 93 02 F6 | 	mov	arg01, result2
17de8     3F A7 02 F6 | 	mov	local01, result3
17dec     E7 94 62 FC | 	wrlong	arg02, fp
17df0     04 CE 05 F1 | 	add	fp, #4
17df4     E7 92 62 FC | 	wrlong	arg01, fp
17df8     04 CE 05 F1 | 	add	fp, #4
17dfc     E7 A6 62 FC | 	wrlong	local01, fp
17e00     08 CE 85 F1 | 	sub	fp, #8
17e04     68 58 BF FD | 	call	#_pop
17e08     3F A7 02 F6 | 	mov	local01, result3
17e0c     0C CE 05 F1 | 	add	fp, #12
17e10     E7 7A 62 FC | 	wrlong	result1, fp
17e14     04 CE 05 F1 | 	add	fp, #4
17e18     E7 7C 62 FC | 	wrlong	result2, fp
17e1c     04 CE 05 F1 | 	add	fp, #4
17e20     E7 A6 62 FC | 	wrlong	local01, fp
17e24     08 CE 85 F1 | 	sub	fp, #8
17e28     E7 92 02 F6 | 	mov	arg01, fp
17e2c     0C CE 85 F1 | 	sub	fp, #12
17e30     18 5A BF FD | 	call	#_converttoint
17e34     3D A7 02 F6 | 	mov	local01, result1
17e38     E7 92 02 F6 | 	mov	arg01, fp
17e3c     0C 5A BF FD | 	call	#_converttoint
17e40     3D A9 02 F6 | 	mov	local02, result1
17e44                 | ' t1=pop() 'value
17e44                 | ' t2=pop() 
17e44                 | ' a=converttoint(t2) : v=converttoint(t1)
17e44                 | ' if a<$80000 then poke a,v else pspoke a,v
17e44     00 04 00 FF 
17e48     00 A6 16 F2 | 	cmp	local01, ##524288 wc
17e4c     53 A9 42 CC |  if_b	wrbyte	local02, local01
17e50     53 93 02 36 |  if_ae	mov	arg01, local01
17e54     54 95 02 36 |  if_ae	mov	arg02, local02
17e58     4C 92 B0 3D |  if_ae	call	#_pspoke
17e5c     E7 F0 03 F6 | 	mov	ptra, fp
17e60     F2 00 A0 FD | 	call	#popregs_
17e64                 | _do_poke_ret
17e64     2D 00 64 FD | 	ret
17e68                 | 
17e68                 | ' 
17e68                 | ' '-------------------- pop
17e68                 | ' 
17e68                 | ' sub do_pop()
17e68                 | _do_pop
17e68                 | ' if gosubtop>0 then  gosubtop -=1 
17e68     52 00 00 FF 
17e6c     D8 64 06 F1 | 	add	objptr, ##42200
17e70     32 81 02 FB | 	rdlong	_var01, objptr
17e74     52 00 00 FF 
17e78     D8 64 86 F1 | 	sub	objptr, ##42200
17e7c     01 80 56 F2 | 	cmps	_var01, #1 wc
17e80     52 00 00 3F 
17e84     D8 64 06 31 |  if_ae	add	objptr, ##42200
17e88     32 81 02 3B |  if_ae	rdlong	_var01, objptr
17e8c     01 80 86 31 |  if_ae	sub	_var01, #1
17e90     32 81 62 3C |  if_ae	wrlong	_var01, objptr
17e94     52 00 00 3F 
17e98     D8 64 86 31 |  if_ae	sub	objptr, ##42200
17e9c                 | _do_pop_ret
17e9c     2D 00 64 FD | 	ret
17ea0                 | 
17ea0                 | ' 
17ea0                 | ' '-------------------- position
17ea0                 | ' 
17ea0                 | ' sub do_position
17ea0                 | _do_position
17ea0     01 CA 05 F6 | 	mov	COUNT_, #1
17ea4     E8 00 A0 FD | 	call	#pushregs_
17ea8     18 F0 07 F1 | 	add	ptra, #24
17eac     C0 57 BF FD | 	call	#_pop
17eb0     3D 95 02 F6 | 	mov	arg02, result1
17eb4     3E 93 02 F6 | 	mov	arg01, result2
17eb8     3F A7 02 F6 | 	mov	local01, result3
17ebc     E7 94 62 FC | 	wrlong	arg02, fp
17ec0     04 CE 05 F1 | 	add	fp, #4
17ec4     E7 92 62 FC | 	wrlong	arg01, fp
17ec8     04 CE 05 F1 | 	add	fp, #4
17ecc     E7 A6 62 FC | 	wrlong	local01, fp
17ed0     08 CE 85 F1 | 	sub	fp, #8
17ed4     98 57 BF FD | 	call	#_pop
17ed8     3F A7 02 F6 | 	mov	local01, result3
17edc     0C CE 05 F1 | 	add	fp, #12
17ee0     E7 7A 62 FC | 	wrlong	result1, fp
17ee4     04 CE 05 F1 | 	add	fp, #4
17ee8     E7 7C 62 FC | 	wrlong	result2, fp
17eec     04 CE 05 F1 | 	add	fp, #4
17ef0     E7 A6 62 FC | 	wrlong	local01, fp
17ef4     08 CE 85 F1 | 	sub	fp, #8
17ef8     E7 92 02 F6 | 	mov	arg01, fp
17efc     0C CE 85 F1 | 	sub	fp, #12
17f00     48 59 BF FD | 	call	#_converttoint
17f04     3D A7 02 F6 | 	mov	local01, result1
17f08     E7 92 02 F6 | 	mov	arg01, fp
17f0c     3C 59 BF FD | 	call	#_converttoint
17f10     3D 95 02 F6 | 	mov	arg02, result1
17f14     53 93 02 F6 | 	mov	arg01, local01
17f18     F8 AB B0 FD | 	call	#_hg010b_spin2_setcursorpos
17f1c     E7 F0 03 F6 | 	mov	ptra, fp
17f20     F2 00 A0 FD | 	call	#popregs_
17f24                 | _do_position_ret
17f24     2D 00 64 FD | 	ret
17f28                 | 
17f28                 | ' 
17f28                 | ' '-------------------- print
17f28                 | ' 
17f28                 | ' sub do_print  
17f28                 | _do_print
17f28     0B CA 05 F6 | 	mov	COUNT_, #11
17f2c     E8 00 A0 FD | 	call	#pushregs_
17f30     00 AC 06 F6 | 	mov	local04, #0
17f34     38 57 BF FD | 	call	#_pop
17f38     3D AF 02 F6 | 	mov	local05, result1
17f3c     3E B1 02 F6 | 	mov	local06, result2
17f40     3F B3 02 F6 | 	mov	local07, result3
17f44     57 A7 02 F6 | 	mov	local01, local05
17f48     58 A9 02 F6 | 	mov	local02, local06
17f4c     59 AB 02 F6 | 	mov	local03, local07
17f50                 | '  
17f50                 | ' r=0
17f50                 | ' t1=pop() 
17f50                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
17f50     21 AA 0E F2 | 	cmp	local03, #33 wz
17f54     22 AA 0E 52 |  if_ne	cmp	local03, #34 wz
17f58     20 00 90 5D |  if_ne	jmp	#LR__2010
17f5c     55 AD 02 F6 | 	mov	local04, local03
17f60     0C 57 BF FD | 	call	#_pop
17f64     3D AF 02 F6 | 	mov	local05, result1
17f68     3E B1 02 F6 | 	mov	local06, result2
17f6c     3F B3 02 F6 | 	mov	local07, result3
17f70     57 A7 02 F6 | 	mov	local01, local05
17f74     58 A9 02 F6 | 	mov	local02, local06
17f78     59 AB 02 F6 | 	mov	local03, local07
17f7c                 | LR__2010
17f7c                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
17f7c     20 AA 0E F2 | 	cmp	local03, #32 wz
17f80     55 AD 02 A6 |  if_e	mov	local04, local03
17f84                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
17f84     FF AA 0E F2 | 	cmp	local03, #255 wz
17f88     10 00 90 5D |  if_ne	jmp	#LR__2011
17f8c     53 93 02 F6 | 	mov	arg01, local01
17f90     00 94 06 F6 | 	mov	arg02, #0
17f94     E8 8E B0 FD | 	call	#_printerror
17f98     D4 04 90 FD | 	jmp	#LR__2030
17f9c                 | LR__2011
17f9c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
17f9c     2B AA 0E F2 | 	cmp	local03, #43 wz
17fa0     14 00 90 5D |  if_ne	jmp	#LR__2012
17fa4     53 93 02 F6 | 	mov	arg01, local01
17fa8     34 58 BF FD | 	call	#_convertstring
17fac     3D AF 02 F6 | 	mov	local05, result1
17fb0     57 A7 02 F6 | 	mov	local01, local05
17fb4     1F AA 06 F6 | 	mov	local03, #31
17fb8                 | LR__2012
17fb8                 | ' 
17fb8                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
17fb8     2C AA 0E F2 | 	cmp	local03, #44 wz
17fbc     80 00 90 5D |  if_ne	jmp	#LR__2013
17fc0     00 92 06 F6 | 	mov	arg01, #0
17fc4     60 21 B1 FD | 	call	#__system___getiolock_0622
17fc8     3D 93 02 F6 | 	mov	arg01, result1
17fcc     D4 CB B0 FD | 	call	#__system___lockmem
17fd0     99 01 00 FF 
17fd4     84 94 06 F6 | 	mov	arg02, ##@LR__6064
17fd8     00 92 06 F6 | 	mov	arg01, #0
17fdc     00 96 06 F6 | 	mov	arg03, #0
17fe0     B4 D8 B0 FD | 	call	#__system___basic_print_string
17fe4     0A B4 06 F6 | 	mov	local08, #10
17fe8     00 92 06 F6 | 	mov	arg01, #0
17fec     53 95 02 F6 | 	mov	arg02, local01
17ff0     00 96 06 F6 | 	mov	arg03, #0
17ff4     0A 98 06 F6 | 	mov	arg04, #10
17ff8     E0 D8 B0 FD | 	call	#__system___basic_print_integer
17ffc     3D B7 02 F6 | 	mov	local09, result1
18000     00 92 06 F6 | 	mov	arg01, #0
18004     0A 94 06 F6 | 	mov	arg02, #10
18008     00 96 06 F6 | 	mov	arg03, #0
1800c     30 D8 B0 FD | 	call	#__system___basic_print_char
18010     01 B8 06 F6 | 	mov	local10, #1
18014     00 92 06 F6 | 	mov	arg01, #0
18018     0C 21 B1 FD | 	call	#__system___getiolock_0622
1801c     3D 01 68 FC | 	wrlong	#0, result1
18020     00 BA 06 F6 | 	mov	local11, #0
18024     48 56 BF FD | 	call	#_pop
18028     3D AF 02 F6 | 	mov	local05, result1
1802c     3E B1 02 F6 | 	mov	local06, result2
18030     3F B3 02 F6 | 	mov	local07, result3
18034     57 A7 02 F6 | 	mov	local01, local05
18038     58 A9 02 F6 | 	mov	local02, local06
1803c     59 AB 02 F6 | 	mov	local03, local07
18040                 | LR__2013
18040                 | ' 
18040                 | ' if r=print_mod_comma  then
18040     21 AC 0E F2 | 	cmp	local04, #33 wz
18044     AC 01 90 5D |  if_ne	jmp	#LR__2018
18048                 | '   if t1.result_type=result_int then print t1.result.iresult,
18048     1C AA 0E F2 | 	cmp	local03, #28 wz
1804c     64 00 90 5D |  if_ne	jmp	#LR__2014
18050     00 92 06 F6 | 	mov	arg01, #0
18054     D0 20 B1 FD | 	call	#__system___getiolock_0622
18058     3D 93 02 F6 | 	mov	arg01, result1
1805c     44 CB B0 FD | 	call	#__system___lockmem
18060     00 B0 06 F6 | 	mov	local06, #0
18064     00 92 06 F6 | 	mov	arg01, #0
18068     53 95 02 F6 | 	mov	arg02, local01
1806c     00 96 06 F6 | 	mov	arg03, #0
18070     0A 98 06 F6 | 	mov	arg04, #10
18074     64 D8 B0 FD | 	call	#__system___basic_print_integer
18078     3D B3 02 F6 | 	mov	local07, result1
1807c     58 AF 02 F6 | 	mov	local05, local06
18080     59 AF 02 F1 | 	add	local05, local07
18084     00 BA 06 F6 | 	mov	local11, #0
18088     00 92 06 F6 | 	mov	arg01, #0
1808c     09 94 06 F6 | 	mov	arg02, #9
18090     00 96 06 F6 | 	mov	arg03, #0
18094     A8 D7 B0 FD | 	call	#__system___basic_print_char
18098     3D B7 02 F6 | 	mov	local09, result1
1809c     3D AF 02 F1 | 	add	local05, result1
180a0     00 92 06 F6 | 	mov	arg01, #0
180a4     80 20 B1 FD | 	call	#__system___getiolock_0622
180a8     3D 01 68 FC | 	wrlong	#0, result1
180ac     00 7A 06 F6 | 	mov	result1, #0
180b0     00 B8 06 F6 | 	mov	local10, #0
180b4                 | LR__2014
180b4                 | '   if t1.result_type=result_uint then print t1.result.uresult,
180b4     1D AA 0E F2 | 	cmp	local03, #29 wz
180b8     64 00 90 5D |  if_ne	jmp	#LR__2015
180bc     00 92 06 F6 | 	mov	arg01, #0
180c0     64 20 B1 FD | 	call	#__system___getiolock_0622
180c4     3D 93 02 F6 | 	mov	arg01, result1
180c8     D8 CA B0 FD | 	call	#__system___lockmem
180cc     00 B0 06 F6 | 	mov	local06, #0
180d0     00 92 06 F6 | 	mov	arg01, #0
180d4     53 95 02 F6 | 	mov	arg02, local01
180d8     00 96 06 F6 | 	mov	arg03, #0
180dc     0A 98 06 F6 | 	mov	arg04, #10
180e0     38 D8 B0 FD | 	call	#__system___basic_print_unsigned
180e4     3D B3 02 F6 | 	mov	local07, result1
180e8     58 AF 02 F6 | 	mov	local05, local06
180ec     59 AF 02 F1 | 	add	local05, local07
180f0     00 BA 06 F6 | 	mov	local11, #0
180f4     00 92 06 F6 | 	mov	arg01, #0
180f8     09 94 06 F6 | 	mov	arg02, #9
180fc     00 96 06 F6 | 	mov	arg03, #0
18100     3C D7 B0 FD | 	call	#__system___basic_print_char
18104     3D B7 02 F6 | 	mov	local09, result1
18108     3D AF 02 F1 | 	add	local05, result1
1810c     00 92 06 F6 | 	mov	arg01, #0
18110     14 20 B1 FD | 	call	#__system___getiolock_0622
18114     3D 01 68 FC | 	wrlong	#0, result1
18118     00 7A 06 F6 | 	mov	result1, #0
1811c     00 B8 06 F6 | 	mov	local10, #0
18120                 | LR__2015
18120                 | '   if t1.result_type=result_float then print t1.result.fresult,
18120     1E AA 0E F2 | 	cmp	local03, #30 wz
18124     64 00 90 5D |  if_ne	jmp	#LR__2016
18128     00 92 06 F6 | 	mov	arg01, #0
1812c     F8 1F B1 FD | 	call	#__system___getiolock_0622
18130     3D 93 02 F6 | 	mov	arg01, result1
18134     6C CA B0 FD | 	call	#__system___lockmem
18138     00 B0 06 F6 | 	mov	local06, #0
1813c     00 92 06 F6 | 	mov	arg01, #0
18140     53 95 02 F6 | 	mov	arg02, local01
18144     00 96 06 F6 | 	mov	arg03, #0
18148     23 98 06 F6 | 	mov	arg04, #35
1814c     48 F7 B0 FD | 	call	#__system___basic_print_float
18150     3D B3 02 F6 | 	mov	local07, result1
18154     58 AF 02 F6 | 	mov	local05, local06
18158     59 AF 02 F1 | 	add	local05, local07
1815c     00 BA 06 F6 | 	mov	local11, #0
18160     00 92 06 F6 | 	mov	arg01, #0
18164     09 94 06 F6 | 	mov	arg02, #9
18168     00 96 06 F6 | 	mov	arg03, #0
1816c     D0 D6 B0 FD | 	call	#__system___basic_print_char
18170     3D B7 02 F6 | 	mov	local09, result1
18174     3D AF 02 F1 | 	add	local05, result1
18178     00 92 06 F6 | 	mov	arg01, #0
1817c     A8 1F B1 FD | 	call	#__system___getiolock_0622
18180     3D 01 68 FC | 	wrlong	#0, result1
18184     00 7A 06 F6 | 	mov	result1, #0
18188     00 B8 06 F6 | 	mov	local10, #0
1818c                 | LR__2016
1818c                 | '   if t1.result_type=result_string then print t1.result.sresult,
1818c     1F AA 0E F2 | 	cmp	local03, #31 wz
18190     60 00 90 5D |  if_ne	jmp	#LR__2017
18194     00 92 06 F6 | 	mov	arg01, #0
18198     8C 1F B1 FD | 	call	#__system___getiolock_0622
1819c     3D 93 02 F6 | 	mov	arg01, result1
181a0     00 CA B0 FD | 	call	#__system___lockmem
181a4     00 B0 06 F6 | 	mov	local06, #0
181a8     00 92 06 F6 | 	mov	arg01, #0
181ac     53 95 02 F6 | 	mov	arg02, local01
181b0     00 96 06 F6 | 	mov	arg03, #0
181b4     E0 D6 B0 FD | 	call	#__system___basic_print_string
181b8     3D B3 02 F6 | 	mov	local07, result1
181bc     58 AF 02 F6 | 	mov	local05, local06
181c0     59 AF 02 F1 | 	add	local05, local07
181c4     00 BA 06 F6 | 	mov	local11, #0
181c8     00 92 06 F6 | 	mov	arg01, #0
181cc     09 94 06 F6 | 	mov	arg02, #9
181d0     00 96 06 F6 | 	mov	arg03, #0
181d4     68 D6 B0 FD | 	call	#__system___basic_print_char
181d8     3D B7 02 F6 | 	mov	local09, result1
181dc     3D AF 02 F1 | 	add	local05, result1
181e0     00 92 06 F6 | 	mov	arg01, #0
181e4     40 1F B1 FD | 	call	#__system___getiolock_0622
181e8     3D 01 68 FC | 	wrlong	#0, result1
181ec     00 7A 06 F6 | 	mov	result1, #0
181f0     00 B8 06 F6 | 	mov	local10, #0
181f4                 | LR__2017
181f4                 | LR__2018
181f4                 | ' if r=print_mod_semicolon then 
181f4     22 AC 0E F2 | 	cmp	local04, #34 wz
181f8     1C 01 90 5D |  if_ne	jmp	#LR__2023
181fc                 | '   if t1.result_type=result_int then print t1.result.iresult;
181fc     1C AA 0E F2 | 	cmp	local03, #28 wz
18200     50 00 90 5D |  if_ne	jmp	#LR__2019
18204     00 92 06 F6 | 	mov	arg01, #0
18208     1C 1F B1 FD | 	call	#__system___getiolock_0622
1820c     3D 93 02 F6 | 	mov	arg01, result1
18210     90 C9 B0 FD | 	call	#__system___lockmem
18214     00 B0 06 F6 | 	mov	local06, #0
18218     00 B8 06 F6 | 	mov	local10, #0
1821c     0A BA 06 F6 | 	mov	local11, #10
18220     00 92 06 F6 | 	mov	arg01, #0
18224     53 95 02 F6 | 	mov	arg02, local01
18228     00 96 06 F6 | 	mov	arg03, #0
1822c     0A 98 06 F6 | 	mov	arg04, #10
18230     A8 D6 B0 FD | 	call	#__system___basic_print_integer
18234     3D B3 02 F6 | 	mov	local07, result1
18238     58 AF 02 F6 | 	mov	local05, local06
1823c     59 AF 02 F1 | 	add	local05, local07
18240     00 92 06 F6 | 	mov	arg01, #0
18244     E0 1E B1 FD | 	call	#__system___getiolock_0622
18248     3D 01 68 FC | 	wrlong	#0, result1
1824c     00 7A 06 F6 | 	mov	result1, #0
18250     00 B6 06 F6 | 	mov	local09, #0
18254                 | LR__2019
18254                 | '   if t1.result_type=result_uint then print t1.result.uresult;
18254     1D AA 0E F2 | 	cmp	local03, #29 wz
18258     50 00 90 5D |  if_ne	jmp	#LR__2020
1825c     00 92 06 F6 | 	mov	arg01, #0
18260     C4 1E B1 FD | 	call	#__system___getiolock_0622
18264     3D 93 02 F6 | 	mov	arg01, result1
18268     38 C9 B0 FD | 	call	#__system___lockmem
1826c     00 B0 06 F6 | 	mov	local06, #0
18270     00 B8 06 F6 | 	mov	local10, #0
18274     0A BA 06 F6 | 	mov	local11, #10
18278     00 92 06 F6 | 	mov	arg01, #0
1827c     53 95 02 F6 | 	mov	arg02, local01
18280     00 96 06 F6 | 	mov	arg03, #0
18284     0A 98 06 F6 | 	mov	arg04, #10
18288     90 D6 B0 FD | 	call	#__system___basic_print_unsigned
1828c     3D B3 02 F6 | 	mov	local07, result1
18290     58 AF 02 F6 | 	mov	local05, local06
18294     59 AF 02 F1 | 	add	local05, local07
18298     00 92 06 F6 | 	mov	arg01, #0
1829c     88 1E B1 FD | 	call	#__system___getiolock_0622
182a0     3D 01 68 FC | 	wrlong	#0, result1
182a4     00 7A 06 F6 | 	mov	result1, #0
182a8     00 B6 06 F6 | 	mov	local09, #0
182ac                 | LR__2020
182ac                 | '   if t1.result_type=result_float then print t1.result.fresult;
182ac     1E AA 0E F2 | 	cmp	local03, #30 wz
182b0     30 00 90 5D |  if_ne	jmp	#LR__2021
182b4     00 92 06 F6 | 	mov	arg01, #0
182b8     6C 1E B1 FD | 	call	#__system___getiolock_0622
182bc     3D 93 02 F6 | 	mov	arg01, result1
182c0     E0 C8 B0 FD | 	call	#__system___lockmem
182c4     00 92 06 F6 | 	mov	arg01, #0
182c8     53 95 02 F6 | 	mov	arg02, local01
182cc     00 96 06 F6 | 	mov	arg03, #0
182d0     23 98 06 F6 | 	mov	arg04, #35
182d4     C0 F5 B0 FD | 	call	#__system___basic_print_float
182d8     00 92 06 F6 | 	mov	arg01, #0
182dc     48 1E B1 FD | 	call	#__system___getiolock_0622
182e0     3D 01 68 FC | 	wrlong	#0, result1
182e4                 | LR__2021
182e4                 | '   if t1.result_type=result_string then print t1.result.sresult;
182e4     1F AA 0E F2 | 	cmp	local03, #31 wz
182e8     2C 00 90 5D |  if_ne	jmp	#LR__2022
182ec     00 92 06 F6 | 	mov	arg01, #0
182f0     34 1E B1 FD | 	call	#__system___getiolock_0622
182f4     3D 93 02 F6 | 	mov	arg01, result1
182f8     A8 C8 B0 FD | 	call	#__system___lockmem
182fc     00 92 06 F6 | 	mov	arg01, #0
18300     53 95 02 F6 | 	mov	arg02, local01
18304     00 96 06 F6 | 	mov	arg03, #0
18308     8C D5 B0 FD | 	call	#__system___basic_print_string
1830c     00 92 06 F6 | 	mov	arg01, #0
18310     14 1E B1 FD | 	call	#__system___getiolock_0622
18314     3D 01 68 FC | 	wrlong	#0, result1
18318                 | LR__2022
18318                 | LR__2023
18318                 | ' if r=0 then 
18318     00 AC 0E F2 | 	cmp	local04, #0 wz
1831c     1C 01 90 5D |  if_ne	jmp	#LR__2028
18320                 | '   if t1.result_type=result_int then print t1.result.iresult
18320     1C AA 0E F2 | 	cmp	local03, #28 wz
18324     40 00 90 5D |  if_ne	jmp	#LR__2024
18328     00 92 06 F6 | 	mov	arg01, #0
1832c     F8 1D B1 FD | 	call	#__system___getiolock_0622
18330     3D 93 02 F6 | 	mov	arg01, result1
18334     6C C8 B0 FD | 	call	#__system___lockmem
18338     00 92 06 F6 | 	mov	arg01, #0
1833c     53 95 02 F6 | 	mov	arg02, local01
18340     00 96 06 F6 | 	mov	arg03, #0
18344     0A 98 06 F6 | 	mov	arg04, #10
18348     90 D5 B0 FD | 	call	#__system___basic_print_integer
1834c     00 92 06 F6 | 	mov	arg01, #0
18350     0A 94 06 F6 | 	mov	arg02, #10
18354     00 96 06 F6 | 	mov	arg03, #0
18358     E4 D4 B0 FD | 	call	#__system___basic_print_char
1835c     00 92 06 F6 | 	mov	arg01, #0
18360     C4 1D B1 FD | 	call	#__system___getiolock_0622
18364     3D 01 68 FC | 	wrlong	#0, result1
18368                 | LR__2024
18368                 | '   if t1.result_type=result_uint then print t1.result.uresult
18368     1D AA 0E F2 | 	cmp	local03, #29 wz
1836c     40 00 90 5D |  if_ne	jmp	#LR__2025
18370     00 92 06 F6 | 	mov	arg01, #0
18374     B0 1D B1 FD | 	call	#__system___getiolock_0622
18378     3D 93 02 F6 | 	mov	arg01, result1
1837c     24 C8 B0 FD | 	call	#__system___lockmem
18380     00 92 06 F6 | 	mov	arg01, #0
18384     53 95 02 F6 | 	mov	arg02, local01
18388     00 96 06 F6 | 	mov	arg03, #0
1838c     0A 98 06 F6 | 	mov	arg04, #10
18390     88 D5 B0 FD | 	call	#__system___basic_print_unsigned
18394     00 92 06 F6 | 	mov	arg01, #0
18398     0A 94 06 F6 | 	mov	arg02, #10
1839c     00 96 06 F6 | 	mov	arg03, #0
183a0     9C D4 B0 FD | 	call	#__system___basic_print_char
183a4     00 92 06 F6 | 	mov	arg01, #0
183a8     7C 1D B1 FD | 	call	#__system___getiolock_0622
183ac     3D 01 68 FC | 	wrlong	#0, result1
183b0                 | LR__2025
183b0                 | '   if t1.result_type=result_float then print t1.result.fresult
183b0     1E AA 0E F2 | 	cmp	local03, #30 wz
183b4     40 00 90 5D |  if_ne	jmp	#LR__2026
183b8     00 92 06 F6 | 	mov	arg01, #0
183bc     68 1D B1 FD | 	call	#__system___getiolock_0622
183c0     3D 93 02 F6 | 	mov	arg01, result1
183c4     DC C7 B0 FD | 	call	#__system___lockmem
183c8     00 92 06 F6 | 	mov	arg01, #0
183cc     53 95 02 F6 | 	mov	arg02, local01
183d0     00 96 06 F6 | 	mov	arg03, #0
183d4     23 98 06 F6 | 	mov	arg04, #35
183d8     BC F4 B0 FD | 	call	#__system___basic_print_float
183dc     00 92 06 F6 | 	mov	arg01, #0
183e0     0A 94 06 F6 | 	mov	arg02, #10
183e4     00 96 06 F6 | 	mov	arg03, #0
183e8     54 D4 B0 FD | 	call	#__system___basic_print_char
183ec     00 92 06 F6 | 	mov	arg01, #0
183f0     34 1D B1 FD | 	call	#__system___getiolock_0622
183f4     3D 01 68 FC | 	wrlong	#0, result1
183f8                 | LR__2026
183f8                 | '   if t1.result_type=result_string then print t1.result.sresult
183f8     1F AA 0E F2 | 	cmp	local03, #31 wz
183fc     3C 00 90 5D |  if_ne	jmp	#LR__2027
18400     00 92 06 F6 | 	mov	arg01, #0
18404     20 1D B1 FD | 	call	#__system___getiolock_0622
18408     3D 93 02 F6 | 	mov	arg01, result1
1840c     94 C7 B0 FD | 	call	#__system___lockmem
18410     00 92 06 F6 | 	mov	arg01, #0
18414     53 95 02 F6 | 	mov	arg02, local01
18418     00 96 06 F6 | 	mov	arg03, #0
1841c     78 D4 B0 FD | 	call	#__system___basic_print_string
18420     00 92 06 F6 | 	mov	arg01, #0
18424     0A 94 06 F6 | 	mov	arg02, #10
18428     00 96 06 F6 | 	mov	arg03, #0
1842c     10 D4 B0 FD | 	call	#__system___basic_print_char
18430     00 92 06 F6 | 	mov	arg01, #0
18434     F0 1C B1 FD | 	call	#__system___getiolock_0622
18438     3D 01 68 FC | 	wrlong	#0, result1
1843c                 | LR__2027
1843c                 | LR__2028
1843c                 | ' if r=print_mod_empty then print
1843c     20 AC 0E F2 | 	cmp	local04, #32 wz
18440     2C 00 90 5D |  if_ne	jmp	#LR__2029
18444     00 92 06 F6 | 	mov	arg01, #0
18448     DC 1C B1 FD | 	call	#__system___getiolock_0622
1844c     3D 93 02 F6 | 	mov	arg01, result1
18450     50 C7 B0 FD | 	call	#__system___lockmem
18454     00 92 06 F6 | 	mov	arg01, #0
18458     0A 94 06 F6 | 	mov	arg02, #10
1845c     00 96 06 F6 | 	mov	arg03, #0
18460     DC D3 B0 FD | 	call	#__system___basic_print_char
18464     00 92 06 F6 | 	mov	arg01, #0
18468     BC 1C B1 FD | 	call	#__system___getiolock_0622
1846c     3D 01 68 FC | 	wrlong	#0, result1
18470                 | LR__2029
18470                 | LR__2030
18470     E7 F0 03 F6 | 	mov	ptra, fp
18474     F2 00 A0 FD | 	call	#popregs_
18478                 | _do_print_ret
18478     2D 00 64 FD | 	ret
1847c                 | 
1847c                 | ' 
1847c                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
1847c                 | ' 
1847c                 | ' sub do_push
1847c                 | _do_push
1847c                 | ' if stackpointer<maxstack then 
1847c     44 00 00 FF 
18480     FC 65 06 F1 | 	add	objptr, ##35324
18484     32 81 02 FB | 	rdlong	_var01, objptr
18488     44 00 00 FF 
1848c     FC 65 86 F1 | 	sub	objptr, ##35324
18490     01 00 00 FF 
18494     00 80 56 F2 | 	cmps	_var01, ##512 wc
18498     F8 00 90 3D |  if_ae	jmp	#LR__2040
1849c     4C 00 00 FF 
184a0     24 64 06 F1 | 	add	objptr, ##38948
184a4     32 83 02 FB | 	rdlong	_var02, objptr
184a8     41 85 02 F6 | 	mov	_var03, _var02
184ac     01 84 66 F0 | 	shl	_var03, #1
184b0     41 85 02 F1 | 	add	_var03, _var02
184b4     02 84 66 F0 | 	shl	_var03, #2
184b8     03 00 00 FF 
184bc     04 64 86 F1 | 	sub	objptr, ##1540
184c0     32 85 02 F1 | 	add	_var03, objptr
184c4     42 81 02 FB | 	rdlong	_var01, _var03
184c8     04 84 06 F1 | 	add	_var03, #4
184cc     42 87 02 FB | 	rdlong	_var04, _var03
184d0     41 85 02 F6 | 	mov	_var03, _var02
184d4     01 84 66 F0 | 	shl	_var03, #1
184d8     41 85 02 F1 | 	add	_var03, _var02
184dc     02 84 66 F0 | 	shl	_var03, #2
184e0     32 85 02 F1 | 	add	_var03, objptr
184e4     08 84 06 F1 | 	add	_var03, #8
184e8     42 83 02 FB | 	rdlong	_var02, _var03
184ec     04 00 00 FF 
184f0     24 64 86 F1 | 	sub	objptr, ##2084
184f4     32 85 02 FB | 	rdlong	_var03, objptr
184f8     42 89 02 F6 | 	mov	_var05, _var03
184fc     01 88 66 F0 | 	shl	_var05, #1
18500     42 89 02 F1 | 	add	_var05, _var03
18504     02 88 66 F0 | 	shl	_var05, #2
18508     0C 00 00 FF 
1850c     0C 64 86 F1 | 	sub	objptr, ##6156
18510     32 89 02 F1 | 	add	_var05, objptr
18514     44 81 62 FC | 	wrlong	_var01, _var05
18518     0C 00 00 FF 
1851c     0C 64 06 F1 | 	add	objptr, ##6156
18520     32 89 02 FB | 	rdlong	_var05, objptr
18524     44 85 02 F6 | 	mov	_var03, _var05
18528     01 84 66 F0 | 	shl	_var03, #1
1852c     44 85 02 F1 | 	add	_var03, _var05
18530     02 84 66 F0 | 	shl	_var03, #2
18534     0C 00 00 FF 
18538     0C 64 86 F1 | 	sub	objptr, ##6156
1853c     32 85 02 F1 | 	add	_var03, objptr
18540     04 84 06 F1 | 	add	_var03, #4
18544     42 87 62 FC | 	wrlong	_var04, _var03
18548     0C 00 00 FF 
1854c     0C 64 06 F1 | 	add	objptr, ##6156
18550     32 89 02 FB | 	rdlong	_var05, objptr
18554     44 87 02 F6 | 	mov	_var04, _var05
18558     01 86 66 F0 | 	shl	_var04, #1
1855c     44 87 02 F1 | 	add	_var04, _var05
18560     02 86 66 F0 | 	shl	_var04, #2
18564     0C 00 00 FF 
18568     0C 64 86 F1 | 	sub	objptr, ##6156
1856c     32 87 02 F1 | 	add	_var04, objptr
18570     08 86 06 F1 | 	add	_var04, #8
18574     43 83 62 FC | 	wrlong	_var02, _var04
18578     0C 00 00 FF 
1857c     0C 64 06 F1 | 	add	objptr, ##6156
18580     32 81 02 FB | 	rdlong	_var01, objptr
18584     01 80 06 F1 | 	add	_var01, #1
18588     32 81 62 FC | 	wrlong	_var01, objptr
1858c     44 00 00 FF 
18590     FC 65 86 F1 | 	sub	objptr, ##35324
18594                 | LR__2040
18594                 | _do_push_ret
18594     2D 00 64 FD | 	ret
18598                 | 
18598                 | ' 
18598                 | ' '-------------------- put
18598                 | ' 
18598                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
18598                 | _do_put
18598     07 CA 05 F6 | 	mov	COUNT_, #7
1859c     E8 00 A0 FD | 	call	#pushregs_
185a0     28 F0 07 F1 | 	add	ptra, #40
185a4     4C 00 00 FF 
185a8     24 64 06 F1 | 	add	objptr, ##38948
185ac     32 9B 02 FB | 	rdlong	arg05, objptr
185b0     4D 99 02 F6 | 	mov	arg04, arg05
185b4     01 98 66 F0 | 	shl	arg04, #1
185b8     4D 99 02 F1 | 	add	arg04, arg05
185bc     02 98 66 F0 | 	shl	arg04, #2
185c0     03 00 00 FF 
185c4     04 64 86 F1 | 	sub	objptr, ##1540
185c8     32 99 02 F1 | 	add	arg04, objptr
185cc     4C A7 02 FB | 	rdlong	local01, arg04
185d0                 | ' 
185d0                 | ' numpar=compiledline(lineptr_e).result.uresult
185d0                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
185d0     04 A6 0E F2 | 	cmp	local01, #4 wz
185d4     49 00 00 FF 
185d8     20 64 86 F1 | 	sub	objptr, ##37408
185dc     48 00 90 5D |  if_ne	jmp	#LR__2050
185e0     8C 50 BF FD | 	call	#_pop
185e4     3F 9B 02 F6 | 	mov	arg05, result3
185e8     1C CE 05 F1 | 	add	fp, #28
185ec     E7 7A 62 FC | 	wrlong	result1, fp
185f0     04 CE 05 F1 | 	add	fp, #4
185f4     E7 7C 62 FC | 	wrlong	result2, fp
185f8     04 CE 05 F1 | 	add	fp, #4
185fc     E7 9A 62 FC | 	wrlong	arg05, fp
18600     08 CE 85 F1 | 	sub	fp, #8
18604     E7 92 02 F6 | 	mov	arg01, fp
18608     1C CE 85 F1 | 	sub	fp, #28
1860c     3C 52 BF FD | 	call	#_converttoint
18610     54 00 00 FF 
18614     E8 64 06 F1 | 	add	objptr, ##43240
18618     32 7B 62 FC | 	wrlong	result1, objptr
1861c     54 00 00 FF 
18620     E8 64 86 F1 | 	sub	objptr, ##43240
18624     18 00 90 FD | 	jmp	#LR__2051
18628                 | LR__2050
18628     54 00 00 FF 
1862c     E8 64 06 F1 | 	add	objptr, ##43240
18630     FF FF FF FF 
18634     32 FF 6B FC | 	wrlong	##-1, objptr
18638     54 00 00 FF 
1863c     E8 64 86 F1 | 	sub	objptr, ##43240
18640                 | LR__2051
18640                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
18640     03 A6 56 F2 | 	cmps	local01, #3 wc
18644     38 00 90 CD |  if_b	jmp	#LR__2052
18648     24 50 BF FD | 	call	#_pop
1864c     3F 9B 02 F6 | 	mov	arg05, result3
18650     1C CE 05 F1 | 	add	fp, #28
18654     E7 7A 62 FC | 	wrlong	result1, fp
18658     04 CE 05 F1 | 	add	fp, #4
1865c     E7 7C 62 FC | 	wrlong	result2, fp
18660     04 CE 05 F1 | 	add	fp, #4
18664     E7 9A 62 FC | 	wrlong	arg05, fp
18668     08 CE 85 F1 | 	sub	fp, #8
1866c     E7 92 02 F6 | 	mov	arg01, fp
18670     1C CE 85 F1 | 	sub	fp, #28
18674     D4 51 BF FD | 	call	#_converttoint
18678     3D A9 02 F6 | 	mov	local02, result1
1867c     04 00 90 FD | 	jmp	#LR__2053
18680                 | LR__2052
18680     01 A8 06 F6 | 	mov	local02, #1
18684                 | LR__2053
18684                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
18684     02 A6 56 F2 | 	cmps	local01, #2 wc
18688     34 00 90 CD |  if_b	jmp	#LR__2054
1868c     E0 4F BF FD | 	call	#_pop
18690     3F A7 02 F6 | 	mov	local01, result3
18694     1C CE 05 F1 | 	add	fp, #28
18698     E7 7A 62 FC | 	wrlong	result1, fp
1869c     04 CE 05 F1 | 	add	fp, #4
186a0     E7 7C 62 FC | 	wrlong	result2, fp
186a4     04 CE 05 F1 | 	add	fp, #4
186a8     E7 A6 62 FC | 	wrlong	local01, fp
186ac     08 CE 85 F1 | 	sub	fp, #8
186b0     E7 92 02 F6 | 	mov	arg01, fp
186b4     1C CE 85 F1 | 	sub	fp, #28
186b8     90 51 BF FD | 	call	#_converttoint
186bc     3D AB 02 F6 | 	mov	local03, result1
186c0                 | LR__2054
186c0     AC 4F BF FD | 	call	#_pop
186c4     3F A7 02 F6 | 	mov	local01, result3
186c8     1C CE 05 F1 | 	add	fp, #28
186cc     E7 7A 62 FC | 	wrlong	result1, fp
186d0     04 CE 05 F1 | 	add	fp, #4
186d4     E7 7C 62 FC | 	wrlong	result2, fp
186d8     04 CE 05 F1 | 	add	fp, #4
186dc     E7 A6 62 FC | 	wrlong	local01, fp
186e0     08 CE 85 F1 | 	sub	fp, #8
186e4     E7 92 02 F6 | 	mov	arg01, fp
186e8     1C CE 85 F1 | 	sub	fp, #28
186ec     5C 51 BF FD | 	call	#_converttoint
186f0     3D AD 02 F6 | 	mov	local04, result1
186f4     02 AE 66 F0 | 	shl	local05, #2
186f8     52 00 00 FF 
186fc     68 64 06 F1 | 	add	objptr, ##42088
18700     32 AF 02 F1 | 	add	local05, objptr
18704     57 01 68 FC | 	wrlong	#0, local05
18708                 | ' t1=pop() : channel=converttoint(t1)
18708                 | ' getres(j)=0
18708                 | ' if pos>=0 then
18708     02 00 00 FF 
1870c     80 64 06 F1 | 	add	objptr, ##1152
18710     32 B1 02 FB | 	rdlong	local06, objptr
18714     54 00 00 FF 
18718     E8 64 86 F1 | 	sub	objptr, ##43240
1871c     00 B0 56 F2 | 	cmps	local06, #0 wc
18720     08 01 90 CD |  if_b	jmp	#LR__2060
18724     00 B2 06 F6 | 	mov	local07, #0
18728                 | '    i=0: do
18728                 | LR__2055
18728     00 AE 06 F6 | 	mov	local05, #0
1872c                 | '    j=0: do    
1872c                 | LR__2056
1872c                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
1872c     00 04 00 FF 
18730     00 AA 56 F2 | 	cmps	local03, ##524288 wc
18734     34 00 90 3D |  if_ae	jmp	#LR__2057
18738     57 B1 02 F6 | 	mov	local06, local05
1873c     32 A7 02 F6 | 	mov	local01, objptr
18740     50 00 00 FF 
18744     58 A6 06 F1 | 	add	local01, ##41048
18748     53 B1 02 F1 | 	add	local06, local01
1874c     55 93 02 F6 | 	mov	arg01, local03
18750     59 A7 02 F6 | 	mov	local01, local07
18754     0A A6 66 F0 | 	shl	local01, #10
18758     53 93 02 F1 | 	add	arg01, local01
1875c     57 93 02 F1 | 	add	arg01, local05
18760     49 7B C2 FA | 	rdbyte	result1, arg01
18764     58 7B 42 FC | 	wrbyte	result1, local06
18768     30 00 90 FD | 	jmp	#LR__2058
1876c                 | LR__2057
1876c     57 B1 02 F6 | 	mov	local06, local05
18770     32 A7 02 F6 | 	mov	local01, objptr
18774     50 00 00 FF 
18778     58 A6 06 F1 | 	add	local01, ##41048
1877c     53 B1 02 F1 | 	add	local06, local01
18780     55 93 02 F6 | 	mov	arg01, local03
18784     59 A7 02 F6 | 	mov	local01, local07
18788     0A A6 66 F0 | 	shl	local01, #10
1878c     53 93 02 F1 | 	add	arg01, local01
18790     57 93 02 F1 | 	add	arg01, local05
18794     58 89 B0 FD | 	call	#_pspeek
18798     58 7B 42 FC | 	wrbyte	result1, local06
1879c                 | LR__2058
1879c     01 AE 06 F1 | 	add	local05, #1
187a0     02 00 00 FF 
187a4     00 AE 56 F2 | 	cmps	local05, ##1024 wc
187a8     14 00 90 3D |  if_ae	jmp	#LR__2059
187ac     59 B1 02 F6 | 	mov	local06, local07
187b0     0A B0 66 F0 | 	shl	local06, #10
187b4     57 B1 02 F1 | 	add	local06, local05
187b8     54 B1 5A F2 | 	cmps	local06, local02 wcz
187bc     6C FF 9F ED |  if_be	jmp	#LR__2056
187c0                 | LR__2059
187c0                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
187c0     54 00 00 FF 
187c4     E8 64 06 F1 | 	add	objptr, ##43240
187c8     32 95 02 FB | 	rdlong	arg02, objptr
187cc     01 94 06 F1 | 	add	arg02, #1
187d0     04 00 00 FF 
187d4     90 64 86 F1 | 	sub	objptr, ##2192
187d8     32 97 02 F6 | 	mov	arg03, objptr
187dc     50 00 00 FF 
187e0     58 64 86 F1 | 	sub	objptr, ##41048
187e4     54 99 02 F6 | 	mov	arg04, local02
187e8     56 93 02 F6 | 	mov	arg01, local04
187ec     01 9A 06 F6 | 	mov	arg05, #1
187f0     B4 D1 B0 FD | 	call	#__system___basic_put
187f4     56 B1 02 F6 | 	mov	local06, local04
187f8     02 B0 66 F0 | 	shl	local06, #2
187fc     32 A7 02 F6 | 	mov	local01, objptr
18800     52 00 00 FF 
18804     68 A6 06 F1 | 	add	local01, ##42088
18808     53 B1 02 F1 | 	add	local06, local01
1880c     58 7B 62 FC | 	wrlong	result1, local06
18810                 | '    if 1024*i+j>amount then exit loop
18810     59 B1 02 F6 | 	mov	local06, local07
18814     0A B0 66 F0 | 	shl	local06, #10
18818     57 B1 02 F1 | 	add	local06, local05
1881c     54 B1 5A F2 | 	cmps	local06, local02 wcz
18820     F8 00 90 1D |  if_a	jmp	#LR__2066
18824     01 B2 06 F1 | 	add	local07, #1
18828     FC FE 9F FD | 	jmp	#LR__2055
1882c                 | LR__2060
1882c     00 B2 06 F6 | 	mov	local07, #0
18830                 | '    i=0: do
18830                 | LR__2061
18830     00 AE 06 F6 | 	mov	local05, #0
18834                 | '    j=0: do  
18834                 | LR__2062
18834                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
18834     00 04 00 FF 
18838     00 AA 56 F2 | 	cmps	local03, ##524288 wc
1883c     34 00 90 3D |  if_ae	jmp	#LR__2063
18840     57 B1 02 F6 | 	mov	local06, local05
18844     32 A7 02 F6 | 	mov	local01, objptr
18848     50 00 00 FF 
1884c     58 A6 06 F1 | 	add	local01, ##41048
18850     53 B1 02 F1 | 	add	local06, local01
18854     55 93 02 F6 | 	mov	arg01, local03
18858     59 A7 02 F6 | 	mov	local01, local07
1885c     0A A6 66 F0 | 	shl	local01, #10
18860     53 93 02 F1 | 	add	arg01, local01
18864     57 93 02 F1 | 	add	arg01, local05
18868     49 7B C2 FA | 	rdbyte	result1, arg01
1886c     58 7B 42 FC | 	wrbyte	result1, local06
18870     30 00 90 FD | 	jmp	#LR__2064
18874                 | LR__2063
18874     57 B1 02 F6 | 	mov	local06, local05
18878     32 A7 02 F6 | 	mov	local01, objptr
1887c     50 00 00 FF 
18880     58 A6 06 F1 | 	add	local01, ##41048
18884     53 B1 02 F1 | 	add	local06, local01
18888     55 93 02 F6 | 	mov	arg01, local03
1888c     59 A7 02 F6 | 	mov	local01, local07
18890     0A A6 66 F0 | 	shl	local01, #10
18894     53 93 02 F1 | 	add	arg01, local01
18898     57 93 02 F1 | 	add	arg01, local05
1889c     50 88 B0 FD | 	call	#_pspeek
188a0     58 7B 42 FC | 	wrbyte	result1, local06
188a4                 | LR__2064
188a4     01 AE 06 F1 | 	add	local05, #1
188a8     02 00 00 FF 
188ac     00 AE 56 F2 | 	cmps	local05, ##1024 wc
188b0     14 00 90 3D |  if_ae	jmp	#LR__2065
188b4     59 B1 02 F6 | 	mov	local06, local07
188b8     0A B0 66 F0 | 	shl	local06, #10
188bc     57 B1 02 F1 | 	add	local06, local05
188c0     54 B1 5A F2 | 	cmps	local06, local02 wcz
188c4     6C FF 9F ED |  if_be	jmp	#LR__2062
188c8                 | LR__2065
188c8                 | '    put #channel,,block(0),amount, r : getres(channel)=r
188c8     32 97 02 F6 | 	mov	arg03, objptr
188cc     50 00 00 FF 
188d0     58 96 06 F1 | 	add	arg03, ##41048
188d4     54 99 02 F6 | 	mov	arg04, local02
188d8     56 93 02 F6 | 	mov	arg01, local04
188dc     00 94 06 F6 | 	mov	arg02, #0
188e0     01 9A 06 F6 | 	mov	arg05, #1
188e4     C0 D0 B0 FD | 	call	#__system___basic_put
188e8     56 B1 02 F6 | 	mov	local06, local04
188ec     02 B0 66 F0 | 	shl	local06, #2
188f0     32 A7 02 F6 | 	mov	local01, objptr
188f4     52 00 00 FF 
188f8     68 A6 06 F1 | 	add	local01, ##42088
188fc     53 B1 02 F1 | 	add	local06, local01
18900     58 7B 62 FC | 	wrlong	result1, local06
18904                 | '    if 1024*i+j>amount then exit loop
18904     59 B1 02 F6 | 	mov	local06, local07
18908     0A B0 66 F0 | 	shl	local06, #10
1890c     57 B1 02 F1 | 	add	local06, local05
18910     54 B1 5A F2 | 	cmps	local06, local02 wcz
18914     01 B2 06 E1 |  if_be	add	local07, #1
18918     14 FF 9F ED |  if_be	jmp	#LR__2061
1891c                 | LR__2066
1891c     E7 F0 03 F6 | 	mov	ptra, fp
18920     F2 00 A0 FD | 	call	#popregs_
18924                 | _do_put_ret
18924     2D 00 64 FD | 	ret
18928                 | 
18928                 | ' 
18928                 | ' '-------------------- rad
18928                 | ' 
18928                 | ' sub do_rad
18928                 | _do_rad
18928     54 00 00 FF 
1892c     84 64 06 F1 | 	add	objptr, ##43140
18930     00 C0 9F FF 
18934     32 01 68 FC | 	wrlong	##1065353216, objptr
18938     04 64 06 F1 | 	add	objptr, #4
1893c     00 C0 9F FF 
18940     32 01 68 FC | 	wrlong	##1065353216, objptr
18944     54 00 00 FF 
18948     88 64 86 F1 | 	sub	objptr, ##43144
1894c                 | _do_rad_ret
1894c     2D 00 64 FD | 	ret
18950                 | 
18950                 | ' 
18950                 | ' '-------------------- rdpin
18950                 | ' 
18950                 | ' sub do_rdpin
18950                 | _do_rdpin
18950     00 CA 05 F6 | 	mov	COUNT_, #0
18954     E8 00 A0 FD | 	call	#pushregs_
18958     0C F0 07 F1 | 	add	ptra, #12
1895c     10 4D BF FD | 	call	#_pop
18960     E7 7A 62 FC | 	wrlong	result1, fp
18964     04 CE 05 F1 | 	add	fp, #4
18968     E7 7C 62 FC | 	wrlong	result2, fp
1896c     04 CE 05 F1 | 	add	fp, #4
18970     E7 7E 62 FC | 	wrlong	result3, fp
18974     08 CE 85 F1 | 	sub	fp, #8
18978     E7 92 02 F6 | 	mov	arg01, fp
1897c     CC 4E BF FD | 	call	#_converttoint
18980     3D 7B 8A FA | 	rdpin	result1, result1
18984     54 00 00 FF 
18988     EC 64 06 F1 | 	add	objptr, ##43244
1898c     32 7B 62 FC | 	wrlong	result1, objptr
18990     54 00 00 FF 
18994     EC 64 86 F1 | 	sub	objptr, ##43244
18998     08 CE 05 F1 | 	add	fp, #8
1899c     E7 3A 68 FC | 	wrlong	#29, fp
189a0     08 CE 85 F1 | 	sub	fp, #8
189a4     E7 08 68 FC | 	wrlong	#4, fp
189a8     E7 92 02 F6 | 	mov	arg01, fp
189ac     50 4D BF FD | 	call	#_push
189b0     E7 F0 03 F6 | 	mov	ptra, fp
189b4     F2 00 A0 FD | 	call	#popregs_
189b8                 | _do_rdpin_ret
189b8     2D 00 64 FD | 	ret
189bc                 | 
189bc                 | ' 
189bc                 | ' ' ----------------  read
189bc                 | ' 
189bc                 | ' function read_next_line() as string
189bc                 | _read_next_line
189bc     07 CA 05 F6 | 	mov	COUNT_, #7
189c0     E8 00 A0 FD | 	call	#pushregs_
189c4                 | ' if dataptr=$7FFFFFFF then return("")
189c4     52 00 00 FF 
189c8     D0 64 06 F1 | 	add	objptr, ##42192
189cc     32 A7 02 FB | 	rdlong	local01, objptr
189d0     52 00 00 FF 
189d4     D0 64 86 F1 | 	sub	objptr, ##42192
189d8     FF FF 3F FF 
189dc     FF A7 0E F2 | 	cmp	local01, ##2147483647 wz
189e0     99 01 00 AF 
189e4     AB 7A 06 A6 |  if_e	mov	result1, ##@LR__6065
189e8     C0 01 90 AD |  if_e	jmp	#LR__2077
189ec                 | ' do
189ec                 | LR__2070
189ec     32 93 02 F6 | 	mov	arg01, objptr
189f0     52 00 00 FF 
189f4     AC 92 06 F1 | 	add	arg01, ##42156
189f8     52 00 00 FF 
189fc     D0 64 06 F1 | 	add	objptr, ##42192
18a00     32 95 02 FB | 	rdlong	arg02, objptr
18a04     24 96 06 F6 | 	mov	arg03, #36
18a08     47 00 00 FF 
18a0c     04 64 86 F1 | 	sub	objptr, ##36356
18a10     14 B2 B0 FD | 	call	#_psram_spin2_read1
18a14                 | '  ' print dataptr
18a14                 | '   psram.read1(varptr(dataheader),dataptr,36) 
18a14                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
18a14     46 00 00 FF 
18a18     E0 65 06 F1 | 	add	objptr, ##36320
18a1c     32 A7 02 FB | 	rdlong	local01, objptr
18a20     52 00 00 FF 
18a24     AC 64 86 F1 | 	sub	objptr, ##42156
18a28     FF FF 7F FF 
18a2c     FF A7 0E F2 | 	cmp	local01, ##-1 wz
18a30     52 00 00 5F 
18a34     C0 64 06 51 |  if_ne	add	objptr, ##42176
18a38     32 A7 02 5B |  if_ne	rdlong	local01, objptr
18a3c     10 64 06 51 |  if_ne	add	objptr, #16
18a40     32 A7 62 5C |  if_ne	wrlong	local01, objptr
18a44     52 00 00 5F 
18a48     D0 64 86 51 |  if_ne	sub	objptr, ##42192
18a4c     52 00 00 FF 
18a50     C0 64 06 F1 | 	add	objptr, ##42176
18a54     32 A7 02 FB | 	rdlong	local01, objptr
18a58     52 00 00 FF 
18a5c     C0 64 86 F1 | 	sub	objptr, ##42176
18a60     FF FF 3F FF 
18a64     FF A7 0E F2 | 	cmp	local01, ##2147483647 wz
18a68     52 00 00 5F 
18a6c     AC 64 06 51 |  if_ne	add	objptr, ##42156
18a70     32 A9 02 5B |  if_ne	rdlong	local02, objptr
18a74     52 00 00 5F 
18a78     AC 64 86 51 |  if_ne	sub	objptr, ##42156
18a7c     FF FF 7F 5F 
18a80     FF A9 0E 52 |  if_ne	cmp	local02, ##-1 wz
18a84     52 00 00 5F 
18a88     CC 64 06 51 |  if_ne	add	objptr, ##42188
18a8c     32 AB 02 5B |  if_ne	rdlong	local03, objptr
18a90     52 00 00 5F 
18a94     CC 64 86 51 |  if_ne	sub	objptr, ##42188
18a98     B7 AA 0E 52 |  if_ne	cmp	local03, #183 wz
18a9c     4C FF 9F 5D |  if_ne	jmp	#LR__2070
18aa0                 | ' if dataheader(8)=token_data then 
18aa0     52 00 00 FF 
18aa4     CC 64 06 F1 | 	add	objptr, ##42188
18aa8     32 A7 02 FB | 	rdlong	local01, objptr
18aac     52 00 00 FF 
18ab0     CC 64 86 F1 | 	sub	objptr, ##42188
18ab4     B7 A6 0E F2 | 	cmp	local01, #183 wz
18ab8     E0 00 90 5D |  if_ne	jmp	#LR__2075
18abc     52 00 00 FF 
18ac0     B4 64 06 F1 | 	add	objptr, ##42164
18ac4     32 A7 02 FB | 	rdlong	local01, objptr
18ac8     02 00 00 FF 
18acc     18 64 06 F1 | 	add	objptr, ##1048
18ad0     32 A7 62 FC | 	wrlong	local01, objptr
18ad4     02 00 00 FF 
18ad8     14 64 86 F1 | 	sub	objptr, ##1044
18adc     32 AD 02 FB | 	rdlong	local04, objptr
18ae0     02 00 00 FF 
18ae4     0C 64 06 F1 | 	add	objptr, ##1036
18ae8     32 AD 62 FC | 	wrlong	local04, objptr
18aec                 | '  'print "data found at line "; dataheader(0)
18aec                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
18aec     00 AE 06 F6 | 	mov	local05, #0
18af0     54 00 00 FF 
18af4     C4 64 86 F1 | 	sub	objptr, ##43204
18af8                 | LR__2071
18af8     56 AF 52 F2 | 	cmps	local05, local04 wc
18afc     3C 00 90 3D |  if_ae	jmp	#LR__2072
18b00     54 00 00 FF 
18b04     CC 64 06 F1 | 	add	objptr, ##43212
18b08     32 93 02 FB | 	rdlong	arg01, objptr
18b0c     54 00 00 FF 
18b10     CC 64 86 F1 | 	sub	objptr, ##43212
18b14     57 93 02 F1 | 	add	arg01, local05
18b18     D4 85 B0 FD | 	call	#_pspeek
18b1c     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
18b20     EC DA B0 FD | 	call	#__system__Chr_S
18b24     3D 95 02 F6 | 	mov	arg02, result1
18b28     58 93 02 F6 | 	mov	arg01, local06
18b2c     D0 C0 B0 FD | 	call	#__system___string_concat
18b30     3D B1 02 F6 | 	mov	local06, result1
18b34     01 AE 06 F1 | 	add	local05, #1
18b38     BC FF 9F FD | 	jmp	#LR__2071
18b3c                 | LR__2072
18b3c     99 01 00 FF 
18b40     AC 96 06 F6 | 	mov	arg03, ##@LR__6066
18b44     01 92 06 F6 | 	mov	arg01, #1
18b48     58 95 02 F6 | 	mov	arg02, local06
18b4c     44 DE B0 FD | 	call	#__system__Instr
18b50     3D AF 02 F6 | 	mov	local05, result1
18b54     58 93 02 F6 | 	mov	arg01, local06
18b58     49 B3 02 F6 | 	mov	local07, arg01
18b5c     D7 06 48 FB | 	callpa	#(@LR__2074-@LR__2073)>>2,fcache_load_ptr_
18b60                 | LR__2073
18b60     59 7B CA FA | 	rdbyte	result1, local07 wz
18b64     01 B2 06 51 |  if_ne	add	local07, #1
18b68     F4 FF 9F 5D |  if_ne	jmp	#LR__2073
18b6c                 | LR__2074
18b6c     49 B3 82 F1 | 	sub	local07, arg01
18b70     59 95 02 F6 | 	mov	arg02, local07
18b74     57 95 82 F1 | 	sub	arg02, local05
18b78     04 94 86 F1 | 	sub	arg02, #4
18b7c     58 93 02 F6 | 	mov	arg01, local06
18b80     50 D9 B0 FD | 	call	#__system__Right_S
18b84     3D 93 02 F6 | 	mov	arg01, result1
18b88     50 DD B0 FD | 	call	#__system__RTrim_S
18b8c     3D 93 02 F6 | 	mov	arg01, result1
18b90     88 DC B0 FD | 	call	#__system__LTrim_S
18b94     3D B1 02 F6 | 	mov	local06, result1
18b98     0C 00 90 FD | 	jmp	#LR__2076
18b9c                 | LR__2075
18b9c                 | '   return ("") 'todo proper err
18b9c     99 01 00 FF 
18ba0     B1 7A 06 F6 | 	mov	result1, ##@LR__6067
18ba4     04 00 90 FD | 	jmp	#LR__2077
18ba8                 | LR__2076
18ba8                 | ' return readline
18ba8     58 7B 02 F6 | 	mov	result1, local06
18bac                 | LR__2077
18bac     E7 F0 03 F6 | 	mov	ptra, fp
18bb0     F2 00 A0 FD | 	call	#popregs_
18bb4                 | _read_next_line_ret
18bb4     2D 00 64 FD | 	ret
18bb8                 | 
18bb8                 | ' 
18bb8                 | ' sub do_read
18bb8                 | _do_read
18bb8     17 CA 05 F6 | 	mov	COUNT_, #23
18bbc     E8 00 A0 FD | 	call	#pushregs_
18bc0     58 F1 07 F1 | 	add	ptra, #344
18bc4     4C 00 00 FF 
18bc8     24 64 06 F1 | 	add	objptr, ##38948
18bcc     32 AD 02 FB | 	rdlong	local04, objptr
18bd0     56 AF 02 F6 | 	mov	local05, local04
18bd4     01 AE 66 F0 | 	shl	local05, #1
18bd8     56 AF 02 F1 | 	add	local05, local04
18bdc     02 AE 66 F0 | 	shl	local05, #2
18be0     03 00 00 FF 
18be4     04 64 86 F1 | 	sub	objptr, ##1540
18be8     32 B1 02 F6 | 	mov	local06, objptr
18bec     32 AF 02 F1 | 	add	local05, objptr
18bf0     57 B3 02 FB | 	rdlong	local07, local05
18bf4                 | ' 
18bf4                 | ' 
18bf4                 | ' numpar=compiledline(lineptr_e).result.uresult
18bf4                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
18bf4     01 B2 16 F2 | 	cmp	local07, #1 wc
18bf8     49 00 00 FF 
18bfc     20 64 86 F1 | 	sub	objptr, ##37408
18c00     08 00 90 CD |  if_b	jmp	#LR__2080
18c04     41 B2 16 F2 | 	cmp	local07, #65 wc
18c08     50 00 90 CD |  if_b	jmp	#LR__2081
18c0c                 | LR__2080
18c0c     00 92 06 F6 | 	mov	arg01, #0
18c10     14 15 B1 FD | 	call	#__system___getiolock_0622
18c14     3D 93 02 F6 | 	mov	arg01, result1
18c18     88 BF B0 FD | 	call	#__system___lockmem
18c1c     99 01 00 FF 
18c20     B2 94 06 F6 | 	mov	arg02, ##@LR__6068
18c24     00 92 06 F6 | 	mov	arg01, #0
18c28     00 96 06 F6 | 	mov	arg03, #0
18c2c     68 CC B0 FD | 	call	#__system___basic_print_string
18c30     00 92 06 F6 | 	mov	arg01, #0
18c34     F0 14 B1 FD | 	call	#__system___getiolock_0622
18c38     3D 01 68 FC | 	wrlong	#0, result1
18c3c     52 00 00 FF 
18c40     94 64 06 F1 | 	add	objptr, ##42132
18c44     32 95 02 FB | 	rdlong	arg02, objptr
18c48     52 00 00 FF 
18c4c     94 64 86 F1 | 	sub	objptr, ##42132
18c50     27 92 06 F6 | 	mov	arg01, #39
18c54     28 82 B0 FD | 	call	#_printerror
18c58     A8 09 90 FD | 	jmp	#LR__2128
18c5c                 | LR__2081
18c5c                 | ' i=numpar-1
18c5c                 | ' if readline="" then readline=read_next_line() ': print readline
18c5c     54 00 00 FF 
18c60     B8 64 06 F1 | 	add	objptr, ##43192
18c64     32 93 02 FB | 	rdlong	arg01, objptr
18c68     54 00 00 FF 
18c6c     B8 64 86 F1 | 	sub	objptr, ##43192
18c70     99 01 00 FF 
18c74     BC 94 06 F6 | 	mov	arg02, ##@LR__6069
18c78     50 BF B0 FD | 	call	#__system___string_cmp
18c7c     00 7A 0E F2 | 	cmp	result1, #0 wz
18c80     18 00 90 5D |  if_ne	jmp	#LR__2082
18c84     34 FD BF FD | 	call	#_read_next_line
18c88     54 00 00 FF 
18c8c     B8 64 06 F1 | 	add	objptr, ##43192
18c90     32 7B 62 FC | 	wrlong	result1, objptr
18c94     54 00 00 FF 
18c98     B8 64 86 F1 | 	sub	objptr, ##43192
18c9c                 | LR__2082
18c9c                 | ' if readline="" then printerror(55,runheader(0)) :return
18c9c     54 00 00 FF 
18ca0     B8 64 06 F1 | 	add	objptr, ##43192
18ca4     32 93 02 FB | 	rdlong	arg01, objptr
18ca8     54 00 00 FF 
18cac     B8 64 86 F1 | 	sub	objptr, ##43192
18cb0     99 01 00 FF 
18cb4     BD 94 06 F6 | 	mov	arg02, ##@LR__6070
18cb8     10 BF B0 FD | 	call	#__system___string_cmp
18cbc     00 7A 0E F2 | 	cmp	result1, #0 wz
18cc0     20 00 90 5D |  if_ne	jmp	#LR__2083
18cc4     52 00 00 FF 
18cc8     94 64 06 F1 | 	add	objptr, ##42132
18ccc     32 95 02 FB | 	rdlong	arg02, objptr
18cd0     52 00 00 FF 
18cd4     94 64 86 F1 | 	sub	objptr, ##42132
18cd8     37 92 06 F6 | 	mov	arg01, #55
18cdc     A0 81 B0 FD | 	call	#_printerror
18ce0     20 09 90 FD | 	jmp	#LR__2128
18ce4                 | LR__2083
18ce4     00 B4 06 F6 | 	mov	local08, #0
18ce8     59 B7 02 F6 | 	mov	local09, local07
18cec     01 B6 86 F1 | 	sub	local09, #1
18cf0                 | ' j=0
18cf0                 | ' i=numpar-1
18cf0                 | ' do
18cf0                 | LR__2084
18cf0                 | '   do
18cf0                 | LR__2085
18cf0     54 00 00 FF 
18cf4     B8 64 06 F1 | 	add	objptr, ##43192
18cf8     32 95 02 FB | 	rdlong	arg02, objptr
18cfc     54 00 00 FF 
18d00     B8 64 86 F1 | 	sub	objptr, ##43192
18d04     99 01 00 FF 
18d08     BE 96 06 F6 | 	mov	arg03, ##@LR__6071
18d0c     01 92 06 F6 | 	mov	arg01, #1
18d10     80 DC B0 FD | 	call	#__system__Instr
18d14     3D 97 02 F6 | 	mov	arg03, result1
18d18                 | '     comma=instr(1,readline,"'") : if comma>0 then readline=left$(readline,comma-1) ' allows comments in data
18d18     01 96 16 F2 | 	cmp	arg03, #1 wc
18d1c     34 00 90 CD |  if_b	jmp	#LR__2086
18d20     54 00 00 FF 
18d24     B8 64 06 F1 | 	add	objptr, ##43192
18d28     32 93 02 FB | 	rdlong	arg01, objptr
18d2c     54 00 00 FF 
18d30     B8 64 86 F1 | 	sub	objptr, ##43192
18d34     01 96 86 F1 | 	sub	arg03, #1
18d38     4B 95 02 F6 | 	mov	arg02, arg03
18d3c     0C D7 B0 FD | 	call	#__system__Left_S
18d40     54 00 00 FF 
18d44     B8 64 06 F1 | 	add	objptr, ##43192
18d48     32 7B 62 FC | 	wrlong	result1, objptr
18d4c     54 00 00 FF 
18d50     B8 64 86 F1 | 	sub	objptr, ##43192
18d54                 | LR__2086
18d54     54 00 00 FF 
18d58     B8 64 06 F1 | 	add	objptr, ##43192
18d5c     32 95 02 FB | 	rdlong	arg02, objptr
18d60     54 00 00 FF 
18d64     B8 64 86 F1 | 	sub	objptr, ##43192
18d68     99 01 00 FF 
18d6c     C0 96 06 F6 | 	mov	arg03, ##@LR__6072
18d70     01 92 06 F6 | 	mov	arg01, #1
18d74     1C DC B0 FD | 	call	#__system__Instr
18d78     3D B9 02 F6 | 	mov	local10, result1
18d7c                 | '     comma=instr(1,readline,",")  
18d7c                 | '       if comma>0  then 
18d7c     01 B8 16 F2 | 	cmp	local10, #1 wc
18d80     7C 00 90 CD |  if_b	jmp	#LR__2089
18d84     54 00 00 FF 
18d88     B8 64 06 F1 | 	add	objptr, ##43192
18d8c     32 93 02 FB | 	rdlong	arg01, objptr
18d90     54 00 00 FF 
18d94     B8 64 86 F1 | 	sub	objptr, ##43192
18d98     5C 95 02 F6 | 	mov	arg02, local10
18d9c     01 94 86 F1 | 	sub	arg02, #1
18da0     A8 D6 B0 FD | 	call	#__system__Left_S
18da4     3D BB 02 F6 | 	mov	local11, result1
18da8     54 00 00 FF 
18dac     B8 64 06 F1 | 	add	objptr, ##43192
18db0     32 B1 02 FB | 	rdlong	local06, objptr
18db4     54 00 00 FF 
18db8     B8 64 86 F1 | 	sub	objptr, ##43192
18dbc     58 93 02 F6 | 	mov	arg01, local06
18dc0     49 BD 02 F6 | 	mov	local12, arg01
18dc4     D7 06 48 FB | 	callpa	#(@LR__2088-@LR__2087)>>2,fcache_load_ptr_
18dc8                 | LR__2087
18dc8     5E 7B CA FA | 	rdbyte	result1, local12 wz
18dcc     01 BC 06 51 |  if_ne	add	local12, #1
18dd0     F4 FF 9F 5D |  if_ne	jmp	#LR__2087
18dd4                 | LR__2088
18dd4     49 BD 82 F1 | 	sub	local12, arg01
18dd8     5E 95 02 F6 | 	mov	arg02, local12
18ddc     5C 95 82 F1 | 	sub	arg02, local10
18de0     58 93 02 F6 | 	mov	arg01, local06
18de4     EC D6 B0 FD | 	call	#__system__Right_S
18de8     54 00 00 FF 
18dec     B8 64 06 F1 | 	add	objptr, ##43192
18df0     32 7B 62 FC | 	wrlong	result1, objptr
18df4     54 00 00 FF 
18df8     B8 64 86 F1 | 	sub	objptr, ##43192
18dfc     40 00 90 FD | 	jmp	#LR__2090
18e00                 | LR__2089
18e00     54 00 00 FF 
18e04     B8 64 06 F1 | 	add	objptr, ##43192
18e08     32 93 02 FB | 	rdlong	arg01, objptr
18e0c     54 00 00 FF 
18e10     B8 64 86 F1 | 	sub	objptr, ##43192
18e14     C4 DA B0 FD | 	call	#__system__RTrim_S
18e18     3D 93 02 F6 | 	mov	arg01, result1
18e1c     FC D9 B0 FD | 	call	#__system__LTrim_S
18e20     3D BB 02 F6 | 	mov	local11, result1
18e24     99 01 00 FF 
18e28     C2 BE 06 F6 | 	mov	local13, ##@LR__6073
18e2c     54 00 00 FF 
18e30     B8 64 06 F1 | 	add	objptr, ##43192
18e34     32 BF 62 FC | 	wrlong	local13, objptr
18e38     54 00 00 FF 
18e3c     B8 64 86 F1 | 	sub	objptr, ##43192
18e40                 | LR__2090
18e40                 | '      
18e40                 | '      if part$<>"" then j=j+1
18e40     99 01 00 FF 
18e44     C3 94 06 F6 | 	mov	arg02, ##@LR__6074
18e48     5D 93 02 F6 | 	mov	arg01, local11
18e4c     7C BD B0 FD | 	call	#__system___string_cmp
18e50     00 7A 0E F2 | 	cmp	result1, #0 wz
18e54     01 B4 06 51 |  if_ne	add	local08, #1
18e58     5B 97 02 F6 | 	mov	arg03, local09
18e5c     02 96 66 F0 | 	shl	arg03, #2
18e60     E7 AC 02 F6 | 	mov	local04, fp
18e64     2C AC 06 F1 | 	add	local04, #44
18e68     56 97 02 F1 | 	add	arg03, local04
18e6c     4B BB 62 FC | 	wrlong	local11, arg03
18e70     01 B6 86 F1 | 	sub	local09, #1
18e74                 | '      args(i)=part$  
18e74                 | '      i=i-1
18e74                 | '     if readline="" then readline=read_next_line() 
18e74     54 00 00 FF 
18e78     B8 64 06 F1 | 	add	objptr, ##43192
18e7c     32 93 02 FB | 	rdlong	arg01, objptr
18e80     54 00 00 FF 
18e84     B8 64 86 F1 | 	sub	objptr, ##43192
18e88     99 01 00 FF 
18e8c     C4 94 06 F6 | 	mov	arg02, ##@LR__6075
18e90     38 BD B0 FD | 	call	#__system___string_cmp
18e94     00 7A 0E F2 | 	cmp	result1, #0 wz
18e98     18 00 90 5D |  if_ne	jmp	#LR__2091
18e9c     1C FB BF FD | 	call	#_read_next_line
18ea0     54 00 00 FF 
18ea4     B8 64 06 F1 | 	add	objptr, ##43192
18ea8     32 7B 62 FC | 	wrlong	result1, objptr
18eac     54 00 00 FF 
18eb0     B8 64 86 F1 | 	sub	objptr, ##43192
18eb4                 | LR__2091
18eb4     00 B6 56 F2 | 	cmps	local09, #0 wc
18eb8     28 00 90 CD |  if_b	jmp	#LR__2092
18ebc     54 00 00 FF 
18ec0     B8 64 06 F1 | 	add	objptr, ##43192
18ec4     32 93 02 FB | 	rdlong	arg01, objptr
18ec8     54 00 00 FF 
18ecc     B8 64 86 F1 | 	sub	objptr, ##43192
18ed0     99 01 00 FF 
18ed4     C5 94 06 F6 | 	mov	arg02, ##@LR__6076
18ed8     F0 BC B0 FD | 	call	#__system___string_cmp
18edc     00 7A 0E F2 | 	cmp	result1, #0 wz
18ee0     0C FE 9F 5D |  if_ne	jmp	#LR__2085
18ee4                 | LR__2092
18ee4     00 B6 56 F2 | 	cmps	local09, #0 wc
18ee8     04 FE 9F 3D |  if_ae	jmp	#LR__2084
18eec                 | ' if j<numpar then printerror(55,runheader(0))
18eec     59 B5 52 F2 | 	cmps	local08, local07 wc
18ef0     52 00 00 CF 
18ef4     94 64 06 C1 |  if_b	add	objptr, ##42132
18ef8     32 95 02 CB |  if_b	rdlong	arg02, objptr
18efc     52 00 00 CF 
18f00     94 64 86 C1 |  if_b	sub	objptr, ##42132
18f04     37 92 06 C6 |  if_b	mov	arg01, #55
18f08     74 7F B0 CD |  if_b	call	#_printerror
18f0c                 | ' 
18f0c                 | ' for i=0 to numpar-1
18f0c     00 B6 06 F6 | 	mov	local09, #0
18f10     59 C1 02 F6 | 	mov	local14, local07
18f14                 | LR__2093
18f14     60 B7 52 F2 | 	cmps	local09, local14 wc
18f18     E8 06 90 3D |  if_ae	jmp	#LR__2127
18f1c                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
18f1c     5B AF 02 F6 | 	mov	local05, local09
18f20     02 AE 66 F0 | 	shl	local05, #2
18f24     E7 B0 02 F6 | 	mov	local06, fp
18f28     2C B0 06 F1 | 	add	local06, #44
18f2c     58 AF 02 F1 | 	add	local05, local06
18f30     57 93 02 FB | 	rdlong	arg01, local05
18f34     1C DB BE FD | 	call	#_isnum
18f38     3D BF 02 F6 | 	mov	local13, result1
18f3c     5B C3 02 F6 | 	mov	local15, local09
18f40     02 C2 66 F0 | 	shl	local15, #2
18f44     E7 C4 02 F6 | 	mov	local16, fp
18f48     2C C4 06 F1 | 	add	local16, #44
18f4c     62 C3 02 F1 | 	add	local15, local16
18f50     61 93 02 FB | 	rdlong	arg01, local15
18f54     E8 DE BE FD | 	call	#_isint
18f58     07 7A 66 F7 | 	signx	result1, #7
18f5c     3D BF 2A F5 | 	andn	local13, result1 wz
18f60     54 00 00 5F 
18f64     EC 64 06 51 |  if_ne	add	objptr, ##43244
18f68     32 3D 68 5C |  if_ne	wrlong	#30, objptr
18f6c     54 00 00 5F 
18f70     EC 64 86 51 |  if_ne	sub	objptr, ##43244
18f74                 | '   if isint(args(i)) then r=result_int 
18f74     5B AD 02 F6 | 	mov	local04, local09
18f78     02 AC 66 F0 | 	shl	local04, #2
18f7c     E7 AE 02 F6 | 	mov	local05, fp
18f80     2C AE 06 F1 | 	add	local05, #44
18f84     57 AD 02 F1 | 	add	local04, local05
18f88     56 93 02 FB | 	rdlong	arg01, local04
18f8c     B0 DE BE FD | 	call	#_isint
18f90     00 7A 0E F2 | 	cmp	result1, #0 wz
18f94     54 00 00 5F 
18f98     EC 64 06 51 |  if_ne	add	objptr, ##43244
18f9c     32 39 68 5C |  if_ne	wrlong	#28, objptr
18fa0     54 00 00 5F 
18fa4     EC 64 86 51 |  if_ne	sub	objptr, ##43244
18fa8                 | '   if isdec(args(i)) then r=result_uint 
18fa8     5B AD 02 F6 | 	mov	local04, local09
18fac     02 AC 66 F0 | 	shl	local04, #2
18fb0     E7 AE 02 F6 | 	mov	local05, fp
18fb4     2C AE 06 F1 | 	add	local05, #44
18fb8     57 AD 02 F1 | 	add	local04, local05
18fbc     56 93 02 FB | 	rdlong	arg01, local04
18fc0     20 E1 BE FD | 	call	#_isdec
18fc4     00 7A 0E F2 | 	cmp	result1, #0 wz
18fc8     54 00 00 5F 
18fcc     EC 64 06 51 |  if_ne	add	objptr, ##43244
18fd0     32 3B 68 5C |  if_ne	wrlong	#29, objptr
18fd4     54 00 00 5F 
18fd8     EC 64 86 51 |  if_ne	sub	objptr, ##43244
18fdc                 | '   if not isnum(args(i)) then 
18fdc     5B AF 02 F6 | 	mov	local05, local09
18fe0     02 AE 66 F0 | 	shl	local05, #2
18fe4     E7 B0 02 F6 | 	mov	local06, fp
18fe8     2C B0 06 F1 | 	add	local06, #44
18fec     58 AF 02 F1 | 	add	local05, local06
18ff0     57 93 02 FB | 	rdlong	arg01, local05
18ff4     5C DA BE FD | 	call	#_isnum
18ff8     07 7A 66 F7 | 	signx	result1, #7
18ffc     3D 7B 22 F6 | 	not	result1, result1
19000     00 7A 0E F2 | 	cmp	result1, #0 wz
19004     FC 00 90 AD |  if_e	jmp	#LR__2098
19008     54 00 00 FF 
1900c     EC 64 06 F1 | 	add	objptr, ##43244
19010     32 57 68 FC | 	wrlong	#43, objptr
19014     54 00 00 FF 
19018     EC 64 86 F1 | 	sub	objptr, ##43244
1901c     5B AD 02 F6 | 	mov	local04, local09
19020     02 AC 66 F0 | 	shl	local04, #2
19024     E7 AE 02 F6 | 	mov	local05, fp
19028     2C AE 06 F1 | 	add	local05, #44
1902c     57 AD 02 F1 | 	add	local04, local05
19030     56 93 02 FB | 	rdlong	arg01, local04
19034     49 BD 02 F6 | 	mov	local12, arg01
19038     D7 06 48 FB | 	callpa	#(@LR__2095-@LR__2094)>>2,fcache_load_ptr_
1903c                 | LR__2094
1903c     5E 7B CA FA | 	rdbyte	result1, local12 wz
19040     01 BC 06 51 |  if_ne	add	local12, #1
19044     F4 FF 9F 5D |  if_ne	jmp	#LR__2094
19048                 | LR__2095
19048     49 BD 82 F1 | 	sub	local12, arg01
1904c     5E C7 02 F6 | 	mov	local17, local12
19050     54 00 00 FF 
19054     74 64 06 F1 | 	add	objptr, ##43124
19058     32 93 02 FB | 	rdlong	arg01, objptr
1905c     63 93 82 F1 | 	sub	arg01, local17
19060     04 92 86 F1 | 	sub	arg01, #4
19064     03 92 26 F5 | 	andn	arg01, #3
19068     32 93 62 FC | 	wrlong	arg01, objptr
1906c     54 00 00 FF 
19070     74 64 86 F1 | 	sub	objptr, ##43124
19074     63 95 02 F6 | 	mov	arg02, local17
19078     9C 7F B0 FD | 	call	#_pslpoke
1907c                 | '     pslpoke memtop,l
1907c                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
1907c     01 B4 06 F6 | 	mov	local08, #1
19080     63 C9 02 F6 | 	mov	local18, local17
19084     01 C8 06 F1 | 	add	local18, #1
19088                 | LR__2096
19088     64 B5 52 F2 | 	cmps	local08, local18 wc
1908c     60 00 90 3D |  if_ae	jmp	#LR__2097
19090     54 00 00 FF 
19094     74 64 06 F1 | 	add	objptr, ##43124
19098     32 BF 02 FB | 	rdlong	local13, objptr
1909c     54 00 00 FF 
190a0     74 64 86 F1 | 	sub	objptr, ##43124
190a4     03 BE 06 F1 | 	add	local13, #3
190a8     5A BF 02 F1 | 	add	local13, local08
190ac     5B C3 02 F6 | 	mov	local15, local09
190b0     02 C2 66 F0 | 	shl	local15, #2
190b4     E7 C4 02 F6 | 	mov	local16, fp
190b8     2C C4 06 F1 | 	add	local16, #44
190bc     62 C3 02 F1 | 	add	local15, local16
190c0     61 93 02 FB | 	rdlong	arg01, local15
190c4     5A B1 02 F6 | 	mov	local06, local08
190c8     01 C2 06 F6 | 	mov	local15, #1
190cc     58 95 02 F6 | 	mov	arg02, local06
190d0     01 96 06 F6 | 	mov	arg03, #1
190d4     8C D4 B0 FD | 	call	#__system__Mid_S
190d8     3D AF 02 F6 | 	mov	local05, result1
190dc     57 95 C2 FA | 	rdbyte	arg02, local05
190e0     5F 93 02 F6 | 	mov	arg01, local13
190e4     C0 7F B0 FD | 	call	#_pspoke
190e8     01 B4 06 F1 | 	add	local08, #1
190ec     98 FF 9F FD | 	jmp	#LR__2096
190f0                 | LR__2097
190f0     54 00 00 FF 
190f4     74 64 06 F1 | 	add	objptr, ##43124
190f8     32 CB 02 FB | 	rdlong	local19, objptr
190fc     54 00 00 FF 
19100     74 64 86 F1 | 	sub	objptr, ##43124
19104                 | LR__2098
19104     68 45 BF FD | 	call	#_pop
19108     3E CD 02 F6 | 	mov	local20, result2
1910c     3F AD 02 F6 | 	mov	local04, result3
19110     3D A7 02 F6 | 	mov	local01, result1
19114     66 A9 02 F6 | 	mov	local02, local20
19118     56 AB 02 F6 | 	mov	local03, local04
1911c                 | '   t1=pop() 
1911c                 | '   if i>=numpar-j then
1911c     59 BF 02 F6 | 	mov	local13, local07
19120     5A BF 82 F1 | 	sub	local13, local08
19124     5F B7 52 F2 | 	cmps	local09, local13 wc
19128     D0 04 90 CD |  if_b	jmp	#LR__2126
1912c     54 CF 02 F6 | 	mov	local21, local02
19130                 | '     vartype=t1.result.twowords(1)
19130                 | '     select case vartype
19130     67 D1 0A F6 | 	mov	local22, local21 wz
19134     64 00 90 AD |  if_e	jmp	#LR__2099
19138     00 D1 0E F2 | 	cmp	local22, #256 wz
1913c     64 00 90 AD |  if_e	jmp	#LR__2100
19140     01 D1 0E F2 | 	cmp	local22, #257 wz
19144     64 00 90 AD |  if_e	jmp	#LR__2101
19148     02 D1 0E F2 | 	cmp	local22, #258 wz
1914c     64 00 90 AD |  if_e	jmp	#LR__2102
19150     03 D1 0E F2 | 	cmp	local22, #259 wz
19154     64 00 90 AD |  if_e	jmp	#LR__2103
19158     04 D1 0E F2 | 	cmp	local22, #260 wz
1915c     64 00 90 AD |  if_e	jmp	#LR__2104
19160     05 D1 0E F2 | 	cmp	local22, #261 wz
19164     64 00 90 AD |  if_e	jmp	#LR__2105
19168     06 D1 0E F2 | 	cmp	local22, #262 wz
1916c     64 00 90 AD |  if_e	jmp	#LR__2106
19170     07 D1 0E F2 | 	cmp	local22, #263 wz
19174     64 00 90 AD |  if_e	jmp	#LR__2107
19178     08 D1 0E F2 | 	cmp	local22, #264 wz
1917c     64 00 90 AD |  if_e	jmp	#LR__2108
19180     09 D1 0E F2 | 	cmp	local22, #265 wz
19184     64 00 90 AD |  if_e	jmp	#LR__2109
19188     0A D1 0E F2 | 	cmp	local22, #266 wz
1918c     64 00 90 AD |  if_e	jmp	#LR__2110
19190     0B D1 0E F2 | 	cmp	local22, #267 wz
19194     64 00 90 AD |  if_e	jmp	#LR__2111
19198     68 00 90 FD | 	jmp	#LR__2112
1919c                 | LR__2099
1919c     0C D2 06 F6 | 	mov	local23, #12
191a0     64 00 90 FD | 	jmp	#LR__2113
191a4                 | LR__2100
191a4     0C D2 06 F6 | 	mov	local23, #12
191a8     5C 00 90 FD | 	jmp	#LR__2113
191ac                 | LR__2101
191ac     01 D2 06 F6 | 	mov	local23, #1
191b0     54 00 90 FD | 	jmp	#LR__2113
191b4                 | LR__2102
191b4     01 D2 06 F6 | 	mov	local23, #1
191b8     4C 00 90 FD | 	jmp	#LR__2113
191bc                 | LR__2103
191bc     02 D2 06 F6 | 	mov	local23, #2
191c0     44 00 90 FD | 	jmp	#LR__2113
191c4                 | LR__2104
191c4     02 D2 06 F6 | 	mov	local23, #2
191c8     3C 00 90 FD | 	jmp	#LR__2113
191cc                 | LR__2105
191cc     04 D2 06 F6 | 	mov	local23, #4
191d0     34 00 90 FD | 	jmp	#LR__2113
191d4                 | LR__2106
191d4     04 D2 06 F6 | 	mov	local23, #4
191d8     2C 00 90 FD | 	jmp	#LR__2113
191dc                 | LR__2107
191dc     08 D2 06 F6 | 	mov	local23, #8
191e0     24 00 90 FD | 	jmp	#LR__2113
191e4                 | LR__2108
191e4     08 D2 06 F6 | 	mov	local23, #8
191e8     1C 00 90 FD | 	jmp	#LR__2113
191ec                 | LR__2109
191ec     06 D2 06 F6 | 	mov	local23, #6
191f0     14 00 90 FD | 	jmp	#LR__2113
191f4                 | LR__2110
191f4     08 D2 06 F6 | 	mov	local23, #8
191f8     0C 00 90 FD | 	jmp	#LR__2113
191fc                 | LR__2111
191fc     05 D2 06 F6 | 	mov	local23, #5
19200     04 00 90 FD | 	jmp	#LR__2113
19204                 | LR__2112
19204     0C D2 06 F6 | 	mov	local23, #12
19208                 | LR__2113
19208                 | '     if esize=12 andalso t1.result.uresult<$80000 then
19208     0C D2 0E F2 | 	cmp	local23, #12 wz
1920c     34 01 90 5D |  if_ne	jmp	#LR__2117
19210     00 04 00 FF 
19214     00 A6 16 F2 | 	cmp	local01, ##524288 wc
19218     28 01 90 3D |  if_ae	jmp	#LR__2117
1921c                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
1921c     54 00 00 FF 
19220     EC 64 06 F1 | 	add	objptr, ##43244
19224     32 BF 02 FB | 	rdlong	local13, objptr
19228     54 00 00 FF 
1922c     EC 64 86 F1 | 	sub	objptr, ##43244
19230     1C BE 0E F2 | 	cmp	local13, #28 wz
19234     2C 00 90 5D |  if_ne	jmp	#LR__2114
19238     5B AF 02 F6 | 	mov	local05, local09
1923c     02 AE 66 F0 | 	shl	local05, #2
19240     E7 B0 02 F6 | 	mov	local06, fp
19244     2C B0 06 F1 | 	add	local06, #44
19248     58 AF 02 F1 | 	add	local05, local06
1924c     57 93 02 FB | 	rdlong	arg01, local05
19250     00 94 06 F6 | 	mov	arg02, #0
19254     A0 E6 B0 FD | 	call	#__system____builtin_atoi
19258     3D 95 02 F6 | 	mov	arg02, result1
1925c     53 93 02 F6 | 	mov	arg01, local01
19260     49 95 62 FC | 	wrlong	arg02, arg01
19264                 | LR__2114
19264                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
19264     54 00 00 FF 
19268     EC 64 06 F1 | 	add	objptr, ##43244
1926c     32 BF 02 FB | 	rdlong	local13, objptr
19270     54 00 00 FF 
19274     EC 64 86 F1 | 	sub	objptr, ##43244
19278     1D BE 0E F2 | 	cmp	local13, #29 wz
1927c     2C 00 90 5D |  if_ne	jmp	#LR__2115
19280     5B AF 02 F6 | 	mov	local05, local09
19284     02 AE 66 F0 | 	shl	local05, #2
19288     E7 B0 02 F6 | 	mov	local06, fp
1928c     2C B0 06 F1 | 	add	local06, #44
19290     58 AF 02 F1 | 	add	local05, local06
19294     57 93 02 FB | 	rdlong	arg01, local05
19298     00 94 06 F6 | 	mov	arg02, #0
1929c     58 E6 B0 FD | 	call	#__system____builtin_atoi
192a0     3D 95 02 F6 | 	mov	arg02, result1
192a4     53 93 02 F6 | 	mov	arg01, local01
192a8     49 95 62 FC | 	wrlong	arg02, arg01
192ac                 | LR__2115
192ac                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
192ac     54 00 00 FF 
192b0     EC 64 06 F1 | 	add	objptr, ##43244
192b4     32 BF 02 FB | 	rdlong	local13, objptr
192b8     54 00 00 FF 
192bc     EC 64 86 F1 | 	sub	objptr, ##43244
192c0     1E BE 0E F2 | 	cmp	local13, #30 wz
192c4     3C 00 90 5D |  if_ne	jmp	#LR__2116
192c8     5B AD 02 F6 | 	mov	local04, local09
192cc     02 AC 66 F0 | 	shl	local04, #2
192d0     E7 AE 02 F6 | 	mov	local05, fp
192d4     2C AE 06 F1 | 	add	local05, #44
192d8     57 AD 02 F1 | 	add	local04, local05
192dc     56 93 02 FB | 	rdlong	arg01, local04
192e0     AC E7 B0 FD | 	call	#__system____builtin_atof
192e4     28 CE 05 F1 | 	add	fp, #40
192e8     E7 7A 62 FC | 	wrlong	result1, fp
192ec     E7 92 02 F6 | 	mov	arg01, fp
192f0     28 CE 85 F1 | 	sub	fp, #40
192f4     49 7B 02 FB | 	rdlong	result1, arg01
192f8     3D 95 02 F6 | 	mov	arg02, result1
192fc     53 93 02 F6 | 	mov	arg01, local01
19300     49 95 62 FC | 	wrlong	arg02, arg01
19304                 | LR__2116
19304                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
19304     54 00 00 FF 
19308     EC 64 06 F1 | 	add	objptr, ##43244
1930c     32 BF 02 FB | 	rdlong	local13, objptr
19310     2B BE 0E F2 | 	cmp	local13, #43 wz
19314     53 93 02 A6 |  if_e	mov	arg01, local01
19318     65 95 02 A6 |  if_e	mov	arg02, local19
1931c     49 95 62 AC |  if_e	wrlong	arg02, arg01
19320     53 BF 02 F6 | 	mov	local13, local01
19324     08 BE 06 F1 | 	add	local13, #8
19328     32 AD 02 FB | 	rdlong	local04, objptr
1932c     54 00 00 FF 
19330     EC 64 86 F1 | 	sub	objptr, ##43244
19334     56 CD 02 F6 | 	mov	local20, local04
19338     5F 93 02 F6 | 	mov	arg01, local13
1933c     66 95 02 F6 | 	mov	arg02, local20
19340     49 95 62 FC | 	wrlong	arg02, arg01
19344                 | LR__2117
19344                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
19344     0C D2 0E F2 | 	cmp	local23, #12 wz
19348     38 01 90 5D |  if_ne	jmp	#LR__2121
1934c     00 04 00 FF 
19350     00 A6 16 F2 | 	cmp	local01, ##524288 wc
19354     2C 01 90 CD |  if_b	jmp	#LR__2121
19358                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
19358     54 00 00 FF 
1935c     EC 64 06 F1 | 	add	objptr, ##43244
19360     32 BF 02 FB | 	rdlong	local13, objptr
19364     54 00 00 FF 
19368     EC 64 86 F1 | 	sub	objptr, ##43244
1936c     1C BE 0E F2 | 	cmp	local13, #28 wz
19370     2C 00 90 5D |  if_ne	jmp	#LR__2118
19374     5B AF 02 F6 | 	mov	local05, local09
19378     02 AE 66 F0 | 	shl	local05, #2
1937c     E7 B0 02 F6 | 	mov	local06, fp
19380     2C B0 06 F1 | 	add	local06, #44
19384     58 AF 02 F1 | 	add	local05, local06
19388     57 93 02 FB | 	rdlong	arg01, local05
1938c     00 94 06 F6 | 	mov	arg02, #0
19390     64 E5 B0 FD | 	call	#__system____builtin_atoi
19394     3D 95 02 F6 | 	mov	arg02, result1
19398     53 93 02 F6 | 	mov	arg01, local01
1939c     78 7C B0 FD | 	call	#_pslpoke
193a0                 | LR__2118
193a0                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
193a0     54 00 00 FF 
193a4     EC 64 06 F1 | 	add	objptr, ##43244
193a8     32 BF 02 FB | 	rdlong	local13, objptr
193ac     54 00 00 FF 
193b0     EC 64 86 F1 | 	sub	objptr, ##43244
193b4     1D BE 0E F2 | 	cmp	local13, #29 wz
193b8     2C 00 90 5D |  if_ne	jmp	#LR__2119
193bc     5B AF 02 F6 | 	mov	local05, local09
193c0     02 AE 66 F0 | 	shl	local05, #2
193c4     E7 B0 02 F6 | 	mov	local06, fp
193c8     2C B0 06 F1 | 	add	local06, #44
193cc     58 AF 02 F1 | 	add	local05, local06
193d0     57 93 02 FB | 	rdlong	arg01, local05
193d4     00 94 06 F6 | 	mov	arg02, #0
193d8     1C E5 B0 FD | 	call	#__system____builtin_atoi
193dc     3D 95 02 F6 | 	mov	arg02, result1
193e0     53 93 02 F6 | 	mov	arg01, local01
193e4     30 7C B0 FD | 	call	#_pslpoke
193e8                 | LR__2119
193e8                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
193e8     54 00 00 FF 
193ec     EC 64 06 F1 | 	add	objptr, ##43244
193f0     32 BF 02 FB | 	rdlong	local13, objptr
193f4     54 00 00 FF 
193f8     EC 64 86 F1 | 	sub	objptr, ##43244
193fc     1E BE 0E F2 | 	cmp	local13, #30 wz
19400     38 00 90 5D |  if_ne	jmp	#LR__2120
19404     5B AD 02 F6 | 	mov	local04, local09
19408     02 AC 66 F0 | 	shl	local04, #2
1940c     E7 AE 02 F6 | 	mov	local05, fp
19410     2C AE 06 F1 | 	add	local05, #44
19414     57 AD 02 F1 | 	add	local04, local05
19418     56 93 02 FB | 	rdlong	arg01, local04
1941c     70 E6 B0 FD | 	call	#__system____builtin_atof
19420     28 CE 05 F1 | 	add	fp, #40
19424     E7 7A 62 FC | 	wrlong	result1, fp
19428     E7 92 02 F6 | 	mov	arg01, fp
1942c     28 CE 85 F1 | 	sub	fp, #40
19430     49 95 02 FB | 	rdlong	arg02, arg01
19434     53 93 02 F6 | 	mov	arg01, local01
19438     DC 7B B0 FD | 	call	#_pslpoke
1943c                 | LR__2120
1943c                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
1943c     54 00 00 FF 
19440     EC 64 06 F1 | 	add	objptr, ##43244
19444     32 BF 02 FB | 	rdlong	local13, objptr
19448     54 00 00 FF 
1944c     EC 64 86 F1 | 	sub	objptr, ##43244
19450     2B BE 0E F2 | 	cmp	local13, #43 wz
19454     53 93 02 A6 |  if_e	mov	arg01, local01
19458     65 95 02 A6 |  if_e	mov	arg02, local19
1945c     B8 7B B0 AD |  if_e	call	#_pslpoke
19460     53 93 02 F6 | 	mov	arg01, local01
19464     08 92 06 F1 | 	add	arg01, #8
19468     54 00 00 FF 
1946c     EC 64 06 F1 | 	add	objptr, ##43244
19470     32 CD 02 FB | 	rdlong	local20, objptr
19474     54 00 00 FF 
19478     EC 64 86 F1 | 	sub	objptr, ##43244
1947c     66 95 02 F6 | 	mov	arg02, local20
19480     94 7B B0 FD | 	call	#_pslpoke
19484                 | LR__2121
19484                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
19484     05 D2 0E F2 | 	cmp	local23, #5 wz
19488     54 00 00 AF 
1948c     EC 64 06 A1 |  if_e	add	objptr, ##43244
19490     32 CD 02 AB |  if_e	rdlong	local20, objptr
19494     54 00 00 AF 
19498     EC 64 86 A1 |  if_e	sub	objptr, ##43244
1949c     2B CC 0E A2 |  if_e	cmp	local20, #43 wz
194a0     65 CD 02 A6 |  if_e	mov	local20, local19
194a4     53 93 02 A6 |  if_e	mov	arg01, local01
194a8     66 95 02 A6 |  if_e	mov	arg02, local20
194ac     68 7B B0 AD |  if_e	call	#_pslpoke
194b0                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
194b0     04 D2 0E F2 | 	cmp	local23, #4 wz
194b4     48 00 90 5D |  if_ne	jmp	#LR__2122
194b8     54 00 00 FF 
194bc     EC 64 06 F1 | 	add	objptr, ##43244
194c0     32 CD 02 FB | 	rdlong	local20, objptr
194c4     54 00 00 FF 
194c8     EC 64 86 F1 | 	sub	objptr, ##43244
194cc     2B CC 0E F2 | 	cmp	local20, #43 wz
194d0     2C 00 90 AD |  if_e	jmp	#LR__2122
194d4     5B AF 02 F6 | 	mov	local05, local09
194d8     02 AE 66 F0 | 	shl	local05, #2
194dc     E7 B0 02 F6 | 	mov	local06, fp
194e0     2C B0 06 F1 | 	add	local06, #44
194e4     58 AF 02 F1 | 	add	local05, local06
194e8     57 93 02 FB | 	rdlong	arg01, local05
194ec     00 94 06 F6 | 	mov	arg02, #0
194f0     04 E4 B0 FD | 	call	#__system____builtin_atoi
194f4     3D 95 02 F6 | 	mov	arg02, result1
194f8     53 93 02 F6 | 	mov	arg01, local01
194fc     18 7B B0 FD | 	call	#_pslpoke
19500                 | LR__2122
19500                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
19500     02 D2 0E F2 | 	cmp	local23, #2 wz
19504     48 00 90 5D |  if_ne	jmp	#LR__2123
19508     54 00 00 FF 
1950c     EC 64 06 F1 | 	add	objptr, ##43244
19510     32 CD 02 FB | 	rdlong	local20, objptr
19514     54 00 00 FF 
19518     EC 64 86 F1 | 	sub	objptr, ##43244
1951c     2B CC 0E F2 | 	cmp	local20, #43 wz
19520     2C 00 90 AD |  if_e	jmp	#LR__2123
19524     5B AF 02 F6 | 	mov	local05, local09
19528     02 AE 66 F0 | 	shl	local05, #2
1952c     E7 B0 02 F6 | 	mov	local06, fp
19530     2C B0 06 F1 | 	add	local06, #44
19534     58 AF 02 F1 | 	add	local05, local06
19538     57 93 02 FB | 	rdlong	arg01, local05
1953c     00 94 06 F6 | 	mov	arg02, #0
19540     B4 E3 B0 FD | 	call	#__system____builtin_atoi
19544     3D 95 02 F6 | 	mov	arg02, result1
19548     53 93 02 F6 | 	mov	arg01, local01
1954c     10 7B B0 FD | 	call	#_psdpoke
19550                 | LR__2123
19550                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
19550     01 D2 0E F2 | 	cmp	local23, #1 wz
19554     48 00 90 5D |  if_ne	jmp	#LR__2124
19558     54 00 00 FF 
1955c     EC 64 06 F1 | 	add	objptr, ##43244
19560     32 CD 02 FB | 	rdlong	local20, objptr
19564     54 00 00 FF 
19568     EC 64 86 F1 | 	sub	objptr, ##43244
1956c     2B CC 0E F2 | 	cmp	local20, #43 wz
19570     2C 00 90 AD |  if_e	jmp	#LR__2124
19574     5B AF 02 F6 | 	mov	local05, local09
19578     02 AE 66 F0 | 	shl	local05, #2
1957c     E7 B0 02 F6 | 	mov	local06, fp
19580     2C B0 06 F1 | 	add	local06, #44
19584     58 AF 02 F1 | 	add	local05, local06
19588     57 93 02 FB | 	rdlong	arg01, local05
1958c     00 94 06 F6 | 	mov	arg02, #0
19590     64 E3 B0 FD | 	call	#__system____builtin_atoi
19594     3D 95 02 F6 | 	mov	arg02, result1
19598     53 93 02 F6 | 	mov	arg01, local01
1959c     08 7B B0 FD | 	call	#_pspoke
195a0                 | LR__2124
195a0                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
195a0     06 D2 0E F2 | 	cmp	local23, #6 wz
195a4     54 00 90 5D |  if_ne	jmp	#LR__2125
195a8     54 00 00 FF 
195ac     EC 64 06 F1 | 	add	objptr, ##43244
195b0     32 CD 02 FB | 	rdlong	local20, objptr
195b4     54 00 00 FF 
195b8     EC 64 86 F1 | 	sub	objptr, ##43244
195bc     2B CC 0E F2 | 	cmp	local20, #43 wz
195c0     38 00 90 AD |  if_e	jmp	#LR__2125
195c4     5B AD 02 F6 | 	mov	local04, local09
195c8     02 AC 66 F0 | 	shl	local04, #2
195cc     E7 AE 02 F6 | 	mov	local05, fp
195d0     2C AE 06 F1 | 	add	local05, #44
195d4     57 AD 02 F1 | 	add	local04, local05
195d8     56 93 02 FB | 	rdlong	arg01, local04
195dc     B0 E4 B0 FD | 	call	#__system____builtin_atof
195e0     28 CE 05 F1 | 	add	fp, #40
195e4     E7 7A 62 FC | 	wrlong	result1, fp
195e8     E7 92 02 F6 | 	mov	arg01, fp
195ec     28 CE 85 F1 | 	sub	fp, #40
195f0     49 95 02 FB | 	rdlong	arg02, arg01
195f4     53 93 02 F6 | 	mov	arg01, local01
195f8     1C 7A B0 FD | 	call	#_pslpoke
195fc                 | LR__2125
195fc                 | LR__2126
195fc     01 B6 06 F1 | 	add	local09, #1
19600     10 F9 9F FD | 	jmp	#LR__2093
19604                 | LR__2127
19604                 | LR__2128
19604     E7 F0 03 F6 | 	mov	ptra, fp
19608     F2 00 A0 FD | 	call	#popregs_
1960c                 | _do_read_ret
1960c     2D 00 64 FD | 	ret
19610                 | 
19610                 | ' 
19610                 | ' '------------------- release
19610                 | ' 
19610                 | ' sub do_release
19610                 | _do_release
19610     00 CA 05 F6 | 	mov	COUNT_, #0
19614     E8 00 A0 FD | 	call	#pushregs_
19618     10 F0 07 F1 | 	add	ptra, #16
1961c     50 40 BF FD | 	call	#_pop
19620     3F 95 02 F6 | 	mov	arg02, result3
19624     E7 7A 62 FC | 	wrlong	result1, fp
19628     04 CE 05 F1 | 	add	fp, #4
1962c     E7 7C 62 FC | 	wrlong	result2, fp
19630     04 CE 05 F1 | 	add	fp, #4
19634     E7 94 62 FC | 	wrlong	arg02, fp
19638     08 CE 85 F1 | 	sub	fp, #8
1963c     E7 92 02 F6 | 	mov	arg01, fp
19640     08 42 BF FD | 	call	#_converttoint
19644                 | ' 
19644                 | ' t1=pop()
19644                 | ' channel=converttoint(t1)
19644                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
19644     00 7A 56 F2 | 	cmps	result1, #0 wc
19648     2C 00 90 CD |  if_b	jmp	#LR__2130
1964c     08 7A 56 F2 | 	cmps	result1, #8 wc
19650     24 00 90 3D |  if_ae	jmp	#LR__2130
19654     38 00 00 FF 
19658     B4 65 06 F1 | 	add	objptr, ##29108
1965c     32 93 02 FB | 	rdlong	arg01, objptr
19660     38 00 00 FF 
19664     B4 65 86 F1 | 	sub	objptr, ##29108
19668     06 7A 66 F0 | 	shl	result1, #6
1966c     3D 93 02 F1 | 	add	arg01, result1
19670     2C 92 06 F1 | 	add	arg01, #44
19674     49 FF 69 FC | 	wrlong	#255, arg01
19678                 | LR__2130
19678     E7 F0 03 F6 | 	mov	ptra, fp
1967c     F2 00 A0 FD | 	call	#popregs_
19680                 | _do_release_ret
19680     2D 00 64 FD | 	ret
19684                 | 
19684                 | ' 
19684                 | ' '------------------- restore
19684                 | ' 
19684                 | ' sub do_restore()
19684                 | _do_restore
19684     4C 00 00 FF 
19688     2C 64 06 F1 | 	add	objptr, ##38956
1968c     32 81 02 FB | 	rdlong	_var01, objptr
19690     06 00 00 FF 
19694     A4 64 06 F1 | 	add	objptr, ##3236
19698     32 81 62 FC | 	wrlong	_var01, objptr
1969c     99 01 00 FF 
196a0     C6 80 06 F6 | 	mov	_var01, ##@LR__6077
196a4     01 00 00 FF 
196a8     E8 65 06 F1 | 	add	objptr, ##1000
196ac     32 81 62 FC | 	wrlong	_var01, objptr
196b0     54 00 00 FF 
196b4     B8 64 86 F1 | 	sub	objptr, ##43192
196b8                 | _do_restore_ret
196b8     2D 00 64 FD | 	ret
196bc                 | 
196bc                 | ' 
196bc                 | ' '------------------- restorepalette
196bc                 | ' 
196bc                 | ' sub do_restorepalette()
196bc                 | _do_restorepalette
196bc     08 82 B0 FD | 	call	#_hg010b_spin2_restorepalette
196c0                 | _do_restorepalette_ret
196c0     2D 00 64 FD | 	ret
196c4                 | 
196c4                 | ' '------------------- return
196c4                 | ' 
196c4                 | ' sub do_return()
196c4                 | _do_return
196c4                 | ' if gosubtop>0 then
196c4     52 00 00 FF 
196c8     D8 64 06 F1 | 	add	objptr, ##42200
196cc     32 81 02 FB | 	rdlong	_var01, objptr
196d0     52 00 00 FF 
196d4     D8 64 86 F1 | 	sub	objptr, ##42200
196d8     01 80 56 F2 | 	cmps	_var01, #1 wc
196dc     8C 00 90 CD |  if_b	jmp	#LR__2140
196e0     52 00 00 FF 
196e4     D8 64 06 F1 | 	add	objptr, ##42200
196e8     32 81 02 FB | 	rdlong	_var01, objptr
196ec     03 80 66 F0 | 	shl	_var01, #3
196f0     03 00 00 FF 
196f4     88 65 86 F1 | 	sub	objptr, ##1928
196f8     32 81 02 F1 | 	add	_var01, objptr
196fc     40 81 02 FB | 	rdlong	_var01, _var01
19700     03 00 00 FF 
19704     0C 65 06 F1 | 	add	objptr, ##1804
19708     32 81 62 FC | 	wrlong	_var01, objptr
1970c     7C 64 06 F1 | 	add	objptr, #124
19710     32 81 02 FB | 	rdlong	_var01, objptr
19714     03 80 66 F0 | 	shl	_var01, #3
19718     03 00 00 FF 
1971c     88 65 86 F1 | 	sub	objptr, ##1928
19720     32 81 02 F1 | 	add	_var01, objptr
19724     04 80 06 F1 | 	add	_var01, #4
19728     40 81 02 FB | 	rdlong	_var01, _var01
1972c     03 00 00 FF 
19730     10 65 06 F1 | 	add	objptr, ##1808
19734     32 81 62 FC | 	wrlong	_var01, objptr
19738     06 00 00 FF 
1973c     40 64 86 F1 | 	sub	objptr, ##3136
19740     32 81 02 FB | 	rdlong	_var01, objptr
19744     01 80 86 F1 | 	sub	_var01, #1
19748     04 64 06 F1 | 	add	objptr, #4
1974c     32 81 62 FC | 	wrlong	_var01, objptr
19750     06 00 00 FF 
19754     B4 64 06 F1 | 	add	objptr, ##3252
19758     32 81 02 FB | 	rdlong	_var01, objptr
1975c     01 80 86 F1 | 	sub	_var01, #1
19760     32 81 62 FC | 	wrlong	_var01, objptr
19764     52 00 00 FF 
19768     D8 64 86 F1 | 	sub	objptr, ##42200
1976c                 | LR__2140
1976c                 | _do_return_ret
1976c     2D 00 64 FD | 	ret
19770                 | 
19770                 | ' 
19770                 | ' '------------------- right$
19770                 | ' 
19770                 | ' sub do_right
19770                 | _do_right
19770     01 CA 05 F6 | 	mov	COUNT_, #1
19774     E8 00 A0 FD | 	call	#pushregs_
19778     14 F0 07 F1 | 	add	ptra, #20
1977c     4C 00 00 FF 
19780     24 64 06 F1 | 	add	objptr, ##38948
19784     32 97 02 FB | 	rdlong	arg03, objptr
19788     4B 95 02 F6 | 	mov	arg02, arg03
1978c     01 94 66 F0 | 	shl	arg02, #1
19790     4B 95 02 F1 | 	add	arg02, arg03
19794     02 94 66 F0 | 	shl	arg02, #2
19798     03 00 00 FF 
1979c     04 64 86 F1 | 	sub	objptr, ##1540
197a0     32 95 02 F1 | 	add	arg02, objptr
197a4     4A 97 02 FB | 	rdlong	arg03, arg02
197a8                 | ' 
197a8                 | ' numpar=compiledline(lineptr_e).result.uresult
197a8                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
197a8     02 96 0E F2 | 	cmp	arg03, #2 wz
197ac     49 00 00 FF 
197b0     20 64 86 F1 | 	sub	objptr, ##37408
197b4     40 00 90 AD |  if_e	jmp	#LR__2150
197b8     00 92 06 F6 | 	mov	arg01, #0
197bc     68 09 B1 FD | 	call	#__system___getiolock_0622
197c0     3D 93 02 F6 | 	mov	arg01, result1
197c4     DC B3 B0 FD | 	call	#__system___lockmem
197c8     99 01 00 FF 
197cc     C7 94 06 F6 | 	mov	arg02, ##@LR__6078
197d0     00 92 06 F6 | 	mov	arg01, #0
197d4     00 96 06 F6 | 	mov	arg03, #0
197d8     BC C0 B0 FD | 	call	#__system___basic_print_string
197dc     00 92 06 F6 | 	mov	arg01, #0
197e0     44 09 B1 FD | 	call	#__system___getiolock_0622
197e4     3D 01 68 FC | 	wrlong	#0, result1
197e8     27 92 06 F6 | 	mov	arg01, #39
197ec     00 94 06 F6 | 	mov	arg02, #0
197f0     8C 76 B0 FD | 	call	#_printerror
197f4     D8 00 90 FD | 	jmp	#LR__2153
197f8                 | LR__2150
197f8     74 3E BF FD | 	call	#_pop
197fc     3F 97 02 F6 | 	mov	arg03, result3
19800     E7 7A 62 FC | 	wrlong	result1, fp
19804     04 CE 05 F1 | 	add	fp, #4
19808     E7 7C 62 FC | 	wrlong	result2, fp
1980c     04 CE 05 F1 | 	add	fp, #4
19810     E7 96 62 FC | 	wrlong	arg03, fp
19814     08 CE 85 F1 | 	sub	fp, #8
19818     E7 92 02 F6 | 	mov	arg01, fp
1981c     2C 40 BF FD | 	call	#_converttoint
19820     3D A7 02 F6 | 	mov	local01, result1
19824     48 3E BF FD | 	call	#_pop
19828     3F 97 02 F6 | 	mov	arg03, result3
1982c     E7 7A 62 FC | 	wrlong	result1, fp
19830     04 CE 05 F1 | 	add	fp, #4
19834     E7 7C 62 FC | 	wrlong	result2, fp
19838     04 CE 05 F1 | 	add	fp, #4
1983c     E7 96 62 FC | 	wrlong	arg03, fp
19840                 | ' t1=pop() : arg=converttoint(t1)
19840                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
19840     08 CE 85 F1 | 	sub	fp, #8
19844     2B 96 0E F2 | 	cmp	arg03, #43 wz
19848     18 00 90 5D |  if_ne	jmp	#LR__2151
1984c     E7 92 02 FB | 	rdlong	arg01, fp
19850     8C 3F BF FD | 	call	#_convertstring
19854     E7 7A 62 FC | 	wrlong	result1, fp
19858     08 CE 05 F1 | 	add	fp, #8
1985c     E7 3E 68 FC | 	wrlong	#31, fp
19860     08 CE 85 F1 | 	sub	fp, #8
19864                 | LR__2151
19864                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
19864     08 CE 05 F1 | 	add	fp, #8
19868     E7 96 02 FB | 	rdlong	arg03, fp
1986c     08 CE 85 F1 | 	sub	fp, #8
19870     1F 96 0E F2 | 	cmp	arg03, #31 wz
19874     40 00 90 AD |  if_e	jmp	#LR__2152
19878     00 92 06 F6 | 	mov	arg01, #0
1987c     A8 08 B1 FD | 	call	#__system___getiolock_0622
19880     3D 93 02 F6 | 	mov	arg01, result1
19884     1C B3 B0 FD | 	call	#__system___lockmem
19888     99 01 00 FF 
1988c     D0 94 06 F6 | 	mov	arg02, ##@LR__6079
19890     00 92 06 F6 | 	mov	arg01, #0
19894     00 96 06 F6 | 	mov	arg03, #0
19898     FC BF B0 FD | 	call	#__system___basic_print_string
1989c     00 92 06 F6 | 	mov	arg01, #0
198a0     84 08 B1 FD | 	call	#__system___getiolock_0622
198a4     3D 01 68 FC | 	wrlong	#0, result1
198a8     0F 92 06 F6 | 	mov	arg01, #15
198ac     00 94 06 F6 | 	mov	arg02, #0
198b0     CC 75 B0 FD | 	call	#_printerror
198b4     18 00 90 FD | 	jmp	#LR__2153
198b8                 | LR__2152
198b8     E7 92 02 FB | 	rdlong	arg01, fp
198bc     53 95 02 F6 | 	mov	arg02, local01
198c0     10 CC B0 FD | 	call	#__system__Right_S
198c4     E7 7A 62 FC | 	wrlong	result1, fp
198c8     E7 92 02 F6 | 	mov	arg01, fp
198cc     30 3E BF FD | 	call	#_push
198d0                 | LR__2153
198d0     E7 F0 03 F6 | 	mov	ptra, fp
198d4     F2 00 A0 FD | 	call	#popregs_
198d8                 | _do_right_ret
198d8     2D 00 64 FD | 	ret
198dc                 | 
198dc                 | ' 
198dc                 | ' '------------------- rnd
198dc                 | ' 
198dc                 | ' sub do_rnd
198dc                 | _do_rnd
198dc     02 CA 05 F6 | 	mov	COUNT_, #2
198e0     E8 00 A0 FD | 	call	#pushregs_
198e4     10 F0 07 F1 | 	add	ptra, #16
198e8     4C 00 00 FF 
198ec     24 64 06 F1 | 	add	objptr, ##38948
198f0     32 A7 02 FB | 	rdlong	local01, objptr
198f4     53 97 02 F6 | 	mov	arg03, local01
198f8     01 96 66 F0 | 	shl	arg03, #1
198fc     53 97 02 F1 | 	add	arg03, local01
19900     02 96 66 F0 | 	shl	arg03, #2
19904     03 00 00 FF 
19908     04 64 86 F1 | 	sub	objptr, ##1540
1990c     32 97 02 F1 | 	add	arg03, objptr
19910     4B A9 02 FB | 	rdlong	local02, arg03
19914                 | ' 
19914                 | ' numpar=compiledline(lineptr_e).result.uresult
19914                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
19914     02 A8 16 F2 | 	cmp	local02, #2 wc
19918     49 00 00 FF 
1991c     20 64 86 F1 | 	sub	objptr, ##37408
19920     40 00 90 CD |  if_b	jmp	#LR__2160
19924     00 92 06 F6 | 	mov	arg01, #0
19928     FC 07 B1 FD | 	call	#__system___getiolock_0622
1992c     3D 93 02 F6 | 	mov	arg01, result1
19930     70 B2 B0 FD | 	call	#__system___lockmem
19934     99 01 00 FF 
19938     D9 94 06 F6 | 	mov	arg02, ##@LR__6080
1993c     00 92 06 F6 | 	mov	arg01, #0
19940     00 96 06 F6 | 	mov	arg03, #0
19944     50 BF B0 FD | 	call	#__system___basic_print_string
19948     00 92 06 F6 | 	mov	arg01, #0
1994c     D8 07 B1 FD | 	call	#__system___getiolock_0622
19950     3D 01 68 FC | 	wrlong	#0, result1
19954     27 92 06 F6 | 	mov	arg01, #39
19958     00 94 06 F6 | 	mov	arg02, #0
1995c     20 75 B0 FD | 	call	#_printerror
19960     28 01 90 FD | 	jmp	#LR__2167
19964                 | LR__2160
19964                 | ' if numpar=0 then
19964     00 A8 0E F2 | 	cmp	local02, #0 wz
19968     20 00 90 5D |  if_ne	jmp	#LR__2161
1996c     08 CE 05 F1 | 	add	fp, #8
19970     E7 3A 68 FC | 	wrlong	#29, fp
19974     08 CE 85 F1 | 	sub	fp, #8
19978     1B 7A 62 FD | 	getrnd	result1
1997c     E7 7A 62 FC | 	wrlong	result1, fp
19980     E7 92 02 F6 | 	mov	arg01, fp
19984     78 3D BF FD | 	call	#_push
19988     00 01 90 FD | 	jmp	#LR__2166
1998c                 | LR__2161
1998c     E0 3C BF FD | 	call	#_pop
19990     E7 7A 62 FC | 	wrlong	result1, fp
19994     04 CE 05 F1 | 	add	fp, #4
19998     E7 7C 62 FC | 	wrlong	result2, fp
1999c     04 CE 05 F1 | 	add	fp, #4
199a0     E7 7E 62 FC | 	wrlong	result3, fp
199a4                 | '   t1=pop()
199a4                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
199a4     08 CE 85 F1 | 	sub	fp, #8
199a8     1C 7E 0E F2 | 	cmp	result3, #28 wz
199ac     08 CE 05 51 |  if_ne	add	fp, #8
199b0     E7 A6 02 5B |  if_ne	rdlong	local01, fp
199b4     08 CE 85 51 |  if_ne	sub	fp, #8
199b8     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
199bc     2C 00 90 5D |  if_ne	jmp	#LR__2162
199c0     1B 7A 62 FD | 	getrnd	result1
199c4     E7 A6 02 FB | 	rdlong	local01, fp
199c8     53 7B 12 FD | 	qdiv	result1, local01
199cc     E7 92 02 F6 | 	mov	arg01, fp
199d0     19 A8 62 FD | 	getqy	local02
199d4     E7 A8 62 FC | 	wrlong	local02, fp
199d8     08 CE 05 F1 | 	add	fp, #8
199dc     E7 3A 68 FC | 	wrlong	#29, fp
199e0     08 CE 85 F1 | 	sub	fp, #8
199e4     18 3D BF FD | 	call	#_push
199e8     A0 00 90 FD | 	jmp	#LR__2165
199ec                 | LR__2162
199ec     08 CE 05 F1 | 	add	fp, #8
199f0     E7 A8 02 FB | 	rdlong	local02, fp
199f4     08 CE 85 F1 | 	sub	fp, #8
199f8     1E A8 0E F2 | 	cmp	local02, #30 wz
199fc     48 00 90 5D |  if_ne	jmp	#LR__2163
19a00     E7 92 02 FB | 	rdlong	arg01, fp
19a04     00 C0 24 FF 
19a08     00 94 06 F6 | 	mov	arg02, ##1233125376
19a0c     68 DA B0 FD | 	call	#__system___float_div
19a10     3D A9 02 F6 | 	mov	local02, result1
19a14     1B 92 62 FD | 	getrnd	arg01
19a18     74 93 06 F4 | 	bitl	arg01, #372
19a1c     50 D4 B0 FD | 	call	#__system___float_fromuns
19a20     3D 95 02 F6 | 	mov	arg02, result1
19a24     54 93 02 F6 | 	mov	arg01, local02
19a28     48 D8 B0 FD | 	call	#__system___float_mul
19a2c     E7 7A 62 FC | 	wrlong	result1, fp
19a30     08 CE 05 F1 | 	add	fp, #8
19a34     E7 3C 68 FC | 	wrlong	#30, fp
19a38     08 CE 85 F1 | 	sub	fp, #8
19a3c     E7 92 02 F6 | 	mov	arg01, fp
19a40     BC 3C BF FD | 	call	#_push
19a44     44 00 90 FD | 	jmp	#LR__2164
19a48                 | LR__2163
19a48                 | '     print "rnd: "; : printerror(40) 
19a48     00 92 06 F6 | 	mov	arg01, #0
19a4c     D8 06 B1 FD | 	call	#__system___getiolock_0622
19a50     3D 93 02 F6 | 	mov	arg01, result1
19a54     4C B1 B0 FD | 	call	#__system___lockmem
19a58     99 01 00 FF 
19a5c     DF 94 06 F6 | 	mov	arg02, ##@LR__6081
19a60     00 92 06 F6 | 	mov	arg01, #0
19a64     00 96 06 F6 | 	mov	arg03, #0
19a68     2C BE B0 FD | 	call	#__system___basic_print_string
19a6c     00 92 06 F6 | 	mov	arg01, #0
19a70     B4 06 B1 FD | 	call	#__system___getiolock_0622
19a74     3D 01 68 FC | 	wrlong	#0, result1
19a78     28 92 06 F6 | 	mov	arg01, #40
19a7c     00 94 06 F6 | 	mov	arg02, #0
19a80     FC 73 B0 FD | 	call	#_printerror
19a84     E7 92 02 F6 | 	mov	arg01, fp
19a88     74 3C BF FD | 	call	#_push
19a8c                 | LR__2164
19a8c                 | LR__2165
19a8c                 | LR__2166
19a8c                 | LR__2167
19a8c     E7 F0 03 F6 | 	mov	ptra, fp
19a90     F2 00 A0 FD | 	call	#popregs_
19a94                 | _do_rnd_ret
19a94     2D 00 64 FD | 	ret
19a98                 | 
19a98                 | ' 
19a98                 | ' '-------------------- round
19a98                 | ' 
19a98                 | ' sub do_round
19a98                 | _do_round
19a98     00 CA 05 F6 | 	mov	COUNT_, #0
19a9c     E8 00 A0 FD | 	call	#pushregs_
19aa0     0C F0 07 F1 | 	add	ptra, #12
19aa4     C8 3B BF FD | 	call	#_pop
19aa8     E7 7A 62 FC | 	wrlong	result1, fp
19aac     04 CE 05 F1 | 	add	fp, #4
19ab0     E7 7C 62 FC | 	wrlong	result2, fp
19ab4     04 CE 05 F1 | 	add	fp, #4
19ab8     E7 7E 62 FC | 	wrlong	result3, fp
19abc     08 CE 85 F1 | 	sub	fp, #8
19ac0     E7 92 02 F6 | 	mov	arg01, fp
19ac4     84 3D BF FD | 	call	#_converttoint
19ac8     E7 7A 62 FC | 	wrlong	result1, fp
19acc     08 CE 05 F1 | 	add	fp, #8
19ad0     E7 38 68 FC | 	wrlong	#28, fp
19ad4     08 CE 85 F1 | 	sub	fp, #8
19ad8     E7 92 02 F6 | 	mov	arg01, fp
19adc     20 3C BF FD | 	call	#_push
19ae0     E7 F0 03 F6 | 	mov	ptra, fp
19ae4     F2 00 A0 FD | 	call	#popregs_
19ae8                 | _do_round_ret
19ae8     2D 00 64 FD | 	ret
19aec                 | 
19aec                 | ' 
19aec                 | ' '-------------------- rqpin
19aec                 | ' 
19aec                 | ' sub do_rqpin
19aec                 | _do_rqpin
19aec     00 CA 05 F6 | 	mov	COUNT_, #0
19af0     E8 00 A0 FD | 	call	#pushregs_
19af4     0C F0 07 F1 | 	add	ptra, #12
19af8     74 3B BF FD | 	call	#_pop
19afc     E7 7A 62 FC | 	wrlong	result1, fp
19b00     04 CE 05 F1 | 	add	fp, #4
19b04     E7 7C 62 FC | 	wrlong	result2, fp
19b08     04 CE 05 F1 | 	add	fp, #4
19b0c     E7 7E 62 FC | 	wrlong	result3, fp
19b10     08 CE 85 F1 | 	sub	fp, #8
19b14     E7 92 02 F6 | 	mov	arg01, fp
19b18     30 3D BF FD | 	call	#_converttoint
19b1c     3D 93 02 F6 | 	mov	arg01, result1
19b20     00 7A 06 F6 | 	mov	result1, #0
19b24     49 7B 82 FA | 	rqpin	result1, arg01
19b28     54 00 00 FF 
19b2c     EC 64 06 F1 | 	add	objptr, ##43244
19b30     32 7B 62 FC | 	wrlong	result1, objptr
19b34     54 00 00 FF 
19b38     EC 64 86 F1 | 	sub	objptr, ##43244
19b3c     08 CE 05 F1 | 	add	fp, #8
19b40     E7 3A 68 FC | 	wrlong	#29, fp
19b44     08 CE 85 F1 | 	sub	fp, #8
19b48     E7 08 68 FC | 	wrlong	#4, fp
19b4c     E7 92 02 F6 | 	mov	arg01, fp
19b50     AC 3B BF FD | 	call	#_push
19b54     E7 F0 03 F6 | 	mov	ptra, fp
19b58     F2 00 A0 FD | 	call	#popregs_
19b5c                 | _do_rqpin_ret
19b5c     2D 00 64 FD | 	ret
19b60                 | 
19b60                 | ' 
19b60                 | ' ' ------------------ run
19b60                 | ' 
19b60                 | ' sub do_run
19b60                 | _do_run
19b60     04 CA 05 F6 | 	mov	COUNT_, #4
19b64     E8 00 A0 FD | 	call	#pushregs_
19b68     4C 00 00 FF 
19b6c     24 64 06 F1 | 	add	objptr, ##38948
19b70     32 A7 02 FB | 	rdlong	local01, objptr
19b74     06 00 00 FF 
19b78     38 64 06 F1 | 	add	objptr, ##3128
19b7c     32 A9 02 FB | 	rdlong	local02, objptr
19b80     04 64 06 F1 | 	add	objptr, #4
19b84     32 AB 02 FB | 	rdlong	local03, objptr
19b88     53 99 02 F6 | 	mov	arg04, local01
19b8c     4C 97 02 F6 | 	mov	arg03, arg04
19b90     01 96 66 F0 | 	shl	arg03, #1
19b94     4C 97 02 F1 | 	add	arg03, arg04
19b98     02 96 66 F0 | 	shl	arg03, #2
19b9c     09 00 00 FF 
19ba0     40 64 86 F1 | 	sub	objptr, ##4672
19ba4     32 97 02 F1 | 	add	arg03, objptr
19ba8     4B 95 02 FB | 	rdlong	arg02, arg03
19bac                 | ' 
19bac                 | ' r_lineptr_e=lineptr_e
19bac                 | ' r_runptr=runptr
19bac                 | ' r_runptr2=runptr2
19bac                 | ' 
19bac                 | ' numpar=compiledline(lineptr_e).result.uresult
19bac                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
19bac     01 94 0E F2 | 	cmp	arg02, #1 wz
19bb0     49 00 00 FF 
19bb4     20 64 86 F1 | 	sub	objptr, ##37408
19bb8     00 92 06 A6 |  if_e	mov	arg01, #0
19bbc     0C AA BF AD |  if_e	call	#_do_load
19bc0     4C 00 00 FF 
19bc4     2C 64 06 F1 | 	add	objptr, ##38956
19bc8     32 99 02 FB | 	rdlong	arg04, objptr
19bcc     06 00 00 FF 
19bd0     30 64 06 F1 | 	add	objptr, ##3120
19bd4     32 99 62 FC | 	wrlong	arg04, objptr
19bd8     04 64 06 F1 | 	add	objptr, #4
19bdc     32 01 68 FC | 	wrlong	#0, objptr
19be0     04 64 06 F1 | 	add	objptr, #4
19be4     FF FF FF FF 
19be8     32 FF 6B FC | 	wrlong	##-1, objptr
19bec     06 00 00 FF 
19bf0     38 64 86 F1 | 	sub	objptr, ##3128
19bf4     32 99 02 FB | 	rdlong	arg04, objptr
19bf8     06 00 00 FF 
19bfc     A4 64 06 F1 | 	add	objptr, ##3236
19c00     32 99 62 FC | 	wrlong	arg04, objptr
19c04     99 01 00 FF 
19c08     E5 98 06 F6 | 	mov	arg04, ##@LR__6082
19c0c     01 00 00 FF 
19c10     E8 65 06 F1 | 	add	objptr, ##1000
19c14     32 99 62 FC | 	wrlong	arg04, objptr
19c18                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
19c18                 | ' dataptr=programstart : readline="" ' reset the data pointer
19c18                 | ' if inrun>0 then 
19c18     02 00 00 FF 
19c1c     28 64 86 F1 | 	sub	objptr, ##1064
19c20     32 99 02 FB | 	rdlong	arg04, objptr
19c24     52 00 00 FF 
19c28     90 64 86 F1 | 	sub	objptr, ##42128
19c2c     01 98 16 F2 | 	cmp	arg04, #1 wc
19c30     34 00 90 CD |  if_b	jmp	#LR__2170
19c34     32 93 02 F6 | 	mov	arg01, objptr
19c38     52 00 00 FF 
19c3c     94 92 06 F1 | 	add	arg01, ##42132
19c40     52 00 00 FF 
19c44     5C 64 06 F1 | 	add	objptr, ##42076
19c48     32 95 02 FB | 	rdlong	arg02, objptr
19c4c     18 96 06 F6 | 	mov	arg03, #24
19c50     46 00 00 FF 
19c54     90 65 86 F1 | 	sub	objptr, ##36240
19c58     CC 9F B0 FD | 	call	#_psram_spin2_read1
19c5c     0B 00 00 FF 
19c60     CC 64 86 F1 | 	sub	objptr, ##5836
19c64                 | '   psram.read1(varptr(runheader),runptr,24)  
19c64                 | '   return
19c64     10 03 90 FD | 	jmp	#LR__2177
19c68                 | LR__2170
19c68     52 00 00 FF 
19c6c     90 64 06 F1 | 	add	objptr, ##42128
19c70     32 03 68 FC | 	wrlong	#1, objptr
19c74     04 64 06 F1 | 	add	objptr, #4
19c78     32 93 02 F6 | 	mov	arg01, objptr
19c7c     38 64 86 F1 | 	sub	objptr, #56
19c80     32 95 02 FB | 	rdlong	arg02, objptr
19c84     18 96 06 F6 | 	mov	arg03, #24
19c88     46 00 00 FF 
19c8c     90 65 86 F1 | 	sub	objptr, ##36240
19c90     94 9F B0 FD | 	call	#_psram_spin2_read1
19c94                 | ' inrun=1
19c94                 | ' psram.read1(varptr(runheader),runptr,24) 
19c94                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
19c94     46 00 00 FF 
19c98     C8 65 06 F1 | 	add	objptr, ##36296
19c9c     32 AD 02 FB | 	rdlong	local04, objptr
19ca0     52 00 00 FF 
19ca4     94 64 86 F1 | 	sub	objptr, ##42132
19ca8     FF FF 7F FF 
19cac     FF AD 0E F2 | 	cmp	local04, ##-1 wz
19cb0     52 00 00 AF 
19cb4     90 64 06 A1 |  if_e	add	objptr, ##42128
19cb8     32 01 68 AC |  if_e	wrlong	#0, objptr
19cbc     52 00 00 AF 
19cc0     90 64 86 A1 |  if_e	sub	objptr, ##42128
19cc4     B0 02 90 AD |  if_e	jmp	#LR__2177
19cc8                 | ' do 
19cc8                 | LR__2171
19cc8                 | '   if runptr<>oldrunptr then
19cc8     52 00 00 FF 
19ccc     5C 64 06 F1 | 	add	objptr, ##42076
19cd0     32 AD 02 FB | 	rdlong	local04, objptr
19cd4     08 64 06 F1 | 	add	objptr, #8
19cd8     32 99 02 FB | 	rdlong	arg04, objptr
19cdc     52 00 00 FF 
19ce0     64 64 86 F1 | 	sub	objptr, ##42084
19ce4     4C AD 0A F2 | 	cmp	local04, arg04 wz
19ce8     D0 00 90 AD |  if_e	jmp	#LR__2172
19cec     32 93 02 F6 | 	mov	arg01, objptr
19cf0     52 00 00 FF 
19cf4     94 92 06 F1 | 	add	arg01, ##42132
19cf8     52 00 00 FF 
19cfc     5C 64 06 F1 | 	add	objptr, ##42076
19d00     32 95 02 FB | 	rdlong	arg02, objptr
19d04     18 96 06 F6 | 	mov	arg03, #24
19d08     46 00 00 FF 
19d0c     90 65 86 F1 | 	sub	objptr, ##36240
19d10     14 9F B0 FD | 	call	#_psram_spin2_read1
19d14     3D 00 00 FF 
19d18     54 65 06 F1 | 	add	objptr, ##31572
19d1c     32 93 02 F6 | 	mov	arg01, objptr
19d20     09 00 00 FF 
19d24     3C 64 06 F1 | 	add	objptr, ##4668
19d28     32 95 02 FB | 	rdlong	arg02, objptr
19d2c     0B 00 00 FF 
19d30     54 64 86 F1 | 	sub	objptr, ##5716
19d34     32 AD 02 FB | 	rdlong	local04, objptr
19d38     01 AC 66 F0 | 	shl	local04, #1
19d3c     56 95 02 F1 | 	add	arg02, local04
19d40     0B 00 00 FF 
19d44     94 64 06 F1 | 	add	objptr, ##5780
19d48     32 97 02 FB | 	rdlong	arg03, objptr
19d4c     40 64 86 F1 | 	sub	objptr, #64
19d50     32 AD 02 FB | 	rdlong	local04, objptr
19d54     56 97 82 F1 | 	sub	arg03, local04
19d58     46 00 00 FF 
19d5c     90 65 86 F1 | 	sub	objptr, ##36240
19d60     C4 9E B0 FD | 	call	#_psram_spin2_read1
19d64     46 00 00 FF 
19d68     D0 65 06 F1 | 	add	objptr, ##36304
19d6c     32 AD 02 FB | 	rdlong	local04, objptr
19d70     40 64 86 F1 | 	sub	objptr, #64
19d74     32 95 02 FB | 	rdlong	arg02, objptr
19d78     4A AD 82 F1 | 	sub	local04, arg02
19d7c     0B 00 00 FF 
19d80     54 64 86 F1 | 	sub	objptr, ##5716
19d84     32 95 02 FB | 	rdlong	arg02, objptr
19d88     4A AD 12 FD | 	qdiv	local04, arg02
19d8c     05 00 00 FF 
19d90     18 64 06 F1 | 	add	objptr, ##2584
19d94     18 AC 62 FD | 	getqx	local04
19d98     03 AC 86 F1 | 	sub	local04, #3
19d9c     32 AD 62 FC | 	wrlong	local04, objptr
19da0     06 00 00 FF 
19da4     3C 64 06 F1 | 	add	objptr, ##3132
19da8     32 AD 02 FB | 	rdlong	local04, objptr
19dac     08 64 06 F1 | 	add	objptr, #8
19db0     32 AD 62 FC | 	wrlong	local04, objptr
19db4     52 00 00 FF 
19db8     64 64 86 F1 | 	sub	objptr, ##42084
19dbc                 | LR__2172
19dbc     52 00 00 FF 
19dc0     A8 64 06 F1 | 	add	objptr, ##42152
19dc4     32 AD 02 FB | 	rdlong	local04, objptr
19dc8     4C 64 86 F1 | 	sub	objptr, #76
19dcc     32 AD 62 FC | 	wrlong	local04, objptr
19dd0     04 64 06 F1 | 	add	objptr, #4
19dd4     32 93 02 FB | 	rdlong	arg01, objptr
19dd8     52 00 00 FF 
19ddc     60 64 86 F1 | 	sub	objptr, ##42080
19de0     88 37 BF FD | 	call	#_execute_line
19de4     52 00 00 FF 
19de8     60 64 06 F1 | 	add	objptr, ##42080
19dec     32 7B 62 FC | 	wrlong	result1, objptr
19df0     04 64 86 F1 | 	sub	objptr, #4
19df4     32 AD 02 FB | 	rdlong	local04, objptr
19df8     52 00 00 FF 
19dfc     5C 64 86 F1 | 	sub	objptr, ##42076
19e00     FF FF 3F FF 
19e04     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
19e08     4C 00 90 AD |  if_e	jmp	#LR__2175
19e0c     E0 92 06 F6 | 	mov	arg01, #224
19e10     A8 A1 B0 FD | 	call	#_usbnew_spin2_keystate
19e14     00 7A 0E F2 | 	cmp	result1, #0 wz
19e18     10 00 90 5D |  if_ne	jmp	#LR__2173
19e1c     E4 92 06 F6 | 	mov	arg01, #228
19e20     98 A1 B0 FD | 	call	#_usbnew_spin2_keystate
19e24     00 7A 0E F2 | 	cmp	result1, #0 wz
19e28     10 00 90 AD |  if_e	jmp	#LR__2174
19e2c                 | LR__2173
19e2c     06 92 06 F6 | 	mov	arg01, #6
19e30     88 A1 B0 FD | 	call	#_usbnew_spin2_keystate
19e34     00 7A 0E F2 | 	cmp	result1, #0 wz
19e38     1C 00 90 5D |  if_ne	jmp	#LR__2175
19e3c                 | LR__2174
19e3c     52 00 00 FF 
19e40     90 64 06 F1 | 	add	objptr, ##42128
19e44     32 AD 02 FB | 	rdlong	local04, objptr
19e48     52 00 00 FF 
19e4c     90 64 86 F1 | 	sub	objptr, ##42128
19e50     02 AC 0E F2 | 	cmp	local04, #2 wz
19e54     70 FE 9F 5D |  if_ne	jmp	#LR__2171
19e58                 | LR__2175
19e58                 | '   ''do whatever kbm.peek_latest_key()=$106 
19e58                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
19e58     52 00 00 FF 
19e5c     5C 64 06 F1 | 	add	objptr, ##42076
19e60     32 AD 02 FB | 	rdlong	local04, objptr
19e64     52 00 00 FF 
19e68     5C 64 86 F1 | 	sub	objptr, ##42076
19e6c     FF FF 3F FF 
19e70     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
19e74     AC 00 90 AD |  if_e	jmp	#LR__2176
19e78     52 00 00 FF 
19e7c     90 64 06 F1 | 	add	objptr, ##42128
19e80     32 AD 02 FB | 	rdlong	local04, objptr
19e84     52 00 00 FF 
19e88     90 64 86 F1 | 	sub	objptr, ##42128
19e8c     01 AC 0E F2 | 	cmp	local04, #1 wz
19e90     90 00 90 5D |  if_ne	jmp	#LR__2176
19e94                 | '   print: print "Stopped at line ";runheader(0) 
19e94     00 92 06 F6 | 	mov	arg01, #0
19e98     8C 02 B1 FD | 	call	#__system___getiolock_0622
19e9c     3D 93 02 F6 | 	mov	arg01, result1
19ea0     00 AD B0 FD | 	call	#__system___lockmem
19ea4     00 92 06 F6 | 	mov	arg01, #0
19ea8     0A 94 06 F6 | 	mov	arg02, #10
19eac     00 96 06 F6 | 	mov	arg03, #0
19eb0     8C B9 B0 FD | 	call	#__system___basic_print_char
19eb4     00 92 06 F6 | 	mov	arg01, #0
19eb8     6C 02 B1 FD | 	call	#__system___getiolock_0622
19ebc     3D 01 68 FC | 	wrlong	#0, result1
19ec0     00 92 06 F6 | 	mov	arg01, #0
19ec4     60 02 B1 FD | 	call	#__system___getiolock_0622
19ec8     3D 93 02 F6 | 	mov	arg01, result1
19ecc     D4 AC B0 FD | 	call	#__system___lockmem
19ed0     99 01 00 FF 
19ed4     E6 94 06 F6 | 	mov	arg02, ##@LR__6083
19ed8     00 92 06 F6 | 	mov	arg01, #0
19edc     00 96 06 F6 | 	mov	arg03, #0
19ee0     B4 B9 B0 FD | 	call	#__system___basic_print_string
19ee4     52 00 00 FF 
19ee8     94 64 06 F1 | 	add	objptr, ##42132
19eec     32 95 02 FB | 	rdlong	arg02, objptr
19ef0     52 00 00 FF 
19ef4     94 64 86 F1 | 	sub	objptr, ##42132
19ef8     00 92 06 F6 | 	mov	arg01, #0
19efc     00 96 06 F6 | 	mov	arg03, #0
19f00     0A 98 06 F6 | 	mov	arg04, #10
19f04     14 BA B0 FD | 	call	#__system___basic_print_unsigned
19f08     00 92 06 F6 | 	mov	arg01, #0
19f0c     0A 94 06 F6 | 	mov	arg02, #10
19f10     00 96 06 F6 | 	mov	arg03, #0
19f14     28 B9 B0 FD | 	call	#__system___basic_print_char
19f18     00 92 06 F6 | 	mov	arg01, #0
19f1c     08 02 B1 FD | 	call	#__system___getiolock_0622
19f20     3D 01 68 FC | 	wrlong	#0, result1
19f24                 | LR__2176
19f24     52 00 00 FF 
19f28     90 64 06 F1 | 	add	objptr, ##42128
19f2c     32 01 68 FC | 	wrlong	#0, objptr
19f30     06 00 00 FF 
19f34     6C 64 86 F1 | 	sub	objptr, ##3180
19f38     32 A7 62 FC | 	wrlong	local01, objptr
19f3c     06 00 00 FF 
19f40     38 64 06 F1 | 	add	objptr, ##3128
19f44     32 A9 62 FC | 	wrlong	local02, objptr
19f48     04 64 06 F1 | 	add	objptr, #4
19f4c     32 AB 62 FC | 	wrlong	local03, objptr
19f50     52 00 00 FF 
19f54     60 64 86 F1 | 	sub	objptr, ##42080
19f58     11 92 06 F6 | 	mov	arg01, #17
19f5c     08 94 06 F6 | 	mov	arg02, #8
19f60     10 96 06 F6 | 	mov	arg03, #16
19f64     60 7F B0 FD | 	call	#_hg010b_spin2_setspritesize
19f68     10 92 06 F6 | 	mov	arg01, #16
19f6c     20 94 06 F6 | 	mov	arg02, #32
19f70     20 96 06 F6 | 	mov	arg03, #32
19f74     50 7F B0 FD | 	call	#_hg010b_spin2_setspritesize
19f78                 | LR__2177
19f78     E7 F0 03 F6 | 	mov	ptra, fp
19f7c     F2 00 A0 FD | 	call	#popregs_
19f80                 | _do_run_ret
19f80     2D 00 64 FD | 	ret
19f84                 | 
19f84                 | ' 
19f84                 | ' ' ------------------ save
19f84                 | ' 
19f84                 | ' sub do_save                        
19f84                 | _do_save
19f84     0A CA 05 F6 | 	mov	COUNT_, #10
19f88     E8 00 A0 FD | 	call	#pushregs_
19f8c     B8 F0 07 F1 | 	add	ptra, #184
19f90     4C 00 00 FF 
19f94     24 64 06 F1 | 	add	objptr, ##38948
19f98     32 97 02 FB | 	rdlong	arg03, objptr
19f9c     4B AD 02 F6 | 	mov	local04, arg03
19fa0     01 AC 66 F0 | 	shl	local04, #1
19fa4     4B AD 02 F1 | 	add	local04, arg03
19fa8     02 AC 66 F0 | 	shl	local04, #2
19fac     03 00 00 FF 
19fb0     04 64 86 F1 | 	sub	objptr, ##1540
19fb4     32 AD 02 F1 | 	add	local04, objptr
19fb8     56 AF 02 FB | 	rdlong	local05, local04
19fbc                 | ' 
19fbc                 | ' numpar=compiledline(lineptr_e).result.uresult
19fbc                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
19fbc     01 AE 56 F2 | 	cmps	local05, #1 wc
19fc0     49 00 00 FF 
19fc4     20 64 86 F1 | 	sub	objptr, ##37408
19fc8     14 00 90 CD |  if_b	jmp	#LR__2180
19fcc     A0 36 BF FD | 	call	#_pop
19fd0     3D A7 02 F6 | 	mov	local01, result1
19fd4     3E A9 02 F6 | 	mov	local02, result2
19fd8     3F AB 02 F6 | 	mov	local03, result3
19fdc     18 00 90 FD | 	jmp	#LR__2181
19fe0                 | LR__2180
19fe0     54 00 00 FF 
19fe4     A0 64 06 F1 | 	add	objptr, ##43168
19fe8     32 A7 02 FB | 	rdlong	local01, objptr
19fec     54 00 00 FF 
19ff0     A0 64 86 F1 | 	sub	objptr, ##43168
19ff4     1F AA 06 F6 | 	mov	local03, #31
19ff8                 | LR__2181
19ff8                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
19ff8     4C 00 00 FF 
19ffc     2C 64 06 F1 | 	add	objptr, ##38956
1a000     32 93 02 FB | 	rdlong	arg01, objptr
1a004     4C 00 00 FF 
1a008     2C 64 86 F1 | 	sub	objptr, ##38956
1a00c     28 71 B0 FD | 	call	#_pslpeek
1a010     FF FF 7F FF 
1a014     FF 7B 0E F2 | 	cmp	result1, ##-1 wz
1a018     10 00 90 5D |  if_ne	jmp	#LR__2182
1a01c     1B 92 06 F6 | 	mov	arg01, #27
1a020     00 94 06 F6 | 	mov	arg02, #0
1a024     58 6E B0 FD | 	call	#_printerror
1a028     3C 02 90 FD | 	jmp	#LR__2188
1a02c                 | LR__2182
1a02c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1a02c     2B AA 0E F2 | 	cmp	local03, #43 wz
1a030     10 00 90 5D |  if_ne	jmp	#LR__2183
1a034     53 93 02 F6 | 	mov	arg01, local01
1a038     A4 37 BF FD | 	call	#_convertstring
1a03c     3D A7 02 F6 | 	mov	local01, result1
1a040     1F AA 06 F6 | 	mov	local03, #31
1a044                 | LR__2183
1a044                 | ' if t1.result_type=result_string then
1a044     1F AA 0E F2 | 	cmp	local03, #31 wz
1a048     1C 02 90 5D |  if_ne	jmp	#LR__2187
1a04c                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1a04c     99 01 00 FF 
1a050     F7 94 06 F6 | 	mov	arg02, ##@LR__6084
1a054     53 93 02 F6 | 	mov	arg01, local01
1a058     70 AB B0 FD | 	call	#__system___string_cmp
1a05c     00 7A 0E F2 | 	cmp	result1, #0 wz
1a060     54 00 00 AF 
1a064     A0 64 06 A1 |  if_e	add	objptr, ##43168
1a068     32 A7 02 AB |  if_e	rdlong	local01, objptr
1a06c     54 00 00 FF 
1a070     A0 64 C6 F3 | 	sumz	objptr, ##43168
1a074     32 A7 62 5C |  if_ne	wrlong	local01, objptr
1a078     54 00 00 5F 
1a07c     A0 64 86 51 |  if_ne	sub	objptr, ##43168
1a080                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1a080     09 92 06 F6 | 	mov	arg01, #9
1a084     F8 F6 B0 FD | 	call	#__system__close
1a088     09 B0 06 F6 | 	mov	local06, #9
1a08c     4C 00 00 FF 
1a090     38 64 06 F1 | 	add	objptr, ##38968
1a094     32 93 02 FB | 	rdlong	arg01, objptr
1a098     4C 00 00 FF 
1a09c     38 64 86 F1 | 	sub	objptr, ##38968
1a0a0     99 01 00 FF 
1a0a4     F8 94 06 F6 | 	mov	arg02, ##@LR__6085
1a0a8     54 AB B0 FD | 	call	#__system___string_concat
1a0ac     3D 93 02 F6 | 	mov	arg01, result1
1a0b0     53 95 02 F6 | 	mov	arg02, local01
1a0b4     48 AB B0 FD | 	call	#__system___string_concat
1a0b8     3D 95 02 F6 | 	mov	arg02, result1
1a0bc     58 93 02 F6 | 	mov	arg01, local06
1a0c0     0D 96 06 F6 | 	mov	arg03, #13
1a0c4     8C B6 B0 FD | 	call	#__system___basic_open_string
1a0c8     4C 00 00 FF 
1a0cc     2C 64 06 F1 | 	add	objptr, ##38956
1a0d0     32 B3 02 FB | 	rdlong	local07, objptr
1a0d4     4C 00 00 FF 
1a0d8     2C 64 86 F1 | 	sub	objptr, ##38956
1a0dc                 | '   saveptr=programstart
1a0dc                 | '   do
1a0dc                 | LR__2184
1a0dc     E7 92 02 F6 | 	mov	arg01, fp
1a0e0     14 92 06 F1 | 	add	arg01, #20
1a0e4     59 95 02 F6 | 	mov	arg02, local07
1a0e8     18 96 06 F6 | 	mov	arg03, #24
1a0ec     0B 00 00 FF 
1a0f0     CC 64 06 F1 | 	add	objptr, ##5836
1a0f4     30 9B B0 FD | 	call	#_psram_spin2_read1
1a0f8     E7 92 02 F6 | 	mov	arg01, fp
1a0fc     2C 92 06 F1 | 	add	arg01, #44
1a100     1C CE 05 F1 | 	add	fp, #28
1a104     E7 94 02 FB | 	rdlong	arg02, fp
1a108     04 CE 05 F1 | 	add	fp, #4
1a10c     E7 96 02 FB | 	rdlong	arg03, fp
1a110     20 CE 85 F1 | 	sub	fp, #32
1a114     10 9B B0 FD | 	call	#_psram_spin2_read1
1a118     0B 00 00 FF 
1a11c     CC 64 86 F1 | 	sub	objptr, ##5836
1a120     99 01 00 FF 
1a124     FA B4 06 F6 | 	mov	local08, ##@LR__6086
1a128                 | '     psram.read1(varptr(header(0)),saveptr,24)
1a128                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1a128                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1a128     01 B6 06 F6 | 	mov	local09, #1
1a12c     20 CE 05 F1 | 	add	fp, #32
1a130     E7 B8 02 FB | 	rdlong	local10, fp
1a134     20 CE 85 F1 | 	sub	fp, #32
1a138     01 B8 06 F1 | 	add	local10, #1
1a13c                 | LR__2185
1a13c     5C B7 52 F2 | 	cmps	local09, local10 wc
1a140     34 00 90 3D |  if_ae	jmp	#LR__2186
1a144     5B B3 02 F6 | 	mov	local07, local09
1a148     01 B2 86 F1 | 	sub	local07, #1
1a14c     E7 B0 02 F6 | 	mov	local06, fp
1a150     2C B0 06 F1 | 	add	local06, #44
1a154     58 B3 02 F1 | 	add	local07, local06
1a158     59 93 C2 FA | 	rdbyte	arg01, local07
1a15c     B0 C4 B0 FD | 	call	#__system__Chr_S
1a160     3D 95 02 F6 | 	mov	arg02, result1
1a164     5A 93 02 F6 | 	mov	arg01, local08
1a168     94 AA B0 FD | 	call	#__system___string_concat
1a16c     3D B5 02 F6 | 	mov	local08, result1
1a170     01 B6 06 F1 | 	add	local09, #1
1a174     C4 FF 9F FD | 	jmp	#LR__2185
1a178                 | LR__2186
1a178                 | '     print #9, saveline$
1a178     09 92 06 F6 | 	mov	arg01, #9
1a17c     A8 FF B0 FD | 	call	#__system___getiolock_0622
1a180     3D 93 02 F6 | 	mov	arg01, result1
1a184     1C AA B0 FD | 	call	#__system___lockmem
1a188     09 92 06 F6 | 	mov	arg01, #9
1a18c     5A 95 02 F6 | 	mov	arg02, local08
1a190     00 96 06 F6 | 	mov	arg03, #0
1a194     00 B7 B0 FD | 	call	#__system___basic_print_string
1a198     09 92 06 F6 | 	mov	arg01, #9
1a19c     0A 94 06 F6 | 	mov	arg02, #10
1a1a0     00 96 06 F6 | 	mov	arg03, #0
1a1a4     98 B6 B0 FD | 	call	#__system___basic_print_char
1a1a8     09 92 06 F6 | 	mov	arg01, #9
1a1ac     78 FF B0 FD | 	call	#__system___getiolock_0622
1a1b0     3D 01 68 FC | 	wrlong	#0, result1
1a1b4     28 CE 05 F1 | 	add	fp, #40
1a1b8     E7 B0 02 FB | 	rdlong	local06, fp
1a1bc     58 B3 02 F6 | 	mov	local07, local06
1a1c0     28 CE 85 F1 | 	sub	fp, #40
1a1c4     FF FF 3F FF 
1a1c8     FF B1 0E F2 | 	cmp	local06, ##2147483647 wz
1a1cc     0C FF 9F 5D |  if_ne	jmp	#LR__2184
1a1d0                 | '   close #9  
1a1d0     09 92 06 F6 | 	mov	arg01, #9
1a1d4     A8 F5 B0 FD | 	call	#__system__close
1a1d8                 | '   print "Saved as ";currentdir$+"/"+loadname
1a1d8     00 92 06 F6 | 	mov	arg01, #0
1a1dc     48 FF B0 FD | 	call	#__system___getiolock_0622
1a1e0     3D 93 02 F6 | 	mov	arg01, result1
1a1e4     BC A9 B0 FD | 	call	#__system___lockmem
1a1e8     99 01 00 FF 
1a1ec     FB 94 06 F6 | 	mov	arg02, ##@LR__6087
1a1f0     00 92 06 F6 | 	mov	arg01, #0
1a1f4     00 96 06 F6 | 	mov	arg03, #0
1a1f8     9C B6 B0 FD | 	call	#__system___basic_print_string
1a1fc     00 AC 06 F6 | 	mov	local04, #0
1a200     4C 00 00 FF 
1a204     38 64 06 F1 | 	add	objptr, ##38968
1a208     32 93 02 FB | 	rdlong	arg01, objptr
1a20c     4C 00 00 FF 
1a210     38 64 86 F1 | 	sub	objptr, ##38968
1a214     99 01 00 FF 
1a218     05 95 06 F6 | 	mov	arg02, ##@LR__6088
1a21c     E0 A9 B0 FD | 	call	#__system___string_concat
1a220     3D 93 02 F6 | 	mov	arg01, result1
1a224     54 00 00 FF 
1a228     A0 64 06 F1 | 	add	objptr, ##43168
1a22c     32 95 02 FB | 	rdlong	arg02, objptr
1a230     54 00 00 FF 
1a234     A0 64 86 F1 | 	sub	objptr, ##43168
1a238     C4 A9 B0 FD | 	call	#__system___string_concat
1a23c     3D 95 02 F6 | 	mov	arg02, result1
1a240     56 93 02 F6 | 	mov	arg01, local04
1a244     00 96 06 F6 | 	mov	arg03, #0
1a248     4C B6 B0 FD | 	call	#__system___basic_print_string
1a24c     00 92 06 F6 | 	mov	arg01, #0
1a250     0A 94 06 F6 | 	mov	arg02, #10
1a254     00 96 06 F6 | 	mov	arg03, #0
1a258     E4 B5 B0 FD | 	call	#__system___basic_print_char
1a25c     00 92 06 F6 | 	mov	arg01, #0
1a260     C4 FE B0 FD | 	call	#__system___getiolock_0622
1a264     3D 01 68 FC | 	wrlong	#0, result1
1a268                 | LR__2187
1a268                 | LR__2188
1a268     E7 F0 03 F6 | 	mov	ptra, fp
1a26c     F2 00 A0 FD | 	call	#popregs_
1a270                 | _do_save_ret
1a270     2D 00 64 FD | 	ret
1a274                 | 
1a274                 | ' 
1a274                 | ' ' ------------------ setamode
1a274                 | ' 
1a274                 | ' sub do_setamode
1a274                 | _do_setamode
1a274     02 CA 05 F6 | 	mov	COUNT_, #2
1a278     E8 00 A0 FD | 	call	#pushregs_
1a27c     18 F0 07 F1 | 	add	ptra, #24
1a280     EC 33 BF FD | 	call	#_pop
1a284     3D 93 02 F6 | 	mov	arg01, result1
1a288     3E A7 02 F6 | 	mov	local01, result2
1a28c     3F A9 02 F6 | 	mov	local02, result3
1a290     E7 92 62 FC | 	wrlong	arg01, fp
1a294     04 CE 05 F1 | 	add	fp, #4
1a298     E7 A6 62 FC | 	wrlong	local01, fp
1a29c     04 CE 05 F1 | 	add	fp, #4
1a2a0     E7 A8 62 FC | 	wrlong	local02, fp
1a2a4     08 CE 85 F1 | 	sub	fp, #8
1a2a8     C4 33 BF FD | 	call	#_pop
1a2ac     3D A9 02 F6 | 	mov	local02, result1
1a2b0     0C CE 05 F1 | 	add	fp, #12
1a2b4     E7 A8 62 FC | 	wrlong	local02, fp
1a2b8     04 CE 05 F1 | 	add	fp, #4
1a2bc     E7 7C 62 FC | 	wrlong	result2, fp
1a2c0     04 CE 05 F1 | 	add	fp, #4
1a2c4     E7 7E 62 FC | 	wrlong	result3, fp
1a2c8     08 CE 85 F1 | 	sub	fp, #8
1a2cc     E7 92 02 F6 | 	mov	arg01, fp
1a2d0     0C CE 85 F1 | 	sub	fp, #12
1a2d4     74 35 BF FD | 	call	#_converttoint
1a2d8     3D A7 02 F6 | 	mov	local01, result1
1a2dc     03 A6 66 F0 | 	shl	local01, #3
1a2e0     3D A7 82 F1 | 	sub	local01, result1
1a2e4     02 A6 66 F0 | 	shl	local01, #2
1a2e8     32 A9 02 F6 | 	mov	local02, objptr
1a2ec     16 00 00 FF 
1a2f0     BC A8 06 F1 | 	add	local02, ##11452
1a2f4     54 A7 02 F1 | 	add	local01, local02
1a2f8     E7 92 02 F6 | 	mov	arg01, fp
1a2fc     4C 35 BF FD | 	call	#_converttoint
1a300     16 A6 06 F1 | 	add	local01, #22
1a304     53 7B 52 FC | 	wrword	result1, local01
1a308     E7 F0 03 F6 | 	mov	ptra, fp
1a30c     F2 00 A0 FD | 	call	#popregs_
1a310                 | _do_setamode_ret
1a310     2D 00 64 FD | 	ret
1a314                 | 
1a314                 | ' 
1a314                 | ' 
1a314                 | ' ' ------------------ setcolor
1a314                 | ' 
1a314                 | ' sub do_setcolor
1a314                 | _do_setcolor
1a314     05 CA 05 F6 | 	mov	COUNT_, #5
1a318     E8 00 A0 FD | 	call	#pushregs_
1a31c     20 F0 07 F1 | 	add	ptra, #32
1a320     4C 00 00 FF 
1a324     24 64 06 F1 | 	add	objptr, ##38948
1a328     32 99 02 FB | 	rdlong	arg04, objptr
1a32c     4C 97 02 F6 | 	mov	arg03, arg04
1a330     01 96 66 F0 | 	shl	arg03, #1
1a334     4C 97 02 F1 | 	add	arg03, arg04
1a338     02 96 66 F0 | 	shl	arg03, #2
1a33c     03 00 00 FF 
1a340     04 64 86 F1 | 	sub	objptr, ##1540
1a344     32 97 02 F1 | 	add	arg03, objptr
1a348     4B A7 02 FB | 	rdlong	local01, arg03
1a34c                 | ' 
1a34c                 | ' numpar=compiledline(lineptr_e).result.uresult
1a34c                 | ' 
1a34c                 | ' if numpar=4 then
1a34c     04 A6 0E F2 | 	cmp	local01, #4 wz
1a350     49 00 00 FF 
1a354     20 64 86 F1 | 	sub	objptr, ##37408
1a358     B4 00 90 5D |  if_ne	jmp	#LR__2190
1a35c     10 33 BF FD | 	call	#_pop
1a360     3F A7 02 F6 | 	mov	local01, result3
1a364     E7 7A 62 FC | 	wrlong	result1, fp
1a368     04 CE 05 F1 | 	add	fp, #4
1a36c     E7 7C 62 FC | 	wrlong	result2, fp
1a370     04 CE 05 F1 | 	add	fp, #4
1a374     E7 A6 62 FC | 	wrlong	local01, fp
1a378     08 CE 85 F1 | 	sub	fp, #8
1a37c     E7 92 02 F6 | 	mov	arg01, fp
1a380     C8 34 BF FD | 	call	#_converttoint
1a384     3D A9 02 F6 | 	mov	local02, result1
1a388     E4 32 BF FD | 	call	#_pop
1a38c     3F A7 02 F6 | 	mov	local01, result3
1a390     E7 7A 62 FC | 	wrlong	result1, fp
1a394     04 CE 05 F1 | 	add	fp, #4
1a398     E7 7C 62 FC | 	wrlong	result2, fp
1a39c     04 CE 05 F1 | 	add	fp, #4
1a3a0     E7 A6 62 FC | 	wrlong	local01, fp
1a3a4     08 CE 85 F1 | 	sub	fp, #8
1a3a8     E7 92 02 F6 | 	mov	arg01, fp
1a3ac     9C 34 BF FD | 	call	#_converttoint
1a3b0     3D AB 02 F6 | 	mov	local03, result1
1a3b4     B8 32 BF FD | 	call	#_pop
1a3b8     3F A7 02 F6 | 	mov	local01, result3
1a3bc     E7 7A 62 FC | 	wrlong	result1, fp
1a3c0     04 CE 05 F1 | 	add	fp, #4
1a3c4     E7 7C 62 FC | 	wrlong	result2, fp
1a3c8     04 CE 05 F1 | 	add	fp, #4
1a3cc     E7 A6 62 FC | 	wrlong	local01, fp
1a3d0     08 CE 85 F1 | 	sub	fp, #8
1a3d4     E7 92 02 F6 | 	mov	arg01, fp
1a3d8     70 34 BF FD | 	call	#_converttoint
1a3dc     3D AD 02 F6 | 	mov	local04, result1
1a3e0     8C 32 BF FD | 	call	#_pop
1a3e4     3F A7 02 F6 | 	mov	local01, result3
1a3e8     E7 7A 62 FC | 	wrlong	result1, fp
1a3ec     04 CE 05 F1 | 	add	fp, #4
1a3f0     E7 7C 62 FC | 	wrlong	result2, fp
1a3f4     04 CE 05 F1 | 	add	fp, #4
1a3f8     E7 A6 62 FC | 	wrlong	local01, fp
1a3fc     08 CE 85 F1 | 	sub	fp, #8
1a400     E7 92 02 F6 | 	mov	arg01, fp
1a404     44 34 BF FD | 	call	#_converttoint
1a408     3D AF 02 F6 | 	mov	local05, result1
1a40c     C0 00 90 FD | 	jmp	#LR__2193
1a410                 | LR__2190
1a410     02 A6 0E F2 | 	cmp	local01, #2 wz
1a414     68 00 90 5D |  if_ne	jmp	#LR__2191
1a418     54 32 BF FD | 	call	#_pop
1a41c     3F AF 02 F6 | 	mov	local05, result3
1a420     E7 7A 62 FC | 	wrlong	result1, fp
1a424     04 CE 05 F1 | 	add	fp, #4
1a428     E7 7C 62 FC | 	wrlong	result2, fp
1a42c     04 CE 05 F1 | 	add	fp, #4
1a430     E7 AE 62 FC | 	wrlong	local05, fp
1a434     08 CE 85 F1 | 	sub	fp, #8
1a438     E7 92 02 F6 | 	mov	arg01, fp
1a43c     0C 34 BF FD | 	call	#_converttoint
1a440     3D AD 02 F6 | 	mov	local04, result1
1a444     56 A9 E2 F8 | 	getbyte	local02, local04, #0
1a448     56 AB EA F8 | 	getbyte	local03, local04, #1
1a44c     56 AD F2 F8 | 	getbyte	local04, local04, #2
1a450     1C 32 BF FD | 	call	#_pop
1a454     3F AF 02 F6 | 	mov	local05, result3
1a458     E7 7A 62 FC | 	wrlong	result1, fp
1a45c     04 CE 05 F1 | 	add	fp, #4
1a460     E7 7C 62 FC | 	wrlong	result2, fp
1a464     04 CE 05 F1 | 	add	fp, #4
1a468     E7 AE 62 FC | 	wrlong	local05, fp
1a46c     08 CE 85 F1 | 	sub	fp, #8
1a470     E7 92 02 F6 | 	mov	arg01, fp
1a474     D4 33 BF FD | 	call	#_converttoint
1a478     3D AF 02 F6 | 	mov	local05, result1
1a47c     50 00 90 FD | 	jmp	#LR__2192
1a480                 | LR__2191
1a480                 | '   print "setcolor: "; : printerror(39,runheader(0)) : return  
1a480     00 92 06 F6 | 	mov	arg01, #0
1a484     A0 FC B0 FD | 	call	#__system___getiolock_0622
1a488     3D 93 02 F6 | 	mov	arg01, result1
1a48c     14 A7 B0 FD | 	call	#__system___lockmem
1a490     99 01 00 FF 
1a494     07 95 06 F6 | 	mov	arg02, ##@LR__6089
1a498     00 92 06 F6 | 	mov	arg01, #0
1a49c     00 96 06 F6 | 	mov	arg03, #0
1a4a0     F4 B3 B0 FD | 	call	#__system___basic_print_string
1a4a4     00 92 06 F6 | 	mov	arg01, #0
1a4a8     7C FC B0 FD | 	call	#__system___getiolock_0622
1a4ac     3D 01 68 FC | 	wrlong	#0, result1
1a4b0     52 00 00 FF 
1a4b4     94 64 06 F1 | 	add	objptr, ##42132
1a4b8     32 95 02 FB | 	rdlong	arg02, objptr
1a4bc     52 00 00 FF 
1a4c0     94 64 86 F1 | 	sub	objptr, ##42132
1a4c4     27 92 06 F6 | 	mov	arg01, #39
1a4c8     B4 69 B0 FD | 	call	#_printerror
1a4cc     14 00 90 FD | 	jmp	#LR__2194
1a4d0                 | LR__2192
1a4d0                 | LR__2193
1a4d0     57 93 02 F6 | 	mov	arg01, local05
1a4d4     56 95 02 F6 | 	mov	arg02, local04
1a4d8     55 97 02 F6 | 	mov	arg03, local03
1a4dc     54 99 02 F6 | 	mov	arg04, local02
1a4e0     4C 87 B0 FD | 	call	#_hg010b_spin2_setcolor
1a4e4                 | LR__2194
1a4e4     E7 F0 03 F6 | 	mov	ptra, fp
1a4e8     F2 00 A0 FD | 	call	#popregs_
1a4ec                 | _do_setcolor_ret
1a4ec     2D 00 64 FD | 	ret
1a4f0                 | 
1a4f0                 | ' 
1a4f0                 | ' ' ------------------ setdelay
1a4f0                 | ' 
1a4f0                 | ' sub do_setdelay
1a4f0                 | _do_setdelay
1a4f0     02 CA 05 F6 | 	mov	COUNT_, #2
1a4f4     E8 00 A0 FD | 	call	#pushregs_
1a4f8     18 F0 07 F1 | 	add	ptra, #24
1a4fc     70 31 BF FD | 	call	#_pop
1a500     3D 93 02 F6 | 	mov	arg01, result1
1a504     3E A7 02 F6 | 	mov	local01, result2
1a508     3F A9 02 F6 | 	mov	local02, result3
1a50c     E7 92 62 FC | 	wrlong	arg01, fp
1a510     04 CE 05 F1 | 	add	fp, #4
1a514     E7 A6 62 FC | 	wrlong	local01, fp
1a518     04 CE 05 F1 | 	add	fp, #4
1a51c     E7 A8 62 FC | 	wrlong	local02, fp
1a520     08 CE 85 F1 | 	sub	fp, #8
1a524     48 31 BF FD | 	call	#_pop
1a528     3D A9 02 F6 | 	mov	local02, result1
1a52c     0C CE 05 F1 | 	add	fp, #12
1a530     E7 A8 62 FC | 	wrlong	local02, fp
1a534     04 CE 05 F1 | 	add	fp, #4
1a538     E7 7C 62 FC | 	wrlong	result2, fp
1a53c     04 CE 05 F1 | 	add	fp, #4
1a540     E7 7E 62 FC | 	wrlong	result3, fp
1a544     08 CE 85 F1 | 	sub	fp, #8
1a548     E7 92 02 F6 | 	mov	arg01, fp
1a54c     0C CE 85 F1 | 	sub	fp, #12
1a550     F8 32 BF FD | 	call	#_converttoint
1a554     3D A7 02 F6 | 	mov	local01, result1
1a558     03 A6 66 F0 | 	shl	local01, #3
1a55c     3D A7 82 F1 | 	sub	local01, result1
1a560     02 A6 66 F0 | 	shl	local01, #2
1a564     32 A9 02 F6 | 	mov	local02, objptr
1a568     16 00 00 FF 
1a56c     BC A8 06 F1 | 	add	local02, ##11452
1a570     54 A7 02 F1 | 	add	local01, local02
1a574     E7 92 02 F6 | 	mov	arg01, fp
1a578     D0 32 BF FD | 	call	#_converttoint
1a57c     06 A6 06 F1 | 	add	local01, #6
1a580     53 7B 52 FC | 	wrword	result1, local01
1a584     E7 F0 03 F6 | 	mov	ptra, fp
1a588     F2 00 A0 FD | 	call	#popregs_
1a58c                 | _do_setdelay_ret
1a58c     2D 00 64 FD | 	ret
1a590                 | 
1a590                 | ' 
1a590                 | ' ' ------------------ setenv
1a590                 | ' 
1a590                 | ' sub do_setenv
1a590                 | _do_setenv
1a590     02 CA 05 F6 | 	mov	COUNT_, #2
1a594     E8 00 A0 FD | 	call	#pushregs_
1a598     18 F0 07 F1 | 	add	ptra, #24
1a59c     D0 30 BF FD | 	call	#_pop
1a5a0     3D 93 02 F6 | 	mov	arg01, result1
1a5a4     3E A7 02 F6 | 	mov	local01, result2
1a5a8     3F A9 02 F6 | 	mov	local02, result3
1a5ac     E7 92 62 FC | 	wrlong	arg01, fp
1a5b0     04 CE 05 F1 | 	add	fp, #4
1a5b4     E7 A6 62 FC | 	wrlong	local01, fp
1a5b8     04 CE 05 F1 | 	add	fp, #4
1a5bc     E7 A8 62 FC | 	wrlong	local02, fp
1a5c0     08 CE 85 F1 | 	sub	fp, #8
1a5c4     A8 30 BF FD | 	call	#_pop
1a5c8     3D A9 02 F6 | 	mov	local02, result1
1a5cc     0C CE 05 F1 | 	add	fp, #12
1a5d0     E7 A8 62 FC | 	wrlong	local02, fp
1a5d4     04 CE 05 F1 | 	add	fp, #4
1a5d8     E7 7C 62 FC | 	wrlong	result2, fp
1a5dc     04 CE 05 F1 | 	add	fp, #4
1a5e0     E7 7E 62 FC | 	wrlong	result3, fp
1a5e4     08 CE 85 F1 | 	sub	fp, #8
1a5e8     E7 92 02 F6 | 	mov	arg01, fp
1a5ec     0C CE 85 F1 | 	sub	fp, #12
1a5f0     58 32 BF FD | 	call	#_converttoint
1a5f4     3D A7 02 F6 | 	mov	local01, result1
1a5f8     03 A6 66 F0 | 	shl	local01, #3
1a5fc     3D A7 82 F1 | 	sub	local01, result1
1a600     02 A6 66 F0 | 	shl	local01, #2
1a604     32 A9 02 F6 | 	mov	local02, objptr
1a608     16 00 00 FF 
1a60c     BC A8 06 F1 | 	add	local02, ##11452
1a610     54 A7 02 F1 | 	add	local01, local02
1a614     E7 92 02 F6 | 	mov	arg01, fp
1a618     30 32 BF FD | 	call	#_converttoint
1a61c     05 A6 06 F1 | 	add	local01, #5
1a620     53 7B 42 FC | 	wrbyte	result1, local01
1a624     E7 F0 03 F6 | 	mov	ptra, fp
1a628     F2 00 A0 FD | 	call	#popregs_
1a62c                 | _do_setenv_ret
1a62c     2D 00 64 FD | 	ret
1a630                 | 
1a630                 | ' 
1a630                 | ' ' ------------------ setlen
1a630                 | ' 
1a630                 | ' sub do_setlen
1a630                 | _do_setlen
1a630     02 CA 05 F6 | 	mov	COUNT_, #2
1a634     E8 00 A0 FD | 	call	#pushregs_
1a638     18 F0 07 F1 | 	add	ptra, #24
1a63c     30 30 BF FD | 	call	#_pop
1a640     3D 93 02 F6 | 	mov	arg01, result1
1a644     3E A7 02 F6 | 	mov	local01, result2
1a648     3F A9 02 F6 | 	mov	local02, result3
1a64c     E7 92 62 FC | 	wrlong	arg01, fp
1a650     04 CE 05 F1 | 	add	fp, #4
1a654     E7 A6 62 FC | 	wrlong	local01, fp
1a658     04 CE 05 F1 | 	add	fp, #4
1a65c     E7 A8 62 FC | 	wrlong	local02, fp
1a660     08 CE 85 F1 | 	sub	fp, #8
1a664     08 30 BF FD | 	call	#_pop
1a668     3D A9 02 F6 | 	mov	local02, result1
1a66c     0C CE 05 F1 | 	add	fp, #12
1a670     E7 A8 62 FC | 	wrlong	local02, fp
1a674     04 CE 05 F1 | 	add	fp, #4
1a678     E7 7C 62 FC | 	wrlong	result2, fp
1a67c     04 CE 05 F1 | 	add	fp, #4
1a680     E7 7E 62 FC | 	wrlong	result3, fp
1a684     08 CE 85 F1 | 	sub	fp, #8
1a688     E7 92 02 F6 | 	mov	arg01, fp
1a68c     0C CE 85 F1 | 	sub	fp, #12
1a690     B8 31 BF FD | 	call	#_converttoint
1a694     3D A7 02 F6 | 	mov	local01, result1
1a698     03 A6 66 F0 | 	shl	local01, #3
1a69c     3D A7 82 F1 | 	sub	local01, result1
1a6a0     02 A6 66 F0 | 	shl	local01, #2
1a6a4     32 A9 02 F6 | 	mov	local02, objptr
1a6a8     16 00 00 FF 
1a6ac     BC A8 06 F1 | 	add	local02, ##11452
1a6b0     54 A7 02 F1 | 	add	local01, local02
1a6b4     E7 92 02 F6 | 	mov	arg01, fp
1a6b8     4C 32 BF FD | 	call	#_converttofloat
1a6bc     08 A6 06 F1 | 	add	local01, #8
1a6c0     53 7B 62 FC | 	wrlong	result1, local01
1a6c4     E7 F0 03 F6 | 	mov	ptra, fp
1a6c8     F2 00 A0 FD | 	call	#popregs_
1a6cc                 | _do_setlen_ret
1a6cc     2D 00 64 FD | 	ret
1a6d0                 | 
1a6d0                 | ' 
1a6d0                 | ' ' ------------------ setpan
1a6d0                 | ' 
1a6d0                 | ' sub do_setpan
1a6d0                 | _do_setpan
1a6d0     02 CA 05 F6 | 	mov	COUNT_, #2
1a6d4     E8 00 A0 FD | 	call	#pushregs_
1a6d8     18 F0 07 F1 | 	add	ptra, #24
1a6dc     90 2F BF FD | 	call	#_pop
1a6e0     3D 93 02 F6 | 	mov	arg01, result1
1a6e4     3E A7 02 F6 | 	mov	local01, result2
1a6e8     3F A9 02 F6 | 	mov	local02, result3
1a6ec     E7 92 62 FC | 	wrlong	arg01, fp
1a6f0     04 CE 05 F1 | 	add	fp, #4
1a6f4     E7 A6 62 FC | 	wrlong	local01, fp
1a6f8     04 CE 05 F1 | 	add	fp, #4
1a6fc     E7 A8 62 FC | 	wrlong	local02, fp
1a700     08 CE 85 F1 | 	sub	fp, #8
1a704     68 2F BF FD | 	call	#_pop
1a708     3D A9 02 F6 | 	mov	local02, result1
1a70c     0C CE 05 F1 | 	add	fp, #12
1a710     E7 A8 62 FC | 	wrlong	local02, fp
1a714     04 CE 05 F1 | 	add	fp, #4
1a718     E7 7C 62 FC | 	wrlong	result2, fp
1a71c     04 CE 05 F1 | 	add	fp, #4
1a720     E7 7E 62 FC | 	wrlong	result3, fp
1a724     08 CE 85 F1 | 	sub	fp, #8
1a728     E7 92 02 F6 | 	mov	arg01, fp
1a72c     0C CE 85 F1 | 	sub	fp, #12
1a730     18 31 BF FD | 	call	#_converttoint
1a734     3D A7 02 F6 | 	mov	local01, result1
1a738     03 A6 66 F0 | 	shl	local01, #3
1a73c     3D A7 82 F1 | 	sub	local01, result1
1a740     02 A6 66 F0 | 	shl	local01, #2
1a744     32 A9 02 F6 | 	mov	local02, objptr
1a748     16 00 00 FF 
1a74c     BC A8 06 F1 | 	add	local02, ##11452
1a750     54 A7 02 F1 | 	add	local01, local02
1a754     E7 92 02 F6 | 	mov	arg01, fp
1a758     AC 31 BF FD | 	call	#_converttofloat
1a75c     10 A6 06 F1 | 	add	local01, #16
1a760     53 7B 62 FC | 	wrlong	result1, local01
1a764     E7 F0 03 F6 | 	mov	ptra, fp
1a768     F2 00 A0 FD | 	call	#popregs_
1a76c                 | _do_setpan_ret
1a76c     2D 00 64 FD | 	ret
1a770                 | 
1a770                 | ' 
1a770                 | ' ' ------------------ setsustain
1a770                 | ' 
1a770                 | ' sub do_setsustain
1a770                 | _do_setsustain
1a770     02 CA 05 F6 | 	mov	COUNT_, #2
1a774     E8 00 A0 FD | 	call	#pushregs_
1a778     18 F0 07 F1 | 	add	ptra, #24
1a77c     F0 2E BF FD | 	call	#_pop
1a780     3D 93 02 F6 | 	mov	arg01, result1
1a784     3E A7 02 F6 | 	mov	local01, result2
1a788     3F A9 02 F6 | 	mov	local02, result3
1a78c     E7 92 62 FC | 	wrlong	arg01, fp
1a790     04 CE 05 F1 | 	add	fp, #4
1a794     E7 A6 62 FC | 	wrlong	local01, fp
1a798     04 CE 05 F1 | 	add	fp, #4
1a79c     E7 A8 62 FC | 	wrlong	local02, fp
1a7a0     08 CE 85 F1 | 	sub	fp, #8
1a7a4     C8 2E BF FD | 	call	#_pop
1a7a8     3D A9 02 F6 | 	mov	local02, result1
1a7ac     0C CE 05 F1 | 	add	fp, #12
1a7b0     E7 A8 62 FC | 	wrlong	local02, fp
1a7b4     04 CE 05 F1 | 	add	fp, #4
1a7b8     E7 7C 62 FC | 	wrlong	result2, fp
1a7bc     04 CE 05 F1 | 	add	fp, #4
1a7c0     E7 7E 62 FC | 	wrlong	result3, fp
1a7c4     08 CE 85 F1 | 	sub	fp, #8
1a7c8     E7 92 02 F6 | 	mov	arg01, fp
1a7cc     0C CE 85 F1 | 	sub	fp, #12
1a7d0     78 30 BF FD | 	call	#_converttoint
1a7d4     3D A7 02 F6 | 	mov	local01, result1
1a7d8     03 A6 66 F0 | 	shl	local01, #3
1a7dc     3D A7 82 F1 | 	sub	local01, result1
1a7e0     02 A6 66 F0 | 	shl	local01, #2
1a7e4     32 A9 02 F6 | 	mov	local02, objptr
1a7e8     16 00 00 FF 
1a7ec     BC A8 06 F1 | 	add	local02, ##11452
1a7f0     54 A7 02 F1 | 	add	local01, local02
1a7f4     E7 92 02 F6 | 	mov	arg01, fp
1a7f8     50 30 BF FD | 	call	#_converttoint
1a7fc     14 A6 06 F1 | 	add	local01, #20
1a800     53 7B 52 FC | 	wrword	result1, local01
1a804     E7 F0 03 F6 | 	mov	ptra, fp
1a808     F2 00 A0 FD | 	call	#popregs_
1a80c                 | _do_setsustain_ret
1a80c     2D 00 64 FD | 	ret
1a810                 | 
1a810                 | ' 
1a810                 | ' ' ------------------ setvol
1a810                 | ' 
1a810                 | ' sub do_setvol
1a810                 | _do_setvol
1a810     02 CA 05 F6 | 	mov	COUNT_, #2
1a814     E8 00 A0 FD | 	call	#pushregs_
1a818     18 F0 07 F1 | 	add	ptra, #24
1a81c     50 2E BF FD | 	call	#_pop
1a820     3D 93 02 F6 | 	mov	arg01, result1
1a824     3E A7 02 F6 | 	mov	local01, result2
1a828     3F A9 02 F6 | 	mov	local02, result3
1a82c     E7 92 62 FC | 	wrlong	arg01, fp
1a830     04 CE 05 F1 | 	add	fp, #4
1a834     E7 A6 62 FC | 	wrlong	local01, fp
1a838     04 CE 05 F1 | 	add	fp, #4
1a83c     E7 A8 62 FC | 	wrlong	local02, fp
1a840     08 CE 85 F1 | 	sub	fp, #8
1a844     28 2E BF FD | 	call	#_pop
1a848     3D A9 02 F6 | 	mov	local02, result1
1a84c     0C CE 05 F1 | 	add	fp, #12
1a850     E7 A8 62 FC | 	wrlong	local02, fp
1a854     04 CE 05 F1 | 	add	fp, #4
1a858     E7 7C 62 FC | 	wrlong	result2, fp
1a85c     04 CE 05 F1 | 	add	fp, #4
1a860     E7 7E 62 FC | 	wrlong	result3, fp
1a864     08 CE 85 F1 | 	sub	fp, #8
1a868     E7 92 02 F6 | 	mov	arg01, fp
1a86c     0C CE 85 F1 | 	sub	fp, #12
1a870     D8 2F BF FD | 	call	#_converttoint
1a874     3D A7 02 F6 | 	mov	local01, result1
1a878     03 A6 66 F0 | 	shl	local01, #3
1a87c     3D A7 82 F1 | 	sub	local01, result1
1a880     02 A6 66 F0 | 	shl	local01, #2
1a884     32 A9 02 F6 | 	mov	local02, objptr
1a888     16 00 00 FF 
1a88c     BC A8 06 F1 | 	add	local02, ##11452
1a890     54 A7 02 F1 | 	add	local01, local02
1a894     E7 92 02 F6 | 	mov	arg01, fp
1a898     6C 30 BF FD | 	call	#_converttofloat
1a89c     0C A6 06 F1 | 	add	local01, #12
1a8a0     53 7B 62 FC | 	wrlong	result1, local01
1a8a4     E7 F0 03 F6 | 	mov	ptra, fp
1a8a8     F2 00 A0 FD | 	call	#popregs_
1a8ac                 | _do_setvol_ret
1a8ac     2D 00 64 FD | 	ret
1a8b0                 | 
1a8b0                 | ' 
1a8b0                 | ' ' ------------------ setwave
1a8b0                 | ' 
1a8b0                 | ' sub do_setwave
1a8b0                 | _do_setwave
1a8b0     02 CA 05 F6 | 	mov	COUNT_, #2
1a8b4     E8 00 A0 FD | 	call	#pushregs_
1a8b8     18 F0 07 F1 | 	add	ptra, #24
1a8bc     B0 2D BF FD | 	call	#_pop
1a8c0     3D 93 02 F6 | 	mov	arg01, result1
1a8c4     3E A7 02 F6 | 	mov	local01, result2
1a8c8     3F A9 02 F6 | 	mov	local02, result3
1a8cc     E7 92 62 FC | 	wrlong	arg01, fp
1a8d0     04 CE 05 F1 | 	add	fp, #4
1a8d4     E7 A6 62 FC | 	wrlong	local01, fp
1a8d8     04 CE 05 F1 | 	add	fp, #4
1a8dc     E7 A8 62 FC | 	wrlong	local02, fp
1a8e0     08 CE 85 F1 | 	sub	fp, #8
1a8e4     88 2D BF FD | 	call	#_pop
1a8e8     3D A9 02 F6 | 	mov	local02, result1
1a8ec     0C CE 05 F1 | 	add	fp, #12
1a8f0     E7 A8 62 FC | 	wrlong	local02, fp
1a8f4     04 CE 05 F1 | 	add	fp, #4
1a8f8     E7 7C 62 FC | 	wrlong	result2, fp
1a8fc     04 CE 05 F1 | 	add	fp, #4
1a900     E7 7E 62 FC | 	wrlong	result3, fp
1a904     08 CE 85 F1 | 	sub	fp, #8
1a908     E7 92 02 F6 | 	mov	arg01, fp
1a90c     0C CE 85 F1 | 	sub	fp, #12
1a910     38 2F BF FD | 	call	#_converttoint
1a914     3D A7 02 F6 | 	mov	local01, result1
1a918     03 A6 66 F0 | 	shl	local01, #3
1a91c     3D A7 82 F1 | 	sub	local01, result1
1a920     02 A6 66 F0 | 	shl	local01, #2
1a924     32 A9 02 F6 | 	mov	local02, objptr
1a928     16 00 00 FF 
1a92c     BC A8 06 F1 | 	add	local02, ##11452
1a930     54 A7 02 F1 | 	add	local01, local02
1a934     E7 92 02 F6 | 	mov	arg01, fp
1a938     10 2F BF FD | 	call	#_converttoint
1a93c     04 A6 06 F1 | 	add	local01, #4
1a940     53 7B 42 FC | 	wrbyte	result1, local01
1a944     E7 F0 03 F6 | 	mov	ptra, fp
1a948     F2 00 A0 FD | 	call	#popregs_
1a94c                 | _do_setwave_ret
1a94c     2D 00 64 FD | 	ret
1a950                 | 
1a950                 | ' 
1a950                 | ' ' ------------------ shutup
1a950                 | ' 
1a950                 | ' sub do_shutup
1a950                 | _do_shutup
1a950     03 CA 05 F6 | 	mov	COUNT_, #3
1a954     E8 00 A0 FD | 	call	#pushregs_
1a958     18 F0 07 F1 | 	add	ptra, #24
1a95c     4C 00 00 FF 
1a960     24 64 06 F1 | 	add	objptr, ##38948
1a964     32 A7 02 FB | 	rdlong	local01, objptr
1a968     53 A9 02 F6 | 	mov	local02, local01
1a96c     01 A8 66 F0 | 	shl	local02, #1
1a970     53 A9 02 F1 | 	add	local02, local01
1a974     02 A8 66 F0 | 	shl	local02, #2
1a978     03 00 00 FF 
1a97c     04 64 86 F1 | 	sub	objptr, ##1540
1a980     32 A9 02 F1 | 	add	local02, objptr
1a984     54 A9 0A FB | 	rdlong	local02, local02 wz
1a988                 | ' 
1a988                 | ' numpar=compiledline(lineptr_e).result.uresult
1a988                 | ' if numpar=0 then
1a988     49 00 00 FF 
1a98c     20 64 86 F1 | 	sub	objptr, ##37408
1a990     40 00 90 5D |  if_ne	jmp	#LR__2202
1a994                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1a994     00 AA 06 F6 | 	mov	local03, #0
1a998     38 00 00 FF 
1a99c     B4 65 06 F1 | 	add	objptr, ##29108
1a9a0     D7 12 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
1a9a4                 | LR__2200
1a9a4     32 93 02 FB | 	rdlong	arg01, objptr
1a9a8     55 A9 02 F6 | 	mov	local02, local03
1a9ac     06 A8 66 F0 | 	shl	local02, #6
1a9b0     54 93 02 F1 | 	add	arg01, local02
1a9b4     14 92 06 F1 | 	add	arg01, #20
1a9b8     49 01 58 FC | 	wrword	#0, arg01
1a9bc     01 AA 06 F1 | 	add	local03, #1
1a9c0     08 AA 56 F2 | 	cmps	local03, #8 wc
1a9c4     DC FF 9F CD |  if_b	jmp	#LR__2200
1a9c8                 | LR__2201
1a9c8     38 00 00 FF 
1a9cc     B4 65 86 F1 | 	sub	objptr, ##29108
1a9d0     58 00 90 FD | 	jmp	#LR__2203
1a9d4                 | LR__2202
1a9d4     98 2C BF FD | 	call	#_pop
1a9d8     3F A7 02 F6 | 	mov	local01, result3
1a9dc     E7 7A 62 FC | 	wrlong	result1, fp
1a9e0     04 CE 05 F1 | 	add	fp, #4
1a9e4     E7 7C 62 FC | 	wrlong	result2, fp
1a9e8     04 CE 05 F1 | 	add	fp, #4
1a9ec     E7 A6 62 FC | 	wrlong	local01, fp
1a9f0     08 CE 85 F1 | 	sub	fp, #8
1a9f4     E7 92 02 F6 | 	mov	arg01, fp
1a9f8     50 2E BF FD | 	call	#_converttoint
1a9fc     3D AB 52 F6 | 	abs	local03, result1 wc
1aa00     07 AA 06 F5 | 	and	local03, #7
1aa04     55 A9 82 F6 | 	negc	local02, local03
1aa08     38 00 00 FF 
1aa0c     B4 65 06 F1 | 	add	objptr, ##29108
1aa10     32 93 02 FB | 	rdlong	arg01, objptr
1aa14     38 00 00 FF 
1aa18     B4 65 86 F1 | 	sub	objptr, ##29108
1aa1c     06 A8 66 F0 | 	shl	local02, #6
1aa20     54 93 02 F1 | 	add	arg01, local02
1aa24     14 92 06 F1 | 	add	arg01, #20
1aa28     49 01 58 FC | 	wrword	#0, arg01
1aa2c                 | LR__2203
1aa2c     E7 F0 03 F6 | 	mov	ptra, fp
1aa30     F2 00 A0 FD | 	call	#popregs_
1aa34                 | _do_shutup_ret
1aa34     2D 00 64 FD | 	ret
1aa38                 | 
1aa38                 | ' 
1aa38                 | ' ' ------------------ sin
1aa38                 | ' 
1aa38                 | ' sub do_sin
1aa38                 | _do_sin
1aa38     01 CA 05 F6 | 	mov	COUNT_, #1
1aa3c     E8 00 A0 FD | 	call	#pushregs_
1aa40     10 F0 07 F1 | 	add	ptra, #16
1aa44     4C 00 00 FF 
1aa48     24 64 06 F1 | 	add	objptr, ##38948
1aa4c     32 97 02 FB | 	rdlong	arg03, objptr
1aa50     4B 95 02 F6 | 	mov	arg02, arg03
1aa54     01 94 66 F0 | 	shl	arg02, #1
1aa58     4B 95 02 F1 | 	add	arg02, arg03
1aa5c     02 94 66 F0 | 	shl	arg02, #2
1aa60     03 00 00 FF 
1aa64     04 64 86 F1 | 	sub	objptr, ##1540
1aa68     32 95 02 F1 | 	add	arg02, objptr
1aa6c     4A 97 02 FB | 	rdlong	arg03, arg02
1aa70                 | ' 
1aa70                 | ' numpar=compiledline(lineptr_e).result.uresult
1aa70                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1aa70     02 96 16 F2 | 	cmp	arg03, #2 wc
1aa74     49 00 00 FF 
1aa78     20 64 86 F1 | 	sub	objptr, ##37408
1aa7c     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1aa80     40 00 90 4D |  if_c_and_nz	jmp	#LR__2210
1aa84     00 92 06 F6 | 	mov	arg01, #0
1aa88     9C F6 B0 FD | 	call	#__system___getiolock_0622
1aa8c     3D 93 02 F6 | 	mov	arg01, result1
1aa90     10 A1 B0 FD | 	call	#__system___lockmem
1aa94     99 01 00 FF 
1aa98     12 95 06 F6 | 	mov	arg02, ##@LR__6090
1aa9c     00 92 06 F6 | 	mov	arg01, #0
1aaa0     00 96 06 F6 | 	mov	arg03, #0
1aaa4     F0 AD B0 FD | 	call	#__system___basic_print_string
1aaa8     00 92 06 F6 | 	mov	arg01, #0
1aaac     78 F6 B0 FD | 	call	#__system___getiolock_0622
1aab0     3D 01 68 FC | 	wrlong	#0, result1
1aab4     27 92 06 F6 | 	mov	arg01, #39
1aab8     00 94 06 F6 | 	mov	arg02, #0
1aabc     C0 63 B0 FD | 	call	#_printerror
1aac0     64 00 90 FD | 	jmp	#LR__2211
1aac4                 | LR__2210
1aac4     A8 2B BF FD | 	call	#_pop
1aac8     E7 7A 62 FC | 	wrlong	result1, fp
1aacc     04 CE 05 F1 | 	add	fp, #4
1aad0     E7 7C 62 FC | 	wrlong	result2, fp
1aad4     04 CE 05 F1 | 	add	fp, #4
1aad8     E7 7E 62 FC | 	wrlong	result3, fp
1aadc     08 CE 85 F1 | 	sub	fp, #8
1aae0     54 00 00 FF 
1aae4     84 64 06 F1 | 	add	objptr, ##43140
1aae8     32 A7 02 FB | 	rdlong	local01, objptr
1aaec     54 00 00 FF 
1aaf0     84 64 86 F1 | 	sub	objptr, ##43140
1aaf4     E7 92 02 F6 | 	mov	arg01, fp
1aaf8     0C 2E BF FD | 	call	#_converttofloat
1aafc     3D 95 02 F6 | 	mov	arg02, result1
1ab00     53 93 02 F6 | 	mov	arg01, local01
1ab04     6C C7 B0 FD | 	call	#__system___float_mul
1ab08     3D 93 02 F6 | 	mov	arg01, result1
1ab0c     D4 D0 B0 FD | 	call	#__system____builtin_sinf
1ab10     E7 7A 62 FC | 	wrlong	result1, fp
1ab14     08 CE 05 F1 | 	add	fp, #8
1ab18     E7 3C 68 FC | 	wrlong	#30, fp
1ab1c     08 CE 85 F1 | 	sub	fp, #8
1ab20     E7 92 02 F6 | 	mov	arg01, fp
1ab24     D8 2B BF FD | 	call	#_push
1ab28                 | LR__2211
1ab28     E7 F0 03 F6 | 	mov	ptra, fp
1ab2c     F2 00 A0 FD | 	call	#popregs_
1ab30                 | _do_sin_ret
1ab30     2D 00 64 FD | 	ret
1ab34                 | 
1ab34                 | ' 
1ab34                 | ' ' ------------------ skip
1ab34                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1ab34                 | ' 
1ab34                 | ' sub do_skip
1ab34                 | _do_skip
1ab34     4C 00 00 FF 
1ab38     24 64 06 F1 | 	add	objptr, ##38948
1ab3c     32 81 02 FB | 	rdlong	_var01, objptr
1ab40     40 83 02 F6 | 	mov	_var02, _var01
1ab44     01 82 66 F0 | 	shl	_var02, #1
1ab48     40 83 02 F1 | 	add	_var02, _var01
1ab4c     02 82 66 F0 | 	shl	_var02, #2
1ab50     03 00 00 FF 
1ab54     04 64 86 F1 | 	sub	objptr, ##1540
1ab58     32 83 02 F1 | 	add	_var02, objptr
1ab5c     41 83 02 FB | 	rdlong	_var02, _var02
1ab60     01 82 86 F1 | 	sub	_var02, #1
1ab64     03 00 00 FF 
1ab68     04 64 06 F1 | 	add	objptr, ##1540
1ab6c     32 83 62 FC | 	wrlong	_var02, objptr
1ab70     4C 00 00 FF 
1ab74     24 64 86 F1 | 	sub	objptr, ##38948
1ab78                 | _do_skip_ret
1ab78     2D 00 64 FD | 	ret
1ab7c                 | 
1ab7c                 | ' 
1ab7c                 | ' ' ------------------ sprite
1ab7c                 | ' 
1ab7c                 | ' sub do_sprite
1ab7c                 | _do_sprite
1ab7c     02 CA 05 F6 | 	mov	COUNT_, #2
1ab80     E8 00 A0 FD | 	call	#pushregs_
1ab84     30 F0 07 F1 | 	add	ptra, #48
1ab88     E4 2A BF FD | 	call	#_pop
1ab8c     3D 95 02 F6 | 	mov	arg02, result1
1ab90     3E 97 02 F6 | 	mov	arg03, result2
1ab94     3F 93 02 F6 | 	mov	arg01, result3
1ab98     18 CE 05 F1 | 	add	fp, #24
1ab9c     E7 94 62 FC | 	wrlong	arg02, fp
1aba0     04 CE 05 F1 | 	add	fp, #4
1aba4     E7 96 62 FC | 	wrlong	arg03, fp
1aba8     04 CE 05 F1 | 	add	fp, #4
1abac     E7 92 62 FC | 	wrlong	arg01, fp
1abb0     20 CE 85 F1 | 	sub	fp, #32
1abb4     B8 2A BF FD | 	call	#_pop
1abb8     3D 95 02 F6 | 	mov	arg02, result1
1abbc     3E 97 02 F6 | 	mov	arg03, result2
1abc0     3F 93 02 F6 | 	mov	arg01, result3
1abc4     0C CE 05 F1 | 	add	fp, #12
1abc8     E7 94 62 FC | 	wrlong	arg02, fp
1abcc     04 CE 05 F1 | 	add	fp, #4
1abd0     E7 96 62 FC | 	wrlong	arg03, fp
1abd4     04 CE 05 F1 | 	add	fp, #4
1abd8     E7 92 62 FC | 	wrlong	arg01, fp
1abdc     14 CE 85 F1 | 	sub	fp, #20
1abe0     8C 2A BF FD | 	call	#_pop
1abe4     3F 95 02 F6 | 	mov	arg02, result3
1abe8     E7 7A 62 FC | 	wrlong	result1, fp
1abec     04 CE 05 F1 | 	add	fp, #4
1abf0     E7 7C 62 FC | 	wrlong	result2, fp
1abf4     04 CE 05 F1 | 	add	fp, #4
1abf8     E7 94 62 FC | 	wrlong	arg02, fp
1abfc     08 CE 85 F1 | 	sub	fp, #8
1ac00     E7 92 02 F6 | 	mov	arg01, fp
1ac04     44 2C BF FD | 	call	#_converttoint
1ac08     3D A7 02 F6 | 	mov	local01, result1
1ac0c     E7 92 02 F6 | 	mov	arg01, fp
1ac10     0C 92 06 F1 | 	add	arg01, #12
1ac14     34 2C BF FD | 	call	#_converttoint
1ac18     3D A9 02 F6 | 	mov	local02, result1
1ac1c     E7 92 02 F6 | 	mov	arg01, fp
1ac20     18 92 06 F1 | 	add	arg01, #24
1ac24     24 2C BF FD | 	call	#_converttoint
1ac28     3D 97 02 F6 | 	mov	arg03, result1
1ac2c     53 93 02 F6 | 	mov	arg01, local01
1ac30     54 95 02 F6 | 	mov	arg02, local02
1ac34     28 72 B0 FD | 	call	#_hg010b_spin2_setspritepos
1ac38     E7 F0 03 F6 | 	mov	ptra, fp
1ac3c     F2 00 A0 FD | 	call	#popregs_
1ac40                 | _do_sprite_ret
1ac40     2D 00 64 FD | 	ret
1ac44                 | 
1ac44                 | ' 
1ac44                 | ' ' ------------------ sqr
1ac44                 | ' 
1ac44                 | ' sub do_sqr
1ac44                 | _do_sqr
1ac44     00 CA 05 F6 | 	mov	COUNT_, #0
1ac48     E8 00 A0 FD | 	call	#pushregs_
1ac4c     10 F0 07 F1 | 	add	ptra, #16
1ac50     4C 00 00 FF 
1ac54     24 64 06 F1 | 	add	objptr, ##38948
1ac58     32 97 02 FB | 	rdlong	arg03, objptr
1ac5c     4B 95 02 F6 | 	mov	arg02, arg03
1ac60     01 94 66 F0 | 	shl	arg02, #1
1ac64     4B 95 02 F1 | 	add	arg02, arg03
1ac68     02 94 66 F0 | 	shl	arg02, #2
1ac6c     03 00 00 FF 
1ac70     04 64 86 F1 | 	sub	objptr, ##1540
1ac74     32 95 02 F1 | 	add	arg02, objptr
1ac78     4A 97 02 FB | 	rdlong	arg03, arg02
1ac7c                 | ' 
1ac7c                 | ' numpar=compiledline(lineptr_e).result.uresult
1ac7c                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1ac7c     02 96 16 F2 | 	cmp	arg03, #2 wc
1ac80     49 00 00 FF 
1ac84     20 64 86 F1 | 	sub	objptr, ##37408
1ac88     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1ac8c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2220
1ac90     00 92 06 F6 | 	mov	arg01, #0
1ac94     90 F4 B0 FD | 	call	#__system___getiolock_0622
1ac98     3D 93 02 F6 | 	mov	arg01, result1
1ac9c     04 9F B0 FD | 	call	#__system___lockmem
1aca0     99 01 00 FF 
1aca4     18 95 06 F6 | 	mov	arg02, ##@LR__6091
1aca8     00 92 06 F6 | 	mov	arg01, #0
1acac     00 96 06 F6 | 	mov	arg03, #0
1acb0     E4 AB B0 FD | 	call	#__system___basic_print_string
1acb4     00 92 06 F6 | 	mov	arg01, #0
1acb8     6C F4 B0 FD | 	call	#__system___getiolock_0622
1acbc     3D 01 68 FC | 	wrlong	#0, result1
1acc0     27 92 06 F6 | 	mov	arg01, #39
1acc4     00 94 06 F6 | 	mov	arg02, #0
1acc8     B4 61 B0 FD | 	call	#_printerror
1accc     48 00 90 FD | 	jmp	#LR__2221
1acd0                 | LR__2220
1acd0     9C 29 BF FD | 	call	#_pop
1acd4     3F 97 02 F6 | 	mov	arg03, result3
1acd8     E7 7A 62 FC | 	wrlong	result1, fp
1acdc     04 CE 05 F1 | 	add	fp, #4
1ace0     E7 7C 62 FC | 	wrlong	result2, fp
1ace4     04 CE 05 F1 | 	add	fp, #4
1ace8     E7 96 62 FC | 	wrlong	arg03, fp
1acec     08 CE 85 F1 | 	sub	fp, #8
1acf0     E7 92 02 F6 | 	mov	arg01, fp
1acf4     10 2C BF FD | 	call	#_converttofloat
1acf8     3D 93 02 F6 | 	mov	arg01, result1
1acfc     9C C4 B0 FD | 	call	#__system___float_sqrt
1ad00     E7 7A 62 FC | 	wrlong	result1, fp
1ad04     08 CE 05 F1 | 	add	fp, #8
1ad08     E7 3C 68 FC | 	wrlong	#30, fp
1ad0c     08 CE 85 F1 | 	sub	fp, #8
1ad10     E7 92 02 F6 | 	mov	arg01, fp
1ad14     E8 29 BF FD | 	call	#_push
1ad18                 | LR__2221
1ad18     E7 F0 03 F6 | 	mov	ptra, fp
1ad1c     F2 00 A0 FD | 	call	#popregs_
1ad20                 | _do_sqr_ret
1ad20     2D 00 64 FD | 	ret
1ad24                 | 
1ad24                 | ' 
1ad24                 | ' ' ------------------ stick
1ad24                 | ' 
1ad24                 | ' sub do_stick
1ad24                 | _do_stick
1ad24     02 CA 05 F6 | 	mov	COUNT_, #2
1ad28     E8 00 A0 FD | 	call	#pushregs_
1ad2c     10 F0 07 F1 | 	add	ptra, #16
1ad30     4C 00 00 FF 
1ad34     24 64 06 F1 | 	add	objptr, ##38948
1ad38     32 A7 02 FB | 	rdlong	local01, objptr
1ad3c     53 97 02 F6 | 	mov	arg03, local01
1ad40     01 96 66 F0 | 	shl	arg03, #1
1ad44     53 97 02 F1 | 	add	arg03, local01
1ad48     02 96 66 F0 | 	shl	arg03, #2
1ad4c     03 00 00 FF 
1ad50     04 64 86 F1 | 	sub	objptr, ##1540
1ad54     32 97 02 F1 | 	add	arg03, objptr
1ad58     4B A9 02 FB | 	rdlong	local02, arg03
1ad5c                 | ' 
1ad5c                 | ' numpar=compiledline(lineptr_e).result.uresult
1ad5c                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1ad5c     02 A8 16 F2 | 	cmp	local02, #2 wc
1ad60     49 00 00 FF 
1ad64     20 64 86 F1 | 	sub	objptr, ##37408
1ad68     40 00 90 CD |  if_b	jmp	#LR__2230
1ad6c     00 92 06 F6 | 	mov	arg01, #0
1ad70     B4 F3 B0 FD | 	call	#__system___getiolock_0622
1ad74     3D 93 02 F6 | 	mov	arg01, result1
1ad78     28 9E B0 FD | 	call	#__system___lockmem
1ad7c     99 01 00 FF 
1ad80     1E 95 06 F6 | 	mov	arg02, ##@LR__6092
1ad84     00 92 06 F6 | 	mov	arg01, #0
1ad88     00 96 06 F6 | 	mov	arg03, #0
1ad8c     08 AB B0 FD | 	call	#__system___basic_print_string
1ad90     00 92 06 F6 | 	mov	arg01, #0
1ad94     90 F3 B0 FD | 	call	#__system___getiolock_0622
1ad98     3D 01 68 FC | 	wrlong	#0, result1
1ad9c     27 92 06 F6 | 	mov	arg01, #39
1ada0     00 94 06 F6 | 	mov	arg02, #0
1ada4     D8 60 B0 FD | 	call	#_printerror
1ada8     E8 00 90 FD | 	jmp	#LR__2234
1adac                 | LR__2230
1adac                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1adac     00 A8 0E F2 | 	cmp	local02, #0 wz
1adb0     30 00 90 5D |  if_ne	jmp	#LR__2231
1adb4     53 00 00 FF 
1adb8     F8 65 06 F1 | 	add	objptr, ##43000
1adbc     32 A9 02 FB | 	rdlong	local02, objptr
1adc0     53 00 00 FF 
1adc4     F8 65 86 F1 | 	sub	objptr, ##43000
1adc8     E7 A8 62 FC | 	wrlong	local02, fp
1adcc     08 CE 05 F1 | 	add	fp, #8
1add0     E7 3A 68 FC | 	wrlong	#29, fp
1add4     08 CE 85 F1 | 	sub	fp, #8
1add8     E7 92 02 F6 | 	mov	arg01, fp
1addc     20 29 BF FD | 	call	#_push
1ade0     B0 00 90 FD | 	jmp	#LR__2234
1ade4                 | LR__2231
1ade4     88 28 BF FD | 	call	#_pop
1ade8     E7 7A 62 FC | 	wrlong	result1, fp
1adec     04 CE 05 F1 | 	add	fp, #4
1adf0     E7 7C 62 FC | 	wrlong	result2, fp
1adf4     04 CE 05 F1 | 	add	fp, #4
1adf8     E7 7E 62 FC | 	wrlong	result3, fp
1adfc                 | ' t1=pop()
1adfc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1adfc     08 CE 85 F1 | 	sub	fp, #8
1ae00     1C 7E 0E F2 | 	cmp	result3, #28 wz
1ae04     08 CE 05 51 |  if_ne	add	fp, #8
1ae08     E7 A6 02 5B |  if_ne	rdlong	local01, fp
1ae0c     08 CE 85 51 |  if_ne	sub	fp, #8
1ae10     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
1ae14     70 00 90 5D |  if_ne	jmp	#LR__2233
1ae18     E7 A6 02 FB | 	rdlong	local01, fp
1ae1c     54 00 00 FF 
1ae20     E4 64 06 F1 | 	add	objptr, ##43236
1ae24     32 A7 62 FC | 	wrlong	local01, objptr
1ae28                 | '   q=t1.result.uresult
1ae28                 | '   if q<7 then 
1ae28     54 00 00 FF 
1ae2c     E4 64 86 F1 | 	sub	objptr, ##43236
1ae30     07 A6 56 F2 | 	cmps	local01, #7 wc
1ae34     40 00 90 3D |  if_ae	jmp	#LR__2232
1ae38     54 00 00 FF 
1ae3c     E4 64 06 F1 | 	add	objptr, ##43236
1ae40     32 A7 02 FB | 	rdlong	local01, objptr
1ae44     02 A6 66 F0 | 	shl	local01, #2
1ae48     EC 64 86 F1 | 	sub	objptr, #236
1ae4c     32 A7 02 F1 | 	add	local01, objptr
1ae50     53 A9 02 FB | 	rdlong	local02, local01
1ae54     E7 A8 62 FC | 	wrlong	local02, fp
1ae58     08 CE 05 F1 | 	add	fp, #8
1ae5c     E7 3A 68 FC | 	wrlong	#29, fp
1ae60     08 CE 85 F1 | 	sub	fp, #8
1ae64     E7 92 02 F6 | 	mov	arg01, fp
1ae68     53 00 00 FF 
1ae6c     F8 65 86 F1 | 	sub	objptr, ##43000
1ae70     8C 28 BF FD | 	call	#_push
1ae74                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1ae74     1C 00 90 FD | 	jmp	#LR__2234
1ae78                 | LR__2232
1ae78     29 92 06 F6 | 	mov	arg01, #41
1ae7c     00 94 06 F6 | 	mov	arg02, #0
1ae80     FC 5F B0 FD | 	call	#_printerror
1ae84                 | '      printerror(41) : return
1ae84     0C 00 90 FD | 	jmp	#LR__2234
1ae88                 | LR__2233
1ae88     29 92 06 F6 | 	mov	arg01, #41
1ae8c     00 94 06 F6 | 	mov	arg02, #0
1ae90     EC 5F B0 FD | 	call	#_printerror
1ae94                 | LR__2234
1ae94     E7 F0 03 F6 | 	mov	ptra, fp
1ae98     F2 00 A0 FD | 	call	#popregs_
1ae9c                 | _do_stick_ret
1ae9c     2D 00 64 FD | 	ret
1aea0                 | 
1aea0                 | ' 
1aea0                 | ' 
1aea0                 | ' sub do_str
1aea0                 | _do_str
1aea0     02 CA 05 F6 | 	mov	COUNT_, #2
1aea4     E8 00 A0 FD | 	call	#pushregs_
1aea8     14 F0 07 F1 | 	add	ptra, #20
1aeac     4C 00 00 FF 
1aeb0     24 64 06 F1 | 	add	objptr, ##38948
1aeb4     32 97 02 FB | 	rdlong	arg03, objptr
1aeb8     4B 95 02 F6 | 	mov	arg02, arg03
1aebc     01 94 66 F0 | 	shl	arg02, #1
1aec0     4B 95 02 F1 | 	add	arg02, arg03
1aec4     02 94 66 F0 | 	shl	arg02, #2
1aec8     03 00 00 FF 
1aecc     04 64 86 F1 | 	sub	objptr, ##1540
1aed0     32 95 02 F1 | 	add	arg02, objptr
1aed4     4A 97 02 FB | 	rdlong	arg03, arg02
1aed8                 | ' 
1aed8                 | ' numpar=compiledline(lineptr_e).result.uresult
1aed8                 | ' if numpar<>1 then print "str$: "; : printerror(39) : return
1aed8     01 96 0E F2 | 	cmp	arg03, #1 wz
1aedc     49 00 00 FF 
1aee0     20 64 86 F1 | 	sub	objptr, ##37408
1aee4     40 00 90 AD |  if_e	jmp	#LR__2240
1aee8     00 92 06 F6 | 	mov	arg01, #0
1aeec     38 F2 B0 FD | 	call	#__system___getiolock_0622
1aef0     3D 93 02 F6 | 	mov	arg01, result1
1aef4     AC 9C B0 FD | 	call	#__system___lockmem
1aef8     99 01 00 FF 
1aefc     26 95 06 F6 | 	mov	arg02, ##@LR__6093
1af00     00 92 06 F6 | 	mov	arg01, #0
1af04     00 96 06 F6 | 	mov	arg03, #0
1af08     8C A9 B0 FD | 	call	#__system___basic_print_string
1af0c     00 92 06 F6 | 	mov	arg01, #0
1af10     14 F2 B0 FD | 	call	#__system___getiolock_0622
1af14     3D 01 68 FC | 	wrlong	#0, result1
1af18     27 92 06 F6 | 	mov	arg01, #39
1af1c     00 94 06 F6 | 	mov	arg02, #0
1af20     5C 5F B0 FD | 	call	#_printerror
1af24     F0 00 90 FD | 	jmp	#LR__2249
1af28                 | LR__2240
1af28     44 27 BF FD | 	call	#_pop
1af2c     3F 97 02 F6 | 	mov	arg03, result3
1af30     E7 7A 62 FC | 	wrlong	result1, fp
1af34     04 CE 05 F1 | 	add	fp, #4
1af38     E7 7C 62 FC | 	wrlong	result2, fp
1af3c     04 CE 05 F1 | 	add	fp, #4
1af40     E7 96 62 FC | 	wrlong	arg03, fp
1af44                 | ' 
1af44                 | ' t1=pop()
1af44                 | ' if t1.result_type=result_int then 
1af44     08 CE 85 F1 | 	sub	fp, #8
1af48     1C 96 0E F2 | 	cmp	arg03, #28 wz
1af4c     28 00 90 5D |  if_ne	jmp	#LR__2241
1af50     E7 92 02 FB | 	rdlong	arg01, fp
1af54     49 93 52 F6 | 	abs	arg01, arg01 wc
1af58     1F A6 C6 C9 |  if_b	decod	local01, #31
1af5c     00 A6 06 36 |  if_ae	mov	local01, #0
1af60     0C BF B0 FD | 	call	#__system___float_fromuns
1af64     53 7B 62 F5 | 	xor	result1, local01
1af68     3D 93 02 F6 | 	mov	arg01, result1
1af6c     D4 B6 B0 FD | 	call	#__system__str_S
1af70     3D A9 02 F6 | 	mov	local02, result1
1af74     88 00 90 FD | 	jmp	#LR__2248
1af78                 | LR__2241
1af78     08 CE 05 F1 | 	add	fp, #8
1af7c     E7 96 02 FB | 	rdlong	arg03, fp
1af80     08 CE 85 F1 | 	sub	fp, #8
1af84     1D 96 0E F2 | 	cmp	arg03, #29 wz
1af88     18 00 90 5D |  if_ne	jmp	#LR__2242
1af8c     E7 92 02 FB | 	rdlong	arg01, fp
1af90     DC BE B0 FD | 	call	#__system___float_fromuns
1af94     3D 93 02 F6 | 	mov	arg01, result1
1af98     A8 B6 B0 FD | 	call	#__system__str_S
1af9c     3D A9 02 F6 | 	mov	local02, result1
1afa0     5C 00 90 FD | 	jmp	#LR__2247
1afa4                 | LR__2242
1afa4     08 CE 05 F1 | 	add	fp, #8
1afa8     E7 96 02 FB | 	rdlong	arg03, fp
1afac     08 CE 85 F1 | 	sub	fp, #8
1afb0     1E 96 0E F2 | 	cmp	arg03, #30 wz
1afb4     10 00 90 5D |  if_ne	jmp	#LR__2243
1afb8     E7 92 02 FB | 	rdlong	arg01, fp
1afbc     84 B6 B0 FD | 	call	#__system__str_S
1afc0     3D A9 02 F6 | 	mov	local02, result1
1afc4     38 00 90 FD | 	jmp	#LR__2246
1afc8                 | LR__2243
1afc8     08 CE 05 F1 | 	add	fp, #8
1afcc     E7 96 02 FB | 	rdlong	arg03, fp
1afd0     08 CE 85 F1 | 	sub	fp, #8
1afd4     2B 96 0E F2 | 	cmp	arg03, #43 wz
1afd8     10 00 90 5D |  if_ne	jmp	#LR__2244
1afdc     E7 92 02 FB | 	rdlong	arg01, fp
1afe0     FC 27 BF FD | 	call	#_convertstring
1afe4     3D A9 02 F6 | 	mov	local02, result1
1afe8     14 00 90 FD | 	jmp	#LR__2245
1afec                 | LR__2244
1afec     08 CE 05 F1 | 	add	fp, #8
1aff0     E7 7C 02 FB | 	rdlong	result2, fp
1aff4     08 CE 85 F1 | 	sub	fp, #8
1aff8     1F 7C 0E F2 | 	cmp	result2, #31 wz
1affc     E7 A8 02 AB |  if_e	rdlong	local02, fp
1b000                 | LR__2245
1b000                 | LR__2246
1b000                 | LR__2247
1b000                 | LR__2248
1b000     E7 A8 62 FC | 	wrlong	local02, fp
1b004     08 CE 05 F1 | 	add	fp, #8
1b008     E7 3E 68 FC | 	wrlong	#31, fp
1b00c     08 CE 85 F1 | 	sub	fp, #8
1b010     E7 92 02 F6 | 	mov	arg01, fp
1b014     E8 26 BF FD | 	call	#_push
1b018                 | '     t1.result.sresult=s : t1.result_type=result_string : push t1 : return 
1b018                 | LR__2249
1b018     E7 F0 03 F6 | 	mov	ptra, fp
1b01c     F2 00 A0 FD | 	call	#popregs_
1b020                 | _do_str_ret
1b020     2D 00 64 FD | 	ret
1b024                 | 
1b024                 | ' ' ------------------ strig
1b024                 | ' 
1b024                 | ' sub do_strig
1b024                 | _do_strig
1b024     02 CA 05 F6 | 	mov	COUNT_, #2
1b028     E8 00 A0 FD | 	call	#pushregs_
1b02c     10 F0 07 F1 | 	add	ptra, #16
1b030     4C 00 00 FF 
1b034     24 64 06 F1 | 	add	objptr, ##38948
1b038     32 A7 02 FB | 	rdlong	local01, objptr
1b03c     53 97 02 F6 | 	mov	arg03, local01
1b040     01 96 66 F0 | 	shl	arg03, #1
1b044     53 97 02 F1 | 	add	arg03, local01
1b048     02 96 66 F0 | 	shl	arg03, #2
1b04c     03 00 00 FF 
1b050     04 64 86 F1 | 	sub	objptr, ##1540
1b054     32 97 02 F1 | 	add	arg03, objptr
1b058     4B A9 02 FB | 	rdlong	local02, arg03
1b05c                 | ' 
1b05c                 | ' numpar=compiledline(lineptr_e).result.uresult
1b05c                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1b05c     02 A8 16 F2 | 	cmp	local02, #2 wc
1b060     49 00 00 FF 
1b064     20 64 86 F1 | 	sub	objptr, ##37408
1b068     40 00 90 CD |  if_b	jmp	#LR__2250
1b06c     00 92 06 F6 | 	mov	arg01, #0
1b070     B4 F0 B0 FD | 	call	#__system___getiolock_0622
1b074     3D 93 02 F6 | 	mov	arg01, result1
1b078     28 9B B0 FD | 	call	#__system___lockmem
1b07c     99 01 00 FF 
1b080     2D 95 06 F6 | 	mov	arg02, ##@LR__6094
1b084     00 92 06 F6 | 	mov	arg01, #0
1b088     00 96 06 F6 | 	mov	arg03, #0
1b08c     08 A8 B0 FD | 	call	#__system___basic_print_string
1b090     00 92 06 F6 | 	mov	arg01, #0
1b094     90 F0 B0 FD | 	call	#__system___getiolock_0622
1b098     3D 01 68 FC | 	wrlong	#0, result1
1b09c     27 92 06 F6 | 	mov	arg01, #39
1b0a0     00 94 06 F6 | 	mov	arg02, #0
1b0a4     D8 5D B0 FD | 	call	#_printerror
1b0a8     E8 00 90 FD | 	jmp	#LR__2254
1b0ac                 | LR__2250
1b0ac                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1b0ac     00 A8 0E F2 | 	cmp	local02, #0 wz
1b0b0     30 00 90 5D |  if_ne	jmp	#LR__2251
1b0b4     54 00 00 FF 
1b0b8     14 64 06 F1 | 	add	objptr, ##43028
1b0bc     32 A9 02 FB | 	rdlong	local02, objptr
1b0c0     54 00 00 FF 
1b0c4     14 64 86 F1 | 	sub	objptr, ##43028
1b0c8     E7 A8 62 FC | 	wrlong	local02, fp
1b0cc     08 CE 05 F1 | 	add	fp, #8
1b0d0     E7 3A 68 FC | 	wrlong	#29, fp
1b0d4     08 CE 85 F1 | 	sub	fp, #8
1b0d8     E7 92 02 F6 | 	mov	arg01, fp
1b0dc     20 26 BF FD | 	call	#_push
1b0e0     B0 00 90 FD | 	jmp	#LR__2254
1b0e4                 | LR__2251
1b0e4     88 25 BF FD | 	call	#_pop
1b0e8     E7 7A 62 FC | 	wrlong	result1, fp
1b0ec     04 CE 05 F1 | 	add	fp, #4
1b0f0     E7 7C 62 FC | 	wrlong	result2, fp
1b0f4     04 CE 05 F1 | 	add	fp, #4
1b0f8     E7 7E 62 FC | 	wrlong	result3, fp
1b0fc                 | ' t1=pop()
1b0fc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1b0fc     08 CE 85 F1 | 	sub	fp, #8
1b100     1C 7E 0E F2 | 	cmp	result3, #28 wz
1b104     08 CE 05 51 |  if_ne	add	fp, #8
1b108     E7 A6 02 5B |  if_ne	rdlong	local01, fp
1b10c     08 CE 85 51 |  if_ne	sub	fp, #8
1b110     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
1b114     70 00 90 5D |  if_ne	jmp	#LR__2253
1b118     E7 A6 02 FB | 	rdlong	local01, fp
1b11c     54 00 00 FF 
1b120     E4 64 06 F1 | 	add	objptr, ##43236
1b124     32 A7 62 FC | 	wrlong	local01, objptr
1b128                 | '   q=t1.result.uresult
1b128                 | '   if q<7 then 
1b128     54 00 00 FF 
1b12c     E4 64 86 F1 | 	sub	objptr, ##43236
1b130     07 A6 56 F2 | 	cmps	local01, #7 wc
1b134     40 00 90 3D |  if_ae	jmp	#LR__2252
1b138     54 00 00 FF 
1b13c     E4 64 06 F1 | 	add	objptr, ##43236
1b140     32 A7 02 FB | 	rdlong	local01, objptr
1b144     02 A6 66 F0 | 	shl	local01, #2
1b148     D0 64 86 F1 | 	sub	objptr, #208
1b14c     32 A7 02 F1 | 	add	local01, objptr
1b150     53 A9 02 FB | 	rdlong	local02, local01
1b154     E7 A8 62 FC | 	wrlong	local02, fp
1b158     08 CE 05 F1 | 	add	fp, #8
1b15c     E7 3A 68 FC | 	wrlong	#29, fp
1b160     08 CE 85 F1 | 	sub	fp, #8
1b164     E7 92 02 F6 | 	mov	arg01, fp
1b168     54 00 00 FF 
1b16c     14 64 86 F1 | 	sub	objptr, ##43028
1b170     8C 25 BF FD | 	call	#_push
1b174                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1b174     1C 00 90 FD | 	jmp	#LR__2254
1b178                 | LR__2252
1b178     29 92 06 F6 | 	mov	arg01, #41
1b17c     00 94 06 F6 | 	mov	arg02, #0
1b180     FC 5C B0 FD | 	call	#_printerror
1b184                 | '      printerror(41) : return
1b184     0C 00 90 FD | 	jmp	#LR__2254
1b188                 | LR__2253
1b188     29 92 06 F6 | 	mov	arg01, #41
1b18c     00 94 06 F6 | 	mov	arg02, #0
1b190     EC 5C B0 FD | 	call	#_printerror
1b194                 | LR__2254
1b194     E7 F0 03 F6 | 	mov	ptra, fp
1b198     F2 00 A0 FD | 	call	#popregs_
1b19c                 | _do_strig_ret
1b19c     2D 00 64 FD | 	ret
1b1a0                 | 
1b1a0                 | ' 
1b1a0                 | ' ' ------------------ tan
1b1a0                 | ' 
1b1a0                 | ' sub do_tan
1b1a0                 | _do_tan
1b1a0     01 CA 05 F6 | 	mov	COUNT_, #1
1b1a4     E8 00 A0 FD | 	call	#pushregs_
1b1a8     10 F0 07 F1 | 	add	ptra, #16
1b1ac     4C 00 00 FF 
1b1b0     24 64 06 F1 | 	add	objptr, ##38948
1b1b4     32 97 02 FB | 	rdlong	arg03, objptr
1b1b8     4B 95 02 F6 | 	mov	arg02, arg03
1b1bc     01 94 66 F0 | 	shl	arg02, #1
1b1c0     4B 95 02 F1 | 	add	arg02, arg03
1b1c4     02 94 66 F0 | 	shl	arg02, #2
1b1c8     03 00 00 FF 
1b1cc     04 64 86 F1 | 	sub	objptr, ##1540
1b1d0     32 95 02 F1 | 	add	arg02, objptr
1b1d4     4A 97 02 FB | 	rdlong	arg03, arg02
1b1d8                 | ' 
1b1d8                 | ' numpar=compiledline(lineptr_e).result.uresult
1b1d8                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1b1d8     02 96 16 F2 | 	cmp	arg03, #2 wc
1b1dc     49 00 00 FF 
1b1e0     20 64 86 F1 | 	sub	objptr, ##37408
1b1e4     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1b1e8     40 00 90 4D |  if_c_and_nz	jmp	#LR__2260
1b1ec     00 92 06 F6 | 	mov	arg01, #0
1b1f0     34 EF B0 FD | 	call	#__system___getiolock_0622
1b1f4     3D 93 02 F6 | 	mov	arg01, result1
1b1f8     A8 99 B0 FD | 	call	#__system___lockmem
1b1fc     99 01 00 FF 
1b200     35 95 06 F6 | 	mov	arg02, ##@LR__6095
1b204     00 92 06 F6 | 	mov	arg01, #0
1b208     00 96 06 F6 | 	mov	arg03, #0
1b20c     88 A6 B0 FD | 	call	#__system___basic_print_string
1b210     00 92 06 F6 | 	mov	arg01, #0
1b214     10 EF B0 FD | 	call	#__system___getiolock_0622
1b218     3D 01 68 FC | 	wrlong	#0, result1
1b21c     27 92 06 F6 | 	mov	arg01, #39
1b220     00 94 06 F6 | 	mov	arg02, #0
1b224     58 5C B0 FD | 	call	#_printerror
1b228     64 00 90 FD | 	jmp	#LR__2261
1b22c                 | LR__2260
1b22c     40 24 BF FD | 	call	#_pop
1b230     E7 7A 62 FC | 	wrlong	result1, fp
1b234     04 CE 05 F1 | 	add	fp, #4
1b238     E7 7C 62 FC | 	wrlong	result2, fp
1b23c     04 CE 05 F1 | 	add	fp, #4
1b240     E7 7E 62 FC | 	wrlong	result3, fp
1b244     08 CE 85 F1 | 	sub	fp, #8
1b248     54 00 00 FF 
1b24c     84 64 06 F1 | 	add	objptr, ##43140
1b250     32 A7 02 FB | 	rdlong	local01, objptr
1b254     54 00 00 FF 
1b258     84 64 86 F1 | 	sub	objptr, ##43140
1b25c     E7 92 02 F6 | 	mov	arg01, fp
1b260     A4 26 BF FD | 	call	#_converttofloat
1b264     3D 95 02 F6 | 	mov	arg02, result1
1b268     53 93 02 F6 | 	mov	arg01, local01
1b26c     04 C0 B0 FD | 	call	#__system___float_mul
1b270     3D 93 02 F6 | 	mov	arg01, result1
1b274     B8 CA B0 FD | 	call	#__system____builtin_tanf
1b278     E7 7A 62 FC | 	wrlong	result1, fp
1b27c     08 CE 05 F1 | 	add	fp, #8
1b280     E7 3C 68 FC | 	wrlong	#30, fp
1b284     08 CE 85 F1 | 	sub	fp, #8
1b288     E7 92 02 F6 | 	mov	arg01, fp
1b28c     70 24 BF FD | 	call	#_push
1b290                 | LR__2261
1b290     E7 F0 03 F6 | 	mov	ptra, fp
1b294     F2 00 A0 FD | 	call	#popregs_
1b298                 | _do_tan_ret
1b298     2D 00 64 FD | 	ret
1b29c                 | 
1b29c                 | ' 
1b29c                 | ' ' ------------------ val
1b29c                 | ' 
1b29c                 | ' sub do_val
1b29c                 | _do_val
1b29c     05 CA 05 F6 | 	mov	COUNT_, #5
1b2a0     E8 00 A0 FD | 	call	#pushregs_
1b2a4     20 F0 07 F1 | 	add	ptra, #32
1b2a8     4C 00 00 FF 
1b2ac     24 64 06 F1 | 	add	objptr, ##38948
1b2b0     32 97 02 FB | 	rdlong	arg03, objptr
1b2b4     4B 95 02 F6 | 	mov	arg02, arg03
1b2b8     01 94 66 F0 | 	shl	arg02, #1
1b2bc     4B 95 02 F1 | 	add	arg02, arg03
1b2c0     02 94 66 F0 | 	shl	arg02, #2
1b2c4     03 00 00 FF 
1b2c8     04 64 86 F1 | 	sub	objptr, ##1540
1b2cc     32 95 02 F1 | 	add	arg02, objptr
1b2d0     4A 97 02 FB | 	rdlong	arg03, arg02
1b2d4                 | ' 
1b2d4                 | ' numpar=compiledline(lineptr_e).result.uresult
1b2d4                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1b2d4     02 96 16 F2 | 	cmp	arg03, #2 wc
1b2d8     49 00 00 FF 
1b2dc     20 64 86 F1 | 	sub	objptr, ##37408
1b2e0     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1b2e4     40 00 90 4D |  if_c_and_nz	jmp	#LR__2270
1b2e8     00 92 06 F6 | 	mov	arg01, #0
1b2ec     38 EE B0 FD | 	call	#__system___getiolock_0622
1b2f0     3D 93 02 F6 | 	mov	arg01, result1
1b2f4     AC 98 B0 FD | 	call	#__system___lockmem
1b2f8     99 01 00 FF 
1b2fc     3B 95 06 F6 | 	mov	arg02, ##@LR__6096
1b300     00 92 06 F6 | 	mov	arg01, #0
1b304     00 96 06 F6 | 	mov	arg03, #0
1b308     8C A5 B0 FD | 	call	#__system___basic_print_string
1b30c     00 92 06 F6 | 	mov	arg01, #0
1b310     14 EE B0 FD | 	call	#__system___getiolock_0622
1b314     3D 01 68 FC | 	wrlong	#0, result1
1b318     27 92 06 F6 | 	mov	arg01, #39
1b31c     00 94 06 F6 | 	mov	arg02, #0
1b320     5C 5B B0 FD | 	call	#_printerror
1b324     0C 02 90 FD | 	jmp	#LR__2282
1b328                 | LR__2270
1b328     44 23 BF FD | 	call	#_pop
1b32c     3F 97 02 F6 | 	mov	arg03, result3
1b330     E7 7A 62 FC | 	wrlong	result1, fp
1b334     04 CE 05 F1 | 	add	fp, #4
1b338     E7 7C 62 FC | 	wrlong	result2, fp
1b33c     04 CE 05 F1 | 	add	fp, #4
1b340     E7 96 62 FC | 	wrlong	arg03, fp
1b344                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1b344     08 CE 85 F1 | 	sub	fp, #8
1b348     2B 96 0E F2 | 	cmp	arg03, #43 wz
1b34c     18 00 90 5D |  if_ne	jmp	#LR__2271
1b350     E7 92 02 FB | 	rdlong	arg01, fp
1b354     88 24 BF FD | 	call	#_convertstring
1b358     E7 7A 62 FC | 	wrlong	result1, fp
1b35c     08 CE 05 F1 | 	add	fp, #8
1b360     E7 3E 68 FC | 	wrlong	#31, fp
1b364     08 CE 85 F1 | 	sub	fp, #8
1b368                 | LR__2271
1b368                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1b368     08 CE 05 F1 | 	add	fp, #8
1b36c     E7 96 02 FB | 	rdlong	arg03, fp
1b370     08 CE 85 F1 | 	sub	fp, #8
1b374     1F 96 0E F2 | 	cmp	arg03, #31 wz
1b378     40 00 90 AD |  if_e	jmp	#LR__2272
1b37c     00 92 06 F6 | 	mov	arg01, #0
1b380     A4 ED B0 FD | 	call	#__system___getiolock_0622
1b384     3D 93 02 F6 | 	mov	arg01, result1
1b388     18 98 B0 FD | 	call	#__system___lockmem
1b38c     99 01 00 FF 
1b390     41 95 06 F6 | 	mov	arg02, ##@LR__6097
1b394     00 92 06 F6 | 	mov	arg01, #0
1b398     00 96 06 F6 | 	mov	arg03, #0
1b39c     F8 A4 B0 FD | 	call	#__system___basic_print_string
1b3a0     00 92 06 F6 | 	mov	arg01, #0
1b3a4     80 ED B0 FD | 	call	#__system___getiolock_0622
1b3a8     3D 01 68 FC | 	wrlong	#0, result1
1b3ac     0F 92 06 F6 | 	mov	arg01, #15
1b3b0     00 94 06 F6 | 	mov	arg02, #0
1b3b4     C8 5A B0 FD | 	call	#_printerror
1b3b8     78 01 90 FD | 	jmp	#LR__2282
1b3bc                 | LR__2272
1b3bc                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1b3bc     E7 92 02 FB | 	rdlong	arg01, fp
1b3c0     01 94 06 F6 | 	mov	arg02, #1
1b3c4     84 B0 B0 FD | 	call	#__system__Left_S
1b3c8     3D 93 02 F6 | 	mov	arg01, result1
1b3cc     99 01 00 FF 
1b3d0     47 95 06 F6 | 	mov	arg02, ##@LR__6098
1b3d4     F4 97 B0 FD | 	call	#__system___string_cmp
1b3d8     00 7A 0E F2 | 	cmp	result1, #0 wz
1b3dc     48 00 90 5D |  if_ne	jmp	#LR__2275
1b3e0     99 01 00 FF 
1b3e4     49 A7 06 F6 | 	mov	local01, ##@LR__6099
1b3e8     E7 96 02 FB | 	rdlong	arg03, fp
1b3ec     4B 93 02 F6 | 	mov	arg01, arg03
1b3f0     49 A9 02 F6 | 	mov	local02, arg01
1b3f4     D7 06 48 FB | 	callpa	#(@LR__2274-@LR__2273)>>2,fcache_load_ptr_
1b3f8                 | LR__2273
1b3f8     54 7B CA FA | 	rdbyte	result1, local02 wz
1b3fc     01 A8 06 51 |  if_ne	add	local02, #1
1b400     F4 FF 9F 5D |  if_ne	jmp	#LR__2273
1b404                 | LR__2274
1b404     49 A9 82 F1 | 	sub	local02, arg01
1b408     54 95 02 F6 | 	mov	arg02, local02
1b40c     01 94 86 F1 | 	sub	arg02, #1
1b410     4B 93 02 F6 | 	mov	arg01, arg03
1b414     BC B0 B0 FD | 	call	#__system__Right_S
1b418     3D 95 02 F6 | 	mov	arg02, result1
1b41c     53 93 02 F6 | 	mov	arg01, local01
1b420     DC 97 B0 FD | 	call	#__system___string_concat
1b424     E7 7A 62 FC | 	wrlong	result1, fp
1b428                 | LR__2275
1b428                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1b428     E7 92 02 FB | 	rdlong	arg01, fp
1b42c     01 94 06 F6 | 	mov	arg02, #1
1b430     18 B0 B0 FD | 	call	#__system__Left_S
1b434     3D 93 02 F6 | 	mov	arg01, result1
1b438     99 01 00 FF 
1b43c     4C 95 06 F6 | 	mov	arg02, ##@LR__6100
1b440     88 97 B0 FD | 	call	#__system___string_cmp
1b444     00 7A 0E F2 | 	cmp	result1, #0 wz
1b448     48 00 90 5D |  if_ne	jmp	#LR__2278
1b44c     99 01 00 FF 
1b450     4E A7 06 F6 | 	mov	local01, ##@LR__6101
1b454     E7 96 02 FB | 	rdlong	arg03, fp
1b458     4B 93 02 F6 | 	mov	arg01, arg03
1b45c     49 A9 02 F6 | 	mov	local02, arg01
1b460     D7 06 48 FB | 	callpa	#(@LR__2277-@LR__2276)>>2,fcache_load_ptr_
1b464                 | LR__2276
1b464     54 7B CA FA | 	rdbyte	result1, local02 wz
1b468     01 A8 06 51 |  if_ne	add	local02, #1
1b46c     F4 FF 9F 5D |  if_ne	jmp	#LR__2276
1b470                 | LR__2277
1b470     49 A9 82 F1 | 	sub	local02, arg01
1b474     54 95 02 F6 | 	mov	arg02, local02
1b478     01 94 86 F1 | 	sub	arg02, #1
1b47c     4B 93 02 F6 | 	mov	arg01, arg03
1b480     50 B0 B0 FD | 	call	#__system__Right_S
1b484     3D 95 02 F6 | 	mov	arg02, result1
1b488     53 93 02 F6 | 	mov	arg01, local01
1b48c     70 97 B0 FD | 	call	#__system___string_concat
1b490     E7 7A 62 FC | 	wrlong	result1, fp
1b494                 | LR__2278
1b494     E7 92 02 FB | 	rdlong	arg01, fp
1b498     F4 C5 B0 FD | 	call	#__system____builtin_atof
1b49c     3D AB 02 F6 | 	mov	local03, result1
1b4a0     E7 92 02 FB | 	rdlong	arg01, fp
1b4a4     00 94 06 F6 | 	mov	arg02, #0
1b4a8     4C C4 B0 FD | 	call	#__system____builtin_atoi
1b4ac     3D AD 02 F6 | 	mov	local04, result1
1b4b0                 | ' fval=val(t1.result.sresult)
1b4b0                 | ' ival=val%(t1.result.sresult)
1b4b0                 | ' if fval=ival then
1b4b0     56 93 52 F6 | 	abs	arg01, local04 wc
1b4b4     1F AE C6 C9 |  if_b	decod	local05, #31
1b4b8     00 AE 06 36 |  if_ae	mov	local05, #0
1b4bc     B0 B9 B0 FD | 	call	#__system___float_fromuns
1b4c0     57 7B 62 F5 | 	xor	result1, local05
1b4c4     3D 95 02 F6 | 	mov	arg02, result1
1b4c8     55 93 02 F6 | 	mov	arg01, local03
1b4cc     01 96 06 F6 | 	mov	arg03, #1
1b4d0     D4 C1 B0 FD | 	call	#__system___float_cmp
1b4d4     00 7A 0E F2 | 	cmp	result1, #0 wz
1b4d8     E7 AC 62 AC |  if_e	wrlong	local04, fp
1b4dc     08 CE 05 A1 |  if_e	add	fp, #8
1b4e0     E7 38 68 AC |  if_e	wrlong	#28, fp
1b4e4     08 CE 85 A1 |  if_e	sub	fp, #8
1b4e8     40 00 90 AD |  if_e	jmp	#LR__2281
1b4ec                 | '   if fval=0 andalso ival<>0 then
1b4ec     55 93 02 F6 | 	mov	arg01, local03
1b4f0     00 94 06 F6 | 	mov	arg02, #0
1b4f4     01 96 06 F6 | 	mov	arg03, #1
1b4f8     AC C1 B0 FD | 	call	#__system___float_cmp
1b4fc     00 7A 0E F2 | 	cmp	result1, #0 wz
1b500     18 00 90 5D |  if_ne	jmp	#LR__2279
1b504     00 AC 0E F2 | 	cmp	local04, #0 wz
1b508     E7 AC 62 5C |  if_ne	wrlong	local04, fp
1b50c     08 CE 05 51 |  if_ne	add	fp, #8
1b510     E7 38 68 5C |  if_ne	wrlong	#28, fp
1b514     08 CE 85 51 |  if_ne	sub	fp, #8
1b518     10 00 90 5D |  if_ne	jmp	#LR__2280
1b51c                 | LR__2279
1b51c     E7 AA 62 FC | 	wrlong	local03, fp
1b520     08 CE 05 F1 | 	add	fp, #8
1b524     E7 3C 68 FC | 	wrlong	#30, fp
1b528     08 CE 85 F1 | 	sub	fp, #8
1b52c                 | LR__2280
1b52c                 | LR__2281
1b52c     E7 92 02 F6 | 	mov	arg01, fp
1b530     CC 21 BF FD | 	call	#_push
1b534                 | LR__2282
1b534     E7 F0 03 F6 | 	mov	ptra, fp
1b538     F2 00 A0 FD | 	call	#popregs_
1b53c                 | _do_val_ret
1b53c     2D 00 64 FD | 	ret
1b540                 | 
1b540                 | ' 
1b540                 | ' ' ------------------ waitclock
1b540                 | ' 
1b540                 | ' sub do_waitclock
1b540                 | _do_waitclock
1b540     54 00 00 FF 
1b544     70 64 06 F1 | 	add	objptr, ##43120
1b548     32 81 02 FB | 	rdlong	_var01, objptr
1b54c                 | ' c=hkcnt
1b54c                 | ' do: loop until hkcnt<>c
1b54c                 | LR__2290
1b54c     32 83 02 FB | 	rdlong	_var02, objptr
1b550     40 83 0A F2 | 	cmp	_var02, _var01 wz
1b554     F4 FF 9F AD |  if_e	jmp	#LR__2290
1b558     54 00 00 FF 
1b55c     70 64 86 F1 | 	sub	objptr, ##43120
1b560                 | _do_waitclock_ret
1b560     2D 00 64 FD | 	ret
1b564                 | 
1b564                 | ' 
1b564                 | ' ' ------------------ waitms
1b564                 | ' 
1b564                 | ' sub do_waitms
1b564                 | _do_waitms
1b564     03 CA 05 F6 | 	mov	COUNT_, #3
1b568     E8 00 A0 FD | 	call	#pushregs_
1b56c     18 F0 07 F1 | 	add	ptra, #24
1b570     FC 20 BF FD | 	call	#_pop
1b574     E7 7A 62 FC | 	wrlong	result1, fp
1b578     04 CE 05 F1 | 	add	fp, #4
1b57c     E7 7C 62 FC | 	wrlong	result2, fp
1b580     04 CE 05 F1 | 	add	fp, #4
1b584     E7 7E 62 FC | 	wrlong	result3, fp
1b588     08 CE 85 F1 | 	sub	fp, #8
1b58c     E7 92 02 F6 | 	mov	arg01, fp
1b590     B8 22 BF FD | 	call	#_converttoint
1b594     3D A7 02 F6 | 	mov	local01, result1
1b598                 | ' 
1b598                 | ' t1=pop()  
1b598                 | ' t=converttoint(t1)
1b598                 | ' if t<0 then return
1b598     00 A6 56 F2 | 	cmps	local01, #0 wc
1b59c     98 00 90 CD |  if_b	jmp	#LR__2306
1b5a0                 | ' if t < 1000 then 
1b5a0     01 00 00 FF 
1b5a4     E8 A7 56 F2 | 	cmps	local01, ##1000 wc
1b5a8     0C 00 90 3D |  if_ae	jmp	#LR__2300
1b5ac     53 93 02 F6 | 	mov	arg01, local01
1b5b0     E4 98 B0 FD | 	call	#__system___waitms
1b5b4     80 00 90 FD | 	jmp	#LR__2305
1b5b8                 | LR__2300
1b5b8     53 93 52 F6 | 	abs	arg01, local01 wc
1b5bc     01 00 00 FF 
1b5c0     E8 93 16 FD | 	qdiv	arg01, ##1000
1b5c4                 | '   for i=1 to t/1000
1b5c4     01 A8 06 F6 | 	mov	local02, #1
1b5c8     18 AA 62 FD | 	getqx	local03
1b5cc     55 AB 82 F6 | 	negc	local03, local03
1b5d0     01 AA 06 F1 | 	add	local03, #1
1b5d4                 | LR__2301
1b5d4     55 A9 52 F2 | 	cmps	local02, local03 wc
1b5d8     44 00 90 3D |  if_ae	jmp	#LR__2304
1b5dc     01 00 00 FF 
1b5e0     E8 93 06 F6 | 	mov	arg01, ##1000
1b5e4     B0 98 B0 FD | 	call	#__system___waitms
1b5e8                 | '     waitms(1000)
1b5e8                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1b5e8     E0 92 06 F6 | 	mov	arg01, #224
1b5ec     CC 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b5f0     00 7A 0E F2 | 	cmp	result1, #0 wz
1b5f4     10 00 90 5D |  if_ne	jmp	#LR__2302
1b5f8     E4 92 06 F6 | 	mov	arg01, #228
1b5fc     BC 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b600     00 7A 0E F2 | 	cmp	result1, #0 wz
1b604     10 00 90 AD |  if_e	jmp	#LR__2303
1b608                 | LR__2302
1b608     06 92 06 F6 | 	mov	arg01, #6
1b60c     AC 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b610     00 7A 0E F2 | 	cmp	result1, #0 wz
1b614     20 00 90 5D |  if_ne	jmp	#LR__2306
1b618                 | LR__2303
1b618     01 A8 06 F1 | 	add	local02, #1
1b61c     B4 FF 9F FD | 	jmp	#LR__2301
1b620                 | LR__2304
1b620     53 AB 52 F6 | 	abs	local03, local01 wc
1b624     01 00 00 FF 
1b628     E8 AB 16 FD | 	qdiv	local03, ##1000
1b62c     19 AA 62 FD | 	getqy	local03
1b630     55 93 82 F6 | 	negc	arg01, local03
1b634     60 98 B0 FD | 	call	#__system___waitms
1b638                 | LR__2305
1b638                 | LR__2306
1b638     E7 F0 03 F6 | 	mov	ptra, fp
1b63c     F2 00 A0 FD | 	call	#popregs_
1b640                 | _do_waitms_ret
1b640     2D 00 64 FD | 	ret
1b644                 | 
1b644                 | ' 
1b644                 | ' ' ------------------ waitvbl
1b644                 | ' 
1b644                 | ' sub do_waitvbl
1b644                 | _do_waitvbl
1b644     01 92 06 F6 | 	mov	arg01, #1
1b648     74 75 B0 FD | 	call	#_hg010b_spin2_waitvbl
1b64c                 | _do_waitvbl_ret
1b64c     2D 00 64 FD | 	ret
1b650                 | 
1b650                 | ' 
1b650                 | ' ' ------------------ wrpin
1b650                 | ' 
1b650                 | ' sub do_wrpin
1b650                 | _do_wrpin
1b650     01 CA 05 F6 | 	mov	COUNT_, #1
1b654     E8 00 A0 FD | 	call	#pushregs_
1b658     18 F0 07 F1 | 	add	ptra, #24
1b65c     10 20 BF FD | 	call	#_pop
1b660     3D 95 02 F6 | 	mov	arg02, result1
1b664     3E 93 02 F6 | 	mov	arg01, result2
1b668     3F A7 02 F6 | 	mov	local01, result3
1b66c     E7 94 62 FC | 	wrlong	arg02, fp
1b670     04 CE 05 F1 | 	add	fp, #4
1b674     E7 92 62 FC | 	wrlong	arg01, fp
1b678     04 CE 05 F1 | 	add	fp, #4
1b67c     E7 A6 62 FC | 	wrlong	local01, fp
1b680     08 CE 85 F1 | 	sub	fp, #8
1b684     E8 1F BF FD | 	call	#_pop
1b688     3F A7 02 F6 | 	mov	local01, result3
1b68c     0C CE 05 F1 | 	add	fp, #12
1b690     E7 7A 62 FC | 	wrlong	result1, fp
1b694     04 CE 05 F1 | 	add	fp, #4
1b698     E7 7C 62 FC | 	wrlong	result2, fp
1b69c     04 CE 05 F1 | 	add	fp, #4
1b6a0     E7 A6 62 FC | 	wrlong	local01, fp
1b6a4     08 CE 85 F1 | 	sub	fp, #8
1b6a8     E7 92 02 F6 | 	mov	arg01, fp
1b6ac     0C CE 85 F1 | 	sub	fp, #12
1b6b0     98 21 BF FD | 	call	#_converttoint
1b6b4     3D A7 02 F6 | 	mov	local01, result1
1b6b8     E7 92 02 F6 | 	mov	arg01, fp
1b6bc     8C 21 BF FD | 	call	#_converttoint
1b6c0     53 7B 02 FC | 	wrpin	result1, local01
1b6c4     E7 F0 03 F6 | 	mov	ptra, fp
1b6c8     F2 00 A0 FD | 	call	#popregs_
1b6cc                 | _do_wrpin_ret
1b6cc     2D 00 64 FD | 	ret
1b6d0                 | 
1b6d0                 | ' 
1b6d0                 | ' ' ------------------ wxpin
1b6d0                 | ' 
1b6d0                 | ' sub do_wxpin
1b6d0                 | _do_wxpin
1b6d0     01 CA 05 F6 | 	mov	COUNT_, #1
1b6d4     E8 00 A0 FD | 	call	#pushregs_
1b6d8     18 F0 07 F1 | 	add	ptra, #24
1b6dc     90 1F BF FD | 	call	#_pop
1b6e0     3D 95 02 F6 | 	mov	arg02, result1
1b6e4     3E 93 02 F6 | 	mov	arg01, result2
1b6e8     3F A7 02 F6 | 	mov	local01, result3
1b6ec     E7 94 62 FC | 	wrlong	arg02, fp
1b6f0     04 CE 05 F1 | 	add	fp, #4
1b6f4     E7 92 62 FC | 	wrlong	arg01, fp
1b6f8     04 CE 05 F1 | 	add	fp, #4
1b6fc     E7 A6 62 FC | 	wrlong	local01, fp
1b700     08 CE 85 F1 | 	sub	fp, #8
1b704     68 1F BF FD | 	call	#_pop
1b708     3F A7 02 F6 | 	mov	local01, result3
1b70c     0C CE 05 F1 | 	add	fp, #12
1b710     E7 7A 62 FC | 	wrlong	result1, fp
1b714     04 CE 05 F1 | 	add	fp, #4
1b718     E7 7C 62 FC | 	wrlong	result2, fp
1b71c     04 CE 05 F1 | 	add	fp, #4
1b720     E7 A6 62 FC | 	wrlong	local01, fp
1b724     08 CE 85 F1 | 	sub	fp, #8
1b728     E7 92 02 F6 | 	mov	arg01, fp
1b72c     0C CE 85 F1 | 	sub	fp, #12
1b730     18 21 BF FD | 	call	#_converttoint
1b734     3D A7 02 F6 | 	mov	local01, result1
1b738     E7 92 02 F6 | 	mov	arg01, fp
1b73c     0C 21 BF FD | 	call	#_converttoint
1b740     53 7B 12 FC | 	wxpin	result1, local01
1b744     E7 F0 03 F6 | 	mov	ptra, fp
1b748     F2 00 A0 FD | 	call	#popregs_
1b74c                 | _do_wxpin_ret
1b74c     2D 00 64 FD | 	ret
1b750                 | 
1b750                 | ' 
1b750                 | ' ' ------------------ wypin
1b750                 | ' 
1b750                 | ' sub do_wypin
1b750                 | _do_wypin
1b750     01 CA 05 F6 | 	mov	COUNT_, #1
1b754     E8 00 A0 FD | 	call	#pushregs_
1b758     18 F0 07 F1 | 	add	ptra, #24
1b75c     10 1F BF FD | 	call	#_pop
1b760     3D 95 02 F6 | 	mov	arg02, result1
1b764     3E 93 02 F6 | 	mov	arg01, result2
1b768     3F A7 02 F6 | 	mov	local01, result3
1b76c     E7 94 62 FC | 	wrlong	arg02, fp
1b770     04 CE 05 F1 | 	add	fp, #4
1b774     E7 92 62 FC | 	wrlong	arg01, fp
1b778     04 CE 05 F1 | 	add	fp, #4
1b77c     E7 A6 62 FC | 	wrlong	local01, fp
1b780     08 CE 85 F1 | 	sub	fp, #8
1b784     E8 1E BF FD | 	call	#_pop
1b788     3F A7 02 F6 | 	mov	local01, result3
1b78c     0C CE 05 F1 | 	add	fp, #12
1b790     E7 7A 62 FC | 	wrlong	result1, fp
1b794     04 CE 05 F1 | 	add	fp, #4
1b798     E7 7C 62 FC | 	wrlong	result2, fp
1b79c     04 CE 05 F1 | 	add	fp, #4
1b7a0     E7 A6 62 FC | 	wrlong	local01, fp
1b7a4     08 CE 85 F1 | 	sub	fp, #8
1b7a8     E7 92 02 F6 | 	mov	arg01, fp
1b7ac     0C CE 85 F1 | 	sub	fp, #12
1b7b0     98 20 BF FD | 	call	#_converttoint
1b7b4     3D A7 02 F6 | 	mov	local01, result1
1b7b8     E7 92 02 F6 | 	mov	arg01, fp
1b7bc     8C 20 BF FD | 	call	#_converttoint
1b7c0     53 7B 22 FC | 	wypin	result1, local01
1b7c4     E7 F0 03 F6 | 	mov	ptra, fp
1b7c8     F2 00 A0 FD | 	call	#popregs_
1b7cc                 | _do_wypin_ret
1b7cc     2D 00 64 FD | 	ret
1b7d0                 | 
1b7d0                 | ' 
1b7d0                 | ' 
1b7d0                 | ' 
1b7d0                 | ' 
1b7d0                 | ' 
1b7d0                 | ' 
1b7d0                 | ' 
1b7d0                 | ' 
1b7d0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1b7d0                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1b7d0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1b7d0                 | ' 
1b7d0                 | ' 
1b7d0                 | ' '------------------ Assign
1b7d0                 | ' 
1b7d0                 | ' sub do_assign
1b7d0                 | _do_assign
1b7d0     0E CA 05 F6 | 	mov	COUNT_, #14
1b7d4     E8 00 A0 FD | 	call	#pushregs_
1b7d8     44 F0 07 F1 | 	add	ptra, #68
1b7dc     4C 00 00 FF 
1b7e0     24 64 06 F1 | 	add	objptr, ##38948
1b7e4     32 97 02 FB | 	rdlong	arg03, objptr
1b7e8     4B 95 02 F6 | 	mov	arg02, arg03
1b7ec     01 94 66 F0 | 	shl	arg02, #1
1b7f0     4B 95 02 F1 | 	add	arg02, arg03
1b7f4     02 94 66 F0 | 	shl	arg02, #2
1b7f8     03 00 00 FF 
1b7fc     04 64 86 F1 | 	sub	objptr, ##1540
1b800     32 95 02 F1 | 	add	arg02, objptr
1b804     4A AD 02 FB | 	rdlong	local04, arg02
1b808                 | ' 
1b808                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1b808                 | ' if variables(varnum).vartype<array_no_type then 
1b808     56 97 02 F6 | 	mov	arg03, local04
1b80c     04 96 66 F0 | 	shl	arg03, #4
1b810     32 00 00 FF 
1b814     84 64 86 F1 | 	sub	objptr, ##25732
1b818     32 97 02 F1 | 	add	arg03, objptr
1b81c     0C 96 06 F1 | 	add	arg03, #12
1b820     4B 97 02 FB | 	rdlong	arg03, arg03
1b824     00 97 16 F2 | 	cmp	arg03, #256 wc
1b828     16 00 00 FF 
1b82c     9C 65 86 F1 | 	sub	objptr, ##11676
1b830     F8 00 90 3D |  if_ae	jmp	#LR__2310
1b834     38 1E BF FD | 	call	#_pop
1b838     E7 7A 62 FC | 	wrlong	result1, fp
1b83c     04 CE 05 F1 | 	add	fp, #4
1b840     E7 7C 62 FC | 	wrlong	result2, fp
1b844     04 CE 05 F1 | 	add	fp, #4
1b848     E7 7E 62 FC | 	wrlong	result3, fp
1b84c     08 CE 85 F1 | 	sub	fp, #8
1b850     E7 96 02 FB | 	rdlong	arg03, fp
1b854     04 CE 05 F1 | 	add	fp, #4
1b858     E7 94 02 FB | 	rdlong	arg02, fp
1b85c     56 93 02 F6 | 	mov	arg01, local04
1b860     04 92 66 F0 | 	shl	arg01, #4
1b864     16 00 00 FF 
1b868     9C 65 06 F1 | 	add	objptr, ##11676
1b86c     32 93 02 F1 | 	add	arg01, objptr
1b870     04 92 06 F1 | 	add	arg01, #4
1b874     49 97 62 FC | 	wrlong	arg03, arg01
1b878     56 97 02 F6 | 	mov	arg03, local04
1b87c     04 96 66 F0 | 	shl	arg03, #4
1b880     32 97 02 F1 | 	add	arg03, objptr
1b884     08 96 06 F1 | 	add	arg03, #8
1b888     4B 95 62 FC | 	wrlong	arg02, arg03
1b88c     56 97 02 F6 | 	mov	arg03, local04
1b890     04 96 66 F0 | 	shl	arg03, #4
1b894     32 97 02 F1 | 	add	arg03, objptr
1b898     04 CE 05 F1 | 	add	fp, #4
1b89c     E7 94 02 FB | 	rdlong	arg02, fp
1b8a0     08 CE 85 F1 | 	sub	fp, #8
1b8a4     0C 96 06 F1 | 	add	arg03, #12
1b8a8     4B 95 62 FC | 	wrlong	arg02, arg03
1b8ac                 | '   t1=pop() 
1b8ac                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1b8ac                 | '   if variables(varnum).vartype<>result_string2 then return
1b8ac     56 97 02 F6 | 	mov	arg03, local04
1b8b0     04 96 66 F0 | 	shl	arg03, #4
1b8b4     32 97 02 F1 | 	add	arg03, objptr
1b8b8     0C 96 06 F1 | 	add	arg03, #12
1b8bc     4B 97 02 FB | 	rdlong	arg03, arg03
1b8c0     2B 96 0E F2 | 	cmp	arg03, #43 wz
1b8c4     16 00 00 FF 
1b8c8     9C 65 86 F1 | 	sub	objptr, ##11676
1b8cc     68 03 90 5D |  if_ne	jmp	#LR__2332
1b8d0     56 AF 02 F6 | 	mov	local05, local04
1b8d4     04 AE 66 F0 | 	shl	local05, #4
1b8d8     16 00 00 FF 
1b8dc     9C 65 06 F1 | 	add	objptr, ##11676
1b8e0     32 AF 02 F1 | 	add	local05, objptr
1b8e4     56 97 02 F6 | 	mov	arg03, local04
1b8e8     04 96 66 F0 | 	shl	arg03, #4
1b8ec     32 97 02 F1 | 	add	arg03, objptr
1b8f0     04 96 06 F1 | 	add	arg03, #4
1b8f4     4B 93 02 FB | 	rdlong	arg01, arg03
1b8f8     16 00 00 FF 
1b8fc     9C 65 86 F1 | 	sub	objptr, ##11676
1b900     DC 1E BF FD | 	call	#_convertstring
1b904     04 AE 06 F1 | 	add	local05, #4
1b908     57 7B 62 FC | 	wrlong	result1, local05
1b90c     04 AC 66 F0 | 	shl	local04, #4
1b910     32 AF 02 F6 | 	mov	local05, objptr
1b914     16 00 00 FF 
1b918     9C AF 06 F1 | 	add	local05, ##11676
1b91c     57 AD 02 F1 | 	add	local04, local05
1b920     0C AC 06 F1 | 	add	local04, #12
1b924     56 3F 68 FC | 	wrlong	#31, local04
1b928                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1b928                 | '   variables(varnum).vartype=result_string
1b928                 | '   return
1b928     0C 03 90 FD | 	jmp	#LR__2332
1b92c                 | LR__2310
1b92c                 | ' for i=0 to 2 : arrid(i)=0 : next i
1b92c     00 B0 06 F6 | 	mov	local06, #0
1b930                 | LR__2311
1b930     58 AF 02 F6 | 	mov	local05, local06
1b934     53 AF 06 F1 | 	add	local05, #local01
1b938     00 B2 06 F6 | 	mov	local07, #0
1b93c                 | 	'.live	local07
1b93c                 | 	'.live	local05
1b93c     00 AE 8E F9 | 	altd	local05, #0
1b940     59 AF 02 F6 | 	mov	local05, local07
1b944     01 B0 06 F1 | 	add	local06, #1
1b948     03 B0 16 F2 | 	cmp	local06, #3 wc
1b94c     E0 FF 9F CD |  if_b	jmp	#LR__2311
1b950     4C 00 00 FF 
1b954     24 64 06 F1 | 	add	objptr, ##38948
1b958     32 AF 02 FB | 	rdlong	local05, objptr
1b95c     57 B1 02 F6 | 	mov	local06, local05
1b960     01 B0 66 F0 | 	shl	local06, #1
1b964     57 B1 02 F1 | 	add	local06, local05
1b968     02 B0 66 F0 | 	shl	local06, #2
1b96c     03 00 00 FF 
1b970     04 64 86 F1 | 	sub	objptr, ##1540
1b974     32 B1 02 F1 | 	add	local06, objptr
1b978     04 B0 06 F1 | 	add	local06, #4
1b97c     58 B1 02 FB | 	rdlong	local06, local06
1b980     49 00 00 FF 
1b984     20 64 86 F1 | 	sub	objptr, ##37408
1b988     E4 1C BF FD | 	call	#_pop
1b98c     3D B5 02 F6 | 	mov	local08, result1
1b990     3E B7 02 F6 | 	mov	local09, result2
1b994     3F AF 02 F6 | 	mov	local05, result3
1b998     E7 B4 62 FC | 	wrlong	local08, fp
1b99c     04 CE 05 F1 | 	add	fp, #4
1b9a0     E7 B6 62 FC | 	wrlong	local09, fp
1b9a4     04 CE 05 F1 | 	add	fp, #4
1b9a8     E7 AE 62 FC | 	wrlong	local05, fp
1b9ac     08 CE 85 F1 | 	sub	fp, #8
1b9b0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1b9b0                 | ' t1=pop() ' var value
1b9b0                 | ' if numpar>0 then
1b9b0     01 B0 16 F2 | 	cmp	local06, #1 wc
1b9b4     50 00 90 CD |  if_b	jmp	#LR__2314
1b9b8                 | '   for i=numpar to 1 step -1
1b9b8     00 B0 4E F2 | 	cmps	local06, #0 wz
1b9bc     48 00 90 AD |  if_e	jmp	#LR__2313
1b9c0                 | LR__2312
1b9c0     AC 1C BF FD | 	call	#_pop
1b9c4     0C CE 05 F1 | 	add	fp, #12
1b9c8     E7 7A 62 FC | 	wrlong	result1, fp
1b9cc     04 CE 05 F1 | 	add	fp, #4
1b9d0     E7 7C 62 FC | 	wrlong	result2, fp
1b9d4     04 CE 05 F1 | 	add	fp, #4
1b9d8     E7 7E 62 FC | 	wrlong	result3, fp
1b9dc     58 AF 02 F6 | 	mov	local05, local06
1b9e0     01 AE 86 F1 | 	sub	local05, #1
1b9e4     53 AF 06 F1 | 	add	local05, #local01
1b9e8     08 CE 85 F1 | 	sub	fp, #8
1b9ec     E7 92 02 F6 | 	mov	arg01, fp
1b9f0     0C CE 85 F1 | 	sub	fp, #12
1b9f4     54 1E BF FD | 	call	#_converttoint
1b9f8     3D B3 02 F6 | 	mov	local07, result1
1b9fc                 | 	'.live	local07
1b9fc                 | 	'.live	local05
1b9fc     00 AE 8E F9 | 	altd	local05, #0
1ba00     59 AF 02 F6 | 	mov	local05, local07
1ba04     EE B1 6E FB | 	djnz	local06, #LR__2312
1ba08                 | LR__2313
1ba08                 | LR__2314
1ba08     04 AC 66 F0 | 	shl	local04, #4
1ba0c     32 97 02 F6 | 	mov	arg03, objptr
1ba10     16 00 00 FF 
1ba14     9C 97 06 F1 | 	add	arg03, ##11676
1ba18     4B AD 02 F1 | 	add	local04, arg03
1ba1c     04 AC 06 F1 | 	add	local04, #4
1ba20     56 B9 02 FB | 	rdlong	local10, local04
1ba24     5C 93 02 F6 | 	mov	arg01, local10
1ba28     0C 57 B0 FD | 	call	#_pslpeek
1ba2c     3D BB 32 F9 | 	getword	local11, result1, #0
1ba30     5C 93 02 F6 | 	mov	arg01, local10
1ba34     02 92 06 F1 | 	add	arg01, #2
1ba38     B4 56 B0 FD | 	call	#_pspeek
1ba3c     3D BD E2 F8 | 	getbyte	local12, result1, #0
1ba40                 | ' esize=pspeek(arrptr+2)
1ba40                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1ba40     5C 93 02 F6 | 	mov	arg01, local10
1ba44     04 92 06 F1 | 	add	arg01, #4
1ba48     EC 56 B0 FD | 	call	#_pslpeek
1ba4c     3D A7 12 F2 | 	cmp	local01, result1 wc
1ba50     28 00 90 3D |  if_ae	jmp	#LR__2315
1ba54     5C 93 02 F6 | 	mov	arg01, local10
1ba58     08 92 06 F1 | 	add	arg01, #8
1ba5c     D8 56 B0 FD | 	call	#_pslpeek
1ba60     3D A9 12 F2 | 	cmp	local02, result1 wc
1ba64     14 00 90 3D |  if_ae	jmp	#LR__2315
1ba68     5C 93 02 F6 | 	mov	arg01, local10
1ba6c     0C 92 06 F1 | 	add	arg01, #12
1ba70     C4 56 B0 FD | 	call	#_pslpeek
1ba74     3D AB 12 F2 | 	cmp	local03, result1 wc
1ba78     10 00 90 CD |  if_b	jmp	#LR__2316
1ba7c                 | LR__2315
1ba7c     31 92 06 F6 | 	mov	arg01, #49
1ba80     00 94 06 F6 | 	mov	arg02, #0
1ba84     F8 53 B0 FD | 	call	#_printerror
1ba88     AC 01 90 FD | 	jmp	#LR__2332
1ba8c                 | LR__2316
1ba8c     5C BF 02 F6 | 	mov	local13, local10
1ba90     10 BE 06 F1 | 	add	local13, #16
1ba94     5C 93 02 F6 | 	mov	arg01, local10
1ba98     04 92 06 F1 | 	add	arg01, #4
1ba9c     98 56 B0 FD | 	call	#_pslpeek
1baa0     54 7B 02 FD | 	qmul	result1, local02
1baa4     53 B7 02 F6 | 	mov	local09, local01
1baa8     5C 93 02 F6 | 	mov	arg01, local10
1baac     08 92 06 F1 | 	add	arg01, #8
1bab0     18 B4 62 FD | 	getqx	local08
1bab4     5A B7 02 F1 | 	add	local09, local08
1bab8     7C 56 B0 FD | 	call	#_pslpeek
1babc     3D B3 02 F6 | 	mov	local07, result1
1bac0     04 B8 06 F1 | 	add	local10, #4
1bac4     5C 93 02 F6 | 	mov	arg01, local10
1bac8     6C 56 B0 FD | 	call	#_pslpeek
1bacc     3D B3 02 FD | 	qmul	local07, result1
1bad0     18 B8 62 FD | 	getqx	local10
1bad4     55 B9 02 FD | 	qmul	local10, local03
1bad8     18 A6 62 FD | 	getqx	local01
1badc     53 B7 02 F1 | 	add	local09, local01
1bae0     5B BD 02 FD | 	qmul	local12, local09
1bae4                 | ' 
1bae4                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1bae4                 | ' select case arrtype
1bae4     5D C1 02 F6 | 	mov	local14, local11
1bae8     00 C1 86 F1 | 	sub	local14, #256
1baec     0C C0 26 F3 | 	fle	local14, #12
1baf0     18 A6 62 FD | 	getqx	local01
1baf4     53 BF 02 F1 | 	add	local13, local01
1baf8     30 C0 62 FD | 	jmprel	local14
1bafc                 | LR__2317
1bafc     30 00 90 FD | 	jmp	#LR__2318
1bb00     50 00 90 FD | 	jmp	#LR__2319
1bb04     5C 00 90 FD | 	jmp	#LR__2320
1bb08     68 00 90 FD | 	jmp	#LR__2321
1bb0c     88 00 90 FD | 	jmp	#LR__2322
1bb10     A8 00 90 FD | 	jmp	#LR__2323
1bb14     B4 00 90 FD | 	jmp	#LR__2324
1bb18     C0 00 90 FD | 	jmp	#LR__2325
1bb1c     CC 00 90 FD | 	jmp	#LR__2326
1bb20     D8 00 90 FD | 	jmp	#LR__2327
1bb24     E4 00 90 FD | 	jmp	#LR__2328
1bb28     F0 00 90 FD | 	jmp	#LR__2329
1bb2c     FC 00 90 FD | 	jmp	#LR__2330
1bb30                 | LR__2318
1bb30     E7 92 02 F6 | 	mov	arg01, fp
1bb34     5F 95 02 F6 | 	mov	arg02, local13
1bb38     0C 96 06 F6 | 	mov	arg03, #12
1bb3c     0B 00 00 FF 
1bb40     CC 64 06 F1 | 	add	objptr, ##5836
1bb44     7C 81 B0 FD | 	call	#_psram_spin2_write
1bb48     0B 00 00 FF 
1bb4c     CC 64 86 F1 | 	sub	objptr, ##5836
1bb50     E4 00 90 FD | 	jmp	#LR__2331
1bb54                 | LR__2319
1bb54     E7 94 02 FB | 	rdlong	arg02, fp
1bb58     5F 93 02 F6 | 	mov	arg01, local13
1bb5c     48 55 B0 FD | 	call	#_pspoke
1bb60     D4 00 90 FD | 	jmp	#LR__2331
1bb64                 | LR__2320
1bb64     E7 94 02 FB | 	rdlong	arg02, fp
1bb68     5F 93 02 F6 | 	mov	arg01, local13
1bb6c     38 55 B0 FD | 	call	#_pspoke
1bb70     C4 00 90 FD | 	jmp	#LR__2331
1bb74                 | LR__2321
1bb74     E7 94 02 FB | 	rdlong	arg02, fp
1bb78     5F 93 02 F6 | 	mov	arg01, local13
1bb7c     28 55 B0 FD | 	call	#_pspoke
1bb80     01 BE 06 F1 | 	add	local13, #1
1bb84     E7 94 02 FB | 	rdlong	arg02, fp
1bb88     08 94 46 F0 | 	shr	arg02, #8
1bb8c     5F 93 02 F6 | 	mov	arg01, local13
1bb90     14 55 B0 FD | 	call	#_pspoke
1bb94     A0 00 90 FD | 	jmp	#LR__2331
1bb98                 | LR__2322
1bb98     E7 94 02 FB | 	rdlong	arg02, fp
1bb9c     5F 93 02 F6 | 	mov	arg01, local13
1bba0     04 55 B0 FD | 	call	#_pspoke
1bba4     01 BE 06 F1 | 	add	local13, #1
1bba8     E7 94 02 FB | 	rdlong	arg02, fp
1bbac     08 94 46 F0 | 	shr	arg02, #8
1bbb0     5F 93 02 F6 | 	mov	arg01, local13
1bbb4     F0 54 B0 FD | 	call	#_pspoke
1bbb8     7C 00 90 FD | 	jmp	#LR__2331
1bbbc                 | LR__2323
1bbbc     E7 94 02 FB | 	rdlong	arg02, fp
1bbc0     5F 93 02 F6 | 	mov	arg01, local13
1bbc4     50 54 B0 FD | 	call	#_pslpoke
1bbc8     6C 00 90 FD | 	jmp	#LR__2331
1bbcc                 | LR__2324
1bbcc     E7 94 02 FB | 	rdlong	arg02, fp
1bbd0     5F 93 02 F6 | 	mov	arg01, local13
1bbd4     40 54 B0 FD | 	call	#_pslpoke
1bbd8     5C 00 90 FD | 	jmp	#LR__2331
1bbdc                 | LR__2325
1bbdc     E7 94 02 FB | 	rdlong	arg02, fp
1bbe0     5F 93 02 F6 | 	mov	arg01, local13
1bbe4     30 54 B0 FD | 	call	#_pslpoke
1bbe8     4C 00 90 FD | 	jmp	#LR__2331
1bbec                 | LR__2326
1bbec     E7 94 02 FB | 	rdlong	arg02, fp
1bbf0     5F 93 02 F6 | 	mov	arg01, local13
1bbf4     20 54 B0 FD | 	call	#_pslpoke
1bbf8     3C 00 90 FD | 	jmp	#LR__2331
1bbfc                 | LR__2327
1bbfc     E7 94 02 FB | 	rdlong	arg02, fp
1bc00     5F 93 02 F6 | 	mov	arg01, local13
1bc04     10 54 B0 FD | 	call	#_pslpoke
1bc08     2C 00 90 FD | 	jmp	#LR__2331
1bc0c                 | LR__2328
1bc0c     E7 94 02 FB | 	rdlong	arg02, fp
1bc10     5F 93 02 F6 | 	mov	arg01, local13
1bc14     00 54 B0 FD | 	call	#_pslpoke
1bc18     1C 00 90 FD | 	jmp	#LR__2331
1bc1c                 | LR__2329
1bc1c     E7 94 02 FB | 	rdlong	arg02, fp
1bc20     5F 93 02 F6 | 	mov	arg01, local13
1bc24     F0 53 B0 FD | 	call	#_pslpoke
1bc28     0C 00 90 FD | 	jmp	#LR__2331
1bc2c                 | LR__2330
1bc2c     32 92 06 F6 | 	mov	arg01, #50
1bc30     00 94 06 F6 | 	mov	arg02, #0
1bc34     48 52 B0 FD | 	call	#_printerror
1bc38                 | LR__2331
1bc38                 | LR__2332
1bc38     E7 F0 03 F6 | 	mov	ptra, fp
1bc3c     F2 00 A0 FD | 	call	#popregs_
1bc40                 | _do_assign_ret
1bc40     2D 00 64 FD | 	ret
1bc44                 | 
1bc44                 | ' 
1bc44                 | ' 
1bc44                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1bc44                 | ' 
1bc44                 | ' sub do_getvar
1bc44                 | _do_getvar
1bc44     0D CA 05 F6 | 	mov	COUNT_, #13
1bc48     E8 00 A0 FD | 	call	#pushregs_
1bc4c     3C F0 07 F1 | 	add	ptra, #60
1bc50                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1bc50     4C 00 00 FF 
1bc54     24 64 06 F1 | 	add	objptr, ##38948
1bc58     32 A7 02 FB | 	rdlong	local01, objptr
1bc5c     53 97 02 F6 | 	mov	arg03, local01
1bc60     01 96 66 F0 | 	shl	arg03, #1
1bc64     53 97 02 F1 | 	add	arg03, local01
1bc68     02 96 66 F0 | 	shl	arg03, #2
1bc6c     03 00 00 FF 
1bc70     04 64 86 F1 | 	sub	objptr, ##1540
1bc74     32 97 02 F1 | 	add	arg03, objptr
1bc78     04 96 06 F1 | 	add	arg03, #4
1bc7c     4B 97 0A FB | 	rdlong	arg03, arg03 wz
1bc80     49 00 00 FF 
1bc84     20 64 86 F1 | 	sub	objptr, ##37408
1bc88     C4 00 90 5D |  if_ne	jmp	#LR__2341
1bc8c     4C 00 00 FF 
1bc90     24 64 06 F1 | 	add	objptr, ##38948
1bc94     32 A7 02 FB | 	rdlong	local01, objptr
1bc98     53 93 02 F6 | 	mov	arg01, local01
1bc9c     01 92 66 F0 | 	shl	arg01, #1
1bca0     53 93 02 F1 | 	add	arg01, local01
1bca4     02 92 66 F0 | 	shl	arg01, #2
1bca8     03 00 00 FF 
1bcac     04 64 86 F1 | 	sub	objptr, ##1540
1bcb0     32 93 02 F1 | 	add	arg01, objptr
1bcb4     49 A7 02 FB | 	rdlong	local01, arg01
1bcb8     04 A6 66 F0 | 	shl	local01, #4
1bcbc     32 00 00 FF 
1bcc0     84 64 86 F1 | 	sub	objptr, ##25732
1bcc4     32 A7 02 F1 | 	add	local01, objptr
1bcc8     04 A6 06 F1 | 	add	local01, #4
1bccc     53 93 02 FB | 	rdlong	arg01, local01
1bcd0     04 A6 06 F1 | 	add	local01, #4
1bcd4     53 A7 02 FB | 	rdlong	local01, local01
1bcd8     E7 92 62 FC | 	wrlong	arg01, fp
1bcdc     04 CE 05 F1 | 	add	fp, #4
1bce0     E7 A6 62 FC | 	wrlong	local01, fp
1bce4     35 00 00 FF 
1bce8     88 64 06 F1 | 	add	objptr, ##27272
1bcec     32 A7 02 FB | 	rdlong	local01, objptr
1bcf0     53 93 02 F6 | 	mov	arg01, local01
1bcf4     01 92 66 F0 | 	shl	arg01, #1
1bcf8     53 93 02 F1 | 	add	arg01, local01
1bcfc     02 92 66 F0 | 	shl	arg01, #2
1bd00     03 00 00 FF 
1bd04     04 64 86 F1 | 	sub	objptr, ##1540
1bd08     32 93 02 F1 | 	add	arg01, objptr
1bd0c     49 A7 02 FB | 	rdlong	local01, arg01
1bd10     04 A6 66 F0 | 	shl	local01, #4
1bd14     32 00 00 FF 
1bd18     84 64 86 F1 | 	sub	objptr, ##25732
1bd1c     32 A7 02 F1 | 	add	local01, objptr
1bd20     0C A6 06 F1 | 	add	local01, #12
1bd24     53 A7 02 FB | 	rdlong	local01, local01
1bd28     04 CE 05 F1 | 	add	fp, #4
1bd2c     E7 A6 62 FC | 	wrlong	local01, fp
1bd30                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1bd30                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1bd30                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1bd30     08 CE 85 F1 | 	sub	fp, #8
1bd34     00 A7 16 F2 | 	cmp	local01, #256 wc
1bd38     16 00 00 FF 
1bd3c     9C 65 86 F1 | 	sub	objptr, ##11676
1bd40     0C 00 90 3D |  if_ae	jmp	#LR__2340
1bd44     E7 92 02 F6 | 	mov	arg01, fp
1bd48     B4 19 BF FD | 	call	#_push
1bd4c     94 03 90 FD | 	jmp	#LR__2362
1bd50                 | LR__2340
1bd50                 | LR__2341
1bd50     4C 00 00 FF 
1bd54     24 64 06 F1 | 	add	objptr, ##38948
1bd58     32 97 02 FB | 	rdlong	arg03, objptr
1bd5c     4B 95 02 F6 | 	mov	arg02, arg03
1bd60     01 94 66 F0 | 	shl	arg02, #1
1bd64     4B 95 02 F1 | 	add	arg02, arg03
1bd68     02 94 66 F0 | 	shl	arg02, #2
1bd6c     03 00 00 FF 
1bd70     04 64 86 F1 | 	sub	objptr, ##1540
1bd74     32 95 02 F1 | 	add	arg02, objptr
1bd78     4A 97 02 FB | 	rdlong	arg03, arg02
1bd7c     04 96 66 F0 | 	shl	arg03, #4
1bd80     32 00 00 FF 
1bd84     84 64 86 F1 | 	sub	objptr, ##25732
1bd88     32 97 02 F1 | 	add	arg03, objptr
1bd8c     04 96 06 F1 | 	add	arg03, #4
1bd90     4B A9 02 FB | 	rdlong	local02, arg03
1bd94     54 93 02 F6 | 	mov	arg01, local02
1bd98     16 00 00 FF 
1bd9c     9C 65 86 F1 | 	sub	objptr, ##11676
1bda0     94 53 B0 FD | 	call	#_pslpeek
1bda4     3D AB 32 F9 | 	getword	local03, result1, #0
1bda8     4C 00 00 FF 
1bdac     24 64 06 F1 | 	add	objptr, ##38948
1bdb0     32 97 02 FB | 	rdlong	arg03, objptr
1bdb4     4B 95 02 F6 | 	mov	arg02, arg03
1bdb8     01 94 66 F0 | 	shl	arg02, #1
1bdbc     4B 95 02 F1 | 	add	arg02, arg03
1bdc0     02 94 66 F0 | 	shl	arg02, #2
1bdc4     03 00 00 FF 
1bdc8     04 64 86 F1 | 	sub	objptr, ##1540
1bdcc     32 95 02 F1 | 	add	arg02, objptr
1bdd0     04 94 06 F1 | 	add	arg02, #4
1bdd4     4A AD 02 FB | 	rdlong	local04, arg02
1bdd8     54 93 02 F6 | 	mov	arg01, local02
1bddc     02 92 06 F1 | 	add	arg01, #2
1bde0     49 00 00 FF 
1bde4     20 64 86 F1 | 	sub	objptr, ##37408
1bde8     04 53 B0 FD | 	call	#_pspeek
1bdec     3D AF E2 F8 | 	getbyte	local05, result1, #0
1bdf0     54 93 02 F6 | 	mov	arg01, local02
1bdf4     04 92 06 F1 | 	add	arg01, #4
1bdf8     3C 53 B0 FD | 	call	#_pslpeek
1bdfc     3D B1 02 F6 | 	mov	local06, result1
1be00     54 93 02 F6 | 	mov	arg01, local02
1be04     08 92 06 F1 | 	add	arg01, #8
1be08     2C 53 B0 FD | 	call	#_pslpeek
1be0c     3D B3 02 F6 | 	mov	local07, result1
1be10     54 93 02 F6 | 	mov	arg01, local02
1be14     0C 92 06 F1 | 	add	arg01, #12
1be18     1C 53 B0 FD | 	call	#_pslpeek
1be1c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1be1c                 | ' esize=pspeek(arrptr+2)
1be1c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1be1c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1be1c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1be1c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1be1c     03 AC 16 F2 | 	cmp	local04, #3 wc
1be20     30 00 90 CD |  if_b	jmp	#LR__2342
1be24     48 18 BF FD | 	call	#_pop
1be28     3F 97 02 F6 | 	mov	arg03, result3
1be2c     E7 7A 62 FC | 	wrlong	result1, fp
1be30     04 CE 05 F1 | 	add	fp, #4
1be34     E7 7C 62 FC | 	wrlong	result2, fp
1be38     04 CE 05 F1 | 	add	fp, #4
1be3c     E7 96 62 FC | 	wrlong	arg03, fp
1be40     08 CE 85 F1 | 	sub	fp, #8
1be44     E7 92 02 F6 | 	mov	arg01, fp
1be48     00 1A BF FD | 	call	#_converttoint
1be4c     3D B5 02 F6 | 	mov	local08, result1
1be50     04 00 90 FD | 	jmp	#LR__2343
1be54                 | LR__2342
1be54     00 B4 06 F6 | 	mov	local08, #0
1be58                 | LR__2343
1be58                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1be58     02 AC 16 F2 | 	cmp	local04, #2 wc
1be5c     30 00 90 CD |  if_b	jmp	#LR__2344
1be60     0C 18 BF FD | 	call	#_pop
1be64     3F 97 02 F6 | 	mov	arg03, result3
1be68     E7 7A 62 FC | 	wrlong	result1, fp
1be6c     04 CE 05 F1 | 	add	fp, #4
1be70     E7 7C 62 FC | 	wrlong	result2, fp
1be74     04 CE 05 F1 | 	add	fp, #4
1be78     E7 96 62 FC | 	wrlong	arg03, fp
1be7c     08 CE 85 F1 | 	sub	fp, #8
1be80     E7 92 02 F6 | 	mov	arg01, fp
1be84     C4 19 BF FD | 	call	#_converttoint
1be88     3D B7 02 F6 | 	mov	local09, result1
1be8c     04 00 90 FD | 	jmp	#LR__2345
1be90                 | LR__2344
1be90     00 B6 06 F6 | 	mov	local09, #0
1be94                 | LR__2345
1be94                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1be94     01 AC 16 F2 | 	cmp	local04, #1 wc
1be98     30 00 90 CD |  if_b	jmp	#LR__2346
1be9c     D0 17 BF FD | 	call	#_pop
1bea0     3F AD 02 F6 | 	mov	local04, result3
1bea4     E7 7A 62 FC | 	wrlong	result1, fp
1bea8     04 CE 05 F1 | 	add	fp, #4
1beac     E7 7C 62 FC | 	wrlong	result2, fp
1beb0     04 CE 05 F1 | 	add	fp, #4
1beb4     E7 AC 62 FC | 	wrlong	local04, fp
1beb8     08 CE 85 F1 | 	sub	fp, #8
1bebc     E7 92 02 F6 | 	mov	arg01, fp
1bec0     88 19 BF FD | 	call	#_converttoint
1bec4     3D B9 02 F6 | 	mov	local10, result1
1bec8     04 00 90 FD | 	jmp	#LR__2347
1becc                 | LR__2346
1becc     00 B8 06 F6 | 	mov	local10, #0
1bed0                 | LR__2347
1bed0     58 B7 02 FD | 	qmul	local09, local06
1bed4     54 BB 02 F6 | 	mov	local11, local02
1bed8     10 BA 06 F1 | 	add	local11, #16
1bedc     5C BD 02 F6 | 	mov	local12, local10
1bee0     18 B8 62 FD | 	getqx	local10
1bee4     58 B5 02 FD | 	qmul	local08, local06
1bee8     5C BD 02 F1 | 	add	local12, local10
1beec     18 B8 62 FD | 	getqx	local10
1bef0     59 B9 02 FD | 	qmul	local10, local07
1bef4     18 B8 62 FD | 	getqx	local10
1bef8     5C BD 02 F1 | 	add	local12, local10
1befc     57 BD 02 FD | 	qmul	local12, local05
1bf00                 | ' 
1bf00                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1bf00                 | ' 
1bf00                 | ' select case vartype
1bf00     55 BF 02 F6 | 	mov	local13, local03
1bf04     00 BF 86 F1 | 	sub	local13, #256
1bf08     0C BE 26 F3 | 	fle	local13, #12
1bf0c     18 B8 62 FD | 	getqx	local10
1bf10     5C BB 02 F1 | 	add	local11, local10
1bf14     30 BE 62 FD | 	jmprel	local13
1bf18                 | LR__2348
1bf18     30 00 90 FD | 	jmp	#LR__2349
1bf1c     50 00 90 FD | 	jmp	#LR__2350
1bf20     80 00 90 FD | 	jmp	#LR__2351
1bf24     9C 00 90 FD | 	jmp	#LR__2352
1bf28     D4 00 90 FD | 	jmp	#LR__2353
1bf2c     F0 00 90 FD | 	jmp	#LR__2354
1bf30     08 01 90 FD | 	jmp	#LR__2355
1bf34     20 01 90 FD | 	jmp	#LR__2356
1bf38     30 01 90 FD | 	jmp	#LR__2357
1bf3c     40 01 90 FD | 	jmp	#LR__2358
1bf40     58 01 90 FD | 	jmp	#LR__2359
1bf44     68 01 90 FD | 	jmp	#LR__2360
1bf48     90 01 90 FD | 	jmp	#LR__2361
1bf4c                 | LR__2349
1bf4c     E7 92 02 F6 | 	mov	arg01, fp
1bf50     5D 95 02 F6 | 	mov	arg02, local11
1bf54     0C 96 06 F6 | 	mov	arg03, #12
1bf58     0B 00 00 FF 
1bf5c     CC 64 06 F1 | 	add	objptr, ##5836
1bf60     C4 7C B0 FD | 	call	#_psram_spin2_read1
1bf64     0B 00 00 FF 
1bf68     CC 64 86 F1 | 	sub	objptr, ##5836
1bf6c     6C 01 90 FD | 	jmp	#LR__2361
1bf70                 | LR__2350
1bf70     08 CE 05 F1 | 	add	fp, #8
1bf74     E7 38 68 FC | 	wrlong	#28, fp
1bf78     08 CE 85 F1 | 	sub	fp, #8
1bf7c     5D 93 02 F6 | 	mov	arg01, local11
1bf80     6C 51 B0 FD | 	call	#_pspeek
1bf84     3D 7B E2 F8 | 	getbyte	result1, result1, #0
1bf88     E7 7A 62 FC | 	wrlong	result1, fp
1bf8c     80 7A 16 F2 | 	cmp	result1, #128 wc
1bf90     00 A7 66 36 |  if_ae	neg	local01, #256
1bf94     3D BD 02 36 |  if_ae	mov	local12, result1
1bf98     5E A7 42 35 |  if_ae	or	local01, local12
1bf9c     E7 A6 62 3C |  if_ae	wrlong	local01, fp
1bfa0     38 01 90 FD | 	jmp	#LR__2361
1bfa4                 | LR__2351
1bfa4     08 CE 05 F1 | 	add	fp, #8
1bfa8     E7 3A 68 FC | 	wrlong	#29, fp
1bfac     08 CE 85 F1 | 	sub	fp, #8
1bfb0     5D 93 02 F6 | 	mov	arg01, local11
1bfb4     38 51 B0 FD | 	call	#_pspeek
1bfb8     3D 7B E2 F8 | 	getbyte	result1, result1, #0
1bfbc     E7 7A 62 FC | 	wrlong	result1, fp
1bfc0     18 01 90 FD | 	jmp	#LR__2361
1bfc4                 | LR__2352
1bfc4     08 CE 05 F1 | 	add	fp, #8
1bfc8     E7 38 68 FC | 	wrlong	#28, fp
1bfcc     08 CE 85 F1 | 	sub	fp, #8
1bfd0     5D 93 02 F6 | 	mov	arg01, local11
1bfd4     60 51 B0 FD | 	call	#_pslpeek
1bfd8     3D 7B 32 F9 | 	getword	result1, result1, #0
1bfdc     E7 7A 62 FC | 	wrlong	result1, fp
1bfe0     40 00 00 FF 
1bfe4     00 7A 16 F2 | 	cmp	result1, ##32768 wc
1bfe8     FF 7F 00 3F 
1bfec     00 A7 06 36 |  if_ae	mov	local01, ##16776960
1bff0     3D BD 02 36 |  if_ae	mov	local12, result1
1bff4     5E A7 42 35 |  if_ae	or	local01, local12
1bff8     E7 A6 62 3C |  if_ae	wrlong	local01, fp
1bffc     DC 00 90 FD | 	jmp	#LR__2361
1c000                 | LR__2353
1c000     08 CE 05 F1 | 	add	fp, #8
1c004     E7 3A 68 FC | 	wrlong	#29, fp
1c008     08 CE 85 F1 | 	sub	fp, #8
1c00c     5D 93 02 F6 | 	mov	arg01, local11
1c010     24 51 B0 FD | 	call	#_pslpeek
1c014     3D 7B 32 F9 | 	getword	result1, result1, #0
1c018     E7 7A 62 FC | 	wrlong	result1, fp
1c01c     BC 00 90 FD | 	jmp	#LR__2361
1c020                 | LR__2354
1c020     08 CE 05 F1 | 	add	fp, #8
1c024     E7 38 68 FC | 	wrlong	#28, fp
1c028     08 CE 85 F1 | 	sub	fp, #8
1c02c     5D 93 02 F6 | 	mov	arg01, local11
1c030     04 51 B0 FD | 	call	#_pslpeek
1c034     E7 7A 62 FC | 	wrlong	result1, fp
1c038     A0 00 90 FD | 	jmp	#LR__2361
1c03c                 | LR__2355
1c03c     08 CE 05 F1 | 	add	fp, #8
1c040     E7 3A 68 FC | 	wrlong	#29, fp
1c044     08 CE 85 F1 | 	sub	fp, #8
1c048     5D 93 02 F6 | 	mov	arg01, local11
1c04c     E8 50 B0 FD | 	call	#_pslpeek
1c050     E7 7A 62 FC | 	wrlong	result1, fp
1c054     84 00 90 FD | 	jmp	#LR__2361
1c058                 | LR__2356
1c058     08 CE 05 F1 | 	add	fp, #8
1c05c     E7 FE 69 FC | 	wrlong	#255, fp
1c060     08 CE 85 F1 | 	sub	fp, #8
1c064     E7 60 68 FC | 	wrlong	#48, fp
1c068     70 00 90 FD | 	jmp	#LR__2361
1c06c                 | LR__2357
1c06c     08 CE 05 F1 | 	add	fp, #8
1c070     E7 FE 69 FC | 	wrlong	#255, fp
1c074     08 CE 85 F1 | 	sub	fp, #8
1c078     E7 60 68 FC | 	wrlong	#48, fp
1c07c     5C 00 90 FD | 	jmp	#LR__2361
1c080                 | LR__2358
1c080     08 CE 05 F1 | 	add	fp, #8
1c084     E7 3C 68 FC | 	wrlong	#30, fp
1c088     08 CE 85 F1 | 	sub	fp, #8
1c08c     5D 93 02 F6 | 	mov	arg01, local11
1c090     A4 50 B0 FD | 	call	#_pslpeek
1c094     E7 7A 62 FC | 	wrlong	result1, fp
1c098     40 00 90 FD | 	jmp	#LR__2361
1c09c                 | LR__2359
1c09c     08 CE 05 F1 | 	add	fp, #8
1c0a0     E7 FE 69 FC | 	wrlong	#255, fp
1c0a4     08 CE 85 F1 | 	sub	fp, #8
1c0a8     E7 60 68 FC | 	wrlong	#48, fp
1c0ac     2C 00 90 FD | 	jmp	#LR__2361
1c0b0                 | LR__2360
1c0b0     08 CE 05 F1 | 	add	fp, #8
1c0b4     E7 3E 68 FC | 	wrlong	#31, fp
1c0b8     08 CE 85 F1 | 	sub	fp, #8
1c0bc     5D 93 02 F6 | 	mov	arg01, local11
1c0c0     74 50 B0 FD | 	call	#_pslpeek
1c0c4     E7 7A 62 FC | 	wrlong	result1, fp
1c0c8     00 04 00 FF 
1c0cc     00 7A 16 F2 | 	cmp	result1, ##524288 wc
1c0d0     08 CE 05 31 |  if_ae	add	fp, #8
1c0d4     E7 56 68 3C |  if_ae	wrlong	#43, fp
1c0d8     08 CE 85 31 |  if_ae	sub	fp, #8
1c0dc                 | LR__2361
1c0dc     E7 92 02 F6 | 	mov	arg01, fp
1c0e0     1C 16 BF FD | 	call	#_push
1c0e4                 | LR__2362
1c0e4     E7 F0 03 F6 | 	mov	ptra, fp
1c0e8     F2 00 A0 FD | 	call	#popregs_
1c0ec                 | _do_getvar_ret
1c0ec     2D 00 64 FD | 	ret
1c0f0                 | 
1c0f0                 | ' 
1c0f0                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1c0f0                 | ' 
1c0f0                 | ' sub do_getaddr
1c0f0                 | _do_getaddr
1c0f0     09 CA 05 F6 | 	mov	COUNT_, #9
1c0f4     E8 00 A0 FD | 	call	#pushregs_
1c0f8     38 F0 07 F1 | 	add	ptra, #56
1c0fc                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1c0fc                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1c0fc     4C 00 00 FF 
1c100     24 64 06 F1 | 	add	objptr, ##38948
1c104     32 93 02 FB | 	rdlong	arg01, objptr
1c108     49 7D 02 F6 | 	mov	result2, arg01
1c10c     01 7C 66 F0 | 	shl	result2, #1
1c110     49 7D 02 F1 | 	add	result2, arg01
1c114     02 7C 66 F0 | 	shl	result2, #2
1c118     03 00 00 FF 
1c11c     04 64 86 F1 | 	sub	objptr, ##1540
1c120     32 7D 02 F1 | 	add	result2, objptr
1c124     04 7C 06 F1 | 	add	result2, #4
1c128     3E 7D 0A FB | 	rdlong	result2, result2 wz
1c12c     49 00 00 FF 
1c130     20 64 86 F1 | 	sub	objptr, ##37408
1c134     10 01 90 5D |  if_ne	jmp	#LR__2370
1c138     4C 00 00 FF 
1c13c     24 64 06 F1 | 	add	objptr, ##38948
1c140     32 93 02 FB | 	rdlong	arg01, objptr
1c144     49 7D 02 F6 | 	mov	result2, arg01
1c148     01 7C 66 F0 | 	shl	result2, #1
1c14c     49 7D 02 F1 | 	add	result2, arg01
1c150     02 7C 66 F0 | 	shl	result2, #2
1c154     03 00 00 FF 
1c158     04 64 86 F1 | 	sub	objptr, ##1540
1c15c     32 7D 02 F1 | 	add	result2, objptr
1c160     3E 93 02 FB | 	rdlong	arg01, result2
1c164     04 92 66 F0 | 	shl	arg01, #4
1c168     32 00 00 FF 
1c16c     84 64 86 F1 | 	sub	objptr, ##25732
1c170     32 93 02 F1 | 	add	arg01, objptr
1c174     0C 92 06 F1 | 	add	arg01, #12
1c178     49 93 02 FB | 	rdlong	arg01, arg01
1c17c     08 CE 05 F1 | 	add	fp, #8
1c180     E7 92 62 FC | 	wrlong	arg01, fp
1c184                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1c184                 | '    if t1.result_type>=array_no_type then goto 2200
1c184     08 CE 85 F1 | 	sub	fp, #8
1c188     00 93 16 F2 | 	cmp	arg01, #256 wc
1c18c     16 00 00 FF 
1c190     9C 65 86 F1 | 	sub	objptr, ##11676
1c194     B0 00 90 3D |  if_ae	jmp	#LR__2371
1c198     4C 00 00 FF 
1c19c     24 64 06 F1 | 	add	objptr, ##38948
1c1a0     32 93 02 FB | 	rdlong	arg01, objptr
1c1a4     49 7F 02 F6 | 	mov	result3, arg01
1c1a8     01 7E 66 F0 | 	shl	result3, #1
1c1ac     49 7F 02 F1 | 	add	result3, arg01
1c1b0     02 7E 66 F0 | 	shl	result3, #2
1c1b4     03 00 00 FF 
1c1b8     04 64 86 F1 | 	sub	objptr, ##1540
1c1bc     32 7F 02 F1 | 	add	result3, objptr
1c1c0     3F 7B 02 FB | 	rdlong	result1, result3
1c1c4     04 7A 66 F0 | 	shl	result1, #4
1c1c8     32 00 00 FF 
1c1cc     84 64 86 F1 | 	sub	objptr, ##25732
1c1d0     32 7B 02 F1 | 	add	result1, objptr
1c1d4     04 7A 06 F1 | 	add	result1, #4
1c1d8     E7 7A 62 FC | 	wrlong	result1, fp
1c1dc     35 00 00 FF 
1c1e0     88 64 06 F1 | 	add	objptr, ##27272
1c1e4     32 7F 02 FB | 	rdlong	result3, objptr
1c1e8     3F 93 02 F6 | 	mov	arg01, result3
1c1ec     01 92 66 F0 | 	shl	arg01, #1
1c1f0     3F 93 02 F1 | 	add	arg01, result3
1c1f4     02 92 66 F0 | 	shl	arg01, #2
1c1f8     03 00 00 FF 
1c1fc     04 64 86 F1 | 	sub	objptr, ##1540
1c200     32 93 02 F1 | 	add	arg01, objptr
1c204     49 93 02 FB | 	rdlong	arg01, arg01
1c208     04 92 66 F0 | 	shl	arg01, #4
1c20c     32 00 00 FF 
1c210     84 64 86 F1 | 	sub	objptr, ##25732
1c214     32 93 02 F1 | 	add	arg01, objptr
1c218     0C 92 06 F1 | 	add	arg01, #12
1c21c     49 93 02 FB | 	rdlong	arg01, arg01
1c220     04 CE 05 F1 | 	add	fp, #4
1c224     E7 92 62 FC | 	wrlong	arg01, fp
1c228     04 CE 05 F1 | 	add	fp, #4
1c22c     E7 3A 68 FC | 	wrlong	#29, fp
1c230     08 CE 85 F1 | 	sub	fp, #8
1c234     E7 92 02 F6 | 	mov	arg01, fp
1c238     16 00 00 FF 
1c23c     9C 65 86 F1 | 	sub	objptr, ##11676
1c240     BC 14 BF FD | 	call	#_push
1c244                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1c244                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1c244                 | '   t1.result_type=result_uint
1c244                 | '   push t1 : return
1c244     24 02 90 FD | 	jmp	#LR__2380
1c248                 | LR__2370
1c248                 | LR__2371
1c248     4C 00 00 FF 
1c24c     24 64 06 F1 | 	add	objptr, ##38948
1c250     32 A7 02 FB | 	rdlong	local01, objptr
1c254     53 7D 02 F6 | 	mov	result2, local01
1c258     01 7C 66 F0 | 	shl	result2, #1
1c25c     53 7D 02 F1 | 	add	result2, local01
1c260     02 7C 66 F0 | 	shl	result2, #2
1c264     03 00 00 FF 
1c268     04 64 86 F1 | 	sub	objptr, ##1540
1c26c     32 7D 02 F1 | 	add	result2, objptr
1c270     3E 7D 02 FB | 	rdlong	result2, result2
1c274     04 7C 66 F0 | 	shl	result2, #4
1c278     32 00 00 FF 
1c27c     84 64 86 F1 | 	sub	objptr, ##25732
1c280     32 7D 02 F1 | 	add	result2, objptr
1c284     04 7C 06 F1 | 	add	result2, #4
1c288     3E A9 02 FB | 	rdlong	local02, result2
1c28c     53 93 02 F6 | 	mov	arg01, local01
1c290     01 92 66 F0 | 	shl	arg01, #1
1c294     53 93 02 F1 | 	add	arg01, local01
1c298     02 92 66 F0 | 	shl	arg01, #2
1c29c     32 00 00 FF 
1c2a0     84 64 06 F1 | 	add	objptr, ##25732
1c2a4     32 93 02 F1 | 	add	arg01, objptr
1c2a8     49 93 02 FB | 	rdlong	arg01, arg01
1c2ac     04 92 66 F0 | 	shl	arg01, #4
1c2b0     32 00 00 FF 
1c2b4     84 64 86 F1 | 	sub	objptr, ##25732
1c2b8     32 93 02 F1 | 	add	arg01, objptr
1c2bc     0C 92 06 F1 | 	add	arg01, #12
1c2c0     49 93 02 FB | 	rdlong	arg01, arg01
1c2c4     04 CE 05 F1 | 	add	fp, #4
1c2c8     E7 92 62 FC | 	wrlong	arg01, fp
1c2cc     04 CE 85 F1 | 	sub	fp, #4
1c2d0     54 93 02 F6 | 	mov	arg01, local02
1c2d4     16 00 00 FF 
1c2d8     9C 65 86 F1 | 	sub	objptr, ##11676
1c2dc     58 4E B0 FD | 	call	#_pslpeek
1c2e0     4C 00 00 FF 
1c2e4     24 64 06 F1 | 	add	objptr, ##38948
1c2e8     32 A7 02 FB | 	rdlong	local01, objptr
1c2ec     53 93 02 F6 | 	mov	arg01, local01
1c2f0     01 92 66 F0 | 	shl	arg01, #1
1c2f4     53 93 02 F1 | 	add	arg01, local01
1c2f8     02 92 66 F0 | 	shl	arg01, #2
1c2fc     03 00 00 FF 
1c300     04 64 86 F1 | 	sub	objptr, ##1540
1c304     32 93 02 F1 | 	add	arg01, objptr
1c308     04 92 06 F1 | 	add	arg01, #4
1c30c     49 AB 02 FB | 	rdlong	local03, arg01
1c310     54 93 02 F6 | 	mov	arg01, local02
1c314     02 92 06 F1 | 	add	arg01, #2
1c318     49 00 00 FF 
1c31c     20 64 86 F1 | 	sub	objptr, ##37408
1c320     CC 4D B0 FD | 	call	#_pspeek
1c324     3D AD E2 F8 | 	getbyte	local04, result1, #0
1c328     54 93 02 F6 | 	mov	arg01, local02
1c32c     04 92 06 F1 | 	add	arg01, #4
1c330     04 4E B0 FD | 	call	#_pslpeek
1c334     3D AF 02 F6 | 	mov	local05, result1
1c338     54 93 02 F6 | 	mov	arg01, local02
1c33c     08 92 06 F1 | 	add	arg01, #8
1c340     F4 4D B0 FD | 	call	#_pslpeek
1c344     3D B1 02 F6 | 	mov	local06, result1
1c348     54 93 02 F6 | 	mov	arg01, local02
1c34c     0C 92 06 F1 | 	add	arg01, #12
1c350     E4 4D B0 FD | 	call	#_pslpeek
1c354                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1c354                 | ' esize=pspeek(arrptr+2)
1c354                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1c354                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1c354                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1c354                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1c354     03 AA 16 F2 | 	cmp	local03, #3 wc
1c358     30 00 90 CD |  if_b	jmp	#LR__2372
1c35c     10 13 BF FD | 	call	#_pop
1c360     3F A7 02 F6 | 	mov	local01, result3
1c364     E7 7A 62 FC | 	wrlong	result1, fp
1c368     04 CE 05 F1 | 	add	fp, #4
1c36c     E7 7C 62 FC | 	wrlong	result2, fp
1c370     04 CE 05 F1 | 	add	fp, #4
1c374     E7 A6 62 FC | 	wrlong	local01, fp
1c378     08 CE 85 F1 | 	sub	fp, #8
1c37c     E7 92 02 F6 | 	mov	arg01, fp
1c380     C8 14 BF FD | 	call	#_converttoint
1c384     3D B3 02 F6 | 	mov	local07, result1
1c388     04 00 90 FD | 	jmp	#LR__2373
1c38c                 | LR__2372
1c38c     00 B2 06 F6 | 	mov	local07, #0
1c390                 | LR__2373
1c390                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1c390     02 AA 16 F2 | 	cmp	local03, #2 wc
1c394     30 00 90 CD |  if_b	jmp	#LR__2374
1c398     D4 12 BF FD | 	call	#_pop
1c39c     3F A7 02 F6 | 	mov	local01, result3
1c3a0     E7 7A 62 FC | 	wrlong	result1, fp
1c3a4     04 CE 05 F1 | 	add	fp, #4
1c3a8     E7 7C 62 FC | 	wrlong	result2, fp
1c3ac     04 CE 05 F1 | 	add	fp, #4
1c3b0     E7 A6 62 FC | 	wrlong	local01, fp
1c3b4     08 CE 85 F1 | 	sub	fp, #8
1c3b8     E7 92 02 F6 | 	mov	arg01, fp
1c3bc     8C 14 BF FD | 	call	#_converttoint
1c3c0     3D B5 02 F6 | 	mov	local08, result1
1c3c4     04 00 90 FD | 	jmp	#LR__2375
1c3c8                 | LR__2374
1c3c8     00 B4 06 F6 | 	mov	local08, #0
1c3cc                 | LR__2375
1c3cc                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1c3cc     01 AA 16 F2 | 	cmp	local03, #1 wc
1c3d0     30 00 90 CD |  if_b	jmp	#LR__2376
1c3d4     98 12 BF FD | 	call	#_pop
1c3d8     3F A7 02 F6 | 	mov	local01, result3
1c3dc     E7 7A 62 FC | 	wrlong	result1, fp
1c3e0     04 CE 05 F1 | 	add	fp, #4
1c3e4     E7 7C 62 FC | 	wrlong	result2, fp
1c3e8     04 CE 05 F1 | 	add	fp, #4
1c3ec     E7 A6 62 FC | 	wrlong	local01, fp
1c3f0     08 CE 85 F1 | 	sub	fp, #8
1c3f4     E7 92 02 F6 | 	mov	arg01, fp
1c3f8     50 14 BF FD | 	call	#_converttoint
1c3fc     3D B7 02 F6 | 	mov	local09, result1
1c400     04 00 90 FD | 	jmp	#LR__2377
1c404                 | LR__2376
1c404     00 B6 06 F6 | 	mov	local09, #0
1c408                 | LR__2377
1c408                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1c408                 | ' if numpar>0 then
1c408     01 AA 16 F2 | 	cmp	local03, #1 wc
1c40c     44 00 90 CD |  if_b	jmp	#LR__2378
1c410     57 B5 02 FD | 	qmul	local08, local05
1c414     10 A8 06 F1 | 	add	local02, #16
1c418     18 B4 62 FD | 	getqx	local08
1c41c     57 B3 02 FD | 	qmul	local07, local05
1c420     5A B7 02 F1 | 	add	local09, local08
1c424     18 B4 62 FD | 	getqx	local08
1c428     58 B5 02 FD | 	qmul	local08, local06
1c42c     18 B4 62 FD | 	getqx	local08
1c430     5A B7 02 F1 | 	add	local09, local08
1c434     56 B7 02 FD | 	qmul	local09, local04
1c438     08 CE 05 F1 | 	add	fp, #8
1c43c     E7 3A 68 FC | 	wrlong	#29, fp
1c440     08 CE 85 F1 | 	sub	fp, #8
1c444     18 A6 62 FD | 	getqx	local01
1c448     53 A9 02 F1 | 	add	local02, local01
1c44c     E7 A8 62 FC | 	wrlong	local02, fp
1c450     10 00 90 FD | 	jmp	#LR__2379
1c454                 | LR__2378
1c454     08 CE 05 F1 | 	add	fp, #8
1c458     E7 3A 68 FC | 	wrlong	#29, fp
1c45c     08 CE 85 F1 | 	sub	fp, #8
1c460     E7 A8 62 FC | 	wrlong	local02, fp
1c464                 | LR__2379
1c464     E7 92 02 F6 | 	mov	arg01, fp
1c468     94 12 BF FD | 	call	#_push
1c46c                 | LR__2380
1c46c     E7 F0 03 F6 | 	mov	ptra, fp
1c470     F2 00 A0 FD | 	call	#popregs_
1c474                 | _do_getaddr_ret
1c474     2D 00 64 FD | 	ret
1c478                 | 
1c478                 | ' 
1c478                 | ' 
1c478                 | ' 
1c478                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c478                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1c478                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c478                 | ' 
1c478                 | ' '--------------------------------- AND 
1c478                 | ' 
1c478                 | ' sub do_and 
1c478                 | _do_and
1c478     05 CA 05 F6 | 	mov	COUNT_, #5
1c47c     E8 00 A0 FD | 	call	#pushregs_
1c480     18 F0 07 F1 | 	add	ptra, #24
1c484     E8 11 BF FD | 	call	#_pop
1c488     3D A7 02 F6 | 	mov	local01, result1
1c48c     3E 93 02 F6 | 	mov	arg01, result2
1c490     3F AD 02 F6 | 	mov	local04, result3
1c494     49 A9 02 F6 | 	mov	local02, arg01
1c498     56 AB 02 F6 | 	mov	local03, local04
1c49c     D0 11 BF FD | 	call	#_pop
1c4a0     3F AF 02 F6 | 	mov	local05, result3
1c4a4     E7 7A 62 FC | 	wrlong	result1, fp
1c4a8     04 CE 05 F1 | 	add	fp, #4
1c4ac     E7 7C 62 FC | 	wrlong	result2, fp
1c4b0     04 CE 05 F1 | 	add	fp, #4
1c4b4     E7 AE 62 FC | 	wrlong	local05, fp
1c4b8                 | ' 
1c4b8                 | ' t2=pop()
1c4b8                 | ' t1=pop()
1c4b8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1c4b8     08 CE 85 F1 | 	sub	fp, #8
1c4bc     1C AE 0E F2 | 	cmp	local05, #28 wz
1c4c0     E7 AE 02 AB |  if_e	rdlong	local05, fp
1c4c4     E7 AE 62 AC |  if_e	wrlong	local05, fp
1c4c8     08 CE 05 A1 |  if_e	add	fp, #8
1c4cc     E7 3A 68 AC |  if_e	wrlong	#29, fp
1c4d0     08 CE 85 A1 |  if_e	sub	fp, #8
1c4d4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1c4d4     1C AA 0E F2 | 	cmp	local03, #28 wz
1c4d8     1D AA 06 A6 |  if_e	mov	local03, #29
1c4dc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1c4dc     08 CE 05 F1 | 	add	fp, #8
1c4e0     E7 AE 02 FB | 	rdlong	local05, fp
1c4e4     08 CE 85 F1 | 	sub	fp, #8
1c4e8     1F AE 0E F2 | 	cmp	local05, #31 wz
1c4ec     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1c4f0     08 CE 05 51 |  if_ne	add	fp, #8
1c4f4     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1c4f8     08 CE 85 51 |  if_ne	sub	fp, #8
1c4fc     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1c500     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1c504     E7 0C 68 AC |  if_e	wrlong	#6, fp
1c508     08 CE 05 A1 |  if_e	add	fp, #8
1c50c     E7 FE 69 AC |  if_e	wrlong	#255, fp
1c510     08 CE 85 A1 |  if_e	sub	fp, #8
1c514     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1c518     53 AF 02 55 |  if_ne	and	local05, local01
1c51c     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1c520     E7 92 02 F6 | 	mov	arg01, fp
1c524     D8 11 BF FD | 	call	#_push
1c528     E7 F0 03 F6 | 	mov	ptra, fp
1c52c     F2 00 A0 FD | 	call	#popregs_
1c530                 | _do_and_ret
1c530     2D 00 64 FD | 	ret
1c534                 | 
1c534                 | ' 
1c534                 | ' '--------------------------------- DIV (integer divide)
1c534                 | ' 
1c534                 | ' sub do_div 
1c534                 | _do_div
1c534     04 CA 05 F6 | 	mov	COUNT_, #4
1c538     E8 00 A0 FD | 	call	#pushregs_
1c53c     18 F0 07 F1 | 	add	ptra, #24
1c540     2C 11 BF FD | 	call	#_pop
1c544     3D A7 02 F6 | 	mov	local01, result1
1c548     3E 11 03 F6 | 	mov	muldivb_, result2
1c54c     3F 0F 03 F6 | 	mov	muldiva_, result3
1c550     88 A9 02 F6 | 	mov	local02, muldivb_
1c554     87 AB 02 F6 | 	mov	local03, muldiva_
1c558     14 11 BF FD | 	call	#_pop
1c55c     E7 7A 62 FC | 	wrlong	result1, fp
1c560     04 CE 05 F1 | 	add	fp, #4
1c564     E7 7C 62 FC | 	wrlong	result2, fp
1c568     04 CE 05 F1 | 	add	fp, #4
1c56c     E7 7E 62 FC | 	wrlong	result3, fp
1c570                 | ' 
1c570                 | ' t2=pop()
1c570                 | ' t1=pop()
1c570                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1c570     08 CE 85 F1 | 	sub	fp, #8
1c574     1F 7E 0E F2 | 	cmp	result3, #31 wz
1c578     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1c57c     E7 14 68 AC |  if_e	wrlong	#10, fp
1c580     08 CE 05 A1 |  if_e	add	fp, #8
1c584     E7 FE 69 AC |  if_e	wrlong	#255, fp
1c588     08 CE 85 A1 |  if_e	sub	fp, #8
1c58c     14 01 90 AD |  if_e	jmp	#LR__2395
1c590                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1c590     08 CE 05 F1 | 	add	fp, #8
1c594     E7 10 03 FB | 	rdlong	muldivb_, fp
1c598     08 CE 85 F1 | 	sub	fp, #8
1c59c     1E 10 0F F2 | 	cmp	muldivb_, #30 wz
1c5a0     1C 00 90 5D |  if_ne	jmp	#LR__2390
1c5a4     08 CE 05 F1 | 	add	fp, #8
1c5a8     E7 38 68 FC | 	wrlong	#28, fp
1c5ac     08 CE 85 F1 | 	sub	fp, #8
1c5b0     E7 92 02 FB | 	rdlong	arg01, fp
1c5b4     00 94 06 F6 | 	mov	arg02, #0
1c5b8     80 B1 B0 FD | 	call	#__system___float_tointeger
1c5bc     E7 7A 62 FC | 	wrlong	result1, fp
1c5c0                 | LR__2390
1c5c0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1c5c0     1E AA 0E F2 | 	cmp	local03, #30 wz
1c5c4     14 00 90 5D |  if_ne	jmp	#LR__2391
1c5c8     1C AA 06 F6 | 	mov	local03, #28
1c5cc     53 93 02 F6 | 	mov	arg01, local01
1c5d0     00 94 06 F6 | 	mov	arg02, #0
1c5d4     64 B1 B0 FD | 	call	#__system___float_tointeger
1c5d8     3D A7 02 F6 | 	mov	local01, result1
1c5dc                 | LR__2391
1c5dc     08 CE 05 F1 | 	add	fp, #8
1c5e0     E7 AC 02 FB | 	rdlong	local04, fp
1c5e4     08 CE 85 F1 | 	sub	fp, #8
1c5e8     1D AC 0E F2 | 	cmp	local04, #29 wz
1c5ec     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c5f0     E7 AC 02 AB |  if_e	rdlong	local04, fp
1c5f4     53 AD 12 AD |  if_e	qdiv	local04, local01
1c5f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1c5f8     18 AC 62 AD |  if_e	getqx	local04
1c5fc     E7 AC 62 AC |  if_e	wrlong	local04, fp
1c600     A0 00 90 AD |  if_e	jmp	#LR__2395
1c604                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1c604     08 CE 05 F1 | 	add	fp, #8
1c608     E7 AC 02 FB | 	rdlong	local04, fp
1c60c     08 CE 85 F1 | 	sub	fp, #8
1c610     1D AC 0E F2 | 	cmp	local04, #29 wz
1c614     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c618     20 00 90 5D |  if_ne	jmp	#LR__2392
1c61c     E7 AC 02 FB | 	rdlong	local04, fp
1c620     53 AD 12 FD | 	qdiv	local04, local01
1c624     18 AC 62 FD | 	getqx	local04
1c628     E7 AC 62 FC | 	wrlong	local04, fp
1c62c     08 CE 05 F1 | 	add	fp, #8
1c630     E7 38 68 FC | 	wrlong	#28, fp
1c634     08 CE 85 F1 | 	sub	fp, #8
1c638     68 00 90 FD | 	jmp	#LR__2395
1c63c                 | LR__2392
1c63c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1c63c     08 CE 05 F1 | 	add	fp, #8
1c640     E7 AC 02 FB | 	rdlong	local04, fp
1c644     08 CE 85 F1 | 	sub	fp, #8
1c648     1C AC 0E F2 | 	cmp	local04, #28 wz
1c64c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c650     14 00 90 5D |  if_ne	jmp	#LR__2393
1c654     E7 0E 03 FB | 	rdlong	muldiva_, fp
1c658     53 11 03 F6 | 	mov	muldivb_, local01
1c65c     FA 00 A0 FD | 	call	#divide_
1c660     E7 10 63 FC | 	wrlong	muldivb_, fp
1c664     3C 00 90 FD | 	jmp	#LR__2395
1c668                 | LR__2393
1c668                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1c668     08 CE 05 F1 | 	add	fp, #8
1c66c     E7 AC 02 FB | 	rdlong	local04, fp
1c670     08 CE 85 F1 | 	sub	fp, #8
1c674     1C AC 0E F2 | 	cmp	local04, #28 wz
1c678     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c67c     14 00 90 5D |  if_ne	jmp	#LR__2394
1c680     E7 0E 03 FB | 	rdlong	muldiva_, fp
1c684     53 11 03 F6 | 	mov	muldivb_, local01
1c688     FA 00 A0 FD | 	call	#divide_
1c68c     E7 10 63 FC | 	wrlong	muldivb_, fp
1c690     10 00 90 FD | 	jmp	#LR__2395
1c694                 | LR__2394
1c694     E7 16 68 FC | 	wrlong	#11, fp
1c698     08 CE 05 F1 | 	add	fp, #8
1c69c     E7 FE 69 FC | 	wrlong	#255, fp
1c6a0     08 CE 85 F1 | 	sub	fp, #8
1c6a4                 | LR__2395
1c6a4     E7 92 02 F6 | 	mov	arg01, fp
1c6a8     54 10 BF FD | 	call	#_push
1c6ac     E7 F0 03 F6 | 	mov	ptra, fp
1c6b0     F2 00 A0 FD | 	call	#popregs_
1c6b4                 | _do_div_ret
1c6b4     2D 00 64 FD | 	ret
1c6b8                 | 
1c6b8                 | ' 
1c6b8                 | ' '--------------------------------- equal (=)
1c6b8                 | ' 
1c6b8                 | ' sub do_eq
1c6b8                 | _do_eq
1c6b8     07 CA 05 F6 | 	mov	COUNT_, #7
1c6bc     E8 00 A0 FD | 	call	#pushregs_
1c6c0     18 F0 07 F1 | 	add	ptra, #24
1c6c4     A8 0F BF FD | 	call	#_pop
1c6c8     3D A7 02 F6 | 	mov	local01, result1
1c6cc     3E AD 02 F6 | 	mov	local04, result2
1c6d0     3F AF 02 F6 | 	mov	local05, result3
1c6d4     56 A9 02 F6 | 	mov	local02, local04
1c6d8     57 AB 02 F6 | 	mov	local03, local05
1c6dc     90 0F BF FD | 	call	#_pop
1c6e0     3F AF 02 F6 | 	mov	local05, result3
1c6e4     E7 7A 62 FC | 	wrlong	result1, fp
1c6e8     04 CE 05 F1 | 	add	fp, #4
1c6ec     E7 7C 62 FC | 	wrlong	result2, fp
1c6f0     04 CE 05 F1 | 	add	fp, #4
1c6f4     E7 AE 62 FC | 	wrlong	local05, fp
1c6f8                 | ' 
1c6f8                 | ' t2=pop()
1c6f8                 | ' t1=pop()
1c6f8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1c6f8     08 CE 85 F1 | 	sub	fp, #8
1c6fc     1F AE 0E F2 | 	cmp	local05, #31 wz
1c700     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1c704     20 00 90 5D |  if_ne	jmp	#LR__2400
1c708     00 B0 06 F6 | 	mov	local06, #0
1c70c     E7 92 02 FB | 	rdlong	arg01, fp
1c710     53 95 02 F6 | 	mov	arg02, local01
1c714     B4 84 B0 FD | 	call	#__system___string_cmp
1c718     00 7A 0E F2 | 	cmp	result1, #0 wz
1c71c     00 B0 26 A6 |  if_e	not	local06, #0
1c720     E7 B0 62 FC | 	wrlong	local06, fp
1c724     04 03 90 FD | 	jmp	#LR__2413
1c728                 | LR__2400
1c728                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1c728     08 CE 05 F1 | 	add	fp, #8
1c72c     E7 B0 02 FB | 	rdlong	local06, fp
1c730     08 CE 85 F1 | 	sub	fp, #8
1c734     1E B0 0E F2 | 	cmp	local06, #30 wz
1c738     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c73c     24 00 90 5D |  if_ne	jmp	#LR__2401
1c740     00 B0 06 F6 | 	mov	local06, #0
1c744     E7 92 02 FB | 	rdlong	arg01, fp
1c748     53 95 02 F6 | 	mov	arg02, local01
1c74c     01 96 06 F6 | 	mov	arg03, #1
1c750     54 AF B0 FD | 	call	#__system___float_cmp
1c754     00 7A 0E F2 | 	cmp	result1, #0 wz
1c758     00 B0 26 A6 |  if_e	not	local06, #0
1c75c     E7 B0 62 FC | 	wrlong	local06, fp
1c760     C8 02 90 FD | 	jmp	#LR__2413
1c764                 | LR__2401
1c764                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1c764     08 CE 05 F1 | 	add	fp, #8
1c768     E7 B0 02 FB | 	rdlong	local06, fp
1c76c     08 CE 85 F1 | 	sub	fp, #8
1c770     1E B0 0E F2 | 	cmp	local06, #30 wz
1c774     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c778     3C 00 90 5D |  if_ne	jmp	#LR__2402
1c77c     00 B0 06 F6 | 	mov	local06, #0
1c780     E7 AC 02 FB | 	rdlong	local04, fp
1c784     53 93 52 F6 | 	abs	arg01, local01 wc
1c788     1F B2 C6 C9 |  if_b	decod	local07, #31
1c78c     00 B2 06 36 |  if_ae	mov	local07, #0
1c790     DC A6 B0 FD | 	call	#__system___float_fromuns
1c794     59 7B 62 F5 | 	xor	result1, local07
1c798     3D 95 02 F6 | 	mov	arg02, result1
1c79c     56 93 02 F6 | 	mov	arg01, local04
1c7a0     01 96 06 F6 | 	mov	arg03, #1
1c7a4     00 AF B0 FD | 	call	#__system___float_cmp
1c7a8     00 7A 0E F2 | 	cmp	result1, #0 wz
1c7ac     00 B0 26 A6 |  if_e	not	local06, #0
1c7b0     E7 B0 62 FC | 	wrlong	local06, fp
1c7b4     74 02 90 FD | 	jmp	#LR__2413
1c7b8                 | LR__2402
1c7b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1c7b8     08 CE 05 F1 | 	add	fp, #8
1c7bc     E7 B0 02 FB | 	rdlong	local06, fp
1c7c0     08 CE 85 F1 | 	sub	fp, #8
1c7c4     1E B0 0E F2 | 	cmp	local06, #30 wz
1c7c8     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c7cc     30 00 90 5D |  if_ne	jmp	#LR__2403
1c7d0     00 B0 06 F6 | 	mov	local06, #0
1c7d4     E7 AC 02 FB | 	rdlong	local04, fp
1c7d8     53 93 02 F6 | 	mov	arg01, local01
1c7dc     90 A6 B0 FD | 	call	#__system___float_fromuns
1c7e0     3D 95 02 F6 | 	mov	arg02, result1
1c7e4     56 93 02 F6 | 	mov	arg01, local04
1c7e8     01 96 06 F6 | 	mov	arg03, #1
1c7ec     B8 AE B0 FD | 	call	#__system___float_cmp
1c7f0     00 7A 0E F2 | 	cmp	result1, #0 wz
1c7f4     00 B0 26 A6 |  if_e	not	local06, #0
1c7f8     E7 B0 62 FC | 	wrlong	local06, fp
1c7fc     2C 02 90 FD | 	jmp	#LR__2413
1c800                 | LR__2403
1c800                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1c800     08 CE 05 F1 | 	add	fp, #8
1c804     E7 B0 02 FB | 	rdlong	local06, fp
1c808     08 CE 85 F1 | 	sub	fp, #8
1c80c     1C B0 0E F2 | 	cmp	local06, #28 wz
1c810     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c814     3C 00 90 5D |  if_ne	jmp	#LR__2404
1c818     00 B0 06 F6 | 	mov	local06, #0
1c81c     E7 92 02 FB | 	rdlong	arg01, fp
1c820     49 93 52 F6 | 	abs	arg01, arg01 wc
1c824     1F B2 C6 C9 |  if_b	decod	local07, #31
1c828     00 B2 06 36 |  if_ae	mov	local07, #0
1c82c     40 A6 B0 FD | 	call	#__system___float_fromuns
1c830     59 7B 62 F5 | 	xor	result1, local07
1c834     3D 93 02 F6 | 	mov	arg01, result1
1c838     53 95 02 F6 | 	mov	arg02, local01
1c83c     01 96 06 F6 | 	mov	arg03, #1
1c840     64 AE B0 FD | 	call	#__system___float_cmp
1c844     00 7A 0E F2 | 	cmp	result1, #0 wz
1c848     00 B0 26 A6 |  if_e	not	local06, #0
1c84c     E7 B0 62 FC | 	wrlong	local06, fp
1c850     D8 01 90 FD | 	jmp	#LR__2413
1c854                 | LR__2404
1c854                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1c854     08 CE 05 F1 | 	add	fp, #8
1c858     E7 B0 02 FB | 	rdlong	local06, fp
1c85c     08 CE 85 F1 | 	sub	fp, #8
1c860     1C B0 0E F2 | 	cmp	local06, #28 wz
1c864     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c868     18 00 90 5D |  if_ne	jmp	#LR__2405
1c86c     00 B0 06 F6 | 	mov	local06, #0
1c870     E7 AC 02 FB | 	rdlong	local04, fp
1c874     53 AD 0A F2 | 	cmp	local04, local01 wz
1c878     01 B0 66 A6 |  if_e	neg	local06, #1
1c87c     E7 B0 62 FC | 	wrlong	local06, fp
1c880     A8 01 90 FD | 	jmp	#LR__2413
1c884                 | LR__2405
1c884                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1c884     08 CE 05 F1 | 	add	fp, #8
1c888     E7 B0 02 FB | 	rdlong	local06, fp
1c88c     08 CE 85 F1 | 	sub	fp, #8
1c890     1C B0 0E F2 | 	cmp	local06, #28 wz
1c894     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c898     18 00 90 5D |  if_ne	jmp	#LR__2406
1c89c     00 B0 06 F6 | 	mov	local06, #0
1c8a0     E7 AC 02 FB | 	rdlong	local04, fp
1c8a4     53 AD 0A F2 | 	cmp	local04, local01 wz
1c8a8     01 B0 66 A6 |  if_e	neg	local06, #1
1c8ac     E7 B0 62 FC | 	wrlong	local06, fp
1c8b0     78 01 90 FD | 	jmp	#LR__2413
1c8b4                 | LR__2406
1c8b4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1c8b4     08 CE 05 F1 | 	add	fp, #8
1c8b8     E7 B0 02 FB | 	rdlong	local06, fp
1c8bc     08 CE 85 F1 | 	sub	fp, #8
1c8c0     1D B0 0E F2 | 	cmp	local06, #29 wz
1c8c4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c8c8     2C 00 90 5D |  if_ne	jmp	#LR__2407
1c8cc     00 B0 06 F6 | 	mov	local06, #0
1c8d0     E7 92 02 FB | 	rdlong	arg01, fp
1c8d4     98 A5 B0 FD | 	call	#__system___float_fromuns
1c8d8     3D 93 02 F6 | 	mov	arg01, result1
1c8dc     53 95 02 F6 | 	mov	arg02, local01
1c8e0     01 96 06 F6 | 	mov	arg03, #1
1c8e4     C0 AD B0 FD | 	call	#__system___float_cmp
1c8e8     00 7A 0E F2 | 	cmp	result1, #0 wz
1c8ec     00 B0 26 A6 |  if_e	not	local06, #0
1c8f0     E7 B0 62 FC | 	wrlong	local06, fp
1c8f4     34 01 90 FD | 	jmp	#LR__2413
1c8f8                 | LR__2407
1c8f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1c8f8     08 CE 05 F1 | 	add	fp, #8
1c8fc     E7 B0 02 FB | 	rdlong	local06, fp
1c900     08 CE 85 F1 | 	sub	fp, #8
1c904     1D B0 0E F2 | 	cmp	local06, #29 wz
1c908     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c90c     18 00 90 5D |  if_ne	jmp	#LR__2408
1c910     00 B0 06 F6 | 	mov	local06, #0
1c914     E7 AC 02 FB | 	rdlong	local04, fp
1c918     53 AD 0A F2 | 	cmp	local04, local01 wz
1c91c     01 B0 66 A6 |  if_e	neg	local06, #1
1c920     E7 B0 62 FC | 	wrlong	local06, fp
1c924     04 01 90 FD | 	jmp	#LR__2413
1c928                 | LR__2408
1c928                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1c928     08 CE 05 F1 | 	add	fp, #8
1c92c     E7 B0 02 FB | 	rdlong	local06, fp
1c930     08 CE 85 F1 | 	sub	fp, #8
1c934     1D B0 0E F2 | 	cmp	local06, #29 wz
1c938     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c93c     18 00 90 5D |  if_ne	jmp	#LR__2409
1c940     00 B0 06 F6 | 	mov	local06, #0
1c944     E7 AC 02 FB | 	rdlong	local04, fp
1c948     53 AD 0A F2 | 	cmp	local04, local01 wz
1c94c     01 B0 66 A6 |  if_e	neg	local06, #1
1c950     E7 B0 62 FC | 	wrlong	local06, fp
1c954     D4 00 90 FD | 	jmp	#LR__2413
1c958                 | LR__2409
1c958                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1c958     08 CE 05 F1 | 	add	fp, #8
1c95c     E7 B0 02 FB | 	rdlong	local06, fp
1c960     08 CE 85 F1 | 	sub	fp, #8
1c964     2B B0 0E F2 | 	cmp	local06, #43 wz
1c968     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1c96c     28 00 90 5D |  if_ne	jmp	#LR__2410
1c970     00 B0 06 F6 | 	mov	local06, #0
1c974     E7 92 02 FB | 	rdlong	arg01, fp
1c978     64 0E BF FD | 	call	#_convertstring
1c97c     3D 93 02 F6 | 	mov	arg01, result1
1c980     53 95 02 F6 | 	mov	arg02, local01
1c984     44 82 B0 FD | 	call	#__system___string_cmp
1c988     00 7A 0E F2 | 	cmp	result1, #0 wz
1c98c     00 B0 26 A6 |  if_e	not	local06, #0
1c990     E7 B0 62 FC | 	wrlong	local06, fp
1c994     94 00 90 FD | 	jmp	#LR__2413
1c998                 | LR__2410
1c998                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1c998     08 CE 05 F1 | 	add	fp, #8
1c99c     E7 B0 02 FB | 	rdlong	local06, fp
1c9a0     08 CE 85 F1 | 	sub	fp, #8
1c9a4     1F B0 0E F2 | 	cmp	local06, #31 wz
1c9a8     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1c9ac     2C 00 90 5D |  if_ne	jmp	#LR__2411
1c9b0     00 B0 06 F6 | 	mov	local06, #0
1c9b4     E7 AC 02 FB | 	rdlong	local04, fp
1c9b8     53 93 02 F6 | 	mov	arg01, local01
1c9bc     20 0E BF FD | 	call	#_convertstring
1c9c0     3D 95 02 F6 | 	mov	arg02, result1
1c9c4     56 93 02 F6 | 	mov	arg01, local04
1c9c8     00 82 B0 FD | 	call	#__system___string_cmp
1c9cc     00 7A 0E F2 | 	cmp	result1, #0 wz
1c9d0     00 B0 26 A6 |  if_e	not	local06, #0
1c9d4     E7 B0 62 FC | 	wrlong	local06, fp
1c9d8     50 00 90 FD | 	jmp	#LR__2413
1c9dc                 | LR__2411
1c9dc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1c9dc     08 CE 05 F1 | 	add	fp, #8
1c9e0     E7 B0 02 FB | 	rdlong	local06, fp
1c9e4     08 CE 85 F1 | 	sub	fp, #8
1c9e8     2B B0 0E F2 | 	cmp	local06, #43 wz
1c9ec     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1c9f0     34 00 90 5D |  if_ne	jmp	#LR__2412
1c9f4     00 B0 06 F6 | 	mov	local06, #0
1c9f8     E7 92 02 FB | 	rdlong	arg01, fp
1c9fc     E0 0D BF FD | 	call	#_convertstring
1ca00     3D AD 02 F6 | 	mov	local04, result1
1ca04     53 93 02 F6 | 	mov	arg01, local01
1ca08     D4 0D BF FD | 	call	#_convertstring
1ca0c     3D 95 02 F6 | 	mov	arg02, result1
1ca10     56 93 02 F6 | 	mov	arg01, local04
1ca14     B4 81 B0 FD | 	call	#__system___string_cmp
1ca18     00 7A 0E F2 | 	cmp	result1, #0 wz
1ca1c     00 B0 26 A6 |  if_e	not	local06, #0
1ca20     E7 B0 62 FC | 	wrlong	local06, fp
1ca24     04 00 90 FD | 	jmp	#LR__2413
1ca28                 | LR__2412
1ca28     E7 00 68 FC | 	wrlong	#0, fp
1ca2c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1ca2c                 | LR__2413
1ca2c     08 CE 05 F1 | 	add	fp, #8
1ca30     E7 38 68 FC | 	wrlong	#28, fp
1ca34     08 CE 85 F1 | 	sub	fp, #8
1ca38     E7 92 02 F6 | 	mov	arg01, fp
1ca3c     C0 0C BF FD | 	call	#_push
1ca40     E7 F0 03 F6 | 	mov	ptra, fp
1ca44     F2 00 A0 FD | 	call	#popregs_
1ca48                 | _do_eq_ret
1ca48     2D 00 64 FD | 	ret
1ca4c                 | 
1ca4c                 | ' 
1ca4c                 | ' '--------------------------------- fdiv (/) - float divide
1ca4c                 | ' 
1ca4c                 | ' sub do_fdiv 
1ca4c                 | _do_fdiv
1ca4c     04 CA 05 F6 | 	mov	COUNT_, #4
1ca50     E8 00 A0 FD | 	call	#pushregs_
1ca54     18 F0 07 F1 | 	add	ptra, #24
1ca58     14 0C BF FD | 	call	#_pop
1ca5c     3D A7 02 F6 | 	mov	local01, result1
1ca60     3E 95 02 F6 | 	mov	arg02, result2
1ca64     3F 93 02 F6 | 	mov	arg01, result3
1ca68     4A A9 02 F6 | 	mov	local02, arg02
1ca6c     49 AB 02 F6 | 	mov	local03, arg01
1ca70     FC 0B BF FD | 	call	#_pop
1ca74     E7 7A 62 FC | 	wrlong	result1, fp
1ca78     04 CE 05 F1 | 	add	fp, #4
1ca7c     E7 7C 62 FC | 	wrlong	result2, fp
1ca80     04 CE 05 F1 | 	add	fp, #4
1ca84     E7 7E 62 FC | 	wrlong	result3, fp
1ca88                 | ' 
1ca88                 | ' t2=pop()
1ca88                 | ' t1=pop()
1ca88                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1ca88     08 CE 85 F1 | 	sub	fp, #8
1ca8c     1F 7E 0E F2 | 	cmp	result3, #31 wz
1ca90     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1ca94     E7 14 68 AC |  if_e	wrlong	#10, fp
1ca98     08 CE 05 A1 |  if_e	add	fp, #8
1ca9c     E7 FE 69 AC |  if_e	wrlong	#255, fp
1caa0     08 CE 85 A1 |  if_e	sub	fp, #8
1caa4     E0 00 90 AD |  if_e	jmp	#LR__2425
1caa8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1caa8     08 CE 05 F1 | 	add	fp, #8
1caac     E7 94 02 FB | 	rdlong	arg02, fp
1cab0     08 CE 85 F1 | 	sub	fp, #8
1cab4     1C 94 0E F2 | 	cmp	arg02, #28 wz
1cab8     28 00 90 5D |  if_ne	jmp	#LR__2420
1cabc     08 CE 05 F1 | 	add	fp, #8
1cac0     E7 3C 68 FC | 	wrlong	#30, fp
1cac4     08 CE 85 F1 | 	sub	fp, #8
1cac8     E7 92 02 FB | 	rdlong	arg01, fp
1cacc     49 93 52 F6 | 	abs	arg01, arg01 wc
1cad0     1F AC C6 C9 |  if_b	decod	local04, #31
1cad4     00 AC 06 36 |  if_ae	mov	local04, #0
1cad8     94 A3 B0 FD | 	call	#__system___float_fromuns
1cadc     56 7B 62 F5 | 	xor	result1, local04
1cae0     E7 7A 62 FC | 	wrlong	result1, fp
1cae4                 | LR__2420
1cae4                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1cae4     08 CE 05 F1 | 	add	fp, #8
1cae8     E7 94 02 FB | 	rdlong	arg02, fp
1caec     08 CE 85 F1 | 	sub	fp, #8
1caf0     1D 94 0E F2 | 	cmp	arg02, #29 wz
1caf4     18 00 90 5D |  if_ne	jmp	#LR__2421
1caf8     08 CE 05 F1 | 	add	fp, #8
1cafc     E7 3C 68 FC | 	wrlong	#30, fp
1cb00     08 CE 85 F1 | 	sub	fp, #8
1cb04     E7 92 02 FB | 	rdlong	arg01, fp
1cb08     64 A3 B0 FD | 	call	#__system___float_fromuns
1cb0c     E7 7A 62 FC | 	wrlong	result1, fp
1cb10                 | LR__2421
1cb10                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1cb10     1C AA 0E F2 | 	cmp	local03, #28 wz
1cb14     1C 00 90 5D |  if_ne	jmp	#LR__2422
1cb18     1E AA 06 F6 | 	mov	local03, #30
1cb1c     53 93 52 F6 | 	abs	arg01, local01 wc
1cb20     1F AC C6 C9 |  if_b	decod	local04, #31
1cb24     00 AC 06 36 |  if_ae	mov	local04, #0
1cb28     44 A3 B0 FD | 	call	#__system___float_fromuns
1cb2c     56 7B 62 F5 | 	xor	result1, local04
1cb30     3D A7 02 F6 | 	mov	local01, result1
1cb34                 | LR__2422
1cb34                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1cb34     1D AA 0E F2 | 	cmp	local03, #29 wz
1cb38     10 00 90 5D |  if_ne	jmp	#LR__2423
1cb3c     1E AA 06 F6 | 	mov	local03, #30
1cb40     53 93 02 F6 | 	mov	arg01, local01
1cb44     28 A3 B0 FD | 	call	#__system___float_fromuns
1cb48     3D A7 02 F6 | 	mov	local01, result1
1cb4c                 | LR__2423
1cb4c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1cb4c     08 CE 05 F1 | 	add	fp, #8
1cb50     E7 94 02 FB | 	rdlong	arg02, fp
1cb54     08 CE 85 F1 | 	sub	fp, #8
1cb58     1E 94 0E F2 | 	cmp	arg02, #30 wz
1cb5c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cb60     14 00 90 5D |  if_ne	jmp	#LR__2424
1cb64     E7 92 02 FB | 	rdlong	arg01, fp
1cb68     53 95 02 F6 | 	mov	arg02, local01
1cb6c     08 A9 B0 FD | 	call	#__system___float_div
1cb70     E7 7A 62 FC | 	wrlong	result1, fp
1cb74     10 00 90 FD | 	jmp	#LR__2425
1cb78                 | LR__2424
1cb78     E7 16 68 FC | 	wrlong	#11, fp
1cb7c     08 CE 05 F1 | 	add	fp, #8
1cb80     E7 FE 69 FC | 	wrlong	#255, fp
1cb84     08 CE 85 F1 | 	sub	fp, #8
1cb88                 | LR__2425
1cb88     E7 92 02 F6 | 	mov	arg01, fp
1cb8c     70 0B BF FD | 	call	#_push
1cb90     E7 F0 03 F6 | 	mov	ptra, fp
1cb94     F2 00 A0 FD | 	call	#popregs_
1cb98                 | _do_fdiv_ret
1cb98     2D 00 64 FD | 	ret
1cb9c                 | 
1cb9c                 | ' 
1cb9c                 | ' '--------------------------------- greater or equal (>=)
1cb9c                 | ' 
1cb9c                 | ' sub do_ge
1cb9c                 | _do_ge
1cb9c     07 CA 05 F6 | 	mov	COUNT_, #7
1cba0     E8 00 A0 FD | 	call	#pushregs_
1cba4     18 F0 07 F1 | 	add	ptra, #24
1cba8     C4 0A BF FD | 	call	#_pop
1cbac     3D A7 02 F6 | 	mov	local01, result1
1cbb0     3E AD 02 F6 | 	mov	local04, result2
1cbb4     3F AF 02 F6 | 	mov	local05, result3
1cbb8     56 A9 02 F6 | 	mov	local02, local04
1cbbc     57 AB 02 F6 | 	mov	local03, local05
1cbc0     AC 0A BF FD | 	call	#_pop
1cbc4     3F AF 02 F6 | 	mov	local05, result3
1cbc8     E7 7A 62 FC | 	wrlong	result1, fp
1cbcc     04 CE 05 F1 | 	add	fp, #4
1cbd0     E7 7C 62 FC | 	wrlong	result2, fp
1cbd4     04 CE 05 F1 | 	add	fp, #4
1cbd8     E7 AE 62 FC | 	wrlong	local05, fp
1cbdc                 | ' 
1cbdc                 | ' t2=pop()
1cbdc                 | ' t1=pop()
1cbdc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1cbdc     08 CE 85 F1 | 	sub	fp, #8
1cbe0     1F AE 0E F2 | 	cmp	local05, #31 wz
1cbe4     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1cbe8     20 00 90 5D |  if_ne	jmp	#LR__2430
1cbec     00 B0 06 F6 | 	mov	local06, #0
1cbf0     E7 92 02 FB | 	rdlong	arg01, fp
1cbf4     53 95 02 F6 | 	mov	arg02, local01
1cbf8     D0 7F B0 FD | 	call	#__system___string_cmp
1cbfc     00 7A 56 F2 | 	cmps	result1, #0 wc
1cc00     00 B0 26 36 |  if_ae	not	local06, #0
1cc04     E7 B0 62 FC | 	wrlong	local06, fp
1cc08     04 03 90 FD | 	jmp	#LR__2443
1cc0c                 | LR__2430
1cc0c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1cc0c     08 CE 05 F1 | 	add	fp, #8
1cc10     E7 B0 02 FB | 	rdlong	local06, fp
1cc14     08 CE 85 F1 | 	sub	fp, #8
1cc18     1E B0 0E F2 | 	cmp	local06, #30 wz
1cc1c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cc20     24 00 90 5D |  if_ne	jmp	#LR__2431
1cc24     00 B0 06 F6 | 	mov	local06, #0
1cc28     E7 92 02 FB | 	rdlong	arg01, fp
1cc2c     53 95 02 F6 | 	mov	arg02, local01
1cc30     01 96 66 F6 | 	neg	arg03, #1
1cc34     70 AA B0 FD | 	call	#__system___float_cmp
1cc38     00 7A 56 F2 | 	cmps	result1, #0 wc
1cc3c     00 B0 26 36 |  if_ae	not	local06, #0
1cc40     E7 B0 62 FC | 	wrlong	local06, fp
1cc44     C8 02 90 FD | 	jmp	#LR__2443
1cc48                 | LR__2431
1cc48                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1cc48     08 CE 05 F1 | 	add	fp, #8
1cc4c     E7 B0 02 FB | 	rdlong	local06, fp
1cc50     08 CE 85 F1 | 	sub	fp, #8
1cc54     1E B0 0E F2 | 	cmp	local06, #30 wz
1cc58     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cc5c     3C 00 90 5D |  if_ne	jmp	#LR__2432
1cc60     00 B0 06 F6 | 	mov	local06, #0
1cc64     E7 AC 02 FB | 	rdlong	local04, fp
1cc68     53 93 52 F6 | 	abs	arg01, local01 wc
1cc6c     1F B2 C6 C9 |  if_b	decod	local07, #31
1cc70     00 B2 06 36 |  if_ae	mov	local07, #0
1cc74     F8 A1 B0 FD | 	call	#__system___float_fromuns
1cc78     59 7B 62 F5 | 	xor	result1, local07
1cc7c     3D 95 02 F6 | 	mov	arg02, result1
1cc80     56 93 02 F6 | 	mov	arg01, local04
1cc84     01 96 66 F6 | 	neg	arg03, #1
1cc88     1C AA B0 FD | 	call	#__system___float_cmp
1cc8c     00 7A 56 F2 | 	cmps	result1, #0 wc
1cc90     00 B0 26 36 |  if_ae	not	local06, #0
1cc94     E7 B0 62 FC | 	wrlong	local06, fp
1cc98     74 02 90 FD | 	jmp	#LR__2443
1cc9c                 | LR__2432
1cc9c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1cc9c     08 CE 05 F1 | 	add	fp, #8
1cca0     E7 B0 02 FB | 	rdlong	local06, fp
1cca4     08 CE 85 F1 | 	sub	fp, #8
1cca8     1E B0 0E F2 | 	cmp	local06, #30 wz
1ccac     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1ccb0     30 00 90 5D |  if_ne	jmp	#LR__2433
1ccb4     00 B0 06 F6 | 	mov	local06, #0
1ccb8     E7 AC 02 FB | 	rdlong	local04, fp
1ccbc     53 93 02 F6 | 	mov	arg01, local01
1ccc0     AC A1 B0 FD | 	call	#__system___float_fromuns
1ccc4     3D 95 02 F6 | 	mov	arg02, result1
1ccc8     56 93 02 F6 | 	mov	arg01, local04
1cccc     01 96 66 F6 | 	neg	arg03, #1
1ccd0     D4 A9 B0 FD | 	call	#__system___float_cmp
1ccd4     00 7A 56 F2 | 	cmps	result1, #0 wc
1ccd8     00 B0 26 36 |  if_ae	not	local06, #0
1ccdc     E7 B0 62 FC | 	wrlong	local06, fp
1cce0     2C 02 90 FD | 	jmp	#LR__2443
1cce4                 | LR__2433
1cce4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1cce4     08 CE 05 F1 | 	add	fp, #8
1cce8     E7 B0 02 FB | 	rdlong	local06, fp
1ccec     08 CE 85 F1 | 	sub	fp, #8
1ccf0     1C B0 0E F2 | 	cmp	local06, #28 wz
1ccf4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1ccf8     3C 00 90 5D |  if_ne	jmp	#LR__2434
1ccfc     00 B0 06 F6 | 	mov	local06, #0
1cd00     E7 92 02 FB | 	rdlong	arg01, fp
1cd04     49 93 52 F6 | 	abs	arg01, arg01 wc
1cd08     1F B2 C6 C9 |  if_b	decod	local07, #31
1cd0c     00 B2 06 36 |  if_ae	mov	local07, #0
1cd10     5C A1 B0 FD | 	call	#__system___float_fromuns
1cd14     59 7B 62 F5 | 	xor	result1, local07
1cd18     3D 93 02 F6 | 	mov	arg01, result1
1cd1c     53 95 02 F6 | 	mov	arg02, local01
1cd20     01 96 66 F6 | 	neg	arg03, #1
1cd24     80 A9 B0 FD | 	call	#__system___float_cmp
1cd28     00 7A 56 F2 | 	cmps	result1, #0 wc
1cd2c     00 B0 26 36 |  if_ae	not	local06, #0
1cd30     E7 B0 62 FC | 	wrlong	local06, fp
1cd34     D8 01 90 FD | 	jmp	#LR__2443
1cd38                 | LR__2434
1cd38                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1cd38     08 CE 05 F1 | 	add	fp, #8
1cd3c     E7 B0 02 FB | 	rdlong	local06, fp
1cd40     08 CE 85 F1 | 	sub	fp, #8
1cd44     1C B0 0E F2 | 	cmp	local06, #28 wz
1cd48     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cd4c     18 00 90 5D |  if_ne	jmp	#LR__2435
1cd50     00 B0 06 F6 | 	mov	local06, #0
1cd54     E7 AC 02 FB | 	rdlong	local04, fp
1cd58     53 AD 52 F2 | 	cmps	local04, local01 wc
1cd5c     01 B0 66 36 |  if_ae	neg	local06, #1
1cd60     E7 B0 62 FC | 	wrlong	local06, fp
1cd64     A8 01 90 FD | 	jmp	#LR__2443
1cd68                 | LR__2435
1cd68                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1cd68     08 CE 05 F1 | 	add	fp, #8
1cd6c     E7 B0 02 FB | 	rdlong	local06, fp
1cd70     08 CE 85 F1 | 	sub	fp, #8
1cd74     1C B0 0E F2 | 	cmp	local06, #28 wz
1cd78     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cd7c     18 00 90 5D |  if_ne	jmp	#LR__2436
1cd80     00 B0 06 F6 | 	mov	local06, #0
1cd84     E7 AC 02 FB | 	rdlong	local04, fp
1cd88     53 AD 52 F2 | 	cmps	local04, local01 wc
1cd8c     01 B0 66 36 |  if_ae	neg	local06, #1
1cd90     E7 B0 62 FC | 	wrlong	local06, fp
1cd94     78 01 90 FD | 	jmp	#LR__2443
1cd98                 | LR__2436
1cd98                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1cd98     08 CE 05 F1 | 	add	fp, #8
1cd9c     E7 B0 02 FB | 	rdlong	local06, fp
1cda0     08 CE 85 F1 | 	sub	fp, #8
1cda4     1D B0 0E F2 | 	cmp	local06, #29 wz
1cda8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cdac     2C 00 90 5D |  if_ne	jmp	#LR__2437
1cdb0     00 B0 06 F6 | 	mov	local06, #0
1cdb4     E7 92 02 FB | 	rdlong	arg01, fp
1cdb8     B4 A0 B0 FD | 	call	#__system___float_fromuns
1cdbc     3D 93 02 F6 | 	mov	arg01, result1
1cdc0     53 95 02 F6 | 	mov	arg02, local01
1cdc4     01 96 66 F6 | 	neg	arg03, #1
1cdc8     DC A8 B0 FD | 	call	#__system___float_cmp
1cdcc     00 7A 56 F2 | 	cmps	result1, #0 wc
1cdd0     00 B0 26 36 |  if_ae	not	local06, #0
1cdd4     E7 B0 62 FC | 	wrlong	local06, fp
1cdd8     34 01 90 FD | 	jmp	#LR__2443
1cddc                 | LR__2437
1cddc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1cddc     08 CE 05 F1 | 	add	fp, #8
1cde0     E7 B0 02 FB | 	rdlong	local06, fp
1cde4     08 CE 85 F1 | 	sub	fp, #8
1cde8     1D B0 0E F2 | 	cmp	local06, #29 wz
1cdec     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cdf0     18 00 90 5D |  if_ne	jmp	#LR__2438
1cdf4     00 B0 06 F6 | 	mov	local06, #0
1cdf8     E7 AC 02 FB | 	rdlong	local04, fp
1cdfc     53 AD 52 F2 | 	cmps	local04, local01 wc
1ce00     01 B0 66 36 |  if_ae	neg	local06, #1
1ce04     E7 B0 62 FC | 	wrlong	local06, fp
1ce08     04 01 90 FD | 	jmp	#LR__2443
1ce0c                 | LR__2438
1ce0c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1ce0c     08 CE 05 F1 | 	add	fp, #8
1ce10     E7 B0 02 FB | 	rdlong	local06, fp
1ce14     08 CE 85 F1 | 	sub	fp, #8
1ce18     1D B0 0E F2 | 	cmp	local06, #29 wz
1ce1c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1ce20     18 00 90 5D |  if_ne	jmp	#LR__2439
1ce24     00 B0 06 F6 | 	mov	local06, #0
1ce28     E7 AC 02 FB | 	rdlong	local04, fp
1ce2c     53 AD 12 F2 | 	cmp	local04, local01 wc
1ce30     01 B0 66 36 |  if_ae	neg	local06, #1
1ce34     E7 B0 62 FC | 	wrlong	local06, fp
1ce38     D4 00 90 FD | 	jmp	#LR__2443
1ce3c                 | LR__2439
1ce3c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1ce3c     08 CE 05 F1 | 	add	fp, #8
1ce40     E7 B0 02 FB | 	rdlong	local06, fp
1ce44     08 CE 85 F1 | 	sub	fp, #8
1ce48     2B B0 0E F2 | 	cmp	local06, #43 wz
1ce4c     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1ce50     28 00 90 5D |  if_ne	jmp	#LR__2440
1ce54     00 B0 06 F6 | 	mov	local06, #0
1ce58     E7 92 02 FB | 	rdlong	arg01, fp
1ce5c     80 09 BF FD | 	call	#_convertstring
1ce60     3D 93 02 F6 | 	mov	arg01, result1
1ce64     53 95 02 F6 | 	mov	arg02, local01
1ce68     60 7D B0 FD | 	call	#__system___string_cmp
1ce6c     00 7A 56 F2 | 	cmps	result1, #0 wc
1ce70     00 B0 26 36 |  if_ae	not	local06, #0
1ce74     E7 B0 62 FC | 	wrlong	local06, fp
1ce78     94 00 90 FD | 	jmp	#LR__2443
1ce7c                 | LR__2440
1ce7c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1ce7c     08 CE 05 F1 | 	add	fp, #8
1ce80     E7 B0 02 FB | 	rdlong	local06, fp
1ce84     08 CE 85 F1 | 	sub	fp, #8
1ce88     1F B0 0E F2 | 	cmp	local06, #31 wz
1ce8c     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1ce90     2C 00 90 5D |  if_ne	jmp	#LR__2441
1ce94     00 B0 06 F6 | 	mov	local06, #0
1ce98     E7 AC 02 FB | 	rdlong	local04, fp
1ce9c     53 93 02 F6 | 	mov	arg01, local01
1cea0     3C 09 BF FD | 	call	#_convertstring
1cea4     3D 95 02 F6 | 	mov	arg02, result1
1cea8     56 93 02 F6 | 	mov	arg01, local04
1ceac     1C 7D B0 FD | 	call	#__system___string_cmp
1ceb0     00 7A 56 F2 | 	cmps	result1, #0 wc
1ceb4     00 B0 26 36 |  if_ae	not	local06, #0
1ceb8     E7 B0 62 FC | 	wrlong	local06, fp
1cebc     50 00 90 FD | 	jmp	#LR__2443
1cec0                 | LR__2441
1cec0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1cec0     08 CE 05 F1 | 	add	fp, #8
1cec4     E7 B0 02 FB | 	rdlong	local06, fp
1cec8     08 CE 85 F1 | 	sub	fp, #8
1cecc     2B B0 0E F2 | 	cmp	local06, #43 wz
1ced0     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1ced4     34 00 90 5D |  if_ne	jmp	#LR__2442
1ced8     00 B0 06 F6 | 	mov	local06, #0
1cedc     E7 92 02 FB | 	rdlong	arg01, fp
1cee0     FC 08 BF FD | 	call	#_convertstring
1cee4     3D AD 02 F6 | 	mov	local04, result1
1cee8     53 93 02 F6 | 	mov	arg01, local01
1ceec     F0 08 BF FD | 	call	#_convertstring
1cef0     3D 95 02 F6 | 	mov	arg02, result1
1cef4     56 93 02 F6 | 	mov	arg01, local04
1cef8     D0 7C B0 FD | 	call	#__system___string_cmp
1cefc     00 7A 56 F2 | 	cmps	result1, #0 wc
1cf00     00 B0 26 36 |  if_ae	not	local06, #0
1cf04     E7 B0 62 FC | 	wrlong	local06, fp
1cf08     04 00 90 FD | 	jmp	#LR__2443
1cf0c                 | LR__2442
1cf0c     E7 00 68 FC | 	wrlong	#0, fp
1cf10                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1cf10                 | LR__2443
1cf10     08 CE 05 F1 | 	add	fp, #8
1cf14     E7 38 68 FC | 	wrlong	#28, fp
1cf18     08 CE 85 F1 | 	sub	fp, #8
1cf1c                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1cf1c     E7 B0 0A FB | 	rdlong	local06, fp wz
1cf20     E7 02 68 5C |  if_ne	wrlong	#1, fp
1cf24     E7 92 02 F6 | 	mov	arg01, fp
1cf28     D4 07 BF FD | 	call	#_push
1cf2c     E7 F0 03 F6 | 	mov	ptra, fp
1cf30     F2 00 A0 FD | 	call	#popregs_
1cf34                 | _do_ge_ret
1cf34     2D 00 64 FD | 	ret
1cf38                 | 
1cf38                 | ' 
1cf38                 | ' '--------------------------------- greater than (>)
1cf38                 | ' 
1cf38                 | ' sub do_gt
1cf38                 | _do_gt
1cf38     07 CA 05 F6 | 	mov	COUNT_, #7
1cf3c     E8 00 A0 FD | 	call	#pushregs_
1cf40     18 F0 07 F1 | 	add	ptra, #24
1cf44     28 07 BF FD | 	call	#_pop
1cf48     3D A7 02 F6 | 	mov	local01, result1
1cf4c     3E AD 02 F6 | 	mov	local04, result2
1cf50     3F AF 02 F6 | 	mov	local05, result3
1cf54     56 A9 02 F6 | 	mov	local02, local04
1cf58     57 AB 02 F6 | 	mov	local03, local05
1cf5c     10 07 BF FD | 	call	#_pop
1cf60     3F AF 02 F6 | 	mov	local05, result3
1cf64     E7 7A 62 FC | 	wrlong	result1, fp
1cf68     04 CE 05 F1 | 	add	fp, #4
1cf6c     E7 7C 62 FC | 	wrlong	result2, fp
1cf70     04 CE 05 F1 | 	add	fp, #4
1cf74     E7 AE 62 FC | 	wrlong	local05, fp
1cf78                 | ' 
1cf78                 | ' t2=pop()
1cf78                 | ' t1=pop()
1cf78                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1cf78     08 CE 85 F1 | 	sub	fp, #8
1cf7c     1F AE 0E F2 | 	cmp	local05, #31 wz
1cf80     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1cf84     20 00 90 5D |  if_ne	jmp	#LR__2450
1cf88     00 B0 06 F6 | 	mov	local06, #0
1cf8c     E7 92 02 FB | 	rdlong	arg01, fp
1cf90     53 95 02 F6 | 	mov	arg02, local01
1cf94     34 7C B0 FD | 	call	#__system___string_cmp
1cf98     01 7A 56 F2 | 	cmps	result1, #1 wc
1cf9c     00 B0 26 36 |  if_ae	not	local06, #0
1cfa0     E7 B0 62 FC | 	wrlong	local06, fp
1cfa4     04 03 90 FD | 	jmp	#LR__2463
1cfa8                 | LR__2450
1cfa8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1cfa8     08 CE 05 F1 | 	add	fp, #8
1cfac     E7 B0 02 FB | 	rdlong	local06, fp
1cfb0     08 CE 85 F1 | 	sub	fp, #8
1cfb4     1E B0 0E F2 | 	cmp	local06, #30 wz
1cfb8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cfbc     24 00 90 5D |  if_ne	jmp	#LR__2451
1cfc0     00 B0 06 F6 | 	mov	local06, #0
1cfc4     E7 92 02 FB | 	rdlong	arg01, fp
1cfc8     53 95 02 F6 | 	mov	arg02, local01
1cfcc     01 96 66 F6 | 	neg	arg03, #1
1cfd0     D4 A6 B0 FD | 	call	#__system___float_cmp
1cfd4     01 7A 56 F2 | 	cmps	result1, #1 wc
1cfd8     00 B0 26 36 |  if_ae	not	local06, #0
1cfdc     E7 B0 62 FC | 	wrlong	local06, fp
1cfe0     C8 02 90 FD | 	jmp	#LR__2463
1cfe4                 | LR__2451
1cfe4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1cfe4     08 CE 05 F1 | 	add	fp, #8
1cfe8     E7 B0 02 FB | 	rdlong	local06, fp
1cfec     08 CE 85 F1 | 	sub	fp, #8
1cff0     1E B0 0E F2 | 	cmp	local06, #30 wz
1cff4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cff8     3C 00 90 5D |  if_ne	jmp	#LR__2452
1cffc     00 B0 06 F6 | 	mov	local06, #0
1d000     E7 AC 02 FB | 	rdlong	local04, fp
1d004     53 93 52 F6 | 	abs	arg01, local01 wc
1d008     1F B2 C6 C9 |  if_b	decod	local07, #31
1d00c     00 B2 06 36 |  if_ae	mov	local07, #0
1d010     5C 9E B0 FD | 	call	#__system___float_fromuns
1d014     59 7B 62 F5 | 	xor	result1, local07
1d018     3D 95 02 F6 | 	mov	arg02, result1
1d01c     56 93 02 F6 | 	mov	arg01, local04
1d020     01 96 66 F6 | 	neg	arg03, #1
1d024     80 A6 B0 FD | 	call	#__system___float_cmp
1d028     01 7A 56 F2 | 	cmps	result1, #1 wc
1d02c     00 B0 26 36 |  if_ae	not	local06, #0
1d030     E7 B0 62 FC | 	wrlong	local06, fp
1d034     74 02 90 FD | 	jmp	#LR__2463
1d038                 | LR__2452
1d038                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1d038     08 CE 05 F1 | 	add	fp, #8
1d03c     E7 B0 02 FB | 	rdlong	local06, fp
1d040     08 CE 85 F1 | 	sub	fp, #8
1d044     1E B0 0E F2 | 	cmp	local06, #30 wz
1d048     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d04c     30 00 90 5D |  if_ne	jmp	#LR__2453
1d050     00 B0 06 F6 | 	mov	local06, #0
1d054     E7 AC 02 FB | 	rdlong	local04, fp
1d058     53 93 02 F6 | 	mov	arg01, local01
1d05c     10 9E B0 FD | 	call	#__system___float_fromuns
1d060     3D 95 02 F6 | 	mov	arg02, result1
1d064     56 93 02 F6 | 	mov	arg01, local04
1d068     01 96 66 F6 | 	neg	arg03, #1
1d06c     38 A6 B0 FD | 	call	#__system___float_cmp
1d070     01 7A 56 F2 | 	cmps	result1, #1 wc
1d074     00 B0 26 36 |  if_ae	not	local06, #0
1d078     E7 B0 62 FC | 	wrlong	local06, fp
1d07c     2C 02 90 FD | 	jmp	#LR__2463
1d080                 | LR__2453
1d080                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1d080     08 CE 05 F1 | 	add	fp, #8
1d084     E7 B0 02 FB | 	rdlong	local06, fp
1d088     08 CE 85 F1 | 	sub	fp, #8
1d08c     1C B0 0E F2 | 	cmp	local06, #28 wz
1d090     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d094     3C 00 90 5D |  if_ne	jmp	#LR__2454
1d098     00 B0 06 F6 | 	mov	local06, #0
1d09c     E7 92 02 FB | 	rdlong	arg01, fp
1d0a0     49 93 52 F6 | 	abs	arg01, arg01 wc
1d0a4     1F B2 C6 C9 |  if_b	decod	local07, #31
1d0a8     00 B2 06 36 |  if_ae	mov	local07, #0
1d0ac     C0 9D B0 FD | 	call	#__system___float_fromuns
1d0b0     59 7B 62 F5 | 	xor	result1, local07
1d0b4     3D 93 02 F6 | 	mov	arg01, result1
1d0b8     53 95 02 F6 | 	mov	arg02, local01
1d0bc     01 96 66 F6 | 	neg	arg03, #1
1d0c0     E4 A5 B0 FD | 	call	#__system___float_cmp
1d0c4     01 7A 56 F2 | 	cmps	result1, #1 wc
1d0c8     00 B0 26 36 |  if_ae	not	local06, #0
1d0cc     E7 B0 62 FC | 	wrlong	local06, fp
1d0d0     D8 01 90 FD | 	jmp	#LR__2463
1d0d4                 | LR__2454
1d0d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1d0d4     08 CE 05 F1 | 	add	fp, #8
1d0d8     E7 B0 02 FB | 	rdlong	local06, fp
1d0dc     08 CE 85 F1 | 	sub	fp, #8
1d0e0     1C B0 0E F2 | 	cmp	local06, #28 wz
1d0e4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d0e8     18 00 90 5D |  if_ne	jmp	#LR__2455
1d0ec     00 B0 06 F6 | 	mov	local06, #0
1d0f0     E7 AC 02 FB | 	rdlong	local04, fp
1d0f4     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d0f8     01 B0 66 16 |  if_a	neg	local06, #1
1d0fc     E7 B0 62 FC | 	wrlong	local06, fp
1d100     A8 01 90 FD | 	jmp	#LR__2463
1d104                 | LR__2455
1d104                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1d104     08 CE 05 F1 | 	add	fp, #8
1d108     E7 B0 02 FB | 	rdlong	local06, fp
1d10c     08 CE 85 F1 | 	sub	fp, #8
1d110     1C B0 0E F2 | 	cmp	local06, #28 wz
1d114     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d118     18 00 90 5D |  if_ne	jmp	#LR__2456
1d11c     00 B0 06 F6 | 	mov	local06, #0
1d120     E7 AC 02 FB | 	rdlong	local04, fp
1d124     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d128     01 B0 66 16 |  if_a	neg	local06, #1
1d12c     E7 B0 62 FC | 	wrlong	local06, fp
1d130     78 01 90 FD | 	jmp	#LR__2463
1d134                 | LR__2456
1d134                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1d134     08 CE 05 F1 | 	add	fp, #8
1d138     E7 B0 02 FB | 	rdlong	local06, fp
1d13c     08 CE 85 F1 | 	sub	fp, #8
1d140     1D B0 0E F2 | 	cmp	local06, #29 wz
1d144     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d148     2C 00 90 5D |  if_ne	jmp	#LR__2457
1d14c     00 B0 06 F6 | 	mov	local06, #0
1d150     E7 92 02 FB | 	rdlong	arg01, fp
1d154     18 9D B0 FD | 	call	#__system___float_fromuns
1d158     3D 93 02 F6 | 	mov	arg01, result1
1d15c     53 95 02 F6 | 	mov	arg02, local01
1d160     01 96 66 F6 | 	neg	arg03, #1
1d164     40 A5 B0 FD | 	call	#__system___float_cmp
1d168     01 7A 56 F2 | 	cmps	result1, #1 wc
1d16c     00 B0 26 36 |  if_ae	not	local06, #0
1d170     E7 B0 62 FC | 	wrlong	local06, fp
1d174     34 01 90 FD | 	jmp	#LR__2463
1d178                 | LR__2457
1d178                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1d178     08 CE 05 F1 | 	add	fp, #8
1d17c     E7 B0 02 FB | 	rdlong	local06, fp
1d180     08 CE 85 F1 | 	sub	fp, #8
1d184     1D B0 0E F2 | 	cmp	local06, #29 wz
1d188     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d18c     18 00 90 5D |  if_ne	jmp	#LR__2458
1d190     00 B0 06 F6 | 	mov	local06, #0
1d194     E7 AC 02 FB | 	rdlong	local04, fp
1d198     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d19c     01 B0 66 16 |  if_a	neg	local06, #1
1d1a0     E7 B0 62 FC | 	wrlong	local06, fp
1d1a4     04 01 90 FD | 	jmp	#LR__2463
1d1a8                 | LR__2458
1d1a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1d1a8     08 CE 05 F1 | 	add	fp, #8
1d1ac     E7 B0 02 FB | 	rdlong	local06, fp
1d1b0     08 CE 85 F1 | 	sub	fp, #8
1d1b4     1D B0 0E F2 | 	cmp	local06, #29 wz
1d1b8     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d1bc     18 00 90 5D |  if_ne	jmp	#LR__2459
1d1c0     00 B0 06 F6 | 	mov	local06, #0
1d1c4     E7 AC 02 FB | 	rdlong	local04, fp
1d1c8     53 AD 1A F2 | 	cmp	local04, local01 wcz
1d1cc     01 B0 66 16 |  if_a	neg	local06, #1
1d1d0     E7 B0 62 FC | 	wrlong	local06, fp
1d1d4     D4 00 90 FD | 	jmp	#LR__2463
1d1d8                 | LR__2459
1d1d8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1d1d8     08 CE 05 F1 | 	add	fp, #8
1d1dc     E7 B0 02 FB | 	rdlong	local06, fp
1d1e0     08 CE 85 F1 | 	sub	fp, #8
1d1e4     2B B0 0E F2 | 	cmp	local06, #43 wz
1d1e8     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d1ec     28 00 90 5D |  if_ne	jmp	#LR__2460
1d1f0     00 B0 06 F6 | 	mov	local06, #0
1d1f4     E7 92 02 FB | 	rdlong	arg01, fp
1d1f8     E4 05 BF FD | 	call	#_convertstring
1d1fc     3D 93 02 F6 | 	mov	arg01, result1
1d200     53 95 02 F6 | 	mov	arg02, local01
1d204     C4 79 B0 FD | 	call	#__system___string_cmp
1d208     01 7A 56 F2 | 	cmps	result1, #1 wc
1d20c     00 B0 26 36 |  if_ae	not	local06, #0
1d210     E7 B0 62 FC | 	wrlong	local06, fp
1d214     94 00 90 FD | 	jmp	#LR__2463
1d218                 | LR__2460
1d218                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1d218     08 CE 05 F1 | 	add	fp, #8
1d21c     E7 B0 02 FB | 	rdlong	local06, fp
1d220     08 CE 85 F1 | 	sub	fp, #8
1d224     1F B0 0E F2 | 	cmp	local06, #31 wz
1d228     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d22c     2C 00 90 5D |  if_ne	jmp	#LR__2461
1d230     00 B0 06 F6 | 	mov	local06, #0
1d234     E7 AC 02 FB | 	rdlong	local04, fp
1d238     53 93 02 F6 | 	mov	arg01, local01
1d23c     A0 05 BF FD | 	call	#_convertstring
1d240     3D 95 02 F6 | 	mov	arg02, result1
1d244     56 93 02 F6 | 	mov	arg01, local04
1d248     80 79 B0 FD | 	call	#__system___string_cmp
1d24c     01 7A 56 F2 | 	cmps	result1, #1 wc
1d250     00 B0 26 36 |  if_ae	not	local06, #0
1d254     E7 B0 62 FC | 	wrlong	local06, fp
1d258     50 00 90 FD | 	jmp	#LR__2463
1d25c                 | LR__2461
1d25c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1d25c     08 CE 05 F1 | 	add	fp, #8
1d260     E7 B0 02 FB | 	rdlong	local06, fp
1d264     08 CE 85 F1 | 	sub	fp, #8
1d268     2B B0 0E F2 | 	cmp	local06, #43 wz
1d26c     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d270     34 00 90 5D |  if_ne	jmp	#LR__2462
1d274     00 B0 06 F6 | 	mov	local06, #0
1d278     E7 92 02 FB | 	rdlong	arg01, fp
1d27c     60 05 BF FD | 	call	#_convertstring
1d280     3D AD 02 F6 | 	mov	local04, result1
1d284     53 93 02 F6 | 	mov	arg01, local01
1d288     54 05 BF FD | 	call	#_convertstring
1d28c     3D 95 02 F6 | 	mov	arg02, result1
1d290     56 93 02 F6 | 	mov	arg01, local04
1d294     34 79 B0 FD | 	call	#__system___string_cmp
1d298     01 7A 56 F2 | 	cmps	result1, #1 wc
1d29c     00 B0 26 36 |  if_ae	not	local06, #0
1d2a0     E7 B0 62 FC | 	wrlong	local06, fp
1d2a4     04 00 90 FD | 	jmp	#LR__2463
1d2a8                 | LR__2462
1d2a8     E7 00 68 FC | 	wrlong	#0, fp
1d2ac                 | LR__2463
1d2ac     08 CE 05 F1 | 	add	fp, #8
1d2b0     E7 38 68 FC | 	wrlong	#28, fp
1d2b4     08 CE 85 F1 | 	sub	fp, #8
1d2b8                 | ' t1.result.uresult=0
1d2b8                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d2b8     E7 B0 0A FB | 	rdlong	local06, fp wz
1d2bc     E7 02 68 5C |  if_ne	wrlong	#1, fp
1d2c0     E7 92 02 F6 | 	mov	arg01, fp
1d2c4     38 04 BF FD | 	call	#_push
1d2c8     E7 F0 03 F6 | 	mov	ptra, fp
1d2cc     F2 00 A0 FD | 	call	#popregs_
1d2d0                 | _do_gt_ret
1d2d0     2D 00 64 FD | 	ret
1d2d4                 | 
1d2d4                 | ' 
1d2d4                 | ' '--------------------------------- less or equal (<=)
1d2d4                 | ' 
1d2d4                 | ' sub do_le
1d2d4                 | _do_le
1d2d4     07 CA 05 F6 | 	mov	COUNT_, #7
1d2d8     E8 00 A0 FD | 	call	#pushregs_
1d2dc     18 F0 07 F1 | 	add	ptra, #24
1d2e0     8C 03 BF FD | 	call	#_pop
1d2e4     3D A7 02 F6 | 	mov	local01, result1
1d2e8     3E AD 02 F6 | 	mov	local04, result2
1d2ec     3F AF 02 F6 | 	mov	local05, result3
1d2f0     56 A9 02 F6 | 	mov	local02, local04
1d2f4     57 AB 02 F6 | 	mov	local03, local05
1d2f8     74 03 BF FD | 	call	#_pop
1d2fc     3F AF 02 F6 | 	mov	local05, result3
1d300     E7 7A 62 FC | 	wrlong	result1, fp
1d304     04 CE 05 F1 | 	add	fp, #4
1d308     E7 7C 62 FC | 	wrlong	result2, fp
1d30c     04 CE 05 F1 | 	add	fp, #4
1d310     E7 AE 62 FC | 	wrlong	local05, fp
1d314                 | ' 
1d314                 | ' t2=pop()
1d314                 | ' t1=pop()
1d314                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1d314     08 CE 85 F1 | 	sub	fp, #8
1d318     1F AE 0E F2 | 	cmp	local05, #31 wz
1d31c     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d320     20 00 90 5D |  if_ne	jmp	#LR__2470
1d324     00 B0 06 F6 | 	mov	local06, #0
1d328     E7 92 02 FB | 	rdlong	arg01, fp
1d32c     53 95 02 F6 | 	mov	arg02, local01
1d330     98 78 B0 FD | 	call	#__system___string_cmp
1d334     01 7A 56 F2 | 	cmps	result1, #1 wc
1d338     00 B0 26 C6 |  if_b	not	local06, #0
1d33c     E7 B0 62 FC | 	wrlong	local06, fp
1d340     04 03 90 FD | 	jmp	#LR__2483
1d344                 | LR__2470
1d344                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1d344     08 CE 05 F1 | 	add	fp, #8
1d348     E7 B0 02 FB | 	rdlong	local06, fp
1d34c     08 CE 85 F1 | 	sub	fp, #8
1d350     1E B0 0E F2 | 	cmp	local06, #30 wz
1d354     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d358     24 00 90 5D |  if_ne	jmp	#LR__2471
1d35c     00 B0 06 F6 | 	mov	local06, #0
1d360     E7 92 02 FB | 	rdlong	arg01, fp
1d364     53 95 02 F6 | 	mov	arg02, local01
1d368     01 96 06 F6 | 	mov	arg03, #1
1d36c     38 A3 B0 FD | 	call	#__system___float_cmp
1d370     01 7A 56 F2 | 	cmps	result1, #1 wc
1d374     00 B0 26 C6 |  if_b	not	local06, #0
1d378     E7 B0 62 FC | 	wrlong	local06, fp
1d37c     C8 02 90 FD | 	jmp	#LR__2483
1d380                 | LR__2471
1d380                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1d380     08 CE 05 F1 | 	add	fp, #8
1d384     E7 B0 02 FB | 	rdlong	local06, fp
1d388     08 CE 85 F1 | 	sub	fp, #8
1d38c     1E B0 0E F2 | 	cmp	local06, #30 wz
1d390     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d394     3C 00 90 5D |  if_ne	jmp	#LR__2472
1d398     00 B0 06 F6 | 	mov	local06, #0
1d39c     E7 AC 02 FB | 	rdlong	local04, fp
1d3a0     53 93 52 F6 | 	abs	arg01, local01 wc
1d3a4     1F B2 C6 C9 |  if_b	decod	local07, #31
1d3a8     00 B2 06 36 |  if_ae	mov	local07, #0
1d3ac     C0 9A B0 FD | 	call	#__system___float_fromuns
1d3b0     59 7B 62 F5 | 	xor	result1, local07
1d3b4     3D 95 02 F6 | 	mov	arg02, result1
1d3b8     56 93 02 F6 | 	mov	arg01, local04
1d3bc     01 96 06 F6 | 	mov	arg03, #1
1d3c0     E4 A2 B0 FD | 	call	#__system___float_cmp
1d3c4     01 7A 56 F2 | 	cmps	result1, #1 wc
1d3c8     00 B0 26 C6 |  if_b	not	local06, #0
1d3cc     E7 B0 62 FC | 	wrlong	local06, fp
1d3d0     74 02 90 FD | 	jmp	#LR__2483
1d3d4                 | LR__2472
1d3d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1d3d4     08 CE 05 F1 | 	add	fp, #8
1d3d8     E7 B0 02 FB | 	rdlong	local06, fp
1d3dc     08 CE 85 F1 | 	sub	fp, #8
1d3e0     1E B0 0E F2 | 	cmp	local06, #30 wz
1d3e4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d3e8     30 00 90 5D |  if_ne	jmp	#LR__2473
1d3ec     00 B0 06 F6 | 	mov	local06, #0
1d3f0     E7 AC 02 FB | 	rdlong	local04, fp
1d3f4     53 93 02 F6 | 	mov	arg01, local01
1d3f8     74 9A B0 FD | 	call	#__system___float_fromuns
1d3fc     3D 95 02 F6 | 	mov	arg02, result1
1d400     56 93 02 F6 | 	mov	arg01, local04
1d404     01 96 06 F6 | 	mov	arg03, #1
1d408     9C A2 B0 FD | 	call	#__system___float_cmp
1d40c     01 7A 56 F2 | 	cmps	result1, #1 wc
1d410     00 B0 26 C6 |  if_b	not	local06, #0
1d414     E7 B0 62 FC | 	wrlong	local06, fp
1d418     2C 02 90 FD | 	jmp	#LR__2483
1d41c                 | LR__2473
1d41c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1d41c     08 CE 05 F1 | 	add	fp, #8
1d420     E7 B0 02 FB | 	rdlong	local06, fp
1d424     08 CE 85 F1 | 	sub	fp, #8
1d428     1C B0 0E F2 | 	cmp	local06, #28 wz
1d42c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d430     3C 00 90 5D |  if_ne	jmp	#LR__2474
1d434     00 B0 06 F6 | 	mov	local06, #0
1d438     E7 92 02 FB | 	rdlong	arg01, fp
1d43c     49 93 52 F6 | 	abs	arg01, arg01 wc
1d440     1F B2 C6 C9 |  if_b	decod	local07, #31
1d444     00 B2 06 36 |  if_ae	mov	local07, #0
1d448     24 9A B0 FD | 	call	#__system___float_fromuns
1d44c     59 7B 62 F5 | 	xor	result1, local07
1d450     3D 93 02 F6 | 	mov	arg01, result1
1d454     53 95 02 F6 | 	mov	arg02, local01
1d458     01 96 06 F6 | 	mov	arg03, #1
1d45c     48 A2 B0 FD | 	call	#__system___float_cmp
1d460     01 7A 56 F2 | 	cmps	result1, #1 wc
1d464     00 B0 26 C6 |  if_b	not	local06, #0
1d468     E7 B0 62 FC | 	wrlong	local06, fp
1d46c     D8 01 90 FD | 	jmp	#LR__2483
1d470                 | LR__2474
1d470                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1d470     08 CE 05 F1 | 	add	fp, #8
1d474     E7 B0 02 FB | 	rdlong	local06, fp
1d478     08 CE 85 F1 | 	sub	fp, #8
1d47c     1C B0 0E F2 | 	cmp	local06, #28 wz
1d480     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d484     18 00 90 5D |  if_ne	jmp	#LR__2475
1d488     00 B0 06 F6 | 	mov	local06, #0
1d48c     E7 AC 02 FB | 	rdlong	local04, fp
1d490     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d494     01 B0 66 E6 |  if_be	neg	local06, #1
1d498     E7 B0 62 FC | 	wrlong	local06, fp
1d49c     A8 01 90 FD | 	jmp	#LR__2483
1d4a0                 | LR__2475
1d4a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1d4a0     08 CE 05 F1 | 	add	fp, #8
1d4a4     E7 B0 02 FB | 	rdlong	local06, fp
1d4a8     08 CE 85 F1 | 	sub	fp, #8
1d4ac     1C B0 0E F2 | 	cmp	local06, #28 wz
1d4b0     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d4b4     18 00 90 5D |  if_ne	jmp	#LR__2476
1d4b8     00 B0 06 F6 | 	mov	local06, #0
1d4bc     E7 AC 02 FB | 	rdlong	local04, fp
1d4c0     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d4c4     01 B0 66 E6 |  if_be	neg	local06, #1
1d4c8     E7 B0 62 FC | 	wrlong	local06, fp
1d4cc     78 01 90 FD | 	jmp	#LR__2483
1d4d0                 | LR__2476
1d4d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1d4d0     08 CE 05 F1 | 	add	fp, #8
1d4d4     E7 B0 02 FB | 	rdlong	local06, fp
1d4d8     08 CE 85 F1 | 	sub	fp, #8
1d4dc     1D B0 0E F2 | 	cmp	local06, #29 wz
1d4e0     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d4e4     2C 00 90 5D |  if_ne	jmp	#LR__2477
1d4e8     00 B0 06 F6 | 	mov	local06, #0
1d4ec     E7 92 02 FB | 	rdlong	arg01, fp
1d4f0     7C 99 B0 FD | 	call	#__system___float_fromuns
1d4f4     3D 93 02 F6 | 	mov	arg01, result1
1d4f8     53 95 02 F6 | 	mov	arg02, local01
1d4fc     01 96 06 F6 | 	mov	arg03, #1
1d500     A4 A1 B0 FD | 	call	#__system___float_cmp
1d504     01 7A 56 F2 | 	cmps	result1, #1 wc
1d508     00 B0 26 C6 |  if_b	not	local06, #0
1d50c     E7 B0 62 FC | 	wrlong	local06, fp
1d510     34 01 90 FD | 	jmp	#LR__2483
1d514                 | LR__2477
1d514                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1d514     08 CE 05 F1 | 	add	fp, #8
1d518     E7 B0 02 FB | 	rdlong	local06, fp
1d51c     08 CE 85 F1 | 	sub	fp, #8
1d520     1D B0 0E F2 | 	cmp	local06, #29 wz
1d524     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d528     18 00 90 5D |  if_ne	jmp	#LR__2478
1d52c     00 B0 06 F6 | 	mov	local06, #0
1d530     E7 AC 02 FB | 	rdlong	local04, fp
1d534     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d538     01 B0 66 E6 |  if_be	neg	local06, #1
1d53c     E7 B0 62 FC | 	wrlong	local06, fp
1d540     04 01 90 FD | 	jmp	#LR__2483
1d544                 | LR__2478
1d544                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1d544     08 CE 05 F1 | 	add	fp, #8
1d548     E7 B0 02 FB | 	rdlong	local06, fp
1d54c     08 CE 85 F1 | 	sub	fp, #8
1d550     1D B0 0E F2 | 	cmp	local06, #29 wz
1d554     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d558     18 00 90 5D |  if_ne	jmp	#LR__2479
1d55c     00 B0 06 F6 | 	mov	local06, #0
1d560     E7 AC 02 FB | 	rdlong	local04, fp
1d564     53 AD 1A F2 | 	cmp	local04, local01 wcz
1d568     01 B0 66 E6 |  if_be	neg	local06, #1
1d56c     E7 B0 62 FC | 	wrlong	local06, fp
1d570     D4 00 90 FD | 	jmp	#LR__2483
1d574                 | LR__2479
1d574                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1d574     08 CE 05 F1 | 	add	fp, #8
1d578     E7 B0 02 FB | 	rdlong	local06, fp
1d57c     08 CE 85 F1 | 	sub	fp, #8
1d580     2B B0 0E F2 | 	cmp	local06, #43 wz
1d584     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d588     28 00 90 5D |  if_ne	jmp	#LR__2480
1d58c     00 B0 06 F6 | 	mov	local06, #0
1d590     E7 92 02 FB | 	rdlong	arg01, fp
1d594     48 02 BF FD | 	call	#_convertstring
1d598     3D 93 02 F6 | 	mov	arg01, result1
1d59c     53 95 02 F6 | 	mov	arg02, local01
1d5a0     28 76 B0 FD | 	call	#__system___string_cmp
1d5a4     01 7A 56 F2 | 	cmps	result1, #1 wc
1d5a8     00 B0 26 C6 |  if_b	not	local06, #0
1d5ac     E7 B0 62 FC | 	wrlong	local06, fp
1d5b0     94 00 90 FD | 	jmp	#LR__2483
1d5b4                 | LR__2480
1d5b4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1d5b4     08 CE 05 F1 | 	add	fp, #8
1d5b8     E7 B0 02 FB | 	rdlong	local06, fp
1d5bc     08 CE 85 F1 | 	sub	fp, #8
1d5c0     1F B0 0E F2 | 	cmp	local06, #31 wz
1d5c4     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d5c8     2C 00 90 5D |  if_ne	jmp	#LR__2481
1d5cc     00 B0 06 F6 | 	mov	local06, #0
1d5d0     E7 AC 02 FB | 	rdlong	local04, fp
1d5d4     53 93 02 F6 | 	mov	arg01, local01
1d5d8     04 02 BF FD | 	call	#_convertstring
1d5dc     3D 95 02 F6 | 	mov	arg02, result1
1d5e0     56 93 02 F6 | 	mov	arg01, local04
1d5e4     E4 75 B0 FD | 	call	#__system___string_cmp
1d5e8     01 7A 56 F2 | 	cmps	result1, #1 wc
1d5ec     00 B0 26 C6 |  if_b	not	local06, #0
1d5f0     E7 B0 62 FC | 	wrlong	local06, fp
1d5f4     50 00 90 FD | 	jmp	#LR__2483
1d5f8                 | LR__2481
1d5f8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1d5f8     08 CE 05 F1 | 	add	fp, #8
1d5fc     E7 B0 02 FB | 	rdlong	local06, fp
1d600     08 CE 85 F1 | 	sub	fp, #8
1d604     2B B0 0E F2 | 	cmp	local06, #43 wz
1d608     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d60c     34 00 90 5D |  if_ne	jmp	#LR__2482
1d610     00 B0 06 F6 | 	mov	local06, #0
1d614     E7 92 02 FB | 	rdlong	arg01, fp
1d618     C4 01 BF FD | 	call	#_convertstring
1d61c     3D AD 02 F6 | 	mov	local04, result1
1d620     53 93 02 F6 | 	mov	arg01, local01
1d624     B8 01 BF FD | 	call	#_convertstring
1d628     3D 95 02 F6 | 	mov	arg02, result1
1d62c     56 93 02 F6 | 	mov	arg01, local04
1d630     98 75 B0 FD | 	call	#__system___string_cmp
1d634     01 7A 56 F2 | 	cmps	result1, #1 wc
1d638     00 B0 26 C6 |  if_b	not	local06, #0
1d63c     E7 B0 62 FC | 	wrlong	local06, fp
1d640     04 00 90 FD | 	jmp	#LR__2483
1d644                 | LR__2482
1d644     E7 00 68 FC | 	wrlong	#0, fp
1d648                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d648                 | LR__2483
1d648     08 CE 05 F1 | 	add	fp, #8
1d64c     E7 38 68 FC | 	wrlong	#28, fp
1d650     08 CE 85 F1 | 	sub	fp, #8
1d654     E7 92 02 F6 | 	mov	arg01, fp
1d658     A4 00 BF FD | 	call	#_push
1d65c     E7 F0 03 F6 | 	mov	ptra, fp
1d660     F2 00 A0 FD | 	call	#popregs_
1d664                 | _do_le_ret
1d664     2D 00 64 FD | 	ret
1d668                 | 
1d668                 | ' 
1d668                 | ' '--------------------------------- less than (<)
1d668                 | ' 
1d668                 | ' sub do_lt
1d668                 | _do_lt
1d668     07 CA 05 F6 | 	mov	COUNT_, #7
1d66c     E8 00 A0 FD | 	call	#pushregs_
1d670     18 F0 07 F1 | 	add	ptra, #24
1d674     F8 FF BE FD | 	call	#_pop
1d678     3D A7 02 F6 | 	mov	local01, result1
1d67c     3E AD 02 F6 | 	mov	local04, result2
1d680     3F AF 02 F6 | 	mov	local05, result3
1d684     56 A9 02 F6 | 	mov	local02, local04
1d688     57 AB 02 F6 | 	mov	local03, local05
1d68c     E0 FF BE FD | 	call	#_pop
1d690     3F AF 02 F6 | 	mov	local05, result3
1d694     E7 7A 62 FC | 	wrlong	result1, fp
1d698     04 CE 05 F1 | 	add	fp, #4
1d69c     E7 7C 62 FC | 	wrlong	result2, fp
1d6a0     04 CE 05 F1 | 	add	fp, #4
1d6a4     E7 AE 62 FC | 	wrlong	local05, fp
1d6a8                 | ' 
1d6a8                 | ' t2=pop()
1d6a8                 | ' t1=pop()
1d6a8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1d6a8     08 CE 85 F1 | 	sub	fp, #8
1d6ac     1F AE 0E F2 | 	cmp	local05, #31 wz
1d6b0     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d6b4     20 00 90 5D |  if_ne	jmp	#LR__2490
1d6b8     00 B0 06 F6 | 	mov	local06, #0
1d6bc     E7 92 02 FB | 	rdlong	arg01, fp
1d6c0     53 95 02 F6 | 	mov	arg02, local01
1d6c4     04 75 B0 FD | 	call	#__system___string_cmp
1d6c8     00 7A 56 F2 | 	cmps	result1, #0 wc
1d6cc     00 B0 26 C6 |  if_b	not	local06, #0
1d6d0     E7 B0 62 FC | 	wrlong	local06, fp
1d6d4     E4 02 90 FD | 	jmp	#LR__2499
1d6d8                 | LR__2490
1d6d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1d6d8     08 CE 05 F1 | 	add	fp, #8
1d6dc     E7 B0 02 FB | 	rdlong	local06, fp
1d6e0     08 CE 85 F1 | 	sub	fp, #8
1d6e4     1E B0 0E F2 | 	cmp	local06, #30 wz
1d6e8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d6ec     24 00 90 5D |  if_ne	jmp	#LR__2491
1d6f0     00 B0 06 F6 | 	mov	local06, #0
1d6f4     E7 92 02 FB | 	rdlong	arg01, fp
1d6f8     53 95 02 F6 | 	mov	arg02, local01
1d6fc     01 96 06 F6 | 	mov	arg03, #1
1d700     A4 9F B0 FD | 	call	#__system___float_cmp
1d704     00 7A 56 F2 | 	cmps	result1, #0 wc
1d708     00 B0 26 C6 |  if_b	not	local06, #0
1d70c     E7 B0 62 FC | 	wrlong	local06, fp
1d710     A8 02 90 FD | 	jmp	#LR__2499
1d714                 | LR__2491
1d714                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1d714     08 CE 05 F1 | 	add	fp, #8
1d718     E7 B0 02 FB | 	rdlong	local06, fp
1d71c     08 CE 85 F1 | 	sub	fp, #8
1d720     1E B0 0E F2 | 	cmp	local06, #30 wz
1d724     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d728     3C 00 90 5D |  if_ne	jmp	#LR__2492
1d72c     00 B0 06 F6 | 	mov	local06, #0
1d730     E7 AC 02 FB | 	rdlong	local04, fp
1d734     53 93 52 F6 | 	abs	arg01, local01 wc
1d738     1F B2 C6 C9 |  if_b	decod	local07, #31
1d73c     00 B2 06 36 |  if_ae	mov	local07, #0
1d740     2C 97 B0 FD | 	call	#__system___float_fromuns
1d744     59 7B 62 F5 | 	xor	result1, local07
1d748     3D 95 02 F6 | 	mov	arg02, result1
1d74c     56 93 02 F6 | 	mov	arg01, local04
1d750     01 96 06 F6 | 	mov	arg03, #1
1d754     50 9F B0 FD | 	call	#__system___float_cmp
1d758     00 7A 56 F2 | 	cmps	result1, #0 wc
1d75c     00 B0 26 C6 |  if_b	not	local06, #0
1d760     E7 B0 62 FC | 	wrlong	local06, fp
1d764     54 02 90 FD | 	jmp	#LR__2499
1d768                 | LR__2492
1d768                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1d768     08 CE 05 F1 | 	add	fp, #8
1d76c     E7 B0 02 FB | 	rdlong	local06, fp
1d770     08 CE 85 F1 | 	sub	fp, #8
1d774     1E B0 0E F2 | 	cmp	local06, #30 wz
1d778     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d77c     30 00 90 5D |  if_ne	jmp	#LR__2493
1d780     00 B0 06 F6 | 	mov	local06, #0
1d784     E7 AC 02 FB | 	rdlong	local04, fp
1d788     53 93 02 F6 | 	mov	arg01, local01
1d78c     E0 96 B0 FD | 	call	#__system___float_fromuns
1d790     3D 95 02 F6 | 	mov	arg02, result1
1d794     56 93 02 F6 | 	mov	arg01, local04
1d798     01 96 06 F6 | 	mov	arg03, #1
1d79c     08 9F B0 FD | 	call	#__system___float_cmp
1d7a0     00 7A 56 F2 | 	cmps	result1, #0 wc
1d7a4     00 B0 26 C6 |  if_b	not	local06, #0
1d7a8     E7 B0 62 FC | 	wrlong	local06, fp
1d7ac     0C 02 90 FD | 	jmp	#LR__2499
1d7b0                 | LR__2493
1d7b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1d7b0     08 CE 05 F1 | 	add	fp, #8
1d7b4     E7 B0 02 FB | 	rdlong	local06, fp
1d7b8     08 CE 85 F1 | 	sub	fp, #8
1d7bc     1C B0 0E F2 | 	cmp	local06, #28 wz
1d7c0     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d7c4     3C 00 90 5D |  if_ne	jmp	#LR__2494
1d7c8     00 B0 06 F6 | 	mov	local06, #0
1d7cc     E7 92 02 FB | 	rdlong	arg01, fp
1d7d0     49 93 52 F6 | 	abs	arg01, arg01 wc
1d7d4     1F B2 C6 C9 |  if_b	decod	local07, #31
1d7d8     00 B2 06 36 |  if_ae	mov	local07, #0
1d7dc     90 96 B0 FD | 	call	#__system___float_fromuns
1d7e0     59 7B 62 F5 | 	xor	result1, local07
1d7e4     3D 93 02 F6 | 	mov	arg01, result1
1d7e8     53 95 02 F6 | 	mov	arg02, local01
1d7ec     01 96 06 F6 | 	mov	arg03, #1
1d7f0     B4 9E B0 FD | 	call	#__system___float_cmp
1d7f4     00 7A 56 F2 | 	cmps	result1, #0 wc
1d7f8     00 B0 26 C6 |  if_b	not	local06, #0
1d7fc     E7 B0 62 FC | 	wrlong	local06, fp
1d800     B8 01 90 FD | 	jmp	#LR__2499
1d804                 | LR__2494
1d804                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1d804     08 CE 05 F1 | 	add	fp, #8
1d808     E7 B0 02 FB | 	rdlong	local06, fp
1d80c     08 CE 85 F1 | 	sub	fp, #8
1d810     1C B0 0E F2 | 	cmp	local06, #28 wz
1d814     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d818     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d81c     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1d820     58 B1 A2 A1 |  if_e	subx	local06, local06
1d824     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d828     90 01 90 AD |  if_e	jmp	#LR__2499
1d82c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1d82c     08 CE 05 F1 | 	add	fp, #8
1d830     E7 B0 02 FB | 	rdlong	local06, fp
1d834     08 CE 85 F1 | 	sub	fp, #8
1d838     1C B0 0E F2 | 	cmp	local06, #28 wz
1d83c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d840     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d844     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1d848     58 B1 A2 A1 |  if_e	subx	local06, local06
1d84c     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d850     68 01 90 AD |  if_e	jmp	#LR__2499
1d854                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1d854     08 CE 05 F1 | 	add	fp, #8
1d858     E7 B0 02 FB | 	rdlong	local06, fp
1d85c     08 CE 85 F1 | 	sub	fp, #8
1d860     1D B0 0E F2 | 	cmp	local06, #29 wz
1d864     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d868     2C 00 90 5D |  if_ne	jmp	#LR__2495
1d86c     00 B0 06 F6 | 	mov	local06, #0
1d870     E7 92 02 FB | 	rdlong	arg01, fp
1d874     F8 95 B0 FD | 	call	#__system___float_fromuns
1d878     3D 93 02 F6 | 	mov	arg01, result1
1d87c     53 95 02 F6 | 	mov	arg02, local01
1d880     01 96 06 F6 | 	mov	arg03, #1
1d884     20 9E B0 FD | 	call	#__system___float_cmp
1d888     00 7A 56 F2 | 	cmps	result1, #0 wc
1d88c     00 B0 26 C6 |  if_b	not	local06, #0
1d890     E7 B0 62 FC | 	wrlong	local06, fp
1d894     24 01 90 FD | 	jmp	#LR__2499
1d898                 | LR__2495
1d898                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1d898     08 CE 05 F1 | 	add	fp, #8
1d89c     E7 B0 02 FB | 	rdlong	local06, fp
1d8a0     08 CE 85 F1 | 	sub	fp, #8
1d8a4     1D B0 0E F2 | 	cmp	local06, #29 wz
1d8a8     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d8ac     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d8b0     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1d8b4     58 B1 A2 A1 |  if_e	subx	local06, local06
1d8b8     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d8bc     FC 00 90 AD |  if_e	jmp	#LR__2499
1d8c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1d8c0     08 CE 05 F1 | 	add	fp, #8
1d8c4     E7 B0 02 FB | 	rdlong	local06, fp
1d8c8     08 CE 85 F1 | 	sub	fp, #8
1d8cc     1D B0 0E F2 | 	cmp	local06, #29 wz
1d8d0     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d8d4     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d8d8     53 AD 12 A2 |  if_e	cmp	local04, local01 wc
1d8dc     58 B1 A2 A1 |  if_e	subx	local06, local06
1d8e0     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d8e4     D4 00 90 AD |  if_e	jmp	#LR__2499
1d8e8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1d8e8     08 CE 05 F1 | 	add	fp, #8
1d8ec     E7 B0 02 FB | 	rdlong	local06, fp
1d8f0     08 CE 85 F1 | 	sub	fp, #8
1d8f4     2B B0 0E F2 | 	cmp	local06, #43 wz
1d8f8     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d8fc     28 00 90 5D |  if_ne	jmp	#LR__2496
1d900     00 B0 06 F6 | 	mov	local06, #0
1d904     E7 92 02 FB | 	rdlong	arg01, fp
1d908     D4 FE BE FD | 	call	#_convertstring
1d90c     3D 93 02 F6 | 	mov	arg01, result1
1d910     53 95 02 F6 | 	mov	arg02, local01
1d914     B4 72 B0 FD | 	call	#__system___string_cmp
1d918     00 7A 56 F2 | 	cmps	result1, #0 wc
1d91c     00 B0 26 C6 |  if_b	not	local06, #0
1d920     E7 B0 62 FC | 	wrlong	local06, fp
1d924     94 00 90 FD | 	jmp	#LR__2499
1d928                 | LR__2496
1d928                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1d928     08 CE 05 F1 | 	add	fp, #8
1d92c     E7 B0 02 FB | 	rdlong	local06, fp
1d930     08 CE 85 F1 | 	sub	fp, #8
1d934     1F B0 0E F2 | 	cmp	local06, #31 wz
1d938     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d93c     2C 00 90 5D |  if_ne	jmp	#LR__2497
1d940     00 B0 06 F6 | 	mov	local06, #0
1d944     E7 AC 02 FB | 	rdlong	local04, fp
1d948     53 93 02 F6 | 	mov	arg01, local01
1d94c     90 FE BE FD | 	call	#_convertstring
1d950     3D 95 02 F6 | 	mov	arg02, result1
1d954     56 93 02 F6 | 	mov	arg01, local04
1d958     70 72 B0 FD | 	call	#__system___string_cmp
1d95c     00 7A 56 F2 | 	cmps	result1, #0 wc
1d960     00 B0 26 C6 |  if_b	not	local06, #0
1d964     E7 B0 62 FC | 	wrlong	local06, fp
1d968     50 00 90 FD | 	jmp	#LR__2499
1d96c                 | LR__2497
1d96c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1d96c     08 CE 05 F1 | 	add	fp, #8
1d970     E7 B0 02 FB | 	rdlong	local06, fp
1d974     08 CE 85 F1 | 	sub	fp, #8
1d978     2B B0 0E F2 | 	cmp	local06, #43 wz
1d97c     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d980     34 00 90 5D |  if_ne	jmp	#LR__2498
1d984     00 B0 06 F6 | 	mov	local06, #0
1d988     E7 92 02 FB | 	rdlong	arg01, fp
1d98c     50 FE BE FD | 	call	#_convertstring
1d990     3D AD 02 F6 | 	mov	local04, result1
1d994     53 93 02 F6 | 	mov	arg01, local01
1d998     44 FE BE FD | 	call	#_convertstring
1d99c     3D 95 02 F6 | 	mov	arg02, result1
1d9a0     56 93 02 F6 | 	mov	arg01, local04
1d9a4     24 72 B0 FD | 	call	#__system___string_cmp
1d9a8     00 7A 56 F2 | 	cmps	result1, #0 wc
1d9ac     00 B0 26 C6 |  if_b	not	local06, #0
1d9b0     E7 B0 62 FC | 	wrlong	local06, fp
1d9b4     04 00 90 FD | 	jmp	#LR__2499
1d9b8                 | LR__2498
1d9b8     E7 00 68 FC | 	wrlong	#0, fp
1d9bc                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d9bc                 | LR__2499
1d9bc     08 CE 05 F1 | 	add	fp, #8
1d9c0     E7 38 68 FC | 	wrlong	#28, fp
1d9c4     08 CE 85 F1 | 	sub	fp, #8
1d9c8     E7 92 02 F6 | 	mov	arg01, fp
1d9cc     30 FD BE FD | 	call	#_push
1d9d0     E7 F0 03 F6 | 	mov	ptra, fp
1d9d4     F2 00 A0 FD | 	call	#popregs_
1d9d8                 | _do_lt_ret
1d9d8     2D 00 64 FD | 	ret
1d9dc                 | 
1d9dc                 | ' 
1d9dc                 | ' '--------------------------------- minus (-)
1d9dc                 | ' 
1d9dc                 | ' sub do_minus
1d9dc                 | _do_minus
1d9dc     07 CA 05 F6 | 	mov	COUNT_, #7
1d9e0     E8 00 A0 FD | 	call	#pushregs_
1d9e4     18 F0 07 F1 | 	add	ptra, #24
1d9e8     84 FC BE FD | 	call	#_pop
1d9ec     3D A7 02 F6 | 	mov	local01, result1
1d9f0     3E AD 02 F6 | 	mov	local04, result2
1d9f4     3F AF 02 F6 | 	mov	local05, result3
1d9f8     56 A9 02 F6 | 	mov	local02, local04
1d9fc     57 AB 02 F6 | 	mov	local03, local05
1da00     6C FC BE FD | 	call	#_pop
1da04     3F AF 02 F6 | 	mov	local05, result3
1da08     E7 7A 62 FC | 	wrlong	result1, fp
1da0c     04 CE 05 F1 | 	add	fp, #4
1da10     E7 7C 62 FC | 	wrlong	result2, fp
1da14     04 CE 05 F1 | 	add	fp, #4
1da18     E7 AE 62 FC | 	wrlong	local05, fp
1da1c                 | ' 
1da1c                 | ' t2=pop()
1da1c                 | ' t1=pop()
1da1c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1da1c     08 CE 85 F1 | 	sub	fp, #8
1da20     1D AE 0E F2 | 	cmp	local05, #29 wz
1da24     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1da28     30 00 90 5D |  if_ne	jmp	#LR__2500
1da2c                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1da2c     E7 B0 02 FB | 	rdlong	local06, fp
1da30     58 A7 12 F2 | 	cmp	local01, local06 wc
1da34     53 B1 82 C1 |  if_b	sub	local06, local01
1da38     E7 B0 62 CC |  if_b	wrlong	local06, fp
1da3c     18 02 90 CD |  if_b	jmp	#LR__2507
1da40     E7 B0 02 FB | 	rdlong	local06, fp
1da44     53 B1 82 F1 | 	sub	local06, local01
1da48     E7 B0 62 FC | 	wrlong	local06, fp
1da4c     08 CE 05 F1 | 	add	fp, #8
1da50     E7 38 68 FC | 	wrlong	#28, fp
1da54     08 CE 85 F1 | 	sub	fp, #8
1da58     FC 01 90 FD | 	jmp	#LR__2507
1da5c                 | LR__2500
1da5c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1da5c     08 CE 05 F1 | 	add	fp, #8
1da60     E7 B0 02 FB | 	rdlong	local06, fp
1da64     08 CE 85 F1 | 	sub	fp, #8
1da68     1D B0 0E F2 | 	cmp	local06, #29 wz
1da6c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1da70     1C 00 90 5D |  if_ne	jmp	#LR__2501
1da74     E7 B0 02 FB | 	rdlong	local06, fp
1da78     53 B1 82 F1 | 	sub	local06, local01
1da7c     E7 B0 62 FC | 	wrlong	local06, fp
1da80     08 CE 05 F1 | 	add	fp, #8
1da84     E7 38 68 FC | 	wrlong	#28, fp
1da88     08 CE 85 F1 | 	sub	fp, #8
1da8c     C8 01 90 FD | 	jmp	#LR__2507
1da90                 | LR__2501
1da90                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1da90     08 CE 05 F1 | 	add	fp, #8
1da94     E7 B0 02 FB | 	rdlong	local06, fp
1da98     08 CE 85 F1 | 	sub	fp, #8
1da9c     1D B0 0E F2 | 	cmp	local06, #29 wz
1daa0     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1daa4     2C 00 90 5D |  if_ne	jmp	#LR__2502
1daa8     E7 92 02 FB | 	rdlong	arg01, fp
1daac     C0 93 B0 FD | 	call	#__system___float_fromuns
1dab0     3D 93 02 F6 | 	mov	arg01, result1
1dab4     53 95 02 F6 | 	mov	arg02, local01
1dab8     1F 94 E6 F4 | 	bitnot	arg02, #31
1dabc     E4 93 B0 FD | 	call	#__system___float_add
1dac0     E7 7A 62 FC | 	wrlong	result1, fp
1dac4     08 CE 05 F1 | 	add	fp, #8
1dac8     E7 3C 68 FC | 	wrlong	#30, fp
1dacc     08 CE 85 F1 | 	sub	fp, #8
1dad0     84 01 90 FD | 	jmp	#LR__2507
1dad4                 | LR__2502
1dad4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1dad4     08 CE 05 F1 | 	add	fp, #8
1dad8     E7 B0 02 FB | 	rdlong	local06, fp
1dadc     08 CE 85 F1 | 	sub	fp, #8
1dae0     1C B0 0E F2 | 	cmp	local06, #28 wz
1dae4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dae8     E7 B0 02 AB |  if_e	rdlong	local06, fp
1daec     53 B1 82 A1 |  if_e	sub	local06, local01
1daf0     E7 B0 62 AC |  if_e	wrlong	local06, fp
1daf4     60 01 90 AD |  if_e	jmp	#LR__2507
1daf8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1daf8     08 CE 05 F1 | 	add	fp, #8
1dafc     E7 B0 02 FB | 	rdlong	local06, fp
1db00     08 CE 85 F1 | 	sub	fp, #8
1db04     1C B0 0E F2 | 	cmp	local06, #28 wz
1db08     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1db0c     E7 B0 02 AB |  if_e	rdlong	local06, fp
1db10     53 B1 82 A1 |  if_e	sub	local06, local01
1db14     E7 B0 62 AC |  if_e	wrlong	local06, fp
1db18     3C 01 90 AD |  if_e	jmp	#LR__2507
1db1c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1db1c     08 CE 05 F1 | 	add	fp, #8
1db20     E7 B0 02 FB | 	rdlong	local06, fp
1db24     08 CE 85 F1 | 	sub	fp, #8
1db28     1C B0 0E F2 | 	cmp	local06, #28 wz
1db2c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1db30     3C 00 90 5D |  if_ne	jmp	#LR__2503
1db34     E7 92 02 FB | 	rdlong	arg01, fp
1db38     49 93 52 F6 | 	abs	arg01, arg01 wc
1db3c     1F B2 C6 C9 |  if_b	decod	local07, #31
1db40     00 B2 06 36 |  if_ae	mov	local07, #0
1db44     28 93 B0 FD | 	call	#__system___float_fromuns
1db48     59 7B 62 F5 | 	xor	result1, local07
1db4c     3D 93 02 F6 | 	mov	arg01, result1
1db50     53 95 02 F6 | 	mov	arg02, local01
1db54     1F 94 E6 F4 | 	bitnot	arg02, #31
1db58     48 93 B0 FD | 	call	#__system___float_add
1db5c     E7 7A 62 FC | 	wrlong	result1, fp
1db60     08 CE 05 F1 | 	add	fp, #8
1db64     E7 3C 68 FC | 	wrlong	#30, fp
1db68     08 CE 85 F1 | 	sub	fp, #8
1db6c     E8 00 90 FD | 	jmp	#LR__2507
1db70                 | LR__2503
1db70                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1db70     08 CE 05 F1 | 	add	fp, #8
1db74     E7 B0 02 FB | 	rdlong	local06, fp
1db78     08 CE 85 F1 | 	sub	fp, #8
1db7c     1E B0 0E F2 | 	cmp	local06, #30 wz
1db80     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1db84     24 00 90 5D |  if_ne	jmp	#LR__2504
1db88     E7 B0 02 FB | 	rdlong	local06, fp
1db8c     53 93 02 F6 | 	mov	arg01, local01
1db90     DC 92 B0 FD | 	call	#__system___float_fromuns
1db94     3D 95 02 F6 | 	mov	arg02, result1
1db98     58 93 02 F6 | 	mov	arg01, local06
1db9c     1F 94 E6 F4 | 	bitnot	arg02, #31
1dba0     00 93 B0 FD | 	call	#__system___float_add
1dba4     E7 7A 62 FC | 	wrlong	result1, fp
1dba8     AC 00 90 FD | 	jmp	#LR__2507
1dbac                 | LR__2504
1dbac                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1dbac     08 CE 05 F1 | 	add	fp, #8
1dbb0     E7 B0 02 FB | 	rdlong	local06, fp
1dbb4     08 CE 85 F1 | 	sub	fp, #8
1dbb8     1E B0 0E F2 | 	cmp	local06, #30 wz
1dbbc     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dbc0     30 00 90 5D |  if_ne	jmp	#LR__2505
1dbc4     E7 B0 02 FB | 	rdlong	local06, fp
1dbc8     53 93 52 F6 | 	abs	arg01, local01 wc
1dbcc     1F B2 C6 C9 |  if_b	decod	local07, #31
1dbd0     00 B2 06 36 |  if_ae	mov	local07, #0
1dbd4     98 92 B0 FD | 	call	#__system___float_fromuns
1dbd8     59 7B 62 F5 | 	xor	result1, local07
1dbdc     3D 95 02 F6 | 	mov	arg02, result1
1dbe0     58 93 02 F6 | 	mov	arg01, local06
1dbe4     1F 94 E6 F4 | 	bitnot	arg02, #31
1dbe8     B8 92 B0 FD | 	call	#__system___float_add
1dbec     E7 7A 62 FC | 	wrlong	result1, fp
1dbf0     64 00 90 FD | 	jmp	#LR__2507
1dbf4                 | LR__2505
1dbf4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1dbf4     08 CE 05 F1 | 	add	fp, #8
1dbf8     E7 B0 02 FB | 	rdlong	local06, fp
1dbfc     08 CE 85 F1 | 	sub	fp, #8
1dc00     1E B0 0E F2 | 	cmp	local06, #30 wz
1dc04     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1dc08     18 00 90 5D |  if_ne	jmp	#LR__2506
1dc0c     E7 92 02 FB | 	rdlong	arg01, fp
1dc10     53 95 02 F6 | 	mov	arg02, local01
1dc14     1F 94 E6 F4 | 	bitnot	arg02, #31
1dc18     88 92 B0 FD | 	call	#__system___float_add
1dc1c     E7 7A 62 FC | 	wrlong	result1, fp
1dc20     34 00 90 FD | 	jmp	#LR__2507
1dc24                 | LR__2506
1dc24                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1dc24     08 CE 05 F1 | 	add	fp, #8
1dc28     E7 B0 02 FB | 	rdlong	local06, fp
1dc2c     08 CE 85 F1 | 	sub	fp, #8
1dc30     1F B0 0E F2 | 	cmp	local06, #31 wz
1dc34     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1dc38     E7 06 68 AC |  if_e	wrlong	#3, fp
1dc3c     08 CE 05 A1 |  if_e	add	fp, #8
1dc40     E7 FE 69 AC |  if_e	wrlong	#255, fp
1dc44     08 CE 85 A1 |  if_e	sub	fp, #8
1dc48     E7 0A 68 5C |  if_ne	wrlong	#5, fp
1dc4c     08 CE 05 51 |  if_ne	add	fp, #8
1dc50     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1dc54     08 CE 85 51 |  if_ne	sub	fp, #8
1dc58                 | LR__2507
1dc58     E7 92 02 F6 | 	mov	arg01, fp
1dc5c     A0 FA BE FD | 	call	#_push
1dc60     E7 F0 03 F6 | 	mov	ptra, fp
1dc64     F2 00 A0 FD | 	call	#popregs_
1dc68                 | _do_minus_ret
1dc68     2D 00 64 FD | 	ret
1dc6c                 | 
1dc6c                 | ' 
1dc6c                 | ' '--------------------------------- negative (-), one argument negative
1dc6c                 | ' 
1dc6c                 | ' sub do_negative
1dc6c                 | _do_negative
1dc6c     02 CA 05 F6 | 	mov	COUNT_, #2
1dc70     E8 00 A0 FD | 	call	#pushregs_
1dc74     0C F0 07 F1 | 	add	ptra, #12
1dc78     F4 F9 BE FD | 	call	#_pop
1dc7c     3F A7 02 F6 | 	mov	local01, result3
1dc80     E7 7A 62 FC | 	wrlong	result1, fp
1dc84     04 CE 05 F1 | 	add	fp, #4
1dc88     E7 7C 62 FC | 	wrlong	result2, fp
1dc8c     04 CE 05 F1 | 	add	fp, #4
1dc90     E7 A6 62 FC | 	wrlong	local01, fp
1dc94                 | ' 
1dc94                 | ' t1=pop()
1dc94                 | ' if t1.result_type=result_int then 
1dc94     08 CE 85 F1 | 	sub	fp, #8
1dc98     1C A6 0E F2 | 	cmp	local01, #28 wz
1dc9c     E7 A8 02 AB |  if_e	rdlong	local02, fp
1dca0     54 A7 62 A6 |  if_e	neg	local01, local02
1dca4     E7 A6 62 AC |  if_e	wrlong	local01, fp
1dca8     5C 00 90 AD |  if_e	jmp	#LR__2512
1dcac     08 CE 05 F1 | 	add	fp, #8
1dcb0     E7 A6 02 FB | 	rdlong	local01, fp
1dcb4     08 CE 85 F1 | 	sub	fp, #8
1dcb8     1D A6 0E F2 | 	cmp	local01, #29 wz
1dcbc     1C 00 90 5D |  if_ne	jmp	#LR__2510
1dcc0     E7 A8 02 FB | 	rdlong	local02, fp
1dcc4     54 A7 62 F6 | 	neg	local01, local02
1dcc8     E7 A6 62 FC | 	wrlong	local01, fp
1dccc     08 CE 05 F1 | 	add	fp, #8
1dcd0     E7 38 68 FC | 	wrlong	#28, fp
1dcd4     08 CE 85 F1 | 	sub	fp, #8
1dcd8     2C 00 90 FD | 	jmp	#LR__2511
1dcdc                 | LR__2510
1dcdc     08 CE 05 F1 | 	add	fp, #8
1dce0     E7 A6 02 FB | 	rdlong	local01, fp
1dce4     08 CE 85 F1 | 	sub	fp, #8
1dce8     1E A6 0E F2 | 	cmp	local01, #30 wz
1dcec     E7 7A 02 AB |  if_e	rdlong	result1, fp
1dcf0     1F 7A E6 A4 |  if_e	bitnot	result1, #31
1dcf4     E7 7A 62 AC |  if_e	wrlong	result1, fp
1dcf8     08 CE 05 51 |  if_ne	add	fp, #8
1dcfc     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1dd00     08 CE 85 51 |  if_ne	sub	fp, #8
1dd04     E7 50 68 5C |  if_ne	wrlong	#40, fp
1dd08                 | LR__2511
1dd08                 | LR__2512
1dd08     E7 92 02 F6 | 	mov	arg01, fp
1dd0c     F0 F9 BE FD | 	call	#_push
1dd10     E7 F0 03 F6 | 	mov	ptra, fp
1dd14     F2 00 A0 FD | 	call	#popregs_
1dd18                 | _do_negative_ret
1dd18     2D 00 64 FD | 	ret
1dd1c                 | 
1dd1c                 | ' 
1dd1c                 | ' '--------------------------------- MOD (modulo)
1dd1c                 | ' 
1dd1c                 | ' sub do_mod 
1dd1c                 | _do_mod
1dd1c     04 CA 05 F6 | 	mov	COUNT_, #4
1dd20     E8 00 A0 FD | 	call	#pushregs_
1dd24     18 F0 07 F1 | 	add	ptra, #24
1dd28     44 F9 BE FD | 	call	#_pop
1dd2c     3D A7 02 F6 | 	mov	local01, result1
1dd30     3E 11 03 F6 | 	mov	muldivb_, result2
1dd34     3F 0F 03 F6 | 	mov	muldiva_, result3
1dd38     88 A9 02 F6 | 	mov	local02, muldivb_
1dd3c     87 AB 02 F6 | 	mov	local03, muldiva_
1dd40     2C F9 BE FD | 	call	#_pop
1dd44     E7 7A 62 FC | 	wrlong	result1, fp
1dd48     04 CE 05 F1 | 	add	fp, #4
1dd4c     E7 7C 62 FC | 	wrlong	result2, fp
1dd50     04 CE 05 F1 | 	add	fp, #4
1dd54     E7 7E 62 FC | 	wrlong	result3, fp
1dd58                 | ' 
1dd58                 | ' t2=pop()
1dd58                 | ' t1=pop()
1dd58                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1dd58     08 CE 85 F1 | 	sub	fp, #8
1dd5c     1F 7E 0E F2 | 	cmp	result3, #31 wz
1dd60     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1dd64     E7 14 68 AC |  if_e	wrlong	#10, fp
1dd68     08 CE 05 A1 |  if_e	add	fp, #8
1dd6c     E7 FE 69 AC |  if_e	wrlong	#255, fp
1dd70     08 CE 85 A1 |  if_e	sub	fp, #8
1dd74     14 01 90 AD |  if_e	jmp	#LR__2525
1dd78                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1dd78     08 CE 05 F1 | 	add	fp, #8
1dd7c     E7 10 03 FB | 	rdlong	muldivb_, fp
1dd80     08 CE 85 F1 | 	sub	fp, #8
1dd84     1E 10 0F F2 | 	cmp	muldivb_, #30 wz
1dd88     1C 00 90 5D |  if_ne	jmp	#LR__2520
1dd8c     08 CE 05 F1 | 	add	fp, #8
1dd90     E7 38 68 FC | 	wrlong	#28, fp
1dd94     08 CE 85 F1 | 	sub	fp, #8
1dd98     E7 92 02 FB | 	rdlong	arg01, fp
1dd9c     00 94 06 F6 | 	mov	arg02, #0
1dda0     98 99 B0 FD | 	call	#__system___float_tointeger
1dda4     E7 7A 62 FC | 	wrlong	result1, fp
1dda8                 | LR__2520
1dda8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1dda8     1E AA 0E F2 | 	cmp	local03, #30 wz
1ddac     14 00 90 5D |  if_ne	jmp	#LR__2521
1ddb0     1C AA 06 F6 | 	mov	local03, #28
1ddb4     53 93 02 F6 | 	mov	arg01, local01
1ddb8     00 94 06 F6 | 	mov	arg02, #0
1ddbc     7C 99 B0 FD | 	call	#__system___float_tointeger
1ddc0     3D A7 02 F6 | 	mov	local01, result1
1ddc4                 | LR__2521
1ddc4     08 CE 05 F1 | 	add	fp, #8
1ddc8     E7 AC 02 FB | 	rdlong	local04, fp
1ddcc     08 CE 85 F1 | 	sub	fp, #8
1ddd0     1D AC 0E F2 | 	cmp	local04, #29 wz
1ddd4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1ddd8     E7 AC 02 AB |  if_e	rdlong	local04, fp
1dddc     53 AD 12 AD |  if_e	qdiv	local04, local01
1dde0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1dde0     19 AC 62 AD |  if_e	getqy	local04
1dde4     E7 AC 62 AC |  if_e	wrlong	local04, fp
1dde8     A0 00 90 AD |  if_e	jmp	#LR__2525
1ddec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1ddec     08 CE 05 F1 | 	add	fp, #8
1ddf0     E7 AC 02 FB | 	rdlong	local04, fp
1ddf4     08 CE 85 F1 | 	sub	fp, #8
1ddf8     1D AC 0E F2 | 	cmp	local04, #29 wz
1ddfc     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1de00     20 00 90 5D |  if_ne	jmp	#LR__2522
1de04     E7 AC 02 FB | 	rdlong	local04, fp
1de08     53 AD 12 FD | 	qdiv	local04, local01
1de0c     19 AC 62 FD | 	getqy	local04
1de10     E7 AC 62 FC | 	wrlong	local04, fp
1de14     08 CE 05 F1 | 	add	fp, #8
1de18     E7 38 68 FC | 	wrlong	#28, fp
1de1c     08 CE 85 F1 | 	sub	fp, #8
1de20     68 00 90 FD | 	jmp	#LR__2525
1de24                 | LR__2522
1de24                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1de24     08 CE 05 F1 | 	add	fp, #8
1de28     E7 AC 02 FB | 	rdlong	local04, fp
1de2c     08 CE 85 F1 | 	sub	fp, #8
1de30     1C AC 0E F2 | 	cmp	local04, #28 wz
1de34     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1de38     14 00 90 5D |  if_ne	jmp	#LR__2523
1de3c     E7 0E 03 FB | 	rdlong	muldiva_, fp
1de40     53 11 03 F6 | 	mov	muldivb_, local01
1de44     FA 00 A0 FD | 	call	#divide_
1de48     E7 0E 63 FC | 	wrlong	muldiva_, fp
1de4c     3C 00 90 FD | 	jmp	#LR__2525
1de50                 | LR__2523
1de50                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1de50     08 CE 05 F1 | 	add	fp, #8
1de54     E7 AC 02 FB | 	rdlong	local04, fp
1de58     08 CE 85 F1 | 	sub	fp, #8
1de5c     1C AC 0E F2 | 	cmp	local04, #28 wz
1de60     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1de64     14 00 90 5D |  if_ne	jmp	#LR__2524
1de68     E7 0E 03 FB | 	rdlong	muldiva_, fp
1de6c     53 11 03 F6 | 	mov	muldivb_, local01
1de70     FA 00 A0 FD | 	call	#divide_
1de74     E7 0E 63 FC | 	wrlong	muldiva_, fp
1de78     10 00 90 FD | 	jmp	#LR__2525
1de7c                 | LR__2524
1de7c     E7 16 68 FC | 	wrlong	#11, fp
1de80     08 CE 05 F1 | 	add	fp, #8
1de84     E7 FE 69 FC | 	wrlong	#255, fp
1de88     08 CE 85 F1 | 	sub	fp, #8
1de8c                 | LR__2525
1de8c     E7 92 02 F6 | 	mov	arg01, fp
1de90     6C F8 BE FD | 	call	#_push
1de94     E7 F0 03 F6 | 	mov	ptra, fp
1de98     F2 00 A0 FD | 	call	#popregs_
1de9c                 | _do_mod_ret
1de9c     2D 00 64 FD | 	ret
1dea0                 | 
1dea0                 | ' 
1dea0                 | ' '--------------------------------- mul (*)
1dea0                 | ' 
1dea0                 | ' sub do_mul
1dea0                 | _do_mul
1dea0     07 CA 05 F6 | 	mov	COUNT_, #7
1dea4     E8 00 A0 FD | 	call	#pushregs_
1dea8     18 F0 07 F1 | 	add	ptra, #24
1deac     C0 F7 BE FD | 	call	#_pop
1deb0     3D A7 02 F6 | 	mov	local01, result1
1deb4     3E AD 02 F6 | 	mov	local04, result2
1deb8     3F 95 02 F6 | 	mov	arg02, result3
1debc     56 A9 02 F6 | 	mov	local02, local04
1dec0     4A AB 02 F6 | 	mov	local03, arg02
1dec4     A8 F7 BE FD | 	call	#_pop
1dec8     3F AF 02 F6 | 	mov	local05, result3
1decc     E7 7A 62 FC | 	wrlong	result1, fp
1ded0     04 CE 05 F1 | 	add	fp, #4
1ded4     E7 7C 62 FC | 	wrlong	result2, fp
1ded8     04 CE 05 F1 | 	add	fp, #4
1dedc     E7 AE 62 FC | 	wrlong	local05, fp
1dee0     08 CE 85 F1 | 	sub	fp, #8
1dee4     1D AE 0E F2 | 	cmp	local05, #29 wz
1dee8     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1deec     E7 AC 02 AB |  if_e	rdlong	local04, fp
1def0     53 AD 02 AD |  if_e	qmul	local04, local01
1def4                 | ' 
1def4                 | ' t2=pop()
1def4                 | ' t1=pop()
1def4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1def4     18 B0 62 AD |  if_e	getqx	local06
1def8     E7 B0 62 AC |  if_e	wrlong	local06, fp
1defc     F4 01 90 AD |  if_e	jmp	#LR__2536
1df00                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1df00     08 CE 05 F1 | 	add	fp, #8
1df04     E7 B0 02 FB | 	rdlong	local06, fp
1df08     08 CE 85 F1 | 	sub	fp, #8
1df0c     1D B0 0E F2 | 	cmp	local06, #29 wz
1df10     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1df14     20 00 90 5D |  if_ne	jmp	#LR__2530
1df18     E7 AC 02 FB | 	rdlong	local04, fp
1df1c     53 AD 02 FD | 	qmul	local04, local01
1df20     18 B0 62 FD | 	getqx	local06
1df24     E7 B0 62 FC | 	wrlong	local06, fp
1df28     08 CE 05 F1 | 	add	fp, #8
1df2c     E7 38 68 FC | 	wrlong	#28, fp
1df30     08 CE 85 F1 | 	sub	fp, #8
1df34     BC 01 90 FD | 	jmp	#LR__2536
1df38                 | LR__2530
1df38                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1df38     08 CE 05 F1 | 	add	fp, #8
1df3c     E7 B0 02 FB | 	rdlong	local06, fp
1df40     08 CE 85 F1 | 	sub	fp, #8
1df44     1D B0 0E F2 | 	cmp	local06, #29 wz
1df48     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1df4c     28 00 90 5D |  if_ne	jmp	#LR__2531
1df50     E7 92 02 FB | 	rdlong	arg01, fp
1df54     18 8F B0 FD | 	call	#__system___float_fromuns
1df58     3D 93 02 F6 | 	mov	arg01, result1
1df5c     53 95 02 F6 | 	mov	arg02, local01
1df60     10 93 B0 FD | 	call	#__system___float_mul
1df64     E7 7A 62 FC | 	wrlong	result1, fp
1df68     08 CE 05 F1 | 	add	fp, #8
1df6c     E7 3C 68 FC | 	wrlong	#30, fp
1df70     08 CE 85 F1 | 	sub	fp, #8
1df74     7C 01 90 FD | 	jmp	#LR__2536
1df78                 | LR__2531
1df78     08 CE 05 F1 | 	add	fp, #8
1df7c     E7 B0 02 FB | 	rdlong	local06, fp
1df80     08 CE 85 F1 | 	sub	fp, #8
1df84     1C B0 0E F2 | 	cmp	local06, #28 wz
1df88     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1df8c     E7 AC 02 AB |  if_e	rdlong	local04, fp
1df90     53 AD 02 AD |  if_e	qmul	local04, local01
1df94                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1df94     18 B0 62 AD |  if_e	getqx	local06
1df98     E7 B0 62 AC |  if_e	wrlong	local06, fp
1df9c     54 01 90 AD |  if_e	jmp	#LR__2536
1dfa0     08 CE 05 F1 | 	add	fp, #8
1dfa4     E7 B0 02 FB | 	rdlong	local06, fp
1dfa8     08 CE 85 F1 | 	sub	fp, #8
1dfac     1C B0 0E F2 | 	cmp	local06, #28 wz
1dfb0     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dfb4     E7 AC 02 AB |  if_e	rdlong	local04, fp
1dfb8     53 AD 02 AD |  if_e	qmul	local04, local01
1dfbc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1dfbc     18 B0 62 AD |  if_e	getqx	local06
1dfc0     E7 B0 62 AC |  if_e	wrlong	local06, fp
1dfc4     2C 01 90 AD |  if_e	jmp	#LR__2536
1dfc8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1dfc8     08 CE 05 F1 | 	add	fp, #8
1dfcc     E7 B0 02 FB | 	rdlong	local06, fp
1dfd0     08 CE 85 F1 | 	sub	fp, #8
1dfd4     1C B0 0E F2 | 	cmp	local06, #28 wz
1dfd8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1dfdc     38 00 90 5D |  if_ne	jmp	#LR__2532
1dfe0     E7 92 02 FB | 	rdlong	arg01, fp
1dfe4     49 93 52 F6 | 	abs	arg01, arg01 wc
1dfe8     1F B2 C6 C9 |  if_b	decod	local07, #31
1dfec     00 B2 06 36 |  if_ae	mov	local07, #0
1dff0     7C 8E B0 FD | 	call	#__system___float_fromuns
1dff4     59 7B 62 F5 | 	xor	result1, local07
1dff8     3D 93 02 F6 | 	mov	arg01, result1
1dffc     53 95 02 F6 | 	mov	arg02, local01
1e000     70 92 B0 FD | 	call	#__system___float_mul
1e004     E7 7A 62 FC | 	wrlong	result1, fp
1e008     08 CE 05 F1 | 	add	fp, #8
1e00c     E7 3C 68 FC | 	wrlong	#30, fp
1e010     08 CE 85 F1 | 	sub	fp, #8
1e014     DC 00 90 FD | 	jmp	#LR__2536
1e018                 | LR__2532
1e018                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1e018     08 CE 05 F1 | 	add	fp, #8
1e01c     E7 B0 02 FB | 	rdlong	local06, fp
1e020     08 CE 85 F1 | 	sub	fp, #8
1e024     1E B0 0E F2 | 	cmp	local06, #30 wz
1e028     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e02c     20 00 90 5D |  if_ne	jmp	#LR__2533
1e030     E7 B0 02 FB | 	rdlong	local06, fp
1e034     53 93 02 F6 | 	mov	arg01, local01
1e038     34 8E B0 FD | 	call	#__system___float_fromuns
1e03c     3D 95 02 F6 | 	mov	arg02, result1
1e040     58 93 02 F6 | 	mov	arg01, local06
1e044     2C 92 B0 FD | 	call	#__system___float_mul
1e048     E7 7A 62 FC | 	wrlong	result1, fp
1e04c     A4 00 90 FD | 	jmp	#LR__2536
1e050                 | LR__2533
1e050                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1e050     08 CE 05 F1 | 	add	fp, #8
1e054     E7 B0 02 FB | 	rdlong	local06, fp
1e058     08 CE 85 F1 | 	sub	fp, #8
1e05c     1E B0 0E F2 | 	cmp	local06, #30 wz
1e060     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e064     2C 00 90 5D |  if_ne	jmp	#LR__2534
1e068     E7 B0 02 FB | 	rdlong	local06, fp
1e06c     53 93 52 F6 | 	abs	arg01, local01 wc
1e070     1F B2 C6 C9 |  if_b	decod	local07, #31
1e074     00 B2 06 36 |  if_ae	mov	local07, #0
1e078     F4 8D B0 FD | 	call	#__system___float_fromuns
1e07c     59 7B 62 F5 | 	xor	result1, local07
1e080     3D 95 02 F6 | 	mov	arg02, result1
1e084     58 93 02 F6 | 	mov	arg01, local06
1e088     E8 91 B0 FD | 	call	#__system___float_mul
1e08c     E7 7A 62 FC | 	wrlong	result1, fp
1e090     60 00 90 FD | 	jmp	#LR__2536
1e094                 | LR__2534
1e094                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1e094     08 CE 05 F1 | 	add	fp, #8
1e098     E7 B0 02 FB | 	rdlong	local06, fp
1e09c     08 CE 85 F1 | 	sub	fp, #8
1e0a0     1E B0 0E F2 | 	cmp	local06, #30 wz
1e0a4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e0a8     14 00 90 5D |  if_ne	jmp	#LR__2535
1e0ac     E7 92 02 FB | 	rdlong	arg01, fp
1e0b0     53 95 02 F6 | 	mov	arg02, local01
1e0b4     BC 91 B0 FD | 	call	#__system___float_mul
1e0b8     E7 7A 62 FC | 	wrlong	result1, fp
1e0bc     34 00 90 FD | 	jmp	#LR__2536
1e0c0                 | LR__2535
1e0c0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1e0c0     08 CE 05 F1 | 	add	fp, #8
1e0c4     E7 B0 02 FB | 	rdlong	local06, fp
1e0c8     08 CE 85 F1 | 	sub	fp, #8
1e0cc     1F B0 0E F2 | 	cmp	local06, #31 wz
1e0d0     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e0d4     E7 10 68 AC |  if_e	wrlong	#8, fp
1e0d8     08 CE 05 A1 |  if_e	add	fp, #8
1e0dc     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e0e0     08 CE 85 A1 |  if_e	sub	fp, #8
1e0e4     E7 12 68 5C |  if_ne	wrlong	#9, fp
1e0e8     08 CE 05 51 |  if_ne	add	fp, #8
1e0ec     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1e0f0     08 CE 85 51 |  if_ne	sub	fp, #8
1e0f4                 | LR__2536
1e0f4     E7 92 02 F6 | 	mov	arg01, fp
1e0f8     04 F6 BE FD | 	call	#_push
1e0fc     E7 F0 03 F6 | 	mov	ptra, fp
1e100     F2 00 A0 FD | 	call	#popregs_
1e104                 | _do_mul_ret
1e104     2D 00 64 FD | 	ret
1e108                 | 
1e108                 | ' 
1e108                 | ' '--------------------------------- not equal (<>)
1e108                 | ' 
1e108                 | ' sub do_ne
1e108                 | _do_ne
1e108     07 CA 05 F6 | 	mov	COUNT_, #7
1e10c     E8 00 A0 FD | 	call	#pushregs_
1e110     18 F0 07 F1 | 	add	ptra, #24
1e114     58 F5 BE FD | 	call	#_pop
1e118     3D A7 02 F6 | 	mov	local01, result1
1e11c     3E AD 02 F6 | 	mov	local04, result2
1e120     3F AF 02 F6 | 	mov	local05, result3
1e124     56 A9 02 F6 | 	mov	local02, local04
1e128     57 AB 02 F6 | 	mov	local03, local05
1e12c     40 F5 BE FD | 	call	#_pop
1e130     3F AF 02 F6 | 	mov	local05, result3
1e134     E7 7A 62 FC | 	wrlong	result1, fp
1e138     04 CE 05 F1 | 	add	fp, #4
1e13c     E7 7C 62 FC | 	wrlong	result2, fp
1e140     04 CE 05 F1 | 	add	fp, #4
1e144     E7 AE 62 FC | 	wrlong	local05, fp
1e148                 | ' 
1e148                 | ' t2=pop()
1e148                 | ' t1=pop()
1e148                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1e148     08 CE 85 F1 | 	sub	fp, #8
1e14c     1F AE 0E F2 | 	cmp	local05, #31 wz
1e150     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e154     20 00 90 5D |  if_ne	jmp	#LR__2540
1e158     00 B0 06 F6 | 	mov	local06, #0
1e15c     E7 92 02 FB | 	rdlong	arg01, fp
1e160     53 95 02 F6 | 	mov	arg02, local01
1e164     64 6A B0 FD | 	call	#__system___string_cmp
1e168     00 7A 0E F2 | 	cmp	result1, #0 wz
1e16c     00 B0 26 56 |  if_ne	not	local06, #0
1e170     E7 B0 62 FC | 	wrlong	local06, fp
1e174     04 03 90 FD | 	jmp	#LR__2553
1e178                 | LR__2540
1e178                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1e178     08 CE 05 F1 | 	add	fp, #8
1e17c     E7 B0 02 FB | 	rdlong	local06, fp
1e180     08 CE 85 F1 | 	sub	fp, #8
1e184     1E B0 0E F2 | 	cmp	local06, #30 wz
1e188     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e18c     24 00 90 5D |  if_ne	jmp	#LR__2541
1e190     00 B0 06 F6 | 	mov	local06, #0
1e194     E7 92 02 FB | 	rdlong	arg01, fp
1e198     53 95 02 F6 | 	mov	arg02, local01
1e19c     01 96 06 F6 | 	mov	arg03, #1
1e1a0     04 95 B0 FD | 	call	#__system___float_cmp
1e1a4     00 7A 0E F2 | 	cmp	result1, #0 wz
1e1a8     00 B0 26 56 |  if_ne	not	local06, #0
1e1ac     E7 B0 62 FC | 	wrlong	local06, fp
1e1b0     C8 02 90 FD | 	jmp	#LR__2553
1e1b4                 | LR__2541
1e1b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1e1b4     08 CE 05 F1 | 	add	fp, #8
1e1b8     E7 B0 02 FB | 	rdlong	local06, fp
1e1bc     08 CE 85 F1 | 	sub	fp, #8
1e1c0     1E B0 0E F2 | 	cmp	local06, #30 wz
1e1c4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e1c8     3C 00 90 5D |  if_ne	jmp	#LR__2542
1e1cc     00 B0 06 F6 | 	mov	local06, #0
1e1d0     E7 AC 02 FB | 	rdlong	local04, fp
1e1d4     53 93 52 F6 | 	abs	arg01, local01 wc
1e1d8     1F B2 C6 C9 |  if_b	decod	local07, #31
1e1dc     00 B2 06 36 |  if_ae	mov	local07, #0
1e1e0     8C 8C B0 FD | 	call	#__system___float_fromuns
1e1e4     59 7B 62 F5 | 	xor	result1, local07
1e1e8     3D 95 02 F6 | 	mov	arg02, result1
1e1ec     56 93 02 F6 | 	mov	arg01, local04
1e1f0     01 96 06 F6 | 	mov	arg03, #1
1e1f4     B0 94 B0 FD | 	call	#__system___float_cmp
1e1f8     00 7A 0E F2 | 	cmp	result1, #0 wz
1e1fc     00 B0 26 56 |  if_ne	not	local06, #0
1e200     E7 B0 62 FC | 	wrlong	local06, fp
1e204     74 02 90 FD | 	jmp	#LR__2553
1e208                 | LR__2542
1e208                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1e208     08 CE 05 F1 | 	add	fp, #8
1e20c     E7 B0 02 FB | 	rdlong	local06, fp
1e210     08 CE 85 F1 | 	sub	fp, #8
1e214     1E B0 0E F2 | 	cmp	local06, #30 wz
1e218     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e21c     30 00 90 5D |  if_ne	jmp	#LR__2543
1e220     00 B0 06 F6 | 	mov	local06, #0
1e224     E7 AC 02 FB | 	rdlong	local04, fp
1e228     53 93 02 F6 | 	mov	arg01, local01
1e22c     40 8C B0 FD | 	call	#__system___float_fromuns
1e230     3D 95 02 F6 | 	mov	arg02, result1
1e234     56 93 02 F6 | 	mov	arg01, local04
1e238     01 96 06 F6 | 	mov	arg03, #1
1e23c     68 94 B0 FD | 	call	#__system___float_cmp
1e240     00 7A 0E F2 | 	cmp	result1, #0 wz
1e244     00 B0 26 56 |  if_ne	not	local06, #0
1e248     E7 B0 62 FC | 	wrlong	local06, fp
1e24c     2C 02 90 FD | 	jmp	#LR__2553
1e250                 | LR__2543
1e250                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1e250     08 CE 05 F1 | 	add	fp, #8
1e254     E7 B0 02 FB | 	rdlong	local06, fp
1e258     08 CE 85 F1 | 	sub	fp, #8
1e25c     1C B0 0E F2 | 	cmp	local06, #28 wz
1e260     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e264     3C 00 90 5D |  if_ne	jmp	#LR__2544
1e268     00 B0 06 F6 | 	mov	local06, #0
1e26c     E7 92 02 FB | 	rdlong	arg01, fp
1e270     49 93 52 F6 | 	abs	arg01, arg01 wc
1e274     1F B2 C6 C9 |  if_b	decod	local07, #31
1e278     00 B2 06 36 |  if_ae	mov	local07, #0
1e27c     F0 8B B0 FD | 	call	#__system___float_fromuns
1e280     59 7B 62 F5 | 	xor	result1, local07
1e284     3D 93 02 F6 | 	mov	arg01, result1
1e288     53 95 02 F6 | 	mov	arg02, local01
1e28c     01 96 06 F6 | 	mov	arg03, #1
1e290     14 94 B0 FD | 	call	#__system___float_cmp
1e294     00 7A 0E F2 | 	cmp	result1, #0 wz
1e298     00 B0 26 56 |  if_ne	not	local06, #0
1e29c     E7 B0 62 FC | 	wrlong	local06, fp
1e2a0     D8 01 90 FD | 	jmp	#LR__2553
1e2a4                 | LR__2544
1e2a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1e2a4     08 CE 05 F1 | 	add	fp, #8
1e2a8     E7 B0 02 FB | 	rdlong	local06, fp
1e2ac     08 CE 85 F1 | 	sub	fp, #8
1e2b0     1C B0 0E F2 | 	cmp	local06, #28 wz
1e2b4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e2b8     18 00 90 5D |  if_ne	jmp	#LR__2545
1e2bc     00 B0 06 F6 | 	mov	local06, #0
1e2c0     E7 AC 02 FB | 	rdlong	local04, fp
1e2c4     53 AD 0A F2 | 	cmp	local04, local01 wz
1e2c8     01 B0 66 56 |  if_ne	neg	local06, #1
1e2cc     E7 B0 62 FC | 	wrlong	local06, fp
1e2d0     A8 01 90 FD | 	jmp	#LR__2553
1e2d4                 | LR__2545
1e2d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1e2d4     08 CE 05 F1 | 	add	fp, #8
1e2d8     E7 B0 02 FB | 	rdlong	local06, fp
1e2dc     08 CE 85 F1 | 	sub	fp, #8
1e2e0     1C B0 0E F2 | 	cmp	local06, #28 wz
1e2e4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e2e8     18 00 90 5D |  if_ne	jmp	#LR__2546
1e2ec     00 B0 06 F6 | 	mov	local06, #0
1e2f0     E7 AC 02 FB | 	rdlong	local04, fp
1e2f4     53 AD 0A F2 | 	cmp	local04, local01 wz
1e2f8     01 B0 66 56 |  if_ne	neg	local06, #1
1e2fc     E7 B0 62 FC | 	wrlong	local06, fp
1e300     78 01 90 FD | 	jmp	#LR__2553
1e304                 | LR__2546
1e304                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1e304     08 CE 05 F1 | 	add	fp, #8
1e308     E7 B0 02 FB | 	rdlong	local06, fp
1e30c     08 CE 85 F1 | 	sub	fp, #8
1e310     1D B0 0E F2 | 	cmp	local06, #29 wz
1e314     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e318     2C 00 90 5D |  if_ne	jmp	#LR__2547
1e31c     00 B0 06 F6 | 	mov	local06, #0
1e320     E7 92 02 FB | 	rdlong	arg01, fp
1e324     48 8B B0 FD | 	call	#__system___float_fromuns
1e328     3D 93 02 F6 | 	mov	arg01, result1
1e32c     53 95 02 F6 | 	mov	arg02, local01
1e330     01 96 06 F6 | 	mov	arg03, #1
1e334     70 93 B0 FD | 	call	#__system___float_cmp
1e338     00 7A 0E F2 | 	cmp	result1, #0 wz
1e33c     00 B0 26 56 |  if_ne	not	local06, #0
1e340     E7 B0 62 FC | 	wrlong	local06, fp
1e344     34 01 90 FD | 	jmp	#LR__2553
1e348                 | LR__2547
1e348                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1e348     08 CE 05 F1 | 	add	fp, #8
1e34c     E7 B0 02 FB | 	rdlong	local06, fp
1e350     08 CE 85 F1 | 	sub	fp, #8
1e354     1D B0 0E F2 | 	cmp	local06, #29 wz
1e358     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e35c     18 00 90 5D |  if_ne	jmp	#LR__2548
1e360     00 B0 06 F6 | 	mov	local06, #0
1e364     E7 AC 02 FB | 	rdlong	local04, fp
1e368     53 AD 0A F2 | 	cmp	local04, local01 wz
1e36c     01 B0 66 56 |  if_ne	neg	local06, #1
1e370     E7 B0 62 FC | 	wrlong	local06, fp
1e374     04 01 90 FD | 	jmp	#LR__2553
1e378                 | LR__2548
1e378                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1e378     08 CE 05 F1 | 	add	fp, #8
1e37c     E7 B0 02 FB | 	rdlong	local06, fp
1e380     08 CE 85 F1 | 	sub	fp, #8
1e384     1D B0 0E F2 | 	cmp	local06, #29 wz
1e388     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e38c     18 00 90 5D |  if_ne	jmp	#LR__2549
1e390     00 B0 06 F6 | 	mov	local06, #0
1e394     E7 AC 02 FB | 	rdlong	local04, fp
1e398     53 AD 0A F2 | 	cmp	local04, local01 wz
1e39c     01 B0 66 56 |  if_ne	neg	local06, #1
1e3a0     E7 B0 62 FC | 	wrlong	local06, fp
1e3a4     D4 00 90 FD | 	jmp	#LR__2553
1e3a8                 | LR__2549
1e3a8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1e3a8     08 CE 05 F1 | 	add	fp, #8
1e3ac     E7 B0 02 FB | 	rdlong	local06, fp
1e3b0     08 CE 85 F1 | 	sub	fp, #8
1e3b4     2B B0 0E F2 | 	cmp	local06, #43 wz
1e3b8     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e3bc     28 00 90 5D |  if_ne	jmp	#LR__2550
1e3c0     00 B0 06 F6 | 	mov	local06, #0
1e3c4     E7 92 02 FB | 	rdlong	arg01, fp
1e3c8     14 F4 BE FD | 	call	#_convertstring
1e3cc     3D 93 02 F6 | 	mov	arg01, result1
1e3d0     53 95 02 F6 | 	mov	arg02, local01
1e3d4     F4 67 B0 FD | 	call	#__system___string_cmp
1e3d8     00 7A 0E F2 | 	cmp	result1, #0 wz
1e3dc     00 B0 26 56 |  if_ne	not	local06, #0
1e3e0     E7 B0 62 FC | 	wrlong	local06, fp
1e3e4     94 00 90 FD | 	jmp	#LR__2553
1e3e8                 | LR__2550
1e3e8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1e3e8     08 CE 05 F1 | 	add	fp, #8
1e3ec     E7 B0 02 FB | 	rdlong	local06, fp
1e3f0     08 CE 85 F1 | 	sub	fp, #8
1e3f4     1F B0 0E F2 | 	cmp	local06, #31 wz
1e3f8     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e3fc     2C 00 90 5D |  if_ne	jmp	#LR__2551
1e400     00 B0 06 F6 | 	mov	local06, #0
1e404     E7 AC 02 FB | 	rdlong	local04, fp
1e408     53 93 02 F6 | 	mov	arg01, local01
1e40c     D0 F3 BE FD | 	call	#_convertstring
1e410     3D 95 02 F6 | 	mov	arg02, result1
1e414     56 93 02 F6 | 	mov	arg01, local04
1e418     B0 67 B0 FD | 	call	#__system___string_cmp
1e41c     00 7A 0E F2 | 	cmp	result1, #0 wz
1e420     00 B0 26 56 |  if_ne	not	local06, #0
1e424     E7 B0 62 FC | 	wrlong	local06, fp
1e428     50 00 90 FD | 	jmp	#LR__2553
1e42c                 | LR__2551
1e42c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1e42c     08 CE 05 F1 | 	add	fp, #8
1e430     E7 B0 02 FB | 	rdlong	local06, fp
1e434     08 CE 85 F1 | 	sub	fp, #8
1e438     2B B0 0E F2 | 	cmp	local06, #43 wz
1e43c     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e440     34 00 90 5D |  if_ne	jmp	#LR__2552
1e444     00 B0 06 F6 | 	mov	local06, #0
1e448     E7 92 02 FB | 	rdlong	arg01, fp
1e44c     90 F3 BE FD | 	call	#_convertstring
1e450     3D AD 02 F6 | 	mov	local04, result1
1e454     53 93 02 F6 | 	mov	arg01, local01
1e458     84 F3 BE FD | 	call	#_convertstring
1e45c     3D 95 02 F6 | 	mov	arg02, result1
1e460     56 93 02 F6 | 	mov	arg01, local04
1e464     64 67 B0 FD | 	call	#__system___string_cmp
1e468     00 7A 0E F2 | 	cmp	result1, #0 wz
1e46c     00 B0 26 56 |  if_ne	not	local06, #0
1e470     E7 B0 62 FC | 	wrlong	local06, fp
1e474     04 00 90 FD | 	jmp	#LR__2553
1e478                 | LR__2552
1e478     E7 00 68 FC | 	wrlong	#0, fp
1e47c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e47c                 | LR__2553
1e47c     08 CE 05 F1 | 	add	fp, #8
1e480     E7 38 68 FC | 	wrlong	#28, fp
1e484     08 CE 85 F1 | 	sub	fp, #8
1e488     E7 92 02 F6 | 	mov	arg01, fp
1e48c     70 F2 BE FD | 	call	#_push
1e490     E7 F0 03 F6 | 	mov	ptra, fp
1e494     F2 00 A0 FD | 	call	#popregs_
1e498                 | _do_ne_ret
1e498     2D 00 64 FD | 	ret
1e49c                 | 
1e49c                 | ' 
1e49c                 | ' '--------------------------------- OR
1e49c                 | ' 
1e49c                 | ' sub do_or 
1e49c                 | _do_or
1e49c     05 CA 05 F6 | 	mov	COUNT_, #5
1e4a0     E8 00 A0 FD | 	call	#pushregs_
1e4a4     18 F0 07 F1 | 	add	ptra, #24
1e4a8     C4 F1 BE FD | 	call	#_pop
1e4ac     3D A7 02 F6 | 	mov	local01, result1
1e4b0     3E 93 02 F6 | 	mov	arg01, result2
1e4b4     3F AD 02 F6 | 	mov	local04, result3
1e4b8     49 A9 02 F6 | 	mov	local02, arg01
1e4bc     56 AB 02 F6 | 	mov	local03, local04
1e4c0     AC F1 BE FD | 	call	#_pop
1e4c4     3F AF 02 F6 | 	mov	local05, result3
1e4c8     E7 7A 62 FC | 	wrlong	result1, fp
1e4cc     04 CE 05 F1 | 	add	fp, #4
1e4d0     E7 7C 62 FC | 	wrlong	result2, fp
1e4d4     04 CE 05 F1 | 	add	fp, #4
1e4d8     E7 AE 62 FC | 	wrlong	local05, fp
1e4dc                 | ' 
1e4dc                 | ' t2=pop()
1e4dc                 | ' t1=pop()
1e4dc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1e4dc     08 CE 85 F1 | 	sub	fp, #8
1e4e0     1C AE 0E F2 | 	cmp	local05, #28 wz
1e4e4     E7 AE 02 AB |  if_e	rdlong	local05, fp
1e4e8     E7 AE 62 AC |  if_e	wrlong	local05, fp
1e4ec     08 CE 05 A1 |  if_e	add	fp, #8
1e4f0     E7 3A 68 AC |  if_e	wrlong	#29, fp
1e4f4     08 CE 85 A1 |  if_e	sub	fp, #8
1e4f8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1e4f8     1C AA 0E F2 | 	cmp	local03, #28 wz
1e4fc     1D AA 06 A6 |  if_e	mov	local03, #29
1e500                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1e500     08 CE 05 F1 | 	add	fp, #8
1e504     E7 AE 02 FB | 	rdlong	local05, fp
1e508     08 CE 85 F1 | 	sub	fp, #8
1e50c     1F AE 0E F2 | 	cmp	local05, #31 wz
1e510     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e514     08 CE 05 51 |  if_ne	add	fp, #8
1e518     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1e51c     08 CE 85 51 |  if_ne	sub	fp, #8
1e520     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1e524     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1e528     E7 0C 68 AC |  if_e	wrlong	#6, fp
1e52c     08 CE 05 A1 |  if_e	add	fp, #8
1e530     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e534     08 CE 85 A1 |  if_e	sub	fp, #8
1e538     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1e53c     53 AF 42 55 |  if_ne	or	local05, local01
1e540     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1e544     E7 92 02 F6 | 	mov	arg01, fp
1e548     B4 F1 BE FD | 	call	#_push
1e54c     E7 F0 03 F6 | 	mov	ptra, fp
1e550     F2 00 A0 FD | 	call	#popregs_
1e554                 | _do_or_ret
1e554     2D 00 64 FD | 	ret
1e558                 | 
1e558                 | ' 
1e558                 | ' '--------------------------------- plus (+)
1e558                 | ' 
1e558                 | ' sub do_plus 
1e558                 | _do_plus
1e558     07 CA 05 F6 | 	mov	COUNT_, #7
1e55c     E8 00 A0 FD | 	call	#pushregs_
1e560     18 F0 07 F1 | 	add	ptra, #24
1e564     08 F1 BE FD | 	call	#_pop
1e568     3D A7 02 F6 | 	mov	local01, result1
1e56c     3E AD 02 F6 | 	mov	local04, result2
1e570     3F AF 02 F6 | 	mov	local05, result3
1e574     56 A9 02 F6 | 	mov	local02, local04
1e578     57 AB 02 F6 | 	mov	local03, local05
1e57c     F0 F0 BE FD | 	call	#_pop
1e580     3F AF 02 F6 | 	mov	local05, result3
1e584     E7 7A 62 FC | 	wrlong	result1, fp
1e588     04 CE 05 F1 | 	add	fp, #4
1e58c     E7 7C 62 FC | 	wrlong	result2, fp
1e590     04 CE 05 F1 | 	add	fp, #4
1e594     E7 AE 62 FC | 	wrlong	local05, fp
1e598                 | ' 
1e598                 | ' t2=pop()
1e598                 | ' t1=pop()
1e598                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1e598     57 B1 02 F6 | 	mov	local06, local05
1e59c     08 CE 85 F1 | 	sub	fp, #8
1e5a0     1D B0 0E F2 | 	cmp	local06, #29 wz
1e5a4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e5a8     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e5ac     53 B1 02 A1 |  if_e	add	local06, local01
1e5b0     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e5b4     0C 03 90 AD |  if_e	jmp	#LR__2572
1e5b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1e5b8     08 CE 05 F1 | 	add	fp, #8
1e5bc     E7 B0 02 FB | 	rdlong	local06, fp
1e5c0     08 CE 85 F1 | 	sub	fp, #8
1e5c4     1D B0 0E F2 | 	cmp	local06, #29 wz
1e5c8     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e5cc     1C 00 90 5D |  if_ne	jmp	#LR__2560
1e5d0     E7 B0 02 FB | 	rdlong	local06, fp
1e5d4     53 B1 02 F1 | 	add	local06, local01
1e5d8     E7 B0 62 FC | 	wrlong	local06, fp
1e5dc     08 CE 05 F1 | 	add	fp, #8
1e5e0     E7 38 68 FC | 	wrlong	#28, fp
1e5e4     08 CE 85 F1 | 	sub	fp, #8
1e5e8     D8 02 90 FD | 	jmp	#LR__2572
1e5ec                 | LR__2560
1e5ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1e5ec     08 CE 05 F1 | 	add	fp, #8
1e5f0     E7 B0 02 FB | 	rdlong	local06, fp
1e5f4     08 CE 85 F1 | 	sub	fp, #8
1e5f8     1D B0 0E F2 | 	cmp	local06, #29 wz
1e5fc     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e600     28 00 90 5D |  if_ne	jmp	#LR__2561
1e604     E7 92 02 FB | 	rdlong	arg01, fp
1e608     64 88 B0 FD | 	call	#__system___float_fromuns
1e60c     3D 93 02 F6 | 	mov	arg01, result1
1e610     53 95 02 F6 | 	mov	arg02, local01
1e614     8C 88 B0 FD | 	call	#__system___float_add
1e618     E7 7A 62 FC | 	wrlong	result1, fp
1e61c     08 CE 05 F1 | 	add	fp, #8
1e620     E7 3C 68 FC | 	wrlong	#30, fp
1e624     08 CE 85 F1 | 	sub	fp, #8
1e628     98 02 90 FD | 	jmp	#LR__2572
1e62c                 | LR__2561
1e62c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1e62c     08 CE 05 F1 | 	add	fp, #8
1e630     E7 B0 02 FB | 	rdlong	local06, fp
1e634     08 CE 85 F1 | 	sub	fp, #8
1e638     1C B0 0E F2 | 	cmp	local06, #28 wz
1e63c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e640     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e644     53 B1 02 A1 |  if_e	add	local06, local01
1e648     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e64c     74 02 90 AD |  if_e	jmp	#LR__2572
1e650                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1e650     08 CE 05 F1 | 	add	fp, #8
1e654     E7 B0 02 FB | 	rdlong	local06, fp
1e658     08 CE 85 F1 | 	sub	fp, #8
1e65c     1C B0 0E F2 | 	cmp	local06, #28 wz
1e660     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e664     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e668     53 B1 02 A1 |  if_e	add	local06, local01
1e66c     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e670     50 02 90 AD |  if_e	jmp	#LR__2572
1e674                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1e674     08 CE 05 F1 | 	add	fp, #8
1e678     E7 B0 02 FB | 	rdlong	local06, fp
1e67c     08 CE 85 F1 | 	sub	fp, #8
1e680     1C B0 0E F2 | 	cmp	local06, #28 wz
1e684     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e688     38 00 90 5D |  if_ne	jmp	#LR__2562
1e68c     E7 92 02 FB | 	rdlong	arg01, fp
1e690     49 93 52 F6 | 	abs	arg01, arg01 wc
1e694     1F B2 C6 C9 |  if_b	decod	local07, #31
1e698     00 B2 06 36 |  if_ae	mov	local07, #0
1e69c     D0 87 B0 FD | 	call	#__system___float_fromuns
1e6a0     59 7B 62 F5 | 	xor	result1, local07
1e6a4     3D 93 02 F6 | 	mov	arg01, result1
1e6a8     53 95 02 F6 | 	mov	arg02, local01
1e6ac     F4 87 B0 FD | 	call	#__system___float_add
1e6b0     E7 7A 62 FC | 	wrlong	result1, fp
1e6b4     08 CE 05 F1 | 	add	fp, #8
1e6b8     E7 3C 68 FC | 	wrlong	#30, fp
1e6bc     08 CE 85 F1 | 	sub	fp, #8
1e6c0     00 02 90 FD | 	jmp	#LR__2572
1e6c4                 | LR__2562
1e6c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1e6c4     08 CE 05 F1 | 	add	fp, #8
1e6c8     E7 B0 02 FB | 	rdlong	local06, fp
1e6cc     08 CE 85 F1 | 	sub	fp, #8
1e6d0     1E B0 0E F2 | 	cmp	local06, #30 wz
1e6d4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e6d8     20 00 90 5D |  if_ne	jmp	#LR__2563
1e6dc     E7 B0 02 FB | 	rdlong	local06, fp
1e6e0     53 93 02 F6 | 	mov	arg01, local01
1e6e4     88 87 B0 FD | 	call	#__system___float_fromuns
1e6e8     3D 95 02 F6 | 	mov	arg02, result1
1e6ec     58 93 02 F6 | 	mov	arg01, local06
1e6f0     B0 87 B0 FD | 	call	#__system___float_add
1e6f4     E7 7A 62 FC | 	wrlong	result1, fp
1e6f8     C8 01 90 FD | 	jmp	#LR__2572
1e6fc                 | LR__2563
1e6fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1e6fc     08 CE 05 F1 | 	add	fp, #8
1e700     E7 B0 02 FB | 	rdlong	local06, fp
1e704     08 CE 85 F1 | 	sub	fp, #8
1e708     1E B0 0E F2 | 	cmp	local06, #30 wz
1e70c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e710     2C 00 90 5D |  if_ne	jmp	#LR__2564
1e714     E7 B0 02 FB | 	rdlong	local06, fp
1e718     53 93 52 F6 | 	abs	arg01, local01 wc
1e71c     1F B2 C6 C9 |  if_b	decod	local07, #31
1e720     00 B2 06 36 |  if_ae	mov	local07, #0
1e724     48 87 B0 FD | 	call	#__system___float_fromuns
1e728     59 7B 62 F5 | 	xor	result1, local07
1e72c     3D 95 02 F6 | 	mov	arg02, result1
1e730     58 93 02 F6 | 	mov	arg01, local06
1e734     6C 87 B0 FD | 	call	#__system___float_add
1e738     E7 7A 62 FC | 	wrlong	result1, fp
1e73c     84 01 90 FD | 	jmp	#LR__2572
1e740                 | LR__2564
1e740                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1e740     08 CE 05 F1 | 	add	fp, #8
1e744     E7 B0 02 FB | 	rdlong	local06, fp
1e748     08 CE 85 F1 | 	sub	fp, #8
1e74c     1E B0 0E F2 | 	cmp	local06, #30 wz
1e750     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e754     14 00 90 5D |  if_ne	jmp	#LR__2565
1e758     E7 92 02 FB | 	rdlong	arg01, fp
1e75c     53 95 02 F6 | 	mov	arg02, local01
1e760     40 87 B0 FD | 	call	#__system___float_add
1e764     E7 7A 62 FC | 	wrlong	result1, fp
1e768     58 01 90 FD | 	jmp	#LR__2572
1e76c                 | LR__2565
1e76c                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1e76c     08 CE 05 F1 | 	add	fp, #8
1e770     E7 B0 02 FB | 	rdlong	local06, fp
1e774     08 CE 85 F1 | 	sub	fp, #8
1e778     1F B0 0E F2 | 	cmp	local06, #31 wz
1e77c     18 00 90 5D |  if_ne	jmp	#LR__2566
1e780     1F AA 0E F2 | 	cmp	local03, #31 wz
1e784     E7 04 68 5C |  if_ne	wrlong	#2, fp
1e788     08 CE 05 51 |  if_ne	add	fp, #8
1e78c     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1e790     08 CE 85 51 |  if_ne	sub	fp, #8
1e794     2C 01 90 5D |  if_ne	jmp	#LR__2572
1e798                 | LR__2566
1e798                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1e798     1F AA 0E F2 | 	cmp	local03, #31 wz
1e79c     24 00 90 5D |  if_ne	jmp	#LR__2567
1e7a0     08 CE 05 F1 | 	add	fp, #8
1e7a4     E7 B0 02 FB | 	rdlong	local06, fp
1e7a8     08 CE 85 F1 | 	sub	fp, #8
1e7ac     1F B0 0E F2 | 	cmp	local06, #31 wz
1e7b0     E7 04 68 5C |  if_ne	wrlong	#2, fp
1e7b4     08 CE 05 51 |  if_ne	add	fp, #8
1e7b8     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1e7bc     08 CE 85 51 |  if_ne	sub	fp, #8
1e7c0     00 01 90 5D |  if_ne	jmp	#LR__2572
1e7c4                 | LR__2567
1e7c4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1e7c4     08 CE 05 F1 | 	add	fp, #8
1e7c8     E7 B0 02 FB | 	rdlong	local06, fp
1e7cc     08 CE 85 F1 | 	sub	fp, #8
1e7d0     1F B0 0E F2 | 	cmp	local06, #31 wz
1e7d4     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e7d8     14 00 90 5D |  if_ne	jmp	#LR__2568
1e7dc     E7 92 02 FB | 	rdlong	arg01, fp
1e7e0     53 95 02 F6 | 	mov	arg02, local01
1e7e4     18 64 B0 FD | 	call	#__system___string_concat
1e7e8     E7 7A 62 FC | 	wrlong	result1, fp
1e7ec     D4 00 90 FD | 	jmp	#LR__2572
1e7f0                 | LR__2568
1e7f0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1e7f0     08 CE 05 F1 | 	add	fp, #8
1e7f4     E7 B0 02 FB | 	rdlong	local06, fp
1e7f8     08 CE 85 F1 | 	sub	fp, #8
1e7fc     2B B0 0E F2 | 	cmp	local06, #43 wz
1e800     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e804     28 00 90 5D |  if_ne	jmp	#LR__2569
1e808     E7 92 02 FB | 	rdlong	arg01, fp
1e80c     D0 EF BE FD | 	call	#_convertstring
1e810     3D 93 02 F6 | 	mov	arg01, result1
1e814     53 95 02 F6 | 	mov	arg02, local01
1e818     E4 63 B0 FD | 	call	#__system___string_concat
1e81c     E7 7A 62 FC | 	wrlong	result1, fp
1e820     08 CE 05 F1 | 	add	fp, #8
1e824     E7 3E 68 FC | 	wrlong	#31, fp
1e828     08 CE 85 F1 | 	sub	fp, #8
1e82c     94 00 90 FD | 	jmp	#LR__2572
1e830                 | LR__2569
1e830                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1e830     08 CE 05 F1 | 	add	fp, #8
1e834     E7 B0 02 FB | 	rdlong	local06, fp
1e838     08 CE 85 F1 | 	sub	fp, #8
1e83c     1F B0 0E F2 | 	cmp	local06, #31 wz
1e840     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e844     20 00 90 5D |  if_ne	jmp	#LR__2570
1e848     E7 B0 02 FB | 	rdlong	local06, fp
1e84c     53 93 02 F6 | 	mov	arg01, local01
1e850     8C EF BE FD | 	call	#_convertstring
1e854     3D 95 02 F6 | 	mov	arg02, result1
1e858     58 93 02 F6 | 	mov	arg01, local06
1e85c     A0 63 B0 FD | 	call	#__system___string_concat
1e860     E7 7A 62 FC | 	wrlong	result1, fp
1e864     5C 00 90 FD | 	jmp	#LR__2572
1e868                 | LR__2570
1e868                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1e868     08 CE 05 F1 | 	add	fp, #8
1e86c     E7 B0 02 FB | 	rdlong	local06, fp
1e870     08 CE 85 F1 | 	sub	fp, #8
1e874     2B B0 0E F2 | 	cmp	local06, #43 wz
1e878     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e87c     34 00 90 5D |  if_ne	jmp	#LR__2571
1e880     E7 92 02 FB | 	rdlong	arg01, fp
1e884     58 EF BE FD | 	call	#_convertstring
1e888     3D B1 02 F6 | 	mov	local06, result1
1e88c     53 93 02 F6 | 	mov	arg01, local01
1e890     4C EF BE FD | 	call	#_convertstring
1e894     3D 95 02 F6 | 	mov	arg02, result1
1e898     58 93 02 F6 | 	mov	arg01, local06
1e89c     60 63 B0 FD | 	call	#__system___string_concat
1e8a0     E7 7A 62 FC | 	wrlong	result1, fp
1e8a4     08 CE 05 F1 | 	add	fp, #8
1e8a8     E7 3E 68 FC | 	wrlong	#31, fp
1e8ac     08 CE 85 F1 | 	sub	fp, #8
1e8b0     10 00 90 FD | 	jmp	#LR__2572
1e8b4                 | LR__2571
1e8b4     E7 08 68 FC | 	wrlong	#4, fp
1e8b8     08 CE 05 F1 | 	add	fp, #8
1e8bc     E7 FE 69 FC | 	wrlong	#255, fp
1e8c0     08 CE 85 F1 | 	sub	fp, #8
1e8c4                 | LR__2572
1e8c4     E7 92 02 F6 | 	mov	arg01, fp
1e8c8     34 EE BE FD | 	call	#_push
1e8cc     E7 F0 03 F6 | 	mov	ptra, fp
1e8d0     F2 00 A0 FD | 	call	#popregs_
1e8d4                 | _do_plus_ret
1e8d4     2D 00 64 FD | 	ret
1e8d8                 | 
1e8d8                 | ' 
1e8d8                 | ' '--------------------------------- power (^)
1e8d8                 | ' 
1e8d8                 | ' sub do_power 
1e8d8                 | _do_power
1e8d8     04 CA 05 F6 | 	mov	COUNT_, #4
1e8dc     E8 00 A0 FD | 	call	#pushregs_
1e8e0     18 F0 07 F1 | 	add	ptra, #24
1e8e4     88 ED BE FD | 	call	#_pop
1e8e8     3D A7 02 F6 | 	mov	local01, result1
1e8ec     3E 95 02 F6 | 	mov	arg02, result2
1e8f0     3F 93 02 F6 | 	mov	arg01, result3
1e8f4     4A A9 02 F6 | 	mov	local02, arg02
1e8f8     49 AB 02 F6 | 	mov	local03, arg01
1e8fc     70 ED BE FD | 	call	#_pop
1e900     E7 7A 62 FC | 	wrlong	result1, fp
1e904     04 CE 05 F1 | 	add	fp, #4
1e908     E7 7C 62 FC | 	wrlong	result2, fp
1e90c     04 CE 05 F1 | 	add	fp, #4
1e910     E7 7E 62 FC | 	wrlong	result3, fp
1e914                 | ' 
1e914                 | ' t2=pop()
1e914                 | ' t1=pop()
1e914                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1e914     08 CE 85 F1 | 	sub	fp, #8
1e918     1F 7E 0E F2 | 	cmp	result3, #31 wz
1e91c     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e920     E7 18 68 AC |  if_e	wrlong	#12, fp
1e924     08 CE 05 A1 |  if_e	add	fp, #8
1e928     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e92c     08 CE 85 A1 |  if_e	sub	fp, #8
1e930     E0 00 90 AD |  if_e	jmp	#LR__2585
1e934                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1e934     08 CE 05 F1 | 	add	fp, #8
1e938     E7 94 02 FB | 	rdlong	arg02, fp
1e93c     08 CE 85 F1 | 	sub	fp, #8
1e940     1C 94 0E F2 | 	cmp	arg02, #28 wz
1e944     28 00 90 5D |  if_ne	jmp	#LR__2580
1e948     08 CE 05 F1 | 	add	fp, #8
1e94c     E7 3C 68 FC | 	wrlong	#30, fp
1e950     08 CE 85 F1 | 	sub	fp, #8
1e954     E7 92 02 FB | 	rdlong	arg01, fp
1e958     49 93 52 F6 | 	abs	arg01, arg01 wc
1e95c     1F AC C6 C9 |  if_b	decod	local04, #31
1e960     00 AC 06 36 |  if_ae	mov	local04, #0
1e964     08 85 B0 FD | 	call	#__system___float_fromuns
1e968     56 7B 62 F5 | 	xor	result1, local04
1e96c     E7 7A 62 FC | 	wrlong	result1, fp
1e970                 | LR__2580
1e970                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1e970     08 CE 05 F1 | 	add	fp, #8
1e974     E7 94 02 FB | 	rdlong	arg02, fp
1e978     08 CE 85 F1 | 	sub	fp, #8
1e97c     1D 94 0E F2 | 	cmp	arg02, #29 wz
1e980     18 00 90 5D |  if_ne	jmp	#LR__2581
1e984     08 CE 05 F1 | 	add	fp, #8
1e988     E7 3C 68 FC | 	wrlong	#30, fp
1e98c     08 CE 85 F1 | 	sub	fp, #8
1e990     E7 92 02 FB | 	rdlong	arg01, fp
1e994     D8 84 B0 FD | 	call	#__system___float_fromuns
1e998     E7 7A 62 FC | 	wrlong	result1, fp
1e99c                 | LR__2581
1e99c                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1e99c     1C AA 0E F2 | 	cmp	local03, #28 wz
1e9a0     1C 00 90 5D |  if_ne	jmp	#LR__2582
1e9a4     1E AA 06 F6 | 	mov	local03, #30
1e9a8     53 93 52 F6 | 	abs	arg01, local01 wc
1e9ac     1F AC C6 C9 |  if_b	decod	local04, #31
1e9b0     00 AC 06 36 |  if_ae	mov	local04, #0
1e9b4     B8 84 B0 FD | 	call	#__system___float_fromuns
1e9b8     56 7B 62 F5 | 	xor	result1, local04
1e9bc     3D A7 02 F6 | 	mov	local01, result1
1e9c0                 | LR__2582
1e9c0                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1e9c0     1D AA 0E F2 | 	cmp	local03, #29 wz
1e9c4     10 00 90 5D |  if_ne	jmp	#LR__2583
1e9c8     1E AA 06 F6 | 	mov	local03, #30
1e9cc     53 93 02 F6 | 	mov	arg01, local01
1e9d0     9C 84 B0 FD | 	call	#__system___float_fromuns
1e9d4     3D A7 02 F6 | 	mov	local01, result1
1e9d8                 | LR__2583
1e9d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1e9d8     08 CE 05 F1 | 	add	fp, #8
1e9dc     E7 94 02 FB | 	rdlong	arg02, fp
1e9e0     08 CE 85 F1 | 	sub	fp, #8
1e9e4     1E 94 0E F2 | 	cmp	arg02, #30 wz
1e9e8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e9ec     14 00 90 5D |  if_ne	jmp	#LR__2584
1e9f0     E7 92 02 FB | 	rdlong	arg01, fp
1e9f4     53 95 02 F6 | 	mov	arg02, local01
1e9f8     90 97 B0 FD | 	call	#__system____builtin_powf
1e9fc     E7 7A 62 FC | 	wrlong	result1, fp
1ea00     10 00 90 FD | 	jmp	#LR__2585
1ea04                 | LR__2584
1ea04     E7 1A 68 FC | 	wrlong	#13, fp
1ea08     08 CE 05 F1 | 	add	fp, #8
1ea0c     E7 FE 69 FC | 	wrlong	#255, fp
1ea10     08 CE 85 F1 | 	sub	fp, #8
1ea14                 | LR__2585
1ea14     E7 92 02 F6 | 	mov	arg01, fp
1ea18     E4 EC BE FD | 	call	#_push
1ea1c     E7 F0 03 F6 | 	mov	ptra, fp
1ea20     F2 00 A0 FD | 	call	#popregs_
1ea24                 | _do_power_ret
1ea24     2D 00 64 FD | 	ret
1ea28                 | 
1ea28                 | ' 
1ea28                 | ' '--------------------------------- SHL
1ea28                 | ' 
1ea28                 | ' sub do_shl 
1ea28                 | _do_shl
1ea28     05 CA 05 F6 | 	mov	COUNT_, #5
1ea2c     E8 00 A0 FD | 	call	#pushregs_
1ea30     18 F0 07 F1 | 	add	ptra, #24
1ea34     38 EC BE FD | 	call	#_pop
1ea38     3D A7 02 F6 | 	mov	local01, result1
1ea3c     3E 93 02 F6 | 	mov	arg01, result2
1ea40     3F AD 02 F6 | 	mov	local04, result3
1ea44     49 A9 02 F6 | 	mov	local02, arg01
1ea48     56 AB 02 F6 | 	mov	local03, local04
1ea4c     20 EC BE FD | 	call	#_pop
1ea50     3F AF 02 F6 | 	mov	local05, result3
1ea54     E7 7A 62 FC | 	wrlong	result1, fp
1ea58     04 CE 05 F1 | 	add	fp, #4
1ea5c     E7 7C 62 FC | 	wrlong	result2, fp
1ea60     04 CE 05 F1 | 	add	fp, #4
1ea64     E7 AE 62 FC | 	wrlong	local05, fp
1ea68                 | ' 
1ea68                 | ' t2=pop()
1ea68                 | ' t1=pop()
1ea68                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1ea68     08 CE 85 F1 | 	sub	fp, #8
1ea6c     1C AE 0E F2 | 	cmp	local05, #28 wz
1ea70     E7 AE 02 AB |  if_e	rdlong	local05, fp
1ea74     E7 AE 62 AC |  if_e	wrlong	local05, fp
1ea78     08 CE 05 A1 |  if_e	add	fp, #8
1ea7c     E7 3A 68 AC |  if_e	wrlong	#29, fp
1ea80     08 CE 85 A1 |  if_e	sub	fp, #8
1ea84                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1ea84     1C AA 0E F2 | 	cmp	local03, #28 wz
1ea88     1D AA 06 A6 |  if_e	mov	local03, #29
1ea8c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1ea8c     08 CE 05 F1 | 	add	fp, #8
1ea90     E7 AE 02 FB | 	rdlong	local05, fp
1ea94     08 CE 85 F1 | 	sub	fp, #8
1ea98     1F AE 0E F2 | 	cmp	local05, #31 wz
1ea9c     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1eaa0     08 CE 05 51 |  if_ne	add	fp, #8
1eaa4     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1eaa8     08 CE 85 51 |  if_ne	sub	fp, #8
1eaac     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1eab0     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1eab4     E7 0C 68 AC |  if_e	wrlong	#6, fp
1eab8     08 CE 05 A1 |  if_e	add	fp, #8
1eabc     E7 FE 69 AC |  if_e	wrlong	#255, fp
1eac0     08 CE 85 A1 |  if_e	sub	fp, #8
1eac4     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1eac8     53 AF 62 50 |  if_ne	shl	local05, local01
1eacc     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1ead0     E7 92 02 F6 | 	mov	arg01, fp
1ead4     28 EC BE FD | 	call	#_push
1ead8     E7 F0 03 F6 | 	mov	ptra, fp
1eadc     F2 00 A0 FD | 	call	#popregs_
1eae0                 | _do_shl_ret
1eae0     2D 00 64 FD | 	ret
1eae4                 | 
1eae4                 | ' 
1eae4                 | ' '--------------------------------- SHR
1eae4                 | ' 
1eae4                 | ' sub do_shr 
1eae4                 | _do_shr
1eae4     05 CA 05 F6 | 	mov	COUNT_, #5
1eae8     E8 00 A0 FD | 	call	#pushregs_
1eaec     18 F0 07 F1 | 	add	ptra, #24
1eaf0     7C EB BE FD | 	call	#_pop
1eaf4     3D A7 02 F6 | 	mov	local01, result1
1eaf8     3E 93 02 F6 | 	mov	arg01, result2
1eafc     3F AD 02 F6 | 	mov	local04, result3
1eb00     49 A9 02 F6 | 	mov	local02, arg01
1eb04     56 AB 02 F6 | 	mov	local03, local04
1eb08     64 EB BE FD | 	call	#_pop
1eb0c     3F AF 02 F6 | 	mov	local05, result3
1eb10     E7 7A 62 FC | 	wrlong	result1, fp
1eb14     04 CE 05 F1 | 	add	fp, #4
1eb18     E7 7C 62 FC | 	wrlong	result2, fp
1eb1c     04 CE 05 F1 | 	add	fp, #4
1eb20     E7 AE 62 FC | 	wrlong	local05, fp
1eb24                 | ' 
1eb24                 | ' t2=pop()
1eb24                 | ' t1=pop()
1eb24                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1eb24     08 CE 85 F1 | 	sub	fp, #8
1eb28     1C AE 0E F2 | 	cmp	local05, #28 wz
1eb2c     E7 AE 02 AB |  if_e	rdlong	local05, fp
1eb30     E7 AE 62 AC |  if_e	wrlong	local05, fp
1eb34     08 CE 05 A1 |  if_e	add	fp, #8
1eb38     E7 3A 68 AC |  if_e	wrlong	#29, fp
1eb3c     08 CE 85 A1 |  if_e	sub	fp, #8
1eb40                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1eb40     1C AA 0E F2 | 	cmp	local03, #28 wz
1eb44     1D AA 06 A6 |  if_e	mov	local03, #29
1eb48                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1eb48     08 CE 05 F1 | 	add	fp, #8
1eb4c     E7 AE 02 FB | 	rdlong	local05, fp
1eb50     08 CE 85 F1 | 	sub	fp, #8
1eb54     1F AE 0E F2 | 	cmp	local05, #31 wz
1eb58     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1eb5c     08 CE 05 51 |  if_ne	add	fp, #8
1eb60     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1eb64     08 CE 85 51 |  if_ne	sub	fp, #8
1eb68     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1eb6c     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1eb70     E7 0C 68 AC |  if_e	wrlong	#6, fp
1eb74     08 CE 05 A1 |  if_e	add	fp, #8
1eb78     E7 FE 69 AC |  if_e	wrlong	#255, fp
1eb7c     08 CE 85 A1 |  if_e	sub	fp, #8
1eb80     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1eb84     53 AF 42 50 |  if_ne	shr	local05, local01
1eb88     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1eb8c     E7 92 02 F6 | 	mov	arg01, fp
1eb90     6C EB BE FD | 	call	#_push
1eb94     E7 F0 03 F6 | 	mov	ptra, fp
1eb98     F2 00 A0 FD | 	call	#popregs_
1eb9c                 | _do_shr_ret
1eb9c     2D 00 64 FD | 	ret
1eba0                 | 
1eba0                 | ' 
1eba0                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1eba0                 | ' 
1eba0                 | ' ''----------------------------------------------------------------------------------------------------
1eba0                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1eba0                 | ' ''----------------------------------------------------------------------------------------------------
1eba0                 | ' 
1eba0                 | ' ''--------------------------- Command function pointers
1eba0                 | ' 
1eba0                 | ' sub init_commands
1eba0                 | _init_commands
1eba0                 | ' 
1eba0                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1eba0     00 80 06 F6 | 	mov	_var01, #0
1eba4     D7 14 48 FB | 	callpa	#(@LR__2591-@LR__2590)>>2,fcache_load_ptr_
1eba8                 | LR__2590
1eba8     40 7B 02 F6 | 	mov	result1, _var01
1ebac     02 7A 66 F0 | 	shl	result1, #2
1ebb0     32 95 02 F6 | 	mov	arg02, objptr
1ebb4     45 00 00 FF 
1ebb8     04 94 06 F1 | 	add	arg02, ##35332
1ebbc     4A 7B 02 F1 | 	add	result1, arg02
1ebc0     3D 65 62 FC | 	wrlong	objptr, result1
1ebc4     01 80 06 F1 | 	add	_var01, #1
1ebc8     00 81 56 F2 | 	cmps	_var01, #256 wc
1ebcc     D8 FF 9F CD |  if_b	jmp	#LR__2590
1ebd0                 | LR__2591
1ebd0     32 7B 02 F6 | 	mov	result1, objptr
1ebd4     14 7A 26 F4 | 	bith	result1, #20
1ebd8     45 00 00 FF 
1ebdc     08 64 06 F1 | 	add	objptr, ##35336
1ebe0     32 7B 62 FC | 	wrlong	result1, objptr
1ebe4     45 00 00 FF 
1ebe8     08 64 86 F1 | 	sub	objptr, ##35336
1ebec     32 7B 02 F6 | 	mov	result1, objptr
1ebf0     15 7A 26 F4 | 	bith	result1, #21
1ebf4     45 00 00 FF 
1ebf8     0C 64 06 F1 | 	add	objptr, ##35340
1ebfc     32 7B 62 FC | 	wrlong	result1, objptr
1ec00     45 00 00 FF 
1ec04     0C 64 86 F1 | 	sub	objptr, ##35340
1ec08     32 7B 02 F6 | 	mov	result1, objptr
1ec0c     34 7A 26 F4 | 	bith	result1, #52
1ec10     45 00 00 FF 
1ec14     10 64 06 F1 | 	add	objptr, ##35344
1ec18     32 7B 62 FC | 	wrlong	result1, objptr
1ec1c     45 00 00 FF 
1ec20     10 64 86 F1 | 	sub	objptr, ##35344
1ec24     32 7B 02 F6 | 	mov	result1, objptr
1ec28     16 7A 26 F4 | 	bith	result1, #22
1ec2c     45 00 00 FF 
1ec30     18 64 06 F1 | 	add	objptr, ##35352
1ec34     32 7B 62 FC | 	wrlong	result1, objptr
1ec38     45 00 00 FF 
1ec3c     18 64 86 F1 | 	sub	objptr, ##35352
1ec40     32 7B 02 F6 | 	mov	result1, objptr
1ec44     00 28 00 FF 
1ec48     00 7A 46 F5 | 	or	result1, ##5242880
1ec4c     45 00 00 FF 
1ec50     1C 64 06 F1 | 	add	objptr, ##35356
1ec54     32 7B 62 FC | 	wrlong	result1, objptr
1ec58     45 00 00 FF 
1ec5c     1C 64 86 F1 | 	sub	objptr, ##35356
1ec60     32 7B 02 F6 | 	mov	result1, objptr
1ec64     35 7A 26 F4 | 	bith	result1, #53
1ec68     45 00 00 FF 
1ec6c     20 64 06 F1 | 	add	objptr, ##35360
1ec70     32 7B 62 FC | 	wrlong	result1, objptr
1ec74     45 00 00 FF 
1ec78     20 64 86 F1 | 	sub	objptr, ##35360
1ec7c     32 7B 02 F6 | 	mov	result1, objptr
1ec80     54 7A 26 F4 | 	bith	result1, #84
1ec84     45 00 00 FF 
1ec88     24 64 06 F1 | 	add	objptr, ##35364
1ec8c     32 7B 62 FC | 	wrlong	result1, objptr
1ec90     45 00 00 FF 
1ec94     24 64 86 F1 | 	sub	objptr, ##35364
1ec98     32 7B 02 F6 | 	mov	result1, objptr
1ec9c     17 7A 26 F4 | 	bith	result1, #23
1eca0     45 00 00 FF 
1eca4     28 64 06 F1 | 	add	objptr, ##35368
1eca8     32 7B 62 FC | 	wrlong	result1, objptr
1ecac     45 00 00 FF 
1ecb0     28 64 86 F1 | 	sub	objptr, ##35368
1ecb4     32 7B 02 F6 | 	mov	result1, objptr
1ecb8     00 48 00 FF 
1ecbc     00 7A 46 F5 | 	or	result1, ##9437184
1ecc0     45 00 00 FF 
1ecc4     2C 64 06 F1 | 	add	objptr, ##35372
1ecc8     32 7B 62 FC | 	wrlong	result1, objptr
1eccc     45 00 00 FF 
1ecd0     2C 64 86 F1 | 	sub	objptr, ##35372
1ecd4     32 7B 02 F6 | 	mov	result1, objptr
1ecd8     00 50 00 FF 
1ecdc     00 7A 46 F5 | 	or	result1, ##10485760
1ece0     45 00 00 FF 
1ece4     30 64 06 F1 | 	add	objptr, ##35376
1ece8     32 7B 62 FC | 	wrlong	result1, objptr
1ecec     45 00 00 FF 
1ecf0     30 64 86 F1 | 	sub	objptr, ##35376
1ecf4     32 7B 02 F6 | 	mov	result1, objptr
1ecf8     00 58 00 FF 
1ecfc     00 7A 46 F5 | 	or	result1, ##11534336
1ed00     45 00 00 FF 
1ed04     34 64 06 F1 | 	add	objptr, ##35380
1ed08     32 7B 62 FC | 	wrlong	result1, objptr
1ed0c     45 00 00 FF 
1ed10     34 64 86 F1 | 	sub	objptr, ##35380
1ed14     32 7B 02 F6 | 	mov	result1, objptr
1ed18     36 7A 26 F4 | 	bith	result1, #54
1ed1c     45 00 00 FF 
1ed20     48 64 06 F1 | 	add	objptr, ##35400
1ed24     32 7B 62 FC | 	wrlong	result1, objptr
1ed28     45 00 00 FF 
1ed2c     48 64 86 F1 | 	sub	objptr, ##35400
1ed30     32 7B 02 F6 | 	mov	result1, objptr
1ed34     00 68 00 FF 
1ed38     00 7A 46 F5 | 	or	result1, ##13631488
1ed3c     45 00 00 FF 
1ed40     78 64 06 F1 | 	add	objptr, ##35448
1ed44     32 7B 62 FC | 	wrlong	result1, objptr
1ed48     45 00 00 FF 
1ed4c     78 64 86 F1 | 	sub	objptr, ##35448
1ed50     32 7B 02 F6 | 	mov	result1, objptr
1ed54     00 68 00 FF 
1ed58     00 7A 46 F5 | 	or	result1, ##13631488
1ed5c     45 00 00 FF 
1ed60     74 64 06 F1 | 	add	objptr, ##35444
1ed64     32 7B 62 FC | 	wrlong	result1, objptr
1ed68     45 00 00 FF 
1ed6c     74 64 86 F1 | 	sub	objptr, ##35444
1ed70     32 7B 02 F6 | 	mov	result1, objptr
1ed74     00 68 00 FF 
1ed78     00 7A 46 F5 | 	or	result1, ##13631488
1ed7c     45 00 00 FF 
1ed80     7C 64 06 F1 | 	add	objptr, ##35452
1ed84     32 7B 62 FC | 	wrlong	result1, objptr
1ed88     45 00 00 FF 
1ed8c     7C 64 86 F1 | 	sub	objptr, ##35452
1ed90     32 7B 02 F6 | 	mov	result1, objptr
1ed94     00 68 00 FF 
1ed98     00 7A 46 F5 | 	or	result1, ##13631488
1ed9c     45 00 00 FF 
1eda0     80 64 06 F1 | 	add	objptr, ##35456
1eda4     32 7B 62 FC | 	wrlong	result1, objptr
1eda8     45 00 00 FF 
1edac     80 64 86 F1 | 	sub	objptr, ##35456
1edb0     32 7B 02 F6 | 	mov	result1, objptr
1edb4     00 68 00 FF 
1edb8     00 7A 46 F5 | 	or	result1, ##13631488
1edbc     45 00 00 FF 
1edc0     B0 64 06 F1 | 	add	objptr, ##35504
1edc4     32 7B 62 FC | 	wrlong	result1, objptr
1edc8     45 00 00 FF 
1edcc     B0 64 86 F1 | 	sub	objptr, ##35504
1edd0     32 7B 02 F6 | 	mov	result1, objptr
1edd4     55 7A 26 F4 | 	bith	result1, #85
1edd8     45 00 00 FF 
1eddc     60 64 06 F1 | 	add	objptr, ##35424
1ede0     32 7B 62 FC | 	wrlong	result1, objptr
1ede4     45 00 00 FF 
1ede8     60 64 86 F1 | 	sub	objptr, ##35424
1edec     32 7B 02 F6 | 	mov	result1, objptr
1edf0     00 68 00 FF 
1edf4     00 7A 46 F5 | 	or	result1, ##13631488
1edf8     45 00 00 FF 
1edfc     B4 64 06 F1 | 	add	objptr, ##35508
1ee00     32 7B 62 FC | 	wrlong	result1, objptr
1ee04     45 00 00 FF 
1ee08     B4 64 86 F1 | 	sub	objptr, ##35508
1ee0c     32 7B 02 F6 | 	mov	result1, objptr
1ee10     00 68 00 FF 
1ee14     00 7A 46 F5 | 	or	result1, ##13631488
1ee18     45 00 00 FF 
1ee1c     84 64 06 F1 | 	add	objptr, ##35460
1ee20     32 7B 62 FC | 	wrlong	result1, objptr
1ee24     45 00 00 FF 
1ee28     84 64 86 F1 | 	sub	objptr, ##35460
1ee2c     32 7B 02 F6 | 	mov	result1, objptr
1ee30     00 68 00 FF 
1ee34     00 7A 46 F5 | 	or	result1, ##13631488
1ee38     45 00 00 FF 
1ee3c     88 64 06 F1 | 	add	objptr, ##35464
1ee40     32 7B 62 FC | 	wrlong	result1, objptr
1ee44     45 00 00 FF 
1ee48     88 64 86 F1 | 	sub	objptr, ##35464
1ee4c     32 7B 02 F6 | 	mov	result1, objptr
1ee50     00 68 00 FF 
1ee54     00 7A 46 F5 | 	or	result1, ##13631488
1ee58     45 00 00 FF 
1ee5c     8C 64 06 F1 | 	add	objptr, ##35468
1ee60     32 7B 62 FC | 	wrlong	result1, objptr
1ee64     45 00 00 FF 
1ee68     8C 64 86 F1 | 	sub	objptr, ##35468
1ee6c     32 7B 02 F6 | 	mov	result1, objptr
1ee70     74 7A 26 F4 | 	bith	result1, #116
1ee74     45 00 00 FF 
1ee78     04 65 06 F1 | 	add	objptr, ##35588
1ee7c     32 7B 62 FC | 	wrlong	result1, objptr
1ee80     45 00 00 FF 
1ee84     04 65 86 F1 | 	sub	objptr, ##35588
1ee88     32 7B 02 F6 | 	mov	result1, objptr
1ee8c     18 7A 26 F4 | 	bith	result1, #24
1ee90     45 00 00 FF 
1ee94     08 65 06 F1 | 	add	objptr, ##35592
1ee98     32 7B 62 FC | 	wrlong	result1, objptr
1ee9c     45 00 00 FF 
1eea0     08 65 86 F1 | 	sub	objptr, ##35592
1eea4     32 7B 02 F6 | 	mov	result1, objptr
1eea8     00 88 00 FF 
1eeac     00 7A 46 F5 | 	or	result1, ##17825792
1eeb0     45 00 00 FF 
1eeb4     0C 65 06 F1 | 	add	objptr, ##35596
1eeb8     32 7B 62 FC | 	wrlong	result1, objptr
1eebc     45 00 00 FF 
1eec0     0C 65 86 F1 | 	sub	objptr, ##35596
1eec4     32 7B 02 F6 | 	mov	result1, objptr
1eec8     00 90 00 FF 
1eecc     00 7A 46 F5 | 	or	result1, ##18874368
1eed0     45 00 00 FF 
1eed4     10 65 06 F1 | 	add	objptr, ##35600
1eed8     32 7B 62 FC | 	wrlong	result1, objptr
1eedc     45 00 00 FF 
1eee0     10 65 86 F1 | 	sub	objptr, ##35600
1eee4     32 7B 02 F6 | 	mov	result1, objptr
1eee8     00 98 00 FF 
1eeec     00 7A 46 F5 | 	or	result1, ##19922944
1eef0     45 00 00 FF 
1eef4     14 65 06 F1 | 	add	objptr, ##35604
1eef8     32 7B 62 FC | 	wrlong	result1, objptr
1eefc     45 00 00 FF 
1ef00     14 65 86 F1 | 	sub	objptr, ##35604
1ef04     32 7B 02 F6 | 	mov	result1, objptr
1ef08     00 A0 00 FF 
1ef0c     00 7A 46 F5 | 	or	result1, ##20971520
1ef10     45 00 00 FF 
1ef14     18 65 06 F1 | 	add	objptr, ##35608
1ef18     32 7B 62 FC | 	wrlong	result1, objptr
1ef1c     45 00 00 FF 
1ef20     18 65 86 F1 | 	sub	objptr, ##35608
1ef24     32 7B 02 F6 | 	mov	result1, objptr
1ef28     00 A8 00 FF 
1ef2c     00 7A 46 F5 | 	or	result1, ##22020096
1ef30     45 00 00 FF 
1ef34     1C 65 06 F1 | 	add	objptr, ##35612
1ef38     32 7B 62 FC | 	wrlong	result1, objptr
1ef3c     45 00 00 FF 
1ef40     1C 65 86 F1 | 	sub	objptr, ##35612
1ef44     32 7B 02 F6 | 	mov	result1, objptr
1ef48     00 B0 00 FF 
1ef4c     00 7A 46 F5 | 	or	result1, ##23068672
1ef50     45 00 00 FF 
1ef54     20 65 06 F1 | 	add	objptr, ##35616
1ef58     32 7B 62 FC | 	wrlong	result1, objptr
1ef5c     45 00 00 FF 
1ef60     20 65 86 F1 | 	sub	objptr, ##35616
1ef64     32 7B 02 F6 | 	mov	result1, objptr
1ef68     00 B8 00 FF 
1ef6c     00 7A 46 F5 | 	or	result1, ##24117248
1ef70     45 00 00 FF 
1ef74     24 65 06 F1 | 	add	objptr, ##35620
1ef78     32 7B 62 FC | 	wrlong	result1, objptr
1ef7c     45 00 00 FF 
1ef80     24 65 86 F1 | 	sub	objptr, ##35620
1ef84     32 7B 02 F6 | 	mov	result1, objptr
1ef88     37 7A 26 F4 | 	bith	result1, #55
1ef8c     45 00 00 FF 
1ef90     28 65 06 F1 | 	add	objptr, ##35624
1ef94     32 7B 62 FC | 	wrlong	result1, objptr
1ef98     45 00 00 FF 
1ef9c     28 65 86 F1 | 	sub	objptr, ##35624
1efa0     32 7B 02 F6 | 	mov	result1, objptr
1efa4     00 C8 00 FF 
1efa8     00 7A 46 F5 | 	or	result1, ##26214400
1efac     45 00 00 FF 
1efb0     2C 65 06 F1 | 	add	objptr, ##35628
1efb4     32 7B 62 FC | 	wrlong	result1, objptr
1efb8     45 00 00 FF 
1efbc     2C 65 86 F1 | 	sub	objptr, ##35628
1efc0     32 7B 02 F6 | 	mov	result1, objptr
1efc4     00 D0 00 FF 
1efc8     00 7A 46 F5 | 	or	result1, ##27262976
1efcc     45 00 00 FF 
1efd0     30 65 06 F1 | 	add	objptr, ##35632
1efd4     32 7B 62 FC | 	wrlong	result1, objptr
1efd8     45 00 00 FF 
1efdc     30 65 86 F1 | 	sub	objptr, ##35632
1efe0     32 7B 02 F6 | 	mov	result1, objptr
1efe4     00 D8 00 FF 
1efe8     00 7A 46 F5 | 	or	result1, ##28311552
1efec     45 00 00 FF 
1eff0     34 65 06 F1 | 	add	objptr, ##35636
1eff4     32 7B 62 FC | 	wrlong	result1, objptr
1eff8     45 00 00 FF 
1effc     34 65 86 F1 | 	sub	objptr, ##35636
1f000     32 7B 02 F6 | 	mov	result1, objptr
1f004     56 7A 26 F4 | 	bith	result1, #86
1f008     45 00 00 FF 
1f00c     38 65 06 F1 | 	add	objptr, ##35640
1f010     32 7B 62 FC | 	wrlong	result1, objptr
1f014     45 00 00 FF 
1f018     38 65 86 F1 | 	sub	objptr, ##35640
1f01c     32 7B 02 F6 | 	mov	result1, objptr
1f020     00 E8 00 FF 
1f024     00 7A 46 F5 | 	or	result1, ##30408704
1f028     47 00 00 FF 
1f02c     00 64 06 F1 | 	add	objptr, ##36352
1f030     32 7B 62 FC | 	wrlong	result1, objptr
1f034     47 00 00 FF 
1f038     00 64 86 F1 | 	sub	objptr, ##36352
1f03c     32 7B 02 F6 | 	mov	result1, objptr
1f040     75 7A 26 F4 | 	bith	result1, #117
1f044     45 00 00 FF 
1f048     3C 65 06 F1 | 	add	objptr, ##35644
1f04c     32 7B 62 FC | 	wrlong	result1, objptr
1f050     45 00 00 FF 
1f054     3C 65 86 F1 | 	sub	objptr, ##35644
1f058     32 7B 02 F6 | 	mov	result1, objptr
1f05c     94 7A 26 F4 | 	bith	result1, #148
1f060     45 00 00 FF 
1f064     50 65 06 F1 | 	add	objptr, ##35664
1f068     32 7B 62 FC | 	wrlong	result1, objptr
1f06c     45 00 00 FF 
1f070     50 65 86 F1 | 	sub	objptr, ##35664
1f074     32 7B 02 F6 | 	mov	result1, objptr
1f078     19 7A 26 F4 | 	bith	result1, #25
1f07c     45 00 00 FF 
1f080     40 65 06 F1 | 	add	objptr, ##35648
1f084     32 7B 62 FC | 	wrlong	result1, objptr
1f088     45 00 00 FF 
1f08c     40 65 86 F1 | 	sub	objptr, ##35648
1f090     32 7B 02 F6 | 	mov	result1, objptr
1f094     00 08 01 FF 
1f098     00 7A 46 F5 | 	or	result1, ##34603008
1f09c     45 00 00 FF 
1f0a0     5C 64 06 F1 | 	add	objptr, ##35420
1f0a4     32 7B 62 FC | 	wrlong	result1, objptr
1f0a8     45 00 00 FF 
1f0ac     5C 64 86 F1 | 	sub	objptr, ##35420
1f0b0     32 7B 02 F6 | 	mov	result1, objptr
1f0b4     00 10 01 FF 
1f0b8     00 7A 46 F5 | 	or	result1, ##35651584
1f0bc     45 00 00 FF 
1f0c0     48 65 06 F1 | 	add	objptr, ##35656
1f0c4     32 7B 62 FC | 	wrlong	result1, objptr
1f0c8     45 00 00 FF 
1f0cc     48 65 86 F1 | 	sub	objptr, ##35656
1f0d0     32 7B 02 F6 | 	mov	result1, objptr
1f0d4     00 18 01 FF 
1f0d8     00 7A 46 F5 | 	or	result1, ##36700160
1f0dc     45 00 00 FF 
1f0e0     4C 65 06 F1 | 	add	objptr, ##35660
1f0e4     32 7B 62 FC | 	wrlong	result1, objptr
1f0e8     45 00 00 FF 
1f0ec     4C 65 86 F1 | 	sub	objptr, ##35660
1f0f0     32 7B 02 F6 | 	mov	result1, objptr
1f0f4     00 20 01 FF 
1f0f8     00 7A 46 F5 | 	or	result1, ##37748736
1f0fc     45 00 00 FF 
1f100     58 65 06 F1 | 	add	objptr, ##35672
1f104     32 7B 62 FC | 	wrlong	result1, objptr
1f108     45 00 00 FF 
1f10c     58 65 86 F1 | 	sub	objptr, ##35672
1f110     32 7B 02 F6 | 	mov	result1, objptr
1f114     00 28 01 FF 
1f118     00 7A 46 F5 | 	or	result1, ##38797312
1f11c     45 00 00 FF 
1f120     5C 65 06 F1 | 	add	objptr, ##35676
1f124     32 7B 62 FC | 	wrlong	result1, objptr
1f128     45 00 00 FF 
1f12c     5C 65 86 F1 | 	sub	objptr, ##35676
1f130     32 7B 02 F6 | 	mov	result1, objptr
1f134     00 30 01 FF 
1f138     00 7A 46 F5 | 	or	result1, ##39845888
1f13c     45 00 00 FF 
1f140     60 65 06 F1 | 	add	objptr, ##35680
1f144     32 7B 62 FC | 	wrlong	result1, objptr
1f148     45 00 00 FF 
1f14c     60 65 86 F1 | 	sub	objptr, ##35680
1f150     32 7B 02 F6 | 	mov	result1, objptr
1f154     00 38 01 FF 
1f158     00 7A 46 F5 | 	or	result1, ##40894464
1f15c     45 00 00 FF 
1f160     64 65 06 F1 | 	add	objptr, ##35684
1f164     32 7B 62 FC | 	wrlong	result1, objptr
1f168     45 00 00 FF 
1f16c     64 65 86 F1 | 	sub	objptr, ##35684
1f170     32 7B 02 F6 | 	mov	result1, objptr
1f174     00 40 01 FF 
1f178     00 7A 46 F5 | 	or	result1, ##41943040
1f17c     45 00 00 FF 
1f180     6C 65 06 F1 | 	add	objptr, ##35692
1f184     32 7B 62 FC | 	wrlong	result1, objptr
1f188     45 00 00 FF 
1f18c     6C 65 86 F1 | 	sub	objptr, ##35692
1f190     32 7B 02 F6 | 	mov	result1, objptr
1f194     00 08 01 FF 
1f198     00 7A 46 F5 | 	or	result1, ##34603008
1f19c     45 00 00 FF 
1f1a0     70 65 06 F1 | 	add	objptr, ##35696
1f1a4     32 7B 62 FC | 	wrlong	result1, objptr
1f1a8     45 00 00 FF 
1f1ac     70 65 86 F1 | 	sub	objptr, ##35696
1f1b0     32 7B 02 F6 | 	mov	result1, objptr
1f1b4     00 48 01 FF 
1f1b8     00 7A 46 F5 | 	or	result1, ##42991616
1f1bc     45 00 00 FF 
1f1c0     70 64 06 F1 | 	add	objptr, ##35440
1f1c4     32 7B 62 FC | 	wrlong	result1, objptr
1f1c8     45 00 00 FF 
1f1cc     70 64 86 F1 | 	sub	objptr, ##35440
1f1d0     32 7B 02 F6 | 	mov	result1, objptr
1f1d4     00 50 01 FF 
1f1d8     00 7A 46 F5 | 	or	result1, ##44040192
1f1dc     45 00 00 FF 
1f1e0     A0 64 06 F1 | 	add	objptr, ##35488
1f1e4     32 7B 62 FC | 	wrlong	result1, objptr
1f1e8     45 00 00 FF 
1f1ec     A0 64 86 F1 | 	sub	objptr, ##35488
1f1f0     32 7B 02 F6 | 	mov	result1, objptr
1f1f4     00 58 01 FF 
1f1f8     00 7A 46 F5 | 	or	result1, ##45088768
1f1fc     45 00 00 FF 
1f200     9C 64 06 F1 | 	add	objptr, ##35484
1f204     32 7B 62 FC | 	wrlong	result1, objptr
1f208     45 00 00 FF 
1f20c     9C 64 86 F1 | 	sub	objptr, ##35484
1f210     32 7B 02 F6 | 	mov	result1, objptr
1f214     00 60 01 FF 
1f218     00 7A 46 F5 | 	or	result1, ##46137344
1f21c     45 00 00 FF 
1f220     40 64 06 F1 | 	add	objptr, ##35392
1f224     32 7B 62 FC | 	wrlong	result1, objptr
1f228     45 00 00 FF 
1f22c     40 64 86 F1 | 	sub	objptr, ##35392
1f230     32 7B 02 F6 | 	mov	result1, objptr
1f234     00 68 01 FF 
1f238     00 7A 46 F5 | 	or	result1, ##47185920
1f23c     45 00 00 FF 
1f240     44 64 06 F1 | 	add	objptr, ##35396
1f244     32 7B 62 FC | 	wrlong	result1, objptr
1f248     45 00 00 FF 
1f24c     44 64 86 F1 | 	sub	objptr, ##35396
1f250     32 7B 02 F6 | 	mov	result1, objptr
1f254     00 70 01 FF 
1f258     00 7A 46 F5 | 	or	result1, ##48234496
1f25c     45 00 00 FF 
1f260     AC 64 06 F1 | 	add	objptr, ##35500
1f264     32 7B 62 FC | 	wrlong	result1, objptr
1f268     45 00 00 FF 
1f26c     AC 64 86 F1 | 	sub	objptr, ##35500
1f270     32 7B 02 F6 | 	mov	result1, objptr
1f274     00 78 01 FF 
1f278     00 7A 46 F5 | 	or	result1, ##49283072
1f27c     45 00 00 FF 
1f280     54 65 06 F1 | 	add	objptr, ##35668
1f284     32 7B 62 FC | 	wrlong	result1, objptr
1f288     45 00 00 FF 
1f28c     54 65 86 F1 | 	sub	objptr, ##35668
1f290     32 7B 02 F6 | 	mov	result1, objptr
1f294     38 7A 26 F4 | 	bith	result1, #56
1f298     45 00 00 FF 
1f29c     68 65 06 F1 | 	add	objptr, ##35688
1f2a0     32 7B 62 FC | 	wrlong	result1, objptr
1f2a4     45 00 00 FF 
1f2a8     68 65 86 F1 | 	sub	objptr, ##35688
1f2ac     32 7B 02 F6 | 	mov	result1, objptr
1f2b0     00 88 01 FF 
1f2b4     00 7A 46 F5 | 	or	result1, ##51380224
1f2b8     45 00 00 FF 
1f2bc     74 65 06 F1 | 	add	objptr, ##35700
1f2c0     32 7B 62 FC | 	wrlong	result1, objptr
1f2c4     45 00 00 FF 
1f2c8     74 65 86 F1 | 	sub	objptr, ##35700
1f2cc     32 7B 02 F6 | 	mov	result1, objptr
1f2d0     00 90 01 FF 
1f2d4     00 7A 46 F5 | 	or	result1, ##52428800
1f2d8     45 00 00 FF 
1f2dc     78 65 06 F1 | 	add	objptr, ##35704
1f2e0     32 7B 62 FC | 	wrlong	result1, objptr
1f2e4     45 00 00 FF 
1f2e8     78 65 86 F1 | 	sub	objptr, ##35704
1f2ec     32 7B 02 F6 | 	mov	result1, objptr
1f2f0     00 98 01 FF 
1f2f4     00 7A 46 F5 | 	or	result1, ##53477376
1f2f8     45 00 00 FF 
1f2fc     7C 65 06 F1 | 	add	objptr, ##35708
1f300     32 7B 62 FC | 	wrlong	result1, objptr
1f304     45 00 00 FF 
1f308     7C 65 86 F1 | 	sub	objptr, ##35708
1f30c     32 7B 02 F6 | 	mov	result1, objptr
1f310     00 A0 01 FF 
1f314     00 7A 46 F5 | 	or	result1, ##54525952
1f318     45 00 00 FF 
1f31c     80 65 06 F1 | 	add	objptr, ##35712
1f320     32 7B 62 FC | 	wrlong	result1, objptr
1f324     45 00 00 FF 
1f328     80 65 86 F1 | 	sub	objptr, ##35712
1f32c     32 7B 02 F6 | 	mov	result1, objptr
1f330     00 A8 01 FF 
1f334     00 7A 46 F5 | 	or	result1, ##55574528
1f338     45 00 00 FF 
1f33c     84 65 06 F1 | 	add	objptr, ##35716
1f340     32 7B 62 FC | 	wrlong	result1, objptr
1f344     45 00 00 FF 
1f348     84 65 86 F1 | 	sub	objptr, ##35716
1f34c     32 7B 02 F6 | 	mov	result1, objptr
1f350     00 B0 01 FF 
1f354     00 7A 46 F5 | 	or	result1, ##56623104
1f358     45 00 00 FF 
1f35c     88 65 06 F1 | 	add	objptr, ##35720
1f360     32 7B 62 FC | 	wrlong	result1, objptr
1f364     45 00 00 FF 
1f368     88 65 86 F1 | 	sub	objptr, ##35720
1f36c     32 7B 02 F6 | 	mov	result1, objptr
1f370     94 7A 26 F4 | 	bith	result1, #148
1f374     45 00 00 FF 
1f378     50 65 06 F1 | 	add	objptr, ##35664
1f37c     32 7B 62 FC | 	wrlong	result1, objptr
1f380     45 00 00 FF 
1f384     50 65 86 F1 | 	sub	objptr, ##35664
1f388     32 7B 02 F6 | 	mov	result1, objptr
1f38c     00 B8 01 FF 
1f390     00 7A 46 F5 | 	or	result1, ##57671680
1f394     45 00 00 FF 
1f398     90 65 06 F1 | 	add	objptr, ##35728
1f39c     32 7B 62 FC | 	wrlong	result1, objptr
1f3a0     45 00 00 FF 
1f3a4     90 65 86 F1 | 	sub	objptr, ##35728
1f3a8     32 7B 02 F6 | 	mov	result1, objptr
1f3ac     57 7A 26 F4 | 	bith	result1, #87
1f3b0     45 00 00 FF 
1f3b4     8C 65 06 F1 | 	add	objptr, ##35724
1f3b8     32 7B 62 FC | 	wrlong	result1, objptr
1f3bc     45 00 00 FF 
1f3c0     8C 65 86 F1 | 	sub	objptr, ##35724
1f3c4     32 7B 02 F6 | 	mov	result1, objptr
1f3c8     00 C8 01 FF 
1f3cc     00 7A 46 F5 | 	or	result1, ##59768832
1f3d0     45 00 00 FF 
1f3d4     A4 65 06 F1 | 	add	objptr, ##35748
1f3d8     32 7B 62 FC | 	wrlong	result1, objptr
1f3dc     45 00 00 FF 
1f3e0     A4 65 86 F1 | 	sub	objptr, ##35748
1f3e4     32 7B 02 F6 | 	mov	result1, objptr
1f3e8     00 D0 01 FF 
1f3ec     00 7A 46 F5 | 	or	result1, ##60817408
1f3f0     45 00 00 FF 
1f3f4     A8 65 06 F1 | 	add	objptr, ##35752
1f3f8     32 7B 62 FC | 	wrlong	result1, objptr
1f3fc     45 00 00 FF 
1f400     A8 65 86 F1 | 	sub	objptr, ##35752
1f404     32 7B 02 F6 | 	mov	result1, objptr
1f408     00 D8 01 FF 
1f40c     00 7A 46 F5 | 	or	result1, ##61865984
1f410     45 00 00 FF 
1f414     94 65 06 F1 | 	add	objptr, ##35732
1f418     32 7B 62 FC | 	wrlong	result1, objptr
1f41c     45 00 00 FF 
1f420     94 65 86 F1 | 	sub	objptr, ##35732
1f424     32 7B 02 F6 | 	mov	result1, objptr
1f428     76 7A 26 F4 | 	bith	result1, #118
1f42c     45 00 00 FF 
1f430     98 65 06 F1 | 	add	objptr, ##35736
1f434     32 7B 62 FC | 	wrlong	result1, objptr
1f438     45 00 00 FF 
1f43c     98 65 86 F1 | 	sub	objptr, ##35736
1f440     32 7B 02 F6 | 	mov	result1, objptr
1f444     00 E8 01 FF 
1f448     00 7A 46 F5 | 	or	result1, ##63963136
1f44c     45 00 00 FF 
1f450     9C 65 06 F1 | 	add	objptr, ##35740
1f454     32 7B 62 FC | 	wrlong	result1, objptr
1f458     45 00 00 FF 
1f45c     9C 65 86 F1 | 	sub	objptr, ##35740
1f460     32 7B 02 F6 | 	mov	result1, objptr
1f464     95 7A 26 F4 | 	bith	result1, #149
1f468     45 00 00 FF 
1f46c     A0 65 06 F1 | 	add	objptr, ##35744
1f470     32 7B 62 FC | 	wrlong	result1, objptr
1f474     45 00 00 FF 
1f478     A0 65 86 F1 | 	sub	objptr, ##35744
1f47c     32 7B 02 F6 | 	mov	result1, objptr
1f480     B4 7A 26 F4 | 	bith	result1, #180
1f484     45 00 00 FF 
1f488     B0 65 06 F1 | 	add	objptr, ##35760
1f48c     32 7B 62 FC | 	wrlong	result1, objptr
1f490     45 00 00 FF 
1f494     B0 65 86 F1 | 	sub	objptr, ##35760
1f498     32 7B 02 F6 | 	mov	result1, objptr
1f49c     1A 7A 26 F4 | 	bith	result1, #26
1f4a0     45 00 00 FF 
1f4a4     AC 65 06 F1 | 	add	objptr, ##35756
1f4a8     32 7B 62 FC | 	wrlong	result1, objptr
1f4ac     45 00 00 FF 
1f4b0     AC 65 86 F1 | 	sub	objptr, ##35756
1f4b4     32 7B 02 F6 | 	mov	result1, objptr
1f4b8     00 08 02 FF 
1f4bc     00 7A 46 F5 | 	or	result1, ##68157440
1f4c0     45 00 00 FF 
1f4c4     BC 65 06 F1 | 	add	objptr, ##35772
1f4c8     32 7B 62 FC | 	wrlong	result1, objptr
1f4cc     45 00 00 FF 
1f4d0     BC 65 86 F1 | 	sub	objptr, ##35772
1f4d4     32 7B 02 F6 | 	mov	result1, objptr
1f4d8     00 10 02 FF 
1f4dc     00 7A 46 F5 | 	or	result1, ##69206016
1f4e0     45 00 00 FF 
1f4e4     B8 65 06 F1 | 	add	objptr, ##35768
1f4e8     32 7B 62 FC | 	wrlong	result1, objptr
1f4ec     45 00 00 FF 
1f4f0     B8 65 86 F1 | 	sub	objptr, ##35768
1f4f4     32 7B 02 F6 | 	mov	result1, objptr
1f4f8     00 18 02 FF 
1f4fc     00 7A 46 F5 | 	or	result1, ##70254592
1f500     45 00 00 FF 
1f504     B4 65 06 F1 | 	add	objptr, ##35764
1f508     32 7B 62 FC | 	wrlong	result1, objptr
1f50c     45 00 00 FF 
1f510     B4 65 86 F1 | 	sub	objptr, ##35764
1f514     32 7B 02 F6 | 	mov	result1, objptr
1f518     00 20 02 FF 
1f51c     00 7A 46 F5 | 	or	result1, ##71303168
1f520     45 00 00 FF 
1f524     C0 65 06 F1 | 	add	objptr, ##35776
1f528     32 7B 62 FC | 	wrlong	result1, objptr
1f52c     45 00 00 FF 
1f530     C0 65 86 F1 | 	sub	objptr, ##35776
1f534     32 7B 02 F6 | 	mov	result1, objptr
1f538     00 28 02 FF 
1f53c     00 7A 46 F5 | 	or	result1, ##72351744
1f540     45 00 00 FF 
1f544     C4 65 06 F1 | 	add	objptr, ##35780
1f548     32 7B 62 FC | 	wrlong	result1, objptr
1f54c     45 00 00 FF 
1f550     C4 65 86 F1 | 	sub	objptr, ##35780
1f554     32 7B 02 F6 | 	mov	result1, objptr
1f558     00 30 02 FF 
1f55c     00 7A 46 F5 | 	or	result1, ##73400320
1f560     45 00 00 FF 
1f564     58 64 06 F1 | 	add	objptr, ##35416
1f568     32 7B 62 FC | 	wrlong	result1, objptr
1f56c     45 00 00 FF 
1f570     58 64 86 F1 | 	sub	objptr, ##35416
1f574     32 7B 02 F6 | 	mov	result1, objptr
1f578     00 38 02 FF 
1f57c     00 7A 46 F5 | 	or	result1, ##74448896
1f580     45 00 00 FF 
1f584     DC 65 06 F1 | 	add	objptr, ##35804
1f588     32 7B 62 FC | 	wrlong	result1, objptr
1f58c     45 00 00 FF 
1f590     DC 65 86 F1 | 	sub	objptr, ##35804
1f594     32 7B 02 F6 | 	mov	result1, objptr
1f598     00 40 02 FF 
1f59c     00 7A 46 F5 | 	or	result1, ##75497472
1f5a0     45 00 00 FF 
1f5a4     EC 65 06 F1 | 	add	objptr, ##35820
1f5a8     32 7B 62 FC | 	wrlong	result1, objptr
1f5ac     45 00 00 FF 
1f5b0     EC 65 86 F1 | 	sub	objptr, ##35820
1f5b4     32 7B 02 F6 | 	mov	result1, objptr
1f5b8     00 48 02 FF 
1f5bc     00 7A 46 F5 | 	or	result1, ##76546048
1f5c0     45 00 00 FF 
1f5c4     F0 65 06 F1 | 	add	objptr, ##35824
1f5c8     32 7B 62 FC | 	wrlong	result1, objptr
1f5cc     45 00 00 FF 
1f5d0     F0 65 86 F1 | 	sub	objptr, ##35824
1f5d4     32 7B 02 F6 | 	mov	result1, objptr
1f5d8     00 50 02 FF 
1f5dc     00 7A 46 F5 | 	or	result1, ##77594624
1f5e0     45 00 00 FF 
1f5e4     E8 65 06 F1 | 	add	objptr, ##35816
1f5e8     32 7B 62 FC | 	wrlong	result1, objptr
1f5ec     45 00 00 FF 
1f5f0     E8 65 86 F1 | 	sub	objptr, ##35816
1f5f4     32 7B 02 F6 | 	mov	result1, objptr
1f5f8     00 58 02 FF 
1f5fc     00 7A 46 F5 | 	or	result1, ##78643200
1f600     45 00 00 FF 
1f604     E0 65 06 F1 | 	add	objptr, ##35808
1f608     32 7B 62 FC | 	wrlong	result1, objptr
1f60c     45 00 00 FF 
1f610     E0 65 86 F1 | 	sub	objptr, ##35808
1f614     32 7B 02 F6 | 	mov	result1, objptr
1f618     00 60 02 FF 
1f61c     00 7A 46 F5 | 	or	result1, ##79691776
1f620     45 00 00 FF 
1f624     E4 65 06 F1 | 	add	objptr, ##35812
1f628     32 7B 62 FC | 	wrlong	result1, objptr
1f62c     45 00 00 FF 
1f630     E4 65 86 F1 | 	sub	objptr, ##35812
1f634     32 7B 02 F6 | 	mov	result1, objptr
1f638     00 68 02 FF 
1f63c     00 7A 46 F5 | 	or	result1, ##80740352
1f640     45 00 00 FF 
1f644     F4 65 06 F1 | 	add	objptr, ##35828
1f648     32 7B 62 FC | 	wrlong	result1, objptr
1f64c     45 00 00 FF 
1f650     F4 65 86 F1 | 	sub	objptr, ##35828
1f654     32 7B 02 F6 | 	mov	result1, objptr
1f658     00 70 02 FF 
1f65c     00 7A 46 F5 | 	or	result1, ##81788928
1f660     45 00 00 FF 
1f664     F8 65 06 F1 | 	add	objptr, ##35832
1f668     32 7B 62 FC | 	wrlong	result1, objptr
1f66c     45 00 00 FF 
1f670     F8 65 86 F1 | 	sub	objptr, ##35832
1f674     32 7B 02 F6 | 	mov	result1, objptr
1f678     00 78 02 FF 
1f67c     00 7A 46 F5 | 	or	result1, ##82837504
1f680     45 00 00 FF 
1f684     FC 65 06 F1 | 	add	objptr, ##35836
1f688     32 7B 62 FC | 	wrlong	result1, objptr
1f68c     45 00 00 FF 
1f690     FC 65 86 F1 | 	sub	objptr, ##35836
1f694     32 7B 02 F6 | 	mov	result1, objptr
1f698     00 80 02 FF 
1f69c     00 7A 46 F5 | 	or	result1, ##83886080
1f6a0     46 00 00 FF 
1f6a4     00 64 06 F1 | 	add	objptr, ##35840
1f6a8     32 7B 62 FC | 	wrlong	result1, objptr
1f6ac     46 00 00 FF 
1f6b0     00 64 86 F1 | 	sub	objptr, ##35840
1f6b4     32 7B 02 F6 | 	mov	result1, objptr
1f6b8     00 88 02 FF 
1f6bc     00 7A 46 F5 | 	or	result1, ##84934656
1f6c0     46 00 00 FF 
1f6c4     04 64 06 F1 | 	add	objptr, ##35844
1f6c8     32 7B 62 FC | 	wrlong	result1, objptr
1f6cc     46 00 00 FF 
1f6d0     04 64 86 F1 | 	sub	objptr, ##35844
1f6d4     32 7B 02 F6 | 	mov	result1, objptr
1f6d8     00 90 02 FF 
1f6dc     00 7A 46 F5 | 	or	result1, ##85983232
1f6e0     46 00 00 FF 
1f6e4     08 64 06 F1 | 	add	objptr, ##35848
1f6e8     32 7B 62 FC | 	wrlong	result1, objptr
1f6ec     46 00 00 FF 
1f6f0     08 64 86 F1 | 	sub	objptr, ##35848
1f6f4     32 7B 02 F6 | 	mov	result1, objptr
1f6f8     00 98 02 FF 
1f6fc     00 7A 46 F5 | 	or	result1, ##87031808
1f700     46 00 00 FF 
1f704     0C 64 06 F1 | 	add	objptr, ##35852
1f708     32 7B 62 FC | 	wrlong	result1, objptr
1f70c     46 00 00 FF 
1f710     0C 64 86 F1 | 	sub	objptr, ##35852
1f714     32 7B 02 F6 | 	mov	result1, objptr
1f718     00 A0 02 FF 
1f71c     00 7A 46 F5 | 	or	result1, ##88080384
1f720     46 00 00 FF 
1f724     10 64 06 F1 | 	add	objptr, ##35856
1f728     32 7B 62 FC | 	wrlong	result1, objptr
1f72c     46 00 00 FF 
1f730     10 64 86 F1 | 	sub	objptr, ##35856
1f734     32 7B 02 F6 | 	mov	result1, objptr
1f738     00 A8 02 FF 
1f73c     00 7A 46 F5 | 	or	result1, ##89128960
1f740     46 00 00 FF 
1f744     1C 64 06 F1 | 	add	objptr, ##35868
1f748     32 7B 62 FC | 	wrlong	result1, objptr
1f74c     46 00 00 FF 
1f750     1C 64 86 F1 | 	sub	objptr, ##35868
1f754     32 7B 02 F6 | 	mov	result1, objptr
1f758     00 B0 02 FF 
1f75c     00 7A 46 F5 | 	or	result1, ##90177536
1f760     46 00 00 FF 
1f764     14 64 06 F1 | 	add	objptr, ##35860
1f768     32 7B 62 FC | 	wrlong	result1, objptr
1f76c     46 00 00 FF 
1f770     14 64 86 F1 | 	sub	objptr, ##35860
1f774     32 7B 02 F6 | 	mov	result1, objptr
1f778     00 B8 02 FF 
1f77c     00 7A 46 F5 | 	or	result1, ##91226112
1f780     46 00 00 FF 
1f784     18 64 06 F1 | 	add	objptr, ##35864
1f788     32 7B 62 FC | 	wrlong	result1, objptr
1f78c     46 00 00 FF 
1f790     18 64 86 F1 | 	sub	objptr, ##35864
1f794     32 7B 02 F6 | 	mov	result1, objptr
1f798     00 C0 02 FF 
1f79c     00 7A 46 F5 | 	or	result1, ##92274688
1f7a0     46 00 00 FF 
1f7a4     20 64 06 F1 | 	add	objptr, ##35872
1f7a8     32 7B 62 FC | 	wrlong	result1, objptr
1f7ac     46 00 00 FF 
1f7b0     20 64 86 F1 | 	sub	objptr, ##35872
1f7b4     32 7B 02 F6 | 	mov	result1, objptr
1f7b8     00 C8 02 FF 
1f7bc     00 7A 46 F5 | 	or	result1, ##93323264
1f7c0     45 00 00 FF 
1f7c4     C8 65 06 F1 | 	add	objptr, ##35784
1f7c8     32 7B 62 FC | 	wrlong	result1, objptr
1f7cc     45 00 00 FF 
1f7d0     C8 65 86 F1 | 	sub	objptr, ##35784
1f7d4     32 7B 02 F6 | 	mov	result1, objptr
1f7d8     00 D0 02 FF 
1f7dc     00 7A 46 F5 | 	or	result1, ##94371840
1f7e0     45 00 00 FF 
1f7e4     D0 65 06 F1 | 	add	objptr, ##35792
1f7e8     32 7B 62 FC | 	wrlong	result1, objptr
1f7ec     45 00 00 FF 
1f7f0     D0 65 86 F1 | 	sub	objptr, ##35792
1f7f4     32 7B 02 F6 | 	mov	result1, objptr
1f7f8     00 D8 02 FF 
1f7fc     00 7A 46 F5 | 	or	result1, ##95420416
1f800     45 00 00 FF 
1f804     D4 65 06 F1 | 	add	objptr, ##35796
1f808     32 7B 62 FC | 	wrlong	result1, objptr
1f80c     45 00 00 FF 
1f810     D4 65 86 F1 | 	sub	objptr, ##35796
1f814     32 7B 02 F6 | 	mov	result1, objptr
1f818     00 E0 02 FF 
1f81c     00 7A 46 F5 | 	or	result1, ##96468992
1f820     46 00 00 FF 
1f824     24 64 06 F1 | 	add	objptr, ##35876
1f828     32 7B 62 FC | 	wrlong	result1, objptr
1f82c     46 00 00 FF 
1f830     24 64 86 F1 | 	sub	objptr, ##35876
1f834     32 7B 02 F6 | 	mov	result1, objptr
1f838     00 E8 02 FF 
1f83c     00 7A 46 F5 | 	or	result1, ##97517568
1f840     46 00 00 FF 
1f844     28 64 06 F1 | 	add	objptr, ##35880
1f848     32 7B 62 FC | 	wrlong	result1, objptr
1f84c     46 00 00 FF 
1f850     28 64 86 F1 | 	sub	objptr, ##35880
1f854     32 7B 02 F6 | 	mov	result1, objptr
1f858     00 F0 02 FF 
1f85c     00 7A 46 F5 | 	or	result1, ##98566144
1f860     46 00 00 FF 
1f864     2C 64 06 F1 | 	add	objptr, ##35884
1f868     32 7B 62 FC | 	wrlong	result1, objptr
1f86c     46 00 00 FF 
1f870     2C 64 86 F1 | 	sub	objptr, ##35884
1f874     32 7B 02 F6 | 	mov	result1, objptr
1f878     00 F8 02 FF 
1f87c     00 7A 46 F5 | 	or	result1, ##99614720
1f880     45 00 00 FF 
1f884     D8 65 06 F1 | 	add	objptr, ##35800
1f888     32 7B 62 FC | 	wrlong	result1, objptr
1f88c     45 00 00 FF 
1f890     D8 65 86 F1 | 	sub	objptr, ##35800
1f894     32 7B 02 F6 | 	mov	result1, objptr
1f898     39 7A 26 F4 | 	bith	result1, #57
1f89c     46 00 00 FF 
1f8a0     3C 64 06 F1 | 	add	objptr, ##35900
1f8a4     32 7B 62 FC | 	wrlong	result1, objptr
1f8a8     46 00 00 FF 
1f8ac     3C 64 86 F1 | 	sub	objptr, ##35900
1f8b0     32 7B 02 F6 | 	mov	result1, objptr
1f8b4     00 08 03 FF 
1f8b8     00 7A 46 F5 | 	or	result1, ##101711872
1f8bc     46 00 00 FF 
1f8c0     44 64 06 F1 | 	add	objptr, ##35908
1f8c4     32 7B 62 FC | 	wrlong	result1, objptr
1f8c8     46 00 00 FF 
1f8cc     44 64 86 F1 | 	sub	objptr, ##35908
1f8d0     32 7B 02 F6 | 	mov	result1, objptr
1f8d4     00 10 03 FF 
1f8d8     00 7A 46 F5 | 	or	result1, ##102760448
1f8dc     46 00 00 FF 
1f8e0     38 64 06 F1 | 	add	objptr, ##35896
1f8e4     32 7B 62 FC | 	wrlong	result1, objptr
1f8e8     46 00 00 FF 
1f8ec     38 64 86 F1 | 	sub	objptr, ##35896
1f8f0     32 7B 02 F6 | 	mov	result1, objptr
1f8f4     00 18 03 FF 
1f8f8     00 7A 46 F5 | 	or	result1, ##103809024
1f8fc     46 00 00 FF 
1f900     34 64 06 F1 | 	add	objptr, ##35892
1f904     32 7B 62 FC | 	wrlong	result1, objptr
1f908     46 00 00 FF 
1f90c     34 64 86 F1 | 	sub	objptr, ##35892
1f910     32 7B 02 F6 | 	mov	result1, objptr
1f914     00 20 03 FF 
1f918     00 7A 46 F5 | 	or	result1, ##104857600
1f91c     46 00 00 FF 
1f920     30 64 06 F1 | 	add	objptr, ##35888
1f924     32 7B 62 FC | 	wrlong	result1, objptr
1f928     46 00 00 FF 
1f92c     30 64 86 F1 | 	sub	objptr, ##35888
1f930     32 7B 02 F6 | 	mov	result1, objptr
1f934     00 28 03 FF 
1f938     00 7A 46 F5 | 	or	result1, ##105906176
1f93c     46 00 00 FF 
1f940     40 64 06 F1 | 	add	objptr, ##35904
1f944     32 7B 62 FC | 	wrlong	result1, objptr
1f948     46 00 00 FF 
1f94c     40 64 86 F1 | 	sub	objptr, ##35904
1f950     32 7B 02 F6 | 	mov	result1, objptr
1f954     00 30 03 FF 
1f958     00 7A 46 F5 | 	or	result1, ##106954752
1f95c     46 00 00 FF 
1f960     48 64 06 F1 | 	add	objptr, ##35912
1f964     32 7B 62 FC | 	wrlong	result1, objptr
1f968     46 00 00 FF 
1f96c     48 64 86 F1 | 	sub	objptr, ##35912
1f970     32 7B 02 F6 | 	mov	result1, objptr
1f974     00 38 03 FF 
1f978     00 7A 46 F5 | 	or	result1, ##108003328
1f97c     46 00 00 FF 
1f980     4C 64 06 F1 | 	add	objptr, ##35916
1f984     32 7B 62 FC | 	wrlong	result1, objptr
1f988     46 00 00 FF 
1f98c     4C 64 86 F1 | 	sub	objptr, ##35916
1f990     32 7B 02 F6 | 	mov	result1, objptr
1f994     00 40 03 FF 
1f998     00 7A 46 F5 | 	or	result1, ##109051904
1f99c     46 00 00 FF 
1f9a0     50 64 06 F1 | 	add	objptr, ##35920
1f9a4     32 7B 62 FC | 	wrlong	result1, objptr
1f9a8     46 00 00 FF 
1f9ac     50 64 86 F1 | 	sub	objptr, ##35920
1f9b0     32 7B 02 F6 | 	mov	result1, objptr
1f9b4     00 48 03 FF 
1f9b8     00 7A 46 F5 | 	or	result1, ##110100480
1f9bc     46 00 00 FF 
1f9c0     58 64 06 F1 | 	add	objptr, ##35928
1f9c4     32 7B 62 FC | 	wrlong	result1, objptr
1f9c8     46 00 00 FF 
1f9cc     58 64 86 F1 | 	sub	objptr, ##35928
1f9d0     32 7B 02 F6 | 	mov	result1, objptr
1f9d4     00 50 03 FF 
1f9d8     00 7A 46 F5 | 	or	result1, ##111149056
1f9dc     46 00 00 FF 
1f9e0     5C 64 06 F1 | 	add	objptr, ##35932
1f9e4     32 7B 62 FC | 	wrlong	result1, objptr
1f9e8     46 00 00 FF 
1f9ec     5C 64 86 F1 | 	sub	objptr, ##35932
1f9f0     32 7B 02 F6 | 	mov	result1, objptr
1f9f4     00 58 03 FF 
1f9f8     00 7A 46 F5 | 	or	result1, ##112197632
1f9fc     46 00 00 FF 
1fa00     60 64 06 F1 | 	add	objptr, ##35936
1fa04     32 7B 62 FC | 	wrlong	result1, objptr
1fa08     46 00 00 FF 
1fa0c     60 64 86 F1 | 	sub	objptr, ##35936
1fa10     32 7B 02 F6 | 	mov	result1, objptr
1fa14     00 60 03 FF 
1fa18     00 7A 46 F5 | 	or	result1, ##113246208
1fa1c     46 00 00 FF 
1fa20     64 64 06 F1 | 	add	objptr, ##35940
1fa24     32 7B 62 FC | 	wrlong	result1, objptr
1fa28     46 00 00 FF 
1fa2c     64 64 86 F1 | 	sub	objptr, ##35940
1fa30     32 7B 02 F6 | 	mov	result1, objptr
1fa34     00 68 03 FF 
1fa38     00 7A 46 F5 | 	or	result1, ##114294784
1fa3c     46 00 00 FF 
1fa40     68 64 06 F1 | 	add	objptr, ##35944
1fa44     32 7B 62 FC | 	wrlong	result1, objptr
1fa48     46 00 00 FF 
1fa4c     68 64 86 F1 | 	sub	objptr, ##35944
1fa50     32 7B 02 F6 | 	mov	result1, objptr
1fa54     00 70 03 FF 
1fa58     00 7A 46 F5 | 	or	result1, ##115343360
1fa5c     46 00 00 FF 
1fa60     6C 64 06 F1 | 	add	objptr, ##35948
1fa64     32 7B 62 FC | 	wrlong	result1, objptr
1fa68     46 00 00 FF 
1fa6c     6C 64 86 F1 | 	sub	objptr, ##35948
1fa70     32 7B 02 F6 | 	mov	result1, objptr
1fa74     00 08 01 FF 
1fa78     00 7A 46 F5 | 	or	result1, ##34603008
1fa7c     46 00 00 FF 
1fa80     70 64 06 F1 | 	add	objptr, ##35952
1fa84     32 7B 62 FC | 	wrlong	result1, objptr
1fa88     46 00 00 FF 
1fa8c     70 64 86 F1 | 	sub	objptr, ##35952
1fa90     32 7B 02 F6 | 	mov	result1, objptr
1fa94     00 78 03 FF 
1fa98     00 7A 46 F5 | 	or	result1, ##116391936
1fa9c     46 00 00 FF 
1faa0     74 64 06 F1 | 	add	objptr, ##35956
1faa4     32 7B 62 FC | 	wrlong	result1, objptr
1faa8     46 00 00 FF 
1faac     74 64 86 F1 | 	sub	objptr, ##35956
1fab0     32 7B 02 F6 | 	mov	result1, objptr
1fab4     58 7A 26 F4 | 	bith	result1, #88
1fab8     46 00 00 FF 
1fabc     54 64 06 F1 | 	add	objptr, ##35924
1fac0     32 7B 62 FC | 	wrlong	result1, objptr
1fac4     46 00 00 FF 
1fac8     54 64 86 F1 | 	sub	objptr, ##35924
1facc     32 7B 02 F6 | 	mov	result1, objptr
1fad0     00 88 03 FF 
1fad4     00 7A 46 F5 | 	or	result1, ##118489088
1fad8     45 00 00 FF 
1fadc     4C 64 06 F1 | 	add	objptr, ##35404
1fae0     32 7B 62 FC | 	wrlong	result1, objptr
1fae4     45 00 00 FF 
1fae8     4C 64 86 F1 | 	sub	objptr, ##35404
1faec     32 7B 02 F6 | 	mov	result1, objptr
1faf0     00 90 03 FF 
1faf4     00 7A 46 F5 | 	or	result1, ##119537664
1faf8     46 00 00 FF 
1fafc     78 64 06 F1 | 	add	objptr, ##35960
1fb00     32 7B 62 FC | 	wrlong	result1, objptr
1fb04     46 00 00 FF 
1fb08     78 64 86 F1 | 	sub	objptr, ##35960
1fb0c     32 7B 02 F6 | 	mov	result1, objptr
1fb10     00 98 03 FF 
1fb14     00 7A 46 F5 | 	or	result1, ##120586240
1fb18     46 00 00 FF 
1fb1c     7C 64 06 F1 | 	add	objptr, ##35964
1fb20     32 7B 62 FC | 	wrlong	result1, objptr
1fb24     46 00 00 FF 
1fb28     7C 64 86 F1 | 	sub	objptr, ##35964
1fb2c     32 7B 02 F6 | 	mov	result1, objptr
1fb30     00 A0 03 FF 
1fb34     00 7A 46 F5 | 	or	result1, ##121634816
1fb38     46 00 00 FF 
1fb3c     90 64 06 F1 | 	add	objptr, ##35984
1fb40     32 7B 62 FC | 	wrlong	result1, objptr
1fb44     46 00 00 FF 
1fb48     90 64 86 F1 | 	sub	objptr, ##35984
1fb4c     32 7B 02 F6 | 	mov	result1, objptr
1fb50     00 A8 03 FF 
1fb54     00 7A 46 F5 | 	or	result1, ##122683392
1fb58     46 00 00 FF 
1fb5c     8C 64 06 F1 | 	add	objptr, ##35980
1fb60     32 7B 62 FC | 	wrlong	result1, objptr
1fb64     46 00 00 FF 
1fb68     8C 64 86 F1 | 	sub	objptr, ##35980
1fb6c     32 7B 02 F6 | 	mov	result1, objptr
1fb70     00 B0 03 FF 
1fb74     00 7A 46 F5 | 	or	result1, ##123731968
1fb78     46 00 00 FF 
1fb7c     84 64 06 F1 | 	add	objptr, ##35972
1fb80     32 7B 62 FC | 	wrlong	result1, objptr
1fb84     46 00 00 FF 
1fb88     84 64 86 F1 | 	sub	objptr, ##35972
1fb8c     32 7B 02 F6 | 	mov	result1, objptr
1fb90     00 B8 03 FF 
1fb94     00 7A 46 F5 | 	or	result1, ##124780544
1fb98     46 00 00 FF 
1fb9c     80 64 06 F1 | 	add	objptr, ##35968
1fba0     32 7B 62 FC | 	wrlong	result1, objptr
1fba4     46 00 00 FF 
1fba8     80 64 86 F1 | 	sub	objptr, ##35968
1fbac     32 7B 02 F6 | 	mov	result1, objptr
1fbb0     77 7A 26 F4 | 	bith	result1, #119
1fbb4     46 00 00 FF 
1fbb8     A0 64 06 F1 | 	add	objptr, ##36000
1fbbc     32 7B 62 FC | 	wrlong	result1, objptr
1fbc0     46 00 00 FF 
1fbc4     A0 64 86 F1 | 	sub	objptr, ##36000
1fbc8     32 7B 02 F6 | 	mov	result1, objptr
1fbcc     00 C8 03 FF 
1fbd0     00 7A 46 F5 | 	or	result1, ##126877696
1fbd4     46 00 00 FF 
1fbd8     94 64 06 F1 | 	add	objptr, ##35988
1fbdc     32 7B 62 FC | 	wrlong	result1, objptr
1fbe0     46 00 00 FF 
1fbe4     94 64 86 F1 | 	sub	objptr, ##35988
1fbe8     32 7B 02 F6 | 	mov	result1, objptr
1fbec     00 D0 03 FF 
1fbf0     00 7A 46 F5 | 	or	result1, ##127926272
1fbf4     46 00 00 FF 
1fbf8     98 64 06 F1 | 	add	objptr, ##35992
1fbfc     32 7B 62 FC | 	wrlong	result1, objptr
1fc00     46 00 00 FF 
1fc04     98 64 86 F1 | 	sub	objptr, ##35992
1fc08     32 7B 02 F6 | 	mov	result1, objptr
1fc0c     00 D8 03 FF 
1fc10     00 7A 46 F5 | 	or	result1, ##128974848
1fc14     46 00 00 FF 
1fc18     9C 64 06 F1 | 	add	objptr, ##35996
1fc1c     32 7B 62 FC | 	wrlong	result1, objptr
1fc20     46 00 00 FF 
1fc24     9C 64 86 F1 | 	sub	objptr, ##35996
1fc28     32 7B 02 F6 | 	mov	result1, objptr
1fc2c     96 7A 26 F4 | 	bith	result1, #150
1fc30     46 00 00 FF 
1fc34     A4 64 06 F1 | 	add	objptr, ##36004
1fc38     32 7B 62 FC | 	wrlong	result1, objptr
1fc3c     46 00 00 FF 
1fc40     A4 64 86 F1 | 	sub	objptr, ##36004
1fc44     32 7B 02 F6 | 	mov	result1, objptr
1fc48     00 E8 03 FF 
1fc4c     00 7A 46 F5 | 	or	result1, ##131072000
1fc50     46 00 00 FF 
1fc54     A8 64 06 F1 | 	add	objptr, ##36008
1fc58     32 7B 62 FC | 	wrlong	result1, objptr
1fc5c     46 00 00 FF 
1fc60     A8 64 86 F1 | 	sub	objptr, ##36008
1fc64     32 7B 02 F6 | 	mov	result1, objptr
1fc68     B5 7A 26 F4 | 	bith	result1, #181
1fc6c     46 00 00 FF 
1fc70     AC 64 06 F1 | 	add	objptr, ##36012
1fc74     32 7B 62 FC | 	wrlong	result1, objptr
1fc78     46 00 00 FF 
1fc7c     AC 64 86 F1 | 	sub	objptr, ##36012
1fc80     32 7B 02 F6 | 	mov	result1, objptr
1fc84     D4 7A 26 F4 | 	bith	result1, #212
1fc88     46 00 00 FF 
1fc8c     B0 64 06 F1 | 	add	objptr, ##36016
1fc90     32 7B 62 FC | 	wrlong	result1, objptr
1fc94     46 00 00 FF 
1fc98     B0 64 86 F1 | 	sub	objptr, ##36016
1fc9c     32 7B 02 F6 | 	mov	result1, objptr
1fca0     1B 7A 26 F4 | 	bith	result1, #27
1fca4     46 00 00 FF 
1fca8     B4 64 06 F1 | 	add	objptr, ##36020
1fcac     32 7B 62 FC | 	wrlong	result1, objptr
1fcb0     46 00 00 FF 
1fcb4     B4 64 86 F1 | 	sub	objptr, ##36020
1fcb8     32 7B 02 F6 | 	mov	result1, objptr
1fcbc     00 08 04 FF 
1fcc0     00 7A 46 F5 | 	or	result1, ##135266304
1fcc4     46 00 00 FF 
1fcc8     B8 64 06 F1 | 	add	objptr, ##36024
1fccc     32 7B 62 FC | 	wrlong	result1, objptr
1fcd0     46 00 00 FF 
1fcd4     B8 64 86 F1 | 	sub	objptr, ##36024
1fcd8     32 7B 02 F6 | 	mov	result1, objptr
1fcdc     00 10 04 FF 
1fce0     00 7A 46 F5 | 	or	result1, ##136314880
1fce4     46 00 00 FF 
1fce8     C0 64 06 F1 | 	add	objptr, ##36032
1fcec     32 7B 62 FC | 	wrlong	result1, objptr
1fcf0     46 00 00 FF 
1fcf4     C0 64 86 F1 | 	sub	objptr, ##36032
1fcf8     32 7B 02 F6 | 	mov	result1, objptr
1fcfc     00 18 04 FF 
1fd00     00 7A 46 F5 | 	or	result1, ##137363456
1fd04     46 00 00 FF 
1fd08     C4 64 06 F1 | 	add	objptr, ##36036
1fd0c     32 7B 62 FC | 	wrlong	result1, objptr
1fd10     46 00 00 FF 
1fd14     C4 64 86 F1 | 	sub	objptr, ##36036
1fd18     32 7B 02 F6 | 	mov	result1, objptr
1fd1c     00 20 04 FF 
1fd20     00 7A 46 F5 | 	or	result1, ##138412032
1fd24     46 00 00 FF 
1fd28     C8 64 06 F1 | 	add	objptr, ##36040
1fd2c     32 7B 62 FC | 	wrlong	result1, objptr
1fd30     46 00 00 FF 
1fd34     C8 64 86 F1 | 	sub	objptr, ##36040
1fd38     32 7B 02 F6 | 	mov	result1, objptr
1fd3c     00 28 04 FF 
1fd40     00 7A 46 F5 | 	or	result1, ##139460608
1fd44     46 00 00 FF 
1fd48     BC 64 06 F1 | 	add	objptr, ##36028
1fd4c     32 7B 62 FC | 	wrlong	result1, objptr
1fd50     46 00 00 FF 
1fd54     BC 64 86 F1 | 	sub	objptr, ##36028
1fd58     32 7B 02 F6 | 	mov	result1, objptr
1fd5c     00 30 04 FF 
1fd60     00 7A 46 F5 | 	or	result1, ##140509184
1fd64     46 00 00 FF 
1fd68     CC 64 06 F1 | 	add	objptr, ##36044
1fd6c     32 7B 62 FC | 	wrlong	result1, objptr
1fd70     46 00 00 FF 
1fd74     CC 64 86 F1 | 	sub	objptr, ##36044
1fd78     32 7B 02 F6 | 	mov	result1, objptr
1fd7c     00 38 04 FF 
1fd80     00 7A 46 F5 | 	or	result1, ##141557760
1fd84     46 00 00 FF 
1fd88     00 65 06 F1 | 	add	objptr, ##36096
1fd8c     32 7B 62 FC | 	wrlong	result1, objptr
1fd90     46 00 00 FF 
1fd94     00 65 86 F1 | 	sub	objptr, ##36096
1fd98     32 7B 02 F6 | 	mov	result1, objptr
1fd9c     00 40 04 FF 
1fda0     00 7A 46 F5 | 	or	result1, ##142606336
1fda4     46 00 00 FF 
1fda8     F8 64 06 F1 | 	add	objptr, ##36088
1fdac     32 7B 62 FC | 	wrlong	result1, objptr
1fdb0     46 00 00 FF 
1fdb4     F8 64 86 F1 | 	sub	objptr, ##36088
1fdb8     32 7B 02 F6 | 	mov	result1, objptr
1fdbc     00 48 04 FF 
1fdc0     00 7A 46 F5 | 	or	result1, ##143654912
1fdc4     46 00 00 FF 
1fdc8     D0 64 06 F1 | 	add	objptr, ##36048
1fdcc     32 7B 62 FC | 	wrlong	result1, objptr
1fdd0     46 00 00 FF 
1fdd4     D0 64 86 F1 | 	sub	objptr, ##36048
1fdd8     32 7B 02 F6 | 	mov	result1, objptr
1fddc     00 50 04 FF 
1fde0     00 7A 46 F5 | 	or	result1, ##144703488
1fde4     46 00 00 FF 
1fde8     D4 64 06 F1 | 	add	objptr, ##36052
1fdec     32 7B 62 FC | 	wrlong	result1, objptr
1fdf0     46 00 00 FF 
1fdf4     D4 64 86 F1 | 	sub	objptr, ##36052
1fdf8     32 7B 02 F6 | 	mov	result1, objptr
1fdfc     00 58 04 FF 
1fe00     00 7A 46 F5 | 	or	result1, ##145752064
1fe04     46 00 00 FF 
1fe08     F0 64 06 F1 | 	add	objptr, ##36080
1fe0c     32 7B 62 FC | 	wrlong	result1, objptr
1fe10     46 00 00 FF 
1fe14     F0 64 86 F1 | 	sub	objptr, ##36080
1fe18     32 7B 02 F6 | 	mov	result1, objptr
1fe1c     00 60 04 FF 
1fe20     00 7A 46 F5 | 	or	result1, ##146800640
1fe24     46 00 00 FF 
1fe28     F4 64 06 F1 | 	add	objptr, ##36084
1fe2c     32 7B 62 FC | 	wrlong	result1, objptr
1fe30     46 00 00 FF 
1fe34     F4 64 86 F1 | 	sub	objptr, ##36084
1fe38     32 7B 02 F6 | 	mov	result1, objptr
1fe3c     00 68 04 FF 
1fe40     00 7A 46 F5 | 	or	result1, ##147849216
1fe44     46 00 00 FF 
1fe48     10 65 06 F1 | 	add	objptr, ##36112
1fe4c     32 7B 62 FC | 	wrlong	result1, objptr
1fe50     46 00 00 FF 
1fe54     10 65 86 F1 | 	sub	objptr, ##36112
1fe58     32 7B 02 F6 | 	mov	result1, objptr
1fe5c     00 70 04 FF 
1fe60     00 7A 46 F5 | 	or	result1, ##148897792
1fe64     46 00 00 FF 
1fe68     0C 65 06 F1 | 	add	objptr, ##36108
1fe6c     32 7B 62 FC | 	wrlong	result1, objptr
1fe70     46 00 00 FF 
1fe74     0C 65 86 F1 | 	sub	objptr, ##36108
1fe78     32 7B 02 F6 | 	mov	result1, objptr
1fe7c     00 78 04 FF 
1fe80     00 7A 46 F5 | 	or	result1, ##149946368
1fe84     46 00 00 FF 
1fe88     1C 65 06 F1 | 	add	objptr, ##36124
1fe8c     32 7B 62 FC | 	wrlong	result1, objptr
1fe90     46 00 00 FF 
1fe94     1C 65 86 F1 | 	sub	objptr, ##36124
1fe98     32 7B 02 F6 | 	mov	result1, objptr
1fe9c     00 80 04 FF 
1fea0     00 7A 46 F5 | 	or	result1, ##150994944
1fea4     46 00 00 FF 
1fea8     E8 64 06 F1 | 	add	objptr, ##36072
1feac     32 7B 62 FC | 	wrlong	result1, objptr
1feb0     46 00 00 FF 
1feb4     E8 64 86 F1 | 	sub	objptr, ##36072
1feb8     32 7B 02 F6 | 	mov	result1, objptr
1febc     00 88 04 FF 
1fec0     00 7A 46 F5 | 	or	result1, ##152043520
1fec4     46 00 00 FF 
1fec8     18 65 06 F1 | 	add	objptr, ##36120
1fecc     32 7B 62 FC | 	wrlong	result1, objptr
1fed0     46 00 00 FF 
1fed4     18 65 86 F1 | 	sub	objptr, ##36120
1fed8     32 7B 02 F6 | 	mov	result1, objptr
1fedc     00 90 04 FF 
1fee0     00 7A 46 F5 | 	or	result1, ##153092096
1fee4     46 00 00 FF 
1fee8     08 65 06 F1 | 	add	objptr, ##36104
1feec     32 7B 62 FC | 	wrlong	result1, objptr
1fef0     46 00 00 FF 
1fef4     08 65 86 F1 | 	sub	objptr, ##36104
1fef8     32 7B 02 F6 | 	mov	result1, objptr
1fefc     00 98 04 FF 
1ff00     00 7A 46 F5 | 	or	result1, ##154140672
1ff04     45 00 00 FF 
1ff08     B8 64 06 F1 | 	add	objptr, ##35512
1ff0c     32 7B 62 FC | 	wrlong	result1, objptr
1ff10     45 00 00 FF 
1ff14     B8 64 86 F1 | 	sub	objptr, ##35512
1ff18     32 7B 02 F6 | 	mov	result1, objptr
1ff1c     00 A0 04 FF 
1ff20     00 7A 46 F5 | 	or	result1, ##155189248
1ff24     46 00 00 FF 
1ff28     D8 64 06 F1 | 	add	objptr, ##36056
1ff2c     32 7B 62 FC | 	wrlong	result1, objptr
1ff30     46 00 00 FF 
1ff34     D8 64 86 F1 | 	sub	objptr, ##36056
1ff38     32 7B 02 F6 | 	mov	result1, objptr
1ff3c     00 08 01 FF 
1ff40     00 7A 46 F5 | 	or	result1, ##34603008
1ff44     46 00 00 FF 
1ff48     E0 64 06 F1 | 	add	objptr, ##36064
1ff4c     32 7B 62 FC | 	wrlong	result1, objptr
1ff50     46 00 00 FF 
1ff54     E0 64 86 F1 | 	sub	objptr, ##36064
1ff58     32 7B 02 F6 | 	mov	result1, objptr
1ff5c     00 A8 04 FF 
1ff60     00 7A 46 F5 | 	or	result1, ##156237824
1ff64     46 00 00 FF 
1ff68     DC 64 06 F1 | 	add	objptr, ##36060
1ff6c     32 7B 62 FC | 	wrlong	result1, objptr
1ff70     46 00 00 FF 
1ff74     DC 64 86 F1 | 	sub	objptr, ##36060
1ff78     32 7B 02 F6 | 	mov	result1, objptr
1ff7c     00 B0 04 FF 
1ff80     00 7A 46 F5 | 	or	result1, ##157286400
1ff84     46 00 00 FF 
1ff88     20 65 06 F1 | 	add	objptr, ##36128
1ff8c     32 7B 62 FC | 	wrlong	result1, objptr
1ff90     46 00 00 FF 
1ff94     20 65 86 F1 | 	sub	objptr, ##36128
1ff98     32 7B 02 F6 | 	mov	result1, objptr
1ff9c     00 B8 04 FF 
1ffa0     00 7A 46 F5 | 	or	result1, ##158334976
1ffa4     46 00 00 FF 
1ffa8     24 65 06 F1 | 	add	objptr, ##36132
1ffac     32 7B 62 FC | 	wrlong	result1, objptr
1ffb0     46 00 00 FF 
1ffb4     24 65 86 F1 | 	sub	objptr, ##36132
1ffb8     32 7B 02 F6 | 	mov	result1, objptr
1ffbc     00 C0 04 FF 
1ffc0     00 7A 46 F5 | 	or	result1, ##159383552
1ffc4     46 00 00 FF 
1ffc8     28 65 06 F1 | 	add	objptr, ##36136
1ffcc     32 7B 62 FC | 	wrlong	result1, objptr
1ffd0     46 00 00 FF 
1ffd4     28 65 86 F1 | 	sub	objptr, ##36136
1ffd8     32 7B 02 F6 | 	mov	result1, objptr
1ffdc     00 C8 04 FF 
1ffe0     00 7A 46 F5 | 	or	result1, ##160432128
1ffe4     46 00 00 FF 
1ffe8     2C 65 06 F1 | 	add	objptr, ##36140
1ffec     32 7B 62 FC | 	wrlong	result1, objptr
1fff0     46 00 00 FF 
1fff4     2C 65 86 F1 | 	sub	objptr, ##36140
1fff8     32 7B 02 F6 | 	mov	result1, objptr
1fffc     00 D0 04 FF 
20000     00 7A 46 F5 | 	or	result1, ##161480704
20004     46 00 00 FF 
20008     34 65 06 F1 | 	add	objptr, ##36148
2000c     32 7B 62 FC | 	wrlong	result1, objptr
20010     46 00 00 FF 
20014     34 65 86 F1 | 	sub	objptr, ##36148
20018     32 7B 02 F6 | 	mov	result1, objptr
2001c     00 D8 04 FF 
20020     00 7A 46 F5 | 	or	result1, ##162529280
20024     46 00 00 FF 
20028     38 65 06 F1 | 	add	objptr, ##36152
2002c     32 7B 62 FC | 	wrlong	result1, objptr
20030     46 00 00 FF 
20034     38 65 86 F1 | 	sub	objptr, ##36152
20038     32 7B 02 F6 | 	mov	result1, objptr
2003c     00 E0 04 FF 
20040     00 7A 46 F5 | 	or	result1, ##163577856
20044     46 00 00 FF 
20048     3C 65 06 F1 | 	add	objptr, ##36156
2004c     32 7B 62 FC | 	wrlong	result1, objptr
20050     46 00 00 FF 
20054     3C 65 86 F1 | 	sub	objptr, ##36156
20058     32 7B 02 F6 | 	mov	result1, objptr
2005c     00 E8 04 FF 
20060     00 7A 46 F5 | 	or	result1, ##164626432
20064     46 00 00 FF 
20068     5C 65 06 F1 | 	add	objptr, ##36188
2006c     32 7B 62 FC | 	wrlong	result1, objptr
20070     46 00 00 FF 
20074     5C 65 86 F1 | 	sub	objptr, ##36188
20078     32 7B 02 F6 | 	mov	result1, objptr
2007c     00 F0 04 FF 
20080     00 7A 46 F5 | 	or	result1, ##165675008
20084     46 00 00 FF 
20088     58 65 06 F1 | 	add	objptr, ##36184
2008c     32 7B 62 FC | 	wrlong	result1, objptr
20090     46 00 00 FF 
20094     58 65 86 F1 | 	sub	objptr, ##36184
20098     32 7B 02 F6 | 	mov	result1, objptr
2009c     00 F8 04 FF 
200a0     00 7A 46 F5 | 	or	result1, ##166723584
200a4     46 00 00 FF 
200a8     14 65 06 F1 | 	add	objptr, ##36116
200ac     32 7B 62 FC | 	wrlong	result1, objptr
200b0     46 00 00 FF 
200b4     14 65 86 F1 | 	sub	objptr, ##36116
200b8     32 7B 02 F6 | 	mov	result1, objptr
200bc     00 00 05 FF 
200c0     00 7A 46 F5 | 	or	result1, ##167772160
200c4     46 00 00 FF 
200c8     04 65 06 F1 | 	add	objptr, ##36100
200cc     32 7B 62 FC | 	wrlong	result1, objptr
200d0     46 00 00 FF 
200d4     04 65 86 F1 | 	sub	objptr, ##36100
200d8     32 7B 02 F6 | 	mov	result1, objptr
200dc     00 08 05 FF 
200e0     00 7A 46 F5 | 	or	result1, ##168820736
200e4     46 00 00 FF 
200e8     40 65 06 F1 | 	add	objptr, ##36160
200ec     32 7B 62 FC | 	wrlong	result1, objptr
200f0     46 00 00 FF 
200f4     40 65 86 F1 | 	sub	objptr, ##36160
200f8     32 7B 02 F6 | 	mov	result1, objptr
200fc     00 10 05 FF 
20100     00 7A 46 F5 | 	or	result1, ##169869312
20104     46 00 00 FF 
20108     44 65 06 F1 | 	add	objptr, ##36164
2010c     32 7B 62 FC | 	wrlong	result1, objptr
20110     46 00 00 FF 
20114     44 65 86 F1 | 	sub	objptr, ##36164
20118     32 7B 02 F6 | 	mov	result1, objptr
2011c     00 18 05 FF 
20120     00 7A 46 F5 | 	or	result1, ##170917888
20124     46 00 00 FF 
20128     48 65 06 F1 | 	add	objptr, ##36168
2012c     32 7B 62 FC | 	wrlong	result1, objptr
20130     46 00 00 FF 
20134     48 65 86 F1 | 	sub	objptr, ##36168
20138     32 7B 02 F6 | 	mov	result1, objptr
2013c     00 20 05 FF 
20140     00 7A 46 F5 | 	or	result1, ##171966464
20144     46 00 00 FF 
20148     4C 65 06 F1 | 	add	objptr, ##36172
2014c     32 7B 62 FC | 	wrlong	result1, objptr
20150     46 00 00 FF 
20154     4C 65 86 F1 | 	sub	objptr, ##36172
20158     32 7B 02 F6 | 	mov	result1, objptr
2015c     00 28 05 FF 
20160     00 7A 46 F5 | 	or	result1, ##173015040
20164     46 00 00 FF 
20168     50 65 06 F1 | 	add	objptr, ##36176
2016c     32 7B 62 FC | 	wrlong	result1, objptr
20170     46 00 00 FF 
20174     50 65 86 F1 | 	sub	objptr, ##36176
20178     32 7B 02 F6 | 	mov	result1, objptr
2017c     00 30 05 FF 
20180     00 7A 46 F5 | 	or	result1, ##174063616
20184     46 00 00 FF 
20188     68 65 06 F1 | 	add	objptr, ##36200
2018c     32 7B 62 FC | 	wrlong	result1, objptr
20190     46 00 00 FF 
20194     68 65 86 F1 | 	sub	objptr, ##36200
20198     32 7B 02 F6 | 	mov	result1, objptr
2019c     00 38 05 FF 
201a0     00 7A 46 F5 | 	or	result1, ##175112192
201a4     46 00 00 FF 
201a8     54 65 06 F1 | 	add	objptr, ##36180
201ac     32 7B 62 FC | 	wrlong	result1, objptr
201b0     46 00 00 FF 
201b4     54 65 86 F1 | 	sub	objptr, ##36180
201b8     32 7B 02 F6 | 	mov	result1, objptr
201bc     00 40 05 FF 
201c0     00 7A 46 F5 | 	or	result1, ##176160768
201c4     46 00 00 FF 
201c8     60 65 06 F1 | 	add	objptr, ##36192
201cc     32 7B 62 FC | 	wrlong	result1, objptr
201d0     46 00 00 FF 
201d4     60 65 86 F1 | 	sub	objptr, ##36192
201d8     32 7B 02 F6 | 	mov	result1, objptr
201dc     00 48 05 FF 
201e0     00 7A 46 F5 | 	or	result1, ##177209344
201e4     46 00 00 FF 
201e8     64 65 06 F1 | 	add	objptr, ##36196
201ec     32 7B 62 FC | 	wrlong	result1, objptr
201f0     46 00 00 FF 
201f4     64 65 86 F1 | 	sub	objptr, ##36196
201f8     32 7B 02 F6 | 	mov	result1, objptr
201fc     00 50 05 FF 
20200     00 7A 46 F5 | 	or	result1, ##178257920
20204     46 00 00 FF 
20208     6C 65 06 F1 | 	add	objptr, ##36204
2020c     32 7B 62 FC | 	wrlong	result1, objptr
20210     46 00 00 FF 
20214     6C 65 86 F1 | 	sub	objptr, ##36204
20218     32 7B 02 F6 | 	mov	result1, objptr
2021c     00 58 05 FF 
20220     00 7A 46 F5 | 	or	result1, ##179306496
20224     46 00 00 FF 
20228     70 65 06 F1 | 	add	objptr, ##36208
2022c     32 7B 62 FC | 	wrlong	result1, objptr
20230     46 00 00 FF 
20234     70 65 86 F1 | 	sub	objptr, ##36208
20238     32 7B 02 F6 | 	mov	result1, objptr
2023c     00 60 05 FF 
20240     00 7A 46 F5 | 	or	result1, ##180355072
20244     46 00 00 FF 
20248     88 64 06 F1 | 	add	objptr, ##35976
2024c     32 7B 62 FC | 	wrlong	result1, objptr
20250     46 00 00 FF 
20254     88 64 86 F1 | 	sub	objptr, ##35976
20258                 | _init_commands_ret
20258     2D 00 64 FD | 	ret
2025c                 | 
2025c                 | ' 
2025c                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
2025c                 | ' 
2025c                 | ' sub init_audio
2025c                 | _init_audio
2025c     07 CA 05 F6 | 	mov	COUNT_, #7
20260     E8 00 A0 FD | 	call	#pushregs_
20264     00 C0 1F FF 
20268     00 A6 06 F6 | 	mov	local01, ##1065353216
2026c                 | ' 
2026c                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
2026c     00 A8 06 F6 | 	mov	local02, #0
20270                 | LR__2600
20270     54 AB 02 F6 | 	mov	local03, local02
20274     01 AA 66 F0 | 	shl	local03, #1
20278     58 7F 23 FF 
2027c     00 AC 06 F6 | 	mov	local04, ##1191096320
20280     54 93 52 F6 | 	abs	arg01, local02 wc
20284     1F AE C6 C9 |  if_b	decod	local05, #31
20288     00 AE 06 36 |  if_ae	mov	local05, #0
2028c     E0 6B B0 FD | 	call	#__system___float_fromuns
20290     57 7B 62 F5 | 	xor	result1, local05
20294     3D 93 02 F6 | 	mov	arg01, result1
20298     87 24 20 FF 
2029c     DB 95 06 F6 | 	mov	arg02, ##1078530011
202a0     D0 6F B0 FD | 	call	#__system___float_mul
202a4     3D 93 02 F6 | 	mov	arg01, result1
202a8     00 00 22 FF 
202ac     00 94 06 F6 | 	mov	arg02, ##1140850688
202b0     C4 71 B0 FD | 	call	#__system___float_div
202b4     3D 93 02 F6 | 	mov	arg01, result1
202b8     28 79 B0 FD | 	call	#__system____builtin_sinf
202bc     3D 95 02 F6 | 	mov	arg02, result1
202c0     56 93 02 F6 | 	mov	arg01, local04
202c4     AC 6F B0 FD | 	call	#__system___float_mul
202c8     3D 93 02 F6 | 	mov	arg01, result1
202cc     01 94 06 F6 | 	mov	arg02, #1
202d0     68 74 B0 FD | 	call	#__system___float_tointeger
202d4     3D 95 02 F6 | 	mov	arg02, result1
202d8     55 93 02 F6 | 	mov	arg01, local03
202dc     80 0D B0 FD | 	call	#_psdpoke
202e0     01 A8 06 F1 | 	add	local02, #1
202e4     02 00 00 FF 
202e8     00 A8 56 F2 | 	cmps	local02, ##1024 wc
202ec     80 FF 9F CD |  if_b	jmp	#LR__2600
202f0                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
202f0     00 A8 06 F6 | 	mov	local02, #0
202f4                 | LR__2601
202f4     54 95 02 F6 | 	mov	arg02, local02
202f8     01 94 66 F0 | 	shl	arg02, #1
202fc     0B 92 C6 F9 | 	decod	arg01, #11
20300     4A 93 02 F1 | 	add	arg01, arg02
20304     54 AD 02 F6 | 	mov	local04, local02
20308     07 AC 66 F0 | 	shl	local04, #7
2030c     54 AD 82 F1 | 	sub	local04, local02
20310     C0 FF 7F FF 
20314     00 95 06 F6 | 	mov	arg02, ##-32512
20318     56 95 02 F1 | 	add	arg02, local04
2031c     40 0D B0 FD | 	call	#_psdpoke
20320     09 AC C6 F9 | 	decod	local04, #9
20324     54 AD 02 F1 | 	add	local04, local02
20328     01 AC 66 F0 | 	shl	local04, #1
2032c     0B 92 C6 F9 | 	decod	arg01, #11
20330     56 93 02 F1 | 	add	arg01, local04
20334     54 AF 02 F6 | 	mov	local05, local02
20338     07 AE 66 F0 | 	shl	local05, #7
2033c     54 AF 82 F1 | 	sub	local05, local02
20340     3F 00 00 FF 
20344     00 95 06 F6 | 	mov	arg02, ##32512
20348     57 95 82 F1 | 	sub	arg02, local05
2034c     10 0D B0 FD | 	call	#_psdpoke
20350     01 A8 06 F1 | 	add	local02, #1
20354     01 00 00 FF 
20358     00 A8 56 F2 | 	cmps	local02, ##512 wc
2035c     94 FF 9F CD |  if_b	jmp	#LR__2601
20360                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
20360     00 A8 06 F6 | 	mov	local02, #0
20364                 | LR__2602
20364     54 AF 02 F6 | 	mov	local05, local02
20368     01 AE 66 F0 | 	shl	local05, #1
2036c     0C 92 C6 F9 | 	decod	arg01, #12
20370     57 93 02 F1 | 	add	arg01, local05
20374     54 AF 02 F6 | 	mov	local05, local02
20378     06 AE 66 F0 | 	shl	local05, #6
2037c     54 AF 82 F1 | 	sub	local05, local02
20380     C1 FF 7F FF 
20384     00 94 06 F6 | 	mov	arg02, ##-32256
20388     57 95 02 F1 | 	add	arg02, local05
2038c     D0 0C B0 FD | 	call	#_psdpoke
20390     01 A8 06 F1 | 	add	local02, #1
20394     02 00 00 FF 
20398     00 A8 56 F2 | 	cmps	local02, ##1024 wc
2039c     C4 FF 9F CD |  if_b	jmp	#LR__2602
203a0                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
203a0     00 A8 06 F6 | 	mov	local02, #0
203a4                 | LR__2603
203a4     54 95 02 F6 | 	mov	arg02, local02
203a8     01 94 66 F0 | 	shl	arg02, #1
203ac     0C 00 00 FF 
203b0     00 92 06 F6 | 	mov	arg01, ##6144
203b4     4A 93 02 F1 | 	add	arg01, arg02
203b8     C0 FF 7F FF 
203bc     A8 94 06 F6 | 	mov	arg02, ##-32600
203c0     9C 0C B0 FD | 	call	#_psdpoke
203c4     01 A8 06 F1 | 	add	local02, #1
203c8     80 A8 56 F2 | 	cmps	local02, #128 wc
203cc     D4 FF 9F CD |  if_b	jmp	#LR__2603
203d0     80 A8 06 F6 | 	mov	local02, #128
203d4                 | LR__2604
203d4     54 95 02 F6 | 	mov	arg02, local02
203d8     01 94 66 F0 | 	shl	arg02, #1
203dc     0C 00 00 FF 
203e0     00 92 06 F6 | 	mov	arg01, ##6144
203e4     4A 93 02 F1 | 	add	arg01, arg02
203e8     3F 00 00 FF 
203ec     58 95 06 F6 | 	mov	arg02, ##32600
203f0     6C 0C B0 FD | 	call	#_psdpoke
203f4     01 A8 06 F1 | 	add	local02, #1
203f8     02 00 00 FF 
203fc     00 A8 16 F2 | 	cmp	local02, ##1024 wc
20400     D0 FF 9F CD |  if_b	jmp	#LR__2604
20404                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
20404     00 A8 06 F6 | 	mov	local02, #0
20408                 | LR__2605
20408     54 95 02 F6 | 	mov	arg02, local02
2040c     01 94 66 F0 | 	shl	arg02, #1
20410     0D 92 C6 F9 | 	decod	arg01, #13
20414     4A 93 02 F1 | 	add	arg01, arg02
20418     C0 FF 7F FF 
2041c     A8 94 06 F6 | 	mov	arg02, ##-32600
20420     3C 0C B0 FD | 	call	#_psdpoke
20424     01 A8 06 F1 | 	add	local02, #1
20428     01 00 00 FF 
2042c     00 A8 56 F2 | 	cmps	local02, ##512 wc
20430     D4 FF 9F CD |  if_b	jmp	#LR__2605
20434     09 A8 C6 F9 | 	decod	local02, #9
20438                 | LR__2606
20438     54 95 02 F6 | 	mov	arg02, local02
2043c     01 94 66 F0 | 	shl	arg02, #1
20440     0D 92 C6 F9 | 	decod	arg01, #13
20444     4A 93 02 F1 | 	add	arg01, arg02
20448     3F 00 00 FF 
2044c     58 95 06 F6 | 	mov	arg02, ##32600
20450     0C 0C B0 FD | 	call	#_psdpoke
20454     01 A8 06 F1 | 	add	local02, #1
20458     02 00 00 FF 
2045c     00 A8 16 F2 | 	cmp	local02, ##1024 wc
20460     D4 FF 9F CD |  if_b	jmp	#LR__2606
20464                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
20464     00 A8 06 F6 | 	mov	local02, #0
20468                 | LR__2607
20468     54 95 02 F6 | 	mov	arg02, local02
2046c     01 94 66 F0 | 	shl	arg02, #1
20470     14 00 00 FF 
20474     00 92 06 F6 | 	mov	arg01, ##10240
20478     4A 93 02 F1 | 	add	arg01, arg02
2047c     C0 FF 7F FF 
20480     A8 94 06 F6 | 	mov	arg02, ##-32600
20484     D8 0B B0 FD | 	call	#_psdpoke
20488     01 A8 06 F1 | 	add	local02, #1
2048c     00 A9 56 F2 | 	cmps	local02, #256 wc
20490     D4 FF 9F CD |  if_b	jmp	#LR__2607
20494     00 A9 06 F6 | 	mov	local02, #256
20498                 | LR__2608
20498     54 95 02 F6 | 	mov	arg02, local02
2049c     01 94 66 F0 | 	shl	arg02, #1
204a0     14 00 00 FF 
204a4     00 92 06 F6 | 	mov	arg01, ##10240
204a8     4A 93 02 F1 | 	add	arg01, arg02
204ac     3F 00 00 FF 
204b0     58 95 06 F6 | 	mov	arg02, ##32600
204b4     A8 0B B0 FD | 	call	#_psdpoke
204b8     01 A8 06 F1 | 	add	local02, #1
204bc     02 00 00 FF 
204c0     00 A8 16 F2 | 	cmp	local02, ##1024 wc
204c4     D0 FF 9F CD |  if_b	jmp	#LR__2608
204c8                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
204c8     18 00 00 FF 
204cc     00 A8 06 F6 | 	mov	local02, ##12288
204d0                 | LR__2609
204d0     54 93 02 F6 | 	mov	arg01, local02
204d4     00 94 06 F6 | 	mov	arg02, #0
204d8     3C 0B B0 FD | 	call	#_pslpoke
204dc     04 A8 06 F1 | 	add	local02, #4
204e0     77 00 00 FF 
204e4     FD A9 56 F2 | 	cmps	local02, ##61437 wc
204e8     E4 FF 9F CD |  if_b	jmp	#LR__2609
204ec                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
204ec     00 A8 06 F6 | 	mov	local02, #0
204f0                 | LR__2610
204f0     54 95 02 F6 | 	mov	arg02, local02
204f4     01 94 66 F0 | 	shl	arg02, #1
204f8     78 00 00 FF 
204fc     00 AA 06 F6 | 	mov	local03, ##61440
20500     4A AB 02 F1 | 	add	local03, arg02
20504     35 93 02 F6 | 	mov	arg01, ptr__dat__
20508     12 00 00 FF 
2050c     CA 92 06 F1 | 	add	arg01, ##9418
20510     54 95 02 F6 | 	mov	arg02, local02
20514     01 94 66 F0 | 	shl	arg02, #1
20518     4A 93 02 F1 | 	add	arg01, arg02
2051c     49 95 E2 FA | 	rdword	arg02, arg01
20520     55 93 02 F6 | 	mov	arg01, local03
20524     38 0B B0 FD | 	call	#_psdpoke
20528     01 A8 06 F1 | 	add	local02, #1
2052c     02 00 00 FF 
20530     00 A8 56 F2 | 	cmps	local02, ##1024 wc
20534     B8 FF 9F CD |  if_b	jmp	#LR__2610
20538                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
20538     00 A8 06 F6 | 	mov	local02, #0
2053c                 | LR__2611
2053c     54 95 02 F6 | 	mov	arg02, local02
20540     01 94 66 F0 | 	shl	arg02, #1
20544     7C 00 00 FF 
20548     00 AA 06 F6 | 	mov	local03, ##63488
2054c     4A AB 02 F1 | 	add	local03, arg02
20550     35 93 02 F6 | 	mov	arg01, ptr__dat__
20554     0E 00 00 FF 
20558     BA 92 06 F1 | 	add	arg01, ##7354
2055c     54 95 02 F6 | 	mov	arg02, local02
20560     01 94 66 F0 | 	shl	arg02, #1
20564     4A 93 02 F1 | 	add	arg01, arg02
20568     49 95 E2 FA | 	rdword	arg02, arg01
2056c     55 93 02 F6 | 	mov	arg01, local03
20570     EC 0A B0 FD | 	call	#_psdpoke
20574     01 A8 06 F1 | 	add	local02, #1
20578     02 00 00 FF 
2057c     00 A8 56 F2 | 	cmps	local02, ##1024 wc
20580     B8 FF 9F CD |  if_b	jmp	#LR__2611
20584                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
20584     00 A8 06 F6 | 	mov	local02, #0
20588     0E 00 00 FF 
2058c     38 64 06 F1 | 	add	objptr, ##7224
20590     D7 18 48 FB | 	callpa	#(@LR__2613-@LR__2612)>>2,fcache_load_ptr_
20594                 | LR__2612
20594     54 AB 02 F6 | 	mov	local03, local02
20598     01 AA 66 F0 | 	shl	local03, #1
2059c     32 AB 02 F1 | 	add	local03, objptr
205a0     54 B1 02 F6 | 	mov	local06, local02
205a4     08 B0 66 F0 | 	shl	local06, #8
205a8     7F 00 00 FF 
205ac     00 B3 06 F6 | 	mov	local07, ##65280
205b0     58 B3 82 F1 | 	sub	local07, local06
205b4     55 B3 52 FC | 	wrword	local07, local03
205b8     01 A8 06 F1 | 	add	local02, #1
205bc     00 A9 56 F2 | 	cmps	local02, #256 wc
205c0     D0 FF 9F CD |  if_b	jmp	#LR__2612
205c4                 | LR__2613
205c4     0E 00 00 FF 
205c8     38 64 86 F1 | 	sub	objptr, ##7224
205cc                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
205cc     00 A8 06 F6 | 	mov	local02, #0
205d0                 | LR__2614
205d0     54 AB 02 F6 | 	mov	local03, local02
205d4     01 AA 66 F0 | 	shl	local03, #1
205d8     32 AF 02 F6 | 	mov	local05, objptr
205dc     0F 00 00 FF 
205e0     38 AE 06 F1 | 	add	local05, ##7736
205e4     57 AB 02 F1 | 	add	local03, local05
205e8     80 BF 23 FF 
205ec     00 92 06 F6 | 	mov	arg01, ##1199505408
205f0     53 95 02 F6 | 	mov	arg02, local01
205f4     7C 6C B0 FD | 	call	#__system___float_mul
205f8     3D 93 02 F6 | 	mov	arg01, result1
205fc     01 94 06 F6 | 	mov	arg02, #1
20600     38 71 B0 FD | 	call	#__system___float_tointeger
20604     55 7B 52 FC | 	wrword	result1, local03
20608     53 93 02 F6 | 	mov	arg01, local01
2060c     CC BC 1F FF 
20610     9A 95 06 F6 | 	mov	arg02, ##1064933786
20614     5C 6C B0 FD | 	call	#__system___float_mul
20618     3D A7 02 F6 | 	mov	local01, result1
2061c     01 A8 06 F1 | 	add	local02, #1
20620     00 A9 56 F2 | 	cmps	local02, #256 wc
20624     A8 FF 9F CD |  if_b	jmp	#LR__2614
20628     10 00 00 FF 
2062c     36 64 06 F1 | 	add	objptr, ##8246
20630     32 01 58 FC | 	wrword	#0, objptr
20634                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
20634     00 A8 06 F6 | 	mov	local02, #0
20638     02 64 06 F1 | 	add	objptr, #2
2063c     D7 10 48 FB | 	callpa	#(@LR__2616-@LR__2615)>>2,fcache_load_ptr_
20640                 | LR__2615
20640     54 AB 02 F6 | 	mov	local03, local02
20644     01 AA 66 F0 | 	shl	local03, #1
20648     32 AB 02 F1 | 	add	local03, objptr
2064c     7F 00 80 FF 
20650     55 01 5A FC | 	wrword	##65280, local03
20654     01 A8 06 F1 | 	add	local02, #1
20658     FF A8 56 F2 | 	cmps	local02, #255 wc
2065c     E0 FF 9F CD |  if_b	jmp	#LR__2615
20660                 | LR__2616
20660     FE 65 06 F1 | 	add	objptr, #510
20664     32 01 58 FC | 	wrword	#0, objptr
20668                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
20668     00 A8 06 F6 | 	mov	local02, #0
2066c     02 64 06 F1 | 	add	objptr, #2
20670     D7 12 48 FB | 	callpa	#(@LR__2618-@LR__2617)>>2,fcache_load_ptr_
20674                 | LR__2617
20674     54 AB 02 F6 | 	mov	local03, local02
20678     01 AA 66 F0 | 	shl	local03, #1
2067c     32 AB 02 F1 | 	add	local03, objptr
20680     54 B3 02 F6 | 	mov	local07, local02
20684     0C B2 66 F0 | 	shl	local07, #12
20688     55 B3 52 FC | 	wrword	local07, local03
2068c     01 A8 06 F1 | 	add	local02, #1
20690     10 A8 56 F2 | 	cmps	local02, #16 wc
20694     DC FF 9F CD |  if_b	jmp	#LR__2617
20698                 | LR__2618
20698                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
20698     10 A8 06 F6 | 	mov	local02, #16
2069c     D7 10 48 FB | 	callpa	#(@LR__2620-@LR__2619)>>2,fcache_load_ptr_
206a0                 | LR__2619
206a0     54 AB 02 F6 | 	mov	local03, local02
206a4     01 AA 66 F0 | 	shl	local03, #1
206a8     32 AB 02 F1 | 	add	local03, objptr
206ac     7F 00 80 FF 
206b0     55 01 5A FC | 	wrword	##65280, local03
206b4     01 A8 06 F1 | 	add	local02, #1
206b8     F0 A8 16 F2 | 	cmp	local02, #240 wc
206bc     E0 FF 9F CD |  if_b	jmp	#LR__2619
206c0                 | LR__2620
206c0                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
206c0     F0 A8 06 F6 | 	mov	local02, #240
206c4     D7 14 48 FB | 	callpa	#(@LR__2622-@LR__2621)>>2,fcache_load_ptr_
206c8                 | LR__2621
206c8     54 AB 02 F6 | 	mov	local03, local02
206cc     01 AA 66 F0 | 	shl	local03, #1
206d0     32 AB 02 F1 | 	add	local03, objptr
206d4     FF B0 06 F6 | 	mov	local06, #255
206d8     54 B1 82 F1 | 	sub	local06, local02
206dc     0C B0 66 F0 | 	shl	local06, #12
206e0     55 B1 52 FC | 	wrword	local06, local03
206e4     01 A8 06 F1 | 	add	local02, #1
206e8     00 A9 16 F2 | 	cmp	local02, #256 wc
206ec     D8 FF 9F CD |  if_b	jmp	#LR__2621
206f0                 | LR__2622
206f0                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
206f0     00 A8 06 F6 | 	mov	local02, #0
206f4     01 00 00 FF 
206f8     00 64 06 F1 | 	add	objptr, ##512
206fc     D7 12 48 FB | 	callpa	#(@LR__2624-@LR__2623)>>2,fcache_load_ptr_
20700                 | LR__2623
20700     54 AB 02 F6 | 	mov	local03, local02
20704     01 AA 66 F0 | 	shl	local03, #1
20708     32 AB 02 F1 | 	add	local03, objptr
2070c     54 B3 02 F6 | 	mov	local07, local02
20710     08 B2 66 F0 | 	shl	local07, #8
20714     55 B3 52 FC | 	wrword	local07, local03
20718     01 A8 06 F1 | 	add	local02, #1
2071c     00 A9 56 F2 | 	cmps	local02, #256 wc
20720     DC FF 9F CD |  if_b	jmp	#LR__2623
20724                 | LR__2624
20724     FE 65 06 F1 | 	add	objptr, #510
20728     32 01 58 FC | 	wrword	#0, objptr
2072c                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
2072c     00 A8 06 F6 | 	mov	local02, #0
20730     02 64 06 F1 | 	add	objptr, #2
20734     D7 16 48 FB | 	callpa	#(@LR__2626-@LR__2625)>>2,fcache_load_ptr_
20738                 | LR__2625
20738     54 AB 02 F6 | 	mov	local03, local02
2073c     01 AA 66 F0 | 	shl	local03, #1
20740     32 AB 02 F1 | 	add	local03, objptr
20744     54 B3 02 F6 | 	mov	local07, local02
20748     04 B2 66 F0 | 	shl	local07, #4
2074c     54 B3 02 F1 | 	add	local07, local02
20750     04 B2 66 F0 | 	shl	local07, #4
20754     55 B3 52 FC | 	wrword	local07, local03
20758     01 A8 06 F1 | 	add	local02, #1
2075c     F0 A8 56 F2 | 	cmps	local02, #240 wc
20760     D4 FF 9F CD |  if_b	jmp	#LR__2625
20764                 | LR__2626
20764     F0 A8 06 F6 | 	mov	local02, #240
20768     D7 14 48 FB | 	callpa	#(@LR__2628-@LR__2627)>>2,fcache_load_ptr_
2076c                 | LR__2627
2076c     54 AB 02 F6 | 	mov	local03, local02
20770     01 AA 66 F0 | 	shl	local03, #1
20774     32 AB 02 F1 | 	add	local03, objptr
20778     FF B0 06 F6 | 	mov	local06, #255
2077c     54 B1 82 F1 | 	sub	local06, local02
20780     0C B0 66 F0 | 	shl	local06, #12
20784     55 B1 52 FC | 	wrword	local06, local03
20788     01 A8 06 F1 | 	add	local02, #1
2078c     00 A9 16 F2 | 	cmp	local02, #256 wc
20790     D8 FF 9F CD |  if_b	jmp	#LR__2627
20794                 | LR__2628
20794                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
20794     00 A8 06 F6 | 	mov	local02, #0
20798     01 00 00 FF 
2079c     00 64 06 F1 | 	add	objptr, ##512
207a0     D7 20 48 FB | 	callpa	#(@LR__2630-@LR__2629)>>2,fcache_load_ptr_
207a4                 | LR__2629
207a4     54 AB 02 F6 | 	mov	local03, local02
207a8     01 AA 66 F0 | 	shl	local03, #1
207ac     32 AB 02 F1 | 	add	local03, objptr
207b0     54 B3 02 F6 | 	mov	local07, local02
207b4     09 B2 66 F0 | 	shl	local07, #9
207b8     55 B3 52 FC | 	wrword	local07, local03
207bc     FF AA 06 F6 | 	mov	local03, #255
207c0     54 AB 82 F1 | 	sub	local03, local02
207c4     01 AA 66 F0 | 	shl	local03, #1
207c8     32 AB 02 F1 | 	add	local03, objptr
207cc     54 B3 02 F6 | 	mov	local07, local02
207d0     09 B2 66 F0 | 	shl	local07, #9
207d4     55 B3 52 FC | 	wrword	local07, local03
207d8     01 A8 06 F1 | 	add	local02, #1
207dc     80 A8 56 F2 | 	cmps	local02, #128 wc
207e0     C0 FF 9F CD |  if_b	jmp	#LR__2629
207e4                 | LR__2630
207e4                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
207e4     00 A8 06 F6 | 	mov	local02, #0
207e8     01 00 00 FF 
207ec     00 64 06 F1 | 	add	objptr, ##512
207f0     D7 12 48 FB | 	callpa	#(@LR__2632-@LR__2631)>>2,fcache_load_ptr_
207f4                 | LR__2631
207f4     54 AB 02 F6 | 	mov	local03, local02
207f8     01 AA 66 F0 | 	shl	local03, #1
207fc     32 AB 02 F1 | 	add	local03, objptr
20800     54 B3 02 F6 | 	mov	local07, local02
20804     0D B2 66 F0 | 	shl	local07, #13
20808     55 B3 52 FC | 	wrword	local07, local03
2080c     01 A8 06 F1 | 	add	local02, #1
20810     08 A8 56 F2 | 	cmps	local02, #8 wc
20814     DC FF 9F CD |  if_b	jmp	#LR__2631
20818                 | LR__2632
20818                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
20818     08 A8 06 F6 | 	mov	local02, #8
2081c     D7 1A 48 FB | 	callpa	#(@LR__2634-@LR__2633)>>2,fcache_load_ptr_
20820                 | LR__2633
20820     54 AB 02 F6 | 	mov	local03, local02
20824     01 AA 66 F0 | 	shl	local03, #1
20828     32 AB 02 F1 | 	add	local03, objptr
2082c     54 AF 02 F6 | 	mov	local05, local02
20830     08 AE 86 F1 | 	sub	local05, #8
20834     0B AE 66 F0 | 	shl	local05, #11
20838     7F 00 00 FF 
2083c     00 B3 06 F6 | 	mov	local07, ##65280
20840     57 B3 82 F1 | 	sub	local07, local05
20844     55 B3 52 FC | 	wrword	local07, local03
20848     01 A8 06 F1 | 	add	local02, #1
2084c     18 A8 16 F2 | 	cmp	local02, #24 wc
20850     CC FF 9F CD |  if_b	jmp	#LR__2633
20854                 | LR__2634
20854                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
20854     18 A8 06 F6 | 	mov	local02, #24
20858     D7 10 48 FB | 	callpa	#(@LR__2636-@LR__2635)>>2,fcache_load_ptr_
2085c                 | LR__2635
2085c     54 AB 02 F6 | 	mov	local03, local02
20860     01 AA 66 F0 | 	shl	local03, #1
20864     32 AB 02 F1 | 	add	local03, objptr
20868     40 00 80 FF 
2086c     55 01 58 FC | 	wrword	##32768, local03
20870     01 A8 06 F1 | 	add	local02, #1
20874     81 A8 16 F2 | 	cmp	local02, #129 wc
20878     E0 FF 9F CD |  if_b	jmp	#LR__2635
2087c                 | LR__2636
2087c                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
2087c     81 A8 06 F6 | 	mov	local02, #129
20880     D7 14 48 FB | 	callpa	#(@LR__2638-@LR__2637)>>2,fcache_load_ptr_
20884                 | LR__2637
20884     54 AB 02 F6 | 	mov	local03, local02
20888     01 AA 66 F0 | 	shl	local03, #1
2088c     32 AB 02 F1 | 	add	local03, objptr
20890     FF B0 06 F6 | 	mov	local06, #255
20894     54 B1 82 F1 | 	sub	local06, local02
20898     08 B0 66 F0 | 	shl	local06, #8
2089c     55 B1 52 FC | 	wrword	local06, local03
208a0     01 A8 06 F1 | 	add	local02, #1
208a4     00 A9 16 F2 | 	cmp	local02, #256 wc
208a8     D8 FF 9F CD |  if_b	jmp	#LR__2637
208ac                 | LR__2638
208ac     3F 00 00 FF 
208b0     66 64 06 F1 | 	add	objptr, ##32358
208b4     32 01 59 FC | 	wrword	#128, objptr
208b8     54 00 00 FF 
208bc     9E 64 86 F1 | 	sub	objptr, ##43166
208c0                 | ' for i=0 to 7
208c0     00 A8 06 F6 | 	mov	local02, #0
208c4     D7 9C 48 FB | 	callpa	#(@LR__2640-@LR__2639)>>2,fcache_load_ptr_
208c8                 | LR__2639
208c8     54 AB 02 F6 | 	mov	local03, local02
208cc     03 AA 66 F0 | 	shl	local03, #3
208d0     54 AB 82 F1 | 	sub	local03, local02
208d4     02 AA 66 F0 | 	shl	local03, #2
208d8     16 00 00 FF 
208dc     BC 64 06 F1 | 	add	objptr, ##11452
208e0     32 AB 02 F1 | 	add	local03, objptr
208e4     00 EE A1 FF 
208e8     55 01 68 FC | 	wrlong	##1138491392, local03
208ec     54 AB 02 F6 | 	mov	local03, local02
208f0     03 AA 66 F0 | 	shl	local03, #3
208f4     54 AB 82 F1 | 	sub	local03, local02
208f8     02 AA 66 F0 | 	shl	local03, #2
208fc     32 AB 02 F1 | 	add	local03, objptr
20900     04 AA 06 F1 | 	add	local03, #4
20904     55 A9 42 FC | 	wrbyte	local02, local03
20908     54 AB 02 F6 | 	mov	local03, local02
2090c     03 AA 66 F0 | 	shl	local03, #3
20910     54 AB 82 F1 | 	sub	local03, local02
20914     02 AA 66 F0 | 	shl	local03, #2
20918     32 AB 02 F1 | 	add	local03, objptr
2091c     05 AA 06 F1 | 	add	local03, #5
20920     55 A9 42 FC | 	wrbyte	local02, local03
20924     54 AB 02 F6 | 	mov	local03, local02
20928     03 AA 66 F0 | 	shl	local03, #3
2092c     54 AB 82 F1 | 	sub	local03, local02
20930     02 AA 66 F0 | 	shl	local03, #2
20934     32 AB 02 F1 | 	add	local03, objptr
20938     06 AA 06 F1 | 	add	local03, #6
2093c     55 01 58 FC | 	wrword	#0, local03
20940     54 AB 02 F6 | 	mov	local03, local02
20944     03 AA 66 F0 | 	shl	local03, #3
20948     54 AB 82 F1 | 	sub	local03, local02
2094c     02 AA 66 F0 | 	shl	local03, #2
20950     32 AB 02 F1 | 	add	local03, objptr
20954     08 AA 06 F1 | 	add	local03, #8
20958     00 C0 9F FF 
2095c     55 01 68 FC | 	wrlong	##1065353216, local03
20960     54 AB 02 F6 | 	mov	local03, local02
20964     03 AA 66 F0 | 	shl	local03, #3
20968     54 AB 82 F1 | 	sub	local03, local02
2096c     02 AA 66 F0 | 	shl	local03, #2
20970     32 AB 02 F1 | 	add	local03, objptr
20974     0C AA 06 F1 | 	add	local03, #12
20978     00 40 A0 FF 
2097c     55 01 68 FC | 	wrlong	##1082130432, local03
20980     54 AB 02 F6 | 	mov	local03, local02
20984     03 AA 66 F0 | 	shl	local03, #3
20988     54 AB 82 F1 | 	sub	local03, local02
2098c     02 AA 66 F0 | 	shl	local03, #2
20990     32 AB 02 F1 | 	add	local03, objptr
20994     10 AA 06 F1 | 	add	local03, #16
20998     55 01 68 FC | 	wrlong	#0, local03
2099c     54 AB 02 F6 | 	mov	local03, local02
209a0     03 AA 66 F0 | 	shl	local03, #3
209a4     54 AB 82 F1 | 	sub	local03, local02
209a8     02 AA 66 F0 | 	shl	local03, #2
209ac     32 AB 02 F1 | 	add	local03, objptr
209b0     14 AA 06 F1 | 	add	local03, #20
209b4     55 FF 59 FC | 	wrword	#255, local03
209b8     54 AB 02 F6 | 	mov	local03, local02
209bc     03 AA 66 F0 | 	shl	local03, #3
209c0     54 AB 82 F1 | 	sub	local03, local02
209c4     02 AA 66 F0 | 	shl	local03, #2
209c8     32 AB 02 F1 | 	add	local03, objptr
209cc     16 AA 06 F1 | 	add	local03, #22
209d0     55 01 58 FC | 	wrword	#0, local03
209d4     54 AB 02 F6 | 	mov	local03, local02
209d8     01 AA 66 F0 | 	shl	local03, #1
209dc     3D 00 00 FF 
209e0     D4 65 06 F1 | 	add	objptr, ##31700
209e4     32 AB 02 F1 | 	add	local03, objptr
209e8     55 FF 59 FC | 	wrword	#255, local03
209ec     01 A8 06 F1 | 	add	local02, #1
209f0     08 A8 56 F2 | 	cmps	local02, #8 wc
209f4     54 00 00 FF 
209f8     90 64 86 F1 | 	sub	objptr, ##43152
209fc     C8 FE 9F CD |  if_b	jmp	#LR__2639
20a00                 | LR__2640
20a00     00 6E 20 FF 
20a04     00 B2 06 F6 | 	mov	local07, ##1088159744
20a08                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
20a08     03 B0 06 F6 | 	mov	local06, #3
20a0c                 | LR__2641
20a0c     59 93 02 F6 | 	mov	arg01, local07
20a10     CE C3 1F FF 
20a14     7D 94 06 F6 | 	mov	arg02, ##1065852029
20a18     58 68 B0 FD | 	call	#__system___float_mul
20a1c     3D B3 02 F6 | 	mov	local07, result1
20a20     FA B1 6E FB | 	djnz	local06, #LR__2641
20a24     00 A8 06 F6 | 	mov	local02, #0
20a28                 | LR__2642
20a28     54 AD 02 F6 | 	mov	local04, local02
20a2c     02 AC 66 F0 | 	shl	local04, #2
20a30     32 AB 02 F6 | 	mov	local03, objptr
20a34     16 00 00 FF 
20a38     38 AA 06 F1 | 	add	local03, ##11320
20a3c     55 AD 02 F1 | 	add	local04, local03
20a40     56 B3 62 FC | 	wrlong	local07, local04
20a44     59 93 02 F6 | 	mov	arg01, local07
20a48     CE C3 1F FF 
20a4c     7D 94 06 F6 | 	mov	arg02, ##1065852029
20a50     20 68 B0 FD | 	call	#__system___float_mul
20a54     3D B3 02 F6 | 	mov	local07, result1
20a58     01 A8 06 F1 | 	add	local02, #1
20a5c     0C A8 56 F2 | 	cmps	local02, #12 wc
20a60     C4 FF 9F CD |  if_b	jmp	#LR__2642
20a64     16 00 00 FF 
20a68     68 64 06 F1 | 	add	objptr, ##11368
20a6c     32 51 6B FC | 	wrlong	#424, objptr
20a70     04 64 06 F1 | 	add	objptr, #4
20a74     32 21 6B FC | 	wrlong	#400, objptr
20a78     04 64 06 F1 | 	add	objptr, #4
20a7c     32 F3 6A FC | 	wrlong	#377, objptr
20a80     04 64 06 F1 | 	add	objptr, #4
20a84     32 C9 6A FC | 	wrlong	#356, objptr
20a88     04 64 06 F1 | 	add	objptr, #4
20a8c     32 A1 6A FC | 	wrlong	#336, objptr
20a90     04 64 06 F1 | 	add	objptr, #4
20a94     32 7B 6A FC | 	wrlong	#317, objptr
20a98     04 64 06 F1 | 	add	objptr, #4
20a9c     32 59 6A FC | 	wrlong	#300, objptr
20aa0     04 64 06 F1 | 	add	objptr, #4
20aa4     32 37 6A FC | 	wrlong	#283, objptr
20aa8     04 64 06 F1 | 	add	objptr, #4
20aac     32 17 6A FC | 	wrlong	#267, objptr
20ab0     04 64 06 F1 | 	add	objptr, #4
20ab4     32 F9 69 FC | 	wrlong	#252, objptr
20ab8     04 64 06 F1 | 	add	objptr, #4
20abc     32 DD 69 FC | 	wrlong	#238, objptr
20ac0     04 64 06 F1 | 	add	objptr, #4
20ac4     32 C1 69 FC | 	wrlong	#224, objptr
20ac8     3E 00 00 FF 
20acc     0A 64 06 F1 | 	add	objptr, ##31754
20ad0     32 01 59 FC | 	wrword	#128, objptr
20ad4     02 64 86 F1 | 	sub	objptr, #2
20ad8     32 01 59 FC | 	wrword	#128, objptr
20adc     54 00 00 FF 
20ae0     9C 64 86 F1 | 	sub	objptr, ##43164
20ae4     E7 F0 03 F6 | 	mov	ptra, fp
20ae8     F2 00 A0 FD | 	call	#popregs_
20aec                 | _init_audio_ret
20aec     2D 00 64 FD | 	ret
20af0                 | 
20af0                 | ' 
20af0                 | ' '------------------- Error messages
20af0                 | ' 
20af0                 | ' sub init_error_strings
20af0                 | _init_error_strings
20af0     99 01 00 FF 
20af4     51 81 06 F6 | 	mov	_var01, ##@LR__6102
20af8     47 00 00 FF 
20afc     20 64 06 F1 | 	add	objptr, ##36384
20b00     32 81 62 FC | 	wrlong	_var01, objptr
20b04     99 01 00 FF 
20b08     52 81 06 F6 | 	mov	_var01, ##@LR__6103
20b0c     04 64 06 F1 | 	add	objptr, #4
20b10     32 81 62 FC | 	wrlong	_var01, objptr
20b14     99 01 00 FF 
20b18     76 81 06 F6 | 	mov	_var01, ##@LR__6104
20b1c     04 64 06 F1 | 	add	objptr, #4
20b20     32 81 62 FC | 	wrlong	_var01, objptr
20b24     99 01 00 FF 
20b28     96 81 06 F6 | 	mov	_var01, ##@LR__6105
20b2c     04 64 06 F1 | 	add	objptr, #4
20b30     32 81 62 FC | 	wrlong	_var01, objptr
20b34     99 01 00 FF 
20b38     AF 81 06 F6 | 	mov	_var01, ##@LR__6106
20b3c     04 64 06 F1 | 	add	objptr, #4
20b40     32 81 62 FC | 	wrlong	_var01, objptr
20b44     99 01 00 FF 
20b48     CA 81 06 F6 | 	mov	_var01, ##@LR__6107
20b4c     04 64 06 F1 | 	add	objptr, #4
20b50     32 81 62 FC | 	wrlong	_var01, objptr
20b54     99 01 00 FF 
20b58     EB 81 06 F6 | 	mov	_var01, ##@LR__6108
20b5c     04 64 06 F1 | 	add	objptr, #4
20b60     32 81 62 FC | 	wrlong	_var01, objptr
20b64     9A 01 00 FF 
20b68     18 80 06 F6 | 	mov	_var01, ##@LR__6109
20b6c     04 64 06 F1 | 	add	objptr, #4
20b70     32 81 62 FC | 	wrlong	_var01, objptr
20b74     9A 01 00 FF 
20b78     42 80 06 F6 | 	mov	_var01, ##@LR__6110
20b7c     04 64 06 F1 | 	add	objptr, #4
20b80     32 81 62 FC | 	wrlong	_var01, objptr
20b84     9A 01 00 FF 
20b88     5A 80 06 F6 | 	mov	_var01, ##@LR__6111
20b8c     04 64 06 F1 | 	add	objptr, #4
20b90     32 81 62 FC | 	wrlong	_var01, objptr
20b94     9A 01 00 FF 
20b98     7A 80 06 F6 | 	mov	_var01, ##@LR__6112
20b9c     04 64 06 F1 | 	add	objptr, #4
20ba0     32 81 62 FC | 	wrlong	_var01, objptr
20ba4     9A 01 00 FF 
20ba8     90 80 06 F6 | 	mov	_var01, ##@LR__6113
20bac     04 64 06 F1 | 	add	objptr, #4
20bb0     32 81 62 FC | 	wrlong	_var01, objptr
20bb4     9A 01 00 FF 
20bb8     AD 80 06 F6 | 	mov	_var01, ##@LR__6114
20bbc     04 64 06 F1 | 	add	objptr, #4
20bc0     32 81 62 FC | 	wrlong	_var01, objptr
20bc4     9A 01 00 FF 
20bc8     D0 80 06 F6 | 	mov	_var01, ##@LR__6115
20bcc     04 64 06 F1 | 	add	objptr, #4
20bd0     32 81 62 FC | 	wrlong	_var01, objptr
20bd4     9A 01 00 FF 
20bd8     F6 80 06 F6 | 	mov	_var01, ##@LR__6116
20bdc     04 64 06 F1 | 	add	objptr, #4
20be0     32 81 62 FC | 	wrlong	_var01, objptr
20be4     9A 01 00 FF 
20be8     11 81 06 F6 | 	mov	_var01, ##@LR__6117
20bec     04 64 06 F1 | 	add	objptr, #4
20bf0     32 81 62 FC | 	wrlong	_var01, objptr
20bf4     9A 01 00 FF 
20bf8     21 81 06 F6 | 	mov	_var01, ##@LR__6118
20bfc     04 64 06 F1 | 	add	objptr, #4
20c00     32 81 62 FC | 	wrlong	_var01, objptr
20c04     9A 01 00 FF 
20c08     30 81 06 F6 | 	mov	_var01, ##@LR__6119
20c0c     04 64 06 F1 | 	add	objptr, #4
20c10     32 81 62 FC | 	wrlong	_var01, objptr
20c14     9A 01 00 FF 
20c18     4A 81 06 F6 | 	mov	_var01, ##@LR__6120
20c1c     04 64 06 F1 | 	add	objptr, #4
20c20     32 81 62 FC | 	wrlong	_var01, objptr
20c24     9A 01 00 FF 
20c28     5B 81 06 F6 | 	mov	_var01, ##@LR__6121
20c2c     04 64 06 F1 | 	add	objptr, #4
20c30     32 81 62 FC | 	wrlong	_var01, objptr
20c34     9A 01 00 FF 
20c38     72 81 06 F6 | 	mov	_var01, ##@LR__6122
20c3c     04 64 06 F1 | 	add	objptr, #4
20c40     32 81 62 FC | 	wrlong	_var01, objptr
20c44     9A 01 00 FF 
20c48     85 81 06 F6 | 	mov	_var01, ##@LR__6123
20c4c     04 64 06 F1 | 	add	objptr, #4
20c50     32 81 62 FC | 	wrlong	_var01, objptr
20c54     9A 01 00 FF 
20c58     94 81 06 F6 | 	mov	_var01, ##@LR__6124
20c5c     04 64 06 F1 | 	add	objptr, #4
20c60     32 81 62 FC | 	wrlong	_var01, objptr
20c64     9A 01 00 FF 
20c68     B0 81 06 F6 | 	mov	_var01, ##@LR__6125
20c6c     04 64 06 F1 | 	add	objptr, #4
20c70     32 81 62 FC | 	wrlong	_var01, objptr
20c74     9A 01 00 FF 
20c78     C0 81 06 F6 | 	mov	_var01, ##@LR__6126
20c7c     04 64 06 F1 | 	add	objptr, #4
20c80     32 81 62 FC | 	wrlong	_var01, objptr
20c84     9A 01 00 FF 
20c88     D0 81 06 F6 | 	mov	_var01, ##@LR__6127
20c8c     04 64 06 F1 | 	add	objptr, #4
20c90     32 81 62 FC | 	wrlong	_var01, objptr
20c94     9B 01 00 FF 
20c98     03 80 06 F6 | 	mov	_var01, ##@LR__6128
20c9c     04 64 06 F1 | 	add	objptr, #4
20ca0     32 81 62 FC | 	wrlong	_var01, objptr
20ca4     9B 01 00 FF 
20ca8     1E 80 06 F6 | 	mov	_var01, ##@LR__6129
20cac     04 64 06 F1 | 	add	objptr, #4
20cb0     32 81 62 FC | 	wrlong	_var01, objptr
20cb4     9B 01 00 FF 
20cb8     33 80 06 F6 | 	mov	_var01, ##@LR__6130
20cbc     04 64 06 F1 | 	add	objptr, #4
20cc0     32 81 62 FC | 	wrlong	_var01, objptr
20cc4     9B 01 00 FF 
20cc8     3F 80 06 F6 | 	mov	_var01, ##@LR__6131
20ccc     04 64 06 F1 | 	add	objptr, #4
20cd0     32 81 62 FC | 	wrlong	_var01, objptr
20cd4     9B 01 00 FF 
20cd8     50 80 06 F6 | 	mov	_var01, ##@LR__6132
20cdc     04 64 06 F1 | 	add	objptr, #4
20ce0     32 81 62 FC | 	wrlong	_var01, objptr
20ce4     9B 01 00 FF 
20ce8     60 80 06 F6 | 	mov	_var01, ##@LR__6133
20cec     04 64 06 F1 | 	add	objptr, #4
20cf0     32 81 62 FC | 	wrlong	_var01, objptr
20cf4     9B 01 00 FF 
20cf8     7B 80 06 F6 | 	mov	_var01, ##@LR__6134
20cfc     04 64 06 F1 | 	add	objptr, #4
20d00     32 81 62 FC | 	wrlong	_var01, objptr
20d04     9B 01 00 FF 
20d08     8B 80 06 F6 | 	mov	_var01, ##@LR__6135
20d0c     04 64 06 F1 | 	add	objptr, #4
20d10     32 81 62 FC | 	wrlong	_var01, objptr
20d14     9B 01 00 FF 
20d18     99 80 06 F6 | 	mov	_var01, ##@LR__6136
20d1c     04 64 06 F1 | 	add	objptr, #4
20d20     32 81 62 FC | 	wrlong	_var01, objptr
20d24     9B 01 00 FF 
20d28     B3 80 06 F6 | 	mov	_var01, ##@LR__6137
20d2c     04 64 06 F1 | 	add	objptr, #4
20d30     32 81 62 FC | 	wrlong	_var01, objptr
20d34     9B 01 00 FF 
20d38     E6 80 06 F6 | 	mov	_var01, ##@LR__6138
20d3c     04 64 06 F1 | 	add	objptr, #4
20d40     32 81 62 FC | 	wrlong	_var01, objptr
20d44     9B 01 00 FF 
20d48     FE 80 06 F6 | 	mov	_var01, ##@LR__6139
20d4c     04 64 06 F1 | 	add	objptr, #4
20d50     32 81 62 FC | 	wrlong	_var01, objptr
20d54     9B 01 00 FF 
20d58     19 81 06 F6 | 	mov	_var01, ##@LR__6140
20d5c     04 64 06 F1 | 	add	objptr, #4
20d60     32 81 62 FC | 	wrlong	_var01, objptr
20d64     9B 01 00 FF 
20d68     36 81 06 F6 | 	mov	_var01, ##@LR__6141
20d6c     04 64 06 F1 | 	add	objptr, #4
20d70     32 81 62 FC | 	wrlong	_var01, objptr
20d74     9B 01 00 FF 
20d78     4F 81 06 F6 | 	mov	_var01, ##@LR__6142
20d7c     04 64 06 F1 | 	add	objptr, #4
20d80     32 81 62 FC | 	wrlong	_var01, objptr
20d84     9B 01 00 FF 
20d88     6E 81 06 F6 | 	mov	_var01, ##@LR__6143
20d8c     04 64 06 F1 | 	add	objptr, #4
20d90     32 81 62 FC | 	wrlong	_var01, objptr
20d94     9B 01 00 FF 
20d98     7C 81 06 F6 | 	mov	_var01, ##@LR__6144
20d9c     04 64 06 F1 | 	add	objptr, #4
20da0     32 81 62 FC | 	wrlong	_var01, objptr
20da4     9B 01 00 FF 
20da8     A9 81 06 F6 | 	mov	_var01, ##@LR__6145
20dac     04 64 06 F1 | 	add	objptr, #4
20db0     32 81 62 FC | 	wrlong	_var01, objptr
20db4     9B 01 00 FF 
20db8     B6 81 06 F6 | 	mov	_var01, ##@LR__6146
20dbc     04 64 06 F1 | 	add	objptr, #4
20dc0     32 81 62 FC | 	wrlong	_var01, objptr
20dc4     9B 01 00 FF 
20dc8     CA 81 06 F6 | 	mov	_var01, ##@LR__6147
20dcc     04 64 06 F1 | 	add	objptr, #4
20dd0     32 81 62 FC | 	wrlong	_var01, objptr
20dd4     9B 01 00 FF 
20dd8     EE 81 06 F6 | 	mov	_var01, ##@LR__6148
20ddc     04 64 06 F1 | 	add	objptr, #4
20de0     32 81 62 FC | 	wrlong	_var01, objptr
20de4     9C 01 00 FF 
20de8     05 80 06 F6 | 	mov	_var01, ##@LR__6149
20dec     04 64 06 F1 | 	add	objptr, #4
20df0     32 81 62 FC | 	wrlong	_var01, objptr
20df4     9C 01 00 FF 
20df8     18 80 06 F6 | 	mov	_var01, ##@LR__6150
20dfc     04 64 06 F1 | 	add	objptr, #4
20e00     32 81 62 FC | 	wrlong	_var01, objptr
20e04     9C 01 00 FF 
20e08     2F 80 06 F6 | 	mov	_var01, ##@LR__6151
20e0c     04 64 06 F1 | 	add	objptr, #4
20e10     32 81 62 FC | 	wrlong	_var01, objptr
20e14     9C 01 00 FF 
20e18     48 80 06 F6 | 	mov	_var01, ##@LR__6152
20e1c     04 64 06 F1 | 	add	objptr, #4
20e20     32 81 62 FC | 	wrlong	_var01, objptr
20e24     9C 01 00 FF 
20e28     6A 80 06 F6 | 	mov	_var01, ##@LR__6153
20e2c     04 64 06 F1 | 	add	objptr, #4
20e30     32 81 62 FC | 	wrlong	_var01, objptr
20e34     9C 01 00 FF 
20e38     7D 80 06 F6 | 	mov	_var01, ##@LR__6154
20e3c     04 64 06 F1 | 	add	objptr, #4
20e40     32 81 62 FC | 	wrlong	_var01, objptr
20e44     9C 01 00 FF 
20e48     8D 80 06 F6 | 	mov	_var01, ##@LR__6155
20e4c     04 64 06 F1 | 	add	objptr, #4
20e50     32 81 62 FC | 	wrlong	_var01, objptr
20e54     9C 01 00 FF 
20e58     A5 80 06 F6 | 	mov	_var01, ##@LR__6156
20e5c     04 64 06 F1 | 	add	objptr, #4
20e60     32 81 62 FC | 	wrlong	_var01, objptr
20e64     9C 01 00 FF 
20e68     BC 80 06 F6 | 	mov	_var01, ##@LR__6157
20e6c     04 64 06 F1 | 	add	objptr, #4
20e70     32 81 62 FC | 	wrlong	_var01, objptr
20e74     47 00 00 FF 
20e78     FC 64 86 F1 | 	sub	objptr, ##36604
20e7c                 | _init_error_strings_ret
20e7c     2D 00 64 FD | 	ret
20e80                 | 
20e80                 | '         
20e80                 | ' sub printerror(err as integer, linenum=0 as integer)
20e80                 | _printerror
20e80     02 CA 05 F6 | 	mov	COUNT_, #2
20e84     E8 00 A0 FD | 	call	#pushregs_
20e88     49 A7 02 F6 | 	mov	local01, arg01
20e8c     4A A9 02 F6 | 	mov	local02, arg02
20e90     9C 01 00 FF 
20e94     C9 92 06 F6 | 	mov	arg01, ##@LR__6158
20e98     78 21 B0 FD | 	call	#_hg010b_spin2_write
20e9c     53 93 02 F6 | 	mov	arg01, local01
20ea0     B4 26 B0 FD | 	call	#_hg010b_spin2_inttostr
20ea4     3D 93 02 F6 | 	mov	arg01, result1
20ea8     68 21 B0 FD | 	call	#_hg010b_spin2_write
20eac     9C 01 00 FF 
20eb0     D0 92 06 F6 | 	mov	arg01, ##@LR__6159
20eb4     5C 21 B0 FD | 	call	#_hg010b_spin2_write
20eb8     02 A6 66 F0 | 	shl	local01, #2
20ebc     32 95 02 F6 | 	mov	arg02, objptr
20ec0     47 00 00 FF 
20ec4     20 94 06 F1 | 	add	arg02, ##36384
20ec8     4A A7 02 F1 | 	add	local01, arg02
20ecc     53 93 02 FB | 	rdlong	arg01, local01
20ed0     40 21 B0 FD | 	call	#_hg010b_spin2_write
20ed4                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
20ed4                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
20ed4     01 A8 56 F2 | 	cmps	local02, #1 wc
20ed8     24 00 90 CD |  if_b	jmp	#LR__2650
20edc     9C 01 00 FF 
20ee0     D4 92 06 F6 | 	mov	arg01, ##@LR__6160
20ee4     2C 21 B0 FD | 	call	#_hg010b_spin2_write
20ee8     54 93 02 F6 | 	mov	arg01, local02
20eec     68 26 B0 FD | 	call	#_hg010b_spin2_inttostr
20ef0     3D 93 02 F6 | 	mov	arg01, result1
20ef4                 | ' 
20ef4                 | ' write(text)
20ef4     1C 21 B0 FD | 	call	#_hg010b_spin2_write
20ef8                 | ' crlf
20ef8     B8 25 B0 FD | 	call	#_hg010b_spin2_crlf
20efc     10 00 90 FD | 	jmp	#LR__2651
20f00                 | LR__2650
20f00     9C 01 00 FF 
20f04     DE 92 06 F6 | 	mov	arg01, ##@LR__6161
20f08                 | ' 
20f08                 | ' write(text)
20f08     08 21 B0 FD | 	call	#_hg010b_spin2_write
20f0c                 | ' crlf
20f0c     A4 25 B0 FD | 	call	#_hg010b_spin2_crlf
20f10                 | LR__2651
20f10     E7 F0 03 F6 | 	mov	ptra, fp
20f14     F2 00 A0 FD | 	call	#popregs_
20f18                 | _printerror_ret
20f18     2D 00 64 FD | 	ret
20f1c                 | 
20f1c                 | ' 
20f1c                 | ' '' ------------------------------- Hardware start/stop/initialization 
20f1c                 | ' 
20f1c                 | ' sub startpsram
20f1c                 | _startpsram
20f1c     00 92 06 F6 | 	mov	arg01, #0
20f20     0A 94 C6 F9 | 	decod	arg02, #10
20f24     0B 96 06 F6 | 	mov	arg03, #11
20f28     07 98 06 F6 | 	mov	arg04, #7
20f2c     0B 00 00 FF 
20f30     CC 64 06 F1 | 	add	objptr, ##5836
20f34     A4 2A B0 FD | 	call	#_psram_spin2_startx
20f38     2D 00 00 FF 
20f3c     E0 64 06 F1 | 	add	objptr, ##23264
20f40     32 7B 62 FC | 	wrlong	result1, objptr
20f44     0C 64 06 F1 | 	add	objptr, #12
20f48     32 7D 62 FC | 	wrlong	result2, objptr
20f4c     38 00 00 FF 
20f50     B8 65 86 F1 | 	sub	objptr, ##29112
20f54                 | _startpsram_ret
20f54     2D 00 64 FD | 	ret
20f58                 | 
20f58                 | ' 
20f58                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
20f58                 | _startvideo
20f58     01 CA 05 F6 | 	mov	COUNT_, #1
20f5c     E8 00 A0 FD | 	call	#pushregs_
20f60     38 00 00 FF 
20f64     B8 65 06 F1 | 	add	objptr, ##29112
20f68     32 99 02 FB | 	rdlong	arg04, objptr
20f6c     38 00 00 FF 
20f70     B8 65 86 F1 | 	sub	objptr, ##29112
20f74     4A 93 02 F6 | 	mov	arg01, arg02
20f78     4C 95 02 F6 | 	mov	arg02, arg04
20f7c     14 08 B0 FD | 	call	#_hg010b_spin2_start
20f80     38 00 00 FF 
20f84     A4 65 06 F1 | 	add	objptr, ##29092
20f88     32 7B 62 FC | 	wrlong	result1, objptr
20f8c                 | ' 
20f8c                 | ' videocog=v.start(pin,mbox)
20f8c                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
20f8c     00 A6 06 F6 | 	mov	local01, #0
20f90     2D 00 00 FF 
20f94     D8 64 86 F1 | 	sub	objptr, ##23256
20f98                 | LR__2660
20f98     53 93 02 F6 | 	mov	arg01, local01
20f9c     00 28 00 FF 
20fa0     00 94 06 F6 | 	mov	arg02, ##5242880
20fa4     B4 2E B0 FD | 	call	#_psram_spin2_setQos
20fa8     01 A6 06 F1 | 	add	local01, #1
20fac     08 A6 56 F2 | 	cmps	local01, #8 wc
20fb0     E4 FF 9F CD |  if_b	jmp	#LR__2660
20fb4     2D 00 00 FF 
20fb8     D8 64 06 F1 | 	add	objptr, ##23256
20fbc     32 93 02 FB | 	rdlong	arg01, objptr
20fc0     7A 00 02 FF 
20fc4     00 94 06 F6 | 	mov	arg02, ##67171328
20fc8     2D 00 00 FF 
20fcc     D8 64 86 F1 | 	sub	objptr, ##23256
20fd0     88 2E B0 FD | 	call	#_psram_spin2_setQos
20fd4     0B 00 00 FF 
20fd8     CC 64 86 F1 | 	sub	objptr, ##5836
20fdc                 | ' psram.setQoS(videocog, $0400f400) 
20fdc                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
20fdc     32 95 02 F6 | 	mov	arg02, objptr
20fe0     00 68 05 FF 
20fe4     00 94 46 F5 | 	or	arg02, ##181403648
20fe8     00 96 06 F6 | 	mov	arg03, #0
20fec     00 98 06 F6 | 	mov	arg04, #0
20ff0     00 92 06 F6 | 	mov	arg01, #0
20ff4     FC 45 B0 FD | 	call	#__system___basic_open
20ff8                 | ' return videocog
20ff8     38 00 00 FF 
20ffc     A4 65 06 F1 | 	add	objptr, ##29092
21000     32 7B 02 FB | 	rdlong	result1, objptr
21004     38 00 00 FF 
21008     A4 65 86 F1 | 	sub	objptr, ##29092
2100c     E7 F0 03 F6 | 	mov	ptra, fp
21010     F2 00 A0 FD | 	call	#popregs_
21014                 | _startvideo_ret
21014     2D 00 64 FD | 	ret
21018                 | 
21018                 | ' 
21018                 | ' 
21018                 | ' 
21018                 | ' '' ------------------------------- Convenient psram peek/poke
21018                 | ' 
21018                 | ' sub pslpoke(addr as ulong,value as ulong)
21018                 | _pslpoke
21018     00 CA 05 F6 | 	mov	COUNT_, #0
2101c     E8 00 A0 FD | 	call	#pushregs_
21020     08 F0 07 F1 | 	add	ptra, #8
21024     49 97 02 F6 | 	mov	arg03, arg01
21028     04 CE 05 F1 | 	add	fp, #4
2102c     E7 94 62 FC | 	wrlong	arg02, fp
21030     E7 92 02 F6 | 	mov	arg01, fp
21034     04 CE 85 F1 | 	sub	fp, #4
21038     4B 95 02 F6 | 	mov	arg02, arg03
2103c     04 96 06 F6 | 	mov	arg03, #4
21040     0B 00 00 FF 
21044     CC 64 06 F1 | 	add	objptr, ##5836
21048     78 2C B0 FD | 	call	#_psram_spin2_write
2104c     0B 00 00 FF 
21050     CC 64 86 F1 | 	sub	objptr, ##5836
21054     E7 F0 03 F6 | 	mov	ptra, fp
21058     F2 00 A0 FD | 	call	#popregs_
2105c                 | _pslpoke_ret
2105c     2D 00 64 FD | 	ret
21060                 | 
21060                 | ' 
21060                 | ' sub psdpoke(addr as ulong,value as ulong)
21060                 | _psdpoke
21060     00 CA 05 F6 | 	mov	COUNT_, #0
21064     E8 00 A0 FD | 	call	#pushregs_
21068     08 F0 07 F1 | 	add	ptra, #8
2106c     49 97 02 F6 | 	mov	arg03, arg01
21070     04 CE 05 F1 | 	add	fp, #4
21074     E7 94 62 FC | 	wrlong	arg02, fp
21078     E7 92 02 F6 | 	mov	arg01, fp
2107c     04 CE 85 F1 | 	sub	fp, #4
21080     4B 95 02 F6 | 	mov	arg02, arg03
21084     02 96 06 F6 | 	mov	arg03, #2
21088     0B 00 00 FF 
2108c     CC 64 06 F1 | 	add	objptr, ##5836
21090     30 2C B0 FD | 	call	#_psram_spin2_write
21094     0B 00 00 FF 
21098     CC 64 86 F1 | 	sub	objptr, ##5836
2109c     E7 F0 03 F6 | 	mov	ptra, fp
210a0     F2 00 A0 FD | 	call	#popregs_
210a4                 | _psdpoke_ret
210a4     2D 00 64 FD | 	ret
210a8                 | 
210a8                 | ' 
210a8                 | ' sub pspoke(addr as ulong,value as ulong)
210a8                 | _pspoke
210a8     00 CA 05 F6 | 	mov	COUNT_, #0
210ac     E8 00 A0 FD | 	call	#pushregs_
210b0     08 F0 07 F1 | 	add	ptra, #8
210b4     49 97 02 F6 | 	mov	arg03, arg01
210b8     04 CE 05 F1 | 	add	fp, #4
210bc     E7 94 62 FC | 	wrlong	arg02, fp
210c0     E7 92 02 F6 | 	mov	arg01, fp
210c4     04 CE 85 F1 | 	sub	fp, #4
210c8     4B 95 02 F6 | 	mov	arg02, arg03
210cc     01 96 06 F6 | 	mov	arg03, #1
210d0     0B 00 00 FF 
210d4     CC 64 06 F1 | 	add	objptr, ##5836
210d8     E8 2B B0 FD | 	call	#_psram_spin2_write
210dc     0B 00 00 FF 
210e0     CC 64 86 F1 | 	sub	objptr, ##5836
210e4     E7 F0 03 F6 | 	mov	ptra, fp
210e8     F2 00 A0 FD | 	call	#popregs_
210ec                 | _pspoke_ret
210ec     2D 00 64 FD | 	ret
210f0                 | 
210f0                 | ' 
210f0                 | ' function pspeek(adr as ulong) as ubyte
210f0                 | _pspeek
210f0     00 CA 05 F6 | 	mov	COUNT_, #0
210f4     E8 00 A0 FD | 	call	#pushregs_
210f8     0C F0 07 F1 | 	add	ptra, #12
210fc     49 95 02 F6 | 	mov	arg02, arg01
21100     E7 92 02 F6 | 	mov	arg01, fp
21104     08 92 06 F1 | 	add	arg01, #8
21108     01 96 06 F6 | 	mov	arg03, #1
2110c     0B 00 00 FF 
21110     CC 64 06 F1 | 	add	objptr, ##5836
21114     10 2B B0 FD | 	call	#_psram_spin2_read1
21118     0B 00 00 FF 
2111c     CC 64 86 F1 | 	sub	objptr, ##5836
21120                 | ' psram.read1(varptr(res),adr,1)
21120                 | ' return res
21120     08 CE 05 F1 | 	add	fp, #8
21124     E7 7A C2 FA | 	rdbyte	result1, fp
21128     08 CE 85 F1 | 	sub	fp, #8
2112c     E7 F0 03 F6 | 	mov	ptra, fp
21130     F2 00 A0 FD | 	call	#popregs_
21134                 | _pspeek_ret
21134     2D 00 64 FD | 	ret
21138                 | 
21138                 | ' 
21138                 | ' function pslpeek(adr as ulong) as ulong
21138                 | _pslpeek
21138     00 CA 05 F6 | 	mov	COUNT_, #0
2113c     E8 00 A0 FD | 	call	#pushregs_
21140     0C F0 07 F1 | 	add	ptra, #12
21144     49 95 02 F6 | 	mov	arg02, arg01
21148     E7 92 02 F6 | 	mov	arg01, fp
2114c     08 92 06 F1 | 	add	arg01, #8
21150     04 96 06 F6 | 	mov	arg03, #4
21154     0B 00 00 FF 
21158     CC 64 06 F1 | 	add	objptr, ##5836
2115c     C8 2A B0 FD | 	call	#_psram_spin2_read1
21160     0B 00 00 FF 
21164     CC 64 86 F1 | 	sub	objptr, ##5836
21168                 | ' psram.read1(varptr(res),adr,4)
21168                 | ' return res
21168     08 CE 05 F1 | 	add	fp, #8
2116c     E7 7A 02 FB | 	rdlong	result1, fp
21170     08 CE 85 F1 | 	sub	fp, #8
21174     E7 F0 03 F6 | 	mov	ptra, fp
21178     F2 00 A0 FD | 	call	#popregs_
2117c                 | _pslpeek_ret
2117c     2D 00 64 FD | 	ret
21180                 | 
21180                 | ' 
21180                 | ' function psdpeek(adr as ulong) as ulong
21180                 | _psdpeek
21180     00 CA 05 F6 | 	mov	COUNT_, #0
21184     E8 00 A0 FD | 	call	#pushregs_
21188     0C F0 07 F1 | 	add	ptra, #12
2118c     49 95 02 F6 | 	mov	arg02, arg01
21190     E7 92 02 F6 | 	mov	arg01, fp
21194     08 92 06 F1 | 	add	arg01, #8
21198     02 96 06 F6 | 	mov	arg03, #2
2119c     0B 00 00 FF 
211a0     CC 64 06 F1 | 	add	objptr, ##5836
211a4     80 2A B0 FD | 	call	#_psram_spin2_read1
211a8     0B 00 00 FF 
211ac     CC 64 86 F1 | 	sub	objptr, ##5836
211b0                 | ' psram.read1(varptr(res),adr,2)
211b0                 | ' return res
211b0     08 CE 05 F1 | 	add	fp, #8
211b4     E7 7A E2 FA | 	rdword	result1, fp
211b8     08 CE 85 F1 | 	sub	fp, #8
211bc     E7 F0 03 F6 | 	mov	ptra, fp
211c0     F2 00 A0 FD | 	call	#popregs_
211c4                 | _psdpeek_ret
211c4     2D 00 64 FD | 	ret
211c8                 | 
211c8                 | ' 
211c8                 | ' '' ------------------------------- USB keyboard scan to char translator
211c8                 | ' 
211c8                 | ' function scantochar(key)
211c8                 | _scantochar
211c8                 | ' 
211c8                 | ' select case (key shr 8) and 255
211c8     49 81 02 F6 | 	mov	_var01, arg01
211cc     08 80 C6 F0 | 	sar	_var01, #8
211d0     FF 80 0E F5 | 	and	_var01, #255 wz
211d4     24 00 90 AD |  if_e	jmp	#LR__2670
211d8     02 80 0E F2 | 	cmp	_var01, #2 wz
211dc     20 80 0E 52 |  if_ne	cmp	_var01, #32 wz
211e0     30 00 90 AD |  if_e	jmp	#LR__2671
211e4     40 80 0E F2 | 	cmp	_var01, #64 wz
211e8     44 00 90 AD |  if_e	jmp	#LR__2672
211ec     42 80 0E F2 | 	cmp	_var01, #66 wz
211f0     60 80 0E 52 |  if_ne	cmp	_var01, #96 wz
211f4     70 00 90 5D |  if_ne	jmp	#LR__2674
211f8     50 00 90 FD | 	jmp	#LR__2673
211fc                 | LR__2670
211fc     49 7B 02 F6 | 	mov	result1, arg01
21200     7F 7A 06 F5 | 	and	result1, #127
21204     02 7A 66 F0 | 	shl	result1, #2
21208     35 7B 02 F1 | 	add	result1, ptr__dat__
2120c     3D 7B C2 FA | 	rdbyte	result1, result1
21210     54 00 90 FD | 	jmp	#_scantochar_ret
21214                 | LR__2671
21214     49 7B 02 F6 | 	mov	result1, arg01
21218     7F 7A 06 F5 | 	and	result1, #127
2121c     02 7A 66 F0 | 	shl	result1, #2
21220     01 7A 06 F1 | 	add	result1, #1
21224     35 7B 02 F1 | 	add	result1, ptr__dat__
21228     3D 7B C2 FA | 	rdbyte	result1, result1
2122c     38 00 90 FD | 	jmp	#_scantochar_ret
21230                 | LR__2672
21230     49 7B 02 F6 | 	mov	result1, arg01
21234     7F 7A 06 F5 | 	and	result1, #127
21238     02 7A 66 F0 | 	shl	result1, #2
2123c     02 7A 06 F1 | 	add	result1, #2
21240     35 7B 02 F1 | 	add	result1, ptr__dat__
21244     3D 7B C2 FA | 	rdbyte	result1, result1
21248     1C 00 90 FD | 	jmp	#_scantochar_ret
2124c                 | LR__2673
2124c     49 7B 02 F6 | 	mov	result1, arg01
21250     7F 7A 06 F5 | 	and	result1, #127
21254     02 7A 66 F0 | 	shl	result1, #2
21258     03 7A 06 F1 | 	add	result1, #3
2125c     35 7B 02 F1 | 	add	result1, ptr__dat__
21260     3D 7B C2 FA | 	rdbyte	result1, result1
21264     00 00 90 FD | 	jmp	#_scantochar_ret
21268                 | LR__2674
21268                 | _scantochar_ret
21268     2D 00 64 FD | 	ret
2126c                 | 
2126c                 | _program
2126c     03 CA 05 F6 | 	mov	COUNT_, #3
21270     E8 00 A0 FD | 	call	#pushregs_
21274     A4 FC BF FD | 	call	#_startpsram
21278     38 00 00 FF 
2127c     B8 65 06 F1 | 	add	objptr, ##29112
21280     32 93 02 FB | 	rdlong	arg01, objptr
21284     00 94 06 F6 | 	mov	arg02, #0
21288     F0 03 00 FF 
2128c     00 96 06 F6 | 	mov	arg03, ##516096
21290     2D 00 00 FF 
21294     EC 64 86 F1 | 	sub	objptr, ##23276
21298     24 2F B0 FD | 	call	#_Audio2_004_spin2_start
2129c     3E 97 02 F6 | 	mov	arg03, result2
212a0     2D 00 00 FF 
212a4     D4 64 06 F1 | 	add	objptr, ##23252
212a8     32 7B 62 FC | 	wrlong	result1, objptr
212ac     14 64 06 F1 | 	add	objptr, #20
212b0     32 97 62 FC | 	wrlong	arg03, objptr
212b4     38 00 00 FF 
212b8     B4 65 86 F1 | 	sub	objptr, ##29108
212bc     32 92 06 F6 | 	mov	arg01, #50
212c0     D4 3B B0 FD | 	call	#__system___waitms
212c4     98 2C B0 FD | 	call	#_usbnew_spin2_start
212c8     38 00 00 FF 
212cc     A8 65 06 F1 | 	add	objptr, ##29096
212d0     32 7B 62 FC | 	wrlong	result1, objptr
212d4     38 00 00 FF 
212d8     A8 65 86 F1 | 	sub	objptr, ##29096
212dc     40 92 06 F6 | 	mov	arg01, #64
212e0     00 94 06 F6 | 	mov	arg02, #0
212e4     00 96 06 F6 | 	mov	arg03, #0
212e8     6C FC BF FD | 	call	#_startvideo
212ec                 | '   mouse_limits[0] := xlim
212ec     0F 00 00 FF 
212f0     C8 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7880
212f4     01 00 80 FF 
212f8     3B FF 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
212fc                 | '   mouse_limits[1] := ylim
212fc     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
21300     01 00 80 FF 
21304     3B AF 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
21308     32 93 02 F6 | 	mov	arg01, objptr
2130c     D5 93 06 F1 | 	add	arg01, #469
21310                 | '   mouse_outptr := ptr
21310     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
21314     3B 93 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
21318     0F 00 00 FF 
2131c     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
21320     35 95 02 F6 | 	mov	arg02, ptr__dat__
21324     16 00 00 FF 
21328     CA 94 06 F1 | 	add	arg02, ##11466
2132c     10 92 06 F6 | 	mov	arg01, #16
21330     08 0B B0 FD | 	call	#_hg010b_spin2_setspriteptr
21334     10 92 06 F6 | 	mov	arg01, #16
21338     20 94 06 F6 | 	mov	arg02, #32
2133c     20 96 06 F6 | 	mov	arg03, #32
21340     84 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
21344     09 92 C6 F9 | 	decod	arg01, #9
21348     2C 95 06 F6 | 	mov	arg02, #300
2134c     64 2D B0 FD | 	call	#_usbnew_spin2_mouse_move
21350     32 97 02 F6 | 	mov	arg03, objptr
21354     52 00 00 FF 
21358     E8 64 06 F1 | 	add	objptr, ##42216
2135c     32 95 02 F6 | 	mov	arg02, objptr
21360     4A 97 62 FC | 	wrlong	arg03, arg02
21364     04 94 06 F1 | 	add	arg02, #4
21368     4A 71 62 FC | 	wrlong	ptr__housekeeper_, arg02
2136c     2F 95 02 F6 | 	mov	arg02, entryptr__
21370     1E 7A 06 F6 | 	mov	result1, #30
21374     28 64 62 FD | 	setq	objptr
21378     4A 7B F2 FC | 	coginit	result1, arg02 wc
2137c     01 7A 66 C6 |  if_b	neg	result1, #1
21380     04 64 86 F1 | 	sub	objptr, #4
21384     32 7B 62 FC | 	wrlong	result1, objptr
21388     01 00 00 FF 
2138c     8C 65 06 F1 | 	add	objptr, ##908
21390     32 01 68 FC | 	wrlong	#0, objptr
21394     1B 00 00 FF 
21398     98 64 86 F1 | 	sub	objptr, ##13976
2139c     32 05 68 FC | 	wrlong	#2, objptr
213a0     04 64 06 F1 | 	add	objptr, #4
213a4     32 27 69 FC | 	wrlong	#147, objptr
213a8     04 64 06 F1 | 	add	objptr, #4
213ac     32 35 69 FC | 	wrlong	#154, objptr
213b0     04 64 06 F1 | 	add	objptr, #4
213b4     32 09 68 FC | 	wrlong	#4, objptr
213b8     04 64 86 F1 | 	sub	objptr, #4
213bc     32 7B 02 FB | 	rdlong	result1, objptr
213c0     14 64 86 F1 | 	sub	objptr, #20
213c4     32 7B 62 FC | 	wrlong	result1, objptr
213c8     04 64 06 F1 | 	add	objptr, #4
213cc     32 01 68 FC | 	wrlong	#0, objptr
213d0     04 64 06 F1 | 	add	objptr, #4
213d4     32 01 68 FC | 	wrlong	#0, objptr
213d8     19 00 00 FF 
213dc     0C 65 06 F1 | 	add	objptr, ##13068
213e0     32 03 68 FC | 	wrlong	#1, objptr
213e4     01 00 00 FF 
213e8     98 65 06 F1 | 	add	objptr, ##920
213ec     32 01 68 FC | 	wrlong	#0, objptr
213f0     35 97 02 F6 | 	mov	arg03, ptr__dat__
213f4     01 00 00 FF 
213f8     00 96 06 F1 | 	add	arg03, ##512
213fc     08 64 06 F1 | 	add	objptr, #8
21400     32 97 62 FC | 	wrlong	arg03, objptr
21404     04 64 86 F1 | 	sub	objptr, #4
21408     03 00 80 FF 
2140c     32 3D 69 FC | 	wrlong	##1694, objptr
21410     0D 00 00 FF 
21414     74 64 86 F1 | 	sub	objptr, ##6772
21418     32 19 68 FC | 	wrlong	#12, objptr
2141c     47 00 00 FF 
21420     08 64 86 F1 | 	sub	objptr, ##36360
21424     78 D7 BF FD | 	call	#_init_commands
21428     C4 F6 BF FD | 	call	#_init_error_strings
2142c     2C EE BF FD | 	call	#_init_audio
21430     34 40 BF FD | 	call	#_do_new
21434     38 00 00 FF 
21438     E0 65 06 F1 | 	add	objptr, ##29152
2143c     32 93 02 FB | 	rdlong	arg01, objptr
21440     04 64 86 F1 | 	sub	objptr, #4
21444     32 95 02 FB | 	rdlong	arg02, objptr
21448     38 00 00 FF 
2144c     DC 65 86 F1 | 	sub	objptr, ##29148
21450     0C 18 B0 FD | 	call	#_hg010b_spin2_cls
21454     38 00 00 FF 
21458     E4 65 06 F1 | 	add	objptr, ##29156
2145c     32 93 02 FB | 	rdlong	arg01, objptr
21460     38 00 00 FF 
21464     E4 65 86 F1 | 	sub	objptr, ##29156
21468     28 16 B0 FD | 	call	#_hg010b_spin2_setfontfamily
2146c                 | ' 
2146c                 | ' leading_spaces:=amount
2146c     01 00 00 FF 
21470     B6 64 06 F1 | 	add	objptr, ##694
21474     32 05 68 FC | 	wrlong	#2, objptr
21478     01 00 00 FF 
2147c     B6 64 86 F1 | 	sub	objptr, ##694
21480     9C 01 00 FF 
21484     DF A6 06 F6 | 	mov	local01, ##@LR__6162
21488     3D 92 06 F6 | 	mov	arg01, #61
2148c     3C 94 06 F6 | 	mov	arg02, #60
21490     3B 96 06 F6 | 	mov	arg03, #59
21494     3A 98 06 F6 | 	mov	arg04, #58
21498     10 7E B0 FD | 	call	#__system___vfs_open_sdcardx
2149c     3D 95 02 F6 | 	mov	arg02, result1
214a0     53 93 02 F6 | 	mov	arg01, local01
214a4     C8 3A B0 FD | 	call	#__system___mount
214a8     9C 01 00 FF 
214ac     E3 92 06 F6 | 	mov	arg01, ##@LR__6163
214b0     80 3D B0 FD | 	call	#__system___chdir
214b4     9C 01 00 FF 
214b8     EB A6 06 F6 | 	mov	local01, ##@LR__6164
214bc     4C 00 00 FF 
214c0     38 64 06 F1 | 	add	objptr, ##38968
214c4     32 A7 62 FC | 	wrlong	local01, objptr
214c8     13 00 00 FF 
214cc     60 64 86 F1 | 	sub	objptr, ##9824
214d0     32 93 02 FB | 	rdlong	arg01, objptr
214d4     38 00 00 FF 
214d8     D8 65 86 F1 | 	sub	objptr, ##29144
214dc     01 92 66 F0 | 	shl	arg01, #1
214e0     01 94 06 F6 | 	mov	arg02, #1
214e4     2C 16 B0 FD | 	call	#_hg010b_spin2_setcursorpos
214e8                 | ' init_commands
214e8                 | ' init_error_strings
214e8                 | ' init_audio
214e8                 | ' do_new
214e8                 | ' cls(ink, paper)
214e8                 | ' v.setfontfamily(font) 				' use ST Mono font
214e8                 | ' v.setleadingspaces(2)
214e8                 | ' mount "/sd", _vfs_open_sdcard()
214e8                 | ' chdir "/sd/bas"
214e8                 | ' currentdir$="/sd/bas"
214e8                 | ' position 2*editor_spaces,1 : print ver$
214e8     00 92 06 F6 | 	mov	arg01, #0
214ec     38 8C B0 FD | 	call	#__system___getiolock_0622
214f0     3D 93 02 F6 | 	mov	arg01, result1
214f4     AC 36 B0 FD | 	call	#__system___lockmem
214f8     18 00 00 FF 
214fc     40 6B 06 F1 | 	add	ptr__dat__, ##12608
21500     35 95 02 FB | 	rdlong	arg02, ptr__dat__
21504     18 00 00 FF 
21508     40 6B 86 F1 | 	sub	ptr__dat__, ##12608
2150c     00 92 06 F6 | 	mov	arg01, #0
21510     00 96 06 F6 | 	mov	arg03, #0
21514     80 43 B0 FD | 	call	#__system___basic_print_string
21518     00 92 06 F6 | 	mov	arg01, #0
2151c     0A 94 06 F6 | 	mov	arg02, #10
21520     00 96 06 F6 | 	mov	arg03, #0
21524     18 43 B0 FD | 	call	#__system___basic_print_char
21528     00 92 06 F6 | 	mov	arg01, #0
2152c     F8 8B B0 FD | 	call	#__system___getiolock_0622
21530     3D 01 68 FC | 	wrlong	#0, result1
21534     54 00 00 FF 
21538     74 64 06 F1 | 	add	objptr, ##43124
2153c     32 93 02 FB | 	rdlong	arg01, objptr
21540     0F 00 00 FF 
21544     74 64 86 F1 | 	sub	objptr, ##7796
21548     32 A7 02 FB | 	rdlong	local01, objptr
2154c     45 00 00 FF 
21550     00 64 86 F1 | 	sub	objptr, ##35328
21554     53 93 82 F1 | 	sub	arg01, local01
21558     00 94 06 F6 | 	mov	arg02, #0
2155c     0A 96 06 F6 | 	mov	arg03, #10
21560     3C 51 B0 FD | 	call	#__system__Number_S
21564     3D 93 02 F6 | 	mov	arg01, result1
21568     9C 01 00 FF 
2156c     F3 94 06 F6 | 	mov	arg02, ##@LR__6165
21570     8C 36 B0 FD | 	call	#__system___string_concat
21574     3D A7 02 F6 | 	mov	local01, result1
21578     52 00 00 FF 
2157c     DC 64 06 F1 | 	add	objptr, ##42204
21580     32 A7 62 FC | 	wrlong	local01, objptr
21584     52 00 00 FF 
21588     DC 64 86 F1 | 	sub	objptr, ##42204
2158c                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
2158c     00 92 06 F6 | 	mov	arg01, #0
21590     94 8B B0 FD | 	call	#__system___getiolock_0622
21594     3D 93 02 F6 | 	mov	arg01, result1
21598     08 36 B0 FD | 	call	#__system___lockmem
2159c     52 00 00 FF 
215a0     DC 64 06 F1 | 	add	objptr, ##42204
215a4     32 95 02 FB | 	rdlong	arg02, objptr
215a8     52 00 00 FF 
215ac     DC 64 86 F1 | 	sub	objptr, ##42204
215b0     00 92 06 F6 | 	mov	arg01, #0
215b4     00 96 06 F6 | 	mov	arg03, #0
215b8     DC 42 B0 FD | 	call	#__system___basic_print_string
215bc     00 92 06 F6 | 	mov	arg01, #0
215c0     0A 94 06 F6 | 	mov	arg02, #10
215c4     00 96 06 F6 | 	mov	arg03, #0
215c8     74 42 B0 FD | 	call	#__system___basic_print_char
215cc     00 92 06 F6 | 	mov	arg01, #0
215d0     54 8B B0 FD | 	call	#__system___getiolock_0622
215d4     3D 01 68 FC | 	wrlong	#0, result1
215d8     38 00 00 FF 
215dc     D8 65 06 F1 | 	add	objptr, ##29144
215e0     32 93 02 FB | 	rdlong	arg01, objptr
215e4     38 00 00 FF 
215e8     D8 65 86 F1 | 	sub	objptr, ##29144
215ec     01 92 66 F0 | 	shl	arg01, #1
215f0     04 94 06 F6 | 	mov	arg02, #4
215f4     1C 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
215f8                 | ' position 2*editor_spaces,4 : print "Ready"
215f8     00 92 06 F6 | 	mov	arg01, #0
215fc     28 8B B0 FD | 	call	#__system___getiolock_0622
21600     3D 93 02 F6 | 	mov	arg01, result1
21604     9C 35 B0 FD | 	call	#__system___lockmem
21608     9C 01 00 FF 
2160c     05 95 06 F6 | 	mov	arg02, ##@LR__6166
21610     00 92 06 F6 | 	mov	arg01, #0
21614     00 96 06 F6 | 	mov	arg03, #0
21618     7C 42 B0 FD | 	call	#__system___basic_print_string
2161c     00 92 06 F6 | 	mov	arg01, #0
21620     0A 94 06 F6 | 	mov	arg02, #10
21624     00 96 06 F6 | 	mov	arg03, #0
21628     14 42 B0 FD | 	call	#__system___basic_print_char
2162c     00 92 06 F6 | 	mov	arg01, #0
21630     F4 8A B0 FD | 	call	#__system___getiolock_0622
21634     3D 01 68 FC | 	wrlong	#0, result1
21638     00 94 06 F6 | 	mov	arg02, #0
2163c     01 94 D6 F7 | 	test	arg02, #1 wc
21640     5A 4C 64 FD | 	drvc	#38
21644     01 94 D6 F7 | 	test	arg02, #1 wc
21648     5A 4E 64 FD | 	drvc	#39
2164c     9C 01 00 FF 
21650     0B A7 06 F6 | 	mov	local01, ##@LR__6167
21654     54 00 00 FF 
21658     A0 64 06 F1 | 	add	objptr, ##43168
2165c     32 A7 62 FC | 	wrlong	local01, objptr
21660     04 64 06 F1 | 	add	objptr, #4
21664     FF FF FF FF 
21668     32 FF 6B FC | 	wrlong	##-1, objptr
2166c     0C 64 06 F1 | 	add	objptr, #12
21670     32 01 68 FC | 	wrlong	#0, objptr
21674                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
21674                 | ' loadname="noname.bas"
21674                 | ' do_insert=-1
21674                 | ' inload=0
21674                 | ' for i=0 to 1 : beepsample(i)=32767  : next i : for i=2 to 3: beepsample(i)=-32767 : next i
21674     00 A8 06 F6 | 	mov	local02, #0
21678     3E 00 00 FF 
2167c     18 64 86 F1 | 	sub	objptr, ##31768
21680     D7 10 48 FB | 	callpa	#(@LR__2681-@LR__2680)>>2,fcache_load_ptr_
21684                 | LR__2680
21684     54 AB 02 F6 | 	mov	local03, local02
21688     01 AA 66 F0 | 	shl	local03, #1
2168c     32 AB 02 F1 | 	add	local03, objptr
21690     3F 00 80 FF 
21694     55 FF 5B FC | 	wrword	##32767, local03
21698     01 A8 06 F1 | 	add	local02, #1
2169c     02 A8 56 F2 | 	cmps	local02, #2 wc
216a0     E0 FF 9F CD |  if_b	jmp	#LR__2680
216a4                 | LR__2681
216a4     02 A8 06 F6 | 	mov	local02, #2
216a8     D7 10 48 FB | 	callpa	#(@LR__2683-@LR__2682)>>2,fcache_load_ptr_
216ac                 | LR__2682
216ac     54 AB 02 F6 | 	mov	local03, local02
216b0     01 AA 66 F0 | 	shl	local03, #1
216b4     32 AB 02 F1 | 	add	local03, objptr
216b8     40 00 80 FF 
216bc     55 03 58 FC | 	wrword	##32769, local03
216c0     01 A8 06 F1 | 	add	local02, #1
216c4     04 A8 16 F2 | 	cmp	local02, #4 wc
216c8     E0 FF 9F CD |  if_b	jmp	#LR__2682
216cc                 | LR__2683
216cc     16 00 00 FF 
216d0     98 64 86 F1 | 	sub	objptr, ##11416
216d4                 | ' 
216d4                 | ' open "/sd/bas/autorun.bas" for input as #9
216d4     9C 01 00 FF 
216d8     16 95 06 F6 | 	mov	arg02, ##@LR__6168
216dc     09 92 06 F6 | 	mov	arg01, #9
216e0     00 96 06 F6 | 	mov	arg03, #0
216e4     6C 40 B0 FD | 	call	#__system___basic_open_string
216e8     20 68 06 F1 | 	add	ptr___system__dat__, #32
216ec     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
216f0     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
216f4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
216f8     54 00 00 FF 
216fc     B4 64 06 F1 | 	add	objptr, ##43188
21700     32 7B 62 FC | 	wrlong	result1, objptr
21704     54 00 00 FF 
21708     B4 64 86 F1 | 	sub	objptr, ##43188
2170c                 | ' err=geterr()
2170c                 | ' close #9
2170c     09 92 06 F6 | 	mov	arg01, #9
21710     6C 80 B0 FD | 	call	#__system__close
21714                 | ' if err=0 then line$="run autorun.bas" : interpret
21714     54 00 00 FF 
21718     B4 64 06 F1 | 	add	objptr, ##43188
2171c     32 A7 0A FB | 	rdlong	local01, objptr wz
21720     54 00 00 FF 
21724     B4 64 86 F1 | 	sub	objptr, ##43188
21728     9C 01 00 AF 
2172c     2A A7 06 A6 |  if_e	mov	local01, ##@LR__6169
21730     38 00 00 AF 
21734     C0 65 06 A1 |  if_e	add	objptr, ##29120
21738     32 A7 62 AC |  if_e	wrlong	local01, objptr
2173c     38 00 00 AF 
21740     C0 65 86 A1 |  if_e	sub	objptr, ##29120
21744     00 02 BE AD |  if_e	call	#_interpret
21748                 | ' 
21748                 | ' 
21748                 | ' '-------------------------------------------------------------------------------------------------------- 
21748                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
21748                 | ' '--------------------------------------------------------------------------------------------------------
21748                 | ' 
21748                 | ' do
21748                 | LR__2684
21748     B8 F1 BD FD | 	call	#_edit
2174c     3D A7 02 F6 | 	mov	local01, result1
21750     38 00 00 FF 
21754     C0 65 06 F1 | 	add	objptr, ##29120
21758     32 A7 62 FC | 	wrlong	local01, objptr
2175c     38 00 00 FF 
21760     C0 65 86 F1 | 	sub	objptr, ##29120
21764     E0 01 BE FD | 	call	#_interpret
21768     9C 01 00 FF 
2176c     3A A7 06 F6 | 	mov	local01, ##@LR__6170
21770     38 00 00 FF 
21774     C0 65 06 F1 | 	add	objptr, ##29120
21778     32 A7 62 FC | 	wrlong	local01, objptr
2177c     38 00 00 FF 
21780     C0 65 86 F1 | 	sub	objptr, ##29120
21784     C0 FF 9F FD | 	jmp	#LR__2684
21788     E7 F0 03 F6 | 	mov	ptra, fp
2178c     F2 00 A0 FD | 	call	#popregs_
21790                 | _program_ret
21790     2D 00 64 FD | 	ret
21794                 | 
21794                 | ' '' this is not a main program.
21794                 | ' 
21794                 | ' '****************************************************************************************************************
21794                 | ' '                                                                                                             	*
21794                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
21794                 | ' '                                                                                                            	*
21794                 | ' ' base - HDMI base pin												*
21794                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
21794                 | ' '														*
21794                 | ' '														*
21794                 | ' '****************************************************************************************************************
21794                 | ' 
21794                 | ' pub start(base,mb):result |i
21794                 | _hg010b_spin2_start
21794                 | ' 
21794                 | ' '--------------------------- initialize pointers and variables
21794                 | ' 
21794                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
21794     34 64 06 F1 | 	add	objptr, #52
21798     32 7B 02 F6 | 	mov	result1, objptr
2179c     28 64 86 F1 | 	sub	objptr, #40
217a0     32 7B 62 FC | 	wrlong	result1, objptr
217a4                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
217a4                 | ' hdmibase:=base							' HDMI base pin, 8*n
217a4     18 64 06 F1 | 	add	objptr, #24
217a8     32 93 62 FC | 	wrlong	arg01, objptr
217ac                 | ' mailbox_ptr:=mb		
217ac     04 64 06 F1 | 	add	objptr, #4
217b0     32 95 62 FC | 	wrlong	arg02, objptr
217b4                 | ' mailbox0:=mb				' PSRAM mailbox pointer
217b4     C1 65 06 F1 | 	add	objptr, #449
217b8     32 95 62 FC | 	wrlong	arg02, objptr
217bc                 | ' sprite_ptr:=@spr1ptr
217bc     D8 64 86 F1 | 	sub	objptr, #216
217c0     32 7B 02 F6 | 	mov	result1, objptr
217c4     E5 64 86 F1 | 	sub	objptr, #229
217c8     32 7B 62 FC | 	wrlong	result1, objptr
217cc                 | ' 
217cc                 | ' 		'
217cc                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
217cc     E5 64 06 F1 | 	add	objptr, #229
217d0     32 7B 02 FB | 	rdlong	result1, objptr
217d4     D0 7A 06 F1 | 	add	result1, #208
217d8     3D 11 58 FC | 	wrword	#8, result1
217dc                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
217dc     32 97 02 FB | 	rdlong	arg03, objptr
217e0     D2 96 06 F1 | 	add	arg03, #210
217e4     4B 21 58 FC | 	wrword	#16, arg03
217e8                 | ' leading_spaces:=0				'
217e8     A5 65 06 F1 | 	add	objptr, #421
217ec     32 01 68 FC | 	wrlong	#0, objptr
217f0                 | ' 
217f0                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
217f0     99 64 86 F1 | 	sub	objptr, #153
217f4     00 00 A0 FF 
217f8     32 0F 68 FC | 	wrlong	##1073741831, objptr
217fc                 | ' emptydl[1]:=0
217fc     04 64 06 F1 | 	add	objptr, #4
21800     32 01 68 FC | 	wrlong	#0, objptr
21804                 | ' 
21804                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
21804                 | ' 
21804                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
21804     28 65 86 F1 | 	sub	objptr, #296
21808     32 03 68 FC | 	wrlong	#1, objptr
2180c                 | ' if s_debug<>0
2180c                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
2180c     20 00 80 FF 
21810     32 01 68 FC | 	wrlong	##16384, objptr
21814     F9 64 86 F1 | 	sub	objptr, #249
21818                 | ' setmode()							' set the mode, see below
21818     18 03 B0 FD | 	call	#_hg010b_spin2_setmode
2181c                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
2181c     49 64 06 F1 | 	add	objptr, #73
21820     32 7B 02 F6 | 	mov	result1, objptr
21824     35 64 86 F1 | 	sub	objptr, #53
21828     32 7B 62 FC | 	wrlong	result1, objptr
2182c                 | ' cursor_ptr:=@cursor_x						
2182c     28 64 06 F1 | 	add	objptr, #40
21830     32 97 02 F6 | 	mov	arg03, objptr
21834     2C 64 86 F1 | 	sub	objptr, #44
21838     32 97 62 FC | 	wrlong	arg03, objptr
2183c                 | ' fontnum:=0  							' start with a PC type font 
2183c     55 64 06 F1 | 	add	objptr, #85
21840     32 01 68 FC | 	wrlong	#0, objptr
21844                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
21844     1C 64 06 F1 | 	add	objptr, #28
21848     32 93 02 F6 | 	mov	arg01, objptr
2184c     81 64 86 F1 | 	sub	objptr, #129
21850     37 95 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
21854     1C 00 00 FF 
21858     80 94 06 F1 | 	add	arg02, ##14464
2185c     10 96 06 F6 | 	mov	arg03, #16
21860     F0 31 B0 FD | 	call	#__system____builtin_memmove
21864                 | ' leading_spaces:=0
21864     01 00 00 FF 
21868     B6 64 06 F1 | 	add	objptr, ##694
2186c     32 01 68 FC | 	wrlong	#0, objptr
21870     01 00 00 FF 
21874     B6 64 86 F1 | 	sub	objptr, ##694
21878                 | ' '---------------------------- initialize a cursor (MSDOS type)
21878                 | ' 
21878                 | ' initcursor(154)
21878     9A 92 06 F6 | 	mov	arg01, #154
2187c     74 00 B0 FD | 	call	#_hg010b_spin2_initcursor
21880                 | ' 
21880                 | ' '---------------------------- start the cog
21880                 | ' 
21880                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
21880     37 95 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
21884     1C 00 00 FF 
21888     90 94 06 F1 | 	add	arg02, ##14480
2188c     32 97 02 F6 | 	mov	arg03, objptr
21890     14 96 06 F1 | 	add	arg03, #20
21894     10 7A 06 F6 | 	mov	result1, #16
21898     28 96 62 FD | 	setq	arg03
2189c     4A 7B F2 FC | 	coginit	result1, arg02 wc
218a0     01 7A 66 C6 |  if_b	neg	result1, #1
218a4     30 64 06 F1 | 	add	objptr, #48
218a8     32 7B 62 FC | 	wrlong	result1, objptr
218ac     30 64 86 F1 | 	sub	objptr, #48
218b0                 | ' waitms(40)							' wait for stabilize
218b0     28 92 06 F6 | 	mov	arg01, #40
218b4     E0 35 B0 FD | 	call	#__system___waitms
218b8                 | ' return cog							' return the driver's cog #
218b8     30 64 06 F1 | 	add	objptr, #48
218bc     32 7B 02 FB | 	rdlong	result1, objptr
218c0     30 64 86 F1 | 	sub	objptr, #48
218c4                 | _hg010b_spin2_start_ret
218c4     2D 00 64 FD | 	ret
218c8                 | 
218c8                 | ' 
218c8                 | ' 
218c8                 | ' '**************************************************************************************************************** 
218c8                 | ' '                                                                                                             	*
218c8                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
218c8                 | ' '  Mode number - see start() above or bits below								*
218c8                 | ' '                                                                                                             	*
218c8                 | ' '****************************************************************************************************************
218c8                 | ' 
218c8                 | ' 
218c8                 | ' pub restorepalette()
218c8                 | _hg010b_spin2_restorepalette
218c8                 | ' 
218c8                 | ' longmove(@ataripalette,@ataripalette2,256)
218c8     18 00 00 FF 
218cc     40 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##12352
218d0     37 93 02 F6 | 	mov	arg01, ptr__hg010b_spin2_dat__
218d4     02 00 00 FF 
218d8     00 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
218dc     37 95 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
218e0     1A 00 00 FF 
218e4     40 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##13376
218e8     00 97 06 F6 | 	mov	arg03, #256
218ec     F8 31 B0 FD | 	call	#__system__longmove
218f0                 | _hg010b_spin2_restorepalette_ret
218f0     2D 00 64 FD | 	ret
218f4                 | 
218f4                 | ' 
218f4                 | ' '---------------------------- initialize a cursor (MSDOS type)
218f4                 | ' pub initcursor(color) |i
218f4                 | _hg010b_spin2_initcursor
218f4     03 CA 05 F6 | 	mov	COUNT_, #3
218f8     E8 00 A0 FD | 	call	#pushregs_
218fc     49 A7 02 F6 | 	mov	local01, arg01
21900                 | ' 
21900                 | ' cursor_x:=0							' place the cursor at 0:0
21900     3C 64 06 F1 | 	add	objptr, #60
21904     32 01 58 FC | 	wrword	#0, objptr
21908                 | ' cursor_y:=0
21908     02 64 06 F1 | 	add	objptr, #2
2190c     32 01 48 FC | 	wrbyte	#0, objptr
21910                 | ' repeat i from 0 to 111
21910     00 A8 06 F6 | 	mov	local02, #0
21914     F8 65 06 F1 | 	add	objptr, #504
21918     D7 0C 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
2191c                 | LR__2690
2191c                 | '   cursor[i]:=0
2191c     54 AB 02 F6 | 	mov	local03, local02
21920     32 AB 02 F1 | 	add	local03, objptr
21924     55 01 48 FC | 	wrbyte	#0, local03
21928     01 A8 06 F1 | 	add	local02, #1
2192c     70 A8 56 F2 | 	cmps	local02, #112 wc
21930     E8 FF 9F CD |  if_b	jmp	#LR__2690
21934                 | LR__2691
21934                 | ' repeat i from 112 to 127
21934     70 A8 06 F6 | 	mov	local02, #112
21938     D7 0C 48 FB | 	callpa	#(@LR__2693-@LR__2692)>>2,fcache_load_ptr_
2193c                 | LR__2692
2193c                 | '   cursor[i]:=color  
2193c     54 AB 02 F6 | 	mov	local03, local02
21940     32 AB 02 F1 | 	add	local03, objptr
21944     55 A7 42 FC | 	wrbyte	local01, local03
21948     01 A8 06 F1 | 	add	local02, #1
2194c     80 A8 16 F2 | 	cmp	local02, #128 wc
21950     E8 FF 9F CD |  if_b	jmp	#LR__2692
21954                 | LR__2693
21954     01 00 00 FF 
21958     36 64 86 F1 | 	sub	objptr, ##566
2195c                 | ' 'repeat i from 0 to 127
2195c                 | ' '  if ((i/8)//2)
2195c                 | ' '    cursor[i]:=15
2195c                 | ' '  else
2195c                 | ' '    cursor[i]:=0
2195c                 | ' '  if i>=120    
2195c                 | ' '    cursor[i]:=40
2195c                 | ' setspriteptr(17,@cursor)
2195c     32 95 02 F6 | 	mov	arg02, objptr
21960     01 00 00 FF 
21964     36 94 06 F1 | 	add	arg02, ##566
21968     11 92 06 F6 | 	mov	arg01, #17
2196c     CC 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
21970                 | ' setspritesize(17,8,16)
21970     11 92 06 F6 | 	mov	arg01, #17
21974     08 94 06 F6 | 	mov	arg02, #8
21978     10 96 06 F6 | 	mov	arg03, #16
2197c     48 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
21980                 | ' setspritepos(17,0,0)
21980     11 92 06 F6 | 	mov	arg01, #17
21984     00 94 06 F6 | 	mov	arg02, #0
21988     00 96 06 F6 | 	mov	arg03, #0
2198c     D0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
21990                 | ' cursorshape:=14
21990     0B 00 00 FF 
21994     C6 64 06 F1 | 	add	objptr, ##5830
21998     32 1D 68 FC | 	wrlong	#14, objptr
2199c                 | ' cursorcolor:=color
2199c     04 64 86 F1 | 	sub	objptr, #4
219a0     32 A7 62 FC | 	wrlong	local01, objptr
219a4     0B 00 00 FF 
219a8     C2 64 86 F1 | 	sub	objptr, ##5826
219ac     E7 F0 03 F6 | 	mov	ptra, fp
219b0     F2 00 A0 FD | 	call	#popregs_
219b4                 | _hg010b_spin2_initcursor_ret
219b4     2D 00 64 FD | 	ret
219b8                 | 
219b8                 | ' 
219b8                 | ' pub setcursorshape(shape) | i
219b8                 | _hg010b_spin2_setcursorshape
219b8                 | ' 
219b8                 | ' cursorshape:=shape
219b8     0B 00 00 FF 
219bc     C6 64 06 F1 | 	add	objptr, ##5830
219c0     32 93 62 FC | 	wrlong	arg01, objptr
219c4                 | ' repeat i from 0 to (8*cursorshape)-1
219c4     00 80 06 F6 | 	mov	_var01, #0
219c8     49 83 02 F6 | 	mov	_var02, arg01
219cc     03 82 66 F0 | 	shl	_var02, #3
219d0     01 82 86 F1 | 	sub	_var02, #1
219d4     00 82 56 F2 | 	cmps	_var02, #0 wc
219d8     01 84 86 F6 | 	negc	_var03, #1
219dc     42 87 02 F6 | 	mov	_var04, _var03
219e0     42 83 02 F1 | 	add	_var02, _var03
219e4     0A 00 00 FF 
219e8     90 64 86 F1 | 	sub	objptr, ##5264
219ec     D7 0C 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
219f0                 | LR__2700
219f0                 | '   cursor[i]:=0
219f0     40 85 02 F6 | 	mov	_var03, _var01
219f4     32 85 02 F1 | 	add	_var03, objptr
219f8     42 01 48 FC | 	wrbyte	#0, _var03
219fc     43 81 02 F1 | 	add	_var01, _var04
21a00     41 81 0A F2 | 	cmp	_var01, _var02 wz
21a04     E8 FF 9F 5D |  if_ne	jmp	#LR__2700
21a08                 | LR__2701
21a08                 | ' repeat i from 8*cursorshape to 127
21a08     0A 00 00 FF 
21a0c     90 64 06 F1 | 	add	objptr, ##5264
21a10     32 87 02 FB | 	rdlong	_var04, objptr
21a14     43 81 02 F6 | 	mov	_var01, _var04
21a18     03 80 66 F0 | 	shl	_var01, #3
21a1c     0B 00 00 FF 
21a20     C6 64 86 F1 | 	sub	objptr, ##5830
21a24     03 86 66 F0 | 	shl	_var04, #3
21a28     80 86 56 F2 | 	cmps	_var04, #128 wc
21a2c     01 84 A6 F6 | 	negnc	_var03, #1
21a30     7F 82 06 F6 | 	mov	_var02, #127
21a34     42 83 02 F1 | 	add	_var02, _var03
21a38     D7 1A 48 FB | 	callpa	#(@LR__2703-@LR__2702)>>2,fcache_load_ptr_
21a3c                 | LR__2702
21a3c                 | '   cursor[i]:=cursorcolor
21a3c     40 87 02 F6 | 	mov	_var04, _var01
21a40     01 00 00 FF 
21a44     36 64 06 F1 | 	add	objptr, ##566
21a48     32 87 02 F1 | 	add	_var04, objptr
21a4c     0A 00 00 FF 
21a50     8C 64 06 F1 | 	add	objptr, ##5260
21a54     32 93 02 FB | 	rdlong	arg01, objptr
21a58     0B 00 00 FF 
21a5c     C2 64 86 F1 | 	sub	objptr, ##5826
21a60     43 93 42 FC | 	wrbyte	arg01, _var04
21a64     42 81 02 F1 | 	add	_var01, _var03
21a68     41 81 0A F2 | 	cmp	_var01, _var02 wz
21a6c     CC FF 9F 5D |  if_ne	jmp	#LR__2702
21a70                 | LR__2703
21a70                 | _hg010b_spin2_setcursorshape_ret
21a70     2D 00 64 FD | 	ret
21a74                 | 
21a74                 | ' 
21a74                 | ' pub setcursorcolor(color) | i
21a74                 | _hg010b_spin2_setcursorcolor
21a74                 | ' 
21a74                 | ' cursorcolor:=color
21a74     0B 00 00 FF 
21a78     C2 64 06 F1 | 	add	objptr, ##5826
21a7c     32 93 62 FC | 	wrlong	arg01, objptr
21a80                 | ' repeat i from 0 to (8*cursorshape)-1
21a80     00 92 06 F6 | 	mov	arg01, #0
21a84     04 64 06 F1 | 	add	objptr, #4
21a88     32 81 02 FB | 	rdlong	_var01, objptr
21a8c     03 80 66 F0 | 	shl	_var01, #3
21a90     01 80 86 F1 | 	sub	_var01, #1
21a94     00 80 56 F2 | 	cmps	_var01, #0 wc
21a98     01 82 86 F6 | 	negc	_var02, #1
21a9c     41 85 02 F6 | 	mov	_var03, _var02
21aa0     41 81 02 F1 | 	add	_var01, _var02
21aa4     0A 00 00 FF 
21aa8     90 64 86 F1 | 	sub	objptr, ##5264
21aac     D7 0C 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
21ab0                 | LR__2710
21ab0                 | '   cursor[i]:=0
21ab0     49 83 02 F6 | 	mov	_var02, arg01
21ab4     32 83 02 F1 | 	add	_var02, objptr
21ab8     41 01 48 FC | 	wrbyte	#0, _var02
21abc     42 93 02 F1 | 	add	arg01, _var03
21ac0     40 93 0A F2 | 	cmp	arg01, _var01 wz
21ac4     E8 FF 9F 5D |  if_ne	jmp	#LR__2710
21ac8                 | LR__2711
21ac8                 | ' repeat i from 8*cursorshape to 127
21ac8     0A 00 00 FF 
21acc     90 64 06 F1 | 	add	objptr, ##5264
21ad0     32 85 02 FB | 	rdlong	_var03, objptr
21ad4     42 93 02 F6 | 	mov	arg01, _var03
21ad8     03 92 66 F0 | 	shl	arg01, #3
21adc     0B 00 00 FF 
21ae0     C6 64 86 F1 | 	sub	objptr, ##5830
21ae4     03 84 66 F0 | 	shl	_var03, #3
21ae8     80 84 56 F2 | 	cmps	_var03, #128 wc
21aec     01 82 A6 F6 | 	negnc	_var02, #1
21af0     7F 80 06 F6 | 	mov	_var01, #127
21af4     41 81 02 F1 | 	add	_var01, _var02
21af8     D7 1A 48 FB | 	callpa	#(@LR__2713-@LR__2712)>>2,fcache_load_ptr_
21afc                 | LR__2712
21afc                 | '   cursor[i]:=cursorcolor
21afc     49 85 02 F6 | 	mov	_var03, arg01
21b00     01 00 00 FF 
21b04     36 64 06 F1 | 	add	objptr, ##566
21b08     32 85 02 F1 | 	add	_var03, objptr
21b0c     0A 00 00 FF 
21b10     8C 64 06 F1 | 	add	objptr, ##5260
21b14     32 87 02 FB | 	rdlong	_var04, objptr
21b18     0B 00 00 FF 
21b1c     C2 64 86 F1 | 	sub	objptr, ##5826
21b20     42 87 42 FC | 	wrbyte	_var04, _var03
21b24     41 93 02 F1 | 	add	arg01, _var02
21b28     40 93 0A F2 | 	cmp	arg01, _var01 wz
21b2c     CC FF 9F 5D |  if_ne	jmp	#LR__2712
21b30                 | LR__2713
21b30                 | _hg010b_spin2_setcursorcolor_ret
21b30     2D 00 64 FD | 	ret
21b34                 | 
21b34                 | '   
21b34                 | '   
21b34                 | '   
21b34                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
21b34                 | _hg010b_spin2_setmode
21b34     02 CA 05 F6 | 	mov	COUNT_, #2
21b38     E8 00 A0 FD | 	call	#pushregs_
21b3c                 | ' 
21b3c                 | ' 
21b3c                 | ' dl_ptr:=@emptydl[0]
21b3c     01 00 00 FF 
21b40     1D 64 06 F1 | 	add	objptr, ##541
21b44     32 9B 02 F6 | 	mov	arg05, objptr
21b48     FD 65 86 F1 | 	sub	objptr, #509
21b4c     32 9B 62 FC | 	wrlong	arg05, objptr
21b50                 | ' 
21b50                 | ' if cog>0 
21b50     10 64 06 F1 | 	add	objptr, #16
21b54     32 9B 02 FB | 	rdlong	arg05, objptr
21b58     30 64 86 F1 | 	sub	objptr, #48
21b5c     01 9A 56 F2 | 	cmps	arg05, #1 wc
21b60                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
21b60     01 92 06 36 |  if_ae	mov	arg01, #1
21b64     58 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
21b68                 | ' xres:=1024
21b68     01 00 00 FF 
21b6c     26 64 06 F1 | 	add	objptr, ##550
21b70     02 00 80 FF 
21b74     32 01 68 FC | 	wrlong	##1024, objptr
21b78                 | ' yres:=600
21b78     04 64 06 F1 | 	add	objptr, #4
21b7c     01 00 80 FF 
21b80     32 B1 68 FC | 	wrlong	##600, objptr
21b84                 | ' ppl:=(timings[3])
21b84     1C 00 00 FF 
21b88     4C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14412
21b8c     37 9B 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
21b90     51 65 86 F1 | 	sub	objptr, #337
21b94     32 9B 62 FC | 	wrlong	arg05, objptr
21b98                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
21b98     10 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, #16
21b9c     37 A7 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
21ba0     01 A6 66 F0 | 	shl	local01, #1
21ba4     80 64 86 F1 | 	sub	objptr, #128
21ba8     32 A7 62 FC | 	wrlong	local01, objptr
21bac                 | ' cpl1:=cpl '' todo remove
21bac     04 64 06 F1 | 	add	objptr, #4
21bb0     32 A7 62 FC | 	wrlong	local01, objptr
21bb4                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
21bb4     04 00 00 FF 
21bb8     1C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##2076
21bbc     41 64 86 F1 | 	sub	objptr, #65
21bc0     32 6F 62 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
21bc4                 | ' repeat i from 0 to 3
21bc4     00 A8 06 F6 | 	mov	local02, #0
21bc8     04 00 00 FF 
21bcc     00 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##2048
21bd0     08 64 06 F1 | 	add	objptr, #8
21bd4     D7 20 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
21bd8                 | LR__2720
21bd8                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
21bd8     54 A7 02 F6 | 	mov	local01, local02
21bdc     02 A6 66 F0 | 	shl	local01, #2
21be0     37 A7 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
21be4     32 9B 02 FB | 	rdlong	arg05, objptr
21be8     11 9A 66 F0 | 	shl	arg05, #17
21bec     53 A7 02 FB | 	rdlong	local01, local01
21bf0     4D A7 02 F1 | 	add	local01, arg05
21bf4     80 40 38 FF 
21bf8     00 A6 06 F1 | 	add	local01, ##1887502336
21bfc     54 9B 02 F6 | 	mov	arg05, local02
21c00     02 9A 66 F0 | 	shl	arg05, #2
21c04     37 9B 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
21c08     4D A7 62 FC | 	wrlong	local01, arg05
21c0c     01 A8 06 F1 | 	add	local02, #1
21c10     04 A8 56 F2 | 	cmps	local02, #4 wc
21c14     C0 FF 9F CD |  if_b	jmp	#LR__2720
21c18                 | LR__2721
21c18     24 64 86 F1 | 	sub	objptr, #36
21c1c     1C 00 00 FF 
21c20     40 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
21c24                 | ' 'clkfreq:=timings[9]					    	' set the clock frequency for the mode
21c24                 | ' 'hubset(timings[10])
21c24                 | ' waitms(1)                                                   	' wait for stabilization
21c24     01 92 06 F6 | 	mov	arg01, #1
21c28     6C 32 B0 FD | 	call	#__system___waitms
21c2c     1C 00 00 FF 
21c30     6C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14444
21c34     37 A9 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
21c38     61 64 06 F1 | 	add	objptr, #97
21c3c     32 A9 62 FC | 	wrlong	local02, objptr
21c40     54 A7 52 F6 | 	abs	local01, local02 wc
21c44     04 A6 46 F0 | 	shr	local01, #4
21c48     53 A7 82 F6 | 	negc	local01, local01
21c4c     9C 64 06 F1 | 	add	objptr, #156
21c50     32 A7 62 FC | 	wrlong	local01, objptr
21c54     A4 64 86 F1 | 	sub	objptr, #164
21c58     32 A9 02 FB | 	rdlong	local02, objptr
21c5c     08 64 06 F1 | 	add	objptr, #8
21c60     32 A7 02 FB | 	rdlong	local01, objptr
21c64     53 A9 02 FD | 	qmul	local02, local01
21c68                 | ' lines:=timings[11]
21c68                 | ' t_lines:=lines/16
21c68                 | ' buflen:=cpl*lines						' framebuffer length in longs
21c68     29 64 86 F1 | 	sub	objptr, #41
21c6c     19 A6 C6 F9 | 	decod	local01, #25
21c70     10 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
21c74     18 A8 62 FD | 	getqx	local02
21c78     32 A9 62 FC | 	wrlong	local02, objptr
21c7c     38 64 86 F1 | 	sub	objptr, #56
21c80     02 A8 66 F0 | 	shl	local02, #2
21c84     54 A7 82 F1 | 	sub	local01, local02
21c88     32 A7 62 FC | 	wrlong	local01, objptr
21c8c     FD 64 06 F1 | 	add	objptr, #253
21c90     32 A9 02 FB | 	rdlong	local02, objptr
21c94     37 9B 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
21c98     4D A9 02 FD | 	qmul	local02, arg05
21c9c                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
21c9c                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
21c9c     F9 64 86 F1 | 	sub	objptr, #249
21ca0                 | ' mode_ptr:=@timings						' set pointers to timings
21ca0     1C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
21ca4                 | ' graphmode:=1024+512+192+48							' det global variable
21ca4                 | ' makedl(graphmode)							' make a DL for the mode
21ca4     03 00 00 FF 
21ca8     F0 92 06 F6 | 	mov	arg01, ##1776
21cac     18 A8 62 FD | 	getqx	local02
21cb0     54 A7 82 F1 | 	sub	local01, local02
21cb4     32 A7 62 FC | 	wrlong	local01, objptr
21cb8     14 64 06 F1 | 	add	objptr, #20
21cbc     32 6F 62 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
21cc0     79 64 06 F1 | 	add	objptr, #121
21cc4     03 00 80 FF 
21cc8     32 E1 69 FC | 	wrlong	##1776, objptr
21ccc     91 64 86 F1 | 	sub	objptr, #145
21cd0     1C 00 00 FF 
21cd4     40 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
21cd8     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
21cdc                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
21cdc     32 A7 02 FB | 	rdlong	local01, objptr
21ce0     DD 64 06 F1 | 	add	objptr, #221
21ce4     32 A7 62 FC | 	wrlong	local01, objptr
21ce8                 | ' s_font_ptr:=font_ptr
21ce8     D5 64 86 F1 | 	sub	objptr, #213
21cec     32 A7 02 FB | 	rdlong	local01, objptr
21cf0     D9 64 06 F1 | 	add	objptr, #217
21cf4     32 A7 62 FC | 	wrlong	local01, objptr
21cf8                 | ' s_lines:=lines
21cf8     80 64 86 F1 | 	sub	objptr, #128
21cfc     32 A7 02 FB | 	rdlong	local01, objptr
21d00     84 64 06 F1 | 	add	objptr, #132
21d04     32 A7 62 FC | 	wrlong	local01, objptr
21d08                 | ' s_buflen:=buflen
21d08     AD 64 86 F1 | 	sub	objptr, #173
21d0c     32 A7 02 FB | 	rdlong	local01, objptr
21d10     B5 64 06 F1 | 	add	objptr, #181
21d14     32 A7 62 FC | 	wrlong	local01, objptr
21d18                 | ' s_cpl:=cpl
21d18     94 64 86 F1 | 	sub	objptr, #148
21d1c     32 A7 02 FB | 	rdlong	local01, objptr
21d20     90 64 06 F1 | 	add	objptr, #144
21d24     32 A7 62 FC | 	wrlong	local01, objptr
21d28                 | ' s_cpl1:=cpl
21d28     90 64 86 F1 | 	sub	objptr, #144
21d2c     32 A7 02 FB | 	rdlong	local01, objptr
21d30     98 64 06 F1 | 	add	objptr, #152
21d34     32 A7 62 FC | 	wrlong	local01, objptr
21d38                 | ' st_lines:=t_lines
21d38     0C 64 06 F1 | 	add	objptr, #12
21d3c     32 A7 02 FB | 	rdlong	local01, objptr
21d40     04 64 06 F1 | 	add	objptr, #4
21d44     32 A7 62 FC | 	wrlong	local01, objptr
21d48                 | ' ppl:=ppl/xzoom  
21d48     28 64 86 F1 | 	sub	objptr, #40
21d4c     32 0F 03 FB | 	rdlong	muldiva_, objptr
21d50     2C 64 06 F1 | 	add	objptr, #44
21d54     32 11 03 FB | 	rdlong	muldivb_, objptr
21d58     05 65 86 F1 | 	sub	objptr, #261
21d5c     FA 00 A0 FD | 	call	#divide_
21d60     D9 64 06 F1 | 	add	objptr, #217
21d64     32 11 63 FC | 	wrlong	muldivb_, objptr
21d68                 | ' s_ppl:=ppl
21d68     1C 64 06 F1 | 	add	objptr, #28
21d6c     32 11 63 FC | 	wrlong	muldivb_, objptr
21d70     F5 64 86 F1 | 	sub	objptr, #245
21d74                 | ' waitms(20)							' wait 
21d74     14 92 06 F6 | 	mov	arg01, #20
21d78     1C 31 B0 FD | 	call	#__system___waitms
21d7c                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
21d7c     04 64 06 F1 | 	add	objptr, #4
21d80     32 93 02 FB | 	rdlong	arg01, objptr
21d84     04 64 86 F1 | 	sub	objptr, #4
21d88     32 97 02 FB | 	rdlong	arg03, objptr
21d8c     49 97 82 F1 | 	sub	arg03, arg01
21d90     20 94 06 F6 | 	mov	arg02, #32
21d94     00 98 06 F6 | 	mov	arg04, #0
21d98     01 9A 06 F6 | 	mov	arg05, #1
21d9c     0B 00 00 FF 
21da0     CC 64 06 F1 | 	add	objptr, ##5836
21da4     BC 1F B0 FD | 	call	#_psram_spin2_fill
21da8     0B 00 00 FF 
21dac     CC 64 86 F1 | 	sub	objptr, ##5836
21db0     E7 F0 03 F6 | 	mov	ptra, fp
21db4     F2 00 A0 FD | 	call	#popregs_
21db8                 | _hg010b_spin2_setmode_ret
21db8     2D 00 64 FD | 	ret
21dbc                 | 
21dbc                 | ' 
21dbc                 | ' '****************************************************************************************************************
21dbc                 | ' '                                                                                                             	*
21dbc                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
21dbc                 | ' '                                                                                                             	*
21dbc                 | ' '****************************************************************************************************************
21dbc                 | ' 
21dbc                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
21dbc                 | _hg010b_spin2_makedl
21dbc                 | ' 
21dbc                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
21dbc                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
21dbc                 | ' repeat i from 0 to 11                                                           ' clear DL
21dbc     00 80 06 F6 | 	mov	_var01, #0
21dc0     ED 65 06 F1 | 	add	objptr, #493
21dc4     D7 0E 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
21dc8                 | LR__2730
21dc8                 | '   displaylist[i]:=0 
21dc8     40 83 02 F6 | 	mov	_var02, _var01
21dcc     02 82 66 F0 | 	shl	_var02, #2
21dd0     32 83 02 F1 | 	add	_var02, objptr
21dd4     41 01 68 FC | 	wrlong	#0, _var02
21dd8     01 80 06 F1 | 	add	_var01, #1
21ddc     0C 80 56 F2 | 	cmps	_var01, #12 wc
21de0     E4 FF 9F CD |  if_b	jmp	#LR__2730
21de4                 | LR__2731
21de4                 | '                         ' 
21de4                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
21de4     8C 65 86 F1 | 	sub	objptr, #396
21de8     32 83 02 FB | 	rdlong	_var02, objptr
21dec     14 82 66 F0 | 	shl	_var02, #20
21df0     01 82 06 F1 | 	add	_var02, #1
21df4     04 64 86 F1 | 	sub	objptr, #4
21df8     32 81 02 FB | 	rdlong	_var01, objptr
21dfc     06 80 66 F0 | 	shl	_var01, #6
21e00     40 83 02 F1 | 	add	_var02, _var01
21e04     90 65 06 F1 | 	add	objptr, #400
21e08     32 83 62 FC | 	wrlong	_var02, objptr
21e0c     ED 65 86 F1 | 	sub	objptr, #493
21e10                 | ' displaylist[1]:=buf_ptr<<4+%10  
21e10     32 83 02 FB | 	rdlong	_var02, objptr
21e14     04 82 66 F0 | 	shl	_var02, #4
21e18     02 82 06 F1 | 	add	_var02, #2
21e1c     F1 65 06 F1 | 	add	objptr, #497
21e20     32 83 62 FC | 	wrlong	_var02, objptr
21e24                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
21e24     04 64 86 F1 | 	sub	objptr, #4
21e28     32 83 02 F6 | 	mov	_var02, objptr
21e2c     CD 65 86 F1 | 	sub	objptr, #461
21e30     32 83 62 FC | 	wrlong	_var02, objptr
21e34     20 64 86 F1 | 	sub	objptr, #32
21e38                 | _hg010b_spin2_makedl_ret
21e38     2D 00 64 FD | 	ret
21e3c                 | 
21e3c                 | ' 
21e3c                 | ' 
21e3c                 | ' '****************************************************************************************************************
21e3c                 | ' '                                                                        					*
21e3c                 | ' '  Graphic primitives                                                    					*
21e3c                 | ' '                                                                        					*
21e3c                 | ' '****************************************************************************************************************
21e3c                 | ' 
21e3c                 | ' pub setspriteptr(num,ptr)
21e3c                 | _hg010b_spin2_setspriteptr
21e3c                 | ' long[@spr1ptr+12*num]:=ptr
21e3c     32 81 02 F6 | 	mov	_var01, objptr
21e40     11 81 06 F1 | 	add	_var01, #273
21e44     49 83 02 F6 | 	mov	_var02, arg01
21e48     01 82 66 F0 | 	shl	_var02, #1
21e4c     49 83 02 F1 | 	add	_var02, arg01
21e50     02 82 66 F0 | 	shl	_var02, #2
21e54     41 81 02 F1 | 	add	_var01, _var02
21e58     40 95 62 FC | 	wrlong	arg02, _var01
21e5c                 | _hg010b_spin2_setspriteptr_ret
21e5c     2D 00 64 FD | 	ret
21e60                 | 
21e60                 | ' 
21e60                 | ' pub setspritepos(num,x,y)
21e60                 | _hg010b_spin2_setspritepos
21e60                 | ' if y>601
21e60     01 00 00 FF 
21e64     5A 96 56 F2 | 	cmps	arg03, ##602 wc
21e68                 | '   y:=601
21e68     01 00 00 3F 
21e6c     59 96 06 36 |  if_ae	mov	arg03, ##601
21e70                 | ' if x>1024
21e70     02 00 00 FF 
21e74     01 94 56 F2 | 	cmps	arg02, ##1025 wc
21e78                 | '   x:=1024
21e78     0A 94 C6 39 |  if_ae	decod	arg02, #10
21e7c                 | ' word[@spr1ptr+12*num+4]:=x
21e7c     11 65 06 F1 | 	add	objptr, #273
21e80     32 81 02 F6 | 	mov	_var01, objptr
21e84     49 83 02 F6 | 	mov	_var02, arg01
21e88     01 82 66 F0 | 	shl	_var02, #1
21e8c     49 83 02 F1 | 	add	_var02, arg01
21e90     02 82 66 F0 | 	shl	_var02, #2
21e94     41 81 02 F1 | 	add	_var01, _var02
21e98     04 80 06 F1 | 	add	_var01, #4
21e9c     40 95 52 FC | 	wrword	arg02, _var01
21ea0                 | ' word[@spr1ptr+12*num+6]:=y
21ea0     32 81 02 F6 | 	mov	_var01, objptr
21ea4     49 83 02 F6 | 	mov	_var02, arg01
21ea8     01 82 66 F0 | 	shl	_var02, #1
21eac     49 83 02 F1 | 	add	_var02, arg01
21eb0     02 82 66 F0 | 	shl	_var02, #2
21eb4     41 81 02 F1 | 	add	_var01, _var02
21eb8     06 80 06 F1 | 	add	_var01, #6
21ebc     40 97 52 FC | 	wrword	arg03, _var01
21ec0     11 65 86 F1 | 	sub	objptr, #273
21ec4                 | _hg010b_spin2_setspritepos_ret
21ec4     2D 00 64 FD | 	ret
21ec8                 | 
21ec8                 | ' 
21ec8                 | ' pub setspritesize(num,w,h)
21ec8                 | _hg010b_spin2_setspritesize
21ec8                 | ' word[@spr1ptr+12*num+8]:=w
21ec8     11 65 06 F1 | 	add	objptr, #273
21ecc     32 81 02 F6 | 	mov	_var01, objptr
21ed0     49 83 02 F6 | 	mov	_var02, arg01
21ed4     01 82 66 F0 | 	shl	_var02, #1
21ed8     49 83 02 F1 | 	add	_var02, arg01
21edc     02 82 66 F0 | 	shl	_var02, #2
21ee0     41 81 02 F1 | 	add	_var01, _var02
21ee4     08 80 06 F1 | 	add	_var01, #8
21ee8     40 95 52 FC | 	wrword	arg02, _var01
21eec                 | ' word[@spr1ptr+12*num+10]:=h
21eec     32 81 02 F6 | 	mov	_var01, objptr
21ef0     49 83 02 F6 | 	mov	_var02, arg01
21ef4     01 82 66 F0 | 	shl	_var02, #1
21ef8     49 83 02 F1 | 	add	_var02, arg01
21efc     02 82 66 F0 | 	shl	_var02, #2
21f00     41 81 02 F1 | 	add	_var01, _var02
21f04     0A 80 06 F1 | 	add	_var01, #10
21f08     40 97 52 FC | 	wrword	arg03, _var01
21f0c     11 65 86 F1 | 	sub	objptr, #273
21f10                 | _hg010b_spin2_setspritesize_ret
21f10     2D 00 64 FD | 	ret
21f14                 | 
21f14                 | ' 
21f14                 | ' 
21f14                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
21f14                 | ' 
21f14                 | ' 
21f14                 | ' pub putpixel(x,y,c)
21f14                 | _hg010b_spin2_putpixel
21f14     04 CA 05 F6 | 	mov	COUNT_, #4
21f18     E8 00 A0 FD | 	call	#pushregs_
21f1c     49 A7 02 F6 | 	mov	local01, arg01
21f20                 | ' 
21f20                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
21f20     00 A8 06 F6 | 	mov	local02, #0
21f24     00 A6 56 F2 | 	cmps	local01, #0 wc
21f28     01 A8 66 36 |  if_ae	neg	local02, #1
21f2c     E9 64 06 F1 | 	add	objptr, #233
21f30     32 9B 02 FB | 	rdlong	arg05, objptr
21f34     02 9A 66 F0 | 	shl	arg05, #2
21f38     4D A7 52 F2 | 	cmps	local01, arg05 wc
21f3c     55 AB A2 F1 | 	subx	local03, local03
21f40     55 A9 02 F5 | 	and	local02, local03
21f44     00 AA 06 F6 | 	mov	local03, #0
21f48     00 94 56 F2 | 	cmps	arg02, #0 wc
21f4c     01 AA 66 36 |  if_ae	neg	local03, #1
21f50     55 A9 02 F5 | 	and	local02, local03
21f54     04 64 86 F1 | 	sub	objptr, #4
21f58     32 AB 02 FB | 	rdlong	local03, objptr
21f5c     E5 64 86 F1 | 	sub	objptr, #229
21f60     55 95 52 F2 | 	cmps	arg02, local03 wc
21f64     56 AD A2 F1 | 	subx	local04, local04
21f68     56 A9 CA F7 | 	test	local02, local04 wz
21f6c     48 00 90 AD |  if_e	jmp	#LR__2740
21f70     DD 64 06 F1 | 	add	objptr, #221
21f74     32 93 02 FB | 	rdlong	arg01, objptr
21f78     14 64 06 F1 | 	add	objptr, #20
21f7c     32 AD 02 FB | 	rdlong	local04, objptr
21f80     02 AC 66 F0 | 	shl	local04, #2
21f84     4A AD 02 FD | 	qmul	local04, arg02
21f88                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
21f88     4B 95 02 F6 | 	mov	arg02, arg03
21f8c     01 96 06 F6 | 	mov	arg03, #1
21f90     00 98 06 F6 | 	mov	arg04, #0
21f94     01 9A 06 F6 | 	mov	arg05, #1
21f98     0A 00 00 FF 
21f9c     DB 65 06 F1 | 	add	objptr, ##5595
21fa0     18 AC 62 FD | 	getqx	local04
21fa4     53 AD 02 F1 | 	add	local04, local01
21fa8     56 93 02 F1 | 	add	arg01, local04
21fac     B4 1D B0 FD | 	call	#_psram_spin2_fill
21fb0     0B 00 00 FF 
21fb4     CC 64 86 F1 | 	sub	objptr, ##5836
21fb8                 | LR__2740
21fb8     E7 F0 03 F6 | 	mov	ptra, fp
21fbc     F2 00 A0 FD | 	call	#popregs_
21fc0                 | _hg010b_spin2_putpixel_ret
21fc0     2D 00 64 FD | 	ret
21fc4                 | 
21fc4                 | ' 
21fc4                 | ' pub putpixel2(x,y,c)
21fc4                 | _hg010b_spin2_putpixel2
21fc4     02 CA 05 F6 | 	mov	COUNT_, #2
21fc8     E8 00 A0 FD | 	call	#pushregs_
21fcc     DD 64 06 F1 | 	add	objptr, #221
21fd0     32 A7 02 FB | 	rdlong	local01, objptr
21fd4     14 64 06 F1 | 	add	objptr, #20
21fd8     32 9B 02 FB | 	rdlong	arg05, objptr
21fdc     02 9A 66 F0 | 	shl	arg05, #2
21fe0     4A 9B 02 FD | 	qmul	arg05, arg02
21fe4                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
21fe4     4B 95 02 F6 | 	mov	arg02, arg03
21fe8     01 96 06 F6 | 	mov	arg03, #1
21fec     00 98 06 F6 | 	mov	arg04, #0
21ff0     01 9A 06 F6 | 	mov	arg05, #1
21ff4     0A 00 00 FF 
21ff8     DB 65 06 F1 | 	add	objptr, ##5595
21ffc     18 A8 62 FD | 	getqx	local02
22000     49 A9 02 F1 | 	add	local02, arg01
22004     54 A7 02 F1 | 	add	local01, local02
22008     53 93 02 F6 | 	mov	arg01, local01
2200c     54 1D B0 FD | 	call	#_psram_spin2_fill
22010     0B 00 00 FF 
22014     CC 64 86 F1 | 	sub	objptr, ##5836
22018     E7 F0 03 F6 | 	mov	ptra, fp
2201c     F2 00 A0 FD | 	call	#popregs_
22020                 | _hg010b_spin2_putpixel2_ret
22020     2D 00 64 FD | 	ret
22024                 | 
22024                 | ' 
22024                 | ' pub getpixel2(x,y): c 
22024                 | _hg010b_spin2_getpixel2
22024     02 CA 05 F6 | 	mov	COUNT_, #2
22028     E8 00 A0 FD | 	call	#pushregs_
2202c     0C F0 07 F1 | 	add	ptra, #12
22030     04 CE 05 F1 | 	add	fp, #4
22034     E7 92 62 FC | 	wrlong	arg01, fp
22038     04 CE 05 F1 | 	add	fp, #4
2203c     E7 94 62 FC | 	wrlong	arg02, fp
22040     08 CE 85 F1 | 	sub	fp, #8
22044     E7 00 68 FC | 	wrlong	#0, fp
22048     E7 92 02 F6 | 	mov	arg01, fp
2204c     DD 64 06 F1 | 	add	objptr, #221
22050     32 95 02 FB | 	rdlong	arg02, objptr
22054     14 64 06 F1 | 	add	objptr, #20
22058     32 97 02 FB | 	rdlong	arg03, objptr
2205c     02 96 66 F0 | 	shl	arg03, #2
22060     08 CE 05 F1 | 	add	fp, #8
22064     E7 7A 02 FB | 	rdlong	result1, fp
22068     3D 97 02 FD | 	qmul	arg03, result1
2206c                 | ' 
2206c                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
2206c     04 CE 85 F1 | 	sub	fp, #4
22070     E7 A6 02 FB | 	rdlong	local01, fp
22074     04 CE 85 F1 | 	sub	fp, #4
22078     01 96 06 F6 | 	mov	arg03, #1
2207c     0A 00 00 FF 
22080     DB 65 06 F1 | 	add	objptr, ##5595
22084     18 A8 62 FD | 	getqx	local02
22088     53 A9 02 F1 | 	add	local02, local01
2208c     54 95 02 F1 | 	add	arg02, local02
22090     94 1B B0 FD | 	call	#_psram_spin2_read1
22094     0B 00 00 FF 
22098     CC 64 86 F1 | 	sub	objptr, ##5836
2209c                 | ' return c
2209c     E7 7A 02 FB | 	rdlong	result1, fp
220a0     E7 F0 03 F6 | 	mov	ptra, fp
220a4     F2 00 A0 FD | 	call	#popregs_
220a8                 | _hg010b_spin2_getpixel2_ret
220a8     2D 00 64 FD | 	ret
220ac                 | 
220ac                 | '   
220ac                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
220ac                 | ' 
220ac                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
220ac                 | _hg010b_spin2_fastline
220ac     02 CA 05 F6 | 	mov	COUNT_, #2
220b0     E8 00 A0 FD | 	call	#pushregs_
220b4     49 A7 02 F6 | 	mov	local01, arg01
220b8     4A A9 02 F6 | 	mov	local02, arg02
220bc                 | ' 
220bc                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
220bc     00 96 56 F2 | 	cmps	arg03, #0 wc
220c0     F4 00 90 CD |  if_b	jmp	#LR__2750
220c4     01 00 00 FF 
220c8     2A 64 06 F1 | 	add	objptr, ##554
220cc     32 9B 02 FB | 	rdlong	arg05, objptr
220d0     01 00 00 FF 
220d4     2A 64 86 F1 | 	sub	objptr, ##554
220d8     4D 97 52 F2 | 	cmps	arg03, arg05 wc
220dc     D8 00 90 3D |  if_ae	jmp	#LR__2750
220e0     00 A6 56 F2 | 	cmps	local01, #0 wc
220e4     00 A8 56 C2 |  if_b	cmps	local02, #0 wc
220e8     CC 00 90 CD |  if_b	jmp	#LR__2750
220ec     01 00 00 FF 
220f0     26 64 06 F1 | 	add	objptr, ##550
220f4     32 9B 02 FB | 	rdlong	arg05, objptr
220f8     01 00 00 FF 
220fc     26 64 86 F1 | 	sub	objptr, ##550
22100     4D A7 5A F2 | 	cmps	local01, arg05 wcz
22104     01 00 00 1F 
22108     26 64 06 11 |  if_a	add	objptr, ##550
2210c     32 93 02 1B |  if_a	rdlong	arg01, objptr
22110     01 00 00 1F 
22114     26 64 86 11 |  if_a	sub	objptr, ##550
22118     49 A9 5A 12 |  if_a	cmps	local02, arg01 wcz
2211c                 | '   return
2211c     98 00 90 1D |  if_a	jmp	#LR__2750
22120     54 A7 5A F2 | 	cmps	local01, local02 wcz
22124     53 9B 02 16 |  if_a	mov	arg05, local01
22128     54 A7 02 16 |  if_a	mov	local01, local02
2212c     4D A9 02 16 |  if_a	mov	local02, arg05
22130     00 A6 56 F2 | 	cmps	local01, #0 wc
22134     00 A6 06 C6 |  if_b	mov	local01, #0
22138     01 00 00 FF 
2213c     26 64 06 F1 | 	add	objptr, ##550
22140     32 9B 02 FB | 	rdlong	arg05, objptr
22144     01 00 00 FF 
22148     26 64 86 F1 | 	sub	objptr, ##550
2214c     4D A9 52 F2 | 	cmps	local02, arg05 wc
22150     01 00 00 3F 
22154     26 64 06 31 |  if_ae	add	objptr, ##550
22158     32 A9 02 3B |  if_ae	rdlong	local02, objptr
2215c     01 00 00 3F 
22160     26 64 86 31 |  if_ae	sub	objptr, ##550
22164     DD 64 06 F1 | 	add	objptr, #221
22168     32 93 02 FB | 	rdlong	arg01, objptr
2216c     14 64 06 F1 | 	add	objptr, #20
22170     32 9B 02 FB | 	rdlong	arg05, objptr
22174     02 9A 66 F0 | 	shl	arg05, #2
22178     4B 9B 02 FD | 	qmul	arg05, arg03
2217c                 | ' if x1>x2
2217c                 | '   x1,x2:=x2,x1
2217c                 | ' if x1<0 
2217c                 | '   x1:=0
2217c                 | ' if x2>=xres
2217c                 | '   x2:=xres-1  
2217c     01 A8 86 31 |  if_ae	sub	local02, #1
22180                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
22180     01 96 06 F6 | 	mov	arg03, #1
22184     54 97 02 F1 | 	add	arg03, local02
22188     53 97 82 F1 | 	sub	arg03, local01
2218c     4C 95 02 F6 | 	mov	arg02, arg04
22190     00 98 06 F6 | 	mov	arg04, #0
22194     01 9A 06 F6 | 	mov	arg05, #1
22198     0A 00 00 FF 
2219c     DB 65 06 F1 | 	add	objptr, ##5595
221a0     18 A8 62 FD | 	getqx	local02
221a4     53 A9 02 F1 | 	add	local02, local01
221a8     54 93 02 F1 | 	add	arg01, local02
221ac     B4 1B B0 FD | 	call	#_psram_spin2_fill
221b0     0B 00 00 FF 
221b4     CC 64 86 F1 | 	sub	objptr, ##5836
221b8                 | LR__2750
221b8     E7 F0 03 F6 | 	mov	ptra, fp
221bc     F2 00 A0 FD | 	call	#popregs_
221c0                 | _hg010b_spin2_fastline_ret
221c0     2D 00 64 FD | 	ret
221c4                 | 
221c4                 | ' 
221c4                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
221c4                 | _hg010b_spin2_draw
221c4     0E CA 05 F6 | 	mov	COUNT_, #14
221c8     E8 00 A0 FD | 	call	#pushregs_
221cc     49 A7 02 F6 | 	mov	local01, arg01
221d0     4A A9 02 F6 | 	mov	local02, arg02
221d4     4B AB 02 F6 | 	mov	local03, arg03
221d8     4C AD 02 F6 | 	mov	local04, arg04
221dc     4D AF 02 F6 | 	mov	local05, arg05
221e0                 | ' 
221e0                 | ' if (y1==y2)
221e0     56 A9 0A F2 | 	cmp	local02, local04 wz
221e4     18 00 90 5D |  if_ne	jmp	#LR__2760
221e8                 | '   fastline(x1,x2,y1,c)
221e8     53 93 02 F6 | 	mov	arg01, local01
221ec     55 95 02 F6 | 	mov	arg02, local03
221f0     54 97 02 F6 | 	mov	arg03, local02
221f4     57 99 02 F6 | 	mov	arg04, local05
221f8     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
221fc     F8 00 90 FD | 	jmp	#LR__2766
22200                 | LR__2760
22200                 | ' else  
22200                 | '   x:=x1
22200     53 B1 02 F6 | 	mov	local06, local01
22204                 | '   y:=y1
22204     54 B3 02 F6 | 	mov	local07, local02
22208                 | ' 
22208                 | '   if (x1<x2) 
22208     55 A7 52 F2 | 	cmps	local01, local03 wc
2220c                 | '     xi:=1
2220c     01 B4 06 C6 |  if_b	mov	local08, #1
22210                 | '     dx:=x2-x1
22210     55 B7 02 C6 |  if_b	mov	local09, local03
22214     53 B7 82 C1 |  if_b	sub	local09, local01
22218                 | '   else
22218                 | '     xi:=-1
22218     01 B4 66 36 |  if_ae	neg	local08, #1
2221c                 | '     dx:=x1-x2
2221c     55 A7 82 31 |  if_ae	sub	local01, local03
22220     53 B7 02 36 |  if_ae	mov	local09, local01
22224                 | '   
22224                 | '   if (y1<y2) 
22224     56 A9 52 F2 | 	cmps	local02, local04 wc
22228                 | '     yi:=1
22228     01 B8 06 C6 |  if_b	mov	local10, #1
2222c                 | '     dy:=y2-y1
2222c     56 BB 02 C6 |  if_b	mov	local11, local04
22230     54 BB 82 C1 |  if_b	sub	local11, local02
22234                 | '   else
22234                 | '     yi:=-1
22234     01 B8 66 36 |  if_ae	neg	local10, #1
22238                 | '     dy:=y1-y2
22238     56 A9 82 31 |  if_ae	sub	local02, local04
2223c     54 BB 02 36 |  if_ae	mov	local11, local02
22240                 | ' 
22240                 | '   putpixel(x,y,c)
22240     57 97 02 F6 | 	mov	arg03, local05
22244     58 93 02 F6 | 	mov	arg01, local06
22248     59 95 02 F6 | 	mov	arg02, local07
2224c     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
22250                 | ' 
22250                 | '   if (dx>dy)
22250     5D B7 5A F2 | 	cmps	local09, local11 wcz
22254     50 00 90 ED |  if_be	jmp	#LR__2762
22258                 | '     ai:=(dy-dx)*2
22258     5D BD 02 F6 | 	mov	local12, local11
2225c     5B BD 82 F1 | 	sub	local12, local09
22260     01 BC 66 F0 | 	shl	local12, #1
22264                 | '     bi:=dy*2
22264     01 BA 66 F0 | 	shl	local11, #1
22268     5D BF 02 F6 | 	mov	local13, local11
2226c                 | '     d:= bi-dx
2226c     5F C1 02 F6 | 	mov	local14, local13
22270     5B C1 82 F1 | 	sub	local14, local09
22274                 | '     repeat while (x<>x2) 
22274                 | LR__2761
22274     55 B1 0A F2 | 	cmp	local06, local03 wz
22278     7C 00 90 AD |  if_e	jmp	#LR__2765
2227c                 | '       if (d>=0) 
2227c     00 C0 56 F2 | 	cmps	local14, #0 wc
22280                 | '         x+=xi
22280     5A B1 02 31 |  if_ae	add	local06, local08
22284                 | '         y+=yi
22284     5C B3 02 31 |  if_ae	add	local07, local10
22288                 | '         d+=ai
22288     5E C1 02 31 |  if_ae	add	local14, local12
2228c                 | '       else
2228c                 | '         d+=bi
2228c     5F C1 02 C1 |  if_b	add	local14, local13
22290                 | '         x+=xi
22290     5A B1 02 C1 |  if_b	add	local06, local08
22294                 | '       putpixel(x,y,c)
22294     58 93 02 F6 | 	mov	arg01, local06
22298     59 95 02 F6 | 	mov	arg02, local07
2229c     57 97 02 F6 | 	mov	arg03, local05
222a0     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
222a4     CC FF 9F FD | 	jmp	#LR__2761
222a8                 | LR__2762
222a8                 | '   else
222a8                 | '     ai:=(dx-dy)*2
222a8     5B BD 02 F6 | 	mov	local12, local09
222ac     5D BD 82 F1 | 	sub	local12, local11
222b0     01 BC 66 F0 | 	shl	local12, #1
222b4                 | '     bi:=dx*2
222b4     01 B6 66 F0 | 	shl	local09, #1
222b8     5B BF 02 F6 | 	mov	local13, local09
222bc                 | '     d:=bi-dy
222bc     5F C1 02 F6 | 	mov	local14, local13
222c0     5D C1 82 F1 | 	sub	local14, local11
222c4                 | '     repeat while (y<>y2)
222c4                 | LR__2763
222c4     56 B3 0A F2 | 	cmp	local07, local04 wz
222c8     2C 00 90 AD |  if_e	jmp	#LR__2764
222cc                 | '       if (d>=0)
222cc     00 C0 56 F2 | 	cmps	local14, #0 wc
222d0                 | '         x+=xi
222d0     5A B1 02 31 |  if_ae	add	local06, local08
222d4                 | '         y+=yi
222d4     5C B3 02 31 |  if_ae	add	local07, local10
222d8                 | '         d+=ai
222d8     5E C1 02 31 |  if_ae	add	local14, local12
222dc                 | '       else
222dc                 | '         d+=bi
222dc     5F C1 02 C1 |  if_b	add	local14, local13
222e0                 | '         y+=yi
222e0     5C B3 02 C1 |  if_b	add	local07, local10
222e4                 | '       putpixel(x, y,c)
222e4     58 93 02 F6 | 	mov	arg01, local06
222e8     59 95 02 F6 | 	mov	arg02, local07
222ec     57 97 02 F6 | 	mov	arg03, local05
222f0     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
222f4     CC FF 9F FD | 	jmp	#LR__2763
222f8                 | LR__2764
222f8                 | LR__2765
222f8                 | LR__2766
222f8     E7 F0 03 F6 | 	mov	ptra, fp
222fc     F2 00 A0 FD | 	call	#popregs_
22300                 | _hg010b_spin2_draw_ret
22300     2D 00 64 FD | 	ret
22304                 | 
22304                 | '       
22304                 | '       
22304                 | '       
22304                 | '       
22304                 | '       
22304                 | '       
22304                 | '  
22304                 | ' pub fillpush(val) 
22304                 | _hg010b_spin2_fillpush
22304                 | ' fillstack[fillptr]:=val
22304     0B 00 00 FF 
22308     BA 64 06 F1 | 	add	objptr, ##5818
2230c     32 81 02 FB | 	rdlong	_var01, objptr
22310     02 80 66 F0 | 	shl	_var01, #2
22314     0A 00 00 FF 
22318     00 64 86 F1 | 	sub	objptr, ##5120
2231c     32 81 02 F1 | 	add	_var01, objptr
22320     40 93 62 FC | 	wrlong	arg01, _var01
22324                 | ' fillptr+=1   
22324     0A 00 00 FF 
22328     00 64 06 F1 | 	add	objptr, ##5120
2232c     32 81 02 FB | 	rdlong	_var01, objptr
22330     01 80 06 F1 | 	add	_var01, #1
22334     32 81 62 FC | 	wrlong	_var01, objptr
22338     0B 00 00 FF 
2233c     BA 64 86 F1 | 	sub	objptr, ##5818
22340                 | _hg010b_spin2_fillpush_ret
22340     2D 00 64 FD | 	ret
22344                 | 
22344                 | ' 
22344                 | '     
22344                 | ' pub fillpop() : val
22344                 | _hg010b_spin2_fillpop
22344                 | ' 
22344                 | ' fillptr-=1
22344     0B 00 00 FF 
22348     BA 64 06 F1 | 	add	objptr, ##5818
2234c     32 7B 02 FB | 	rdlong	result1, objptr
22350     01 7A 86 F1 | 	sub	result1, #1
22354     32 7B 62 FC | 	wrlong	result1, objptr
22358                 | ' if fillptr<0
22358     0B 00 00 FF 
2235c     BA 64 86 F1 | 	sub	objptr, ##5818
22360     00 7A 56 F2 | 	cmps	result1, #0 wc
22364                 | '   fillptr:=0
22364     0B 00 00 CF 
22368     BA 64 06 C1 |  if_b	add	objptr, ##5818
2236c     32 01 68 CC |  if_b	wrlong	#0, objptr
22370     0B 00 00 CF 
22374     BA 64 86 C1 |  if_b	sub	objptr, ##5818
22378                 | '   val:=-12345
22378     E7 FF 7F CF 
2237c     C7 81 06 C6 |  if_b	mov	_var01, ##-12345
22380     28 00 90 CD |  if_b	jmp	#LR__2770
22384                 | ' else 
22384                 | '   val:=fillstack[fillptr]
22384     0B 00 00 FF 
22388     BA 64 06 F1 | 	add	objptr, ##5818
2238c     32 81 02 FB | 	rdlong	_var01, objptr
22390     02 80 66 F0 | 	shl	_var01, #2
22394     0A 00 00 FF 
22398     00 64 86 F1 | 	sub	objptr, ##5120
2239c     32 81 02 F1 | 	add	_var01, objptr
223a0     40 81 02 FB | 	rdlong	_var01, _var01
223a4     01 00 00 FF 
223a8     BA 64 86 F1 | 	sub	objptr, ##698
223ac                 | LR__2770
223ac                 | ' return val
223ac     40 7B 02 F6 | 	mov	result1, _var01
223b0                 | _hg010b_spin2_fillpop_ret
223b0     2D 00 64 FD | 	ret
223b4                 | 
223b4                 | ' 
223b4                 | '       
223b4                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
223b4                 | _hg010b_spin2_fill
223b4     0B CA 05 F6 | 	mov	COUNT_, #11
223b8     E8 00 A0 FD | 	call	#pushregs_
223bc                 | ' 
223bc                 | ' newcolor:=newcolor & 255
223bc     4B A7 E2 F8 | 	getbyte	local01, arg03, #0
223c0                 | ' oldcolor:=oldcolor & 255
223c0     4C A9 E2 F8 | 	getbyte	local02, arg04, #0
223c4                 | ' 
223c4                 | ' if (oldcolor == newcolor) 
223c4     53 A9 0A F2 | 	cmp	local02, local01 wz
223c8                 | '   return
223c8     70 02 90 AD |  if_e	jmp	#LR__2789
223cc                 | ' 
223cc                 | ' fillptr:=0
223cc     0B 00 00 FF 
223d0     BA 64 06 F1 | 	add	objptr, ##5818
223d4     32 01 68 FC | 	wrlong	#0, objptr
223d8                 | ' fillmax:=0
223d8     04 64 06 F1 | 	add	objptr, #4
223dc     32 01 68 FC | 	wrlong	#0, objptr
223e0     0B 00 00 FF 
223e4     BE 64 86 F1 | 	sub	objptr, ##5822
223e8                 | ' fillpush(x)
223e8     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
223ec                 | ' fillpush(y)
223ec     4A 93 02 F6 | 	mov	arg01, arg02
223f0     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
223f4                 | ' y:=fillpop()
223f4     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
223f8     3D AB 02 F6 | 	mov	local03, result1
223fc                 | ' x:=fillpop()
223fc     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
22400     3D AD 02 F6 | 	mov	local04, result1
22404                 | ' 'pinhigh(38)
22404                 | ' repeat while (x>-1)       
22404                 | LR__2780
22404     00 AC 56 F2 | 	cmps	local04, #0 wc
22408     30 02 90 CD |  if_b	jmp	#LR__2788
2240c                 | '  ' pintoggle(39)
2240c                 | '   x1 := x
2240c     56 AF 02 F6 | 	mov	local05, local04
22410                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
22410                 | LR__2781
22410     00 B0 06 F6 | 	mov	local06, #0
22414     00 B2 06 F6 | 	mov	local07, #0
22418     00 AE 56 F2 | 	cmps	local05, #0 wc
2241c     01 B2 66 36 |  if_ae	neg	local07, #1
22420     00 B2 0E F2 | 	cmp	local07, #0 wz
22424     00 B0 26 56 |  if_ne	not	local06, #0
22428     00 B4 06 F6 | 	mov	local08, #0
2242c     00 B6 06 F6 | 	mov	local09, #0
22430     55 95 02 F6 | 	mov	arg02, local03
22434     57 93 02 F6 | 	mov	arg01, local05
22438     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
2243c     54 7B 0A F2 | 	cmp	result1, local02 wz
22440     00 B6 26 A6 |  if_e	not	local09, #0
22444     00 B6 0E F2 | 	cmp	local09, #0 wz
22448     00 B4 26 56 |  if_ne	not	local08, #0
2244c     5A B1 CA F7 | 	test	local06, local08 wz
22450                 | '     x1--
22450     01 AE 86 51 |  if_ne	sub	local05, #1
22454     B8 FF 9F 5D |  if_ne	jmp	#LR__2781
22458                 | '   x1++
22458     01 AE 06 F1 | 	add	local05, #1
2245c                 | '   spanabove := 0
2245c     00 B8 06 F6 | 	mov	local10, #0
22460                 | '   spanbelow := 0
22460     00 BA 06 F6 | 	mov	local11, #0
22464                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
22464                 | LR__2782
22464     00 B0 06 F6 | 	mov	local06, #0
22468     02 00 00 FF 
2246c     00 AE 56 F2 | 	cmps	local05, ##1024 wc
22470     00 B0 26 C6 |  if_b	not	local06, #0
22474     00 B4 06 F6 | 	mov	local08, #0
22478     00 B6 06 F6 | 	mov	local09, #0
2247c     55 95 02 F6 | 	mov	arg02, local03
22480     57 93 02 F6 | 	mov	arg01, local05
22484     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
22488     54 7B 0A F2 | 	cmp	result1, local02 wz
2248c     00 B6 26 A6 |  if_e	not	local09, #0
22490     00 B6 0E F2 | 	cmp	local09, #0 wz
22494     00 B4 26 56 |  if_ne	not	local08, #0
22498     5A B1 CA F7 | 	test	local06, local08 wz
2249c     88 01 90 AD |  if_e	jmp	#LR__2787
224a0                 | '     putpixel2 (x1,y, newcolor & 255)
224a0     53 97 E2 F8 | 	getbyte	arg03, local01, #0
224a4     57 93 02 F6 | 	mov	arg01, local05
224a8     55 95 02 F6 | 	mov	arg02, local03
224ac     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
224b0                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
224b0     00 B0 06 F6 | 	mov	local06, #0
224b4     00 B2 06 F6 | 	mov	local07, #0
224b8     00 B8 0E F2 | 	cmp	local10, #0 wz
224bc     01 AA 56 A2 |  if_e	cmps	local03, #1 wc
224c0     01 B2 66 26 |  if_nc_and_z	neg	local07, #1
224c4     00 B2 0E F2 | 	cmp	local07, #0 wz
224c8     00 B0 26 56 |  if_ne	not	local06, #0
224cc     00 B4 06 F6 | 	mov	local08, #0
224d0     00 B6 06 F6 | 	mov	local09, #0
224d4     55 95 02 F6 | 	mov	arg02, local03
224d8     01 94 86 F1 | 	sub	arg02, #1
224dc     57 93 02 F6 | 	mov	arg01, local05
224e0     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
224e4     54 7B 0A F2 | 	cmp	result1, local02 wz
224e8     00 B6 26 A6 |  if_e	not	local09, #0
224ec     00 B6 0E F2 | 	cmp	local09, #0 wz
224f0     00 B4 26 56 |  if_ne	not	local08, #0
224f4     5A B1 CA F7 | 	test	local06, local08 wz
224f8     1C 00 90 AD |  if_e	jmp	#LR__2783
224fc                 | '       fillpush(x1)
224fc     57 93 02 F6 | 	mov	arg01, local05
22500     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
22504                 | '       fillpush(y-1)
22504     55 93 02 F6 | 	mov	arg01, local03
22508     01 92 86 F1 | 	sub	arg01, #1
2250c     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
22510                 | '       spanabove := 1 
22510     01 B8 06 F6 | 	mov	local10, #1
22514     4C 00 90 FD | 	jmp	#LR__2784
22518                 | LR__2783
22518                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
22518     00 B0 06 F6 | 	mov	local06, #0
2251c     00 B2 06 F6 | 	mov	local07, #0
22520     00 B8 0E F2 | 	cmp	local10, #0 wz
22524     01 AA 56 52 |  if_ne	cmps	local03, #1 wc
22528     01 B2 66 16 |  if_a	neg	local07, #1
2252c     00 B2 0E F2 | 	cmp	local07, #0 wz
22530     00 B0 26 56 |  if_ne	not	local06, #0
22534     00 B4 06 F6 | 	mov	local08, #0
22538     00 B6 06 F6 | 	mov	local09, #0
2253c     55 95 02 F6 | 	mov	arg02, local03
22540     01 94 86 F1 | 	sub	arg02, #1
22544     57 93 02 F6 | 	mov	arg01, local05
22548     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
2254c     54 7B 0A F2 | 	cmp	result1, local02 wz
22550     00 B6 26 56 |  if_ne	not	local09, #0
22554     00 B6 0E F2 | 	cmp	local09, #0 wz
22558     00 B4 26 56 |  if_ne	not	local08, #0
2255c     5A B1 CA F7 | 	test	local06, local08 wz
22560                 | '       spanabove := 0 
22560     00 B8 06 56 |  if_ne	mov	local10, #0
22564                 | LR__2784
22564                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
22564     00 B0 06 F6 | 	mov	local06, #0
22568     00 B2 06 F6 | 	mov	local07, #0
2256c     00 BA 0E F2 | 	cmp	local11, #0 wz
22570     01 00 00 AF 
22574     3F AA 56 A2 |  if_e	cmps	local03, ##575 wc
22578     01 B2 66 86 |  if_c_and_z	neg	local07, #1
2257c     00 B2 0E F2 | 	cmp	local07, #0 wz
22580     00 B0 26 56 |  if_ne	not	local06, #0
22584     00 B4 06 F6 | 	mov	local08, #0
22588     00 B6 06 F6 | 	mov	local09, #0
2258c     55 95 02 F6 | 	mov	arg02, local03
22590     01 94 06 F1 | 	add	arg02, #1
22594     57 93 02 F6 | 	mov	arg01, local05
22598     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
2259c     54 7B 0A F2 | 	cmp	result1, local02 wz
225a0     00 B6 26 A6 |  if_e	not	local09, #0
225a4     00 B6 0E F2 | 	cmp	local09, #0 wz
225a8     00 B4 26 56 |  if_ne	not	local08, #0
225ac     5A B1 CA F7 | 	test	local06, local08 wz
225b0     1C 00 90 AD |  if_e	jmp	#LR__2785
225b4                 | '       fillpush(x1)
225b4     57 93 02 F6 | 	mov	arg01, local05
225b8     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
225bc                 | '       fillpush(y + 1)
225bc     55 93 02 F6 | 	mov	arg01, local03
225c0     01 92 06 F1 | 	add	arg01, #1
225c4     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
225c8                 | '       spanBelow := 1
225c8     01 BA 06 F6 | 	mov	local11, #1
225cc     50 00 90 FD | 	jmp	#LR__2786
225d0                 | LR__2785
225d0                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
225d0     00 B0 06 F6 | 	mov	local06, #0
225d4     00 B2 06 F6 | 	mov	local07, #0
225d8     00 BA 0E F2 | 	cmp	local11, #0 wz
225dc     01 00 00 5F 
225e0     3F AA 56 52 |  if_ne	cmps	local03, ##575 wc
225e4     01 B2 66 46 |  if_c_and_nz	neg	local07, #1
225e8     00 B2 0E F2 | 	cmp	local07, #0 wz
225ec     00 B0 26 56 |  if_ne	not	local06, #0
225f0     00 B4 06 F6 | 	mov	local08, #0
225f4     00 B6 06 F6 | 	mov	local09, #0
225f8     55 95 02 F6 | 	mov	arg02, local03
225fc     01 94 06 F1 | 	add	arg02, #1
22600     57 93 02 F6 | 	mov	arg01, local05
22604     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
22608     54 7B 0A F2 | 	cmp	result1, local02 wz
2260c     00 B6 26 56 |  if_ne	not	local09, #0
22610     00 B6 0E F2 | 	cmp	local09, #0 wz
22614     00 B4 26 56 |  if_ne	not	local08, #0
22618     5A B1 CA F7 | 	test	local06, local08 wz
2261c                 | '       spanbelow := 0
2261c     00 BA 06 56 |  if_ne	mov	local11, #0
22620                 | LR__2786
22620                 | '     x1++
22620     01 AE 06 F1 | 	add	local05, #1
22624     3C FE 9F FD | 	jmp	#LR__2782
22628                 | LR__2787
22628                 | '   y:=fillpop()
22628     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
2262c     3D AB 02 F6 | 	mov	local03, result1
22630                 | '   x:=fillpop()
22630     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
22634     3D AD 02 F6 | 	mov	local04, result1
22638     C8 FD 9F FD | 	jmp	#LR__2780
2263c                 | LR__2788
2263c                 | LR__2789
2263c     E7 F0 03 F6 | 	mov	ptra, fp
22640     F2 00 A0 FD | 	call	#popregs_
22644                 | _hg010b_spin2_fill_ret
22644     2D 00 64 FD | 	ret
22648                 | 
22648                 | ' 'pinlow(38)    
22648                 | ' 
22648                 | ' '-- A filled circle -----------------------------------------------------
22648                 | ' 
22648                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
22648                 | _hg010b_spin2_fcircle
22648     08 CA 05 F6 | 	mov	COUNT_, #8
2264c     E8 00 A0 FD | 	call	#pushregs_
22650     4B A7 02 F6 | 	mov	local01, arg03
22654     FF FF 7F FF 
22658     FE A7 06 FD | 	qmul	local01, ##-2
2265c     49 A9 02 F6 | 	mov	local02, arg01
22660     4A AB 02 F6 | 	mov	local03, arg02
22664     4C AD 02 F6 | 	mov	local04, arg04
22668                 | ' 
22668                 | ' d:=5-4*r
22668     53 99 02 F6 | 	mov	arg04, local01
2266c     02 98 66 F0 | 	shl	arg04, #2
22670     05 AE 06 F6 | 	mov	local05, #5
22674     4C AF 82 F1 | 	sub	local05, arg04
22678                 | ' x:=0
22678     00 B0 06 F6 | 	mov	local06, #0
2267c                 | ' y:=r
2267c                 | ' da:=(-2*r+5)*4
2267c                 | ' db:=3*4
2267c     0C B2 06 F6 | 	mov	local07, #12
22680                 | ' repeat while (x<=y) 
22680     18 B4 62 FD | 	getqx	local08
22684     05 B4 06 F1 | 	add	local08, #5
22688     02 B4 66 F0 | 	shl	local08, #2
2268c                 | LR__2790
2268c     53 B1 5A F2 | 	cmps	local06, local01 wcz
22690     B4 00 90 1D |  if_a	jmp	#LR__2792
22694                 | '   fastline(x0-x,x0+x,y0-y,c)
22694     54 93 02 F6 | 	mov	arg01, local02
22698     58 93 82 F1 | 	sub	arg01, local06
2269c     54 95 02 F6 | 	mov	arg02, local02
226a0     58 95 02 F1 | 	add	arg02, local06
226a4     55 97 02 F6 | 	mov	arg03, local03
226a8     53 97 82 F1 | 	sub	arg03, local01
226ac     56 99 02 F6 | 	mov	arg04, local04
226b0     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
226b4                 | '   fastline(x0-x,x0+x,y0+y,c)
226b4     54 93 02 F6 | 	mov	arg01, local02
226b8     58 93 82 F1 | 	sub	arg01, local06
226bc     54 95 02 F6 | 	mov	arg02, local02
226c0     58 95 02 F1 | 	add	arg02, local06
226c4     55 97 02 F6 | 	mov	arg03, local03
226c8     53 97 02 F1 | 	add	arg03, local01
226cc     56 99 02 F6 | 	mov	arg04, local04
226d0     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
226d4                 | '   fastline(x0-y,x0+y,y0-x,c)
226d4     54 93 02 F6 | 	mov	arg01, local02
226d8     53 93 82 F1 | 	sub	arg01, local01
226dc     54 95 02 F6 | 	mov	arg02, local02
226e0     53 95 02 F1 | 	add	arg02, local01
226e4     55 97 02 F6 | 	mov	arg03, local03
226e8     58 97 82 F1 | 	sub	arg03, local06
226ec     56 99 02 F6 | 	mov	arg04, local04
226f0     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
226f4                 | '   fastline(x0-y,x0+y,y0+x,c)
226f4     54 93 02 F6 | 	mov	arg01, local02
226f8     53 93 82 F1 | 	sub	arg01, local01
226fc     54 95 02 F6 | 	mov	arg02, local02
22700     53 95 02 F1 | 	add	arg02, local01
22704     55 97 02 F6 | 	mov	arg03, local03
22708     58 97 02 F1 | 	add	arg03, local06
2270c     56 99 02 F6 | 	mov	arg04, local04
22710     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
22714                 | '   if d>0 
22714     01 AE 56 F2 | 	cmps	local05, #1 wc
22718     18 00 90 CD |  if_b	jmp	#LR__2791
2271c                 | '     d+=da
2271c     5A AF 02 F1 | 	add	local05, local08
22720                 | '     y-=1
22720     01 A6 86 F1 | 	sub	local01, #1
22724                 | '     x+=1
22724     01 B0 06 F1 | 	add	local06, #1
22728                 | '     da+=4*4
22728     10 B4 06 F1 | 	add	local08, #16
2272c                 | '     db+=2*4
2272c     08 B2 06 F1 | 	add	local07, #8
22730     58 FF 9F FD | 	jmp	#LR__2790
22734                 | LR__2791
22734                 | '   else
22734                 | '     d+=db
22734     59 AF 02 F1 | 	add	local05, local07
22738                 | '     x+=1
22738     01 B0 06 F1 | 	add	local06, #1
2273c                 | '     da+=2*4
2273c     08 B4 06 F1 | 	add	local08, #8
22740                 | '     db+=2*4
22740     08 B2 06 F1 | 	add	local07, #8
22744     44 FF 9F FD | 	jmp	#LR__2790
22748                 | LR__2792
22748     E7 F0 03 F6 | 	mov	ptra, fp
2274c     F2 00 A0 FD | 	call	#popregs_
22750                 | _hg010b_spin2_fcircle_ret
22750     2D 00 64 FD | 	ret
22754                 | 
22754                 | '  
22754                 | ' '-- A circle ------------------------------------------------------------ 
22754                 | '  
22754                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
22754                 | _hg010b_spin2_circle
22754     08 CA 05 F6 | 	mov	COUNT_, #8
22758     E8 00 A0 FD | 	call	#pushregs_
2275c     4B A7 02 F6 | 	mov	local01, arg03
22760     FF FF 7F FF 
22764     FE A7 06 FD | 	qmul	local01, ##-2
22768     49 A9 02 F6 | 	mov	local02, arg01
2276c     4A AB 02 F6 | 	mov	local03, arg02
22770     4C AD 02 F6 | 	mov	local04, arg04
22774                 | ' 
22774                 | '  
22774                 | ' d:=5-4*r
22774     53 99 02 F6 | 	mov	arg04, local01
22778     02 98 66 F0 | 	shl	arg04, #2
2277c     05 AE 06 F6 | 	mov	local05, #5
22780     4C AF 82 F1 | 	sub	local05, arg04
22784                 | ' x:=0
22784     00 B0 06 F6 | 	mov	local06, #0
22788                 | ' y:=r
22788                 | ' da:=(-2*r+5)*4
22788                 | ' db:=3*4
22788     0C B2 06 F6 | 	mov	local07, #12
2278c                 | ' repeat while (x<=y) 
2278c     18 B4 62 FD | 	getqx	local08
22790     05 B4 06 F1 | 	add	local08, #5
22794     02 B4 66 F0 | 	shl	local08, #2
22798                 | LR__2800
22798     53 B1 5A F2 | 	cmps	local06, local01 wcz
2279c     F4 00 90 1D |  if_a	jmp	#LR__2802
227a0                 | '   putpixel(x0-x,y0-y,c)
227a0     54 93 02 F6 | 	mov	arg01, local02
227a4     58 93 82 F1 | 	sub	arg01, local06
227a8     55 95 02 F6 | 	mov	arg02, local03
227ac     53 95 82 F1 | 	sub	arg02, local01
227b0     56 97 02 F6 | 	mov	arg03, local04
227b4     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
227b8                 | '   putpixel(x0-x,y0+y,c)
227b8     54 93 02 F6 | 	mov	arg01, local02
227bc     58 93 82 F1 | 	sub	arg01, local06
227c0     55 95 02 F6 | 	mov	arg02, local03
227c4     53 95 02 F1 | 	add	arg02, local01
227c8     56 97 02 F6 | 	mov	arg03, local04
227cc     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
227d0                 | '   putpixel(x0+x,y0-y,c)
227d0     54 93 02 F6 | 	mov	arg01, local02
227d4     58 93 02 F1 | 	add	arg01, local06
227d8     55 95 02 F6 | 	mov	arg02, local03
227dc     53 95 82 F1 | 	sub	arg02, local01
227e0     56 97 02 F6 | 	mov	arg03, local04
227e4     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
227e8                 | '   putpixel(x0+x,y0+y,c)
227e8     54 93 02 F6 | 	mov	arg01, local02
227ec     58 93 02 F1 | 	add	arg01, local06
227f0     55 95 02 F6 | 	mov	arg02, local03
227f4     53 95 02 F1 | 	add	arg02, local01
227f8     56 97 02 F6 | 	mov	arg03, local04
227fc     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
22800                 | '   putpixel(x0-y,y0-x,c)
22800     54 93 02 F6 | 	mov	arg01, local02
22804     53 93 82 F1 | 	sub	arg01, local01
22808     55 95 02 F6 | 	mov	arg02, local03
2280c     58 95 82 F1 | 	sub	arg02, local06
22810     56 97 02 F6 | 	mov	arg03, local04
22814     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
22818                 | '   putpixel(x0-y,y0+x,c)
22818     54 93 02 F6 | 	mov	arg01, local02
2281c     53 93 82 F1 | 	sub	arg01, local01
22820     55 95 02 F6 | 	mov	arg02, local03
22824     58 95 02 F1 | 	add	arg02, local06
22828     56 97 02 F6 | 	mov	arg03, local04
2282c     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
22830                 | '   putpixel(x0+y,y0-x,c)
22830     54 93 02 F6 | 	mov	arg01, local02
22834     53 93 02 F1 | 	add	arg01, local01
22838     55 95 02 F6 | 	mov	arg02, local03
2283c     58 95 82 F1 | 	sub	arg02, local06
22840     56 97 02 F6 | 	mov	arg03, local04
22844     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
22848                 | '   putpixel(x0+y,y0+x,c)
22848     54 93 02 F6 | 	mov	arg01, local02
2284c     53 93 02 F1 | 	add	arg01, local01
22850     55 95 02 F6 | 	mov	arg02, local03
22854     58 95 02 F1 | 	add	arg02, local06
22858     56 97 02 F6 | 	mov	arg03, local04
2285c     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
22860                 | '   if d>0 
22860     01 AE 56 F2 | 	cmps	local05, #1 wc
22864     18 00 90 CD |  if_b	jmp	#LR__2801
22868                 | '     d+=da
22868     5A AF 02 F1 | 	add	local05, local08
2286c                 | '     y-=1
2286c     01 A6 86 F1 | 	sub	local01, #1
22870                 | '     x+=1
22870     01 B0 06 F1 | 	add	local06, #1
22874                 | '     da+=4*4
22874     10 B4 06 F1 | 	add	local08, #16
22878                 | '     db+=2*4
22878     08 B2 06 F1 | 	add	local07, #8
2287c     18 FF 9F FD | 	jmp	#LR__2800
22880                 | LR__2801
22880                 | '   else
22880                 | '     d+=db
22880     59 AF 02 F1 | 	add	local05, local07
22884                 | '     x+=1
22884     01 B0 06 F1 | 	add	local06, #1
22888                 | '     da+=2*4
22888     08 B4 06 F1 | 	add	local08, #8
2288c                 | '     db+=2*4
2288c     08 B2 06 F1 | 	add	local07, #8
22890     04 FF 9F FD | 	jmp	#LR__2800
22894                 | LR__2802
22894     E7 F0 03 F6 | 	mov	ptra, fp
22898     F2 00 A0 FD | 	call	#popregs_
2289c                 | _hg010b_spin2_circle_ret
2289c     2D 00 64 FD | 	ret
228a0                 | 
228a0                 | '     
228a0                 | ' '-- A frame (an empty rectangle) ---------------------------------------
228a0                 | ' 
228a0                 | ' pub frame(x1,y1,x2,y2,c)
228a0                 | _hg010b_spin2_frame
228a0     05 CA 05 F6 | 	mov	COUNT_, #5
228a4     E8 00 A0 FD | 	call	#pushregs_
228a8     49 A7 02 F6 | 	mov	local01, arg01
228ac     4A A9 02 F6 | 	mov	local02, arg02
228b0     4B AB 02 F6 | 	mov	local03, arg03
228b4     4C AD 02 F6 | 	mov	local04, arg04
228b8     4D AF 02 F6 | 	mov	local05, arg05
228bc                 | ' 
228bc                 | ' fastline(x1,x2,y1,c)
228bc     53 93 02 F6 | 	mov	arg01, local01
228c0     55 95 02 F6 | 	mov	arg02, local03
228c4     54 97 02 F6 | 	mov	arg03, local02
228c8     57 99 02 F6 | 	mov	arg04, local05
228cc     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
228d0                 | ' fastline(x1,x2,y2,c)
228d0     53 93 02 F6 | 	mov	arg01, local01
228d4     55 95 02 F6 | 	mov	arg02, local03
228d8     56 97 02 F6 | 	mov	arg03, local04
228dc     57 99 02 F6 | 	mov	arg04, local05
228e0     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
228e4                 | ' line(x1,y1,x1,y2,c)
228e4     53 93 02 F6 | 	mov	arg01, local01
228e8     54 95 02 F6 | 	mov	arg02, local02
228ec     53 97 02 F6 | 	mov	arg03, local01
228f0     56 99 02 F6 | 	mov	arg04, local04
228f4     57 9B 02 F6 | 	mov	arg05, local05
228f8                 | ' draw(x1,y1,x2,y2,c)
228f8     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
228fc                 | ' line(x2,y1,x2,y2,c)
228fc     55 93 02 F6 | 	mov	arg01, local03
22900     54 95 02 F6 | 	mov	arg02, local02
22904     55 97 02 F6 | 	mov	arg03, local03
22908     56 99 02 F6 | 	mov	arg04, local04
2290c     57 9B 02 F6 | 	mov	arg05, local05
22910                 | ' draw(x1,y1,x2,y2,c)
22910     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
22914     E7 F0 03 F6 | 	mov	ptra, fp
22918     F2 00 A0 FD | 	call	#popregs_
2291c                 | _hg010b_spin2_frame_ret
2291c     2D 00 64 FD | 	ret
22920                 | 
22920                 | ' 
22920                 | ' '-- A box (a filled rectangle) ----------------------------------------
22920                 | ' 
22920                 | ' pub box(x1,y1,x2,y2,c) |yy
22920                 | _hg010b_spin2_box
22920     06 CA 05 F6 | 	mov	COUNT_, #6
22924     E8 00 A0 FD | 	call	#pushregs_
22928     49 A7 02 F6 | 	mov	local01, arg01
2292c     4A A9 02 F6 | 	mov	local02, arg02
22930     4B AB 02 F6 | 	mov	local03, arg03
22934     4C AD 02 F6 | 	mov	local04, arg04
22938     4D AF 02 F6 | 	mov	local05, arg05
2293c                 | ' 
2293c                 | ' repeat yy from y1 to y2
2293c     54 AD 52 F2 | 	cmps	local04, local02 wc
22940     01 B0 86 F6 | 	negc	local06, #1
22944     58 AD 02 F1 | 	add	local04, local06
22948                 | LR__2810
22948                 | '   fastline(x1,x2,yy,c)
22948     53 93 02 F6 | 	mov	arg01, local01
2294c     55 95 02 F6 | 	mov	arg02, local03
22950     57 99 02 F6 | 	mov	arg04, local05
22954     54 97 02 F6 | 	mov	arg03, local02
22958     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
2295c     58 A9 02 F1 | 	add	local02, local06
22960     56 A9 0A F2 | 	cmp	local02, local04 wz
22964     E0 FF 9F 5D |  if_ne	jmp	#LR__2810
22968     E7 F0 03 F6 | 	mov	ptra, fp
2296c     F2 00 A0 FD | 	call	#popregs_
22970                 | _hg010b_spin2_box_ret
22970     2D 00 64 FD | 	ret
22974                 | 
22974                 | '       
22974                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
22974                 | _hg010b_spin2_putcharxycgf
22974                 | ' 
22974                 | '  
22974                 | ' repeat yy from 0 to 15
22974     00 80 06 F6 | 	mov	_var01, #0
22978     D7 8A 48 FB | 	callpa	#(@LR__2822-@LR__2820)>>2,fcache_load_ptr_
2297c                 | LR__2820
2297c                 | ' 
2297c                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
2297c     95 64 06 F1 | 	add	objptr, #149
22980     32 83 02 FB | 	rdlong	_var02, objptr
22984     0A 82 66 F0 | 	shl	_var02, #10
22988     37 85 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
2298c     41 85 02 F1 | 	add	_var03, _var02
22990     4B 83 02 F6 | 	mov	_var02, arg03
22994     04 82 66 F0 | 	shl	_var02, #4
22998     41 85 02 F1 | 	add	_var03, _var02
2299c     40 85 02 F1 | 	add	_var03, _var01
229a0     42 85 C2 FA | 	rdbyte	_var03, _var03
229a4                 | '   asm
229a4     00 84 0E F4 | 	testb	_var03, #0 wz
229a8     4C 87 C2 A8 |  if_e	setbyte	_var04, arg04, #0
229ac     4D 87 C2 58 |  if_ne	setbyte	_var04, arg05, #0
229b0     01 84 0E F4 | 	testb	_var03, #1 wz
229b4     4C 87 CA A8 |  if_e	setbyte	_var04, arg04, #1
229b8     4D 87 CA 58 |  if_ne	setbyte	_var04, arg05, #1
229bc     02 84 0E F4 | 	testb	_var03, #2 wz
229c0     4C 87 D2 A8 |  if_e	setbyte	_var04, arg04, #2
229c4     4D 87 D2 58 |  if_ne	setbyte	_var04, arg05, #2
229c8     03 84 0E F4 | 	testb	_var03, #3 wz
229cc     4C 87 DA A8 |  if_e	setbyte	_var04, arg04, #3
229d0     4D 87 DA 58 |  if_ne	setbyte	_var04, arg05, #3
229d4     04 84 0E F4 | 	testb	_var03, #4 wz
229d8     4C 89 C2 A8 |  if_e	setbyte	_var05, arg04, #0
229dc     4D 89 C2 58 |  if_ne	setbyte	_var05, arg05, #0
229e0     05 84 0E F4 | 	testb	_var03, #5 wz
229e4     4C 89 CA A8 |  if_e	setbyte	_var05, arg04, #1
229e8     4D 89 CA 58 |  if_ne	setbyte	_var05, arg05, #1
229ec     06 84 0E F4 | 	testb	_var03, #6 wz
229f0     4C 89 D2 A8 |  if_e	setbyte	_var05, arg04, #2
229f4     4D 89 D2 58 |  if_ne	setbyte	_var05, arg05, #2
229f8     07 84 0E F4 | 	testb	_var03, #7 wz
229fc     4C 89 DA A8 |  if_e	setbyte	_var05, arg04, #3
22a00     4D 89 DA 58 |  if_ne	setbyte	_var05, arg05, #3
22a04                 | '   
22a04                 | '   ccc[0]:=c1
22a04     99 65 06 F1 | 	add	objptr, #409
22a08     32 87 62 FC | 	wrlong	_var04, objptr
22a0c                 | '   ccc[1]:=c2 
22a0c     04 64 06 F1 | 	add	objptr, #4
22a10     32 89 62 FC | 	wrlong	_var05, objptr
22a14                 | '   long[mailbox0][2]:=8
22a14     49 64 86 F1 | 	sub	objptr, #73
22a18     32 85 02 FB | 	rdlong	_var03, objptr
22a1c     08 84 06 F1 | 	add	_var03, #8
22a20     42 11 68 FC | 	wrlong	#8, _var03
22a24                 | '   long[mailbox0][1]:=@ccc
22a24     32 85 02 F6 | 	mov	_var03, objptr
22a28     45 84 06 F1 | 	add	_var03, #69
22a2c     32 83 02 FB | 	rdlong	_var02, objptr
22a30     04 82 06 F1 | 	add	_var02, #4
22a34     41 85 62 FC | 	wrlong	_var03, _var02
22a38                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
22a38     0C 65 86 F1 | 	sub	objptr, #268
22a3c     32 85 02 FB | 	rdlong	_var03, objptr
22a40     4A 83 02 F6 | 	mov	_var02, arg02
22a44     40 83 02 F1 | 	add	_var02, _var01
22a48     0A 82 66 F0 | 	shl	_var02, #10
22a4c     49 8B 02 F6 | 	mov	_var06, arg01
22a50     02 8A 66 F0 | 	shl	_var06, #2
22a54     45 83 02 F1 | 	add	_var02, _var06
22a58     41 85 02 F1 | 	add	_var03, _var02
22a5c     00 00 78 FF 
22a60     00 84 06 F1 | 	add	_var03, ##-268435456
22a64     0C 65 06 F1 | 	add	objptr, #268
22a68     32 8B 02 FB | 	rdlong	_var06, objptr
22a6c     45 85 62 FC | 	wrlong	_var03, _var06
22a70                 | '   repeat
22a70                 | LR__2821
22a70     32 85 02 FB | 	rdlong	_var03, objptr
22a74     42 83 02 FB | 	rdlong	_var02, _var03
22a78     00 82 56 F2 | 	cmps	_var02, #0 wc
22a7c     F0 FF 9F CD |  if_b	jmp	#LR__2821
22a80     E9 65 86 F1 | 	sub	objptr, #489
22a84     01 80 06 F1 | 	add	_var01, #1
22a88     10 80 56 F2 | 	cmps	_var01, #16 wc
22a8c     EC FE 9F CD |  if_b	jmp	#LR__2820
22a90                 | LR__2822
22a90                 | _hg010b_spin2_putcharxycgf_ret
22a90     2D 00 64 FD | 	ret
22a94                 | 
22a94                 | ' 
22a94                 | ' 
22a94                 | ' '**********************************************************************r***
22a94                 | ' '                                                                        *
22a94                 | ' ' Font related functions                                                 *
22a94                 | ' '                                                                        *
22a94                 | ' '*************************************************************************
22a94                 | ' 
22a94                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
22a94                 | ' 
22a94                 | ' pub setfontfamily(afontnum)
22a94                 | _hg010b_spin2_setfontfamily
22a94                 | ' 
22a94                 | ' font_family:=afontnum
22a94     95 64 06 F1 | 	add	objptr, #149
22a98     32 93 62 FC | 	wrlong	arg01, objptr
22a9c     95 64 86 F1 | 	sub	objptr, #149
22aa0                 | ' 'if afontnum==8
22aa0                 | ' '  font_ptr:=@amiga_font
22aa0                 | ' 
22aa0                 | ' if afontnum==4
22aa0     04 92 0E F2 | 	cmp	arg01, #4 wz
22aa4                 | '   font_ptr:=@st_font
22aa4     37 81 02 A6 |  if_e	mov	_var01, ptr__hg010b_spin2_dat__
22aa8     08 00 00 AF 
22aac     00 80 06 A1 |  if_e	add	_var01, ##4096
22ab0     08 64 06 A1 |  if_e	add	objptr, #8
22ab4     32 81 62 AC |  if_e	wrlong	_var01, objptr
22ab8     08 64 86 A1 |  if_e	sub	objptr, #8
22abc                 | ' if afontnum==0
22abc     00 92 0E F2 | 	cmp	arg01, #0 wz
22ac0                 | '   font_ptr:=@vga_font
22ac0     08 64 06 A1 |  if_e	add	objptr, #8
22ac4     32 6F 62 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
22ac8     08 64 86 A1 |  if_e	sub	objptr, #8
22acc                 | _hg010b_spin2_setfontfamily_ret
22acc     2D 00 64 FD | 	ret
22ad0                 | 
22ad0                 | ' 
22ad0                 | ' ''--------- Redefine a character
22ad0                 | ' 
22ad0                 | ' pub defchar(ch,ptr) | s,i ' 
22ad0                 | _hg010b_spin2_defchar
22ad0                 | ' 
22ad0                 | ' s:=font_ptr+ch*16
22ad0     08 64 06 F1 | 	add	objptr, #8
22ad4     32 81 02 FB | 	rdlong	_var01, objptr
22ad8     08 64 86 F1 | 	sub	objptr, #8
22adc     04 92 66 F0 | 	shl	arg01, #4
22ae0     49 81 02 F1 | 	add	_var01, arg01
22ae4                 | ' repeat i from 0 to 15
22ae4     00 82 06 F6 | 	mov	_var02, #0
22ae8     D7 12 48 FB | 	callpa	#(@LR__2831-@LR__2830)>>2,fcache_load_ptr_
22aec                 | LR__2830
22aec                 | '   byte[s+i]:=byte[ptr+i]
22aec     4A 93 02 F6 | 	mov	arg01, arg02
22af0     41 93 02 F1 | 	add	arg01, _var02
22af4     40 85 02 F6 | 	mov	_var03, _var01
22af8     49 93 C2 FA | 	rdbyte	arg01, arg01
22afc     41 85 02 F1 | 	add	_var03, _var02
22b00     42 93 42 FC | 	wrbyte	arg01, _var03
22b04     01 82 06 F1 | 	add	_var02, #1
22b08     10 82 56 F2 | 	cmps	_var02, #16 wc
22b0c     DC FF 9F CD |  if_b	jmp	#LR__2830
22b10                 | LR__2831
22b10                 | _hg010b_spin2_defchar_ret
22b10     2D 00 64 FD | 	ret
22b14                 | 
22b14                 | ' 
22b14                 | ' 
22b14                 | ' '*************************************************************************
22b14                 | ' '                                                                        *
22b14                 | ' '  Cursor functions                                                      *
22b14                 | ' '                                                                        *
22b14                 | ' '*************************************************************************
22b14                 | ' 
22b14                 | ' 
22b14                 | ' pub setcursorpos(x,y)
22b14                 | _hg010b_spin2_setcursorpos
22b14     01 CA 05 F6 | 	mov	COUNT_, #1
22b18     E8 00 A0 FD | 	call	#pushregs_
22b1c                 | ' 
22b1c                 | ' ''---------- Set the (x,y) position of cursor
22b1c                 | ' 
22b1c                 | ' cursor_x:=x
22b1c     3C 64 06 F1 | 	add	objptr, #60
22b20     32 93 52 FC | 	wrword	arg01, objptr
22b24                 | ' cursor_y:=y
22b24     02 64 06 F1 | 	add	objptr, #2
22b28     32 95 42 FC | 	wrbyte	arg02, objptr
22b2c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22b2c     02 64 86 F1 | 	sub	objptr, #2
22b30     32 A7 E2 FA | 	rdword	local01, objptr
22b34     02 A6 66 F0 | 	shl	local01, #2
22b38     4A 97 E2 F8 | 	getbyte	arg03, arg02, #0
22b3c     3C 64 86 F1 | 	sub	objptr, #60
22b40     04 96 66 F0 | 	shl	arg03, #4
22b44     04 96 06 F1 | 	add	arg03, #4
22b48     11 92 06 F6 | 	mov	arg01, #17
22b4c     53 95 02 F6 | 	mov	arg02, local01
22b50     0C F3 BF FD | 	call	#_hg010b_spin2_setspritepos
22b54     E7 F0 03 F6 | 	mov	ptra, fp
22b58     F2 00 A0 FD | 	call	#popregs_
22b5c                 | _hg010b_spin2_setcursorpos_ret
22b5c     2D 00 64 FD | 	ret
22b60                 | 
22b60                 | ' 
22b60                 | ' pub setcursorx(x)
22b60                 | _hg010b_spin2_setcursorx
22b60                 | ' cursor_x:=x
22b60     3C 64 06 F1 | 	add	objptr, #60
22b64     32 93 52 FC | 	wrword	arg01, objptr
22b68                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22b68     49 95 32 F9 | 	getword	arg02, arg01, #0
22b6c     02 94 66 F0 | 	shl	arg02, #2
22b70     02 64 06 F1 | 	add	objptr, #2
22b74     32 97 C2 FA | 	rdbyte	arg03, objptr
22b78     3E 64 86 F1 | 	sub	objptr, #62
22b7c     04 96 66 F0 | 	shl	arg03, #4
22b80     04 96 06 F1 | 	add	arg03, #4
22b84     11 92 06 F6 | 	mov	arg01, #17
22b88     D4 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
22b8c                 | _hg010b_spin2_setcursorx_ret
22b8c     2D 00 64 FD | 	ret
22b90                 | 
22b90                 | ' 
22b90                 | ' pub setcursory(y) 
22b90                 | _hg010b_spin2_setcursory
22b90                 | ' cursor_y:=y
22b90     3E 64 06 F1 | 	add	objptr, #62
22b94     32 93 42 FC | 	wrbyte	arg01, objptr
22b98                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
22b98     02 64 86 F1 | 	sub	objptr, #2
22b9c     32 95 E2 FA | 	rdword	arg02, objptr
22ba0     02 94 66 F0 | 	shl	arg02, #2
22ba4     49 97 E2 F8 | 	getbyte	arg03, arg01, #0
22ba8     3C 64 86 F1 | 	sub	objptr, #60
22bac     04 96 66 F0 | 	shl	arg03, #4
22bb0     04 96 06 F1 | 	add	arg03, #4
22bb4     11 92 06 F6 | 	mov	arg01, #17
22bb8     A4 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
22bbc                 | _hg010b_spin2_setcursory_ret
22bbc     2D 00 64 FD | 	ret
22bc0                 | 
22bc0                 | ' 
22bc0                 | ' '*************************************************************************
22bc0                 | ' '                                                                        *
22bc0                 | ' '  VBlank functions                                                      *
22bc0                 | ' '                                                                        *
22bc0                 | ' '*************************************************************************
22bc0                 | ' 
22bc0                 | ' pub waitvbl(amount) | i
22bc0                 | _hg010b_spin2_waitvbl
22bc0     03 CA 05 F6 | 	mov	COUNT_, #3
22bc4     E8 00 A0 FD | 	call	#pushregs_
22bc8     49 A7 02 F6 | 	mov	local01, arg01
22bcc                 | ' 
22bcc                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
22bcc                 | ' 
22bcc                 | ' repeat i from 1 to amount
22bcc     01 A8 06 F6 | 	mov	local02, #1
22bd0     01 A6 56 F2 | 	cmps	local01, #1 wc
22bd4     01 AA 86 F6 | 	negc	local03, #1
22bd8     55 A7 02 F1 | 	add	local01, local03
22bdc                 | LR__2840
22bdc                 | '   repeat until vblank==0
22bdc                 | LR__2841
22bdc     49 64 06 F1 | 	add	objptr, #73
22be0     32 93 0A FB | 	rdlong	arg01, objptr wz
22be4     49 64 86 F1 | 	sub	objptr, #73
22be8     0C 00 90 AD |  if_e	jmp	#LR__2842
22bec                 | '     waitus(100)
22bec     64 92 06 F6 | 	mov	arg01, #100
22bf0     10 23 B0 FD | 	call	#__system___waitus
22bf4     E4 FF 9F FD | 	jmp	#LR__2841
22bf8                 | LR__2842
22bf8                 | '   repeat until vblank==1
22bf8                 | LR__2843
22bf8     49 64 06 F1 | 	add	objptr, #73
22bfc     32 93 02 FB | 	rdlong	arg01, objptr
22c00     49 64 86 F1 | 	sub	objptr, #73
22c04     01 92 0E F2 | 	cmp	arg01, #1 wz
22c08     0C 00 90 AD |  if_e	jmp	#LR__2844
22c0c                 | '     waitus(100)
22c0c     64 92 06 F6 | 	mov	arg01, #100
22c10     F0 22 B0 FD | 	call	#__system___waitus
22c14     E0 FF 9F FD | 	jmp	#LR__2843
22c18                 | LR__2844
22c18     55 A9 02 F1 | 	add	local02, local03
22c1c     53 A9 0A F2 | 	cmp	local02, local01 wz
22c20     B8 FF 9F 5D |  if_ne	jmp	#LR__2840
22c24     E7 F0 03 F6 | 	mov	ptra, fp
22c28     F2 00 A0 FD | 	call	#popregs_
22c2c                 | _hg010b_spin2_waitvbl_ret
22c2c     2D 00 64 FD | 	ret
22c30                 | 
22c30                 | ' 
22c30                 | ' ''---------- Set color #c in palette to r,g,b
22c30                 | ' 
22c30                 | ' pub setcolor(c,r,g,b)  |cc
22c30                 | _hg010b_spin2_setcolor
22c30                 | ' 
22c30                 | ' cc:=r<<24+g<<16+b<<8
22c30     18 94 66 F0 | 	shl	arg02, #24
22c34     10 96 66 F0 | 	shl	arg03, #16
22c38     4B 95 02 F1 | 	add	arg02, arg03
22c3c     08 98 66 F0 | 	shl	arg04, #8
22c40     4C 95 02 F1 | 	add	arg02, arg04
22c44                 | ' long[palette_ptr+4*c]:=cc
22c44     1C 64 06 F1 | 	add	objptr, #28
22c48     32 99 02 FB | 	rdlong	arg04, objptr
22c4c     1C 64 86 F1 | 	sub	objptr, #28
22c50     02 92 66 F0 | 	shl	arg01, #2
22c54     49 99 02 F1 | 	add	arg04, arg01
22c58     4C 95 62 FC | 	wrlong	arg02, arg04
22c5c                 | _hg010b_spin2_setcolor_ret
22c5c     2D 00 64 FD | 	ret
22c60                 | 
22c60                 | ' 
22c60                 | ' 
22c60                 | ' pub cls(fc,bc)   :c,i
22c60                 | _hg010b_spin2_cls
22c60     02 CA 05 F6 | 	mov	COUNT_, #2
22c64     E8 00 A0 FD | 	call	#pushregs_
22c68     49 A7 02 F6 | 	mov	local01, arg01
22c6c     4A A9 02 F6 | 	mov	local02, arg02
22c70                 | ' 
22c70                 | ' c:=bc
22c70                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
22c70     DD 64 06 F1 | 	add	objptr, #221
22c74     32 93 02 FB | 	rdlong	arg01, objptr
22c78     A5 64 86 F1 | 	sub	objptr, #165
22c7c     32 97 02 FB | 	rdlong	arg03, objptr
22c80     02 96 66 F0 | 	shl	arg03, #2
22c84     54 95 02 F6 | 	mov	arg02, local02
22c88     00 98 06 F6 | 	mov	arg04, #0
22c8c     01 9A 06 F6 | 	mov	arg05, #1
22c90     0B 00 00 FF 
22c94     94 64 06 F1 | 	add	objptr, ##5780
22c98     C8 10 B0 FD | 	call	#_psram_spin2_fill
22c9c                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
22c9c     0B 00 00 FF 
22ca0     C8 64 86 F1 | 	sub	objptr, ##5832
22ca4     32 93 02 FB | 	rdlong	arg01, objptr
22ca8     04 64 86 F1 | 	sub	objptr, #4
22cac     32 97 02 FB | 	rdlong	arg03, objptr
22cb0     49 97 82 F1 | 	sub	arg03, arg01
22cb4     20 94 06 F6 | 	mov	arg02, #32
22cb8     00 98 06 F6 | 	mov	arg04, #0
22cbc     01 9A 06 F6 | 	mov	arg05, #1
22cc0     0B 00 00 FF 
22cc4     CC 64 06 F1 | 	add	objptr, ##5836
22cc8     98 10 B0 FD | 	call	#_psram_spin2_fill
22ccc                 | ' setwritecolors(fc,bc)
22ccc                 | ' 
22ccc                 | ' write_color:=ff
22ccc     0B 00 00 FF 
22cd0     8B 64 86 F1 | 	sub	objptr, ##5771
22cd4     32 A7 62 FC | 	wrlong	local01, objptr
22cd8                 | ' write_background:=bb
22cd8     04 64 06 F1 | 	add	objptr, #4
22cdc     32 A9 62 FC | 	wrlong	local02, objptr
22ce0                 | ' cursor_x:=0
22ce0     09 64 86 F1 | 	sub	objptr, #9
22ce4     32 01 58 FC | 	wrword	#0, objptr
22ce8                 | ' cursor_y:=0
22ce8     02 64 06 F1 | 	add	objptr, #2
22cec     32 01 48 FC | 	wrbyte	#0, objptr
22cf0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22cf0     02 64 86 F1 | 	sub	objptr, #2
22cf4     32 95 E2 FA | 	rdword	arg02, objptr
22cf8     02 94 66 F0 | 	shl	arg02, #2
22cfc     3C 64 86 F1 | 	sub	objptr, #60
22d00     04 96 06 F6 | 	mov	arg03, #4
22d04     11 92 06 F6 | 	mov	arg01, #17
22d08     54 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
22d0c                 | ' setcursorcolor(fc)
22d0c     53 93 02 F6 | 	mov	arg01, local01
22d10     60 ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
22d14     54 7B 02 F6 | 	mov	result1, local02
22d18     00 7C 06 F6 | 	mov	result2, #0
22d1c     E7 F0 03 F6 | 	mov	ptra, fp
22d20     F2 00 A0 FD | 	call	#popregs_
22d24                 | _hg010b_spin2_cls_ret
22d24     2D 00 64 FD | 	ret
22d28                 | 
22d28                 | ' 
22d28                 | ' ''---------- Output a char at the cursor position, move the cursor 
22d28                 | ' 
22d28                 | ' pub putchar(achar) | c,x,y,l,newcpl
22d28                 | _hg010b_spin2_putchar
22d28     02 CA 05 F6 | 	mov	COUNT_, #2
22d2c     E8 00 A0 FD | 	call	#pushregs_
22d30     49 A7 02 F6 | 	mov	local01, arg01
22d34                 | ' 
22d34                 | ' if achar==10
22d34     0A A6 0E F2 | 	cmp	local01, #10 wz
22d38                 | '   crlf()
22d38     78 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
22d3c                 | ' if achar==9
22d3c     09 A6 0E F2 | 	cmp	local01, #9 wz
22d40     18 00 90 5D |  if_ne	jmp	#LR__2850
22d44                 | '   cursor_x:=(cursor_x& %11110000)+16
22d44     3C 64 06 F1 | 	add	objptr, #60
22d48     32 97 E2 FA | 	rdword	arg03, objptr
22d4c     F0 96 06 F5 | 	and	arg03, #240
22d50     10 96 06 F1 | 	add	arg03, #16
22d54     32 97 52 FC | 	wrword	arg03, objptr
22d58     3C 64 86 F1 | 	sub	objptr, #60
22d5c                 | LR__2850
22d5c                 | '   
22d5c                 | ' if (achar<>9) && (achar<>10) 
22d5c     09 A6 0E F2 | 	cmp	local01, #9 wz
22d60     0A A6 0E 52 |  if_ne	cmp	local01, #10 wz
22d64     A8 00 90 AD |  if_e	jmp	#LR__2851
22d68                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
22d68     3C 64 06 F1 | 	add	objptr, #60
22d6c     32 93 E2 FA | 	rdword	arg01, objptr
22d70     02 64 06 F1 | 	add	objptr, #2
22d74     32 95 C2 FA | 	rdbyte	arg02, objptr
22d78     04 94 66 F0 | 	shl	arg02, #4
22d7c     04 94 06 F1 | 	add	arg02, #4
22d80     03 64 06 F1 | 	add	objptr, #3
22d84     32 99 02 FB | 	rdlong	arg04, objptr
22d88     04 64 06 F1 | 	add	objptr, #4
22d8c     32 9B 02 FB | 	rdlong	arg05, objptr
22d90     45 64 86 F1 | 	sub	objptr, #69
22d94     53 97 02 F6 | 	mov	arg03, local01
22d98     D8 FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
22d9c     04 64 06 F1 | 	add	objptr, #4
22da0     32 93 02 FB | 	rdlong	arg01, objptr
22da4     1C 00 00 FF 
22da8     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
22dac     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
22db0     3A 64 06 F1 | 	add	objptr, #58
22db4     32 9B C2 FA | 	rdbyte	arg05, objptr
22db8     4D 97 02 FD | 	qmul	arg03, arg05
22dbc                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
22dbc     1C 00 00 FF 
22dc0     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
22dc4     02 64 86 F1 | 	sub	objptr, #2
22dc8     32 A9 E2 FA | 	rdword	local02, objptr
22dcc     01 A8 46 F0 | 	shr	local02, #1
22dd0     53 95 02 F6 | 	mov	arg02, local01
22dd4     01 96 06 F6 | 	mov	arg03, #1
22dd8     00 98 06 F6 | 	mov	arg04, #0
22ddc     01 9A 06 F6 | 	mov	arg05, #1
22de0     0B 00 00 FF 
22de4     90 64 06 F1 | 	add	objptr, ##5776
22de8     18 A6 62 FD | 	getqx	local01
22dec     54 A7 02 F1 | 	add	local01, local02
22df0     53 93 02 F1 | 	add	arg01, local01
22df4     6C 0F B0 FD | 	call	#_psram_spin2_fill
22df8                 | '   cursor_x+=2
22df8     0B 00 00 FF 
22dfc     90 64 86 F1 | 	sub	objptr, ##5776
22e00     32 A9 E2 FA | 	rdword	local02, objptr
22e04     02 A8 06 F1 | 	add	local02, #2
22e08     32 A9 52 FC | 	wrword	local02, objptr
22e0c     3C 64 86 F1 | 	sub	objptr, #60
22e10                 | LR__2851
22e10                 | ' 
22e10                 | ' if cursor_x>=256
22e10     3C 64 06 F1 | 	add	objptr, #60
22e14     32 A9 E2 FA | 	rdword	local02, objptr
22e18     3C 64 86 F1 | 	sub	objptr, #60
22e1c     00 A9 56 F2 | 	cmps	local02, #256 wc
22e20     64 00 90 CD |  if_b	jmp	#LR__2853
22e24                 | '   cursor_x:=0
22e24     3C 64 06 F1 | 	add	objptr, #60
22e28     32 01 58 FC | 	wrword	#0, objptr
22e2c                 | '   cursor_y+=1
22e2c     02 64 06 F1 | 	add	objptr, #2
22e30     32 A9 C2 FA | 	rdbyte	local02, objptr
22e34     01 A8 06 F1 | 	add	local02, #1
22e38     32 A9 42 FC | 	wrbyte	local02, objptr
22e3c                 | '   if cursor_y>st_lines-1
22e3c     C3 64 06 F1 | 	add	objptr, #195
22e40     32 A9 02 FB | 	rdlong	local02, objptr
22e44     01 A8 86 F1 | 	sub	local02, #1
22e48     C3 64 86 F1 | 	sub	objptr, #195
22e4c     32 97 C2 FA | 	rdbyte	arg03, objptr
22e50     3E 64 86 F1 | 	sub	objptr, #62
22e54     54 97 5A F2 | 	cmps	arg03, local02 wcz
22e58     2C 00 90 ED |  if_be	jmp	#LR__2852
22e5c                 | '     scrollup2()
22e5c     00 92 06 F6 | 	mov	arg01, #0
22e60     01 00 00 FF 
22e64     58 94 06 F6 | 	mov	arg02, ##600
22e68     10 96 06 F6 | 	mov	arg03, #16
22e6c     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
22e70                 | '     cursor_y:=st_lines-1
22e70     01 65 06 F1 | 	add	objptr, #257
22e74     32 A9 02 FB | 	rdlong	local02, objptr
22e78     01 A8 86 F1 | 	sub	local02, #1
22e7c     C3 64 86 F1 | 	sub	objptr, #195
22e80     32 A9 42 FC | 	wrbyte	local02, objptr
22e84     3E 64 86 F1 | 	sub	objptr, #62
22e88                 | LR__2852
22e88                 | LR__2853
22e88                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22e88     3C 64 06 F1 | 	add	objptr, #60
22e8c     32 95 E2 FA | 	rdword	arg02, objptr
22e90     02 94 66 F0 | 	shl	arg02, #2
22e94     02 64 06 F1 | 	add	objptr, #2
22e98     32 97 C2 FA | 	rdbyte	arg03, objptr
22e9c     3E 64 86 F1 | 	sub	objptr, #62
22ea0     04 96 66 F0 | 	shl	arg03, #4
22ea4     04 96 06 F1 | 	add	arg03, #4
22ea8     11 92 06 F6 | 	mov	arg01, #17
22eac     B0 EF BF FD | 	call	#_hg010b_spin2_setspritepos
22eb0     E7 F0 03 F6 | 	mov	ptra, fp
22eb4     F2 00 A0 FD | 	call	#popregs_
22eb8                 | _hg010b_spin2_putchar_ret
22eb8     2D 00 64 FD | 	ret
22ebc                 | 
22ebc                 | '     
22ebc                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
22ebc                 | ' 
22ebc                 | ' pub putchar2(achar) | c,x,y,l,newcpl
22ebc                 | _hg010b_spin2_putchar2
22ebc     02 CA 05 F6 | 	mov	COUNT_, #2
22ec0     E8 00 A0 FD | 	call	#pushregs_
22ec4     49 A7 02 F6 | 	mov	local01, arg01
22ec8                 | ' 
22ec8                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
22ec8     3C 64 06 F1 | 	add	objptr, #60
22ecc     32 93 E2 FA | 	rdword	arg01, objptr
22ed0     02 64 06 F1 | 	add	objptr, #2
22ed4     32 95 C2 FA | 	rdbyte	arg02, objptr
22ed8     04 94 66 F0 | 	shl	arg02, #4
22edc     04 94 06 F1 | 	add	arg02, #4
22ee0     03 64 06 F1 | 	add	objptr, #3
22ee4     32 99 02 FB | 	rdlong	arg04, objptr
22ee8     04 64 06 F1 | 	add	objptr, #4
22eec     32 9B 02 FB | 	rdlong	arg05, objptr
22ef0     45 64 86 F1 | 	sub	objptr, #69
22ef4     53 97 02 F6 | 	mov	arg03, local01
22ef8     78 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
22efc     04 64 06 F1 | 	add	objptr, #4
22f00     32 93 02 FB | 	rdlong	arg01, objptr
22f04     1C 00 00 FF 
22f08     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
22f0c     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
22f10     3A 64 06 F1 | 	add	objptr, #58
22f14     32 9B C2 FA | 	rdbyte	arg05, objptr
22f18     4D 97 02 FD | 	qmul	arg03, arg05
22f1c                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
22f1c     1C 00 00 FF 
22f20     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
22f24     02 64 86 F1 | 	sub	objptr, #2
22f28     32 A9 E2 FA | 	rdword	local02, objptr
22f2c     01 A8 46 F0 | 	shr	local02, #1
22f30     53 95 02 F6 | 	mov	arg02, local01
22f34     01 96 06 F6 | 	mov	arg03, #1
22f38     00 98 06 F6 | 	mov	arg04, #0
22f3c     01 9A 06 F6 | 	mov	arg05, #1
22f40     0B 00 00 FF 
22f44     90 64 06 F1 | 	add	objptr, ##5776
22f48     18 A6 62 FD | 	getqx	local01
22f4c     54 A7 02 F1 | 	add	local01, local02
22f50     53 93 02 F1 | 	add	arg01, local01
22f54     0C 0E B0 FD | 	call	#_psram_spin2_fill
22f58                 | ' 
22f58                 | ' cursor_x+=2
22f58     0B 00 00 FF 
22f5c     90 64 86 F1 | 	sub	objptr, ##5776
22f60     32 A9 E2 FA | 	rdword	local02, objptr
22f64     02 A8 06 F1 | 	add	local02, #2
22f68     32 A9 52 FC | 	wrword	local02, objptr
22f6c                 | ' if cursor_x>=256
22f6c     54 A9 32 F9 | 	getword	local02, local02, #0
22f70     3C 64 86 F1 | 	sub	objptr, #60
22f74     00 A9 56 F2 | 	cmps	local02, #256 wc
22f78     64 00 90 CD |  if_b	jmp	#LR__2861
22f7c                 | '   cursor_x:=0
22f7c     3C 64 06 F1 | 	add	objptr, #60
22f80     32 01 58 FC | 	wrword	#0, objptr
22f84                 | '   cursor_y+=1
22f84     02 64 06 F1 | 	add	objptr, #2
22f88     32 A9 C2 FA | 	rdbyte	local02, objptr
22f8c     01 A8 06 F1 | 	add	local02, #1
22f90     32 A9 42 FC | 	wrbyte	local02, objptr
22f94                 | '   if cursor_y>st_lines-1
22f94     C3 64 06 F1 | 	add	objptr, #195
22f98     32 A9 02 FB | 	rdlong	local02, objptr
22f9c     01 A8 86 F1 | 	sub	local02, #1
22fa0     C3 64 86 F1 | 	sub	objptr, #195
22fa4     32 97 C2 FA | 	rdbyte	arg03, objptr
22fa8     3E 64 86 F1 | 	sub	objptr, #62
22fac     54 97 5A F2 | 	cmps	arg03, local02 wcz
22fb0     2C 00 90 ED |  if_be	jmp	#LR__2860
22fb4                 | '     scrollup2()
22fb4     00 92 06 F6 | 	mov	arg01, #0
22fb8     01 00 00 FF 
22fbc     58 94 06 F6 | 	mov	arg02, ##600
22fc0     10 96 06 F6 | 	mov	arg03, #16
22fc4     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
22fc8                 | '     cursor_y:=st_lines-1
22fc8     01 65 06 F1 | 	add	objptr, #257
22fcc     32 A9 02 FB | 	rdlong	local02, objptr
22fd0     01 A8 86 F1 | 	sub	local02, #1
22fd4     C3 64 86 F1 | 	sub	objptr, #195
22fd8     32 A9 42 FC | 	wrbyte	local02, objptr
22fdc     3E 64 86 F1 | 	sub	objptr, #62
22fe0                 | LR__2860
22fe0                 | LR__2861
22fe0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
22fe0     3C 64 06 F1 | 	add	objptr, #60
22fe4     32 95 E2 FA | 	rdword	arg02, objptr
22fe8     02 94 66 F0 | 	shl	arg02, #2
22fec     02 64 06 F1 | 	add	objptr, #2
22ff0     32 97 C2 FA | 	rdbyte	arg03, objptr
22ff4     3E 64 86 F1 | 	sub	objptr, #62
22ff8     04 96 66 F0 | 	shl	arg03, #4
22ffc     04 96 06 F1 | 	add	arg03, #4
23000     11 92 06 F6 | 	mov	arg01, #17
23004     58 EE BF FD | 	call	#_hg010b_spin2_setspritepos
23008     E7 F0 03 F6 | 	mov	ptra, fp
2300c     F2 00 A0 FD | 	call	#popregs_
23010                 | _hg010b_spin2_putchar2_ret
23010     2D 00 64 FD | 	ret
23014                 | 
23014                 | ' ''--------- Output a string at the cursor position, move the cursor  
23014                 | ' 
23014                 | ' pub write(text) | iii,c,ncx,ncy
23014                 | _hg010b_spin2_write
23014     04 CA 05 F6 | 	mov	COUNT_, #4
23018     E8 00 A0 FD | 	call	#pushregs_
2301c     49 A7 02 F6 | 	mov	local01, arg01
23020                 | ' 
23020                 | ' repeat iii from 0 to strsize(text)-1
23020     00 A8 06 F6 | 	mov	local02, #0
23024     53 93 02 F6 | 	mov	arg01, local01
23028     49 AB 02 F6 | 	mov	local03, arg01
2302c     D7 06 48 FB | 	callpa	#(@LR__2871-@LR__2870)>>2,fcache_load_ptr_
23030                 | LR__2870
23030     55 7B CA FA | 	rdbyte	result1, local03 wz
23034     01 AA 06 51 |  if_ne	add	local03, #1
23038     F4 FF 9F 5D |  if_ne	jmp	#LR__2870
2303c                 | LR__2871
2303c     49 AB 82 F1 | 	sub	local03, arg01
23040     01 AA 86 F1 | 	sub	local03, #1
23044     00 AA 56 F2 | 	cmps	local03, #0 wc
23048     01 AC 86 F6 | 	negc	local04, #1
2304c     56 AB 02 F1 | 	add	local03, local04
23050                 | LR__2872
23050                 | '   putchar2(byte[text+iii])
23050     53 93 02 F6 | 	mov	arg01, local01
23054     54 93 02 F1 | 	add	arg01, local02
23058     49 93 C2 FA | 	rdbyte	arg01, arg01
2305c     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
23060     56 A9 02 F1 | 	add	local02, local04
23064     55 A9 0A F2 | 	cmp	local02, local03 wz
23068     E4 FF 9F 5D |  if_ne	jmp	#LR__2872
2306c     E7 F0 03 F6 | 	mov	ptra, fp
23070     F2 00 A0 FD | 	call	#popregs_
23074                 | _hg010b_spin2_write_ret
23074     2D 00 64 FD | 	ret
23078                 | 
23078                 | '    
23078                 | ' ' a version for text scrolling in Basic shifted 4 lines down
23078                 | ' 
23078                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
23078                 | _hg010b_spin2_scrollup2
23078     03 CA 05 F6 | 	mov	COUNT_, #3
2307c     E8 00 A0 FD | 	call	#pushregs_
23080                 | ' 	
23080                 | ' repeat i from 4 to 579 
23080     04 A6 06 F6 | 	mov	local01, #4
23084                 | LR__2880
23084     DD 64 06 F1 | 	add	objptr, #221
23088     32 95 02 FB | 	rdlong	arg02, objptr
2308c     53 9B 02 F6 | 	mov	arg05, local01
23090     10 9A 06 F1 | 	add	arg05, #16
23094     02 9A 66 F0 | 	shl	arg05, #2
23098     14 64 06 F1 | 	add	objptr, #20
2309c     32 97 02 FB | 	rdlong	arg03, objptr
230a0     4B 9B 02 FD | 	qmul	arg05, arg03
230a4                 | '   ram.read1($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
230a4     02 96 66 F0 | 	shl	arg03, #2
230a8     F4 03 00 FF 
230ac     00 92 06 F6 | 	mov	arg01, ##518144
230b0     0A 00 00 FF 
230b4     DB 65 06 F1 | 	add	objptr, ##5595
230b8     18 9A 62 FD | 	getqx	arg05
230bc     4D 95 02 F1 | 	add	arg02, arg05
230c0     64 0B B0 FD | 	call	#_psram_spin2_read1
230c4     0A 00 00 FF 
230c8     EF 65 86 F1 | 	sub	objptr, ##5615
230cc     32 95 02 FB | 	rdlong	arg02, objptr
230d0     53 9B 02 F6 | 	mov	arg05, local01
230d4     02 9A 66 F0 | 	shl	arg05, #2
230d8     14 64 06 F1 | 	add	objptr, #20
230dc     32 97 02 FB | 	rdlong	arg03, objptr
230e0     4B 9B 02 FD | 	qmul	arg05, arg03
230e4                 | '   ram.write($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
230e4     02 96 66 F0 | 	shl	arg03, #2
230e8     F4 03 00 FF 
230ec     00 92 06 F6 | 	mov	arg01, ##518144
230f0     0A 00 00 FF 
230f4     DB 65 06 F1 | 	add	objptr, ##5595
230f8     18 9A 62 FD | 	getqx	arg05
230fc     4D 95 02 F1 | 	add	arg02, arg05
23100     C0 0B B0 FD | 	call	#_psram_spin2_write
23104     0B 00 00 FF 
23108     CC 64 86 F1 | 	sub	objptr, ##5836
2310c     01 A6 06 F1 | 	add	local01, #1
23110     01 00 00 FF 
23114     44 A6 16 F2 | 	cmp	local01, ##580 wc
23118     68 FF 9F CD |  if_b	jmp	#LR__2880
2311c                 | ' 
2311c                 | ' repeat i from 580 to 599
2311c     01 00 00 FF 
23120     44 A6 06 F6 | 	mov	local01, ##580
23124                 | LR__2881
23124                 | '    fastline(0,1023,i,write_background)   
23124     45 64 06 F1 | 	add	objptr, #69
23128     32 99 02 FB | 	rdlong	arg04, objptr
2312c     45 64 86 F1 | 	sub	objptr, #69
23130     00 92 06 F6 | 	mov	arg01, #0
23134     09 94 CE F9 | 	bmask	arg02, #9
23138     53 97 02 F6 | 	mov	arg03, local01
2313c     6C EF BF FD | 	call	#_hg010b_spin2_fastline
23140     01 A6 06 F1 | 	add	local01, #1
23144     01 00 00 FF 
23148     58 A6 16 F2 | 	cmp	local01, ##600 wc
2314c     D4 FF 9F CD |  if_b	jmp	#LR__2881
23150                 | ' repeat i from 0 to 3
23150     00 A6 06 F6 | 	mov	local01, #0
23154                 | LR__2882
23154                 | '    fastline(0,1023,i,write_background)      
23154     45 64 06 F1 | 	add	objptr, #69
23158     32 99 02 FB | 	rdlong	arg04, objptr
2315c     45 64 86 F1 | 	sub	objptr, #69
23160     00 92 06 F6 | 	mov	arg01, #0
23164     09 94 CE F9 | 	bmask	arg02, #9
23168     53 97 02 F6 | 	mov	arg03, local01
2316c     3C EF BF FD | 	call	#_hg010b_spin2_fastline
23170     01 A6 06 F1 | 	add	local01, #1
23174     04 A6 56 F2 | 	cmps	local01, #4 wc
23178     D8 FF 9F CD |  if_b	jmp	#LR__2882
2317c                 | ' 
2317c                 | ' repeat i from 0 to 35
2317c     00 A6 06 F6 | 	mov	local01, #0
23180                 | LR__2883
23180     53 9B 02 F6 | 	mov	arg05, local01
23184     01 9A 06 F1 | 	add	arg05, #1
23188     1C 00 00 FF 
2318c     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
23190     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
23194     4B 9B 02 FD | 	qmul	arg05, arg03
23198                 | '   ram.read1($7E800, textbuf_ptr+(i+1)*timings[7], timings[7])
23198     04 64 06 F1 | 	add	objptr, #4
2319c     32 95 02 FB | 	rdlong	arg02, objptr
231a0     1C 00 00 FF 
231a4     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
231a8     F4 03 00 FF 
231ac     00 92 06 F6 | 	mov	arg01, ##518144
231b0     0B 00 00 FF 
231b4     C8 64 06 F1 | 	add	objptr, ##5832
231b8     18 9A 62 FD | 	getqx	arg05
231bc     4D 95 02 F1 | 	add	arg02, arg05
231c0     64 0A B0 FD | 	call	#_psram_spin2_read1
231c4     1C 00 00 FF 
231c8     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
231cc     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
231d0     4B A7 02 FD | 	qmul	local01, arg03
231d4                 | '   ram.write($7E800, textbuf_ptr+i*timings[7], timings[7])
231d4     0B 00 00 FF 
231d8     C8 64 86 F1 | 	sub	objptr, ##5832
231dc     32 95 02 FB | 	rdlong	arg02, objptr
231e0     1C 00 00 FF 
231e4     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
231e8     F4 03 00 FF 
231ec     00 92 06 F6 | 	mov	arg01, ##518144
231f0     0B 00 00 FF 
231f4     C8 64 06 F1 | 	add	objptr, ##5832
231f8     18 9A 62 FD | 	getqx	arg05
231fc     4D 95 02 F1 | 	add	arg02, arg05
23200     C0 0A B0 FD | 	call	#_psram_spin2_write
23204     0B 00 00 FF 
23208     CC 64 86 F1 | 	sub	objptr, ##5836
2320c     01 A6 06 F1 | 	add	local01, #1
23210     24 A6 56 F2 | 	cmps	local01, #36 wc
23214     68 FF 9F CD |  if_b	jmp	#LR__2883
23218                 | ' repeat i from 0 to timings[7]-1
23218     00 A6 06 F6 | 	mov	local01, #0
2321c     1C 00 00 FF 
23220     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
23224     37 A9 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
23228     1C 00 00 FF 
2322c     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
23230     01 A8 86 F1 | 	sub	local02, #1
23234     00 A8 56 F2 | 	cmps	local02, #0 wc
23238     01 AA 86 F6 | 	negc	local03, #1
2323c     55 A9 02 F1 | 	add	local02, local03
23240                 | LR__2884
23240                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
23240     04 64 06 F1 | 	add	objptr, #4
23244     32 93 02 FB | 	rdlong	arg01, objptr
23248     1C 00 00 FF 
2324c     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
23250     37 9B 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
23254     1C 00 00 FF 
23258     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
2325c     4D 99 02 F6 | 	mov	arg04, arg05
23260     03 98 66 F0 | 	shl	arg04, #3
23264     4D 99 02 F1 | 	add	arg04, arg05
23268     02 98 66 F0 | 	shl	arg04, #2
2326c     53 99 02 F1 | 	add	arg04, local01
23270     4C 93 02 F1 | 	add	arg01, arg04
23274     20 94 06 F6 | 	mov	arg02, #32
23278     01 96 06 F6 | 	mov	arg03, #1
2327c     00 98 06 F6 | 	mov	arg04, #0
23280     01 9A 06 F6 | 	mov	arg05, #1
23284     0B 00 00 FF 
23288     C8 64 06 F1 | 	add	objptr, ##5832
2328c     D4 0A B0 FD | 	call	#_psram_spin2_fill
23290     0B 00 00 FF 
23294     CC 64 86 F1 | 	sub	objptr, ##5836
23298     55 A7 02 F1 | 	add	local01, local03
2329c     54 A7 0A F2 | 	cmp	local01, local02 wz
232a0     9C FF 9F 5D |  if_ne	jmp	#LR__2884
232a4     E7 F0 03 F6 | 	mov	ptra, fp
232a8     F2 00 A0 FD | 	call	#popregs_
232ac                 | _hg010b_spin2_scrollup2_ret
232ac     2D 00 64 FD | 	ret
232b0                 | 
232b0                 | '  
232b0                 | ' ''----------- Scroll the screen one line down 
232b0                 | ' 
232b0                 | ' pub scrolldown(start=0) | i
232b0                 | _hg010b_spin2_scrolldown
232b0     05 CA 05 F6 | 	mov	COUNT_, #5
232b4     E8 00 A0 FD | 	call	#pushregs_
232b8     49 A7 02 F6 | 	mov	local01, arg01
232bc                 | ' 
232bc                 | ' repeat i from 579 to (start*16)+4
232bc     01 00 00 FF 
232c0     43 A8 06 F6 | 	mov	local02, ##579
232c4     53 AB 02 F6 | 	mov	local03, local01
232c8     04 AA 66 F0 | 	shl	local03, #4
232cc     04 AA 06 F1 | 	add	local03, #4
232d0     01 00 00 FF 
232d4     43 AA 56 F2 | 	cmps	local03, ##579 wc
232d8     01 AC 86 F6 | 	negc	local04, #1
232dc     56 AF 02 F6 | 	mov	local05, local04
232e0     56 AB 02 F1 | 	add	local03, local04
232e4                 | LR__2890
232e4     DD 64 06 F1 | 	add	objptr, #221
232e8     32 95 02 FB | 	rdlong	arg02, objptr
232ec     54 AD 02 F6 | 	mov	local04, local02
232f0     02 AC 66 F0 | 	shl	local04, #2
232f4     14 64 06 F1 | 	add	objptr, #20
232f8     32 97 02 FB | 	rdlong	arg03, objptr
232fc     4B AD 02 FD | 	qmul	local04, arg03
23300                 | '   ram.read1($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
23300     02 96 66 F0 | 	shl	arg03, #2
23304     F4 03 00 FF 
23308     00 92 06 F6 | 	mov	arg01, ##518144
2330c     0A 00 00 FF 
23310     DB 65 06 F1 | 	add	objptr, ##5595
23314     18 AC 62 FD | 	getqx	local04
23318     56 95 02 F1 | 	add	arg02, local04
2331c     08 09 B0 FD | 	call	#_psram_spin2_read1
23320     0A 00 00 FF 
23324     EF 65 86 F1 | 	sub	objptr, ##5615
23328     32 95 02 FB | 	rdlong	arg02, objptr
2332c     54 AD 02 F6 | 	mov	local04, local02
23330     10 AC 06 F1 | 	add	local04, #16
23334     02 AC 66 F0 | 	shl	local04, #2
23338     14 64 06 F1 | 	add	objptr, #20
2333c     32 97 02 FB | 	rdlong	arg03, objptr
23340     4B AD 02 FD | 	qmul	local04, arg03
23344                 | '   ram.write($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
23344     02 96 66 F0 | 	shl	arg03, #2
23348     F4 03 00 FF 
2334c     00 92 06 F6 | 	mov	arg01, ##518144
23350     0A 00 00 FF 
23354     DB 65 06 F1 | 	add	objptr, ##5595
23358     18 AC 62 FD | 	getqx	local04
2335c     56 95 02 F1 | 	add	arg02, local04
23360     60 09 B0 FD | 	call	#_psram_spin2_write
23364     0B 00 00 FF 
23368     CC 64 86 F1 | 	sub	objptr, ##5836
2336c     57 A9 02 F1 | 	add	local02, local05
23370     55 A9 0A F2 | 	cmp	local02, local03 wz
23374     6C FF 9F 5D |  if_ne	jmp	#LR__2890
23378                 | ' 
23378                 | ' repeat i from (start*16)+4 to (start*16)+19
23378     53 A9 02 F6 | 	mov	local02, local01
2337c     04 A8 66 F0 | 	shl	local02, #4
23380     04 A8 06 F1 | 	add	local02, #4
23384     53 AF 02 F6 | 	mov	local05, local01
23388     04 AE 66 F0 | 	shl	local05, #4
2338c     13 AE 06 F1 | 	add	local05, #19
23390     53 AD 02 F6 | 	mov	local04, local01
23394     04 AC 66 F0 | 	shl	local04, #4
23398     04 AC 06 F1 | 	add	local04, #4
2339c     56 AF 52 F2 | 	cmps	local05, local04 wc
233a0     01 AC 86 F6 | 	negc	local04, #1
233a4     56 AB 02 F6 | 	mov	local03, local04
233a8     56 AF 02 F1 | 	add	local05, local04
233ac                 | LR__2891
233ac                 | '    fastline(0,1023,i,write_background)    
233ac     45 64 06 F1 | 	add	objptr, #69
233b0     32 99 02 FB | 	rdlong	arg04, objptr
233b4     45 64 86 F1 | 	sub	objptr, #69
233b8     00 92 06 F6 | 	mov	arg01, #0
233bc     09 94 CE F9 | 	bmask	arg02, #9
233c0     54 97 02 F6 | 	mov	arg03, local02
233c4     E4 EC BF FD | 	call	#_hg010b_spin2_fastline
233c8     55 A9 02 F1 | 	add	local02, local03
233cc     57 A9 0A F2 | 	cmp	local02, local05 wz
233d0     D8 FF 9F 5D |  if_ne	jmp	#LR__2891
233d4                 | '    
233d4                 | ' repeat i from 35 to start
233d4     23 A8 06 F6 | 	mov	local02, #35
233d8     23 A6 56 F2 | 	cmps	local01, #35 wc
233dc     01 AC 86 F6 | 	negc	local04, #1
233e0     53 AF 02 F6 | 	mov	local05, local01
233e4     56 AF 02 F1 | 	add	local05, local04
233e8                 | LR__2892
233e8                 | '   ram.read1($7E800, textbuf_ptr+(i*128), 128)
233e8     04 64 06 F1 | 	add	objptr, #4
233ec     32 95 02 FB | 	rdlong	arg02, objptr
233f0     54 AB 02 F6 | 	mov	local03, local02
233f4     07 AA 66 F0 | 	shl	local03, #7
233f8     55 95 02 F1 | 	add	arg02, local03
233fc     F4 03 00 FF 
23400     00 92 06 F6 | 	mov	arg01, ##518144
23404     80 96 06 F6 | 	mov	arg03, #128
23408     0B 00 00 FF 
2340c     C8 64 06 F1 | 	add	objptr, ##5832
23410     14 08 B0 FD | 	call	#_psram_spin2_read1
23414                 | '   ram.write($7E800, textbuf_ptr+(i+1)*128,128)
23414     0B 00 00 FF 
23418     C8 64 86 F1 | 	sub	objptr, ##5832
2341c     32 95 02 FB | 	rdlong	arg02, objptr
23420     54 AB 02 F6 | 	mov	local03, local02
23424     01 AA 06 F1 | 	add	local03, #1
23428     07 AA 66 F0 | 	shl	local03, #7
2342c     55 95 02 F1 | 	add	arg02, local03
23430     F4 03 00 FF 
23434     00 92 06 F6 | 	mov	arg01, ##518144
23438     80 96 06 F6 | 	mov	arg03, #128
2343c     0B 00 00 FF 
23440     C8 64 06 F1 | 	add	objptr, ##5832
23444     7C 08 B0 FD | 	call	#_psram_spin2_write
23448     0B 00 00 FF 
2344c     CC 64 86 F1 | 	sub	objptr, ##5836
23450     56 A9 02 F1 | 	add	local02, local04
23454     57 A9 0A F2 | 	cmp	local02, local05 wz
23458     8C FF 9F 5D |  if_ne	jmp	#LR__2892
2345c                 | ' repeat i from 0 to 127
2345c     00 A8 06 F6 | 	mov	local02, #0
23460                 | LR__2893
23460                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
23460     04 64 06 F1 | 	add	objptr, #4
23464     32 93 02 FB | 	rdlong	arg01, objptr
23468     53 AF 02 F6 | 	mov	local05, local01
2346c     07 AE 66 F0 | 	shl	local05, #7
23470     57 93 02 F1 | 	add	arg01, local05
23474     54 93 02 F1 | 	add	arg01, local02
23478     20 94 06 F6 | 	mov	arg02, #32
2347c     01 96 06 F6 | 	mov	arg03, #1
23480     00 98 06 F6 | 	mov	arg04, #0
23484     01 9A 06 F6 | 	mov	arg05, #1
23488     0B 00 00 FF 
2348c     C8 64 06 F1 | 	add	objptr, ##5832
23490     D0 08 B0 FD | 	call	#_psram_spin2_fill
23494     0B 00 00 FF 
23498     CC 64 86 F1 | 	sub	objptr, ##5836
2349c     01 A8 06 F1 | 	add	local02, #1
234a0     80 A8 56 F2 | 	cmps	local02, #128 wc
234a4     B8 FF 9F CD |  if_b	jmp	#LR__2893
234a8     E7 F0 03 F6 | 	mov	ptra, fp
234ac     F2 00 A0 FD | 	call	#popregs_
234b0                 | _hg010b_spin2_scrolldown_ret
234b0     2D 00 64 FD | 	ret
234b4                 | 
234b4                 | ' 
234b4                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
234b4                 | ' 
234b4                 | ' pub crlf()
234b4                 | _hg010b_spin2_crlf
234b4                 | ' 
234b4                 | ' cursor_x:=leading_spaces*2
234b4     01 00 00 FF 
234b8     B6 64 06 F1 | 	add	objptr, ##694
234bc     32 97 02 FB | 	rdlong	arg03, objptr
234c0     01 96 66 F0 | 	shl	arg03, #1
234c4     01 00 00 FF 
234c8     7A 64 86 F1 | 	sub	objptr, ##634
234cc     32 97 52 FC | 	wrword	arg03, objptr
234d0                 | ' cursor_y+=1
234d0     02 64 06 F1 | 	add	objptr, #2
234d4     32 97 C2 FA | 	rdbyte	arg03, objptr
234d8     01 96 06 F1 | 	add	arg03, #1
234dc     32 97 42 FC | 	wrbyte	arg03, objptr
234e0                 | ' if cursor_y>st_lines-1
234e0     C3 64 06 F1 | 	add	objptr, #195
234e4     32 97 02 FB | 	rdlong	arg03, objptr
234e8     01 96 86 F1 | 	sub	arg03, #1
234ec     C3 64 86 F1 | 	sub	objptr, #195
234f0     32 95 C2 FA | 	rdbyte	arg02, objptr
234f4     3E 64 86 F1 | 	sub	objptr, #62
234f8     4B 95 5A F2 | 	cmps	arg02, arg03 wcz
234fc     2C 00 90 ED |  if_be	jmp	#LR__2900
23500                 | '   scrollup2()
23500     00 92 06 F6 | 	mov	arg01, #0
23504     01 00 00 FF 
23508     58 94 06 F6 | 	mov	arg02, ##600
2350c     10 96 06 F6 | 	mov	arg03, #16
23510     64 FB BF FD | 	call	#_hg010b_spin2_scrollup2
23514                 | '   cursor_y:=st_lines-1
23514     01 65 06 F1 | 	add	objptr, #257
23518     32 97 02 FB | 	rdlong	arg03, objptr
2351c     01 96 86 F1 | 	sub	arg03, #1
23520     C3 64 86 F1 | 	sub	objptr, #195
23524     32 97 42 FC | 	wrbyte	arg03, objptr
23528     3E 64 86 F1 | 	sub	objptr, #62
2352c                 | LR__2900
2352c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
2352c     3C 64 06 F1 | 	add	objptr, #60
23530     32 95 E2 FA | 	rdword	arg02, objptr
23534     02 94 66 F0 | 	shl	arg02, #2
23538     02 64 06 F1 | 	add	objptr, #2
2353c     32 97 C2 FA | 	rdbyte	arg03, objptr
23540     3E 64 86 F1 | 	sub	objptr, #62
23544     04 96 66 F0 | 	shl	arg03, #4
23548     04 96 06 F1 | 	add	arg03, #4
2354c     11 92 06 F6 | 	mov	arg01, #17
23550     0C E9 BF FD | 	call	#_hg010b_spin2_setspritepos
23554                 | _hg010b_spin2_crlf_ret
23554     2D 00 64 FD | 	ret
23558                 | 
23558                 | ' 
23558                 | ' 
23558                 | ' '*************************************************************************
23558                 | ' '                                                                        *
23558                 | ' '  Conversions                                                           *
23558                 | ' '                                                                        *
23558                 | ' '*************************************************************************
23558                 | ' 
23558                 | ' ''---------- Convert a integer to dec string, return a pointer
23558                 | ' 
23558                 | ' pub inttostr(i):result |q,pos,k,j
23558                 | _hg010b_spin2_inttostr
23558     03 CA 05 F6 | 	mov	COUNT_, #3
2355c     E8 00 A0 FD | 	call	#pushregs_
23560     49 A7 0A F6 | 	mov	local01, arg01 wz
23564                 | ' 
23564                 | ' j:=i
23564                 | ' pos:=10
23564     0A A8 06 F6 | 	mov	local02, #10
23568                 | ' k:=0
23568     00 AA 06 F6 | 	mov	local03, #0
2356c                 | ' 
2356c                 | ' if (j==0)
2356c     18 00 90 5D |  if_ne	jmp	#LR__2910
23570                 | '   n_string[0]:=48
23570     4D 64 06 F1 | 	add	objptr, #77
23574     32 61 48 FC | 	wrbyte	#48, objptr
23578                 | '   n_string[1]:=0
23578     01 64 06 F1 | 	add	objptr, #1
2357c     32 01 48 FC | 	wrbyte	#0, objptr
23580     4E 64 86 F1 | 	sub	objptr, #78
23584     C4 00 90 FD | 	jmp	#LR__2917
23588                 | LR__2910
23588                 | ' 
23588                 | ' else
23588                 | '   if (j<0)
23588     53 A7 52 F6 | 	abs	local01, local01 wc
2358c                 | '     j:=0-j
2358c                 | '     k:=45
2358c     2D AA 06 C6 |  if_b	mov	local03, #45
23590                 | ' 
23590                 | '   n_string[11]:=0
23590     58 64 06 F1 | 	add	objptr, #88
23594     32 01 48 FC | 	wrbyte	#0, objptr
23598     58 64 86 F1 | 	sub	objptr, #88
2359c     D7 24 48 FB | 	callpa	#(@LR__2912-@LR__2911)>>2,fcache_load_ptr_
235a0                 | '   repeat while (pos>-1)
235a0                 | LR__2911
235a0     00 A8 56 F2 | 	cmps	local02, #0 wc
235a4     40 00 90 CD |  if_b	jmp	#LR__2913
235a8     53 7B 52 F6 | 	abs	result1, local01 wc
235ac     0A 7A 16 FD | 	qdiv	result1, #10
235b0                 | '     q:=j//10
235b0     19 7A 62 FD | 	getqy	result1
235b4     3D 7B 82 F6 | 	negc	result1, result1
235b8     53 A7 52 F6 | 	abs	local01, local01 wc
235bc     0A A6 16 FD | 	qdiv	local01, #10
235c0                 | '     q:=48+q
235c0     30 7A 06 F1 | 	add	result1, #48
235c4                 | '     n_string[pos]:=q
235c4     54 A7 02 F6 | 	mov	local01, local02
235c8     32 97 02 F6 | 	mov	arg03, objptr
235cc     4D 96 06 F1 | 	add	arg03, #77
235d0     4B A7 02 F1 | 	add	local01, arg03
235d4     53 7B 42 FC | 	wrbyte	result1, local01
235d8                 | '     j:=j/10
235d8                 | '     pos-=1
235d8     01 A8 86 F1 | 	sub	local02, #1
235dc     18 A6 62 FD | 	getqx	local01
235e0     53 A7 82 F6 | 	negc	local01, local01
235e4     B8 FF 9F FD | 	jmp	#LR__2911
235e8                 | LR__2912
235e8                 | LR__2913
235e8                 | '   repeat while n_string[0]==48
235e8                 | LR__2914
235e8     4D 64 06 F1 | 	add	objptr, #77
235ec     32 97 C2 FA | 	rdbyte	arg03, objptr
235f0     4D 64 86 F1 | 	sub	objptr, #77
235f4     30 96 0E F2 | 	cmp	arg03, #48 wz
235f8     20 00 90 5D |  if_ne	jmp	#LR__2915
235fc                 | '     bytemove(@n_string,@n_string+1,12)
235fc     4D 64 06 F1 | 	add	objptr, #77
23600     32 93 02 F6 | 	mov	arg01, objptr
23604     32 95 02 F6 | 	mov	arg02, objptr
23608     4D 64 86 F1 | 	sub	objptr, #77
2360c     01 94 06 F1 | 	add	arg02, #1
23610     0C 96 06 F6 | 	mov	arg03, #12
23614     3C 14 B0 FD | 	call	#__system____builtin_memmove
23618     CC FF 9F FD | 	jmp	#LR__2914
2361c                 | LR__2915
2361c                 | ' 
2361c                 | '   if k==45
2361c     2D AA 0E F2 | 	cmp	local03, #45 wz
23620     28 00 90 5D |  if_ne	jmp	#LR__2916
23624                 | '      bytemove(@n_string+1,@n_string,12)
23624     4D 64 06 F1 | 	add	objptr, #77
23628     32 93 02 F6 | 	mov	arg01, objptr
2362c     01 92 06 F1 | 	add	arg01, #1
23630     32 95 02 F6 | 	mov	arg02, objptr
23634     4D 64 86 F1 | 	sub	objptr, #77
23638     0C 96 06 F6 | 	mov	arg03, #12
2363c     14 14 B0 FD | 	call	#__system____builtin_memmove
23640                 | '      n_string[0]:=k
23640     4D 64 06 F1 | 	add	objptr, #77
23644     32 AB 42 FC | 	wrbyte	local03, objptr
23648     4D 64 86 F1 | 	sub	objptr, #77
2364c                 | LR__2916
2364c                 | LR__2917
2364c                 | ' 
2364c                 | ' q:=@n_string
2364c     32 7B 02 F6 | 	mov	result1, objptr
23650     4D 7A 06 F1 | 	add	result1, #77
23654                 | ' return q
23654     E7 F0 03 F6 | 	mov	ptra, fp
23658     F2 00 A0 FD | 	call	#popregs_
2365c                 | _hg010b_spin2_inttostr_ret
2365c     2D 00 64 FD | 	ret
23660                 | 
23660                 | ' 
23660                 | ' '**********************************************************************************
23660                 | ' '
23660                 | ' '        Blitting
23660                 | ' '
23660                 | ' '**********************************************************************************
23660                 | ' 
23660                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
23660                 | _hg010b_spin2_blit
23660     18 CA 05 F6 | 	mov	COUNT_, #24
23664     E8 00 A0 FD | 	call	#pushregs_
23668     49 A7 02 F6 | 	mov	local01, arg01
2366c     4A A9 02 F6 | 	mov	local02, arg02
23670     4B AB 02 F6 | 	mov	local03, arg03
23674     4C AD 02 F6 | 	mov	local04, arg04
23678     4D AF 02 F6 | 	mov	local05, arg05
2367c     4E B1 02 F6 | 	mov	local06, arg06
23680     4F B3 02 F6 | 	mov	local07, arg07
23684     50 B5 02 F6 | 	mov	local08, arg08
23688     51 B7 02 F6 | 	mov	local09, arg09
2368c     52 B9 02 F6 | 	mov	local10, arg10
23690                 | ' 
23690                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
23690     00 04 00 FF 
23694     00 A6 56 F2 | 	cmps	local01, ##524288 wc
23698     00 04 00 3F 
2369c     00 B2 56 32 |  if_ae	cmps	local07, ##524288 wc
236a0     98 01 90 CD |  if_b	jmp	#LR__2924
236a4     56 A9 5A F2 | 	cmps	local02, local04 wcz
236a8     54 BB 02 16 |  if_a	mov	local11, local02
236ac     56 A9 02 16 |  if_a	mov	local02, local04
236b0     5D AD 02 16 |  if_a	mov	local04, local11
236b4     57 AB 5A F2 | 	cmps	local03, local05 wcz
236b8     55 BB 02 16 |  if_a	mov	local11, local03
236bc     57 AB 02 16 |  if_a	mov	local03, local05
236c0     58 AB 02 FD | 	qmul	local03, local06
236c4                 | '   if x1a>x2a
236c4                 | '     x1a,x2a:=x2a,x1a
236c4                 | '   if y1a>y2a
236c4                 | '     y1a,y2a:=y2a,y1a  
236c4     5D AF 02 16 |  if_a	mov	local05, local11
236c8                 | '   if x2a-x1a>1023 
236c8     56 BB 02 F6 | 	mov	local11, local04
236cc     54 BB 82 F1 | 	sub	local11, local02
236d0     02 00 00 FF 
236d4     00 BA 56 F2 | 	cmps	local11, ##1024 wc
236d8                 | '     x2a:=x1a+1023 ' limit the line to 1024
236d8     54 AD 02 36 |  if_ae	mov	local04, local02
236dc     01 00 00 3F 
236e0     FF AD 06 31 |  if_ae	add	local04, ##1023
236e4                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
236e4     59 BD 02 F6 | 	mov	local12, local07
236e8     54 BD 02 F1 | 	add	local12, local02
236ec     18 BA 62 FD | 	getqx	local11
236f0     5C B7 02 FD | 	qmul	local09, local10
236f4     5D BD 02 F1 | 	add	local12, local11
236f8     53 BF 02 F6 | 	mov	local13, local01
236fc     5A BF 02 F1 | 	add	local13, local08
23700     18 BA 62 FD | 	getqx	local11
23704     5D BF 02 F1 | 	add	local13, local11
23708     5F BD 5A F2 | 	cmps	local12, local13 wcz
2370c     98 00 90 ED |  if_be	jmp	#LR__2921
23710                 | '     repeat y from y1a to y2a
23710     55 C1 02 F6 | 	mov	local14, local03
23714     55 AF 52 F2 | 	cmps	local05, local03 wc
23718     01 C2 86 F6 | 	negc	local15, #1
2371c     57 C5 02 F6 | 	mov	local16, local05
23720     61 C5 02 F1 | 	add	local16, local15
23724     0B 00 00 FF 
23728     CC 64 06 F1 | 	add	objptr, ##5836
2372c                 | LR__2920
2372c     58 C1 02 FD | 	qmul	local14, local06
23730                 | '   '    writeln(string("I am here"))
23730                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
23730     53 95 02 F6 | 	mov	arg02, local01
23734     56 97 02 F6 | 	mov	arg03, local04
23738     54 97 82 F1 | 	sub	arg03, local02
2373c     01 96 06 F1 | 	add	arg03, #1
23740     F4 03 00 FF 
23744     00 92 06 F6 | 	mov	arg01, ##518144
23748     18 BE 62 FD | 	getqx	local13
2374c     5F 95 02 F1 | 	add	arg02, local13
23750     54 95 02 F1 | 	add	arg02, local02
23754     D0 04 B0 FD | 	call	#_psram_spin2_read1
23758     5B BF 02 F6 | 	mov	local13, local09
2375c     55 BF 82 F1 | 	sub	local13, local03
23760     60 BF 02 F1 | 	add	local13, local14
23764     5C BF 02 FD | 	qmul	local13, local10
23768                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
23768     59 95 02 F6 | 	mov	arg02, local07
2376c     56 97 02 F6 | 	mov	arg03, local04
23770     54 97 82 F1 | 	sub	arg03, local02
23774     01 96 06 F1 | 	add	arg03, #1
23778     F4 03 00 FF 
2377c     00 92 06 F6 | 	mov	arg01, ##518144
23780     18 BE 62 FD | 	getqx	local13
23784     5F 95 02 F1 | 	add	arg02, local13
23788     5A 95 02 F1 | 	add	arg02, local08
2378c     34 05 B0 FD | 	call	#_psram_spin2_write
23790     61 C1 02 F1 | 	add	local14, local15
23794     62 C1 0A F2 | 	cmp	local14, local16 wz
23798     90 FF 9F 5D |  if_ne	jmp	#LR__2920
2379c     0B 00 00 FF 
237a0     CC 64 86 F1 | 	sub	objptr, ##5836
237a4     94 00 90 FD | 	jmp	#LR__2923
237a8                 | LR__2921
237a8                 | '   else
237a8                 | '     repeat y from y2a to y1a
237a8     57 C1 02 F6 | 	mov	local14, local05
237ac     57 AB 52 F2 | 	cmps	local03, local05 wc
237b0     01 C6 86 F6 | 	negc	local17, #1
237b4     55 C9 02 F6 | 	mov	local18, local03
237b8     63 C9 02 F1 | 	add	local18, local17
237bc     0B 00 00 FF 
237c0     CC 64 06 F1 | 	add	objptr, ##5836
237c4                 | LR__2922
237c4     58 C1 02 FD | 	qmul	local14, local06
237c8                 | '  '     writeln(string("I am there"))
237c8                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
237c8     53 95 02 F6 | 	mov	arg02, local01
237cc     56 97 02 F6 | 	mov	arg03, local04
237d0     54 97 82 F1 | 	sub	arg03, local02
237d4     01 96 06 F1 | 	add	arg03, #1
237d8     F4 03 00 FF 
237dc     00 92 06 F6 | 	mov	arg01, ##518144
237e0     18 C4 62 FD | 	getqx	local16
237e4     62 95 02 F1 | 	add	arg02, local16
237e8     54 95 02 F1 | 	add	arg02, local02
237ec     38 04 B0 FD | 	call	#_psram_spin2_read1
237f0     5B C5 02 F6 | 	mov	local16, local09
237f4     55 C5 82 F1 | 	sub	local16, local03
237f8     60 C5 02 F1 | 	add	local16, local14
237fc     5C C5 02 FD | 	qmul	local16, local10
23800                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
23800     59 95 02 F6 | 	mov	arg02, local07
23804     56 97 02 F6 | 	mov	arg03, local04
23808     54 97 82 F1 | 	sub	arg03, local02
2380c     01 96 06 F1 | 	add	arg03, #1
23810     F4 03 00 FF 
23814     00 92 06 F6 | 	mov	arg01, ##518144
23818     18 C4 62 FD | 	getqx	local16
2381c     62 95 02 F1 | 	add	arg02, local16
23820     5A 95 02 F1 | 	add	arg02, local08
23824     9C 04 B0 FD | 	call	#_psram_spin2_write
23828     63 C1 02 F1 | 	add	local14, local17
2382c     64 C1 0A F2 | 	cmp	local14, local18 wz
23830     90 FF 9F 5D |  if_ne	jmp	#LR__2922
23834     0B 00 00 FF 
23838     CC 64 86 F1 | 	sub	objptr, ##5836
2383c                 | LR__2923
2383c                 | LR__2924
2383c                 | '     
2383c                 | ' if ((f>=$80000) && (t<$80000)) 
2383c     00 04 00 FF 
23840     00 A6 56 F2 | 	cmps	local01, ##524288 wc
23844     80 00 90 CD |  if_b	jmp	#LR__2926
23848     00 04 00 FF 
2384c     00 B2 56 F2 | 	cmps	local07, ##524288 wc
23850     74 00 90 3D |  if_ae	jmp	#LR__2926
23854                 | '   repeat y from y1a to y2a
23854     55 C1 02 F6 | 	mov	local14, local03
23858     55 AF 52 F2 | 	cmps	local05, local03 wc
2385c     01 CA 86 F6 | 	negc	local19, #1
23860     57 CD 02 F6 | 	mov	local20, local05
23864     65 CD 02 F1 | 	add	local20, local19
23868     0B 00 00 FF 
2386c     CC 64 06 F1 | 	add	objptr, ##5836
23870                 | LR__2925
23870     5B C9 02 F6 | 	mov	local18, local09
23874     55 C9 82 F1 | 	sub	local18, local03
23878     60 C9 02 F1 | 	add	local18, local14
2387c     5C C9 02 FD | 	qmul	local18, local10
23880                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
23880     59 93 02 F6 | 	mov	arg01, local07
23884     18 C8 62 FD | 	getqx	local18
23888     58 C1 02 FD | 	qmul	local14, local06
2388c     64 93 02 F1 | 	add	arg01, local18
23890     5A 93 02 F1 | 	add	arg01, local08
23894     53 95 02 F6 | 	mov	arg02, local01
23898     56 97 02 F6 | 	mov	arg03, local04
2389c     54 97 82 F1 | 	sub	arg03, local02
238a0     01 96 06 F1 | 	add	arg03, #1
238a4     18 C8 62 FD | 	getqx	local18
238a8     64 95 02 F1 | 	add	arg02, local18
238ac     54 95 02 F1 | 	add	arg02, local02
238b0     74 03 B0 FD | 	call	#_psram_spin2_read1
238b4     65 C1 02 F1 | 	add	local14, local19
238b8     66 C1 0A F2 | 	cmp	local14, local20 wz
238bc     B0 FF 9F 5D |  if_ne	jmp	#LR__2925
238c0     0B 00 00 FF 
238c4     CC 64 86 F1 | 	sub	objptr, ##5836
238c8                 | LR__2926
238c8                 | '     
238c8                 | ' if ((f<$80000) && (t>=$80000)) 
238c8     00 04 00 FF 
238cc     00 A6 56 F2 | 	cmps	local01, ##524288 wc
238d0     84 00 90 3D |  if_ae	jmp	#LR__2928
238d4     00 04 00 FF 
238d8     00 B2 56 F2 | 	cmps	local07, ##524288 wc
238dc     78 00 90 CD |  if_b	jmp	#LR__2928
238e0                 | '   t:=t & $FFFFFFF
238e0     7C B2 06 F4 | 	bitl	local07, #124
238e4                 | '   repeat y from y1a to y2a
238e4     55 C1 02 F6 | 	mov	local14, local03
238e8     55 AF 52 F2 | 	cmps	local05, local03 wc
238ec     01 CE 86 F6 | 	negc	local21, #1
238f0     57 D1 02 F6 | 	mov	local22, local05
238f4     67 D1 02 F1 | 	add	local22, local21
238f8     0B 00 00 FF 
238fc     CC 64 06 F1 | 	add	objptr, ##5836
23900                 | LR__2927
23900     58 C1 02 FD | 	qmul	local14, local06
23904                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
23904     53 93 02 F6 | 	mov	arg01, local01
23908     5B CD 02 F6 | 	mov	local20, local09
2390c     55 CD 82 F1 | 	sub	local20, local03
23910     60 CD 02 F1 | 	add	local20, local14
23914     18 CA 62 FD | 	getqx	local19
23918     5C CD 02 FD | 	qmul	local20, local10
2391c     65 93 02 F1 | 	add	arg01, local19
23920     54 93 02 F1 | 	add	arg01, local02
23924     59 95 02 F6 | 	mov	arg02, local07
23928     56 97 02 F6 | 	mov	arg03, local04
2392c     54 97 82 F1 | 	sub	arg03, local02
23930     01 96 06 F1 | 	add	arg03, #1
23934     18 CC 62 FD | 	getqx	local20
23938     66 95 02 F1 | 	add	arg02, local20
2393c     5A 95 02 F1 | 	add	arg02, local08
23940     80 03 B0 FD | 	call	#_psram_spin2_write
23944     67 C1 02 F1 | 	add	local14, local21
23948     68 C1 0A F2 | 	cmp	local14, local22 wz
2394c     B0 FF 9F 5D |  if_ne	jmp	#LR__2927
23950     0B 00 00 FF 
23954     CC 64 86 F1 | 	sub	objptr, ##5836
23958                 | LR__2928
23958                 | '     
23958                 | ' if ((f<$80000) && (t<$80000)) 
23958     00 04 00 FF 
2395c     00 A6 56 F2 | 	cmps	local01, ##524288 wc
23960     00 04 00 CF 
23964     00 B2 56 C2 |  if_b	cmps	local07, ##524288 wc
23968     64 00 90 3D |  if_ae	jmp	#LR__2930
2396c                 | '   repeat y from y1a to y2a
2396c     55 C1 02 F6 | 	mov	local14, local03
23970     55 AF 52 F2 | 	cmps	local05, local03 wc
23974     01 D2 86 F6 | 	negc	local23, #1
23978     57 D5 02 F6 | 	mov	local24, local05
2397c     69 D5 02 F1 | 	add	local24, local23
23980                 | LR__2929
23980     58 C1 02 FD | 	qmul	local14, local06
23984                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
23984     53 93 02 F6 | 	mov	arg01, local01
23988     5B D1 02 F6 | 	mov	local22, local09
2398c     55 D1 82 F1 | 	sub	local22, local03
23990     60 D1 02 F1 | 	add	local22, local14
23994     18 CE 62 FD | 	getqx	local21
23998     5C D1 02 FD | 	qmul	local22, local10
2399c     67 93 02 F1 | 	add	arg01, local21
239a0     54 93 02 F1 | 	add	arg01, local02
239a4     59 95 02 F6 | 	mov	arg02, local07
239a8     56 97 02 F6 | 	mov	arg03, local04
239ac     54 97 82 F1 | 	sub	arg03, local02
239b0     01 96 06 F1 | 	add	arg03, #1
239b4     18 D0 62 FD | 	getqx	local22
239b8     68 95 02 F1 | 	add	arg02, local22
239bc     5A 95 02 F1 | 	add	arg02, local08
239c0     90 10 B0 FD | 	call	#__system____builtin_memmove
239c4     69 C1 02 F1 | 	add	local14, local23
239c8     6A C1 0A F2 | 	cmp	local14, local24 wz
239cc     B0 FF 9F 5D |  if_ne	jmp	#LR__2929
239d0                 | LR__2930
239d0     E7 F0 03 F6 | 	mov	ptra, fp
239d4     F2 00 A0 FD | 	call	#popregs_
239d8                 | _hg010b_spin2_blit_ret
239d8     2D 00 64 FD | 	ret
239dc                 | 
239dc                 | ' 
239dc                 | ' '..............................................................................
239dc                 | ' 
239dc                 | ' {{
239dc                 | ' }}
239dc                 | ' PUB startx(freq, burst, delay, desiredcog) : cog,mail | driverAddr
239dc                 | _psram_spin2_startx
239dc     04 CA 05 F6 | 	mov	COUNT_, #4
239e0     E8 00 A0 FD | 	call	#pushregs_
239e4     49 A7 02 F6 | 	mov	local01, arg01
239e8     4B A9 02 F6 | 	mov	local02, arg03
239ec     4C AB 02 F6 | 	mov	local03, arg04
239f0                 | '     stop() ' restart driver if required
239f0     74 01 B0 FD | 	call	#_psram_spin2_stop
239f4     00 A6 0E F2 | 	cmp	local01, #0 wz
239f8     14 A6 06 AB |  if_e	rdlong	local01, #20
239fc     53 95 52 F6 | 	abs	arg02, local01 wc
23a00     A1 07 00 FF 
23a04     40 94 16 FD | 	qdiv	arg02, ##1000000
23a08                 | ' 
23a08                 | '     ' use current frequency if none specified
23a08                 | ' 
23a08                 | '     if freq == 0 
23a08                 | '         freq := clkfreq 
23a08                 | ' 
23a08                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
23a08                 | ' 
23a08                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
23a08                 | '     if burst < 0
23a08                 | '         return ERR_TOO_SLOW,0 ' P2 frequency is too low for any 8us transfers
23a08     18 94 62 FD | 	getqx	arg02
23a0c     4A 99 82 F6 | 	negc	arg04, arg02
23a10     03 98 66 F0 | 	shl	arg04, #3
23a14     84 98 86 F1 | 	sub	arg04, #132
23a18     04 98 46 F0 | 	shr	arg04, #4
23a1c     04 98 66 F0 | 	shl	arg04, #4
23a20     00 98 56 F2 | 	cmps	arg04, #0 wc
23a24     00 7C 06 C6 |  if_b	mov	result2, #0
23a28     0E 7A 66 C6 |  if_b	neg	result1, #14
23a2c     2C 01 90 CD |  if_b	jmp	#LR__2944
23a30                 | ' 
23a30                 | '     ' compute the input delay
23a30                 | ' 
23a30                 | '     if delay <= 0
23a30     01 A8 56 F2 | 	cmps	local02, #1 wc
23a34     10 00 90 3D |  if_ae	jmp	#LR__2940
23a38                 | '         delay := lookupDelay(freq)
23a38     53 93 02 F6 | 	mov	arg01, local01
23a3c     DC 04 B0 FD | 	call	#_psram_spin2_lookupDelay
23a40     3D A9 02 F6 | 	mov	local02, result1
23a44     04 00 90 FD | 	jmp	#LR__2941
23a48                 | LR__2940
23a48                 | '     else
23a48                 | '         delay <#= $f ' limit to 15
23a48     0F A8 66 F3 | 	fles	local02, #15
23a4c                 | LR__2941
23a4c                 | ' 
23a4c                 | '     ' create our lock
23a4c                 | ' 
23a4c                 | '     driverlock := LOCKNEW()  
23a4c     00 7A 06 F6 | 	mov	result1, #0
23a50     04 7A 62 FD | 	locknew	result1
23a54     04 75 06 F1 | 	add	ptr__psram_spin2_dat__, #260
23a58     3A 7B 62 FC | 	wrlong	result1, ptr__psram_spin2_dat__
23a5c                 | '     if driverlock == -1
23a5c     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
23a60     FF FF 7F FF 
23a64     FF 7B 0E F2 | 	cmp	result1, ##-1 wz
23a68                 | '         return ERR_NO_LOCK,0
23a68     00 7C 06 A6 |  if_e	mov	result2, #0
23a6c     1A 7A 66 A6 |  if_e	neg	result1, #26
23a70     E8 00 90 AD |  if_e	jmp	#LR__2944
23a74                 | ' 
23a74                 | '     ' patch in the proper data and HUB addresses to the startup structure
23a74                 | ' 
23a74                 | '     long[@startupData][0]:=clkfreq
23a74     14 A6 06 FB | 	rdlong	local01, #20
23a78     28 75 06 F1 | 	add	ptr__psram_spin2_dat__, #296
23a7c     3A A7 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
23a80                 | ' '    long[@startupData][1]:=$1000_0000
23a80                 | '     long[@startupData][5]:=@deviceData
23a80     3A A7 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
23a84     20 A6 06 F1 | 	add	local01, #32
23a88     3A 95 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
23a8c     14 94 06 F1 | 	add	arg02, #20
23a90     4A A7 62 FC | 	wrlong	local01, arg02
23a94                 | '     long[@startupData][6]:=@qosData
23a94     3A A7 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
23a98     A0 A6 06 F1 | 	add	local01, #160
23a9c     3A 95 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
23aa0     18 94 06 F1 | 	add	arg02, #24
23aa4     4A A7 62 FC | 	wrlong	local01, arg02
23aa8                 | ' 
23aa8                 | ' 
23aa8                 | '     long[@startupData][7]:=mailbox
23aa8     3A A7 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
23aac     1C A6 06 F1 | 	add	local01, #28
23ab0     FF 03 80 FF 
23ab4     53 01 6A FC | 	wrlong	##524032, local01
23ab8                 | '   
23ab8                 | '     ' setup some default bank and QoS parameter values
23ab8                 | ' 
23ab8                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
23ab8     20 74 06 F1 | 	add	ptr__psram_spin2_dat__, #32
23abc     3A 93 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
23ac0     48 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #328
23ac4     10 98 66 F0 | 	shl	arg04, #16
23ac8     0C A8 66 F0 | 	shl	local02, #12
23acc     54 99 42 F5 | 	or	arg04, local02
23ad0     18 98 46 F5 | 	or	arg04, #24
23ad4     4C 95 02 F6 | 	mov	arg02, arg04
23ad8     02 96 06 F6 | 	mov	arg03, #2
23adc     E0 00 A0 FD | 	call	#\builtin_longfill_
23ae0                 | '     longfill(@qosData, $FFFF0000, 8)
23ae0     3A 93 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
23ae4     C8 93 06 F1 | 	add	arg01, #456
23ae8     07 96 06 F6 | 	mov	arg03, #7
23aec     28 96 62 FD | 	setq	arg03
23af0     80 FF FF FF 
23af4     49 01 68 FC | 	wrlong	##-65536, arg01
23af8                 | ' 
23af8                 | '     ' get the address of the PSRAM memory driver so we can start it
23af8                 | ' 
23af8                 | '     driverAddr:= driver.getDriverAddr()
23af8                 | '     return @driver_start
23af8     39 95 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
23afc     20 94 06 F1 | 	add	arg02, #32
23b00                 | ' 
23b00                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
23b00                 | ' 
23b00                 | '     if desiredcog < 0
23b00     00 AA 56 F2 | 	cmps	local03, #0 wc
23b04                 | '         desiredcog := NEWCOG
23b04     10 AA 06 C6 |  if_b	mov	local03, #16
23b08                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
23b08     3A 97 02 F6 | 	mov	arg03, ptr__psram_spin2_dat__
23b0c     28 97 06 F1 | 	add	arg03, #296
23b10     55 AD 02 F6 | 	mov	local04, local03
23b14     28 96 62 FD | 	setq	arg03
23b18     4A AD F2 FC | 	coginit	local04, arg02 wc
23b1c     01 AC 66 C6 |  if_b	neg	local04, #1
23b20     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23b24     3A AD 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
23b28     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23b2c     D7 08 48 FB | 	callpa	#(@LR__2943-@LR__2942)>>2,fcache_load_ptr_
23b30                 | '     repeat until long[@startupData] == 0 
23b30                 | LR__2942
23b30     3A AD 02 F6 | 	mov	local04, ptr__psram_spin2_dat__
23b34     28 AD 06 F1 | 	add	local04, #296
23b38     56 AD 0A FB | 	rdlong	local04, local04 wz
23b3c     F0 FF 9F 5D |  if_ne	jmp	#LR__2942
23b40                 | LR__2943
23b40                 | ' 
23b40                 | '     return drivercog,long[@startupData][7]
23b40     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23b44     3A 7B 02 FB | 	rdlong	result1, ptr__psram_spin2_dat__
23b48     28 74 06 F1 | 	add	ptr__psram_spin2_dat__, #40
23b4c     3A AD 02 F6 | 	mov	local04, ptr__psram_spin2_dat__
23b50     1C AC 06 F1 | 	add	local04, #28
23b54     56 7D 02 FB | 	rdlong	result2, local04
23b58     28 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #296
23b5c                 | LR__2944
23b5c     E7 F0 03 F6 | 	mov	ptra, fp
23b60     F2 00 A0 FD | 	call	#popregs_
23b64                 | _psram_spin2_startx_ret
23b64     2D 00 64 FD | 	ret
23b68                 | 
23b68                 | ' 
23b68                 | ' '..............................................................................
23b68                 | ' 
23b68                 | ' {{
23b68                 | ' }}
23b68                 | ' PUB stop() : i
23b68                 | _psram_spin2_stop
23b68     00 80 06 F6 | 	mov	_var01, #0
23b6c                 | '     if drivercog <> -1
23b6c     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23b70     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
23b74     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23b78     FF FF 7F FF 
23b7c     FF 93 0E F2 | 	cmp	arg01, ##-1 wz
23b80     70 00 90 AD |  if_e	jmp	#LR__2953
23b84                 | '         cogstop(drivercog) ' a rather brutal stop
23b84     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23b88     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
23b8c     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23b90     03 92 62 FD | 	cogstop	arg01
23b94     D7 26 48 FB | 	callpa	#(@LR__2952-@LR__2950)>>2,fcache_load_ptr_
23b98                 | '         repeat i from 0 to 7
23b98                 | LR__2950
23b98                 | '             if long[mailbox][i*3] < 0
23b98     40 7B 02 F6 | 	mov	result1, _var01
23b9c     01 7A 66 F0 | 	shl	result1, #1
23ba0     40 7B 02 F1 | 	add	result1, _var01
23ba4     02 7A 66 F0 | 	shl	result1, #2
23ba8     FF 03 00 FF 
23bac     00 7B 06 F1 | 	add	result1, ##524032
23bb0     3D 7B 02 FB | 	rdlong	result1, result1
23bb4     00 7A 56 F2 | 	cmps	result1, #0 wc
23bb8     1C 00 90 3D |  if_ae	jmp	#LR__2951
23bbc                 | '                 long[mailbox][i*3] := -ERR_ABORTED ' abort request
23bbc     40 7B 02 F6 | 	mov	result1, _var01
23bc0     01 7A 66 F0 | 	shl	result1, #1
23bc4     40 7B 02 F1 | 	add	result1, _var01
23bc8     02 7A 66 F0 | 	shl	result1, #2
23bcc     FF 03 00 FF 
23bd0     00 7B 06 F1 | 	add	result1, ##524032
23bd4     3D 21 68 FC | 	wrlong	#16, result1
23bd8                 | LR__2951
23bd8     01 80 06 F1 | 	add	_var01, #1
23bdc     08 80 56 F2 | 	cmps	_var01, #8 wc
23be0     B4 FF 9F CD |  if_b	jmp	#LR__2950
23be4                 | LR__2952
23be4                 | '         drivercog := -1
23be4     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23be8     FF FF FF FF 
23bec     3A FF 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
23bf0     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23bf4                 | LR__2953
23bf4                 | '     if driverlock <> -1
23bf4     04 75 06 F1 | 	add	ptr__psram_spin2_dat__, #260
23bf8     3A 83 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
23bfc     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
23c00     FF FF 7F FF 
23c04     FF 83 0E F2 | 	cmp	_var02, ##-1 wz
23c08                 | '         LOCKRET(driverlock)
23c08     04 75 06 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
23c0c     3A 93 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
23c10     05 92 62 5D |  if_ne	lockret	arg01
23c14                 | '         driverlock := -1
23c14     FF FF FF 5F 
23c18     3A FF 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
23c1c     04 75 86 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
23c20     40 7B 02 F6 | 	mov	result1, _var01
23c24                 | _psram_spin2_stop_ret
23c24     2D 00 64 FD | 	ret
23c28                 | 
23c28                 | ' 
23c28                 | ' '..............................................................................
23c28                 | ' 
23c28                 | ' {{
23c28                 | ' }}
23c28                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox1
23c28                 | _psram_spin2_read1
23c28                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
23c28                 | '     if drivercog == -1 ' driver must be running
23c28     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23c2c     3A 81 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
23c30     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23c34     FF FF 7F FF 
23c38     FF 81 0E F2 | 	cmp	_var01, ##-1 wz
23c3c                 | '         return ERR_INACTIVE
23c3c     0F 7A 66 A6 |  if_e	neg	result1, #15
23c40     7C 00 90 AD |  if_e	jmp	#LR__2961
23c44                 | '     if count == 0 ' don't even bother reading
23c44     00 96 0E F2 | 	cmp	arg03, #0 wz
23c48                 | '         return 0
23c48     00 7A 06 A6 |  if_e	mov	result1, #0
23c4c     70 00 90 AD |  if_e	jmp	#LR__2961
23c50                 | '     mailbox1 := mailbox + cogid()*12     ' compute COG's mailbox address
23c50     FF 03 00 FF 
23c54     00 83 06 F6 | 	mov	_var02, ##524032
23c58     00 7A 06 F6 | 	mov	result1, #0
23c5c     01 7A 62 FD | 	cogid	result1
23c60     3D 81 02 F6 | 	mov	_var01, result1
23c64     01 80 66 F0 | 	shl	_var01, #1
23c68     3D 81 02 F1 | 	add	_var01, result1
23c6c     02 80 66 F0 | 	shl	_var01, #2
23c70     40 83 02 F1 | 	add	_var02, _var01
23c74                 | '     if long[mailbox1] < 0
23c74     41 81 02 FB | 	rdlong	_var01, _var02
23c78     00 80 56 F2 | 	cmps	_var01, #0 wc
23c7c                 | '         return ERR_MAILBOX_BUSY
23c7c     1C 7A 66 C6 |  if_b	neg	result1, #28
23c80     3C 00 90 CD |  if_b	jmp	#LR__2961
23c84                 | '     long[mailbox1][2] := count
23c84     08 82 06 F1 | 	add	_var02, #8
23c88     41 97 62 FC | 	wrlong	arg03, _var02
23c8c                 | '     long[mailbox1][1] := dstHubAddr
23c8c     04 82 86 F1 | 	sub	_var02, #4
23c90     41 93 62 FC | 	wrlong	arg01, _var02
23c94     04 82 86 F1 | 	sub	_var02, #4
23c98                 | '     long[mailbox1] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
23c98     4A 85 02 F6 | 	mov	_var03, arg02
23c9c     D9 84 06 F4 | 	bitl	_var03, #217
23ca0     00 00 58 FF 
23ca4     00 80 06 F6 | 	mov	_var01, ##-1342177280
23ca8     42 81 02 F1 | 	add	_var01, _var03
23cac     41 81 62 FC | 	wrlong	_var01, _var02
23cb0                 | '     repeat
23cb0                 | LR__2960
23cb0                 | '         result := long[mailbox1]    
23cb0     41 85 02 FB | 	rdlong	_var03, _var02
23cb4     00 84 56 F2 | 	cmps	_var03, #0 wc
23cb8     F4 FF 9F CD |  if_b	jmp	#LR__2960
23cbc                 | '     while result < 0   
23cbc                 | '     return -result                       'return success or error
23cbc     42 7B 62 F6 | 	neg	result1, _var03
23cc0                 | LR__2961
23cc0                 | _psram_spin2_read1_ret
23cc0     2D 00 64 FD | 	ret
23cc4                 | 
23cc4                 | ' 
23cc4                 | ' '..............................................................................
23cc4                 | ' 
23cc4                 | ' {{
23cc4                 | ' }}
23cc4                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox1
23cc4                 | _psram_spin2_write
23cc4                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
23cc4                 | '     if drivercog == -1 ' driver must be running
23cc4     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23cc8     3A 81 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
23ccc     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23cd0     FF FF 7F FF 
23cd4     FF 81 0E F2 | 	cmp	_var01, ##-1 wz
23cd8                 | '         return ERR_INACTIVE
23cd8     0F 7A 66 A6 |  if_e	neg	result1, #15
23cdc     80 00 90 AD |  if_e	jmp	#LR__2971
23ce0                 | '     if count == 0 ' don't even bother writing
23ce0     00 96 0E F2 | 	cmp	arg03, #0 wz
23ce4                 | '         return 0
23ce4     00 7A 06 A6 |  if_e	mov	result1, #0
23ce8     74 00 90 AD |  if_e	jmp	#LR__2971
23cec                 | '     mailbox1 := mailbox + cogid()*12     ' compute COG's mailbox address
23cec     FF 03 00 FF 
23cf0     00 83 06 F6 | 	mov	_var02, ##524032
23cf4     00 7A 06 F6 | 	mov	result1, #0
23cf8     01 7A 62 FD | 	cogid	result1
23cfc     3D 81 02 F6 | 	mov	_var01, result1
23d00     01 80 66 F0 | 	shl	_var01, #1
23d04     3D 81 02 F1 | 	add	_var01, result1
23d08     02 80 66 F0 | 	shl	_var01, #2
23d0c     40 83 02 F1 | 	add	_var02, _var01
23d10                 | '     if long[mailbox] < 0
23d10     FF 03 00 FF 
23d14     00 81 06 FB | 	rdlong	_var01, ##524032
23d18     00 80 56 F2 | 	cmps	_var01, #0 wc
23d1c                 | '         return ERR_MAILBOX_BUSY
23d1c     1C 7A 66 C6 |  if_b	neg	result1, #28
23d20     3C 00 90 CD |  if_b	jmp	#LR__2971
23d24                 | '     long[mailbox1][2] := count
23d24     08 82 06 F1 | 	add	_var02, #8
23d28     41 97 62 FC | 	wrlong	arg03, _var02
23d2c                 | '     long[mailbox1][1] := srcHubAddr
23d2c     04 82 86 F1 | 	sub	_var02, #4
23d30     41 93 62 FC | 	wrlong	arg01, _var02
23d34     04 82 86 F1 | 	sub	_var02, #4
23d38                 | '     long[mailbox1] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
23d38     4A 85 02 F6 | 	mov	_var03, arg02
23d3c     D9 84 06 F4 | 	bitl	_var03, #217
23d40     00 00 78 FF 
23d44     00 80 06 F6 | 	mov	_var01, ##-268435456
23d48     42 81 02 F1 | 	add	_var01, _var03
23d4c     41 81 62 FC | 	wrlong	_var01, _var02
23d50                 | '     repeat
23d50                 | LR__2970
23d50                 | '         result := long[mailbox1]    
23d50     41 85 02 FB | 	rdlong	_var03, _var02
23d54     00 84 56 F2 | 	cmps	_var03, #0 wc
23d58     F4 FF 9F CD |  if_b	jmp	#LR__2970
23d5c                 | '     while result < 0   
23d5c                 | '     return -result                       'return success or error
23d5c     42 7B 62 F6 | 	neg	result1, _var03
23d60                 | LR__2971
23d60                 | _psram_spin2_write_ret
23d60     2D 00 64 FD | 	ret
23d64                 | 
23d64                 | ' 
23d64                 | ' ' generalized fill
23d64                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox1, req
23d64                 | _psram_spin2_fill
23d64     49 81 02 F6 | 	mov	_var01, arg01
23d68     4A 83 02 F6 | 	mov	_var02, arg02
23d6c     4B 85 02 F6 | 	mov	_var03, arg03
23d70     4D 87 02 F6 | 	mov	_var04, arg05
23d74                 | '     case datasize 
23d74     01 86 86 F1 | 	sub	_var04, #1
23d78     04 86 26 F3 | 	fle	_var04, #4
23d7c     30 86 62 FD | 	jmprel	_var04
23d80                 | LR__2980
23d80     10 00 90 FD | 	jmp	#LR__2981
23d84     18 00 90 FD | 	jmp	#LR__2982
23d88     2C 00 90 FD | 	jmp	#LR__2984
23d8c     1C 00 90 FD | 	jmp	#LR__2983
23d90     24 00 90 FD | 	jmp	#LR__2984
23d94                 | LR__2981
23d94                 | '         1: req := driver.R_WRITEBYTE
23d94     00 00 60 FF 
23d98     00 88 06 F6 | 	mov	_var05, ##-1073741824
23d9c     20 00 90 FD | 	jmp	#LR__2985
23da0                 | LR__2982
23da0                 | '         2: req := driver.R_WRITEWORD
23da0     00 00 68 FF 
23da4     00 88 06 F6 | 	mov	_var05, ##-805306368
23da8     14 00 90 FD | 	jmp	#LR__2985
23dac                 | LR__2983
23dac                 | '         4: req := driver.R_WRITELONG
23dac     00 00 70 FF 
23db0     00 88 06 F6 | 	mov	_var05, ##-536870912
23db4     08 00 90 FD | 	jmp	#LR__2985
23db8                 | LR__2984
23db8                 | '         other : return ERR_INVALID
23db8     06 7A 66 F6 | 	neg	result1, #6
23dbc     98 00 90 FD | 	jmp	#LR__2987
23dc0                 | LR__2985
23dc0                 | '     if count == 0   ' nothing to do
23dc0     00 84 0E F2 | 	cmp	_var03, #0 wz
23dc4                 | '         return 0
23dc4     00 7A 06 A6 |  if_e	mov	result1, #0
23dc8     8C 00 90 AD |  if_e	jmp	#LR__2987
23dcc                 | '     if drivercog == -1
23dcc     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23dd0     3A 87 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
23dd4     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23dd8     FF FF 7F FF 
23ddc     FF 87 0E F2 | 	cmp	_var04, ##-1 wz
23de0                 | '         return ERR_INACTIVE
23de0     0F 7A 66 A6 |  if_e	neg	result1, #15
23de4     70 00 90 AD |  if_e	jmp	#LR__2987
23de8                 | '     mailbox1 := mailbox + 12*cogid() ' get mailbox base address for this COG
23de8     FF 03 00 FF 
23dec     00 8B 06 F6 | 	mov	_var06, ##524032
23df0     00 7A 06 F6 | 	mov	result1, #0
23df4     01 7A 62 FD | 	cogid	result1
23df8     3D 87 02 F6 | 	mov	_var04, result1
23dfc     01 86 66 F0 | 	shl	_var04, #1
23e00     3D 87 02 F1 | 	add	_var04, result1
23e04     02 86 66 F0 | 	shl	_var04, #2
23e08     43 8B 02 F1 | 	add	_var06, _var04
23e0c                 | '     if long[mailbox] < 0
23e0c     FF 03 00 FF 
23e10     00 87 06 FB | 	rdlong	_var04, ##524032
23e14     00 86 56 F2 | 	cmps	_var04, #0 wc
23e18                 | '         return ERR_MAILBOX_BUSY
23e18     1C 7A 66 C6 |  if_b	neg	result1, #28
23e1c     38 00 90 CD |  if_b	jmp	#LR__2987
23e20                 | '     long[mailbox1][2] := count
23e20     08 8A 06 F1 | 	add	_var06, #8
23e24     45 85 62 FC | 	wrlong	_var03, _var06
23e28                 | '     long[mailbox1][1] := pattern
23e28     04 8A 86 F1 | 	sub	_var06, #4
23e2c     45 83 62 FC | 	wrlong	_var02, _var06
23e30     04 8A 86 F1 | 	sub	_var06, #4
23e34                 | '     long[mailbox1] := req + (addr & $1ffffff)
23e34     44 8D 02 F6 | 	mov	_var07, _var05
23e38     40 8F 02 F6 | 	mov	_var08, _var01
23e3c     D9 8E 06 F4 | 	bitl	_var08, #217
23e40     47 8D 02 F1 | 	add	_var07, _var08
23e44     45 8D 62 FC | 	wrlong	_var07, _var06
23e48                 | '     repeat
23e48                 | LR__2986
23e48                 | '         r := long[mailbox1]
23e48     45 8F 02 FB | 	rdlong	_var08, _var06
23e4c     00 8E 56 F2 | 	cmps	_var08, #0 wc
23e50     F4 FF 9F CD |  if_b	jmp	#LR__2986
23e54                 | '     while r < 0
23e54                 | '     return -r                  ' return 0 for success or negated error code
23e54     47 7B 62 F6 | 	neg	result1, _var08
23e58                 | LR__2987
23e58                 | _psram_spin2_fill_ret
23e58     2D 00 64 FD | 	ret
23e5c                 | 
23e5c                 | ' 
23e5c                 | ' '..............................................................................
23e5c                 | ' 
23e5c                 | ' {{
23e5c                 | ' }}
23e5c                 | ' PUB setQos(cog, qos) : result | mailbox1
23e5c                 | _psram_spin2_setQos
23e5c     49 81 02 F6 | 	mov	_var01, arg01
23e60                 | '     if drivercog == -1 ' driver must be running
23e60     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23e64     3A 83 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
23e68     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23e6c     FF FF 7F FF 
23e70     FF 83 0E F2 | 	cmp	_var02, ##-1 wz
23e74                 | '         return ERR_INACTIVE
23e74     0F 7A 66 A6 |  if_e	neg	result1, #15
23e78     9C 00 90 AD |  if_e	jmp	#LR__2994
23e7c                 | '     if cog < 0 or cog > 7 ' enforce cog id range
23e7c     00 80 56 F2 | 	cmps	_var01, #0 wc
23e80     08 00 90 CD |  if_b	jmp	#LR__2990
23e84     08 80 56 F2 | 	cmps	_var01, #8 wc
23e88     08 00 90 CD |  if_b	jmp	#LR__2991
23e8c                 | LR__2990
23e8c                 | '         return ERR_INVALID
23e8c     06 7A 66 F6 | 	neg	result1, #6
23e90     84 00 90 FD | 	jmp	#LR__2994
23e94                 | LR__2991
23e94                 | '     long[@qosData][cog] := qos & !$1ff
23e94     FF 95 26 F5 | 	andn	arg02, #511
23e98     C8 75 06 F1 | 	add	ptr__psram_spin2_dat__, #456
23e9c     02 80 66 F0 | 	shl	_var01, #2
23ea0     3A 81 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
23ea4     40 95 62 FC | 	wrlong	arg02, _var01
23ea8                 | '     mailbox1 := mailbox + drivercog*12
23ea8     FF 03 00 FF 
23eac     00 85 06 F6 | 	mov	_var03, ##524032
23eb0     C8 74 86 F1 | 	sub	ptr__psram_spin2_dat__, #200
23eb4     3A 87 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
23eb8     43 89 02 F6 | 	mov	_var05, _var04
23ebc     01 88 66 F0 | 	shl	_var05, #1
23ec0     43 89 02 F1 | 	add	_var05, _var04
23ec4     02 88 66 F0 | 	shl	_var05, #2
23ec8     44 85 02 F1 | 	add	_var03, _var05
23ecc                 | '     repeat until LOCKTRY(driverlock)
23ecc     04 74 06 F1 | 	add	ptr__psram_spin2_dat__, #4
23ed0                 | LR__2992
23ed0     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
23ed4     06 92 72 FD | 	locktry	arg01 wc
23ed8     F4 FF 9F 3D |  if_ae	jmp	#LR__2992
23edc     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
23ee0                 | '     long[mailbox1] := driver.R_CONFIG + cogid()
23ee0     00 88 06 F6 | 	mov	_var05, #0
23ee4     01 88 62 FD | 	cogid	_var05
23ee8     00 00 78 FF 
23eec     00 82 06 F6 | 	mov	_var02, ##-268435456
23ef0     44 83 02 F1 | 	add	_var02, _var05
23ef4     42 83 62 FC | 	wrlong	_var02, _var03
23ef8                 | '     repeat while long[mailbox1] < 0
23ef8                 | LR__2993
23ef8     42 83 02 FB | 	rdlong	_var02, _var03
23efc     00 82 56 F2 | 	cmps	_var02, #0 wc
23f00     F4 FF 9F CD |  if_b	jmp	#LR__2993
23f04                 | '     LOCKREL(driverlock)
23f04     04 75 06 F1 | 	add	ptr__psram_spin2_dat__, #260
23f08     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
23f0c     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
23f10     07 92 72 FD | 	lockrel	arg01 wc
23f14     00 7A 06 F6 | 	mov	result1, #0
23f18                 | LR__2994
23f18                 | _psram_spin2_setQos_ret
23f18     2D 00 64 FD | 	ret
23f1c                 | 
23f1c                 | ' 
23f1c                 | ' '..............................................................................
23f1c                 | ' 
23f1c                 | ' {{
23f1c                 | ' }}
23f1c                 | ' PRI lookupDelay(freq) : delay | profile
23f1c                 | _psram_spin2_lookupDelay
23f1c                 | '     profile := @delayTable
23f1c     3A 81 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
23f20     08 81 06 F1 | 	add	_var01, #264
23f24                 | '     delay := long[profile][0]
23f24     40 83 02 FB | 	rdlong	_var02, _var01
23f28     D7 16 48 FB | 	callpa	#(@LR__3001-@LR__3000)>>2,fcache_load_ptr_
23f2c                 | '     repeat while long[profile][1] 
23f2c                 | LR__3000
23f2c     04 80 06 F1 | 	add	_var01, #4
23f30     40 7B 0A FB | 	rdlong	result1, _var01 wz
23f34     04 80 86 F1 | 	sub	_var01, #4
23f38     1C 00 90 AD |  if_e	jmp	#LR__3002
23f3c                 | '         if freq +< long[profile][1] 
23f3c     04 80 06 F1 | 	add	_var01, #4
23f40     40 7B 02 FB | 	rdlong	result1, _var01
23f44     04 80 86 F1 | 	sub	_var01, #4
23f48     3D 93 12 F2 | 	cmp	arg01, result1 wc
23f4c                 | '             quit
23f4c                 | '         profile += 4
23f4c     04 80 06 31 |  if_ae	add	_var01, #4
23f50                 | '         delay++
23f50     01 82 06 31 |  if_ae	add	_var02, #1
23f54     D4 FF 9F 3D |  if_ae	jmp	#LR__3000
23f58                 | LR__3001
23f58                 | LR__3002
23f58     41 7B 02 F6 | 	mov	result1, _var02
23f5c                 | _psram_spin2_lookupDelay_ret
23f5c     2D 00 64 FD | 	ret
23f60                 | 
23f60                 | ' 
23f60                 | ' PUB start() : r
23f60                 | _usbnew_spin2_start
23f60     00 80 06 F6 | 	mov	_var01, #0
23f64                 | '   ifnot driver_cog
23f64     15 00 00 FF 
23f68     87 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10887
23f6c     3B 83 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
23f70     15 00 00 FF 
23f74     87 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10887
23f78     38 00 90 5D |  if_ne	jmp	#LR__3010
23f7c                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
23f7c     3B 95 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
23f80     10 80 06 F6 | 	mov	_var01, #16
23f84     00 96 06 F6 | 	mov	arg03, #0
23f88     28 96 62 FD | 	setq	arg03
23f8c     4A 81 F2 FC | 	coginit	_var01, arg02 wc
23f90     01 80 66 C6 |  if_b	neg	_var01, #1
23f94                 | '     if r >= 0
23f94     00 80 56 F2 | 	cmps	_var01, #0 wc
23f98                 | '       driver_cog := r+1
23f98     40 83 02 36 |  if_ae	mov	_var02, _var01
23f9c     01 82 06 31 |  if_ae	add	_var02, #1
23fa0     15 00 00 3F 
23fa4     87 76 06 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10887
23fa8     3B 83 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
23fac     15 00 00 3F 
23fb0     87 76 86 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10887
23fb4                 | LR__3010
23fb4     40 7B 02 F6 | 	mov	result1, _var01
23fb8                 | _usbnew_spin2_start_ret
23fb8     2D 00 64 FD | 	ret
23fbc                 | 
23fbc                 | '     '' (Always enabled)
23fbc                 | ' 
23fbc                 | ' '' Get current pressed state of a keyboard key
23fbc                 | ' PUB keystate(key) : r | buf[2],tmp
23fbc                 | _usbnew_spin2_keystate
23fbc     00 84 06 F6 | 	mov	_var03, #0
23fc0                 | '   if key >= $E0 && key < $E8
23fc0     E0 92 56 F2 | 	cmps	arg01, #224 wc
23fc4     30 00 90 CD |  if_b	jmp	#LR__3020
23fc8     E8 92 56 F2 | 	cmps	arg01, #232 wc
23fcc     28 00 90 3D |  if_ae	jmp	#LR__3020
23fd0                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
23fd0     00 7A 06 F6 | 	mov	result1, #0
23fd4     3B 87 02 F6 | 	mov	_var04, ptr__usbnew_spin2_dat__
23fd8     13 00 00 FF 
23fdc     D8 87 06 F1 | 	add	_var04, ##10200
23fe0     49 89 02 F6 | 	mov	_var05, arg01
23fe4     E0 88 86 F1 | 	sub	_var05, #224
23fe8     43 8B C2 FA | 	rdbyte	_var06, _var04
23fec     44 8B 4A F0 | 	shr	_var06, _var05 wz
23ff0     01 7A 66 56 |  if_ne	neg	result1, #1
23ff4     50 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
23ff8                 | LR__3020
23ff8                 | '   else
23ff8                 | '     '' Do this in inline ASM to ensure atomicity
23ff8                 | '     tmp := @hkbd_report
23ff8     3B 8B 02 F6 | 	mov	_var06, ptr__usbnew_spin2_dat__
23ffc     13 00 00 FF 
24000     D8 8B 06 F1 | 	add	_var06, ##10200
24004                 | '     org
24004     D7 1E 48 FB | 	callpa	#(@LR__3022-@LR__3021)>>2,fcache_load_ptr_
24008                 | LR__3021
24008 000             | 	org	0
24008 000 28 02 64 FD | 	setq	#1
2400c 001 45 81 02 FB | 	rdlong	_var01, _var06
24010 002 40 8D F2 F8 | 	getbyte	_var07, _var01, #2
24014 003 49 8D 0A F2 | 	cmp	_var07, arg01 wz
24018 004 40 8D FA F8 | 	getbyte	_var07, _var01, #3
2401c 005 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
24020 006 41 8D E2 F8 | 	getbyte	_var07, _var02, #0
24024 007 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
24028 008 41 8D EA F8 | 	getbyte	_var07, _var02, #1
2402c 009 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
24030 00a 41 8D F2 F8 | 	getbyte	_var07, _var02, #2
24034 00b 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
24038 00c 41 8D FA F8 | 	getbyte	_var07, _var02, #3
2403c 00d 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
24040 00e 01 84 66 A6 |  if_e	neg	_var03, #1
24044 00f             | 	fit	192
24044 00f             | LR__3022
24044                 | 	orgh
24044     42 7B 02 F6 | 	mov	result1, _var03
24048                 | _usbnew_spin2_keystate_ret
24048     2D 00 64 FD | 	ret
2404c                 | 
2404c                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
2404c                 | ' 
2404c                 | ' '' Return key event from buffer if there is one
2404c                 | ' PUB get_key() : r | tail
2404c                 | _usbnew_spin2_get_key
2404c                 | '   tail := keyq_tail
2404c     0F 00 00 FF 
24050     D5 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
24054     3B 81 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
24058                 | '   if keyq_head == tail
24058     01 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
2405c     3B 83 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
24060     0F 00 00 FF 
24064     D4 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7892
24068     40 83 0A F2 | 	cmp	_var02, _var01 wz
2406c                 | '     return 0 ' No event
2406c     00 7A 06 A6 |  if_e	mov	result1, #0
24070     3C 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
24074                 | '   r := keyq_data[tail]
24074     40 83 02 F6 | 	mov	_var02, _var01
24078     02 82 66 F0 | 	shl	_var02, #2
2407c     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
24080     0F 00 00 FF 
24084     D6 7A 06 F1 | 	add	result1, ##7894
24088     3D 83 02 F1 | 	add	_var02, result1
2408c     41 7B 02 FB | 	rdlong	result1, _var02
24090                 | '   if ++tail == KEYQUEUE_SIZE
24090     01 80 06 F1 | 	add	_var01, #1
24094     80 80 0E F2 | 	cmp	_var01, #128 wz
24098                 | '     tail := 0
24098     00 80 06 A6 |  if_e	mov	_var01, #0
2409c                 | '   keyq_tail := tail
2409c     0F 00 00 FF 
240a0     D5 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
240a4     3B 81 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
240a8     0F 00 00 FF 
240ac     D5 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7893
240b0                 | _usbnew_spin2_get_key_ret
240b0     2D 00 64 FD | 	ret
240b4                 | 
240b4                 | ' 
240b4                 | ' '' Emulate mouse movement
240b4                 | ' PUB mouse_move(x,y)
240b4                 | _usbnew_spin2_mouse_move
240b4     02 CA 05 F6 | 	mov	COUNT_, #2
240b8     E8 00 A0 FD | 	call	#pushregs_
240bc     49 A7 02 F6 | 	mov	local01, arg01
240c0     4A A9 02 F6 | 	mov	local02, arg02
240c4                 | '   mouse_lock := 1
240c4     14 00 00 FF 
240c8     F1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
240cc     3B 03 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
240d0     14 00 00 FF 
240d4     F1 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
240d8                 | '   waitus(2) ' hope driver is now done
240d8     02 92 06 F6 | 	mov	arg01, #2
240dc     24 0E B0 FD | 	call	#__system___waitus
240e0                 | '   mouse_xacc := x
240e0     14 00 00 FF 
240e4     E1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
240e8     3B A7 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
240ec                 | '   mouse_yacc := y
240ec     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
240f0     3B A9 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
240f4                 | '   if mouse_outptr
240f4     05 00 00 FF 
240f8     15 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2581
240fc     3B 95 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
24100     0F 00 00 FF 
24104     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
24108     24 00 90 AD |  if_e	jmp	#LR__3030
2410c                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
2410c     10 A8 66 F0 | 	shl	local02, #16
24110     53 A7 32 F9 | 	getword	local01, local01, #0
24114     53 A9 42 F5 | 	or	local02, local01
24118     0F 00 00 FF 
2411c     D0 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7888
24120     3B A7 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
24124     0F 00 00 FF 
24128     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
2412c     53 A9 62 FC | 	wrlong	local02, local01
24130                 | LR__3030
24130                 | '   mouse_lock := 0
24130     14 00 00 FF 
24134     F1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
24138     3B 01 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
2413c     14 00 00 FF 
24140     F1 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
24144     E7 F0 03 F6 | 	mov	ptra, fp
24148     F2 00 A0 FD | 	call	#popregs_
2414c                 | _usbnew_spin2_mouse_move_ret
2414c     2D 00 64 FD | 	ret
24150                 | 
24150                 | ' 
24150                 | ' '' Get state of an axis (normalized between -32768 and 32767)
24150                 | ' PUB hidpad_axis(dev,axnum) : r
24150                 | _usbnew_spin2_hidpad_axis
24150                 | '   if axnum +>= 8
24150     08 94 16 F2 | 	cmp	arg02, #8 wc
24154                 | '     return 0
24154     00 7A 06 36 |  if_ae	mov	result1, #0
24158     2C 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
2415c                 | '   else 
2415c                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
2415c     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
24160     13 00 00 FF 
24164     F8 7B 06 F1 | 	add	result1, ##10232
24168     05 92 66 F0 | 	shl	arg01, #5
2416c     49 7B 02 F1 | 	add	result1, arg01
24170     04 92 06 F6 | 	mov	arg01, #4
24174     4A 93 02 F1 | 	add	arg01, arg02
24178     01 92 66 F0 | 	shl	arg01, #1
2417c     3D 93 02 F1 | 	add	arg01, result1
24180     49 7B E2 FA | 	rdword	result1, arg01
24184     0F 7A 66 F7 | 	signx	result1, #15
24188                 | _usbnew_spin2_hidpad_axis_ret
24188     2D 00 64 FD | 	ret
2418c                 | 
2418c                 | ' 
2418c                 | ' '' Get state of a hat
2418c                 | ' PUB hidpad_hat(dev,hatnum) : r
2418c                 | _usbnew_spin2_hidpad_hat
2418c                 | '   if hatnum +>= 4
2418c     04 94 16 F2 | 	cmp	arg02, #4 wc
24190                 | '     return 0
24190     00 7A 06 36 |  if_ae	mov	result1, #0
24194     24 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
24198                 | '   else 
24198                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][7*4+hatnum]
24198     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
2419c     13 00 00 FF 
241a0     F8 7B 06 F1 | 	add	result1, ##10232
241a4     05 92 66 F0 | 	shl	arg01, #5
241a8     49 7B 02 F1 | 	add	result1, arg01
241ac     1C 92 06 F6 | 	mov	arg01, #28
241b0     4A 93 02 F1 | 	add	arg01, arg02
241b4     3D 93 02 F1 | 	add	arg01, result1
241b8     49 7B C2 FA | 	rdbyte	result1, arg01
241bc                 | _usbnew_spin2_hidpad_hat_ret
241bc     2D 00 64 FD | 	ret
241c0                 | 
241c0                 | ' 
241c0                 | ' '--------------------------------------------------------------
241c0                 | ' '---------- Init the variables, start the cog. ----------------
241c0                 | ' '--------------------------------------------------------------
241c0                 | ' 
241c0                 | ' pub start(mbox,scope,cache) :cog,base | iii
241c0                 | _Audio2_004_spin2_start
241c0     04 CA 05 F6 | 	mov	COUNT_, #4
241c4     E8 00 A0 FD | 	call	#pushregs_
241c8     49 A7 02 F6 | 	mov	local01, arg01
241cc                 | ' 
241cc                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
241cc                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
241cc                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
241cc                 | ' 
241cc                 | ' mailboxaddr:=mbox 
241cc     32 A7 62 FC | 	wrlong	local01, objptr
241d0                 | ' scope_ptr:=scope
241d0     04 64 06 F1 | 	add	objptr, #4
241d4     32 95 62 FC | 	wrlong	arg02, objptr
241d8                 | ' cache_ptr:=cache
241d8     04 64 06 F1 | 	add	objptr, #4
241dc     32 97 62 FC | 	wrlong	arg03, objptr
241e0                 | ' base:=@channel0[0]
241e0     04 64 06 F1 | 	add	objptr, #4
241e4     32 A9 02 F6 | 	mov	local02, objptr
241e8                 | ' 
241e8                 | ' repeat iii from 0 to 15
241e8     00 AA 06 F6 | 	mov	local03, #0
241ec     0C 64 86 F1 | 	sub	objptr, #12
241f0     D7 1A 49 FB | 	callpa	#(@LR__3041-@LR__3040)>>2,fcache_load_ptr_
241f4                 | LR__3040
241f4                 | '   long[base+64*iii]:=0
241f4     54 A7 02 F6 | 	mov	local01, local02
241f8     55 7D 02 F6 | 	mov	result2, local03
241fc     06 7C 66 F0 | 	shl	result2, #6
24200     3E A7 02 F1 | 	add	local01, result2
24204     53 01 68 FC | 	wrlong	#0, local01
24208                 | '   long[base+64*iii+4]:=0  		
24208     54 A7 02 F6 | 	mov	local01, local02
2420c     55 7D 02 F6 | 	mov	result2, local03
24210     06 7C 66 F0 | 	shl	result2, #6
24214     3E A7 02 F1 | 	add	local01, result2
24218     04 A6 06 F1 | 	add	local01, #4
2421c     53 01 68 FC | 	wrlong	#0, local01
24220                 | '   long[base+64*iii+8]:=0
24220     54 AD 02 F6 | 	mov	local04, local02
24224     55 A7 02 F6 | 	mov	local01, local03
24228     06 A6 66 F0 | 	shl	local01, #6
2422c     53 AD 02 F1 | 	add	local04, local01
24230     08 AC 06 F1 | 	add	local04, #8
24234     56 01 68 FC | 	wrlong	#0, local04
24238                 | '   long[base+64*iii+12]:=0
24238     54 AD 02 F6 | 	mov	local04, local02
2423c     55 A7 02 F6 | 	mov	local01, local03
24240     06 A6 66 F0 | 	shl	local01, #6
24244     53 AD 02 F1 | 	add	local04, local01
24248     0C AC 06 F1 | 	add	local04, #12
2424c     56 01 68 FC | 	wrlong	#0, local04
24250                 | '   long[base+64*iii+16]:=0
24250     54 AD 02 F6 | 	mov	local04, local02
24254     55 A7 02 F6 | 	mov	local01, local03
24258     06 A6 66 F0 | 	shl	local01, #6
2425c     53 AD 02 F1 | 	add	local04, local01
24260     10 AC 06 F1 | 	add	local04, #16
24264     56 01 68 FC | 	wrlong	#0, local04
24268                 | '   long[base+64*iii+20]:=0
24268     54 AD 02 F6 | 	mov	local04, local02
2426c     55 A7 02 F6 | 	mov	local01, local03
24270     06 A6 66 F0 | 	shl	local01, #6
24274     53 AD 02 F1 | 	add	local04, local01
24278     14 AC 06 F1 | 	add	local04, #20
2427c     56 01 68 FC | 	wrlong	#0, local04
24280                 | '   long[base+64*iii+24]:=0
24280     54 AD 02 F6 | 	mov	local04, local02
24284     55 A7 02 F6 | 	mov	local01, local03
24288     06 A6 66 F0 | 	shl	local01, #6
2428c     53 AD 02 F1 | 	add	local04, local01
24290     18 AC 06 F1 | 	add	local04, #24
24294     56 01 68 FC | 	wrlong	#0, local04
24298                 | '   long[base+64*iii+28]:=0
24298     54 AD 02 F6 | 	mov	local04, local02
2429c     55 A7 02 F6 | 	mov	local01, local03
242a0     06 A6 66 F0 | 	shl	local01, #6
242a4     53 AD 02 F1 | 	add	local04, local01
242a8     1C AC 06 F1 | 	add	local04, #28
242ac     56 01 68 FC | 	wrlong	#0, local04
242b0                 | '   word[base+64*iii+32]:=8192
242b0     54 AD 02 F6 | 	mov	local04, local02
242b4     55 A7 02 F6 | 	mov	local01, local03
242b8     06 A6 66 F0 | 	shl	local01, #6
242bc     53 AD 02 F1 | 	add	local04, local01
242c0     20 AC 06 F1 | 	add	local04, #32
242c4     10 00 80 FF 
242c8     56 01 58 FC | 	wrword	##8192, local04
242cc                 | '   word[base+64*iii+34]:=8192
242cc     54 AD 02 F6 | 	mov	local04, local02
242d0     55 A7 02 F6 | 	mov	local01, local03
242d4     06 A6 66 F0 | 	shl	local01, #6
242d8     53 AD 02 F1 | 	add	local04, local01
242dc     22 AC 06 F1 | 	add	local04, #34
242e0     10 00 80 FF 
242e4     56 01 58 FC | 	wrword	##8192, local04
242e8                 | '   long[base+64*iii+36]:=0
242e8     54 AD 02 F6 | 	mov	local04, local02
242ec     55 A7 02 F6 | 	mov	local01, local03
242f0     06 A6 66 F0 | 	shl	local01, #6
242f4     53 AD 02 F1 | 	add	local04, local01
242f8     24 AC 06 F1 | 	add	local04, #36
242fc     56 01 68 FC | 	wrlong	#0, local04
24300                 | '   long[base+64*iii+40]:=0
24300     54 AD 02 F6 | 	mov	local04, local02
24304     55 A7 02 F6 | 	mov	local01, local03
24308     06 A6 66 F0 | 	shl	local01, #6
2430c     53 AD 02 F1 | 	add	local04, local01
24310     28 AC 06 F1 | 	add	local04, #40
24314     56 01 68 FC | 	wrlong	#0, local04
24318                 | '   long[base+64*iii+44]:=0
24318     54 AD 02 F6 | 	mov	local04, local02
2431c     55 A7 02 F6 | 	mov	local01, local03
24320     06 A6 66 F0 | 	shl	local01, #6
24324     53 AD 02 F1 | 	add	local04, local01
24328     2C AC 06 F1 | 	add	local04, #44
2432c     56 01 68 FC | 	wrlong	#0, local04
24330                 | '   long[base+64*iii+48]:=0
24330     54 AD 02 F6 | 	mov	local04, local02
24334     55 A7 02 F6 | 	mov	local01, local03
24338     06 A6 66 F0 | 	shl	local01, #6
2433c     53 AD 02 F1 | 	add	local04, local01
24340     30 AC 06 F1 | 	add	local04, #48
24344     56 01 68 FC | 	wrlong	#0, local04
24348                 | '   long[base+64*iii+52]:=0
24348     54 AD 02 F6 | 	mov	local04, local02
2434c     55 A7 02 F6 | 	mov	local01, local03
24350     06 A6 66 F0 | 	shl	local01, #6
24354     53 AD 02 F1 | 	add	local04, local01
24358     34 AC 06 F1 | 	add	local04, #52
2435c     56 01 68 FC | 	wrlong	#0, local04
24360                 | '   freqs[iii]:=440000
24360     55 AD 02 F6 | 	mov	local04, local03
24364     02 AC 66 F0 | 	shl	local04, #2
24368     02 00 00 FF 
2436c     0C 64 06 F1 | 	add	objptr, ##1036
24370     32 AD 02 F1 | 	add	local04, objptr
24374     5B 03 80 FF 
24378     56 81 69 FC | 	wrlong	##440000, local04
2437c                 | '   delays[iii]:=0
2437c     55 AD 02 F6 | 	mov	local04, local03
24380     01 AC 66 F0 | 	shl	local04, #1
24384     40 64 06 F1 | 	add	objptr, #64
24388     32 AD 02 F1 | 	add	local04, objptr
2438c     56 01 58 FC | 	wrword	#0, local04
24390                 | '   volumes[iii]:=4096
24390     55 AD 02 F6 | 	mov	local04, local03
24394     01 AC 66 F0 | 	shl	local04, #1
24398     20 64 06 F1 | 	add	objptr, #32
2439c     32 AD 02 F1 | 	add	local04, objptr
243a0     08 00 80 FF 
243a4     56 01 58 FC | 	wrword	##4096, local04
243a8                 | '   waveforms[iii]:=0
243a8     55 AD 02 F6 | 	mov	local04, local03
243ac     02 AC 66 F0 | 	shl	local04, #2
243b0     20 64 06 F1 | 	add	objptr, #32
243b4     32 AD 02 F1 | 	add	local04, objptr
243b8     56 01 68 FC | 	wrlong	#0, local04
243bc                 | '   envelopes[iii]:=0
243bc     55 AD 02 F6 | 	mov	local04, local03
243c0     02 AC 66 F0 | 	shl	local04, #2
243c4     40 64 06 F1 | 	add	objptr, #64
243c8     32 AD 02 F1 | 	add	local04, objptr
243cc     56 01 68 FC | 	wrlong	#0, local04
243d0                 | '   lengths[iii]:=1000
243d0     55 AD 02 F6 | 	mov	local04, local03
243d4     01 AC 66 F0 | 	shl	local04, #1
243d8     40 64 06 F1 | 	add	objptr, #64
243dc     32 AD 02 F1 | 	add	local04, objptr
243e0     01 00 80 FF 
243e4     56 D1 5B FC | 	wrword	##1000, local04
243e8                 | '   pans[iii]:=8192
243e8     55 AD 02 F6 | 	mov	local04, local03
243ec     01 AC 66 F0 | 	shl	local04, #1
243f0     20 64 06 F1 | 	add	objptr, #32
243f4     32 AD 02 F1 | 	add	local04, objptr
243f8     10 00 80 FF 
243fc     56 01 58 FC | 	wrword	##8192, local04
24400                 | '   sustains[iii]:=255
24400     55 AD 02 F6 | 	mov	local04, local03
24404     01 AC 66 F0 | 	shl	local04, #1
24408     20 64 06 F1 | 	add	objptr, #32
2440c     32 AD 02 F1 | 	add	local04, objptr
24410     56 FF 59 FC | 	wrword	#255, local04
24414     01 AA 06 F1 | 	add	local03, #1
24418     10 AA 56 F2 | 	cmps	local03, #16 wc
2441c     02 00 00 FF 
24420     4C 65 86 F1 | 	sub	objptr, ##1356
24424     CC FD 9F CD |  if_b	jmp	#LR__3040
24428                 | LR__3041
24428                 | '   
24428                 | ' cog:=coginit(16,@audio,@mailboxaddr)
24428     33 95 02 F6 | 	mov	arg02, ptr__Audio2_004_spin2_dat__
2442c     32 97 02 F6 | 	mov	arg03, objptr
24430     10 AC 06 F6 | 	mov	local04, #16
24434     28 96 62 FD | 	setq	arg03
24438     4A AD F2 FC | 	coginit	local04, arg02 wc
2443c     01 AC 66 C6 |  if_b	neg	local04, #1
24440                 | ' waitms(10)
24440     0A 92 06 F6 | 	mov	arg01, #10
24444     50 0A B0 FD | 	call	#__system___waitms
24448                 | ' return cog,base
24448     54 7D 02 F6 | 	mov	result2, local02
2444c     56 7B 02 F6 | 	mov	result1, local04
24450     E7 F0 03 F6 | 	mov	ptra, fp
24454     F2 00 A0 FD | 	call	#popregs_
24458                 | _Audio2_004_spin2_start_ret
24458     2D 00 64 FD | 	ret
2445c                 | 
2445c                 | ' 
2445c                 | ' pub play (channel, frequency=-1, delay=-1, volume=-1, waveform=-1, envelope=-1, length=-1, pan=-1, sustain=-1) | base2
2445c                 | _Audio2_004_spin2_play
2445c     0B CA 05 F6 | 	mov	COUNT_, #11
24460     E8 00 A0 FD | 	call	#pushregs_
24464     49 A7 02 F6 | 	mov	local01, arg01
24468     4A A9 02 F6 | 	mov	local02, arg02
2446c     4B AB 02 F6 | 	mov	local03, arg03
24470     4C AD 02 F6 | 	mov	local04, arg04
24474     4D AF 02 F6 | 	mov	local05, arg05
24478     4E B1 02 F6 | 	mov	local06, arg06
2447c     4F B3 02 F6 | 	mov	local07, arg07
24480     50 B5 02 F6 | 	mov	local08, arg08
24484     51 B7 02 F6 | 	mov	local09, arg09
24488                 | ' 
24488                 | ' if frequency==(-1)
24488     FF FF 7F FF 
2448c     FF A9 0E F2 | 	cmp	local02, ##-1 wz
24490     20 00 90 5D |  if_ne	jmp	#LR__3050
24494                 | '   frequency:=freqs[channel]
24494     53 A9 02 F6 | 	mov	local02, local01
24498     02 A8 66 F0 | 	shl	local02, #2
2449c     32 B9 02 F6 | 	mov	local10, objptr
244a0     02 00 00 FF 
244a4     0C B8 06 F1 | 	add	local10, ##1036
244a8     5C A9 02 F1 | 	add	local02, local10
244ac     54 A9 02 FB | 	rdlong	local02, local02
244b0     1C 00 90 FD | 	jmp	#LR__3051
244b4                 | LR__3050
244b4                 | ' else
244b4                 | '   freqs[channel]:=frequency
244b4     53 BB 02 F6 | 	mov	local11, local01
244b8     02 BA 66 F0 | 	shl	local11, #2
244bc     32 B9 02 F6 | 	mov	local10, objptr
244c0     02 00 00 FF 
244c4     0C B8 06 F1 | 	add	local10, ##1036
244c8     5C BB 02 F1 | 	add	local11, local10
244cc     5D A9 62 FC | 	wrlong	local02, local11
244d0                 | LR__3051
244d0                 | '   
244d0                 | ' if delay==(-1)
244d0     FF FF 7F FF 
244d4     FF AB 0E F2 | 	cmp	local03, ##-1 wz
244d8     20 00 90 5D |  if_ne	jmp	#LR__3052
244dc                 | '   delay:=delays[channel]
244dc     53 B9 02 F6 | 	mov	local10, local01
244e0     01 B8 66 F0 | 	shl	local10, #1
244e4     32 BB 02 F6 | 	mov	local11, objptr
244e8     02 00 00 FF 
244ec     4C BA 06 F1 | 	add	local11, ##1100
244f0     5D B9 02 F1 | 	add	local10, local11
244f4     5C AB E2 FA | 	rdword	local03, local10
244f8     1C 00 90 FD | 	jmp	#LR__3053
244fc                 | LR__3052
244fc                 | ' else
244fc                 | '   delays[channel]:=delay
244fc     53 B9 02 F6 | 	mov	local10, local01
24500     01 B8 66 F0 | 	shl	local10, #1
24504     32 BB 02 F6 | 	mov	local11, objptr
24508     02 00 00 FF 
2450c     4C BA 06 F1 | 	add	local11, ##1100
24510     5D B9 02 F1 | 	add	local10, local11
24514     5C AB 52 FC | 	wrword	local03, local10
24518                 | LR__3053
24518                 | '   
24518                 | ' if volume==(-1)      
24518     FF FF 7F FF 
2451c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
24520     20 00 90 5D |  if_ne	jmp	#LR__3054
24524                 | '   volume:=volumes[channel]
24524     53 B9 02 F6 | 	mov	local10, local01
24528     01 B8 66 F0 | 	shl	local10, #1
2452c     32 BB 02 F6 | 	mov	local11, objptr
24530     02 00 00 FF 
24534     6C BA 06 F1 | 	add	local11, ##1132
24538     5D B9 02 F1 | 	add	local10, local11
2453c     5C AD E2 FA | 	rdword	local04, local10
24540     1C 00 90 FD | 	jmp	#LR__3055
24544                 | LR__3054
24544                 | ' else
24544                 | '   volumes[channel]:=volume
24544     53 B9 02 F6 | 	mov	local10, local01
24548     01 B8 66 F0 | 	shl	local10, #1
2454c     32 BB 02 F6 | 	mov	local11, objptr
24550     02 00 00 FF 
24554     6C BA 06 F1 | 	add	local11, ##1132
24558     5D B9 02 F1 | 	add	local10, local11
2455c     5C AD 52 FC | 	wrword	local04, local10
24560                 | LR__3055
24560                 | '   
24560                 | ' if waveform==(-1)
24560     FF FF 7F FF 
24564     FF AF 0E F2 | 	cmp	local05, ##-1 wz
24568     20 00 90 5D |  if_ne	jmp	#LR__3056
2456c                 | '   waveform:=waveforms[channel]
2456c     53 BB 02 F6 | 	mov	local11, local01
24570     02 BA 66 F0 | 	shl	local11, #2
24574     32 B9 02 F6 | 	mov	local10, objptr
24578     02 00 00 FF 
2457c     8C B8 06 F1 | 	add	local10, ##1164
24580     5C BB 02 F1 | 	add	local11, local10
24584     5D AF 02 FB | 	rdlong	local05, local11
24588     1C 00 90 FD | 	jmp	#LR__3057
2458c                 | LR__3056
2458c                 | ' else
2458c                 | '   waveforms[channel]:=waveform
2458c     53 BB 02 F6 | 	mov	local11, local01
24590     02 BA 66 F0 | 	shl	local11, #2
24594     32 B9 02 F6 | 	mov	local10, objptr
24598     02 00 00 FF 
2459c     8C B8 06 F1 | 	add	local10, ##1164
245a0     5C BB 02 F1 | 	add	local11, local10
245a4     5D AF 62 FC | 	wrlong	local05, local11
245a8                 | LR__3057
245a8                 | '   
245a8                 | ' if envelope==(-1)
245a8     FF FF 7F FF 
245ac     FF B1 0E F2 | 	cmp	local06, ##-1 wz
245b0     20 00 90 5D |  if_ne	jmp	#LR__3058
245b4                 | '   envelope:=envelopes[channel]
245b4     53 BB 02 F6 | 	mov	local11, local01
245b8     02 BA 66 F0 | 	shl	local11, #2
245bc     32 B9 02 F6 | 	mov	local10, objptr
245c0     02 00 00 FF 
245c4     CC B8 06 F1 | 	add	local10, ##1228
245c8     5C BB 02 F1 | 	add	local11, local10
245cc     5D B1 02 FB | 	rdlong	local06, local11
245d0     1C 00 90 FD | 	jmp	#LR__3059
245d4                 | LR__3058
245d4                 | ' else
245d4                 | '   envelopes[channel]:=envelope
245d4     53 BB 02 F6 | 	mov	local11, local01
245d8     02 BA 66 F0 | 	shl	local11, #2
245dc     32 B9 02 F6 | 	mov	local10, objptr
245e0     02 00 00 FF 
245e4     CC B8 06 F1 | 	add	local10, ##1228
245e8     5C BB 02 F1 | 	add	local11, local10
245ec     5D B1 62 FC | 	wrlong	local06, local11
245f0                 | LR__3059
245f0                 | '   
245f0                 | ' if length==(-1)
245f0     FF FF 7F FF 
245f4     FF B3 0E F2 | 	cmp	local07, ##-1 wz
245f8     20 00 90 5D |  if_ne	jmp	#LR__3060
245fc                 | '   length:=lengths[channel]
245fc     53 B9 02 F6 | 	mov	local10, local01
24600     01 B8 66 F0 | 	shl	local10, #1
24604     32 BB 02 F6 | 	mov	local11, objptr
24608     02 00 00 FF 
2460c     0C BB 06 F1 | 	add	local11, ##1292
24610     5D B9 02 F1 | 	add	local10, local11
24614     5C B3 E2 FA | 	rdword	local07, local10
24618     1C 00 90 FD | 	jmp	#LR__3061
2461c                 | LR__3060
2461c                 | ' else
2461c                 | '   lengths[channel]:=length
2461c     53 B9 02 F6 | 	mov	local10, local01
24620     01 B8 66 F0 | 	shl	local10, #1
24624     32 BB 02 F6 | 	mov	local11, objptr
24628     02 00 00 FF 
2462c     0C BB 06 F1 | 	add	local11, ##1292
24630     5D B9 02 F1 | 	add	local10, local11
24634     5C B3 52 FC | 	wrword	local07, local10
24638                 | LR__3061
24638                 | '   
24638                 | ' if pan==(-1)
24638     FF FF 7F FF 
2463c     FF B5 0E F2 | 	cmp	local08, ##-1 wz
24640     20 00 90 5D |  if_ne	jmp	#LR__3062
24644                 | '   pan:=pans[channel]
24644     53 B9 02 F6 | 	mov	local10, local01
24648     01 B8 66 F0 | 	shl	local10, #1
2464c     32 BB 02 F6 | 	mov	local11, objptr
24650     02 00 00 FF 
24654     2C BB 06 F1 | 	add	local11, ##1324
24658     5D B9 02 F1 | 	add	local10, local11
2465c     5C B5 E2 FA | 	rdword	local08, local10
24660     1C 00 90 FD | 	jmp	#LR__3063
24664                 | LR__3062
24664                 | ' else
24664                 | '   pans[channel]:=pan
24664     53 B9 02 F6 | 	mov	local10, local01
24668     01 B8 66 F0 | 	shl	local10, #1
2466c     32 BB 02 F6 | 	mov	local11, objptr
24670     02 00 00 FF 
24674     2C BB 06 F1 | 	add	local11, ##1324
24678     5D B9 02 F1 | 	add	local10, local11
2467c     5C B5 52 FC | 	wrword	local08, local10
24680                 | LR__3063
24680                 | '  
24680                 | ' if sustain==(-1)
24680     FF FF 7F FF 
24684     FF B7 0E F2 | 	cmp	local09, ##-1 wz
24688     20 00 90 5D |  if_ne	jmp	#LR__3064
2468c                 | '   sustain:=sustains[channel]
2468c     53 B9 02 F6 | 	mov	local10, local01
24690     01 B8 66 F0 | 	shl	local10, #1
24694     32 BB 02 F6 | 	mov	local11, objptr
24698     02 00 00 FF 
2469c     4C BB 06 F1 | 	add	local11, ##1356
246a0     5D B9 02 F1 | 	add	local10, local11
246a4     5C B7 E2 FA | 	rdword	local09, local10
246a8     1C 00 90 FD | 	jmp	#LR__3065
246ac                 | LR__3064
246ac                 | ' else
246ac                 | '   sustains[channel]:=sustain
246ac     53 B9 02 F6 | 	mov	local10, local01
246b0     01 B8 66 F0 | 	shl	local10, #1
246b4     32 BB 02 F6 | 	mov	local11, objptr
246b8     02 00 00 FF 
246bc     4C BB 06 F1 | 	add	local11, ##1356
246c0     5D B9 02 F1 | 	add	local10, local11
246c4     5C B7 52 FC | 	wrword	local09, local10
246c8                 | LR__3065
246c8     59 BB 52 F6 | 	abs	local11, local07 wc
246cc     C2 B9 80 FF 
246d0     5D DF 19 FD | 	qdiv	##24347887, local11
246d4                 | '                 
246d4                 | ' length:=24347887/length  
246d4     18 BA 62 FD | 	getqx	local11
246d8     6D A8 06 FD | 	qmul	local02, #109
246dc     5D B3 82 F6 | 	negc	local07, local11
246e0                 | ' 'debug(udec(sustain))
246e0                 | ' base2:=@channel0[0]+64*channel
246e0     32 A9 02 F6 | 	mov	local02, objptr
246e4     0C A8 06 F1 | 	add	local02, #12
246e8     06 A6 66 F0 | 	shl	local01, #6
246ec     53 A9 02 F1 | 	add	local02, local01
246f0                 | ' long[base2+20]:=waveform+$C0000000 
246f0     00 00 60 FF 
246f4     00 AE 06 F1 | 	add	local05, ##-1073741824
246f8     54 B9 02 F6 | 	mov	local10, local02
246fc     14 B8 06 F1 | 	add	local10, #20
24700     5C AF 62 FC | 	wrlong	local05, local10
24704                 | ' long[base2+28]:= 2048
24704     54 BB 02 F6 | 	mov	local11, local02
24708     1C BA 06 F1 | 	add	local11, #28
2470c     04 00 80 FF 
24710     5D 01 68 FC | 	wrlong	##2048, local11
24714                 | ' long[base2+24]:= 0
24714     54 BB 02 F6 | 	mov	local11, local02
24718     18 BA 06 F1 | 	add	local11, #24
2471c     5D 01 68 FC | 	wrlong	#0, local11
24720                 | ' word[base2+32]:=volume
24720     54 BB 02 F6 | 	mov	local11, local02
24724     20 BA 06 F1 | 	add	local11, #32
24728     5D AD 52 FC | 	wrword	local04, local11
2472c                 | ' word[base2+32]:=pan
2472c     54 BB 02 F6 | 	mov	local11, local02
24730     20 BA 06 F1 | 	add	local11, #32
24734     5D B5 52 FC | 	wrword	local08, local11
24738                 | ' long[base2+36]:=((frequency*109)/1000)*3574 ' (frequency*389566)/1000  freq*3574*109/1000
24738     18 BA 62 FD | 	getqx	local11
2473c     5D B9 52 F6 | 	abs	local10, local11 wc
24740     01 00 00 FF 
24744     E8 B9 16 FD | 	qdiv	local10, ##1000
24748     18 B8 62 FD | 	getqx	local10
2474c     5C B9 82 F6 | 	negc	local10, local10
24750     06 00 00 FF 
24754     F6 B9 06 FD | 	qmul	local10, ##3574
24758     54 B9 02 F6 | 	mov	local10, local02
2475c     24 B8 06 F1 | 	add	local10, #36
24760                 | ' long[base2+44]:=envelope
24760     54 BB 02 F6 | 	mov	local11, local02
24764     2C BA 06 F1 | 	add	local11, #44
24768                 | ' long[base2+48]:=length
24768                 | ' long[base2+52]:=sustain
24768                 | ' waitms(delay)
24768     55 93 02 F6 | 	mov	arg01, local03
2476c     18 B4 62 FD | 	getqx	local08
24770     5C B5 62 FC | 	wrlong	local08, local10
24774     5D B1 62 FC | 	wrlong	local06, local11
24778     54 BB 02 F6 | 	mov	local11, local02
2477c     30 BA 06 F1 | 	add	local11, #48
24780     5D B3 62 FC | 	wrlong	local07, local11
24784     34 A8 06 F1 | 	add	local02, #52
24788     54 B7 62 FC | 	wrlong	local09, local02
2478c     08 07 B0 FD | 	call	#__system___waitms
24790     E7 F0 03 F6 | 	mov	ptra, fp
24794     F2 00 A0 FD | 	call	#popregs_
24798                 | _Audio2_004_spin2_play_ret
24798     2D 00 64 FD | 	ret
2479c                 | 
2479c                 | ' 
2479c                 | ' 
2479c                 | ' pub play16(channel,sample,splfreq,vol,len,loop,delay) | base2
2479c                 | _Audio2_004_spin2_play16
2479c     F8 02 00 FF 
247a0     BE 97 06 FD | 	qmul	arg03, ##389566
247a4                 | ' 
247a4                 | ' base2:=@channel0[0]+64*channel
247a4     32 97 02 F6 | 	mov	arg03, objptr
247a8     0C 96 06 F1 | 	add	arg03, #12
247ac     06 92 66 F0 | 	shl	arg01, #6
247b0     49 97 02 F1 | 	add	arg03, arg01
247b4                 | ' long[base2+20]:=sample+$C0000000 
247b4     00 00 60 FF 
247b8     00 94 06 F1 | 	add	arg02, ##-1073741824
247bc     4B 93 02 F6 | 	mov	arg01, arg03
247c0     14 92 06 F1 | 	add	arg01, #20
247c4     49 95 62 FC | 	wrlong	arg02, arg01
247c8                 | ' long[base2+28]:= len
247c8     4B 95 02 F6 | 	mov	arg02, arg03
247cc     1C 94 06 F1 | 	add	arg02, #28
247d0     4A 9B 62 FC | 	wrlong	arg05, arg02
247d4                 | ' long[base2+24]:= loop
247d4     4B 9B 02 F6 | 	mov	arg05, arg03
247d8     18 9A 06 F1 | 	add	arg05, #24
247dc     4D 9D 62 FC | 	wrlong	arg06, arg05
247e0                 | ' word[base2+32]:= vol
247e0     4B 9D 02 F6 | 	mov	arg06, arg03
247e4     20 9C 06 F1 | 	add	arg06, #32
247e8     4E 99 52 FC | 	wrword	arg04, arg06
247ec                 | ' long[base2+36]:= splfreq*389566
247ec     24 96 06 F1 | 	add	arg03, #36
247f0                 | ' waitms(delay)
247f0     4F 93 02 F6 | 	mov	arg01, arg07
247f4     18 9E 62 FD | 	getqx	arg07
247f8     4B 9F 62 FC | 	wrlong	arg07, arg03
247fc     98 06 B0 FD | 	call	#__system___waitms
24800                 | _Audio2_004_spin2_play16_ret
24800     2D 00 64 FD | 	ret
24804                 | 
24804                 | ' 
24804                 | ' pub beep(channel,sample,splfreq,vol,len,loop,delay) | base2
24804                 | _Audio2_004_spin2_beep
24804     02 00 00 FF 
24808     F2 97 06 FD | 	qmul	arg03, ##1522
2480c                 | ' 
2480c                 | ' base2:=@channel0[0]+64*channel
2480c     32 97 02 F6 | 	mov	arg03, objptr
24810     0C 96 06 F1 | 	add	arg03, #12
24814     06 92 66 F0 | 	shl	arg01, #6
24818     49 97 02 F1 | 	add	arg03, arg01
2481c                 | ' long[base2+20]:=sample+$C0000000 
2481c     00 00 60 FF 
24820     00 94 06 F1 | 	add	arg02, ##-1073741824
24824     4B 93 02 F6 | 	mov	arg01, arg03
24828     14 92 06 F1 | 	add	arg01, #20
2482c     49 95 62 FC | 	wrlong	arg02, arg01
24830                 | ' long[base2+28]:= len
24830     4B 95 02 F6 | 	mov	arg02, arg03
24834     1C 94 06 F1 | 	add	arg02, #28
24838     4A 9B 62 FC | 	wrlong	arg05, arg02
2483c                 | ' long[base2+24]:= loop
2483c     4B 9B 02 F6 | 	mov	arg05, arg03
24840     18 9A 06 F1 | 	add	arg05, #24
24844     4D 9D 62 FC | 	wrlong	arg06, arg05
24848                 | ' word[base2+32]:= vol
24848     4B 9D 02 F6 | 	mov	arg06, arg03
2484c     20 9C 06 F1 | 	add	arg06, #32
24850     4E 99 52 FC | 	wrword	arg04, arg06
24854                 | ' long[base2+36]:= splfreq*1522
24854     24 96 06 F1 | 	add	arg03, #36
24858                 | ' waitms(delay)
24858     4F 93 02 F6 | 	mov	arg01, arg07
2485c     18 9E 62 FD | 	getqx	arg07
24860     4B 9F 62 FC | 	wrlong	arg07, arg03
24864     30 06 B0 FD | 	call	#__system___waitms
24868                 | _Audio2_004_spin2_beep_ret
24868     2D 00 64 FD | 	ret
2486c                 | hubexit
2486c     C1 00 80 FD | 	jmp	#cogexit
24870                 | 
24870                 | __system___setbaud
24870     14 0E 07 FB | 	rdlong	muldiva_, #20
24874     49 11 03 F6 | 	mov	muldivb_, arg01
24878     FA 00 A0 FD | 	call	#divide_
2487c     D7 06 48 FB | 	callpa	#(@LR__3071-@LR__3070)>>2,fcache_load_ptr_
24880                 | LR__3070
24880     3E 7A 9E FA | 	rdpin	result1, #62 wc
24884     3E 7D A2 F1 | 	subx	result2, result2
24888     F4 FF 9F CD |  if_b	jmp	#LR__3070
2488c                 | LR__3071
2488c     40 7C 64 FD | 	dirl	#62
24890     40 7E 64 FD | 	dirl	#63
24894     34 11 63 FC | 	wrlong	muldivb_, ptr___system__dat__
24898     10 10 67 F0 | 	shl	muldivb_, #16
2489c     07 94 06 F6 | 	mov	arg02, #7
248a0     88 95 02 F1 | 	add	arg02, muldivb_
248a4     3E F8 0C FC | 	wrpin	#124, #62
248a8     3E 94 16 FC | 	wxpin	arg02, #62
248ac     3F 7C 0C FC | 	wrpin	#62, #63
248b0     14 94 06 F1 | 	add	arg02, #20
248b4     3F 94 16 FC | 	wxpin	arg02, #63
248b8     41 7C 64 FD | 	dirh	#62
248bc     41 7E 64 FD | 	dirh	#63
248c0                 | __system___setbaud_ret
248c0     2D 00 64 FD | 	ret
248c4                 | 
248c4                 | __system___txraw
248c4     01 CA 05 F6 | 	mov	COUNT_, #1
248c8     E8 00 A0 FD | 	call	#pushregs_
248cc     49 A7 02 F6 | 	mov	local01, arg01
248d0     D7 06 48 FB | 	callpa	#(@LR__3081-@LR__3080)>>2,fcache_load_ptr_
248d4                 | LR__3080
248d4     3E 7A 9E FA | 	rdpin	result1, #62 wc
248d8     3E 7D A2 F1 | 	subx	result2, result2
248dc     F4 FF 9F CD |  if_b	jmp	#LR__3080
248e0                 | LR__3081
248e0     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
248e4     42 0F 00 AF 
248e8     80 92 06 A6 |  if_e	mov	arg01, ##2000000
248ec     80 FF BF AD |  if_e	call	#__system___setbaud
248f0     58 7C 64 FD | 	drvl	#62
248f4     3E A6 26 FC | 	wypin	local01, #62
248f8     01 7A 06 F6 | 	mov	result1, #1
248fc     E7 F0 03 F6 | 	mov	ptra, fp
24900     F2 00 A0 FD | 	call	#popregs_
24904                 | __system___txraw_ret
24904     2D 00 64 FD | 	ret
24908                 | 
24908                 | __system___rxraw
24908     0D CA 05 F6 | 	mov	COUNT_, #13
2490c     E8 00 A0 FD | 	call	#pushregs_
24910     49 A7 02 F6 | 	mov	local01, arg01
24914     34 A9 0A FB | 	rdlong	local02, ptr___system__dat__ wz
24918     42 0F 00 AF 
2491c     80 92 06 A6 |  if_e	mov	arg01, ##2000000
24920     4C FF BF AD |  if_e	call	#__system___setbaud
24924     00 A6 0E F2 | 	cmp	local01, #0 wz
24928     20 00 90 AD |  if_e	jmp	#LR__3090
2492c     14 AA 06 FB | 	rdlong	local03, #20
24930     0A AA 46 F0 | 	shr	local03, #10
24934     55 A7 02 FD | 	qmul	local01, local03
24938     1A 7A 62 FD | 	getct	result1
2493c     18 AC 62 FD | 	getqx	local04
24940     56 7B 02 F1 | 	add	result1, local04
24944     3D AF 02 F6 | 	mov	local05, result1
24948     04 00 90 FD | 	jmp	#LR__3091
2494c                 | LR__3090
2494c     00 AE 06 F6 | 	mov	local05, #0
24950                 | LR__3091
24950     01 B0 66 F6 | 	neg	local06, #1
24954     3F B2 06 F6 | 	mov	local07, #63
24958     00 B4 06 F6 | 	mov	local08, #0
2495c     04 68 06 F1 | 	add	ptr___system__dat__, #4
24960     34 B7 02 FB | 	rdlong	local09, ptr___system__dat__
24964     04 68 86 F1 | 	sub	ptr___system__dat__, #4
24968                 | LR__3092
24968     08 B6 16 F4 | 	testb	local09, #8 wc
2496c     09 B6 76 F4 | 	testbn	local09, #9 andc
24970     0A B6 46 F0 | 	shr	local09, #10
24974     01 B4 06 C6 |  if_b	mov	local08, #1
24978     40 7E 6C 3D |  if_ae	testp	#63 wz
2497c     01 B4 06 26 |  if_nc_and_z	mov	local08, #1
24980     3F B6 8E 2A |  if_nc_and_z	rdpin	local09, #63
24984     04 B6 46 20 |  if_nc_and_z	shr	local09, #4
24988                 | LR__3093
24988     00 A8 06 F6 | 	mov	local02, #0
2498c     00 B4 0E F2 | 	cmp	local08, #0 wz
24990     01 A8 66 56 |  if_ne	neg	local02, #1
24994     00 B8 06 F6 | 	mov	local10, #0
24998     00 AA 06 F6 | 	mov	local03, #0
2499c     00 A6 0E F2 | 	cmp	local01, #0 wz
249a0     01 AA 66 56 |  if_ne	neg	local03, #1
249a4     00 AC 06 F6 | 	mov	local04, #0
249a8     00 BA 06 F6 | 	mov	local11, #0
249ac     57 BD 02 F6 | 	mov	local12, local05
249b0     1A 7A 62 FD | 	getct	result1
249b4     3D BF 02 F6 | 	mov	local13, result1
249b8     5F BD 82 F1 | 	sub	local12, local13
249bc     00 BC 56 F2 | 	cmps	local12, #0 wc
249c0     00 BA 26 C6 |  if_b	not	local11, #0
249c4     00 BA 0E F2 | 	cmp	local11, #0 wz
249c8     00 AC 26 56 |  if_ne	not	local04, #0
249cc     56 AB CA F7 | 	test	local03, local04 wz
249d0     00 B8 26 56 |  if_ne	not	local10, #0
249d4     5C A9 4A F5 | 	or	local02, local10 wz
249d8     8C FF 9F AD |  if_e	jmp	#LR__3092
249dc     00 B4 0E F2 | 	cmp	local08, #0 wz
249e0     5B B1 02 56 |  if_ne	mov	local06, local09
249e4     58 B1 E2 58 |  if_ne	getbyte	local06, local06, #0
249e8     04 68 06 F1 | 	add	ptr___system__dat__, #4
249ec     34 B7 62 FC | 	wrlong	local09, ptr___system__dat__
249f0     04 68 86 F1 | 	sub	ptr___system__dat__, #4
249f4     58 7B 02 F6 | 	mov	result1, local06
249f8     E7 F0 03 F6 | 	mov	ptra, fp
249fc     F2 00 A0 FD | 	call	#popregs_
24a00                 | __system___rxraw_ret
24a00     2D 00 64 FD | 	ret
24a04                 | 
24a04                 | __system___getus
24a04     1A 7C 72 FD | 	getct	result2 wc
24a08     1A 80 62 FD | 	getct	_var01
24a0c     10 68 06 F1 | 	add	ptr___system__dat__, #16
24a10     34 83 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
24a14     10 68 86 F1 | 	sub	ptr___system__dat__, #16
24a18     20 00 90 5D |  if_ne	jmp	#LR__3100
24a1c     14 82 06 FB | 	rdlong	_var02, #20
24a20     A1 07 00 FF 
24a24     40 82 16 FD | 	qdiv	_var02, ##1000000
24a28     10 68 06 F1 | 	add	ptr___system__dat__, #16
24a2c     18 7A 62 FD | 	getqx	result1
24a30     3D 83 02 F6 | 	mov	_var02, result1
24a34     34 7B 62 FC | 	wrlong	result1, ptr___system__dat__
24a38     10 68 86 F1 | 	sub	ptr___system__dat__, #16
24a3c                 | LR__3100
24a3c     41 7D 12 FD | 	qdiv	result2, _var02
24a40     19 7C 62 FD | 	getqy	result2
24a44     28 7C 62 FD | 	setq	result2
24a48     41 81 12 FD | 	qdiv	_var01, _var02
24a4c     18 7A 62 FD | 	getqx	result1
24a50                 | __system___getus_ret
24a50     2D 00 64 FD | 	ret
24a54                 | 
24a54                 | __system____builtin_memmove
24a54     49 81 02 F6 | 	mov	_var01, arg01
24a58     4A 93 52 F2 | 	cmps	arg01, arg02 wc
24a5c     10 00 90 CD |  if_b	jmp	#LR__3110
24a60     4A 83 02 F6 | 	mov	_var02, arg02
24a64     4B 83 02 F1 | 	add	_var02, arg03
24a68     41 93 52 F2 | 	cmps	arg01, _var02 wc
24a6c     48 00 90 CD |  if_b	jmp	#LR__3116
24a70                 | LR__3110
24a70     4B 85 02 F6 | 	mov	_var03, arg03
24a74     02 84 4E F0 | 	shr	_var03, #2 wz
24a78     18 00 90 AD |  if_e	jmp	#LR__3115
24a7c     D7 0A 48 FB | 	callpa	#(@LR__3113-@LR__3111)>>2,fcache_load_ptr_
24a80                 | LR__3111
24a80     42 09 D8 FC | 	rep	@LR__3114, _var03
24a84                 | LR__3112
24a84     4A 85 02 FB | 	rdlong	_var03, arg02
24a88     49 85 62 FC | 	wrlong	_var03, arg01
24a8c     04 92 06 F1 | 	add	arg01, #4
24a90     04 94 06 F1 | 	add	arg02, #4
24a94                 | LR__3113
24a94                 | LR__3114
24a94                 | LR__3115
24a94     02 96 CE F7 | 	test	arg03, #2 wz
24a98     4A 83 E2 5A |  if_ne	rdword	_var02, arg02
24a9c     49 83 52 5C |  if_ne	wrword	_var02, arg01
24aa0     02 92 06 51 |  if_ne	add	arg01, #2
24aa4     02 94 06 51 |  if_ne	add	arg02, #2
24aa8     01 96 CE F7 | 	test	arg03, #1 wz
24aac     4A 83 C2 5A |  if_ne	rdbyte	_var02, arg02
24ab0     49 83 42 5C |  if_ne	wrbyte	_var02, arg01
24ab4     28 00 90 FD | 	jmp	#LR__3122
24ab8                 | LR__3116
24ab8     4B 93 02 F1 | 	add	arg01, arg03
24abc     4B 95 02 F1 | 	add	arg02, arg03
24ac0     4B 87 0A F6 | 	mov	_var04, arg03 wz
24ac4     18 00 90 AD |  if_e	jmp	#LR__3121
24ac8     D7 0A 48 FB | 	callpa	#(@LR__3119-@LR__3117)>>2,fcache_load_ptr_
24acc                 | LR__3117
24acc     43 09 D8 FC | 	rep	@LR__3120, _var04
24ad0                 | LR__3118
24ad0     01 92 86 F1 | 	sub	arg01, #1
24ad4     01 94 86 F1 | 	sub	arg02, #1
24ad8     4A 83 C2 FA | 	rdbyte	_var02, arg02
24adc     49 83 42 FC | 	wrbyte	_var02, arg01
24ae0                 | LR__3119
24ae0                 | LR__3120
24ae0                 | LR__3121
24ae0                 | LR__3122
24ae0     40 7B 02 F6 | 	mov	result1, _var01
24ae4                 | __system____builtin_memmove_ret
24ae4     2D 00 64 FD | 	ret
24ae8                 | 
24ae8                 | __system__longmove
24ae8     49 81 02 F6 | 	mov	_var01, arg01
24aec     4A 93 52 F2 | 	cmps	arg01, arg02 wc
24af0     24 00 90 3D |  if_ae	jmp	#LR__3134
24af4     4B 83 0A F6 | 	mov	_var02, arg03 wz
24af8     54 00 90 AD |  if_e	jmp	#LR__3140
24afc     D7 0A 48 FB | 	callpa	#(@LR__3132-@LR__3130)>>2,fcache_load_ptr_
24b00                 | LR__3130
24b00     41 09 D8 FC | 	rep	@LR__3133, _var02
24b04                 | LR__3131
24b04     4A 83 02 FB | 	rdlong	_var02, arg02
24b08     49 83 62 FC | 	wrlong	_var02, arg01
24b0c     04 92 06 F1 | 	add	arg01, #4
24b10     04 94 06 F1 | 	add	arg02, #4
24b14                 | LR__3132
24b14                 | LR__3133
24b14     38 00 90 FD | 	jmp	#LR__3140
24b18                 | LR__3134
24b18     4B 83 02 F6 | 	mov	_var02, arg03
24b1c     02 82 66 F0 | 	shl	_var02, #2
24b20     41 93 02 F1 | 	add	arg01, _var02
24b24     4B 85 02 F6 | 	mov	_var03, arg03
24b28     02 84 66 F0 | 	shl	_var03, #2
24b2c     42 95 02 F1 | 	add	arg02, _var03
24b30     4B 87 0A F6 | 	mov	_var04, arg03 wz
24b34     18 00 90 AD |  if_e	jmp	#LR__3139
24b38     D7 0A 48 FB | 	callpa	#(@LR__3137-@LR__3135)>>2,fcache_load_ptr_
24b3c                 | LR__3135
24b3c     43 09 D8 FC | 	rep	@LR__3138, _var04
24b40                 | LR__3136
24b40     04 92 86 F1 | 	sub	arg01, #4
24b44     04 94 86 F1 | 	sub	arg02, #4
24b48     4A 87 02 FB | 	rdlong	_var04, arg02
24b4c     49 87 62 FC | 	wrlong	_var04, arg01
24b50                 | LR__3137
24b50                 | LR__3138
24b50                 | LR__3139
24b50                 | LR__3140
24b50     40 7B 02 F6 | 	mov	result1, _var01
24b54                 | __system__longmove_ret
24b54     2D 00 64 FD | 	ret
24b58                 | 
24b58                 | __system____builtin_strcpy
24b58     49 81 02 F6 | 	mov	_var01, arg01
24b5c     D7 0A 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
24b60                 | LR__3150
24b60     4A 7B CA FA | 	rdbyte	result1, arg02 wz
24b64     49 7B 42 FC | 	wrbyte	result1, arg01
24b68     01 94 06 F1 | 	add	arg02, #1
24b6c     01 92 06 F1 | 	add	arg01, #1
24b70     EC FF 9F 5D |  if_ne	jmp	#LR__3150
24b74                 | LR__3151
24b74     40 7B 02 F6 | 	mov	result1, _var01
24b78                 | __system____builtin_strcpy_ret
24b78     2D 00 64 FD | 	ret
24b7c                 | 
24b7c                 | __system____topofstack
24b7c     00 CA 05 F6 | 	mov	COUNT_, #0
24b80     E8 00 A0 FD | 	call	#pushregs_
24b84     08 F0 07 F1 | 	add	ptra, #8
24b88     04 CE 05 F1 | 	add	fp, #4
24b8c     E7 92 62 FC | 	wrlong	arg01, fp
24b90     E7 7A 02 F6 | 	mov	result1, fp
24b94     04 CE 85 F1 | 	sub	fp, #4
24b98     E7 F0 03 F6 | 	mov	ptra, fp
24b9c     F2 00 A0 FD | 	call	#popregs_
24ba0                 | __system____topofstack_ret
24ba0     2D 00 64 FD | 	ret
24ba4                 | 
24ba4                 | __system___lockmem
24ba4     00 7A 06 F6 | 	mov	result1, #0
24ba8     01 7A 62 FD | 	cogid	result1
24bac     00 7B 06 F1 | 	add	result1, #256
24bb0                 | LR__3160
24bb0     49 81 0A FB | 	rdlong	_var01, arg01 wz
24bb4     49 7B 62 AC |  if_e	wrlong	result1, arg01
24bb8     49 81 02 AB |  if_e	rdlong	_var01, arg01
24bbc     49 81 02 AB |  if_e	rdlong	_var01, arg01
24bc0     3D 81 0A F2 | 	cmp	_var01, result1 wz
24bc4     E8 FF 9F 5D |  if_ne	jmp	#LR__3160
24bc8                 | __system___lockmem_ret
24bc8     2D 00 64 FD | 	ret
24bcc                 | 
24bcc                 | __system___string_cmp
24bcc     D7 14 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
24bd0                 | LR__3170
24bd0     49 81 C2 FA | 	rdbyte	_var01, arg01
24bd4     4A 83 C2 FA | 	rdbyte	_var02, arg02
24bd8     40 85 02 F6 | 	mov	_var03, _var01
24bdc     41 85 8A F1 | 	sub	_var03, _var02 wz
24be0     01 92 06 F1 | 	add	arg01, #1
24be4     01 94 06 F1 | 	add	arg02, #1
24be8     0C 00 90 5D |  if_ne	jmp	#LR__3172
24bec     00 80 0E F2 | 	cmp	_var01, #0 wz
24bf0     00 82 0E 52 |  if_ne	cmp	_var02, #0 wz
24bf4     D8 FF 9F 5D |  if_ne	jmp	#LR__3170
24bf8                 | LR__3171
24bf8                 | LR__3172
24bf8     42 7B 02 F6 | 	mov	result1, _var03
24bfc                 | __system___string_cmp_ret
24bfc     2D 00 64 FD | 	ret
24c00                 | 
24c00                 | __system___string_concat
24c00     05 CA 05 F6 | 	mov	COUNT_, #5
24c04     E8 00 A0 FD | 	call	#pushregs_
24c08     49 A7 02 F6 | 	mov	local01, arg01
24c0c     4A A9 02 F6 | 	mov	local02, arg02
24c10     53 93 02 F6 | 	mov	arg01, local01
24c14     49 AB 02 F6 | 	mov	local03, arg01
24c18     D7 06 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
24c1c                 | LR__3180
24c1c     55 7B CA FA | 	rdbyte	result1, local03 wz
24c20     01 AA 06 51 |  if_ne	add	local03, #1
24c24     F4 FF 9F 5D |  if_ne	jmp	#LR__3180
24c28                 | LR__3181
24c28     49 AB 82 F1 | 	sub	local03, arg01
24c2c     55 AD 02 F6 | 	mov	local04, local03
24c30     54 93 02 F6 | 	mov	arg01, local02
24c34     49 AB 02 F6 | 	mov	local03, arg01
24c38     D7 06 48 FB | 	callpa	#(@LR__3183-@LR__3182)>>2,fcache_load_ptr_
24c3c                 | LR__3182
24c3c     55 7B CA FA | 	rdbyte	result1, local03 wz
24c40     01 AA 06 51 |  if_ne	add	local03, #1
24c44     F4 FF 9F 5D |  if_ne	jmp	#LR__3182
24c48                 | LR__3183
24c48     49 AB 82 F1 | 	sub	local03, arg01
24c4c     56 93 02 F6 | 	mov	arg01, local04
24c50     55 93 02 F1 | 	add	arg01, local03
24c54     01 92 06 F1 | 	add	arg01, #1
24c58     50 39 B0 FD | 	call	#__system___gc_alloc_managed
24c5c     3D AF 0A F6 | 	mov	local05, result1 wz
24c60     28 00 90 AD |  if_e	jmp	#LR__3184
24c64     57 93 02 F6 | 	mov	arg01, local05
24c68     53 95 02 F6 | 	mov	arg02, local01
24c6c     56 97 02 F6 | 	mov	arg03, local04
24c70     E0 FD BF FD | 	call	#__system____builtin_memmove
24c74     57 93 02 F6 | 	mov	arg01, local05
24c78     56 93 02 F1 | 	add	arg01, local04
24c7c     01 AA 06 F1 | 	add	local03, #1
24c80     54 95 02 F6 | 	mov	arg02, local02
24c84     55 97 02 F6 | 	mov	arg03, local03
24c88     C8 FD BF FD | 	call	#__system____builtin_memmove
24c8c                 | LR__3184
24c8c     57 7B 02 F6 | 	mov	result1, local05
24c90     E7 F0 03 F6 | 	mov	ptra, fp
24c94     F2 00 A0 FD | 	call	#popregs_
24c98                 | __system___string_concat_ret
24c98     2D 00 64 FD | 	ret
24c9c                 | 
24c9c                 | __system___tx
24c9c     02 CA 05 F6 | 	mov	COUNT_, #2
24ca0     E8 00 A0 FD | 	call	#pushregs_
24ca4     49 A7 02 F6 | 	mov	local01, arg01
24ca8     0A A6 0E F2 | 	cmp	local01, #10 wz
24cac     18 00 90 5D |  if_ne	jmp	#LR__3190
24cb0     08 68 06 F1 | 	add	ptr___system__dat__, #8
24cb4     34 A9 02 FB | 	rdlong	local02, ptr___system__dat__
24cb8     08 68 86 F1 | 	sub	ptr___system__dat__, #8
24cbc     02 A8 CE F7 | 	test	local02, #2 wz
24cc0     0D 92 06 56 |  if_ne	mov	arg01, #13
24cc4     FC FB BF 5D |  if_ne	call	#__system___txraw
24cc8                 | LR__3190
24cc8     53 93 02 F6 | 	mov	arg01, local01
24ccc     F4 FB BF FD | 	call	#__system___txraw
24cd0     E7 F0 03 F6 | 	mov	ptra, fp
24cd4     F2 00 A0 FD | 	call	#popregs_
24cd8                 | __system___tx_ret
24cd8     2D 00 64 FD | 	ret
24cdc                 | 
24cdc                 | __system___rx
24cdc     01 CA 05 F6 | 	mov	COUNT_, #1
24ce0     E8 00 A0 FD | 	call	#pushregs_
24ce4                 | LR__3200
24ce4     00 92 06 F6 | 	mov	arg01, #0
24ce8     1C FC BF FD | 	call	#__system___rxraw
24cec     3D A7 02 F6 | 	mov	local01, result1
24cf0     FF FF 7F FF 
24cf4     FF A7 0E F2 | 	cmp	local01, ##-1 wz
24cf8     E8 FF 9F AD |  if_e	jmp	#LR__3200
24cfc     0D A6 0E F2 | 	cmp	local01, #13 wz
24d00     14 00 90 5D |  if_ne	jmp	#LR__3201
24d04     08 68 06 F1 | 	add	ptr___system__dat__, #8
24d08     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
24d0c     08 68 86 F1 | 	sub	ptr___system__dat__, #8
24d10     02 7A CE F7 | 	test	result1, #2 wz
24d14     0A A6 06 56 |  if_ne	mov	local01, #10
24d18                 | LR__3201
24d18     08 68 06 F1 | 	add	ptr___system__dat__, #8
24d1c     34 93 02 FB | 	rdlong	arg01, ptr___system__dat__
24d20     08 68 86 F1 | 	sub	ptr___system__dat__, #8
24d24     01 92 CE F7 | 	test	arg01, #1 wz
24d28     1C 00 90 AD |  if_e	jmp	#LR__3204
24d2c     7F A6 0E F2 | 	cmp	local01, #127 wz
24d30     0C 00 90 5D |  if_ne	jmp	#LR__3202
24d34     08 92 06 F6 | 	mov	arg01, #8
24d38     60 FF BF FD | 	call	#__system___tx
24d3c     08 00 90 FD | 	jmp	#LR__3203
24d40                 | LR__3202
24d40     53 93 02 F6 | 	mov	arg01, local01
24d44     54 FF BF FD | 	call	#__system___tx
24d48                 | LR__3203
24d48                 | LR__3204
24d48     53 7B 02 F6 | 	mov	result1, local01
24d4c     E7 F0 03 F6 | 	mov	ptra, fp
24d50     F2 00 A0 FD | 	call	#popregs_
24d54                 | __system___rx_ret
24d54     2D 00 64 FD | 	ret
24d58                 | 
24d58                 | __system___pinwrite
24d58     49 81 02 F6 | 	mov	_var01, arg01
24d5c     1F 80 06 F5 | 	and	_var01, #31
24d60     20 92 CE F7 | 	test	arg01, #32 wz
24d64     06 92 46 F0 | 	shr	arg01, #6
24d68     49 93 CA F9 | 	bmask	arg01, arg01
24d6c     40 93 62 F0 | 	shl	arg01, _var01
24d70     40 95 62 F0 | 	shl	arg02, _var01
24d74     1C 00 90 AD |  if_e	jmp	#LR__3210
24d78     49 F7 43 F5 | 	or	dirb, arg01
24d7c     FD 81 02 F6 | 	mov	_var01, outb
24d80     49 81 22 F5 | 	andn	_var01, arg01
24d84     49 95 02 F5 | 	and	arg02, arg01
24d88     4A 81 42 F5 | 	or	_var01, arg02
24d8c     40 FB 03 F6 | 	mov	outb, _var01
24d90     18 00 90 FD | 	jmp	#LR__3211
24d94                 | LR__3210
24d94     49 F5 43 F5 | 	or	dira, arg01
24d98     FC 81 02 F6 | 	mov	_var01, outa
24d9c     49 81 22 F5 | 	andn	_var01, arg01
24da0     49 95 02 F5 | 	and	arg02, arg01
24da4     4A 81 42 F5 | 	or	_var01, arg02
24da8     40 F9 03 F6 | 	mov	outa, _var01
24dac                 | LR__3211
24dac                 | __system___pinwrite_ret
24dac     2D 00 64 FD | 	ret
24db0                 | 
24db0                 | __system___basic_read_line
24db0     06 CA 05 F6 | 	mov	COUNT_, #6
24db4     E8 00 A0 FD | 	call	#pushregs_
24db8     49 A7 02 F6 | 	mov	local01, arg01
24dbc     00 A8 06 F6 | 	mov	local02, #0
24dc0     18 AA 06 F6 | 	mov	local03, #24
24dc4     00 AC 06 F6 | 	mov	local04, #0
24dc8     18 92 06 F6 | 	mov	arg01, #24
24dcc     DC 37 B0 FD | 	call	#__system___gc_alloc_managed
24dd0     3D AF 0A F6 | 	mov	local05, result1 wz
24dd4     57 7B 02 A6 |  if_e	mov	result1, local05
24dd8     B0 00 90 AD |  if_e	jmp	#LR__3223
24ddc                 | LR__3220
24ddc     53 93 02 F6 | 	mov	arg01, local01
24de0     78 0B B0 FD | 	call	#__system___basic_get_char
24de4     3D B1 02 F6 | 	mov	local06, result1
24de8     01 B0 56 F2 | 	cmps	local06, #1 wc
24dec     8C 00 90 CD |  if_b	jmp	#LR__3222
24df0     0A B0 0E F2 | 	cmp	local06, #10 wz
24df4     10 00 90 5D |  if_ne	jmp	#LR__3221
24df8     00 AC 0E F2 | 	cmp	local04, #0 wz
24dfc     01 A8 56 52 |  if_ne	cmps	local02, #1 wc
24e00     01 A8 86 11 |  if_a	sub	local02, #1
24e04     74 00 90 FD | 	jmp	#LR__3222
24e08                 | LR__3221
24e08     0D B0 0E F2 | 	cmp	local06, #13 wz
24e0c     01 AC 06 A6 |  if_e	mov	local04, #1
24e10     00 AC 06 56 |  if_ne	mov	local04, #0
24e14     08 B0 0E F2 | 	cmp	local06, #8 wz
24e18     7F B0 0E 52 |  if_ne	cmp	local06, #127 wz
24e1c     01 A8 56 A2 |  if_e	cmps	local02, #1 wc
24e20     01 A8 86 21 |  if_nc_and_z	sub	local02, #1
24e24     B4 FF 9F AD |  if_e	jmp	#LR__3220
24e28     57 97 02 F6 | 	mov	arg03, local05
24e2c     54 97 02 F1 | 	add	arg03, local02
24e30     4B B1 42 FC | 	wrbyte	local06, arg03
24e34     01 A8 06 F1 | 	add	local02, #1
24e38     55 A9 0A F2 | 	cmp	local02, local03 wz
24e3c     9C FF 9F 5D |  if_ne	jmp	#LR__3220
24e40     55 93 02 F6 | 	mov	arg01, local03
24e44     20 92 06 F1 | 	add	arg01, #32
24e48     60 37 B0 FD | 	call	#__system___gc_alloc_managed
24e4c     3D B1 0A F6 | 	mov	local06, result1 wz
24e50     58 7B 02 A6 |  if_e	mov	result1, local06
24e54     34 00 90 AD |  if_e	jmp	#LR__3223
24e58     58 93 02 F6 | 	mov	arg01, local06
24e5c     57 95 02 F6 | 	mov	arg02, local05
24e60     55 97 02 F6 | 	mov	arg03, local03
24e64     EC FB BF FD | 	call	#__system____builtin_memmove
24e68     20 AA 06 F1 | 	add	local03, #32
24e6c     57 93 02 F6 | 	mov	arg01, local05
24e70     6C 38 B0 FD | 	call	#__system___gc_free
24e74     58 AF 02 F6 | 	mov	local05, local06
24e78     60 FF 9F FD | 	jmp	#LR__3220
24e7c                 | LR__3222
24e7c     57 B1 02 F6 | 	mov	local06, local05
24e80     54 B1 02 F1 | 	add	local06, local02
24e84     58 01 48 FC | 	wrbyte	#0, local06
24e88     57 7B 02 F6 | 	mov	result1, local05
24e8c                 | LR__3223
24e8c     E7 F0 03 F6 | 	mov	ptra, fp
24e90     F2 00 A0 FD | 	call	#popregs_
24e94                 | __system___basic_read_line_ret
24e94     2D 00 64 FD | 	ret
24e98                 | 
24e98                 | __system___waitms
24e98     49 81 02 F6 | 	mov	_var01, arg01
24e9c     1A 82 62 FD | 	getct	_var02
24ea0     14 84 06 FB | 	rdlong	_var03, #20
24ea4     D7 14 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
24ea8                 | LR__3230
24ea8     01 00 00 FF 
24eac     E8 81 56 F2 | 	cmps	_var01, ##1000 wc
24eb0     1C 00 90 CD |  if_b	jmp	#LR__3232
24eb4     42 83 02 F1 | 	add	_var02, _var03
24eb8     41 93 02 F6 | 	mov	arg01, _var02
24ebc     00 92 66 FA | 	addct1	arg01, #0
24ec0     24 22 60 FD | 	waitct1
24ec4     01 00 00 FF 
24ec8     E8 81 86 F1 | 	sub	_var01, ##1000
24ecc     D8 FF 9F FD | 	jmp	#LR__3230
24ed0                 | LR__3231
24ed0                 | LR__3232
24ed0     01 80 56 F2 | 	cmps	_var01, #1 wc
24ed4     28 00 90 CD |  if_b	jmp	#LR__3233
24ed8     42 81 02 FD | 	qmul	_var01, _var03
24edc     01 00 00 FF 
24ee0     E8 97 06 F6 | 	mov	arg03, ##1000
24ee4     19 7A 62 FD | 	getqy	result1
24ee8     18 92 62 FD | 	getqx	arg01
24eec     28 7A 62 FD | 	setq	result1
24ef0     4B 93 12 FD | 	qdiv	arg01, arg03
24ef4     18 92 62 FD | 	getqx	arg01
24ef8     41 93 62 FA | 	addct1	arg01, _var02
24efc     24 22 60 FD | 	waitct1
24f00                 | LR__3233
24f00                 | __system___waitms_ret
24f00     2D 00 64 FD | 	ret
24f04                 | 
24f04                 | __system___waitus
24f04     49 81 02 F6 | 	mov	_var01, arg01
24f08     1A 82 62 FD | 	getct	_var02
24f0c     14 84 06 FB | 	rdlong	_var03, #20
24f10     D7 14 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
24f14                 | LR__3240
24f14     A1 07 00 FF 
24f18     40 80 56 F2 | 	cmps	_var01, ##1000000 wc
24f1c     1C 00 90 CD |  if_b	jmp	#LR__3242
24f20     42 83 02 F1 | 	add	_var02, _var03
24f24     41 93 02 F6 | 	mov	arg01, _var02
24f28     00 92 66 FA | 	addct1	arg01, #0
24f2c     24 22 60 FD | 	waitct1
24f30     A1 07 00 FF 
24f34     40 80 86 F1 | 	sub	_var01, ##1000000
24f38     D8 FF 9F FD | 	jmp	#LR__3240
24f3c                 | LR__3241
24f3c                 | LR__3242
24f3c     01 80 56 F2 | 	cmps	_var01, #1 wc
24f40     28 00 90 CD |  if_b	jmp	#LR__3243
24f44     42 81 02 FD | 	qmul	_var01, _var03
24f48     A1 07 00 FF 
24f4c     40 96 06 F6 | 	mov	arg03, ##1000000
24f50     19 7A 62 FD | 	getqy	result1
24f54     18 92 62 FD | 	getqx	arg01
24f58     28 7A 62 FD | 	setq	result1
24f5c     4B 93 12 FD | 	qdiv	arg01, arg03
24f60     18 7A 62 FD | 	getqx	result1
24f64     3D 83 62 FA | 	addct1	_var02, result1
24f68     24 22 60 FD | 	waitct1
24f6c                 | LR__3243
24f6c                 | __system___waitus_ret
24f6c     2D 00 64 FD | 	ret
24f70                 | 
24f70                 | __system___mount
24f70     09 CA 05 F6 | 	mov	COUNT_, #9
24f74     E8 00 A0 FD | 	call	#pushregs_
24f78     49 A7 02 F6 | 	mov	local01, arg01
24f7c     4A A9 0A F6 | 	mov	local02, arg02 wz
24f80     01 AA 66 F6 | 	neg	local03, #1
24f84     01 7A 66 A6 |  if_e	neg	result1, #1
24f88     9C 02 90 AD |  if_e	jmp	#LR__3265
24f8c     53 7B C2 FA | 	rdbyte	result1, local01
24f90     2F 7A 0E F2 | 	cmp	result1, #47 wz
24f94     28 00 90 5D |  if_ne	jmp	#LR__3252
24f98     53 93 02 F6 | 	mov	arg01, local01
24f9c     49 AD 02 F6 | 	mov	local04, arg01
24fa0     D7 06 48 FB | 	callpa	#(@LR__3251-@LR__3250)>>2,fcache_load_ptr_
24fa4                 | LR__3250
24fa4     56 7B CA FA | 	rdbyte	result1, local04 wz
24fa8     01 AC 06 51 |  if_ne	add	local04, #1
24fac     F4 FF 9F 5D |  if_ne	jmp	#LR__3250
24fb0                 | LR__3251
24fb0     49 AD 82 F1 | 	sub	local04, arg01
24fb4     56 7B 02 F6 | 	mov	result1, local04
24fb8     10 7A 56 F2 | 	cmps	result1, #16 wc
24fbc     14 00 90 CD |  if_b	jmp	#LR__3253
24fc0                 | LR__3252
24fc0     20 68 06 F1 | 	add	ptr___system__dat__, #32
24fc4     34 15 68 FC | 	wrlong	#10, ptr___system__dat__
24fc8     20 68 86 F1 | 	sub	ptr___system__dat__, #32
24fcc     01 7A 66 F6 | 	neg	result1, #1
24fd0     54 02 90 FD | 	jmp	#LR__3265
24fd4                 | LR__3253
24fd4     00 AE 06 F6 | 	mov	local05, #0
24fd8                 | LR__3254
24fd8     04 AE 56 F2 | 	cmps	local05, #4 wc
24fdc     B4 00 90 3D |  if_ae	jmp	#LR__3259
24fe0     57 93 02 F6 | 	mov	arg01, local05
24fe4     02 92 66 F0 | 	shl	arg01, #2
24fe8     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
24fec     64 7A 06 F1 | 	add	result1, #100
24ff0     3D 93 02 F1 | 	add	arg01, result1
24ff4     49 7B 0A FB | 	rdlong	result1, arg01 wz
24ff8     00 AA 56 A2 |  if_e	cmps	local03, #0 wc
24ffc     57 AB 02 86 |  if_c_and_z	mov	local03, local05
25000     88 00 90 8D |  if_c_and_z	jmp	#LR__3258
25004     57 93 02 F6 | 	mov	arg01, local05
25008     02 92 66 F0 | 	shl	arg01, #2
2500c     34 AD 02 F6 | 	mov	local04, ptr___system__dat__
25010     64 AC 06 F1 | 	add	local04, #100
25014     56 93 02 F1 | 	add	arg01, local04
25018     49 93 02 FB | 	rdlong	arg01, arg01
2501c     49 AD 02 F6 | 	mov	local04, arg01
25020     D7 06 48 FB | 	callpa	#(@LR__3256-@LR__3255)>>2,fcache_load_ptr_
25024                 | LR__3255
25024     56 7B CA FA | 	rdbyte	result1, local04 wz
25028     01 AC 06 51 |  if_ne	add	local04, #1
2502c     F4 FF 9F 5D |  if_ne	jmp	#LR__3255
25030                 | LR__3256
25030     49 AD 82 F1 | 	sub	local04, arg01
25034     56 7B 02 F6 | 	mov	result1, local04
25038     3D B1 02 F6 | 	mov	local06, result1
2503c     58 93 02 F6 | 	mov	arg01, local06
25040     53 93 02 F1 | 	add	arg01, local01
25044     49 AD C2 FA | 	rdbyte	local04, arg01
25048     2F AC 0E F2 | 	cmp	local04, #47 wz
2504c     58 B3 02 56 |  if_ne	mov	local07, local06
25050     53 B3 02 51 |  if_ne	add	local07, local01
25054     59 93 CA 5A |  if_ne	rdbyte	arg01, local07 wz
25058     30 00 90 5D |  if_ne	jmp	#LR__3257
2505c     57 AD 02 F6 | 	mov	local04, local05
25060     02 AC 66 F0 | 	shl	local04, #2
25064     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
25068     64 96 06 F1 | 	add	arg03, #100
2506c     4B AD 02 F1 | 	add	local04, arg03
25070     56 95 02 FB | 	rdlong	arg02, local04
25074     53 93 02 F6 | 	mov	arg01, local01
25078     58 97 02 F6 | 	mov	arg03, local06
2507c     24 4A B0 FD | 	call	#__system__strncmp
25080     00 7A 0E F2 | 	cmp	result1, #0 wz
25084     57 AB 02 A6 |  if_e	mov	local03, local05
25088     08 00 90 AD |  if_e	jmp	#LR__3259
2508c                 | LR__3257
2508c                 | LR__3258
2508c     01 AE 06 F1 | 	add	local05, #1
25090     44 FF 9F FD | 	jmp	#LR__3254
25094                 | LR__3259
25094     FF FF 7F FF 
25098     FF AB 0E F2 | 	cmp	local03, ##-1 wz
2509c     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
250a0     34 17 68 AC |  if_e	wrlong	#11, ptr___system__dat__
250a4     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
250a8     01 7A 66 A6 |  if_e	neg	result1, #1
250ac     78 01 90 AD |  if_e	jmp	#LR__3265
250b0     55 AF 02 F6 | 	mov	local05, local03
250b4     57 B3 02 F6 | 	mov	local07, local05
250b8     02 B2 66 F0 | 	shl	local07, #2
250bc     34 B1 02 F6 | 	mov	local06, ptr___system__dat__
250c0     74 B0 06 F1 | 	add	local06, #116
250c4     58 B3 02 F1 | 	add	local07, local06
250c8     59 B1 0A FB | 	rdlong	local06, local07 wz
250cc     58 00 90 AD |  if_e	jmp	#LR__3260
250d0     4C B0 06 F1 | 	add	local06, #76
250d4     58 B3 0A FB | 	rdlong	local07, local06 wz
250d8     4C B0 86 F1 | 	sub	local06, #76
250dc     48 00 90 AD |  if_e	jmp	#LR__3260
250e0     4C B0 06 F1 | 	add	local06, #76
250e4     58 B3 02 FB | 	rdlong	local07, local06
250e8     59 AD 02 F6 | 	mov	local04, local07
250ec     13 B2 46 F7 | 	zerox	local07, #19
250f0     14 AC 46 F0 | 	shr	local04, #20
250f4     02 AC 66 F0 | 	shl	local04, #2
250f8     2D AD 02 F1 | 	add	local04, __methods__
250fc     56 AD 02 FB | 	rdlong	local04, local04
25100     57 B1 02 F6 | 	mov	local06, local05
25104     02 B0 66 F0 | 	shl	local06, #2
25108     34 AB 02 F6 | 	mov	local03, ptr___system__dat__
2510c     64 AA 06 F1 | 	add	local03, #100
25110     55 B1 02 F1 | 	add	local06, local03
25114     58 93 02 FB | 	rdlong	arg01, local06
25118     32 B1 02 F6 | 	mov	local06, objptr
2511c     59 65 02 F6 | 	mov	objptr, local07
25120     2D AC 62 FD | 	call	local04
25124     58 65 02 F6 | 	mov	objptr, local06
25128                 | LR__3260
25128     57 B1 02 F6 | 	mov	local06, local05
2512c     02 B0 66 F0 | 	shl	local06, #2
25130     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
25134     74 B2 06 F1 | 	add	local07, #116
25138     59 B1 02 F1 | 	add	local06, local07
2513c     58 A9 62 FC | 	wrlong	local02, local06
25140     00 A8 0E F2 | 	cmp	local02, #0 wz
25144     18 00 90 5D |  if_ne	jmp	#LR__3261
25148     02 AE 66 F0 | 	shl	local05, #2
2514c     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
25150     64 B2 06 F1 | 	add	local07, #100
25154     59 AF 02 F1 | 	add	local05, local07
25158     57 01 68 FC | 	wrlong	#0, local05
2515c     C4 00 90 FD | 	jmp	#LR__3264
25160                 | LR__3261
25160     57 B5 02 F6 | 	mov	local08, local05
25164     04 B4 66 F0 | 	shl	local08, #4
25168     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
2516c     24 B2 06 F1 | 	add	local07, #36
25170     59 B5 02 F1 | 	add	local08, local07
25174     5A 93 02 F6 | 	mov	arg01, local08
25178     53 95 02 F6 | 	mov	arg02, local01
2517c     10 96 06 F6 | 	mov	arg03, #16
25180     64 48 B0 FD | 	call	#__system__strncpy
25184     48 A8 06 F1 | 	add	local02, #72
25188     54 B3 0A FB | 	rdlong	local07, local02 wz
2518c     48 A8 86 F1 | 	sub	local02, #72
25190     7C 00 90 AD |  if_e	jmp	#LR__3263
25194     48 A8 06 F1 | 	add	local02, #72
25198     54 B3 02 FB | 	rdlong	local07, local02
2519c     59 B7 02 F6 | 	mov	local09, local07
251a0     13 B2 46 F7 | 	zerox	local07, #19
251a4     14 B6 46 F0 | 	shr	local09, #20
251a8     02 B6 66 F0 | 	shl	local09, #2
251ac     2D B7 02 F1 | 	add	local09, __methods__
251b0     5B B7 02 FB | 	rdlong	local09, local09
251b4     5A 93 02 F6 | 	mov	arg01, local08
251b8     32 B1 02 F6 | 	mov	local06, objptr
251bc     59 65 02 F6 | 	mov	objptr, local07
251c0     2D B6 62 FD | 	call	local09
251c4     58 65 02 F6 | 	mov	objptr, local06
251c8     3D 93 0A F6 | 	mov	arg01, result1 wz
251cc     40 00 90 AD |  if_e	jmp	#LR__3262
251d0     57 B5 02 F6 | 	mov	local08, local05
251d4     02 B4 66 F0 | 	shl	local08, #2
251d8     74 68 06 F1 | 	add	ptr___system__dat__, #116
251dc     34 B5 02 F1 | 	add	local08, ptr___system__dat__
251e0     5A 01 68 FC | 	wrlong	#0, local08
251e4     02 AE 66 F0 | 	shl	local05, #2
251e8     10 68 86 F1 | 	sub	ptr___system__dat__, #16
251ec     34 AF 02 F1 | 	add	local05, ptr___system__dat__
251f0     57 01 68 FC | 	wrlong	#0, local05
251f4     49 93 6A F6 | 	neg	arg01, arg01 wz
251f8     44 68 86 F1 | 	sub	ptr___system__dat__, #68
251fc     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
25200     20 68 86 F1 | 	sub	ptr___system__dat__, #32
25204     01 7A 66 56 |  if_ne	neg	result1, #1
25208     00 7A 06 A6 |  if_e	mov	result1, #0
2520c     18 00 90 FD | 	jmp	#LR__3265
25210                 | LR__3262
25210                 | LR__3263
25210     02 AE 66 F0 | 	shl	local05, #2
25214     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
25218     64 B2 06 F1 | 	add	local07, #100
2521c     59 AF 02 F1 | 	add	local05, local07
25220     57 B5 62 FC | 	wrlong	local08, local05
25224                 | LR__3264
25224     00 7A 06 F6 | 	mov	result1, #0
25228                 | LR__3265
25228     E7 F0 03 F6 | 	mov	ptra, fp
2522c     F2 00 A0 FD | 	call	#popregs_
25230                 | __system___mount_ret
25230     2D 00 64 FD | 	ret
25234                 | 
25234                 | __system___chdir
25234     02 CA 05 F6 | 	mov	COUNT_, #2
25238     E8 00 A0 FD | 	call	#pushregs_
2523c     44 F0 07 F1 | 	add	ptra, #68
25240     49 A7 02 F6 | 	mov	local01, arg01
25244     E7 94 02 F6 | 	mov	arg02, fp
25248     08 94 06 F1 | 	add	arg02, #8
2524c     53 93 02 F6 | 	mov	arg01, local01
25250     D8 43 B0 FD | 	call	#__system__stat
25254     00 7A 0E F2 | 	cmp	result1, #0 wz
25258     88 00 90 5D |  if_ne	jmp	#LR__3272
2525c     10 CE 05 F1 | 	add	fp, #16
25260     E7 92 02 FB | 	rdlong	arg01, fp
25264     10 CE 85 F1 | 	sub	fp, #16
25268     78 00 00 FF 
2526c     00 92 06 F5 | 	and	arg01, ##61440
25270     08 00 00 FF 
25274     00 92 0E F2 | 	cmp	arg01, ##4096 wz
25278     20 68 06 51 |  if_ne	add	ptr___system__dat__, #32
2527c     34 1B 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
25280     20 68 86 51 |  if_ne	sub	ptr___system__dat__, #32
25284     01 7A 66 56 |  if_ne	neg	result1, #1
25288     58 00 90 5D |  if_ne	jmp	#LR__3272
2528c     53 97 C2 FA | 	rdbyte	arg03, local01
25290     2F 96 0E F2 | 	cmp	arg03, #47 wz
25294     18 00 90 5D |  if_ne	jmp	#LR__3270
25298     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
2529c     84 92 06 F1 | 	add	arg01, #132
252a0     53 95 02 F6 | 	mov	arg02, local01
252a4     00 97 06 F6 | 	mov	arg03, #256
252a8     3C 47 B0 FD | 	call	#__system__strncpy
252ac     30 00 90 FD | 	jmp	#LR__3271
252b0                 | LR__3270
252b0     34 A9 02 F6 | 	mov	local02, ptr___system__dat__
252b4     84 A9 06 F1 | 	add	local02, #388
252b8     34 95 02 F6 | 	mov	arg02, ptr___system__dat__
252bc     84 94 06 F1 | 	add	arg02, #132
252c0     54 93 02 F6 | 	mov	arg01, local02
252c4     00 97 06 F6 | 	mov	arg03, #256
252c8     1C 47 B0 FD | 	call	#__system__strncpy
252cc     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
252d0     84 96 06 F1 | 	add	arg03, #132
252d4     54 93 02 F6 | 	mov	arg01, local02
252d8     53 95 02 F6 | 	mov	arg02, local01
252dc     10 00 B0 FD | 	call	#__system____getvfsforfile
252e0                 | LR__3271
252e0     00 7A 06 F6 | 	mov	result1, #0
252e4                 | LR__3272
252e4     E7 F0 03 F6 | 	mov	ptra, fp
252e8     F2 00 A0 FD | 	call	#popregs_
252ec                 | __system___chdir_ret
252ec     2D 00 64 FD | 	ret
252f0                 | 
252f0                 | __system____getvfsforfile
252f0     0E CA 05 F6 | 	mov	COUNT_, #14
252f4     E8 00 A0 FD | 	call	#pushregs_
252f8     49 A7 02 F6 | 	mov	local01, arg01
252fc     4A A9 02 F6 | 	mov	local02, arg02
25300     4B AB 02 F6 | 	mov	local03, arg03
25304     D7 10 48 FB | 	callpa	#(@LR__3281-@LR__3280)>>2,fcache_load_ptr_
25308                 | LR__3280
25308     54 7B C2 FA | 	rdbyte	result1, local02
2530c     2F 7A 0E F2 | 	cmp	result1, #47 wz
25310     01 A8 06 A1 |  if_e	add	local02, #1
25314     54 AD C2 AA |  if_e	rdbyte	local04, local02
25318     01 A8 86 A1 |  if_e	sub	local02, #1
2531c     2F AC 0E A2 |  if_e	cmp	local04, #47 wz
25320     01 A8 06 A1 |  if_e	add	local02, #1
25324     E0 FF 9F AD |  if_e	jmp	#LR__3280
25328                 | LR__3281
25328     54 AD C2 FA | 	rdbyte	local04, local02
2532c     2F AC 0E F2 | 	cmp	local04, #47 wz
25330     14 00 90 5D |  if_ne	jmp	#LR__3282
25334     53 93 02 F6 | 	mov	arg01, local01
25338     54 95 02 F6 | 	mov	arg02, local02
2533c     00 97 06 F6 | 	mov	arg03, #256
25340     A4 46 B0 FD | 	call	#__system__strncpy
25344     78 00 90 FD | 	jmp	#LR__3284
25348                 | LR__3282
25348     34 95 02 F6 | 	mov	arg02, ptr___system__dat__
2534c     84 94 06 F1 | 	add	arg02, #132
25350     53 93 02 F6 | 	mov	arg01, local01
25354     00 97 06 F6 | 	mov	arg03, #256
25358     8C 46 B0 FD | 	call	#__system__strncpy
2535c     54 AD CA FA | 	rdbyte	local04, local02 wz
25360     5C 00 90 AD |  if_e	jmp	#LR__3283
25364     54 AD C2 FA | 	rdbyte	local04, local02
25368     2E AC 0E F2 | 	cmp	local04, #46 wz
2536c     01 A8 06 A1 |  if_e	add	local02, #1
25370     54 AF C2 AA |  if_e	rdbyte	local05, local02
25374     01 A8 86 A1 |  if_e	sub	local02, #1
25378     57 B1 02 A6 |  if_e	mov	local06, local05
2537c     07 B0 4E A7 |  if_e	zerox	local06, #7 wz
25380     3C 00 90 AD |  if_e	jmp	#LR__3283
25384     53 AF C2 FA | 	rdbyte	local05, local01
25388     2F AE 0E F2 | 	cmp	local05, #47 wz
2538c     01 A6 06 A1 |  if_e	add	local01, #1
25390     53 AD C2 AA |  if_e	rdbyte	local04, local01
25394     01 A6 86 A1 |  if_e	sub	local01, #1
25398     00 AC 4E A2 |  if_e	cmps	local04, #0 wz
2539c     93 01 00 5F 
253a0     7C 94 06 56 |  if_ne	mov	arg02, ##@LR__5460
253a4     53 93 02 56 |  if_ne	mov	arg01, local01
253a8     00 97 06 56 |  if_ne	mov	arg03, #256
253ac     90 46 B0 5D |  if_ne	call	#__system__strncat
253b0     53 93 02 F6 | 	mov	arg01, local01
253b4     54 95 02 F6 | 	mov	arg02, local02
253b8     00 97 06 F6 | 	mov	arg03, #256
253bc     80 46 B0 FD | 	call	#__system__strncat
253c0                 | LR__3283
253c0                 | LR__3284
253c0     53 93 02 F6 | 	mov	arg01, local01
253c4     3C 48 B0 FD | 	call	#__system___normalizeName
253c8     53 AD CA FA | 	rdbyte	local04, local01 wz
253cc     1C 00 90 AD |  if_e	jmp	#LR__3285
253d0     53 AD C2 FA | 	rdbyte	local04, local01
253d4     2F AC 0E F2 | 	cmp	local04, #47 wz
253d8     01 A6 06 A1 |  if_e	add	local01, #1
253dc     53 B1 C2 AA |  if_e	rdbyte	local06, local01
253e0     01 A6 86 A1 |  if_e	sub	local01, #1
253e4     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
253e8     10 00 90 5D |  if_ne	jmp	#LR__3286
253ec                 | LR__3285
253ec     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
253f0     01 00 00 FF 
253f4     84 7A 06 F1 | 	add	result1, ##644
253f8     EC 01 90 FD | 	jmp	#LR__3300
253fc                 | LR__3286
253fc     00 B2 06 F6 | 	mov	local07, #0
25400                 | LR__3287
25400     04 B2 56 F2 | 	cmps	local07, #4 wc
25404     CC 01 90 3D |  if_ae	jmp	#LR__3299
25408     59 B1 02 F6 | 	mov	local06, local07
2540c     02 B0 66 F0 | 	shl	local06, #2
25410     34 AD 02 F6 | 	mov	local04, ptr___system__dat__
25414     64 AC 06 F1 | 	add	local04, #100
25418     56 B1 02 F1 | 	add	local06, local04
2541c     58 B1 0A FB | 	rdlong	local06, local06 wz
25420     A8 01 90 AD |  if_e	jmp	#LR__3298
25424     59 AD 02 F6 | 	mov	local04, local07
25428     02 AC 66 F0 | 	shl	local04, #2
2542c     34 B1 02 F6 | 	mov	local06, ptr___system__dat__
25430     64 B0 06 F1 | 	add	local06, #100
25434     58 AD 02 F1 | 	add	local04, local06
25438     56 93 02 FB | 	rdlong	arg01, local04
2543c     49 B5 02 F6 | 	mov	local08, arg01
25440     D7 06 48 FB | 	callpa	#(@LR__3289-@LR__3288)>>2,fcache_load_ptr_
25444                 | LR__3288
25444     5A 7B CA FA | 	rdbyte	result1, local08 wz
25448     01 B4 06 51 |  if_ne	add	local08, #1
2544c     F4 FF 9F 5D |  if_ne	jmp	#LR__3288
25450                 | LR__3289
25450     49 B5 82 F1 | 	sub	local08, arg01
25454     5A B7 02 F6 | 	mov	local09, local08
25458     5B AD 02 F6 | 	mov	local04, local09
2545c     53 AD 02 F1 | 	add	local04, local01
25460     56 B1 C2 FA | 	rdbyte	local06, local04
25464     2F B0 0E F2 | 	cmp	local06, #47 wz
25468     5B B9 02 56 |  if_ne	mov	local10, local09
2546c     53 B9 02 51 |  if_ne	add	local10, local01
25470     5C AF CA 5A |  if_ne	rdbyte	local05, local10 wz
25474     54 01 90 5D |  if_ne	jmp	#LR__3297
25478     59 AD 02 F6 | 	mov	local04, local07
2547c     02 AC 66 F0 | 	shl	local04, #2
25480     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
25484     64 96 06 F1 | 	add	arg03, #100
25488     4B AD 02 F1 | 	add	local04, arg03
2548c     56 95 02 FB | 	rdlong	arg02, local04
25490     5B 97 02 F6 | 	mov	arg03, local09
25494     53 93 02 F6 | 	mov	arg01, local01
25498     08 46 B0 FD | 	call	#__system__strncmp
2549c     00 7A 4E F2 | 	cmps	result1, #0 wz
254a0     28 01 90 5D |  if_ne	jmp	#LR__3297
254a4     59 BB 02 F6 | 	mov	local11, local07
254a8     02 BA 66 F0 | 	shl	local11, #2
254ac     34 AD 02 F6 | 	mov	local04, ptr___system__dat__
254b0     74 AC 06 F1 | 	add	local04, #116
254b4     56 BB 02 F1 | 	add	local11, local04
254b8     5D BD 02 FB | 	rdlong	local12, local11
254bc     D7 22 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
254c0                 | LR__3290
254c0     5B B1 02 F6 | 	mov	local06, local09
254c4     01 B0 06 F1 | 	add	local06, #1
254c8     53 B1 02 F1 | 	add	local06, local01
254cc     58 BB C2 FA | 	rdbyte	local11, local06
254d0     2E BA 0E F2 | 	cmp	local11, #46 wz
254d4     2C 00 90 5D |  if_ne	jmp	#LR__3292
254d8     5B BB 02 F6 | 	mov	local11, local09
254dc     02 BA 06 F1 | 	add	local11, #2
254e0     53 BB 02 F1 | 	add	local11, local01
254e4     5D B9 C2 FA | 	rdbyte	local10, local11
254e8     2F B8 0E F2 | 	cmp	local10, #47 wz
254ec     5B BF 02 56 |  if_ne	mov	local13, local09
254f0     02 BE 06 51 |  if_ne	add	local13, #2
254f4     53 BF 02 51 |  if_ne	add	local13, local01
254f8     5F C1 CA 5A |  if_ne	rdbyte	local14, local13 wz
254fc     01 B6 06 A1 |  if_e	add	local09, #1
25500     BC FF 9F AD |  if_e	jmp	#LR__3290
25504                 | LR__3291
25504                 | LR__3292
25504     00 AA 0E F2 | 	cmp	local03, #0 wz
25508     55 93 02 56 |  if_ne	mov	arg01, local03
2550c     53 95 02 56 |  if_ne	mov	arg02, local01
25510     00 97 06 56 |  if_ne	mov	arg03, #256
25514     D0 44 B0 5D |  if_ne	call	#__system__strncpy
25518     53 95 02 F6 | 	mov	arg02, local01
2551c     5B 95 02 F1 | 	add	arg02, local09
25520     01 94 06 F1 | 	add	arg02, #1
25524     53 93 02 F6 | 	mov	arg01, local01
25528     2C F6 BF FD | 	call	#__system____builtin_strcpy
2552c     53 93 02 F6 | 	mov	arg01, local01
25530     49 B5 02 F6 | 	mov	local08, arg01
25534     D7 06 48 FB | 	callpa	#(@LR__3294-@LR__3293)>>2,fcache_load_ptr_
25538                 | LR__3293
25538     5A 7B CA FA | 	rdbyte	result1, local08 wz
2553c     01 B4 06 51 |  if_ne	add	local08, #1
25540     F4 FF 9F 5D |  if_ne	jmp	#LR__3293
25544                 | LR__3294
25544     49 B5 82 F1 | 	sub	local08, arg01
25548     5A B7 02 F6 | 	mov	local09, local08
2554c                 | LR__3295
2554c     01 B6 56 F2 | 	cmps	local09, #1 wc
25550     70 00 90 CD |  if_b	jmp	#LR__3296
25554     5B AD 02 F6 | 	mov	local04, local09
25558     53 AD 02 F1 | 	add	local04, local01
2555c     56 BB C2 FA | 	rdbyte	local11, local04
25560     2F BA 0E F2 | 	cmp	local11, #47 wz
25564     5B BB 02 A6 |  if_e	mov	local11, local09
25568     53 BB 02 A1 |  if_e	add	local11, local01
2556c     5D 01 48 AC |  if_e	wrbyte	#0, local11
25570     01 B6 86 A1 |  if_e	sub	local09, #1
25574     D4 FF 9F AD |  if_e	jmp	#LR__3295
25578     5B AD 02 F6 | 	mov	local04, local09
2557c     53 AD 02 F1 | 	add	local04, local01
25580     56 BB C2 FA | 	rdbyte	local11, local04
25584     2E BA 0E F2 | 	cmp	local11, #46 wz
25588     38 00 90 5D |  if_ne	jmp	#LR__3296
2558c     02 B6 56 F2 | 	cmps	local09, #2 wc
25590     30 00 90 CD |  if_b	jmp	#LR__3296
25594     5B C1 02 F6 | 	mov	local14, local09
25598     01 C0 86 F1 | 	sub	local14, #1
2559c     53 C1 02 F1 | 	add	local14, local01
255a0     60 AF C2 FA | 	rdbyte	local05, local14
255a4     2F AE 0E F2 | 	cmp	local05, #47 wz
255a8     18 00 90 5D |  if_ne	jmp	#LR__3296
255ac     5B AD 02 F6 | 	mov	local04, local09
255b0     01 AC 86 F1 | 	sub	local04, #1
255b4     53 AD 02 F1 | 	add	local04, local01
255b8     56 01 48 FC | 	wrbyte	#0, local04
255bc     02 B6 86 F1 | 	sub	local09, #2
255c0     88 FF 9F FD | 	jmp	#LR__3295
255c4                 | LR__3296
255c4     5E 7B 02 F6 | 	mov	result1, local12
255c8     1C 00 90 FD | 	jmp	#LR__3300
255cc                 | LR__3297
255cc                 | LR__3298
255cc     01 B2 06 F1 | 	add	local07, #1
255d0     2C FE 9F FD | 	jmp	#LR__3287
255d4                 | LR__3299
255d4     02 00 00 FF 
255d8     28 69 06 F1 | 	add	ptr___system__dat__, ##1320
255dc     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
255e0     02 00 00 FF 
255e4     28 69 86 F1 | 	sub	ptr___system__dat__, ##1320
255e8                 | LR__3300
255e8     E7 F0 03 F6 | 	mov	ptra, fp
255ec     F2 00 A0 FD | 	call	#popregs_
255f0                 | __system____getvfsforfile_ret
255f0     2D 00 64 FD | 	ret
255f4                 | 
255f4                 | __system___basic_open
255f4     05 CA 05 F6 | 	mov	COUNT_, #5
255f8     E8 00 A0 FD | 	call	#pushregs_
255fc     4A A7 02 F6 | 	mov	local01, arg02
25600     4B A9 02 F6 | 	mov	local02, arg03
25604     4C AB 02 F6 | 	mov	local03, arg04
25608     00 AC 06 F6 | 	mov	local04, #0
2560c     B4 43 B0 FD | 	call	#__system____getftab
25610     3D AF 0A F6 | 	mov	local05, result1 wz
25614     18 00 90 5D |  if_ne	jmp	#LR__3310
25618     2E 93 02 F6 | 	mov	arg01, abortchain
2561c     0C 94 06 F6 | 	mov	arg02, #12
25620     01 96 06 F6 | 	mov	arg03, #1
25624     1A 01 A0 FD | 	call	#__longjmp
25628     01 7A 66 F6 | 	neg	result1, #1
2562c     18 01 90 FD | 	jmp	#LR__3319
25630                 | LR__3310
25630     08 AE 06 F1 | 	add	local05, #8
25634     57 7B 0A FB | 	rdlong	result1, local05 wz
25638     08 AE 86 F1 | 	sub	local05, #8
2563c     57 93 02 56 |  if_ne	mov	arg01, local05
25640     D8 3A B0 5D |  if_ne	call	#__system___closeraw
25644     00 A6 0E F2 | 	cmp	local01, #0 wz
25648     00 A8 0E A2 |  if_e	cmp	local02, #0 wz
2564c     00 AA 0E A2 |  if_e	cmp	local03, #0 wz
25650     3C 00 90 AD |  if_e	jmp	#LR__3312
25654     0C 92 06 F6 | 	mov	arg01, #12
25658     50 2F B0 FD | 	call	#__system___gc_alloc_managed
2565c     3D AD 0A F6 | 	mov	local04, result1 wz
25660     18 00 90 5D |  if_ne	jmp	#LR__3311
25664     2E 93 02 F6 | 	mov	arg01, abortchain
25668     07 94 06 F6 | 	mov	arg02, #7
2566c     01 96 06 F6 | 	mov	arg03, #1
25670     1A 01 A0 FD | 	call	#__longjmp
25674     01 7A 66 F6 | 	neg	result1, #1
25678     CC 00 90 FD | 	jmp	#LR__3319
2567c                 | LR__3311
2567c     56 01 68 FC | 	wrlong	#0, local04
25680     04 AC 06 F1 | 	add	local04, #4
25684     56 01 68 FC | 	wrlong	#0, local04
25688     04 AC 86 F1 | 	sub	local04, #4
2568c     57 AD 62 FC | 	wrlong	local04, local05
25690                 | LR__3312
25690     00 A6 0E F2 | 	cmp	local01, #0 wz
25694     20 00 90 AD |  if_e	jmp	#LR__3313
25698     56 A7 62 FC | 	wrlong	local01, local04
2569c     56 7B 02 F6 | 	mov	result1, local04
256a0     00 70 05 FF 
256a4     00 7A 46 F5 | 	or	result1, ##182452224
256a8     1C AE 06 F1 | 	add	local05, #28
256ac     57 7B 62 FC | 	wrlong	result1, local05
256b0     1C AE 86 F1 | 	sub	local05, #28
256b4     0C 00 90 FD | 	jmp	#LR__3314
256b8                 | LR__3313
256b8     1C AE 06 F1 | 	add	local05, #28
256bc     57 01 68 FC | 	wrlong	#0, local05
256c0     1C AE 86 F1 | 	sub	local05, #28
256c4                 | LR__3314
256c4     00 A8 0E F2 | 	cmp	local02, #0 wz
256c8     28 00 90 AD |  if_e	jmp	#LR__3315
256cc     04 AC 06 F1 | 	add	local04, #4
256d0     56 A9 62 FC | 	wrlong	local02, local04
256d4     04 AC 86 F1 | 	sub	local04, #4
256d8     56 7B 02 F6 | 	mov	result1, local04
256dc     00 78 05 FF 
256e0     00 7A 46 F5 | 	or	result1, ##183500800
256e4     20 AE 06 F1 | 	add	local05, #32
256e8     57 7B 62 FC | 	wrlong	result1, local05
256ec     20 AE 86 F1 | 	sub	local05, #32
256f0     0C 00 90 FD | 	jmp	#LR__3316
256f4                 | LR__3315
256f4     20 AE 06 F1 | 	add	local05, #32
256f8     57 01 68 FC | 	wrlong	#0, local05
256fc     20 AE 86 F1 | 	sub	local05, #32
25700                 | LR__3316
25700     00 AA 0E F2 | 	cmp	local03, #0 wz
25704     24 00 90 AD |  if_e	jmp	#LR__3317
25708     08 AC 06 F1 | 	add	local04, #8
2570c     56 AB 62 FC | 	wrlong	local03, local04
25710     08 AC 86 F1 | 	sub	local04, #8
25714     00 80 05 FF 
25718     00 AC 46 F5 | 	or	local04, ##184549376
2571c     24 AE 06 F1 | 	add	local05, #36
25720     57 AD 62 FC | 	wrlong	local04, local05
25724     24 AE 86 F1 | 	sub	local05, #36
25728     0C 00 90 FD | 	jmp	#LR__3318
2572c                 | LR__3317
2572c     24 AE 06 F1 | 	add	local05, #36
25730     57 01 68 FC | 	wrlong	#0, local05
25734     24 AE 86 F1 | 	sub	local05, #36
25738                 | LR__3318
25738     08 AE 06 F1 | 	add	local05, #8
2573c     40 00 80 FF 
25740     57 07 68 FC | 	wrlong	##32771, local05
25744     00 7A 06 F6 | 	mov	result1, #0
25748                 | LR__3319
25748     E7 F0 03 F6 | 	mov	ptra, fp
2574c     F2 00 A0 FD | 	call	#popregs_
25750                 | __system___basic_open_ret
25750     2D 00 64 FD | 	ret
25754                 | 
25754                 | __system___basic_open_string
25754     04 CA 05 F6 | 	mov	COUNT_, #4
25758     E8 00 A0 FD | 	call	#pushregs_
2575c     4A A7 02 F6 | 	mov	local01, arg02
25760     4B A9 02 F6 | 	mov	local02, arg03
25764     5C 42 B0 FD | 	call	#__system____getftab
25768     3D AB 0A F6 | 	mov	local03, result1 wz
2576c     18 00 90 5D |  if_ne	jmp	#LR__3320
25770     2E 93 02 F6 | 	mov	arg01, abortchain
25774     0C 94 06 F6 | 	mov	arg02, #12
25778     01 96 06 F6 | 	mov	arg03, #1
2577c     1A 01 A0 FD | 	call	#__longjmp
25780     01 7A 66 F6 | 	neg	result1, #1
25784     58 00 90 FD | 	jmp	#LR__3322
25788                 | LR__3320
25788     08 AA 06 F1 | 	add	local03, #8
2578c     55 99 0A FB | 	rdlong	arg04, local03 wz
25790     08 AA 86 F1 | 	sub	local03, #8
25794     55 93 02 56 |  if_ne	mov	arg01, local03
25798     80 39 B0 5D |  if_ne	call	#__system___closeraw
2579c     53 95 02 F6 | 	mov	arg02, local01
257a0     54 97 02 F6 | 	mov	arg03, local02
257a4     55 93 02 F6 | 	mov	arg01, local03
257a8     B6 99 06 F6 | 	mov	arg04, #438
257ac     1C 36 B0 FD | 	call	#__system___openraw
257b0     3D AD 02 F6 | 	mov	local04, result1
257b4     00 AC 56 F2 | 	cmps	local04, #0 wc
257b8     20 00 90 3D |  if_ae	jmp	#LR__3321
257bc     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
257c0     20 7A 06 F1 | 	add	result1, #32
257c4     2E 93 02 F6 | 	mov	arg01, abortchain
257c8     3D 95 02 FB | 	rdlong	arg02, result1
257cc     01 96 06 F6 | 	mov	arg03, #1
257d0     1A 01 A0 FD | 	call	#__longjmp
257d4     01 7A 66 F6 | 	neg	result1, #1
257d8     04 00 90 FD | 	jmp	#LR__3322
257dc                 | LR__3321
257dc     56 7B 02 F6 | 	mov	result1, local04
257e0                 | LR__3322
257e0     E7 F0 03 F6 | 	mov	ptra, fp
257e4     F2 00 A0 FD | 	call	#popregs_
257e8                 | __system___basic_open_string_ret
257e8     2D 00 64 FD | 	ret
257ec                 | 
257ec                 | __system___find_free_file
257ec     34 81 02 F6 | 	mov	_var01, ptr___system__dat__
257f0     02 00 00 FF 
257f4     2C 81 06 F1 | 	add	_var01, ##1324
257f8     00 82 06 F6 | 	mov	_var02, #0
257fc     D7 12 48 FB | 	callpa	#(@LR__3331-@LR__3330)>>2,fcache_load_ptr_
25800                 | LR__3330
25800     0A 82 56 F2 | 	cmps	_var02, #10 wc
25804     1C 00 90 3D |  if_ae	jmp	#LR__3332
25808     34 82 06 FD | 	qmul	_var02, #52
2580c     18 7A 62 FD | 	getqx	result1
25810     40 7B 02 F1 | 	add	result1, _var01
25814     08 7A 06 F1 | 	add	result1, #8
25818     3D 7B 0A FB | 	rdlong	result1, result1 wz
2581c     01 82 06 51 |  if_ne	add	_var02, #1
25820     DC FF 9F 5D |  if_ne	jmp	#LR__3330
25824                 | LR__3331
25824                 | LR__3332
25824     0A 82 0E F2 | 	cmp	_var02, #10 wz
25828     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2582c     34 17 68 AC |  if_e	wrlong	#11, ptr___system__dat__
25830     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
25834     01 7A 66 A6 |  if_e	neg	result1, #1
25838     41 7B 02 56 |  if_ne	mov	result1, _var02
2583c                 | __system___find_free_file_ret
2583c     2D 00 64 FD | 	ret
25840                 | 
25840                 | __system___basic_print_char
25840     03 CA 05 F6 | 	mov	COUNT_, #3
25844     E8 00 A0 FD | 	call	#pushregs_
25848     4A A7 02 F6 | 	mov	local01, arg02
2584c     20 49 B0 FD | 	call	#__system___gettxfunc
25850     3D A9 0A F6 | 	mov	local02, result1 wz
25854     00 7A 06 A6 |  if_e	mov	result1, #0
25858     30 00 90 AD |  if_e	jmp	#LR__3340
2585c     54 AB 02 F6 | 	mov	local03, local02
25860     13 A8 46 F7 | 	zerox	local02, #19
25864     14 AA 46 F0 | 	shr	local03, #20
25868     02 AA 66 F0 | 	shl	local03, #2
2586c     2D AB 02 F1 | 	add	local03, __methods__
25870     55 AB 02 FB | 	rdlong	local03, local03
25874     53 93 02 F6 | 	mov	arg01, local01
25878     32 A7 02 F6 | 	mov	local01, objptr
2587c     54 65 02 F6 | 	mov	objptr, local02
25880     2D AA 62 FD | 	call	local03
25884     53 65 02 F6 | 	mov	objptr, local01
25888     01 7A 06 F6 | 	mov	result1, #1
2588c                 | LR__3340
2588c     E7 F0 03 F6 | 	mov	ptra, fp
25890     F2 00 A0 FD | 	call	#popregs_
25894                 | __system___basic_print_char_ret
25894     2D 00 64 FD | 	ret
25898                 | 
25898                 | __system___basic_print_string
25898     03 CA 05 F6 | 	mov	COUNT_, #3
2589c     E8 00 A0 FD | 	call	#pushregs_
258a0     4A A7 02 F6 | 	mov	local01, arg02
258a4     4B A9 02 F6 | 	mov	local02, arg03
258a8     C4 48 B0 FD | 	call	#__system___gettxfunc
258ac     3D AB 0A F6 | 	mov	local03, result1 wz
258b0     00 7A 06 A6 |  if_e	mov	result1, #0
258b4     18 00 90 AD |  if_e	jmp	#LR__3350
258b8     00 A6 0E F2 | 	cmp	local01, #0 wz
258bc     00 7A 06 A6 |  if_e	mov	result1, #0
258c0     55 93 02 56 |  if_ne	mov	arg01, local03
258c4     54 95 02 56 |  if_ne	mov	arg02, local02
258c8     53 97 02 56 |  if_ne	mov	arg03, local01
258cc     FC 01 B0 5D |  if_ne	call	#__system___fmtstr
258d0                 | LR__3350
258d0     E7 F0 03 F6 | 	mov	ptra, fp
258d4     F2 00 A0 FD | 	call	#popregs_
258d8                 | __system___basic_print_string_ret
258d8     2D 00 64 FD | 	ret
258dc                 | 
258dc                 | __system___basic_print_integer
258dc     04 CA 05 F6 | 	mov	COUNT_, #4
258e0     E8 00 A0 FD | 	call	#pushregs_
258e4     4A A7 02 F6 | 	mov	local01, arg02
258e8     4B A9 02 F6 | 	mov	local02, arg03
258ec     4C AB 02 F6 | 	mov	local03, arg04
258f0     7C 48 B0 FD | 	call	#__system___gettxfunc
258f4     3D AD 0A F6 | 	mov	local04, result1 wz
258f8     00 7A 06 A6 |  if_e	mov	result1, #0
258fc     56 93 02 56 |  if_ne	mov	arg01, local04
25900     54 95 02 56 |  if_ne	mov	arg02, local02
25904     53 97 02 56 |  if_ne	mov	arg03, local01
25908     55 99 02 56 |  if_ne	mov	arg04, local03
2590c     A8 02 B0 5D |  if_ne	call	#__system___fmtnum
25910     E7 F0 03 F6 | 	mov	ptra, fp
25914     F2 00 A0 FD | 	call	#popregs_
25918                 | __system___basic_print_integer_ret
25918     2D 00 64 FD | 	ret
2591c                 | 
2591c                 | __system___basic_print_unsigned
2591c     03 CA 05 F6 | 	mov	COUNT_, #3
25920     E8 00 A0 FD | 	call	#pushregs_
25924     4A A7 02 F6 | 	mov	local01, arg02
25928     4B A9 02 F6 | 	mov	local02, arg03
2592c     4C AB 02 F6 | 	mov	local03, arg04
25930     3C 48 B0 FD | 	call	#__system___gettxfunc
25934     3D 93 0A F6 | 	mov	arg01, result1 wz
25938     00 7A 06 A6 |  if_e	mov	result1, #0
2593c     3A A8 26 54 |  if_ne	bith	local02, #58
25940     54 95 02 56 |  if_ne	mov	arg02, local02
25944     53 97 02 56 |  if_ne	mov	arg03, local01
25948     55 99 02 56 |  if_ne	mov	arg04, local03
2594c     68 02 B0 5D |  if_ne	call	#__system___fmtnum
25950     E7 F0 03 F6 | 	mov	ptra, fp
25954     F2 00 A0 FD | 	call	#popregs_
25958                 | __system___basic_print_unsigned_ret
25958     2D 00 64 FD | 	ret
2595c                 | 
2595c                 | __system___basic_get_char
2595c     03 CA 05 F6 | 	mov	COUNT_, #3
25960     E8 00 A0 FD | 	call	#pushregs_
25964     4C 48 B0 FD | 	call	#__system___getrxfunc
25968     3D A7 0A F6 | 	mov	local01, result1 wz
2596c     01 7A 66 A6 |  if_e	neg	result1, #1
25970     28 00 90 AD |  if_e	jmp	#LR__3360
25974     53 A9 02 F6 | 	mov	local02, local01
25978     13 A6 46 F7 | 	zerox	local01, #19
2597c     14 A8 46 F0 | 	shr	local02, #20
25980     02 A8 66 F0 | 	shl	local02, #2
25984     2D A9 02 F1 | 	add	local02, __methods__
25988     54 A9 02 FB | 	rdlong	local02, local02
2598c     32 AB 02 F6 | 	mov	local03, objptr
25990     53 65 02 F6 | 	mov	objptr, local01
25994     2D A8 62 FD | 	call	local02
25998     55 65 02 F6 | 	mov	objptr, local03
2599c                 | LR__3360
2599c     E7 F0 03 F6 | 	mov	ptra, fp
259a0     F2 00 A0 FD | 	call	#popregs_
259a4                 | __system___basic_get_char_ret
259a4     2D 00 64 FD | 	ret
259a8                 | 
259a8                 | __system___basic_put
259a8     04 CA 05 F6 | 	mov	COUNT_, #4
259ac     E8 00 A0 FD | 	call	#pushregs_
259b0     4D A7 02 F6 | 	mov	local01, arg05
259b4     53 99 02 FD | 	qmul	arg04, local01
259b8     49 A9 02 F6 | 	mov	local02, arg01
259bc     4B AB 02 F6 | 	mov	local03, arg03
259c0     00 94 0E F2 | 	cmp	arg02, #0 wz
259c4     18 AC 62 FD | 	getqx	local04
259c8     18 00 90 AD |  if_e	jmp	#LR__3370
259cc     01 94 86 F1 | 	sub	arg02, #1
259d0     4A 97 02 F6 | 	mov	arg03, arg02
259d4     1F 96 C6 F0 | 	sar	arg03, #31
259d8     54 93 02 F6 | 	mov	arg01, local02
259dc     00 98 06 F6 | 	mov	arg04, #0
259e0     E4 3D B0 FD | 	call	#__system__lseek
259e4                 | LR__3370
259e4     55 95 02 F6 | 	mov	arg02, local03
259e8     56 97 02 F6 | 	mov	arg03, local04
259ec     54 93 02 F6 | 	mov	arg01, local02
259f0     FC 3C B0 FD | 	call	#__system__write
259f4     3D AD 02 F6 | 	mov	local04, result1
259f8     01 AC 56 F2 | 	cmps	local04, #1 wc
259fc     10 00 90 CD |  if_b	jmp	#LR__3371
25a00     56 0F 03 F6 | 	mov	muldiva_, local04
25a04     53 11 03 F6 | 	mov	muldivb_, local01
25a08     FA 00 A0 FD | 	call	#divide_
25a0c     88 AD 02 F6 | 	mov	local04, muldivb_
25a10                 | LR__3371
25a10     56 7B 02 F6 | 	mov	result1, local04
25a14     E7 F0 03 F6 | 	mov	ptra, fp
25a18     F2 00 A0 FD | 	call	#popregs_
25a1c                 | __system___basic_put_ret
25a1c     2D 00 64 FD | 	ret
25a20                 | 
25a20                 | __system___basic_get
25a20     04 CA 05 F6 | 	mov	COUNT_, #4
25a24     E8 00 A0 FD | 	call	#pushregs_
25a28     4D A7 02 F6 | 	mov	local01, arg05
25a2c     53 99 02 FD | 	qmul	arg04, local01
25a30     49 A9 02 F6 | 	mov	local02, arg01
25a34     4B AB 02 F6 | 	mov	local03, arg03
25a38     00 94 0E F2 | 	cmp	arg02, #0 wz
25a3c     18 AC 62 FD | 	getqx	local04
25a40     18 00 90 AD |  if_e	jmp	#LR__3380
25a44     01 94 86 F1 | 	sub	arg02, #1
25a48     4A 97 02 F6 | 	mov	arg03, arg02
25a4c     1F 96 C6 F0 | 	sar	arg03, #31
25a50     54 93 02 F6 | 	mov	arg01, local02
25a54     00 98 06 F6 | 	mov	arg04, #0
25a58     6C 3D B0 FD | 	call	#__system__lseek
25a5c                 | LR__3380
25a5c     55 95 02 F6 | 	mov	arg02, local03
25a60     56 97 02 F6 | 	mov	arg03, local04
25a64     54 93 02 F6 | 	mov	arg01, local02
25a68     CC 3C B0 FD | 	call	#__system__read
25a6c     3D AD 02 F6 | 	mov	local04, result1
25a70     01 AC 56 F2 | 	cmps	local04, #1 wc
25a74     10 00 90 CD |  if_b	jmp	#LR__3381
25a78     56 0F 03 F6 | 	mov	muldiva_, local04
25a7c     53 11 03 F6 | 	mov	muldivb_, local01
25a80     FA 00 A0 FD | 	call	#divide_
25a84     88 AD 02 F6 | 	mov	local04, muldivb_
25a88                 | LR__3381
25a88     56 7B 02 F6 | 	mov	result1, local04
25a8c     E7 F0 03 F6 | 	mov	ptra, fp
25a90     F2 00 A0 FD | 	call	#popregs_
25a94                 | __system___basic_get_ret
25a94     2D 00 64 FD | 	ret
25a98                 | 
25a98                 | __system___fmtchar
25a98     00 CA 05 F6 | 	mov	COUNT_, #0
25a9c     E8 00 A0 FD | 	call	#pushregs_
25aa0     10 F0 07 F1 | 	add	ptra, #16
25aa4     0C CE 05 F1 | 	add	fp, #12
25aa8     E7 96 62 FC | 	wrlong	arg03, fp
25aac     4B 97 E2 F8 | 	getbyte	arg03, arg03, #0
25ab0     E7 96 62 FC | 	wrlong	arg03, fp
25ab4     E7 96 02 F6 | 	mov	arg03, fp
25ab8     0C CE 85 F1 | 	sub	fp, #12
25abc     0C 00 B0 FD | 	call	#__system___fmtstr
25ac0     E7 F0 03 F6 | 	mov	ptra, fp
25ac4     F2 00 A0 FD | 	call	#popregs_
25ac8                 | __system___fmtchar_ret
25ac8     2D 00 64 FD | 	ret
25acc                 | 
25acc                 | __system___fmtstr
25acc     09 CA 05 F6 | 	mov	COUNT_, #9
25ad0     E8 00 A0 FD | 	call	#pushregs_
25ad4     49 A7 02 F6 | 	mov	local01, arg01
25ad8     4A A9 02 F6 | 	mov	local02, arg02
25adc     4B AB 02 F6 | 	mov	local03, arg03
25ae0     54 99 E2 F8 | 	getbyte	arg04, local02, #0
25ae4     55 93 02 F6 | 	mov	arg01, local03
25ae8     49 AD 02 F6 | 	mov	local04, arg01
25aec     D7 06 48 FB | 	callpa	#(@LR__3391-@LR__3390)>>2,fcache_load_ptr_
25af0                 | LR__3390
25af0     56 7B CA FA | 	rdbyte	result1, local04 wz
25af4     01 AC 06 51 |  if_ne	add	local04, #1
25af8     F4 FF 9F 5D |  if_ne	jmp	#LR__3390
25afc                 | LR__3391
25afc     49 AD 82 F1 | 	sub	local04, arg01
25b00     00 98 0E F2 | 	cmp	arg04, #0 wz
25b04     4C AD 7A 53 |  if_ne	fles	local04, arg04 wcz
25b08     54 95 02 F6 | 	mov	arg02, local02
25b0c     56 97 02 F6 | 	mov	arg03, local04
25b10     53 93 02 F6 | 	mov	arg01, local01
25b14     02 98 06 F6 | 	mov	arg04, #2
25b18     AC 42 B0 FD | 	call	#__system___fmtpad
25b1c     3D AF 02 F6 | 	mov	local05, result1
25b20     00 AE 56 F2 | 	cmps	local05, #0 wc
25b24     57 7B 02 C6 |  if_b	mov	result1, local05
25b28     80 00 90 CD |  if_b	jmp	#LR__3394
25b2c     01 AC 56 F2 | 	cmps	local04, #1 wc
25b30     50 00 90 CD |  if_b	jmp	#LR__3393
25b34     56 B1 02 F6 | 	mov	local06, local04
25b38                 | LR__3392
25b38     53 B3 02 F6 | 	mov	local07, local01
25b3c     53 B5 02 F6 | 	mov	local08, local01
25b40     13 B2 46 F7 | 	zerox	local07, #19
25b44     14 B4 46 F0 | 	shr	local08, #20
25b48     02 B4 66 F0 | 	shl	local08, #2
25b4c     2D B5 02 F1 | 	add	local08, __methods__
25b50     5A B5 02 FB | 	rdlong	local08, local08
25b54     55 93 C2 FA | 	rdbyte	arg01, local03
25b58     32 B7 02 F6 | 	mov	local09, objptr
25b5c     59 65 02 F6 | 	mov	objptr, local07
25b60     01 AA 06 F1 | 	add	local03, #1
25b64     2D B4 62 FD | 	call	local08
25b68     5B 65 02 F6 | 	mov	objptr, local09
25b6c     3D B7 02 F6 | 	mov	local09, result1
25b70     00 B6 56 F2 | 	cmps	local09, #0 wc
25b74     5B 7B 02 C6 |  if_b	mov	result1, local09
25b78     30 00 90 CD |  if_b	jmp	#LR__3394
25b7c     5B AF 02 F1 | 	add	local05, local09
25b80     ED B1 6E FB | 	djnz	local06, #LR__3392
25b84                 | LR__3393
25b84     54 95 02 F6 | 	mov	arg02, local02
25b88     56 97 02 F6 | 	mov	arg03, local04
25b8c     53 93 02 F6 | 	mov	arg01, local01
25b90     01 98 06 F6 | 	mov	arg04, #1
25b94     30 42 B0 FD | 	call	#__system___fmtpad
25b98     3D B7 02 F6 | 	mov	local09, result1
25b9c     00 B6 56 F2 | 	cmps	local09, #0 wc
25ba0     5B 7B 02 C6 |  if_b	mov	result1, local09
25ba4     5B AF 02 31 |  if_ae	add	local05, local09
25ba8     57 7B 02 36 |  if_ae	mov	result1, local05
25bac                 | LR__3394
25bac     E7 F0 03 F6 | 	mov	ptra, fp
25bb0     F2 00 A0 FD | 	call	#popregs_
25bb4                 | __system___fmtstr_ret
25bb4     2D 00 64 FD | 	ret
25bb8                 | 
25bb8                 | __system___fmtnum
25bb8     0B CA 05 F6 | 	mov	COUNT_, #11
25bbc     E8 00 A0 FD | 	call	#pushregs_
25bc0     49 A7 02 F6 | 	mov	local01, arg01
25bc4     4A A9 02 F6 | 	mov	local02, arg02
25bc8     4B AB 02 F6 | 	mov	local03, arg03
25bcc     4C AD 02 F6 | 	mov	local04, arg04
25bd0     F8 AF 02 F6 | 	mov	local05, ptra
25bd4     57 B1 02 F6 | 	mov	local06, local05
25bd8     00 B2 06 F6 | 	mov	local07, #0
25bdc     54 B5 02 F6 | 	mov	local08, local02
25be0     10 B4 46 F0 | 	shr	local08, #16
25be4     3F B4 06 F5 | 	and	local08, #63
25be8     54 B7 E2 F8 | 	getbyte	local09, local02, #0
25bec     54 B9 02 F6 | 	mov	local10, local02
25bf0     1A B8 46 F0 | 	shr	local10, #26
25bf4     03 B8 06 F5 | 	and	local10, #3
25bf8     5C BB 02 F6 | 	mov	local11, local10
25bfc     01 B4 56 F2 | 	cmps	local08, #1 wc
25c00     44 F0 07 F1 | 	add	ptra, #68
25c04     01 B4 86 31 |  if_ae	sub	local08, #1
25c08     41 B6 56 F2 | 	cmps	local09, #65 wc
25c0c     00 B6 0E C2 |  if_b	cmp	local09, #0 wz
25c10     40 B6 06 B6 |  if_nc_or_z	mov	local09, #64
25c14     03 BA 0E F2 | 	cmp	local11, #3 wz
25c18     00 BA 06 A6 |  if_e	mov	local11, #0
25c1c     00 AA 56 52 |  if_ne	cmps	local03, #0 wc
25c20     04 BA 06 46 |  if_c_and_nz	mov	local11, #4
25c24     55 AB 62 46 |  if_c_and_nz	neg	local03, local03
25c28     00 BA 0E F2 | 	cmp	local11, #0 wz
25c2c     4C 00 90 AD |  if_e	jmp	#LR__3403
25c30     01 B2 06 F6 | 	mov	local07, #1
25c34     5B B5 0A F2 | 	cmp	local08, local09 wz
25c38     18 00 90 5D |  if_ne	jmp	#LR__3401
25c3c     05 B4 6E FB | 	djnz	local08, #LR__3400
25c40     53 93 02 F6 | 	mov	arg01, local01
25c44     54 95 02 F6 | 	mov	arg02, local02
25c48     23 96 06 F6 | 	mov	arg03, #35
25c4c     48 FE BF FD | 	call	#__system___fmtchar
25c50     8C 00 90 FD | 	jmp	#LR__3407
25c54                 | LR__3400
25c54                 | LR__3401
25c54     02 BA 0E F2 | 	cmp	local11, #2 wz
25c58     58 B9 02 A6 |  if_e	mov	local10, local06
25c5c     01 B0 06 A1 |  if_e	add	local06, #1
25c60     5C 41 48 AC |  if_e	wrbyte	#32, local10
25c64     14 00 90 AD |  if_e	jmp	#LR__3402
25c68     04 BA 0E F2 | 	cmp	local11, #4 wz
25c6c     58 5B 48 AC |  if_e	wrbyte	#45, local06
25c70     01 B0 06 A1 |  if_e	add	local06, #1
25c74     58 57 48 5C |  if_ne	wrbyte	#43, local06
25c78     01 B0 06 51 |  if_ne	add	local06, #1
25c7c                 | LR__3402
25c7c                 | LR__3403
25c7c     59 B9 02 F6 | 	mov	local10, local07
25c80     58 93 02 F6 | 	mov	arg01, local06
25c84     55 95 02 F6 | 	mov	arg02, local03
25c88     56 97 02 F6 | 	mov	arg03, local04
25c8c     5A 99 02 F6 | 	mov	arg04, local08
25c90     00 9A 06 F6 | 	mov	arg05, #0
25c94     1D A8 2E F4 | 	testbn	local02, #29 wz
25c98     01 9A 06 56 |  if_ne	mov	arg05, #1
25c9c     F0 41 B0 FD | 	call	#__system___uitoa
25ca0     3D B9 02 F1 | 	add	local10, result1
25ca4     5B B9 5A F2 | 	cmps	local10, local09 wcz
25ca8     24 00 90 ED |  if_be	jmp	#LR__3406
25cac     D7 0E 48 FB | 	callpa	#(@LR__3405-@LR__3404)>>2,fcache_load_ptr_
25cb0                 | LR__3404
25cb0     5B B9 02 F6 | 	mov	local10, local09
25cb4     01 B8 56 F2 | 	cmps	local10, #1 wc
25cb8     01 B6 86 F1 | 	sub	local09, #1
25cbc     58 B9 02 36 |  if_ae	mov	local10, local06
25cc0     01 B0 06 31 |  if_ae	add	local06, #1
25cc4     5C 47 48 3C |  if_ae	wrbyte	#35, local10
25cc8     E4 FF 9F 3D |  if_ae	jmp	#LR__3404
25ccc                 | LR__3405
25ccc     58 01 48 FC | 	wrbyte	#0, local06
25cd0                 | LR__3406
25cd0     53 93 02 F6 | 	mov	arg01, local01
25cd4     54 95 02 F6 | 	mov	arg02, local02
25cd8     57 97 02 F6 | 	mov	arg03, local05
25cdc     EC FD BF FD | 	call	#__system___fmtstr
25ce0                 | LR__3407
25ce0     E7 F0 03 F6 | 	mov	ptra, fp
25ce4     F2 00 A0 FD | 	call	#popregs_
25ce8                 | __system___fmtnum_ret
25ce8     2D 00 64 FD | 	ret
25cec                 | 
25cec                 | __system___fmtfloat
25cec     29 CA 05 F6 | 	mov	COUNT_, #41
25cf0     E8 00 A0 FD | 	call	#pushregs_
25cf4     24 F1 07 F1 | 	add	ptra, #292
25cf8     49 A7 02 F6 | 	mov	local01, arg01
25cfc     4A A9 02 F6 | 	mov	local02, arg02
25d00     4B AB 02 F6 | 	mov	local03, arg03
25d04     4C AD 02 F6 | 	mov	local04, arg04
25d08     0A AE 06 F6 | 	mov	local05, #10
25d0c     00 B0 06 F6 | 	mov	local06, #0
25d10     00 B2 06 F6 | 	mov	local07, #0
25d14     02 B4 06 F6 | 	mov	local08, #2
25d18     00 B6 06 F6 | 	mov	local09, #0
25d1c     00 B8 06 F6 | 	mov	local10, #0
25d20     00 BA 06 F6 | 	mov	local11, #0
25d24     E7 BC 02 F6 | 	mov	local12, fp
25d28     C8 BC 06 F1 | 	add	local12, #200
25d2c     5E BF 02 F6 | 	mov	local13, local12
25d30     54 C1 02 F6 | 	mov	local14, local02
25d34     10 C0 46 F0 | 	shr	local14, #16
25d38     3F C0 0E F5 | 	and	local14, #63 wz
25d3c     54 C3 02 F6 | 	mov	local15, local02
25d40     1C C2 46 F0 | 	shr	local15, #28
25d44     01 C2 06 F5 | 	and	local15, #1
25d48     18 00 90 5D |  if_ne	jmp	#LR__3410
25d4c     61 AC 0E F2 | 	cmp	local04, #97 wz
25d50     0D C0 06 A6 |  if_e	mov	local14, #13
25d54     01 B2 06 A6 |  if_e	mov	local07, #1
25d58     0C 00 90 AD |  if_e	jmp	#LR__3411
25d5c     06 C0 06 F6 | 	mov	local14, #6
25d60     04 00 90 FD | 	jmp	#LR__3411
25d64                 | LR__3410
25d64     01 C0 86 F1 | 	sub	local14, #1
25d68                 | LR__3411
25d68     54 C5 02 F6 | 	mov	local16, local02
25d6c     16 C4 46 F0 | 	shr	local16, #22
25d70     03 C4 06 F5 | 	and	local16, #3
25d74     54 C7 02 F6 | 	mov	local17, local02
25d78     1D C6 46 F0 | 	shr	local17, #29
25d7c     01 C6 06 F5 | 	and	local17, #1
25d80     54 C9 EA F8 | 	getbyte	local18, local02, #1
25d84     54 CB E2 F8 | 	getbyte	local19, local02, #0
25d88     65 AC 0E F2 | 	cmp	local04, #101 wz
25d8c     6E CC 62 FD | 	wrz	local20
25d90     66 CF 02 F6 | 	mov	local21, local20
25d94     00 C6 0E F2 | 	cmp	local17, #0 wz
25d98     45 CC 06 56 |  if_ne	mov	local20, #69
25d9c     65 CC 06 A6 |  if_e	mov	local20, #101
25da0     66 D1 02 F6 | 	mov	local22, local20
25da4     61 AC 0E F2 | 	cmp	local04, #97 wz
25da8     2C 00 90 5D |  if_ne	jmp	#LR__3412
25dac     01 CE 06 F6 | 	mov	local21, #1
25db0     00 C6 0E F2 | 	cmp	local17, #0 wz
25db4     50 CC 06 56 |  if_ne	mov	local20, #80
25db8     70 CC 06 A6 |  if_e	mov	local20, #112
25dbc     66 D1 02 F6 | 	mov	local22, local20
25dc0     02 AE 06 F6 | 	mov	local05, #2
25dc4     01 B4 06 F6 | 	mov	local08, #1
25dc8     00 C6 0E F2 | 	cmp	local17, #0 wz
25dcc     58 CC 06 56 |  if_ne	mov	local20, #88
25dd0     78 CC 06 A6 |  if_e	mov	local20, #120
25dd4     66 B7 02 F6 | 	mov	local09, local20
25dd8                 | LR__3412
25dd8     23 AC 0E F2 | 	cmp	local04, #35 wz
25ddc     14 00 90 5D |  if_ne	jmp	#LR__3413
25de0     01 B8 06 F6 | 	mov	local10, #1
25de4     00 C2 0E F2 | 	cmp	local15, #0 wz
25de8     66 AC 06 56 |  if_ne	mov	local04, #102
25dec     00 C2 06 56 |  if_ne	mov	local15, #0
25df0     01 C2 06 A6 |  if_e	mov	local15, #1
25df4                 | LR__3413
25df4     54 D3 02 F6 | 	mov	local23, local02
25df8     1A D2 46 F0 | 	shr	local23, #26
25dfc     03 D2 06 F5 | 	and	local23, #3
25e00     55 7B 02 F6 | 	mov	result1, local03
25e04     1F 7A 4E F0 | 	shr	result1, #31 wz
25e08     2D B0 06 56 |  if_ne	mov	local06, #45
25e0c     1F AA E6 54 |  if_ne	bitnot	local03, #31
25e10     14 00 90 5D |  if_ne	jmp	#LR__3415
25e14     01 D2 0E F2 | 	cmp	local23, #1 wz
25e18     2B B0 06 A6 |  if_e	mov	local06, #43
25e1c     08 00 90 AD |  if_e	jmp	#LR__3414
25e20     02 D2 0E F2 | 	cmp	local23, #2 wz
25e24     20 B0 06 A6 |  if_e	mov	local06, #32
25e28                 | LR__3414
25e28                 | LR__3415
25e28     54 D5 02 F6 | 	mov	local24, local02
25e2c     18 D4 46 F0 | 	shr	local24, #24
25e30     03 D4 06 F5 | 	and	local24, #3
25e34     00 CC 06 F6 | 	mov	local20, #0
25e38     00 B0 0E F2 | 	cmp	local06, #0 wz
25e3c     0A AE 0E A2 |  if_e	cmp	local05, #10 wz
25e40     01 CC 06 56 |  if_ne	mov	local20, #1
25e44     66 D7 0A F6 | 	mov	local25, local20 wz
25e48     60 00 90 AD |  if_e	jmp	#LR__3417
25e4c     02 D4 0E F2 | 	cmp	local24, #2 wz
25e50     58 00 90 5D |  if_ne	jmp	#LR__3417
25e54     02 C4 0E F2 | 	cmp	local16, #2 wz
25e58     50 00 90 AD |  if_e	jmp	#LR__3417
25e5c     58 95 02 F6 | 	mov	arg02, local06
25e60     5B D9 02 F6 | 	mov	local26, local09
25e64     5E 93 02 F6 | 	mov	arg01, local12
25e68     6C 97 02 F6 | 	mov	arg03, local26
25e6c     88 42 B0 FD | 	call	#__system__emitsign_0584
25e70     3D DB 02 F6 | 	mov	local27, result1
25e74     00 DA 56 F2 | 	cmps	local27, #0 wc
25e78     6D 7B 02 C6 |  if_b	mov	result1, local27
25e7c     C0 05 90 CD |  if_b	jmp	#LR__3460
25e80     6D DD 02 F6 | 	mov	local28, local27
25e84     6D BD 02 F1 | 	add	local12, local27
25e88     00 C8 0E F2 | 	cmp	local18, #0 wz
25e8c     18 00 90 AD |  if_e	jmp	#LR__3416
25e90     6D C9 82 F1 | 	sub	local18, local27
25e94     00 C8 56 F3 | 	fges	local18, #0 wc
25e98     E8 A8 06 F4 | 	bitl	local02, #232
25e9c     64 DD 02 F6 | 	mov	local28, local18
25ea0     08 DC 66 F0 | 	shl	local28, #8
25ea4     6E A9 42 F5 | 	or	local02, local28
25ea8                 | LR__3416
25ea8     00 D6 06 F6 | 	mov	local25, #0
25eac                 | LR__3417
25eac     55 93 02 F6 | 	mov	arg01, local03
25eb0     F4 1C B0 FD | 	call	#__system____builtin_ilogb
25eb4     FF FF 3F FF 
25eb8     FF 7B 0E F2 | 	cmp	result1, ##2147483647 wz
25ebc     24 00 90 5D |  if_ne	jmp	#LR__3418
25ec0     00 B0 0E F2 | 	cmp	local06, #0 wz
25ec4     5E CD 02 56 |  if_ne	mov	local20, local12
25ec8     01 BC 06 51 |  if_ne	add	local12, #1
25ecc     66 B1 42 5C |  if_ne	wrbyte	local06, local20
25ed0     93 01 00 FF 
25ed4     7E 94 06 F6 | 	mov	arg02, ##@LR__5461
25ed8     5E 93 02 F6 | 	mov	arg01, local12
25edc     78 EC BF FD | 	call	#__system____builtin_strcpy
25ee0     AC 04 90 FD | 	jmp	#LR__3450
25ee4                 | LR__3418
25ee4     55 93 02 F6 | 	mov	arg01, local03
25ee8     BC 1C B0 FD | 	call	#__system____builtin_ilogb
25eec     3D CD 02 F6 | 	mov	local20, result1
25ef0     00 00 40 FF 
25ef4     00 CC 0E F2 | 	cmp	local20, ##-2147483648 wz
25ef8     24 00 90 5D |  if_ne	jmp	#LR__3419
25efc     00 B0 0E F2 | 	cmp	local06, #0 wz
25f00     5E CD 02 56 |  if_ne	mov	local20, local12
25f04     01 BC 06 51 |  if_ne	add	local12, #1
25f08     66 B1 42 5C |  if_ne	wrbyte	local06, local20
25f0c     5E 93 02 F6 | 	mov	arg01, local12
25f10     93 01 00 FF 
25f14     82 94 06 F6 | 	mov	arg02, ##@LR__5462
25f18     3C EC BF FD | 	call	#__system____builtin_strcpy
25f1c     70 04 90 FD | 	jmp	#LR__3450
25f20                 | LR__3419
25f20     67 AC 0E F2 | 	cmp	local04, #103 wz
25f24     23 AC 0E 52 |  if_ne	cmp	local04, #35 wz
25f28     0C 01 90 5D |  if_ne	jmp	#LR__3424
25f2c     14 CE 05 F1 | 	add	fp, #20
25f30     E7 94 02 F6 | 	mov	arg02, fp
25f34     0C CE 05 F1 | 	add	fp, #12
25f38     E7 96 02 F6 | 	mov	arg03, fp
25f3c     20 CE 85 F1 | 	sub	fp, #32
25f40     60 99 02 F6 | 	mov	arg04, local14
25f44     57 9B 02 F6 | 	mov	arg05, local05
25f48     55 93 02 F6 | 	mov	arg01, local03
25f4c     B4 3F B0 FD | 	call	#__system__disassemble_0582
25f50     23 AC 0E F2 | 	cmp	local04, #35 wz
25f54     6C 00 90 5D |  if_ne	jmp	#LR__3421
25f58     20 CE 05 F1 | 	add	fp, #32
25f5c     E7 CC 02 FB | 	rdlong	local20, fp
25f60     20 CE 85 F1 | 	sub	fp, #32
25f64     60 CD 5A F2 | 	cmps	local20, local14 wcz
25f68     01 CE 06 16 |  if_a	mov	local21, #1
25f6c     24 01 90 1D |  if_a	jmp	#LR__3427
25f70     20 CE 05 F1 | 	add	fp, #32
25f74     E7 CC 02 FB | 	rdlong	local20, fp
25f78     20 CE 85 F1 | 	sub	fp, #32
25f7c     00 CC 56 F2 | 	cmps	local20, #0 wc
25f80     1C 00 90 3D |  if_ae	jmp	#LR__3420
25f84     60 CD 62 F6 | 	neg	local20, local14
25f88     20 CE 05 F1 | 	add	fp, #32
25f8c     E7 DC 02 FB | 	rdlong	local28, fp
25f90     20 CE 85 F1 | 	sub	fp, #32
25f94     66 DD 5A F2 | 	cmps	local28, local20 wcz
25f98     01 CE 06 E6 |  if_be	mov	local21, #1
25f9c     F4 00 90 FD | 	jmp	#LR__3427
25fa0                 | LR__3420
25fa0     20 CE 05 F1 | 	add	fp, #32
25fa4     E7 CC 02 FB | 	rdlong	local20, fp
25fa8     20 CE 85 F1 | 	sub	fp, #32
25fac     01 CC 56 F2 | 	cmps	local20, #1 wc
25fb0     20 CE 05 31 |  if_ae	add	fp, #32
25fb4     E7 DC 02 3B |  if_ae	rdlong	local28, fp
25fb8     20 CE 85 31 |  if_ae	sub	fp, #32
25fbc     6E C1 82 31 |  if_ae	sub	local14, local28
25fc0     D0 00 90 FD | 	jmp	#LR__3427
25fc4                 | LR__3421
25fc4     00 B2 06 F6 | 	mov	local07, #0
25fc8     1C A8 2E F4 | 	testbn	local02, #28 wz
25fcc     01 B2 06 A6 |  if_e	mov	local07, #1
25fd0     20 CE 05 F1 | 	add	fp, #32
25fd4     E7 CC 02 FB | 	rdlong	local20, fp
25fd8     20 CE 85 F1 | 	sub	fp, #32
25fdc     60 CD 52 F2 | 	cmps	local20, local14 wc
25fe0     18 00 90 3D |  if_ae	jmp	#LR__3422
25fe4     20 CE 05 F1 | 	add	fp, #32
25fe8     E7 D8 02 FB | 	rdlong	local26, fp
25fec     20 CE 85 F1 | 	sub	fp, #32
25ff0     FF FF 7F FF 
25ff4     FC D9 56 F2 | 	cmps	local26, ##-4 wc
25ff8     08 00 90 3D |  if_ae	jmp	#LR__3423
25ffc                 | LR__3422
25ffc     01 CE 06 F6 | 	mov	local21, #1
26000     90 00 90 FD | 	jmp	#LR__3427
26004                 | LR__3423
26004     20 CE 05 F1 | 	add	fp, #32
26008     E7 DC 02 FB | 	rdlong	local28, fp
2600c     6E C1 82 F1 | 	sub	local14, local28
26010     0C CE 85 F1 | 	sub	fp, #12
26014     E7 94 02 F6 | 	mov	arg02, fp
26018     0C CE 05 F1 | 	add	fp, #12
2601c     E7 96 02 F6 | 	mov	arg03, fp
26020     20 CE 85 F1 | 	sub	fp, #32
26024     60 99 62 F6 | 	neg	arg04, local14
26028     55 93 02 F6 | 	mov	arg01, local03
2602c     57 9B 02 F6 | 	mov	arg05, local05
26030     D0 3E B0 FD | 	call	#__system__disassemble_0582
26034     5C 00 90 FD | 	jmp	#LR__3427
26038                 | LR__3424
26038     00 CE 0E F2 | 	cmp	local21, #0 wz
2603c     28 00 90 AD |  if_e	jmp	#LR__3425
26040     14 CE 05 F1 | 	add	fp, #20
26044     E7 94 02 F6 | 	mov	arg02, fp
26048     0C CE 05 F1 | 	add	fp, #12
2604c     E7 96 02 F6 | 	mov	arg03, fp
26050     20 CE 85 F1 | 	sub	fp, #32
26054     55 93 02 F6 | 	mov	arg01, local03
26058     60 99 02 F6 | 	mov	arg04, local14
2605c     57 9B 02 F6 | 	mov	arg05, local05
26060     A0 3E B0 FD | 	call	#__system__disassemble_0582
26064     2C 00 90 FD | 	jmp	#LR__3426
26068                 | LR__3425
26068     14 CE 05 F1 | 	add	fp, #20
2606c     E7 94 02 F6 | 	mov	arg02, fp
26070     0C CE 05 F1 | 	add	fp, #12
26074     E7 96 02 F6 | 	mov	arg03, fp
26078     20 CE 85 F1 | 	sub	fp, #32
2607c     60 DD 02 F6 | 	mov	local28, local14
26080     01 DC 06 F1 | 	add	local28, #1
26084     6E 99 62 F6 | 	neg	arg04, local28
26088     55 93 02 F6 | 	mov	arg01, local03
2608c     57 9B 02 F6 | 	mov	arg05, local05
26090     70 3E B0 FD | 	call	#__system__disassemble_0582
26094                 | LR__3426
26094                 | LR__3427
26094     02 AE 0E F2 | 	cmp	local05, #2 wz
26098     44 00 90 5D |  if_ne	jmp	#LR__3430
2609c     10 AE 06 F6 | 	mov	local05, #16
260a0                 | LR__3428
260a0     14 CE 05 F1 | 	add	fp, #20
260a4     E7 CC 0A FB | 	rdlong	local20, fp wz
260a8     14 CE 85 F1 | 	sub	fp, #20
260ac     30 00 90 AD |  if_e	jmp	#LR__3429
260b0     14 CE 05 F1 | 	add	fp, #20
260b4     E7 D8 02 FB | 	rdlong	local26, fp
260b8     14 CE 85 F1 | 	sub	fp, #20
260bc     00 80 00 FF 
260c0     00 D8 16 F2 | 	cmp	local26, ##16777216 wc
260c4     18 00 90 3D |  if_ae	jmp	#LR__3429
260c8     14 CE 05 F1 | 	add	fp, #20
260cc     E7 CC 02 FB | 	rdlong	local20, fp
260d0     01 CC 66 F0 | 	shl	local20, #1
260d4     E7 CC 62 FC | 	wrlong	local20, fp
260d8     14 CE 85 F1 | 	sub	fp, #20
260dc     C0 FF 9F FD | 	jmp	#LR__3428
260e0                 | LR__3429
260e0                 | LR__3430
260e0     70 CE 05 F1 | 	add	fp, #112
260e4     E7 92 02 F6 | 	mov	arg01, fp
260e8     5C CE 85 F1 | 	sub	fp, #92
260ec     E7 94 02 FB | 	rdlong	arg02, fp
260f0     14 CE 85 F1 | 	sub	fp, #20
260f4     57 97 02 F6 | 	mov	arg03, local05
260f8     01 98 06 F6 | 	mov	arg04, #1
260fc     63 9B 02 F6 | 	mov	arg05, local17
26100     8C 3D B0 FD | 	call	#__system___uitoa
26104     3D DF 02 F6 | 	mov	local29, result1
26108     20 CE 05 F1 | 	add	fp, #32
2610c     E7 CC 02 FB | 	rdlong	local20, fp
26110     20 CE 85 F1 | 	sub	fp, #32
26114     00 CC 56 F2 | 	cmps	local20, #0 wc
26118     44 00 90 3D |  if_ae	jmp	#LR__3431
2611c     2D BA 06 F6 | 	mov	local11, #45
26120     B0 CE 05 F1 | 	add	fp, #176
26124     E7 92 02 F6 | 	mov	arg01, fp
26128     90 CE 85 F1 | 	sub	fp, #144
2612c     E7 D8 02 FB | 	rdlong	local26, fp
26130     20 CE 85 F1 | 	sub	fp, #32
26134     6C DD 62 F6 | 	neg	local28, local26
26138     0A D8 06 F6 | 	mov	local26, #10
2613c     5A E1 02 F6 | 	mov	local30, local08
26140     63 E3 02 F6 | 	mov	local31, local17
26144     6E 95 02 F6 | 	mov	arg02, local28
26148     0A 96 06 F6 | 	mov	arg03, #10
2614c     70 99 02 F6 | 	mov	arg04, local30
26150     71 9B 02 F6 | 	mov	arg05, local31
26154     38 3D B0 FD | 	call	#__system___uitoa
26158     3D E5 02 F6 | 	mov	local32, result1
2615c     3C 00 90 FD | 	jmp	#LR__3432
26160                 | LR__3431
26160     2B BA 06 F6 | 	mov	local11, #43
26164     B0 CE 05 F1 | 	add	fp, #176
26168     E7 92 02 F6 | 	mov	arg01, fp
2616c     90 CE 85 F1 | 	sub	fp, #144
26170     E7 DC 02 FB | 	rdlong	local28, fp
26174     20 CE 85 F1 | 	sub	fp, #32
26178     0A D8 06 F6 | 	mov	local26, #10
2617c     5A E1 02 F6 | 	mov	local30, local08
26180     63 E3 02 F6 | 	mov	local31, local17
26184     6E 95 02 F6 | 	mov	arg02, local28
26188     0A 96 06 F6 | 	mov	arg03, #10
2618c     70 99 02 F6 | 	mov	arg04, local30
26190     71 9B 02 F6 | 	mov	arg05, local31
26194     F8 3C B0 FD | 	call	#__system___uitoa
26198     3D E5 02 F6 | 	mov	local32, result1
2619c                 | LR__3432
2619c     00 CE 0E F2 | 	cmp	local21, #0 wz
261a0     00 E6 06 56 |  if_ne	mov	local33, #0
261a4     00 E8 06 56 |  if_ne	mov	local34, #0
261a8     60 EB 02 56 |  if_ne	mov	local35, local14
261ac     01 EA 06 51 |  if_ne	add	local35, #1
261b0     54 00 90 5D |  if_ne	jmp	#LR__3435
261b4     20 CE 05 F1 | 	add	fp, #32
261b8     E7 DC 02 FB | 	rdlong	local28, fp
261bc     20 CE 85 F1 | 	sub	fp, #32
261c0     00 DC 56 F2 | 	cmps	local28, #0 wc
261c4     24 00 90 3D |  if_ae	jmp	#LR__3433
261c8     20 CE 05 F1 | 	add	fp, #32
261cc     E7 DC 02 FB | 	rdlong	local28, fp
261d0     6E E7 02 F6 | 	mov	local33, local28
261d4     73 E9 02 F6 | 	mov	local34, local33
261d8     20 CE 85 F1 | 	sub	fp, #32
261dc     6E EB 02 F6 | 	mov	local35, local28
261e0     60 EB 02 F1 | 	add	local35, local14
261e4     01 EA 06 F1 | 	add	local35, #1
261e8     1C 00 90 FD | 	jmp	#LR__3434
261ec                 | LR__3433
261ec     00 E8 06 F6 | 	mov	local34, #0
261f0     20 CE 05 F1 | 	add	fp, #32
261f4     E7 E6 02 FB | 	rdlong	local33, fp
261f8     20 CE 85 F1 | 	sub	fp, #32
261fc     73 EB 02 F6 | 	mov	local35, local33
26200     60 EB 02 F1 | 	add	local35, local14
26204     01 EA 06 F1 | 	add	local35, #1
26208                 | LR__3434
26208                 | LR__3435
26208     75 CD 02 F6 | 	mov	local20, local35
2620c     74 CD 82 F1 | 	sub	local20, local34
26210     01 CC 06 F1 | 	add	local20, #1
26214     66 ED 02 F6 | 	mov	local36, local20
26218     00 B0 0E F2 | 	cmp	local06, #0 wz
2621c     76 CD 02 56 |  if_ne	mov	local20, local36
26220     76 DD 02 56 |  if_ne	mov	local28, local36
26224     01 DC 06 51 |  if_ne	add	local28, #1
26228     6E ED 02 56 |  if_ne	mov	local36, local28
2622c     10 AE 0E F2 | 	cmp	local05, #16 wz
26230     02 EC 06 A1 |  if_e	add	local36, #2
26234     00 CE 0E F2 | 	cmp	local21, #0 wz
26238     02 DC 06 56 |  if_ne	mov	local28, #2
2623c     72 DD 02 51 |  if_ne	add	local28, local32
26240     6E ED 02 51 |  if_ne	add	local36, local28
26244     41 EC 56 F2 | 	cmps	local36, #65 wc
26248     01 7A 66 36 |  if_ae	neg	result1, #1
2624c     F0 01 90 3D |  if_ae	jmp	#LR__3460
26250     00 D6 0E F2 | 	cmp	local25, #0 wz
26254     28 00 90 AD |  if_e	jmp	#LR__3436
26258     58 95 02 F6 | 	mov	arg02, local06
2625c     5E 93 02 F6 | 	mov	arg01, local12
26260     5B 97 02 F6 | 	mov	arg03, local09
26264     90 3E B0 FD | 	call	#__system__emitsign_0584
26268     3D EF 02 F6 | 	mov	local37, result1
2626c     00 EE 56 F2 | 	cmps	local37, #0 wc
26270     77 7B 02 C6 |  if_b	mov	result1, local37
26274     C8 01 90 CD |  if_b	jmp	#LR__3460
26278     77 DD 02 F6 | 	mov	local28, local37
2627c     77 BD 02 F1 | 	add	local12, local37
26280                 | LR__3436
26280     74 F1 02 F6 | 	mov	local38, local34
26284     D7 42 48 FB | 	callpa	#(@LR__3441-@LR__3437)>>2,fcache_load_ptr_
26288                 | LR__3437
26288     75 F1 52 F2 | 	cmps	local38, local35 wc
2628c     7C 00 90 3D |  if_ae	jmp	#LR__3442
26290     00 F0 56 F2 | 	cmps	local38, #0 wc
26294     2C 00 90 CD |  if_b	jmp	#LR__3438
26298     6F F1 52 F2 | 	cmps	local38, local29 wc
2629c     24 00 90 3D |  if_ae	jmp	#LR__3438
262a0     5E CD 02 F6 | 	mov	local20, local12
262a4     78 D9 02 F6 | 	mov	local26, local38
262a8     E7 E0 02 F6 | 	mov	local30, fp
262ac     70 E0 06 F1 | 	add	local30, #112
262b0     70 D9 02 F1 | 	add	local26, local30
262b4     6C E3 C2 FA | 	rdbyte	local31, local26
262b8     66 E3 42 FC | 	wrbyte	local31, local20
262bc     01 BC 06 F1 | 	add	local12, #1
262c0     10 00 90 FD | 	jmp	#LR__3439
262c4                 | LR__3438
262c4     5E CD 02 F6 | 	mov	local20, local12
262c8     30 D8 06 F6 | 	mov	local26, #48
262cc     66 61 48 FC | 	wrbyte	#48, local20
262d0     01 BC 06 F1 | 	add	local12, #1
262d4                 | LR__3439
262d4     73 F1 0A F2 | 	cmp	local38, local33 wz
262d8     20 00 90 5D |  if_ne	jmp	#LR__3440
262dc     00 C2 0E F2 | 	cmp	local15, #0 wz
262e0     75 CD 02 A6 |  if_e	mov	local20, local35
262e4     01 CC 86 A1 |  if_e	sub	local20, #1
262e8     66 F1 52 A2 |  if_e	cmps	local38, local20 wc
262ec     5E CD 02 D6 |  if_c_or_nz	mov	local20, local12
262f0     2E D8 06 D6 |  if_c_or_nz	mov	local26, #46
262f4     66 5D 48 DC |  if_c_or_nz	wrbyte	#46, local20
262f8     01 BC 06 D1 |  if_c_or_nz	add	local12, #1
262fc                 | LR__3440
262fc     78 DD 02 F6 | 	mov	local28, local38
26300     01 DC 06 F1 | 	add	local28, #1
26304     6E F1 02 F6 | 	mov	local38, local28
26308     7C FF 9F FD | 	jmp	#LR__3437
2630c                 | LR__3441
2630c                 | LR__3442
2630c     00 B2 0E F2 | 	cmp	local07, #0 wz
26310     30 00 90 AD |  if_e	jmp	#LR__3446
26314     01 BC 86 F1 | 	sub	local12, #1
26318     D7 0C 48 FB | 	callpa	#(@LR__3444-@LR__3443)>>2,fcache_load_ptr_
2631c                 | LR__3443
2631c     5F BD 5A F2 | 	cmps	local12, local13 wcz
26320     10 00 90 ED |  if_be	jmp	#LR__3445
26324     5E CD C2 FA | 	rdbyte	local20, local12
26328     30 CC 0E F2 | 	cmp	local20, #48 wz
2632c     01 BC 86 A1 |  if_e	sub	local12, #1
26330     E8 FF 9F AD |  if_e	jmp	#LR__3443
26334                 | LR__3444
26334                 | LR__3445
26334     5E CD C2 FA | 	rdbyte	local20, local12
26338     2E CC 0E F2 | 	cmp	local20, #46 wz
2633c     01 BC 86 A1 |  if_e	sub	local12, #1
26340     01 BC 06 F1 | 	add	local12, #1
26344                 | LR__3446
26344     00 CE 0E F2 | 	cmp	local21, #0 wz
26348     40 00 90 AD |  if_e	jmp	#LR__3449
2634c     5E D1 42 FC | 	wrbyte	local22, local12
26350     01 BC 06 F1 | 	add	local12, #1
26354     5E BB 42 FC | 	wrbyte	local11, local12
26358     00 F0 06 F6 | 	mov	local38, #0
2635c     01 BC 06 F1 | 	add	local12, #1
26360                 | LR__3447
26360     72 F1 52 F2 | 	cmps	local38, local32 wc
26364     24 00 90 3D |  if_ae	jmp	#LR__3448
26368     78 D9 02 F6 | 	mov	local26, local38
2636c     E7 E0 02 F6 | 	mov	local30, fp
26370     B0 E0 06 F1 | 	add	local30, #176
26374     70 D9 02 F1 | 	add	local26, local30
26378     6C E3 C2 FA | 	rdbyte	local31, local26
2637c     5E E3 42 FC | 	wrbyte	local31, local12
26380     01 F0 06 F1 | 	add	local38, #1
26384     01 BC 06 F1 | 	add	local12, #1
26388     D4 FF 9F FD | 	jmp	#LR__3447
2638c                 | LR__3448
2638c                 | LR__3449
2638c     5E 01 48 FC | 	wrbyte	#0, local12
26390                 | LR__3450
26390     00 CA 0E F2 | 	cmp	local19, #0 wz
26394     00 B8 0E 52 |  if_ne	cmp	local10, #0 wz
26398     94 00 90 AD |  if_e	jmp	#LR__3459
2639c     5F 93 02 F6 | 	mov	arg01, local13
263a0     49 F3 02 F6 | 	mov	local39, arg01
263a4     D7 06 48 FB | 	callpa	#(@LR__3452-@LR__3451)>>2,fcache_load_ptr_
263a8                 | LR__3451
263a8     79 7B CA FA | 	rdbyte	result1, local39 wz
263ac     01 F2 06 51 |  if_ne	add	local39, #1
263b0     F4 FF 9F 5D |  if_ne	jmp	#LR__3451
263b4                 | LR__3452
263b4     49 F3 82 F1 | 	sub	local39, arg01
263b8     65 F3 5A F2 | 	cmps	local39, local19 wcz
263bc     70 00 90 ED |  if_be	jmp	#LR__3459
263c0     5F F5 02 F6 | 	mov	local40, local13
263c4     00 CE 0E F2 | 	cmp	local21, #0 wz
263c8     00 C0 06 56 |  if_ne	mov	local14, #0
263cc     65 F7 02 56 |  if_ne	mov	local41, local19
263d0     01 CA 86 A1 |  if_e	sub	local19, #1
263d4     60 CB 82 A1 |  if_e	sub	local19, local14
263d8     65 F7 02 A6 |  if_e	mov	local41, local19
263dc     00 F6 0E F2 | 	cmp	local41, #0 wz
263e0     14 00 90 AD |  if_e	jmp	#LR__3455
263e4     D7 08 48 FB | 	callpa	#(@LR__3454-@LR__3453)>>2,fcache_load_ptr_
263e8                 | LR__3453
263e8     7A 55 48 FC | 	wrbyte	#42, local40
263ec     01 F6 8E F1 | 	sub	local41, #1 wz
263f0     01 F4 06 F1 | 	add	local40, #1
263f4     F0 FF 9F 5D |  if_ne	jmp	#LR__3453
263f8                 | LR__3454
263f8                 | LR__3455
263f8     00 C0 0E F2 | 	cmp	local14, #0 wz
263fc     2C 00 90 AD |  if_e	jmp	#LR__3458
26400     7A CD 02 F6 | 	mov	local20, local40
26404     66 5D 48 FC | 	wrbyte	#46, local20
26408     00 F6 06 F6 | 	mov	local41, #0
2640c     01 F4 06 F1 | 	add	local40, #1
26410     D7 0C 48 FB | 	callpa	#(@LR__3457-@LR__3456)>>2,fcache_load_ptr_
26414                 | LR__3456
26414     60 F7 52 F2 | 	cmps	local41, local14 wc
26418     7A CD 02 C6 |  if_b	mov	local20, local40
2641c     01 F4 06 C1 |  if_b	add	local40, #1
26420     66 55 48 CC |  if_b	wrbyte	#42, local20
26424     01 F6 06 C1 |  if_b	add	local41, #1
26428     E8 FF 9F CD |  if_b	jmp	#LR__3456
2642c                 | LR__3457
2642c                 | LR__3458
2642c     7A 01 48 FC | 	wrbyte	#0, local40
26430                 | LR__3459
26430     53 93 02 F6 | 	mov	arg01, local01
26434     54 95 02 F6 | 	mov	arg02, local02
26438     5F 97 02 F6 | 	mov	arg03, local13
2643c     8C F6 BF FD | 	call	#__system___fmtstr
26440                 | LR__3460
26440     E7 F0 03 F6 | 	mov	ptra, fp
26444     F2 00 A0 FD | 	call	#popregs_
26448                 | __system___fmtfloat_ret
26448     2D 00 64 FD | 	ret
2644c                 | 
2644c                 | __system__Left_S
2644c     04 CA 05 F6 | 	mov	COUNT_, #4
26450     E8 00 A0 FD | 	call	#pushregs_
26454     49 A7 02 F6 | 	mov	local01, arg01
26458     4A A9 02 F6 | 	mov	local02, arg02
2645c     01 A8 56 F2 | 	cmps	local02, #1 wc
26460     93 01 00 CF 
26464     86 7A 06 C6 |  if_b	mov	result1, ##@LR__5463
26468     5C 00 90 CD |  if_b	jmp	#LR__3473
2646c     53 93 02 F6 | 	mov	arg01, local01
26470     49 AB 02 F6 | 	mov	local03, arg01
26474     D7 06 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
26478                 | LR__3470
26478     55 7B CA FA | 	rdbyte	result1, local03 wz
2647c     01 AA 06 51 |  if_ne	add	local03, #1
26480     F4 FF 9F 5D |  if_ne	jmp	#LR__3470
26484                 | LR__3471
26484     49 AB 82 F1 | 	sub	local03, arg01
26488     55 7B 02 F6 | 	mov	result1, local03
2648c     54 7B 5A F2 | 	cmps	result1, local02 wcz
26490     53 7B 02 E6 |  if_be	mov	result1, local01
26494     30 00 90 ED |  if_be	jmp	#LR__3473
26498     54 93 02 F6 | 	mov	arg01, local02
2649c     02 92 06 F1 | 	add	arg01, #2
264a0     08 21 B0 FD | 	call	#__system___gc_alloc_managed
264a4     3D AD 0A F6 | 	mov	local04, result1 wz
264a8     18 00 90 AD |  if_e	jmp	#LR__3472
264ac     56 93 02 F6 | 	mov	arg01, local04
264b0     53 95 02 F6 | 	mov	arg02, local01
264b4     54 97 02 F6 | 	mov	arg03, local02
264b8     98 E5 BF FD | 	call	#__system____builtin_memmove
264bc     56 A9 02 F1 | 	add	local02, local04
264c0     54 01 48 FC | 	wrbyte	#0, local02
264c4                 | LR__3472
264c4     56 7B 02 F6 | 	mov	result1, local04
264c8                 | LR__3473
264c8     E7 F0 03 F6 | 	mov	ptra, fp
264cc     F2 00 A0 FD | 	call	#popregs_
264d0                 | __system__Left_S_ret
264d0     2D 00 64 FD | 	ret
264d4                 | 
264d4                 | __system__Right_S
264d4     05 CA 05 F6 | 	mov	COUNT_, #5
264d8     E8 00 A0 FD | 	call	#pushregs_
264dc     49 A7 02 F6 | 	mov	local01, arg01
264e0     4A A9 02 F6 | 	mov	local02, arg02
264e4     01 A8 56 F2 | 	cmps	local02, #1 wc
264e8     93 01 00 CF 
264ec     87 7A 06 C6 |  if_b	mov	result1, ##@LR__5464
264f0     64 00 90 CD |  if_b	jmp	#LR__3483
264f4     53 93 02 F6 | 	mov	arg01, local01
264f8     49 AB 02 F6 | 	mov	local03, arg01
264fc     D7 06 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
26500                 | LR__3480
26500     55 7B CA FA | 	rdbyte	result1, local03 wz
26504     01 AA 06 51 |  if_ne	add	local03, #1
26508     F4 FF 9F 5D |  if_ne	jmp	#LR__3480
2650c                 | LR__3481
2650c     49 AB 82 F1 | 	sub	local03, arg01
26510     55 7B 02 F6 | 	mov	result1, local03
26514     3D AD 02 F6 | 	mov	local04, result1
26518     54 AD 5A F2 | 	cmps	local04, local02 wcz
2651c     53 7B 02 E6 |  if_be	mov	result1, local01
26520     34 00 90 ED |  if_be	jmp	#LR__3483
26524     54 93 02 F6 | 	mov	arg01, local02
26528     02 92 06 F1 | 	add	arg01, #2
2652c     7C 20 B0 FD | 	call	#__system___gc_alloc_managed
26530     3D AF 0A F6 | 	mov	local05, result1 wz
26534     1C 00 90 AD |  if_e	jmp	#LR__3482
26538     54 AD 82 F1 | 	sub	local04, local02
2653c     53 AD 02 F1 | 	add	local04, local01
26540     01 A8 06 F1 | 	add	local02, #1
26544     57 93 02 F6 | 	mov	arg01, local05
26548     56 95 02 F6 | 	mov	arg02, local04
2654c     54 97 02 F6 | 	mov	arg03, local02
26550     00 E5 BF FD | 	call	#__system____builtin_memmove
26554                 | LR__3482
26554     57 7B 02 F6 | 	mov	result1, local05
26558                 | LR__3483
26558     E7 F0 03 F6 | 	mov	ptra, fp
2655c     F2 00 A0 FD | 	call	#popregs_
26560                 | __system__Right_S_ret
26560     2D 00 64 FD | 	ret
26564                 | 
26564                 | __system__Mid_S
26564     05 CA 05 F6 | 	mov	COUNT_, #5
26568     E8 00 A0 FD | 	call	#pushregs_
2656c     49 A7 02 F6 | 	mov	local01, arg01
26570     4A A9 02 F6 | 	mov	local02, arg02
26574     01 96 56 F2 | 	cmps	arg03, #1 wc
26578     93 01 00 CF 
2657c     88 7A 06 C6 |  if_b	mov	result1, ##@LR__5465
26580     80 00 90 CD |  if_b	jmp	#LR__3493
26584     01 A8 86 F1 | 	sub	local02, #1
26588     00 A8 56 F3 | 	fges	local02, #0 wc
2658c     53 93 02 F6 | 	mov	arg01, local01
26590     49 AB 02 F6 | 	mov	local03, arg01
26594     D7 06 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
26598                 | LR__3490
26598     55 7B CA FA | 	rdbyte	result1, local03 wz
2659c     01 AA 06 51 |  if_ne	add	local03, #1
265a0     F4 FF 9F 5D |  if_ne	jmp	#LR__3490
265a4                 | LR__3491
265a4     49 AB 82 F1 | 	sub	local03, arg01
265a8     55 7B 02 F6 | 	mov	result1, local03
265ac     3D 95 02 F6 | 	mov	arg02, result1
265b0     54 95 52 F2 | 	cmps	arg02, local02 wc
265b4     93 01 00 CF 
265b8     89 7A 06 C6 |  if_b	mov	result1, ##@LR__5466
265bc     44 00 90 CD |  if_b	jmp	#LR__3493
265c0     4A AD 02 F6 | 	mov	local04, arg02
265c4     54 AD 82 F1 | 	sub	local04, local02
265c8     4B AD 5A F2 | 	cmps	local04, arg03 wcz
265cc     4B AD 02 16 |  if_a	mov	local04, arg03
265d0     56 93 02 F6 | 	mov	arg01, local04
265d4     02 92 06 F1 | 	add	arg01, #2
265d8     D0 1F B0 FD | 	call	#__system___gc_alloc_managed
265dc     3D AF 0A F6 | 	mov	local05, result1 wz
265e0     1C 00 90 AD |  if_e	jmp	#LR__3492
265e4     53 A9 02 F1 | 	add	local02, local01
265e8     57 93 02 F6 | 	mov	arg01, local05
265ec     54 95 02 F6 | 	mov	arg02, local02
265f0     56 97 02 F6 | 	mov	arg03, local04
265f4     5C E4 BF FD | 	call	#__system____builtin_memmove
265f8     57 AD 02 F1 | 	add	local04, local05
265fc     56 01 48 FC | 	wrbyte	#0, local04
26600                 | LR__3492
26600     57 7B 02 F6 | 	mov	result1, local05
26604                 | LR__3493
26604     E7 F0 03 F6 | 	mov	ptra, fp
26608     F2 00 A0 FD | 	call	#popregs_
2660c                 | __system__Mid_S_ret
2660c     2D 00 64 FD | 	ret
26610                 | 
26610                 | __system__Chr_S
26610     01 CA 05 F6 | 	mov	COUNT_, #1
26614     E8 00 A0 FD | 	call	#pushregs_
26618     49 A7 02 F6 | 	mov	local01, arg01
2661c     03 92 06 F6 | 	mov	arg01, #3
26620     88 1F B0 FD | 	call	#__system___gc_alloc_managed
26624     00 7A 4E F2 | 	cmps	result1, #0 wz
26628     3D A7 42 5C |  if_ne	wrbyte	local01, result1
2662c     01 7A 06 51 |  if_ne	add	result1, #1
26630     3D 01 48 5C |  if_ne	wrbyte	#0, result1
26634     01 7A 86 51 |  if_ne	sub	result1, #1
26638     E7 F0 03 F6 | 	mov	ptra, fp
2663c     F2 00 A0 FD | 	call	#popregs_
26640                 | __system__Chr_S_ret
26640     2D 00 64 FD | 	ret
26644                 | 
26644                 | __system__str_S
26644     02 CA 05 F6 | 	mov	COUNT_, #2
26648     E8 00 A0 FD | 	call	#pushregs_
2664c     49 A7 02 F6 | 	mov	local01, arg01
26650     10 92 06 F6 | 	mov	arg01, #16
26654     54 1F B0 FD | 	call	#__system___gc_alloc_managed
26658     3D A9 0A F6 | 	mov	local02, result1 wz
2665c     30 00 90 AD |  if_e	jmp	#LR__3500
26660     F8 93 02 F6 | 	mov	arg01, ptra
26664     08 F0 07 F1 | 	add	ptra, #8
26668     49 A9 62 FC | 	wrlong	local02, arg01
2666c     04 92 06 F1 | 	add	arg01, #4
26670     49 01 68 FC | 	wrlong	#0, arg01
26674     04 92 86 F1 | 	sub	arg01, #4
26678     00 98 05 FF 
2667c     00 92 46 F5 | 	or	arg01, ##187695104
26680     00 94 06 F6 | 	mov	arg02, #0
26684     53 97 02 F6 | 	mov	arg03, local01
26688     67 98 06 F6 | 	mov	arg04, #103
2668c     5C F6 BF FD | 	call	#__system___fmtfloat
26690                 | LR__3500
26690     54 7B 02 F6 | 	mov	result1, local02
26694     E7 F0 03 F6 | 	mov	ptra, fp
26698     F2 00 A0 FD | 	call	#popregs_
2669c                 | __system__str_S_ret
2669c     2D 00 64 FD | 	ret
266a0                 | 
266a0                 | __system__Number_S
266a0     08 CA 05 F6 | 	mov	COUNT_, #8
266a4     E8 00 A0 FD | 	call	#pushregs_
266a8     49 A7 02 F6 | 	mov	local01, arg01
266ac     4A A9 0A F6 | 	mov	local02, arg02 wz
266b0     4B AB 02 F6 | 	mov	local03, arg03
266b4     3C 00 90 5D |  if_ne	jmp	#LR__3512
266b8     01 A8 06 F6 | 	mov	local02, #1
266bc     55 AD 02 F6 | 	mov	local04, local03
266c0     01 AE 06 F6 | 	mov	local05, #1
266c4     D7 16 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
266c8                 | LR__3510
266c8     00 B0 06 F6 | 	mov	local06, #0
266cc     53 AD 1A F2 | 	cmp	local04, local01 wcz
266d0     01 B0 66 E6 |  if_be	neg	local06, #1
266d4     56 AF 12 F2 | 	cmp	local05, local04 wc
266d8     59 B3 A2 F1 | 	subx	local07, local07
266dc     59 B1 CA F7 | 	test	local06, local07 wz
266e0     55 AD 02 5D |  if_ne	qmul	local04, local03
266e4     56 AF 02 56 |  if_ne	mov	local05, local04
266e8     01 A8 06 51 |  if_ne	add	local02, #1
266ec     18 AC 62 5D |  if_ne	getqx	local04
266f0     D4 FF 9F 5D |  if_ne	jmp	#LR__3510
266f4                 | LR__3511
266f4                 | LR__3512
266f4     20 A8 36 F3 | 	fle	local02, #32 wc
266f8     54 93 02 F6 | 	mov	arg01, local02
266fc     02 92 06 F1 | 	add	arg01, #2
26700     A8 1E B0 FD | 	call	#__system___gc_alloc_managed
26704     3D B1 02 F6 | 	mov	local06, result1
26708     54 B3 02 F6 | 	mov	local07, local02
2670c     58 B3 02 F1 | 	add	local07, local06
26710     59 01 48 FC | 	wrbyte	#0, local07
26714     D7 1A 48 FB | 	callpa	#(@LR__3514-@LR__3513)>>2,fcache_load_ptr_
26718                 | LR__3513
26718     01 A8 16 F2 | 	cmp	local02, #1 wc
2671c     2C 00 90 CD |  if_b	jmp	#LR__3515
26720     55 A7 12 FD | 	qdiv	local01, local03
26724     01 A8 86 F1 | 	sub	local02, #1
26728     54 B3 02 F6 | 	mov	local07, local02
2672c     58 B3 02 F1 | 	add	local07, local06
26730     19 B4 62 FD | 	getqy	local08
26734     0A B4 16 F2 | 	cmp	local08, #10 wc
26738     30 B4 06 C1 |  if_b	add	local08, #48
2673c     37 B4 06 31 |  if_ae	add	local08, #55
26740     59 B5 42 FC | 	wrbyte	local08, local07
26744     18 A6 62 FD | 	getqx	local01
26748     CC FF 9F FD | 	jmp	#LR__3513
2674c                 | LR__3514
2674c                 | LR__3515
2674c     58 7B 02 F6 | 	mov	result1, local06
26750     E7 F0 03 F6 | 	mov	ptra, fp
26754     F2 00 A0 FD | 	call	#popregs_
26758                 | __system__Number_S_ret
26758     2D 00 64 FD | 	ret
2675c                 | 
2675c                 | __system__LCase_S
2675c     07 CA 05 F6 | 	mov	COUNT_, #7
26760     E8 00 A0 FD | 	call	#pushregs_
26764     49 A7 02 F6 | 	mov	local01, arg01
26768     49 A9 02 F6 | 	mov	local02, arg01
2676c     D7 06 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
26770                 | LR__3520
26770     54 7B CA FA | 	rdbyte	result1, local02 wz
26774     01 A8 06 51 |  if_ne	add	local02, #1
26778     F4 FF 9F 5D |  if_ne	jmp	#LR__3520
2677c                 | LR__3521
2677c     49 A9 82 F1 | 	sub	local02, arg01
26780     54 7B 02 F6 | 	mov	result1, local02
26784     3D A9 0A F6 | 	mov	local02, result1 wz
26788     93 01 00 AF 
2678c     8A 7A 06 A6 |  if_e	mov	result1, ##@LR__5467
26790     7C 00 90 AD |  if_e	jmp	#LR__3527
26794     54 93 02 F6 | 	mov	arg01, local02
26798     02 92 06 F1 | 	add	arg01, #2
2679c     0C 1E B0 FD | 	call	#__system___gc_alloc_managed
267a0     3D AB 0A F6 | 	mov	local03, result1 wz
267a4     64 00 90 AD |  if_e	jmp	#LR__3526
267a8     01 AC 66 F6 | 	neg	local04, #1
267ac     D7 26 48 FB | 	callpa	#(@LR__3525-@LR__3522)>>2,fcache_load_ptr_
267b0                 | LR__3522
267b0     01 AC 06 F1 | 	add	local04, #1
267b4     56 AF 02 F6 | 	mov	local05, local04
267b8     53 AF 02 F1 | 	add	local05, local01
267bc     57 B1 C2 FA | 	rdbyte	local06, local05
267c0     41 B0 56 F2 | 	cmps	local06, #65 wc
267c4     18 00 90 CD |  if_b	jmp	#LR__3523
267c8     5B B0 56 F2 | 	cmps	local06, #91 wc
267cc     56 B3 02 C6 |  if_b	mov	local07, local04
267d0     55 B3 02 C1 |  if_b	add	local07, local03
267d4     20 B0 06 C1 |  if_b	add	local06, #32
267d8     59 B1 42 CC |  if_b	wrbyte	local06, local07
267dc     0C 00 90 CD |  if_b	jmp	#LR__3524
267e0                 | LR__3523
267e0     56 B3 02 F6 | 	mov	local07, local04
267e4     55 B3 02 F1 | 	add	local07, local03
267e8     59 B1 42 FC | 	wrbyte	local06, local07
267ec                 | LR__3524
267ec     54 B1 02 F6 | 	mov	local06, local02
267f0     01 B0 86 F1 | 	sub	local06, #1
267f4     58 AD 0A F2 | 	cmp	local04, local06 wz
267f8     B4 FF 9F 5D |  if_ne	jmp	#LR__3522
267fc                 | LR__3525
267fc     55 A9 02 F1 | 	add	local02, local03
26800     54 01 48 FC | 	wrbyte	#0, local02
26804     55 7B 02 F6 | 	mov	result1, local03
26808     04 00 90 FD | 	jmp	#LR__3527
2680c                 | LR__3526
2680c     55 7B 02 F6 | 	mov	result1, local03
26810                 | LR__3527
26810     E7 F0 03 F6 | 	mov	ptra, fp
26814     F2 00 A0 FD | 	call	#popregs_
26818                 | __system__LCase_S_ret
26818     2D 00 64 FD | 	ret
2681c                 | 
2681c                 | __system__LTrim_S
2681c     05 CA 05 F6 | 	mov	COUNT_, #5
26820     E8 00 A0 FD | 	call	#pushregs_
26824     49 A7 02 F6 | 	mov	local01, arg01
26828     49 A9 02 F6 | 	mov	local02, arg01
2682c     D7 06 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
26830                 | LR__3530
26830     54 7B CA FA | 	rdbyte	result1, local02 wz
26834     01 A8 06 51 |  if_ne	add	local02, #1
26838     F4 FF 9F 5D |  if_ne	jmp	#LR__3530
2683c                 | LR__3531
2683c     49 A9 82 F1 | 	sub	local02, arg01
26840     54 7B 02 F6 | 	mov	result1, local02
26844     3D A9 0A F6 | 	mov	local02, result1 wz
26848     93 01 00 AF 
2684c     8B 7A 06 A6 |  if_e	mov	result1, ##@LR__5468
26850     7C 00 90 AD |  if_e	jmp	#LR__3536
26854     00 AA 06 F6 | 	mov	local03, #0
26858     54 AD 02 F6 | 	mov	local04, local02
2685c                 | LR__3532
2685c     56 AB 52 F2 | 	cmps	local03, local04 wc
26860     68 00 90 3D |  if_ae	jmp	#LR__3535
26864     55 97 02 F6 | 	mov	arg03, local03
26868     53 97 02 F1 | 	add	arg03, local01
2686c     4B 97 C2 FA | 	rdbyte	arg03, arg03
26870     20 96 0E F2 | 	cmp	arg03, #32 wz
26874     4C 00 90 AD |  if_e	jmp	#LR__3534
26878     54 93 02 F6 | 	mov	arg01, local02
2687c     55 93 82 F1 | 	sub	arg01, local03
26880     02 92 06 F1 | 	add	arg01, #2
26884     24 1D B0 FD | 	call	#__system___gc_alloc_managed
26888     3D AF 0A F6 | 	mov	local05, result1 wz
2688c     2C 00 90 AD |  if_e	jmp	#LR__3533
26890     55 95 02 F6 | 	mov	arg02, local03
26894     53 95 02 F1 | 	add	arg02, local01
26898     54 97 02 F6 | 	mov	arg03, local02
2689c     55 97 82 F1 | 	sub	arg03, local03
268a0     57 93 02 F6 | 	mov	arg01, local05
268a4     AC E1 BF FD | 	call	#__system____builtin_memmove
268a8     55 A9 82 F1 | 	sub	local02, local03
268ac     57 A9 02 F1 | 	add	local02, local05
268b0     54 01 48 FC | 	wrbyte	#0, local02
268b4     57 7B 02 F6 | 	mov	result1, local05
268b8     14 00 90 FD | 	jmp	#LR__3536
268bc                 | LR__3533
268bc     57 7B 02 F6 | 	mov	result1, local05
268c0     0C 00 90 FD | 	jmp	#LR__3536
268c4                 | LR__3534
268c4     01 AA 06 F1 | 	add	local03, #1
268c8     90 FF 9F FD | 	jmp	#LR__3532
268cc                 | LR__3535
268cc     53 7B 02 F6 | 	mov	result1, local01
268d0                 | LR__3536
268d0     E7 F0 03 F6 | 	mov	ptra, fp
268d4     F2 00 A0 FD | 	call	#popregs_
268d8                 | __system__LTrim_S_ret
268d8     2D 00 64 FD | 	ret
268dc                 | 
268dc                 | __system__RTrim_S
268dc     04 CA 05 F6 | 	mov	COUNT_, #4
268e0     E8 00 A0 FD | 	call	#pushregs_
268e4     49 A7 02 F6 | 	mov	local01, arg01
268e8     49 A9 02 F6 | 	mov	local02, arg01
268ec     D7 06 48 FB | 	callpa	#(@LR__3541-@LR__3540)>>2,fcache_load_ptr_
268f0                 | LR__3540
268f0     54 7B CA FA | 	rdbyte	result1, local02 wz
268f4     01 A8 06 51 |  if_ne	add	local02, #1
268f8     F4 FF 9F 5D |  if_ne	jmp	#LR__3540
268fc                 | LR__3541
268fc     49 A9 82 F1 | 	sub	local02, arg01
26900     54 7B 02 F6 | 	mov	result1, local02
26904     3D A9 0A F6 | 	mov	local02, result1 wz
26908     93 01 00 AF 
2690c     8C 7A 06 A6 |  if_e	mov	result1, ##@LR__5469
26910     74 00 90 AD |  if_e	jmp	#LR__3545
26914     54 AB 02 F6 | 	mov	local03, local02
26918     01 AA 86 F1 | 	sub	local03, #1
2691c                 | LR__3542
2691c     55 95 02 F6 | 	mov	arg02, local03
26920     53 95 02 F1 | 	add	arg02, local01
26924     4A A9 C2 FA | 	rdbyte	local02, arg02
26928     20 A8 0E F2 | 	cmp	local02, #32 wz
2692c     44 00 90 AD |  if_e	jmp	#LR__3544
26930     55 93 02 F6 | 	mov	arg01, local03
26934     02 92 06 F1 | 	add	arg01, #2
26938     70 1C B0 FD | 	call	#__system___gc_alloc_managed
2693c     3D AD 0A F6 | 	mov	local04, result1 wz
26940     28 00 90 AD |  if_e	jmp	#LR__3543
26944     55 97 02 F6 | 	mov	arg03, local03
26948     01 96 06 F1 | 	add	arg03, #1
2694c     56 93 02 F6 | 	mov	arg01, local04
26950     53 95 02 F6 | 	mov	arg02, local01
26954     FC E0 BF FD | 	call	#__system____builtin_memmove
26958     01 AA 06 F1 | 	add	local03, #1
2695c     56 AB 02 F1 | 	add	local03, local04
26960     55 01 48 FC | 	wrbyte	#0, local03
26964     56 7B 02 F6 | 	mov	result1, local04
26968     1C 00 90 FD | 	jmp	#LR__3545
2696c                 | LR__3543
2696c     56 7B 02 F6 | 	mov	result1, local04
26970     14 00 90 FD | 	jmp	#LR__3545
26974                 | LR__3544
26974     01 AA 86 F1 | 	sub	local03, #1
26978     00 AA 56 F2 | 	cmps	local03, #0 wc
2697c     9C FF 9F 3D |  if_ae	jmp	#LR__3542
26980     93 01 00 FF 
26984     8D 7A 06 F6 | 	mov	result1, ##@LR__5470
26988                 | LR__3545
26988     E7 F0 03 F6 | 	mov	ptra, fp
2698c     F2 00 A0 FD | 	call	#popregs_
26990                 | __system__RTrim_S_ret
26990     2D 00 64 FD | 	ret
26994                 | 
26994                 | __system__Instr
26994     07 CA 05 F6 | 	mov	COUNT_, #7
26998     E8 00 A0 FD | 	call	#pushregs_
2699c     49 A7 02 F6 | 	mov	local01, arg01
269a0     4A A9 02 F6 | 	mov	local02, arg02
269a4     4B AB 02 F6 | 	mov	local03, arg03
269a8     55 93 02 F6 | 	mov	arg01, local03
269ac     49 AD 02 F6 | 	mov	local04, arg01
269b0     D7 06 48 FB | 	callpa	#(@LR__3551-@LR__3550)>>2,fcache_load_ptr_
269b4                 | LR__3550
269b4     56 7B CA FA | 	rdbyte	result1, local04 wz
269b8     01 AC 06 51 |  if_ne	add	local04, #1
269bc     F4 FF 9F 5D |  if_ne	jmp	#LR__3550
269c0                 | LR__3551
269c0     49 AD 82 F1 | 	sub	local04, arg01
269c4     56 AF 02 F6 | 	mov	local05, local04
269c8     54 93 02 F6 | 	mov	arg01, local02
269cc     49 AD 02 F6 | 	mov	local04, arg01
269d0     D7 06 48 FB | 	callpa	#(@LR__3553-@LR__3552)>>2,fcache_load_ptr_
269d4                 | LR__3552
269d4     56 7B CA FA | 	rdbyte	result1, local04 wz
269d8     01 AC 06 51 |  if_ne	add	local04, #1
269dc     F4 FF 9F 5D |  if_ne	jmp	#LR__3552
269e0                 | LR__3553
269e0     49 AD 82 F1 | 	sub	local04, arg01
269e4     56 7B 02 F6 | 	mov	result1, local04
269e8     3D 99 0A F6 | 	mov	arg04, result1 wz
269ec     00 7A 06 A6 |  if_e	mov	result1, #0
269f0     98 00 90 AD |  if_e	jmp	#LR__3557
269f4     00 AE 0E F2 | 	cmp	local05, #0 wz
269f8     00 7A 06 A6 |  if_e	mov	result1, #0
269fc     8C 00 90 AD |  if_e	jmp	#LR__3557
26a00     4C A7 5A F2 | 	cmps	local01, arg04 wcz
26a04     00 7A 06 16 |  if_a	mov	result1, #0
26a08     80 00 90 1D |  if_a	jmp	#LR__3557
26a0c     01 A6 56 F2 | 	cmps	local01, #1 wc
26a10     01 A6 06 C6 |  if_b	mov	local01, #1
26a14     55 B1 C2 FA | 	rdbyte	local06, local03
26a18     01 AE 0E F2 | 	cmp	local05, #1 wz
26a1c     18 00 90 5D |  if_ne	jmp	#LR__3554
26a20     54 93 02 F6 | 	mov	arg01, local02
26a24     58 95 02 F6 | 	mov	arg02, local06
26a28     53 97 02 F6 | 	mov	arg03, local01
26a2c     00 98 06 F6 | 	mov	arg04, #0
26a30     C4 37 B0 FD | 	call	#__system____ScanForChar
26a34     54 00 90 FD | 	jmp	#LR__3557
26a38                 | LR__3554
26a38     53 B3 02 F6 | 	mov	local07, local01
26a3c                 | LR__3555
26a3c     54 93 02 F6 | 	mov	arg01, local02
26a40     58 95 02 F6 | 	mov	arg02, local06
26a44     59 97 02 F6 | 	mov	arg03, local07
26a48     00 98 06 F6 | 	mov	arg04, #0
26a4c     A8 37 B0 FD | 	call	#__system____ScanForChar
26a50     3D B3 0A F6 | 	mov	local07, result1 wz
26a54     30 00 90 AD |  if_e	jmp	#LR__3556
26a58     57 97 02 F6 | 	mov	arg03, local05
26a5c     54 93 02 F6 | 	mov	arg01, local02
26a60     59 95 02 F6 | 	mov	arg02, local07
26a64     FC FA BF FD | 	call	#__system__Mid_S
26a68     3D 93 02 F6 | 	mov	arg01, result1
26a6c     55 95 02 F6 | 	mov	arg02, local03
26a70     58 E1 BF FD | 	call	#__system___string_cmp
26a74     00 7A 0E F2 | 	cmp	result1, #0 wz
26a78     59 7B 02 A6 |  if_e	mov	result1, local07
26a7c     0C 00 90 AD |  if_e	jmp	#LR__3557
26a80     57 B3 02 F1 | 	add	local07, local05
26a84     B4 FF 9F FD | 	jmp	#LR__3555
26a88                 | LR__3556
26a88     00 7A 06 F6 | 	mov	result1, #0
26a8c                 | LR__3557
26a8c     E7 F0 03 F6 | 	mov	ptra, fp
26a90     F2 00 A0 FD | 	call	#popregs_
26a94                 | __system__Instr_ret
26a94     2D 00 64 FD | 	ret
26a98                 | 
26a98                 | __system__InstrRev
26a98     07 CA 05 F6 | 	mov	COUNT_, #7
26a9c     E8 00 A0 FD | 	call	#pushregs_
26aa0     49 A7 02 F6 | 	mov	local01, arg01
26aa4     4A A9 02 F6 | 	mov	local02, arg02
26aa8     4B AB 02 F6 | 	mov	local03, arg03
26aac     55 93 02 F6 | 	mov	arg01, local03
26ab0     49 AD 02 F6 | 	mov	local04, arg01
26ab4     D7 06 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
26ab8                 | LR__3560
26ab8     56 7B CA FA | 	rdbyte	result1, local04 wz
26abc     01 AC 06 51 |  if_ne	add	local04, #1
26ac0     F4 FF 9F 5D |  if_ne	jmp	#LR__3560
26ac4                 | LR__3561
26ac4     49 AD 82 F1 | 	sub	local04, arg01
26ac8     56 AF 02 F6 | 	mov	local05, local04
26acc     54 93 02 F6 | 	mov	arg01, local02
26ad0     49 AD 02 F6 | 	mov	local04, arg01
26ad4     D7 06 48 FB | 	callpa	#(@LR__3563-@LR__3562)>>2,fcache_load_ptr_
26ad8                 | LR__3562
26ad8     56 7B CA FA | 	rdbyte	result1, local04 wz
26adc     01 AC 06 51 |  if_ne	add	local04, #1
26ae0     F4 FF 9F 5D |  if_ne	jmp	#LR__3562
26ae4                 | LR__3563
26ae4     49 AD 82 F1 | 	sub	local04, arg01
26ae8     56 7B 02 F6 | 	mov	result1, local04
26aec     3D 99 0A F6 | 	mov	arg04, result1 wz
26af0     00 7A 06 A6 |  if_e	mov	result1, #0
26af4     98 00 90 AD |  if_e	jmp	#LR__3567
26af8     00 AE 0E F2 | 	cmp	local05, #0 wz
26afc     00 7A 06 A6 |  if_e	mov	result1, #0
26b00     8C 00 90 AD |  if_e	jmp	#LR__3567
26b04     4C A7 5A F2 | 	cmps	local01, arg04 wcz
26b08     4C A7 02 16 |  if_a	mov	local01, arg04
26b0c     01 A6 56 F2 | 	cmps	local01, #1 wc
26b10     01 A6 06 C6 |  if_b	mov	local01, #1
26b14     55 B1 C2 FA | 	rdbyte	local06, local03
26b18     01 AE 0E F2 | 	cmp	local05, #1 wz
26b1c     18 00 90 5D |  if_ne	jmp	#LR__3564
26b20     54 93 02 F6 | 	mov	arg01, local02
26b24     58 95 02 F6 | 	mov	arg02, local06
26b28     53 97 02 F6 | 	mov	arg03, local01
26b2c     01 98 06 F6 | 	mov	arg04, #1
26b30     C4 36 B0 FD | 	call	#__system____ScanForChar
26b34     58 00 90 FD | 	jmp	#LR__3567
26b38                 | LR__3564
26b38     57 B3 02 F6 | 	mov	local07, local05
26b3c     01 B2 86 F1 | 	sub	local07, #1
26b40                 | LR__3565
26b40     54 93 02 F6 | 	mov	arg01, local02
26b44     58 95 02 F6 | 	mov	arg02, local06
26b48     59 97 02 F6 | 	mov	arg03, local07
26b4c     01 98 06 F6 | 	mov	arg04, #1
26b50     A4 36 B0 FD | 	call	#__system____ScanForChar
26b54     3D B3 0A F6 | 	mov	local07, result1 wz
26b58     30 00 90 AD |  if_e	jmp	#LR__3566
26b5c     57 97 02 F6 | 	mov	arg03, local05
26b60     54 93 02 F6 | 	mov	arg01, local02
26b64     59 95 02 F6 | 	mov	arg02, local07
26b68     F8 F9 BF FD | 	call	#__system__Mid_S
26b6c     3D 93 02 F6 | 	mov	arg01, result1
26b70     55 95 02 F6 | 	mov	arg02, local03
26b74     54 E0 BF FD | 	call	#__system___string_cmp
26b78     00 7A 0E F2 | 	cmp	result1, #0 wz
26b7c     59 7B 02 A6 |  if_e	mov	result1, local07
26b80     0C 00 90 AD |  if_e	jmp	#LR__3567
26b84     57 B3 82 F1 | 	sub	local07, local05
26b88     B4 FF 9F FD | 	jmp	#LR__3565
26b8c                 | LR__3566
26b8c     00 7A 06 F6 | 	mov	result1, #0
26b90                 | LR__3567
26b90     E7 F0 03 F6 | 	mov	ptra, fp
26b94     F2 00 A0 FD | 	call	#popregs_
26b98                 | __system__InstrRev_ret
26b98     2D 00 64 FD | 	ret
26b9c                 | 
26b9c                 | __system___remove
26b9c     06 CA 05 F6 | 	mov	COUNT_, #6
26ba0     E8 00 A0 FD | 	call	#pushregs_
26ba4     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
26ba8     84 A7 06 F1 | 	add	local01, #388
26bac     49 95 02 F6 | 	mov	arg02, arg01
26bb0     53 93 02 F6 | 	mov	arg01, local01
26bb4     00 96 06 F6 | 	mov	arg03, #0
26bb8     34 E7 BF FD | 	call	#__system____getvfsforfile
26bbc     3D A9 0A F6 | 	mov	local02, result1 wz
26bc0     10 00 90 AD |  if_e	jmp	#LR__3570
26bc4     20 A8 06 F1 | 	add	local02, #32
26bc8     54 93 0A FB | 	rdlong	arg01, local02 wz
26bcc     20 A8 86 F1 | 	sub	local02, #32
26bd0     14 00 90 5D |  if_ne	jmp	#LR__3571
26bd4                 | LR__3570
26bd4     20 68 06 F1 | 	add	ptr___system__dat__, #32
26bd8     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
26bdc     20 68 86 F1 | 	sub	ptr___system__dat__, #32
26be0     01 7A 66 F6 | 	neg	result1, #1
26be4     A8 00 90 FD | 	jmp	#LR__3574
26be8                 | LR__3571
26be8     40 A8 06 F1 | 	add	local02, #64
26bec     54 AB 02 FB | 	rdlong	local03, local02
26bf0     55 AD 02 F6 | 	mov	local04, local03
26bf4     40 A8 86 F1 | 	sub	local02, #64
26bf8     13 AC 46 F7 | 	zerox	local04, #19
26bfc     14 AA 46 F0 | 	shr	local03, #20
26c00     02 AA 66 F0 | 	shl	local03, #2
26c04     2D AB 02 F1 | 	add	local03, __methods__
26c08     55 AB 02 FB | 	rdlong	local03, local03
26c0c     53 93 02 F6 | 	mov	arg01, local01
26c10     32 AF 02 F6 | 	mov	local05, objptr
26c14     56 65 02 F6 | 	mov	objptr, local04
26c18     2D AA 62 FD | 	call	local03
26c1c     57 65 02 F6 | 	mov	objptr, local05
26c20     3D B1 02 F6 | 	mov	local06, result1
26c24     FF FF 7F FF 
26c28     F2 B1 0E F2 | 	cmp	local06, ##-14 wz
26c2c     38 00 90 5D |  if_ne	jmp	#LR__3572
26c30     3C A8 06 F1 | 	add	local02, #60
26c34     54 B1 02 FB | 	rdlong	local06, local02
26c38     58 AB 02 F6 | 	mov	local03, local06
26c3c     13 B0 46 F7 | 	zerox	local06, #19
26c40     14 AA 46 F0 | 	shr	local03, #20
26c44     02 AA 66 F0 | 	shl	local03, #2
26c48     2D AB 02 F1 | 	add	local03, __methods__
26c4c     55 AB 02 FB | 	rdlong	local03, local03
26c50     53 93 02 F6 | 	mov	arg01, local01
26c54     32 AF 02 F6 | 	mov	local05, objptr
26c58     58 65 02 F6 | 	mov	objptr, local06
26c5c     2D AA 62 FD | 	call	local03
26c60     57 65 02 F6 | 	mov	objptr, local05
26c64     3D B1 02 F6 | 	mov	local06, result1
26c68                 | LR__3572
26c68     00 B0 0E F2 | 	cmp	local06, #0 wz
26c6c     1C 00 90 AD |  if_e	jmp	#LR__3573
26c70     58 93 6A F6 | 	neg	arg01, local06 wz
26c74     20 68 06 F1 | 	add	ptr___system__dat__, #32
26c78     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
26c7c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
26c80     01 7A 66 56 |  if_ne	neg	result1, #1
26c84     00 7A 06 A6 |  if_e	mov	result1, #0
26c88     04 00 90 FD | 	jmp	#LR__3574
26c8c                 | LR__3573
26c8c     00 7A 06 F6 | 	mov	result1, #0
26c90                 | LR__3574
26c90     E7 F0 03 F6 | 	mov	ptra, fp
26c94     F2 00 A0 FD | 	call	#popregs_
26c98                 | __system___remove_ret
26c98     2D 00 64 FD | 	ret
26c9c                 | 
26c9c                 | __system___mkdir
26c9c     05 CA 05 F6 | 	mov	COUNT_, #5
26ca0     E8 00 A0 FD | 	call	#pushregs_
26ca4     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
26ca8     84 A7 06 F1 | 	add	local01, #388
26cac     49 95 02 F6 | 	mov	arg02, arg01
26cb0     53 93 02 F6 | 	mov	arg01, local01
26cb4     00 96 06 F6 | 	mov	arg03, #0
26cb8     34 E6 BF FD | 	call	#__system____getvfsforfile
26cbc     3D A9 0A F6 | 	mov	local02, result1 wz
26cc0     10 00 90 AD |  if_e	jmp	#LR__3580
26cc4     20 A8 06 F1 | 	add	local02, #32
26cc8     54 95 0A FB | 	rdlong	arg02, local02 wz
26ccc     20 A8 86 F1 | 	sub	local02, #32
26cd0     14 00 90 5D |  if_ne	jmp	#LR__3581
26cd4                 | LR__3580
26cd4     20 68 06 F1 | 	add	ptr___system__dat__, #32
26cd8     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
26cdc     20 68 86 F1 | 	sub	ptr___system__dat__, #32
26ce0     01 7A 66 F6 | 	neg	result1, #1
26ce4     60 00 90 FD | 	jmp	#LR__3583
26ce8                 | LR__3581
26ce8     38 A8 06 F1 | 	add	local02, #56
26cec     54 AB 02 FB | 	rdlong	local03, local02
26cf0     55 AD 02 F6 | 	mov	local04, local03
26cf4     13 AA 46 F7 | 	zerox	local03, #19
26cf8     14 AC 46 F0 | 	shr	local04, #20
26cfc     02 AC 66 F0 | 	shl	local04, #2
26d00     2D AD 02 F1 | 	add	local04, __methods__
26d04     56 AD 02 FB | 	rdlong	local04, local04
26d08     53 93 02 F6 | 	mov	arg01, local01
26d0c     FF 95 06 F6 | 	mov	arg02, #511
26d10     32 AF 02 F6 | 	mov	local05, objptr
26d14     55 65 02 F6 | 	mov	objptr, local03
26d18     2D AC 62 FD | 	call	local04
26d1c     57 65 02 F6 | 	mov	objptr, local05
26d20     3D 93 0A F6 | 	mov	arg01, result1 wz
26d24     1C 00 90 AD |  if_e	jmp	#LR__3582
26d28     49 93 6A F6 | 	neg	arg01, arg01 wz
26d2c     20 68 06 F1 | 	add	ptr___system__dat__, #32
26d30     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
26d34     20 68 86 F1 | 	sub	ptr___system__dat__, #32
26d38     01 7A 66 56 |  if_ne	neg	result1, #1
26d3c     00 7A 06 A6 |  if_e	mov	result1, #0
26d40     04 00 90 FD | 	jmp	#LR__3583
26d44                 | LR__3582
26d44     00 7A 06 F6 | 	mov	result1, #0
26d48                 | LR__3583
26d48     E7 F0 03 F6 | 	mov	ptra, fp
26d4c     F2 00 A0 FD | 	call	#popregs_
26d50                 | __system___mkdir_ret
26d50     2D 00 64 FD | 	ret
26d54                 | 
26d54                 | __system___strerror
26d54     00 92 56 F2 | 	cmps	arg01, #0 wc
26d58     08 00 90 CD |  if_b	jmp	#LR__3590
26d5c     1A 92 56 F2 | 	cmps	arg01, #26 wc
26d60     04 00 90 CD |  if_b	jmp	#LR__3591
26d64                 | LR__3590
26d64     19 92 06 F6 | 	mov	arg01, #25
26d68                 | LR__3591
26d68     02 92 66 F0 | 	shl	arg01, #2
26d6c     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
26d70     01 00 00 FF 
26d74     E0 7A 06 F1 | 	add	result1, ##736
26d78     3D 93 02 F1 | 	add	arg01, result1
26d7c     49 7B 02 FB | 	rdlong	result1, arg01
26d80                 | __system___strerror_ret
26d80     2D 00 64 FD | 	ret
26d84                 | 
26d84                 | __system___int64_shl
26d84     20 96 CE F7 | 	test	arg03, #32 wz
26d88     49 95 02 56 |  if_ne	mov	arg02, arg01
26d8c     00 92 06 56 |  if_ne	mov	arg01, #0
26d90     1F 96 CE F7 | 	test	arg03, #31 wz
26d94     18 00 90 AD |  if_e	jmp	#LR__3600
26d98     4B 95 62 F0 | 	shl	arg02, arg03
26d9c     49 7B 02 F6 | 	mov	result1, arg01
26da0     4B 7D 62 F6 | 	neg	result2, arg03
26da4     3E 7B 42 F0 | 	shr	result1, result2
26da8     3D 95 42 F5 | 	or	arg02, result1
26dac     4B 93 62 F0 | 	shl	arg01, arg03
26db0                 | LR__3600
26db0     4A 7D 02 F6 | 	mov	result2, arg02
26db4     49 7B 02 F6 | 	mov	result1, arg01
26db8                 | __system___int64_shl_ret
26db8     2D 00 64 FD | 	ret
26dbc                 | 
26dbc                 | __system___int64_sar
26dbc     20 96 CE F7 | 	test	arg03, #32 wz
26dc0     4A 93 02 56 |  if_ne	mov	arg01, arg02
26dc4     1F 94 C6 50 |  if_ne	sar	arg02, #31
26dc8     1F 96 CE F7 | 	test	arg03, #31 wz
26dcc     18 00 90 AD |  if_e	jmp	#LR__3610
26dd0     4B 93 42 F0 | 	shr	arg01, arg03
26dd4     4A 7B 02 F6 | 	mov	result1, arg02
26dd8     4B 7D 62 F6 | 	neg	result2, arg03
26ddc     3E 7B 62 F0 | 	shl	result1, result2
26de0     3D 93 42 F5 | 	or	arg01, result1
26de4     4B 95 C2 F0 | 	sar	arg02, arg03
26de8                 | LR__3610
26de8     4A 7D 02 F6 | 	mov	result2, arg02
26dec     49 7B 02 F6 | 	mov	result1, arg01
26df0                 | __system___int64_sar_ret
26df0     2D 00 64 FD | 	ret
26df4                 | 
26df4                 | __system___usepins
26df4     14 68 06 F1 | 	add	ptr___system__dat__, #20
26df8     34 81 02 FB | 	rdlong	_var01, ptr___system__dat__
26dfc     14 68 86 F1 | 	sub	ptr___system__dat__, #20
26e00     40 93 CA F7 | 	test	arg01, _var01 wz
26e04     18 68 06 A1 |  if_e	add	ptr___system__dat__, #24
26e08     34 83 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
26e0c     18 68 86 A1 |  if_e	sub	ptr___system__dat__, #24
26e10     41 95 CA A7 |  if_e	test	arg02, _var02 wz
26e14     00 7A 06 56 |  if_ne	mov	result1, #0
26e18     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
26e1c     14 68 06 F1 | 	add	ptr___system__dat__, #20
26e20     34 83 02 FB | 	rdlong	_var02, ptr___system__dat__
26e24     49 83 42 F5 | 	or	_var02, arg01
26e28     34 83 62 FC | 	wrlong	_var02, ptr___system__dat__
26e2c     04 68 06 F1 | 	add	ptr___system__dat__, #4
26e30     34 83 02 FB | 	rdlong	_var02, ptr___system__dat__
26e34     4A 83 42 F5 | 	or	_var02, arg02
26e38     34 83 62 FC | 	wrlong	_var02, ptr___system__dat__
26e3c     18 68 86 F1 | 	sub	ptr___system__dat__, #24
26e40     01 7A 66 F6 | 	neg	result1, #1
26e44                 | __system___usepins_ret
26e44     2D 00 64 FD | 	ret
26e48                 | 
26e48                 | __system___freepins
26e48     14 68 06 F1 | 	add	ptr___system__dat__, #20
26e4c     34 81 02 FB | 	rdlong	_var01, ptr___system__dat__
26e50     49 81 22 F5 | 	andn	_var01, arg01
26e54     34 81 62 FC | 	wrlong	_var01, ptr___system__dat__
26e58     04 68 06 F1 | 	add	ptr___system__dat__, #4
26e5c     34 81 02 FB | 	rdlong	_var01, ptr___system__dat__
26e60     4A 81 22 F5 | 	andn	_var01, arg02
26e64     34 81 62 FC | 	wrlong	_var01, ptr___system__dat__
26e68     18 68 86 F1 | 	sub	ptr___system__dat__, #24
26e6c                 | __system___freepins_ret
26e6c     2D 00 64 FD | 	ret
26e70                 | 
26e70                 | __system___float_fromuns
26e70     49 97 0A F6 | 	mov	arg03, arg01 wz
26e74     4B 7B 02 A6 |  if_e	mov	result1, arg03
26e78     24 00 90 AD |  if_e	jmp	#LR__3620
26e7c     4B 95 92 F7 | 	encod	arg02, arg03 wc
26e80     01 94 06 C1 |  if_b	add	arg02, #1
26e84     01 94 86 F1 | 	sub	arg02, #1
26e88     1F 92 06 F6 | 	mov	arg01, #31
26e8c     4A 93 82 F1 | 	sub	arg01, arg02
26e90     49 97 62 F0 | 	shl	arg03, arg01
26e94     02 96 46 F0 | 	shr	arg03, #2
26e98     00 92 06 F6 | 	mov	arg01, #0
26e9c     58 09 B0 FD | 	call	#__system___float_Pack
26ea0                 | LR__3620
26ea0                 | __system___float_fromuns_ret
26ea0     2D 00 64 FD | 	ret
26ea4                 | 
26ea4                 | __system___float_add
26ea4     0F CA 05 F6 | 	mov	COUNT_, #15
26ea8     E8 00 A0 FD | 	call	#pushregs_
26eac     49 A7 02 F6 | 	mov	local01, arg01
26eb0     4A A9 02 F6 | 	mov	local02, arg02
26eb4     00 AA 06 F6 | 	mov	local03, #0
26eb8     53 AD 02 F6 | 	mov	local04, local01
26ebc     56 AF 02 F6 | 	mov	local05, local04
26ec0     16 AE 46 F7 | 	zerox	local05, #22
26ec4     56 B1 02 F6 | 	mov	local06, local04
26ec8     01 B0 66 F0 | 	shl	local06, #1
26ecc     18 B0 46 F0 | 	shr	local06, #24
26ed0     1F AC 46 F0 | 	shr	local04, #31
26ed4     54 93 02 F6 | 	mov	arg01, local02
26ed8     49 7B 02 F6 | 	mov	result1, arg01
26edc     3D B3 02 F6 | 	mov	local07, result1
26ee0     59 B5 02 F6 | 	mov	local08, local07
26ee4     16 B4 46 F7 | 	zerox	local08, #22
26ee8     59 B7 02 F6 | 	mov	local09, local07
26eec     01 B6 66 F0 | 	shl	local09, #1
26ef0     18 B6 46 F0 | 	shr	local09, #24
26ef4     5B B9 02 F6 | 	mov	local10, local09
26ef8     1F B2 46 F0 | 	shr	local07, #31
26efc     00 BA 06 F6 | 	mov	local11, #0
26f00     00 BC 06 F6 | 	mov	local12, #0
26f04     5C B1 12 F2 | 	cmp	local06, local10 wc
26f08     5C B1 0A 32 |  if_ae	cmp	local06, local10 wz
26f0c     2C 00 90 1D |  if_a	jmp	#LR__3630
26f10     5A AF 12 32 |  if_ae	cmp	local05, local08 wc
26f14     24 00 90 3D |  if_ae	jmp	#LR__3630
26f18     57 BF 02 F6 | 	mov	local13, local05
26f1c     5A AF 02 F6 | 	mov	local05, local08
26f20     5F B5 02 F6 | 	mov	local08, local13
26f24     58 BF 02 F6 | 	mov	local13, local06
26f28     5C B1 02 F6 | 	mov	local06, local10
26f2c     5F B9 02 F6 | 	mov	local10, local13
26f30     56 BF 02 F6 | 	mov	local13, local04
26f34     59 AD 02 F6 | 	mov	local04, local07
26f38     5F B3 02 F6 | 	mov	local07, local13
26f3c                 | LR__3630
26f3c     FF B0 0E F2 | 	cmp	local06, #255 wz
26f40     70 01 90 AD |  if_e	jmp	#LR__3645
26f44     00 B0 0E F2 | 	cmp	local06, #0 wz
26f48     AC 01 90 AD |  if_e	jmp	#LR__3647
26f4c     17 AE 26 F4 | 	bith	local05, #23
26f50                 | LR__3631
26f50     00 B8 0E F2 | 	cmp	local10, #0 wz
26f54     F0 01 90 AD |  if_e	jmp	#LR__3651
26f58     17 B4 26 F4 | 	bith	local08, #23
26f5c                 | LR__3632
26f5c     7F B0 86 F1 | 	sub	local06, #127
26f60     7F B8 86 F1 | 	sub	local10, #127
26f64     58 C1 02 F6 | 	mov	local14, local06
26f68     5C C1 82 F1 | 	sub	local14, local10
26f6c     D7 14 48 FB | 	callpa	#(@LR__3634-@LR__3633)>>2,fcache_load_ptr_
26f70                 | LR__3633
26f70     20 C0 56 F2 | 	cmps	local14, #32 wc
26f74     20 00 90 CD |  if_b	jmp	#LR__3635
26f78     5A B7 02 F6 | 	mov	local09, local08
26f7c     00 BA 0E F2 | 	cmp	local11, #0 wz
26f80     6F BA 62 FD | 	wrnz	local11
26f84     5D B7 42 F5 | 	or	local09, local11
26f88     5B BB 02 F6 | 	mov	local11, local09
26f8c     00 B4 06 F6 | 	mov	local08, #0
26f90     20 C0 86 F1 | 	sub	local14, #32
26f94     D8 FF 9F FD | 	jmp	#LR__3633
26f98                 | LR__3634
26f98                 | LR__3635
26f98     00 C0 0E F2 | 	cmp	local14, #0 wz
26f9c     38 00 90 AD |  if_e	jmp	#LR__3636
26fa0     5A BF 02 F6 | 	mov	local13, local08
26fa4     20 B8 06 F6 | 	mov	local10, #32
26fa8     60 B9 82 F1 | 	sub	local10, local14
26fac     5C BF 62 F0 | 	shl	local13, local10
26fb0     5D B9 02 F6 | 	mov	local10, local11
26fb4     20 B6 06 F6 | 	mov	local09, #32
26fb8     60 B7 82 F1 | 	sub	local09, local14
26fbc     5B B9 6A F0 | 	shl	local10, local09 wz
26fc0     60 BB 42 F0 | 	shr	local11, local14
26fc4     60 B5 42 F0 | 	shr	local08, local14
26fc8     5F BB 42 F5 | 	or	local11, local13
26fcc     00 C2 06 F6 | 	mov	local15, #0
26fd0     01 C2 06 56 |  if_ne	mov	local15, #1
26fd4     61 BB 42 F5 | 	or	local11, local15
26fd8                 | LR__3636
26fd8     56 C3 02 F6 | 	mov	local15, local04
26fdc     59 C3 62 F5 | 	xor	local15, local07
26fe0     01 C2 CE F7 | 	test	local15, #1 wz
26fe4     18 00 90 AD |  if_e	jmp	#LR__3637
26fe8     5A B5 22 F6 | 	not	local08, local08
26fec     5D BB 22 F6 | 	not	local11, local11
26ff0     01 BA 0E F1 | 	add	local11, #1 wz
26ff4     00 C2 06 F6 | 	mov	local15, #0
26ff8     01 C2 06 A6 |  if_e	mov	local15, #1
26ffc     61 B5 02 F1 | 	add	local08, local15
27000                 | LR__3637
27000     5D BD 12 F1 | 	add	local12, local11 wc
27004     5A AF 22 F1 | 	addx	local05, local08
27008     00 AE 56 F2 | 	cmps	local05, #0 wc
2700c     1C 00 90 3D |  if_ae	jmp	#LR__3638
27010     01 AC 66 F5 | 	xor	local04, #1
27014     57 AF 22 F6 | 	not	local05, local05
27018     5E BD 22 F6 | 	not	local12, local12
2701c     01 BC 0E F1 | 	add	local12, #1 wz
27020     00 C2 06 F6 | 	mov	local15, #0
27024     01 C2 06 A6 |  if_e	mov	local15, #1
27028     61 AF 02 F1 | 	add	local05, local15
2702c                 | LR__3638
2702c     00 80 00 FF 
27030     00 AE 16 F2 | 	cmp	local05, ##16777216 wc
27034     28 00 90 CD |  if_b	jmp	#LR__3639
27038     01 B0 06 F1 | 	add	local06, #1
2703c     5E C1 02 F6 | 	mov	local14, local12
27040     01 C0 06 F5 | 	and	local14, #1
27044     01 BC 46 F0 | 	shr	local12, #1
27048     57 C3 02 F6 | 	mov	local15, local05
2704c     1F C2 66 F0 | 	shl	local15, #31
27050     61 BD 42 F5 | 	or	local12, local15
27054     60 BD 42 F5 | 	or	local12, local14
27058     01 AE 46 F0 | 	shr	local05, #1
2705c     3C 00 90 FD | 	jmp	#LR__3644
27060                 | LR__3639
27060     00 40 00 FF 
27064     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
27068     30 00 90 3D |  if_ae	jmp	#LR__3643
2706c     00 AE 0E F2 | 	cmp	local05, #0 wz
27070     00 BC 0E A2 |  if_e	cmp	local12, #0 wz
27074     08 AC 46 A5 |  if_e	or	local04, #8
27078     01 AC 26 A5 |  if_e	andn	local04, #1
2707c     1C 00 90 AD |  if_e	jmp	#LR__3642
27080                 | LR__3640
27080     00 40 00 FF 
27084     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
27088     10 00 90 3D |  if_ae	jmp	#LR__3641
2708c     5E BD 12 F1 | 	add	local12, local12 wc
27090     57 AF 22 F1 | 	addx	local05, local05
27094     01 B0 86 F1 | 	sub	local06, #1
27098     E4 FF 9F FD | 	jmp	#LR__3640
2709c                 | LR__3641
2709c                 | LR__3642
2709c                 | LR__3643
2709c                 | LR__3644
2709c     57 93 02 F6 | 	mov	arg01, local05
270a0     5E 95 02 F6 | 	mov	arg02, local12
270a4     58 97 02 F6 | 	mov	arg03, local06
270a8     56 99 02 F6 | 	mov	arg04, local04
270ac     50 34 B0 FD | 	call	#__system__pack_0698
270b0     DC 00 90 FD | 	jmp	#LR__3655
270b4                 | LR__3645
270b4     FF B8 0E F2 | 	cmp	local10, #255 wz
270b8     10 00 90 5D |  if_ne	jmp	#LR__3646
270bc     56 B3 0A F2 | 	cmp	local07, local04 wz
270c0     00 F8 3F 5F 
270c4     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
270c8     C4 00 90 5D |  if_ne	jmp	#LR__3655
270cc                 | LR__3646
270cc     00 AE 0E F2 | 	cmp	local05, #0 wz
270d0     00 F8 3F 5F 
270d4     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
270d8     B4 00 90 5D |  if_ne	jmp	#LR__3655
270dc     5E 95 02 F6 | 	mov	arg02, local12
270e0     58 97 02 F6 | 	mov	arg03, local06
270e4     56 99 02 F6 | 	mov	arg04, local04
270e8     02 98 46 F5 | 	or	arg04, #2
270ec     57 93 02 F6 | 	mov	arg01, local05
270f0     0C 34 B0 FD | 	call	#__system__pack_0698
270f4     98 00 90 FD | 	jmp	#LR__3655
270f8                 | LR__3647
270f8     00 AE 0E F2 | 	cmp	local05, #0 wz
270fc     28 00 90 AD |  if_e	jmp	#LR__3650
27100     01 AE 66 F0 | 	shl	local05, #1
27104     D7 0E 48 FB | 	callpa	#(@LR__3649-@LR__3648)>>2,fcache_load_ptr_
27108                 | LR__3648
27108     00 40 00 FF 
2710c     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
27110     58 C3 02 C6 |  if_b	mov	local15, local06
27114     01 C2 86 C1 |  if_b	sub	local15, #1
27118     61 B1 02 C6 |  if_b	mov	local06, local15
2711c     01 AE 66 C0 |  if_b	shl	local05, #1
27120     E4 FF 9F CD |  if_b	jmp	#LR__3648
27124                 | LR__3649
27124     28 FE 9F FD | 	jmp	#LR__3631
27128                 | LR__3650
27128     59 AD 02 F5 | 	and	local04, local07
2712c     56 99 02 F6 | 	mov	arg04, local04
27130     08 98 46 F5 | 	or	arg04, #8
27134     00 92 06 F6 | 	mov	arg01, #0
27138     00 94 06 F6 | 	mov	arg02, #0
2713c     00 96 06 F6 | 	mov	arg03, #0
27140     BC 33 B0 FD | 	call	#__system__pack_0698
27144     48 00 90 FD | 	jmp	#LR__3655
27148                 | LR__3651
27148     00 B4 0E F2 | 	cmp	local08, #0 wz
2714c     28 00 90 AD |  if_e	jmp	#LR__3654
27150     01 B4 66 F0 | 	shl	local08, #1
27154     D7 0E 48 FB | 	callpa	#(@LR__3653-@LR__3652)>>2,fcache_load_ptr_
27158                 | LR__3652
27158     00 40 00 FF 
2715c     00 B4 16 F2 | 	cmp	local08, ##8388608 wc
27160     5C C3 02 C6 |  if_b	mov	local15, local10
27164     01 C2 86 C1 |  if_b	sub	local15, #1
27168     61 B9 02 C6 |  if_b	mov	local10, local15
2716c     01 B4 66 C0 |  if_b	shl	local08, #1
27170     E4 FF 9F CD |  if_b	jmp	#LR__3652
27174                 | LR__3653
27174     E4 FD 9F FD | 	jmp	#LR__3632
27178                 | LR__3654
27178     7F B0 86 F1 | 	sub	local06, #127
2717c     57 93 02 F6 | 	mov	arg01, local05
27180     5E 95 02 F6 | 	mov	arg02, local12
27184     58 97 02 F6 | 	mov	arg03, local06
27188     56 99 02 F6 | 	mov	arg04, local04
2718c     70 33 B0 FD | 	call	#__system__pack_0698
27190                 | LR__3655
27190     E7 F0 03 F6 | 	mov	ptra, fp
27194     F2 00 A0 FD | 	call	#popregs_
27198                 | __system___float_add_ret
27198     2D 00 64 FD | 	ret
2719c                 | 
2719c                 | __system___float_sqrt
2719c     04 CA 05 F6 | 	mov	COUNT_, #4
271a0     E8 00 A0 FD | 	call	#pushregs_
271a4     49 A7 02 F6 | 	mov	local01, arg01
271a8     49 7B 02 F6 | 	mov	result1, arg01
271ac     3D A9 02 F6 | 	mov	local02, result1
271b0     54 AB 02 F6 | 	mov	local03, local02
271b4     16 AA 46 F7 | 	zerox	local03, #22
271b8     54 AD 02 F6 | 	mov	local04, local02
271bc     01 AC 66 F0 | 	shl	local04, #1
271c0     18 AC 4E F0 | 	shr	local04, #24 wz
271c4     1F A8 46 F0 | 	shr	local02, #31
271c8     70 00 90 AD |  if_e	jmp	#LR__3661
271cc     17 AA 26 F4 | 	bith	local03, #23
271d0                 | LR__3660
271d0     00 A8 0E F2 | 	cmp	local02, #0 wz
271d4     00 F8 3F 5F 
271d8     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
271dc     88 00 90 5D |  if_ne	jmp	#LR__3664
271e0     FF AC 0E F2 | 	cmp	local04, #255 wz
271e4     53 7B 02 A6 |  if_e	mov	result1, local01
271e8     7C 00 90 AD |  if_e	jmp	#LR__3664
271ec     7F AC 86 F1 | 	sub	local04, #127
271f0     01 AC CE F7 | 	test	local04, #1 wz
271f4     01 AA 66 50 |  if_ne	shl	local03, #1
271f8     05 AA 66 F0 | 	shl	local03, #5
271fc     55 01 38 FD | 	qsqrt	#0, local03
27200     01 AC 86 51 |  if_ne	sub	local04, #1
27204     56 AD 52 F6 | 	abs	local04, local04 wc
27208     01 AC 46 F0 | 	shr	local04, #1
2720c     56 97 82 F6 | 	negc	arg03, local04
27210     54 99 02 F6 | 	mov	arg04, local02
27214     18 92 62 FD | 	getqx	arg01
27218     49 95 02 F6 | 	mov	arg02, arg01
2721c     19 94 66 F0 | 	shl	arg02, #25
27220     07 92 46 F0 | 	shr	arg01, #7
27224     00 80 00 FF 
27228     01 92 16 F2 | 	cmp	arg01, ##16777217 wc
2722c     01 96 06 31 |  if_ae	add	arg03, #1
27230     01 92 46 30 |  if_ae	shr	arg01, #1
27234     C8 32 B0 FD | 	call	#__system__pack_0698
27238     2C 00 90 FD | 	jmp	#LR__3664
2723c                 | LR__3661
2723c     00 AA 0E F2 | 	cmp	local03, #0 wz
27240     53 7B 02 A6 |  if_e	mov	result1, local01
27244     20 00 90 AD |  if_e	jmp	#LR__3664
27248     01 AA 66 F0 | 	shl	local03, #1
2724c     D7 0A 48 FB | 	callpa	#(@LR__3663-@LR__3662)>>2,fcache_load_ptr_
27250                 | LR__3662
27250     00 40 00 FF 
27254     00 AA 16 F2 | 	cmp	local03, ##8388608 wc
27258     01 AC 86 C1 |  if_b	sub	local04, #1
2725c     01 AA 66 C0 |  if_b	shl	local03, #1
27260     EC FF 9F CD |  if_b	jmp	#LR__3662
27264                 | LR__3663
27264     68 FF 9F FD | 	jmp	#LR__3660
27268                 | LR__3664
27268     E7 F0 03 F6 | 	mov	ptra, fp
2726c     F2 00 A0 FD | 	call	#popregs_
27270                 | __system___float_sqrt_ret
27270     2D 00 64 FD | 	ret
27274                 | 
27274                 | __system___float_mul
27274     0B CA 05 F6 | 	mov	COUNT_, #11
27278     E8 00 A0 FD | 	call	#pushregs_
2727c     49 A7 02 F6 | 	mov	local01, arg01
27280     4A A9 02 F6 | 	mov	local02, arg02
27284     53 AB 02 F6 | 	mov	local03, local01
27288     55 AD 02 F6 | 	mov	local04, local03
2728c     16 AC 46 F7 | 	zerox	local04, #22
27290     55 AF 02 F6 | 	mov	local05, local03
27294     01 AE 66 F0 | 	shl	local05, #1
27298     18 AE 46 F0 | 	shr	local05, #24
2729c     1F AA 46 F0 | 	shr	local03, #31
272a0     54 7B 02 F6 | 	mov	result1, local02
272a4     3D B1 02 F6 | 	mov	local06, result1
272a8     58 B3 02 F6 | 	mov	local07, local06
272ac     16 B2 46 F7 | 	zerox	local07, #22
272b0     58 B5 02 F6 | 	mov	local08, local06
272b4     01 B4 66 F0 | 	shl	local08, #1
272b8     18 B4 46 F0 | 	shr	local08, #24
272bc     1F B0 46 F0 | 	shr	local06, #31
272c0     58 AB 62 F5 | 	xor	local03, local06
272c4     FF AE 0E F2 | 	cmp	local05, #255 wz
272c8     90 00 90 AD |  if_e	jmp	#LR__3673
272cc     FF B4 0E F2 | 	cmp	local08, #255 wz
272d0     D8 00 90 AD |  if_e	jmp	#LR__3675
272d4     00 AE 0E F2 | 	cmp	local05, #0 wz
272d8     0C 01 90 AD |  if_e	jmp	#LR__3676
272dc     17 AC 26 F4 | 	bith	local04, #23
272e0                 | LR__3670
272e0     00 B4 0E F2 | 	cmp	local08, #0 wz
272e4     44 01 90 AD |  if_e	jmp	#LR__3680
272e8     17 B2 26 F4 | 	bith	local07, #23
272ec                 | LR__3671
272ec     56 A9 02 F6 | 	mov	local02, local04
272f0     04 A8 66 F0 | 	shl	local02, #4
272f4     59 B1 02 F6 | 	mov	local06, local07
272f8     05 B0 66 F0 | 	shl	local06, #5
272fc     58 A9 02 FD | 	qmul	local02, local06
27300     5A AF 02 F1 | 	add	local05, local08
27304     FE AE 86 F1 | 	sub	local05, #254
27308     57 B7 02 F6 | 	mov	local09, local05
2730c     04 AC 66 F0 | 	shl	local04, #4
27310     05 B2 66 F0 | 	shl	local07, #5
27314     18 B8 62 FD | 	getqx	local10
27318     59 AD 02 FD | 	qmul	local04, local07
2731c     19 BA 62 FD | 	getqy	local11
27320     00 80 00 FF 
27324     00 BA 16 F2 | 	cmp	local11, ##16777216 wc
27328     18 00 90 CD |  if_b	jmp	#LR__3672
2732c     01 B6 06 F1 | 	add	local09, #1
27330     01 B8 46 F0 | 	shr	local10, #1
27334     5D B5 02 F6 | 	mov	local08, local11
27338     1F B4 66 F0 | 	shl	local08, #31
2733c     5A B9 42 F5 | 	or	local10, local08
27340     01 BA 46 F0 | 	shr	local11, #1
27344                 | LR__3672
27344     5D 93 02 F6 | 	mov	arg01, local11
27348     5C 95 02 F6 | 	mov	arg02, local10
2734c     5B 97 02 F6 | 	mov	arg03, local09
27350     55 99 02 F6 | 	mov	arg04, local03
27354     A8 31 B0 FD | 	call	#__system__pack_0698
27358     10 01 90 FD | 	jmp	#LR__3684
2735c                 | LR__3673
2735c     00 AC 0E F2 | 	cmp	local04, #0 wz
27360     53 7B 02 56 |  if_ne	mov	result1, local01
27364     04 01 90 5D |  if_ne	jmp	#LR__3684
27368     FF B4 56 F2 | 	cmps	local08, #255 wc
2736c     00 B4 0E C2 |  if_b	cmp	local08, #0 wz
27370     00 B2 0E 82 |  if_c_and_z	cmp	local07, #0 wz
27374     18 00 90 4D |  if_c_and_nz	jmp	#LR__3674
27378     00 F8 3F CF 
2737c     00 7A 06 C6 |  if_b	mov	result1, ##2146435072
27380     E8 00 90 CD |  if_b	jmp	#LR__3684
27384     00 B2 0E F2 | 	cmp	local07, #0 wz
27388     54 7B 02 56 |  if_ne	mov	result1, local02
2738c     DC 00 90 5D |  if_ne	jmp	#LR__3684
27390                 | LR__3674
27390     02 AA 46 F5 | 	or	local03, #2
27394     00 92 06 F6 | 	mov	arg01, #0
27398     00 94 06 F6 | 	mov	arg02, #0
2739c     57 97 02 F6 | 	mov	arg03, local05
273a0     55 99 02 F6 | 	mov	arg04, local03
273a4     58 31 B0 FD | 	call	#__system__pack_0698
273a8     C0 00 90 FD | 	jmp	#LR__3684
273ac                 | LR__3675
273ac     00 AE 0E F2 | 	cmp	local05, #0 wz
273b0     00 AC 0E A2 |  if_e	cmp	local04, #0 wz
273b4     00 F8 3F AF 
273b8     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
273bc     AC 00 90 AD |  if_e	jmp	#LR__3684
273c0     00 B2 0E F2 | 	cmp	local07, #0 wz
273c4     54 7B 02 56 |  if_ne	mov	result1, local02
273c8     A0 00 90 5D |  if_ne	jmp	#LR__3684
273cc     5A 97 02 F6 | 	mov	arg03, local08
273d0     55 99 02 F6 | 	mov	arg04, local03
273d4     02 98 46 F5 | 	or	arg04, #2
273d8     00 92 06 F6 | 	mov	arg01, #0
273dc     00 94 06 F6 | 	mov	arg02, #0
273e0     1C 31 B0 FD | 	call	#__system__pack_0698
273e4     84 00 90 FD | 	jmp	#LR__3684
273e8                 | LR__3676
273e8     00 AC 0E F2 | 	cmp	local04, #0 wz
273ec     20 00 90 AD |  if_e	jmp	#LR__3679
273f0     01 AC 66 F0 | 	shl	local04, #1
273f4     D7 0A 48 FB | 	callpa	#(@LR__3678-@LR__3677)>>2,fcache_load_ptr_
273f8                 | LR__3677
273f8     00 40 00 FF 
273fc     00 AC 16 F2 | 	cmp	local04, ##8388608 wc
27400     01 AE 86 C1 |  if_b	sub	local05, #1
27404     01 AC 66 C0 |  if_b	shl	local04, #1
27408     EC FF 9F CD |  if_b	jmp	#LR__3677
2740c                 | LR__3678
2740c     D0 FE 9F FD | 	jmp	#LR__3670
27410                 | LR__3679
27410     08 AA 46 F5 | 	or	local03, #8
27414     00 92 06 F6 | 	mov	arg01, #0
27418     00 94 06 F6 | 	mov	arg02, #0
2741c     00 96 06 F6 | 	mov	arg03, #0
27420     55 99 02 F6 | 	mov	arg04, local03
27424     D8 30 B0 FD | 	call	#__system__pack_0698
27428     40 00 90 FD | 	jmp	#LR__3684
2742c                 | LR__3680
2742c     00 B2 0E F2 | 	cmp	local07, #0 wz
27430     20 00 90 AD |  if_e	jmp	#LR__3683
27434     01 B2 66 F0 | 	shl	local07, #1
27438     D7 0A 48 FB | 	callpa	#(@LR__3682-@LR__3681)>>2,fcache_load_ptr_
2743c                 | LR__3681
2743c     00 40 00 FF 
27440     00 B2 16 F2 | 	cmp	local07, ##8388608 wc
27444     01 B4 86 C1 |  if_b	sub	local08, #1
27448     01 B2 66 C0 |  if_b	shl	local07, #1
2744c     EC FF 9F CD |  if_b	jmp	#LR__3681
27450                 | LR__3682
27450     98 FE 9F FD | 	jmp	#LR__3671
27454                 | LR__3683
27454     08 AA 46 F5 | 	or	local03, #8
27458     00 92 06 F6 | 	mov	arg01, #0
2745c     00 94 06 F6 | 	mov	arg02, #0
27460     00 96 06 F6 | 	mov	arg03, #0
27464     55 99 02 F6 | 	mov	arg04, local03
27468     94 30 B0 FD | 	call	#__system__pack_0698
2746c                 | LR__3684
2746c     E7 F0 03 F6 | 	mov	ptra, fp
27470     F2 00 A0 FD | 	call	#popregs_
27474                 | __system___float_mul_ret
27474     2D 00 64 FD | 	ret
27478                 | 
27478                 | __system___float_div
27478     0E CA 05 F6 | 	mov	COUNT_, #14
2747c     E8 00 A0 FD | 	call	#pushregs_
27480     49 AB 02 F6 | 	mov	local03, arg01
27484     4A AD 02 F6 | 	mov	local04, arg02
27488     55 AF 02 F6 | 	mov	local05, local03
2748c     57 B1 02 F6 | 	mov	local06, local05
27490     16 B0 46 F7 | 	zerox	local06, #22
27494     57 B3 02 F6 | 	mov	local07, local05
27498     01 B2 66 F0 | 	shl	local07, #1
2749c     18 B2 46 F0 | 	shr	local07, #24
274a0     1F AE 46 F0 | 	shr	local05, #31
274a4     56 7B 02 F6 | 	mov	result1, local04
274a8     3D B5 02 F6 | 	mov	local08, result1
274ac     5A B7 02 F6 | 	mov	local09, local08
274b0     16 B6 46 F7 | 	zerox	local09, #22
274b4     5A B9 02 F6 | 	mov	local10, local08
274b8     01 B8 66 F0 | 	shl	local10, #1
274bc     18 B8 46 F0 | 	shr	local10, #24
274c0     1F B4 46 F0 | 	shr	local08, #31
274c4     5A AF 62 F5 | 	xor	local05, local08
274c8     FF B2 0E F2 | 	cmp	local07, #255 wz
274cc     D4 00 90 AD |  if_e	jmp	#LR__3695
274d0     FF B8 0E F2 | 	cmp	local10, #255 wz
274d4     04 01 90 AD |  if_e	jmp	#LR__3696
274d8     00 B2 0E F2 | 	cmp	local07, #0 wz
274dc     24 01 90 AD |  if_e	jmp	#LR__3697
274e0     17 B0 26 F4 | 	bith	local06, #23
274e4                 | LR__3690
274e4     00 B8 0E F2 | 	cmp	local10, #0 wz
274e8     70 01 90 AD |  if_e	jmp	#LR__3701
274ec     17 B6 26 F4 | 	bith	local09, #23
274f0                 | LR__3691
274f0     5C B3 82 F1 | 	sub	local07, local10
274f4     59 BB 02 F6 | 	mov	local11, local07
274f8     58 93 02 F6 | 	mov	arg01, local06
274fc     02 92 46 F0 | 	shr	arg01, #2
27500     1E B0 66 F0 | 	shl	local06, #30
27504     58 95 02 F6 | 	mov	arg02, local06
27508     5B 97 02 F6 | 	mov	arg03, local09
2750c     28 92 62 FD | 	setq	arg01
27510     4B 95 12 FD | 	qdiv	arg02, arg03
27514     00 BC 06 F6 | 	mov	local12, #0
27518     18 A6 62 FD | 	getqx	local01
2751c     19 7C 62 FD | 	getqy	result2
27520     3E A9 02 F6 | 	mov	local02, result2
27524     53 BF 02 F6 | 	mov	local13, local01
27528     00 A8 4E F2 | 	cmps	local02, #0 wz
2752c     5F C1 02 F6 | 	mov	local14, local13
27530     19 C0 66 F0 | 	shl	local14, #25
27534     01 BC 06 56 |  if_ne	mov	local12, #1
27538     5E C1 42 F5 | 	or	local14, local12
2753c     07 BE 46 F0 | 	shr	local13, #7
27540     00 80 00 FF 
27544     00 BE 16 F2 | 	cmp	local13, ##16777216 wc
27548     1C 00 90 CD |  if_b	jmp	#LR__3692
2754c     01 BA 06 F1 | 	add	local11, #1
27550     01 C0 46 F0 | 	shr	local14, #1
27554     5F BD 02 F6 | 	mov	local12, local13
27558     1F BC 66 F0 | 	shl	local12, #31
2755c     5E C1 42 F5 | 	or	local14, local12
27560     01 BE 46 F0 | 	shr	local13, #1
27564     24 00 90 FD | 	jmp	#LR__3694
27568                 | LR__3692
27568     00 40 00 FF 
2756c     00 BE 16 F2 | 	cmp	local13, ##8388608 wc
27570     18 00 90 3D |  if_ae	jmp	#LR__3693
27574     01 BA 86 F1 | 	sub	local11, #1
27578     01 BE 66 F0 | 	shl	local13, #1
2757c     60 BD 02 F6 | 	mov	local12, local14
27580     1F BC 46 F0 | 	shr	local12, #31
27584     5E BF 42 F5 | 	or	local13, local12
27588     01 C0 66 F0 | 	shl	local14, #1
2758c                 | LR__3693
2758c                 | LR__3694
2758c     5F 93 02 F6 | 	mov	arg01, local13
27590     60 95 02 F6 | 	mov	arg02, local14
27594     5D 97 02 F6 | 	mov	arg03, local11
27598     57 99 02 F6 | 	mov	arg04, local05
2759c     60 2F B0 FD | 	call	#__system__pack_0698
275a0     F8 00 90 FD | 	jmp	#LR__3705
275a4                 | LR__3695
275a4     00 B0 0E F2 | 	cmp	local06, #0 wz
275a8     55 7B 02 56 |  if_ne	mov	result1, local03
275ac     EC 00 90 5D |  if_ne	jmp	#LR__3705
275b0     FF B8 0E F2 | 	cmp	local10, #255 wz
275b4     00 F8 3F AF 
275b8     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
275bc     DC 00 90 AD |  if_e	jmp	#LR__3705
275c0     02 AE 46 F5 | 	or	local05, #2
275c4     00 92 06 F6 | 	mov	arg01, #0
275c8     00 94 06 F6 | 	mov	arg02, #0
275cc     59 97 02 F6 | 	mov	arg03, local07
275d0     57 99 02 F6 | 	mov	arg04, local05
275d4     28 2F B0 FD | 	call	#__system__pack_0698
275d8     C0 00 90 FD | 	jmp	#LR__3705
275dc                 | LR__3696
275dc     00 B6 0E F2 | 	cmp	local09, #0 wz
275e0     56 7B 02 56 |  if_ne	mov	result1, local04
275e4     B4 00 90 5D |  if_ne	jmp	#LR__3705
275e8     57 99 02 F6 | 	mov	arg04, local05
275ec     08 98 46 F5 | 	or	arg04, #8
275f0     00 92 06 F6 | 	mov	arg01, #0
275f4     00 94 06 F6 | 	mov	arg02, #0
275f8     00 96 06 F6 | 	mov	arg03, #0
275fc     00 2F B0 FD | 	call	#__system__pack_0698
27600     98 00 90 FD | 	jmp	#LR__3705
27604                 | LR__3697
27604     00 B0 0E F2 | 	cmp	local06, #0 wz
27608     20 00 90 AD |  if_e	jmp	#LR__3700
2760c     01 B0 66 F0 | 	shl	local06, #1
27610     D7 0A 48 FB | 	callpa	#(@LR__3699-@LR__3698)>>2,fcache_load_ptr_
27614                 | LR__3698
27614     00 40 00 FF 
27618     00 B0 16 F2 | 	cmp	local06, ##8388608 wc
2761c     01 B2 86 C1 |  if_b	sub	local07, #1
27620     01 B0 66 C0 |  if_b	shl	local06, #1
27624     EC FF 9F CD |  if_b	jmp	#LR__3698
27628                 | LR__3699
27628     B8 FE 9F FD | 	jmp	#LR__3690
2762c                 | LR__3700
2762c     00 B8 0E F2 | 	cmp	local10, #0 wz
27630     00 B6 0E A2 |  if_e	cmp	local09, #0 wz
27634     00 F8 3F AF 
27638     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
2763c     5C 00 90 AD |  if_e	jmp	#LR__3705
27640     57 99 02 F6 | 	mov	arg04, local05
27644     08 98 46 F5 | 	or	arg04, #8
27648     00 92 06 F6 | 	mov	arg01, #0
2764c     00 94 06 F6 | 	mov	arg02, #0
27650     00 96 06 F6 | 	mov	arg03, #0
27654     A8 2E B0 FD | 	call	#__system__pack_0698
27658     40 00 90 FD | 	jmp	#LR__3705
2765c                 | LR__3701
2765c     00 B6 0E F2 | 	cmp	local09, #0 wz
27660     20 00 90 AD |  if_e	jmp	#LR__3704
27664     01 B6 66 F0 | 	shl	local09, #1
27668     D7 0A 48 FB | 	callpa	#(@LR__3703-@LR__3702)>>2,fcache_load_ptr_
2766c                 | LR__3702
2766c     00 40 00 FF 
27670     00 B6 16 F2 | 	cmp	local09, ##8388608 wc
27674     01 B8 86 C1 |  if_b	sub	local10, #1
27678     01 B6 66 C0 |  if_b	shl	local09, #1
2767c     EC FF 9F CD |  if_b	jmp	#LR__3702
27680                 | LR__3703
27680     6C FE 9F FD | 	jmp	#LR__3691
27684                 | LR__3704
27684     02 AE 46 F5 | 	or	local05, #2
27688     00 92 06 F6 | 	mov	arg01, #0
2768c     00 94 06 F6 | 	mov	arg02, #0
27690     00 96 06 F6 | 	mov	arg03, #0
27694     57 99 02 F6 | 	mov	arg04, local05
27698     64 2E B0 FD | 	call	#__system__pack_0698
2769c                 | LR__3705
2769c     E7 F0 03 F6 | 	mov	ptra, fp
276a0     F2 00 A0 FD | 	call	#popregs_
276a4                 | __system___float_div_ret
276a4     2D 00 64 FD | 	ret
276a8                 | 
276a8                 | __system___float_cmp
276a8     00 C0 3F FF 
276ac     01 92 56 F2 | 	cmps	arg01, ##2139095041 wc
276b0     00 C0 3F CF 
276b4     01 94 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
276b8     4B 7B 02 36 |  if_ae	mov	result1, arg03
276bc     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
276c0     00 C0 7F FF 
276c4     01 92 16 F2 | 	cmp	arg01, ##-8388607 wc
276c8     00 C0 7F CF 
276cc     01 92 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
276d0     4B 7B 02 36 |  if_ae	mov	result1, arg03
276d4     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
276d8     00 92 56 F2 | 	cmps	arg01, #0 wc
276dc     2C 00 90 3D |  if_ae	jmp	#LR__3710
276e0     00 94 56 F2 | 	cmps	arg02, #0 wc
276e4     4A 7B 02 C6 |  if_b	mov	result1, arg02
276e8     49 7B 82 C1 |  if_b	sub	result1, arg01
276ec     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
276f0     00 94 0E F2 | 	cmp	arg02, #0 wz
276f4     00 00 40 AF 
276f8     00 92 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
276fc     00 7A 06 A6 |  if_e	mov	result1, #0
27700     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
27704     01 7A 66 F6 | 	neg	result1, #1
27708     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
2770c                 | LR__3710
2770c     00 94 56 F2 | 	cmps	arg02, #0 wc
27710     1C 00 90 3D |  if_ae	jmp	#LR__3711
27714     00 92 0E F2 | 	cmp	arg01, #0 wz
27718     00 00 40 AF 
2771c     00 94 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
27720     00 7A 06 A6 |  if_e	mov	result1, #0
27724     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
27728     01 7A 06 F6 | 	mov	result1, #1
2772c     08 00 90 FD | 	jmp	#__system___float_cmp_ret
27730                 | LR__3711
27730     4A 93 82 F1 | 	sub	arg01, arg02
27734     49 7B 02 F6 | 	mov	result1, arg01
27738                 | __system___float_cmp_ret
27738     2D 00 64 FD | 	ret
2773c                 | 
2773c                 | __system___float_tointeger
2773c     02 CA 05 F6 | 	mov	COUNT_, #2
27740     E8 00 A0 FD | 	call	#pushregs_
27744     5C 00 B0 FD | 	call	#__system___float_Unpack
27748     3D A7 02 F6 | 	mov	local01, result1
2774c     1F 7C 56 F2 | 	cmps	result2, #31 wc
27750     00 A6 0E 32 |  if_ae	cmp	local01, #0 wz
27754     1F A8 C6 19 |  if_a	decod	local02, #31
27758     1E A8 CE 29 |  if_nc_and_z	bmask	local02, #30
2775c     54 7F 02 36 |  if_ae	mov	result3, local02
27760     30 00 90 3D |  if_ae	jmp	#LR__3721
27764     FF FF 7F FF 
27768     FF 7D 56 F2 | 	cmps	result2, ##-1 wc
2776c     00 7E 06 C6 |  if_b	mov	result3, #0
27770     20 00 90 CD |  if_b	jmp	#LR__3720
27774     02 7E 66 F0 | 	shl	result3, #2
27778     1E A8 06 F6 | 	mov	local02, #30
2777c     3E A9 82 F1 | 	sub	local02, result2
27780     54 7F 42 F0 | 	shr	result3, local02
27784     4A 7F 02 F1 | 	add	result3, arg02
27788     01 7E 46 F0 | 	shr	result3, #1
2778c     00 A6 0E F2 | 	cmp	local01, #0 wz
27790     3F 7F 62 56 |  if_ne	neg	result3, result3
27794                 | LR__3720
27794                 | LR__3721
27794     3F 7B 02 F6 | 	mov	result1, result3
27798     E7 F0 03 F6 | 	mov	ptra, fp
2779c     F2 00 A0 FD | 	call	#popregs_
277a0                 | __system___float_tointeger_ret
277a0     2D 00 64 FD | 	ret
277a4                 | 
277a4                 | __system___float_Unpack
277a4     49 81 02 F6 | 	mov	_var01, arg01
277a8     1F 80 46 F0 | 	shr	_var01, #31
277ac     49 83 02 F6 | 	mov	_var02, arg01
277b0     01 82 66 F0 | 	shl	_var02, #1
277b4     18 82 4E F0 | 	shr	_var02, #24 wz
277b8     17 93 06 F4 | 	bitl	arg01, #279
277bc     06 92 66 50 |  if_ne	shl	arg01, #6
277c0     1D 92 26 54 |  if_ne	bith	arg01, #29
277c4     1C 00 90 5D |  if_ne	jmp	#LR__3730
277c8     49 85 92 F7 | 	encod	_var03, arg01 wc
277cc     01 84 06 C1 |  if_b	add	_var03, #1
277d0     17 84 86 F1 | 	sub	_var03, #23
277d4     42 83 02 F6 | 	mov	_var02, _var03
277d8     07 7C 06 F6 | 	mov	result2, #7
277dc     42 7D 82 F1 | 	sub	result2, _var03
277e0     3E 93 62 F0 | 	shl	arg01, result2
277e4                 | LR__3730
277e4     7F 82 86 F1 | 	sub	_var02, #127
277e8     49 7F 02 F6 | 	mov	result3, arg01
277ec     40 7B 02 F6 | 	mov	result1, _var01
277f0     41 7D 02 F6 | 	mov	result2, _var02
277f4                 | __system___float_Unpack_ret
277f4     2D 00 64 FD | 	ret
277f8                 | 
277f8                 | __system___float_Pack
277f8     00 80 06 F6 | 	mov	_var01, #0
277fc     00 96 0E F2 | 	cmp	arg03, #0 wz
27800     8C 00 90 AD |  if_e	jmp	#LR__3741
27804     4B 83 92 F7 | 	encod	_var02, arg03 wc
27808     01 82 06 C1 |  if_b	add	_var02, #1
2780c     21 80 06 F6 | 	mov	_var01, #33
27810     41 81 82 F1 | 	sub	_var01, _var02
27814     40 97 62 F0 | 	shl	arg03, _var01
27818     03 82 06 F6 | 	mov	_var02, #3
2781c     40 83 82 F1 | 	sub	_var02, _var01
27820     41 95 02 F1 | 	add	arg02, _var02
27824     4A 85 02 F6 | 	mov	_var03, arg02
27828     00 97 06 F1 | 	add	arg03, #256
2782c     4B 83 02 F6 | 	mov	_var02, arg03
27830     FF 82 2E F5 | 	andn	_var02, #255 wz
27834     01 84 06 A1 |  if_e	add	_var03, #1
27838     7F 84 06 F1 | 	add	_var03, #127
2783c     FF FF 7F FF 
27840     E9 85 46 F3 | 	fges	_var03, ##-23
27844     FF 84 66 F3 | 	fles	_var03, #255
27848     01 84 56 F2 | 	cmps	_var03, #1 wc
2784c     1C 00 90 3D |  if_ae	jmp	#LR__3740
27850     01 96 46 F0 | 	shr	arg03, #1
27854     1F 82 C6 F9 | 	decod	_var02, #31
27858     4B 83 02 F1 | 	add	_var02, arg03
2785c     42 85 62 F6 | 	neg	_var03, _var03
27860     42 83 42 F0 | 	shr	_var02, _var03
27864     41 97 02 F6 | 	mov	arg03, _var02
27868     00 84 06 F6 | 	mov	_var03, #0
2786c                 | LR__3740
2786c     49 7B 02 F6 | 	mov	result1, arg01
27870     1F 7A 66 F0 | 	shl	result1, #31
27874     42 83 02 F6 | 	mov	_var02, _var03
27878     17 82 66 F0 | 	shl	_var02, #23
2787c     41 7B 42 F5 | 	or	result1, _var02
27880     4B 87 02 F6 | 	mov	_var04, arg03
27884     09 86 46 F0 | 	shr	_var04, #9
27888     43 7B 42 F5 | 	or	result1, _var04
2788c     04 00 90 FD | 	jmp	#__system___float_Pack_ret
27890                 | LR__3741
27890     40 7B 02 F6 | 	mov	result1, _var01
27894                 | __system___float_Pack_ret
27894     2D 00 64 FD | 	ret
27898                 | 
27898                 | __system___basic_print_float
27898     05 CA 05 F6 | 	mov	COUNT_, #5
2789c     E8 00 A0 FD | 	call	#pushregs_
278a0     49 A7 02 F6 | 	mov	local01, arg01
278a4     4A A9 02 F6 | 	mov	local02, arg02
278a8     4B AB 0A F6 | 	mov	local03, arg03 wz
278ac     4C AD 02 F6 | 	mov	local04, arg04
278b0     14 00 90 5D |  if_ne	jmp	#LR__3750
278b4     23 AC 0E F2 | 	cmp	local04, #35 wz
278b8     80 02 10 AF 
278bc     00 AE 06 A6 |  if_e	mov	local05, ##537198592
278c0     1D AE C6 59 |  if_ne	decod	local05, #29
278c4     57 AB 02 F6 | 	mov	local03, local05
278c8                 | LR__3750
278c8     53 93 02 F6 | 	mov	arg01, local01
278cc     A0 28 B0 FD | 	call	#__system___gettxfunc
278d0     3D AF 0A F6 | 	mov	local05, result1 wz
278d4     00 7A 06 A6 |  if_e	mov	result1, #0
278d8     57 93 02 56 |  if_ne	mov	arg01, local05
278dc     55 95 02 56 |  if_ne	mov	arg02, local03
278e0     54 97 02 56 |  if_ne	mov	arg03, local02
278e4     56 99 02 56 |  if_ne	mov	arg04, local04
278e8     00 E4 BF 5D |  if_ne	call	#__system___fmtfloat
278ec     E7 F0 03 F6 | 	mov	ptra, fp
278f0     F2 00 A0 FD | 	call	#popregs_
278f4                 | __system___basic_print_float_ret
278f4     2D 00 64 FD | 	ret
278f8                 | 
278f8                 | __system____builtin_atoi
278f8     07 CA 05 F6 | 	mov	COUNT_, #7
278fc     E8 00 A0 FD | 	call	#pushregs_
27900                 | __system____builtin_atoi_enter
27900     49 A7 02 F6 | 	mov	local01, arg01
27904     4A A9 02 F6 | 	mov	local02, arg02
27908     00 AA 06 F6 | 	mov	local03, #0
2790c     00 AC 06 F6 | 	mov	local04, #0
27910     00 AE 06 F6 | 	mov	local05, #0
27914     D7 08 48 FB | 	callpa	#(@LR__3761-@LR__3760)>>2,fcache_load_ptr_
27918                 | LR__3760
27918     53 B1 C2 FA | 	rdbyte	local06, local01
2791c     20 B0 0E F2 | 	cmp	local06, #32 wz
27920     01 A6 06 A1 |  if_e	add	local01, #1
27924     F0 FF 9F AD |  if_e	jmp	#LR__3760
27928                 | LR__3761
27928     53 B3 C2 FA | 	rdbyte	local07, local01
2792c     D7 12 48 FB | 	callpa	#(@LR__3763-@LR__3762)>>2,fcache_load_ptr_
27930                 | LR__3762
27930     2D B2 0E F2 | 	cmp	local07, #45 wz
27934     2B B2 0E 52 |  if_ne	cmp	local07, #43 wz
27938     18 00 90 5D |  if_ne	jmp	#LR__3764
2793c     01 A6 06 F1 | 	add	local01, #1
27940     2D B2 0E F2 | 	cmp	local07, #45 wz
27944     01 B0 06 A6 |  if_e	mov	local06, #1
27948     58 AF C2 A2 |  if_e	subr	local05, local06
2794c     53 B3 C2 FA | 	rdbyte	local07, local01
27950     DC FF 9F FD | 	jmp	#LR__3762
27954                 | LR__3763
27954                 | LR__3764
27954     00 A8 0E F2 | 	cmp	local02, #0 wz
27958     1C 00 90 5D |  if_ne	jmp	#LR__3766
2795c     24 B2 0E F2 | 	cmp	local07, #36 wz
27960     10 A8 06 A6 |  if_e	mov	local02, #16
27964     01 A6 06 A1 |  if_e	add	local01, #1
27968     0C 00 90 AD |  if_e	jmp	#LR__3765
2796c     25 B2 0E F2 | 	cmp	local07, #37 wz
27970     02 A8 06 A6 |  if_e	mov	local02, #2
27974     01 A6 06 A1 |  if_e	add	local01, #1
27978                 | LR__3765
27978                 | LR__3766
27978     D7 48 48 FB | 	callpa	#(@LR__3774-@LR__3767)>>2,fcache_load_ptr_
2797c                 | LR__3767
2797c                 | LR__3768
2797c     53 B3 C2 FA | 	rdbyte	local07, local01
27980     5F B2 0E F2 | 	cmp	local07, #95 wz
27984     01 A6 06 F1 | 	add	local01, #1
27988     F0 FF 9F AD |  if_e	jmp	#LR__3768
2798c     30 B2 0E F2 | 	cmp	local07, #48 wz
27990     26 B2 0E 52 |  if_ne	cmp	local07, #38 wz
27994     00 AC 06 A6 |  if_e	mov	local04, #0
27998     60 00 90 AD |  if_e	jmp	#LR__3773
2799c     31 B2 56 F2 | 	cmps	local07, #49 wc
279a0     18 00 90 CD |  if_b	jmp	#LR__3769
279a4     3A B2 56 F2 | 	cmps	local07, #58 wc
279a8     59 AD 02 C6 |  if_b	mov	local04, local07
279ac     30 AC 86 C1 |  if_b	sub	local04, #48
279b0     00 A8 0E C2 |  if_b	cmp	local02, #0 wz
279b4     0A A8 06 86 |  if_c_and_z	mov	local02, #10
279b8     40 00 90 CD |  if_b	jmp	#LR__3772
279bc                 | LR__3769
279bc     0B A8 56 F2 | 	cmps	local02, #11 wc
279c0     61 B2 56 32 |  if_ae	cmps	local07, #97 wc
279c4     14 00 90 CD |  if_b	jmp	#LR__3770
279c8     67 B2 56 F2 | 	cmps	local07, #103 wc
279cc     61 B2 86 C1 |  if_b	sub	local07, #97
279d0     0A AC 06 C6 |  if_b	mov	local04, #10
279d4     59 AD 02 C1 |  if_b	add	local04, local07
279d8     20 00 90 CD |  if_b	jmp	#LR__3771
279dc                 | LR__3770
279dc     0B A8 56 F2 | 	cmps	local02, #11 wc
279e0     41 B2 56 32 |  if_ae	cmps	local07, #65 wc
279e4     24 00 90 CD |  if_b	jmp	#LR__3775
279e8     47 B2 56 F2 | 	cmps	local07, #71 wc
279ec     41 B2 86 C1 |  if_b	sub	local07, #65
279f0     0A AC 06 C6 |  if_b	mov	local04, #10
279f4     59 AD 02 C1 |  if_b	add	local04, local07
279f8     10 00 90 3D |  if_ae	jmp	#LR__3775
279fc                 | LR__3771
279fc                 | LR__3772
279fc                 | LR__3773
279fc     55 A9 02 FD | 	qmul	local02, local03
27a00     18 AA 62 FD | 	getqx	local03
27a04     56 AB 02 F1 | 	add	local03, local04
27a08     70 FF 9F FD | 	jmp	#LR__3767
27a0c                 | LR__3774
27a0c                 | LR__3775
27a0c     00 A8 0E F2 | 	cmp	local02, #0 wz
27a10     64 00 90 5D |  if_ne	jmp	#LR__3781
27a14     78 B2 0E F2 | 	cmp	local07, #120 wz
27a18     68 B2 0E 52 |  if_ne	cmp	local07, #104 wz
27a1c     58 B2 0E 52 |  if_ne	cmp	local07, #88 wz
27a20     48 B2 0E 52 |  if_ne	cmp	local07, #72 wz
27a24     14 00 90 5D |  if_ne	jmp	#LR__3776
27a28     53 93 02 F6 | 	mov	arg01, local01
27a2c     10 94 06 F6 | 	mov	arg02, #16
27a30     C4 FE BF FD | 	call	#__system____builtin_atoi
27a34     3D AB 02 F6 | 	mov	local03, result1
27a38     3C 00 90 FD | 	jmp	#LR__3780
27a3c                 | LR__3776
27a3c     62 B2 0E F2 | 	cmp	local07, #98 wz
27a40     42 B2 0E 52 |  if_ne	cmp	local07, #66 wz
27a44     14 00 90 5D |  if_ne	jmp	#LR__3777
27a48     53 93 02 F6 | 	mov	arg01, local01
27a4c     02 94 06 F6 | 	mov	arg02, #2
27a50     A4 FE BF FD | 	call	#__system____builtin_atoi
27a54     3D AB 02 F6 | 	mov	local03, result1
27a58     1C 00 90 FD | 	jmp	#LR__3779
27a5c                 | LR__3777
27a5c     6F B2 0E F2 | 	cmp	local07, #111 wz
27a60     4F B2 0E 52 |  if_ne	cmp	local07, #79 wz
27a64     10 00 90 5D |  if_ne	jmp	#LR__3778
27a68     53 93 02 F6 | 	mov	arg01, local01
27a6c     08 94 06 F6 | 	mov	arg02, #8
27a70     84 FE BF FD | 	call	#__system____builtin_atoi
27a74     3D AB 02 F6 | 	mov	local03, result1
27a78                 | LR__3778
27a78                 | LR__3779
27a78                 | LR__3780
27a78                 | LR__3781
27a78     00 AE 0E F2 | 	cmp	local05, #0 wz
27a7c     55 AB 62 56 |  if_ne	neg	local03, local03
27a80     55 7B 02 F6 | 	mov	result1, local03
27a84     E7 F0 03 F6 | 	mov	ptra, fp
27a88     F2 00 A0 FD | 	call	#popregs_
27a8c                 | __system____builtin_atoi_ret
27a8c     2D 00 64 FD | 	ret
27a90                 | 
27a90                 | __system____builtin_atof
27a90     07 CA 05 F6 | 	mov	COUNT_, #7
27a94     E8 00 A0 FD | 	call	#pushregs_
27a98     49 A7 02 F6 | 	mov	local01, arg01
27a9c     00 A8 06 F6 | 	mov	local02, #0
27aa0     00 AA 06 F6 | 	mov	local03, #0
27aa4     00 AC 06 F6 | 	mov	local04, #0
27aa8     00 AE 06 F6 | 	mov	local05, #0
27aac     D7 08 48 FB | 	callpa	#(@LR__3791-@LR__3790)>>2,fcache_load_ptr_
27ab0                 | LR__3790
27ab0     53 97 C2 FA | 	rdbyte	arg03, local01
27ab4     20 96 0E F2 | 	cmp	arg03, #32 wz
27ab8     01 A6 06 A1 |  if_e	add	local01, #1
27abc     F0 FF 9F AD |  if_e	jmp	#LR__3790
27ac0                 | LR__3791
27ac0     53 B1 C2 FA | 	rdbyte	local06, local01
27ac4                 | LR__3792
27ac4     2B B0 0E F2 | 	cmp	local06, #43 wz
27ac8     2D B0 0E 52 |  if_ne	cmp	local06, #45 wz
27acc     14 00 90 5D |  if_ne	jmp	#LR__3793
27ad0     2D B0 0E F2 | 	cmp	local06, #45 wz
27ad4     1F AC E6 A4 |  if_e	bitnot	local04, #31
27ad8     01 A6 06 F1 | 	add	local01, #1
27adc     53 B1 C2 FA | 	rdbyte	local06, local01
27ae0     E0 FF 9F FD | 	jmp	#LR__3792
27ae4                 | LR__3793
27ae4                 | LR__3794
27ae4     D7 08 48 FB | 	callpa	#(@LR__3796-@LR__3795)>>2,fcache_load_ptr_
27ae8                 | LR__3795
27ae8     53 B1 C2 FA | 	rdbyte	local06, local01
27aec     5F B0 0E F2 | 	cmp	local06, #95 wz
27af0     01 A6 06 F1 | 	add	local01, #1
27af4     F0 FF 9F AD |  if_e	jmp	#LR__3795
27af8                 | LR__3796
27af8     00 B0 0E F2 | 	cmp	local06, #0 wz
27afc     5C 00 90 AD |  if_e	jmp	#LR__3798
27b00     30 B0 56 F2 | 	cmps	local06, #48 wc
27b04     44 00 90 CD |  if_b	jmp	#LR__3797
27b08     3A B0 56 F2 | 	cmps	local06, #58 wc
27b0c     3C 00 90 3D |  if_ae	jmp	#LR__3797
27b10     54 93 02 F6 | 	mov	arg01, local02
27b14     00 90 20 FF 
27b18     00 94 06 F6 | 	mov	arg02, ##1092616192
27b1c     54 F7 BF FD | 	call	#__system___float_mul
27b20     3D A9 02 F6 | 	mov	local02, result1
27b24     30 B0 86 F1 | 	sub	local06, #48
27b28     58 93 02 F6 | 	mov	arg01, local06
27b2c     40 F3 BF FD | 	call	#__system___float_fromuns
27b30     3D 95 02 F6 | 	mov	arg02, result1
27b34     54 93 02 F6 | 	mov	arg01, local02
27b38     68 F3 BF FD | 	call	#__system___float_add
27b3c     3D A9 02 F6 | 	mov	local02, result1
27b40     00 AE 0E F2 | 	cmp	local05, #0 wz
27b44     01 AA 86 51 |  if_ne	sub	local03, #1
27b48     98 FF 9F FD | 	jmp	#LR__3794
27b4c                 | LR__3797
27b4c     2E B0 0E F2 | 	cmp	local06, #46 wz
27b50     00 AE 0E A2 |  if_e	cmp	local05, #0 wz
27b54     01 AE 06 A6 |  if_e	mov	local05, #1
27b58     88 FF 9F AD |  if_e	jmp	#LR__3794
27b5c                 | LR__3798
27b5c     45 B0 0E F2 | 	cmp	local06, #69 wz
27b60     65 B0 0E 52 |  if_ne	cmp	local06, #101 wz
27b64     18 00 90 5D |  if_ne	jmp	#LR__3799
27b68     53 93 02 F6 | 	mov	arg01, local01
27b6c     00 94 06 F6 | 	mov	arg02, #0
27b70     84 FD BF FD | 	call	#__system____builtin_atoi
27b74     55 7B 02 F1 | 	add	result1, local03
27b78     3D B3 02 F6 | 	mov	local07, result1
27b7c     04 00 90 FD | 	jmp	#LR__3800
27b80                 | LR__3799
27b80     55 B3 02 F6 | 	mov	local07, local03
27b84                 | LR__3800
27b84     59 97 02 F6 | 	mov	arg03, local07
27b88     54 93 02 F6 | 	mov	arg01, local02
27b8c     00 90 20 FF 
27b90     00 94 06 F6 | 	mov	arg02, ##1092616192
27b94     F4 06 B0 FD | 	call	#__system___float_pow_n
27b98     56 7B 62 F5 | 	xor	result1, local04
27b9c     E7 F0 03 F6 | 	mov	ptra, fp
27ba0     F2 00 A0 FD | 	call	#popregs_
27ba4                 | __system____builtin_atof_ret
27ba4     2D 00 64 FD | 	ret
27ba8                 | 
27ba8                 | __system____builtin_ilogb
27ba8     F8 FB BF FD | 	call	#__system___float_Unpack
27bac     00 7E 0E F2 | 	cmp	result3, #0 wz
27bb0     00 00 40 AF 
27bb4     01 7A 06 A6 |  if_e	mov	result1, ##-2147483647
27bb8     24 00 90 AD |  if_e	jmp	#LR__3811
27bbc     80 7C 0E F2 | 	cmp	result2, #128 wz
27bc0     18 00 90 5D |  if_ne	jmp	#LR__3810
27bc4     00 00 10 FF 
27bc8     00 7E 0E F2 | 	cmp	result3, ##536870912 wz
27bcc     1E 7A CE A9 |  if_e	bmask	result1, #30
27bd0     0C 00 90 AD |  if_e	jmp	#LR__3811
27bd4     1F 7A C6 F9 | 	decod	result1, #31
27bd8     04 00 90 FD | 	jmp	#LR__3811
27bdc                 | LR__3810
27bdc     3E 7B 02 F6 | 	mov	result1, result2
27be0                 | LR__3811
27be0                 | __system____builtin_ilogb_ret
27be0     2D 00 64 FD | 	ret
27be4                 | 
27be4                 | __system____builtin_sinf
27be4     03 CA 05 F6 | 	mov	COUNT_, #3
27be8     E8 00 A0 FD | 	call	#pushregs_
27bec     49 A7 02 F6 | 	mov	local01, arg01
27bf0     87 64 20 FF 
27bf4     DB 95 06 F6 | 	mov	arg02, ##1086918619
27bf8     7C F8 BF FD | 	call	#__system___float_div
27bfc     3D 93 02 F6 | 	mov	arg01, result1
27c00     00 94 06 F6 | 	mov	arg02, #0
27c04     34 FB BF FD | 	call	#__system___float_tointeger
27c08     3D 97 0A F6 | 	mov	arg03, result1 wz
27c0c     44 00 90 AD |  if_e	jmp	#LR__3820
27c10     4B 93 52 F6 | 	abs	arg01, arg03 wc
27c14     1F A8 C6 C9 |  if_b	decod	local02, #31
27c18     00 A8 06 36 |  if_ae	mov	local02, #0
27c1c     50 F2 BF FD | 	call	#__system___float_fromuns
27c20     54 7B 62 F5 | 	xor	result1, local02
27c24     3D 93 02 F6 | 	mov	arg01, result1
27c28     1E 94 C6 F9 | 	decod	arg02, #30
27c2c     44 F6 BF FD | 	call	#__system___float_mul
27c30     3D 93 02 F6 | 	mov	arg01, result1
27c34     87 24 20 FF 
27c38     DB 95 06 F6 | 	mov	arg02, ##1078530011
27c3c     34 F6 BF FD | 	call	#__system___float_mul
27c40     3D 95 02 F6 | 	mov	arg02, result1
27c44     53 93 02 F6 | 	mov	arg01, local01
27c48     1F 94 E6 F4 | 	bitnot	arg02, #31
27c4c     54 F2 BF FD | 	call	#__system___float_add
27c50     3D A7 02 F6 | 	mov	local01, result1
27c54                 | LR__3820
27c54     53 93 02 F6 | 	mov	arg01, local01
27c58     66 E6 1E FF 
27c5c     CD 94 06 F6 | 	mov	arg02, ##1036831949
27c60     01 96 06 F6 | 	mov	arg03, #1
27c64     40 FA BF FD | 	call	#__system___float_cmp
27c68     00 7A 56 F2 | 	cmps	result1, #0 wc
27c6c     5C 00 90 3D |  if_ae	jmp	#LR__3821
27c70     53 93 02 F6 | 	mov	arg01, local01
27c74     66 E6 5E FF 
27c78     CD 94 06 F6 | 	mov	arg02, ##-1110651699
27c7c     01 96 66 F6 | 	neg	arg03, #1
27c80     24 FA BF FD | 	call	#__system___float_cmp
27c84     01 7A 56 F2 | 	cmps	result1, #1 wc
27c88     40 00 90 CD |  if_b	jmp	#LR__3821
27c8c     53 93 02 F6 | 	mov	arg01, local01
27c90     53 95 02 F6 | 	mov	arg02, local01
27c94     DC F5 BF FD | 	call	#__system___float_mul
27c98     3D 93 02 F6 | 	mov	arg01, result1
27c9c     53 95 02 F6 | 	mov	arg02, local01
27ca0     D0 F5 BF FD | 	call	#__system___float_mul
27ca4     3D 93 02 F6 | 	mov	arg01, result1
27ca8     00 60 20 FF 
27cac     00 94 06 F6 | 	mov	arg02, ##1086324736
27cb0     C4 F7 BF FD | 	call	#__system___float_div
27cb4     3D 95 02 F6 | 	mov	arg02, result1
27cb8     53 93 02 F6 | 	mov	arg01, local01
27cbc     1F 94 E6 F4 | 	bitnot	arg02, #31
27cc0     E0 F1 BF FD | 	call	#__system___float_add
27cc4     3D AB 02 F6 | 	mov	local03, result1
27cc8     54 00 90 FD | 	jmp	#LR__3822
27ccc                 | LR__3821
27ccc     53 93 02 F6 | 	mov	arg01, local01
27cd0     7C 91 26 FF 
27cd4     83 95 06 F6 | 	mov	arg02, ##1294137731
27cd8     98 F5 BF FD | 	call	#__system___float_mul
27cdc     3D 93 02 F6 | 	mov	arg01, result1
27ce0     00 94 06 F6 | 	mov	arg02, #0
27ce4     54 FA BF FD | 	call	#__system___float_tointeger
27ce8     02 7A 66 F0 | 	shl	result1, #2
27cec     00 00 A0 FF 
27cf0     3D 01 48 FD | 	qrotate	##1073741824, result1
27cf4     19 92 62 FD | 	getqy	arg01
27cf8     49 93 52 F6 | 	abs	arg01, arg01 wc
27cfc     1F A8 C6 C9 |  if_b	decod	local02, #31
27d00     00 A8 06 36 |  if_ae	mov	local02, #0
27d04     68 F1 BF FD | 	call	#__system___float_fromuns
27d08     54 7B 62 F5 | 	xor	result1, local02
27d0c     3D 93 02 F6 | 	mov	arg01, result1
27d10     00 40 27 FF 
27d14     00 94 06 F6 | 	mov	arg02, ##1317011456
27d18     5C F7 BF FD | 	call	#__system___float_div
27d1c     3D AB 02 F6 | 	mov	local03, result1
27d20                 | LR__3822
27d20     55 7B 02 F6 | 	mov	result1, local03
27d24     E7 F0 03 F6 | 	mov	ptra, fp
27d28     F2 00 A0 FD | 	call	#popregs_
27d2c                 | __system____builtin_sinf_ret
27d2c     2D 00 64 FD | 	ret
27d30                 | 
27d30                 | __system____builtin_tanf
27d30     02 CA 05 F6 | 	mov	COUNT_, #2
27d34     E8 00 A0 FD | 	call	#pushregs_
27d38     49 A7 02 F6 | 	mov	local01, arg01
27d3c     A4 FE BF FD | 	call	#__system____builtin_sinf
27d40     3D A9 02 F6 | 	mov	local02, result1
27d44     53 95 02 F6 | 	mov	arg02, local01
27d48     87 E4 1F FF 
27d4c     DB 93 06 F6 | 	mov	arg01, ##1070141403
27d50     1F 94 E6 F4 | 	bitnot	arg02, #31
27d54     4C F1 BF FD | 	call	#__system___float_add
27d58     3D 93 02 F6 | 	mov	arg01, result1
27d5c     84 FE BF FD | 	call	#__system____builtin_sinf
27d60     3D 95 02 F6 | 	mov	arg02, result1
27d64     54 93 02 F6 | 	mov	arg01, local02
27d68     0C F7 BF FD | 	call	#__system___float_div
27d6c     E7 F0 03 F6 | 	mov	ptra, fp
27d70     F2 00 A0 FD | 	call	#popregs_
27d74                 | __system____builtin_tanf_ret
27d74     2D 00 64 FD | 	ret
27d78                 | 
27d78                 | __system____builtin_asinf
27d78     01 CA 05 F6 | 	mov	COUNT_, #1
27d7c     E8 00 A0 FD | 	call	#pushregs_
27d80     49 A7 02 F6 | 	mov	local01, arg01
27d84     53 95 02 F6 | 	mov	arg02, local01
27d88     53 93 02 F6 | 	mov	arg01, local01
27d8c     E4 F4 BF FD | 	call	#__system___float_mul
27d90     3D 95 02 F6 | 	mov	arg02, result1
27d94     00 C0 1F FF 
27d98     00 92 06 F6 | 	mov	arg01, ##1065353216
27d9c     1F 94 E6 F4 | 	bitnot	arg02, #31
27da0     00 F1 BF FD | 	call	#__system___float_add
27da4     3D 93 02 F6 | 	mov	arg01, result1
27da8     F0 F3 BF FD | 	call	#__system___float_sqrt
27dac     3D 95 02 F6 | 	mov	arg02, result1
27db0     53 93 02 F6 | 	mov	arg01, local01
27db4     58 00 B0 FD | 	call	#__system____builtin_atan2f
27db8     E7 F0 03 F6 | 	mov	ptra, fp
27dbc     F2 00 A0 FD | 	call	#popregs_
27dc0                 | __system____builtin_asinf_ret
27dc0     2D 00 64 FD | 	ret
27dc4                 | 
27dc4                 | __system____builtin_acosf
27dc4     01 CA 05 F6 | 	mov	COUNT_, #1
27dc8     E8 00 A0 FD | 	call	#pushregs_
27dcc     49 A7 02 F6 | 	mov	local01, arg01
27dd0     53 95 02 F6 | 	mov	arg02, local01
27dd4     53 93 02 F6 | 	mov	arg01, local01
27dd8     98 F4 BF FD | 	call	#__system___float_mul
27ddc     3D 95 02 F6 | 	mov	arg02, result1
27de0     00 C0 1F FF 
27de4     00 92 06 F6 | 	mov	arg01, ##1065353216
27de8     1F 94 E6 F4 | 	bitnot	arg02, #31
27dec     B4 F0 BF FD | 	call	#__system___float_add
27df0     3D 93 02 F6 | 	mov	arg01, result1
27df4     A4 F3 BF FD | 	call	#__system___float_sqrt
27df8     3D 93 02 F6 | 	mov	arg01, result1
27dfc     53 95 02 F6 | 	mov	arg02, local01
27e00     0C 00 B0 FD | 	call	#__system____builtin_atan2f
27e04     E7 F0 03 F6 | 	mov	ptra, fp
27e08     F2 00 A0 FD | 	call	#popregs_
27e0c                 | __system____builtin_acosf_ret
27e0c     2D 00 64 FD | 	ret
27e10                 | 
27e10                 | __system____builtin_atan2f
27e10     04 CA 05 F6 | 	mov	COUNT_, #4
27e14     E8 00 A0 FD | 	call	#pushregs_
27e18     49 A7 02 F6 | 	mov	local01, arg01
27e1c     4A A9 02 F6 | 	mov	local02, arg02
27e20     53 93 02 F6 | 	mov	arg01, local01
27e24     00 94 06 F6 | 	mov	arg02, #0
27e28     01 96 06 F6 | 	mov	arg03, #1
27e2c     78 F8 BF FD | 	call	#__system___float_cmp
27e30     00 7A 0E F2 | 	cmp	result1, #0 wz
27e34     28 00 90 5D |  if_ne	jmp	#LR__3830
27e38     54 93 02 F6 | 	mov	arg01, local02
27e3c     00 94 06 F6 | 	mov	arg02, #0
27e40     01 96 06 F6 | 	mov	arg03, #1
27e44     60 F8 BF FD | 	call	#__system___float_cmp
27e48     00 7A 56 F2 | 	cmps	result1, #0 wc
27e4c     87 24 60 CF 
27e50     DB 7B 06 C6 |  if_b	mov	result1, ##-1068953637
27e54     DC 00 90 CD |  if_b	jmp	#LR__3831
27e58     00 7A 06 F6 | 	mov	result1, #0
27e5c     D4 00 90 FD | 	jmp	#LR__3831
27e60                 | LR__3830
27e60     54 93 02 F6 | 	mov	arg01, local02
27e64     54 95 02 F6 | 	mov	arg02, local02
27e68     08 F4 BF FD | 	call	#__system___float_mul
27e6c     3D AB 02 F6 | 	mov	local03, result1
27e70     53 93 02 F6 | 	mov	arg01, local01
27e74     53 95 02 F6 | 	mov	arg02, local01
27e78     F8 F3 BF FD | 	call	#__system___float_mul
27e7c     3D 95 02 F6 | 	mov	arg02, result1
27e80     55 93 02 F6 | 	mov	arg01, local03
27e84     1C F0 BF FD | 	call	#__system___float_add
27e88     3D 93 02 F6 | 	mov	arg01, result1
27e8c     0C F3 BF FD | 	call	#__system___float_sqrt
27e90     3D AB 02 F6 | 	mov	local03, result1
27e94     54 93 02 F6 | 	mov	arg01, local02
27e98     55 95 02 F6 | 	mov	arg02, local03
27e9c     D8 F5 BF FD | 	call	#__system___float_div
27ea0     3D A9 02 F6 | 	mov	local02, result1
27ea4     53 93 02 F6 | 	mov	arg01, local01
27ea8     55 95 02 F6 | 	mov	arg02, local03
27eac     C8 F5 BF FD | 	call	#__system___float_div
27eb0     3D A7 02 F6 | 	mov	local01, result1
27eb4     00 40 27 FF 
27eb8     00 92 06 F6 | 	mov	arg01, ##1317011456
27ebc     54 95 02 F6 | 	mov	arg02, local02
27ec0     B0 F3 BF FD | 	call	#__system___float_mul
27ec4     3D 93 02 F6 | 	mov	arg01, result1
27ec8     00 94 06 F6 | 	mov	arg02, #0
27ecc     6C F8 BF FD | 	call	#__system___float_tointeger
27ed0     3D AB 02 F6 | 	mov	local03, result1
27ed4     00 40 27 FF 
27ed8     00 92 06 F6 | 	mov	arg01, ##1317011456
27edc     53 95 02 F6 | 	mov	arg02, local01
27ee0     90 F3 BF FD | 	call	#__system___float_mul
27ee4     3D 93 02 F6 | 	mov	arg01, result1
27ee8     00 94 06 F6 | 	mov	arg02, #0
27eec     4C F8 BF FD | 	call	#__system___float_tointeger
27ef0     3D AB 52 FD | 	qvector	local03, result1
27ef4     87 24 20 FF 
27ef8     DB AB 06 F6 | 	mov	local03, ##1078530011
27efc     19 92 62 FD | 	getqy	arg01
27f00     01 92 C6 F0 | 	sar	arg01, #1
27f04     49 93 52 F6 | 	abs	arg01, arg01 wc
27f08     1F AC C6 C9 |  if_b	decod	local04, #31
27f0c     00 AC 06 36 |  if_ae	mov	local04, #0
27f10     5C EF BF FD | 	call	#__system___float_fromuns
27f14     56 7B 62 F5 | 	xor	result1, local04
27f18     3D 93 02 F6 | 	mov	arg01, result1
27f1c     00 40 27 FF 
27f20     00 94 06 F6 | 	mov	arg02, ##1317011456
27f24     50 F5 BF FD | 	call	#__system___float_div
27f28     3D 95 02 F6 | 	mov	arg02, result1
27f2c     55 93 02 F6 | 	mov	arg01, local03
27f30     40 F3 BF FD | 	call	#__system___float_mul
27f34                 | LR__3831
27f34     E7 F0 03 F6 | 	mov	ptra, fp
27f38     F2 00 A0 FD | 	call	#popregs_
27f3c                 | __system____builtin_atan2f_ret
27f3c     2D 00 64 FD | 	ret
27f40                 | 
27f40                 | __system____builtin_exp2f
27f40     04 CA 05 F6 | 	mov	COUNT_, #4
27f44     E8 00 A0 FD | 	call	#pushregs_
27f48     49 A7 02 F6 | 	mov	local01, arg01
27f4c     00 7F 21 FF 
27f50     00 94 06 F6 | 	mov	arg02, ##1123942400
27f54     01 96 66 F6 | 	neg	arg03, #1
27f58     4C F7 BF FD | 	call	#__system___float_cmp
27f5c     00 7A 56 F2 | 	cmps	result1, #0 wc
27f60     00 C0 3F 3F 
27f64     00 7A 06 36 |  if_ae	mov	result1, ##2139095040
27f68     DC 00 90 3D |  if_ae	jmp	#LR__3841
27f6c     53 93 02 F6 | 	mov	arg01, local01
27f70     00 7F 61 FF 
27f74     00 94 06 F6 | 	mov	arg02, ##-1023541248
27f78     01 96 06 F6 | 	mov	arg03, #1
27f7c     28 F7 BF FD | 	call	#__system___float_cmp
27f80     00 7A 56 F2 | 	cmps	result1, #0 wc
27f84     00 7A 06 C6 |  if_b	mov	result1, #0
27f88     BC 00 90 CD |  if_b	jmp	#LR__3841
27f8c     53 93 02 F6 | 	mov	arg01, local01
27f90     00 94 06 F6 | 	mov	arg02, #0
27f94     A4 F7 BF FD | 	call	#__system___float_tointeger
27f98     3D A9 02 F6 | 	mov	local02, result1
27f9c     54 93 52 F6 | 	abs	arg01, local02 wc
27fa0     1F AA C6 C9 |  if_b	decod	local03, #31
27fa4     00 AA 06 36 |  if_ae	mov	local03, #0
27fa8     C4 EE BF FD | 	call	#__system___float_fromuns
27fac     55 7B 62 F5 | 	xor	result1, local03
27fb0     3D 95 02 F6 | 	mov	arg02, result1
27fb4     53 93 02 F6 | 	mov	arg01, local01
27fb8     1F 94 E6 F4 | 	bitnot	arg02, #31
27fbc     E4 EE BF FD | 	call	#__system___float_add
27fc0     3D AD 02 F6 | 	mov	local04, result1
27fc4     56 93 02 F6 | 	mov	arg01, local04
27fc8     00 94 06 F6 | 	mov	arg02, #0
27fcc     01 96 06 F6 | 	mov	arg03, #1
27fd0     D4 F6 BF FD | 	call	#__system___float_cmp
27fd4     00 7A 56 F2 | 	cmps	result1, #0 wc
27fd8     18 00 90 3D |  if_ae	jmp	#LR__3840
27fdc     56 93 02 F6 | 	mov	arg01, local04
27fe0     00 C0 1F FF 
27fe4     00 94 06 F6 | 	mov	arg02, ##1065353216
27fe8     B8 EE BF FD | 	call	#__system___float_add
27fec     3D AD 02 F6 | 	mov	local04, result1
27ff0     01 A8 86 F1 | 	sub	local02, #1
27ff4                 | LR__3840
27ff4     7F A8 06 F1 | 	add	local02, #127
27ff8     17 A8 66 F0 | 	shl	local02, #23
27ffc     56 93 02 F6 | 	mov	arg01, local04
28000     00 80 26 FF 
28004     00 94 06 F6 | 	mov	arg02, ##1291845632
28008     68 F2 BF FD | 	call	#__system___float_mul
2800c     3D 93 02 F6 | 	mov	arg01, result1
28010     00 94 06 F6 | 	mov	arg02, #0
28014     24 F7 BF FD | 	call	#__system___float_tointeger
28018     3D AD 0A F6 | 	mov	local04, result1 wz
2801c     54 7B 02 A6 |  if_e	mov	result1, local02
28020     24 00 90 AD |  if_e	jmp	#LR__3841
28024     3E AC 26 F4 | 	bith	local04, #62
28028     0F AC 62 FD | 	qexp	local04
2802c     54 93 02 F6 | 	mov	arg01, local02
28030     18 94 62 FD | 	getqx	arg02
28034     01 94 06 F1 | 	add	arg02, #1
28038     01 94 46 F0 | 	shr	arg02, #1
2803c     00 80 1F FF 
28040     00 94 06 F1 | 	add	arg02, ##1056964608
28044     2C F2 BF FD | 	call	#__system___float_mul
28048                 | LR__3841
28048     E7 F0 03 F6 | 	mov	ptra, fp
2804c     F2 00 A0 FD | 	call	#popregs_
28050                 | __system____builtin_exp2f_ret
28050     2D 00 64 FD | 	ret
28054                 | 
28054                 | __system____builtin_log2f
28054     06 CA 05 F6 | 	mov	COUNT_, #6
28058     E8 00 A0 FD | 	call	#pushregs_
2805c     49 A7 02 F6 | 	mov	local01, arg01
28060     49 A9 0A F6 | 	mov	local02, arg01 wz
28064     00 00 40 5F 
28068     00 A8 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
2806c     00 40 00 AF 
28070     00 7A 66 A6 |  if_e	neg	result1, ##8388608
28074     08 01 90 AD |  if_e	jmp	#LR__3854
28078     00 A8 56 F2 | 	cmps	local02, #0 wc
2807c     00 E0 3F CF 
28080     00 7A 06 C6 |  if_b	mov	result1, ##2143289344
28084     F8 00 90 CD |  if_b	jmp	#LR__3854
28088     53 93 02 F6 | 	mov	arg01, local01
2808c     00 90 20 FF 
28090     00 94 06 F6 | 	mov	arg02, ##1092616192
28094     01 96 06 F6 | 	mov	arg03, #1
28098     0C F6 BF FD | 	call	#__system___float_cmp
2809c     00 7A 0E F2 | 	cmp	result1, #0 wz
280a0     4D 2A 20 AF 
280a4     78 7A 06 A6 |  if_e	mov	result1, ##1079286392
280a8     D4 00 90 AD |  if_e	jmp	#LR__3854
280ac     53 93 02 F6 | 	mov	arg01, local01
280b0     FC 16 20 FF 
280b4     54 94 06 F6 | 	mov	arg02, ##1076754516
280b8     01 96 06 F6 | 	mov	arg03, #1
280bc     E8 F5 BF FD | 	call	#__system___float_cmp
280c0     00 7A 0E F2 | 	cmp	result1, #0 wz
280c4     55 DC 1F AF 
280c8     3B 7A 06 A6 |  if_e	mov	result1, ##1069066811
280cc     B0 00 90 AD |  if_e	jmp	#LR__3854
280d0     54 AB 02 F6 | 	mov	local03, local02
280d4     17 AA 46 F0 | 	shr	local03, #23
280d8     55 AB E2 F8 | 	getbyte	local03, local03, #0
280dc     17 A9 06 F4 | 	bitl	local02, #279
280e0     54 AD 02 F6 | 	mov	local04, local02
280e4     FF AA 0E F2 | 	cmp	local03, #255 wz
280e8     1C 00 90 5D |  if_ne	jmp	#LR__3850
280ec     00 AC 0E F2 | 	cmp	local04, #0 wz
280f0     00 C0 3F 5F 
280f4     00 AE 06 56 |  if_ne	mov	local05, ##2139095040
280f8     00 E0 3F AF 
280fc     00 AE 06 A6 |  if_e	mov	local05, ##2143289344
28100     57 7B 02 F6 | 	mov	result1, local05
28104     78 00 90 FD | 	jmp	#LR__3854
28108                 | LR__3850
28108     00 AA 0E F2 | 	cmp	local03, #0 wz
2810c     17 AC 26 54 |  if_ne	bith	local04, #23
28110     7F AA 86 51 |  if_ne	sub	local03, #127
28114     28 00 90 5D |  if_ne	jmp	#LR__3853
28118     00 AC 0E F2 | 	cmp	local04, #0 wz
2811c     00 40 00 AF 
28120     00 7A 66 A6 |  if_e	neg	result1, ##8388608
28124     58 00 90 AD |  if_e	jmp	#LR__3854
28128     7E AA 66 F6 | 	neg	local03, #126
2812c     D7 08 48 FB | 	callpa	#(@LR__3852-@LR__3851)>>2,fcache_load_ptr_
28130                 | LR__3851
28130     17 AC 2E F4 | 	testbn	local04, #23 wz
28134     01 AC 66 A0 |  if_e	shl	local04, #1
28138     01 AA 06 A1 |  if_e	add	local03, #1
2813c     F0 FF 9F AD |  if_e	jmp	#LR__3851
28140                 | LR__3852
28140                 | LR__3853
28140     0E AC 62 FD | 	qlog	local04
28144     01 AA 86 F1 | 	sub	local03, #1
28148     55 93 52 F6 | 	abs	arg01, local03 wc
2814c     1F B0 C6 C9 |  if_b	decod	local06, #31
28150     00 B0 06 36 |  if_ae	mov	local06, #0
28154     18 AE 62 FD | 	getqx	local05
28158     9B AE 06 F4 | 	bitl	local05, #155
2815c     08 AE 06 F1 | 	add	local05, #8
28160     04 AE 46 F0 | 	shr	local05, #4
28164     00 C0 1F FF 
28168     00 AE 06 F1 | 	add	local05, ##1065353216
2816c     00 ED BF FD | 	call	#__system___float_fromuns
28170     58 7B 62 F5 | 	xor	result1, local06
28174     3D 95 02 F6 | 	mov	arg02, result1
28178     57 93 02 F6 | 	mov	arg01, local05
2817c     24 ED BF FD | 	call	#__system___float_add
28180                 | LR__3854
28180     E7 F0 03 F6 | 	mov	ptra, fp
28184     F2 00 A0 FD | 	call	#popregs_
28188                 | __system____builtin_log2f_ret
28188     2D 00 64 FD | 	ret
2818c                 | 
2818c                 | __system____builtin_powf
2818c     04 CA 05 F6 | 	mov	COUNT_, #4
28190     E8 00 A0 FD | 	call	#pushregs_
28194     49 A7 02 F6 | 	mov	local01, arg01
28198     4A A9 02 F6 | 	mov	local02, arg02
2819c     54 93 02 F6 | 	mov	arg01, local02
281a0     00 94 06 F6 | 	mov	arg02, #0
281a4     94 F5 BF FD | 	call	#__system___float_tointeger
281a8     3D AB 02 F6 | 	mov	local03, result1
281ac     55 93 52 F6 | 	abs	arg01, local03 wc
281b0     1F AC C6 C9 |  if_b	decod	local04, #31
281b4     00 AC 06 36 |  if_ae	mov	local04, #0
281b8     B4 EC BF FD | 	call	#__system___float_fromuns
281bc     56 7B 62 F5 | 	xor	result1, local04
281c0     3D 93 02 F6 | 	mov	arg01, result1
281c4     54 95 02 F6 | 	mov	arg02, local02
281c8     01 96 06 F6 | 	mov	arg03, #1
281cc     D8 F4 BF FD | 	call	#__system___float_cmp
281d0     00 7A 0E F2 | 	cmp	result1, #0 wz
281d4     18 00 90 5D |  if_ne	jmp	#LR__3860
281d8     00 C0 1F FF 
281dc     00 92 06 F6 | 	mov	arg01, ##1065353216
281e0     53 95 02 F6 | 	mov	arg02, local01
281e4     55 97 02 F6 | 	mov	arg03, local03
281e8     A0 00 B0 FD | 	call	#__system___float_pow_n
281ec     58 00 90 FD | 	jmp	#LR__3861
281f0                 | LR__3860
281f0     53 93 02 F6 | 	mov	arg01, local01
281f4     00 94 06 F6 | 	mov	arg02, #0
281f8     01 96 06 F6 | 	mov	arg03, #1
281fc     A8 F4 BF FD | 	call	#__system___float_cmp
28200     00 7A 56 F2 | 	cmps	result1, #0 wc
28204     00 E0 3F CF 
28208     00 7A 06 C6 |  if_b	mov	result1, ##2143289344
2820c     38 00 90 CD |  if_b	jmp	#LR__3861
28210     53 93 02 F6 | 	mov	arg01, local01
28214     00 94 06 F6 | 	mov	arg02, #0
28218     01 96 06 F6 | 	mov	arg03, #1
2821c     88 F4 BF FD | 	call	#__system___float_cmp
28220     00 7A 0E F2 | 	cmp	result1, #0 wz
28224     00 7A 06 A6 |  if_e	mov	result1, #0
28228     1C 00 90 AD |  if_e	jmp	#LR__3861
2822c     53 93 02 F6 | 	mov	arg01, local01
28230     20 FE BF FD | 	call	#__system____builtin_log2f
28234     3D 93 02 F6 | 	mov	arg01, result1
28238     54 95 02 F6 | 	mov	arg02, local02
2823c     34 F0 BF FD | 	call	#__system___float_mul
28240     3D 93 02 F6 | 	mov	arg01, result1
28244     F8 FC BF FD | 	call	#__system____builtin_exp2f
28248                 | LR__3861
28248     E7 F0 03 F6 | 	mov	ptra, fp
2824c     F2 00 A0 FD | 	call	#popregs_
28250                 | __system____builtin_powf_ret
28250     2D 00 64 FD | 	ret
28254                 | 
28254                 | __system____builtin_logbase
28254     02 CA 05 F6 | 	mov	COUNT_, #2
28258     E8 00 A0 FD | 	call	#pushregs_
2825c     49 A7 02 F6 | 	mov	local01, arg01
28260     4A 93 02 F6 | 	mov	arg01, arg02
28264     EC FD BF FD | 	call	#__system____builtin_log2f
28268     3D A9 02 F6 | 	mov	local02, result1
2826c     53 93 02 F6 | 	mov	arg01, local01
28270     E0 FD BF FD | 	call	#__system____builtin_log2f
28274     3D 95 02 F6 | 	mov	arg02, result1
28278     54 93 02 F6 | 	mov	arg01, local02
2827c     F8 F1 BF FD | 	call	#__system___float_div
28280     E7 F0 03 F6 | 	mov	ptra, fp
28284     F2 00 A0 FD | 	call	#popregs_
28288                 | __system____builtin_logbase_ret
28288     2D 00 64 FD | 	ret
2828c                 | 
2828c                 | __system___float_pow_n
2828c     05 CA 05 F6 | 	mov	COUNT_, #5
28290     E8 00 A0 FD | 	call	#pushregs_
28294     49 A7 02 F6 | 	mov	local01, arg01
28298     4A A9 02 F6 | 	mov	local02, arg02
2829c     4B AB 02 F6 | 	mov	local03, arg03
282a0     00 AA 56 F2 | 	cmps	local03, #0 wc
282a4     18 00 90 3D |  if_ae	jmp	#LR__3870
282a8     01 AC 06 F6 | 	mov	local04, #1
282ac     55 AB 62 F6 | 	neg	local03, local03
282b0     00 AA 56 F2 | 	cmps	local03, #0 wc
282b4     00 7A 06 C6 |  if_b	mov	result1, #0
282b8     94 00 90 CD |  if_b	jmp	#LR__3878
282bc     04 00 90 FD | 	jmp	#LR__3871
282c0                 | LR__3870
282c0     00 AC 06 F6 | 	mov	local04, #0
282c4                 | LR__3871
282c4     00 C0 1F FF 
282c8     00 AE 06 F6 | 	mov	local05, ##1065353216
282cc                 | LR__3872
282cc     01 AA 56 F2 | 	cmps	local03, #1 wc
282d0     30 00 90 CD |  if_b	jmp	#LR__3874
282d4     01 AA CE F7 | 	test	local03, #1 wz
282d8     10 00 90 AD |  if_e	jmp	#LR__3873
282dc     57 93 02 F6 | 	mov	arg01, local05
282e0     54 95 02 F6 | 	mov	arg02, local02
282e4     8C EF BF FD | 	call	#__system___float_mul
282e8     3D AF 02 F6 | 	mov	local05, result1
282ec                 | LR__3873
282ec     01 AA C6 F0 | 	sar	local03, #1
282f0     54 93 02 F6 | 	mov	arg01, local02
282f4     54 95 02 F6 | 	mov	arg02, local02
282f8     78 EF BF FD | 	call	#__system___float_mul
282fc     3D A9 02 F6 | 	mov	local02, result1
28300     C8 FF 9F FD | 	jmp	#LR__3872
28304                 | LR__3874
28304     00 AC 0E F2 | 	cmp	local04, #0 wz
28308     14 00 90 AD |  if_e	jmp	#LR__3875
2830c     53 93 02 F6 | 	mov	arg01, local01
28310     57 95 02 F6 | 	mov	arg02, local05
28314     60 F1 BF FD | 	call	#__system___float_div
28318     3D AF 02 F6 | 	mov	local05, result1
2831c     2C 00 90 FD | 	jmp	#LR__3877
28320                 | LR__3875
28320     53 93 02 F6 | 	mov	arg01, local01
28324     00 C0 1F FF 
28328     00 94 06 F6 | 	mov	arg02, ##1065353216
2832c     01 96 06 F6 | 	mov	arg03, #1
28330     74 F3 BF FD | 	call	#__system___float_cmp
28334     00 7A 0E F2 | 	cmp	result1, #0 wz
28338     10 00 90 AD |  if_e	jmp	#LR__3876
2833c     53 93 02 F6 | 	mov	arg01, local01
28340     57 95 02 F6 | 	mov	arg02, local05
28344     2C EF BF FD | 	call	#__system___float_mul
28348     3D AF 02 F6 | 	mov	local05, result1
2834c                 | LR__3876
2834c                 | LR__3877
2834c     57 7B 02 F6 | 	mov	result1, local05
28350                 | LR__3878
28350     E7 F0 03 F6 | 	mov	ptra, fp
28354     F2 00 A0 FD | 	call	#popregs_
28358                 | __system___float_pow_n_ret
28358     2D 00 64 FD | 	ret
2835c                 | 
2835c                 | __system___gc_ptrs
2835c     2C 81 02 F6 | 	mov	_var01, __heap_ptr
28360     40 83 02 F6 | 	mov	_var02, _var01
28364     BB 00 00 FF 
28368     F8 82 06 F1 | 	add	_var02, ##95992
2836c     40 7D 0A FB | 	rdlong	result2, _var01 wz
28370     74 00 90 5D |  if_ne	jmp	#LR__3880
28374     41 7D 02 F6 | 	mov	result2, _var02
28378     40 7D 82 F1 | 	sub	result2, _var01
2837c     40 03 58 FC | 	wrword	#1, _var01
28380     40 7B 02 F6 | 	mov	result1, _var01
28384     02 7A 06 F1 | 	add	result1, #2
28388     36 00 80 FF 
2838c     3D 21 59 FC | 	wrword	##27792, result1
28390     40 7B 02 F6 | 	mov	result1, _var01
28394     04 7A 06 F1 | 	add	result1, #4
28398     3D 01 58 FC | 	wrword	#0, result1
2839c     40 7B 02 F6 | 	mov	result1, _var01
283a0     06 7A 06 F1 | 	add	result1, #6
283a4     3D 03 58 FC | 	wrword	#1, result1
283a8     10 80 06 F1 | 	add	_var01, #16
283ac     3E 7D 52 F6 | 	abs	result2, result2 wc
283b0     04 7C 46 F0 | 	shr	result2, #4
283b4     3E 7D 82 F6 | 	negc	result2, result2
283b8     40 7D 52 FC | 	wrword	result2, _var01
283bc     40 7D 02 F6 | 	mov	result2, _var01
283c0     02 7C 06 F1 | 	add	result2, #2
283c4     36 00 80 FF 
283c8     3E 1F 59 FC | 	wrword	##27791, result2
283cc     40 7D 02 F6 | 	mov	result2, _var01
283d0     04 7C 06 F1 | 	add	result2, #4
283d4     3E 01 58 FC | 	wrword	#0, result2
283d8     40 7D 02 F6 | 	mov	result2, _var01
283dc     06 7C 06 F1 | 	add	result2, #6
283e0     3E 01 58 FC | 	wrword	#0, result2
283e4     10 80 86 F1 | 	sub	_var01, #16
283e8                 | LR__3880
283e8     40 7B 02 F6 | 	mov	result1, _var01
283ec     41 7D 02 F6 | 	mov	result2, _var02
283f0                 | __system___gc_ptrs_ret
283f0     2D 00 64 FD | 	ret
283f4                 | 
283f4                 | __system___gc_tryalloc
283f4     0B CA 05 F6 | 	mov	COUNT_, #11
283f8     E8 00 A0 FD | 	call	#pushregs_
283fc     49 A7 02 F6 | 	mov	local01, arg01
28400     4A A9 02 F6 | 	mov	local02, arg02
28404     54 FF BF FD | 	call	#__system___gc_ptrs
28408     3D AB 02 F6 | 	mov	local03, result1
2840c     3E AD 02 F6 | 	mov	local04, result2
28410     55 AF 02 F6 | 	mov	local05, local03
28414     00 B0 06 F6 | 	mov	local06, #0
28418     D7 1E 48 FB | 	callpa	#(@LR__3891-@LR__3890)>>2,fcache_load_ptr_
2841c                 | LR__3890
2841c     57 B3 02 F6 | 	mov	local07, local05
28420     06 AE 06 F1 | 	add	local05, #6
28424     57 95 EA FA | 	rdword	arg02, local05 wz
28428     55 93 02 F6 | 	mov	arg01, local03
2842c     00 7A 06 A6 |  if_e	mov	result1, #0
28430     04 94 66 50 |  if_ne	shl	arg02, #4
28434     4A 93 02 51 |  if_ne	add	arg01, arg02
28438     49 7B 02 56 |  if_ne	mov	result1, arg01
2843c     3D AF 0A F6 | 	mov	local05, result1 wz
28440     57 B1 E2 5A |  if_ne	rdword	local06, local05
28444     00 AE 0E F2 | 	cmp	local05, #0 wz
28448     56 AF 52 52 |  if_ne	cmps	local05, local04 wc
2844c     08 00 90 1D |  if_a	jmp	#LR__3892
28450     58 A7 5A 52 |  if_ne	cmps	local01, local06 wcz
28454     C4 FF 9F 1D |  if_a	jmp	#LR__3890
28458                 | LR__3891
28458                 | LR__3892
28458     00 AE 0E F2 | 	cmp	local05, #0 wz
2845c     57 7B 02 A6 |  if_e	mov	result1, local05
28460     3C 01 90 AD |  if_e	jmp	#LR__3895
28464     57 7D 02 F6 | 	mov	result2, local05
28468     06 7C 06 F1 | 	add	result2, #6
2846c     3E B5 E2 FA | 	rdword	local08, result2
28470     58 A7 52 F2 | 	cmps	local01, local06 wc
28474     C0 00 90 3D |  if_ae	jmp	#LR__3894
28478     57 A7 52 FC | 	wrword	local01, local05
2847c     57 93 02 F6 | 	mov	arg01, local05
28480     53 B5 02 F6 | 	mov	local08, local01
28484     04 B4 66 F0 | 	shl	local08, #4
28488     5A 93 02 F1 | 	add	arg01, local08
2848c     53 B1 82 F1 | 	sub	local06, local01
28490     49 B1 52 FC | 	wrword	local06, arg01
28494     49 B5 02 F6 | 	mov	local08, arg01
28498     02 B4 06 F1 | 	add	local08, #2
2849c     36 00 80 FF 
284a0     5A 1F 59 FC | 	wrword	##27791, local08
284a4     57 95 0A F6 | 	mov	arg02, local05 wz
284a8     00 7A 06 A6 |  if_e	mov	result1, #0
284ac     55 95 82 51 |  if_ne	sub	arg02, local03
284b0     04 94 46 50 |  if_ne	shr	arg02, #4
284b4     4A 7B 02 56 |  if_ne	mov	result1, arg02
284b8     49 B5 02 F6 | 	mov	local08, arg01
284bc     04 B4 06 F1 | 	add	local08, #4
284c0     5A 7B 52 FC | 	wrword	result1, local08
284c4     57 B5 02 F6 | 	mov	local08, local05
284c8     06 B4 06 F1 | 	add	local08, #6
284cc     49 95 02 F6 | 	mov	arg02, arg01
284d0     5A B5 E2 FA | 	rdword	local08, local08
284d4     06 94 06 F1 | 	add	arg02, #6
284d8     4A B5 52 FC | 	wrword	local08, arg02
284dc     49 B7 02 F6 | 	mov	local09, arg01
284e0     5B 95 0A F6 | 	mov	arg02, local09 wz
284e4     00 7A 06 A6 |  if_e	mov	result1, #0
284e8     55 95 82 51 |  if_ne	sub	arg02, local03
284ec     04 94 46 50 |  if_ne	shr	arg02, #4
284f0     4A 7B 02 56 |  if_ne	mov	result1, arg02
284f4     3D B5 02 F6 | 	mov	local08, result1
284f8     49 B9 EA FA | 	rdword	local10, arg01 wz
284fc     00 7A 06 A6 |  if_e	mov	result1, #0
28500     04 B8 66 50 |  if_ne	shl	local10, #4
28504     5C 93 02 51 |  if_ne	add	arg01, local10
28508     49 7B 02 56 |  if_ne	mov	result1, arg01
2850c     3D BB 0A F6 | 	mov	local11, result1 wz
28510     24 00 90 AD |  if_e	jmp	#LR__3893
28514     56 BB 52 F2 | 	cmps	local11, local04 wc
28518     1C 00 90 3D |  if_ae	jmp	#LR__3893
2851c     5B 95 0A F6 | 	mov	arg02, local09 wz
28520     00 7A 06 A6 |  if_e	mov	result1, #0
28524     55 95 82 51 |  if_ne	sub	arg02, local03
28528     04 94 46 50 |  if_ne	shr	arg02, #4
2852c     4A 7B 02 56 |  if_ne	mov	result1, arg02
28530     04 BA 06 F1 | 	add	local11, #4
28534     5D 7B 52 FC | 	wrword	result1, local11
28538                 | LR__3893
28538                 | LR__3894
28538     06 B2 06 F1 | 	add	local07, #6
2853c     59 B5 52 FC | 	wrword	local08, local07
28540     36 00 00 FF 
28544     80 B6 06 F6 | 	mov	local09, ##27776
28548     54 B7 42 F5 | 	or	local09, local02
2854c     00 7A 06 F6 | 	mov	result1, #0
28550     01 7A 62 FD | 	cogid	result1
28554     3D B7 42 F5 | 	or	local09, result1
28558     57 BB 02 F6 | 	mov	local11, local05
2855c     02 BA 06 F1 | 	add	local11, #2
28560     5D B7 52 FC | 	wrword	local09, local11
28564     55 B7 02 F6 | 	mov	local09, local03
28568     08 B6 06 F1 | 	add	local09, #8
2856c     57 BB 02 F6 | 	mov	local11, local05
28570     5B B7 E2 FA | 	rdword	local09, local09
28574     06 BA 06 F1 | 	add	local11, #6
28578     5D B7 52 FC | 	wrword	local09, local11
2857c     57 95 0A F6 | 	mov	arg02, local05 wz
28580     00 7A 06 A6 |  if_e	mov	result1, #0
28584     55 95 82 51 |  if_ne	sub	arg02, local03
28588     04 94 46 50 |  if_ne	shr	arg02, #4
2858c     4A 7B 02 56 |  if_ne	mov	result1, arg02
28590     08 AA 06 F1 | 	add	local03, #8
28594     55 7B 52 FC | 	wrword	result1, local03
28598     08 AE 06 F1 | 	add	local05, #8
2859c     57 7B 02 F6 | 	mov	result1, local05
285a0                 | LR__3895
285a0     E7 F0 03 F6 | 	mov	ptra, fp
285a4     F2 00 A0 FD | 	call	#popregs_
285a8                 | __system___gc_tryalloc_ret
285a8     2D 00 64 FD | 	ret
285ac                 | 
285ac                 | __system___gc_alloc_managed
285ac     01 CA 05 F6 | 	mov	COUNT_, #1
285b0     E8 00 A0 FD | 	call	#pushregs_
285b4     49 A7 02 F6 | 	mov	local01, arg01
285b8     00 94 06 F6 | 	mov	arg02, #0
285bc     1C 00 B0 FD | 	call	#__system___gc_doalloc
285c0     3D 95 0A F6 | 	mov	arg02, result1 wz
285c4     01 A6 56 A2 |  if_e	cmps	local01, #1 wc
285c8     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
285cc     4A 7B 02 D6 |  if_c_or_nz	mov	result1, arg02
285d0     E7 F0 03 F6 | 	mov	ptra, fp
285d4     F2 00 A0 FD | 	call	#popregs_
285d8                 | __system___gc_alloc_managed_ret
285d8     2D 00 64 FD | 	ret
285dc                 | 
285dc                 | __system___gc_doalloc
285dc     06 CA 05 F6 | 	mov	COUNT_, #6
285e0     E8 00 A0 FD | 	call	#pushregs_
285e4     49 A7 0A F6 | 	mov	local01, arg01 wz
285e8     4A A9 02 F6 | 	mov	local02, arg02
285ec     00 7A 06 A6 |  if_e	mov	result1, #0
285f0     84 00 90 AD |  if_e	jmp	#LR__3907
285f4     17 A6 06 F1 | 	add	local01, #23
285f8     0F A6 26 F5 | 	andn	local01, #15
285fc     04 A6 46 F0 | 	shr	local01, #4
28600     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
28604     1C 92 06 F1 | 	add	arg01, #28
28608     98 C5 BF FD | 	call	#__system___lockmem
2860c     53 93 02 F6 | 	mov	arg01, local01
28610     54 95 02 F6 | 	mov	arg02, local02
28614     DC FD BF FD | 	call	#__system___gc_tryalloc
28618     3D AB 0A F6 | 	mov	local03, result1 wz
2861c     14 00 90 5D |  if_ne	jmp	#LR__3900
28620     64 03 B0 FD | 	call	#__system___gc_docollect
28624     53 93 02 F6 | 	mov	arg01, local01
28628     54 95 02 F6 | 	mov	arg02, local02
2862c     C4 FD BF FD | 	call	#__system___gc_tryalloc
28630     3D AB 02 F6 | 	mov	local03, result1
28634                 | LR__3900
28634     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
28638     1C 92 06 F1 | 	add	arg01, #28
2863c     49 01 68 FC | 	wrlong	#0, arg01
28640     00 AA 0E F2 | 	cmp	local03, #0 wz
28644     2C 00 90 AD |  if_e	jmp	#LR__3906
28648     04 A6 66 F0 | 	shl	local01, #4
2864c     08 A6 86 F1 | 	sub	local01, #8
28650     53 AD 52 F6 | 	abs	local04, local01 wc
28654     02 AC 46 F0 | 	shr	local04, #2
28658     56 AF 8A F6 | 	negc	local05, local04 wz
2865c     55 B1 02 F6 | 	mov	local06, local03
28660     10 00 90 AD |  if_e	jmp	#LR__3905
28664     D7 06 48 FB | 	callpa	#(@LR__3903-@LR__3901)>>2,fcache_load_ptr_
28668                 | LR__3901
28668     57 05 D8 FC | 	rep	@LR__3904, local05
2866c                 | LR__3902
2866c     58 01 68 FC | 	wrlong	#0, local06
28670     04 B0 06 F1 | 	add	local06, #4
28674                 | LR__3903
28674                 | LR__3904
28674                 | LR__3905
28674                 | LR__3906
28674     55 7B 02 F6 | 	mov	result1, local03
28678                 | LR__3907
28678     E7 F0 03 F6 | 	mov	ptra, fp
2867c     F2 00 A0 FD | 	call	#popregs_
28680                 | __system___gc_doalloc_ret
28680     2D 00 64 FD | 	ret
28684                 | 
28684                 | __system___gc_isvalidptr
28684     F8 96 06 F4 | 	bitl	arg03, #248
28688     08 96 86 F1 | 	sub	arg03, #8
2868c     49 97 52 F2 | 	cmps	arg03, arg01 wc
28690     08 00 90 CD |  if_b	jmp	#LR__3910
28694     4A 97 52 F2 | 	cmps	arg03, arg02 wc
28698     08 00 90 CD |  if_b	jmp	#LR__3911
2869c                 | LR__3910
2869c     00 7A 06 F6 | 	mov	result1, #0
286a0     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
286a4                 | LR__3911
286a4     4B 81 02 F6 | 	mov	_var01, arg03
286a8     49 81 62 F5 | 	xor	_var01, arg01
286ac     0F 80 CE F7 | 	test	_var01, #15 wz
286b0     00 7A 06 56 |  if_ne	mov	result1, #0
286b4     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
286b8     4B 81 02 F6 | 	mov	_var01, arg03
286bc     02 80 06 F1 | 	add	_var01, #2
286c0     40 81 E2 FA | 	rdword	_var01, _var01
286c4     7F 00 00 FF 
286c8     C0 81 06 F5 | 	and	_var01, ##65472
286cc     36 00 00 FF 
286d0     80 80 0E F2 | 	cmp	_var01, ##27776 wz
286d4     00 7A 06 56 |  if_ne	mov	result1, #0
286d8     4B 7B 02 A6 |  if_e	mov	result1, arg03
286dc                 | __system___gc_isvalidptr_ret
286dc     2D 00 64 FD | 	ret
286e0                 | 
286e0                 | __system___gc_free
286e0     49 97 02 F6 | 	mov	arg03, arg01
286e4     74 FC BF FD | 	call	#__system___gc_ptrs
286e8     3D 93 02 F6 | 	mov	arg01, result1
286ec     3E 95 02 F6 | 	mov	arg02, result2
286f0     90 FF BF FD | 	call	#__system___gc_isvalidptr
286f4     3D 95 0A F6 | 	mov	arg02, result1 wz
286f8     20 00 90 AD |  if_e	jmp	#LR__3920
286fc     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
28700     1C 92 06 F1 | 	add	arg01, #28
28704     9C C4 BF FD | 	call	#__system___lockmem
28708     4A 93 02 F6 | 	mov	arg01, arg02
2870c     10 00 B0 FD | 	call	#__system___gc_dofree
28710     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
28714     1C 92 06 F1 | 	add	arg01, #28
28718     49 01 68 FC | 	wrlong	#0, arg01
2871c                 | LR__3920
2871c                 | __system___gc_free_ret
2871c     2D 00 64 FD | 	ret
28720                 | 
28720                 | __system___gc_dofree
28720     06 CA 05 F6 | 	mov	COUNT_, #6
28724     E8 00 A0 FD | 	call	#pushregs_
28728     49 A7 02 F6 | 	mov	local01, arg01
2872c     2C FC BF FD | 	call	#__system___gc_ptrs
28730     3D A9 02 F6 | 	mov	local02, result1
28734     3E AB 02 F6 | 	mov	local03, result2
28738     53 95 02 F6 | 	mov	arg02, local01
2873c     02 94 06 F1 | 	add	arg02, #2
28740     36 00 80 FF 
28744     4A 1F 59 FC | 	wrword	##27791, arg02
28748     53 AD 02 F6 | 	mov	local04, local01
2874c     53 93 02 F6 | 	mov	arg01, local01
28750     49 AF EA FA | 	rdword	local05, arg01 wz
28754     00 7A 06 A6 |  if_e	mov	result1, #0
28758     04 AE 66 50 |  if_ne	shl	local05, #4
2875c     57 93 02 51 |  if_ne	add	arg01, local05
28760     49 7B 02 56 |  if_ne	mov	result1, arg01
28764     3D B1 02 F6 | 	mov	local06, result1
28768     D7 24 48 FB | 	callpa	#(@LR__3931-@LR__3930)>>2,fcache_load_ptr_
2876c                 | LR__3930
2876c     04 AC 06 F1 | 	add	local04, #4
28770     56 95 EA FA | 	rdword	arg02, local04 wz
28774     54 93 02 F6 | 	mov	arg01, local02
28778     00 7A 06 A6 |  if_e	mov	result1, #0
2877c     04 94 66 50 |  if_ne	shl	arg02, #4
28780     4A 93 02 51 |  if_ne	add	arg01, arg02
28784     49 7B 02 56 |  if_ne	mov	result1, arg01
28788     3D AD 0A F6 | 	mov	local04, result1 wz
2878c     24 00 90 AD |  if_e	jmp	#LR__3932
28790     56 93 02 F6 | 	mov	arg01, local04
28794     00 7A 06 F6 | 	mov	result1, #0
28798     02 92 06 F1 | 	add	arg01, #2
2879c     49 93 E2 FA | 	rdword	arg01, arg01
287a0     36 00 00 FF 
287a4     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
287a8     01 7A 66 A6 |  if_e	neg	result1, #1
287ac     00 7A 0E F2 | 	cmp	result1, #0 wz
287b0     B8 FF 9F AD |  if_e	jmp	#LR__3930
287b4                 | LR__3931
287b4                 | LR__3932
287b4     00 AC 0E F2 | 	cmp	local04, #0 wz
287b8     54 AD 02 A6 |  if_e	mov	local04, local02
287bc     56 95 02 F6 | 	mov	arg02, local04
287c0     06 94 06 F1 | 	add	arg02, #6
287c4     53 93 02 F6 | 	mov	arg01, local01
287c8     4A 95 E2 FA | 	rdword	arg02, arg02
287cc     06 92 06 F1 | 	add	arg01, #6
287d0     49 95 52 FC | 	wrword	arg02, arg01
287d4     53 95 0A F6 | 	mov	arg02, local01 wz
287d8     00 7A 06 A6 |  if_e	mov	result1, #0
287dc     54 95 82 51 |  if_ne	sub	arg02, local02
287e0     04 94 46 50 |  if_ne	shr	arg02, #4
287e4     4A 7B 02 56 |  if_ne	mov	result1, arg02
287e8     56 95 02 F6 | 	mov	arg02, local04
287ec     06 94 06 F1 | 	add	arg02, #6
287f0     4A 7B 52 FC | 	wrword	result1, arg02
287f4     54 AD 0A F2 | 	cmp	local04, local02 wz
287f8     A4 00 90 AD |  if_e	jmp	#LR__3935
287fc     56 93 02 F6 | 	mov	arg01, local04
28800     49 AF EA FA | 	rdword	local05, arg01 wz
28804     00 7A 06 A6 |  if_e	mov	result1, #0
28808     04 AE 66 50 |  if_ne	shl	local05, #4
2880c     57 93 02 51 |  if_ne	add	arg01, local05
28810     49 7B 02 56 |  if_ne	mov	result1, arg01
28814     53 7B 0A F2 | 	cmp	result1, local01 wz
28818     84 00 90 5D |  if_ne	jmp	#LR__3934
2881c     56 B1 E2 FA | 	rdword	local06, local04
28820     53 95 E2 FA | 	rdword	arg02, local01
28824     4A B1 02 F1 | 	add	local06, arg02
28828     56 B1 52 FC | 	wrword	local06, local04
2882c     53 B1 02 F6 | 	mov	local06, local01
28830     02 B0 06 F1 | 	add	local06, #2
28834     58 01 58 FC | 	wrword	#0, local06
28838     53 93 02 F6 | 	mov	arg01, local01
2883c     49 AF EA FA | 	rdword	local05, arg01 wz
28840     00 7A 06 A6 |  if_e	mov	result1, #0
28844     04 AE 66 50 |  if_ne	shl	local05, #4
28848     57 93 02 51 |  if_ne	add	arg01, local05
2884c     49 7B 02 56 |  if_ne	mov	result1, arg01
28850     3D B1 02 F6 | 	mov	local06, result1
28854     55 B1 52 F2 | 	cmps	local06, local03 wc
28858     20 00 90 3D |  if_ae	jmp	#LR__3933
2885c     56 95 0A F6 | 	mov	arg02, local04 wz
28860     00 7A 06 A6 |  if_e	mov	result1, #0
28864     54 95 82 51 |  if_ne	sub	arg02, local02
28868     04 94 46 50 |  if_ne	shr	arg02, #4
2886c     4A 7B 02 56 |  if_ne	mov	result1, arg02
28870     58 95 02 F6 | 	mov	arg02, local06
28874     04 94 06 F1 | 	add	arg02, #4
28878     4A 7B 52 FC | 	wrword	result1, arg02
2887c                 | LR__3933
2887c     53 95 02 F6 | 	mov	arg02, local01
28880     06 94 06 F1 | 	add	arg02, #6
28884     56 7D 02 F6 | 	mov	result2, local04
28888     4A 95 E2 FA | 	rdword	arg02, arg02
2888c     06 7C 06 F1 | 	add	result2, #6
28890     3E 95 52 FC | 	wrword	arg02, result2
28894     06 A6 06 F1 | 	add	local01, #6
28898     53 01 58 FC | 	wrword	#0, local01
2889c     56 A7 02 F6 | 	mov	local01, local04
288a0                 | LR__3934
288a0                 | LR__3935
288a0     53 93 02 F6 | 	mov	arg01, local01
288a4     49 AF EA FA | 	rdword	local05, arg01 wz
288a8     00 7A 06 A6 |  if_e	mov	result1, #0
288ac     04 AE 66 50 |  if_ne	shl	local05, #4
288b0     57 93 02 51 |  if_ne	add	arg01, local05
288b4     49 7B 02 56 |  if_ne	mov	result1, arg01
288b8     3D 95 0A F6 | 	mov	arg02, result1 wz
288bc     B8 00 90 AD |  if_e	jmp	#LR__3937
288c0     55 95 52 F2 | 	cmps	arg02, local03 wc
288c4     B0 00 90 3D |  if_ae	jmp	#LR__3937
288c8     4A 93 02 F6 | 	mov	arg01, arg02
288cc     00 7A 06 F6 | 	mov	result1, #0
288d0     02 92 06 F1 | 	add	arg01, #2
288d4     49 93 E2 FA | 	rdword	arg01, arg01
288d8     36 00 00 FF 
288dc     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
288e0     01 7A 66 A6 |  if_e	neg	result1, #1
288e4     00 7A 0E F2 | 	cmp	result1, #0 wz
288e8     8C 00 90 AD |  if_e	jmp	#LR__3937
288ec     53 AD 02 F6 | 	mov	local04, local01
288f0     56 B1 E2 FA | 	rdword	local06, local04
288f4     4A 93 02 F6 | 	mov	arg01, arg02
288f8     49 A7 E2 FA | 	rdword	local01, arg01
288fc     53 B1 02 F1 | 	add	local06, local01
28900     56 B1 52 FC | 	wrword	local06, local04
28904     49 B1 02 F6 | 	mov	local06, arg01
28908     06 B0 06 F1 | 	add	local06, #6
2890c     56 A7 02 F6 | 	mov	local01, local04
28910     58 B1 E2 FA | 	rdword	local06, local06
28914     06 A6 06 F1 | 	add	local01, #6
28918     53 B1 52 FC | 	wrword	local06, local01
2891c     49 B1 02 F6 | 	mov	local06, arg01
28920     02 B0 06 F1 | 	add	local06, #2
28924     58 55 59 FC | 	wrword	#170, local06
28928     49 B1 02 F6 | 	mov	local06, arg01
2892c     06 B0 06 F1 | 	add	local06, #6
28930     58 01 58 FC | 	wrword	#0, local06
28934     49 AF EA FA | 	rdword	local05, arg01 wz
28938     00 7A 06 A6 |  if_e	mov	result1, #0
2893c     04 AE 66 50 |  if_ne	shl	local05, #4
28940     57 93 02 51 |  if_ne	add	arg01, local05
28944     49 7B 02 56 |  if_ne	mov	result1, arg01
28948     3D B1 0A F6 | 	mov	local06, result1 wz
2894c     28 00 90 AD |  if_e	jmp	#LR__3936
28950     55 B1 52 F2 | 	cmps	local06, local03 wc
28954     20 00 90 3D |  if_ae	jmp	#LR__3936
28958     56 95 0A F6 | 	mov	arg02, local04 wz
2895c     00 7A 06 A6 |  if_e	mov	result1, #0
28960     54 95 82 51 |  if_ne	sub	arg02, local02
28964     04 94 46 50 |  if_ne	shr	arg02, #4
28968     4A 7B 02 56 |  if_ne	mov	result1, arg02
2896c     58 AD 02 F6 | 	mov	local04, local06
28970     04 AC 06 F1 | 	add	local04, #4
28974     56 7B 52 FC | 	wrword	result1, local04
28978                 | LR__3936
28978                 | LR__3937
28978     58 7B 02 F6 | 	mov	result1, local06
2897c     E7 F0 03 F6 | 	mov	ptra, fp
28980     F2 00 A0 FD | 	call	#popregs_
28984                 | __system___gc_dofree_ret
28984     2D 00 64 FD | 	ret
28988                 | 
28988                 | __system___gc_docollect
28988     05 CA 05 F6 | 	mov	COUNT_, #5
2898c     E8 00 A0 FD | 	call	#pushregs_
28990     C8 F9 BF FD | 	call	#__system___gc_ptrs
28994     3E A7 02 F6 | 	mov	local01, result2
28998     3D A9 02 F6 | 	mov	local02, result1
2899c     54 93 02 F6 | 	mov	arg01, local02
289a0     49 AB EA FA | 	rdword	local03, arg01 wz
289a4     00 7A 06 A6 |  if_e	mov	result1, #0
289a8     04 AA 66 50 |  if_ne	shl	local03, #4
289ac     55 93 02 51 |  if_ne	add	arg01, local03
289b0     49 7B 02 56 |  if_ne	mov	result1, arg01
289b4     3D AD 0A F6 | 	mov	local04, result1 wz
289b8     00 7A 06 F6 | 	mov	result1, #0
289bc     01 7A 62 FD | 	cogid	result1
289c0     3D AF 02 F6 | 	mov	local05, result1
289c4     48 00 90 AD |  if_e	jmp	#LR__3942
289c8     D7 22 48 FB | 	callpa	#(@LR__3941-@LR__3940)>>2,fcache_load_ptr_
289cc                 | LR__3940
289cc     53 AD 52 F2 | 	cmps	local04, local01 wc
289d0     3C 00 90 3D |  if_ae	jmp	#LR__3942
289d4     56 95 02 F6 | 	mov	arg02, local04
289d8     02 94 06 F1 | 	add	arg02, #2
289dc     4A 95 E2 FA | 	rdword	arg02, arg02
289e0     20 94 26 F5 | 	andn	arg02, #32
289e4     56 93 02 F6 | 	mov	arg01, local04
289e8     02 92 06 F1 | 	add	arg01, #2
289ec     49 95 52 FC | 	wrword	arg02, arg01
289f0     56 93 02 F6 | 	mov	arg01, local04
289f4     49 AB EA FA | 	rdword	local03, arg01 wz
289f8     00 7A 06 A6 |  if_e	mov	result1, #0
289fc     04 AA 66 50 |  if_ne	shl	local03, #4
28a00     55 93 02 51 |  if_ne	add	arg01, local03
28a04     49 7B 02 56 |  if_ne	mov	result1, arg01
28a08     3D AD 0A F6 | 	mov	local04, result1 wz
28a0c     BC FF 9F 5D |  if_ne	jmp	#LR__3940
28a10                 | LR__3941
28a10                 | LR__3942
28a10     00 AA 06 F6 | 	mov	local03, #0
28a14     00 92 06 F6 | 	mov	arg01, #0
28a18     60 C1 BF FD | 	call	#__system____topofstack
28a1c     3D 95 02 F6 | 	mov	arg02, result1
28a20     55 93 02 F6 | 	mov	arg01, local03
28a24     90 00 B0 FD | 	call	#__system___gc_markhub
28a28     1C 01 B0 FD | 	call	#__system___gc_markcog
28a2c     54 93 02 F6 | 	mov	arg01, local02
28a30     49 AB EA FA | 	rdword	local03, arg01 wz
28a34     00 7A 06 A6 |  if_e	mov	result1, #0
28a38     04 AA 66 50 |  if_ne	shl	local03, #4
28a3c     55 93 02 51 |  if_ne	add	arg01, local03
28a40     49 7B 02 56 |  if_ne	mov	result1, arg01
28a44     3D A9 0A F6 | 	mov	local02, result1 wz
28a48     60 00 90 AD |  if_e	jmp	#LR__3946
28a4c                 | LR__3943
28a4c     54 AD 02 F6 | 	mov	local04, local02
28a50     56 93 02 F6 | 	mov	arg01, local04
28a54     49 AB EA FA | 	rdword	local03, arg01 wz
28a58     00 7A 06 A6 |  if_e	mov	result1, #0
28a5c     04 AA 66 50 |  if_ne	shl	local03, #4
28a60     55 93 02 51 |  if_ne	add	arg01, local03
28a64     49 7B 02 56 |  if_ne	mov	result1, arg01
28a68     3D A9 02 F6 | 	mov	local02, result1
28a6c     56 95 02 F6 | 	mov	arg02, local04
28a70     02 94 06 F1 | 	add	arg02, #2
28a74     4A 95 E2 FA | 	rdword	arg02, arg02
28a78     20 94 CE F7 | 	test	arg02, #32 wz
28a7c     10 94 CE A7 |  if_e	test	arg02, #16 wz
28a80     1C 00 90 5D |  if_ne	jmp	#LR__3945
28a84     4A 95 42 F8 | 	getnib	arg02, arg02, #0
28a88     57 95 0A F2 | 	cmp	arg02, local05 wz
28a8c     0E 94 0E 52 |  if_ne	cmp	arg02, #14 wz
28a90     0C 00 90 5D |  if_ne	jmp	#LR__3944
28a94     56 93 02 F6 | 	mov	arg01, local04
28a98     84 FC BF FD | 	call	#__system___gc_dofree
28a9c     3D A9 02 F6 | 	mov	local02, result1
28aa0                 | LR__3944
28aa0                 | LR__3945
28aa0     00 A8 0E F2 | 	cmp	local02, #0 wz
28aa4     53 A9 52 52 |  if_ne	cmps	local02, local01 wc
28aa8     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3943
28aac                 | LR__3946
28aac     E7 F0 03 F6 | 	mov	ptra, fp
28ab0     F2 00 A0 FD | 	call	#popregs_
28ab4                 | __system___gc_docollect_ret
28ab4     2D 00 64 FD | 	ret
28ab8                 | 
28ab8                 | __system___gc_markhub
28ab8     04 CA 05 F6 | 	mov	COUNT_, #4
28abc     E8 00 A0 FD | 	call	#pushregs_
28ac0     49 A7 02 F6 | 	mov	local01, arg01
28ac4     4A A9 02 F6 | 	mov	local02, arg02
28ac8     90 F8 BF FD | 	call	#__system___gc_ptrs
28acc     3D AB 02 F6 | 	mov	local03, result1
28ad0     3E AD 02 F6 | 	mov	local04, result2
28ad4                 | LR__3950
28ad4     54 A7 52 F2 | 	cmps	local01, local02 wc
28ad8     60 00 90 3D |  if_ae	jmp	#LR__3951
28adc     53 97 02 FB | 	rdlong	arg03, local01
28ae0     04 A6 06 F1 | 	add	local01, #4
28ae4     56 95 02 F6 | 	mov	arg02, local04
28ae8     55 93 02 F6 | 	mov	arg01, local03
28aec     94 FB BF FD | 	call	#__system___gc_isvalidptr
28af0     3D 97 0A F6 | 	mov	arg03, result1 wz
28af4     DC FF 9F AD |  if_e	jmp	#LR__3950
28af8     4B 93 02 F6 | 	mov	arg01, arg03
28afc     00 7A 06 F6 | 	mov	result1, #0
28b00     02 92 06 F1 | 	add	arg01, #2
28b04     49 93 E2 FA | 	rdword	arg01, arg01
28b08     36 00 00 FF 
28b0c     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
28b10     01 7A 66 A6 |  if_e	neg	result1, #1
28b14     00 7A 0E F2 | 	cmp	result1, #0 wz
28b18     B8 FF 9F 5D |  if_ne	jmp	#LR__3950
28b1c     4B 7D 02 F6 | 	mov	result2, arg03
28b20     02 7C 06 F1 | 	add	result2, #2
28b24     3E 7D E2 FA | 	rdword	result2, result2
28b28     0F 7C 26 F5 | 	andn	result2, #15
28b2c     2E 7C 46 F5 | 	or	result2, #46
28b30     02 96 06 F1 | 	add	arg03, #2
28b34     4B 7D 52 FC | 	wrword	result2, arg03
28b38     98 FF 9F FD | 	jmp	#LR__3950
28b3c                 | LR__3951
28b3c     E7 F0 03 F6 | 	mov	ptra, fp
28b40     F2 00 A0 FD | 	call	#popregs_
28b44                 | __system___gc_markhub_ret
28b44     2D 00 64 FD | 	ret
28b48                 | 
28b48                 | __system___gc_markcog
28b48     04 CA 05 F6 | 	mov	COUNT_, #4
28b4c     E8 00 A0 FD | 	call	#pushregs_
28b50     08 F8 BF FD | 	call	#__system___gc_ptrs
28b54     3D A7 02 F6 | 	mov	local01, result1
28b58     3E A9 02 F6 | 	mov	local02, result2
28b5c     EF AB 06 F6 | 	mov	local03, #495
28b60                 | LR__3960
28b60                 | 	'.live	local03
28b60     00 AA 96 F9 | 	alts	local03, #0
28b64     55 AD 02 F6 | 	mov	local04, local03
28b68     53 93 02 F6 | 	mov	arg01, local01
28b6c     54 95 02 F6 | 	mov	arg02, local02
28b70     56 97 02 F6 | 	mov	arg03, local04
28b74     0C FB BF FD | 	call	#__system___gc_isvalidptr
28b78     00 7A 0E F2 | 	cmp	result1, #0 wz
28b7c     18 00 90 AD |  if_e	jmp	#LR__3961
28b80     3D AD 02 F6 | 	mov	local04, result1
28b84     02 AC 06 F1 | 	add	local04, #2
28b88     56 AD E2 FA | 	rdword	local04, local04
28b8c     20 AC 46 F5 | 	or	local04, #32
28b90     02 7A 06 F1 | 	add	result1, #2
28b94     3D AD 52 FC | 	wrword	local04, result1
28b98                 | LR__3961
28b98     01 AA 86 F1 | 	sub	local03, #1
28b9c     00 AA 56 F2 | 	cmps	local03, #0 wc
28ba0     BC FF 9F 3D |  if_ae	jmp	#LR__3960
28ba4     E7 F0 03 F6 | 	mov	ptra, fp
28ba8     F2 00 A0 FD | 	call	#popregs_
28bac                 | __system___gc_markcog_ret
28bac     2D 00 64 FD | 	ret
28bb0                 | 
28bb0                 | __system___get_vfs_file_handle
28bb0     01 CA 05 F6 | 	mov	COUNT_, #1
28bb4     E8 00 A0 FD | 	call	#pushregs_
28bb8     30 CC BF FD | 	call	#__system___find_free_file
28bbc     3D A7 02 F6 | 	mov	local01, result1
28bc0     00 A6 56 F2 | 	cmps	local01, #0 wc
28bc4     34 A6 06 3D |  if_ae	qmul	local01, #52
28bc8     00 7A 06 C6 |  if_b	mov	result1, #0
28bcc     34 A7 02 36 |  if_ae	mov	local01, ptr___system__dat__
28bd0     02 00 00 3F 
28bd4     2C A7 06 31 |  if_ae	add	local01, ##1324
28bd8     18 7A 62 3D |  if_ae	getqx	result1
28bdc     53 7B 02 31 |  if_ae	add	result1, local01
28be0     E7 F0 03 F6 | 	mov	ptra, fp
28be4     F2 00 A0 FD | 	call	#popregs_
28be8                 | __system___get_vfs_file_handle_ret
28be8     2D 00 64 FD | 	ret
28bec                 | 
28bec                 | __system__opendir
28bec     06 CA 05 F6 | 	mov	COUNT_, #6
28bf0     E8 00 A0 FD | 	call	#pushregs_
28bf4     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
28bf8     84 A7 06 F1 | 	add	local01, #388
28bfc     49 95 02 F6 | 	mov	arg02, arg01
28c00     53 93 02 F6 | 	mov	arg01, local01
28c04     00 96 06 F6 | 	mov	arg03, #0
28c08     E4 C6 BF FD | 	call	#__system____getvfsforfile
28c0c     3D A9 0A F6 | 	mov	local02, result1 wz
28c10     10 00 90 AD |  if_e	jmp	#LR__3970
28c14     28 A8 06 F1 | 	add	local02, #40
28c18     54 97 0A FB | 	rdlong	arg03, local02 wz
28c1c     28 A8 86 F1 | 	sub	local02, #40
28c20     14 00 90 5D |  if_ne	jmp	#LR__3971
28c24                 | LR__3970
28c24     20 68 06 F1 | 	add	ptr___system__dat__, #32
28c28     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
28c2c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28c30     00 7A 06 F6 | 	mov	result1, #0
28c34     90 00 90 FD | 	jmp	#LR__3973
28c38                 | LR__3971
28c38     5C 92 06 F6 | 	mov	arg01, #92
28c3c     10 94 06 F6 | 	mov	arg02, #16
28c40     98 F9 BF FD | 	call	#__system___gc_doalloc
28c44     3D AB 0A F6 | 	mov	local03, result1 wz
28c48     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
28c4c     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
28c50     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
28c54     00 7A 06 A6 |  if_e	mov	result1, #0
28c58     6C 00 90 AD |  if_e	jmp	#LR__3973
28c5c     28 A8 06 F1 | 	add	local02, #40
28c60     54 AD 02 FB | 	rdlong	local04, local02
28c64     56 AF 02 F6 | 	mov	local05, local04
28c68     28 A8 86 F1 | 	sub	local02, #40
28c6c     13 AE 46 F7 | 	zerox	local05, #19
28c70     14 AC 46 F0 | 	shr	local04, #20
28c74     02 AC 66 F0 | 	shl	local04, #2
28c78     2D AD 02 F1 | 	add	local04, __methods__
28c7c     56 AD 02 FB | 	rdlong	local04, local04
28c80     55 93 02 F6 | 	mov	arg01, local03
28c84     53 95 02 F6 | 	mov	arg02, local01
28c88     32 B1 02 F6 | 	mov	local06, objptr
28c8c     57 65 02 F6 | 	mov	objptr, local05
28c90     2D AC 62 FD | 	call	local04
28c94     58 65 02 F6 | 	mov	objptr, local06
28c98     3D 97 0A F6 | 	mov	arg03, result1 wz
28c9c     20 00 90 AD |  if_e	jmp	#LR__3972
28ca0     00 96 4E F2 | 	cmps	arg03, #0 wz
28ca4     20 68 06 F1 | 	add	ptr___system__dat__, #32
28ca8     34 97 62 FC | 	wrlong	arg03, ptr___system__dat__
28cac     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28cb0     55 93 02 F6 | 	mov	arg01, local03
28cb4     28 FA BF FD | 	call	#__system___gc_free
28cb8     00 7A 06 F6 | 	mov	result1, #0
28cbc     08 00 90 FD | 	jmp	#LR__3973
28cc0                 | LR__3972
28cc0     55 A9 62 FC | 	wrlong	local02, local03
28cc4     55 7B 02 F6 | 	mov	result1, local03
28cc8                 | LR__3973
28cc8     E7 F0 03 F6 | 	mov	ptra, fp
28ccc     F2 00 A0 FD | 	call	#popregs_
28cd0                 | __system__opendir_ret
28cd0     2D 00 64 FD | 	ret
28cd4                 | 
28cd4                 | __system__closedir
28cd4     04 CA 05 F6 | 	mov	COUNT_, #4
28cd8     E8 00 A0 FD | 	call	#pushregs_
28cdc     49 A7 02 F6 | 	mov	local01, arg01
28ce0     53 93 02 FB | 	rdlong	arg01, local01
28ce4     2C 92 06 F1 | 	add	arg01, #44
28ce8     49 A9 02 FB | 	rdlong	local02, arg01
28cec     54 AB 02 F6 | 	mov	local03, local02
28cf0     13 AA 46 F7 | 	zerox	local03, #19
28cf4     14 A8 46 F0 | 	shr	local02, #20
28cf8     02 A8 66 F0 | 	shl	local02, #2
28cfc     2D A9 02 F1 | 	add	local02, __methods__
28d00     54 A9 02 FB | 	rdlong	local02, local02
28d04     53 93 02 F6 | 	mov	arg01, local01
28d08     32 AD 02 F6 | 	mov	local04, objptr
28d0c     55 65 02 F6 | 	mov	objptr, local03
28d10     2D A8 62 FD | 	call	local02
28d14     56 65 02 F6 | 	mov	objptr, local04
28d18     3D AD 02 F6 | 	mov	local04, result1
28d1c     53 93 02 F6 | 	mov	arg01, local01
28d20     BC F9 BF FD | 	call	#__system___gc_free
28d24     00 AC 4E F2 | 	cmps	local04, #0 wz
28d28     20 68 06 F1 | 	add	ptr___system__dat__, #32
28d2c     34 AD 62 FC | 	wrlong	local04, ptr___system__dat__
28d30     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28d34     01 7A 66 56 |  if_ne	neg	result1, #1
28d38     00 7A 06 A6 |  if_e	mov	result1, #0
28d3c     E7 F0 03 F6 | 	mov	ptra, fp
28d40     F2 00 A0 FD | 	call	#popregs_
28d44                 | __system__closedir_ret
28d44     2D 00 64 FD | 	ret
28d48                 | 
28d48                 | __system__readdir
28d48     04 CA 05 F6 | 	mov	COUNT_, #4
28d4c     E8 00 A0 FD | 	call	#pushregs_
28d50     49 95 0A FB | 	rdlong	arg02, arg01 wz
28d54     49 A7 02 F6 | 	mov	local01, arg01
28d58     08 A6 06 F1 | 	add	local01, #8
28d5c     00 7A 06 A6 |  if_e	mov	result1, #0
28d60     5C 00 90 AD |  if_e	jmp	#LR__3981
28d64     30 94 06 F1 | 	add	arg02, #48
28d68     4A A9 02 FB | 	rdlong	local02, arg02
28d6c     54 AB 02 F6 | 	mov	local03, local02
28d70     13 AA 46 F7 | 	zerox	local03, #19
28d74     14 A8 46 F0 | 	shr	local02, #20
28d78     02 A8 66 F0 | 	shl	local02, #2
28d7c     2D A9 02 F1 | 	add	local02, __methods__
28d80     54 A9 02 FB | 	rdlong	local02, local02
28d84     53 95 02 F6 | 	mov	arg02, local01
28d88     32 AD 02 F6 | 	mov	local04, objptr
28d8c     55 65 02 F6 | 	mov	objptr, local03
28d90     2D A8 62 FD | 	call	local02
28d94     56 65 02 F6 | 	mov	objptr, local04
28d98     00 7A 4E F2 | 	cmps	result1, #0 wz
28d9c     1C 00 90 AD |  if_e	jmp	#LR__3980
28da0     01 7A 56 F2 | 	cmps	result1, #1 wc
28da4     00 7A 4E 32 |  if_ae	cmps	result1, #0 wz
28da8     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
28dac     34 7B 62 3C |  if_ae	wrlong	result1, ptr___system__dat__
28db0     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
28db4     00 7A 06 F6 | 	mov	result1, #0
28db8     04 00 90 FD | 	jmp	#LR__3981
28dbc                 | LR__3980
28dbc     53 7B 02 F6 | 	mov	result1, local01
28dc0                 | LR__3981
28dc0     E7 F0 03 F6 | 	mov	ptra, fp
28dc4     F2 00 A0 FD | 	call	#popregs_
28dc8                 | __system__readdir_ret
28dc8     2D 00 64 FD | 	ret
28dcc                 | 
28dcc                 | __system___openraw
28dcc     15 CA 05 F6 | 	mov	COUNT_, #21
28dd0     E8 00 A0 FD | 	call	#pushregs_
28dd4     49 A7 02 F6 | 	mov	local01, arg01
28dd8     4A A9 02 F6 | 	mov	local02, arg02
28ddc     4B AB 02 F6 | 	mov	local03, arg03
28de0     4C AD 02 F6 | 	mov	local04, arg04
28de4     0F AE C6 F9 | 	decod	local05, #15
28de8     53 B1 02 F6 | 	mov	local06, local01
28dec     00 B2 06 F6 | 	mov	local07, #0
28df0     34 B5 02 F6 | 	mov	local08, ptr___system__dat__
28df4     84 B5 06 F1 | 	add	local08, #388
28df8     5A 93 02 F6 | 	mov	arg01, local08
28dfc     54 95 02 F6 | 	mov	arg02, local02
28e00     00 96 06 F6 | 	mov	arg03, #0
28e04     E8 C4 BF FD | 	call	#__system____getvfsforfile
28e08     3D B7 0A F6 | 	mov	local09, result1 wz
28e0c     10 00 90 AD |  if_e	jmp	#LR__3990
28e10     20 B6 06 F1 | 	add	local09, #32
28e14     5B 7B 0A FB | 	rdlong	result1, local09 wz
28e18     20 B6 86 F1 | 	sub	local09, #32
28e1c     14 00 90 5D |  if_ne	jmp	#LR__3991
28e20                 | LR__3990
28e20     20 68 06 F1 | 	add	ptr___system__dat__, #32
28e24     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
28e28     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28e2c     01 7A 66 F6 | 	neg	result1, #1
28e30     DC 02 90 FD | 	jmp	#LR__4006
28e34                 | LR__3991
28e34     58 93 02 F6 | 	mov	arg01, local06
28e38     00 94 06 F6 | 	mov	arg02, #0
28e3c     34 96 06 F6 | 	mov	arg03, #52
28e40     49 B9 02 F6 | 	mov	local10, arg01
28e44     D8 00 A0 FD | 	call	#\builtin_bytefill_
28e48     20 B6 06 F1 | 	add	local09, #32
28e4c     5B BB 02 FB | 	rdlong	local11, local09
28e50     5D BD 02 F6 | 	mov	local12, local11
28e54     5D BF 02 F6 | 	mov	local13, local11
28e58     20 B6 86 F1 | 	sub	local09, #32
28e5c     5F C1 02 F6 | 	mov	local14, local13
28e60     13 BC 46 F7 | 	zerox	local12, #19
28e64     14 C0 46 F0 | 	shr	local14, #20
28e68     02 C0 66 F0 | 	shl	local14, #2
28e6c     2D C1 02 F1 | 	add	local14, __methods__
28e70     60 C1 02 FB | 	rdlong	local14, local14
28e74     58 C3 02 F6 | 	mov	local15, local06
28e78     5A C5 02 F6 | 	mov	local16, local08
28e7c     55 C7 02 F6 | 	mov	local17, local03
28e80     61 93 02 F6 | 	mov	arg01, local15
28e84     62 95 02 F6 | 	mov	arg02, local16
28e88     63 97 02 F6 | 	mov	arg03, local17
28e8c     32 C9 02 F6 | 	mov	local18, objptr
28e90     5E 65 02 F6 | 	mov	objptr, local12
28e94     2D C0 62 FD | 	call	local14
28e98     64 65 02 F6 | 	mov	objptr, local18
28e9c     3D CB 0A F6 | 	mov	local19, result1 wz
28ea0     04 AA CE 57 |  if_ne	test	local03, #4 wz
28ea4     58 00 90 AD |  if_e	jmp	#LR__3992
28ea8     24 B6 06 F1 | 	add	local09, #36
28eac     5B BB 02 FB | 	rdlong	local11, local09
28eb0     5D BD 02 F6 | 	mov	local12, local11
28eb4     5D BF 02 F6 | 	mov	local13, local11
28eb8     24 B6 86 F1 | 	sub	local09, #36
28ebc     5F C1 02 F6 | 	mov	local14, local13
28ec0     13 BC 46 F7 | 	zerox	local12, #19
28ec4     14 C0 46 F0 | 	shr	local14, #20
28ec8     02 C0 66 F0 | 	shl	local14, #2
28ecc     2D C1 02 F1 | 	add	local14, __methods__
28ed0     60 C1 02 FB | 	rdlong	local14, local14
28ed4     58 C3 02 F6 | 	mov	local15, local06
28ed8     5A C5 02 F6 | 	mov	local16, local08
28edc     56 C7 02 F6 | 	mov	local17, local04
28ee0     61 93 02 F6 | 	mov	arg01, local15
28ee4     62 95 02 F6 | 	mov	arg02, local16
28ee8     63 97 02 F6 | 	mov	arg03, local17
28eec     32 C9 02 F6 | 	mov	local18, objptr
28ef0     5E 65 02 F6 | 	mov	objptr, local12
28ef4     2D C0 62 FD | 	call	local14
28ef8     64 65 02 F6 | 	mov	objptr, local18
28efc     3D CB 02 F6 | 	mov	local19, result1
28f00                 | LR__3992
28f00     00 CA 0E F2 | 	cmp	local19, #0 wz
28f04     DC 01 90 5D |  if_ne	jmp	#LR__4004
28f08     55 CD 02 F6 | 	mov	local20, local03
28f0c     03 CC 0E F5 | 	and	local20, #3 wz
28f10     02 AE 46 55 |  if_ne	or	local05, #2
28f14     01 CC 0E F2 | 	cmp	local20, #1 wz
28f18     01 AE 46 55 |  if_ne	or	local05, #1
28f1c     20 AA CE F7 | 	test	local03, #32 wz
28f20     80 AF 46 55 |  if_ne	or	local05, #384
28f24     08 B0 06 F1 | 	add	local06, #8
28f28     58 AF 62 FC | 	wrlong	local05, local06
28f2c     0C B0 06 F1 | 	add	local06, #12
28f30     58 CF 0A FB | 	rdlong	local21, local06 wz
28f34     14 B0 86 F1 | 	sub	local06, #20
28f38     18 00 90 5D |  if_ne	jmp	#LR__3993
28f3c     04 B6 06 F1 | 	add	local09, #4
28f40     5B CF 02 FB | 	rdlong	local21, local09
28f44     04 B6 86 F1 | 	sub	local09, #4
28f48     14 B0 06 F1 | 	add	local06, #20
28f4c     58 CF 62 FC | 	wrlong	local21, local06
28f50     14 B0 86 F1 | 	sub	local06, #20
28f54                 | LR__3993
28f54     18 B0 06 F1 | 	add	local06, #24
28f58     58 CF 0A FB | 	rdlong	local21, local06 wz
28f5c     18 B0 86 F1 | 	sub	local06, #24
28f60     18 00 90 5D |  if_ne	jmp	#LR__3994
28f64     08 B6 06 F1 | 	add	local09, #8
28f68     5B CF 02 FB | 	rdlong	local21, local09
28f6c     08 B6 86 F1 | 	sub	local09, #8
28f70     18 B0 06 F1 | 	add	local06, #24
28f74     58 CF 62 FC | 	wrlong	local21, local06
28f78     18 B0 86 F1 | 	sub	local06, #24
28f7c                 | LR__3994
28f7c     24 B0 06 F1 | 	add	local06, #36
28f80     58 CF 0A FB | 	rdlong	local21, local06 wz
28f84     24 B0 86 F1 | 	sub	local06, #36
28f88     5B CF 02 AB |  if_e	rdlong	local21, local09
28f8c     24 B0 06 A1 |  if_e	add	local06, #36
28f90     58 CF 62 AC |  if_e	wrlong	local21, local06
28f94     24 B0 86 A1 |  if_e	sub	local06, #36
28f98     28 B0 06 F1 | 	add	local06, #40
28f9c     58 CF 0A FB | 	rdlong	local21, local06 wz
28fa0     28 B0 86 F1 | 	sub	local06, #40
28fa4     18 00 90 5D |  if_ne	jmp	#LR__3995
28fa8     10 B6 06 F1 | 	add	local09, #16
28fac     5B CF 02 FB | 	rdlong	local21, local09
28fb0     10 B6 86 F1 | 	sub	local09, #16
28fb4     28 B0 06 F1 | 	add	local06, #40
28fb8     58 CF 62 FC | 	wrlong	local21, local06
28fbc     28 B0 86 F1 | 	sub	local06, #40
28fc0                 | LR__3995
28fc0     30 B0 06 F1 | 	add	local06, #48
28fc4     58 CF 0A FB | 	rdlong	local21, local06 wz
28fc8     30 B0 86 F1 | 	sub	local06, #48
28fcc     18 00 90 5D |  if_ne	jmp	#LR__3996
28fd0     0C B6 06 F1 | 	add	local09, #12
28fd4     5B CF 02 FB | 	rdlong	local21, local09
28fd8     0C B6 86 F1 | 	sub	local09, #12
28fdc     30 B0 06 F1 | 	add	local06, #48
28fe0     58 CF 62 FC | 	wrlong	local21, local06
28fe4     30 B0 86 F1 | 	sub	local06, #48
28fe8                 | LR__3996
28fe8     20 B0 06 F1 | 	add	local06, #32
28fec     58 CF 0A FB | 	rdlong	local21, local06 wz
28ff0     20 B0 86 F1 | 	sub	local06, #32
28ff4     18 00 90 5D |  if_ne	jmp	#LR__3997
28ff8     50 B6 06 F1 | 	add	local09, #80
28ffc     5B CF 02 FB | 	rdlong	local21, local09
29000     50 B6 86 F1 | 	sub	local09, #80
29004     20 B0 06 F1 | 	add	local06, #32
29008     58 CF 62 FC | 	wrlong	local21, local06
2900c     20 B0 86 F1 | 	sub	local06, #32
29010                 | LR__3997
29010     1C B0 06 F1 | 	add	local06, #28
29014     58 CF 0A FB | 	rdlong	local21, local06 wz
29018     1C B0 86 F1 | 	sub	local06, #28
2901c     18 00 90 5D |  if_ne	jmp	#LR__3998
29020     54 B6 06 F1 | 	add	local09, #84
29024     5B CF 02 FB | 	rdlong	local21, local09
29028     54 B6 86 F1 | 	sub	local09, #84
2902c     1C B0 06 F1 | 	add	local06, #28
29030     58 CF 62 FC | 	wrlong	local21, local06
29034     1C B0 86 F1 | 	sub	local06, #28
29038                 | LR__3998
29038     1C B0 06 F1 | 	add	local06, #28
2903c     58 CF 0A FB | 	rdlong	local21, local06 wz
29040     1C B0 86 F1 | 	sub	local06, #28
29044     1C 00 90 5D |  if_ne	jmp	#LR__3999
29048     01 B2 06 F6 | 	mov	local07, #1
2904c     32 93 02 F6 | 	mov	arg01, objptr
29050     00 C0 05 FF 
29054     00 92 46 F5 | 	or	arg01, ##192937984
29058     1C B0 06 F1 | 	add	local06, #28
2905c     58 93 62 FC | 	wrlong	arg01, local06
29060     1C B0 86 F1 | 	sub	local06, #28
29064                 | LR__3999
29064     20 B0 06 F1 | 	add	local06, #32
29068     58 CF 0A FB | 	rdlong	local21, local06 wz
2906c     20 B0 86 F1 | 	sub	local06, #32
29070     1C 00 90 5D |  if_ne	jmp	#LR__4000
29074     01 B2 06 F6 | 	mov	local07, #1
29078     32 93 02 F6 | 	mov	arg01, objptr
2907c     00 C8 05 FF 
29080     00 92 46 F5 | 	or	arg01, ##193986560
29084     20 B0 06 F1 | 	add	local06, #32
29088     58 93 62 FC | 	wrlong	arg01, local06
2908c     20 B0 86 F1 | 	sub	local06, #32
29090                 | LR__4000
29090     2C B0 06 F1 | 	add	local06, #44
29094     58 CF 0A FB | 	rdlong	local21, local06 wz
29098     2C B0 86 F1 | 	sub	local06, #44
2909c     44 00 90 5D |  if_ne	jmp	#LR__4003
290a0     14 B6 06 F1 | 	add	local09, #20
290a4     5B CF 0A FB | 	rdlong	local21, local09 wz
290a8     14 B6 86 F1 | 	sub	local09, #20
290ac     18 00 90 AD |  if_e	jmp	#LR__4001
290b0     14 B6 06 F1 | 	add	local09, #20
290b4     5B CF 02 FB | 	rdlong	local21, local09
290b8     2C B0 06 F1 | 	add	local06, #44
290bc     58 CF 62 FC | 	wrlong	local21, local06
290c0     2C B0 86 F1 | 	sub	local06, #44
290c4     1C 00 90 FD | 	jmp	#LR__4002
290c8                 | LR__4001
290c8     01 B2 06 F6 | 	mov	local07, #1
290cc     32 93 02 F6 | 	mov	arg01, objptr
290d0     00 D0 05 FF 
290d4     00 92 46 F5 | 	or	arg01, ##195035136
290d8     2C B0 06 F1 | 	add	local06, #44
290dc     58 93 62 FC | 	wrlong	arg01, local06
290e0     2C B0 86 F1 | 	sub	local06, #44
290e4                 | LR__4002
290e4                 | LR__4003
290e4                 | LR__4004
290e4     00 B2 0E F2 | 	cmp	local07, #0 wz
290e8     58 93 02 56 |  if_ne	mov	arg01, local06
290ec     E4 04 B0 5D |  if_ne	call	#__system____default_buffer_init
290f0     00 CA 0E F2 | 	cmp	local19, #0 wz
290f4     00 92 06 A6 |  if_e	mov	arg01, #0
290f8     10 00 90 5D |  if_ne	jmp	#LR__4005
290fc     00 92 4E F2 | 	cmps	arg01, #0 wz
29100     20 68 06 F1 | 	add	ptr___system__dat__, #32
29104     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
29108     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2910c                 | LR__4005
2910c     65 7B 02 F6 | 	mov	result1, local19
29110                 | LR__4006
29110     E7 F0 03 F6 | 	mov	ptra, fp
29114     F2 00 A0 FD | 	call	#popregs_
29118                 | __system___openraw_ret
29118     2D 00 64 FD | 	ret
2911c                 | 
2911c                 | __system___closeraw
2911c     05 CA 05 F6 | 	mov	COUNT_, #5
29120     E8 00 A0 FD | 	call	#pushregs_
29124     49 A7 02 F6 | 	mov	local01, arg01
29128     00 A8 06 F6 | 	mov	local02, #0
2912c     08 A6 06 F1 | 	add	local01, #8
29130     53 7B 0A FB | 	rdlong	result1, local01 wz
29134     08 A6 86 F1 | 	sub	local01, #8
29138     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2913c     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
29140     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
29144     01 7A 66 A6 |  if_e	neg	result1, #1
29148     A8 00 90 AD |  if_e	jmp	#LR__4012
2914c     2C A6 06 F1 | 	add	local01, #44
29150     53 7B 0A FB | 	rdlong	result1, local01 wz
29154     2C A6 86 F1 | 	sub	local01, #44
29158     38 00 90 AD |  if_e	jmp	#LR__4010
2915c     2C A6 06 F1 | 	add	local01, #44
29160     53 AB 02 FB | 	rdlong	local03, local01
29164     55 AD 02 F6 | 	mov	local04, local03
29168     2C A6 86 F1 | 	sub	local01, #44
2916c     13 AC 46 F7 | 	zerox	local04, #19
29170     14 AA 46 F0 | 	shr	local03, #20
29174     02 AA 66 F0 | 	shl	local03, #2
29178     2D AB 02 F1 | 	add	local03, __methods__
2917c     55 AB 02 FB | 	rdlong	local03, local03
29180     53 93 02 F6 | 	mov	arg01, local01
29184     32 AF 02 F6 | 	mov	local05, objptr
29188     56 65 02 F6 | 	mov	objptr, local04
2918c     2D AA 62 FD | 	call	local03
29190     57 65 02 F6 | 	mov	objptr, local05
29194                 | LR__4010
29194     24 A6 06 F1 | 	add	local01, #36
29198     53 AF 0A FB | 	rdlong	local05, local01 wz
2919c     24 A6 86 F1 | 	sub	local01, #36
291a0     3C 00 90 AD |  if_e	jmp	#LR__4011
291a4     24 A6 06 F1 | 	add	local01, #36
291a8     53 AB 02 FB | 	rdlong	local03, local01
291ac     55 AD 02 F6 | 	mov	local04, local03
291b0     24 A6 86 F1 | 	sub	local01, #36
291b4     13 AC 46 F7 | 	zerox	local04, #19
291b8     14 AA 46 F0 | 	shr	local03, #20
291bc     02 AA 66 F0 | 	shl	local03, #2
291c0     2D AB 02 F1 | 	add	local03, __methods__
291c4     55 AB 02 FB | 	rdlong	local03, local03
291c8     53 93 02 F6 | 	mov	arg01, local01
291cc     32 AF 02 F6 | 	mov	local05, objptr
291d0     56 65 02 F6 | 	mov	objptr, local04
291d4     2D AA 62 FD | 	call	local03
291d8     57 65 02 F6 | 	mov	objptr, local05
291dc     3D A9 02 F6 | 	mov	local02, result1
291e0                 | LR__4011
291e0     53 93 02 F6 | 	mov	arg01, local01
291e4     00 94 06 F6 | 	mov	arg02, #0
291e8     34 96 06 F6 | 	mov	arg03, #52
291ec     D8 00 A0 FD | 	call	#\builtin_bytefill_
291f0     54 7B 02 F6 | 	mov	result1, local02
291f4                 | LR__4012
291f4     E7 F0 03 F6 | 	mov	ptra, fp
291f8     F2 00 A0 FD | 	call	#popregs_
291fc                 | __system___closeraw_ret
291fc     2D 00 64 FD | 	ret
29200                 | 
29200                 | __system___vfs_open_fat_handle
29200     03 CA 05 F6 | 	mov	COUNT_, #3
29204     E8 00 A0 FD | 	call	#pushregs_
29208     49 A7 0A F6 | 	mov	local01, arg01 wz
2920c     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
29210     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
29214     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
29218     01 7A 66 A6 |  if_e	neg	result1, #1
2921c     80 00 90 AD |  if_e	jmp	#LR__4021
29220     01 00 00 FF 
29224     14 92 06 F6 | 	mov	arg01, ##532
29228     80 F3 BF FD | 	call	#__system___gc_alloc_managed
2922c     3D A9 02 F6 | 	mov	local02, result1
29230     01 00 00 FF 
29234     34 92 06 F6 | 	mov	arg01, ##564
29238     70 F3 BF FD | 	call	#__system___gc_alloc_managed
2923c     32 AB 02 F6 | 	mov	local03, objptr
29240     54 65 02 F6 | 	mov	objptr, local02
29244     01 00 00 FF 
29248     10 64 06 F1 | 	add	objptr, ##528
2924c     32 A7 62 FC | 	wrlong	local01, objptr
29250                 | ' #line 4 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/diskio.cc"
29250                 | ' 
29250                 | ' 
29250                 | ' vfs_file_t *fh;
29250                 | ' 
29250                 | ' DRESULT disk_sethandle(BYTE pdrv, vfs_file_t *fhandle) {
29250                 | '     fh = fhandle;
29250                 | '     return RES_OK;
29250     93 01 00 FF 
29254     E6 94 06 F6 | 	mov	arg02, ##@LR__5477
29258     3D 93 02 F6 | 	mov	arg01, result1
2925c     00 96 06 F6 | 	mov	arg03, #0
29260     54 65 02 F6 | 	mov	objptr, local02
29264     4C 65 B0 FD | 	call	#_fatfs_cc_f_mount
29268     55 65 02 F6 | 	mov	objptr, local03
2926c     3D 93 0A F6 | 	mov	arg01, result1 wz
29270     18 00 90 AD |  if_e	jmp	#LR__4020
29274     49 93 6A F6 | 	neg	arg01, arg01 wz
29278     20 68 06 F1 | 	add	ptr___system__dat__, #32
2927c     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
29280     20 68 86 F1 | 	sub	ptr___system__dat__, #32
29284     00 7A 06 F6 | 	mov	result1, #0
29288     14 00 90 FD | 	jmp	#LR__4021
2928c                 | LR__4020
2928c     54 93 02 F6 | 	mov	arg01, local02
29290     32 AB 02 F6 | 	mov	local03, objptr
29294     54 65 02 F6 | 	mov	objptr, local02
29298     88 8B B0 FD | 	call	#_fatfs_cc_get_vfs
2929c     55 65 02 F6 | 	mov	objptr, local03
292a0                 | LR__4021
292a0     E7 F0 03 F6 | 	mov	ptra, fp
292a4     F2 00 A0 FD | 	call	#popregs_
292a8                 | __system___vfs_open_fat_handle_ret
292a8     2D 00 64 FD | 	ret
292ac                 | 
292ac                 | __system___vfs_open_sdcardx
292ac     04 CA 05 F6 | 	mov	COUNT_, #4
292b0     E8 00 A0 FD | 	call	#pushregs_
292b4     4C 17 B0 FD | 	call	#__system___sdmm_open
292b8     3D A7 0A F6 | 	mov	local01, result1 wz
292bc     00 7A 06 A6 |  if_e	mov	result1, #0
292c0     4C 00 90 AD |  if_e	jmp	#LR__4031
292c4     53 93 02 F6 | 	mov	arg01, local01
292c8     34 FF BF FD | 	call	#__system___vfs_open_fat_handle
292cc     3D A9 0A F6 | 	mov	local02, result1 wz
292d0     38 00 90 5D |  if_ne	jmp	#LR__4030
292d4     24 A6 06 F1 | 	add	local01, #36
292d8     53 AB 02 FB | 	rdlong	local03, local01
292dc     55 AD 02 F6 | 	mov	local04, local03
292e0     24 A6 86 F1 | 	sub	local01, #36
292e4     13 AC 46 F7 | 	zerox	local04, #19
292e8     14 AA 46 F0 | 	shr	local03, #20
292ec     02 AA 66 F0 | 	shl	local03, #2
292f0     2D AB 02 F1 | 	add	local03, __methods__
292f4     55 AB 02 FB | 	rdlong	local03, local03
292f8     53 93 02 F6 | 	mov	arg01, local01
292fc     32 A7 02 F6 | 	mov	local01, objptr
29300     56 65 02 F6 | 	mov	objptr, local04
29304     2D AA 62 FD | 	call	local03
29308     53 65 02 F6 | 	mov	objptr, local01
2930c                 | LR__4030
2930c     54 7B 02 F6 | 	mov	result1, local02
29310                 | LR__4031
29310     E7 F0 03 F6 | 	mov	ptra, fp
29314     F2 00 A0 FD | 	call	#popregs_
29318                 | __system___vfs_open_sdcardx_ret
29318     2D 00 64 FD | 	ret
2931c                 | 
2931c                 | __system____default_getc
2931c     03 CA 05 F6 | 	mov	COUNT_, #3
29320     E8 00 A0 FD | 	call	#pushregs_
29324     49 A7 02 F6 | 	mov	local01, arg01
29328     53 A9 02 FB | 	rdlong	local02, local01
2932c     08 A6 06 F1 | 	add	local01, #8
29330     53 AB 02 FB | 	rdlong	local03, local01
29334     08 A6 86 F1 | 	sub	local01, #8
29338     08 AA CE F7 | 	test	local03, #8 wz
2933c     53 93 02 56 |  if_ne	mov	arg01, local01
29340     08 01 B0 5D |  if_ne	call	#__system____default_flush
29344     08 A6 06 F1 | 	add	local01, #8
29348     53 AB 02 FB | 	rdlong	local03, local01
2934c     04 AA 46 F5 | 	or	local03, #4
29350     53 AB 62 FC | 	wrlong	local03, local01
29354     08 A6 86 F1 | 	sub	local01, #8
29358     54 AB 0A FB | 	rdlong	local03, local02 wz
2935c     0C 00 90 5D |  if_ne	jmp	#LR__4040
29360     53 93 02 F6 | 	mov	arg01, local01
29364     E0 18 B0 FD | 	call	#__system____default_filbuf
29368     3D AB 02 F6 | 	mov	local03, result1
2936c                 | LR__4040
2936c     01 AA 56 F2 | 	cmps	local03, #1 wc
29370     01 7A 66 C6 |  if_b	neg	result1, #1
29374     1C 00 90 CD |  if_b	jmp	#LR__4041
29378     01 AA 86 F1 | 	sub	local03, #1
2937c     54 AB 62 FC | 	wrlong	local03, local02
29380     04 A8 06 F1 | 	add	local02, #4
29384     54 AB 02 FB | 	rdlong	local03, local02
29388     55 7B C2 FA | 	rdbyte	result1, local03
2938c     01 AA 06 F1 | 	add	local03, #1
29390     54 AB 62 FC | 	wrlong	local03, local02
29394                 | LR__4041
29394     E7 F0 03 F6 | 	mov	ptra, fp
29398     F2 00 A0 FD | 	call	#popregs_
2939c                 | __system____default_getc_ret
2939c     2D 00 64 FD | 	ret
293a0                 | 
293a0                 | __system____default_putc
293a0     06 CA 05 F6 | 	mov	COUNT_, #6
293a4     E8 00 A0 FD | 	call	#pushregs_
293a8     49 A7 02 F6 | 	mov	local01, arg01
293ac     4A A9 02 F6 | 	mov	local02, arg02
293b0     54 AB 02 FB | 	rdlong	local03, local02
293b4     08 A8 06 F1 | 	add	local02, #8
293b8     54 95 02 FB | 	rdlong	arg02, local02
293bc     08 A8 86 F1 | 	sub	local02, #8
293c0     04 94 CE F7 | 	test	arg02, #4 wz
293c4     54 93 02 56 |  if_ne	mov	arg01, local02
293c8     80 00 B0 5D |  if_ne	call	#__system____default_flush
293cc     08 A8 06 F1 | 	add	local02, #8
293d0     54 AD 02 FB | 	rdlong	local04, local02
293d4     08 AC 46 F5 | 	or	local04, #8
293d8     54 AD 62 FC | 	wrlong	local04, local02
293dc     55 AF 02 FB | 	rdlong	local05, local03
293e0     0C AA 06 F1 | 	add	local03, #12
293e4     55 95 02 FB | 	rdlong	arg02, local03
293e8     0C AA 86 F1 | 	sub	local03, #12
293ec     57 7B 02 F6 | 	mov	result1, local05
293f0     4A 7B 02 F1 | 	add	result1, arg02
293f4     3D A7 42 FC | 	wrbyte	local01, result1
293f8     53 A7 E2 F8 | 	getbyte	local01, local01, #0
293fc     01 AE 06 F1 | 	add	local05, #1
29400     55 AF 62 FC | 	wrlong	local05, local03
29404     02 A8 86 F1 | 	sub	local02, #2
29408     54 B1 EA FA | 	rdword	local06, local02 wz
2940c     06 A8 86 F1 | 	sub	local02, #6
29410     08 AA 06 51 |  if_ne	add	local03, #8
29414     55 AD 02 5B |  if_ne	rdlong	local04, local03
29418     56 AF 0A 52 |  if_ne	cmp	local05, local04 wz
2941c     0C 00 90 AD |  if_e	jmp	#LR__4050
29420     0A A6 0E F2 | 	cmp	local01, #10 wz
29424     01 B0 0E A2 |  if_e	cmp	local06, #1 wz
29428     10 00 90 5D |  if_ne	jmp	#LR__4051
2942c                 | LR__4050
2942c     54 93 02 F6 | 	mov	arg01, local02
29430     18 00 B0 FD | 	call	#__system____default_flush
29434     00 7A 0E F2 | 	cmp	result1, #0 wz
29438     01 A6 66 56 |  if_ne	neg	local01, #1
2943c                 | LR__4051
2943c     53 7B 02 F6 | 	mov	result1, local01
29440     E7 F0 03 F6 | 	mov	ptra, fp
29444     F2 00 A0 FD | 	call	#popregs_
29448                 | __system____default_putc_ret
29448     2D 00 64 FD | 	ret
2944c                 | 
2944c                 | __system____default_flush
2944c     07 CA 05 F6 | 	mov	COUNT_, #7
29450     E8 00 A0 FD | 	call	#pushregs_
29454     49 A7 02 F6 | 	mov	local01, arg01
29458     53 A9 02 FB | 	rdlong	local02, local01
2945c     54 AB 02 FB | 	rdlong	local03, local02
29460     08 A6 06 F1 | 	add	local01, #8
29464     53 7D 02 FB | 	rdlong	result2, local01
29468     08 A6 86 F1 | 	sub	local01, #8
2946c     08 7C CE F7 | 	test	result2, #8 wz
29470     D4 00 90 AD |  if_e	jmp	#LR__4062
29474     01 AA 56 F2 | 	cmps	local03, #1 wc
29478     2C 01 90 CD |  if_b	jmp	#LR__4064
2947c     08 A6 06 F1 | 	add	local01, #8
29480     53 7D 02 FB | 	rdlong	result2, local01
29484     08 A6 86 F1 | 	sub	local01, #8
29488     80 7C CE F7 | 	test	result2, #128 wz
2948c     6C 00 90 AD |  if_e	jmp	#LR__4061
29490     08 A6 06 F1 | 	add	local01, #8
29494     53 97 02 FB | 	rdlong	arg03, local01
29498     08 A6 86 F1 | 	sub	local01, #8
2949c     00 97 CE F7 | 	test	arg03, #256 wz
294a0     58 00 90 AD |  if_e	jmp	#LR__4060
294a4     30 A6 06 F1 | 	add	local01, #48
294a8     53 AD 02 FB | 	rdlong	local04, local01
294ac     56 AF 02 F6 | 	mov	local05, local04
294b0     30 A6 86 F1 | 	sub	local01, #48
294b4     13 AE 46 F7 | 	zerox	local05, #19
294b8     14 AC 46 F0 | 	shr	local04, #20
294bc     02 AC 66 F0 | 	shl	local04, #2
294c0     2D AD 02 F1 | 	add	local04, __methods__
294c4     56 AD 02 FB | 	rdlong	local04, local04
294c8     53 93 02 F6 | 	mov	arg01, local01
294cc     00 94 06 F6 | 	mov	arg02, #0
294d0     00 96 06 F6 | 	mov	arg03, #0
294d4     02 98 06 F6 | 	mov	arg04, #2
294d8     32 B1 02 F6 | 	mov	local06, objptr
294dc     57 65 02 F6 | 	mov	objptr, local05
294e0     2D AC 62 FD | 	call	local04
294e4     58 65 02 F6 | 	mov	objptr, local06
294e8     08 A6 06 F1 | 	add	local01, #8
294ec     53 B1 02 FB | 	rdlong	local06, local01
294f0     00 B1 26 F5 | 	andn	local06, #256
294f4     53 B1 62 FC | 	wrlong	local06, local01
294f8     08 A6 86 F1 | 	sub	local01, #8
294fc                 | LR__4060
294fc                 | LR__4061
294fc     18 A6 06 F1 | 	add	local01, #24
29500     53 AD 02 FB | 	rdlong	local04, local01
29504     56 AF 02 F6 | 	mov	local05, local04
29508     18 A6 86 F1 | 	sub	local01, #24
2950c     13 AE 46 F7 | 	zerox	local05, #19
29510     14 AC 46 F0 | 	shr	local04, #20
29514     02 AC 66 F0 | 	shl	local04, #2
29518     2D AD 02 F1 | 	add	local04, __methods__
2951c     56 AD 02 FB | 	rdlong	local04, local04
29520     0C A8 06 F1 | 	add	local02, #12
29524     54 95 02 FB | 	rdlong	arg02, local02
29528     0C A8 86 F1 | 	sub	local02, #12
2952c     53 93 02 F6 | 	mov	arg01, local01
29530     55 97 02 F6 | 	mov	arg03, local03
29534     32 B1 02 F6 | 	mov	local06, objptr
29538     57 65 02 F6 | 	mov	objptr, local05
2953c     2D AC 62 FD | 	call	local04
29540     58 65 02 F6 | 	mov	objptr, local06
29544     60 00 90 FD | 	jmp	#LR__4064
29548                 | LR__4062
29548     08 A6 06 F1 | 	add	local01, #8
2954c     53 B1 02 FB | 	rdlong	local06, local01
29550     08 A6 86 F1 | 	sub	local01, #8
29554     04 B0 CE F7 | 	test	local06, #4 wz
29558     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
2955c     48 00 90 AD |  if_e	jmp	#LR__4063
29560     55 95 62 F6 | 	neg	arg02, local03
29564     4A 97 02 F6 | 	mov	arg03, arg02
29568     1F 96 C6 F0 | 	sar	arg03, #31
2956c     30 A6 06 F1 | 	add	local01, #48
29570     53 AD 02 FB | 	rdlong	local04, local01
29574     56 AF 02 F6 | 	mov	local05, local04
29578     30 A6 86 F1 | 	sub	local01, #48
2957c     13 AE 46 F7 | 	zerox	local05, #19
29580     14 AC 46 F0 | 	shr	local04, #20
29584     02 AC 66 F0 | 	shl	local04, #2
29588     2D AD 02 F1 | 	add	local04, __methods__
2958c     56 AD 02 FB | 	rdlong	local04, local04
29590     53 93 02 F6 | 	mov	arg01, local01
29594     01 98 06 F6 | 	mov	arg04, #1
29598     32 B1 02 F6 | 	mov	local06, objptr
2959c     57 65 02 F6 | 	mov	objptr, local05
295a0     2D AC 62 FD | 	call	local04
295a4     58 65 02 F6 | 	mov	objptr, local06
295a8                 | LR__4063
295a8                 | LR__4064
295a8     54 01 68 FC | 	wrlong	#0, local02
295ac     04 A8 06 F1 | 	add	local02, #4
295b0     54 01 68 FC | 	wrlong	#0, local02
295b4     08 A6 06 F1 | 	add	local01, #8
295b8     53 B3 02 FB | 	rdlong	local07, local01
295bc     0C B2 26 F5 | 	andn	local07, #12
295c0     53 B3 62 FC | 	wrlong	local07, local01
295c4     00 7A 06 F6 | 	mov	result1, #0
295c8     E7 F0 03 F6 | 	mov	ptra, fp
295cc     F2 00 A0 FD | 	call	#popregs_
295d0                 | __system____default_flush_ret
295d0     2D 00 64 FD | 	ret
295d4                 | 
295d4                 | __system____default_buffer_init
295d4     02 CA 05 F6 | 	mov	COUNT_, #2
295d8     E8 00 A0 FD | 	call	#pushregs_
295dc     49 A7 02 F6 | 	mov	local01, arg01
295e0     53 A9 02 FB | 	rdlong	local02, local01
295e4     53 93 02 F6 | 	mov	arg01, local01
295e8     A4 03 B0 FD | 	call	#__system___isatty
295ec     00 7A 0E F2 | 	cmp	result1, #0 wz
295f0     06 A6 06 51 |  if_ne	add	local01, #6
295f4     53 0B 58 5C |  if_ne	wrword	#5, local01
295f8     06 A6 06 A1 |  if_e	add	local01, #6
295fc     53 0D 58 AC |  if_e	wrword	#6, local01
29600     10 A8 06 F1 | 	add	local02, #16
29604     54 A7 02 F6 | 	mov	local01, local02
29608     04 A8 86 F1 | 	sub	local02, #4
2960c     54 A7 62 FC | 	wrlong	local01, local02
29610     04 A8 86 F1 | 	sub	local02, #4
29614     02 00 80 FF 
29618     54 01 68 FC | 	wrlong	##1024, local02
2961c     00 7A 06 F6 | 	mov	result1, #0
29620     E7 F0 03 F6 | 	mov	ptra, fp
29624     F2 00 A0 FD | 	call	#popregs_
29628                 | __system____default_buffer_init_ret
29628     2D 00 64 FD | 	ret
2962c                 | 
2962c                 | __system__stat
2962c     04 CA 05 F6 | 	mov	COUNT_, #4
29630     E8 00 A0 FD | 	call	#pushregs_
29634     4A A7 02 F6 | 	mov	local01, arg02
29638     34 A9 02 F6 | 	mov	local02, ptr___system__dat__
2963c     84 A9 06 F1 | 	add	local02, #388
29640     49 95 02 F6 | 	mov	arg02, arg01
29644     54 93 02 F6 | 	mov	arg01, local02
29648     00 96 06 F6 | 	mov	arg03, #0
2964c     A0 BC BF FD | 	call	#__system____getvfsforfile
29650     3D AB 0A F6 | 	mov	local03, result1 wz
29654     10 00 90 AD |  if_e	jmp	#LR__4070
29658     34 AA 06 F1 | 	add	local03, #52
2965c     55 97 0A FB | 	rdlong	arg03, local03 wz
29660     34 AA 86 F1 | 	sub	local03, #52
29664     14 00 90 5D |  if_ne	jmp	#LR__4071
29668                 | LR__4070
29668     20 68 06 F1 | 	add	ptr___system__dat__, #32
2966c     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
29670     20 68 86 F1 | 	sub	ptr___system__dat__, #32
29674     01 7A 66 F6 | 	neg	result1, #1
29678     68 00 90 FD | 	jmp	#LR__4072
2967c                 | LR__4071
2967c     53 93 02 F6 | 	mov	arg01, local01
29680     00 94 06 F6 | 	mov	arg02, #0
29684     34 96 06 F6 | 	mov	arg03, #52
29688     49 AD 02 F6 | 	mov	local04, arg01
2968c     D8 00 A0 FD | 	call	#\builtin_bytefill_
29690     56 7B 02 F6 | 	mov	result1, local04
29694     54 93 CA FA | 	rdbyte	arg01, local02 wz
29698     08 A6 06 A1 |  if_e	add	local01, #8
2969c     08 00 80 AF 
296a0     53 FF 6B AC |  if_e	wrlong	##4607, local01
296a4     00 7A 06 A6 |  if_e	mov	result1, #0
296a8     38 00 90 AD |  if_e	jmp	#LR__4072
296ac     34 AA 06 F1 | 	add	local03, #52
296b0     55 AB 02 FB | 	rdlong	local03, local03
296b4     55 AD 02 F6 | 	mov	local04, local03
296b8     13 AA 46 F7 | 	zerox	local03, #19
296bc     14 AC 46 F0 | 	shr	local04, #20
296c0     02 AC 66 F0 | 	shl	local04, #2
296c4     2D AD 02 F1 | 	add	local04, __methods__
296c8     56 AD 02 FB | 	rdlong	local04, local04
296cc     54 93 02 F6 | 	mov	arg01, local02
296d0     53 95 02 F6 | 	mov	arg02, local01
296d4     32 A9 02 F6 | 	mov	local02, objptr
296d8     55 65 02 F6 | 	mov	objptr, local03
296dc     2D AC 62 FD | 	call	local04
296e0     54 65 02 F6 | 	mov	objptr, local02
296e4                 | LR__4072
296e4     E7 F0 03 F6 | 	mov	ptra, fp
296e8     F2 00 A0 FD | 	call	#popregs_
296ec                 | __system__stat_ret
296ec     2D 00 64 FD | 	ret
296f0                 | 
296f0                 | __system__write
296f0     01 CA 05 F6 | 	mov	COUNT_, #1
296f4     E8 00 A0 FD | 	call	#pushregs_
296f8     0A 92 16 F2 | 	cmp	arg01, #10 wc
296fc     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
29700     34 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
29704     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
29708     01 7A 66 36 |  if_ae	neg	result1, #1
2970c     1C 00 90 3D |  if_ae	jmp	#LR__4080
29710     34 92 06 FD | 	qmul	arg01, #52
29714     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
29718     02 00 00 FF 
2971c     2C A7 06 F1 | 	add	local01, ##1324
29720     18 92 62 FD | 	getqx	arg01
29724     53 93 02 F1 | 	add	arg01, local01
29728     3C 0F B0 FD | 	call	#__system___vfswrite
2972c                 | LR__4080
2972c     E7 F0 03 F6 | 	mov	ptra, fp
29730     F2 00 A0 FD | 	call	#popregs_
29734                 | __system__write_ret
29734     2D 00 64 FD | 	ret
29738                 | 
29738                 | __system__read
29738     01 CA 05 F6 | 	mov	COUNT_, #1
2973c     E8 00 A0 FD | 	call	#pushregs_
29740     0A 92 16 F2 | 	cmp	arg01, #10 wc
29744     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
29748     34 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2974c     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
29750     01 7A 66 36 |  if_ae	neg	result1, #1
29754     1C 00 90 3D |  if_ae	jmp	#LR__4090
29758     34 92 06 FD | 	qmul	arg01, #52
2975c     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
29760     02 00 00 FF 
29764     2C A7 06 F1 | 	add	local01, ##1324
29768     18 92 62 FD | 	getqx	arg01
2976c     53 93 02 F1 | 	add	arg01, local01
29770     C0 10 B0 FD | 	call	#__system___vfsread
29774                 | LR__4090
29774     E7 F0 03 F6 | 	mov	ptra, fp
29778     F2 00 A0 FD | 	call	#popregs_
2977c                 | __system__read_ret
2977c     2D 00 64 FD | 	ret
29780                 | 
29780                 | __system__close
29780     01 CA 05 F6 | 	mov	COUNT_, #1
29784     E8 00 A0 FD | 	call	#pushregs_
29788     0A 92 16 F2 | 	cmp	arg01, #10 wc
2978c     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
29790     34 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
29794     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
29798     01 7A 66 36 |  if_ae	neg	result1, #1
2979c     1C 00 90 3D |  if_ae	jmp	#LR__4100
297a0     34 92 06 FD | 	qmul	arg01, #52
297a4     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
297a8     02 00 00 FF 
297ac     2C A7 06 F1 | 	add	local01, ##1324
297b0     18 92 62 FD | 	getqx	arg01
297b4     53 93 02 F1 | 	add	arg01, local01
297b8     60 F9 BF FD | 	call	#__system___closeraw
297bc                 | LR__4100
297bc     E7 F0 03 F6 | 	mov	ptra, fp
297c0     F2 00 A0 FD | 	call	#popregs_
297c4                 | __system__close_ret
297c4     2D 00 64 FD | 	ret
297c8                 | 
297c8                 | __system__lseek
297c8     0B CA 05 F6 | 	mov	COUNT_, #11
297cc     E8 00 A0 FD | 	call	#pushregs_
297d0     49 AF 02 F6 | 	mov	local05, arg01
297d4     4A A7 02 F6 | 	mov	local01, arg02
297d8     4B A9 02 F6 | 	mov	local02, arg03
297dc     4C B1 02 F6 | 	mov	local06, arg04
297e0     0A AE 16 F2 | 	cmp	local05, #10 wc
297e4     18 00 90 CD |  if_b	jmp	#LR__4110
297e8     20 68 06 F1 | 	add	ptr___system__dat__, #32
297ec     34 0B 68 FC | 	wrlong	#5, ptr___system__dat__
297f0     20 68 86 F1 | 	sub	ptr___system__dat__, #32
297f4     01 7C 66 F6 | 	neg	result2, #1
297f8     01 7A 66 F6 | 	neg	result1, #1
297fc     FC 00 90 FD | 	jmp	#LR__4113
29800                 | LR__4110
29800     34 AE 06 FD | 	qmul	local05, #52
29804     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
29808     02 00 00 FF 
2980c     2C 93 06 F1 | 	add	arg01, ##1324
29810     18 B2 62 FD | 	getqx	local07
29814     49 B3 02 F1 | 	add	local07, arg01
29818     30 B2 06 F1 | 	add	local07, #48
2981c     59 AF 0A FB | 	rdlong	local05, local07 wz
29820     30 B2 86 F1 | 	sub	local07, #48
29824     18 00 90 5D |  if_ne	jmp	#LR__4111
29828     20 68 06 F1 | 	add	ptr___system__dat__, #32
2982c     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
29830     20 68 86 F1 | 	sub	ptr___system__dat__, #32
29834     01 7C 66 F6 | 	neg	result2, #1
29838     01 7A 66 F6 | 	neg	result1, #1
2983c     BC 00 90 FD | 	jmp	#LR__4113
29840                 | LR__4111
29840     08 B2 06 F1 | 	add	local07, #8
29844     59 B5 02 FB | 	rdlong	local08, local07
29848     08 B2 86 F1 | 	sub	local07, #8
2984c     80 B4 CE F7 | 	test	local08, #128 wz
29850     08 B2 06 51 |  if_ne	add	local07, #8
29854     59 B5 02 5B |  if_ne	rdlong	local08, local07
29858     00 B5 46 55 |  if_ne	or	local08, #256
2985c     59 B5 62 5C |  if_ne	wrlong	local08, local07
29860     08 B2 86 51 |  if_ne	sub	local07, #8
29864     53 95 02 F6 | 	mov	arg02, local01
29868     54 97 02 F6 | 	mov	arg03, local02
2986c     30 B2 06 F1 | 	add	local07, #48
29870     59 B7 02 FB | 	rdlong	local09, local07
29874     5B B9 02 F6 | 	mov	local10, local09
29878     30 B2 86 F1 | 	sub	local07, #48
2987c     13 B8 46 F7 | 	zerox	local10, #19
29880     14 B6 46 F0 | 	shr	local09, #20
29884     02 B6 66 F0 | 	shl	local09, #2
29888     2D B7 02 F1 | 	add	local09, __methods__
2988c     5B B7 02 FB | 	rdlong	local09, local09
29890     59 93 02 F6 | 	mov	arg01, local07
29894     58 99 02 F6 | 	mov	arg04, local06
29898     32 BB 02 F6 | 	mov	local11, objptr
2989c     5C 65 02 F6 | 	mov	objptr, local10
298a0     2D B6 62 FD | 	call	local09
298a4     5D 65 02 F6 | 	mov	objptr, local11
298a8     3D AB 02 F6 | 	mov	local03, result1
298ac     3E AD 02 F6 | 	mov	local04, result2
298b0     55 93 02 F6 | 	mov	arg01, local03
298b4     56 95 02 F6 | 	mov	arg02, local04
298b8     00 7A 06 F6 | 	mov	result1, #0
298bc     00 92 1E F2 | 	cmp	arg01, #0 wcz
298c0     00 94 7E F2 | 	cmpsx	arg02, #0 wcz
298c4     01 7A 86 56 |  if_ne	negc	result1, #1
298c8     00 7A 56 F2 | 	cmps	result1, #0 wc
298cc     24 00 90 3D |  if_ae	jmp	#LR__4112
298d0     55 93 6A F6 | 	neg	arg01, local03 wz
298d4     20 68 06 F1 | 	add	ptr___system__dat__, #32
298d8     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
298dc     20 68 86 F1 | 	sub	ptr___system__dat__, #32
298e0     01 7A 66 56 |  if_ne	neg	result1, #1
298e4     00 7A 06 A6 |  if_e	mov	result1, #0
298e8     3D 7D 02 F6 | 	mov	result2, result1
298ec     1F 7C C6 F0 | 	sar	result2, #31
298f0     08 00 90 FD | 	jmp	#LR__4113
298f4                 | LR__4112
298f4     55 7B 02 F6 | 	mov	result1, local03
298f8     56 7D 02 F6 | 	mov	result2, local04
298fc                 | LR__4113
298fc     E7 F0 03 F6 | 	mov	ptra, fp
29900     F2 00 A0 FD | 	call	#popregs_
29904                 | __system__lseek_ret
29904     2D 00 64 FD | 	ret
29908                 | 
29908                 | __system___ioctl
29908     03 CA 05 F6 | 	mov	COUNT_, #3
2990c     E8 00 A0 FD | 	call	#pushregs_
29910     00 92 4E F2 | 	cmps	arg01, #0 wz
29914     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
29918     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2991c     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
29920     01 7A 66 A6 |  if_e	neg	result1, #1
29924     5C 00 90 AD |  if_e	jmp	#LR__4121
29928     28 92 06 F1 | 	add	arg01, #40
2992c     49 A7 02 FB | 	rdlong	local01, arg01
29930     53 A9 02 F6 | 	mov	local02, local01
29934     28 92 86 F1 | 	sub	arg01, #40
29938     13 A8 46 F7 | 	zerox	local02, #19
2993c     14 A6 46 F0 | 	shr	local01, #20
29940     02 A6 66 F0 | 	shl	local01, #2
29944     2D A7 02 F1 | 	add	local01, __methods__
29948     53 A7 02 FB | 	rdlong	local01, local01
2994c     32 AB 02 F6 | 	mov	local03, objptr
29950     54 65 02 F6 | 	mov	objptr, local02
29954     2D A6 62 FD | 	call	local01
29958     55 65 02 F6 | 	mov	objptr, local03
2995c     3D 93 0A F6 | 	mov	arg01, result1 wz
29960     1C 00 90 AD |  if_e	jmp	#LR__4120
29964     00 92 4E F2 | 	cmps	arg01, #0 wz
29968     20 68 06 F1 | 	add	ptr___system__dat__, #32
2996c     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
29970     20 68 86 F1 | 	sub	ptr___system__dat__, #32
29974     01 7A 66 56 |  if_ne	neg	result1, #1
29978     00 7A 06 A6 |  if_e	mov	result1, #0
2997c     04 00 90 FD | 	jmp	#LR__4121
29980                 | LR__4120
29980     00 7A 06 F6 | 	mov	result1, #0
29984                 | LR__4121
29984     E7 F0 03 F6 | 	mov	ptra, fp
29988     F2 00 A0 FD | 	call	#popregs_
2998c                 | __system___ioctl_ret
2998c     2D 00 64 FD | 	ret
29990                 | 
29990                 | __system___isatty
29990     00 CA 05 F6 | 	mov	COUNT_, #0
29994     E8 00 A0 FD | 	call	#pushregs_
29998     0C F0 07 F1 | 	add	ptra, #12
2999c     E7 96 02 F6 | 	mov	arg03, fp
299a0     08 96 06 F1 | 	add	arg03, #8
299a4     00 95 06 F6 | 	mov	arg02, #256
299a8     5C FF BF FD | 	call	#__system___ioctl
299ac     00 7A 0E F2 | 	cmp	result1, #0 wz
299b0     01 7A 06 A6 |  if_e	mov	result1, #1
299b4     00 7A 06 56 |  if_ne	mov	result1, #0
299b8     E7 F0 03 F6 | 	mov	ptra, fp
299bc     F2 00 A0 FD | 	call	#popregs_
299c0                 | __system___isatty_ret
299c0     2D 00 64 FD | 	ret
299c4                 | 
299c4                 | __system____getftab
299c4     0A 92 16 F2 | 	cmp	arg01, #10 wc
299c8     34 92 06 CD |  if_b	qmul	arg01, #52
299cc     00 7A 06 36 |  if_ae	mov	result1, #0
299d0     34 93 02 C6 |  if_b	mov	arg01, ptr___system__dat__
299d4     02 00 00 CF 
299d8     2C 93 06 C1 |  if_b	add	arg01, ##1324
299dc     18 7A 62 CD |  if_b	getqx	result1
299e0     49 7B 02 C1 |  if_b	add	result1, arg01
299e4                 | __system____getftab_ret
299e4     2D 00 64 FD | 	ret
299e8                 | 
299e8                 | __system__strncpy
299e8     49 81 02 F6 | 	mov	_var01, arg01
299ec                 | LR__4130
299ec     01 96 86 F1 | 	sub	arg03, #1
299f0     00 96 56 F2 | 	cmps	arg03, #0 wc
299f4     24 00 90 CD |  if_b	jmp	#LR__4131
299f8     4A 7B 02 F6 | 	mov	result1, arg02
299fc     01 7A 06 F1 | 	add	result1, #1
29a00     4A 83 C2 FA | 	rdbyte	_var02, arg02
29a04     3D 95 02 F6 | 	mov	arg02, result1
29a08     40 83 42 FC | 	wrbyte	_var02, _var01
29a0c     41 83 E2 F8 | 	getbyte	_var02, _var02, #0
29a10     07 82 4E F7 | 	zerox	_var02, #7 wz
29a14     01 80 06 F1 | 	add	_var01, #1
29a18     D0 FF 9F 5D |  if_ne	jmp	#LR__4130
29a1c                 | LR__4131
29a1c     D7 0C 48 FB | 	callpa	#(@LR__4133-@LR__4132)>>2,fcache_load_ptr_
29a20                 | LR__4132
29a20     01 96 86 F1 | 	sub	arg03, #1
29a24     00 96 56 F2 | 	cmps	arg03, #0 wc
29a28     40 85 02 36 |  if_ae	mov	_var03, _var01
29a2c     01 80 06 31 |  if_ae	add	_var01, #1
29a30     42 01 48 3C |  if_ae	wrbyte	#0, _var03
29a34     E8 FF 9F 3D |  if_ae	jmp	#LR__4132
29a38                 | LR__4133
29a38     49 7B 02 F6 | 	mov	result1, arg01
29a3c                 | __system__strncpy_ret
29a3c     2D 00 64 FD | 	ret
29a40                 | 
29a40                 | __system__strncat
29a40     00 94 4E F2 | 	cmps	arg02, #0 wz
29a44     54 00 90 AD |  if_e	jmp	#LR__4145
29a48     01 96 16 F2 | 	cmp	arg03, #1 wc
29a4c     4C 00 90 CD |  if_b	jmp	#LR__4145
29a50     49 81 02 F6 | 	mov	_var01, arg01
29a54     D7 06 48 FB | 	callpa	#(@LR__4141-@LR__4140)>>2,fcache_load_ptr_
29a58                 | LR__4140
29a58     40 7B CA FA | 	rdbyte	result1, _var01 wz
29a5c     01 80 06 51 |  if_ne	add	_var01, #1
29a60     F4 FF 9F 5D |  if_ne	jmp	#LR__4140
29a64                 | LR__4141
29a64     4B 83 02 F6 | 	mov	_var02, arg03
29a68     D7 16 48 FB | 	callpa	#(@LR__4143-@LR__4142)>>2,fcache_load_ptr_
29a6c                 | LR__4142
29a6c     4A 85 C2 FA | 	rdbyte	_var03, arg02
29a70     42 87 02 F6 | 	mov	_var04, _var03
29a74     07 86 4E F7 | 	zerox	_var04, #7 wz
29a78     01 94 06 F1 | 	add	arg02, #1
29a7c     18 00 90 AD |  if_e	jmp	#LR__4144
29a80     01 82 86 F1 | 	sub	_var02, #1
29a84     00 82 56 F2 | 	cmps	_var02, #0 wc
29a88     40 87 02 36 |  if_ae	mov	_var04, _var01
29a8c     01 80 06 31 |  if_ae	add	_var01, #1
29a90     43 85 42 3C |  if_ae	wrbyte	_var03, _var04
29a94     D4 FF 9F 3D |  if_ae	jmp	#LR__4142
29a98                 | LR__4143
29a98                 | LR__4144
29a98     40 01 48 FC | 	wrbyte	#0, _var01
29a9c                 | LR__4145
29a9c     49 7B 02 F6 | 	mov	result1, arg01
29aa0                 | __system__strncat_ret
29aa0     2D 00 64 FD | 	ret
29aa4                 | 
29aa4                 | __system__strncmp
29aa4     49 81 0A F6 | 	mov	_var01, arg01 wz
29aa8     14 00 90 5D |  if_ne	jmp	#LR__4150
29aac     00 94 0E F2 | 	cmp	arg02, #0 wz
29ab0     01 82 66 56 |  if_ne	neg	_var02, #1
29ab4     00 82 06 A6 |  if_e	mov	_var02, #0
29ab8     41 7B 02 F6 | 	mov	result1, _var02
29abc     74 00 90 FD | 	jmp	#__system__strncmp_ret
29ac0                 | LR__4150
29ac0     00 94 0E F2 | 	cmp	arg02, #0 wz
29ac4     01 7A 06 A6 |  if_e	mov	result1, #1
29ac8     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
29acc     4B 85 02 F6 | 	mov	_var03, arg03
29ad0     D7 16 48 FB | 	callpa	#(@LR__4152-@LR__4151)>>2,fcache_load_ptr_
29ad4                 | LR__4151
29ad4     40 87 C2 FA | 	rdbyte	_var04, _var01
29ad8     4A 89 02 F6 | 	mov	_var05, arg02
29adc     44 8B C2 FA | 	rdbyte	_var06, _var05
29ae0     01 84 86 F1 | 	sub	_var03, #1
29ae4     00 84 56 F2 | 	cmps	_var03, #0 wc
29ae8     01 80 06 F1 | 	add	_var01, #1
29aec     01 94 06 F1 | 	add	arg02, #1
29af0     00 86 0E 32 |  if_ae	cmp	_var04, #0 wz
29af4     08 00 90 2D |  if_nc_and_z	jmp	#LR__4153
29af8     45 87 0A 32 |  if_ae	cmp	_var04, _var06 wz
29afc     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4151
29b00                 | LR__4152
29b00                 | LR__4153
29b00     00 84 56 F2 | 	cmps	_var03, #0 wc
29b04     00 7A 06 C6 |  if_b	mov	result1, #0
29b08     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
29b0c     45 87 0A F2 | 	cmp	_var04, _var06 wz
29b10     00 7A 06 A6 |  if_e	mov	result1, #0
29b14     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
29b18     00 86 0E F2 | 	cmp	_var04, #0 wz
29b1c     01 7A 66 A6 |  if_e	neg	result1, #1
29b20     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
29b24     00 8A 0E F2 | 	cmp	_var06, #0 wz
29b28     01 7A 06 A6 |  if_e	mov	result1, #1
29b2c     43 7B 02 56 |  if_ne	mov	result1, _var04
29b30     45 7B 82 51 |  if_ne	sub	result1, _var06
29b34                 | __system__strncmp_ret
29b34     2D 00 64 FD | 	ret
29b38                 | 
29b38                 | __system____root_opendir
29b38     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
29b3c     64 7A 06 F1 | 	add	result1, #100
29b40     04 92 06 F1 | 	add	arg01, #4
29b44     49 7B 62 FC | 	wrlong	result1, arg01
29b48     00 7A 06 F6 | 	mov	result1, #0
29b4c                 | __system____root_opendir_ret
29b4c     2D 00 64 FD | 	ret
29b50                 | 
29b50                 | __system____root_readdir
29b50     03 CA 05 F6 | 	mov	COUNT_, #3
29b54     E8 00 A0 FD | 	call	#pushregs_
29b58     49 A7 02 F6 | 	mov	local01, arg01
29b5c     4A A9 02 F6 | 	mov	local02, arg02
29b60     04 A6 06 F1 | 	add	local01, #4
29b64     53 AB 02 FB | 	rdlong	local03, local01
29b68     04 A6 86 F1 | 	sub	local01, #4
29b6c                 | LR__4160
29b6c     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
29b70     74 96 06 F1 | 	add	arg03, #116
29b74     4B AB 0A F2 | 	cmp	local03, arg03 wz
29b78     01 7A 66 A6 |  if_e	neg	result1, #1
29b7c     48 00 90 AD |  if_e	jmp	#LR__4161
29b80     55 97 0A FB | 	rdlong	arg03, local03 wz
29b84     04 AA 06 A1 |  if_e	add	local03, #4
29b88     E0 FF 9F AD |  if_e	jmp	#LR__4160
29b8c     55 95 02 FB | 	rdlong	arg02, local03
29b90     01 94 06 F1 | 	add	arg02, #1
29b94     54 93 02 F6 | 	mov	arg01, local02
29b98     40 96 06 F6 | 	mov	arg03, #64
29b9c     48 FE BF FD | 	call	#__system__strncpy
29ba0     50 A8 06 F1 | 	add	local02, #80
29ba4     54 03 48 FC | 	wrbyte	#1, local02
29ba8     08 A8 86 F1 | 	sub	local02, #8
29bac     54 01 68 FC | 	wrlong	#0, local02
29bb0     04 A8 06 F1 | 	add	local02, #4
29bb4     54 01 68 FC | 	wrlong	#0, local02
29bb8     04 AA 06 F1 | 	add	local03, #4
29bbc     04 A6 06 F1 | 	add	local01, #4
29bc0     53 AB 62 FC | 	wrlong	local03, local01
29bc4     00 7A 06 F6 | 	mov	result1, #0
29bc8                 | LR__4161
29bc8     E7 F0 03 F6 | 	mov	ptra, fp
29bcc     F2 00 A0 FD | 	call	#popregs_
29bd0                 | __system____root_readdir_ret
29bd0     2D 00 64 FD | 	ret
29bd4                 | 
29bd4                 | __system____root_closedir
29bd4     00 7A 06 F6 | 	mov	result1, #0
29bd8                 | __system____root_closedir_ret
29bd8     2D 00 64 FD | 	ret
29bdc                 | 
29bdc                 | __system____root_stat
29bdc     4A 81 02 F6 | 	mov	_var01, arg02
29be0     40 93 02 F6 | 	mov	arg01, _var01
29be4     00 94 06 F6 | 	mov	arg02, #0
29be8     34 96 06 F6 | 	mov	arg03, #52
29bec     D8 00 A0 FD | 	call	#\builtin_bytefill_
29bf0     08 80 06 F1 | 	add	_var01, #8
29bf4     08 00 80 FF 
29bf8     40 FF 6B FC | 	wrlong	##4607, _var01
29bfc     00 7A 06 F6 | 	mov	result1, #0
29c00                 | __system____root_stat_ret
29c00     2D 00 64 FD | 	ret
29c04                 | 
29c04                 | __system___normalizeName
29c04     00 80 06 F6 | 	mov	_var01, #0
29c08     49 83 02 F6 | 	mov	_var02, arg01
29c0c     41 85 02 F6 | 	mov	_var03, _var02
29c10                 | LR__4170
29c10     41 87 CA FA | 	rdbyte	_var04, _var02 wz
29c14     5C 01 90 AD |  if_e	jmp	#LR__4189
29c18     00 80 0E F2 | 	cmp	_var01, #0 wz
29c1c     42 87 02 56 |  if_ne	mov	_var04, _var03
29c20     01 84 06 51 |  if_ne	add	_var03, #1
29c24     43 5F 48 5C |  if_ne	wrbyte	#47, _var04
29c28     00 80 06 56 |  if_ne	mov	_var01, #0
29c2c     41 87 C2 FA | 	rdbyte	_var04, _var02
29c30     2E 86 0E F2 | 	cmp	_var04, #46 wz
29c34     D8 00 90 5D |  if_ne	jmp	#LR__4182
29c38     01 82 06 F1 | 	add	_var02, #1
29c3c     41 87 C2 FA | 	rdbyte	_var04, _var02
29c40     01 82 86 F1 | 	sub	_var02, #1
29c44     2F 86 0E F2 | 	cmp	_var04, #47 wz
29c48     18 00 90 AD |  if_e	jmp	#LR__4171
29c4c     01 82 06 F1 | 	add	_var02, #1
29c50     41 89 C2 FA | 	rdbyte	_var05, _var02
29c54     01 82 86 F1 | 	sub	_var02, #1
29c58     44 8B 02 F6 | 	mov	_var06, _var05
29c5c     07 8A 4E F7 | 	zerox	_var06, #7 wz
29c60     10 00 90 5D |  if_ne	jmp	#LR__4172
29c64                 | LR__4171
29c64     41 8D 02 F6 | 	mov	_var07, _var02
29c68     01 8C 06 F1 | 	add	_var07, #1
29c6c     46 83 02 F6 | 	mov	_var02, _var07
29c70     E0 00 90 FD | 	jmp	#LR__4186
29c74                 | LR__4172
29c74     01 82 06 F1 | 	add	_var02, #1
29c78     41 8D C2 FA | 	rdbyte	_var07, _var02
29c7c     01 82 86 F1 | 	sub	_var02, #1
29c80     46 87 E2 F8 | 	getbyte	_var04, _var07, #0
29c84     2E 86 0E F2 | 	cmp	_var04, #46 wz
29c88     84 00 90 5D |  if_ne	jmp	#LR__4181
29c8c     02 82 06 F1 | 	add	_var02, #2
29c90     41 8D C2 FA | 	rdbyte	_var07, _var02
29c94     02 82 86 F1 | 	sub	_var02, #2
29c98     46 87 E2 F8 | 	getbyte	_var04, _var07, #0
29c9c     2F 86 0E F2 | 	cmp	_var04, #47 wz
29ca0     18 00 90 AD |  if_e	jmp	#LR__4173
29ca4     02 82 06 F1 | 	add	_var02, #2
29ca8     41 89 C2 FA | 	rdbyte	_var05, _var02
29cac     02 82 86 F1 | 	sub	_var02, #2
29cb0     44 8B 02 F6 | 	mov	_var06, _var05
29cb4     07 8A 4E F7 | 	zerox	_var06, #7 wz
29cb8     54 00 90 5D |  if_ne	jmp	#LR__4180
29cbc                 | LR__4173
29cbc     02 82 06 F1 | 	add	_var02, #2
29cc0     49 85 5A F2 | 	cmps	_var03, arg01 wcz
29cc4     40 00 90 ED |  if_be	jmp	#LR__4179
29cc8     42 8F 02 F6 | 	mov	_var08, _var03
29ccc     01 8E 86 F1 | 	sub	_var08, #1
29cd0                 | LR__4174
29cd0     47 87 C2 FA | 	rdbyte	_var04, _var08
29cd4     2F 86 0E F2 | 	cmp	_var04, #47 wz
29cd8     0C 00 90 5D |  if_ne	jmp	#LR__4175
29cdc     49 8F 5A F2 | 	cmps	_var08, arg01 wcz
29ce0     01 8E 86 11 |  if_a	sub	_var08, #1
29ce4     E8 FF 9F 1D |  if_a	jmp	#LR__4174
29ce8                 | LR__4175
29ce8     D7 0C 48 FB | 	callpa	#(@LR__4177-@LR__4176)>>2,fcache_load_ptr_
29cec                 | LR__4176
29cec     49 8F 5A F2 | 	cmps	_var08, arg01 wcz
29cf0     10 00 90 ED |  if_be	jmp	#LR__4178
29cf4     47 87 C2 FA | 	rdbyte	_var04, _var08
29cf8     2F 86 0E F2 | 	cmp	_var04, #47 wz
29cfc     01 8E 86 51 |  if_ne	sub	_var08, #1
29d00     E8 FF 9F 5D |  if_ne	jmp	#LR__4176
29d04                 | LR__4177
29d04                 | LR__4178
29d04     47 85 02 F6 | 	mov	_var03, _var08
29d08                 | LR__4179
29d08     01 80 06 F6 | 	mov	_var01, #1
29d0c     44 00 90 FD | 	jmp	#LR__4186
29d10                 | LR__4180
29d10                 | LR__4181
29d10                 | LR__4182
29d10     D7 18 48 FB | 	callpa	#(@LR__4184-@LR__4183)>>2,fcache_load_ptr_
29d14                 | LR__4183
29d14     41 87 CA FA | 	rdbyte	_var04, _var02 wz
29d18     43 8D 02 56 |  if_ne	mov	_var07, _var04
29d1c     2F 8C 0E 52 |  if_ne	cmp	_var07, #47 wz
29d20     20 00 90 AD |  if_e	jmp	#LR__4185
29d24     41 8B 02 F6 | 	mov	_var06, _var02
29d28     41 89 02 F6 | 	mov	_var05, _var02
29d2c     01 88 06 F1 | 	add	_var05, #1
29d30     45 91 C2 FA | 	rdbyte	_var09, _var06
29d34     44 83 02 F6 | 	mov	_var02, _var05
29d38     42 91 42 FC | 	wrbyte	_var09, _var03
29d3c     01 84 06 F1 | 	add	_var03, #1
29d40     D0 FF 9F FD | 	jmp	#LR__4183
29d44                 | LR__4184
29d44                 | LR__4185
29d44     41 87 C2 FA | 	rdbyte	_var04, _var02
29d48     2F 86 0E F2 | 	cmp	_var04, #47 wz
29d4c     C0 FE 9F 5D |  if_ne	jmp	#LR__4170
29d50     01 80 06 F6 | 	mov	_var01, #1
29d54                 | LR__4186
29d54     D7 0C 48 FB | 	callpa	#(@LR__4188-@LR__4187)>>2,fcache_load_ptr_
29d58                 | LR__4187
29d58     41 87 C2 FA | 	rdbyte	_var04, _var02
29d5c     2F 86 0E F2 | 	cmp	_var04, #47 wz
29d60     41 8D 02 A6 |  if_e	mov	_var07, _var02
29d64     01 8C 06 A1 |  if_e	add	_var07, #1
29d68     46 83 02 A6 |  if_e	mov	_var02, _var07
29d6c     E8 FF 9F AD |  if_e	jmp	#LR__4187
29d70                 | LR__4188
29d70     9C FE 9F FD | 	jmp	#LR__4170
29d74                 | LR__4189
29d74     42 01 48 FC | 	wrbyte	#0, _var03
29d78                 | __system___normalizeName_ret
29d78     2D 00 64 FD | 	ret
29d7c                 | 
29d7c                 | __system___strrev
29d7c     49 81 CA FA | 	rdbyte	_var01, arg01 wz
29d80     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
29d84     49 83 02 F6 | 	mov	_var02, arg01
29d88     D7 06 48 FB | 	callpa	#(@LR__4191-@LR__4190)>>2,fcache_load_ptr_
29d8c                 | LR__4190
29d8c     41 81 CA FA | 	rdbyte	_var01, _var02 wz
29d90     01 82 06 51 |  if_ne	add	_var02, #1
29d94     F4 FF 9F 5D |  if_ne	jmp	#LR__4190
29d98                 | LR__4191
29d98     01 82 86 F1 | 	sub	_var02, #1
29d9c     D7 12 48 FB | 	callpa	#(@LR__4193-@LR__4192)>>2,fcache_load_ptr_
29da0                 | LR__4192
29da0     49 83 5A F2 | 	cmps	_var02, arg01 wcz
29da4     1C 00 90 ED |  if_be	jmp	#LR__4194
29da8     49 81 C2 FA | 	rdbyte	_var01, arg01
29dac     41 85 C2 FA | 	rdbyte	_var03, _var02
29db0     49 85 42 FC | 	wrbyte	_var03, arg01
29db4     41 81 42 FC | 	wrbyte	_var01, _var02
29db8     01 92 06 F1 | 	add	arg01, #1
29dbc     01 82 86 F1 | 	sub	_var02, #1
29dc0     DC FF 9F FD | 	jmp	#LR__4192
29dc4                 | LR__4193
29dc4                 | LR__4194
29dc4                 | __system___strrev_ret
29dc4     2D 00 64 FD | 	ret
29dc8                 | 
29dc8                 | __system___fmtpad
29dc8     06 CA 05 F6 | 	mov	COUNT_, #6
29dcc     E8 00 A0 FD | 	call	#pushregs_
29dd0     49 A7 02 F6 | 	mov	local01, arg01
29dd4     4A A9 02 F6 | 	mov	local02, arg02
29dd8     4B AB 02 F6 | 	mov	local03, arg03
29ddc     54 93 EA F8 | 	getbyte	arg01, local02, #1
29de0     16 A8 46 F0 | 	shr	local02, #22
29de4     03 A8 0E F5 | 	and	local02, #3 wz
29de8     00 AC 06 F6 | 	mov	local04, #0
29dec     01 A8 06 A6 |  if_e	mov	local02, #1
29df0     4C A9 CA F7 | 	test	local02, arg04 wz
29df4     00 7A 06 A6 |  if_e	mov	result1, #0
29df8     88 00 90 AD |  if_e	jmp	#LR__4203
29dfc     49 AB C2 F2 | 	subr	local03, arg01
29e00     01 AA 56 F2 | 	cmps	local03, #1 wc
29e04     00 7A 06 C6 |  if_b	mov	result1, #0
29e08     78 00 90 CD |  if_b	jmp	#LR__4203
29e0c     03 A8 0E F2 | 	cmp	local02, #3 wz
29e10     18 00 90 5D |  if_ne	jmp	#LR__4200
29e14     01 98 0E F2 | 	cmp	arg04, #1 wz
29e18     6E A8 62 FD | 	wrz	local02
29e1c     54 AB 02 F1 | 	add	local03, local02
29e20     55 AB 52 F6 | 	abs	local03, local03 wc
29e24     01 AA 46 F0 | 	shr	local03, #1
29e28     55 AB 82 F6 | 	negc	local03, local03
29e2c                 | LR__4200
29e2c     01 AA 56 F2 | 	cmps	local03, #1 wc
29e30     4C 00 90 CD |  if_b	jmp	#LR__4202
29e34     55 AF 02 F6 | 	mov	local05, local03
29e38                 | LR__4201
29e38     53 A9 02 F6 | 	mov	local02, local01
29e3c     53 B1 02 F6 | 	mov	local06, local01
29e40     13 A8 46 F7 | 	zerox	local02, #19
29e44     14 B0 46 F0 | 	shr	local06, #20
29e48     02 B0 66 F0 | 	shl	local06, #2
29e4c     2D B1 02 F1 | 	add	local06, __methods__
29e50     58 B1 02 FB | 	rdlong	local06, local06
29e54     20 92 06 F6 | 	mov	arg01, #32
29e58     32 AB 02 F6 | 	mov	local03, objptr
29e5c     54 65 02 F6 | 	mov	objptr, local02
29e60     2D B0 62 FD | 	call	local06
29e64     55 65 02 F6 | 	mov	objptr, local03
29e68     3D B1 02 F6 | 	mov	local06, result1
29e6c     00 B0 56 F2 | 	cmps	local06, #0 wc
29e70     58 7B 02 C6 |  if_b	mov	result1, local06
29e74     0C 00 90 CD |  if_b	jmp	#LR__4203
29e78     58 AD 02 F1 | 	add	local04, local06
29e7c     EE AF 6E FB | 	djnz	local05, #LR__4201
29e80                 | LR__4202
29e80     56 7B 02 F6 | 	mov	result1, local04
29e84                 | LR__4203
29e84     E7 F0 03 F6 | 	mov	ptra, fp
29e88     F2 00 A0 FD | 	call	#popregs_
29e8c                 | __system___fmtpad_ret
29e8c     2D 00 64 FD | 	ret
29e90                 | 
29e90                 | __system___uitoa
29e90     04 CA 05 F6 | 	mov	COUNT_, #4
29e94     E8 00 A0 FD | 	call	#pushregs_
29e98     49 A7 02 F6 | 	mov	local01, arg01
29e9c     00 9A 4E F2 | 	cmps	arg05, #0 wz
29ea0     53 9B 02 F6 | 	mov	arg05, local01
29ea4     00 A8 06 F6 | 	mov	local02, #0
29ea8     37 AA 06 56 |  if_ne	mov	local03, #55
29eac     57 AA 06 A6 |  if_e	mov	local03, #87
29eb0                 | LR__4210
29eb0     4B 95 12 FD | 	qdiv	arg02, arg03
29eb4     19 AC 62 FD | 	getqy	local04
29eb8     4B 95 12 FD | 	qdiv	arg02, arg03
29ebc     0A AC 16 F2 | 	cmp	local04, #10 wc
29ec0     30 AC 06 C1 |  if_b	add	local04, #48
29ec4     55 AD 02 31 |  if_ae	add	local04, local03
29ec8     4D AD 42 FC | 	wrbyte	local04, arg05
29ecc     01 9A 06 F1 | 	add	arg05, #1
29ed0     01 A8 06 F1 | 	add	local02, #1
29ed4     18 94 62 FD | 	getqx	arg02
29ed8     00 94 0E F2 | 	cmp	arg02, #0 wz
29edc     D0 FF 9F 5D |  if_ne	jmp	#LR__4210
29ee0     4C A9 12 F2 | 	cmp	local02, arg04 wc
29ee4     C8 FF 9F CD |  if_b	jmp	#LR__4210
29ee8     4D 01 48 FC | 	wrbyte	#0, arg05
29eec     53 93 02 F6 | 	mov	arg01, local01
29ef0     88 FE BF FD | 	call	#__system___strrev
29ef4     54 7B 02 F6 | 	mov	result1, local02
29ef8     E7 F0 03 F6 | 	mov	ptra, fp
29efc     F2 00 A0 FD | 	call	#popregs_
29f00                 | __system___uitoa_ret
29f00     2D 00 64 FD | 	ret
29f04                 | 
29f04                 | __system__disassemble_0582
29f04     10 CA 05 F6 | 	mov	COUNT_, #16
29f08     E8 00 A0 FD | 	call	#pushregs_
29f0c     49 A7 02 F6 | 	mov	local01, arg01
29f10     4A A9 02 F6 | 	mov	local02, arg02
29f14     4B AB 02 F6 | 	mov	local03, arg03
29f18     4C AD 02 F6 | 	mov	local04, arg04
29f1c     4D AF 02 F6 | 	mov	local05, arg05
29f20     57 93 52 F6 | 	abs	arg01, local05 wc
29f24     1F B0 C6 C9 |  if_b	decod	local06, #31
29f28     00 B0 06 36 |  if_ae	mov	local06, #0
29f2c     40 CF BF FD | 	call	#__system___float_fromuns
29f30     58 7B 62 F5 | 	xor	result1, local06
29f34     3D B3 02 F6 | 	mov	local07, result1
29f38     00 B4 06 F6 | 	mov	local08, #0
29f3c     53 93 02 F6 | 	mov	arg01, local01
29f40     00 94 06 F6 | 	mov	arg02, #0
29f44     01 96 06 F6 | 	mov	arg03, #1
29f48     5C D7 BF FD | 	call	#__system___float_cmp
29f4c     00 7A 0E F2 | 	cmp	result1, #0 wz
29f50     00 B6 06 A6 |  if_e	mov	local09, #0
29f54     54 01 68 AC |  if_e	wrlong	#0, local02
29f58     55 B7 62 AC |  if_e	wrlong	local09, local03
29f5c     8C 01 90 AD |  if_e	jmp	#LR__4232
29f60     53 93 02 F6 | 	mov	arg01, local01
29f64     40 DC BF FD | 	call	#__system____builtin_ilogb
29f68     3D B9 02 F6 | 	mov	local10, result1
29f6c     0A AE 0E F2 | 	cmp	local05, #10 wz
29f70     24 00 90 5D |  if_ne	jmp	#LR__4220
29f74     5C B7 02 F6 | 	mov	local09, local10
29f78     01 B6 66 F0 | 	shl	local09, #1
29f7c     5C B7 02 F1 | 	add	local09, local10
29f80     5B B9 52 F6 | 	abs	local10, local09 wc
29f84     0A B8 16 FD | 	qdiv	local10, #10
29f88     09 BA 06 F6 | 	mov	local11, #9
29f8c     18 B8 62 FD | 	getqx	local10
29f90     5C B9 82 F6 | 	negc	local10, local10
29f94     04 00 90 FD | 	jmp	#LR__4221
29f98                 | LR__4220
29f98     18 BA 06 F6 | 	mov	local11, #24
29f9c                 | LR__4221
29f9c                 | LR__4222
29f9c     08 B4 56 F2 | 	cmps	local08, #8 wc
29fa0     01 B4 06 F1 | 	add	local08, #1
29fa4     60 00 90 3D |  if_ae	jmp	#LR__4223
29fa8     00 C0 1F FF 
29fac     00 92 06 F6 | 	mov	arg01, ##1065353216
29fb0     59 95 02 F6 | 	mov	arg02, local07
29fb4     5C 97 02 F6 | 	mov	arg03, local10
29fb8     D0 E2 BF FD | 	call	#__system___float_pow_n
29fbc     3D 95 02 F6 | 	mov	arg02, result1
29fc0     53 93 02 F6 | 	mov	arg01, local01
29fc4     B0 D4 BF FD | 	call	#__system___float_div
29fc8     3D BD 02 F6 | 	mov	local12, result1
29fcc     5E 93 02 F6 | 	mov	arg01, local12
29fd0     00 C0 1F FF 
29fd4     00 94 06 F6 | 	mov	arg02, ##1065353216
29fd8     01 96 06 F6 | 	mov	arg03, #1
29fdc     C8 D6 BF FD | 	call	#__system___float_cmp
29fe0     00 7A 56 F2 | 	cmps	result1, #0 wc
29fe4     01 B8 86 C1 |  if_b	sub	local10, #1
29fe8     B0 FF 9F CD |  if_b	jmp	#LR__4222
29fec     59 95 02 F6 | 	mov	arg02, local07
29ff0     5E 93 02 F6 | 	mov	arg01, local12
29ff4     01 96 66 F6 | 	neg	arg03, #1
29ff8     AC D6 BF FD | 	call	#__system___float_cmp
29ffc     00 7A 56 F2 | 	cmps	result1, #0 wc
2a000     01 B8 06 31 |  if_ae	add	local10, #1
2a004     94 FF 9F 3D |  if_ae	jmp	#LR__4222
2a008                 | LR__4223
2a008     5E 93 02 F6 | 	mov	arg01, local12
2a00c     98 DB BF FD | 	call	#__system____builtin_ilogb
2a010     3D BF 02 F6 | 	mov	local13, result1
2a014     5E C1 02 F6 | 	mov	local14, local12
2a018     17 C1 06 F4 | 	bitl	local14, #279
2a01c     17 C0 26 F4 | 	bith	local14, #23
2a020     5F C1 62 F0 | 	shl	local14, local13
2a024     02 AE 0E F2 | 	cmp	local05, #2 wz
2a028     02 AC 66 A0 |  if_e	shl	local04, #2
2a02c     00 C2 06 F6 | 	mov	local15, #0
2a030     00 AC 56 F2 | 	cmps	local04, #0 wc
2a034     10 00 90 3D |  if_ae	jmp	#LR__4224
2a038     5C AD C2 F2 | 	subr	local04, local10
2a03c     00 AC 56 F2 | 	cmps	local04, #0 wc
2a040     A0 00 90 CD |  if_b	jmp	#LR__4231
2a044     04 00 90 FD | 	jmp	#LR__4225
2a048                 | LR__4224
2a048     01 AC 06 F1 | 	add	local04, #1
2a04c                 | LR__4225
2a04c     5D AD 7A F3 | 	fles	local04, local11 wcz
2a050     01 C4 06 F6 | 	mov	local16, #1
2a054     D7 22 48 FB | 	callpa	#(@LR__4227-@LR__4226)>>2,fcache_load_ptr_
2a058                 | LR__4226
2a058     00 40 00 FF 
2a05c     00 C2 16 F2 | 	cmp	local15, ##8388608 wc
2a060     38 00 90 3D |  if_ae	jmp	#LR__4228
2a064     01 AC 56 F2 | 	cmps	local04, #1 wc
2a068     01 AC 86 F1 | 	sub	local04, #1
2a06c     2C 00 90 CD |  if_b	jmp	#LR__4228
2a070     57 C3 02 FD | 	qmul	local15, local05
2a074     60 BF 02 F6 | 	mov	local13, local14
2a078     17 BE 46 F0 | 	shr	local13, #23
2a07c     17 C1 06 F4 | 	bitl	local14, #279
2a080     18 C2 62 FD | 	getqx	local15
2a084     57 C5 02 FD | 	qmul	local16, local05
2a088     18 C4 62 FD | 	getqx	local16
2a08c     57 C1 02 FD | 	qmul	local14, local05
2a090     5F C3 02 F1 | 	add	local15, local13
2a094     18 C0 62 FD | 	getqx	local14
2a098     BC FF 9F FD | 	jmp	#LR__4226
2a09c                 | LR__4227
2a09c                 | LR__4228
2a09c     57 B7 02 F6 | 	mov	local09, local05
2a0a0     17 B6 66 F0 | 	shl	local09, #23
2a0a4     5B BF 52 F6 | 	abs	local13, local09 wc
2a0a8     01 BE 46 F0 | 	shr	local13, #1
2a0ac     5F BF 82 F6 | 	negc	local13, local13
2a0b0     5F C1 1A F2 | 	cmp	local14, local13 wcz
2a0b4     20 00 90 1D |  if_a	jmp	#LR__4229
2a0b8     17 AE 66 F0 | 	shl	local05, #23
2a0bc     57 BF 52 F6 | 	abs	local13, local05 wc
2a0c0     01 BE 46 F0 | 	shr	local13, #1
2a0c4     5F BF 82 F6 | 	negc	local13, local13
2a0c8     5F C1 0A F2 | 	cmp	local14, local13 wz
2a0cc     14 00 90 5D |  if_ne	jmp	#LR__4230
2a0d0     01 C2 CE F7 | 	test	local15, #1 wz
2a0d4     0C 00 90 AD |  if_e	jmp	#LR__4230
2a0d8                 | LR__4229
2a0d8     01 C2 06 F1 | 	add	local15, #1
2a0dc     62 C3 0A F2 | 	cmp	local15, local16 wz
2a0e0     01 B8 06 A1 |  if_e	add	local10, #1
2a0e4                 | LR__4230
2a0e4                 | LR__4231
2a0e4     54 C3 62 FC | 	wrlong	local15, local02
2a0e8     55 B9 62 FC | 	wrlong	local10, local03
2a0ec                 | LR__4232
2a0ec     E7 F0 03 F6 | 	mov	ptra, fp
2a0f0     F2 00 A0 FD | 	call	#popregs_
2a0f4                 | __system__disassemble_0582_ret
2a0f4     2D 00 64 FD | 	ret
2a0f8                 | 
2a0f8                 | __system__emitsign_0584
2a0f8     00 7A 06 F6 | 	mov	result1, #0
2a0fc     00 94 0E F2 | 	cmp	arg02, #0 wz
2a100     49 81 02 56 |  if_ne	mov	_var01, arg01
2a104     01 92 06 51 |  if_ne	add	arg01, #1
2a108     40 95 42 5C |  if_ne	wrbyte	arg02, _var01
2a10c     01 7A 06 56 |  if_ne	mov	result1, #1
2a110     00 96 0E F2 | 	cmp	arg03, #0 wz
2a114     49 61 48 5C |  if_ne	wrbyte	#48, arg01
2a118     01 92 06 51 |  if_ne	add	arg01, #1
2a11c     49 97 42 5C |  if_ne	wrbyte	arg03, arg01
2a120     02 7A 06 51 |  if_ne	add	result1, #2
2a124                 | __system__emitsign_0584_ret
2a124     2D 00 64 FD | 	ret
2a128                 | 
2a128                 | __system___getiolock_0622
2a128     01 CA 05 F6 | 	mov	COUNT_, #1
2a12c     E8 00 A0 FD | 	call	#pushregs_
2a130     90 F8 BF FD | 	call	#__system____getftab
2a134     3D A7 0A F6 | 	mov	local01, result1 wz
2a138     10 00 90 AD |  if_e	jmp	#LR__4240
2a13c     08 A6 06 F1 | 	add	local01, #8
2a140     53 7B 0A FB | 	rdlong	result1, local01 wz
2a144     08 A6 86 F1 | 	sub	local01, #8
2a148     10 00 90 5D |  if_ne	jmp	#LR__4241
2a14c                 | LR__4240
2a14c     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
2a150     01 00 00 FF 
2a154     DC 7A 06 F1 | 	add	result1, ##732
2a158     08 00 90 FD | 	jmp	#LR__4242
2a15c                 | LR__4241
2a15c     0C A6 06 F1 | 	add	local01, #12
2a160     53 7B 02 F6 | 	mov	result1, local01
2a164                 | LR__4242
2a164     E7 F0 03 F6 | 	mov	ptra, fp
2a168     F2 00 A0 FD | 	call	#popregs_
2a16c                 | __system___getiolock_0622_ret
2a16c     2D 00 64 FD | 	ret
2a170                 | 
2a170                 | __system___gettxfunc
2a170     01 CA 05 F6 | 	mov	COUNT_, #1
2a174     E8 00 A0 FD | 	call	#pushregs_
2a178     48 F8 BF FD | 	call	#__system____getftab
2a17c     3D A7 0A F6 | 	mov	local01, result1 wz
2a180     10 00 90 AD |  if_e	jmp	#LR__4250
2a184     08 A6 06 F1 | 	add	local01, #8
2a188     53 95 0A FB | 	rdlong	arg02, local01 wz
2a18c     08 A6 86 F1 | 	sub	local01, #8
2a190     08 00 90 5D |  if_ne	jmp	#LR__4251
2a194                 | LR__4250
2a194     00 7A 06 F6 | 	mov	result1, #0
2a198     0C 00 90 FD | 	jmp	#LR__4252
2a19c                 | LR__4251
2a19c     00 88 05 FF 
2a1a0     00 A6 46 F5 | 	or	local01, ##185597952
2a1a4     53 7B 02 F6 | 	mov	result1, local01
2a1a8                 | LR__4252
2a1a8     E7 F0 03 F6 | 	mov	ptra, fp
2a1ac     F2 00 A0 FD | 	call	#popregs_
2a1b0                 | __system___gettxfunc_ret
2a1b0     2D 00 64 FD | 	ret
2a1b4                 | 
2a1b4                 | __system___getrxfunc
2a1b4     01 CA 05 F6 | 	mov	COUNT_, #1
2a1b8     E8 00 A0 FD | 	call	#pushregs_
2a1bc     04 F8 BF FD | 	call	#__system____getftab
2a1c0     3D A7 0A F6 | 	mov	local01, result1 wz
2a1c4     10 00 90 AD |  if_e	jmp	#LR__4260
2a1c8     08 A6 06 F1 | 	add	local01, #8
2a1cc     53 95 0A FB | 	rdlong	arg02, local01 wz
2a1d0     08 A6 86 F1 | 	sub	local01, #8
2a1d4     08 00 90 5D |  if_ne	jmp	#LR__4261
2a1d8                 | LR__4260
2a1d8     00 7A 06 F6 | 	mov	result1, #0
2a1dc     0C 00 90 FD | 	jmp	#LR__4262
2a1e0                 | LR__4261
2a1e0     00 90 05 FF 
2a1e4     00 A6 46 F5 | 	or	local01, ##186646528
2a1e8     53 7B 02 F6 | 	mov	result1, local01
2a1ec                 | LR__4262
2a1ec     E7 F0 03 F6 | 	mov	ptra, fp
2a1f0     F2 00 A0 FD | 	call	#popregs_
2a1f4                 | __system___getrxfunc_ret
2a1f4     2D 00 64 FD | 	ret
2a1f8                 | 
2a1f8                 | __system____ScanForChar
2a1f8     49 81 02 F6 | 	mov	_var01, arg01
2a1fc     49 83 02 F6 | 	mov	_var02, arg01
2a200     D7 06 48 FB | 	callpa	#(@LR__4271-@LR__4270)>>2,fcache_load_ptr_
2a204                 | LR__4270
2a204     41 7B CA FA | 	rdbyte	result1, _var02 wz
2a208     01 82 06 51 |  if_ne	add	_var02, #1
2a20c     F4 FF 9F 5D |  if_ne	jmp	#LR__4270
2a210                 | LR__4271
2a210     49 83 82 F1 | 	sub	_var02, arg01
2a214     41 7B 02 F6 | 	mov	result1, _var02
2a218     3D 93 0A F6 | 	mov	arg01, result1 wz
2a21c     00 7A 06 A6 |  if_e	mov	result1, #0
2a220     B8 00 90 AD |  if_e	jmp	#LR__4278
2a224     4A 85 02 F6 | 	mov	_var03, arg02
2a228     07 84 4E F7 | 	zerox	_var03, #7 wz
2a22c     00 7A 06 A6 |  if_e	mov	result1, #0
2a230     A8 00 90 AD |  if_e	jmp	#LR__4278
2a234     01 96 16 F2 | 	cmp	arg03, #1 wc
2a238     00 98 0E C2 |  if_b	cmp	arg04, #0 wz
2a23c     01 96 06 86 |  if_c_and_z	mov	arg03, #1
2a240     00 7A 06 46 |  if_c_and_nz	mov	result1, #0
2a244     94 00 90 4D |  if_c_and_nz	jmp	#LR__4278
2a248     49 97 1A F2 | 	cmp	arg03, arg01 wcz
2a24c     10 00 90 ED |  if_be	jmp	#LR__4272
2a250     00 98 0E F2 | 	cmp	arg04, #0 wz
2a254     00 7A 06 A6 |  if_e	mov	result1, #0
2a258     80 00 90 AD |  if_e	jmp	#LR__4278
2a25c     49 97 02 F6 | 	mov	arg03, arg01
2a260                 | LR__4272
2a260     01 96 86 F1 | 	sub	arg03, #1
2a264     00 98 0E F2 | 	cmp	arg04, #0 wz
2a268     38 00 90 5D |  if_ne	jmp	#LR__4274
2a26c     4B 87 02 F6 | 	mov	_var04, arg03
2a270     49 89 02 F6 | 	mov	_var05, arg01
2a274                 | LR__4273
2a274     44 87 12 F2 | 	cmp	_var04, _var05 wc
2a278     5C 00 90 3D |  if_ae	jmp	#LR__4277
2a27c     43 85 02 F6 | 	mov	_var03, _var04
2a280     40 85 02 F1 | 	add	_var03, _var01
2a284     42 85 C2 FA | 	rdbyte	_var03, _var03
2a288     4A 99 E2 F8 | 	getbyte	arg04, arg02, #0
2a28c     4C 85 0A F2 | 	cmp	_var03, arg04 wz
2a290     01 86 06 A1 |  if_e	add	_var04, #1
2a294     43 7B 02 A6 |  if_e	mov	result1, _var04
2a298     40 00 90 AD |  if_e	jmp	#LR__4278
2a29c     01 86 06 F1 | 	add	_var04, #1
2a2a0     D0 FF 9F FD | 	jmp	#LR__4273
2a2a4                 | LR__4274
2a2a4     4B 87 02 F6 | 	mov	_var04, arg03
2a2a8                 | LR__4275
2a2a8     4B 87 1A F2 | 	cmp	_var04, arg03 wcz
2a2ac     28 00 90 1D |  if_a	jmp	#LR__4276
2a2b0     43 89 02 F6 | 	mov	_var05, _var04
2a2b4     40 89 02 F1 | 	add	_var05, _var01
2a2b8     44 85 C2 FA | 	rdbyte	_var03, _var05
2a2bc     4A 89 E2 F8 | 	getbyte	_var05, arg02, #0
2a2c0     44 85 0A F2 | 	cmp	_var03, _var05 wz
2a2c4     01 86 06 A1 |  if_e	add	_var04, #1
2a2c8     43 7B 02 A6 |  if_e	mov	result1, _var04
2a2cc     0C 00 90 AD |  if_e	jmp	#LR__4278
2a2d0     01 86 86 F1 | 	sub	_var04, #1
2a2d4     D0 FF 9F FD | 	jmp	#LR__4275
2a2d8                 | LR__4276
2a2d8                 | LR__4277
2a2d8     00 7A 06 F6 | 	mov	result1, #0
2a2dc                 | LR__4278
2a2dc                 | __system____ScanForChar_ret
2a2dc     2D 00 64 FD | 	ret
2a2e0                 | 
2a2e0                 | __system___basic_dir
2a2e0     06 CA 05 F6 | 	mov	COUNT_, #6
2a2e4     E8 00 A0 FD | 	call	#pushregs_
2a2e8     50 F0 07 F1 | 	add	ptra, #80
2a2ec     49 A7 0A F6 | 	mov	local01, arg01 wz
2a2f0     4A A9 02 F6 | 	mov	local02, arg02
2a2f4     53 AB CA 5A |  if_ne	rdbyte	local03, local01 wz
2a2f8     5C 00 90 AD |  if_e	jmp	#LR__4280
2a2fc     03 00 00 FF 
2a300     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a304     34 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
2a308     03 00 00 FF 
2a30c     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a310     03 00 00 5F 
2a314     34 69 06 51 |  if_ne	add	ptr___system__dat__, ##1844
2a318     34 93 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2a31c     03 00 00 5F 
2a320     34 69 86 51 |  if_ne	sub	ptr___system__dat__, ##1844
2a324     AC E9 BF 5D |  if_ne	call	#__system__closedir
2a328     93 01 00 FF 
2a32c     E8 92 06 F6 | 	mov	arg01, ##@LR__5478
2a330     B8 E8 BF FD | 	call	#__system__opendir
2a334     03 00 00 FF 
2a338     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a33c     34 7B 62 FC | 	wrlong	result1, ptr___system__dat__
2a340     04 68 06 F1 | 	add	ptr___system__dat__, #4
2a344     34 A9 62 FC | 	wrlong	local02, ptr___system__dat__
2a348     04 68 06 F1 | 	add	ptr___system__dat__, #4
2a34c     34 A7 62 FC | 	wrlong	local01, ptr___system__dat__
2a350     03 00 00 FF 
2a354     3C 69 86 F1 | 	sub	ptr___system__dat__, ##1852
2a358                 | LR__4280
2a358     03 00 00 FF 
2a35c     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a360     34 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
2a364     03 00 00 FF 
2a368     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a36c     93 01 00 AF 
2a370     EA 7A 06 A6 |  if_e	mov	result1, ##@LR__5479
2a374     7C 01 90 AD |  if_e	jmp	#LR__4288
2a378                 | LR__4281
2a378     03 00 00 FF 
2a37c     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a380     34 93 02 FB | 	rdlong	arg01, ptr___system__dat__
2a384     03 00 00 FF 
2a388     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a38c     B8 E9 BF FD | 	call	#__system__readdir
2a390     3D AD 0A F6 | 	mov	local04, result1 wz
2a394     38 00 90 5D |  if_ne	jmp	#LR__4282
2a398     03 00 00 FF 
2a39c     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a3a0     34 93 02 FB | 	rdlong	arg01, ptr___system__dat__
2a3a4     03 00 00 FF 
2a3a8     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a3ac     24 E9 BF FD | 	call	#__system__closedir
2a3b0     03 00 00 FF 
2a3b4     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a3b8     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
2a3bc     03 00 00 FF 
2a3c0     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a3c4     93 01 00 FF 
2a3c8     EC 7A 06 F6 | 	mov	result1, ##@LR__5480
2a3cc     24 01 90 FD | 	jmp	#LR__4288
2a3d0                 | LR__4282
2a3d0     03 00 00 FF 
2a3d4     3C 69 06 F1 | 	add	ptr___system__dat__, ##1852
2a3d8     34 95 02 FB | 	rdlong	arg02, ptr___system__dat__
2a3dc     03 00 00 FF 
2a3e0     3C 69 86 F1 | 	sub	ptr___system__dat__, ##1852
2a3e4     56 93 02 F6 | 	mov	arg01, local04
2a3e8     4C 09 B0 FD | 	call	#__system___pat_match
2a3ec     00 7A 0E F2 | 	cmp	result1, #0 wz
2a3f0     84 FF 9F AD |  if_e	jmp	#LR__4281
2a3f4     03 00 00 FF 
2a3f8     38 69 06 F1 | 	add	ptr___system__dat__, ##1848
2a3fc     34 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
2a400     03 00 00 FF 
2a404     38 69 86 F1 | 	sub	ptr___system__dat__, ##1848
2a408     B0 00 90 AD |  if_e	jmp	#LR__4285
2a40c     E7 94 02 F6 | 	mov	arg02, fp
2a410     10 94 06 F1 | 	add	arg02, #16
2a414     56 93 02 F6 | 	mov	arg01, local04
2a418     10 F2 BF FD | 	call	#__system__stat
2a41c     00 7A 4E F2 | 	cmps	result1, #0 wz
2a420     93 01 00 5F 
2a424     EE 7A 06 56 |  if_ne	mov	result1, ##@LR__5481
2a428     C8 00 90 5D |  if_ne	jmp	#LR__4288
2a42c     18 CE 05 F1 | 	add	fp, #24
2a430     E7 AE 02 FB | 	rdlong	local05, fp
2a434     18 CE 85 F1 | 	sub	fp, #24
2a438     78 00 00 FF 
2a43c     00 AE 06 F5 | 	and	local05, ##61440
2a440     56 AB C2 FA | 	rdbyte	local03, local04
2a444     2E AA 0E F2 | 	cmp	local03, #46 wz
2a448     02 A8 06 A6 |  if_e	mov	local02, #2
2a44c     00 A8 06 56 |  if_ne	mov	local02, #0
2a450     08 00 00 FF 
2a454     00 AE 0E F2 | 	cmp	local05, ##4096 wz
2a458     10 A8 46 A5 |  if_e	or	local02, #16
2a45c     40 00 90 AD |  if_e	jmp	#LR__4284
2a460     10 00 00 FF 
2a464     00 AE 0E F2 | 	cmp	local05, ##8192 wz
2a468     18 00 00 5F 
2a46c     00 AE 0E 52 |  if_ne	cmp	local05, ##12288 wz
2a470     20 00 00 5F 
2a474     00 AE 0E 52 |  if_ne	cmp	local05, ##16384 wz
2a478     04 A8 46 A5 |  if_e	or	local02, #4
2a47c     20 00 90 AD |  if_e	jmp	#LR__4283
2a480     18 CE 05 F1 | 	add	fp, #24
2a484     E7 AA 02 FB | 	rdlong	local03, fp
2a488     18 CE 85 F1 | 	sub	fp, #24
2a48c     92 AA CE F7 | 	test	local03, #146 wz
2a490     01 A8 46 A5 |  if_e	or	local02, #1
2a494     08 00 00 5F 
2a498     00 AE 0E 52 |  if_ne	cmp	local05, ##4096 wz
2a49c     20 A8 46 55 |  if_ne	or	local02, #32
2a4a0                 | LR__4283
2a4a0                 | LR__4284
2a4a0     03 00 00 FF 
2a4a4     38 69 06 F1 | 	add	ptr___system__dat__, ##1848
2a4a8     34 AF 02 FB | 	rdlong	local05, ptr___system__dat__
2a4ac     03 00 00 FF 
2a4b0     38 69 86 F1 | 	sub	ptr___system__dat__, ##1848
2a4b4     57 A9 CA F7 | 	test	local02, local05 wz
2a4b8     BC FE 9F AD |  if_e	jmp	#LR__4281
2a4bc                 | LR__4285
2a4bc     56 93 02 F6 | 	mov	arg01, local04
2a4c0     49 B1 02 F6 | 	mov	local06, arg01
2a4c4     D7 06 48 FB | 	callpa	#(@LR__4287-@LR__4286)>>2,fcache_load_ptr_
2a4c8                 | LR__4286
2a4c8     58 7B CA FA | 	rdbyte	result1, local06 wz
2a4cc     01 B0 06 51 |  if_ne	add	local06, #1
2a4d0     F4 FF 9F 5D |  if_ne	jmp	#LR__4286
2a4d4                 | LR__4287
2a4d4     58 93 C2 F2 | 	subr	arg01, local06
2a4d8     01 92 06 F1 | 	add	arg01, #1
2a4dc     CC E0 BF FD | 	call	#__system___gc_alloc_managed
2a4e0     3D AF 0A F6 | 	mov	local05, result1 wz
2a4e4     57 93 02 56 |  if_ne	mov	arg01, local05
2a4e8     56 95 02 56 |  if_ne	mov	arg02, local04
2a4ec     68 A6 BF 5D |  if_ne	call	#__system____builtin_strcpy
2a4f0     57 7B 02 F6 | 	mov	result1, local05
2a4f4                 | LR__4288
2a4f4     E7 F0 03 F6 | 	mov	ptra, fp
2a4f8     F2 00 A0 FD | 	call	#popregs_
2a4fc                 | __system___basic_dir_ret
2a4fc     2D 00 64 FD | 	ret
2a500                 | 
2a500                 | __system__pack_0698
2a500     49 81 02 F6 | 	mov	_var01, arg01
2a504     7F 96 06 F1 | 	add	arg03, #127
2a508     04 98 CE F7 | 	test	arg04, #4 wz
2a50c     10 00 90 AD |  if_e	jmp	#LR__4290
2a510     00 80 0E F2 | 	cmp	_var01, #0 wz
2a514     16 80 C6 A9 |  if_e	decod	_var01, #22
2a518     F7 80 26 F4 | 	bith	_var01, #247
2a51c     B4 00 90 FD | 	jmp	#LR__4299
2a520                 | LR__4290
2a520     02 98 CE F7 | 	test	arg04, #2 wz
2a524     00 C0 3F 5F 
2a528     00 80 06 56 |  if_ne	mov	_var01, ##2139095040
2a52c     00 94 06 56 |  if_ne	mov	arg02, #0
2a530     A0 00 90 5D |  if_ne	jmp	#LR__4298
2a534     08 98 CE F7 | 	test	arg04, #8 wz
2a538     00 80 06 56 |  if_ne	mov	_var01, #0
2a53c     94 00 90 5D |  if_ne	jmp	#LR__4297
2a540     FF 96 56 F2 | 	cmps	arg03, #255 wc
2a544     00 C0 3F 3F 
2a548     00 80 06 36 |  if_ae	mov	_var01, ##2139095040
2a54c     00 94 06 36 |  if_ae	mov	arg02, #0
2a550     80 00 90 3D |  if_ae	jmp	#LR__4296
2a554     01 96 56 F2 | 	cmps	arg03, #1 wc
2a558     6C 00 90 3D |  if_ae	jmp	#LR__4294
2a55c     01 94 46 F0 | 	shr	arg02, #1
2a560     40 83 02 F6 | 	mov	_var02, _var01
2a564     01 82 06 F5 | 	and	_var02, #1
2a568     1F 82 66 F0 | 	shl	_var02, #31
2a56c     41 95 42 F5 | 	or	arg02, _var02
2a570     01 80 46 F0 | 	shr	_var01, #1
2a574     D7 1E 48 FB | 	callpa	#(@LR__4292-@LR__4291)>>2,fcache_load_ptr_
2a578                 | LR__4291
2a578     00 96 56 F2 | 	cmps	arg03, #0 wc
2a57c     34 00 90 3D |  if_ae	jmp	#LR__4293
2a580     00 80 0E F2 | 	cmp	_var01, #0 wz
2a584     2C 00 90 AD |  if_e	jmp	#LR__4293
2a588     4A 93 02 F6 | 	mov	arg01, arg02
2a58c     01 92 06 F5 | 	and	arg01, #1
2a590     01 96 06 F1 | 	add	arg03, #1
2a594     01 94 46 F0 | 	shr	arg02, #1
2a598     40 83 02 F6 | 	mov	_var02, _var01
2a59c     01 82 06 F5 | 	and	_var02, #1
2a5a0     1F 82 66 F0 | 	shl	_var02, #31
2a5a4     41 95 42 F5 | 	or	arg02, _var02
2a5a8     49 95 42 F5 | 	or	arg02, arg01
2a5ac     01 80 46 F0 | 	shr	_var01, #1
2a5b0     C4 FF 9F FD | 	jmp	#LR__4291
2a5b4                 | LR__4292
2a5b4                 | LR__4293
2a5b4     00 96 56 F2 | 	cmps	arg03, #0 wc
2a5b8     18 00 90 3D |  if_ae	jmp	#LR__4295
2a5bc     00 94 0E F2 | 	cmp	arg02, #0 wz
2a5c0     6F 94 62 FD | 	wrnz	arg02
2a5c4     0C 00 90 FD | 	jmp	#LR__4295
2a5c8                 | LR__4294
2a5c8     17 81 06 F4 | 	bitl	_var01, #279
2a5cc     17 96 66 F0 | 	shl	arg03, #23
2a5d0     4B 81 42 F5 | 	or	_var01, arg03
2a5d4                 | LR__4295
2a5d4                 | LR__4296
2a5d4                 | LR__4297
2a5d4                 | LR__4298
2a5d4                 | LR__4299
2a5d4     01 80 CE F7 | 	test	_var01, #1 wz
2a5d8     01 94 46 55 |  if_ne	or	arg02, #1
2a5dc     4A 97 02 F6 | 	mov	arg03, arg02
2a5e0     00 82 06 F6 | 	mov	_var02, #0
2a5e4     FF FF 3F FF 
2a5e8     FF 95 06 F1 | 	add	arg02, ##2147483647
2a5ec     4B 95 12 F2 | 	cmp	arg02, arg03 wc
2a5f0     01 82 06 C6 |  if_b	mov	_var02, #1
2a5f4     41 81 02 F1 | 	add	_var01, _var02
2a5f8     01 98 CE F7 | 	test	arg04, #1 wz
2a5fc     1F 80 26 54 |  if_ne	bith	_var01, #31
2a600     40 7B 02 F6 | 	mov	result1, _var01
2a604                 | __system__pack_0698_ret
2a604     2D 00 64 FD | 	ret
2a608                 | 
2a608                 | __system___rxtxioctl_0788
2a608     00 95 0E F2 | 	cmp	arg02, #256 wz
2a60c     0C 00 90 AD |  if_e	jmp	#LR__4300
2a610     01 95 0E F2 | 	cmp	arg02, #257 wz
2a614     1C 00 90 AD |  if_e	jmp	#LR__4301
2a618     30 00 90 FD | 	jmp	#LR__4302
2a61c                 | LR__4300
2a61c     08 68 06 F1 | 	add	ptr___system__dat__, #8
2a620     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
2a624     08 68 86 F1 | 	sub	ptr___system__dat__, #8
2a628     4B 7B 62 FC | 	wrlong	result1, arg03
2a62c     00 7A 06 F6 | 	mov	result1, #0
2a630     28 00 90 FD | 	jmp	#LR__4303
2a634                 | LR__4301
2a634     4B 93 02 FB | 	rdlong	arg01, arg03
2a638     08 68 06 F1 | 	add	ptr___system__dat__, #8
2a63c     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
2a640     08 68 86 F1 | 	sub	ptr___system__dat__, #8
2a644     00 7A 06 F6 | 	mov	result1, #0
2a648     10 00 90 FD | 	jmp	#LR__4303
2a64c                 | LR__4302
2a64c     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a650     34 15 68 FC | 	wrlong	#10, ptr___system__dat__
2a654     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a658     01 7A 66 F6 | 	neg	result1, #1
2a65c                 | LR__4303
2a65c                 | __system___rxtxioctl_0788_ret
2a65c     2D 00 64 FD | 	ret
2a660                 | 
2a660                 | __system____dummy_flush_0789
2a660     00 7A 06 F6 | 	mov	result1, #0
2a664                 | __system____dummy_flush_0789_ret
2a664     2D 00 64 FD | 	ret
2a668                 | 
2a668                 | __system___vfswrite
2a668     09 CA 05 F6 | 	mov	COUNT_, #9
2a66c     E8 00 A0 FD | 	call	#pushregs_
2a670     49 A7 02 F6 | 	mov	local01, arg01
2a674     4A A9 02 F6 | 	mov	local02, arg02
2a678     4B AB 02 F6 | 	mov	local03, arg03
2a67c     54 AD 02 F6 | 	mov	local04, local02
2a680     08 A6 06 F1 | 	add	local01, #8
2a684     53 93 02 FB | 	rdlong	arg01, local01
2a688     08 A6 86 F1 | 	sub	local01, #8
2a68c     02 92 CE F7 | 	test	arg01, #2 wz
2a690     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a694     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a698     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a69c     01 7A 66 A6 |  if_e	neg	result1, #1
2a6a0     84 01 90 AD |  if_e	jmp	#LR__4316
2a6a4     08 A6 06 F1 | 	add	local01, #8
2a6a8     53 7B 02 FB | 	rdlong	result1, local01
2a6ac     08 A6 86 F1 | 	sub	local01, #8
2a6b0     80 7A CE F7 | 	test	result1, #128 wz
2a6b4     6C 00 90 AD |  if_e	jmp	#LR__4311
2a6b8     08 A6 06 F1 | 	add	local01, #8
2a6bc     53 95 02 FB | 	rdlong	arg02, local01
2a6c0     08 A6 86 F1 | 	sub	local01, #8
2a6c4     00 95 CE F7 | 	test	arg02, #256 wz
2a6c8     58 00 90 AD |  if_e	jmp	#LR__4310
2a6cc     30 A6 06 F1 | 	add	local01, #48
2a6d0     53 AF 02 FB | 	rdlong	local05, local01
2a6d4     57 B1 02 F6 | 	mov	local06, local05
2a6d8     30 A6 86 F1 | 	sub	local01, #48
2a6dc     13 B0 46 F7 | 	zerox	local06, #19
2a6e0     14 AE 46 F0 | 	shr	local05, #20
2a6e4     02 AE 66 F0 | 	shl	local05, #2
2a6e8     2D AF 02 F1 | 	add	local05, __methods__
2a6ec     57 AF 02 FB | 	rdlong	local05, local05
2a6f0     53 93 02 F6 | 	mov	arg01, local01
2a6f4     00 94 06 F6 | 	mov	arg02, #0
2a6f8     00 96 06 F6 | 	mov	arg03, #0
2a6fc     02 98 06 F6 | 	mov	arg04, #2
2a700     32 B3 02 F6 | 	mov	local07, objptr
2a704     58 65 02 F6 | 	mov	objptr, local06
2a708     2D AE 62 FD | 	call	local05
2a70c     59 65 02 F6 | 	mov	objptr, local07
2a710     08 A6 06 F1 | 	add	local01, #8
2a714     53 B3 02 FB | 	rdlong	local07, local01
2a718     00 B3 26 F5 | 	andn	local07, #256
2a71c     53 B3 62 FC | 	wrlong	local07, local01
2a720     08 A6 86 F1 | 	sub	local01, #8
2a724                 | LR__4310
2a724                 | LR__4311
2a724     18 A6 06 F1 | 	add	local01, #24
2a728     53 B3 0A FB | 	rdlong	local07, local01 wz
2a72c     18 A6 86 F1 | 	sub	local01, #24
2a730     80 00 90 AD |  if_e	jmp	#LR__4313
2a734     18 A6 06 F1 | 	add	local01, #24
2a738     53 AF 02 FB | 	rdlong	local05, local01
2a73c     57 B1 02 F6 | 	mov	local06, local05
2a740     18 A6 86 F1 | 	sub	local01, #24
2a744     13 B0 46 F7 | 	zerox	local06, #19
2a748     14 AE 46 F0 | 	shr	local05, #20
2a74c     02 AE 66 F0 | 	shl	local05, #2
2a750     2D AF 02 F1 | 	add	local05, __methods__
2a754     57 AF 02 FB | 	rdlong	local05, local05
2a758     54 95 02 F6 | 	mov	arg02, local02
2a75c     55 97 02 F6 | 	mov	arg03, local03
2a760     53 93 02 F6 | 	mov	arg01, local01
2a764     32 B3 02 F6 | 	mov	local07, objptr
2a768     58 65 02 F6 | 	mov	objptr, local06
2a76c     2D AE 62 FD | 	call	local05
2a770     59 65 02 F6 | 	mov	objptr, local07
2a774     3D B5 02 F6 | 	mov	local08, result1
2a778     00 B4 56 F2 | 	cmps	local08, #0 wc
2a77c     2C 00 90 3D |  if_ae	jmp	#LR__4312
2a780     08 A6 06 F1 | 	add	local01, #8
2a784     53 B3 02 FB | 	rdlong	local07, local01
2a788     20 B2 46 F5 | 	or	local07, #32
2a78c     53 B3 62 FC | 	wrlong	local07, local01
2a790     00 B4 4E F2 | 	cmps	local08, #0 wz
2a794     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a798     34 B5 62 FC | 	wrlong	local08, ptr___system__dat__
2a79c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a7a0     01 7A 66 56 |  if_ne	neg	result1, #1
2a7a4     00 7A 06 A6 |  if_e	mov	result1, #0
2a7a8     7C 00 90 FD | 	jmp	#LR__4316
2a7ac                 | LR__4312
2a7ac     5A 7B 02 F6 | 	mov	result1, local08
2a7b0     74 00 90 FD | 	jmp	#LR__4316
2a7b4                 | LR__4313
2a7b4     1C A6 06 F1 | 	add	local01, #28
2a7b8     53 B7 0A FB | 	rdlong	local09, local01 wz
2a7bc     1C A6 86 F1 | 	sub	local01, #28
2a7c0     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a7c4     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a7c8     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a7cc     01 7A 66 A6 |  if_e	neg	result1, #1
2a7d0     54 00 90 AD |  if_e	jmp	#LR__4316
2a7d4     00 B4 06 F6 | 	mov	local08, #0
2a7d8                 | LR__4314
2a7d8     01 AA 16 F2 | 	cmp	local03, #1 wc
2a7dc     44 00 90 CD |  if_b	jmp	#LR__4315
2a7e0     5B AF 02 F6 | 	mov	local05, local09
2a7e4     5B B1 02 F6 | 	mov	local06, local09
2a7e8     13 AE 46 F7 | 	zerox	local05, #19
2a7ec     14 B0 46 F0 | 	shr	local06, #20
2a7f0     02 B0 66 F0 | 	shl	local06, #2
2a7f4     2D B1 02 F1 | 	add	local06, __methods__
2a7f8     58 B1 02 FB | 	rdlong	local06, local06
2a7fc     56 93 C2 FA | 	rdbyte	arg01, local04
2a800     53 95 02 F6 | 	mov	arg02, local01
2a804     32 B3 02 F6 | 	mov	local07, objptr
2a808     57 65 02 F6 | 	mov	objptr, local05
2a80c     01 AC 06 F1 | 	add	local04, #1
2a810     2D B0 62 FD | 	call	local06
2a814     59 65 02 F6 | 	mov	objptr, local07
2a818     3D B5 02 F1 | 	add	local08, result1
2a81c     01 AA 86 F1 | 	sub	local03, #1
2a820     B4 FF 9F FD | 	jmp	#LR__4314
2a824                 | LR__4315
2a824     5A 7B 02 F6 | 	mov	result1, local08
2a828                 | LR__4316
2a828     E7 F0 03 F6 | 	mov	ptra, fp
2a82c     F2 00 A0 FD | 	call	#popregs_
2a830                 | __system___vfswrite_ret
2a830     2D 00 64 FD | 	ret
2a834                 | 
2a834                 | __system___vfsread
2a834     09 CA 05 F6 | 	mov	COUNT_, #9
2a838     E8 00 A0 FD | 	call	#pushregs_
2a83c     28 F0 07 F1 | 	add	ptra, #40
2a840     49 A7 02 F6 | 	mov	local01, arg01
2a844     4B A9 02 F6 | 	mov	local02, arg03
2a848     4A AB 02 F6 | 	mov	local03, arg02
2a84c     00 AC 06 F6 | 	mov	local04, #0
2a850     08 A6 06 F1 | 	add	local01, #8
2a854     53 93 02 FB | 	rdlong	arg01, local01
2a858     08 A6 86 F1 | 	sub	local01, #8
2a85c     01 92 CE F7 | 	test	arg01, #1 wz
2a860     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a864     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a868     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a86c     01 7A 66 A6 |  if_e	neg	result1, #1
2a870     84 01 90 AD |  if_e	jmp	#LR__4326
2a874     14 A6 06 F1 | 	add	local01, #20
2a878     53 7B 0A FB | 	rdlong	result1, local01 wz
2a87c     14 A6 86 F1 | 	sub	local01, #20
2a880     7C 00 90 AD |  if_e	jmp	#LR__4321
2a884     14 A6 06 F1 | 	add	local01, #20
2a888     53 AF 02 FB | 	rdlong	local05, local01
2a88c     57 AB 02 F6 | 	mov	local03, local05
2a890     14 A6 86 F1 | 	sub	local01, #20
2a894     13 AA 46 F7 | 	zerox	local03, #19
2a898     14 AE 46 F0 | 	shr	local05, #20
2a89c     02 AE 66 F0 | 	shl	local05, #2
2a8a0     2D AF 02 F1 | 	add	local05, __methods__
2a8a4     57 AF 02 FB | 	rdlong	local05, local05
2a8a8     54 97 02 F6 | 	mov	arg03, local02
2a8ac     53 93 02 F6 | 	mov	arg01, local01
2a8b0     32 AD 02 F6 | 	mov	local04, objptr
2a8b4     55 65 02 F6 | 	mov	objptr, local03
2a8b8     2D AE 62 FD | 	call	local05
2a8bc     56 65 02 F6 | 	mov	objptr, local04
2a8c0     3D B1 02 F6 | 	mov	local06, result1
2a8c4     00 B0 56 F2 | 	cmps	local06, #0 wc
2a8c8     2C 00 90 3D |  if_ae	jmp	#LR__4320
2a8cc     08 A6 06 F1 | 	add	local01, #8
2a8d0     53 AF 02 FB | 	rdlong	local05, local01
2a8d4     20 AE 46 F5 | 	or	local05, #32
2a8d8     53 AF 62 FC | 	wrlong	local05, local01
2a8dc     00 B0 4E F2 | 	cmps	local06, #0 wz
2a8e0     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a8e4     34 B1 62 FC | 	wrlong	local06, ptr___system__dat__
2a8e8     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a8ec     01 7A 66 56 |  if_ne	neg	result1, #1
2a8f0     00 7A 06 A6 |  if_e	mov	result1, #0
2a8f4     00 01 90 FD | 	jmp	#LR__4326
2a8f8                 | LR__4320
2a8f8     58 7B 02 F6 | 	mov	result1, local06
2a8fc     F8 00 90 FD | 	jmp	#LR__4326
2a900                 | LR__4321
2a900     20 A6 06 F1 | 	add	local01, #32
2a904     53 B3 0A FB | 	rdlong	local07, local01 wz
2a908     20 A6 86 F1 | 	sub	local01, #32
2a90c     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a910     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a914     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a918     01 7A 66 A6 |  if_e	neg	result1, #1
2a91c     D8 00 90 AD |  if_e	jmp	#LR__4326
2a920     28 A6 06 F1 | 	add	local01, #40
2a924     53 B1 0A FB | 	rdlong	local06, local01 wz
2a928     28 A6 86 F1 | 	sub	local01, #40
2a92c     60 00 90 AD |  if_e	jmp	#LR__4323
2a930     28 A6 06 F1 | 	add	local01, #40
2a934     53 AF 02 FB | 	rdlong	local05, local01
2a938     57 B5 02 F6 | 	mov	local08, local05
2a93c     28 A6 86 F1 | 	sub	local01, #40
2a940     13 B4 46 F7 | 	zerox	local08, #19
2a944     14 AE 46 F0 | 	shr	local05, #20
2a948     02 AE 66 F0 | 	shl	local05, #2
2a94c     2D AF 02 F1 | 	add	local05, __methods__
2a950     57 AF 02 FB | 	rdlong	local05, local05
2a954     53 93 02 F6 | 	mov	arg01, local01
2a958     E7 96 02 F6 | 	mov	arg03, fp
2a95c     24 96 06 F1 | 	add	arg03, #36
2a960     00 95 06 F6 | 	mov	arg02, #256
2a964     32 B1 02 F6 | 	mov	local06, objptr
2a968     5A 65 02 F6 | 	mov	objptr, local08
2a96c     2D AE 62 FD | 	call	local05
2a970     58 65 02 F6 | 	mov	objptr, local06
2a974     00 7A 0E F2 | 	cmp	result1, #0 wz
2a978     14 00 90 5D |  if_ne	jmp	#LR__4322
2a97c     24 CE 05 F1 | 	add	fp, #36
2a980     E7 B0 02 FB | 	rdlong	local06, fp
2a984     24 CE 85 F1 | 	sub	fp, #36
2a988     02 B0 CE F7 | 	test	local06, #2 wz
2a98c     01 AC 06 56 |  if_ne	mov	local04, #1
2a990                 | LR__4322
2a990                 | LR__4323
2a990     00 B0 06 F6 | 	mov	local06, #0
2a994                 | LR__4324
2a994     01 A8 16 F2 | 	cmp	local02, #1 wc
2a998     58 00 90 CD |  if_b	jmp	#LR__4325
2a99c     59 B5 02 F6 | 	mov	local08, local07
2a9a0     59 AF 02 F6 | 	mov	local05, local07
2a9a4     13 B4 46 F7 | 	zerox	local08, #19
2a9a8     14 AE 46 F0 | 	shr	local05, #20
2a9ac     02 AE 66 F0 | 	shl	local05, #2
2a9b0     2D AF 02 F1 | 	add	local05, __methods__
2a9b4     57 AF 02 FB | 	rdlong	local05, local05
2a9b8     53 93 02 F6 | 	mov	arg01, local01
2a9bc     32 B7 02 F6 | 	mov	local09, objptr
2a9c0     5A 65 02 F6 | 	mov	objptr, local08
2a9c4     2D AE 62 FD | 	call	local05
2a9c8     5B 65 02 F6 | 	mov	objptr, local09
2a9cc     00 7A 56 F2 | 	cmps	result1, #0 wc
2a9d0     20 00 90 CD |  if_b	jmp	#LR__4325
2a9d4     55 7B 42 FC | 	wrbyte	result1, local03
2a9d8     01 B0 06 F1 | 	add	local06, #1
2a9dc     01 A8 86 F1 | 	sub	local02, #1
2a9e0     00 AC 0E F2 | 	cmp	local04, #0 wz
2a9e4     01 AA 06 F1 | 	add	local03, #1
2a9e8     A8 FF 9F AD |  if_e	jmp	#LR__4324
2a9ec     0A 7A 0E F2 | 	cmp	result1, #10 wz
2a9f0     A0 FF 9F 5D |  if_ne	jmp	#LR__4324
2a9f4                 | LR__4325
2a9f4     58 7B 02 F6 | 	mov	result1, local06
2a9f8                 | LR__4326
2a9f8     E7 F0 03 F6 | 	mov	ptra, fp
2a9fc     F2 00 A0 FD | 	call	#popregs_
2aa00                 | __system___vfsread_ret
2aa00     2D 00 64 FD | 	ret
2aa04                 | 
2aa04                 | __system___sdmm_open
2aa04     0B CA 05 F6 | 	mov	COUNT_, #11
2aa08     E8 00 A0 FD | 	call	#pushregs_
2aa0c     49 AB 02 F6 | 	mov	local03, arg01
2aa10     4A AD 02 F6 | 	mov	local04, arg02
2aa14     4B AF 02 F6 | 	mov	local05, arg03
2aa18     4C B1 02 F6 | 	mov	local06, arg04
2aa1c     28 92 06 F6 | 	mov	arg01, #40
2aa20     88 DB BF FD | 	call	#__system___gc_alloc_managed
2aa24     3D B3 02 F6 | 	mov	local07, result1
2aa28     55 99 02 F6 | 	mov	arg04, local03
2aa2c     1F 98 C6 F0 | 	sar	arg04, #31
2aa30     55 97 02 F6 | 	mov	arg03, local03
2aa34     01 92 06 F6 | 	mov	arg01, #1
2aa38     00 94 06 F6 | 	mov	arg02, #0
2aa3c     44 C3 BF FD | 	call	#__system___int64_shl
2aa40     3D A7 02 F6 | 	mov	local01, result1
2aa44     3E B5 02 F6 | 	mov	local08, result2
2aa48     56 99 02 F6 | 	mov	arg04, local04
2aa4c     1F 98 C6 F0 | 	sar	arg04, #31
2aa50     56 97 02 F6 | 	mov	arg03, local04
2aa54     01 92 06 F6 | 	mov	arg01, #1
2aa58     00 94 06 F6 | 	mov	arg02, #0
2aa5c     24 C3 BF FD | 	call	#__system___int64_shl
2aa60     3D A7 42 F5 | 	or	local01, result1
2aa64     3E B5 42 F5 | 	or	local08, result2
2aa68     57 99 02 F6 | 	mov	arg04, local05
2aa6c     1F 98 C6 F0 | 	sar	arg04, #31
2aa70     57 97 02 F6 | 	mov	arg03, local05
2aa74     01 92 06 F6 | 	mov	arg01, #1
2aa78     00 94 06 F6 | 	mov	arg02, #0
2aa7c     04 C3 BF FD | 	call	#__system___int64_shl
2aa80     3D A7 42 F5 | 	or	local01, result1
2aa84     3E B5 42 F5 | 	or	local08, result2
2aa88     58 99 02 F6 | 	mov	arg04, local06
2aa8c     1F 98 C6 F0 | 	sar	arg04, #31
2aa90     58 97 02 F6 | 	mov	arg03, local06
2aa94     01 92 06 F6 | 	mov	arg01, #1
2aa98     00 94 06 F6 | 	mov	arg02, #0
2aa9c     E4 C2 BF FD | 	call	#__system___int64_shl
2aaa0     5A 95 02 F6 | 	mov	arg02, local08
2aaa4     3D A7 42 F5 | 	or	local01, result1
2aaa8     4A 7D 42 F5 | 	or	result2, arg02
2aaac     3E A9 02 F6 | 	mov	local02, result2
2aab0     53 93 02 F6 | 	mov	arg01, local01
2aab4     54 95 02 F6 | 	mov	arg02, local02
2aab8     38 C3 BF FD | 	call	#__system___usepins
2aabc     00 7A 0E F2 | 	cmp	result1, #0 wz
2aac0     1C 00 90 5D |  if_ne	jmp	#LR__4330
2aac4     59 93 02 F6 | 	mov	arg01, local07
2aac8     14 DC BF FD | 	call	#__system___gc_free
2aacc     20 68 06 F1 | 	add	ptr___system__dat__, #32
2aad0     34 2D 68 FC | 	wrlong	#22, ptr___system__dat__
2aad4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2aad8     00 7A 06 F6 | 	mov	result1, #0
2aadc     5C 01 90 FD | 	jmp	#LR__4333
2aae0                 | LR__4330
2aae0     53 B7 02 F6 | 	mov	local09, local01
2aae4     54 9B 02 F6 | 	mov	arg05, local02
2aae8     20 B2 06 F1 | 	add	local07, #32
2aaec     59 B7 62 FC | 	wrlong	local09, local07
2aaf0     04 B2 06 F1 | 	add	local07, #4
2aaf4     59 9B 62 FC | 	wrlong	arg05, local07
2aaf8     24 B2 86 F1 | 	sub	local07, #36
2aafc     57 99 02 F6 | 	mov	arg04, local05
2ab00     58 9B 02 F6 | 	mov	arg05, local06
2ab04     00 92 06 F6 | 	mov	arg01, #0
2ab08     55 95 02 F6 | 	mov	arg02, local03
2ab0c     56 97 02 F6 | 	mov	arg03, local04
2ab10     32 B9 02 F6 | 	mov	local10, objptr
2ab14     59 65 02 F6 | 	mov	objptr, local07
2ab18     34 0F B0 FD | 	call	#_sdmm_cc_disk_setpins
2ab1c     5C 65 02 F6 | 	mov	objptr, local10
2ab20     3D BB 0A F6 | 	mov	local11, result1 wz
2ab24     18 00 90 5D |  if_ne	jmp	#LR__4331
2ab28     00 92 06 F6 | 	mov	arg01, #0
2ab2c     32 BB 02 F6 | 	mov	local11, objptr
2ab30     59 65 02 F6 | 	mov	objptr, local07
2ab34     4C 03 B0 FD | 	call	#_sdmm_cc_disk_initialize
2ab38     5D 65 02 F6 | 	mov	objptr, local11
2ab3c     3D BB E2 F8 | 	getbyte	local11, result1, #0
2ab40                 | LR__4331
2ab40     00 BA 0E F2 | 	cmp	local11, #0 wz
2ab44     D0 00 90 5D |  if_ne	jmp	#LR__4332
2ab48     64 E0 BF FD | 	call	#__system___get_vfs_file_handle
2ab4c     3D BB 0A F6 | 	mov	local11, result1 wz
2ab50     C4 00 90 AD |  if_e	jmp	#LR__4332
2ab54     04 BA 06 F1 | 	add	local11, #4
2ab58     5D 05 58 FC | 	wrword	#2, local11
2ab5c     02 BA 06 F1 | 	add	local11, #2
2ab60     5D 01 58 FC | 	wrword	#0, local11
2ab64     02 BA 06 F1 | 	add	local11, #2
2ab68     40 00 80 FF 
2ab6c     5D 07 68 FC | 	wrlong	##32771, local11
2ab70     59 7B 02 F6 | 	mov	result1, local07
2ab74     00 68 06 FF 
2ab78     00 7A 46 F5 | 	or	result1, ##214958080
2ab7c     0C BA 06 F1 | 	add	local11, #12
2ab80     5D 7B 62 FC | 	wrlong	result1, local11
2ab84     59 7B 02 F6 | 	mov	result1, local07
2ab88     00 70 06 FF 
2ab8c     00 7A 46 F5 | 	or	result1, ##216006656
2ab90     04 BA 06 F1 | 	add	local11, #4
2ab94     5D 7B 62 FC | 	wrlong	result1, local11
2ab98     59 7B 02 F6 | 	mov	result1, local07
2ab9c     00 78 06 FF 
2aba0     00 7A 46 F5 | 	or	result1, ##217055232
2aba4     0C BA 06 F1 | 	add	local11, #12
2aba8     5D 7B 62 FC | 	wrlong	result1, local11
2abac     59 7B 02 F6 | 	mov	result1, local07
2abb0     00 80 06 FF 
2abb4     00 7A 46 F5 | 	or	result1, ##218103808
2abb8     04 BA 06 F1 | 	add	local11, #4
2abbc     5D 7B 62 FC | 	wrlong	result1, local11
2abc0     59 7B 02 F6 | 	mov	result1, local07
2abc4     00 88 06 FF 
2abc8     00 7A 46 F5 | 	or	result1, ##219152384
2abcc     04 BA 06 F1 | 	add	local11, #4
2abd0     5D 7B 62 FC | 	wrlong	result1, local11
2abd4     59 7B 02 F6 | 	mov	result1, local07
2abd8     00 90 06 FF 
2abdc     00 7A 46 F5 | 	or	result1, ##220200960
2abe0     04 BA 06 F1 | 	add	local11, #4
2abe4     5D 7B 62 FC | 	wrlong	result1, local11
2abe8     59 7B 02 F6 | 	mov	result1, local07
2abec     00 98 06 FF 
2abf0     00 7A 46 F5 | 	or	result1, ##221249536
2abf4     14 BA 86 F1 | 	sub	local11, #20
2abf8     5D 7B 62 FC | 	wrlong	result1, local11
2abfc     00 A0 06 FF 
2ac00     00 B2 46 F5 | 	or	local07, ##222298112
2ac04     04 BA 06 F1 | 	add	local11, #4
2ac08     5D B3 62 FC | 	wrlong	local07, local11
2ac0c     20 BA 86 F1 | 	sub	local11, #32
2ac10     5D 7B 02 F6 | 	mov	result1, local11
2ac14     24 00 90 FD | 	jmp	#LR__4333
2ac18                 | LR__4332
2ac18     53 93 02 F6 | 	mov	arg01, local01
2ac1c     54 95 02 F6 | 	mov	arg02, local02
2ac20     24 C2 BF FD | 	call	#__system___freepins
2ac24     59 93 02 F6 | 	mov	arg01, local07
2ac28     B4 DA BF FD | 	call	#__system___gc_free
2ac2c     20 68 06 F1 | 	add	ptr___system__dat__, #32
2ac30     34 19 68 FC | 	wrlong	#12, ptr___system__dat__
2ac34     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2ac38     00 7A 06 F6 | 	mov	result1, #0
2ac3c                 | LR__4333
2ac3c     E7 F0 03 F6 | 	mov	ptra, fp
2ac40     F2 00 A0 FD | 	call	#popregs_
2ac44                 | __system___sdmm_open_ret
2ac44     2D 00 64 FD | 	ret
2ac48                 | 
2ac48                 | __system____default_filbuf
2ac48     05 CA 05 F6 | 	mov	COUNT_, #5
2ac4c     E8 00 A0 FD | 	call	#pushregs_
2ac50     49 A7 02 F6 | 	mov	local01, arg01
2ac54     53 A9 02 FB | 	rdlong	local02, local01
2ac58     08 A8 06 F1 | 	add	local02, #8
2ac5c     54 7B 0A FB | 	rdlong	result1, local02 wz
2ac60     08 A8 86 F1 | 	sub	local02, #8
2ac64     20 00 90 5D |  if_ne	jmp	#LR__4340
2ac68     10 A8 06 F1 | 	add	local02, #16
2ac6c     54 7B 02 F6 | 	mov	result1, local02
2ac70     04 A8 86 F1 | 	sub	local02, #4
2ac74     54 7B 62 FC | 	wrlong	result1, local02
2ac78     04 A8 86 F1 | 	sub	local02, #4
2ac7c     02 00 80 FF 
2ac80     54 01 68 FC | 	wrlong	##1024, local02
2ac84     08 A8 86 F1 | 	sub	local02, #8
2ac88                 | LR__4340
2ac88     14 A6 06 F1 | 	add	local01, #20
2ac8c     53 AB 02 FB | 	rdlong	local03, local01
2ac90     55 AD 02 F6 | 	mov	local04, local03
2ac94     14 A6 86 F1 | 	sub	local01, #20
2ac98     13 AC 46 F7 | 	zerox	local04, #19
2ac9c     14 AA 46 F0 | 	shr	local03, #20
2aca0     02 AA 66 F0 | 	shl	local03, #2
2aca4     2D AB 02 F1 | 	add	local03, __methods__
2aca8     55 AB 02 FB | 	rdlong	local03, local03
2acac     53 93 02 F6 | 	mov	arg01, local01
2acb0     0C A8 06 F1 | 	add	local02, #12
2acb4     54 95 02 FB | 	rdlong	arg02, local02
2acb8     04 A8 86 F1 | 	sub	local02, #4
2acbc     54 97 02 FB | 	rdlong	arg03, local02
2acc0     08 A8 86 F1 | 	sub	local02, #8
2acc4     32 AF 02 F6 | 	mov	local05, objptr
2acc8     56 65 02 F6 | 	mov	objptr, local04
2accc     2D AA 62 FD | 	call	local03
2acd0     57 65 02 F6 | 	mov	objptr, local05
2acd4     3D AF 02 F6 | 	mov	local05, result1
2acd8     00 AE 56 F2 | 	cmps	local05, #0 wc
2acdc     01 7A 66 C6 |  if_b	neg	result1, #1
2ace0     28 00 90 CD |  if_b	jmp	#LR__4341
2ace4     54 AF 62 FC | 	wrlong	local05, local02
2ace8     0C A8 06 F1 | 	add	local02, #12
2acec     54 AB 02 FB | 	rdlong	local03, local02
2acf0     08 A8 86 F1 | 	sub	local02, #8
2acf4     54 AB 62 FC | 	wrlong	local03, local02
2acf8     08 A6 06 F1 | 	add	local01, #8
2acfc     53 AD 02 FB | 	rdlong	local04, local01
2ad00     04 AC 46 F5 | 	or	local04, #4
2ad04     53 AD 62 FC | 	wrlong	local04, local01
2ad08     57 7B 02 F6 | 	mov	result1, local05
2ad0c                 | LR__4341
2ad0c     E7 F0 03 F6 | 	mov	ptra, fp
2ad10     F2 00 A0 FD | 	call	#popregs_
2ad14                 | __system____default_filbuf_ret
2ad14     2D 00 64 FD | 	ret
2ad18                 | 
2ad18                 | __system__getlower_1283
2ad18     41 92 56 F2 | 	cmps	arg01, #65 wc
2ad1c     10 00 90 CD |  if_b	jmp	#LR__4350
2ad20     5B 92 56 F2 | 	cmps	arg01, #91 wc
2ad24     49 7B 02 C6 |  if_b	mov	result1, arg01
2ad28     20 7A 06 C1 |  if_b	add	result1, #32
2ad2c     04 00 90 CD |  if_b	jmp	#__system__getlower_1283_ret
2ad30                 | LR__4350
2ad30     49 7B 02 F6 | 	mov	result1, arg01
2ad34                 | __system__getlower_1283_ret
2ad34     2D 00 64 FD | 	ret
2ad38                 | 
2ad38                 | __system___pat_match
2ad38     07 CA 05 F6 | 	mov	COUNT_, #7
2ad3c     E8 00 A0 FD | 	call	#pushregs_
2ad40     49 A7 02 F6 | 	mov	local01, arg01
2ad44                 | LR__4360
2ad44     4A 93 CA FA | 	rdbyte	arg01, arg02 wz
2ad48     53 A9 CA 5A |  if_ne	rdbyte	local02, local01 wz
2ad4c     49 AB 02 56 |  if_ne	mov	local03, arg01
2ad50     2A AA 0E 52 |  if_ne	cmp	local03, #42 wz
2ad54     2C 00 90 AD |  if_e	jmp	#LR__4361
2ad58     4A 93 C2 FA | 	rdbyte	arg01, arg02
2ad5c     B8 FF BF FD | 	call	#__system__getlower_1283
2ad60     3D A9 02 F6 | 	mov	local02, result1
2ad64     53 93 C2 FA | 	rdbyte	arg01, local01
2ad68     AC FF BF FD | 	call	#__system__getlower_1283
2ad6c     54 7B 0A F2 | 	cmp	result1, local02 wz
2ad70     00 7A 06 56 |  if_ne	mov	result1, #0
2ad74     00 01 90 5D |  if_ne	jmp	#LR__4370
2ad78     01 A6 06 F1 | 	add	local01, #1
2ad7c     01 94 06 F1 | 	add	arg02, #1
2ad80     C0 FF 9F FD | 	jmp	#LR__4360
2ad84                 | LR__4361
2ad84     4A AB C2 FA | 	rdbyte	local03, arg02
2ad88     2A AA 0E F2 | 	cmp	local03, #42 wz
2ad8c     D8 00 90 5D |  if_ne	jmp	#LR__4369
2ad90     01 94 06 F1 | 	add	arg02, #1
2ad94     4A AB C2 FA | 	rdbyte	local03, arg02
2ad98     01 94 86 F1 | 	sub	arg02, #1
2ad9c     2E AA 0E F2 | 	cmp	local03, #46 wz
2ada0     28 00 90 5D |  if_ne	jmp	#LR__4362
2ada4     02 94 06 F1 | 	add	arg02, #2
2ada8     4A AB C2 FA | 	rdbyte	local03, arg02
2adac     02 94 86 F1 | 	sub	arg02, #2
2adb0     2A AA 0E F2 | 	cmp	local03, #42 wz
2adb4     03 94 06 A1 |  if_e	add	arg02, #3
2adb8     4A AD C2 AA |  if_e	rdbyte	local04, arg02
2adbc     03 94 86 A1 |  if_e	sub	arg02, #3
2adc0     56 AF 0A A6 |  if_e	mov	local05, local04 wz
2adc4     01 7A 06 A6 |  if_e	mov	result1, #1
2adc8     AC 00 90 AD |  if_e	jmp	#LR__4370
2adcc                 | LR__4362
2adcc     01 94 06 F1 | 	add	arg02, #1
2add0     00 B0 06 F6 | 	mov	local06, #0
2add4     D7 0E 48 FB | 	callpa	#(@LR__4364-@LR__4363)>>2,fcache_load_ptr_
2add8                 | LR__4363
2add8     58 A9 02 F6 | 	mov	local02, local06
2addc     4A A9 02 F1 | 	add	local02, arg02
2ade0     54 AD CA FA | 	rdbyte	local04, local02 wz
2ade4     58 AF 02 56 |  if_ne	mov	local05, local06
2ade8     01 AE 06 51 |  if_ne	add	local05, #1
2adec     57 B1 02 56 |  if_ne	mov	local06, local05
2adf0     E4 FF 9F 5D |  if_ne	jmp	#LR__4363
2adf4                 | LR__4364
2adf4     00 B2 06 F6 | 	mov	local07, #0
2adf8     D7 0E 48 FB | 	callpa	#(@LR__4366-@LR__4365)>>2,fcache_load_ptr_
2adfc                 | LR__4365
2adfc     59 A9 02 F6 | 	mov	local02, local07
2ae00     53 A9 02 F1 | 	add	local02, local01
2ae04     54 AD CA FA | 	rdbyte	local04, local02 wz
2ae08     59 AF 02 56 |  if_ne	mov	local05, local07
2ae0c     01 AE 06 51 |  if_ne	add	local05, #1
2ae10     57 B3 02 56 |  if_ne	mov	local07, local05
2ae14     E4 FF 9F 5D |  if_ne	jmp	#LR__4365
2ae18                 | LR__4366
2ae18     58 B3 52 F2 | 	cmps	local07, local06 wc
2ae1c     00 7A 06 C6 |  if_b	mov	result1, #0
2ae20     54 00 90 CD |  if_b	jmp	#LR__4370
2ae24     59 AB 02 F6 | 	mov	local03, local07
2ae28     58 AB 82 F1 | 	sub	local03, local06
2ae2c     55 A7 02 F1 | 	add	local01, local03
2ae30                 | LR__4367
2ae30     01 B0 56 F2 | 	cmps	local06, #1 wc
2ae34     30 00 90 CD |  if_b	jmp	#LR__4368
2ae38     53 93 C2 FA | 	rdbyte	arg01, local01
2ae3c     D8 FE BF FD | 	call	#__system__getlower_1283
2ae40     3D B3 02 F6 | 	mov	local07, result1
2ae44     4A 93 C2 FA | 	rdbyte	arg01, arg02
2ae48     CC FE BF FD | 	call	#__system__getlower_1283
2ae4c     3D B3 0A F2 | 	cmp	local07, result1 wz
2ae50     00 7A 06 56 |  if_ne	mov	result1, #0
2ae54     20 00 90 5D |  if_ne	jmp	#LR__4370
2ae58     01 A6 06 F1 | 	add	local01, #1
2ae5c     01 94 06 F1 | 	add	arg02, #1
2ae60     01 B0 86 F1 | 	sub	local06, #1
2ae64     C8 FF 9F FD | 	jmp	#LR__4367
2ae68                 | LR__4368
2ae68                 | LR__4369
2ae68     4A B3 CA FA | 	rdbyte	local07, arg02 wz
2ae6c     53 A9 CA AA |  if_e	rdbyte	local02, local01 wz
2ae70     01 7A 06 A6 |  if_e	mov	result1, #1
2ae74     00 7A 06 56 |  if_ne	mov	result1, #0
2ae78                 | LR__4370
2ae78     E7 F0 03 F6 | 	mov	ptra, fp
2ae7c     F2 00 A0 FD | 	call	#popregs_
2ae80                 | __system___pat_match_ret
2ae80     2D 00 64 FD | 	ret
2ae84                 | 
2ae84                 | _sdmm_cc_disk_initialize
2ae84     0F CA 05 F6 | 	mov	COUNT_, #15
2ae88     E8 00 A0 FD | 	call	#pushregs_
2ae8c     49 A7 0A F6 | 	mov	local01, arg01 wz
2ae90     F8 A9 02 F6 | 	mov	local02, ptra
2ae94     32 AB 02 FB | 	rdlong	local03, objptr
2ae98     04 64 06 F1 | 	add	objptr, #4
2ae9c     32 AD 02 FB | 	rdlong	local04, objptr
2aea0     04 64 06 F1 | 	add	objptr, #4
2aea4     32 AF 02 FB | 	rdlong	local05, objptr
2aea8     04 64 06 F1 | 	add	objptr, #4
2aeac     32 B1 02 FB | 	rdlong	local06, objptr
2aeb0     08 64 06 F1 | 	add	objptr, #8
2aeb4     32 03 48 FC | 	wrbyte	#1, objptr
2aeb8     14 64 86 F1 | 	sub	objptr, #20
2aebc                 | ' #line 539 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2aebc                 | ' 		return RES_NOTRDY;
2aebc     0C F0 07 F1 | 	add	ptra, #12
2aec0     03 7A 06 56 |  if_ne	mov	result1, #3
2aec4     68 04 90 5D |  if_ne	jmp	#LR__4400
2aec8     13 00 00 FF 
2aecc     10 93 06 F6 | 	mov	arg01, ##10000
2aed0     30 A0 BF FD | 	call	#__system___waitus
2aed4     55 99 02 F6 | 	mov	arg04, local03
2aed8     57 99 82 F1 | 	sub	arg04, local05
2aedc     4C 99 42 F6 | 	abs	arg04, arg04
2aee0     04 98 56 F2 | 	cmps	arg04, #4 wc
2aee4     04 7A 06 36 |  if_ae	mov	result1, #4
2aee8     44 04 90 3D |  if_ae	jmp	#LR__4400
2aeec     55 B3 02 F6 | 	mov	local07, local03
2aef0     58 B3 82 F1 | 	sub	local07, local06
2aef4     59 B3 42 F6 | 	abs	local07, local07
2aef8     04 B2 56 F2 | 	cmps	local07, #4 wc
2aefc     34 00 90 3D |  if_ae	jmp	#LR__4380
2af00     55 B5 02 F6 | 	mov	local08, local03
2af04     58 B5 82 F1 | 	sub	local08, local06
2af08     07 B4 06 F5 | 	and	local08, #7
2af0c     18 B4 66 F0 | 	shl	local08, #24
2af10     29 00 00 FF 
2af14     7A B4 46 F5 | 	or	local08, ##21114
2af18     58 B7 02 F6 | 	mov	local09, local06
2af1c     0C 64 06 F1 | 	add	objptr, #12
2af20     32 B7 62 FC | 	wrlong	local09, objptr
2af24     04 64 06 F1 | 	add	objptr, #4
2af28     32 B7 62 FC | 	wrlong	local09, objptr
2af2c     10 64 86 F1 | 	sub	objptr, #16
2af30     A4 00 90 FD | 	jmp	#LR__4383
2af34                 | LR__4380
2af34     58 AB 5A F2 | 	cmps	local03, local06 wcz
2af38     28 00 90 ED |  if_be	jmp	#LR__4381
2af3c     55 B7 02 F6 | 	mov	local09, local03
2af40     03 B6 86 F1 | 	sub	local09, #3
2af44     57 B7 0A F2 | 	cmp	local09, local05 wz
2af48     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2af4c     01 B6 06 A1 |  if_e	add	local09, #1
2af50     57 B7 0A F2 | 	cmp	local09, local05 wz
2af54     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2af58     28 00 90 5D |  if_ne	jmp	#LR__4382
2af5c     01 B6 06 F1 | 	add	local09, #1
2af60     20 00 90 FD | 	jmp	#LR__4382
2af64                 | LR__4381
2af64     55 B7 02 F6 | 	mov	local09, local03
2af68     03 B6 06 F1 | 	add	local09, #3
2af6c     57 B7 0A F2 | 	cmp	local09, local05 wz
2af70     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2af74     01 B6 86 A1 |  if_e	sub	local09, #1
2af78     57 B7 0A F2 | 	cmp	local09, local05 wz
2af7c     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2af80     01 B6 86 A1 |  if_e	sub	local09, #1
2af84                 | LR__4382
2af84     58 B3 02 F6 | 	mov	local07, local06
2af88     5B B3 82 F1 | 	sub	local07, local09
2af8c     59 B3 42 F6 | 	abs	local07, local07
2af90     04 B2 56 F2 | 	cmps	local07, #4 wc
2af94     04 7A 06 36 |  if_ae	mov	result1, #4
2af98     94 03 90 3D |  if_ae	jmp	#LR__4400
2af9c     58 B5 02 F6 | 	mov	local08, local06
2afa0     5B B5 82 F1 | 	sub	local08, local09
2afa4     07 B4 06 F5 | 	and	local08, #7
2afa8     1C B4 66 F0 | 	shl	local08, #28
2afac     55 B3 02 F6 | 	mov	local07, local03
2afb0     5B B3 82 F1 | 	sub	local07, local09
2afb4     07 B2 06 F5 | 	and	local07, #7
2afb8     18 B2 66 F0 | 	shl	local07, #24
2afbc     59 B5 42 F5 | 	or	local08, local07
2afc0     3A B4 46 F5 | 	or	local08, #58
2afc4     10 64 06 F1 | 	add	objptr, #16
2afc8     32 B1 62 FC | 	wrlong	local06, objptr
2afcc     04 64 86 F1 | 	sub	objptr, #4
2afd0     32 B7 62 FC | 	wrlong	local09, objptr
2afd4     0C 64 86 F1 | 	sub	objptr, #12
2afd8                 | LR__4383
2afd8     56 01 08 FC | 	wrpin	#0, local04
2afdc     59 AC 62 FD | 	drvh	local04
2afe0     00 08 00 FF 
2afe4     20 B8 06 F6 | 	mov	local10, ##1048608
2afe8     40 AA 62 FD | 	dirl	local03
2afec     A0 03 80 FF 
2aff0     55 91 08 FC | 	wrpin	##475208, local03
2aff4     00 08 80 FF 
2aff8     55 41 18 FC | 	wxpin	##1048608, local03
2affc     55 01 28 FC | 	wypin	#0, local03
2b000     41 AA 62 FD | 	dirh	local03
2b004     55 B3 02 F6 | 	mov	local07, local03
2b008     57 B3 82 F1 | 	sub	local07, local05
2b00c     07 B2 06 F5 | 	and	local07, #7
2b010     18 B2 66 F0 | 	shl	local07, #24
2b014     78 BA 06 F6 | 	mov	local11, #120
2b018     59 BB 42 F5 | 	or	local11, local07
2b01c     5D 95 02 F6 | 	mov	arg02, local11
2b020     10 94 26 F4 | 	bith	arg02, #16
2b024     40 AE 62 FD | 	dirl	local05
2b028     57 95 02 FC | 	wrpin	arg02, local05
2b02c     57 3F 18 FC | 	wxpin	#31, local05
2b030     FF FF FF FF 
2b034     57 FF 2B FC | 	wypin	##-1, local05
2b038     41 AE 62 FD | 	dirh	local05
2b03c     29 00 80 FF 
2b040     58 01 08 FC | 	wrpin	##20992, local06
2b044     40 B6 62 FD | 	dirl	local09
2b048     5B B5 02 FC | 	wrpin	local08, local09
2b04c     5B 4F 18 FC | 	wxpin	#39, local09
2b050     5B 01 28 FC | 	wypin	#0, local09
2b054     41 B6 62 FD | 	dirh	local09
2b058     54 93 02 F6 | 	mov	arg01, local02
2b05c     0A 94 06 F6 | 	mov	arg02, #10
2b060     5C 06 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b064     00 92 06 F6 | 	mov	arg01, #0
2b068     00 94 06 F6 | 	mov	arg02, #0
2b06c     D4 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b070     20 07 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b074     64 92 06 F6 | 	mov	arg01, #100
2b078     88 9E BF FD | 	call	#__system___waitus
2b07c     54 93 02 F6 | 	mov	arg01, local02
2b080     0A 94 06 F6 | 	mov	arg02, #10
2b084     38 06 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b088     00 BC 06 F6 | 	mov	local12, #0
2b08c     00 92 06 F6 | 	mov	arg01, #0
2b090     00 94 06 F6 | 	mov	arg02, #0
2b094     AC 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b098     3D B3 E2 F8 | 	getbyte	local07, result1, #0
2b09c     01 B2 0E F2 | 	cmp	local07, #1 wz
2b0a0     5C 02 90 5D |  if_ne	jmp	#LR__4399
2b0a4     08 92 06 F6 | 	mov	arg01, #8
2b0a8     AA 95 06 F6 | 	mov	arg02, #426
2b0ac     94 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b0b0     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b0b4     01 7A 0E F2 | 	cmp	result1, #1 wz
2b0b8     30 01 90 5D |  if_ne	jmp	#LR__4388
2b0bc     54 93 02 F6 | 	mov	arg01, local02
2b0c0     04 94 06 F6 | 	mov	arg02, #4
2b0c4     F8 05 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b0c8     02 A8 06 F1 | 	add	local02, #2
2b0cc     54 B3 C2 FA | 	rdbyte	local07, local02
2b0d0     02 A8 86 F1 | 	sub	local02, #2
2b0d4     01 B2 0E F2 | 	cmp	local07, #1 wz
2b0d8     03 A8 06 A1 |  if_e	add	local02, #3
2b0dc     54 BF C2 AA |  if_e	rdbyte	local13, local02
2b0e0     03 A8 86 A1 |  if_e	sub	local02, #3
2b0e4     AA BE 0E A2 |  if_e	cmp	local13, #170 wz
2b0e8     14 02 90 5D |  if_ne	jmp	#LR__4398
2b0ec                 | ' 				for (tmr = 1000; tmr; tmr--) {
2b0ec     01 00 00 FF 
2b0f0     E8 C1 06 F6 | 	mov	local14, ##1000
2b0f4                 | LR__4384
2b0f4     A9 92 06 F6 | 	mov	arg01, #169
2b0f8     1E 94 C6 F9 | 	decod	arg02, #30
2b0fc     44 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b100     3D B3 02 F6 | 	mov	local07, result1
2b104     07 B2 4E F7 | 	zerox	local07, #7 wz
2b108     18 00 90 AD |  if_e	jmp	#LR__4385
2b10c     01 00 00 FF 
2b110     E8 93 06 F6 | 	mov	arg01, ##1000
2b114     EC 9D BF FD | 	call	#__system___waitus
2b118     60 B3 02 F6 | 	mov	local07, local14
2b11c     01 C0 8E F1 | 	sub	local14, #1 wz
2b120     D0 FF 9F 5D |  if_ne	jmp	#LR__4384
2b124                 | LR__4385
2b124     00 C0 0E F2 | 	cmp	local14, #0 wz
2b128     38 00 90 AD |  if_e	jmp	#LR__4386
2b12c     3A 92 06 F6 | 	mov	arg01, #58
2b130     00 94 06 F6 | 	mov	arg02, #0
2b134     0C 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b138     3D B3 02 F6 | 	mov	local07, result1
2b13c     07 B2 4E F7 | 	zerox	local07, #7 wz
2b140     20 00 90 5D |  if_ne	jmp	#LR__4386
2b144     54 93 02 F6 | 	mov	arg01, local02
2b148     04 94 06 F6 | 	mov	arg02, #4
2b14c     70 05 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b150     54 C1 C2 FA | 	rdbyte	local14, local02
2b154     40 C0 CE F7 | 	test	local14, #64 wz
2b158     0C B2 06 56 |  if_ne	mov	local07, #12
2b15c     04 B2 06 A6 |  if_e	mov	local07, #4
2b160     59 BD 02 F6 | 	mov	local12, local07
2b164                 | LR__4386
2b164     14 C0 06 FB | 	rdlong	local14, #20
2b168     F0 FA 02 FF 
2b16c     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2b170     5D B3 02 C6 |  if_b	mov	local07, local11
2b174     1B B2 26 C4 |  if_b	bith	local07, #27
2b178     59 BB 02 C6 |  if_b	mov	local11, local07
2b17c     10 00 90 CD |  if_b	jmp	#LR__4387
2b180     E1 F5 05 FF 
2b184     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2b188     80 00 04 CF 
2b18c     00 BA 46 C5 |  if_b	or	local11, ##134283264
2b190                 | LR__4387
2b190     F0 FA 02 FF 
2b194     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2b198     00 01 00 CF 
2b19c     04 B8 06 C6 |  if_b	mov	local10, ##131076
2b1a0     5C 01 90 CD |  if_b	jmp	#LR__4398
2b1a4     68 78 04 FF 
2b1a8     81 C1 16 F2 | 	cmp	local14, ##150000001 wc
2b1ac     80 01 00 CF 
2b1b0     06 B8 06 C6 |  if_b	mov	local10, ##196614
2b1b4     48 01 90 CD |  if_b	jmp	#LR__4398
2b1b8     E1 F5 05 FF 
2b1bc     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2b1c0     00 02 00 CF 
2b1c4     08 B8 06 C6 |  if_b	mov	local10, ##262152
2b1c8     34 01 90 CD |  if_b	jmp	#LR__4398
2b1cc     59 73 07 FF 
2b1d0     81 C0 16 F2 | 	cmp	local14, ##250000001 wc
2b1d4     80 02 00 CF 
2b1d8     0A B8 06 C6 |  if_b	mov	local10, ##327690
2b1dc     20 01 90 CD |  if_b	jmp	#LR__4398
2b1e0     00 03 00 FF 
2b1e4     0C B8 06 F6 | 	mov	local10, ##393228
2b1e8     14 01 90 FD | 	jmp	#LR__4398
2b1ec                 | LR__4388
2b1ec     A9 92 06 F6 | 	mov	arg01, #169
2b1f0     00 94 06 F6 | 	mov	arg02, #0
2b1f4     4C 07 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b1f8     3D B3 E2 F8 | 	getbyte	local07, result1, #0
2b1fc     02 B2 16 F2 | 	cmp	local07, #2 wc
2b200     02 BC 06 C6 |  if_b	mov	local12, #2
2b204     A9 C2 06 C6 |  if_b	mov	local15, #169
2b208     01 BC 06 36 |  if_ae	mov	local12, #1
2b20c     01 C2 06 36 |  if_ae	mov	local15, #1
2b210                 | ' 				ty =  0x01 ; cmd =  (1) ;
2b210                 | ' 			}
2b210                 | ' 			for (tmr = 1000; tmr; tmr--) {
2b210     01 00 00 FF 
2b214     E8 C1 06 F6 | 	mov	local14, ##1000
2b218                 | LR__4389
2b218     61 93 02 F6 | 	mov	arg01, local15
2b21c     00 94 06 F6 | 	mov	arg02, #0
2b220     20 07 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b224     3D B3 02 F6 | 	mov	local07, result1
2b228     07 B2 4E F7 | 	zerox	local07, #7 wz
2b22c     18 00 90 AD |  if_e	jmp	#LR__4390
2b230     01 00 00 FF 
2b234     E8 93 06 F6 | 	mov	arg01, ##1000
2b238     C8 9C BF FD | 	call	#__system___waitus
2b23c     60 B3 02 F6 | 	mov	local07, local14
2b240     01 C0 8E F1 | 	sub	local14, #1 wz
2b244     D0 FF 9F 5D |  if_ne	jmp	#LR__4389
2b248                 | LR__4390
2b248     00 C0 0E F2 | 	cmp	local14, #0 wz
2b24c     18 00 90 AD |  if_e	jmp	#LR__4391
2b250     10 92 06 F6 | 	mov	arg01, #16
2b254     09 94 C6 F9 | 	decod	arg02, #9
2b258     E8 06 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b25c     3D B3 02 F6 | 	mov	local07, result1
2b260     07 B2 4E F7 | 	zerox	local07, #7 wz
2b264     04 00 90 AD |  if_e	jmp	#LR__4392
2b268                 | LR__4391
2b268     00 BC 06 F6 | 	mov	local12, #0
2b26c                 | LR__4392
2b26c     14 C0 06 FB | 	rdlong	local14, #20
2b270     F0 FA 02 FF 
2b274     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2b278     5D B3 02 C6 |  if_b	mov	local07, local11
2b27c     1B B2 26 C4 |  if_b	bith	local07, #27
2b280     59 BB 02 C6 |  if_b	mov	local11, local07
2b284     10 00 90 CD |  if_b	jmp	#LR__4393
2b288     E1 F5 05 FF 
2b28c     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2b290     80 00 04 CF 
2b294     00 BA 46 C5 |  if_b	or	local11, ##134283264
2b298                 | LR__4393
2b298     F0 FA 02 FF 
2b29c     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2b2a0     00 01 00 CF 
2b2a4     04 B8 06 C6 |  if_b	mov	local10, ##131076
2b2a8     54 00 90 CD |  if_b	jmp	#LR__4397
2b2ac     68 78 04 FF 
2b2b0     81 C1 16 F2 | 	cmp	local14, ##150000001 wc
2b2b4     80 01 00 CF 
2b2b8     06 B8 06 C6 |  if_b	mov	local10, ##196614
2b2bc     40 00 90 CD |  if_b	jmp	#LR__4396
2b2c0     E1 F5 05 FF 
2b2c4     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2b2c8     00 02 00 CF 
2b2cc     08 B8 06 C6 |  if_b	mov	local10, ##262152
2b2d0     2C 00 90 CD |  if_b	jmp	#LR__4395
2b2d4     59 73 07 FF 
2b2d8     81 C0 16 F2 | 	cmp	local14, ##250000001 wc
2b2dc     80 02 00 CF 
2b2e0     0A B8 06 C6 |  if_b	mov	local10, ##327690
2b2e4     18 00 90 CD |  if_b	jmp	#LR__4394
2b2e8     D1 F0 08 FF 
2b2ec     01 C1 16 F2 | 	cmp	local14, ##300000001 wc
2b2f0     00 03 00 CF 
2b2f4     0C B8 06 C6 |  if_b	mov	local10, ##393228
2b2f8     80 03 00 3F 
2b2fc     0E B8 06 36 |  if_ae	mov	local10, ##458766
2b300                 | LR__4394
2b300                 | LR__4395
2b300                 | LR__4396
2b300                 | LR__4397
2b300                 | LR__4398
2b300                 | LR__4399
2b300     15 64 06 F1 | 	add	objptr, #21
2b304     32 BD 42 FC | 	wrbyte	local12, objptr
2b308     00 BC 0E F2 | 	cmp	local12, #0 wz
2b30c     00 B2 06 56 |  if_ne	mov	local07, #0
2b310     01 B2 06 A6 |  if_e	mov	local07, #1
2b314     01 64 86 F1 | 	sub	objptr, #1
2b318     32 B3 42 FC | 	wrbyte	local07, objptr
2b31c     14 64 86 F1 | 	sub	objptr, #20
2b320     70 04 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b324     55 B9 12 FC | 	wxpin	local10, local03
2b328     57 BB 02 FC | 	wrpin	local11, local05
2b32c                 | ' #line 682 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2b32c                 | ' 		}
2b32c                 | ' 	}
2b32c                 | ' #line 687 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2b32c                 | ' 	CardType = ty;
2b32c                 | ' 	s = ty ? 0 :  0x01 ;
2b32c                 | ' 	Stat = s;
2b32c                 | ' 
2b32c                 | ' 	deselect();
2b32c                 | ' 
2b32c                 | ' 
2b32c                 | ' 	_wxpin( PIN_CLK, ck_div );
2b32c                 | ' 	_wrpin( PIN_DI, spm_tx );
2b32c                 | ' #line 700 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2b32c                 | ' 	return s;
2b32c     59 7B 02 F6 | 	mov	result1, local07
2b330                 | LR__4400
2b330     E7 F0 03 F6 | 	mov	ptra, fp
2b334     F2 00 A0 FD | 	call	#popregs_
2b338                 | _sdmm_cc_disk_initialize_ret
2b338     2D 00 64 FD | 	ret
2b33c                 | 
2b33c                 | _sdmm_cc_disk_read
2b33c     05 CA 05 F6 | 	mov	COUNT_, #5
2b340     E8 00 A0 FD | 	call	#pushregs_
2b344     4A A7 02 F6 | 	mov	local01, arg02
2b348     4B A9 02 F6 | 	mov	local02, arg03
2b34c     4C AB 02 F6 | 	mov	local03, arg04
2b350     00 92 0E F2 | 	cmp	arg01, #0 wz
2b354     01 7A 06 56 |  if_ne	mov	result1, #1
2b358                 | ' 
2b358                 | ' 	return Stat;
2b358     14 64 06 A1 |  if_e	add	objptr, #20
2b35c     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2b360     14 64 86 A1 |  if_e	sub	objptr, #20
2b364     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b368     01 7A CE F7 | 	test	result1, #1 wz
2b36c     03 7A 06 56 |  if_ne	mov	result1, #3
2b370     7C 00 90 5D |  if_ne	jmp	#LR__4412
2b374     15 64 06 F1 | 	add	objptr, #21
2b378     32 AD C2 FA | 	rdbyte	local04, objptr
2b37c     15 64 86 F1 | 	sub	objptr, #21
2b380     08 AC CE F7 | 	test	local04, #8 wz
2b384     09 A8 66 A0 |  if_e	shl	local02, #9
2b388     02 AA 16 F2 | 	cmp	local03, #2 wc
2b38c     12 AC 06 36 |  if_ae	mov	local04, #18
2b390     11 AC 06 C6 |  if_b	mov	local04, #17
2b394     54 95 02 F6 | 	mov	arg02, local02
2b398     56 93 02 F6 | 	mov	arg01, local04
2b39c     A4 05 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b3a0     3D AF 02 F6 | 	mov	local05, result1
2b3a4     07 AE 4E F7 | 	zerox	local05, #7 wz
2b3a8     30 00 90 5D |  if_ne	jmp	#LR__4411
2b3ac                 | ' 		do {
2b3ac                 | LR__4410
2b3ac     53 93 02 F6 | 	mov	arg01, local01
2b3b0     09 94 C6 F9 | 	decod	arg02, #9
2b3b4     7C 04 B0 FD | 	call	#_sdmm_cc_rcvr_datablock_0866
2b3b8     00 7A 0E F2 | 	cmp	result1, #0 wz
2b3bc     01 00 00 5F 
2b3c0     00 A6 06 51 |  if_ne	add	local01, ##512
2b3c4     F9 AB 6E 5B |  if_ne	djnz	local03, #LR__4410
2b3c8     56 AD E2 F8 | 	getbyte	local04, local04, #0
2b3cc     12 AC 0E F2 | 	cmp	local04, #18 wz
2b3d0     0C 92 06 A6 |  if_e	mov	arg01, #12
2b3d4     00 94 06 A6 |  if_e	mov	arg02, #0
2b3d8     68 05 B0 AD |  if_e	call	#_sdmm_cc_send_cmd_0871
2b3dc                 | LR__4411
2b3dc     B4 03 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b3e0                 | ' 	}
2b3e0                 | ' 	deselect();
2b3e0                 | ' 
2b3e0                 | ' 	return count ? RES_ERROR : RES_OK;
2b3e0     00 AA 0E F2 | 	cmp	local03, #0 wz
2b3e4     01 AE 06 56 |  if_ne	mov	local05, #1
2b3e8     00 AE 06 A6 |  if_e	mov	local05, #0
2b3ec     57 7B 02 F6 | 	mov	result1, local05
2b3f0                 | LR__4412
2b3f0     E7 F0 03 F6 | 	mov	ptra, fp
2b3f4     F2 00 A0 FD | 	call	#popregs_
2b3f8                 | _sdmm_cc_disk_read_ret
2b3f8     2D 00 64 FD | 	ret
2b3fc                 | 
2b3fc                 | _sdmm_cc_disk_write
2b3fc     04 CA 05 F6 | 	mov	COUNT_, #4
2b400     E8 00 A0 FD | 	call	#pushregs_
2b404     4A A7 02 F6 | 	mov	local01, arg02
2b408     4C A9 02 F6 | 	mov	local02, arg04
2b40c     4B AB 02 F6 | 	mov	local03, arg03
2b410     00 92 0E F2 | 	cmp	arg01, #0 wz
2b414     01 7A 06 56 |  if_ne	mov	result1, #1
2b418                 | ' 
2b418                 | ' 	return Stat;
2b418     14 64 06 A1 |  if_e	add	objptr, #20
2b41c     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2b420     14 64 86 A1 |  if_e	sub	objptr, #20
2b424     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b428     01 7A CE F7 | 	test	result1, #1 wz
2b42c     03 7A 06 56 |  if_ne	mov	result1, #3
2b430     C4 00 90 5D |  if_ne	jmp	#LR__4424
2b434     15 64 06 F1 | 	add	objptr, #21
2b438     32 97 C2 FA | 	rdbyte	arg03, objptr
2b43c     15 64 86 F1 | 	sub	objptr, #21
2b440     08 96 CE F7 | 	test	arg03, #8 wz
2b444     09 AA 66 A0 |  if_e	shl	local03, #9
2b448     01 A8 0E F2 | 	cmp	local02, #1 wz
2b44c     30 00 90 5D |  if_ne	jmp	#LR__4420
2b450     18 92 06 F6 | 	mov	arg01, #24
2b454     55 95 02 F6 | 	mov	arg02, local03
2b458     E8 04 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b45c     3D AD 02 F6 | 	mov	local04, result1
2b460     07 AC 4E F7 | 	zerox	local04, #7 wz
2b464     7C 00 90 5D |  if_ne	jmp	#LR__4423
2b468     53 93 02 F6 | 	mov	arg01, local01
2b46c     FE 94 06 F6 | 	mov	arg02, #254
2b470     44 04 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b474     00 7A 0E F2 | 	cmp	result1, #0 wz
2b478     00 A8 06 56 |  if_ne	mov	local02, #0
2b47c     64 00 90 FD | 	jmp	#LR__4423
2b480                 | LR__4420
2b480     15 64 06 F1 | 	add	objptr, #21
2b484     32 AD C2 FA | 	rdbyte	local04, objptr
2b488     15 64 86 F1 | 	sub	objptr, #21
2b48c     06 AC CE F7 | 	test	local04, #6 wz
2b490     97 92 06 56 |  if_ne	mov	arg01, #151
2b494     54 95 02 56 |  if_ne	mov	arg02, local02
2b498     A8 04 B0 5D |  if_ne	call	#_sdmm_cc_send_cmd_0871
2b49c     55 95 02 F6 | 	mov	arg02, local03
2b4a0     19 92 06 F6 | 	mov	arg01, #25
2b4a4     9C 04 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b4a8     3D AD 02 F6 | 	mov	local04, result1
2b4ac     07 AC 4E F7 | 	zerox	local04, #7 wz
2b4b0     30 00 90 5D |  if_ne	jmp	#LR__4422
2b4b4                 | ' 			do {
2b4b4                 | LR__4421
2b4b4     53 93 02 F6 | 	mov	arg01, local01
2b4b8     FC 94 06 F6 | 	mov	arg02, #252
2b4bc     F8 03 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b4c0     00 7A 0E F2 | 	cmp	result1, #0 wz
2b4c4     01 00 00 5F 
2b4c8     00 A6 06 51 |  if_ne	add	local01, ##512
2b4cc     F9 A9 6E 5B |  if_ne	djnz	local02, #LR__4421
2b4d0     00 92 06 F6 | 	mov	arg01, #0
2b4d4     FD 94 06 F6 | 	mov	arg02, #253
2b4d8     DC 03 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b4dc     00 7A 0E F2 | 	cmp	result1, #0 wz
2b4e0     01 A8 06 A6 |  if_e	mov	local02, #1
2b4e4                 | LR__4422
2b4e4                 | LR__4423
2b4e4     AC 02 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b4e8                 | ' 				count = 1;
2b4e8                 | ' 		}
2b4e8                 | ' 	}
2b4e8                 | ' 	deselect();
2b4e8                 | ' 
2b4e8                 | ' 	return count ? RES_ERROR : RES_OK;
2b4e8     00 A8 0E F2 | 	cmp	local02, #0 wz
2b4ec     01 AC 06 56 |  if_ne	mov	local04, #1
2b4f0     00 AC 06 A6 |  if_e	mov	local04, #0
2b4f4     56 7B 02 F6 | 	mov	result1, local04
2b4f8                 | LR__4424
2b4f8     E7 F0 03 F6 | 	mov	ptra, fp
2b4fc     F2 00 A0 FD | 	call	#popregs_
2b500                 | _sdmm_cc_disk_write_ret
2b500     2D 00 64 FD | 	ret
2b504                 | 
2b504                 | _sdmm_cc_disk_ioctl
2b504     06 CA 05 F6 | 	mov	COUNT_, #6
2b508     E8 00 A0 FD | 	call	#pushregs_
2b50c     30 F0 07 F1 | 	add	ptra, #48
2b510     4A A7 02 F6 | 	mov	local01, arg02
2b514     4B A9 02 F6 | 	mov	local02, arg03
2b518     00 92 0E F2 | 	cmp	arg01, #0 wz
2b51c     01 7A 06 56 |  if_ne	mov	result1, #1
2b520                 | ' 
2b520                 | ' 	return Stat;
2b520     14 64 06 A1 |  if_e	add	objptr, #20
2b524     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2b528     14 64 86 A1 |  if_e	sub	objptr, #20
2b52c     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b530     01 7A CE F7 | 	test	result1, #1 wz
2b534     03 7A 06 56 |  if_ne	mov	result1, #3
2b538     F4 00 90 5D |  if_ne	jmp	#LR__4437
2b53c     01 AA 06 F6 | 	mov	local03, #1
2b540                 | ' 
2b540                 | ' 	res = RES_ERROR;
2b540                 | ' 	switch (ctrl) {
2b540     53 AD E2 F8 | 	getbyte	local04, local01, #0
2b544     04 AC 26 F3 | 	fle	local04, #4
2b548     30 AC 62 FD | 	jmprel	local04
2b54c                 | LR__4430
2b54c     10 00 90 FD | 	jmp	#LR__4431
2b550     1C 00 90 FD | 	jmp	#LR__4432
2b554     CC 00 90 FD | 	jmp	#LR__4435
2b558     BC 00 90 FD | 	jmp	#LR__4434
2b55c     C4 00 90 FD | 	jmp	#LR__4435
2b560                 | LR__4431
2b560     6C 02 B0 FD | 	call	#_sdmm_cc_select_0862
2b564     00 7A 0E F2 | 	cmp	result1, #0 wz
2b568     00 AA 06 56 |  if_ne	mov	local03, #0
2b56c                 | ' 			break;
2b56c     B8 00 90 FD | 	jmp	#LR__4436
2b570                 | LR__4432
2b570     09 92 06 F6 | 	mov	arg01, #9
2b574     00 94 06 F6 | 	mov	arg02, #0
2b578     C8 03 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b57c     3D AD 02 F6 | 	mov	local04, result1
2b580     07 AC 4E F7 | 	zerox	local04, #7 wz
2b584     A0 00 90 5D |  if_ne	jmp	#LR__4436
2b588     E7 92 02 F6 | 	mov	arg01, fp
2b58c     18 92 06 F1 | 	add	arg01, #24
2b590     10 94 06 F6 | 	mov	arg02, #16
2b594     9C 02 B0 FD | 	call	#_sdmm_cc_rcvr_datablock_0866
2b598     00 7A 0E F2 | 	cmp	result1, #0 wz
2b59c     88 00 90 AD |  if_e	jmp	#LR__4436
2b5a0     E7 92 02 F6 | 	mov	arg01, fp
2b5a4     18 92 06 F1 | 	add	arg01, #24
2b5a8     49 7B 02 F6 | 	mov	result1, arg01
2b5ac     06 92 06 F1 | 	add	arg01, #6
2b5b0     49 AF 02 FB | 	rdlong	local05, arg01
2b5b4     1B AE FE F9 | 	movbyts	local05, #27
2b5b8     3D 93 C2 FA | 	rdbyte	arg01, result1
2b5bc     06 92 46 F0 | 	shr	arg01, #6
2b5c0     01 92 0E F2 | 	cmp	arg01, #1 wz
2b5c4     36 AF 06 A4 |  if_e	bitl	local05, #310
2b5c8     01 AE 06 A1 |  if_e	add	local05, #1
2b5cc     0A B0 06 A6 |  if_e	mov	local06, #10
2b5d0     34 00 90 AD |  if_e	jmp	#LR__4433
2b5d4     0E AE 46 F0 | 	shr	local05, #14
2b5d8     0B AE 46 F7 | 	zerox	local05, #11
2b5dc     01 AE 06 F1 | 	add	local05, #1
2b5e0     05 7A 06 F1 | 	add	result1, #5
2b5e4     3D B1 C2 FA | 	rdbyte	local06, result1
2b5e8     58 B1 42 F8 | 	getnib	local06, local06, #0
2b5ec     04 7A 06 F1 | 	add	result1, #4
2b5f0     3D 7B E2 FA | 	rdword	result1, result1
2b5f4     1B 7A FE F9 | 	movbyts	result1, #27
2b5f8     17 7A 46 F0 | 	shr	result1, #23
2b5fc     07 7A 06 F5 | 	and	result1, #7
2b600     3D B1 02 F1 | 	add	local06, result1
2b604     07 B0 86 F1 | 	sub	local06, #7
2b608                 | LR__4433
2b608                 | '         cs = (LBA_t)(cs>>14 & 0xfff)+1;
2b608                 | '         n = (csd[5] & 15) + (__builtin_bswap32(*(uint16_t*)(&csd[9]))>>23 & 0x7)+(2-9);
2b608                 | '     }
2b608                 | '     return (LBA_t)cs << n;
2b608     58 AF 62 F0 | 	shl	local05, local06
2b60c     54 AF 62 FC | 	wrlong	local05, local02
2b610     00 AA 06 F6 | 	mov	local03, #0
2b614                 | '                			*(LBA_t*)buff = disc_size(csd);
2b614                 | ' 				res = RES_OK;
2b614                 | ' 			}
2b614                 | ' 			break;
2b614     10 00 90 FD | 	jmp	#LR__4436
2b618                 | LR__4434
2b618     54 01 69 FC | 	wrlong	#128, local02
2b61c     00 AA 06 F6 | 	mov	local03, #0
2b620                 | ' 			*(DWORD*)buff = 128;
2b620                 | ' 			res = RES_OK;
2b620                 | ' 			break;
2b620     04 00 90 FD | 	jmp	#LR__4436
2b624                 | LR__4435
2b624     04 AA 06 F6 | 	mov	local03, #4
2b628                 | LR__4436
2b628     68 01 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b62c                 | ' 			res = RES_PARERR;
2b62c                 | ' 	}
2b62c                 | ' 
2b62c                 | ' 	deselect();
2b62c                 | ' 
2b62c                 | ' 	return res;
2b62c     55 7B 02 F6 | 	mov	result1, local03
2b630                 | LR__4437
2b630     E7 F0 03 F6 | 	mov	ptra, fp
2b634     F2 00 A0 FD | 	call	#popregs_
2b638                 | _sdmm_cc_disk_ioctl_ret
2b638     2D 00 64 FD | 	ret
2b63c                 | 
2b63c                 | _sdmm_cc_xmit_mmc_0841
2b63c     32 81 02 FB | 	rdlong	_var01, objptr
2b640     08 64 06 F1 | 	add	objptr, #8
2b644     32 83 02 FB | 	rdlong	_var02, objptr
2b648     08 64 86 F1 | 	sub	objptr, #8
2b64c     40 82 62 FD | 	dirl	_var02
2b650     28 02 64 FD | 	setq	#1
2b654     49 85 02 FB | 	rdlong	_var03, arg01
2b658     69 84 62 FD | 	rev	_var03
2b65c     1B 84 FE F9 | 	movbyts	_var03, #27
2b660     41 85 22 FC | 	wypin	_var03, _var02
2b664     4A 85 02 F6 | 	mov	_var03, arg02
2b668     02 94 4E F0 | 	shr	arg02, #2 wz
2b66c     03 84 66 F0 | 	shl	_var03, #3
2b670     40 85 22 FC | 	wypin	_var03, _var01
2b674     41 82 62 FD | 	dirh	_var02
2b678     08 92 06 F1 | 	add	arg01, #8
2b67c     69 86 62 FD | 	rev	_var04
2b680     1B 86 FE F9 | 	movbyts	_var04, #27
2b684                 | LR__4440
2b684     41 87 22 5C |  if_ne	wypin	_var04, _var02
2b688     49 87 02 5B |  if_ne	rdlong	_var04, arg01
2b68c     04 92 06 51 |  if_ne	add	arg01, #4
2b690     69 86 62 5D |  if_ne	rev	_var04
2b694     1B 86 FE 59 |  if_ne	movbyts	_var04, #27
2b698                 | LR__4441
2b698     40 82 72 5D |  if_ne	testp	_var02 wc
2b69c     F8 FF 9F 1D |  if_a	jmp	#LR__4441
2b6a0     F8 95 6E 5B |  if_ne	djnz	arg02, #LR__4440
2b6a4                 | LR__4442
2b6a4     40 80 72 FD | 	testp	_var01 wc
2b6a8     F8 FF 9F 3D |  if_ae	jmp	#LR__4442
2b6ac     40 82 62 FD | 	dirl	_var02
2b6b0     FF FF FF FF 
2b6b4     41 FF 2B FC | 	wypin	##-1, _var02
2b6b8     41 82 62 FD | 	dirh	_var02
2b6bc                 | _sdmm_cc_xmit_mmc_0841_ret
2b6bc     2D 00 64 FD | 	ret
2b6c0                 | 
2b6c0                 | _sdmm_cc_rcvr_mmc_0848
2b6c0     32 81 02 FB | 	rdlong	_var01, objptr
2b6c4     0C 64 06 F1 | 	add	objptr, #12
2b6c8     32 83 02 FB | 	rdlong	_var02, objptr
2b6cc     0C 64 86 F1 | 	sub	objptr, #12
2b6d0     41 03 08 FC | 	akpin	_var02
2b6d4     4A 85 0A F6 | 	mov	_var03, arg02 wz
2b6d8     02 84 4E F0 | 	shr	_var03, #2 wz
2b6dc     30 00 90 AD |  if_e	jmp	#LR__4452
2b6e0     42 87 02 F6 | 	mov	_var04, _var03
2b6e4     05 86 66 F0 | 	shl	_var04, #5
2b6e8     40 87 22 FC | 	wypin	_var04, _var01
2b6ec     41 7F 18 FC | 	wxpin	#63, _var02
2b6f0                 | LR__4450
2b6f0                 | LR__4451
2b6f0     40 82 72 FD | 	testp	_var02 wc
2b6f4     F8 FF 9F 3D |  if_ae	jmp	#LR__4451
2b6f8     41 87 8A FA | 	rdpin	_var04, _var02
2b6fc     69 86 62 FD | 	rev	_var04
2b700     1B 86 FE F9 | 	movbyts	_var04, #27
2b704     49 87 62 FC | 	wrlong	_var04, arg01
2b708     04 92 06 F1 | 	add	arg01, #4
2b70c     F8 85 6E FB | 	djnz	_var03, #LR__4450
2b710                 | LR__4452
2b710     03 94 0E F5 | 	and	arg02, #3 wz
2b714     24 00 90 AD |  if_e	jmp	#LR__4455
2b718     41 4F 18 FC | 	wxpin	#39, _var02
2b71c                 | LR__4453
2b71c     40 11 28 FC | 	wypin	#8, _var01
2b720                 | LR__4454
2b720     40 82 72 FD | 	testp	_var02 wc
2b724     F8 FF 9F 3D |  if_ae	jmp	#LR__4454
2b728     41 87 8A FA | 	rdpin	_var04, _var02
2b72c     69 86 62 FD | 	rev	_var04
2b730     49 87 42 FC | 	wrbyte	_var04, arg01
2b734     01 92 06 F1 | 	add	arg01, #1
2b738     F8 95 6E FB | 	djnz	arg02, #LR__4453
2b73c                 | LR__4455
2b73c                 | _sdmm_cc_rcvr_mmc_0848_ret
2b73c     2D 00 64 FD | 	ret
2b740                 | 
2b740                 | _sdmm_cc_wait_ready_0852
2b740     03 CA 05 F6 | 	mov	COUNT_, #3
2b744     E8 00 A0 FD | 	call	#pushregs_
2b748     F8 A7 02 F6 | 	mov	local01, ptra
2b74c     1A A8 62 FD | 	getct	local02
2b750     14 AA 06 FB | 	rdlong	local03, #20
2b754     01 AA 46 F0 | 	shr	local03, #1
2b758                 | ' 	UINT tmr, tmout;
2b758                 | ' 
2b758                 | ' 	tmr = _cnt();
2b758                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2b758                 | ' 	for(;;) {
2b758     04 F0 07 F1 | 	add	ptra, #4
2b75c                 | LR__4460
2b75c     53 93 02 F6 | 	mov	arg01, local01
2b760     01 94 06 F6 | 	mov	arg02, #1
2b764     58 FF BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b768     53 95 C2 FA | 	rdbyte	arg02, local01
2b76c     FF 94 0E F2 | 	cmp	arg02, #255 wz
2b770     01 7A 06 A6 |  if_e	mov	result1, #1
2b774     1A 7A 62 5D |  if_ne	getct	result1
2b778     54 7B 82 51 |  if_ne	sub	result1, local02
2b77c     55 7B 12 52 |  if_ne	cmp	result1, local03 wc
2b780     00 7A 06 16 |  if_a	mov	result1, #0
2b784     D4 FF 9F 4D |  if_c_and_nz	jmp	#LR__4460
2b788     E7 F0 03 F6 | 	mov	ptra, fp
2b78c     F2 00 A0 FD | 	call	#popregs_
2b790                 | _sdmm_cc_wait_ready_0852_ret
2b790     2D 00 64 FD | 	ret
2b794                 | 
2b794                 | _sdmm_cc_deselect_0858
2b794     00 CA 05 F6 | 	mov	COUNT_, #0
2b798     E8 00 A0 FD | 	call	#pushregs_
2b79c     F8 95 02 F6 | 	mov	arg02, ptra
2b7a0     04 64 06 F1 | 	add	objptr, #4
2b7a4     32 93 02 FB | 	rdlong	arg01, objptr
2b7a8     04 64 86 F1 | 	sub	objptr, #4
2b7ac     04 F0 07 F1 | 	add	ptra, #4
2b7b0     59 92 62 FD | 	drvh	arg01
2b7b4     1F 20 64 FD | 	waitx	#16
2b7b8     4A 93 02 F6 | 	mov	arg01, arg02
2b7bc     01 94 06 F6 | 	mov	arg02, #1
2b7c0     FC FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b7c4     E7 F0 03 F6 | 	mov	ptra, fp
2b7c8     F2 00 A0 FD | 	call	#popregs_
2b7cc                 | _sdmm_cc_deselect_0858_ret
2b7cc     2D 00 64 FD | 	ret
2b7d0                 | 
2b7d0                 | _sdmm_cc_select_0862
2b7d0     01 CA 05 F6 | 	mov	COUNT_, #1
2b7d4     E8 00 A0 FD | 	call	#pushregs_
2b7d8     F8 95 02 F6 | 	mov	arg02, ptra
2b7dc     04 64 06 F1 | 	add	objptr, #4
2b7e0     32 93 02 FB | 	rdlong	arg01, objptr
2b7e4     08 64 06 F1 | 	add	objptr, #8
2b7e8     32 A7 02 FB | 	rdlong	local01, objptr
2b7ec     0C 64 86 F1 | 	sub	objptr, #12
2b7f0     04 F0 07 F1 | 	add	ptra, #4
2b7f4     50 A6 62 FD | 	fltl	local01
2b7f8     58 92 62 FD | 	drvl	arg01
2b7fc     1F 20 64 FD | 	waitx	#16
2b800     41 A6 62 FD | 	dirh	local01
2b804     4A 93 02 F6 | 	mov	arg01, arg02
2b808     01 94 06 F6 | 	mov	arg02, #1
2b80c     B0 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b810     2C FF BF FD | 	call	#_sdmm_cc_wait_ready_0852
2b814     00 7A 0E F2 | 	cmp	result1, #0 wz
2b818     01 7A 06 56 |  if_ne	mov	result1, #1
2b81c     08 00 90 5D |  if_ne	jmp	#LR__4470
2b820     70 FF BF FD | 	call	#_sdmm_cc_deselect_0858
2b824                 | ' 
2b824                 | ' 	deselect();
2b824                 | ' 	return 0;
2b824     00 7A 06 F6 | 	mov	result1, #0
2b828                 | LR__4470
2b828     E7 F0 03 F6 | 	mov	ptra, fp
2b82c     F2 00 A0 FD | 	call	#popregs_
2b830                 | _sdmm_cc_select_0862_ret
2b830     2D 00 64 FD | 	ret
2b834                 | 
2b834                 | _sdmm_cc_rcvr_datablock_0866
2b834     05 CA 05 F6 | 	mov	COUNT_, #5
2b838     E8 00 A0 FD | 	call	#pushregs_
2b83c     49 A7 02 F6 | 	mov	local01, arg01
2b840     4A A9 02 F6 | 	mov	local02, arg02
2b844     F8 AB 02 F6 | 	mov	local03, ptra
2b848     1A AC 62 FD | 	getct	local04
2b84c     14 AE 06 FB | 	rdlong	local05, #20
2b850     03 AE 46 F0 | 	shr	local05, #3
2b854                 | ' 	UINT tmr, tmout;
2b854                 | ' 
2b854                 | ' 	tmr = _cnt();
2b854                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2b854                 | ' 	for(;;) {
2b854     04 F0 07 F1 | 	add	ptra, #4
2b858                 | LR__4480
2b858     55 93 02 F6 | 	mov	arg01, local03
2b85c     01 94 06 F6 | 	mov	arg02, #1
2b860     5C FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b864     55 95 C2 FA | 	rdbyte	arg02, local03
2b868     FF 94 0E F2 | 	cmp	arg02, #255 wz
2b86c     1A 7A 62 AD |  if_e	getct	result1
2b870     3D 95 02 A6 |  if_e	mov	arg02, result1
2b874     56 95 82 A1 |  if_e	sub	arg02, local04
2b878     57 95 12 A2 |  if_e	cmp	arg02, local05 wc
2b87c     D8 FF 9F 8D |  if_c_and_z	jmp	#LR__4480
2b880     55 AF C2 FA | 	rdbyte	local05, local03
2b884     FE AE 0E F2 | 	cmp	local05, #254 wz
2b888     00 7A 06 56 |  if_ne	mov	result1, #0
2b88c     1C 00 90 5D |  if_ne	jmp	#LR__4481
2b890     53 93 02 F6 | 	mov	arg01, local01
2b894     54 95 02 F6 | 	mov	arg02, local02
2b898     24 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b89c     55 93 02 F6 | 	mov	arg01, local03
2b8a0     02 94 06 F6 | 	mov	arg02, #2
2b8a4     18 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b8a8                 | ' 
2b8a8                 | ' 	rcvr_mmc(buff, btr);
2b8a8                 | ' 	rcvr_mmc(d, 2);
2b8a8                 | ' 
2b8a8                 | ' 	return 1;
2b8a8     01 7A 06 F6 | 	mov	result1, #1
2b8ac                 | LR__4481
2b8ac     E7 F0 03 F6 | 	mov	ptra, fp
2b8b0     F2 00 A0 FD | 	call	#popregs_
2b8b4                 | _sdmm_cc_rcvr_datablock_0866_ret
2b8b4     2D 00 64 FD | 	ret
2b8b8                 | 
2b8b8                 | _sdmm_cc_xmit_datablock_0868
2b8b8     03 CA 05 F6 | 	mov	COUNT_, #3
2b8bc     E8 00 A0 FD | 	call	#pushregs_
2b8c0     49 A7 02 F6 | 	mov	local01, arg01
2b8c4     4A A9 02 F6 | 	mov	local02, arg02
2b8c8     F8 AB 02 F6 | 	mov	local03, ptra
2b8cc     04 F0 07 F1 | 	add	ptra, #4
2b8d0     6C FE BF FD | 	call	#_sdmm_cc_wait_ready_0852
2b8d4     00 7A 0E F2 | 	cmp	result1, #0 wz
2b8d8     00 7A 06 A6 |  if_e	mov	result1, #0
2b8dc     58 00 90 AD |  if_e	jmp	#LR__4491
2b8e0     55 A9 42 FC | 	wrbyte	local02, local03
2b8e4     55 93 02 F6 | 	mov	arg01, local03
2b8e8     01 94 06 F6 | 	mov	arg02, #1
2b8ec     4C FD BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b8f0     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2b8f4     FD A8 0E F2 | 	cmp	local02, #253 wz
2b8f8     38 00 90 AD |  if_e	jmp	#LR__4490
2b8fc     53 93 02 F6 | 	mov	arg01, local01
2b900     09 94 C6 F9 | 	decod	arg02, #9
2b904     34 FD BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b908     55 93 02 F6 | 	mov	arg01, local03
2b90c     02 94 06 F6 | 	mov	arg02, #2
2b910     AC FD BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b914     55 93 02 F6 | 	mov	arg01, local03
2b918     01 94 06 F6 | 	mov	arg02, #1
2b91c     A0 FD BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b920     55 AB C2 FA | 	rdbyte	local03, local03
2b924     1F AA 06 F5 | 	and	local03, #31
2b928     05 AA 0E F2 | 	cmp	local03, #5 wz
2b92c                 | ' 			return 0;
2b92c     00 7A 06 56 |  if_ne	mov	result1, #0
2b930     04 00 90 5D |  if_ne	jmp	#LR__4491
2b934                 | LR__4490
2b934                 | ' 	}
2b934                 | ' 
2b934                 | ' 	return 1;
2b934     01 7A 06 F6 | 	mov	result1, #1
2b938                 | LR__4491
2b938     E7 F0 03 F6 | 	mov	ptra, fp
2b93c     F2 00 A0 FD | 	call	#popregs_
2b940                 | _sdmm_cc_xmit_datablock_0868_ret
2b940     2D 00 64 FD | 	ret
2b944                 | 
2b944                 | _sdmm_cc_send_cmd_0871
2b944     04 CA 05 F6 | 	mov	COUNT_, #4
2b948     E8 00 A0 FD | 	call	#pushregs_
2b94c                 | _sdmm_cc_send_cmd_0871_enter
2b94c     49 A7 02 F6 | 	mov	local01, arg01
2b950     4A A9 02 F6 | 	mov	local02, arg02
2b954     F8 AB 02 F6 | 	mov	local03, ptra
2b958     53 7B E2 F8 | 	getbyte	result1, local01, #0
2b95c     80 7A CE F7 | 	test	result1, #128 wz
2b960     08 F0 07 F1 | 	add	ptra, #8
2b964     20 00 90 AD |  if_e	jmp	#LR__4500
2b968     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2b96c     7F A6 06 F5 | 	and	local01, #127
2b970     37 92 06 F6 | 	mov	arg01, #55
2b974     00 94 06 F6 | 	mov	arg02, #0
2b978     C8 FF BF FD | 	call	#_sdmm_cc_send_cmd_0871
2b97c     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
2b980     02 94 16 F2 | 	cmp	arg02, #2 wc
2b984     BC 00 90 3D |  if_ae	jmp	#LR__4503
2b988                 | LR__4500
2b988     53 7B E2 F8 | 	getbyte	result1, local01, #0
2b98c     0C 7A 0E F2 | 	cmp	result1, #12 wz
2b990     14 00 90 AD |  if_e	jmp	#LR__4501
2b994     FC FD BF FD | 	call	#_sdmm_cc_deselect_0858
2b998     34 FE BF FD | 	call	#_sdmm_cc_select_0862
2b99c     00 7A 0E F2 | 	cmp	result1, #0 wz
2b9a0     FF 7A 06 A6 |  if_e	mov	result1, #255
2b9a4     9C 00 90 AD |  if_e	jmp	#LR__4503
2b9a8                 | LR__4501
2b9a8     53 95 E2 F8 | 	getbyte	arg02, local01, #0
2b9ac     40 7A 06 F6 | 	mov	result1, #64
2b9b0     4A 7B 42 F5 | 	or	result1, arg02
2b9b4     55 7B 42 FC | 	wrbyte	result1, local03
2b9b8     55 95 02 F6 | 	mov	arg02, local03
2b9bc     01 94 06 F1 | 	add	arg02, #1
2b9c0     1B A8 FE F9 | 	movbyts	local02, #27
2b9c4     4A A9 62 FC | 	wrlong	local02, arg02
2b9c8     01 AC 06 F6 | 	mov	local04, #1
2b9cc     53 A9 02 F6 | 	mov	local02, local01
2b9d0     07 A8 4E F7 | 	zerox	local02, #7 wz
2b9d4     95 AC 06 A6 |  if_e	mov	local04, #149
2b9d8     53 A9 E2 F8 | 	getbyte	local02, local01, #0
2b9dc     08 A8 0E F2 | 	cmp	local02, #8 wz
2b9e0     87 AC 06 A6 |  if_e	mov	local04, #135
2b9e4     05 AA 06 F1 | 	add	local03, #5
2b9e8     55 AD 42 FC | 	wrbyte	local04, local03
2b9ec     05 AA 86 F1 | 	sub	local03, #5
2b9f0     55 93 02 F6 | 	mov	arg01, local03
2b9f4     06 94 06 F6 | 	mov	arg02, #6
2b9f8     40 FC BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b9fc     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2ba00     0C A6 0E F2 | 	cmp	local01, #12 wz
2ba04     55 93 02 A6 |  if_e	mov	arg01, local03
2ba08     06 92 06 A1 |  if_e	add	arg01, #6
2ba0c     01 94 06 A6 |  if_e	mov	arg02, #1
2ba10     AC FC BF AD |  if_e	call	#_sdmm_cc_rcvr_mmc_0848
2ba14     0A AC 06 F6 | 	mov	local04, #10
2ba18                 | ' 	n = 10;
2ba18                 | ' 	do
2ba18                 | LR__4502
2ba18     55 93 02 F6 | 	mov	arg01, local03
2ba1c     06 92 06 F1 | 	add	arg01, #6
2ba20     01 94 06 F6 | 	mov	arg02, #1
2ba24     98 FC BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2ba28     06 AA 06 F1 | 	add	local03, #6
2ba2c     55 A9 C2 FA | 	rdbyte	local02, local03
2ba30     06 AA 86 F1 | 	sub	local03, #6
2ba34     80 A8 CE F7 | 	test	local02, #128 wz
2ba38     F7 AD 6E 5B |  if_ne	djnz	local04, #LR__4502
2ba3c                 | ' 
2ba3c                 | ' 	return buf[6];
2ba3c     06 AA 06 F1 | 	add	local03, #6
2ba40     55 7B C2 FA | 	rdbyte	result1, local03
2ba44                 | LR__4503
2ba44     E7 F0 03 F6 | 	mov	ptra, fp
2ba48     F2 00 A0 FD | 	call	#popregs_
2ba4c                 | _sdmm_cc_send_cmd_0871_ret
2ba4c     2D 00 64 FD | 	ret
2ba50                 | 
2ba50                 | _sdmm_cc_disk_setpins
2ba50     00 92 0E F2 | 	cmp	arg01, #0 wz
2ba54     01 7A 66 56 |  if_ne	neg	result1, #1
2ba58     24 00 90 5D |  if_ne	jmp	#_sdmm_cc_disk_setpins_ret
2ba5c     32 95 62 FC | 	wrlong	arg02, objptr
2ba60     04 64 06 F1 | 	add	objptr, #4
2ba64     32 97 62 FC | 	wrlong	arg03, objptr
2ba68     04 64 06 F1 | 	add	objptr, #4
2ba6c     32 99 62 FC | 	wrlong	arg04, objptr
2ba70     04 64 06 F1 | 	add	objptr, #4
2ba74     32 9B 62 FC | 	wrlong	arg05, objptr
2ba78     0C 64 86 F1 | 	sub	objptr, #12
2ba7c                 | '     _pin_clk = pclk;
2ba7c                 | '     _pin_ss = pss;
2ba7c                 | '     _pin_di = pdi;
2ba7c                 | '     _pin_do = pdo;
2ba7c                 | ' #line 848 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2ba7c                 | '     return 0;
2ba7c     00 7A 06 F6 | 	mov	result1, #0
2ba80                 | _sdmm_cc_disk_setpins_ret
2ba80     2D 00 64 FD | 	ret
2ba84                 | 
2ba84                 | _sdmm_cc_disk_deinitialize
2ba84     04 CA 05 F6 | 	mov	COUNT_, #4
2ba88     E8 00 A0 FD | 	call	#pushregs_
2ba8c     00 92 4E F2 | 	cmps	arg01, #0 wz
2ba90     32 A7 02 FB | 	rdlong	local01, objptr
2ba94     04 64 06 F1 | 	add	objptr, #4
2ba98     32 A9 02 FB | 	rdlong	local02, objptr
2ba9c     04 64 06 F1 | 	add	objptr, #4
2baa0     32 AB 02 FB | 	rdlong	local03, objptr
2baa4     08 64 06 F1 | 	add	objptr, #8
2baa8     32 AD 02 FB | 	rdlong	local04, objptr
2baac     04 64 86 F1 | 	sub	objptr, #4
2bab0     32 93 02 FB | 	rdlong	arg01, objptr
2bab4     0C 64 86 F1 | 	sub	objptr, #12
2bab8                 | ' #line 865 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2bab8                 | '         return RES_NOTRDY;
2bab8     03 7A 06 56 |  if_ne	mov	result1, #3
2babc     34 00 90 5D |  if_ne	jmp	#LR__4510
2bac0     50 92 62 FD | 	fltl	arg01
2bac4     49 01 08 FC | 	wrpin	#0, arg01
2bac8     50 AC 62 FD | 	fltl	local04
2bacc     56 01 08 FC | 	wrpin	#0, local04
2bad0     50 AA 62 FD | 	fltl	local03
2bad4     55 01 08 FC | 	wrpin	#0, local03
2bad8     50 A6 62 FD | 	fltl	local01
2badc     53 01 08 FC | 	wrpin	#0, local01
2bae0     50 A8 62 FD | 	fltl	local02
2bae4     54 01 08 FC | 	wrpin	#0, local02
2bae8     0A 92 06 F6 | 	mov	arg01, #10
2baec     A8 93 BF FD | 	call	#__system___waitms
2baf0                 | '     }
2baf0                 | ' #line 871 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2baf0                 | '     _pinclear(SMPIN_DO);
2baf0                 | '     _pinclear(PIN_DO);
2baf0                 | '     _pinclear(PIN_DI);
2baf0                 | '     _pinclear(PIN_CLK);
2baf0                 | '     _pinclear(PIN_SS);
2baf0                 | ' 
2baf0                 | '     _waitms(10);
2baf0                 | ' 
2baf0                 | '     return 0;
2baf0     00 7A 06 F6 | 	mov	result1, #0
2baf4                 | LR__4510
2baf4     E7 F0 03 F6 | 	mov	ptra, fp
2baf8     F2 00 A0 FD | 	call	#popregs_
2bafc                 | _sdmm_cc_disk_deinitialize_ret
2bafc     2D 00 64 FD | 	ret
2bb00                 | 
2bb00                 | _sdmm_cc_v_do_io
2bb00     08 CA 05 F6 | 	mov	COUNT_, #8
2bb04     E8 00 A0 FD | 	call	#pushregs_
2bb08     4B A7 02 F6 | 	mov	local01, arg03
2bb0c     4C A9 02 F6 | 	mov	local02, arg04
2bb10     4A AB 02 F6 | 	mov	local03, arg02
2bb14     18 64 06 F1 | 	add	objptr, #24
2bb18     32 AD 02 FB | 	rdlong	local04, objptr
2bb1c     00 98 06 F6 | 	mov	arg04, #0
2bb20     FF AD 06 F5 | 	and	local04, #511
2bb24     00 AE 06 F6 | 	mov	local05, #0
2bb28     32 93 02 FB | 	rdlong	arg01, objptr
2bb2c     04 64 06 F1 | 	add	objptr, #4
2bb30     32 95 02 FB | 	rdlong	arg02, objptr
2bb34     1C 64 86 F1 | 	sub	objptr, #28
2bb38     09 96 06 F6 | 	mov	arg03, #9
2bb3c     7C B2 BF FD | 	call	#__system___int64_sar
2bb40     3D B1 02 F6 | 	mov	local06, result1
2bb44     00 AC 0E F2 | 	cmp	local04, #0 wz
2bb48                 | ' 
2bb48                 | ' 
2bb48                 | '         return -1;
2bb48     01 7A 66 56 |  if_ne	neg	result1, #1
2bb4c     84 00 90 5D |  if_ne	jmp	#LR__4523
2bb50     53 B3 02 F6 | 	mov	local07, local01
2bb54     09 B2 46 F0 | 	shr	local07, #9
2bb58     00 A8 0E F2 | 	cmp	local02, #0 wz
2bb5c     1C 00 90 AD |  if_e	jmp	#LR__4520
2bb60     00 92 06 F6 | 	mov	arg01, #0
2bb64     55 95 02 F6 | 	mov	arg02, local03
2bb68     58 97 02 F6 | 	mov	arg03, local06
2bb6c     59 99 02 F6 | 	mov	arg04, local07
2bb70     88 F8 BF FD | 	call	#_sdmm_cc_disk_write
2bb74     3D B5 02 F6 | 	mov	local08, result1
2bb78     18 00 90 FD | 	jmp	#LR__4521
2bb7c                 | LR__4520
2bb7c     00 92 06 F6 | 	mov	arg01, #0
2bb80     55 95 02 F6 | 	mov	arg02, local03
2bb84     58 97 02 F6 | 	mov	arg03, local06
2bb88     59 99 02 F6 | 	mov	arg04, local07
2bb8c     AC F7 BF FD | 	call	#_sdmm_cc_disk_read
2bb90     3D B5 02 F6 | 	mov	local08, result1
2bb94                 | LR__4521
2bb94     00 B4 0E F2 | 	cmp	local08, #0 wz
2bb98     34 00 90 5D |  if_ne	jmp	#LR__4522
2bb9c     09 B2 66 F0 | 	shl	local07, #9
2bba0     59 AF 02 F1 | 	add	local05, local07
2bba4     18 64 06 F1 | 	add	objptr, #24
2bba8     32 7B 02 FB | 	rdlong	result1, objptr
2bbac     04 64 06 F1 | 	add	objptr, #4
2bbb0     32 7D 02 FB | 	rdlong	result2, objptr
2bbb4     59 7B 12 F1 | 	add	result1, local07 wc
2bbb8     00 7C 26 F1 | 	addx	result2, #0
2bbbc     04 64 86 F1 | 	sub	objptr, #4
2bbc0     32 7B 62 FC | 	wrlong	result1, objptr
2bbc4     04 64 06 F1 | 	add	objptr, #4
2bbc8     32 7D 62 FC | 	wrlong	result2, objptr
2bbcc     1C 64 86 F1 | 	sub	objptr, #28
2bbd0                 | LR__4522
2bbd0                 | ' 
2bbd0                 | ' 
2bbd0                 | '     }
2bbd0                 | '     return bytes_io;
2bbd0     57 7B 02 F6 | 	mov	result1, local05
2bbd4                 | LR__4523
2bbd4     E7 F0 03 F6 | 	mov	ptra, fp
2bbd8     F2 00 A0 FD | 	call	#popregs_
2bbdc                 | _sdmm_cc_v_do_io_ret
2bbdc     2D 00 64 FD | 	ret
2bbe0                 | 
2bbe0                 | _sdmm_cc_v_read
2bbe0                 | ' {
2bbe0                 | '     return v_do_io(fil, buf, count,  (0) );
2bbe0     00 98 06 F6 | 	mov	arg04, #0
2bbe4     18 FF BF FD | 	call	#_sdmm_cc_v_do_io
2bbe8                 | _sdmm_cc_v_read_ret
2bbe8     2D 00 64 FD | 	ret
2bbec                 | 
2bbec                 | _sdmm_cc_v_write
2bbec                 | ' {
2bbec                 | '     return v_do_io(fil, buf, count,  (1) );
2bbec     01 98 06 F6 | 	mov	arg04, #1
2bbf0     0C FF BF FD | 	call	#_sdmm_cc_v_do_io
2bbf4                 | _sdmm_cc_v_write_ret
2bbf4     2D 00 64 FD | 	ret
2bbf8                 | 
2bbf8                 | _sdmm_cc_v_ioctl
2bbf8     00 92 06 F6 | 	mov	arg01, #0
2bbfc     04 F9 BF FD | 	call	#_sdmm_cc_disk_ioctl
2bc00     00 7A 0E F2 | 	cmp	result1, #0 wz
2bc04                 | '         return _seterror( 10 );
2bc04     20 68 06 51 |  if_ne	add	ptr___system__dat__, #32
2bc08     34 15 68 5C |  if_ne	wrlong	#10, ptr___system__dat__
2bc0c     20 68 86 51 |  if_ne	sub	ptr___system__dat__, #32
2bc10     01 7A 66 56 |  if_ne	neg	result1, #1
2bc14                 | '     return 0;
2bc14     00 7A 06 A6 |  if_e	mov	result1, #0
2bc18                 | _sdmm_cc_v_ioctl_ret
2bc18     2D 00 64 FD | 	ret
2bc1c                 | 
2bc1c                 | _sdmm_cc_v_lseek
2bc1c     4A 81 02 F6 | 	mov	_var01, arg02
2bc20     4C 85 0A F6 | 	mov	_var03, arg04 wz
2bc24     1C 00 90 5D |  if_ne	jmp	#LR__4530
2bc28     4B 85 02 F6 | 	mov	_var03, arg03
2bc2c     18 64 06 F1 | 	add	objptr, #24
2bc30     32 81 62 FC | 	wrlong	_var01, objptr
2bc34     04 64 06 F1 | 	add	objptr, #4
2bc38     32 85 62 FC | 	wrlong	_var03, objptr
2bc3c     1C 64 86 F1 | 	sub	objptr, #28
2bc40     64 00 90 FD | 	jmp	#LR__4533
2bc44                 | LR__4530
2bc44     01 84 0E F2 | 	cmp	_var03, #1 wz
2bc48     30 00 90 5D |  if_ne	jmp	#LR__4531
2bc4c     18 64 06 F1 | 	add	objptr, #24
2bc50     32 7B 02 FB | 	rdlong	result1, objptr
2bc54     04 64 06 F1 | 	add	objptr, #4
2bc58     32 7D 02 FB | 	rdlong	result2, objptr
2bc5c     40 7B 12 F1 | 	add	result1, _var01 wc
2bc60     4B 7D 22 F1 | 	addx	result2, arg03
2bc64     04 64 86 F1 | 	sub	objptr, #4
2bc68     32 7B 62 FC | 	wrlong	result1, objptr
2bc6c     04 64 06 F1 | 	add	objptr, #4
2bc70     32 7D 62 FC | 	wrlong	result2, objptr
2bc74     1C 64 86 F1 | 	sub	objptr, #28
2bc78     2C 00 90 FD | 	jmp	#LR__4532
2bc7c                 | LR__4531
2bc7c     40 7B 22 F6 | 	not	result1, _var01
2bc80     01 7A 0E F1 | 	add	result1, #1 wz
2bc84     4B 7D 22 F6 | 	not	result2, arg03
2bc88     00 94 06 F6 | 	mov	arg02, #0
2bc8c     01 94 66 A6 |  if_e	neg	arg02, #1
2bc90     4A 7D 82 F1 | 	sub	result2, arg02
2bc94     18 64 06 F1 | 	add	objptr, #24
2bc98     32 7B 62 FC | 	wrlong	result1, objptr
2bc9c     04 64 06 F1 | 	add	objptr, #4
2bca0     32 7D 62 FC | 	wrlong	result2, objptr
2bca4     1C 64 86 F1 | 	sub	objptr, #28
2bca8                 | LR__4532
2bca8                 | LR__4533
2bca8                 | '         curpos = -off;
2bca8                 | '     }
2bca8                 | '     return curpos;
2bca8     18 64 06 F1 | 	add	objptr, #24
2bcac     32 7B 02 FB | 	rdlong	result1, objptr
2bcb0     04 64 06 F1 | 	add	objptr, #4
2bcb4     32 7D 02 FB | 	rdlong	result2, objptr
2bcb8     1C 64 86 F1 | 	sub	objptr, #28
2bcbc                 | _sdmm_cc_v_lseek_ret
2bcbc     2D 00 64 FD | 	ret
2bcc0                 | 
2bcc0                 | _sdmm_cc_v_flush
2bcc0                 | ' {
2bcc0                 | '     return 0;
2bcc0     00 7A 06 F6 | 	mov	result1, #0
2bcc4                 | _sdmm_cc_v_flush_ret
2bcc4     2D 00 64 FD | 	ret
2bcc8                 | 
2bcc8                 | _sdmm_cc_v_close
2bcc8     00 92 06 F6 | 	mov	arg01, #0
2bccc     B4 FD BF FD | 	call	#_sdmm_cc_disk_deinitialize
2bcd0     20 64 06 F1 | 	add	objptr, #32
2bcd4     32 93 02 FB | 	rdlong	arg01, objptr
2bcd8     04 64 06 F1 | 	add	objptr, #4
2bcdc     32 95 02 FB | 	rdlong	arg02, objptr
2bce0     24 64 86 F1 | 	sub	objptr, #36
2bce4     60 B1 BF FD | 	call	#__system___freepins
2bce8                 | ' {
2bce8                 | '     disk_deinitialize(0);
2bce8                 | '     _freepins(f_pinmask);
2bce8                 | '     return 0;
2bce8     00 7A 06 F6 | 	mov	result1, #0
2bcec                 | _sdmm_cc_v_close_ret
2bcec     2D 00 64 FD | 	ret
2bcf0                 | 
2bcf0                 | _sdmm_cc_v_putc
2bcf0     00 CA 05 F6 | 	mov	COUNT_, #0
2bcf4     E8 00 A0 FD | 	call	#pushregs_
2bcf8     0C F0 07 F1 | 	add	ptra, #12
2bcfc     04 CE 05 F1 | 	add	fp, #4
2bd00     E7 92 62 FC | 	wrlong	arg01, fp
2bd04     4A 93 02 F6 | 	mov	arg01, arg02
2bd08     E7 94 02 F6 | 	mov	arg02, fp
2bd0c     01 96 06 F6 | 	mov	arg03, #1
2bd10     04 CE 85 F1 | 	sub	fp, #4
2bd14                 | ' {
2bd14                 | '     return v_do_io(fil, buf, count,  (1) );
2bd14     01 98 06 F6 | 	mov	arg04, #1
2bd18     E4 FD BF FD | 	call	#_sdmm_cc_v_do_io
2bd1c     01 7A 0E F2 | 	cmp	result1, #1 wz
2bd20     04 CE 05 A1 |  if_e	add	fp, #4
2bd24     E7 7A 02 AB |  if_e	rdlong	result1, fp
2bd28     04 CE 85 A1 |  if_e	sub	fp, #4
2bd2c                 | '     return -1;
2bd2c     01 7A 66 56 |  if_ne	neg	result1, #1
2bd30     E7 F0 03 F6 | 	mov	ptra, fp
2bd34     F2 00 A0 FD | 	call	#popregs_
2bd38                 | _sdmm_cc_v_putc_ret
2bd38     2D 00 64 FD | 	ret
2bd3c                 | 
2bd3c                 | _sdmm_cc_v_getc
2bd3c     00 CA 05 F6 | 	mov	COUNT_, #0
2bd40     E8 00 A0 FD | 	call	#pushregs_
2bd44     0C F0 07 F1 | 	add	ptra, #12
2bd48     08 CE 05 F1 | 	add	fp, #8
2bd4c     E7 00 68 FC | 	wrlong	#0, fp
2bd50     E7 94 02 F6 | 	mov	arg02, fp
2bd54     08 CE 85 F1 | 	sub	fp, #8
2bd58     01 96 06 F6 | 	mov	arg03, #1
2bd5c                 | ' {
2bd5c                 | '     return v_do_io(fil, buf, count,  (0) );
2bd5c     00 98 06 F6 | 	mov	arg04, #0
2bd60     9C FD BF FD | 	call	#_sdmm_cc_v_do_io
2bd64     01 7A 0E F2 | 	cmp	result1, #1 wz
2bd68     08 CE 05 A1 |  if_e	add	fp, #8
2bd6c     E7 7A 02 AB |  if_e	rdlong	result1, fp
2bd70     08 CE 85 A1 |  if_e	sub	fp, #8
2bd74                 | '     return -1;
2bd74     01 7A 66 56 |  if_ne	neg	result1, #1
2bd78     E7 F0 03 F6 | 	mov	ptra, fp
2bd7c     F2 00 A0 FD | 	call	#popregs_
2bd80                 | _sdmm_cc_v_getc_ret
2bd80     2D 00 64 FD | 	ret
2bd84                 | 
2bd84                 | _fatfs_cc_ff_uni2oem
2bd84     00 80 06 F6 | 	mov	_var01, #0
2bd88     80 92 16 F2 | 	cmp	arg01, #128 wc
2bd8c     49 81 02 C6 |  if_b	mov	_var01, arg01
2bd90     58 00 90 CD |  if_b	jmp	#LR__4544
2bd94     80 00 00 FF 
2bd98     00 92 16 F2 | 	cmp	arg01, ##65536 wc
2bd9c     4C 00 90 3D |  if_ae	jmp	#LR__4543
2bda0     4A 7B 32 F9 | 	getword	result1, arg02, #0
2bda4     01 00 00 FF 
2bda8     52 7B 0E F2 | 	cmp	result1, ##850 wz
2bdac     3C 00 90 5D |  if_ne	jmp	#LR__4543
2bdb0                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2bdb0     00 80 06 F6 | 	mov	_var01, #0
2bdb4     D7 14 48 FB | 	callpa	#(@LR__4541-@LR__4540)>>2,fcache_load_ptr_
2bdb8                 | LR__4540
2bdb8     40 7B 32 F9 | 	getword	result1, _var01, #0
2bdbc     80 7A 16 F2 | 	cmp	result1, #128 wc
2bdc0     1C 00 90 3D |  if_ae	jmp	#LR__4542
2bdc4     40 7B 32 F9 | 	getword	result1, _var01, #0
2bdc8     01 7A 66 F0 | 	shl	result1, #1
2bdcc     36 7B 02 F1 | 	add	result1, ptr__fatfs_cc_dat__
2bdd0     3D 7B E2 FA | 	rdword	result1, result1
2bdd4     3D 93 0A F2 | 	cmp	arg01, result1 wz
2bdd8     01 80 06 51 |  if_ne	add	_var01, #1
2bddc     D8 FF 9F 5D |  if_ne	jmp	#LR__4540
2bde0                 | LR__4541
2bde0                 | LR__4542
2bde0     40 81 32 F9 | 	getword	_var01, _var01, #0
2bde4     80 80 06 F1 | 	add	_var01, #128
2bde8     40 81 E2 F8 | 	getbyte	_var01, _var01, #0
2bdec                 | LR__4543
2bdec                 | LR__4544
2bdec                 | ' 			c = (c + 0x80) & 0xFF;
2bdec                 | ' 		}
2bdec                 | ' 	}
2bdec                 | ' 
2bdec                 | ' 	return c;
2bdec     40 7B 02 F6 | 	mov	result1, _var01
2bdf0                 | _fatfs_cc_ff_uni2oem_ret
2bdf0     2D 00 64 FD | 	ret
2bdf4                 | 
2bdf4                 | _fatfs_cc_ff_oem2uni
2bdf4     00 80 06 F6 | 	mov	_var01, #0
2bdf8     49 7B 32 F9 | 	getword	result1, arg01, #0
2bdfc     80 7A 16 F2 | 	cmp	result1, #128 wc
2be00     49 81 02 C6 |  if_b	mov	_var01, arg01
2be04     2C 00 90 CD |  if_b	jmp	#LR__4551
2be08     4A 95 32 F9 | 	getword	arg02, arg02, #0
2be0c     01 00 00 FF 
2be10     52 95 0E F2 | 	cmp	arg02, ##850 wz
2be14     1C 00 90 5D |  if_ne	jmp	#LR__4550
2be18     49 7B 32 F9 | 	getword	result1, arg01, #0
2be1c     00 7B 16 F2 | 	cmp	result1, #256 wc
2be20     49 93 32 C9 |  if_b	getword	arg01, arg01, #0
2be24     80 92 86 C1 |  if_b	sub	arg01, #128
2be28     01 92 66 C0 |  if_b	shl	arg01, #1
2be2c     36 93 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2be30     49 81 E2 CA |  if_b	rdword	_var01, arg01
2be34                 | LR__4550
2be34                 | LR__4551
2be34                 | ' 		}
2be34                 | ' 	}
2be34                 | ' 
2be34                 | ' 	return c;
2be34     40 7B 02 F6 | 	mov	result1, _var01
2be38                 | _fatfs_cc_ff_oem2uni_ret
2be38     2D 00 64 FD | 	ret
2be3c                 | 
2be3c                 | _fatfs_cc_ff_wtoupper
2be3c     49 81 02 F6 | 	mov	_var01, arg01
2be40     80 00 00 FF 
2be44     00 80 16 F2 | 	cmp	_var01, ##65536 wc
2be48     58 01 90 3D |  if_ae	jmp	#LR__4573
2be4c     40 83 02 F6 | 	mov	_var02, _var01
2be50     41 81 32 F9 | 	getword	_var01, _var02, #0
2be54     08 00 00 FF 
2be58     00 80 16 F2 | 	cmp	_var01, ##4096 wc
2be5c     36 85 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2be60     00 85 06 C1 |  if_b	add	_var03, #256
2be64     36 85 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2be68     01 00 00 3F 
2be6c     F2 84 06 31 |  if_ae	add	_var03, ##754
2be70     42 87 02 F6 | 	mov	_var04, _var03
2be74                 | ' 		uc = (WORD)uni;
2be74                 | ' 		p = uc < 0x1000 ? (WORD*) cvt1 : (WORD *) cvt2;
2be74                 | ' 		for (;;) {
2be74                 | LR__4560
2be74     43 89 E2 FA | 	rdword	_var05, _var04
2be78     44 85 02 F6 | 	mov	_var03, _var05
2be7c     0F 84 4E F7 | 	zerox	_var03, #15 wz
2be80     02 86 06 F1 | 	add	_var04, #2
2be84     18 01 90 AD |  if_e	jmp	#LR__4572
2be88     41 85 32 F9 | 	getword	_var03, _var02, #0
2be8c     44 81 32 F9 | 	getword	_var01, _var05, #0
2be90     40 85 12 F2 | 	cmp	_var03, _var01 wc
2be94     08 01 90 CD |  if_b	jmp	#LR__4572
2be98     43 8B E2 FA | 	rdword	_var06, _var04
2be9c     45 8D 32 F9 | 	getword	_var07, _var06, #0
2bea0     08 8C 46 F0 | 	shr	_var07, #8
2bea4     45 8B 32 F9 | 	getword	_var06, _var06, #0
2bea8     45 8B E2 F8 | 	getbyte	_var06, _var06, #0
2beac     41 85 32 F9 | 	getword	_var03, _var02, #0
2beb0     44 8F 32 F9 | 	getword	_var08, _var05, #0
2beb4     45 81 32 F9 | 	getword	_var01, _var06, #0
2beb8     40 8F 02 F1 | 	add	_var08, _var01
2bebc     47 85 52 F2 | 	cmps	_var03, _var08 wc
2bec0     02 86 06 F1 | 	add	_var04, #2
2bec4     C4 00 90 3D |  if_ae	jmp	#LR__4571
2bec8                 | ' 				switch (cmd) {
2bec8     46 91 32 F9 | 	getword	_var09, _var07, #0
2becc     09 90 26 F3 | 	fle	_var09, #9
2bed0     30 90 62 FD | 	jmprel	_var09
2bed4                 | LR__4561
2bed4     24 00 90 FD | 	jmp	#LR__4562
2bed8     3C 00 90 FD | 	jmp	#LR__4563
2bedc     54 00 90 FD | 	jmp	#LR__4564
2bee0     5C 00 90 FD | 	jmp	#LR__4565
2bee4     64 00 90 FD | 	jmp	#LR__4566
2bee8     6C 00 90 FD | 	jmp	#LR__4567
2beec     74 00 90 FD | 	jmp	#LR__4568
2bef0     7C 00 90 FD | 	jmp	#LR__4569
2bef4     84 00 90 FD | 	jmp	#LR__4570
2bef8     A4 00 90 FD | 	jmp	#LR__4572
2befc                 | LR__4562
2befc     41 83 32 F9 | 	getword	_var02, _var02, #0
2bf00     44 89 32 F9 | 	getword	_var05, _var05, #0
2bf04     44 83 82 F1 | 	sub	_var02, _var05
2bf08     01 82 66 F0 | 	shl	_var02, #1
2bf0c     43 83 02 F1 | 	add	_var02, _var04
2bf10     41 83 E2 FA | 	rdword	_var02, _var02
2bf14     88 00 90 FD | 	jmp	#LR__4572
2bf18                 | LR__4563
2bf18     41 85 32 F9 | 	getword	_var03, _var02, #0
2bf1c     41 83 32 F9 | 	getword	_var02, _var02, #0
2bf20     44 89 32 F9 | 	getword	_var05, _var05, #0
2bf24     44 83 82 F1 | 	sub	_var02, _var05
2bf28     01 82 06 F5 | 	and	_var02, #1
2bf2c     42 83 C2 F2 | 	subr	_var02, _var03
2bf30     6C 00 90 FD | 	jmp	#LR__4572
2bf34                 | LR__4564
2bf34     41 83 32 F9 | 	getword	_var02, _var02, #0
2bf38     10 82 86 F1 | 	sub	_var02, #16
2bf3c     60 00 90 FD | 	jmp	#LR__4572
2bf40                 | LR__4565
2bf40     41 83 32 F9 | 	getword	_var02, _var02, #0
2bf44     20 82 86 F1 | 	sub	_var02, #32
2bf48     54 00 90 FD | 	jmp	#LR__4572
2bf4c                 | LR__4566
2bf4c     41 83 32 F9 | 	getword	_var02, _var02, #0
2bf50     30 82 86 F1 | 	sub	_var02, #48
2bf54     48 00 90 FD | 	jmp	#LR__4572
2bf58                 | LR__4567
2bf58     41 83 32 F9 | 	getword	_var02, _var02, #0
2bf5c     1A 82 86 F1 | 	sub	_var02, #26
2bf60     3C 00 90 FD | 	jmp	#LR__4572
2bf64                 | LR__4568
2bf64     41 83 32 F9 | 	getword	_var02, _var02, #0
2bf68     08 82 06 F1 | 	add	_var02, #8
2bf6c     30 00 90 FD | 	jmp	#LR__4572
2bf70                 | LR__4569
2bf70     41 83 32 F9 | 	getword	_var02, _var02, #0
2bf74     50 82 86 F1 | 	sub	_var02, #80
2bf78     24 00 90 FD | 	jmp	#LR__4572
2bf7c                 | LR__4570
2bf7c     41 83 32 F9 | 	getword	_var02, _var02, #0
2bf80     0E 00 00 FF 
2bf84     60 82 86 F1 | 	sub	_var02, ##7264
2bf88                 | ' 				}
2bf88                 | ' 				break;
2bf88     14 00 90 FD | 	jmp	#LR__4572
2bf8c                 | LR__4571
2bf8c     0F 8C 4E F7 | 	zerox	_var07, #15 wz
2bf90     45 8B 32 A9 |  if_e	getword	_var06, _var06, #0
2bf94     01 8A 66 A0 |  if_e	shl	_var06, #1
2bf98     45 87 02 A1 |  if_e	add	_var04, _var06
2bf9c     D4 FE 9F FD | 	jmp	#LR__4560
2bfa0                 | LR__4572
2bfa0     41 81 32 F9 | 	getword	_var01, _var02, #0
2bfa4                 | LR__4573
2bfa4                 | ' 		}
2bfa4                 | ' 		uni = uc;
2bfa4                 | ' 	}
2bfa4                 | ' 
2bfa4                 | ' 	return uni;
2bfa4     40 7B 02 F6 | 	mov	result1, _var01
2bfa8                 | _fatfs_cc_ff_wtoupper_ret
2bfa8     2D 00 64 FD | 	ret
2bfac                 | 
2bfac                 | _fatfs_cc_strncpy
2bfac     49 81 02 F6 | 	mov	_var01, arg01
2bfb0     D7 18 48 FB | 	callpa	#(@LR__4581-@LR__4580)>>2,fcache_load_ptr_
2bfb4                 | ' 
2bfb4                 | ' 	dscan = dst;
2bfb4                 | ' 	sscan = src;
2bfb4                 | ' 	count = n;
2bfb4                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2bfb4                 | LR__4580
2bfb4     01 96 86 F1 | 	sub	arg03, #1
2bfb8     00 96 56 F2 | 	cmps	arg03, #0 wc
2bfbc     24 00 90 CD |  if_b	jmp	#LR__4582
2bfc0     4A 7B 02 F6 | 	mov	result1, arg02
2bfc4     01 7A 06 F1 | 	add	result1, #1
2bfc8     4A 83 C2 FA | 	rdbyte	_var02, arg02
2bfcc     3D 95 02 F6 | 	mov	arg02, result1
2bfd0     40 83 42 FC | 	wrbyte	_var02, _var01
2bfd4     41 83 E2 F8 | 	getbyte	_var02, _var02, #0
2bfd8     07 82 4E F7 | 	zerox	_var02, #7 wz
2bfdc                 | ' 		continue;
2bfdc     01 80 06 F1 | 	add	_var01, #1
2bfe0     D0 FF 9F 5D |  if_ne	jmp	#LR__4580
2bfe4                 | LR__4581
2bfe4                 | LR__4582
2bfe4     D7 0C 48 FB | 	callpa	#(@LR__4584-@LR__4583)>>2,fcache_load_ptr_
2bfe8                 | ' 	while (--count >= 0)
2bfe8                 | LR__4583
2bfe8     01 96 86 F1 | 	sub	arg03, #1
2bfec     00 96 56 F2 | 	cmps	arg03, #0 wc
2bff0     40 85 02 36 |  if_ae	mov	_var03, _var01
2bff4     01 80 06 31 |  if_ae	add	_var01, #1
2bff8     42 01 48 3C |  if_ae	wrbyte	#0, _var03
2bffc     E8 FF 9F 3D |  if_ae	jmp	#LR__4583
2c000                 | LR__4584
2c000                 | ' 		*dscan++ = '\0';
2c000                 | ' 	return(dst);
2c000     49 7B 02 F6 | 	mov	result1, arg01
2c004                 | _fatfs_cc_strncpy_ret
2c004     2D 00 64 FD | 	ret
2c008                 | 
2c008                 | _fatfs_cc_memcmp
2c008                 | ' 	for (n = size; n > 0; n--)
2c008     00 96 0E F2 | 	cmp	arg03, #0 wz
2c00c     28 00 90 AD |  if_e	jmp	#LR__4591
2c010                 | LR__4590
2c010     49 81 C2 FA | 	rdbyte	_var01, arg01
2c014     4A 83 C2 FA | 	rdbyte	_var02, arg02
2c018     41 81 0A F2 | 	cmp	_var01, _var02 wz
2c01c     01 92 06 A1 |  if_e	add	arg01, #1
2c020     01 94 06 A1 |  if_e	add	arg02, #1
2c024                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2c024     49 7B C2 5A |  if_ne	rdbyte	result1, arg01
2c028     4A 83 C2 5A |  if_ne	rdbyte	_var02, arg02
2c02c     41 7B 82 51 |  if_ne	sub	result1, _var02
2c030     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2c034     F6 97 6E FB | 	djnz	arg03, #LR__4590
2c038                 | LR__4591
2c038                 | ' 
2c038                 | ' 	return(0);
2c038     00 7A 06 F6 | 	mov	result1, #0
2c03c                 | _fatfs_cc_memcmp_ret
2c03c     2D 00 64 FD | 	ret
2c040                 | 
2c040                 | _fatfs_cc_strncmp
2c040     49 81 0A F6 | 	mov	_var01, arg01 wz
2c044     14 00 90 5D |  if_ne	jmp	#LR__4600
2c048                 | ' 		return scan2 ? -1 : 0;
2c048     00 94 0E F2 | 	cmp	arg02, #0 wz
2c04c     01 82 66 56 |  if_ne	neg	_var02, #1
2c050     00 82 06 A6 |  if_e	mov	_var02, #0
2c054     41 7B 02 F6 | 	mov	result1, _var02
2c058     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2c05c                 | LR__4600
2c05c     00 94 0E F2 | 	cmp	arg02, #0 wz
2c060     01 7A 06 A6 |  if_e	mov	result1, #1
2c064     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2c068     4B 85 02 F6 | 	mov	_var03, arg03
2c06c     D7 16 48 FB | 	callpa	#(@LR__4602-@LR__4601)>>2,fcache_load_ptr_
2c070                 | ' 	count = n;
2c070                 | ' 	do {
2c070                 | LR__4601
2c070     40 87 C2 FA | 	rdbyte	_var04, _var01
2c074     4A 89 02 F6 | 	mov	_var05, arg02
2c078     44 8B C2 FA | 	rdbyte	_var06, _var05
2c07c     01 84 86 F1 | 	sub	_var03, #1
2c080     00 84 56 F2 | 	cmps	_var03, #0 wc
2c084     01 80 06 F1 | 	add	_var01, #1
2c088     01 94 06 F1 | 	add	arg02, #1
2c08c     00 86 0E 32 |  if_ae	cmp	_var04, #0 wz
2c090     08 00 90 2D |  if_nc_and_z	jmp	#LR__4603
2c094     45 87 0A 32 |  if_ae	cmp	_var04, _var06 wz
2c098     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4601
2c09c                 | LR__4602
2c09c                 | LR__4603
2c09c     00 84 56 F2 | 	cmps	_var03, #0 wc
2c0a0                 | ' 		return(0);
2c0a0     00 7A 06 C6 |  if_b	mov	result1, #0
2c0a4     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2c0a8     45 87 0A F2 | 	cmp	_var04, _var06 wz
2c0ac                 | ' 		return(0);
2c0ac     00 7A 06 A6 |  if_e	mov	result1, #0
2c0b0     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2c0b4     00 86 0E F2 | 	cmp	_var04, #0 wz
2c0b8                 | ' 		return(-1);
2c0b8     01 7A 66 A6 |  if_e	neg	result1, #1
2c0bc     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2c0c0     00 8A 0E F2 | 	cmp	_var06, #0 wz
2c0c4                 | ' 		return(1);
2c0c4     01 7A 06 A6 |  if_e	mov	result1, #1
2c0c8                 | ' 		return(c1 - c2);
2c0c8     43 7B 02 56 |  if_ne	mov	result1, _var04
2c0cc     45 7B 82 51 |  if_ne	sub	result1, _var06
2c0d0                 | _fatfs_cc_strncmp_ret
2c0d0     2D 00 64 FD | 	ret
2c0d4                 | 
2c0d4                 | _fatfs_cc_strchr
2c0d4                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/libc/string/strchr.c"
2c0d4                 | ' 	while ((c = *s++) != (char) charwanted)
2c0d4                 | LR__4610
2c0d4     49 81 02 F6 | 	mov	_var01, arg01
2c0d8     40 83 C2 FA | 	rdbyte	_var02, _var01
2c0dc     41 85 E2 F8 | 	getbyte	_var03, _var02, #0
2c0e0     4A 87 E2 F8 | 	getbyte	_var04, arg02, #0
2c0e4     43 85 0A F2 | 	cmp	_var03, _var04 wz
2c0e8     01 92 06 F1 | 	add	arg01, #1
2c0ec     14 00 90 AD |  if_e	jmp	#LR__4611
2c0f0     41 85 02 F6 | 	mov	_var03, _var02
2c0f4     07 84 4E F7 | 	zerox	_var03, #7 wz
2c0f8     00 7A 06 A6 |  if_e	mov	result1, #0
2c0fc     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2c100     D0 FF 9F FD | 	jmp	#LR__4610
2c104                 | LR__4611
2c104                 | ' 	return((char *)--s);
2c104     01 92 86 F1 | 	sub	arg01, #1
2c108     49 7B 02 F6 | 	mov	result1, arg01
2c10c                 | _fatfs_cc_strchr_ret
2c10c     2D 00 64 FD | 	ret
2c110                 | 
2c110                 | _fatfs_cc_time
2c110     01 CA 05 F6 | 	mov	COUNT_, #1
2c114     E8 00 A0 FD | 	call	#pushregs_
2c118     14 F0 07 F1 | 	add	ptra, #20
2c11c     49 A7 02 F6 | 	mov	local01, arg01
2c120     E7 92 02 F6 | 	mov	arg01, fp
2c124     08 92 06 F1 | 	add	arg01, #8
2c128     00 94 06 F6 | 	mov	arg02, #0
2c12c     A0 5E B0 FD | 	call	#_fatfs_cc_gettimeofday
2c130     08 CE 05 F1 | 	add	fp, #8
2c134     E7 7A 02 FB | 	rdlong	result1, fp
2c138     08 CE 85 F1 | 	sub	fp, #8
2c13c     00 A6 0E F2 | 	cmp	local01, #0 wz
2c140     53 7B 62 5C |  if_ne	wrlong	result1, local01
2c144                 | '         *tp = now;
2c144                 | '     return now;
2c144     E7 F0 03 F6 | 	mov	ptra, fp
2c148     F2 00 A0 FD | 	call	#popregs_
2c14c                 | _fatfs_cc_time_ret
2c14c     2D 00 64 FD | 	ret
2c150                 | 
2c150                 | _fatfs_cc_mktime
2c150     06 CA 05 F6 | 	mov	COUNT_, #6
2c154     E8 00 A0 FD | 	call	#pushregs_
2c158     49 A7 02 F6 | 	mov	local01, arg01
2c15c     14 A6 06 F1 | 	add	local01, #20
2c160     53 93 02 FB | 	rdlong	arg01, local01
2c164     14 A6 86 F1 | 	sub	local01, #20
2c168     46 92 56 F2 | 	cmps	arg01, #70 wc
2c16c                 | '                 return (time_t) -1;
2c16c     01 7A 66 C6 |  if_b	neg	result1, #1
2c170     78 01 90 CD |  if_b	jmp	#LR__4624
2c174     03 00 00 FF 
2c178     6C A9 06 F6 | 	mov	local02, ##1900
2c17c     14 A6 06 F1 | 	add	local01, #20
2c180     53 7B 02 FB | 	rdlong	result1, local01
2c184     3D A9 02 F1 | 	add	local02, result1
2c188     08 A6 86 F1 | 	sub	local01, #8
2c18c     53 AB 02 FB | 	rdlong	local03, local01
2c190     01 AA 86 F1 | 	sub	local03, #1
2c194     04 A6 06 F1 | 	add	local01, #4
2c198     53 93 02 FB | 	rdlong	arg01, local01
2c19c     10 A6 86 F1 | 	sub	local01, #16
2c1a0     02 92 66 F0 | 	shl	arg01, #2
2c1a4     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2c1a8     02 00 00 FF 
2c1ac     78 7A 06 F1 | 	add	result1, ##1144
2c1b0     3D 93 02 F1 | 	add	arg01, result1
2c1b4     49 7B 02 FB | 	rdlong	result1, arg01
2c1b8     3D AB 02 F1 | 	add	local03, result1
2c1bc     54 93 02 F6 | 	mov	arg01, local02
2c1c0     B4 5E B0 FD | 	call	#_fatfs_cc__is_leap_year
2c1c4     00 7A 0E F2 | 	cmp	result1, #0 wz
2c1c8     1C 00 90 AD |  if_e	jmp	#LR__4620
2c1cc     00 AC 06 F6 | 	mov	local04, #0
2c1d0     10 A6 06 F1 | 	add	local01, #16
2c1d4     53 7B 02 FB | 	rdlong	result1, local01
2c1d8     10 A6 86 F1 | 	sub	local01, #16
2c1dc     02 7A 56 F2 | 	cmps	result1, #2 wc
2c1e0     01 AC 06 36 |  if_ae	mov	local04, #1
2c1e4     04 00 90 FD | 	jmp	#LR__4621
2c1e8                 | LR__4620
2c1e8     00 AC 06 F6 | 	mov	local04, #0
2c1ec                 | LR__4621
2c1ec     04 A6 06 F1 | 	add	local01, #4
2c1f0     53 93 02 FB | 	rdlong	arg01, local01
2c1f4     04 A6 86 F1 | 	sub	local01, #4
2c1f8     53 AF 02 FB | 	rdlong	local05, local01
2c1fc     08 A6 06 F1 | 	add	local01, #8
2c200     53 7B 02 FB | 	rdlong	result1, local01
2c204     07 00 00 FF 
2c208     10 7A 06 FD | 	qmul	result1, ##3600
2c20c     56 AB 02 F1 | 	add	local03, local04
2c210     49 AD 02 F6 | 	mov	local04, arg01
2c214     04 AC 66 F0 | 	shl	local04, #4
2c218     49 AD 82 F1 | 	sub	local04, arg01
2c21c     02 AC 66 F0 | 	shl	local04, #2
2c220     56 AF 02 F1 | 	add	local05, local04
2c224     08 A6 86 F1 | 	sub	local01, #8
2c228     18 AC 62 FD | 	getqx	local04
2c22c     A8 00 00 FF 
2c230     80 AB 06 FD | 	qmul	local03, ##86400
2c234     56 AF 02 F1 | 	add	local05, local04
2c238     54 AB 02 F6 | 	mov	local03, local02
2c23c     03 00 00 FF 
2c240     B2 AB 86 F1 | 	sub	local03, ##1970
2c244     18 AC 62 FD | 	getqx	local04
2c248     99 F0 00 FF 
2c24c     80 AB 06 FD | 	qmul	local03, ##31536000
2c250     56 AF 02 F1 | 	add	local05, local04
2c254     54 AB 02 F6 | 	mov	local03, local02
2c258     03 00 00 FF 
2c25c     B1 AB 86 F1 | 	sub	local03, ##1969
2c260     55 B1 52 F6 | 	abs	local06, local03 wc
2c264     02 B0 46 F0 | 	shr	local06, #2
2c268     58 B1 82 F6 | 	negc	local06, local06
2c26c     03 00 00 FF 
2c270     D1 A9 56 F2 | 	cmps	local02, ##2001 wc
2c274     18 AC 62 FD | 	getqx	local04
2c278     56 AF 02 F1 | 	add	local05, local04
2c27c     18 00 90 CD |  if_b	jmp	#LR__4622
2c280     03 00 00 FF 
2c284     D0 A9 86 F1 | 	sub	local02, ##2000
2c288     54 AD 52 F6 | 	abs	local04, local02 wc
2c28c     64 AC 16 FD | 	qdiv	local04, #100
2c290     18 AC 62 FD | 	getqx	local04
2c294     56 B1 A2 F3 | 	sumnc	local06, local04
2c298                 | LR__4622
2c298     A8 00 00 FF 
2c29c     80 B1 06 FD | 	qmul	local06, ##86400
2c2a0     18 B0 62 FD | 	getqx	local06
2c2a4     58 AF 02 F1 | 	add	local05, local06
2c2a8     E8 01 B0 FD | 	call	#_fatfs_cc__tzset
2c2ac     02 00 00 FF 
2c2b0     44 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1092
2c2b4     36 B1 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2c2b8     58 AF 02 F1 | 	add	local05, local06
2c2bc     68 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, #104
2c2c0     36 AB 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2c2c4     02 00 00 FF 
2c2c8     AC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1196
2c2cc     01 AA 0E F2 | 	cmp	local03, #1 wz
2c2d0     14 00 90 5D |  if_ne	jmp	#LR__4623
2c2d4     53 93 02 F6 | 	mov	arg01, local01
2c2d8     88 60 B0 FD | 	call	#_fatfs_cc___indst
2c2dc     00 7A 0E F2 | 	cmp	result1, #0 wz
2c2e0     07 00 00 5F 
2c2e4     10 AE 86 51 |  if_ne	sub	local05, ##3600
2c2e8                 | LR__4623
2c2e8                 | '                 s -=  (3600L) ;
2c2e8                 | ' 
2c2e8                 | '         return s;
2c2e8     57 7B 02 F6 | 	mov	result1, local05
2c2ec                 | LR__4624
2c2ec     E7 F0 03 F6 | 	mov	ptra, fp
2c2f0     F2 00 A0 FD | 	call	#popregs_
2c2f4                 | _fatfs_cc_mktime_ret
2c2f4     2D 00 64 FD | 	ret
2c2f8                 | 
2c2f8                 | _fatfs_cc__gmtime_r
2c2f8     03 CA 05 F6 | 	mov	COUNT_, #3
2c2fc     E8 00 A0 FD | 	call	#pushregs_
2c300     49 A7 02 FB | 	rdlong	local01, arg01
2c304     A8 00 00 FF 
2c308     80 A7 16 FD | 	qdiv	local01, ##86400
2c30c     18 7A 62 FD | 	getqx	result1
2c310     04 7A 06 F1 | 	add	result1, #4
2c314     07 7A 16 FD | 	qdiv	result1, #7
2c318     18 94 06 F1 | 	add	arg02, #24
2c31c     D1 7F 27 FF 
2c320     00 A6 16 F2 | 	cmp	local01, ##1325376000 wc
2c324     D1 7F 27 3F 
2c328     00 A6 86 31 |  if_ae	sub	local01, ##1325376000
2c32c     03 00 00 3F 
2c330     DC A9 06 36 |  if_ae	mov	local02, ##2012
2c334     03 00 00 CF 
2c338     B2 A9 06 C6 |  if_b	mov	local02, ##1970
2c33c                 | ' 	  year = 1970;
2c33c                 | ' 	}
2c33c                 | ' 
2c33c                 | ' 	for(;;) {
2c33c     19 7A 62 FD | 	getqy	result1
2c340     4A 7B 62 FC | 	wrlong	result1, arg02
2c344     18 94 86 F1 | 	sub	arg02, #24
2c348                 | LR__4630
2c348     54 93 02 F6 | 	mov	arg01, local02
2c34c     28 5D B0 FD | 	call	#_fatfs_cc__is_leap_year
2c350     00 7A 0E F2 | 	cmp	result1, #0 wz
2c354     42 F1 00 5F 
2c358     00 AB 06 56 |  if_ne	mov	local03, ##31622400
2c35c     99 F0 00 AF 
2c360     80 AB 06 A6 |  if_e	mov	local03, ##31536000
2c364     55 A7 12 F2 | 	cmp	local01, local03 wc
2c368                 | ' 	    break;
2c368     01 A8 06 31 |  if_ae	add	local02, #1
2c36c     55 A7 82 31 |  if_ae	sub	local01, local03
2c370     D4 FF 9F 3D |  if_ae	jmp	#LR__4630
2c374     A8 00 00 FF 
2c378     80 A7 16 FD | 	qdiv	local01, ##86400
2c37c     54 AB 02 F6 | 	mov	local03, local02
2c380     03 00 00 FF 
2c384     6C AB 86 F1 | 	sub	local03, ##1900
2c388     14 94 06 F1 | 	add	arg02, #20
2c38c     4A AB 62 FC | 	wrlong	local03, arg02
2c390     08 94 06 F1 | 	add	arg02, #8
2c394     54 93 02 F6 | 	mov	arg01, local02
2c398     18 A8 62 FD | 	getqx	local02
2c39c     4A A9 62 FC | 	wrlong	local02, arg02
2c3a0     1C 94 86 F1 | 	sub	arg02, #28
2c3a4     D0 5C B0 FD | 	call	#_fatfs_cc__is_leap_year
2c3a8     00 7A 0E F2 | 	cmp	result1, #0 wz
2c3ac     1D AA 06 56 |  if_ne	mov	local03, #29
2c3b0     1C AA 06 A6 |  if_e	mov	local03, #28
2c3b4     02 00 00 FF 
2c3b8     4C 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1100
2c3bc     36 AB 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2c3c0     02 00 00 FF 
2c3c4     4C 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1100
2c3c8                 | ' 
2c3c8                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2c3c8                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2c3c8     00 92 06 F6 | 	mov	arg01, #0
2c3cc     D7 26 48 FB | 	callpa	#(@LR__4632-@LR__4631)>>2,fcache_load_ptr_
2c3d0                 | LR__4631
2c3d0     49 AB 02 F6 | 	mov	local03, arg01
2c3d4     02 AA 66 F0 | 	shl	local03, #2
2c3d8     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2c3dc     02 00 00 FF 
2c3e0     48 7A 06 F1 | 	add	result1, ##1096
2c3e4     3D AB 02 F1 | 	add	local03, result1
2c3e8     55 AB 02 FB | 	rdlong	local03, local03
2c3ec     55 A9 52 F2 | 	cmps	local02, local03 wc
2c3f0     28 00 90 CD |  if_b	jmp	#LR__4633
2c3f4     49 7B 02 F6 | 	mov	result1, arg01
2c3f8     02 7A 66 F0 | 	shl	result1, #2
2c3fc     36 AB 02 F6 | 	mov	local03, ptr__fatfs_cc_dat__
2c400     02 00 00 FF 
2c404     48 AA 06 F1 | 	add	local03, ##1096
2c408     55 7B 02 F1 | 	add	result1, local03
2c40c     3D 7B 02 FB | 	rdlong	result1, result1
2c410     3D A9 82 F1 | 	sub	local02, result1
2c414     01 92 06 F1 | 	add	arg01, #1
2c418     B4 FF 9F FD | 	jmp	#LR__4631
2c41c                 | LR__4632
2c41c                 | LR__4633
2c41c     A8 00 00 FF 
2c420     80 A7 16 FD | 	qdiv	local01, ##86400
2c424     10 94 06 F1 | 	add	arg02, #16
2c428     4A 93 62 FC | 	wrlong	arg01, arg02
2c42c     01 A8 06 F1 | 	add	local02, #1
2c430     04 94 86 F1 | 	sub	arg02, #4
2c434     4A A9 62 FC | 	wrlong	local02, arg02
2c438     19 A6 62 FD | 	getqy	local01
2c43c     07 00 00 FF 
2c440     10 A6 16 FD | 	qdiv	local01, ##3600
2c444     18 AA 62 FD | 	getqx	local03
2c448     07 00 00 FF 
2c44c     10 A6 16 FD | 	qdiv	local01, ##3600
2c450     04 94 86 F1 | 	sub	arg02, #4
2c454     4A AB 62 FC | 	wrlong	local03, arg02
2c458     19 A6 62 FD | 	getqy	local01
2c45c     3C A6 16 FD | 	qdiv	local01, #60
2c460     18 AA 62 FD | 	getqx	local03
2c464     3C A6 16 FD | 	qdiv	local01, #60
2c468     04 94 86 F1 | 	sub	arg02, #4
2c46c     4A AB 62 FC | 	wrlong	local03, arg02
2c470     04 94 86 F1 | 	sub	arg02, #4
2c474                 | '         stm->tm_isdst = 0;
2c474                 | ' 
2c474                 | ' ;
2c474                 | '         return stm;
2c474     4A 7B 02 F6 | 	mov	result1, arg02
2c478     19 AA 62 FD | 	getqy	local03
2c47c     4A AB 62 FC | 	wrlong	local03, arg02
2c480     20 94 06 F1 | 	add	arg02, #32
2c484     4A 01 68 FC | 	wrlong	#0, arg02
2c488     E7 F0 03 F6 | 	mov	ptra, fp
2c48c     F2 00 A0 FD | 	call	#popregs_
2c490                 | _fatfs_cc__gmtime_r_ret
2c490     2D 00 64 FD | 	ret
2c494                 | 
2c494                 | _fatfs_cc__tzset
2c494     93 01 00 FF 
2c498     F0 92 06 F6 | 	mov	arg01, ##@LR__5482
2c49c     0C 50 B0 FD | 	call	#_fatfs_cc_getenv
2c4a0     3D 93 02 F6 | 	mov	arg01, result1
2c4a4     36 95 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2c4a8     02 00 00 FF 
2c4ac     AC 94 06 F1 | 	add	arg02, ##1196
2c4b0     14 5C B0 FD | 	call	#_fatfs_cc___tzoffset
2c4b4     02 00 00 FF 
2c4b8     44 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1092
2c4bc     36 7B 62 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2c4c0     02 00 00 FF 
2c4c4     44 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1092
2c4c8                 | _fatfs_cc__tzset_ret
2c4c8     2D 00 64 FD | 	ret
2c4cc                 | 
2c4cc                 | _fatfs_cc_disk_read
2c4cc     09 CA 05 F6 | 	mov	COUNT_, #9
2c4d0     E8 00 A0 FD | 	call	#pushregs_
2c4d4     4A AF 02 F6 | 	mov	local05, arg02
2c4d8     4C B1 02 F6 | 	mov	local06, arg04
2c4dc     4B 93 02 F6 | 	mov	arg01, arg03
2c4e0     00 94 06 F6 | 	mov	arg02, #0
2c4e4     09 96 06 F6 | 	mov	arg03, #9
2c4e8     00 98 06 F6 | 	mov	arg04, #0
2c4ec     94 A8 BF FD | 	call	#__system___int64_shl
2c4f0     3D A7 02 F6 | 	mov	local01, result1
2c4f4     3E A9 02 F6 | 	mov	local02, result2
2c4f8     01 00 00 FF 
2c4fc     10 64 06 F1 | 	add	objptr, ##528
2c500     32 7D 0A FB | 	rdlong	result2, objptr wz
2c504     01 00 00 FF 
2c508     10 64 86 F1 | 	sub	objptr, ##528
2c50c                 | '         return RES_NOTRDY;
2c50c     03 7A 06 A6 |  if_e	mov	result1, #3
2c510     E8 00 90 AD |  if_e	jmp	#LR__4640
2c514     53 95 02 F6 | 	mov	arg02, local01
2c518     54 97 02 F6 | 	mov	arg03, local02
2c51c     01 00 00 FF 
2c520     10 64 06 F1 | 	add	objptr, ##528
2c524     32 93 02 FB | 	rdlong	arg01, objptr
2c528     49 99 02 F6 | 	mov	arg04, arg01
2c52c     30 98 06 F1 | 	add	arg04, #48
2c530     4C B3 02 FB | 	rdlong	local07, arg04
2c534     59 B5 02 F6 | 	mov	local08, local07
2c538     13 B2 46 F7 | 	zerox	local07, #19
2c53c     14 B4 46 F0 | 	shr	local08, #20
2c540     02 B4 66 F0 | 	shl	local08, #2
2c544     2D B5 02 F1 | 	add	local08, __methods__
2c548     5A B5 02 FB | 	rdlong	local08, local08
2c54c     01 00 00 FF 
2c550     10 64 86 F1 | 	sub	objptr, ##528
2c554     00 98 06 F6 | 	mov	arg04, #0
2c558     32 B7 02 F6 | 	mov	local09, objptr
2c55c     59 65 02 F6 | 	mov	objptr, local07
2c560     2D B4 62 FD | 	call	local08
2c564     5B 65 02 F6 | 	mov	objptr, local09
2c568     3D AB 02 F6 | 	mov	local03, result1
2c56c     3E AD 02 F6 | 	mov	local04, result2
2c570     55 93 02 F6 | 	mov	arg01, local03
2c574     56 95 02 F6 | 	mov	arg02, local04
2c578     53 97 02 F6 | 	mov	arg03, local01
2c57c     54 99 02 F6 | 	mov	arg04, local02
2c580     00 7A 06 F6 | 	mov	result1, #0
2c584     4B 93 1A F2 | 	cmp	arg01, arg03 wcz
2c588     4C 95 7A F2 | 	cmpsx	arg02, arg04 wcz
2c58c     01 7A 86 56 |  if_ne	negc	result1, #1
2c590     00 7A 0E F2 | 	cmp	result1, #0 wz
2c594                 | '         return RES_ERROR;
2c594     01 7A 06 56 |  if_ne	mov	result1, #1
2c598     60 00 90 5D |  if_ne	jmp	#LR__4640
2c59c     09 B0 66 F0 | 	shl	local06, #9
2c5a0     01 00 00 FF 
2c5a4     10 64 06 F1 | 	add	objptr, ##528
2c5a8     32 93 02 FB | 	rdlong	arg01, objptr
2c5ac     49 AB 02 F6 | 	mov	local03, arg01
2c5b0     14 AA 06 F1 | 	add	local03, #20
2c5b4     55 AB 02 FB | 	rdlong	local03, local03
2c5b8     55 B7 02 F6 | 	mov	local09, local03
2c5bc     13 B6 46 F7 | 	zerox	local09, #19
2c5c0     14 AA 46 F0 | 	shr	local03, #20
2c5c4     02 AA 66 F0 | 	shl	local03, #2
2c5c8     2D AB 02 F1 | 	add	local03, __methods__
2c5cc     55 AB 02 FB | 	rdlong	local03, local03
2c5d0     01 00 00 FF 
2c5d4     10 64 86 F1 | 	sub	objptr, ##528
2c5d8     57 95 02 F6 | 	mov	arg02, local05
2c5dc     58 97 02 F6 | 	mov	arg03, local06
2c5e0     32 B5 02 F6 | 	mov	local08, objptr
2c5e4     5B 65 02 F6 | 	mov	objptr, local09
2c5e8     2D AA 62 FD | 	call	local03
2c5ec     5A 65 02 F6 | 	mov	objptr, local08
2c5f0     58 7B 0A F2 | 	cmp	result1, local06 wz
2c5f4                 | '         return RES_ERROR;
2c5f4     01 7A 06 56 |  if_ne	mov	result1, #1
2c5f8                 | '     }
2c5f8                 | '     return RES_OK;
2c5f8     00 7A 06 A6 |  if_e	mov	result1, #0
2c5fc                 | LR__4640
2c5fc     E7 F0 03 F6 | 	mov	ptra, fp
2c600     F2 00 A0 FD | 	call	#popregs_
2c604                 | _fatfs_cc_disk_read_ret
2c604     2D 00 64 FD | 	ret
2c608                 | 
2c608                 | _fatfs_cc_disk_write
2c608     09 CA 05 F6 | 	mov	COUNT_, #9
2c60c     E8 00 A0 FD | 	call	#pushregs_
2c610     4A AF 02 F6 | 	mov	local05, arg02
2c614     4C B1 02 F6 | 	mov	local06, arg04
2c618     4B 93 02 F6 | 	mov	arg01, arg03
2c61c     00 94 06 F6 | 	mov	arg02, #0
2c620     09 96 06 F6 | 	mov	arg03, #9
2c624     00 98 06 F6 | 	mov	arg04, #0
2c628     58 A7 BF FD | 	call	#__system___int64_shl
2c62c     3D A7 02 F6 | 	mov	local01, result1
2c630     3E A9 02 F6 | 	mov	local02, result2
2c634     01 00 00 FF 
2c638     10 64 06 F1 | 	add	objptr, ##528
2c63c     32 7D 0A FB | 	rdlong	result2, objptr wz
2c640     01 00 00 FF 
2c644     10 64 86 F1 | 	sub	objptr, ##528
2c648                 | '         return RES_NOTRDY;
2c648     03 7A 06 A6 |  if_e	mov	result1, #3
2c64c     E8 00 90 AD |  if_e	jmp	#LR__4650
2c650     53 95 02 F6 | 	mov	arg02, local01
2c654     54 97 02 F6 | 	mov	arg03, local02
2c658     01 00 00 FF 
2c65c     10 64 06 F1 | 	add	objptr, ##528
2c660     32 93 02 FB | 	rdlong	arg01, objptr
2c664     49 99 02 F6 | 	mov	arg04, arg01
2c668     30 98 06 F1 | 	add	arg04, #48
2c66c     4C B3 02 FB | 	rdlong	local07, arg04
2c670     59 B5 02 F6 | 	mov	local08, local07
2c674     13 B2 46 F7 | 	zerox	local07, #19
2c678     14 B4 46 F0 | 	shr	local08, #20
2c67c     02 B4 66 F0 | 	shl	local08, #2
2c680     2D B5 02 F1 | 	add	local08, __methods__
2c684     5A B5 02 FB | 	rdlong	local08, local08
2c688     01 00 00 FF 
2c68c     10 64 86 F1 | 	sub	objptr, ##528
2c690     00 98 06 F6 | 	mov	arg04, #0
2c694     32 B7 02 F6 | 	mov	local09, objptr
2c698     59 65 02 F6 | 	mov	objptr, local07
2c69c     2D B4 62 FD | 	call	local08
2c6a0     5B 65 02 F6 | 	mov	objptr, local09
2c6a4     3D AB 02 F6 | 	mov	local03, result1
2c6a8     3E AD 02 F6 | 	mov	local04, result2
2c6ac     55 93 02 F6 | 	mov	arg01, local03
2c6b0     56 95 02 F6 | 	mov	arg02, local04
2c6b4     53 97 02 F6 | 	mov	arg03, local01
2c6b8     54 99 02 F6 | 	mov	arg04, local02
2c6bc     00 7A 06 F6 | 	mov	result1, #0
2c6c0     4B 93 1A F2 | 	cmp	arg01, arg03 wcz
2c6c4     4C 95 7A F2 | 	cmpsx	arg02, arg04 wcz
2c6c8     01 7A 86 56 |  if_ne	negc	result1, #1
2c6cc     00 7A 0E F2 | 	cmp	result1, #0 wz
2c6d0                 | '         return RES_ERROR;
2c6d0     01 7A 06 56 |  if_ne	mov	result1, #1
2c6d4     60 00 90 5D |  if_ne	jmp	#LR__4650
2c6d8     09 B0 66 F0 | 	shl	local06, #9
2c6dc     01 00 00 FF 
2c6e0     10 64 06 F1 | 	add	objptr, ##528
2c6e4     32 93 02 FB | 	rdlong	arg01, objptr
2c6e8     49 AB 02 F6 | 	mov	local03, arg01
2c6ec     18 AA 06 F1 | 	add	local03, #24
2c6f0     55 AB 02 FB | 	rdlong	local03, local03
2c6f4     55 B7 02 F6 | 	mov	local09, local03
2c6f8     13 B6 46 F7 | 	zerox	local09, #19
2c6fc     14 AA 46 F0 | 	shr	local03, #20
2c700     02 AA 66 F0 | 	shl	local03, #2
2c704     2D AB 02 F1 | 	add	local03, __methods__
2c708     55 AB 02 FB | 	rdlong	local03, local03
2c70c     01 00 00 FF 
2c710     10 64 86 F1 | 	sub	objptr, ##528
2c714     57 95 02 F6 | 	mov	arg02, local05
2c718     58 97 02 F6 | 	mov	arg03, local06
2c71c     32 B5 02 F6 | 	mov	local08, objptr
2c720     5B 65 02 F6 | 	mov	objptr, local09
2c724     2D AA 62 FD | 	call	local03
2c728     5A 65 02 F6 | 	mov	objptr, local08
2c72c     58 7B 0A F2 | 	cmp	result1, local06 wz
2c730                 | '         return RES_ERROR;
2c730     01 7A 06 56 |  if_ne	mov	result1, #1
2c734                 | '     }
2c734                 | '     return RES_OK;
2c734     00 7A 06 A6 |  if_e	mov	result1, #0
2c738                 | LR__4650
2c738     E7 F0 03 F6 | 	mov	ptra, fp
2c73c     F2 00 A0 FD | 	call	#popregs_
2c740                 | _fatfs_cc_disk_write_ret
2c740     2D 00 64 FD | 	ret
2c744                 | 
2c744                 | _fatfs_cc_disk_ioctl
2c744     03 CA 05 F6 | 	mov	COUNT_, #3
2c748     E8 00 A0 FD | 	call	#pushregs_
2c74c     01 00 00 FF 
2c750     10 64 06 F1 | 	add	objptr, ##528
2c754     32 93 0A FB | 	rdlong	arg01, objptr wz
2c758     01 00 00 FF 
2c75c     10 64 86 F1 | 	sub	objptr, ##528
2c760                 | '         return RES_NOTRDY;
2c760     03 7A 06 A6 |  if_e	mov	result1, #3
2c764     58 00 90 AD |  if_e	jmp	#LR__4660
2c768     01 00 00 FF 
2c76c     10 64 06 F1 | 	add	objptr, ##528
2c770     32 93 02 FB | 	rdlong	arg01, objptr
2c774     49 A7 02 F6 | 	mov	local01, arg01
2c778     28 A6 06 F1 | 	add	local01, #40
2c77c     53 A7 02 FB | 	rdlong	local01, local01
2c780     53 A9 02 F6 | 	mov	local02, local01
2c784     13 A8 46 F7 | 	zerox	local02, #19
2c788     14 A6 46 F0 | 	shr	local01, #20
2c78c     02 A6 66 F0 | 	shl	local01, #2
2c790     2D A7 02 F1 | 	add	local01, __methods__
2c794     53 A7 02 FB | 	rdlong	local01, local01
2c798     01 00 00 FF 
2c79c     10 64 86 F1 | 	sub	objptr, ##528
2c7a0     4A 95 E2 F8 | 	getbyte	arg02, arg02, #0
2c7a4     32 AB 02 F6 | 	mov	local03, objptr
2c7a8     54 65 02 F6 | 	mov	objptr, local02
2c7ac     2D A6 62 FD | 	call	local01
2c7b0     55 65 02 F6 | 	mov	objptr, local03
2c7b4     00 7A 0E F2 | 	cmp	result1, #0 wz
2c7b8                 | '         return RES_ERROR;
2c7b8     01 7A 06 56 |  if_ne	mov	result1, #1
2c7bc                 | '     return RES_OK;
2c7bc     00 7A 06 A6 |  if_e	mov	result1, #0
2c7c0                 | LR__4660
2c7c0     E7 F0 03 F6 | 	mov	ptra, fp
2c7c4     F2 00 A0 FD | 	call	#popregs_
2c7c8                 | _fatfs_cc_disk_ioctl_ret
2c7c8     2D 00 64 FD | 	ret
2c7cc                 | 
2c7cc                 | _fatfs_cc_tchar2uni
2c7cc     49 81 02 FB | 	rdlong	_var01, arg01
2c7d0     40 83 02 F6 | 	mov	_var02, _var01
2c7d4     01 80 06 F1 | 	add	_var01, #1
2c7d8     40 85 02 F6 | 	mov	_var03, _var01
2c7dc     41 87 C2 FA | 	rdbyte	_var04, _var02
2c7e0     80 86 CE F7 | 	test	_var04, #128 wz
2c7e4     E8 00 90 AD |  if_e	jmp	#LR__4677
2c7e8     43 89 02 F6 | 	mov	_var05, _var04
2c7ec     E0 88 06 F5 | 	and	_var05, #224
2c7f0     C0 88 0E F2 | 	cmp	_var05, #192 wz
2c7f4     1F 86 06 A5 |  if_e	and	_var04, #31
2c7f8     01 8A 06 A6 |  if_e	mov	_var06, #1
2c7fc     34 00 90 AD |  if_e	jmp	#LR__4671
2c800     43 89 02 F6 | 	mov	_var05, _var04
2c804     F0 88 06 F5 | 	and	_var05, #240
2c808     E0 88 0E F2 | 	cmp	_var05, #224 wz
2c80c     43 87 42 A8 |  if_e	getnib	_var04, _var04, #0
2c810     02 8A 06 A6 |  if_e	mov	_var06, #2
2c814     1C 00 90 AD |  if_e	jmp	#LR__4670
2c818     43 89 02 F6 | 	mov	_var05, _var04
2c81c     F8 88 06 F5 | 	and	_var05, #248
2c820     F0 88 0E F2 | 	cmp	_var05, #240 wz
2c824     07 86 06 A5 |  if_e	and	_var04, #7
2c828     03 8A 06 A6 |  if_e	mov	_var06, #3
2c82c                 | ' 			return 0xFFFFFFFF;
2c82c     01 7A 66 56 |  if_ne	neg	result1, #1
2c830     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2c834                 | LR__4670
2c834                 | LR__4671
2c834                 | ' 		}
2c834                 | ' 		do {
2c834                 | LR__4672
2c834     42 8D C2 FA | 	rdbyte	_var07, _var03
2c838     46 89 E2 F8 | 	getbyte	_var05, _var07, #0
2c83c     C0 88 06 F5 | 	and	_var05, #192
2c840     80 88 0E F2 | 	cmp	_var05, #128 wz
2c844     01 84 06 F1 | 	add	_var03, #1
2c848     01 7A 66 56 |  if_ne	neg	result1, #1
2c84c     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2c850     06 86 66 F0 | 	shl	_var04, #6
2c854     46 83 E2 F8 | 	getbyte	_var02, _var07, #0
2c858     3F 82 06 F5 | 	and	_var02, #63
2c85c     41 87 42 F5 | 	or	_var04, _var02
2c860     F4 8B 6E FB | 	djnz	_var06, #LR__4672
2c864     80 86 16 F2 | 	cmp	_var04, #128 wc
2c868     24 00 90 CD |  if_b	jmp	#LR__4674
2c86c     6C 00 00 FF 
2c870     00 86 16 F2 | 	cmp	_var04, ##55296 wc
2c874     0C 00 90 CD |  if_b	jmp	#LR__4673
2c878     70 00 00 FF 
2c87c     00 86 16 F2 | 	cmp	_var04, ##57344 wc
2c880     0C 00 90 CD |  if_b	jmp	#LR__4674
2c884                 | LR__4673
2c884     80 08 00 FF 
2c888     00 86 16 F2 | 	cmp	_var04, ##1114112 wc
2c88c     08 00 90 CD |  if_b	jmp	#LR__4675
2c890                 | LR__4674
2c890     01 7A 66 F6 | 	neg	result1, #1
2c894     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2c898                 | LR__4675
2c898     80 00 00 FF 
2c89c     00 86 16 F2 | 	cmp	_var04, ##65536 wc
2c8a0     2C 00 90 CD |  if_b	jmp	#LR__4676
2c8a4     43 83 02 F6 | 	mov	_var02, _var04
2c8a8     80 00 00 FF 
2c8ac     00 82 86 F1 | 	sub	_var02, ##65536
2c8b0     06 82 66 F0 | 	shl	_var02, #6
2c8b4     80 FF 01 FF 
2c8b8     00 82 06 F5 | 	and	_var02, ##67043328
2c8bc     6E 00 6C FF 
2c8c0     00 88 06 F6 | 	mov	_var05, ##-671032320
2c8c4     41 89 42 F5 | 	or	_var05, _var02
2c8c8     09 86 46 F7 | 	zerox	_var04, #9
2c8cc     44 87 42 F5 | 	or	_var04, _var05
2c8d0                 | LR__4676
2c8d0                 | LR__4677
2c8d0     49 85 62 FC | 	wrlong	_var03, arg01
2c8d4                 | ' 	}
2c8d4                 | ' #line 811 "ff.c"
2c8d4                 | ' 	*str = p;
2c8d4                 | ' 	return uc;
2c8d4     43 7B 02 F6 | 	mov	result1, _var04
2c8d8                 | _fatfs_cc_tchar2uni_ret
2c8d8     2D 00 64 FD | 	ret
2c8dc                 | 
2c8dc                 | _fatfs_cc_put_utf
2c8dc     80 92 16 F2 | 	cmp	arg01, #128 wc
2c8e0     18 00 90 3D |  if_ae	jmp	#LR__4680
2c8e4     01 96 16 F2 | 	cmp	arg03, #1 wc
2c8e8     00 7A 06 C6 |  if_b	mov	result1, #0
2c8ec     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c8f0     4A 93 42 FC | 	wrbyte	arg01, arg02
2c8f4                 | ' 		*buf = (TCHAR)chr;
2c8f4                 | ' 		return 1;
2c8f4     01 7A 06 F6 | 	mov	result1, #1
2c8f8     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c8fc                 | LR__4680
2c8fc     04 00 00 FF 
2c900     00 92 16 F2 | 	cmp	arg01, ##2048 wc
2c904     40 00 90 3D |  if_ae	jmp	#LR__4681
2c908     02 96 16 F2 | 	cmp	arg03, #2 wc
2c90c     00 7A 06 C6 |  if_b	mov	result1, #0
2c910     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c914     49 7B 02 F6 | 	mov	result1, arg01
2c918     06 7A 46 F0 | 	shr	result1, #6
2c91c     1F 7A 06 F5 | 	and	result1, #31
2c920     C0 96 06 F6 | 	mov	arg03, #192
2c924     3D 97 42 F5 | 	or	arg03, result1
2c928     4A 97 42 FC | 	wrbyte	arg03, arg02
2c92c     01 94 06 F1 | 	add	arg02, #1
2c930     3F 92 06 F5 | 	and	arg01, #63
2c934     80 7A 06 F6 | 	mov	result1, #128
2c938     49 7B 42 F5 | 	or	result1, arg01
2c93c     4A 7B 42 FC | 	wrbyte	result1, arg02
2c940                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2c940                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c940                 | ' 		return 2;
2c940     02 7A 06 F6 | 	mov	result1, #2
2c944     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c948                 | LR__4681
2c948     80 00 00 FF 
2c94c     00 92 16 F2 | 	cmp	arg01, ##65536 wc
2c950     70 00 90 3D |  if_ae	jmp	#LR__4684
2c954     03 96 16 F2 | 	cmp	arg03, #3 wc
2c958     18 00 90 CD |  if_b	jmp	#LR__4682
2c95c     6C 00 00 FF 
2c960     00 92 16 F2 | 	cmp	arg01, ##55296 wc
2c964     14 00 90 CD |  if_b	jmp	#LR__4683
2c968     70 00 00 FF 
2c96c     00 92 16 F2 | 	cmp	arg01, ##57344 wc
2c970     08 00 90 3D |  if_ae	jmp	#LR__4683
2c974                 | LR__4682
2c974     00 7A 06 F6 | 	mov	result1, #0
2c978     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c97c                 | LR__4683
2c97c     49 7B 5A F8 | 	getnib	result1, arg01, #3
2c980     E0 96 06 F6 | 	mov	arg03, #224
2c984     3D 97 42 F5 | 	or	arg03, result1
2c988     4A 97 42 FC | 	wrbyte	arg03, arg02
2c98c     01 94 06 F1 | 	add	arg02, #1
2c990     49 7B 02 F6 | 	mov	result1, arg01
2c994     06 7A 46 F0 | 	shr	result1, #6
2c998     3F 7A 06 F5 | 	and	result1, #63
2c99c     80 96 06 F6 | 	mov	arg03, #128
2c9a0     3D 97 42 F5 | 	or	arg03, result1
2c9a4     4A 97 42 FC | 	wrbyte	arg03, arg02
2c9a8     01 94 06 F1 | 	add	arg02, #1
2c9ac     3F 92 06 F5 | 	and	arg01, #63
2c9b0     80 7A 06 F6 | 	mov	result1, #128
2c9b4     49 7B 42 F5 | 	or	result1, arg01
2c9b8     4A 7B 42 FC | 	wrbyte	result1, arg02
2c9bc                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2c9bc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2c9bc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c9bc                 | ' 		return 3;
2c9bc     03 7A 06 F6 | 	mov	result1, #3
2c9c0     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c9c4                 | LR__4684
2c9c4     04 96 16 F2 | 	cmp	arg03, #4 wc
2c9c8     00 7A 06 C6 |  if_b	mov	result1, #0
2c9cc     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c9d0     49 81 02 F6 | 	mov	_var01, arg01
2c9d4     E0 81 06 F4 | 	bitl	_var01, #480
2c9d8     00 00 6C FF 
2c9dc     00 80 86 F1 | 	sub	_var01, ##-671088640
2c9e0     06 80 46 F0 | 	shr	_var01, #6
2c9e4     49 93 32 F9 | 	getword	arg01, arg01, #0
2c9e8     6E 00 00 FF 
2c9ec     00 92 86 F1 | 	sub	arg01, ##56320
2c9f0     00 08 00 FF 
2c9f4     00 80 16 F2 | 	cmp	_var01, ##1048576 wc
2c9f8     02 00 00 CF 
2c9fc     00 92 16 C2 |  if_b	cmp	arg01, ##1024 wc
2ca00     00 7A 06 36 |  if_ae	mov	result1, #0
2ca04     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2ca08     49 81 42 F5 | 	or	_var01, arg01
2ca0c     80 00 00 FF 
2ca10     00 80 06 F1 | 	add	_var01, ##65536
2ca14     40 7B 02 F6 | 	mov	result1, _var01
2ca18     12 7A 46 F0 | 	shr	result1, #18
2ca1c     07 7A 06 F5 | 	and	result1, #7
2ca20     F0 96 06 F6 | 	mov	arg03, #240
2ca24     3D 97 42 F5 | 	or	arg03, result1
2ca28     4A 97 42 FC | 	wrbyte	arg03, arg02
2ca2c     01 94 06 F1 | 	add	arg02, #1
2ca30     40 7B 02 F6 | 	mov	result1, _var01
2ca34     0C 7A 46 F0 | 	shr	result1, #12
2ca38     3F 7A 06 F5 | 	and	result1, #63
2ca3c     80 96 06 F6 | 	mov	arg03, #128
2ca40     3D 97 42 F5 | 	or	arg03, result1
2ca44     4A 97 42 FC | 	wrbyte	arg03, arg02
2ca48     01 94 06 F1 | 	add	arg02, #1
2ca4c     40 7B 02 F6 | 	mov	result1, _var01
2ca50     06 7A 46 F0 | 	shr	result1, #6
2ca54     3F 7A 06 F5 | 	and	result1, #63
2ca58     80 96 06 F6 | 	mov	arg03, #128
2ca5c     3D 97 42 F5 | 	or	arg03, result1
2ca60     4A 97 42 FC | 	wrbyte	arg03, arg02
2ca64     01 94 06 F1 | 	add	arg02, #1
2ca68     3F 80 06 F5 | 	and	_var01, #63
2ca6c     80 7A 06 F6 | 	mov	result1, #128
2ca70     40 7B 42 F5 | 	or	result1, _var01
2ca74     4A 7B 42 FC | 	wrbyte	result1, arg02
2ca78                 | ' 	chr = (hc | chr) + 0x10000;
2ca78                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2ca78                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2ca78                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2ca78                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2ca78                 | ' 	return 4;
2ca78     04 7A 06 F6 | 	mov	result1, #4
2ca7c                 | _fatfs_cc_put_utf_ret
2ca7c     2D 00 64 FD | 	ret
2ca80                 | 
2ca80                 | _fatfs_cc_sync_window
2ca80     02 CA 05 F6 | 	mov	COUNT_, #2
2ca84     E8 00 A0 FD | 	call	#pushregs_
2ca88     49 A7 02 F6 | 	mov	local01, arg01
2ca8c     00 A8 06 F6 | 	mov	local02, #0
2ca90     03 A6 06 F1 | 	add	local01, #3
2ca94     53 7B CA FA | 	rdbyte	result1, local01 wz
2ca98     03 A6 86 F1 | 	sub	local01, #3
2ca9c     A4 00 90 AD |  if_e	jmp	#LR__4692
2caa0     01 A6 06 F1 | 	add	local01, #1
2caa4     53 93 C2 FA | 	rdbyte	arg01, local01
2caa8     33 A6 06 F1 | 	add	local01, #51
2caac     53 95 02 F6 | 	mov	arg02, local01
2cab0     04 A6 86 F1 | 	sub	local01, #4
2cab4     53 97 02 FB | 	rdlong	arg03, local01
2cab8     30 A6 86 F1 | 	sub	local01, #48
2cabc     01 98 06 F6 | 	mov	arg04, #1
2cac0     44 FB BF FD | 	call	#_fatfs_cc_disk_write
2cac4     00 7A 0E F2 | 	cmp	result1, #0 wz
2cac8     74 00 90 5D |  if_ne	jmp	#LR__4690
2cacc     03 A6 06 F1 | 	add	local01, #3
2cad0     53 01 48 FC | 	wrbyte	#0, local01
2cad4     2D A6 06 F1 | 	add	local01, #45
2cad8     53 7B 02 FB | 	rdlong	result1, local01
2cadc     0C A6 86 F1 | 	sub	local01, #12
2cae0     53 99 02 FB | 	rdlong	arg04, local01
2cae4     4C 7B 82 F1 | 	sub	result1, arg04
2cae8     08 A6 86 F1 | 	sub	local01, #8
2caec     53 99 02 FB | 	rdlong	arg04, local01
2caf0     1C A6 86 F1 | 	sub	local01, #28
2caf4     4C 7B 12 F2 | 	cmp	result1, arg04 wc
2caf8     48 00 90 3D |  if_ae	jmp	#LR__4691
2cafc     02 A6 06 F1 | 	add	local01, #2
2cb00     53 99 C2 FA | 	rdbyte	arg04, local01
2cb04     02 A6 86 F1 | 	sub	local01, #2
2cb08     02 98 0E F2 | 	cmp	arg04, #2 wz
2cb0c     34 00 90 5D |  if_ne	jmp	#LR__4691
2cb10     01 A6 06 F1 | 	add	local01, #1
2cb14     53 93 C2 FA | 	rdbyte	arg01, local01
2cb18     33 A6 06 F1 | 	add	local01, #51
2cb1c     53 95 02 F6 | 	mov	arg02, local01
2cb20     04 A6 86 F1 | 	sub	local01, #4
2cb24     53 97 02 FB | 	rdlong	arg03, local01
2cb28     14 A6 86 F1 | 	sub	local01, #20
2cb2c     53 A7 02 FB | 	rdlong	local01, local01
2cb30     53 97 02 F1 | 	add	arg03, local01
2cb34     01 98 06 F6 | 	mov	arg04, #1
2cb38     CC FA BF FD | 	call	#_fatfs_cc_disk_write
2cb3c     04 00 90 FD | 	jmp	#LR__4691
2cb40                 | LR__4690
2cb40     01 A8 06 F6 | 	mov	local02, #1
2cb44                 | LR__4691
2cb44                 | LR__4692
2cb44                 | ' 			res = FR_DISK_ERR;
2cb44                 | ' 		}
2cb44                 | ' 	}
2cb44                 | ' 	return res;
2cb44     54 7B 02 F6 | 	mov	result1, local02
2cb48     E7 F0 03 F6 | 	mov	ptra, fp
2cb4c     F2 00 A0 FD | 	call	#popregs_
2cb50                 | _fatfs_cc_sync_window_ret
2cb50     2D 00 64 FD | 	ret
2cb54                 | 
2cb54                 | _fatfs_cc_move_window
2cb54     03 CA 05 F6 | 	mov	COUNT_, #3
2cb58     E8 00 A0 FD | 	call	#pushregs_
2cb5c     49 A7 02 F6 | 	mov	local01, arg01
2cb60     4A A9 02 F6 | 	mov	local02, arg02
2cb64     00 AA 06 F6 | 	mov	local03, #0
2cb68     30 A6 06 F1 | 	add	local01, #48
2cb6c     53 99 02 FB | 	rdlong	arg04, local01
2cb70     30 A6 86 F1 | 	sub	local01, #48
2cb74     4C A9 0A F2 | 	cmp	local02, arg04 wz
2cb78     40 00 90 AD |  if_e	jmp	#LR__4701
2cb7c     53 93 02 F6 | 	mov	arg01, local01
2cb80     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2cb84     3D AB 0A F6 | 	mov	local03, result1 wz
2cb88     30 00 90 5D |  if_ne	jmp	#LR__4700
2cb8c     01 A6 06 F1 | 	add	local01, #1
2cb90     53 93 C2 FA | 	rdbyte	arg01, local01
2cb94     33 A6 06 F1 | 	add	local01, #51
2cb98     53 95 02 F6 | 	mov	arg02, local01
2cb9c     54 97 02 F6 | 	mov	arg03, local02
2cba0     01 98 06 F6 | 	mov	arg04, #1
2cba4     24 F9 BF FD | 	call	#_fatfs_cc_disk_read
2cba8     00 7A 0E F2 | 	cmp	result1, #0 wz
2cbac     01 A8 66 56 |  if_ne	neg	local02, #1
2cbb0     01 AA 06 56 |  if_ne	mov	local03, #1
2cbb4     04 A6 86 F1 | 	sub	local01, #4
2cbb8     53 A9 62 FC | 	wrlong	local02, local01
2cbbc                 | LR__4700
2cbbc                 | LR__4701
2cbbc                 | ' 				sect = (LBA_t)0 - 1;
2cbbc                 | ' 				res = FR_DISK_ERR;
2cbbc                 | ' 			}
2cbbc                 | ' 			fs->winsect = sect;
2cbbc                 | ' 		}
2cbbc                 | ' 	}
2cbbc                 | ' 	return res;
2cbbc     55 7B 02 F6 | 	mov	result1, local03
2cbc0     E7 F0 03 F6 | 	mov	ptra, fp
2cbc4     F2 00 A0 FD | 	call	#popregs_
2cbc8                 | _fatfs_cc_move_window_ret
2cbc8     2D 00 64 FD | 	ret
2cbcc                 | 
2cbcc                 | _fatfs_cc_sync_fs
2cbcc     02 CA 05 F6 | 	mov	COUNT_, #2
2cbd0     E8 00 A0 FD | 	call	#pushregs_
2cbd4     49 A7 02 F6 | 	mov	local01, arg01
2cbd8     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2cbdc     3D A9 0A F6 | 	mov	local02, result1 wz
2cbe0     D8 00 90 5D |  if_ne	jmp	#LR__4711
2cbe4     53 99 C2 FA | 	rdbyte	arg04, local01
2cbe8     03 98 0E F2 | 	cmp	arg04, #3 wz
2cbec     04 A6 06 A1 |  if_e	add	local01, #4
2cbf0     53 99 C2 AA |  if_e	rdbyte	arg04, local01
2cbf4     04 A6 86 A1 |  if_e	sub	local01, #4
2cbf8     01 98 0E A2 |  if_e	cmp	arg04, #1 wz
2cbfc     A0 00 90 5D |  if_ne	jmp	#LR__4710
2cc00     34 A6 06 F1 | 	add	local01, #52
2cc04     53 93 02 F6 | 	mov	arg01, local01
2cc08     00 94 06 F6 | 	mov	arg02, #0
2cc0c     09 96 C6 F9 | 	decod	arg03, #9
2cc10     D8 00 A0 FD | 	call	#\builtin_bytefill_
2cc14     53 93 02 F6 | 	mov	arg01, local01
2cc18     FE 93 06 F1 | 	add	arg01, #510
2cc1c     55 00 80 FF 
2cc20     49 AB 58 FC | 	wrword	##43605, arg01
2cc24     A9 B0 A0 FF 
2cc28     53 A5 68 FC | 	wrlong	##1096897106, local01
2cc2c     53 93 02 F6 | 	mov	arg01, local01
2cc30     E4 93 06 F1 | 	add	arg01, #484
2cc34     B9 A0 B0 FF 
2cc38     49 E5 68 FC | 	wrlong	##1631679090, arg01
2cc3c     53 93 02 F6 | 	mov	arg01, local01
2cc40     E8 93 06 F1 | 	add	arg01, #488
2cc44     20 A6 86 F1 | 	sub	local01, #32
2cc48     53 95 02 FB | 	rdlong	arg02, local01
2cc4c     49 95 62 FC | 	wrlong	arg02, arg01
2cc50     20 A6 06 F1 | 	add	local01, #32
2cc54     53 93 02 F6 | 	mov	arg01, local01
2cc58     EC 93 06 F1 | 	add	arg01, #492
2cc5c     24 A6 86 F1 | 	sub	local01, #36
2cc60     53 95 02 FB | 	rdlong	arg02, local01
2cc64     49 95 62 FC | 	wrlong	arg02, arg01
2cc68     10 A6 06 F1 | 	add	local01, #16
2cc6c     53 97 02 FB | 	rdlong	arg03, local01
2cc70     01 96 06 F1 | 	add	arg03, #1
2cc74     10 A6 06 F1 | 	add	local01, #16
2cc78     53 97 62 FC | 	wrlong	arg03, local01
2cc7c     2F A6 86 F1 | 	sub	local01, #47
2cc80     53 93 C2 FA | 	rdbyte	arg01, local01
2cc84     33 A6 06 F1 | 	add	local01, #51
2cc88     53 95 02 F6 | 	mov	arg02, local01
2cc8c     01 98 06 F6 | 	mov	arg04, #1
2cc90     74 F9 BF FD | 	call	#_fatfs_cc_disk_write
2cc94     30 A6 86 F1 | 	sub	local01, #48
2cc98     53 01 48 FC | 	wrbyte	#0, local01
2cc9c     04 A6 86 F1 | 	sub	local01, #4
2cca0                 | LR__4710
2cca0     01 A6 06 F1 | 	add	local01, #1
2cca4     53 93 C2 FA | 	rdbyte	arg01, local01
2cca8     00 94 06 F6 | 	mov	arg02, #0
2ccac     00 96 06 F6 | 	mov	arg03, #0
2ccb0     90 FA BF FD | 	call	#_fatfs_cc_disk_ioctl
2ccb4     00 7A 0E F2 | 	cmp	result1, #0 wz
2ccb8     01 A8 06 56 |  if_ne	mov	local02, #1
2ccbc                 | LR__4711
2ccbc                 | ' 	}
2ccbc                 | ' 
2ccbc                 | ' 	return res;
2ccbc     54 7B 02 F6 | 	mov	result1, local02
2ccc0     E7 F0 03 F6 | 	mov	ptra, fp
2ccc4     F2 00 A0 FD | 	call	#popregs_
2ccc8                 | _fatfs_cc_sync_fs_ret
2ccc8     2D 00 64 FD | 	ret
2cccc                 | 
2cccc                 | _fatfs_cc_clst2sect
2cccc     02 94 86 F1 | 	sub	arg02, #2
2ccd0     18 92 06 F1 | 	add	arg01, #24
2ccd4     49 81 02 FB | 	rdlong	_var01, arg01
2ccd8     18 92 86 F1 | 	sub	arg01, #24
2ccdc     02 80 86 F1 | 	sub	_var01, #2
2cce0     40 95 12 F2 | 	cmp	arg02, _var01 wc
2cce4     00 7A 06 36 |  if_ae	mov	result1, #0
2cce8     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2ccec     0A 92 06 F1 | 	add	arg01, #10
2ccf0     49 81 E2 FA | 	rdword	_var01, arg01
2ccf4     4A 81 02 FD | 	qmul	_var01, arg02
2ccf8                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2ccf8     22 92 06 F1 | 	add	arg01, #34
2ccfc     49 7B 02 FB | 	rdlong	result1, arg01
2cd00     18 80 62 FD | 	getqx	_var01
2cd04     40 7B 02 F1 | 	add	result1, _var01
2cd08                 | _fatfs_cc_clst2sect_ret
2cd08     2D 00 64 FD | 	ret
2cd0c                 | 
2cd0c                 | _fatfs_cc_get_fat
2cd0c     07 CA 05 F6 | 	mov	COUNT_, #7
2cd10     E8 00 A0 FD | 	call	#pushregs_
2cd14     4A A7 02 F6 | 	mov	local01, arg02
2cd18     49 A9 02 FB | 	rdlong	local02, arg01
2cd1c     02 A6 16 F2 | 	cmp	local01, #2 wc
2cd20     14 00 90 CD |  if_b	jmp	#LR__4720
2cd24     18 A8 06 F1 | 	add	local02, #24
2cd28     54 AB 02 FB | 	rdlong	local03, local02
2cd2c     18 A8 86 F1 | 	sub	local02, #24
2cd30     55 A7 12 F2 | 	cmp	local01, local03 wc
2cd34     08 00 90 CD |  if_b	jmp	#LR__4721
2cd38                 | LR__4720
2cd38     01 AC 06 F6 | 	mov	local04, #1
2cd3c     60 01 90 FD | 	jmp	#LR__4728
2cd40                 | LR__4721
2cd40     01 AC 66 F6 | 	neg	local04, #1
2cd44                 | ' 		val = 0xFFFFFFFF;
2cd44                 | ' 
2cd44                 | ' 		switch (fs->fs_type) {
2cd44     54 AF C2 FA | 	rdbyte	local05, local02
2cd48     01 AE 86 F1 | 	sub	local05, #1
2cd4c     03 AE 26 F3 | 	fle	local05, #3
2cd50     30 AE 62 FD | 	jmprel	local05
2cd54                 | LR__4722
2cd54     0C 00 90 FD | 	jmp	#LR__4723
2cd58     B8 00 90 FD | 	jmp	#LR__4724
2cd5c     F8 00 90 FD | 	jmp	#LR__4725
2cd60     38 01 90 FD | 	jmp	#LR__4726
2cd64                 | LR__4723
2cd64     53 AF 02 F6 | 	mov	local05, local01
2cd68     53 93 02 F6 | 	mov	arg01, local01
2cd6c     01 92 46 F0 | 	shr	arg01, #1
2cd70     49 AF 02 F1 | 	add	local05, arg01
2cd74     54 93 02 F6 | 	mov	arg01, local02
2cd78     57 B1 02 F6 | 	mov	local06, local05
2cd7c     09 B0 46 F0 | 	shr	local06, #9
2cd80     24 A8 06 F1 | 	add	local02, #36
2cd84     54 95 02 FB | 	rdlong	arg02, local02
2cd88     24 A8 86 F1 | 	sub	local02, #36
2cd8c     58 95 02 F1 | 	add	arg02, local06
2cd90     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2cd94     00 7A 0E F2 | 	cmp	result1, #0 wz
2cd98     04 01 90 5D |  if_ne	jmp	#LR__4727
2cd9c     57 B1 02 F6 | 	mov	local06, local05
2cda0     FF B1 06 F5 | 	and	local06, #511
2cda4     54 93 02 F6 | 	mov	arg01, local02
2cda8     34 92 06 F1 | 	add	arg01, #52
2cdac     49 B1 02 F1 | 	add	local06, arg01
2cdb0     58 B3 C2 FA | 	rdbyte	local07, local06
2cdb4     54 93 02 F6 | 	mov	arg01, local02
2cdb8     01 AE 06 F1 | 	add	local05, #1
2cdbc     57 B1 02 F6 | 	mov	local06, local05
2cdc0     09 B0 46 F0 | 	shr	local06, #9
2cdc4     24 A8 06 F1 | 	add	local02, #36
2cdc8     54 95 02 FB | 	rdlong	arg02, local02
2cdcc     24 A8 86 F1 | 	sub	local02, #36
2cdd0     58 95 02 F1 | 	add	arg02, local06
2cdd4     7C FD BF FD | 	call	#_fatfs_cc_move_window
2cdd8     00 7A 0E F2 | 	cmp	result1, #0 wz
2cddc     C0 00 90 5D |  if_ne	jmp	#LR__4727
2cde0     FF AF 06 F5 | 	and	local05, #511
2cde4     34 A8 06 F1 | 	add	local02, #52
2cde8     54 AF 02 F1 | 	add	local05, local02
2cdec     57 B1 C2 FA | 	rdbyte	local06, local05
2cdf0     08 B0 66 F0 | 	shl	local06, #8
2cdf4     58 B3 42 F5 | 	or	local07, local06
2cdf8     01 A6 CE F7 | 	test	local01, #1 wz
2cdfc     04 B2 46 50 |  if_ne	shr	local07, #4
2ce00     59 AB 02 56 |  if_ne	mov	local03, local07
2ce04     0B B2 46 A7 |  if_e	zerox	local07, #11
2ce08     59 AB 02 A6 |  if_e	mov	local03, local07
2ce0c     55 AD 02 F6 | 	mov	local04, local03
2ce10                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2ce10                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2ce10                 | ' 			break;
2ce10     8C 00 90 FD | 	jmp	#LR__4727
2ce14                 | LR__4724
2ce14     54 93 02 F6 | 	mov	arg01, local02
2ce18     53 B1 02 F6 | 	mov	local06, local01
2ce1c     08 B0 46 F0 | 	shr	local06, #8
2ce20     24 A8 06 F1 | 	add	local02, #36
2ce24     54 95 02 FB | 	rdlong	arg02, local02
2ce28     24 A8 86 F1 | 	sub	local02, #36
2ce2c     58 95 02 F1 | 	add	arg02, local06
2ce30     20 FD BF FD | 	call	#_fatfs_cc_move_window
2ce34     00 7A 0E F2 | 	cmp	result1, #0 wz
2ce38     64 00 90 5D |  if_ne	jmp	#LR__4727
2ce3c     34 A8 06 F1 | 	add	local02, #52
2ce40     01 A6 66 F0 | 	shl	local01, #1
2ce44     FF A7 06 F5 | 	and	local01, #511
2ce48     53 A9 02 F1 | 	add	local02, local01
2ce4c                 | ' {
2ce4c                 | ' 
2ce4c                 | ' 	return *((WORD*)ptr);
2ce4c     54 7B E2 FA | 	rdword	result1, local02
2ce50     3D AD 32 F9 | 	getword	local04, result1, #0
2ce54                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2ce54                 | ' 			break;
2ce54     48 00 90 FD | 	jmp	#LR__4727
2ce58                 | LR__4725
2ce58     54 93 02 F6 | 	mov	arg01, local02
2ce5c     53 B1 02 F6 | 	mov	local06, local01
2ce60     07 B0 46 F0 | 	shr	local06, #7
2ce64     24 A8 06 F1 | 	add	local02, #36
2ce68     54 95 02 FB | 	rdlong	arg02, local02
2ce6c     24 A8 86 F1 | 	sub	local02, #36
2ce70     58 95 02 F1 | 	add	arg02, local06
2ce74     DC FC BF FD | 	call	#_fatfs_cc_move_window
2ce78     00 7A 0E F2 | 	cmp	result1, #0 wz
2ce7c     20 00 90 5D |  if_ne	jmp	#LR__4727
2ce80     34 A8 06 F1 | 	add	local02, #52
2ce84     02 A6 66 F0 | 	shl	local01, #2
2ce88     FF A7 06 F5 | 	and	local01, #511
2ce8c     53 A9 02 F1 | 	add	local02, local01
2ce90                 | ' {
2ce90                 | ' 
2ce90                 | ' 	return *((DWORD*)ptr);
2ce90     54 AD 02 FB | 	rdlong	local04, local02
2ce94     7C AC 06 F4 | 	bitl	local04, #124
2ce98                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2ce98                 | ' 			break;
2ce98     04 00 90 FD | 	jmp	#LR__4727
2ce9c                 | LR__4726
2ce9c     01 AC 06 F6 | 	mov	local04, #1
2cea0                 | LR__4727
2cea0                 | LR__4728
2cea0                 | ' 			val = 1;
2cea0                 | ' 		}
2cea0                 | ' 	}
2cea0                 | ' 
2cea0                 | ' 	return val;
2cea0     56 7B 02 F6 | 	mov	result1, local04
2cea4     E7 F0 03 F6 | 	mov	ptra, fp
2cea8     F2 00 A0 FD | 	call	#popregs_
2ceac                 | _fatfs_cc_get_fat_ret
2ceac     2D 00 64 FD | 	ret
2ceb0                 | 
2ceb0                 | _fatfs_cc_put_fat
2ceb0     08 CA 05 F6 | 	mov	COUNT_, #8
2ceb4     E8 00 A0 FD | 	call	#pushregs_
2ceb8     49 A7 02 F6 | 	mov	local01, arg01
2cebc     4A A9 02 F6 | 	mov	local02, arg02
2cec0     4B AB 02 F6 | 	mov	local03, arg03
2cec4     02 AC 06 F6 | 	mov	local04, #2
2cec8     02 A8 16 F2 | 	cmp	local02, #2 wc
2cecc     E0 01 90 CD |  if_b	jmp	#LR__4737
2ced0     18 A6 06 F1 | 	add	local01, #24
2ced4     53 AF 02 FB | 	rdlong	local05, local01
2ced8     18 A6 86 F1 | 	sub	local01, #24
2cedc     57 A9 12 F2 | 	cmp	local02, local05 wc
2cee0     CC 01 90 3D |  if_ae	jmp	#LR__4737
2cee4                 | ' 		switch (fs->fs_type) {
2cee4     53 B1 C2 FA | 	rdbyte	local06, local01
2cee8     01 B0 86 F1 | 	sub	local06, #1
2ceec     03 B0 26 F3 | 	fle	local06, #3
2cef0     30 B0 62 FD | 	jmprel	local06
2cef4                 | LR__4730
2cef4     0C 00 90 FD | 	jmp	#LR__4731
2cef8     F4 00 90 FD | 	jmp	#LR__4734
2cefc     3C 01 90 FD | 	jmp	#LR__4735
2cf00     AC 01 90 FD | 	jmp	#LR__4736
2cf04                 | LR__4731
2cf04     54 B3 02 F6 | 	mov	local07, local02
2cf08     54 AF 02 F6 | 	mov	local05, local02
2cf0c     01 AE 46 F0 | 	shr	local05, #1
2cf10     57 B3 02 F1 | 	add	local07, local05
2cf14     53 93 02 F6 | 	mov	arg01, local01
2cf18     59 B1 02 F6 | 	mov	local06, local07
2cf1c     09 B0 46 F0 | 	shr	local06, #9
2cf20     24 A6 06 F1 | 	add	local01, #36
2cf24     53 95 02 FB | 	rdlong	arg02, local01
2cf28     24 A6 86 F1 | 	sub	local01, #36
2cf2c     58 95 02 F1 | 	add	arg02, local06
2cf30     20 FC BF FD | 	call	#_fatfs_cc_move_window
2cf34     3D AD 0A F6 | 	mov	local04, result1 wz
2cf38     74 01 90 5D |  if_ne	jmp	#LR__4736
2cf3c     53 B5 02 F6 | 	mov	local08, local01
2cf40     34 B4 06 F1 | 	add	local08, #52
2cf44     59 AF 02 F6 | 	mov	local05, local07
2cf48     FF AF 06 F5 | 	and	local05, #511
2cf4c     57 B5 02 F1 | 	add	local08, local05
2cf50     01 A8 CE F7 | 	test	local02, #1 wz
2cf54     01 B2 06 F1 | 	add	local07, #1
2cf58     18 00 90 AD |  if_e	jmp	#LR__4732
2cf5c     5A AF C2 FA | 	rdbyte	local05, local08
2cf60     57 AF 42 F8 | 	getnib	local05, local05, #0
2cf64     55 B1 E2 F8 | 	getbyte	local06, local03, #0
2cf68     04 B0 66 F0 | 	shl	local06, #4
2cf6c     58 AF 42 F5 | 	or	local05, local06
2cf70     04 00 90 FD | 	jmp	#LR__4733
2cf74                 | LR__4732
2cf74     55 AF 02 F6 | 	mov	local05, local03
2cf78                 | LR__4733
2cf78     5A AF 42 FC | 	wrbyte	local05, local08
2cf7c     03 A6 06 F1 | 	add	local01, #3
2cf80     53 03 48 FC | 	wrbyte	#1, local01
2cf84     03 A6 86 F1 | 	sub	local01, #3
2cf88     53 93 02 F6 | 	mov	arg01, local01
2cf8c     59 B5 02 F6 | 	mov	local08, local07
2cf90     09 B4 46 F0 | 	shr	local08, #9
2cf94     24 A6 06 F1 | 	add	local01, #36
2cf98     53 95 02 FB | 	rdlong	arg02, local01
2cf9c     24 A6 86 F1 | 	sub	local01, #36
2cfa0     5A 95 02 F1 | 	add	arg02, local08
2cfa4     AC FB BF FD | 	call	#_fatfs_cc_move_window
2cfa8     3D AD 0A F6 | 	mov	local04, result1 wz
2cfac     00 01 90 5D |  if_ne	jmp	#LR__4736
2cfb0     53 B5 02 F6 | 	mov	local08, local01
2cfb4     34 B4 06 F1 | 	add	local08, #52
2cfb8     FF B3 06 F5 | 	and	local07, #511
2cfbc     59 B5 02 F1 | 	add	local08, local07
2cfc0     01 A8 CE F7 | 	test	local02, #1 wz
2cfc4     04 AA 46 50 |  if_ne	shr	local03, #4
2cfc8     55 AF 02 56 |  if_ne	mov	local05, local03
2cfcc     5A AF C2 AA |  if_e	rdbyte	local05, local08
2cfd0     F0 AE 06 A5 |  if_e	and	local05, #240
2cfd4     55 AB EA A8 |  if_e	getbyte	local03, local03, #1
2cfd8     55 AB 42 A8 |  if_e	getnib	local03, local03, #0
2cfdc     55 AF 42 A5 |  if_e	or	local05, local03
2cfe0     5A AF 42 FC | 	wrbyte	local05, local08
2cfe4     03 A6 06 F1 | 	add	local01, #3
2cfe8     53 03 48 FC | 	wrbyte	#1, local01
2cfec                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2cfec                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2cfec                 | ' 			fs->wflag = 1;
2cfec                 | ' 			break;
2cfec     C0 00 90 FD | 	jmp	#LR__4736
2cff0                 | LR__4734
2cff0     53 93 02 F6 | 	mov	arg01, local01
2cff4     54 B5 02 F6 | 	mov	local08, local02
2cff8     08 B4 46 F0 | 	shr	local08, #8
2cffc     24 A6 06 F1 | 	add	local01, #36
2d000     53 95 02 FB | 	rdlong	arg02, local01
2d004     24 A6 86 F1 | 	sub	local01, #36
2d008     5A 95 02 F1 | 	add	arg02, local08
2d00c     44 FB BF FD | 	call	#_fatfs_cc_move_window
2d010     3D AD 0A F6 | 	mov	local04, result1 wz
2d014     98 00 90 5D |  if_ne	jmp	#LR__4736
2d018     34 A6 06 F1 | 	add	local01, #52
2d01c     53 93 02 F6 | 	mov	arg01, local01
2d020     01 A8 66 F0 | 	shl	local02, #1
2d024     FF A9 06 F5 | 	and	local02, #511
2d028     54 93 02 F1 | 	add	arg01, local02
2d02c     49 AB 52 FC | 	wrword	local03, arg01
2d030     31 A6 86 F1 | 	sub	local01, #49
2d034     53 03 48 FC | 	wrbyte	#1, local01
2d038                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2d038                 | ' 			fs->wflag = 1;
2d038                 | ' 			break;
2d038     74 00 90 FD | 	jmp	#LR__4736
2d03c                 | LR__4735
2d03c     53 93 02 F6 | 	mov	arg01, local01
2d040     54 B5 02 F6 | 	mov	local08, local02
2d044     07 B4 46 F0 | 	shr	local08, #7
2d048     24 A6 06 F1 | 	add	local01, #36
2d04c     53 95 02 FB | 	rdlong	arg02, local01
2d050     24 A6 86 F1 | 	sub	local01, #36
2d054     5A 95 02 F1 | 	add	arg02, local08
2d058     F8 FA BF FD | 	call	#_fatfs_cc_move_window
2d05c     3D AD 0A F6 | 	mov	local04, result1 wz
2d060     4C 00 90 5D |  if_ne	jmp	#LR__4736
2d064     7C AA 06 F4 | 	bitl	local03, #124
2d068     53 93 02 F6 | 	mov	arg01, local01
2d06c     34 92 06 F1 | 	add	arg01, #52
2d070     54 B5 02 F6 | 	mov	local08, local02
2d074     02 B4 66 F0 | 	shl	local08, #2
2d078     FF B5 06 F5 | 	and	local08, #511
2d07c     5A 93 02 F1 | 	add	arg01, local08
2d080                 | ' {
2d080                 | ' 
2d080                 | ' 	return *((DWORD*)ptr);
2d080     49 B5 02 FB | 	rdlong	local08, arg01
2d084     00 00 78 FF 
2d088     00 B4 06 F5 | 	and	local08, ##-268435456
2d08c     5A AB 42 F5 | 	or	local03, local08
2d090     34 A6 06 F1 | 	add	local01, #52
2d094     53 93 02 F6 | 	mov	arg01, local01
2d098     02 A8 66 F0 | 	shl	local02, #2
2d09c     FF A9 06 F5 | 	and	local02, #511
2d0a0     54 93 02 F1 | 	add	arg01, local02
2d0a4     49 AB 62 FC | 	wrlong	local03, arg01
2d0a8     31 A6 86 F1 | 	sub	local01, #49
2d0ac     53 03 48 FC | 	wrbyte	#1, local01
2d0b0                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2d0b0                 | ' 			}
2d0b0                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2d0b0                 | ' 			fs->wflag = 1;
2d0b0                 | ' 			break;
2d0b0                 | LR__4736
2d0b0                 | LR__4737
2d0b0                 | ' 		}
2d0b0                 | ' 	}
2d0b0                 | ' 	return res;
2d0b0     56 7B 02 F6 | 	mov	result1, local04
2d0b4     E7 F0 03 F6 | 	mov	ptra, fp
2d0b8     F2 00 A0 FD | 	call	#popregs_
2d0bc                 | _fatfs_cc_put_fat_ret
2d0bc     2D 00 64 FD | 	ret
2d0c0                 | 
2d0c0                 | _fatfs_cc_remove_chain
2d0c0     05 CA 05 F6 | 	mov	COUNT_, #5
2d0c4     E8 00 A0 FD | 	call	#pushregs_
2d0c8     49 A7 02 F6 | 	mov	local01, arg01
2d0cc     4A A9 02 F6 | 	mov	local02, arg02
2d0d0     4B AB 02 F6 | 	mov	local03, arg03
2d0d4     53 AD 02 FB | 	rdlong	local04, local01
2d0d8     02 A8 16 F2 | 	cmp	local02, #2 wc
2d0dc     14 00 90 CD |  if_b	jmp	#LR__4740
2d0e0     18 AC 06 F1 | 	add	local04, #24
2d0e4     56 7B 02 FB | 	rdlong	result1, local04
2d0e8     18 AC 86 F1 | 	sub	local04, #24
2d0ec     3D A9 12 F2 | 	cmp	local02, result1 wc
2d0f0     08 00 90 CD |  if_b	jmp	#LR__4741
2d0f4                 | LR__4740
2d0f4     02 7A 06 F6 | 	mov	result1, #2
2d0f8     CC 00 90 FD | 	jmp	#LR__4746
2d0fc                 | LR__4741
2d0fc     00 AA 0E F2 | 	cmp	local03, #0 wz
2d100     18 00 90 AD |  if_e	jmp	#LR__4742
2d104     55 95 02 F6 | 	mov	arg02, local03
2d108     56 93 02 F6 | 	mov	arg01, local04
2d10c     01 96 66 F6 | 	neg	arg03, #1
2d110     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2d114     00 7A 0E F2 | 	cmp	result1, #0 wz
2d118     AC 00 90 5D |  if_ne	jmp	#LR__4746
2d11c                 | LR__4742
2d11c                 | ' 	}
2d11c                 | ' 
2d11c                 | ' 
2d11c                 | ' 	do {
2d11c                 | LR__4743
2d11c     54 95 02 F6 | 	mov	arg02, local02
2d120     53 93 02 F6 | 	mov	arg01, local01
2d124     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2d128     3D AF 0A F6 | 	mov	local05, result1 wz
2d12c     94 00 90 AD |  if_e	jmp	#LR__4745
2d130     01 AE 0E F2 | 	cmp	local05, #1 wz
2d134     02 7A 06 A6 |  if_e	mov	result1, #2
2d138     8C 00 90 AD |  if_e	jmp	#LR__4746
2d13c     FF FF 7F FF 
2d140     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2d144     01 7A 06 A6 |  if_e	mov	result1, #1
2d148     7C 00 90 AD |  if_e	jmp	#LR__4746
2d14c     54 95 02 F6 | 	mov	arg02, local02
2d150     56 93 02 F6 | 	mov	arg01, local04
2d154     00 96 06 F6 | 	mov	arg03, #0
2d158     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2d15c     3D AB 0A F6 | 	mov	local03, result1 wz
2d160     55 7B 02 56 |  if_ne	mov	result1, local03
2d164     60 00 90 5D |  if_ne	jmp	#LR__4746
2d168     18 AC 06 F1 | 	add	local04, #24
2d16c     56 AB 02 FB | 	rdlong	local03, local04
2d170     02 AA 86 F1 | 	sub	local03, #2
2d174     04 AC 86 F1 | 	sub	local04, #4
2d178     56 A9 02 FB | 	rdlong	local02, local04
2d17c     14 AC 86 F1 | 	sub	local04, #20
2d180     55 A9 12 F2 | 	cmp	local02, local03 wc
2d184     24 00 90 3D |  if_ae	jmp	#LR__4744
2d188     14 AC 06 F1 | 	add	local04, #20
2d18c     56 AB 02 FB | 	rdlong	local03, local04
2d190     01 AA 06 F1 | 	add	local03, #1
2d194     56 AB 62 FC | 	wrlong	local03, local04
2d198     10 AC 86 F1 | 	sub	local04, #16
2d19c     56 AB C2 FA | 	rdbyte	local03, local04
2d1a0     01 AA 46 F5 | 	or	local03, #1
2d1a4     56 AB 42 FC | 	wrbyte	local03, local04
2d1a8     04 AC 86 F1 | 	sub	local04, #4
2d1ac                 | LR__4744
2d1ac     57 A9 02 F6 | 	mov	local02, local05
2d1b0     18 AC 06 F1 | 	add	local04, #24
2d1b4     56 AF 02 FB | 	rdlong	local05, local04
2d1b8     18 AC 86 F1 | 	sub	local04, #24
2d1bc     57 A9 12 F2 | 	cmp	local02, local05 wc
2d1c0     58 FF 9F CD |  if_b	jmp	#LR__4743
2d1c4                 | LR__4745
2d1c4                 | ' #line 1500 "ff.c"
2d1c4                 | ' 	return FR_OK;
2d1c4     00 7A 06 F6 | 	mov	result1, #0
2d1c8                 | LR__4746
2d1c8     E7 F0 03 F6 | 	mov	ptra, fp
2d1cc     F2 00 A0 FD | 	call	#popregs_
2d1d0                 | _fatfs_cc_remove_chain_ret
2d1d0     2D 00 64 FD | 	ret
2d1d4                 | 
2d1d4                 | _fatfs_cc_create_chain
2d1d4     09 CA 05 F6 | 	mov	COUNT_, #9
2d1d8     E8 00 A0 FD | 	call	#pushregs_
2d1dc     49 A7 02 F6 | 	mov	local01, arg01
2d1e0     4A A9 0A F6 | 	mov	local02, arg02 wz
2d1e4     53 AB 02 FB | 	rdlong	local03, local01
2d1e8     28 00 90 5D |  if_ne	jmp	#LR__4750
2d1ec     10 AA 06 F1 | 	add	local03, #16
2d1f0     55 AD 0A FB | 	rdlong	local04, local03 wz
2d1f4     10 AA 86 F1 | 	sub	local03, #16
2d1f8     18 AA 06 51 |  if_ne	add	local03, #24
2d1fc     55 AF 02 5B |  if_ne	rdlong	local05, local03
2d200     18 AA 86 51 |  if_ne	sub	local03, #24
2d204     57 AD 12 52 |  if_ne	cmp	local04, local05 wc
2d208     50 00 90 4D |  if_c_and_nz	jmp	#LR__4751
2d20c     01 AC 06 F6 | 	mov	local04, #1
2d210     48 00 90 FD | 	jmp	#LR__4751
2d214                 | LR__4750
2d214     54 95 02 F6 | 	mov	arg02, local02
2d218     53 93 02 F6 | 	mov	arg01, local01
2d21c     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2d220     3D AD 02 F6 | 	mov	local04, result1
2d224     02 AC 16 F2 | 	cmp	local04, #2 wc
2d228     01 7A 06 C6 |  if_b	mov	result1, #1
2d22c     BC 01 90 CD |  if_b	jmp	#LR__4761
2d230     FF FF 7F FF 
2d234     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2d238     56 7B 02 A6 |  if_e	mov	result1, local04
2d23c     AC 01 90 AD |  if_e	jmp	#LR__4761
2d240     18 AA 06 F1 | 	add	local03, #24
2d244     55 AF 02 FB | 	rdlong	local05, local03
2d248     18 AA 86 F1 | 	sub	local03, #24
2d24c     57 AD 12 F2 | 	cmp	local04, local05 wc
2d250     56 7B 02 C6 |  if_b	mov	result1, local04
2d254     94 01 90 CD |  if_b	jmp	#LR__4761
2d258     54 AD 02 F6 | 	mov	local04, local02
2d25c                 | LR__4751
2d25c     14 AA 06 F1 | 	add	local03, #20
2d260     55 AF 0A FB | 	rdlong	local05, local03 wz
2d264     14 AA 86 F1 | 	sub	local03, #20
2d268     00 7A 06 A6 |  if_e	mov	result1, #0
2d26c     7C 01 90 AD |  if_e	jmp	#LR__4761
2d270     00 B0 06 F6 | 	mov	local06, #0
2d274     54 AD 0A F2 | 	cmp	local04, local02 wz
2d278     74 00 90 5D |  if_ne	jmp	#LR__4754
2d27c     56 B1 02 F6 | 	mov	local06, local04
2d280     01 B0 06 F1 | 	add	local06, #1
2d284     18 AA 06 F1 | 	add	local03, #24
2d288     55 AF 02 FB | 	rdlong	local05, local03
2d28c     18 AA 86 F1 | 	sub	local03, #24
2d290     57 B1 12 F2 | 	cmp	local06, local05 wc
2d294     02 B0 06 36 |  if_ae	mov	local06, #2
2d298     58 95 02 F6 | 	mov	arg02, local06
2d29c     53 93 02 F6 | 	mov	arg01, local01
2d2a0     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2d2a4     3D AF 02 F6 | 	mov	local05, result1
2d2a8     01 AE 0E F2 | 	cmp	local05, #1 wz
2d2ac     FF FF 7F 5F 
2d2b0     FF AF 0E 52 |  if_ne	cmp	local05, ##-1 wz
2d2b4     57 7B 02 A6 |  if_e	mov	result1, local05
2d2b8     30 01 90 AD |  if_e	jmp	#LR__4761
2d2bc     00 AE 0E F2 | 	cmp	local05, #0 wz
2d2c0     2C 00 90 AD |  if_e	jmp	#LR__4753
2d2c4     10 AA 06 F1 | 	add	local03, #16
2d2c8     55 B3 02 FB | 	rdlong	local07, local03
2d2cc     10 AA 86 F1 | 	sub	local03, #16
2d2d0     02 B2 16 F2 | 	cmp	local07, #2 wc
2d2d4     14 00 90 CD |  if_b	jmp	#LR__4752
2d2d8     18 AA 06 F1 | 	add	local03, #24
2d2dc     55 AF 02 FB | 	rdlong	local05, local03
2d2e0     18 AA 86 F1 | 	sub	local03, #24
2d2e4     57 B3 12 F2 | 	cmp	local07, local05 wc
2d2e8     59 AD 02 C6 |  if_b	mov	local04, local07
2d2ec                 | LR__4752
2d2ec     00 B0 06 F6 | 	mov	local06, #0
2d2f0                 | LR__4753
2d2f0                 | LR__4754
2d2f0     00 B0 0E F2 | 	cmp	local06, #0 wz
2d2f4     60 00 90 5D |  if_ne	jmp	#LR__4757
2d2f8     56 B1 02 F6 | 	mov	local06, local04
2d2fc                 | ' 			ncl = scl;
2d2fc                 | ' 			for (;;) {
2d2fc                 | LR__4755
2d2fc     01 B0 06 F1 | 	add	local06, #1
2d300     18 AA 06 F1 | 	add	local03, #24
2d304     55 AF 02 FB | 	rdlong	local05, local03
2d308     18 AA 86 F1 | 	sub	local03, #24
2d30c     57 B1 12 F2 | 	cmp	local06, local05 wc
2d310     02 B0 06 36 |  if_ae	mov	local06, #2
2d314     56 B1 1A 32 |  if_ae	cmp	local06, local04 wcz
2d318     00 7A 06 16 |  if_a	mov	result1, #0
2d31c     CC 00 90 1D |  if_a	jmp	#LR__4761
2d320     58 95 02 F6 | 	mov	arg02, local06
2d324     53 93 02 F6 | 	mov	arg01, local01
2d328     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2d32c     3D B3 0A F6 | 	mov	local07, result1 wz
2d330     24 00 90 AD |  if_e	jmp	#LR__4756
2d334     01 B2 0E F2 | 	cmp	local07, #1 wz
2d338     FF FF 7F 5F 
2d33c     FF B3 0E 52 |  if_ne	cmp	local07, ##-1 wz
2d340     59 7B 02 A6 |  if_e	mov	result1, local07
2d344     A4 00 90 AD |  if_e	jmp	#LR__4761
2d348     56 B1 0A F2 | 	cmp	local06, local04 wz
2d34c     00 7A 06 A6 |  if_e	mov	result1, #0
2d350     98 00 90 AD |  if_e	jmp	#LR__4761
2d354     A4 FF 9F FD | 	jmp	#LR__4755
2d358                 | LR__4756
2d358                 | LR__4757
2d358     55 93 02 F6 | 	mov	arg01, local03
2d35c     58 95 02 F6 | 	mov	arg02, local06
2d360     01 96 66 F6 | 	neg	arg03, #1
2d364     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2d368     3D B5 0A F6 | 	mov	local08, result1 wz
2d36c     1C 00 90 5D |  if_ne	jmp	#LR__4758
2d370     00 A8 0E F2 | 	cmp	local02, #0 wz
2d374     14 00 90 AD |  if_e	jmp	#LR__4758
2d378     55 93 02 F6 | 	mov	arg01, local03
2d37c     54 95 02 F6 | 	mov	arg02, local02
2d380     58 97 02 F6 | 	mov	arg03, local06
2d384     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2d388     3D B5 02 F6 | 	mov	local08, result1
2d38c                 | LR__4758
2d38c     00 B4 0E F2 | 	cmp	local08, #0 wz
2d390     4C 00 90 5D |  if_ne	jmp	#LR__4759
2d394     10 AA 06 F1 | 	add	local03, #16
2d398     55 B1 62 FC | 	wrlong	local06, local03
2d39c     08 AA 06 F1 | 	add	local03, #8
2d3a0     55 AF 02 FB | 	rdlong	local05, local03
2d3a4     02 AE 86 F1 | 	sub	local05, #2
2d3a8     04 AA 86 F1 | 	sub	local03, #4
2d3ac     55 B7 02 FB | 	rdlong	local09, local03
2d3b0     14 AA 86 F1 | 	sub	local03, #20
2d3b4     57 B7 1A F2 | 	cmp	local09, local05 wcz
2d3b8     14 AA 06 E1 |  if_be	add	local03, #20
2d3bc     55 B7 02 EB |  if_be	rdlong	local09, local03
2d3c0     01 B6 86 E1 |  if_be	sub	local09, #1
2d3c4     55 B7 62 EC |  if_be	wrlong	local09, local03
2d3c8     14 AA 86 E1 |  if_be	sub	local03, #20
2d3cc     04 AA 06 F1 | 	add	local03, #4
2d3d0     55 AF C2 FA | 	rdbyte	local05, local03
2d3d4     01 AE 46 F5 | 	or	local05, #1
2d3d8     55 AF 42 FC | 	wrbyte	local05, local03
2d3dc     08 00 90 FD | 	jmp	#LR__4760
2d3e0                 | LR__4759
2d3e0     01 B4 0E F2 | 	cmp	local08, #1 wz
2d3e4     01 B0 C6 F6 | 	negz	local06, #1
2d3e8                 | LR__4760
2d3e8                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2d3e8                 | ' 	}
2d3e8                 | ' 
2d3e8                 | ' 	return ncl;
2d3e8     58 7B 02 F6 | 	mov	result1, local06
2d3ec                 | LR__4761
2d3ec     E7 F0 03 F6 | 	mov	ptra, fp
2d3f0     F2 00 A0 FD | 	call	#popregs_
2d3f4                 | _fatfs_cc_create_chain_ret
2d3f4     2D 00 64 FD | 	ret
2d3f8                 | 
2d3f8                 | _fatfs_cc_dir_clear
2d3f8     06 CA 05 F6 | 	mov	COUNT_, #6
2d3fc     E8 00 A0 FD | 	call	#pushregs_
2d400     49 A7 02 F6 | 	mov	local01, arg01
2d404     4A A9 02 F6 | 	mov	local02, arg02
2d408     53 93 02 F6 | 	mov	arg01, local01
2d40c     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2d410     00 7A 0E F2 | 	cmp	result1, #0 wz
2d414     01 7A 06 56 |  if_ne	mov	result1, #1
2d418     90 00 90 5D |  if_ne	jmp	#LR__4772
2d41c     53 93 02 F6 | 	mov	arg01, local01
2d420     54 95 02 F6 | 	mov	arg02, local02
2d424     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2d428     3D AB 02 F6 | 	mov	local03, result1
2d42c     30 A6 06 F1 | 	add	local01, #48
2d430     53 AB 62 FC | 	wrlong	local03, local01
2d434     04 A6 06 F1 | 	add	local01, #4
2d438     53 93 02 F6 | 	mov	arg01, local01
2d43c     00 94 06 F6 | 	mov	arg02, #0
2d440     09 96 C6 F9 | 	decod	arg03, #9
2d444     D8 00 A0 FD | 	call	#\builtin_bytefill_
2d448     53 AD 02 F6 | 	mov	local04, local01
2d44c                 | ' #line 1667 "ff.c"
2d44c                 | ' 	{
2d44c                 | ' 		ibuf = fs->win; szb = 1;
2d44c                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2d44c     00 AE 06 F6 | 	mov	local05, #0
2d450     34 A6 86 F1 | 	sub	local01, #52
2d454                 | LR__4770
2d454     0A A6 06 F1 | 	add	local01, #10
2d458     53 B1 E2 FA | 	rdword	local06, local01
2d45c     0A A6 86 F1 | 	sub	local01, #10
2d460     58 AF 12 F2 | 	cmp	local05, local06 wc
2d464     2C 00 90 3D |  if_ae	jmp	#LR__4771
2d468     01 A6 06 F1 | 	add	local01, #1
2d46c     53 93 C2 FA | 	rdbyte	arg01, local01
2d470     01 A6 86 F1 | 	sub	local01, #1
2d474     56 95 02 F6 | 	mov	arg02, local04
2d478     55 97 02 F6 | 	mov	arg03, local03
2d47c     57 97 02 F1 | 	add	arg03, local05
2d480     01 98 06 F6 | 	mov	arg04, #1
2d484     80 F1 BF FD | 	call	#_fatfs_cc_disk_write
2d488     00 7A 0E F2 | 	cmp	result1, #0 wz
2d48c     01 AE 06 A1 |  if_e	add	local05, #1
2d490     C0 FF 9F AD |  if_e	jmp	#LR__4770
2d494                 | LR__4771
2d494                 | ' 	}
2d494                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2d494     0A A6 06 F1 | 	add	local01, #10
2d498     53 AD E2 FA | 	rdword	local04, local01
2d49c     56 AF 0A F2 | 	cmp	local05, local04 wz
2d4a0     00 B0 06 A6 |  if_e	mov	local06, #0
2d4a4     01 B0 06 56 |  if_ne	mov	local06, #1
2d4a8     58 7B 02 F6 | 	mov	result1, local06
2d4ac                 | LR__4772
2d4ac     E7 F0 03 F6 | 	mov	ptra, fp
2d4b0     F2 00 A0 FD | 	call	#popregs_
2d4b4                 | _fatfs_cc_dir_clear_ret
2d4b4     2D 00 64 FD | 	ret
2d4b8                 | 
2d4b8                 | _fatfs_cc_dir_sdi
2d4b8     06 CA 05 F6 | 	mov	COUNT_, #6
2d4bc     E8 00 A0 FD | 	call	#pushregs_
2d4c0     49 A7 02 F6 | 	mov	local01, arg01
2d4c4     4A A9 02 F6 | 	mov	local02, arg02
2d4c8     53 AB 02 FB | 	rdlong	local03, local01
2d4cc     00 10 00 FF 
2d4d0     00 A8 16 F2 | 	cmp	local02, ##2097152 wc
2d4d4     1F A8 CE C7 |  if_b	test	local02, #31 wz
2d4d8                 | ' 		return FR_INT_ERR;
2d4d8     02 7A 06 76 |  if_nc_or_nz	mov	result1, #2
2d4dc     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4786
2d4e0     10 A6 06 F1 | 	add	local01, #16
2d4e4     53 A9 62 FC | 	wrlong	local02, local01
2d4e8     08 A6 86 F1 | 	sub	local01, #8
2d4ec     53 AD 0A FB | 	rdlong	local04, local01 wz
2d4f0     08 A6 86 F1 | 	sub	local01, #8
2d4f4     55 AF C2 AA |  if_e	rdbyte	local05, local03
2d4f8     03 AE 16 A2 |  if_e	cmp	local05, #3 wc
2d4fc     28 AA 06 21 |  if_nc_and_z	add	local03, #40
2d500     55 AD 02 2B |  if_nc_and_z	rdlong	local04, local03
2d504     28 AA 86 21 |  if_nc_and_z	sub	local03, #40
2d508     00 AC 0E F2 | 	cmp	local04, #0 wz
2d50c     3C 00 90 5D |  if_ne	jmp	#LR__4780
2d510     54 AF 02 F6 | 	mov	local05, local02
2d514     05 AE 46 F0 | 	shr	local05, #5
2d518     08 AA 06 F1 | 	add	local03, #8
2d51c     55 95 E2 FA | 	rdword	arg02, local03
2d520     08 AA 86 F1 | 	sub	local03, #8
2d524     4A AF 12 F2 | 	cmp	local05, arg02 wc
2d528     02 7A 06 36 |  if_ae	mov	result1, #2
2d52c     E4 00 90 3D |  if_ae	jmp	#LR__4786
2d530     28 AA 06 F1 | 	add	local03, #40
2d534     55 AF 02 FB | 	rdlong	local05, local03
2d538     28 AA 86 F1 | 	sub	local03, #40
2d53c     18 A6 06 F1 | 	add	local01, #24
2d540     53 AF 62 FC | 	wrlong	local05, local01
2d544     18 A6 86 F1 | 	sub	local01, #24
2d548     7C 00 90 FD | 	jmp	#LR__4785
2d54c                 | LR__4780
2d54c     0A AA 06 F1 | 	add	local03, #10
2d550     55 B1 E2 FA | 	rdword	local06, local03
2d554     0A AA 86 F1 | 	sub	local03, #10
2d558     09 B0 66 F0 | 	shl	local06, #9
2d55c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2d55c                 | ' 		while (ofs >= csz) {
2d55c                 | LR__4781
2d55c     58 A9 12 F2 | 	cmp	local02, local06 wc
2d560     4C 00 90 CD |  if_b	jmp	#LR__4784
2d564     53 93 02 F6 | 	mov	arg01, local01
2d568     56 95 02 F6 | 	mov	arg02, local04
2d56c     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2d570     3D AD 02 F6 | 	mov	local04, result1
2d574     FF FF 7F FF 
2d578     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2d57c     01 7A 06 A6 |  if_e	mov	result1, #1
2d580     90 00 90 AD |  if_e	jmp	#LR__4786
2d584     02 AC 16 F2 | 	cmp	local04, #2 wc
2d588     14 00 90 CD |  if_b	jmp	#LR__4782
2d58c     18 AA 06 F1 | 	add	local03, #24
2d590     55 AF 02 FB | 	rdlong	local05, local03
2d594     18 AA 86 F1 | 	sub	local03, #24
2d598     57 AD 12 F2 | 	cmp	local04, local05 wc
2d59c     08 00 90 CD |  if_b	jmp	#LR__4783
2d5a0                 | LR__4782
2d5a0     02 7A 06 F6 | 	mov	result1, #2
2d5a4     6C 00 90 FD | 	jmp	#LR__4786
2d5a8                 | LR__4783
2d5a8     58 A9 82 F1 | 	sub	local02, local06
2d5ac     AC FF 9F FD | 	jmp	#LR__4781
2d5b0                 | LR__4784
2d5b0     55 93 02 F6 | 	mov	arg01, local03
2d5b4     56 95 02 F6 | 	mov	arg02, local04
2d5b8     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2d5bc     18 A6 06 F1 | 	add	local01, #24
2d5c0     53 7B 62 FC | 	wrlong	result1, local01
2d5c4     18 A6 86 F1 | 	sub	local01, #24
2d5c8                 | LR__4785
2d5c8     14 A6 06 F1 | 	add	local01, #20
2d5cc     53 AD 62 FC | 	wrlong	local04, local01
2d5d0     04 A6 06 F1 | 	add	local01, #4
2d5d4     53 AF 0A FB | 	rdlong	local05, local01 wz
2d5d8     18 A6 86 F1 | 	sub	local01, #24
2d5dc     02 7A 06 A6 |  if_e	mov	result1, #2
2d5e0     30 00 90 AD |  if_e	jmp	#LR__4786
2d5e4     54 B1 02 F6 | 	mov	local06, local02
2d5e8     09 B0 46 F0 | 	shr	local06, #9
2d5ec     18 A6 06 F1 | 	add	local01, #24
2d5f0     53 AF 02 FB | 	rdlong	local05, local01
2d5f4     58 AF 02 F1 | 	add	local05, local06
2d5f8     53 AF 62 FC | 	wrlong	local05, local01
2d5fc     34 AA 06 F1 | 	add	local03, #52
2d600     FF A9 06 F5 | 	and	local02, #511
2d604     54 AB 02 F1 | 	add	local03, local02
2d608     04 A6 06 F1 | 	add	local01, #4
2d60c     53 AB 62 FC | 	wrlong	local03, local01
2d610                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2d610                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2d610                 | ' 
2d610                 | ' 	return FR_OK;
2d610     00 7A 06 F6 | 	mov	result1, #0
2d614                 | LR__4786
2d614     E7 F0 03 F6 | 	mov	ptra, fp
2d618     F2 00 A0 FD | 	call	#popregs_
2d61c                 | _fatfs_cc_dir_sdi_ret
2d61c     2D 00 64 FD | 	ret
2d620                 | 
2d620                 | _fatfs_cc_dir_next
2d620     05 CA 05 F6 | 	mov	COUNT_, #5
2d624     E8 00 A0 FD | 	call	#pushregs_
2d628     49 A7 02 F6 | 	mov	local01, arg01
2d62c     4A A9 02 F6 | 	mov	local02, arg02
2d630     53 AB 02 FB | 	rdlong	local03, local01
2d634     10 A6 06 F1 | 	add	local01, #16
2d638     53 AD 02 FB | 	rdlong	local04, local01
2d63c     10 A6 86 F1 | 	sub	local01, #16
2d640     20 AC 06 F1 | 	add	local04, #32
2d644     00 10 00 FF 
2d648     00 AC 16 F2 | 	cmp	local04, ##2097152 wc
2d64c     18 A6 06 31 |  if_ae	add	local01, #24
2d650     53 01 68 3C |  if_ae	wrlong	#0, local01
2d654     18 A6 86 31 |  if_ae	sub	local01, #24
2d658     18 A6 06 F1 | 	add	local01, #24
2d65c     53 95 0A FB | 	rdlong	arg02, local01 wz
2d660     18 A6 86 F1 | 	sub	local01, #24
2d664     04 7A 06 A6 |  if_e	mov	result1, #4
2d668     64 01 90 AD |  if_e	jmp	#LR__4795
2d66c     FF AD CE F7 | 	test	local04, #511 wz
2d670     3C 01 90 5D |  if_ne	jmp	#LR__4794
2d674     18 A6 06 F1 | 	add	local01, #24
2d678     53 95 02 FB | 	rdlong	arg02, local01
2d67c     01 94 06 F1 | 	add	arg02, #1
2d680     53 95 62 FC | 	wrlong	arg02, local01
2d684     04 A6 86 F1 | 	sub	local01, #4
2d688     53 95 0A FB | 	rdlong	arg02, local01 wz
2d68c     14 A6 86 F1 | 	sub	local01, #20
2d690     2C 00 90 5D |  if_ne	jmp	#LR__4790
2d694     56 95 02 F6 | 	mov	arg02, local04
2d698     05 94 46 F0 | 	shr	arg02, #5
2d69c     08 AA 06 F1 | 	add	local03, #8
2d6a0     55 A9 E2 FA | 	rdword	local02, local03
2d6a4     08 AA 86 F1 | 	sub	local03, #8
2d6a8     54 95 12 F2 | 	cmp	arg02, local02 wc
2d6ac     18 A6 06 31 |  if_ae	add	local01, #24
2d6b0     53 01 68 3C |  if_ae	wrlong	#0, local01
2d6b4                 | ' 				dp->sect = 0; return FR_NO_FILE;
2d6b4     04 7A 06 36 |  if_ae	mov	result1, #4
2d6b8     14 01 90 3D |  if_ae	jmp	#LR__4795
2d6bc     F0 00 90 FD | 	jmp	#LR__4793
2d6c0                 | LR__4790
2d6c0     56 93 02 F6 | 	mov	arg01, local04
2d6c4     09 92 46 F0 | 	shr	arg01, #9
2d6c8     0A AA 06 F1 | 	add	local03, #10
2d6cc     55 95 E2 FA | 	rdword	arg02, local03
2d6d0     0A AA 86 F1 | 	sub	local03, #10
2d6d4     01 94 86 F1 | 	sub	arg02, #1
2d6d8     4A 93 CA F7 | 	test	arg01, arg02 wz
2d6dc     D0 00 90 5D |  if_ne	jmp	#LR__4792
2d6e0     53 93 02 F6 | 	mov	arg01, local01
2d6e4     14 A6 06 F1 | 	add	local01, #20
2d6e8     53 95 02 FB | 	rdlong	arg02, local01
2d6ec     14 A6 86 F1 | 	sub	local01, #20
2d6f0     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2d6f4     3D AF 02 F6 | 	mov	local05, result1
2d6f8     02 AE 16 F2 | 	cmp	local05, #2 wc
2d6fc     02 7A 06 C6 |  if_b	mov	result1, #2
2d700     CC 00 90 CD |  if_b	jmp	#LR__4795
2d704     FF FF 7F FF 
2d708     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2d70c     01 7A 06 A6 |  if_e	mov	result1, #1
2d710     BC 00 90 AD |  if_e	jmp	#LR__4795
2d714     18 AA 06 F1 | 	add	local03, #24
2d718     55 95 02 FB | 	rdlong	arg02, local03
2d71c     18 AA 86 F1 | 	sub	local03, #24
2d720     4A AF 12 F2 | 	cmp	local05, arg02 wc
2d724     68 00 90 CD |  if_b	jmp	#LR__4791
2d728     00 A8 0E F2 | 	cmp	local02, #0 wz
2d72c     18 A6 06 A1 |  if_e	add	local01, #24
2d730     53 01 68 AC |  if_e	wrlong	#0, local01
2d734                 | ' 						dp->sect = 0; return FR_NO_FILE;
2d734     04 7A 06 A6 |  if_e	mov	result1, #4
2d738     94 00 90 AD |  if_e	jmp	#LR__4795
2d73c     53 93 02 F6 | 	mov	arg01, local01
2d740     14 A6 06 F1 | 	add	local01, #20
2d744     53 95 02 FB | 	rdlong	arg02, local01
2d748     14 A6 86 F1 | 	sub	local01, #20
2d74c     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2d750     3D AF 0A F6 | 	mov	local05, result1 wz
2d754     07 7A 06 A6 |  if_e	mov	result1, #7
2d758     74 00 90 AD |  if_e	jmp	#LR__4795
2d75c     01 AE 0E F2 | 	cmp	local05, #1 wz
2d760     02 7A 06 A6 |  if_e	mov	result1, #2
2d764     68 00 90 AD |  if_e	jmp	#LR__4795
2d768     FF FF 7F FF 
2d76c     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2d770     01 7A 06 A6 |  if_e	mov	result1, #1
2d774     58 00 90 AD |  if_e	jmp	#LR__4795
2d778     57 95 02 F6 | 	mov	arg02, local05
2d77c     55 93 02 F6 | 	mov	arg01, local03
2d780     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2d784     00 7A 0E F2 | 	cmp	result1, #0 wz
2d788     01 7A 06 56 |  if_ne	mov	result1, #1
2d78c     40 00 90 5D |  if_ne	jmp	#LR__4795
2d790                 | LR__4791
2d790     14 A6 06 F1 | 	add	local01, #20
2d794     53 AF 62 FC | 	wrlong	local05, local01
2d798     55 93 02 F6 | 	mov	arg01, local03
2d79c     57 95 02 F6 | 	mov	arg02, local05
2d7a0     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2d7a4     04 A6 06 F1 | 	add	local01, #4
2d7a8     53 7B 62 FC | 	wrlong	result1, local01
2d7ac     18 A6 86 F1 | 	sub	local01, #24
2d7b0                 | LR__4792
2d7b0                 | LR__4793
2d7b0                 | LR__4794
2d7b0     10 A6 06 F1 | 	add	local01, #16
2d7b4     53 AD 62 FC | 	wrlong	local04, local01
2d7b8     34 AA 06 F1 | 	add	local03, #52
2d7bc     FF AD 06 F5 | 	and	local04, #511
2d7c0     56 AB 02 F1 | 	add	local03, local04
2d7c4     0C A6 06 F1 | 	add	local01, #12
2d7c8     53 AB 62 FC | 	wrlong	local03, local01
2d7cc                 | ' #line 1771 "ff.c"
2d7cc                 | ' 				}
2d7cc                 | ' 				dp->clust = clst;
2d7cc                 | ' 				dp->sect = clst2sect(fs, clst);
2d7cc                 | ' 			}
2d7cc                 | ' 		}
2d7cc                 | ' 	}
2d7cc                 | ' 	dp->dptr = ofs;
2d7cc                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2d7cc                 | ' 
2d7cc                 | ' 	return FR_OK;
2d7cc     00 7A 06 F6 | 	mov	result1, #0
2d7d0                 | LR__4795
2d7d0     E7 F0 03 F6 | 	mov	ptra, fp
2d7d4     F2 00 A0 FD | 	call	#popregs_
2d7d8                 | _fatfs_cc_dir_next_ret
2d7d8     2D 00 64 FD | 	ret
2d7dc                 | 
2d7dc                 | _fatfs_cc_dir_alloc
2d7dc     08 CA 05 F6 | 	mov	COUNT_, #8
2d7e0     E8 00 A0 FD | 	call	#pushregs_
2d7e4     49 A7 02 F6 | 	mov	local01, arg01
2d7e8     4A A9 02 F6 | 	mov	local02, arg02
2d7ec     53 AB 02 FB | 	rdlong	local03, local01
2d7f0     53 93 02 F6 | 	mov	arg01, local01
2d7f4     00 94 06 F6 | 	mov	arg02, #0
2d7f8     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2d7fc     3D AD 0A F6 | 	mov	local04, result1 wz
2d800     70 00 90 5D |  if_ne	jmp	#LR__4804
2d804     00 AE 06 F6 | 	mov	local05, #0
2d808                 | ' 		n = 0;
2d808                 | ' 		do {
2d808                 | LR__4800
2d808     18 A6 06 F1 | 	add	local01, #24
2d80c     53 95 02 FB | 	rdlong	arg02, local01
2d810     18 A6 86 F1 | 	sub	local01, #24
2d814     55 93 02 F6 | 	mov	arg01, local03
2d818     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2d81c     3D AD 0A F6 | 	mov	local04, result1 wz
2d820     50 00 90 5D |  if_ne	jmp	#LR__4803
2d824     1C A6 06 F1 | 	add	local01, #28
2d828     53 B1 02 FB | 	rdlong	local06, local01
2d82c     1C A6 86 F1 | 	sub	local01, #28
2d830     58 B1 C2 FA | 	rdbyte	local06, local06
2d834     E5 B0 0E F2 | 	cmp	local06, #229 wz
2d838     1C A6 06 51 |  if_ne	add	local01, #28
2d83c     53 B3 02 5B |  if_ne	rdlong	local07, local01
2d840     1C A6 86 51 |  if_ne	sub	local01, #28
2d844     59 B5 CA 5A |  if_ne	rdbyte	local08, local07 wz
2d848     10 00 90 5D |  if_ne	jmp	#LR__4801
2d84c     01 AE 06 F1 | 	add	local05, #1
2d850     54 AF 0A F2 | 	cmp	local05, local02 wz
2d854     1C 00 90 AD |  if_e	jmp	#LR__4803
2d858     04 00 90 FD | 	jmp	#LR__4802
2d85c                 | LR__4801
2d85c     00 AE 06 F6 | 	mov	local05, #0
2d860                 | LR__4802
2d860     53 93 02 F6 | 	mov	arg01, local01
2d864     01 94 06 F6 | 	mov	arg02, #1
2d868     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2d86c     3D AD 0A F6 | 	mov	local04, result1 wz
2d870     94 FF 9F AD |  if_e	jmp	#LR__4800
2d874                 | LR__4803
2d874                 | LR__4804
2d874     04 AC 0E F2 | 	cmp	local04, #4 wz
2d878     07 AC 06 A6 |  if_e	mov	local04, #7
2d87c                 | ' 	return res;
2d87c     56 7B 02 F6 | 	mov	result1, local04
2d880     E7 F0 03 F6 | 	mov	ptra, fp
2d884     F2 00 A0 FD | 	call	#popregs_
2d888                 | _fatfs_cc_dir_alloc_ret
2d888     2D 00 64 FD | 	ret
2d88c                 | 
2d88c                 | _fatfs_cc_ld_clust
2d88c     49 81 02 F6 | 	mov	_var01, arg01
2d890     4A 93 02 F6 | 	mov	arg01, arg02
2d894     1A 92 06 F1 | 	add	arg01, #26
2d898                 | ' {
2d898                 | ' 
2d898                 | ' 	return *((WORD*)ptr);
2d898     49 7B E2 FA | 	rdword	result1, arg01
2d89c     3D 93 32 F9 | 	getword	arg01, result1, #0
2d8a0     40 81 C2 FA | 	rdbyte	_var01, _var01
2d8a4     03 80 0E F2 | 	cmp	_var01, #3 wz
2d8a8     14 94 06 A1 |  if_e	add	arg02, #20
2d8ac                 | ' {
2d8ac                 | ' 
2d8ac                 | ' 	return *((WORD*)ptr);
2d8ac     4A 7B E2 AA |  if_e	rdword	result1, arg02
2d8b0     10 7A 66 A0 |  if_e	shl	result1, #16
2d8b4     3D 93 42 A5 |  if_e	or	arg01, result1
2d8b8                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2d8b8                 | ' 	}
2d8b8                 | ' 
2d8b8                 | ' 	return cl;
2d8b8     49 7B 02 F6 | 	mov	result1, arg01
2d8bc                 | _fatfs_cc_ld_clust_ret
2d8bc     2D 00 64 FD | 	ret
2d8c0                 | 
2d8c0                 | _fatfs_cc_st_clust
2d8c0     49 81 02 F6 | 	mov	_var01, arg01
2d8c4     4A 93 02 F6 | 	mov	arg01, arg02
2d8c8     1A 92 06 F1 | 	add	arg01, #26
2d8cc     49 97 52 FC | 	wrword	arg03, arg01
2d8d0     40 81 C2 FA | 	rdbyte	_var01, _var01
2d8d4     03 80 0E F2 | 	cmp	_var01, #3 wz
2d8d8     14 94 06 A1 |  if_e	add	arg02, #20
2d8dc     10 96 46 A0 |  if_e	shr	arg03, #16
2d8e0     4A 97 52 AC |  if_e	wrword	arg03, arg02
2d8e4                 | _fatfs_cc_st_clust_ret
2d8e4     2D 00 64 FD | 	ret
2d8e8                 | 
2d8e8                 | _fatfs_cc_cmp_lfn
2d8e8     07 CA 05 F6 | 	mov	COUNT_, #7
2d8ec     E8 00 A0 FD | 	call	#pushregs_
2d8f0     49 A7 02 F6 | 	mov	local01, arg01
2d8f4     4A 93 02 F6 | 	mov	arg01, arg02
2d8f8     1A 92 06 F1 | 	add	arg01, #26
2d8fc                 | ' {
2d8fc                 | ' 
2d8fc                 | ' 	return *((WORD*)ptr);
2d8fc     49 7B EA FA | 	rdword	result1, arg01 wz
2d900     00 7A 06 56 |  if_ne	mov	result1, #0
2d904     D8 00 90 5D |  if_ne	jmp	#LR__4816
2d908     4A A9 C2 FA | 	rdbyte	local02, arg02
2d90c     3F A8 06 F5 | 	and	local02, #63
2d910     01 A8 86 F1 | 	sub	local02, #1
2d914     0D A8 06 FD | 	qmul	local02, #13
2d918                 | ' 
2d918                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2d918                 | ' 
2d918                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2d918     01 AA 06 F6 | 	mov	local03, #1
2d91c     00 AC 06 F6 | 	mov	local04, #0
2d920     18 AE 62 FD | 	getqx	local05
2d924                 | LR__4810
2d924     0D AC 16 F2 | 	cmp	local04, #13 wc
2d928     94 00 90 3D |  if_ae	jmp	#LR__4815
2d92c     4A 93 02 F6 | 	mov	arg01, arg02
2d930     56 A9 02 F6 | 	mov	local02, local04
2d934     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2d938     01 00 00 FF 
2d93c     AE 7B 06 F1 | 	add	result1, ##942
2d940     3D A9 02 F1 | 	add	local02, result1
2d944     54 A9 C2 FA | 	rdbyte	local02, local02
2d948     54 93 02 F1 | 	add	arg01, local02
2d94c                 | ' {
2d94c                 | ' 
2d94c                 | ' 	return *((WORD*)ptr);
2d94c     49 7B E2 FA | 	rdword	result1, arg01
2d950     3D B1 02 F6 | 	mov	local06, result1
2d954     55 A9 02 F6 | 	mov	local02, local03
2d958     0F A8 4E F7 | 	zerox	local02, #15 wz
2d95c     44 00 90 AD |  if_e	jmp	#LR__4813
2d960     00 AF 16 F2 | 	cmp	local05, #256 wc
2d964     2C 00 90 3D |  if_ae	jmp	#LR__4811
2d968     58 93 32 F9 | 	getword	arg01, local06, #0
2d96c     CC E4 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2d970     3D A9 02 F6 | 	mov	local02, result1
2d974     57 AB 02 F6 | 	mov	local03, local05
2d978     01 AA 66 F0 | 	shl	local03, #1
2d97c     53 AB 02 F1 | 	add	local03, local01
2d980     55 93 E2 FA | 	rdword	arg01, local03
2d984     01 AE 06 F1 | 	add	local05, #1
2d988     B0 E4 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2d98c     3D A9 0A F2 | 	cmp	local02, result1 wz
2d990     08 00 90 AD |  if_e	jmp	#LR__4812
2d994                 | LR__4811
2d994                 | ' 				return 0;
2d994     00 7A 06 F6 | 	mov	result1, #0
2d998     44 00 90 FD | 	jmp	#LR__4816
2d99c                 | LR__4812
2d99c     58 AB 02 F6 | 	mov	local03, local06
2d9a0     14 00 90 FD | 	jmp	#LR__4814
2d9a4                 | LR__4813
2d9a4     58 B1 32 F9 | 	getword	local06, local06, #0
2d9a8     7F 00 00 FF 
2d9ac     FF B1 0E F2 | 	cmp	local06, ##65535 wz
2d9b0     00 7A 06 56 |  if_ne	mov	result1, #0
2d9b4     28 00 90 5D |  if_ne	jmp	#LR__4816
2d9b8                 | LR__4814
2d9b8     01 AC 06 F1 | 	add	local04, #1
2d9bc     64 FF 9F FD | 	jmp	#LR__4810
2d9c0                 | LR__4815
2d9c0     4A A9 C2 FA | 	rdbyte	local02, arg02
2d9c4     40 A8 CE F7 | 	test	local02, #64 wz
2d9c8     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
2d9cc     01 AE 66 50 |  if_ne	shl	local05, #1
2d9d0     53 AF 02 51 |  if_ne	add	local05, local01
2d9d4     57 B3 EA 5A |  if_ne	rdword	local07, local05 wz
2d9d8     00 7A 06 56 |  if_ne	mov	result1, #0
2d9dc                 | ' 
2d9dc                 | ' 	return 1;
2d9dc     01 7A 06 A6 |  if_e	mov	result1, #1
2d9e0                 | LR__4816
2d9e0     E7 F0 03 F6 | 	mov	ptra, fp
2d9e4     F2 00 A0 FD | 	call	#popregs_
2d9e8                 | _fatfs_cc_cmp_lfn_ret
2d9e8     2D 00 64 FD | 	ret
2d9ec                 | 
2d9ec                 | _fatfs_cc_pick_lfn
2d9ec     49 81 02 F6 | 	mov	_var01, arg01
2d9f0     4A 93 02 F6 | 	mov	arg01, arg02
2d9f4     1A 92 06 F1 | 	add	arg01, #26
2d9f8                 | ' {
2d9f8                 | ' 
2d9f8                 | ' 	return *((WORD*)ptr);
2d9f8     49 7B EA FA | 	rdword	result1, arg01 wz
2d9fc     00 7A 06 56 |  if_ne	mov	result1, #0
2da00     CC 00 90 5D |  if_ne	jmp	#LR__4825
2da04     4A 83 C2 FA | 	rdbyte	_var02, arg02
2da08     40 82 26 F5 | 	andn	_var02, #64
2da0c     01 82 86 F1 | 	sub	_var02, #1
2da10     0D 82 06 FD | 	qmul	_var02, #13
2da14                 | ' 
2da14                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2da14                 | ' 
2da14                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2da14     01 84 06 F6 | 	mov	_var03, #1
2da18     00 86 06 F6 | 	mov	_var04, #0
2da1c     18 88 62 FD | 	getqx	_var05
2da20                 | LR__4820
2da20     0D 86 16 F2 | 	cmp	_var04, #13 wc
2da24     78 00 90 3D |  if_ae	jmp	#LR__4823
2da28     4A 93 02 F6 | 	mov	arg01, arg02
2da2c     43 83 02 F6 | 	mov	_var02, _var04
2da30     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2da34     01 00 00 FF 
2da38     AE 7B 06 F1 | 	add	result1, ##942
2da3c     3D 83 02 F1 | 	add	_var02, result1
2da40     41 83 C2 FA | 	rdbyte	_var02, _var02
2da44     41 93 02 F1 | 	add	arg01, _var02
2da48                 | ' {
2da48                 | ' 
2da48                 | ' 	return *((WORD*)ptr);
2da48     49 7B E2 FA | 	rdword	result1, arg01
2da4c     3D 8B 02 F6 | 	mov	_var06, result1
2da50     42 83 02 F6 | 	mov	_var02, _var03
2da54     0F 82 4E F7 | 	zerox	_var02, #15 wz
2da58     28 00 90 AD |  if_e	jmp	#LR__4821
2da5c     00 89 16 F2 | 	cmp	_var05, #256 wc
2da60     00 7A 06 36 |  if_ae	mov	result1, #0
2da64     68 00 90 3D |  if_ae	jmp	#LR__4825
2da68     44 83 02 F6 | 	mov	_var02, _var05
2da6c     01 82 66 F0 | 	shl	_var02, #1
2da70     40 83 02 F1 | 	add	_var02, _var01
2da74     45 85 02 F6 | 	mov	_var03, _var06
2da78     41 85 52 FC | 	wrword	_var03, _var02
2da7c     01 88 06 F1 | 	add	_var05, #1
2da80     14 00 90 FD | 	jmp	#LR__4822
2da84                 | LR__4821
2da84     45 8B 32 F9 | 	getword	_var06, _var06, #0
2da88     7F 00 00 FF 
2da8c     FF 8B 0E F2 | 	cmp	_var06, ##65535 wz
2da90     00 7A 06 56 |  if_ne	mov	result1, #0
2da94     38 00 90 5D |  if_ne	jmp	#LR__4825
2da98                 | LR__4822
2da98     01 86 06 F1 | 	add	_var04, #1
2da9c     80 FF 9F FD | 	jmp	#LR__4820
2daa0                 | LR__4823
2daa0     4A 83 C2 FA | 	rdbyte	_var02, arg02
2daa4     40 82 CE F7 | 	test	_var02, #64 wz
2daa8     42 8D 02 56 |  if_ne	mov	_var07, _var03
2daac     0F 8C 4E 57 |  if_ne	zerox	_var07, #15 wz
2dab0     18 00 90 AD |  if_e	jmp	#LR__4824
2dab4     00 89 16 F2 | 	cmp	_var05, #256 wc
2dab8     00 7A 06 36 |  if_ae	mov	result1, #0
2dabc     10 00 90 3D |  if_ae	jmp	#LR__4825
2dac0     01 88 66 F0 | 	shl	_var05, #1
2dac4     40 89 02 F1 | 	add	_var05, _var01
2dac8     44 01 58 FC | 	wrword	#0, _var05
2dacc                 | LR__4824
2dacc                 | ' 		lfnbuf[i] = 0;
2dacc                 | ' 	}
2dacc                 | ' 
2dacc                 | ' 	return 1;
2dacc     01 7A 06 F6 | 	mov	result1, #1
2dad0                 | LR__4825
2dad0                 | _fatfs_cc_pick_lfn_ret
2dad0     2D 00 64 FD | 	ret
2dad4                 | 
2dad4                 | _fatfs_cc_put_lfn
2dad4     4A 81 02 F6 | 	mov	_var01, arg02
2dad8     0D 80 06 F1 | 	add	_var01, #13
2dadc     40 99 42 FC | 	wrbyte	arg04, _var01
2dae0     4B 99 E2 F8 | 	getbyte	arg04, arg03, #0
2dae4     01 98 86 F1 | 	sub	arg04, #1
2dae8     0D 98 06 FD | 	qmul	arg04, #13
2daec     49 83 02 F6 | 	mov	_var02, arg01
2daf0     02 80 86 F1 | 	sub	_var01, #2
2daf4     40 1F 48 FC | 	wrbyte	#15, _var01
2daf8     01 80 06 F1 | 	add	_var01, #1
2dafc     40 01 48 FC | 	wrbyte	#0, _var01
2db00     0C 80 86 F1 | 	sub	_var01, #12
2db04     40 93 02 F6 | 	mov	arg01, _var01
2db08     1A 92 06 F1 | 	add	arg01, #26
2db0c     49 01 58 FC | 	wrword	#0, arg01
2db10     00 84 06 F6 | 	mov	_var03, #0
2db14     00 86 06 F6 | 	mov	_var04, #0
2db18                 | ' 	BYTE* dir,
2db18                 | ' 	BYTE ord,
2db18                 | ' 	BYTE sum
2db18                 | ' )
2db18                 | ' {
2db18                 | ' 	UINT i, s;
2db18                 | ' 	WCHAR wc;
2db18                 | ' 
2db18                 | ' 
2db18                 | ' 	dir[ 13 ] = sum;
2db18                 | ' 	dir[ 11 ] =  0x0F ;
2db18                 | ' 	dir[ 12 ] = 0;
2db18                 | ' 	st_word(dir +  26 , 0);
2db18                 | ' 
2db18                 | ' 	i = (ord - 1) * 13;
2db18                 | ' 	s = wc = 0;
2db18                 | ' 	do {
2db18     18 88 62 FD | 	getqx	_var05
2db1c     D7 2E 48 FB | 	callpa	#(@LR__4831-@LR__4830)>>2,fcache_load_ptr_
2db20                 | LR__4830
2db20     42 99 32 F9 | 	getword	arg04, _var03, #0
2db24     7F 00 00 FF 
2db28     FF 99 0E F2 | 	cmp	arg04, ##65535 wz
2db2c     44 93 02 56 |  if_ne	mov	arg01, _var05
2db30     01 88 06 51 |  if_ne	add	_var05, #1
2db34     01 92 66 50 |  if_ne	shl	arg01, #1
2db38     41 93 02 51 |  if_ne	add	arg01, _var02
2db3c     49 85 E2 5A |  if_ne	rdword	_var03, arg01
2db40     40 93 02 F6 | 	mov	arg01, _var01
2db44     43 99 02 F6 | 	mov	arg04, _var04
2db48     36 95 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2db4c     01 00 00 FF 
2db50     AE 95 06 F1 | 	add	arg02, ##942
2db54     4A 99 02 F1 | 	add	arg04, arg02
2db58     4C 99 C2 FA | 	rdbyte	arg04, arg04
2db5c     4C 93 02 F1 | 	add	arg01, arg04
2db60     49 85 52 FC | 	wrword	_var03, arg01
2db64     42 99 02 F6 | 	mov	arg04, _var03
2db68     0F 98 4E F7 | 	zerox	arg04, #15 wz
2db6c     0F 84 CE A9 |  if_e	bmask	_var03, #15
2db70     01 86 06 F1 | 	add	_var04, #1
2db74     0D 86 16 F2 | 	cmp	_var04, #13 wc
2db78     A4 FF 9F CD |  if_b	jmp	#LR__4830
2db7c                 | LR__4831
2db7c     42 85 32 F9 | 	getword	_var03, _var03, #0
2db80     7F 00 00 FF 
2db84     FF 85 0E F2 | 	cmp	_var03, ##65535 wz
2db88     01 88 66 50 |  if_ne	shl	_var05, #1
2db8c     41 89 02 51 |  if_ne	add	_var05, _var02
2db90     44 89 EA 5A |  if_ne	rdword	_var05, _var05 wz
2db94     4B 97 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2db98     40 96 46 A5 |  if_e	or	arg03, #64
2db9c     40 97 42 FC | 	wrbyte	arg03, _var01
2dba0                 | _fatfs_cc_put_lfn_ret
2dba0     2D 00 64 FD | 	ret
2dba4                 | 
2dba4                 | _fatfs_cc_gen_numname
2dba4     08 CA 05 F6 | 	mov	COUNT_, #8
2dba8     E8 00 A0 FD | 	call	#pushregs_
2dbac     2C F0 07 F1 | 	add	ptra, #44
2dbb0     49 A7 02 F6 | 	mov	local01, arg01
2dbb4     4A A9 02 F6 | 	mov	local02, arg02
2dbb8     4B AB 02 F6 | 	mov	local03, arg03
2dbbc     4C AD 02 F6 | 	mov	local04, arg04
2dbc0     53 93 02 F6 | 	mov	arg01, local01
2dbc4     54 95 02 F6 | 	mov	arg02, local02
2dbc8     0B 96 06 F6 | 	mov	arg03, #11
2dbcc     84 6E BF FD | 	call	#__system____builtin_memmove
2dbd0     06 AC 16 F2 | 	cmp	local04, #6 wc
2dbd4     48 00 90 CD |  if_b	jmp	#LR__4845
2dbd8     56 AF 02 F6 | 	mov	local05, local04
2dbdc     D7 1E 48 FB | 	callpa	#(@LR__4843-@LR__4840)>>2,fcache_load_ptr_
2dbe0                 | ' 		sreg = seq;
2dbe0                 | ' 		while (*lfn) {
2dbe0                 | LR__4840
2dbe0     55 B1 EA FA | 	rdword	local06, local03 wz
2dbe4     34 00 90 AD |  if_e	jmp	#LR__4844
2dbe8     55 B3 E2 FA | 	rdword	local07, local03
2dbec                 | ' 			wc = *lfn++;
2dbec                 | ' 			for (i = 0; i < 16; i++) {
2dbec     02 AA 06 F1 | 	add	local03, #2
2dbf0     10 12 DC FC | 	rep	@LR__4842, #16
2dbf4                 | LR__4841
2dbf4     01 AE 66 F0 | 	shl	local05, #1
2dbf8     59 B1 32 F9 | 	getword	local06, local07, #0
2dbfc     01 B0 06 F5 | 	and	local06, #1
2dc00     58 AF 02 F1 | 	add	local05, local06
2dc04     59 B3 32 F9 | 	getword	local07, local07, #0
2dc08     01 B2 46 F0 | 	shr	local07, #1
2dc0c     10 AE 2E F4 | 	testbn	local05, #16 wz
2dc10     88 00 00 5F 
2dc14     21 AE 66 55 |  if_ne	xor	local05, ##69665
2dc18                 | LR__4842
2dc18     C4 FF 9F FD | 	jmp	#LR__4840
2dc1c                 | LR__4843
2dc1c                 | LR__4844
2dc1c     57 AD 02 F6 | 	mov	local04, local05
2dc20                 | LR__4845
2dc20     07 B2 06 F6 | 	mov	local07, #7
2dc24     D7 1E 48 FB | 	callpa	#(@LR__4847-@LR__4846)>>2,fcache_load_ptr_
2dc28                 | ' 			}
2dc28                 | ' 		}
2dc28                 | ' 		seq = (UINT)sreg;
2dc28                 | ' 	}
2dc28                 | ' 
2dc28                 | ' 
2dc28                 | ' 	i = 7;
2dc28                 | ' 	do {
2dc28                 | LR__4846
2dc28     56 AF 42 F8 | 	getnib	local05, local04, #0
2dc2c     30 AE 06 F1 | 	add	local05, #48
2dc30     04 AC 46 F0 | 	shr	local04, #4
2dc34     57 B1 E2 F8 | 	getbyte	local06, local05, #0
2dc38     3A B0 16 F2 | 	cmp	local06, #58 wc
2dc3c     57 AF E2 38 |  if_ae	getbyte	local05, local05, #0
2dc40     07 AE 06 31 |  if_ae	add	local05, #7
2dc44     59 B1 02 F6 | 	mov	local06, local07
2dc48     01 B2 8E F1 | 	sub	local07, #1 wz
2dc4c     E7 AA 02 F6 | 	mov	local03, fp
2dc50     10 AA 06 F1 | 	add	local03, #16
2dc54     55 B1 02 F1 | 	add	local06, local03
2dc58     58 AF 42 FC | 	wrbyte	local05, local06
2dc5c     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
2dc60     C4 FF 9F 5D |  if_ne	jmp	#LR__4846
2dc64                 | LR__4847
2dc64     59 B1 02 F6 | 	mov	local06, local07
2dc68     E7 AE 02 F6 | 	mov	local05, fp
2dc6c     10 AE 06 F1 | 	add	local05, #16
2dc70     57 B1 02 F1 | 	add	local06, local05
2dc74     58 FD 48 FC | 	wrbyte	#126, local06
2dc78                 | ' 	ns[i] = '~';
2dc78                 | ' 
2dc78                 | ' 
2dc78                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2dc78     00 AC 06 F6 | 	mov	local04, #0
2dc7c     D7 2A 48 FB | 	callpa	#(@LR__4850-@LR__4848)>>2,fcache_load_ptr_
2dc80                 | LR__4848
2dc80     59 AD 12 F2 | 	cmp	local04, local07 wc
2dc84     4C 00 90 3D |  if_ae	jmp	#LR__4851
2dc88     56 AF 02 F6 | 	mov	local05, local04
2dc8c     53 AF 02 F1 | 	add	local05, local01
2dc90     57 B1 C2 FA | 	rdbyte	local06, local05
2dc94     20 B0 0E F2 | 	cmp	local06, #32 wz
2dc98     38 00 90 AD |  if_e	jmp	#LR__4851
2dc9c     56 AB 02 F6 | 	mov	local03, local04
2dca0     53 AB 02 F1 | 	add	local03, local01
2dca4     55 93 CA FA | 	rdbyte	arg01, local03 wz
2dca8     00 7A 06 56 |  if_ne	mov	result1, #0
2dcac                 | ' 
2dcac                 | ' 	return 0;
2dcac     00 7A 06 A6 |  if_e	mov	result1, #0
2dcb0     00 7A 0E F2 | 	cmp	result1, #0 wz
2dcb4     14 00 90 AD |  if_e	jmp	#LR__4849
2dcb8     59 AB 02 F6 | 	mov	local03, local07
2dcbc     01 AA 86 F1 | 	sub	local03, #1
2dcc0     55 AD 0A F2 | 	cmp	local04, local03 wz
2dcc4     0C 00 90 AD |  if_e	jmp	#LR__4851
2dcc8     01 AC 06 F1 | 	add	local04, #1
2dccc                 | LR__4849
2dccc     01 AC 06 F1 | 	add	local04, #1
2dcd0     AC FF 9F FD | 	jmp	#LR__4848
2dcd4                 | LR__4850
2dcd4                 | LR__4851
2dcd4     D7 20 48 FB | 	callpa	#(@LR__4855-@LR__4852)>>2,fcache_load_ptr_
2dcd8                 | ' 			j++;
2dcd8                 | ' 		}
2dcd8                 | ' 	}
2dcd8                 | ' 	do {
2dcd8                 | LR__4852
2dcd8     56 B1 02 F6 | 	mov	local06, local04
2dcdc     53 B1 02 F1 | 	add	local06, local01
2dce0     08 B2 16 F2 | 	cmp	local07, #8 wc
2dce4     01 AC 06 F1 | 	add	local04, #1
2dce8     1C 00 90 3D |  if_ae	jmp	#LR__4853
2dcec     59 AF 02 F6 | 	mov	local05, local07
2dcf0     E7 AA 02 F6 | 	mov	local03, fp
2dcf4     10 AA 06 F1 | 	add	local03, #16
2dcf8     55 AF 02 F1 | 	add	local05, local03
2dcfc     57 B5 C2 FA | 	rdbyte	local08, local05
2dd00     01 B2 06 F1 | 	add	local07, #1
2dd04     04 00 90 FD | 	jmp	#LR__4854
2dd08                 | LR__4853
2dd08     20 B4 06 F6 | 	mov	local08, #32
2dd0c                 | LR__4854
2dd0c     58 B5 42 FC | 	wrbyte	local08, local06
2dd10     08 AC 16 F2 | 	cmp	local04, #8 wc
2dd14     C0 FF 9F CD |  if_b	jmp	#LR__4852
2dd18                 | LR__4855
2dd18     E7 F0 03 F6 | 	mov	ptra, fp
2dd1c     F2 00 A0 FD | 	call	#popregs_
2dd20                 | _fatfs_cc_gen_numname_ret
2dd20     2D 00 64 FD | 	ret
2dd24                 | 
2dd24                 | _fatfs_cc_sum_sfn
2dd24     00 80 06 F6 | 	mov	_var01, #0
2dd28                 | ' )
2dd28                 | ' {
2dd28                 | ' 	BYTE sum = 0;
2dd28                 | ' 	UINT n = 11;
2dd28                 | ' 
2dd28                 | ' 	do {
2dd28     D7 12 48 FB | 	callpa	#(@LR__4862-@LR__4860)>>2,fcache_load_ptr_
2dd2c                 | LR__4860
2dd2c     0B 10 DC FC | 	rep	@LR__4863, #11
2dd30                 | LR__4861
2dd30     40 7B E2 F8 | 	getbyte	result1, _var01, #0
2dd34     01 7A 46 F0 | 	shr	result1, #1
2dd38     40 81 E2 F8 | 	getbyte	_var01, _var01, #0
2dd3c     07 80 66 F0 | 	shl	_var01, #7
2dd40     40 7B 02 F1 | 	add	result1, _var01
2dd44     49 81 C2 FA | 	rdbyte	_var01, arg01
2dd48     3D 81 02 F1 | 	add	_var01, result1
2dd4c     01 92 06 F1 | 	add	arg01, #1
2dd50                 | LR__4862
2dd50                 | LR__4863
2dd50                 | ' 	return sum;
2dd50     40 7B 02 F6 | 	mov	result1, _var01
2dd54                 | _fatfs_cc_sum_sfn_ret
2dd54     2D 00 64 FD | 	ret
2dd58                 | 
2dd58                 | _fatfs_cc_dir_read
2dd58     0C CA 05 F6 | 	mov	COUNT_, #12
2dd5c     E8 00 A0 FD | 	call	#pushregs_
2dd60     49 A7 02 F6 | 	mov	local01, arg01
2dd64     4A A9 02 F6 | 	mov	local02, arg02
2dd68     04 AA 06 F6 | 	mov	local03, #4
2dd6c     53 AD 02 FB | 	rdlong	local04, local01
2dd70     FF AE 06 F6 | 	mov	local05, #255
2dd74     FF B0 06 F6 | 	mov	local06, #255
2dd78                 | ' )
2dd78                 | ' {
2dd78                 | ' 	FRESULT res = FR_NO_FILE;
2dd78                 | ' 	FATFS *fs = dp->obj.fs;
2dd78                 | ' 	BYTE attr, b;
2dd78                 | ' 
2dd78                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2dd78                 | ' 
2dd78                 | ' 
2dd78                 | ' 	while (dp->sect) {
2dd78                 | LR__4870
2dd78     18 A6 06 F1 | 	add	local01, #24
2dd7c     53 7B 0A FB | 	rdlong	result1, local01 wz
2dd80     18 A6 86 F1 | 	sub	local01, #24
2dd84     AC 01 90 AD |  if_e	jmp	#LR__4880
2dd88     18 A6 06 F1 | 	add	local01, #24
2dd8c     53 95 02 FB | 	rdlong	arg02, local01
2dd90     18 A6 86 F1 | 	sub	local01, #24
2dd94     56 93 02 F6 | 	mov	arg01, local04
2dd98     B8 ED BF FD | 	call	#_fatfs_cc_move_window
2dd9c     3D AB 0A F6 | 	mov	local03, result1 wz
2dda0     90 01 90 5D |  if_ne	jmp	#LR__4880
2dda4     1C A6 06 F1 | 	add	local01, #28
2dda8     53 7B 02 FB | 	rdlong	result1, local01
2ddac     1C A6 86 F1 | 	sub	local01, #28
2ddb0     3D B3 C2 FA | 	rdbyte	local07, result1
2ddb4     59 7B 02 F6 | 	mov	result1, local07
2ddb8     07 7A 4E F7 | 	zerox	result1, #7 wz
2ddbc     04 AA 06 A6 |  if_e	mov	local03, #4
2ddc0                 | ' 			res = FR_NO_FILE; break;
2ddc0     70 01 90 AD |  if_e	jmp	#LR__4880
2ddc4     1C A6 06 F1 | 	add	local01, #28
2ddc8     53 B5 02 FB | 	rdlong	local08, local01
2ddcc     0B B4 06 F1 | 	add	local08, #11
2ddd0     5A B7 C2 FA | 	rdbyte	local09, local08
2ddd4     3F B6 06 F5 | 	and	local09, #63
2ddd8     16 A6 86 F1 | 	sub	local01, #22
2dddc     53 B7 42 FC | 	wrbyte	local09, local01
2dde0     06 A6 86 F1 | 	sub	local01, #6
2dde4     59 7B E2 F8 | 	getbyte	result1, local07, #0
2dde8     E5 7A 0E F2 | 	cmp	result1, #229 wz
2ddec     59 B5 02 56 |  if_ne	mov	local08, local07
2ddf0     5A B5 E2 58 |  if_ne	getbyte	local08, local08, #0
2ddf4     2E B4 0E 52 |  if_ne	cmp	local08, #46 wz
2ddf8     1C 00 90 AD |  if_e	jmp	#LR__4871
2ddfc     00 B8 06 F6 | 	mov	local10, #0
2de00     5B B5 E2 F8 | 	getbyte	local08, local09, #0
2de04     20 B4 26 F5 | 	andn	local08, #32
2de08     08 B4 0E F2 | 	cmp	local08, #8 wz
2de0c     01 B8 06 A6 |  if_e	mov	local10, #1
2de10     54 B9 0A F2 | 	cmp	local10, local02 wz
2de14     08 00 90 AD |  if_e	jmp	#LR__4872
2de18                 | LR__4871
2de18     FF AE 06 F6 | 	mov	local05, #255
2de1c     00 01 90 FD | 	jmp	#LR__4879
2de20                 | LR__4872
2de20     5B B7 E2 F8 | 	getbyte	local09, local09, #0
2de24     0F B6 0E F2 | 	cmp	local09, #15 wz
2de28     B4 00 90 5D |  if_ne	jmp	#LR__4876
2de2c     59 BB E2 F8 | 	getbyte	local11, local07, #0
2de30     40 BA CE F7 | 	test	local11, #64 wz
2de34     30 00 90 AD |  if_e	jmp	#LR__4873
2de38     1C A6 06 F1 | 	add	local01, #28
2de3c     53 BB 02 FB | 	rdlong	local11, local01
2de40     0D BA 06 F1 | 	add	local11, #13
2de44     5D B1 C2 FA | 	rdbyte	local06, local11
2de48     59 B3 E2 F8 | 	getbyte	local07, local07, #0
2de4c     BF B2 06 F5 | 	and	local07, #191
2de50     59 AF 02 F6 | 	mov	local05, local07
2de54     0C A6 86 F1 | 	sub	local01, #12
2de58     53 BB 02 FB | 	rdlong	local11, local01
2de5c     1C A6 06 F1 | 	add	local01, #28
2de60     53 BB 62 FC | 	wrlong	local11, local01
2de64     2C A6 86 F1 | 	sub	local01, #44
2de68                 | LR__4873
2de68     59 B5 E2 F8 | 	getbyte	local08, local07, #0
2de6c     57 B9 E2 F8 | 	getbyte	local10, local05, #0
2de70     5C B5 0A F2 | 	cmp	local08, local10 wz
2de74     5C 00 90 5D |  if_ne	jmp	#LR__4874
2de78     58 B9 E2 F8 | 	getbyte	local10, local06, #0
2de7c     1C A6 06 F1 | 	add	local01, #28
2de80     53 B7 02 FB | 	rdlong	local09, local01
2de84     1C A6 86 F1 | 	sub	local01, #28
2de88     0D B6 06 F1 | 	add	local09, #13
2de8c     5B B5 C2 FA | 	rdbyte	local08, local09
2de90     5A B7 E2 F8 | 	getbyte	local09, local08, #0
2de94     5B B9 0A F2 | 	cmp	local10, local09 wz
2de98     38 00 90 5D |  if_ne	jmp	#LR__4874
2de9c     0C AC 06 F1 | 	add	local04, #12
2dea0     56 93 02 FB | 	rdlong	arg01, local04
2dea4     0C AC 86 F1 | 	sub	local04, #12
2dea8     1C A6 06 F1 | 	add	local01, #28
2deac     53 BD 02 FB | 	rdlong	local12, local01
2deb0     1C A6 86 F1 | 	sub	local01, #28
2deb4     5E 95 02 F6 | 	mov	arg02, local12
2deb8     30 FB BF FD | 	call	#_fatfs_cc_pick_lfn
2debc     00 7A 4E F2 | 	cmps	result1, #0 wz
2dec0     57 BD 02 56 |  if_ne	mov	local12, local05
2dec4     5E BD E2 58 |  if_ne	getbyte	local12, local12, #0
2dec8     01 BC 86 51 |  if_ne	sub	local12, #1
2decc     5E BB 02 56 |  if_ne	mov	local11, local12
2ded0     04 00 90 5D |  if_ne	jmp	#LR__4875
2ded4                 | LR__4874
2ded4     FF BA 06 F6 | 	mov	local11, #255
2ded8                 | LR__4875
2ded8     5D AF 02 F6 | 	mov	local05, local11
2dedc     40 00 90 FD | 	jmp	#LR__4878
2dee0                 | LR__4876
2dee0     57 BB 02 F6 | 	mov	local11, local05
2dee4     07 BA 4E F7 | 	zerox	local11, #7 wz
2dee8     20 00 90 5D |  if_ne	jmp	#LR__4877
2deec     58 B1 E2 F8 | 	getbyte	local06, local06, #0
2def0     1C A6 06 F1 | 	add	local01, #28
2def4     53 93 02 FB | 	rdlong	arg01, local01
2def8     1C A6 86 F1 | 	sub	local01, #28
2defc     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2df00     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2df04     3D B1 0A F2 | 	cmp	local06, result1 wz
2df08     28 00 90 AD |  if_e	jmp	#LR__4880
2df0c                 | LR__4877
2df0c     2C A6 06 F1 | 	add	local01, #44
2df10     FF FF FF FF 
2df14     53 FF 6B FC | 	wrlong	##-1, local01
2df18     2C A6 86 F1 | 	sub	local01, #44
2df1c                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2df1c                 | ' 					}
2df1c                 | ' 					break;
2df1c     14 00 90 FD | 	jmp	#LR__4880
2df20                 | LR__4878
2df20                 | LR__4879
2df20     53 93 02 F6 | 	mov	arg01, local01
2df24     00 94 06 F6 | 	mov	arg02, #0
2df28     F4 F6 BF FD | 	call	#_fatfs_cc_dir_next
2df2c     3D AB 0A F6 | 	mov	local03, result1 wz
2df30     44 FE 9F AD |  if_e	jmp	#LR__4870
2df34                 | LR__4880
2df34     00 AA 0E F2 | 	cmp	local03, #0 wz
2df38     18 A6 06 51 |  if_ne	add	local01, #24
2df3c     53 01 68 5C |  if_ne	wrlong	#0, local01
2df40                 | ' 	return res;
2df40     55 7B 02 F6 | 	mov	result1, local03
2df44     E7 F0 03 F6 | 	mov	ptra, fp
2df48     F2 00 A0 FD | 	call	#popregs_
2df4c                 | _fatfs_cc_dir_read_ret
2df4c     2D 00 64 FD | 	ret
2df50                 | 
2df50                 | _fatfs_cc_dir_find
2df50     0B CA 05 F6 | 	mov	COUNT_, #11
2df54     E8 00 A0 FD | 	call	#pushregs_
2df58     49 A7 02 F6 | 	mov	local01, arg01
2df5c     53 A9 02 FB | 	rdlong	local02, local01
2df60     53 93 02 F6 | 	mov	arg01, local01
2df64     00 94 06 F6 | 	mov	arg02, #0
2df68     4C F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2df6c     00 7A 0E F2 | 	cmp	result1, #0 wz
2df70     18 02 90 5D |  if_ne	jmp	#LR__4902
2df74     FF AA 06 F6 | 	mov	local03, #255
2df78     FF AC 06 F6 | 	mov	local04, #255
2df7c     2C A6 06 F1 | 	add	local01, #44
2df80     FF FF FF FF 
2df84     53 FF 6B FC | 	wrlong	##-1, local01
2df88     2C A6 86 F1 | 	sub	local01, #44
2df8c                 | ' #line 2404 "ff.c"
2df8c                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2df8c                 | ' 
2df8c                 | ' 	do {
2df8c                 | LR__4890
2df8c     18 A6 06 F1 | 	add	local01, #24
2df90     53 95 02 FB | 	rdlong	arg02, local01
2df94     18 A6 86 F1 | 	sub	local01, #24
2df98     54 93 02 F6 | 	mov	arg01, local02
2df9c     B4 EB BF FD | 	call	#_fatfs_cc_move_window
2dfa0     3D AF 0A F6 | 	mov	local05, result1 wz
2dfa4     E0 01 90 5D |  if_ne	jmp	#LR__4901
2dfa8     1C A6 06 F1 | 	add	local01, #28
2dfac     53 97 02 FB | 	rdlong	arg03, local01
2dfb0     1C A6 86 F1 | 	sub	local01, #28
2dfb4     4B B1 C2 FA | 	rdbyte	local06, arg03
2dfb8     58 97 02 F6 | 	mov	arg03, local06
2dfbc     07 96 4E F7 | 	zerox	arg03, #7 wz
2dfc0     04 AE 06 A6 |  if_e	mov	local05, #4
2dfc4     C0 01 90 AD |  if_e	jmp	#LR__4901
2dfc8     1C A6 06 F1 | 	add	local01, #28
2dfcc     53 B3 02 FB | 	rdlong	local07, local01
2dfd0     59 97 02 F6 | 	mov	arg03, local07
2dfd4     0B 96 06 F1 | 	add	arg03, #11
2dfd8     4B B5 C2 FA | 	rdbyte	local08, arg03
2dfdc     3F B4 06 F5 | 	and	local08, #63
2dfe0     16 A6 86 F1 | 	sub	local01, #22
2dfe4     53 B5 42 FC | 	wrbyte	local08, local01
2dfe8     06 A6 86 F1 | 	sub	local01, #6
2dfec     58 97 E2 F8 | 	getbyte	arg03, local06, #0
2dff0     E5 96 0E F2 | 	cmp	arg03, #229 wz
2dff4     18 00 90 AD |  if_e	jmp	#LR__4891
2dff8     5A 97 E2 F8 | 	getbyte	arg03, local08, #0
2dffc     08 96 CE F7 | 	test	arg03, #8 wz
2e000     5A B3 02 56 |  if_ne	mov	local07, local08
2e004     59 B3 E2 58 |  if_ne	getbyte	local07, local07, #0
2e008     0F B2 0E 52 |  if_ne	cmp	local07, #15 wz
2e00c     18 00 90 AD |  if_e	jmp	#LR__4892
2e010                 | LR__4891
2e010     FF AC 06 F6 | 	mov	local04, #255
2e014     2C A6 06 F1 | 	add	local01, #44
2e018     FF FF FF FF 
2e01c     53 FF 6B FC | 	wrlong	##-1, local01
2e020     2C A6 86 F1 | 	sub	local01, #44
2e024     4C 01 90 FD | 	jmp	#LR__4900
2e028                 | LR__4892
2e028     5A B5 E2 F8 | 	getbyte	local08, local08, #0
2e02c     0F B4 0E F2 | 	cmp	local08, #15 wz
2e030     C8 00 90 5D |  if_ne	jmp	#LR__4896
2e034     2B A6 06 F1 | 	add	local01, #43
2e038     53 B5 C2 FA | 	rdbyte	local08, local01
2e03c     2B A6 86 F1 | 	sub	local01, #43
2e040     40 B4 CE F7 | 	test	local08, #64 wz
2e044     2C 01 90 5D |  if_ne	jmp	#LR__4899
2e048     58 B7 E2 F8 | 	getbyte	local09, local06, #0
2e04c     40 B6 CE F7 | 	test	local09, #64 wz
2e050     30 00 90 AD |  if_e	jmp	#LR__4893
2e054     1C A6 06 F1 | 	add	local01, #28
2e058     53 B7 02 FB | 	rdlong	local09, local01
2e05c     0D B6 06 F1 | 	add	local09, #13
2e060     5B AB C2 FA | 	rdbyte	local03, local09
2e064     58 B1 E2 F8 | 	getbyte	local06, local06, #0
2e068     BF B0 06 F5 | 	and	local06, #191
2e06c     58 AD 02 F6 | 	mov	local04, local06
2e070     0C A6 86 F1 | 	sub	local01, #12
2e074     53 B7 02 FB | 	rdlong	local09, local01
2e078     1C A6 06 F1 | 	add	local01, #28
2e07c     53 B7 62 FC | 	wrlong	local09, local01
2e080     2C A6 86 F1 | 	sub	local01, #44
2e084                 | LR__4893
2e084     58 B9 E2 F8 | 	getbyte	local10, local06, #0
2e088     56 B3 E2 F8 | 	getbyte	local07, local04, #0
2e08c     59 B9 0A F2 | 	cmp	local10, local07 wz
2e090     5C 00 90 5D |  if_ne	jmp	#LR__4894
2e094     55 B5 E2 F8 | 	getbyte	local08, local03, #0
2e098     1C A6 06 F1 | 	add	local01, #28
2e09c     53 B3 02 FB | 	rdlong	local07, local01
2e0a0     1C A6 86 F1 | 	sub	local01, #28
2e0a4     0D B2 06 F1 | 	add	local07, #13
2e0a8     59 B1 C2 FA | 	rdbyte	local06, local07
2e0ac     58 B3 E2 F8 | 	getbyte	local07, local06, #0
2e0b0     59 B5 0A F2 | 	cmp	local08, local07 wz
2e0b4     38 00 90 5D |  if_ne	jmp	#LR__4894
2e0b8     0C A8 06 F1 | 	add	local02, #12
2e0bc     54 93 02 FB | 	rdlong	arg01, local02
2e0c0     0C A8 86 F1 | 	sub	local02, #12
2e0c4     1C A6 06 F1 | 	add	local01, #28
2e0c8     53 BB 02 FB | 	rdlong	local11, local01
2e0cc     1C A6 86 F1 | 	sub	local01, #28
2e0d0     5D 95 02 F6 | 	mov	arg02, local11
2e0d4     10 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2e0d8     00 7A 4E F2 | 	cmps	result1, #0 wz
2e0dc     56 BB 02 56 |  if_ne	mov	local11, local04
2e0e0     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2e0e4     01 BA 86 51 |  if_ne	sub	local11, #1
2e0e8     5D B7 02 56 |  if_ne	mov	local09, local11
2e0ec     04 00 90 5D |  if_ne	jmp	#LR__4895
2e0f0                 | LR__4894
2e0f0     FF B6 06 F6 | 	mov	local09, #255
2e0f4                 | LR__4895
2e0f4     5B AD 02 F6 | 	mov	local04, local09
2e0f8     78 00 90 FD | 	jmp	#LR__4899
2e0fc                 | LR__4896
2e0fc     56 B7 02 F6 | 	mov	local09, local04
2e100     07 B6 4E F7 | 	zerox	local09, #7 wz
2e104     20 00 90 5D |  if_ne	jmp	#LR__4897
2e108     55 B9 E2 F8 | 	getbyte	local10, local03, #0
2e10c     1C A6 06 F1 | 	add	local01, #28
2e110     53 93 02 FB | 	rdlong	arg01, local01
2e114     1C A6 86 F1 | 	sub	local01, #28
2e118     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2e11c     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2e120     3D B9 0A F2 | 	cmp	local10, result1 wz
2e124     60 00 90 AD |  if_e	jmp	#LR__4901
2e128                 | LR__4897
2e128     2B A6 06 F1 | 	add	local01, #43
2e12c     53 B7 C2 FA | 	rdbyte	local09, local01
2e130     2B A6 86 F1 | 	sub	local01, #43
2e134     01 B6 CE F7 | 	test	local09, #1 wz
2e138     24 00 90 5D |  if_ne	jmp	#LR__4898
2e13c     1C A6 06 F1 | 	add	local01, #28
2e140     53 93 02 FB | 	rdlong	arg01, local01
2e144     04 A6 06 F1 | 	add	local01, #4
2e148     53 95 02 F6 | 	mov	arg02, local01
2e14c     20 A6 86 F1 | 	sub	local01, #32
2e150     0B 96 06 F6 | 	mov	arg03, #11
2e154     B0 DE BF FD | 	call	#_fatfs_cc_memcmp
2e158     00 7A 0E F2 | 	cmp	result1, #0 wz
2e15c     28 00 90 AD |  if_e	jmp	#LR__4901
2e160                 | LR__4898
2e160     FF AC 06 F6 | 	mov	local04, #255
2e164     2C A6 06 F1 | 	add	local01, #44
2e168     FF FF FF FF 
2e16c     53 FF 6B FC | 	wrlong	##-1, local01
2e170     2C A6 86 F1 | 	sub	local01, #44
2e174                 | LR__4899
2e174                 | LR__4900
2e174     53 93 02 F6 | 	mov	arg01, local01
2e178     00 94 06 F6 | 	mov	arg02, #0
2e17c     A0 F4 BF FD | 	call	#_fatfs_cc_dir_next
2e180     3D AF 0A F6 | 	mov	local05, result1 wz
2e184     04 FE 9F AD |  if_e	jmp	#LR__4890
2e188                 | LR__4901
2e188                 | ' 
2e188                 | ' 	return res;
2e188     57 7B 02 F6 | 	mov	result1, local05
2e18c                 | LR__4902
2e18c     E7 F0 03 F6 | 	mov	ptra, fp
2e190     F2 00 A0 FD | 	call	#popregs_
2e194                 | _fatfs_cc_dir_find_ret
2e194     2D 00 64 FD | 	ret
2e198                 | 
2e198                 | _fatfs_cc_dir_register
2e198     09 CA 05 F6 | 	mov	COUNT_, #9
2e19c     E8 00 A0 FD | 	call	#pushregs_
2e1a0     2C F0 07 F1 | 	add	ptra, #44
2e1a4     49 A7 02 F6 | 	mov	local01, arg01
2e1a8     53 A9 02 FB | 	rdlong	local02, local01
2e1ac     2B A6 06 F1 | 	add	local01, #43
2e1b0     53 AB C2 FA | 	rdbyte	local03, local01
2e1b4     2B A6 86 F1 | 	sub	local01, #43
2e1b8     A0 AA CE F7 | 	test	local03, #160 wz
2e1bc     06 7A 06 56 |  if_ne	mov	result1, #6
2e1c0     2C 02 90 5D |  if_ne	jmp	#LR__4921
2e1c4                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2e1c4     00 AC 06 F6 | 	mov	local04, #0
2e1c8     0C A8 06 F1 | 	add	local02, #12
2e1cc     D7 12 48 FB | 	callpa	#(@LR__4911-@LR__4910)>>2,fcache_load_ptr_
2e1d0                 | LR__4910
2e1d0     54 AB 02 FB | 	rdlong	local03, local02
2e1d4     56 99 02 F6 | 	mov	arg04, local04
2e1d8     01 98 66 F0 | 	shl	arg04, #1
2e1dc     55 99 02 F1 | 	add	arg04, local03
2e1e0     4C AB EA FA | 	rdword	local03, arg04 wz
2e1e4     56 AF 02 56 |  if_ne	mov	local05, local04
2e1e8     01 AE 06 51 |  if_ne	add	local05, #1
2e1ec     57 AD 02 56 |  if_ne	mov	local04, local05
2e1f0     DC FF 9F 5D |  if_ne	jmp	#LR__4910
2e1f4                 | LR__4911
2e1f4     0C A8 86 F1 | 	sub	local02, #12
2e1f8     E7 92 02 F6 | 	mov	arg01, fp
2e1fc     1C 92 06 F1 | 	add	arg01, #28
2e200     53 95 02 F6 | 	mov	arg02, local01
2e204     20 94 06 F1 | 	add	arg02, #32
2e208     0C 96 06 F6 | 	mov	arg03, #12
2e20c     44 68 BF FD | 	call	#__system____builtin_memmove
2e210     27 CE 05 F1 | 	add	fp, #39
2e214     E7 AA C2 FA | 	rdbyte	local03, fp
2e218     27 CE 85 F1 | 	sub	fp, #39
2e21c     01 AA CE F7 | 	test	local03, #1 wz
2e220     80 00 90 AD |  if_e	jmp	#LR__4914
2e224     2B A6 06 F1 | 	add	local01, #43
2e228     53 81 48 FC | 	wrbyte	#64, local01
2e22c     2B A6 86 F1 | 	sub	local01, #43
2e230                 | ' 		dp->fn[ 11 ] =  0x40 ;
2e230                 | ' 		for (n = 1; n < 100; n++) {
2e230     01 B0 06 F6 | 	mov	local06, #1
2e234                 | LR__4912
2e234     64 B0 16 F2 | 	cmp	local06, #100 wc
2e238     38 00 90 3D |  if_ae	jmp	#LR__4913
2e23c     53 93 02 F6 | 	mov	arg01, local01
2e240     20 92 06 F1 | 	add	arg01, #32
2e244     E7 94 02 F6 | 	mov	arg02, fp
2e248     1C 94 06 F1 | 	add	arg02, #28
2e24c     0C A8 06 F1 | 	add	local02, #12
2e250     54 97 02 FB | 	rdlong	arg03, local02
2e254     0C A8 86 F1 | 	sub	local02, #12
2e258     58 99 02 F6 | 	mov	arg04, local06
2e25c     44 F9 BF FD | 	call	#_fatfs_cc_gen_numname
2e260     53 93 02 F6 | 	mov	arg01, local01
2e264     E8 FC BF FD | 	call	#_fatfs_cc_dir_find
2e268     3D B3 0A F6 | 	mov	local07, result1 wz
2e26c     01 B0 06 A1 |  if_e	add	local06, #1
2e270     C0 FF 9F AD |  if_e	jmp	#LR__4912
2e274                 | LR__4913
2e274     64 B0 0E F2 | 	cmp	local06, #100 wz
2e278     07 7A 06 A6 |  if_e	mov	result1, #7
2e27c     70 01 90 AD |  if_e	jmp	#LR__4921
2e280     04 B2 0E F2 | 	cmp	local07, #4 wz
2e284     59 7B 02 56 |  if_ne	mov	result1, local07
2e288     64 01 90 5D |  if_ne	jmp	#LR__4921
2e28c     27 CE 05 F1 | 	add	fp, #39
2e290     E7 AA C2 FA | 	rdbyte	local03, fp
2e294     27 CE 85 F1 | 	sub	fp, #39
2e298     2B A6 06 F1 | 	add	local01, #43
2e29c     53 AB 42 FC | 	wrbyte	local03, local01
2e2a0     2B A6 86 F1 | 	sub	local01, #43
2e2a4                 | LR__4914
2e2a4     27 CE 05 F1 | 	add	fp, #39
2e2a8     E7 B2 C2 FA | 	rdbyte	local07, fp
2e2ac     02 B2 CE F7 | 	test	local07, #2 wz
2e2b0     0C AC 06 51 |  if_ne	add	local04, #12
2e2b4     0D AC 16 5D |  if_ne	qdiv	local04, #13
2e2b8     27 CE 85 F1 | 	sub	fp, #39
2e2bc     53 93 02 F6 | 	mov	arg01, local01
2e2c0     18 AA 62 5D |  if_ne	getqx	local03
2e2c4     01 AA 06 51 |  if_ne	add	local03, #1
2e2c8     01 AA 06 A6 |  if_e	mov	local03, #1
2e2cc     55 B5 02 F6 | 	mov	local08, local03
2e2d0     5A 95 02 F6 | 	mov	arg02, local08
2e2d4     04 F5 BF FD | 	call	#_fatfs_cc_dir_alloc
2e2d8     3D B3 0A F6 | 	mov	local07, result1 wz
2e2dc     9C 00 90 5D |  if_ne	jmp	#LR__4918
2e2e0     01 B4 8E F1 | 	sub	local08, #1 wz
2e2e4     94 00 90 AD |  if_e	jmp	#LR__4918
2e2e8     53 93 02 F6 | 	mov	arg01, local01
2e2ec     5A B3 02 F6 | 	mov	local07, local08
2e2f0     05 B2 66 F0 | 	shl	local07, #5
2e2f4     10 A6 06 F1 | 	add	local01, #16
2e2f8     53 95 02 FB | 	rdlong	arg02, local01
2e2fc     10 A6 86 F1 | 	sub	local01, #16
2e300     59 95 82 F1 | 	sub	arg02, local07
2e304     B0 F1 BF FD | 	call	#_fatfs_cc_dir_sdi
2e308     3D B3 0A F6 | 	mov	local07, result1 wz
2e30c     6C 00 90 5D |  if_ne	jmp	#LR__4917
2e310     53 93 02 F6 | 	mov	arg01, local01
2e314     20 92 06 F1 | 	add	arg01, #32
2e318     08 FA BF FD | 	call	#_fatfs_cc_sum_sfn
2e31c     3D B7 02 F6 | 	mov	local09, result1
2e320                 | ' 			sum = sum_sfn(dp->fn);
2e320                 | ' 			do {
2e320                 | LR__4915
2e320     18 A6 06 F1 | 	add	local01, #24
2e324     53 95 02 FB | 	rdlong	arg02, local01
2e328     18 A6 86 F1 | 	sub	local01, #24
2e32c     54 93 02 F6 | 	mov	arg01, local02
2e330     20 E8 BF FD | 	call	#_fatfs_cc_move_window
2e334     3D B3 0A F6 | 	mov	local07, result1 wz
2e338     40 00 90 5D |  if_ne	jmp	#LR__4916
2e33c     0C A8 06 F1 | 	add	local02, #12
2e340     54 93 02 FB | 	rdlong	arg01, local02
2e344     1C A6 06 F1 | 	add	local01, #28
2e348     53 95 02 FB | 	rdlong	arg02, local01
2e34c     1C A6 86 F1 | 	sub	local01, #28
2e350     5B 99 02 F6 | 	mov	arg04, local09
2e354     5A 97 02 F6 | 	mov	arg03, local08
2e358     78 F7 BF FD | 	call	#_fatfs_cc_put_lfn
2e35c     09 A8 86 F1 | 	sub	local02, #9
2e360     54 03 48 FC | 	wrbyte	#1, local02
2e364     03 A8 86 F1 | 	sub	local02, #3
2e368     53 93 02 F6 | 	mov	arg01, local01
2e36c     00 94 06 F6 | 	mov	arg02, #0
2e370     AC F2 BF FD | 	call	#_fatfs_cc_dir_next
2e374     3D B3 0A F6 | 	mov	local07, result1 wz
2e378     E9 B5 6E AB |  if_e	djnz	local08, #LR__4915
2e37c                 | LR__4916
2e37c                 | LR__4917
2e37c                 | LR__4918
2e37c     00 B2 0E F2 | 	cmp	local07, #0 wz
2e380     68 00 90 5D |  if_ne	jmp	#LR__4920
2e384     18 A6 06 F1 | 	add	local01, #24
2e388     53 95 02 FB | 	rdlong	arg02, local01
2e38c     18 A6 86 F1 | 	sub	local01, #24
2e390     54 93 02 F6 | 	mov	arg01, local02
2e394     BC E7 BF FD | 	call	#_fatfs_cc_move_window
2e398     3D B3 0A F6 | 	mov	local07, result1 wz
2e39c     4C 00 90 5D |  if_ne	jmp	#LR__4919
2e3a0     1C A6 06 F1 | 	add	local01, #28
2e3a4     53 93 02 FB | 	rdlong	arg01, local01
2e3a8     00 94 06 F6 | 	mov	arg02, #0
2e3ac     20 96 06 F6 | 	mov	arg03, #32
2e3b0     D8 00 A0 FD | 	call	#\builtin_bytefill_
2e3b4     53 93 02 FB | 	rdlong	arg01, local01
2e3b8     04 A6 06 F1 | 	add	local01, #4
2e3bc     53 95 02 F6 | 	mov	arg02, local01
2e3c0     0B 96 06 F6 | 	mov	arg03, #11
2e3c4     8C 66 BF FD | 	call	#__system____builtin_memmove
2e3c8     04 A6 86 F1 | 	sub	local01, #4
2e3cc     53 AB 02 FB | 	rdlong	local03, local01
2e3d0     0F A6 06 F1 | 	add	local01, #15
2e3d4     53 B7 C2 FA | 	rdbyte	local09, local01
2e3d8     18 B6 06 F5 | 	and	local09, #24
2e3dc     0C AA 06 F1 | 	add	local03, #12
2e3e0     55 B7 42 FC | 	wrbyte	local09, local03
2e3e4     03 A8 06 F1 | 	add	local02, #3
2e3e8     54 03 48 FC | 	wrbyte	#1, local02
2e3ec                 | LR__4919
2e3ec                 | LR__4920
2e3ec                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2e3ec                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2e3ec                 | ' 
2e3ec                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2e3ec                 | ' 
2e3ec                 | ' 			fs->wflag = 1;
2e3ec                 | ' 		}
2e3ec                 | ' 	}
2e3ec                 | ' 
2e3ec                 | ' 	return res;
2e3ec     59 7B 02 F6 | 	mov	result1, local07
2e3f0                 | LR__4921
2e3f0     E7 F0 03 F6 | 	mov	ptra, fp
2e3f4     F2 00 A0 FD | 	call	#popregs_
2e3f8                 | _fatfs_cc_dir_register_ret
2e3f8     2D 00 64 FD | 	ret
2e3fc                 | 
2e3fc                 | _fatfs_cc_dir_remove
2e3fc     05 CA 05 F6 | 	mov	COUNT_, #5
2e400     E8 00 A0 FD | 	call	#pushregs_
2e404     49 A7 02 F6 | 	mov	local01, arg01
2e408     53 A9 02 FB | 	rdlong	local02, local01
2e40c     10 A6 06 F1 | 	add	local01, #16
2e410     53 AB 02 FB | 	rdlong	local03, local01
2e414     1C A6 06 F1 | 	add	local01, #28
2e418     53 95 02 FB | 	rdlong	arg02, local01
2e41c     2C A6 86 F1 | 	sub	local01, #44
2e420     FF FF 7F FF 
2e424     FF 95 0E F2 | 	cmp	arg02, ##-1 wz
2e428     00 AC 06 A6 |  if_e	mov	local04, #0
2e42c     18 00 90 AD |  if_e	jmp	#LR__4930
2e430     53 93 02 F6 | 	mov	arg01, local01
2e434     2C A6 06 F1 | 	add	local01, #44
2e438     53 95 02 FB | 	rdlong	arg02, local01
2e43c     2C A6 86 F1 | 	sub	local01, #44
2e440     74 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2e444     3D AD 02 F6 | 	mov	local04, result1
2e448                 | LR__4930
2e448     56 AF 0A F6 | 	mov	local05, local04 wz
2e44c     64 00 90 5D |  if_ne	jmp	#LR__4933
2e450                 | ' 		do {
2e450                 | LR__4931
2e450     18 A6 06 F1 | 	add	local01, #24
2e454     53 95 02 FB | 	rdlong	arg02, local01
2e458     18 A6 86 F1 | 	sub	local01, #24
2e45c     54 93 02 F6 | 	mov	arg01, local02
2e460     F0 E6 BF FD | 	call	#_fatfs_cc_move_window
2e464     3D AF 0A F6 | 	mov	local05, result1 wz
2e468     40 00 90 5D |  if_ne	jmp	#LR__4932
2e46c     1C A6 06 F1 | 	add	local01, #28
2e470     53 AD 02 FB | 	rdlong	local04, local01
2e474     56 CB 49 FC | 	wrbyte	#229, local04
2e478     03 A8 06 F1 | 	add	local02, #3
2e47c     54 03 48 FC | 	wrbyte	#1, local02
2e480     03 A8 86 F1 | 	sub	local02, #3
2e484     0C A6 86 F1 | 	sub	local01, #12
2e488     53 AD 02 FB | 	rdlong	local04, local01
2e48c     10 A6 86 F1 | 	sub	local01, #16
2e490     55 AD 12 F2 | 	cmp	local04, local03 wc
2e494     14 00 90 3D |  if_ae	jmp	#LR__4932
2e498     53 93 02 F6 | 	mov	arg01, local01
2e49c     00 94 06 F6 | 	mov	arg02, #0
2e4a0     7C F1 BF FD | 	call	#_fatfs_cc_dir_next
2e4a4     3D AF 0A F6 | 	mov	local05, result1 wz
2e4a8     A4 FF 9F AD |  if_e	jmp	#LR__4931
2e4ac                 | LR__4932
2e4ac     04 AE 0E F2 | 	cmp	local05, #4 wz
2e4b0     02 AE 06 A6 |  if_e	mov	local05, #2
2e4b4                 | LR__4933
2e4b4                 | ' 	}
2e4b4                 | ' #line 2590 "ff.c"
2e4b4                 | ' 	return res;
2e4b4     57 7B 02 F6 | 	mov	result1, local05
2e4b8     E7 F0 03 F6 | 	mov	ptra, fp
2e4bc     F2 00 A0 FD | 	call	#popregs_
2e4c0                 | _fatfs_cc_dir_remove_ret
2e4c0     2D 00 64 FD | 	ret
2e4c4                 | 
2e4c4                 | _fatfs_cc_get_fileinfo
2e4c4     0C CA 05 F6 | 	mov	COUNT_, #12
2e4c8     E8 00 A0 FD | 	call	#pushregs_
2e4cc     49 A7 02 F6 | 	mov	local01, arg01
2e4d0     4A A9 02 F6 | 	mov	local02, arg02
2e4d4     53 AB 02 FB | 	rdlong	local03, local01
2e4d8     1C A8 06 F1 | 	add	local02, #28
2e4dc     54 01 48 FC | 	wrbyte	#0, local02
2e4e0     1C A8 86 F1 | 	sub	local02, #28
2e4e4     18 A6 06 F1 | 	add	local01, #24
2e4e8     53 AD 0A FB | 	rdlong	local04, local01 wz
2e4ec     18 A6 86 F1 | 	sub	local01, #24
2e4f0     90 03 90 AD |  if_e	jmp	#LR__4954
2e4f4     2C A6 06 F1 | 	add	local01, #44
2e4f8     53 AD 02 FB | 	rdlong	local04, local01
2e4fc     2C A6 86 F1 | 	sub	local01, #44
2e500     FF FF 7F FF 
2e504     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2e508     D8 00 90 AD |  if_e	jmp	#LR__4943
2e50c     00 AE 06 F6 | 	mov	local05, #0
2e510     00 B0 06 F6 | 	mov	local06, #0
2e514     00 B2 06 F6 | 	mov	local07, #0
2e518                 | ' 			si = di = 0;
2e518                 | ' 			hs = 0;
2e518                 | ' 			while (fs->lfnbuf[si] != 0) {
2e518                 | LR__4940
2e518     0C AA 06 F1 | 	add	local03, #12
2e51c     55 AD 02 FB | 	rdlong	local04, local03
2e520     0C AA 86 F1 | 	sub	local03, #12
2e524     58 B5 02 F6 | 	mov	local08, local06
2e528     01 B4 66 F0 | 	shl	local08, #1
2e52c     56 B5 02 F1 | 	add	local08, local04
2e530     5A AD EA FA | 	rdword	local04, local08 wz
2e534     90 00 90 AD |  if_e	jmp	#LR__4942
2e538     0C AA 06 F1 | 	add	local03, #12
2e53c     55 B7 02 FB | 	rdlong	local09, local03
2e540     0C AA 86 F1 | 	sub	local03, #12
2e544     58 AD 02 F6 | 	mov	local04, local06
2e548     01 AC 66 F0 | 	shl	local04, #1
2e54c     5B AD 02 F1 | 	add	local04, local09
2e550     56 B9 E2 FA | 	rdword	local10, local04
2e554     59 AD 02 F6 | 	mov	local04, local07
2e558     0F AC 4E F7 | 	zerox	local04, #15 wz
2e55c     01 B0 06 F1 | 	add	local06, #1
2e560     24 00 90 5D |  if_ne	jmp	#LR__4941
2e564     5C AD 32 F9 | 	getword	local04, local10, #0
2e568     6C 00 00 FF 
2e56c     00 AC 16 F2 | 	cmp	local04, ##55296 wc
2e570     14 00 90 CD |  if_b	jmp	#LR__4941
2e574     5C BB 32 F9 | 	getword	local11, local10, #0
2e578     70 00 00 FF 
2e57c     00 BA 16 F2 | 	cmp	local11, ##57344 wc
2e580     5C B3 02 C6 |  if_b	mov	local07, local10
2e584                 | ' 					hs = wc; continue;
2e584     90 FF 9F CD |  if_b	jmp	#LR__4940
2e588                 | LR__4941
2e588     59 93 32 F9 | 	getword	arg01, local07, #0
2e58c     10 92 66 F0 | 	shl	arg01, #16
2e590     5C B9 32 F9 | 	getword	local10, local10, #0
2e594     5C 93 42 F5 | 	or	arg01, local10
2e598     57 95 02 F6 | 	mov	arg02, local05
2e59c     54 B9 02 F6 | 	mov	local10, local02
2e5a0     1C B8 06 F1 | 	add	local10, #28
2e5a4     5C 95 02 F1 | 	add	arg02, local10
2e5a8     FF 96 06 F6 | 	mov	arg03, #255
2e5ac     57 97 82 F1 | 	sub	arg03, local05
2e5b0     28 E3 BF FD | 	call	#_fatfs_cc_put_utf
2e5b4     3D B9 0A F6 | 	mov	local10, result1 wz
2e5b8     00 AE 06 A6 |  if_e	mov	local05, #0
2e5bc     5C AF 02 51 |  if_ne	add	local05, local10
2e5c0     00 B2 06 56 |  if_ne	mov	local07, #0
2e5c4     50 FF 9F 5D |  if_ne	jmp	#LR__4940
2e5c8                 | LR__4942
2e5c8     59 AD 02 F6 | 	mov	local04, local07
2e5cc     0F AC 4E F7 | 	zerox	local04, #15 wz
2e5d0     00 AE 06 56 |  if_ne	mov	local05, #0
2e5d4     54 B9 02 F6 | 	mov	local10, local02
2e5d8     1C B8 06 F1 | 	add	local10, #28
2e5dc     5C AF 02 F1 | 	add	local05, local10
2e5e0     57 01 48 FC | 	wrbyte	#0, local05
2e5e4                 | LR__4943
2e5e4     00 AE 06 F6 | 	mov	local05, #0
2e5e8     00 B0 06 F6 | 	mov	local06, #0
2e5ec                 | ' 			fno->fname[di] = 0;
2e5ec                 | ' 		}
2e5ec                 | ' 	}
2e5ec                 | ' 
2e5ec                 | ' 	si = di = 0;
2e5ec                 | ' 	while (si < 11) {
2e5ec                 | LR__4944
2e5ec     0B B0 16 F2 | 	cmp	local06, #11 wc
2e5f0     20 01 90 3D |  if_ae	jmp	#LR__4947
2e5f4     1C A6 06 F1 | 	add	local01, #28
2e5f8     53 B7 02 FB | 	rdlong	local09, local01
2e5fc     1C A6 86 F1 | 	sub	local01, #28
2e600     58 B9 02 F6 | 	mov	local10, local06
2e604     5B B9 02 F1 | 	add	local10, local09
2e608     5C B9 C2 FA | 	rdbyte	local10, local10
2e60c     5C AD 32 F9 | 	getword	local04, local10, #0
2e610     20 AC 0E F2 | 	cmp	local04, #32 wz
2e614     01 B0 06 F1 | 	add	local06, #1
2e618     D0 FF 9F AD |  if_e	jmp	#LR__4944
2e61c     5C AD 32 F9 | 	getword	local04, local10, #0
2e620     05 AC 0E F2 | 	cmp	local04, #5 wz
2e624     E5 B8 06 A6 |  if_e	mov	local10, #229
2e628     09 B0 0E F2 | 	cmp	local06, #9 wz
2e62c     20 00 90 5D |  if_ne	jmp	#LR__4945
2e630     0C AE 16 F2 | 	cmp	local05, #12 wc
2e634     18 00 90 3D |  if_ae	jmp	#LR__4945
2e638     57 BB 02 F6 | 	mov	local11, local05
2e63c     54 B5 02 F6 | 	mov	local08, local02
2e640     0C B4 06 F1 | 	add	local08, #12
2e644     5A BB 02 F1 | 	add	local11, local08
2e648     5D 5D 48 FC | 	wrbyte	#46, local11
2e64c     01 AE 06 F1 | 	add	local05, #1
2e650                 | LR__4945
2e650     5C 93 32 F9 | 	getword	arg01, local10, #0
2e654     07 92 4E F7 | 	zerox	arg01, #7 wz
2e658     00 7A 06 56 |  if_ne	mov	result1, #0
2e65c                 | ' 
2e65c                 | ' 	return 0;
2e65c     00 7A 06 A6 |  if_e	mov	result1, #0
2e660     00 7A 0E F2 | 	cmp	result1, #0 wz
2e664     08 B0 0E 52 |  if_ne	cmp	local06, #8 wz
2e668     0B B0 0E 52 |  if_ne	cmp	local06, #11 wz
2e66c     50 00 90 AD |  if_e	jmp	#LR__4946
2e670     1C A6 06 F1 | 	add	local01, #28
2e674     53 BB 02 FB | 	rdlong	local11, local01
2e678     1C A6 86 F1 | 	sub	local01, #28
2e67c     58 B5 02 F6 | 	mov	local08, local06
2e680     5D B5 02 F1 | 	add	local08, local11
2e684     5A 93 CA FA | 	rdbyte	arg01, local08 wz
2e688     00 7A 06 56 |  if_ne	mov	result1, #0
2e68c                 | ' 
2e68c                 | ' 	return 0;
2e68c     00 7A 06 A6 |  if_e	mov	result1, #0
2e690     00 7A 0E F2 | 	cmp	result1, #0 wz
2e694     28 00 90 AD |  if_e	jmp	#LR__4946
2e698     5C B9 32 F9 | 	getword	local10, local10, #0
2e69c     08 B8 66 F0 | 	shl	local10, #8
2e6a0     1C A6 06 F1 | 	add	local01, #28
2e6a4     53 BB 02 FB | 	rdlong	local11, local01
2e6a8     1C A6 86 F1 | 	sub	local01, #28
2e6ac     58 B7 02 F6 | 	mov	local09, local06
2e6b0     5D B7 02 F1 | 	add	local09, local11
2e6b4     5B BB C2 FA | 	rdbyte	local11, local09
2e6b8     5D B9 42 F5 | 	or	local10, local11
2e6bc     01 B0 06 F1 | 	add	local06, #1
2e6c0                 | LR__4946
2e6c0     5C 93 02 F6 | 	mov	arg01, local10
2e6c4     01 00 00 FF 
2e6c8     52 95 06 F6 | 	mov	arg02, ##850
2e6cc     24 D7 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2e6d0     3D B9 02 F6 | 	mov	local10, result1
2e6d4     5C AD 02 F6 | 	mov	local04, local10
2e6d8     0F AC 4E F7 | 	zerox	local04, #15 wz
2e6dc     00 AE 06 A6 |  if_e	mov	local05, #0
2e6e0     30 00 90 AD |  if_e	jmp	#LR__4947
2e6e4     5C 93 32 F9 | 	getword	arg01, local10, #0
2e6e8     57 95 02 F6 | 	mov	arg02, local05
2e6ec     54 BB 02 F6 | 	mov	local11, local02
2e6f0     0C BA 06 F1 | 	add	local11, #12
2e6f4     5D 95 02 F1 | 	add	arg02, local11
2e6f8     0C 96 06 F6 | 	mov	arg03, #12
2e6fc     57 97 82 F1 | 	sub	arg03, local05
2e700     D8 E1 BF FD | 	call	#_fatfs_cc_put_utf
2e704     3D BB 0A F6 | 	mov	local11, result1 wz
2e708     00 AE 06 A6 |  if_e	mov	local05, #0
2e70c     5D AF 02 51 |  if_ne	add	local05, local11
2e710     D8 FE 9F 5D |  if_ne	jmp	#LR__4944
2e714                 | LR__4947
2e714     57 AD 02 F6 | 	mov	local04, local05
2e718     0C A8 06 F1 | 	add	local02, #12
2e71c     54 AD 02 F1 | 	add	local04, local02
2e720     56 01 48 FC | 	wrbyte	#0, local04
2e724     10 A8 06 F1 | 	add	local02, #16
2e728     54 AD CA FA | 	rdbyte	local04, local02 wz
2e72c     1C A8 86 F1 | 	sub	local02, #28
2e730     F8 00 90 5D |  if_ne	jmp	#LR__4953
2e734     00 AE 0E F2 | 	cmp	local05, #0 wz
2e738     1C 00 90 5D |  if_ne	jmp	#LR__4948
2e73c     57 BB 02 F6 | 	mov	local11, local05
2e740     54 B9 02 F6 | 	mov	local10, local02
2e744     1C B8 06 F1 | 	add	local10, #28
2e748     5C BB 02 F1 | 	add	local11, local10
2e74c     5D 7F 48 FC | 	wrbyte	#63, local11
2e750     01 AE 06 F1 | 	add	local05, #1
2e754     A4 00 90 FD | 	jmp	#LR__4952
2e758                 | LR__4948
2e758                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2e758     00 AE 06 F6 | 	mov	local05, #0
2e75c     00 B0 06 F6 | 	mov	local06, #0
2e760     08 BC 06 F6 | 	mov	local12, #8
2e764                 | LR__4949
2e764     58 AD 02 F6 | 	mov	local04, local06
2e768     54 BB 02 F6 | 	mov	local11, local02
2e76c     0C BA 06 F1 | 	add	local11, #12
2e770     5D AD 02 F1 | 	add	local04, local11
2e774     56 BB CA FA | 	rdbyte	local11, local04 wz
2e778     80 00 90 AD |  if_e	jmp	#LR__4951
2e77c     58 B5 02 F6 | 	mov	local08, local06
2e780     54 BB 02 F6 | 	mov	local11, local02
2e784     0C BA 06 F1 | 	add	local11, #12
2e788     5D B5 02 F1 | 	add	local08, local11
2e78c     5A B9 C2 FA | 	rdbyte	local10, local08
2e790     5C BB 32 F9 | 	getword	local11, local10, #0
2e794     2E BA 0E F2 | 	cmp	local11, #46 wz
2e798     10 BC 06 A6 |  if_e	mov	local12, #16
2e79c     5C BB 32 F9 | 	getword	local11, local10, #0
2e7a0     41 BA 16 F2 | 	cmp	local11, #65 wc
2e7a4     30 00 90 CD |  if_b	jmp	#LR__4950
2e7a8     5C B5 32 F9 | 	getword	local08, local10, #0
2e7ac     5B B4 16 F2 | 	cmp	local08, #91 wc
2e7b0     24 00 90 3D |  if_ae	jmp	#LR__4950
2e7b4     1C A6 06 F1 | 	add	local01, #28
2e7b8     53 B7 02 FB | 	rdlong	local09, local01
2e7bc     1C A6 86 F1 | 	sub	local01, #28
2e7c0     0C B6 06 F1 | 	add	local09, #12
2e7c4     5B B7 C2 FA | 	rdbyte	local09, local09
2e7c8     5E BB E2 F8 | 	getbyte	local11, local12, #0
2e7cc     5D B7 CA F7 | 	test	local09, local11 wz
2e7d0     5C B9 32 59 |  if_ne	getword	local10, local10, #0
2e7d4     20 B8 06 51 |  if_ne	add	local10, #32
2e7d8                 | LR__4950
2e7d8     57 BB 02 F6 | 	mov	local11, local05
2e7dc     54 B5 02 F6 | 	mov	local08, local02
2e7e0     1C B4 06 F1 | 	add	local08, #28
2e7e4     5A BB 02 F1 | 	add	local11, local08
2e7e8     5C B9 32 F9 | 	getword	local10, local10, #0
2e7ec     5D B9 42 FC | 	wrbyte	local10, local11
2e7f0     01 B0 06 F1 | 	add	local06, #1
2e7f4     01 AE 06 F1 | 	add	local05, #1
2e7f8     68 FF 9F FD | 	jmp	#LR__4949
2e7fc                 | LR__4951
2e7fc                 | LR__4952
2e7fc     54 BD 02 F6 | 	mov	local12, local02
2e800     1C BC 06 F1 | 	add	local12, #28
2e804     5E AF 02 F1 | 	add	local05, local12
2e808     57 01 48 FC | 	wrbyte	#0, local05
2e80c     1C A6 06 F1 | 	add	local01, #28
2e810     53 AD 02 FB | 	rdlong	local04, local01
2e814     1C A6 86 F1 | 	sub	local01, #28
2e818     0C AC 06 F1 | 	add	local04, #12
2e81c     56 BB CA FA | 	rdbyte	local11, local04 wz
2e820     0C A8 06 A1 |  if_e	add	local02, #12
2e824     54 01 48 AC |  if_e	wrbyte	#0, local02
2e828     0C A8 86 A1 |  if_e	sub	local02, #12
2e82c                 | LR__4953
2e82c     1C A6 06 F1 | 	add	local01, #28
2e830     53 BD 02 FB | 	rdlong	local12, local01
2e834     0B BC 06 F1 | 	add	local12, #11
2e838     5E AD C2 FA | 	rdbyte	local04, local12
2e83c     3F AC 06 F5 | 	and	local04, #63
2e840     08 A8 06 F1 | 	add	local02, #8
2e844     54 AD 42 FC | 	wrbyte	local04, local02
2e848     08 A8 86 F1 | 	sub	local02, #8
2e84c     53 93 02 FB | 	rdlong	arg01, local01
2e850     1C 92 06 F1 | 	add	arg01, #28
2e854                 | ' {
2e854                 | ' 
2e854                 | ' 	return *((DWORD*)ptr);
2e854     49 7B 02 FB | 	rdlong	result1, arg01
2e858     54 7B 62 FC | 	wrlong	result1, local02
2e85c     53 93 02 FB | 	rdlong	arg01, local01
2e860     16 92 06 F1 | 	add	arg01, #22
2e864                 | ' {
2e864                 | ' 
2e864                 | ' 	return *((WORD*)ptr);
2e864     49 7B E2 FA | 	rdword	result1, arg01
2e868     06 A8 06 F1 | 	add	local02, #6
2e86c     54 7B 52 FC | 	wrword	result1, local02
2e870     53 93 02 FB | 	rdlong	arg01, local01
2e874     18 92 06 F1 | 	add	arg01, #24
2e878                 | ' {
2e878                 | ' 
2e878                 | ' 	return *((WORD*)ptr);
2e878     49 7B E2 FA | 	rdword	result1, arg01
2e87c     02 A8 86 F1 | 	sub	local02, #2
2e880     54 7B 52 FC | 	wrword	result1, local02
2e884                 | LR__4954
2e884     E7 F0 03 F6 | 	mov	ptra, fp
2e888     F2 00 A0 FD | 	call	#popregs_
2e88c                 | _fatfs_cc_get_fileinfo_ret
2e88c     2D 00 64 FD | 	ret
2e890                 | 
2e890                 | _fatfs_cc_create_name
2e890     12 CA 05 F6 | 	mov	COUNT_, #18
2e894     E8 00 A0 FD | 	call	#pushregs_
2e898     34 F0 07 F1 | 	add	ptra, #52
2e89c     49 A7 02 F6 | 	mov	local01, arg01
2e8a0     4A A9 02 F6 | 	mov	local02, arg02
2e8a4     54 7B 02 FB | 	rdlong	result1, local02
2e8a8     30 CE 05 F1 | 	add	fp, #48
2e8ac     E7 7A 62 FC | 	wrlong	result1, fp
2e8b0     30 CE 85 F1 | 	sub	fp, #48
2e8b4     53 AB 02 FB | 	rdlong	local03, local01
2e8b8     0C AA 06 F1 | 	add	local03, #12
2e8bc     55 AD 02 FB | 	rdlong	local04, local03
2e8c0     00 AE 06 F6 | 	mov	local05, #0
2e8c4                 | ' 
2e8c4                 | ' 
2e8c4                 | ' 
2e8c4                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2e8c4                 | ' 	for (;;) {
2e8c4                 | LR__4960
2e8c4     E7 92 02 F6 | 	mov	arg01, fp
2e8c8     30 92 06 F1 | 	add	arg01, #48
2e8cc     FC DE BF FD | 	call	#_fatfs_cc_tchar2uni
2e8d0     3D B1 02 F6 | 	mov	local06, result1
2e8d4     FF FF 7F FF 
2e8d8     FF B1 0E F2 | 	cmp	local06, ##-1 wz
2e8dc     06 7A 06 A6 |  if_e	mov	result1, #6
2e8e0     84 04 90 AD |  if_e	jmp	#LR__4994
2e8e4     80 00 00 FF 
2e8e8     00 B0 16 F2 | 	cmp	local06, ##65536 wc
2e8ec     20 00 90 CD |  if_b	jmp	#LR__4961
2e8f0     57 AB 02 F6 | 	mov	local03, local05
2e8f4     01 AA 66 F0 | 	shl	local03, #1
2e8f8     56 B3 02 F6 | 	mov	local07, local04
2e8fc     56 AB 02 F1 | 	add	local03, local04
2e900     58 B5 02 F6 | 	mov	local08, local06
2e904     10 B4 46 F0 | 	shr	local08, #16
2e908     55 B5 52 FC | 	wrword	local08, local03
2e90c     01 AE 06 F1 | 	add	local05, #1
2e910                 | LR__4961
2e910     58 B7 02 F6 | 	mov	local09, local06
2e914     5B AB 32 F9 | 	getword	local03, local09, #0
2e918     20 AA 16 F2 | 	cmp	local03, #32 wc
2e91c     68 00 90 CD |  if_b	jmp	#LR__4963
2e920     5B B9 32 F9 | 	getword	local10, local09, #0
2e924     2F B8 0E F2 | 	cmp	local10, #47 wz
2e928     5B AB 02 56 |  if_ne	mov	local03, local09
2e92c     55 AB 32 59 |  if_ne	getword	local03, local03, #0
2e930     5C AA 0E 52 |  if_ne	cmp	local03, #92 wz
2e934     50 00 90 AD |  if_e	jmp	#LR__4963
2e938     5B AB 32 F9 | 	getword	local03, local09, #0
2e93c     80 AA 16 F2 | 	cmp	local03, #128 wc
2e940     1C 00 90 3D |  if_ae	jmp	#LR__4962
2e944     93 01 00 FF 
2e948     F3 92 06 F6 | 	mov	arg01, ##@LR__5483
2e94c     5B 95 32 F9 | 	getword	arg02, local09, #0
2e950     80 D7 BF FD | 	call	#_fatfs_cc_strchr
2e954     3D B9 0A F6 | 	mov	local10, result1 wz
2e958     06 7A 06 56 |  if_ne	mov	result1, #6
2e95c     08 04 90 5D |  if_ne	jmp	#LR__4994
2e960                 | LR__4962
2e960     FF AE 16 F2 | 	cmp	local05, #255 wc
2e964     06 7A 06 36 |  if_ae	mov	result1, #6
2e968     FC 03 90 3D |  if_ae	jmp	#LR__4994
2e96c     57 B1 02 F6 | 	mov	local06, local05
2e970     01 B0 66 F0 | 	shl	local06, #1
2e974     56 B3 02 F6 | 	mov	local07, local04
2e978     56 B1 02 F1 | 	add	local06, local04
2e97c     58 B7 52 FC | 	wrword	local09, local06
2e980     01 AE 06 F1 | 	add	local05, #1
2e984     3C FF 9F FD | 	jmp	#LR__4960
2e988                 | LR__4963
2e988     5B AB 32 F9 | 	getword	local03, local09, #0
2e98c     20 AA 16 F2 | 	cmp	local03, #32 wc
2e990     04 BA 06 C6 |  if_b	mov	local11, #4
2e994     68 00 90 CD |  if_b	jmp	#LR__4968
2e998     D7 24 48 FB | 	callpa	#(@LR__4966-@LR__4964)>>2,fcache_load_ptr_
2e99c                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2e99c                 | LR__4964
2e99c     30 CE 05 F1 | 	add	fp, #48
2e9a0     E7 B8 02 FB | 	rdlong	local10, fp
2e9a4     30 CE 85 F1 | 	sub	fp, #48
2e9a8     5C AB C2 FA | 	rdbyte	local03, local10
2e9ac     2F AA 0E F2 | 	cmp	local03, #47 wz
2e9b0     18 00 90 AD |  if_e	jmp	#LR__4965
2e9b4     30 CE 05 F1 | 	add	fp, #48
2e9b8     E7 B4 02 FB | 	rdlong	local08, fp
2e9bc     30 CE 85 F1 | 	sub	fp, #48
2e9c0     5A BB C2 FA | 	rdbyte	local11, local08
2e9c4     5C BA 0E F2 | 	cmp	local11, #92 wz
2e9c8     18 00 90 5D |  if_ne	jmp	#LR__4967
2e9cc                 | LR__4965
2e9cc     30 CE 05 F1 | 	add	fp, #48
2e9d0     E7 BA 02 FB | 	rdlong	local11, fp
2e9d4     01 BA 06 F1 | 	add	local11, #1
2e9d8     E7 BA 62 FC | 	wrlong	local11, fp
2e9dc     30 CE 85 F1 | 	sub	fp, #48
2e9e0     B8 FF 9F FD | 	jmp	#LR__4964
2e9e4                 | LR__4966
2e9e4                 | LR__4967
2e9e4     00 BA 06 F6 | 	mov	local11, #0
2e9e8     30 CE 05 F1 | 	add	fp, #48
2e9ec     E7 B8 02 FB | 	rdlong	local10, fp
2e9f0     30 CE 85 F1 | 	sub	fp, #48
2e9f4     5C AB C2 FA | 	rdbyte	local03, local10
2e9f8     20 AA 16 F2 | 	cmp	local03, #32 wc
2e9fc     04 BA 06 C6 |  if_b	mov	local11, #4
2ea00                 | LR__4968
2ea00     30 CE 05 F1 | 	add	fp, #48
2ea04     E7 AA 02 FB | 	rdlong	local03, fp
2ea08     30 CE 85 F1 | 	sub	fp, #48
2ea0c     54 AB 62 FC | 	wrlong	local03, local02
2ea10                 | ' 	}
2ea10                 | ' 	*path = p;
2ea10                 | ' #line 2862 "ff.c"
2ea10                 | ' 	while (di) {
2ea10     00 AE 0E F2 | 	cmp	local05, #0 wz
2ea14     30 00 90 AD |  if_e	jmp	#LR__4971
2ea18     D7 16 48 FB | 	callpa	#(@LR__4970-@LR__4969)>>2,fcache_load_ptr_
2ea1c                 | LR__4969
2ea1c     57 B7 02 F6 | 	mov	local09, local05
2ea20     01 B6 86 F1 | 	sub	local09, #1
2ea24     01 B6 66 F0 | 	shl	local09, #1
2ea28     56 B7 02 F1 | 	add	local09, local04
2ea2c     5B B7 E2 FA | 	rdword	local09, local09
2ea30     5B AB 32 F9 | 	getword	local03, local09, #0
2ea34     20 AA 0E F2 | 	cmp	local03, #32 wz
2ea38     5B B9 02 56 |  if_ne	mov	local10, local09
2ea3c     5C B9 32 59 |  if_ne	getword	local10, local10, #0
2ea40     2E B8 0E 52 |  if_ne	cmp	local10, #46 wz
2ea44     F5 AF 6E AB |  if_e	djnz	local05, #LR__4969
2ea48                 | LR__4970
2ea48                 | LR__4971
2ea48     57 B9 02 F6 | 	mov	local10, local05
2ea4c     01 B8 66 F0 | 	shl	local10, #1
2ea50     56 B9 02 F1 | 	add	local10, local04
2ea54     5C 01 58 FC | 	wrword	#0, local10
2ea58     00 AE 0E F2 | 	cmp	local05, #0 wz
2ea5c     06 7A 06 A6 |  if_e	mov	result1, #6
2ea60     04 03 90 AD |  if_e	jmp	#LR__4994
2ea64                 | ' 
2ea64                 | ' 
2ea64                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2ea64     00 BC 06 F6 | 	mov	local12, #0
2ea68     D7 12 48 FB | 	callpa	#(@LR__4973-@LR__4972)>>2,fcache_load_ptr_
2ea6c                 | LR__4972
2ea6c     5E B7 02 F6 | 	mov	local09, local12
2ea70     01 B6 66 F0 | 	shl	local09, #1
2ea74     56 B7 02 F1 | 	add	local09, local04
2ea78     5B AB E2 FA | 	rdword	local03, local09
2ea7c     20 AA 0E F2 | 	cmp	local03, #32 wz
2ea80     5E B5 02 A6 |  if_e	mov	local08, local12
2ea84     01 B4 06 A1 |  if_e	add	local08, #1
2ea88     5A BD 02 A6 |  if_e	mov	local12, local08
2ea8c     DC FF 9F AD |  if_e	jmp	#LR__4972
2ea90                 | LR__4973
2ea90     01 BC 16 F2 | 	cmp	local12, #1 wc
2ea94     18 00 90 3D |  if_ae	jmp	#LR__4974
2ea98     5E B7 02 F6 | 	mov	local09, local12
2ea9c     01 B6 66 F0 | 	shl	local09, #1
2eaa0     56 B7 02 F1 | 	add	local09, local04
2eaa4     5B AB E2 FA | 	rdword	local03, local09
2eaa8     2E AA 0E F2 | 	cmp	local03, #46 wz
2eaac     08 00 90 5D |  if_ne	jmp	#LR__4975
2eab0                 | LR__4974
2eab0     5D BB E2 F8 | 	getbyte	local11, local11, #0
2eab4     03 BA 46 F5 | 	or	local11, #3
2eab8                 | LR__4975
2eab8     D7 14 48 FB | 	callpa	#(@LR__4977-@LR__4976)>>2,fcache_load_ptr_
2eabc                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2eabc                 | LR__4976
2eabc     01 AE 16 F2 | 	cmp	local05, #1 wc
2eac0     20 00 90 CD |  if_b	jmp	#LR__4978
2eac4     57 B7 02 F6 | 	mov	local09, local05
2eac8     01 B6 86 F1 | 	sub	local09, #1
2eacc     01 B6 66 F0 | 	shl	local09, #1
2ead0     56 B7 02 F1 | 	add	local09, local04
2ead4     5B AB E2 FA | 	rdword	local03, local09
2ead8     2E AA 0E F2 | 	cmp	local03, #46 wz
2eadc     01 AE 86 51 |  if_ne	sub	local05, #1
2eae0     D8 FF 9F 5D |  if_ne	jmp	#LR__4976
2eae4                 | LR__4977
2eae4                 | LR__4978
2eae4     53 93 02 F6 | 	mov	arg01, local01
2eae8     20 92 06 F1 | 	add	arg01, #32
2eaec     20 94 06 F6 | 	mov	arg02, #32
2eaf0     0B 96 06 F6 | 	mov	arg03, #11
2eaf4     49 BF 02 F6 | 	mov	local13, arg01
2eaf8     D8 00 A0 FD | 	call	#\builtin_bytefill_
2eafc     5F 7B 02 F6 | 	mov	result1, local13
2eb00     00 C0 06 F6 | 	mov	local14, #0
2eb04     00 C2 06 F6 | 	mov	local15, #0
2eb08     08 C4 06 F6 | 	mov	local16, #8
2eb0c                 | ' 
2eb0c                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2eb0c                 | ' 	i = b = 0; ni = 8;
2eb0c                 | ' 	for (;;) {
2eb0c                 | LR__4979
2eb0c     5E C7 02 F6 | 	mov	local17, local12
2eb10     63 C9 02 F6 | 	mov	local18, local17
2eb14     01 C8 66 F0 | 	shl	local18, #1
2eb18     56 B3 02 F6 | 	mov	local07, local04
2eb1c     56 C9 02 F1 | 	add	local18, local04
2eb20     64 B7 E2 FA | 	rdword	local09, local18
2eb24     5B AB 02 F6 | 	mov	local03, local09
2eb28     0F AA 4E F7 | 	zerox	local03, #15 wz
2eb2c     01 BC 06 F1 | 	add	local12, #1
2eb30     B0 01 90 AD |  if_e	jmp	#LR__4992
2eb34     5B AB 32 F9 | 	getword	local03, local09, #0
2eb38     20 AA 0E F2 | 	cmp	local03, #32 wz
2eb3c     14 00 90 AD |  if_e	jmp	#LR__4980
2eb40     5B B9 32 F9 | 	getword	local10, local09, #0
2eb44     2E B8 0E F2 | 	cmp	local10, #46 wz
2eb48     14 00 90 5D |  if_ne	jmp	#LR__4981
2eb4c     57 BD 0A F2 | 	cmp	local12, local05 wz
2eb50     0C 00 90 AD |  if_e	jmp	#LR__4981
2eb54                 | LR__4980
2eb54     5D BB E2 F8 | 	getbyte	local11, local11, #0
2eb58     03 BA 46 F5 | 	or	local11, #3
2eb5c                 | ' 			cf |=  0x01  |  0x02 ;
2eb5c                 | ' 			continue;
2eb5c     AC FF 9F FD | 	jmp	#LR__4979
2eb60                 | LR__4981
2eb60     62 C3 12 F2 | 	cmp	local15, local16 wc
2eb64     57 BD 0A C2 |  if_b	cmp	local12, local05 wz
2eb68     3C 00 90 4D |  if_c_and_nz	jmp	#LR__4982
2eb6c     0B C4 0E F2 | 	cmp	local16, #11 wz
2eb70     5D BB E2 A8 |  if_e	getbyte	local11, local11, #0
2eb74     03 BA 46 A5 |  if_e	or	local11, #3
2eb78                 | ' 				cf |=  0x01  |  0x02 ;
2eb78                 | ' 				break;
2eb78     68 01 90 AD |  if_e	jmp	#LR__4992
2eb7c     57 BD 0A F2 | 	cmp	local12, local05 wz
2eb80     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2eb84     03 BA 46 55 |  if_ne	or	local11, #3
2eb88     57 BD 1A F2 | 	cmp	local12, local05 wcz
2eb8c     54 01 90 1D |  if_a	jmp	#LR__4992
2eb90     57 BD 02 F6 | 	mov	local12, local05
2eb94     08 C2 06 F6 | 	mov	local15, #8
2eb98     0B C4 06 F6 | 	mov	local16, #11
2eb9c     60 C1 E2 F8 | 	getbyte	local14, local14, #0
2eba0     02 C0 66 F0 | 	shl	local14, #2
2eba4                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2eba4                 | ' 			continue;
2eba4     64 FF 9F FD | 	jmp	#LR__4979
2eba8                 | LR__4982
2eba8     5B AB 32 F9 | 	getword	local03, local09, #0
2ebac     80 AA 16 F2 | 	cmp	local03, #128 wc
2ebb0     50 00 90 CD |  if_b	jmp	#LR__4984
2ebb4     5D BB E2 F8 | 	getbyte	local11, local11, #0
2ebb8     02 BA 46 F5 | 	or	local11, #2
2ebbc     5B 93 32 F9 | 	getword	arg01, local09, #0
2ebc0     01 00 00 FF 
2ebc4     52 B9 06 F6 | 	mov	local10, ##850
2ebc8     01 00 00 FF 
2ebcc     52 95 06 F6 | 	mov	arg02, ##850
2ebd0     B0 D1 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2ebd4     3D B7 02 F6 | 	mov	local09, result1
2ebd8     5B AB 32 F9 | 	getword	local03, local09, #0
2ebdc     80 AA CE F7 | 	test	local03, #128 wz
2ebe0     20 00 90 AD |  if_e	jmp	#LR__4983
2ebe4     5B B9 32 F9 | 	getword	local10, local09, #0
2ebe8     7F B8 06 F5 | 	and	local10, #127
2ebec     5C C7 02 F6 | 	mov	local17, local10
2ebf0     36 C9 02 F6 | 	mov	local18, ptr__fatfs_cc_dat__
2ebf4     01 00 00 FF 
2ebf8     BB C9 06 F1 | 	add	local18, ##955
2ebfc     64 C7 02 F1 | 	add	local17, local18
2ec00     63 B7 C2 FA | 	rdbyte	local09, local17
2ec04                 | LR__4983
2ec04                 | LR__4984
2ec04     5B AB 32 F9 | 	getword	local03, local09, #0
2ec08     00 AB 16 F2 | 	cmp	local03, #256 wc
2ec0c     40 00 90 CD |  if_b	jmp	#LR__4985
2ec10     62 AB 02 F6 | 	mov	local03, local16
2ec14     01 AA 86 F1 | 	sub	local03, #1
2ec18     55 C3 12 F2 | 	cmp	local15, local03 wc
2ec1c     5D BB E2 38 |  if_ae	getbyte	local11, local11, #0
2ec20     03 BA 46 35 |  if_ae	or	local11, #3
2ec24     62 C3 02 36 |  if_ae	mov	local15, local16
2ec28                 | ' 				cf |=  0x01  |  0x02 ;
2ec28                 | ' 				i = ni; continue;
2ec28     E0 FE 9F 3D |  if_ae	jmp	#LR__4979
2ec2c     61 C7 02 F6 | 	mov	local17, local15
2ec30     53 C9 02 F6 | 	mov	local18, local01
2ec34     20 C8 06 F1 | 	add	local18, #32
2ec38     64 C7 02 F1 | 	add	local17, local18
2ec3c     5B B3 32 F9 | 	getword	local07, local09, #0
2ec40     08 B2 46 F0 | 	shr	local07, #8
2ec44     63 B3 42 FC | 	wrbyte	local07, local17
2ec48     01 C2 06 F1 | 	add	local15, #1
2ec4c     74 00 90 FD | 	jmp	#LR__4991
2ec50                 | LR__4985
2ec50     5B AB 02 F6 | 	mov	local03, local09
2ec54     0F AA 4E F7 | 	zerox	local03, #15 wz
2ec58     18 00 90 AD |  if_e	jmp	#LR__4986
2ec5c     93 01 00 FF 
2ec60     FC 92 06 F6 | 	mov	arg01, ##@LR__5484
2ec64     5B 95 32 F9 | 	getword	arg02, local09, #0
2ec68     68 D4 BF FD | 	call	#_fatfs_cc_strchr
2ec6c     00 7A 0E F2 | 	cmp	result1, #0 wz
2ec70     10 00 90 AD |  if_e	jmp	#LR__4987
2ec74                 | LR__4986
2ec74     5F B6 06 F6 | 	mov	local09, #95
2ec78     5D BB E2 F8 | 	getbyte	local11, local11, #0
2ec7c     03 BA 46 F5 | 	or	local11, #3
2ec80     40 00 90 FD | 	jmp	#LR__4990
2ec84                 | LR__4987
2ec84     5B AB 32 F9 | 	getword	local03, local09, #0
2ec88     41 AA 16 F2 | 	cmp	local03, #65 wc
2ec8c     10 00 90 CD |  if_b	jmp	#LR__4988
2ec90     5B B9 32 F9 | 	getword	local10, local09, #0
2ec94     5B B8 16 F2 | 	cmp	local10, #91 wc
2ec98     60 C1 E2 C8 |  if_b	getbyte	local14, local14, #0
2ec9c     02 C0 46 C5 |  if_b	or	local14, #2
2eca0                 | LR__4988
2eca0     5B AB 32 F9 | 	getword	local03, local09, #0
2eca4     61 AA 16 F2 | 	cmp	local03, #97 wc
2eca8     18 00 90 CD |  if_b	jmp	#LR__4989
2ecac     5B B9 32 F9 | 	getword	local10, local09, #0
2ecb0     7B B8 16 F2 | 	cmp	local10, #123 wc
2ecb4     60 C1 E2 C8 |  if_b	getbyte	local14, local14, #0
2ecb8     01 C0 46 C5 |  if_b	or	local14, #1
2ecbc     5B B7 32 C9 |  if_b	getword	local09, local09, #0
2ecc0     20 B6 86 C1 |  if_b	sub	local09, #32
2ecc4                 | LR__4989
2ecc4                 | LR__4990
2ecc4                 | LR__4991
2ecc4     61 C7 02 F6 | 	mov	local17, local15
2ecc8     53 C9 02 F6 | 	mov	local18, local01
2eccc     20 C8 06 F1 | 	add	local18, #32
2ecd0     64 C7 02 F1 | 	add	local17, local18
2ecd4     5B B7 32 F9 | 	getword	local09, local09, #0
2ecd8     63 B7 42 FC | 	wrbyte	local09, local17
2ecdc     01 C2 06 F1 | 	add	local15, #1
2ece0     28 FE 9F FD | 	jmp	#LR__4979
2ece4                 | LR__4992
2ece4     20 A6 06 F1 | 	add	local01, #32
2ece8     53 AB C2 FA | 	rdbyte	local03, local01
2ecec     20 A6 86 F1 | 	sub	local01, #32
2ecf0     E5 AA 0E F2 | 	cmp	local03, #229 wz
2ecf4     20 A6 06 A1 |  if_e	add	local01, #32
2ecf8     53 0B 48 AC |  if_e	wrbyte	#5, local01
2ecfc     20 A6 86 A1 |  if_e	sub	local01, #32
2ed00     08 C4 0E F2 | 	cmp	local16, #8 wz
2ed04     60 C1 E2 A8 |  if_e	getbyte	local14, local14, #0
2ed08     02 C0 66 A0 |  if_e	shl	local14, #2
2ed0c     60 AB E2 F8 | 	getbyte	local03, local14, #0
2ed10     0C AA 06 F5 | 	and	local03, #12
2ed14     0C AA 0E F2 | 	cmp	local03, #12 wz
2ed18     60 B9 02 56 |  if_ne	mov	local10, local14
2ed1c     5C B9 E2 58 |  if_ne	getbyte	local10, local10, #0
2ed20     03 B8 06 55 |  if_ne	and	local10, #3
2ed24     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
2ed28     5D BB E2 A8 |  if_e	getbyte	local11, local11, #0
2ed2c     02 BA 46 A5 |  if_e	or	local11, #2
2ed30     5D AB E2 F8 | 	getbyte	local03, local11, #0
2ed34     02 AA CE F7 | 	test	local03, #2 wz
2ed38     20 00 90 5D |  if_ne	jmp	#LR__4993
2ed3c     60 AB E2 F8 | 	getbyte	local03, local14, #0
2ed40     01 AA CE F7 | 	test	local03, #1 wz
2ed44     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2ed48     10 BA 46 55 |  if_ne	or	local11, #16
2ed4c     60 C1 E2 F8 | 	getbyte	local14, local14, #0
2ed50     04 C0 CE F7 | 	test	local14, #4 wz
2ed54     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2ed58     08 BA 46 55 |  if_ne	or	local11, #8
2ed5c                 | LR__4993
2ed5c     2B A6 06 F1 | 	add	local01, #43
2ed60     53 BB 42 FC | 	wrbyte	local11, local01
2ed64                 | ' 	}
2ed64                 | ' 
2ed64                 | ' 	dp->fn[ 11 ] = cf;
2ed64                 | ' 
2ed64                 | ' 	return FR_OK;
2ed64     00 7A 06 F6 | 	mov	result1, #0
2ed68                 | LR__4994
2ed68     E7 F0 03 F6 | 	mov	ptra, fp
2ed6c     F2 00 A0 FD | 	call	#popregs_
2ed70                 | _fatfs_cc_create_name_ret
2ed70     2D 00 64 FD | 	ret
2ed74                 | 
2ed74                 | _fatfs_cc_follow_path
2ed74     04 CA 05 F6 | 	mov	COUNT_, #4
2ed78     E8 00 A0 FD | 	call	#pushregs_
2ed7c     18 F0 07 F1 | 	add	ptra, #24
2ed80     49 A7 02 F6 | 	mov	local01, arg01
2ed84     08 CE 05 F1 | 	add	fp, #8
2ed88     E7 94 62 FC | 	wrlong	arg02, fp
2ed8c     08 CE 85 F1 | 	sub	fp, #8
2ed90     53 A9 02 FB | 	rdlong	local02, local01
2ed94     D7 24 48 FB | 	callpa	#(@LR__5002-@LR__5000)>>2,fcache_load_ptr_
2ed98                 | ' )
2ed98                 | ' {
2ed98                 | ' 	FRESULT res;
2ed98                 | ' 	BYTE ns;
2ed98                 | ' 	FATFS *fs = dp->obj.fs;
2ed98                 | ' #line 3034 "ff.c"
2ed98                 | ' 	{
2ed98                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2ed98                 | LR__5000
2ed98     08 CE 05 F1 | 	add	fp, #8
2ed9c     E7 7A 02 FB | 	rdlong	result1, fp
2eda0     08 CE 85 F1 | 	sub	fp, #8
2eda4     3D 7B C2 FA | 	rdbyte	result1, result1
2eda8     2F 7A 0E F2 | 	cmp	result1, #47 wz
2edac     18 00 90 AD |  if_e	jmp	#LR__5001
2edb0     08 CE 05 F1 | 	add	fp, #8
2edb4     E7 7A 02 FB | 	rdlong	result1, fp
2edb8     08 CE 85 F1 | 	sub	fp, #8
2edbc     3D 7B C2 FA | 	rdbyte	result1, result1
2edc0     5C 7A 0E F2 | 	cmp	result1, #92 wz
2edc4     18 00 90 5D |  if_ne	jmp	#LR__5003
2edc8                 | LR__5001
2edc8     08 CE 05 F1 | 	add	fp, #8
2edcc     E7 7A 02 FB | 	rdlong	result1, fp
2edd0     01 7A 06 F1 | 	add	result1, #1
2edd4     E7 7A 62 FC | 	wrlong	result1, fp
2edd8     08 CE 85 F1 | 	sub	fp, #8
2eddc     B8 FF 9F FD | 	jmp	#LR__5000
2ede0                 | LR__5002
2ede0                 | LR__5003
2ede0     08 A6 06 F1 | 	add	local01, #8
2ede4     53 01 68 FC | 	wrlong	#0, local01
2ede8     08 A6 86 F1 | 	sub	local01, #8
2edec     08 CE 05 F1 | 	add	fp, #8
2edf0     E7 94 02 FB | 	rdlong	arg02, fp
2edf4     08 CE 85 F1 | 	sub	fp, #8
2edf8     4A 95 C2 FA | 	rdbyte	arg02, arg02
2edfc     20 94 16 F2 | 	cmp	arg02, #32 wc
2ee00     20 00 90 3D |  if_ae	jmp	#LR__5004
2ee04     2B A6 06 F1 | 	add	local01, #43
2ee08     53 01 49 FC | 	wrbyte	#128, local01
2ee0c     2B A6 86 F1 | 	sub	local01, #43
2ee10     53 93 02 F6 | 	mov	arg01, local01
2ee14     00 94 06 F6 | 	mov	arg02, #0
2ee18     9C E6 BF FD | 	call	#_fatfs_cc_dir_sdi
2ee1c     3D AB 02 F6 | 	mov	local03, result1
2ee20     A0 00 90 FD | 	jmp	#LR__5008
2ee24                 | LR__5004
2ee24                 | ' 		for (;;) {
2ee24                 | LR__5005
2ee24     E7 94 02 F6 | 	mov	arg02, fp
2ee28     08 94 06 F1 | 	add	arg02, #8
2ee2c     53 93 02 F6 | 	mov	arg01, local01
2ee30     5C FA BF FD | 	call	#_fatfs_cc_create_name
2ee34     3D AB 0A F6 | 	mov	local03, result1 wz
2ee38     88 00 90 5D |  if_ne	jmp	#LR__5007
2ee3c     53 93 02 F6 | 	mov	arg01, local01
2ee40     0C F1 BF FD | 	call	#_fatfs_cc_dir_find
2ee44     3D AB 0A F6 | 	mov	local03, result1 wz
2ee48     2B A6 06 F1 | 	add	local01, #43
2ee4c     53 AD C2 FA | 	rdbyte	local04, local01
2ee50     2B A6 86 F1 | 	sub	local01, #43
2ee54     18 00 90 AD |  if_e	jmp	#LR__5006
2ee58     04 AA 0E F2 | 	cmp	local03, #4 wz
2ee5c     64 00 90 5D |  if_ne	jmp	#LR__5007
2ee60     56 AD E2 F8 | 	getbyte	local04, local04, #0
2ee64     04 AC CE F7 | 	test	local04, #4 wz
2ee68     05 AA 06 A6 |  if_e	mov	local03, #5
2ee6c                 | ' 					}
2ee6c                 | ' 				}
2ee6c                 | ' 				break;
2ee6c     54 00 90 FD | 	jmp	#LR__5007
2ee70                 | LR__5006
2ee70     56 AD E2 F8 | 	getbyte	local04, local04, #0
2ee74     04 AC CE F7 | 	test	local04, #4 wz
2ee78     48 00 90 5D |  if_ne	jmp	#LR__5007
2ee7c     06 A6 06 F1 | 	add	local01, #6
2ee80     53 AD C2 FA | 	rdbyte	local04, local01
2ee84     06 A6 86 F1 | 	sub	local01, #6
2ee88     10 AC CE F7 | 	test	local04, #16 wz
2ee8c     05 AA 06 A6 |  if_e	mov	local03, #5
2ee90                 | ' 				res = FR_NO_PATH; break;
2ee90     30 00 90 AD |  if_e	jmp	#LR__5007
2ee94     54 93 02 F6 | 	mov	arg01, local02
2ee98     54 95 02 F6 | 	mov	arg02, local02
2ee9c     34 94 06 F1 | 	add	arg02, #52
2eea0     10 A6 06 F1 | 	add	local01, #16
2eea4     53 AD 02 FB | 	rdlong	local04, local01
2eea8     FF AD 06 F5 | 	and	local04, #511
2eeac     56 95 02 F1 | 	add	arg02, local04
2eeb0     D8 E9 BF FD | 	call	#_fatfs_cc_ld_clust
2eeb4     08 A6 86 F1 | 	sub	local01, #8
2eeb8     53 7B 62 FC | 	wrlong	result1, local01
2eebc     08 A6 86 F1 | 	sub	local01, #8
2eec0     60 FF 9F FD | 	jmp	#LR__5005
2eec4                 | LR__5007
2eec4                 | LR__5008
2eec4                 | ' 			}
2eec4                 | ' #line 3090 "ff.c"
2eec4                 | ' 			{
2eec4                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2eec4                 | ' 			}
2eec4                 | ' 		}
2eec4                 | ' 	}
2eec4                 | ' 
2eec4                 | ' 	return res;
2eec4     55 7B 02 F6 | 	mov	result1, local03
2eec8     E7 F0 03 F6 | 	mov	ptra, fp
2eecc     F2 00 A0 FD | 	call	#popregs_
2eed0                 | _fatfs_cc_follow_path_ret
2eed0     2D 00 64 FD | 	ret
2eed4                 | 
2eed4                 | _fatfs_cc_get_ldnumber
2eed4     01 80 66 F6 | 	neg	_var01, #1
2eed8     49 83 0A FB | 	rdlong	_var02, arg01 wz
2eedc     41 85 02 F6 | 	mov	_var03, _var02
2eee0     01 7A 66 A6 |  if_e	neg	result1, #1
2eee4     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2eee8     D7 10 48 FB | 	callpa	#(@LR__5011-@LR__5010)>>2,fcache_load_ptr_
2eeec                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2eeec                 | LR__5010
2eeec     42 87 C2 FA | 	rdbyte	_var04, _var03
2eef0     43 7B E2 F8 | 	getbyte	result1, _var04, #0
2eef4     20 7A 16 F2 | 	cmp	result1, #32 wc
2eef8     01 84 06 F1 | 	add	_var03, #1
2eefc     43 89 02 36 |  if_ae	mov	_var05, _var04
2ef00     44 89 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2ef04     3A 88 0E 32 |  if_ae	cmp	_var05, #58 wz
2ef08     E0 FF 9F 1D |  if_a	jmp	#LR__5010
2ef0c                 | LR__5011
2ef0c     43 87 E2 F8 | 	getbyte	_var04, _var04, #0
2ef10     3A 86 0E F2 | 	cmp	_var04, #58 wz
2ef14     40 00 90 5D |  if_ne	jmp	#LR__5013
2ef18     01 8A 06 F6 | 	mov	_var06, #1
2ef1c     41 89 C2 FA | 	rdbyte	_var05, _var02
2ef20     30 88 16 F2 | 	cmp	_var05, #48 wc
2ef24     1C 00 90 CD |  if_b	jmp	#LR__5012
2ef28     41 89 C2 FA | 	rdbyte	_var05, _var02
2ef2c     3A 88 16 F2 | 	cmp	_var05, #58 wc
2ef30     41 8D 02 C6 |  if_b	mov	_var07, _var02
2ef34     02 8C 06 C1 |  if_b	add	_var07, #2
2ef38     42 8D 0A C2 |  if_b	cmp	_var07, _var03 wz
2ef3c     44 8B 02 86 |  if_c_and_z	mov	_var06, _var05
2ef40     30 8A 86 81 |  if_c_and_z	sub	_var06, #48
2ef44                 | LR__5012
2ef44     01 8A 56 F2 | 	cmps	_var06, #1 wc
2ef48     45 81 02 C6 |  if_b	mov	_var01, _var06
2ef4c     49 85 62 CC |  if_b	wrlong	_var03, arg01
2ef50                 | ' 			vol = i;
2ef50                 | ' 			*path = tt;
2ef50                 | ' 		}
2ef50                 | ' 		return vol;
2ef50     40 7B 02 F6 | 	mov	result1, _var01
2ef54     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2ef58                 | LR__5013
2ef58                 | ' 	}
2ef58                 | ' #line 3170 "ff.c"
2ef58                 | ' 	vol = 0;
2ef58                 | ' 
2ef58                 | ' 	return vol;
2ef58     00 7A 06 F6 | 	mov	result1, #0
2ef5c                 | _fatfs_cc_get_ldnumber_ret
2ef5c     2D 00 64 FD | 	ret
2ef60                 | 
2ef60                 | _fatfs_cc_check_fs
2ef60     04 CA 05 F6 | 	mov	COUNT_, #4
2ef64     E8 00 A0 FD | 	call	#pushregs_
2ef68     49 A7 02 F6 | 	mov	local01, arg01
2ef6c     03 A6 06 F1 | 	add	local01, #3
2ef70     53 01 48 FC | 	wrbyte	#0, local01
2ef74     2D A6 06 F1 | 	add	local01, #45
2ef78     FF FF FF FF 
2ef7c     53 FF 6B FC | 	wrlong	##-1, local01
2ef80     30 A6 86 F1 | 	sub	local01, #48
2ef84     53 93 02 F6 | 	mov	arg01, local01
2ef88     C8 DB BF FD | 	call	#_fatfs_cc_move_window
2ef8c     00 7A 0E F2 | 	cmp	result1, #0 wz
2ef90     04 7A 06 56 |  if_ne	mov	result1, #4
2ef94     64 01 90 5D |  if_ne	jmp	#LR__5023
2ef98     34 A6 06 F1 | 	add	local01, #52
2ef9c     53 93 02 F6 | 	mov	arg01, local01
2efa0     FE 93 06 F1 | 	add	arg01, #510
2efa4                 | ' {
2efa4                 | ' 
2efa4                 | ' 	return *((WORD*)ptr);
2efa4     49 A9 E2 FA | 	rdword	local02, arg01
2efa8     53 AB C2 FA | 	rdbyte	local03, local01
2efac     34 A6 86 F1 | 	sub	local01, #52
2efb0     55 AD E2 F8 | 	getbyte	local04, local03, #0
2efb4     EB AC 0E F2 | 	cmp	local04, #235 wz
2efb8     55 97 02 56 |  if_ne	mov	arg03, local03
2efbc     4B 97 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2efc0     E9 96 0E 52 |  if_ne	cmp	arg03, #233 wz
2efc4     55 AB E2 58 |  if_ne	getbyte	local03, local03, #0
2efc8     E8 AA 0E 52 |  if_ne	cmp	local03, #232 wz
2efcc     14 01 90 5D |  if_ne	jmp	#LR__5022
2efd0     54 AD 32 F9 | 	getword	local04, local02, #0
2efd4     55 00 00 FF 
2efd8     55 AC 0E F2 | 	cmp	local04, ##43605 wz
2efdc     24 00 90 5D |  if_ne	jmp	#LR__5020
2efe0     53 93 02 F6 | 	mov	arg01, local01
2efe4     86 92 06 F1 | 	add	arg01, #134
2efe8     93 01 00 FF 
2efec     03 95 06 F6 | 	mov	arg02, ##@LR__5485
2eff0     08 96 06 F6 | 	mov	arg03, #8
2eff4     10 D0 BF FD | 	call	#_fatfs_cc_memcmp
2eff8     00 7A 0E F2 | 	cmp	result1, #0 wz
2effc                 | ' 			return 0;
2effc     00 7A 06 A6 |  if_e	mov	result1, #0
2f000     F8 00 90 AD |  if_e	jmp	#LR__5023
2f004                 | LR__5020
2f004     34 A6 06 F1 | 	add	local01, #52
2f008     53 93 02 F6 | 	mov	arg01, local01
2f00c     0B 92 06 F1 | 	add	arg01, #11
2f010                 | ' {
2f010                 | ' 
2f010                 | ' 	return *((WORD*)ptr);
2f010     49 7B E2 FA | 	rdword	result1, arg01
2f014     0D A6 06 F1 | 	add	local01, #13
2f018     53 AB C2 FA | 	rdbyte	local03, local01
2f01c     41 A6 86 F1 | 	sub	local01, #65
2f020     3D AD 32 F9 | 	getword	local04, result1, #0
2f024     3D 95 32 F9 | 	getword	arg02, result1, #0
2f028     01 94 86 F1 | 	sub	arg02, #1
2f02c     4A AD CA F7 | 	test	local04, arg02 wz
2f030     B0 00 90 5D |  if_ne	jmp	#LR__5021
2f034     3D 95 32 F9 | 	getword	arg02, result1, #0
2f038     01 00 00 FF 
2f03c     00 94 16 F2 | 	cmp	arg02, ##512 wc
2f040     A0 00 90 CD |  if_b	jmp	#LR__5021
2f044     3D 95 32 F9 | 	getword	arg02, result1, #0
2f048     01 00 00 FF 
2f04c     01 94 16 F2 | 	cmp	arg02, ##513 wc
2f050     90 00 90 3D |  if_ae	jmp	#LR__5021
2f054     55 93 02 F6 | 	mov	arg01, local03
2f058     07 92 4E F7 | 	zerox	arg01, #7 wz
2f05c     84 00 90 AD |  if_e	jmp	#LR__5021
2f060     55 93 E2 F8 | 	getbyte	arg01, local03, #0
2f064     55 AB E2 F8 | 	getbyte	local03, local03, #0
2f068     01 AA 86 F1 | 	sub	local03, #1
2f06c     55 93 CA F7 | 	test	arg01, local03 wz
2f070     70 00 90 5D |  if_ne	jmp	#LR__5021
2f074     53 93 02 F6 | 	mov	arg01, local01
2f078     42 92 06 F1 | 	add	arg01, #66
2f07c                 | ' {
2f07c                 | ' 
2f07c                 | ' 	return *((WORD*)ptr);
2f07c     49 7B EA FA | 	rdword	result1, arg01 wz
2f080     60 00 90 AD |  if_e	jmp	#LR__5021
2f084     44 A6 06 F1 | 	add	local01, #68
2f088     53 93 C2 FA | 	rdbyte	arg01, local01
2f08c     44 A6 86 F1 | 	sub	local01, #68
2f090     01 92 86 F1 | 	sub	arg01, #1
2f094     02 92 16 F2 | 	cmp	arg01, #2 wc
2f098     48 00 90 3D |  if_ae	jmp	#LR__5021
2f09c     53 93 02 F6 | 	mov	arg01, local01
2f0a0     45 92 06 F1 | 	add	arg01, #69
2f0a4                 | ' {
2f0a4                 | ' 
2f0a4                 | ' 	return *((WORD*)ptr);
2f0a4     49 7B EA FA | 	rdword	result1, arg01 wz
2f0a8     38 00 90 AD |  if_e	jmp	#LR__5021
2f0ac     53 93 02 F6 | 	mov	arg01, local01
2f0b0     47 92 06 F1 | 	add	arg01, #71
2f0b4                 | ' {
2f0b4                 | ' 
2f0b4                 | ' 	return *((WORD*)ptr);
2f0b4     49 7B E2 FA | 	rdword	result1, arg01
2f0b8     3D AB 32 F9 | 	getword	local03, result1, #0
2f0bc     80 AA 16 F2 | 	cmp	local03, #128 wc
2f0c0     53 93 02 C6 |  if_b	mov	arg01, local01
2f0c4     54 92 06 C1 |  if_b	add	arg01, #84
2f0c8                 | ' {
2f0c8                 | ' 
2f0c8                 | ' 	return *((DWORD*)ptr);
2f0c8     49 7B 02 CB |  if_b	rdlong	result1, arg01
2f0cc     80 00 00 CF 
2f0d0     00 7A 16 C2 |  if_b	cmp	result1, ##65536 wc
2f0d4     4A A6 06 31 |  if_ae	add	local01, #74
2f0d8                 | ' {
2f0d8                 | ' 
2f0d8                 | ' 	return *((WORD*)ptr);
2f0d8     53 7B EA 3A |  if_ae	rdword	result1, local01 wz
2f0dc                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2f0dc                 | ' 			&& ld_word(fs->win +  14 ) != 0
2f0dc                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2f0dc                 | ' 			&& ld_word(fs->win +  17 ) != 0
2f0dc                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2f0dc                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2f0dc                 | ' 				return 0;
2f0dc     00 7A 06 16 |  if_a	mov	result1, #0
2f0e0     18 00 90 1D |  if_a	jmp	#LR__5023
2f0e4                 | LR__5021
2f0e4                 | LR__5022
2f0e4                 | ' 		}
2f0e4                 | ' 	}
2f0e4                 | ' 	return sign == 0xAA55 ? 2 : 3;
2f0e4     54 AB 32 F9 | 	getword	local03, local02, #0
2f0e8     55 00 00 FF 
2f0ec     55 AA 0E F2 | 	cmp	local03, ##43605 wz
2f0f0     02 AC 06 A6 |  if_e	mov	local04, #2
2f0f4     03 AC 06 56 |  if_ne	mov	local04, #3
2f0f8     56 7B 02 F6 | 	mov	result1, local04
2f0fc                 | LR__5023
2f0fc     E7 F0 03 F6 | 	mov	ptra, fp
2f100     F2 00 A0 FD | 	call	#popregs_
2f104                 | _fatfs_cc_check_fs_ret
2f104     2D 00 64 FD | 	ret
2f108                 | 
2f108                 | _fatfs_cc_find_volume
2f108     05 CA 05 F6 | 	mov	COUNT_, #5
2f10c     E8 00 A0 FD | 	call	#pushregs_
2f110     24 F0 07 F1 | 	add	ptra, #36
2f114     49 A7 02 F6 | 	mov	local01, arg01
2f118     4A A9 02 F6 | 	mov	local02, arg02
2f11c     53 93 02 F6 | 	mov	arg01, local01
2f120     00 94 06 F6 | 	mov	arg02, #0
2f124     38 FE BF FD | 	call	#_fatfs_cc_check_fs
2f128     02 7A 0E F2 | 	cmp	result1, #2 wz
2f12c     0C 00 90 AD |  if_e	jmp	#LR__5030
2f130     03 7A 16 F2 | 	cmp	result1, #3 wc
2f134     00 A8 0E C2 |  if_b	cmp	local02, #0 wz
2f138     C8 00 90 BD |  if_nc_or_z	jmp	#LR__5038
2f13c                 | LR__5030
2f13c                 | ' 	for (i = 0; i < 4; i++) {
2f13c     00 AA 06 F6 | 	mov	local03, #0
2f140     D7 22 48 FB | 	callpa	#(@LR__5032-@LR__5031)>>2,fcache_load_ptr_
2f144                 | LR__5031
2f144     04 AA 16 F2 | 	cmp	local03, #4 wc
2f148     3C 00 90 3D |  if_ae	jmp	#LR__5033
2f14c     55 AD 02 F6 | 	mov	local04, local03
2f150     02 AC 66 F0 | 	shl	local04, #2
2f154     E7 94 02 F6 | 	mov	arg02, fp
2f158     14 94 06 F1 | 	add	arg02, #20
2f15c     4A AD 02 F1 | 	add	local04, arg02
2f160     53 93 02 F6 | 	mov	arg01, local01
2f164     F2 93 06 F1 | 	add	arg01, #498
2f168     55 95 02 F6 | 	mov	arg02, local03
2f16c     04 94 66 F0 | 	shl	arg02, #4
2f170     4A 93 02 F1 | 	add	arg01, arg02
2f174     08 92 06 F1 | 	add	arg01, #8
2f178                 | ' {
2f178                 | ' 
2f178                 | ' 	return *((DWORD*)ptr);
2f178     49 7B 02 FB | 	rdlong	result1, arg01
2f17c     56 7B 62 FC | 	wrlong	result1, local04
2f180     01 AA 06 F1 | 	add	local03, #1
2f184     BC FF 9F FD | 	jmp	#LR__5031
2f188                 | LR__5032
2f188                 | LR__5033
2f188     00 A8 0E F2 | 	cmp	local02, #0 wz
2f18c     54 AD 02 56 |  if_ne	mov	local04, local02
2f190     01 AC 86 51 |  if_ne	sub	local04, #1
2f194     00 AC 06 A6 |  if_e	mov	local04, #0
2f198     56 AB 02 F6 | 	mov	local03, local04
2f19c                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2f19c                 | ' 	}
2f19c                 | ' 	i = part ? part - 1 : 0;
2f19c                 | ' 	do {
2f19c                 | LR__5034
2f19c     55 AD 02 F6 | 	mov	local04, local03
2f1a0     02 AC 66 F0 | 	shl	local04, #2
2f1a4     E7 94 02 F6 | 	mov	arg02, fp
2f1a8     14 94 06 F1 | 	add	arg02, #20
2f1ac     4A AD 02 F1 | 	add	local04, arg02
2f1b0     56 AD 0A FB | 	rdlong	local04, local04 wz
2f1b4     28 00 90 AD |  if_e	jmp	#LR__5035
2f1b8     55 AD 02 F6 | 	mov	local04, local03
2f1bc     02 AC 66 F0 | 	shl	local04, #2
2f1c0     E7 94 02 F6 | 	mov	arg02, fp
2f1c4     14 94 06 F1 | 	add	arg02, #20
2f1c8     4A AD 02 F1 | 	add	local04, arg02
2f1cc     56 95 02 FB | 	rdlong	arg02, local04
2f1d0     53 93 02 F6 | 	mov	arg01, local01
2f1d4     88 FD BF FD | 	call	#_fatfs_cc_check_fs
2f1d8     3D AD 02 F6 | 	mov	local04, result1
2f1dc     04 00 90 FD | 	jmp	#LR__5036
2f1e0                 | LR__5035
2f1e0     03 AC 06 F6 | 	mov	local04, #3
2f1e4                 | LR__5036
2f1e4     56 AF 02 F6 | 	mov	local05, local04
2f1e8     00 A8 0E F2 | 	cmp	local02, #0 wz
2f1ec     02 AE 16 A2 |  if_e	cmp	local05, #2 wc
2f1f0     0C 00 90 8D |  if_c_and_z	jmp	#LR__5037
2f1f4     01 AA 06 A1 |  if_e	add	local03, #1
2f1f8     04 AA 16 A2 |  if_e	cmp	local03, #4 wc
2f1fc     9C FF 9F 8D |  if_c_and_z	jmp	#LR__5034
2f200                 | LR__5037
2f200                 | ' 	return fmt;
2f200     57 7B 02 F6 | 	mov	result1, local05
2f204                 | LR__5038
2f204     E7 F0 03 F6 | 	mov	ptra, fp
2f208     F2 00 A0 FD | 	call	#popregs_
2f20c                 | _fatfs_cc_find_volume_ret
2f20c     2D 00 64 FD | 	ret
2f210                 | 
2f210                 | _fatfs_cc_mount_volume
2f210     0A CA 05 F6 | 	mov	COUNT_, #10
2f214     E8 00 A0 FD | 	call	#pushregs_
2f218     4B A7 02 F6 | 	mov	local01, arg03
2f21c     4A 01 68 FC | 	wrlong	#0, arg02
2f220     B0 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2f224     3D A9 02 F6 | 	mov	local02, result1
2f228     00 A8 56 F2 | 	cmps	local02, #0 wc
2f22c     0B 7A 06 C6 |  if_b	mov	result1, #11
2f230     00 05 90 CD |  if_b	jmp	#LR__5049
2f234     54 97 02 F6 | 	mov	arg03, local02
2f238     02 96 66 F0 | 	shl	arg03, #2
2f23c     32 97 02 F1 | 	add	arg03, objptr
2f240     4B AB 0A FB | 	rdlong	local03, arg03 wz
2f244     0C 7A 06 A6 |  if_e	mov	result1, #12
2f248     E8 04 90 AD |  if_e	jmp	#LR__5049
2f24c     4A AB 62 FC | 	wrlong	local03, arg02
2f250     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2f254     FE A6 06 F5 | 	and	local01, #254
2f258     55 97 CA FA | 	rdbyte	arg03, local03 wz
2f25c     44 00 90 AD |  if_e	jmp	#LR__5041
2f260     01 00 00 FF 
2f264     10 64 06 F1 | 	add	objptr, ##528
2f268     32 93 0A FB | 	rdlong	arg01, objptr wz
2f26c     01 00 00 FF 
2f270     10 64 86 F1 | 	sub	objptr, ##528
2f274                 | '         return RES_NOTRDY;
2f274     03 7A 06 A6 |  if_e	mov	result1, #3
2f278                 | '     }
2f278                 | '     return RES_OK;
2f278     00 7A 06 56 |  if_ne	mov	result1, #0
2f27c     3D 97 E2 F8 | 	getbyte	arg03, result1, #0
2f280     01 96 CE F7 | 	test	arg03, #1 wz
2f284     1C 00 90 5D |  if_ne	jmp	#LR__5040
2f288     00 A6 0E F2 | 	cmp	local01, #0 wz
2f28c     3D 7B E2 58 |  if_ne	getbyte	result1, result1, #0
2f290     04 7A CE 57 |  if_ne	test	result1, #4 wz
2f294                 | ' 				return FR_WRITE_PROTECTED;
2f294     0A 7A 06 56 |  if_ne	mov	result1, #10
2f298     98 04 90 5D |  if_ne	jmp	#LR__5049
2f29c                 | ' 			}
2f29c                 | ' 			return FR_OK;
2f29c     00 7A 06 F6 | 	mov	result1, #0
2f2a0     90 04 90 FD | 	jmp	#LR__5049
2f2a4                 | LR__5040
2f2a4                 | LR__5041
2f2a4     55 01 48 FC | 	wrbyte	#0, local03
2f2a8     01 AA 06 F1 | 	add	local03, #1
2f2ac     55 A9 42 FC | 	wrbyte	local02, local03
2f2b0     01 AA 86 F1 | 	sub	local03, #1
2f2b4     01 00 00 FF 
2f2b8     10 64 06 F1 | 	add	objptr, ##528
2f2bc     32 A9 0A FB | 	rdlong	local02, objptr wz
2f2c0     01 00 00 FF 
2f2c4     10 64 86 F1 | 	sub	objptr, ##528
2f2c8                 | ' 
2f2c8                 | '         return RES_NOTRDY;
2f2c8     03 7A 06 A6 |  if_e	mov	result1, #3
2f2cc                 | '     }
2f2cc                 | '     return RES_OK;
2f2cc     00 7A 06 56 |  if_ne	mov	result1, #0
2f2d0     3D 97 02 F6 | 	mov	arg03, result1
2f2d4     4B AD E2 F8 | 	getbyte	local04, arg03, #0
2f2d8     01 AC CE F7 | 	test	local04, #1 wz
2f2dc                 | ' 		return FR_NOT_READY;
2f2dc     03 7A 06 56 |  if_ne	mov	result1, #3
2f2e0     50 04 90 5D |  if_ne	jmp	#LR__5049
2f2e4     00 A6 0E F2 | 	cmp	local01, #0 wz
2f2e8     4B AD 02 56 |  if_ne	mov	local04, arg03
2f2ec     56 AD E2 58 |  if_ne	getbyte	local04, local04, #0
2f2f0     04 AC CE 57 |  if_ne	test	local04, #4 wz
2f2f4                 | ' 		return FR_WRITE_PROTECTED;
2f2f4     0A 7A 06 56 |  if_ne	mov	result1, #10
2f2f8     38 04 90 5D |  if_ne	jmp	#LR__5049
2f2fc     55 93 02 F6 | 	mov	arg01, local03
2f300     00 94 06 F6 | 	mov	arg02, #0
2f304     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2f308     3D 93 02 F6 | 	mov	arg01, result1
2f30c     04 92 0E F2 | 	cmp	arg01, #4 wz
2f310     01 7A 06 A6 |  if_e	mov	result1, #1
2f314     1C 04 90 AD |  if_e	jmp	#LR__5049
2f318     02 92 16 F2 | 	cmp	arg01, #2 wc
2f31c     0D 7A 06 36 |  if_ae	mov	result1, #13
2f320     10 04 90 3D |  if_ae	jmp	#LR__5049
2f324     30 AA 06 F1 | 	add	local03, #48
2f328     55 AF 02 FB | 	rdlong	local05, local03
2f32c     04 AA 06 F1 | 	add	local03, #4
2f330     55 93 02 F6 | 	mov	arg01, local03
2f334     34 AA 86 F1 | 	sub	local03, #52
2f338     0B 92 06 F1 | 	add	arg01, #11
2f33c                 | ' {
2f33c                 | ' 
2f33c                 | ' 	return *((WORD*)ptr);
2f33c     49 7B E2 FA | 	rdword	result1, arg01
2f340     01 00 00 FF 
2f344     00 7A 0E F2 | 	cmp	result1, ##512 wz
2f348     0D 7A 06 56 |  if_ne	mov	result1, #13
2f34c     E4 03 90 5D |  if_ne	jmp	#LR__5049
2f350     55 93 02 F6 | 	mov	arg01, local03
2f354     4A 92 06 F1 | 	add	arg01, #74
2f358                 | ' {
2f358                 | ' 
2f358                 | ' 	return *((WORD*)ptr);
2f358     49 7B E2 FA | 	rdword	result1, arg01
2f35c     3D B1 0A F6 | 	mov	local06, result1 wz
2f360     55 93 02 A6 |  if_e	mov	arg01, local03
2f364     58 92 06 A1 |  if_e	add	arg01, #88
2f368                 | ' {
2f368                 | ' 
2f368                 | ' 	return *((DWORD*)ptr);
2f368     49 7B 02 AB |  if_e	rdlong	result1, arg01
2f36c     3D B1 02 A6 |  if_e	mov	local06, result1
2f370     1C AA 06 F1 | 	add	local03, #28
2f374     55 B1 62 FC | 	wrlong	local06, local03
2f378     28 AA 06 F1 | 	add	local03, #40
2f37c     55 AD C2 FA | 	rdbyte	local04, local03
2f380     42 AA 86 F1 | 	sub	local03, #66
2f384     55 AD 42 FC | 	wrbyte	local04, local03
2f388     56 AD E2 F8 | 	getbyte	local04, local04, #0
2f38c     02 AA 86 F1 | 	sub	local03, #2
2f390     01 AC 0E F2 | 	cmp	local04, #1 wz
2f394     02 AA 06 51 |  if_ne	add	local03, #2
2f398     55 AD C2 5A |  if_ne	rdbyte	local04, local03
2f39c     02 AA 86 51 |  if_ne	sub	local03, #2
2f3a0     02 AC 0E 52 |  if_ne	cmp	local04, #2 wz
2f3a4     0D 7A 06 56 |  if_ne	mov	result1, #13
2f3a8     88 03 90 5D |  if_ne	jmp	#LR__5049
2f3ac     02 AA 06 F1 | 	add	local03, #2
2f3b0     55 AD C2 FA | 	rdbyte	local04, local03
2f3b4     56 B1 02 FD | 	qmul	local06, local04
2f3b8     3F AA 06 F1 | 	add	local03, #63
2f3bc     55 AD C2 FA | 	rdbyte	local04, local03
2f3c0     37 AA 86 F1 | 	sub	local03, #55
2f3c4     55 AD 52 FC | 	wrword	local04, local03
2f3c8     56 AD 32 F9 | 	getword	local04, local04, #0
2f3cc     0A AA 86 F1 | 	sub	local03, #10
2f3d0     0F AC 4E F7 | 	zerox	local04, #15 wz
2f3d4     18 B0 62 FD | 	getqx	local06
2f3d8     20 00 90 AD |  if_e	jmp	#LR__5042
2f3dc     0A AA 06 F1 | 	add	local03, #10
2f3e0     55 AD E2 FA | 	rdword	local04, local03
2f3e4     56 A9 32 F9 | 	getword	local02, local04, #0
2f3e8     0A AA 86 F1 | 	sub	local03, #10
2f3ec     56 AD 32 F9 | 	getword	local04, local04, #0
2f3f0     01 AC 86 F1 | 	sub	local04, #1
2f3f4     56 A9 CA F7 | 	test	local02, local04 wz
2f3f8     08 00 90 AD |  if_e	jmp	#LR__5043
2f3fc                 | LR__5042
2f3fc     0D 7A 06 F6 | 	mov	result1, #13
2f400     30 03 90 FD | 	jmp	#LR__5049
2f404                 | LR__5043
2f404     34 AA 06 F1 | 	add	local03, #52
2f408     55 93 02 F6 | 	mov	arg01, local03
2f40c     11 92 06 F1 | 	add	arg01, #17
2f410                 | ' {
2f410                 | ' 
2f410                 | ' 	return *((WORD*)ptr);
2f410     49 7B E2 FA | 	rdword	result1, arg01
2f414     2C AA 86 F1 | 	sub	local03, #44
2f418     55 7B 52 FC | 	wrword	result1, local03
2f41c     3D AD 32 F9 | 	getword	local04, result1, #0
2f420     08 AA 86 F1 | 	sub	local03, #8
2f424     56 93 52 F6 | 	abs	arg01, local04 wc
2f428     49 93 42 F8 | 	getnib	arg01, arg01, #0
2f42c     49 93 8A F6 | 	negc	arg01, arg01 wz
2f430     0D 7A 06 56 |  if_ne	mov	result1, #13
2f434     FC 02 90 5D |  if_ne	jmp	#LR__5049
2f438     55 93 02 F6 | 	mov	arg01, local03
2f43c     47 92 06 F1 | 	add	arg01, #71
2f440                 | ' {
2f440                 | ' 
2f440                 | ' 	return *((WORD*)ptr);
2f440     49 7B E2 FA | 	rdword	result1, arg01
2f444     3D B3 0A F6 | 	mov	local07, result1 wz
2f448     55 93 02 A6 |  if_e	mov	arg01, local03
2f44c     54 92 06 A1 |  if_e	add	arg01, #84
2f450                 | ' {
2f450                 | ' 
2f450                 | ' 	return *((DWORD*)ptr);
2f450     49 B3 02 AB |  if_e	rdlong	local07, arg01
2f454     55 93 02 F6 | 	mov	arg01, local03
2f458     42 92 06 F1 | 	add	arg01, #66
2f45c                 | ' {
2f45c                 | ' 
2f45c                 | ' 	return *((WORD*)ptr);
2f45c     49 7B E2 FA | 	rdword	result1, arg01
2f460     3D 93 02 F6 | 	mov	arg01, result1
2f464     49 AD 02 F6 | 	mov	local04, arg01
2f468     0F AC 4E F7 | 	zerox	local04, #15 wz
2f46c     0D 7A 06 A6 |  if_e	mov	result1, #13
2f470     C0 02 90 AD |  if_e	jmp	#LR__5049
2f474     49 B5 32 F9 | 	getword	local08, arg01, #0
2f478     58 B5 02 F1 | 	add	local08, local06
2f47c     08 AA 06 F1 | 	add	local03, #8
2f480     55 AD E2 FA | 	rdword	local04, local03
2f484     08 AA 86 F1 | 	sub	local03, #8
2f488     56 AD 52 F6 | 	abs	local04, local04 wc
2f48c     04 AC 46 F0 | 	shr	local04, #4
2f490     56 B5 82 F3 | 	sumc	local08, local04
2f494     5A B3 12 F2 | 	cmp	local07, local08 wc
2f498     0D 7A 06 C6 |  if_b	mov	result1, #13
2f49c     94 02 90 CD |  if_b	jmp	#LR__5049
2f4a0     5A B3 82 F1 | 	sub	local07, local08
2f4a4     0A AA 06 F1 | 	add	local03, #10
2f4a8     55 AD E2 FA | 	rdword	local04, local03
2f4ac     56 B3 12 FD | 	qdiv	local07, local04
2f4b0     0A AA 86 F1 | 	sub	local03, #10
2f4b4     18 AC 62 FD | 	getqx	local04
2f4b8     00 AC 0E F2 | 	cmp	local04, #0 wz
2f4bc     0D 7A 06 A6 |  if_e	mov	result1, #13
2f4c0     70 02 90 AD |  if_e	jmp	#LR__5049
2f4c4     00 B6 06 F6 | 	mov	local09, #0
2f4c8     FF FF 07 FF 
2f4cc     F6 AD 16 F2 | 	cmp	local04, ##268435446 wc
2f4d0     03 B6 06 C6 |  if_b	mov	local09, #3
2f4d4     7F 00 00 FF 
2f4d8     F6 AD 16 F2 | 	cmp	local04, ##65526 wc
2f4dc     02 B6 06 C6 |  if_b	mov	local09, #2
2f4e0     07 00 00 FF 
2f4e4     F6 AD 16 F2 | 	cmp	local04, ##4086 wc
2f4e8     01 B6 06 C6 |  if_b	mov	local09, #1
2f4ec     00 B6 0E F2 | 	cmp	local09, #0 wz
2f4f0     0D 7A 06 A6 |  if_e	mov	result1, #13
2f4f4     3C 02 90 AD |  if_e	jmp	#LR__5049
2f4f8     02 AC 06 F1 | 	add	local04, #2
2f4fc     18 AA 06 F1 | 	add	local03, #24
2f500     55 AD 62 FC | 	wrlong	local04, local03
2f504     08 AA 06 F1 | 	add	local03, #8
2f508     55 AF 62 FC | 	wrlong	local05, local03
2f50c     57 AD 02 F6 | 	mov	local04, local05
2f510     49 93 32 F9 | 	getword	arg01, arg01, #0
2f514     49 AD 02 F1 | 	add	local04, arg01
2f518     04 AA 06 F1 | 	add	local03, #4
2f51c     55 AD 62 FC | 	wrlong	local04, local03
2f520     57 AD 02 F6 | 	mov	local04, local05
2f524     5A AD 02 F1 | 	add	local04, local08
2f528     08 AA 06 F1 | 	add	local03, #8
2f52c     55 AD 62 FC | 	wrlong	local04, local03
2f530     2C AA 86 F1 | 	sub	local03, #44
2f534     03 B6 0E F2 | 	cmp	local09, #3 wz
2f538     54 00 90 5D |  if_ne	jmp	#LR__5044
2f53c     55 93 02 F6 | 	mov	arg01, local03
2f540     5E 92 06 F1 | 	add	arg01, #94
2f544                 | ' {
2f544                 | ' 
2f544                 | ' 	return *((WORD*)ptr);
2f544     49 7B EA FA | 	rdword	result1, arg01 wz
2f548     0D 7A 06 56 |  if_ne	mov	result1, #13
2f54c     E4 01 90 5D |  if_ne	jmp	#LR__5049
2f550     08 AA 06 F1 | 	add	local03, #8
2f554     55 AD EA FA | 	rdword	local04, local03 wz
2f558     08 AA 86 F1 | 	sub	local03, #8
2f55c     0D 7A 06 56 |  if_ne	mov	result1, #13
2f560     D0 01 90 5D |  if_ne	jmp	#LR__5049
2f564     34 AA 06 F1 | 	add	local03, #52
2f568     55 93 02 F6 | 	mov	arg01, local03
2f56c     2C 92 06 F1 | 	add	arg01, #44
2f570                 | ' {
2f570                 | ' 
2f570                 | ' 	return *((DWORD*)ptr);
2f570     49 7B 02 FB | 	rdlong	result1, arg01
2f574     0C AA 86 F1 | 	sub	local03, #12
2f578     55 7B 62 FC | 	wrlong	result1, local03
2f57c     10 AA 86 F1 | 	sub	local03, #16
2f580     55 B9 02 FB | 	rdlong	local10, local03
2f584     18 AA 86 F1 | 	sub	local03, #24
2f588     02 B8 66 F0 | 	shl	local10, #2
2f58c     6C 00 90 FD | 	jmp	#LR__5046
2f590                 | LR__5044
2f590     08 AA 06 F1 | 	add	local03, #8
2f594     55 AD EA FA | 	rdword	local04, local03 wz
2f598     08 AA 86 F1 | 	sub	local03, #8
2f59c     0D 7A 06 A6 |  if_e	mov	result1, #13
2f5a0     90 01 90 AD |  if_e	jmp	#LR__5049
2f5a4     24 AA 06 F1 | 	add	local03, #36
2f5a8     55 AD 02 FB | 	rdlong	local04, local03
2f5ac     58 AD 02 F1 | 	add	local04, local06
2f5b0     04 AA 06 F1 | 	add	local03, #4
2f5b4     55 AD 62 FC | 	wrlong	local04, local03
2f5b8     28 AA 86 F1 | 	sub	local03, #40
2f5bc     02 B6 0E F2 | 	cmp	local09, #2 wz
2f5c0     18 AA 06 A1 |  if_e	add	local03, #24
2f5c4     55 AD 02 AB |  if_e	rdlong	local04, local03
2f5c8     18 AA 86 A1 |  if_e	sub	local03, #24
2f5cc     01 AC 66 A0 |  if_e	shl	local04, #1
2f5d0     24 00 90 AD |  if_e	jmp	#LR__5045
2f5d4     18 AA 06 F1 | 	add	local03, #24
2f5d8     55 B9 02 FB | 	rdlong	local10, local03
2f5dc     5C AD 02 F6 | 	mov	local04, local10
2f5e0     01 AC 66 F0 | 	shl	local04, #1
2f5e4     5C AD 02 F1 | 	add	local04, local10
2f5e8     01 AC 46 F0 | 	shr	local04, #1
2f5ec     18 AA 86 F1 | 	sub	local03, #24
2f5f0     01 B8 06 F5 | 	and	local10, #1
2f5f4     5C AD 02 F1 | 	add	local04, local10
2f5f8                 | LR__5045
2f5f8     56 B9 02 F6 | 	mov	local10, local04
2f5fc                 | LR__5046
2f5fc     FF B9 06 F1 | 	add	local10, #511
2f600     09 B8 46 F0 | 	shr	local10, #9
2f604     1C AA 06 F1 | 	add	local03, #28
2f608     55 97 02 FB | 	rdlong	arg03, local03
2f60c     1C AA 86 F1 | 	sub	local03, #28
2f610     5C 97 12 F2 | 	cmp	arg03, local10 wc
2f614     0D 7A 06 C6 |  if_b	mov	result1, #13
2f618     18 01 90 CD |  if_b	jmp	#LR__5049
2f61c     14 AA 06 F1 | 	add	local03, #20
2f620     FF FF FF FF 
2f624     55 FF 6B FC | 	wrlong	##-1, local03
2f628     04 AA 86 F1 | 	sub	local03, #4
2f62c     FF FF FF FF 
2f630     55 FF 6B FC | 	wrlong	##-1, local03
2f634     0C AA 86 F1 | 	sub	local03, #12
2f638     55 01 49 FC | 	wrbyte	#128, local03
2f63c     04 AA 86 F1 | 	sub	local03, #4
2f640     03 B6 0E F2 | 	cmp	local09, #3 wz
2f644     55 93 02 A6 |  if_e	mov	arg01, local03
2f648     64 92 06 A1 |  if_e	add	arg01, #100
2f64c                 | ' {
2f64c                 | ' 
2f64c                 | ' 	return *((WORD*)ptr);
2f64c     49 7B E2 AA |  if_e	rdword	result1, arg01
2f650     3D AD 32 A9 |  if_e	getword	local04, result1, #0
2f654     01 AC 0E A2 |  if_e	cmp	local04, #1 wz
2f658     A4 00 90 5D |  if_ne	jmp	#LR__5048
2f65c     01 AE 06 F1 | 	add	local05, #1
2f660     55 93 02 F6 | 	mov	arg01, local03
2f664     57 95 02 F6 | 	mov	arg02, local05
2f668     E8 D4 BF FD | 	call	#_fatfs_cc_move_window
2f66c     00 7A 0E F2 | 	cmp	result1, #0 wz
2f670     8C 00 90 5D |  if_ne	jmp	#LR__5048
2f674     04 AA 06 F1 | 	add	local03, #4
2f678     55 01 48 FC | 	wrbyte	#0, local03
2f67c     30 AA 06 F1 | 	add	local03, #48
2f680     55 93 02 F6 | 	mov	arg01, local03
2f684     34 AA 86 F1 | 	sub	local03, #52
2f688     FE 93 06 F1 | 	add	arg01, #510
2f68c                 | ' {
2f68c                 | ' 
2f68c                 | ' 	return *((WORD*)ptr);
2f68c     49 7B E2 FA | 	rdword	result1, arg01
2f690     3D AD 32 F9 | 	getword	local04, result1, #0
2f694     55 00 00 FF 
2f698     55 AC 0E F2 | 	cmp	local04, ##43605 wz
2f69c     55 93 02 A6 |  if_e	mov	arg01, local03
2f6a0     34 92 06 A1 |  if_e	add	arg01, #52
2f6a4                 | ' {
2f6a4                 | ' 
2f6a4                 | ' 	return *((DWORD*)ptr);
2f6a4     49 7B 02 AB |  if_e	rdlong	result1, arg01
2f6a8     A9 B0 20 AF 
2f6ac     52 7A 0E A2 |  if_e	cmp	result1, ##1096897106 wz
2f6b0     55 93 02 A6 |  if_e	mov	arg01, local03
2f6b4     01 00 00 AF 
2f6b8     18 92 06 A1 |  if_e	add	arg01, ##536
2f6bc                 | ' {
2f6bc                 | ' 
2f6bc                 | ' 	return *((DWORD*)ptr);
2f6bc     49 7B 02 AB |  if_e	rdlong	result1, arg01
2f6c0     B9 A0 30 AF 
2f6c4     72 7A 0E A2 |  if_e	cmp	result1, ##1631679090 wz
2f6c8     34 00 90 5D |  if_ne	jmp	#LR__5047
2f6cc     34 AA 06 F1 | 	add	local03, #52
2f6d0     55 93 02 F6 | 	mov	arg01, local03
2f6d4     E8 93 06 F1 | 	add	arg01, #488
2f6d8                 | ' {
2f6d8                 | ' 
2f6d8                 | ' 	return *((DWORD*)ptr);
2f6d8     49 7B 02 FB | 	rdlong	result1, arg01
2f6dc     20 AA 86 F1 | 	sub	local03, #32
2f6e0     55 7B 62 FC | 	wrlong	result1, local03
2f6e4     20 AA 06 F1 | 	add	local03, #32
2f6e8     55 93 02 F6 | 	mov	arg01, local03
2f6ec     EC 93 06 F1 | 	add	arg01, #492
2f6f0                 | ' {
2f6f0                 | ' 
2f6f0                 | ' 	return *((DWORD*)ptr);
2f6f0     49 7B 02 FB | 	rdlong	result1, arg01
2f6f4     24 AA 86 F1 | 	sub	local03, #36
2f6f8     55 7B 62 FC | 	wrlong	result1, local03
2f6fc     10 AA 86 F1 | 	sub	local03, #16
2f700                 | LR__5047
2f700                 | LR__5048
2f700     55 B7 42 FC | 	wrbyte	local09, local03
2f704     04 64 06 F1 | 	add	objptr, #4
2f708     32 AD E2 FA | 	rdword	local04, objptr
2f70c     01 AC 06 F1 | 	add	local04, #1
2f710     32 AD 52 FC | 	wrword	local04, objptr
2f714     56 B9 32 F9 | 	getword	local10, local04, #0
2f718     06 AA 06 F1 | 	add	local03, #6
2f71c     55 B9 52 FC | 	wrword	local10, local03
2f720     04 64 06 F1 | 	add	objptr, #4
2f724     06 AA 06 F1 | 	add	local03, #6
2f728     55 65 62 FC | 	wrlong	objptr, local03
2f72c                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2f72c                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2f72c                 | ' 			{
2f72c                 | ' 
2f72c                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2f72c                 | ' 
2f72c                 | ' 
2f72c                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2f72c                 | ' 
2f72c                 | ' 			}
2f72c                 | ' 		}
2f72c                 | ' 
2f72c                 | ' 
2f72c                 | ' 	}
2f72c                 | ' 
2f72c                 | ' 	fs->fs_type = (BYTE)fmt;
2f72c                 | ' 	fs->id = ++Fsid;
2f72c                 | ' 
2f72c                 | ' 	fs->lfnbuf = LfnBuf;
2f72c                 | ' #line 3567 "ff.c"
2f72c                 | ' 	return FR_OK;
2f72c     00 7A 06 F6 | 	mov	result1, #0
2f730     08 64 86 F1 | 	sub	objptr, #8
2f734                 | LR__5049
2f734     E7 F0 03 F6 | 	mov	ptra, fp
2f738     F2 00 A0 FD | 	call	#popregs_
2f73c                 | _fatfs_cc_mount_volume_ret
2f73c     2D 00 64 FD | 	ret
2f740                 | 
2f740                 | _fatfs_cc_validate
2f740     49 81 0A F6 | 	mov	_var01, arg01 wz
2f744     09 82 06 F6 | 	mov	_var02, #9
2f748     40 85 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2f74c     42 87 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2f750     48 00 90 AD |  if_e	jmp	#LR__5050
2f754     04 80 06 F1 | 	add	_var01, #4
2f758     40 87 E2 FA | 	rdword	_var04, _var01
2f75c     04 80 86 F1 | 	sub	_var01, #4
2f760     40 93 02 FB | 	rdlong	arg01, _var01
2f764     06 92 06 F1 | 	add	arg01, #6
2f768     49 7B E2 FA | 	rdword	result1, arg01
2f76c     3D 87 0A F2 | 	cmp	_var04, result1 wz
2f770     28 00 90 5D |  if_ne	jmp	#LR__5050
2f774     01 00 00 FF 
2f778     10 64 06 F1 | 	add	objptr, ##528
2f77c     32 87 0A FB | 	rdlong	_var04, objptr wz
2f780     01 00 00 FF 
2f784     10 64 86 F1 | 	sub	objptr, ##528
2f788                 | '         return RES_NOTRDY;
2f788     03 7A 06 A6 |  if_e	mov	result1, #3
2f78c                 | '     }
2f78c                 | '     return RES_OK;
2f78c     00 7A 06 56 |  if_ne	mov	result1, #0
2f790     3D 85 E2 F8 | 	getbyte	_var03, result1, #0
2f794     01 84 CE F7 | 	test	_var03, #1 wz
2f798     00 82 06 A6 |  if_e	mov	_var02, #0
2f79c                 | LR__5050
2f79c     00 82 0E F2 | 	cmp	_var02, #0 wz
2f7a0     40 85 02 AB |  if_e	rdlong	_var03, _var01
2f7a4     00 84 06 56 |  if_ne	mov	_var03, #0
2f7a8     4A 85 62 FC | 	wrlong	_var03, arg02
2f7ac                 | ' 			res = FR_OK;
2f7ac                 | ' 		}
2f7ac                 | ' 
2f7ac                 | ' 	}
2f7ac                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2f7ac                 | ' 	return res;
2f7ac     41 7B 02 F6 | 	mov	result1, _var02
2f7b0                 | _fatfs_cc_validate_ret
2f7b0     2D 00 64 FD | 	ret
2f7b4                 | 
2f7b4                 | _fatfs_cc_f_mount
2f7b4     04 CA 05 F6 | 	mov	COUNT_, #4
2f7b8     E8 00 A0 FD | 	call	#pushregs_
2f7bc     20 F0 07 F1 | 	add	ptra, #32
2f7c0     04 CE 05 F1 | 	add	fp, #4
2f7c4     E7 92 62 FC | 	wrlong	arg01, fp
2f7c8     04 CE 05 F1 | 	add	fp, #4
2f7cc     E7 94 62 FC | 	wrlong	arg02, fp
2f7d0     4B A7 02 F6 | 	mov	local01, arg03
2f7d4     14 CE 05 F1 | 	add	fp, #20
2f7d8     E7 94 62 FC | 	wrlong	arg02, fp
2f7dc     E7 92 02 F6 | 	mov	arg01, fp
2f7e0     1C CE 85 F1 | 	sub	fp, #28
2f7e4     EC F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2f7e8     3D A9 02 F6 | 	mov	local02, result1
2f7ec     00 A8 56 F2 | 	cmps	local02, #0 wc
2f7f0     0B 7A 06 C6 |  if_b	mov	result1, #11
2f7f4     84 00 90 CD |  if_b	jmp	#LR__5061
2f7f8     54 97 02 F6 | 	mov	arg03, local02
2f7fc     02 96 66 F0 | 	shl	arg03, #2
2f800     32 97 02 F1 | 	add	arg03, objptr
2f804     4B AB 0A FB | 	rdlong	local03, arg03 wz
2f808     14 00 90 AD |  if_e	jmp	#LR__5060
2f80c     01 AA 06 F1 | 	add	local03, #1
2f810     55 93 C2 FA | 	rdbyte	arg01, local03
2f814     01 AA 86 F1 | 	sub	local03, #1
2f818     F8 2B B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2f81c     55 01 48 FC | 	wrbyte	#0, local03
2f820                 | LR__5060
2f820     04 CE 05 F1 | 	add	fp, #4
2f824     E7 AC 0A FB | 	rdlong	local04, fp wz
2f828     04 CE 85 F1 | 	sub	fp, #4
2f82c     04 CE 05 51 |  if_ne	add	fp, #4
2f830     E7 AC 02 5B |  if_ne	rdlong	local04, fp
2f834     04 CE 85 51 |  if_ne	sub	fp, #4
2f838     56 01 48 5C |  if_ne	wrbyte	#0, local04
2f83c     02 A8 66 F0 | 	shl	local02, #2
2f840     32 A9 02 F1 | 	add	local02, objptr
2f844     04 CE 05 F1 | 	add	fp, #4
2f848     E7 AC 02 FB | 	rdlong	local04, fp
2f84c     04 CE 85 F1 | 	sub	fp, #4
2f850     54 AD 62 FC | 	wrlong	local04, local02
2f854     07 A6 4E F7 | 	zerox	local01, #7 wz
2f858     00 7A 06 A6 |  if_e	mov	result1, #0
2f85c     1C 00 90 AD |  if_e	jmp	#LR__5061
2f860     08 CE 05 F1 | 	add	fp, #8
2f864     E7 92 02 F6 | 	mov	arg01, fp
2f868     04 CE 85 F1 | 	sub	fp, #4
2f86c     E7 94 02 F6 | 	mov	arg02, fp
2f870     04 CE 85 F1 | 	sub	fp, #4
2f874     00 96 06 F6 | 	mov	arg03, #0
2f878     94 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2f87c                 | ' 
2f87c                 | ' 	res = mount_volume(&path, &fs, 0);
2f87c                 | ' 	return res ;
2f87c                 | LR__5061
2f87c     E7 F0 03 F6 | 	mov	ptra, fp
2f880     F2 00 A0 FD | 	call	#popregs_
2f884                 | _fatfs_cc_f_mount_ret
2f884     2D 00 64 FD | 	ret
2f888                 | 
2f888                 | _fatfs_cc_f_open
2f888     08 CA 05 F6 | 	mov	COUNT_, #8
2f88c     E8 00 A0 FD | 	call	#pushregs_
2f890     60 F0 07 F1 | 	add	ptra, #96
2f894     49 A7 0A F6 | 	mov	local01, arg01 wz
2f898     08 CE 05 F1 | 	add	fp, #8
2f89c     E7 94 62 FC | 	wrlong	arg02, fp
2f8a0     08 CE 85 F1 | 	sub	fp, #8
2f8a4     4B A9 02 F6 | 	mov	local02, arg03
2f8a8     09 7A 06 A6 |  if_e	mov	result1, #9
2f8ac     24 04 90 AD |  if_e	jmp	#LR__5087
2f8b0     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2f8b4     3F A8 06 F5 | 	and	local02, #63
2f8b8     08 CE 05 F1 | 	add	fp, #8
2f8bc     E7 92 02 F6 | 	mov	arg01, fp
2f8c0     3C CE 05 F1 | 	add	fp, #60
2f8c4     E7 94 02 F6 | 	mov	arg02, fp
2f8c8     44 CE 85 F1 | 	sub	fp, #68
2f8cc     54 97 02 F6 | 	mov	arg03, local02
2f8d0     3C F9 BF FD | 	call	#_fatfs_cc_mount_volume
2f8d4     3D AB 0A F6 | 	mov	local03, result1 wz
2f8d8     EC 03 90 5D |  if_ne	jmp	#LR__5086
2f8dc     44 CE 05 F1 | 	add	fp, #68
2f8e0     E7 AA 02 FB | 	rdlong	local03, fp
2f8e4     30 CE 85 F1 | 	sub	fp, #48
2f8e8     E7 AA 62 FC | 	wrlong	local03, fp
2f8ec     E7 92 02 F6 | 	mov	arg01, fp
2f8f0     0C CE 85 F1 | 	sub	fp, #12
2f8f4     E7 AC 02 FB | 	rdlong	local04, fp
2f8f8     08 CE 85 F1 | 	sub	fp, #8
2f8fc     56 95 02 F6 | 	mov	arg02, local04
2f900     70 F4 BF FD | 	call	#_fatfs_cc_follow_path
2f904     3D AB 0A F6 | 	mov	local03, result1 wz
2f908     18 00 90 5D |  if_ne	jmp	#LR__5070
2f90c     3F CE 05 F1 | 	add	fp, #63
2f910     E7 AC C2 FA | 	rdbyte	local04, fp
2f914     3F CE 85 F1 | 	sub	fp, #63
2f918     56 99 E2 F8 | 	getbyte	arg04, local04, #0
2f91c     80 98 CE F7 | 	test	arg04, #128 wz
2f920     06 AA 06 56 |  if_ne	mov	local03, #6
2f924                 | LR__5070
2f924     54 99 E2 F8 | 	getbyte	arg04, local02, #0
2f928     1C 98 CE F7 | 	test	arg04, #28 wz
2f92c     5C 01 90 AD |  if_e	jmp	#LR__5075
2f930     00 AA 0E F2 | 	cmp	local03, #0 wz
2f934     24 00 90 AD |  if_e	jmp	#LR__5072
2f938     04 AA 0E F2 | 	cmp	local03, #4 wz
2f93c     10 00 90 5D |  if_ne	jmp	#LR__5071
2f940     E7 92 02 F6 | 	mov	arg01, fp
2f944     14 92 06 F1 | 	add	arg01, #20
2f948     4C E8 BF FD | 	call	#_fatfs_cc_dir_register
2f94c     3D AB 02 F6 | 	mov	local03, result1
2f950                 | LR__5071
2f950     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2f954     08 A8 46 F5 | 	or	local02, #8
2f958     24 00 90 FD | 	jmp	#LR__5074
2f95c                 | LR__5072
2f95c     1A CE 05 F1 | 	add	fp, #26
2f960     E7 AC C2 FA | 	rdbyte	local04, fp
2f964     1A CE 85 F1 | 	sub	fp, #26
2f968     11 AC CE F7 | 	test	local04, #17 wz
2f96c     07 AA 06 56 |  if_ne	mov	local03, #7
2f970     0C 00 90 5D |  if_ne	jmp	#LR__5073
2f974     54 AD E2 F8 | 	getbyte	local04, local02, #0
2f978     04 AC CE F7 | 	test	local04, #4 wz
2f97c     08 AA 06 56 |  if_ne	mov	local03, #8
2f980                 | LR__5073
2f980                 | LR__5074
2f980     00 AA 0E F2 | 	cmp	local03, #0 wz
2f984     40 01 90 5D |  if_ne	jmp	#LR__5078
2f988     54 AD E2 F8 | 	getbyte	local04, local02, #0
2f98c     08 AC CE F7 | 	test	local04, #8 wz
2f990     34 01 90 AD |  if_e	jmp	#LR__5078
2f994     C0 1B B0 FD | 	call	#_fatfs_cc__get_fattime
2f998     30 CE 05 F1 | 	add	fp, #48
2f99c     E7 92 02 FB | 	rdlong	arg01, fp
2f9a0     0E 92 06 F1 | 	add	arg01, #14
2f9a4     49 7B 62 FC | 	wrlong	result1, arg01
2f9a8     E7 92 02 FB | 	rdlong	arg01, fp
2f9ac     16 92 06 F1 | 	add	arg01, #22
2f9b0     49 7B 62 FC | 	wrlong	result1, arg01
2f9b4     14 CE 05 F1 | 	add	fp, #20
2f9b8     E7 92 02 FB | 	rdlong	arg01, fp
2f9bc     14 CE 85 F1 | 	sub	fp, #20
2f9c0     E7 94 02 FB | 	rdlong	arg02, fp
2f9c4     30 CE 85 F1 | 	sub	fp, #48
2f9c8     C0 DE BF FD | 	call	#_fatfs_cc_ld_clust
2f9cc     3D AD 02 F6 | 	mov	local04, result1
2f9d0     30 CE 05 F1 | 	add	fp, #48
2f9d4     E7 98 02 FB | 	rdlong	arg04, fp
2f9d8     0B 98 06 F1 | 	add	arg04, #11
2f9dc     4C 41 48 FC | 	wrbyte	#32, arg04
2f9e0     14 CE 05 F1 | 	add	fp, #20
2f9e4     E7 92 02 FB | 	rdlong	arg01, fp
2f9e8     14 CE 85 F1 | 	sub	fp, #20
2f9ec     E7 94 02 FB | 	rdlong	arg02, fp
2f9f0     30 CE 85 F1 | 	sub	fp, #48
2f9f4     00 96 06 F6 | 	mov	arg03, #0
2f9f8     C4 DE BF FD | 	call	#_fatfs_cc_st_clust
2f9fc     30 CE 05 F1 | 	add	fp, #48
2fa00     E7 92 02 FB | 	rdlong	arg01, fp
2fa04     1C 92 06 F1 | 	add	arg01, #28
2fa08     49 01 68 FC | 	wrlong	#0, arg01
2fa0c     14 CE 05 F1 | 	add	fp, #20
2fa10     E7 98 02 FB | 	rdlong	arg04, fp
2fa14     44 CE 85 F1 | 	sub	fp, #68
2fa18     03 98 06 F1 | 	add	arg04, #3
2fa1c     4C 03 48 FC | 	wrbyte	#1, arg04
2fa20     00 AC 0E F2 | 	cmp	local04, #0 wz
2fa24     A0 00 90 AD |  if_e	jmp	#LR__5078
2fa28     44 CE 05 F1 | 	add	fp, #68
2fa2c     E7 AA 02 FB | 	rdlong	local03, fp
2fa30     30 AA 06 F1 | 	add	local03, #48
2fa34     55 AF 02 FB | 	rdlong	local05, local03
2fa38     30 CE 85 F1 | 	sub	fp, #48
2fa3c     E7 92 02 F6 | 	mov	arg01, fp
2fa40     14 CE 85 F1 | 	sub	fp, #20
2fa44     56 95 02 F6 | 	mov	arg02, local04
2fa48     00 96 06 F6 | 	mov	arg03, #0
2fa4c     70 D6 BF FD | 	call	#_fatfs_cc_remove_chain
2fa50     3D AB 0A F6 | 	mov	local03, result1 wz
2fa54     70 00 90 5D |  if_ne	jmp	#LR__5078
2fa58     44 CE 05 F1 | 	add	fp, #68
2fa5c     E7 92 02 FB | 	rdlong	arg01, fp
2fa60     44 CE 85 F1 | 	sub	fp, #68
2fa64     57 95 02 F6 | 	mov	arg02, local05
2fa68     E8 D0 BF FD | 	call	#_fatfs_cc_move_window
2fa6c     3D AB 02 F6 | 	mov	local03, result1
2fa70     44 CE 05 F1 | 	add	fp, #68
2fa74     E7 AE 02 FB | 	rdlong	local05, fp
2fa78     44 CE 85 F1 | 	sub	fp, #68
2fa7c     01 AC 86 F1 | 	sub	local04, #1
2fa80     10 AE 06 F1 | 	add	local05, #16
2fa84     57 AD 62 FC | 	wrlong	local04, local05
2fa88     3C 00 90 FD | 	jmp	#LR__5078
2fa8c                 | LR__5075
2fa8c     00 AA 0E F2 | 	cmp	local03, #0 wz
2fa90     34 00 90 5D |  if_ne	jmp	#LR__5077
2fa94     1A CE 05 F1 | 	add	fp, #26
2fa98     E7 AE C2 FA | 	rdbyte	local05, fp
2fa9c     1A CE 85 F1 | 	sub	fp, #26
2faa0     10 AE CE F7 | 	test	local05, #16 wz
2faa4     04 AA 06 56 |  if_ne	mov	local03, #4
2faa8     1C 00 90 5D |  if_ne	jmp	#LR__5076
2faac     54 AF E2 F8 | 	getbyte	local05, local02, #0
2fab0     02 AE CE F7 | 	test	local05, #2 wz
2fab4     1A CE 05 51 |  if_ne	add	fp, #26
2fab8     E7 AC C2 5A |  if_ne	rdbyte	local04, fp
2fabc     1A CE 85 51 |  if_ne	sub	fp, #26
2fac0     01 AC CE 57 |  if_ne	test	local04, #1 wz
2fac4     07 AA 06 56 |  if_ne	mov	local03, #7
2fac8                 | LR__5076
2fac8                 | LR__5077
2fac8                 | LR__5078
2fac8     00 AA 0E F2 | 	cmp	local03, #0 wz
2facc     40 00 90 5D |  if_ne	jmp	#LR__5079
2fad0     54 AF E2 F8 | 	getbyte	local05, local02, #0
2fad4     08 AE CE F7 | 	test	local05, #8 wz
2fad8     54 A9 E2 58 |  if_ne	getbyte	local02, local02, #0
2fadc     40 A8 46 55 |  if_ne	or	local02, #64
2fae0     44 CE 05 F1 | 	add	fp, #68
2fae4     E7 AE 02 FB | 	rdlong	local05, fp
2fae8     30 AE 06 F1 | 	add	local05, #48
2faec     57 AF 02 FB | 	rdlong	local05, local05
2faf0     20 A6 06 F1 | 	add	local01, #32
2faf4     53 AF 62 FC | 	wrlong	local05, local01
2faf8     14 CE 85 F1 | 	sub	fp, #20
2fafc     E7 AE 02 FB | 	rdlong	local05, fp
2fb00     30 CE 85 F1 | 	sub	fp, #48
2fb04     04 A6 06 F1 | 	add	local01, #4
2fb08     53 AF 62 FC | 	wrlong	local05, local01
2fb0c     24 A6 86 F1 | 	sub	local01, #36
2fb10                 | LR__5079
2fb10     00 AA 0E F2 | 	cmp	local03, #0 wz
2fb14     B0 01 90 5D |  if_ne	jmp	#LR__5085
2fb18     44 CE 05 F1 | 	add	fp, #68
2fb1c     E7 92 02 FB | 	rdlong	arg01, fp
2fb20     14 CE 85 F1 | 	sub	fp, #20
2fb24     E7 94 02 FB | 	rdlong	arg02, fp
2fb28     30 CE 85 F1 | 	sub	fp, #48
2fb2c     5C DD BF FD | 	call	#_fatfs_cc_ld_clust
2fb30     08 A6 06 F1 | 	add	local01, #8
2fb34     53 7B 62 FC | 	wrlong	result1, local01
2fb38     30 CE 05 F1 | 	add	fp, #48
2fb3c     E7 92 02 FB | 	rdlong	arg01, fp
2fb40     1C 92 06 F1 | 	add	arg01, #28
2fb44                 | ' {
2fb44                 | ' 
2fb44                 | ' 	return *((DWORD*)ptr);
2fb44     49 7B 02 FB | 	rdlong	result1, arg01
2fb48     04 A6 06 F1 | 	add	local01, #4
2fb4c     53 7B 62 FC | 	wrlong	result1, local01
2fb50     0C A6 86 F1 | 	sub	local01, #12
2fb54     14 CE 05 F1 | 	add	fp, #20
2fb58     E7 AE 02 FB | 	rdlong	local05, fp
2fb5c     53 AF 62 FC | 	wrlong	local05, local01
2fb60     E7 AE 02 FB | 	rdlong	local05, fp
2fb64     44 CE 85 F1 | 	sub	fp, #68
2fb68     06 AE 06 F1 | 	add	local05, #6
2fb6c     57 AD E2 FA | 	rdword	local04, local05
2fb70     04 A6 06 F1 | 	add	local01, #4
2fb74     53 AD 52 FC | 	wrword	local04, local01
2fb78     0C A6 06 F1 | 	add	local01, #12
2fb7c     53 A9 42 FC | 	wrbyte	local02, local01
2fb80     01 A6 06 F1 | 	add	local01, #1
2fb84     53 01 48 FC | 	wrbyte	#0, local01
2fb88     0B A6 06 F1 | 	add	local01, #11
2fb8c     53 01 68 FC | 	wrlong	#0, local01
2fb90     08 A6 86 F1 | 	sub	local01, #8
2fb94     53 01 68 FC | 	wrlong	#0, local01
2fb98     14 A6 06 F1 | 	add	local01, #20
2fb9c     53 93 02 F6 | 	mov	arg01, local01
2fba0     28 A6 86 F1 | 	sub	local01, #40
2fba4     00 94 06 F6 | 	mov	arg02, #0
2fba8     09 96 C6 F9 | 	decod	arg03, #9
2fbac     D8 00 A0 FD | 	call	#\builtin_bytefill_
2fbb0     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2fbb4     20 A8 CE F7 | 	test	local02, #32 wz
2fbb8     0C 01 90 AD |  if_e	jmp	#LR__5084
2fbbc     0C A6 06 F1 | 	add	local01, #12
2fbc0     53 AD 02 FB | 	rdlong	local04, local01
2fbc4     0C A6 86 F1 | 	sub	local01, #12
2fbc8     01 AC 16 F2 | 	cmp	local04, #1 wc
2fbcc     F8 00 90 CD |  if_b	jmp	#LR__5084
2fbd0     0C A6 06 F1 | 	add	local01, #12
2fbd4     53 AD 02 FB | 	rdlong	local04, local01
2fbd8     08 A6 06 F1 | 	add	local01, #8
2fbdc     53 AD 62 FC | 	wrlong	local04, local01
2fbe0     44 CE 05 F1 | 	add	fp, #68
2fbe4     E7 AC 02 FB | 	rdlong	local04, fp
2fbe8     44 CE 85 F1 | 	sub	fp, #68
2fbec     0A AC 06 F1 | 	add	local04, #10
2fbf0     56 B1 E2 FA | 	rdword	local06, local04
2fbf4     09 B0 66 F0 | 	shl	local06, #9
2fbf8     0C A6 86 F1 | 	sub	local01, #12
2fbfc     53 B3 02 FB | 	rdlong	local07, local01
2fc00                 | ' 				fp->fptr = fp->obj.objsize;
2fc00                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2fc00                 | ' 				clst = fp->obj.sclust;
2fc00                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2fc00     04 A6 06 F1 | 	add	local01, #4
2fc04     53 B5 02 FB | 	rdlong	local08, local01
2fc08     0C A6 86 F1 | 	sub	local01, #12
2fc0c                 | LR__5080
2fc0c     00 AA 0E F2 | 	cmp	local03, #0 wz
2fc10     34 00 90 5D |  if_ne	jmp	#LR__5081
2fc14     58 B5 1A F2 | 	cmp	local08, local06 wcz
2fc18     2C 00 90 ED |  if_be	jmp	#LR__5081
2fc1c     53 93 02 F6 | 	mov	arg01, local01
2fc20     59 95 02 F6 | 	mov	arg02, local07
2fc24     E4 D0 BF FD | 	call	#_fatfs_cc_get_fat
2fc28     3D B3 02 F6 | 	mov	local07, result1
2fc2c     02 B2 16 F2 | 	cmp	local07, #2 wc
2fc30     02 AA 06 C6 |  if_b	mov	local03, #2
2fc34     FF FF 7F FF 
2fc38     FF B3 0E F2 | 	cmp	local07, ##-1 wz
2fc3c     01 AA 06 A6 |  if_e	mov	local03, #1
2fc40     58 B5 82 F1 | 	sub	local08, local06
2fc44     C4 FF 9F FD | 	jmp	#LR__5080
2fc48                 | LR__5081
2fc48     18 A6 06 F1 | 	add	local01, #24
2fc4c     53 B3 62 FC | 	wrlong	local07, local01
2fc50     18 A6 86 F1 | 	sub	local01, #24
2fc54     00 AA 0E F2 | 	cmp	local03, #0 wz
2fc58     6C 00 90 5D |  if_ne	jmp	#LR__5083
2fc5c     FF B5 CE F7 | 	test	local08, #511 wz
2fc60     64 00 90 AD |  if_e	jmp	#LR__5083
2fc64     44 CE 05 F1 | 	add	fp, #68
2fc68     E7 92 02 FB | 	rdlong	arg01, fp
2fc6c     44 CE 85 F1 | 	sub	fp, #68
2fc70     59 95 02 F6 | 	mov	arg02, local07
2fc74     54 D0 BF FD | 	call	#_fatfs_cc_clst2sect
2fc78     3D AF 0A F6 | 	mov	local05, result1 wz
2fc7c     02 AA 06 A6 |  if_e	mov	local03, #2
2fc80     44 00 90 AD |  if_e	jmp	#LR__5082
2fc84     09 B4 46 F0 | 	shr	local08, #9
2fc88     5A AF 02 F1 | 	add	local05, local08
2fc8c     1C A6 06 F1 | 	add	local01, #28
2fc90     53 AF 62 FC | 	wrlong	local05, local01
2fc94     44 CE 05 F1 | 	add	fp, #68
2fc98     E7 AC 02 FB | 	rdlong	local04, fp
2fc9c     44 CE 85 F1 | 	sub	fp, #68
2fca0     01 AC 06 F1 | 	add	local04, #1
2fca4     56 93 C2 FA | 	rdbyte	arg01, local04
2fca8     53 95 02 F6 | 	mov	arg02, local01
2fcac     0C 94 06 F1 | 	add	arg02, #12
2fcb0     57 97 02 F6 | 	mov	arg03, local05
2fcb4     1C A6 86 F1 | 	sub	local01, #28
2fcb8     01 98 06 F6 | 	mov	arg04, #1
2fcbc     0C C8 BF FD | 	call	#_fatfs_cc_disk_read
2fcc0     00 7A 0E F2 | 	cmp	result1, #0 wz
2fcc4     01 AA 06 56 |  if_ne	mov	local03, #1
2fcc8                 | LR__5082
2fcc8                 | LR__5083
2fcc8                 | LR__5084
2fcc8                 | LR__5085
2fcc8                 | LR__5086
2fcc8     00 AA 0E F2 | 	cmp	local03, #0 wz
2fccc     53 01 68 5C |  if_ne	wrlong	#0, local01
2fcd0                 | ' 
2fcd0                 | ' 	return res ;
2fcd0     55 7B 02 F6 | 	mov	result1, local03
2fcd4                 | LR__5087
2fcd4     E7 F0 03 F6 | 	mov	ptra, fp
2fcd8     F2 00 A0 FD | 	call	#popregs_
2fcdc                 | _fatfs_cc_f_open_ret
2fcdc     2D 00 64 FD | 	ret
2fce0                 | 
2fce0                 | _fatfs_cc_f_read
2fce0     0E CA 05 F6 | 	mov	COUNT_, #14
2fce4     E8 00 A0 FD | 	call	#pushregs_
2fce8     38 F0 07 F1 | 	add	ptra, #56
2fcec     49 A7 02 F6 | 	mov	local01, arg01
2fcf0     4A A9 02 F6 | 	mov	local02, arg02
2fcf4     4B AB 02 F6 | 	mov	local03, arg03
2fcf8     4C AD 02 F6 | 	mov	local04, arg04
2fcfc     54 AF 02 F6 | 	mov	local05, local02
2fd00     56 01 68 FC | 	wrlong	#0, local04
2fd04     E7 94 02 F6 | 	mov	arg02, fp
2fd08     18 94 06 F1 | 	add	arg02, #24
2fd0c     53 93 02 F6 | 	mov	arg01, local01
2fd10     2C FA BF FD | 	call	#_fatfs_cc_validate
2fd14     3D B1 0A F6 | 	mov	local06, result1 wz
2fd18     11 A6 06 A1 |  if_e	add	local01, #17
2fd1c     53 B1 C2 AA |  if_e	rdbyte	local06, local01
2fd20     11 A6 86 A1 |  if_e	sub	local01, #17
2fd24     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
2fd28     58 7B 02 56 |  if_ne	mov	result1, local06
2fd2c     3C 03 90 5D |  if_ne	jmp	#LR__5101
2fd30     10 A6 06 F1 | 	add	local01, #16
2fd34     53 B3 C2 FA | 	rdbyte	local07, local01
2fd38     10 A6 86 F1 | 	sub	local01, #16
2fd3c     01 B2 CE F7 | 	test	local07, #1 wz
2fd40     07 7A 06 A6 |  if_e	mov	result1, #7
2fd44     24 03 90 AD |  if_e	jmp	#LR__5101
2fd48     0C A6 06 F1 | 	add	local01, #12
2fd4c     53 B5 02 FB | 	rdlong	local08, local01
2fd50     08 A6 06 F1 | 	add	local01, #8
2fd54     53 B7 02 FB | 	rdlong	local09, local01
2fd58     14 A6 86 F1 | 	sub	local01, #20
2fd5c     5B B5 82 F1 | 	sub	local08, local09
2fd60     5A AB 3A F3 | 	fle	local03, local08 wcz
2fd64                 | ' 
2fd64                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2fd64                 | LR__5090
2fd64     01 AA 16 F2 | 	cmp	local03, #1 wc
2fd68     FC 02 90 CD |  if_b	jmp	#LR__5100
2fd6c     14 A6 06 F1 | 	add	local01, #20
2fd70     53 B3 02 FB | 	rdlong	local07, local01
2fd74     14 A6 86 F1 | 	sub	local01, #20
2fd78     FF B3 CE F7 | 	test	local07, #511 wz
2fd7c     80 02 90 5D |  if_ne	jmp	#LR__5098
2fd80     14 A6 06 F1 | 	add	local01, #20
2fd84     53 B9 02 FB | 	rdlong	local10, local01
2fd88     14 A6 86 F1 | 	sub	local01, #20
2fd8c     09 B8 46 F0 | 	shr	local10, #9
2fd90     18 CE 05 F1 | 	add	fp, #24
2fd94     E7 B2 02 FB | 	rdlong	local07, fp
2fd98     18 CE 85 F1 | 	sub	fp, #24
2fd9c     0A B2 06 F1 | 	add	local07, #10
2fda0     59 B3 E2 FA | 	rdword	local07, local07
2fda4     01 B2 86 F1 | 	sub	local07, #1
2fda8     59 B9 0A F5 | 	and	local10, local07 wz
2fdac     6C 00 90 5D |  if_ne	jmp	#LR__5092
2fdb0     14 A6 06 F1 | 	add	local01, #20
2fdb4     53 B3 0A FB | 	rdlong	local07, local01 wz
2fdb8     14 A6 86 F1 | 	sub	local01, #20
2fdbc     08 A6 06 A1 |  if_e	add	local01, #8
2fdc0     53 BB 02 AB |  if_e	rdlong	local11, local01
2fdc4     08 A6 86 A1 |  if_e	sub	local01, #8
2fdc8     18 00 90 AD |  if_e	jmp	#LR__5091
2fdcc     53 93 02 F6 | 	mov	arg01, local01
2fdd0     18 A6 06 F1 | 	add	local01, #24
2fdd4     53 95 02 FB | 	rdlong	arg02, local01
2fdd8     18 A6 86 F1 | 	sub	local01, #24
2fddc     2C CF BF FD | 	call	#_fatfs_cc_get_fat
2fde0     3D BB 02 F6 | 	mov	local11, result1
2fde4                 | LR__5091
2fde4     02 BA 16 F2 | 	cmp	local11, #2 wc
2fde8     11 A6 06 C1 |  if_b	add	local01, #17
2fdec     53 05 48 CC |  if_b	wrbyte	#2, local01
2fdf0     02 7A 06 C6 |  if_b	mov	result1, #2
2fdf4     74 02 90 CD |  if_b	jmp	#LR__5101
2fdf8     FF FF 7F FF 
2fdfc     FF BB 0E F2 | 	cmp	local11, ##-1 wz
2fe00     11 A6 06 A1 |  if_e	add	local01, #17
2fe04     53 03 48 AC |  if_e	wrbyte	#1, local01
2fe08     01 7A 06 A6 |  if_e	mov	result1, #1
2fe0c     5C 02 90 AD |  if_e	jmp	#LR__5101
2fe10     18 A6 06 F1 | 	add	local01, #24
2fe14     53 BB 62 FC | 	wrlong	local11, local01
2fe18     18 A6 86 F1 | 	sub	local01, #24
2fe1c                 | LR__5092
2fe1c     18 CE 05 F1 | 	add	fp, #24
2fe20     E7 92 02 FB | 	rdlong	arg01, fp
2fe24     18 CE 85 F1 | 	sub	fp, #24
2fe28     18 A6 06 F1 | 	add	local01, #24
2fe2c     53 95 02 FB | 	rdlong	arg02, local01
2fe30     18 A6 86 F1 | 	sub	local01, #24
2fe34     94 CE BF FD | 	call	#_fatfs_cc_clst2sect
2fe38     3D BD 0A F6 | 	mov	local12, result1 wz
2fe3c     11 A6 06 A1 |  if_e	add	local01, #17
2fe40     53 05 48 AC |  if_e	wrbyte	#2, local01
2fe44     02 7A 06 A6 |  if_e	mov	result1, #2
2fe48     20 02 90 AD |  if_e	jmp	#LR__5101
2fe4c     5C BD 02 F1 | 	add	local12, local10
2fe50     55 BF 02 F6 | 	mov	local13, local03
2fe54     09 BE 46 F0 | 	shr	local13, #9
2fe58     01 BE 16 F2 | 	cmp	local13, #1 wc
2fe5c     D8 00 90 CD |  if_b	jmp	#LR__5095
2fe60     5C B3 02 F6 | 	mov	local07, local10
2fe64     5F B3 02 F1 | 	add	local07, local13
2fe68     18 CE 05 F1 | 	add	fp, #24
2fe6c     E7 B6 02 FB | 	rdlong	local09, fp
2fe70     18 CE 85 F1 | 	sub	fp, #24
2fe74     0A B6 06 F1 | 	add	local09, #10
2fe78     5B 7B E2 FA | 	rdword	result1, local09
2fe7c     3D B3 1A F2 | 	cmp	local07, result1 wcz
2fe80     18 00 90 ED |  if_be	jmp	#LR__5093
2fe84     18 CE 05 F1 | 	add	fp, #24
2fe88     E7 BE 02 FB | 	rdlong	local13, fp
2fe8c     18 CE 85 F1 | 	sub	fp, #24
2fe90     0A BE 06 F1 | 	add	local13, #10
2fe94     5F BF E2 FA | 	rdword	local13, local13
2fe98     5C BF 82 F1 | 	sub	local13, local10
2fe9c                 | LR__5093
2fe9c     18 CE 05 F1 | 	add	fp, #24
2fea0     E7 B2 02 FB | 	rdlong	local07, fp
2fea4     18 CE 85 F1 | 	sub	fp, #24
2fea8     01 B2 06 F1 | 	add	local07, #1
2feac     59 93 C2 FA | 	rdbyte	arg01, local07
2feb0     57 95 02 F6 | 	mov	arg02, local05
2feb4     5F 99 02 F6 | 	mov	arg04, local13
2feb8     5E 97 02 F6 | 	mov	arg03, local12
2febc     0C C6 BF FD | 	call	#_fatfs_cc_disk_read
2fec0     00 7A 0E F2 | 	cmp	result1, #0 wz
2fec4     11 A6 06 51 |  if_ne	add	local01, #17
2fec8     53 03 48 5C |  if_ne	wrbyte	#1, local01
2fecc     01 7A 06 56 |  if_ne	mov	result1, #1
2fed0     98 01 90 5D |  if_ne	jmp	#LR__5101
2fed4     10 A6 06 F1 | 	add	local01, #16
2fed8     53 B3 C2 FA | 	rdbyte	local07, local01
2fedc     10 A6 86 F1 | 	sub	local01, #16
2fee0     80 B2 CE F7 | 	test	local07, #128 wz
2fee4     44 00 90 AD |  if_e	jmp	#LR__5094
2fee8     1C A6 06 F1 | 	add	local01, #28
2feec     53 B7 02 FB | 	rdlong	local09, local01
2fef0     1C A6 86 F1 | 	sub	local01, #28
2fef4     5E B7 82 F1 | 	sub	local09, local12
2fef8     5F B7 12 F2 | 	cmp	local09, local13 wc
2fefc     2C 00 90 3D |  if_ae	jmp	#LR__5094
2ff00     57 93 02 F6 | 	mov	arg01, local05
2ff04     1C A6 06 F1 | 	add	local01, #28
2ff08     53 B9 02 FB | 	rdlong	local10, local01
2ff0c     5E B9 82 F1 | 	sub	local10, local12
2ff10     09 B8 66 F0 | 	shl	local10, #9
2ff14     5C 93 02 F1 | 	add	arg01, local10
2ff18     0C A6 06 F1 | 	add	local01, #12
2ff1c     53 95 02 F6 | 	mov	arg02, local01
2ff20     28 A6 86 F1 | 	sub	local01, #40
2ff24     09 96 C6 F9 | 	decod	arg03, #9
2ff28     28 4B BF FD | 	call	#__system____builtin_memmove
2ff2c                 | LR__5094
2ff2c     09 BE 66 F0 | 	shl	local13, #9
2ff30     5F C1 02 F6 | 	mov	local14, local13
2ff34                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2ff34                 | ' 				}
2ff34                 | ' 
2ff34                 | ' 
2ff34                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2ff34                 | ' 				continue;
2ff34     04 01 90 FD | 	jmp	#LR__5099
2ff38                 | LR__5095
2ff38     1C A6 06 F1 | 	add	local01, #28
2ff3c     53 B3 02 FB | 	rdlong	local07, local01
2ff40     1C A6 86 F1 | 	sub	local01, #28
2ff44     5E B3 0A F2 | 	cmp	local07, local12 wz
2ff48     A8 00 90 AD |  if_e	jmp	#LR__5097
2ff4c     10 A6 06 F1 | 	add	local01, #16
2ff50     53 B3 C2 FA | 	rdbyte	local07, local01
2ff54     10 A6 86 F1 | 	sub	local01, #16
2ff58     80 B2 CE F7 | 	test	local07, #128 wz
2ff5c     58 00 90 AD |  if_e	jmp	#LR__5096
2ff60     18 CE 05 F1 | 	add	fp, #24
2ff64     E7 C0 02 FB | 	rdlong	local14, fp
2ff68     18 CE 85 F1 | 	sub	fp, #24
2ff6c     01 C0 06 F1 | 	add	local14, #1
2ff70     60 93 C2 FA | 	rdbyte	arg01, local14
2ff74     28 A6 06 F1 | 	add	local01, #40
2ff78     53 95 02 F6 | 	mov	arg02, local01
2ff7c     0C A6 86 F1 | 	sub	local01, #12
2ff80     53 97 02 FB | 	rdlong	arg03, local01
2ff84     1C A6 86 F1 | 	sub	local01, #28
2ff88     01 98 06 F6 | 	mov	arg04, #1
2ff8c     78 C6 BF FD | 	call	#_fatfs_cc_disk_write
2ff90     00 7A 0E F2 | 	cmp	result1, #0 wz
2ff94     11 A6 06 51 |  if_ne	add	local01, #17
2ff98     53 03 48 5C |  if_ne	wrbyte	#1, local01
2ff9c     01 7A 06 56 |  if_ne	mov	result1, #1
2ffa0     C8 00 90 5D |  if_ne	jmp	#LR__5101
2ffa4     10 A6 06 F1 | 	add	local01, #16
2ffa8     53 B3 C2 FA | 	rdbyte	local07, local01
2ffac     7F B2 06 F5 | 	and	local07, #127
2ffb0     53 B3 42 FC | 	wrbyte	local07, local01
2ffb4     10 A6 86 F1 | 	sub	local01, #16
2ffb8                 | LR__5096
2ffb8     18 CE 05 F1 | 	add	fp, #24
2ffbc     E7 C0 02 FB | 	rdlong	local14, fp
2ffc0     18 CE 85 F1 | 	sub	fp, #24
2ffc4     01 C0 06 F1 | 	add	local14, #1
2ffc8     60 93 C2 FA | 	rdbyte	arg01, local14
2ffcc     53 95 02 F6 | 	mov	arg02, local01
2ffd0     28 94 06 F1 | 	add	arg02, #40
2ffd4     5E 97 02 F6 | 	mov	arg03, local12
2ffd8     01 98 06 F6 | 	mov	arg04, #1
2ffdc     EC C4 BF FD | 	call	#_fatfs_cc_disk_read
2ffe0     00 7A 0E F2 | 	cmp	result1, #0 wz
2ffe4     11 A6 06 51 |  if_ne	add	local01, #17
2ffe8     53 03 48 5C |  if_ne	wrbyte	#1, local01
2ffec     01 7A 06 56 |  if_ne	mov	result1, #1
2fff0     78 00 90 5D |  if_ne	jmp	#LR__5101
2fff4                 | LR__5097
2fff4     1C A6 06 F1 | 	add	local01, #28
2fff8     53 BD 62 FC | 	wrlong	local12, local01
2fffc     1C A6 86 F1 | 	sub	local01, #28
30000                 | LR__5098
30000     14 A6 06 F1 | 	add	local01, #20
30004     53 BF 02 FB | 	rdlong	local13, local01
30008     FF BF 06 F5 | 	and	local13, #511
3000c     09 C0 C6 F9 | 	decod	local14, #9
30010     5F C1 82 F1 | 	sub	local14, local13
30014     55 C1 3A F3 | 	fle	local14, local03 wcz
30018     53 95 02 F6 | 	mov	arg02, local01
3001c     14 94 06 F1 | 	add	arg02, #20
30020     53 BF 02 FB | 	rdlong	local13, local01
30024     14 A6 86 F1 | 	sub	local01, #20
30028     FF BF 06 F5 | 	and	local13, #511
3002c     5F 95 02 F1 | 	add	arg02, local13
30030     57 93 02 F6 | 	mov	arg01, local05
30034     60 97 02 F6 | 	mov	arg03, local14
30038     18 4A BF FD | 	call	#__system____builtin_memmove
3003c                 | LR__5099
3003c     60 AB 82 F1 | 	sub	local03, local14
30040     56 B3 02 FB | 	rdlong	local07, local04
30044     60 B3 02 F1 | 	add	local07, local14
30048     56 B3 62 FC | 	wrlong	local07, local04
3004c     60 AF 02 F1 | 	add	local05, local14
30050     14 A6 06 F1 | 	add	local01, #20
30054     53 B3 02 FB | 	rdlong	local07, local01
30058     60 B3 02 F1 | 	add	local07, local14
3005c     53 B3 62 FC | 	wrlong	local07, local01
30060     14 A6 86 F1 | 	sub	local01, #20
30064     FC FC 9F FD | 	jmp	#LR__5090
30068                 | LR__5100
30068                 | ' 
30068                 | ' 
30068                 | ' 
30068                 | ' 
30068                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
30068                 | ' 
30068                 | ' 	}
30068                 | ' 
30068                 | ' 	return FR_OK ;
30068     00 7A 06 F6 | 	mov	result1, #0
3006c                 | LR__5101
3006c     E7 F0 03 F6 | 	mov	ptra, fp
30070     F2 00 A0 FD | 	call	#popregs_
30074                 | _fatfs_cc_f_read_ret
30074     2D 00 64 FD | 	ret
30078                 | 
30078                 | _fatfs_cc_f_write
30078     12 CA 05 F6 | 	mov	COUNT_, #18
3007c     E8 00 A0 FD | 	call	#pushregs_
30080     34 F0 07 F1 | 	add	ptra, #52
30084     49 A7 02 F6 | 	mov	local01, arg01
30088     4A A9 02 F6 | 	mov	local02, arg02
3008c     4B AB 02 F6 | 	mov	local03, arg03
30090     4C AD 02 F6 | 	mov	local04, arg04
30094     54 AF 02 F6 | 	mov	local05, local02
30098     56 01 68 FC | 	wrlong	#0, local04
3009c     E7 94 02 F6 | 	mov	arg02, fp
300a0     18 94 06 F1 | 	add	arg02, #24
300a4     53 93 02 F6 | 	mov	arg01, local01
300a8     94 F6 BF FD | 	call	#_fatfs_cc_validate
300ac     3D B1 0A F6 | 	mov	local06, result1 wz
300b0     11 A6 06 A1 |  if_e	add	local01, #17
300b4     53 B1 C2 AA |  if_e	rdbyte	local06, local01
300b8     11 A6 86 A1 |  if_e	sub	local01, #17
300bc     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
300c0     58 7B 02 56 |  if_ne	mov	result1, local06
300c4     F4 03 90 5D |  if_ne	jmp	#LR__5122
300c8     10 A6 06 F1 | 	add	local01, #16
300cc     53 B3 C2 FA | 	rdbyte	local07, local01
300d0     10 A6 86 F1 | 	sub	local01, #16
300d4     02 B2 CE F7 | 	test	local07, #2 wz
300d8     07 7A 06 A6 |  if_e	mov	result1, #7
300dc     DC 03 90 AD |  if_e	jmp	#LR__5122
300e0     14 A6 06 F1 | 	add	local01, #20
300e4     53 B5 02 FB | 	rdlong	local08, local01
300e8     5A B7 02 F6 | 	mov	local09, local08
300ec     55 B7 02 F1 | 	add	local09, local03
300f0     14 A6 86 F1 | 	sub	local01, #20
300f4     5A B7 12 F2 | 	cmp	local09, local08 wc
300f8     01 AA 66 C6 |  if_b	neg	local03, #1
300fc     14 A6 06 C1 |  if_b	add	local01, #20
30100     53 B9 02 CB |  if_b	rdlong	local10, local01
30104     14 A6 86 C1 |  if_b	sub	local01, #20
30108     5C AB 82 C1 |  if_b	sub	local03, local10
3010c                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
3010c                 | ' 	}
3010c                 | ' 
3010c                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
3010c                 | LR__5110
3010c     01 AA 16 F2 | 	cmp	local03, #1 wc
30110     94 03 90 CD |  if_b	jmp	#LR__5121
30114     14 A6 06 F1 | 	add	local01, #20
30118     53 B3 02 FB | 	rdlong	local07, local01
3011c     14 A6 86 F1 | 	sub	local01, #20
30120     FF B3 CE F7 | 	test	local07, #511 wz
30124     D8 02 90 5D |  if_ne	jmp	#LR__5119
30128     14 A6 06 F1 | 	add	local01, #20
3012c     53 BB 02 FB | 	rdlong	local11, local01
30130     14 A6 86 F1 | 	sub	local01, #20
30134     09 BA 46 F0 | 	shr	local11, #9
30138     18 CE 05 F1 | 	add	fp, #24
3013c     E7 B4 02 FB | 	rdlong	local08, fp
30140     18 CE 85 F1 | 	sub	fp, #24
30144     5A BD 02 F6 | 	mov	local12, local08
30148     0A BC 06 F1 | 	add	local12, #10
3014c     5E BF E2 FA | 	rdword	local13, local12
30150     0A BC 86 F1 | 	sub	local12, #10
30154     5F B7 32 F9 | 	getword	local09, local13, #0
30158     01 B6 86 F1 | 	sub	local09, #1
3015c     5B BB 0A F5 | 	and	local11, local09 wz
30160     A0 00 90 5D |  if_ne	jmp	#LR__5113
30164     14 A6 06 F1 | 	add	local01, #20
30168     53 B3 0A FB | 	rdlong	local07, local01 wz
3016c     14 A6 86 F1 | 	sub	local01, #20
30170     24 00 90 5D |  if_ne	jmp	#LR__5111
30174     08 A6 06 F1 | 	add	local01, #8
30178     53 C1 0A FB | 	rdlong	local14, local01 wz
3017c     08 A6 86 F1 | 	sub	local01, #8
30180     2C 00 90 5D |  if_ne	jmp	#LR__5112
30184     53 93 02 F6 | 	mov	arg01, local01
30188     00 94 06 F6 | 	mov	arg02, #0
3018c     44 D0 BF FD | 	call	#_fatfs_cc_create_chain
30190     3D C1 02 F6 | 	mov	local14, result1
30194     18 00 90 FD | 	jmp	#LR__5112
30198                 | LR__5111
30198     53 93 02 F6 | 	mov	arg01, local01
3019c     18 A6 06 F1 | 	add	local01, #24
301a0     53 95 02 FB | 	rdlong	arg02, local01
301a4     18 A6 86 F1 | 	sub	local01, #24
301a8     28 D0 BF FD | 	call	#_fatfs_cc_create_chain
301ac     3D C1 02 F6 | 	mov	local14, result1
301b0                 | LR__5112
301b0     00 C0 0E F2 | 	cmp	local14, #0 wz
301b4     F0 02 90 AD |  if_e	jmp	#LR__5121
301b8     01 C0 0E F2 | 	cmp	local14, #1 wz
301bc     11 A6 06 A1 |  if_e	add	local01, #17
301c0     53 05 48 AC |  if_e	wrbyte	#2, local01
301c4     02 7A 06 A6 |  if_e	mov	result1, #2
301c8     F0 02 90 AD |  if_e	jmp	#LR__5122
301cc     FF FF 7F FF 
301d0     FF C1 0E F2 | 	cmp	local14, ##-1 wz
301d4     11 A6 06 A1 |  if_e	add	local01, #17
301d8     53 03 48 AC |  if_e	wrbyte	#1, local01
301dc     01 7A 06 A6 |  if_e	mov	result1, #1
301e0     D8 02 90 AD |  if_e	jmp	#LR__5122
301e4     18 A6 06 F1 | 	add	local01, #24
301e8     53 C1 62 FC | 	wrlong	local14, local01
301ec     10 A6 86 F1 | 	sub	local01, #16
301f0     53 B3 0A FB | 	rdlong	local07, local01 wz
301f4     08 A6 86 F1 | 	sub	local01, #8
301f8     08 A6 06 A1 |  if_e	add	local01, #8
301fc     53 C1 62 AC |  if_e	wrlong	local14, local01
30200     08 A6 86 A1 |  if_e	sub	local01, #8
30204                 | LR__5113
30204     10 A6 06 F1 | 	add	local01, #16
30208     53 B3 C2 FA | 	rdbyte	local07, local01
3020c     10 A6 86 F1 | 	sub	local01, #16
30210     80 B2 CE F7 | 	test	local07, #128 wz
30214     58 00 90 AD |  if_e	jmp	#LR__5114
30218     18 CE 05 F1 | 	add	fp, #24
3021c     E7 B8 02 FB | 	rdlong	local10, fp
30220     18 CE 85 F1 | 	sub	fp, #24
30224     01 B8 06 F1 | 	add	local10, #1
30228     5C 93 C2 FA | 	rdbyte	arg01, local10
3022c     28 A6 06 F1 | 	add	local01, #40
30230     53 95 02 F6 | 	mov	arg02, local01
30234     0C A6 86 F1 | 	sub	local01, #12
30238     53 97 02 FB | 	rdlong	arg03, local01
3023c     1C A6 86 F1 | 	sub	local01, #28
30240     01 98 06 F6 | 	mov	arg04, #1
30244     C0 C3 BF FD | 	call	#_fatfs_cc_disk_write
30248     00 7A 0E F2 | 	cmp	result1, #0 wz
3024c     11 A6 06 51 |  if_ne	add	local01, #17
30250     53 03 48 5C |  if_ne	wrbyte	#1, local01
30254     01 7A 06 56 |  if_ne	mov	result1, #1
30258     60 02 90 5D |  if_ne	jmp	#LR__5122
3025c     10 A6 06 F1 | 	add	local01, #16
30260     53 B3 C2 FA | 	rdbyte	local07, local01
30264     7F B2 06 F5 | 	and	local07, #127
30268     53 B3 42 FC | 	wrbyte	local07, local01
3026c     10 A6 86 F1 | 	sub	local01, #16
30270                 | LR__5114
30270     18 CE 05 F1 | 	add	fp, #24
30274     E7 92 02 FB | 	rdlong	arg01, fp
30278     18 CE 85 F1 | 	sub	fp, #24
3027c     18 A6 06 F1 | 	add	local01, #24
30280     53 95 02 FB | 	rdlong	arg02, local01
30284     18 A6 86 F1 | 	sub	local01, #24
30288     40 CA BF FD | 	call	#_fatfs_cc_clst2sect
3028c     3D C3 0A F6 | 	mov	local15, result1 wz
30290     11 A6 06 A1 |  if_e	add	local01, #17
30294     53 05 48 AC |  if_e	wrbyte	#2, local01
30298     02 7A 06 A6 |  if_e	mov	result1, #2
3029c     1C 02 90 AD |  if_e	jmp	#LR__5122
302a0     5D C3 02 F1 | 	add	local15, local11
302a4     55 C5 02 F6 | 	mov	local16, local03
302a8     09 C4 46 F0 | 	shr	local16, #9
302ac     01 C4 16 F2 | 	cmp	local16, #1 wc
302b0     D4 00 90 CD |  if_b	jmp	#LR__5117
302b4     5D B3 02 F6 | 	mov	local07, local11
302b8     62 B3 02 F1 | 	add	local07, local16
302bc     18 CE 05 F1 | 	add	fp, #24
302c0     E7 C6 02 FB | 	rdlong	local17, fp
302c4     18 CE 85 F1 | 	sub	fp, #24
302c8     0A C6 06 F1 | 	add	local17, #10
302cc     63 B9 E2 FA | 	rdword	local10, local17
302d0     5C B3 1A F2 | 	cmp	local07, local10 wcz
302d4     18 00 90 ED |  if_be	jmp	#LR__5115
302d8     18 CE 05 F1 | 	add	fp, #24
302dc     E7 B8 02 FB | 	rdlong	local10, fp
302e0     18 CE 85 F1 | 	sub	fp, #24
302e4     0A B8 06 F1 | 	add	local10, #10
302e8     5C C5 E2 FA | 	rdword	local16, local10
302ec     5D C5 82 F1 | 	sub	local16, local11
302f0                 | LR__5115
302f0     18 CE 05 F1 | 	add	fp, #24
302f4     E7 B8 02 FB | 	rdlong	local10, fp
302f8     18 CE 85 F1 | 	sub	fp, #24
302fc     01 B8 06 F1 | 	add	local10, #1
30300     5C 93 C2 FA | 	rdbyte	arg01, local10
30304     57 95 02 F6 | 	mov	arg02, local05
30308     61 97 02 F6 | 	mov	arg03, local15
3030c     62 99 02 F6 | 	mov	arg04, local16
30310     F4 C2 BF FD | 	call	#_fatfs_cc_disk_write
30314     00 7A 0E F2 | 	cmp	result1, #0 wz
30318     11 A6 06 51 |  if_ne	add	local01, #17
3031c     53 03 48 5C |  if_ne	wrbyte	#1, local01
30320     01 7A 06 56 |  if_ne	mov	result1, #1
30324     94 01 90 5D |  if_ne	jmp	#LR__5122
30328     1C A6 06 F1 | 	add	local01, #28
3032c     53 B3 02 FB | 	rdlong	local07, local01
30330     1C A6 86 F1 | 	sub	local01, #28
30334     61 B3 82 F1 | 	sub	local07, local15
30338     62 B3 12 F2 | 	cmp	local07, local16 wc
3033c     3C 00 90 3D |  if_ae	jmp	#LR__5116
30340     28 A6 06 F1 | 	add	local01, #40
30344     53 93 02 F6 | 	mov	arg01, local01
30348     57 95 02 F6 | 	mov	arg02, local05
3034c     0C A6 86 F1 | 	sub	local01, #12
30350     53 BF 02 FB | 	rdlong	local13, local01
30354     61 BF 82 F1 | 	sub	local13, local15
30358     09 BE 66 F0 | 	shl	local13, #9
3035c     5F 95 02 F1 | 	add	arg02, local13
30360     09 96 C6 F9 | 	decod	arg03, #9
30364     EC 46 BF FD | 	call	#__system____builtin_memmove
30368     0C A6 86 F1 | 	sub	local01, #12
3036c     53 B3 C2 FA | 	rdbyte	local07, local01
30370     7F B2 06 F5 | 	and	local07, #127
30374     53 B3 42 FC | 	wrbyte	local07, local01
30378     10 A6 86 F1 | 	sub	local01, #16
3037c                 | LR__5116
3037c     62 C9 02 F6 | 	mov	local18, local16
30380     09 C8 66 F0 | 	shl	local18, #9
30384                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
30384                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
30384                 | ' 				}
30384                 | ' 
30384                 | ' 
30384                 | ' 				wcnt =  ((UINT) 512 )  * cc;
30384                 | ' 				continue;
30384     C4 00 90 FD | 	jmp	#LR__5120
30388                 | LR__5117
30388     1C A6 06 F1 | 	add	local01, #28
3038c     53 B3 02 FB | 	rdlong	local07, local01
30390     1C A6 86 F1 | 	sub	local01, #28
30394     61 B3 0A F2 | 	cmp	local07, local15 wz
30398     58 00 90 AD |  if_e	jmp	#LR__5118
3039c     14 A6 06 F1 | 	add	local01, #20
303a0     53 C7 02 FB | 	rdlong	local17, local01
303a4     08 A6 86 F1 | 	sub	local01, #8
303a8     53 BD 02 FB | 	rdlong	local12, local01
303ac     0C A6 86 F1 | 	sub	local01, #12
303b0     5E C7 12 F2 | 	cmp	local17, local12 wc
303b4     3C 00 90 3D |  if_ae	jmp	#LR__5118
303b8     18 CE 05 F1 | 	add	fp, #24
303bc     E7 C8 02 FB | 	rdlong	local18, fp
303c0     18 CE 85 F1 | 	sub	fp, #24
303c4     01 C8 06 F1 | 	add	local18, #1
303c8     64 93 C2 FA | 	rdbyte	arg01, local18
303cc     53 95 02 F6 | 	mov	arg02, local01
303d0     28 94 06 F1 | 	add	arg02, #40
303d4     61 97 02 F6 | 	mov	arg03, local15
303d8     01 98 06 F6 | 	mov	arg04, #1
303dc     EC C0 BF FD | 	call	#_fatfs_cc_disk_read
303e0     00 7A 0E F2 | 	cmp	result1, #0 wz
303e4     11 A6 06 51 |  if_ne	add	local01, #17
303e8     53 03 48 5C |  if_ne	wrbyte	#1, local01
303ec                 | ' 				fp->fptr < fp->obj.objsize &&
303ec                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
303ec                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
303ec     01 7A 06 56 |  if_ne	mov	result1, #1
303f0     C8 00 90 5D |  if_ne	jmp	#LR__5122
303f4                 | LR__5118
303f4     1C A6 06 F1 | 	add	local01, #28
303f8     53 C3 62 FC | 	wrlong	local15, local01
303fc     1C A6 86 F1 | 	sub	local01, #28
30400                 | LR__5119
30400     14 A6 06 F1 | 	add	local01, #20
30404     53 B9 02 FB | 	rdlong	local10, local01
30408     FF B9 06 F5 | 	and	local10, #511
3040c     09 C8 C6 F9 | 	decod	local18, #9
30410     5C C9 82 F1 | 	sub	local18, local10
30414     55 C9 3A F3 | 	fle	local18, local03 wcz
30418     53 93 02 F6 | 	mov	arg01, local01
3041c     14 92 06 F1 | 	add	arg01, #20
30420     53 BF 02 FB | 	rdlong	local13, local01
30424     FF BF 06 F5 | 	and	local13, #511
30428     5F 93 02 F1 | 	add	arg01, local13
3042c     57 95 02 F6 | 	mov	arg02, local05
30430     64 97 02 F6 | 	mov	arg03, local18
30434     1C 46 BF FD | 	call	#__system____builtin_memmove
30438     04 A6 86 F1 | 	sub	local01, #4
3043c     53 B3 C2 FA | 	rdbyte	local07, local01
30440     80 B2 46 F5 | 	or	local07, #128
30444     53 B3 42 FC | 	wrbyte	local07, local01
30448     10 A6 86 F1 | 	sub	local01, #16
3044c                 | LR__5120
3044c     64 AB 82 F1 | 	sub	local03, local18
30450     56 B3 02 FB | 	rdlong	local07, local04
30454     64 B3 02 F1 | 	add	local07, local18
30458     56 B3 62 FC | 	wrlong	local07, local04
3045c     64 AF 02 F1 | 	add	local05, local18
30460     14 A6 06 F1 | 	add	local01, #20
30464     53 B9 02 FB | 	rdlong	local10, local01
30468     64 B9 02 F1 | 	add	local10, local18
3046c     53 B9 62 FC | 	wrlong	local10, local01
30470     08 A6 86 F1 | 	sub	local01, #8
30474     53 B7 02 FB | 	rdlong	local09, local01
30478     0C A6 86 F1 | 	sub	local01, #12
3047c     5B B9 1A F2 | 	cmp	local10, local09 wcz
30480     14 A6 06 11 |  if_a	add	local01, #20
30484     53 B3 02 1B |  if_a	rdlong	local07, local01
30488     14 A6 86 11 |  if_a	sub	local01, #20
3048c     0C A6 06 E1 |  if_be	add	local01, #12
30490     53 B3 02 EB |  if_be	rdlong	local07, local01
30494     0C A6 86 E1 |  if_be	sub	local01, #12
30498     0C A6 06 F1 | 	add	local01, #12
3049c     53 B3 62 FC | 	wrlong	local07, local01
304a0     0C A6 86 F1 | 	sub	local01, #12
304a4     64 FC 9F FD | 	jmp	#LR__5110
304a8                 | LR__5121
304a8     10 A6 06 F1 | 	add	local01, #16
304ac     53 B3 C2 FA | 	rdbyte	local07, local01
304b0     40 B2 46 F5 | 	or	local07, #64
304b4     53 B3 42 FC | 	wrbyte	local07, local01
304b8                 | ' 
304b8                 | ' 
304b8                 | ' 
304b8                 | ' 
304b8                 | ' 
304b8                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
304b8                 | ' 		fp->flag |=  0x80 ;
304b8                 | ' 
304b8                 | ' 	}
304b8                 | ' 
304b8                 | ' 	fp->flag |=  0x40 ;
304b8                 | ' 
304b8                 | ' 	return FR_OK ;
304b8     00 7A 06 F6 | 	mov	result1, #0
304bc                 | LR__5122
304bc     E7 F0 03 F6 | 	mov	ptra, fp
304c0     F2 00 A0 FD | 	call	#popregs_
304c4                 | _fatfs_cc_f_write_ret
304c4     2D 00 64 FD | 	ret
304c8                 | 
304c8                 | _fatfs_cc_f_sync
304c8     03 CA 05 F6 | 	mov	COUNT_, #3
304cc     E8 00 A0 FD | 	call	#pushregs_
304d0     18 F0 07 F1 | 	add	ptra, #24
304d4     49 A7 02 F6 | 	mov	local01, arg01
304d8     E7 94 02 F6 | 	mov	arg02, fp
304dc     0C 94 06 F1 | 	add	arg02, #12
304e0     53 93 02 F6 | 	mov	arg01, local01
304e4     58 F2 BF FD | 	call	#_fatfs_cc_validate
304e8     3D A9 0A F6 | 	mov	local02, result1 wz
304ec     30 01 90 5D |  if_ne	jmp	#LR__5133
304f0     10 A6 06 F1 | 	add	local01, #16
304f4     53 99 C2 FA | 	rdbyte	arg04, local01
304f8     10 A6 86 F1 | 	sub	local01, #16
304fc     40 98 CE F7 | 	test	arg04, #64 wz
30500     1C 01 90 AD |  if_e	jmp	#LR__5132
30504     10 A6 06 F1 | 	add	local01, #16
30508     53 A9 C2 FA | 	rdbyte	local02, local01
3050c     10 A6 86 F1 | 	sub	local01, #16
30510     80 A8 CE F7 | 	test	local02, #128 wz
30514     50 00 90 AD |  if_e	jmp	#LR__5130
30518     0C CE 05 F1 | 	add	fp, #12
3051c     E7 A8 02 FB | 	rdlong	local02, fp
30520     0C CE 85 F1 | 	sub	fp, #12
30524     01 A8 06 F1 | 	add	local02, #1
30528     54 93 C2 FA | 	rdbyte	arg01, local02
3052c     28 A6 06 F1 | 	add	local01, #40
30530     53 95 02 F6 | 	mov	arg02, local01
30534     0C A6 86 F1 | 	sub	local01, #12
30538     53 97 02 FB | 	rdlong	arg03, local01
3053c     1C A6 86 F1 | 	sub	local01, #28
30540     01 98 06 F6 | 	mov	arg04, #1
30544     C0 C0 BF FD | 	call	#_fatfs_cc_disk_write
30548     00 7A 0E F2 | 	cmp	result1, #0 wz
3054c     01 7A 06 56 |  if_ne	mov	result1, #1
30550     D0 00 90 5D |  if_ne	jmp	#LR__5134
30554     10 A6 06 F1 | 	add	local01, #16
30558     53 A9 C2 FA | 	rdbyte	local02, local01
3055c     7F A8 06 F5 | 	and	local02, #127
30560     53 A9 42 FC | 	wrbyte	local02, local01
30564     10 A6 86 F1 | 	sub	local01, #16
30568                 | LR__5130
30568     EC 0F B0 FD | 	call	#_fatfs_cc__get_fattime
3056c     3D AB 02 F6 | 	mov	local03, result1
30570     0C CE 05 F1 | 	add	fp, #12
30574     E7 92 02 FB | 	rdlong	arg01, fp
30578     0C CE 85 F1 | 	sub	fp, #12
3057c     20 A6 06 F1 | 	add	local01, #32
30580     53 95 02 FB | 	rdlong	arg02, local01
30584     20 A6 86 F1 | 	sub	local01, #32
30588     C8 C5 BF FD | 	call	#_fatfs_cc_move_window
3058c     3D A9 0A F6 | 	mov	local02, result1 wz
30590     8C 00 90 5D |  if_ne	jmp	#LR__5131
30594     24 A6 06 F1 | 	add	local01, #36
30598     53 A9 02 FB | 	rdlong	local02, local01
3059c     24 A6 86 F1 | 	sub	local01, #36
305a0     0B A8 06 F1 | 	add	local02, #11
305a4     54 99 C2 FA | 	rdbyte	arg04, local02
305a8     20 98 46 F5 | 	or	arg04, #32
305ac     54 99 42 FC | 	wrbyte	arg04, local02
305b0     0B A8 86 F1 | 	sub	local02, #11
305b4     53 93 02 FB | 	rdlong	arg01, local01
305b8     08 A6 06 F1 | 	add	local01, #8
305bc     53 97 02 FB | 	rdlong	arg03, local01
305c0     54 95 02 F6 | 	mov	arg02, local02
305c4     F8 D2 BF FD | 	call	#_fatfs_cc_st_clust
305c8     54 93 02 F6 | 	mov	arg01, local02
305cc     1C 92 06 F1 | 	add	arg01, #28
305d0     04 A6 06 F1 | 	add	local01, #4
305d4     53 95 02 FB | 	rdlong	arg02, local01
305d8     49 95 62 FC | 	wrlong	arg02, arg01
305dc     54 93 02 F6 | 	mov	arg01, local02
305e0     16 92 06 F1 | 	add	arg01, #22
305e4     49 AB 62 FC | 	wrlong	local03, arg01
305e8     12 A8 06 F1 | 	add	local02, #18
305ec     54 01 58 FC | 	wrword	#0, local02
305f0     0C CE 05 F1 | 	add	fp, #12
305f4     E7 AA 02 FB | 	rdlong	local03, fp
305f8     03 AA 06 F1 | 	add	local03, #3
305fc     55 03 48 FC | 	wrbyte	#1, local03
30600     E7 92 02 FB | 	rdlong	arg01, fp
30604     0C CE 85 F1 | 	sub	fp, #12
30608     C0 C5 BF FD | 	call	#_fatfs_cc_sync_fs
3060c     3D A9 02 F6 | 	mov	local02, result1
30610     04 A6 06 F1 | 	add	local01, #4
30614     53 AB C2 FA | 	rdbyte	local03, local01
30618     BF AA 06 F5 | 	and	local03, #191
3061c     53 AB 42 FC | 	wrbyte	local03, local01
30620                 | LR__5131
30620                 | LR__5132
30620                 | LR__5133
30620                 | ' 					dir = fp->dir_ptr;
30620                 | ' 					dir[ 11 ] |=  0x20 ;
30620                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
30620                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
30620                 | ' 					st_dword(dir +  22 , tm);
30620                 | ' 					st_word(dir +  18 , 0);
30620                 | ' 					fs->wflag = 1;
30620                 | ' 					res = sync_fs(fs);
30620                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
30620                 | ' 				}
30620                 | ' 			}
30620                 | ' 		}
30620                 | ' 	}
30620                 | ' 
30620                 | ' 	return res ;
30620     54 7B 02 F6 | 	mov	result1, local02
30624                 | LR__5134
30624     E7 F0 03 F6 | 	mov	ptra, fp
30628     F2 00 A0 FD | 	call	#popregs_
3062c                 | _fatfs_cc_f_sync_ret
3062c     2D 00 64 FD | 	ret
30630                 | 
30630                 | _fatfs_cc_f_close
30630     02 CA 05 F6 | 	mov	COUNT_, #2
30634     E8 00 A0 FD | 	call	#pushregs_
30638     10 F0 07 F1 | 	add	ptra, #16
3063c     49 A7 02 F6 | 	mov	local01, arg01
30640     84 FE BF FD | 	call	#_fatfs_cc_f_sync
30644     3D A9 0A F6 | 	mov	local02, result1 wz
30648     18 00 90 5D |  if_ne	jmp	#LR__5140
3064c     E7 94 02 F6 | 	mov	arg02, fp
30650     0C 94 06 F1 | 	add	arg02, #12
30654     53 93 02 F6 | 	mov	arg01, local01
30658     E4 F0 BF FD | 	call	#_fatfs_cc_validate
3065c     3D A9 0A F6 | 	mov	local02, result1 wz
30660     53 01 68 AC |  if_e	wrlong	#0, local01
30664                 | LR__5140
30664                 | ' 
30664                 | ' 
30664                 | ' 
30664                 | ' 
30664                 | ' 			fp->obj.fs = 0;
30664                 | ' #line 4192 "ff.c"
30664                 | ' 		}
30664                 | ' 	}
30664                 | ' 	return res;
30664     54 7B 02 F6 | 	mov	result1, local02
30668     E7 F0 03 F6 | 	mov	ptra, fp
3066c     F2 00 A0 FD | 	call	#popregs_
30670                 | _fatfs_cc_f_close_ret
30670     2D 00 64 FD | 	ret
30674                 | 
30674                 | _fatfs_cc_f_lseek
30674     0D CA 05 F6 | 	mov	COUNT_, #13
30678     E8 00 A0 FD | 	call	#pushregs_
3067c     24 F0 07 F1 | 	add	ptra, #36
30680     49 A7 02 F6 | 	mov	local01, arg01
30684     4A A9 02 F6 | 	mov	local02, arg02
30688     E7 94 02 F6 | 	mov	arg02, fp
3068c     10 94 06 F1 | 	add	arg02, #16
30690     53 93 02 F6 | 	mov	arg01, local01
30694     A8 F0 BF FD | 	call	#_fatfs_cc_validate
30698     3D AB 0A F6 | 	mov	local03, result1 wz
3069c     11 A6 06 A1 |  if_e	add	local01, #17
306a0     53 AB C2 AA |  if_e	rdbyte	local03, local01
306a4     11 A6 86 A1 |  if_e	sub	local01, #17
306a8     00 AA 0E F2 | 	cmp	local03, #0 wz
306ac     55 7B 02 56 |  if_ne	mov	result1, local03
306b0     5C 03 90 5D |  if_ne	jmp	#LR__5166
306b4     0C A6 06 F1 | 	add	local01, #12
306b8     53 AD 02 FB | 	rdlong	local04, local01
306bc     0C A6 86 F1 | 	sub	local01, #12
306c0     56 A9 1A F2 | 	cmp	local02, local04 wcz
306c4     20 00 90 ED |  if_be	jmp	#LR__5150
306c8     10 A6 06 F1 | 	add	local01, #16
306cc     53 AF C2 FA | 	rdbyte	local05, local01
306d0     10 A6 86 F1 | 	sub	local01, #16
306d4     57 B1 E2 F8 | 	getbyte	local06, local05, #0
306d8     02 B0 CE F7 | 	test	local06, #2 wz
306dc     0C A6 06 A1 |  if_e	add	local01, #12
306e0     53 A9 02 AB |  if_e	rdlong	local02, local01
306e4     0C A6 86 A1 |  if_e	sub	local01, #12
306e8                 | LR__5150
306e8     14 A6 06 F1 | 	add	local01, #20
306ec     53 B3 02 FB | 	rdlong	local07, local01
306f0     00 B4 06 F6 | 	mov	local08, #0
306f4     53 01 68 FC | 	wrlong	#0, local01
306f8     14 A6 86 F1 | 	sub	local01, #20
306fc     01 A8 16 F2 | 	cmp	local02, #1 wc
30700     F4 01 90 CD |  if_b	jmp	#LR__5162
30704     10 CE 05 F1 | 	add	fp, #16
30708     E7 B6 02 FB | 	rdlong	local09, fp
3070c     10 CE 85 F1 | 	sub	fp, #16
30710     0A B6 06 F1 | 	add	local09, #10
30714     5B AF E2 FA | 	rdword	local05, local09
30718     57 B9 32 F9 | 	getword	local10, local05, #0
3071c     09 B8 66 F0 | 	shl	local10, #9
30720     5C BB 02 F6 | 	mov	local11, local10
30724     01 B2 16 F2 | 	cmp	local07, #1 wc
30728     5C 00 90 CD |  if_b	jmp	#LR__5151
3072c     54 B7 02 F6 | 	mov	local09, local02
30730     01 B6 86 F1 | 	sub	local09, #1
30734     5D B7 12 FD | 	qdiv	local09, local11
30738     59 AF 02 F6 | 	mov	local05, local07
3073c     01 AE 86 F1 | 	sub	local05, #1
30740     5D BD 02 F6 | 	mov	local12, local11
30744     18 B6 62 FD | 	getqx	local09
30748     5E AF 12 FD | 	qdiv	local05, local12
3074c     18 B8 62 FD | 	getqx	local10
30750     5C B7 12 F2 | 	cmp	local09, local10 wc
30754     30 00 90 CD |  if_b	jmp	#LR__5151
30758     59 B1 02 F6 | 	mov	local06, local07
3075c     01 B0 86 F1 | 	sub	local06, #1
30760     5D B7 02 F6 | 	mov	local09, local11
30764     01 B6 86 F1 | 	sub	local09, #1
30768     5B B1 22 F5 | 	andn	local06, local09
3076c     14 A6 06 F1 | 	add	local01, #20
30770     53 B1 62 FC | 	wrlong	local06, local01
30774     58 A9 82 F1 | 	sub	local02, local06
30778     04 A6 06 F1 | 	add	local01, #4
3077c     53 BF 02 FB | 	rdlong	local13, local01
30780     18 A6 86 F1 | 	sub	local01, #24
30784     64 00 90 FD | 	jmp	#LR__5153
30788                 | LR__5151
30788     08 A6 06 F1 | 	add	local01, #8
3078c     53 BF 0A FB | 	rdlong	local13, local01 wz
30790     08 A6 86 F1 | 	sub	local01, #8
30794     48 00 90 5D |  if_ne	jmp	#LR__5152
30798     53 93 02 F6 | 	mov	arg01, local01
3079c     00 94 06 F6 | 	mov	arg02, #0
307a0     30 CA BF FD | 	call	#_fatfs_cc_create_chain
307a4     3D BF 02 F6 | 	mov	local13, result1
307a8     01 BE 0E F2 | 	cmp	local13, #1 wz
307ac     11 A6 06 A1 |  if_e	add	local01, #17
307b0     53 05 48 AC |  if_e	wrbyte	#2, local01
307b4     02 7A 06 A6 |  if_e	mov	result1, #2
307b8     54 02 90 AD |  if_e	jmp	#LR__5166
307bc     FF FF 7F FF 
307c0     FF BF 0E F2 | 	cmp	local13, ##-1 wz
307c4     11 A6 06 A1 |  if_e	add	local01, #17
307c8     53 03 48 AC |  if_e	wrbyte	#1, local01
307cc     01 7A 06 A6 |  if_e	mov	result1, #1
307d0     3C 02 90 AD |  if_e	jmp	#LR__5166
307d4     08 A6 06 F1 | 	add	local01, #8
307d8     53 BF 62 FC | 	wrlong	local13, local01
307dc     08 A6 86 F1 | 	sub	local01, #8
307e0                 | LR__5152
307e0     18 A6 06 F1 | 	add	local01, #24
307e4     53 BF 62 FC | 	wrlong	local13, local01
307e8     18 A6 86 F1 | 	sub	local01, #24
307ec                 | LR__5153
307ec     00 BE 0E F2 | 	cmp	local13, #0 wz
307f0     04 01 90 AD |  if_e	jmp	#LR__5161
307f4                 | ' 				while (ofs > bcs) {
307f4                 | LR__5154
307f4     5D A9 1A F2 | 	cmp	local02, local11 wcz
307f8     B0 00 90 ED |  if_be	jmp	#LR__5159
307fc     5D A9 82 F1 | 	sub	local02, local11
30800     14 A6 06 F1 | 	add	local01, #20
30804     53 AD 02 FB | 	rdlong	local04, local01
30808     5D AD 02 F1 | 	add	local04, local11
3080c     53 AD 62 FC | 	wrlong	local04, local01
30810     04 A6 86 F1 | 	sub	local01, #4
30814     53 AD C2 FA | 	rdbyte	local04, local01
30818     10 A6 86 F1 | 	sub	local01, #16
3081c     02 AC CE F7 | 	test	local04, #2 wz
30820     1C 00 90 AD |  if_e	jmp	#LR__5155
30824     53 93 02 F6 | 	mov	arg01, local01
30828     5F 95 02 F6 | 	mov	arg02, local13
3082c     A4 C9 BF FD | 	call	#_fatfs_cc_create_chain
30830     3D BF 0A F6 | 	mov	local13, result1 wz
30834     00 A8 06 A6 |  if_e	mov	local02, #0
30838                 | ' 							ofs = 0; break;
30838     70 00 90 AD |  if_e	jmp	#LR__5159
3083c     10 00 90 FD | 	jmp	#LR__5156
30840                 | LR__5155
30840     53 93 02 F6 | 	mov	arg01, local01
30844     5F 95 02 F6 | 	mov	arg02, local13
30848     C0 C4 BF FD | 	call	#_fatfs_cc_get_fat
3084c     3D BF 02 F6 | 	mov	local13, result1
30850                 | LR__5156
30850     FF FF 7F FF 
30854     FF BF 0E F2 | 	cmp	local13, ##-1 wz
30858     11 A6 06 A1 |  if_e	add	local01, #17
3085c     53 03 48 AC |  if_e	wrbyte	#1, local01
30860     01 7A 06 A6 |  if_e	mov	result1, #1
30864     A8 01 90 AD |  if_e	jmp	#LR__5166
30868     02 BE 16 F2 | 	cmp	local13, #2 wc
3086c     1C 00 90 CD |  if_b	jmp	#LR__5157
30870     10 CE 05 F1 | 	add	fp, #16
30874     E7 AC 02 FB | 	rdlong	local04, fp
30878     10 CE 85 F1 | 	sub	fp, #16
3087c     18 AC 06 F1 | 	add	local04, #24
30880     56 AF 02 FB | 	rdlong	local05, local04
30884     57 BF 12 F2 | 	cmp	local13, local05 wc
30888     10 00 90 CD |  if_b	jmp	#LR__5158
3088c                 | LR__5157
3088c     11 A6 06 F1 | 	add	local01, #17
30890     53 05 48 FC | 	wrbyte	#2, local01
30894     02 7A 06 F6 | 	mov	result1, #2
30898     74 01 90 FD | 	jmp	#LR__5166
3089c                 | LR__5158
3089c     18 A6 06 F1 | 	add	local01, #24
308a0     53 BF 62 FC | 	wrlong	local13, local01
308a4     18 A6 86 F1 | 	sub	local01, #24
308a8     48 FF 9F FD | 	jmp	#LR__5154
308ac                 | LR__5159
308ac     14 A6 06 F1 | 	add	local01, #20
308b0     53 AD 02 FB | 	rdlong	local04, local01
308b4     54 AD 02 F1 | 	add	local04, local02
308b8     53 AD 62 FC | 	wrlong	local04, local01
308bc     14 A6 86 F1 | 	sub	local01, #20
308c0     FF A9 CE F7 | 	test	local02, #511 wz
308c4     30 00 90 AD |  if_e	jmp	#LR__5160
308c8     10 CE 05 F1 | 	add	fp, #16
308cc     E7 92 02 FB | 	rdlong	arg01, fp
308d0     10 CE 85 F1 | 	sub	fp, #16
308d4     5F 95 02 F6 | 	mov	arg02, local13
308d8     F0 C3 BF FD | 	call	#_fatfs_cc_clst2sect
308dc     3D B5 0A F6 | 	mov	local08, result1 wz
308e0     11 A6 06 A1 |  if_e	add	local01, #17
308e4     53 05 48 AC |  if_e	wrbyte	#2, local01
308e8     02 7A 06 A6 |  if_e	mov	result1, #2
308ec     20 01 90 AD |  if_e	jmp	#LR__5166
308f0     09 A8 46 F0 | 	shr	local02, #9
308f4     54 B5 02 F1 | 	add	local08, local02
308f8                 | LR__5160
308f8                 | LR__5161
308f8                 | LR__5162
308f8     14 A6 06 F1 | 	add	local01, #20
308fc     53 AD 02 FB | 	rdlong	local04, local01
30900     08 A6 86 F1 | 	sub	local01, #8
30904     53 B1 02 FB | 	rdlong	local06, local01
30908     0C A6 86 F1 | 	sub	local01, #12
3090c     58 AD 1A F2 | 	cmp	local04, local06 wcz
30910     24 00 90 ED |  if_be	jmp	#LR__5163
30914     14 A6 06 F1 | 	add	local01, #20
30918     53 AD 02 FB | 	rdlong	local04, local01
3091c     08 A6 86 F1 | 	sub	local01, #8
30920     53 AD 62 FC | 	wrlong	local04, local01
30924     04 A6 06 F1 | 	add	local01, #4
30928     53 AD C2 FA | 	rdbyte	local04, local01
3092c     40 AC 46 F5 | 	or	local04, #64
30930     53 AD 42 FC | 	wrbyte	local04, local01
30934     10 A6 86 F1 | 	sub	local01, #16
30938                 | LR__5163
30938     14 A6 06 F1 | 	add	local01, #20
3093c     53 AD 02 FB | 	rdlong	local04, local01
30940     14 A6 86 F1 | 	sub	local01, #20
30944     FF AD CE F7 | 	test	local04, #511 wz
30948     1C A6 06 51 |  if_ne	add	local01, #28
3094c     53 AF 02 5B |  if_ne	rdlong	local05, local01
30950     1C A6 86 51 |  if_ne	sub	local01, #28
30954     57 B5 0A 52 |  if_ne	cmp	local08, local05 wz
30958     B0 00 90 AD |  if_e	jmp	#LR__5165
3095c     10 A6 06 F1 | 	add	local01, #16
30960     53 AD C2 FA | 	rdbyte	local04, local01
30964     10 A6 86 F1 | 	sub	local01, #16
30968     80 AC CE F7 | 	test	local04, #128 wz
3096c     58 00 90 AD |  if_e	jmp	#LR__5164
30970     10 CE 05 F1 | 	add	fp, #16
30974     E7 B6 02 FB | 	rdlong	local09, fp
30978     10 CE 85 F1 | 	sub	fp, #16
3097c     01 B6 06 F1 | 	add	local09, #1
30980     5B 93 C2 FA | 	rdbyte	arg01, local09
30984     28 A6 06 F1 | 	add	local01, #40
30988     53 95 02 F6 | 	mov	arg02, local01
3098c     0C A6 86 F1 | 	sub	local01, #12
30990     53 97 02 FB | 	rdlong	arg03, local01
30994     1C A6 86 F1 | 	sub	local01, #28
30998     01 98 06 F6 | 	mov	arg04, #1
3099c     68 BC BF FD | 	call	#_fatfs_cc_disk_write
309a0     00 7A 0E F2 | 	cmp	result1, #0 wz
309a4     11 A6 06 51 |  if_ne	add	local01, #17
309a8     53 03 48 5C |  if_ne	wrbyte	#1, local01
309ac     01 7A 06 56 |  if_ne	mov	result1, #1
309b0     5C 00 90 5D |  if_ne	jmp	#LR__5166
309b4     10 A6 06 F1 | 	add	local01, #16
309b8     53 AD C2 FA | 	rdbyte	local04, local01
309bc     7F AC 06 F5 | 	and	local04, #127
309c0     53 AD 42 FC | 	wrbyte	local04, local01
309c4     10 A6 86 F1 | 	sub	local01, #16
309c8                 | LR__5164
309c8     10 CE 05 F1 | 	add	fp, #16
309cc     E7 B6 02 FB | 	rdlong	local09, fp
309d0     10 CE 85 F1 | 	sub	fp, #16
309d4     01 B6 06 F1 | 	add	local09, #1
309d8     5B 93 C2 FA | 	rdbyte	arg01, local09
309dc     53 95 02 F6 | 	mov	arg02, local01
309e0     28 94 06 F1 | 	add	arg02, #40
309e4     5A 97 02 F6 | 	mov	arg03, local08
309e8     01 98 06 F6 | 	mov	arg04, #1
309ec     DC BA BF FD | 	call	#_fatfs_cc_disk_read
309f0     00 7A 0E F2 | 	cmp	result1, #0 wz
309f4     11 A6 06 51 |  if_ne	add	local01, #17
309f8     53 03 48 5C |  if_ne	wrbyte	#1, local01
309fc     01 7A 06 56 |  if_ne	mov	result1, #1
30a00     0C 00 90 5D |  if_ne	jmp	#LR__5166
30a04     1C A6 06 F1 | 	add	local01, #28
30a08     53 B5 62 FC | 	wrlong	local08, local01
30a0c                 | LR__5165
30a0c                 | ' 
30a0c                 | ' 			fp->sect = nsect;
30a0c                 | ' 		}
30a0c                 | ' 	}
30a0c                 | ' 
30a0c                 | ' 	return res ;
30a0c     55 7B 02 F6 | 	mov	result1, local03
30a10                 | LR__5166
30a10     E7 F0 03 F6 | 	mov	ptra, fp
30a14     F2 00 A0 FD | 	call	#popregs_
30a18                 | _fatfs_cc_f_lseek_ret
30a18     2D 00 64 FD | 	ret
30a1c                 | 
30a1c                 | _fatfs_cc_f_opendir
30a1c     02 CA 05 F6 | 	mov	COUNT_, #2
30a20     E8 00 A0 FD | 	call	#pushregs_
30a24     14 F0 07 F1 | 	add	ptra, #20
30a28     49 A7 0A F6 | 	mov	local01, arg01 wz
30a2c     08 CE 05 F1 | 	add	fp, #8
30a30     E7 94 62 FC | 	wrlong	arg02, fp
30a34     08 CE 85 F1 | 	sub	fp, #8
30a38     09 7A 06 A6 |  if_e	mov	result1, #9
30a3c     EC 00 90 AD |  if_e	jmp	#LR__5176
30a40     08 CE 05 F1 | 	add	fp, #8
30a44     E7 92 02 F6 | 	mov	arg01, fp
30a48     08 CE 05 F1 | 	add	fp, #8
30a4c     E7 94 02 F6 | 	mov	arg02, fp
30a50     10 CE 85 F1 | 	sub	fp, #16
30a54     00 96 06 F6 | 	mov	arg03, #0
30a58     B4 E7 BF FD | 	call	#_fatfs_cc_mount_volume
30a5c     3D A9 0A F6 | 	mov	local02, result1 wz
30a60     BC 00 90 5D |  if_ne	jmp	#LR__5175
30a64     10 CE 05 F1 | 	add	fp, #16
30a68     E7 A8 02 FB | 	rdlong	local02, fp
30a6c     53 A9 62 FC | 	wrlong	local02, local01
30a70     08 CE 85 F1 | 	sub	fp, #8
30a74     E7 94 02 FB | 	rdlong	arg02, fp
30a78     08 CE 85 F1 | 	sub	fp, #8
30a7c     53 93 02 F6 | 	mov	arg01, local01
30a80     F0 E2 BF FD | 	call	#_fatfs_cc_follow_path
30a84     3D A9 0A F6 | 	mov	local02, result1 wz
30a88     8C 00 90 5D |  if_ne	jmp	#LR__5174
30a8c     2B A6 06 F1 | 	add	local01, #43
30a90     53 97 C2 FA | 	rdbyte	arg03, local01
30a94     2B A6 86 F1 | 	sub	local01, #43
30a98     80 96 CE F7 | 	test	arg03, #128 wz
30a9c     40 00 90 5D |  if_ne	jmp	#LR__5172
30aa0     06 A6 06 F1 | 	add	local01, #6
30aa4     53 97 C2 FA | 	rdbyte	arg03, local01
30aa8     06 A6 86 F1 | 	sub	local01, #6
30aac     10 96 CE F7 | 	test	arg03, #16 wz
30ab0     28 00 90 AD |  if_e	jmp	#LR__5170
30ab4     10 CE 05 F1 | 	add	fp, #16
30ab8     E7 92 02 FB | 	rdlong	arg01, fp
30abc     10 CE 85 F1 | 	sub	fp, #16
30ac0     1C A6 06 F1 | 	add	local01, #28
30ac4     53 95 02 FB | 	rdlong	arg02, local01
30ac8     C0 CD BF FD | 	call	#_fatfs_cc_ld_clust
30acc     14 A6 86 F1 | 	sub	local01, #20
30ad0     53 7B 62 FC | 	wrlong	result1, local01
30ad4     08 A6 86 F1 | 	sub	local01, #8
30ad8     04 00 90 FD | 	jmp	#LR__5171
30adc                 | LR__5170
30adc     05 A8 06 F6 | 	mov	local02, #5
30ae0                 | LR__5171
30ae0                 | LR__5172
30ae0     00 A8 0E F2 | 	cmp	local02, #0 wz
30ae4     30 00 90 5D |  if_ne	jmp	#LR__5173
30ae8     10 CE 05 F1 | 	add	fp, #16
30aec     E7 A8 02 FB | 	rdlong	local02, fp
30af0     10 CE 85 F1 | 	sub	fp, #16
30af4     06 A8 06 F1 | 	add	local02, #6
30af8     54 A9 E2 FA | 	rdword	local02, local02
30afc     04 A6 06 F1 | 	add	local01, #4
30b00     53 A9 52 FC | 	wrword	local02, local01
30b04     04 A6 86 F1 | 	sub	local01, #4
30b08     53 93 02 F6 | 	mov	arg01, local01
30b0c     00 94 06 F6 | 	mov	arg02, #0
30b10     A4 C9 BF FD | 	call	#_fatfs_cc_dir_sdi
30b14     3D A9 02 F6 | 	mov	local02, result1
30b18                 | LR__5173
30b18                 | LR__5174
30b18     04 A8 0E F2 | 	cmp	local02, #4 wz
30b1c     05 A8 06 A6 |  if_e	mov	local02, #5
30b20                 | LR__5175
30b20     00 A8 0E F2 | 	cmp	local02, #0 wz
30b24     53 01 68 5C |  if_ne	wrlong	#0, local01
30b28                 | ' 
30b28                 | ' 	return res ;
30b28     54 7B 02 F6 | 	mov	result1, local02
30b2c                 | LR__5176
30b2c     E7 F0 03 F6 | 	mov	ptra, fp
30b30     F2 00 A0 FD | 	call	#popregs_
30b34                 | _fatfs_cc_f_opendir_ret
30b34     2D 00 64 FD | 	ret
30b38                 | 
30b38                 | _fatfs_cc_f_closedir
30b38     01 CA 05 F6 | 	mov	COUNT_, #1
30b3c     E8 00 A0 FD | 	call	#pushregs_
30b40     10 F0 07 F1 | 	add	ptra, #16
30b44     49 A7 02 F6 | 	mov	local01, arg01
30b48     E7 94 02 F6 | 	mov	arg02, fp
30b4c     0C 94 06 F1 | 	add	arg02, #12
30b50     53 93 02 F6 | 	mov	arg01, local01
30b54     E8 EB BF FD | 	call	#_fatfs_cc_validate
30b58     00 7A 4E F2 | 	cmps	result1, #0 wz
30b5c     53 01 68 AC |  if_e	wrlong	#0, local01
30b60                 | ' 
30b60                 | ' 
30b60                 | ' 
30b60                 | ' 
30b60                 | ' 		dp->obj.fs = 0;
30b60                 | ' #line 4633 "ff.c"
30b60                 | ' 	}
30b60                 | ' 	return res;
30b60     E7 F0 03 F6 | 	mov	ptra, fp
30b64     F2 00 A0 FD | 	call	#popregs_
30b68                 | _fatfs_cc_f_closedir_ret
30b68     2D 00 64 FD | 	ret
30b6c                 | 
30b6c                 | _fatfs_cc_f_readdir
30b6c     03 CA 05 F6 | 	mov	COUNT_, #3
30b70     E8 00 A0 FD | 	call	#pushregs_
30b74     14 F0 07 F1 | 	add	ptra, #20
30b78     49 A7 02 F6 | 	mov	local01, arg01
30b7c     4A A9 02 F6 | 	mov	local02, arg02
30b80     E7 94 02 F6 | 	mov	arg02, fp
30b84     10 94 06 F1 | 	add	arg02, #16
30b88     53 93 02 F6 | 	mov	arg01, local01
30b8c     B0 EB BF FD | 	call	#_fatfs_cc_validate
30b90     3D AB 0A F6 | 	mov	local03, result1 wz
30b94     60 00 90 5D |  if_ne	jmp	#LR__5183
30b98     00 A8 0E F2 | 	cmp	local02, #0 wz
30b9c     14 00 90 5D |  if_ne	jmp	#LR__5180
30ba0     53 93 02 F6 | 	mov	arg01, local01
30ba4     00 94 06 F6 | 	mov	arg02, #0
30ba8     0C C9 BF FD | 	call	#_fatfs_cc_dir_sdi
30bac     3D AB 02 F6 | 	mov	local03, result1
30bb0     44 00 90 FD | 	jmp	#LR__5182
30bb4                 | LR__5180
30bb4     53 93 02 F6 | 	mov	arg01, local01
30bb8     00 94 06 F6 | 	mov	arg02, #0
30bbc     98 D1 BF FD | 	call	#_fatfs_cc_dir_read
30bc0     3D AB 02 F6 | 	mov	local03, result1
30bc4     04 AA 0E F2 | 	cmp	local03, #4 wz
30bc8     00 AA 06 A6 |  if_e	mov	local03, #0
30bcc     00 AA 0E F2 | 	cmp	local03, #0 wz
30bd0     24 00 90 5D |  if_ne	jmp	#LR__5181
30bd4     53 93 02 F6 | 	mov	arg01, local01
30bd8     54 95 02 F6 | 	mov	arg02, local02
30bdc     E4 D8 BF FD | 	call	#_fatfs_cc_get_fileinfo
30be0     53 93 02 F6 | 	mov	arg01, local01
30be4     00 94 06 F6 | 	mov	arg02, #0
30be8     34 CA BF FD | 	call	#_fatfs_cc_dir_next
30bec     3D AB 02 F6 | 	mov	local03, result1
30bf0     04 AA 0E F2 | 	cmp	local03, #4 wz
30bf4     00 AA 06 A6 |  if_e	mov	local03, #0
30bf8                 | LR__5181
30bf8                 | LR__5182
30bf8                 | LR__5183
30bf8                 | ' 			}
30bf8                 | ' 			;
30bf8                 | ' 		}
30bf8                 | ' 	}
30bf8                 | ' 	return res ;
30bf8     55 7B 02 F6 | 	mov	result1, local03
30bfc     E7 F0 03 F6 | 	mov	ptra, fp
30c00     F2 00 A0 FD | 	call	#popregs_
30c04                 | _fatfs_cc_f_readdir_ret
30c04     2D 00 64 FD | 	ret
30c08                 | 
30c08                 | _fatfs_cc_f_stat
30c08     02 CA 05 F6 | 	mov	COUNT_, #2
30c0c     E8 00 A0 FD | 	call	#pushregs_
30c10     40 F0 07 F1 | 	add	ptra, #64
30c14     04 CE 05 F1 | 	add	fp, #4
30c18     E7 92 62 FC | 	wrlong	arg01, fp
30c1c     4A A7 02 F6 | 	mov	local01, arg02
30c20     E7 92 02 F6 | 	mov	arg01, fp
30c24     0C CE 05 F1 | 	add	fp, #12
30c28     E7 94 02 F6 | 	mov	arg02, fp
30c2c     10 CE 85 F1 | 	sub	fp, #16
30c30     00 96 06 F6 | 	mov	arg03, #0
30c34     D8 E5 BF FD | 	call	#_fatfs_cc_mount_volume
30c38     3D A9 0A F6 | 	mov	local02, result1 wz
30c3c     4C 00 90 5D |  if_ne	jmp	#LR__5192
30c40     10 CE 05 F1 | 	add	fp, #16
30c44     E7 92 02 F6 | 	mov	arg01, fp
30c48     0C CE 85 F1 | 	sub	fp, #12
30c4c     E7 94 02 FB | 	rdlong	arg02, fp
30c50     04 CE 85 F1 | 	sub	fp, #4
30c54     1C E1 BF FD | 	call	#_fatfs_cc_follow_path
30c58     3D A9 0A F6 | 	mov	local02, result1 wz
30c5c     2C 00 90 5D |  if_ne	jmp	#LR__5191
30c60     3B CE 05 F1 | 	add	fp, #59
30c64     E7 96 C2 FA | 	rdbyte	arg03, fp
30c68     3B CE 85 F1 | 	sub	fp, #59
30c6c     80 96 CE F7 | 	test	arg03, #128 wz
30c70     06 A8 06 56 |  if_ne	mov	local02, #6
30c74     14 00 90 5D |  if_ne	jmp	#LR__5190
30c78     00 A6 0E F2 | 	cmp	local01, #0 wz
30c7c     E7 92 02 56 |  if_ne	mov	arg01, fp
30c80     10 92 06 51 |  if_ne	add	arg01, #16
30c84     53 95 02 56 |  if_ne	mov	arg02, local01
30c88     38 D8 BF 5D |  if_ne	call	#_fatfs_cc_get_fileinfo
30c8c                 | LR__5190
30c8c                 | LR__5191
30c8c                 | LR__5192
30c8c                 | ' 			}
30c8c                 | ' 		}
30c8c                 | ' 		;
30c8c                 | ' 	}
30c8c                 | ' 
30c8c                 | ' 	return res ;
30c8c     54 7B 02 F6 | 	mov	result1, local02
30c90     E7 F0 03 F6 | 	mov	ptra, fp
30c94     F2 00 A0 FD | 	call	#popregs_
30c98                 | _fatfs_cc_f_stat_ret
30c98     2D 00 64 FD | 	ret
30c9c                 | 
30c9c                 | _fatfs_cc_f_unlink
30c9c     02 CA 05 F6 | 	mov	COUNT_, #2
30ca0     E8 00 A0 FD | 	call	#pushregs_
30ca4     74 F0 07 F1 | 	add	ptra, #116
30ca8     04 CE 05 F1 | 	add	fp, #4
30cac     E7 92 62 FC | 	wrlong	arg01, fp
30cb0     00 A6 06 F6 | 	mov	local01, #0
30cb4     E7 92 02 F6 | 	mov	arg01, fp
30cb8     6C CE 05 F1 | 	add	fp, #108
30cbc     E7 94 02 F6 | 	mov	arg02, fp
30cc0     70 CE 85 F1 | 	sub	fp, #112
30cc4     02 96 06 F6 | 	mov	arg03, #2
30cc8     44 E5 BF FD | 	call	#_fatfs_cc_mount_volume
30ccc     3D A9 0A F6 | 	mov	local02, result1 wz
30cd0     3C 01 90 5D |  if_ne	jmp	#LR__5208
30cd4     70 CE 05 F1 | 	add	fp, #112
30cd8     E7 A8 02 FB | 	rdlong	local02, fp
30cdc     64 CE 85 F1 | 	sub	fp, #100
30ce0     E7 A8 62 FC | 	wrlong	local02, fp
30ce4     E7 92 02 F6 | 	mov	arg01, fp
30ce8     08 CE 85 F1 | 	sub	fp, #8
30cec     E7 94 02 FB | 	rdlong	arg02, fp
30cf0     04 CE 85 F1 | 	sub	fp, #4
30cf4     7C E0 BF FD | 	call	#_fatfs_cc_follow_path
30cf8     3D A9 0A F6 | 	mov	local02, result1 wz
30cfc     10 01 90 5D |  if_ne	jmp	#LR__5207
30d00     37 CE 05 F1 | 	add	fp, #55
30d04     E7 7A C2 FA | 	rdbyte	result1, fp
30d08     37 CE 85 F1 | 	sub	fp, #55
30d0c     80 7A CE F7 | 	test	result1, #128 wz
30d10     06 A8 06 56 |  if_ne	mov	local02, #6
30d14     14 00 90 5D |  if_ne	jmp	#LR__5200
30d18     12 CE 05 F1 | 	add	fp, #18
30d1c     E7 7A C2 FA | 	rdbyte	result1, fp
30d20     12 CE 85 F1 | 	sub	fp, #18
30d24     01 7A CE F7 | 	test	result1, #1 wz
30d28     07 A8 06 56 |  if_ne	mov	local02, #7
30d2c                 | LR__5200
30d2c     00 A8 0E F2 | 	cmp	local02, #0 wz
30d30     84 00 90 5D |  if_ne	jmp	#LR__5203
30d34     70 CE 05 F1 | 	add	fp, #112
30d38     E7 92 02 FB | 	rdlong	arg01, fp
30d3c     48 CE 85 F1 | 	sub	fp, #72
30d40     E7 94 02 FB | 	rdlong	arg02, fp
30d44     28 CE 85 F1 | 	sub	fp, #40
30d48     40 CB BF FD | 	call	#_fatfs_cc_ld_clust
30d4c     3D A7 02 F6 | 	mov	local01, result1
30d50     12 CE 05 F1 | 	add	fp, #18
30d54     E7 7A C2 FA | 	rdbyte	result1, fp
30d58     12 CE 85 F1 | 	sub	fp, #18
30d5c     10 7A CE F7 | 	test	result1, #16 wz
30d60     54 00 90 AD |  if_e	jmp	#LR__5202
30d64     70 CE 05 F1 | 	add	fp, #112
30d68     E7 A8 02 FB | 	rdlong	local02, fp
30d6c     34 CE 85 F1 | 	sub	fp, #52
30d70     E7 A8 62 FC | 	wrlong	local02, fp
30d74     08 CE 05 F1 | 	add	fp, #8
30d78     E7 A6 62 FC | 	wrlong	local01, fp
30d7c     08 CE 85 F1 | 	sub	fp, #8
30d80     E7 92 02 F6 | 	mov	arg01, fp
30d84     3C CE 85 F1 | 	sub	fp, #60
30d88     00 94 06 F6 | 	mov	arg02, #0
30d8c     28 C7 BF FD | 	call	#_fatfs_cc_dir_sdi
30d90     3D A9 0A F6 | 	mov	local02, result1 wz
30d94     20 00 90 5D |  if_ne	jmp	#LR__5201
30d98     E7 92 02 F6 | 	mov	arg01, fp
30d9c     3C 92 06 F1 | 	add	arg01, #60
30da0     00 94 06 F6 | 	mov	arg02, #0
30da4     B0 CF BF FD | 	call	#_fatfs_cc_dir_read
30da8     3D A9 0A F6 | 	mov	local02, result1 wz
30dac     07 A8 06 A6 |  if_e	mov	local02, #7
30db0     04 A8 0E F2 | 	cmp	local02, #4 wz
30db4     00 A8 06 A6 |  if_e	mov	local02, #0
30db8                 | LR__5201
30db8                 | LR__5202
30db8                 | LR__5203
30db8     00 A8 0E F2 | 	cmp	local02, #0 wz
30dbc     50 00 90 5D |  if_ne	jmp	#LR__5206
30dc0     E7 92 02 F6 | 	mov	arg01, fp
30dc4     0C 92 06 F1 | 	add	arg01, #12
30dc8     30 D6 BF FD | 	call	#_fatfs_cc_dir_remove
30dcc     3D A9 0A F6 | 	mov	local02, result1 wz
30dd0     20 00 90 5D |  if_ne	jmp	#LR__5204
30dd4     00 A6 0E F2 | 	cmp	local01, #0 wz
30dd8     18 00 90 AD |  if_e	jmp	#LR__5204
30ddc     E7 92 02 F6 | 	mov	arg01, fp
30de0     0C 92 06 F1 | 	add	arg01, #12
30de4     53 95 02 F6 | 	mov	arg02, local01
30de8     00 96 06 F6 | 	mov	arg03, #0
30dec     D0 C2 BF FD | 	call	#_fatfs_cc_remove_chain
30df0     3D A9 02 F6 | 	mov	local02, result1
30df4                 | LR__5204
30df4     00 A8 0E F2 | 	cmp	local02, #0 wz
30df8     14 00 90 5D |  if_ne	jmp	#LR__5205
30dfc     70 CE 05 F1 | 	add	fp, #112
30e00     E7 92 02 FB | 	rdlong	arg01, fp
30e04     70 CE 85 F1 | 	sub	fp, #112
30e08     C0 BD BF FD | 	call	#_fatfs_cc_sync_fs
30e0c     3D A9 02 F6 | 	mov	local02, result1
30e10                 | LR__5205
30e10                 | LR__5206
30e10                 | LR__5207
30e10                 | LR__5208
30e10                 | ' 			}
30e10                 | ' 		}
30e10                 | ' 		;
30e10                 | ' 	}
30e10                 | ' 
30e10                 | ' 	return res ;
30e10     54 7B 02 F6 | 	mov	result1, local02
30e14     E7 F0 03 F6 | 	mov	ptra, fp
30e18     F2 00 A0 FD | 	call	#popregs_
30e1c                 | _fatfs_cc_f_unlink_ret
30e1c     2D 00 64 FD | 	ret
30e20                 | 
30e20                 | _fatfs_cc_f_mkdir
30e20     03 CA 05 F6 | 	mov	COUNT_, #3
30e24     E8 00 A0 FD | 	call	#pushregs_
30e28     5C F0 07 F1 | 	add	ptra, #92
30e2c     04 CE 05 F1 | 	add	fp, #4
30e30     E7 92 62 FC | 	wrlong	arg01, fp
30e34     E7 92 02 F6 | 	mov	arg01, fp
30e38     48 CE 05 F1 | 	add	fp, #72
30e3c     E7 94 02 F6 | 	mov	arg02, fp
30e40     4C CE 85 F1 | 	sub	fp, #76
30e44     02 96 06 F6 | 	mov	arg03, #2
30e48     C4 E3 BF FD | 	call	#_fatfs_cc_mount_volume
30e4c     3D A7 0A F6 | 	mov	local01, result1 wz
30e50     FC 01 90 5D |  if_ne	jmp	#LR__5215
30e54     4C CE 05 F1 | 	add	fp, #76
30e58     E7 A6 02 FB | 	rdlong	local01, fp
30e5c     40 CE 85 F1 | 	sub	fp, #64
30e60     E7 A6 62 FC | 	wrlong	local01, fp
30e64     E7 92 02 F6 | 	mov	arg01, fp
30e68     08 CE 85 F1 | 	sub	fp, #8
30e6c     E7 94 02 FB | 	rdlong	arg02, fp
30e70     04 CE 85 F1 | 	sub	fp, #4
30e74     FC DE BF FD | 	call	#_fatfs_cc_follow_path
30e78     3D A7 0A F6 | 	mov	local01, result1 wz
30e7c     08 A6 06 A6 |  if_e	mov	local01, #8
30e80     04 A6 0E F2 | 	cmp	local01, #4 wz
30e84     C8 01 90 5D |  if_ne	jmp	#LR__5214
30e88     4C CE 05 F1 | 	add	fp, #76
30e8c     E7 A6 02 FB | 	rdlong	local01, fp
30e90     10 CE 85 F1 | 	sub	fp, #16
30e94     E7 A6 62 FC | 	wrlong	local01, fp
30e98     E7 92 02 F6 | 	mov	arg01, fp
30e9c     3C CE 85 F1 | 	sub	fp, #60
30ea0     00 94 06 F6 | 	mov	arg02, #0
30ea4     2C C3 BF FD | 	call	#_fatfs_cc_create_chain
30ea8     3D A9 0A F6 | 	mov	local02, result1 wz
30eac     00 A6 06 F6 | 	mov	local01, #0
30eb0     07 A6 06 A6 |  if_e	mov	local01, #7
30eb4     01 A8 0E F2 | 	cmp	local02, #1 wz
30eb8     02 A6 06 A6 |  if_e	mov	local01, #2
30ebc     FF FF 7F FF 
30ec0     FF A9 0E F2 | 	cmp	local02, ##-1 wz
30ec4     01 A6 06 A6 |  if_e	mov	local01, #1
30ec8     8C 06 B0 FD | 	call	#_fatfs_cc__get_fattime
30ecc     3D AB 02 F6 | 	mov	local03, result1
30ed0     00 A6 0E F2 | 	cmp	local01, #0 wz
30ed4     EC 00 90 5D |  if_ne	jmp	#LR__5211
30ed8     4C CE 05 F1 | 	add	fp, #76
30edc     E7 92 02 FB | 	rdlong	arg01, fp
30ee0     4C CE 85 F1 | 	sub	fp, #76
30ee4     54 95 02 F6 | 	mov	arg02, local02
30ee8     0C C5 BF FD | 	call	#_fatfs_cc_dir_clear
30eec     3D A7 0A F6 | 	mov	local01, result1 wz
30ef0     D0 00 90 5D |  if_ne	jmp	#LR__5210
30ef4     4C CE 05 F1 | 	add	fp, #76
30ef8     E7 92 02 FB | 	rdlong	arg01, fp
30efc     4C CE 85 F1 | 	sub	fp, #76
30f00     34 92 06 F1 | 	add	arg01, #52
30f04     20 94 06 F6 | 	mov	arg02, #32
30f08     0B 96 06 F6 | 	mov	arg03, #11
30f0c     D8 00 A0 FD | 	call	#\builtin_bytefill_
30f10     4C CE 05 F1 | 	add	fp, #76
30f14     E7 A6 02 FB | 	rdlong	local01, fp
30f18     34 A6 06 F1 | 	add	local01, #52
30f1c     53 5D 48 FC | 	wrbyte	#46, local01
30f20     E7 A6 02 FB | 	rdlong	local01, fp
30f24     3F A6 06 F1 | 	add	local01, #63
30f28     53 21 48 FC | 	wrbyte	#16, local01
30f2c     E7 92 02 FB | 	rdlong	arg01, fp
30f30     4A 92 06 F1 | 	add	arg01, #74
30f34     49 AB 62 FC | 	wrlong	local03, arg01
30f38     E7 94 02 FB | 	rdlong	arg02, fp
30f3c     4A 93 02 F6 | 	mov	arg01, arg02
30f40     4C CE 85 F1 | 	sub	fp, #76
30f44     34 94 06 F1 | 	add	arg02, #52
30f48     54 97 02 F6 | 	mov	arg03, local02
30f4c     70 C9 BF FD | 	call	#_fatfs_cc_st_clust
30f50     4C CE 05 F1 | 	add	fp, #76
30f54     E7 94 02 FB | 	rdlong	arg02, fp
30f58     4A 93 02 F6 | 	mov	arg01, arg02
30f5c     54 92 06 F1 | 	add	arg01, #84
30f60     4C CE 85 F1 | 	sub	fp, #76
30f64     34 94 06 F1 | 	add	arg02, #52
30f68     20 96 06 F6 | 	mov	arg03, #32
30f6c     E4 3A BF FD | 	call	#__system____builtin_memmove
30f70     4C CE 05 F1 | 	add	fp, #76
30f74     E7 A6 02 FB | 	rdlong	local01, fp
30f78     55 A6 06 F1 | 	add	local01, #85
30f7c     53 5D 48 FC | 	wrbyte	#46, local01
30f80     38 CE 85 F1 | 	sub	fp, #56
30f84     E7 96 02 FB | 	rdlong	arg03, fp
30f88     38 CE 05 F1 | 	add	fp, #56
30f8c     E7 94 02 FB | 	rdlong	arg02, fp
30f90     4A 93 02 F6 | 	mov	arg01, arg02
30f94     4C CE 85 F1 | 	sub	fp, #76
30f98     54 94 06 F1 | 	add	arg02, #84
30f9c     20 C9 BF FD | 	call	#_fatfs_cc_st_clust
30fa0     4C CE 05 F1 | 	add	fp, #76
30fa4     E7 A6 02 FB | 	rdlong	local01, fp
30fa8     4C CE 85 F1 | 	sub	fp, #76
30fac     03 A6 06 F1 | 	add	local01, #3
30fb0     53 03 48 FC | 	wrbyte	#1, local01
30fb4     E7 92 02 F6 | 	mov	arg01, fp
30fb8     0C 92 06 F1 | 	add	arg01, #12
30fbc     D8 D1 BF FD | 	call	#_fatfs_cc_dir_register
30fc0     3D A7 02 F6 | 	mov	local01, result1
30fc4                 | LR__5210
30fc4                 | LR__5211
30fc4     00 A6 0E F2 | 	cmp	local01, #0 wz
30fc8     70 00 90 5D |  if_ne	jmp	#LR__5212
30fcc     28 CE 05 F1 | 	add	fp, #40
30fd0     E7 92 02 FB | 	rdlong	arg01, fp
30fd4     16 92 06 F1 | 	add	arg01, #22
30fd8     49 AB 62 FC | 	wrlong	local03, arg01
30fdc     24 CE 05 F1 | 	add	fp, #36
30fe0     E7 92 02 FB | 	rdlong	arg01, fp
30fe4     24 CE 85 F1 | 	sub	fp, #36
30fe8     E7 94 02 FB | 	rdlong	arg02, fp
30fec     28 CE 85 F1 | 	sub	fp, #40
30ff0     54 97 02 F6 | 	mov	arg03, local02
30ff4     C8 C8 BF FD | 	call	#_fatfs_cc_st_clust
30ff8     28 CE 05 F1 | 	add	fp, #40
30ffc     E7 AA 02 FB | 	rdlong	local03, fp
31000     0B AA 06 F1 | 	add	local03, #11
31004     55 21 48 FC | 	wrbyte	#16, local03
31008     24 CE 05 F1 | 	add	fp, #36
3100c     E7 AA 02 FB | 	rdlong	local03, fp
31010     4C CE 85 F1 | 	sub	fp, #76
31014     03 AA 06 F1 | 	add	local03, #3
31018     55 03 48 FC | 	wrbyte	#1, local03
3101c     00 A6 0E F2 | 	cmp	local01, #0 wz
31020     2C 00 90 5D |  if_ne	jmp	#LR__5213
31024     4C CE 05 F1 | 	add	fp, #76
31028     E7 92 02 FB | 	rdlong	arg01, fp
3102c     4C CE 85 F1 | 	sub	fp, #76
31030     98 BB BF FD | 	call	#_fatfs_cc_sync_fs
31034     3D A7 02 F6 | 	mov	local01, result1
31038     14 00 90 FD | 	jmp	#LR__5213
3103c                 | LR__5212
3103c     E7 92 02 F6 | 	mov	arg01, fp
31040     3C 92 06 F1 | 	add	arg01, #60
31044     54 95 02 F6 | 	mov	arg02, local02
31048     00 96 06 F6 | 	mov	arg03, #0
3104c     70 C0 BF FD | 	call	#_fatfs_cc_remove_chain
31050                 | LR__5213
31050                 | LR__5214
31050                 | LR__5215
31050                 | ' 				remove_chain(&sobj, dcl, 0);
31050                 | ' 			}
31050                 | ' 		}
31050                 | ' 		;
31050                 | ' 	}
31050                 | ' 
31050                 | ' 	return res ;
31050     53 7B 02 F6 | 	mov	result1, local01
31054     E7 F0 03 F6 | 	mov	ptra, fp
31058     F2 00 A0 FD | 	call	#popregs_
3105c                 | _fatfs_cc_f_mkdir_ret
3105c     2D 00 64 FD | 	ret
31060                 | 
31060                 | _fatfs_cc_f_rename
31060     03 CA 05 F6 | 	mov	COUNT_, #3
31064     E8 00 A0 FD | 	call	#pushregs_
31068     9C F0 07 F1 | 	add	ptra, #156
3106c     04 CE 05 F1 | 	add	fp, #4
31070     E7 92 62 FC | 	wrlong	arg01, fp
31074     04 CE 05 F1 | 	add	fp, #4
31078     E7 94 62 FC | 	wrlong	arg02, fp
3107c     E7 92 02 F6 | 	mov	arg01, fp
31080     08 CE 85 F1 | 	sub	fp, #8
31084     4C DE BF FD | 	call	#_fatfs_cc_get_ldnumber
31088     04 CE 05 F1 | 	add	fp, #4
3108c     E7 92 02 F6 | 	mov	arg01, fp
31090     6C CE 05 F1 | 	add	fp, #108
31094     E7 94 02 F6 | 	mov	arg02, fp
31098     70 CE 85 F1 | 	sub	fp, #112
3109c     02 96 06 F6 | 	mov	arg03, #2
310a0     6C E1 BF FD | 	call	#_fatfs_cc_mount_volume
310a4     3D A7 0A F6 | 	mov	local01, result1 wz
310a8     68 02 90 5D |  if_ne	jmp	#LR__5232
310ac     70 CE 05 F1 | 	add	fp, #112
310b0     E7 A8 02 FB | 	rdlong	local02, fp
310b4     60 CE 85 F1 | 	sub	fp, #96
310b8     E7 A8 62 FC | 	wrlong	local02, fp
310bc     E7 92 02 F6 | 	mov	arg01, fp
310c0     0C CE 85 F1 | 	sub	fp, #12
310c4     E7 94 02 FB | 	rdlong	arg02, fp
310c8     04 CE 85 F1 | 	sub	fp, #4
310cc     A4 DC BF FD | 	call	#_fatfs_cc_follow_path
310d0     3D A7 0A F6 | 	mov	local01, result1 wz
310d4     14 00 90 5D |  if_ne	jmp	#LR__5220
310d8     3B CE 05 F1 | 	add	fp, #59
310dc     E7 A8 C2 FA | 	rdbyte	local02, fp
310e0     3B CE 85 F1 | 	sub	fp, #59
310e4     A0 A8 CE F7 | 	test	local02, #160 wz
310e8     06 A6 06 56 |  if_ne	mov	local01, #6
310ec                 | LR__5220
310ec     00 A6 0E F2 | 	cmp	local01, #0 wz
310f0     20 02 90 5D |  if_ne	jmp	#LR__5231
310f4     74 CE 05 F1 | 	add	fp, #116
310f8     E7 92 02 F6 | 	mov	arg01, fp
310fc     48 CE 85 F1 | 	sub	fp, #72
31100     E7 94 02 FB | 	rdlong	arg02, fp
31104     2C CE 85 F1 | 	sub	fp, #44
31108     20 96 06 F6 | 	mov	arg03, #32
3110c     44 39 BF FD | 	call	#__system____builtin_memmove
31110     40 CE 05 F1 | 	add	fp, #64
31114     E7 92 02 F6 | 	mov	arg01, fp
31118     30 CE 85 F1 | 	sub	fp, #48
3111c     E7 94 02 F6 | 	mov	arg02, fp
31120     10 CE 85 F1 | 	sub	fp, #16
31124     30 96 06 F6 | 	mov	arg03, #48
31128     28 39 BF FD | 	call	#__system____builtin_memmove
3112c     40 CE 05 F1 | 	add	fp, #64
31130     E7 92 02 F6 | 	mov	arg01, fp
31134     38 CE 85 F1 | 	sub	fp, #56
31138     E7 94 02 FB | 	rdlong	arg02, fp
3113c     08 CE 85 F1 | 	sub	fp, #8
31140     30 DC BF FD | 	call	#_fatfs_cc_follow_path
31144     3D A7 0A F6 | 	mov	local01, result1 wz
31148     44 00 90 5D |  if_ne	jmp	#LR__5223
3114c     48 CE 05 F1 | 	add	fp, #72
31150     E7 A6 02 FB | 	rdlong	local01, fp
31154     30 CE 85 F1 | 	sub	fp, #48
31158     E7 7A 02 FB | 	rdlong	result1, fp
3115c     18 CE 85 F1 | 	sub	fp, #24
31160     3D A7 0A F2 | 	cmp	local01, result1 wz
31164     20 00 90 5D |  if_ne	jmp	#LR__5221
31168     50 CE 05 F1 | 	add	fp, #80
3116c     E7 A6 02 FB | 	rdlong	local01, fp
31170     30 CE 85 F1 | 	sub	fp, #48
31174     E7 7A 02 FB | 	rdlong	result1, fp
31178     20 CE 85 F1 | 	sub	fp, #32
3117c     3D A7 0A F2 | 	cmp	local01, result1 wz
31180     04 A8 06 A6 |  if_e	mov	local02, #4
31184     04 00 90 AD |  if_e	jmp	#LR__5222
31188                 | LR__5221
31188     08 A8 06 F6 | 	mov	local02, #8
3118c                 | LR__5222
3118c     54 A7 02 F6 | 	mov	local01, local02
31190                 | LR__5223
31190     04 A6 0E F2 | 	cmp	local01, #4 wz
31194     4C 01 90 5D |  if_ne	jmp	#LR__5228
31198     E7 92 02 F6 | 	mov	arg01, fp
3119c     40 92 06 F1 | 	add	arg01, #64
311a0     F4 CF BF FD | 	call	#_fatfs_cc_dir_register
311a4     3D A7 0A F6 | 	mov	local01, result1 wz
311a8     38 01 90 5D |  if_ne	jmp	#LR__5227
311ac     5C CE 05 F1 | 	add	fp, #92
311b0     E7 AA 02 FB | 	rdlong	local03, fp
311b4     55 93 02 F6 | 	mov	arg01, local03
311b8     0D 92 06 F1 | 	add	arg01, #13
311bc     18 CE 05 F1 | 	add	fp, #24
311c0     E7 94 02 F6 | 	mov	arg02, fp
311c4     74 CE 85 F1 | 	sub	fp, #116
311c8     0D 94 06 F1 | 	add	arg02, #13
311cc     13 96 06 F6 | 	mov	arg03, #19
311d0     80 38 BF FD | 	call	#__system____builtin_memmove
311d4     7F CE 05 F1 | 	add	fp, #127
311d8     E7 A8 C2 FA | 	rdbyte	local02, fp
311dc     0B AA 06 F1 | 	add	local03, #11
311e0     55 A9 42 FC | 	wrbyte	local02, local03
311e4     54 A9 E2 F8 | 	getbyte	local02, local02, #0
311e8     0B AA 86 F1 | 	sub	local03, #11
311ec     10 A8 CE F7 | 	test	local02, #16 wz
311f0     0B AA 06 A1 |  if_e	add	local03, #11
311f4     55 A9 C2 AA |  if_e	rdbyte	local02, local03
311f8     20 A8 46 A5 |  if_e	or	local02, #32
311fc     55 A9 42 AC |  if_e	wrbyte	local02, local03
31200     0B AA 86 A1 |  if_e	sub	local03, #11
31204     0F CE 85 F1 | 	sub	fp, #15
31208     E7 A8 02 FB | 	rdlong	local02, fp
3120c     70 CE 85 F1 | 	sub	fp, #112
31210     03 A8 06 F1 | 	add	local02, #3
31214     54 03 48 FC | 	wrbyte	#1, local02
31218     0B AA 06 F1 | 	add	local03, #11
3121c     55 A9 C2 FA | 	rdbyte	local02, local03
31220     0B AA 86 F1 | 	sub	local03, #11
31224     10 A8 CE F7 | 	test	local02, #16 wz
31228     B8 00 90 AD |  if_e	jmp	#LR__5226
3122c     18 CE 05 F1 | 	add	fp, #24
31230     E7 A8 02 FB | 	rdlong	local02, fp
31234     30 CE 05 F1 | 	add	fp, #48
31238     E7 96 02 FB | 	rdlong	arg03, fp
3123c     48 CE 85 F1 | 	sub	fp, #72
31240     4B A9 0A F2 | 	cmp	local02, arg03 wz
31244     9C 00 90 AD |  if_e	jmp	#LR__5226
31248     70 CE 05 F1 | 	add	fp, #112
3124c     E7 92 02 FB | 	rdlong	arg01, fp
31250     49 A9 02 F6 | 	mov	local02, arg01
31254     70 CE 85 F1 | 	sub	fp, #112
31258     55 95 02 F6 | 	mov	arg02, local03
3125c     2C C6 BF FD | 	call	#_fatfs_cc_ld_clust
31260     3D 95 02 F6 | 	mov	arg02, result1
31264     54 93 02 F6 | 	mov	arg01, local02
31268     60 BA BF FD | 	call	#_fatfs_cc_clst2sect
3126c     3D AB 0A F6 | 	mov	local03, result1 wz
31270     02 A6 06 A6 |  if_e	mov	local01, #2
31274     6C 00 90 AD |  if_e	jmp	#LR__5225
31278     70 CE 05 F1 | 	add	fp, #112
3127c     E7 92 02 FB | 	rdlong	arg01, fp
31280     70 CE 85 F1 | 	sub	fp, #112
31284     55 95 02 F6 | 	mov	arg02, local03
31288     C8 B8 BF FD | 	call	#_fatfs_cc_move_window
3128c     3D A7 0A F6 | 	mov	local01, result1 wz
31290     70 CE 05 F1 | 	add	fp, #112
31294     E7 AA 02 FB | 	rdlong	local03, fp
31298     70 CE 85 F1 | 	sub	fp, #112
3129c     54 AA 06 F1 | 	add	local03, #84
312a0     01 AA 06 A1 |  if_e	add	local03, #1
312a4     55 A9 C2 AA |  if_e	rdbyte	local02, local03
312a8     01 AA 86 A1 |  if_e	sub	local03, #1
312ac     2E A8 0E A2 |  if_e	cmp	local02, #46 wz
312b0     30 00 90 5D |  if_ne	jmp	#LR__5224
312b4     70 CE 05 F1 | 	add	fp, #112
312b8     E7 92 02 FB | 	rdlong	arg01, fp
312bc     28 CE 85 F1 | 	sub	fp, #40
312c0     E7 96 02 FB | 	rdlong	arg03, fp
312c4     48 CE 85 F1 | 	sub	fp, #72
312c8     55 95 02 F6 | 	mov	arg02, local03
312cc     F0 C5 BF FD | 	call	#_fatfs_cc_st_clust
312d0     70 CE 05 F1 | 	add	fp, #112
312d4     E7 A8 02 FB | 	rdlong	local02, fp
312d8     70 CE 85 F1 | 	sub	fp, #112
312dc     03 A8 06 F1 | 	add	local02, #3
312e0     54 03 48 FC | 	wrbyte	#1, local02
312e4                 | LR__5224
312e4                 | LR__5225
312e4                 | LR__5226
312e4                 | LR__5227
312e4                 | LR__5228
312e4     00 A6 0E F2 | 	cmp	local01, #0 wz
312e8     28 00 90 5D |  if_ne	jmp	#LR__5230
312ec     E7 92 02 F6 | 	mov	arg01, fp
312f0     10 92 06 F1 | 	add	arg01, #16
312f4     04 D1 BF FD | 	call	#_fatfs_cc_dir_remove
312f8     3D A7 0A F6 | 	mov	local01, result1 wz
312fc     14 00 90 5D |  if_ne	jmp	#LR__5229
31300     70 CE 05 F1 | 	add	fp, #112
31304     E7 92 02 FB | 	rdlong	arg01, fp
31308     70 CE 85 F1 | 	sub	fp, #112
3130c     BC B8 BF FD | 	call	#_fatfs_cc_sync_fs
31310     3D A7 02 F6 | 	mov	local01, result1
31314                 | LR__5229
31314                 | LR__5230
31314                 | LR__5231
31314                 | LR__5232
31314                 | ' 					res = sync_fs(fs);
31314                 | ' 				}
31314                 | ' 			}
31314                 | ' 
31314                 | ' 		}
31314                 | ' 		;
31314                 | ' 	}
31314                 | ' 
31314                 | ' 	return res ;
31314     53 7B 02 F6 | 	mov	result1, local01
31318     E7 F0 03 F6 | 	mov	ptra, fp
3131c     F2 00 A0 FD | 	call	#popregs_
31320                 | _fatfs_cc_f_rename_ret
31320     2D 00 64 FD | 	ret
31324                 | 
31324                 | _fatfs_cc___default_flush
31324     07 CA 05 F6 | 	mov	COUNT_, #7
31328     E8 00 A0 FD | 	call	#pushregs_
3132c     49 A7 02 F6 | 	mov	local01, arg01
31330     53 A9 02 FB | 	rdlong	local02, local01
31334     54 AB 02 FB | 	rdlong	local03, local02
31338     08 A6 06 F1 | 	add	local01, #8
3133c     53 7D 02 FB | 	rdlong	result2, local01
31340     08 A6 86 F1 | 	sub	local01, #8
31344     08 7C CE F7 | 	test	result2, #8 wz
31348     D4 00 90 AD |  if_e	jmp	#LR__5242
3134c     01 AA 56 F2 | 	cmps	local03, #1 wc
31350     2C 01 90 CD |  if_b	jmp	#LR__5244
31354     08 A6 06 F1 | 	add	local01, #8
31358     53 7D 02 FB | 	rdlong	result2, local01
3135c     08 A6 86 F1 | 	sub	local01, #8
31360     80 7C CE F7 | 	test	result2, #128 wz
31364     6C 00 90 AD |  if_e	jmp	#LR__5241
31368     08 A6 06 F1 | 	add	local01, #8
3136c     53 97 02 FB | 	rdlong	arg03, local01
31370     08 A6 86 F1 | 	sub	local01, #8
31374     00 97 CE F7 | 	test	arg03, #256 wz
31378     58 00 90 AD |  if_e	jmp	#LR__5240
3137c     30 A6 06 F1 | 	add	local01, #48
31380     53 AD 02 FB | 	rdlong	local04, local01
31384     56 AF 02 F6 | 	mov	local05, local04
31388     30 A6 86 F1 | 	sub	local01, #48
3138c     13 AE 46 F7 | 	zerox	local05, #19
31390     14 AC 46 F0 | 	shr	local04, #20
31394     02 AC 66 F0 | 	shl	local04, #2
31398     2D AD 02 F1 | 	add	local04, __methods__
3139c     56 AD 02 FB | 	rdlong	local04, local04
313a0     53 93 02 F6 | 	mov	arg01, local01
313a4     00 94 06 F6 | 	mov	arg02, #0
313a8     00 96 06 F6 | 	mov	arg03, #0
313ac     02 98 06 F6 | 	mov	arg04, #2
313b0     32 B1 02 F6 | 	mov	local06, objptr
313b4     57 65 02 F6 | 	mov	objptr, local05
313b8     2D AC 62 FD | 	call	local04
313bc     58 65 02 F6 | 	mov	objptr, local06
313c0     08 A6 06 F1 | 	add	local01, #8
313c4     53 B1 02 FB | 	rdlong	local06, local01
313c8     00 B1 26 F5 | 	andn	local06, #256
313cc     53 B1 62 FC | 	wrlong	local06, local01
313d0     08 A6 86 F1 | 	sub	local01, #8
313d4                 | LR__5240
313d4                 | LR__5241
313d4     18 A6 06 F1 | 	add	local01, #24
313d8     53 AD 02 FB | 	rdlong	local04, local01
313dc     56 AF 02 F6 | 	mov	local05, local04
313e0     18 A6 86 F1 | 	sub	local01, #24
313e4     13 AE 46 F7 | 	zerox	local05, #19
313e8     14 AC 46 F0 | 	shr	local04, #20
313ec     02 AC 66 F0 | 	shl	local04, #2
313f0     2D AD 02 F1 | 	add	local04, __methods__
313f4     56 AD 02 FB | 	rdlong	local04, local04
313f8     0C A8 06 F1 | 	add	local02, #12
313fc     54 95 02 FB | 	rdlong	arg02, local02
31400     0C A8 86 F1 | 	sub	local02, #12
31404     53 93 02 F6 | 	mov	arg01, local01
31408     55 97 02 F6 | 	mov	arg03, local03
3140c     32 B1 02 F6 | 	mov	local06, objptr
31410     57 65 02 F6 | 	mov	objptr, local05
31414     2D AC 62 FD | 	call	local04
31418     58 65 02 F6 | 	mov	objptr, local06
3141c     60 00 90 FD | 	jmp	#LR__5244
31420                 | LR__5242
31420     08 A6 06 F1 | 	add	local01, #8
31424     53 B1 02 FB | 	rdlong	local06, local01
31428     08 A6 86 F1 | 	sub	local01, #8
3142c     04 B0 CE F7 | 	test	local06, #4 wz
31430     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
31434     48 00 90 AD |  if_e	jmp	#LR__5243
31438     55 95 62 F6 | 	neg	arg02, local03
3143c     4A 97 02 F6 | 	mov	arg03, arg02
31440     1F 96 C6 F0 | 	sar	arg03, #31
31444     30 A6 06 F1 | 	add	local01, #48
31448     53 AD 02 FB | 	rdlong	local04, local01
3144c     56 AF 02 F6 | 	mov	local05, local04
31450     30 A6 86 F1 | 	sub	local01, #48
31454     13 AE 46 F7 | 	zerox	local05, #19
31458     14 AC 46 F0 | 	shr	local04, #20
3145c     02 AC 66 F0 | 	shl	local04, #2
31460     2D AD 02 F1 | 	add	local04, __methods__
31464     56 AD 02 FB | 	rdlong	local04, local04
31468     53 93 02 F6 | 	mov	arg01, local01
3146c     01 98 06 F6 | 	mov	arg04, #1
31470     32 B1 02 F6 | 	mov	local06, objptr
31474     57 65 02 F6 | 	mov	objptr, local05
31478     2D AC 62 FD | 	call	local04
3147c     58 65 02 F6 | 	mov	objptr, local06
31480                 | LR__5243
31480                 | LR__5244
31480     54 01 68 FC | 	wrlong	#0, local02
31484     04 A8 06 F1 | 	add	local02, #4
31488     54 01 68 FC | 	wrlong	#0, local02
3148c     08 A6 06 F1 | 	add	local01, #8
31490     53 B3 02 FB | 	rdlong	local07, local01
31494     0C B2 26 F5 | 	andn	local07, #12
31498     53 B3 62 FC | 	wrlong	local07, local01
3149c                 | '     }
3149c                 | '     b->cnt = 0;
3149c                 | '     b->ptr = 0;
3149c                 | '     f->state &= ~( (0x08) | (0x04) );
3149c                 | '     return 0;
3149c     00 7A 06 F6 | 	mov	result1, #0
314a0     E7 F0 03 F6 | 	mov	ptra, fp
314a4     F2 00 A0 FD | 	call	#popregs_
314a8                 | _fatfs_cc___default_flush_ret
314a8     2D 00 64 FD | 	ret
314ac                 | 
314ac                 | _fatfs_cc_getenv
314ac     06 CA 05 F6 | 	mov	COUNT_, #6
314b0     E8 00 A0 FD | 	call	#pushregs_
314b4     49 A7 02 F6 | 	mov	local01, arg01
314b8     49 A9 02 F6 | 	mov	local02, arg01
314bc     D7 06 48 FB | 	callpa	#(@LR__5251-@LR__5250)>>2,fcache_load_ptr_
314c0                 | LR__5250
314c0     54 7B CA FA | 	rdbyte	result1, local02 wz
314c4     01 A8 06 51 |  if_ne	add	local02, #1
314c8     F4 FF 9F 5D |  if_ne	jmp	#LR__5250
314cc                 | LR__5251
314cc     49 A9 82 F1 | 	sub	local02, arg01
314d0     54 7B 02 F6 | 	mov	result1, local02
314d4     02 00 00 FF 
314d8     FC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
314dc     36 97 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
314e0     02 00 00 FF 
314e4     FC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
314e8                 | '             return 0;
314e8     00 7A 06 A6 |  if_e	mov	result1, #0
314ec     5C 00 90 AD |  if_e	jmp	#LR__5254
314f0                 | ' 
314f0                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
314f0     02 00 00 FF 
314f4     FC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
314f8     36 AB 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
314fc     02 00 00 FF 
31500     FC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
31504                 | LR__5252
31504     55 AD 0A FB | 	rdlong	local04, local03 wz
31508     3C 00 90 AD |  if_e	jmp	#LR__5253
3150c     56 93 02 F6 | 	mov	arg01, local04
31510     53 95 02 F6 | 	mov	arg02, local01
31514     54 97 02 F6 | 	mov	arg03, local02
31518     24 AB BF FD | 	call	#_fatfs_cc_strncmp
3151c     00 7A 0E F2 | 	cmp	result1, #0 wz
31520     54 AF 02 A6 |  if_e	mov	local05, local02
31524     56 AF 02 A1 |  if_e	add	local05, local04
31528     57 B1 C2 AA |  if_e	rdbyte	local06, local05
3152c     3D B0 0E A2 |  if_e	cmp	local06, #61 wz
31530                 | ' 			return name+len+1;
31530     54 AD 02 A1 |  if_e	add	local04, local02
31534     01 AC 06 A1 |  if_e	add	local04, #1
31538     56 7B 02 A6 |  if_e	mov	result1, local04
3153c     0C 00 90 AD |  if_e	jmp	#LR__5254
31540     04 AA 06 F1 | 	add	local03, #4
31544     BC FF 9F FD | 	jmp	#LR__5252
31548                 | LR__5253
31548                 | ' 	}
31548                 | ' 	return 0;
31548     00 7A 06 F6 | 	mov	result1, #0
3154c                 | LR__5254
3154c     E7 F0 03 F6 | 	mov	ptra, fp
31550     F2 00 A0 FD | 	call	#popregs_
31554                 | _fatfs_cc_getenv_ret
31554     2D 00 64 FD | 	ret
31558                 | 
31558                 | _fatfs_cc__get_fattime
31558     00 CA 05 F6 | 	mov	COUNT_, #0
3155c     E8 00 A0 FD | 	call	#pushregs_
31560     34 F0 07 F1 | 	add	ptra, #52
31564     00 92 06 F6 | 	mov	arg01, #0
31568     A4 AB BF FD | 	call	#_fatfs_cc_time
3156c     04 CE 05 F1 | 	add	fp, #4
31570     E7 7A 62 FC | 	wrlong	result1, fp
31574     E7 92 02 F6 | 	mov	arg01, fp
31578     0C CE 05 F1 | 	add	fp, #12
3157c     E7 94 02 F6 | 	mov	arg02, fp
31580     10 CE 85 F1 | 	sub	fp, #16
31584     70 AD BF FD | 	call	#_fatfs_cc__gmtime_r
31588     24 CE 05 F1 | 	add	fp, #36
3158c     E7 7A 02 FB | 	rdlong	result1, fp
31590     50 7A 86 F1 | 	sub	result1, #80
31594     09 7A 66 F0 | 	shl	result1, #9
31598     04 CE 85 F1 | 	sub	fp, #4
3159c     E7 94 02 FB | 	rdlong	arg02, fp
315a0     01 94 06 F1 | 	add	arg02, #1
315a4     05 94 66 F0 | 	shl	arg02, #5
315a8     4A 7B 42 F5 | 	or	result1, arg02
315ac     04 CE 85 F1 | 	sub	fp, #4
315b0     E7 94 02 FB | 	rdlong	arg02, fp
315b4     4A 7B 42 F5 | 	or	result1, arg02
315b8     04 CE 85 F1 | 	sub	fp, #4
315bc     E7 94 02 FB | 	rdlong	arg02, fp
315c0     0B 94 66 F0 | 	shl	arg02, #11
315c4     04 CE 85 F1 | 	sub	fp, #4
315c8     E7 92 02 FB | 	rdlong	arg01, fp
315cc     05 92 66 F0 | 	shl	arg01, #5
315d0     49 95 42 F5 | 	or	arg02, arg01
315d4     04 CE 85 F1 | 	sub	fp, #4
315d8     E7 92 02 FB | 	rdlong	arg01, fp
315dc     10 CE 85 F1 | 	sub	fp, #16
315e0     49 95 42 F5 | 	or	arg02, arg01
315e4                 | ' 
315e4                 | '     now = time(0);
315e4                 | '     _gmtime_r (&now, &date);
315e4                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
315e4                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
315e4                 | '     return (ffdate << 16) | fftime;
315e4     10 7A 66 F0 | 	shl	result1, #16
315e8     4A 7B 42 F5 | 	or	result1, arg02
315ec     E7 F0 03 F6 | 	mov	ptra, fp
315f0     F2 00 A0 FD | 	call	#popregs_
315f4                 | _fatfs_cc__get_fattime_ret
315f4     2D 00 64 FD | 	ret
315f8                 | 
315f8                 | _fatfs_cc_unixtime_1154
315f8     02 CA 05 F6 | 	mov	COUNT_, #2
315fc     E8 00 A0 FD | 	call	#pushregs_
31600     34 F0 07 F1 | 	add	ptra, #52
31604     49 A7 02 F6 | 	mov	local01, arg01
31608     09 A6 46 F0 | 	shr	local01, #9
3160c     7F A6 06 F5 | 	and	local01, #127
31610     50 A8 06 F6 | 	mov	local02, #80
31614     53 A9 02 F1 | 	add	local02, local01
31618     24 CE 05 F1 | 	add	fp, #36
3161c     E7 A8 62 FC | 	wrlong	local02, fp
31620     49 A9 02 F6 | 	mov	local02, arg01
31624     05 A8 46 F0 | 	shr	local02, #5
31628     54 A9 42 F8 | 	getnib	local02, local02, #0
3162c     01 A8 86 F1 | 	sub	local02, #1
31630     04 CE 85 F1 | 	sub	fp, #4
31634     E7 A8 62 FC | 	wrlong	local02, fp
31638     1F 92 06 F5 | 	and	arg01, #31
3163c     04 CE 85 F1 | 	sub	fp, #4
31640     E7 92 62 FC | 	wrlong	arg01, fp
31644     4A A9 02 F6 | 	mov	local02, arg02
31648     0B A8 46 F0 | 	shr	local02, #11
3164c     1F A8 06 F5 | 	and	local02, #31
31650     04 CE 85 F1 | 	sub	fp, #4
31654     E7 A8 62 FC | 	wrlong	local02, fp
31658     4A A9 02 F6 | 	mov	local02, arg02
3165c     05 A8 46 F0 | 	shr	local02, #5
31660     3F A8 06 F5 | 	and	local02, #63
31664     04 CE 85 F1 | 	sub	fp, #4
31668     E7 A8 62 FC | 	wrlong	local02, fp
3166c     1F 94 06 F5 | 	and	arg02, #31
31670     01 94 66 F0 | 	shl	arg02, #1
31674     04 CE 85 F1 | 	sub	fp, #4
31678     E7 94 62 FC | 	wrlong	arg02, fp
3167c     E7 92 02 F6 | 	mov	arg01, fp
31680     10 CE 85 F1 | 	sub	fp, #16
31684     C8 AA BF FD | 	call	#_fatfs_cc_mktime
31688                 | ' 
31688                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
31688                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
31688                 | '     date.tm_mday = (dosdate & 0x1f);
31688                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
31688                 | '     date.tm_min = (dostime >> 5) & 0x3f;
31688                 | '     date.tm_sec = (dostime & 0x1f) << 1;
31688                 | ' 
31688                 | '     t = mktime(&date);
31688                 | ' #line 66 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
31688                 | '     return t;
31688     E7 F0 03 F6 | 	mov	ptra, fp
3168c     F2 00 A0 FD | 	call	#popregs_
31690                 | _fatfs_cc_unixtime_1154_ret
31690     2D 00 64 FD | 	ret
31694                 | 
31694                 | _fatfs_cc__set_dos_error_1156
31694     49 81 02 F6 | 	mov	_var01, arg01
31698                 | ' #line 82 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
31698                 | '     switch (derr) {
31698     14 80 26 F3 | 	fle	_var01, #20
3169c     30 80 62 FD | 	jmprel	_var01
316a0                 | LR__5260
316a0     50 00 90 FD | 	jmp	#LR__5261
316a4     84 00 90 FD | 	jmp	#LR__5275
316a8     80 00 90 FD | 	jmp	#LR__5276
316ac     7C 00 90 FD | 	jmp	#LR__5277
316b0     48 00 90 FD | 	jmp	#LR__5262
316b4     44 00 90 FD | 	jmp	#LR__5263
316b8     40 00 90 FD | 	jmp	#LR__5264
316bc     44 00 90 FD | 	jmp	#LR__5265
316c0     48 00 90 FD | 	jmp	#LR__5267
316c4     54 00 90 FD | 	jmp	#LR__5270
316c8     38 00 90 FD | 	jmp	#LR__5266
316cc     4C 00 90 FD | 	jmp	#LR__5271
316d0     48 00 90 FD | 	jmp	#LR__5272
316d4     44 00 90 FD | 	jmp	#LR__5273
316d8     50 00 90 FD | 	jmp	#LR__5278
316dc     4C 00 90 FD | 	jmp	#LR__5278
316e0     48 00 90 FD | 	jmp	#LR__5278
316e4     2C 00 90 FD | 	jmp	#LR__5268
316e8     38 00 90 FD | 	jmp	#LR__5274
316ec     2C 00 90 FD | 	jmp	#LR__5269
316f0     38 00 90 FD | 	jmp	#LR__5278
316f4                 | LR__5261
316f4     00 82 06 F6 | 	mov	_var02, #0
316f8                 | '         r = 0;
316f8                 | '         break;
316f8     34 00 90 FD | 	jmp	#LR__5279
316fc                 | LR__5262
316fc                 | LR__5263
316fc                 | LR__5264
316fc     04 82 06 F6 | 	mov	_var02, #4
31700                 | '         r =  4 ;
31700                 | '         break;
31700     2C 00 90 FD | 	jmp	#LR__5279
31704                 | LR__5265
31704                 | LR__5266
31704     06 82 06 F6 | 	mov	_var02, #6
31708                 | '         r =  6 ;
31708                 | '         break;
31708     24 00 90 FD | 	jmp	#LR__5279
3170c                 | LR__5267
3170c     09 82 06 F6 | 	mov	_var02, #9
31710                 | '         r =  9 ;
31710                 | '         break;
31710     1C 00 90 FD | 	jmp	#LR__5279
31714                 | LR__5268
31714     07 82 06 F6 | 	mov	_var02, #7
31718                 | '         r =  7 ;
31718                 | '         break;
31718     14 00 90 FD | 	jmp	#LR__5279
3171c                 | LR__5269
3171c                 | LR__5270
3171c                 | LR__5271
3171c                 | LR__5272
3171c                 | LR__5273
3171c     0A 82 06 F6 | 	mov	_var02, #10
31720                 | '         r =  10 ;
31720                 | '         break;
31720     0C 00 90 FD | 	jmp	#LR__5279
31724                 | LR__5274
31724     0B 82 06 F6 | 	mov	_var02, #11
31728                 | '         r =  11 ;
31728                 | '         break;
31728     04 00 90 FD | 	jmp	#LR__5279
3172c                 | LR__5275
3172c                 | LR__5276
3172c                 | LR__5277
3172c                 | LR__5278
3172c     0C 82 06 F6 | 	mov	_var02, #12
31730                 | '         r =  12 ;
31730                 | '         break;
31730                 | LR__5279
31730                 | '     }
31730                 | '     return _seterror(r);
31730     00 82 4E F2 | 	cmps	_var02, #0 wz
31734     20 68 06 F1 | 	add	ptr___system__dat__, #32
31738     34 83 62 FC | 	wrlong	_var02, ptr___system__dat__
3173c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
31740     01 7A 66 56 |  if_ne	neg	result1, #1
31744     00 7A 06 A6 |  if_e	mov	result1, #0
31748                 | _fatfs_cc__set_dos_error_1156_ret
31748     2D 00 64 FD | 	ret
3174c                 | 
3174c                 | _fatfs_cc_v_creat
3174c     04 CA 05 F6 | 	mov	COUNT_, #4
31750     E8 00 A0 FD | 	call	#pushregs_
31754     49 A7 02 F6 | 	mov	local01, arg01
31758     4A A9 02 F6 | 	mov	local02, arg02
3175c     03 00 00 FF 
31760     38 92 06 F6 | 	mov	arg01, ##1592
31764                 | '     return _gc_alloc(size);
31764     10 94 06 F6 | 	mov	arg02, #16
31768     70 6E BF FD | 	call	#__system___gc_doalloc
3176c     3D AB 0A F6 | 	mov	local03, result1 wz
31770                 | '       return _seterror( 7 );
31770     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31774     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
31778     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
3177c     01 7A 66 A6 |  if_e	neg	result1, #1
31780     50 00 90 AD |  if_e	jmp	#LR__5281
31784     55 93 02 F6 | 	mov	arg01, local03
31788     00 94 06 F6 | 	mov	arg02, #0
3178c     03 00 00 FF 
31790     38 96 06 F6 | 	mov	arg03, ##1592
31794     D8 00 A0 FD | 	call	#\builtin_bytefill_
31798     55 93 02 F6 | 	mov	arg01, local03
3179c     02 00 00 FF 
317a0     10 92 06 F1 | 	add	arg01, ##1040
317a4     54 95 02 F6 | 	mov	arg02, local02
317a8     07 96 06 F6 | 	mov	arg03, #7
317ac     D8 E0 BF FD | 	call	#_fatfs_cc_f_open
317b0     3D AD 0A F6 | 	mov	local04, result1 wz
317b4     14 00 90 AD |  if_e	jmp	#LR__5280
317b8     55 93 02 F6 | 	mov	arg01, local03
317bc                 | '     return _gc_free(ptr);
317bc     20 6F BF FD | 	call	#__system___gc_free
317c0                 | '     free(f);
317c0                 | '     return _set_dos_error(r);
317c0     56 93 02 F6 | 	mov	arg01, local04
317c4     CC FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
317c8     08 00 90 FD | 	jmp	#LR__5281
317cc                 | LR__5280
317cc     53 AB 62 FC | 	wrlong	local03, local01
317d0                 | '   }
317d0                 | '   fil->vfsdata = f;
317d0                 | '   return 0;
317d0     00 7A 06 F6 | 	mov	result1, #0
317d4                 | LR__5281
317d4     E7 F0 03 F6 | 	mov	ptra, fp
317d8     F2 00 A0 FD | 	call	#popregs_
317dc                 | _fatfs_cc_v_creat_ret
317dc     2D 00 64 FD | 	ret
317e0                 | 
317e0                 | _fatfs_cc_v_close
317e0     02 CA 05 F6 | 	mov	COUNT_, #2
317e4     E8 00 A0 FD | 	call	#pushregs_
317e8     49 A7 02 FB | 	rdlong	local01, arg01
317ec     53 93 02 F6 | 	mov	arg01, local01
317f0     02 00 00 FF 
317f4     10 92 06 F1 | 	add	arg01, ##1040
317f8     34 EE BF FD | 	call	#_fatfs_cc_f_close
317fc     3D A9 02 F6 | 	mov	local02, result1
31800     53 93 02 F6 | 	mov	arg01, local01
31804                 | '     return _gc_free(ptr);
31804     D8 6E BF FD | 	call	#__system___gc_free
31808                 | '     FAT_FIL *f = fil->vfsdata;
31808                 | '     r=f_close(&f->fil);
31808                 | '     free(f);
31808                 | '     return _set_dos_error(r);
31808     54 93 02 F6 | 	mov	arg01, local02
3180c     84 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31810     E7 F0 03 F6 | 	mov	ptra, fp
31814     F2 00 A0 FD | 	call	#popregs_
31818                 | _fatfs_cc_v_close_ret
31818     2D 00 64 FD | 	ret
3181c                 | 
3181c                 | _fatfs_cc_v_opendir
3181c     04 CA 05 F6 | 	mov	COUNT_, #4
31820     E8 00 A0 FD | 	call	#pushregs_
31824     49 A7 02 F6 | 	mov	local01, arg01
31828     4A A9 02 F6 | 	mov	local02, arg02
3182c     30 92 06 F6 | 	mov	arg01, #48
31830                 | '     return _gc_alloc(size);
31830     10 94 06 F6 | 	mov	arg02, #16
31834     A4 6D BF FD | 	call	#__system___gc_doalloc
31838     3D AB 0A F6 | 	mov	local03, result1 wz
3183c                 | ' #line 166 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
3183c                 | '       return _seterror( 7 );
3183c     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31840     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
31844     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31848     01 7A 66 A6 |  if_e	neg	result1, #1
3184c     34 00 90 AD |  if_e	jmp	#LR__5291
31850     54 95 02 F6 | 	mov	arg02, local02
31854     55 93 02 F6 | 	mov	arg01, local03
31858     C0 F1 BF FD | 	call	#_fatfs_cc_f_opendir
3185c     3D AD 0A F6 | 	mov	local04, result1 wz
31860     14 00 90 AD |  if_e	jmp	#LR__5290
31864     55 93 02 F6 | 	mov	arg01, local03
31868                 | '     return _gc_free(ptr);
31868     74 6E BF FD | 	call	#__system___gc_free
3186c                 | '         free(f);
3186c                 | '         return _set_dos_error(r);
3186c     56 93 02 F6 | 	mov	arg01, local04
31870     20 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31874     0C 00 90 FD | 	jmp	#LR__5291
31878                 | LR__5290
31878     04 A6 06 F1 | 	add	local01, #4
3187c     53 AB 62 FC | 	wrlong	local03, local01
31880                 | '     }
31880                 | '     dir->vfsdata = f;
31880                 | '     return 0;
31880     00 7A 06 F6 | 	mov	result1, #0
31884                 | LR__5291
31884     E7 F0 03 F6 | 	mov	ptra, fp
31888     F2 00 A0 FD | 	call	#popregs_
3188c                 | _fatfs_cc_v_opendir_ret
3188c     2D 00 64 FD | 	ret
31890                 | 
31890                 | _fatfs_cc_v_closedir
31890     02 CA 05 F6 | 	mov	COUNT_, #2
31894     E8 00 A0 FD | 	call	#pushregs_
31898     04 92 06 F1 | 	add	arg01, #4
3189c     49 A7 02 FB | 	rdlong	local01, arg01
318a0     53 93 02 F6 | 	mov	arg01, local01
318a4     90 F2 BF FD | 	call	#_fatfs_cc_f_closedir
318a8     3D A9 02 F6 | 	mov	local02, result1
318ac     53 93 02 F6 | 	mov	arg01, local01
318b0                 | '     return _gc_free(ptr);
318b0     2C 6E BF FD | 	call	#__system___gc_free
318b4     00 A8 0E F2 | 	cmp	local02, #0 wz
318b8     54 93 02 56 |  if_ne	mov	arg01, local02
318bc     D4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1156
318c0                 | '     return r;
318c0     54 7B 02 F6 | 	mov	result1, local02
318c4     E7 F0 03 F6 | 	mov	ptra, fp
318c8     F2 00 A0 FD | 	call	#popregs_
318cc                 | _fatfs_cc_v_closedir_ret
318cc     2D 00 64 FD | 	ret
318d0                 | 
318d0                 | _fatfs_cc_v_readdir
318d0     01 CA 05 F6 | 	mov	COUNT_, #1
318d4     E8 00 A0 FD | 	call	#pushregs_
318d8     2C F1 07 F1 | 	add	ptra, #300
318dc     4A A7 02 F6 | 	mov	local01, arg02
318e0     04 92 06 F1 | 	add	arg01, #4
318e4     49 93 02 FB | 	rdlong	arg01, arg01
318e8     E7 94 02 F6 | 	mov	arg02, fp
318ec     0C 94 06 F1 | 	add	arg02, #12
318f0     78 F2 BF FD | 	call	#_fatfs_cc_f_readdir
318f4     3D 97 0A F6 | 	mov	arg03, result1 wz
318f8     0C 00 90 AD |  if_e	jmp	#LR__5300
318fc                 | '         return _set_dos_error(r);
318fc     4B 93 02 F6 | 	mov	arg01, arg03
31900     90 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31904     88 00 90 FD | 	jmp	#LR__5301
31908                 | LR__5300
31908     28 CE 05 F1 | 	add	fp, #40
3190c     E7 96 CA FA | 	rdbyte	arg03, fp wz
31910     28 CE 85 F1 | 	sub	fp, #40
31914                 | '         return -1;
31914     01 7A 66 A6 |  if_e	neg	result1, #1
31918     74 00 90 AD |  if_e	jmp	#LR__5301
3191c     E7 94 02 F6 | 	mov	arg02, fp
31920     28 94 06 F1 | 	add	arg02, #40
31924     53 93 02 F6 | 	mov	arg01, local01
31928     3F 96 06 F6 | 	mov	arg03, #63
3192c     7C A6 BF FD | 	call	#_fatfs_cc_strncpy
31930     3F A6 06 F1 | 	add	local01, #63
31934     53 01 48 FC | 	wrbyte	#0, local01
31938     3F A6 86 F1 | 	sub	local01, #63
3193c     14 CE 05 F1 | 	add	fp, #20
31940     E7 96 C2 FA | 	rdbyte	arg03, fp
31944     10 96 CE F7 | 	test	arg03, #16 wz
31948     50 A6 06 51 |  if_ne	add	local01, #80
3194c     53 03 48 5C |  if_ne	wrbyte	#1, local01
31950     50 A6 E6 F3 | 	sumnz	local01, #80
31954     53 01 48 AC |  if_e	wrbyte	#0, local01
31958     50 A6 86 A1 |  if_e	sub	local01, #80
3195c     08 CE 85 F1 | 	sub	fp, #8
31960     E7 96 02 FB | 	rdlong	arg03, fp
31964     48 A6 06 F1 | 	add	local01, #72
31968     53 97 62 FC | 	wrlong	arg03, local01
3196c     04 CE 05 F1 | 	add	fp, #4
31970     E7 92 E2 FA | 	rdword	arg01, fp
31974     02 CE 05 F1 | 	add	fp, #2
31978     E7 94 E2 FA | 	rdword	arg02, fp
3197c     12 CE 85 F1 | 	sub	fp, #18
31980     74 FC BF FD | 	call	#_fatfs_cc_unixtime_1154
31984     04 A6 06 F1 | 	add	local01, #4
31988     53 7B 62 FC | 	wrlong	result1, local01
3198c                 | '         ent->d_type =  (0) ;
3198c                 | '     }
3198c                 | '     ent->d_size = finfo.fsize;
3198c                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
3198c                 | '     return 0;
3198c     00 7A 06 F6 | 	mov	result1, #0
31990                 | LR__5301
31990     E7 F0 03 F6 | 	mov	ptra, fp
31994     F2 00 A0 FD | 	call	#popregs_
31998                 | _fatfs_cc_v_readdir_ret
31998     2D 00 64 FD | 	ret
3199c                 | 
3199c                 | _fatfs_cc_v_stat
3199c     05 CA 05 F6 | 	mov	COUNT_, #5
319a0     E8 00 A0 FD | 	call	#pushregs_
319a4     30 F1 07 F1 | 	add	ptra, #304
319a8     49 A7 02 F6 | 	mov	local01, arg01
319ac     4A A9 02 F6 | 	mov	local02, arg02
319b0     54 93 02 F6 | 	mov	arg01, local02
319b4     00 94 06 F6 | 	mov	arg02, #0
319b8     34 96 06 F6 | 	mov	arg03, #52
319bc     D8 00 A0 FD | 	call	#\builtin_bytefill_
319c0     53 7D CA FA | 	rdbyte	result2, local01 wz
319c4     1C 00 90 AD |  if_e	jmp	#LR__5310
319c8     53 7D C2 FA | 	rdbyte	result2, local01
319cc     2E 7C 0E F2 | 	cmp	result2, #46 wz
319d0     01 A6 06 A1 |  if_e	add	local01, #1
319d4     53 AB C2 AA |  if_e	rdbyte	local03, local01
319d8     01 A6 86 A1 |  if_e	sub	local01, #1
319dc     00 AA 4E A2 |  if_e	cmps	local03, #0 wz
319e0     14 00 90 5D |  if_ne	jmp	#LR__5311
319e4                 | LR__5310
319e4     18 CE 05 F1 | 	add	fp, #24
319e8     E7 20 48 FC | 	wrbyte	#16, fp
319ec     18 CE 85 F1 | 	sub	fp, #24
319f0     00 AC 06 F6 | 	mov	local04, #0
319f4     14 00 90 FD | 	jmp	#LR__5312
319f8                 | LR__5311
319f8     E7 94 02 F6 | 	mov	arg02, fp
319fc     10 94 06 F1 | 	add	arg02, #16
31a00     53 93 02 F6 | 	mov	arg01, local01
31a04     00 F2 BF FD | 	call	#_fatfs_cc_f_stat
31a08     3D AD 02 F6 | 	mov	local04, result1
31a0c                 | LR__5312
31a0c     00 AC 0E F2 | 	cmp	local04, #0 wz
31a10     0C 00 90 AD |  if_e	jmp	#LR__5313
31a14                 | '         return _set_dos_error(r);
31a14     56 93 02 F6 | 	mov	arg01, local04
31a18     78 FC BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31a1c     9C 00 90 FD | 	jmp	#LR__5314
31a20                 | LR__5313
31a20     24 AF 06 F6 | 	mov	local05, #292
31a24     18 CE 05 F1 | 	add	fp, #24
31a28     E7 AA C2 FA | 	rdbyte	local03, fp
31a2c     01 AA CE F7 | 	test	local03, #1 wz
31a30     B6 AF 06 A6 |  if_e	mov	local05, #438
31a34     10 AA CE F7 | 	test	local03, #16 wz
31a38     08 00 00 5F 
31a3c     49 AE 46 55 |  if_ne	or	local05, ##4169
31a40     08 A8 06 F1 | 	add	local02, #8
31a44     54 AF 62 FC | 	wrlong	local05, local02
31a48     04 A8 06 F1 | 	add	local02, #4
31a4c     54 03 68 FC | 	wrlong	#1, local02
31a50     08 CE 85 F1 | 	sub	fp, #8
31a54     E7 7A 02 FB | 	rdlong	result1, fp
31a58     0C A8 06 F1 | 	add	local02, #12
31a5c     54 7B 62 FC | 	wrlong	result1, local02
31a60     04 A8 06 F1 | 	add	local02, #4
31a64     54 01 68 FC | 	wrlong	#0, local02
31a68     04 A8 06 F1 | 	add	local02, #4
31a6c     01 00 80 FF 
31a70     54 01 68 FC | 	wrlong	##512, local02
31a74     E7 AA 02 FB | 	rdlong	local03, fp
31a78     FF AB 06 F1 | 	add	local03, #511
31a7c     09 AA 46 F0 | 	shr	local03, #9
31a80     04 A8 06 F1 | 	add	local02, #4
31a84     54 AB 62 FC | 	wrlong	local03, local02
31a88     04 CE 05 F1 | 	add	fp, #4
31a8c     E7 92 E2 FA | 	rdword	arg01, fp
31a90     02 CE 05 F1 | 	add	fp, #2
31a94     E7 94 E2 FA | 	rdword	arg02, fp
31a98     16 CE 85 F1 | 	sub	fp, #22
31a9c     58 FB BF FD | 	call	#_fatfs_cc_unixtime_1154
31aa0     0C A8 06 F1 | 	add	local02, #12
31aa4     54 7B 62 FC | 	wrlong	result1, local02
31aa8     04 A8 86 F1 | 	sub	local02, #4
31aac     54 7B 62 FC | 	wrlong	result1, local02
31ab0     04 A8 86 F1 | 	sub	local02, #4
31ab4     54 7B 62 FC | 	wrlong	result1, local02
31ab8                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
31ab8                 | '     }
31ab8                 | '     buf->st_mode = mode;
31ab8                 | '     buf->st_nlink = 1;
31ab8                 | '     buf->st_size = finfo.fsize;
31ab8                 | '     buf->st_blksize = 512;
31ab8                 | '     buf->st_blocks = (finfo.fsize + 511) / 512;
31ab8                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
31ab8                 | ' #line 257 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
31ab8                 | '     return r;
31ab8     56 7B 02 F6 | 	mov	result1, local04
31abc                 | LR__5314
31abc     E7 F0 03 F6 | 	mov	ptra, fp
31ac0     F2 00 A0 FD | 	call	#popregs_
31ac4                 | _fatfs_cc_v_stat_ret
31ac4     2D 00 64 FD | 	ret
31ac8                 | 
31ac8                 | _fatfs_cc_v_read
31ac8     02 CA 05 F6 | 	mov	COUNT_, #2
31acc     E8 00 A0 FD | 	call	#pushregs_
31ad0     1C F0 07 F1 | 	add	ptra, #28
31ad4     49 A7 02 F6 | 	mov	local01, arg01
31ad8     53 93 0A FB | 	rdlong	arg01, local01 wz
31adc                 | '         return _seterror( 5 );
31adc     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31ae0     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
31ae4     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31ae8     01 7A 66 A6 |  if_e	neg	result1, #1
31aec     58 00 90 AD |  if_e	jmp	#LR__5321
31af0     02 00 00 FF 
31af4     10 92 06 F1 | 	add	arg01, ##1040
31af8     E7 98 02 F6 | 	mov	arg04, fp
31afc     18 98 06 F1 | 	add	arg04, #24
31b00     DC E1 BF FD | 	call	#_fatfs_cc_f_read
31b04     3D 99 0A F6 | 	mov	arg04, result1 wz
31b08     1C 00 90 AD |  if_e	jmp	#LR__5320
31b0c     08 A6 06 F1 | 	add	local01, #8
31b10     53 93 02 FB | 	rdlong	arg01, local01
31b14     20 92 46 F5 | 	or	arg01, #32
31b18     53 93 62 FC | 	wrlong	arg01, local01
31b1c                 | '         fil->state |=  (0x20) ;
31b1c                 | '         return _set_dos_error(r);
31b1c     4C 93 02 F6 | 	mov	arg01, arg04
31b20     70 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31b24     20 00 90 FD | 	jmp	#LR__5321
31b28                 | LR__5320
31b28     18 CE 05 F1 | 	add	fp, #24
31b2c     E7 A8 0A FB | 	rdlong	local02, fp wz
31b30     08 A6 06 A1 |  if_e	add	local01, #8
31b34     53 A9 02 AB |  if_e	rdlong	local02, local01
31b38     10 A8 46 A5 |  if_e	or	local02, #16
31b3c     53 A9 62 AC |  if_e	wrlong	local02, local01
31b40                 | '         fil->state |=  (0x10) ;
31b40                 | '     }
31b40                 | '     return x;
31b40     E7 7A 02 FB | 	rdlong	result1, fp
31b44     18 CE 85 F1 | 	sub	fp, #24
31b48                 | LR__5321
31b48     E7 F0 03 F6 | 	mov	ptra, fp
31b4c     F2 00 A0 FD | 	call	#popregs_
31b50                 | _fatfs_cc_v_read_ret
31b50     2D 00 64 FD | 	ret
31b54                 | 
31b54                 | _fatfs_cc_v_write
31b54     01 CA 05 F6 | 	mov	COUNT_, #1
31b58     E8 00 A0 FD | 	call	#pushregs_
31b5c     1C F0 07 F1 | 	add	ptra, #28
31b60     49 A7 02 F6 | 	mov	local01, arg01
31b64     53 93 0A FB | 	rdlong	arg01, local01 wz
31b68                 | '         return _seterror( 5 );
31b68     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31b6c     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
31b70     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31b74     01 7A 66 A6 |  if_e	neg	result1, #1
31b78     44 00 90 AD |  if_e	jmp	#LR__5331
31b7c     02 00 00 FF 
31b80     10 92 06 F1 | 	add	arg01, ##1040
31b84     E7 98 02 F6 | 	mov	arg04, fp
31b88     18 98 06 F1 | 	add	arg04, #24
31b8c     E8 E4 BF FD | 	call	#_fatfs_cc_f_write
31b90     3D 99 0A F6 | 	mov	arg04, result1 wz
31b94     1C 00 90 AD |  if_e	jmp	#LR__5330
31b98     08 A6 06 F1 | 	add	local01, #8
31b9c     53 93 02 FB | 	rdlong	arg01, local01
31ba0     20 92 46 F5 | 	or	arg01, #32
31ba4     53 93 62 FC | 	wrlong	arg01, local01
31ba8                 | '         fil->state |=  (0x20) ;
31ba8                 | '         return _set_dos_error(r);
31ba8     4C 93 02 F6 | 	mov	arg01, arg04
31bac     E4 FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31bb0     0C 00 90 FD | 	jmp	#LR__5331
31bb4                 | LR__5330
31bb4                 | '     }
31bb4                 | '     return x;
31bb4     18 CE 05 F1 | 	add	fp, #24
31bb8     E7 7A 02 FB | 	rdlong	result1, fp
31bbc     18 CE 85 F1 | 	sub	fp, #24
31bc0                 | LR__5331
31bc0     E7 F0 03 F6 | 	mov	ptra, fp
31bc4     F2 00 A0 FD | 	call	#popregs_
31bc8                 | _fatfs_cc_v_write_ret
31bc8     2D 00 64 FD | 	ret
31bcc                 | 
31bcc                 | _fatfs_cc_v_lseek
31bcc     06 CA 05 F6 | 	mov	COUNT_, #6
31bd0     E8 00 A0 FD | 	call	#pushregs_
31bd4     4A AB 02 F6 | 	mov	local03, arg02
31bd8     4C AD 02 F6 | 	mov	local04, arg04
31bdc     49 AF 02 FB | 	rdlong	local05, arg01
31be0     02 00 00 FF 
31be4     10 AE 0E F1 | 	add	local05, ##1040 wz
31be8     18 00 90 5D |  if_ne	jmp	#LR__5340
31bec                 | '         return _seterror( 5 );
31bec     20 68 06 F1 | 	add	ptr___system__dat__, #32
31bf0     34 0B 68 FC | 	wrlong	#5, ptr___system__dat__
31bf4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
31bf8     01 7C 66 F6 | 	neg	result2, #1
31bfc     01 7A 66 F6 | 	neg	result1, #1
31c00     58 00 90 FD | 	jmp	#LR__5343
31c04                 | LR__5340
31c04     00 AC 0E F2 | 	cmp	local04, #0 wz
31c08     24 00 90 AD |  if_e	jmp	#LR__5341
31c0c     01 AC 0E F2 | 	cmp	local04, #1 wz
31c10     14 AE 06 A1 |  if_e	add	local05, #20
31c14     57 B1 02 AB |  if_e	rdlong	local06, local05
31c18     14 AE 86 A1 |  if_e	sub	local05, #20
31c1c     58 AB 02 A1 |  if_e	add	local03, local06
31c20     0C AE 06 51 |  if_ne	add	local05, #12
31c24     57 B1 02 5B |  if_ne	rdlong	local06, local05
31c28     0C AE 86 51 |  if_ne	sub	local05, #12
31c2c     58 AB 02 51 |  if_ne	add	local03, local06
31c30                 | LR__5341
31c30     57 93 02 F6 | 	mov	arg01, local05
31c34     55 95 02 F6 | 	mov	arg02, local03
31c38     38 EA BF FD | 	call	#_fatfs_cc_f_lseek
31c3c     3D 93 0A F6 | 	mov	arg01, result1 wz
31c40     10 00 90 AD |  if_e	jmp	#LR__5342
31c44                 | '         return _set_dos_error(result);
31c44     4C FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31c48     3D 7D 02 F6 | 	mov	result2, result1
31c4c     1F 7C C6 F0 | 	sar	result2, #31
31c50     08 00 90 FD | 	jmp	#LR__5343
31c54                 | LR__5342
31c54                 | '     }
31c54                 | '     return (off_t)offset;
31c54     55 7B 02 F6 | 	mov	result1, local03
31c58     54 7D 02 F6 | 	mov	result2, local02
31c5c                 | LR__5343
31c5c     E7 F0 03 F6 | 	mov	ptra, fp
31c60     F2 00 A0 FD | 	call	#popregs_
31c64                 | _fatfs_cc_v_lseek_ret
31c64     2D 00 64 FD | 	ret
31c68                 | 
31c68                 | _fatfs_cc_v_ioctl
31c68                 | ' {
31c68                 | '     return _seterror( 10 );
31c68     20 68 06 F1 | 	add	ptr___system__dat__, #32
31c6c     34 15 68 FC | 	wrlong	#10, ptr___system__dat__
31c70     20 68 86 F1 | 	sub	ptr___system__dat__, #32
31c74     01 7A 66 F6 | 	neg	result1, #1
31c78                 | _fatfs_cc_v_ioctl_ret
31c78     2D 00 64 FD | 	ret
31c7c                 | 
31c7c                 | _fatfs_cc_v_mkdir
31c7c     A0 F1 BF FD | 	call	#_fatfs_cc_f_mkdir
31c80     3D 93 02 F6 | 	mov	arg01, result1
31c84                 | ' 
31c84                 | '     r = f_mkdir(name);
31c84                 | '     return _set_dos_error(r);
31c84     0C FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31c88                 | _fatfs_cc_v_mkdir_ret
31c88     2D 00 64 FD | 	ret
31c8c                 | 
31c8c                 | _fatfs_cc_v_remove
31c8c     0C F0 BF FD | 	call	#_fatfs_cc_f_unlink
31c90     3D 93 02 F6 | 	mov	arg01, result1
31c94                 | ' 
31c94                 | '     r = f_unlink(name);
31c94                 | '     return _set_dos_error(r);
31c94     FC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31c98                 | _fatfs_cc_v_remove_ret
31c98     2D 00 64 FD | 	ret
31c9c                 | 
31c9c                 | _fatfs_cc_v_rmdir
31c9c     FC EF BF FD | 	call	#_fatfs_cc_f_unlink
31ca0     3D 93 02 F6 | 	mov	arg01, result1
31ca4                 | ' 
31ca4                 | '     r = f_unlink(name);
31ca4                 | '     return _set_dos_error(r);
31ca4     EC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31ca8                 | _fatfs_cc_v_rmdir_ret
31ca8     2D 00 64 FD | 	ret
31cac                 | 
31cac                 | _fatfs_cc_v_rename
31cac     B0 F3 BF FD | 	call	#_fatfs_cc_f_rename
31cb0     3D 93 02 F6 | 	mov	arg01, result1
31cb4                 | '     return _set_dos_error(r);
31cb4     DC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31cb8                 | _fatfs_cc_v_rename_ret
31cb8     2D 00 64 FD | 	ret
31cbc                 | 
31cbc                 | _fatfs_cc_v_open
31cbc     07 CA 05 F6 | 	mov	COUNT_, #7
31cc0     E8 00 A0 FD | 	call	#pushregs_
31cc4     49 A7 02 F6 | 	mov	local01, arg01
31cc8     4A A9 02 F6 | 	mov	local02, arg02
31ccc     4B AB 02 F6 | 	mov	local03, arg03
31cd0     03 00 00 FF 
31cd4     38 92 06 F6 | 	mov	arg01, ##1592
31cd8                 | '     return _gc_alloc(size);
31cd8     10 94 06 F6 | 	mov	arg02, #16
31cdc     FC 68 BF FD | 	call	#__system___gc_doalloc
31ce0     3D AD 0A F6 | 	mov	local04, result1 wz
31ce4                 | '       return _seterror( 7 );
31ce4     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31ce8     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
31cec     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31cf0     01 7A 66 A6 |  if_e	neg	result1, #1
31cf4     90 00 90 AD |  if_e	jmp	#LR__5356
31cf8     56 93 02 F6 | 	mov	arg01, local04
31cfc     00 94 06 F6 | 	mov	arg02, #0
31d00     03 00 00 FF 
31d04     38 96 06 F6 | 	mov	arg03, ##1592
31d08     D8 00 A0 FD | 	call	#\builtin_bytefill_
31d0c                 | '   switch (flags & 3) {
31d0c     55 AF 02 F6 | 	mov	local05, local03
31d10     03 AE 0E F5 | 	and	local05, #3 wz
31d14     0C 00 90 AD |  if_e	jmp	#LR__5350
31d18     01 AE 0E F2 | 	cmp	local05, #1 wz
31d1c     0C 00 90 AD |  if_e	jmp	#LR__5351
31d20     10 00 90 FD | 	jmp	#LR__5352
31d24                 | LR__5350
31d24     01 B0 06 F6 | 	mov	local06, #1
31d28                 | '       fs_flags =  0x01 ;
31d28                 | '       break;
31d28     0C 00 90 FD | 	jmp	#LR__5353
31d2c                 | LR__5351
31d2c     02 B0 06 F6 | 	mov	local06, #2
31d30                 | '       fs_flags =  0x02 ;
31d30                 | '       break;
31d30     04 00 90 FD | 	jmp	#LR__5353
31d34                 | LR__5352
31d34     03 B0 06 F6 | 	mov	local06, #3
31d38                 | '       fs_flags =  0x01  |  0x02 ;
31d38                 | '       break;
31d38                 | LR__5353
31d38     08 AA CE F7 | 	test	local03, #8 wz
31d3c     18 B0 46 55 |  if_ne	or	local06, #24
31d40     08 00 90 5D |  if_ne	jmp	#LR__5354
31d44     20 AA CE F7 | 	test	local03, #32 wz
31d48     30 B0 46 55 |  if_ne	or	local06, #48
31d4c                 | LR__5354
31d4c     56 93 02 F6 | 	mov	arg01, local04
31d50     02 00 00 FF 
31d54     10 92 06 F1 | 	add	arg01, ##1040
31d58     54 95 02 F6 | 	mov	arg02, local02
31d5c     58 97 02 F6 | 	mov	arg03, local06
31d60     24 DB BF FD | 	call	#_fatfs_cc_f_open
31d64     3D B3 0A F6 | 	mov	local07, result1 wz
31d68     14 00 90 AD |  if_e	jmp	#LR__5355
31d6c     56 93 02 F6 | 	mov	arg01, local04
31d70                 | '     return _gc_free(ptr);
31d70     6C 69 BF FD | 	call	#__system___gc_free
31d74                 | '     free(f);
31d74                 | ' #line 426 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
31d74                 | '     return _set_dos_error(r);
31d74     59 93 02 F6 | 	mov	arg01, local07
31d78     18 F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31d7c     08 00 90 FD | 	jmp	#LR__5356
31d80                 | LR__5355
31d80     53 AD 62 FC | 	wrlong	local04, local01
31d84                 | '   }
31d84                 | '   fil->vfsdata = f;
31d84                 | '   return 0;
31d84     00 7A 06 F6 | 	mov	result1, #0
31d88                 | LR__5356
31d88     E7 F0 03 F6 | 	mov	ptra, fp
31d8c     F2 00 A0 FD | 	call	#popregs_
31d90                 | _fatfs_cc_v_open_ret
31d90     2D 00 64 FD | 	ret
31d94                 | 
31d94                 | _fatfs_cc_v_flush
31d94     01 CA 05 F6 | 	mov	COUNT_, #1
31d98     E8 00 A0 FD | 	call	#pushregs_
31d9c     49 A7 02 F6 | 	mov	local01, arg01
31da0     80 F5 BF FD | 	call	#_fatfs_cc___default_flush
31da4     53 A7 02 FB | 	rdlong	local01, local01
31da8     02 00 00 FF 
31dac     10 A6 0E F1 | 	add	local01, ##1040 wz
31db0                 | '         return _seterror( 5 );
31db0     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31db4     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
31db8     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31dbc     01 7A 66 A6 |  if_e	neg	result1, #1
31dc0     10 00 90 AD |  if_e	jmp	#LR__5360
31dc4     53 93 02 F6 | 	mov	arg01, local01
31dc8     FC E6 BF FD | 	call	#_fatfs_cc_f_sync
31dcc     3D 93 02 F6 | 	mov	arg01, result1
31dd0                 | '     }
31dd0                 | ' #line 449 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
31dd0                 | '     result = f_sync(f);
31dd0                 | ' #line 453 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
31dd0                 | '     return _set_dos_error(result);
31dd0     C0 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31dd4                 | LR__5360
31dd4     E7 F0 03 F6 | 	mov	ptra, fp
31dd8     F2 00 A0 FD | 	call	#popregs_
31ddc                 | _fatfs_cc_v_flush_ret
31ddc     2D 00 64 FD | 	ret
31de0                 | 
31de0                 | _fatfs_cc_v_init
31de0                 | ' {
31de0                 | '     return 0;
31de0     00 7A 06 F6 | 	mov	result1, #0
31de4                 | _fatfs_cc_v_init_ret
31de4     2D 00 64 FD | 	ret
31de8                 | 
31de8                 | _fatfs_cc_v_deinit
31de8     93 01 00 FF 
31dec     0C 95 06 F6 | 	mov	arg02, ##@LR__5486
31df0     00 92 06 F6 | 	mov	arg01, #0
31df4     00 96 06 F6 | 	mov	arg03, #0
31df8     B8 D9 BF FD | 	call	#_fatfs_cc_f_mount
31dfc     01 00 00 FF 
31e00     08 64 06 F1 | 	add	objptr, ##520
31e04     32 93 02 FB | 	rdlong	arg01, objptr
31e08     04 64 06 F1 | 	add	objptr, #4
31e0c     32 95 02 FB | 	rdlong	arg02, objptr
31e10     01 00 00 FF 
31e14     0C 64 86 F1 | 	sub	objptr, ##524
31e18     2C 50 BF FD | 	call	#__system___freepins
31e1c                 | ' #line 474 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
31e1c                 | '     _freepins(f_pinmask);
31e1c                 | '     return 0;
31e1c     00 7A 06 F6 | 	mov	result1, #0
31e20                 | _fatfs_cc_v_deinit_ret
31e20     2D 00 64 FD | 	ret
31e24                 | 
31e24                 | _fatfs_cc_get_vfs
31e24     01 CA 05 F6 | 	mov	COUNT_, #1
31e28     E8 00 A0 FD | 	call	#pushregs_
31e2c     49 A7 02 F6 | 	mov	local01, arg01
31e30     58 92 06 F6 | 	mov	arg01, #88
31e34     74 67 BF FD | 	call	#__system___gc_alloc_managed
31e38     3D 93 02 F6 | 	mov	arg01, result1
31e3c     32 7B 02 F6 | 	mov	result1, objptr
31e40     00 D8 05 FF 
31e44     00 7A 46 F5 | 	or	result1, ##196083712
31e48     49 7B 62 FC | 	wrlong	result1, arg01
31e4c     32 7B 02 F6 | 	mov	result1, objptr
31e50     00 E0 05 FF 
31e54     00 7A 46 F5 | 	or	result1, ##197132288
31e58     04 92 06 F1 | 	add	arg01, #4
31e5c     49 7B 62 FC | 	wrlong	result1, arg01
31e60     32 7B 02 F6 | 	mov	result1, objptr
31e64     00 E8 05 FF 
31e68     00 7A 46 F5 | 	or	result1, ##198180864
31e6c     04 92 06 F1 | 	add	arg01, #4
31e70     49 7B 62 FC | 	wrlong	result1, arg01
31e74     32 7B 02 F6 | 	mov	result1, objptr
31e78     00 F0 05 FF 
31e7c     00 7A 46 F5 | 	or	result1, ##199229440
31e80     04 92 06 F1 | 	add	arg01, #4
31e84     49 7B 62 FC | 	wrlong	result1, arg01
31e88     32 7B 02 F6 | 	mov	result1, objptr
31e8c     00 F8 05 FF 
31e90     00 7A 46 F5 | 	or	result1, ##200278016
31e94     04 92 06 F1 | 	add	arg01, #4
31e98     49 7B 62 FC | 	wrlong	result1, arg01
31e9c     32 7B 02 F6 | 	mov	result1, objptr
31ea0     3A 7A 26 F4 | 	bith	result1, #58
31ea4     04 92 06 F1 | 	add	arg01, #4
31ea8     49 7B 62 FC | 	wrlong	result1, arg01
31eac     04 92 06 F1 | 	add	arg01, #4
31eb0     49 A7 62 FC | 	wrlong	local01, arg01
31eb4     04 92 06 F1 | 	add	arg01, #4
31eb8     49 01 68 FC | 	wrlong	#0, arg01
31ebc     32 7B 02 F6 | 	mov	result1, objptr
31ec0     00 08 06 FF 
31ec4     00 7A 46 F5 | 	or	result1, ##202375168
31ec8     04 92 06 F1 | 	add	arg01, #4
31ecc     49 7B 62 FC | 	wrlong	result1, arg01
31ed0     32 7B 02 F6 | 	mov	result1, objptr
31ed4     00 10 06 FF 
31ed8     00 7A 46 F5 | 	or	result1, ##203423744
31edc     04 92 06 F1 | 	add	arg01, #4
31ee0     49 7B 62 FC | 	wrlong	result1, arg01
31ee4     32 7B 02 F6 | 	mov	result1, objptr
31ee8     00 18 06 FF 
31eec     00 7A 46 F5 | 	or	result1, ##204472320
31ef0     04 92 06 F1 | 	add	arg01, #4
31ef4     49 7B 62 FC | 	wrlong	result1, arg01
31ef8     32 7B 02 F6 | 	mov	result1, objptr
31efc     00 20 06 FF 
31f00     00 7A 46 F5 | 	or	result1, ##205520896
31f04     04 92 06 F1 | 	add	arg01, #4
31f08     49 7B 62 FC | 	wrlong	result1, arg01
31f0c     32 7B 02 F6 | 	mov	result1, objptr
31f10     00 28 06 FF 
31f14     00 7A 46 F5 | 	or	result1, ##206569472
31f18     04 92 06 F1 | 	add	arg01, #4
31f1c     49 7B 62 FC | 	wrlong	result1, arg01
31f20     32 7B 02 F6 | 	mov	result1, objptr
31f24     00 30 06 FF 
31f28     00 7A 46 F5 | 	or	result1, ##207618048
31f2c     04 92 06 F1 | 	add	arg01, #4
31f30     49 7B 62 FC | 	wrlong	result1, arg01
31f34     32 7B 02 F6 | 	mov	result1, objptr
31f38     00 38 06 FF 
31f3c     00 7A 46 F5 | 	or	result1, ##208666624
31f40     04 92 06 F1 | 	add	arg01, #4
31f44     49 7B 62 FC | 	wrlong	result1, arg01
31f48     32 7B 02 F6 | 	mov	result1, objptr
31f4c     00 40 06 FF 
31f50     00 7A 46 F5 | 	or	result1, ##209715200
31f54     04 92 06 F1 | 	add	arg01, #4
31f58     49 7B 62 FC | 	wrlong	result1, arg01
31f5c     32 7B 02 F6 | 	mov	result1, objptr
31f60     00 48 06 FF 
31f64     00 7A 46 F5 | 	or	result1, ##210763776
31f68     04 92 06 F1 | 	add	arg01, #4
31f6c     49 7B 62 FC | 	wrlong	result1, arg01
31f70     32 7B 02 F6 | 	mov	result1, objptr
31f74     00 50 06 FF 
31f78     00 7A 46 F5 | 	or	result1, ##211812352
31f7c     04 92 06 F1 | 	add	arg01, #4
31f80     49 7B 62 FC | 	wrlong	result1, arg01
31f84     32 7B 02 F6 | 	mov	result1, objptr
31f88     00 58 06 FF 
31f8c     00 7A 46 F5 | 	or	result1, ##212860928
31f90     04 92 06 F1 | 	add	arg01, #4
31f94     49 7B 62 FC | 	wrlong	result1, arg01
31f98     32 7B 02 F6 | 	mov	result1, objptr
31f9c     00 60 06 FF 
31fa0     00 7A 46 F5 | 	or	result1, ##213909504
31fa4     04 92 06 F1 | 	add	arg01, #4
31fa8     49 7B 62 FC | 	wrlong	result1, arg01
31fac     04 92 06 F1 | 	add	arg01, #4
31fb0     49 01 68 FC | 	wrlong	#0, arg01
31fb4     04 92 06 F1 | 	add	arg01, #4
31fb8     49 01 68 FC | 	wrlong	#0, arg01
31fbc     54 92 86 F1 | 	sub	arg01, #84
31fc0                 | ' 
31fc0                 | '     v->close = &v_close;
31fc0                 | '     v->read = &v_read;
31fc0                 | '     v->write = &v_write;
31fc0                 | '     v->lseek = &v_lseek;
31fc0                 | '     v->ioctl = &v_ioctl;
31fc0                 | '     v->flush = &v_flush;
31fc0                 | '     v->vfs_data = ptr;
31fc0                 | '     v->reserved = 0;
31fc0                 | ' 
31fc0                 | '     v->open = &v_open;
31fc0                 | '     v->creat = &v_creat;
31fc0                 | '     v->opendir = &v_opendir;
31fc0                 | '     v->closedir = &v_closedir;
31fc0                 | '     v->readdir = &v_readdir;
31fc0                 | '     v->stat = &v_stat;
31fc0                 | ' 
31fc0                 | '     v->mkdir = &v_mkdir;
31fc0                 | '     v->rmdir = &v_rmdir;
31fc0                 | ' 
31fc0                 | '     v->remove = &v_remove;
31fc0                 | '     v->rename = &v_rename;
31fc0                 | ' 
31fc0                 | '     v->init = &v_init;
31fc0                 | '     v->deinit = &v_deinit;
31fc0                 | ' 
31fc0                 | ' 
31fc0                 | '     v->getcf = 0;
31fc0                 | '     v->putcf = 0;
31fc0                 | ' #line 532 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
31fc0                 | '     return v;
31fc0     49 7B 02 F6 | 	mov	result1, arg01
31fc4     E7 F0 03 F6 | 	mov	ptra, fp
31fc8     F2 00 A0 FD | 	call	#popregs_
31fcc                 | _fatfs_cc_get_vfs_ret
31fcc     2D 00 64 FD | 	ret
31fd0                 | 
31fd0                 | _fatfs_cc_gettimeofday
31fd0     04 CA 05 F6 | 	mov	COUNT_, #4
31fd4     E8 00 A0 FD | 	call	#pushregs_
31fd8     49 A7 02 F6 | 	mov	local01, arg01
31fdc     24 2A BF FD | 	call	#__system___getus
31fe0     3D 93 02 F6 | 	mov	arg01, result1
31fe4     02 00 00 FF 
31fe8     08 6D 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1288
31fec     36 A9 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
31ff0     49 7B 02 F6 | 	mov	result1, arg01
31ff4     54 7B 82 F1 | 	sub	result1, local02
31ff8     A1 07 00 FF 
31ffc     40 7A 16 FD | 	qdiv	result1, ##1000000
32000     02 00 00 FF 
32004     08 6D 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1288
32008     18 A8 62 FD | 	getqx	local02
3200c     A1 07 00 FF 
32010     40 7A 16 FD | 	qdiv	result1, ##1000000
32014     00 A8 0E F2 | 	cmp	local02, #0 wz
32018     19 AA 62 FD | 	getqy	local03
3201c     28 00 90 AD |  if_e	jmp	#LR__5370
32020     02 00 00 FF 
32024     04 6D 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1284
32028     36 AD 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
3202c     54 AD 02 F1 | 	add	local04, local02
32030     36 AD 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
32034     55 93 82 F1 | 	sub	arg01, local03
32038     04 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, #4
3203c     36 93 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
32040     02 00 00 FF 
32044     08 6D 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1288
32048                 | LR__5370
32048     02 00 00 FF 
3204c     04 6D 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1284
32050     36 AD 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
32054     02 00 00 FF 
32058     04 6D 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1284
3205c     53 AD 62 FC | 	wrlong	local04, local01
32060     04 A6 06 F1 | 	add	local01, #4
32064     53 AB 62 FC | 	wrlong	local03, local01
32068                 | '         lastsec += secs;
32068                 | '         lastus = now - leftover;
32068                 | '     }
32068                 | '     tv->tv_sec = lastsec;
32068                 | '     tv->tv_usec = leftover;
32068                 | '     return 0;
32068     00 7A 06 F6 | 	mov	result1, #0
3206c     E7 F0 03 F6 | 	mov	ptra, fp
32070     F2 00 A0 FD | 	call	#popregs_
32074                 | _fatfs_cc_gettimeofday_ret
32074     2D 00 64 FD | 	ret
32078                 | 
32078                 | _fatfs_cc__is_leap_year
32078     49 7B 52 F6 | 	abs	result1, arg01 wc
3207c     03 7A 06 F5 | 	and	result1, #3
32080     3D 7B 8A F6 | 	negc	result1, result1 wz
32084     38 00 90 5D |  if_ne	jmp	#LR__5381
32088     49 7B 52 F6 | 	abs	result1, arg01 wc
3208c     64 7A 16 FD | 	qdiv	result1, #100
32090     19 7A 62 FD | 	getqy	result1
32094     3D 7B 8A F6 | 	negc	result1, result1 wz
32098     1C 00 90 5D |  if_ne	jmp	#LR__5380
3209c     49 7B 52 F6 | 	abs	result1, arg01 wc
320a0     90 7B 16 FD | 	qdiv	result1, #400
320a4                 | '       return (0 == y % 400);
320a4     00 7A 06 F6 | 	mov	result1, #0
320a8     19 80 62 FD | 	getqy	_var01
320ac     40 81 8A F6 | 	negc	_var01, _var01 wz
320b0     01 7A 06 A6 |  if_e	mov	result1, #1
320b4     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
320b8                 | LR__5380
320b8                 | '     return 1;
320b8     01 7A 06 F6 | 	mov	result1, #1
320bc     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
320c0                 | LR__5381
320c0                 | '   }
320c0                 | '   return 0;
320c0     00 7A 06 F6 | 	mov	result1, #0
320c4                 | _fatfs_cc__is_leap_year_ret
320c4     2D 00 64 FD | 	ret
320c8                 | 
320c8                 | _fatfs_cc___tzoffset
320c8     49 81 0A F6 | 	mov	_var01, arg01 wz
320cc     FF FF FF FF 
320d0     4A FF 6B FC | 	wrlong	##-1, arg02
320d4     01 82 06 F6 | 	mov	_var02, #1
320d8     40 85 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
320dc                 | '                 return 0;
320dc     00 7A 06 A6 |  if_e	mov	result1, #0
320e0     7C 02 90 AD |  if_e	jmp	#LR__5407
320e4     4A 01 68 FC | 	wrlong	#0, arg02
320e8     36 87 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
320ec     02 00 00 FF 
320f0     DC 86 06 F1 | 	add	_var04, ##1244
320f4     D7 26 48 FB | 	callpa	#(@LR__5391-@LR__5390)>>2,fcache_load_ptr_
320f8                 | ' 
320f8                 | '        *hasdst = 0;
320f8                 | ' 
320f8                 | ' 	n = stdname;
320f8                 | '         while (*s && isalpha(*s)) {
320f8                 | LR__5390
320f8     40 85 CA FA | 	rdbyte	_var03, _var01 wz
320fc     44 00 90 AD |  if_e	jmp	#LR__5392
32100     40 93 C2 FA | 	rdbyte	arg01, _var01
32104                 | ' {
32104                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
32104     80 92 36 F3 | 	fle	arg01, #128 wc
32108                 | '     return __ctype[c];
32108     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
3210c     02 00 00 FF 
32110     0C 7B 06 F1 | 	add	result1, ##1292
32114     3D 93 02 F1 | 	add	arg01, result1
32118     49 7B C2 FA | 	rdbyte	result1, arg01
3211c     0C 7A CE F7 | 	test	result1, #12 wz
32120     20 00 90 AD |  if_e	jmp	#LR__5392
32124     40 89 02 F6 | 	mov	_var05, _var01
32128     40 8B 02 F6 | 	mov	_var06, _var01
3212c     01 8A 06 F1 | 	add	_var06, #1
32130     44 8D C2 FA | 	rdbyte	_var07, _var05
32134     45 81 02 F6 | 	mov	_var01, _var06
32138     43 8D 42 FC | 	wrbyte	_var07, _var04
3213c     01 86 06 F1 | 	add	_var04, #1
32140     B4 FF 9F FD | 	jmp	#LR__5390
32144                 | LR__5391
32144                 | LR__5392
32144     43 01 48 FC | 	wrbyte	#0, _var04
32148     00 8E 06 F6 | 	mov	_var08, #0
3214c     40 85 C2 FA | 	rdbyte	_var03, _var01
32150     2D 84 0E F2 | 	cmp	_var03, #45 wz
32154     01 82 66 A6 |  if_e	neg	_var02, #1
32158     01 80 06 A1 |  if_e	add	_var01, #1
3215c     D7 26 48 FB | 	callpa	#(@LR__5394-@LR__5393)>>2,fcache_load_ptr_
32160                 | '                 sgn = -1;
32160                 | '                 s++;
32160                 | '         }
32160                 | '         while (isdigit(*s)) {
32160                 | LR__5393
32160     40 93 C2 FA | 	rdbyte	arg01, _var01
32164                 | ' {
32164                 | '   return  (__ctype_get(c) & 0x02 ) ;
32164     80 92 36 F3 | 	fle	arg01, #128 wc
32168                 | '     return __ctype[c];
32168     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
3216c     02 00 00 FF 
32170     0C 7B 06 F1 | 	add	result1, ##1292
32174     3D 93 02 F1 | 	add	arg01, result1
32178     49 7B C2 FA | 	rdbyte	result1, arg01
3217c     02 7A CE F7 | 	test	result1, #2 wz
32180     28 00 90 AD |  if_e	jmp	#LR__5395
32184     47 85 02 F6 | 	mov	_var03, _var08
32188     02 84 66 F0 | 	shl	_var03, #2
3218c     47 85 02 F1 | 	add	_var03, _var08
32190     01 84 66 F0 | 	shl	_var03, #1
32194     40 89 C2 FA | 	rdbyte	_var05, _var01
32198     30 88 86 F1 | 	sub	_var05, #48
3219c     44 85 02 F1 | 	add	_var03, _var05
321a0     42 8F 02 F6 | 	mov	_var08, _var03
321a4     01 80 06 F1 | 	add	_var01, #1
321a8     B4 FF 9F FD | 	jmp	#LR__5393
321ac                 | LR__5394
321ac                 | LR__5395
321ac     07 00 00 FF 
321b0     10 8E 06 FD | 	qmul	_var08, ##3600
321b4     40 85 C2 FA | 	rdbyte	_var03, _var01
321b8     3A 84 0E F2 | 	cmp	_var03, #58 wz
321bc     18 90 62 FD | 	getqx	_var09
321c0     6C 00 90 5D |  if_ne	jmp	#LR__5399
321c4     00 8E 06 F6 | 	mov	_var08, #0
321c8     01 80 06 F1 | 	add	_var01, #1
321cc     D7 26 48 FB | 	callpa	#(@LR__5397-@LR__5396)>>2,fcache_load_ptr_
321d0                 | '                 x = 0;
321d0                 | '                 s++;
321d0                 | '                 while (isdigit(*s)) {
321d0                 | LR__5396
321d0     40 93 C2 FA | 	rdbyte	arg01, _var01
321d4                 | ' {
321d4                 | '   return  (__ctype_get(c) & 0x02 ) ;
321d4     80 92 36 F3 | 	fle	arg01, #128 wc
321d8                 | '     return __ctype[c];
321d8     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
321dc     02 00 00 FF 
321e0     0C 7B 06 F1 | 	add	result1, ##1292
321e4     3D 93 02 F1 | 	add	arg01, result1
321e8     49 7B C2 FA | 	rdbyte	result1, arg01
321ec     02 7A CE F7 | 	test	result1, #2 wz
321f0     28 00 90 AD |  if_e	jmp	#LR__5398
321f4     47 85 02 F6 | 	mov	_var03, _var08
321f8     02 84 66 F0 | 	shl	_var03, #2
321fc     47 85 02 F1 | 	add	_var03, _var08
32200     01 84 66 F0 | 	shl	_var03, #1
32204     40 89 C2 FA | 	rdbyte	_var05, _var01
32208     30 88 86 F1 | 	sub	_var05, #48
3220c     44 85 02 F1 | 	add	_var03, _var05
32210     42 8F 02 F6 | 	mov	_var08, _var03
32214     01 80 06 F1 | 	add	_var01, #1
32218     B4 FF 9F FD | 	jmp	#LR__5396
3221c                 | LR__5397
3221c                 | LR__5398
3221c     47 8D 02 F6 | 	mov	_var07, _var08
32220     04 8C 66 F0 | 	shl	_var07, #4
32224     47 8D 82 F1 | 	sub	_var07, _var08
32228     02 8C 66 F0 | 	shl	_var07, #2
3222c     46 91 02 F1 | 	add	_var09, _var07
32230                 | LR__5399
32230     36 87 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
32234     02 00 00 FF 
32238     E5 86 06 F1 | 	add	_var04, ##1253
3223c     40 93 C2 FA | 	rdbyte	arg01, _var01
32240                 | ' {
32240                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
32240     80 92 36 F3 | 	fle	arg01, #128 wc
32244                 | '     return __ctype[c];
32244     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
32248     02 00 00 FF 
3224c     0C 7B 06 F1 | 	add	result1, ##1292
32250     3D 93 02 F1 | 	add	arg01, result1
32254     49 7B C2 FA | 	rdbyte	result1, arg01
32258     0C 7A CE F7 | 	test	result1, #12 wz
3225c     4C 00 90 AD |  if_e	jmp	#LR__5402
32260     4A 03 68 FC | 	wrlong	#1, arg02
32264                 | '                 *hasdst = 1;
32264                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
32264                 | LR__5400
32264     40 85 CA FA | 	rdbyte	_var03, _var01 wz
32268     40 00 90 AD |  if_e	jmp	#LR__5401
3226c     40 93 C2 FA | 	rdbyte	arg01, _var01
32270                 | ' {
32270                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
32270     80 92 36 F3 | 	fle	arg01, #128 wc
32274                 | '     return __ctype[c];
32274     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
32278     02 00 00 FF 
3227c     0C 7B 06 F1 | 	add	result1, ##1292
32280     3D 93 02 F1 | 	add	arg01, result1
32284     49 7B C2 FA | 	rdbyte	result1, arg01
32288     0C 7A CE F7 | 	test	result1, #12 wz
3228c     1C 00 90 AD |  if_e	jmp	#LR__5401
32290     40 8B 02 F6 | 	mov	_var06, _var01
32294     01 8A 06 F1 | 	add	_var06, #1
32298     40 8D C2 FA | 	rdbyte	_var07, _var01
3229c     45 81 02 F6 | 	mov	_var01, _var06
322a0     43 8D 42 FC | 	wrbyte	_var07, _var04
322a4     01 86 06 F1 | 	add	_var04, #1
322a8     B8 FF 9F FD | 	jmp	#LR__5400
322ac                 | LR__5401
322ac                 | LR__5402
322ac     43 01 48 FC | 	wrbyte	#0, _var04
322b0     02 00 00 FF 
322b4     DC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
322b8     36 85 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
322bc     02 00 00 FF 
322c0     DC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1244
322c4     20 00 90 AD |  if_e	jmp	#LR__5403
322c8     02 00 00 FF 
322cc     DC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
322d0     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
322d4     08 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #8
322d8     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
322dc     02 00 00 FF 
322e0     D4 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1236
322e4     1C 00 90 FD | 	jmp	#LR__5404
322e8                 | LR__5403
322e8     02 00 00 FF 
322ec     EE 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1262
322f0     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
322f4     1A 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #26
322f8     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
322fc     02 00 00 FF 
32300     D4 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1236
32304                 | LR__5404
32304     02 00 00 FF 
32308     E5 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1253
3230c     36 85 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
32310     02 00 00 FF 
32314     E5 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1253
32318     20 00 90 AD |  if_e	jmp	#LR__5405
3231c     02 00 00 FF 
32320     E5 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1253
32324     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
32328     0D 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #13
3232c     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
32330     02 00 00 FF 
32334     D8 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1240
32338     1C 00 90 FD | 	jmp	#LR__5406
3233c                 | LR__5405
3233c     02 00 00 FF 
32340     DC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
32344     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
32348     04 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #4
3234c     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
32350     02 00 00 FF 
32354     D8 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1240
32358                 | LR__5406
32358     48 83 02 FD | 	qmul	_var02, _var09
3235c                 | ' 		_tzname[1] = stdname;
3235c                 | ' 
3235c                 | '         return sgn * off;
3235c     18 7A 62 FD | 	getqx	result1
32360                 | LR__5407
32360                 | _fatfs_cc___tzoffset_ret
32360     2D 00 64 FD | 	ret
32364                 | 
32364                 | _fatfs_cc___indst
32364     10 92 06 F1 | 	add	arg01, #16
32368     49 81 02 FB | 	rdlong	_var01, arg01
3236c     10 92 86 F1 | 	sub	arg01, #16
32370     02 80 0E F2 | 	cmp	_var01, #2 wz
32374     30 00 90 5D |  if_ne	jmp	#LR__5410
32378     07 80 06 F6 | 	mov	_var01, #7
3237c     18 92 06 F1 | 	add	arg01, #24
32380     49 83 02 FB | 	rdlong	_var02, arg01
32384     41 81 02 F1 | 	add	_var01, _var02
32388     0C 92 86 F1 | 	sub	arg01, #12
3238c     49 85 02 FB | 	rdlong	_var03, arg01
32390     42 81 82 F1 | 	sub	_var01, _var03
32394     00 80 56 F2 | 	cmps	_var01, #0 wc
32398                 | '                         return 1;
32398     01 7A 06 C6 |  if_b	mov	result1, #1
3239c     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
323a0                 | '                 return 0;
323a0     00 7A 06 F6 | 	mov	result1, #0
323a4     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
323a8                 | LR__5410
323a8     10 92 06 F1 | 	add	arg01, #16
323ac     49 81 02 FB | 	rdlong	_var01, arg01
323b0     10 92 86 F1 | 	sub	arg01, #16
323b4     0A 80 0E F2 | 	cmp	_var01, #10 wz
323b8     28 00 90 5D |  if_ne	jmp	#LR__5411
323bc     18 92 06 F1 | 	add	arg01, #24
323c0     49 81 02 FB | 	rdlong	_var01, arg01
323c4     0C 92 86 F1 | 	sub	arg01, #12
323c8     49 87 02 FB | 	rdlong	_var04, arg01
323cc     43 81 82 F1 | 	sub	_var01, _var04
323d0     00 80 56 F2 | 	cmps	_var01, #0 wc
323d4                 | '                         return 0;
323d4     00 7A 06 C6 |  if_b	mov	result1, #0
323d8     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
323dc                 | '                 return 1;
323dc     01 7A 06 F6 | 	mov	result1, #1
323e0     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
323e4                 | LR__5411
323e4                 | '         }
323e4                 | ' 
323e4                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
323e4     00 80 06 F6 | 	mov	_var01, #0
323e8     10 92 06 F1 | 	add	arg01, #16
323ec     49 83 02 FB | 	rdlong	_var02, arg01
323f0     10 92 86 F1 | 	sub	arg01, #16
323f4     03 82 56 F2 | 	cmps	_var02, #3 wc
323f8     10 00 90 CD |  if_b	jmp	#LR__5412
323fc     10 92 06 F1 | 	add	arg01, #16
32400     49 85 02 FB | 	rdlong	_var03, arg01
32404     0A 84 56 F2 | 	cmps	_var03, #10 wc
32408     01 80 06 C6 |  if_b	mov	_var01, #1
3240c                 | LR__5412
3240c     40 7B 02 F6 | 	mov	result1, _var01
32410                 | _fatfs_cc___indst_ret
32410     2D 00 64 FD | 	ret
32414                 | 
32414                 | _fatfs_cc_disk_deinitialize
32414     03 CA 05 F6 | 	mov	COUNT_, #3
32418     E8 00 A0 FD | 	call	#pushregs_
3241c     01 00 00 FF 
32420     10 64 06 F1 | 	add	objptr, ##528
32424     32 93 0A FB | 	rdlong	arg01, objptr wz
32428     01 00 00 FF 
3242c     10 64 86 F1 | 	sub	objptr, ##528
32430                 | ' 
32430                 | '         return RES_NOTRDY;
32430     03 7A 06 A6 |  if_e	mov	result1, #3
32434     4C 00 90 AD |  if_e	jmp	#LR__5420
32438     01 00 00 FF 
3243c     10 64 06 F1 | 	add	objptr, ##528
32440     32 93 02 FB | 	rdlong	arg01, objptr
32444     49 A7 02 F6 | 	mov	local01, arg01
32448     24 A6 06 F1 | 	add	local01, #36
3244c     53 A7 02 FB | 	rdlong	local01, local01
32450     53 A9 02 F6 | 	mov	local02, local01
32454     13 A6 46 F7 | 	zerox	local01, #19
32458     14 A8 46 F0 | 	shr	local02, #20
3245c     02 A8 66 F0 | 	shl	local02, #2
32460     2D A9 02 F1 | 	add	local02, __methods__
32464     54 A9 02 FB | 	rdlong	local02, local02
32468     01 00 00 FF 
3246c     10 64 86 F1 | 	sub	objptr, ##528
32470     32 AB 02 F6 | 	mov	local03, objptr
32474     53 65 02 F6 | 	mov	objptr, local01
32478     2D A8 62 FD | 	call	local02
3247c     55 65 02 F6 | 	mov	objptr, local03
32480                 | '     }
32480                 | '     fh->close(fh);
32480                 | '     return RES_OK;
32480     00 7A 06 F6 | 	mov	result1, #0
32484                 | LR__5420
32484     E7 F0 03 F6 | 	mov	ptra, fp
32488     F2 00 A0 FD | 	call	#popregs_
3248c                 | _fatfs_cc_disk_deinitialize_ret
3248c     2D 00 64 FD | 	ret
32490                 | 
32490                 | ' 	
32490                 | ' 	FUNCTION pfunc(c as integer) as integer
32490                 | __system____strs_cl_pfunc_
32490                 | ' 		if (i < 16) then
32490     04 64 06 F1 | 	add	objptr, #4
32494     32 7B 02 FB | 	rdlong	result1, objptr
32498     04 64 86 F1 | 	sub	objptr, #4
3249c     10 7A 56 F2 | 	cmps	result1, #16 wc
324a0     2C 00 90 3D |  if_ae	jmp	#LR__5430
324a4     32 7B 02 FB | 	rdlong	result1, objptr
324a8     04 64 06 F1 | 	add	objptr, #4
324ac     32 81 02 FB | 	rdlong	_var01, objptr
324b0     3D 81 02 F1 | 	add	_var01, result1
324b4     40 93 42 FC | 	wrbyte	arg01, _var01
324b8     32 7B 02 FB | 	rdlong	result1, objptr
324bc     01 7A 06 F1 | 	add	result1, #1
324c0     32 7B 62 FC | 	wrlong	result1, objptr
324c4     04 64 86 F1 | 	sub	objptr, #4
324c8                 | ' 			p(i) = c
324c8                 | ' 			i = i+1
324c8                 | ' 			return 1
324c8     01 7A 06 F6 | 	mov	result1, #1
324cc     04 00 90 FD | 	jmp	#__system____strs_cl_pfunc__ret
324d0                 | LR__5430
324d0                 | ' 			return -1
324d0     01 7A 66 F6 | 	neg	result1, #1
324d4                 | __system____strs_cl_pfunc__ret
324d4     2D 00 64 FD | 	ret
324d8                 | 
324d8                 | __system___struct__s_vfs_file_t_putchar_
324d8     04 CA 05 F6 | 	mov	COUNT_, #4
324dc     E8 00 A0 FD | 	call	#pushregs_
324e0     1C 64 06 F1 | 	add	objptr, #28
324e4     32 A7 0A FB | 	rdlong	local01, objptr wz
324e8     1C 64 86 F1 | 	sub	objptr, #28
324ec     00 7A 06 A6 |  if_e	mov	result1, #0
324f0     48 00 90 AD |  if_e	jmp	#LR__5440
324f4     1C 64 06 F1 | 	add	objptr, #28
324f8     32 A9 02 FB | 	rdlong	local02, objptr
324fc     54 AB 02 F6 | 	mov	local03, local02
32500     1C 64 86 F1 | 	sub	objptr, #28
32504     13 AA 46 F7 | 	zerox	local03, #19
32508     14 A8 46 F0 | 	shr	local02, #20
3250c     02 A8 66 F0 | 	shl	local02, #2
32510     2D A9 02 F1 | 	add	local02, __methods__
32514     54 A9 02 FB | 	rdlong	local02, local02
32518     32 95 02 F6 | 	mov	arg02, objptr
3251c     32 AD 02 F6 | 	mov	local04, objptr
32520     55 65 02 F6 | 	mov	objptr, local03
32524     2D A8 62 FD | 	call	local02
32528     56 65 02 F6 | 	mov	objptr, local04
3252c                 | '     return (i < 0) ? 0 : 1;
3252c     00 7A 56 F2 | 	cmps	result1, #0 wc
32530     00 A6 06 C6 |  if_b	mov	local01, #0
32534     01 A6 06 36 |  if_ae	mov	local01, #1
32538     53 7B 02 F6 | 	mov	result1, local01
3253c                 | LR__5440
3253c     E7 F0 03 F6 | 	mov	ptra, fp
32540     F2 00 A0 FD | 	call	#popregs_
32544                 | __system___struct__s_vfs_file_t_putchar__ret
32544     2D 00 64 FD | 	ret
32548                 | 
32548                 | __system___struct__s_vfs_file_t_getchar_
32548     03 CA 05 F6 | 	mov	COUNT_, #3
3254c     E8 00 A0 FD | 	call	#pushregs_
32550     20 64 06 F1 | 	add	objptr, #32
32554     32 93 0A FB | 	rdlong	arg01, objptr wz
32558     20 64 86 F1 | 	sub	objptr, #32
3255c     01 7A 66 A6 |  if_e	neg	result1, #1
32560     38 00 90 AD |  if_e	jmp	#LR__5450
32564                 | '     return getcf(__this);
32564     20 64 06 F1 | 	add	objptr, #32
32568     32 A7 02 FB | 	rdlong	local01, objptr
3256c     53 A9 02 F6 | 	mov	local02, local01
32570     20 64 86 F1 | 	sub	objptr, #32
32574     13 A8 46 F7 | 	zerox	local02, #19
32578     14 A6 46 F0 | 	shr	local01, #20
3257c     02 A6 66 F0 | 	shl	local01, #2
32580     2D A7 02 F1 | 	add	local01, __methods__
32584     53 A7 02 FB | 	rdlong	local01, local01
32588     32 93 02 F6 | 	mov	arg01, objptr
3258c     32 AB 02 F6 | 	mov	local03, objptr
32590     54 65 02 F6 | 	mov	objptr, local02
32594     2D A6 62 FD | 	call	local01
32598     55 65 02 F6 | 	mov	objptr, local03
3259c                 | LR__5450
3259c     E7 F0 03 F6 | 	mov	ptra, fp
325a0     F2 00 A0 FD | 	call	#popregs_
325a4                 | __system___struct__s_vfs_file_t_getchar__ret
325a4     2D 00 64 FD | 	ret
325a8                 | 
325a8                 | __system___struct___bas_wrap_sender_tx_
325a8     03 CA 05 F6 | 	mov	COUNT_, #3
325ac     E8 00 A0 FD | 	call	#pushregs_
325b0     32 A7 02 FB | 	rdlong	local01, objptr
325b4     53 A9 02 F6 | 	mov	local02, local01
325b8     13 A6 46 F7 | 	zerox	local01, #19
325bc     14 A8 46 F0 | 	shr	local02, #20
325c0     02 A8 66 F0 | 	shl	local02, #2
325c4     2D A9 02 F1 | 	add	local02, __methods__
325c8     54 A9 02 FB | 	rdlong	local02, local02
325cc     32 AB 02 F6 | 	mov	local03, objptr
325d0     53 65 02 F6 | 	mov	objptr, local01
325d4     2D A8 62 FD | 	call	local02
325d8     55 65 02 F6 | 	mov	objptr, local03
325dc     01 7A 06 F6 | 	mov	result1, #1
325e0     E7 F0 03 F6 | 	mov	ptra, fp
325e4     F2 00 A0 FD | 	call	#popregs_
325e8                 | __system___struct___bas_wrap_sender_tx__ret
325e8     2D 00 64 FD | 	ret
325ec                 | 
325ec                 | __system___struct___bas_wrap_sender_rx_
325ec     03 CA 05 F6 | 	mov	COUNT_, #3
325f0     E8 00 A0 FD | 	call	#pushregs_
325f4     04 64 06 F1 | 	add	objptr, #4
325f8     32 A7 02 FB | 	rdlong	local01, objptr
325fc     53 A9 02 F6 | 	mov	local02, local01
32600     04 64 86 F1 | 	sub	objptr, #4
32604     13 A8 46 F7 | 	zerox	local02, #19
32608     14 A6 46 F0 | 	shr	local01, #20
3260c     02 A6 66 F0 | 	shl	local01, #2
32610     2D A7 02 F1 | 	add	local01, __methods__
32614     53 A7 02 FB | 	rdlong	local01, local01
32618     32 AB 02 F6 | 	mov	local03, objptr
3261c     54 65 02 F6 | 	mov	objptr, local02
32620     2D A6 62 FD | 	call	local01
32624     55 65 02 F6 | 	mov	objptr, local03
32628     E7 F0 03 F6 | 	mov	ptra, fp
3262c     F2 00 A0 FD | 	call	#popregs_
32630                 | __system___struct___bas_wrap_sender_rx__ret
32630     2D 00 64 FD | 	ret
32634                 | 
32634                 | __system___struct___bas_wrap_sender_close_
32634     03 CA 05 F6 | 	mov	COUNT_, #3
32638     E8 00 A0 FD | 	call	#pushregs_
3263c     08 64 06 F1 | 	add	objptr, #8
32640     32 A7 02 FB | 	rdlong	local01, objptr
32644     53 A9 02 F6 | 	mov	local02, local01
32648     08 64 86 F1 | 	sub	objptr, #8
3264c     13 A8 46 F7 | 	zerox	local02, #19
32650     14 A6 46 F0 | 	shr	local01, #20
32654     02 A6 66 F0 | 	shl	local01, #2
32658     2D A7 02 F1 | 	add	local01, __methods__
3265c     53 A7 02 FB | 	rdlong	local01, local01
32660     32 AB 02 F6 | 	mov	local03, objptr
32664     54 65 02 F6 | 	mov	objptr, local02
32668     2D A6 62 FD | 	call	local01
3266c     55 65 02 F6 | 	mov	objptr, local03
32670     E7 F0 03 F6 | 	mov	ptra, fp
32674     F2 00 A0 FD | 	call	#popregs_
32678                 | __system___struct___bas_wrap_sender_close__ret
32678     2D 00 64 FD | 	ret
3267c                 | 
3267c                 | LR__5460
3267c     2F          | 	byte	"/"
3267d     00          | 	byte	0
3267e                 | LR__5461
3267e     69 6E 66    | 	byte	"inf"
32681     00          | 	byte	0
32682                 | LR__5462
32682     6E 61 6E    | 	byte	"nan"
32685     00          | 	byte	0
32686                 | LR__5463
32686                 | 	byte	
32686     00          | 	byte	0
32687                 | LR__5464
32687                 | 	byte	
32687     00          | 	byte	0
32688                 | LR__5465
32688                 | 	byte	
32688     00          | 	byte	0
32689                 | LR__5466
32689                 | 	byte	
32689     00          | 	byte	0
3268a                 | LR__5467
3268a                 | 	byte	
3268a     00          | 	byte	0
3268b                 | LR__5468
3268b                 | 	byte	
3268b     00          | 	byte	0
3268c                 | LR__5469
3268c                 | 	byte	
3268c     00          | 	byte	0
3268d                 | LR__5470
3268d                 | 	byte	
3268d     00          | 	byte	0
3268e                 | LR__5471
3268e     00          | 	byte	0
3268f     00          | 	byte	0
32690                 | LR__5472
32690     00          | 	byte	0
32691     00          | 	byte	0
32692                 | LR__5473
32692     00          | 	byte	0
32693     00          | 	byte	0
32694                 | LR__5474
32694     20 21 21 21 
32698     20 63 6F 72 
3269c     72 75 70 74 
326a0     65 64 20 68 
326a4     65 61 70 3F 
326a8     3F 3F 20 21 
326ac     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
326af     00          | 	byte	0
326b0                 | LR__5475
326b0     20 21 21 21 
326b4     20 6F 75 74 
326b8     20 6F 66 20 
326bc     68 65 61 70 
326c0     20 6D 65 6D 
326c4     6F 72 79 20 
326c8     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
326cc     00          | 	byte	0
326cd                 | LR__5476
326cd     20 21 21 21 
326d1     20 63 6F 72 
326d5     72 75 70 74 
326d9     65 64 20 68 
326dd     65 61 70 20 
326e1     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
326e5     00          | 	byte	0
326e6                 | LR__5477
326e6     00          | 	byte	0
326e7     00          | 	byte	0
326e8                 | LR__5478
326e8     2E          | 	byte	"."
326e9     00          | 	byte	0
326ea                 | LR__5479
326ea     00          | 	byte	0
326eb     00          | 	byte	0
326ec                 | LR__5480
326ec     00          | 	byte	0
326ed     00          | 	byte	0
326ee                 | LR__5481
326ee     00          | 	byte	0
326ef     00          | 	byte	0
326f0                 | LR__5482
326f0     54 5A       | 	byte	"TZ"
326f2     00          | 	byte	0
326f3                 | LR__5483
326f3     2A 3A 3C 3E 
326f7     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
326fb     00          | 	byte	0
326fc                 | LR__5484
326fc     2B 2C 3B 3D 
32700     5B 5D       | 	byte	"+,;=[]"
32702     00          | 	byte	0
32703                 | LR__5485
32703     46 41 54 33 
32707     32 20 20 20 | 	byte	"FAT32   "
3270b     00          | 	byte	0
3270c                 | LR__5486
3270c     00          | 	byte	0
3270d     00          | 	byte	0
3270e                 | LR__5487
3270e                 | 	byte	
3270e     00          | 	byte	0
3270f                 | LR__5488
3270f                 | 	byte	
3270f     00          | 	byte	0
32710                 | LR__5489
32710                 | 	byte	
32710     00          | 	byte	0
32711                 | LR__5490
32711                 | 	byte	
32711     00          | 	byte	0
32712                 | LR__5491
32712     22          | 	byte	34
32713     00          | 	byte	0
32714                 | LR__5492
32714     22          | 	byte	34
32715     00          | 	byte	0
32716                 | LR__5493
32716     3A          | 	byte	":"
32717     00          | 	byte	0
32718                 | LR__5494
32718                 | 	byte	
32718     00          | 	byte	0
32719                 | LR__5495
32719                 | 	byte	
32719     00          | 	byte	0
3271a                 | LR__5496
3271a                 | 	byte	
3271a     00          | 	byte	0
3271b                 | LR__5497
3271b                 | 	byte	
3271b     00          | 	byte	0
3271c                 | LR__5498
3271c                 | 	byte	
3271c     00          | 	byte	0
3271d                 | LR__5499
3271d                 | 	byte	
3271d     00          | 	byte	0
3271e                 | LR__5500
3271e                 | 	byte	
3271e     00          | 	byte	0
3271f                 | LR__5501
3271f     30          | 	byte	"0"
32720     00          | 	byte	0
32721                 | LR__5502
32721     22          | 	byte	34
32722     00          | 	byte	0
32723                 | LR__5503
32723     22          | 	byte	34
32724     00          | 	byte	0
32725                 | LR__5504
32725     22          | 	byte	34
32726     00          | 	byte	0
32727                 | LR__5505
32727     22          | 	byte	34
32728     00          | 	byte	0
32729                 | LR__5506
32729     22          | 	byte	34
3272a     00          | 	byte	0
3272b                 | LR__5507
3272b     3E          | 	byte	">"
3272c     00          | 	byte	0
3272d                 | LR__5508
3272d     3C          | 	byte	"<"
3272e     00          | 	byte	0
3272f                 | LR__5509
3272f     2B          | 	byte	"+"
32730     00          | 	byte	0
32731                 | LR__5510
32731     2D          | 	byte	"-"
32732     00          | 	byte	0
32733                 | LR__5511
32733     2A          | 	byte	"*"
32734     00          | 	byte	0
32735                 | LR__5512
32735     2F          | 	byte	"/"
32736     00          | 	byte	0
32737                 | LR__5513
32737     5E          | 	byte	"^"
32738     00          | 	byte	0
32739                 | LR__5514
32739     3D          | 	byte	"="
3273a     00          | 	byte	0
3273b                 | LR__5515
3273b     2B          | 	byte	"+"
3273c     00          | 	byte	0
3273d                 | LR__5516
3273d     2B          | 	byte	"+"
3273e     00          | 	byte	0
3273f                 | LR__5517
3273f     2D          | 	byte	"-"
32740     00          | 	byte	0
32741                 | LR__5518
32741     2D          | 	byte	"-"
32742     00          | 	byte	0
32743                 | LR__5519
32743     3C          | 	byte	"<"
32744     00          | 	byte	0
32745                 | LR__5520
32745     3E          | 	byte	">"
32746     00          | 	byte	0
32747                 | LR__5521
32747     22          | 	byte	34
32748     00          | 	byte	0
32749                 | LR__5522
32749     22          | 	byte	34
3274a     00          | 	byte	0
3274b                 | LR__5523
3274b     65 6C 73 65 | 	byte	"else"
3274f     00          | 	byte	0
32750                 | LR__5524
32750     74 68 65 6E | 	byte	"then"
32754     00          | 	byte	0
32755                 | LR__5525
32755     3F          | 	byte	"?"
32756     00          | 	byte	0
32757                 | LR__5526
32757     3F          | 	byte	"?"
32758     00          | 	byte	0
32759                 | LR__5527
32759     2E          | 	byte	"."
3275a     00          | 	byte	0
3275b                 | LR__5528
3275b     6D 6F 75 73 
3275f     65          | 	byte	"mouse"
32760     00          | 	byte	0
32761                 | LR__5529
32761     63 75 72 73 
32765     6F 72       | 	byte	"cursor"
32767     00          | 	byte	0
32768                 | LR__5530
32768     63 6C 69 63 
3276c     6B          | 	byte	"click"
3276d     00          | 	byte	0
3276e                 | LR__5531
3276e     6F 6E       | 	byte	"on"
32770     00          | 	byte	0
32771                 | LR__5532
32771     31          | 	byte	"1"
32772     00          | 	byte	0
32773                 | LR__5533
32773     6F 66 66    | 	byte	"off"
32776     00          | 	byte	0
32777                 | LR__5534
32777     30          | 	byte	"0"
32778     00          | 	byte	0
32779                 | LR__5535
32779     6D 6F 64 65 | 	byte	"mode"
3277d     00          | 	byte	0
3277e                 | LR__5536
3277e     6D 2E       | 	byte	"m."
32780     00          | 	byte	0
32781                 | LR__5537
32781     61 74 61 72 
32785     69          | 	byte	"atari"
32786     00          | 	byte	0
32787                 | LR__5538
32787     30          | 	byte	"0"
32788     00          | 	byte	0
32789                 | LR__5539
32789     70 63 5F 61 
3278d     6D 62 65 72 | 	byte	"pc_amber"
32791     00          | 	byte	0
32792                 | LR__5540
32792     31          | 	byte	"1"
32793     00          | 	byte	0
32794                 | LR__5541
32794     70 63 5F 67 
32798     72 65 65 6E | 	byte	"pc_green"
3279c     00          | 	byte	0
3279d                 | LR__5542
3279d     32          | 	byte	"2"
3279e     00          | 	byte	0
3279f                 | LR__5543
3279f     70 63 5F 77 
327a3     68 69 74 65 | 	byte	"pc_white"
327a7     00          | 	byte	0
327a8                 | LR__5544
327a8     33          | 	byte	"3"
327a9     00          | 	byte	0
327aa                 | LR__5545
327aa     73 74       | 	byte	"st"
327ac     00          | 	byte	0
327ad                 | LR__5546
327ad     34          | 	byte	"4"
327ae     00          | 	byte	0
327af                 | LR__5547
327af     61 6D 69 67 
327b3     61          | 	byte	"amiga"
327b4     00          | 	byte	0
327b5                 | LR__5548
327b5     35          | 	byte	"5"
327b6     00          | 	byte	0
327b7                 | LR__5549
327b7                 | 	byte	
327b7     00          | 	byte	0
327b8                 | LR__5550
327b8     6C 6F 61 64 | 	byte	"load"
327bc     00          | 	byte	0
327bd                 | LR__5551
327bd     73 61 76 65 | 	byte	"save"
327c1     00          | 	byte	0
327c2                 | LR__5552
327c2     62 72 75 6E | 	byte	"brun"
327c6     00          | 	byte	0
327c7                 | LR__5553
327c7     72 75 6E    | 	byte	"run"
327ca     00          | 	byte	0
327cb                 | LR__5554
327cb     6C 6F 2E    | 	byte	"lo."
327ce     00          | 	byte	0
327cf                 | LR__5555
327cf     73 2E       | 	byte	"s."
327d1     00          | 	byte	0
327d2                 | LR__5556
327d2     62 72 2E    | 	byte	"br."
327d5     00          | 	byte	0
327d6                 | LR__5557
327d6     65 6E 74 65 
327da     72          | 	byte	"enter"
327db     00          | 	byte	0
327dc                 | LR__5558
327dc     65 2E       | 	byte	"e."
327de     00          | 	byte	0
327df                 | LR__5559
327df     24          | 	byte	"$"
327e0     00          | 	byte	0
327e1                 | LR__5560
327e1     64 65 6C 65 
327e5     74 65       | 	byte	"delete"
327e7     00          | 	byte	0
327e8                 | LR__5561
327e8     6D 6B 64 69 
327ec     72          | 	byte	"mkdir"
327ed     00          | 	byte	0
327ee                 | LR__5562
327ee     24          | 	byte	"$"
327ef     00          | 	byte	0
327f0                 | LR__5563
327f0     63 6F 70 79 | 	byte	"copy"
327f4     00          | 	byte	0
327f5                 | LR__5564
327f5     24          | 	byte	"$"
327f6     00          | 	byte	0
327f7                 | LR__5565
327f7     63 6F 70 79 | 	byte	"copy"
327fb     00          | 	byte	0
327fc                 | LR__5566
327fc     24          | 	byte	"$"
327fd     00          | 	byte	0
327fe                 | LR__5567
327fe     63 64       | 	byte	"cd"
32800     00          | 	byte	0
32801                 | LR__5568
32801     63 64 2E    | 	byte	"cd."
32804     00          | 	byte	0
32805                 | LR__5569
32805     2E          | 	byte	"."
32806     00          | 	byte	0
32807                 | LR__5570
32807     2E 2E       | 	byte	".."
32809     00          | 	byte	0
3280a                 | LR__5571
3280a     63 64       | 	byte	"cd"
3280c     00          | 	byte	0
3280d                 | LR__5572
3280d     2F          | 	byte	"/"
3280e     00          | 	byte	0
3280f                 | LR__5573
3280f                 | 	byte	
3280f     00          | 	byte	0
32810                 | LR__5574
32810                 | 	byte	
32810     00          | 	byte	0
32811                 | LR__5575
32811                 | 	byte	
32811     00          | 	byte	0
32812                 | LR__5576
32812                 | 	byte	
32812     00          | 	byte	0
32813                 | LR__5577
32813                 | 	byte	
32813     00          | 	byte	0
32814                 | LR__5578
32814     52 65 61 64 
32818     79          | 	byte	"Ready"
32819     00          | 	byte	0
3281a                 | LR__5579
3281a     2B          | 	byte	"+"
3281b     00          | 	byte	0
3281c                 | LR__5580
3281c     2D          | 	byte	"-"
3281d     00          | 	byte	0
3281e                 | LR__5581
3281e     6F 72       | 	byte	"or"
32820     00          | 	byte	0
32821                 | LR__5582
32821     78 6F 72    | 	byte	"xor"
32824     00          | 	byte	0
32825                 | LR__5583
32825     2A          | 	byte	"*"
32826     00          | 	byte	0
32827                 | LR__5584
32827     2F          | 	byte	"/"
32828     00          | 	byte	0
32829                 | LR__5585
32829     61 6E 64    | 	byte	"and"
3282c     00          | 	byte	0
3282d                 | LR__5586
3282d     64 69 76    | 	byte	"div"
32830     00          | 	byte	0
32831                 | LR__5587
32831     6D 6F 64    | 	byte	"mod"
32834     00          | 	byte	0
32835                 | LR__5588
32835     73 68 6C    | 	byte	"shl"
32838     00          | 	byte	0
32839                 | LR__5589
32839     73 68 72    | 	byte	"shr"
3283c     00          | 	byte	0
3283d                 | LR__5590
3283d     5E          | 	byte	"^"
3283e     00          | 	byte	0
3283f                 | LR__5591
3283f     6E 6F 74    | 	byte	"not"
32842     00          | 	byte	0
32843                 | LR__5592
32843     40          | 	byte	"@"
32844     00          | 	byte	0
32845                 | LR__5593
32845     3D          | 	byte	"="
32846     00          | 	byte	0
32847                 | LR__5594
32847     3E 3D       | 	byte	">="
32849     00          | 	byte	0
3284a                 | LR__5595
3284a     3C 3D       | 	byte	"<="
3284c     00          | 	byte	0
3284d                 | LR__5596
3284d     3C          | 	byte	"<"
3284e     00          | 	byte	0
3284f                 | LR__5597
3284f     3E          | 	byte	">"
32850     00          | 	byte	0
32851                 | LR__5598
32851     3C 3E       | 	byte	"<>"
32853     00          | 	byte	0
32854                 | LR__5599
32854     2B 2B       | 	byte	"++"
32856     00          | 	byte	0
32857                 | LR__5600
32857     2D 2D       | 	byte	"--"
32859     00          | 	byte	0
3285a                 | LR__5601
3285a     23          | 	byte	"#"
3285b     00          | 	byte	0
3285c                 | LR__5602
3285c     30          | 	byte	"0"
3285d     00          | 	byte	0
3285e                 | LR__5603
3285e     39          | 	byte	"9"
3285f     00          | 	byte	0
32860                 | LR__5604
32860     23 72 65 61 
32864     64          | 	byte	"#read"
32865     00          | 	byte	0
32866                 | LR__5605
32866     23 77 72 69 
3286a     74 65       | 	byte	"#write"
3286c     00          | 	byte	0
3286d                 | LR__5606
3286d     23 61 70 70 
32871     65 6E 64    | 	byte	"#append"
32874     00          | 	byte	0
32875                 | LR__5607
32875     23          | 	byte	"#"
32876     00          | 	byte	0
32877                 | LR__5608
32877     23          | 	byte	"#"
32878     00          | 	byte	0
32879                 | LR__5609
32879     2D          | 	byte	"-"
3287a     00          | 	byte	0
3287b                 | LR__5610
3287b     30          | 	byte	"0"
3287c     00          | 	byte	0
3287d                 | LR__5611
3287d     63          | 	byte	"c"
3287e     00          | 	byte	0
3287f                 | LR__5612
3287f     63 23       | 	byte	"c#"
32881     00          | 	byte	0
32882                 | LR__5613
32882     64          | 	byte	"d"
32883     00          | 	byte	0
32884                 | LR__5614
32884     64 23       | 	byte	"d#"
32886     00          | 	byte	0
32887                 | LR__5615
32887     65          | 	byte	"e"
32888     00          | 	byte	0
32889                 | LR__5616
32889     66          | 	byte	"f"
3288a     00          | 	byte	0
3288b                 | LR__5617
3288b     66 23       | 	byte	"f#"
3288d     00          | 	byte	0
3288e                 | LR__5618
3288e     67          | 	byte	"g"
3288f     00          | 	byte	0
32890                 | LR__5619
32890     67 23       | 	byte	"g#"
32892     00          | 	byte	0
32893                 | LR__5620
32893     61          | 	byte	"a"
32894     00          | 	byte	0
32895                 | LR__5621
32895     61 23       | 	byte	"a#"
32897     00          | 	byte	0
32898                 | LR__5622
32898     68          | 	byte	"h"
32899     00          | 	byte	0
3289a                 | LR__5623
3289a     62          | 	byte	"b"
3289b     00          | 	byte	0
3289c                 | LR__5624
3289c     2B          | 	byte	"+"
3289d     00          | 	byte	0
3289e                 | LR__5625
3289e     2D          | 	byte	"-"
3289f     00          | 	byte	0
328a0                 | LR__5626
328a0     3D          | 	byte	"="
328a1     00          | 	byte	0
328a2                 | LR__5627
328a2     2C          | 	byte	","
328a3     00          | 	byte	0
328a4                 | LR__5628
328a4     2A          | 	byte	"*"
328a5     00          | 	byte	0
328a6                 | LR__5629
328a6     2F          | 	byte	"/"
328a7     00          | 	byte	0
328a8                 | LR__5630
328a8     3B          | 	byte	";"
328a9     00          | 	byte	0
328aa                 | LR__5631
328aa     22          | 	byte	34
328ab     00          | 	byte	0
328ac                 | LR__5632
328ac     5E          | 	byte	"^"
328ad     00          | 	byte	0
328ae                 | LR__5633
328ae     29          | 	byte	")"
328af     00          | 	byte	0
328b0                 | LR__5634
328b0     28          | 	byte	"("
328b1     00          | 	byte	0
328b2                 | LR__5635
328b2     3A          | 	byte	":"
328b3     00          | 	byte	0
328b4                 | LR__5636
328b4     20          | 	byte	" "
328b5     00          | 	byte	0
328b6                 | LR__5637
328b6     3E          | 	byte	">"
328b7     00          | 	byte	0
328b8                 | LR__5638
328b8     3C          | 	byte	"<"
328b9     00          | 	byte	0
328ba                 | LR__5639
328ba     3D          | 	byte	"="
328bb     00          | 	byte	0
328bc                 | LR__5640
328bc     62 65 65 70 | 	byte	"beep"
328c0     00          | 	byte	0
328c1                 | LR__5641
328c1     62 2E       | 	byte	"b."
328c3     00          | 	byte	0
328c4                 | LR__5642
328c4     62 6C 69 74 | 	byte	"blit"
328c8     00          | 	byte	0
328c9                 | LR__5643
328c9     62 6F 78    | 	byte	"box"
328cc     00          | 	byte	0
328cd                 | LR__5644
328cd     62 72 75 6E | 	byte	"brun"
328d1     00          | 	byte	0
328d2                 | LR__5645
328d2     62 72 2E    | 	byte	"br."
328d5     00          | 	byte	0
328d6                 | LR__5646
328d6     63 64       | 	byte	"cd"
328d8     00          | 	byte	0
328d9                 | LR__5647
328d9     63 68 61 6E 
328dd     67 65 66 72 
328e1     65 71       | 	byte	"changefreq"
328e3     00          | 	byte	0
328e4                 | LR__5648
328e4     63 66 2E    | 	byte	"cf."
328e7     00          | 	byte	0
328e8                 | LR__5649
328e8     63 68 61 6E 
328ec     67 65 70 61 
328f0     6E          | 	byte	"changepan"
328f1     00          | 	byte	0
328f2                 | LR__5650
328f2     63 70 2E    | 	byte	"cp."
328f5     00          | 	byte	0
328f6                 | LR__5651
328f6     63 68 61 6E 
328fa     67 65 76 6F 
328fe     6C          | 	byte	"changevol"
328ff     00          | 	byte	0
32900                 | LR__5652
32900     63 76 2E    | 	byte	"cv."
32903     00          | 	byte	0
32904                 | LR__5653
32904     63 68 61 6E 
32908     67 65 77 61 
3290c     76 65       | 	byte	"changewave"
3290e     00          | 	byte	0
3290f                 | LR__5654
3290f     63 77 2E    | 	byte	"cw."
32912     00          | 	byte	0
32913                 | LR__5655
32913     63 69 72 63 
32917     6C 65       | 	byte	"circle"
32919     00          | 	byte	0
3291a                 | LR__5656
3291a     63 69 2E    | 	byte	"ci."
3291d     00          | 	byte	0
3291e                 | LR__5657
3291e     63 6C 69 63 
32922     6B          | 	byte	"click"
32923     00          | 	byte	0
32924                 | LR__5658
32924     63 6C 6F 73 
32928     65          | 	byte	"close"
32929     00          | 	byte	0
3292a                 | LR__5659
3292a     63 6C 73    | 	byte	"cls"
3292d     00          | 	byte	0
3292e                 | LR__5660
3292e     63 6F 67 73 
32932     74 6F 70    | 	byte	"cogstop"
32935     00          | 	byte	0
32936                 | LR__5661
32936     63 6F 6C 6F 
3293a     72          | 	byte	"color"
3293b     00          | 	byte	0
3293c                 | LR__5662
3293c     63 2E       | 	byte	"c."
3293e     00          | 	byte	0
3293f                 | LR__5663
3293f     63 6F 70 79 | 	byte	"copy"
32943     00          | 	byte	0
32944                 | LR__5664
32944     63 75 72 73 
32948     6F 72       | 	byte	"cursor"
3294a     00          | 	byte	0
3294b                 | LR__5665
3294b     64 61 74 61 | 	byte	"data"
3294f     00          | 	byte	0
32950                 | LR__5666
32950     64 65 66 63 
32954     68 61 72    | 	byte	"defchar"
32957     00          | 	byte	0
32958                 | LR__5667
32958     64 65 66 73 
3295c     6E 64       | 	byte	"defsnd"
3295e     00          | 	byte	0
3295f                 | LR__5668
3295f     64 65 66 65 
32963     6E 76       | 	byte	"defenv"
32965     00          | 	byte	0
32966                 | LR__5669
32966     64 65 66 73 
3296a     70 72 69 74 
3296e     65          | 	byte	"defsprite"
3296f     00          | 	byte	0
32970                 | LR__5670
32970     64 73 2E    | 	byte	"ds."
32973     00          | 	byte	0
32974                 | LR__5671
32974     64 65 67    | 	byte	"deg"
32977     00          | 	byte	0
32978                 | LR__5672
32978     64 65 6C 65 
3297c     74 65       | 	byte	"delete"
3297e     00          | 	byte	0
3297f                 | LR__5673
3297f     64 69 6D    | 	byte	"dim"
32982     00          | 	byte	0
32983                 | LR__5674
32983     64 69 72    | 	byte	"dir"
32986     00          | 	byte	0
32987                 | LR__5675
32987     64 70 6F 6B 
3298b     65          | 	byte	"dpoke"
3298c     00          | 	byte	0
3298d                 | LR__5676
3298d     64 72 61 77 | 	byte	"draw"
32991     00          | 	byte	0
32992                 | LR__5677
32992     64 72 61 77 
32996     74 6F       | 	byte	"drawto"
32998     00          | 	byte	0
32999                 | LR__5678
32999     64 72 2E    | 	byte	"dr."
3299c     00          | 	byte	0
3299d                 | LR__5679
3299d     65 6C 73 65 | 	byte	"else"
329a1     00          | 	byte	0
329a2                 | LR__5680
329a2     65 6E 64    | 	byte	"end"
329a5     00          | 	byte	0
329a6                 | LR__5681
329a6     65 6E 74 65 
329aa     72          | 	byte	"enter"
329ab     00          | 	byte	0
329ac                 | LR__5682
329ac     65 2E       | 	byte	"e."
329ae     00          | 	byte	0
329af                 | LR__5683
329af     66 63 69 72 
329b3     63 6C 65    | 	byte	"fcircle"
329b6     00          | 	byte	0
329b7                 | LR__5684
329b7     66 63 2E    | 	byte	"fc."
329ba     00          | 	byte	0
329bb                 | LR__5685
329bb     66 69 6C 6C | 	byte	"fill"
329bf     00          | 	byte	0
329c0                 | LR__5686
329c0     66 69 2E    | 	byte	"fi."
329c3     00          | 	byte	0
329c4                 | LR__5687
329c4     66 6F 6E 74 | 	byte	"font"
329c8     00          | 	byte	0
329c9                 | LR__5688
329c9     66 6F 72    | 	byte	"for"
329cc     00          | 	byte	0
329cd                 | LR__5689
329cd     66 2E       | 	byte	"f."
329cf     00          | 	byte	0
329d0                 | LR__5690
329d0     66 72 61 6D 
329d4     65          | 	byte	"frame"
329d5     00          | 	byte	0
329d6                 | LR__5691
329d6     66 72 2E    | 	byte	"fr."
329d9     00          | 	byte	0
329da                 | LR__5692
329da     67 65 74    | 	byte	"get"
329dd     00          | 	byte	0
329de                 | LR__5693
329de     67 6F 73 75 
329e2     62          | 	byte	"gosub"
329e3     00          | 	byte	0
329e4                 | LR__5694
329e4     67 6F 74 6F | 	byte	"goto"
329e8     00          | 	byte	0
329e9                 | LR__5695
329e9     67 2E       | 	byte	"g."
329eb     00          | 	byte	0
329ec                 | LR__5696
329ec     69 66       | 	byte	"if"
329ee     00          | 	byte	0
329ef                 | LR__5697
329ef     69 6E 6B    | 	byte	"ink"
329f2     00          | 	byte	0
329f3                 | LR__5698
329f3     69 2E       | 	byte	"i."
329f5     00          | 	byte	0
329f6                 | LR__5699
329f6     69 6E 70 75 
329fa     74          | 	byte	"input"
329fb     00          | 	byte	0
329fc                 | LR__5700
329fc     6C 69 73 74 | 	byte	"list"
32a00     00          | 	byte	0
32a01                 | LR__5701
32a01     6C 2E       | 	byte	"l."
32a03     00          | 	byte	0
32a04                 | LR__5702
32a04     6C 6F 61 64 | 	byte	"load"
32a08     00          | 	byte	0
32a09                 | LR__5703
32a09     6C 6F 2E    | 	byte	"lo."
32a0c     00          | 	byte	0
32a0d                 | LR__5704
32a0d     6C 70 6F 6B 
32a11     65          | 	byte	"lpoke"
32a12     00          | 	byte	0
32a13                 | LR__5705
32a13     6D 6B 64 69 
32a17     72          | 	byte	"mkdir"
32a18     00          | 	byte	0
32a19                 | LR__5706
32a19     6D 6F 64 65 | 	byte	"mode"
32a1d     00          | 	byte	0
32a1e                 | LR__5707
32a1e     6D 2E       | 	byte	"m."
32a20     00          | 	byte	0
32a21                 | LR__5708
32a21     6D 6F 75 73 
32a25     65          | 	byte	"mouse"
32a26     00          | 	byte	0
32a27                 | LR__5709
32a27     6E 65 77    | 	byte	"new"
32a2a     00          | 	byte	0
32a2b                 | LR__5710
32a2b     6E 65 78 74 | 	byte	"next"
32a2f     00          | 	byte	0
32a30                 | LR__5711
32a30     6E 2E       | 	byte	"n."
32a32     00          | 	byte	0
32a33                 | LR__5712
32a33     6F 6E       | 	byte	"on"
32a35     00          | 	byte	0
32a36                 | LR__5713
32a36     6F 70 65 6E | 	byte	"open"
32a3a     00          | 	byte	0
32a3b                 | LR__5714
32a3b     70 61 70 65 
32a3f     72          | 	byte	"paper"
32a40     00          | 	byte	0
32a41                 | LR__5715
32a41     70 61 2E    | 	byte	"pa."
32a44     00          | 	byte	0
32a45                 | LR__5716
32a45     70 69 6E 66 
32a49     6C 6F 61 74 | 	byte	"pinfloat"
32a4d     00          | 	byte	0
32a4e                 | LR__5717
32a4e     70 69 6E 68 
32a52     69          | 	byte	"pinhi"
32a53     00          | 	byte	0
32a54                 | LR__5718
32a54     70 69 6E 6C 
32a58     6F          | 	byte	"pinlo"
32a59     00          | 	byte	0
32a5a                 | LR__5719
32a5a     70 69 6E 73 
32a5e     74 61 72 74 | 	byte	"pinstart"
32a62     00          | 	byte	0
32a63                 | LR__5720
32a63     70 69 6E 74 
32a67     6F 67 67 6C 
32a6b     65          | 	byte	"pintoggle"
32a6c     00          | 	byte	0
32a6d                 | LR__5721
32a6d     70 69 6E 77 
32a71     72 69 74 65 | 	byte	"pinwrite"
32a75     00          | 	byte	0
32a76                 | LR__5722
32a76     70 6C 61 79 | 	byte	"play"
32a7a     00          | 	byte	0
32a7b                 | LR__5723
32a7b     70 2E       | 	byte	"p."
32a7d     00          | 	byte	0
32a7e                 | LR__5724
32a7e     70 6C 6F 74 | 	byte	"plot"
32a82     00          | 	byte	0
32a83                 | LR__5725
32a83     70 6C 2E    | 	byte	"pl."
32a86     00          | 	byte	0
32a87                 | LR__5726
32a87     70 6F 6B 65 | 	byte	"poke"
32a8b     00          | 	byte	0
32a8c                 | LR__5727
32a8c     70 6F 70    | 	byte	"pop"
32a8f     00          | 	byte	0
32a90                 | LR__5728
32a90     70 6F 73 69 
32a94     74 69 6F 6E | 	byte	"position"
32a98     00          | 	byte	0
32a99                 | LR__5729
32a99     70 6F 73 2E | 	byte	"pos."
32a9d     00          | 	byte	0
32a9e                 | LR__5730
32a9e     70 72 69 6E 
32aa2     74          | 	byte	"print"
32aa3     00          | 	byte	0
32aa4                 | LR__5731
32aa4     3F          | 	byte	"?"
32aa5     00          | 	byte	0
32aa6                 | LR__5732
32aa6     70 75 74    | 	byte	"put"
32aa9     00          | 	byte	0
32aaa                 | LR__5733
32aaa     72 61 64    | 	byte	"rad"
32aad     00          | 	byte	0
32aae                 | LR__5734
32aae     72 65 61 64 | 	byte	"read"
32ab2     00          | 	byte	0
32ab3                 | LR__5735
32ab3     72 65 6C 65 
32ab7     61 73 65    | 	byte	"release"
32aba     00          | 	byte	0
32abb                 | LR__5736
32abb     72 65 6D    | 	byte	"rem"
32abe     00          | 	byte	0
32abf                 | LR__5737
32abf     27          | 	byte	"'"
32ac0     00          | 	byte	0
32ac1                 | LR__5738
32ac1     72 65 73 74 
32ac5     6F 72 65    | 	byte	"restore"
32ac8     00          | 	byte	0
32ac9                 | LR__5739
32ac9     72 65 73 74 
32acd     6F 72 65 70 
32ad1     61 6C 65 74 
32ad5     74 65       | 	byte	"restorepalette"
32ad7     00          | 	byte	0
32ad8                 | LR__5740
32ad8     72 70 2E    | 	byte	"rp."
32adb     00          | 	byte	0
32adc                 | LR__5741
32adc     72 65 74 75 
32ae0     72 6E       | 	byte	"return"
32ae2     00          | 	byte	0
32ae3                 | LR__5742
32ae3     72 75 6E    | 	byte	"run"
32ae6     00          | 	byte	0
32ae7                 | LR__5743
32ae7     72 2E       | 	byte	"r."
32ae9     00          | 	byte	0
32aea                 | LR__5744
32aea     73 61 76 65 | 	byte	"save"
32aee     00          | 	byte	0
32aef                 | LR__5745
32aef     73 2E       | 	byte	"s."
32af1     00          | 	byte	0
32af2                 | LR__5746
32af2     73 65 74 63 
32af6     6F 6C 6F 72 | 	byte	"setcolor"
32afa     00          | 	byte	0
32afb                 | LR__5747
32afb     73 63 2E    | 	byte	"sc."
32afe     00          | 	byte	0
32aff                 | LR__5748
32aff     73 65 74 61 
32b03     6D 6F 64 65 | 	byte	"setamode"
32b07     00          | 	byte	0
32b08                 | LR__5749
32b08     73 61 2E    | 	byte	"sa."
32b0b     00          | 	byte	0
32b0c                 | LR__5750
32b0c     73 65 74 64 
32b10     65 6C 61 79 | 	byte	"setdelay"
32b14     00          | 	byte	0
32b15                 | LR__5751
32b15     73 64 2E    | 	byte	"sd."
32b18     00          | 	byte	0
32b19                 | LR__5752
32b19     73 65 74 65 
32b1d     6E 76       | 	byte	"setenv"
32b1f     00          | 	byte	0
32b20                 | LR__5753
32b20     73 65 2E    | 	byte	"se."
32b23     00          | 	byte	0
32b24                 | LR__5754
32b24     73 65 74 6C 
32b28     65 6E       | 	byte	"setlen"
32b2a     00          | 	byte	0
32b2b                 | LR__5755
32b2b     73 6C 2E    | 	byte	"sl."
32b2e     00          | 	byte	0
32b2f                 | LR__5756
32b2f     73 65 74 70 
32b33     61 6E       | 	byte	"setpan"
32b35     00          | 	byte	0
32b36                 | LR__5757
32b36     73 70 2E    | 	byte	"sp."
32b39     00          | 	byte	0
32b3a                 | LR__5758
32b3a     73 65 74 73 
32b3e     75 73 74 61 
32b42     69 6E       | 	byte	"setsustain"
32b44     00          | 	byte	0
32b45                 | LR__5759
32b45     73 73 2E    | 	byte	"ss."
32b48     00          | 	byte	0
32b49                 | LR__5760
32b49     73 65 74 76 
32b4d     6F 6C       | 	byte	"setvol"
32b4f     00          | 	byte	0
32b50                 | LR__5761
32b50     73 76 2E    | 	byte	"sv."
32b53     00          | 	byte	0
32b54                 | LR__5762
32b54     73 65 74 77 
32b58     61 76 65    | 	byte	"setwave"
32b5b     00          | 	byte	0
32b5c                 | LR__5763
32b5c     73 77 2E    | 	byte	"sw."
32b5f     00          | 	byte	0
32b60                 | LR__5764
32b60     73 65 74 77 
32b64     61 76       | 	byte	"setwav"
32b66     00          | 	byte	0
32b67                 | LR__5765
32b67     73 68 75 74 
32b6b     75 70       | 	byte	"shutup"
32b6d     00          | 	byte	0
32b6e                 | LR__5766
32b6e     73 68 2E    | 	byte	"sh."
32b71     00          | 	byte	0
32b72                 | LR__5767
32b72     73 6F 75 6E 
32b76     64          | 	byte	"sound"
32b77     00          | 	byte	0
32b78                 | LR__5768
32b78     73 6F 2E    | 	byte	"so."
32b7b     00          | 	byte	0
32b7c                 | LR__5769
32b7c     73 70 72 69 
32b80     74 65       | 	byte	"sprite"
32b82     00          | 	byte	0
32b83                 | LR__5770
32b83     73 70 72 2E | 	byte	"spr."
32b87     00          | 	byte	0
32b88                 | LR__5771
32b88     74 68 65 6E | 	byte	"then"
32b8c     00          | 	byte	0
32b8d                 | LR__5772
32b8d     77 61 69 74 
32b91     6D 73       | 	byte	"waitms"
32b93     00          | 	byte	0
32b94                 | LR__5773
32b94     77 2E       | 	byte	"w."
32b96     00          | 	byte	0
32b97                 | LR__5774
32b97     77 61 69 74 
32b9b     63 6C 6F 63 
32b9f     6B          | 	byte	"waitclock"
32ba0     00          | 	byte	0
32ba1                 | LR__5775
32ba1     77 63 2E    | 	byte	"wc."
32ba4     00          | 	byte	0
32ba5                 | LR__5776
32ba5     77 61 69 74 
32ba9     76 62 6C    | 	byte	"waitvbl"
32bac     00          | 	byte	0
32bad                 | LR__5777
32bad     77 76 2E    | 	byte	"wv."
32bb0     00          | 	byte	0
32bb1                 | LR__5778
32bb1     77 72 70 69 
32bb5     6E          | 	byte	"wrpin"
32bb6     00          | 	byte	0
32bb7                 | LR__5779
32bb7     77 78 70 69 
32bbb     6E          | 	byte	"wxpin"
32bbc     00          | 	byte	0
32bbd                 | LR__5780
32bbd     77 79 70 69 
32bc1     6E          | 	byte	"wypin"
32bc2     00          | 	byte	0
32bc3                 | LR__5781
32bc3     61 62 73    | 	byte	"abs"
32bc6     00          | 	byte	0
32bc7                 | LR__5782
32bc7     61 63 6F 73 | 	byte	"acos"
32bcb     00          | 	byte	0
32bcc                 | LR__5783
32bcc     61 64 72    | 	byte	"adr"
32bcf     00          | 	byte	0
32bd0                 | LR__5784
32bd0     61 64 64 72 | 	byte	"addr"
32bd4     00          | 	byte	0
32bd5                 | LR__5785
32bd5     61 73 63    | 	byte	"asc"
32bd8     00          | 	byte	0
32bd9                 | LR__5786
32bd9     61 73 69 6E | 	byte	"asin"
32bdd     00          | 	byte	0
32bde                 | LR__5787
32bde     61 74 6E    | 	byte	"atn"
32be1     00          | 	byte	0
32be2                 | LR__5788
32be2     62 69 6E 24 | 	byte	"bin$"
32be6     00          | 	byte	0
32be7                 | LR__5789
32be7     63 68 72 24 | 	byte	"chr$"
32beb     00          | 	byte	0
32bec                 | LR__5790
32bec     63 6F 67 69 
32bf0     6E 69 74    | 	byte	"coginit"
32bf3     00          | 	byte	0
32bf4                 | LR__5791
32bf4     63 6F 73    | 	byte	"cos"
32bf7     00          | 	byte	0
32bf8                 | LR__5792
32bf8     64 70 65 65 
32bfc     6B          | 	byte	"dpeek"
32bfd     00          | 	byte	0
32bfe                 | LR__5793
32bfe     66 69 6E 64 
32c02     66 69 72 73 
32c06     74          | 	byte	"findfirst"
32c07     00          | 	byte	0
32c08                 | LR__5794
32c08     66 69 6E 64 
32c0c     6E 65 78 74 | 	byte	"findnext"
32c10     00          | 	byte	0
32c11                 | LR__5795
32c11     66 72 61 6D 
32c15     65 62 75 66 | 	byte	"framebuf"
32c19     00          | 	byte	0
32c1a                 | LR__5796
32c1a     66 62 2E    | 	byte	"fb."
32c1d     00          | 	byte	0
32c1e                 | LR__5797
32c1e     66 72 65    | 	byte	"fre"
32c21     00          | 	byte	0
32c22                 | LR__5798
32c22     67 63 2E    | 	byte	"gc."
32c25     00          | 	byte	0
32c26                 | LR__5799
32c26     67 65 74 63 
32c2a     6F 6C 6F 72 | 	byte	"getcolor"
32c2e     00          | 	byte	0
32c2f                 | LR__5800
32c2f     67 65 74 70 
32c33     69 78 65 6C | 	byte	"getpixel"
32c37     00          | 	byte	0
32c38                 | LR__5801
32c38     67 65 2E    | 	byte	"ge."
32c3b     00          | 	byte	0
32c3c                 | LR__5802
32c3c     67 65 74 65 
32c40     6E 76 73 75 
32c44     73 74 61 69 
32c48     6E          | 	byte	"getenvsustain"
32c49     00          | 	byte	0
32c4a                 | LR__5803
32c4a     67 65 74 6E 
32c4e     6F 74 65 76 
32c52     61 6C 75 65 | 	byte	"getnotevalue"
32c56     00          | 	byte	0
32c57                 | LR__5804
32c57     67 65 74 72 
32c5b     65 61 6C 66 
32c5f     72 65 71    | 	byte	"getrealfreq"
32c62     00          | 	byte	0
32c63                 | LR__5805
32c63     67 65 74 74 
32c67     69 6D 65    | 	byte	"gettime"
32c6a     00          | 	byte	0
32c6b                 | LR__5806
32c6b     67 74 2E    | 	byte	"gt."
32c6e     00          | 	byte	0
32c6f                 | LR__5807
32c6f     68 65 78 24 | 	byte	"hex$"
32c73     00          | 	byte	0
32c74                 | LR__5808
32c74     69 6E 6B 65 
32c78     79 24       | 	byte	"inkey$"
32c7a     00          | 	byte	0
32c7b                 | LR__5809
32c7b     69 6E 74    | 	byte	"int"
32c7e     00          | 	byte	0
32c7f                 | LR__5810
32c7f     6C 65 66 74 
32c83     24          | 	byte	"left$"
32c84     00          | 	byte	0
32c85                 | LR__5811
32c85     6C 65 6E    | 	byte	"len"
32c88     00          | 	byte	0
32c89                 | LR__5812
32c89     6C 6F 67    | 	byte	"log"
32c8c     00          | 	byte	0
32c8d                 | LR__5813
32c8d     6C 70 65 65 
32c91     6B          | 	byte	"lpeek"
32c92     00          | 	byte	0
32c93                 | LR__5814
32c93     6D 65 6D 74 
32c97     6F 70       | 	byte	"memtop"
32c99     00          | 	byte	0
32c9a                 | LR__5815
32c9a     6D 65 6D 6C 
32c9e     6F          | 	byte	"memlo"
32c9f     00          | 	byte	0
32ca0                 | LR__5816
32ca0     6D 69 64 24 | 	byte	"mid$"
32ca4     00          | 	byte	0
32ca5                 | LR__5817
32ca5     6D 6F 75 73 
32ca9     65 6B       | 	byte	"mousek"
32cab     00          | 	byte	0
32cac                 | LR__5818
32cac     6D 6F 75 73 
32cb0     65 77       | 	byte	"mousew"
32cb2     00          | 	byte	0
32cb3                 | LR__5819
32cb3     6D 6F 75 73 
32cb7     65 78       | 	byte	"mousex"
32cb9     00          | 	byte	0
32cba                 | LR__5820
32cba     6D 6F 75 73 
32cbe     65 79       | 	byte	"mousey"
32cc0     00          | 	byte	0
32cc1                 | LR__5821
32cc1     70 61 64 73 | 	byte	"pads"
32cc5     00          | 	byte	0
32cc6                 | LR__5822
32cc6     70 61 64 77 | 	byte	"padw"
32cca     00          | 	byte	0
32ccb                 | LR__5823
32ccb     70 61 64 78 | 	byte	"padx"
32ccf     00          | 	byte	0
32cd0                 | LR__5824
32cd0     70 61 64 79 | 	byte	"pady"
32cd4     00          | 	byte	0
32cd5                 | LR__5825
32cd5     70 61 64 7A | 	byte	"padz"
32cd9     00          | 	byte	0
32cda                 | LR__5826
32cda     70 61 64 72 
32cde     78          | 	byte	"padrx"
32cdf     00          | 	byte	0
32ce0                 | LR__5827
32ce0     70 61 64 72 
32ce4     79          | 	byte	"padry"
32ce5     00          | 	byte	0
32ce6                 | LR__5828
32ce6     70 61 64 72 
32cea     7A          | 	byte	"padrz"
32ceb     00          | 	byte	0
32cec                 | LR__5829
32cec     70 61 64 68 | 	byte	"padh"
32cf0     00          | 	byte	0
32cf1                 | LR__5830
32cf1     70 65 65 6B | 	byte	"peek"
32cf5     00          | 	byte	0
32cf6                 | LR__5831
32cf6     70 69 6E 72 
32cfa     65 61 64    | 	byte	"pinread"
32cfd     00          | 	byte	0
32cfe                 | LR__5832
32cfe     72 64 70 69 
32d02     6E          | 	byte	"rdpin"
32d03     00          | 	byte	0
32d04                 | LR__5833
32d04     72 69 67 68 
32d08     74 24       | 	byte	"right$"
32d0a     00          | 	byte	0
32d0b                 | LR__5834
32d0b     72 71 70 69 
32d0f     6E          | 	byte	"rqpin"
32d10     00          | 	byte	0
32d11                 | LR__5835
32d11     72 6F 75 6E 
32d15     64          | 	byte	"round"
32d16     00          | 	byte	0
32d17                 | LR__5836
32d17     72 6E 64    | 	byte	"rnd"
32d1a     00          | 	byte	0
32d1b                 | LR__5837
32d1b     73 69 6E    | 	byte	"sin"
32d1e     00          | 	byte	0
32d1f                 | LR__5838
32d1f     73 71 72    | 	byte	"sqr"
32d22     00          | 	byte	0
32d23                 | LR__5839
32d23     73 74 69 63 
32d27     6B          | 	byte	"stick"
32d28     00          | 	byte	0
32d29                 | LR__5840
32d29     73 74 72 69 
32d2d     67          | 	byte	"strig"
32d2e     00          | 	byte	0
32d2f                 | LR__5841
32d2f     73 74 72 24 | 	byte	"str$"
32d33     00          | 	byte	0
32d34                 | LR__5842
32d34     74 61 6E    | 	byte	"tan"
32d37     00          | 	byte	0
32d38                 | LR__5843
32d38     76 61 6C    | 	byte	"val"
32d3b     00          | 	byte	0
32d3c                 | LR__5844
32d3c     76 61 72 70 
32d40     74 72       | 	byte	"varptr"
32d42     00          | 	byte	0
32d43                 | LR__5845
32d43     61          | 	byte	"a"
32d44     00          | 	byte	0
32d45                 | LR__5846
32d45     7A          | 	byte	"z"
32d46     00          | 	byte	0
32d47                 | LR__5847
32d47     5F          | 	byte	"_"
32d48     00          | 	byte	0
32d49                 | LR__5848
32d49     61          | 	byte	"a"
32d4a     00          | 	byte	0
32d4b                 | LR__5849
32d4b     7A          | 	byte	"z"
32d4c     00          | 	byte	0
32d4d                 | LR__5850
32d4d     30          | 	byte	"0"
32d4e     00          | 	byte	0
32d4f                 | LR__5851
32d4f     39          | 	byte	"9"
32d50     00          | 	byte	0
32d51                 | LR__5852
32d51     5F          | 	byte	"_"
32d52     00          | 	byte	0
32d53                 | LR__5853
32d53     2E          | 	byte	"."
32d54     00          | 	byte	0
32d55                 | LR__5854
32d55     61          | 	byte	"a"
32d56     00          | 	byte	0
32d57                 | LR__5855
32d57     7A          | 	byte	"z"
32d58     00          | 	byte	0
32d59                 | LR__5856
32d59     30          | 	byte	"0"
32d5a     00          | 	byte	0
32d5b                 | LR__5857
32d5b     39          | 	byte	"9"
32d5c     00          | 	byte	0
32d5d                 | LR__5858
32d5d     5F          | 	byte	"_"
32d5e     00          | 	byte	0
32d5f                 | LR__5859
32d5f     24          | 	byte	"$"
32d60     00          | 	byte	0
32d61                 | LR__5860
32d61     25          | 	byte	"%"
32d62     00          | 	byte	0
32d63                 | LR__5861
32d63     21          | 	byte	"!"
32d64     00          | 	byte	0
32d65                 | LR__5862
32d65     30          | 	byte	"0"
32d66     00          | 	byte	0
32d67                 | LR__5863
32d67     39          | 	byte	"9"
32d68     00          | 	byte	0
32d69                 | LR__5864
32d69     2E          | 	byte	"."
32d6a     00          | 	byte	0
32d6b                 | LR__5865
32d6b     24          | 	byte	"$"
32d6c     00          | 	byte	0
32d6d                 | LR__5866
32d6d     25          | 	byte	"%"
32d6e     00          | 	byte	0
32d6f                 | LR__5867
32d6f     2D          | 	byte	"-"
32d70     00          | 	byte	0
32d71                 | LR__5868
32d71     2E          | 	byte	"."
32d72     00          | 	byte	0
32d73                 | LR__5869
32d73     24          | 	byte	"$"
32d74     00          | 	byte	0
32d75                 | LR__5870
32d75     25          | 	byte	"%"
32d76     00          | 	byte	0
32d77                 | LR__5871
32d77     30          | 	byte	"0"
32d78     00          | 	byte	0
32d79                 | LR__5872
32d79     39          | 	byte	"9"
32d7a     00          | 	byte	0
32d7b                 | LR__5873
32d7b     5F          | 	byte	"_"
32d7c     00          | 	byte	0
32d7d                 | LR__5874
32d7d     2E          | 	byte	"."
32d7e     00          | 	byte	0
32d7f                 | LR__5875
32d7f     45          | 	byte	"E"
32d80     00          | 	byte	0
32d81                 | LR__5876
32d81     65          | 	byte	"e"
32d82     00          | 	byte	0
32d83                 | LR__5877
32d83     2D          | 	byte	"-"
32d84     00          | 	byte	0
32d85                 | LR__5878
32d85     61          | 	byte	"a"
32d86     00          | 	byte	0
32d87                 | LR__5879
32d87     66          | 	byte	"f"
32d88     00          | 	byte	0
32d89                 | LR__5880
32d89     30          | 	byte	"0"
32d8a     00          | 	byte	0
32d8b                 | LR__5881
32d8b     31          | 	byte	"1"
32d8c     00          | 	byte	0
32d8d                 | LR__5882
32d8d     5F          | 	byte	"_"
32d8e     00          | 	byte	0
32d8f                 | LR__5883
32d8f     2D          | 	byte	"-"
32d90     00          | 	byte	0
32d91                 | LR__5884
32d91     65          | 	byte	"e"
32d92     00          | 	byte	0
32d93                 | LR__5885
32d93     2E          | 	byte	"."
32d94     00          | 	byte	0
32d95                 | LR__5886
32d95     45          | 	byte	"E"
32d96     00          | 	byte	0
32d97                 | LR__5887
32d97     65          | 	byte	"e"
32d98     00          | 	byte	0
32d99                 | LR__5888
32d99     30          | 	byte	"0"
32d9a     00          | 	byte	0
32d9b                 | LR__5889
32d9b     39          | 	byte	"9"
32d9c     00          | 	byte	0
32d9d                 | LR__5890
32d9d     24          | 	byte	"$"
32d9e     00          | 	byte	0
32d9f                 | LR__5891
32d9f     25          | 	byte	"%"
32da0     00          | 	byte	0
32da1                 | LR__5892
32da1     2D          | 	byte	"-"
32da2     00          | 	byte	0
32da3                 | LR__5893
32da3     24          | 	byte	"$"
32da4     00          | 	byte	0
32da5                 | LR__5894
32da5     25          | 	byte	"%"
32da6     00          | 	byte	0
32da7                 | LR__5895
32da7     30          | 	byte	"0"
32da8     00          | 	byte	0
32da9                 | LR__5896
32da9     39          | 	byte	"9"
32daa     00          | 	byte	0
32dab                 | LR__5897
32dab     5F          | 	byte	"_"
32dac     00          | 	byte	0
32dad                 | LR__5898
32dad     30          | 	byte	"0"
32dae     00          | 	byte	0
32daf                 | LR__5899
32daf     39          | 	byte	"9"
32db0     00          | 	byte	0
32db1                 | LR__5900
32db1     61          | 	byte	"a"
32db2     00          | 	byte	0
32db3                 | LR__5901
32db3     66          | 	byte	"f"
32db4     00          | 	byte	0
32db5                 | LR__5902
32db5     5F          | 	byte	"_"
32db6     00          | 	byte	0
32db7                 | LR__5903
32db7     30          | 	byte	"0"
32db8     00          | 	byte	0
32db9                 | LR__5904
32db9     31          | 	byte	"1"
32dba     00          | 	byte	0
32dbb                 | LR__5905
32dbb     5F          | 	byte	"_"
32dbc     00          | 	byte	0
32dbd                 | LR__5906
32dbd     30          | 	byte	"0"
32dbe     00          | 	byte	0
32dbf                 | LR__5907
32dbf     39          | 	byte	"9"
32dc0     00          | 	byte	0
32dc1                 | LR__5908
32dc1     5F          | 	byte	"_"
32dc2     00          | 	byte	0
32dc3                 | LR__5909
32dc3     22          | 	byte	34
32dc4     00          | 	byte	0
32dc5                 | LR__5910
32dc5     22          | 	byte	34
32dc6     00          | 	byte	0
32dc7                 | LR__5911
32dc7     44 69 6D 3A 
32dcb     20 61 74 20 
32dcf     6C 69 6E 65 
32dd3     20          | 	byte	"Dim: at line "
32dd4     00          | 	byte	0
32dd5                 | LR__5912
32dd5     3A 20 77 61 
32dd9     72 6E 69 6E 
32ddd     67 3A 20 74 
32de1     68 65 20 76 
32de5     61 72 69 61 
32de9     62 6C 65 20 
32ded     65 78 69 73 
32df1     74 65 64 2E | 	byte	": warning: the variable existed."
32df5     00          | 	byte	0
32df6                 | LR__5913
32df6     28          | 	byte	"("
32df7     00          | 	byte	0
32df8                 | LR__5914
32df8     61 73       | 	byte	"as"
32dfa     00          | 	byte	0
32dfb                 | LR__5915
32dfb     61 73       | 	byte	"as"
32dfd     00          | 	byte	0
32dfe                 | LR__5916
32dfe     2C          | 	byte	","
32dff     00          | 	byte	0
32e00                 | LR__5917
32e00     29          | 	byte	")"
32e01     00          | 	byte	0
32e02                 | LR__5918
32e02     29          | 	byte	")"
32e03     00          | 	byte	0
32e04                 | LR__5919
32e04     61 73       | 	byte	"as"
32e06     00          | 	byte	0
32e07                 | LR__5920
32e07     62 79 74 65 | 	byte	"byte"
32e0b     00          | 	byte	0
32e0c                 | LR__5921
32e0c     75 62 79 74 
32e10     65          | 	byte	"ubyte"
32e11     00          | 	byte	0
32e12                 | LR__5922
32e12     73 68 6F 72 
32e16     74          | 	byte	"short"
32e17     00          | 	byte	0
32e18                 | LR__5923
32e18     75 73 68 6F 
32e1c     72 74       | 	byte	"ushort"
32e1e     00          | 	byte	0
32e1f                 | LR__5924
32e1f     6C 6F 6E 67 | 	byte	"long"
32e23     00          | 	byte	0
32e24                 | LR__5925
32e24     69 6E 74 65 
32e28     67 65 72    | 	byte	"integer"
32e2b     00          | 	byte	0
32e2c                 | LR__5926
32e2c     75 6C 6F 6E 
32e30     67          | 	byte	"ulong"
32e31     00          | 	byte	0
32e32                 | LR__5927
32e32     69 6E 74 36 
32e36     34          | 	byte	"int64"
32e37     00          | 	byte	0
32e38                 | LR__5928
32e38     75 69 6E 74 
32e3c     36 34       | 	byte	"uint64"
32e3e     00          | 	byte	0
32e3f                 | LR__5929
32e3f     73 69 6E 67 
32e43     6C 65       | 	byte	"single"
32e45     00          | 	byte	0
32e46                 | LR__5930
32e46     64 6F 75 62 
32e4a     6C 65       | 	byte	"double"
32e4c     00          | 	byte	0
32e4d                 | LR__5931
32e4d     73 74 72 69 
32e51     6E 67       | 	byte	"string"
32e53     00          | 	byte	0
32e54                 | LR__5932
32e54     74 6F       | 	byte	"to"
32e56     00          | 	byte	0
32e57                 | LR__5933
32e57     73 74 65 70 | 	byte	"step"
32e5b     00          | 	byte	0
32e5c                 | LR__5934
32e5c     73 2E       | 	byte	"s."
32e5e     00          | 	byte	0
32e5f                 | LR__5935
32e5f     73 2E       | 	byte	"s."
32e61     00          | 	byte	0
32e62                 | LR__5936
32e62     67 6F 74 6F | 	byte	"goto"
32e66     00          | 	byte	0
32e67                 | LR__5937
32e67     67 6F 73 75 
32e6b     62          | 	byte	"gosub"
32e6c     00          | 	byte	0
32e6d                 | LR__5938
32e6d     24          | 	byte	"$"
32e6e     00          | 	byte	0
32e6f                 | LR__5939
32e6f     26 68       | 	byte	"&h"
32e71     00          | 	byte	0
32e72                 | LR__5940
32e72     25          | 	byte	"%"
32e73     00          | 	byte	0
32e74                 | LR__5941
32e74     26 62       | 	byte	"&b"
32e76     00          | 	byte	0
32e77                 | LR__5942
32e77                 | 	byte	
32e77     00          | 	byte	0
32e78                 | LR__5943
32e78     61 63 6F 73 
32e7c     3A 20       | 	byte	"acos: "
32e7e     00          | 	byte	0
32e7f                 | LR__5944
32e7f     61 73 63 3A 
32e83     20          | 	byte	"asc: "
32e84     00          | 	byte	0
32e85                 | LR__5945
32e85     61 73 63 3A 
32e89     20          | 	byte	"asc: "
32e8a     00          | 	byte	0
32e8b                 | LR__5946
32e8b     61 73 69 6E 
32e8f     3A 20       | 	byte	"asin: "
32e91     00          | 	byte	0
32e92                 | LR__5947
32e92     61 74 6E 3A 
32e96     20          | 	byte	"atn: "
32e97     00          | 	byte	0
32e98                 | LR__5948
32e98     62 6C 69 74 
32e9c     3A 20       | 	byte	"blit: "
32e9e     00          | 	byte	0
32e9f                 | LR__5949
32e9f     62 69 6E 24 
32ea3     3A 20       | 	byte	"bin$: "
32ea5     00          | 	byte	0
32ea6                 | LR__5950
32ea6     2F          | 	byte	"/"
32ea7     00          | 	byte	0
32ea8                 | LR__5951
32ea8     2F 73 64 2F 
32eac     62 69 6E 2F | 	byte	"/sd/bin/"
32eb0     00          | 	byte	0
32eb1                 | LR__5952
32eb1     53 79 73 74 
32eb5     65 6D 20 65 
32eb9     72 72 6F 72 
32ebd     20          | 	byte	"System error "
32ebe     00          | 	byte	0
32ebf                 | LR__5953
32ebf     3A 20       | 	byte	": "
32ec1     00          | 	byte	0
32ec2                 | LR__5954
32ec2     2A          | 	byte	"*"
32ec3     00          | 	byte	0
32ec4                 | LR__5955
32ec4     2E 2E       | 	byte	".."
32ec6     00          | 	byte	0
32ec7                 | LR__5956
32ec7     2F          | 	byte	"/"
32ec8     00          | 	byte	0
32ec9                 | LR__5957
32ec9     2F          | 	byte	"/"
32eca     00          | 	byte	0
32ecb                 | LR__5958
32ecb     53 79 73 74 
32ecf     65 6D 20 65 
32ed3     72 72 6F 72 
32ed7     20          | 	byte	"System error "
32ed8     00          | 	byte	0
32ed9                 | LR__5959
32ed9     3A 20       | 	byte	": "
32edb     00          | 	byte	0
32edc                 | LR__5960
32edc     43 75 72 72 
32ee0     65 6E 74 20 
32ee4     64 69 72 65 
32ee8     63 74 6F 72 
32eec     79 3A 20    | 	byte	"Current directory: "
32eef     00          | 	byte	0
32ef0                 | LR__5961
32ef0     2F          | 	byte	"/"
32ef1     00          | 	byte	0
32ef2                 | LR__5962
32ef2     53 79 73 74 
32ef6     65 6D 20 65 
32efa     72 72 6F 72 
32efe     20          | 	byte	"System error "
32eff     00          | 	byte	0
32f00                 | LR__5963
32f00     3A 20       | 	byte	": "
32f02     00          | 	byte	0
32f03                 | LR__5964
32f03     43 75 72 72 
32f07     65 6E 74 20 
32f0b     64 69 72 65 
32f0f     63 74 6F 72 
32f13     79 3A 20    | 	byte	"Current directory: "
32f16     00          | 	byte	0
32f17                 | LR__5965
32f17     2F          | 	byte	"/"
32f18     00          | 	byte	0
32f19                 | LR__5966
32f19     2F          | 	byte	"/"
32f1a     00          | 	byte	0
32f1b                 | LR__5967
32f1b     2F          | 	byte	"/"
32f1c     00          | 	byte	0
32f1d                 | LR__5968
32f1d     53 79 73 74 
32f21     65 6D 20 65 
32f25     72 72 6F 72 
32f29     20          | 	byte	"System error "
32f2a     00          | 	byte	0
32f2b                 | LR__5969
32f2b     3A 20       | 	byte	": "
32f2d     00          | 	byte	0
32f2e                 | LR__5970
32f2e     43 75 72 72 
32f32     65 6E 74 20 
32f36     64 69 72 65 
32f3a     63 74 6F 72 
32f3e     79 3A 20    | 	byte	"Current directory: "
32f41     00          | 	byte	0
32f42                 | LR__5971
32f42     63 68 72 24 
32f46     3A 20       | 	byte	"chr$: "
32f48     00          | 	byte	0
32f49                 | LR__5972
32f49     63 68 61 6E 
32f4d     6E 65 6C 23 
32f51     20 65 78 70 
32f55     65 63 74 65 
32f59     64          | 	byte	"channel# expected"
32f5a     00          | 	byte	0
32f5b                 | LR__5973
32f5b     63 6F 67 69 
32f5f     6E 69 74 3A 
32f63     20          | 	byte	"coginit: "
32f64     00          | 	byte	0
32f65                 | LR__5974
32f65     53 79 73 74 
32f69     65 6D 20 65 
32f6d     72 72 6F 72 
32f71     20 2D 20    | 	byte	"System error - "
32f74     00          | 	byte	0
32f75                 | LR__5975
32f75     20 69 6E 20 
32f79     6C 69 6E 65 
32f7d     20          | 	byte	" in line "
32f7e     00          | 	byte	0
32f7f                 | LR__5976
32f7f     3A 20       | 	byte	": "
32f81     00          | 	byte	0
32f82                 | LR__5977
32f82     2C 20 66 69 
32f86     6C 65 20 6E 
32f8a     61 6D 65 3A 
32f8e     20          | 	byte	", file name: "
32f8f     00          | 	byte	0
32f90                 | LR__5978
32f90     53 79 73 74 
32f94     65 6D 20 65 
32f98     72 72 6F 72 
32f9c     20 2D 20    | 	byte	"System error - "
32f9f     00          | 	byte	0
32fa0                 | LR__5979
32fa0     20 69 6E 20 
32fa4     6C 69 6E 65 
32fa8     20          | 	byte	" in line "
32fa9     00          | 	byte	0
32faa                 | LR__5980
32faa     3A 20       | 	byte	": "
32fac     00          | 	byte	0
32fad                 | LR__5981
32fad     2C 20 66 69 
32fb1     6C 65 20 6E 
32fb5     61 6D 65 3A 
32fb9     20          | 	byte	", file name: "
32fba     00          | 	byte	0
32fbb                 | LR__5982
32fbb     63 6F 73 3A 
32fbf     20          | 	byte	"cos: "
32fc0     00          | 	byte	0
32fc1                 | LR__5983
32fc1                 | 	byte	
32fc1     00          | 	byte	0
32fc2                 | LR__5984
32fc2                 | 	byte	
32fc2     00          | 	byte	0
32fc3                 | LR__5985
32fc3     2F 73 64 2F 
32fc7     6D 65 64 69 
32fcb     61 2F 68 2F | 	byte	"/sd/media/h/"
32fcf     00          | 	byte	0
32fd0                 | LR__5986
32fd0     53 79 73 74 
32fd4     65 6D 20 65 
32fd8     72 72 6F 72 
32fdc     20          | 	byte	"System error "
32fdd     00          | 	byte	0
32fde                 | LR__5987
32fde     3A 20       | 	byte	": "
32fe0     00          | 	byte	0
32fe1                 | LR__5988
32fe1                 | 	byte	
32fe1     00          | 	byte	0
32fe2                 | LR__5989
32fe2                 | 	byte	
32fe2     00          | 	byte	0
32fe3                 | LR__5990
32fe3     2F 73 64 2F 
32fe7     6D 65 64 69 
32feb     61 2F 73 2F | 	byte	"/sd/media/s/"
32fef     00          | 	byte	0
32ff0                 | LR__5991
32ff0     53 79 73 74 
32ff4     65 6D 20 65 
32ff8     72 72 6F 72 
32ffc     20          | 	byte	"System error "
32ffd     00          | 	byte	0
32ffe                 | LR__5992
32ffe     3A 20       | 	byte	": "
33000     00          | 	byte	0
33001                 | LR__5993
33001     2F          | 	byte	"/"
33002     00          | 	byte	0
33003                 | LR__5994
33003     2F          | 	byte	"/"
33004     00          | 	byte	0
33005                 | LR__5995
33005     2F          | 	byte	"/"
33006     00          | 	byte	0
33007                 | LR__5996
33007     43 61 6E 6E 
3300b     6F 74 20 64 
3300f     65 6C 65 74 
33013     65 20 66 69 
33017     6C 65 20 6F 
3301b     72 20 66 69 
3301f     6C 65 20 64 
33023     6F 65 73 6E 
33027     27 74 20 65 
3302b     78 69 73 74 
3302f     3A 20 73 79 
33033     73 74 65 6D 
33037     20 65 72 72 
3303b     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
3303e     00          | 	byte	0
3303f                 | LR__5997
3303f     43 75 72 72 
33043     65 6E 74 20 
33047     64 69 72 65 
3304b     63 74 6F 72 
3304f     79 3A 20    | 	byte	"Current directory: "
33052     00          | 	byte	0
33053                 | LR__5998
33053                 | 	byte	
33053     00          | 	byte	0
33054                 | LR__5999
33054     2A          | 	byte	"*"
33055     00          | 	byte	0
33056                 | LR__6000
33056                 | 	byte	
33056     00          | 	byte	0
33057                 | LR__6001
33057     5B 64 69 72 
3305b     5D 20       | 	byte	"[dir] "
3305d     00          | 	byte	0
3305e                 | LR__6002
3305e     4D 6F 72 65 
33062     20 74 68 61 
33066     6E 20 31 32 
3306a     38 20 65 6E 
3306e     74 72 69 65 
33072     73 20 66 6F 
33076     75 6E 64 3A 
3307a     20 63 6C 65 
3307e     61 6E 20 79 
33082     6F 75 72 20 
33086     64 69 72 65 
3308a     63 74 6F 72 
3308e     79          | 	byte	"More than 128 entries found: clean your directory"
3308f     00          | 	byte	0
33090                 | LR__6003
33090     2A          | 	byte	"*"
33091     00          | 	byte	0
33092                 | LR__6004
33092                 | 	byte	
33092     00          | 	byte	0
33093                 | LR__6005
33093     4D 6F 72 65 
33097     20 74 68 61 
3309b     6E 20 31 32 
3309f     38 20 65 6E 
330a3     74 72 69 65 
330a7     73 20 66 6F 
330ab     75 6E 64 3A 
330af     20 63 6C 65 
330b3     61 6E 20 79 
330b7     6F 75 72 20 
330bb     64 69 72 65 
330bf     63 74 6F 72 
330c3     79          | 	byte	"More than 128 entries found: clean your directory"
330c4     00          | 	byte	0
330c5                 | LR__6006
330c5     45 72 72 6F 
330c9     72 20       | 	byte	"Error "
330cb     00          | 	byte	0
330cc                 | LR__6007
330cc     3A 20       | 	byte	": "
330ce     00          | 	byte	0
330cf                 | LR__6008
330cf     66 69 6E 64 
330d3     66 69 72 73 
330d7     74 3A 20    | 	byte	"findfirst: "
330da     00          | 	byte	0
330db                 | LR__6009
330db     66 69 6E 64 
330df     66 69 72 73 
330e3     74 3A 20    | 	byte	"findfirst: "
330e6     00          | 	byte	0
330e7                 | LR__6010
330e7     66 69 6E 64 
330eb     66 69 72 73 
330ef     74 3A 20    | 	byte	"findfirst: "
330f2     00          | 	byte	0
330f3                 | LR__6011
330f3                 | 	byte	
330f3     00          | 	byte	0
330f4                 | LR__6012
330f4     66 69 6E 64 
330f8     66 69 72 73 
330fc     74 3A 20    | 	byte	"findfirst: "
330ff     00          | 	byte	0
33100                 | LR__6013
33100                 | 	byte	
33100     00          | 	byte	0
33101                 | LR__6014
33101     64 69 72    | 	byte	"dir"
33104     00          | 	byte	0
33105                 | LR__6015
33105     66 69 6E 64 
33109     6E 65 78 74 
3310d     3A 20       | 	byte	"findnext: "
3310f     00          | 	byte	0
33110                 | LR__6016
33110     67 65 74 63 
33114     6F 6C 6F 72 
33118     20          | 	byte	"getcolor "
33119     00          | 	byte	0
3311a                 | LR__6017
3311a     67 65 74 65 
3311e     6E 76 73 75 
33122     73 74 61 69 
33126     6E 3A 20    | 	byte	"getenvsustain: "
33129     00          | 	byte	0
3312a                 | LR__6018
3312a     67 65 74 70 
3312e     69 78 65 6C 
33132     3A 20       | 	byte	"getpixel: "
33134     00          | 	byte	0
33135                 | LR__6019
33135     67 65 74 72 
33139     65 61 6C 66 
3313d     72 65 71 3A 
33141     20          | 	byte	"getrealfreq: "
33142     00          | 	byte	0
33143                 | LR__6020
33143     68 65 78 24 
33147     3A 20       | 	byte	"hex$: "
33149     00          | 	byte	0
3314a                 | LR__6021
3314a                 | 	byte	
3314a     00          | 	byte	0
3314b                 | LR__6022
3314b     49 6E 20 69 
3314f     6E 70 75 74 
33153     3A 20       | 	byte	"In input: "
33155     00          | 	byte	0
33156                 | LR__6023
33156     2C          | 	byte	","
33157     00          | 	byte	0
33158                 | LR__6024
33158                 | 	byte	
33158     00          | 	byte	0
33159                 | LR__6025
33159                 | 	byte	
33159     00          | 	byte	0
3315a                 | LR__6026
3315a     6C 65 66 74 
3315e     24 3A 20    | 	byte	"left$: "
33161     00          | 	byte	0
33162                 | LR__6027
33162     6C 65 66 74 
33166     24 3A 20    | 	byte	"left$: "
33169     00          | 	byte	0
3316a                 | LR__6028
3316a     6C 65 6E 3A 
3316e     20          | 	byte	"len: "
3316f     00          | 	byte	0
33170                 | LR__6029
33170     6C 65 6E 3A 
33174     20          | 	byte	"len: "
33175     00          | 	byte	0
33176                 | LR__6030
33176                 | 	byte	
33176     00          | 	byte	0
33177                 | LR__6031
33177     2F          | 	byte	"/"
33178     00          | 	byte	0
33179                 | LR__6032
33179     2F          | 	byte	"/"
3317a     00          | 	byte	0
3317b                 | LR__6033
3317b     2E 62 61 73 | 	byte	".bas"
3317f     00          | 	byte	0
33180                 | LR__6034
33180     53 79 73 74 
33184     65 6D 20 65 
33188     72 72 6F 72 
3318c     20          | 	byte	"System error "
3318d     00          | 	byte	0
3318e                 | LR__6035
3318e     3A 20       | 	byte	": "
33190     00          | 	byte	0
33191                 | LR__6036
33191     2E 62 61 73 | 	byte	".bas"
33195     00          | 	byte	0
33196                 | LR__6037
33196     2F          | 	byte	"/"
33197     00          | 	byte	0
33198                 | LR__6038
33198                 | 	byte	
33198     00          | 	byte	0
33199                 | LR__6039
33199     4C 6F 61 64 
3319d     65 64 20    | 	byte	"Loaded "
331a0     00          | 	byte	0
331a1                 | LR__6040
331a1     2F          | 	byte	"/"
331a2     00          | 	byte	0
331a3                 | LR__6041
331a3     6C 6F 67 3A 
331a7     20          | 	byte	"log: "
331a8     00          | 	byte	0
331a9                 | LR__6042
331a9     6D 69 64 24 
331ad     3A 20       | 	byte	"mid$: "
331af     00          | 	byte	0
331b0                 | LR__6043
331b0     6D 69 64 24 
331b4     3A 20       | 	byte	"mid$: "
331b6     00          | 	byte	0
331b7                 | LR__6044
331b7     43 61 6E 6E 
331bb     6F 74 20 63 
331bf     72 65 61 74 
331c3     65 20 61 20 
331c7     64 69 72 65 
331cb     63 74 6F 72 
331cf     79 3A 20 73 
331d3     79 73 74 65 
331d7     6D 20 65 72 
331db     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
331df     00          | 	byte	0
331e0                 | LR__6045
331e0     20 42 41 53 
331e4     49 43 20 62 
331e8     79 74 65 73 
331ec     20 66 72 65 
331f0     65          | 	byte	" BASIC bytes free"
331f1     00          | 	byte	0
331f2                 | LR__6046
331f2                 | 	byte	
331f2     00          | 	byte	0
331f3                 | LR__6047
331f3                 | 	byte	
331f3     00          | 	byte	0
331f4                 | LR__6048
331f4                 | 	byte	
331f4     00          | 	byte	0
331f5                 | LR__6049
331f5     6E 6F 6E 61 
331f9     6D 65 2E 62 
331fd     61 73       | 	byte	"noname.bas"
331ff     00          | 	byte	0
33200                 | LR__6050
33200     66 69 6C 65 
33204     6E 61 6D 65 
33208     20 65 78 70 
3320c     65 63 74 65 
33210     64          | 	byte	"filename expected"
33211     00          | 	byte	0
33212                 | LR__6051
33212     72 65 61 64 | 	byte	"read"
33216     00          | 	byte	0
33217                 | LR__6052
33217     77 72 69 74 
3321b     65          | 	byte	"write"
3321c     00          | 	byte	0
3321d                 | LR__6053
3321d     61 70 70 65 
33221     6E 64       | 	byte	"append"
33223     00          | 	byte	0
33224                 | LR__6054
33224     63 68 61 6E 
33228     6E 65 6C 23 
3322c     20 65 78 70 
33230     65 63 74 65 
33234     64          | 	byte	"channel# expected"
33235     00          | 	byte	0
33236                 | LR__6055
33236     4F 70 65 6E 
3323a     3A 20 69 6E 
3323e     76 61 6C 69 
33242     64 20 6D 6F 
33246     64 65       | 	byte	"Open: invalid mode"
33248     00          | 	byte	0
33249                 | LR__6056
33249     70 61 64 72 
3324d     78 3A 20    | 	byte	"padrx: "
33250     00          | 	byte	0
33251                 | LR__6057
33251     70 61 64 72 
33255     79 3A 20    | 	byte	"padry: "
33258     00          | 	byte	0
33259                 | LR__6058
33259     70 61 64 72 
3325d     7A 3A 20    | 	byte	"padrz: "
33260     00          | 	byte	0
33261                 | LR__6059
33261     70 61 64 73 
33265     3A 20       | 	byte	"pads: "
33267     00          | 	byte	0
33268                 | LR__6060
33268     70 61 64 77 
3326c     3A 20       | 	byte	"padw: "
3326e     00          | 	byte	0
3326f                 | LR__6061
3326f     70 61 64 78 
33273     3A 20       | 	byte	"padx: "
33275     00          | 	byte	0
33276                 | LR__6062
33276     70 61 64 79 
3327a     3A 20       | 	byte	"pady: "
3327c     00          | 	byte	0
3327d                 | LR__6063
3327d     70 61 64 7A 
33281     3A 20       | 	byte	"padz: "
33283     00          | 	byte	0
33284                 | LR__6064
33284     50 72 69 6E 
33288     74 20 74 6F 
3328c     20 63 68 61 
33290     6E 6E 65 6C 
33294     20 28 6E 6F 
33298     74 20 79 65 
3329c     74 20 69 6D 
332a0     70 6C 65 6D 
332a4     65 6E 74 65 
332a8     64 29       | 	byte	"Print to channel (not yet implemented)"
332aa     00          | 	byte	0
332ab                 | LR__6065
332ab                 | 	byte	
332ab     00          | 	byte	0
332ac                 | LR__6066
332ac     64 61 74 61 | 	byte	"data"
332b0     00          | 	byte	0
332b1                 | LR__6067
332b1                 | 	byte	
332b1     00          | 	byte	0
332b2                 | LR__6068
332b2     49 6E 20 72 
332b6     65 61 64 3A 
332ba     20          | 	byte	"In read: "
332bb     00          | 	byte	0
332bc                 | LR__6069
332bc                 | 	byte	
332bc     00          | 	byte	0
332bd                 | LR__6070
332bd                 | 	byte	
332bd     00          | 	byte	0
332be                 | LR__6071
332be     27          | 	byte	"'"
332bf     00          | 	byte	0
332c0                 | LR__6072
332c0     2C          | 	byte	","
332c1     00          | 	byte	0
332c2                 | LR__6073
332c2                 | 	byte	
332c2     00          | 	byte	0
332c3                 | LR__6074
332c3                 | 	byte	
332c3     00          | 	byte	0
332c4                 | LR__6075
332c4                 | 	byte	
332c4     00          | 	byte	0
332c5                 | LR__6076
332c5                 | 	byte	
332c5     00          | 	byte	0
332c6                 | LR__6077
332c6                 | 	byte	
332c6     00          | 	byte	0
332c7                 | LR__6078
332c7     72 69 67 68 
332cb     74 24 3A 20 | 	byte	"right$: "
332cf     00          | 	byte	0
332d0                 | LR__6079
332d0     72 69 67 68 
332d4     74 24 3A 20 | 	byte	"right$: "
332d8     00          | 	byte	0
332d9                 | LR__6080
332d9     72 6E 64 3A 
332dd     20          | 	byte	"rnd: "
332de     00          | 	byte	0
332df                 | LR__6081
332df     72 6E 64 3A 
332e3     20          | 	byte	"rnd: "
332e4     00          | 	byte	0
332e5                 | LR__6082
332e5                 | 	byte	
332e5     00          | 	byte	0
332e6                 | LR__6083
332e6     53 74 6F 70 
332ea     70 65 64 20 
332ee     61 74 20 6C 
332f2     69 6E 65 20 | 	byte	"Stopped at line "
332f6     00          | 	byte	0
332f7                 | LR__6084
332f7                 | 	byte	
332f7     00          | 	byte	0
332f8                 | LR__6085
332f8     2F          | 	byte	"/"
332f9     00          | 	byte	0
332fa                 | LR__6086
332fa                 | 	byte	
332fa     00          | 	byte	0
332fb                 | LR__6087
332fb     53 61 76 65 
332ff     64 20 61 73 
33303     20          | 	byte	"Saved as "
33304     00          | 	byte	0
33305                 | LR__6088
33305     2F          | 	byte	"/"
33306     00          | 	byte	0
33307                 | LR__6089
33307     73 65 74 63 
3330b     6F 6C 6F 72 
3330f     3A 20       | 	byte	"setcolor: "
33311     00          | 	byte	0
33312                 | LR__6090
33312     73 69 6E 3A 
33316     20          | 	byte	"sin: "
33317     00          | 	byte	0
33318                 | LR__6091
33318     73 71 72 3A 
3331c     20          | 	byte	"sqr: "
3331d     00          | 	byte	0
3331e                 | LR__6092
3331e     73 74 69 63 
33322     6B 3A 20    | 	byte	"stick: "
33325     00          | 	byte	0
33326                 | LR__6093
33326     73 74 72 24 
3332a     3A 20       | 	byte	"str$: "
3332c     00          | 	byte	0
3332d                 | LR__6094
3332d     73 74 72 69 
33331     67 3A 20    | 	byte	"strig: "
33334     00          | 	byte	0
33335                 | LR__6095
33335     74 61 6E 3A 
33339     20          | 	byte	"tan: "
3333a     00          | 	byte	0
3333b                 | LR__6096
3333b     76 61 6C 3A 
3333f     20          | 	byte	"val: "
33340     00          | 	byte	0
33341                 | LR__6097
33341     76 61 6C 3A 
33345     20          | 	byte	"val: "
33346     00          | 	byte	0
33347                 | LR__6098
33347     24          | 	byte	"$"
33348     00          | 	byte	0
33349                 | LR__6099
33349     26 68       | 	byte	"&h"
3334b     00          | 	byte	0
3334c                 | LR__6100
3334c     25          | 	byte	"%"
3334d     00          | 	byte	0
3334e                 | LR__6101
3334e     26 62       | 	byte	"&b"
33350     00          | 	byte	0
33351                 | LR__6102
33351                 | 	byte	
33351     00          | 	byte	0
33352                 | LR__6103
33352     45 78 70 65 
33356     63 74 65 64 
3335a     20 6E 75 6D 
3335e     62 65 72 2C 
33362     20 67 6F 74 
33366     20 73 6F 6D 
3336a     65 74 68 69 
3336e     6E 67 20 65 
33372     6C 73 65    | 	byte	"Expected number, got something else"
33375     00          | 	byte	0
33376                 | LR__6104
33376     43 61 6E 6E 
3337a     6F 74 20 61 
3337e     64 64 20 61 
33382     20 6E 75 6D 
33386     62 65 72 20 
3338a     74 6F 20 61 
3338e     20 73 74 72 
33392     69 6E 67    | 	byte	"Cannot add a number to a string"
33395     00          | 	byte	0
33396                 | LR__6105
33396     43 61 6E 6E 
3339a     6F 74 20 73 
3339e     75 62 73 74 
333a2     72 61 63 74 
333a6     20 73 74 72 
333aa     69 6E 67 73 | 	byte	"Cannot substract strings"
333ae     00          | 	byte	0
333af                 | LR__6106
333af     55 6E 6B 6E 
333b3     6F 77 6E 20 
333b7     65 72 72 6F 
333bb     72 20 77 68 
333bf     69 6C 65 20 
333c3     61 64 64 69 
333c7     6E 67       | 	byte	"Unknown error while adding"
333c9     00          | 	byte	0
333ca                 | LR__6107
333ca     55 6E 6B 6E 
333ce     6F 77 6E 20 
333d2     65 72 72 6F 
333d6     72 20 77 68 
333da     69 6C 65 20 
333de     73 75 62 73 
333e2     74 72 61 63 
333e6     74 69 6E 67 | 	byte	"Unknown error while substracting"
333ea     00          | 	byte	0
333eb                 | LR__6108
333eb     43 61 6E 6E 
333ef     6F 74 20 64 
333f3     6F 20 6C 6F 
333f7     67 69 63 20 
333fb     6F 70 65 72 
333ff     61 74 69 6F 
33403     6E 20 6F 6E 
33407     20 73 74 72 
3340b     69 6E 67 20 
3340f     6F 72 20 66 
33413     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
33417     00          | 	byte	0
33418                 | LR__6109
33418     55 6E 6B 6E 
3341c     6F 77 6E 20 
33420     65 72 72 6F 
33424     72 20 77 68 
33428     69 6C 65 20 
3342c     64 6F 69 6E 
33430     67 20 6C 6F 
33434     67 69 63 20 
33438     6F 70 65 72 
3343c     61 74 69 6F 
33440     6E          | 	byte	"Unknown error while doing logic operation"
33441     00          | 	byte	0
33442                 | LR__6110
33442     43 61 6E 6E 
33446     6F 74 20 6D 
3344a     75 6C 74 69 
3344e     70 6C 79 20 
33452     73 74 72 69 
33456     6E 67 73    | 	byte	"Cannot multiply strings"
33459     00          | 	byte	0
3345a                 | LR__6111
3345a     55 6E 6B 6E 
3345e     6F 77 6E 20 
33462     65 72 72 6F 
33466     72 20 77 68 
3346a     69 6C 65 20 
3346e     6D 75 6C 74 
33472     69 70 6C 79 
33476     69 6E 67    | 	byte	"Unknown error while multiplying"
33479     00          | 	byte	0
3347a                 | LR__6112
3347a     43 61 6E 6E 
3347e     6F 74 20 64 
33482     69 76 69 64 
33486     65 20 73 74 
3348a     72 69 6E 67 
3348e     73          | 	byte	"Cannot divide strings"
3348f     00          | 	byte	0
33490                 | LR__6113
33490     55 6E 6B 6E 
33494     6F 77 6E 20 
33498     65 72 72 6F 
3349c     72 20 77 68 
334a0     69 6C 65 20 
334a4     64 69 76 69 
334a8     64 69 6E 67 | 	byte	"Unknown error while dividing"
334ac     00          | 	byte	0
334ad                 | LR__6114
334ad     43 61 6E 6E 
334b1     6F 74 20 63 
334b5     6F 6D 70 75 
334b9     74 65 20 61 
334bd     20 70 6F 77 
334c1     65 72 20 6F 
334c5     66 20 61 20 
334c9     73 74 72 69 
334cd     6E 67       | 	byte	"Cannot compute a power of a string"
334cf     00          | 	byte	0
334d0                 | LR__6115
334d0     55 6E 6B 6E 
334d4     6F 77 6E 20 
334d8     65 72 72 6F 
334dc     72 20 77 68 
334e0     69 6C 65 20 
334e4     63 6F 6D 70 
334e8     75 74 69 6E 
334ec     67 20 61 20 
334f0     70 6F 77 65 
334f4     72          | 	byte	"Unknown error while computing a power"
334f5     00          | 	byte	0
334f6                 | LR__6116
334f6     52 69 67 68 
334fa     74 20 70 61 
334fe     72 65 6E 74 
33502     68 65 73 69 
33506     73 20 65 78 
3350a     70 65 63 74 
3350e     65 64       | 	byte	"Right parenthesis expected"
33510     00          | 	byte	0
33511                 | LR__6117
33511     45 78 70 65 
33515     63 74 65 64 
33519     20 73 74 72 
3351d     69 6E 67    | 	byte	"Expected string"
33520     00          | 	byte	0
33521                 | LR__6118
33521     45 78 70 65 
33525     63 74 65 64 
33529     20 66 6C 6F 
3352d     61 74       | 	byte	"Expected float"
3352f     00          | 	byte	0
33530                 | LR__6119
33530     45 78 70 65 
33534     63 74 65 64 
33538     20 75 6E 73 
3353c     69 67 6E 65 
33540     64 20 69 6E 
33544     74 65 67 65 
33548     72          | 	byte	"Expected unsigned integer"
33549     00          | 	byte	0
3354a                 | LR__6120
3354a     45 78 70 65 
3354e     63 74 65 64 
33552     20 69 6E 74 
33556     65 67 65 72 | 	byte	"Expected integer"
3355a     00          | 	byte	0
3355b                 | LR__6121
3355b     4E 6F 20 6D 
3355f     6F 72 65 20 
33563     76 61 72 69 
33567     61 62 6C 65 
3356b     20 73 6C 6F 
3356f     74 73       | 	byte	"No more variable slots"
33571     00          | 	byte	0
33572                 | LR__6122
33572     56 61 72 69 
33576     61 62 6C 65 
3357a     20 6E 6F 74 
3357e     20 66 6F 75 
33582     6E 64       | 	byte	"Variable not found"
33584     00          | 	byte	0
33585                 | LR__6123
33585     43 6F 6D 6D 
33589     61 20 65 78 
3358d     70 65 63 74 
33591     65 64       | 	byte	"Comma expected"
33593     00          | 	byte	0
33594                 | LR__6124
33594     43 6F 6D 6D 
33598     61 20 6F 72 
3359c     20 73 65 6D 
335a0     69 63 6F 6C 
335a4     6F 6E 20 65 
335a8     78 70 65 63 
335ac     74 65 64    | 	byte	"Comma or semicolon expected"
335af     00          | 	byte	0
335b0                 | LR__6125
335b0     55 6E 6B 6E 
335b4     6F 77 6E 20 
335b8     63 6F 6D 6D 
335bc     61 6E 64    | 	byte	"Unknown command"
335bf     00          | 	byte	0
335c0                 | LR__6126
335c0     53 74 61 63 
335c4     6B 20 75 6E 
335c8     64 65 72 66 
335cc     6C 6F 77    | 	byte	"Stack underflow"
335cf     00          | 	byte	0
335d0                 | LR__6127
335d0     43 61 6E 6E 
335d4     6F 74 20 65 
335d8     78 65 63 75 
335dc     74 65 20 67 
335e0     6F 74 6F 20 
335e4     6F 72 20 67 
335e8     6F 73 75 62 
335ec     20 69 6E 20 
335f0     74 68 65 20 
335f4     69 6D 6D 65 
335f8     64 69 61 74 
335fc     65 20 6D 6F 
33600     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
33602     00          | 	byte	0
33603                 | LR__6128
33603     43 61 6E 6E 
33607     6F 74 20 6C 
3360b     6F 61 64 20 
3360f     66 72 6F 6D 
33613     20 74 68 69 
33617     73 20 66 69 
3361b     6C 65       | 	byte	"Cannot load from this file"
3361d     00          | 	byte	0
3361e                 | LR__6129
3361e     54 68 65 20 
33622     70 72 6F 67 
33626     72 61 6D 20 
3362a     69 73 20 65 
3362e     6D 70 74 79 | 	byte	"The program is empty"
33632     00          | 	byte	0
33633                 | LR__6130
33633     49 66 20 61 
33637     66 74 65 72 
3363b     20 69 66    | 	byte	"If after if"
3363e     00          | 	byte	0
3363f                 | LR__6131
3363f     45 6D 70 74 
33643     79 20 65 78 
33647     70 72 65 73 
3364b     73 69 6F 6E | 	byte	"Empty expression"
3364f     00          | 	byte	0
33650                 | LR__6132
33650     53 74 72 69 
33654     6E 67 20 65 
33658     78 70 65 63 
3365c     74 65 64    | 	byte	"String expected"
3365f     00          | 	byte	0
33660                 | LR__6133
33660     49 6E 74 65 
33664     72 70 72 65 
33668     74 65 72 20 
3366c     69 6E 74 65 
33670     72 6E 61 6C 
33674     20 65 72 72 
33678     6F 72       | 	byte	"Interpreter internal error"
3367a     00          | 	byte	0
3367b                 | LR__6134
3367b     45 78 70 65 
3367f     63 74 65 64 
33683     20 61 73 73 
33687     69 67 6E    | 	byte	"Expected assign"
3368a     00          | 	byte	0
3368b                 | LR__6135
3368b     45 78 70 65 
3368f     63 74 65 64 
33693     20 27 74 6F 
33697     27          | 	byte	"Expected 'to'"
33698     00          | 	byte	0
33699                 | LR__6136
33699     45 78 70 65 
3369d     63 74 65 64 
336a1     20 69 6E 74 
336a5     65 67 65 72 
336a9     20 76 61 72 
336ad     69 61 62 6C 
336b1     65          | 	byte	"Expected integer variable"
336b2     00          | 	byte	0
336b3                 | LR__6137
336b3     55 6E 69 6E 
336b7     69 74 69 61 
336bb     6C 69 7A 65 
336bf     64 20 76 61 
336c3     72 69 61 62 
336c7     6C 65 20 69 
336cb     6E 20 27 6E 
336cf     65 78 74 27 
336d3     2C 20 75 73 
336d7     65 20 27 66 
336db     6F 72 27 20 
336df     62 65 66 6F 
336e3     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
336e5     00          | 	byte	0
336e6                 | LR__6138
336e6     4E 6F 20 6D 
336ea     6F 72 65 20 
336ee     73 6C 6F 74 
336f2     73 20 66 6F 
336f6     72 20 27 66 
336fa     6F 72 27    | 	byte	"No more slots for 'for'"
336fd     00          | 	byte	0
336fe                 | LR__6139
336fe     27 4E 65 78 
33702     74 27 20 64 
33706     6F 65 73 6E 
3370a     27 74 20 6D 
3370e     61 74 63 68 
33712     20 27 66 6F 
33716     72 27       | 	byte	"'Next' doesn't match 'for'"
33718     00          | 	byte	0
33719                 | LR__6140
33719     27 47 6F 74 
3371d     6F 27 20 74 
33721     61 72 67 65 
33725     74 20 6C 69 
33729     6E 65 20 6E 
3372d     6F 74 20 66 
33731     6F 75 6E 64 | 	byte	"'Goto' target line not found"
33735     00          | 	byte	0
33736                 | LR__6141
33736     42 61 64 20 
3373a     6E 75 6D 62 
3373e     65 72 20 6F 
33742     66 20 70 61 
33746     72 61 6D 65 
3374a     74 65 72 73 | 	byte	"Bad number of parameters"
3374e     00          | 	byte	0
3374f                 | LR__6142
3374f     46 75 6E 63 
33753     74 69 6F 6E 
33757     20 75 6E 64 
3375b     65 66 69 6E 
3375f     65 64 20 66 
33763     6F 72 20 73 
33767     74 72 69 6E 
3376b     67 73       | 	byte	"Function undefined for strings"
3376d     00          | 	byte	0
3376e                 | LR__6143
3376e     42 61 64 20 
33772     70 61 72 61 
33776     6D 65 74 65 
3377a     72          | 	byte	"Bad parameter"
3377b     00          | 	byte	0
3377c                 | LR__6144
3377c     43 61 6E 6E 
33780     6F 74 20 64 
33784     65 63 6C 61 
33788     72 65 20 61 
3378c     6E 20 61 72 
33790     72 61 79 3A 
33794     20 74 68 65 
33798     20 76 61 72 
3379c     69 61 62 6C 
337a0     65 20 65 78 
337a4     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
337a8     00          | 	byte	0
337a9                 | LR__6145
337a9     45 78 70 65 
337ad     63 74 65 64 
337b1     20 27 28 27 | 	byte	"Expected '('"
337b5     00          | 	byte	0
337b6                 | LR__6146
337b6     45 78 70 65 
337ba     63 74 65 64 
337be     20 27 29 27 
337c2     20 6F 72 20 
337c6     27 2C 27    | 	byte	"Expected ')' or ','"
337c9     00          | 	byte	0
337ca                 | LR__6147
337ca     4E 6F 20 6D 
337ce     6F 72 65 20 
337d2     74 68 61 6E 
337d6     20 33 20 64 
337da     69 6D 65 6E 
337de     73 69 6F 6E 
337e2     73 20 73 75 
337e6     70 70 6F 72 
337ea     74 65 64    | 	byte	"No more than 3 dimensions supported"
337ed     00          | 	byte	0
337ee                 | LR__6148
337ee     56 61 72 69 
337f2     61 62 6C 65 
337f6     20 6E 61 6D 
337fa     65 20 65 78 
337fe     70 65 63 74 
33802     65 64       | 	byte	"Variable name expected"
33804     00          | 	byte	0
33805                 | LR__6149
33805     54 79 70 65 
33809     20 6E 61 6D 
3380d     65 20 65 78 
33811     70 65 63 74 
33815     65 64       | 	byte	"Type name expected"
33817     00          | 	byte	0
33818                 | LR__6150
33818     54 79 70 65 
3381c     20 6E 6F 74 
33820     20 73 75 70 
33824     70 6F 72 74 
33828     65 64 20 79 
3382c     65 74       | 	byte	"Type not supported yet"
3382e     00          | 	byte	0
3382f                 | LR__6151
3382f     41 72 72 61 
33833     79 20 69 6E 
33837     64 65 78 20 
3383b     6F 75 74 20 
3383f     6F 66 20 72 
33843     61 6E 67 65 | 	byte	"Array index out of range"
33847     00          | 	byte	0
33848                 | LR__6152
33848     42 61 64 20 
3384c     74 79 70 65 
33850     20 77 68 69 
33854     6C 65 20 61 
33858     73 73 69 67 
3385c     6E 69 6E 67 
33860     20 74 6F 20 
33864     61 72 72 61 
33868     79          | 	byte	"Bad type while assigning to array"
33869     00          | 	byte	0
3386a                 | LR__6153
3386a     54 6F 6F 20 
3386e     6D 61 6E 79 
33872     20 76 61 72 
33876     69 61 62 6C 
3387a     65 73       | 	byte	"Too many variables"
3387c     00          | 	byte	0
3387d                 | LR__6154
3387d     27 54 68 65 
33881     6E 27 20 65 
33885     78 70 65 63 
33889     74 65 64    | 	byte	"'Then' expected"
3388c     00          | 	byte	0
3388d                 | LR__6155
3388d     44 69 72 65 
33891     63 74 6F 72 
33895     79 20 64 6F 
33899     65 73 6E 27 
3389d     74 20 65 78 
338a1     69 73 74    | 	byte	"Directory doesn't exist"
338a4     00          | 	byte	0
338a5                 | LR__6156
338a5     55 6E 65 78 
338a9     70 65 63 74 
338ad     65 64 20 65 
338b1     6E 64 20 6F 
338b5     66 20 6C 69 
338b9     6E 65       | 	byte	"Unexpected end of line"
338bb     00          | 	byte	0
338bc                 | LR__6157
338bc     4E 6F 20 6D 
338c0     6F 72 65 20 
338c4     64 61 74 61 | 	byte	"No more data"
338c8     00          | 	byte	0
338c9                 | LR__6158
338c9     45 72 72 6F 
338cd     72 20       | 	byte	"Error "
338cf     00          | 	byte	0
338d0                 | LR__6159
338d0     20 2D 20    | 	byte	" - "
338d3     00          | 	byte	0
338d4                 | LR__6160
338d4     20 69 6E 20 
338d8     6C 69 6E 65 
338dc     20          | 	byte	" in line "
338dd     00          | 	byte	0
338de                 | LR__6161
338de                 | 	byte	
338de     00          | 	byte	0
338df                 | LR__6162
338df     2F 73 64    | 	byte	"/sd"
338e2     00          | 	byte	0
338e3                 | LR__6163
338e3     2F 73 64 2F 
338e7     62 61 73    | 	byte	"/sd/bas"
338ea     00          | 	byte	0
338eb                 | LR__6164
338eb     2F 73 64 2F 
338ef     62 61 73    | 	byte	"/sd/bas"
338f2     00          | 	byte	0
338f3                 | LR__6165
338f3     20 42 41 53 
338f7     49 43 20 62 
338fb     79 74 65 73 
338ff     20 66 72 65 
33903     65          | 	byte	" BASIC bytes free"
33904     00          | 	byte	0
33905                 | LR__6166
33905     52 65 61 64 
33909     79          | 	byte	"Ready"
3390a     00          | 	byte	0
3390b                 | LR__6167
3390b     6E 6F 6E 61 
3390f     6D 65 2E 62 
33913     61 73       | 	byte	"noname.bas"
33915     00          | 	byte	0
33916                 | LR__6168
33916     2F 73 64 2F 
3391a     62 61 73 2F 
3391e     61 75 74 6F 
33922     72 75 6E 2E 
33926     62 61 73    | 	byte	"/sd/bas/autorun.bas"
33929     00          | 	byte	0
3392a                 | LR__6169
3392a     72 75 6E 20 
3392e     61 75 74 6F 
33932     72 75 6E 2E 
33936     62 61 73    | 	byte	"run autorun.bas"
33939     00          | 	byte	0
3393a                 | LR__6170
3393a                 | 	byte	
3393a     00          | 	byte	0
3393b     00          | 	alignl
3393c                 | _dat_
3393c     00 00 00 00 
33940     00 00 00 00 
33944     00 00 00 00 
33948     00 00 00 00 | 	byte	$00[16]
3394c     61 41 17 0E 
33950     62 42 00 00 
33954     63 43 19 10 
33958     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
3395c     65 45 18 0F 
33960     66 46 00 00 
33964     67 47 00 00 
33968     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
3396c     69 49 00 00 
33970     6A 4A 00 00 
33974     6B 4B 00 00 
33978     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
3397c     6D 4D 00 00 
33980     6E 4E 1A 11 
33984     6F 4F 1E 15 
33988     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
3398c     71 51 00 00 
33990     72 52 00 00 
33994     73 53 1B 12 
33998     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
3399c     75 55 00 00 
339a0     76 56 00 00 
339a4     77 57 00 00 
339a8     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
339ac     79 59 00 00 
339b0     7A 5A 1D 14 
339b4     31 21 04 00 
339b8     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
339bc     33 23 06 00 
339c0     34 24 07 00 
339c4     35 25 08 00 
339c8     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
339cc     37 26 0A 00 
339d0     38 2A 0B 00 
339d4     39 28 0C 00 
339d8     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
339dc     8D 8D 00 00 
339e0     9B 9B 00 00 
339e4     88 88 00 00 
339e8     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
339ec     20 20 00 00 
339f0     2D 5F 00 00 
339f4     3D 2B 00 00 
339f8     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
339fc     5D 7D 00 00 
33a00     5C 7C 00 00 
33a04     23 7E 00 00 
33a08     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
33a0c     27 22 00 00 
33a10     60 7E 03 00 
33a14     2C 3C 00 00 
33a18     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
33a1c     2F 3F 00 00 
33a20     B9 B9 00 00 
33a24     BA 00 00 00 
33a28     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
33a2c     BC 00 00 00 
33a30     BD 00 00 00 
33a34     BE 00 00 00 
33a38     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
33a3c     C0 00 00 00 
33a40     C1 00 00 00 
33a44     C2 00 00 00 
33a48     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
33a4c     C4 00 00 00 
33a50     C5 00 00 00 
33a54     C6 00 00 00 
33a58     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
33a5c     C8 00 00 00 
33a60     C9 00 00 00 
33a64     CA 00 00 00 
33a68     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
33a6c     7F 7F 00 00 
33a70     CC 00 00 00 
33a74     CD 00 00 00 
33a78     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
33a7c     CF 00 00 00 
33a80     D0 00 00 00 
33a84     D1 00 00 00 
33a88     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
33a8c     2F 2F 00 00 
33a90     2A 2A 00 00 
33a94     2D 2D 00 00 
33a98     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
33a9c     8D 8D 00 00 
33aa0     31 31 00 00 
33aa4     32 32 00 00 
33aa8     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
33aac     34 34 00 00 
33ab0     35 35 00 00 
33ab4     36 36 00 00 
33ab8     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
33abc     38 38 00 00 
33ac0     39 39 00 00 
33ac4     30 30 00 00 
33ac8     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
33acc     5C 7C 00 00 
33ad0     00 00 00 00 
33ad4     00 00 00 00 
33ad8     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
33adc     00 00 00 00 
      ...             
33b34     00 00 00 00 
33b38     00 00 00 00 | 	byte	$00[96]
33b3c     2B 00 A6 F2 
33b40     24 A7 09 80 
33b44     5B 88 4D 89 
33b48     80 88 A5 88 | atari_spl file "atari.spl"
33b4c     6D 88 B8 88 
33b50     80 88 CB 88 
33b54     92 88 A5 88 
33b58     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
33b5c     A5 88 CA 88 
33b60     A6 88 DD 88 
33b64     B8 88 AB 89 
33b68     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
33b6c     C8 AD C6 F1 
33b70     91 06 B6 FF 
33b74     13 00 4A 00 
33b78     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
33b7c     5D 00 5E 00 
33b80     5D 00 5E 00 
33b84     5E 00 5D 00 
33b88     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
33b8c     38 00 83 00 
33b90     25 00 83 00 
33b94     C3 FE D1 04 
33b98     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
33b9c     48 88 38 85 
33ba0     41 8A CB 88 
33ba4     28 89 B8 88 
33ba8     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
33bac     15 89 03 89 
33bb0     02 89 15 89 
33bb4     16 89 15 89 
33bb8     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
33bbc     15 89 3A 89 
33bc0     72 89 E3 89 
33bc4     52 83 AD 97 
33bc8     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
33bcc     0C 02 B6 FF 
33bd0     E1 00 A8 00 
33bd4     F3 00 A8 00 
33bd8     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
33bdc     CE 00 CD 00 
33be0     CD 00 BA 00 
33be4     E1 00 BB 00 
33be8     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
33bec     DF 00 C9 FF 
33bf0     E6 01 B6 06 
33bf4     EE DD 8D 98 
33bf8     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
33bfc     97 89 73 89 
33c00     3B 89 60 89 
33c04     60 89 60 89 
33c08     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
33c0c     73 89 72 89 
33c10     85 89 73 89 
33c14     AA 89 60 89 
33c18     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
33c1c     E8 8A 18 86 
33c20     92 88 A5 C2 
33c24     E0 00 C3 05 
33c28     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
33c2c     F2 00 64 01 
33c30     06 01 3E 01 
33c34     2B 01 2B 01 
33c38     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
33c3c     2B 01 2A 01 
33c40     2B 01 2B 01 
33c44     2B 01 18 01 
33c48     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
33c4c     39 07 61 F3 
33c50     C0 AF 37 85 
33c54     0F 88 8B 8A 
33c58     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
33c5c     AB 89 D0 89 
33c60     AB 89 D0 89 
33c64     D0 89 CF 89 
33c68     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
33c6c     D0 89 F5 89 
33c70     BD 89 08 8A 
33c74     CF 89 E8 8A 
33c78     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
33c7c     53 B3 0D F8 
33c80     F4 07 38 00 
33c84     63 01 63 01 
33c88     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
33c8c     88 01 88 01 
33c90     76 01 88 01 
33c94     88 01 89 01 
33c98     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
33c9c     75 01 AE 01 
33ca0     76 01 88 01 
33ca4     4A 00 46 06 
33ca8     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
33cac     08 8A 9A 86 
33cb0     33 8B 08 8A 
33cb4     2D 8A F5 89 
33cb8     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
33cbc     2D 8A 2D 8A 
33cc0     2E 8A 1B 8A 
33cc4     40 8A 2D 8A 
33cc8     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
33ccc     2E 8A 79 8A 
33cd0     66 8A C8 8B 
33cd4     72 82 2B 97 
33cd8     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
33cdc     1D 02 05 01 
33ce0     F8 01 C0 01 
33ce4     0B 02 C0 01 
33ce8     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
33cec     F9 01 D3 01 
33cf0     F8 01 D3 01 
33cf4     F8 01 D2 01 
33cf8     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
33cfc     E6 01 2B 01 
33d00     8E 02 5F 07 
33d04     F7 E2 ED 9C 
33d08     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
33d0c     E8 8A 78 8A 
33d10     78 8A 65 8A 
33d14     8B 8A 78 8A 
33d18     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
33d1c     8B 8A 9D 8A 
33d20     9D 8A 8B 8A 
33d24     C2 8A 78 8A 
33d28     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
33d2c     70 8C 18 86 
33d30     8B 8A 23 C9 
33d34     CB 03 C4 05 
33d38     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
33d3c     0B 02 7B 02 
33d40     1E 02 55 02 
33d44     30 02 43 02 
33d48     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
33d4c     43 02 44 02 
33d50     43 02 30 02 
33d54     68 02 31 02 
33d58     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
33d5c     07 08 3F F7 
33d60     73 B2 13 85 
33d64     15 89 ED 8B 
33d68     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
33d6c     B0 8A FB 8A 
33d70     D5 8A FA 8A 
33d74     E8 8A FB 8A 
33d78     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
33d7c     E8 8A 21 8B 
33d80     E7 8A 33 8B 
33d84     E8 8A 26 8C 
33d88     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
33d8c     8D B0 27 F6 
33d90     9C 08 AD 01 
33d94     7B 02 8D 02 
33d98     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
33d9c     A1 02 A0 02 
33da0     A1 02 A0 02 
33da4     A0 02 A0 02 
33da8     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
33dac     7B 02 D8 02 
33db0     7B 02 C6 02 
33db4     3E 01 C3 05 
33db8     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
33dbc     00 8C 2A 86 
33dc0     E0 8C FA 8A 
33dc4     6A 8B FB 8A 
33dc8     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
33dcc     45 8B 45 8B 
33dd0     45 8B 6B 8B 
33dd4     46 8B 59 8B 
33dd8     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
33ddc     6B 8B 6B 8B 
33de0     6B 8B 6B 8B 
33de4     7D 8B 7D 8B 
33de8     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
33dec     90 8B 91 8B 
33df0     90 8B 90 8B 
33df4     A3 8B A3 8B 
33df8     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
33dfc     B5 8B B6 8B 
33e00     B5 8B B5 8B 
33e04     B6 8B C8 8B 
33e08     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
33e0c     C8 8B DA 8B 
33e10     DB 8B DB 8B 
33e14     DB 8B DC 8B 
33e18     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
33e1c     EE 8B EE 8B 
33e20     00 8C 01 8C 
33e24     00 8C 01 8C 
33e28     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
33e2c     12 8C 13 8C 
33e30     13 8C 26 8C 
33e34     26 8C 26 8C 
33e38     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
33e3c     38 8C 38 8C 
33e40     38 8C 38 8C 
33e44     4B 8C 4B 8C 
33e48     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
33e4c     5E 8C 5E 8C 
33e50     5E 8C 5E 8C 
33e54     70 8C 70 8C 
33e58     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
33e5c     70 8C 83 8C 
33e60     83 8C 83 8C 
33e64     83 8C 96 8C 
33e68     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
33e6c     95 8C A9 8C 
33e70     A9 8C A8 8C 
33e74     A8 8C A8 8C 
33e78     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
33e7c     BB 8C BB 8C 
33e80     BB 8C CE 8C 
33e84     CE 8C CE 8C 
33e88     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
33e8c     E0 8C E1 8C 
33e90     E1 8C E0 8C 
33e94     F4 8C F2 8C 
33e98     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
33e9c     05 8D 05 8D 
33ea0     06 8D 06 8D 
33ea4     19 8D 19 8D 
33ea8     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
33eac     18 8D 2B 8D 
33eb0     2B 8D 2B 8D 
33eb4     2A 8D 3E 8D 
33eb8     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
33ebc     3E 8D 51 8D 
33ec0     50 8D 50 8D 
33ec4     50 8D 51 8D 
33ec8     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
33ecc     63 8D 64 8D 
33ed0     76 8D 75 8D 
33ed4     75 8D 76 8D 
33ed8     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
33edc     88 8D 88 8D 
33ee0     89 8D 9B 8D 
33ee4     9A 8D 9B 8D 
33ee8     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
33eec     AD 8D AE 8D 
33ef0     AD 8D AE 8D 
33ef4     C1 8D C1 8D 
33ef8     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
33efc     D3 8D D3 8D 
33f00     D3 8D D3 8D 
33f04     D3 8D E6 8D 
33f08     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
33f0c     E6 8D E6 8D 
33f10     F9 8D F9 8D 
33f14     F9 8D F8 8D 
33f18     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
33f1c     0B 8E 0B 8E 
33f20     1D 8E 1D 8E 
33f24     1E 8E 1E 8E 
33f28     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
33f2c     31 8E 31 8E 
33f30     31 8E 42 8E 
33f34     43 8E 43 8E 
33f38     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
33f3c     56 8E 56 8E 
33f40     55 8E 56 8E 
33f44     68 8E 69 8E 
33f48     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
33f4c     69 8E 7B 8E 
33f50     7C 8E 7B 8E 
33f54     7B 8E 8D 8E 
33f58     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
33f5c     8D 8E A1 8E 
33f60     A0 8E A1 8E 
33f64     A1 8E A0 8E 
33f68     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
33f6c     B3 8E B3 8E 
33f70     C6 8E C5 8E 
33f74     C6 8E C6 8E 
33f78     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
33f7c     D8 8E D9 8E 
33f80     D8 8E EC 8E 
33f84     EB 8E EC 8E 
33f88     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
33f8c     FE 8E FE 8E 
33f90     FE 8E FE 8E 
33f94     10 8F 10 8F 
33f98     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
33f9c     11 8F 23 8F 
33fa0     24 8F 23 8F 
33fa4     24 8F 37 8F 
33fa8     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
33fac     36 8F 36 8F 
33fb0     48 8F 49 8F 
33fb4     49 8F 49 8F 
33fb8     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
33fbc     5B 8F 5C 8F 
33fc0     5B 8F 6E 8F 
33fc4     6E 8F 6E 8F 
33fc8     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
33fcc     81 8F 81 8F 
33fd0     81 8F 81 8F 
33fd4     93 8F 93 8F 
33fd8     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
33fdc     93 8F A6 8F 
33fe0     A6 8F A6 8F 
33fe4     A6 8F B9 8F 
33fe8     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
33fec     B9 8F B9 8F 
33ff0     CC 8F CB 8F 
33ff4     CB 8F CC 8F 
33ff8     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
33ffc     DF 8F DE 8F 
34000     DE 8F F1 8F 
34004     F1 8F F1 8F 
34008     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
3400c     03 90 04 90 
34010     04 90 04 90 
34014     16 90 17 90 
34018     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
3401c     29 90 28 90 
34020     29 90 28 90 
34024     29 90 3C 90 
34028     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
3402c     3C 90 4F 90 
34030     4E 90 4E 90 
34034     4E 90 4E 90 
34038     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
3403c     61 90 61 90 
34040     73 90 74 90 
34044     74 90 74 90 
34048     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
3404c     87 90 86 90 
34050     87 90 86 90 
34054     99 90 99 90 
34058     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
3405c     AB 90 AB 90 
34060     AC 90 AB 90 
34064     AB 90 BF 90 
34068     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
3406c     BE 90 D1 90 
34070     D0 90 D1 90 
34074     D1 90 D1 90 
34078     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
3407c     E3 90 E4 90 
34080     F6 90 F6 90 
34084     F6 90 F6 90 
34088     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
3408c     09 91 0A 91 
34090     0A 91 1C 91 
34094     1C 91 1C 91 
34098     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
3409c     2F 91 2E 91 
340a0     2F 91 2F 91 
340a4     2E 91 41 91 
340a8     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
340ac     41 91 53 91 
340b0     54 91 54 91 
340b4     53 91 54 91 
340b8     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
340bc     67 91 67 91 
340c0     79 91 7A 91 
340c4     79 91 78 91 
340c8     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
340cc     8C 91 8B 91 
340d0     8C 91 8C 91 
340d4     9E 91 9E 91 
340d8     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
340dc     B1 91 B1 91 
340e0     B2 91 B1 91 
340e4     B1 91 C4 91 
340e8     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
340ec     C4 91 D6 91 
340f0     D7 91 D7 91 
340f4     D7 91 D6 91 
340f8     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
340fc     EA 91 EA 91 
34100     EA 91 FC 91 
34104     FC 91 FB 91 
34108     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
3410c     0E 92 0F 92 
34110     0F 92 0E 92 
34114     21 92 21 92 
34118     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
3411c     21 92 34 92 
34120     33 92 34 92 
34124     34 92 47 92 
34128     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
3412c     46 92 47 92 
34130     59 92 59 92 
34134     59 92 59 92 
34138     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
3413c     6C 92 6C 92 
34140     6B 92 7E 92 
34144     7E 92 7E 92 
34148     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
3414c     92 92 91 92 
34150     91 92 90 92 
34154     91 92 A4 92 
34158     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
3415c     A3 92 B6 92 
34160     B6 92 B7 92 
34164     B7 92 B6 92 
34168     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
3416c     CA 92 C9 92 
34170     CA 92 DC 92 
34174     DC 92 DC 92 
34178     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
3417c     EF 92 EF 92 
34180     EF 92 EF 92 
34184     01 93 01 93 
34188     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
3418c     15 93 14 93 
34190     14 93 14 93 
34194     14 93 27 93 
34198     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
3419c     27 93 39 93 
341a0     3A 93 39 93 
341a4     39 93 39 93 
341a8     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
341ac     4B 93 4C 93 
341b0     5F 93 5F 93 
341b4     5F 93 5E 93 
341b8     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
341bc     5F 93 84 93 
341c0     4C 93 96 93 
341c4     5F 93 AE 94 
341c8     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
341cc     7B C1 00 00 
341d0     00 00 00 00 
341d4     00 00 00 00 
341d8     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
341dc     00 00 00 00 | 	byte	$00, $00, $00, $00
341e0     7A D7 00 80 
341e4     87 8A 48 8F 
341e8     EC 8C 76 8D 
341ec     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
341f0     3C 8D 82 8D 
341f4     42 8D 88 8D 
341f8     8C 8D 8E 8D 
341fc     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
34200     97 8D DE 8D 
34204     E1 8D F1 8E 
34208     D8 8C A3 83 
3420c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
34210     65 71 C9 65 
34214     FC 64 C4 65 
34218     C1 65 BF 65 
3421c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
34220     B6 65 B4 65 
34224     B2 65 AE 65 
34228     AC 65 ED 65 
3422c     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
34230     5E 65 25 66 
34234     FA 62 23 6B 
34238     B5 6C 61 0A 
3423c     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
34240     5D 90 BE 8D 
34244     47 8E C3 8D 
34248     09 8E C9 8D 
3424c     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
34250     15 8E 19 8E 
34254     1B 8E 62 8E 
34258     64 8E 68 8E 
3425c     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
34260     B5 8E 4C 90 
34264     FA 84 3C 9D 
34268     98 13 79 6D 
3426c     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
34270     D9 66 50 66 
34274     D4 66 4B 66 
34278     8C 66 46 66 
3427c     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
34280     81 66 3A 66 
34284     7C 66 36 66 
34288     76 66 30 66 
3428c     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
34290     6B 66 88 72 
34294     BF 37 E7 B7 
34298     75 83 8B 8E 
3429c     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
342a0     94 8E 96 8E 
342a4     DD 8E 9C 8E 
342a8     E2 8E A2 8E 
342ac     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
342b0     EE 8E AE 8E 
342b4     38 8F B5 8E 
342b8     3F 8F FD 8E 
342bc     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
342c0     A5 87 1E E3 
342c4     6D 5D FA 71 
342c8     41 64 25 67 
342cc     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
342d0     D9 66 1A 67 
342d4     18 67 15 67 
342d8     12 67 0F 67 
342dc     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
342e0     07 67 C0 66 
342e4     01 67 BC 66 
342e8     B8 66 DE 64 
342ec     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
342f0     43 E5 1F 8B 
342f4     14 8A F1 90 
342f8     1C 8F 63 8F 
342fc     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
34300     29 8F 6E 8F 
34304     72 8F 75 8F 
34308     34 8F BE 8F 
3430c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
34310     84 8F 87 8F 
34314     CC 8F 56 90 
34318     67 91 49 80 
3431c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
34320     46 77 A6 66 
34324     E8 66 B0 67 
34328     AD 67 ED 67 
3432c     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
34330     A2 67 E3 67 
34334     9D 67 9A 67 
34338     98 67 94 67 
3433c     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
34340     49 67 CD 67 
34344     28 65 5F 6E 
34348     82 67 3A 01 
3434c     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
34350     C2 91 A9 8F 
34354     EF 8F AE 8F 
34358     F4 8F B5 8F 
3435c     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
34360     01 90 03 90 
34364     07 90 09 90 
34368     0C 90 53 90 
3436c     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
34370     18 90 44 93 
34374     85 84 D6 9D 
34378     87 1F 2F 75 
3437c     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
34380     C4 68 F6 67 
34384     BE 68 F1 67 
34388     76 68 2E 68 
3438c     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
34390     27 68 24 68 
34394     64 68 1E 68 
34398     5F 68 19 68 
3439c     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
343a0     DC 68 56 72 
343a4     7E 36 C2 B8 
343a8     D7 84 73 90 
343ac     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
343b0     7B 90 7F 90 
343b4     82 90 84 90 
343b8     CB 90 8B 90 
343bc     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
343c0     D7 90 96 90 
343c4     20 91 59 90 
343c8     25 91 A2 90 
343cc     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
343d0     D0 89 40 EE 
343d4     12 64 C4 71 
343d8     29 66 0C 69 
343dc     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
343e0     C0 68 02 69 
343e4     FE 68 FB 68 
343e8     F9 68 F6 68 
343ec     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
343f0     EE 68 A8 68 
343f4     2C 69 5F 68 
343f8     E2 68 81 66 
343fc     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
34400     1E EB A6 8A 
34404     73 8B 5E 93 
34408     7B 90 48 91 
3440c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
34410     0D 91 11 91 
34414     14 91 16 91 
34418     5C 91 1C 91 
3441c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
34420     68 91 AF 91 
34424     2A 91 B5 91 
34428     75 91 1A 94 
3442c     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
34430     70 0E CB 6C 
34434     5D 6E C4 67 
34438     99 69 54 69 
3443c     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
34440     D2 69 49 69 
34444     89 69 86 69 
34448     40 69 C4 69 
3444c     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
34450     35 69 76 69 
34454     58 67 EB 6D 
34458     E9 6D 89 0F 
3445c     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
34460     33 94 94 91 
34464     D9 91 56 91 
34468     E0 91 9F 91 
3446c     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
34470     EC 91 EE 91 
34474     F1 91 F4 91 
34478     F7 91 3D 92 
3447c     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
34480     46 92 21 94 
34484     11 89 A4 9D 
34488     FD 0E 8F 6C 
3448c     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
34490     28 6A E1 69 
34494     65 6A 1F 6A 
34498     5F 6A 1A 6A 
3449c     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
344a0     54 6A 0F 6A 
344a4     4F 6A 09 6A 
344a8     06 6A 03 6A 
344ac     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
344b0     23 68 69 77 
344b4     3A 4D 38 CA 
344b8     38 86 4E 91 
344bc     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
344c0     64 92 24 92 
344c4     6A 92 2A 92 
344c8     70 92 30 92 
344cc     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
344d0     7B 92 7E 92 
344d4     C5 92 84 92 
344d8     CB 92 8A 92 
344dc     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
344e0     4D 8D F9 E2 
344e4     97 59 FE 74 
344e8     DB 68 6D 6A 
344ec     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
344f0     A8 6A A5 6A 
344f4     A3 6A 9F 6A 
344f8     9D 6A 9B 6A 
344fc     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
34500     D6 6A 8F 6A 
34504     CF 6A 46 6A 
34508     CA 6A E1 67 
3450c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
34510     D3 F7 15 92 
34514     90 8C BF 94 
34518     A6 92 EB 92 
3451c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
34520     B1 92 F7 92 
34524     FA 92 FD 92 
34528     00 93 02 93 
3452c     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
34530     4F 93 52 93 
34534     54 93 22 94 
34538     5A 93 8F 88 
3453c     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
34540     1C 77 07 6C 
34544     E8 69 7A 6B 
34548     34 6B 75 6B 
3454c     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
34550     29 6B 26 6B 
34554     24 6B 21 6B 
34558     1D 6B 5E 6B 
3455c     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
34560     12 6B 52 6B 
34564     34 69 34 6E 
34568     BA 73 A4 24 
3456c     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
34570     7A 94 B3 93 
34574     72 93 31 93 
34578     78 93 7A 93 
3457c     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
34580     83 93 86 93 
34584     89 93 D0 93 
34588     D2 93 D5 93 
3458c     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
34590     DD 93 40 96 
34594     30 8B 99 9C 
34598     52 10 94 71 
3459c     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
345a0     46 6C 79 6B 
345a4     40 6C B7 6B 
345a8     F7 6B B1 6B 
345ac     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
345b0     EC 6B A5 6B 
345b4     A2 6B 9F 6B 
345b8     9D 6B 9A 6B 
345bc     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
345c0     C8 6A E4 76 
345c4     20 4B F9 CE 
345c8     2E 8A 1A 92 
345cc     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
345d0     FB 93 BA 93 
345d4     01 94 03 94 
345d8     4A 94 09 94 
345dc     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
345e0     55 94 14 94 
345e4     9E 94 1A 94 
345e8     61 94 20 94 
345ec     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
345f0     3E 87 E5 CD 
345f4     5F 50 6C 78 
345f8     B5 6A 04 6C 
345fc     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
34600     83 6C 7F 6C 
34604     7C 6C 36 6C 
34608     76 6C 74 6C 
3460c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
34610     6B 6C 25 6C 
34614     66 6C 1F 6C 
34618     1D 6C 41 6A 
3461c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
34620     BA FA FC 94 
34624     5B 8D 97 96 
34628     3B 94 C5 94 
3462c     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
34630     89 94 8C 94 
34634     8F 94 92 94 
34638     94 94 DB 94 
3463c     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
34640     E4 94 E7 94 
34644     2D 95 74 95 
34648     C8 96 15 89 
3464c     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
34650     CB 75 31 6F 
34654     7E 6B 10 6D 
34658     C9 6C 0A 6D 
3465c     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
34660     BD 6C FF 6C 
34664     FB 6C F9 6C 
34668     B2 6C F3 6C 
3466c     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
34670     A7 6C E8 6C 
34674     0D 6B 85 6F 
34678     C7 74 10 28 
3467c     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
34680     96 96 47 95 
34684     06 95 0A 95 
34688     0C 95 0F 95 
3468c     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
34690     17 95 5E 95 
34694     61 95 63 95 
34698     22 95 AC 95 
3469c     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
346a0     72 95 17 98 
346a4     59 8E 01 96 
346a8     CF FC 5A 68 
346ac     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
346b0     96 6D 50 6D 
346b4     D5 6D 4A 6D 
346b8     8C 6D 89 6D 
346bc     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
346c0     80 6D 3A 6D 
346c4     7A 6D 77 6D 
346c8     75 6D 71 6D 
346cc     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
346d0     18 6C BC 78 
346d4     9A 4F 7E CF 
346d8     1F 89 F1 93 
346dc     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
346e0     D2 95 4E 95 
346e4     D7 95 53 95 
346e8     DD 95 E0 95 
346ec     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
346f0     A5 95 EB 95 
346f4     EE 95 F0 95 
346f8     37 96 B3 95 
346fc     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
34700     1A 98 D5 8D 
34704     C5 9F CD 0F 
34708     0F 71 F3 73 
3470c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
34710     D9 6D 5E 6E 
34714     D3 6D 58 6E 
34718     12 6E 0F 6E 
3471c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
34720     49 6E BF 6D 
34724     87 6E 76 6D 
34728     81 6E 11 6B 
3472c     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
34730     3F 09 44 95 
34734     E5 8D 3F 99 
34738     D4 95 A2 96 
3473c     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
34740     23 96 69 96 
34744     6B 96 6E 96 
34748     71 96 74 96 
3474c     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
34750     BF 96 3C 96 
34754     C6 96 C8 96 
34758     A3 98 51 8D 
3475c     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
34760     CF 75 29 73 
34764     90 6C EC 6E 
34768     62 6E E7 6E 
3476c     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
34770     9A 6E 98 6E 
34774     95 6E 91 6E 
34778     8E 6E CF 6E 
3477c     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
34780     40 6E C3 6E 
34784     E8 6C 45 6F 
34788     A5 7B C9 35 
3478c     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
34790     2D 98 23 97 
34794     E1 96 A0 96 
34798     A4 96 EA 96 
3479c     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
347a0     AF 96 F4 96 
347a4     F8 96 3E 97 
347a8     FD 96 43 97 
347ac     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
347b0     08 97 6B 99 
347b4     D6 92 88 91 
347b8     D8 EE 84 66 
347bc     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
347c0     2E 6F E7 6E 
347c4     6C 6F 24 6F 
347c8     21 6F 1F 6F 
347cc     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
347d0     17 6F 13 6F 
347d4     54 6F 0E 6F 
347d8     0B 6F 4B 6F 
347dc     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
347e0     27 6D 1C 7B 
347e4     19 59 9F DB 
347e8     66 8E BC 94 
347ec     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
347f0     67 97 26 97 
347f4     6D 97 2B 97 
347f8     72 97 32 97 
347fc     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
34800     C1 97 7F 97 
34804     C6 97 85 97 
34808     CB 97 CE 97 
3480c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
34810     EC 8A C4 C6 
34814     68 4C F4 7D 
34818     63 6E E8 6E 
3481c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
34820     ED 6F A7 6F 
34824     E7 6F A0 6F 
34828     E1 6F 9B 6F 
3482c     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
34830     D5 6F 8F 6F 
34834     CE 6F 45 6F 
34838     86 6F 68 6D 
3483c     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
34840     C0 13 AD A2 
34844     A7 8E 79 99 
34848     E6 97 E8 97 
3484c     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
34850     F1 97 F3 97 
34854     F6 97 F9 97 
34858     FB 97 FE 97 
3485c     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
34860     4A 98 0A 98 
34864     93 98 0F 98 
34868     7F 9B BF 8C 
3486c     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
34870     91 7B 62 73 
34874     1A 6E B9 70 
34878     EB 6F B3 70 
3487c     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
34880     25 70 20 70 
34884     1E 70 1B 70 
34888     18 70 15 70 
3488c     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
34890     0D 70 09 70 
34894     07 70 03 70 
34898     01 70 FD 6F 
3489c     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
348a0     F6 6F F2 6F 
348a4     EF 6F EC 6F 
348a8     2C 70 E6 6F 
348ac     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
348b0     DD 6F 97 6F 
348b4     D7 6F 84 6E 
348b8     8F 6F 3F 7D 
348bc     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
348be     FF FF FF FF 
348c2     FF FF       | atarist_spl file "atarist.spl" '512
348c4     00 00 00 00 
348c8     00 00 00 00 
348cc     00 00       | 	byte	$00[10]
348ce     17 7F F2 7F 
348d2     B2 7F 72 7F 
348d6     33 7F F4 7E 
348da     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
348de     36 7E F5 7D 
348e2     E9 51 F2 0D 
348e6     8E 00 F3 FD 
348ea     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
348ee     57 FD 58 FD 
348f2     5B FD 5C FD 
348f6     5C FD 60 7D 
348fa     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
348fe     D6 7C 98 7C 
34902     59 7C 1A 7C 
34906     DC 7B 9E 7B 
3490a     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
3490e     F3 05 00 FD 
34912     41 FB EA FA 
34916     D9 FA DB FA 
3491a     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
3491e     E4 FA 9B 36 
34922     F8 7A C0 7A 
34926     84 7A 45 7A 
3492a     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
3492e     8E 79 51 79 
34932     15 79 D7 78 
34936     3C 1F EB FF 
3493a     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
3493e     6D F8 65 F8 
34942     68 F8 6D F8 
34946     70 F8 74 F8 
3494a     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
3494e     AB 60 79 60 
34952     4B 60 1A 60 
34956     E9 5F B9 5F 
3495a     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
3495e     FB 59 B2 0B 
34962     92 FA 3A F7 
34966     96 F6 79 F6 
3496a     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
3496e     82 F6 86 F6 
34972     8C F6 DB 5D 
34976     F1 5E C1 5E 
3497a     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
3497e     34 5E 04 5E 
34982     D6 5D A6 5D 
34986     78 5D D4 3E 
3498a     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
3498e     27 F5 BA F4 
34992     AB F4 AD F4 
34996     B2 F4 B8 F4 
3499a     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
3499e     26 5D 2B 5D 
349a2     FC 5C CD 5C 
349a6     9F 5C 70 5C 
349aa     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
349ae     E5 5B B8 5B 
349b2     DB 24 A7 FC 
349b6     D1 F4 4D F3 
349ba     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
349be     04 F3 0B F3 
349c2     11 F3 16 F3 
349c6     DE 18 98 5B 
349ca     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
349ce     4E 4A 29 48 
349d2     A0 47 6A 47 
349d6     43 47 20 47 
349da     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
349de     E2 F6 98 F2 
349e2     C5 F1 A3 F1 
349e6     A3 F1 A8 F1 
349ea     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
349ee     BF F1 00 3D 
349f2     EF 46 CD 46 
349f6     AA 46 86 46 
349fa     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
349fe     1C 46 F9 45 
34a02     D7 45 EE 43 
34a06     DE 02 E8 F3 
34a0a     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
34a0e     61 F0 65 F0 
34a12     6D F0 74 F0 
34a16     7C F0 84 F0 
34a1a     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
34a1e     8E 45 6D 45 
34a22     49 45 27 45 
34a26     05 45 E1 44 
34a2a     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
34a2e     F1 2F A9 FB 
34a32     8B F1 9B EF 
34a36     40 EF 36 EF 
34a3a     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
34a3e     4D EF 56 EF 
34a42     5E EF 7B 44 
34a46     8C 44 69 44 
34a4a     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
34a4e     03 44 E1 43 
34a52     C0 43 F5 37 
34a56     69 33 0F 11 
34a5a     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
34a5e     66 EE 37 EE 
34a62     38 EE 40 EE 
34a66     48 EE 51 EE 
34a6a     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
34a6e     7D 32 6A 32 
34a72     51 32 37 32 
34a76     1F 32 05 32 
34a7a     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
34a7e     B9 31 A1 31 
34a82     F1 04 F4 F1 
34a86     50 EE A0 ED 
34a8a     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
34a8e     93 ED 9A ED 
34a92     A4 ED AD ED 
34a96     F4 27 C1 31 
34a9a     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
34a9e     78 31 5F 31 
34aa2     46 31 2E 31 
34aa6     15 31 FC 30 
34aaa     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
34aae     C4 EF 4A ED 
34ab2     DC EC CB EC 
34ab6     D2 EC DA EC 
34aba     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
34abe     F9 EC 64 2F 
34ac2     0A 31 F1 30 
34ac6     D9 30 C0 30 
34aca     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
34ace     78 30 5F 30 
34ad2     46 30 38 23 
34ad6     A6 F6 19 EE 
34ada     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
34ade     20 EC 28 EC 
34ae2     32 EC 3C EC 
34ae6     47 EC 51 EC 
34aea     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
34aee     A3 22 93 22 
34af2     7F 22 6E 22 
34af6     5D 22 4C 22 
34afa     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
34afe     77 09 76 F1 
34b02     CC EC F0 EB 
34b06     CD EB CE EB 
34b0a     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
34b0e     ED EB F5 EB 
34b12     3E F6 6B 22 
34b16     5F 22 4E 22 
34b1a     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
34b1e     1B 22 0B 22 
34b22     FA 21 E9 21 
34b26     D8 21 4D FF 
34b2a     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
34b2e     92 EB 7B EB 
34b32     82 EB 8C EB 
34b36     97 EB A1 EB 
34b3a     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
34b3e     15 22 04 22 
34b42     F3 21 E3 21 
34b46     D2 21 C0 21 
34b4a     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
34b4e     8E 21 7D 21 
34b52     9A F8 A4 ED 
34b56     8E EB 2F EB 
34b5a     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
34b5e     37 EB 42 EB 
34b62     4C EB 57 EB 
34b66     B2 17 22 19 
34b6a     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
34b6e     FD 18 EF 18 
34b72     E3 18 D6 18 
34b76     CA 18 BD 18 
34b7a     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
34b7e     60 EC 35 EB 
34b82     01 EB 01 EB 
34b86     0C EB 16 EB 
34b8a     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
34b8e     34 EB D0 18 
34b92     00 19 F4 18 
34b96     E8 18 DA 18 
34b9a     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
34b9e     B6 18 A9 18 
34ba2     9D 18 91 05 
34ba6     F0 EF CA EB 
34baa     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
34bae     E8 EA F2 EA 
34bb2     FE EA 07 EB 
34bb6     12 EB C2 EF 
34bba     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
34bbe     D9 18 CD 18 
34bc2     C0 18 B3 18 
34bc6     A7 18 9B 18 
34bca     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
34bce     B8 FC 30 EE 
34bd2     61 EB DC EA 
34bd6     CD EA D2 EA 
34bda     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
34bde     F3 EA FE EA 
34be2     D2 09 D1 18 
34be6     C3 18 17 18 
34bea     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
34bee     66 11 52 11 
34bf2     49 11 41 11 
34bf6     38 11 E0 F4 
34bfa     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
34bfe     C9 EA C5 EA 
34c02     CF EA DB EA 
34c06     E6 EA EF EA 
34c0a     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
34c0e     89 11 80 11 
34c12     78 11 6E 11 
34c16     67 11 5D 11 
34c1a     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
34c1e     43 11 32 0D 
34c22     9C F1 07 EC 
34c26     F8 EA CD EA 
34c2a     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
34c2e     E4 EA ED EA 
34c32     F8 EA 02 EB 
34c36     55 11 91 11 
34c3a     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
34c3e     75 11 6E 11 
34c42     64 11 5E 11 
34c46     54 11 4A 11 
34c4a     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
34c4e     A8 EB F1 EA 
34c52     D9 EA DC EA 
34c56     E8 EA F1 EA 
34c5a     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
34c5e     A6 EB 9E 11 
34c62     A0 11 96 11 
34c66     8D 11 85 11 
34c6a     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
34c6e     6A 11 CA 0D 
34c72     36 0B 57 F8 
34c76     6C ED 57 EB 
34c7a     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
34c7e     F4 EA FF EA 
34c82     09 EB 15 EB 
34c86     1E EB 1A FD 
34c8a     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
34c8e     ED 0A E8 0A 
34c92     E2 0A DC 0A 
34c96     D6 0A D1 0A 
34c9a     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
34c9e     F8 F3 BC EC 
34ca2     57 EB 1E EB 
34ca6     18 EB 24 EB 
34caa     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
34cae     42 EB 4D EB 
34cb2     08 09 20 0B 
34cb6     1A 0B 14 0B 
34cba     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
34cbe     04 0B FE 0A 
34cc2     F9 0A F2 0A 
34cc6     84 08 3A F1 
34cca     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
34cce     42 EB 42 EB 
34cd2     4E EB 57 EB 
34cd6     62 EB 6B EB 
34cda     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
34cde     48 0B 43 0B 
34ce2     3C 0B 36 0B 
34ce6     31 0B 2C 0B 
34cea     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
34cee     1B 0B 5C 00 
34cf2     6A EF 1B EC 
34cf6     81 EB 6A EB 
34cfa     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
34cfe     85 EB 8E EB 
34d02     99 EB A3 EB 
34d06     DD 05 E5 05 
34d0a     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
34d0e     DB 05 D8 05 
34d12     D5 05 D1 05 
34d16     D0 05 CB 05 
34d1a     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
34d1e     0C EC BB EB 
34d22     B3 EB BB EB 
34d26     C5 EB D0 EB 
34d2a     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
34d2e     E4 F7 2C 06 
34d32     28 06 24 06 
34d36     22 06 1F 06 
34d3a     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
34d3e     16 06 14 06 
34d42     0F 06 D0 F3 
34d46     65 ED 2D EC 
34d4a     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
34d4e     01 EC 0A EC 
34d52     14 EC 1E EC 
34d56     29 EC FB 03 
34d5a     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
34d5e     63 06 60 06 
34d62     5E 06 59 06 
34d66     58 06 54 06 
34d6a     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
34d6e     69 F1 21 ED 
34d72     55 EC 33 EC 
34d76     36 EC 40 EC 
34d7a     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
34d7e     5C EC 68 EC 
34d82     92 02 D9 02 
34d86     D7 02 D7 02 
34d8a     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
34d8e     D1 02 D1 02 
34d92     CE 02 CD 02 
34d96     5D FC 80 EF 
34d9a     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
34d9e     83 EC 8A EC 
34da2     93 EC 9C EC 
34da6     A5 EC B1 EC 
34daa     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
34dae     2B 03 2A 03 
34db2     29 03 26 03 
34db6     25 03 24 03 
34dba     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
34dbe     1F 03 70 F7 
34dc2     D0 EE 27 ED 
34dc6     DB EC D4 EC 
34dca     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
34dce     F0 EC FA EC 
34dd2     02 ED F9 F4 
34dd6     7B 03 7C 03 
34dda     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
34dde     75 03 73 03 
34de2     72 03 70 03 
34de6     6D 03 6C 03 
34dea     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
34dee     54 ED 22 ED 
34df2     22 ED 2C ED 
34df6     35 ED 3F ED 
34dfa     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
34dfe     14 01 C3 03 
34e02     C1 03 C0 03 
34e06     5F 01 A5 00 
34e0a     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
34e0e     7B 00 7C 00 
34e12     20 00 85 F1 
34e16     2A EE 89 ED 
34e1a     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
34e1e     80 ED 87 ED 
34e22     90 ED 9A ED 
34e26     A3 ED 73 00 
34e2a     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
34e2e     D0 00 D0 00 
34e32     D0 00 D0 00 
34e36     D0 00 CF 00 
34e3a     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
34e3e     80 F0 3D EE 
34e42     D5 ED C7 ED 
34e46     CD ED D6 ED 
34e4a     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
34e4e     F2 ED FA ED 
34e52     1D 01 29 01 
34e56     27 01 27 01 
34e5a     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
34e5e     25 01 26 01 
34e62     26 01 23 01 
34e66     D0 F7 EC EF 
34e6a     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
34e6e     1C EE 24 EE 
34e72     2D EE 37 EE 
34e76     40 EE 47 EE 
34e7a     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
34e7e     7D 01 7B 01 
34e82     7A 01 7A 01 
34e86     79 01 78 01 
34e8a     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
34e8e     84 FE DE F3 
34e92     6C EF 93 EE 
34e96     72 EE 72 EE 
34e9a     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
34e9e     8B EE 95 EE 
34ea2     9E EE 15 FC 
34ea6     67 FE 67 FE 
34eaa     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
34eae     6B FE 6B FE 
34eb2     6D FE 6D FE 
34eb6     6D FE 6F FE 
34eba     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
34ebe     DF EE CC EE 
34ec2     CF EE D9 EE 
34ec6     E1 EE EA EE 
34eca     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
34ece     5A FE C4 FE 
34ed2     C3 FE C5 FE 
34ed6     C6 FE C6 FE 
34eda     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
34ede     C8 FE C7 FE 
34ee2     DA FB 85 F1 
34ee6     8D EF 31 EF 
34eea     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
34eee     34 EF 3E EF 
34ef2     46 EF 4F EF 
34ef6     57 EF 0D FF 
34efa     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
34efe     1F FF 1F FF 
34f02     21 FF 21 FF 
34f06     21 FF 21 FF 
34f0a     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
34f0e     15 F1 BE EF 
34f12     84 EF 7E EF 
34f16     88 EF 8F EF 
34f1a     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
34f1e     A9 EF 06 F2 
34f22     A6 FC AB FC 
34f26     AD FC AE FC 
34f2a     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
34f2e     B2 FC B4 FC 
34f32     B6 FC B7 FC 
34f36     8B F4 BD F0 
34f3a     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
34f3e     E4 EF EE EF 
34f42     F6 EF FD EF 
34f46     04 F0 0E F0 
34f4a     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
34f4e     0B FD 0D FD 
34f52     0F FD 11 FD 
34f56     11 FD 13 FD 
34f5a     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
34f5e     17 FD 64 F3 
34f62     CD F0 52 F0 
34f66     41 F0 45 F0 
34f6a     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
34f6e     5B F0 64 F0 
34f72     6D F0 FB FC 
34f76     65 FD 68 FD 
34f7a     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
34f7e     6C FD 6D FD 
34f82     6F FD 70 FD 
34f86     72 FD B3 FB 
34f8a     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
34f8e     A4 F0 99 F0 
34f92     A0 F0 A8 F0 
34f96     AE F0 B9 F0 
34f9a     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
34f9e     CB FB DD FB 
34fa2     DE FB E0 FB 
34fa6     E3 FB E3 FB 
34faa     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
34fae     E9 FB EC FB 
34fb2     62 F7 27 F2 
34fb6     2A F1 FF F0 
34fba     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
34fbe     0C F1 13 F1 
34fc2     1B F1 23 F1 
34fc6     33 F2 3C FC 
34fca     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
34fce     42 FC 45 FC 
34fd2     47 FC 48 FC 
34fd6     4A FC 4C FC 
34fda     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
34fde     20 F2 77 F1 
34fe2     5C F1 5F F1 
34fe6     64 F1 6C F1 
34fea     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
34fee     83 F1 DC F8 
34ff2     9A FC 9A FC 
34ff6     9B FC 9E FC 
34ffa     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
34ffe     A3 FC A4 FC 
35002     A6 FC A9 FC 
35006     90 F4 33 F2 
3500a     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
3500e     BA F1 BF F1 
35012     C7 F1 CE F1 
35016     D6 F1 DC F1 
3501a     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
3501e     F3 FC F5 FC 
35022     FE FB 79 FB 
35026     62 FB 5F FB 
3502a     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
3502e     6F FA AF F3 
35032     53 F2 12 F2 
35036     0F F2 15 F2 
3503a     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
3503e     2A F2 32 F2 
35042     38 F2 9A FB 
35046     AF FB B1 FB 
3504a     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3504e     B7 FB B8 FB 
35052     BA FB BC FB 
35056     C1 FB 3B F8 
3505a     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
3505e     6E F2 6C F2 
35062     74 F2 7A F2 
35066     81 F2 87 F2 
3506a     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
3506e     06 FC 09 FC 
35072     0C FC 0E FC 
35076     0F FC 12 FC 
3507a     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
3507e     17 FC 1A FC 
35082     B2 F6 7B F3 
35086     DD F2 C5 F2 
3508a     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
3508e     D4 F2 DB F2 
35092     E0 F2 E8 F2 
35096     28 F8 60 FC 
3509a     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
3509e     64 FC 66 FC 
350a2     68 FC 6A FC 
350a6     6D FC 52 FC 
350aa     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
350ae     78 F3 24 F3 
350b2     1A F3 1E F3 
350b6     24 F3 2A F3 
350ba     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
350be     3D F3 80 FA 
350c2     0C FB 0F FB 
350c6     10 FB 14 FB 
350ca     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
350ce     1B FB 1D FB 
350d2     1F FB 92 FA 
350d6     DE F4 AE F3 
350da     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
350de     79 F3 7E F3 
350e2     84 F3 8C F3 
350e6     92 F3 97 F3 
350ea     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
350ee     67 FB 69 FB 
350f2     6B FB 6F FB 
350f6     71 FB 72 FB 
350fa     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
350fe     E3 F8 BA F4 
35102     EE F3 CC F3 
35106     CA F3 CF F3 
3510a     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3510e     E2 F3 E8 F3 
35112     ED F3 B7 FB 
35116     BC FB BE FB 
3511a     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3511e     C4 FB C6 FB 
35122     C8 FB C9 FB 
35126     CC FB 8F F7 
3512a     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
3512e     1E F4 1E F4 
35132     24 F4 2A F4 
35136     30 F4 38 F4 
3513a     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
3513e     AD FA B1 FA 
35142     B4 FA B6 FA 
35146     BA FA BB FA 
3514a     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
3514e     C2 FA C6 FA 
35152     55 F6 C6 F4 
35156     7D F4 72 F4 
3515a     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
3515e     83 F4 89 F4 
35162     8F F4 94 F4 
35166     66 FA 03 FB 
3516a     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
3516e     0A FB 0E FB 
35172     10 FB 11 FB 
35176     16 FB 18 FB 
3517a     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
3517e     F9 F4 CA F4 
35182     C5 F4 CB F4 
35186     D1 F4 D7 F4 
3518a     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
3518e     E8 F4 3F FB 
35192     56 FB 58 FB 
35196     5A FB 5E FB 
3519a     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
3519e     64 FB 64 FB 
351a2     69 FB 99 F9 
351a6     E9 F5 33 F5 
351aa     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
351ae     1D F5 22 F5 
351b2     27 F5 2E F5 
351b6     32 F5 37 F5 
351ba     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
351be     BC FA BC FA 
351c2     C1 FA C2 FA 
351c6     C4 FA C8 FA 
351ca     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
351ce     F9 F7 DB F5 
351d2     78 F5 69 F5 
351d6     6A F5 70 F5 
351da     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
351de     7F F5 85 F5 
351e2     6E F7 06 FB 
351e6     0A FB 0B FB 
351ea     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
351ee     14 FB 15 FB 
351f2     18 FB 1B FB 
351f6     1D FB 70 F7 
351fa     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
351fe     B6 F5 BB F5 
35202     C0 F5 C6 F5 
35206     CA F5 CF F5 
3520a     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
3520e     54 FB 56 FB 
35212     5A FB 5B FB 
35216     5E FB 5F FB 
3521a     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
3521e     67 FB 52 FB 
35222     29 F7 33 F6 
35226     06 F6 02 F6 
3522a     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
3522e     10 F6 16 F6 
35232     1A F6 1F F6 
35236     81 FB 9F FB 
3523a     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
3523e     51 FB F2 FA 
35242     E3 FA E3 FA 
35246     E5 FA E9 FA 
3524a     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
3524e     64 F6 4D F6 
35252     4D F6 53 F6 
35256     57 F6 5C F6 
3525a     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
3525e     6A F6 19 FB 
35262     1E FB 22 FB 
35266     23 FB 24 FB 
3526a     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
3526e     2C FB 2E FB 
35272     32 FB F0 F8 
35276     01 F7 A5 F6 
3527a     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
3527e     9F F6 A3 F6 
35282     A6 F6 AC F6 
35286     B0 F6 EB F7 
3528a     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
3528e     68 FB 6C FB 
35292     6E FB 71 FB 
35296     72 FB 74 FB 
3529a     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
3529e     71 F8 21 F7 
352a2     E5 F6 DD F6 
352a6     E1 F6 E6 F6 
352aa     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
352ae     F5 F6 F7 F6 
352b2     F7 FA AB FB 
352b6     AD FB AF FB 
352ba     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
352be     B6 FB B9 FB 
352c2     BB FB BC FB 
352c6     21 FB 07 F8 
352ca     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
352ce     22 F7 26 F7 
352d2     2B F7 2E F7 
352d6     34 F7 38 F7 
352da     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
352de     13 FB 16 FB 
352e2     17 FB 1B FB 
352e6     1E FB 20 FB 
352ea     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
352ee     26 FB 77 FA 
352f2     F3 F7 7C F7 
352f6     67 F7 6A F7 
352fa     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
352fe     74 F7 7A F7 
35302     7E F7 82 F7 
35306     53 FB 5A FB 
3530a     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
3530e     5F FB 63 FB 
35312     65 FB 67 FB 
35316     69 FB 6A FB 
3531a     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
3531e     B5 F7 A9 F7 
35322     AD F7 B0 F7 
35326     B5 F7 B8 F7 
3532a     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
3532e     6E F8 99 FB 
35332     9C FB 9D FB 
35336     9F FB A4 FB 
3533a     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
3533e     A9 FB AB FB 
35342     AD FB 46 F9 
35346     26 F8 F0 F7 
3534a     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
3534e     F4 F7 F8 F7 
35352     FB F7 FF F7 
35356     03 F8 65 FA 
3535a     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
3535e     2B FB 2F FB 
35362     30 FB 32 FB 
35366     34 FB 38 FB 
3536a     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
3536e     E9 F8 4A F8 
35372     2E F8 2C F8 
35376     2F F8 36 F8 
3537a     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
3537e     41 F8 44 F8 
35382     4A FB 67 FB 
35386     68 FB 6B FB 
3538a     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
3538e     73 FB 74 FB 
35392     78 FB 7A FB 
35396     14 FB E7 F8 
3539a     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
3539e     6D F8 70 F8 
353a2     73 F8 78 F8 
353a6     7C F8 80 F8 
353aa     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
353ae     A6 FB A7 FB 
353b2     A9 FB AC FB 
353b6     AF FB B1 FB 
353ba     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
353be     B7 FB 73 FA 
353c2     F8 F8 B4 F8 
353c6     A9 F8 AB F8 
353ca     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
353ce     B4 F8 B8 F8 
353d2     BB F8 FA F8 
353d6     64 FB 65 FB 
353da     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
353de     6D FB 6F FB 
353e2     70 FB 74 FB 
353e6     77 FB 77 FB 
353ea     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
353ee     E9 F8 E4 F8 
353f2     E8 F8 EB F8 
353f6     EE F8 F2 F8 
353fa     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
353fe     B5 FA 9F FB 
35402     A1 FB A4 FB 
35406     A5 FB A9 FB 
3540a     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
3540e     AE FB B1 FB 
35412     B2 FB C7 F9 
35416     39 F9 22 F9 
3541a     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
3541e     26 F9 2A F9 
35422     2E F9 32 F9 
35426     33 F9 BA FB 
3542a     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
3542e     DE FB E1 FB 
35432     E2 FB E4 FB 
35436     E5 FB E7 FB 
3543a     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
3543e     C5 F9 67 F9 
35442     57 F9 56 F9 
35446     5B F9 5F F9 
3544a     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
3544e     68 F9 6C F9 
35452     0B FC 11 FC 
35456     14 FC 15 FC 
3545a     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
3545e     B5 FB B5 FB 
35462     B6 FB B8 FB 
35466     E9 FA C8 F9 
3546a     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
3546e     90 F9 94 F9 
35472     95 F9 99 F9 
35476     9D F9 9F F9 
3547a     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
3547e     DE FB DF FB 
35482     E2 FB E4 FB 
35486     E6 FB E8 FB 
3548a     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
3548e     EF FB AC FA 
35492     E9 F9 C7 F9 
35496     C3 F9 C8 F9 
3549a     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
3549e     D0 F9 D4 F9 
354a2     D6 F9 0E FB 
354a6     11 FC 13 FC 
354aa     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
354ae     19 FC 1B FC 
354b2     1D FC 1E FC 
354b6     21 FC 22 FC 
354ba     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
354be     F7 F9 F7 F9 
354c2     FB F9 FE F9 
354c6     00 FA 03 FA 
354ca     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
354ce     1B FC 45 FC 
354d2     46 FC 48 FC 
354d6     4A FC 4B FC 
354da     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
354de     52 FC 54 FC 
354e2     F3 FB 82 FA 
354e6     35 FA 28 FA 
354ea     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
354ee     31 FA 32 FA 
354f2     37 FA 37 FA 
354f6     3C FA 00 FC 
354fa     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
354fe     09 FC 0B FC 
35502     0F FC 12 FC 
35506     12 FC 15 FC 
3550a     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
3550e     8D FA 60 FA 
35512     5B FA 5C FA 
35516     60 FA 61 FA 
3551a     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
3551e     6C FA 6D FA 
35522     37 FC 3A FC 
35526     3B FC 3D FC 
3552a     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
3552e     43 FC 44 FC 
35532     45 FC 47 FC 
35536     51 FB AB FA 
3553a     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
3553e     8E FA 91 FA 
35542     93 FA 95 FA 
35546     98 FA 9B FA 
3554a     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
3554e     68 FC 6A FC 
35552     6C FC 6E FC 
35556     70 FC 72 FC 
3555a     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
3555e     76 FC 3B FB 
35562     D0 FA BB FA 
35566     B9 FA BD FA 
3556a     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
3556e     C4 FA C6 FA 
35572     CA FA 13 FC 
35576     3A FC 3A FC 
3557a     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
3557e     41 FC 43 FC 
35582     44 FC 47 FC 
35586     48 FC 3C FC 
3558a     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
3558e     E6 FA E8 FA 
35592     EB FA EE FA 
35596     F0 FA F2 FA 
3559a     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
3559e     61 FC 66 FC 
355a2     68 FC 6B FC 
355a6     6C FC 6E FC 
355aa     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
355ae     73 FC 75 FC 
355b2     13 FC 3F FB 
355b6     17 FB 12 FB 
355ba     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
355be     1A FB 1D FB 
355c2     1F FB 20 FB 
355c6     23 FB 92 FC 
355ca     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
355ce     96 FC 97 FC 
355d2     9A FC 9C FC 
355d6     9E FC 9F FC 
355da     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
355de     5A FB 41 FB 
355e2     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
355e6     73 32 00 04 
355ea     00 00 10 00 
355ee     00 00 00 00 
355f2     00 00 00 00 | atari2 file "atari2.s2"
355f6     43 87 43 87 
355fa     43 87 44 87 
355fe     43 87 44 87 
35602     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
35606     43 87 43 87 
3560a     43 87 44 87 
3560e     43 87 43 87 
35612     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
35616     44 87 43 87 
3561a     44 87 43 87 
3561e     43 87 43 87 
35622     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
35626     43 87 43 87 
3562a     44 87 43 87 
3562e     44 87 44 87 
35632     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
35636     43 87 43 87 
3563a     44 87 43 87 
3563e     43 87 42 87 
35642     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
35646     43 87 43 87 
3564a     43 87 43 87 
3564e     44 87 43 87 
35652     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
35656     44 87 44 87 
3565a     43 87 44 87 
3565e     43 87 44 87 
35662     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
35666     44 87 43 87 
3566a     44 87 44 87 
3566e     43 87 43 87 
35672     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
35676     43 87 44 87 
3567a     44 87 43 87 
3567e     43 87 44 87 
35682     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
35686     43 87 43 87 
3568a     43 87 43 87 
3568e     43 87 43 87 
35692     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
35696     42 87 43 87 
3569a     44 87 42 87 
3569e     43 87 43 87 
356a2     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
356a6     43 87 44 87 
356aa     44 87 43 87 
356ae     43 87 43 87 
356b2     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
356b6     43 87 5C 87 
356ba     EE 86 AC 87 
356be     4C 7C A3 78 
356c2     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
356c6     BC 78 BB 78 
356ca     BD 78 BC 78 
356ce     BB 78 BD 78 
356d2     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
356d6     BB 78 BB 78 
356da     BC 78 BC 78 
356de     BC 78 BB 78 
356e2     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
356e6     BC 78 BC 78 
356ea     BC 78 BC 78 
356ee     BC 78 BC 78 
356f2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
356f6     BB 78 BC 78 
356fa     A0 78 4C 7C 
356fe     11 7A 29 89 
35702     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
35706     44 87 43 87 
3570a     44 87 43 87 
3570e     43 87 42 87 
35712     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
35716     43 87 43 87 
3571a     44 87 ED 85 
3571e     71 85 52 79 
35722     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
35726     BC 78 BC 78 
3572a     BC 78 BC 78 
3572e     BC 78 BC 78 
35732     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35736     BC 78 BC 78 
3573a     BC 78 A0 78 
3573e     CF 7A B9 81 
35742     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
35746     44 87 43 87 
3574a     43 87 44 87 
3574e     43 87 44 87 
35752     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
35756     43 87 43 87 
3575a     43 87 43 87 
3575e     44 87 43 87 
35762     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
35766     43 87 43 87 
3576a     44 87 43 87 
3576e     44 87 43 87 
35772     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
35776     44 87 43 87 
3577a     43 87 43 87 
3577e     5A 87 39 81 
35782     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
35786     A5 78 BC 78 
3578a     BB 78 BC 78 
3578e     BB 78 BC 78 
35792     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
35796     BC 78 BC 78 
3579a     BC 78 BC 78 
3579e     BC 78 8F 79 
357a2     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
357a6     09 85 47 87 
357aa     43 87 43 87 
357ae     42 87 42 87 
357b2     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
357b6     43 87 43 87 
357ba     43 87 43 87 
357be     43 87 44 87 
357c2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
357c6     43 87 43 87 
357ca     44 87 43 87 
357ce     42 87 43 87 
357d2     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
357d6     44 87 43 87 
357da     43 87 43 87 
357de     44 87 44 87 
357e2     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
357e6     94 78 55 7A 
357ea     B9 78 BC 78 
357ee     BC 78 BC 78 
357f2     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
357f6     BC 78 BB 78 
357fa     BC 78 BC 78 
357fe     BC 78 BC 78 
35802     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35806     BB 78 BC 78 
3580a     BC 78 BC 78 
3580e     BB 78 BC 78 
35812     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35816     BC 78 BC 78 
3581a     BD 78 BC 78 
3581e     BC 78 BB 78 
35822     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
35826     94 78 B3 84 
3582a     36 84 4A 87 
3582e     43 87 43 87 
35832     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
35836     43 87 44 87 
3583a     43 87 43 87 
3583e     43 87 43 87 
35842     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
35846     43 87 44 87 
3584a     43 87 44 87 
3584e     43 87 43 87 
35852     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
35856     43 87 43 87 
3585a     43 87 45 87 
3585e     43 87 43 87 
35862     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
35866     43 87 44 87 
3586a     44 87 44 87 
3586e     43 87 43 87 
35872     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
35876     43 87 42 87 
3587a     43 87 43 87 
3587e     44 87 43 87 
35882     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
35886     54 87 3C 82 
3588a     36 83 52 79 
3588e     C6 78 BC 78 
35892     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
35896     BB 78 BB 78 
3589a     BC 78 BC 78 
3589e     BC 78 BC 78 
358a2     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
358a6     BD 78 ED 78 
358aa     1B 79 F4 83 
358ae     4D 83 4E 87 
358b2     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
358b6     44 87 43 87 
358ba     42 87 44 87 
358be     43 87 42 87 
358c2     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
358c6     43 87 54 87 
358ca     26 82 B3 84 
358ce     D6 77 BB 78 
358d2     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
358d6     BC 78 BB 78 
358da     BB 78 BB 78 
358de     BB 78 BB 78 
358e2     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
358e6     BC 78 BC 78 
358ea     26 79 18 75 
358ee     36 83 1F 84 
358f2     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
358f6     43 87 43 87 
358fa     43 87 43 87 
358fe     43 87 44 87 
35902     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
35906     43 87 44 87 
3590a     44 87 43 87 
3590e     43 87 43 87 
35912     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
35916     43 87 43 87 
3591a     43 87 43 87 
3591e     44 87 44 87 
35922     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
35926     44 87 43 87 
3592a     43 87 43 87 
3592e     43 87 44 87 
35932     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
35936     44 87 44 87 
3593a     44 87 43 87 
3593e     44 87 43 87 
35942     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
35946     43 87 43 87 
3594a     43 87 44 87 
3594e     44 87 43 87 
35952     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
35956     43 87 43 87 
3595a     43 87 43 87 
3595e     43 87 44 87 
35962     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
35966     43 87 44 87 
3596a     43 87 44 87 
3596e     19 87 7D 86 
35972     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
35976     B1 78 BC 78 
3597a     BC 78 BC 78 
3597e     BC 78 BC 78 
35982     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
35986     BC 78 BC 78 
3598a     BD 78 BC 78 
3598e     B7 78 3B 7B 
35992     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
35996     96 86 44 87 
3599a     43 87 43 87 
3599e     43 87 43 87 
359a2     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
359a6     44 87 44 87 
359aa     43 87 44 87 
359ae     43 87 44 87 
359b2     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
359b6     43 87 44 87 
359ba     43 87 44 87 
359be     43 87 44 87 
359c2     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
359c6     43 87 44 87 
359ca     43 87 43 87 
359ce     44 87 43 87 
359d2     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
359d6     44 87 44 87 
359da     43 87 43 87 
359de     43 87 44 87 
359e2     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
359e6     43 87 43 87 
359ea     43 87 43 87 
359ee     44 87 44 87 
359f2     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
359f6     36 83 CF 7A 
359fa     AB 78 BB 78 
359fe     BC 78 BC 78 
35a02     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
35a06     BB 78 BC 78 
35a0a     BC 78 BC 78 
35a0e     BC 78 BC 78 
35a12     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
35a16     BC 78 BC 78 
35a1a     BC 78 BB 78 
35a1e     BC 78 BC 78 
35a22     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
35a26     BB 78 BC 78 
35a2a     BB 78 BC 78 
35a2e     BC 78 BD 78 
35a32     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
35a36     BC 78 BC 78 
35a3a     BC 78 BC 78 
35a3e     BC 78 BD 78 
35a42     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
35a46     BC 78 BB 78 
35a4a     BC 78 BB 78 
35a4e     BB 78 BC 78 
35a52     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
35a56     BC 78 BC 78 
35a5a     BC 78 BC 78 
35a5e     BC 78 BB 78 
35a62     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
35a66     BC 78 BC 78 
35a6a     BC 78 BD 78 
35a6e     BB 78 BC 78 
35a72     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
35a76     BC 78 BC 78 
35a7a     BC 78 BB 78 
35a7e     BC 78 BB 78 
35a82     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
35a86     BB 78 BC 78 
35a8a     BC 78 BC 78 
35a8e     BC 78 BB 78 
35a92     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35a96     BC 78 BC 78 
35a9a     BC 78 BB 78 
35a9e     BC 78 BB 78 
35aa2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35aa6     BC 78 BC 78 
35aaa     BC 78 BC 78 
35aae     BB 78 BC 78 
35ab2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
35ab6     BC 78 9F 78 
35aba     52 79 B3 84 
35abe     2F 86 60 87 
35ac2     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
35ac6     44 87 43 87 
35aca     43 87 43 87 
35ace     43 87 43 87 
35ad2     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
35ad6     43 87 43 87 
35ada     43 87 44 87 
35ade     43 87 43 87 
35ae2     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
35ae6     43 87 43 87 
35aea     43 87 43 87 
35aee     43 87 44 87 
35af2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
35af6     44 87 44 87 
35afa     5E 87 BC 80 
35afe     FB 80 94 78 
35b02     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
35b06     BD 78 BC 78 
35b0a     BB 78 BC 78 
35b0e     BB 78 BB 78 
35b12     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
35b16     BC 78 BB 78 
35b1a     BB 78 6B 79 
35b1e     D6 77 AC 87 
35b22     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
35b26     43 87 44 87 
35b2a     43 87 43 87 
35b2e     44 87 43 87 
35b32     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
35b36     43 87 44 87 
35b3a     43 87 5C 87 
35b3e     E7 80 00 80 
35b42     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
35b46     BC 78 BD 78 
35b4a     BC 78 BC 78 
35b4e     BC 78 BB 78 
35b52     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35b56     BC 78 BC 78 
35b5a     BB 78 BC 78 
35b5e     BB 78 BC 78 
35b62     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35b66     BB 78 BC 78 
35b6a     BC 78 BC 78 
35b6e     BC 78 BC 78 
35b72     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35b76     BC 78 BC 78 
35b7a     BC 78 BC 78 
35b7e     A0 78 8D 7B 
35b82     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
35b86     60 87 43 87 
35b8a     44 87 44 87 
35b8e     43 87 43 87 
35b92     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
35b96     44 87 43 87 
35b9a     43 87 43 87 
35b9e     44 87 73 86 
35ba2     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
35ba6     51 7B B6 78 
35baa     BC 78 BD 78 
35bae     BC 78 BC 78 
35bb2     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35bb6     BB 78 BC 78 
35bba     BD 78 BB 78 
35bbe     BC 78 BB 78 
35bc2     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
35bc6     BC 78 BC 78 
35bca     BC 78 BC 78 
35bce     BB 78 BC 78 
35bd2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35bd6     BC 78 BB 78 
35bda     BB 78 BC 78 
35bde     BC 78 BB 78 
35be2     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
35be6     22 8C AF 84 
35bea     48 87 43 87 
35bee     44 87 43 87 
35bf2     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
35bf6     43 87 42 87 
35bfa     43 87 43 87 
35bfe     44 87 43 87 
35c02     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
35c06     43 87 43 87 
35c0a     44 87 44 87 
35c0e     43 87 43 87 
35c12     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
35c16     43 87 43 87 
35c1a     43 87 43 87 
35c1e     44 87 43 87 
35c22     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
35c26     9F 8B D6 77 
35c2a     16 7C B3 78 
35c2e     BC 78 BB 78 
35c32     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
35c36     BB 78 BC 78 
35c3a     BB 78 BC 78 
35c3e     BC 78 BC 78 
35c42     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35c46     BC 78 BB 78 
35c4a     BB 78 BC 78 
35c4e     BB 78 BC 78 
35c52     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
35c56     BB 78 BB 78 
35c5a     BC 78 BC 78 
35c5e     BC 78 BB 78 
35c62     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
35c66     BC 78 BC 78 
35c6a     BC 78 BD 78 
35c6e     BB 78 BC 78 
35c72     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
35c76     BC 78 BC 78 
35c7a     BC 78 BB 78 
35c7e     BC 78 BC 78 
35c82     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35c86     A8 78 54 7E 
35c8a     F4 83 17 82 
35c8e     50 87 43 87 
35c92     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
35c96     44 87 43 87 
35c9a     44 87 43 87 
35c9e     43 87 44 87 
35ca2     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
35ca6     43 87 28 87 
35caa     20 85 CF 7A 
35cae     70 7D AD 78 
35cb2     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
35cb6     BB 78 BC 78 
35cba     BC 78 BC 78 
35cbe     BB 78 BB 78 
35cc2     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
35cc6     BB 78 B2 78 
35cca     9A 7C CF 7A 
35cce     4A 87 0D 87 
35cd2     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
35cd6     43 87 44 87 
35cda     43 87 44 87 
35cde     43 87 43 87 
35ce2     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
35ce6     44 87 43 87 
35cea     28 87 51 85 
35cee     11 7A 1E 7D 
35cf2     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
35cf6     BC 78 BB 78 
35cfa     BC 78 BC 78 
35cfe     BC 78 BC 78 
35d02     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35d06     BB 78 BC 78 
35d0a     BB 78 BC 78 
35d0e     BC 78 BC 78 
35d12     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35d16     BB 78 BC 78 
35d1a     BC 78 BC 78 
35d1e     BD 78 BB 78 
35d22     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
35d26     BC 78 BB 78 
35d2a     BC 78 BC 78 
35d2e     BC 78 BB 78 
35d32     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35d36     BC 78 BC 78 
35d3a     BC 78 BC 78 
35d3e     BB 78 BC 78 
35d42     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35d46     BC 78 BD 78 
35d4a     BC 78 BC 78 
35d4e     BC 78 BB 78 
35d52     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35d56     BC 78 BB 78 
35d5a     BB 78 BC 78 
35d5e     BC 78 BB 78 
35d62     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35d66     BB 78 BB 78 
35d6a     BB 78 BC 78 
35d6e     B6 78 48 7D 
35d72     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
35d76     56 87 43 87 
35d7a     42 87 44 87 
35d7e     44 87 43 87 
35d82     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
35d86     43 87 44 87 
35d8a     43 87 44 87 
35d8e     4C 87 7E 83 
35d92     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
35d96     F7 78 BC 78 
35d9a     BC 78 BB 78 
35d9e     BB 78 BC 78 
35da2     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35da6     BC 78 BB 78 
35daa     BC 78 BC 78 
35dae     BB 78 BC 78 
35db2     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
35db6     BB 78 BC 78 
35dba     BC 78 BC 78 
35dbe     BC 78 BB 78 
35dc2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35dc6     BC 78 BC 78 
35dca     BC 78 BC 78 
35dce     BC 78 BB 78 
35dd2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35dd6     BC 78 BB 78 
35dda     BB 78 BC 78 
35dde     BC 78 BB 78 
35de2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35de6     BC 78 BC 78 
35dea     BB 78 BC 78 
35dee     BC 78 BC 78 
35df2     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
35df6     73 32 00 04 
35dfa     00 00 10 00 
35dfe     00 00 00 00 
35e02     00 00 00 00 | atari12 file "atari12.s2"
35e06     00 6D 00 6D 
35e0a     00 6D 00 6D 
35e0e     00 6D 00 6D 
35e12     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35e16     00 6D 00 6D 
35e1a     00 6D 00 6D 
35e1e     00 6D 00 6D 
35e22     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35e26     00 6D 00 6D 
35e2a     00 6D 00 6D 
35e2e     00 6D 00 6D 
35e32     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35e36     00 6D 00 6D 
35e3a     00 6D 00 6D 
35e3e     00 6D 00 6D 
35e42     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35e46     00 6D 00 6D 
35e4a     00 6D 00 6D 
35e4e     00 6D 00 6D 
35e52     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
35e56     00 6C 00 6C 
35e5a     00 6C 00 6C 
35e5e     00 6C 00 6C 
35e62     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35e66     00 6C 00 6C 
35e6a     00 6C 00 6C 
35e6e     00 6C 00 6C 
35e72     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35e76     00 6C 00 6C 
35e7a     00 6C 00 6C 
35e7e     00 6C 00 6C 
35e82     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35e86     00 6C 00 6C 
35e8a     00 6C 00 6C 
35e8e     00 6C 00 6C 
35e92     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35e96     00 6C 00 6C 
35e9a     00 6C 00 6C 
35e9e     00 6C 00 6C 
35ea2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35ea6     00 6C 00 6C 
35eaa     00 6C 00 6C 
35eae     00 6C 00 6C 
35eb2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35eb6     00 6C 00 6C 
35eba     00 6C 00 6C 
35ebe     00 6C 00 6C 
35ec2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35ec6     00 6C 00 6C 
35eca     00 6C 00 6C 
35ece     00 6C 00 6C 
35ed2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35ed6     00 6C 00 6C 
35eda     00 6C 00 6C 
35ede     00 6C 00 6C 
35ee2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35ee6     00 6C 00 6C 
35eea     00 6C 00 6C 
35eee     00 6C 00 6C 
35ef2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35ef6     00 6C 00 6C 
35efa     00 6C 00 6C 
35efe     00 6C 00 6C 
35f02     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35f06     00 6C 00 6B 
35f0a     00 6B 00 6B 
35f0e     00 6B 00 6B 
35f12     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35f16     00 6B 00 6B 
35f1a     00 6B 00 6B 
35f1e     00 6B 00 6B 
35f22     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35f26     00 6B 00 6B 
35f2a     00 6B 00 6B 
35f2e     00 6B 00 6B 
35f32     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35f36     00 6B 00 6B 
35f3a     00 6B 00 6B 
35f3e     00 6B 00 6B 
35f42     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35f46     00 6B 00 6B 
35f4a     00 6B 00 6B 
35f4e     00 6B 00 6B 
35f52     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35f56     00 6B 00 6B 
35f5a     00 6B 00 6B 
35f5e     00 6B 00 6B 
35f62     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35f66     00 6B 00 6B 
35f6a     00 6B 00 6B 
35f6e     00 6B 00 6B 
35f72     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35f76     00 6B 00 6B 
35f7a     00 6B 00 6B 
35f7e     00 6B 00 6B 
35f82     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35f86     00 6B 00 6B 
35f8a     00 6B 00 6B 
35f8e     00 6B 00 6B 
35f92     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35f96     00 6B 00 6B 
35f9a     00 6B 00 6B 
35f9e     00 6A 00 9D 
35fa2     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
35fa6     00 9E 00 9E 
35faa     00 9E 00 9E 
35fae     00 9E 00 9E 
35fb2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35fb6     00 9E 00 9E 
35fba     00 9E 00 9E 
35fbe     00 9E 00 9E 
35fc2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35fc6     00 9E 00 9E 
35fca     00 9E 00 9E 
35fce     00 9E 00 9E 
35fd2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35fd6     00 9E 00 9E 
35fda     00 9E 00 9E 
35fde     00 9E 00 9E 
35fe2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35fe6     00 9E 00 9E 
35fea     00 9E 00 9E 
35fee     00 9E 00 9E 
35ff2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35ff6     00 9E 00 9E 
35ffa     00 9E 00 9E 
35ffe     00 9E 00 9E 
36002     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
36006     00 9E 00 9E 
3600a     00 9E 00 9E 
3600e     00 9E 00 9E 
36012     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
36016     00 9E 00 9E 
3601a     00 9E 00 9E 
3601e     00 9E 00 9E 
36022     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
36026     00 9E 00 9E 
3602a     00 9E 00 9E 
3602e     00 9E 00 9E 
36032     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
36036     00 9F 00 9F 
3603a     00 9F 00 9F 
3603e     00 9F 00 9F 
36042     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
36046     00 9F 00 9F 
3604a     00 9F 00 9F 
3604e     00 9F 00 9F 
36052     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
36056     00 9F 00 9F 
3605a     00 9F 00 9F 
3605e     00 9F 00 9F 
36062     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
36066     00 9F 00 9F 
3606a     00 9F 00 9F 
3606e     00 9F 00 9F 
36072     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
36076     00 9F 00 9F 
3607a     00 9F 00 9F 
3607e     00 9F 00 9F 
36082     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
36086     00 9F 00 9F 
3608a     00 9F 00 9F 
3608e     00 9F 00 9F 
36092     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
36096     00 9F 00 9F 
3609a     00 9F 00 9F 
3609e     00 9F 00 9F 
360a2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
360a6     00 9F 00 9F 
360aa     00 9F 00 9F 
360ae     00 9F 00 9F 
360b2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
360b6     00 9F 00 9F 
360ba     00 9F 00 9F 
360be     00 9F 00 9F 
360c2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
360c6     00 9F 00 9F 
360ca     00 9F 00 9F 
360ce     00 9F 00 9F 
360d2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
360d6     00 9F 00 9F 
360da     00 9F 00 9F 
360de     00 9F 00 9F 
360e2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
360e6     00 9F 00 9F 
360ea     00 9F 00 9F 
360ee     00 9F 00 9F 
360f2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
360f6     00 9F 00 9F 
360fa     00 9F 00 A0 
360fe     00 A0 00 A0 
36102     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36106     00 A0 00 A0 
3610a     00 A0 00 A0 
3610e     00 A0 00 A0 
36112     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36116     00 A0 00 A0 
3611a     00 A0 00 A0 
3611e     00 A0 00 A0 
36122     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36126     00 A0 00 A0 
3612a     00 A0 00 A0 
3612e     00 A0 00 A0 
36132     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36136     00 A0 00 A0 
3613a     00 A0 00 A0 
3613e     00 A0 00 A0 
36142     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36146     00 A0 00 A0 
3614a     00 A0 00 A0 
3614e     00 A0 00 A0 
36152     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36156     00 A0 00 A0 
3615a     00 A0 00 A0 
3615e     00 A0 00 A0 
36162     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36166     00 A0 00 A0 
3616a     00 A0 00 A0 
3616e     00 A0 00 A0 
36172     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36176     00 A0 00 A0 
3617a     00 A0 00 A0 
3617e     00 A0 00 A0 
36182     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36186     00 A0 00 A0 
3618a     00 A0 00 A0 
3618e     00 A0 00 A0 
36192     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36196     00 A0 00 A0 
3619a     00 A0 00 A0 
3619e     00 A0 00 A0 
361a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361a6     00 A0 00 A0 
361aa     00 A0 00 A0 
361ae     00 A0 00 A0 
361b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361b6     00 A0 00 A0 
361ba     00 A0 00 A0 
361be     00 A0 00 A0 
361c2     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
361c6     00 6D 00 6D 
361ca     00 6D 00 6D 
361ce     00 6D 00 6D 
361d2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
361d6     00 6D 00 6D 
361da     00 6D 00 6D 
361de     00 6D 00 6D 
361e2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
361e6     00 6D 00 6D 
361ea     00 6D 00 6D 
361ee     00 6D 00 6D 
361f2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
361f6     00 6D 00 6D 
361fa     00 6D 00 6D 
361fe     00 6D 00 6D 
36202     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36206     00 6D 00 6D 
3620a     00 6D 00 6D 
3620e     00 6D 00 6D 
36212     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36216     00 6D 00 6D 
3621a     00 6D 00 6D 
3621e     00 6D 00 6D 
36222     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36226     00 6D 00 6D 
3622a     00 6D 00 6D 
3622e     00 6D 00 6D 
36232     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36236     00 6D 00 6D 
3623a     00 6D 00 6D 
3623e     00 6D 00 6D 
36242     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36246     00 6D 00 6D 
3624a     00 A0 00 A0 
3624e     00 A0 00 A0 
36252     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36256     00 A0 00 A0 
3625a     00 A0 00 A0 
3625e     00 A0 00 A0 
36262     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36266     00 A0 00 A0 
3626a     00 A0 00 A0 
3626e     00 A0 00 A0 
36272     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36276     00 A0 00 A0 
3627a     00 A0 00 A0 
3627e     00 A0 00 A0 
36282     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36286     00 A0 00 A0 
3628a     00 A0 00 A0 
3628e     00 A0 00 A0 
36292     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36296     00 A0 00 A0 
3629a     00 A0 00 A0 
3629e     00 A0 00 A0 
362a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
362a6     00 A0 00 A0 
362aa     00 A0 00 A0 
362ae     00 A0 00 A0 
362b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
362b6     00 A0 00 A0 
362ba     00 A0 00 A0 
362be     00 A0 00 A0 
362c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
362c6     00 A0 00 A0 
362ca     00 A0 00 A0 
362ce     00 A0 00 A0 
362d2     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
362d6     00 6D 00 6D 
362da     00 6D 00 6D 
362de     00 6D 00 6D 
362e2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
362e6     00 6D 00 6D 
362ea     00 6D 00 6D 
362ee     00 6D 00 6D 
362f2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
362f6     00 6D 00 6D 
362fa     00 6D 00 6D 
362fe     00 6D 00 6D 
36302     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36306     00 6D 00 6D 
3630a     00 6D 00 6D 
3630e     00 6D 00 6D 
36312     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36316     00 6D 00 6D 
3631a     00 6D 00 6D 
3631e     00 6D 00 6D 
36322     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36326     00 6D 00 6D 
3632a     00 6D 00 6D 
3632e     00 6D 00 6D 
36332     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36336     00 6D 00 6D 
3633a     00 6D 00 6D 
3633e     00 6D 00 6D 
36342     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36346     00 6D 00 6D 
3634a     00 6D 00 6D 
3634e     00 6D 00 6D 
36352     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36356     00 6D 00 6D 
3635a     00 6C 00 A0 
3635e     00 9F 00 A0 
36362     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
36366     00 A0 00 A0 
3636a     00 A0 00 A0 
3636e     00 A0 00 A0 
36372     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36376     00 A0 00 A0 
3637a     00 A0 00 A0 
3637e     00 A0 00 A0 
36382     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36386     00 A0 00 A0 
3638a     00 A0 00 A0 
3638e     00 A0 00 A0 
36392     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36396     00 A0 00 A0 
3639a     00 A0 00 A0 
3639e     00 A0 00 A0 
363a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363a6     00 A0 00 A0 
363aa     00 A0 00 A0 
363ae     00 A0 00 A0 
363b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363b6     00 A0 00 A0 
363ba     00 A0 00 A0 
363be     00 A0 00 A0 
363c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363c6     00 A0 00 A0 
363ca     00 A0 00 A0 
363ce     00 A0 00 A0 
363d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363d6     00 A0 00 A0 
363da     00 A0 00 A0 
363de     00 A0 00 A0 
363e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363e6     00 A0 00 A0 
363ea     00 A0 00 A0 
363ee     00 A0 00 A0 
363f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363f6     00 A0 00 A0 
363fa     00 A0 00 A0 
363fe     00 A0 00 A0 
36402     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36406     00 A0 00 A0 
3640a     00 A0 00 A0 
3640e     00 A0 00 A0 
36412     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
36416     00 A1 00 A1 
3641a     00 A1 00 A1 
3641e     00 A1 00 A1 
36422     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
36426     00 A1 00 A1 
3642a     00 A1 00 A1 
3642e     00 A1 00 A1 
36432     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
36436     00 A1 00 A1 
3643a     00 A1 00 A1 
3643e     00 A1 00 A1 
36442     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
36446     00 A1 00 A1 
3644a     00 A1 00 A1 
3644e     00 A1 00 A1 
36452     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
36456     00 A1 00 A1 
3645a     00 A1 00 A1 
3645e     00 A1 00 A1 
36462     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
36466     00 A1 00 A1 
3646a     00 A1 00 A1 
3646e     00 6E 00 6E 
36472     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
36476     00 6E 00 6E 
3647a     00 6E 00 6E 
3647e     00 6E 00 6E 
36482     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
36486     00 6E 00 6E 
3648a     00 6E 00 6E 
3648e     00 6E 00 6E 
36492     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
36496     00 6E 00 6E 
3649a     00 6E 00 6E 
3649e     00 6E 00 6E 
364a2     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
364a6     00 6E 00 6D 
364aa     00 6D 00 6D 
364ae     00 6D 00 6D 
364b2     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
364b6     00 6D 00 6D 
364ba     00 6D 00 6D 
364be     00 6D 00 6D 
364c2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
364c6     00 6D 00 6D 
364ca     00 6D 00 6D 
364ce     00 6D 00 6D 
364d2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
364d6     00 6D 00 6D 
364da     00 6D 00 6D 
364de     00 6D 00 6D 
364e2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
364e6     00 6D 00 6D 
364ea     00 6D 00 6D 
364ee     00 6D 00 6D 
364f2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
364f6     00 6D 00 6D 
364fa     00 6D 00 6D 
364fe     00 6D 00 6D 
36502     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36506     00 6D 00 6D 
3650a     00 6D 00 6D 
3650e     00 6D 00 6D 
36512     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36516     00 6D 00 6D 
3651a     00 6D 00 6D 
3651e     00 6D 00 6D 
36522     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36526     00 6D 00 6D 
3652a     00 6D 00 6D 
3652e     00 6D 00 6D 
36532     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36536     00 6D 00 6D 
3653a     00 6D 00 6D 
3653e     00 6D 00 6D 
36542     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36546     00 6D 00 6D 
3654a     00 6D 00 6D 
3654e     00 6D 00 6D 
36552     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36556     00 6D 00 6D 
3655a     00 6C 00 6C 
3655e     00 6C 00 6C 
36562     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36566     00 6C 00 6C 
3656a     00 6C 00 6C 
3656e     00 6C 00 6C 
36572     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36576     00 6C 00 6C 
3657a     00 6C 00 6C 
3657e     00 9D 00 9F 
36582     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
36586     00 9F 00 9F 
3658a     00 9F 00 9F 
3658e     00 A0 00 A0 
36592     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36596     00 A0 00 A0 
3659a     00 A0 00 A0 
3659e     00 A0 00 A0 
365a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
365a6     00 A0 00 A0 
365aa     00 A0 00 A0 
365ae     00 A0 00 A0 
365b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
365b6     00 A0 00 A0 
365ba     00 A0 00 A0 
365be     00 A0 00 A0 
365c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
365c6     00 A0 00 A0 
365ca     00 A0 00 A0 
365ce     00 A0 00 A0 
365d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
365d6     00 A0 00 A0 
365da     00 A0 00 A0 
365de     00 A0 00 A0 
365e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
365e6     00 A0 00 A0 
365ea     00 A0 00 A0 
365ee     00 A0 00 A0 
365f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
365f6     00 A0 00 A0 
365fa     00 A0 00 A0 
365fe     00 A0 00 A0 
36602     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36606     01 00 00 00 
3660a     00 00 00 00 
3660e     00 00 00 00 
36612     00 00 00 00 | mouse  file "mouse2.def"
36616     00 00 00 00 
3661a     00 00 00 00 
3661e     00 00 00 00 
36622     00 00 00 00 | 	byte	$00[16]
36626     01 01 00 00 
3662a     00 00 00 00 
3662e     00 00 00 00 
36632     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36636     00 00 00 00 
3663a     00 00 00 00 
3663e     00 00 00 00 
36642     00 00 00 00 | 	byte	$00[16]
36646     01 0D 01 00 
3664a     00 00 00 00 
3664e     00 00 00 00 
36652     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36656     00 00 00 00 
3665a     00 00 00 00 
3665e     00 00 00 00 
36662     00 00 00 00 | 	byte	$00[16]
36666     01 0D 0D 01 
3666a     00 00 00 00 
3666e     00 00 00 00 
36672     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36676     00 00 00 00 
3667a     00 00 00 00 
3667e     00 00 00 00 
36682     00 00 00 00 | 	byte	$00[16]
36686     01 0D 0D 0D 
3668a     01 00 00 00 
3668e     00 00 00 00 
36692     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36696     00 00 00 00 
3669a     00 00 00 00 
3669e     00 00 00 00 
366a2     00 00 00 00 | 	byte	$00[16]
366a6     01 0D 0D 0D 
366aa     0D 01 00 00 
366ae     00 00 00 00 
366b2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
366b6     00 00 00 00 
366ba     00 00 00 00 
366be     00 00 00 00 
366c2     00 00 00 00 | 	byte	$00[16]
366c6     01 0D 0D 0D 
366ca     0D 0D 01 00 
366ce     00 00 00 00 
366d2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
366d6     00 00 00 00 
366da     00 00 00 00 
366de     00 00 00 00 
366e2     00 00 00 00 | 	byte	$00[16]
366e6     01 0D 0D 0D 
366ea     0D 0D 0D 01 
366ee     00 00 00 00 
366f2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
366f6     00 00 00 00 
366fa     00 00 00 00 
366fe     00 00 00 00 
36702     00 00 00 00 | 	byte	$00[16]
36706     01 0D 0D 0D 
3670a     0D 0D 0D 0C 
3670e     01 00 00 00 
36712     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
36716     00 00 00 00 
3671a     00 00 00 00 
3671e     00 00 00 00 
36722     00 00 00 00 | 	byte	$00[16]
36726     01 0D 0D 0D 
3672a     0D 0D 0D 0D 
3672e     0C 01 00 00 
36732     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
36736     00 00 00 00 
3673a     00 00 00 00 
3673e     00 00 00 00 
36742     00 00 00 00 | 	byte	$00[16]
36746     01 0D 0D 0D 
3674a     0D 0D 0D 0D 
3674e     0D 0C 01 00 
36752     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
36756     00 00 00 00 
3675a     00 00 00 00 
3675e     00 00 00 00 
36762     00 00 00 00 | 	byte	$00[16]
36766     01 0D 0D 0D 
3676a     0D 0D 0D 0D 
3676e     0D 0D 0B 01 
36772     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
36776     00 00 00 00 
3677a     00 00 00 00 
3677e     00 00 00 00 
36782     00 00 00 00 | 	byte	$00[16]
36786     01 0D 0D 0D 
3678a     0C 0D 0D 03 
3678e     01 01 01 01 
36792     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
36796     00 00 00 00 
3679a     00 00 00 00 
3679e     00 00 00 00 
367a2     00 00 00 00 | 	byte	$00[16]
367a6     01 0D 0D 0C 
367aa     01 09 0D 03 
367ae     00 00 00 00 
367b2     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
367b6     00 00 00 00 
367ba     00 00 00 00 
367be     00 00 00 00 
367c2     00 00 00 00 | 	byte	$00[16]
367c6     01 0D 0C 01 
367ca     00 01 0D 0B 
367ce     01 00 00 00 
367d2     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
367d6     00 00 00 00 
367da     00 00 00 00 
367de     00 00 00 00 
367e2     00 00 00 00 | 	byte	$00[16]
367e6     01 0C 01 00 
367ea     00 01 0A 0D 
367ee     01 00 00 00 
367f2     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
367f6     00 00 00 00 
367fa     00 00 00 00 
367fe     00 00 00 00 
36802     00 00 00 00 | 	byte	$00[16]
36806     01 01 00 00 
3680a     00 00 01 0D 
3680e     0B 01 00 00 
36812     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
36816     00 00 00 00 
3681a     00 00 00 00 
3681e     00 00 00 00 
36822     00 00 00 00 
36826     00 00 00 00 
3682a     00 00       | 	byte	$00[22]
3682c     01 0B 0D 01 
36830     00 00 00 00 
36834     00 00 00 00 
36838     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3683c     00 00 00 00 
36840     00 00 00 00 
36844     00 00 00 00 
36848     00 00 00 00 
3684c     00          | 	byte	$00[17]
3684d     01 01 00 00 
36851     00 00 00 00 
36855     00 00 00 00 
36859     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3685d     00 00 00 00 
      ...             
36a01     00 00 00 00 
36a05     00          | 	byte	$00[425]
36a06                 | 
36a06     00 00       |              	org
36a08 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
36a0c 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
36a10 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
36a14 003             | 
36a14 003 00 30 04 F6 |                 mov     psramaddr,#0
36a18 004             | 
36a18 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
36a1c 005 20 00 00 FF 
36a20 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
36a24 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
36a28 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
36a2c 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
36a30 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
36a34 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
36a38 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
36a3c 00d             | 
36a3c 00d 20 00 00 FF 
36a40 00e 00 30 04 F1 |                 add 	psramaddr,##16384
36a44 00f E0 03 00 FF 
36a48 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
36a4c 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
36a50 012             | 
36a50 012             |                 
36a50 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
36a54 013             |     
36a54 013 01 2C 60 FD |                 cogid 	t11				' get id
36a58 014 00 00 EC FC |                 coginit #0,#0				' start the new program
36a5c 015 03 2C 60 FD |                 cogstop t11				' stop the loader
36a60 016             | 
36a60 016 00 00 00 00 | t11 		long 	0
36a64 017 00 FF 07 00 | mailbox 	long 	$7FF00
36a68 018 00 00 00 00 | psramaddr 	long 	0
36a6c 019 00 00 00 00 | pslockval	long 	0
36a70 01a 00 00 00 00 | cmd             long    0
36a74 01b 00 00 00 00 | buf1            long    0
36a78 01c 00 40 00 00 | buf2            long    16384
36a7c 01d 80 6A 03 00 | 	long	@@@_dat_ + 12612
36a80 01e 50 32 20 52 
36a84 01f 65 74 72 6F 
36a88 020 6D 61 63 68 
36a8c 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
36a90 022 42 41 53 49 
36a94 023 43 20 76 65 
36a98 024 72 73 69 6F 
36a9c 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
36aa0 026 35 31 00 00 | 	byte	$35, $31, $00, $00
36aa4 027             | 	alignl
36aa4 027             | _hg010b_spin2_dat_
36aa4 027             | 
36aa4 027 00 00 00 00 
36aa8 028 00 00 00 00 
36aac 029 00 00 00 00 
36ab0 02a 00 00 00 00 
36ab4 02b 00 00 00    | vga_font       file "vgafont.def"
36ab7 02b 7E 81 A5 81 
36abb 02c 81 BD 99 81 
36abf 02d 81 7E 00 00 
36ac3 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
36ac7 02f 7E FF DB FF 
36acb 030 FF C3 E7 FF 
36acf 031 FF 7E 00 00 
36ad3 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
36ad7 033 00 36 7F 7F 
36adb 034 7F 7F 3E 1C 
36adf 035 08 00 00 00 
36ae3 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
36ae7 037 00 08 1C 3E 
36aeb 038 7F 3E 1C 08 
36aef 039 00 00 00 00 
36af3 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
36af7 03b 18 3C 3C E7 
36afb 03c E7 E7 18 18 
36aff 03d 3C 00 00 00 
36b03 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
36b07 03f 18 3C 7E FF 
36b0b 040 FF 7E 18 18 
36b0f 041 3C 00 00 00 
36b13 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
36b17 043 00 00 00 18 
36b1b 044 3C 3C 18 00 
36b1f 045 00 00 00 00 
36b23 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
36b27 047 FF FF FF E7 
36b2b 048 C3 C3 E7 FF 
36b2f 049 FF FF FF FF 
36b33 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
36b37 04b 00 00 3C 66 
36b3b 04c 42 42 66 3C 
36b3f 04d 00 00 00 00 
36b43 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
36b47 04f FF FF C3 99 
36b4b 050 BD BD 99 C3 
36b4f 051 FF FF FF FF 
36b53 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
36b57 053 78 70 58 4C 
36b5b 054 1E 33 33 33 
36b5f 055 33 1E 00 00 
36b63 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
36b67 057 3C 66 66 66 
36b6b 058 66 3C 18 7E 
36b6f 059 18 18 00 00 
36b73 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
36b77 05b FC CC FC 0C 
36b7b 05c 0C 0C 0C 0E 
36b7f 05d 0F 07 00 00 
36b83 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
36b87 05f FE C6 FE C6 
36b8b 060 C6 C6 C6 E6 
36b8f 061 E7 67 03 00 
36b93 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
36b97 063 18 18 DB 3C 
36b9b 064 E7 3C DB 18 
36b9f 065 18 00 00 00 
36ba3 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
36ba7 067 03 07 0F 1F 
36bab 068 7F 1F 0F 07 
36baf 069 03 01 00 00 
36bb3 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
36bb7 06b 60 70 78 7C 
36bbb 06c 7F 7C 78 70 
36bbf 06d 60 40 00 00 
36bc3 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
36bc7 06f 18 3C 7E 18 
36bcb 070 18 18 7E 3C 
36bcf 071 18 00 00 00 
36bd3 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
36bd7 073 66 66 66 66 
36bdb 074 66 66 66    | 	byte	$66[7]
36bde 075 00 66 66 00 
36be2 076 00 00 00 00 
36be6 077 00 FE DB DB 
36bea 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
36bee 079 D8 D8 D8 00 
36bf2 07a 00 00 00 3E 
36bf6 07b 63 06 1C 36 
36bfa 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
36bfe 07d 30 63 3E 00 
36c02 07e 00 00 00 00 
36c06 07f 00 00 00 00 
36c0a 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
36c0e 081 7F 7F 7F 00 
36c12 082 00 00 00 00 
36c16 083 00 18 3C 7E 
36c1a 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
36c1e 085 3C 18 7E 00 
36c22 086 00 00 00 00 
36c26 087 00 18 3C 7E 
36c2a 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
36c2e 089 18 18 18 00 
36c32 08a 00 00 00 00 
36c36 08b 00 18 18 18 
36c3a 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
36c3e 08d 7E 3C 18 00 
36c42 08e 00 00 00 00 
36c46 08f 00 00 00 18 
36c4a 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
36c4e 091 00 00 00 00 
36c52 092 00 00 00 00 
36c56 093 00 00 00    | 	byte	$00[11]
36c59 094 0C 06 7F 06 
36c5d 095 0C 00 00 00 
36c61 096 00 00 00 00 
36c65 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36c69 098 00 03 03 03 
36c6d 099 7F 00 00 00 
36c71 09a 00 00 00 00 
36c75 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36c79 09c 14 36 7F 36 
36c7d 09d 14 00 00 00 
36c81 09e 00 00 00 00 
36c85 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
36c89 0a0 1C 1C 3E 3E 
36c8d 0a1 7F 7F 00 00 
36c91 0a2 00 00 00 00 
36c95 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
36c99 0a4 7F 3E 3E 1C 
36c9d 0a5 1C 08 00 00 
36ca1 0a6 00 00 00 00 
36ca5 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ca9 0a8 00 00 00 00 
36cad 0a9 00 00 00 00 
36cb1 0aa 00 00 00 00 
36cb5 0ab 00 00       | 	byte	$00[14]
36cb7 0ab 18 3C 3C 3C 
36cbb 0ac 18 18 18 00 
36cbf 0ad 18 18 00 00 
36cc3 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
36cc7 0af 66 24 00 00 
36ccb 0b0 00 00 00 00 
36ccf 0b1 00 00 00 00 
36cd3 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36cd7 0b3 00 36 36 7F 
36cdb 0b4 36 36 36 7F 
36cdf 0b5 36 36 00 00 
36ce3 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
36ce7 0b7 3E 63 43 03 
36ceb 0b8 3E 60 60 61 
36cef 0b9 63 3E 18 18 
36cf3 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
36cf7 0bb 00 00 43 63 
36cfb 0bc 30 18 0C 06 
36cff 0bd 63 61 00 00 
36d03 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
36d07 0bf 1C 36 36 1C 
36d0b 0c0 6E 3B 33 33 
36d0f 0c1 33 6E 00 00 
36d13 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
36d17 0c3 0C 0C 0C 06 
36d1b 0c4 00 00 00 00 
36d1f 0c5 00 00 00 00 
36d23 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36d27 0c7 30 18 0C 0C 
36d2b 0c8 0C 0C 0C 0C 
36d2f 0c9 18 30 00 00 
36d33 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
36d37 0cb 0C 18 30 30 
36d3b 0cc 30 30 30 30 
36d3f 0cd 18 0C 00 00 
36d43 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
36d47 0cf 00 00 00 66 
36d4b 0d0 3C FF 3C 66 
36d4f 0d1 00 00 00 00 
36d53 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
36d57 0d3 00 00 00 18 
36d5b 0d4 18 7E 18 18 
36d5f 0d5 00 00 00 00 
36d63 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
36d67 0d7 00 00 00 00 
36d6b 0d8 00 00 00 00 | 	byte	$00[8]
36d6f 0d9 18 18 18 0C 
36d73 0da 00 00 00 00 
36d77 0db 00 00 00 00 
36d7b 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
36d7f 0dd 00 00 00 00 
36d83 0de 00 00 00 00 
36d87 0df 00 00 00 00 
36d8b 0e0 00 00 00 00 | 	byte	$00[16]
36d8f 0e1 18 18 00 00 
36d93 0e2 00 00 00 00 
36d97 0e3 00 00 40 60 
36d9b 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
36d9f 0e5 03 01 00 00 
36da3 0e6 00 00 00 00 
36da7 0e7 1C 36 63 63 
36dab 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
36daf 0e9 36 1C 00 00 
36db3 0ea 00 00 00 00 
36db7 0eb 18 1C 1E 18 
36dbb 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
36dbf 0ed 18 7E 00 00 
36dc3 0ee 00 00 00 00 
36dc7 0ef 3E 63 60 30 
36dcb 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
36dcf 0f1 63 7F 00 00 
36dd3 0f2 00 00 00 00 
36dd7 0f3 3E 63 60 60 
36ddb 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
36ddf 0f5 63 3E 00 00 
36de3 0f6 00 00 00 00 
36de7 0f7 30 38 3C 36 
36deb 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
36def 0f9 30 78 00 00 
36df3 0fa 00 00 00 00 
36df7 0fb 7F 03 03 03 
36dfb 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
36dff 0fd 63 3E 00 00 
36e03 0fe 00 00 00 00 
36e07 0ff 1C 06 03 03 
36e0b 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
36e0f 101 63 3E 00 00 
36e13 102 00 00 00 00 
36e17 103 7F 63 60 60 
36e1b 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
36e1f 105 0C 0C 00 00 
36e23 106 00 00 00 00 
36e27 107 3E 63 63 63 
36e2b 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
36e2f 109 63 3E 00 00 
36e33 10a 00 00 00 00 
36e37 10b 3E 63 63 63 
36e3b 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
36e3f 10d 30 1E 00 00 
36e43 10e 00 00 00 00 
36e47 10f 00 00 00 18 
36e4b 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
36e4f 111 18 18 00 00 
36e53 112 00 00 00 00 
36e57 113 00 00 00 18 
36e5b 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
36e5f 115 18 18 0C 00 
36e63 116 00 00 00 00 
36e67 117 00 60 30 18 
36e6b 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
36e6f 119 30 60 00 00 
36e73 11a 00 00 00 00 
36e77 11b 00 00 00 7E 
36e7b 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
36e7f 11d 00 00 00 00 
36e83 11e 00 00 00 00 
36e87 11f 00          | 	byte	$00[9]
36e88 120 06 0C 18 30 
36e8c 121 60 30 18 0C 
36e90 122 06 00 00 00 
36e94 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
36e98 124 63 63 30 18 
36e9c 125 18 18 00 18 
36ea0 126 18 00 00 00 
36ea4 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
36ea8 128 3E 63 63 7B 
36eac 129 7B 7B 3B 03 
36eb0 12a 3E 00 00 00 
36eb4 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
36eb8 12c 1C 36 63 63 
36ebc 12d 7F 63 63 63 
36ec0 12e 63 00 00 00 
36ec4 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
36ec8 130 66 66 66 3E 
36ecc 131 66 66 66 66 
36ed0 132 3F 00 00 00 
36ed4 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
36ed8 134 66 43 03 03 
36edc 135 03 03 43 66 
36ee0 136 3C 00 00 00 
36ee4 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
36ee8 138 36 66 66 66 
36eec 139 66 66 66 36 
36ef0 13a 1F 00 00 00 
36ef4 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
36ef8 13c 66 46 16 1E 
36efc 13d 16 06 46 66 
36f00 13e 7F 00 00 00 
36f04 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
36f08 140 66 46 16 1E 
36f0c 141 16 06 06 06 
36f10 142 0F 00 00 00 
36f14 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
36f18 144 66 43 03 03 
36f1c 145 7B 63 63 66 
36f20 146 5C 00 00 00 
36f24 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
36f28 148 63 63 63 7F 
36f2c 149 63 63 63 63 
36f30 14a 63 00 00 00 
36f34 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
36f38 14c 18 18 18 18 
36f3c 14d 18 18 18 18 | 	byte	$18[8]
36f40 14e 3C 00 00 00 
36f44 14f 00 00 00 78 
36f48 150 30 30 30 30 
36f4c 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
36f50 152 1E 00 00 00 
36f54 153 00 00 00 67 
36f58 154 66 66 36 1E 
36f5c 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
36f60 156 67 00 00 00 
36f64 157 00 00 00 0F 
36f68 158 06 06 06 06 
36f6c 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
36f70 15a 7F 00 00 00 
36f74 15b 00 00 00 63 
36f78 15c 77 7F 7F 6B 
36f7c 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
36f80 15e 63 00 00 00 
36f84 15f 00 00 00 63 
36f88 160 67 6F 7F 7B 
36f8c 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
36f90 162 63 00 00 00 
36f94 163 00 00 00 3E 
36f98 164 63 63 63 63 
36f9c 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
36fa0 166 3E 00 00 00 
36fa4 167 00 00 00 3F 
36fa8 168 66 66 66 3E 
36fac 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
36fb0 16a 0F 00 00 00 
36fb4 16b 00 00 00 3E 
36fb8 16c 63 63 63 63 
36fbc 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
36fc0 16e 3E 30 70 00 
36fc4 16f 00 00 00 3F 
36fc8 170 66 66 66 3E 
36fcc 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
36fd0 172 67 00 00 00 
36fd4 173 00 00 00 3E 
36fd8 174 63 63 06 1C 
36fdc 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
36fe0 176 3E 00 00 00 
36fe4 177 00 00 00 7E 
36fe8 178 7E 5A 18 18 
36fec 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
36ff0 17a 3C 00 00 00 
36ff4 17b 00 00 00 63 
36ff8 17c 63 63 63 63 
36ffc 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
37000 17e 3E 00 00 00 
37004 17f 00 00 00 63 
37008 180 63 63 63 63 
3700c 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
37010 182 08 00 00 00 
37014 183 00 00 00 63 
37018 184 63 63 63 6B 
3701c 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
37020 186 36 00 00 00 
37024 187 00 00 00 63 
37028 188 63 36 3E 1C 
3702c 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
37030 18a 63 00 00 00 
37034 18b 00 00 00 66 
37038 18c 66 66 66 3C 
3703c 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
37040 18e 3C 00 00 00 
37044 18f 00 00 00 7F 
37048 190 63 61 30 18 
3704c 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
37050 192 7F 00 00 00 
37054 193 00 00 00 3C 
37058 194 0C 0C 0C 0C 
3705c 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
37060 196 3C 00 00 00 
37064 197 00 00 00 00 
37068 198 01 03 07 0E 
3706c 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
37070 19a 40 00 00 00 
37074 19b 00 00 00 3C 
37078 19c 30 30 30 30 
3707c 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
37080 19e 3C 00 00 00 
37084 19f 1C 36 00 00 
37088 1a0 00 00 00 00 
3708c 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37090 1a2 00 00 00 00 
37094 1a3 00 00 00 00 
37098 1a4 00 00 00 00 
3709c 1a5 00 00 00 00 
370a0 1a6 00          | 	byte	$00[17]
370a1 1a6 FF 00 00 0C 
370a5 1a7 18 00 00 00 
370a9 1a8 00 00 00 00 
370ad 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
370b1 1aa 00 00 00 00 
370b5 1ab 00 00 00 00 
370b9 1ac 00          | 	byte	$00[9]
370ba 1ac 1E 30 3E 33 
370be 1ad 33 33 6E 00 
370c2 1ae 00 00 00 00 
370c6 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
370ca 1b0 1E 36 66 66 
370ce 1b1 66 66 3E 00 
370d2 1b2 00 00 00 00 
370d6 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
370da 1b4 3E 63 03 03 
370de 1b5 03 63 3E 00 
370e2 1b6 00 00 00 00 
370e6 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
370ea 1b8 3C 36 33 33 
370ee 1b9 33 33 6E 00 
370f2 1ba 00 00 00 00 
370f6 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
370fa 1bc 3E 63 7F 03 
370fe 1bd 03 63 3E 00 
37102 1be 00 00 00 00 
37106 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3710a 1c0 0C 1E 0C 0C 
3710e 1c1 0C 0C 1E 00 
37112 1c2 00 00 00 00 
37116 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3711a 1c4 6E 33 33 33 
3711e 1c5 33 33 3E 30 
37122 1c6 33 1E 00 00 
37126 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3712a 1c8 36 6E 66 66 
3712e 1c9 66 66 67 00 
37132 1ca 00 00 00 00 
37136 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3713a 1cc 1C 18 18 18 
3713e 1cd 18 18 3C 00 
37142 1ce 00 00 00 00 
37146 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3714a 1d0 70 60 60 60 
3714e 1d1 60 60 60 66 
37152 1d2 66 3C 00 00 
37156 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3715a 1d4 66 36 1E 1E 
3715e 1d5 36 66 67 00 
37162 1d6 00 00 00 00 
37166 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3716a 1d8 18 18 18 18 
3716e 1d9 18 18       | 	byte	$18[6]
37170 1da 3C 00 00 00 
37174 1db 00 00 00 00 
37178 1dc 00 00 37 7F 
3717c 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
37180 1de 63 00 00 00 
37184 1df 00 00 00 00 
37188 1e0 00 00 3B 66 
3718c 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
37190 1e2 66 00 00 00 
37194 1e3 00 00 00 00 
37198 1e4 00 00 3E 63 
3719c 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
371a0 1e6 3E 00 00 00 
371a4 1e7 00 00 00 00 
371a8 1e8 00 00 3B 66 
371ac 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
371b0 1ea 3E 06 06 0F 
371b4 1eb 00 00 00 00 
371b8 1ec 00 00 6E 33 
371bc 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
371c0 1ee 3E 30 30 78 
371c4 1ef 00 00 00 00 
371c8 1f0 00 00 3B 6E 
371cc 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
371d0 1f2 0F 00 00 00 
371d4 1f3 00 00 00 00 
371d8 1f4 00 00 3E 63 
371dc 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
371e0 1f6 3E 00 00 00 
371e4 1f7 00 00 00 08 
371e8 1f8 0C 0C 3F 0C 
371ec 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
371f0 1fa 38 00 00 00 
371f4 1fb 00 00 00 00 
371f8 1fc 00 00 33 33 
371fc 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
37200 1fe 6E 00 00 00 
37204 1ff 00 00 00 00 
37208 200 00 00 63 63 
3720c 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
37210 202 1C 00 00 00 
37214 203 00 00 00 00 
37218 204 00 00 63 63 
3721c 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
37220 206 36 00 00 00 
37224 207 00 00 00 00 
37228 208 00 00 63 36 
3722c 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
37230 20a 63 00 00 00 
37234 20b 00 00 00 00 
37238 20c 00 00 63 63 
3723c 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
37240 20e 7E 60 30 1F 
37244 20f 00 00 00 00 
37248 210 00 00 7F 33 
3724c 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
37250 212 7F 00 00 00 
37254 213 00 00 00 70 
37258 214 18 18 18 0E 
3725c 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
37260 216 70 00 00 00 
37264 217 00 00 00 18 
37268 218 18 18 18 18 
3726c 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
37270 21a 18 00 00 00 
37274 21b 00 00 00 0E 
37278 21c 18 18 18 70 
3727c 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
37280 21e 0E 00 00 00 
37284 21f 6E 3B 00 00 
37288 220 00 00 00 00 
3728c 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37290 222 00 00 00 00 
37294 223 00 00 00 00 
37298 224 00 00       | 	byte	$00[10]
3729a 224 08 1C 36 63 
3729e 225 63 63 7F 00 
372a2 226 00 00 00 00 
372a6 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
372aa 228 03 03 03 03 
372ae 229 43 66 3C 18 
372b2 22a 30 1E 00 00 
372b6 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
372ba 22c 33 33 33 33 
372be 22d 33 33       | 	byte	$33[6]
372c0 22e 6E 00 00 00 
372c4 22f 00 00 60 30 
372c8 230 18 00 3E 63 
372cc 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
372d0 232 3E 00 00 00 
372d4 233 00 00 08 1C 
372d8 234 36 00 1E 30 
372dc 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
372e0 236 6E 00 00 00 
372e4 237 00 00 00 00 
372e8 238 33 00 1E 30 
372ec 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
372f0 23a 6E 00 00 00 
372f4 23b 00 00 1C 36 
372f8 23c 1C 00 33 33 
372fc 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
37300 23e 6E 00 00 00 
37304 23f 00 00 60 30 
37308 240 18 00 3E 63 
3730c 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
37310 242 3E 00 00 00 
37314 243 00 00 00 00 
37318 244 00 00 3E 63 
3731c 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
37320 246 3E 18 30 1E 
37324 247 00 00 00 1C 
37328 248 58 78 38 18 
3732c 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
37330 24a 3C 00 00 00 
37334 24b 00 00 00 00 
37338 24c 63 00 3E 63 
3733c 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
37340 24e 3E 00 00 00 
37344 24f 66 33 00 3E 
37348 250 63 63 63 63 
3734c 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
37350 252 3E 00 00 00 
37354 253 00 00 CC 66 
37358 254 33 00 3E 63 
3735c 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
37360 256 3E 00 00 00 
37364 257 00 00 18 3C 
37368 258 66 00 1C 18 
3736c 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
37370 25a 3C 00 00 00 
37374 25b 30 18 00 7F 
37378 25c 63 61 30 18 
3737c 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
37380 25e 7F 00 00 00 
37384 25f 00 63 00 08 
37388 260 1C 36 63 63 
3738c 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
37390 262 63 00 00 00 
37394 263 30 18 00 3C 
37398 264 66 43 03 03 
3739c 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
373a0 266 3C 00 00 00 
373a4 267 30 18 00 7F 
373a8 268 66 46 16 1E 
373ac 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
373b0 26a 7F 00 00 00 
373b4 26b 0C 06 00 0F 
373b8 26c 06 06 06 06 
373bc 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
373c0 26e 7F 00 00 00 
373c4 26f 30 18 00 1C 
373c8 270 18 18 18 18 
373cc 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
373d0 272 3C 00 00 00 
373d4 273 00 00 08 1C 
373d8 274 36 00 3E 63 
373dc 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
373e0 276 3E 00 00 00 
373e4 277 00 00 00 00 
373e8 278 63 00 3E 63 
373ec 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
373f0 27a 3E 00 00 00 
373f4 27b 00 00 00 6F 
373f8 27c 46 26 06 06 
373fc 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
37400 27e 7F 00 00 00 
37404 27f 00 00 00 6E 
37408 280 4C 2C 0C 0C 
3740c 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
37410 282 1E 00 00 00 
37414 283 30 18 00 3E 
37418 284 63 63 06 1C 
3741c 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
37420 286 3E 00 00 00 
37424 287 00 00 60 30 
37428 288 18 00 3E 63 
3742c 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
37430 28a 3E 00 00 00 
37434 28b 00 63 00 3E 
37438 28c 63 63 63 63 
3743c 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
37440 28e 3E 00 00 00 
37444 28f 00 63 00 63 
37448 290 63 63 63 63 
3744c 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
37450 292 3E 00 00 00 
37454 293 6C 38 00 7E 
37458 294 7E 5A 18 18 
3745c 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
37460 296 3C 00 00 00 
37464 297 00 00 60 48 
37468 298 2C 0C 3F 0C 
3746c 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
37470 29a 38 00 00 00 
37474 29b 00 00 00 0F 
37478 29c 26 36 1E 0E 
3747c 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
37480 29e 7F 00 00 00 
37484 29f 00 00 00 00 
37488 2a0 00 63 36 1C 
3748c 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
37490 2a2 00 00 00 00 
37494 2a3 00 00       | 	byte	$00[6]
37496 2a3 36 1C 08 00 
3749a 2a4 3E 63 03 03 
3749e 2a5 03 63 3E 00 
374a2 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
374a6 2a7 30 18 0C 00 
374aa 2a8 1E 30 3E 33 
374ae 2a9 33 33 6E 00 
374b2 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
374b6 2ab 60 30 18 00 
374ba 2ac 1C 18 18 18 
374be 2ad 18 18 3C 00 
374c2 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
374c6 2af 60 30 18 00 
374ca 2b0 3E 63 63 63 
374ce 2b1 63 63 3E 00 
374d2 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
374d6 2b3 30 18 0C 00 
374da 2b4 33 33 33 33 
374de 2b5 33 33 6E 00 
374e2 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
374e6 2b7 00 08 1C 36 
374ea 2b8 63 63 7F 63 
374ee 2b9 63 63 63 18 
374f2 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
374f6 2bb 00 00 00 00 
374fa 2bc 1E 30 3E 33 
374fe 2bd 33 33 6E 18 
37502 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
37506 2bf 00 7F 63 61 
3750a 2c0 30 18 0C 06 
3750e 2c1 43 63 7F 00 
37512 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
37516 2c3 36 1C 08 00 
3751a 2c4 7F 33 18 0C 
3751e 2c5 06 63 7F 00 
37522 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
37526 2c7 00 7F 66 46 
3752a 2c8 16 1E 16 06 
3752e 2c9 46 66 7F 18 
37532 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
37536 2cb 00 00 00 00 
3753a 2cc 3E 63 7F 03 
3753e 2cd 03 63 3E 18 
37542 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
37546 2cf 00 3C 66 03 
3754a 2d0 1F 03 0F 03 
3754e 2d1 03 66 3C 00 
37552 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
37556 2d3 60 30 18 00 
3755a 2d4 7F 33 18 0C 
3755e 2d5 06 63 7F 00 
37562 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
37566 2d7 00 3C 66 43 
3756a 2d8 03 03 03 03 
3756e 2d9 43 66 3C 00 
37572 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
37576 2db 00 00 00 00 
3757a 2dc 3E 63 06 1C 
3757e 2dd 30 63 3E 18 
37582 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
37586 2df 00 00 00 00 
3758a 2e0 00 00       | 	byte	$00[6]
3758c 2e1 6C 36 1B 36 
37590 2e2 6C 00 00 00 
37594 2e3 00 00 00 00 
37598 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3759c 2e5 1B 36 6C 36 
375a0 2e6 1B 00 00 00 
375a4 2e7 88 22 88 22 
375a8 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
375ac 2e9 88 22 88 22 
375b0 2ea 88 22 88 22 
375b4 2eb AA 55 AA 55 
375b8 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
375bc 2ed AA 55 AA 55 
375c0 2ee AA 55 AA 55 
375c4 2ef BB EE BB EE 
375c8 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
375cc 2f1 BB EE BB EE 
375d0 2f2 BB EE BB EE 
375d4 2f3 18 18 18 18 
375d8 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
375dc 2f5 18 18 18 18 
375e0 2f6 18 18 18 18 
375e4 2f7 18 18 18 18 
375e8 2f8 18 18 18    | 	byte	$18[15]
375eb 2f8 1F 18 18 18 
375ef 2f9 18 18 18 18 
375f3 2fa 18 30 18 00 
375f7 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
375fb 2fc 63 7F 63 63 
375ff 2fd 63 63 00 00 
37603 2fe 00 1C 36 00 
37607 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3760b 300 63 7F 63 63 
3760f 301 63 63 00 00 
37613 302 00 36 1C 00 
37617 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3761b 304 1E 16 06 46 
3761f 305 66 7F 00 00 
37623 306 00 00 00 00 
37627 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3762b 308 1C 30 60 63 
3762f 309 63 3E 18 30 
37633 30a 1E 6C 6C 6C 
37637 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3763b 30c 6F 6C 6C 6C 
3763f 30d 6C 6C 6C 6C 
37643 30e 6C 6C 6C 6C 
37647 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3764b 310 6C 6C 6C 6C 
3764f 311 6C 6C 6C 6C 
37653 312 6C          | 	byte	$6c[9]
37654 313 00 00 00 00 
37658 314 00          | 	byte	$00[5]
37659 314 7F 60 6F 6C 
3765d 315 6C 6C 6C 6C 
37661 316 6C 6C 6C 6C 
37665 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
37669 318 6F 60 7F 00 
3766d 319 00 00 00 00 
37671 31a 00 00 00 18 
37675 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
37679 31c 61 30 18 0C 
3767d 31d 06 43 63 7F 
37681 31e 00 00 00 00 
37685 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
37689 320 00 7F 33 18 
3768d 321 0C 06 63 7F 
37691 322 00 00 00 00 
37695 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
37699 324 00 00 1F 18 
3769d 325 18 18 18 18 
376a1 326 18 18 18 18 
376a5 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
376a9 328 18 18 F8 00 
376ad 329 00 00 00 00 
376b1 32a 00 00 00 18 
376b5 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
376b9 32c 18 18 FF 00 
376bd 32d 00 00 00 00 
376c1 32e 00 00 00 00 
376c5 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
376c9 330 00 00 FF 18 
376cd 331 18 18 18 18 
376d1 332 18 18 18 18 
376d5 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
376d9 334 18 18 F8 18 
376dd 335 18 18 18 18 
376e1 336 18 18 18 00 
376e5 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
376e9 338 00 00 FF 00 
376ed 339 00 00 00 00 
376f1 33a 00 00 00 18 
376f5 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
376f9 33c 18 18 FF 18 
376fd 33d 18 18 18 18 
37701 33e 18 18 18 63 
37705 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
37709 340 36 63 63 7F 
3770d 341 63 63 63 63 
37711 342 00 00 00 00 
37715 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
37719 344 00 1E 30 3E 
3771d 345 33 33 33 6E 
37721 346 00 00 00 6C 
37725 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
37729 348 EC 0C FC 00 
3772d 349 00 00 00 00 
37731 34a 00 00 00 00 
37735 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37739 34c FC 0C EC 6C 
3773d 34d 6C 6C 6C 6C 
37741 34e 6C 6C 6C 6C 
37745 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
37749 350 EF 00 FF 00 
3774d 351 00 00 00 00 
37751 352 00 00 00 00 
37755 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37759 354 FF 00 EF 6C 
3775d 355 6C 6C 6C 6C 
37761 356 6C 6C 6C 6C 
37765 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
37769 358 EC 0C EC 6C 
3776d 359 6C 6C 6C 6C 
37771 35a 6C 6C 6C 00 
37775 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
37779 35c FF 00 FF 00 
3777d 35d 00 00 00 00 
37781 35e 00 00 00 6C 
37785 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
37789 360 EF 00 EF 6C 
3778d 361 6C 6C 6C 6C 
37791 362 6C 6C 6C 00 
37795 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
37799 364 63 3E 63 63 
3779d 365 63 63 3E 63 
377a1 366 00 00 00 00 
377a5 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
377a9 368 30 3C 36 33 
377ad 369 33 33 33 6E 
377b1 36a 00 00 00 00 
377b5 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
377b9 36c 66 66 6F 66 
377bd 36d 66 66 36 1F 
377c1 36e 00 00 00 36 
377c5 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
377c9 370 66 66 66 66 
377cd 371 66 66       | 	byte	$66[6]
377cf 371 36 1F 00 00 
377d3 372 00 00 63 00 
377d7 373 7F 66 46 16 
377db 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
377df 375 66 7F 00 00 
377e3 376 00 6C 38 00 
377e7 377 38 30 30 3C 
377eb 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
377ef 379 33 6E 00 00 
377f3 37a 00 36 1C 00 
377f7 37b 63 67 6F 7F 
377fb 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
377ff 37d 63 63 00 00 
37803 37e 00 30 18 00 
37807 37f 3C 18 18 18 
3780b 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3780f 381 18 3C 00 00 
37813 382 00 3C 66 00 
37817 383 3C 18 18 18 
3781b 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3781f 385 18 3C 00 00 
37823 386 00 00 00 36 
37827 387 1C 08 00 3E 
3782b 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3782f 389 63 3E 00 00 
37833 38a 00 18 18 18 
37837 38b 18 18 18 18 
3783b 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3783f 38d 00 00 00 00 
37843 38e 00 00 00 00 
37847 38f 00 00 00 00 | 	byte	$00[12]
3784b 390 F8 18 18 18 
3784f 391 18 18 18 18 
37853 392 18 FF FF FF 
37857 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3785b 394 FF FF FF FF 
3785f 395 FF FF FF FF 
37863 396 FF          | 	byte	$ff[9]
37864 397 00 00 00 00 
37868 398 00 00 00    | 	byte	$00[7]
3786b 398 FF FF FF FF 
3786f 399 FF FF FF FF 
37873 39a FF          | 	byte	$ff[9]
37874 39b 00 00 00 7E 
37878 39c 7E 5A 18 18 
3787c 39d 18 18 18 18 
37880 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
37884 39f 1C 36 1C 63 
37888 3a0 63 63 63 63 
3788c 3a1 63 63 63 63 
37890 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37894 3a3 FF FF FF FF 
37898 3a4 FF FF FF    | 	byte	$ff[7]
3789b 3a4 00 00 00 00 
3789f 3a5 00 00 00 00 
378a3 3a6 00          | 	byte	$00[9]
378a4 3a7 30 18 00 3E 
378a8 3a8 63 63 63 63 
378ac 3a9 63 63 63 63 
378b0 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
378b4 3ab 00 00 00 1E 
378b8 3ac 33 33 33 1B 
378bc 3ad 33 63 63 63 
378c0 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
378c4 3af 1C 36 00 3E 
378c8 3b0 63 63 63 63 
378cc 3b1 63 63 63 63 
378d0 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
378d4 3b3 30 18 00 63 
378d8 3b4 67 6F 7F 7B 
378dc 3b5 73 63 63 63 
378e0 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
378e4 3b7 00 00 60 30 
378e8 3b8 18 00 3B 66 
378ec 3b9 66 66 66 66 
378f0 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
378f4 3bb 00 00 36 1C 
378f8 3bc 08 00 3B 66 
378fc 3bd 66 66 66 66 
37900 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
37904 3bf 36 1C 00 3E 
37908 3c0 63 63 06 1C 
3790c 3c1 30 60 63 63 
37910 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
37914 3c3 00 00 36 1C 
37918 3c4 08 00 3E 63 
3791c 3c5 06 1C 30 63 
37920 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
37924 3c7 30 18 00 3F 
37928 3c8 66 66 66 3E 
3792c 3c9 36 66 66 66 
37930 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
37934 3cb 30 18 00 63 
37938 3cc 63 63 63 63 
3793c 3cd 63 63 63 63 
37940 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37944 3cf 00 00 60 30 
37948 3d0 18 00 3B 6E 
3794c 3d1 66 06 06 06 
37950 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
37954 3d3 66 33 00 63 
37958 3d4 63 63 63 63 
3795c 3d5 63 63 63 63 
37960 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37964 3d7 00 00 60 30 
37968 3d8 18 00 63 63 
3796c 3d9 63 63 63 63 
37970 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
37974 3db 30 18 00 66 
37978 3dc 66 66 66 3C 
3797c 3dd 18 18 18 18 
37980 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
37984 3df 00 00 00 08 
37988 3e0 0C 0C 3F 0C 
3798c 3e1 0C 0C 0C 6C 
37990 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
37994 3e3 30 18 00 00 
37998 3e4 00 00 00 00 
3799c 3e5 00 00 00 00 
379a0 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
379a4 3e7 00 00 00 00 
379a8 3e8 00 00 00 00 | 	byte	$00[8]
379ac 3e9 7F 00 00 00 
379b0 3ea 00 00 00 00 
379b4 3eb 66 33 00 00 
379b8 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
379bc 3ed 00 00 00 00 
379c0 3ee 00 00 00 00 
379c4 3ef 00 00 00 00 
379c8 3f0 00 00 00 00 
379cc 3f1 00 00 00 00 
379d0 3f2 00          | 	byte	$00[21]
379d1 3f2 0C 06 3C 36 
379d5 3f3 1C 00 00 00 
379d9 3f4 00 00 00 00 
379dd 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
379e1 3f6 00 00 00 63 
379e5 3f7 3E 00 00 00 
379e9 3f8 00 00 00 00 
379ed 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
379f1 3fa 00 00 00 00 
379f5 3fb 3E 63 06 1C 
379f9 3fc 36 63 63 36 
379fd 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
37a01 3fe 00 00 00 00 
37a05 3ff 00 00 00 00 | 	byte	$00[8]
37a09 400 18 00 7E 00 
37a0d 401 18 00 00 00 
37a11 402 00 00 00 00 
37a15 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37a19 404 00 00 00 00 
37a1d 405 00 00 00 00 | 	byte	$00[8]
37a21 406 18 30 1E 00 
37a25 407 00 00 1C 36 
37a29 408 36 1C 00 00 
37a2d 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
37a31 40a 00 00 00 00 
37a35 40b 63 00 00 00 
37a39 40c 00 00 00 00 
37a3d 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37a41 40e 00 00 00 18 
37a45 40f 18 00 00 00 
37a49 410 00 00 00 00 
37a4d 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37a51 412 00 00 00 00 
37a55 413 00          | 	byte	$00[5]
37a56 413 CC 66 33 00 
37a5a 414 33 33 33 33 
37a5e 415 33 33 6E 00 
37a62 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
37a66 417 00 3F 66 66 
37a6a 418 66 3E 36 66 
37a6e 419 66 66 6F 00 
37a72 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
37a76 41b 36 1C 08 00 
37a7a 41c 3B 6E 66 06 
37a7e 41d 06 06 0F 00 
37a82 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
37a86 41f 00 00 00 7E 
37a8a 420 7E 7E 7E 7E 
37a8e 421 7E 7E 00 00 
37a92 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
37a96 423 00 00 00 00 
37a9a 424 00 00 00 00 
37a9e 425 00 00 00 00 
37aa2 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37aa4 427 00 00 00 00 
      ...             
37ad4 433 00 00 00 00 
37ad8 434 00 00 00    | st_font        file "st4font.def"
37adb 434 FF FF 00 00 
37adf 435 00 00 00 00 
37ae3 436 00 18 18 18 
37ae7 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37aeb 438 18 18 18 18 
37aef 439 18 18 18 18 
37af3 43a 18          | 	byte	$18[9]
37af4 43b 00 00 00 00 
37af8 43c 00 00 00    | 	byte	$00[7]
37afb 43c FF FF 18 18 
37aff 43d 18 18 18 18 
37b03 43e 18 18 18 18 
37b07 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37b0b 440 FF FF 00 00 
37b0f 441 00 00 00 00 
37b13 442 00 18 18 18 
37b17 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37b1b 444 1F 1F 18 18 
37b1f 445 18 18 18 18 
37b23 446 18 18 18 18 
37b27 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37b2b 448 F8 F8 18 18 
37b2f 449 18 18 18 18 
37b33 44a 18 00 00 00 
37b37 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37b3b 44c 1F 1F 18 18 
37b3f 44d 18 18 18 18 
37b43 44e 18 00 00 00 
37b47 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37b4b 450 F8 F8 18 18 
37b4f 451 18 18 18 18 
37b53 452 18 18 18 18 
37b57 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37b5b 454 1F 1F 00 00 
37b5f 455 00 00 00 00 
37b63 456 00 18 18 18 
37b67 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37b6b 458 F8 F8 00 00 
37b6f 459 00 00 00 00 
37b73 45a 00 18 18 18 
37b77 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37b7b 45c FF FF 18 18 
37b7f 45d 18 18 18 18 
37b83 45e 18 00 00 18 
37b87 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
37b8b 460 66 7E 7E 66 
37b8f 461 66 66 66 30 
37b93 462 18 00 00 7E 
37b97 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
37b9b 464 3E 06 06 06 
37b9f 465 06 7E 7E 18 
37ba3 466 0C 30 18 3C 
37ba7 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
37bab 468 06 06 06 66 
37baf 469 66 7E 3C 00 
37bb3 46a 00 30 18 66 
37bb7 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
37bbb 46c 7E 7E 76 76 
37bbf 46d 66 66 66 00 
37bc3 46e 00 30 18 7C 
37bc7 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
37bcb 470 1C 38 70 60 
37bcf 471 60 7E 3E 00 
37bd3 472 00 30 18 7E 
37bd7 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
37bdb 474 18 0C 0C 06 
37bdf 475 06 7E 7E 00 
37be3 476 00 18 18 00 
37be7 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
37beb 478 18 18 0C 0C 
37bef 479 06 7E 7E 00 
37bf3 47a 00 30 18 3C 
37bf7 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
37bfb 47c 66 66 66 66 
37bff 47d 66          | 	byte	$66[5]
37c00 47e 7E 3C 00 00 
37c04 47f 00 00 06 06 
37c08 480 06 06 16 1E 
37c0c 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
37c10 482 7E 7E 00 00 
37c14 483 00 00 00 00 
37c18 484 00 3C 7C 60 
37c1c 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
37c20 486 7E 7C 30 18 
37c24 487 00 00 00 00 
37c28 488 00 3C 7E 66 
37c2c 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
37c30 48a 7E 7C 18 0C 
37c34 48b 00 00 30 18 
37c38 48c 00 3C 3E 06 
37c3c 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
37c40 48e 7E 7C 00 00 
37c44 48f 00 00 30 18 
37c48 490 00 3E 7E 66 
37c4c 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
37c50 492 66 66 00 00 
37c54 493 00 00 30 18 
37c58 494 00 7C 7E 06 
37c5c 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
37c60 496 7E 3E 00 00 
37c64 497 00 00 30 18 
37c68 498 00 7E 7E 30 
37c6c 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
37c70 49a 7E 7E 00 00 
37c74 49b 00 00 18 18 
37c78 49c 00 7E 7E 30 
37c7c 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
37c80 49e 7E 7E 00 00 
37c84 49f 00 00 30 18 
37c88 4a0 00 3C 7E 66 
37c8c 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
37c90 4a2 7E 3C 00 00 
37c94 4a3 00 00 1C 1C 
37c98 4a4 18 18 38 3C 
37c9c 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
37ca0 4a6 3C 3C 00 00 
37ca4 4a7 00 00 00 00 
37ca8 4a8 00 00 00 00 
37cac 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37cb0 4aa 00 00 00 00 
37cb4 4ab 00 00       | 	byte	$00[6]
37cb6 4ab 18 18 18 18 
37cba 4ac 18 18 18 18 | 	byte	$18[8]
37cbe 4ad 00 00 18 18 
37cc2 4ae 00 00 00 00 
37cc6 4af 66 66 66 66 
37cca 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
37cce 4b1 00 00 00 00 
37cd2 4b2 00 00 00 00 
37cd6 4b3 00          | 	byte	$00[9]
37cd7 4b3 66 66 FF FF 
37cdb 4b4 66 66 FF FF 
37cdf 4b5 66 66 00 00 
37ce3 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
37ce7 4b7 7C 7E 06 06 
37ceb 4b8 3E 7C 60 60 
37cef 4b9 7E 3E 18 18 
37cf3 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
37cf7 4bb 66 30 30 18 
37cfb 4bc 18 0C 0C 66 
37cff 4bd 66 00 00 00 
37d03 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
37d07 4bf 66 66 3C 1C 
37d0b 4c0 1C FC FE 66 
37d0f 4c1 66 FE FC 00 
37d13 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
37d17 4c3 18 18 18 18 
37d1b 4c4 00 00 00 00 
37d1f 4c5 00 00 00 00 
37d23 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
37d27 4c7 18 1C 0C 0C 
37d2b 4c8 0C 0C 0C 0C 
37d2f 4c9 1C 18 30 00 
37d33 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
37d37 4cb 18 38 30 30 
37d3b 4cc 30 30 30 30 
37d3f 4cd 38 18 0C 00 
37d43 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
37d47 4cf 66 66 3C 3C 
37d4b 4d0 FF FF 3C 3C 
37d4f 4d1 66 66 00 00 
37d53 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
37d57 4d3 00 18 18 18 
37d5b 4d4 7E 7E 18 18 
37d5f 4d5 18 00 00 00 
37d63 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37d67 4d7 00 00 00 00 
37d6b 4d8 00 00       | 	byte	$00[6]
37d6d 4d9 18 18 18 18 
37d71 4da 18          | 	byte	$18[5]
37d72 4da 0C 04 00 00 
37d76 4db 00 00 00 00 
37d7a 4dc 7E 7E 00 00 
37d7e 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
37d82 4de 00 00 00 00 
37d86 4df 00 00 00 00 
37d8a 4e0 00 00 00 00 
37d8e 4e1 00          | 	byte	$00[13]
37d8f 4e1 18 18 18 00 
37d93 4e2 00 00 00 60 
37d97 4e3 60 60 30 30 
37d9b 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
37d9f 4e5 06 06 06 00 
37da3 4e6 00 00 00 3C 
37da7 4e7 7E 66 66 66 
37dab 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
37daf 4e9 66 7E 3C 00 
37db3 4ea 00 00 00 18 
37db7 4eb 18 1C 1C 18 
37dbb 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
37dbf 4ed 18 7E 7E 00 
37dc3 4ee 00 00 00 3C 
37dc7 4ef 7E 66 66 30 
37dcb 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
37dcf 4f1 0C 7E 7E 00 
37dd3 4f2 00 00 00 7E 
37dd7 4f3 7E 30 30 18 
37ddb 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
37ddf 4f5 66 7E 3C 00 
37de3 4f6 00 00 00 30 
37de7 4f7 30 38 38 3C 
37deb 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
37def 4f9 7E 30 30 00 
37df3 4fa 00 00 00 7E 
37df7 4fb 7E 06 06 3E 
37dfb 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
37dff 4fd 66 7E 3C 00 
37e03 4fe 00 00 00 38 
37e07 4ff 3C 0E 06 06 
37e0b 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
37e0f 501 66 7E 3C 00 
37e13 502 00 00 00 7E 
37e17 503 7E 60 60 30 
37e1b 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
37e1f 505 0C 0C 0C 00 
37e23 506 00 00 00 3C 
37e27 507 7E 66 66 3C 
37e2b 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
37e2f 509 66 7E 3C 00 
37e33 50a 00 00 00 3C 
37e37 50b 7E 66 66 7E 
37e3b 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
37e3f 50d 70 3C 1C 00 
37e43 50e 00 00 00 00 
37e47 50f 00 00 18 18 
37e4b 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
37e4f 511 18 18 18 00 
37e53 512 00 00 00 00 
37e57 513 00 00 18 18 
37e5b 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
37e5f 515 18 18 18 0C 
37e63 516 04 00 00 00 
37e67 517 70 38 1C 0E 
37e6b 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
37e6f 519 70 00 00 00 
37e73 51a 00 00 00 00 
37e77 51b 00 00 7E 7E 
37e7b 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
37e7f 51d 00 00 00 00 
37e83 51e 00 00 00 00 | 	byte	$00[8]
37e87 51f 0E 1C 38 70 
37e8b 520 E0 70 38 1C 
37e8f 521 0E 00 00 00 
37e93 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
37e97 523 7E 66 66 30 
37e9b 524 30 18 18 18 
37e9f 525 00 18 18 00 
37ea3 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
37ea7 527 7E 66 66 66 
37eab 528 66 36 06 66 
37eaf 529 66 7E 3C 00 
37eb3 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
37eb7 52b 3C 7E 66 66 
37ebb 52c 66 7E 7E 66 
37ebf 52d 66 66 66 00 
37ec3 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
37ec7 52f 7E 66 66 7E 
37ecb 530 3E 66 66 66 
37ecf 531 66 7E 3E 00 
37ed3 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
37ed7 533 7E 66 66 06 
37edb 534 06 06 06 66 
37edf 535 66 7E 3C 00 
37ee3 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
37ee7 537 7E 66 66 66 
37eeb 538 66 66 66 66 
37eef 539 66 7E 3E 00 
37ef3 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
37ef7 53b 7E 06 06 3E 
37efb 53c 3E 06 06 06 
37eff 53d 06 7E 7E 00 
37f03 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
37f07 53f 7E 06 06 3E 
37f0b 540 3E 06 06 06 
37f0f 541 06 06 06 00 
37f13 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
37f17 543 7E 06 06 76 
37f1b 544 76 66 66 66 
37f1f 545 66 7E 3C 00 
37f23 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
37f27 547 66 66 66 7E 
37f2b 548 7E 66 66 66 
37f2f 549 66 66 66 00 
37f33 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
37f37 54b 7E 18 18 18 
37f3b 54c 18 18 18 18 
37f3f 54d 18 7E 7E 00 
37f43 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
37f47 54f 60 60 60 60 
37f4b 550 60 60 60    | 	byte	$60[7]
37f4e 551 66 66 7E 3C 
37f52 552 00 00 00 00 
37f56 553 66 66 36 36 
37f5a 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
37f5e 555 66 66 C6 C6 
37f62 556 00 00 00 00 
37f66 557 06 06 06 06 
37f6a 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
37f6e 559 06 06 7E 7E 
37f72 55a 00 00 00 00 
37f76 55b C6 C6 EE EE 
37f7a 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
37f7e 55d C6 C6 C6 C6 
37f82 55e 00 00 00 00 
37f86 55f 66 66 66 6E 
37f8a 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
37f8e 561 76 66 66 66 
37f92 562 00 00 00 00 
37f96 563 3C 7E 66 66 
37f9a 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
37f9e 565 66 66 7E 3C 
37fa2 566 00 00 00 00 
37fa6 567 3E 7E 66 66 
37faa 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
37fae 569 06 06 06 06 
37fb2 56a 00 00 00 00 
37fb6 56b 3C 7E 66 66 
37fba 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
37fbe 56d 66 56 3E 6C 
37fc2 56e 00 00 00 00 
37fc6 56f 3E 7E 66 66 
37fca 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
37fce 571 66 66 C6 C6 
37fd2 572 00 00 00 00 
37fd6 573 7C 7E 06 06 
37fda 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
37fde 575 60 60 7E 3E 
37fe2 576 00 00 00 00 
37fe6 577 7E 7E 18 18 
37fea 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
37fee 579 18 18 18 18 
37ff2 57a 00 00 00 00 
37ff6 57b 66 66 66 66 
37ffa 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
37ffe 57d 66 66 7E 3C 
38002 57e 00 00 00 00 
38006 57f 66 66 66 66 
3800a 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3800e 581 3C 3C 18 18 
38012 582 00 00 00 00 
38016 583 C6 C6 C6 C6 
3801a 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3801e 585 FE EE C6 82 
38022 586 00 00 00 00 
38026 587 66 66 66 3C 
3802a 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3802e 589 3C 66 66 66 
38032 58a 00 00 00 00 
38036 58b 66 66 66 66 
3803a 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3803e 58d 18 18 18 18 
38042 58e 00 00 00 00 
38046 58f 7E 7E 30 30 
3804a 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3804e 591 06 06 7E 7E 
38052 592 00 00 00 00 
38056 593 3C 3C 0C 0C 
3805a 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3805e 595 0C 0C 3C 3C 
38062 596 00 00 00 00 
38066 597 06 06 0C 0C 
3806a 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3806e 599 60 60 C0 C0 
38072 59a 00 00 00 00 
38076 59b 3C 3C 30 30 
3807a 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3807e 59d 30 30 3C 3C 
38082 59e 00 00 00 00 
38086 59f 18 18 3C 3C 
3808a 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3808e 5a1 00 00 00 00 
38092 5a2 00 00 00 00 
38096 5a3 00 00 00 00 
3809a 5a4 00 00 00 00 
3809e 5a5 00 00       | 	byte	$00[18]
380a0 5a6 FE FE 00 00 
380a4 5a7 00 00 0C 0C 
380a8 5a8 18 18 00 00 
380ac 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
380b0 5aa 00 00 00 00 
380b4 5ab 00 00 00 00 
380b8 5ac 00          | 	byte	$00[9]
380b9 5ac 3C 7C 60 7C 
380bd 5ad 7E 66 66 7E 
380c1 5ae 7C 00 00 00 
380c5 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
380c9 5b0 3E 7E 66 66 
380cd 5b1 66 66 66 7E 
380d1 5b2 3E 00 00 00 
380d5 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
380d9 5b4 3C 3E 06 06 
380dd 5b5 06 06 06 7E 
380e1 5b6 7C 00 00 00 
380e5 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
380e9 5b8 7C 7E 66 66 
380ed 5b9 66 66 66 7E 
380f1 5ba 7C 00 00 00 
380f5 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
380f9 5bc 3C 7E 66 66 
380fd 5bd 7E 06 06 7E 
38101 5be 7C 00 00 00 
38105 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
38109 5c0 18 7E 7E 18 
3810d 5c1 18 18 18 18 
38111 5c2 18 00 00 00 
38115 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
38119 5c4 7C 7E 66 66 
3811d 5c5 66 66 7E 7C 
38121 5c6 60 7E 3E 00 
38125 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
38129 5c8 3E 7E 66 66 
3812d 5c9 66 66 66 66 
38131 5ca 66 00 00 00 
38135 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
38139 5cc 1C 1C 18 18 
3813d 5cd 18 18 18 3C 
38141 5ce 3C 00 00 00 
38145 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
38149 5d0 30 30 30 30 
3814d 5d1 30 30 30 30 
38151 5d2 30          | 	byte	$30[9]
38152 5d2 3E 1E 00 00 
38156 5d3 06 06 06 36 
3815a 5d4 36 1E 1E 1E 
3815e 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
38162 5d6 00 00 00 00 
38166 5d7 1C 1C 18 18 
3816a 5d8 18 18 18 18 
3816e 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
38172 5da 00 00 00 00 
38176 5db 00 00 00    | 	byte	$00[7]
38179 5dc 6C FE FE D6 
3817d 5dd D6 C6 C6 C6 
38181 5de C6 00 00 00 
38185 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
38189 5e0 3E 7E 66 66 
3818d 5e1 66 66 66 66 
38191 5e2 66 00 00 00 
38195 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
38199 5e4 3C 7E 66 66 
3819d 5e5 66 66 66 7E 
381a1 5e6 3C 00 00 00 
381a5 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
381a9 5e8 3E 7E 66 66 
381ad 5e9 66 66 66 7E 
381b1 5ea 3E 06 06 00 
381b5 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
381b9 5ec 7C 7E 66 66 
381bd 5ed 66 66 66 7E 
381c1 5ee 7C 60 60 00 
381c5 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
381c9 5f0 3E 7E 66 06 
381cd 5f1 06 06 06 06 
381d1 5f2 06 00 00 00 
381d5 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
381d9 5f4 7C 7E 06 0E 
381dd 5f5 3C 70 60 7E 
381e1 5f6 3E 00 00 00 
381e5 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
381e9 5f8 7E 7E 18 18 
381ed 5f9 18 18 18 78 
381f1 5fa 70 00 00 00 
381f5 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
381f9 5fc 66 66 66 66 
381fd 5fd 66 66 66    | 	byte	$66[7]
38200 5fe 7E 7C 00 00 
38204 5ff 00 00 00 00 
38208 600 00 66 66 66 
3820c 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
38210 602 18 18 00 00 
38214 603 00 00 00 00 
38218 604 00 C6 C6 D6 
3821c 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
38220 606 C6 82 00 00 
38224 607 00 00 00 00 
38228 608 00 66 66 3C 
3822c 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
38230 60a 66 66 00 00 
38234 60b 00 00 00 00 
38238 60c 00 66 66 66 
3823c 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
38240 60e 7C 60 7E 3E 
38244 60f 00 00 00 00 
38248 610 00 7E 7E 30 
3824c 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
38250 612 7E 7E 00 00 
38254 613 00 00 30 18 
38258 614 18 18 18 0C 
3825c 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
38260 616 18 30 00 00 
38264 617 00 00 18 18 
38268 618 18 18 18 18 
3826c 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
38270 61a 18 18 00 00 
38274 61b 00 00 0C 18 
38278 61c 18 18 18 30 
3827c 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
38280 61e 18 0C 00 00 
38284 61f 00 00 6C 7E 
38288 620 36 00 00 00 
3828c 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
38290 622 00 00 00 00 
38294 623 00 00 00 00 
38298 624 00          | 	byte	$00[9]
38299 624 18 18 18 18 
3829d 625 18 18 00 00 
382a1 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
382a4 627 00 6C FE FE 
382a8 628 7C 38 10 00 
382ac 629 18 18 18 F8 
382b0 62a F8 18 18 18 | a8_font        file "atari8.fnt"
382b4 62b C0 C0 C0 C0 
382b8 62c C0 C0 C0 C0 | 	byte	$c0[8]
382bc 62d 18 18 18 1F 
382c0 62e 1F 00 00 00 
382c4 62f 18 18 18 1F 
382c8 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
382cc 631 00 00 00 1F 
382d0 632 1F 18 18 18 
382d4 633 C0 E0 70 38 
382d8 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
382dc 635 03 07 0E 1C 
382e0 636 38 70 E0 C0 
382e4 637 80 C0 E0 F0 
382e8 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
382ec 639 00 00 00 00 
382f0 63a F0 F0 F0 F0 
382f4 63b 01 03 07 0F 
382f8 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
382fc 63d F0 F0 F0 F0 
38300 63e 00 00 00 00 
38304 63f 0F 0F 0F 0F 
38308 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3830c 641 FF FF 00 00 
38310 642 00 00 00 00 
38314 643 00 00 00 00 
38318 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3831c 645 00 00 00 00 
38320 646 0F 0F 0F 0F 
38324 647 00 38 38 EE 
38328 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3832c 649 00 00 00 F8 
38330 64a F8 18 18 18 
38334 64b 00 00 00 FF 
38338 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3833c 64d 18 18 18 FF 
38340 64e FF 18 18 18 
38344 64f 00 00 3C 7E 
38348 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3834c 651 00 00 00 00 
38350 652 FF FF FF FF 
38354 653 03 03 03 03 
38358 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3835c 655 00 00 00 FF 
38360 656 FF 18 18 18 
38364 657 18 18 18 FF 
38368 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3836c 659 0F 0F 0F 0F 
38370 65a 0F 0F 0F 0F | 	byte	$0f[8]
38374 65b 18 18 18 F8 
38378 65c F8 00 00 00 
3837c 65d 1E 06 1E 06 
38380 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
38384 65f 00 18 3C 7E 
38388 660 18 18 18 00 
3838c 661 00 18 18 18 
38390 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
38394 663 00 18 0C 7E 
38398 664 0C 18 00 00 
3839c 665 00 18 30 7E 
383a0 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
383a4 667 00 00 00 00 
383a8 668 00 00 00 00 
383ac 669 00          | 	byte	$00[9]
383ad 669 18 18 18 18 
383b1 66a 00 18 00 00 
383b5 66b 66 66 66 00 
383b9 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
383bd 66d 66 FF 66 66 
383c1 66e FF 66 00 18 
383c5 66f 7C 06 3C 60 
383c9 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
383cd 671 66 36 18 0C 
383d1 672 66 62 00 38 
383d5 673 6C 38 1C F6 
383d9 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
383dd 675 18 18 18 00 
383e1 676 00 00 00 00 
383e5 677 70 38 18 18 
383e9 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
383ed 679 0E 1C 18 18 
383f1 67a 1C 0E 00 00 
383f5 67b 66 3C FF 3C 
383f9 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
383fd 67d 18 18 7E 18 
38401 67e 18 00 00 00 
38405 67f 00 00 00 00 
38409 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3840d 681 00 00 7E 00 
38411 682 00 00 00 00 
38415 683 00 00 00 00 
38419 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3841d 685 60 30 18 0C 
38421 686 06 02 00 00 
38425 687 3C 66 76 6E 
38429 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3842d 689 18 1C 18 18 
38431 68a 18 7E 00 00 
38435 68b 3C 66 30 18 
38439 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3843d 68d 7E 30 18 30 
38441 68e 66 3C 00 00 
38445 68f 30 38 3C 36 
38449 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3844d 691 7E 06 3E 60 
38451 692 66 3C 00 00 
38455 693 3C 06 3E 66 
38459 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3845d 695 7E 60 30 18 
38461 696 0C 0C 00 00 
38465 697 3C 66 3C 66 
38469 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3846d 699 3C 66 7C 60 
38471 69a 30 1C 00 00 
38475 69b 00 18 18 00 
38479 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3847d 69d 00 18 18 00 
38481 69e 18 18 0C 60 
38485 69f 30 18 0C 18 
38489 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3848d 6a1 00 7E 00 00 
38491 6a2 7E 00 00 06 
38495 6a3 0C 18 30 18 
38499 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3849d 6a5 3C 66 30 18 
384a1 6a6 00 18 00 00 
384a5 6a7 3C 66 76 76 
384a9 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
384ad 6a9 18 3C 66 66 
384b1 6aa 7E 66 00 00 
384b5 6ab 3E 66 3E 66 
384b9 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
384bd 6ad 3C 66 06 06 
384c1 6ae 66 3C 00 00 
384c5 6af 1E 36 66 66 
384c9 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
384cd 6b1 7E 06 3E 06 
384d1 6b2 06 7E 00 00 
384d5 6b3 7E 06 3E 06 
384d9 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
384dd 6b5 7C 06 06 76 
384e1 6b6 66 7C 00 00 
384e5 6b7 66 66 7E 66 
384e9 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
384ed 6b9 7E 18 18 18 
384f1 6ba 18 7E 00 00 
384f5 6bb 60 60 60 60 
384f9 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
384fd 6bd 66 36 1E 1E 
38501 6be 36 66 00 00 
38505 6bf 06 06 06 06 
38509 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3850d 6c1 C6 EE FE D6 
38511 6c2 C6 C6 00 00 
38515 6c3 66 6E 7E 7E 
38519 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3851d 6c5 3C 66 66 66 
38521 6c6 66 3C 00 00 
38525 6c7 3E 66 66 3E 
38529 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3852d 6c9 3C 66 66 66 
38531 6ca 36 6C 00 00 
38535 6cb 3E 66 66 3E 
38539 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3853d 6cd 3C 06 3C 60 
38541 6ce 60 3C 00 00 
38545 6cf 7E 18 18 18 
38549 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3854d 6d1 66 66 66 66 
38551 6d2 66          | 	byte	$66[5]
38552 6d2 7E 00 00 66 
38556 6d3 66 66 66 3C 
3855a 6d4 18 00 00 C6 
3855e 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
38562 6d6 C6 00 00 66 
38566 6d7 66 3C 3C 66 
3856a 6d8 66 00 00 66 
3856e 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
38572 6da 18 00 00 7E 
38576 6db 30 18 0C 06 
3857a 6dc 7E 00 00 78 
3857e 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
38582 6de 78 00 00 02 
38586 6df 06 0C 18 30 
3858a 6e0 60 00 00 1E 
3858e 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
38592 6e2 1E 00 00 10 
38596 6e3 38 6C C6 00 
3859a 6e4 00 00 00 00 
3859e 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
385a2 6e6 FF 00 00 18 
385a6 6e7 3C 7E 7E 3C 
385aa 6e8 18 00 00 00 
385ae 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
385b2 6ea 7C 00 00 06 
385b6 6eb 06 3E 66 66 
385ba 6ec 3E 00 00 00 
385be 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
385c2 6ee 3C 00 00 60 
385c6 6ef 60 7C 66 66 
385ca 6f0 7C 00 00 00 
385ce 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
385d2 6f2 3C 00 00 70 
385d6 6f3 18 7C 18 18 
385da 6f4 18 00 00 00 
385de 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
385e2 6f6 60 3E 00 06 
385e6 6f7 06 3E 66 66 
385ea 6f8 66 00 00 18 
385ee 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
385f2 6fa 3C 00 00 60 
385f6 6fb 00 60 60 60 
385fa 6fc 60 3C 00 06 
385fe 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
38602 6fe 66 00 00 1C 
38606 6ff 18 18 18 18 
3860a 700 3C 00 00 00 
3860e 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
38612 702 C6 00 00 00 
38616 703 3E 66 66 66 
3861a 704 66 00 00 00 
3861e 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
38622 706 3C 00 00 00 
38626 707 3E 66 66 3E 
3862a 708 06 06 00 00 
3862e 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
38632 70a 60 60 00 00 
38636 70b 3E 66 06 06 
3863a 70c 06 00 00 00 
3863e 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
38642 70e 3E 00 00 18 
38646 70f 7E 18 18 18 
3864a 710 70 00 00 00 
3864e 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
38652 712 7C 00 00 00 
38656 713 66 66 66 3C 
3865a 714 18 00 00 00 
3865e 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
38662 716 6C 00 00 00 
38666 717 66 3C 18 3C 
3866a 718 66 00 00 00 
3866e 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
38672 71a 30 1E 00 00 
38676 71b 7E 30 18 0C 
3867a 71c 7E 00 00 18 
3867e 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
38682 71e 3C 00 18 18 
38686 71f 18 18 18 18 
3868a 720 18 18 00 7E 
3868e 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
38692 722 60 00 10 18 
38696 723 1C 1E 1C 18 
3869a 724 10 00 08 18 
3869e 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
386a2 726 08 00       | 	byte	$08, $00
386a4 727 00 6C FE FE 
386a8 728 7C 38 10 00 
386ac 729 18 18 18 F8 
386b0 72a F8 18 18 18 | a8_font2       file "atari8.fnt"
386b4 72b C0 C0 C0 C0 
386b8 72c C0 C0 C0 C0 | 	byte	$c0[8]
386bc 72d 18 18 18 1F 
386c0 72e 1F 00 00 00 
386c4 72f 18 18 18 1F 
386c8 730 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
386cc 731 00 00 00 1F 
386d0 732 1F 18 18 18 
386d4 733 C0 E0 70 38 
386d8 734 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
386dc 735 03 07 0E 1C 
386e0 736 38 70 E0 C0 
386e4 737 80 C0 E0 F0 
386e8 738 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
386ec 739 00 00 00 00 
386f0 73a F0 F0 F0 F0 
386f4 73b 01 03 07 0F 
386f8 73c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
386fc 73d F0 F0 F0 F0 
38700 73e 00 00 00 00 
38704 73f 0F 0F 0F 0F 
38708 740 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3870c 741 FF FF 00 00 
38710 742 00 00 00 00 
38714 743 00 00 00 00 
38718 744 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3871c 745 00 00 00 00 
38720 746 0F 0F 0F 0F 
38724 747 00 38 38 EE 
38728 748 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3872c 749 00 00 00 F8 
38730 74a F8 18 18 18 
38734 74b 00 00 00 FF 
38738 74c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3873c 74d 18 18 18 FF 
38740 74e FF 18 18 18 
38744 74f 00 00 3C 7E 
38748 750 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3874c 751 00 00 00 00 
38750 752 FF FF FF FF 
38754 753 03 03 03 03 
38758 754 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3875c 755 00 00 00 FF 
38760 756 FF 18 18 18 
38764 757 18 18 18 FF 
38768 758 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3876c 759 0F 0F 0F 0F 
38770 75a 0F 0F 0F 0F | 	byte	$0f[8]
38774 75b 18 18 18 F8 
38778 75c F8 00 00 00 
3877c 75d 1E 06 1E 06 
38780 75e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
38784 75f 00 18 3C 7E 
38788 760 18 18 18 00 
3878c 761 00 18 18 18 
38790 762 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
38794 763 00 18 0C 7E 
38798 764 0C 18 00 00 
3879c 765 00 18 30 7E 
387a0 766 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
387a4 767 00 00 00 00 
387a8 768 00 00 00 00 
387ac 769 00          | 	byte	$00[9]
387ad 769 18 18 18 18 
387b1 76a 00 18 00 00 
387b5 76b 66 66 66 00 
387b9 76c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
387bd 76d 66 FF 66 66 
387c1 76e FF 66 00 18 
387c5 76f 7C 06 3C 60 
387c9 770 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
387cd 771 66 36 18 0C 
387d1 772 66 62 00 38 
387d5 773 6C 38 1C F6 
387d9 774 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
387dd 775 18 18 18 00 
387e1 776 00 00 00 00 
387e5 777 70 38 18 18 
387e9 778 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
387ed 779 0E 1C 18 18 
387f1 77a 1C 0E 00 00 
387f5 77b 66 3C FF 3C 
387f9 77c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
387fd 77d 18 18 7E 18 
38801 77e 18 00 00 00 
38805 77f 00 00 00 00 
38809 780 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3880d 781 00 00 7E 00 
38811 782 00 00 00 00 
38815 783 00 00 00 00 
38819 784 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3881d 785 60 30 18 0C 
38821 786 06 02 00 00 
38825 787 3C 66 76 6E 
38829 788 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3882d 789 18 1C 18 18 
38831 78a 18 7E 00 00 
38835 78b 3C 66 30 18 
38839 78c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3883d 78d 7E 30 18 30 
38841 78e 66 3C 00 00 
38845 78f 30 38 3C 36 
38849 790 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3884d 791 7E 06 3E 60 
38851 792 66 3C 00 00 
38855 793 3C 06 3E 66 
38859 794 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3885d 795 7E 60 30 18 
38861 796 0C 0C 00 00 
38865 797 3C 66 3C 66 
38869 798 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3886d 799 3C 66 7C 60 
38871 79a 30 1C 00 00 
38875 79b 00 18 18 00 
38879 79c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3887d 79d 00 18 18 00 
38881 79e 18 18 0C 60 
38885 79f 30 18 0C 18 
38889 7a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3888d 7a1 00 7E 00 00 
38891 7a2 7E 00 00 06 
38895 7a3 0C 18 30 18 
38899 7a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3889d 7a5 3C 66 30 18 
388a1 7a6 00 18 00 00 
388a5 7a7 3C 66 76 76 
388a9 7a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
388ad 7a9 18 3C 66 66 
388b1 7aa 7E 66 00 00 
388b5 7ab 3E 66 3E 66 
388b9 7ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
388bd 7ad 3C 66 06 06 
388c1 7ae 66 3C 00 00 
388c5 7af 1E 36 66 66 
388c9 7b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
388cd 7b1 7E 06 3E 06 
388d1 7b2 06 7E 00 00 
388d5 7b3 7E 06 3E 06 
388d9 7b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
388dd 7b5 7C 06 06 76 
388e1 7b6 66 7C 00 00 
388e5 7b7 66 66 7E 66 
388e9 7b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
388ed 7b9 7E 18 18 18 
388f1 7ba 18 7E 00 00 
388f5 7bb 60 60 60 60 
388f9 7bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
388fd 7bd 66 36 1E 1E 
38901 7be 36 66 00 00 
38905 7bf 06 06 06 06 
38909 7c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3890d 7c1 C6 EE FE D6 
38911 7c2 C6 C6 00 00 
38915 7c3 66 6E 7E 7E 
38919 7c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3891d 7c5 3C 66 66 66 
38921 7c6 66 3C 00 00 
38925 7c7 3E 66 66 3E 
38929 7c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3892d 7c9 3C 66 66 66 
38931 7ca 36 6C 00 00 
38935 7cb 3E 66 66 3E 
38939 7cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3893d 7cd 3C 06 3C 60 
38941 7ce 60 3C 00 00 
38945 7cf 7E 18 18 18 
38949 7d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3894d 7d1 66 66 66 66 
38951 7d2 66          | 	byte	$66[5]
38952 7d2 7E 00 00 66 
38956 7d3 66 66 66 3C 
3895a 7d4 18 00 00 C6 
3895e 7d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
38962 7d6 C6 00 00 66 
38966 7d7 66 3C 3C 66 
3896a 7d8 66 00 00 66 
3896e 7d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
38972 7da 18 00 00 7E 
38976 7db 30 18 0C 06 
3897a 7dc 7E 00 00 78 
3897e 7dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
38982 7de 78 00 00 02 
38986 7df 06 0C 18 30 
3898a 7e0 60 00 00 1E 
3898e 7e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
38992 7e2 1E 00 00 10 
38996 7e3 38 6C C6 00 
3899a 7e4 00 00 00 00 
3899e 7e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
389a2 7e6 FF 00 00 18 
389a6 7e7 3C 7E 7E 3C 
389aa 7e8 18 00 00 00 
389ae 7e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
389b2 7ea 7C 00 00 06 
389b6 7eb 06 3E 66 66 
389ba 7ec 3E 00 00 00 
389be 7ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
389c2 7ee 3C 00 00 60 
389c6 7ef 60 7C 66 66 
389ca 7f0 7C 00 00 00 
389ce 7f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
389d2 7f2 3C 00 00 70 
389d6 7f3 18 7C 18 18 
389da 7f4 18 00 00 00 
389de 7f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
389e2 7f6 60 3E 00 06 
389e6 7f7 06 3E 66 66 
389ea 7f8 66 00 00 18 
389ee 7f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
389f2 7fa 3C 00 00 60 
389f6 7fb 00 60 60 60 
389fa 7fc 60 3C 00 06 
389fe 7fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
38a02 7fe 66 00 00 1C 
38a06 7ff 18 18 18 18 
38a0a 800 3C 00 00 00 
38a0e 801 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
38a12 802 C6 00 00 00 
38a16 803 3E 66 66 66 
38a1a 804 66 00 00 00 
38a1e 805 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
38a22 806 3C 00 00 00 
38a26 807 3E 66 66 3E 
38a2a 808 06 06 00 00 
38a2e 809 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
38a32 80a 60 60 00 00 
38a36 80b 3E 66 06 06 
38a3a 80c 06 00 00 00 
38a3e 80d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
38a42 80e 3E 00 00 18 
38a46 80f 7E 18 18 18 
38a4a 810 70 00 00 00 
38a4e 811 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
38a52 812 7C 00 00 00 
38a56 813 66 66 66 3C 
38a5a 814 18 00 00 00 
38a5e 815 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
38a62 816 6C 00 00 00 
38a66 817 66 3C 18 3C 
38a6a 818 66 00 00 00 
38a6e 819 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
38a72 81a 30 1E 00 00 
38a76 81b 7E 30 18 0C 
38a7a 81c 7E 00 00 18 
38a7e 81d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
38a82 81e 3C 00 18 18 
38a86 81f 18 18 18 18 
38a8a 820 18 18 00 7E 
38a8e 821 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
38a92 822 60 00 10 18 
38a96 823 1C 1E 1C 18 
38a9a 824 10 00 08 18 
38a9e 825 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
38aa2 826 08 00       | 	byte	$08, $00
38aa4 827 00 00 00 00 
      ...             
38cb0 8aa 00 00 00 00 
38cb4 8ab 00 00       | amiga_font     file "amigafont.def"
38cb6 8ab 18 18 18 18 
38cba 8ac 18 18       | 	byte	$18[6]
38cbc 8ad 00 18 18 00 
38cc0 8ae 00 00 00 00 
38cc4 8af 00 00 66 66 
38cc8 8b0 66 00 00 00 | 	byte	$00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $00, $00, $00
38ccc 8b1 00 00 00 00 
38cd0 8b2 00 00 00 00 
38cd4 8b3 00 00       | 	byte	$00[10]
38cd6 8b3 36 36 7F 36 
38cda 8b4 36 36 7F 36 
38cde 8b5 36 00 00 00 
38ce2 8b6 00 00 00 00 | 	byte	$36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $00, $00, $00
38ce6 8b7 18 7C 06 06 
38cea 8b8 3C 60 60 3E 
38cee 8b9 18 00 00 00 
38cf2 8ba 00 00 00 00 | 	byte	$18, $7c, $06, $06, $3c, $60, $60, $3e, $18, $00, $00, $00, $00, $00, $00, $00
38cf6 8bb 00 00 C6 69 
38cfa 8bc 36 18 6C 96 
38cfe 8bd 63 00 00 00 
38d02 8be 00 00 00 00 | 	byte	$00, $00, $c6, $69, $36, $18, $6c, $96, $63, $00, $00, $00, $00, $00, $00, $00
38d06 8bf 1C 36 36 1E 
38d0a 8c0 6E 3B 33 73 
38d0e 8c1 DE 00 00 00 
38d12 8c2 00 00 00 00 | 	byte	$1c, $36, $36, $1e, $6e, $3b, $33, $73, $de, $00, $00, $00, $00, $00, $00, $00
38d16 8c3 18 18 0C 00 
38d1a 8c4 00 00 00 00 
38d1e 8c5 00 00 00 00 
38d22 8c6 00 00 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38d26 8c7 30 18 0C 0C 
38d2a 8c8 0C 0C 0C 18 
38d2e 8c9 30 00 00 00 
38d32 8ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00, $00
38d36 8cb 0C 18 30 30 
38d3a 8cc 30 30 30 18 
38d3e 8cd 0C 00 00 00 
38d42 8ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00, $00
38d46 8cf 00 66 66 3C 
38d4a 8d0 FF 3C 66 66 
38d4e 8d1 00 00 00 00 
38d52 8d2 00 00 00 00 | 	byte	$00, $66, $66, $3c, $ff, $3c, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00
38d56 8d3 00 18 18 18 
38d5a 8d4 7E 18 18 18 
38d5e 8d5 00 00 00 00 
38d62 8d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
38d66 8d7 00 00 00 00 
38d6a 8d8 00 00 00    | 	byte	$00[7]
38d6d 8d9 18 18 0C 00 
38d71 8da 00 00 00 00 
38d75 8db 00 00 00 00 
38d79 8dc 00 7E 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00
38d7d 8dd 00 00 00 00 
38d81 8de 00 00 00 00 
38d85 8df 00 00 00 00 
38d89 8e0 00 00 00 00 | 	byte	$00[16]
38d8d 8e1 18 18 00 00 
38d91 8e2 00 00 00 00 
38d95 8e3 00 00 C0 60 
38d99 8e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $60, $30, $18, $0c, $06
38d9d 8e5 03 00 00 00 
38da1 8e6 00 00 00 00 
38da5 8e7 00 3C 66 66 
38da9 8e8 76 7E 6E 66 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $76, $7e, $6e, $66
38dad 8e9 66 3C 00 00 
38db1 8ea 00 00 00 00 
38db5 8eb 00 18 1C 1E 
38db9 8ec 18 18 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18
38dbd 8ed 18 18 00 00 
38dc1 8ee 00 00 00 00 
38dc5 8ef 00 3C 66 60 
38dc9 8f0 60 30 18 0C | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $30, $18, $0c
38dcd 8f1 06 7E 00 00 
38dd1 8f2 00 00 00 00 
38dd5 8f3 00 3C 66 60 
38dd9 8f4 60 38 60 60 | 	byte	$06, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $38, $60, $60
38ddd 8f5 66 3C 00 00 
38de1 8f6 00 00 00 00 
38de5 8f7 00 30 38 3C 
38de9 8f8 36 33 7F 30 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30
38ded 8f9 30 30 00 00 
38df1 8fa 00 00 00 00 
38df5 8fb 00 7E 06 06 
38df9 8fc 3E 60 60 60 | 	byte	$30, $30, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06, $3e, $60, $60, $60
38dfd 8fd 66 3C 00 00 
38e01 8fe 00 00 00 00 
38e05 8ff 00 38 0C 06 
38e09 900 06 3E 66 66 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $06, $06, $3e, $66, $66
38e0d 901 66 3C 00 00 
38e11 902 00 00 00 00 
38e15 903 00 7E 60 60 
38e19 904 60 30 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $7e, $60, $60, $60, $30, $18, $18
38e1d 905 18 18 00 00 
38e21 906 00 00 00 00 
38e25 907 00 3C 66 66 
38e29 908 66 3C 66 66 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $3c, $66, $66
38e2d 909 66 3C 00 00 
38e31 90a 00 00 00 00 
38e35 90b 00 3C 66 66 
38e39 90c 66 7C 60 60 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $7c, $60, $60
38e3d 90d 30 1C 00 00 
38e41 90e 00 00 00 00 
38e45 90f 00 00 00 18 
38e49 910 18 00 00 18 | 	byte	$30, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $18
38e4d 911 18 00 00 00 
38e51 912 00 00 00 00 
38e55 913 00 00 00 18 
38e59 914 18 00 00 00 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
38e5d 915 18 18 0C 00 
38e61 916 00 00 00 00 
38e65 917 00 00 00 60 
38e69 918 18 06 18 60 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $60, $18, $06, $18, $60
38e6d 919 00 00 00 00 
38e71 91a 00 00 00 00 
38e75 91b 00 00 00 00 | 	byte	$00[12]
38e79 91c 7E 00 7E 00 
38e7d 91d 00 00 00 00 
38e81 91e 00 00 00 00 
38e85 91f 00 00 00 06 | 	byte	$7e, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
38e89 920 18 60 18 06 
38e8d 921 00 00 00 00 
38e91 922 00 00 00 00 
38e95 923 00 3C 66 60 | 	byte	$18, $60, $18, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60
38e99 924 60 30 18 00 
38e9d 925 18 18 00 00 
38ea1 926 00 00 00 00 
38ea5 927 00 3E 63 63 | 	byte	$60, $30, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
38ea9 928 7B 6B 7B 03 
38ead 929 03 1E 00 00 
38eb1 92a 00 00 00 00 
38eb5 92b 00 3E 63 63 | 	byte	$7b, $6b, $7b, $03, $03, $1e, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
38eb9 92c 63 7F 63 63 
38ebd 92d 63 63 00 00 
38ec1 92e 00 00 00 00 
38ec5 92f 00 3E 66 66 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66
38ec9 930 66 3E 66 66 
38ecd 931 66 3E 00 00 
38ed1 932 00 00 00 00 
38ed5 933 00 78 0C 06 | 	byte	$66, $3e, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $78, $0c, $06
38ed9 934 06 06 06 06 
38edd 935 0C 78 00 00 
38ee1 936 00 00 00 00 
38ee5 937 00 1F 33 63 | 	byte	$06, $06, $06, $06, $0c, $78, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $63
38ee9 938 63 63 63 63 
38eed 939 33 1F 00 00 
38ef1 93a 00 00 00 00 
38ef5 93b 00 7E 06 06 | 	byte	$63, $63, $63, $63, $33, $1f, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
38ef9 93c 06 1E 06 06 
38efd 93d 06 7E 00 00 
38f01 93e 00 00 00 00 
38f05 93f 00 7E 06 06 | 	byte	$06, $1e, $06, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
38f09 940 06 1E 06 06 
38f0d 941 06 06 00 00 
38f11 942 00 00 00 00 
38f15 943 00 3C 66 06 | 	byte	$06, $1e, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06
38f19 944 06 76 66 66 
38f1d 945 66 7C 00 00 
38f21 946 00 00 00 00 
38f25 947 00 63 63 63 | 	byte	$06, $76, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63
38f29 948 63 7F 63 63 
38f2d 949 63 63 00 00 
38f31 94a 00 00 00 00 
38f35 94b 00 3C 18 18 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3c, $18, $18
38f39 94c 18 18 18 18 
38f3d 94d 18          | 	byte	$18[5]
38f3e 94d 3C 00 00 00 
38f42 94e 00 00 00 00 
38f46 94f 60 60 60 60 
38f4a 950 60 60 60 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60, $60, $60, $60, $60, $63
38f4e 951 3E 00 00 00 
38f52 952 00 00 00 00 
38f56 953 C3 63 33 1B 
38f5a 954 0F 1B 33 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $c3, $63, $33, $1b, $0f, $1b, $33, $63
38f5e 955 C3 00 00 00 
38f62 956 00 00 00 00 
38f66 957 03 03 03 03 
38f6a 958 03 03 03 03 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $03, $03, $03
38f6e 959 7F 00 00 00 
38f72 95a 00 00 00 00 
38f76 95b 63 77 7F 6B 
38f7a 95c 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $6b, $63, $63, $63, $63
38f7e 95d 63 00 00 00 
38f82 95e 00 00 00 00 
38f86 95f 63 67 6F 7B 
38f8a 960 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7b, $73, $63, $63, $63
38f8e 961 63 00 00 00 
38f92 962 00 00 00 00 
38f96 963 3E 63 63 63 
38f9a 964 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63
38f9e 965 3E 00 00 00 
38fa2 966 00 00 00 00 
38fa6 967 3E 66 66 66 
38faa 968 3E 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e, $06, $06, $06
38fae 969 06 00 00 00 
38fb2 96a 00 00 00 00 
38fb6 96b 3E 63 63 63 
38fba 96c 63 63 63 7B | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $7b
38fbe 96d FE 00 00 00 
38fc2 96e 00 00 00 00 
38fc6 96f 1F 33 33 33 
38fca 970 1F 1B 33 63 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $33, $33, $1f, $1b, $33, $63
38fce 971 63 00 00 00 
38fd2 972 00 00 00 00 
38fd6 973 3C 66 06 0C 
38fda 974 18 30 60 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06, $0c, $18, $30, $60, $66
38fde 975 3C 00 00 00 
38fe2 976 00 00 00 00 
38fe6 977 7E 18 18 18 
38fea 978 18 18 18 18 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $7e, $18, $18, $18, $18, $18, $18, $18
38fee 979 18 00 00 00 
38ff2 97a 00 00 00 00 
38ff6 97b 63 63 63 63 
38ffa 97c 63 63 63 63 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63
38ffe 97d 3E 00 00 00 
39002 97e 00 00 00 00 
39006 97f 63 63 63 63 
3900a 980 63 36 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36, $36, $1c
3900e 981 08 00 00 00 
39012 982 00 00 00 00 
39016 983 C3 C3 C3 C3 
3901a 984 C3 DB FF E7 | 	byte	$08, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $c3, $c3, $c3, $db, $ff, $e7
3901e 985 C3 00 00 00 
39022 986 00 00 00 00 
39026 987 C3 C3 66 3C 
3902a 988 18 3C 66 C3 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $3c, $66, $c3
3902e 989 C3 00 00 00 
39032 98a 00 00 00 00 
39036 98b C3 C3 66 3C 
3903a 98c 18 18 18 18 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $18, $18, $18
3903e 98d 18 00 00 00 
39042 98e 00 00 00 00 
39046 98f 7F 60 60 30 
3904a 990 18 0C 06 03 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $7f, $60, $60, $30, $18, $0c, $06, $03
3904e 991 7F 00 00 00 
39052 992 00 00 00 00 
39056 993 3C 0C 0C 0C 
3905a 994 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3905e 995 3C 00 00 00 
39062 996 00 00 00 00 
39066 997 00 03 06 0C 
3906a 998 18 30 60 C0 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $03, $06, $0c, $18, $30, $60, $c0
3906e 999 00 00 00 00 
39072 99a 00 00 00 00 | 	byte	$00[8]
39076 99b 3C 30 30 30 
3907a 99c 30 30 30 30 
3907e 99d 3C 00 00 00 
39082 99e 00 00 00 00 | 	byte	$3c, $30, $30, $30, $30, $30, $30, $30, $3c, $00, $00, $00, $00, $00, $00, $00
39086 99f 08 1C 36 63 
3908a 9a0 00 00 00 00 
3908e 9a1 00 00 00 00 
39092 9a2 00 00 00 00 | 	byte	$08, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39096 9a3 00 00 00 00 
3909a 9a4 00 00 00 00 
3909e 9a5 00          | 	byte	$00[9]
3909f 9a5 7F 00 00 00 
390a3 9a6 00 00 00 18 
390a7 9a7 18 30 00 00 
390ab 9a8 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $18, $18, $30, $00, $00, $00, $00, $00, $00
390af 9a9 00 00 00 00 
390b3 9aa 00 00 00 00 
390b7 9ab 00 00       | 	byte	$00[10]
390b9 9ac 3C 60 7C 66 
390bd 9ad 66 7C 00 00 
390c1 9ae 00 00 00 00 
390c5 9af 00 06 06 06 | 	byte	$3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $06, $06, $06
390c9 9b0 3E 66 66 66 
390cd 9b1 66 3E 00 00 
390d1 9b2 00 00 00 00 
390d5 9b3 00 00 00 00 | 	byte	$3e, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
390d9 9b4 3C 06 06 06 
390dd 9b5 06 3C 00 00 
390e1 9b6 00 00 00 00 
390e5 9b7 00 60 60 60 | 	byte	$3c, $06, $06, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60
390e9 9b8 7C 66 66 66 
390ed 9b9 66 7C 00 00 
390f1 9ba 00 00 00 00 
390f5 9bb 00 00 00 00 | 	byte	$7c, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
390f9 9bc 3C 66 7E 06 
390fd 9bd 06 3C 00 00 
39101 9be 00 00 00 00 
39105 9bf 00 38 0C 0C | 	byte	$3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $0c
39109 9c0 3E 0C 0C 0C 
3910d 9c1 0C 0C 00 00 
39111 9c2 00 00 00 00 
39115 9c3 00 00 00 00 | 	byte	$3e, $0c, $0c, $0c, $0c, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39119 9c4 7C 66 66 66 
3911d 9c5 7C 60 60 3C 
39121 9c6 00 00 00 00 
39125 9c7 00 06 06 06 | 	byte	$7c, $66, $66, $66, $7c, $60, $60, $3c, $00, $00, $00, $00, $00, $06, $06, $06
39129 9c8 3E 66 66 66 
3912d 9c9 66 66 00 00 
39131 9ca 00 00 00 00 
39135 9cb 00 00 18 00 | 	byte	$3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00
39139 9cc 18 18 18 18 
3913d 9cd 18          | 	byte	$18[5]
3913e 9cd 30 00 00 00 
39142 9ce 00 00 00 00 
39146 9cf 00 30 00 30 
3914a 9d0 30 30 30 30 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $30, $30, $30, $30, $30
3914e 9d1 30 30 1E 00 
39152 9d2 00 00 00 00 
39156 9d3 03 03 03 33 
3915a 9d4 1B 0F 1B 33 | 	byte	$30, $30, $1e, $00, $00, $00, $00, $00, $03, $03, $03, $33, $1b, $0f, $1b, $33
3915e 9d5 63 00 00 00 
39162 9d6 00 00 00 00 
39166 9d7 18 18 18 18 
3916a 9d8 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
3916e 9d9 30 00 00 00 
39172 9da 00 00 00 00 
39176 9db 00 00 00 37 
3917a 9dc 7F 6B 63 63 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $63, $63
3917e 9dd 63 00 00 00 
39182 9de 00 00 00 00 
39186 9df 00 00 00 3E 
3918a 9e0 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $66
3918e 9e1 66 00 00 00 
39192 9e2 00 00 00 00 
39196 9e3 00 00 00 3C 
3919a 9e4 66 66 66 66 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $66
3919e 9e5 3C 00 00 00 
391a2 9e6 00 00 00 00 
391a6 9e7 00 00 00 3E 
391aa 9e8 66 66 66 3E | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e
391ae 9e9 06 06 06 00 
391b2 9ea 00 00 00 00 
391b6 9eb 00 00 00 7C 
391ba 9ec 66 66 66 7C | 	byte	$06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7c, $66, $66, $66, $7c
391be 9ed 60 60 60 00 
391c2 9ee 00 00 00 00 
391c6 9ef 00 00 00 3E 
391ca 9f0 66 06 06 06 | 	byte	$60, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $06, $06, $06
391ce 9f1 06 00 00 00 
391d2 9f2 00 00 00 00 
391d6 9f3 00 00 00 3C 
391da 9f4 06 0C 30 60 | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $06, $0c, $30, $60
391de 9f5 3E 00 00 00 
391e2 9f6 00 00 00 00 
391e6 9f7 00 0C 0C 3E 
391ea 9f8 0C 0C 0C 0C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $0c, $3e, $0c, $0c, $0c, $0c
391ee 9f9 38 00 00 00 
391f2 9fa 00 00 00 00 
391f6 9fb 00 00 00 66 
391fa 9fc 66 66 66 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66
391fe 9fd 7C 00 00 00 
39202 9fe 00 00 00 00 
39206 9ff 00 00 00 66 
3920a a00 66 66 66 3C | 	byte	$7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
3920e a01 18 00 00 00 
39212 a02 00 00 00 00 
39216 a03 00 00 00 63 
3921a a04 63 63 6B 3E | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $6b, $3e
3921e a05 36 00 00 00 
39222 a06 00 00 00 00 
39226 a07 00 00 00 63 
3922a a08 36 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36
3922e a09 63 00 00 00 
39232 a0a 00 00 00 00 
39236 a0b 00 00 00 66 
3923a a0c 66 66 66 3C | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
3923e a0d 18 0C 06 00 
39242 a0e 00 00 00 00 
39246 a0f 00 00 00 7E 
3924a a10 30 18 0C 06 | 	byte	$18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $30, $18, $0c, $06
3924e a11 7E 00 00 00 
39252 a12 00 00 00 00 
39256 a13 70 18 18 18 
3925a a14 0E 18 18 18 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18
3925e a15 70 00 00 00 
39262 a16 00 00 00 00 
39266 a17 18 18 18 18 
3926a a18 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
3926e a19 18 00 00 00 
39272 a1a 00 00 00 00 
39276 a1b 0E 18 18 18 
3927a a1c 70 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18
3927e a1d 0E 00 00 00 
39282 a1e 00 00 00 00 
39286 a1f 46 5D 31 00 
3928a a20 00 00 00 00 | 	byte	$0e, $00, $00, $00, $00, $00, $00, $00, $46, $5d, $31, $00, $00, $00, $00, $00
3928e a21 00 00 00 00 
39292 a22 00 00 00 00 | 	byte	$00[8]
39296 a23 C0 F0 3C 0F 
3929a a24 C3 F0 3C 0F 
3929e a25 03 00 00 00 
392a2 a26 00 00 00 00 | 	byte	$c0, $f0, $3c, $0f, $c3, $f0, $3c, $0f, $03, $00, $00, $00, $00, $00, $00, $00
392a6 a27 18 18 00 18 
392aa a28 18 18 18 18 
392ae a29 18 00 00 00 
392b2 a2a 00 00 00 00 | 	byte	$18, $18, $00, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
392b6 a2b 18 18 7E 1B 
392ba a2c 1B 7E 18 18 
392be a2d 00 00 00 00 
392c2 a2e 00 00 00 00 | 	byte	$18, $18, $7e, $1b, $1b, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
392c6 a2f 78 CC 0C 0C 
392ca a30 1E 0C 0C 06 
392ce a31 7F 00 00 00 
392d2 a32 00 00 00 00 | 	byte	$78, $cc, $0c, $0c, $1e, $0c, $0c, $06, $7f, $00, $00, $00, $00, $00, $00, $00
392d6 a33 66 3C 66 66 
392da a34 3C 66 00 00 
392de a35 00 00 00 00 
392e2 a36 00 00 00 00 | 	byte	$66, $3c, $66, $66, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
392e6 a37 C3 C3 66 3C 
392ea a38 18 7E 18 18 
392ee a39 18 00 00 00 
392f2 a3a 00 00 00 00 | 	byte	$c3, $c3, $66, $3c, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
392f6 a3b 18 18 18 18 
392fa a3c 00 18 18 18 
392fe a3d 18 00 00 00 
39302 a3e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
39306 a3f 3C 06 06 3C 
3930a a40 66 66 66 3C 
3930e a41 60 60 3C 00 
39312 a42 00 00 00 00 | 	byte	$3c, $06, $06, $3c, $66, $66, $66, $3c, $60, $60, $3c, $00, $00, $00, $00, $00
39316 a43 66 66 00 00 
3931a a44 00 00 00 00 
3931e a45 00 00 00 00 
39322 a46 00 00 00 00 | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39326 a47 7E 81 B9 85 
3932a a48 85 B9 81 7E 
3932e a49 00 00 00 00 
39332 a4a 00 00 00 00 | 	byte	$7e, $81, $b9, $85, $85, $b9, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
39336 a4b 3C 33 33 7E 
3933a a4c 00 7F 00 00 
3933e a4d 00 00 00 00 
39342 a4e 00 00 00 00 | 	byte	$3c, $33, $33, $7e, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39346 a4f 00 00 CC 66 
3934a a50 33 66 CC 00 
3934e a51 00 00 00 00 
39352 a52 00 00 00 00 | 	byte	$00, $00, $cc, $66, $33, $66, $cc, $00, $00, $00, $00, $00, $00, $00, $00, $00
39356 a53 7E 60 60 00 
3935a a54 00 00 00 00 
3935e a55 00 00 00 00 
39362 a56 00 00 00 00 | 	byte	$7e, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39366 a57 7E 81 9D A5 
3936a a58 9D A5 81 7E 
3936e a59 00 00 00 00 
39372 a5a 00 00 00 00 | 	byte	$7e, $81, $9d, $a5, $9d, $a5, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
39376 a5b 7E 00 00 00 
3937a a5c 00 00 00 00 
3937e a5d 00 00 00 00 
39382 a5e 00 00 00 00 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39386 a5f 3C 66 66 3C 
3938a a60 00 00 00 00 
3938e a61 00 00 00 00 
39392 a62 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39396 a63 18 18 18 7E 
3939a a64 18 18 18 00 
3939e a65 7E 00 00 00 
393a2 a66 00 00 00 00 | 	byte	$18, $18, $18, $7e, $18, $18, $18, $00, $7e, $00, $00, $00, $00, $00, $00, $00
393a6 a67 1E 30 30 18 
393aa a68 0C 06 3E 00 
393ae a69 00 00 00 00 
393b2 a6a 00 00 00 00 | 	byte	$1e, $30, $30, $18, $0c, $06, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
393b6 a6b 1E 30 30 1C 
393ba a6c 30 30 1E 00 
393be a6d 00 00 00 00 
393c2 a6e 00 00 00 00 | 	byte	$1e, $30, $30, $1c, $30, $30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
393c6 a6f 30 18 0C 06 
393ca a70 00 00 00 00 
393ce a71 00 00 00 00 
393d2 a72 00 00 00 00 | 	byte	$30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
393d6 a73 00 00 00 66 
393da a74 66 66 66 66 
393de a75 FE 06 06 00 
393e2 a76 00 00 00 00 | 	byte	$00, $00, $00, $66, $66, $66, $66, $66, $fe, $06, $06, $00, $00, $00, $00, $00
393e6 a77 7C 5E 5E 5E 
393ea a78 5C 50 50 50 
393ee a79 50 50 00 00 
393f2 a7a 00 00 00 00 | 	byte	$7c, $5e, $5e, $5e, $5c, $50, $50, $50, $50, $50, $00, $00, $00, $00, $00, $00
393f6 a7b 00 00 00 18 
393fa a7c 18 00 00 00 
393fe a7d 00 00 00 00 
39402 a7e 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39406 a7f 00 00 00 00 
3940a a80 00 00 00 00 
3940e a81 00          | 	byte	$00[9]
3940f a81 30 18 00 00 
39413 a82 00 00 00 18 
39417 a83 1C 18 18 18 
3941b a84 18 18 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $18, $1c, $18, $18, $18, $18, $18, $00, $00
3941f a85 00 00 00 00 
39423 a86 00 00 00    | 	byte	$00[7]
39426 a87 3C 66 66 3C 
3942a a88 00 7E 00 00 
3942e a89 00 00 00 00 
39432 a8a 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39436 a8b 00 00 33 66 
3943a a8c CC 66 33 00 
3943e a8d 00 00 00 00 
39442 a8e 00 00 00 00 | 	byte	$00, $00, $33, $66, $cc, $66, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00
39446 a8f 02 63 32 1A 
3944a a90 4E 66 F3 40 
3944e a91 40 00 00 00 
39452 a92 00 00 00 00 | 	byte	$02, $63, $32, $1a, $4e, $66, $f3, $40, $40, $00, $00, $00, $00, $00, $00, $00
39456 a93 04 C6 64 34 
3945a a94 7C 8C 46 23 
3945e a95 F0 00 00 00 
39462 a96 00 00 00 00 | 	byte	$04, $c6, $64, $34, $7c, $8c, $46, $23, $f0, $00, $00, $00, $00, $00, $00, $00
39466 a97 03 C4 66 34 
3946a a98 5B 6C F6 43 
3946e a99 40 00 00 00 
39472 a9a 00 00 00 00 | 	byte	$03, $c4, $66, $34, $5b, $6c, $f6, $43, $40, $00, $00, $00, $00, $00, $00, $00
39476 a9b 18 18 00 18 
3947a a9c 0C 06 06 66 
3947e a9d 3C 00 00 00 
39482 a9e 00 00 00 00 | 	byte	$18, $18, $00, $18, $0c, $06, $06, $66, $3c, $00, $00, $00, $00, $00, $00, $00
39486 a9f 06 0C 3E 63 
3948a aa0 63 7F 63 63 
3948e aa1 63 00 00 00 
39492 aa2 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
39496 aa3 30 18 3E 63 
3949a aa4 63 7F 63 63 
3949e aa5 63 00 00 00 
394a2 aa6 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
394a6 aa7 0C 33 3E 63 
394aa aa8 63 63 7F 63 
394ae aa9 63 00 00 00 
394b2 aaa 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
394b6 aab 4E 39 3E 63 
394ba aac 63 7F 63 63 
394be aad 63 00 00 00 
394c2 aae 00 00 00 00 | 	byte	$4e, $39, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
394c6 aaf 63 00 3E 63 
394ca ab0 63 7F 63 63 
394ce ab1 63 00 00 00 
394d2 ab2 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
394d6 ab3 1C 22 1C 36 
394da ab4 63 63 7F 63 
394de ab5 63 00 00 00 
394e2 ab6 00 00 00 00 | 	byte	$1c, $22, $1c, $36, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
394e6 ab7 F8 3C 3C 36 
394ea ab8 F6 3F 33 33 
394ee ab9 F3 00 00 00 
394f2 aba 00 00 00 00 | 	byte	$f8, $3c, $3c, $36, $f6, $3f, $33, $33, $f3, $00, $00, $00, $00, $00, $00, $00
394f6 abb 78 0C 06 06 
394fa abc 06 06 06 0C 
394fe abd 78 30 18 00 
39502 abe 00 00 00 00 | 	byte	$78, $0c, $06, $06, $06, $06, $06, $0c, $78, $30, $18, $00, $00, $00, $00, $00
39506 abf 0C 18 7E 06 
3950a ac0 06 3E 06 06 
3950e ac1 7E 00 00 00 
39512 ac2 00 00 00 00 | 	byte	$0c, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
39516 ac3 30 18 7E 06 
3951a ac4 06 3E 06 06 
3951e ac5 7E 00 00 00 
39522 ac6 00 00 00 00 | 	byte	$30, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
39526 ac7 18 66 7E 06 
3952a ac8 06 3E 06 06 
3952e ac9 7E 00 00 00 
39532 aca 00 00 00 00 | 	byte	$18, $66, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
39536 acb 66 00 7E 06 
3953a acc 06 3E 06 06 
3953e acd 7E 00 00 00 
39542 ace 00 00 00 00 | 	byte	$66, $00, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
39546 acf 0C 18 3C 18 
3954a ad0 18 18 18 18 
3954e ad1 3C 00 00 00 
39552 ad2 00 00 00 00 | 	byte	$0c, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
39556 ad3 30 18 3C 18 
3955a ad4 18 18 18 18 
3955e ad5 3C 00 00 00 
39562 ad6 00 00 00 00 | 	byte	$30, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
39566 ad7 18 66 3C 18 
3956a ad8 18 18 18 18 
3956e ad9 3C 00 00 00 
39572 ada 00 00 00 00 | 	byte	$18, $66, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
39576 adb 66 00 3C 18 
3957a adc 18 18 18 18 
3957e add 3C 00 00 00 
39582 ade 00 00 00 00 | 	byte	$66, $00, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
39586 adf 1E 36 66 66 
3958a ae0 6F 66 66 36 
3958e ae1 1E 00 00 00 
39592 ae2 00 00 00 00 | 	byte	$1e, $36, $66, $66, $6f, $66, $66, $36, $1e, $00, $00, $00, $00, $00, $00, $00
39596 ae3 8E 73 67 6F 
3959a ae4 7B 73 63 63 
3959e ae5 63 00 00 00 
395a2 ae6 00 00 00 00 | 	byte	$8e, $73, $67, $6f, $7b, $73, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
395a6 ae7 06 0C 3E 63 
395aa ae8 63 63 63 63 
395ae ae9 3E 00 00 00 
395b2 aea 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
395b6 aeb 30 18 3E 63 
395ba aec 63 63 63 63 
395be aed 3E 00 00 00 
395c2 aee 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
395c6 aef 0C 33 3E 63 
395ca af0 63 63 63 63 
395ce af1 3E 00 00 00 
395d2 af2 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
395d6 af3 8E 71 3E 63 
395da af4 63 63 63 63 
395de af5 3E 00 00 00 
395e2 af6 00 00 00 00 | 	byte	$8e, $71, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
395e6 af7 63 00 3E 63 
395ea af8 63 63 63 63 
395ee af9 3E 00 00 00 
395f2 afa 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
395f6 afb 00 00 63 36 
395fa afc 1C 1C 36 63 
395fe afd 00 00 00 00 
39602 afe 00 00 00 00 | 	byte	$00, $00, $63, $36, $1c, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00
39606 aff BE 63 73 7B 
3960a b00 6B 6F 67 63 
3960e b01 3F 00 00 00 
39612 b02 00 00 00 00 | 	byte	$be, $63, $73, $7b, $6b, $6f, $67, $63, $3f, $00, $00, $00, $00, $00, $00, $00
39616 b03 0C 18 63 63 
3961a b04 63 63 63 63 
3961e b05 3E 00 00 00 
39622 b06 00 00 00 00 | 	byte	$0c, $18, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
39626 b07 18 0C 63 63 
3962a b08 63 63 63 63 
3962e b09 3E 00 00 00 
39632 b0a 00 00 00 00 | 	byte	$18, $0c, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
39636 b0b 08 36 63 63 
3963a b0c 63 63 63 63 
3963e b0d 3E 00 00 00 
39642 b0e 00 00 00 00 | 	byte	$08, $36, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
39646 b0f 63 00 63 63 
3964a b10 63 63 63 63 
3964e b11 3E 00 00 00 
39652 b12 00 00 00 00 | 	byte	$63, $00, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
39656 b13 30 18 C3 66 
3965a b14 3C 18 18 18 
3965e b15 18 00 00 00 
39662 b16 00 00 00 00 | 	byte	$30, $18, $c3, $66, $3c, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
39666 b17 03 03 3F 63 
3966a b18 63 3F 03 03 
3966e b19 03 00 00 00 
39672 b1a 00 00 00 00 | 	byte	$03, $03, $3f, $63, $63, $3f, $03, $03, $03, $00, $00, $00, $00, $00, $00, $00
39676 b1b 3C 66 66 66 
3967a b1c 36 66 66 66 
3967e b1d 36 06 06 00 
39682 b1e 00 00 00 00 | 	byte	$3c, $66, $66, $66, $36, $66, $66, $66, $36, $06, $06, $00, $00, $00, $00, $00
39686 b1f 06 0C 00 3C 
3968a b20 60 7C 66 66 
3968e b21 7C 00 00 00 
39692 b22 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
39696 b23 60 30 00 3C 
3969a b24 60 7C 66 66 
3969e b25 7C 00 00 00 
396a2 b26 00 00 00 00 | 	byte	$60, $30, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
396a6 b27 18 66 00 3C 
396aa b28 60 7C 66 66 
396ae b29 7C 00 00 00 
396b2 b2a 00 00 00 00 | 	byte	$18, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
396b6 b2b 8E 71 00 3C 
396ba b2c 60 7C 66 66 
396be b2d 7C 00 00 00 
396c2 b2e 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
396c6 b2f 00 66 00 3C 
396ca b30 60 7C 66 66 
396ce b31 7C 00 00 00 
396d2 b32 00 00 00 00 | 	byte	$00, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
396d6 b33 18 24 18 3C 
396da b34 60 7C 66 66 
396de b35 7C 00 00 00 
396e2 b36 00 00 00 00 | 	byte	$18, $24, $18, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
396e6 b37 00 00 00 7E 
396ea b38 D8 FE 1B 1B 
396ee b39 EE 00 00 00 
396f2 b3a 00 00 00 00 | 	byte	$00, $00, $00, $7e, $d8, $fe, $1b, $1b, $ee, $00, $00, $00, $00, $00, $00, $00
396f6 b3b 00 00 00 3C 
396fa b3c 06 06 06 06 
396fe b3d 3C 18 0C 00 
39702 b3e 00 00 00 00 | 	byte	$00, $00, $00, $3c, $06, $06, $06, $06, $3c, $18, $0c, $00, $00, $00, $00, $00
39706 b3f 06 0C 00 3C 
3970a b40 66 7E 06 06 
3970e b41 3C 00 00 00 
39712 b42 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
39716 b43 60 30 00 3C 
3971a b44 66 7E 06 06 
3971e b45 3C 00 00 00 
39722 b46 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
39726 b47 18 66 00 3C 
3972a b48 66 7E 06 06 
3972e b49 3C 00 00 00 
39732 b4a 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
39736 b4b 00 66 00 3C 
3973a b4c 66 7E 06 06 
3973e b4d 3C 00 00 00 
39742 b4e 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
39746 b4f 0C 18 00 18 
3974a b50 18 18 18 18 
3974e b51 30 00 00 00 
39752 b52 00 00 00 00 | 	byte	$0c, $18, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
39756 b53 18 0C 00 0C 
3975a b54 0C 0C 0C 0C 
3975e b55 18 00 00 00 
39762 b56 00 00 00 00 | 	byte	$18, $0c, $00, $0c, $0c, $0c, $0c, $0c, $18, $00, $00, $00, $00, $00, $00, $00
39766 b57 18 66 00 18 
3976a b58 18 18 18 18 
3976e b59 30 00 00 00 
39772 b5a 00 00 00 00 | 	byte	$18, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
39776 b5b 00 66 00 18 
3977a b5c 18 18 18 18 
3977e b5d 30 00 00 00 
39782 b5e 00 00 00 00 | 	byte	$00, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
39786 b5f 03 06 3F 18 
3978a b60 3C 66 66 66 
3978e b61 3C 00 00 00 
39792 b62 00 00 00 00 | 	byte	$03, $06, $3f, $18, $3c, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
39796 b63 8E 71 00 3E 
3979a b64 66 66 66 66 
3979e b65 66 00 00 00 
397a2 b66 00 00 00 00 | 	byte	$8e, $71, $00, $3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
397a6 b67 06 0C 00 3C 
397aa b68 66 66 66 66 
397ae b69 3C 00 00 00 
397b2 b6a 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
397b6 b6b 60 30 00 3C 
397ba b6c 66 66 66 66 
397be b6d 3C 00 00 00 
397c2 b6e 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
397c6 b6f 18 66 00 3C 
397ca b70 66 66 66 66 
397ce b71 3C 00 00 00 
397d2 b72 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
397d6 b73 8E 71 00 3C 
397da b74 66 66 66 66 
397de b75 3C 00 00 00 
397e2 b76 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
397e6 b77 00 66 00 3C 
397ea b78 66 66 66 66 
397ee b79 3C 00 00 00 
397f2 b7a 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
397f6 b7b 00 18 18 00 
397fa b7c 7E 00 18 18 
397fe b7d 00 00 00 00 
39802 b7e 00 00 00 00 | 	byte	$00, $18, $18, $00, $7e, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
39806 b7f 00 00 00 7E 
3980a b80 73 7B 6F 67 
3980e b81 3F 00 00 00 
39812 b82 00 00 00 00 | 	byte	$00, $00, $00, $7e, $73, $7b, $6f, $67, $3f, $00, $00, $00, $00, $00, $00, $00
39816 b83 0C 18 00 66 
3981a b84 66 66 66 66 
3981e b85 7C 00 00 00 
39822 b86 00 00 00 00 | 	byte	$0c, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
39826 b87 30 18 00 66 
3982a b88 66 66 66 66 
3982e b89 7C 00 00 00 
39832 b8a 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
39836 b8b 18 66 00 66 
3983a b8c 66 66 66 66 
3983e b8d 7C 00 00 00 
39842 b8e 00 00 00 00 | 	byte	$18, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
39846 b8f 00 66 00 66 
3984a b90 66 66 66 66 
3984e b91 7C 00 00 00 
39852 b92 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
39856 b93 30 18 00 66 
3985a b94 66 66 66 3C 
3985e b95 18 0C 06 00 
39862 b96 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
39866 b97 06 06 06 3E 
3986a b98 66 66 66 3E 
3986e b99 06 06 06 00 
39872 b9a 00 00 00 00 | 	byte	$06, $06, $06, $3e, $66, $66, $66, $3e, $06, $06, $06, $00, $00, $00, $00, $00
39876 b9b 00 66 00 66 
3987a b9c 66 66 66 3C 
3987e b9d 18 0C 06 00 
39882 b9e 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
39886 b9f 00 7E 66 66 
3988a ba0 66 66 66 66 
3988e ba1 66 7E 00 00 
39892 ba2 00 00 00 00 | 	byte	$00, $7e, $66, $66, $66, $66, $66, $66, $66, $7e, $00, $00, $00, $00, $00, $00
39896 ba3 00 00 00 00 
      ...             
39a9e c25 00 00 00 00 
39aa2 c26 00 00       | 	byte	$00[526]
39aa4 c27 00 00 00 00 
39aa8 c28 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
39aa9 c28 80 00 00 00 
39aad c29 00 80 00 00 
39ab1 c2a 80 80 00 00 
39ab5 c2b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
39ab9 c2c 80 00 80 00 
39abd c2d 00 40 80 00 
39ac1 c2e AA AA AA 00 
39ac5 c2f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
39ac9 c30 FF 00 00 00 
39acd c31 00 FF 00 00 
39ad1 c32 FF FF 00 00 
39ad5 c33 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
39ad9 c34 FF 00 FF 00 
39add c35 00 FF FF 00 
39ae1 c36 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
39ae4 c37 00 00 00 00 
39ae8 c38 00          | ataripalette   file "ataripalettep2.def"
39ae9 c38 11 11 11 00 
39aed c39 22 22 22 00 
39af1 c3a 33 33 33 00 
39af5 c3b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
39af9 c3c 55 55 55 00 
39afd c3d 66 66 66 00 
39b01 c3e 77 77 77 00 
39b05 c3f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
39b09 c40 99 99 99 00 
39b0d c41 AA AA AA 00 
39b11 c42 BB BB BB 00 
39b15 c43 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
39b19 c44 DD DD DD 00 
39b1d c45 EE EE EE 00 
39b21 c46 FF FF FF 00 
39b25 c47 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
39b29 c48 00 14 40 00 
39b2d c49 00 1E 60 00 
39b31 c4a 00 28 80 00 
39b35 c4b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
39b39 c4c 00 3C BF 00 
39b3d c4d 00 46 DF 00 
39b41 c4e 00 50 FF 00 
39b45 c4f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
39b49 c50 39 77 FF 00 
39b4d c51 55 8A FF 00 
39b51 c52 71 9E FF 00 
39b55 c53 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
39b59 c54 AA C5 FF 00 
39b5d c55 C6 D8 FF 00 
39b61 c56 E3 EC FF 00 
39b65 c57 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
39b69 c58 00 00 40 00 
39b6d c59 00 00 60 00 
39b71 c5a 00 00 80 00 
39b75 c5b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
39b79 c5c 00 00 BF 00 
39b7d c5d 00 00 DF 00 
39b81 c5e 00 00 FF 00 
39b85 c5f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
39b89 c60 39 39 FF 00 
39b8d c61 55 55 FF 00 
39b91 c62 71 71 FF 00 
39b95 c63 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
39b99 c64 AA AA FF 00 
39b9d c65 C6 C6 FF 00 
39ba1 c66 E3 E3 FF 00 
39ba5 c67 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
39ba9 c68 20 00 40 00 
39bad c69 30 00 60 00 
39bb1 c6a 40 00 80 00 
39bb5 c6b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
39bb9 c6c 60 00 BF 00 
39bbd c6d 70 00 DF 00 
39bc1 c6e 80 00 FF 00 
39bc5 c6f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
39bc9 c70 9C 39 FF 00 
39bcd c71 AA 55 FF 00 
39bd1 c72 B8 71 FF 00 
39bd5 c73 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
39bd9 c74 D5 AA FF 00 
39bdd c75 E3 C6 FF 00 
39be1 c76 F1 E3 FF 00 
39be5 c77 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
39be9 c78 40 00 40 00 
39bed c79 60 00 60 00 
39bf1 c7a 80 00 80 00 
39bf5 c7b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
39bf9 c7c BF 00 BF 00 
39bfd c7d DF 00 DF 00 
39c01 c7e FF 00 FF 00 
39c05 c7f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
39c09 c80 FF 39 FF 00 
39c0d c81 FF 55 FF 00 
39c11 c82 FF 71 FF 00 
39c15 c83 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
39c19 c84 FF AA FF 00 
39c1d c85 FF C6 FF 00 
39c21 c86 FF E3 FF 00 
39c25 c87 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
39c29 c88 40 00 20 00 
39c2d c89 60 00 30 00 
39c31 c8a 80 00 40 00 
39c35 c8b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
39c39 c8c BF 00 60 00 
39c3d c8d DF 00 70 00 
39c41 c8e FF 00 80 00 
39c45 c8f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
39c49 c90 FF 39 9C 00 
39c4d c91 FF 55 AA 00 
39c51 c92 FF 71 B8 00 
39c55 c93 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
39c59 c94 FF AA D5 00 
39c5d c95 FF C6 E3 00 
39c61 c96 FF E3 F1 00 
39c65 c97 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
39c69 c98 40 00 00 00 
39c6d c99 60 00 00 00 
39c71 c9a 80 00 00 00 
39c75 c9b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
39c79 c9c BF 00 00 00 
39c7d c9d DF 00 00 00 
39c81 c9e FF 00 00 00 
39c85 c9f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
39c89 ca0 FF 39 39 00 
39c8d ca1 FF 55 55 00 
39c91 ca2 FF 71 71 00 
39c95 ca3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
39c99 ca4 FF AA AA 00 
39c9d ca5 FF C6 C6 00 
39ca1 ca6 FF E3 E3 00 
39ca5 ca7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
39ca9 ca8 40 10 00 00 
39cad ca9 60 18 00 00 
39cb1 caa 80 20 00 00 
39cb5 cab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
39cb9 cac BF 30 00 00 
39cbd cad DF 38 00 00 
39cc1 cae FF 40 00 00 
39cc5 caf FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
39cc9 cb0 FF 6A 39 00 
39ccd cb1 FF 80 55 00 
39cd1 cb2 FF 95 71 00 
39cd5 cb3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
39cd9 cb4 FF BF AA 00 
39cdd cb5 FF D5 C6 00 
39ce1 cb6 FF EA E3 00 
39ce5 cb7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
39ce9 cb8 40 20 00 00 
39ced cb9 60 30 00 00 
39cf1 cba 80 40 00 00 
39cf5 cbb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
39cf9 cbc BF 60 00 00 
39cfd cbd DF 70 00 00 
39d01 cbe FF 80 00 00 
39d05 cbf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
39d09 cc0 FF 9C 39 00 
39d0d cc1 FF AA 55 00 
39d11 cc2 FF B8 71 00 
39d15 cc3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
39d19 cc4 FF D5 AA 00 
39d1d cc5 FF E3 C6 00 
39d21 cc6 FF F1 E3 00 
39d25 cc7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
39d29 cc8 40 30 00 00 
39d2d cc9 60 48 00 00 
39d31 cca 80 60 00 00 
39d35 ccb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
39d39 ccc BF 90 00 00 
39d3d ccd DF A8 00 00 
39d41 cce FF C0 00 00 
39d45 ccf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
39d49 cd0 FF CE 39 00 
39d4d cd1 FF D5 55 00 
39d51 cd2 FF DC 71 00 
39d55 cd3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
39d59 cd4 FF EA AA 00 
39d5d cd5 FF F1 C6 00 
39d61 cd6 FF F8 E3 00 
39d65 cd7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
39d69 cd8 30 40 00 00 
39d6d cd9 48 60 00 00 
39d71 cda 60 80 00 00 
39d75 cdb 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
39d79 cdc 90 BF 00 00 
39d7d cdd A8 DF 00 00 
39d81 cde C0 FF 00 00 
39d85 cdf C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
39d89 ce0 CE FF 39 00 
39d8d ce1 D5 FF 55 00 
39d91 ce2 DC FF 71 00 
39d95 ce3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
39d99 ce4 EA FF AA 00 
39d9d ce5 F1 FF C6 00 
39da1 ce6 F8 FF E3 00 
39da5 ce7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
39da9 ce8 00 40 00 00 
39dad ce9 00 60 00 00 
39db1 cea 00 80 00 00 
39db5 ceb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
39db9 cec 00 BF 00 00 
39dbd ced 00 DF 00 00 
39dc1 cee 00 FF 00 00 
39dc5 cef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
39dc9 cf0 39 FF 39 00 
39dcd cf1 55 FF 55 00 
39dd1 cf2 71 FF 71 00 
39dd5 cf3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
39dd9 cf4 AA FF AA 00 
39ddd cf5 C6 FF C6 00 
39de1 cf6 E3 FF E3 00 
39de5 cf7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
39de9 cf8 00 40 14 00 
39ded cf9 00 60 1E 00 
39df1 cfa 00 80 28 00 
39df5 cfb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
39df9 cfc 00 BF 3C 00 
39dfd cfd 00 DF 46 00 
39e01 cfe 00 FF 50 00 
39e05 cff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
39e09 d00 39 FF 77 00 
39e0d d01 55 FF 8A 00 
39e11 d02 71 FF 9E 00 
39e15 d03 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
39e19 d04 AA FF C5 00 
39e1d d05 C6 FF D8 00 
39e21 d06 E3 FF EC 00 
39e25 d07 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
39e29 d08 00 40 28 00 
39e2d d09 00 60 3C 00 
39e31 d0a 00 80 50 00 
39e35 d0b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
39e39 d0c 00 BF 78 00 
39e3d d0d 00 DF 8C 00 
39e41 d0e 00 FF A0 00 
39e45 d0f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
39e49 d10 39 FF B5 00 
39e4d d11 55 FF C0 00 
39e51 d12 71 FF CA 00 
39e55 d13 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
39e59 d14 AA FF DF 00 
39e5d d15 C6 FF EA 00 
39e61 d16 E3 FF F4 00 
39e65 d17 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
39e69 d18 00 40 40 00 
39e6d d19 00 60 60 00 
39e71 d1a 00 80 80 00 
39e75 d1b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
39e79 d1c 00 BF BF 00 
39e7d d1d 00 DF DF 00 
39e81 d1e 00 FF FF 00 
39e85 d1f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
39e89 d20 39 FF FF 00 
39e8d d21 55 FF FF 00 
39e91 d22 71 FF FF 00 
39e95 d23 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
39e99 d24 AA FF FF 00 
39e9d d25 C6 FF FF 00 
39ea1 d26 E3 FF FF 00 
39ea5 d27 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
39ea9 d28 00 28 40 00 
39ead d29 00 3C 60 00 
39eb1 d2a 00 50 80 00 
39eb5 d2b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
39eb9 d2c 00 78 BF 00 
39ebd d2d 00 8C DF 00 
39ec1 d2e 00 A0 FF 00 
39ec5 d2f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
39ec9 d30 39 B5 FF 00 
39ecd d31 55 C0 FF 00 
39ed1 d32 71 CA FF 00 
39ed5 d33 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
39ed9 d34 AA DF FF 00 
39edd d35 C6 EA FF 00 
39ee1 d36 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
39ee4 d37 00 00 00 00 
39ee8 d38 00          | ataripalette2  file "ataripalettep2.def"
39ee9 d38 11 11 11 00 
39eed d39 22 22 22 00 
39ef1 d3a 33 33 33 00 
39ef5 d3b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
39ef9 d3c 55 55 55 00 
39efd d3d 66 66 66 00 
39f01 d3e 77 77 77 00 
39f05 d3f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
39f09 d40 99 99 99 00 
39f0d d41 AA AA AA 00 
39f11 d42 BB BB BB 00 
39f15 d43 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
39f19 d44 DD DD DD 00 
39f1d d45 EE EE EE 00 
39f21 d46 FF FF FF 00 
39f25 d47 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
39f29 d48 00 14 40 00 
39f2d d49 00 1E 60 00 
39f31 d4a 00 28 80 00 
39f35 d4b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
39f39 d4c 00 3C BF 00 
39f3d d4d 00 46 DF 00 
39f41 d4e 00 50 FF 00 
39f45 d4f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
39f49 d50 39 77 FF 00 
39f4d d51 55 8A FF 00 
39f51 d52 71 9E FF 00 
39f55 d53 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
39f59 d54 AA C5 FF 00 
39f5d d55 C6 D8 FF 00 
39f61 d56 E3 EC FF 00 
39f65 d57 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
39f69 d58 00 00 40 00 
39f6d d59 00 00 60 00 
39f71 d5a 00 00 80 00 
39f75 d5b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
39f79 d5c 00 00 BF 00 
39f7d d5d 00 00 DF 00 
39f81 d5e 00 00 FF 00 
39f85 d5f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
39f89 d60 39 39 FF 00 
39f8d d61 55 55 FF 00 
39f91 d62 71 71 FF 00 
39f95 d63 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
39f99 d64 AA AA FF 00 
39f9d d65 C6 C6 FF 00 
39fa1 d66 E3 E3 FF 00 
39fa5 d67 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
39fa9 d68 20 00 40 00 
39fad d69 30 00 60 00 
39fb1 d6a 40 00 80 00 
39fb5 d6b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
39fb9 d6c 60 00 BF 00 
39fbd d6d 70 00 DF 00 
39fc1 d6e 80 00 FF 00 
39fc5 d6f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
39fc9 d70 9C 39 FF 00 
39fcd d71 AA 55 FF 00 
39fd1 d72 B8 71 FF 00 
39fd5 d73 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
39fd9 d74 D5 AA FF 00 
39fdd d75 E3 C6 FF 00 
39fe1 d76 F1 E3 FF 00 
39fe5 d77 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
39fe9 d78 40 00 40 00 
39fed d79 60 00 60 00 
39ff1 d7a 80 00 80 00 
39ff5 d7b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
39ff9 d7c BF 00 BF 00 
39ffd d7d DF 00 DF 00 
3a001 d7e FF 00 FF 00 
3a005 d7f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3a009 d80 FF 39 FF 00 
3a00d d81 FF 55 FF 00 
3a011 d82 FF 71 FF 00 
3a015 d83 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3a019 d84 FF AA FF 00 
3a01d d85 FF C6 FF 00 
3a021 d86 FF E3 FF 00 
3a025 d87 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3a029 d88 40 00 20 00 
3a02d d89 60 00 30 00 
3a031 d8a 80 00 40 00 
3a035 d8b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3a039 d8c BF 00 60 00 
3a03d d8d DF 00 70 00 
3a041 d8e FF 00 80 00 
3a045 d8f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3a049 d90 FF 39 9C 00 
3a04d d91 FF 55 AA 00 
3a051 d92 FF 71 B8 00 
3a055 d93 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3a059 d94 FF AA D5 00 
3a05d d95 FF C6 E3 00 
3a061 d96 FF E3 F1 00 
3a065 d97 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3a069 d98 40 00 00 00 
3a06d d99 60 00 00 00 
3a071 d9a 80 00 00 00 
3a075 d9b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3a079 d9c BF 00 00 00 
3a07d d9d DF 00 00 00 
3a081 d9e FF 00 00 00 
3a085 d9f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3a089 da0 FF 39 39 00 
3a08d da1 FF 55 55 00 
3a091 da2 FF 71 71 00 
3a095 da3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3a099 da4 FF AA AA 00 
3a09d da5 FF C6 C6 00 
3a0a1 da6 FF E3 E3 00 
3a0a5 da7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3a0a9 da8 40 10 00 00 
3a0ad da9 60 18 00 00 
3a0b1 daa 80 20 00 00 
3a0b5 dab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3a0b9 dac BF 30 00 00 
3a0bd dad DF 38 00 00 
3a0c1 dae FF 40 00 00 
3a0c5 daf FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3a0c9 db0 FF 6A 39 00 
3a0cd db1 FF 80 55 00 
3a0d1 db2 FF 95 71 00 
3a0d5 db3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3a0d9 db4 FF BF AA 00 
3a0dd db5 FF D5 C6 00 
3a0e1 db6 FF EA E3 00 
3a0e5 db7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3a0e9 db8 40 20 00 00 
3a0ed db9 60 30 00 00 
3a0f1 dba 80 40 00 00 
3a0f5 dbb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3a0f9 dbc BF 60 00 00 
3a0fd dbd DF 70 00 00 
3a101 dbe FF 80 00 00 
3a105 dbf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3a109 dc0 FF 9C 39 00 
3a10d dc1 FF AA 55 00 
3a111 dc2 FF B8 71 00 
3a115 dc3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3a119 dc4 FF D5 AA 00 
3a11d dc5 FF E3 C6 00 
3a121 dc6 FF F1 E3 00 
3a125 dc7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3a129 dc8 40 30 00 00 
3a12d dc9 60 48 00 00 
3a131 dca 80 60 00 00 
3a135 dcb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3a139 dcc BF 90 00 00 
3a13d dcd DF A8 00 00 
3a141 dce FF C0 00 00 
3a145 dcf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3a149 dd0 FF CE 39 00 
3a14d dd1 FF D5 55 00 
3a151 dd2 FF DC 71 00 
3a155 dd3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3a159 dd4 FF EA AA 00 
3a15d dd5 FF F1 C6 00 
3a161 dd6 FF F8 E3 00 
3a165 dd7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3a169 dd8 30 40 00 00 
3a16d dd9 48 60 00 00 
3a171 dda 60 80 00 00 
3a175 ddb 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3a179 ddc 90 BF 00 00 
3a17d ddd A8 DF 00 00 
3a181 dde C0 FF 00 00 
3a185 ddf C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3a189 de0 CE FF 39 00 
3a18d de1 D5 FF 55 00 
3a191 de2 DC FF 71 00 
3a195 de3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3a199 de4 EA FF AA 00 
3a19d de5 F1 FF C6 00 
3a1a1 de6 F8 FF E3 00 
3a1a5 de7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3a1a9 de8 00 40 00 00 
3a1ad de9 00 60 00 00 
3a1b1 dea 00 80 00 00 
3a1b5 deb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3a1b9 dec 00 BF 00 00 
3a1bd ded 00 DF 00 00 
3a1c1 dee 00 FF 00 00 
3a1c5 def 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3a1c9 df0 39 FF 39 00 
3a1cd df1 55 FF 55 00 
3a1d1 df2 71 FF 71 00 
3a1d5 df3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3a1d9 df4 AA FF AA 00 
3a1dd df5 C6 FF C6 00 
3a1e1 df6 E3 FF E3 00 
3a1e5 df7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3a1e9 df8 00 40 14 00 
3a1ed df9 00 60 1E 00 
3a1f1 dfa 00 80 28 00 
3a1f5 dfb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3a1f9 dfc 00 BF 3C 00 
3a1fd dfd 00 DF 46 00 
3a201 dfe 00 FF 50 00 
3a205 dff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3a209 e00 39 FF 77 00 
3a20d e01 55 FF 8A 00 
3a211 e02 71 FF 9E 00 
3a215 e03 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3a219 e04 AA FF C5 00 
3a21d e05 C6 FF D8 00 
3a221 e06 E3 FF EC 00 
3a225 e07 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3a229 e08 00 40 28 00 
3a22d e09 00 60 3C 00 
3a231 e0a 00 80 50 00 
3a235 e0b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3a239 e0c 00 BF 78 00 
3a23d e0d 00 DF 8C 00 
3a241 e0e 00 FF A0 00 
3a245 e0f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3a249 e10 39 FF B5 00 
3a24d e11 55 FF C0 00 
3a251 e12 71 FF CA 00 
3a255 e13 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3a259 e14 AA FF DF 00 
3a25d e15 C6 FF EA 00 
3a261 e16 E3 FF F4 00 
3a265 e17 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3a269 e18 00 40 40 00 
3a26d e19 00 60 60 00 
3a271 e1a 00 80 80 00 
3a275 e1b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3a279 e1c 00 BF BF 00 
3a27d e1d 00 DF DF 00 
3a281 e1e 00 FF FF 00 
3a285 e1f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3a289 e20 39 FF FF 00 
3a28d e21 55 FF FF 00 
3a291 e22 71 FF FF 00 
3a295 e23 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3a299 e24 AA FF FF 00 
3a29d e25 C6 FF FF 00 
3a2a1 e26 E3 FF FF 00 
3a2a5 e27 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3a2a9 e28 00 28 40 00 
3a2ad e29 00 3C 60 00 
3a2b1 e2a 00 50 80 00 
3a2b5 e2b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3a2b9 e2c 00 78 BF 00 
3a2bd e2d 00 8C DF 00 
3a2c1 e2e 00 A0 FF 00 
3a2c5 e2f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3a2c9 e30 39 B5 FF 00 
3a2cd e31 55 C0 FF 00 
3a2d1 e32 71 CA FF 00 
3a2d5 e33 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3a2d9 e34 AA DF FF 00 
3a2dd e35 C6 EA FF 00 
3a2e1 e36 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3a2e4 e37             | 
3a2e4 e37             | '**********************************************************************************
3a2e4 e37             | '
3a2e4 e37             | '        Timings and colors definitions
3a2e4 e37             | '
3a2e4 e37             | '**********************************************************************************
3a2e4 e37             | 
3a2e4 e37             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3a2e4 e37 08 00 00 00 
3a2e8 e38 3C 00 00 00 
3a2ec e39 08 00 00 00 
3a2f0 e3a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3a2f4 e3b 07 00 00 00 
3a2f8 e3c 04 00 00 00 
3a2fc e3d 01 00 00 00 
3a300 e3e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3a304 e3f 58 02 00 00 
3a308 e40 20 9E 4B 14 
3a30c e41 FB A8 9E 01 
3a310 e42 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3a314 e43 00 00 00 00 
3a318 e44 C0 00 00 00 
3a31c e45 00 00 00 00 
3a320 e46 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a324 e47             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3a324 e47 00 75 C7 97 
3a328 e48 27 47 F6 0A 
3a32c e49 05 79 CB 9B 
3a330 e4a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3a334 e4b             | 
3a334 e4b             | ''--------  Initialization  ----------------------------------------------------------------
3a334 e4b             | 
3a334 e4b 28 0C 64 FD | hdmi            setq    #6
3a338 e4c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3a33c e4d 28 10 64 FD |                 setq    #8
3a340 e4e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3a344 e4f             | 
3a344 e4f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3a348 e50 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3a34c e51 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3a350 e52 D6 C6 01 F1 |                 add     t1,hbase
3a354 e53 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3a358 e54 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3a35c e55 7B 0B 80 5F 
3a360 e56 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3a364 e57 66 66 86 FF 
3a368 e58 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3a36c e59             | '
3a36c e59 D6 C6 01 F6 |                 mov 	t1,hbase			   '
3a370 e5a 11 C6 65 F0 |                 shl 	t1,#17                             '
3a374 e5b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3a378 e5c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3a37c e5d             | 
3a37c e5d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3a380 e5e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3a384 e5f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3a388 e60             | 
3a388 e60             | ''--------  frame rendering main loop  ---------------------------------------------------
3a388 e60             | 
3a388 e60 28 06 64 FD | p101            setq 	#3
3a38c e61 00 A5 05 FB | 		rdlong  vblankptr,ptra
3a390 e62 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3a394 e63 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3a398 e64 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3a39c e65 00 A0 05 F6 |                 mov     dlinum, #0
3a3a0 e66 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3a3a4 e67 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3a3a8 e68             | 
3a3a8 e68             | 
3a3a8 e68 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3a3ac e69 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3a3b0 e6a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3a3b4 e6b             |                 
3a3b4 e6b             | 
3a3b4 e6b             | 
3a3b4 e6b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3a3b4 e6b             |   
3a3b4 e6b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3a3b8 e6c 29 FE 65 3D |          if_nc  setq2   #255
3a3bc e6d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3a3c0 e6e             | 
3a3c0 e6e             | '' -----   up porch (before the picture)
3a3c0 e6e             | 
3a3c0 e6e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3a3c4 e6f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3a3c8 e70 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3a3cc e71 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3a3d0 e72             |  
3a3d0 e72             |    
3a3d0 e72             |  
3a3d0 e72 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3a3d4 e73 E2 8C B1 FC |                 xzero   m_sn,hsync1
3a3d8 e74 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3a3dc e75 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3a3e0 e76 E1 90 C1 FC |                 xcont   m_vi,hsync0
3a3e4 e77 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3a3e8 e78             | 
3a3e8 e78 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3a3ec e79 E2 8C B1 FC |                 xzero   m_sn,hsync1
3a3f0 e7a 48 00 B0 FD | 		call    #dli
3a3f4 e7b E1 8E C1 FC |                 xcont   m_bv,hsync0     
3a3f8 e7c E1 90 C1 FC |                 xcont   m_vi,hsync0
3a3fc e7d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3a400 e7e             |                 	
3a400 e7e             |                 
3a400 e7e             | 
3a400 e7e             |  
3a400 e7e             | '' ------- the main screen drawing starts here
3a400 e7e             | 
3a400 e7e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3a404 e7f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3a408 e80 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3a40c e81 E1 8E C1 FC |                 xcont   m_bv,hsync0
3a410 e82 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3a414 e83 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3a418 e84 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3a41c e85             |               
3a41c e85             | 
3a41c e85 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3a420 e86 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3a424 e87             | 
3a424 e87             | ' ---------------- All visible lines displayed now, start vblank  
3a424 e87             | 
3a424 e87 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3a428 e88 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3a42c e89 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3a430 e8a C3 C4 01 F6 |                 mov     hsync1,sync_223
3a434 e8b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3a438 e8c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3a43c e8d             | 
3a43c e8d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3a43c e8d             | 
3a43c e8d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3a43c e8d             | 
3a43c e8d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3a440 e8e             | 
3a440 e8e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3a444 e8f 04 B8 05 A1 |     if_z        add     dlptr2,#4
3a448 e90 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3a44c e91             | 
3a44c e91 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3a450 e92 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3a454 e93 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3a458 e94 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3a45c e95 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3a460 e96             | 
3a460 e96 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3a464 e97 DD C6 41 F8 |                 getnib  t1,dl,#0
3a468 e98 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3a46c e99 70 00 90 AD |     if_z        jmp     #preload
3a470 e9a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3a474 e9b 94 00 90 AD |     if_z        jmp     #preload2
3a478 e9c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3a47c e9d 0C 00 90 AD |     if_z        jmp     #p390
3a480 e9e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3a484 e9f 28 00 90 AD |     if_z        jmp     #p391  
3a488 ea0             | 
3a488 ea0 2D 00 64 FD | p308            ret
3a48c ea1             |    
3a48c ea1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3a490 ea2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3a494 ea3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3a498 ea4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3a49c ea5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3a4a0 ea6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3a4a4 ea7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3a4a8 ea8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3a4ac ea9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3a4b0 eaa             |  
3a4b0 eaa             | '' --------  Reload palette. To do 
3a4b0 eaa             | 
3a4b0 eaa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3a4b4 eab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3a4b8 eac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3a4bc ead 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3a4c0 eae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3a4c4 eaf E0 00 00 FB |         	rdlong  $000, framebuf2         	
3a4c8 eb0 70 FF 9F FD |         	jmp     #dli                
3a4cc eb1             |       
3a4cc eb1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3a4cc eb1             | 
3a4cc eb1             | 
3a4cc eb1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3a4cc eb1             | 
3a4cc eb1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3a4d0 eb2 E2 8C B1 FC |                 xzero   m_sn,hsync1
3a4d4 eb3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3a4d8 eb4 E1 90 C1 FC |                 xcont   m_vi,hsync0
3a4dc eb5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3a4e0 eb6             |         
3a4e0 eb6             | '' -------------- Preload a line from PSRAM        
3a4e0 eb6             |         
3a4e0 eb6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3a4e4 eb7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3a4e8 eb8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3a4ec eb9 DE B4 01 F6 |                 mov     buf1,buf1c
3a4f0 eba 03 A0 05 F7 |                 incmod  dlinum,#3
3a4f4 ebb             | 
3a4f4 ebb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3a4f8 ebc 32 B7 01 F6 |                 mov     buf2,a1024
3a4fc ebd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3a500 ebe 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3a504 ebf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3a508 ec0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3a50c ec1             |  
3a50c ec1             |  
3a50c ec1             | preload2      '  incmod  dlinum,#3
3a50c ec1 04 C0 45 F0 |                 shr 	framebuf2,#4
3a510 ec2 ED B2 01 F6 |                 mov 	cmd,affffffff
3a514 ec3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3a518 ec4 28 02 64 FD |                 setq	#1
3a51c ec5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3a520 ec6             |                 
3a520 ec6             | 
3a520 ec6             | '' -------------- Draw sprites
3a520 ec6             | 
3a520 ec6 CF 5C 02 F6 | sprite          mov t8,frames
3a524 ec7 10 5C 0E F5 | 		and t8,#16 wz
3a528 ec8 11 48 06 F6 |                 mov spritenum, #17			' 16 +2 sprites. Todo: this should be a parameter
3a52c ec9 10 48 06 A6 | 	if_z    mov spritenum, #16	
3a530 eca             | 		
3a530 eca             | 
3a530 eca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3a534 ecb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3a538 ecc EF 56 96 F9 |                 alts    t5,#sprite1xy
3a53c ecd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3a540 ece 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3a544 ecf EF 56 96 F9 |                 alts    t5,#sprite1xy
3a548 ed0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3a54c ed1 0F 4C 66 F7 |                 signx	sprite_x,#15
3a550 ed2 F0 56 96 F9 |                 alts    t5,#sprite1wh
3a554 ed3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3a558 ed4 01 52 86 F1 |                 sub     sprite_h,#1
3a55c ed5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3a560 ed6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3a564 ed7             | 
3a564 ed7             | 
3a564 ed7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3a568 ed8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3a56c ed9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3a570 eda B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3a574 edb 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3a578 edc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3a57c edd 00 5E 06 F6 |                 mov 	t9,#0
3a580 ede 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3a584 edf 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3a588 ee0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3a58c ee1             |      
3a58c ee1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3a590 ee2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3a594 ee3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3a598 ee4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3a59c ee5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3a5a0 ee6             |                 
3a5a0 ee6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3a5a4 ee7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3a5a8 ee8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3a5ac ee9             |   		
3a5ac ee9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3a5b0 eea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3a5b4 eeb             | 
3a5b4 eeb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3a5b8 eec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3a5bc eed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3a5c0 eee             |  
3a5c0 eee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3a5c4 eef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3a5c8 ef0 10 00 90 CD |      if_c 	jmp     #p899		
3a5cc ef1             | 	
3a5cc ef1             | 	
3a5cc ef1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3a5d0 ef2 28 CD 01 F1 | 		add	t4,sprite_w
3a5d4 ef3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3a5d8 ef4             | 
3a5d8 ef4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3a5dc ef5             | 
3a5dc ef5 28 59 02 F6 | p899		mov 	t6,sprite_w
3a5e0 ef6 01 58 86 F1 | 	 	sub     t6,#1
3a5e4 ef7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3a5e8 ef8             | 
3a5e8 ef8 28 58 62 FD |                 setq   	t6
3a5ec ef9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3a5f0 efa 28 5D 02 F6 |                 mov t8,sprite_w
3a5f4 efb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3a5f8 efc 24 00 90 AD |         if_z    jmp #p898
3a5fc efd             |          
3a5fc efd             |         
3a5fc efd 70 5F 06 F6 |                 mov  t9,#368
3a600 efe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3a604 eff             | 
3a604 eff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3a608 f00 08 5C 06 FA |                 mul t8,#8				' bits to shr
3a60c f01 FF FF 7F FF 
3a610 f02 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3a614 f03 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3a618 f04 00 5E 8E F9 |                 altd t9,#0				' and mask 
3a61c f05 2D 01 00 F5 |                 and 0-0, t7
3a620 f06             |                
3a620 f06             | 
3a620 f06 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3a624 f07 E5 E0 7A FA |                 wmlong 368,t3				
3a628 f08             |                 
3a628 f08 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3a62c f09 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3a630 f0a 2D 00 64 FD |                 ret
3a634 f0b             | 	
3a634 f0b             | 	
3a634 f0b             |                
3a634 f0b             |  
3a634 f0b             | '' -------------- Graphics line ------------------------------------------------------------
3a634 f0b             |  
3a634 f0b             | 
3a634 f0b             | '' consts and vars
3a634 f0b             | 
3a634 f0b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3a638 f0c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3a63c f0d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3a640 f0e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3a644 f0f             | 
3a644 f0f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3a648 f10             | 
3a648 f10             | '------ these longs will be set by setmode function
3a648 f10             | 
3a648 f10 00 00 00 00 | m_bs            long    0        'blanks before sync
3a64c f11 00 00 00 00 | m_sn            long    0        'sync
3a650 f12 00 00 00 00 | m_bv            long    0        'blanks before visible
3a654 f13 00 00 00 00 | m_vi            long    0        'visible pixels #
3a658 f14             | 'm_border        long    0        'left/right borders
3a658 f14 00 00 00 00 | i_upporch       long    0        'up porch lines
3a65c f15 00 00 00 00 | i_vsync         long    0        'vsync lines
3a660 f16 00 00 00 00 | i_downporch     long    0        'down porch lines
3a664 f17 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3a668 f18 00 00 00 00 | i_totalvis      long    0
3a66c f19             | 
3a66c f19             | '-------------------------------------
3a66c f19             |  
3a66c f19 00 00 00 00 | linenum         long    0
3a670 f1a 00 00 00 00 | frames          long    0
3a674 f1b 00 00 00 00 | dlinum long 0
3a678 f1c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3a67c f1d             | 
3a67c f1d 00 00 00 00 | vblankptr       long    0
3a680 f1e 00 00 00 00 | modeptr         long    0
3a684 f1f 00 00 00 00 | paletteptr      long    0
3a688 f20 00 00 00 00 | dlptr           long    0
3a68c f21 01 00 00 00 | hbase           long    1
3a690 f22 00 00 00 00 | mailbox         long    0
3a694 f23 00 00 00 00 | spriteptr          long 0
3a698 f24             | 
3a698 f24 00 00 00 00 | cmd             long    0
3a69c f25 00 EC 07 00 | buf1            long    $80000-1024-4096
3a6a0 f26 00 04 00 00 | buf2            long    1024
3a6a4 f27 01 00 00 00 | dlptr2          long    1
3a6a8 f28 01 00 00 00 | dl              long    1
3a6ac f29             | 
3a6ac f29 00 00 00 00 | buf1c long 0
3a6b0 f2a 00 EC 07 00 | buf1d            long    $80000-1024-4096
3a6b4 f2b 01 00 00 00 | framebuf2       long    1
3a6b8 f2c 01 00 00 00 | hsync0          long    1
3a6bc f2d 01 00 00 00 | hsync1          long    1
3a6c0 f2e             | 
3a6c0 f2e 01 00 00 00 | t1              long    1
3a6c4 f2f 00 00 00 00 | t2 long 0
3a6c8 f30 00 00 00 00 | t3 long 0
3a6cc f31 00 00 00 00 | t4 long 0
3a6d0 f32             | 
3a6d0 f32 00 00 00 00 | rcnt            long    0  'dl repeat count
3a6d4 f33 00 00 00 00 | rcnt2           long    0
3a6d8 f34 00 00 00 00 | rcnt2a          long    0
3a6dc f35 00 00 00 00 | roffset         long    0
3a6e0 f36 00 00 00 00 | rdl             long    0  'dl repeat line
3a6e4 f37 00 00 00 00 | dlc             long    0  'dl command
3a6e8 f38             | 
3a6e8 f38 FF FF FF FF | affffffff       long    $ffffffff
3a6ec f39 00 00 00 00 | sprite1pointer long 0
3a6f0 f3a 00 00 00 00 | sprite1xy      long 0
3a6f4 f3b 00 00 00 00 | sprite1wh      long 0
3a6f8 f3c 00 00 00 00 | sprite2pointer long 0
3a6fc f3d 00 00 00 00 | sprite2xy      long 0
3a700 f3e 00 00 00 00 | sprite2wh      long 0
3a704 f3f 00 00 00 00 | sprite3pointer long 0
3a708 f40 00 00 00 00 | sprite3xy      long 0
3a70c f41 00 00 00 00 | sprite3wh      long 0
3a710 f42 00 00 00 00 | sprite4pointer long 0
3a714 f43 00 00 00 00 | sprite4xy      long 0
3a718 f44 00 00 00 00 | sprite4wh      long 0
3a71c f45 00 00 00 00 | sprite5pointer long 0
3a720 f46 00 00 00 00 | sprite5xy      long 0
3a724 f47 00 00 00 00 | sprite5wh      long 0
3a728 f48 00 00 00 00 | sprite6pointer long 0
3a72c f49 00 00 00 00 | sprite6xy      long 0
3a730 f4a 00 00 00 00 | sprite6wh      long 0
3a734 f4b 00 00 00 00 | sprite7pointer long 0
3a738 f4c 00 00 00 00 | sprite7xy      long 0
3a73c f4d 00 00 00 00 | sprite7wh      long 0
3a740 f4e 00 00 00 00 | sprite8pointer long 0
3a744 f4f 00 00 00 00 | sprite8xy      long 0
3a748 f50 00 00 00 00 | sprite8wh      long 0
3a74c f51 00 00 00 00 | sprite9pointer long 0
3a750 f52 00 00 00 00 | sprite9xy      long 0
3a754 f53 00 00 00 00 | sprite9wh      long 0
3a758 f54 00 00 00 00 | sprite10pointer long 0
3a75c f55 00 00 00 00 | sprite10xy      long 0
3a760 f56 00 00 00 00 | sprite10wh      long 0
3a764 f57 00 00 00 00 | sprite11pointer long 0
3a768 f58 00 00 00 00 | sprite11xy      long 0
3a76c f59 00 00 00 00 | sprite11wh      long 0
3a770 f5a 00 00 00 00 | sprite12pointer long 0
3a774 f5b 00 00 00 00 | sprite12xy      long 0
3a778 f5c 00 00 00 00 | sprite12wh      long 0
3a77c f5d 00 00 00 00 | sprite13pointer long 0
3a780 f5e 00 00 00 00 | sprite13xy      long 0
3a784 f5f 00 00 00 00 | sprite13wh      long 0
3a788 f60 00 00 00 00 | sprite14pointer long 0
3a78c f61 00 00 00 00 | sprite14xy      long 0
3a790 f62 00 00 00 00 | sprite14wh      long 0
3a794 f63 00 00 00 00 | sprite15pointer long 0
3a798 f64 00 00 00 00 | sprite15xy      long 0
3a79c f65 00 00 00 00 | sprite15wh      long 0
3a7a0 f66 00 00 00 00 | sprite16pointer long 0
3a7a4 f67 00 00 00 00 | sprite16xy      long 0
3a7a8 f68 00 00 00 00 | sprite16wh      long 0
3a7ac f69 00 00 00 00 | sprite17pointer long 0
3a7b0 f6a 00 00 00 00 | sprite17xy      long 0
3a7b4 f6b 00 00 00 00 | sprite17wh      long 0
3a7b8 f6c 00 00 00 00 | sprite18pointer long 0
3a7bc f6d 00 00 00 00 | sprite18xy      long 0
3a7c0 f6e 00 00 00 00 | sprite18wh      long 0
3a7c4 f6f 00 00 00 00 | spritenum long 0
3a7c8 f70             | 
3a7c8 f70 00 00 00 00 | spriteline long 0
3a7cc f71 84 03 00 00 | sprite_x long 900
3a7d0 f72 00 00 00 00 | sprite_y long 0
3a7d4 f73 10 00 00 00 | sprite_w long 16
3a7d8 f74 40 00 00 00 | sprite_h long 64
3a7dc f75 00 00 00 00 | l2 long 0
3a7e0 f76 00 00 00 00 | t5 long 0
3a7e4 f77 00 00 00 00 | t6 long 0
3a7e8 f78 00 00 00 00 | t7 long 0
3a7ec f79 00 00 00 00 | t8 long 0
3a7f0 f7a 00 00 00 00 | t9 long 0
3a7f4 f7b 00 00 00 00 | preloadaddr long 0
3a7f8 f7c 00 00 00 00 | preloadlineaddr long 0
3a7fc f7d 00 04 00 00 | a1024 long 1024
3a800 f7e             | 
3a800 f7e E0 03 00 00 | aa long 992
3a804 f7f FF 03 00 00 | a1023 long 1023
3a808 f80 00 10 00 00 | a4096 long 4096
3a80c f81             |  fit 368
3a80c f81             |  fit 368
3a80c f81             | _psram_spin2_dat_
3a80c f81 00 00 00 00 
      ...             
3a904 fbf 00 00 00 00 
3a908 fc0 00 00 00 00 |     listdata long 0[8*8]
3a90c fc1             |             orgh
3a90c                 | 
3a90c                 | ' driver state
3a90c     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3a910     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3a914                 | 
3a914                 | ' delay profile
3a914     07 00 00 00 
3a918     00 CF 7B 05 
3a91c     80 D1 F0 08 
3a920     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3a924     80 C4 60 0F 
3a928     80 39 7A 12 
3a92c     40 2D D9 13 
3a930     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3a934                 | 
3a934                 | ' data to be passed to driver when starting it
3a934                 | startupData
3a934     00 00 00 00 |     long    0           ' current frequency
3a938     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3a93c     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3a940     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3a944     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3a948     54 A9 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3a94c     D4 A9 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3a950     F4 A9 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3a954                 | 
3a954                 | ' data for memory
3a954                 | deviceData
3a954                 |     ' 16 bank parameters follow (16MB per bank)
3a954     00 00 00 00 
      ...             
3a98c     00 00 00 00 
3a990     00 00 00 00 |     long    0[16]                               ' banks 0-15
3a994                 |     ' 16 banks of pin parameters follow
3a994     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3a998     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3a99c     FF FF FF FF 
      ...             
3a9cc     FF FF FF FF 
3a9d0     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3a9d4                 | 
3a9d4                 | ' data for COG polling
3a9d4                 | qosData 
3a9d4     00 00 FF FF 
3a9d8     00 00 FF FF 
3a9dc     00 00 FF FF 
3a9e0     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3a9e4     00 00 FF FF 
3a9e8     00 00 FF FF 
3a9ec     00 00 FF FF 
3a9f0     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3a9f4                 |     
3a9f4                 | ' mailbox storage
3a9f4                 | 
3a9f4                 | mailboxes
3a9f4     00 00 00 00 
      ...             
3aa4c     00 00 00 00 
3aa50     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3aa54                 | 	alignl
3aa54                 | _psram16drv_spin2_dat_
3aa54                 |                             orgh
3aa54     00 00 00 00 
      ...             
3aa6c     00 00 00 00 
3aa70     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3aa74                 | 
3aa74                 | driver_start
3aa74                 |                             org
3aa74 000             | '..................................................................................................
3aa74 000             | ' Memory layout for COG RAM once operational:
3aa74 000             | '
3aa74 000             | '  COG RAM address      Usage
3aa74 000             | '  ---------------      ----
3aa74 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3aa74 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3aa74 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3aa74 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3aa74 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3aa74 000             | '  ~$198-$1F3           State and register variables
3aa74 000             | '
3aa74 000             | ' Also during driver COG startup:
3aa74 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3aa74 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3aa74 000             | '..................................................................................................
3aa74 000             |                             
3aa74 000             | ' Mailbox storage after vector initialization
3aa74 000             | 
3aa74 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3aa78 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3aa7c 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3aa80 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3aa84 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3aa88 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3aa8c 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3aa90 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3aa94 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3aa98 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3aa9c 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3aaa0 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3aaa4 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3aaa8 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3aaac 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3aab0 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3aab4 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3aab8 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3aabc 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3aac0 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3aac4 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3aac8 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3aacc 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3aad0 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3aad4 018             | 
3aad4 018             | ' Mailbox parameter addresses per COG once patched
3aad4 018             |                             
3aad4 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3aad8 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3aadc 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3aae0 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3aae4 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3aae8 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3aaec 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3aaf0 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3aaf4 020             | 
3aaf4 020             | '..................................................................................................
3aaf4 020             | ' Per COG request and state setup and service branching
3aaf4 020             |         
3aaf4 020             | cog0                 
3aaf4 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3aaf8 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3aafc 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3ab00 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3ab04 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ab08 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ab0c 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3ab10 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3ab14 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3ab18 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ab1c 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ab20 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3ab24 02c             | cog1                        
3ab24 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3ab28 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3ab2c 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3ab30 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3ab34 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ab38 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ab3c 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3ab40 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3ab44 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3ab48 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ab4c 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ab50 037 33 CA 63 FD |                             execf   request-0               'jump to service
3ab54 038             | cog2                         
3ab54 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3ab58 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3ab5c 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3ab60 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3ab64 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ab68 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ab6c 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3ab70 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3ab74 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3ab78 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ab7c 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ab80 043 33 CA 63 FD |                             execf   request-0               'jump to service
3ab84 044             | cog3                        
3ab84 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3ab88 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3ab8c 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3ab90 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3ab94 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ab98 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ab9c 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3aba0 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3aba4 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3aba8 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3abac 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3abb0 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3abb4 050             | cog4                        
3abb4 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3abb8 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3abbc 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3abc0 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3abc4 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3abc8 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3abcc 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3abd0 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3abd4 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3abd8 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3abdc 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3abe0 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3abe4 05c             | cog5                        
3abe4 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3abe8 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3abec 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3abf0 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3abf4 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3abf8 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3abfc 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3ac00 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3ac04 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3ac08 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ac0c 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ac10 067 33 CA 63 FD |                             execf   request-0               'jump to service
3ac14 068             | cog6                        
3ac14 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3ac18 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3ac1c 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3ac20 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3ac24 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ac28 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ac2c 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3ac30 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3ac34 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3ac38 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ac3c 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ac40 073 33 CA 63 FD |                             execf   request-0               'jump to service
3ac44 074             | cog7                        
3ac44 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3ac48 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3ac4c 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3ac50 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3ac54 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ac58 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ac5c 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3ac60 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3ac64 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3ac68 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ac6c 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ac70 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3ac74 080             | 
3ac74 080             |                             fit     128
3ac74 080             |                             fit     128
3ac74 080             | pad                         long    0[128-$]                'align init code to $80
3ac74 080             | 
3ac74 080             | '..................................................................................................
3ac74 080             | 
3ac74 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3ac74 080             | 
3ac74 080             | init                        
3ac74 080             |                             ' get driver scratch long address in hub
3ac74 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3ac78 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3ac7c 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3ac80 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3ac84 084             |                     
3ac84 084             |                             ' read in the additional LUT RAM code
3ac84 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3ac88 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3ac8c 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3ac90 087             | 
3ac90 087             |                             ' read the startup parameters
3ac90 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3ac94 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3ac98 089             | 
3ac98 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3ac98 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3ac9c 08a             | 
3ac9c 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3aca0 08b 01 00 00 5F 
3aca4 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3aca8 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3acac 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3acb0 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3acb4 090             | 
3acb4 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3acb4 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3acb8 091 01 00 00 FF 
3acbc 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3acc0 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3acc4 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3acc8 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3accc 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3acd0 097 08 DE 47 F5 |                             or      a, #8
3acd4 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3acd8 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3acdc 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3ace0 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3ace4 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3ace8 09d 01 DE 07 F1 |                             add     a, #1
3acec 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3acf0 09f             |  
3acf0 09f             |                             ' setup device control pin states
3acf0 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3acf4 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3acf8 0a1 01 00 00 FF 
3acfc 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3ad00 0a3             | 
3ad00 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3ad04 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3ad08 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3ad0c 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3ad10 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3ad14 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3ad18 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3ad1c 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3ad20 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3ad24 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3ad28 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3ad2c 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3ad30 0af             | pinloop
3ad30 0af             |                             ' generate minimum CE high time before access
3ad30 0af A1 07 00 FF 
3ad34 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3ad38 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3ad3c 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3ad40 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3ad44 0b4 1F DE 63 FD |                             waitx   a                       'delay
3ad48 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3ad4c 0b6             | 
3ad4c 0b6             |                             ' setup the COG mailboxes and addresses 
3ad4c 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3ad50 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3ad54 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3ad58 0b9             | 
3ad58 0b9 28 2E 64 FD |                             setq    #24-1
3ad5c 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3ad60 0bb             | 
3ad60 0bb             |                             ' setup the polling loop for active COGs 
3ad60 0bb 01 C2 63 FD |                             cogid   id
3ad64 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3ad68 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3ad6c 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3ad70 0bf 0A F0 07 F6 |                             mov     ptra, #10
3ad74 0c0 E1 F1 03 FA |                             mul     ptra, id
3ad78 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3ad7c 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3ad80 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3ad84 0c4 03 C2 07 FA |                             mul     id, #3
3ad88 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3ad8c 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3ad90 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3ad94 0c8 D8 01 B0 FD |                             call    #reloadcogs
3ad98 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3ad9c 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3ada0 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3ada0 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3ada4 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3ada8 0cd 08 04 DC FC |                             rep     #2, #8
3adac 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3adb0 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3adb4 0d0             | 
3adb4 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3adb4 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3adb4 0d0 01 C2 63 FD |                             cogid   id
3adb8 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3adbc 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3adc0 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3adc4 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3adc8 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3adcc 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3add0 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3add4 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3add8 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3addc 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3ade0 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3ade4 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3ade8 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3adec 0de A5 E5 03 F1 |                             add     d, const512
3adf0 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3adf4 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3adf8 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3adfc 0e2             |                             
3adfc 0e2             |                             ' setup register values for control vector loop setup after we return
3adfc 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3ae00 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3ae04 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3ae08 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3ae0c 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3ae10 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3ae14 0e8 D0 C3 8F F9 |                             altd    id, #id0
3ae18 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3ae1c 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3ae20 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3ae24 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3ae28 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3ae2c 0ee             |  
3ae2c 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3ae30 0ef 07 CA 07 F5 |                             and     request, #7
3ae34 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3ae38 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3ae3c 0f2             | 
3ae3c 0f2             |                             fit     $100                    'ensure all init code fits this space
3ae3c 0f2             |                             fit     $100                    'ensure all init code fits this space
3ae3c 0f2             | 
3ae3c 0f2 00 00 00 00 
      ...             
3ae6c 0fe 00 00 00 00 
3ae70 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3ae74 100             | 
3ae74 100             | '..................................................................................................
3ae74 100             | ' Error result handling and COG notification of request completion
3ae74 100             | 
3ae74 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3ae78 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3ae7c 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3ae80 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3ae84 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3ae88 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3ae8c 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3ae90 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3ae94 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3ae98 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3ae9c 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3aea0 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3aea4 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3aea8 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3aeac 10e             | ' Poller re-starts here after a COG is serviced
3aeac 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3aeb0 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3aeb4 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3aeb8 111             | ' Main dynamic polling loop repeats until a request arrives
3aeb8 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3aebc 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3aec0 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3aec4 114             | 
3aec4 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3aec8 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3aecc 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3aed0 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3aed4 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3aed8 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3aedc 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3aee0 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3aee4 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3aee8 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3aeec 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3aef0 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3aef4 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3aef8 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3aefc 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3af00 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3af04 124             | 
3af04 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3af08 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3af0c 126             |  
3af0c 126             | '..................................................................................................
3af0c 126             | ' List handler                               
3af0c 126             | 
3af0c 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3af10 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3af14 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3af18 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3af1c 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3af20 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3af24 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3af28 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3af2c 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3af30 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3af34 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3af38 131 33 00 60 FD |                             execf   0-0                     'process the request 
3af3c 132             | 
3af3c 132             | '..................................................................................................
3af3c 132             | ' Restoring per COG state and resuming where we left off
3af3c 132             | 
3af3c 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3af40 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3af44 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3af48 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3af4c 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3af50 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3af54 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3af58 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3af5c 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3af60 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3af64 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3af68 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3af6c 13e             |                    
3af6c 13e             | '..................................................................................................
3af6c 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3af6c 13e             | 
3af6c 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3af70 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3af74 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3af78 141 D0 DF B7 F9 |                             setd    a, #id0
3af7c 142 D8 DF BF F9 |                             sets    a, #addr1
3af80 143 FE FF FF FF 
3af84 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3af88 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3af8c 146 3F DE A7 F9 |                             alti    a, #%111_111 
3af90 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3af94 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3af98 149 01 E2 63 FD |                             cogid   c
3af9c 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3afa0 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3afa4 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3afa8 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3afac 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3afb0 14f 00 E0 03 F6 |                             mov     b, 0-0
3afb4 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3afb8 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3afbc 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3afc0 153 0C 00 90 AD |             if_z            jmp     #excluded               
3afc4 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3afc8 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3afcc 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3afd0 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3afd4 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3afd8 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3afdc 15a             | 
3afdc 15a             | 'determine priority cogs and build instructions for the polling sequence
3afdc 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3afe0 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3afe4 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3afe8 15d             | 
3afe8 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3afec 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3aff0 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3aff4 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3aff8 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3affc 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3b000 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3b004 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3b008 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3b00c 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3b010 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3b014 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3b018 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3b01c 16a             | endprioloop
3b01c 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3b020 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3b024 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3b028 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3b02c 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3b030 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3b034 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3b038 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3b03c 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3b040 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3b044 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3b048 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3b04c 176             | 
3b04c 176             | ' populate the round robin COG polling instructions
3b04c 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3b050 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3b054 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3b058 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3b05c 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3b060 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3b064 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3b068 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3b06c 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3b070 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3b074 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3b078 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3b07c 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3b080 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3b084 184             | '..................................................................................................
3b084 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3b084 184             | 
3b084 184             | set_latency                                                 '            (a) set latency
3b084 184             | get_latency                                                 '            (b) get latency
3b084 184             | set_burst                                                   '            (c) set burst size of bank
3b084 184             | get_burst                                                   '            (d) get burst size of bank
3b084 184             |                                                             '            (e) dump state
3b084 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3b088 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3b08c 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3b090 187             |                                                             ' | | | | e  account for following AUGS
3b090 187 04 00 00 FF 
3b094 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3b098 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3b09c 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3b0a0 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3b0a4 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3b0a8 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3b0ac 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3b0b0 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3b0b4 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3b0b8 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3b0bc 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3b0c0 193             | 
3b0c0 193             | '..................................................................................................
3b0c0 193             | ' Misc EXECF code
3b0c0 193             | 
3b0c0 193 33 72 63 FD | start_read_exec             execf   newburstr
3b0c4 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3b0c8 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3b0cc 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3b0d0 197             | 
3b0d0 197             | '..................................................................................................
3b0d0 197             | ' Variables
3b0d0 197             | 
3b0d0 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3b0d4 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3b0d8 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3b0dc 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3b0e0 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3b0e4 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3b0e8 19d             | 
3b0e8 19d 00 00 00 80 | xfreq1          long    $80000000
3b0ec 19e 00 00 00 40 | xfreq2          long    $40000000
3b0f0 19f 03 00 00 00 | delay           long    3
3b0f4 1a0             | 
3b0f4 1a0             | lutcodeaddr                 
3b0f4 1a0             | startupparams
3b0f4 1a0             | excludedcogs                                    'careful: shared register use!
3b0f4 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3b0f8 1a1 00 00 00 00 | flags           long    0
3b0fc 1a2             | mask                                            'careful: shared register use!
3b0fc 1a2 00 00 00 00 | resetmaskA      long    0
3b100 1a3             | limit                                           'careful: shared register use!
3b100 1a3 00 00 00 00 | resetmaskB      long    0
3b104 1a4 00 00 00 00 | datapins        long    0
3b108 1a5             | const512                                        'careful: shared register use!
3b108 1a5 00 00 00 00 | devicelist      long    0
3b10c 1a6 00 00 00 00 | coglist         long    0
3b110 1a7 00 00 00 00 | mbox            long    0 
3b114 1a8             | 
3b114 1a8             | clkpin                                          'shared with code patched during init
3b114 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3b118 1a9             | cspin                                           'shared with code patched during init
3b118 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3b11c 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3b120 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3b124 1ac 01 00 00 00 | clkdelay        long    1
3b128 1ad 00 00 00 00 | regdatabus      long    0
3b12c 1ae             | 
3b12c 1ae 10 00 00 00 | deviceaddr      long    $10
3b130 1af             | rrcounter
3b130 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3b134 1b0             | 
3b134 1b0             | ' jump addresses for the per COG handlers
3b134 1b0 20 00 00 00 | cog0_handler    long    cog0
3b138 1b1 2C 00 00 00 | cog1_handler    long    cog1
3b13c 1b2 38 00 00 00 | cog2_handler    long    cog2
3b140 1b3 44 00 00 00 | cog3_handler    long    cog3
3b144 1b4 50 00 00 00 | cog4_handler    long    cog4
3b148 1b5 5C 00 00 00 | cog5_handler    long    cog5
3b14c 1b6 68 00 00 00 | cog6_handler    long    cog6
3b150 1b7 74 00 00 00 | cog7_handler    long    cog7
3b154 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3b158 1b9             | 
3b158 1b9             | ' EXECF sequences
3b158 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3b15c 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3b160 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3b164 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3b168 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3b16c 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3b170 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3b174 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3b174 1c0             | 
3b174 1c0             | 
3b174 1c0             | ' SKIPF sequences
3b174 1c0             | skiptable
3b174 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3b178 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3b17c 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3b180 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3b184 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3b188 1c5 00 00 00 00 | pattern2        long    0
3b18c 1c6 00 00 00 00 | pattern3        long    0
3b190 1c7 77 02 00 00 | singlelong      long    %1001110111  
3b194 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3b198 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3b19c 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3b1a0 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3b1a4 1cc             | 
3b1a4 1cc             | ' LUT RAM address values
3b1a4 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3b1a8 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3b1ac 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3b1b0 1cf F6 02 00 00 | noread          long    noread_lut
3b1b4 1d0             | 
3b1b4 1d0 00 00 00 00 | id0             long    0
3b1b8 1d1 01 00 00 00 | id1             long    1
3b1bc 1d2 02 00 00 00 | id2             long    2
3b1c0 1d3 03 00 00 00 | id3             long    3
3b1c4 1d4 04 00 00 00 | id4             long    4
3b1c8 1d5 05 00 00 00 | id5             long    5
3b1cc 1d6 06 00 00 00 | id6             long    6
3b1d0 1d7 07 00 00 00 | id7             long    7
3b1d4 1d8             | 
3b1d4 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3b1d4 1d8             | 'and COG updates and need to follow immediately after id0-id7
3b1d4 1d8 00 00 00 00 | addr1           long    0
3b1d8 1d9 00 00 00 00 | hubdata         long    0
3b1dc 1da 00 00 00 00 | count           long    0
3b1e0 1db 00 00 00 00 | addr2           long    0
3b1e4 1dc 00 00 00 00 | total           long    0
3b1e8 1dd 00 00 00 00 | offset1         long    0
3b1ec 1de 00 00 00 00 | offset2         long    0
3b1f0 1df 00 00 00 00 | link            long    0
3b1f4 1e0             | 
3b1f4 1e0             | burstwrite                                      'note shared register use during init
3b1f4 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3b1f8 1e1 00 00 00 00 | id              long    0
3b1fc 1e2             | 
3b1fc 1e2 00 00 00 00 | header          long    0
3b200 1e3 00 00 00 00 | trailer         long    0
3b204 1e4 00 00 00 00 | cmdaddr         long    0
3b208 1e5 00 00 00 00 | request         long    0
3b20c 1e6 00 00 00 00 | rrlimit         long    0
3b210 1e7 00 00 00 00 | pinconfig       long    0
3b214 1e8 00 00 00 00 | clks            long    0
3b218 1e9 00 00 00 00 | resume          long    0
3b21c 1ea 00 00 00 00 | orighubsize     long    0
3b220 1eb 00 00 00 00 | wrclks          long    0
3b224 1ec             | 
3b224 1ec 00 00 00 00 | pattern         long    0
3b228 1ed 00 00 00 00 | hubscratch      long    0
3b22c 1ee 00 10 00 00 | val4k           long    4096
3b230 1ef             | 
3b230 1ef             | ' temporary general purpose regs
3b230 1ef 00 00 00 00 | a               long    0
3b234 1f0 00 00 00 00 | b               long    0
3b238 1f1 00 00 00 00 | c               long    0
3b23c 1f2 00 00 00 00 | d               long    0
3b240 1f3             | 
3b240 1f3             |                 fit     502
3b240 1f3             |                 fit     502
3b240 1f3             | 
3b240 1f3             | '..................................................................................................
3b240 1f3             | 
3b240 1f3             |             orgh
3b240                 | 
3b240                 | lut_code
3b240                 | 'HW init code up to 80 longs
3b240                 | 
3b240                 | '..................................................................................................
3b240                 | ' Memory layout for LUT RAM once operational:
3b240                 | '
3b240                 | '  LUT RAM address      Usage
3b240                 | '  ---------------      ----
3b240                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3b240                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3b240                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3b240                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3b240                 | '
3b240                 | ' Also during driver COG startup:
3b240                 | ' $230-$24F is used for HW init setup
3b240                 | ' $250-$26F is used as temporary vector storage 
3b240                 | '..................................................................................................
3b240                 | 
3b240                 |                 org $230    
3b240 230             | 
3b240 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3b240 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3b244 231 24 16 60 FD |                             pollxfi
3b248 232 FF AA 2A FF 
3b24c 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3b250 234 28 00 B0 FD |                             call    #sendqspi
3b254 235 07 F8 07 FF 
3b258 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3b25c 237 28 00 B0 FD |                             call    #sendspi
3b260 238 F8 07 78 FF 
3b264 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3b268 23a 1C 00 B0 FD |                             call    #sendspi
3b26c 23b 7F 78 78 FF 
3b270 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3b274 23d 10 00 B0 FD |                             call    #sendspi 
3b278 23e 2D 00 64 FD |                             ret
3b27c 23f             | 
3b27c 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3b280 240 32 0C 64 FD |                             skipf   #%110
3b284 241 9C EF 03 F6 |                             mov     pb, xsendimm
3b288 242             | 
3b288 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3b28c 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3b290 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3b294 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3b298 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3b29c 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3b2a0 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3b2a4 249 50 48 63 FD |                             fltl    datapins                'float data bus
3b2a8 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3b2ac 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3b2b0 24c             | 
3b2b0 24c 00 00 00 00 
3b2b4 24d 00 00 00 00 
3b2b8 24e 00 00 00 00 
3b2bc 24f 00 00 00 00 |                 long    0[$270-32-$]
3b2c0 250             |     
3b2c0 250             |                 fit     $270-32  ' keep room for 32 vector longs
3b2c0 250             |                 fit     $270-32  ' keep room for 32 vector longs
3b2c0 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3b2c0 250             | rw_vect ' PSRAM jump vectors
3b2c0 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3b2c4 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3b2c8 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3b2cc 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3b2d0 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3b2d4 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3b2d8 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3b2dc 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3b2e0 258             | ro_vect ' R/O PSRAM jump vectors
3b2e0 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3b2e4 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3b2e8 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3b2ec 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3b2f0 25c 00 01 00 00 |                 long    unsupported
3b2f4 25d 00 01 00 00 |                 long    unsupported
3b2f8 25e 00 01 00 00 |                 long    unsupported
3b2fc 25f 00 01 00 00 |                 long    unsupported
3b300 260             | ctrl_vect ' Control jump vectors
3b300 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3b304 261 00 01 00 00 |                 long    unsupported
3b308 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3b30c 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3b310 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3b314 265 00 01 00 00 |                 long    unsupported
3b318 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3b31c 267 3E 01 00 00 |                 long    reconfig 
3b320 268             | no_vect ' Invalid bank jump vectors
3b320 268 01 01 00 00 |                 long    invalidbank
3b324 269 01 01 00 00 |                 long    invalidbank
3b328 26a 01 01 00 00 |                 long    invalidbank
3b32c 26b 01 01 00 00 |                 long    invalidbank
3b330 26c 01 01 00 00 |                 long    invalidbank
3b334 26d 01 01 00 00 |                 long    invalidbank
3b338 26e 01 01 00 00 |                 long    invalidbank
3b33c 26f 01 01 00 00 |                 long    invalidbank
3b340 270             | 
3b340 270             |                 fit     $270
3b340 270             |                 fit     $270
3b340 270             | '..................................................................................................
3b340 270             | ' PSRAM READS
3b340 270             |                                                             ' a b c d e f
3b340 270             |                                                             ' B W L B R L  (a) byte read
3b340 270             |                                                             ' Y O O U E O  (b) word read
3b340 270             |                                                             ' T R N R S C  (c) long read
3b340 270             |                                                             ' E D G S U K  (d) new burst read
3b340 270             |                                                             '       T M E  (e) resumed sub-burst
3b340 270             |                                                             '         E D  (f) locked sub-burst
3b340 270             | 
3b340 270             | 
3b340 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3b344 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3b348 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3b34c 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3b350 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3b354 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3b358 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3b35c 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3b360 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3b364 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3b368 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3b36c 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3b370 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3b374 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3b378 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3b37c 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3b380 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3b384 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3b388 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3b38c 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3b390 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3b394 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3b398 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3b39c 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3b3a0 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3b3a4 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3b3a8 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3b3ac 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3b3b0 28c             | 
3b3b0 28c             |                             ' fall through to read bursts
3b3b0 28c             |                         
3b3b0 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3b3b0 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3b3b4 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3b3b8 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3b3bc 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3b3c0 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3b3c4 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3b3c8 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3b3cc 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3b3d0 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3b3d4 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3b3d8 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3b3dc 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3b3e0 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3b3e4 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3b3e8 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3b3ec 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3b3f0 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3b3f4 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3b3f8 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3b3fc 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3b400 2a0 E8 D1 03 F1 |                             add     clks, clks
3b404 2a1             | readcommon
3b404 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3b408 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3b40c 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3b410 2a4             | 
3b410 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3b414 2a5 69 C8 63 FD |                             rev     cmdaddr
3b418 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3b41c 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3b420 2a8             | 
3b420 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3b424 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3b428 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3b428 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3b42c 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3b430 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3b434 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3b438 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3b438 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3b43c 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3b440 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3b444 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3b448 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3b44c 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3b450 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3b450 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3b454 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3b458 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3b45c 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3b460 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3b464 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3b468 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3b46c 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3b470 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3b474 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3b478 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3b47c 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3b480 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3b484 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3b488 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3b488 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3b48c 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3b490 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3b494 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3b498 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3b49c 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3b4a0 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3b4a4 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3b4a8 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3b4ac 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3b4b0 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3b4b4 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3b4b8 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3b4bc 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3b4c0 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3b4c4 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3b4c8 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3b4cc 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3b4d0 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3b4d4 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3b4d8 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3b4dc 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3b4e0 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3b4e4 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3b4e8 2da 10 03 90 FD |                             jmp     #writecommon
3b4ec 2db             | 
3b4ec 2db             | '..................................................................................................
3b4ec 2db             | ' Burst continuation testing
3b4ec 2db             | 
3b4ec 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3b4f0 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3b4f4 2dd             | continue_read_lut          
3b4f4 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3b4f8 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3b4fc 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3b500 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3b504 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3b508 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3b50c 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3b510 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3b514 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3b518 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3b51c 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3b520 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3b524 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3b528 2ea             | 
3b528 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3b52c 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3b530 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3b534 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3b538 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3b53c 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3b540 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3b544 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3b548 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3b54c 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3b550 2f4 2A 1C 66 0D |             _ret_           push    #poller
3b554 2f5             | 
3b554 2f5             | 
3b554 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3b558 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3b558 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3b55c 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3b560 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3b564 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3b568 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3b56c 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3b570 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3b574 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3b578 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3b57c 2ff             | '..................................................................................................
3b57c 2ff             | ' Completion of requests
3b57c 2ff             | 
3b57c 2ff             | complete_rw_lut             
3b57c 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3b580 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3b584 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3b588 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3b58c 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3b590 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3b594 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3b598 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3b59c 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3b5a0 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3b5a4 309 32 62 64 AD |             if_z            skipf   #%110001
3b5a8 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3b5ac 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3b5b0 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3b5b4 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3b5b8 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3b5bc 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3b5c0 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3b5c4 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3b5c8 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3b5cc 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3b5d0 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3b5d4 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3b5d8 316             |                                                             ' skipcase (a) gfx copy to/from hub
3b5d8 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3b5d8 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3b5d8 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3b5dc 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3b5e0 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3b5e4 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3b5e8 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3b5ec 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3b5f0 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3b5f4 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3b5f8 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3b5fc 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3b600 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3b604 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3b608 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3b60c 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3b610 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3b614 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3b618 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3b61c 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3b620 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3b624 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3b628 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3b62c 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3b630 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3b634 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3b638 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3b63c 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3b640 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3b644 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3b648 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3b64c 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3b650 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3b654 335 DF B7 03 A6 |             if_z            mov     addr2, link
3b658 336 34 FF 9F AD |             if_z            jmp     #checknext
3b65c 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3b660 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3b664 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3b668 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3b66c 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3b670 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3b674 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3b678 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3b67c 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3b680 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3b684 341             | 
3b684 341             | '..................................................................................................
3b684 341             | ' PSRAM WRITES
3b684 341             |                                                             '  a b c d e f g h
3b684 341             | 
3b684 341             |                                                             '  B W L F B R L L (a) byte write(s)
3b684 341             |                                                             '  Y O O I U E O O (b) word write(s)
3b684 341             |                                                             '  T R N L R S C C (c) long write(s)
3b684 341             |                                                             '  E D G L S U K K (d) resumed fill
3b684 341             |                                                             '          T M E E (e) new burst write
3b684 341             |                                                             '            E D D (f) resumed burst
3b684 341             |                                                             '              F B (g) locked fill
3b684 341             |                                                             '              I U (h) locked burst write
3b684 341             |                                                             '              L R 
3b684 341             |                                                             '              L S 
3b684 341             |                                                             '                T 
3b684 341             | 
3b684 341             | w_single                   
3b684 341             | w_fill_cont           
3b684 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3b688 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3b68c 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3b690 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3b694 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3b698 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3b69c 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3b6a0 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3b6a4 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3b6a8 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3b6ac 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3b6b0 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3b6b4 34d             |                ' disable call to r_resume_burst for single longs when z=0
3b6b4 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3b6b8 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3b6bc 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3b6c0 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3b6c4 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3b6c8 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3b6cc 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3b6d0 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3b6d4 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3b6d8 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3b6dc 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3b6e0 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3b6e4 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3b6e8 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3b6ec 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3b6f0 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3b6f4 35d             |         
3b6f4 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3b6f4 35d             |             '
3b6f4 35d             |             '  At least one of these 3 optional components will be sent
3b6f4 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3b6f4 35d             |             '     body - N x full longs of data
3b6f4 35d             |             '     trailer - last partial long of data
3b6f4 35d             |             '
3b6f4 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3b6f4 35d             |             '
3b6f4 35d             |             'Case    Type                           Sends
3b6f4 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3b6f4 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3b6f4 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3b6f4 35d             |             ' 4)     Multiple long fill             body only
3b6f4 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3b6f4 35d             | 
3b6f4 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3b6f4 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3b6f8 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3b6fc 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3b700 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3b704 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3b708 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3b70c 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3b710 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3b714 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3b718 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3b71c 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3b720 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3b724 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3b728 36a             |                             
3b728 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3b72c 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3b730 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3b734 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3b738 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3b73c 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3b740 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3b744 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3b748 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3b74c 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3b750 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3b754 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3b758 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3b75c 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3b760 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3b764 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3b768 37a             | 
3b768 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3b76c 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3b770 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3b774 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3b778 37e             |                  
3b778 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3b77c 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3b780 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3b784 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3b788 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3b78c 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3b790 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3b794 385             | 
3b794 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3b798 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3b79c 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3b7a0 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3b7a4 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3b7a8 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3b7ac 38b             | 
3b7ac 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3b7ac 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3b7b0 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3b7b4 38d 2A B0 63 FD |                             push    addr1                   'save address
3b7b8 38e             | 
3b7b8 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3b7b8 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3b7bc 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3b7c0 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3b7c4 391             |             
3b7c4 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3b7c8 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3b7cc 393 2B B0 63 FD |                             pop     addr1                   'restore address
3b7d0 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3b7d4 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3b7d8 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3b7dc 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3b7e0 398             | 
3b7e0 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3b7e4 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3b7e8 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3b7ec 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3b7f0 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3b7f4 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3b7f8 39e             | 
3b7f8 39e             |                             'trailer is done
3b7f8 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3b7fc 39f             | 
3b7fc 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3b800 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3b804 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3b808 3a2             | 
3b808 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3b80c 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3b810 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3b814 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3b818 3a6             |                             
3b818 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3b81c 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3b820 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3b824 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3b828 3aa             |                                                          
3b828 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3b82c 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3b830 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3b834 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3b838 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3b83c 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3b840 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3b844 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3b848 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3b84c 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3b850 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3b854 3b5             |  
3b854 3b5 59 52 63 FD |                             drvh    cspin
3b858 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3b85c 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3b860 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3b864 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3b868 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3b86c 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3b870 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3b874 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3b878 3be EA E5 03 F6 |                             mov     d, orighubsize
3b87c 3bf EF E5 63 F0 |                             shl     d, a
3b880 3c0 F2 E3 83 F1 |                             sub     c, d
3b884 3c1 DD E3 03 F1 |                             add     c, offset1
3b888 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3b88c 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3b890 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3b894 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3b898 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3b89c 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3b8a0 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3b8a4 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3b8a8 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3b8ac 3cb BB D3 03 F6 |                             mov     resume, restorefill
3b8b0 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3b8b4 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3b8b8 3ce 6C FC BF CD |             if_c            call    #yield
3b8bc 3cf 2D 00 64 FD |                             ret
3b8c0 3d0             |                            
3b8c0 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3b8c0 3d0             |                       '     rczl    pa                      'rotate left into address offset
3b8c0 3d0             |                       '     rczl    c wcz                   'restore count and flags
3b8c0 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3b8c4 3d1 02 EC 67 F0 |                             shl     pa, #2
3b8c8 3d2 28 06 64 AD |             if_z            setq    #3
3b8cc 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3b8d0 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3b8d4 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3b8d8 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3b8dc 3d7             | 
3b8dc 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3b8e0 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3b8e4 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3b8e8 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3b8ec 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3b8f0 3dc             |         
3b8f0 3dc             | 
3b8f0 3dc             | '..................................................................................................
3b8f0 3dc             | 
3b8f0 3dc             |                 fit 1024-32
3b8f0 3dc             |                 fit 1024-32
3b8f0 3dc 00 00 00 00 
3b8f4 3dd 00 00 00 00 
3b8f8 3de 00 00 00 00 
3b8fc 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3b900 3e0             |                 org 1024-32
3b900 000             | 
3b900 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3b900 000 00 00 00 00 |                 long $0000
3b904 001 11 11 00 00 |                 long $1111
3b908 002 22 22 00 00 |                 long $2222
3b90c 003 33 33 00 00 |                 long $3333
3b910 004 44 44 00 00 |                 long $4444
3b914 005 55 55 00 00 |                 long $5555
3b918 006 66 66 00 00 |                 long $6666
3b91c 007 77 77 00 00 |                 long $7777
3b920 008 88 88 00 00 |                 long $8888
3b924 009 99 99 00 00 |                 long $9999
3b928 00a AA AA 00 00 |                 long $aaaa
3b92c 00b BB BB 00 00 |                 long $bbbb
3b930 00c CC CC 00 00 |                 long $cccc
3b934 00d DD DD 00 00 |                 long $dddd
3b938 00e EE EE 00 00 |                 long $eeee
3b93c 00f FF FF 00 00 |                 long $ffff
3b940 010             | 
3b940 010             | 'masks
3b940 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3b944 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3b948 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3b94c 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3b950 014             | 
3b950 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3b954 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3b958 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3b95c 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3b960 018             | 
3b960 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3b964 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3b968 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3b96c 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3b970 01c             | 
3b970 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3b974 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3b978 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3b97c 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3b980 020             | 
3b980 020             |         fit 1024
3b980 020             |         fit 1024
3b980 020             | 
3b980 020             | '--------------------------------------------------------------------------------------------------
3b980 020             |         orgh
3b980                 | 
3b980                 | gfxexpansion
3b980                 |                             'simple line drawing graphics expansion of memory driver
3b980                 |                             'jmp     #donerepeats                'just return for now
3b980                 | 
3b980     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3b984     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3b988     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3b98c     DD E1 03 F6 |                             mov     b, offset1              'get error term
3b990     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3b994     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3b998     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3b99c     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3b9a0     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3b9a4     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3b9a8     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3b9ac     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3b9b0     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3b9b4     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3b9b8     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3b9bc     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3b9c0     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3b9c4     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3b9c8     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3b9cc     DC E5 33 F9 |                             getword d, total, #0            'get line width
3b9d0     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3b9d4     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3b9d8     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3b9dc     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3b9e0     C3 03 80 FD |                             jmp     #readmask               'continue filling
3b9e4                 | 	alignl
3b9e4                 | _usbnew_spin2_dat_
3b9e4                 |                 org     $000
3b9e4 000             | 
3b9e4 000             | usb_host_start
3b9e4 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3b9e8 001             | 
3b9e8 001 03 00 00 FF 
3b9ec 002 D0 72 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3b9f0 003 02 72 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3b9f4 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3b9f8 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3b9fc 006 29 72 63 FD |                 setq2   htmp
3ba00 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3ba04 008             | 
3ba04 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3ba08 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3ba0c 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3ba10 00b             | 
3ba10 00b             | '------------------------------------------------------------------------------
3ba10 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3ba10 00b             | ' special because the receiving function must not respond with either STALL or
3ba10 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3ba10 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3ba10 00b             | ' corrupt packet, it must ignore the transaction
3ba10 00b             | '------------------------------------------------------------------------------
3ba10 00b             | ' On entry:
3ba10 00b             | '   PTRA - start address of the SETUP data struct.
3ba10 00b             | ' On exit:
3ba10 00b             | '   retval - PID_ACK on success, otherwise error code.
3ba10 00b             | '------------------------------------------------------------------------------
3ba10 00b             | txn_setup
3ba10 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3ba14 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3ba18 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3ba1c 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3ba20 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3ba24 010             | .setup
3ba24 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3ba28 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ba2c 012 2D 00 64 AD |         if_z    ret
3ba30 013 7C 0B B0 FD |                 call    #retry_wait
3ba34 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3ba38 015 2D 00 64 AD |         if_z    ret
3ba3c 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3ba40 017 E0 FF 9F FD |                 jmp     #.setup
3ba44 018             | 
3ba44 018             | '------------------------------------------------------------------------------
3ba44 018             | ' IN/INTERRUPT transaction.
3ba44 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3ba44 018             | '------------------------------------------------------------------------------
3ba44 018             | ' On entry:
3ba44 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3ba44 018             | '     CRC(b19..23).
3ba44 018             | ' On exit:
3ba44 018             | '------------------------------------------------------------------------------
3ba44 018             | txn_in
3ba44 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3ba48 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3ba4c 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3ba50 01b             | 
3ba50 01b             |                 ' Fall through to urx_packet
3ba50 01b             | 
3ba50 01b             | '------------------------------------------------------------------------------
3ba50 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3ba50 01b             | ' received are handshakes and IN DATAx.
3ba50 01b             | '------------------------------------------------------------------------------
3ba50 01b             | ' On entry:
3ba50 01b             | ' On exit:
3ba50 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3ba50 01b             | '     returned.
3ba50 01b             | '------------------------------------------------------------------------------
3ba50 01b             | urx_packet
3ba50 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3ba54 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3ba58 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3ba5c 01e 1A 94 63 FD |                 getct   hct2
3ba60 01f 4E 95 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3ba64 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3ba68 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3ba6c 022             | .wait_sop
3ba6c 022 22 A7 8A FA |                 rdpin   urx, dm
3ba70 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3ba74 024 08 00 90 CD |         if_c    jmp     #.get_pid
3ba78 025 FC 25 CC FB |                 jnct2   #.wait_sop
3ba7c 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3ba80 027             | .get_pid
3ba80 027 28 02 B0 FD |                 call    #urx_next
3ba84 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3ba88 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3ba8c 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3ba90 02b             | .chk_pid
3ba90 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ba94 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3ba98 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3ba9c 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3baa0 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3baa4 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3baa8 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3baac 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3bab0 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3bab4 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3bab8 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3babc 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3bac0 037             | .ack_resend
3bac0 037 22 A7 82 FA |                 rqpin   urx, dm
3bac4 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3bac8 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3bacc 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3bad0 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3bad4 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3bad8 03d             | .chk_eop
3bad8 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3badc 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3bae0 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3bae4 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3bae8 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3baec 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3baf0 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3baf4 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3baf8 045 2D 00 64 FD |                 ret
3bafc 046             | .idle
3bafc 046 22 A7 82 FA |                 rqpin   urx, dm
3bb00 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3bb04 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3bb08 049 2D 00 64 FD |                 ret
3bb0c 04a             | 
3bb0c 04a             | '------------------------------------------------------------------------------
3bb0c 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3bb0c 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3bb0c 04a             | ' if one is required.
3bb0c 04a             | '------------------------------------------------------------------------------
3bb0c 04a             | ' On entry:
3bb0c 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3bb0c 04a             | ' On exit:
3bb0c 04a             | '------------------------------------------------------------------------------
3bb0c 04a             | utx_token
3bb0c 04a 22 A7 82 FA |                 rqpin   urx, dm
3bb10 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3bb14 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3bb18 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3bb1c 04e 34 0D B0 CD |         if_c    call    #utx_pre
3bb20 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3bb24 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3bb28 051 5E 73 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3bb2c 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3bb30 053             | .next_byte
3bb30 053 B9 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3bb34 054 08 72 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3bb38 055             | .wait
3bb38 055 40 46 72 FD |                 testp   dp                      wc
3bb3c 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3bb40 057 23 03 08 FC |                 akpin   dp
3bb44 058 22 A5 22 FC |                 wypin   utx, dm
3bb48 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3bb4c 05a             | 
3bb4c 05a             | '------------------------------------------------------------------------------
3bb4c 05a             | ' SETUP/OUT/INTERRUPT transaction.
3bb4c 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3bb4c 05a             | '------------------------------------------------------------------------------
3bb4c 05a             | ' On entry:
3bb4c 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3bb4c 05a             | '     CRC(b19..23).
3bb4c 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3bb4c 05a             | '   pkt_data - count of DATAx payload bytes to send.
3bb4c 05a             | ' On exit:
3bb4c 05a             | '------------------------------------------------------------------------------
3bb4c 05a             | txn_out
3bb4c 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3bb50 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3bb54 05c 00 00 C0 FF 
3bb58 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3bb5c 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3bb60 05f             | 
3bb60 05f             |                 ' Fall through to utx_data
3bb60 05f             | 
3bb60 05f             | '------------------------------------------------------------------------------
3bb60 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3bb60 05f             | ' calculated while the data byte is being shifted out. Since data stage
3bb60 05f             | ' success/fail is not determined until the status stage of the transaction,
3bb60 05f             | ' this routine is only concerned about the current DATAx packet.
3bb60 05f             | '------------------------------------------------------------------------------
3bb60 05f             | ' On entry:
3bb60 05f             | '   PTRA - hub start address of the data to read.
3bb60 05f             | '   pkt_cnt - data payload size.
3bb60 05f             | ' On exit:
3bb60 05f             | '------------------------------------------------------------------------------
3bb60 05f             | utx_data
3bb60 05f 22 A7 82 FA |                 rqpin   urx, dm
3bb64 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3bb68 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3bb6c 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3bb70 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3bb74 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3bb78 065 D8 0C B0 CD |         if_c    call    #utx_pre
3bb7c 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3bb80 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3bb84 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3bb88 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3bb8c 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3bb90 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3bb94 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3bb98 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3bb9c 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3bba0 06f             | .read_byte
3bba0 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3bba4 070 F0 00 B0 FD |                 call    #utx_byte
3bba8 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3bbac 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3bbb0 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3bbb4 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3bbb8 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3bbbc 076             | .send_crc
3bbbc 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3bbc0 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3bbc4 078 D0 00 B0 FD |                 call    #utx_byte
3bbc8 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3bbcc 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3bbd0 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3bbd4 07c             | 
3bbd4 07c             | '------------------------------------------------------------------------------
3bbd4 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3bbd4 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3bbd4 07c             | ' expects that the packet includes at least the CRC word.
3bbd4 07c             | '
3bbd4 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3bbd4 07c             | ' was requested, which makes it difficult to determine where the data stops
3bbd4 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3bbd4 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3bbd4 07c             | ' USB-16 expected residual value of 0xB001.
3bbd4 07c             | '
3bbd4 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3bbd4 07c             | ' so the caller can verify IN success before writing the data to its final
3bbd4 07c             | ' destination.
3bbd4 07c             | '------------------------------------------------------------------------------
3bbd4 07c             | ' On entry:
3bbd4 07c             | '   pkt_data - max byte count expected to be in the packet.
3bbd4 07c             | '   newb_flg - signals new byte ready when toggled.
3bbd4 07c             | ' On exit:
3bbd4 07c             | '   pkt_cnt - actual number of bytes read.
3bbd4 07c             | '------------------------------------------------------------------------------
3bbd4 07c             | urx_data
3bbd4 07c F7 77 03 F6 |                 mov     htmp2, pb
3bbd8 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3bbdc 07e 00 00 C0 FF 
3bbe0 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3bbe4 080 BB EF 03 F6 |                 mov     pb, htmp2
3bbe8 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3bbec 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3bbf0 083 58 85 03 F6 |                 mov     pkt_tmp, pkt_data
3bbf4 084 02 84 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3bbf8 085             | .wait_byte
3bbf8 085             | ' In-line rx for max speed
3bbf8 085 22 A7 82 FA |                 rqpin   urx, dm
3bbfc 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3bc00 087 53 A5 02 F5 |                 and     utx, urx
3bc04 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3bc08 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3bc0c 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3bc10 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3bc14 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3bc18 08d DC FF 9F FD |                 jmp     #.wait_byte
3bc1c 08e             | .get_byte
3bc1c 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3bc20 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3bc24 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3bc28 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3bc2c 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3bc30 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3bc34 094             | .end_crc
3bc34 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3bc38 095 C2 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3bc3c 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3bc40 097 2D 00 64 1D |         if_a    ret
3bc44 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3bc44 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3bc44 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3bc44 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3bc44 098 22 A7 82 FA |                 rqpin   urx, dm
3bc48 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3bc4c 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3bc50 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3bc50 09b             | .chk_crc
3bc50 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3bc54 09c 58 00 00 FF 
3bc58 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3bc5c 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3bc60 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3bc64 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3bc68 0a1 34 09 B0 FD |                 call    #poll_waitx
3bc6c 0a2             | 
3bc6c 0a2             |                 ' Fall through to utx_handshake
3bc6c 0a2             | 
3bc6c 0a2             | '------------------------------------------------------------------------------
3bc6c 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3bc6c 0a2             | ' the appropriate IP delay has been inserted.
3bc6c 0a2             | '------------------------------------------------------------------------------
3bc6c 0a2             | ' On entry:
3bc6c 0a2             | '   retval - handshake PID to send.
3bc6c 0a2             | ' On exit:
3bc6c 0a2             | '   retval unchanged.
3bc6c 0a2             | '------------------------------------------------------------------------------
3bc6c 0a2             | utx_handshake
3bc6c 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3bc70 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3bc74 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3bc78 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3bc7c 0a6 5F A5 02 F6 |                 mov     utx, retval
3bc80 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3bc84 0a8             | .idle
3bc84 0a8 22 A7 82 FA |                 rqpin   urx, dm
3bc88 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3bc8c 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3bc90 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3bc94 0ac 08 09 90 FD |                 jmp     #poll_waitx
3bc98 0ad             | 
3bc98 0ad             | '------------------------------------------------------------------------------
3bc98 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3bc98 0ad             | '------------------------------------------------------------------------------
3bc98 0ad             | ' On entry:
3bc98 0ad             | '   utx - byte to transmit.
3bc98 0ad             | ' On exit:
3bc98 0ad             | '------------------------------------------------------------------------------
3bc98 0ad             | utx_byte
3bc98 0ad 40 46 72 FD |                 testp   dp                      wc
3bc9c 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3bca0 0af 23 03 08 FC |                 akpin   dp
3bca4 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3bca8 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3bcac 0b2             | 
3bcac 0b2             | '------------------------------------------------------------------------------
3bcac 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3bcac 0b2             | '------------------------------------------------------------------------------
3bcac 0b2             | ' On entry:
3bcac 0b2             | ' On exit:
3bcac 0b2             | '   retval - the byte read.
3bcac 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3bcac 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3bcac 0b2             | '     received.
3bcac 0b2             | '------------------------------------------------------------------------------
3bcac 0b2             | urx_next
3bcac 0b2 22 A7 8A FA |                 rdpin   urx, dm
3bcb0 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3bcb4 0b4 53 A5 02 F5 |                 and     utx, urx
3bcb8 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3bcbc 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3bcc0 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3bcc4 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3bcc8 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3bccc 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3bcd0 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3bcd4 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3bcd8 0bd 2D 00 64 FD |                 ret
3bcdc 0be             | 
3bcdc 0be             | '------------------------------------------------------------------------------
3bcdc 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3bcdc 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3bcdc 0be             | ' length, and the PID is not included in the CRC calculation:
3bcdc 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3bcdc 0be             | '  CRC5  ENDP ADDRESS PID
3bcdc 0be             | ' %00000_1111_1111111_xxxxxxxx
3bcdc 0be             | '------------------------------------------------------------------------------
3bcdc 0be             | ' On entry:
3bcdc 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3bcdc 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3bcdc 0be             | ' On exit:
3bcdc 0be             | '   ep_addr_pid - CRC value appended to the packet.
3bcdc 0be             | '------------------------------------------------------------------------------
3bcdc 0be             | calc_crc5
3bcdc 0be FF 03 00 FF 
3bce0 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3bce4 0c0 5E 73 03 F6 |                 mov     htmp, ep_addr_pid
3bce8 0c1 08 72 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3bcec 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3bcf0 0c3 69 72 63 FD |                 rev     htmp                            ' Input data reflected
3bcf4 0c4 28 72 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3bcf8 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3bcfc 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3bd00 0c7 09 72 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3bd04 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3bd08 0c9 01 72 77 F0 |                 shl     htmp, #1                wc
3bd0c 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3bd10 0cb 01 72 77 F0 |                 shl     htmp, #1                wc
3bd14 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3bd18 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3bd1c 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3bd20 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3bd24 0d0             | 
3bd24 0d0             | '------------------------------------------------------------------------------
3bd24 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3bd24 0d0             | '------------------------------------------------------------------------------
3bd24 0d0             | isr1_fsframe
3bd24 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3bd28 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3bd2c 0d2 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3bd30 0d3 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3bd34 0d4             | .wait
3bd34 0d4 40 46 72 FD |                 testp   dp                      wc
3bd38 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3bd3c 0d6 23 03 08 FC |                 akpin   dp
3bd40 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3bd44 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3bd48 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3bd4c 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3bd50 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3bd54 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3bd58 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3bd5c 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3bd60 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3bd64 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3bd68 0e1 2C FF BF FD |                 call    #utx_byte
3bd6c 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3bd70 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3bd74 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3bd78 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3bd7c 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3bd80 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3bd84 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3bd88 0e9 5B A5 42 F5 |                 or      utx, icrc
3bd8c 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3bd90 0eb A4 83 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3bd94 0ec 20 00 90 FD |                 jmp     #isr1_wait
3bd98 0ed             | isr1_lsframe
3bd98 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3bd9c 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3bda0 0ef B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3bda4 0f0             | .wait
3bda4 0f0 40 46 72 FD |                 testp   dp                      wc
3bda8 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3bdac 0f2 23 03 08 FC |                 akpin   dp
3bdb0 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3bdb4 0f4 A3 83 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3bdb8 0f5             | isr1_wait
3bdb8 0f5 22 A5 82 FA |                 rqpin   utx, dm
3bdbc 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3bdc0 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3bdc4 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3bdc8 0f9 03 00 00 FF 
3bdcc 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3bdd0 0fb 1F 82 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3bdd4 0fc F5 FF 3B FB |                 reti1
3bdd8 0fd             | 
3bdd8 0fd             | '------------------------------------------------------------------------------
3bdd8 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3bdd8 0fd             | ' transaction will complete before the next frame is triggered.
3bdd8 0fd             | '------------------------------------------------------------------------------
3bdd8 0fd             | ' On entry:
3bdd8 0fd             | ' On exit:
3bdd8 0fd             | '------------------------------------------------------------------------------
3bdd8 0fd             | wait_txn_ok
3bdd8 0fd 1A 76 63 FD |                 getct   htmp2
3bddc 0fe 49 77 83 F1 |                 sub     htmp2, iframe_ct_base
3bde0 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3bde4 100 A1 77 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3bde8 101 A2 77 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3bdec 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3bdf0 103 2D 00 64 FD |                 ret
3bdf4 104             | 
3bdf4 104             | '------------------------------------------------------------------------------
3bdf4 104             | ' A device connection was detected, or a bus reset was requested by the USB
3bdf4 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3bdf4 104             | ' and perform a reset sequence prior to device enumeration.
3bdf4 104             | '------------------------------------------------------------------------------
3bdf4 104             | dev_reset
3bdf4 104 22 A7 82 FA |                 rqpin   urx, dm
3bdf8 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3bdfc 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3be00 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3be04 108             | reset
3be04 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3be08 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3be0c 10a 1F 5C 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3be10 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3be14 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3be18 10d 1A 92 62 FD |                 getct   iframe_ct_base
3be1c 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3be20 10f B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3be24 110 59 73 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3be28 111 24 72 07 F1 |                 add     htmp, #36
3be2c 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3be30 113             | .framewait
3be30 113 B9 B3 1A F2 |                 cmp     frame, htmp             wcz
3be34 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3be38 115 2D 00 64 FD |                 ret
3be3c 116             | 
3be3c 116             | '------------------------------------------------------------------------------
3be3c 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3be3c 116             | '------------------------------------------------------------------------------
3be3c 116             | ' On entry:
3be3c 116             | '   PTRA - source address.
3be3c 116             | '   PB - destination address.
3be3c 116             | '   hr0 - length of copy, in bytes.
3be3c 116             | ' On exit:
3be3c 116             | '------------------------------------------------------------------------------
3be3c 116             | hmemcpy
3be3c 116 61 73 C7 FA |                 rdbyte  htmp, ptra++
3be40 117 F7 73 43 FC |                 wrbyte  htmp, pb
3be44 118 01 EE 07 F1 |                 add     pb, #1
3be48 119 FC 87 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3be4c 11a             | 
3be4c 11a             | '------------------------------------------------------------------------------
3be4c 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3be4c 11a             | ' loop until the errant device is disconnected.
3be4c 11a             | '------------------------------------------------------------------------------
3be4c 11a             | ' On entry:
3be4c 11a             | ' On exit:
3be4c 11a             | '------------------------------------------------------------------------------
3be4c 11a             | host_error
3be4c 11a             |           if ERROR_LED >= 0
3be4c 11a             |           end
3be4c 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3be50 11b             | 
3be50 11b             | '------------------------------------------------------------------------------
3be50 11b             | ' Get HID descriptor buffer for current port
3be50 11b             | '------------------------------------------------------------------------------
3be50 11b             | ' On entry:
3be50 11b             | ' On exit:
3be50 11b             | '   PB - HID descriptor buffer pointer
3be50 11b             | '------------------------------------------------------------------------------
3be50 11b             | get_hid_descr_buffer
3be50 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3be54 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3be58 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3be5c 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3be60 11f             | 
3be60 11f             | 
3be60 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3be64 120             | 
3be64 120             | ' USB commands and error codes
3be64 120 00 00 00 00 | cmd_data        long    0
3be68 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3be6c 122             | 
3be6c 122             | ' Parameters block assigned at cog startup
3be6c 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3be70 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3be74 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3be78 125             | if ACTIVITY_LED >= 0
3be78 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3be78 125             | end
3be78 125             | if ERROR_LED >= 0
3be78 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3be78 125             | end
3be78 125 00 00 00 00 | hid_descr_p     long    0
3be7c 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3be7c 126             | 'hkbd_report_p   long    0
3be7c 126 00 00 00 00 | hub_descr_p     long    0
3be80 127 00 00 00 00 | urx_buff_p      long    0
3be84 128 00 00 00 00 | dev_desc_buff_p long    0
3be88 129 00 00 00 00 | con_desc_buff_p long    0
3be8c 12a 00 00 00 00 | cache_start_p   long    0
3be90 12b 00 00 00 00 | cache_end_p     long    0
3be94 12c             | if EMUPAD_MAX_PLAYER > 0
3be94 12c             | emupad_out_ptr  long    0
3be94 12c             | end
3be94 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3be98 12d             | 
3be98 12d             | hdev_init_start
3be98 12d             | hdev_port       res     1
3be98 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3be98 12d             | kbm_next_datax  res     1
3be98 12d             | hub_intf_num    res     1
3be98 12d             | hub_next_datax  res     1
3be98 12d             | hub_status_chg  res     1
3be98 12d             | hub_port_status res     1
3be98 12d             | if HAVE_MOUSE
3be98 12d             | ms_intf_num     res     1
3be98 12d             | ms_in_max_pkt   res     1
3be98 12d             | end
3be98 12d             | kb_intf_num     res     1
3be98 12d             | kb_interval     res     1
3be98 12d             | kb_in_max_pkt   res     1
3be98 12d             | kb_max_index    res     1
3be98 12d             | kb_led_states   res     1
3be98 12d             | gp_intf_num     res     1
3be98 12d             | gp_interval     res     1
3be98 12d             | gp_max_index    res     1
3be98 12d             | gp_descr_len    res     1+MAX_DEVICES
3be98 12d             | hdev_init_end
3be98 12d             | 
3be98 12d             | ' Initialized at cog startup:
3be98 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3be98 12d             | iframe_ct_new   res     1
3be98 12d             | iframe_ct_base  res     1
3be98 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3be98 12d             | 
3be98 12d             | ' This register block is reset to zero when a USB device connects
3be98 12d             | hreg_init_start
3be98 12d             | hstatus         res     1         ' Host status flags
3be98 12d             | hctwait         res     1         ' Poll-based wait clocks
3be98 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3be98 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3be98 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3be98 12d             | xfer_retry      res     1         ' Control transfer retry count
3be98 12d             | retry           res     1         ' Transaction retry count
3be98 12d             | utx             res     1         ' Byte to transmit on USB
3be98 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3be98 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3be98 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3be98 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3be98 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3be98 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3be98 12d             | frame           res     1         ' USB 1ms frame counter value
3be98 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3be98 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3be98 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3be98 12d             | crc             res     1         ' Used for CRC16 calculation
3be98 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3be98 12d             | retval          res     1         ' Global success/fail return parameter
3be98 12d             | context_retval  res     1         ' Operation contextual return parameter
3be98 12d             | ' Device stuff
3be98 12d             | hdev_id         res     1+MAX_DEVICES
3be98 12d             | hdev_bcd        res     1
3be98 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3be98 12d             | ' Keyboard/mouse stuff
3be98 12d             | hctrl_ep_addr   res     1
3be98 12d             | hctrl_max_pkt   res     1
3be98 12d             | hconfig_base    res     1
3be98 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3be98 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3be98 12d             | hdev_class      res     1
3be98 12d             | hdev_subclass   res     1
3be98 12d             | hdev_protocol   res     1
3be98 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3be98 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3be98 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3be98 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3be98 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3be98 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3be98 12d             | if HAVE_MOUSE
3be98 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3be98 12d             | end
3be98 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3be98 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3be98 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3be98 12d             | hdev_out_addr   res     1
3be98 12d             | 
3be98 12d             | if EMUPAD_MAX_PLAYER > 0
3be98 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3be98 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3be98 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3be98 12d             | end
3be98 12d             | 
3be98 12d             | hreg_init_end
3be98 12d             | 
3be98 12d             | hidr_start
3be98 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3be98 12d             | hidr_flags      res     1
3be98 12d             | hidr_axis       res     4
3be98 12d             | hidr_buttons    res     1
3be98 12d             | hidr_hats       res     1
3be98 12d             | '' Above are actually useful values, 6 longs
3be98 12d             | hidr_type       res     1
3be98 12d             | hidr_id         res     1
3be98 12d             | hidr_offset     res     1
3be98 12d             | hidr_usage_idx  res     1
3be98 12d             | ' below need to be push/pop'd
3be98 12d             | hidr_state      res     1
3be98 12d             | hidr_size       res     1
3be98 12d             | hidr_count      res     1
3be98 12d             | hidr_lminmax    res     1
3be98 12d             | hidr_pminmax    res     1
3be98 12d             | hidr_end
3be98 12d             | 
3be98 12d             | ' Variables dependent on the system freqency
3be98 12d             | _var_64_lower_  res     1
3be98 12d             | _var_64_upper_  res     1
3be98 12d             | _12Mbps_        res     1
3be98 12d             | _1_5Mbps_       res     1
3be98 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3be98 12d             | _1us_           res     1         ' 1us
3be98 12d             | _10us_          res     1         ' 10us
3be98 12d             | _33us_          res     1         ' 33us
3be98 12d             | _txn_err_       res     1         ' 250us
3be98 12d             | _500us_         res     1         ' 500us
3be98 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3be98 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3be98 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3be98 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3be98 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3be98 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3be98 12d             | _preamble_wait_ res     1
3be98 12d             | _1ms_           res     1         ' 1ms
3be98 12d             | _2ms_           res     1         ' 2ms
3be98 12d             | _suspend_wait_  res     1         ' 3ms
3be98 12d             | _4ms_           res     1         ' 4ms
3be98 12d             | _xfer_wait_     res     1         ' 5ms
3be98 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3be98 12d             | _reset_hold_    res     1         ' 15ms
3be98 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3be98 12d             | _21ms_          res     1         ' 21ms
3be98 12d             | _100ms_         res     1         ' 100ms
3be98 12d             | _500ms_         res     1         ' 500ms
3be98 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3be98 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3be98 12d             | '------------------------------------------------------------------------------
3be98 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3be98 12d             | _usb_d_ls_nco_  res     1
3be98 12d             | _usb_h_fs_nco_  res     1
3be98 12d             | _usb_d_fs_nco_  res     1
3be98 12d             | '------------------------------------------------------------------------------
3be98 12d             | ' Scratch registers
3be98 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3be98 12d             | htmp1           res     1
3be98 12d             | htmp2           res     1
3be98 12d             | htmp3           res     1
3be98 12d             | hrep            res     1         ' Repeat count
3be98 12d             | hsave0          res     1         ' Subroutine parameter saves
3be98 12d             | hsave1          res     1
3be98 12d             | hsave2          res     1
3be98 12d             | isrtmp1         res     1
3be98 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3be98 12d             | hr0             res     1         ' Multi-purpose registers
3be98 12d             | hr1             res     1
3be98 12d             | hr2             res     1
3be98 12d             | hr3             res     1
3be98 12d             | hpar1           res     1         ' Routine entry/exit parameters
3be98 12d             | hpar2           res     1
3be98 12d             | hpar3           res     1
3be98 12d             | hct2            res     1         ' Function response bus turn-around timer
3be98 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3be98 12d             | mod_cnt         res     1         ' Used in idle loops
3be98 12d             | 
3be98 12d             |                 fit     $1F0
3be98 12d             |                 fit     $1F0
3be98 12d             |                 org     $200
3be98 200             | hlut_start
3be98 200             | 
3be98 200             | '------------------------------------------------------------------------------
3be98 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3be98 200             | ' settings to startup defaults.
3be98 200             | '------------------------------------------------------------------------------
3be98 200             | ' On entry:
3be98 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3be98 200             | '------------------------------------------------------------------------------
3be98 200             | set_speed_full
3be98 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3be9c 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3bea0 202 A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3bea4 203 A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3bea8 204             | '                ret                             wcz     ' Restore caller flags on exit
3bea8 204             | 
3bea8 204             | '------------------------------------------------------------------------------
3bea8 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3bea8 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3bea8 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3bea8 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3bea8 204             | ' putting the smart pins into reset.
3bea8 204             | '------------------------------------------------------------------------------
3bea8 204             | ' On entry:
3bea8 204             | ' On exit: CZ flags restored to caller states
3bea8 204             | '------------------------------------------------------------------------------
3bea8 204             | set_speed_low
3bea8 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3beac 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3beb0 206 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3beb4 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3beb8 208 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3bebc 209 A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3bec0 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3bec4 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3bec8 20c             | 
3bec8 20c             | '------------------------------------------------------------------------------
3bec8 20c             | ' Perform configuration stuff required when a device intitially connects.
3bec8 20c             | '------------------------------------------------------------------------------
3bec8 20c             | ' On entry:
3bec8 20c             | ' On exit:
3bec8 20c             | '------------------------------------------------------------------------------
3bec8 20c             | on_connect
3bec8 20c 02 86 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3becc 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3bed0 20e             | .retry
3bed0 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3bed4 20f 01 8E 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3bed8 210 02 8E 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3bedc 211 00 08 00 FF 
3bee0 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3bee4 213 20 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3bee8 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3beec 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3bef0 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3bef4 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3bef8 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3befc 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3bf00 21a B2 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3bf04 21b 4C 03 B0 FD |                 call    #poll_waitx
3bf08 21c 01 86 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3bf0c 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3bf10 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3bf14 21f B8 FF 9F FD |                 jmp     #.retry
3bf18 220             | .get_dev_desc
3bf18 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3bf1c 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3bf20 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3bf24 223 A8 99 02 F6 |                 mov     hctwait, _1ms_
3bf28 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3bf2c 225 88 FB BF FD |                 call    #reset
3bf30 226 38 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3bf34 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bf38 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3bf3c 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3bf40 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bf44 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3bf48 22c AD 99 02 F6 |                 mov     hctwait, _8ms_
3bf4c 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3bf50 22e 04 00 00 FF 
3bf54 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3bf58 230 34 FA BF FD |                 call    #calc_crc5
3bf5c 231 20 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3bf60 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bf64 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3bf68 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3bf6c 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3bf70 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3bf74 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bf78 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3bf7c 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3bf80 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3bf84 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3bf88 23c A0 99 02 F6 |                 mov     hctwait, _500us_
3bf8c 23d C4 02 B0 FD |                 call    #poll_waitx
3bf90 23e 28 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3bf94 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bf98 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3bf9c 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3bfa0 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3bfa4 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bfa8 244 2D 00 64 5D |         if_nz   ret
3bfac 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3bfb0 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3bfb4 247 61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3bfb8 248 61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3bfbc 249 00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3bfc0 24a 09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3bfc4 24b 02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3bfc8 24c 56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
3bfcc 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3bfd0 24e 2C FB 9F CD |         if_b    jmp     #host_error
3bfd4 24f 24 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3bfd8 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3bfdc 251 2D EC 63 FD |                 call    pa
3bfe0 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3bfe4 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3bfe8 254 2C EC 63 FD |                 jmp     pa
3bfec 255             | 
3bfec 255             | '------------------------------------------------------------------------------
3bfec 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3bfec 255             | ' Status reporting is always in the function-to-host direction.
3bfec 255             | '------------------------------------------------------------------------------
3bfec 255             | ' On entry:
3bfec 255             | '   PTRA - start address of the SETUP data in hub.
3bfec 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3bfec 255             | '     stage.
3bfec 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3bfec 255             | ' On exit:
3bfec 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3bfec 255             | '     contains the count of data stage bytes actually received, which must
3bfec 255             | '     always be <= the count requested.
3bfec 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3bfec 255             | '     more specific USB operation error code.
3bfec 255             | '------------------------------------------------------------------------------
3bfec 255             | control_read
3bfec 255 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
3bff0 256 F8 91 03 F6 |                 mov     hpar2, ptra
3bff4 257 F7 93 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3bff8 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3bffc 259             | .xfer_start
3bffc 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3c000 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3c004 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c008 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3c00c 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3c010 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3c014 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3c018 260 61 00 00 FF 
3c01c 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3c020 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3c024 263             | .data
3c024 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3c028 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3c02c 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3c030 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3c034 267             | .nak_retry
3c034 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3c038 268             | .in_retry
3c038 268 BC F6 BF FD |                 call    #txn_in
3c03c 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3c040 26a 28 00 90 AD |         if_z    jmp     #.commit
3c044 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3c048 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3c04c 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3c050 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3c054 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3c058 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3c05c 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3c060 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3c064 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3c068 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3c06c 275             | .commit
3c06c 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3c070 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3c074 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3c078 278 5C 87 03 F6 |                 mov     hr0, pkt_cnt
3c07c 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3c080 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3c084 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3c088 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3c08c 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3c090 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3c094 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3c098 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3c09c 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3c0a0 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3c0a4 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3c0a8 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3c0ac 285             | .pre_status
3c0ac 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3c0b0 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3c0b4 287 00 B0 06 F6 |                 mov     pkt_data, #0
3c0b8 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3c0bc 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3c0c0 28a 61 00 00 FF 
3c0c4 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3c0c8 28c             | .out_retry
3c0c8 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3c0cc 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c0d0 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3c0d4 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3c0d8 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3c0dc 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3c0e0 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3c0e4 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3c0e8 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3c0ec 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3c0f0 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3c0f4 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3c0f4 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3c0f4 297             | ' ControlRead() transfer gets things unstuck most of the time...
3c0f4 297             | .xfer_retry
3c0f4 297 AC 99 02 F6 |                 mov     hctwait, _xfer_wait_
3c0f8 298 58 01 B0 FD |                 call    #poll_waitx
3c0fc 299 8C F9 BF FD |                 call    #wait_txn_ok
3c100 29a C7 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3c104 29b C8 F1 03 F6 |                 mov     ptra, hpar2
3c108 29c C9 EF 03 F6 |                 mov     pb, hpar3
3c10c 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3c110 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3c114 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3c118 2a0             | 
3c118 2a0             | '------------------------------------------------------------------------------
3c118 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3c118 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3c118 2a0             | ' the SETUP data struct is filled with the required values.
3c118 2a0             | '------------------------------------------------------------------------------
3c118 2a0             | ' On entry:
3c118 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3c118 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3c118 2a0             | '     stage.
3c118 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3c118 2a0             | ' On exit:
3c118 2a0             | '   retval - used to convey the success/failure of each stage.
3c118 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3c118 2a0             | '     more specific USB operation error code.
3c118 2a0             | '------------------------------------------------------------------------------
3c118 2a0             | control_write
3c118 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3c11c 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3c120 2a2 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3c124 2a3             | 
3c124 2a3 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
3c128 2a4 F8 91 03 F6 |                 mov     hpar2, ptra
3c12c 2a5 F7 93 03 F6 |                 mov     hpar3, pb
3c130 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3c134 2a7             | .xfer_start
3c134 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3c138 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3c13c 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3c140 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c144 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3c148 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3c14c 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3c150 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3c154 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3c158 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3c15c 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3c160 2b2             | .data
3c160 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3c164 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3c168 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3c16c 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3c170 2b6             | .out_retry
3c170 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3c174 2b7 88 F6 BF FD |                 call    #txn_out
3c178 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c17c 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3c180 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3c184 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3c188 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3c18c 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3c190 2be             | .commit
3c190 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3c194 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3c198 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3c19c 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3c1a0 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3c1a4 2c3             | pre_status_in
3c1a4 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3c1a8 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3c1ac 2c5             | .status_retry
3c1ac 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3c1b0 2c6 44 F5 BF FD |                 call    #txn_in
3c1b4 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3c1b8 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3c1bc 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3c1c0 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3c1c4 2cb 2D 00 64 AD |         if_z    ret
3c1c8 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3c1cc 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3c1d0 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3c1d4 2cf             | '               ret                                     ' Caller must handle transfer retirement
3c1d4 2cf             | 
3c1d4 2cf             | '------------------------------------------------------------------------------
3c1d4 2cf             | ' Execute an IN interrupt transaction.
3c1d4 2cf             | '------------------------------------------------------------------------------
3c1d4 2cf             | ' On entry:
3c1d4 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3c1d4 2cf             | '   hpar2 - Address of the IN data buffer
3c1d4 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3c1d4 2cf             | ' On exit:
3c1d4 2cf             | '   retval - the result of the operation.
3c1d4 2cf             | '   hpar3 - the count of IN data bytes actually received.
3c1d4 2cf             | '------------------------------------------------------------------------------
3c1d4 2cf             | do_int_in
3c1d4 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3c1d8 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3c1dc 2d1 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3c1e0 2d2             | 
3c1e0 2d2 C9 73 33 F9 |                 getword htmp, hpar3, #0
3c1e4 2d3 C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3c1e8 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3c1ec 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3c1f0 2d6             | .retry
3c1f0 2d6 C9 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3c1f4 2d7 00 F5 BF FD |                 call    #txn_in
3c1f8 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3c1fc 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3c200 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3c204 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3c208 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3c20c 2dd 54 00 B0 FD |                 call    #retry_wait
3c210 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3c214 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3c218 2e0 D4 FF 9F FD |                 jmp     #.retry
3c21c 2e1             | .commit
3c21c 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3c220 2e2 C8 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3c224 2e3 5C 87 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3c228 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3c22c 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3c230 2e6             | .post_ret
3c230 2e6 5C 93 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3c234 2e7             | 
3c234 2e7             | 
3c234 2e7             | '------------------------------------------------------------------------------
3c234 2e7             | ' Resets the downstream hub port to FS
3c234 2e7             | '------------------------------------------------------------------------------
3c234 2e7             | dwnstream_reset
3c234 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3c238 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3c23c 2e9             | 
3c23c 2e9 0E 6A 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3c240 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3c244 2eb 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3c248 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3c24c 2ed A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3c250 2ee A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3c254 2ef             | 
3c254 2ef             | '------------------------------------------------------------------------------
3c254 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3c254 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3c254 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3c254 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3c254 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3c254 2ef             | '------------------------------------------------------------------------------
3c254 2ef             | ' On entry:
3c254 2ef             | '   hctwait - wait interval in sysclocks.
3c254 2ef             | ' On exit:
3c254 2ef             | '------------------------------------------------------------------------------
3c254 2ef             | poll_waitx
3c254 2ef 1A 94 63 FD |                 getct   hct2
3c258 2f0 4C 95 6B FA |                 addct2  hct2, hctwait
3c25c 2f1             | .wait
3c25c 2f1 FF 25 CC FB |                 jnct2   #.wait
3c260 2f2 2D 00 64 FD |                 ret
3c264 2f3             | 
3c264 2f3             | '------------------------------------------------------------------------------
3c264 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3c264 2f3             | '------------------------------------------------------------------------------
3c264 2f3             | ' On entry:
3c264 2f3             | '   retval - transaction response PID or error code.
3c264 2f3             | ' On exit:
3c264 2f3             | '------------------------------------------------------------------------------
3c264 2f3             | retry_wait
3c264 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3c268 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3c26c 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3c270 2f6 14 00 90 AD |         if_z    jmp     #.nak
3c274 2f7 9F 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3c278 2f8 D8 FF BF FD |                 call    #poll_waitx
3c27c 2f9             | .dec
3c27c 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3c280 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3c284 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3c288 2fc             | .nak
3c288 2fc 9E 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3c28c 2fd C4 FF BF FD |                 call    #poll_waitx
3c290 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3c294 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3c298 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3c29c 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3c2a0 302 2D 00 64 FD |                 ret
3c2a4 303             | 
3c2a4 303             | host_reset
3c2a4 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3c2a8 304 14 72 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3c2ac 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3c2ac 305 BD 01 05 FF 
3c2b0 306 00 72 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3c2b4 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3c2b8 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3c2bc 309             | ' Check to see if the system clock has been changed.
3c2bc 309 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
3c2c0 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3c2c4 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3c2c8 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3c2cc 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3c2d0 30e 40 46 62 FD |                 dirl    dp
3c2d4 30f             | 
3c2d4 30f 28 02 64 FD |                 setq    #1
3c2d8 310 80 00 80 FF 
3c2dc 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3c2e0 312 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3c2e4 313             | .enable
3c2e4 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3c2e8 314 41 46 62 FD |                 dirh    dp
3c2ec 315 1F 38 63 FD |                 waitx   _1us_
3c2f0 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c2f4 317             | 
3c2f4 317             |                 ' Handle Port protection enable and startup delay
3c2f4 317 00 48 56 F2 |                 cmps    usb_enable_pin, #0      wc
3c2f8 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3c2fc 319 1F 60 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3c300 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3c304 31b 1F 60 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3c308 31c             | 
3c308 31c             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3c308 31c             | 
3c308 31c             | discon_entry
3c308 31c 03 98 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3c30c 31d             | 
3c30c 31d 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3c310 31e 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3c314 31f 38 EC A7 F9 |                 alti    pa, #%000_111_000
3c318 320 00 00 04 F6 |                 mov     0-0, #0
3c31c 321             | .regloop
3c31c 321             |               
3c31c 321             |         if HAVE_HIDPAD
3c31c 321 F8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3c320 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3c324 323 28 6E 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3c328 324 F7 01 68 FC |                 wrlong  #0,pb
3c32c 325             |         end
3c32c 325             |         if EMUPAD_MAX_PLAYER > 0
3c32c 325             |         end
3c32c 325             | 
3c32c 325             |                 ' Fall through to disconnected loop
3c32c 325             | 
3c32c 325             | '-----------------------------------------------------------------------------------------------------------------
3c32c 325             | ' Device connect handling (Section 7.1.7.3).
3c32c 325             | '-----------------------------------------------------------------------------------------------------------------
3c32c 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3c32c 325             | ' device to connect (Section 7.1.7.3).
3c32c 325             | '-----------------------------------------------------------------------------------------------------------------
3c32c 325             | disconnected
3c32c 325 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3c330 326 2C 89 0B F2 |                 cmp     hr1, save_sysclk        wz
3c334 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3c338 328 03 88 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3c33c 329 1F 88 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3c340 32a             |         if ACTIVITY_LED >= 0
3c340 32a             |         end
3c340 32a 22 A7 82 FA |                 rqpin   urx, dm
3c344 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3c348 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3c34c 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3c350 32e             | .se1_test
3c350 32e B1 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3c354 32f FC FE BF FD |                 call    #poll_waitx
3c358 330 22 A7 82 FA |                 rqpin   urx, dm
3c35c 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3c360 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3c364 333 A0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3c368 334             | .se1            'SE1 is a fatal error condition
3c368 334 B1 99 02 F6 |                 mov     hctwait, _100ms_
3c36c 335 E4 FE BF FD |                 call    #poll_waitx
3c370 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3c374 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3c378 338             | .connect_test                                           ' Test lines until stable J/K state seen
3c378 338 1F 62 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3c37c 339 22 A7 82 FA |                 rqpin   urx, dm
3c380 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3c384 33b 80 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3c388 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3c38c 33d             | connected
3c38c 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3c390 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3c394 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3c398 340 6C FF 9F 5D |         if_nz   jmp     #discon_entry
3c39c 341             | .set_pulse
3c39c 341 1A 66 63 FD |                 getct   _pulse_time_
3c3a0 342 B2 67 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3c3a4 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3c3a4 343             | ' of 1ms and make a correction, if necessary.
3c3a4 343             | '                mov     htmp, _1ms_
3c3a4 343             | '                subs    htmp, iframe_delta
3c3a4 343             | '                adds    _frame1ms_clks_, htmp
3c3a4 343             | '                debug(udec(_frame1ms_clks_))
3c3a4 343             | 
3c3a4 343             |                 ' Fall through to idle/processing loop
3c3a4 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3c3a8 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3c3ac 345             | 
3c3ac 345             | hidle
3c3ac 345 22 A7 82 FA |                 rqpin   urx, dm
3c3b0 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3c3b4 347 98 00 90 CD |         if_c    jmp     #.se0_test
3c3b8 348 24 06 70 FD |                 pollct3                         wc
3c3bc 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3c3c0 34a 1A 96 63 FD |                 getct   hct3
3c3c4 34b A8 97 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3c3c8 34c             | 
3c3c8 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3c3cc 34d 00 72 E3 F8 |                 getbyte htmp
3c3d0 34e             | 
3c3d0 34e 09 72 0F F2 |                 cmp     htmp, #HUB_READY        wz
3c3d4 34f 8C 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3c3d8 350 40 00 90 AD |         if_z    jmp     #.poll
3c3dc 351             | 
3c3dc 351             |         if _HAVE_GAMEPAD
3c3dc 351 06 72 0F F2 |                 cmp     htmp, #HID_READY        wz
3c3e0 352 08 72 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3c3e4 353 07 72 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3c3e8 354 F4 15 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3c3ec 355 2C 00 90 AD |         if_z    jmp     #.poll
3c3f0 356             |         end
3c3f0 356             | 
3c3f0 356             |         if HAVE_MOUSE
3c3f0 356 04 72 0F F2 |                 cmp     htmp, #M_READY          wz
3c3f4 357 44 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3c3f8 358 20 00 90 AD |         if_z    jmp     #.poll
3c3fc 359             |         end
3c3fc 359             | 
3c3fc 359 03 72 0F F2 |                 cmp     htmp, #KB_READY         wz
3c400 35a AC 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3c404 35b 14 00 90 AD |         if_z    jmp     #.poll
3c408 35c             | 
3c408 35c 05 72 0F F2 |                 cmp     htmp, #KBM_READY        wz
3c40c 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3c410 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3c414 35f AC 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3c418 360             |         if HAVE_MOUSE
3c418 360 44 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3c41c 361             |         else
3c41c 361             |         end
3c41c 361             | 
3c41c 361             | .poll
3c41c 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3c420 362 2D EC 63 FD |                 call    pa
3c424 363             | .skip_poll
3c424 363             | 
3c424 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3c428 364             | 
3c428 364             | .nopoll
3c428 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3c42c 365 44 00 90 AD |         if_z    jmp     #hsuspend
3c430 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3c434 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3c438 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3c43c 369 1A 86 63 FD |                 getct   hr0
3c440 36a B3 87 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3c444 36b             |         if ACTIVITY_LED >= 0
3c444 36b             |         end
3c444 36b 1A 66 63 3D |         if_ae   getct   _pulse_time_
3c448 36c B2 67 03 31 |         if_ae   add     _pulse_time_, _500ms_
3c44c 36d 5C FF 9F FD |                 jmp     #hidle
3c450 36e             | ' Check for extended SE0 state on the bus
3c450 36e             | .se0_test
3c450 36e A8 99 02 F6 |                 mov     hctwait, _1ms_
3c454 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3c458 370 22 A7 82 FA |                 rqpin   urx, dm
3c45c 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3c460 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3c464 373 24 F6 BF FD |                 call    #wait_txn_ok
3c468 374 00 00 80 FF 
3c46c 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3c470 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3c470 376 94 FE 9F FD |                 jmp     #discon_entry                   ' Device disconnected
3c474 377             | 
3c474 377             | hsuspend
3c474 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3c478 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3c47c 379 1F 54 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3c480 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3c484 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3c488 37c 00 98 07 F6 |                 mov     mod_cnt, #0
3c48c 37d             | 
3c48c 37d             |                 ' Fall through to resume wait loop
3c48c 37d             | 
3c48c 37d             | hwait_resume
3c48c 37d 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3c490 37e 02 88 47 F0 |                 shr     hr1, #2
3c494 37f 1F 88 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3c498 380             |         if ACTIVITY_LED >= 0
3c498 380             |         end
3c498 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3c49c 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3c4a0 382 14 72 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3c4a4 383 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
3c4a8 384 18 00 90 AD |         if_z    jmp     #.resume
3c4ac 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3c4b0 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3c4b4 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3c4b8 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3c4bc 389 22 6F 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3c4c0 38a 22 6B 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3c4c4 38b             | .resume
3c4c4 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3c4c8 38c 1F 5E 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3c4cc 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3c4d0 38e A3 73 03 F6 |                 mov     htmp, _ip_delay_ls_
3c4d4 38f 01 72 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3c4d8 390 1F 72 63 FD |                 waitx   htmp
3c4dc 391 22 07 28 FC |                 wypin   #OUT_J, dm
3c4e0 392 01 72 47 F0 |                 shr     htmp, #1
3c4e4 393 1F 72 63 FD |                 waitx   htmp
3c4e8 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c4ec 395 1A 92 62 FD |                 getct   iframe_ct_base
3c4f0 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3c4f4 397 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3c4f8 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3c4fc 399 AB 99 02 F6 |                 mov     hctwait, _4ms_
3c500 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3c504 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3c508 39c             | 
3c508 39c             | '------------------------------------------------------------------------------
3c508 39c             | ' Send preamble to enable low-speed HUB ports
3c508 39c             | '------------------------------------------------------------------------------
3c508 39c             | ' On entry:
3c508 39c             | ' On exit:
3c508 39c             | '   USB baud rate set to low-speed
3c508 39c             | '------------------------------------------------------------------------------
3c508 39c             | utx_pre
3c508 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3c50c 39d 40 46 62 FD |                 dirl    dp
3c510 39e 28 02 64 FD |                 setq    #1
3c514 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3c518 3a0 58 44 62 FD |                 drvl    dm
3c51c 3a1 59 46 62 FD |                 drvh    dp
3c520 3a2             | 
3c520 3a2 1E 00 00 FF 
3c524 3a3 80 72 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3c528 3a4             | 
3c528 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3c52c 3a5 01 72 57 F0 |                 shr     htmp, #1        wc
3c530 3a6 28 02 64 3D |         if_nc   setq    #1
3c534 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3c538 3a8 1F 4E 63 FD |                 waitx   _preamble_wait_
3c53c 3a9             | .l1
3c53c 3a9             | 
3c53c 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3c540 3aa 40 46 62 FD |                 dirl    dp
3c544 3ab 28 02 64 FD |                 setq    #1
3c548 3ac 80 00 80 FF 
3c54c 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3c550 3ae 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3c554 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3c558 3b0 41 46 62 FD |                 dirh    dp
3c55c 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c560 3b2             | 
3c560 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3c564 3b3 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3c568 3b4 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3c56c 3b5             | 
3c56c 3b5             | hlut_end
3c56c 3b5             |                 fit     $400
3c56c 3b5             |                 fit     $400
3c56c 3b5             |                 orgh
3c56c                 | if OVERLAP_MEMORY
3c56c                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3c56c                 | end
3c56c                 | '------------------------------------------------------------------------------
3c56c                 | ' Routines called from cog space.
3c56c                 | '------------------------------------------------------------------------------
3c56c                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3c56c                 | '------------------------------------------------------------------------------
3c56c                 | 
3c56c                 | '------------------------------------------------------------------------------
3c56c                 | ' USB host cog initialization.
3c56c                 | '------------------------------------------------------------------------------
3c56c                 | usb_host_init
3c56c                 |                 ' Initialize buffer pointers
3c56c                 |         if OVERLAP_MEMORY
3c56c                 |         else
3c56c     4C 15 B0 FE |                 loc     pb, #hid_descr
3c570                 |         end
3c570     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3c574                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3c574                 |                 {
3c574                 |                 }
3c574                 |         
3c574                 |                 {
3c574                 |                 }
3c574                 |                 'loc     pb,#hkbd_report
3c574                 |                 'mov     hkbd_report_p,pb
3c574                 | 
3c574     44 1D B0 FE |                 loc     pb, #hub_descr
3c578     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3c57c     59 1D B0 FE |                 loc     pb, #urx_buff
3c580     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3c584     D1 1D B0 FE |                 loc     pb, #dev_desc_buff
3c588     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3c58c     DB 1D B0 FE |                 loc     pb, #con_desc_buff
3c590     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3c594     24 15 B0 FE |                 loc     pb, #usb_cache_start
3c598     F7 55 02 F6 |                 mov     cache_start_p, pb
3c59c     25 1D B0 FE |                 loc     pb, #usb_cache_end
3c5a0     F7 57 02 F6 |                 mov     cache_end_p, pb
3c5a4                 | 
3c5a4                 |         if ERROR_LED >= 0
3c5a4                 |         end
3c5a4                 | 
3c5a4                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3c5a4                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3c5a4                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3c5a4                 | ' Configure and enable the Serial Host USB port.
3c5a4     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3c5a8                 | 
3c5a8                 | '------------------------------------------------------------------------------
3c5a8                 | ' Timing calculations happen before any interrupt(s) are enabled.
3c5a8                 | '------------------------------------------------------------------------------
3c5a8                 | ' On entry:
3c5a8                 | '   htmp - current CLKFREQ value.
3c5a8                 | '------------------------------------------------------------------------------
3c5a8                 | hinit_usb_timings
3c5a8                 | '                getct   htmp2
3c5a8     B9 59 02 F6 |                 mov     save_sysclk, htmp
3c5ac     8D 5B 80 FF 
3c5b0     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3c5b4     18 32 63 FD |                 getqx   _12Mbps_
3c5b8     10 32 57 F0 |                 shr     _12Mbps_, #16           wc
3c5bc     00 32 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3c5c0     03 6E 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3c5c4     0E 6E 67 F0 |                 shl     _usb_h_fs_nco_, #14
3c5c8     99 6F 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3c5cc     01 70 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3c5d0     0E 70 67 F0 |                 shl     _usb_d_fs_nco_, #14
3c5d4     99 71 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3c5d8     99 35 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3c5dc     03 34 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3c5e0     02 6A 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3c5e4     0E 6A 67 F0 |                 shl     _usb_h_ls_nco_, #14
3c5e8     9A 6B 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3c5ec     9A 6D 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3c5f0     80 00 00 FF 
3c5f4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3c5f8     18 2E 63 FD |                 getqx   _var_64_lower_
3c5fc     19 30 63 FD |                 getqy   _var_64_upper_
3c600     28 2E 63 FD |                 setq    _var_64_lower_
3c604     65 CD 1D FF 
3c608     00 30 27 FD |                 qfrac   _var_64_upper_, ##_1b
3c60c     18 36 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3c610     01 00 00 FF 
3c614     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3c618     18 2E 63 FD |                 getqx   _var_64_lower_
3c61c     19 30 63 FD |                 getqy   _var_64_upper_
3c620     28 2E 63 FD |                 setq    _var_64_lower_
3c624     A1 07 00 FF 
3c628     40 30 27 FD |                 qfrac   _var_64_upper_, ##_1m
3c62c     18 38 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3c630     9C 7D 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3c634     09 38 57 F0 |                 shr     _1us_, #9               wc
3c638     00 38 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3c63c     0A 7C 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3c640     18 3A 63 FD |                 getqx   _10us_
3c644     09 3A 57 F0 |                 shr     _10us_, #9              wc
3c648     00 3A 27 F1 |                 addx    _10us_, #0                      ' 10us
3c64c     21 7C 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3c650     18 3C 63 FD |                 getqx   _33us_
3c654     09 3C 57 F0 |                 shr     _33us_, #9              wc
3c658     00 3C 27 F1 |                 addx    _33us_, #0                      ' 33us
3c65c     FA 7C 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3c660     18 3E 63 FD |                 getqx   _txn_err_
3c664     09 3E 57 F0 |                 shr     _txn_err_, #9           wc
3c668     00 3E 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3c66c     F4 7D 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3c670     18 40 63 FD |                 getqx   _500us_
3c674     09 40 57 F0 |                 shr     _500us_, #9             wc
3c678     00 40 27 F1 |                 addx    _500us_, #0                     ' 500us
3c67c     01 00 00 FF 
3c680     9A 7C 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3c684     18 42 63 FD |                 getqx   _txn_ok_ls_
3c688     09 42 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3c68c     00 42 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3c690     01 00 00 FF 
3c694     52 7D 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3c698     18 44 63 FD |                 getqx   _txn_ok_fs_
3c69c     09 44 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3c6a0     00 44 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3c6a4     9B 47 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3c6a8     05 00 00 FF 
3c6ac     80 46 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3c6b0     10 46 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3c6b4     00 46 27 F1 |                 addx    _ip_delay_ls_, #0
3c6b8     9B 4B 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3c6bc     1C 00 00 FF 
3c6c0     C0 4B 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3c6c4     10 4A 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3c6c8     00 4A 27 F1 |                 addx    _tat_wait_ls_, #0
3c6cc     9B 49 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3c6d0     00 00 00 FF 
3c6d4     4E 49 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3c6d8     10 48 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3c6dc     00 48 27 F1 |                 addx    _ip_delay_fs_, #0
3c6e0     9B 4D 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3c6e4     04 00 00 FF 
3c6e8     23 4D 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3c6ec     10 4C 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3c6f0     00 4C 27 F1 |                 addx    _tat_wait_fs_, #0
3c6f4     8D 5B 00 FF 
3c6f8     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3c6fc     18 4E 63 FD |                 getqx   _preamble_wait_
3c700     08 4E 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3c704     01 00 00 FF 
3c708     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3c70c     18 2E 63 FD |                 getqx   _var_64_lower_
3c710     19 30 63 FD |                 getqy   _var_64_upper_
3c714     28 2E 63 FD |                 setq    _var_64_lower_
3c718     01 00 00 FF 
3c71c     E8 31 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3c720     18 50 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3c724     09 50 57 F0 |                 shr     _1ms_, #9               wc
3c728     00 50 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3c72c     FF FF 7F FF 
3c730     F2 69 07 F6 |                 mov     _frame1ms_clks_, ##-14
3c734     A8 69 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3c738     A8 53 03 F6 |                 mov     _2ms_, _1ms_
3c73c     01 52 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3c740     A8 55 03 F6 |                 mov     _suspend_wait_, _1ms_
3c744     A8 55 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3c748     A8 57 03 F6 |                 mov     _4ms_, _1ms_
3c74c     02 56 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3c750     AB 59 03 F6 |                 mov     _xfer_wait_, _4ms_
3c754     A8 59 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3c758     AC 5D 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3c75c     AE 5F 03 F6 |                 mov     _resume_hold_, _reset_hold_
3c760     02 5E 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3c764     AF 63 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3c768     01 62 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3c76c     A8 5B 03 F6 |                 mov     _8ms_, _1ms_
3c770     03 5A 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3c774     01 5C 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3c778     AE 63 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3c77c     AC 5D 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3c780     AC 61 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3c784     02 60 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3c788     A8 61 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3c78c     B1 65 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3c790     01 62 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3c794     03 64 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3c798     B1 65 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3c79c                 | '        _ret_   mov     _1sec_, save_sysclk
3c79c                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3c79c                 | '                ret
3c79c                 | {
3c79c                 | }
3c79c                 | 
3c79c                 | '------------------------------------------------------------------------------
3c79c                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3c79c                 | ' one. If it is, start the task progression that will configure the device for
3c79c                 | ' use.
3c79c                 | '------------------------------------------------------------------------------
3c79c                 | ' On entry:
3c79c                 | '   hconfig_base - start address of the cached config descriptor chain.
3c79c                 | ' On exit:
3c79c                 | '------------------------------------------------------------------------------
3c79c                 | hparse_con_desc
3c79c     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3c7a0     82 73 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3c7a4     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3c7a8     4E 72 FF F9 |                 movbyts htmp,#%%1032
3c7ac     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3c7b0                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3c7b0                 | 
3c7b0     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3c7b4     6E ED 03 F1 |                 add     pa, hconfig_base
3c7b8     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3c7bc                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3c7bc                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3c7bc                 | ' that defines a keyboard and/or mouse.
3c7bc     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3c7c0                 | .next_intf
3c7c0     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3c7c4     B8 01 90 3D |         if_ae   jmp     #hset_config
3c7c8     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3c7cc     75 F3 03 F1 |                 add     ptrb, hnext_desc
3c7d0     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3c7d4     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3c7d8     0C 00 90 AD |         if_z    jmp     #.intf
3c7dc     80 73 C7 FA |                 rdbyte  htmp, ptrb
3c7e0     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3c7e4     D8 FF 9F FD |                 jmp     #.next_intf
3c7e8                 | .intf
3c7e8     00 90 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3c7ec     00 92 07 F6 |                 mov     hpar3, #0
3c7f0     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3c7f4     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3c7f8     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3c7fc     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3c800                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3c800                 | 
3c800                 | .endp
3c800     80 73 C7 FA |                 rdbyte  htmp, ptrb
3c804     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3c808     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3c80c     78 00 90 3D |         if_ae   jmp     #.get_device
3c810     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3c814     75 F3 03 F1 |                 add     ptrb, hnext_desc
3c818     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3c81c     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3c820     64 00 90 AD |         if_z    jmp     #.get_device
3c824     05 72 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3c828     04 00 90 AD |         if_z    jmp     #.get_ep
3c82c     D0 FF 9F FD |                 jmp     #.endp
3c830                 | .get_ep
3c830     82 89 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3c834     07 88 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3c838     0F 88 67 F0 |                 shl     hr1, #8 + 7
3c83c     6C 73 03 F6 |                 mov     htmp, hctrl_ep_addr
3c840     3F 00 00 FF 
3c844     00 73 07 F5 |                 and     htmp, ##ADDR_MASK
3c848     C4 73 43 F5 |                 or      htmp, hr1                       ' endpoint address
3c84c     00 90 0F F2 |                 cmp     hpar2, #0               wz
3c850     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3c854     00 92 0F F2 |                 cmp     hpar3, #0               wz
3c858     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3c85c     A0 FF 9F FD |                 jmp     #.endp
3c860                 | .in_ep
3c860     B9 91 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3c864     84 8B C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3c868                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3c868     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3c86c     C3 8B DB F8 |                 setbyte hr2, hr0, #3
3c870     8C FF 9F FD |                 jmp     #.endp
3c874                 | .out_ep
3c874     B9 93 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3c878     84 8D C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3c87c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3c87c     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3c880     C3 8D DB F8 |                 setbyte hr3, hr0, #3
3c884     78 FF 9F FD |                 jmp     #.endp
3c888                 | 
3c888                 | .get_device
3c888     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3c88c     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3c890     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3c894     64 00 90 AD |         if_z    jmp     #.gamepad
3c898     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3c89c     A8 00 90 AD |         if_z    jmp     #.hub
3c8a0     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3c8a4     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3c8a8     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3c8ac     4C 00 90 AD |         if_z    jmp     #.gamepad
3c8b0     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3c8b4     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3c8b8                 | .keyboard
3c8b8     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3c8bc                 |         if HAVE_MOUSE
3c8bc     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3c8c0                 |         else
3c8c0                 |         end
3c8c0     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3c8c4     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
3c8c8     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c8cc     C5 71 FA F8 |                 getbyte kb_interval, hr2, #3
3c8d0     C5 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3c8d4     C8 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3c8d8                 |                 'debug(udec(kb_intf_num))
3c8d8                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3c8d8     E4 FE 9F FD |                 jmp     #.next_intf
3c8dc                 | if HAVE_MOUSE
3c8dc                 | .mouse
3c8dc     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3c8e0     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3c8e4     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3c8e8     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
3c8ec     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c8f0                 |                 'getbyte ms_interval, hr2, #3
3c8f0     C5 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3c8f4     C8 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3c8f8                 |                 'debug(udec(kb_intf_num))
3c8f8                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3c8f8     C4 FE 9F FD |                 jmp     #.next_intf
3c8fc                 | end
3c8fc                 | .gamepad
3c8fc     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
3c900     C8 73 63 F5 |                 xor     htmp, hpar2
3c904     3F 00 00 FF 
3c908     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c90c     B0 FE 9F AD |         if_z    jmp     #.next_intf
3c910                 |         if HAVE_MOUSE
3c910     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
3c914     C8 73 63 F5 |                 xor     htmp, hpar2
3c918     3F 00 00 FF 
3c91c     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c920     9C FE 9F AD |         if_z    jmp     #.next_intf
3c924                 |         end
3c924     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3c928     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3c92c     90 FE 9F 5D |         if_nz   jmp     #.next_intf
3c930                 | 
3c930     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c934     C5 7B FA F8 |                 getbyte gp_interval, hr2, #3
3c938     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c93c     C8 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3c940     C9 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3c944                 |                 'debug(udec(gp_intf_num))
3c944                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3c944     78 FE 9F FD |                 jmp     #.next_intf
3c948                 | .hub
3c948     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3c94c     70 FE 9F 5D |         if_nz   jmp     #.next_intf
3c950     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3c954     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3c958     64 FE 9F 5D |         if_nz   jmp     #.next_intf
3c95c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3c960     5C FE 9F 5D |         if_nz   jmp     #.next_intf
3c964     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3c968     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3c96c     C8 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3c970     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c974     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3c978     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3c97c                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3c97c     40 FE 9F FD |                 jmp     #.next_intf
3c980                 | 
3c980                 | '------------------------------------------------------------------------------
3c980                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3c980                 | ' it according to its function, or functions. In the case of this boot protocol
3c980                 | ' keyboard/mouse class driver:
3c980                 | ' - SetConfiguration(config_num)
3c980                 | ' - SetProtocol(boot)
3c980                 | ' - SetIdle(indefinite)
3c980                 | ' - Enter the device interrupt IN polling task stage.
3c980                 | '------------------------------------------------------------------------------
3c980                 | ' On entry:
3c980                 | ' On exit:
3c980                 | '------------------------------------------------------------------------------
3c980                 | hset_config
3c980                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3c980                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3c980     02 76 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3c984     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c988     00 00 0C F2 |                 cmp     0-0, #0                 wz
3c98c     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3c990                 |         if HAVE_MOUSE
3c990     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3c994                 |         end
3c994     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3c998     60 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3c99c                 | .set_config
3c99c     74 0E D0 FE |                 loc     ptra, #set_config
3c9a0     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3c9a4     6E ED 03 F1 |                 add     pa, hconfig_base
3c9a8     F6 8F C3 FA |                 rdbyte  hpar1, pa
3c9ac                 |                 debug("SetConfiguration: ",udec_(hpar1))
3c9ac     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3c9b0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3c9b4     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3c9b8     A0 02 A0 FD |                 call    #control_write
3c9bc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c9c0     2D 00 64 5D |         if_nz   ret
3c9c4                 | .kbd_config
3c9c4     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3c9c8     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3c9cc                 | 
3c9cc     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
3c9d0     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3c9d4     3F 00 00 FF 
3c9d8     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c9dc     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3c9e0                 | 
3c9e0     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3c9e4     3C 0E D0 FE |                 loc     ptra, #set_protocol
3c9e8     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3c9ec     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3c9f0     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3c9f4     A0 02 A0 FD |                 call    #control_write
3c9f8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c9fc     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3ca00     F8 02 90 5D |         if_nz   jmp     #.notify_client
3ca04     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3ca08     37 91 E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3ca0c     44 03 B0 FD |                 call    #hset_idle
3ca10                 |                 'cmp     retval, #PID_ACK        wz
3ca10                 |         'if_nz   mov     hkbd_ep_addr, #0
3ca10                 |         'if_nz   jmp     #.notify_client
3ca10     A9 99 02 F6 |                 mov     hctwait, _2ms_
3ca14     EF 02 A0 FD |                 call    #poll_waitx
3ca18     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3ca1c                 |         if NUMLOCK_DEFAULT_STATE && RPI_KEYBOARD_NUMLOCK_HACK
3ca1c                 |         end
3ca1c     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3ca20     A0 17 90 FE |                 loc     pa, #hkbd_led_rep
3ca24     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3ca28     40 03 B0 FD |                 call    #hset_kbdled_report
3ca2c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ca30     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3ca34     C4 02 90 5D |         if_nz   jmp     #.notify_client
3ca38     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3ca3c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3ca40     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3ca44     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3ca48     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3ca4c     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3ca50     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3ca54     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3ca58     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3ca5c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3ca60     03 76 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3ca64                 |         if !!HAVE_MOUSE
3ca64                 |         end
3ca64                 | 
3ca64                 | .mouse_config
3ca64                 | if HAVE_MOUSE
3ca64     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3ca68     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3ca6c     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
3ca70     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3ca74     3F 00 00 FF 
3ca78     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3ca7c     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3ca80                 | 
3ca80                 |                 debug("mouse passed addr check")
3ca80                 | 
3ca80     B8 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3ca84     00 00 80 FF 
3ca88     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3ca8c     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3ca90     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3ca94     55 02 A0 FD |                 call    #control_read
3ca98     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ca9c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3caa0     58 02 90 5D |         if_nz   jmp     #.notify_client
3caa4     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3caa8     56 01 00 F6 |                 mov     0-0, total_data
3caac     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3cab0                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3cab0                 | 
3cab0     35 73 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3cab4     6C 0D D0 FE |                 loc     ptra, #set_protocol
3cab8     01 03 5C FC |                 wrword  #MOUSE_FULL_PROTOCOL ? REPORT_PROTOCOL : BOOT_PROTOCOL, ptra[wValue]
3cabc     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3cac0     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3cac4     A0 02 A0 FD |                 call    #control_write
3cac8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cacc     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3cad0     28 02 90 5D |         if_nz   jmp     #.notify_client
3cad4                 |                 debug("mouse passed SetProtocol")
3cad4     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3cad8     35 91 E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3cadc     74 02 B0 FD |                 call    #hset_idle
3cae0                 |                 'cmp     retval, #PID_ACK        wz
3cae0                 |         'if_nz   mov     hmouse_ep_addr, #0
3cae0                 |         'if_nz   jmp     #.notify_client
3cae0                 |                 debug("mouse passed SetIdle")
3cae0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3cae4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3cae8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3caec     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3caf0     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3caf4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3caf8     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3cafc     79 77 03 F6 |                 mov     htmp2, hkbd_ep_addr
3cb00     7A 77 63 F5 |                 xor     htmp2, hmouse_ep_addr
3cb04     3F 00 00 FF 
3cb08     00 77 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3cb0c     05 76 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3cb10     04 76 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3cb14     E4 01 90 FD |                 jmp     #.notify_client
3cb18                 | end
3cb18                 | .gamepad_config
3cb18                 | if _HAVE_GAMEPAD
3cb18     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3cb1c     00 00 0C F2 |                 cmp     0-0, #0                 wz
3cb20     6C 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3cb24     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3cb28     00 72 03 F6 |                 mov     htmp, 0-0
3cb2c     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3cb30     3F 00 00 FF 
3cb34     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3cb38     54 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3cb3c                 | 
3cb3c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3cb40     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3cb44     69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3cb48     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3cb4c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3cb50     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3cb54     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3cb58     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3cb5c     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3cb60     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3cb64     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3cb68     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3cb6c     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3cb70     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3cb74     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3cb78                 | 
3cb78                 |                 if EMUPAD_MAX_PLAYER > 0
3cb78                 |                 
3cb78                 | .rule_loop           
3cb78                 |                 end
3cb78                 | 
3cb78     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3cb7c     5C 00 90 AD |         if_e    jmp     #.xinput
3cb80     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3cb84     00 72 03 F6 |                 mov     htmp,0-0
3cb88     01 A6 02 FF 
3cb8c     68 72 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3cb90     8C 00 90 AD |         if_e    jmp     #.ps3
3cb94                 | 
3cb94     A4 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3cb98     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3cb9c     00 00 80 5F 
3cba0     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3cba4     03 00 80 AF 
3cba8     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3cbac     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3cbb0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3cbb4     55 02 A0 FD |                 call    #control_read
3cbb8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cbbc     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3cbc0     00 00 04 56 |         if_nz   mov     0-0, #0
3cbc4     34 01 90 5D |         if_nz   jmp     #.notify_client
3cbc8     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3cbcc     56 01 00 F6 |                 mov     0-0, total_data
3cbd0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3cbd4                 |                 debug(uhex(pb),udec(total_data),uhex_byte_array(pb,total_data))
3cbd4                 | 
3cbd4     06 76 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3cbd8     20 01 90 FD |                 jmp     #.notify_client
3cbdc                 | .xinput
3cbdc     B8 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3cbe0     2D EF 03 F6 |                 mov     pb,hdev_port
3cbe4     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3cbe8     03 EE 27 F3 |                 fle     pb,#3
3cbec     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3cbf0     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3cbf4                 | 
3cbf4     03 B0 06 F6 |                 mov     pkt_data, #3
3cbf8     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3cbfc     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3cc00                 |                 debug("XInput LED set ",uhex_long(ep_addr_pid),uhex_byte(pb))
3cc00     5A 00 A0 FD |                 call    #txn_out
3cc04     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3cc08                 | 
3cc08     97 0C D0 FE |                 loc     ptra, #xinp_fix_8bitdo
3cc0c     27 EF 03 F6 |                 mov     pb, urx_buff_p          ' We don't actually care where it goes
3cc10     55 02 A0 FD |                 call    #control_read           ' Execute GetDeviceDescriptor()
3cc14                 |                 debug("8bitdo weird fix... ",uhex(retval))
3cc14     D2 BE 06 F6 |                 mov retval,#PID_ACK             ' If we don't do this something else becomes sad (TODO fix?)
3cc18                 | 
3cc18                 | 
3cc18     07 76 07 F6 |                 mov     htmp2, #XINPUT_READY
3cc1c     DC 00 90 FD |                 jmp     #.notify_client
3cc20                 | .ps3
3cc20     44 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3cc24     2D EF 03 F6 |                 mov     pb,hdev_port
3cc28     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3cc2c     04 EE 27 F3 |                 fle     pb,#4
3cc30     F7 EF C3 F9 |                 decod   pb
3cc34     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3cc38                 | 
3cc38     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3cc3c     F4 0B D0 FE |                 loc     ptra, #set_report
3cc40     01 00 80 FF 
3cc44     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3cc48     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3cc4c     03 61 5C FC |                 wrword  #48, ptra[wLength]
3cc50     14 0C B0 FE |                 loc     pb, #ps3_command_buff
3cc54     A0 02 A0 FD |                 call    #control_write
3cc58                 | 
3cc58     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3cc5c     D4 0B D0 FE |                 loc     ptra, #set_report
3cc60     01 00 80 FF 
3cc64     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3cc68     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3cc6c     03 09 5C FC |                 wrword  #4, ptra[wLength]
3cc70     F0 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3cc74     A0 02 A0 FD |                 call    #control_write
3cc78     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3cc7c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3cc80     00 00 04 56 |         if_nz   mov     0-0, #0
3cc84     74 00 90 5D |         if_nz   jmp     #.notify_client
3cc88                 | 
3cc88     08 76 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3cc8c     6C 00 90 FD |                 jmp     #.notify_client
3cc90                 | end
3cc90                 | 
3cc90                 | .hub_config
3cc90     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3cc94     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3cc98     77 73 03 F6 |                 mov     htmp, hhub_ep_addr
3cc9c     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3cca0     3F 00 00 FF 
3cca4     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3cca8     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3ccac                 | 
3ccac     94 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3ccb0     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3ccb4     26 EF 03 F6 |                 mov     pb, hub_descr_p
3ccb8     55 02 A0 FD |                 call    #control_read
3ccbc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ccc0     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3ccc4     34 00 90 5D |         if_nz   jmp     #.notify_client
3ccc8                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3ccc8                 | 
3ccc8     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3cccc     02 79 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3ccd0     07 78 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3ccd4                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3ccd4                 | .pwr_loop
3ccd4     74 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3ccd8     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3ccdc     02 79 57 FC |                 wrword  htmp3, ptra[wIndex]
3cce0     A0 02 A0 FD |                 call    #control_write
3cce4     FB 79 6F FB |                 djnz    htmp3, #.pwr_loop
3cce8                 | 
3cce8     B2 99 02 F6 |                 mov     hctwait, _500ms_
3ccec     B1 99 02 F1 |                 add     hctwait, _100ms_
3ccf0     EF 02 A0 FD |                 call    #poll_waitx
3ccf4                 | 
3ccf4     09 76 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3ccf8     00 00 90 FD |                 jmp     #.notify_client
3ccfc                 | 
3ccfc                 | .notify_client
3ccfc     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3cd00     BB 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3cd04                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3cd04                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3cd04     2D 00 64 FD |                 ret
3cd08                 | 
3cd08                 | '------------------------------------------------------------------------------
3cd08                 | ' Initialize the keyboard/mouse data area to start-up values.
3cd08                 | '------------------------------------------------------------------------------
3cd08                 | ' On entry:
3cd08                 | ' On exit:
3cd08                 | '------------------------------------------------------------------------------
3cd08                 | init_kbdm_data
3cd08     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3cd0c     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3cd10                 | 
3cd10     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3cd14     2B ED 03 F6 |                 mov     pa, cache_end_p
3cd18                 | .loop
3cd18     61 01 4C FC |                 wrbyte  #0, ptra++
3cd1c     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3cd20     F4 FF 9F CD |         if_b    jmp     #.loop
3cd24                 |         
3cd24                 |         if EMUPAD_MAX_PLAYER > 0
3cd24                 |         end
3cd24                 | 
3cd24                 | 
3cd24     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3cd28                 | .regloop
3cd28     00 EC 8F F9 |                 altd    pa
3cd2c     00 00 04 F6 |                 mov     0-0, #0
3cd30     01 EC 07 F1 |                 add     pa, #1
3cd34     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3cd38     EC FF 9F 5D |         if_nz   jmp     #.regloop
3cd3c                 | 
3cd3c     E1 E1 61 FF 
3cd40     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3cd44     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3cd48     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3cd4c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3cd50                 | 
3cd50     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3cd54                 | 
3cd54                 | '------------------------------------------------------------------------------
3cd54                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3cd54                 | ' function.
3cd54                 | '------------------------------------------------------------------------------
3cd54                 | ' On entry:
3cd54                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3cd54                 | '   hpar2 - index number of the target interface.
3cd54                 | ' On exit:
3cd54                 | '------------------------------------------------------------------------------
3cd54                 | hset_idle
3cd54     A9 99 02 F6 |                 mov     hctwait, _2ms_
3cd58     EF 02 A0 FD |                 call    #poll_waitx
3cd5c     CC 0A D0 FE |                 loc     ptra, #set_idle
3cd60     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]
3cd64     02 91 57 FC |                 wrword  hpar2, ptra[wIndex]
3cd68     A0 02 80 FD |                 jmp     #control_write
3cd6c                 | 
3cd6c                 | '------------------------------------------------------------------------------
3cd6c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3cd6c                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3cd6c                 | '------------------------------------------------------------------------------
3cd6c                 | ' On entry:
3cd6c                 | '   ep_addr_pid - device address and enpoint for the request.
3cd6c                 | ' On exit:
3cd6c                 | '   retval - transaction result.
3cd6c                 | '------------------------------------------------------------------------------
3cd6c                 | hset_kbdled_report
3cd6c     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3cd70     C0 0A D0 FE |                 loc     ptra, #set_report
3cd74     01 00 80 FF 
3cd78     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3cd7c     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3cd80     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3cd84     27 EF 03 F6 |                 mov     pb, urx_buff_p
3cd88     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3cd8c     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3cd90                 | 
3cd90                 | '------------------------------------------------------------------------------
3cd90                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3cd90                 | '------------------------------------------------------------------------------
3cd90                 | ' On entry:
3cd90                 | ' On exit:
3cd90                 | '------------------------------------------------------------------------------
3cd90                 | hget_kbd_in_report
3cd90     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3cd94     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3cd98     30 93 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3cd9c     39 93 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3cda0     CF 02 A0 FD |                 call    #do_int_in
3cda4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cda8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3cdac                 | 
3cdac     00 92 0F F2 |                 cmp     hpar3, #0               wz
3cdb0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3cdb4                 | 
3cdb4     30 73 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3cdb8     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3cdbc     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3cdc0     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3cdc4                 | 
3cdc4     C9 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3cdc8     18 00 B0 FD |                 call    #hkbd_compare
3cdcc                 |         if EMUPAD_MAX_PLAYER > 0
3cdcc                 |         end
3cdcc                 | 
3cdcc                 | .led_check
3cdcc     3B 73 03 F6 |                 mov     htmp, kb_led_states
3cdd0     B9 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3cdd4     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3cdd8     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3cddc     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3cde0     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3cde4                 | 
3cde4                 | '------------------------------------------------------------------------------
3cde4                 | ' Compare current and previous keyboard data buffers for keypress changes.
3cde4                 | '------------------------------------------------------------------------------
3cde4                 | hkbd_compare
3cde4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3cde8     D0 13 F0 FE |                 loc     ptrb, #hkbd_report
3cdec     61 75 07 FB |                 rdlong  htmp1, ptra++
3cdf0     E1 77 07 FB |                 rdlong  htmp2, ptrb++
3cdf4     BB 75 0B F2 |                 cmp     htmp1, htmp2    wz
3cdf8     61 75 07 FB |                 rdlong  htmp1, ptra++
3cdfc     E1 77 07 FB |                 rdlong  htmp2, ptrb++
3ce00     BB 75 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3ce04     2D 00 64 AD |         if_z    ret
3ce08                 | 
3ce08     B0 13 D0 FE |                 loc     ptra, #hkbd_report
3ce0c                 | 
3ce0c                 |                 ' Handle modifiers
3ce0c     27 91 C3 FA |                 rdbyte  hpar2, urx_buff_p
3ce10     00 89 C7 FA |                 rdbyte  hr1, ptra
3ce14     C8 89 43 F9 |                 rolword hr1,hpar2,#0
3ce18     63 88 63 FD |                 mergew  hr1
3ce1c     08 EC 07 F6 |                 mov     pa,#8
3ce20                 | .modloop
3ce20     6A 88 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3ce24     E8 8E 07 F6 |                 mov     hpar1,#$E8
3ce28     F6 8F 83 F1 |                 sub     hpar1,pa
3ce2c     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3ce30     FB ED 6F FB |                 djnz    pa,#.modloop
3ce34                 | 
3ce34     6F E0 75 FD | .release        modc    _set    wc
3ce38                 |                 'alts    hdev_port, #hid_report_p
3ce38                 |                 'mov     ptra, hid_report_p
3ce38     02 F0 07 F1 |                 add     ptra, #2
3ce3c     06 EC 07 F6 |                 mov     pa, #6
3ce40     61 8F CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3ce44     20 00 90 AD |         if_z    jmp     #.rl3
3ce48     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3ce4c     02 F2 07 F1 |                 add     ptrb, #2
3ce50     06 EE 07 F6 |                 mov     pb, #6
3ce54     E1 73 C7 FA | .rl2            rdbyte  htmp, ptrb++
3ce58     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
3ce5c     08 00 90 AD |         if_z    jmp     #.rl3
3ce60     FC EF 6F FB |                 djnz    pb, #.rl2
3ce64     68 00 B0 FD |                 call    #hkbd_translate
3ce68     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3ce6c                 | 
3ce6c     00 92 07 F6 |                 mov     hpar3, #0
3ce70     1F 92 27 F4 |                 bith    hpar3, #31
3ce74                 | 
3ce74     6F 00 74 FD | .press          modc    _clr    wc
3ce78     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3ce7c     02 F0 07 F1 |                 add     ptra, #2
3ce80     06 EC 07 F6 |                 mov     pa, #6
3ce84     61 8F CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3ce88     20 00 90 AD |         if_z    jmp     #.pl3
3ce8c     2C 13 F0 FE |                 loc     ptrb, #hkbd_report
3ce90     02 F2 07 F1 |                 add     ptrb, #2
3ce94     06 EE 07 F6 |                 mov     pb, #6
3ce98     E1 73 C7 FA | .pl2            rdbyte  htmp, ptrb++
3ce9c     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
3cea0     08 00 90 AD |         if_z    jmp     #.pl3
3cea4     FC EF 6F FB |                 djnz    pb, #.pl2
3cea8     24 00 B0 FD |                 call    #hkbd_translate
3ceac     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3ceb0                 | 
3ceb0     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3ceb4     04 13 F0 FE |                 loc     ptrb, #hkbd_report
3ceb8     28 02 64 FD |                 setq #1
3cebc     61 75 07 FB |                 rdlong  htmp1, ptra++
3cec0     28 02 64 FD |                 setq #1
3cec4     E1 75 67 FC |                 wrlong  htmp1, ptrb++
3cec8     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3cecc                 | 
3cecc     2D 00 64 FD |                 ret
3ced0                 | 
3ced0                 | '------------------------------------------------------------------------------
3ced0                 | ' Translate keyboard scancode to ASCII
3ced0                 | '------------------------------------------------------------------------------
3ced0                 | ' On entry:
3ced0                 | '   hpar1 - scancode
3ced0                 | '   hpar2 - key modifiers state
3ced0                 | '       c - pressed (0) or released (1) flag
3ced0                 | ' On exit:
3ced0                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3ced0                 | '               30..17 = unused
3ced0                 | '                   18 = scroll-lock state 
3ced0                 | '                   17 = caps-lock state
3ced0                 | '                   16 = num-lock state 
3ced0                 | '                15..8 = key modifiers state
3ced0                 | '                 7..0 = scancode
3ced0                 | '------------------------------------------------------------------------------
3ced0                 | hkbd_translate
3ced0     39 8E 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3ced4     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3ced8     53 8E 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3cedc     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3cee0     47 8E 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3cee4     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3cee8                 | 
3cee8                 |         if EMUPAD_MAX_PLAYER > 0
3cee8                 | 
3cee8                 |         if EMUPAD_BT0_BIT >= 0
3cee8                 |         end
3cee8                 |         if EMUPAD_BT1_BIT >= 0
3cee8                 |         end
3cee8                 |         if EMUPAD_BT2_BIT >= 0
3cee8                 |         end
3cee8                 |         if EMUPAD_BT3_BIT >= 0
3cee8                 |         end
3cee8                 |         if EMUPAD_BT4_BIT >= 0
3cee8                 |         end
3cee8                 |         if EMUPAD_BT5_BIT >= 0
3cee8                 |         end
3cee8                 |         if EMUPAD_BT6_BIT >= 0
3cee8                 |         end
3cee8                 |         if EMUPAD_BT7_BIT >= 0
3cee8                 |         end
3cee8                 |         if EMUPAD_BT8_BIT >= 0
3cee8                 |         end
3cee8                 |         if EMUPAD_BT9_BIT >= 0
3cee8                 |         end
3cee8                 | 
3cee8                 |         end
3cee8     C8 8F CB F8 |                 setbyte hpar1, hpar2, #1
3ceec     7C 8F D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3cef0     1F 8E 47 F4 |                 bitc    hpar1, #31
3cef4                 |         if KEYQUEUE_SIZE > 0
3cef4     C0 09 B0 FE |                 loc pb,#keyq_head
3cef8     F7 73 E3 FA |                 rdword htmp,pb
3cefc     B9 75 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3cf00     B9 73 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3cf04     B9 77 03 F6 |                 mov htmp2,htmp
3cf08     04 76 07 FA |                 mul htmp2,#4
3cf0c     F7 77 03 F1 |                 add htmp2,pb
3cf10     02 76 07 F1 |                 add htmp2,#2
3cf14     7F 72 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3cf18     B9 75 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3cf1c     BB 8F 63 5C |         if_nz   wrlong hpar1,htmp2
3cf20     F7 73 43 5C |         if_nz   wrbyte htmp,pb
3cf24                 |         end
3cf24     2D 00 7C FD |                 ret wcz
3cf28                 | 
3cf28                 | if HAVE_MOUSE
3cf28                 | '------------------------------------------------------------------------------
3cf28                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3cf28                 | '------------------------------------------------------------------------------
3cf28                 | ' On entry:
3cf28                 | ' On exit:
3cf28                 | '------------------------------------------------------------------------------
3cf28                 | hget_mouse_in_report
3cf28     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3cf2c     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3cf30     30 93 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3cf34     36 93 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3cf38     CF 02 A0 FD |                 call    #do_int_in
3cf3c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cf40     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3cf44                 | 
3cf44     00 92 0F F2 |                 cmp     hpar3, #0               wz
3cf48     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3cf4c                 | 
3cf4c     30 73 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3cf50     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3cf54     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3cf58     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3cf5c                 | 
3cf5c                 |         'debug(uhex_byte_array(urx_buff_p,hpar3))
3cf5c                 | 
3cf5c                 |         if MOUSE_FULL_PROTOCOL
3cf5c     C8 00 B0 FD |                 call #hid_decode
3cf60                 |         else
3cf60                 |         end
3cf60                 | 
3cf60     48 09 90 FE |                 loc     pa, #mouse_limits
3cf64     5D 13 F0 FE |                 loc     ptrb, #mouse_xacc
3cf68                 | 
3cf68                 |                 ' load xacc,yacc,zacc
3cf68     28 04 64 FD |                 setq    #3-1
3cf6c     80 89 07 FB |                 rdlong  hr1,ptrb
3cf70                 |                 ' load limits and outptr
3cf70     28 04 64 FD |                 setq    #3-1
3cf74     F6 75 03 FB |                 rdlong  htmp1,pa
3cf78                 | 
3cf78                 |         if MOUSE_FULL_PROTOCOL
3cf78     8C 19 47 FC |                 wrbyte  hidr_buttons, ptrb[12]
3cf7c                 |         else
3cf7c                 |                 { ' Currently not used
3cf7c                 |                 '}
3cf7c                 |         end
3cf7c                 | 
3cf7c                 |         if MOUSE_FULL_PROTOCOL
3cf7c     88 73 33 F9 |                 getword htmp, hidr_axis+0, #0
3cf80     0F 72 67 F7 |                 signx   htmp, #15
3cf84                 |         else
3cf84                 |         end
3cf84     B9 89 03 F1 |                 add     hr1,htmp
3cf88     00 74 0F F2 |                 cmp     htmp1,#0 wz
3cf8c     BA 89 63 53 |         if_ne   fles    hr1,htmp1
3cf90     00 88 47 53 |         if_ne   fges    hr1,#0
3cf94                 | 
3cf94                 |         if MOUSE_FULL_PROTOCOL
3cf94     88 73 3B F9 |                 getword htmp, hidr_axis+0, #1
3cf98     0F 72 67 F7 |                 signx   htmp, #15
3cf9c                 |         else
3cf9c                 |         end
3cf9c     B9 8B 03 F1 |                 add     hr2,htmp
3cfa0     00 76 0F F2 |                 cmp     htmp2,#0 wz
3cfa4     BB 8B 63 53 |         if_ne   fles    hr2,htmp2
3cfa8     00 8A 47 53 |         if_ne   fges    hr2,#0
3cfac                 |                 
3cfac                 |         if MOUSE_FULL_PROTOCOL
3cfac     8B 73 3B F9 |                 getword htmp, hidr_axis+3, #1           ' Mouse wheel is actually on the "wheel axis"
3cfb0     0F 72 67 F7 |                 signx   htmp, #15
3cfb4     B9 8D 03 F1 |                 add     hr3, htmp
3cfb8                 |         else    
3cfb8                 |         end
3cfb8                 | 
3cfb8     90 73 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3cfbc     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3cfc0                 | 
3cfc0                 |                 ' write back accumulators
3cfc0     28 04 64 FD |                 setq    #3-1
3cfc4     80 89 67 FC |                 wrlong  hr1,ptrb
3cfc8                 |                 ' if outptr set, write X/Y words
3cfc8     00 78 0F F2 |                 cmp htmp3,#0                    wz
3cfcc     C5 89 2B 59 |         if_nz   setword hr1,hr2,#1
3cfd0     BC 89 63 5C |         if_nz   wrlong hr1,htmp3
3cfd4     2D 00 64 FD |                 ret
3cfd8                 | end
3cfd8                 | 
3cfd8                 | '------------------------------------------------------------------------------
3cfd8                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3cfd8                 | '------------------------------------------------------------------------------
3cfd8                 | ' On entry:
3cfd8                 | ' On exit:
3cfd8                 | '------------------------------------------------------------------------------
3cfd8                 | if _HAVE_GAMEPAD
3cfd8                 | hget_gp_in_report
3cfd8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3cfdc     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3cfe0                 | 
3cfe0     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3cfe4     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3cfe8     00 92 E3 F8 |                 getbyte hpar3
3cfec     FF 92 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3cff0     CF 02 A0 FD |                 call    #do_int_in
3cff4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cff8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3cffc                 | 
3cffc     00 92 0F F2 |                 cmp     hpar3, #0               wz
3d000     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3d004                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3d004                 | 
3d004     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3d008     00 72 E3 F8 |                 getbyte htmp                            ' |
3d00c     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3d010     4B 72 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3d014     C3 72 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3d018     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3d01c     B9 01 C0 F8 |                 setbyte htmp                            ' |
3d020                 | 
3d020                 | ' Note: the following code compares the current and previous reports
3d020                 | ' and process the data if there are changes to ease the debug output.
3d020                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3d020                 | ' gpPreReport buffer.
3d020                 | 
3d020                 |                 ' ----- start of block to remove
3d020                 |                 {
3d020                 |                 }
3d020                 |                 ' ----- end of block to remove
3d020     14 05 90 FE |                 loc pa,#hpad_translate
3d024     2A EC 63 FD |                 push pa
3d028                 | 
3d028                 |                 ' FALL THROUGH !!!!
3d028                 | end
3d028                 | if _HAVE_GAMEPAD || MOUSE_FULL_PROTOCOL
3d028                 | '------------------------------------------------------------------------------
3d028                 | ' Decode controller report
3d028                 | '------------------------------------------------------------------------------
3d028                 | hid_decode
3d028                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3d028     28 20 64 FD |                 setq #(hidr_end-hidr_start)-1
3d02c     00 04 00 FF 
3d030     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3d034                 | 
3d034     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3d038                 | 
3d038     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3d03c     00 1C E3 F8 |                 getbyte hidr_type
3d040                 |         if _HAVE_GAMEPAD
3d040     07 1C 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3d044     08 03 90 AD |         if_z    jmp     #hpad_xinput
3d048     08 1C 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3d04c     EC 03 90 AD |         if_z    jmp     #hpad_ps3
3d050                 |         end
3d050     05 1C 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3d054     04 1C 07 A6 |         if_z    mov     hidr_type,#M_READY
3d058     04 1C 0F F2 |                 cmp     hidr_type, #M_READY             wz
3d05c                 |                 
3d05c                 | 
3d05c                 | '------------------------------------------------------------------------------
3d05c                 | ' Handle HID controller (or mouse now
3d05c                 | ' On entry:
3d05c                 | '   ptrb - controller report
3d05c                 | '------------------------------------------------------------------------------
3d05c                 | hpad_hid
3d05c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3d060     F7 F1 03 F6 |                 mov     ptra, pb
3d064     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3d068     00 EC 03 F6 |                 mov     pa, 0-0
3d06c                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3d06c     19 2A 3B FF 
3d070     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3d074                 | 
3d074                 | .next
3d074     00 EC 5F F2 |                 cmps    pa, #0      wcz
3d078     2D 00 7C ED |         if_be   ret     wcz
3d07c                 | 
3d07c     61 8F C7 FA |                 rdbyte  hpar1, ptra++
3d080     01 EC 87 F1 |                 sub     pa, #1
3d084     00 90 07 F6 |                 mov     hpar2, #0
3d088                 | 
3d088     C7 73 03 F6 |                 mov     htmp, hpar1
3d08c     03 72 07 F5 |                 and     htmp, #$03
3d090     01 72 0F F2 |                 cmp     htmp, #1    wz
3d094     61 91 C7 AA |         if_z    rdbyte  hpar2, ptra++
3d098     07 90 67 A7 |         if_z    signx   hpar2,#7
3d09c     01 EC 87 A1 |         if_z    sub     pa, #1
3d0a0     02 72 0F F2 |                 cmp     htmp, #2    wz
3d0a4     61 91 E7 AA |         if_z    rdword  hpar2, ptra++
3d0a8     0F 90 67 A7 |         if_z    signx   hpar2,#15
3d0ac     02 EC 87 A1 |         if_z    sub     pa, #2
3d0b0     03 72 0F F2 |                 cmp     htmp, #3    wz
3d0b4     61 91 07 AB |         if_z    rdlong  hpar2, ptra++
3d0b8     04 EC 87 A1 |         if_z    sub     pa, #4
3d0bc                 | 
3d0bc     FC 8E 07 F5 |                 and     hpar1, #$FC
3d0c0                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3d0c0                 | 
3d0c0     84 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3d0c4     18 01 90 AD |         if_z    jmp     #.report_id
3d0c8     04 8E 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3d0cc     30 01 90 AD |         if_z    jmp     #.usage_page
3d0d0     08 8E 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3d0d4     38 01 90 AD |         if_z    jmp     #.usage
3d0d8     14 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3d0dc     C8 2B 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3d0e0     24 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3d0e4     C8 2B 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3d0e8     34 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3d0ec     C8 2D 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3d0f0     44 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3d0f4     C8 2D 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3d0f8     74 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3d0fc     C8 27 03 A6 |         if_z    mov     hidr_size, hpar2
3d100     94 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3d104     C8 29 03 A6 |         if_z    mov     hidr_count, hpar2
3d108     B4 8E 1F F2 |                 cmp     hpar1, #HID_POP wcz
3d10c     A4 8E 0F 52 |         if_nz   cmp     hpar1, #HID_PUSH wz
3d110     64 01 90 AD |         if_z    jmp     #.pushpop ' Entering with C set if PUSH  
3d114     80 8E 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3d118     58 FF 9F 5D |         if_nz   jmp     #.next
3d11c                 | 
3d11c     D5 25 A7 FB |                 tjf     hidr_state,#.next
3d120                 | 
3d120     03 90 07 F5 |                 and     hpar2, #$03
3d124     02 90 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3d128     18 00 90 5D |         if_nz   jmp     #.skip
3d12c                 | 
3d12c     02 24 0F F2 |                 cmp     hidr_state, #2  wz
3d130     20 00 90 AD |         if_z    jmp     #.axes
3d134     03 24 0F F2 |                 cmp     hidr_state, #3  wz
3d138     5C 00 90 AD |         if_z    jmp     #.hats
3d13c     04 24 0F F2 |                 cmp     hidr_state, #4  wz
3d140     70 00 90 AD |         if_z    jmp     #.buttons
3d144                 | .skip
3d144     93 73 03 F6 |                 mov     htmp, hidr_size
3d148     94 73 03 FA |                 mul     htmp, hidr_count
3d14c     B9 21 03 F1 |                 add     hidr_offset, htmp
3d150     20 FF 9F FD |                 jmp     #.next
3d154                 | .axes
3d154                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count),uhex_long(hidr_flags))
3d154     87 87 53 F8 |                 getnib  hr0, hidr_flags, #2
3d158     94 89 03 F6 |                 mov     hr1, hidr_count
3d15c                 | .l1
3d15c     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3d160     93 91 03 F6 |                 mov     hpar2, hidr_size
3d164     28 01 B0 FD |                 call    #hpad_getbits
3d168     88 01 B0 FD |                 call    #hpad_normalize
3d16c     08 86 1F F2 |                 cmp     hr0, #8         wcz
3d170     86 87 5F C9 |         if_b    altgn   hr0, #hidr_usage
3d174     00 8A 43 C8 |         if_b    getnib  hr2
3d178     88 8B 77 C9 |         if_b    altsw   hr2, #hidr_axis
3d17c     5F 01 20 C9 |         if_b    setword retval
3d180     01 86 07 C1 |         if_b    add     hr0, #1
3d184     93 21 03 F1 |                 add     hidr_offset, hidr_size
3d188     F4 89 6F FB |                 djnz    hr1, #.l1
3d18c                 | 
3d18c     C3 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3d190     01 24 07 F6 |                 mov     hidr_state, #1
3d194     DC FE 9F FD |                 jmp     #.next
3d198                 | .hats
3d198                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3d198     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3d19c     93 91 03 F6 |                 mov     hpar2, hidr_size
3d1a0     EC 00 B0 FD |                 call    #hpad_getbits
3d1a4     5F 1B C3 F8 |                 setbyte hidr_hats, retval, #0
3d1a8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3d1ac     01 24 07 F6 |                 mov     hidr_state, #1
3d1b0     90 FF 9F FD |                 jmp     #.skip
3d1b4                 | .buttons
3d1b4                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3d1b4     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3d1b8     93 91 03 F6 |                 mov     hpar2, hidr_size
3d1bc     94 91 03 FA |                 mul     hpar2, hidr_count
3d1c0     CC 00 B0 FD |                 call    #hpad_getbits
3d1c4     87 73 E3 F8 |                 getbyte htmp, hidr_flags, #0
3d1c8     B9 BF 62 F0 |                 shl     retval, htmp
3d1cc     5F 19 43 F5 |                 or      hidr_buttons, retval
3d1d0     94 73 03 F1 |                 add     htmp, hidr_count
3d1d4     B9 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3d1d8     01 24 07 F6 |                 mov     hidr_state, #1
3d1dc     64 FF 9F FD |                 jmp     #.skip
3d1e0                 | .report_id
3d1e0     00 1E 0F F2 |                 cmp     hidr_id, #0     wz
3d1e4     2D 00 7C 5D |         if_nz   ret     wcz
3d1e8     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
3d1ec                 |                 'debug(".report_id",udec(htmp,hpar2))
3d1ec     C8 73 0B F2 |                 cmp     htmp, hpar2     wz
3d1f0     B9 1F 03 A6 |         if_z    mov     hidr_id, htmp
3d1f4     01 24 67 56 |         if_nz   neg     hidr_state,#1
3d1f8     01 F2 87 51 |         if_nz   sub     ptrb,#1
3d1fc     74 FE 9F FD |                 jmp     #.next
3d200                 | .usage_page
3d200     09 90 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3d204     01 24 0F A2 |         if_z    cmp     hidr_state, #1  wz
3d208     04 24 07 A6 |         if_z    mov     hidr_state, #4
3d20c     64 FE 9F FD |                 jmp     #.next
3d210                 | .usage
3d210     04 90 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3d214     05 90 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3d218     06 1C 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3d21c     01 24 07 A6 |         if_z    mov     hidr_state, #1
3d220     50 FE 9F AD |         if_z    jmp     #.next
3d224     02 90 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3d228     04 1C 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3d22c     01 24 07 A6 |         if_z    mov     hidr_state, #1
3d230     40 FE 9F AD |         if_z    jmp     #.next
3d234     30 90 17 F2 |                 cmp     hpar2, #HID_USAGE_X     wc
3d238     38 90 97 32 |         if_nc   cmpr    hpar2, #HID_USAGE_WHEEL wc   
3d23c     10 00 90 3D |         if_nc   jmp     #.usage_axis
3d240     39 90 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3d244     01 24 0F A2 |         if_z    cmp     hidr_state, #1      wz
3d248     03 24 07 A6 |         if_z    mov     hidr_state, #3
3d24c     24 FE 9F FD |                 jmp     #.next
3d250                 | .usage_axis
3d250     01 24 57 F2 |                 cmps    hidr_state, #1          wc
3d254     1C FE 9F CD |         if_b    jmp     #.next
3d258     37 90 27 F3 |                 fle     hpar2, #HID_USAGE_DIAL   ' Let's just say wheel and dial are the same to keep sane
3d25c     86 23 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3d260     C8 01 00 F8 |                 setnib  hpar2
3d264                 | 
3d264     20 90 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3d268     C8 0F 23 F4 |                 bith    hidr_flags, hpar2
3d26c                 | 
3d26c     01 22 07 F1 |                 add     hidr_usage_idx, #1
3d270     02 24 07 F6 |                 mov     hidr_state, #2
3d274     FC FD 9F FD |                 jmp     #.next
3d278                 | .pushpop
3d278                 |                 ' Entering with C set if PUSH  
3d278     4C 0F B0 FE |                 loc     pb, #hid_stack
3d27c     28 08 64 CD |         if_c    setq    #(hidr_end-hidr_state)-1
3d280     F7 25 63 CC |         if_c    wrlong  hidr_state, pb
3d284     28 08 64 3D |         if_nc   setq    #(hidr_end-hidr_state)-1
3d288     F7 25 03 3B |         if_nc   rdlong  hidr_state, pb
3d28c     E4 FD 9F FD |                 jmp     #.next
3d290                 | 
3d290                 | '------------------------------------------------------------------------------
3d290                 | ' Read bits from report data buffer
3d290                 | '------------------------------------------------------------------------------
3d290                 | ' On entry:
3d290                 | '   PTRB - report buffer
3d290                 | '   hpar1 - start bit
3d290                 | '   hpar2 - number of bits
3d290                 | ' On exit:
3d290                 | '   retval - bits
3d290                 | '------------------------------------------------------------------------------
3d290                 | hpad_getbits
3d290     C7 73 03 F6 |                 mov     htmp, hpar1
3d294     03 72 47 F0 |                 shr     htmp, #3        ' byte offset
3d298     F9 73 03 F1 |                 add     htmp, ptrb
3d29c     B9 BF 02 FB |                 rdlong  retval, htmp
3d2a0                 | 
3d2a0     C7 75 03 F6 |                 mov     htmp1, hpar1
3d2a4     07 74 07 F5 |                 and     htmp1, #$07     ' shift
3d2a8     BA BF 42 F0 |                 shr     retval, htmp1
3d2ac                 | 
3d2ac     18 90 1F F2 |                 cmp     hpar2, #24      wcz
3d2b0     10 00 90 1D |         if_a    jmp     #.l1
3d2b4                 | 
3d2b4     C8 91 C3 F9 |                 decod   hpar2
3d2b8     01 90 87 F1 |                 sub     hpar2, #1
3d2bc     C8 BF 02 F5 |                 and     retval, hpar2
3d2c0     2D 00 64 FD |                 ret
3d2c4                 | .l1
3d2c4     FF 7F 00 FF 
3d2c8     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3d2cc     03 72 07 F1 |                 add     htmp, #3
3d2d0     B9 77 03 FB |                 rdlong  htmp2, htmp
3d2d4     18 90 87 F1 |                 sub     hpar2, #24
3d2d8     C8 91 C3 F9 |                 decod   hpar2
3d2dc     01 90 87 F1 |                 sub     hpar2, #1
3d2e0     BA 77 43 F0 |                 shr     htmp2, htmp1
3d2e4     C8 77 03 F5 |                 and     htmp2, hpar2
3d2e8     18 76 67 F0 |                 shl     htmp2, #24
3d2ec     BB BF 42 F5 |                 or      retval, htmp2
3d2f0     2D 00 64 FD |                 ret
3d2f4                 | 
3d2f4                 | '------------------------------------------------------------------------------
3d2f4                 | ' Normalize value to signed word (-32768 / 32767)
3d2f4                 | '------------------------------------------------------------------------------
3d2f4                 | ' On entry:
3d2f4                 | '   retval - value to normalize
3d2f4                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3d2f4                 | '   - or -
3d2f4                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3d2f4                 | '   hidr_size - value bits length
3d2f4                 | ' On exit:
3d2f4                 | '   retval - normalized value
3d2f4                 | '------------------------------------------------------------------------------
3d2f4                 | hpad_normalize
3d2f4     95 73 0B F6 |                 mov     htmp, hidr_lminmax  wz
3d2f8     96 73 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3d2fc     2D 00 64 AD |         if_z    ret
3d300     B9 75 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3d304     B9 73 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3d308     0F 74 77 F7 |                 signx   htmp1, #15      wc
3d30c     FF 27 97 C9 |         if_c    alts    hidr_size, #511
3d310     00 BE 66 C7 |         if_c    signx   retval, #0-0
3d314                 |                 ' slightly crappy hack: if in mouse mode, don't normalize
3d314     04 1C 0F F2 |                 cmp     hidr_type, #M_READY wz
3d318     2D 00 64 AD |         if_z    ret
3d31c     BA 73 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3d320     BA BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3d324     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3d328     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3d32c     B9 73 53 F6 |                 abs     htmp            wc
3d330     1F BE 0E F4 |                 testb   retval, #31     wz
3d334     5F BF 42 F6 |                 abs     retval
3d338     B9 BF 12 FD |                 qdiv    retval, htmp
3d33c     18 BE 62 FD |                 getqx   retval
3d340     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3d344     C0 FF 7F FF 
3d348     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3d34c     2D 00 64 FD |                 ret
3d350                 | end
3d350                 | 
3d350                 | if _HAVE_GAMEPAD
3d350                 | '------------------------------------------------------------------------------
3d350                 | ' Handle XInput controller
3d350                 | ' On entry:
3d350                 | '   ptrb - controller report
3d350                 | '------------------------------------------------------------------------------
3d350                 | '   Default implementation translates the report to a pseudo-defacto hid
3d350                 | '   standard and jumps to hpad_translate for actions.
3d350                 | '   Implementors may take specific actions for this kind of controller.
3d350                 | '------------------------------------------------------------------------------
3d350                 | hpad_xinput
3d350     80 73 CF FA |                 rdbyte  htmp, ptrb      wz
3d354     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3d358     81 73 C7 FA |                 rdbyte  htmp, ptrb[1]
3d35c     14 72 0F F2 |                 cmp     htmp, #$14      wz
3d360     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3d364                 | 
3d364                 |                 'debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3d364                 | 
3d364     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3d368     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3d36c                 | 
3d36c     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3d370     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3d374     5F BF 22 F6 |                 not     retval
3d378     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3d37c     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3d380     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3d384     5F BF 22 F6 |                 not     retval
3d388     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3d38c                 | 
3d38c     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3d390     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3d394     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3d398     06 18 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3d39c     54 FF BF FD |                 call    #hpad_normalize
3d3a0     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3d3a4     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3d3a8     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3d3ac     07 18 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3d3b0     40 FF BF FD |                 call    #hpad_normalize
3d3b4     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3d3b8                 | 
3d3b8     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3d3bc     81 BF E6 FA |                 rdword  retval, ptrb[1]
3d3c0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3d3c4     00 18 47 F4 |                 bitc    hidr_buttons, #0
3d3c8     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3d3cc     01 18 47 F4 |                 bitc    hidr_buttons, #1
3d3d0     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3d3d4     02 18 47 F4 |                 bitc    hidr_buttons, #2
3d3d8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3d3dc     03 18 47 F4 |                 bitc    hidr_buttons, #3
3d3e0     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3d3e4     04 18 47 F4 |                 bitc    hidr_buttons, #4
3d3e8     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3d3ec     05 18 47 F4 |                 bitc    hidr_buttons, #5
3d3f0     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3d3f4     08 18 47 F4 |                 bitc    hidr_buttons, #8
3d3f8     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3d3fc     09 18 47 F4 |                 bitc    hidr_buttons, #9
3d400     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3d404     0A 18 47 F4 |                 bitc    hidr_buttons, #10
3d408     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3d40c     0B 18 47 F4 |                 bitc    hidr_buttons, #11
3d410     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3d414     0C 18 47 F4 |                 bitc    hidr_buttons, #12
3d418                 | 
3d418     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3d41c     5F 73 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3d420     7A BB 7A FF 
3d424     0F 74 07 F6 |                 mov     htmp1, ##$F576_F40F
3d428     F9 FF 7F FF 
3d42c     12 77 07 F6 |                 mov     htmp2, ##$FFFF_F312
3d430     BA 73 5F F9 |                 altgn   htmp, #htmp1
3d434     00 72 43 F8 |                 getnib  htmp
3d438     B9 1B C3 08 |         _ret_   setbyte hidr_hats, htmp, #0
3d43c                 | 
3d43c                 | '------------------------------------------------------------------------------
3d43c                 | ' Handle PS3 controller
3d43c                 | ' On entry:
3d43c                 | '   ptrb - controller report
3d43c                 | '------------------------------------------------------------------------------
3d43c                 | '   Default implementation translates the report to a pseudo-defacto hid
3d43c                 | '   standard and jumps to hpad_translate for actions.
3d43c                 | '   Implementors may take specific actions for this kind of controller.
3d43c                 | '------------------------------------------------------------------------------
3d43c                 | hpad_ps3
3d43c     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
3d440     01 72 0F F2 |                 cmp     htmp, #$01      wz
3d444     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3d448                 | 
3d448                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3d448                 | 
3d448     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3d44c     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3d450                 | 
3d450     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3d454     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3d458     98 FE BF FD |                 call    #hpad_normalize
3d45c     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3d460     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3d464     8C FE BF FD |                 call    #hpad_normalize
3d468     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3d46c     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3d470     80 FE BF FD |                 call    #hpad_normalize
3d474     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3d478     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3d47c     74 FE BF FD |                 call    #hpad_normalize
3d480     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3d484     91 BF C6 FA |                 rdbyte  retval, ptrb[17]        ' RX = L2 analog
3d488     68 FE BF FD |                 call    #hpad_normalize
3d48c     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3d490     92 BF C6 FA |                 rdbyte  retval, ptrb[18]        ' RY = R2 analog
3d494     5C FE BF FD |                 call    #hpad_normalize
3d498     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3d49c                 | 
3d49c     08 8E 07 F6 |                 mov     hpar1, #8
3d4a0     13 90 07 F6 |                 mov     hpar2, #19
3d4a4     E8 FD BF FD |                 call    #hpad_getbits
3d4a8                 | 
3d4a8     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3d4ac     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3d4b0     00 18 47 F4 |                 bitc    hidr_buttons, #0
3d4b4     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3d4b8     01 18 47 F4 |                 bitc    hidr_buttons, #1
3d4bc     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3d4c0     02 18 47 F4 |                 bitc    hidr_buttons, #2
3d4c4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3d4c8     03 18 47 F4 |                 bitc    hidr_buttons, #3
3d4cc     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3d4d0     04 18 47 F4 |                 bitc    hidr_buttons, #4
3d4d4     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3d4d8     05 18 47 F4 |                 bitc    hidr_buttons, #5
3d4dc     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3d4e0     06 18 47 F4 |                 bitc    hidr_buttons, #6
3d4e4     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3d4e8     07 18 47 F4 |                 bitc    hidr_buttons, #7
3d4ec     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3d4f0     08 18 47 F4 |                 bitc    hidr_buttons, #8
3d4f4     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3d4f8     09 18 47 F4 |                 bitc    hidr_buttons, #9
3d4fc     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3d500     0A 18 47 F4 |                 bitc    hidr_buttons, #10
3d504     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3d508     0B 18 47 F4 |                 bitc    hidr_buttons, #11
3d50c     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3d510     0C 18 47 F4 |                 bitc    hidr_buttons, #12
3d514                 | 
3d514     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3d518     5F 73 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3d51c     09 FA 79 FF 
3d520     0F 74 07 F6 |                 mov     htmp1, ##$F3F4_120F
3d524     FF FA 7F FF 
3d528     76 77 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3d52c     BA 73 5F F9 |                 altgn   htmp, #htmp1
3d530     00 72 43 F8 |                 getnib  htmp
3d534     B9 1B C3 08 |         _ret_   setbyte hidr_hats, htmp, #0
3d538                 | 
3d538                 | 
3d538                 | '------------------------------------------------------------------------------
3d538                 | ' Perform controller actions
3d538                 | ' On entry:
3d538                 | '    hidr_id        report id
3d538                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3d538                 | '                      X = hidr_axis+0, #0
3d538                 | '                      Y = hidr_axis+0, #1
3d538                 | '                      Z = hidr_axis+1, #0
3d538                 | '                     RX = hidr_axis+1, #1
3d538                 | '                     RY = hidr_axis+2, #0
3d538                 | '                     RZ = hidr_axis+2, #1
3d538                 | '                     Sl = hidr_axis+3, #0
3d538                 | '                     Wh = hidr_axis+3, #1
3d538                 | '    hidr_buttons   buttons state (bits 0 to 31)
3d538                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3d538                 | '
3d538                 | '                     -------3 -------2 -------1 -------0 byte
3d538                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3d538                 | '    hidr_flags       xxxxxxxx_wsrrrzyx_hhhhaaaa_bbbbbbbb
3d538                 | '                              hlzyx||| |||||||| ++++++++ n. buttons
3d538                 | '                              |||||||| ||||++++--------- n. axes
3d538                 | '                              |||||||| ++++------------- n. hats
3d538                 | '                              ++++++++------------------ valid axes
3d538                 | '------------------------------------------------------------------------------
3d538                 | hpad_translate
3d538                 | 
3d538                 | 
3d538                 |         if HAVE_HIDPAD
3d538     A0 0C F0 FE |                 loc     ptrb,#hidpad_report
3d53c     2D 73 0B F6 |                 mov     htmp,hdev_port          wz
3d540     8F 73 03 A6 |         if_z    mov     htmp,hidr_id
3d544     01 72 E7 F2 |                 cmpsub  htmp,#1
3d548     07 1E 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3d54c     02 1E 17 52 |         if_nz   cmp     hidr_id, #2             wc
3d550     2D 00 7C 3D |         if_ae   ret     wcz
3d554     20 72 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3d558     B9 F3 03 F1 |                 add     ptrb,htmp
3d55c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3d560     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3d564     28 0E 64 FD |                 setq    #8-1
3d568     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3d56c                 |         end
3d56c                 | 
3d56c                 | 
3d56c                 |         if EMUPAD_MAX_PLAYER > 0
3d56c                 | .emupad_no_hat
3d56c                 |         if EMUPAD_BT0_BIT >= 0
3d56c                 |         end
3d56c                 |         if EMUPAD_BT1_BIT >= 0
3d56c                 |         end
3d56c                 |         if EMUPAD_BT2_BIT >= 0
3d56c                 |         end
3d56c                 |         if EMUPAD_BT3_BIT >= 0
3d56c                 |         end
3d56c                 |         if EMUPAD_BT4_BIT >= 0
3d56c                 |         end
3d56c                 |         if EMUPAD_BT5_BIT >= 0
3d56c                 |         end
3d56c                 |         if EMUPAD_BT6_BIT >= 0
3d56c                 |         end
3d56c                 |         if EMUPAD_BT7_BIT >= 0
3d56c                 |         end
3d56c                 |         if EMUPAD_BT8_BIT >= 0
3d56c                 |         end
3d56c                 |         if EMUPAD_BT9_BIT >= 0
3d56c                 |         end
3d56c                 | .emupad_slot_over
3d56c                 |         end
3d56c                 | 
3d56c                 |         if 0
3d56c                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3d56c                 | 
3d56c                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3d56c                 | 
3d56c                 |         end
3d56c     2D 00 64 FD |                 ret
3d570                 | end
3d570                 | 
3d570                 | if EMUPAD_MAX_PLAYER > 0
3d570                 | '------------------------------------------------------------------------------
3d570                 | ' Clear EmuPad state
3d570                 | '------------------------------------------------------------------------------
3d570                 | emupad_reset
3d570                 | 
3d570                 | '------------------------------------------------------------------------------
3d570                 | ' Get EmuPad Player number for current device (into retval)
3d570                 | ' Z flag is also set if current device is valid
3d570                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3d570                 | '------------------------------------------------------------------------------
3d570                 | emupad_getnum
3d570                 | .loop
3d570                 | '------------------------------------------------------------------------------
3d570                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3d570                 | '------------------------------------------------------------------------------
3d570                 | emupad_discon
3d570                 | .loop         
3d570                 |         
3d570                 |         ' FALL THROUGH!!!
3d570                 | 
3d570                 | '------------------------------------------------------------------------------
3d570                 | ' Update EmuPad reports (all of them...)
3d570                 | '------------------------------------------------------------------------------
3d570                 | emupad_write_reports
3d570                 | .devloop
3d570                 | 
3d570                 | end
3d570                 | 
3d570                 | 
3d570                 | '------------------------------------------------------------------------------
3d570                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3d570                 | '------------------------------------------------------------------------------
3d570                 | ' On entry:
3d570                 | ' On exit:
3d570                 | '------------------------------------------------------------------------------
3d570                 | hget_hub_status
3d570     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3d574     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3d578     32 93 23 F9 |                 setword hpar3, hub_next_datax, #0
3d57c     01 92 2F F9 |                 setword hpar3, #1, #1
3d580     CF 02 A0 FD |                 call    #do_int_in
3d584     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d588     0C 00 90 AD |         if_z    jmp     #.data
3d58c     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3d590     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3d594     2D 00 64 FD |                 ret
3d598                 | .data
3d598     00 92 0F F2 |                 cmp     hpar3, #0               wz
3d59c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3d5a0                 | 
3d5a0     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3d5a4     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3d5a8     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3d5ac     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3d5b0                 |                 debug(ubin_long(hub_status_chg))
3d5b0                 | 
3d5b0     01 5A 06 F6 |                 mov     hdev_port, #1
3d5b4                 | .loop
3d5b4     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3d5b8     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3d5bc     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3d5c0     F0 FF 9F 3D |         if_nc   jmp     #.loop
3d5c4     2D 00 64 FD |                 ret
3d5c8                 | 
3d5c8                 | hub_port_handler
3d5c8     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3d5cc     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d5d0     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d5d4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d5d8     55 02 A0 FD |                 call    #control_read
3d5dc     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3d5e0                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3d5e0                 | 
3d5e0     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3d5e4     50 01 90 5D |         if_x0   jmp     #.other
3d5e8     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3d5ec     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3d5f0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d5f4     A0 02 A0 FD |                 call    #control_write
3d5f8     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3d5fc     7C 01 90 5D |         if_x0   jmp     #.disconnect
3d600     B1 99 02 F6 |                 mov     hctwait, _100ms_
3d604     EF 02 A0 FD |                 call    #poll_waitx
3d608                 | 
3d608     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3d60c     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3d610     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d614     A0 02 A0 FD |                 call    #control_write
3d618                 | 
3d618     02 78 07 F6 |                 mov     htmp3, #2
3d61c                 | .wait_reset
3d61c     AD 99 02 F6 |                 mov     hctwait, _8ms_
3d620     EF 02 A0 FD |                 call    #poll_waitx
3d624     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d628     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d62c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d630     55 02 A0 FD |                 call    #control_read
3d634     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3d638     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3d63c     F7 79 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3d640                 | 
3d640     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3d644     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3d648     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d64c     A0 02 A0 FD |                 call    #control_write
3d650                 | 
3d650     24 72 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3d654                 | .wait_recover
3d654     A8 99 02 F6 |                 mov     hctwait, _1ms_
3d658     EF 02 A0 FD |                 call    #poll_waitx
3d65c     FD 73 6F FB |                 djnz    htmp,#.wait_recover
3d660                 | 
3d660     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3d664     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3d668     0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3d66c                 | 
3d66c     00 08 00 FF 
3d670     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3d674     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3d678     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3d67c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3d680     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3d684     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d688     48 01 90 5D |         if_nz   jmp     #.done
3d68c                 | .get_dev_desc
3d68c     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3d690     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3d694     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3d698     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3d69c     2D 73 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3d6a0     01 73 57 FC |                 wrword  htmp, ptra[wValue]
3d6a4     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3d6a8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d6ac     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3d6b0     AD 99 02 F6 |                 mov     hctwait, _8ms_
3d6b4     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3d6b8     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3d6bc     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3d6c0     BE 00 A0 FD |                 call    #calc_crc5
3d6c4     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3d6c8     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3d6cc     F7 AD C2 FA |                 rdbyte  total_data, pb
3d6d0     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3d6d4     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3d6d8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d6dc     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3d6e0     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3d6e4     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3d6e8                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3d6e8     A0 99 02 F6 |                 mov     hctwait, _500us_
3d6ec     EF 02 A0 FD |                 call    #poll_waitx
3d6f0     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3d6f4     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3d6f8     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3d6fc     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3d700     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d704     CC 00 90 5D |         if_nz   jmp     #.done
3d708     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3d70c     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3d710     61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3d714     61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3d718     00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3d71c     09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3d720     02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3d724     56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
3d728     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3d72c     A4 00 90 CD |         if_b    jmp     #.done
3d730     68 F0 BF FD |                 call    #hparse_con_desc
3d734     9C 00 90 FD |                 jmp     #.done
3d738                 | 
3d738                 | .other
3d738     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3d73c     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3d740     28 00 90 AD |         if_x1   jmp     #.reset_feature
3d744     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3d748     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3d74c     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3d750     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3d754     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3d758     10 00 90 AD |         if_x1   jmp     #.reset_feature
3d75c     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3d760     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3d764     04 00 90 AD |         if_x1   jmp     #.reset_feature
3d768     68 00 90 FD |                 jmp     #.done
3d76c                 | .reset_feature
3d76c     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3d770     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d774     A0 02 A0 FD |                 call    #control_write
3d778     58 00 90 FD |                 jmp     #.done
3d77c                 | .disconnect
3d77c                 | 
3d77c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3d780     00 72 E3 F8 |                 getbyte htmp
3d784     03 72 0F F2 |                 cmp     htmp,#KB_READY wz
3d788     05 72 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3d78c     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3d790     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3d794     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3d798     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3d79c                 |         if EMUPAD_MAX_PLAYER > 0
3d79c                 |         end
3d79c                 |         if HAVE_MOUSE
3d79c     04 72 0F F2 |                 cmp     htmp, #M_READY          wz
3d7a0     05 72 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3d7a4     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3d7a8                 |         end
3d7a8                 |         if HAVE_HIDPAD
3d7a8     30 0A F0 FE |                 loc ptrb,#hidpad_report
3d7ac     2D 73 03 F6 |                 mov htmp,hdev_port
3d7b0     01 72 E7 F2 |                 cmpsub htmp,#1
3d7b4     20 72 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3d7b8     B9 F3 03 F1 |                 add ptrb,htmp
3d7bc     28 0E 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3d7c0     80 01 6C FC |                 wrlong #0,ptrb
3d7c4                 |         end
3d7c4                 | 
3d7c4     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3d7c8     00 00 C4 F8 |                 setbyte #0
3d7cc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3d7d0     00 00 04 F6 |                 mov     0-0, #0
3d7d4                 | 
3d7d4                 | .done
3d7d4     0E 6A 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3d7d8     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3d7dc     22 6F 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3d7e0     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3d7e4     A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3d7e8     A4 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3d7ec                 | 
3d7ec     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d7f0     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d7f4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d7f8     55 02 A0 FD |                 call    #control_read
3d7fc     00 69 06 FB |                 rdlong  hub_port_status, ptra
3d800                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3d800     2D 00 64 FD |                 ret
3d804                 | 
3d804                 | '------------------------------------------------------------------------------
3d804                 | ' Partially populated SETUP packets
3d804                 | '------------------------------------------------------------------------------
3d804     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d805     06          |                 byte    REQ_GET_DESC
3d806     00 01       |                 word    TYPE_DEVICE << 8
3d808     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d80a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d80c     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d80d     06          |                 byte    REQ_GET_DESC
3d80e     00 02       |                 word    TYPE_CONFIG << 8
3d810     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d812     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d814     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3d815     09          |                 byte    REQ_SET_CONFIG
3d816     00 00       |                 word    0       ' Configuration value
3d818     00 00       |                 word    0       ' Zero
3d81a     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3d81c     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3d81d     05          |                 byte    REQ_SET_ADDR
3d81e     00 00       |                 word    0       ' Zero
3d820     00 00       |                 word    0       ' Zero
3d822     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3d824                 | '------------------------------------------------------------------------------
3d824                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3d824                 | ' wValue field dictates which protocol should be used.
3d824                 | '
3d824                 | ' When initialized, all devices default to report protocol. However the host
3d824                 | ' should not make any assumptions about the device state and should set the
3d824                 | ' desired protocol whenever initializing a device.
3d824                 | '------------------------------------------------------------------------------
3d824     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d825     0B          |                 byte    HID_SET_PROTO
3d826     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3d828                 |                                                 ' (HID 1.11 Section 7.2.6).
3d828     00 00       |                 word    0               ' Interface index number.
3d82a     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3d82c                 | '------------------------------------------------------------------------------
3d82c     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d82d     0A          |                 byte    HID_SET_IDLE
3d82e     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3d830                 |                                         ' reporting until a change is detected in the report data
3d830                 | 
3d830                 |                                         ' (HID 1.11 Section 7.2.4).
3d830     00 00       |                 word    0       ' Interface index number.
3d832     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3d834     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d835     09          |                 byte    HID_SET_REPORT
3d836     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3d838                 |                                         ' (HID 1.11 Section 7.2.2).
3d838     00 00       |                 word    0       ' Interface index number.
3d83a     00 00       |                 word    0       ' Size of the report, in bytes.
3d83c     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3d83d     06          |                 byte    REQ_GET_DESC
3d83e     00 22       |                 word    TYPE_REPORT << 8
3d840     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d842     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d844                 | '------------------------------------------------------------------------------
3d844     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3d845     06          |                 byte    REQ_GET_DESC
3d846     00 29       |                 word    TYPE_HUB << 8
3d848     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d84a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d84c     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3d84d     03          |                 byte    REQ_SET_FEATURE
3d84e     00 00       |                 word    0       ' port power
3d850     01 00       |                 word    1       ' Port index number (1+)
3d852     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d854     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3d855     01          |                 byte    REQ_CLEAR_FEATURE
3d856     00 00       |                 word    0       ' port power
3d858     01 00       |                 word    1       ' Port index number (1+)
3d85a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d85c     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3d85d     00          |                 byte    REQ_GET_STATUS
3d85e     00 00       |                 word    0
3d860     01 00       |                 word    1       ' Port index number (1+)
3d862     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3d864                 | '------------------------------------------------------------------------------
3d864                 | if _HAVE_GAMEPAD
3d864     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3d868                 | ps3_command_buff
3d868     00 00 00 00 
3d86c     00          |                 byte    $00, $00, $00, $00, $00
3d86d     00 00 00 00 
3d871     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3d872     FF 27 10 00 
3d876     32          |                 byte    $FF, $27, $10, $00, $32
3d877     FF 27 10 00 
3d87b     32          |                 byte    $FF, $27, $10, $00, $32
3d87c     FF 27 10 00 
3d880     32          |                 byte    $FF, $27, $10, $00, $32
3d881     FF 27 10 00 
3d885     32          |                 byte    $FF, $27, $10, $00, $32
3d886     00 00 00 00 
3d88a     00          |                 byte    $00, $00, $00, $00, $00
3d88b     00 00 00 00 
3d88f     00          |                 byte    $00, $00, $00, $00, $00
3d890     00 00 00 00 
3d894     00          |                 byte    $00, $00, $00, $00, $00
3d895     00 00 00    |                 byte    $00, $00, $00
3d898                 | '------------------------------------------------------------------------------
3d898     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3d89b                 |                                         ' 0x01 All blinking
3d89b                 |                                         ' 0x02 1 flashes, then on
3d89b                 |                                         ' 0x03 2 flashes, then on
3d89b                 |                                         ' 0x04 3 flashes, then on
3d89b                 |                                         ' 0x05 4 flashes, then on
3d89b                 |                                         ' 0x06 1 on
3d89b                 |                                         ' 0x07 2 on
3d89b                 |                                         ' 0x08 3 on
3d89b                 |                                         ' 0x09 4 on
3d89b                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3d89b                 |                                         ' 0x0B Blinking*
3d89b                 |                                         ' 0x0C Slow blinking*
3d89b                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3d89b     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3d89e     00          |                 byte    $00             ' Left rumble
3d89f     00          |                 byte    $00             ' Right rumble
3d8a0     00 00 00    |                 byte    $00, $00, $00
3d8a3                 | 
3d8a3                 | xinp_fix_8bitdo '' This inexplicable String request (that WILL fail) somehow un-bugs the terrible firmware
3d8a3                 |                 '' of certain wired 8bitdo gamepads.
3d8a3     80          |                 byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d8a4     06          |                 byte    REQ_GET_DESC
3d8a5     04 03       |                 word    TYPE_STRING << 8 + 4
3d8a7     09 04       |                 word    $0409   ' Zero or Language ID (Section 9.6.7)
3d8a9     02 00       |                 word    2       ' Number of bytes to transfer if there is a data stage
3d8ab     00          | end
3d8ac                 | alignl
3d8ac                 | 
3d8ac                 | if HAVE_MOUSE
3d8ac     00 00 00 00 
3d8b0     00 00 00 00 | mouse_limits long 0[2]
3d8b4     00 00 00 00 | mouse_outptr long 0
3d8b8                 | end
3d8b8                 | 
3d8b8                 | if KEYQUEUE_SIZE > 0
3d8b8     00          | keyq_head byte 0
3d8b9     00          | keyq_tail byte 0
3d8ba     00 00 00 00 
      ...             
3dab6     00 00 00 00 
3daba     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3dabc                 | alignl
3dabc                 | end
3dabc                 | 
3dabc                 | if EMUPAD_MAX_PLAYER > 0
3dabc                 | emupad_rule_buffer
3dabc                 | if EMUPAD_BUILTIN_RULES
3dabc                 | file "padmap_builtin.dat"
3dabc                 | end
3dabc                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3dabc                 | '' Default rule directly follows!
3dabc                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3dabc                 | end
3dabc                 | 
3dabc                 | '------------------------------------------------------------------------------
3dabc                 | ' The USB data cache area gets zero-filled at every device disconnect
3dabc                 | '------------------------------------------------------------------------------
3dabc                 | usb_cache_start
3dabc                 | 
3dabc                 | ' HID descriptor and report buffers
3dabc                 | if !!OVERLAP_MEMORY
3dabc     00 00 00 00 
      ...             
3e1b4     00 00 00 00 
3e1b8     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3e1bc                 | end
3e1bc     00 00 00 00 
3e1c0     00 00 00 00 | hkbd_report     byte    0[8]
3e1c4     00 00 00 00 | hkbd_led_rep    byte    0
3e1c8                 | alignl
3e1c8                 | 
3e1c8     00 00 00 00 
3e1cc     00 00 00 00 
3e1d0     00 00 00 00 
3e1d4     00 00 00 00 
3e1d8     00 00 00 00 | hid_stack       long 0[(hidr_end - hidr_state) * 1]
3e1dc                 | 
3e1dc                 | if HAVE_HIDPAD
3e1dc     00 00 00 00 
      ...             
3e2b4     00 00 00 00 
3e2b8     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3e2bc                 | end
3e2bc                 | 
3e2bc                 | ' HUB descriptor
3e2bc     00          | hub_descr       byte    0   ' bDescLength
3e2bd     00          |                 byte    0   ' bDescriptorType
3e2be     00          |                 byte    0   ' bNbrPorts
3e2bf     00 00       |                 word    0   ' wHubCharacteristics
3e2c1     00          |                 byte    0   ' bPwrOn2PwrGood
3e2c2     00          |                 byte    0   ' bHubContrCurrent
3e2c3     00          |                 byte    0   ' DeviceRemoveable
3e2c4     00          |                 byte    0   ' PortPwrCtrlMask
3e2c5                 | 
3e2c5                 | usb_cache_end
3e2c5                 | 
3e2c5                 | if HAVE_MOUSE
3e2c5     00 00 00 00 | mouse_xacc      long 0
3e2c9     00 00 00 00 | mouse_yacc      long 0
3e2cd     00 00 00 00 | mouse_zacc      long 0
3e2d1     00          | mouse_bstate    byte 0
3e2d2     00          | mouse_lpending  byte 0
3e2d3     00          | mouse_rpending  byte 0
3e2d4     00          | mouse_mpending  byte 0
3e2d5     00          | mouse_lock      byte 0
3e2d6     00 00 00    |                 byte 0[3] ' padding
3e2d9                 | end
3e2d9                 | 
3e2d9     00 00 00 00 
      ...             
3e351     00 00 00 00 
3e355     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3e359     00 00 00 00 
3e35d     00 00 00 00 
3e361     00 00 00 00 
3e365     00 00 00 00 
3e369     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3e36b     00 00 00 00 
      ...             
3e463     00 00 00 00 
3e467     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3e46b                 | 
3e46b     00          | driver_cog      byte    0                       ' Current driver cog + 1
3e46c                 | 	alignl
3e46c                 | _Audio2_004_spin2_dat_
3e46c                 | 
3e46c                 | audio       	org     0
3e46c                 | 
3e46c     61 73 05 FB |             	rdlong  mailbox2, ptra++     	' get start address of all mailboxes
3e470     61 AB 05 FB |             	rdlong  scbase, ptra++       	' get start address of scope buffer
3e474     61 B7 05 FB |             	rdlong  hubptr, ptra++       	' get start address of PSRAM cache
3e478                 | 
3e478     01 EC 63 FD |             	cogid   pa                   	' compute cogid
3e47c     0C EC 07 FA |             	mul     pa, #12              	' and mailbox spacing
3e480     F6 73 01 F1 |             	add     mailbox2, pa         	' add offset to find this COG's mailbox
3e484     B9 70 01 F6 |             	mov     mailbox, mailbox2     	' we need 2 copies of this to enable switching between hub and psram
3e488                 | 
3e488     0E B4 05 FC |             	wrpin   dac2,#left           	' PWM DACs at 44100@339 MHz
3e48c     0E B8 15 FC |             	wxpin   sr44100,#left      	' 30*256
3e490     0F B4 05 FC |             	wrpin   dac2,#right
3e494     0F B8 15 FC |             	wxpin   sr44100,#right    
3e498     41 9C 64 FD |             	dirh    #left addpins 1
3e49c     20 9C 64 FD |             	setse1  #%001<<6 + left      	' Set the event - DAC empty
3e4a0                 |   'debug(uhex(mailbox))
3e4a0                 |             
3e4a0                 | '---------------------------------------------------------------------------------        
3e4a0                 | '----------------- The main loop -------------------------------------------------
3e4a0                 | '---------------------------------------------------------------------------------
3e4a0                 | 
3e4a0     0F A2 05 F6 | loop       	mov 	    cn,#15 '7
3e4a4                 |               					'   waitx ##3300000  		'for debug
3e4a4                 |             
3e4a4                 | '----------------------------------------------------------------------------------
3e4a4                 | '------------- Get parameters and execute commands if any -------------------------
3e4a4                 | '----------------------------------------------------------------------------------
3e4a4                 | 
3e4a4                 | 
3e4a4     D1 6A 01 F6 | p401        	mov     channeladd,cn             	' compute the pointer to channel parameters block
3e4a8     06 6A 65 F0 |             	shl     channeladd,#6
3e4ac     B5 F0 03 F1 |             	add     ptra,channeladd
3e4b0                 | 
3e4b0     28 1A 64 FD |             	setq    #13                       	' read parameters
3e4b4     00 79 05 FB |             	rdlong  pointer0,ptra
3e4b8     1F 8C 1D F4 | p408        	bitl    command0,#31 wcz	      	' bit #31 command - set the DAC sample rate
3e4bc     2C 00 90 3D |     	if_nc   jmp     #p404                     	' if not set, proceed
3e4c0     C6 6C 01 F6 |             	mov     qq,command0             	' get the new rate
3e4c4     4E 6C 15 FC |             	wxpin   qq,#left addpins 1        	' and program the pins
3e4c8     B6 6C E1 F8 |             	getbyte qq,qq,#0 		      	' check if the rate is n*256
3e4cc     00 6C 0D F2 |             	cmp     qq,#0 wz                         
3e4d0     4E B4 05 AC |     	if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3e4d4     4E B2 05 5C |     	if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3e4d8                 |                 
3e4d8     1E 82 1D F4 |                	bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3e4dc     00 78 05 A6 |     	if_z    mov     pointer0, #0  
3e4e0     00 7A 05 A6 |     	if_z    mov     pointer0h, #0  
3e4e4     00 80 05 A6 |     	if_z    mov     envph0, #0  
3e4e8     05 83 65 AC |     	if_z    wrlong  sstart0, ptra[5]          	' reset bit #30 in hub
3e4ec                 |     	
3e4ec     C1 6C 01 F6 | p404        	mov     qq,sstart0		     	' check if start>$80000
3e4f0     FF FF 03 FF 
3e4f4     FF 6D 05 F5 | 		and 	qq,##$7FFFFFF 
3e4f8     00 04 00 FF 
3e4fc     00 6C 1D F2 |                 cmp 	qq,##$80000 wcz
3e500     B9 70 01 36 |     	if_ge   mov     mailbox,mailbox2          	' if yes, use PSRAM
3e504     00 70 05 C6 |     	if_lt   mov     mailbox,#0                	' if not, use HUB 
3e508                 |  ''debug(uhex(sstart0,mailbox))
3e508     C4 9E 39 F9 | p405           	getword apan0,volpan0,#1          	' extract vol,pan from longs 
3e50c     C4 9C 31 F9 |     	    	getword avol0,volpan0,#0
3e510                 |     	   debug(uhex(pointer0,pointer0h,sstart0)) 	
3e510                 | '----------------------------------------------------------------------------------
3e510                 | '------------- Compute the envelope, if exists ------------------------------------
3e510                 | '----------------------------------------------------------------------------------
3e510                 |             
3e510     00 8E 1D F2 |             	cmp     envptr0,#0 wcz     		' read the pointer
3e514     20 00 00 AF 
3e518     00 EA 05 A6 |     	if_z    mov     envs1,##$4000			' if 0, no envelope, load $4000=1 for scas
3e51c     54 00 90 AD |     	if_z    jmp     #p410				' and run away	
3e520                 | 
3e520     C8 80 01 F1 |            	add     envph0,envspd0			' envelope PA update
3e524                 |            	           
3e524     C0 E6 01 F6 |       	    	mov     envhi, envph0			' move phase acc to high part of env pointer
3e528     06 E6 45 F0 | 		shr     envhi,#6			' leave 10 bits in hi
3e52c     F3 E8 31 F9 | 	   	getword envlo,envhi,#0              	' and 16 bit in lo
3e530     10 E6 45 F0 | 	    	shr     envhi,#16			' move 10 bits of hi to the lower word
3e534     C9 E6 19 F2 | 	    	cmp     envhi,envlen0 wcz		' compare this to envelope length
3e538                 | 	    											'debug(udec(envhi,envlen0))
3e538     C9 E6 01 36 |     	if_ge  	mov     envhi,envlen0			' if greater than, set it at envlen
3e53c     00 E8 05 36 |     	if_ge   mov     envlo,#0
3e540     C9 80 01 36 |     	if_ge   mov     envph0,envlen0             	' and set envph0 at the end of the envelope
3e544     16 80 65 30 |     	if_ge   shl     envph0,#22
3e548                 | 
3e548     F3 EA 01 F6 |             	mov 	envs1,envhi			' 10 high bits of PA is the offset to the envelope entry
3e54c     01 EA 65 F0 |             	shl 	envs1,#1                        ' these entries are 16 bit so multiply the offset by 2
3e550     C7 EA 01 F1 |             	add 	envs1,envptr0                   ' and add it to the pointer
3e554     F5 EA 01 FB |             	rdlong 	envs1,envs1			' and then read 2 entries in one rdlong
3e558     F5 EC 39 F9 |             	getword envs2,envs1,#1			' then separate them		
3e55c     F5 EA 31 F9 |            	getword envs1,envs1,#0
3e560     F4 EC 01 FA |             	mul     envs2,envlo                     ' and do linear interpolation based on lower bits of the offset
3e564     F4 E8 21 F6 |             	not     envlo
3e568     F4 EA 01 FA |             	mul     envs1,envlo
3e56c     F6 EA 01 F1 |             	add     envs1,envs2
3e570     12 EA 45 F0 |             	shr     envs1,#18			' we need only 14 bits for scas
3e574                 |               
3e574                 | '----------------------------------------------------------------------------------
3e574                 | '------------- Generate the noise if bit 27 of the pointer is set -----------------
3e574                 | '----------------------------------------------------------------------------------
3e574                 | 
3e574                 | 
3e574                 |     	
3e574                 | '----------------------------------------------------------------------------------
3e574                 | '------------- Get the sample -----------------------------------------------------
3e574                 | '----------------------------------------------------------------------------------    	
3e574                 |  
3e574     BD A0 01 F6 | p410  		mov	oldptrh,pointer0h
3e578     C5 9A F9 F8 |            	getbyte	afreq0,freqskip0,#3         	' the frequency is in 8:24 format, so get integer in afreq0
3e57c     08 8A 65 F0 |            	shl	freqskip0,#8                	' and keep the fractional in freqskip0
3e580     C5 78 19 F1 |            	add     pointer0,freqskip0 wcz      	' compute the pointer to the next sample   
3e584     CD 7A 21 F1 |            	addx	pointer0h,afreq0  
3e588                 |           	
3e588     1B 82 0D F4 |    	   	testb   sstart0, #27 wz
3e58c     10 00 90 5D |     	if_nz	jmp #p412   	
3e590     1B 6E 61 CD |    	if_c  	getrnd  spl
3e594     B7 7E 41 C9 |    	if_c	rolword rawspl0,spl,#0	
3e598     BF 6E 31 F9 |    		getword spl,rawspl0,#0
3e59c     90 00 90 FD |       	        jmp     #p406          	
3e5a0                 |            	
3e5a0                 |            	
3e5a0     D0 7A 19 F2 | p412 		cmp	pointer0h,oldptrh wcz
3e5a4     58 00 90 AD |  	if_e 	jmp 	#p411				' if the pointer didn't change, no sample has to be read
3e5a8                 |      	
3e5a8     1F 82 0D F4 |             	testb   sstart0,#31 wz       	   	' bit 31 : 16 bit sample  
3e5ac     01 7A 65 A0 |      	if_z    shl     pointer0h,#1        
3e5b0     1C 82 0D F4 |             	testb   sstart0,#28 wz  		' bit 28 : interleaved sample         
3e5b4     01 7A 65 A0 |      	if_z    shl     pointer0h,#1        
3e5b8                 | 												
3e5b8     C3 7A 19 F2 |             	cmp     pointer0h,lend0 wcz		' check if end of the loop reached
3e5bc     C3 7A 81 31 |    	if_ge   sub     pointer0h,lend0       
3e5c0     C2 7A 01 31 |         if_ge   add     pointer0h,lstart0
3e5c4     C3 7A 19 F2 |             	cmp     pointer0h,lend0 wcz		' check if end of the loop reached
3e5c8     C3 7A 01 36 |         if_ge   mov	pointer0h,lend0	
3e5cc                 |  
3e5cc     BD 6C 01 F6 |              	mov     qq,pointer0h              	' compute place in the memory from where the sample will be loaded
3e5d0     C1 6C 01 F1 |            	add     qq,sstart0            
3e5d4     FF FF 03 FF 
3e5d8     FF 6D 05 F5 |            	and  	qq,##$7FF_FFFF
3e5dc     FF 71 5D F2 |            	cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3e5e0     B6 6E E1 EA |     	if_le   rdword  spl,qq                      	' if not, use HUB RAM for samples
3e5e4     F8 00 B0 1D |     	if_gt   call    #cache_read
3e5e8     1F 82 0D F4 |                 testb   sstart0,#31 wz 
3e5ec     08 6E 65 50 |     	if_nz   shl     spl,#8				' convert 8 to 16 bit if needed
3e5f0     01 7A 45 A0 |         if_z    shr     pointer0h,#1
3e5f4     1C 82 0D F4 |                 testb   sstart0,#28 wz            
3e5f8     01 7A 45 A0 |     	if_z    shr     pointer0h,#1    
3e5fc     B7 7E 41 F9 |                 rolword rawspl0,spl,#0			' now rawspl0 has oldsample:newsample in it
3e600                 |               
3e600     BF 6E 31 F9 | p411	      	getword spl,rawspl0,#0
3e604     BF 98 39 F9 | 		getword oldspl,rawspl0,#1		' then separate them		
3e608                 | 
3e608                 |           '  debug(uhex(pointer0h,pointer0,spl,oldspl))
3e608                 | 
3e608                 | 
3e608     BC E8 01 F6 | 		mov	envlo,pointer0
3e60c     12 E8 45 F0 | 		shr 	envlo,#18
3e610                 | 	
3e610     F4 6E 31 FA |             	scas    spl,envlo                   	' and do linear interpolation
3e614     00 6E 01 F6 |             	mov 	spl,0-0
3e618     F4 E8 21 F6 |             	not     envlo
3e61c     1F 00 00 FF 
3e620     FF E9 05 F5 |           	and     envlo,##$3FFF
3e624     F4 98 31 FA |            	scas    oldspl,envlo
3e628     00 98 01 F6 |             	mov     oldspl,0-0
3e62c     CC 6E 01 F1 |                 add     spl, oldspl
3e630                 | 	 
3e630     F5 6E 31 FA | p406        	scas    spl, envs1
3e634     00 6E 01 F6 |             	mov     spl,0-0
3e638     CE 6E 31 FA |             	scas    spl,avol0                 	' apply volume
3e63c     00 6E 01 F6 |             	mov     spl,0-0
3e640                 |  
3e640     CF 6E 31 FA |             	scas    spl,apan0                 	' apply pan
3e644     00 A4 01 F6 |             	mov     ls0,0-0
3e648     20 00 00 FF 
3e64c     00 6C 05 F6 |             	mov     qq,##16384
3e650     CF 6C 81 F1 |             	sub     qq,apan0
3e654     B6 6E 31 FA |             	scas    spl,qq
3e658     00 A6 01 F6 |             	mov     rs0, 0-0
3e65c                 |       
3e65c     D3 7C 29 F9 |                 setword sample0,rs0,#1           	' pack samples into long
3e660     D2 7C 21 F9 |                 setword sample0,ls0,#0
3e664                 |                 
3e664     D2 74 01 F1 |                 add  lsample,ls0
3e668     D3 76 01 F1 |                 add  rsample,rs0
3e66c                 |              
3e66c     1E 82 1D F4 |             	bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3e670     00 78 05 A6 |     	if_z    mov     pointer0, #0  
3e674     00 7A 05 A6 |     	if_z    mov     pointer0h, #0  
3e678     00 80 05 A6 |     	if_z    mov     envph0, #0  
3e67c     05 83 65 AC |     	if_z    wrlong  sstart0, ptra[5]          	' reset bit #30 in hub
3e680                 |             
3e680     28 08 64 FD | p403        	setq #4                          	' write new pointer, sample values and env pointer to the hub
3e684     00 79 65 FC | 	       	wrlong  pointer0,ptra
3e688     B5 F0 83 F1 |             	sub     ptra, channeladd         	' reset the pointer to channel parameters
3e68c                 | 
3e68c     85 A3 7D FB |             	djnf    cn, #p401
3e690                 | 
3e690     0F 76 E5 F4 |             	bitnot rsample, #15
3e694     0F 74 E5 F4 |             	bitnot lsample, #15
3e698                 |   							'           	getct ct2  	'debug
3e698                 |   							'          	sub ct2,ct1
3e698                 |   							'          	debug(udec(ct2))
3e698     24 28 60 FD |             	waitse1
3e69c                 |           
3e69c     0E 74 25 FC |            	wypin   lsample, #left              
3e6a0     0F 76 25 FC |                 wypin   rsample, #right        
3e6a4                 | 
3e6a4     BA A8 21 F9 | 		setword oldsample, lsample,#0		' for oscilloscope
3e6a8     BB A8 29 F9 | 		setword oldsample, rsample,#1
3e6ac                 | 		
3e6ac     00 76 05 F6 |             	mov rsample, #0
3e6b0     00 74 05 F6 |             	mov lsample, #0
3e6b4                 | 
3e6b4                 | '----------------------------------------------------------------------------------
3e6b4                 | '------------- Oscilloscope  -----------------------------------------------------
3e6b4                 | '----------------------------------------------------------------------------------   
3e6b4                 | 		
3e6b4     00 AA 0D F2 | 	    	cmp     scbase,#0 wz
3e6b8     20 00 90 AD |     	if_z    jmp #p302	   
3e6bc                 |  
3e6bc     01 B0 15 F7 |             	incmod  scope,#1 wc            		'  todo: scope speed instead of const  
3e6c0     D6 AE 01 C6 |     	if_c    mov scptr2,scptr
3e6c4     02 AE 65 C0 |     	if_c    shl scptr2,#2
3e6c8     D5 AE 01 C1 |     	if_c    add scptr2,scbase     
3e6cc     60 AE 65 FC |             	wrlong scptr2,#$60
3e6d0     D7 A8 61 CC |     	if_c    wrlong oldsample,scptr2
3e6d4     01 00 00 CF 
3e6d8     7F AC 05 C7 |     	if_c    incmod scptr,##639
3e6dc                 |             
3e6dc     C0 FD 9F FD |  p302           jmp     #loop            'loop
3e6e0                 | 
3e6e0                 | '----------------------------------------------------------------------------------
3e6e0                 | '------------- This is the end of the main loop -----------------------------------
3e6e0                 | '----------------------------------------------------------------------------------
3e6e0                 | 
3e6e0                 | '----------------------------------------------------------------------------------
3e6e0                 | '------------- PSRAM cache ----------- --------------------------------------------
3e6e0                 | '----------------------------------------------------------------------------------
3e6e0                 | 
3e6e0                 | ' There are 16 cache pointers for 16 channels
3e6e0                 | ' if 24 higher bits of address=cache, then get a word from the cache
3e6e0                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3e6e0                 | 
3e6e0                 | 
3e6e0     B6 E0 E1 F8 | cache_read  	getbyte addrlo,qq,#0 			' when this is called, qq is the addres of the sample			
3e6e4                 |          '   debug ("cache")
3e6e4     B6 E2 01 F6 | 	   	mov     addrhi,qq		
3e6e8     08 E2 45 F0 | 	    	shr     addrhi,#8		        ' get 24 upper bits
3e6ec     DD A2 95 F9 | 	    	alts    cn,#cache1            
3e6f0     00 E2 09 F2 | 	    	cmp	addrhi,0-0 wz               	' and compare with the cache pointer for the channel
3e6f4     34 00 90 AD |    	if_z    jmp     #p701	    			' if equal, cache hit, read the sample from it
3e6f8                 | 
3e6f8     DD A2 8D F9 | p702	    	altd    cn,#cache1			' cache miss. 
3e6fc     F1 00 00 F6 | 	    	mov     0-0,addrhi                  	' update the pointer
3e700                 | 	    ''	 debug(uhex(addrhi))
3e700     F1 DA 01 F6 | 	    	mov     cmd,addrhi			' prepare the mailbox
3e704     08 DA 65 F0 | 	    	shl     cmd,#8
3e708     0B DA 3D F8 |             	setnib  cmd, #%1011, #7             	' read burst from the external memory
3e70c     D1 DC 01 F6 |             	mov     hubaddr,cn                  	' to the channel cache
3e710     08 DC 65 F0 |             	shl     hubaddr,#8                  	'
3e714     DB DC 01 F1 |             	add     hubaddr,hubptr 
3e718     00 DF 05 F6 |             	mov     count,#256                  	' 256 bytes
3e71c     28 04 64 FD |             	setq    #2                          	' write 3 longs
3e720     B8 DA 61 FC |             	wrlong  cmd, mailbox                	' run it
3e724     B8 DA 01 FB | poll1       	rdlong  cmd, mailbox                	' poll mailbox for result
3e728     FE DB B5 FB |             	tjs     cmd, #poll1                 	' retry until valid 
3e72c                 |             
3e72c                 | 	
3e72c     D1 6C 01 F6 | p701	    	mov     qq,cn				' cache hit
3e730     08 6C 65 F0 | 	    	shl     qq,#8				' compute the cache start
3e734     DB 6C 01 F1 | 	    	add     qq,hubptr
3e738     F0 6C 01 F1 | 	    	add	qq,addrlo			' add 8 lower bits to the cache addredd
3e73c     B6 6E E1 0A |     	_ret_   rdword  spl,qq                      	' read a long from the cache
3e740                 |           
3e740                 |   
3e740                 | 
3e740                 | 
3e740                 | '---------------------------------------------------------------------------
3e740                 | '------- Variables ---------------------------------------------------------
3e740                 | '---------------------------------------------------------------------------
3e740                 | 
3e740                 | ' constants
3e740                 | 
3e740     00 00 00 00 | channeladd 	long 0
3e744                 | 
3e744                 | ' temporary variables 
3e744                 | 
3e744     00 00 00 00 | qq          	long 0
3e748     00 00 00 00 | spl         	long 0
3e74c     00 00 00 00 | mailbox     	long 0
3e750     00 00 00 00 | mailbox2    	long 0
3e754     00 00 00 00 | lsample     	long 0
3e758     00 00 00 00 | rsample     	long 0
3e75c                 | 
3e75c                 | ' channel parameter block
3e75c                 | 
3e75c     00 00 00 00 | pointer0    	long 0   
3e760     00 00 00 00 | pointer0h   	long 0  
3e764     00 00 00 00 | sample0     	long 0
3e768     00 00 00 00 | rawspl0	    	long 0
3e76c     00 00 00 00 | envph0	    	long 0
3e770     00 00 00 00 | sstart0     	long 0     ' start pointer and type at bit 31
3e774     00 00 00 00 | lstart0     	long 0
3e778     00 00 00 00 | lend0       	long 0
3e77c     00 00 00 00 | volpan0     	long 0
3e780     00 00 00 00 | freqskip0   	long 0
3e784     00 00 00 00 | command0    	long 0
3e788     00 00 00 00 | envptr0	    	long 0
3e78c     00 00 00 00 | envspd0	    	long 0
3e790     00 00 00 00 | envlen0	    	long 0
3e794     00 00 00 00 | res5	    	long 0
3e798     00 00 00 00 | res6	    	long 0
3e79c                 | 
3e79c     00 00 00 00 | oldspl		long 0
3e7a0     00 00 00 00 | afreq0      	long 0
3e7a4                 | 
3e7a4     00 00 00 00 | avol0       	long 0
3e7a8     00 00 00 00 | apan0       	long 0
3e7ac     00 00 00 00 | oldptrh	    	long 0
3e7b0     00 00 00 00 | cn          	long 0
3e7b4                 | 
3e7b4                 | ' Samples
3e7b4                 | 
3e7b4     00 00 00 00 | ls0         	long 0
3e7b8     00 00 00 00 | rs0         	long 0
3e7bc                 | 
3e7bc     00 00 00 00 | oldsample   	long 0
3e7c0                 | 
3e7c0     00 00 00 00 | scbase 		long 0
3e7c4     00 00 00 00 | scptr 		long 0
3e7c8     00 00 00 00 | scptr2		long 0
3e7cc     00 00 00 00 | scope 		long 0
3e7d0                 | 
3e7d0     44 00 17 00 | dac         	long %10111_00000000_01_00010_0     	'random dither
3e7d4     46 00 17 00 | dac2        	long %10111_00000000_01_00011_0     	'pwm
3e7d8                 | 
3e7d8     00 18 07 00 | hubptr      	long $71800
3e7dc     00 1E 00 00 | sr44100     	long 30*256
3e7e0                 | 
3e7e0     00 00 00 00 | cache1      	long 0
3e7e4     00 00 00 00 | cache2      	long 0
3e7e8     00 00 00 00 | cache3      	long 0
3e7ec     00 00 00 00 | cache4      	long 0
3e7f0     00 00 00 00 | cache5      	long 0
3e7f4     00 00 00 00 | cache6      	long 0
3e7f8     00 00 00 00 | cache7      	long 0
3e7fc     00 00 00 00 | cache8      	long 0
3e800     00 00 00 00 | cache9      	long 0
3e804     00 00 00 00 | cachea      	long 0
3e808     00 00 00 00 | cacheb      	long 0
3e80c     00 00 00 00 | cachec      	long 0
3e810     00 00 00 00 | cached      	long 0
3e814     00 00 00 00 | cachee      	long 0
3e818     00 00 00 00 | cachef      	long 0
3e81c     00 00 00 00 | cache0      	long 0
3e820                 | 
3e820     00 00 00 00 | cmd         	long 0
3e824     00 00 00 00 | hubaddr    	long 0
3e828     00 01 00 00 | count       	long 256
3e82c                 | 
3e82c     00 00 00 00 | addrlo 		long 0
3e830     00 00 00 00 | addrhi 		long 0
3e834     00 00 00 00 | pointer00 	long 0
3e838     00 00 00 00 | envhi 		long 0
3e83c     00 00 00 00 | envlo 		long 0
3e840     00 00 00 00 | envs1 		long 0
3e844     00 00 00 00 | envs2 		long 0
3e848     00 00 00 00 | noise0 		long 0
3e84c                 | 
3e84c                 | 'ct1 		long 0
3e84c                 | 'ct2 		long 0
3e84c                 | 
3e84c                 | 		fit 256		'todo: maybe the better interpolation. Or all params in cog
3e84c                 | 		fit 256		'todo: maybe the better interpolation. Or all params in cog
3e84c     00 00 00 00 
3e850     00 00 00 00 | null  			long 	0,0           ' for channel reset
3e854                 | 	alignl
3e854                 | __system__dat_
3e854     00 00 00 00 
3e858     00 00 00 00 | 	byte	$00[8]
3e85c     03 00 00 00 
3e860     00 00 00 00 
3e864     00 00 00 00 
3e868     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e86c     00 00 00 00 
      ...             
3eaf8     00 00 00 00 
3eafc     00 00 00 00 | 	byte	$00[660]
3eb00     00 00 40 0B | 	long	(180 {__system____root_opendir})<<20
3eb04     00 00 50 0B | 	long	(181 {__system____root_closedir})<<20
3eb08     00 00 60 0B | 	long	(182 {__system____root_readdir})<<20
3eb0c     00 00 70 0B | 	long	(183 {__system____root_stat})<<20
3eb10     00 00 00 00 
      ...             
3eb2c     00 00 00 00 
3eb30     00 00 00 00 | 	byte	$00[36]
3eb34     9C EB 03 00 | 	long	@@@__system__dat_ + 840
3eb38     9F EB 03 00 | 	long	@@@__system__dat_ + 843
3eb3c     C0 EB 03 00 | 	long	@@@__system__dat_ + 876
3eb40     D9 EB 03 00 | 	long	@@@__system__dat_ + 901
3eb44     F4 EB 03 00 | 	long	@@@__system__dat_ + 928
3eb48     0E EC 03 00 | 	long	@@@__system__dat_ + 954
3eb4c     1E EC 03 00 | 	long	@@@__system__dat_ + 970
3eb50     30 EC 03 00 | 	long	@@@__system__dat_ + 988
3eb54     42 EC 03 00 | 	long	@@@__system__dat_ + 1006
3eb58     54 EC 03 00 | 	long	@@@__system__dat_ + 1024
3eb5c     60 EC 03 00 | 	long	@@@__system__dat_ + 1036
3eb60     71 EC 03 00 | 	long	@@@__system__dat_ + 1053
3eb64     85 EC 03 00 | 	long	@@@__system__dat_ + 1073
3eb68     8F EC 03 00 | 	long	@@@__system__dat_ + 1083
3eb6c     9F EC 03 00 | 	long	@@@__system__dat_ + 1099
3eb70     AE EC 03 00 | 	long	@@@__system__dat_ + 1114
3eb74     C4 EC 03 00 | 	long	@@@__system__dat_ + 1136
3eb78     DD EC 03 00 | 	long	@@@__system__dat_ + 1161
3eb7c     F1 EC 03 00 | 	long	@@@__system__dat_ + 1181
3eb80     FF EC 03 00 | 	long	@@@__system__dat_ + 1195
3eb84     13 ED 03 00 | 	long	@@@__system__dat_ + 1215
3eb88     1F ED 03 00 | 	long	@@@__system__dat_ + 1227
3eb8c     31 ED 03 00 | 	long	@@@__system__dat_ + 1245
3eb90     49 ED 03 00 | 	long	@@@__system__dat_ + 1269
3eb94     5B ED 03 00 | 	long	@@@__system__dat_ + 1287
3eb98     6E ED 03 00 | 	long	@@@__system__dat_ + 1306
3eb9c     4F 4B 00 4E 
3eba0     75 6D 65 72 
3eba4     69 63 61 6C 
3eba8     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3ebac     75 6D 65 6E 
3ebb0     74 20 6F 75 
3ebb4     74 20 6F 66 
3ebb8     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3ebbc     61 69 6E 00 
3ebc0     52 65 73 75 
3ebc4     6C 74 20 6E 
3ebc8     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3ebcc     65 70 72 65 
3ebd0     73 65 6E 74 
3ebd4     61 62 6C 65 
3ebd8     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3ebdc     65 67 61 6C 
3ebe0     20 6D 75 6C 
3ebe4     74 69 62 79 
3ebe8     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3ebec     65 71 75 65 
3ebf0     6E 63 65 00 
3ebf4     4E 6F 20 73 
3ebf8     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3ebfc     66 69 6C 65 
3ec00     20 6F 72 20 
3ec04     64 69 72 65 
3ec08     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3ec0c     79 00 42 61 
3ec10     64 20 66 69 
3ec14     6C 65 20 6E 
3ec18     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3ec1c     72 00 50 65 
3ec20     72 6D 69 73 
3ec24     73 69 6F 6E 
3ec28     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3ec2c     69 65 64 00 
3ec30     4E 6F 74 20 
3ec34     65 6E 6F 75 
3ec38     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3ec3c     65 6D 6F 72 
3ec40     79 00 54 65 
3ec44     6D 70 6F 72 
3ec48     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3ec4c     66 61 69 6C 
3ec50     75 72 65 00 
3ec54     46 69 6C 65 
3ec58     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3ec5c     73 74 73 00 
3ec60     49 6E 76 61 
3ec64     6C 69 64 20 
3ec68     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3ec6c     6D 65 6E 74 
3ec70     00 54 6F 6F 
3ec74     20 6D 61 6E 
3ec78     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3ec7c     65 6E 20 66 
3ec80     69 6C 65 73 
3ec84     00 49 2F 4F 
3ec88     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3ec8c     6F 72 00 4E 
3ec90     6F 74 20 61 
3ec94     20 64 69 72 
3ec98     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3ec9c     72 79 00 49 
3eca0     73 20 61 20 
3eca4     64 69 72 65 
3eca8     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3ecac     79 00 52 65 
3ecb0     61 64 20 6F 
3ecb4     6E 6C 79 20 
3ecb8     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3ecbc     20 73 79 73 
3ecc0     74 65 6D 00 
3ecc4     46 75 6E 63 
3ecc8     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3eccc     20 6E 6F 74 
3ecd0     20 69 6D 70 
3ecd4     6C 65 6D 65 
3ecd8     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3ecdc     00 44 69 72 
3ece0     65 63 74 6F 
3ece4     72 79 20 6E 
3ece8     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3ecec     6D 70 74 79 
3ecf0     00 4E 61 6D 
3ecf4     65 20 74 6F 
3ecf8     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3ecfc     6E 67 00 44 
3ed00     65 76 69 63 
3ed04     65 20 6E 6F 
3ed08     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3ed0c     65 6B 61 62 
3ed10     6C 65 00 42 
3ed14     61 64 20 61 
3ed18     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3ed1c     73 73 00 42 
3ed20     72 6F 6B 65 
3ed24     6E 20 63 6F 
3ed28     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3ed2c     74 69 6F 6E 
3ed30     00 44 65 76 
3ed34     69 63 65 20 
3ed38     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3ed3c     65 73 6F 75 
3ed40     72 63 65 20 
3ed44     62 75 73 79 
3ed48     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3ed4c     73 73 20 64 
3ed50     65 76 69 63 
3ed54     65 20 6C 69 
3ed58     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3ed5c     6F 20 73 70 
3ed60     61 63 65 20 
3ed64     6F 6E 20 64 
3ed68     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3ed6c     65 00 55 6E 
3ed70     6B 6E 6F 77 
3ed74     6E 20 65 72 
3ed78     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3ed7c     00 00 00 00 
3ed80     00 00 00 00 
3ed84     00 00 00 00 | 	byte	$00[12]
3ed88     01 80 00 00 
3ed8c     00 00 00 00 
3ed90     00 00 00 00 
3ed94     00 00 00 00 | 	byte	$01, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ed98     00 00 00 00 | 	byte	$00, $00, $00, $00
3ed9c     00 00 50 0D | 	long	(213 {__system___tx})<<20
3eda0     00 00 60 0D | 	long	(214 {__system___rx})<<20
3eda4     00 00 00 00 | 	byte	$00, $00, $00, $00
3eda8     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3edac     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3edb0     00 00 00 00 
3edb4     00 00 00 00 | 	byte	$00[8]
3edb8     01 00 00 00 
3edbc     02 80 00 00 
3edc0     00 00 00 00 
3edc4     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3edc8     00 00 00 00 
3edcc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3edd0     00 00 50 0D | 	long	(213 {__system___tx})<<20
3edd4     00 00 60 0D | 	long	(214 {__system___rx})<<20
3edd8     00 00 00 00 | 	byte	$00, $00, $00, $00
3eddc     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3ede0     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3ede4     00 00 00 00 
3ede8     00 00 00 00 | 	byte	$00[8]
3edec     01 00 00 00 
3edf0     02 80 00 00 
3edf4     00 00 00 00 
3edf8     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3edfc     00 00 00 00 
3ee00     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ee04     00 00 50 0D | 	long	(213 {__system___tx})<<20
3ee08     00 00 60 0D | 	long	(214 {__system___rx})<<20
3ee0c     00 00 00 00 | 	byte	$00, $00, $00, $00
3ee10     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3ee14     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3ee18     00 00 00 00 
      ...             
3ef88     00 00 00 00 
3ef8c     00 00 00 00 | 	byte	$00[376]
3ef90     94 EF 03 00 | 	long	@@@__system__dat_ + 1856
3ef94     00 00 00 00 
3ef98     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ef9c                 | 	alignl
3ef9c                 | _fatfs_cc_dat_
3ef9c     C7 00 FC 00 
3efa0     E9 00 E2 00 
3efa4     E4 00 E0 00 
3efa8     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3efac     EA 00 EB 00 
3efb0     E8 00 EF 00 
3efb4     EE 00 EC 00 
3efb8     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3efbc     C9 00 E6 00 
3efc0     C6 00 F4 00 
3efc4     F6 00 F2 00 
3efc8     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3efcc     FF 00 D6 00 
3efd0     DC 00 F8 00 
3efd4     A3 00 D8 00 
3efd8     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3efdc     E1 00 ED 00 
3efe0     F3 00 FA 00 
3efe4     F1 00 D1 00 
3efe8     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3efec     BF 00 AE 00 
3eff0     AC 00 BD 00 
3eff4     BC 00 A1 00 
3eff8     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3effc     91 25 92 25 
3f000     93 25 02 25 
3f004     24 25 C1 00 
3f008     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3f00c     A9 00 63 25 
3f010     51 25 57 25 
3f014     5D 25 A2 00 
3f018     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3f01c     14 25 34 25 
3f020     2C 25 1C 25 
3f024     00 25 3C 25 
3f028     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3f02c     5A 25 54 25 
3f030     69 25 66 25 
3f034     60 25 50 25 
3f038     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3f03c     F0 00 D0 00 
3f040     CA 00 CB 00 
3f044     C8 00 31 01 
3f048     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3f04c     CF 00 18 25 
3f050     0C 25 88 25 
3f054     84 25 A6 00 
3f058     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3f05c     D3 00 DF 00 
3f060     D4 00 D2 00 
3f064     F5 00 D5 00 
3f068     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3f06c     DE 00 DA 00 
3f070     DB 00 D9 00 
3f074     FD 00 DD 00 
3f078     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3f07c     AD 00 B1 00 
3f080     17 20 BE 00 
3f084     B6 00 A7 00 
3f088     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3f08c     B0 00 A8 00 
3f090     B7 00 B9 00 
3f094     B3 00 B2 00 
3f098     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3f09c     61 00 1A 03 
3f0a0     E0 00 17 03 
3f0a4     F8 00 07 03 
3f0a8     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3f0ac     78 01 00 01 
3f0b0     30 01 32 01 
3f0b4     06 01 39 01 
3f0b8     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3f0bc     2E 01 79 01 
3f0c0     06 01 80 01 
3f0c4     4D 00 43 02 
3f0c8     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3f0cc     82 01 84 01 
3f0d0     84 01 86 01 
3f0d4     87 01 87 01 
3f0d8     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3f0dc     8B 01 8B 01 
3f0e0     8D 01 8E 01 
3f0e4     8F 01 90 01 
3f0e8     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3f0ec     93 01 94 01 
3f0f0     F6 01 96 01 
3f0f4     97 01 98 01 
3f0f8     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3f0fc     9B 01 9C 01 
3f100     9D 01 20 02 
3f104     9F 01 A0 01 
3f108     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3f10c     A2 01 A4 01 
3f110     A4 01 A6 01 
3f114     A7 01 A7 01 
3f118     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3f11c     AB 01 AC 01 
3f120     AC 01 AE 01 
3f124     AF 01 AF 01 
3f128     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3f12c     B3 01 B3 01 
3f130     B5 01 B5 01 
3f134     B7 01 B8 01 
3f138     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3f13c     BB 01 BC 01 
3f140     BC 01 BE 01 
3f144     F7 01 C0 01 
3f148     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3f14c     C3 01 C4 01 
3f150     C5 01 C4 01 
3f154     C7 01 C8 01 
3f158     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3f15c     CB 01 CA 01 
3f160     CD 01 10 01 
3f164     DD 01 01 00 
3f168     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3f16c     12 01 F3 01 
3f170     03 00 F1 01 
3f174     F4 01 F4 01 
3f178     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3f17c     22 02 12 01 
3f180     3A 02 09 00 
3f184     65 2C 3B 02 
3f188     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3f18c     66 2C 3F 02 
3f190     40 02 41 02 
3f194     41 02 46 02 
3f198     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3f19c     40 00 81 01 
3f1a0     86 01 55 02 
3f1a4     89 01 8A 01 
3f1a8     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3f1ac     5A 02 90 01 
3f1b0     5C 02 5D 02 
3f1b4     5E 02 5F 02 
3f1b8     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3f1bc     62 02 94 01 
3f1c0     64 02 65 02 
3f1c4     66 02 67 02 
3f1c8     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3f1cc     6A 02 62 2C 
3f1d0     6C 02 6D 02 
3f1d4     6E 02 9C 01 
3f1d8     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3f1dc     9D 01 73 02 
3f1e0     74 02 9F 01 
3f1e4     76 02 77 02 
3f1e8     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3f1ec     7A 02 7B 02 
3f1f0     7C 02 64 2C 
3f1f4     7E 02 7F 02 
3f1f8     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3f1fc     82 02 A9 01 
3f200     84 02 85 02 
3f204     86 02 87 02 
3f208     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3f20c     B1 01 B2 01 
3f210     45 02 8D 02 
3f214     8E 02 8F 02 
3f218     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3f21c     B7 01 7B 03 
3f220     03 00 FD 03 
3f224     FE 03 FF 03 
3f228     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3f22c     86 03 88 03 
3f230     89 03 8A 03 
3f234     B1 03 11 03 
3f238     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3f23c     A3 03 A3 03 
3f240     C4 03 08 03 
3f244     CC 03 03 00 
3f248     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3f24c     8F 03 D8 03 
3f250     18 01 F2 03 
3f254     0A 00 F9 03 
3f258     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3f25c     F5 03 F6 03 
3f260     F7 03 F7 03 
3f264     F9 03 FA 03 
3f268     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3f26c     20 03 50 04 
3f270     10 07 60 04 
3f274     22 01 8A 04 
3f278     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3f27c     0E 01 CF 04 
3f280     01 00 C0 04 
3f284     D0 04 44 01 
3f288     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3f28c     00 00 7D 1D 
3f290     01 00 63 2C 
3f294     00 1E 96 01 
3f298     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3f29c     00 1F 08 06 
3f2a0     10 1F 06 06 
3f2a4     20 1F 08 06 
3f2a8     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3f2ac     40 1F 06 06 
3f2b0     51 1F 07 00 
3f2b4     59 1F 52 1F 
3f2b8     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3f2bc     5D 1F 56 1F 
3f2c0     5F 1F 60 1F 
3f2c4     08 06 70 1F 
3f2c8     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3f2cc     BB 1F C8 1F 
3f2d0     C9 1F CA 1F 
3f2d4     CB 1F DA 1F 
3f2d8     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3f2dc     F9 1F EA 1F 
3f2e0     EB 1F FA 1F 
3f2e4     FB 1F 80 1F 
3f2e8     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3f2ec     08 06 A0 1F 
3f2f0     08 06 B0 1F 
3f2f4     04 00 B8 1F 
3f2f8     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3f2fc     BC 1F CC 1F 
3f300     01 00 C3 1F 
3f304     D0 1F 02 06 
3f308     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3f30c     E5 1F 01 00 
3f310     EC 1F F3 1F 
3f314     01 00 FC 1F 
3f318     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3f31c     32 21 70 21 
3f320     10 02 84 21 
3f324     01 00 83 21 
3f328     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3f32c     30 2C 2F 04 
3f330     60 2C 02 01 
3f334     67 2C 06 01 
3f338     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3f33c     80 2C 64 01 
3f340     00 2D 26 08 
3f344     41 FF 1A 03 
3f348     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3f34c     05 07 09 0E 
3f350     10 12 14 16 
3f354     18 1C 1E 43 
3f358     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3f35c     41 41 43 45 
3f360     45 45 49 49 
3f364     49 41 41 45 
3f368     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3f36c     4F 55 55 59 
3f370     4F 55 4F 9C 
3f374     4F 9E 9F 41 
3f378     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3f37c     A5 A6 A7 A8 
3f380     A9 AA AB AC 
3f384     AD AE AF B0 
3f388     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3f38c     41 41 41 B8 
3f390     B9 BA BB BC 
3f394     BD BE BF C0 
3f398     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3f39c     C5 41 41 C8 
3f3a0     C9 CA CB CC 
3f3a4     CD CE CF D1 
3f3a8     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3f3ac     49 49 49 49 
3f3b0     D9 DA DB DC 
3f3b4     DD 49 DF 4F 
3f3b8     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3f3bc     4F E6 E8 E8 
3f3c0     55 55 55 59 
3f3c4     59 EE EF F0 
3f3c8     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3f3cc     F5 F6 F7 F8 
3f3d0     F9 FA FB FC 
3f3d4     FD FE FF 00 
3f3d8     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3f3dc     00 00 00 00 
3f3e0     FF FF FF FF 
3f3e4     1F 00 00 00 
3f3e8     1C 00 00 00 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00
3f3ec     1F 00 00 00 
3f3f0     1E 00 00 00 
3f3f4     1F 00 00 00 
3f3f8     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3f3fc     1F 00 00 00 
3f400     1F 00 00 00 
3f404     1E 00 00 00 
3f408     1F 00 00 00 | 	byte	$1f, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3f40c     1E 00 00 00 
3f410     1F 00 00 00 
3f414     00 00 00 00 
3f418     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00
3f41c     3B 00 00 00 
3f420     5A 00 00 00 
3f424     78 00 00 00 
3f428     97 00 00 00 | 	byte	$3b, $00, $00, $00, $5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00
3f42c     B5 00 00 00 
3f430     D4 00 00 00 
3f434     F3 00 00 00 
3f438     11 01 00 00 | 	byte	$b5, $00, $00, $00, $d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00
3f43c     30 01 00 00 
3f440     4E 01 00 00 
3f444     6D 01 00 00 
3f448     FF FF FF FF | 	byte	$30, $01, $00, $00, $4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff
3f44c     00 00 00 00 
      ...             
3f468     00 00 00 00 
3f46c     00 00 00 00 | 	byte	$00[36]
3f470     8E F4 03 00 | 	long	@@@_fatfs_cc_dat_ + 1266
3f474     92 F4 03 00 | 	long	@@@_fatfs_cc_dat_ + 1270
3f478     00 00 00 00 
3f47c     00 00 00 00 
3f480     00 00 00 00 
3f484     00 00 00 00 
3f488     00 00       | 	byte	$00[18]
3f48a     3F 3F 3F 00 
3f48e     55 43 54 00 
3f492     55 43 54 00 
3f496     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3f49a     00 00 00 00 
3f49e     00 00 00    | 	byte	$00[7]
3f4a1     CA 9A 3B 00 
3f4a5     00 00 00 01 
3f4a9     01 01 01 01 
3f4ad     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3f4b1     91 11 11 11 
3f4b5     11 01 01 01 
3f4b9     01 01 01 01 
3f4bd     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3f4c1     01 01 01 01 
3f4c5     01 01 01    | 	byte	$01[7]
3f4c8     90 20 20 20 
3f4cc     20 20 20 20 
3f4d0     20 20 20 20 
3f4d4     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3f4d8     42 42 42 42 
3f4dc     42 42 42 42 
3f4e0     42 42       | 	byte	$42[10]
3f4e2     20 20 20 20 
3f4e6     20 20 20    | 	byte	$20[7]
3f4e9     44 44 44 44 
3f4ed     44 44       | 	byte	$44[6]
3f4ef     04 04 04 04 
3f4f3     04 04 04 04 
3f4f7     04 04 04 04 
3f4fb     04 04 04 04 
3f4ff     04 04 04 04 | 	byte	$04[20]
3f503     20 20 20 20 
3f507     20 20       | 	byte	$20[6]
3f509     48 48 48 48 
3f50d     48 48       | 	byte	$48[6]
3f50f     08 08 08 08 
3f513     08 08 08 08 
3f517     08 08 08 08 
3f51b     08 08 08 08 
3f51f     08 08 08 08 | 	byte	$08[20]
3f523     20 20 20 20 
3f527     01 00 00 00 
3f52b     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3f52c                 | __methodtable__
3f52c     90 5A 01 00 | 	long	@_do_no_command
3f530     58 E5 01 00 | 	long	@_do_plus
3f534     DC D9 01 00 | 	long	@_do_minus
3f538     9C E4 01 00 | 	long	@_do_or
3f53c     A0 DE 01 00 | 	long	@_do_mul
3f540     4C CA 01 00 | 	long	@_do_fdiv
3f544     78 C4 01 00 | 	long	@_do_and
3f548     34 C5 01 00 | 	long	@_do_div
3f54c     1C DD 01 00 | 	long	@_do_mod
3f550     28 EA 01 00 | 	long	@_do_shl
3f554     E4 EA 01 00 | 	long	@_do_shr
3f558     D8 E8 01 00 | 	long	@_do_power
3f55c     44 BC 01 00 | 	long	@_do_getvar
3f560     7C 84 01 00 | 	long	@_do_push
3f564     D0 B7 01 00 | 	long	@_do_assign
3f568     50 F5 00 00 | 	long	@_do_cls
3f56c     68 54 01 00 | 	long	@_do_new
3f570     20 7D 01 00 | 	long	@_do_plot
3f574     F8 16 01 00 | 	long	@_do_draw
3f578     28 7F 01 00 | 	long	@_do_print
3f57c     38 F3 00 00 | 	long	@_do_circle
3f580     00 19 01 00 | 	long	@_do_fcircle
3f584     34 E2 00 00 | 	long	@_do_box
3f588     8C 21 01 00 | 	long	@_do_frame
3f58c     9C F7 00 00 | 	long	@_do_color
3f590     1C 1F 01 00 | 	long	@_do_for
3f594     CC 56 01 00 | 	long	@_do_next
3f598     74 43 01 00 | 	long	@_do_list
3f59c     60 9B 01 00 | 	long	@_do_run
3f5a0     2C 18 01 00 | 	long	@_do_error
3f5a4     78 2D 01 00 | 	long	@_do_fast_goto
3f5a8     68 2E 01 00 | 	long	@_do_find_goto
3f5ac     30 30 01 00 | 	long	@_do_slow_goto
3f5b0     B0 5A 01 00 | 	long	@_do_nothing
3f5b4     84 9F 01 00 | 	long	@_do_save
3f5b8     CC 45 01 00 | 	long	@_do_load
3f5bc     10 73 01 00 | 	long	@_do_pinwrite
3f5c0     64 B5 01 00 | 	long	@_do_waitms
3f5c4     44 B6 01 00 | 	long	@_do_waitvbl
3f5c8     98 32 01 00 | 	long	@_do_if
3f5cc     C4 17 01 00 | 	long	@_do_else
3f5d0     B8 C6 01 00 | 	long	@_do_eq
3f5d4     9C CB 01 00 | 	long	@_do_ge
3f5d8     D4 D2 01 00 | 	long	@_do_le
3f5dc     38 CF 01 00 | 	long	@_do_gt
3f5e0     68 D6 01 00 | 	long	@_do_lt
3f5e4     08 E1 01 00 | 	long	@_do_ne
3f5e8     DC 98 01 00 | 	long	@_do_rnd
3f5ec     10 E4 00 00 | 	long	@_do_brun
3f5f0     74 DE 00 00 | 	long	@_do_beep
3f5f4     08 10 01 00 | 	long	@_do_dir
3f5f8     8C 6F 01 00 | 	long	@_do_paper
3f5fc     60 36 01 00 | 	long	@_do_ink
3f600     A0 1E 01 00 | 	long	@_do_font
3f604     E8 4E 01 00 | 	long	@_do_mode
3f608     24 53 01 00 | 	long	@_do_mouse
3f60c     10 2C 01 00 | 	long	@_do_gettime
3f610     BC FC 00 00 | 	long	@_do_cursor
3f614     A8 F4 00 00 | 	long	@_do_click
3f618     E0 53 01 00 | 	long	@_do_mousex
3f61c     24 54 01 00 | 	long	@_do_mousey
3f620     58 53 01 00 | 	long	@_do_mousek
3f624     9C 53 01 00 | 	long	@_do_mousew
3f628     38 AA 01 00 | 	long	@_do_sin
3f62c     24 AD 01 00 | 	long	@_do_stick
3f630     24 B0 01 00 | 	long	@_do_strig
3f634     7C AB 01 00 | 	long	@_do_sprite
3f638     40 0C 01 00 | 	long	@_do_defsprite
3f63c     D8 29 01 00 | 	long	@_do_getpixel
3f640     40 B5 01 00 | 	long	@_do_waitclock
3f644     6C DC 01 00 | 	long	@_do_negative
3f648     50 89 01 00 | 	long	@_do_rdpin
3f64c     EC 9A 01 00 | 	long	@_do_rqpin
3f650     44 71 01 00 | 	long	@_do_pinread
3f654     50 B6 01 00 | 	long	@_do_wrpin
3f658     D0 B6 01 00 | 	long	@_do_wxpin
3f65c     50 B7 01 00 | 	long	@_do_wypin
3f660     84 70 01 00 | 	long	@_do_pinfloat
3f664     04 71 01 00 | 	long	@_do_pinlo
3f668     C4 70 01 00 | 	long	@_do_pinhi
3f66c     C8 71 01 00 | 	long	@_do_pinstart
3f670     D0 72 01 00 | 	long	@_do_pintoggle
3f674     A0 7E 01 00 | 	long	@_do_position
3f678     AC FB 00 00 | 	long	@_do_cos
3f67c     A0 B1 01 00 | 	long	@_do_tan
3f680     70 DD 00 00 | 	long	@_do_atn
3f684     74 DC 00 00 | 	long	@_do_asin
3f688     2C DA 00 00 | 	long	@_do_acos
3f68c     44 AC 01 00 | 	long	@_do_sqr
3f690     DC 19 01 00 | 	long	@_do_fill
3f694     64 05 01 00 | 	long	@_do_defsnd
3f698     BC FD 00 00 | 	long	@_do_defenv
3f69c     28 89 01 00 | 	long	@_do_rad
3f6a0     A0 0E 01 00 | 	long	@_do_deg
3f6a4     E0 36 01 00 | 	long	@_do_int
3f6a8     98 73 01 00 | 	long	@_do_play
3f6ac     F0 A4 01 00 | 	long	@_do_setdelay
3f6b0     90 A5 01 00 | 	long	@_do_setenv
3f6b4     30 A6 01 00 | 	long	@_do_setlen
3f6b8     D0 A6 01 00 | 	long	@_do_setpan
3f6bc     10 A8 01 00 | 	long	@_do_setvol
3f6c0     B0 A8 01 00 | 	long	@_do_setwave
3f6c4     70 A7 01 00 | 	long	@_do_setsustain
3f6c8     10 96 01 00 | 	long	@_do_release
3f6cc     10 28 01 00 | 	long	@_do_getenvsustain
3f6d0     D0 7D 01 00 | 	long	@_do_poke
3f6d4     60 16 01 00 | 	long	@_do_dpoke
3f6d8     6C 4B 01 00 | 	long	@_do_lpoke
3f6dc     14 70 01 00 | 	long	@_do_peek
3f6e0     F0 15 01 00 | 	long	@_do_dpeek
3f6e4     FC 4A 01 00 | 	long	@_do_lpeek
3f6e8     DC 22 01 00 | 	long	@_do_fre
3f6ec     08 29 01 00 | 	long	@_do_getnotevalue
3f6f0     F0 C0 01 00 | 	long	@_do_getaddr
3f6f4     7C 33 01 00 | 	long	@_do_inkey
3f6f8     AC D9 00 00 | 	long	@_do_abs
3f6fc     74 31 01 00 | 	long	@_do_hex
3f700     10 E1 00 00 | 	long	@_do_bin
3f704     9C B2 01 00 | 	long	@_do_val
3f708     58 F2 00 00 | 	long	@_do_chr
3f70c     28 DB 00 00 | 	long	@_do_asc
3f710     A8 40 01 00 | 	long	@_do_left
3f714     70 97 01 00 | 	long	@_do_right
3f718     8C 4C 01 00 | 	long	@_do_mid
3f71c     14 42 01 00 | 	long	@_do_len
3f720     60 2C 01 00 | 	long	@_do_gosub
3f724     C4 96 01 00 | 	long	@_do_return
3f728     E8 17 01 00 | 	long	@_do_end
3f72c     68 7E 01 00 | 	long	@_do_pop
3f730     BC 49 01 00 | 	long	@_do_log
3f734     B4 F0 00 00 | 	long	@_do_changevol
3f738     74 F1 00 00 | 	long	@_do_changewav
3f73c     E0 EF 00 00 | 	long	@_do_changepan
3f740     08 EC 00 00 | 	long	@_do_changefreq
3f744     50 A9 01 00 | 	long	@_do_shutup
3f748     98 9A 01 00 | 	long	@_do_round
3f74c     1C 18 01 00 | 	long	@_do_enter
3f750     78 5B 01 00 | 	long	@_do_open
3f754     D4 F4 00 00 | 	long	@_do_close
3f758     40 23 01 00 | 	long	@_do_get
3f75c     98 85 01 00 | 	long	@_do_put
3f760     48 E6 00 00 | 	long	@_do_cd
3f764     C8 0E 01 00 | 	long	@_do_delete
3f768     28 4E 01 00 | 	long	@_do_mkdir
3f76c     64 DF 00 00 | 	long	@_do_blit
3f770     A8 22 01 00 | 	long	@_do_framebuf
3f774     B4 5A 01 00 | 	long	@_do_on
3f778     34 AB 01 00 | 	long	@_do_skip
3f77c     9C 37 01 00 | 	long	@_do_input
3f780     B8 8B 01 00 | 	long	@_do_read
3f784     84 96 01 00 | 	long	@_do_restore
3f788     F0 68 01 00 | 	long	@_do_padx
3f78c     24 6B 01 00 | 	long	@_do_pady
3f790     58 6D 01 00 | 	long	@_do_padz
3f794     EC 5D 01 00 | 	long	@_do_padrx
3f798     20 60 01 00 | 	long	@_do_padry
3f79c     54 62 01 00 | 	long	@_do_padrz
3f7a0     BC 66 01 00 | 	long	@_do_padw
3f7a4     88 64 01 00 | 	long	@_do_pads
3f7a8     D4 F7 00 00 | 	long	@_do_copy
3f7ac     90 F5 00 00 | 	long	@_do_coginit
3f7b0     5C F7 00 00 | 	long	@_do_cogstop
3f7b4     04 4C 01 00 | 	long	@_do_memlo
3f7b8     48 4C 01 00 | 	long	@_do_memtop
3f7bc     14 A3 01 00 | 	long	@_do_setcolor
3f7c0     18 27 01 00 | 	long	@_do_getcolor
3f7c4     F0 FC 00 00 | 	long	@_do_defchar
3f7c8     BC 96 01 00 | 	long	@_do_restorepalette
3f7cc     E4 1A 01 00 | 	long	@_do_findfirst
3f7d0     E4 1D 01 00 | 	long	@_do_findnext
3f7d4     74 A2 01 00 | 	long	@_do_setamode
3f7d8     04 2B 01 00 | 	long	@_do_getrealfreq
3f7dc     A0 AE 01 00 | 	long	@_do_str
3f7e0     28 2D 02 00 | 	long	@_hg010b_spin2_putchar
3f7e4     A8 25 03 00 | 	long	@__system___struct___bas_wrap_sender_tx_
3f7e8     EC 25 03 00 | 	long	@__system___struct___bas_wrap_sender_rx_
3f7ec     34 26 03 00 | 	long	@__system___struct___bas_wrap_sender_close_
3f7f0     D8 24 03 00 | 	long	@__system___struct__s_vfs_file_t_putchar_
3f7f4     48 25 03 00 | 	long	@__system___struct__s_vfs_file_t_getchar_
3f7f8     90 24 03 00 | 	long	@__system____strs_cl_pfunc_
3f7fc     38 9B 02 00 | 	long	@__system____root_opendir
3f800     D4 9B 02 00 | 	long	@__system____root_closedir
3f804     50 9B 02 00 | 	long	@__system____root_readdir
3f808     DC 9B 02 00 | 	long	@__system____root_stat
3f80c     A0 93 02 00 | 	long	@__system____default_putc
3f810     1C 93 02 00 | 	long	@__system____default_getc
3f814     4C 94 02 00 | 	long	@__system____default_flush
3f818     E0 17 03 00 | 	long	@_fatfs_cc_v_close
3f81c     C8 1A 03 00 | 	long	@_fatfs_cc_v_read
3f820     54 1B 03 00 | 	long	@_fatfs_cc_v_write
3f824     CC 1B 03 00 | 	long	@_fatfs_cc_v_lseek
3f828     68 1C 03 00 | 	long	@_fatfs_cc_v_ioctl
3f82c     94 1D 03 00 | 	long	@_fatfs_cc_v_flush
3f830     BC 1C 03 00 | 	long	@_fatfs_cc_v_open
3f834     4C 17 03 00 | 	long	@_fatfs_cc_v_creat
3f838     1C 18 03 00 | 	long	@_fatfs_cc_v_opendir
3f83c     90 18 03 00 | 	long	@_fatfs_cc_v_closedir
3f840     D0 18 03 00 | 	long	@_fatfs_cc_v_readdir
3f844     9C 19 03 00 | 	long	@_fatfs_cc_v_stat
3f848     7C 1C 03 00 | 	long	@_fatfs_cc_v_mkdir
3f84c     9C 1C 03 00 | 	long	@_fatfs_cc_v_rmdir
3f850     8C 1C 03 00 | 	long	@_fatfs_cc_v_remove
3f854     AC 1C 03 00 | 	long	@_fatfs_cc_v_rename
3f858     E0 1D 03 00 | 	long	@_fatfs_cc_v_init
3f85c     E8 1D 03 00 | 	long	@_fatfs_cc_v_deinit
3f860     E0 BB 02 00 | 	long	@_sdmm_cc_v_read
3f864     EC BB 02 00 | 	long	@_sdmm_cc_v_write
3f868     C8 BC 02 00 | 	long	@_sdmm_cc_v_close
3f86c     F8 BB 02 00 | 	long	@_sdmm_cc_v_ioctl
3f870     C0 BC 02 00 | 	long	@_sdmm_cc_v_flush
3f874     1C BC 02 00 | 	long	@_sdmm_cc_v_lseek
3f878     F0 BC 02 00 | 	long	@_sdmm_cc_v_putc
3f87c     3C BD 02 00 | 	long	@_sdmm_cc_v_getc
3f880     9C 4C 02 00 | 	long	@__system___tx
3f884     DC 4C 02 00 | 	long	@__system___rx
3f888     08 A6 02 00 | 	long	@__system___rxtxioctl_0788
3f88c     60 A6 02 00 | 	long	@__system____dummy_flush_0789
3f890                 | __heap_base
3f890     00 00 00 00 
      ...             
56f90     00 00 00 00 
56f94     00 00 00 00 | 	long	0[24002]
56f98                 | objmem
56f98     00 00 00 00 
      ...             
6188c     00 00 00 00 
61890     00 00 00 00 | 	long	0[10815]
61894                 | stackspace
61894     00 00 00 00 | 	long	0[1]
61898 140             | 	org	COG_BSS_START
61898 140             | _var01
61898 140             | 	res	1
61898 141             | _var02
61898 141             | 	res	1
61898 142             | _var03
61898 142             | 	res	1
61898 143             | _var04
61898 143             | 	res	1
61898 144             | _var05
61898 144             | 	res	1
61898 145             | _var06
61898 145             | 	res	1
61898 146             | _var07
61898 146             | 	res	1
61898 147             | _var08
61898 147             | 	res	1
61898 148             | _var09
61898 148             | 	res	1
61898 149             | arg01
61898 149             | 	res	1
61898 14a             | arg02
61898 14a             | 	res	1
61898 14b             | arg03
61898 14b             | 	res	1
61898 14c             | arg04
61898 14c             | 	res	1
61898 14d             | arg05
61898 14d             | 	res	1
61898 14e             | arg06
61898 14e             | 	res	1
61898 14f             | arg07
61898 14f             | 	res	1
61898 150             | arg08
61898 150             | 	res	1
61898 151             | arg09
61898 151             | 	res	1
61898 152             | arg10
61898 152             | 	res	1
61898 153             | local01
61898 153             | 	res	1
61898 154             | local02
61898 154             | 	res	1
61898 155             | local03
61898 155             | 	res	1
61898 156             | local04
61898 156             | 	res	1
61898 157             | local05
61898 157             | 	res	1
61898 158             | local06
61898 158             | 	res	1
61898 159             | local07
61898 159             | 	res	1
61898 15a             | local08
61898 15a             | 	res	1
61898 15b             | local09
61898 15b             | 	res	1
61898 15c             | local10
61898 15c             | 	res	1
61898 15d             | local11
61898 15d             | 	res	1
61898 15e             | local12
61898 15e             | 	res	1
61898 15f             | local13
61898 15f             | 	res	1
61898 160             | local14
61898 160             | 	res	1
61898 161             | local15
61898 161             | 	res	1
61898 162             | local16
61898 162             | 	res	1
61898 163             | local17
61898 163             | 	res	1
61898 164             | local18
61898 164             | 	res	1
61898 165             | local19
61898 165             | 	res	1
61898 166             | local20
61898 166             | 	res	1
61898 167             | local21
61898 167             | 	res	1
61898 168             | local22
61898 168             | 	res	1
61898 169             | local23
61898 169             | 	res	1
61898 16a             | local24
61898 16a             | 	res	1
61898 16b             | local25
61898 16b             | 	res	1
61898 16c             | local26
61898 16c             | 	res	1
61898 16d             | local27
61898 16d             | 	res	1
61898 16e             | local28
61898 16e             | 	res	1
61898 16f             | local29
61898 16f             | 	res	1
61898 170             | local30
61898 170             | 	res	1
61898 171             | local31
61898 171             | 	res	1
61898 172             | local32
61898 172             | 	res	1
61898 173             | local33
61898 173             | 	res	1
61898 174             | local34
61898 174             | 	res	1
61898 175             | local35
61898 175             | 	res	1
61898 176             | local36
61898 176             | 	res	1
61898 177             | local37
61898 177             | 	res	1
61898 178             | local38
61898 178             | 	res	1
61898 179             | local39
61898 179             | 	res	1
61898 17a             | local40
61898 17a             | 	res	1
61898 17b             | local41
61898 17b             | 	res	1
61898 17c             | local42
61898 17c             | 	res	1
61898 17d             | local43
61898 17d             | 	res	1
61898 17e             | local44
61898 17e             | 	res	1
61898 17f             | local45
61898 17f             | 	res	1
61898 180             | local46
61898 180             | 	res	1
61898 181             | local47
61898 181             | 	res	1
61898 182             | local48
61898 182             | 	res	1
61898 183             | local49
61898 183             | 	res	1
61898 184             | local50
61898 184             | 	res	1
61898 185             | local51
61898 185             | 	res	1
61898 186             | local52
61898 186             | 	res	1
61898 187             | muldiva_
61898 187             | 	res	1
61898 188             | muldivb_
61898 188             | 	res	1
61898 189             | 	fit	480
61898 189             | 
