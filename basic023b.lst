00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic023b.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 23
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 EC 45 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 31 63 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 30 61 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 31 61 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 62 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 60 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 30 61 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 31 63 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec DC 08 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed EC 06 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 E4 F6 05 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 EC F5 02 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 CC F9 02 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 28 73 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 0C 01 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 60 94 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 10 BC 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa C8 B9 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb A0 CB 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc B0 EB 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7A 00 00 FF 
00818     03 E4 05 F1 | 	add	objptr, ##62467
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7A 00 00 FF 
0082c     48 E4 85 F1 | 	sub	objptr, ##62536
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     10 73 B1 FD | 	call	#__system___waitms
0083c     7A 00 00 FF 
00840     48 E4 05 F1 | 	add	objptr, ##62536
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7A 00 00 FF 
00854     48 E4 85 F1 | 	sub	objptr, ##62536
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     E8 72 B1 FD | 	call	#__system___waitms
00864     7A 00 00 FF 
00868     48 E4 05 F1 | 	add	objptr, ##62536
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7A 00 00 FF 
0087c     48 E4 85 F1 | 	sub	objptr, ##62536
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     C0 72 B1 FD | 	call	#__system___waitms
0088c     7A 00 00 FF 
00890     48 E4 05 F1 | 	add	objptr, ##62536
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7A 00 00 FF 
008a4     48 E4 85 F1 | 	sub	objptr, ##62536
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     79 00 00 FF 
008d4     C0 E5 05 F1 | 	add	objptr, ##62400
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     79 00 00 FF 
00914     C8 E5 85 F1 | 	sub	objptr, ##62408
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     CC 68 B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     1C 69 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     0C 69 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     79 00 00 FF 
00980     D0 E5 05 F1 | 	add	objptr, ##62416
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     79 00 00 FF 
009ac     EC E5 85 F1 | 	sub	objptr, ##62444
009b0     70 68 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     79 00 00 FF 
009e0     D0 E5 05 F1 | 	add	objptr, ##62416
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     79 00 00 FF 
00a08     EC E5 85 F1 | 	sub	objptr, ##62444
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     21 4A 05 F6 | 	mov	COUNT_, #33
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     48 F0 07 F1 | 	add	ptra, ##584
00a2c     55 00 00 FF 
00a30     F0 E5 05 F1 | 	add	objptr, ##44016
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     00 20 06 F6 | 	mov	local02, #0
00a50     13 00 00 FF 
00a54     58 E4 05 F1 | 	add	objptr, ##9816
00a58     F2 00 68 FC | 	wrlong	#0, objptr
00a5c     69 00 00 FF 
00a60     50 E4 85 F1 | 	sub	objptr, ##53840
00a64     00 22 06 F6 | 	mov	local03, #0
00a68                 | LR__0020
00a68                 | ' 
00a68                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a68                 | ' 
00a68                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a68                 | ' 
00a68                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a68     00 24 06 F6 | 	mov	local04, #0
00a6c     20 4E 05 F1 | 	add	fp, #32
00a70     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a74                 | LR__0021
00a74     12 27 02 F6 | 	mov	local05, local04
00a78     02 26 66 F0 | 	shl	local05, #2
00a7c     A7 26 02 F1 | 	add	local05, fp
00a80     13 01 68 FC | 	wrlong	#0, local05
00a84     01 24 06 F1 | 	add	local04, #1
00a88     7E 24 56 F2 | 	cmps	local04, #126 wc
00a8c     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a90                 | LR__0022
00a90     20 4E 85 F1 | 	sub	fp, #32
00a94                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00a94     00 24 06 F6 | 	mov	local04, #0
00a98     53 00 00 FF 
00a9c     E0 E5 05 F1 | 	add	objptr, ##42976
00aa0     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aa4                 | LR__0023
00aa4     12 1F 02 F6 | 	mov	local01, local04
00aa8     03 1E 66 F0 | 	shl	local01, #3
00aac     F2 1E 02 F1 | 	add	local01, objptr
00ab0     34 01 00 FF 
00ab4     32 17 06 F6 | 	mov	arg03, ##@LR__4167
00ab8     0F 17 62 FC | 	wrlong	arg03, local01
00abc     12 1F 02 F6 | 	mov	local01, local04
00ac0     03 1E 66 F0 | 	shl	local01, #3
00ac4     F2 28 02 F6 | 	mov	local06, objptr
00ac8     F2 1E 02 F1 | 	add	local01, objptr
00acc     00 2A 06 F6 | 	mov	local07, #0
00ad0     04 1E 06 F1 | 	add	local01, #4
00ad4     0F 01 68 FC | 	wrlong	#0, local01
00ad8     01 24 06 F1 | 	add	local04, #1
00adc     7E 24 56 F2 | 	cmps	local04, #126 wc
00ae0     C0 FF 9F CD |  if_b	jmp	#LR__0023
00ae4                 | LR__0024
00ae4     02 00 00 FF 
00ae8     10 E4 05 F1 | 	add	objptr, ##1040
00aec     F2 12 02 FB | 	rdlong	arg01, objptr
00af0     55 00 00 FF 
00af4     F0 E5 85 F1 | 	sub	objptr, ##44016
00af8     A0 91 B1 FD | 	call	#__system__RTrim_S
00afc     FD 12 02 F6 | 	mov	arg01, result1
00b00     D8 90 B1 FD | 	call	#__system__LTrim_S
00b04     55 00 00 FF 
00b08     F0 E5 05 F1 | 	add	objptr, ##44016
00b0c     F2 FA 61 FC | 	wrlong	result1, objptr
00b10     34 01 00 FF 
00b14     33 1F 06 F6 | 	mov	local01, ##@LR__4168
00b18     24 00 00 FF 
00b1c     88 E4 05 F1 | 	add	objptr, ##18568
00b20     F2 1E 62 FC | 	wrlong	local01, objptr
00b24     24 00 00 FF 
00b28     88 E4 85 F1 | 	sub	objptr, ##18568
00b2c     F2 12 02 FB | 	rdlong	arg01, objptr
00b30     55 00 00 FF 
00b34     F0 E5 85 F1 | 	sub	objptr, ##44016
00b38     09 2D 02 F6 | 	mov	local08, arg01
00b3c     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b40                 | LR__0025
00b40     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b44     01 2C 06 51 |  if_ne	add	local08, #1
00b48     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b4c                 | LR__0026
00b4c     09 2D 8A F1 | 	sub	local08, arg01 wz
00b50     7A 00 00 FF 
00b54     7C E4 05 F1 | 	add	objptr, ##62588
00b58     F2 2C 62 FC | 	wrlong	local08, objptr
00b5c                 | ' if l=0 then goto 101
00b5c     7A 00 00 FF 
00b60     7C E4 85 F1 | 	sub	objptr, ##62588
00b64     88 1D 90 AD |  if_e	jmp	#LR__0126
00b68     7A 00 00 FF 
00b6c     80 E4 05 F1 | 	add	objptr, ##62592
00b70     F2 00 68 FC | 	wrlong	#0, objptr
00b74                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b74                 | ' for i=1 to len(line$)
00b74     01 24 06 F6 | 	mov	local04, #1
00b78     24 00 00 FF 
00b7c     90 E4 85 F1 | 	sub	objptr, ##18576
00b80     F2 12 02 FB | 	rdlong	arg01, objptr
00b84     55 00 00 FF 
00b88     F0 E5 85 F1 | 	sub	objptr, ##44016
00b8c     09 2D 02 F6 | 	mov	local08, arg01
00b90     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00b94                 | LR__0027
00b94     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b98     01 2C 06 51 |  if_ne	add	local08, #1
00b9c     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00ba0                 | LR__0028
00ba0     09 2D 82 F1 | 	sub	local08, arg01
00ba4     16 2F 02 F6 | 	mov	local09, local08
00ba8     01 2E 06 F1 | 	add	local09, #1
00bac                 | LR__0029
00bac     17 25 52 F2 | 	cmps	local04, local09 wc
00bb0     00 01 90 3D |  if_ae	jmp	#LR__0032
00bb4                 | ' 
00bb4                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bb4     55 00 00 FF 
00bb8     F0 E5 05 F1 | 	add	objptr, ##44016
00bbc     F2 12 02 FB | 	rdlong	arg01, objptr
00bc0     55 00 00 FF 
00bc4     F0 E5 85 F1 | 	sub	objptr, ##44016
00bc8     12 15 02 F6 | 	mov	arg02, local04
00bcc     01 16 06 F6 | 	mov	arg03, #1
00bd0     AC 8D B1 FD | 	call	#__system__Mid_S
00bd4     FD 12 02 F6 | 	mov	arg01, result1
00bd8     34 01 00 FF 
00bdc     34 15 06 F6 | 	mov	arg02, ##@LR__4169
00be0     9C 6C B1 FD | 	call	#__system___string_cmp
00be4     00 FA 0D F2 | 	cmp	result1, #0 wz
00be8     2C 00 90 5D |  if_ne	jmp	#LR__0030
00bec     7A 00 00 FF 
00bf0     80 E4 05 F1 | 	add	objptr, ##62592
00bf4     F2 26 0A FB | 	rdlong	local05, objptr wz
00bf8     7A 00 00 FF 
00bfc     80 E4 85 F1 | 	sub	objptr, ##62592
00c00     7A 00 00 AF 
00c04     80 E4 05 A1 |  if_e	add	objptr, ##62592
00c08     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c0c     7A 00 00 AF 
00c10     80 E4 85 A1 |  if_e	sub	objptr, ##62592
00c14     60 00 90 AD |  if_e	jmp	#LR__0031
00c18                 | LR__0030
00c18     55 00 00 FF 
00c1c     F0 E5 05 F1 | 	add	objptr, ##44016
00c20     F2 12 02 FB | 	rdlong	arg01, objptr
00c24     55 00 00 FF 
00c28     F0 E5 85 F1 | 	sub	objptr, ##44016
00c2c     12 15 02 F6 | 	mov	arg02, local04
00c30     01 16 06 F6 | 	mov	arg03, #1
00c34     48 8D B1 FD | 	call	#__system__Mid_S
00c38     FD 12 02 F6 | 	mov	arg01, result1
00c3c     34 01 00 FF 
00c40     36 15 06 F6 | 	mov	arg02, ##@LR__4170
00c44     38 6C B1 FD | 	call	#__system___string_cmp
00c48     00 FA 0D F2 | 	cmp	result1, #0 wz
00c4c     7A 00 00 AF 
00c50     80 E4 05 A1 |  if_e	add	objptr, ##62592
00c54     F2 26 02 AB |  if_e	rdlong	local05, objptr
00c58     7A 00 00 AF 
00c5c     80 E4 85 A1 |  if_e	sub	objptr, ##62592
00c60     01 26 0E A2 |  if_e	cmp	local05, #1 wz
00c64     7A 00 00 AF 
00c68     80 E4 05 A1 |  if_e	add	objptr, ##62592
00c6c     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c70     7A 00 00 AF 
00c74     80 E4 85 A1 |  if_e	sub	objptr, ##62592
00c78                 | LR__0031
00c78     12 1F 02 F6 | 	mov	local01, local04
00c7c     03 1E 66 F0 | 	shl	local01, #3
00c80     53 00 00 FF 
00c84     E0 E5 05 F1 | 	add	objptr, ##42976
00c88     F2 28 02 F6 | 	mov	local06, objptr
00c8c     F2 1E 02 F1 | 	add	local01, objptr
00c90     26 00 00 FF 
00c94     A0 E4 05 F1 | 	add	objptr, ##19616
00c98     F2 2A 02 FB | 	rdlong	local07, objptr
00c9c     7A 00 00 FF 
00ca0     80 E4 85 F1 | 	sub	objptr, ##62592
00ca4     04 1E 06 F1 | 	add	local01, #4
00ca8     0F 2B 62 FC | 	wrlong	local07, local01
00cac     01 24 06 F1 | 	add	local04, #1
00cb0     F8 FE 9F FD | 	jmp	#LR__0029
00cb4                 | LR__0032
00cb4     01 24 06 F6 | 	mov	local04, #1
00cb8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cb8                 | LR__0033
00cb8     55 00 00 FF 
00cbc     F0 E5 05 F1 | 	add	objptr, ##44016
00cc0     F2 12 02 FB | 	rdlong	arg01, objptr
00cc4     55 00 00 FF 
00cc8     F0 E5 85 F1 | 	sub	objptr, ##44016
00ccc     12 15 02 F6 | 	mov	arg02, local04
00cd0     01 16 06 F6 | 	mov	arg03, #1
00cd4     A8 8C B1 FD | 	call	#__system__Mid_S
00cd8     FD 12 02 F6 | 	mov	arg01, result1
00cdc     34 01 00 FF 
00ce0     38 31 06 F6 | 	mov	local10, ##@LR__4171
00ce4     18 15 02 F6 | 	mov	arg02, local10
00ce8     94 6B B1 FD | 	call	#__system___string_cmp
00cec     00 FA 0D F2 | 	cmp	result1, #0 wz
00cf0     34 00 90 5D |  if_ne	jmp	#LR__0034
00cf4     12 29 02 F6 | 	mov	local06, local04
00cf8     03 28 66 F0 | 	shl	local06, #3
00cfc     53 00 00 FF 
00d00     E0 E5 05 F1 | 	add	objptr, ##42976
00d04     F2 2A 02 F6 | 	mov	local07, objptr
00d08     F2 28 02 F1 | 	add	local06, objptr
00d0c     04 28 06 F1 | 	add	local06, #4
00d10     14 33 02 FB | 	rdlong	local11, local06
00d14     04 28 86 F1 | 	sub	local06, #4
00d18     19 35 0A F6 | 	mov	local12, local11 wz
00d1c     53 00 00 FF 
00d20     E0 E5 85 F1 | 	sub	objptr, ##42976
00d24     24 00 90 AD |  if_e	jmp	#LR__0035
00d28                 | LR__0034
00d28     7A 00 00 FF 
00d2c     7C E4 05 F1 | 	add	objptr, ##62588
00d30     F2 36 02 FB | 	rdlong	local13, objptr
00d34     7A 00 00 FF 
00d38     7C E4 85 F1 | 	sub	objptr, ##62588
00d3c     1B 39 02 F6 | 	mov	local14, local13
00d40     1C 25 52 F2 | 	cmps	local04, local14 wc
00d44     01 24 06 C1 |  if_b	add	local04, #1
00d48     6C FF 9F CD |  if_b	jmp	#LR__0033
00d4c                 | LR__0035
00d4c                 | ' 
00d4c                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d4c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d4c     7A 00 00 FF 
00d50     7C E4 05 F1 | 	add	objptr, ##62588
00d54     F2 1E 02 FB | 	rdlong	local01, objptr
00d58     7A 00 00 FF 
00d5c     7C E4 85 F1 | 	sub	objptr, ##62588
00d60     0F 25 52 F2 | 	cmps	local04, local01 wc
00d64     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d68     55 00 00 FF 
00d6c     F0 E5 05 F1 | 	add	objptr, ##44016
00d70     F2 2A 02 FB | 	rdlong	local07, objptr
00d74     55 00 00 FF 
00d78     F0 E5 85 F1 | 	sub	objptr, ##44016
00d7c     15 13 02 F6 | 	mov	arg01, local07
00d80     09 2D 02 F6 | 	mov	local08, arg01
00d84     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00d88                 | LR__0036
00d88     16 FB C9 FA | 	rdbyte	result1, local08 wz
00d8c     01 2C 06 51 |  if_ne	add	local08, #1
00d90     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00d94                 | LR__0037
00d94     09 2D 82 F1 | 	sub	local08, arg01
00d98     16 15 02 F6 | 	mov	arg02, local08
00d9c     12 15 82 F1 | 	sub	arg02, local04
00da0     15 13 02 F6 | 	mov	arg01, local07
00da4     48 8B B1 FD | 	call	#__system__Right_S
00da8     FD 12 02 F6 | 	mov	arg01, result1
00dac     EC 8E B1 FD | 	call	#__system__RTrim_S
00db0     FD 12 02 F6 | 	mov	arg01, result1
00db4     24 8E B1 FD | 	call	#__system__LTrim_S
00db8     7A 00 00 FF 
00dbc     84 E4 05 F1 | 	add	objptr, ##62596
00dc0     F2 FA 61 FC | 	wrlong	result1, objptr
00dc4     24 00 00 FF 
00dc8     94 E4 85 F1 | 	sub	objptr, ##18580
00dcc     F2 12 02 FB | 	rdlong	arg01, objptr
00dd0     55 00 00 FF 
00dd4     F0 E5 85 F1 | 	sub	objptr, ##44016
00dd8     01 24 86 F1 | 	sub	local04, #1
00ddc     12 15 02 F6 | 	mov	arg02, local04
00de0     84 8A B1 FD | 	call	#__system__Left_S
00de4     FD 12 02 F6 | 	mov	arg01, result1
00de8     B0 8E B1 FD | 	call	#__system__RTrim_S
00dec     FD 12 02 F6 | 	mov	arg01, result1
00df0     E8 8D B1 FD | 	call	#__system__LTrim_S
00df4     55 00 00 FF 
00df8     F0 E5 05 F1 | 	add	objptr, ##44016
00dfc     F2 FA 61 FC | 	wrlong	result1, objptr
00e00     55 00 00 FF 
00e04     F0 E5 85 F1 | 	sub	objptr, ##44016
00e08     1C 00 90 FD | 	jmp	#LR__0039
00e0c                 | LR__0038
00e0c     34 01 00 FF 
00e10     3A 1F 06 F6 | 	mov	local01, ##@LR__4172
00e14     7A 00 00 FF 
00e18     84 E4 05 F1 | 	add	objptr, ##62596
00e1c     F2 1E 62 FC | 	wrlong	local01, objptr
00e20     7A 00 00 FF 
00e24     84 E4 85 F1 | 	sub	objptr, ##62596
00e28                 | LR__0039
00e28                 | ' 'print "line$=";line$
00e28                 | ' 'print "rest$=";rest$
00e28                 | ' 
00e28                 | ' 
00e28                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e28     55 00 00 FF 
00e2c     F8 E5 05 F1 | 	add	objptr, ##44024
00e30     F2 1E 02 FB | 	rdlong	local01, objptr
00e34     55 00 00 FF 
00e38     F8 E5 85 F1 | 	sub	objptr, ##44024
00e3c     FF FF 7F FF 
00e40     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00e44     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e48     7A 00 00 FF 
00e4c     84 E4 05 F1 | 	add	objptr, ##62596
00e50     F2 12 02 FB | 	rdlong	arg01, objptr
00e54     7A 00 00 FF 
00e58     84 E4 85 F1 | 	sub	objptr, ##62596
00e5c     34 01 00 FF 
00e60     3B 15 06 F6 | 	mov	arg02, ##@LR__4173
00e64     18 6A B1 FD | 	call	#__system___string_cmp
00e68     00 FA 0D F2 | 	cmp	result1, #0 wz
00e6c     55 00 00 5F 
00e70     F8 E5 05 51 |  if_ne	add	objptr, ##44024
00e74     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e78     55 00 00 5F 
00e7c     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
00e80     08 01 90 5D |  if_ne	jmp	#LR__0044
00e84                 | LR__0040
00e84                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00e84     55 00 00 FF 
00e88     F8 E5 05 F1 | 	add	objptr, ##44024
00e8c     F2 1E 02 FB | 	rdlong	local01, objptr
00e90     55 00 00 FF 
00e94     F8 E5 85 F1 | 	sub	objptr, ##44024
00e98     FF FF 7F FF 
00e9c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00ea0     3C 00 90 5D |  if_ne	jmp	#LR__0041
00ea4     7A 00 00 FF 
00ea8     84 E4 05 F1 | 	add	objptr, ##62596
00eac     F2 12 02 FB | 	rdlong	arg01, objptr
00eb0     7A 00 00 FF 
00eb4     84 E4 85 F1 | 	sub	objptr, ##62596
00eb8     34 01 00 FF 
00ebc     3C 15 06 F6 | 	mov	arg02, ##@LR__4174
00ec0     BC 69 B1 FD | 	call	#__system___string_cmp
00ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
00ec8     55 00 00 AF 
00ecc     F8 E5 05 A1 |  if_e	add	objptr, ##44024
00ed0     F2 06 68 AC |  if_e	wrlong	#3, objptr
00ed4     55 00 00 AF 
00ed8     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
00edc     AC 00 90 AD |  if_e	jmp	#LR__0044
00ee0                 | LR__0041
00ee0                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00ee0     55 00 00 FF 
00ee4     F8 E5 05 F1 | 	add	objptr, ##44024
00ee8     F2 1E 02 FB | 	rdlong	local01, objptr
00eec     55 00 00 FF 
00ef0     F8 E5 85 F1 | 	sub	objptr, ##44024
00ef4     04 1E 0E F2 | 	cmp	local01, #4 wz
00ef8     3C 00 90 5D |  if_ne	jmp	#LR__0042
00efc     7A 00 00 FF 
00f00     84 E4 05 F1 | 	add	objptr, ##62596
00f04     F2 12 02 FB | 	rdlong	arg01, objptr
00f08     7A 00 00 FF 
00f0c     84 E4 85 F1 | 	sub	objptr, ##62596
00f10     34 01 00 FF 
00f14     3D 15 06 F6 | 	mov	arg02, ##@LR__4175
00f18     64 69 B1 FD | 	call	#__system___string_cmp
00f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f20     55 00 00 5F 
00f24     F8 E5 05 51 |  if_ne	add	objptr, ##44024
00f28     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f2c     55 00 00 5F 
00f30     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
00f34     54 00 90 5D |  if_ne	jmp	#LR__0044
00f38                 | LR__0042
00f38                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f38     55 00 00 FF 
00f3c     F8 E5 05 F1 | 	add	objptr, ##44024
00f40     F2 1E 02 FB | 	rdlong	local01, objptr
00f44     55 00 00 FF 
00f48     F8 E5 85 F1 | 	sub	objptr, ##44024
00f4c     04 1E 0E F2 | 	cmp	local01, #4 wz
00f50     38 00 90 5D |  if_ne	jmp	#LR__0043
00f54     7A 00 00 FF 
00f58     84 E4 05 F1 | 	add	objptr, ##62596
00f5c     F2 12 02 FB | 	rdlong	arg01, objptr
00f60     7A 00 00 FF 
00f64     84 E4 85 F1 | 	sub	objptr, ##62596
00f68     34 01 00 FF 
00f6c     3E 15 06 F6 | 	mov	arg02, ##@LR__4176
00f70     0C 69 B1 FD | 	call	#__system___string_cmp
00f74     00 FA 0D F2 | 	cmp	result1, #0 wz
00f78     55 00 00 AF 
00f7c     F8 E5 05 A1 |  if_e	add	objptr, ##44024
00f80     F2 04 68 AC |  if_e	wrlong	#2, objptr
00f84     55 00 00 AF 
00f88     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
00f8c                 | LR__0043
00f8c                 | LR__0044
00f8c     20 4E 05 F1 | 	add	fp, #32
00f90     A7 00 68 FC | 	wrlong	#0, fp
00f94     20 4E 85 F1 | 	sub	fp, #32
00f98     00 24 06 F6 | 	mov	local04, #0
00f9c     01 3A 06 F6 | 	mov	local15, #1
00fa0                 | ' 
00fa0                 | ' ' 1b: find separators
00fa0                 | ' 
00fa0                 | ' 107
00fa0                 | ' separators(0)=0
00fa0                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fa0                 | LR__0045
00fa0     01 24 06 F1 | 	add	local04, #1
00fa4     55 00 00 FF 
00fa8     F0 E5 05 F1 | 	add	objptr, ##44016
00fac     F2 12 02 FB | 	rdlong	arg01, objptr
00fb0     55 00 00 FF 
00fb4     F0 E5 85 F1 | 	sub	objptr, ##44016
00fb8     12 15 02 F6 | 	mov	arg02, local04
00fbc     01 16 06 F6 | 	mov	arg03, #1
00fc0     BC 89 B1 FD | 	call	#__system__Mid_S
00fc4     7A 00 00 FF 
00fc8     88 E4 05 F1 | 	add	objptr, ##62600
00fcc     F2 FA 61 FC | 	wrlong	result1, objptr
00fd0                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00fd0     FD 12 02 F6 | 	mov	arg01, result1
00fd4     7A 00 00 FF 
00fd8     88 E4 85 F1 | 	sub	objptr, ##62600
00fdc     1C 1C B0 FD | 	call	#_isseparator
00fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
00fe4     1C 00 90 AD |  if_e	jmp	#LR__0046
00fe8     1D 27 02 F6 | 	mov	local05, local15
00fec     02 26 66 F0 | 	shl	local05, #2
00ff0     20 4E 05 F1 | 	add	fp, #32
00ff4     A7 26 02 F1 | 	add	local05, fp
00ff8     13 25 62 FC | 	wrlong	local04, local05
00ffc     01 3A 06 F1 | 	add	local15, #1
01000     20 4E 85 F1 | 	sub	fp, #32
01004                 | LR__0046
01004     7A 00 00 FF 
01008     7C E4 05 F1 | 	add	objptr, ##62588
0100c     F2 1E 02 FB | 	rdlong	local01, objptr
01010     7A 00 00 FF 
01014     7C E4 85 F1 | 	sub	objptr, ##62588
01018     0F 25 5A F2 | 	cmps	local04, local01 wcz
0101c     80 FF 9F ED |  if_be	jmp	#LR__0045
01020     1D 27 02 F6 | 	mov	local05, local15
01024     02 26 66 F0 | 	shl	local05, #2
01028     20 4E 05 F1 | 	add	fp, #32
0102c     A7 26 02 F1 | 	add	local05, fp
01030     13 25 62 FC | 	wrlong	local04, local05
01034     00 3C 06 F6 | 	mov	local16, #0
01038                 | ' for i=0 to j-1 
01038     00 24 06 F6 | 	mov	local04, #0
0103c     1D 3F 02 F6 | 	mov	local17, local15
01040     20 4E 85 F1 | 	sub	fp, #32
01044                 | LR__0047
01044     1F 25 52 F2 | 	cmps	local04, local17 wc
01048     88 01 90 3D |  if_ae	jmp	#LR__0051
0104c     12 27 02 F6 | 	mov	local05, local04
01050     02 26 66 F0 | 	shl	local05, #2
01054     20 4E 05 F1 | 	add	fp, #32
01058     A7 26 02 F1 | 	add	local05, fp
0105c     13 29 02 FB | 	rdlong	local06, local05
01060     7A 00 00 FF 
01064     90 E4 05 F1 | 	add	objptr, ##62608
01068     F2 28 62 FC | 	wrlong	local06, objptr
0106c     12 27 02 F6 | 	mov	local05, local04
01070     01 26 06 F1 | 	add	local05, #1
01074     02 26 66 F0 | 	shl	local05, #2
01078     A7 30 02 F6 | 	mov	local10, fp
0107c     A7 26 02 F1 | 	add	local05, fp
01080     13 29 02 FB | 	rdlong	local06, local05
01084     04 E4 05 F1 | 	add	objptr, #4
01088     F2 28 62 FC | 	wrlong	local06, objptr
0108c                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
0108c     04 E4 85 F1 | 	sub	objptr, #4
01090     F2 1E 02 FB | 	rdlong	local01, objptr
01094     7A 00 00 FF 
01098     90 E4 85 F1 | 	sub	objptr, ##62608
0109c     01 1E 56 F2 | 	cmps	local01, #1 wc
010a0     20 4E 85 F1 | 	sub	fp, #32
010a4     84 00 90 CD |  if_b	jmp	#LR__0049
010a8     55 00 00 FF 
010ac     F0 E5 05 F1 | 	add	objptr, ##44016
010b0     F2 12 02 FB | 	rdlong	arg01, objptr
010b4     24 00 00 FF 
010b8     A0 E4 05 F1 | 	add	objptr, ##18592
010bc     F2 14 02 FB | 	rdlong	arg02, objptr
010c0     7A 00 00 FF 
010c4     90 E4 85 F1 | 	sub	objptr, ##62608
010c8     01 16 06 F6 | 	mov	arg03, #1
010cc     B0 88 B1 FD | 	call	#__system__Mid_S
010d0     7A 00 00 FF 
010d4     98 E4 05 F1 | 	add	objptr, ##62616
010d8     F2 FA 61 FC | 	wrlong	result1, objptr
010dc     7A 00 00 FF 
010e0     98 E4 85 F1 | 	sub	objptr, ##62616
010e4     FD 12 02 F6 | 	mov	arg01, result1
010e8     34 01 00 FF 
010ec     3F 15 06 F6 | 	mov	arg02, ##@LR__4177
010f0     8C 67 B1 FD | 	call	#__system___string_cmp
010f4     00 FA 0D F2 | 	cmp	result1, #0 wz
010f8     30 00 90 AD |  if_e	jmp	#LR__0048
010fc     1E 31 02 F6 | 	mov	local10, local16
01100     03 30 66 F0 | 	shl	local10, #3
01104     53 00 00 FF 
01108     E0 E5 05 F1 | 	add	objptr, ##42976
0110c     F2 30 02 F1 | 	add	local10, objptr
01110     26 00 00 FF 
01114     B8 E4 05 F1 | 	add	objptr, ##19640
01118     F2 2A 02 FB | 	rdlong	local07, objptr
0111c     7A 00 00 FF 
01120     98 E4 85 F1 | 	sub	objptr, ##62616
01124     18 2B 62 FC | 	wrlong	local07, local10
01128     01 3C 06 F1 | 	add	local16, #1
0112c                 | LR__0048
0112c                 | LR__0049
0112c     55 00 00 FF 
01130     F0 E5 05 F1 | 	add	objptr, ##44016
01134     F2 12 02 FB | 	rdlong	arg01, objptr
01138     24 00 00 FF 
0113c     A0 E4 05 F1 | 	add	objptr, ##18592
01140     F2 14 02 FB | 	rdlong	arg02, objptr
01144     01 14 06 F1 | 	add	arg02, #1
01148     04 E4 05 F1 | 	add	objptr, #4
0114c     F2 16 02 FB | 	rdlong	arg03, objptr
01150     04 E4 85 F1 | 	sub	objptr, #4
01154     F2 32 02 FB | 	rdlong	local11, objptr
01158     7A 00 00 FF 
0115c     90 E4 85 F1 | 	sub	objptr, ##62608
01160     19 35 02 F6 | 	mov	local12, local11
01164     1A 17 82 F1 | 	sub	arg03, local12
01168     01 16 86 F1 | 	sub	arg03, #1
0116c     10 88 B1 FD | 	call	#__system__Mid_S
01170     7A 00 00 FF 
01174     98 E4 05 F1 | 	add	objptr, ##62616
01178     F2 FA 61 FC | 	wrlong	result1, objptr
0117c     7A 00 00 FF 
01180     98 E4 85 F1 | 	sub	objptr, ##62616
01184     FD 12 02 F6 | 	mov	arg01, result1
01188     34 01 00 FF 
0118c     40 15 06 F6 | 	mov	arg02, ##@LR__4178
01190     EC 66 B1 FD | 	call	#__system___string_cmp
01194     00 FA 0D F2 | 	cmp	result1, #0 wz
01198     30 00 90 AD |  if_e	jmp	#LR__0050
0119c     1E 31 02 F6 | 	mov	local10, local16
011a0     03 30 66 F0 | 	shl	local10, #3
011a4     53 00 00 FF 
011a8     E0 E5 05 F1 | 	add	objptr, ##42976
011ac     F2 30 02 F1 | 	add	local10, objptr
011b0     26 00 00 FF 
011b4     B8 E4 05 F1 | 	add	objptr, ##19640
011b8     F2 2A 02 FB | 	rdlong	local07, objptr
011bc     7A 00 00 FF 
011c0     98 E4 85 F1 | 	sub	objptr, ##62616
011c4     18 2B 62 FC | 	wrlong	local07, local10
011c8     01 3C 06 F1 | 	add	local16, #1
011cc                 | LR__0050
011cc     01 24 06 F1 | 	add	local04, #1
011d0     70 FE 9F FD | 	jmp	#LR__0047
011d4                 | LR__0051
011d4     00 24 06 F6 | 	mov	local04, #0
011d8                 | ' 
011d8                 | ' ' 1d : find strings
011d8                 | ' 
011d8                 | ' i=0
011d8                 | ' do
011d8                 | LR__0052
011d8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011d8     12 29 02 F6 | 	mov	local06, local04
011dc     03 28 66 F0 | 	shl	local06, #3
011e0     53 00 00 FF 
011e4     E0 E5 05 F1 | 	add	objptr, ##42976
011e8     F2 28 02 F1 | 	add	local06, objptr
011ec     14 13 02 FB | 	rdlong	arg01, local06
011f0     34 01 00 FF 
011f4     41 15 06 F6 | 	mov	arg02, ##@LR__4179
011f8     53 00 00 FF 
011fc     E0 E5 85 F1 | 	sub	objptr, ##42976
01200     7C 66 B1 FD | 	call	#__system___string_cmp
01204     00 FA 0D F2 | 	cmp	result1, #0 wz
01208     01 24 06 51 |  if_ne	add	local04, #1
0120c     50 01 90 5D |  if_ne	jmp	#LR__0057
01210     12 41 02 F6 | 	mov	local18, local04
01214                 | LR__0053
01214     12 31 02 F6 | 	mov	local10, local04
01218     01 30 06 F1 | 	add	local10, #1
0121c     03 30 66 F0 | 	shl	local10, #3
01220     53 00 00 FF 
01224     E0 E5 05 F1 | 	add	objptr, ##42976
01228     F2 30 02 F1 | 	add	local10, objptr
0122c     18 33 02 FB | 	rdlong	local11, local10
01230     26 00 00 FF 
01234     B8 E4 05 F1 | 	add	objptr, ##19640
01238     F2 32 62 FC | 	wrlong	local11, objptr
0123c     20 31 02 F6 | 	mov	local10, local18
01240     03 30 66 F0 | 	shl	local10, #3
01244     26 00 00 FF 
01248     B8 E4 85 F1 | 	sub	objptr, ##19640
0124c     F2 30 02 F1 | 	add	local10, objptr
01250     20 39 02 F6 | 	mov	local14, local18
01254     03 38 66 F0 | 	shl	local14, #3
01258     F2 38 02 F1 | 	add	local14, objptr
0125c     1C 13 02 FB | 	rdlong	arg01, local14
01260     53 00 00 FF 
01264     E0 E5 85 F1 | 	sub	objptr, ##42976
01268     19 35 02 F6 | 	mov	local12, local11
0126c     1A 15 02 F6 | 	mov	arg02, local12
01270     40 66 B1 FD | 	call	#__system___string_concat
01274     18 FB 61 FC | 	wrlong	result1, local10
01278     12 3B 02 F6 | 	mov	local15, local04
0127c     01 3A 06 F1 | 	add	local15, #1
01280     1E 43 02 F6 | 	mov	local19, local16
01284     01 42 06 F1 | 	add	local19, #1
01288     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
0128c                 | LR__0054
0128c     21 3B 52 F2 | 	cmps	local15, local19 wc
01290     70 00 90 3D |  if_ae	jmp	#LR__0056
01294     1D 29 02 F6 | 	mov	local06, local15
01298     01 28 06 F1 | 	add	local06, #1
0129c     03 28 66 F0 | 	shl	local06, #3
012a0     53 00 00 FF 
012a4     E0 E5 05 F1 | 	add	objptr, ##42976
012a8     F2 28 02 F1 | 	add	local06, objptr
012ac     14 1F 02 FB | 	rdlong	local01, local06
012b0     1D 2B 02 F6 | 	mov	local07, local15
012b4     01 2A 06 F1 | 	add	local07, #1
012b8     03 2A 66 F0 | 	shl	local07, #3
012bc     F2 2A 02 F1 | 	add	local07, objptr
012c0     04 2A 06 F1 | 	add	local07, #4
012c4     15 27 02 FB | 	rdlong	local05, local07
012c8     1D 2B 02 F6 | 	mov	local07, local15
012cc     03 2A 66 F0 | 	shl	local07, #3
012d0     F2 34 02 F6 | 	mov	local12, objptr
012d4     F2 2A 02 F1 | 	add	local07, objptr
012d8     15 1F 62 FC | 	wrlong	local01, local07
012dc     1D 33 02 F6 | 	mov	local11, local15
012e0     19 37 02 F6 | 	mov	local13, local11
012e4     03 36 66 F0 | 	shl	local13, #3
012e8     F2 36 02 F1 | 	add	local13, objptr
012ec     04 36 06 F1 | 	add	local13, #4
012f0     1B 27 62 FC | 	wrlong	local05, local13
012f4     01 3A 06 F1 | 	add	local15, #1
012f8     53 00 00 FF 
012fc     E0 E5 85 F1 | 	sub	objptr, ##42976
01300     88 FF 9F FD | 	jmp	#LR__0054
01304                 | LR__0055
01304                 | LR__0056
01304     01 3C 86 F1 | 	sub	local16, #1
01308     7A 00 00 FF 
0130c     98 E4 05 F1 | 	add	objptr, ##62616
01310     F2 12 02 FB | 	rdlong	arg01, objptr
01314     7A 00 00 FF 
01318     98 E4 85 F1 | 	sub	objptr, ##62616
0131c     34 01 00 FF 
01320     43 15 06 F6 | 	mov	arg02, ##@LR__4180
01324     58 65 B1 FD | 	call	#__system___string_cmp
01328     00 FA 0D F2 | 	cmp	result1, #0 wz
0132c     1E 25 52 52 |  if_ne	cmps	local04, local16 wc
01330     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
01334                 | '   if p$<>"""" then k+=1:i+=1
01334     7A 00 00 FF 
01338     98 E4 05 F1 | 	add	objptr, ##62616
0133c     F2 12 02 FB | 	rdlong	arg01, objptr
01340     7A 00 00 FF 
01344     98 E4 85 F1 | 	sub	objptr, ##62616
01348     34 01 00 FF 
0134c     45 15 06 F6 | 	mov	arg02, ##@LR__4181
01350     2C 65 B1 FD | 	call	#__system___string_cmp
01354     00 FA 0D F2 | 	cmp	result1, #0 wz
01358     01 3C 06 51 |  if_ne	add	local16, #1
0135c     01 24 06 51 |  if_ne	add	local04, #1
01360                 | LR__0057
01360     1E 25 52 F2 | 	cmps	local04, local16 wc
01364     70 FE 9F CD |  if_b	jmp	#LR__0052
01368     00 24 06 F6 | 	mov	local04, #0
0136c                 | ' 
0136c                 | ' ' 1e : concatenate strings if "" detected between
0136c                 | '  
0136c                 | ' i=0 : do
0136c                 | LR__0058
0136c                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0136c     12 29 02 F6 | 	mov	local06, local04
01370     03 28 66 F0 | 	shl	local06, #3
01374     53 00 00 FF 
01378     E0 E5 05 F1 | 	add	objptr, ##42976
0137c     F2 28 02 F1 | 	add	local06, objptr
01380     14 13 02 FB | 	rdlong	arg01, local06
01384     01 14 06 F6 | 	mov	arg02, #1
01388     53 00 00 FF 
0138c     E0 E5 85 F1 | 	sub	objptr, ##42976
01390     5C 85 B1 FD | 	call	#__system__Right_S
01394     FD 12 02 F6 | 	mov	arg01, result1
01398     34 01 00 FF 
0139c     47 15 06 F6 | 	mov	arg02, ##@LR__4182
013a0     DC 64 B1 FD | 	call	#__system___string_cmp
013a4     00 FA 0D F2 | 	cmp	result1, #0 wz
013a8     78 01 90 5D |  if_ne	jmp	#LR__0064
013ac     12 2B 02 F6 | 	mov	local07, local04
013b0     01 2A 06 F1 | 	add	local07, #1
013b4     03 2A 66 F0 | 	shl	local07, #3
013b8     53 00 00 FF 
013bc     E0 E5 05 F1 | 	add	objptr, ##42976
013c0     F2 34 02 F6 | 	mov	local12, objptr
013c4     F2 2A 02 F1 | 	add	local07, objptr
013c8     15 13 02 FB | 	rdlong	arg01, local07
013cc     01 14 06 F6 | 	mov	arg02, #1
013d0     53 00 00 FF 
013d4     E0 E5 85 F1 | 	sub	objptr, ##42976
013d8     8C 84 B1 FD | 	call	#__system__Left_S
013dc     FD 12 02 F6 | 	mov	arg01, result1
013e0     34 01 00 FF 
013e4     49 15 06 F6 | 	mov	arg02, ##@LR__4183
013e8     94 64 B1 FD | 	call	#__system___string_cmp
013ec     00 FA 0D F2 | 	cmp	result1, #0 wz
013f0     30 01 90 5D |  if_ne	jmp	#LR__0064
013f4     12 31 02 F6 | 	mov	local10, local04
013f8     03 30 66 F0 | 	shl	local10, #3
013fc     53 00 00 FF 
01400     E0 E5 05 F1 | 	add	objptr, ##42976
01404     F2 30 02 F1 | 	add	local10, objptr
01408     12 39 02 F6 | 	mov	local14, local04
0140c     03 38 66 F0 | 	shl	local14, #3
01410     F2 38 02 F1 | 	add	local14, objptr
01414     1C 2B 02 FB | 	rdlong	local07, local14
01418     12 37 02 F6 | 	mov	local13, local04
0141c     01 36 06 F1 | 	add	local13, #1
01420     03 36 66 F0 | 	shl	local13, #3
01424     F2 36 02 F1 | 	add	local13, objptr
01428     1B 35 02 FB | 	rdlong	local12, local13
0142c     12 45 02 F6 | 	mov	local20, local04
01430     01 44 06 F1 | 	add	local20, #1
01434     22 47 02 F6 | 	mov	local21, local20
01438     03 46 66 F0 | 	shl	local21, #3
0143c     F2 48 02 F6 | 	mov	local22, objptr
01440     F2 46 02 F1 | 	add	local21, objptr
01444     23 13 02 FB | 	rdlong	arg01, local21
01448     53 00 00 FF 
0144c     E0 E5 85 F1 | 	sub	objptr, ##42976
01450     09 2D 02 F6 | 	mov	local08, arg01
01454     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01458                 | LR__0059
01458     16 FB C9 FA | 	rdbyte	result1, local08 wz
0145c     01 2C 06 51 |  if_ne	add	local08, #1
01460     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
01464                 | LR__0060
01464     09 2D 82 F1 | 	sub	local08, arg01
01468     16 33 02 F6 | 	mov	local11, local08
0146c     01 32 86 F1 | 	sub	local11, #1
01470     1A 13 02 F6 | 	mov	arg01, local12
01474     19 15 02 F6 | 	mov	arg02, local11
01478     74 84 B1 FD | 	call	#__system__Right_S
0147c     FD 34 02 F6 | 	mov	local12, result1
01480     15 13 02 F6 | 	mov	arg01, local07
01484     1A 15 02 F6 | 	mov	arg02, local12
01488     28 64 B1 FD | 	call	#__system___string_concat
0148c     18 FB 61 FC | 	wrlong	result1, local10
01490                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01490     12 3B 02 F6 | 	mov	local15, local04
01494     01 3A 06 F1 | 	add	local15, #1
01498     1E 4B 02 F6 | 	mov	local23, local16
0149c     01 4A 06 F1 | 	add	local23, #1
014a0     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014a4                 | LR__0061
014a4     25 3B 52 F2 | 	cmps	local15, local23 wc
014a8     70 00 90 3D |  if_ae	jmp	#LR__0063
014ac     1D 29 02 F6 | 	mov	local06, local15
014b0     01 28 06 F1 | 	add	local06, #1
014b4     03 28 66 F0 | 	shl	local06, #3
014b8     53 00 00 FF 
014bc     E0 E5 05 F1 | 	add	objptr, ##42976
014c0     F2 28 02 F1 | 	add	local06, objptr
014c4     14 1F 02 FB | 	rdlong	local01, local06
014c8     1D 2B 02 F6 | 	mov	local07, local15
014cc     01 2A 06 F1 | 	add	local07, #1
014d0     03 2A 66 F0 | 	shl	local07, #3
014d4     F2 2A 02 F1 | 	add	local07, objptr
014d8     04 2A 06 F1 | 	add	local07, #4
014dc     15 27 02 FB | 	rdlong	local05, local07
014e0     1D 2B 02 F6 | 	mov	local07, local15
014e4     03 2A 66 F0 | 	shl	local07, #3
014e8     F2 34 02 F6 | 	mov	local12, objptr
014ec     F2 2A 02 F1 | 	add	local07, objptr
014f0     15 1F 62 FC | 	wrlong	local01, local07
014f4     1D 33 02 F6 | 	mov	local11, local15
014f8     19 37 02 F6 | 	mov	local13, local11
014fc     03 36 66 F0 | 	shl	local13, #3
01500     F2 36 02 F1 | 	add	local13, objptr
01504     04 36 06 F1 | 	add	local13, #4
01508     1B 27 62 FC | 	wrlong	local05, local13
0150c     01 3A 06 F1 | 	add	local15, #1
01510     53 00 00 FF 
01514     E0 E5 85 F1 | 	sub	objptr, ##42976
01518     88 FF 9F FD | 	jmp	#LR__0061
0151c                 | LR__0062
0151c                 | LR__0063
0151c     01 24 86 F1 | 	sub	local04, #1
01520     01 3C 86 F1 | 	sub	local16, #1
01524                 | LR__0064
01524     01 24 06 F1 | 	add	local04, #1
01528     1E 25 52 F2 | 	cmps	local04, local16 wc
0152c     3C FE 9F CD |  if_b	jmp	#LR__0058
01530     00 24 06 F6 | 	mov	local04, #0
01534                 | '  
01534                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
01534                 | '  
01534                 | ' i=0 : do
01534                 | LR__0065
01534     12 31 02 F6 | 	mov	local10, local04
01538     03 30 66 F0 | 	shl	local10, #3
0153c     53 00 00 FF 
01540     E0 E5 05 F1 | 	add	objptr, ##42976
01544     F2 30 02 F1 | 	add	local10, objptr
01548     18 2B 02 FB | 	rdlong	local07, local10
0154c     26 00 00 FF 
01550     C0 E4 05 F1 | 	add	objptr, ##19648
01554     F2 2A 62 FC | 	wrlong	local07, objptr
01558     12 31 02 F6 | 	mov	local10, local04
0155c     01 30 06 F1 | 	add	local10, #1
01560     03 30 66 F0 | 	shl	local10, #3
01564     26 00 00 FF 
01568     C0 E4 85 F1 | 	sub	objptr, ##19648
0156c     F2 30 02 F1 | 	add	local10, objptr
01570     18 2B 02 FB | 	rdlong	local07, local10
01574     26 00 00 FF 
01578     C4 E4 05 F1 | 	add	objptr, ##19652
0157c     F2 2A 62 FC | 	wrlong	local07, objptr
01580                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01580     04 E4 85 F1 | 	sub	objptr, #4
01584     F2 12 02 FB | 	rdlong	arg01, objptr
01588     7A 00 00 FF 
0158c     A0 E4 85 F1 | 	sub	objptr, ##62624
01590     34 01 00 FF 
01594     4B 15 06 F6 | 	mov	arg02, ##@LR__4184
01598     E4 62 B1 FD | 	call	#__system___string_cmp
0159c     00 FA 0D F2 | 	cmp	result1, #0 wz
015a0     04 01 90 AD |  if_e	jmp	#LR__0066
015a4     7A 00 00 FF 
015a8     A0 E4 05 F1 | 	add	objptr, ##62624
015ac     F2 12 02 FB | 	rdlong	arg01, objptr
015b0     7A 00 00 FF 
015b4     A0 E4 85 F1 | 	sub	objptr, ##62624
015b8     34 01 00 FF 
015bc     4D 15 06 F6 | 	mov	arg02, ##@LR__4185
015c0     BC 62 B1 FD | 	call	#__system___string_cmp
015c4     FD 26 0A F6 | 	mov	local05, result1 wz
015c8     DC 00 90 AD |  if_e	jmp	#LR__0066
015cc     7A 00 00 FF 
015d0     A0 E4 05 F1 | 	add	objptr, ##62624
015d4     F2 12 02 FB | 	rdlong	arg01, objptr
015d8     7A 00 00 FF 
015dc     A0 E4 85 F1 | 	sub	objptr, ##62624
015e0     34 01 00 FF 
015e4     4F 15 06 F6 | 	mov	arg02, ##@LR__4186
015e8     94 62 B1 FD | 	call	#__system___string_cmp
015ec     00 FA 0D F2 | 	cmp	result1, #0 wz
015f0     B4 00 90 AD |  if_e	jmp	#LR__0066
015f4     7A 00 00 FF 
015f8     A0 E4 05 F1 | 	add	objptr, ##62624
015fc     F2 12 02 FB | 	rdlong	arg01, objptr
01600     7A 00 00 FF 
01604     A0 E4 85 F1 | 	sub	objptr, ##62624
01608     34 01 00 FF 
0160c     51 35 06 F6 | 	mov	local12, ##@LR__4187
01610     1A 15 02 F6 | 	mov	arg02, local12
01614     68 62 B1 FD | 	call	#__system___string_cmp
01618     00 FA 0D F2 | 	cmp	result1, #0 wz
0161c     88 00 90 AD |  if_e	jmp	#LR__0066
01620     7A 00 00 FF 
01624     A0 E4 05 F1 | 	add	objptr, ##62624
01628     F2 12 02 FB | 	rdlong	arg01, objptr
0162c     7A 00 00 FF 
01630     A0 E4 85 F1 | 	sub	objptr, ##62624
01634     34 01 00 FF 
01638     53 33 06 F6 | 	mov	local11, ##@LR__4188
0163c     19 35 02 F6 | 	mov	local12, local11
01640     1A 15 02 F6 | 	mov	arg02, local12
01644     38 62 B1 FD | 	call	#__system___string_cmp
01648     00 FA 0D F2 | 	cmp	result1, #0 wz
0164c     58 00 90 AD |  if_e	jmp	#LR__0066
01650     7A 00 00 FF 
01654     A0 E4 05 F1 | 	add	objptr, ##62624
01658     F2 12 02 FB | 	rdlong	arg01, objptr
0165c     7A 00 00 FF 
01660     A0 E4 85 F1 | 	sub	objptr, ##62624
01664     34 01 00 FF 
01668     55 33 06 F6 | 	mov	local11, ##@LR__4189
0166c     19 15 02 F6 | 	mov	arg02, local11
01670     0C 62 B1 FD | 	call	#__system___string_cmp
01674     FD 34 0A F6 | 	mov	local12, result1 wz
01678     2C 00 90 AD |  if_e	jmp	#LR__0066
0167c     7A 00 00 FF 
01680     A0 E4 05 F1 | 	add	objptr, ##62624
01684     F2 12 02 FB | 	rdlong	arg01, objptr
01688     7A 00 00 FF 
0168c     A0 E4 85 F1 | 	sub	objptr, ##62624
01690     34 01 00 FF 
01694     57 39 06 F6 | 	mov	local14, ##@LR__4190
01698     1C 15 02 F6 | 	mov	arg02, local14
0169c     E0 61 B1 FD | 	call	#__system___string_cmp
016a0     FD 32 0A F6 | 	mov	local11, result1 wz
016a4     30 00 90 5D |  if_ne	jmp	#LR__0067
016a8                 | LR__0066
016a8     7A 00 00 FF 
016ac     A4 E4 05 F1 | 	add	objptr, ##62628
016b0     F2 12 02 FB | 	rdlong	arg01, objptr
016b4     7A 00 00 FF 
016b8     A4 E4 85 F1 | 	sub	objptr, ##62628
016bc     34 01 00 FF 
016c0     59 4D 06 F6 | 	mov	local24, ##@LR__4191
016c4     26 37 02 F6 | 	mov	local13, local24
016c8     1B 15 02 F6 | 	mov	arg02, local13
016cc     B0 61 B1 FD | 	call	#__system___string_cmp
016d0     FD 38 0A F6 | 	mov	local14, result1 wz
016d4     18 01 90 AD |  if_e	jmp	#LR__0070
016d8                 | LR__0067
016d8     7A 00 00 FF 
016dc     A0 E4 05 F1 | 	add	objptr, ##62624
016e0     F2 12 02 FB | 	rdlong	arg01, objptr
016e4     7A 00 00 FF 
016e8     A0 E4 85 F1 | 	sub	objptr, ##62624
016ec     34 01 00 FF 
016f0     5B 4D 06 F6 | 	mov	local24, ##@LR__4192
016f4     26 15 02 F6 | 	mov	arg02, local24
016f8     84 61 B1 FD | 	call	#__system___string_cmp
016fc     FD 36 0A F6 | 	mov	local13, result1 wz
01700     30 00 90 5D |  if_ne	jmp	#LR__0068
01704     7A 00 00 FF 
01708     A4 E4 05 F1 | 	add	objptr, ##62628
0170c     F2 12 02 FB | 	rdlong	arg01, objptr
01710     7A 00 00 FF 
01714     A4 E4 85 F1 | 	sub	objptr, ##62628
01718     34 01 00 FF 
0171c     5D 47 06 F6 | 	mov	local21, ##@LR__4193
01720     23 45 02 F6 | 	mov	local20, local21
01724     22 15 02 F6 | 	mov	arg02, local20
01728     54 61 B1 FD | 	call	#__system___string_cmp
0172c     FD 4C 0A F6 | 	mov	local24, result1 wz
01730     BC 00 90 AD |  if_e	jmp	#LR__0070
01734                 | LR__0068
01734     7A 00 00 FF 
01738     A0 E4 05 F1 | 	add	objptr, ##62624
0173c     F2 12 02 FB | 	rdlong	arg01, objptr
01740     7A 00 00 FF 
01744     A0 E4 85 F1 | 	sub	objptr, ##62624
01748     34 01 00 FF 
0174c     5F 47 06 F6 | 	mov	local21, ##@LR__4194
01750     23 15 02 F6 | 	mov	arg02, local21
01754     28 61 B1 FD | 	call	#__system___string_cmp
01758     FD 44 0A F6 | 	mov	local20, result1 wz
0175c     30 00 90 5D |  if_ne	jmp	#LR__0069
01760     7A 00 00 FF 
01764     A4 E4 05 F1 | 	add	objptr, ##62628
01768     F2 12 02 FB | 	rdlong	arg01, objptr
0176c     7A 00 00 FF 
01770     A4 E4 85 F1 | 	sub	objptr, ##62628
01774     34 01 00 FF 
01778     61 4F 06 F6 | 	mov	local25, ##@LR__4195
0177c     27 49 02 F6 | 	mov	local22, local25
01780     24 15 02 F6 | 	mov	arg02, local22
01784     F8 60 B1 FD | 	call	#__system___string_cmp
01788     FD 46 0A F6 | 	mov	local21, result1 wz
0178c     60 00 90 AD |  if_e	jmp	#LR__0070
01790                 | LR__0069
01790     7A 00 00 FF 
01794     A0 E4 05 F1 | 	add	objptr, ##62624
01798     F2 12 02 FB | 	rdlong	arg01, objptr
0179c     7A 00 00 FF 
017a0     A0 E4 85 F1 | 	sub	objptr, ##62624
017a4     34 01 00 FF 
017a8     63 51 06 F6 | 	mov	local26, ##@LR__4196
017ac     28 4F 02 F6 | 	mov	local25, local26
017b0     27 15 02 F6 | 	mov	arg02, local25
017b4     C8 60 B1 FD | 	call	#__system___string_cmp
017b8     FD 48 0A F6 | 	mov	local22, result1 wz
017bc     10 01 90 5D |  if_ne	jmp	#LR__0074
017c0     7A 00 00 FF 
017c4     A4 E4 05 F1 | 	add	objptr, ##62628
017c8     F2 12 02 FB | 	rdlong	arg01, objptr
017cc     7A 00 00 FF 
017d0     A4 E4 85 F1 | 	sub	objptr, ##62628
017d4     34 01 00 FF 
017d8     65 53 06 F6 | 	mov	local27, ##@LR__4197
017dc     29 51 02 F6 | 	mov	local26, local27
017e0     28 15 02 F6 | 	mov	arg02, local26
017e4     98 60 B1 FD | 	call	#__system___string_cmp
017e8     FD 4E 0A F6 | 	mov	local25, result1 wz
017ec     E0 00 90 5D |  if_ne	jmp	#LR__0074
017f0                 | LR__0070
017f0     12 31 02 F6 | 	mov	local10, local04
017f4     03 30 66 F0 | 	shl	local10, #3
017f8     53 00 00 FF 
017fc     E0 E5 05 F1 | 	add	objptr, ##42976
01800     F2 30 02 F1 | 	add	local10, objptr
01804     26 00 00 FF 
01808     C0 E4 05 F1 | 	add	objptr, ##19648
0180c     F2 12 02 FB | 	rdlong	arg01, objptr
01810     04 E4 05 F1 | 	add	objptr, #4
01814     F2 32 02 FB | 	rdlong	local11, objptr
01818     7A 00 00 FF 
0181c     A4 E4 85 F1 | 	sub	objptr, ##62628
01820     19 35 02 F6 | 	mov	local12, local11
01824     1A 15 02 F6 | 	mov	arg02, local12
01828     88 60 B1 FD | 	call	#__system___string_concat
0182c     18 FB 61 FC | 	wrlong	result1, local10
01830                 | '     lparts(i).part$=s1$+s2$
01830                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01830     12 3B 02 F6 | 	mov	local15, local04
01834     01 3A 06 F1 | 	add	local15, #1
01838     1E 55 02 F6 | 	mov	local28, local16
0183c     01 54 06 F1 | 	add	local28, #1
01840     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01844                 | LR__0071
01844     2A 3B 52 F2 | 	cmps	local15, local28 wc
01848     7C 00 90 3D |  if_ae	jmp	#LR__0073
0184c     1D 29 02 F6 | 	mov	local06, local15
01850     01 28 06 F1 | 	add	local06, #1
01854     03 28 66 F0 | 	shl	local06, #3
01858     53 00 00 FF 
0185c     E0 E5 05 F1 | 	add	objptr, ##42976
01860     F2 28 02 F1 | 	add	local06, objptr
01864     14 1F 02 FB | 	rdlong	local01, local06
01868     1D 2B 02 F6 | 	mov	local07, local15
0186c     01 2A 06 F1 | 	add	local07, #1
01870     03 2A 66 F0 | 	shl	local07, #3
01874     F2 2A 02 F1 | 	add	local07, objptr
01878     04 2A 06 F1 | 	add	local07, #4
0187c     15 27 02 FB | 	rdlong	local05, local07
01880     1D 2B 02 F6 | 	mov	local07, local15
01884     03 2A 66 F0 | 	shl	local07, #3
01888     F2 34 02 F6 | 	mov	local12, objptr
0188c     F2 2A 02 F1 | 	add	local07, objptr
01890     15 1F 62 FC | 	wrlong	local01, local07
01894     1D 33 02 F6 | 	mov	local11, local15
01898     19 39 02 F6 | 	mov	local14, local11
0189c     1C 37 02 F6 | 	mov	local13, local14
018a0     03 36 66 F0 | 	shl	local13, #3
018a4     F2 4C 02 F6 | 	mov	local24, objptr
018a8     F2 36 02 F1 | 	add	local13, objptr
018ac     04 36 06 F1 | 	add	local13, #4
018b0     1B 27 62 FC | 	wrlong	local05, local13
018b4     04 36 86 F1 | 	sub	local13, #4
018b8     01 3A 06 F1 | 	add	local15, #1
018bc     53 00 00 FF 
018c0     E0 E5 85 F1 | 	sub	objptr, ##42976
018c4     7C FF 9F FD | 	jmp	#LR__0071
018c8                 | LR__0072
018c8                 | LR__0073
018c8     01 24 86 F1 | 	sub	local04, #1
018cc     01 3C 86 F1 | 	sub	local16, #1
018d0                 | LR__0074
018d0     01 24 06 F1 | 	add	local04, #1
018d4     1E 25 52 F2 | 	cmps	local04, local16 wc
018d8     58 FC 9F CD |  if_b	jmp	#LR__0065
018dc                 | '  
018dc                 | ' ' 1f : now remove parts that are spaces
018dc                 | ' 
018dc                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018dc     00 24 06 F6 | 	mov	local04, #0
018e0     1E 57 02 F6 | 	mov	local29, local16
018e4     01 56 06 F1 | 	add	local29, #1
018e8                 | LR__0075
018e8     2B 25 52 F2 | 	cmps	local04, local29 wc
018ec     50 00 90 3D |  if_ae	jmp	#LR__0076
018f0     12 31 02 F6 | 	mov	local10, local04
018f4     03 30 66 F0 | 	shl	local10, #3
018f8     53 00 00 FF 
018fc     E0 E5 05 F1 | 	add	objptr, ##42976
01900     F2 30 02 F1 | 	add	local10, objptr
01904     12 35 02 F6 | 	mov	local12, local04
01908     1A 33 02 F6 | 	mov	local11, local12
0190c     19 39 02 F6 | 	mov	local14, local11
01910     03 38 66 F0 | 	shl	local14, #3
01914     F2 36 02 F6 | 	mov	local13, objptr
01918     F2 38 02 F1 | 	add	local14, objptr
0191c     1C 13 02 FB | 	rdlong	arg01, local14
01920     53 00 00 FF 
01924     E0 E5 85 F1 | 	sub	objptr, ##42976
01928     70 83 B1 FD | 	call	#__system__RTrim_S
0192c     FD 12 02 F6 | 	mov	arg01, result1
01930     A8 82 B1 FD | 	call	#__system__LTrim_S
01934     18 FB 61 FC | 	wrlong	result1, local10
01938     01 24 06 F1 | 	add	local04, #1
0193c     A8 FF 9F FD | 	jmp	#LR__0075
01940                 | LR__0076
01940     00 24 06 F6 | 	mov	local04, #0
01944     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01948                 | ' 
01948                 | ' i=0
01948                 | ' do 
01948                 | LR__0077
01948                 | '   if len(lparts(i).part$)=0 then 
01948     12 29 02 F6 | 	mov	local06, local04
0194c     03 28 66 F0 | 	shl	local06, #3
01950     53 00 00 FF 
01954     E0 E5 05 F1 | 	add	objptr, ##42976
01958     F2 2A 02 F6 | 	mov	local07, objptr
0195c     F2 28 02 F1 | 	add	local06, objptr
01960     14 13 02 FB | 	rdlong	arg01, local06
01964     53 00 00 FF 
01968     E0 E5 85 F1 | 	sub	objptr, ##42976
0196c     09 2D 02 F6 | 	mov	local08, arg01
01970                 | LR__0078
01970     16 FB C9 FA | 	rdbyte	result1, local08 wz
01974     01 2C 06 51 |  if_ne	add	local08, #1
01978     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
0197c     09 2D 8A F1 | 	sub	local08, arg01 wz
01980     C4 00 90 5D |  if_ne	jmp	#LR__0082
01984                 | '     if i=k-1 then k-=1  :  exit
01984     1E 1F 02 F6 | 	mov	local01, local16
01988     01 1E 86 F1 | 	sub	local01, #1
0198c     0F 25 0A F2 | 	cmp	local04, local01 wz
01990     01 3C 86 A1 |  if_e	sub	local16, #1
01994     C4 00 90 AD |  if_e	jmp	#LR__0084
01998                 | '     if i<k-1 then 
01998     1E 1F 02 F6 | 	mov	local01, local16
0199c     01 1E 86 F1 | 	sub	local01, #1
019a0     0F 25 52 F2 | 	cmps	local04, local01 wc
019a4     A0 00 90 3D |  if_ae	jmp	#LR__0081
019a8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019a8     12 3B 02 F6 | 	mov	local15, local04
019ac     1E 59 02 F6 | 	mov	local30, local16
019b0     01 58 86 F1 | 	sub	local30, #1
019b4                 | LR__0079
019b4     2C 3B 52 F2 | 	cmps	local15, local30 wc
019b8     80 00 90 3D |  if_ae	jmp	#LR__0080
019bc     1D 29 02 F6 | 	mov	local06, local15
019c0     01 28 06 F1 | 	add	local06, #1
019c4     03 28 66 F0 | 	shl	local06, #3
019c8     53 00 00 FF 
019cc     E0 E5 05 F1 | 	add	objptr, ##42976
019d0     F2 28 02 F1 | 	add	local06, objptr
019d4     14 1F 02 FB | 	rdlong	local01, local06
019d8     1D 2B 02 F6 | 	mov	local07, local15
019dc     01 2A 06 F1 | 	add	local07, #1
019e0     03 2A 66 F0 | 	shl	local07, #3
019e4     F2 2A 02 F1 | 	add	local07, objptr
019e8     04 2A 06 F1 | 	add	local07, #4
019ec     15 27 02 FB | 	rdlong	local05, local07
019f0     1D 31 02 F6 | 	mov	local10, local15
019f4     18 2B 02 F6 | 	mov	local07, local10
019f8     03 2A 66 F0 | 	shl	local07, #3
019fc     F2 34 02 F6 | 	mov	local12, objptr
01a00     F2 2A 02 F1 | 	add	local07, objptr
01a04     15 1F 62 FC | 	wrlong	local01, local07
01a08     1D 33 02 F6 | 	mov	local11, local15
01a0c     19 39 02 F6 | 	mov	local14, local11
01a10     1C 37 02 F6 | 	mov	local13, local14
01a14     03 36 66 F0 | 	shl	local13, #3
01a18     F2 4C 02 F6 | 	mov	local24, objptr
01a1c     F2 36 02 F1 | 	add	local13, objptr
01a20     04 36 06 F1 | 	add	local13, #4
01a24     1B 27 62 FC | 	wrlong	local05, local13
01a28     04 36 86 F1 | 	sub	local13, #4
01a2c     01 3A 06 F1 | 	add	local15, #1
01a30     53 00 00 FF 
01a34     E0 E5 85 F1 | 	sub	objptr, ##42976
01a38     78 FF 9F FD | 	jmp	#LR__0079
01a3c                 | LR__0080
01a3c     01 3C 86 F1 | 	sub	local16, #1
01a40                 | '       if i>0 then i-=1 
01a40     01 24 56 F2 | 	cmps	local04, #1 wc
01a44     01 24 86 31 |  if_ae	sub	local04, #1
01a48                 | LR__0081
01a48                 | LR__0082
01a48     01 24 06 F1 | 	add	local04, #1
01a4c     1E 1F 02 F6 | 	mov	local01, local16
01a50     01 1E 86 F1 | 	sub	local01, #1
01a54     0F 25 5A F2 | 	cmps	local04, local01 wcz
01a58     EC FE 9F ED |  if_be	jmp	#LR__0077
01a5c                 | LR__0083
01a5c                 | LR__0084
01a5c                 | ' 
01a5c                 | ' ' 1g: lowercase all that is not a string
01a5c                 | ' 
01a5c                 | ' for j=0 to k-1
01a5c     00 3A 06 F6 | 	mov	local15, #0
01a60     1E 5B 02 F6 | 	mov	local31, local16
01a64                 | LR__0085
01a64     2D 3B 52 F2 | 	cmps	local15, local31 wc
01a68     D0 00 90 3D |  if_ae	jmp	#LR__0088
01a6c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a6c     1D 29 02 F6 | 	mov	local06, local15
01a70     03 28 66 F0 | 	shl	local06, #3
01a74     53 00 00 FF 
01a78     E0 E5 05 F1 | 	add	objptr, ##42976
01a7c     F2 2A 02 F6 | 	mov	local07, objptr
01a80     F2 28 02 F1 | 	add	local06, objptr
01a84     14 13 02 FB | 	rdlong	arg01, local06
01a88     01 14 06 F6 | 	mov	arg02, #1
01a8c     53 00 00 FF 
01a90     E0 E5 85 F1 | 	sub	objptr, ##42976
01a94     D0 7D B1 FD | 	call	#__system__Left_S
01a98     FD 12 02 F6 | 	mov	arg01, result1
01a9c     34 01 00 FF 
01aa0     67 15 06 F6 | 	mov	arg02, ##@LR__4198
01aa4     D8 5D B1 FD | 	call	#__system___string_cmp
01aa8     00 FA 0D F2 | 	cmp	result1, #0 wz
01aac     44 00 90 5D |  if_ne	jmp	#LR__0086
01ab0     1D 2B 02 F6 | 	mov	local07, local15
01ab4     03 2A 66 F0 | 	shl	local07, #3
01ab8     53 00 00 FF 
01abc     E0 E5 05 F1 | 	add	objptr, ##42976
01ac0     F2 34 02 F6 | 	mov	local12, objptr
01ac4     F2 2A 02 F1 | 	add	local07, objptr
01ac8     15 13 02 FB | 	rdlong	arg01, local07
01acc     01 14 06 F6 | 	mov	arg02, #1
01ad0     53 00 00 FF 
01ad4     E0 E5 85 F1 | 	sub	objptr, ##42976
01ad8     14 7E B1 FD | 	call	#__system__Right_S
01adc     FD 12 02 F6 | 	mov	arg01, result1
01ae0     34 01 00 FF 
01ae4     69 15 06 F6 | 	mov	arg02, ##@LR__4199
01ae8     94 5D B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     40 00 90 AD |  if_e	jmp	#LR__0087
01af4                 | LR__0086
01af4     1D 31 02 F6 | 	mov	local10, local15
01af8     03 30 66 F0 | 	shl	local10, #3
01afc     53 00 00 FF 
01b00     E0 E5 05 F1 | 	add	objptr, ##42976
01b04     F2 30 02 F1 | 	add	local10, objptr
01b08     1D 35 02 F6 | 	mov	local12, local15
01b0c     1A 33 02 F6 | 	mov	local11, local12
01b10     19 39 02 F6 | 	mov	local14, local11
01b14     03 38 66 F0 | 	shl	local14, #3
01b18     F2 36 02 F6 | 	mov	local13, objptr
01b1c     F2 38 02 F1 | 	add	local14, objptr
01b20     1C 13 02 FB | 	rdlong	arg01, local14
01b24     53 00 00 FF 
01b28     E0 E5 85 F1 | 	sub	objptr, ##42976
01b2c     EC 7F B1 FD | 	call	#__system__LCase_S
01b30     18 FB 61 FC | 	wrlong	result1, local10
01b34                 | LR__0087
01b34     01 3A 06 F1 | 	add	local15, #1
01b38     28 FF 9F FD | 	jmp	#LR__0085
01b3c                 | LR__0088
01b3c                 | ' 
01b3c                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b3c                 | ' 
01b3c                 | ' for i=0 to k: lparts(i).token=-1: next i
01b3c     00 24 06 F6 | 	mov	local04, #0
01b40     1E 5D 02 F6 | 	mov	local32, local16
01b44     01 5C 06 F1 | 	add	local32, #1
01b48     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b4c                 | LR__0089
01b4c     2E 25 52 F2 | 	cmps	local04, local32 wc
01b50     30 00 90 3D |  if_ae	jmp	#LR__0091
01b54     12 31 02 F6 | 	mov	local10, local04
01b58     03 30 66 F0 | 	shl	local10, #3
01b5c     53 00 00 FF 
01b60     E0 E5 05 F1 | 	add	objptr, ##42976
01b64     F2 30 02 F1 | 	add	local10, objptr
01b68     04 30 06 F1 | 	add	local10, #4
01b6c     FF FF FF FF 
01b70     18 FF 6B FC | 	wrlong	##-1, local10
01b74     01 24 06 F1 | 	add	local04, #1
01b78     53 00 00 FF 
01b7c     E0 E5 85 F1 | 	sub	objptr, ##42976
01b80     C8 FF 9F FD | 	jmp	#LR__0089
01b84                 | LR__0090
01b84                 | LR__0091
01b84                 | ' 
01b84                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b84                 | ' 
01b84                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b84     53 00 00 FF 
01b88     E0 E5 05 F1 | 	add	objptr, ##42976
01b8c     F2 12 02 FB | 	rdlong	arg01, objptr
01b90     53 00 00 FF 
01b94     E0 E5 85 F1 | 	sub	objptr, ##42976
01b98     09 2D 02 F6 | 	mov	local08, arg01
01b9c     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01ba0                 | LR__0092
01ba0     16 FB C9 FA | 	rdbyte	result1, local08 wz
01ba4     01 2C 06 51 |  if_ne	add	local08, #1
01ba8     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01bac                 | LR__0093
01bac     09 2D 8A F1 | 	sub	local08, arg01 wz
01bb0     3C 0D 90 AD |  if_e	jmp	#LR__0126
01bb4                 | ' 
01bb4                 | ' ' 2a find part types 
01bb4                 | ' 
01bb4                 | ' for i=0 to k-1
01bb4     00 24 06 F6 | 	mov	local04, #0
01bb8     1E 5F 02 F6 | 	mov	local33, local16
01bbc                 | LR__0094
01bbc     2F 25 52 F2 | 	cmps	local04, local33 wc
01bc0     9C 05 90 3D |  if_ae	jmp	#LR__0103
01bc4     12 31 02 F6 | 	mov	local10, local04
01bc8     03 30 66 F0 | 	shl	local10, #3
01bcc     53 00 00 FF 
01bd0     E0 E5 05 F1 | 	add	objptr, ##42976
01bd4     F2 30 02 F1 | 	add	local10, objptr
01bd8     12 33 02 F6 | 	mov	local11, local04
01bdc     19 39 02 F6 | 	mov	local14, local11
01be0     1C 37 02 F6 | 	mov	local13, local14
01be4     03 36 66 F0 | 	shl	local13, #3
01be8     F2 4C 02 F6 | 	mov	local24, objptr
01bec     F2 36 02 F1 | 	add	local13, objptr
01bf0     1B 13 02 FB | 	rdlong	arg01, local13
01bf4     53 00 00 FF 
01bf8     E0 E5 85 F1 | 	sub	objptr, ##42976
01bfc     FC 0F B0 FD | 	call	#_isseparator
01c00     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c04     04 30 06 F1 | 	add	local10, #4
01c08     18 FB 61 FC | 	wrlong	result1, local10
01c0c                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
01c0c     12 31 02 F6 | 	mov	local10, local04
01c10     03 30 66 F0 | 	shl	local10, #3
01c14     53 00 00 FF 
01c18     E0 E5 05 F1 | 	add	objptr, ##42976
01c1c     F2 30 02 F1 | 	add	local10, objptr
01c20     04 30 06 F1 | 	add	local10, #4
01c24     18 35 02 FB | 	rdlong	local12, local10
01c28     01 34 56 F2 | 	cmps	local12, #1 wc
01c2c     53 00 00 FF 
01c30     E0 E5 85 F1 | 	sub	objptr, ##42976
01c34     20 05 90 3D |  if_ae	jmp	#LR__0102
01c38     12 31 02 F6 | 	mov	local10, local04
01c3c     03 30 66 F0 | 	shl	local10, #3
01c40     53 00 00 FF 
01c44     E0 E5 05 F1 | 	add	objptr, ##42976
01c48     F2 30 02 F1 | 	add	local10, objptr
01c4c     12 33 02 F6 | 	mov	local11, local04
01c50     19 39 02 F6 | 	mov	local14, local11
01c54     1C 37 02 F6 | 	mov	local13, local14
01c58     03 36 66 F0 | 	shl	local13, #3
01c5c     F2 4C 02 F6 | 	mov	local24, objptr
01c60     F2 36 02 F1 | 	add	local13, objptr
01c64     1B 13 02 FB | 	rdlong	arg01, local13
01c68     53 00 00 FF 
01c6c     E0 E5 85 F1 | 	sub	objptr, ##42976
01c70     A8 0C B0 FD | 	call	#_isoperator
01c74     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c78     04 30 06 F1 | 	add	local10, #4
01c7c     18 FB 61 FC | 	wrlong	result1, local10
01c80                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
01c80     12 31 02 F6 | 	mov	local10, local04
01c84     03 30 66 F0 | 	shl	local10, #3
01c88     53 00 00 FF 
01c8c     E0 E5 05 F1 | 	add	objptr, ##42976
01c90     F2 30 02 F1 | 	add	local10, objptr
01c94     04 30 06 F1 | 	add	local10, #4
01c98     18 35 02 FB | 	rdlong	local12, local10
01c9c     01 34 56 F2 | 	cmps	local12, #1 wc
01ca0     53 00 00 FF 
01ca4     E0 E5 85 F1 | 	sub	objptr, ##42976
01ca8     AC 04 90 3D |  if_ae	jmp	#LR__0102
01cac     12 31 02 F6 | 	mov	local10, local04
01cb0     03 30 66 F0 | 	shl	local10, #3
01cb4     53 00 00 FF 
01cb8     E0 E5 05 F1 | 	add	objptr, ##42976
01cbc     F2 30 02 F1 | 	add	local10, objptr
01cc0     12 33 02 F6 | 	mov	local11, local04
01cc4     19 39 02 F6 | 	mov	local14, local11
01cc8     1C 37 02 F6 | 	mov	local13, local14
01ccc     03 36 66 F0 | 	shl	local13, #3
01cd0     F2 4C 02 F6 | 	mov	local24, objptr
01cd4     F2 36 02 F1 | 	add	local13, objptr
01cd8     1B 13 02 FB | 	rdlong	arg01, local13
01cdc     53 00 00 FF 
01ce0     E0 E5 85 F1 | 	sub	objptr, ##42976
01ce4                 | ' 
01ce4                 | ' select case s
01ce4     35 01 00 FF 
01ce8     32 14 06 F6 | 	mov	arg02, ##@LR__4256
01cec     90 5B B1 FD | 	call	#__system___string_cmp
01cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
01cf4     1B FA 05 A6 |  if_e	mov	result1, #27
01cf8     00 FA 05 56 |  if_ne	mov	result1, #0
01cfc     FD FA E1 F8 | 	getbyte	result1, result1, #0
01d00     04 30 06 F1 | 	add	local10, #4
01d04     18 FB 61 FC | 	wrlong	result1, local10
01d08                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
01d08     12 31 02 F6 | 	mov	local10, local04
01d0c     03 30 66 F0 | 	shl	local10, #3
01d10     53 00 00 FF 
01d14     E0 E5 05 F1 | 	add	objptr, ##42976
01d18     F2 30 02 F1 | 	add	local10, objptr
01d1c     04 30 06 F1 | 	add	local10, #4
01d20     18 35 02 FB | 	rdlong	local12, local10
01d24     01 34 56 F2 | 	cmps	local12, #1 wc
01d28     53 00 00 FF 
01d2c     E0 E5 85 F1 | 	sub	objptr, ##42976
01d30     24 04 90 3D |  if_ae	jmp	#LR__0102
01d34     12 31 02 F6 | 	mov	local10, local04
01d38     03 30 66 F0 | 	shl	local10, #3
01d3c     53 00 00 FF 
01d40     E0 E5 05 F1 | 	add	objptr, ##42976
01d44     F2 30 02 F1 | 	add	local10, objptr
01d48     12 33 02 F6 | 	mov	local11, local04
01d4c     19 39 02 F6 | 	mov	local14, local11
01d50     1C 37 02 F6 | 	mov	local13, local14
01d54     03 36 66 F0 | 	shl	local13, #3
01d58     F2 4C 02 F6 | 	mov	local24, objptr
01d5c     F2 36 02 F1 | 	add	local13, objptr
01d60     1B 13 02 FB | 	rdlong	arg01, local13
01d64     53 00 00 FF 
01d68     E0 E5 85 F1 | 	sub	objptr, ##42976
01d6c     8C 10 B0 FD | 	call	#_iscommand
01d70     FD FA E1 F8 | 	getbyte	result1, result1, #0
01d74     04 30 06 F1 | 	add	local10, #4
01d78     18 FB 61 FC | 	wrlong	result1, local10
01d7c                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
01d7c     12 31 02 F6 | 	mov	local10, local04
01d80     03 30 66 F0 | 	shl	local10, #3
01d84     53 00 00 FF 
01d88     E0 E5 05 F1 | 	add	objptr, ##42976
01d8c     F2 30 02 F1 | 	add	local10, objptr
01d90     04 30 06 F1 | 	add	local10, #4
01d94     18 35 02 FB | 	rdlong	local12, local10
01d98     01 34 56 F2 | 	cmps	local12, #1 wc
01d9c     53 00 00 FF 
01da0     E0 E5 85 F1 | 	sub	objptr, ##42976
01da4     B0 03 90 3D |  if_ae	jmp	#LR__0102
01da8     12 31 02 F6 | 	mov	local10, local04
01dac     03 30 66 F0 | 	shl	local10, #3
01db0     53 00 00 FF 
01db4     E0 E5 05 F1 | 	add	objptr, ##42976
01db8     F2 30 02 F1 | 	add	local10, objptr
01dbc     12 33 02 F6 | 	mov	local11, local04
01dc0     19 39 02 F6 | 	mov	local14, local11
01dc4     1C 37 02 F6 | 	mov	local13, local14
01dc8     03 36 66 F0 | 	shl	local13, #3
01dcc     F2 4C 02 F6 | 	mov	local24, objptr
01dd0     F2 36 02 F1 | 	add	local13, objptr
01dd4     1B 13 02 FB | 	rdlong	arg01, local13
01dd8     53 00 00 FF 
01ddc     E0 E5 85 F1 | 	sub	objptr, ##42976
01de0     98 16 B0 FD | 	call	#_isfunction
01de4     FD FA E1 F8 | 	getbyte	result1, result1, #0
01de8     04 30 06 F1 | 	add	local10, #4
01dec     18 FB 61 FC | 	wrlong	result1, local10
01df0                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
01df0     12 31 02 F6 | 	mov	local10, local04
01df4     03 30 66 F0 | 	shl	local10, #3
01df8     53 00 00 FF 
01dfc     E0 E5 05 F1 | 	add	objptr, ##42976
01e00     F2 30 02 F1 | 	add	local10, objptr
01e04     04 30 06 F1 | 	add	local10, #4
01e08     18 35 02 FB | 	rdlong	local12, local10
01e0c     01 34 56 F2 | 	cmps	local12, #1 wc
01e10     53 00 00 FF 
01e14     E0 E5 85 F1 | 	sub	objptr, ##42976
01e18     3C 03 90 3D |  if_ae	jmp	#LR__0102
01e1c     12 29 02 F6 | 	mov	local06, local04
01e20     03 28 66 F0 | 	shl	local06, #3
01e24     53 00 00 FF 
01e28     E0 E5 05 F1 | 	add	objptr, ##42976
01e2c     F2 28 02 F1 | 	add	local06, objptr
01e30     14 13 02 FB | 	rdlong	arg01, local06
01e34     53 00 00 FF 
01e38     E0 E5 85 F1 | 	sub	objptr, ##42976
01e3c     70 1A B0 FD | 	call	#_isnum
01e40     FD 1E 02 F6 | 	mov	local01, result1
01e44     7A 00 00 FF 
01e48     A8 E4 05 F1 | 	add	objptr, ##62632
01e4c     F2 1E 62 FC | 	wrlong	local01, objptr
01e50     12 29 02 F6 | 	mov	local06, local04
01e54     03 28 66 F0 | 	shl	local06, #3
01e58     26 00 00 FF 
01e5c     C8 E4 85 F1 | 	sub	objptr, ##19656
01e60     F2 28 02 F1 | 	add	local06, objptr
01e64     14 13 02 FB | 	rdlong	arg01, local06
01e68     53 00 00 FF 
01e6c     E0 E5 85 F1 | 	sub	objptr, ##42976
01e70     14 1D B0 FD | 	call	#_isint
01e74     FD 1E 02 F6 | 	mov	local01, result1
01e78     7A 00 00 FF 
01e7c     AC E4 05 F1 | 	add	objptr, ##62636
01e80     F2 1E 62 FC | 	wrlong	local01, objptr
01e84     12 29 02 F6 | 	mov	local06, local04
01e88     03 28 66 F0 | 	shl	local06, #3
01e8c     26 00 00 FF 
01e90     CC E4 85 F1 | 	sub	objptr, ##19660
01e94     F2 2A 02 F6 | 	mov	local07, objptr
01e98     F2 28 02 F1 | 	add	local06, objptr
01e9c     14 13 02 FB | 	rdlong	arg01, local06
01ea0     53 00 00 FF 
01ea4     E0 E5 85 F1 | 	sub	objptr, ##42976
01ea8     34 1E B0 FD | 	call	#_isdec
01eac     7A 00 00 FF 
01eb0     B0 E4 05 F1 | 	add	objptr, ##62640
01eb4     F2 FA 61 FC | 	wrlong	result1, objptr
01eb8                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
01eb8     08 E4 85 F1 | 	sub	objptr, #8
01ebc     F2 1E 0A FB | 	rdlong	local01, objptr wz
01ec0     7A 00 00 FF 
01ec4     A8 E4 85 F1 | 	sub	objptr, ##62632
01ec8     60 00 90 AD |  if_e	jmp	#LR__0095
01ecc     7A 00 00 FF 
01ed0     AC E4 05 F1 | 	add	objptr, ##62636
01ed4     F2 30 0A FB | 	rdlong	local10, objptr wz
01ed8     7A 00 00 FF 
01edc     AC E4 85 F1 | 	sub	objptr, ##62636
01ee0     48 00 90 AD |  if_e	jmp	#LR__0095
01ee4     7A 00 00 FF 
01ee8     B0 E4 05 F1 | 	add	objptr, ##62640
01eec     F2 34 0A FB | 	rdlong	local12, objptr wz
01ef0     7A 00 00 FF 
01ef4     B0 E4 85 F1 | 	sub	objptr, ##62640
01ef8     30 00 90 AD |  if_e	jmp	#LR__0095
01efc     12 27 02 F6 | 	mov	local05, local04
01f00     13 31 02 F6 | 	mov	local10, local05
01f04     03 30 66 F0 | 	shl	local10, #3
01f08     53 00 00 FF 
01f0c     E0 E5 05 F1 | 	add	objptr, ##42976
01f10     F2 30 02 F1 | 	add	local10, objptr
01f14     04 30 06 F1 | 	add	local10, #4
01f18     01 00 80 FF 
01f1c     18 01 68 FC | 	wrlong	##512, local10
01f20     53 00 00 FF 
01f24     E0 E5 85 F1 | 	sub	objptr, ##42976
01f28     2C 02 90 FD | 	jmp	#LR__0102
01f2c                 | LR__0095
01f2c                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
01f2c     7A 00 00 FF 
01f30     A8 E4 05 F1 | 	add	objptr, ##62632
01f34     F2 1E 0A FB | 	rdlong	local01, objptr wz
01f38     7A 00 00 FF 
01f3c     A8 E4 85 F1 | 	sub	objptr, ##62632
01f40     64 00 90 AD |  if_e	jmp	#LR__0096
01f44     7A 00 00 FF 
01f48     AC E4 05 F1 | 	add	objptr, ##62636
01f4c     F2 30 0A FB | 	rdlong	local10, objptr wz
01f50     7A 00 00 FF 
01f54     AC E4 85 F1 | 	sub	objptr, ##62636
01f58     7A 00 00 5F 
01f5c     B0 E4 05 51 |  if_ne	add	objptr, ##62640
01f60     F2 34 02 5B |  if_ne	rdlong	local12, objptr
01f64     7A 00 00 5F 
01f68     B0 E4 85 51 |  if_ne	sub	objptr, ##62640
01f6c     1A 2B 22 56 |  if_ne	not	local07, local12
01f70     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01f74     30 00 90 AD |  if_e	jmp	#LR__0096
01f78     12 27 02 F6 | 	mov	local05, local04
01f7c     13 31 02 F6 | 	mov	local10, local05
01f80     03 30 66 F0 | 	shl	local10, #3
01f84     53 00 00 FF 
01f88     E0 E5 05 F1 | 	add	objptr, ##42976
01f8c     F2 30 02 F1 | 	add	local10, objptr
01f90     04 30 06 F1 | 	add	local10, #4
01f94     01 00 80 FF 
01f98     18 03 68 FC | 	wrlong	##513, local10
01f9c     53 00 00 FF 
01fa0     E0 E5 85 F1 | 	sub	objptr, ##42976
01fa4     B0 01 90 FD | 	jmp	#LR__0102
01fa8                 | LR__0096
01fa8                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
01fa8     7A 00 00 FF 
01fac     A8 E4 05 F1 | 	add	objptr, ##62632
01fb0     F2 1E 0A FB | 	rdlong	local01, objptr wz
01fb4     7A 00 00 FF 
01fb8     A8 E4 85 F1 | 	sub	objptr, ##62632
01fbc     7A 00 00 5F 
01fc0     AC E4 05 51 |  if_ne	add	objptr, ##62636
01fc4     F2 30 02 5B |  if_ne	rdlong	local10, objptr
01fc8     7A 00 00 5F 
01fcc     AC E4 85 51 |  if_ne	sub	objptr, ##62636
01fd0     18 31 22 56 |  if_ne	not	local10, local10
01fd4     00 30 0E 52 |  if_ne	cmp	local10, #0 wz
01fd8     7A 00 00 5F 
01fdc     B0 E4 05 51 |  if_ne	add	objptr, ##62640
01fe0     F2 34 02 5B |  if_ne	rdlong	local12, objptr
01fe4     7A 00 00 5F 
01fe8     B0 E4 85 51 |  if_ne	sub	objptr, ##62640
01fec     1A 2B 22 56 |  if_ne	not	local07, local12
01ff0     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01ff4     30 00 90 AD |  if_e	jmp	#LR__0097
01ff8     12 27 02 F6 | 	mov	local05, local04
01ffc     13 31 02 F6 | 	mov	local10, local05
02000     03 30 66 F0 | 	shl	local10, #3
02004     53 00 00 FF 
02008     E0 E5 05 F1 | 	add	objptr, ##42976
0200c     F2 30 02 F1 | 	add	local10, objptr
02010     04 30 06 F1 | 	add	local10, #4
02014     01 00 80 FF 
02018     18 05 68 FC | 	wrlong	##514, local10
0201c     53 00 00 FF 
02020     E0 E5 85 F1 | 	sub	objptr, ##42976
02024     30 01 90 FD | 	jmp	#LR__0102
02028                 | LR__0097
02028                 | ' 
02028                 | ' if isstring(lparts(i).part$) then 
02028     12 29 02 F6 | 	mov	local06, local04
0202c     03 28 66 F0 | 	shl	local06, #3
02030     53 00 00 FF 
02034     E0 E5 05 F1 | 	add	objptr, ##42976
02038     F2 28 02 F1 | 	add	local06, objptr
0203c     14 13 02 FB | 	rdlong	arg01, local06
02040     53 00 00 FF 
02044     E0 E5 85 F1 | 	sub	objptr, ##42976
02048     54 1D B0 FD | 	call	#_isstring
0204c     00 FA 0D F2 | 	cmp	result1, #0 wz
02050     A8 00 90 AD |  if_e	jmp	#LR__0100
02054     12 31 02 F6 | 	mov	local10, local04
02058     03 30 66 F0 | 	shl	local10, #3
0205c     53 00 00 FF 
02060     E0 E5 05 F1 | 	add	objptr, ##42976
02064     F2 30 02 F1 | 	add	local10, objptr
02068     04 30 06 F1 | 	add	local10, #4
0206c     01 00 80 FF 
02070     18 07 68 FC | 	wrlong	##515, local10
02074     12 27 02 F6 | 	mov	local05, local04
02078     13 31 02 F6 | 	mov	local10, local05
0207c     03 30 66 F0 | 	shl	local10, #3
02080     F2 30 02 F1 | 	add	local10, objptr
02084     12 39 02 F6 | 	mov	local14, local04
02088     03 38 66 F0 | 	shl	local14, #3
0208c     F2 38 02 F1 | 	add	local14, objptr
02090     1C 2B 02 FB | 	rdlong	local07, local14
02094     02 34 06 F6 | 	mov	local12, #2
02098     12 4D 02 F6 | 	mov	local24, local04
0209c     26 45 02 F6 | 	mov	local20, local24
020a0     22 47 02 F6 | 	mov	local21, local20
020a4     03 46 66 F0 | 	shl	local21, #3
020a8     F2 48 02 F6 | 	mov	local22, objptr
020ac     F2 46 02 F1 | 	add	local21, objptr
020b0     23 13 02 FB | 	rdlong	arg01, local21
020b4     53 00 00 FF 
020b8     E0 E5 85 F1 | 	sub	objptr, ##42976
020bc     09 2D 02 F6 | 	mov	local08, arg01
020c0     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
020c4                 | LR__0098
020c4     16 FB C9 FA | 	rdbyte	result1, local08 wz
020c8     01 2C 06 51 |  if_ne	add	local08, #1
020cc     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
020d0                 | LR__0099
020d0     09 2D 82 F1 | 	sub	local08, arg01
020d4     16 37 02 F6 | 	mov	local13, local08
020d8     1B 39 02 F6 | 	mov	local14, local13
020dc     02 38 86 F1 | 	sub	local14, #2
020e0     1C 33 02 F6 | 	mov	local11, local14
020e4     15 13 02 F6 | 	mov	arg01, local07
020e8     1A 15 02 F6 | 	mov	arg02, local12
020ec     19 17 02 F6 | 	mov	arg03, local11
020f0     8C 78 B1 FD | 	call	#__system__Mid_S
020f4     18 FB 61 FC | 	wrlong	result1, local10
020f8     5C 00 90 FD | 	jmp	#LR__0102
020fc                 | LR__0100
020fc                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
020fc     12 27 02 F6 | 	mov	local05, local04
02100     13 29 02 F6 | 	mov	local06, local05
02104     03 28 66 F0 | 	shl	local06, #3
02108     53 00 00 FF 
0210c     E0 E5 05 F1 | 	add	objptr, ##42976
02110     F2 28 02 F1 | 	add	local06, objptr
02114     14 13 02 FB | 	rdlong	arg01, local06
02118     53 00 00 FF 
0211c     E0 E5 85 F1 | 	sub	objptr, ##42976
02120     18 15 B0 FD | 	call	#_isname
02124     00 FA 0D F2 | 	cmp	result1, #0 wz
02128     2C 00 90 AD |  if_e	jmp	#LR__0101
0212c     12 27 02 F6 | 	mov	local05, local04
02130     13 31 02 F6 | 	mov	local10, local05
02134     03 30 66 F0 | 	shl	local10, #3
02138     53 00 00 FF 
0213c     E0 E5 05 F1 | 	add	objptr, ##42976
02140     F2 30 02 F1 | 	add	local10, objptr
02144     04 30 06 F1 | 	add	local10, #4
02148     01 00 80 FF 
0214c     18 09 68 FC | 	wrlong	##516, local10
02150     53 00 00 FF 
02154     E0 E5 85 F1 | 	sub	objptr, ##42976
02158                 | LR__0101
02158                 | LR__0102
02158     01 24 06 F1 | 	add	local04, #1
0215c     5C FA 9F FD | 	jmp	#LR__0094
02160                 | LR__0103
02160     1E 31 02 F6 | 	mov	local10, local16
02164     03 30 66 F0 | 	shl	local10, #3
02168     53 00 00 FF 
0216c     E0 E5 05 F1 | 	add	objptr, ##42976
02170     F2 30 02 F1 | 	add	local10, objptr
02174     04 30 06 F1 | 	add	local10, #4
02178     18 FD 6B FC | 	wrlong	#510, local10
0217c     1E 31 02 F6 | 	mov	local10, local16
02180     03 30 66 F0 | 	shl	local10, #3
02184     F2 30 02 F1 | 	add	local10, objptr
02188     34 01 00 FF 
0218c     6B 2B 06 F6 | 	mov	local07, ##@LR__4200
02190     18 2B 62 FC | 	wrlong	local07, local10
02194     10 00 00 FF 
02198     54 E4 05 F1 | 	add	objptr, ##8276
0219c     F2 3C 62 FC | 	wrlong	local16, objptr
021a0                 | ' 
021a0                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
021a0                 | ' 
021a0                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
021a0                 | ' 
021a0                 | ' ' process the case when simple load or save is called without ""
021a0                 | ' 
021a0                 | ' if (lparts(0).part$="load" orelse lparts(0).part$="save" orelse lparts(0).part$="brun") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then lparts(1).token=token_string
021a0     10 00 00 FF 
021a4     54 E4 85 F1 | 	sub	objptr, ##8276
021a8     F2 12 02 FB | 	rdlong	arg01, objptr
021ac     53 00 00 FF 
021b0     E0 E5 85 F1 | 	sub	objptr, ##42976
021b4     34 01 00 FF 
021b8     6C 15 06 F6 | 	mov	arg02, ##@LR__4201
021bc     C0 56 B1 FD | 	call	#__system___string_cmp
021c0     00 FA 0D F2 | 	cmp	result1, #0 wz
021c4     50 00 90 AD |  if_e	jmp	#LR__0104
021c8     53 00 00 FF 
021cc     E0 E5 05 F1 | 	add	objptr, ##42976
021d0     F2 12 02 FB | 	rdlong	arg01, objptr
021d4     53 00 00 FF 
021d8     E0 E5 85 F1 | 	sub	objptr, ##42976
021dc     34 01 00 FF 
021e0     71 15 06 F6 | 	mov	arg02, ##@LR__4202
021e4     98 56 B1 FD | 	call	#__system___string_cmp
021e8     00 FA 0D F2 | 	cmp	result1, #0 wz
021ec     28 00 90 AD |  if_e	jmp	#LR__0104
021f0     53 00 00 FF 
021f4     E0 E5 05 F1 | 	add	objptr, ##42976
021f8     F2 12 02 FB | 	rdlong	arg01, objptr
021fc     53 00 00 FF 
02200     E0 E5 85 F1 | 	sub	objptr, ##42976
02204     34 01 00 FF 
02208     76 15 06 F6 | 	mov	arg02, ##@LR__4203
0220c     70 56 B1 FD | 	call	#__system___string_cmp
02210     00 FA 0D F2 | 	cmp	result1, #0 wz
02214     50 00 90 5D |  if_ne	jmp	#LR__0105
02218                 | LR__0104
02218     53 00 00 FF 
0221c     EC E5 05 F1 | 	add	objptr, ##42988
02220     F2 28 02 FB | 	rdlong	local06, objptr
02224     53 00 00 FF 
02228     EC E5 85 F1 | 	sub	objptr, ##42988
0222c     01 00 00 FF 
02230     04 28 0E F2 | 	cmp	local06, ##516 wz
02234     53 00 00 AF 
02238     F4 E5 05 A1 |  if_e	add	objptr, ##42996
0223c     F2 32 02 AB |  if_e	rdlong	local11, objptr
02240     53 00 00 AF 
02244     F4 E5 85 A1 |  if_e	sub	objptr, ##42996
02248     19 35 02 A6 |  if_e	mov	local12, local11
0224c     FE 35 0E A2 |  if_e	cmp	local12, #510 wz
02250     53 00 00 AF 
02254     EC E5 05 A1 |  if_e	add	objptr, ##42988
02258     01 00 80 AF 
0225c     F2 06 68 AC |  if_e	wrlong	##515, objptr
02260     53 00 00 AF 
02264     EC E5 85 A1 |  if_e	sub	objptr, ##42988
02268                 | LR__0105
02268                 | ' if (lparts(0).part$="mouse" orelse lparts(0).part$="cursor" orelse lparts(0).part$="click") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then 
02268     53 00 00 FF 
0226c     E0 E5 05 F1 | 	add	objptr, ##42976
02270     F2 12 02 FB | 	rdlong	arg01, objptr
02274     53 00 00 FF 
02278     E0 E5 85 F1 | 	sub	objptr, ##42976
0227c     34 01 00 FF 
02280     7B 31 06 F6 | 	mov	local10, ##@LR__4204
02284     18 15 02 F6 | 	mov	arg02, local10
02288     F4 55 B1 FD | 	call	#__system___string_cmp
0228c     00 FA 0D F2 | 	cmp	result1, #0 wz
02290     5C 00 90 AD |  if_e	jmp	#LR__0106
02294     53 00 00 FF 
02298     E0 E5 05 F1 | 	add	objptr, ##42976
0229c     F2 12 02 FB | 	rdlong	arg01, objptr
022a0     53 00 00 FF 
022a4     E0 E5 85 F1 | 	sub	objptr, ##42976
022a8     34 01 00 FF 
022ac     81 31 06 F6 | 	mov	local10, ##@LR__4205
022b0     18 15 02 F6 | 	mov	arg02, local10
022b4     C8 55 B1 FD | 	call	#__system___string_cmp
022b8     00 FA 0D F2 | 	cmp	result1, #0 wz
022bc     30 00 90 AD |  if_e	jmp	#LR__0106
022c0     53 00 00 FF 
022c4     E0 E5 05 F1 | 	add	objptr, ##42976
022c8     F2 12 02 FB | 	rdlong	arg01, objptr
022cc     53 00 00 FF 
022d0     E0 E5 85 F1 | 	sub	objptr, ##42976
022d4     34 01 00 FF 
022d8     88 2B 06 F6 | 	mov	local07, ##@LR__4206
022dc     15 29 02 F6 | 	mov	local06, local07
022e0     14 15 02 F6 | 	mov	arg02, local06
022e4     98 55 B1 FD | 	call	#__system___string_cmp
022e8     FD 30 0A F6 | 	mov	local10, result1 wz
022ec     E4 00 90 5D |  if_ne	jmp	#LR__0109
022f0                 | LR__0106
022f0     53 00 00 FF 
022f4     EC E5 05 F1 | 	add	objptr, ##42988
022f8     F2 2A 02 FB | 	rdlong	local07, objptr
022fc     53 00 00 FF 
02300     EC E5 85 F1 | 	sub	objptr, ##42988
02304     15 29 02 F6 | 	mov	local06, local07
02308     01 00 00 FF 
0230c     04 28 0E F2 | 	cmp	local06, ##516 wz
02310     53 00 00 AF 
02314     F4 E5 05 A1 |  if_e	add	objptr, ##42996
02318     F2 32 02 AB |  if_e	rdlong	local11, objptr
0231c     53 00 00 AF 
02320     F4 E5 85 A1 |  if_e	sub	objptr, ##42996
02324     19 35 02 A6 |  if_e	mov	local12, local11
02328     FE 35 0E A2 |  if_e	cmp	local12, #510 wz
0232c     A4 00 90 5D |  if_ne	jmp	#LR__0109
02330                 | '   if lparts(1).part$="on" then lparts(1).part$="1" :lparts(1).token=token_decimal
02330     53 00 00 FF 
02334     E8 E5 05 F1 | 	add	objptr, ##42984
02338     F2 12 02 FB | 	rdlong	arg01, objptr
0233c     53 00 00 FF 
02340     E8 E5 85 F1 | 	sub	objptr, ##42984
02344     34 01 00 FF 
02348     8E 15 06 F6 | 	mov	arg02, ##@LR__4207
0234c     30 55 B1 FD | 	call	#__system___string_cmp
02350     00 FA 0D F2 | 	cmp	result1, #0 wz
02354     28 00 90 5D |  if_ne	jmp	#LR__0107
02358     34 01 00 FF 
0235c     91 1F 06 F6 | 	mov	local01, ##@LR__4208
02360     53 00 00 FF 
02364     E8 E5 05 F1 | 	add	objptr, ##42984
02368     F2 1E 62 FC | 	wrlong	local01, objptr
0236c     04 E4 05 F1 | 	add	objptr, #4
02370     01 00 80 FF 
02374     F2 00 68 FC | 	wrlong	##512, objptr
02378     53 00 00 FF 
0237c     EC E5 85 F1 | 	sub	objptr, ##42988
02380                 | LR__0107
02380                 | '   if lparts(1).part$="off" then lparts(1).part$="0" :lparts(1).token=token_decimal
02380     53 00 00 FF 
02384     E8 E5 05 F1 | 	add	objptr, ##42984
02388     F2 12 02 FB | 	rdlong	arg01, objptr
0238c     53 00 00 FF 
02390     E8 E5 85 F1 | 	sub	objptr, ##42984
02394     34 01 00 FF 
02398     93 31 06 F6 | 	mov	local10, ##@LR__4209
0239c     18 15 02 F6 | 	mov	arg02, local10
023a0     DC 54 B1 FD | 	call	#__system___string_cmp
023a4     00 FA 0D F2 | 	cmp	result1, #0 wz
023a8     28 00 90 5D |  if_ne	jmp	#LR__0108
023ac     34 01 00 FF 
023b0     97 1F 06 F6 | 	mov	local01, ##@LR__4210
023b4     53 00 00 FF 
023b8     E8 E5 05 F1 | 	add	objptr, ##42984
023bc     F2 1E 62 FC | 	wrlong	local01, objptr
023c0     04 E4 05 F1 | 	add	objptr, #4
023c4     01 00 80 FF 
023c8     F2 00 68 FC | 	wrlong	##512, objptr
023cc     53 00 00 FF 
023d0     EC E5 85 F1 | 	sub	objptr, ##42988
023d4                 | LR__0108
023d4                 | LR__0109
023d4                 | ' 
023d4                 | ' '2b determine a type of the line
023d4                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
023d4     53 00 00 FF 
023d8     E0 E5 05 F1 | 	add	objptr, ##42976
023dc     F2 12 02 FB | 	rdlong	arg01, objptr
023e0     53 00 00 FF 
023e4     E0 E5 85 F1 | 	sub	objptr, ##42976
023e8     F4 18 B0 FD | 	call	#_isdec
023ec     00 FA 0D F2 | 	cmp	result1, #0 wz
023f0     20 00 90 AD |  if_e	jmp	#LR__0110
023f4     53 00 00 FF 
023f8     E0 E5 05 F1 | 	add	objptr, ##42976
023fc     F2 12 02 FB | 	rdlong	arg01, objptr
02400     53 00 00 FF 
02404     E0 E5 85 F1 | 	sub	objptr, ##42976
02408     00 14 06 F6 | 	mov	arg02, #0
0240c     D0 83 B1 FD | 	call	#__system____builtin_atoi
02410     FD 20 02 F6 | 	mov	local02, result1
02414                 | LR__0110
02414                 | ' 
02414                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02414     01 20 16 F2 | 	cmp	local02, #1 wc
02418     2C 00 90 CD |  if_b	jmp	#LR__0111
0241c     01 3C 0E F2 | 	cmp	local16, #1 wz
02420     55 00 00 AF 
02424     F8 E5 05 A1 |  if_e	add	objptr, ##44024
02428     F2 1E 02 AB |  if_e	rdlong	local01, objptr
0242c     55 00 00 AF 
02430     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
02434     03 1E 0E A2 |  if_e	cmp	local01, #3 wz
02438     0C 00 90 5D |  if_ne	jmp	#LR__0111
0243c     10 13 02 F6 | 	mov	arg01, local02
02440     C0 19 B0 FD | 	call	#_deleteline
02444     C8 04 90 FD | 	jmp	#LR__0127
02448                 | LR__0111
02448                 | ' 
02448                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02448     01 20 16 F2 | 	cmp	local02, #1 wc
0244c     E0 00 90 CD |  if_b	jmp	#LR__0114
02450     55 00 00 FF 
02454     F8 E5 05 F1 | 	add	objptr, ##44024
02458     F2 1E 0A FB | 	rdlong	local01, objptr wz
0245c     55 00 00 FF 
02460     F8 E5 85 F1 | 	sub	objptr, ##44024
02464     20 00 90 AD |  if_e	jmp	#LR__0112
02468     55 00 00 FF 
0246c     F8 E5 05 F1 | 	add	objptr, ##44024
02470     F2 28 02 FB | 	rdlong	local06, objptr
02474     55 00 00 FF 
02478     F8 E5 85 F1 | 	sub	objptr, ##44024
0247c     14 31 02 F6 | 	mov	local10, local06
02480     03 30 0E F2 | 	cmp	local10, #3 wz
02484     A8 00 90 5D |  if_ne	jmp	#LR__0114
02488                 | LR__0112
02488     53 00 00 FF 
0248c     F4 E5 05 F1 | 	add	objptr, ##42996
02490     F2 34 02 FB | 	rdlong	local12, objptr
02494     53 00 00 FF 
02498     F4 E5 85 F1 | 	sub	objptr, ##42996
0249c     1A 2B 02 F6 | 	mov	local07, local12
024a0     1B 2A 0E F2 | 	cmp	local07, #27 wz
024a4     88 00 90 AD |  if_e	jmp	#LR__0114
024a8     55 00 00 FF 
024ac     F8 E5 05 F1 | 	add	objptr, ##44024
024b0     F2 16 02 FB | 	rdlong	arg03, objptr
024b4     55 00 00 FF 
024b8     F8 E5 85 F1 | 	sub	objptr, ##44024
024bc     10 13 02 F6 | 	mov	arg01, local02
024c0     00 14 06 F6 | 	mov	arg02, #0
024c4     00 2C B0 FD | 	call	#_compile
024c8     FD 22 0A F6 | 	mov	local03, result1 wz
024cc                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
024cc                 | '   if err<>0 then printerror(err): goto 104
024cc     0C 00 90 AD |  if_e	jmp	#LR__0113
024d0     11 13 02 F6 | 	mov	arg01, local03
024d4     5C 1E B1 FD | 	call	#_printerror
024d8     34 04 90 FD | 	jmp	#LR__0127
024dc                 | LR__0113
024dc                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
024dc     7A 00 00 FF 
024e0     84 E4 05 F1 | 	add	objptr, ##62596
024e4     F2 12 02 FB | 	rdlong	arg01, objptr
024e8     7A 00 00 FF 
024ec     84 E4 85 F1 | 	sub	objptr, ##62596
024f0     34 01 00 FF 
024f4     99 15 06 F6 | 	mov	arg02, ##@LR__4211
024f8     84 53 B1 FD | 	call	#__system___string_cmp
024fc     00 FA 0D F2 | 	cmp	result1, #0 wz
02500     0C 04 90 AD |  if_e	jmp	#LR__0127
02504     7A 00 00 FF 
02508     84 E4 05 F1 | 	add	objptr, ##62596
0250c     F2 1E 02 FB | 	rdlong	local01, objptr
02510     24 00 00 FF 
02514     94 E4 85 F1 | 	sub	objptr, ##18580
02518     F2 1E 62 FC | 	wrlong	local01, objptr
0251c     08 E4 05 F1 | 	add	objptr, #8
02520     F2 08 68 FC | 	wrlong	#4, objptr
02524     55 00 00 FF 
02528     F8 E5 85 F1 | 	sub	objptr, ##44024
0252c     38 E5 9F FD | 	jmp	#LR__0020
02530                 | LR__0114
02530                 | '       							
02530                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02530     01 20 16 F2 | 	cmp	local02, #1 wc
02534     E4 00 90 CD |  if_b	jmp	#LR__0117
02538     55 00 00 FF 
0253c     F8 E5 05 F1 | 	add	objptr, ##44024
02540     F2 1E 02 FB | 	rdlong	local01, objptr
02544     55 00 00 FF 
02548     F8 E5 85 F1 | 	sub	objptr, ##44024
0254c     01 1E 0E F2 | 	cmp	local01, #1 wz
02550     20 00 90 AD |  if_e	jmp	#LR__0115
02554     55 00 00 FF 
02558     F8 E5 05 F1 | 	add	objptr, ##44024
0255c     F2 28 02 FB | 	rdlong	local06, objptr
02560     55 00 00 FF 
02564     F8 E5 85 F1 | 	sub	objptr, ##44024
02568     14 31 02 F6 | 	mov	local10, local06
0256c     02 30 0E F2 | 	cmp	local10, #2 wz
02570     A8 00 90 5D |  if_ne	jmp	#LR__0117
02574                 | LR__0115
02574     53 00 00 FF 
02578     EC E5 05 F1 | 	add	objptr, ##42988
0257c     F2 34 02 FB | 	rdlong	local12, objptr
02580     53 00 00 FF 
02584     EC E5 85 F1 | 	sub	objptr, ##42988
02588     1A 2B 02 F6 | 	mov	local07, local12
0258c     1B 2A 0E F2 | 	cmp	local07, #27 wz
02590     88 00 90 AD |  if_e	jmp	#LR__0117
02594     55 00 00 FF 
02598     F8 E5 05 F1 | 	add	objptr, ##44024
0259c     F2 16 02 FB | 	rdlong	arg03, objptr
025a0     55 00 00 FF 
025a4     F8 E5 85 F1 | 	sub	objptr, ##44024
025a8     10 13 02 F6 | 	mov	arg01, local02
025ac     00 14 06 F6 | 	mov	arg02, #0
025b0     14 2B B0 FD | 	call	#_compile
025b4     FD 22 0A F6 | 	mov	local03, result1 wz
025b8                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
025b8                 | '   if err<>0 then printerror(err): goto 104
025b8     0C 00 90 AD |  if_e	jmp	#LR__0116
025bc     11 13 02 F6 | 	mov	arg01, local03
025c0     70 1D B1 FD | 	call	#_printerror
025c4     48 03 90 FD | 	jmp	#LR__0127
025c8                 | LR__0116
025c8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
025c8     7A 00 00 FF 
025cc     84 E4 05 F1 | 	add	objptr, ##62596
025d0     F2 12 02 FB | 	rdlong	arg01, objptr
025d4     7A 00 00 FF 
025d8     84 E4 85 F1 | 	sub	objptr, ##62596
025dc     34 01 00 FF 
025e0     9A 15 06 F6 | 	mov	arg02, ##@LR__4212
025e4     98 52 B1 FD | 	call	#__system___string_cmp
025e8     00 FA 0D F2 | 	cmp	result1, #0 wz
025ec     20 03 90 AD |  if_e	jmp	#LR__0127
025f0     7A 00 00 FF 
025f4     84 E4 05 F1 | 	add	objptr, ##62596
025f8     F2 1E 02 FB | 	rdlong	local01, objptr
025fc     24 00 00 FF 
02600     94 E4 85 F1 | 	sub	objptr, ##18580
02604     F2 1E 62 FC | 	wrlong	local01, objptr
02608     08 E4 05 F1 | 	add	objptr, #8
0260c     F2 08 68 FC | 	wrlong	#4, objptr
02610     55 00 00 FF 
02614     F8 E5 85 F1 | 	sub	objptr, ##44024
02618     4C E4 9F FD | 	jmp	#LR__0020
0261c                 | LR__0117
0261c                 | ' 							 
0261c                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
0261c     01 20 16 F2 | 	cmp	local02, #1 wc
02620     C0 00 90 CD |  if_b	jmp	#LR__0118
02624     55 00 00 FF 
02628     F8 E5 05 F1 | 	add	objptr, ##44024
0262c     F2 1E 0A FB | 	rdlong	local01, objptr wz
02630     55 00 00 FF 
02634     F8 E5 85 F1 | 	sub	objptr, ##44024
02638     55 00 00 5F 
0263c     F8 E5 05 51 |  if_ne	add	objptr, ##44024
02640     F2 28 02 5B |  if_ne	rdlong	local06, objptr
02644     55 00 00 5F 
02648     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
0264c     03 28 0E 52 |  if_ne	cmp	local06, #3 wz
02650     53 00 00 AF 
02654     F4 E5 05 A1 |  if_e	add	objptr, ##42996
02658     F2 34 02 AB |  if_e	rdlong	local12, objptr
0265c     53 00 00 AF 
02660     F4 E5 85 A1 |  if_e	sub	objptr, ##42996
02664     1A 2B 02 A6 |  if_e	mov	local07, local12
02668     1B 2A 0E A2 |  if_e	cmp	local07, #27 wz
0266c     74 00 90 5D |  if_ne	jmp	#LR__0118
02670     55 00 00 FF 
02674     F8 E5 05 F1 | 	add	objptr, ##44024
02678     F2 16 02 FB | 	rdlong	arg03, objptr
0267c     55 00 00 FF 
02680     F8 E5 85 F1 | 	sub	objptr, ##44024
02684     10 13 02 F6 | 	mov	arg01, local02
02688     00 14 06 F6 | 	mov	arg02, #0
0268c     08 2B B0 FD | 	call	#_compile_assign
02690                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02690                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02690     7A 00 00 FF 
02694     84 E4 05 F1 | 	add	objptr, ##62596
02698     F2 12 02 FB | 	rdlong	arg01, objptr
0269c     7A 00 00 FF 
026a0     84 E4 85 F1 | 	sub	objptr, ##62596
026a4     34 01 00 FF 
026a8     9B 15 06 F6 | 	mov	arg02, ##@LR__4213
026ac     D0 51 B1 FD | 	call	#__system___string_cmp
026b0     00 FA 0D F2 | 	cmp	result1, #0 wz
026b4     58 02 90 AD |  if_e	jmp	#LR__0127
026b8     7A 00 00 FF 
026bc     84 E4 05 F1 | 	add	objptr, ##62596
026c0     F2 1E 02 FB | 	rdlong	local01, objptr
026c4     24 00 00 FF 
026c8     94 E4 85 F1 | 	sub	objptr, ##18580
026cc     F2 1E 62 FC | 	wrlong	local01, objptr
026d0     08 E4 05 F1 | 	add	objptr, #8
026d4     F2 08 68 FC | 	wrlong	#4, objptr
026d8     55 00 00 FF 
026dc     F8 E5 85 F1 | 	sub	objptr, ##44024
026e0     84 E3 9F FD | 	jmp	#LR__0020
026e4                 | LR__0118
026e4                 | '     							 
026e4                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
026e4     01 20 16 F2 | 	cmp	local02, #1 wc
026e8     C0 00 90 CD |  if_b	jmp	#LR__0119
026ec     55 00 00 FF 
026f0     F8 E5 05 F1 | 	add	objptr, ##44024
026f4     F2 1E 02 FB | 	rdlong	local01, objptr
026f8     55 00 00 FF 
026fc     F8 E5 85 F1 | 	sub	objptr, ##44024
02700     01 1E 0E F2 | 	cmp	local01, #1 wz
02704     55 00 00 5F 
02708     F8 E5 05 51 |  if_ne	add	objptr, ##44024
0270c     F2 30 02 5B |  if_ne	rdlong	local10, objptr
02710     55 00 00 5F 
02714     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
02718     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
0271c     53 00 00 AF 
02720     EC E5 05 A1 |  if_e	add	objptr, ##42988
02724     F2 34 02 AB |  if_e	rdlong	local12, objptr
02728     53 00 00 AF 
0272c     EC E5 85 A1 |  if_e	sub	objptr, ##42988
02730     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
02734     74 00 90 5D |  if_ne	jmp	#LR__0119
02738     55 00 00 FF 
0273c     F8 E5 05 F1 | 	add	objptr, ##44024
02740     F2 16 02 FB | 	rdlong	arg03, objptr
02744     55 00 00 FF 
02748     F8 E5 85 F1 | 	sub	objptr, ##44024
0274c     10 13 02 F6 | 	mov	arg01, local02
02750     00 14 06 F6 | 	mov	arg02, #0
02754     40 2A B0 FD | 	call	#_compile_assign
02758                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
02758                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
02758     7A 00 00 FF 
0275c     84 E4 05 F1 | 	add	objptr, ##62596
02760     F2 12 02 FB | 	rdlong	arg01, objptr
02764     7A 00 00 FF 
02768     84 E4 85 F1 | 	sub	objptr, ##62596
0276c     34 01 00 FF 
02770     9C 15 06 F6 | 	mov	arg02, ##@LR__4214
02774     08 51 B1 FD | 	call	#__system___string_cmp
02778     00 FA 0D F2 | 	cmp	result1, #0 wz
0277c     90 01 90 AD |  if_e	jmp	#LR__0127
02780     7A 00 00 FF 
02784     84 E4 05 F1 | 	add	objptr, ##62596
02788     F2 1E 02 FB | 	rdlong	local01, objptr
0278c     24 00 00 FF 
02790     94 E4 85 F1 | 	sub	objptr, ##18580
02794     F2 1E 62 FC | 	wrlong	local01, objptr
02798     08 E4 05 F1 | 	add	objptr, #8
0279c     F2 08 68 FC | 	wrlong	#4, objptr
027a0     55 00 00 FF 
027a4     F8 E5 85 F1 | 	sub	objptr, ##44024
027a8     BC E2 9F FD | 	jmp	#LR__0020
027ac                 | LR__0119
027ac                 | ' 
027ac                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
027ac     53 00 00 FF 
027b0     E4 E5 05 F1 | 	add	objptr, ##42980
027b4     F2 1E 02 FB | 	rdlong	local01, objptr
027b8     53 00 00 FF 
027bc     E4 E5 85 F1 | 	sub	objptr, ##42980
027c0     01 00 00 FF 
027c4     04 1E 0E F2 | 	cmp	local01, ##516 wz
027c8     53 00 00 AF 
027cc     EC E5 05 A1 |  if_e	add	objptr, ##42988
027d0     F2 30 02 AB |  if_e	rdlong	local10, objptr
027d4     53 00 00 AF 
027d8     EC E5 85 A1 |  if_e	sub	objptr, ##42988
027dc     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
027e0     14 00 90 5D |  if_ne	jmp	#LR__0120
027e4     00 12 06 F6 | 	mov	arg01, #0
027e8     00 14 06 F6 | 	mov	arg02, #0
027ec     00 16 06 F6 | 	mov	arg03, #0
027f0     A4 29 B0 FD | 	call	#_compile_assign
027f4     90 00 90 FD | 	jmp	#LR__0122
027f8                 | LR__0120
027f8                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
027f8     53 00 00 FF 
027fc     E4 E5 05 F1 | 	add	objptr, ##42980
02800     F2 1E 02 FB | 	rdlong	local01, objptr
02804     53 00 00 FF 
02808     E4 E5 85 F1 | 	sub	objptr, ##42980
0280c     01 00 00 FF 
02810     04 1E 0E F2 | 	cmp	local01, ##516 wz
02814     53 00 00 AF 
02818     EC E5 05 A1 |  if_e	add	objptr, ##42988
0281c     F2 30 02 AB |  if_e	rdlong	local10, objptr
02820     53 00 00 AF 
02824     EC E5 85 A1 |  if_e	sub	objptr, ##42988
02828     14 30 0E A2 |  if_e	cmp	local10, #20 wz
0282c     44 00 90 5D |  if_ne	jmp	#LR__0121
02830     00 12 06 F6 | 	mov	arg01, #0
02834     38 A5 B1 FD | 	call	#__system___getiolock_0383
02838     FD 12 02 F6 | 	mov	arg01, result1
0283c     18 50 B1 FD | 	call	#__system___lockmem
02840     34 01 00 FF 
02844     9D 15 06 F6 | 	mov	arg02, ##@LR__4215
02848     00 12 06 F6 | 	mov	arg01, #0
0284c     00 16 06 F6 | 	mov	arg03, #0
02850     F8 5C B1 FD | 	call	#__system___basic_print_string
02854     00 12 06 F6 | 	mov	arg01, #0
02858     0A 14 06 F6 | 	mov	arg02, #10
0285c     00 16 06 F6 | 	mov	arg03, #0
02860     90 5C B1 FD | 	call	#__system___basic_print_char
02864     00 12 06 F6 | 	mov	arg01, #0
02868     04 A5 B1 FD | 	call	#__system___getiolock_0383
0286c     FD 00 68 FC | 	wrlong	#0, result1
02870     7C 00 90 FD | 	jmp	#LR__0126
02874                 | LR__0121
02874     00 12 06 F6 | 	mov	arg01, #0
02878     00 14 06 F6 | 	mov	arg02, #0
0287c     00 16 06 F6 | 	mov	arg03, #0
02880     44 28 B0 FD | 	call	#_compile
02884     FD 22 02 F6 | 	mov	local03, result1
02888                 | LR__0122
02888                 | ' 
02888                 | ' ' if we are here, this is not a program line to add, so try to execute this
02888                 | ' 
02888                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
02888                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
02888                 | ' if err=0 then execute_line() else printerror(err)
02888     00 22 0E F2 | 	cmp	local03, #0 wz
0288c     0C 00 90 5D |  if_ne	jmp	#LR__0123
02890     00 12 06 F6 | 	mov	arg01, #0
02894     F0 61 B0 FD | 	call	#_execute_line
02898     08 00 90 FD | 	jmp	#LR__0124
0289c                 | LR__0123
0289c     11 13 02 F6 | 	mov	arg01, local03
028a0     90 1A B1 FD | 	call	#_printerror
028a4                 | LR__0124
028a4                 | ' if rest$<>"" then line$=rest$:  goto 108 
028a4     7A 00 00 FF 
028a8     84 E4 05 F1 | 	add	objptr, ##62596
028ac     F2 12 02 FB | 	rdlong	arg01, objptr
028b0     7A 00 00 FF 
028b4     84 E4 85 F1 | 	sub	objptr, ##62596
028b8     34 01 00 FF 
028bc     CC 15 06 F6 | 	mov	arg02, ##@LR__4216
028c0     BC 4F B1 FD | 	call	#__system___string_cmp
028c4     00 FA 0D F2 | 	cmp	result1, #0 wz
028c8     24 00 90 AD |  if_e	jmp	#LR__0125
028cc     7A 00 00 FF 
028d0     84 E4 05 F1 | 	add	objptr, ##62596
028d4     F2 1E 02 FB | 	rdlong	local01, objptr
028d8     24 00 00 FF 
028dc     94 E4 85 F1 | 	sub	objptr, ##18580
028e0     F2 1E 62 FC | 	wrlong	local01, objptr
028e4     55 00 00 FF 
028e8     F0 E5 85 F1 | 	sub	objptr, ##44016
028ec     78 E1 9F FD | 	jmp	#LR__0020
028f0                 | LR__0125
028f0                 | LR__0126
028f0     34 01 00 FF 
028f4     CD 13 06 F6 | 	mov	arg01, ##@LR__4217
028f8                 | ' 
028f8                 | ' write(text)
028f8     34 3F B1 FD | 	call	#_hg010b_spin2_write
028fc                 | ' crlf
028fc     90 40 B1 FD | 	call	#_hg010b_spin2_crlf
02900     34 01 00 FF 
02904     CE 13 06 F6 | 	mov	arg01, ##@LR__4218
02908                 | ' 
02908                 | ' write(text)
02908     24 3F B1 FD | 	call	#_hg010b_spin2_write
0290c                 | ' crlf
0290c     80 40 B1 FD | 	call	#_hg010b_spin2_crlf
02910                 | LR__0127
02910     A7 F0 03 F6 | 	mov	ptra, fp
02914     B2 00 A0 FD | 	call	#popregs_
02918                 | _interpret_ret
02918     2D 00 64 FD | 	ret
0291c                 | 
0291c                 | ' 
0291c                 | ' 
0291c                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
0291c                 | ' 
0291c                 | ' function isoperator(s as string) as ubyte
0291c                 | _isoperator
0291c     01 4A 05 F6 | 	mov	COUNT_, #1
02920     A8 00 A0 FD | 	call	#pushregs_
02924                 | ' 
02924                 | ' select case s
02924     09 1F 02 F6 | 	mov	local01, arg01
02928     34 01 00 FF 
0292c     D4 15 06 F6 | 	mov	arg02, ##@LR__4219
02930     0F 13 02 F6 | 	mov	arg01, local01
02934     48 4F B1 FD | 	call	#__system___string_cmp
02938     00 FA 0D F2 | 	cmp	result1, #0 wz
0293c     FC 01 90 AD |  if_e	jmp	#LR__0130
02940     34 01 00 FF 
02944     D6 15 06 F6 | 	mov	arg02, ##@LR__4220
02948     0F 13 02 F6 | 	mov	arg01, local01
0294c     30 4F B1 FD | 	call	#__system___string_cmp
02950     00 FA 0D F2 | 	cmp	result1, #0 wz
02954     EC 01 90 AD |  if_e	jmp	#LR__0131
02958     34 01 00 FF 
0295c     D8 15 06 F6 | 	mov	arg02, ##@LR__4221
02960     0F 13 02 F6 | 	mov	arg01, local01
02964     18 4F B1 FD | 	call	#__system___string_cmp
02968     00 FA 0D F2 | 	cmp	result1, #0 wz
0296c     DC 01 90 AD |  if_e	jmp	#LR__0132
02970     34 01 00 FF 
02974     DB 15 06 F6 | 	mov	arg02, ##@LR__4222
02978     0F 13 02 F6 | 	mov	arg01, local01
0297c     00 4F B1 FD | 	call	#__system___string_cmp
02980     00 FA 0D F2 | 	cmp	result1, #0 wz
02984     CC 01 90 AD |  if_e	jmp	#LR__0133
02988     34 01 00 FF 
0298c     DF 15 06 F6 | 	mov	arg02, ##@LR__4223
02990     0F 13 02 F6 | 	mov	arg01, local01
02994     E8 4E B1 FD | 	call	#__system___string_cmp
02998     00 FA 0D F2 | 	cmp	result1, #0 wz
0299c     BC 01 90 AD |  if_e	jmp	#LR__0134
029a0     34 01 00 FF 
029a4     E1 15 06 F6 | 	mov	arg02, ##@LR__4224
029a8     0F 13 02 F6 | 	mov	arg01, local01
029ac     D0 4E B1 FD | 	call	#__system___string_cmp
029b0     00 FA 0D F2 | 	cmp	result1, #0 wz
029b4     AC 01 90 AD |  if_e	jmp	#LR__0135
029b8     34 01 00 FF 
029bc     E3 15 06 F6 | 	mov	arg02, ##@LR__4225
029c0     0F 13 02 F6 | 	mov	arg01, local01
029c4     B8 4E B1 FD | 	call	#__system___string_cmp
029c8     00 FA 0D F2 | 	cmp	result1, #0 wz
029cc     9C 01 90 AD |  if_e	jmp	#LR__0136
029d0     34 01 00 FF 
029d4     E7 15 06 F6 | 	mov	arg02, ##@LR__4226
029d8     0F 13 02 F6 | 	mov	arg01, local01
029dc     A0 4E B1 FD | 	call	#__system___string_cmp
029e0     00 FA 0D F2 | 	cmp	result1, #0 wz
029e4     8C 01 90 AD |  if_e	jmp	#LR__0137
029e8     34 01 00 FF 
029ec     EB 15 06 F6 | 	mov	arg02, ##@LR__4227
029f0     0F 13 02 F6 | 	mov	arg01, local01
029f4     88 4E B1 FD | 	call	#__system___string_cmp
029f8     00 FA 0D F2 | 	cmp	result1, #0 wz
029fc     7C 01 90 AD |  if_e	jmp	#LR__0138
02a00     34 01 00 FF 
02a04     EF 15 06 F6 | 	mov	arg02, ##@LR__4228
02a08     0F 13 02 F6 | 	mov	arg01, local01
02a0c     70 4E B1 FD | 	call	#__system___string_cmp
02a10     00 FA 0D F2 | 	cmp	result1, #0 wz
02a14     6C 01 90 AD |  if_e	jmp	#LR__0139
02a18     34 01 00 FF 
02a1c     F3 15 06 F6 | 	mov	arg02, ##@LR__4229
02a20     0F 13 02 F6 | 	mov	arg01, local01
02a24     58 4E B1 FD | 	call	#__system___string_cmp
02a28     00 FA 0D F2 | 	cmp	result1, #0 wz
02a2c     5C 01 90 AD |  if_e	jmp	#LR__0140
02a30     34 01 00 FF 
02a34     F7 15 06 F6 | 	mov	arg02, ##@LR__4230
02a38     0F 13 02 F6 | 	mov	arg01, local01
02a3c     40 4E B1 FD | 	call	#__system___string_cmp
02a40     00 FA 0D F2 | 	cmp	result1, #0 wz
02a44     4C 01 90 AD |  if_e	jmp	#LR__0141
02a48     34 01 00 FF 
02a4c     F9 15 06 F6 | 	mov	arg02, ##@LR__4231
02a50     0F 13 02 F6 | 	mov	arg01, local01
02a54     28 4E B1 FD | 	call	#__system___string_cmp
02a58     00 FA 0D F2 | 	cmp	result1, #0 wz
02a5c     3C 01 90 AD |  if_e	jmp	#LR__0142
02a60     34 01 00 FF 
02a64     FD 15 06 F6 | 	mov	arg02, ##@LR__4232
02a68     0F 13 02 F6 | 	mov	arg01, local01
02a6c     10 4E B1 FD | 	call	#__system___string_cmp
02a70     00 FA 0D F2 | 	cmp	result1, #0 wz
02a74     2C 01 90 AD |  if_e	jmp	#LR__0143
02a78     34 01 00 FF 
02a7c     FF 15 06 F6 | 	mov	arg02, ##@LR__4233
02a80     0F 13 02 F6 | 	mov	arg01, local01
02a84     F8 4D B1 FD | 	call	#__system___string_cmp
02a88     00 FA 0D F2 | 	cmp	result1, #0 wz
02a8c     1C 01 90 AD |  if_e	jmp	#LR__0144
02a90     35 01 00 FF 
02a94     01 14 06 F6 | 	mov	arg02, ##@LR__4234
02a98     0F 13 02 F6 | 	mov	arg01, local01
02a9c     E0 4D B1 FD | 	call	#__system___string_cmp
02aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
02aa4     0C 01 90 AD |  if_e	jmp	#LR__0145
02aa8     35 01 00 FF 
02aac     04 14 06 F6 | 	mov	arg02, ##@LR__4235
02ab0     0F 13 02 F6 | 	mov	arg01, local01
02ab4     C8 4D B1 FD | 	call	#__system___string_cmp
02ab8     00 FA 0D F2 | 	cmp	result1, #0 wz
02abc     FC 00 90 AD |  if_e	jmp	#LR__0146
02ac0     35 01 00 FF 
02ac4     07 14 06 F6 | 	mov	arg02, ##@LR__4236
02ac8     0F 13 02 F6 | 	mov	arg01, local01
02acc     B0 4D B1 FD | 	call	#__system___string_cmp
02ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ad4     EC 00 90 AD |  if_e	jmp	#LR__0147
02ad8     35 01 00 FF 
02adc     09 14 06 F6 | 	mov	arg02, ##@LR__4237
02ae0     0F 13 02 F6 | 	mov	arg01, local01
02ae4     98 4D B1 FD | 	call	#__system___string_cmp
02ae8     00 FA 0D F2 | 	cmp	result1, #0 wz
02aec     DC 00 90 AD |  if_e	jmp	#LR__0148
02af0     35 01 00 FF 
02af4     0B 14 06 F6 | 	mov	arg02, ##@LR__4238
02af8     0F 13 02 F6 | 	mov	arg01, local01
02afc     80 4D B1 FD | 	call	#__system___string_cmp
02b00     00 FA 0D F2 | 	cmp	result1, #0 wz
02b04     CC 00 90 AD |  if_e	jmp	#LR__0149
02b08     35 01 00 FF 
02b0c     0E 14 06 F6 | 	mov	arg02, ##@LR__4239
02b10     0F 13 02 F6 | 	mov	arg01, local01
02b14     68 4D B1 FD | 	call	#__system___string_cmp
02b18     00 FA 0D F2 | 	cmp	result1, #0 wz
02b1c     BC 00 90 AD |  if_e	jmp	#LR__0150
02b20     35 01 00 FF 
02b24     11 14 06 F6 | 	mov	arg02, ##@LR__4240
02b28     0F 13 02 F6 | 	mov	arg01, local01
02b2c     50 4D B1 FD | 	call	#__system___string_cmp
02b30     00 FA 0D F2 | 	cmp	result1, #0 wz
02b34     AC 00 90 AD |  if_e	jmp	#LR__0151
02b38     B0 00 90 FD | 	jmp	#LR__0152
02b3c                 | LR__0130
02b3c     01 FA 05 F6 | 	mov	result1, #1
02b40     AC 00 90 FD | 	jmp	#LR__0153
02b44                 | LR__0131
02b44     02 FA 05 F6 | 	mov	result1, #2
02b48     A4 00 90 FD | 	jmp	#LR__0153
02b4c                 | LR__0132
02b4c     03 FA 05 F6 | 	mov	result1, #3
02b50     9C 00 90 FD | 	jmp	#LR__0153
02b54                 | LR__0133
02b54     04 FA 05 F6 | 	mov	result1, #4
02b58     94 00 90 FD | 	jmp	#LR__0153
02b5c                 | LR__0134
02b5c     05 FA 05 F6 | 	mov	result1, #5
02b60     8C 00 90 FD | 	jmp	#LR__0153
02b64                 | LR__0135
02b64     06 FA 05 F6 | 	mov	result1, #6
02b68     84 00 90 FD | 	jmp	#LR__0153
02b6c                 | LR__0136
02b6c     07 FA 05 F6 | 	mov	result1, #7
02b70     7C 00 90 FD | 	jmp	#LR__0153
02b74                 | LR__0137
02b74     08 FA 05 F6 | 	mov	result1, #8
02b78     74 00 90 FD | 	jmp	#LR__0153
02b7c                 | LR__0138
02b7c     09 FA 05 F6 | 	mov	result1, #9
02b80     6C 00 90 FD | 	jmp	#LR__0153
02b84                 | LR__0139
02b84     0A FA 05 F6 | 	mov	result1, #10
02b88     64 00 90 FD | 	jmp	#LR__0153
02b8c                 | LR__0140
02b8c     0B FA 05 F6 | 	mov	result1, #11
02b90     5C 00 90 FD | 	jmp	#LR__0153
02b94                 | LR__0141
02b94     0C FA 05 F6 | 	mov	result1, #12
02b98     54 00 90 FD | 	jmp	#LR__0153
02b9c                 | LR__0142
02b9c     0D FA 05 F6 | 	mov	result1, #13
02ba0     4C 00 90 FD | 	jmp	#LR__0153
02ba4                 | LR__0143
02ba4     0E FA 05 F6 | 	mov	result1, #14
02ba8     44 00 90 FD | 	jmp	#LR__0153
02bac                 | LR__0144
02bac     1B FA 05 F6 | 	mov	result1, #27
02bb0     3C 00 90 FD | 	jmp	#LR__0153
02bb4                 | LR__0145
02bb4     27 FA 05 F6 | 	mov	result1, #39
02bb8     34 00 90 FD | 	jmp	#LR__0153
02bbc                 | LR__0146
02bbc     26 FA 05 F6 | 	mov	result1, #38
02bc0     2C 00 90 FD | 	jmp	#LR__0153
02bc4                 | LR__0147
02bc4     10 FA 05 F6 | 	mov	result1, #16
02bc8     24 00 90 FD | 	jmp	#LR__0153
02bcc                 | LR__0148
02bcc     0F FA 05 F6 | 	mov	result1, #15
02bd0     1C 00 90 FD | 	jmp	#LR__0153
02bd4                 | LR__0149
02bd4     2A FA 05 F6 | 	mov	result1, #42
02bd8     14 00 90 FD | 	jmp	#LR__0153
02bdc                 | LR__0150
02bdc     28 FA 05 F6 | 	mov	result1, #40
02be0     0C 00 90 FD | 	jmp	#LR__0153
02be4                 | LR__0151
02be4     29 FA 05 F6 | 	mov	result1, #41
02be8     04 00 90 FD | 	jmp	#LR__0153
02bec                 | LR__0152
02bec     00 FA 05 F6 | 	mov	result1, #0
02bf0                 | LR__0153
02bf0     A7 F0 03 F6 | 	mov	ptra, fp
02bf4     B2 00 A0 FD | 	call	#popregs_
02bf8                 | _isoperator_ret
02bf8     2D 00 64 FD | 	ret
02bfc                 | 
02bfc                 | ' 
02bfc                 | ' function isseparator(s as string) as ubyte
02bfc                 | _isseparator
02bfc     01 4A 05 F6 | 	mov	COUNT_, #1
02c00     A8 00 A0 FD | 	call	#pushregs_
02c04                 | ' 
02c04                 | ' select case s
02c04     09 1F 02 F6 | 	mov	local01, arg01
02c08     35 01 00 FF 
02c0c     14 14 06 F6 | 	mov	arg02, ##@LR__4241
02c10     0F 13 02 F6 | 	mov	arg01, local01
02c14     68 4C B1 FD | 	call	#__system___string_cmp
02c18     00 FA 0D F2 | 	cmp	result1, #0 wz
02c1c     54 01 90 AD |  if_e	jmp	#LR__0160
02c20     35 01 00 FF 
02c24     16 14 06 F6 | 	mov	arg02, ##@LR__4242
02c28     0F 13 02 F6 | 	mov	arg01, local01
02c2c     50 4C B1 FD | 	call	#__system___string_cmp
02c30     00 FA 0D F2 | 	cmp	result1, #0 wz
02c34     44 01 90 AD |  if_e	jmp	#LR__0161
02c38     35 01 00 FF 
02c3c     18 14 06 F6 | 	mov	arg02, ##@LR__4243
02c40     0F 13 02 F6 | 	mov	arg01, local01
02c44     38 4C B1 FD | 	call	#__system___string_cmp
02c48     00 FA 0D F2 | 	cmp	result1, #0 wz
02c4c     34 01 90 AD |  if_e	jmp	#LR__0162
02c50     35 01 00 FF 
02c54     1A 14 06 F6 | 	mov	arg02, ##@LR__4244
02c58     0F 13 02 F6 | 	mov	arg01, local01
02c5c     20 4C B1 FD | 	call	#__system___string_cmp
02c60     00 FA 0D F2 | 	cmp	result1, #0 wz
02c64     24 01 90 AD |  if_e	jmp	#LR__0163
02c68     35 01 00 FF 
02c6c     1C 14 06 F6 | 	mov	arg02, ##@LR__4245
02c70     0F 13 02 F6 | 	mov	arg01, local01
02c74     08 4C B1 FD | 	call	#__system___string_cmp
02c78     00 FA 0D F2 | 	cmp	result1, #0 wz
02c7c     14 01 90 AD |  if_e	jmp	#LR__0164
02c80     35 01 00 FF 
02c84     1E 14 06 F6 | 	mov	arg02, ##@LR__4246
02c88     0F 13 02 F6 | 	mov	arg01, local01
02c8c     F0 4B B1 FD | 	call	#__system___string_cmp
02c90     00 FA 0D F2 | 	cmp	result1, #0 wz
02c94     04 01 90 AD |  if_e	jmp	#LR__0165
02c98     35 01 00 FF 
02c9c     20 14 06 F6 | 	mov	arg02, ##@LR__4247
02ca0     0F 13 02 F6 | 	mov	arg01, local01
02ca4     D8 4B B1 FD | 	call	#__system___string_cmp
02ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cac     F4 00 90 AD |  if_e	jmp	#LR__0166
02cb0     35 01 00 FF 
02cb4     22 14 06 F6 | 	mov	arg02, ##@LR__4248
02cb8     0F 13 02 F6 | 	mov	arg01, local01
02cbc     C0 4B B1 FD | 	call	#__system___string_cmp
02cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
02cc4     E4 00 90 AD |  if_e	jmp	#LR__0167
02cc8     35 01 00 FF 
02ccc     24 14 06 F6 | 	mov	arg02, ##@LR__4249
02cd0     0F 13 02 F6 | 	mov	arg01, local01
02cd4     A8 4B B1 FD | 	call	#__system___string_cmp
02cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cdc     D4 00 90 AD |  if_e	jmp	#LR__0168
02ce0     35 01 00 FF 
02ce4     26 14 06 F6 | 	mov	arg02, ##@LR__4250
02ce8     0F 13 02 F6 | 	mov	arg01, local01
02cec     90 4B B1 FD | 	call	#__system___string_cmp
02cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
02cf4     C4 00 90 AD |  if_e	jmp	#LR__0169
02cf8     35 01 00 FF 
02cfc     28 14 06 F6 | 	mov	arg02, ##@LR__4251
02d00     0F 13 02 F6 | 	mov	arg01, local01
02d04     78 4B B1 FD | 	call	#__system___string_cmp
02d08     00 FA 0D F2 | 	cmp	result1, #0 wz
02d0c     B4 00 90 AD |  if_e	jmp	#LR__0170
02d10     35 01 00 FF 
02d14     2A 14 06 F6 | 	mov	arg02, ##@LR__4252
02d18     0F 13 02 F6 | 	mov	arg01, local01
02d1c     60 4B B1 FD | 	call	#__system___string_cmp
02d20     00 FA 0D F2 | 	cmp	result1, #0 wz
02d24     A4 00 90 AD |  if_e	jmp	#LR__0171
02d28     35 01 00 FF 
02d2c     2C 14 06 F6 | 	mov	arg02, ##@LR__4253
02d30     0F 13 02 F6 | 	mov	arg01, local01
02d34     48 4B B1 FD | 	call	#__system___string_cmp
02d38     00 FA 0D F2 | 	cmp	result1, #0 wz
02d3c     94 00 90 AD |  if_e	jmp	#LR__0172
02d40     35 01 00 FF 
02d44     2E 14 06 F6 | 	mov	arg02, ##@LR__4254
02d48     0F 13 02 F6 | 	mov	arg01, local01
02d4c     30 4B B1 FD | 	call	#__system___string_cmp
02d50     00 FA 0D F2 | 	cmp	result1, #0 wz
02d54     84 00 90 AD |  if_e	jmp	#LR__0173
02d58     35 01 00 FF 
02d5c     30 14 06 F6 | 	mov	arg02, ##@LR__4255
02d60     0F 13 02 F6 | 	mov	arg01, local01
02d64     18 4B B1 FD | 	call	#__system___string_cmp
02d68     00 FA 0D F2 | 	cmp	result1, #0 wz
02d6c     74 00 90 AD |  if_e	jmp	#LR__0174
02d70     78 00 90 FD | 	jmp	#LR__0175
02d74                 | LR__0160
02d74     01 FA 05 F6 | 	mov	result1, #1
02d78     74 00 90 FD | 	jmp	#LR__0176
02d7c                 | LR__0161
02d7c     02 FA 05 F6 | 	mov	result1, #2
02d80     6C 00 90 FD | 	jmp	#LR__0176
02d84                 | LR__0162
02d84     1B FA 05 F6 | 	mov	result1, #27
02d88     64 00 90 FD | 	jmp	#LR__0176
02d8c                 | LR__0163
02d8c     11 FA 05 F6 | 	mov	result1, #17
02d90     5C 00 90 FD | 	jmp	#LR__0176
02d94                 | LR__0164
02d94     05 FA 05 F6 | 	mov	result1, #5
02d98     54 00 90 FD | 	jmp	#LR__0176
02d9c                 | LR__0165
02d9c     06 FA 05 F6 | 	mov	result1, #6
02da0     4C 00 90 FD | 	jmp	#LR__0176
02da4                 | LR__0166
02da4     12 FA 05 F6 | 	mov	result1, #18
02da8     44 00 90 FD | 	jmp	#LR__0176
02dac                 | LR__0167
02dac     13 FA 05 F6 | 	mov	result1, #19
02db0     3C 00 90 FD | 	jmp	#LR__0176
02db4                 | LR__0168
02db4     0C FA 05 F6 | 	mov	result1, #12
02db8     34 00 90 FD | 	jmp	#LR__0176
02dbc                 | LR__0169
02dbc     14 FA 05 F6 | 	mov	result1, #20
02dc0     2C 00 90 FD | 	jmp	#LR__0176
02dc4                 | LR__0170
02dc4     15 FA 05 F6 | 	mov	result1, #21
02dc8     24 00 90 FD | 	jmp	#LR__0176
02dcc                 | LR__0171
02dcc     16 FA 05 F6 | 	mov	result1, #22
02dd0     1C 00 90 FD | 	jmp	#LR__0176
02dd4                 | LR__0172
02dd4     FF FB 05 F6 | 	mov	result1, #511
02dd8     14 00 90 FD | 	jmp	#LR__0176
02ddc                 | LR__0173
02ddc     0F FA 05 F6 | 	mov	result1, #15
02de0     0C 00 90 FD | 	jmp	#LR__0176
02de4                 | LR__0174
02de4     10 FA 05 F6 | 	mov	result1, #16
02de8     04 00 90 FD | 	jmp	#LR__0176
02dec                 | LR__0175
02dec     00 FA 05 F6 | 	mov	result1, #0
02df0                 | LR__0176
02df0     A7 F0 03 F6 | 	mov	ptra, fp
02df4     B2 00 A0 FD | 	call	#popregs_
02df8                 | _isseparator_ret
02df8     2D 00 64 FD | 	ret
02dfc                 | 
02dfc                 | ' 
02dfc                 | ' 
02dfc                 | ' function iscommand(s as string) as ubyte
02dfc                 | _iscommand
02dfc     01 4A 05 F6 | 	mov	COUNT_, #1
02e00     A8 00 A0 FD | 	call	#pushregs_
02e04                 | ' 
02e04                 | ' select case s
02e04     09 1F 02 F6 | 	mov	local01, arg01
02e08     35 01 00 FF 
02e0c     34 14 06 F6 | 	mov	arg02, ##@LR__4257
02e10     0F 13 02 F6 | 	mov	arg01, local01
02e14     68 4A B1 FD | 	call	#__system___string_cmp
02e18     00 FA 0D F2 | 	cmp	result1, #0 wz
02e1c     B4 04 90 AD |  if_e	jmp	#LR__0180
02e20     35 01 00 FF 
02e24     38 14 06 F6 | 	mov	arg02, ##@LR__4258
02e28     0F 13 02 F6 | 	mov	arg01, local01
02e2c     50 4A B1 FD | 	call	#__system___string_cmp
02e30     00 FA 0D F2 | 	cmp	result1, #0 wz
02e34     A4 04 90 AD |  if_e	jmp	#LR__0181
02e38     35 01 00 FF 
02e3c     3C 14 06 F6 | 	mov	arg02, ##@LR__4259
02e40     0F 13 02 F6 | 	mov	arg01, local01
02e44     38 4A B1 FD | 	call	#__system___string_cmp
02e48     00 FA 0D F2 | 	cmp	result1, #0 wz
02e4c     94 04 90 AD |  if_e	jmp	#LR__0182
02e50     35 01 00 FF 
02e54     41 14 06 F6 | 	mov	arg02, ##@LR__4260
02e58     0F 13 02 F6 | 	mov	arg01, local01
02e5c     20 4A B1 FD | 	call	#__system___string_cmp
02e60     00 FA 0D F2 | 	cmp	result1, #0 wz
02e64     84 04 90 AD |  if_e	jmp	#LR__0183
02e68     35 01 00 FF 
02e6c     46 14 06 F6 | 	mov	arg02, ##@LR__4261
02e70     0F 13 02 F6 | 	mov	arg01, local01
02e74     08 4A B1 FD | 	call	#__system___string_cmp
02e78     00 FA 0D F2 | 	cmp	result1, #0 wz
02e7c     74 04 90 AD |  if_e	jmp	#LR__0184
02e80     35 01 00 FF 
02e84     4C 14 06 F6 | 	mov	arg02, ##@LR__4262
02e88     0F 13 02 F6 | 	mov	arg01, local01
02e8c     F0 49 B1 FD | 	call	#__system___string_cmp
02e90     00 FA 0D F2 | 	cmp	result1, #0 wz
02e94     64 04 90 AD |  if_e	jmp	#LR__0185
02e98     35 01 00 FF 
02e9c     53 14 06 F6 | 	mov	arg02, ##@LR__4263
02ea0     0F 13 02 F6 | 	mov	arg01, local01
02ea4     D8 49 B1 FD | 	call	#__system___string_cmp
02ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
02eac     54 04 90 AD |  if_e	jmp	#LR__0186
02eb0     35 01 00 FF 
02eb4     5B 14 06 F6 | 	mov	arg02, ##@LR__4264
02eb8     0F 13 02 F6 | 	mov	arg01, local01
02ebc     C0 49 B1 FD | 	call	#__system___string_cmp
02ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec4     44 04 90 AD |  if_e	jmp	#LR__0187
02ec8     35 01 00 FF 
02ecc     5F 14 06 F6 | 	mov	arg02, ##@LR__4265
02ed0     0F 13 02 F6 | 	mov	arg01, local01
02ed4     A8 49 B1 FD | 	call	#__system___string_cmp
02ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
02edc     34 04 90 AD |  if_e	jmp	#LR__0188
02ee0     35 01 00 FF 
02ee4     65 14 06 F6 | 	mov	arg02, ##@LR__4266
02ee8     0F 13 02 F6 | 	mov	arg01, local01
02eec     90 49 B1 FD | 	call	#__system___string_cmp
02ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef4     24 04 90 AD |  if_e	jmp	#LR__0189
02ef8     35 01 00 FF 
02efc     6B 14 06 F6 | 	mov	arg02, ##@LR__4267
02f00     0F 13 02 F6 | 	mov	arg01, local01
02f04     78 49 B1 FD | 	call	#__system___string_cmp
02f08     00 FA 0D F2 | 	cmp	result1, #0 wz
02f0c     14 04 90 AD |  if_e	jmp	#LR__0190
02f10     35 01 00 FF 
02f14     71 14 06 F6 | 	mov	arg02, ##@LR__4268
02f18     0F 13 02 F6 | 	mov	arg01, local01
02f1c     60 49 B1 FD | 	call	#__system___string_cmp
02f20     00 FA 0D F2 | 	cmp	result1, #0 wz
02f24     04 04 90 AD |  if_e	jmp	#LR__0191
02f28     35 01 00 FF 
02f2c     76 14 06 F6 | 	mov	arg02, ##@LR__4269
02f30     0F 13 02 F6 | 	mov	arg01, local01
02f34     48 49 B1 FD | 	call	#__system___string_cmp
02f38     00 FA 0D F2 | 	cmp	result1, #0 wz
02f3c     F4 03 90 AD |  if_e	jmp	#LR__0192
02f40     35 01 00 FF 
02f44     7A 14 06 F6 | 	mov	arg02, ##@LR__4270
02f48     0F 13 02 F6 | 	mov	arg01, local01
02f4c     30 49 B1 FD | 	call	#__system___string_cmp
02f50     00 FA 0D F2 | 	cmp	result1, #0 wz
02f54     E4 03 90 AD |  if_e	jmp	#LR__0193
02f58     35 01 00 FF 
02f5c     7F 14 06 F6 | 	mov	arg02, ##@LR__4271
02f60     0F 13 02 F6 | 	mov	arg01, local01
02f64     18 49 B1 FD | 	call	#__system___string_cmp
02f68     00 FA 0D F2 | 	cmp	result1, #0 wz
02f6c     D4 03 90 AD |  if_e	jmp	#LR__0194
02f70     35 01 00 FF 
02f74     85 14 06 F6 | 	mov	arg02, ##@LR__4272
02f78     0F 13 02 F6 | 	mov	arg01, local01
02f7c     00 49 B1 FD | 	call	#__system___string_cmp
02f80     00 FA 0D F2 | 	cmp	result1, #0 wz
02f84     C4 03 90 AD |  if_e	jmp	#LR__0195
02f88     35 01 00 FF 
02f8c     8A 14 06 F6 | 	mov	arg02, ##@LR__4273
02f90     0F 13 02 F6 | 	mov	arg01, local01
02f94     E8 48 B1 FD | 	call	#__system___string_cmp
02f98     00 FA 0D F2 | 	cmp	result1, #0 wz
02f9c     B4 03 90 AD |  if_e	jmp	#LR__0196
02fa0     35 01 00 FF 
02fa4     8F 14 06 F6 | 	mov	arg02, ##@LR__4274
02fa8     0F 13 02 F6 | 	mov	arg01, local01
02fac     D0 48 B1 FD | 	call	#__system___string_cmp
02fb0     00 FA 0D F2 | 	cmp	result1, #0 wz
02fb4     A4 03 90 AD |  if_e	jmp	#LR__0197
02fb8     35 01 00 FF 
02fbc     94 14 06 F6 | 	mov	arg02, ##@LR__4275
02fc0     0F 13 02 F6 | 	mov	arg01, local01
02fc4     B8 48 B1 FD | 	call	#__system___string_cmp
02fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
02fcc     94 03 90 AD |  if_e	jmp	#LR__0198
02fd0     35 01 00 FF 
02fd4     9D 14 06 F6 | 	mov	arg02, ##@LR__4276
02fd8     0F 13 02 F6 | 	mov	arg01, local01
02fdc     A0 48 B1 FD | 	call	#__system___string_cmp
02fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe4     84 03 90 AD |  if_e	jmp	#LR__0199
02fe8     35 01 00 FF 
02fec     A4 14 06 F6 | 	mov	arg02, ##@LR__4277
02ff0     0F 13 02 F6 | 	mov	arg01, local01
02ff4     88 48 B1 FD | 	call	#__system___string_cmp
02ff8     00 FA 0D F2 | 	cmp	result1, #0 wz
02ffc     74 03 90 AD |  if_e	jmp	#LR__0200
03000     35 01 00 FF 
03004     AC 14 06 F6 | 	mov	arg02, ##@LR__4278
03008     0F 13 02 F6 | 	mov	arg01, local01
0300c     70 48 B1 FD | 	call	#__system___string_cmp
03010     00 FA 0D F2 | 	cmp	result1, #0 wz
03014     64 03 90 AD |  if_e	jmp	#LR__0201
03018     35 01 00 FF 
0301c     AF 14 06 F6 | 	mov	arg02, ##@LR__4279
03020     0F 13 02 F6 | 	mov	arg01, local01
03024     58 48 B1 FD | 	call	#__system___string_cmp
03028     00 FA 0D F2 | 	cmp	result1, #0 wz
0302c     54 03 90 AD |  if_e	jmp	#LR__0202
03030     35 01 00 FF 
03034     B4 14 06 F6 | 	mov	arg02, ##@LR__4280
03038     0F 13 02 F6 | 	mov	arg01, local01
0303c     40 48 B1 FD | 	call	#__system___string_cmp
03040     00 FA 0D F2 | 	cmp	result1, #0 wz
03044     44 03 90 AD |  if_e	jmp	#LR__0203
03048     35 01 00 FF 
0304c     B9 14 06 F6 | 	mov	arg02, ##@LR__4281
03050     0F 13 02 F6 | 	mov	arg01, local01
03054     28 48 B1 FD | 	call	#__system___string_cmp
03058     00 FA 0D F2 | 	cmp	result1, #0 wz
0305c     34 03 90 AD |  if_e	jmp	#LR__0204
03060     35 01 00 FF 
03064     BE 14 06 F6 | 	mov	arg02, ##@LR__4282
03068     0F 13 02 F6 | 	mov	arg01, local01
0306c     10 48 B1 FD | 	call	#__system___string_cmp
03070     00 FA 0D F2 | 	cmp	result1, #0 wz
03074     24 03 90 AD |  if_e	jmp	#LR__0205
03078     35 01 00 FF 
0307c     C2 14 06 F6 | 	mov	arg02, ##@LR__4283
03080     0F 13 02 F6 | 	mov	arg01, local01
03084     F8 47 B1 FD | 	call	#__system___string_cmp
03088     00 FA 0D F2 | 	cmp	result1, #0 wz
0308c     14 03 90 AD |  if_e	jmp	#LR__0206
03090     35 01 00 FF 
03094     C6 14 06 F6 | 	mov	arg02, ##@LR__4284
03098     0F 13 02 F6 | 	mov	arg01, local01
0309c     E0 47 B1 FD | 	call	#__system___string_cmp
030a0     00 FA 0D F2 | 	cmp	result1, #0 wz
030a4     04 03 90 AD |  if_e	jmp	#LR__0207
030a8     35 01 00 FF 
030ac     CB 14 06 F6 | 	mov	arg02, ##@LR__4285
030b0     0F 13 02 F6 | 	mov	arg01, local01
030b4     C8 47 B1 FD | 	call	#__system___string_cmp
030b8     00 FA 0D F2 | 	cmp	result1, #0 wz
030bc     F4 02 90 AD |  if_e	jmp	#LR__0208
030c0     35 01 00 FF 
030c4     D1 14 06 F6 | 	mov	arg02, ##@LR__4286
030c8     0F 13 02 F6 | 	mov	arg01, local01
030cc     B0 47 B1 FD | 	call	#__system___string_cmp
030d0     00 FA 0D F2 | 	cmp	result1, #0 wz
030d4     E4 02 90 AD |  if_e	jmp	#LR__0209
030d8     35 01 00 FF 
030dc     D5 14 06 F6 | 	mov	arg02, ##@LR__4287
030e0     0F 13 02 F6 | 	mov	arg01, local01
030e4     98 47 B1 FD | 	call	#__system___string_cmp
030e8     00 FA 0D F2 | 	cmp	result1, #0 wz
030ec     D4 02 90 AD |  if_e	jmp	#LR__0210
030f0     35 01 00 FF 
030f4     DA 14 06 F6 | 	mov	arg02, ##@LR__4288
030f8     0F 13 02 F6 | 	mov	arg01, local01
030fc     80 47 B1 FD | 	call	#__system___string_cmp
03100     00 FA 0D F2 | 	cmp	result1, #0 wz
03104     C4 02 90 AD |  if_e	jmp	#LR__0211
03108     35 01 00 FF 
0310c     DF 14 06 F6 | 	mov	arg02, ##@LR__4289
03110     0F 13 02 F6 | 	mov	arg01, local01
03114     68 47 B1 FD | 	call	#__system___string_cmp
03118     00 FA 0D F2 | 	cmp	result1, #0 wz
0311c     B4 02 90 AD |  if_e	jmp	#LR__0212
03120     35 01 00 FF 
03124     E5 14 06 F6 | 	mov	arg02, ##@LR__4290
03128     0F 13 02 F6 | 	mov	arg01, local01
0312c     50 47 B1 FD | 	call	#__system___string_cmp
03130     00 FA 0D F2 | 	cmp	result1, #0 wz
03134     A4 02 90 AD |  if_e	jmp	#LR__0213
03138     35 01 00 FF 
0313c     EC 14 06 F6 | 	mov	arg02, ##@LR__4291
03140     0F 13 02 F6 | 	mov	arg01, local01
03144     38 47 B1 FD | 	call	#__system___string_cmp
03148     00 FA 0D F2 | 	cmp	result1, #0 wz
0314c     94 02 90 AD |  if_e	jmp	#LR__0214
03150     35 01 00 FF 
03154     F2 14 06 F6 | 	mov	arg02, ##@LR__4292
03158     0F 13 02 F6 | 	mov	arg01, local01
0315c     20 47 B1 FD | 	call	#__system___string_cmp
03160     00 FA 0D F2 | 	cmp	result1, #0 wz
03164     84 02 90 AD |  if_e	jmp	#LR__0215
03168     35 01 00 FF 
0316c     FC 14 06 F6 | 	mov	arg02, ##@LR__4293
03170     0F 13 02 F6 | 	mov	arg01, local01
03174     08 47 B1 FD | 	call	#__system___string_cmp
03178     00 FA 0D F2 | 	cmp	result1, #0 wz
0317c     74 02 90 AD |  if_e	jmp	#LR__0216
03180     35 01 00 FF 
03184     03 15 06 F6 | 	mov	arg02, ##@LR__4294
03188     0F 13 02 F6 | 	mov	arg01, local01
0318c     F0 46 B1 FD | 	call	#__system___string_cmp
03190     00 FA 0D F2 | 	cmp	result1, #0 wz
03194     64 02 90 AD |  if_e	jmp	#LR__0217
03198     35 01 00 FF 
0319c     0D 15 06 F6 | 	mov	arg02, ##@LR__4295
031a0     0F 13 02 F6 | 	mov	arg01, local01
031a4     D8 46 B1 FD | 	call	#__system___string_cmp
031a8     00 FA 0D F2 | 	cmp	result1, #0 wz
031ac     54 02 90 AD |  if_e	jmp	#LR__0218
031b0     35 01 00 FF 
031b4     12 15 06 F6 | 	mov	arg02, ##@LR__4296
031b8     0F 13 02 F6 | 	mov	arg01, local01
031bc     C0 46 B1 FD | 	call	#__system___string_cmp
031c0     00 FA 0D F2 | 	cmp	result1, #0 wz
031c4     44 02 90 AD |  if_e	jmp	#LR__0219
031c8     35 01 00 FF 
031cc     16 15 06 F6 | 	mov	arg02, ##@LR__4297
031d0     0F 13 02 F6 | 	mov	arg01, local01
031d4     A8 46 B1 FD | 	call	#__system___string_cmp
031d8     00 FA 0D F2 | 	cmp	result1, #0 wz
031dc     34 02 90 AD |  if_e	jmp	#LR__0220
031e0     35 01 00 FF 
031e4     1D 15 06 F6 | 	mov	arg02, ##@LR__4298
031e8     0F 13 02 F6 | 	mov	arg01, local01
031ec     90 46 B1 FD | 	call	#__system___string_cmp
031f0     00 FA 0D F2 | 	cmp	result1, #0 wz
031f4     24 02 90 AD |  if_e	jmp	#LR__0221
031f8     35 01 00 FF 
031fc     24 15 06 F6 | 	mov	arg02, ##@LR__4299
03200     0F 13 02 F6 | 	mov	arg01, local01
03204     78 46 B1 FD | 	call	#__system___string_cmp
03208     00 FA 0D F2 | 	cmp	result1, #0 wz
0320c     14 02 90 AD |  if_e	jmp	#LR__0222
03210     35 01 00 FF 
03214     29 15 06 F6 | 	mov	arg02, ##@LR__4300
03218     0F 13 02 F6 | 	mov	arg01, local01
0321c     60 46 B1 FD | 	call	#__system___string_cmp
03220     00 FA 0D F2 | 	cmp	result1, #0 wz
03224     04 02 90 AD |  if_e	jmp	#LR__0223
03228     35 01 00 FF 
0322c     2F 15 06 F6 | 	mov	arg02, ##@LR__4301
03230     0F 13 02 F6 | 	mov	arg01, local01
03234     48 46 B1 FD | 	call	#__system___string_cmp
03238     00 FA 0D F2 | 	cmp	result1, #0 wz
0323c     F4 01 90 AD |  if_e	jmp	#LR__0224
03240     35 01 00 FF 
03244     35 15 06 F6 | 	mov	arg02, ##@LR__4302
03248     0F 13 02 F6 | 	mov	arg01, local01
0324c     30 46 B1 FD | 	call	#__system___string_cmp
03250     00 FA 0D F2 | 	cmp	result1, #0 wz
03254     E4 01 90 AD |  if_e	jmp	#LR__0225
03258     35 01 00 FF 
0325c     3E 15 06 F6 | 	mov	arg02, ##@LR__4303
03260     0F 13 02 F6 | 	mov	arg01, local01
03264     18 46 B1 FD | 	call	#__system___string_cmp
03268     00 FA 0D F2 | 	cmp	result1, #0 wz
0326c     D4 01 90 AD |  if_e	jmp	#LR__0226
03270     35 01 00 FF 
03274     44 15 06 F6 | 	mov	arg02, ##@LR__4304
03278     0F 13 02 F6 | 	mov	arg01, local01
0327c     00 46 B1 FD | 	call	#__system___string_cmp
03280     00 FA 0D F2 | 	cmp	result1, #0 wz
03284     C4 01 90 AD |  if_e	jmp	#LR__0227
03288     35 01 00 FF 
0328c     4A 15 06 F6 | 	mov	arg02, ##@LR__4305
03290     0F 13 02 F6 | 	mov	arg01, local01
03294     E8 45 B1 FD | 	call	#__system___string_cmp
03298     00 FA 0D F2 | 	cmp	result1, #0 wz
0329c     B4 01 90 AD |  if_e	jmp	#LR__0228
032a0     35 01 00 FF 
032a4     53 15 06 F6 | 	mov	arg02, ##@LR__4306
032a8     0F 13 02 F6 | 	mov	arg01, local01
032ac     D0 45 B1 FD | 	call	#__system___string_cmp
032b0     00 FA 0D F2 | 	cmp	result1, #0 wz
032b4     A4 01 90 AD |  if_e	jmp	#LR__0229
032b8     35 01 00 FF 
032bc     5D 15 06 F6 | 	mov	arg02, ##@LR__4307
032c0     0F 13 02 F6 | 	mov	arg01, local01
032c4     B8 45 B1 FD | 	call	#__system___string_cmp
032c8     00 FA 0D F2 | 	cmp	result1, #0 wz
032cc     94 01 90 AD |  if_e	jmp	#LR__0230
032d0     98 01 90 FD | 	jmp	#LR__0231
032d4                 | LR__0180
032d4     40 FA 05 F6 | 	mov	result1, #64
032d8     94 01 90 FD | 	jmp	#LR__0232
032dc                 | LR__0181
032dc     41 FA 05 F6 | 	mov	result1, #65
032e0     8C 01 90 FD | 	jmp	#LR__0232
032e4                 | LR__0182
032e4     42 FA 05 F6 | 	mov	result1, #66
032e8     84 01 90 FD | 	jmp	#LR__0232
032ec                 | LR__0183
032ec     43 FA 05 F6 | 	mov	result1, #67
032f0     7C 01 90 FD | 	jmp	#LR__0232
032f4                 | LR__0184
032f4     44 FA 05 F6 | 	mov	result1, #68
032f8     74 01 90 FD | 	jmp	#LR__0232
032fc                 | LR__0185
032fc     45 FA 05 F6 | 	mov	result1, #69
03300     6C 01 90 FD | 	jmp	#LR__0232
03304                 | LR__0186
03304     46 FA 05 F6 | 	mov	result1, #70
03308     64 01 90 FD | 	jmp	#LR__0232
0330c                 | LR__0187
0330c     47 FA 05 F6 | 	mov	result1, #71
03310     5C 01 90 FD | 	jmp	#LR__0232
03314                 | LR__0188
03314     48 FA 05 F6 | 	mov	result1, #72
03318     54 01 90 FD | 	jmp	#LR__0232
0331c                 | LR__0189
0331c     49 FA 05 F6 | 	mov	result1, #73
03320     4C 01 90 FD | 	jmp	#LR__0232
03324                 | LR__0190
03324     44 FA 05 F6 | 	mov	result1, #68
03328     44 01 90 FD | 	jmp	#LR__0232
0332c                 | LR__0191
0332c     4C FA 05 F6 | 	mov	result1, #76
03330     3C 01 90 FD | 	jmp	#LR__0232
03334                 | LR__0192
03334     4D FA 05 F6 | 	mov	result1, #77
03338     34 01 90 FD | 	jmp	#LR__0232
0333c                 | LR__0193
0333c     4E FA 05 F6 | 	mov	result1, #78
03340     2C 01 90 FD | 	jmp	#LR__0232
03344                 | LR__0194
03344     50 FA 05 F6 | 	mov	result1, #80
03348     24 01 90 FD | 	jmp	#LR__0232
0334c                 | LR__0195
0334c     51 FA 05 F6 | 	mov	result1, #81
03350     1C 01 90 FD | 	jmp	#LR__0232
03354                 | LR__0196
03354     52 FA 05 F6 | 	mov	result1, #82
03358     14 01 90 FD | 	jmp	#LR__0232
0335c                 | LR__0197
0335c     59 FA 05 F6 | 	mov	result1, #89
03360     0C 01 90 FD | 	jmp	#LR__0232
03364                 | LR__0198
03364     55 FA 05 F6 | 	mov	result1, #85
03368     04 01 90 FD | 	jmp	#LR__0232
0336c                 | LR__0199
0336c     56 FA 05 F6 | 	mov	result1, #86
03370     FC 00 90 FD | 	jmp	#LR__0232
03374                 | LR__0200
03374     57 FA 05 F6 | 	mov	result1, #87
03378     F4 00 90 FD | 	jmp	#LR__0232
0337c                 | LR__0201
0337c     58 FA 05 F6 | 	mov	result1, #88
03380     EC 00 90 FD | 	jmp	#LR__0232
03384                 | LR__0202
03384     5A FA 05 F6 | 	mov	result1, #90
03388     E4 00 90 FD | 	jmp	#LR__0232
0338c                 | LR__0203
0338c     5B FA 05 F6 | 	mov	result1, #91
03390     DC 00 90 FD | 	jmp	#LR__0232
03394                 | LR__0204
03394     5C FA 05 F6 | 	mov	result1, #92
03398     D4 00 90 FD | 	jmp	#LR__0232
0339c                 | LR__0205
0339c     5D FA 05 F6 | 	mov	result1, #93
033a0     CC 00 90 FD | 	jmp	#LR__0232
033a4                 | LR__0206
033a4     4A FA 05 F6 | 	mov	result1, #74
033a8     C4 00 90 FD | 	jmp	#LR__0232
033ac                 | LR__0207
033ac     4B FA 05 F6 | 	mov	result1, #75
033b0     BC 00 90 FD | 	jmp	#LR__0232
033b4                 | LR__0208
033b4     5E FA 05 F6 | 	mov	result1, #94
033b8     B4 00 90 FD | 	jmp	#LR__0232
033bc                 | LR__0209
033bc     5F FA 05 F6 | 	mov	result1, #95
033c0     AC 00 90 FD | 	jmp	#LR__0232
033c4                 | LR__0210
033c4     60 FA 05 F6 | 	mov	result1, #96
033c8     A4 00 90 FD | 	jmp	#LR__0232
033cc                 | LR__0211
033cc     61 FA 05 F6 | 	mov	result1, #97
033d0     9C 00 90 FD | 	jmp	#LR__0232
033d4                 | LR__0212
033d4     63 FA 05 F6 | 	mov	result1, #99
033d8     94 00 90 FD | 	jmp	#LR__0232
033dc                 | LR__0213
033dc     68 FA 05 F6 | 	mov	result1, #104
033e0     8C 00 90 FD | 	jmp	#LR__0232
033e4                 | LR__0214
033e4     69 FA 05 F6 | 	mov	result1, #105
033e8     84 00 90 FD | 	jmp	#LR__0232
033ec                 | LR__0215
033ec     6C FA 05 F6 | 	mov	result1, #108
033f0     7C 00 90 FD | 	jmp	#LR__0232
033f4                 | LR__0216
033f4     6D FA 05 F6 | 	mov	result1, #109
033f8     74 00 90 FD | 	jmp	#LR__0232
033fc                 | LR__0217
033fc     70 FA 05 F6 | 	mov	result1, #112
03400     6C 00 90 FD | 	jmp	#LR__0232
03404                 | LR__0218
03404     71 FA 05 F6 | 	mov	result1, #113
03408     64 00 90 FD | 	jmp	#LR__0232
0340c                 | LR__0219
0340c     72 FA 05 F6 | 	mov	result1, #114
03410     5C 00 90 FD | 	jmp	#LR__0232
03414                 | LR__0220
03414     73 FA 05 F6 | 	mov	result1, #115
03418     54 00 90 FD | 	jmp	#LR__0232
0341c                 | LR__0221
0341c     74 FA 05 F6 | 	mov	result1, #116
03420     4C 00 90 FD | 	jmp	#LR__0232
03424                 | LR__0222
03424     75 FA 05 F6 | 	mov	result1, #117
03428     44 00 90 FD | 	jmp	#LR__0232
0342c                 | LR__0223
0342c     77 FA 05 F6 | 	mov	result1, #119
03430     3C 00 90 FD | 	jmp	#LR__0232
03434                 | LR__0224
03434     78 FA 05 F6 | 	mov	result1, #120
03438     34 00 90 FD | 	jmp	#LR__0232
0343c                 | LR__0225
0343c     7C FA 05 F6 | 	mov	result1, #124
03440     2C 00 90 FD | 	jmp	#LR__0232
03444                 | LR__0226
03444     7D FA 05 F6 | 	mov	result1, #125
03448     24 00 90 FD | 	jmp	#LR__0232
0344c                 | LR__0227
0344c     7E FA 05 F6 | 	mov	result1, #126
03450     1C 00 90 FD | 	jmp	#LR__0232
03454                 | LR__0228
03454     7F FA 05 F6 | 	mov	result1, #127
03458     14 00 90 FD | 	jmp	#LR__0232
0345c                 | LR__0229
0345c     80 FA 05 F6 | 	mov	result1, #128
03460     0C 00 90 FD | 	jmp	#LR__0232
03464                 | LR__0230
03464     81 FA 05 F6 | 	mov	result1, #129
03468     04 00 90 FD | 	jmp	#LR__0232
0346c                 | LR__0231
0346c     00 FA 05 F6 | 	mov	result1, #0
03470                 | LR__0232
03470     A7 F0 03 F6 | 	mov	ptra, fp
03474     B2 00 A0 FD | 	call	#popregs_
03478                 | _iscommand_ret
03478     2D 00 64 FD | 	ret
0347c                 | 
0347c                 | ' 
0347c                 | ' function isfunction(s as string) as ubyte
0347c                 | _isfunction
0347c     01 4A 05 F6 | 	mov	COUNT_, #1
03480     A8 00 A0 FD | 	call	#pushregs_
03484                 | ' 
03484                 | ' select case s
03484     09 1F 02 F6 | 	mov	local01, arg01
03488     35 01 00 FF 
0348c     66 15 06 F6 | 	mov	arg02, ##@LR__4308
03490     0F 13 02 F6 | 	mov	arg01, local01
03494     E8 43 B1 FD | 	call	#__system___string_cmp
03498     00 FA 0D F2 | 	cmp	result1, #0 wz
0349c     24 01 90 AD |  if_e	jmp	#LR__0240
034a0     35 01 00 FF 
034a4     6A 15 06 F6 | 	mov	arg02, ##@LR__4309
034a8     0F 13 02 F6 | 	mov	arg01, local01
034ac     D0 43 B1 FD | 	call	#__system___string_cmp
034b0     00 FA 0D F2 | 	cmp	result1, #0 wz
034b4     14 01 90 AD |  if_e	jmp	#LR__0241
034b8     35 01 00 FF 
034bc     71 15 06 F6 | 	mov	arg02, ##@LR__4310
034c0     0F 13 02 F6 | 	mov	arg01, local01
034c4     B8 43 B1 FD | 	call	#__system___string_cmp
034c8     00 FA 0D F2 | 	cmp	result1, #0 wz
034cc     04 01 90 AD |  if_e	jmp	#LR__0242
034d0     35 01 00 FF 
034d4     78 15 06 F6 | 	mov	arg02, ##@LR__4311
034d8     0F 13 02 F6 | 	mov	arg01, local01
034dc     A0 43 B1 FD | 	call	#__system___string_cmp
034e0     00 FA 0D F2 | 	cmp	result1, #0 wz
034e4     F4 00 90 AD |  if_e	jmp	#LR__0243
034e8     35 01 00 FF 
034ec     7F 15 06 F6 | 	mov	arg02, ##@LR__4312
034f0     0F 13 02 F6 | 	mov	arg01, local01
034f4     88 43 B1 FD | 	call	#__system___string_cmp
034f8     00 FA 0D F2 | 	cmp	result1, #0 wz
034fc     E4 00 90 AD |  if_e	jmp	#LR__0244
03500     35 01 00 FF 
03504     86 15 06 F6 | 	mov	arg02, ##@LR__4313
03508     0F 13 02 F6 | 	mov	arg01, local01
0350c     70 43 B1 FD | 	call	#__system___string_cmp
03510     00 FA 0D F2 | 	cmp	result1, #0 wz
03514     D4 00 90 AD |  if_e	jmp	#LR__0245
03518     35 01 00 FF 
0351c     8E 15 06 F6 | 	mov	arg02, ##@LR__4314
03520     0F 13 02 F6 | 	mov	arg01, local01
03524     58 43 B1 FD | 	call	#__system___string_cmp
03528     00 FA 0D F2 | 	cmp	result1, #0 wz
0352c     C4 00 90 AD |  if_e	jmp	#LR__0246
03530     35 01 00 FF 
03534     92 15 06 F6 | 	mov	arg02, ##@LR__4315
03538     0F 13 02 F6 | 	mov	arg01, local01
0353c     40 43 B1 FD | 	call	#__system___string_cmp
03540     00 FA 0D F2 | 	cmp	result1, #0 wz
03544     B4 00 90 AD |  if_e	jmp	#LR__0247
03548     35 01 00 FF 
0354c     98 15 06 F6 | 	mov	arg02, ##@LR__4316
03550     0F 13 02 F6 | 	mov	arg01, local01
03554     28 43 B1 FD | 	call	#__system___string_cmp
03558     00 FA 0D F2 | 	cmp	result1, #0 wz
0355c     A4 00 90 AD |  if_e	jmp	#LR__0248
03560     35 01 00 FF 
03564     9E 15 06 F6 | 	mov	arg02, ##@LR__4317
03568     0F 13 02 F6 | 	mov	arg01, local01
0356c     10 43 B1 FD | 	call	#__system___string_cmp
03570     00 FA 0D F2 | 	cmp	result1, #0 wz
03574     94 00 90 AD |  if_e	jmp	#LR__0249
03578     35 01 00 FF 
0357c     A7 15 06 F6 | 	mov	arg02, ##@LR__4318
03580     0F 13 02 F6 | 	mov	arg01, local01
03584     F8 42 B1 FD | 	call	#__system___string_cmp
03588     00 FA 0D F2 | 	cmp	result1, #0 wz
0358c     84 00 90 AD |  if_e	jmp	#LR__0250
03590     35 01 00 FF 
03594     AD 15 06 F6 | 	mov	arg02, ##@LR__4319
03598     0F 13 02 F6 | 	mov	arg01, local01
0359c     E0 42 B1 FD | 	call	#__system___string_cmp
035a0     00 FA 0D F2 | 	cmp	result1, #0 wz
035a4     74 00 90 AD |  if_e	jmp	#LR__0251
035a8     35 01 00 FF 
035ac     B5 15 06 F6 | 	mov	arg02, ##@LR__4320
035b0     0F 13 02 F6 | 	mov	arg01, local01
035b4     C8 42 B1 FD | 	call	#__system___string_cmp
035b8     00 FA 0D F2 | 	cmp	result1, #0 wz
035bc     64 00 90 AD |  if_e	jmp	#LR__0252
035c0     68 00 90 FD | 	jmp	#LR__0253
035c4                 | LR__0240
035c4     54 FA 05 F6 | 	mov	result1, #84
035c8     64 00 90 FD | 	jmp	#LR__0254
035cc                 | LR__0241
035cc     64 FA 05 F6 | 	mov	result1, #100
035d0     5C 00 90 FD | 	jmp	#LR__0254
035d4                 | LR__0242
035d4     65 FA 05 F6 | 	mov	result1, #101
035d8     54 00 90 FD | 	jmp	#LR__0254
035dc                 | LR__0243
035dc     66 FA 05 F6 | 	mov	result1, #102
035e0     4C 00 90 FD | 	jmp	#LR__0254
035e4                 | LR__0244
035e4     67 FA 05 F6 | 	mov	result1, #103
035e8     44 00 90 FD | 	jmp	#LR__0254
035ec                 | LR__0245
035ec     62 FA 05 F6 | 	mov	result1, #98
035f0     3C 00 90 FD | 	jmp	#LR__0254
035f4                 | LR__0246
035f4     6B FA 05 F6 | 	mov	result1, #107
035f8     34 00 90 FD | 	jmp	#LR__0254
035fc                 | LR__0247
035fc     6A FA 05 F6 | 	mov	result1, #106
03600     2C 00 90 FD | 	jmp	#LR__0254
03604                 | LR__0248
03604     6E FA 05 F6 | 	mov	result1, #110
03608     24 00 90 FD | 	jmp	#LR__0254
0360c                 | LR__0249
0360c     6F FA 05 F6 | 	mov	result1, #111
03610     1C 00 90 FD | 	jmp	#LR__0254
03614                 | LR__0250
03614     76 FA 05 F6 | 	mov	result1, #118
03618     14 00 90 FD | 	jmp	#LR__0254
0361c                 | LR__0251
0361c     7B FA 05 F6 | 	mov	result1, #123
03620     0C 00 90 FD | 	jmp	#LR__0254
03624                 | LR__0252
03624     7A FA 05 F6 | 	mov	result1, #122
03628     04 00 90 FD | 	jmp	#LR__0254
0362c                 | LR__0253
0362c     00 FA 05 F6 | 	mov	result1, #0
03630                 | LR__0254
03630     A7 F0 03 F6 | 	mov	ptra, fp
03634     B2 00 A0 FD | 	call	#popregs_
03638                 | _isfunction_ret
03638     2D 00 64 FD | 	ret
0363c                 | 
0363c                 | ' 
0363c                 | ' function isname(s as string) as boolean
0363c                 | _isname
0363c     0D 4A 05 F6 | 	mov	COUNT_, #13
03640     A8 00 A0 FD | 	call	#pushregs_
03644     09 1F 02 F6 | 	mov	local01, arg01
03648     09 21 02 F6 | 	mov	local02, arg01
0364c     97 06 48 FB | 	callpa	#(@LR__0261-@LR__0260)>>2,fcache_load_ptr_
03650                 | LR__0260
03650     10 FB C9 FA | 	rdbyte	result1, local02 wz
03654     01 20 06 51 |  if_ne	add	local02, #1
03658     F4 FF 9F 5D |  if_ne	jmp	#LR__0260
0365c                 | LR__0261
0365c     09 21 82 F1 | 	sub	local02, arg01
03660     10 FB 01 F6 | 	mov	result1, local02
03664     FD 22 0A F6 | 	mov	local03, result1 wz
03668     00 FA 05 A6 |  if_e	mov	result1, #0
0366c     34 02 90 AD |  if_e	jmp	#LR__0273
03670     0F 13 02 F6 | 	mov	arg01, local01
03674     01 14 06 F6 | 	mov	arg02, #1
03678     01 16 06 F6 | 	mov	arg03, #1
0367c     00 63 B1 FD | 	call	#__system__Mid_S
03680     FD 24 02 F6 | 	mov	local04, result1
03684                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
03684     35 01 00 FF 
03688     BB 15 06 F6 | 	mov	arg02, ##@LR__4321
0368c     12 13 02 F6 | 	mov	arg01, local04
03690     EC 41 B1 FD | 	call	#__system___string_cmp
03694     00 FA 55 F2 | 	cmps	result1, #0 wc
03698     18 00 90 CD |  if_b	jmp	#LR__0262
0369c     35 01 00 FF 
036a0     BD 15 06 F6 | 	mov	arg02, ##@LR__4322
036a4     12 13 02 F6 | 	mov	arg01, local04
036a8     D4 41 B1 FD | 	call	#__system___string_cmp
036ac     01 FA 55 F2 | 	cmps	result1, #1 wc
036b0     1C 00 90 CD |  if_b	jmp	#LR__0263
036b4                 | LR__0262
036b4     35 01 00 FF 
036b8     BF 15 06 F6 | 	mov	arg02, ##@LR__4323
036bc     12 13 02 F6 | 	mov	arg01, local04
036c0     BC 41 B1 FD | 	call	#__system___string_cmp
036c4     00 FA 0D F2 | 	cmp	result1, #0 wz
036c8     00 FA 05 56 |  if_ne	mov	result1, #0
036cc     D4 01 90 5D |  if_ne	jmp	#LR__0273
036d0                 | LR__0263
036d0                 | ' if l>2 then 
036d0     03 22 56 F2 | 	cmps	local03, #3 wc
036d4     C8 01 90 CD |  if_b	jmp	#LR__0272
036d8                 | '   for i=2 to l
036d8     02 26 06 F6 | 	mov	local05, #2
036dc     11 29 02 F6 | 	mov	local06, local03
036e0     01 28 06 F1 | 	add	local06, #1
036e4                 | LR__0264
036e4     14 27 52 F2 | 	cmps	local05, local06 wc
036e8     B4 01 90 3D |  if_ae	jmp	#LR__0271
036ec     0F 13 02 F6 | 	mov	arg01, local01
036f0     13 15 02 F6 | 	mov	arg02, local05
036f4     01 16 06 F6 | 	mov	arg03, #1
036f8     84 62 B1 FD | 	call	#__system__Mid_S
036fc     FD 24 02 F6 | 	mov	local04, result1
03700                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
03700     11 27 52 F2 | 	cmps	local05, local03 wc
03704     9C 00 90 3D |  if_ae	jmp	#LR__0267
03708     35 01 00 FF 
0370c     C1 15 06 F6 | 	mov	arg02, ##@LR__4324
03710     12 13 02 F6 | 	mov	arg01, local04
03714     68 41 B1 FD | 	call	#__system___string_cmp
03718     00 FA 55 F2 | 	cmps	result1, #0 wc
0371c     18 00 90 CD |  if_b	jmp	#LR__0265
03720     35 01 00 FF 
03724     C3 15 06 F6 | 	mov	arg02, ##@LR__4325
03728     12 13 02 F6 | 	mov	arg01, local04
0372c     50 41 B1 FD | 	call	#__system___string_cmp
03730     01 FA 55 F2 | 	cmps	result1, #1 wc
03734     6C 00 90 CD |  if_b	jmp	#LR__0267
03738                 | LR__0265
03738     35 01 00 FF 
0373c     C5 15 06 F6 | 	mov	arg02, ##@LR__4326
03740     12 13 02 F6 | 	mov	arg01, local04
03744     38 41 B1 FD | 	call	#__system___string_cmp
03748     00 FA 55 F2 | 	cmps	result1, #0 wc
0374c     18 00 90 CD |  if_b	jmp	#LR__0266
03750     35 01 00 FF 
03754     C7 15 06 F6 | 	mov	arg02, ##@LR__4327
03758     12 13 02 F6 | 	mov	arg01, local04
0375c     20 41 B1 FD | 	call	#__system___string_cmp
03760     01 FA 55 F2 | 	cmps	result1, #1 wc
03764     3C 00 90 CD |  if_b	jmp	#LR__0267
03768                 | LR__0266
03768     35 01 00 FF 
0376c     C9 2B 06 F6 | 	mov	local07, ##@LR__4328
03770     12 13 02 F6 | 	mov	arg01, local04
03774     15 15 02 F6 | 	mov	arg02, local07
03778     04 41 B1 FD | 	call	#__system___string_cmp
0377c     00 FA 0D F2 | 	cmp	result1, #0 wz
03780     20 00 90 AD |  if_e	jmp	#LR__0267
03784     35 01 00 FF 
03788     CB 2D 06 F6 | 	mov	local08, ##@LR__4329
0378c     12 13 02 F6 | 	mov	arg01, local04
03790     16 15 02 F6 | 	mov	arg02, local08
03794     E8 40 B1 FD | 	call	#__system___string_cmp
03798     FD 2E 0A F6 | 	mov	local09, result1 wz
0379c     00 FA 05 56 |  if_ne	mov	result1, #0
037a0     00 01 90 5D |  if_ne	jmp	#LR__0273
037a4                 | LR__0267
037a4                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
037a4     11 27 0A F2 | 	cmp	local05, local03 wz
037a8     EC 00 90 5D |  if_ne	jmp	#LR__0270
037ac     35 01 00 FF 
037b0     CD 31 06 F6 | 	mov	local10, ##@LR__4330
037b4     12 13 02 F6 | 	mov	arg01, local04
037b8     18 15 02 F6 | 	mov	arg02, local10
037bc     C0 40 B1 FD | 	call	#__system___string_cmp
037c0     FD 32 02 F6 | 	mov	local11, result1
037c4     00 32 56 F2 | 	cmps	local11, #0 wc
037c8     1C 00 90 CD |  if_b	jmp	#LR__0268
037cc     35 01 00 FF 
037d0     CF 15 06 F6 | 	mov	arg02, ##@LR__4331
037d4     12 13 02 F6 | 	mov	arg01, local04
037d8     A4 40 B1 FD | 	call	#__system___string_cmp
037dc     FD 30 02 F6 | 	mov	local10, result1
037e0     01 30 56 F2 | 	cmps	local10, #1 wc
037e4     B0 00 90 CD |  if_b	jmp	#LR__0270
037e8                 | LR__0268
037e8     35 01 00 FF 
037ec     D1 15 06 F6 | 	mov	arg02, ##@LR__4332
037f0     12 13 02 F6 | 	mov	arg01, local04
037f4     88 40 B1 FD | 	call	#__system___string_cmp
037f8     00 FA 55 F2 | 	cmps	result1, #0 wc
037fc     1C 00 90 CD |  if_b	jmp	#LR__0269
03800     35 01 00 FF 
03804     D3 2F 06 F6 | 	mov	local09, ##@LR__4333
03808     12 13 02 F6 | 	mov	arg01, local04
0380c     17 15 02 F6 | 	mov	arg02, local09
03810     6C 40 B1 FD | 	call	#__system___string_cmp
03814     01 FA 55 F2 | 	cmps	result1, #1 wc
03818     7C 00 90 CD |  if_b	jmp	#LR__0270
0381c                 | LR__0269
0381c     35 01 00 FF 
03820     D5 2F 06 F6 | 	mov	local09, ##@LR__4334
03824     12 13 02 F6 | 	mov	arg01, local04
03828     17 15 02 F6 | 	mov	arg02, local09
0382c     50 40 B1 FD | 	call	#__system___string_cmp
03830     00 FA 4D F2 | 	cmps	result1, #0 wz
03834     60 00 90 AD |  if_e	jmp	#LR__0270
03838     35 01 00 FF 
0383c     D7 2D 06 F6 | 	mov	local08, ##@LR__4335
03840     12 13 02 F6 | 	mov	arg01, local04
03844     16 15 02 F6 | 	mov	arg02, local08
03848     34 40 B1 FD | 	call	#__system___string_cmp
0384c     FD 2E 0A F6 | 	mov	local09, result1 wz
03850     44 00 90 AD |  if_e	jmp	#LR__0270
03854     35 01 00 FF 
03858     D9 35 06 F6 | 	mov	local12, ##@LR__4336
0385c     1A 2D 02 F6 | 	mov	local08, local12
03860     12 13 02 F6 | 	mov	arg01, local04
03864     16 15 02 F6 | 	mov	arg02, local08
03868     14 40 B1 FD | 	call	#__system___string_cmp
0386c     FD 2A 0A F6 | 	mov	local07, result1 wz
03870     24 00 90 AD |  if_e	jmp	#LR__0270
03874     35 01 00 FF 
03878     DB 37 06 F6 | 	mov	local13, ##@LR__4337
0387c     1B 35 02 F6 | 	mov	local12, local13
03880     12 13 02 F6 | 	mov	arg01, local04
03884     1A 15 02 F6 | 	mov	arg02, local12
03888     F4 3F B1 FD | 	call	#__system___string_cmp
0388c     FD 2C 0A F6 | 	mov	local08, result1 wz
03890     00 FA 05 56 |  if_ne	mov	result1, #0
03894     0C 00 90 5D |  if_ne	jmp	#LR__0273
03898                 | LR__0270
03898     01 26 06 F1 | 	add	local05, #1
0389c     44 FE 9F FD | 	jmp	#LR__0264
038a0                 | LR__0271
038a0                 | LR__0272
038a0                 | ' return true
038a0     01 FA 65 F6 | 	neg	result1, #1
038a4                 | LR__0273
038a4     A7 F0 03 F6 | 	mov	ptra, fp
038a8     B2 00 A0 FD | 	call	#popregs_
038ac                 | _isname_ret
038ac     2D 00 64 FD | 	ret
038b0                 | 
038b0                 | ' 
038b0                 | ' function isnum(s as string) as boolean
038b0                 | _isnum
038b0     0D 4A 05 F6 | 	mov	COUNT_, #13
038b4     A8 00 A0 FD | 	call	#pushregs_
038b8     09 1F 02 F6 | 	mov	local01, arg01
038bc     00 20 06 F6 | 	mov	local02, #0
038c0     00 22 06 F6 | 	mov	local03, #0
038c4     0F 13 02 F6 | 	mov	arg01, local01
038c8     09 25 02 F6 | 	mov	local04, arg01
038cc     97 06 48 FB | 	callpa	#(@LR__0281-@LR__0280)>>2,fcache_load_ptr_
038d0                 | LR__0280
038d0     12 FB C9 FA | 	rdbyte	result1, local04 wz
038d4     01 24 06 51 |  if_ne	add	local04, #1
038d8     F4 FF 9F 5D |  if_ne	jmp	#LR__0280
038dc                 | LR__0281
038dc     09 25 82 F1 | 	sub	local04, arg01
038e0     12 FB 01 F6 | 	mov	result1, local04
038e4     FD 26 0A F6 | 	mov	local05, result1 wz
038e8     00 FA 05 A6 |  if_e	mov	result1, #0
038ec     8C 02 90 AD |  if_e	jmp	#LR__0292
038f0     0F 13 02 F6 | 	mov	arg01, local01
038f4     01 14 06 F6 | 	mov	arg02, #1
038f8     01 16 06 F6 | 	mov	arg03, #1
038fc     80 60 B1 FD | 	call	#__system__Mid_S
03900     FD 28 02 F6 | 	mov	local06, result1
03904                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
03904     35 01 00 FF 
03908     DD 15 06 F6 | 	mov	arg02, ##@LR__4338
0390c     14 13 02 F6 | 	mov	arg01, local06
03910     6C 3F B1 FD | 	call	#__system___string_cmp
03914     00 FA 55 F2 | 	cmps	result1, #0 wc
03918     18 00 90 CD |  if_b	jmp	#LR__0282
0391c     35 01 00 FF 
03920     DF 15 06 F6 | 	mov	arg02, ##@LR__4339
03924     14 13 02 F6 | 	mov	arg01, local06
03928     54 3F B1 FD | 	call	#__system___string_cmp
0392c     01 FA 55 F2 | 	cmps	result1, #1 wc
03930     78 00 90 CD |  if_b	jmp	#LR__0283
03934                 | LR__0282
03934     35 01 00 FF 
03938     E1 15 06 F6 | 	mov	arg02, ##@LR__4340
0393c     14 13 02 F6 | 	mov	arg01, local06
03940     3C 3F B1 FD | 	call	#__system___string_cmp
03944     00 FA 0D F2 | 	cmp	result1, #0 wz
03948     60 00 90 AD |  if_e	jmp	#LR__0283
0394c     35 01 00 FF 
03950     E3 2B 06 F6 | 	mov	local07, ##@LR__4341
03954     14 13 02 F6 | 	mov	arg01, local06
03958     15 15 02 F6 | 	mov	arg02, local07
0395c     20 3F B1 FD | 	call	#__system___string_cmp
03960     00 FA 0D F2 | 	cmp	result1, #0 wz
03964     44 00 90 AD |  if_e	jmp	#LR__0283
03968     35 01 00 FF 
0396c     E5 2D 06 F6 | 	mov	local08, ##@LR__4342
03970     16 2B 02 F6 | 	mov	local07, local08
03974     14 13 02 F6 | 	mov	arg01, local06
03978     15 15 02 F6 | 	mov	arg02, local07
0397c     00 3F B1 FD | 	call	#__system___string_cmp
03980     00 FA 4D F2 | 	cmps	result1, #0 wz
03984     24 00 90 AD |  if_e	jmp	#LR__0283
03988     35 01 00 FF 
0398c     E7 2F 06 F6 | 	mov	local09, ##@LR__4343
03990     17 2D 02 F6 | 	mov	local08, local09
03994     14 13 02 F6 | 	mov	arg01, local06
03998     16 15 02 F6 | 	mov	arg02, local08
0399c     E0 3E B1 FD | 	call	#__system___string_cmp
039a0     FD 2A 0A F6 | 	mov	local07, result1 wz
039a4     00 FA 05 56 |  if_ne	mov	result1, #0
039a8     D0 01 90 5D |  if_ne	jmp	#LR__0292
039ac                 | LR__0283
039ac                 | ' if m$="." then ds=1
039ac     35 01 00 FF 
039b0     E9 15 06 F6 | 	mov	arg02, ##@LR__4344
039b4     14 13 02 F6 | 	mov	arg01, local06
039b8     C4 3E B1 FD | 	call	#__system___string_cmp
039bc     00 FA 0D F2 | 	cmp	result1, #0 wz
039c0     01 20 06 A6 |  if_e	mov	local02, #1
039c4                 | ' if l>1 then 
039c4     02 26 56 F2 | 	cmps	local05, #2 wc
039c8     AC 01 90 CD |  if_b	jmp	#LR__0291
039cc                 | '   for i=2 to l
039cc     02 30 06 F6 | 	mov	local10, #2
039d0     13 33 02 F6 | 	mov	local11, local05
039d4     01 32 06 F1 | 	add	local11, #1
039d8                 | LR__0284
039d8     19 31 52 F2 | 	cmps	local10, local11 wc
039dc     98 01 90 3D |  if_ae	jmp	#LR__0290
039e0     0F 13 02 F6 | 	mov	arg01, local01
039e4     18 15 02 F6 | 	mov	arg02, local10
039e8     01 16 06 F6 | 	mov	arg03, #1
039ec     90 5F B1 FD | 	call	#__system__Mid_S
039f0     FD 28 02 F6 | 	mov	local06, result1
039f4                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
039f4     35 01 00 FF 
039f8     EB 15 06 F6 | 	mov	arg02, ##@LR__4345
039fc     14 13 02 F6 | 	mov	arg01, local06
03a00     7C 3E B1 FD | 	call	#__system___string_cmp
03a04     00 FA 55 F2 | 	cmps	result1, #0 wc
03a08     18 00 90 CD |  if_b	jmp	#LR__0285
03a0c     35 01 00 FF 
03a10     ED 15 06 F6 | 	mov	arg02, ##@LR__4346
03a14     14 13 02 F6 | 	mov	arg01, local06
03a18     64 3E B1 FD | 	call	#__system___string_cmp
03a1c     01 FA 55 F2 | 	cmps	result1, #1 wc
03a20     98 00 90 CD |  if_b	jmp	#LR__0286
03a24                 | LR__0285
03a24     35 01 00 FF 
03a28     EF 15 06 F6 | 	mov	arg02, ##@LR__4347
03a2c     14 13 02 F6 | 	mov	arg01, local06
03a30     4C 3E B1 FD | 	call	#__system___string_cmp
03a34     00 FA 0D F2 | 	cmp	result1, #0 wz
03a38     80 00 90 AD |  if_e	jmp	#LR__0286
03a3c     35 01 00 FF 
03a40     F1 2B 06 F6 | 	mov	local07, ##@LR__4348
03a44     14 13 02 F6 | 	mov	arg01, local06
03a48     15 15 02 F6 | 	mov	arg02, local07
03a4c     30 3E B1 FD | 	call	#__system___string_cmp
03a50     00 FA 4D F2 | 	cmps	result1, #0 wz
03a54     64 00 90 AD |  if_e	jmp	#LR__0286
03a58     35 01 00 FF 
03a5c     F3 2D 06 F6 | 	mov	local08, ##@LR__4349
03a60     16 2B 02 F6 | 	mov	local07, local08
03a64     14 13 02 F6 | 	mov	arg01, local06
03a68     15 15 02 F6 | 	mov	arg02, local07
03a6c     10 3E B1 FD | 	call	#__system___string_cmp
03a70     FD 34 0A F6 | 	mov	local12, result1 wz
03a74     44 00 90 AD |  if_e	jmp	#LR__0286
03a78     35 01 00 FF 
03a7c     F5 2F 06 F6 | 	mov	local09, ##@LR__4350
03a80     17 2D 02 F6 | 	mov	local08, local09
03a84     14 13 02 F6 | 	mov	arg01, local06
03a88     16 15 02 F6 | 	mov	arg02, local08
03a8c     F0 3D B1 FD | 	call	#__system___string_cmp
03a90     FD 2A 0A F6 | 	mov	local07, result1 wz
03a94     24 00 90 AD |  if_e	jmp	#LR__0286
03a98     35 01 00 FF 
03a9c     F7 37 06 F6 | 	mov	local13, ##@LR__4351
03aa0     1B 2F 02 F6 | 	mov	local09, local13
03aa4     14 13 02 F6 | 	mov	arg01, local06
03aa8     17 15 02 F6 | 	mov	arg02, local09
03aac     D0 3D B1 FD | 	call	#__system___string_cmp
03ab0     FD 2C 0A F6 | 	mov	local08, result1 wz
03ab4     00 FA 05 56 |  if_ne	mov	result1, #0
03ab8     C0 00 90 5D |  if_ne	jmp	#LR__0292
03abc                 | LR__0286
03abc                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
03abc     35 01 00 FF 
03ac0     F9 15 06 F6 | 	mov	arg02, ##@LR__4352
03ac4     14 13 02 F6 | 	mov	arg01, local06
03ac8     B4 3D B1 FD | 	call	#__system___string_cmp
03acc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad0     38 00 90 5D |  if_ne	jmp	#LR__0287
03ad4     18 15 02 F6 | 	mov	arg02, local10
03ad8     01 14 86 F1 | 	sub	arg02, #1
03adc     0F 13 02 F6 | 	mov	arg01, local01
03ae0     01 16 06 F6 | 	mov	arg03, #1
03ae4     98 5E B1 FD | 	call	#__system__Mid_S
03ae8     FD 12 02 F6 | 	mov	arg01, result1
03aec     2C 60 B1 FD | 	call	#__system__LCase_S
03af0     FD 12 02 F6 | 	mov	arg01, result1
03af4     35 01 00 FF 
03af8     FB 15 06 F6 | 	mov	arg02, ##@LR__4353
03afc     80 3D B1 FD | 	call	#__system___string_cmp
03b00     00 FA 0D F2 | 	cmp	result1, #0 wz
03b04     00 FA 05 56 |  if_ne	mov	result1, #0
03b08     70 00 90 5D |  if_ne	jmp	#LR__0292
03b0c                 | LR__0287
03b0c                 | '     if m$="." then ds+=1: if ds>1 then return false
03b0c     35 01 00 FF 
03b10     FD 15 06 F6 | 	mov	arg02, ##@LR__4354
03b14     14 13 02 F6 | 	mov	arg01, local06
03b18     64 3D B1 FD | 	call	#__system___string_cmp
03b1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b20     01 20 06 A1 |  if_e	add	local02, #1
03b24     02 20 56 A2 |  if_e	cmps	local02, #2 wc
03b28     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
03b2c     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0292
03b30                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
03b30     35 01 00 FF 
03b34     FF 15 06 F6 | 	mov	arg02, ##@LR__4355
03b38     14 13 02 F6 | 	mov	arg01, local06
03b3c     40 3D B1 FD | 	call	#__system___string_cmp
03b40     00 FA 4D F2 | 	cmps	result1, #0 wz
03b44     18 00 90 AD |  if_e	jmp	#LR__0288
03b48     36 01 00 FF 
03b4c     01 14 06 F6 | 	mov	arg02, ##@LR__4356
03b50     14 13 02 F6 | 	mov	arg01, local06
03b54     28 3D B1 FD | 	call	#__system___string_cmp
03b58     00 FA 4D F2 | 	cmps	result1, #0 wz
03b5c     10 00 90 5D |  if_ne	jmp	#LR__0289
03b60                 | LR__0288
03b60     01 22 06 F1 | 	add	local03, #1
03b64     02 22 56 F2 | 	cmps	local03, #2 wc
03b68     00 FA 05 36 |  if_ae	mov	result1, #0
03b6c     0C 00 90 3D |  if_ae	jmp	#LR__0292
03b70                 | LR__0289
03b70     01 30 06 F1 | 	add	local10, #1
03b74     60 FE 9F FD | 	jmp	#LR__0284
03b78                 | LR__0290
03b78                 | LR__0291
03b78                 | ' return true
03b78     01 FA 65 F6 | 	neg	result1, #1
03b7c                 | LR__0292
03b7c     A7 F0 03 F6 | 	mov	ptra, fp
03b80     B2 00 A0 FD | 	call	#popregs_
03b84                 | _isnum_ret
03b84     2D 00 64 FD | 	ret
03b88                 | 
03b88                 | '   
03b88                 | ' function isint(s as string) as boolean
03b88                 | _isint
03b88     05 4A 05 F6 | 	mov	COUNT_, #5
03b8c     A8 00 A0 FD | 	call	#pushregs_
03b90     09 1F 02 F6 | 	mov	local01, arg01
03b94     09 21 02 F6 | 	mov	local02, arg01
03b98     97 06 48 FB | 	callpa	#(@LR__0301-@LR__0300)>>2,fcache_load_ptr_
03b9c                 | LR__0300
03b9c     10 FB C9 FA | 	rdbyte	result1, local02 wz
03ba0     01 20 06 51 |  if_ne	add	local02, #1
03ba4     F4 FF 9F 5D |  if_ne	jmp	#LR__0300
03ba8                 | LR__0301
03ba8     09 21 82 F1 | 	sub	local02, arg01
03bac     10 FB 01 F6 | 	mov	result1, local02
03bb0     FD 20 0A F6 | 	mov	local02, result1 wz
03bb4     00 FA 05 A6 |  if_e	mov	result1, #0
03bb8     18 01 90 AD |  if_e	jmp	#LR__0309
03bbc     0F 13 02 F6 | 	mov	arg01, local01
03bc0     01 14 06 F6 | 	mov	arg02, #1
03bc4     01 16 06 F6 | 	mov	arg03, #1
03bc8     B4 5D B1 FD | 	call	#__system__Mid_S
03bcc     FD 22 02 F6 | 	mov	local03, result1
03bd0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
03bd0     36 01 00 FF 
03bd4     03 14 06 F6 | 	mov	arg02, ##@LR__4357
03bd8     11 13 02 F6 | 	mov	arg01, local03
03bdc     A0 3C B1 FD | 	call	#__system___string_cmp
03be0     00 FA 55 F2 | 	cmps	result1, #0 wc
03be4     18 00 90 CD |  if_b	jmp	#LR__0302
03be8     36 01 00 FF 
03bec     05 14 06 F6 | 	mov	arg02, ##@LR__4358
03bf0     11 13 02 F6 | 	mov	arg01, local03
03bf4     88 3C B1 FD | 	call	#__system___string_cmp
03bf8     01 FA 55 F2 | 	cmps	result1, #1 wc
03bfc     4C 00 90 CD |  if_b	jmp	#LR__0303
03c00                 | LR__0302
03c00     36 01 00 FF 
03c04     07 14 06 F6 | 	mov	arg02, ##@LR__4359
03c08     11 13 02 F6 | 	mov	arg01, local03
03c0c     70 3C B1 FD | 	call	#__system___string_cmp
03c10     00 FA 0D F2 | 	cmp	result1, #0 wz
03c14     34 00 90 AD |  if_e	jmp	#LR__0303
03c18     36 01 00 FF 
03c1c     09 14 06 F6 | 	mov	arg02, ##@LR__4360
03c20     11 13 02 F6 | 	mov	arg01, local03
03c24     58 3C B1 FD | 	call	#__system___string_cmp
03c28     00 FA 0D F2 | 	cmp	result1, #0 wz
03c2c     1C 00 90 AD |  if_e	jmp	#LR__0303
03c30     36 01 00 FF 
03c34     0B 14 06 F6 | 	mov	arg02, ##@LR__4361
03c38     11 13 02 F6 | 	mov	arg01, local03
03c3c     40 3C B1 FD | 	call	#__system___string_cmp
03c40     00 FA 0D F2 | 	cmp	result1, #0 wz
03c44     00 FA 05 56 |  if_ne	mov	result1, #0
03c48     88 00 90 5D |  if_ne	jmp	#LR__0309
03c4c                 | LR__0303
03c4c                 | ' 
03c4c                 | ' if l>1 then 
03c4c     02 20 56 F2 | 	cmps	local02, #2 wc
03c50     7C 00 90 CD |  if_b	jmp	#LR__0308
03c54                 | '   for i=2 to l
03c54     02 24 06 F6 | 	mov	local04, #2
03c58     10 27 02 F6 | 	mov	local05, local02
03c5c     01 26 06 F1 | 	add	local05, #1
03c60                 | LR__0304
03c60     13 25 52 F2 | 	cmps	local04, local05 wc
03c64     68 00 90 3D |  if_ae	jmp	#LR__0307
03c68     0F 13 02 F6 | 	mov	arg01, local01
03c6c     12 15 02 F6 | 	mov	arg02, local04
03c70     01 16 06 F6 | 	mov	arg03, #1
03c74     08 5D B1 FD | 	call	#__system__Mid_S
03c78     FD 22 02 F6 | 	mov	local03, result1
03c7c                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03c7c     36 01 00 FF 
03c80     0D 14 06 F6 | 	mov	arg02, ##@LR__4362
03c84     11 13 02 F6 | 	mov	arg01, local03
03c88     F4 3B B1 FD | 	call	#__system___string_cmp
03c8c     00 FA 55 F2 | 	cmps	result1, #0 wc
03c90     18 00 90 CD |  if_b	jmp	#LR__0305
03c94     36 01 00 FF 
03c98     0F 14 06 F6 | 	mov	arg02, ##@LR__4363
03c9c     11 13 02 F6 | 	mov	arg01, local03
03ca0     DC 3B B1 FD | 	call	#__system___string_cmp
03ca4     01 FA 55 F2 | 	cmps	result1, #1 wc
03ca8     1C 00 90 CD |  if_b	jmp	#LR__0306
03cac                 | LR__0305
03cac     36 01 00 FF 
03cb0     11 14 06 F6 | 	mov	arg02, ##@LR__4364
03cb4     11 13 02 F6 | 	mov	arg01, local03
03cb8     C4 3B B1 FD | 	call	#__system___string_cmp
03cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc0     00 FA 05 56 |  if_ne	mov	result1, #0
03cc4     0C 00 90 5D |  if_ne	jmp	#LR__0309
03cc8                 | LR__0306
03cc8     01 24 06 F1 | 	add	local04, #1
03ccc     90 FF 9F FD | 	jmp	#LR__0304
03cd0                 | LR__0307
03cd0                 | LR__0308
03cd0                 | ' return true
03cd0     01 FA 65 F6 | 	neg	result1, #1
03cd4                 | LR__0309
03cd4     A7 F0 03 F6 | 	mov	ptra, fp
03cd8     B2 00 A0 FD | 	call	#popregs_
03cdc                 | _isint_ret
03cdc     2D 00 64 FD | 	ret
03ce0                 | 
03ce0                 | ' 
03ce0                 | ' function isdec(s as string) as boolean
03ce0                 | _isdec
03ce0     05 4A 05 F6 | 	mov	COUNT_, #5
03ce4     A8 00 A0 FD | 	call	#pushregs_
03ce8     09 1F 02 F6 | 	mov	local01, arg01
03cec     09 21 02 F6 | 	mov	local02, arg01
03cf0     97 06 48 FB | 	callpa	#(@LR__0311-@LR__0310)>>2,fcache_load_ptr_
03cf4                 | LR__0310
03cf4     10 FB C9 FA | 	rdbyte	result1, local02 wz
03cf8     01 20 06 51 |  if_ne	add	local02, #1
03cfc     F4 FF 9F 5D |  if_ne	jmp	#LR__0310
03d00                 | LR__0311
03d00     09 21 82 F1 | 	sub	local02, arg01
03d04     10 FB 01 F6 | 	mov	result1, local02
03d08     FD 20 0A F6 | 	mov	local02, result1 wz
03d0c     00 FA 05 A6 |  if_e	mov	result1, #0
03d10     80 00 90 AD |  if_e	jmp	#LR__0316
03d14                 | ' for i=1 to l
03d14     01 22 06 F6 | 	mov	local03, #1
03d18     10 25 02 F6 | 	mov	local04, local02
03d1c     01 24 06 F1 | 	add	local04, #1
03d20                 | LR__0312
03d20     12 23 52 F2 | 	cmps	local03, local04 wc
03d24     68 00 90 3D |  if_ae	jmp	#LR__0315
03d28     0F 13 02 F6 | 	mov	arg01, local01
03d2c     11 15 02 F6 | 	mov	arg02, local03
03d30     01 16 06 F6 | 	mov	arg03, #1
03d34     48 5C B1 FD | 	call	#__system__Mid_S
03d38     FD 26 02 F6 | 	mov	local05, result1
03d3c                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03d3c     36 01 00 FF 
03d40     13 14 06 F6 | 	mov	arg02, ##@LR__4365
03d44     13 13 02 F6 | 	mov	arg01, local05
03d48     34 3B B1 FD | 	call	#__system___string_cmp
03d4c     00 FA 55 F2 | 	cmps	result1, #0 wc
03d50     18 00 90 CD |  if_b	jmp	#LR__0313
03d54     36 01 00 FF 
03d58     15 14 06 F6 | 	mov	arg02, ##@LR__4366
03d5c     13 13 02 F6 | 	mov	arg01, local05
03d60     1C 3B B1 FD | 	call	#__system___string_cmp
03d64     01 FA 55 F2 | 	cmps	result1, #1 wc
03d68     1C 00 90 CD |  if_b	jmp	#LR__0314
03d6c                 | LR__0313
03d6c     36 01 00 FF 
03d70     17 14 06 F6 | 	mov	arg02, ##@LR__4367
03d74     13 13 02 F6 | 	mov	arg01, local05
03d78     04 3B B1 FD | 	call	#__system___string_cmp
03d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d80     00 FA 05 56 |  if_ne	mov	result1, #0
03d84     0C 00 90 5D |  if_ne	jmp	#LR__0316
03d88                 | LR__0314
03d88     01 22 06 F1 | 	add	local03, #1
03d8c     90 FF 9F FD | 	jmp	#LR__0312
03d90                 | LR__0315
03d90                 | ' return true
03d90     01 FA 65 F6 | 	neg	result1, #1
03d94                 | LR__0316
03d94     A7 F0 03 F6 | 	mov	ptra, fp
03d98     B2 00 A0 FD | 	call	#popregs_
03d9c                 | _isdec_ret
03d9c     2D 00 64 FD | 	ret
03da0                 | 
03da0                 | ' 
03da0                 | ' function isstring(s as string) as boolean
03da0                 | _isstring
03da0     01 4A 05 F6 | 	mov	COUNT_, #1
03da4     A8 00 A0 FD | 	call	#pushregs_
03da8                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
03da8     09 1F 02 F6 | 	mov	local01, arg01
03dac     01 14 06 F6 | 	mov	arg02, #1
03db0     B4 5A B1 FD | 	call	#__system__Left_S
03db4     FD 12 02 F6 | 	mov	arg01, result1
03db8     36 01 00 FF 
03dbc     19 14 06 F6 | 	mov	arg02, ##@LR__4368
03dc0     BC 3A B1 FD | 	call	#__system___string_cmp
03dc4     00 FA 4D F2 | 	cmps	result1, #0 wz
03dc8     28 00 90 5D |  if_ne	jmp	#LR__0320
03dcc     0F 13 02 F6 | 	mov	arg01, local01
03dd0     01 14 06 F6 | 	mov	arg02, #1
03dd4     18 5B B1 FD | 	call	#__system__Right_S
03dd8     FD 12 02 F6 | 	mov	arg01, result1
03ddc     36 01 00 FF 
03de0     1B 14 06 F6 | 	mov	arg02, ##@LR__4369
03de4     98 3A B1 FD | 	call	#__system___string_cmp
03de8     00 FA 4D F2 | 	cmps	result1, #0 wz
03dec     01 FA 65 A6 |  if_e	neg	result1, #1
03df0     04 00 90 AD |  if_e	jmp	#LR__0321
03df4                 | LR__0320
03df4     00 FA 05 F6 | 	mov	result1, #0
03df8                 | LR__0321
03df8     A7 F0 03 F6 | 	mov	ptra, fp
03dfc     B2 00 A0 FD | 	call	#popregs_
03e00                 | _isstring_ret
03e00     2D 00 64 FD | 	ret
03e04                 | 
03e04                 | ' 
03e04                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
03e04                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03e04                 | ' 
03e04                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03e04                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
03e04                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03e04                 | ' 
03e04                 | ' '----- delete a line from a program
03e04                 | ' 
03e04                 | ' function deleteline(aline as ulong) as integer
03e04                 | _deleteline
03e04     03 4A 05 F6 | 	mov	COUNT_, #3
03e08     A8 00 A0 FD | 	call	#pushregs_
03e0c     2C F0 07 F1 | 	add	ptra, #44
03e10     04 4E 05 F1 | 	add	fp, #4
03e14     A7 12 62 FC | 	wrlong	arg01, fp
03e18     69 00 00 FF 
03e1c     58 E4 05 F1 | 	add	objptr, ##53848
03e20     F2 1E 02 FB | 	rdlong	local01, objptr
03e24     0C 4E 05 F1 | 	add	fp, #12
03e28     A7 1E 62 FC | 	wrlong	local01, fp
03e2c     10 4E 85 F1 | 	sub	fp, #16
03e30                 | ' 
03e30                 | ' 
03e30                 | ' searchptr=programstart
03e30                 | ' 
03e30                 | ' do
03e30     5D 00 00 FF 
03e34     98 E5 85 F1 | 	sub	objptr, ##48024
03e38                 | LR__0330
03e38     14 4E 05 F1 | 	add	fp, #20
03e3c     A7 12 02 F6 | 	mov	arg01, fp
03e40     04 4E 85 F1 | 	sub	fp, #4
03e44     A7 14 02 FB | 	rdlong	arg02, fp
03e48     10 4E 85 F1 | 	sub	fp, #16
03e4c     18 16 06 F6 | 	mov	arg03, #24
03e50     14 2F B1 FD | 	call	#_psram_spin2_read1
03e54     10 4E 05 F1 | 	add	fp, #16
03e58     A7 1E 02 FB | 	rdlong	local01, fp
03e5c     08 4E 85 F1 | 	sub	fp, #8
03e60     A7 1E 62 FC | 	wrlong	local01, fp
03e64     20 4E 05 F1 | 	add	fp, #32
03e68     A7 1E 02 FB | 	rdlong	local01, fp
03e6c     18 4E 85 F1 | 	sub	fp, #24
03e70     A7 1E 62 FC | 	wrlong	local01, fp
03e74     04 4E 05 F1 | 	add	fp, #4
03e78     A7 1E 02 FB | 	rdlong	local01, fp
03e7c     10 4E 85 F1 | 	sub	fp, #16
03e80     A7 16 02 FB | 	rdlong	arg03, fp
03e84     04 4E 85 F1 | 	sub	fp, #4
03e88     0B 1F 12 F2 | 	cmp	local01, arg03 wc
03e8c     28 4E 05 C1 |  if_b	add	fp, #40
03e90     A7 20 02 CB |  if_b	rdlong	local02, fp
03e94     28 4E 85 C1 |  if_b	sub	fp, #40
03e98     FF FF 3F CF 
03e9c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
03ea0     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0330
03ea4     0B 00 00 FF 
03ea8     C0 E4 85 F1 | 	sub	objptr, ##5824
03eac                 | ' 
03eac                 | ' 
03eac                 | ' if header(0)<>aline then return -1
03eac     14 4E 05 F1 | 	add	fp, #20
03eb0     A7 1E 02 FB | 	rdlong	local01, fp
03eb4     10 4E 85 F1 | 	sub	fp, #16
03eb8     A7 22 02 FB | 	rdlong	local03, fp
03ebc     04 4E 85 F1 | 	sub	fp, #4
03ec0     11 1F 0A F2 | 	cmp	local01, local03 wz
03ec4     01 FA 65 56 |  if_ne	neg	result1, #1
03ec8     4C 03 90 5D |  if_ne	jmp	#LR__0336
03ecc     08 4E 05 F1 | 	add	fp, #8
03ed0     A7 12 02 FB | 	rdlong	arg01, fp
03ed4     08 4E 85 F1 | 	sub	fp, #8
03ed8     01 14 66 F6 | 	neg	arg02, #1
03edc     01 16 06 F6 | 	mov	arg03, #1
03ee0     00 18 06 F6 | 	mov	arg04, #0
03ee4     0B 00 00 FF 
03ee8     C0 E4 05 F1 | 	add	objptr, ##5824
03eec                 | '     return fill(addr, pattern, count, listPtr, 4)
03eec     04 1A 06 F6 | 	mov	arg05, #4
03ef0     AC 2F B1 FD | 	call	#_psram_spin2_fill
03ef4     0B 00 00 FF 
03ef8     C0 E4 85 F1 | 	sub	objptr, ##5824
03efc                 | ' 
03efc                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
03efc                 | ' 
03efc                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is one and only line in the program
03efc     28 4E 05 F1 | 	add	fp, #40
03f00     A7 1E 02 FB | 	rdlong	local01, fp
03f04     28 4E 85 F1 | 	sub	fp, #40
03f08     FF FF 3F FF 
03f0c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03f10     24 4E 05 A1 |  if_e	add	fp, #36
03f14     A7 22 02 AB |  if_e	rdlong	local03, fp
03f18     24 4E 85 A1 |  if_e	sub	fp, #36
03f1c     FF FF 7F AF 
03f20     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
03f24     90 00 90 5D |  if_ne	jmp	#LR__0331
03f28     69 00 00 FF 
03f2c     58 E4 05 F1 | 	add	objptr, ##53848
03f30     F2 00 68 FC | 	wrlong	#0, objptr
03f34     07 00 00 FF 
03f38     28 E4 85 F1 | 	sub	objptr, ##3624
03f3c     F2 00 68 FC | 	wrlong	#0, objptr
03f40     07 00 00 FF 
03f44     2C E4 05 F1 | 	add	objptr, ##3628
03f48     F2 00 68 FC | 	wrlong	#0, objptr
03f4c     04 E4 05 F1 | 	add	objptr, #4
03f50     FF FF FF FF 
03f54     F2 FE 6B FC | 	wrlong	##-1, objptr
03f58     00 12 06 F6 | 	mov	arg01, #0
03f5c     10 E4 85 F1 | 	sub	objptr, #16
03f60     F2 00 68 FC | 	wrlong	#0, objptr
03f64     01 14 66 F6 | 	neg	arg02, #1
03f68     01 16 06 F6 | 	mov	arg03, #1
03f6c     00 18 06 F6 | 	mov	arg04, #0
03f70     5D 00 00 FF 
03f74     90 E5 85 F1 | 	sub	objptr, ##48016
03f78                 | '     return fill(addr, pattern, count, listPtr, 4)
03f78     04 1A 06 F6 | 	mov	arg05, #4
03f7c     20 2F B1 FD | 	call	#_psram_spin2_fill
03f80     10 12 06 F6 | 	mov	arg01, #16
03f84     01 14 66 F6 | 	neg	arg02, #1
03f88     01 16 06 F6 | 	mov	arg03, #1
03f8c     00 18 06 F6 | 	mov	arg04, #0
03f90                 | '     return fill(addr, pattern, count, listPtr, 4)
03f90     04 1A 06 F6 | 	mov	arg05, #4
03f94     08 2F B1 FD | 	call	#_psram_spin2_fill
03f98     14 12 06 F6 | 	mov	arg01, #20
03f9c     1E 14 CE F9 | 	bmask	arg02, #30
03fa0     01 16 06 F6 | 	mov	arg03, #1
03fa4     00 18 06 F6 | 	mov	arg04, #0
03fa8                 | '     return fill(addr, pattern, count, listPtr, 4)
03fa8     04 1A 06 F6 | 	mov	arg05, #4
03fac     F0 2E B1 FD | 	call	#_psram_spin2_fill
03fb0     0B 00 00 FF 
03fb4     C0 E4 85 F1 | 	sub	objptr, ##5824
03fb8                 | LR__0331
03fb8                 | ' 
03fb8                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
03fb8     28 4E 05 F1 | 	add	fp, #40
03fbc     A7 1E 02 FB | 	rdlong	local01, fp
03fc0     28 4E 85 F1 | 	sub	fp, #40
03fc4     FF FF 3F FF 
03fc8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03fcc     88 00 90 5D |  if_ne	jmp	#LR__0332
03fd0     24 4E 05 F1 | 	add	fp, #36
03fd4     A7 22 02 FB | 	rdlong	local03, fp
03fd8     24 4E 85 F1 | 	sub	fp, #36
03fdc     FF FF 7F FF 
03fe0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03fe4     70 00 90 AD |  if_e	jmp	#LR__0332
03fe8     24 4E 05 F1 | 	add	fp, #36
03fec     A7 12 02 FB | 	rdlong	arg01, fp
03ff0     24 4E 85 F1 | 	sub	fp, #36
03ff4     14 12 06 F1 | 	add	arg01, #20
03ff8     1E 14 CE F9 | 	bmask	arg02, #30
03ffc     01 16 06 F6 | 	mov	arg03, #1
04000     00 18 06 F6 | 	mov	arg04, #0
04004     0B 00 00 FF 
04008     C0 E4 05 F1 | 	add	objptr, ##5824
0400c                 | '     return fill(addr, pattern, count, listPtr, 4)
0400c     04 1A 06 F6 | 	mov	arg05, #4
04010     8C 2E B1 FD | 	call	#_psram_spin2_fill
04014     24 4E 05 F1 | 	add	fp, #36
04018     A7 1E 02 FB | 	rdlong	local01, fp
0401c     5D 00 00 FF 
04020     A0 E5 05 F1 | 	add	objptr, ##48032
04024     F2 1E 62 FC | 	wrlong	local01, objptr
04028     69 00 00 FF 
0402c     60 E4 85 F1 | 	sub	objptr, ##53856
04030     A7 12 02 FB | 	rdlong	arg01, fp
04034     24 4E 85 F1 | 	sub	fp, #36
04038     B4 04 B1 FD | 	call	#_pslpeek
0403c     69 00 00 FF 
04040     5C E4 05 F1 | 	add	objptr, ##53852
04044     F2 FA 61 FC | 	wrlong	result1, objptr
04048     69 00 00 FF 
0404c     5C E4 85 F1 | 	sub	objptr, ##53852
04050                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
04050                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
04050                 | '   lastline=pslpeek(header(4))
04050                 | '   return 0
04050     00 FA 05 F6 | 	mov	result1, #0
04054     C0 01 90 FD | 	jmp	#LR__0336
04058                 | LR__0332
04058                 | ' 
04058                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
04058     28 4E 05 F1 | 	add	fp, #40
0405c     A7 1E 02 FB | 	rdlong	local01, fp
04060     28 4E 85 F1 | 	sub	fp, #40
04064     FF FF 3F FF 
04068     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0406c     6C 00 90 AD |  if_e	jmp	#LR__0333
04070     24 4E 05 F1 | 	add	fp, #36
04074     A7 22 02 FB | 	rdlong	local03, fp
04078     24 4E 85 F1 | 	sub	fp, #36
0407c     FF FF 7F FF 
04080     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04084     54 00 90 5D |  if_ne	jmp	#LR__0333
04088     28 4E 05 F1 | 	add	fp, #40
0408c     A7 12 02 FB | 	rdlong	arg01, fp
04090     28 4E 85 F1 | 	sub	fp, #40
04094     10 12 06 F1 | 	add	arg01, #16
04098     01 14 66 F6 | 	neg	arg02, #1
0409c     01 16 06 F6 | 	mov	arg03, #1
040a0     00 18 06 F6 | 	mov	arg04, #0
040a4     0B 00 00 FF 
040a8     C0 E4 05 F1 | 	add	objptr, ##5824
040ac                 | '     return fill(addr, pattern, count, listPtr, 4)
040ac     04 1A 06 F6 | 	mov	arg05, #4
040b0     EC 2D B1 FD | 	call	#_psram_spin2_fill
040b4     28 4E 05 F1 | 	add	fp, #40
040b8     A7 1E 02 FB | 	rdlong	local01, fp
040bc     28 4E 85 F1 | 	sub	fp, #40
040c0     5D 00 00 FF 
040c4     98 E5 05 F1 | 	add	objptr, ##48024
040c8     F2 1E 62 FC | 	wrlong	local01, objptr
040cc     69 00 00 FF 
040d0     58 E4 85 F1 | 	sub	objptr, ##53848
040d4                 | ' '   print "deleted first line"
040d4                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
040d4                 | '   programstart=header(5) ' adjust the program start to point on the first new line
040d4                 | '   return 0
040d4     00 FA 05 F6 | 	mov	result1, #0
040d8     3C 01 90 FD | 	jmp	#LR__0336
040dc                 | LR__0333
040dc                 | ' 
040dc                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
040dc     28 4E 05 F1 | 	add	fp, #40
040e0     A7 1E 02 FB | 	rdlong	local01, fp
040e4     28 4E 85 F1 | 	sub	fp, #40
040e8     FF FF 3F FF 
040ec     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
040f0     24 4E 05 51 |  if_ne	add	fp, #36
040f4     A7 22 02 5B |  if_ne	rdlong	local03, fp
040f8     24 4E 85 51 |  if_ne	sub	fp, #36
040fc     FF FF 7F 5F 
04100     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
04104     68 00 90 AD |  if_e	jmp	#LR__0334
04108     28 4E 05 F1 | 	add	fp, #40
0410c     A7 12 02 FB | 	rdlong	arg01, fp
04110     10 12 06 F1 | 	add	arg01, #16
04114     04 4E 85 F1 | 	sub	fp, #4
04118     A7 14 02 FB | 	rdlong	arg02, fp
0411c     24 4E 85 F1 | 	sub	fp, #36
04120     01 16 06 F6 | 	mov	arg03, #1
04124     00 18 06 F6 | 	mov	arg04, #0
04128     0B 00 00 FF 
0412c     C0 E4 05 F1 | 	add	objptr, ##5824
04130                 | '     return fill(addr, pattern, count, listPtr, 4)
04130     04 1A 06 F6 | 	mov	arg05, #4
04134     68 2D B1 FD | 	call	#_psram_spin2_fill
04138     24 4E 05 F1 | 	add	fp, #36
0413c     A7 12 02 FB | 	rdlong	arg01, fp
04140     14 12 06 F1 | 	add	arg01, #20
04144     04 4E 05 F1 | 	add	fp, #4
04148     A7 14 02 FB | 	rdlong	arg02, fp
0414c     28 4E 85 F1 | 	sub	fp, #40
04150     01 16 06 F6 | 	mov	arg03, #1
04154     00 18 06 F6 | 	mov	arg04, #0
04158                 | '     return fill(addr, pattern, count, listPtr, 4)
04158     04 1A 06 F6 | 	mov	arg05, #4
0415c     40 2D B1 FD | 	call	#_psram_spin2_fill
04160     0B 00 00 FF 
04164     C0 E4 85 F1 | 	sub	objptr, ##5824
04168                 | '    pslpoke(header(5)+16,header(4))  
04168                 | '    pslpoke(header(4)+20, header(5))
04168                 | '    return 0
04168     00 FA 05 F6 | 	mov	result1, #0
0416c     A8 00 90 FD | 	jmp	#LR__0336
04170                 | LR__0334
04170     10 4E 05 F1 | 	add	fp, #16
04174     A7 1E 02 FB | 	rdlong	local01, fp
04178     08 4E 85 F1 | 	sub	fp, #8
0417c     A7 1E 62 FC | 	wrlong	local01, fp
04180     69 00 00 FF 
04184     58 E4 05 F1 | 	add	objptr, ##53848
04188     F2 1E 02 FB | 	rdlong	local01, objptr
0418c     08 4E 05 F1 | 	add	fp, #8
04190     A7 1E 62 FC | 	wrlong	local01, fp
04194     10 4E 85 F1 | 	sub	fp, #16
04198                 | ' 
04198                 | ' 
04198                 | ' 
04198                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
04198                 | ' 
04198                 | ' lineptr2=searchptr
04198                 | ' searchptr=programstart
04198                 | ' 
04198                 | ' do
04198     5D 00 00 FF 
0419c     98 E5 85 F1 | 	sub	objptr, ##48024
041a0                 | LR__0335
041a0     14 4E 05 F1 | 	add	fp, #20
041a4     A7 12 02 F6 | 	mov	arg01, fp
041a8     04 4E 85 F1 | 	sub	fp, #4
041ac     A7 14 02 FB | 	rdlong	arg02, fp
041b0     10 4E 85 F1 | 	sub	fp, #16
041b4     18 16 06 F6 | 	mov	arg03, #24
041b8     AC 2B B1 FD | 	call	#_psram_spin2_read1
041bc     10 4E 05 F1 | 	add	fp, #16
041c0     A7 1E 02 FB | 	rdlong	local01, fp
041c4     08 4E 85 F1 | 	sub	fp, #8
041c8     A7 1E 62 FC | 	wrlong	local01, fp
041cc     20 4E 05 F1 | 	add	fp, #32
041d0     A7 1E 02 FB | 	rdlong	local01, fp
041d4     18 4E 85 F1 | 	sub	fp, #24
041d8     A7 1E 62 FC | 	wrlong	local01, fp
041dc     04 4E 05 F1 | 	add	fp, #4
041e0     A7 1E 02 FB | 	rdlong	local01, fp
041e4     10 4E 85 F1 | 	sub	fp, #16
041e8     A7 22 02 FB | 	rdlong	local03, fp
041ec     04 4E 85 F1 | 	sub	fp, #4
041f0     11 1F 12 F2 | 	cmp	local01, local03 wc
041f4     28 4E 05 C1 |  if_b	add	fp, #40
041f8     A7 20 02 CB |  if_b	rdlong	local02, fp
041fc     28 4E 85 C1 |  if_b	sub	fp, #40
04200     FF FF 3F CF 
04204     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04208     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0335
0420c     0B 00 00 FF 
04210     C0 E4 85 F1 | 	sub	objptr, ##5824
04214     00 FA 05 F6 | 	mov	result1, #0
04218                 | LR__0336
04218     A7 F0 03 F6 | 	mov	ptra, fp
0421c     B2 00 A0 FD | 	call	#popregs_
04220                 | _deleteline_ret
04220     2D 00 64 FD | 	ret
04224                 | 
04224                 | ' 
04224                 | ' sub save_line
04224                 | _save_line
04224     03 4A 05 F6 | 	mov	COUNT_, #3
04228     A8 00 A0 FD | 	call	#pushregs_
0422c     69 00 00 FF 
04230     50 E4 05 F1 | 	add	objptr, ##53840
04234     F2 16 02 FB | 	rdlong	arg03, objptr
04238     01 16 06 F1 | 	add	arg03, #1
0423c     05 00 00 FF 
04240     18 E4 85 F1 | 	sub	objptr, ##2584
04244     F2 14 02 FB | 	rdlong	arg02, objptr
04248     0B 15 02 FD | 	qmul	arg02, arg03
0424c     0E 00 00 FF 
04250     44 E4 85 F1 | 	sub	objptr, ##7236
04254     F2 12 02 FB | 	rdlong	arg01, objptr
04258     55 00 00 FF 
0425c     F4 E5 85 F1 | 	sub	objptr, ##44020
04260     09 1F 02 F6 | 	mov	local01, arg01
04264     18 20 62 FD | 	getqx	local02
04268     97 06 48 FB | 	callpa	#(@LR__0341-@LR__0340)>>2,fcache_load_ptr_
0426c                 | LR__0340
0426c     0F FB C9 FA | 	rdbyte	result1, local01 wz
04270     01 1E 06 51 |  if_ne	add	local01, #1
04274     F4 FF 9F 5D |  if_ne	jmp	#LR__0340
04278                 | LR__0341
04278     09 1F 82 F1 | 	sub	local01, arg01
0427c     03 1E CE F7 | 	test	local01, #3 wz
04280     02 1E 46 50 |  if_ne	shr	local01, #2
04284     01 1E 06 51 |  if_ne	add	local01, #1
04288     02 1E 66 50 |  if_ne	shl	local01, #2
0428c     10 23 02 F6 | 	mov	local03, local02
04290     0F 23 02 F1 | 	add	local03, local01
04294     62 00 00 FF 
04298     30 E4 05 F1 | 	add	objptr, ##50224
0429c     F2 16 02 FB | 	rdlong	arg03, objptr
042a0     10 17 02 F1 | 	add	arg03, local02
042a4     04 00 00 FF 
042a8     28 E4 05 F1 | 	add	objptr, ##2088
042ac     F2 16 62 FC | 	wrlong	arg03, objptr
042b0     04 E4 05 F1 | 	add	objptr, #4
042b4     F2 1E 62 FC | 	wrlong	local01, objptr
042b8     0C E4 85 F1 | 	sub	objptr, #12
042bc     F2 12 02 F6 | 	mov	arg01, objptr
042c0     04 00 00 FF 
042c4     20 E4 85 F1 | 	sub	objptr, ##2080
042c8     F2 14 02 FB | 	rdlong	arg02, objptr
042cc     10 17 02 F6 | 	mov	arg03, local02
042d0     56 00 00 FF 
042d4     70 E5 85 F1 | 	sub	objptr, ##44400
042d8     28 2B B1 FD | 	call	#_psram_spin2_write
042dc     4A 00 00 FF 
042e0     34 E5 05 F1 | 	add	objptr, ##38196
042e4     F2 12 02 FB | 	rdlong	arg01, objptr
042e8     0C 00 00 FF 
042ec     3C E4 05 F1 | 	add	objptr, ##6204
042f0     F2 14 02 FB | 	rdlong	arg02, objptr
042f4     10 15 02 F1 | 	add	arg02, local02
042f8     0F 17 02 F6 | 	mov	arg03, local01
042fc     56 00 00 FF 
04300     70 E5 85 F1 | 	sub	objptr, ##44400
04304     FC 2A B1 FD | 	call	#_psram_spin2_write
04308     56 00 00 FF 
0430c     70 E5 05 F1 | 	add	objptr, ##44400
04310     F2 1E 02 FB | 	rdlong	local01, objptr
04314     11 1F 02 F1 | 	add	local01, local03
04318     F2 1E 62 FC | 	wrlong	local01, objptr
0431c     62 00 00 FF 
04320     30 E4 85 F1 | 	sub	objptr, ##50224
04324     A7 F0 03 F6 | 	mov	ptra, fp
04328     B2 00 A0 FD | 	call	#popregs_
0432c                 | _save_line_ret
0432c     2D 00 64 FD | 	ret
04330                 | 
04330                 | ' 
04330                 | ' 
04330                 | ' function insertline(aline as ulong) as integer
04330                 | _insertline
04330     02 4A 05 F6 | 	mov	COUNT_, #2
04334     A8 00 A0 FD | 	call	#pushregs_
04338     28 F0 07 F1 | 	add	ptra, #40
0433c     04 4E 05 F1 | 	add	fp, #4
04340     A7 12 62 FC | 	wrlong	arg01, fp
04344     69 00 00 FF 
04348     58 E4 05 F1 | 	add	objptr, ##53848
0434c     F2 1E 02 FB | 	rdlong	local01, objptr
04350     04 4E 05 F1 | 	add	fp, #4
04354     A7 1E 62 FC | 	wrlong	local01, fp
04358     08 4E 85 F1 | 	sub	fp, #8
0435c                 | ' 
0435c                 | ' do
0435c     5D 00 00 FF 
04360     98 E5 85 F1 | 	sub	objptr, ##48024
04364                 | LR__0350
04364     10 4E 05 F1 | 	add	fp, #16
04368     A7 12 02 F6 | 	mov	arg01, fp
0436c     08 4E 85 F1 | 	sub	fp, #8
04370     A7 14 02 FB | 	rdlong	arg02, fp
04374     08 4E 85 F1 | 	sub	fp, #8
04378     18 16 06 F6 | 	mov	arg03, #24
0437c     E8 29 B1 FD | 	call	#_psram_spin2_read1
04380     08 4E 05 F1 | 	add	fp, #8
04384     A7 1E 02 FB | 	rdlong	local01, fp
04388     04 4E 05 F1 | 	add	fp, #4
0438c     A7 1E 62 FC | 	wrlong	local01, fp
04390     18 4E 05 F1 | 	add	fp, #24
04394     A7 1E 02 FB | 	rdlong	local01, fp
04398     1C 4E 85 F1 | 	sub	fp, #28
0439c     A7 1E 62 FC | 	wrlong	local01, fp
043a0     08 4E 05 F1 | 	add	fp, #8
043a4     A7 1E 02 FB | 	rdlong	local01, fp
043a8     0C 4E 85 F1 | 	sub	fp, #12
043ac     A7 16 02 FB | 	rdlong	arg03, fp
043b0     04 4E 85 F1 | 	sub	fp, #4
043b4     0B 1F 12 F2 | 	cmp	local01, arg03 wc
043b8     24 4E 05 C1 |  if_b	add	fp, #36
043bc     A7 20 02 CB |  if_b	rdlong	local02, fp
043c0     24 4E 85 C1 |  if_b	sub	fp, #36
043c4     FF FF 3F CF 
043c8     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
043cc     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0350
043d0     0B 00 00 FF 
043d4     C0 E4 85 F1 | 	sub	objptr, ##5824
043d8                 | ' 
043d8                 | ' if header(0)=aline then return -1 ' delete it first
043d8     10 4E 05 F1 | 	add	fp, #16
043dc     A7 1E 02 FB | 	rdlong	local01, fp
043e0     0C 4E 85 F1 | 	sub	fp, #12
043e4     A7 20 02 FB | 	rdlong	local02, fp
043e8     04 4E 85 F1 | 	sub	fp, #4
043ec     10 1F 0A F2 | 	cmp	local01, local02 wz
043f0     01 FA 65 A6 |  if_e	neg	result1, #1
043f4     74 01 90 AD |  if_e	jmp	#LR__0353
043f8                 | ' if header(0)<aline then return -2 ' end of program reached
043f8     10 4E 05 F1 | 	add	fp, #16
043fc     A7 1E 02 FB | 	rdlong	local01, fp
04400     0C 4E 85 F1 | 	sub	fp, #12
04404     A7 16 02 FB | 	rdlong	arg03, fp
04408     04 4E 85 F1 | 	sub	fp, #4
0440c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
04410     02 FA 65 C6 |  if_b	neg	result1, #2
04414     54 01 90 CD |  if_b	jmp	#LR__0353
04418                 | ' 
04418                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
04418     20 4E 05 F1 | 	add	fp, #32
0441c     A7 1E 02 FB | 	rdlong	local01, fp
04420     20 4E 85 F1 | 	sub	fp, #32
04424     FF FF 7F FF 
04428     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0442c     84 00 90 5D |  if_ne	jmp	#LR__0351
04430     62 00 00 FF 
04434     30 E4 05 F1 | 	add	objptr, ##50224
04438     F2 1E 02 FB | 	rdlong	local01, objptr
0443c     07 00 00 FF 
04440     28 E4 05 F1 | 	add	objptr, ##3624
04444     F2 1E 62 FC | 	wrlong	local01, objptr
04448     0C 4E 05 F1 | 	add	fp, #12
0444c     A7 12 02 FB | 	rdlong	arg01, fp
04450     0C 4E 85 F1 | 	sub	fp, #12
04454     10 12 06 F1 | 	add	arg01, #16
04458     07 00 00 FF 
0445c     28 E4 85 F1 | 	sub	objptr, ##3624
04460     F2 14 02 FB | 	rdlong	arg02, objptr
04464     01 16 06 F6 | 	mov	arg03, #1
04468     00 18 06 F6 | 	mov	arg04, #0
0446c     56 00 00 FF 
04470     70 E5 85 F1 | 	sub	objptr, ##44400
04474                 | '     return fill(addr, pattern, count, listPtr, 4)
04474     04 1A 06 F6 | 	mov	arg05, #4
04478     24 2A B1 FD | 	call	#_psram_spin2_fill
0447c     5A 00 00 FF 
04480     A0 E5 05 F1 | 	add	objptr, ##46496
04484     FF FF FF FF 
04488     F2 FE 6B FC | 	wrlong	##-1, objptr
0448c     0C 4E 05 F1 | 	add	fp, #12
04490     A7 1E 02 FB | 	rdlong	local01, fp
04494     0C 4E 85 F1 | 	sub	fp, #12
04498     04 E4 05 F1 | 	add	objptr, #4
0449c     F2 1E 62 FC | 	wrlong	local01, objptr
044a0     66 00 00 FF 
044a4     64 E4 85 F1 | 	sub	objptr, ##52324
044a8     78 FD BF FD | 	call	#_save_line
044ac                 | '   programstart=programptr
044ac                 | '   pslpoke(lineptr2+16,programptr)
044ac                 | '   ucompiledline(4)=$FFFF_FFFF
044ac                 | '   ucompiledline(5)=lineptr2
044ac                 | '   save_line
044ac                 | '   return 0
044ac     00 FA 05 F6 | 	mov	result1, #0
044b0     B8 00 90 FD | 	jmp	#LR__0353
044b4                 | LR__0351
044b4                 | ' 
044b4                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
044b4     20 4E 05 F1 | 	add	fp, #32
044b8     A7 1E 02 FB | 	rdlong	local01, fp
044bc     20 4E 85 F1 | 	sub	fp, #32
044c0     FF FF 7F FF 
044c4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
044c8     9C 00 90 AD |  if_e	jmp	#LR__0352
044cc     20 4E 05 F1 | 	add	fp, #32
044d0     A7 1E 02 FB | 	rdlong	local01, fp
044d4     66 00 00 FF 
044d8     60 E4 05 F1 | 	add	objptr, ##52320
044dc     F2 1E 62 FC | 	wrlong	local01, objptr
044e0     14 4E 85 F1 | 	sub	fp, #20
044e4     A7 1E 02 FB | 	rdlong	local01, fp
044e8     04 E4 05 F1 | 	add	objptr, #4
044ec     F2 1E 62 FC | 	wrlong	local01, objptr
044f0     A7 12 02 FB | 	rdlong	arg01, fp
044f4     0C 4E 85 F1 | 	sub	fp, #12
044f8     10 12 06 F1 | 	add	arg01, #16
044fc     04 00 00 FF 
04500     34 E4 85 F1 | 	sub	objptr, ##2100
04504     F2 14 02 FB | 	rdlong	arg02, objptr
04508     01 16 06 F6 | 	mov	arg03, #1
0450c     00 18 06 F6 | 	mov	arg04, #0
04510     56 00 00 FF 
04514     70 E5 85 F1 | 	sub	objptr, ##44400
04518                 | '     return fill(addr, pattern, count, listPtr, 4)
04518     04 1A 06 F6 | 	mov	arg05, #4
0451c     80 29 B1 FD | 	call	#_psram_spin2_fill
04520     20 4E 05 F1 | 	add	fp, #32
04524     A7 12 02 FB | 	rdlong	arg01, fp
04528     20 4E 85 F1 | 	sub	fp, #32
0452c     14 12 06 F1 | 	add	arg01, #20
04530     56 00 00 FF 
04534     70 E5 05 F1 | 	add	objptr, ##44400
04538     F2 14 02 FB | 	rdlong	arg02, objptr
0453c     01 16 06 F6 | 	mov	arg03, #1
04540     00 18 06 F6 | 	mov	arg04, #0
04544     56 00 00 FF 
04548     70 E5 85 F1 | 	sub	objptr, ##44400
0454c                 | '     return fill(addr, pattern, count, listPtr, 4)
0454c     04 1A 06 F6 | 	mov	arg05, #4
04550     4C 29 B1 FD | 	call	#_psram_spin2_fill
04554     0B 00 00 FF 
04558     C0 E4 85 F1 | 	sub	objptr, ##5824
0455c     C4 FC BF FD | 	call	#_save_line
04560                 | '   ucompiledline(4)=header(4)
04560                 | '   ucompiledline(5)=lineptr2
04560                 | '   pslpoke(lineptr2+16,programptr)
04560                 | '   pslpoke(header(4)+20,programptr)
04560                 | '   save_line
04560                 | '   return 0
04560     00 FA 05 F6 | 	mov	result1, #0
04564     04 00 90 FD | 	jmp	#LR__0353
04568                 | LR__0352
04568     00 FA 05 F6 | 	mov	result1, #0
0456c                 | LR__0353
0456c     A7 F0 03 F6 | 	mov	ptra, fp
04570     B2 00 A0 FD | 	call	#popregs_
04574                 | _insertline_ret
04574     2D 00 64 FD | 	ret
04578                 | 
04578                 | ' 
04578                 | ' sub add_line_at_end(aline) 
04578                 | _add_line_at_end
04578     69 00 00 FF 
0457c     5C E4 05 F1 | 	add	objptr, ##53852
04580     F2 12 62 FC | 	wrlong	arg01, objptr
04584     04 E4 05 F1 | 	add	objptr, #4
04588     F2 14 02 FB | 	rdlong	arg02, objptr
0458c     03 00 00 FF 
04590     00 E4 85 F1 | 	sub	objptr, ##1536
04594     F2 14 62 FC | 	wrlong	arg02, objptr
04598     03 00 00 FF 
0459c     00 E4 05 F1 | 	add	objptr, ##1536
045a0     F2 12 02 FB | 	rdlong	arg01, objptr
045a4     14 12 06 F1 | 	add	arg01, #20
045a8     07 00 00 FF 
045ac     30 E4 85 F1 | 	sub	objptr, ##3632
045b0     F2 14 02 FB | 	rdlong	arg02, objptr
045b4     01 16 06 F6 | 	mov	arg03, #1
045b8     00 18 06 F6 | 	mov	arg04, #0
045bc     56 00 00 FF 
045c0     70 E5 85 F1 | 	sub	objptr, ##44400
045c4                 | '     return fill(addr, pattern, count, listPtr, 4)
045c4     04 1A 06 F6 | 	mov	arg05, #4
045c8     D4 28 B1 FD | 	call	#_psram_spin2_fill
045cc     56 00 00 FF 
045d0     70 E5 05 F1 | 	add	objptr, ##44400
045d4     F2 14 02 FB | 	rdlong	arg02, objptr
045d8     07 00 00 FF 
045dc     30 E4 05 F1 | 	add	objptr, ##3632
045e0     F2 14 62 FC | 	wrlong	arg02, objptr
045e4     02 00 00 FF 
045e8     FC E5 85 F1 | 	sub	objptr, ##1532
045ec     FF FF BF FF 
045f0     F2 FE 6B FC | 	wrlong	##2147483647, objptr
045f4                 | ' 
045f4                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
045f4                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
045f4     04 00 00 FF 
045f8     34 E4 85 F1 | 	sub	objptr, ##2100
045fc     F2 14 0A FB | 	rdlong	arg02, objptr wz
04600     62 00 00 FF 
04604     30 E4 85 F1 | 	sub	objptr, ##50224
04608     66 00 00 AF 
0460c     60 E4 05 A1 |  if_e	add	objptr, ##52320
04610     FF FF FF AF 
04614     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
04618     66 00 00 AF 
0461c     60 E4 85 A1 |  if_e	sub	objptr, ##52320
04620     00 FC BF FD | 	call	#_save_line
04624     62 00 00 FF 
04628     30 E4 05 F1 | 	add	objptr, ##50224
0462c     F2 12 02 FB | 	rdlong	arg01, objptr
04630     01 14 66 F6 | 	neg	arg02, #1
04634     01 16 06 F6 | 	mov	arg03, #1
04638     00 18 06 F6 | 	mov	arg04, #0
0463c     56 00 00 FF 
04640     70 E5 85 F1 | 	sub	objptr, ##44400
04644                 | '     return fill(addr, pattern, count, listPtr, 4)
04644     04 1A 06 F6 | 	mov	arg05, #4
04648     54 28 B1 FD | 	call	#_psram_spin2_fill
0464c     0B 00 00 FF 
04650     C0 E4 85 F1 | 	sub	objptr, ##5824
04654                 | _add_line_at_end_ret
04654     2D 00 64 FD | 	ret
04658                 | 
04658                 | ' 
04658                 | ' function compile_immediate(linetype as ulong) as integer
04658                 | _compile_immediate
04658     09 4A 05 F6 | 	mov	COUNT_, #9
0465c     A8 00 A0 FD | 	call	#pushregs_
04660                 | _compile_immediate_enter
04660     09 25 0A F6 | 	mov	local04, arg01 wz
04664     00 26 06 F6 | 	mov	local05, #0
04668     00 28 06 F6 | 	mov	local06, #0
0466c                 | ' 
0466c                 | ' ' linetype=cont+1, linetype=0 immediate
0466c                 | ' '  : 1: this is the first part of the line that will continue
0466c                 | ' ' 2 - this is the continuation of the line
0466c                 | ' ' 3 - this is the last continued line
0466c                 | ' ' 4 - this is the one and only part
0466c                 | ' 
0466c                 | ' err=0
0466c                 | ' cmd=0
0466c                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
0466c     2C 00 90 5D |  if_ne	jmp	#LR__0360
04670     53 00 00 FF 
04674     E4 E5 05 F1 | 	add	objptr, ##42980
04678     F2 28 02 FB | 	rdlong	local06, objptr
0467c     02 00 00 FF 
04680     34 E4 05 F1 | 	add	objptr, ##1076
04684     F2 02 68 FC | 	wrlong	#1, objptr
04688     13 00 00 FF 
0468c     38 E4 05 F1 | 	add	objptr, ##9784
04690     F2 00 68 FC | 	wrlong	#0, objptr
04694     69 00 00 FF 
04698     50 E4 85 F1 | 	sub	objptr, ##53840
0469c                 | LR__0360
0469c                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
0469c     02 24 0E F2 | 	cmp	local04, #2 wz
046a0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
046a4     53 00 00 AF 
046a8     E4 E5 05 A1 |  if_e	add	objptr, ##42980
046ac     F2 28 02 AB |  if_e	rdlong	local06, objptr
046b0     02 00 00 AF 
046b4     34 E4 05 A1 |  if_e	add	objptr, ##1076
046b8     F2 02 68 AC |  if_e	wrlong	#1, objptr
046bc     56 00 00 AF 
046c0     18 E4 85 A1 |  if_e	sub	objptr, ##44056
046c4                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
046c4     04 24 0E F2 | 	cmp	local04, #4 wz
046c8     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
046cc     2C 00 90 5D |  if_ne	jmp	#LR__0361
046d0     53 00 00 FF 
046d4     EC E5 05 F1 | 	add	objptr, ##42988
046d8     F2 28 02 FB | 	rdlong	local06, objptr
046dc     02 00 00 FF 
046e0     2C E4 05 F1 | 	add	objptr, ##1068
046e4     F2 04 68 FC | 	wrlong	#2, objptr
046e8     13 00 00 FF 
046ec     38 E4 05 F1 | 	add	objptr, ##9784
046f0     F2 04 68 FC | 	wrlong	#2, objptr
046f4     69 00 00 FF 
046f8     50 E4 85 F1 | 	sub	objptr, ##53840
046fc                 | LR__0361
046fc                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
046fc     05 24 0E F2 | 	cmp	local04, #5 wz
04700     40 00 90 5D |  if_ne	jmp	#LR__0362
04704     56 00 00 FF 
04708     18 E4 05 F1 | 	add	objptr, ##44056
0470c     F2 2A 02 FB | 	rdlong	local07, objptr
04710     15 29 02 F6 | 	mov	local06, local07
04714     03 28 66 F0 | 	shl	local06, #3
04718     02 00 00 FF 
0471c     38 E4 85 F1 | 	sub	objptr, ##1080
04720     F2 28 02 F1 | 	add	local06, objptr
04724     04 28 06 F1 | 	add	local06, #4
04728     14 29 02 FB | 	rdlong	local06, local06
0472c     01 2A 06 F1 | 	add	local07, #1
04730     02 00 00 FF 
04734     38 E4 05 F1 | 	add	objptr, ##1080
04738     F2 2A 62 FC | 	wrlong	local07, objptr
0473c     56 00 00 FF 
04740     18 E4 85 F1 | 	sub	objptr, ##44056
04744                 | LR__0362
04744     00 2C 06 F6 | 	mov	local08, #0
04748                 | ' vars=0
04748                 | ' 'print  "In compile_immediate cmd=:", cmd
04748                 | ' 451 select case cmd
04748     40 28 0E F2 | 	cmp	local06, #64 wz
0474c     41 28 0E 52 |  if_ne	cmp	local06, #65 wz
04750     44 03 90 AD |  if_e	jmp	#LR__0410
04754     4C 28 0E F2 | 	cmp	local06, #76 wz
04758     84 01 90 AD |  if_e	jmp	#LR__0363
0475c     73 28 0E F2 | 	cmp	local06, #115 wz
04760     88 01 90 AD |  if_e	jmp	#LR__0364
04764     74 28 0E F2 | 	cmp	local06, #116 wz
04768     8C 01 90 AD |  if_e	jmp	#LR__0365
0476c     75 28 0E F2 | 	cmp	local06, #117 wz
04770     90 01 90 AD |  if_e	jmp	#LR__0366
04774     4D 28 0E F2 | 	cmp	local06, #77 wz
04778     1C 03 90 AD |  if_e	jmp	#LR__0410
0477c     42 28 0E F2 | 	cmp	local06, #66 wz
04780     8C 01 90 AD |  if_e	jmp	#LR__0367
04784     43 28 0E F2 | 	cmp	local06, #67 wz
04788     90 01 90 AD |  if_e	jmp	#LR__0368
0478c     45 28 0E F2 | 	cmp	local06, #69 wz
04790     94 01 90 AD |  if_e	jmp	#LR__0369
04794     46 28 0E F2 | 	cmp	local06, #70 wz
04798     98 01 90 AD |  if_e	jmp	#LR__0370
0479c     47 28 0E F2 | 	cmp	local06, #71 wz
047a0     9C 01 90 AD |  if_e	jmp	#LR__0371
047a4     48 28 0E F2 | 	cmp	local06, #72 wz
047a8     A0 01 90 AD |  if_e	jmp	#LR__0372
047ac     49 28 0E F2 | 	cmp	local06, #73 wz
047b0     A4 01 90 AD |  if_e	jmp	#LR__0373
047b4     44 28 0E F2 | 	cmp	local06, #68 wz
047b8     A8 01 90 AD |  if_e	jmp	#LR__0374
047bc     4E 28 0E F2 | 	cmp	local06, #78 wz
047c0     AC 01 90 AD |  if_e	jmp	#LR__0375
047c4     50 28 0E F2 | 	cmp	local06, #80 wz
047c8     C0 01 90 AD |  if_e	jmp	#LR__0377
047cc     51 28 0E F2 | 	cmp	local06, #81 wz
047d0     C0 01 90 AD |  if_e	jmp	#LR__0378
047d4     52 28 0E F2 | 	cmp	local06, #82 wz
047d8     C0 01 90 AD |  if_e	jmp	#LR__0379
047dc     59 28 0E F2 | 	cmp	local06, #89 wz
047e0     C0 01 90 AD |  if_e	jmp	#LR__0380
047e4     55 28 0E F2 | 	cmp	local06, #85 wz
047e8     C0 01 90 AD |  if_e	jmp	#LR__0381
047ec     56 28 0E F2 | 	cmp	local06, #86 wz
047f0     C0 01 90 AD |  if_e	jmp	#LR__0382
047f4     57 28 0E F2 | 	cmp	local06, #87 wz
047f8     70 28 0E 52 |  if_ne	cmp	local06, #112 wz
047fc     98 02 90 AD |  if_e	jmp	#LR__0410
04800     58 28 0E F2 | 	cmp	local06, #88 wz
04804     B4 01 90 AD |  if_e	jmp	#LR__0383
04808     4A 28 0E F2 | 	cmp	local06, #74 wz
0480c     B4 01 90 AD |  if_e	jmp	#LR__0384
04810     4B 28 0E F2 | 	cmp	local06, #75 wz
04814     B4 01 90 AD |  if_e	jmp	#LR__0385
04818     5A 28 0E F2 | 	cmp	local06, #90 wz
0481c     B4 01 90 AD |  if_e	jmp	#LR__0386
04820     5C 28 0E F2 | 	cmp	local06, #92 wz
04824     B4 01 90 AD |  if_e	jmp	#LR__0387
04828     5D 28 0E F2 | 	cmp	local06, #93 wz
0482c     68 02 90 AD |  if_e	jmp	#LR__0410
04830     5E 28 0E F2 | 	cmp	local06, #94 wz
04834     B0 01 90 AD |  if_e	jmp	#LR__0388
04838     5F 28 0E F2 | 	cmp	local06, #95 wz
0483c     B0 01 90 AD |  if_e	jmp	#LR__0389
04840     60 28 0E F2 | 	cmp	local06, #96 wz
04844     B0 01 90 AD |  if_e	jmp	#LR__0390
04848     61 28 0E F2 | 	cmp	local06, #97 wz
0484c     B0 01 90 AD |  if_e	jmp	#LR__0391
04850     63 28 0E F2 | 	cmp	local06, #99 wz
04854     B0 01 90 AD |  if_e	jmp	#LR__0392
04858     68 28 0E F2 | 	cmp	local06, #104 wz
0485c     B0 01 90 AD |  if_e	jmp	#LR__0393
04860     69 28 0E F2 | 	cmp	local06, #105 wz
04864     B0 01 90 AD |  if_e	jmp	#LR__0394
04868     6D 28 0E F2 | 	cmp	local06, #109 wz
0486c     B0 01 90 AD |  if_e	jmp	#LR__0395
04870     6C 28 0E F2 | 	cmp	local06, #108 wz
04874     B0 01 90 AD |  if_e	jmp	#LR__0396
04878     71 28 0E F2 | 	cmp	local06, #113 wz
0487c     B0 01 90 AD |  if_e	jmp	#LR__0397
04880     79 28 0E F2 | 	cmp	local06, #121 wz
04884     B0 01 90 AD |  if_e	jmp	#LR__0398
04888     77 28 0E F2 | 	cmp	local06, #119 wz
0488c     B0 01 90 AD |  if_e	jmp	#LR__0399
04890     78 28 0E F2 | 	cmp	local06, #120 wz
04894     B0 01 90 AD |  if_e	jmp	#LR__0400
04898     7C 28 0E F2 | 	cmp	local06, #124 wz
0489c     B0 01 90 AD |  if_e	jmp	#LR__0401
048a0     7D 28 0E F2 | 	cmp	local06, #125 wz
048a4     B0 01 90 AD |  if_e	jmp	#LR__0402
048a8     7E 28 0E F2 | 	cmp	local06, #126 wz
048ac     B0 01 90 AD |  if_e	jmp	#LR__0403
048b0     7F 28 0E F2 | 	cmp	local06, #127 wz
048b4     B0 01 90 AD |  if_e	jmp	#LR__0404
048b8     80 28 0E F2 | 	cmp	local06, #128 wz
048bc     B0 01 90 AD |  if_e	jmp	#LR__0405
048c0     72 28 0E F2 | 	cmp	local06, #114 wz
048c4     B0 01 90 AD |  if_e	jmp	#LR__0406
048c8     81 28 0E F2 | 	cmp	local06, #129 wz
048cc     B0 01 90 AD |  if_e	jmp	#LR__0407
048d0     01 00 00 FF 
048d4     04 28 0E F2 | 	cmp	local06, ##516 wz
048d8     AC 01 90 AD |  if_e	jmp	#LR__0408
048dc     B0 01 90 FD | 	jmp	#LR__0409
048e0                 | LR__0363
048e0     B4 0F B0 FD | 	call	#_compile_fun_varp
048e4     FD 2C 02 F6 | 	mov	local08, result1
048e8     AC 01 90 FD | 	jmp	#LR__0410
048ec                 | LR__0364
048ec     A8 0F B0 FD | 	call	#_compile_fun_varp
048f0     FD 2C 02 F6 | 	mov	local08, result1
048f4     A0 01 90 FD | 	jmp	#LR__0410
048f8                 | LR__0365
048f8     9C 0F B0 FD | 	call	#_compile_fun_varp
048fc     FD 2C 02 F6 | 	mov	local08, result1
04900     94 01 90 FD | 	jmp	#LR__0410
04904                 | LR__0366
04904     90 0F B0 FD | 	call	#_compile_fun_varp
04908     FD 2C 02 F6 | 	mov	local08, result1
0490c     88 01 90 FD | 	jmp	#LR__0410
04910                 | LR__0367
04910     A4 0B B0 FD | 	call	#_compile_fun_2p
04914     FD 26 02 F6 | 	mov	local05, result1
04918     7C 01 90 FD | 	jmp	#LR__0410
0491c                 | LR__0368
0491c     98 0B B0 FD | 	call	#_compile_fun_2p
04920     FD 26 02 F6 | 	mov	local05, result1
04924     70 01 90 FD | 	jmp	#LR__0410
04928                 | LR__0369
04928     00 0C B0 FD | 	call	#_compile_fun_3p
0492c     FD 26 02 F6 | 	mov	local05, result1
04930     64 01 90 FD | 	jmp	#LR__0410
04934                 | LR__0370
04934     F4 0B B0 FD | 	call	#_compile_fun_3p
04938     FD 26 02 F6 | 	mov	local05, result1
0493c     58 01 90 FD | 	jmp	#LR__0410
04940                 | LR__0371
04940     B4 0C B0 FD | 	call	#_compile_fun_4p
04944     FD 26 02 F6 | 	mov	local05, result1
04948     4C 01 90 FD | 	jmp	#LR__0410
0494c                 | LR__0372
0494c     A8 0C B0 FD | 	call	#_compile_fun_4p
04950     FD 26 02 F6 | 	mov	local05, result1
04954     40 01 90 FD | 	jmp	#LR__0410
04958                 | LR__0373
04958     80 2D B0 FD | 	call	#_expr
0495c                 | ' 
0495c                 | ' 
0495c                 | ' expr()
0495c                 | ' return 0
0495c     00 26 06 F6 | 	mov	local05, #0
04960     34 01 90 FD | 	jmp	#LR__0410
04964                 | LR__0374
04964     5C 10 B0 FD | 	call	#_compile_print
04968     FD 26 02 F6 | 	mov	local05, result1
0496c     E4 01 90 FD | 	jmp	#LR__0411
04970                 | LR__0375
04970     01 24 16 F2 | 	cmp	local04, #1 wc
04974     08 00 90 CD |  if_b	jmp	#LR__0376
04978     00 2A B0 FD | 	call	#_compile_goto
0497c     D4 01 90 FD | 	jmp	#LR__0411
04980                 | LR__0376
04980     19 12 06 F6 | 	mov	arg01, #25
04984     AC F9 B0 FD | 	call	#_printerror
04988     C8 01 90 FD | 	jmp	#LR__0411
0498c                 | LR__0377
0498c     4C 2D B0 FD | 	call	#_expr
04990                 | ' 
04990                 | ' 
04990                 | ' expr()
04990                 | ' return 0
04990     04 01 90 FD | 	jmp	#LR__0410
04994                 | LR__0378
04994     44 2D B0 FD | 	call	#_expr
04998                 | ' 
04998                 | ' 
04998                 | ' expr()
04998                 | ' return 0
04998     FC 00 90 FD | 	jmp	#LR__0410
0499c                 | LR__0379
0499c     3C 2D B0 FD | 	call	#_expr
049a0                 | ' 
049a0                 | ' 
049a0                 | ' expr()
049a0                 | ' return 0
049a0     F4 00 90 FD | 	jmp	#LR__0410
049a4                 | LR__0380
049a4     34 2D B0 FD | 	call	#_expr
049a8                 | ' 
049a8                 | ' 
049a8                 | ' expr()
049a8                 | ' return 0
049a8     EC 00 90 FD | 	jmp	#LR__0410
049ac                 | LR__0381
049ac     94 0F B0 FD | 	call	#_compile_int_fun_2p
049b0     E4 00 90 FD | 	jmp	#LR__0410
049b4                 | LR__0382
049b4     18 0A B0 FD | 	call	#_compile_converttoint
049b8                 | ' return err
049b8     DC 00 90 FD | 	jmp	#LR__0410
049bc                 | LR__0383
049bc     DC 16 B0 FD | 	call	#_compile_if
049c0     90 01 90 FD | 	jmp	#LR__0411
049c4                 | LR__0384
049c4     18 20 B0 FD | 	call	#_compile_for
049c8     88 01 90 FD | 	jmp	#LR__0411
049cc                 | LR__0385
049cc     FC 27 B0 FD | 	call	#_compile_next
049d0     80 01 90 FD | 	jmp	#LR__0411
049d4                 | LR__0386
049d4     04 18 B0 FD | 	call	#_compile_else
049d8     78 01 90 FD | 	jmp	#LR__0411
049dc                 | LR__0387
049dc     D8 0A B0 FD | 	call	#_compile_fun_2p
049e0     FD 26 02 F6 | 	mov	local05, result1
049e4     B0 00 90 FD | 	jmp	#LR__0410
049e8                 | LR__0388
049e8     F0 2C B0 FD | 	call	#_expr
049ec                 | ' 
049ec                 | ' 
049ec                 | ' expr()
049ec                 | ' return 0
049ec     A8 00 90 FD | 	jmp	#LR__0410
049f0                 | LR__0389
049f0     E8 2C B0 FD | 	call	#_expr
049f4                 | ' 
049f4                 | ' 
049f4                 | ' expr()
049f4                 | ' return 0
049f4     A0 00 90 FD | 	jmp	#LR__0410
049f8                 | LR__0390
049f8     E0 2C B0 FD | 	call	#_expr
049fc                 | ' 
049fc                 | ' 
049fc                 | ' expr()
049fc                 | ' return 0
049fc     98 00 90 FD | 	jmp	#LR__0410
04a00                 | LR__0391
04a00     D8 2C B0 FD | 	call	#_expr
04a04                 | ' 
04a04                 | ' 
04a04                 | ' expr()
04a04                 | ' return 0
04a04     90 00 90 FD | 	jmp	#LR__0410
04a08                 | LR__0392
04a08     D0 2C B0 FD | 	call	#_expr
04a0c                 | ' 
04a0c                 | ' 
04a0c                 | ' expr()
04a0c                 | ' return 0
04a0c     88 00 90 FD | 	jmp	#LR__0410
04a10                 | LR__0393
04a10     C8 2C B0 FD | 	call	#_expr
04a14                 | ' 
04a14                 | ' 
04a14                 | ' expr()
04a14                 | ' return 0
04a14     80 00 90 FD | 	jmp	#LR__0410
04a18                 | LR__0394
04a18     C0 2C B0 FD | 	call	#_expr
04a1c                 | ' 
04a1c                 | ' 
04a1c                 | ' expr()
04a1c                 | ' return 0
04a1c     78 00 90 FD | 	jmp	#LR__0410
04a20                 | LR__0395
04a20     08 0B B0 FD | 	call	#_compile_fun_3p
04a24     70 00 90 FD | 	jmp	#LR__0410
04a28                 | LR__0396
04a28     F0 0C B0 FD | 	call	#_compile_fun_5p
04a2c     68 00 90 FD | 	jmp	#LR__0410
04a30                 | LR__0397
04a30     C4 0B B0 FD | 	call	#_compile_fun_4p
04a34     60 00 90 FD | 	jmp	#LR__0410
04a38                 | LR__0398
04a38     7C 0A B0 FD | 	call	#_compile_fun_2p
04a3c     58 00 90 FD | 	jmp	#LR__0410
04a40                 | LR__0399
04a40     74 0A B0 FD | 	call	#_compile_fun_2p
04a44     50 00 90 FD | 	jmp	#LR__0410
04a48                 | LR__0400
04a48     6C 0A B0 FD | 	call	#_compile_fun_2p
04a4c     48 00 90 FD | 	jmp	#LR__0410
04a50                 | LR__0401
04a50     88 2C B0 FD | 	call	#_expr
04a54                 | ' 
04a54                 | ' 
04a54                 | ' expr()
04a54                 | ' return 0
04a54     40 00 90 FD | 	jmp	#LR__0410
04a58                 | LR__0402
04a58     80 2C B0 FD | 	call	#_expr
04a5c                 | ' 
04a5c                 | ' 
04a5c                 | ' expr()
04a5c                 | ' return 0
04a5c     38 00 90 FD | 	jmp	#LR__0410
04a60                 | LR__0403
04a60     78 2C B0 FD | 	call	#_expr
04a64                 | ' 
04a64                 | ' 
04a64                 | ' expr()
04a64                 | ' return 0
04a64     30 00 90 FD | 	jmp	#LR__0410
04a68                 | LR__0404
04a68     8C 0B B0 FD | 	call	#_compile_fun_4p
04a6c     28 00 90 FD | 	jmp	#LR__0410
04a70                 | LR__0405
04a70     68 2C B0 FD | 	call	#_expr
04a74                 | ' 
04a74                 | ' 
04a74                 | ' expr()
04a74                 | ' return 0
04a74     20 00 90 FD | 	jmp	#LR__0410
04a78                 | LR__0406
04a78     88 18 B0 FD | 	call	#_compile_dim
04a7c     D4 00 90 FD | 	jmp	#LR__0411
04a80                 | LR__0407
04a80     34 0A B0 FD | 	call	#_compile_fun_2p
04a84     10 00 90 FD | 	jmp	#LR__0410
04a88                 | LR__0408
04a88     20 01 B0 FD | 	call	#_compile_array_assign
04a8c     C4 00 90 FD | 	jmp	#LR__0411
04a90                 | LR__0409
04a90     80 08 B0 FD | 	call	#_compile_unknown
04a94     BC 00 90 FD | 	jmp	#LR__0411
04a98                 | LR__0410
04a98     14 23 02 F6 | 	mov	local03, local06
04a9c     16 1F 02 F6 | 	mov	local01, local08
04aa0     0F 2B 02 F6 | 	mov	local07, local01
04aa4     10 2F 02 F6 | 	mov	local09, local02
04aa8     11 1F 02 F6 | 	mov	local01, local03
04aac     69 00 00 FF 
04ab0     50 E4 05 F1 | 	add	objptr, ##53840
04ab4     F2 2C 02 FB | 	rdlong	local08, objptr
04ab8     16 29 02 F6 | 	mov	local06, local08
04abc     01 28 66 F0 | 	shl	local06, #1
04ac0     16 29 02 F1 | 	add	local06, local08
04ac4     02 28 66 F0 | 	shl	local06, #2
04ac8     03 00 00 FF 
04acc     00 E4 85 F1 | 	sub	objptr, ##1536
04ad0     F2 28 02 F1 | 	add	local06, objptr
04ad4     14 2B 62 FC | 	wrlong	local07, local06
04ad8     03 00 00 FF 
04adc     00 E4 05 F1 | 	add	objptr, ##1536
04ae0     F2 2C 02 FB | 	rdlong	local08, objptr
04ae4     16 2B 02 F6 | 	mov	local07, local08
04ae8     01 2A 66 F0 | 	shl	local07, #1
04aec     16 2B 02 F1 | 	add	local07, local08
04af0     02 2A 66 F0 | 	shl	local07, #2
04af4     03 00 00 FF 
04af8     00 E4 85 F1 | 	sub	objptr, ##1536
04afc     F2 2A 02 F1 | 	add	local07, objptr
04b00     04 2A 06 F1 | 	add	local07, #4
04b04     15 2F 62 FC | 	wrlong	local09, local07
04b08     03 00 00 FF 
04b0c     00 E4 05 F1 | 	add	objptr, ##1536
04b10     F2 2E 02 FB | 	rdlong	local09, objptr
04b14     17 2D 02 F6 | 	mov	local08, local09
04b18     01 2C 66 F0 | 	shl	local08, #1
04b1c     17 2D 02 F1 | 	add	local08, local09
04b20     02 2C 66 F0 | 	shl	local08, #2
04b24     03 00 00 FF 
04b28     00 E4 85 F1 | 	sub	objptr, ##1536
04b2c     F2 2C 02 F1 | 	add	local08, objptr
04b30     08 2C 06 F1 | 	add	local08, #8
04b34     16 1F 62 FC | 	wrlong	local01, local08
04b38     03 00 00 FF 
04b3c     00 E4 05 F1 | 	add	objptr, ##1536
04b40     F2 2A 02 FB | 	rdlong	local07, objptr
04b44     01 2A 06 F1 | 	add	local07, #1
04b48     F2 2A 62 FC | 	wrlong	local07, objptr
04b4c     69 00 00 FF 
04b50     50 E4 85 F1 | 	sub	objptr, ##53840
04b54                 | LR__0411
04b54                 | ' 
04b54                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
04b54                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
04b54     00 24 0E F2 | 	cmp	local04, #0 wz
04b58     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04b5c     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
04b60     38 00 90 5D |  if_ne	jmp	#LR__0412
04b64     69 00 00 FF 
04b68     50 E4 05 F1 | 	add	objptr, ##53840
04b6c     F2 2E 02 FB | 	rdlong	local09, objptr
04b70     17 1F 02 F6 | 	mov	local01, local09
04b74     01 1E 66 F0 | 	shl	local01, #1
04b78     17 1F 02 F1 | 	add	local01, local09
04b7c     02 1E 66 F0 | 	shl	local01, #2
04b80     03 00 00 FF 
04b84     00 E4 85 F1 | 	sub	objptr, ##1536
04b88     F2 1E 02 F1 | 	add	local01, objptr
04b8c     08 1E 06 F1 | 	add	local01, #8
04b90     0F FD 6B FC | 	wrlong	#510, local01
04b94     66 00 00 FF 
04b98     50 E4 85 F1 | 	sub	objptr, ##52304
04b9c                 | LR__0412
04b9c                 | ' 
04b9c                 | ' ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
04b9c                 | ' return err
04b9c     13 FB 01 F6 | 	mov	result1, local05
04ba0     A7 F0 03 F6 | 	mov	ptra, fp
04ba4     B2 00 A0 FD | 	call	#popregs_
04ba8                 | _compile_immediate_ret
04ba8     2D 00 64 FD | 	ret
04bac                 | 
04bac                 | ' 
04bac                 | ' sub compile_array_assign
04bac                 | _compile_array_assign
04bac     0A 4A 05 F6 | 	mov	COUNT_, #10
04bb0     A8 00 A0 FD | 	call	#pushregs_
04bb4     00 24 06 F6 | 	mov	local04, #0
04bb8     56 00 00 FF 
04bbc     18 E4 05 F1 | 	add	objptr, ##44056
04bc0     F2 26 02 FB | 	rdlong	local05, objptr
04bc4     13 FB 01 F6 | 	mov	result1, local05
04bc8     01 FA 85 F1 | 	sub	result1, #1
04bcc     03 FA 65 F0 | 	shl	result1, #3
04bd0     02 00 00 FF 
04bd4     38 E4 85 F1 | 	sub	objptr, ##1080
04bd8     F2 FA 01 F1 | 	add	result1, objptr
04bdc     FD 28 02 FB | 	rdlong	local06, result1
04be0                 | ' numpar=0
04be0                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
04be0                 | ' ' todo here: recognize params and t1.result.twowords=numpar
04be0                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
04be0                 | ' if lparts(ct).token=token_lpar then
04be0     03 26 66 F0 | 	shl	local05, #3
04be4     F2 26 02 F1 | 	add	local05, objptr
04be8     04 26 06 F1 | 	add	local05, #4
04bec     13 27 02 FB | 	rdlong	local05, local05
04bf0     15 26 0E F2 | 	cmp	local05, #21 wz
04bf4     53 00 00 FF 
04bf8     E0 E5 85 F1 | 	sub	objptr, ##42976
04bfc     D4 01 90 5D |  if_ne	jmp	#LR__0424
04c00     56 00 00 FF 
04c04     18 E4 05 F1 | 	add	objptr, ##44056
04c08     F2 2A 02 FB | 	rdlong	local07, objptr
04c0c     01 2A 06 F1 | 	add	local07, #1
04c10     F2 2A 62 FC | 	wrlong	local07, objptr
04c14     56 00 00 FF 
04c18     18 E4 85 F1 | 	sub	objptr, ##44056
04c1c                 | '   ct+=1 											' omit this lpar, this is for expr list
04c1c                 | '   do
04c1c                 | LR__0420
04c1c     BC 2A B0 FD | 	call	#_expr
04c20     56 00 00 FF 
04c24     18 E4 05 F1 | 	add	objptr, ##44056
04c28     F2 26 02 FB | 	rdlong	local05, objptr
04c2c     01 26 06 F1 | 	add	local05, #1
04c30     F2 26 62 FC | 	wrlong	local05, objptr
04c34     01 24 06 F1 | 	add	local04, #1
04c38     01 26 86 F1 | 	sub	local05, #1
04c3c     03 26 66 F0 | 	shl	local05, #3
04c40     02 00 00 FF 
04c44     38 E4 85 F1 | 	sub	objptr, ##1080
04c48     F2 26 02 F1 | 	add	local05, objptr
04c4c     04 26 06 F1 | 	add	local05, #4
04c50     13 2B 02 FB | 	rdlong	local07, local05
04c54     14 2A 0E F2 | 	cmp	local07, #20 wz
04c58     53 00 00 FF 
04c5c     E0 E5 85 F1 | 	sub	objptr, ##42976
04c60     34 00 90 AD |  if_e	jmp	#LR__0421
04c64     56 00 00 FF 
04c68     18 E4 05 F1 | 	add	objptr, ##44056
04c6c     F2 2A 02 FB | 	rdlong	local07, objptr
04c70     03 2A 66 F0 | 	shl	local07, #3
04c74     02 00 00 FF 
04c78     38 E4 85 F1 | 	sub	objptr, ##1080
04c7c     F2 2A 02 F1 | 	add	local07, objptr
04c80     04 2A 06 F1 | 	add	local07, #4
04c84     15 2B 02 FB | 	rdlong	local07, local07
04c88     FE 2B 0E F2 | 	cmp	local07, #510 wz
04c8c     53 00 00 FF 
04c90     E0 E5 85 F1 | 	sub	objptr, ##42976
04c94     84 FF 9F 5D |  if_ne	jmp	#LR__0420
04c98                 | LR__0421
04c98     56 00 00 FF 
04c9c     18 E4 05 F1 | 	add	objptr, ##44056
04ca0     F2 2A 02 FB | 	rdlong	local07, objptr
04ca4     01 2A 06 F1 | 	add	local07, #1
04ca8     F2 2A 62 FC | 	wrlong	local07, objptr
04cac     56 00 00 FF 
04cb0     18 E4 85 F1 | 	sub	objptr, ##44056
04cb4     24 2A B0 FD | 	call	#_expr
04cb8     01 2C 66 F6 | 	neg	local08, #1
04cbc     00 2E 06 F6 | 	mov	local09, #0
04cc0                 | ' '   print "in array_assign, rpar found, numpar=",numpar
04cc0                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
04cc0                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
04cc0                 | ' ct+=1 : expr()
04cc0                 | ' ' now find the vae
04cc0                 | ' 
04cc0                 | ' j=-1 : i=0 : do : 
04cc0                 | LR__0422
04cc0                 | '   if variables(i).name=varname$ then j=i: exit loop
04cc0     17 27 02 F6 | 	mov	local05, local09
04cc4     04 26 66 F0 | 	shl	local05, #4
04cc8     33 00 00 FF 
04ccc     DC E5 05 F1 | 	add	objptr, ##26588
04cd0     F2 26 02 F1 | 	add	local05, objptr
04cd4     13 13 02 FB | 	rdlong	arg01, local05
04cd8     14 15 02 F6 | 	mov	arg02, local06
04cdc     33 00 00 FF 
04ce0     DC E5 85 F1 | 	sub	objptr, ##26588
04ce4     98 2B B1 FD | 	call	#__system___string_cmp
04ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cec     17 2D 02 A6 |  if_e	mov	local08, local09
04cf0     20 00 90 AD |  if_e	jmp	#LR__0423
04cf4     01 2E 06 F1 | 	add	local09, #1
04cf8     53 00 00 FF 
04cfc     DC E5 05 F1 | 	add	objptr, ##42972
04d00     F2 2A 02 FB | 	rdlong	local07, objptr
04d04     53 00 00 FF 
04d08     DC E5 85 F1 | 	sub	objptr, ##42972
04d0c     15 2F 5A F2 | 	cmps	local09, local07 wcz
04d10     AC FF 9F ED |  if_be	jmp	#LR__0422
04d14                 | LR__0423
04d14     16 1F 02 F6 | 	mov	local01, local08
04d18     12 21 02 F6 | 	mov	local02, local04
04d1c     17 22 06 F6 | 	mov	local03, #23
04d20     0F 2B 02 F6 | 	mov	local07, local01
04d24     10 31 02 F6 | 	mov	local10, local02
04d28     11 2D 02 F6 | 	mov	local08, local03
04d2c     69 00 00 FF 
04d30     50 E4 05 F1 | 	add	objptr, ##53840
04d34     F2 1E 02 FB | 	rdlong	local01, objptr
04d38     0F 2F 02 F6 | 	mov	local09, local01
04d3c     01 2E 66 F0 | 	shl	local09, #1
04d40     0F 2F 02 F1 | 	add	local09, local01
04d44     02 2E 66 F0 | 	shl	local09, #2
04d48     03 00 00 FF 
04d4c     00 E4 85 F1 | 	sub	objptr, ##1536
04d50     F2 2E 02 F1 | 	add	local09, objptr
04d54     17 2B 62 FC | 	wrlong	local07, local09
04d58     03 00 00 FF 
04d5c     00 E4 05 F1 | 	add	objptr, ##1536
04d60     F2 1E 02 FB | 	rdlong	local01, objptr
04d64     0F 2F 02 F6 | 	mov	local09, local01
04d68     01 2E 66 F0 | 	shl	local09, #1
04d6c     0F 2F 02 F1 | 	add	local09, local01
04d70     02 2E 66 F0 | 	shl	local09, #2
04d74     03 00 00 FF 
04d78     00 E4 85 F1 | 	sub	objptr, ##1536
04d7c     F2 2E 02 F1 | 	add	local09, objptr
04d80     04 2E 06 F1 | 	add	local09, #4
04d84     17 31 62 FC | 	wrlong	local10, local09
04d88     03 00 00 FF 
04d8c     00 E4 05 F1 | 	add	objptr, ##1536
04d90     F2 30 02 FB | 	rdlong	local10, objptr
04d94     18 1F 02 F6 | 	mov	local01, local10
04d98     01 1E 66 F0 | 	shl	local01, #1
04d9c     18 1F 02 F1 | 	add	local01, local10
04da0     02 1E 66 F0 | 	shl	local01, #2
04da4     03 00 00 FF 
04da8     00 E4 85 F1 | 	sub	objptr, ##1536
04dac     F2 1E 02 F1 | 	add	local01, objptr
04db0     08 1E 06 F1 | 	add	local01, #8
04db4     0F 2D 62 FC | 	wrlong	local08, local01
04db8     03 00 00 FF 
04dbc     00 E4 05 F1 | 	add	objptr, ##1536
04dc0     F2 2A 02 FB | 	rdlong	local07, objptr
04dc4     01 2A 06 F1 | 	add	local07, #1
04dc8     F2 2A 62 FC | 	wrlong	local07, objptr
04dcc     69 00 00 FF 
04dd0     50 E4 85 F1 | 	sub	objptr, ##53840
04dd4                 | LR__0424
04dd4     A7 F0 03 F6 | 	mov	ptra, fp
04dd8     B2 00 A0 FD | 	call	#popregs_
04ddc                 | _compile_array_assign_ret
04ddc     2D 00 64 FD | 	ret
04de0                 | 
04de0                 | ' 
04de0                 | ' 
04de0                 | ' sub compile_immediate_assign(linetype as ulong)
04de0                 | _compile_immediate_assign
04de0     09 4A 05 F6 | 	mov	COUNT_, #9
04de4     A8 00 A0 FD | 	call	#pushregs_
04de8     09 25 0A F6 | 	mov	local04, arg01 wz
04dec     FF 22 06 F6 | 	mov	local03, #255
04df0     01 26 66 F6 | 	neg	local05, #1
04df4                 | ' 
04df4                 | ' t1.result_type=result_error : t1.result.uresult=0
04df4                 | ' i=-1: j=-1
04df4                 | ' 
04df4                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
04df4     2C 00 90 5D |  if_ne	jmp	#LR__0430
04df8     53 00 00 FF 
04dfc     E0 E5 05 F1 | 	add	objptr, ##42976
04e00     F2 28 02 FB | 	rdlong	local06, objptr
04e04     02 00 00 FF 
04e08     38 E4 05 F1 | 	add	objptr, ##1080
04e0c     F2 04 68 FC | 	wrlong	#2, objptr
04e10     13 00 00 FF 
04e14     38 E4 05 F1 | 	add	objptr, ##9784
04e18     F2 00 68 FC | 	wrlong	#0, objptr
04e1c     69 00 00 FF 
04e20     50 E4 85 F1 | 	sub	objptr, ##53840
04e24                 | LR__0430
04e24                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
04e24     02 24 0E F2 | 	cmp	local04, #2 wz
04e28     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04e2c     53 00 00 AF 
04e30     E0 E5 05 A1 |  if_e	add	objptr, ##42976
04e34     F2 28 02 AB |  if_e	rdlong	local06, objptr
04e38     02 00 00 AF 
04e3c     38 E4 05 A1 |  if_e	add	objptr, ##1080
04e40     F2 04 68 AC |  if_e	wrlong	#2, objptr
04e44     56 00 00 AF 
04e48     18 E4 85 A1 |  if_e	sub	objptr, ##44056
04e4c                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
04e4c     04 24 0E F2 | 	cmp	local04, #4 wz
04e50     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
04e54     2C 00 90 5D |  if_ne	jmp	#LR__0431
04e58     53 00 00 FF 
04e5c     E8 E5 05 F1 | 	add	objptr, ##42984
04e60     F2 28 02 FB | 	rdlong	local06, objptr
04e64     02 00 00 FF 
04e68     30 E4 05 F1 | 	add	objptr, ##1072
04e6c     F2 06 68 FC | 	wrlong	#3, objptr
04e70     13 00 00 FF 
04e74     38 E4 05 F1 | 	add	objptr, ##9784
04e78     F2 04 68 FC | 	wrlong	#2, objptr
04e7c     69 00 00 FF 
04e80     50 E4 85 F1 | 	sub	objptr, ##53840
04e84                 | LR__0431
04e84                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
04e84     05 24 0E F2 | 	cmp	local04, #5 wz
04e88     3C 00 90 5D |  if_ne	jmp	#LR__0432
04e8c     56 00 00 FF 
04e90     18 E4 05 F1 | 	add	objptr, ##44056
04e94     F2 FA 01 FB | 	rdlong	result1, objptr
04e98     FD 28 02 F6 | 	mov	local06, result1
04e9c     03 28 66 F0 | 	shl	local06, #3
04ea0     02 00 00 FF 
04ea4     38 E4 85 F1 | 	sub	objptr, ##1080
04ea8     F2 28 02 F1 | 	add	local06, objptr
04eac     14 29 02 FB | 	rdlong	local06, local06
04eb0     02 FA 05 F1 | 	add	result1, #2
04eb4     02 00 00 FF 
04eb8     38 E4 05 F1 | 	add	objptr, ##1080
04ebc     F2 FA 61 FC | 	wrlong	result1, objptr
04ec0     56 00 00 FF 
04ec4     18 E4 85 F1 | 	sub	objptr, ##44056
04ec8                 | LR__0432
04ec8     14 13 02 F6 | 	mov	arg01, local06
04ecc     01 14 06 F6 | 	mov	arg02, #1
04ed0     1C 4A B1 FD | 	call	#__system__Right_S
04ed4     04 28 B0 FD | 	call	#_expr
04ed8                 | '  
04ed8                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
04ed8                 | ' 
04ed8                 | ' suffix2$=right$(varname2$,1)
04ed8                 | ' expr()
04ed8                 | ' 
04ed8                 | ' 
04ed8                 | ' if varnum>0 then
04ed8     53 00 00 FF 
04edc     DC E5 05 F1 | 	add	objptr, ##42972
04ee0     F2 2A 02 FB | 	rdlong	local07, objptr
04ee4     53 00 00 FF 
04ee8     DC E5 85 F1 | 	sub	objptr, ##42972
04eec     01 2A 56 F2 | 	cmps	local07, #1 wc
04ef0     58 00 90 CD |  if_b	jmp	#LR__0435
04ef4                 | '   for i=0 to varnum-1
04ef4     00 2C 06 F6 | 	mov	local08, #0
04ef8     53 00 00 FF 
04efc     DC E5 05 F1 | 	add	objptr, ##42972
04f00     F2 2E 02 FB | 	rdlong	local09, objptr
04f04     53 00 00 FF 
04f08     DC E5 85 F1 | 	sub	objptr, ##42972
04f0c                 | LR__0433
04f0c     17 2D 52 F2 | 	cmps	local08, local09 wc
04f10     38 00 90 3D |  if_ae	jmp	#LR__0434
04f14                 | '     if variables(i).name=varname2$ then j=i : exit
04f14     16 2B 02 F6 | 	mov	local07, local08
04f18     04 2A 66 F0 | 	shl	local07, #4
04f1c     33 00 00 FF 
04f20     DC E5 05 F1 | 	add	objptr, ##26588
04f24     F2 2A 02 F1 | 	add	local07, objptr
04f28     15 13 02 FB | 	rdlong	arg01, local07
04f2c     14 15 02 F6 | 	mov	arg02, local06
04f30     33 00 00 FF 
04f34     DC E5 85 F1 | 	sub	objptr, ##26588
04f38     44 29 B1 FD | 	call	#__system___string_cmp
04f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f40     16 27 02 A6 |  if_e	mov	local05, local08
04f44     01 2C 06 51 |  if_ne	add	local08, #1
04f48     C0 FF 9F 5D |  if_ne	jmp	#LR__0433
04f4c                 | LR__0434
04f4c                 | LR__0435
04f4c                 | ' if  j=-1 andalso varnum<maxvars then   
04f4c     FF FF 7F FF 
04f50     FF 27 0E F2 | 	cmp	local05, ##-1 wz
04f54     60 00 90 5D |  if_ne	jmp	#LR__0436
04f58     53 00 00 FF 
04f5c     DC E5 05 F1 | 	add	objptr, ##42972
04f60     F2 2A 02 FB | 	rdlong	local07, objptr
04f64     53 00 00 FF 
04f68     DC E5 85 F1 | 	sub	objptr, ##42972
04f6c     01 00 00 FF 
04f70     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
04f74     40 00 90 3D |  if_ae	jmp	#LR__0436
04f78     53 00 00 FF 
04f7c     DC E5 05 F1 | 	add	objptr, ##42972
04f80     F2 2E 02 FB | 	rdlong	local09, objptr
04f84     04 2E 66 F0 | 	shl	local09, #4
04f88     20 00 00 FF 
04f8c     00 E4 85 F1 | 	sub	objptr, ##16384
04f90     F2 2E 02 F1 | 	add	local09, objptr
04f94     17 29 62 FC | 	wrlong	local06, local09
04f98     20 00 00 FF 
04f9c     00 E4 05 F1 | 	add	objptr, ##16384
04fa0     F2 2A 02 FB | 	rdlong	local07, objptr
04fa4     15 27 02 F6 | 	mov	local05, local07
04fa8     01 2A 06 F1 | 	add	local07, #1
04fac     F2 2A 62 FC | 	wrlong	local07, objptr
04fb0     53 00 00 FF 
04fb4     DC E5 85 F1 | 	sub	objptr, ##42972
04fb8                 | LR__0436
04fb8     13 1F 02 F6 | 	mov	local01, local05
04fbc     17 22 06 F6 | 	mov	local03, #23
04fc0     0F 2B 02 F6 | 	mov	local07, local01
04fc4     10 2F 02 F6 | 	mov	local09, local02
04fc8     11 1F 02 F6 | 	mov	local01, local03
04fcc     69 00 00 FF 
04fd0     50 E4 05 F1 | 	add	objptr, ##53840
04fd4     F2 2C 02 FB | 	rdlong	local08, objptr
04fd8     16 29 02 F6 | 	mov	local06, local08
04fdc     01 28 66 F0 | 	shl	local06, #1
04fe0     16 29 02 F1 | 	add	local06, local08
04fe4     02 28 66 F0 | 	shl	local06, #2
04fe8     03 00 00 FF 
04fec     00 E4 85 F1 | 	sub	objptr, ##1536
04ff0     F2 28 02 F1 | 	add	local06, objptr
04ff4     14 2B 62 FC | 	wrlong	local07, local06
04ff8     03 00 00 FF 
04ffc     00 E4 05 F1 | 	add	objptr, ##1536
05000     F2 2C 02 FB | 	rdlong	local08, objptr
05004     16 2B 02 F6 | 	mov	local07, local08
05008     01 2A 66 F0 | 	shl	local07, #1
0500c     16 2B 02 F1 | 	add	local07, local08
05010     02 2A 66 F0 | 	shl	local07, #2
05014     03 00 00 FF 
05018     00 E4 85 F1 | 	sub	objptr, ##1536
0501c     F2 2A 02 F1 | 	add	local07, objptr
05020     04 2A 06 F1 | 	add	local07, #4
05024     15 2F 62 FC | 	wrlong	local09, local07
05028     03 00 00 FF 
0502c     00 E4 05 F1 | 	add	objptr, ##1536
05030     F2 2E 02 FB | 	rdlong	local09, objptr
05034     17 2D 02 F6 | 	mov	local08, local09
05038     01 2C 66 F0 | 	shl	local08, #1
0503c     17 2D 02 F1 | 	add	local08, local09
05040     02 2C 66 F0 | 	shl	local08, #2
05044     03 00 00 FF 
05048     00 E4 85 F1 | 	sub	objptr, ##1536
0504c     F2 2C 02 F1 | 	add	local08, objptr
05050     08 2C 06 F1 | 	add	local08, #8
05054     16 1F 62 FC | 	wrlong	local01, local08
05058     03 00 00 FF 
0505c     00 E4 05 F1 | 	add	objptr, ##1536
05060     F2 2A 02 FB | 	rdlong	local07, objptr
05064     01 2A 06 F1 | 	add	local07, #1
05068     F2 2A 62 FC | 	wrlong	local07, objptr
0506c     69 00 00 FF 
05070     50 E4 85 F1 | 	sub	objptr, ##53840
05074                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
05074                 | ' 
05074                 | ' 
05074                 | ' 
05074                 | ' 
05074                 | ' 
05074                 | ' 
05074                 | ' compiledline(lineptr)=t1:  lineptr+=1 
05074                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
05074     00 24 0E F2 | 	cmp	local04, #0 wz
05078     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
0507c     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
05080     38 00 90 5D |  if_ne	jmp	#LR__0437
05084     69 00 00 FF 
05088     50 E4 05 F1 | 	add	objptr, ##53840
0508c     F2 1E 02 FB | 	rdlong	local01, objptr
05090     0F 2F 02 F6 | 	mov	local09, local01
05094     01 2E 66 F0 | 	shl	local09, #1
05098     0F 2F 02 F1 | 	add	local09, local01
0509c     02 2E 66 F0 | 	shl	local09, #2
050a0     03 00 00 FF 
050a4     00 E4 85 F1 | 	sub	objptr, ##1536
050a8     F2 2E 02 F1 | 	add	local09, objptr
050ac     08 2E 06 F1 | 	add	local09, #8
050b0     17 FD 6B FC | 	wrlong	#510, local09
050b4     66 00 00 FF 
050b8     50 E4 85 F1 | 	sub	objptr, ##52304
050bc                 | LR__0437
050bc     A7 F0 03 F6 | 	mov	ptra, fp
050c0     B2 00 A0 FD | 	call	#popregs_
050c4                 | _compile_immediate_assign_ret
050c4     2D 00 64 FD | 	ret
050c8                 | 
050c8                 | ' 
050c8                 | ' ' ------------------ compile the line that is calling a command 
050c8                 | ' 
050c8                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
050c8                 | _compile
050c8     04 4A 05 F6 | 	mov	COUNT_, #4
050cc     A8 00 A0 FD | 	call	#pushregs_
050d0     09 1F 0A F6 | 	mov	local01, arg01 wz
050d4     0A 21 02 F6 | 	mov	local02, arg02
050d8     0B 23 02 F6 | 	mov	local03, arg03
050dc                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
050dc                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
050dc                 | '  
050dc                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
050dc                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
050dc     0C 00 90 5D |  if_ne	jmp	#LR__0440
050e0     00 12 06 F6 | 	mov	arg01, #0
050e4     70 F5 BF FD | 	call	#_compile_immediate
050e8     A0 00 90 FD | 	jmp	#LR__0447
050ec                 | LR__0440
050ec     66 00 00 FF 
050f0     50 E4 05 F1 | 	add	objptr, ##52304
050f4     F2 1E 62 FC | 	wrlong	local01, objptr
050f8     04 E4 05 F1 | 	add	objptr, #4
050fc     F2 20 62 FC | 	wrlong	local02, objptr
05100     66 00 00 FF 
05104     54 E4 85 F1 | 	sub	objptr, ##52308
05108     11 13 02 F6 | 	mov	arg01, local03
0510c     01 12 06 F1 | 	add	arg01, #1
05110     44 F5 BF FD | 	call	#_compile_immediate
05114     FD 24 0A F6 | 	mov	local04, result1 wz
05118                 | ' 
05118                 | ' ucompiledline(0)=alinemajor
05118                 | ' ucompiledline(1)=alineminor
05118                 | ' 
05118                 | ' 
05118                 | ' ' cont: 0: this is the first part of the line that will continue
05118                 | ' ' 1 - this is the continuation of the line
05118                 | ' ' 2 - this is the last continued line
05118                 | ' ' 3 - this is the ome and only part
05118                 | ' 
05118                 | ' 
05118                 | ' err=compile_immediate(cont+1) 
05118                 | ' if err=0 then
05118     6C 00 90 5D |  if_ne	jmp	#LR__0446
0511c                 | '   if cont=3 orelse cont=2 then 
0511c     03 22 0E F2 | 	cmp	local03, #3 wz
05120     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
05124     60 00 90 5D |  if_ne	jmp	#LR__0445
05128                 | '     if alinemajor >lastline then 
05128     69 00 00 FF 
0512c     5C E4 05 F1 | 	add	objptr, ##53852
05130     F2 16 02 FB | 	rdlong	arg03, objptr
05134     69 00 00 FF 
05138     5C E4 85 F1 | 	sub	objptr, ##53852
0513c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05140     0C 00 90 ED |  if_be	jmp	#LR__0441
05144     0F 13 02 F6 | 	mov	arg01, local01
05148     2C F4 BF FD | 	call	#_add_line_at_end
0514c     38 00 90 FD | 	jmp	#LR__0444
05150                 | LR__0441
05150     0F 13 02 F6 | 	mov	arg01, local01
05154     AC EC BF FD | 	call	#_deleteline
05158                 | '       deleteline(alinemajor)  
05158                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor) ' yes I know that's not optimal    
05158     69 00 00 FF 
0515c     5C E4 05 F1 | 	add	objptr, ##53852
05160     F2 16 02 FB | 	rdlong	arg03, objptr
05164     69 00 00 FF 
05168     5C E4 85 F1 | 	sub	objptr, ##53852
0516c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05170     0C 00 90 ED |  if_be	jmp	#LR__0442
05174     0F 13 02 F6 | 	mov	arg01, local01
05178     FC F3 BF FD | 	call	#_add_line_at_end
0517c     08 00 90 FD | 	jmp	#LR__0443
05180                 | LR__0442
05180     0F 13 02 F6 | 	mov	arg01, local01
05184     A8 F1 BF FD | 	call	#_insertline
05188                 | LR__0443
05188                 | LR__0444
05188                 | LR__0445
05188                 | LR__0446
05188                 | ' return err
05188     12 FB 01 F6 | 	mov	result1, local04
0518c                 | LR__0447
0518c     A7 F0 03 F6 | 	mov	ptra, fp
05190     B2 00 A0 FD | 	call	#popregs_
05194                 | _compile_ret
05194     2D 00 64 FD | 	ret
05198                 | 
05198                 | ' 
05198                 | ' ' ------------------ compile the line that is assigning to a variable
05198                 | ' 
05198                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
05198                 | _compile_assign
05198     03 4A 05 F6 | 	mov	COUNT_, #3
0519c     A8 00 A0 FD | 	call	#pushregs_
051a0     09 1F 0A F6 | 	mov	local01, arg01 wz
051a4     0A 21 02 F6 | 	mov	local02, arg02
051a8     0B 23 02 F6 | 	mov	local03, arg03
051ac                 | ' 
051ac                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
051ac                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
051ac     0C 00 90 5D |  if_ne	jmp	#LR__0450
051b0     00 12 06 F6 | 	mov	arg01, #0
051b4     28 FC BF FD | 	call	#_compile_immediate_assign
051b8     94 00 90 FD | 	jmp	#LR__0456
051bc                 | LR__0450
051bc     66 00 00 FF 
051c0     50 E4 05 F1 | 	add	objptr, ##52304
051c4     F2 1E 62 FC | 	wrlong	local01, objptr
051c8     04 E4 05 F1 | 	add	objptr, #4
051cc     F2 20 62 FC | 	wrlong	local02, objptr
051d0     66 00 00 FF 
051d4     54 E4 85 F1 | 	sub	objptr, ##52308
051d8     11 13 02 F6 | 	mov	arg01, local03
051dc     01 12 06 F1 | 	add	arg01, #1
051e0     FC FB BF FD | 	call	#_compile_immediate_assign
051e4                 | ' 
051e4                 | ' ucompiledline(0)=alinemajor
051e4                 | ' ucompiledline(1)=alineminor
051e4                 | ' 
051e4                 | ' compile_immediate_assign(cont+1) 
051e4                 | ' 
051e4                 | ' if cont=3 orelse cont=2 then 
051e4     03 22 0E F2 | 	cmp	local03, #3 wz
051e8     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
051ec     60 00 90 5D |  if_ne	jmp	#LR__0455
051f0                 | '   if alinemajor >lastline then 
051f0     69 00 00 FF 
051f4     5C E4 05 F1 | 	add	objptr, ##53852
051f8     F2 16 02 FB | 	rdlong	arg03, objptr
051fc     69 00 00 FF 
05200     5C E4 85 F1 | 	sub	objptr, ##53852
05204     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05208     0C 00 90 ED |  if_be	jmp	#LR__0451
0520c     0F 13 02 F6 | 	mov	arg01, local01
05210     64 F3 BF FD | 	call	#_add_line_at_end
05214     38 00 90 FD | 	jmp	#LR__0454
05218                 | LR__0451
05218     0F 13 02 F6 | 	mov	arg01, local01
0521c     E4 EB BF FD | 	call	#_deleteline
05220                 | '     deleteline(alinemajor)  
05220                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
05220     69 00 00 FF 
05224     5C E4 05 F1 | 	add	objptr, ##53852
05228     F2 16 02 FB | 	rdlong	arg03, objptr
0522c     69 00 00 FF 
05230     5C E4 85 F1 | 	sub	objptr, ##53852
05234     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05238     0C 00 90 ED |  if_be	jmp	#LR__0452
0523c     0F 13 02 F6 | 	mov	arg01, local01
05240     34 F3 BF FD | 	call	#_add_line_at_end
05244     08 00 90 FD | 	jmp	#LR__0453
05248                 | LR__0452
05248     0F 13 02 F6 | 	mov	arg01, local01
0524c     E0 F0 BF FD | 	call	#_insertline
05250                 | LR__0453
05250                 | LR__0454
05250                 | LR__0455
05250                 | LR__0456
05250     A7 F0 03 F6 | 	mov	ptra, fp
05254     B2 00 A0 FD | 	call	#popregs_
05258                 | _compile_assign_ret
05258     2D 00 64 FD | 	ret
0525c                 | 
0525c                 | ' 
0525c                 | ' sub compile_error(errno)
0525c                 | _compile_error
0525c     FF 04 06 F6 | 	mov	_var03, #255
05260     01 07 02 F6 | 	mov	_var04, _var02
05264     02 09 02 F6 | 	mov	_var05, _var03
05268     69 00 00 FF 
0526c     50 E4 05 F1 | 	add	objptr, ##53840
05270     F2 0A 02 FB | 	rdlong	_var06, objptr
05274     05 0D 02 F6 | 	mov	_var07, _var06
05278     01 0C 66 F0 | 	shl	_var07, #1
0527c     05 0D 02 F1 | 	add	_var07, _var06
05280     02 0C 66 F0 | 	shl	_var07, #2
05284     03 00 00 FF 
05288     00 E4 85 F1 | 	sub	objptr, ##1536
0528c     F2 0C 02 F1 | 	add	_var07, objptr
05290     06 13 62 FC | 	wrlong	arg01, _var07
05294     03 00 00 FF 
05298     00 E4 05 F1 | 	add	objptr, ##1536
0529c     F2 0C 02 FB | 	rdlong	_var07, objptr
052a0     06 0B 02 F6 | 	mov	_var06, _var07
052a4     01 0A 66 F0 | 	shl	_var06, #1
052a8     06 0B 02 F1 | 	add	_var06, _var07
052ac     02 0A 66 F0 | 	shl	_var06, #2
052b0     03 00 00 FF 
052b4     00 E4 85 F1 | 	sub	objptr, ##1536
052b8     F2 0A 02 F1 | 	add	_var06, objptr
052bc     04 0A 06 F1 | 	add	_var06, #4
052c0     05 07 62 FC | 	wrlong	_var04, _var06
052c4     03 00 00 FF 
052c8     00 E4 05 F1 | 	add	objptr, ##1536
052cc     F2 0C 02 FB | 	rdlong	_var07, objptr
052d0     06 0B 02 F6 | 	mov	_var06, _var07
052d4     01 0A 66 F0 | 	shl	_var06, #1
052d8     06 0B 02 F1 | 	add	_var06, _var07
052dc     02 0A 66 F0 | 	shl	_var06, #2
052e0     03 00 00 FF 
052e4     00 E4 85 F1 | 	sub	objptr, ##1536
052e8     F2 0A 02 F1 | 	add	_var06, objptr
052ec     08 0A 06 F1 | 	add	_var06, #8
052f0     05 09 62 FC | 	wrlong	_var05, _var06
052f4     03 00 00 FF 
052f8     00 E4 05 F1 | 	add	objptr, ##1536
052fc     F2 12 02 FB | 	rdlong	arg01, objptr
05300     01 12 06 F1 | 	add	arg01, #1
05304     F2 12 62 FC | 	wrlong	arg01, objptr
05308     69 00 00 FF 
0530c     50 E4 85 F1 | 	sub	objptr, ##53840
05310                 | _compile_error_ret
05310     2D 00 64 FD | 	ret
05314                 | 
05314                 | ' 
05314                 | ' 
05314                 | ' sub compile_unknown() 
05314                 | _compile_unknown
05314     FF 04 06 F6 | 	mov	_var03, #255
05318     17 00 06 F6 | 	mov	_var01, #23
0531c     01 07 02 F6 | 	mov	_var04, _var02
05320     02 01 02 F6 | 	mov	_var01, _var03
05324     69 00 00 FF 
05328     50 E4 05 F1 | 	add	objptr, ##53840
0532c     F2 08 02 FB | 	rdlong	_var05, objptr
05330     04 0B 02 F6 | 	mov	_var06, _var05
05334     01 0A 66 F0 | 	shl	_var06, #1
05338     04 0B 02 F1 | 	add	_var06, _var05
0533c     02 0A 66 F0 | 	shl	_var06, #2
05340     03 00 00 FF 
05344     00 E4 85 F1 | 	sub	objptr, ##1536
05348     F2 0A 02 F1 | 	add	_var06, objptr
0534c     05 2F 68 FC | 	wrlong	#23, _var06
05350     03 00 00 FF 
05354     00 E4 05 F1 | 	add	objptr, ##1536
05358     F2 0A 02 FB | 	rdlong	_var06, objptr
0535c     05 09 02 F6 | 	mov	_var05, _var06
05360     01 08 66 F0 | 	shl	_var05, #1
05364     05 09 02 F1 | 	add	_var05, _var06
05368     02 08 66 F0 | 	shl	_var05, #2
0536c     03 00 00 FF 
05370     00 E4 85 F1 | 	sub	objptr, ##1536
05374     F2 08 02 F1 | 	add	_var05, objptr
05378     04 08 06 F1 | 	add	_var05, #4
0537c     04 07 62 FC | 	wrlong	_var04, _var05
05380     03 00 00 FF 
05384     00 E4 05 F1 | 	add	objptr, ##1536
05388     F2 0A 02 FB | 	rdlong	_var06, objptr
0538c     05 09 02 F6 | 	mov	_var05, _var06
05390     01 08 66 F0 | 	shl	_var05, #1
05394     05 09 02 F1 | 	add	_var05, _var06
05398     02 08 66 F0 | 	shl	_var05, #2
0539c     03 00 00 FF 
053a0     00 E4 85 F1 | 	sub	objptr, ##1536
053a4     F2 08 02 F1 | 	add	_var05, objptr
053a8     08 08 06 F1 | 	add	_var05, #8
053ac     04 01 62 FC | 	wrlong	_var01, _var05
053b0     03 00 00 FF 
053b4     00 E4 05 F1 | 	add	objptr, ##1536
053b8     F2 0A 02 FB | 	rdlong	_var06, objptr
053bc     01 0A 06 F1 | 	add	_var06, #1
053c0     F2 0A 62 FC | 	wrlong	_var06, objptr
053c4     69 00 00 FF 
053c8     50 E4 85 F1 | 	sub	objptr, ##53840
053cc                 | _compile_unknown_ret
053cc     2D 00 64 FD | 	ret
053d0                 | 
053d0                 | ' 
053d0                 | ' function compile_converttoint() as integer
053d0                 | _compile_converttoint
053d0     06 4A 05 F6 | 	mov	COUNT_, #6
053d4     A8 00 A0 FD | 	call	#pushregs_
053d8     00 1E 06 F6 | 	mov	local01, #0
053dc     FC 22 B0 FD | 	call	#_expr
053e0     FD 24 0A F6 | 	mov	local04, result1 wz
053e4                 | ' err=0
053e4                 | ' t1.result.uresult=0
053e4                 | ' err=expr()
053e4                 | ' if err=0 then
053e4     C0 00 90 5D |  if_ne	jmp	#LR__0460
053e8     16 22 06 F6 | 	mov	local03, #22
053ec     0F 27 02 F6 | 	mov	local05, local01
053f0     10 29 02 F6 | 	mov	local06, local02
053f4     11 25 02 F6 | 	mov	local04, local03
053f8     69 00 00 FF 
053fc     50 E4 05 F1 | 	add	objptr, ##53840
05400     F2 1E 02 FB | 	rdlong	local01, objptr
05404     0F FB 01 F6 | 	mov	result1, local01
05408     01 FA 65 F0 | 	shl	result1, #1
0540c     0F FB 01 F1 | 	add	result1, local01
05410     02 FA 65 F0 | 	shl	result1, #2
05414     03 00 00 FF 
05418     00 E4 85 F1 | 	sub	objptr, ##1536
0541c     F2 FA 01 F1 | 	add	result1, objptr
05420     FD 26 62 FC | 	wrlong	local05, result1
05424     03 00 00 FF 
05428     00 E4 05 F1 | 	add	objptr, ##1536
0542c     F2 26 02 FB | 	rdlong	local05, objptr
05430     13 1F 02 F6 | 	mov	local01, local05
05434     01 1E 66 F0 | 	shl	local01, #1
05438     13 1F 02 F1 | 	add	local01, local05
0543c     02 1E 66 F0 | 	shl	local01, #2
05440     03 00 00 FF 
05444     00 E4 85 F1 | 	sub	objptr, ##1536
05448     F2 1E 02 F1 | 	add	local01, objptr
0544c     04 1E 06 F1 | 	add	local01, #4
05450     0F 29 62 FC | 	wrlong	local06, local01
05454     03 00 00 FF 
05458     00 E4 05 F1 | 	add	objptr, ##1536
0545c     F2 28 02 FB | 	rdlong	local06, objptr
05460     14 27 02 F6 | 	mov	local05, local06
05464     01 26 66 F0 | 	shl	local05, #1
05468     14 27 02 F1 | 	add	local05, local06
0546c     02 26 66 F0 | 	shl	local05, #2
05470     03 00 00 FF 
05474     00 E4 85 F1 | 	sub	objptr, ##1536
05478     F2 26 02 F1 | 	add	local05, objptr
0547c     08 26 06 F1 | 	add	local05, #8
05480     13 25 62 FC | 	wrlong	local04, local05
05484     03 00 00 FF 
05488     00 E4 05 F1 | 	add	objptr, ##1536
0548c     F2 26 02 FB | 	rdlong	local05, objptr
05490     01 26 06 F1 | 	add	local05, #1
05494     F2 26 62 FC | 	wrlong	local05, objptr
05498     69 00 00 FF 
0549c     50 E4 85 F1 | 	sub	objptr, ##53840
054a0                 | '   t1.result_type=fun_converttoint
054a0                 | '   compiledline(lineptr)=t1: lineptr+=1 
054a0                 | '   return 0
054a0     00 FA 05 F6 | 	mov	result1, #0
054a4     04 00 90 FD | 	jmp	#LR__0461
054a8                 | LR__0460
054a8                 | '   return err
054a8     12 FB 01 F6 | 	mov	result1, local04
054ac                 | LR__0461
054ac     A7 F0 03 F6 | 	mov	ptra, fp
054b0     B2 00 A0 FD | 	call	#popregs_
054b4                 | _compile_converttoint_ret
054b4     2D 00 64 FD | 	ret
054b8                 | 
054b8                 | ' 
054b8                 | ' 
054b8                 | ' function compile_fun_2p() as ulong
054b8                 | _compile_fun_2p
054b8     01 4A 05 F6 | 	mov	COUNT_, #1
054bc     A8 00 A0 FD | 	call	#pushregs_
054c0     18 22 B0 FD | 	call	#_expr
054c4                 | ' 
054c4                 | ' expr()
054c4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
054c4     56 00 00 FF 
054c8     18 E4 05 F1 | 	add	objptr, ##44056
054cc     F2 1E 02 FB | 	rdlong	local01, objptr
054d0     03 1E 66 F0 | 	shl	local01, #3
054d4     02 00 00 FF 
054d8     38 E4 85 F1 | 	sub	objptr, ##1080
054dc     F2 1E 02 F1 | 	add	local01, objptr
054e0     04 1E 06 F1 | 	add	local01, #4
054e4     0F 1F 02 FB | 	rdlong	local01, local01
054e8     11 1E 0E F2 | 	cmp	local01, #17 wz
054ec     53 00 00 FF 
054f0     E0 E5 85 F1 | 	sub	objptr, ##42976
054f4     15 FA 05 56 |  if_ne	mov	result1, #21
054f8     24 00 90 5D |  if_ne	jmp	#LR__0470
054fc     56 00 00 FF 
05500     18 E4 05 F1 | 	add	objptr, ##44056
05504     F2 1E 02 FB | 	rdlong	local01, objptr
05508     01 1E 06 F1 | 	add	local01, #1
0550c     F2 1E 62 FC | 	wrlong	local01, objptr
05510     56 00 00 FF 
05514     18 E4 85 F1 | 	sub	objptr, ##44056
05518     C0 21 B0 FD | 	call	#_expr
0551c     00 FA 05 F6 | 	mov	result1, #0
05520                 | LR__0470
05520     A7 F0 03 F6 | 	mov	ptra, fp
05524     B2 00 A0 FD | 	call	#popregs_
05528                 | _compile_fun_2p_ret
05528     2D 00 64 FD | 	ret
0552c                 | 
0552c                 | ' 
0552c                 | ' function compile_fun_3p() as ulong
0552c                 | _compile_fun_3p
0552c     01 4A 05 F6 | 	mov	COUNT_, #1
05530     A8 00 A0 FD | 	call	#pushregs_
05534     A4 21 B0 FD | 	call	#_expr
05538                 | ' 
05538                 | ' expr()
05538                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05538     56 00 00 FF 
0553c     18 E4 05 F1 | 	add	objptr, ##44056
05540     F2 1E 02 FB | 	rdlong	local01, objptr
05544     03 1E 66 F0 | 	shl	local01, #3
05548     02 00 00 FF 
0554c     38 E4 85 F1 | 	sub	objptr, ##1080
05550     F2 1E 02 F1 | 	add	local01, objptr
05554     04 1E 06 F1 | 	add	local01, #4
05558     0F 1F 02 FB | 	rdlong	local01, local01
0555c     11 1E 0E F2 | 	cmp	local01, #17 wz
05560     53 00 00 FF 
05564     E0 E5 85 F1 | 	sub	objptr, ##42976
05568     15 FA 05 56 |  if_ne	mov	result1, #21
0556c     7C 00 90 5D |  if_ne	jmp	#LR__0480
05570     56 00 00 FF 
05574     18 E4 05 F1 | 	add	objptr, ##44056
05578     F2 1E 02 FB | 	rdlong	local01, objptr
0557c     01 1E 06 F1 | 	add	local01, #1
05580     F2 1E 62 FC | 	wrlong	local01, objptr
05584     56 00 00 FF 
05588     18 E4 85 F1 | 	sub	objptr, ##44056
0558c     4C 21 B0 FD | 	call	#_expr
05590                 | ' expr()
05590                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05590     56 00 00 FF 
05594     18 E4 05 F1 | 	add	objptr, ##44056
05598     F2 1E 02 FB | 	rdlong	local01, objptr
0559c     03 1E 66 F0 | 	shl	local01, #3
055a0     02 00 00 FF 
055a4     38 E4 85 F1 | 	sub	objptr, ##1080
055a8     F2 1E 02 F1 | 	add	local01, objptr
055ac     04 1E 06 F1 | 	add	local01, #4
055b0     0F 1F 02 FB | 	rdlong	local01, local01
055b4     11 1E 0E F2 | 	cmp	local01, #17 wz
055b8     53 00 00 FF 
055bc     E0 E5 85 F1 | 	sub	objptr, ##42976
055c0     15 FA 05 56 |  if_ne	mov	result1, #21
055c4     24 00 90 5D |  if_ne	jmp	#LR__0480
055c8     56 00 00 FF 
055cc     18 E4 05 F1 | 	add	objptr, ##44056
055d0     F2 1E 02 FB | 	rdlong	local01, objptr
055d4     01 1E 06 F1 | 	add	local01, #1
055d8     F2 1E 62 FC | 	wrlong	local01, objptr
055dc     56 00 00 FF 
055e0     18 E4 85 F1 | 	sub	objptr, ##44056
055e4     F4 20 B0 FD | 	call	#_expr
055e8     00 FA 05 F6 | 	mov	result1, #0
055ec                 | LR__0480
055ec     A7 F0 03 F6 | 	mov	ptra, fp
055f0     B2 00 A0 FD | 	call	#popregs_
055f4                 | _compile_fun_3p_ret
055f4     2D 00 64 FD | 	ret
055f8                 | 
055f8                 | ' 
055f8                 | ' function compile_fun_4p() as ulong
055f8                 | _compile_fun_4p
055f8     01 4A 05 F6 | 	mov	COUNT_, #1
055fc     A8 00 A0 FD | 	call	#pushregs_
05600     D8 20 B0 FD | 	call	#_expr
05604                 | ' 
05604                 | ' expr()
05604                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05604     56 00 00 FF 
05608     18 E4 05 F1 | 	add	objptr, ##44056
0560c     F2 1E 02 FB | 	rdlong	local01, objptr
05610     03 1E 66 F0 | 	shl	local01, #3
05614     02 00 00 FF 
05618     38 E4 85 F1 | 	sub	objptr, ##1080
0561c     F2 1E 02 F1 | 	add	local01, objptr
05620     04 1E 06 F1 | 	add	local01, #4
05624     0F 1F 02 FB | 	rdlong	local01, local01
05628     11 1E 0E F2 | 	cmp	local01, #17 wz
0562c     53 00 00 FF 
05630     E0 E5 85 F1 | 	sub	objptr, ##42976
05634     15 FA 05 56 |  if_ne	mov	result1, #21
05638     D4 00 90 5D |  if_ne	jmp	#LR__0490
0563c     56 00 00 FF 
05640     18 E4 05 F1 | 	add	objptr, ##44056
05644     F2 1E 02 FB | 	rdlong	local01, objptr
05648     01 1E 06 F1 | 	add	local01, #1
0564c     F2 1E 62 FC | 	wrlong	local01, objptr
05650     56 00 00 FF 
05654     18 E4 85 F1 | 	sub	objptr, ##44056
05658     80 20 B0 FD | 	call	#_expr
0565c                 | ' expr()
0565c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0565c     56 00 00 FF 
05660     18 E4 05 F1 | 	add	objptr, ##44056
05664     F2 1E 02 FB | 	rdlong	local01, objptr
05668     03 1E 66 F0 | 	shl	local01, #3
0566c     02 00 00 FF 
05670     38 E4 85 F1 | 	sub	objptr, ##1080
05674     F2 1E 02 F1 | 	add	local01, objptr
05678     04 1E 06 F1 | 	add	local01, #4
0567c     0F 1F 02 FB | 	rdlong	local01, local01
05680     11 1E 0E F2 | 	cmp	local01, #17 wz
05684     53 00 00 FF 
05688     E0 E5 85 F1 | 	sub	objptr, ##42976
0568c     15 FA 05 56 |  if_ne	mov	result1, #21
05690     7C 00 90 5D |  if_ne	jmp	#LR__0490
05694     56 00 00 FF 
05698     18 E4 05 F1 | 	add	objptr, ##44056
0569c     F2 1E 02 FB | 	rdlong	local01, objptr
056a0     01 1E 06 F1 | 	add	local01, #1
056a4     F2 1E 62 FC | 	wrlong	local01, objptr
056a8     56 00 00 FF 
056ac     18 E4 85 F1 | 	sub	objptr, ##44056
056b0     28 20 B0 FD | 	call	#_expr
056b4                 | ' expr()
056b4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
056b4     56 00 00 FF 
056b8     18 E4 05 F1 | 	add	objptr, ##44056
056bc     F2 1E 02 FB | 	rdlong	local01, objptr
056c0     03 1E 66 F0 | 	shl	local01, #3
056c4     02 00 00 FF 
056c8     38 E4 85 F1 | 	sub	objptr, ##1080
056cc     F2 1E 02 F1 | 	add	local01, objptr
056d0     04 1E 06 F1 | 	add	local01, #4
056d4     0F 1F 02 FB | 	rdlong	local01, local01
056d8     11 1E 0E F2 | 	cmp	local01, #17 wz
056dc     53 00 00 FF 
056e0     E0 E5 85 F1 | 	sub	objptr, ##42976
056e4     15 FA 05 56 |  if_ne	mov	result1, #21
056e8     24 00 90 5D |  if_ne	jmp	#LR__0490
056ec     56 00 00 FF 
056f0     18 E4 05 F1 | 	add	objptr, ##44056
056f4     F2 1E 02 FB | 	rdlong	local01, objptr
056f8     01 1E 06 F1 | 	add	local01, #1
056fc     F2 1E 62 FC | 	wrlong	local01, objptr
05700     56 00 00 FF 
05704     18 E4 85 F1 | 	sub	objptr, ##44056
05708     D0 1F B0 FD | 	call	#_expr
0570c     00 FA 05 F6 | 	mov	result1, #0
05710                 | LR__0490
05710     A7 F0 03 F6 | 	mov	ptra, fp
05714     B2 00 A0 FD | 	call	#popregs_
05718                 | _compile_fun_4p_ret
05718     2D 00 64 FD | 	ret
0571c                 | 
0571c                 | ' 
0571c                 | ' 
0571c                 | ' function compile_fun_5p() as ulong
0571c                 | _compile_fun_5p
0571c     01 4A 05 F6 | 	mov	COUNT_, #1
05720     A8 00 A0 FD | 	call	#pushregs_
05724     B4 1F B0 FD | 	call	#_expr
05728                 | ' 
05728                 | ' expr()
05728                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05728     56 00 00 FF 
0572c     18 E4 05 F1 | 	add	objptr, ##44056
05730     F2 1E 02 FB | 	rdlong	local01, objptr
05734     03 1E 66 F0 | 	shl	local01, #3
05738     02 00 00 FF 
0573c     38 E4 85 F1 | 	sub	objptr, ##1080
05740     F2 1E 02 F1 | 	add	local01, objptr
05744     04 1E 06 F1 | 	add	local01, #4
05748     0F 1F 02 FB | 	rdlong	local01, local01
0574c     11 1E 0E F2 | 	cmp	local01, #17 wz
05750     53 00 00 FF 
05754     E0 E5 85 F1 | 	sub	objptr, ##42976
05758     15 FA 05 56 |  if_ne	mov	result1, #21
0575c     2C 01 90 5D |  if_ne	jmp	#LR__0500
05760     56 00 00 FF 
05764     18 E4 05 F1 | 	add	objptr, ##44056
05768     F2 1E 02 FB | 	rdlong	local01, objptr
0576c     01 1E 06 F1 | 	add	local01, #1
05770     F2 1E 62 FC | 	wrlong	local01, objptr
05774     56 00 00 FF 
05778     18 E4 85 F1 | 	sub	objptr, ##44056
0577c     5C 1F B0 FD | 	call	#_expr
05780                 | ' expr()
05780                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05780     56 00 00 FF 
05784     18 E4 05 F1 | 	add	objptr, ##44056
05788     F2 1E 02 FB | 	rdlong	local01, objptr
0578c     03 1E 66 F0 | 	shl	local01, #3
05790     02 00 00 FF 
05794     38 E4 85 F1 | 	sub	objptr, ##1080
05798     F2 1E 02 F1 | 	add	local01, objptr
0579c     04 1E 06 F1 | 	add	local01, #4
057a0     0F 1F 02 FB | 	rdlong	local01, local01
057a4     11 1E 0E F2 | 	cmp	local01, #17 wz
057a8     53 00 00 FF 
057ac     E0 E5 85 F1 | 	sub	objptr, ##42976
057b0     15 FA 05 56 |  if_ne	mov	result1, #21
057b4     D4 00 90 5D |  if_ne	jmp	#LR__0500
057b8     56 00 00 FF 
057bc     18 E4 05 F1 | 	add	objptr, ##44056
057c0     F2 1E 02 FB | 	rdlong	local01, objptr
057c4     01 1E 06 F1 | 	add	local01, #1
057c8     F2 1E 62 FC | 	wrlong	local01, objptr
057cc     56 00 00 FF 
057d0     18 E4 85 F1 | 	sub	objptr, ##44056
057d4     04 1F B0 FD | 	call	#_expr
057d8                 | ' expr()
057d8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
057d8     56 00 00 FF 
057dc     18 E4 05 F1 | 	add	objptr, ##44056
057e0     F2 1E 02 FB | 	rdlong	local01, objptr
057e4     03 1E 66 F0 | 	shl	local01, #3
057e8     02 00 00 FF 
057ec     38 E4 85 F1 | 	sub	objptr, ##1080
057f0     F2 1E 02 F1 | 	add	local01, objptr
057f4     04 1E 06 F1 | 	add	local01, #4
057f8     0F 1F 02 FB | 	rdlong	local01, local01
057fc     11 1E 0E F2 | 	cmp	local01, #17 wz
05800     53 00 00 FF 
05804     E0 E5 85 F1 | 	sub	objptr, ##42976
05808     15 FA 05 56 |  if_ne	mov	result1, #21
0580c     7C 00 90 5D |  if_ne	jmp	#LR__0500
05810     56 00 00 FF 
05814     18 E4 05 F1 | 	add	objptr, ##44056
05818     F2 1E 02 FB | 	rdlong	local01, objptr
0581c     01 1E 06 F1 | 	add	local01, #1
05820     F2 1E 62 FC | 	wrlong	local01, objptr
05824     56 00 00 FF 
05828     18 E4 85 F1 | 	sub	objptr, ##44056
0582c     AC 1E B0 FD | 	call	#_expr
05830                 | ' expr()
05830                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05830     56 00 00 FF 
05834     18 E4 05 F1 | 	add	objptr, ##44056
05838     F2 1E 02 FB | 	rdlong	local01, objptr
0583c     03 1E 66 F0 | 	shl	local01, #3
05840     02 00 00 FF 
05844     38 E4 85 F1 | 	sub	objptr, ##1080
05848     F2 1E 02 F1 | 	add	local01, objptr
0584c     04 1E 06 F1 | 	add	local01, #4
05850     0F 1F 02 FB | 	rdlong	local01, local01
05854     11 1E 0E F2 | 	cmp	local01, #17 wz
05858     53 00 00 FF 
0585c     E0 E5 85 F1 | 	sub	objptr, ##42976
05860     15 FA 05 56 |  if_ne	mov	result1, #21
05864     24 00 90 5D |  if_ne	jmp	#LR__0500
05868     56 00 00 FF 
0586c     18 E4 05 F1 | 	add	objptr, ##44056
05870     F2 1E 02 FB | 	rdlong	local01, objptr
05874     01 1E 06 F1 | 	add	local01, #1
05878     F2 1E 62 FC | 	wrlong	local01, objptr
0587c     56 00 00 FF 
05880     18 E4 85 F1 | 	sub	objptr, ##44056
05884     54 1E B0 FD | 	call	#_expr
05888     00 FA 05 F6 | 	mov	result1, #0
0588c                 | LR__0500
0588c     A7 F0 03 F6 | 	mov	ptra, fp
05890     B2 00 A0 FD | 	call	#popregs_
05894                 | _compile_fun_5p_ret
05894     2D 00 64 FD | 	ret
05898                 | 
05898                 | ' 
05898                 | ' function compile_fun_varp() as ulong ' parameter # on top of the stack
05898                 | _compile_fun_varp
05898     02 4A 05 F6 | 	mov	COUNT_, #2
0589c     A8 00 A0 FD | 	call	#pushregs_
058a0     00 1E 06 F6 | 	mov	local01, #0
058a4                 | ' i=0
058a4                 | ' if lparts(ct).token<>token_end then
058a4     56 00 00 FF 
058a8     18 E4 05 F1 | 	add	objptr, ##44056
058ac     F2 20 02 FB | 	rdlong	local02, objptr
058b0     03 20 66 F0 | 	shl	local02, #3
058b4     02 00 00 FF 
058b8     38 E4 85 F1 | 	sub	objptr, ##1080
058bc     F2 20 02 F1 | 	add	local02, objptr
058c0     04 20 06 F1 | 	add	local02, #4
058c4     10 21 02 FB | 	rdlong	local02, local02
058c8     FE 21 0E F2 | 	cmp	local02, #510 wz
058cc     53 00 00 FF 
058d0     E0 E5 85 F1 | 	sub	objptr, ##42976
058d4     5C 00 90 AD |  if_e	jmp	#LR__0512
058d8                 | '   do
058d8                 | LR__0510
058d8     00 1E B0 FD | 	call	#_expr
058dc     01 1E 06 F1 | 	add	local01, #1
058e0                 | '   expr()
058e0                 | '    i+=1
058e0                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
058e0     56 00 00 FF 
058e4     18 E4 05 F1 | 	add	objptr, ##44056
058e8     F2 20 02 FB | 	rdlong	local02, objptr
058ec     03 20 66 F0 | 	shl	local02, #3
058f0     02 00 00 FF 
058f4     38 E4 85 F1 | 	sub	objptr, ##1080
058f8     F2 20 02 F1 | 	add	local02, objptr
058fc     04 20 06 F1 | 	add	local02, #4
05900     10 21 02 FB | 	rdlong	local02, local02
05904     11 20 0E F2 | 	cmp	local02, #17 wz
05908     53 00 00 FF 
0590c     E0 E5 85 F1 | 	sub	objptr, ##42976
05910     20 00 90 5D |  if_ne	jmp	#LR__0511
05914     56 00 00 FF 
05918     18 E4 05 F1 | 	add	objptr, ##44056
0591c     F2 20 02 FB | 	rdlong	local02, objptr
05920     01 20 06 F1 | 	add	local02, #1
05924     F2 20 62 FC | 	wrlong	local02, objptr
05928     56 00 00 FF 
0592c     18 E4 85 F1 | 	sub	objptr, ##44056
05930     A4 FF 9F FD | 	jmp	#LR__0510
05934                 | LR__0511
05934                 | LR__0512
05934                 | ' return i
05934     0F FB 01 F6 | 	mov	result1, local01
05938     A7 F0 03 F6 | 	mov	ptra, fp
0593c     B2 00 A0 FD | 	call	#popregs_
05940                 | _compile_fun_varp_ret
05940     2D 00 64 FD | 	ret
05944                 | 
05944                 | ' 
05944                 | ' 
05944                 | ' function compile_int_fun_2p() as ulong
05944                 | _compile_int_fun_2p
05944     01 4A 05 F6 | 	mov	COUNT_, #1
05948     A8 00 A0 FD | 	call	#pushregs_
0594c     80 FA BF FD | 	call	#_compile_converttoint
05950     FD 1E 02 F6 | 	mov	local01, result1
05954                 | ' err=compile_converttoint() : if err>0 then return err
05954     01 1E 56 F2 | 	cmps	local01, #1 wc
05958     0F FB 01 36 |  if_ae	mov	result1, local01
0595c     58 00 90 3D |  if_ae	jmp	#LR__0520
05960                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05960     56 00 00 FF 
05964     18 E4 05 F1 | 	add	objptr, ##44056
05968     F2 1E 02 FB | 	rdlong	local01, objptr
0596c     03 1E 66 F0 | 	shl	local01, #3
05970     02 00 00 FF 
05974     38 E4 85 F1 | 	sub	objptr, ##1080
05978     F2 1E 02 F1 | 	add	local01, objptr
0597c     04 1E 06 F1 | 	add	local01, #4
05980     0F 1F 02 FB | 	rdlong	local01, local01
05984     11 1E 0E F2 | 	cmp	local01, #17 wz
05988     53 00 00 FF 
0598c     E0 E5 85 F1 | 	sub	objptr, ##42976
05990     15 FA 05 56 |  if_ne	mov	result1, #21
05994     20 00 90 5D |  if_ne	jmp	#LR__0520
05998     56 00 00 FF 
0599c     18 E4 05 F1 | 	add	objptr, ##44056
059a0     F2 1E 02 FB | 	rdlong	local01, objptr
059a4     01 1E 06 F1 | 	add	local01, #1
059a8     F2 1E 62 FC | 	wrlong	local01, objptr
059ac     56 00 00 FF 
059b0     18 E4 85 F1 | 	sub	objptr, ##44056
059b4     18 FA BF FD | 	call	#_compile_converttoint
059b8                 | ' err=compile_converttoint() 
059b8                 | ' return err
059b8                 | LR__0520
059b8     A7 F0 03 F6 | 	mov	ptra, fp
059bc     B2 00 A0 FD | 	call	#popregs_
059c0                 | _compile_int_fun_2p_ret
059c0     2D 00 64 FD | 	ret
059c4                 | 
059c4                 | ' 
059c4                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
059c4                 | _compile_print
059c4     0B 4A 05 F6 | 	mov	COUNT_, #11
059c8     A8 00 A0 FD | 	call	#pushregs_
059cc     00 1E 06 F6 | 	mov	local01, #0
059d0     1D 22 06 F6 | 	mov	local03, #29
059d4                 | ' t1.result.uresult=0 : t1.result_type=result_uint
059d4                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
059d4     56 00 00 FF 
059d8     18 E4 05 F1 | 	add	objptr, ##44056
059dc     F2 24 02 FB | 	rdlong	local04, objptr
059e0     03 24 66 F0 | 	shl	local04, #3
059e4     02 00 00 FF 
059e8     38 E4 85 F1 | 	sub	objptr, ##1080
059ec     F2 24 02 F1 | 	add	local04, objptr
059f0     04 24 06 F1 | 	add	local04, #4
059f4     12 25 02 FB | 	rdlong	local04, local04
059f8     FE 25 0E F2 | 	cmp	local04, #510 wz
059fc     53 00 00 FF 
05a00     E0 E5 85 F1 | 	sub	objptr, ##42976
05a04     68 01 90 5D |  if_ne	jmp	#LR__0530
05a08     20 22 06 F6 | 	mov	local03, #32
05a0c     0F 27 02 F6 | 	mov	local05, local01
05a10     10 29 02 F6 | 	mov	local06, local02
05a14     11 2B 02 F6 | 	mov	local07, local03
05a18     69 00 00 FF 
05a1c     50 E4 05 F1 | 	add	objptr, ##53840
05a20     F2 2C 02 FB | 	rdlong	local08, objptr
05a24     16 2F 02 F6 | 	mov	local09, local08
05a28     01 2E 66 F0 | 	shl	local09, #1
05a2c     16 2F 02 F1 | 	add	local09, local08
05a30     02 2E 66 F0 | 	shl	local09, #2
05a34     03 00 00 FF 
05a38     00 E4 85 F1 | 	sub	objptr, ##1536
05a3c     F2 2E 02 F1 | 	add	local09, objptr
05a40     17 27 62 FC | 	wrlong	local05, local09
05a44     03 00 00 FF 
05a48     00 E4 05 F1 | 	add	objptr, ##1536
05a4c     F2 26 02 FB | 	rdlong	local05, objptr
05a50     13 31 02 F6 | 	mov	local10, local05
05a54     01 30 66 F0 | 	shl	local10, #1
05a58     13 31 02 F1 | 	add	local10, local05
05a5c     02 30 66 F0 | 	shl	local10, #2
05a60     03 00 00 FF 
05a64     00 E4 85 F1 | 	sub	objptr, ##1536
05a68     F2 30 02 F1 | 	add	local10, objptr
05a6c     04 30 06 F1 | 	add	local10, #4
05a70     18 29 62 FC | 	wrlong	local06, local10
05a74     03 00 00 FF 
05a78     00 E4 05 F1 | 	add	objptr, ##1536
05a7c     F2 26 02 FB | 	rdlong	local05, objptr
05a80     13 33 02 F6 | 	mov	local11, local05
05a84     01 32 66 F0 | 	shl	local11, #1
05a88     13 33 02 F1 | 	add	local11, local05
05a8c     02 32 66 F0 | 	shl	local11, #2
05a90     03 00 00 FF 
05a94     00 E4 85 F1 | 	sub	objptr, ##1536
05a98     F2 32 02 F1 | 	add	local11, objptr
05a9c     08 32 06 F1 | 	add	local11, #8
05aa0     19 2B 62 FC | 	wrlong	local07, local11
05aa4     03 00 00 FF 
05aa8     00 E4 05 F1 | 	add	objptr, ##1536
05aac     F2 26 02 FB | 	rdlong	local05, objptr
05ab0     01 26 06 F1 | 	add	local05, #1
05ab4     F2 26 62 FC | 	wrlong	local05, objptr
05ab8     44 22 06 F6 | 	mov	local03, #68
05abc     0F 27 02 F6 | 	mov	local05, local01
05ac0     10 29 02 F6 | 	mov	local06, local02
05ac4     11 2B 02 F6 | 	mov	local07, local03
05ac8     F2 2C 02 FB | 	rdlong	local08, objptr
05acc     16 2F 02 F6 | 	mov	local09, local08
05ad0     01 2E 66 F0 | 	shl	local09, #1
05ad4     16 2F 02 F1 | 	add	local09, local08
05ad8     02 2E 66 F0 | 	shl	local09, #2
05adc     03 00 00 FF 
05ae0     00 E4 85 F1 | 	sub	objptr, ##1536
05ae4     F2 2E 02 F1 | 	add	local09, objptr
05ae8     17 27 62 FC | 	wrlong	local05, local09
05aec     03 00 00 FF 
05af0     00 E4 05 F1 | 	add	objptr, ##1536
05af4     F2 32 02 FB | 	rdlong	local11, objptr
05af8     19 31 02 F6 | 	mov	local10, local11
05afc     01 30 66 F0 | 	shl	local10, #1
05b00     19 31 02 F1 | 	add	local10, local11
05b04     02 30 66 F0 | 	shl	local10, #2
05b08     03 00 00 FF 
05b0c     00 E4 85 F1 | 	sub	objptr, ##1536
05b10     F2 30 02 F1 | 	add	local10, objptr
05b14     04 30 06 F1 | 	add	local10, #4
05b18     18 29 62 FC | 	wrlong	local06, local10
05b1c     03 00 00 FF 
05b20     00 E4 05 F1 | 	add	objptr, ##1536
05b24     F2 30 02 FB | 	rdlong	local10, objptr
05b28     18 33 02 F6 | 	mov	local11, local10
05b2c     01 32 66 F0 | 	shl	local11, #1
05b30     18 33 02 F1 | 	add	local11, local10
05b34     02 32 66 F0 | 	shl	local11, #2
05b38     03 00 00 FF 
05b3c     00 E4 85 F1 | 	sub	objptr, ##1536
05b40     F2 32 02 F1 | 	add	local11, objptr
05b44     08 32 06 F1 | 	add	local11, #8
05b48     19 2B 62 FC | 	wrlong	local07, local11
05b4c     03 00 00 FF 
05b50     00 E4 05 F1 | 	add	objptr, ##1536
05b54     F2 26 02 FB | 	rdlong	local05, objptr
05b58     01 26 06 F1 | 	add	local05, #1
05b5c     F2 26 62 FC | 	wrlong	local05, objptr
05b60     69 00 00 FF 
05b64     50 E4 85 F1 | 	sub	objptr, ##53840
05b68     00 FA 05 F6 | 	mov	result1, #0
05b6c     20 05 90 FD | 	jmp	#LR__0537
05b70                 | LR__0530
05b70                 | ' do
05b70                 | LR__0531
05b70     68 1B B0 FD | 	call	#_expr
05b74                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
05b74                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05b74     56 00 00 FF 
05b78     18 E4 05 F1 | 	add	objptr, ##44056
05b7c     F2 24 02 FB | 	rdlong	local04, objptr
05b80     03 24 66 F0 | 	shl	local04, #3
05b84     02 00 00 FF 
05b88     38 E4 85 F1 | 	sub	objptr, ##1080
05b8c     F2 24 02 F1 | 	add	local04, objptr
05b90     04 24 06 F1 | 	add	local04, #4
05b94     12 2D 02 FB | 	rdlong	local08, local04
05b98     11 2C 0E F2 | 	cmp	local08, #17 wz
05b9c     53 00 00 FF 
05ba0     E0 E5 85 F1 | 	sub	objptr, ##42976
05ba4     60 01 90 5D |  if_ne	jmp	#LR__0532
05ba8     21 22 06 F6 | 	mov	local03, #33
05bac     0F 27 02 F6 | 	mov	local05, local01
05bb0     10 29 02 F6 | 	mov	local06, local02
05bb4     11 2B 02 F6 | 	mov	local07, local03
05bb8     69 00 00 FF 
05bbc     50 E4 05 F1 | 	add	objptr, ##53840
05bc0     F2 2C 02 FB | 	rdlong	local08, objptr
05bc4     16 2F 02 F6 | 	mov	local09, local08
05bc8     01 2E 66 F0 | 	shl	local09, #1
05bcc     16 2F 02 F1 | 	add	local09, local08
05bd0     02 2E 66 F0 | 	shl	local09, #2
05bd4     03 00 00 FF 
05bd8     00 E4 85 F1 | 	sub	objptr, ##1536
05bdc     F2 2E 02 F1 | 	add	local09, objptr
05be0     17 27 62 FC | 	wrlong	local05, local09
05be4     03 00 00 FF 
05be8     00 E4 05 F1 | 	add	objptr, ##1536
05bec     F2 32 02 FB | 	rdlong	local11, objptr
05bf0     19 31 02 F6 | 	mov	local10, local11
05bf4     01 30 66 F0 | 	shl	local10, #1
05bf8     19 31 02 F1 | 	add	local10, local11
05bfc     02 30 66 F0 | 	shl	local10, #2
05c00     03 00 00 FF 
05c04     00 E4 85 F1 | 	sub	objptr, ##1536
05c08     F2 30 02 F1 | 	add	local10, objptr
05c0c     04 30 06 F1 | 	add	local10, #4
05c10     18 29 62 FC | 	wrlong	local06, local10
05c14     03 00 00 FF 
05c18     00 E4 05 F1 | 	add	objptr, ##1536
05c1c     F2 26 02 FB | 	rdlong	local05, objptr
05c20     13 33 02 F6 | 	mov	local11, local05
05c24     01 32 66 F0 | 	shl	local11, #1
05c28     13 33 02 F1 | 	add	local11, local05
05c2c     02 32 66 F0 | 	shl	local11, #2
05c30     03 00 00 FF 
05c34     00 E4 85 F1 | 	sub	objptr, ##1536
05c38     F2 32 02 F1 | 	add	local11, objptr
05c3c     08 32 06 F1 | 	add	local11, #8
05c40     19 2B 62 FC | 	wrlong	local07, local11
05c44     03 00 00 FF 
05c48     00 E4 05 F1 | 	add	objptr, ##1536
05c4c     F2 26 02 FB | 	rdlong	local05, objptr
05c50     01 26 06 F1 | 	add	local05, #1
05c54     F2 26 62 FC | 	wrlong	local05, objptr
05c58     44 22 06 F6 | 	mov	local03, #68
05c5c     0F 27 02 F6 | 	mov	local05, local01
05c60     10 29 02 F6 | 	mov	local06, local02
05c64     11 2B 02 F6 | 	mov	local07, local03
05c68     F2 2C 02 FB | 	rdlong	local08, objptr
05c6c     16 2F 02 F6 | 	mov	local09, local08
05c70     01 2E 66 F0 | 	shl	local09, #1
05c74     16 2F 02 F1 | 	add	local09, local08
05c78     02 2E 66 F0 | 	shl	local09, #2
05c7c     03 00 00 FF 
05c80     00 E4 85 F1 | 	sub	objptr, ##1536
05c84     F2 2E 02 F1 | 	add	local09, objptr
05c88     17 27 62 FC | 	wrlong	local05, local09
05c8c     03 00 00 FF 
05c90     00 E4 05 F1 | 	add	objptr, ##1536
05c94     F2 32 02 FB | 	rdlong	local11, objptr
05c98     19 31 02 F6 | 	mov	local10, local11
05c9c     01 30 66 F0 | 	shl	local10, #1
05ca0     19 31 02 F1 | 	add	local10, local11
05ca4     02 30 66 F0 | 	shl	local10, #2
05ca8     03 00 00 FF 
05cac     00 E4 85 F1 | 	sub	objptr, ##1536
05cb0     F2 30 02 F1 | 	add	local10, objptr
05cb4     04 30 06 F1 | 	add	local10, #4
05cb8     18 29 62 FC | 	wrlong	local06, local10
05cbc     03 00 00 FF 
05cc0     00 E4 05 F1 | 	add	objptr, ##1536
05cc4     F2 30 02 FB | 	rdlong	local10, objptr
05cc8     18 33 02 F6 | 	mov	local11, local10
05ccc     01 32 66 F0 | 	shl	local11, #1
05cd0     18 33 02 F1 | 	add	local11, local10
05cd4     02 32 66 F0 | 	shl	local11, #2
05cd8     03 00 00 FF 
05cdc     00 E4 85 F1 | 	sub	objptr, ##1536
05ce0     F2 32 02 F1 | 	add	local11, objptr
05ce4     08 32 06 F1 | 	add	local11, #8
05ce8     19 2B 62 FC | 	wrlong	local07, local11
05cec     03 00 00 FF 
05cf0     00 E4 05 F1 | 	add	objptr, ##1536
05cf4     F2 26 02 FB | 	rdlong	local05, objptr
05cf8     01 26 06 F1 | 	add	local05, #1
05cfc     F2 26 62 FC | 	wrlong	local05, objptr
05d00     69 00 00 FF 
05d04     50 E4 85 F1 | 	sub	objptr, ##53840
05d08                 | LR__0532
05d08                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05d08     56 00 00 FF 
05d0c     18 E4 05 F1 | 	add	objptr, ##44056
05d10     F2 24 02 FB | 	rdlong	local04, objptr
05d14     03 24 66 F0 | 	shl	local04, #3
05d18     02 00 00 FF 
05d1c     38 E4 85 F1 | 	sub	objptr, ##1080
05d20     F2 24 02 F1 | 	add	local04, objptr
05d24     04 24 06 F1 | 	add	local04, #4
05d28     12 2D 02 FB | 	rdlong	local08, local04
05d2c     12 2C 0E F2 | 	cmp	local08, #18 wz
05d30     53 00 00 FF 
05d34     E0 E5 85 F1 | 	sub	objptr, ##42976
05d38     60 01 90 5D |  if_ne	jmp	#LR__0533
05d3c     22 22 06 F6 | 	mov	local03, #34
05d40     0F 27 02 F6 | 	mov	local05, local01
05d44     10 29 02 F6 | 	mov	local06, local02
05d48     11 2B 02 F6 | 	mov	local07, local03
05d4c     69 00 00 FF 
05d50     50 E4 05 F1 | 	add	objptr, ##53840
05d54     F2 2C 02 FB | 	rdlong	local08, objptr
05d58     16 2F 02 F6 | 	mov	local09, local08
05d5c     01 2E 66 F0 | 	shl	local09, #1
05d60     16 2F 02 F1 | 	add	local09, local08
05d64     02 2E 66 F0 | 	shl	local09, #2
05d68     03 00 00 FF 
05d6c     00 E4 85 F1 | 	sub	objptr, ##1536
05d70     F2 2E 02 F1 | 	add	local09, objptr
05d74     17 27 62 FC | 	wrlong	local05, local09
05d78     03 00 00 FF 
05d7c     00 E4 05 F1 | 	add	objptr, ##1536
05d80     F2 32 02 FB | 	rdlong	local11, objptr
05d84     19 31 02 F6 | 	mov	local10, local11
05d88     01 30 66 F0 | 	shl	local10, #1
05d8c     19 31 02 F1 | 	add	local10, local11
05d90     02 30 66 F0 | 	shl	local10, #2
05d94     03 00 00 FF 
05d98     00 E4 85 F1 | 	sub	objptr, ##1536
05d9c     F2 30 02 F1 | 	add	local10, objptr
05da0     04 30 06 F1 | 	add	local10, #4
05da4     18 29 62 FC | 	wrlong	local06, local10
05da8     03 00 00 FF 
05dac     00 E4 05 F1 | 	add	objptr, ##1536
05db0     F2 26 02 FB | 	rdlong	local05, objptr
05db4     13 33 02 F6 | 	mov	local11, local05
05db8     01 32 66 F0 | 	shl	local11, #1
05dbc     13 33 02 F1 | 	add	local11, local05
05dc0     02 32 66 F0 | 	shl	local11, #2
05dc4     03 00 00 FF 
05dc8     00 E4 85 F1 | 	sub	objptr, ##1536
05dcc     F2 32 02 F1 | 	add	local11, objptr
05dd0     08 32 06 F1 | 	add	local11, #8
05dd4     19 2B 62 FC | 	wrlong	local07, local11
05dd8     03 00 00 FF 
05ddc     00 E4 05 F1 | 	add	objptr, ##1536
05de0     F2 26 02 FB | 	rdlong	local05, objptr
05de4     01 26 06 F1 | 	add	local05, #1
05de8     F2 26 62 FC | 	wrlong	local05, objptr
05dec     44 22 06 F6 | 	mov	local03, #68
05df0     0F 27 02 F6 | 	mov	local05, local01
05df4     10 29 02 F6 | 	mov	local06, local02
05df8     11 2B 02 F6 | 	mov	local07, local03
05dfc     F2 2C 02 FB | 	rdlong	local08, objptr
05e00     16 2F 02 F6 | 	mov	local09, local08
05e04     01 2E 66 F0 | 	shl	local09, #1
05e08     16 2F 02 F1 | 	add	local09, local08
05e0c     02 2E 66 F0 | 	shl	local09, #2
05e10     03 00 00 FF 
05e14     00 E4 85 F1 | 	sub	objptr, ##1536
05e18     F2 2E 02 F1 | 	add	local09, objptr
05e1c     17 27 62 FC | 	wrlong	local05, local09
05e20     03 00 00 FF 
05e24     00 E4 05 F1 | 	add	objptr, ##1536
05e28     F2 32 02 FB | 	rdlong	local11, objptr
05e2c     19 31 02 F6 | 	mov	local10, local11
05e30     01 30 66 F0 | 	shl	local10, #1
05e34     19 31 02 F1 | 	add	local10, local11
05e38     02 30 66 F0 | 	shl	local10, #2
05e3c     03 00 00 FF 
05e40     00 E4 85 F1 | 	sub	objptr, ##1536
05e44     F2 30 02 F1 | 	add	local10, objptr
05e48     04 30 06 F1 | 	add	local10, #4
05e4c     18 29 62 FC | 	wrlong	local06, local10
05e50     03 00 00 FF 
05e54     00 E4 05 F1 | 	add	objptr, ##1536
05e58     F2 30 02 FB | 	rdlong	local10, objptr
05e5c     18 33 02 F6 | 	mov	local11, local10
05e60     01 32 66 F0 | 	shl	local11, #1
05e64     18 33 02 F1 | 	add	local11, local10
05e68     02 32 66 F0 | 	shl	local11, #2
05e6c     03 00 00 FF 
05e70     00 E4 85 F1 | 	sub	objptr, ##1536
05e74     F2 32 02 F1 | 	add	local11, objptr
05e78     08 32 06 F1 | 	add	local11, #8
05e7c     19 2B 62 FC | 	wrlong	local07, local11
05e80     03 00 00 FF 
05e84     00 E4 05 F1 | 	add	objptr, ##1536
05e88     F2 26 02 FB | 	rdlong	local05, objptr
05e8c     01 26 06 F1 | 	add	local05, #1
05e90     F2 26 62 FC | 	wrlong	local05, objptr
05e94     69 00 00 FF 
05e98     50 E4 85 F1 | 	sub	objptr, ##53840
05e9c                 | LR__0533
05e9c                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05e9c     56 00 00 FF 
05ea0     18 E4 05 F1 | 	add	objptr, ##44056
05ea4     F2 24 02 FB | 	rdlong	local04, objptr
05ea8     03 24 66 F0 | 	shl	local04, #3
05eac     02 00 00 FF 
05eb0     38 E4 85 F1 | 	sub	objptr, ##1080
05eb4     F2 24 02 F1 | 	add	local04, objptr
05eb8     04 24 06 F1 | 	add	local04, #4
05ebc     12 2D 02 FB | 	rdlong	local08, local04
05ec0     FE 2D 0E F2 | 	cmp	local08, #510 wz
05ec4     53 00 00 FF 
05ec8     E0 E5 85 F1 | 	sub	objptr, ##42976
05ecc     B8 00 90 5D |  if_ne	jmp	#LR__0534
05ed0     44 22 06 F6 | 	mov	local03, #68
05ed4     0F 27 02 F6 | 	mov	local05, local01
05ed8     10 29 02 F6 | 	mov	local06, local02
05edc     11 2B 02 F6 | 	mov	local07, local03
05ee0     69 00 00 FF 
05ee4     50 E4 05 F1 | 	add	objptr, ##53840
05ee8     F2 2C 02 FB | 	rdlong	local08, objptr
05eec     16 2F 02 F6 | 	mov	local09, local08
05ef0     01 2E 66 F0 | 	shl	local09, #1
05ef4     16 2F 02 F1 | 	add	local09, local08
05ef8     02 2E 66 F0 | 	shl	local09, #2
05efc     03 00 00 FF 
05f00     00 E4 85 F1 | 	sub	objptr, ##1536
05f04     F2 2E 02 F1 | 	add	local09, objptr
05f08     17 27 62 FC | 	wrlong	local05, local09
05f0c     03 00 00 FF 
05f10     00 E4 05 F1 | 	add	objptr, ##1536
05f14     F2 32 02 FB | 	rdlong	local11, objptr
05f18     19 31 02 F6 | 	mov	local10, local11
05f1c     01 30 66 F0 | 	shl	local10, #1
05f20     19 31 02 F1 | 	add	local10, local11
05f24     02 30 66 F0 | 	shl	local10, #2
05f28     03 00 00 FF 
05f2c     00 E4 85 F1 | 	sub	objptr, ##1536
05f30     F2 30 02 F1 | 	add	local10, objptr
05f34     04 30 06 F1 | 	add	local10, #4
05f38     18 29 62 FC | 	wrlong	local06, local10
05f3c     03 00 00 FF 
05f40     00 E4 05 F1 | 	add	objptr, ##1536
05f44     F2 30 02 FB | 	rdlong	local10, objptr
05f48     18 33 02 F6 | 	mov	local11, local10
05f4c     01 32 66 F0 | 	shl	local11, #1
05f50     18 33 02 F1 | 	add	local11, local10
05f54     02 32 66 F0 | 	shl	local11, #2
05f58     03 00 00 FF 
05f5c     00 E4 85 F1 | 	sub	objptr, ##1536
05f60     F2 32 02 F1 | 	add	local11, objptr
05f64     08 32 06 F1 | 	add	local11, #8
05f68     19 2B 62 FC | 	wrlong	local07, local11
05f6c     03 00 00 FF 
05f70     00 E4 05 F1 | 	add	objptr, ##1536
05f74     F2 26 02 FB | 	rdlong	local05, objptr
05f78     01 26 06 F1 | 	add	local05, #1
05f7c     F2 26 62 FC | 	wrlong	local05, objptr
05f80     69 00 00 FF 
05f84     50 E4 85 F1 | 	sub	objptr, ##53840
05f88                 | LR__0534
05f88                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
05f88     56 00 00 FF 
05f8c     18 E4 05 F1 | 	add	objptr, ##44056
05f90     F2 24 02 FB | 	rdlong	local04, objptr
05f94     03 24 66 F0 | 	shl	local04, #3
05f98     02 00 00 FF 
05f9c     38 E4 85 F1 | 	sub	objptr, ##1080
05fa0     F2 24 02 F1 | 	add	local04, objptr
05fa4     04 24 06 F1 | 	add	local04, #4
05fa8     12 2D 02 FB | 	rdlong	local08, local04
05fac     11 2C 0E F2 | 	cmp	local08, #17 wz
05fb0     53 00 00 FF 
05fb4     E0 E5 85 F1 | 	sub	objptr, ##42976
05fb8     6C 00 90 AD |  if_e	jmp	#LR__0535
05fbc     56 00 00 FF 
05fc0     18 E4 05 F1 | 	add	objptr, ##44056
05fc4     F2 2C 02 FB | 	rdlong	local08, objptr
05fc8     03 2C 66 F0 | 	shl	local08, #3
05fcc     02 00 00 FF 
05fd0     38 E4 85 F1 | 	sub	objptr, ##1080
05fd4     F2 2C 02 F1 | 	add	local08, objptr
05fd8     04 2C 06 F1 | 	add	local08, #4
05fdc     16 2D 02 FB | 	rdlong	local08, local08
05fe0     12 2C 0E F2 | 	cmp	local08, #18 wz
05fe4     53 00 00 FF 
05fe8     E0 E5 85 F1 | 	sub	objptr, ##42976
05fec     38 00 90 AD |  if_e	jmp	#LR__0535
05ff0     56 00 00 FF 
05ff4     18 E4 05 F1 | 	add	objptr, ##44056
05ff8     F2 32 02 FB | 	rdlong	local11, objptr
05ffc     03 32 66 F0 | 	shl	local11, #3
06000     02 00 00 FF 
06004     38 E4 85 F1 | 	sub	objptr, ##1080
06008     F2 32 02 F1 | 	add	local11, objptr
0600c     04 32 06 F1 | 	add	local11, #4
06010     19 33 02 FB | 	rdlong	local11, local11
06014     FE 33 0E F2 | 	cmp	local11, #510 wz
06018     53 00 00 FF 
0601c     E0 E5 85 F1 | 	sub	objptr, ##42976
06020     16 FA 05 56 |  if_ne	mov	result1, #22
06024     68 00 90 5D |  if_ne	jmp	#LR__0537
06028                 | LR__0535
06028     56 00 00 FF 
0602c     18 E4 05 F1 | 	add	objptr, ##44056
06030     F2 24 02 FB | 	rdlong	local04, objptr
06034     01 24 06 F1 | 	add	local04, #1
06038     F2 24 62 FC | 	wrlong	local04, objptr
0603c     03 24 66 F0 | 	shl	local04, #3
06040     02 00 00 FF 
06044     38 E4 85 F1 | 	sub	objptr, ##1080
06048     F2 24 02 F1 | 	add	local04, objptr
0604c     04 24 06 F1 | 	add	local04, #4
06050     12 2D 02 FB | 	rdlong	local08, local04
06054     FE 2D 0E F2 | 	cmp	local08, #510 wz
06058     53 00 00 FF 
0605c     E0 E5 85 F1 | 	sub	objptr, ##42976
06060     28 00 90 AD |  if_e	jmp	#LR__0536
06064     56 00 00 FF 
06068     18 E4 05 F1 | 	add	objptr, ##44056
0606c     F2 32 02 FB | 	rdlong	local11, objptr
06070     0E 00 00 FF 
06074     1C E4 05 F1 | 	add	objptr, ##7196
06078     F2 30 02 FB | 	rdlong	local10, objptr
0607c     64 00 00 FF 
06080     34 E4 85 F1 | 	sub	objptr, ##51252
06084     18 33 52 F2 | 	cmps	local11, local10 wc
06088     E4 FA 9F CD |  if_b	jmp	#LR__0531
0608c                 | LR__0536
0608c                 | ' return 0
0608c     00 FA 05 F6 | 	mov	result1, #0
06090                 | LR__0537
06090     A7 F0 03 F6 | 	mov	ptra, fp
06094     B2 00 A0 FD | 	call	#popregs_
06098                 | _compile_print_ret
06098     2D 00 64 FD | 	ret
0609c                 | 
0609c                 | ' 
0609c                 | ' function compile_if() as ulong  
0609c                 | _compile_if
0609c     05 4A 05 F6 | 	mov	COUNT_, #5
060a0     A8 00 A0 FD | 	call	#pushregs_
060a4                 | _compile_if_enter
060a4     28 F3 BF FD | 	call	#_compile_converttoint
060a8                 | ' return err
060a8     56 00 00 FF 
060ac     18 E4 05 F1 | 	add	objptr, ##44056
060b0     F2 FA 01 FB | 	rdlong	result1, objptr
060b4     01 FA 05 F1 | 	add	result1, #1
060b8     F2 FA 61 FC | 	wrlong	result1, objptr
060bc     58 22 06 F6 | 	mov	local03, #88
060c0     0F 25 02 F6 | 	mov	local04, local01
060c4     10 27 02 F6 | 	mov	local05, local02
060c8     11 1F 02 F6 | 	mov	local01, local03
060cc     13 00 00 FF 
060d0     38 E4 05 F1 | 	add	objptr, ##9784
060d4     F2 12 02 FB | 	rdlong	arg01, objptr
060d8     09 FB 01 F6 | 	mov	result1, arg01
060dc     01 FA 65 F0 | 	shl	result1, #1
060e0     09 FB 01 F1 | 	add	result1, arg01
060e4     02 FA 65 F0 | 	shl	result1, #2
060e8     03 00 00 FF 
060ec     00 E4 85 F1 | 	sub	objptr, ##1536
060f0     F2 FA 01 F1 | 	add	result1, objptr
060f4     FD 24 62 FC | 	wrlong	local04, result1
060f8     03 00 00 FF 
060fc     00 E4 05 F1 | 	add	objptr, ##1536
06100     F2 12 02 FB | 	rdlong	arg01, objptr
06104     09 25 02 F6 | 	mov	local04, arg01
06108     01 24 66 F0 | 	shl	local04, #1
0610c     09 25 02 F1 | 	add	local04, arg01
06110     02 24 66 F0 | 	shl	local04, #2
06114     03 00 00 FF 
06118     00 E4 85 F1 | 	sub	objptr, ##1536
0611c     F2 24 02 F1 | 	add	local04, objptr
06120     04 24 06 F1 | 	add	local04, #4
06124     12 27 62 FC | 	wrlong	local05, local04
06128     03 00 00 FF 
0612c     00 E4 05 F1 | 	add	objptr, ##1536
06130     F2 24 02 FB | 	rdlong	local04, objptr
06134     12 27 02 F6 | 	mov	local05, local04
06138     01 26 66 F0 | 	shl	local05, #1
0613c     12 27 02 F1 | 	add	local05, local04
06140     02 26 66 F0 | 	shl	local05, #2
06144     03 00 00 FF 
06148     00 E4 85 F1 | 	sub	objptr, ##1536
0614c     F2 26 02 F1 | 	add	local05, objptr
06150     08 26 06 F1 | 	add	local05, #8
06154     13 1F 62 FC | 	wrlong	local01, local05
06158     03 00 00 FF 
0615c     00 E4 05 F1 | 	add	objptr, ##1536
06160     F2 24 02 FB | 	rdlong	local04, objptr
06164     01 24 06 F1 | 	add	local04, #1
06168     F2 24 62 FC | 	wrlong	local04, objptr
0616c                 | ' 
0616c                 | ' 'print "In compile_if"
0616c                 | ' compile_int_fun_1p()
0616c                 | ' cmd=lparts(ct).token : ct+=1
0616c                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
0616c                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
0616c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
0616c     13 00 00 FF 
06170     38 E4 85 F1 | 	sub	objptr, ##9784
06174     F2 26 02 FB | 	rdlong	local05, objptr
06178     01 26 06 F1 | 	add	local05, #1
0617c     03 26 66 F0 | 	shl	local05, #3
06180     02 00 00 FF 
06184     38 E4 85 F1 | 	sub	objptr, ##1080
06188     F2 26 02 F1 | 	add	local05, objptr
0618c     13 13 02 FB | 	rdlong	arg01, local05
06190     53 00 00 FF 
06194     E0 E5 85 F1 | 	sub	objptr, ##42976
06198                 | ' 
06198                 | ' select case s
06198     35 01 00 FF 
0619c     32 14 06 F6 | 	mov	arg02, ##@LR__4256
061a0     DC 16 B1 FD | 	call	#__system___string_cmp
061a4     00 FA 0D F2 | 	cmp	result1, #0 wz
061a8     1B FA 05 A6 |  if_e	mov	result1, #27
061ac     00 FA 05 56 |  if_ne	mov	result1, #0
061b0     00 FA 0D F2 | 	cmp	result1, #0 wz
061b4     0C 00 90 AD |  if_e	jmp	#LR__0540
061b8     05 12 06 F6 | 	mov	arg01, #5
061bc     20 EC BF FD | 	call	#_compile_immediate_assign
061c0     08 00 90 FD | 	jmp	#LR__0541
061c4                 | LR__0540
061c4     05 12 06 F6 | 	mov	arg01, #5
061c8     8C E4 BF FD | 	call	#_compile_immediate
061cc                 | LR__0541
061cc                 | ' 
061cc                 | ' 
061cc                 | ' return 0
061cc     00 FA 05 F6 | 	mov	result1, #0
061d0     A7 F0 03 F6 | 	mov	ptra, fp
061d4     B2 00 A0 FD | 	call	#popregs_
061d8                 | _compile_if_ret
061d8     2D 00 64 FD | 	ret
061dc                 | 
061dc                 | ' 
061dc                 | ' function compile_else() as ulong  
061dc                 | _compile_else
061dc     05 4A 05 F6 | 	mov	COUNT_, #5
061e0     A8 00 A0 FD | 	call	#pushregs_
061e4                 | _compile_else_enter
061e4     5A 22 06 F6 | 	mov	local03, #90
061e8     0F 25 02 F6 | 	mov	local04, local01
061ec     10 27 02 F6 | 	mov	local05, local02
061f0     11 1F 02 F6 | 	mov	local01, local03
061f4     69 00 00 FF 
061f8     50 E4 05 F1 | 	add	objptr, ##53840
061fc     F2 12 02 FB | 	rdlong	arg01, objptr
06200     09 FB 01 F6 | 	mov	result1, arg01
06204     01 FA 65 F0 | 	shl	result1, #1
06208     09 FB 01 F1 | 	add	result1, arg01
0620c     02 FA 65 F0 | 	shl	result1, #2
06210     03 00 00 FF 
06214     00 E4 85 F1 | 	sub	objptr, ##1536
06218     F2 FA 01 F1 | 	add	result1, objptr
0621c     FD 24 62 FC | 	wrlong	local04, result1
06220     03 00 00 FF 
06224     00 E4 05 F1 | 	add	objptr, ##1536
06228     F2 FA 01 FB | 	rdlong	result1, objptr
0622c     FD 24 02 F6 | 	mov	local04, result1
06230     01 24 66 F0 | 	shl	local04, #1
06234     FD 24 02 F1 | 	add	local04, result1
06238     02 24 66 F0 | 	shl	local04, #2
0623c     03 00 00 FF 
06240     00 E4 85 F1 | 	sub	objptr, ##1536
06244     F2 24 02 F1 | 	add	local04, objptr
06248     04 24 06 F1 | 	add	local04, #4
0624c     12 27 62 FC | 	wrlong	local05, local04
06250     03 00 00 FF 
06254     00 E4 05 F1 | 	add	objptr, ##1536
06258     F2 24 02 FB | 	rdlong	local04, objptr
0625c     12 27 02 F6 | 	mov	local05, local04
06260     01 26 66 F0 | 	shl	local05, #1
06264     12 27 02 F1 | 	add	local05, local04
06268     02 26 66 F0 | 	shl	local05, #2
0626c     03 00 00 FF 
06270     00 E4 85 F1 | 	sub	objptr, ##1536
06274     F2 26 02 F1 | 	add	local05, objptr
06278     08 26 06 F1 | 	add	local05, #8
0627c     13 1F 62 FC | 	wrlong	local01, local05
06280     03 00 00 FF 
06284     00 E4 05 F1 | 	add	objptr, ##1536
06288     F2 24 02 FB | 	rdlong	local04, objptr
0628c     01 24 06 F1 | 	add	local04, #1
06290     F2 24 62 FC | 	wrlong	local04, objptr
06294                 | ' 
06294                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
06294                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06294     13 00 00 FF 
06298     38 E4 85 F1 | 	sub	objptr, ##9784
0629c     F2 26 02 FB | 	rdlong	local05, objptr
062a0     01 26 06 F1 | 	add	local05, #1
062a4     03 26 66 F0 | 	shl	local05, #3
062a8     02 00 00 FF 
062ac     38 E4 85 F1 | 	sub	objptr, ##1080
062b0     F2 26 02 F1 | 	add	local05, objptr
062b4     13 13 02 FB | 	rdlong	arg01, local05
062b8     53 00 00 FF 
062bc     E0 E5 85 F1 | 	sub	objptr, ##42976
062c0                 | ' 
062c0                 | ' select case s
062c0     35 01 00 FF 
062c4     32 14 06 F6 | 	mov	arg02, ##@LR__4256
062c8     B4 15 B1 FD | 	call	#__system___string_cmp
062cc     00 FA 0D F2 | 	cmp	result1, #0 wz
062d0     1B FA 05 A6 |  if_e	mov	result1, #27
062d4     00 FA 05 56 |  if_ne	mov	result1, #0
062d8     00 FA 0D F2 | 	cmp	result1, #0 wz
062dc     0C 00 90 AD |  if_e	jmp	#LR__0550
062e0     05 12 06 F6 | 	mov	arg01, #5
062e4     F8 EA BF FD | 	call	#_compile_immediate_assign
062e8     08 00 90 FD | 	jmp	#LR__0551
062ec                 | LR__0550
062ec     05 12 06 F6 | 	mov	arg01, #5
062f0     64 E3 BF FD | 	call	#_compile_immediate
062f4                 | LR__0551
062f4                 | ' 
062f4                 | ' 
062f4                 | ' return 0
062f4     00 FA 05 F6 | 	mov	result1, #0
062f8     A7 F0 03 F6 | 	mov	ptra, fp
062fc     B2 00 A0 FD | 	call	#popregs_
06300                 | _compile_else_ret
06300     2D 00 64 FD | 	ret
06304                 | 
06304                 | ' 
06304                 | ' 
06304                 | ' function compile_dim() as ulong  
06304                 | _compile_dim
06304     11 4A 05 F6 | 	mov	COUNT_, #17
06308     A8 00 A0 FD | 	call	#pushregs_
0630c     01 1E 06 F6 | 	mov	local01, #1
06310     01 20 06 F6 | 	mov	local02, #1
06314     01 22 06 F6 | 	mov	local03, #1
06318                 | ' 
06318                 | ' dims(0)=1: dims(1)=1: dims(2)=1
06318                 | ' 
06318                 | ' if isname(lparts(ct).part$) then 
06318     56 00 00 FF 
0631c     18 E4 05 F1 | 	add	objptr, ##44056
06320     F2 14 02 FB | 	rdlong	arg02, objptr
06324     03 14 66 F0 | 	shl	arg02, #3
06328     02 00 00 FF 
0632c     38 E4 85 F1 | 	sub	objptr, ##1080
06330     F2 14 02 F1 | 	add	arg02, objptr
06334     0A 13 02 FB | 	rdlong	arg01, arg02
06338     53 00 00 FF 
0633c     E0 E5 85 F1 | 	sub	objptr, ##42976
06340     F8 D2 BF FD | 	call	#_isname
06344     00 FA 0D F2 | 	cmp	result1, #0 wz
06348     30 05 90 AD |  if_e	jmp	#LR__0584
0634c     56 00 00 FF 
06350     18 E4 05 F1 | 	add	objptr, ##44056
06354     F2 24 02 FB | 	rdlong	local04, objptr
06358     03 24 66 F0 | 	shl	local04, #3
0635c     02 00 00 FF 
06360     38 E4 85 F1 | 	sub	objptr, ##1080
06364     F2 24 02 F1 | 	add	local04, objptr
06368     12 27 02 FB | 	rdlong	local05, local04
0636c     01 28 66 F6 | 	neg	local06, #1
06370                 | '   varname2$=lparts(ct).part$ 
06370                 | '   j=-1
06370                 | '   if varnum>0 then
06370     04 E4 85 F1 | 	sub	objptr, #4
06374     F2 2A 02 FB | 	rdlong	local07, objptr
06378     53 00 00 FF 
0637c     DC E5 85 F1 | 	sub	objptr, ##42972
06380     01 2A 56 F2 | 	cmps	local07, #1 wc
06384     58 00 90 CD |  if_b	jmp	#LR__0562
06388                 | '  '   print "in dim, varnum=";varnum
06388                 | '     for i=0 to varnum-1
06388     00 2C 06 F6 | 	mov	local08, #0
0638c     53 00 00 FF 
06390     DC E5 05 F1 | 	add	objptr, ##42972
06394     F2 2E 02 FB | 	rdlong	local09, objptr
06398     53 00 00 FF 
0639c     DC E5 85 F1 | 	sub	objptr, ##42972
063a0                 | LR__0560
063a0     17 2D 52 F2 | 	cmps	local08, local09 wc
063a4     38 00 90 3D |  if_ae	jmp	#LR__0561
063a8                 | '       if variables(i).name=varname2$ then j=i : exit
063a8     16 25 02 F6 | 	mov	local04, local08
063ac     04 24 66 F0 | 	shl	local04, #4
063b0     33 00 00 FF 
063b4     DC E5 05 F1 | 	add	objptr, ##26588
063b8     F2 24 02 F1 | 	add	local04, objptr
063bc     12 13 02 FB | 	rdlong	arg01, local04
063c0     13 15 02 F6 | 	mov	arg02, local05
063c4     33 00 00 FF 
063c8     DC E5 85 F1 | 	sub	objptr, ##26588
063cc     B0 14 B1 FD | 	call	#__system___string_cmp
063d0     00 FA 0D F2 | 	cmp	result1, #0 wz
063d4     16 29 02 A6 |  if_e	mov	local06, local08
063d8     01 2C 06 51 |  if_ne	add	local08, #1
063dc     C0 FF 9F 5D |  if_ne	jmp	#LR__0560
063e0                 | LR__0561
063e0                 | LR__0562
063e0                 | '   if j<>-1 then printerror (42) : return 42
063e0     FF FF 7F FF 
063e4     FF 29 0E F2 | 	cmp	local06, ##-1 wz
063e8     10 00 90 AD |  if_e	jmp	#LR__0563
063ec     2A 12 06 F6 | 	mov	arg01, #42
063f0     40 DF B0 FD | 	call	#_printerror
063f4     2A FA 05 F6 | 	mov	result1, #42
063f8     D8 05 90 FD | 	jmp	#LR__0586
063fc                 | LR__0563
063fc                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
063fc     56 00 00 FF 
06400     18 E4 05 F1 | 	add	objptr, ##44056
06404     F2 14 02 FB | 	rdlong	arg02, objptr
06408     01 14 06 F1 | 	add	arg02, #1
0640c     03 14 66 F0 | 	shl	arg02, #3
06410     02 00 00 FF 
06414     38 E4 85 F1 | 	sub	objptr, ##1080
06418     F2 14 02 F1 | 	add	arg02, objptr
0641c     0A 13 02 FB | 	rdlong	arg01, arg02
06420     36 01 00 FF 
06424     1D 14 06 F6 | 	mov	arg02, ##@LR__4370
06428     53 00 00 FF 
0642c     E0 E5 85 F1 | 	sub	objptr, ##42976
06430     4C 14 B1 FD | 	call	#__system___string_cmp
06434     00 FA 0D F2 | 	cmp	result1, #0 wz
06438     50 00 90 AD |  if_e	jmp	#LR__0564
0643c     56 00 00 FF 
06440     18 E4 05 F1 | 	add	objptr, ##44056
06444     F2 2E 02 FB | 	rdlong	local09, objptr
06448     01 2E 06 F1 | 	add	local09, #1
0644c     03 2E 66 F0 | 	shl	local09, #3
06450     02 00 00 FF 
06454     38 E4 85 F1 | 	sub	objptr, ##1080
06458     F2 2E 02 F1 | 	add	local09, objptr
0645c     17 13 02 FB | 	rdlong	arg01, local09
06460     36 01 00 FF 
06464     1F 14 06 F6 | 	mov	arg02, ##@LR__4371
06468     53 00 00 FF 
0646c     E0 E5 85 F1 | 	sub	objptr, ##42976
06470     0C 14 B1 FD | 	call	#__system___string_cmp
06474     00 FA 0D F2 | 	cmp	result1, #0 wz
06478     10 00 90 AD |  if_e	jmp	#LR__0564
0647c     2B 12 06 F6 | 	mov	arg01, #43
06480     B0 DE B0 FD | 	call	#_printerror
06484     2B FA 05 F6 | 	mov	result1, #43
06488     48 05 90 FD | 	jmp	#LR__0586
0648c                 | LR__0564
0648c                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
0648c     56 00 00 FF 
06490     18 E4 05 F1 | 	add	objptr, ##44056
06494     F2 14 02 FB | 	rdlong	arg02, objptr
06498     01 14 06 F1 | 	add	arg02, #1
0649c     03 14 66 F0 | 	shl	arg02, #3
064a0     02 00 00 FF 
064a4     38 E4 85 F1 | 	sub	objptr, ##1080
064a8     F2 14 02 F1 | 	add	arg02, objptr
064ac     0A 13 02 FB | 	rdlong	arg01, arg02
064b0     36 01 00 FF 
064b4     22 14 06 F6 | 	mov	arg02, ##@LR__4372
064b8     53 00 00 FF 
064bc     E0 E5 85 F1 | 	sub	objptr, ##42976
064c0     BC 13 B1 FD | 	call	#__system___string_cmp
064c4     00 FA 0D F2 | 	cmp	result1, #0 wz
064c8     56 00 00 AF 
064cc     18 E4 05 A1 |  if_e	add	objptr, ##44056
064d0     F2 30 02 AB |  if_e	rdlong	local10, objptr
064d4     56 00 00 AF 
064d8     18 E4 85 A1 |  if_e	sub	objptr, ##44056
064dc     01 30 06 A1 |  if_e	add	local10, #1
064e0     7C 01 90 AD |  if_e	jmp	#LR__0570
064e4     56 00 00 FF 
064e8     18 E4 05 F1 | 	add	objptr, ##44056
064ec     F2 30 02 FB | 	rdlong	local10, objptr
064f0     56 00 00 FF 
064f4     18 E4 85 F1 | 	sub	objptr, ##44056
064f8     02 30 06 F1 | 	add	local10, #2
064fc     00 32 06 F6 | 	mov	local11, #0
06500                 | '   l=ct+2 : m=0 : do
06500                 | LR__0565
06500                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
06500                 | '     if isdec(lparts(l).part$) then 
06500     18 25 02 F6 | 	mov	local04, local10
06504     03 24 66 F0 | 	shl	local04, #3
06508     53 00 00 FF 
0650c     E0 E5 05 F1 | 	add	objptr, ##42976
06510     F2 24 02 F1 | 	add	local04, objptr
06514     12 13 02 FB | 	rdlong	arg01, local04
06518     53 00 00 FF 
0651c     E0 E5 85 F1 | 	sub	objptr, ##42976
06520     BC D7 BF FD | 	call	#_isdec
06524     00 FA 0D F2 | 	cmp	result1, #0 wz
06528     44 00 90 AD |  if_e	jmp	#LR__0566
0652c     19 35 02 F6 | 	mov	local12, local11
06530     0F 35 06 F1 | 	add	local12, #local01
06534     18 2F 02 F6 | 	mov	local09, local10
06538     03 2E 66 F0 | 	shl	local09, #3
0653c     53 00 00 FF 
06540     E0 E5 05 F1 | 	add	objptr, ##42976
06544     F2 2E 02 F1 | 	add	local09, objptr
06548     17 13 02 FB | 	rdlong	arg01, local09
0654c     00 14 06 F6 | 	mov	arg02, #0
06550     53 00 00 FF 
06554     E0 E5 85 F1 | 	sub	objptr, ##42976
06558     84 42 B1 FD | 	call	#__system____builtin_atoi
0655c     FD 36 02 F6 | 	mov	local13, result1
06560                 | 	'.live	local13
06560                 | 	'.live	local12
06560     00 34 8E F9 | 	altd	local12, #0
06564     1B 35 02 F6 | 	mov	local12, local13
06568     01 32 06 F1 | 	add	local11, #1
0656c     10 00 90 FD | 	jmp	#LR__0567
06570                 | LR__0566
06570     11 12 06 F6 | 	mov	arg01, #17
06574     BC DD B0 FD | 	call	#_printerror
06578                 | '       printerror (17)  : return(17)
06578     11 FA 05 F6 | 	mov	result1, #17
0657c     54 04 90 FD | 	jmp	#LR__0586
06580                 | LR__0567
06580                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
06580     18 25 02 F6 | 	mov	local04, local10
06584     01 24 06 F1 | 	add	local04, #1
06588     03 24 66 F0 | 	shl	local04, #3
0658c     53 00 00 FF 
06590     E0 E5 05 F1 | 	add	objptr, ##42976
06594     F2 24 02 F1 | 	add	local04, objptr
06598     12 13 02 FB | 	rdlong	arg01, local04
0659c     36 01 00 FF 
065a0     25 14 06 F6 | 	mov	arg02, ##@LR__4373
065a4     53 00 00 FF 
065a8     E0 E5 85 F1 | 	sub	objptr, ##42976
065ac     D0 12 B1 FD | 	call	#__system___string_cmp
065b0     00 FA 0D F2 | 	cmp	result1, #0 wz
065b4     48 00 90 AD |  if_e	jmp	#LR__0568
065b8     18 37 02 F6 | 	mov	local13, local10
065bc     01 36 06 F1 | 	add	local13, #1
065c0     03 36 66 F0 | 	shl	local13, #3
065c4     53 00 00 FF 
065c8     E0 E5 05 F1 | 	add	objptr, ##42976
065cc     F2 36 02 F1 | 	add	local13, objptr
065d0     1B 13 02 FB | 	rdlong	arg01, local13
065d4     36 01 00 FF 
065d8     27 14 06 F6 | 	mov	arg02, ##@LR__4374
065dc     53 00 00 FF 
065e0     E0 E5 85 F1 | 	sub	objptr, ##42976
065e4     98 12 B1 FD | 	call	#__system___string_cmp
065e8     00 FA 0D F2 | 	cmp	result1, #0 wz
065ec     10 00 90 AD |  if_e	jmp	#LR__0568
065f0     2C 12 06 F6 | 	mov	arg01, #44
065f4     3C DD B0 FD | 	call	#_printerror
065f8     2C FA 05 F6 | 	mov	result1, #44
065fc     D4 03 90 FD | 	jmp	#LR__0586
06600                 | LR__0568
06600     02 30 06 F1 | 	add	local10, #2
06604     18 25 02 F6 | 	mov	local04, local10
06608     01 24 86 F1 | 	sub	local04, #1
0660c     03 24 66 F0 | 	shl	local04, #3
06610     53 00 00 FF 
06614     E0 E5 05 F1 | 	add	objptr, ##42976
06618     F2 24 02 F1 | 	add	local04, objptr
0661c     12 13 02 FB | 	rdlong	arg01, local04
06620     36 01 00 FF 
06624     29 14 06 F6 | 	mov	arg02, ##@LR__4375
06628     53 00 00 FF 
0662c     E0 E5 85 F1 | 	sub	objptr, ##42976
06630     4C 12 B1 FD | 	call	#__system___string_cmp
06634     00 FA 0D F2 | 	cmp	result1, #0 wz
06638     03 32 56 52 |  if_ne	cmps	local11, #3 wc
0663c     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0565
06640                 | '   if m>3 then printerror(45): return(45)
06640     04 32 56 F2 | 	cmps	local11, #4 wc
06644     10 00 90 CD |  if_b	jmp	#LR__0569
06648     2D 12 06 F6 | 	mov	arg01, #45
0664c     E4 DC B0 FD | 	call	#_printerror
06650     2D FA 05 F6 | 	mov	result1, #45
06654     7C 03 90 FD | 	jmp	#LR__0586
06658                 | LR__0569
06658     00 39 06 F6 | 	mov	local14, #256
0665c     0C 3A 06 F6 | 	mov	local15, #12
06660                 | LR__0570
06660                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
06660                 | '   arraytype=array_no_type : esize=12
06660                 | ' 1350 
06660                 | '   if lparts(l).part$="as" then
06660     18 25 02 F6 | 	mov	local04, local10
06664     03 24 66 F0 | 	shl	local04, #3
06668     53 00 00 FF 
0666c     E0 E5 05 F1 | 	add	objptr, ##42976
06670     F2 24 02 F1 | 	add	local04, objptr
06674     12 13 02 FB | 	rdlong	arg01, local04
06678     36 01 00 FF 
0667c     2B 14 06 F6 | 	mov	arg02, ##@LR__4376
06680     53 00 00 FF 
06684     E0 E5 85 F1 | 	sub	objptr, ##42976
06688     F4 11 B1 FD | 	call	#__system___string_cmp
0668c     00 FA 0D F2 | 	cmp	result1, #0 wz
06690     F8 01 90 5D |  if_ne	jmp	#LR__0585
06694                 | '     select case lparts(l+1).part$
06694     18 35 02 F6 | 	mov	local12, local10
06698     01 34 06 F1 | 	add	local12, #1
0669c     03 34 66 F0 | 	shl	local12, #3
066a0     53 00 00 FF 
066a4     E0 E5 05 F1 | 	add	objptr, ##42976
066a8     F2 34 02 F1 | 	add	local12, objptr
066ac     1A 3D 02 FB | 	rdlong	local16, local12
066b0     36 01 00 FF 
066b4     2E 14 06 F6 | 	mov	arg02, ##@LR__4377
066b8     1E 13 02 F6 | 	mov	arg01, local16
066bc     53 00 00 FF 
066c0     E0 E5 85 F1 | 	sub	objptr, ##42976
066c4     B8 11 B1 FD | 	call	#__system___string_cmp
066c8     00 FA 0D F2 | 	cmp	result1, #0 wz
066cc     0C 01 90 AD |  if_e	jmp	#LR__0571
066d0     36 01 00 FF 
066d4     33 14 06 F6 | 	mov	arg02, ##@LR__4378
066d8     1E 13 02 F6 | 	mov	arg01, local16
066dc     A0 11 B1 FD | 	call	#__system___string_cmp
066e0     00 FA 0D F2 | 	cmp	result1, #0 wz
066e4     00 01 90 AD |  if_e	jmp	#LR__0572
066e8     36 01 00 FF 
066ec     39 14 06 F6 | 	mov	arg02, ##@LR__4379
066f0     1E 13 02 F6 | 	mov	arg01, local16
066f4     88 11 B1 FD | 	call	#__system___string_cmp
066f8     00 FA 0D F2 | 	cmp	result1, #0 wz
066fc     F4 00 90 AD |  if_e	jmp	#LR__0573
06700     36 01 00 FF 
06704     3F 14 06 F6 | 	mov	arg02, ##@LR__4380
06708     1E 13 02 F6 | 	mov	arg01, local16
0670c     70 11 B1 FD | 	call	#__system___string_cmp
06710     00 FA 0D F2 | 	cmp	result1, #0 wz
06714     E8 00 90 AD |  if_e	jmp	#LR__0574
06718     36 01 00 FF 
0671c     46 14 06 F6 | 	mov	arg02, ##@LR__4381
06720     1E 13 02 F6 | 	mov	arg01, local16
06724     58 11 B1 FD | 	call	#__system___string_cmp
06728     00 FA 0D F2 | 	cmp	result1, #0 wz
0672c     DC 00 90 AD |  if_e	jmp	#LR__0575
06730     36 01 00 FF 
06734     4B 14 06 F6 | 	mov	arg02, ##@LR__4382
06738     1E 13 02 F6 | 	mov	arg01, local16
0673c     40 11 B1 FD | 	call	#__system___string_cmp
06740     00 FA 0D F2 | 	cmp	result1, #0 wz
06744     D0 00 90 AD |  if_e	jmp	#LR__0576
06748     36 01 00 FF 
0674c     53 14 06 F6 | 	mov	arg02, ##@LR__4383
06750     1E 13 02 F6 | 	mov	arg01, local16
06754     28 11 B1 FD | 	call	#__system___string_cmp
06758     00 FA 0D F2 | 	cmp	result1, #0 wz
0675c     C4 00 90 AD |  if_e	jmp	#LR__0577
06760     36 01 00 FF 
06764     59 14 06 F6 | 	mov	arg02, ##@LR__4384
06768     1E 13 02 F6 | 	mov	arg01, local16
0676c     10 11 B1 FD | 	call	#__system___string_cmp
06770     00 FA 0D F2 | 	cmp	result1, #0 wz
06774     B8 00 90 AD |  if_e	jmp	#LR__0578
06778     36 01 00 FF 
0677c     5F 14 06 F6 | 	mov	arg02, ##@LR__4385
06780     1E 13 02 F6 | 	mov	arg01, local16
06784     F8 10 B1 FD | 	call	#__system___string_cmp
06788     00 FA 0D F2 | 	cmp	result1, #0 wz
0678c     AC 00 90 AD |  if_e	jmp	#LR__0579
06790     36 01 00 FF 
06794     66 14 06 F6 | 	mov	arg02, ##@LR__4386
06798     1E 13 02 F6 | 	mov	arg01, local16
0679c     E0 10 B1 FD | 	call	#__system___string_cmp
067a0     00 FA 0D F2 | 	cmp	result1, #0 wz
067a4     A0 00 90 AD |  if_e	jmp	#LR__0580
067a8     36 01 00 FF 
067ac     6D 14 06 F6 | 	mov	arg02, ##@LR__4387
067b0     1E 13 02 F6 | 	mov	arg01, local16
067b4     C8 10 B1 FD | 	call	#__system___string_cmp
067b8     00 FA 0D F2 | 	cmp	result1, #0 wz
067bc     94 00 90 AD |  if_e	jmp	#LR__0581
067c0     36 01 00 FF 
067c4     74 14 06 F6 | 	mov	arg02, ##@LR__4388
067c8     1E 13 02 F6 | 	mov	arg01, local16
067cc     B0 10 B1 FD | 	call	#__system___string_cmp
067d0     00 FA 0D F2 | 	cmp	result1, #0 wz
067d4     88 00 90 AD |  if_e	jmp	#LR__0582
067d8     90 00 90 FD | 	jmp	#LR__0583
067dc                 | LR__0571
067dc     01 39 06 F6 | 	mov	local14, #257
067e0     01 3A 06 F6 | 	mov	local15, #1
067e4     A4 00 90 FD | 	jmp	#LR__0585
067e8                 | LR__0572
067e8     02 39 06 F6 | 	mov	local14, #258
067ec     01 3A 06 F6 | 	mov	local15, #1
067f0     98 00 90 FD | 	jmp	#LR__0585
067f4                 | LR__0573
067f4     03 39 06 F6 | 	mov	local14, #259
067f8     02 3A 06 F6 | 	mov	local15, #2
067fc     8C 00 90 FD | 	jmp	#LR__0585
06800                 | LR__0574
06800     04 39 06 F6 | 	mov	local14, #260
06804     02 3A 06 F6 | 	mov	local15, #2
06808     80 00 90 FD | 	jmp	#LR__0585
0680c                 | LR__0575
0680c     05 39 06 F6 | 	mov	local14, #261
06810     04 3A 06 F6 | 	mov	local15, #4
06814     74 00 90 FD | 	jmp	#LR__0585
06818                 | LR__0576
06818     05 39 06 F6 | 	mov	local14, #261
0681c     04 3A 06 F6 | 	mov	local15, #4
06820     68 00 90 FD | 	jmp	#LR__0585
06824                 | LR__0577
06824     06 39 06 F6 | 	mov	local14, #262
06828     04 3A 06 F6 | 	mov	local15, #4
0682c     5C 00 90 FD | 	jmp	#LR__0585
06830                 | LR__0578
06830     07 39 06 F6 | 	mov	local14, #263
06834     08 3A 06 F6 | 	mov	local15, #8
06838     50 00 90 FD | 	jmp	#LR__0585
0683c                 | LR__0579
0683c     08 39 06 F6 | 	mov	local14, #264
06840     08 3A 06 F6 | 	mov	local15, #8
06844     44 00 90 FD | 	jmp	#LR__0585
06848                 | LR__0580
06848     09 39 06 F6 | 	mov	local14, #265
0684c     04 3A 06 F6 | 	mov	local15, #4
06850     38 00 90 FD | 	jmp	#LR__0585
06854                 | LR__0581
06854     0A 39 06 F6 | 	mov	local14, #266
06858     08 3A 06 F6 | 	mov	local15, #8
0685c     2C 00 90 FD | 	jmp	#LR__0585
06860                 | LR__0582
06860     0B 39 06 F6 | 	mov	local14, #267
06864     04 3A 06 F6 | 	mov	local15, #4
06868     20 00 90 FD | 	jmp	#LR__0585
0686c                 | LR__0583
0686c     2F 12 06 F6 | 	mov	arg01, #47
06870     C0 DA B0 FD | 	call	#_printerror
06874     2F FA 05 F6 | 	mov	result1, #47
06878     58 01 90 FD | 	jmp	#LR__0586
0687c                 | LR__0584
0687c     2E 12 06 F6 | 	mov	arg01, #46
06880     B0 DA B0 FD | 	call	#_printerror
06884                 | '   printerror(46): return 46
06884     2E FA 05 F6 | 	mov	result1, #46
06888     48 01 90 FD | 	jmp	#LR__0586
0688c                 | LR__0585
0688c     0F 3B 02 FD | 	qmul	local15, local01
06890     18 2A 62 FD | 	getqx	local07
06894     10 2B 02 FD | 	qmul	local07, local02
06898     18 3C 62 FD | 	getqx	local16
0689c     11 3D 02 FD | 	qmul	local16, local03
068a0     7A 00 00 FF 
068a4     4C E4 05 F1 | 	add	objptr, ##62540
068a8     F2 3E 02 FB | 	rdlong	local17, objptr
068ac     1C 15 02 F6 | 	mov	arg02, local14
068b0     01 16 06 F6 | 	mov	arg03, #1
068b4     00 18 06 F6 | 	mov	arg04, #0
068b8                 | '     return fill(addr, pattern, count, listPtr, 4)
068b8     04 1A 06 F6 | 	mov	arg05, #4
068bc     18 3C 62 FD | 	getqx	local16
068c0     1E 3F 82 F1 | 	sub	local17, local16
068c4     10 3E 86 F1 | 	sub	local17, #16
068c8     F2 3E 62 FC | 	wrlong	local17, objptr
068cc     1F 13 02 F6 | 	mov	arg01, local17
068d0     6E 00 00 FF 
068d4     8C E5 85 F1 | 	sub	objptr, ##56716
068d8     C4 05 B1 FD | 	call	#_psram_spin2_fill
068dc     1F 13 02 F6 | 	mov	arg01, local17
068e0     02 12 06 F1 | 	add	arg01, #2
068e4     1D 15 02 F6 | 	mov	arg02, local15
068e8     01 16 06 F6 | 	mov	arg03, #1
068ec     00 18 06 F6 | 	mov	arg04, #0
068f0                 | '     return fill(addr, pattern, count, listPtr, 1)
068f0     01 1A 06 F6 | 	mov	arg05, #1
068f4     A8 05 B1 FD | 	call	#_psram_spin2_fill
068f8     1F 13 02 F6 | 	mov	arg01, local17
068fc     04 12 06 F1 | 	add	arg01, #4
06900     0F 15 02 F6 | 	mov	arg02, local01
06904     01 16 06 F6 | 	mov	arg03, #1
06908     00 18 06 F6 | 	mov	arg04, #0
0690c                 | '     return fill(addr, pattern, count, listPtr, 4)
0690c     04 1A 06 F6 | 	mov	arg05, #4
06910     8C 05 B1 FD | 	call	#_psram_spin2_fill
06914     1F 13 02 F6 | 	mov	arg01, local17
06918     08 12 06 F1 | 	add	arg01, #8
0691c     10 15 02 F6 | 	mov	arg02, local02
06920     01 16 06 F6 | 	mov	arg03, #1
06924     00 18 06 F6 | 	mov	arg04, #0
06928                 | '     return fill(addr, pattern, count, listPtr, 4)
06928     04 1A 06 F6 | 	mov	arg05, #4
0692c     70 05 B1 FD | 	call	#_psram_spin2_fill
06930     1F 13 02 F6 | 	mov	arg01, local17
06934     0C 12 06 F1 | 	add	arg01, #12
06938     11 15 02 F6 | 	mov	arg02, local03
0693c     01 16 06 F6 | 	mov	arg03, #1
06940     00 18 06 F6 | 	mov	arg04, #0
06944                 | '     return fill(addr, pattern, count, listPtr, 4)
06944     04 1A 06 F6 | 	mov	arg05, #4
06948     54 05 B1 FD | 	call	#_psram_spin2_fill
0694c     48 00 00 FF 
06950     1C E5 05 F1 | 	add	objptr, ##37148
06954     F2 24 02 FB | 	rdlong	local04, objptr
06958     04 24 66 F0 | 	shl	local04, #4
0695c     20 00 00 FF 
06960     00 E4 85 F1 | 	sub	objptr, ##16384
06964     F2 24 02 F1 | 	add	local04, objptr
06968     12 27 62 FC | 	wrlong	local05, local04
0696c     20 00 00 FF 
06970     00 E4 05 F1 | 	add	objptr, ##16384
06974     F2 24 02 FB | 	rdlong	local04, objptr
06978     04 24 66 F0 | 	shl	local04, #4
0697c     20 00 00 FF 
06980     00 E4 85 F1 | 	sub	objptr, ##16384
06984     F2 24 02 F1 | 	add	local04, objptr
06988     04 24 06 F1 | 	add	local04, #4
0698c     12 3F 62 FC | 	wrlong	local17, local04
06990     20 00 00 FF 
06994     00 E4 05 F1 | 	add	objptr, ##16384
06998     F2 24 02 FB | 	rdlong	local04, objptr
0699c     04 24 66 F0 | 	shl	local04, #4
069a0     20 00 00 FF 
069a4     00 E4 85 F1 | 	sub	objptr, ##16384
069a8     F2 24 02 F1 | 	add	local04, objptr
069ac     0C 24 06 F1 | 	add	local04, #12
069b0     12 39 62 FC | 	wrlong	local14, local04
069b4     20 00 00 FF 
069b8     00 E4 05 F1 | 	add	objptr, ##16384
069bc     F2 2A 02 FB | 	rdlong	local07, objptr
069c0     01 2A 06 F1 | 	add	local07, #1
069c4     F2 2A 62 FC | 	wrlong	local07, objptr
069c8     53 00 00 FF 
069cc     DC E5 85 F1 | 	sub	objptr, ##42972
069d0                 | ' 'print dims(0),dims(1),dims(2),arraytype
069d0                 | ' 
069d0                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
069d0                 | ' arrayptr=memtop-arraysize-16
069d0                 | ' memtop=arrayptr
069d0                 | ' 
069d0                 | ' pslpoke arrayptr,arraytype
069d0                 | ' pspoke arrayptr+2,esize
069d0                 | ' pslpoke arrayptr+4,dims(0)
069d0                 | ' pslpoke arrayptr+8,dims(1)
069d0                 | ' pslpoke arrayptr+12,dims(2)
069d0                 | ' 
069d0                 | ' variables(varnum).name=varname2$
069d0                 | ' variables(varnum).value.uresult=arrayptr
069d0                 | ' variables(varnum).vartype=arraytype
069d0                 | ' varnum+=1
069d0                 | ' 
069d0                 | ' return 0
069d0     00 FA 05 F6 | 	mov	result1, #0
069d4                 | LR__0586
069d4     A7 F0 03 F6 | 	mov	ptra, fp
069d8     B2 00 A0 FD | 	call	#popregs_
069dc                 | _compile_dim_ret
069dc     2D 00 64 FD | 	ret
069e0                 | 
069e0                 | ' 
069e0                 | ' 
069e0                 | ' function compile_for() as ulong  
069e0                 | _compile_for
069e0     07 4A 05 F6 | 	mov	COUNT_, #7
069e4     A8 00 A0 FD | 	call	#pushregs_
069e8                 | ' 
069e8                 | ' 
069e8                 | ' 
069e8                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
069e8     56 00 00 FF 
069ec     18 E4 05 F1 | 	add	objptr, ##44056
069f0     F2 14 02 FB | 	rdlong	arg02, objptr
069f4     01 14 06 F1 | 	add	arg02, #1
069f8     03 14 66 F0 | 	shl	arg02, #3
069fc     02 00 00 FF 
06a00     38 E4 85 F1 | 	sub	objptr, ##1080
06a04     F2 14 02 F1 | 	add	arg02, objptr
06a08     0A 13 02 FB | 	rdlong	arg01, arg02
06a0c     53 00 00 FF 
06a10     E0 E5 85 F1 | 	sub	objptr, ##42976
06a14                 | ' 
06a14                 | ' select case s
06a14     35 01 00 FF 
06a18     32 14 06 F6 | 	mov	arg02, ##@LR__4256
06a1c     60 0E B1 FD | 	call	#__system___string_cmp
06a20     00 FA 0D F2 | 	cmp	result1, #0 wz
06a24     1B FA 05 A6 |  if_e	mov	result1, #27
06a28     00 FA 05 56 |  if_ne	mov	result1, #0
06a2c     00 FA 0D F2 | 	cmp	result1, #0 wz
06a30     0C 00 90 AD |  if_e	jmp	#LR__0590
06a34     05 12 06 F6 | 	mov	arg01, #5
06a38     A4 E3 BF FD | 	call	#_compile_immediate_assign
06a3c     10 00 90 FD | 	jmp	#LR__0591
06a40                 | LR__0590
06a40     20 12 06 F6 | 	mov	arg01, #32
06a44     14 E8 BF FD | 	call	#_compile_error
06a48     20 FA 05 F6 | 	mov	result1, #32
06a4c     AC 02 90 FD | 	jmp	#LR__0596
06a50                 | LR__0591
06a50     69 00 00 FF 
06a54     50 E4 05 F1 | 	add	objptr, ##53840
06a58     F2 12 02 FB | 	rdlong	arg01, objptr
06a5c     09 25 02 F6 | 	mov	local04, arg01
06a60     01 24 86 F1 | 	sub	local04, #1
06a64     12 15 02 F6 | 	mov	arg02, local04
06a68     01 14 66 F0 | 	shl	arg02, #1
06a6c     12 15 02 F1 | 	add	arg02, local04
06a70     02 14 66 F0 | 	shl	arg02, #2
06a74     03 00 00 FF 
06a78     00 E4 85 F1 | 	sub	objptr, ##1536
06a7c     F2 14 02 F1 | 	add	arg02, objptr
06a80     0A 1F 02 FB | 	rdlong	local01, arg02
06a84     04 14 06 F1 | 	add	arg02, #4
06a88     0A 27 02 FB | 	rdlong	local05, arg02
06a8c     01 12 86 F1 | 	sub	arg01, #1
06a90     09 29 02 F6 | 	mov	local06, arg01
06a94     01 28 66 F0 | 	shl	local06, #1
06a98     09 29 02 F1 | 	add	local06, arg01
06a9c     02 28 66 F0 | 	shl	local06, #2
06aa0     F2 28 02 F1 | 	add	local06, objptr
06aa4     08 28 06 F1 | 	add	local06, #8
06aa8     14 13 02 FB | 	rdlong	arg01, local06
06aac     13 21 02 F6 | 	mov	local02, local05
06ab0     09 23 02 F6 | 	mov	local03, arg01
06ab4                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
06ab4                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
06ab4     17 22 0E F2 | 	cmp	local03, #23 wz
06ab8     66 00 00 FF 
06abc     50 E4 85 F1 | 	sub	objptr, ##52304
06ac0     10 00 90 AD |  if_e	jmp	#LR__0592
06ac4     22 12 06 F6 | 	mov	arg01, #34
06ac8     90 E7 BF FD | 	call	#_compile_error
06acc     22 FA 05 F6 | 	mov	result1, #34
06ad0     28 02 90 FD | 	jmp	#LR__0596
06ad4                 | LR__0592
06ad4     0F 2B 02 F6 | 	mov	local07, local01
06ad8                 | ' varnum=t1.result.uresult
06ad8                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
06ad8     56 00 00 FF 
06adc     18 E4 05 F1 | 	add	objptr, ##44056
06ae0     F2 24 02 FB | 	rdlong	local04, objptr
06ae4     03 24 66 F0 | 	shl	local04, #3
06ae8     02 00 00 FF 
06aec     38 E4 85 F1 | 	sub	objptr, ##1080
06af0     F2 24 02 F1 | 	add	local04, objptr
06af4     12 13 02 FB | 	rdlong	arg01, local04
06af8     36 01 00 FF 
06afc     7B 14 06 F6 | 	mov	arg02, ##@LR__4389
06b00     53 00 00 FF 
06b04     E0 E5 85 F1 | 	sub	objptr, ##42976
06b08     74 0D B1 FD | 	call	#__system___string_cmp
06b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
06b10     10 00 90 AD |  if_e	jmp	#LR__0593
06b14     21 12 06 F6 | 	mov	arg01, #33
06b18     40 E7 BF FD | 	call	#_compile_error
06b1c     21 FA 05 F6 | 	mov	result1, #33
06b20     D8 01 90 FD | 	jmp	#LR__0596
06b24                 | LR__0593
06b24     56 00 00 FF 
06b28     18 E4 05 F1 | 	add	objptr, ##44056
06b2c     F2 28 02 FB | 	rdlong	local06, objptr
06b30     01 28 06 F1 | 	add	local06, #1
06b34     F2 28 62 FC | 	wrlong	local06, objptr
06b38     56 00 00 FF 
06b3c     18 E4 85 F1 | 	sub	objptr, ##44056
06b40     98 0B B0 FD | 	call	#_expr
06b44                 | ' ct+=1
06b44                 | ' expr()  ' there is "to" value pushed on the stack
06b44                 | ' if lparts(ct).part$="step" then 
06b44     56 00 00 FF 
06b48     18 E4 05 F1 | 	add	objptr, ##44056
06b4c     F2 24 02 FB | 	rdlong	local04, objptr
06b50     03 24 66 F0 | 	shl	local04, #3
06b54     02 00 00 FF 
06b58     38 E4 85 F1 | 	sub	objptr, ##1080
06b5c     F2 24 02 F1 | 	add	local04, objptr
06b60     12 13 02 FB | 	rdlong	arg01, local04
06b64     36 01 00 FF 
06b68     7E 14 06 F6 | 	mov	arg02, ##@LR__4390
06b6c     53 00 00 FF 
06b70     E0 E5 85 F1 | 	sub	objptr, ##42976
06b74     08 0D B1 FD | 	call	#__system___string_cmp
06b78     00 FA 0D F2 | 	cmp	result1, #0 wz
06b7c     24 00 90 5D |  if_ne	jmp	#LR__0594
06b80     56 00 00 FF 
06b84     18 E4 05 F1 | 	add	objptr, ##44056
06b88     F2 28 02 FB | 	rdlong	local06, objptr
06b8c     01 28 06 F1 | 	add	local06, #1
06b90     F2 28 62 FC | 	wrlong	local06, objptr
06b94     56 00 00 FF 
06b98     18 E4 85 F1 | 	sub	objptr, ##44056
06b9c     3C 0B B0 FD | 	call	#_expr
06ba0     78 00 90 FD | 	jmp	#LR__0595
06ba4                 | LR__0594
06ba4     69 00 00 FF 
06ba8     50 E4 05 F1 | 	add	objptr, ##53840
06bac     F2 28 02 FB | 	rdlong	local06, objptr
06bb0     14 27 02 F6 | 	mov	local05, local06
06bb4     01 26 66 F0 | 	shl	local05, #1
06bb8     14 27 02 F1 | 	add	local05, local06
06bbc     02 26 66 F0 | 	shl	local05, #2
06bc0     03 00 00 FF 
06bc4     00 E4 85 F1 | 	sub	objptr, ##1536
06bc8     F2 26 02 F1 | 	add	local05, objptr
06bcc     08 26 06 F1 | 	add	local05, #8
06bd0     13 39 68 FC | 	wrlong	#28, local05
06bd4     03 00 00 FF 
06bd8     00 E4 05 F1 | 	add	objptr, ##1536
06bdc     F2 28 02 FB | 	rdlong	local06, objptr
06be0     14 27 02 F6 | 	mov	local05, local06
06be4     01 26 66 F0 | 	shl	local05, #1
06be8     14 27 02 F1 | 	add	local05, local06
06bec     02 26 66 F0 | 	shl	local05, #2
06bf0     03 00 00 FF 
06bf4     00 E4 85 F1 | 	sub	objptr, ##1536
06bf8     F2 26 02 F1 | 	add	local05, objptr
06bfc     13 03 68 FC | 	wrlong	#1, local05
06c00     03 00 00 FF 
06c04     00 E4 05 F1 | 	add	objptr, ##1536
06c08     F2 28 02 FB | 	rdlong	local06, objptr
06c0c     01 28 06 F1 | 	add	local06, #1
06c10     F2 28 62 FC | 	wrlong	local06, objptr
06c14     69 00 00 FF 
06c18     50 E4 85 F1 | 	sub	objptr, ##53840
06c1c                 | LR__0595
06c1c     69 00 00 FF 
06c20     50 E4 05 F1 | 	add	objptr, ##53840
06c24     F2 28 02 FB | 	rdlong	local06, objptr
06c28     14 27 02 F6 | 	mov	local05, local06
06c2c     01 26 66 F0 | 	shl	local05, #1
06c30     14 27 02 F1 | 	add	local05, local06
06c34     02 26 66 F0 | 	shl	local05, #2
06c38     03 00 00 FF 
06c3c     00 E4 85 F1 | 	sub	objptr, ##1536
06c40     F2 26 02 F1 | 	add	local05, objptr
06c44     08 26 06 F1 | 	add	local05, #8
06c48     13 39 68 FC | 	wrlong	#28, local05
06c4c     03 00 00 FF 
06c50     00 E4 05 F1 | 	add	objptr, ##1536
06c54     F2 28 02 FB | 	rdlong	local06, objptr
06c58     14 27 02 F6 | 	mov	local05, local06
06c5c     01 26 66 F0 | 	shl	local05, #1
06c60     14 27 02 F1 | 	add	local05, local06
06c64     02 26 66 F0 | 	shl	local05, #2
06c68     03 00 00 FF 
06c6c     00 E4 85 F1 | 	sub	objptr, ##1536
06c70     F2 26 02 F1 | 	add	local05, objptr
06c74     13 2B 62 FC | 	wrlong	local07, local05
06c78     03 00 00 FF 
06c7c     00 E4 05 F1 | 	add	objptr, ##1536
06c80     F2 2A 02 FB | 	rdlong	local07, objptr
06c84     01 2A 06 F1 | 	add	local07, #1
06c88     F2 2A 62 FC | 	wrlong	local07, objptr
06c8c     15 29 02 F6 | 	mov	local06, local07
06c90     01 28 66 F0 | 	shl	local06, #1
06c94     15 29 02 F1 | 	add	local06, local07
06c98     02 28 66 F0 | 	shl	local06, #2
06c9c     03 00 00 FF 
06ca0     00 E4 85 F1 | 	sub	objptr, ##1536
06ca4     F2 28 02 F1 | 	add	local06, objptr
06ca8     08 28 06 F1 | 	add	local06, #8
06cac     14 95 68 FC | 	wrlong	#74, local06
06cb0     03 00 00 FF 
06cb4     00 E4 05 F1 | 	add	objptr, ##1536
06cb8     F2 2A 02 FB | 	rdlong	local07, objptr
06cbc     15 29 02 F6 | 	mov	local06, local07
06cc0     01 28 66 F0 | 	shl	local06, #1
06cc4     15 29 02 F1 | 	add	local06, local07
06cc8     02 28 66 F0 | 	shl	local06, #2
06ccc     03 00 00 FF 
06cd0     00 E4 85 F1 | 	sub	objptr, ##1536
06cd4     F2 28 02 F1 | 	add	local06, objptr
06cd8     14 01 68 FC | 	wrlong	#0, local06
06cdc     03 00 00 FF 
06ce0     00 E4 05 F1 | 	add	objptr, ##1536
06ce4     F2 2A 02 FB | 	rdlong	local07, objptr
06ce8     01 2A 06 F1 | 	add	local07, #1
06cec     F2 2A 62 FC | 	wrlong	local07, objptr
06cf0     69 00 00 FF 
06cf4     50 E4 85 F1 | 	sub	objptr, ##53840
06cf8                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
06cf8                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
06cf8                 | ' 
06cf8                 | ' 
06cf8                 | ' return 0
06cf8     00 FA 05 F6 | 	mov	result1, #0
06cfc                 | LR__0596
06cfc     A7 F0 03 F6 | 	mov	ptra, fp
06d00     B2 00 A0 FD | 	call	#popregs_
06d04                 | _compile_for_ret
06d04     2D 00 64 FD | 	ret
06d08                 | 
06d08                 | ' 
06d08                 | ' 
06d08                 | ' sub do_for()
06d08                 | _do_for
06d08     05 4A 05 F6 | 	mov	COUNT_, #5
06d0c     A8 00 A0 FD | 	call	#pushregs_
06d10     78 00 00 FF 
06d14     AC E5 05 F1 | 	add	objptr, ##61868
06d18     F2 24 02 FB | 	rdlong	local04, objptr
06d1c     01 24 06 F1 | 	add	local04, #1
06d20     F2 24 62 FC | 	wrlong	local04, objptr
06d24     78 00 00 FF 
06d28     AC E5 85 F1 | 	sub	objptr, ##61868
06d2c     5C 1E B0 FD | 	call	#_pop
06d30     FD 1E 02 F6 | 	mov	local01, result1
06d34     FE 20 02 F6 | 	mov	local02, result2
06d38     FF 22 02 F6 | 	mov	local03, result3
06d3c     78 00 00 FF 
06d40     AC E5 05 F1 | 	add	objptr, ##61868
06d44     F2 24 02 FB | 	rdlong	local04, objptr
06d48     12 27 02 F6 | 	mov	local05, local04
06d4c     02 26 66 F0 | 	shl	local05, #2
06d50     12 27 02 F1 | 	add	local05, local04
06d54     02 26 66 F0 | 	shl	local05, #2
06d58     07 00 00 FF 
06d5c     40 E5 85 F1 | 	sub	objptr, ##3904
06d60     F2 26 02 F1 | 	add	local05, objptr
06d64     08 26 06 F1 | 	add	local05, #8
06d68     13 1F 62 FC | 	wrlong	local01, local05
06d6c     71 00 00 FF 
06d70     6C E4 85 F1 | 	sub	objptr, ##57964
06d74     14 1E B0 FD | 	call	#_pop
06d78     FD 1E 02 F6 | 	mov	local01, result1
06d7c     FE 20 02 F6 | 	mov	local02, result2
06d80     FF 22 02 F6 | 	mov	local03, result3
06d84     78 00 00 FF 
06d88     AC E5 05 F1 | 	add	objptr, ##61868
06d8c     F2 24 02 FB | 	rdlong	local04, objptr
06d90     12 27 02 F6 | 	mov	local05, local04
06d94     02 26 66 F0 | 	shl	local05, #2
06d98     12 27 02 F1 | 	add	local05, local04
06d9c     02 26 66 F0 | 	shl	local05, #2
06da0     07 00 00 FF 
06da4     40 E5 85 F1 | 	sub	objptr, ##3904
06da8     F2 26 02 F1 | 	add	local05, objptr
06dac     0C 26 06 F1 | 	add	local05, #12
06db0     13 1F 62 FC | 	wrlong	local01, local05
06db4     71 00 00 FF 
06db8     6C E4 85 F1 | 	sub	objptr, ##57964
06dbc     CC 1D B0 FD | 	call	#_pop
06dc0     FD 1E 02 F6 | 	mov	local01, result1
06dc4     FE 20 02 F6 | 	mov	local02, result2
06dc8     FF 22 02 F6 | 	mov	local03, result3
06dcc     78 00 00 FF 
06dd0     AC E5 05 F1 | 	add	objptr, ##61868
06dd4     F2 24 02 FB | 	rdlong	local04, objptr
06dd8     12 27 02 F6 | 	mov	local05, local04
06ddc     02 26 66 F0 | 	shl	local05, #2
06de0     12 27 02 F1 | 	add	local05, local04
06de4     02 26 66 F0 | 	shl	local05, #2
06de8     07 00 00 FF 
06dec     40 E5 85 F1 | 	sub	objptr, ##3904
06df0     F2 26 02 F1 | 	add	local05, objptr
06df4     10 26 06 F1 | 	add	local05, #16
06df8     13 1F 62 FC | 	wrlong	local01, local05
06dfc                 | ' fortop+=1
06dfc                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
06dfc                 | ' 'if i> maxfor then printerror(36) : return
06dfc                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
06dfc                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
06dfc                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
06dfc                 | ' if compiledline(lineptr_e).result_type=token_end then
06dfc     08 00 00 FF 
06e00     18 E4 85 F1 | 	sub	objptr, ##4120
06e04     F2 1E 02 FB | 	rdlong	local01, objptr
06e08     0F 27 02 F6 | 	mov	local05, local01
06e0c     01 26 66 F0 | 	shl	local05, #1
06e10     0F 27 02 F1 | 	add	local05, local01
06e14     02 26 66 F0 | 	shl	local05, #2
06e18     03 00 00 FF 
06e1c     04 E4 85 F1 | 	sub	objptr, ##1540
06e20     F2 26 02 F1 | 	add	local05, objptr
06e24     08 26 06 F1 | 	add	local05, #8
06e28     13 27 02 FB | 	rdlong	local05, local05
06e2c     FE 27 0E F2 | 	cmp	local05, #510 wz
06e30     66 00 00 FF 
06e34     50 E4 85 F1 | 	sub	objptr, ##52304
06e38     70 00 90 5D |  if_ne	jmp	#LR__0600
06e3c     78 00 00 FF 
06e40     AC E5 05 F1 | 	add	objptr, ##61868
06e44     F2 1E 02 FB | 	rdlong	local01, objptr
06e48     0F 27 02 F6 | 	mov	local05, local01
06e4c     02 26 66 F0 | 	shl	local05, #2
06e50     0F 27 02 F1 | 	add	local05, local01
06e54     02 26 66 F0 | 	shl	local05, #2
06e58     07 00 00 FF 
06e5c     40 E5 85 F1 | 	sub	objptr, ##3904
06e60     F2 26 02 F1 | 	add	local05, objptr
06e64     07 00 00 FF 
06e68     18 E5 05 F1 | 	add	objptr, ##3864
06e6c     F2 1E 02 FB | 	rdlong	local01, objptr
06e70     13 1F 62 FC | 	wrlong	local01, local05
06e74     28 E4 05 F1 | 	add	objptr, #40
06e78     F2 1E 02 FB | 	rdlong	local01, objptr
06e7c     0F 27 02 F6 | 	mov	local05, local01
06e80     02 26 66 F0 | 	shl	local05, #2
06e84     0F 27 02 F1 | 	add	local05, local01
06e88     02 26 66 F0 | 	shl	local05, #2
06e8c     07 00 00 FF 
06e90     40 E5 85 F1 | 	sub	objptr, ##3904
06e94     F2 26 02 F1 | 	add	local05, objptr
06e98     04 26 06 F1 | 	add	local05, #4
06e9c     13 01 68 FC | 	wrlong	#0, local05
06ea0     71 00 00 FF 
06ea4     6C E4 85 F1 | 	sub	objptr, ##57964
06ea8     7C 00 90 FD | 	jmp	#LR__0601
06eac                 | LR__0600
06eac     78 00 00 FF 
06eb0     AC E5 05 F1 | 	add	objptr, ##61868
06eb4     F2 1E 02 FB | 	rdlong	local01, objptr
06eb8     0F 27 02 F6 | 	mov	local05, local01
06ebc     02 26 66 F0 | 	shl	local05, #2
06ec0     0F 27 02 F1 | 	add	local05, local01
06ec4     02 26 66 F0 | 	shl	local05, #2
06ec8     07 00 00 FF 
06ecc     40 E5 85 F1 | 	sub	objptr, ##3904
06ed0     F2 26 02 F1 | 	add	local05, objptr
06ed4     07 00 00 FF 
06ed8     20 E5 05 F1 | 	add	objptr, ##3872
06edc     F2 1E 02 FB | 	rdlong	local01, objptr
06ee0     13 1F 62 FC | 	wrlong	local01, local05
06ee4     20 E4 05 F1 | 	add	objptr, #32
06ee8     F2 1E 02 FB | 	rdlong	local01, objptr
06eec     0F 27 02 F6 | 	mov	local05, local01
06ef0     02 26 66 F0 | 	shl	local05, #2
06ef4     0F 27 02 F1 | 	add	local05, local01
06ef8     02 26 66 F0 | 	shl	local05, #2
06efc     07 00 00 FF 
06f00     40 E5 85 F1 | 	sub	objptr, ##3904
06f04     F2 26 02 F1 | 	add	local05, objptr
06f08     08 00 00 FF 
06f0c     18 E4 85 F1 | 	sub	objptr, ##4120
06f10     F2 1E 02 FB | 	rdlong	local01, objptr
06f14     69 00 00 FF 
06f18     54 E4 85 F1 | 	sub	objptr, ##53844
06f1c     01 1E 06 F1 | 	add	local01, #1
06f20     04 26 06 F1 | 	add	local05, #4
06f24     13 1F 62 FC | 	wrlong	local01, local05
06f28                 | LR__0601
06f28     A7 F0 03 F6 | 	mov	ptra, fp
06f2c     B2 00 A0 FD | 	call	#popregs_
06f30                 | _do_for_ret
06f30     2D 00 64 FD | 	ret
06f34                 | 
06f34                 | ' 
06f34                 | ' ' now do_next todo
06f34                 | ' 
06f34                 | ' sub do_next()
06f34                 | _do_next
06f34     04 4A 05 F6 | 	mov	COUNT_, #4
06f38     A8 00 A0 FD | 	call	#pushregs_
06f3c     4C 1C B0 FD | 	call	#_pop
06f40     FD 1E 02 F6 | 	mov	local01, result1
06f44     FE 20 02 F6 | 	mov	local02, result2
06f48     FF 22 02 F6 | 	mov	local03, result3
06f4c                 | ' 
06f4c                 | ' t1=pop() :varnum=t1.result.uresult
06f4c                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
06f4c     78 00 00 FF 
06f50     AC E5 05 F1 | 	add	objptr, ##61868
06f54     F2 12 02 FB | 	rdlong	arg01, objptr
06f58     09 25 02 F6 | 	mov	local04, arg01
06f5c     02 24 66 F0 | 	shl	local04, #2
06f60     09 25 02 F1 | 	add	local04, arg01
06f64     02 24 66 F0 | 	shl	local04, #2
06f68     07 00 00 FF 
06f6c     40 E5 85 F1 | 	sub	objptr, ##3904
06f70     F2 24 02 F1 | 	add	local04, objptr
06f74     08 24 06 F1 | 	add	local04, #8
06f78     12 25 02 FB | 	rdlong	local04, local04
06f7c     0F 25 0A F2 | 	cmp	local04, local01 wz
06f80     71 00 00 FF 
06f84     6C E4 85 F1 | 	sub	objptr, ##57964
06f88     0C 00 90 AD |  if_e	jmp	#LR__0610
06f8c     25 12 06 F6 | 	mov	arg01, #37
06f90     A0 D3 B0 FD | 	call	#_printerror
06f94     28 02 90 FD | 	jmp	#LR__0614
06f98                 | LR__0610
06f98     78 00 00 FF 
06f9c     AC E5 05 F1 | 	add	objptr, ##61868
06fa0     F2 12 02 FB | 	rdlong	arg01, objptr
06fa4     09 25 02 F6 | 	mov	local04, arg01
06fa8     02 24 66 F0 | 	shl	local04, #2
06fac     09 25 02 F1 | 	add	local04, arg01
06fb0     02 24 66 F0 | 	shl	local04, #2
06fb4     07 00 00 FF 
06fb8     40 E5 85 F1 | 	sub	objptr, ##3904
06fbc     F2 24 02 F1 | 	add	local04, objptr
06fc0     0C 24 06 F1 | 	add	local04, #12
06fc4     12 25 02 FB | 	rdlong	local04, local04
06fc8     0F 13 02 F6 | 	mov	arg01, local01
06fcc     04 12 66 F0 | 	shl	arg01, #4
06fd0     3D 00 00 FF 
06fd4     90 E4 85 F1 | 	sub	objptr, ##31376
06fd8     F2 12 02 F1 | 	add	arg01, objptr
06fdc     0F FF 01 F6 | 	mov	result3, local01
06fe0     04 FE 65 F0 | 	shl	result3, #4
06fe4     F2 FE 01 F1 | 	add	result3, objptr
06fe8     04 FE 05 F1 | 	add	result3, #4
06fec     FF FE 01 FB | 	rdlong	result3, result3
06ff0     12 FF 01 F1 | 	add	result3, local04
06ff4     04 12 06 F1 | 	add	arg01, #4
06ff8     09 FF 61 FC | 	wrlong	result3, arg01
06ffc                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
06ffc                 | ' if fortable(fortop).stepval>=0 then
06ffc     44 00 00 FF 
07000     D0 E5 05 F1 | 	add	objptr, ##35280
07004     F2 12 02 FB | 	rdlong	arg01, objptr
07008     09 25 02 F6 | 	mov	local04, arg01
0700c     02 24 66 F0 | 	shl	local04, #2
07010     09 25 02 F1 | 	add	local04, arg01
07014     02 24 66 F0 | 	shl	local04, #2
07018     07 00 00 FF 
0701c     40 E5 85 F1 | 	sub	objptr, ##3904
07020     F2 24 02 F1 | 	add	local04, objptr
07024     0C 24 06 F1 | 	add	local04, #12
07028     12 25 02 FB | 	rdlong	local04, local04
0702c     00 24 56 F2 | 	cmps	local04, #0 wc
07030     71 00 00 FF 
07034     6C E4 85 F1 | 	sub	objptr, ##57964
07038     78 00 90 CD |  if_b	jmp	#LR__0611
0703c                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
0703c     04 1E 66 F0 | 	shl	local01, #4
07040     33 00 00 FF 
07044     DC E5 05 F1 | 	add	objptr, ##26588
07048     F2 1E 02 F1 | 	add	local01, objptr
0704c     44 00 00 FF 
07050     D0 E5 05 F1 | 	add	objptr, ##35280
07054     F2 24 02 FB | 	rdlong	local04, objptr
07058     12 13 02 F6 | 	mov	arg01, local04
0705c     02 12 66 F0 | 	shl	arg01, #2
07060     12 13 02 F1 | 	add	arg01, local04
07064     02 12 66 F0 | 	shl	arg01, #2
07068     07 00 00 FF 
0706c     40 E5 85 F1 | 	sub	objptr, ##3904
07070     F2 12 02 F1 | 	add	arg01, objptr
07074     04 1E 06 F1 | 	add	local01, #4
07078     0F 25 02 FB | 	rdlong	local04, local01
0707c     10 12 06 F1 | 	add	arg01, #16
07080     09 13 02 FB | 	rdlong	arg01, arg01
07084     09 25 5A F2 | 	cmps	local04, arg01 wcz
07088     71 00 00 FF 
0708c     6C E4 85 F1 | 	sub	objptr, ##57964
07090     9C 00 90 ED |  if_be	jmp	#LR__0613
07094     78 00 00 FF 
07098     AC E5 05 F1 | 	add	objptr, ##61868
0709c     F2 24 02 FB | 	rdlong	local04, objptr
070a0     01 24 86 F1 | 	sub	local04, #1
070a4     F2 24 62 FC | 	wrlong	local04, objptr
070a8     78 00 00 FF 
070ac     AC E5 85 F1 | 	sub	objptr, ##61868
070b0     0C 01 90 FD | 	jmp	#LR__0614
070b4                 | LR__0611
070b4                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
070b4     0F 13 02 F6 | 	mov	arg01, local01
070b8     04 12 66 F0 | 	shl	arg01, #4
070bc     33 00 00 FF 
070c0     DC E5 05 F1 | 	add	objptr, ##26588
070c4     F2 12 02 F1 | 	add	arg01, objptr
070c8     44 00 00 FF 
070cc     D0 E5 05 F1 | 	add	objptr, ##35280
070d0     F2 24 02 FB | 	rdlong	local04, objptr
070d4     12 1F 02 F6 | 	mov	local01, local04
070d8     02 1E 66 F0 | 	shl	local01, #2
070dc     12 1F 02 F1 | 	add	local01, local04
070e0     02 1E 66 F0 | 	shl	local01, #2
070e4     07 00 00 FF 
070e8     40 E5 85 F1 | 	sub	objptr, ##3904
070ec     F2 1E 02 F1 | 	add	local01, objptr
070f0     04 12 06 F1 | 	add	arg01, #4
070f4     09 13 02 FB | 	rdlong	arg01, arg01
070f8     10 1E 06 F1 | 	add	local01, #16
070fc     0F 1F 02 FB | 	rdlong	local01, local01
07100     0F 13 52 F2 | 	cmps	arg01, local01 wc
07104     71 00 00 FF 
07108     6C E4 85 F1 | 	sub	objptr, ##57964
0710c     20 00 90 3D |  if_ae	jmp	#LR__0612
07110     78 00 00 FF 
07114     AC E5 05 F1 | 	add	objptr, ##61868
07118     F2 24 02 FB | 	rdlong	local04, objptr
0711c     01 24 86 F1 | 	sub	local04, #1
07120     F2 24 62 FC | 	wrlong	local04, objptr
07124     78 00 00 FF 
07128     AC E5 85 F1 | 	sub	objptr, ##61868
0712c     90 00 90 FD | 	jmp	#LR__0614
07130                 | LR__0612
07130                 | LR__0613
07130     78 00 00 FF 
07134     AC E5 05 F1 | 	add	objptr, ##61868
07138     F2 1E 02 FB | 	rdlong	local01, objptr
0713c     0F 25 02 F6 | 	mov	local04, local01
07140     02 24 66 F0 | 	shl	local04, #2
07144     0F 25 02 F1 | 	add	local04, local01
07148     02 24 66 F0 | 	shl	local04, #2
0714c     07 00 00 FF 
07150     40 E5 85 F1 | 	sub	objptr, ##3904
07154     F2 24 02 F1 | 	add	local04, objptr
07158     12 25 02 FB | 	rdlong	local04, local04
0715c     07 00 00 FF 
07160     18 E5 05 F1 | 	add	objptr, ##3864
07164     F2 24 62 FC | 	wrlong	local04, objptr
07168     28 E4 05 F1 | 	add	objptr, #40
0716c     F2 1E 02 FB | 	rdlong	local01, objptr
07170     0F 25 02 F6 | 	mov	local04, local01
07174     02 24 66 F0 | 	shl	local04, #2
07178     0F 25 02 F1 | 	add	local04, local01
0717c     02 24 66 F0 | 	shl	local04, #2
07180     07 00 00 FF 
07184     40 E5 85 F1 | 	sub	objptr, ##3904
07188     F2 24 02 F1 | 	add	local04, objptr
0718c     04 24 06 F1 | 	add	local04, #4
07190     12 25 02 FB | 	rdlong	local04, local04
07194     07 00 00 FF 
07198     1C E5 05 F1 | 	add	objptr, ##3868
0719c     F2 24 62 FC | 	wrlong	local04, objptr
071a0     0F 00 00 FF 
071a4     38 E5 85 F1 | 	sub	objptr, ##7992
071a8     F2 24 02 FB | 	rdlong	local04, objptr
071ac     01 24 86 F1 | 	sub	local04, #1
071b0     04 E4 05 F1 | 	add	objptr, #4
071b4     F2 24 62 FC | 	wrlong	local04, objptr
071b8     69 00 00 FF 
071bc     54 E4 85 F1 | 	sub	objptr, ##53844
071c0                 | LR__0614
071c0     A7 F0 03 F6 | 	mov	ptra, fp
071c4     B2 00 A0 FD | 	call	#popregs_
071c8                 | _do_next_ret
071c8     2D 00 64 FD | 	ret
071cc                 | 
071cc                 | ' 
071cc                 | ' 
071cc                 | ' function compile_next() as ulong
071cc                 | _compile_next
071cc     04 4A 05 F6 | 	mov	COUNT_, #4
071d0     A8 00 A0 FD | 	call	#pushregs_
071d4     56 00 00 FF 
071d8     18 E4 05 F1 | 	add	objptr, ##44056
071dc     F2 12 02 FB | 	rdlong	arg01, objptr
071e0     03 12 66 F0 | 	shl	arg01, #3
071e4     02 00 00 FF 
071e8     38 E4 85 F1 | 	sub	objptr, ##1080
071ec     F2 12 02 F1 | 	add	arg01, objptr
071f0     09 1F 02 FB | 	rdlong	local01, arg01
071f4                 | ' 
071f4                 | ' varname$=lparts(ct).part$ 
071f4                 | ' 'suffix$=right$(varname$,1)
071f4                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
071f4                 | ' if varnum=0 then compile_error(35)  : return 35
071f4     04 E4 85 F1 | 	sub	objptr, #4
071f8     F2 14 0A FB | 	rdlong	arg02, objptr wz
071fc     53 00 00 FF 
07200     DC E5 85 F1 | 	sub	objptr, ##42972
07204     10 00 90 5D |  if_ne	jmp	#LR__0620
07208     23 12 06 F6 | 	mov	arg01, #35
0720c     4C E0 BF FD | 	call	#_compile_error
07210     23 FA 05 F6 | 	mov	result1, #35
07214     58 01 90 FD | 	jmp	#LR__0624
07218                 | LR__0620
07218     01 20 66 F6 | 	neg	local02, #1
0721c                 | ' j=-1
0721c                 | ' for i=0 to varnum-1
0721c     00 22 06 F6 | 	mov	local03, #0
07220     53 00 00 FF 
07224     DC E5 05 F1 | 	add	objptr, ##42972
07228     F2 24 02 FB | 	rdlong	local04, objptr
0722c     53 00 00 FF 
07230     DC E5 85 F1 | 	sub	objptr, ##42972
07234                 | LR__0621
07234     12 23 12 F2 | 	cmp	local03, local04 wc
07238     38 00 90 3D |  if_ae	jmp	#LR__0622
0723c                 | '   if variables(i).name=varname$ then j=i : exit
0723c     11 15 02 F6 | 	mov	arg02, local03
07240     04 14 66 F0 | 	shl	arg02, #4
07244     33 00 00 FF 
07248     DC E5 05 F1 | 	add	objptr, ##26588
0724c     F2 14 02 F1 | 	add	arg02, objptr
07250     0A 13 02 FB | 	rdlong	arg01, arg02
07254     0F 15 02 F6 | 	mov	arg02, local01
07258     33 00 00 FF 
0725c     DC E5 85 F1 | 	sub	objptr, ##26588
07260     1C 06 B1 FD | 	call	#__system___string_cmp
07264     00 FA 0D F2 | 	cmp	result1, #0 wz
07268     11 21 02 A6 |  if_e	mov	local02, local03
0726c     01 22 06 51 |  if_ne	add	local03, #1
07270     C0 FF 9F 5D |  if_ne	jmp	#LR__0621
07274                 | LR__0622
07274                 | ' if j=-1 then compile_error(35) : return 35
07274     FF FF 7F FF 
07278     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0727c     10 00 90 5D |  if_ne	jmp	#LR__0623
07280     23 12 06 F6 | 	mov	arg01, #35
07284     D4 DF BF FD | 	call	#_compile_error
07288     23 FA 05 F6 | 	mov	result1, #35
0728c     E0 00 90 FD | 	jmp	#LR__0624
07290                 | LR__0623
07290     69 00 00 FF 
07294     50 E4 05 F1 | 	add	objptr, ##53840
07298     F2 24 02 FB | 	rdlong	local04, objptr
0729c     12 23 02 F6 | 	mov	local03, local04
072a0     01 22 66 F0 | 	shl	local03, #1
072a4     12 23 02 F1 | 	add	local03, local04
072a8     02 22 66 F0 | 	shl	local03, #2
072ac     03 00 00 FF 
072b0     00 E4 85 F1 | 	sub	objptr, ##1536
072b4     F2 22 02 F1 | 	add	local03, objptr
072b8     08 22 06 F1 | 	add	local03, #8
072bc     11 39 68 FC | 	wrlong	#28, local03
072c0     03 00 00 FF 
072c4     00 E4 05 F1 | 	add	objptr, ##1536
072c8     F2 24 02 FB | 	rdlong	local04, objptr
072cc     12 23 02 F6 | 	mov	local03, local04
072d0     01 22 66 F0 | 	shl	local03, #1
072d4     12 23 02 F1 | 	add	local03, local04
072d8     02 22 66 F0 | 	shl	local03, #2
072dc     03 00 00 FF 
072e0     00 E4 85 F1 | 	sub	objptr, ##1536
072e4     F2 22 02 F1 | 	add	local03, objptr
072e8     11 21 62 FC | 	wrlong	local02, local03
072ec     03 00 00 FF 
072f0     00 E4 05 F1 | 	add	objptr, ##1536
072f4     F2 24 02 FB | 	rdlong	local04, objptr
072f8     01 24 06 F1 | 	add	local04, #1
072fc     F2 24 62 FC | 	wrlong	local04, objptr
07300     12 23 02 F6 | 	mov	local03, local04
07304     01 22 66 F0 | 	shl	local03, #1
07308     12 23 02 F1 | 	add	local03, local04
0730c     02 22 66 F0 | 	shl	local03, #2
07310     03 00 00 FF 
07314     00 E4 85 F1 | 	sub	objptr, ##1536
07318     F2 22 02 F1 | 	add	local03, objptr
0731c     08 22 06 F1 | 	add	local03, #8
07320     11 97 68 FC | 	wrlong	#75, local03
07324     03 00 00 FF 
07328     00 E4 05 F1 | 	add	objptr, ##1536
0732c     F2 24 02 FB | 	rdlong	local04, objptr
07330     12 23 02 F6 | 	mov	local03, local04
07334     01 22 66 F0 | 	shl	local03, #1
07338     12 23 02 F1 | 	add	local03, local04
0733c     02 22 66 F0 | 	shl	local03, #2
07340     03 00 00 FF 
07344     00 E4 85 F1 | 	sub	objptr, ##1536
07348     F2 22 02 F1 | 	add	local03, objptr
0734c     11 01 68 FC | 	wrlong	#0, local03
07350     03 00 00 FF 
07354     00 E4 05 F1 | 	add	objptr, ##1536
07358     F2 24 02 FB | 	rdlong	local04, objptr
0735c     01 24 06 F1 | 	add	local04, #1
07360     F2 24 62 FC | 	wrlong	local04, objptr
07364     69 00 00 FF 
07368     50 E4 85 F1 | 	sub	objptr, ##53840
0736c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0736c                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0736c                 | ' return 0
0736c     00 FA 05 F6 | 	mov	result1, #0
07370                 | LR__0624
07370     A7 F0 03 F6 | 	mov	ptra, fp
07374     B2 00 A0 FD | 	call	#popregs_
07378                 | _compile_next_ret
07378     2D 00 64 FD | 	ret
0737c                 | 
0737c                 | ' 
0737c                 | ' 
0737c                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
0737c                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
0737c                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
0737c                 | ' 
0737c                 | ' 
0737c                 | ' function compile_goto( ) as ulong
0737c                 | _compile_goto
0737c     03 4A 05 F6 | 	mov	COUNT_, #3
07380     A8 00 A0 FD | 	call	#pushregs_
07384     28 F0 07 F1 | 	add	ptra, #40
07388                 | ' 
07388                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
07388     56 00 00 FF 
0738c     18 E4 05 F1 | 	add	objptr, ##44056
07390     F2 16 02 FB | 	rdlong	arg03, objptr
07394     03 16 66 F0 | 	shl	arg03, #3
07398     02 00 00 FF 
0739c     38 E4 85 F1 | 	sub	objptr, ##1080
073a0     F2 16 02 F1 | 	add	arg03, objptr
073a4     04 16 06 F1 | 	add	arg03, #4
073a8     0B 17 02 FB | 	rdlong	arg03, arg03
073ac     01 00 00 FF 
073b0     00 16 0E F2 | 	cmp	arg03, ##512 wz
073b4     53 00 00 FF 
073b8     E0 E5 85 F1 | 	sub	objptr, ##42976
073bc     CC 02 90 5D |  if_ne	jmp	#LR__0635
073c0     56 00 00 FF 
073c4     18 E4 05 F1 | 	add	objptr, ##44056
073c8     F2 16 02 FB | 	rdlong	arg03, objptr
073cc     01 16 06 F1 | 	add	arg03, #1
073d0     03 16 66 F0 | 	shl	arg03, #3
073d4     02 00 00 FF 
073d8     38 E4 85 F1 | 	sub	objptr, ##1080
073dc     F2 16 02 F1 | 	add	arg03, objptr
073e0     04 16 06 F1 | 	add	arg03, #4
073e4     0B 17 02 FB | 	rdlong	arg03, arg03
073e8     FE 17 0E F2 | 	cmp	arg03, #510 wz
073ec     53 00 00 FF 
073f0     E0 E5 85 F1 | 	sub	objptr, ##42976
073f4     94 02 90 5D |  if_ne	jmp	#LR__0635
073f8     56 00 00 FF 
073fc     18 E4 05 F1 | 	add	objptr, ##44056
07400     F2 16 02 FB | 	rdlong	arg03, objptr
07404     03 16 66 F0 | 	shl	arg03, #3
07408     02 00 00 FF 
0740c     38 E4 85 F1 | 	sub	objptr, ##1080
07410     F2 16 02 F1 | 	add	arg03, objptr
07414     0B 13 02 FB | 	rdlong	arg01, arg03
07418     00 14 06 F6 | 	mov	arg02, #0
0741c     53 00 00 FF 
07420     E0 E5 85 F1 | 	sub	objptr, ##42976
07424     B8 33 B1 FD | 	call	#__system____builtin_atoi
07428     04 4E 05 F1 | 	add	fp, #4
0742c     A7 FA 61 FC | 	wrlong	result1, fp
07430     69 00 00 FF 
07434     50 E4 05 F1 | 	add	objptr, ##53840
07438     F2 1E 02 FB | 	rdlong	local01, objptr
0743c     0F 21 02 F6 | 	mov	local02, local01
07440     01 20 66 F0 | 	shl	local02, #1
07444     0F 21 02 F1 | 	add	local02, local01
07448     02 20 66 F0 | 	shl	local02, #2
0744c     03 00 00 FF 
07450     00 E4 85 F1 | 	sub	objptr, ##1536
07454     F2 20 02 F1 | 	add	local02, objptr
07458     08 20 06 F1 | 	add	local02, #8
0745c     10 9D 68 FC | 	wrlong	#78, local02
07460     03 00 00 FF 
07464     08 E4 05 F1 | 	add	objptr, ##1544
07468     F2 22 02 FB | 	rdlong	local03, objptr
0746c     69 00 00 FF 
07470     58 E4 85 F1 | 	sub	objptr, ##53848
07474     04 4E 05 F1 | 	add	fp, #4
07478     A7 22 62 FC | 	wrlong	local03, fp
0747c     08 4E 85 F1 | 	sub	fp, #8
07480                 | ' 
07480                 | '   gotoline=val%(lparts(ct).part$) 
07480                 | '   compiledline(lineptr).result_type=token_fast_goto
07480                 | ' ' now find a pointer to goto
07480                 | '   gotoptr=programstart
07480                 | '   do
07480                 | LR__0630
07480     10 4E 05 F1 | 	add	fp, #16
07484     A7 12 02 F6 | 	mov	arg01, fp
07488     08 4E 85 F1 | 	sub	fp, #8
0748c     A7 14 02 FB | 	rdlong	arg02, fp
07490     08 4E 85 F1 | 	sub	fp, #8
07494     18 16 06 F6 | 	mov	arg03, #24
07498     0B 00 00 FF 
0749c     C0 E4 05 F1 | 	add	objptr, ##5824
074a0     C4 F8 B0 FD | 	call	#_psram_spin2_read1
074a4     0B 00 00 FF 
074a8     C0 E4 85 F1 | 	sub	objptr, ##5824
074ac                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
074ac                 | '     if gotoheader(0)<>$FFFFFFFF then
074ac     10 4E 05 F1 | 	add	fp, #16
074b0     A7 22 02 FB | 	rdlong	local03, fp
074b4     10 4E 85 F1 | 	sub	fp, #16
074b8     FF FF 7F FF 
074bc     FF 23 0E F2 | 	cmp	local03, ##-1 wz
074c0     24 00 90 AD |  if_e	jmp	#LR__0631
074c4     08 4E 05 F1 | 	add	fp, #8
074c8     A7 22 02 FB | 	rdlong	local03, fp
074cc     04 4E 05 F1 | 	add	fp, #4
074d0     A7 22 62 FC | 	wrlong	local03, fp
074d4     18 4E 05 F1 | 	add	fp, #24
074d8     A7 22 02 FB | 	rdlong	local03, fp
074dc     1C 4E 85 F1 | 	sub	fp, #28
074e0     A7 22 62 FC | 	wrlong	local03, fp
074e4     08 4E 85 F1 | 	sub	fp, #8
074e8                 | LR__0631
074e8     24 4E 05 F1 | 	add	fp, #36
074ec     A7 22 02 FB | 	rdlong	local03, fp
074f0     24 4E 85 F1 | 	sub	fp, #36
074f4     FF FF 3F FF 
074f8     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
074fc     10 4E 05 51 |  if_ne	add	fp, #16
07500     A7 1E 02 5B |  if_ne	rdlong	local01, fp
07504     10 4E 85 51 |  if_ne	sub	fp, #16
07508     FF FF 7F 5F 
0750c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
07510     1C 00 90 AD |  if_e	jmp	#LR__0632
07514     10 4E 05 F1 | 	add	fp, #16
07518     A7 22 02 FB | 	rdlong	local03, fp
0751c     0C 4E 85 F1 | 	sub	fp, #12
07520     A7 20 02 FB | 	rdlong	local02, fp
07524     04 4E 85 F1 | 	sub	fp, #4
07528     10 23 0A F2 | 	cmp	local03, local02 wz
0752c     50 FF 9F 5D |  if_ne	jmp	#LR__0630
07530                 | LR__0632
07530                 | '   if gotoheader(0)=gotoline then
07530     10 4E 05 F1 | 	add	fp, #16
07534     A7 22 02 FB | 	rdlong	local03, fp
07538     0C 4E 85 F1 | 	sub	fp, #12
0753c     A7 1E 02 FB | 	rdlong	local01, fp
07540     04 4E 85 F1 | 	sub	fp, #4
07544     0F 23 0A F2 | 	cmp	local03, local01 wz
07548     7C 00 90 5D |  if_ne	jmp	#LR__0633
0754c     69 00 00 FF 
07550     50 E4 05 F1 | 	add	objptr, ##53840
07554     F2 1E 02 FB | 	rdlong	local01, objptr
07558     0F 21 02 F6 | 	mov	local02, local01
0755c     01 20 66 F0 | 	shl	local02, #1
07560     0F 21 02 F1 | 	add	local02, local01
07564     02 20 66 F0 | 	shl	local02, #2
07568     03 00 00 FF 
0756c     00 E4 85 F1 | 	sub	objptr, ##1536
07570     F2 20 02 F1 | 	add	local02, objptr
07574     0C 4E 05 F1 | 	add	fp, #12
07578     A7 22 02 FB | 	rdlong	local03, fp
0757c     10 23 62 FC | 	wrlong	local03, local02
07580     03 00 00 FF 
07584     00 E4 05 F1 | 	add	objptr, ##1536
07588     F2 1E 02 FB | 	rdlong	local01, objptr
0758c     0F 21 02 F6 | 	mov	local02, local01
07590     01 20 66 F0 | 	shl	local02, #1
07594     0F 21 02 F1 | 	add	local02, local01
07598     02 20 66 F0 | 	shl	local02, #2
0759c     03 00 00 FF 
075a0     00 E4 85 F1 | 	sub	objptr, ##1536
075a4     F2 20 02 F1 | 	add	local02, objptr
075a8     08 4E 85 F1 | 	sub	fp, #8
075ac     A7 22 02 FB | 	rdlong	local03, fp
075b0     04 4E 85 F1 | 	sub	fp, #4
075b4     04 20 06 F1 | 	add	local02, #4
075b8     10 23 62 FC | 	wrlong	local03, local02
075bc     66 00 00 FF 
075c0     50 E4 85 F1 | 	sub	objptr, ##52304
075c4     A4 00 90 FD | 	jmp	#LR__0634
075c8                 | LR__0633
075c8     69 00 00 FF 
075cc     50 E4 05 F1 | 	add	objptr, ##53840
075d0     F2 1E 02 FB | 	rdlong	local01, objptr
075d4     0F 21 02 F6 | 	mov	local02, local01
075d8     01 20 66 F0 | 	shl	local02, #1
075dc     0F 21 02 F1 | 	add	local02, local01
075e0     02 20 66 F0 | 	shl	local02, #2
075e4     03 00 00 FF 
075e8     00 E4 85 F1 | 	sub	objptr, ##1536
075ec     F2 20 02 F1 | 	add	local02, objptr
075f0     00 00 C0 FF 
075f4     10 01 68 FC | 	wrlong	##-2147483648, local02
075f8     03 00 00 FF 
075fc     00 E4 05 F1 | 	add	objptr, ##1536
07600     F2 1E 02 FB | 	rdlong	local01, objptr
07604     0F 21 02 F6 | 	mov	local02, local01
07608     01 20 66 F0 | 	shl	local02, #1
0760c     0F 21 02 F1 | 	add	local02, local01
07610     02 20 66 F0 | 	shl	local02, #2
07614     03 00 00 FF 
07618     00 E4 85 F1 | 	sub	objptr, ##1536
0761c     F2 20 02 F1 | 	add	local02, objptr
07620     04 4E 05 F1 | 	add	fp, #4
07624     A7 22 02 FB | 	rdlong	local03, fp
07628     04 4E 85 F1 | 	sub	fp, #4
0762c     04 20 06 F1 | 	add	local02, #4
07630     10 23 62 FC | 	wrlong	local03, local02
07634     03 00 00 FF 
07638     00 E4 05 F1 | 	add	objptr, ##1536
0763c     F2 1E 02 FB | 	rdlong	local01, objptr
07640     0F 21 02 F6 | 	mov	local02, local01
07644     01 20 66 F0 | 	shl	local02, #1
07648     0F 21 02 F1 | 	add	local02, local01
0764c     02 20 66 F0 | 	shl	local02, #2
07650     03 00 00 FF 
07654     00 E4 85 F1 | 	sub	objptr, ##1536
07658     F2 20 02 F1 | 	add	local02, objptr
0765c     08 20 06 F1 | 	add	local02, #8
07660     10 A7 68 FC | 	wrlong	#83, local02
07664     66 00 00 FF 
07668     50 E4 85 F1 | 	sub	objptr, ##52304
0766c                 | LR__0634
0766c     69 00 00 FF 
07670     50 E4 05 F1 | 	add	objptr, ##53840
07674     F2 22 02 FB | 	rdlong	local03, objptr
07678     01 22 06 F1 | 	add	local03, #1
0767c     F2 22 62 FC | 	wrlong	local03, objptr
07680     69 00 00 FF 
07684     50 E4 85 F1 | 	sub	objptr, ##53840
07688     40 00 90 FD | 	jmp	#LR__0636
0768c                 | LR__0635
0768c                 | '    print "We have a slow goto, todo  "
0768c     00 12 06 F6 | 	mov	arg01, #0
07690     DC 56 B1 FD | 	call	#__system___getiolock_0383
07694     FD 12 02 F6 | 	mov	arg01, result1
07698     BC 01 B1 FD | 	call	#__system___lockmem
0769c     36 01 00 FF 
076a0     83 14 06 F6 | 	mov	arg02, ##@LR__4391
076a4     00 12 06 F6 | 	mov	arg01, #0
076a8     00 16 06 F6 | 	mov	arg03, #0
076ac     9C 0E B1 FD | 	call	#__system___basic_print_string
076b0     00 12 06 F6 | 	mov	arg01, #0
076b4     0A 14 06 F6 | 	mov	arg02, #10
076b8     00 16 06 F6 | 	mov	arg03, #0
076bc     34 0E B1 FD | 	call	#__system___basic_print_char
076c0     00 12 06 F6 | 	mov	arg01, #0
076c4     A8 56 B1 FD | 	call	#__system___getiolock_0383
076c8     FD 00 68 FC | 	wrlong	#0, result1
076cc                 | LR__0636
076cc                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
076cc                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
076cc                 | ' return 0
076cc     00 FA 05 F6 | 	mov	result1, #0
076d0     A7 F0 03 F6 | 	mov	ptra, fp
076d4     B2 00 A0 FD | 	call	#popregs_
076d8                 | _compile_goto_ret
076d8     2D 00 64 FD | 	ret
076dc                 | 
076dc                 | ' 
076dc                 | ' 
076dc                 | ' 
076dc                 | ' 
076dc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
076dc                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
076dc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
076dc                 | ' 
076dc                 | ' 
076dc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
076dc                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
076dc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
076dc                 | ' 
076dc                 | ' 
076dc                 | ' function expr() as integer 
076dc                 | _expr
076dc     07 4A 05 F6 | 	mov	COUNT_, #7
076e0     A8 00 A0 FD | 	call	#pushregs_
076e4                 | _expr_enter
076e4     56 00 00 FF 
076e8     18 E4 05 F1 | 	add	objptr, ##44056
076ec     F2 24 02 FB | 	rdlong	local04, objptr
076f0     03 24 66 F0 | 	shl	local04, #3
076f4     02 00 00 FF 
076f8     38 E4 85 F1 | 	sub	objptr, ##1080
076fc     F2 24 02 F1 | 	add	local04, objptr
07700     04 24 06 F1 | 	add	local04, #4
07704     12 27 02 FB | 	rdlong	local05, local04
07708                 | ' 
07708                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
07708     FE 27 0E F2 | 	cmp	local05, #510 wz
0770c     53 00 00 FF 
07710     E0 E5 85 F1 | 	sub	objptr, ##42976
07714     C4 00 90 5D |  if_ne	jmp	#LR__0640
07718     1D 1E 06 F6 | 	mov	local01, #29
0771c     FF 22 06 F6 | 	mov	local03, #255
07720     0F 29 02 F6 | 	mov	local06, local01
07724     10 2B 02 F6 | 	mov	local07, local02
07728     11 1F 02 F6 | 	mov	local01, local03
0772c     69 00 00 FF 
07730     50 E4 05 F1 | 	add	objptr, ##53840
07734     F2 26 02 FB | 	rdlong	local05, objptr
07738     13 25 02 F6 | 	mov	local04, local05
0773c     01 24 66 F0 | 	shl	local04, #1
07740     13 25 02 F1 | 	add	local04, local05
07744     02 24 66 F0 | 	shl	local04, #2
07748     03 00 00 FF 
0774c     00 E4 85 F1 | 	sub	objptr, ##1536
07750     F2 24 02 F1 | 	add	local04, objptr
07754     12 29 62 FC | 	wrlong	local06, local04
07758     03 00 00 FF 
0775c     00 E4 05 F1 | 	add	objptr, ##1536
07760     F2 28 02 FB | 	rdlong	local06, objptr
07764     14 27 02 F6 | 	mov	local05, local06
07768     01 26 66 F0 | 	shl	local05, #1
0776c     14 27 02 F1 | 	add	local05, local06
07770     02 26 66 F0 | 	shl	local05, #2
07774     03 00 00 FF 
07778     00 E4 85 F1 | 	sub	objptr, ##1536
0777c     F2 26 02 F1 | 	add	local05, objptr
07780     04 26 06 F1 | 	add	local05, #4
07784     13 2B 62 FC | 	wrlong	local07, local05
07788     03 00 00 FF 
0778c     00 E4 05 F1 | 	add	objptr, ##1536
07790     F2 2A 02 FB | 	rdlong	local07, objptr
07794     15 29 02 F6 | 	mov	local06, local07
07798     01 28 66 F0 | 	shl	local06, #1
0779c     15 29 02 F1 | 	add	local06, local07
077a0     02 28 66 F0 | 	shl	local06, #2
077a4     03 00 00 FF 
077a8     00 E4 85 F1 | 	sub	objptr, ##1536
077ac     F2 28 02 F1 | 	add	local06, objptr
077b0     08 28 06 F1 | 	add	local06, #8
077b4     14 1F 62 FC | 	wrlong	local01, local06
077b8     03 00 00 FF 
077bc     00 E4 05 F1 | 	add	objptr, ##1536
077c0     F2 28 02 FB | 	rdlong	local06, objptr
077c4     01 28 06 F1 | 	add	local06, #1
077c8     F2 28 62 FC | 	wrlong	local06, objptr
077cc     69 00 00 FF 
077d0     50 E4 85 F1 | 	sub	objptr, ##53840
077d4     1D FA 05 F6 | 	mov	result1, #29
077d8     54 01 90 FD | 	jmp	#LR__0643
077dc                 | LR__0640
077dc     00 1E 06 F6 | 	mov	local01, #0
077e0     58 01 B0 FD | 	call	#_addsub
077e4     56 00 00 FF 
077e8     18 E4 05 F1 | 	add	objptr, ##44056
077ec     F2 24 02 FB | 	rdlong	local04, objptr
077f0     03 24 66 F0 | 	shl	local04, #3
077f4     02 00 00 FF 
077f8     38 E4 85 F1 | 	sub	objptr, ##1080
077fc     F2 24 02 F1 | 	add	local04, objptr
07800     04 24 06 F1 | 	add	local04, #4
07804     12 27 02 FB | 	rdlong	local05, local04
07808                 | ' t3.result.uresult=0
07808                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
07808                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
07808                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
07808     53 00 00 FF 
0780c     E0 E5 85 F1 | 	sub	objptr, ##42976
07810                 | LR__0641
07810     1B 26 0E F2 | 	cmp	local05, #27 wz
07814     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
07818     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
0781c     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
07820     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
07824     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
07828     00 01 90 5D |  if_ne	jmp	#LR__0642
0782c     56 00 00 FF 
07830     18 E4 05 F1 | 	add	objptr, ##44056
07834     F2 28 02 FB | 	rdlong	local06, objptr
07838     01 28 06 F1 | 	add	local06, #1
0783c     F2 28 62 FC | 	wrlong	local06, objptr
07840     56 00 00 FF 
07844     18 E4 85 F1 | 	sub	objptr, ##44056
07848     F0 00 B0 FD | 	call	#_addsub
0784c     13 23 02 F6 | 	mov	local03, local05
07850     0F 29 02 F6 | 	mov	local06, local01
07854     10 2B 02 F6 | 	mov	local07, local02
07858     11 27 02 F6 | 	mov	local05, local03
0785c     69 00 00 FF 
07860     50 E4 05 F1 | 	add	objptr, ##53840
07864     F2 24 02 FB | 	rdlong	local04, objptr
07868     12 FB 01 F6 | 	mov	result1, local04
0786c     01 FA 65 F0 | 	shl	result1, #1
07870     12 FB 01 F1 | 	add	result1, local04
07874     02 FA 65 F0 | 	shl	result1, #2
07878     03 00 00 FF 
0787c     00 E4 85 F1 | 	sub	objptr, ##1536
07880     F2 FA 01 F1 | 	add	result1, objptr
07884     FD 28 62 FC | 	wrlong	local06, result1
07888     03 00 00 FF 
0788c     00 E4 05 F1 | 	add	objptr, ##1536
07890     F2 28 02 FB | 	rdlong	local06, objptr
07894     14 25 02 F6 | 	mov	local04, local06
07898     01 24 66 F0 | 	shl	local04, #1
0789c     14 25 02 F1 | 	add	local04, local06
078a0     02 24 66 F0 | 	shl	local04, #2
078a4     03 00 00 FF 
078a8     00 E4 85 F1 | 	sub	objptr, ##1536
078ac     F2 24 02 F1 | 	add	local04, objptr
078b0     04 24 06 F1 | 	add	local04, #4
078b4     12 2B 62 FC | 	wrlong	local07, local04
078b8     03 00 00 FF 
078bc     00 E4 05 F1 | 	add	objptr, ##1536
078c0     F2 2A 02 FB | 	rdlong	local07, objptr
078c4     15 29 02 F6 | 	mov	local06, local07
078c8     01 28 66 F0 | 	shl	local06, #1
078cc     15 29 02 F1 | 	add	local06, local07
078d0     02 28 66 F0 | 	shl	local06, #2
078d4     03 00 00 FF 
078d8     00 E4 85 F1 | 	sub	objptr, ##1536
078dc     F2 28 02 F1 | 	add	local06, objptr
078e0     08 28 06 F1 | 	add	local06, #8
078e4     14 27 62 FC | 	wrlong	local05, local06
078e8     03 00 00 FF 
078ec     00 E4 05 F1 | 	add	objptr, ##1536
078f0     F2 28 02 FB | 	rdlong	local06, objptr
078f4     01 28 06 F1 | 	add	local06, #1
078f8     F2 28 62 FC | 	wrlong	local06, objptr
078fc     13 00 00 FF 
07900     38 E4 85 F1 | 	sub	objptr, ##9784
07904     F2 24 02 FB | 	rdlong	local04, objptr
07908     03 24 66 F0 | 	shl	local04, #3
0790c     02 00 00 FF 
07910     38 E4 85 F1 | 	sub	objptr, ##1080
07914     F2 24 02 F1 | 	add	local04, objptr
07918     04 24 06 F1 | 	add	local04, #4
0791c     12 27 02 FB | 	rdlong	local05, local04
07920     53 00 00 FF 
07924     E0 E5 85 F1 | 	sub	objptr, ##42976
07928     E4 FE 9F FD | 	jmp	#LR__0641
0792c                 | LR__0642
0792c                 | ' return 0  
0792c     00 FA 05 F6 | 	mov	result1, #0
07930                 | LR__0643
07930     A7 F0 03 F6 | 	mov	ptra, fp
07934     B2 00 A0 FD | 	call	#popregs_
07938                 | _expr_ret
07938     2D 00 64 FD | 	ret
0793c                 | 
0793c                 | ' 
0793c                 | ' 
0793c                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
0793c                 | ' 
0793c                 | ' function addsub() as integer 
0793c                 | _addsub
0793c     07 4A 05 F6 | 	mov	COUNT_, #7
07940     A8 00 A0 FD | 	call	#pushregs_
07944                 | _addsub_enter
07944     00 1E 06 F6 | 	mov	local01, #0
07948     50 01 B0 FD | 	call	#_muldiv
0794c     56 00 00 FF 
07950     18 E4 05 F1 | 	add	objptr, ##44056
07954     F2 24 02 FB | 	rdlong	local04, objptr
07958     03 24 66 F0 | 	shl	local04, #3
0795c     02 00 00 FF 
07960     38 E4 85 F1 | 	sub	objptr, ##1080
07964     F2 24 02 F1 | 	add	local04, objptr
07968     04 24 06 F1 | 	add	local04, #4
0796c     12 27 02 FB | 	rdlong	local05, local04
07970                 | ' t3.result.uresult=0
07970                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
07970                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
07970                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
07970     53 00 00 FF 
07974     E0 E5 85 F1 | 	sub	objptr, ##42976
07978                 | LR__0650
07978     01 26 0E F2 | 	cmp	local05, #1 wz
0797c     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
07980     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
07984     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
07988     00 01 90 5D |  if_ne	jmp	#LR__0651
0798c     56 00 00 FF 
07990     18 E4 05 F1 | 	add	objptr, ##44056
07994     F2 24 02 FB | 	rdlong	local04, objptr
07998     01 24 06 F1 | 	add	local04, #1
0799c     F2 24 62 FC | 	wrlong	local04, objptr
079a0     56 00 00 FF 
079a4     18 E4 85 F1 | 	sub	objptr, ##44056
079a8     F0 00 B0 FD | 	call	#_muldiv
079ac     13 23 02 F6 | 	mov	local03, local05
079b0     0F 29 02 F6 | 	mov	local06, local01
079b4     10 2B 02 F6 | 	mov	local07, local02
079b8     11 27 02 F6 | 	mov	local05, local03
079bc     69 00 00 FF 
079c0     50 E4 05 F1 | 	add	objptr, ##53840
079c4     F2 24 02 FB | 	rdlong	local04, objptr
079c8     12 FB 01 F6 | 	mov	result1, local04
079cc     01 FA 65 F0 | 	shl	result1, #1
079d0     12 FB 01 F1 | 	add	result1, local04
079d4     02 FA 65 F0 | 	shl	result1, #2
079d8     03 00 00 FF 
079dc     00 E4 85 F1 | 	sub	objptr, ##1536
079e0     F2 FA 01 F1 | 	add	result1, objptr
079e4     FD 28 62 FC | 	wrlong	local06, result1
079e8     03 00 00 FF 
079ec     00 E4 05 F1 | 	add	objptr, ##1536
079f0     F2 28 02 FB | 	rdlong	local06, objptr
079f4     14 25 02 F6 | 	mov	local04, local06
079f8     01 24 66 F0 | 	shl	local04, #1
079fc     14 25 02 F1 | 	add	local04, local06
07a00     02 24 66 F0 | 	shl	local04, #2
07a04     03 00 00 FF 
07a08     00 E4 85 F1 | 	sub	objptr, ##1536
07a0c     F2 24 02 F1 | 	add	local04, objptr
07a10     04 24 06 F1 | 	add	local04, #4
07a14     12 2B 62 FC | 	wrlong	local07, local04
07a18     03 00 00 FF 
07a1c     00 E4 05 F1 | 	add	objptr, ##1536
07a20     F2 2A 02 FB | 	rdlong	local07, objptr
07a24     15 29 02 F6 | 	mov	local06, local07
07a28     01 28 66 F0 | 	shl	local06, #1
07a2c     15 29 02 F1 | 	add	local06, local07
07a30     02 28 66 F0 | 	shl	local06, #2
07a34     03 00 00 FF 
07a38     00 E4 85 F1 | 	sub	objptr, ##1536
07a3c     F2 28 02 F1 | 	add	local06, objptr
07a40     08 28 06 F1 | 	add	local06, #8
07a44     14 27 62 FC | 	wrlong	local05, local06
07a48     03 00 00 FF 
07a4c     00 E4 05 F1 | 	add	objptr, ##1536
07a50     F2 28 02 FB | 	rdlong	local06, objptr
07a54     01 28 06 F1 | 	add	local06, #1
07a58     F2 28 62 FC | 	wrlong	local06, objptr
07a5c     13 00 00 FF 
07a60     38 E4 85 F1 | 	sub	objptr, ##9784
07a64     F2 24 02 FB | 	rdlong	local04, objptr
07a68     03 24 66 F0 | 	shl	local04, #3
07a6c     02 00 00 FF 
07a70     38 E4 85 F1 | 	sub	objptr, ##1080
07a74     F2 24 02 F1 | 	add	local04, objptr
07a78     04 24 06 F1 | 	add	local04, #4
07a7c     12 27 02 FB | 	rdlong	local05, local04
07a80     53 00 00 FF 
07a84     E0 E5 85 F1 | 	sub	objptr, ##42976
07a88     EC FE 9F FD | 	jmp	#LR__0650
07a8c                 | LR__0651
07a8c                 | '   return 0
07a8c     00 FA 05 F6 | 	mov	result1, #0
07a90     A7 F0 03 F6 | 	mov	ptra, fp
07a94     B2 00 A0 FD | 	call	#popregs_
07a98                 | _addsub_ret
07a98     2D 00 64 FD | 	ret
07a9c                 | 
07a9c                 | ' 
07a9c                 | ' sub muldiv()
07a9c                 | _muldiv
07a9c     08 4A 05 F6 | 	mov	COUNT_, #8
07aa0     A8 00 A0 FD | 	call	#pushregs_
07aa4                 | _muldiv_enter
07aa4     00 1E 06 F6 | 	mov	local01, #0
07aa8     58 01 B0 FD | 	call	#_getvalue
07aac     56 00 00 FF 
07ab0     18 E4 05 F1 | 	add	objptr, ##44056
07ab4     F2 24 02 FB | 	rdlong	local04, objptr
07ab8     03 24 66 F0 | 	shl	local04, #3
07abc     02 00 00 FF 
07ac0     38 E4 85 F1 | 	sub	objptr, ##1080
07ac4     F2 24 02 F1 | 	add	local04, objptr
07ac8     04 24 06 F1 | 	add	local04, #4
07acc     12 27 02 FB | 	rdlong	local05, local04
07ad0                 | ' t3.result.uresult=0
07ad0                 | ' getvalue()    
07ad0                 | ' op = lparts(ct).token
07ad0                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
07ad0     53 00 00 FF 
07ad4     E0 E5 85 F1 | 	sub	objptr, ##42976
07ad8                 | LR__0660
07ad8     05 26 0E F2 | 	cmp	local05, #5 wz
07adc     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
07ae0     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
07ae4     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
07ae8     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
07aec     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
07af0     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
07af4     00 01 90 5D |  if_ne	jmp	#LR__0661
07af8     56 00 00 FF 
07afc     18 E4 05 F1 | 	add	objptr, ##44056
07b00     F2 24 02 FB | 	rdlong	local04, objptr
07b04     01 24 06 F1 | 	add	local04, #1
07b08     F2 24 62 FC | 	wrlong	local04, objptr
07b0c     56 00 00 FF 
07b10     18 E4 85 F1 | 	sub	objptr, ##44056
07b14     EC 00 B0 FD | 	call	#_getvalue
07b18     13 23 02 F6 | 	mov	local03, local05
07b1c     0F 29 02 F6 | 	mov	local06, local01
07b20     10 2B 02 F6 | 	mov	local07, local02
07b24     11 27 02 F6 | 	mov	local05, local03
07b28     69 00 00 FF 
07b2c     50 E4 05 F1 | 	add	objptr, ##53840
07b30     F2 24 02 FB | 	rdlong	local04, objptr
07b34     12 2D 02 F6 | 	mov	local08, local04
07b38     01 2C 66 F0 | 	shl	local08, #1
07b3c     12 2D 02 F1 | 	add	local08, local04
07b40     02 2C 66 F0 | 	shl	local08, #2
07b44     03 00 00 FF 
07b48     00 E4 85 F1 | 	sub	objptr, ##1536
07b4c     F2 2C 02 F1 | 	add	local08, objptr
07b50     16 29 62 FC | 	wrlong	local06, local08
07b54     03 00 00 FF 
07b58     00 E4 05 F1 | 	add	objptr, ##1536
07b5c     F2 2C 02 FB | 	rdlong	local08, objptr
07b60     16 29 02 F6 | 	mov	local06, local08
07b64     01 28 66 F0 | 	shl	local06, #1
07b68     16 29 02 F1 | 	add	local06, local08
07b6c     02 28 66 F0 | 	shl	local06, #2
07b70     03 00 00 FF 
07b74     00 E4 85 F1 | 	sub	objptr, ##1536
07b78     F2 28 02 F1 | 	add	local06, objptr
07b7c     04 28 06 F1 | 	add	local06, #4
07b80     14 2B 62 FC | 	wrlong	local07, local06
07b84     03 00 00 FF 
07b88     00 E4 05 F1 | 	add	objptr, ##1536
07b8c     F2 2C 02 FB | 	rdlong	local08, objptr
07b90     16 2B 02 F6 | 	mov	local07, local08
07b94     01 2A 66 F0 | 	shl	local07, #1
07b98     16 2B 02 F1 | 	add	local07, local08
07b9c     02 2A 66 F0 | 	shl	local07, #2
07ba0     03 00 00 FF 
07ba4     00 E4 85 F1 | 	sub	objptr, ##1536
07ba8     F2 2A 02 F1 | 	add	local07, objptr
07bac     08 2A 06 F1 | 	add	local07, #8
07bb0     15 27 62 FC | 	wrlong	local05, local07
07bb4     03 00 00 FF 
07bb8     00 E4 05 F1 | 	add	objptr, ##1536
07bbc     F2 28 02 FB | 	rdlong	local06, objptr
07bc0     01 28 06 F1 | 	add	local06, #1
07bc4     F2 28 62 FC | 	wrlong	local06, objptr
07bc8     13 00 00 FF 
07bcc     38 E4 85 F1 | 	sub	objptr, ##9784
07bd0     F2 24 02 FB | 	rdlong	local04, objptr
07bd4     03 24 66 F0 | 	shl	local04, #3
07bd8     02 00 00 FF 
07bdc     38 E4 85 F1 | 	sub	objptr, ##1080
07be0     F2 24 02 F1 | 	add	local04, objptr
07be4     04 24 06 F1 | 	add	local04, #4
07be8     12 27 02 FB | 	rdlong	local05, local04
07bec     53 00 00 FF 
07bf0     E0 E5 85 F1 | 	sub	objptr, ##42976
07bf4     E0 FE 9F FD | 	jmp	#LR__0660
07bf8                 | LR__0661
07bf8     A7 F0 03 F6 | 	mov	ptra, fp
07bfc     B2 00 A0 FD | 	call	#popregs_
07c00                 | _muldiv_ret
07c00     2D 00 64 FD | 	ret
07c04                 | 
07c04                 | ' 
07c04                 | ' sub getvalue() 
07c04                 | _getvalue
07c04     0B 4A 05 F6 | 	mov	COUNT_, #11
07c08     A8 00 A0 FD | 	call	#pushregs_
07c0c                 | _getvalue_enter
07c0c     01 24 06 F6 | 	mov	local04, #1
07c10     00 1E 06 F6 | 	mov	local01, #0
07c14     1D 22 06 F6 | 	mov	local03, #29
07c18     56 00 00 FF 
07c1c     18 E4 05 F1 | 	add	objptr, ##44056
07c20     F2 16 02 FB | 	rdlong	arg03, objptr
07c24     03 16 66 F0 | 	shl	arg03, #3
07c28     02 00 00 FF 
07c2c     38 E4 85 F1 | 	sub	objptr, ##1080
07c30     F2 16 02 F1 | 	add	arg03, objptr
07c34     04 16 06 F1 | 	add	arg03, #4
07c38     0B 27 02 FB | 	rdlong	local05, arg03
07c3c                 | ' m=1
07c3c                 | ' t1.result.uresult=0: t1.result_type=result_uint
07c3c                 | ' op=lparts(ct).token
07c3c                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
07c3c     02 26 0E F2 | 	cmp	local05, #2 wz
07c40     53 00 00 FF 
07c44     E0 E5 85 F1 | 	sub	objptr, ##42976
07c48     38 00 90 5D |  if_ne	jmp	#LR__0670
07c4c     01 24 66 F6 | 	neg	local04, #1
07c50     56 00 00 FF 
07c54     18 E4 05 F1 | 	add	objptr, ##44056
07c58     F2 26 02 FB | 	rdlong	local05, objptr
07c5c     01 26 06 F1 | 	add	local05, #1
07c60     F2 26 62 FC | 	wrlong	local05, objptr
07c64     03 26 66 F0 | 	shl	local05, #3
07c68     02 00 00 FF 
07c6c     38 E4 85 F1 | 	sub	objptr, ##1080
07c70     F2 26 02 F1 | 	add	local05, objptr
07c74     04 26 06 F1 | 	add	local05, #4
07c78     13 27 02 FB | 	rdlong	local05, local05
07c7c     53 00 00 FF 
07c80     E0 E5 85 F1 | 	sub	objptr, ##42976
07c84                 | LR__0670
07c84                 | ' select case op
07c84     01 00 00 FF 
07c88     00 26 0E F2 | 	cmp	local05, ##512 wz
07c8c     3C 00 90 AD |  if_e	jmp	#LR__0671
07c90     01 00 00 FF 
07c94     01 26 0E F2 | 	cmp	local05, ##513 wz
07c98     88 01 90 AD |  if_e	jmp	#LR__0674
07c9c     01 00 00 FF 
07ca0     02 26 0E F2 | 	cmp	local05, ##514 wz
07ca4     84 02 90 AD |  if_e	jmp	#LR__0675
07ca8     01 00 00 FF 
07cac     03 26 0E F2 | 	cmp	local05, ##515 wz
07cb0     E8 03 90 AD |  if_e	jmp	#LR__0678
07cb4     01 00 00 FF 
07cb8     04 26 0E F2 | 	cmp	local05, ##516 wz
07cbc     E0 05 90 AD |  if_e	jmp	#LR__0683
07cc0     15 26 0E F2 | 	cmp	local05, #21 wz
07cc4     00 06 90 AD |  if_e	jmp	#LR__0684
07cc8     70 06 90 FD | 	jmp	#LR__0685
07ccc                 | LR__0671
07ccc                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_uint ' todo token_int64
07ccc     01 24 0E F2 | 	cmp	local04, #1 wz
07cd0     3C 00 90 5D |  if_ne	jmp	#LR__0672
07cd4     56 00 00 FF 
07cd8     18 E4 05 F1 | 	add	objptr, ##44056
07cdc     F2 26 02 FB | 	rdlong	local05, objptr
07ce0     03 26 66 F0 | 	shl	local05, #3
07ce4     02 00 00 FF 
07ce8     38 E4 85 F1 | 	sub	objptr, ##1080
07cec     F2 26 02 F1 | 	add	local05, objptr
07cf0     13 13 02 FB | 	rdlong	arg01, local05
07cf4     00 14 06 F6 | 	mov	arg02, #0
07cf8     53 00 00 FF 
07cfc     E0 E5 85 F1 | 	sub	objptr, ##42976
07d00     DC 2A B1 FD | 	call	#__system____builtin_atoi
07d04     FD 24 02 FD | 	qmul	local04, result1
07d08     18 1E 62 FD | 	getqx	local01
07d0c     1D 22 06 F6 | 	mov	local03, #29
07d10                 | LR__0672
07d10                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
07d10     FF FF 7F FF 
07d14     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07d18     3C 00 90 5D |  if_ne	jmp	#LR__0673
07d1c     56 00 00 FF 
07d20     18 E4 05 F1 | 	add	objptr, ##44056
07d24     F2 26 02 FB | 	rdlong	local05, objptr
07d28     03 26 66 F0 | 	shl	local05, #3
07d2c     02 00 00 FF 
07d30     38 E4 85 F1 | 	sub	objptr, ##1080
07d34     F2 26 02 F1 | 	add	local05, objptr
07d38     13 13 02 FB | 	rdlong	arg01, local05
07d3c     00 14 06 F6 | 	mov	arg02, #0
07d40     53 00 00 FF 
07d44     E0 E5 85 F1 | 	sub	objptr, ##42976
07d48     94 2A B1 FD | 	call	#__system____builtin_atoi
07d4c     FD 24 02 FD | 	qmul	local04, result1
07d50     18 1E 62 FD | 	getqx	local01
07d54     1C 22 06 F6 | 	mov	local03, #28
07d58                 | LR__0673
07d58     0F 29 02 F6 | 	mov	local06, local01
07d5c     10 2B 02 F6 | 	mov	local07, local02
07d60     11 27 02 F6 | 	mov	local05, local03
07d64     69 00 00 FF 
07d68     50 E4 05 F1 | 	add	objptr, ##53840
07d6c     F2 1E 02 FB | 	rdlong	local01, objptr
07d70     0F 25 02 F6 | 	mov	local04, local01
07d74     01 24 66 F0 | 	shl	local04, #1
07d78     0F 25 02 F1 | 	add	local04, local01
07d7c     02 24 66 F0 | 	shl	local04, #2
07d80     03 00 00 FF 
07d84     00 E4 85 F1 | 	sub	objptr, ##1536
07d88     F2 24 02 F1 | 	add	local04, objptr
07d8c     12 29 62 FC | 	wrlong	local06, local04
07d90     03 00 00 FF 
07d94     00 E4 05 F1 | 	add	objptr, ##1536
07d98     F2 28 02 FB | 	rdlong	local06, objptr
07d9c     14 1F 02 F6 | 	mov	local01, local06
07da0     01 1E 66 F0 | 	shl	local01, #1
07da4     14 1F 02 F1 | 	add	local01, local06
07da8     02 1E 66 F0 | 	shl	local01, #2
07dac     03 00 00 FF 
07db0     00 E4 85 F1 | 	sub	objptr, ##1536
07db4     F2 1E 02 F1 | 	add	local01, objptr
07db8     04 1E 06 F1 | 	add	local01, #4
07dbc     0F 2B 62 FC | 	wrlong	local07, local01
07dc0     03 00 00 FF 
07dc4     00 E4 05 F1 | 	add	objptr, ##1536
07dc8     F2 2A 02 FB | 	rdlong	local07, objptr
07dcc     15 29 02 F6 | 	mov	local06, local07
07dd0     01 28 66 F0 | 	shl	local06, #1
07dd4     15 29 02 F1 | 	add	local06, local07
07dd8     02 28 66 F0 | 	shl	local06, #2
07ddc     03 00 00 FF 
07de0     00 E4 85 F1 | 	sub	objptr, ##1536
07de4     F2 28 02 F1 | 	add	local06, objptr
07de8     08 28 06 F1 | 	add	local06, #8
07dec     14 27 62 FC | 	wrlong	local05, local06
07df0     03 00 00 FF 
07df4     00 E4 05 F1 | 	add	objptr, ##1536
07df8     F2 28 02 FB | 	rdlong	local06, objptr
07dfc     01 28 06 F1 | 	add	local06, #1
07e00     F2 28 62 FC | 	wrlong	local06, objptr
07e04     13 00 00 FF 
07e08     38 E4 85 F1 | 	sub	objptr, ##9784
07e0c     F2 28 02 FB | 	rdlong	local06, objptr
07e10     01 28 06 F1 | 	add	local06, #1
07e14     F2 28 62 FC | 	wrlong	local06, objptr
07e18     56 00 00 FF 
07e1c     18 E4 85 F1 | 	sub	objptr, ##44056
07e20     3C 05 90 FD | 	jmp	#LR__0686
07e24                 | LR__0674
07e24     56 00 00 FF 
07e28     18 E4 05 F1 | 	add	objptr, ##44056
07e2c     F2 28 02 FB | 	rdlong	local06, objptr
07e30     03 28 66 F0 | 	shl	local06, #3
07e34     02 00 00 FF 
07e38     38 E4 85 F1 | 	sub	objptr, ##1080
07e3c     F2 28 02 F1 | 	add	local06, objptr
07e40     14 13 02 FB | 	rdlong	arg01, local06
07e44     00 14 06 F6 | 	mov	arg02, #0
07e48     53 00 00 FF 
07e4c     E0 E5 85 F1 | 	sub	objptr, ##42976
07e50     8C 29 B1 FD | 	call	#__system____builtin_atoi
07e54     FD 24 02 FD | 	qmul	local04, result1
07e58     69 00 00 FF 
07e5c     50 E4 05 F1 | 	add	objptr, ##53840
07e60     F2 28 02 FB | 	rdlong	local06, objptr
07e64     14 2D 02 F6 | 	mov	local08, local06
07e68     01 2C 66 F0 | 	shl	local08, #1
07e6c     14 2D 02 F1 | 	add	local08, local06
07e70     02 2C 66 F0 | 	shl	local08, #2
07e74     03 00 00 FF 
07e78     00 E4 85 F1 | 	sub	objptr, ##1536
07e7c     F2 2C 02 F1 | 	add	local08, objptr
07e80     03 00 00 FF 
07e84     00 E4 05 F1 | 	add	objptr, ##1536
07e88     18 1E 62 FD | 	getqx	local01
07e8c     1C 22 06 F6 | 	mov	local03, #28
07e90     0F 29 02 F6 | 	mov	local06, local01
07e94     10 2B 02 F6 | 	mov	local07, local02
07e98     16 29 62 FC | 	wrlong	local06, local08
07e9c     11 2D 02 F6 | 	mov	local08, local03
07ea0     F2 28 02 FB | 	rdlong	local06, objptr
07ea4     14 27 02 F6 | 	mov	local05, local06
07ea8     01 26 66 F0 | 	shl	local05, #1
07eac     14 27 02 F1 | 	add	local05, local06
07eb0     02 26 66 F0 | 	shl	local05, #2
07eb4     03 00 00 FF 
07eb8     00 E4 85 F1 | 	sub	objptr, ##1536
07ebc     F2 26 02 F1 | 	add	local05, objptr
07ec0     04 26 06 F1 | 	add	local05, #4
07ec4     13 2B 62 FC | 	wrlong	local07, local05
07ec8     03 00 00 FF 
07ecc     00 E4 05 F1 | 	add	objptr, ##1536
07ed0     F2 2A 02 FB | 	rdlong	local07, objptr
07ed4     15 29 02 F6 | 	mov	local06, local07
07ed8     01 28 66 F0 | 	shl	local06, #1
07edc     15 29 02 F1 | 	add	local06, local07
07ee0     02 28 66 F0 | 	shl	local06, #2
07ee4     03 00 00 FF 
07ee8     00 E4 85 F1 | 	sub	objptr, ##1536
07eec     F2 28 02 F1 | 	add	local06, objptr
07ef0     08 28 06 F1 | 	add	local06, #8
07ef4     14 2D 62 FC | 	wrlong	local08, local06
07ef8     03 00 00 FF 
07efc     00 E4 05 F1 | 	add	objptr, ##1536
07f00     F2 28 02 FB | 	rdlong	local06, objptr
07f04     01 28 06 F1 | 	add	local06, #1
07f08     F2 28 62 FC | 	wrlong	local06, objptr
07f0c     13 00 00 FF 
07f10     38 E4 85 F1 | 	sub	objptr, ##9784
07f14     F2 28 02 FB | 	rdlong	local06, objptr
07f18     01 28 06 F1 | 	add	local06, #1
07f1c     F2 28 62 FC | 	wrlong	local06, objptr
07f20     56 00 00 FF 
07f24     18 E4 85 F1 | 	sub	objptr, ##44056
07f28     34 04 90 FD | 	jmp	#LR__0686
07f2c                 | LR__0675
07f2c                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
07f2c     01 24 0E F2 | 	cmp	local04, #1 wz
07f30     48 00 90 5D |  if_ne	jmp	#LR__0676
07f34     00 C0 1F FF 
07f38     00 28 06 F6 | 	mov	local06, ##1065353216
07f3c     56 00 00 FF 
07f40     18 E4 05 F1 | 	add	objptr, ##44056
07f44     F2 2C 02 FB | 	rdlong	local08, objptr
07f48     03 2C 66 F0 | 	shl	local08, #3
07f4c     02 00 00 FF 
07f50     38 E4 85 F1 | 	sub	objptr, ##1080
07f54     F2 2C 02 F1 | 	add	local08, objptr
07f58     16 13 02 FB | 	rdlong	arg01, local08
07f5c     53 00 00 FF 
07f60     E0 E5 85 F1 | 	sub	objptr, ##42976
07f64     E8 29 B1 FD | 	call	#__system____builtin_atof
07f68     FD 14 02 F6 | 	mov	arg02, result1
07f6c     14 13 02 F6 | 	mov	arg01, local06
07f70     F4 21 B1 FD | 	call	#__system___float_mul
07f74     FD 1E 02 F6 | 	mov	local01, result1
07f78     1E 22 06 F6 | 	mov	local03, #30
07f7c                 | LR__0676
07f7c                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
07f7c     FF FF 7F FF 
07f80     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07f84     48 00 90 5D |  if_ne	jmp	#LR__0677
07f88     00 C0 5F FF 
07f8c     00 28 06 F6 | 	mov	local06, ##-1082130432
07f90     56 00 00 FF 
07f94     18 E4 05 F1 | 	add	objptr, ##44056
07f98     F2 2C 02 FB | 	rdlong	local08, objptr
07f9c     03 2C 66 F0 | 	shl	local08, #3
07fa0     02 00 00 FF 
07fa4     38 E4 85 F1 | 	sub	objptr, ##1080
07fa8     F2 2C 02 F1 | 	add	local08, objptr
07fac     16 13 02 FB | 	rdlong	arg01, local08
07fb0     53 00 00 FF 
07fb4     E0 E5 85 F1 | 	sub	objptr, ##42976
07fb8     94 29 B1 FD | 	call	#__system____builtin_atof
07fbc     FD 14 02 F6 | 	mov	arg02, result1
07fc0     14 13 02 F6 | 	mov	arg01, local06
07fc4     A0 21 B1 FD | 	call	#__system___float_mul
07fc8     FD 1E 02 F6 | 	mov	local01, result1
07fcc     1E 22 06 F6 | 	mov	local03, #30
07fd0                 | LR__0677
07fd0     0F 29 02 F6 | 	mov	local06, local01
07fd4     10 2B 02 F6 | 	mov	local07, local02
07fd8     11 27 02 F6 | 	mov	local05, local03
07fdc     69 00 00 FF 
07fe0     50 E4 05 F1 | 	add	objptr, ##53840
07fe4     F2 1E 02 FB | 	rdlong	local01, objptr
07fe8     0F 2D 02 F6 | 	mov	local08, local01
07fec     01 2C 66 F0 | 	shl	local08, #1
07ff0     0F 2D 02 F1 | 	add	local08, local01
07ff4     02 2C 66 F0 | 	shl	local08, #2
07ff8     03 00 00 FF 
07ffc     00 E4 85 F1 | 	sub	objptr, ##1536
08000     F2 2C 02 F1 | 	add	local08, objptr
08004     16 29 62 FC | 	wrlong	local06, local08
08008     03 00 00 FF 
0800c     00 E4 05 F1 | 	add	objptr, ##1536
08010     F2 2C 02 FB | 	rdlong	local08, objptr
08014     16 29 02 F6 | 	mov	local06, local08
08018     01 28 66 F0 | 	shl	local06, #1
0801c     16 29 02 F1 | 	add	local06, local08
08020     02 28 66 F0 | 	shl	local06, #2
08024     03 00 00 FF 
08028     00 E4 85 F1 | 	sub	objptr, ##1536
0802c     F2 28 02 F1 | 	add	local06, objptr
08030     04 28 06 F1 | 	add	local06, #4
08034     14 2B 62 FC | 	wrlong	local07, local06
08038     03 00 00 FF 
0803c     00 E4 05 F1 | 	add	objptr, ##1536
08040     F2 2C 02 FB | 	rdlong	local08, objptr
08044     16 2B 02 F6 | 	mov	local07, local08
08048     01 2A 66 F0 | 	shl	local07, #1
0804c     16 2B 02 F1 | 	add	local07, local08
08050     02 2A 66 F0 | 	shl	local07, #2
08054     03 00 00 FF 
08058     00 E4 85 F1 | 	sub	objptr, ##1536
0805c     F2 2A 02 F1 | 	add	local07, objptr
08060     08 2A 06 F1 | 	add	local07, #8
08064     15 27 62 FC | 	wrlong	local05, local07
08068     03 00 00 FF 
0806c     00 E4 05 F1 | 	add	objptr, ##1536
08070     F2 28 02 FB | 	rdlong	local06, objptr
08074     01 28 06 F1 | 	add	local06, #1
08078     F2 28 62 FC | 	wrlong	local06, objptr
0807c     13 00 00 FF 
08080     38 E4 85 F1 | 	sub	objptr, ##9784
08084     F2 28 02 FB | 	rdlong	local06, objptr
08088     01 28 06 F1 | 	add	local06, #1
0808c     F2 28 62 FC | 	wrlong	local06, objptr
08090     56 00 00 FF 
08094     18 E4 85 F1 | 	sub	objptr, ##44056
08098     C4 02 90 FD | 	jmp	#LR__0686
0809c                 | LR__0678
0809c     1F 22 06 F6 | 	mov	local03, #31
080a0     56 00 00 FF 
080a4     18 E4 05 F1 | 	add	objptr, ##44056
080a8     F2 16 02 FB | 	rdlong	arg03, objptr
080ac     03 16 66 F0 | 	shl	arg03, #3
080b0     02 00 00 FF 
080b4     38 E4 85 F1 | 	sub	objptr, ##1080
080b8     F2 16 02 F1 | 	add	arg03, objptr
080bc     0B 13 02 FB | 	rdlong	arg01, arg03
080c0     53 00 00 FF 
080c4     E0 E5 85 F1 | 	sub	objptr, ##42976
080c8     09 2F 02 F6 | 	mov	local09, arg01
080cc     97 06 48 FB | 	callpa	#(@LR__0680-@LR__0679)>>2,fcache_load_ptr_
080d0                 | LR__0679
080d0     17 FB C9 FA | 	rdbyte	result1, local09 wz
080d4     01 2E 06 51 |  if_ne	add	local09, #1
080d8     F4 FF 9F 5D |  if_ne	jmp	#LR__0679
080dc                 | LR__0680
080dc     09 2F 82 F1 | 	sub	local09, arg01
080e0     17 FB 01 F6 | 	mov	result1, local09
080e4     7A 00 00 FF 
080e8     7C E4 05 F1 | 	add	objptr, ##62588
080ec     F2 FA 61 FC | 	wrlong	result1, objptr
080f0     30 E4 85 F1 | 	sub	objptr, #48
080f4     F2 12 02 FB | 	rdlong	arg01, objptr
080f8     FD 12 82 F1 | 	sub	arg01, result1
080fc     04 12 86 F1 | 	sub	arg01, #4
08100     03 12 26 F5 | 	andn	arg01, #3
08104     F2 12 62 FC | 	wrlong	arg01, objptr
08108     30 E4 05 F1 | 	add	objptr, #48
0810c     F2 14 02 FB | 	rdlong	arg02, objptr
08110     01 16 06 F6 | 	mov	arg03, #1
08114     00 18 06 F6 | 	mov	arg04, #0
08118     6E 00 00 FF 
0811c     BC E5 85 F1 | 	sub	objptr, ##56764
08120                 | '     return fill(addr, pattern, count, listPtr, 4)
08120     04 1A 06 F6 | 	mov	arg05, #4
08124     78 ED B0 FD | 	call	#_psram_spin2_fill
08128                 | '     pslpoke memtop,l
08128                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08128     01 30 06 F6 | 	mov	local10, #1
0812c     6E 00 00 FF 
08130     BC E5 05 F1 | 	add	objptr, ##56764
08134     F2 32 02 FB | 	rdlong	local11, objptr
08138     7A 00 00 FF 
0813c     7C E4 85 F1 | 	sub	objptr, ##62588
08140     01 32 06 F1 | 	add	local11, #1
08144                 | LR__0681
08144     19 31 52 F2 | 	cmps	local10, local11 wc
08148     78 00 90 3D |  if_ae	jmp	#LR__0682
0814c     7A 00 00 FF 
08150     4C E4 05 F1 | 	add	objptr, ##62540
08154     F2 2A 02 FB | 	rdlong	local07, objptr
08158     03 2A 06 F1 | 	add	local07, #3
0815c     18 2B 02 F1 | 	add	local07, local10
08160     24 00 00 FF 
08164     34 E4 85 F1 | 	sub	objptr, ##18484
08168     F2 2C 02 FB | 	rdlong	local08, objptr
0816c     03 2C 66 F0 | 	shl	local08, #3
08170     02 00 00 FF 
08174     38 E4 85 F1 | 	sub	objptr, ##1080
08178     F2 2C 02 F1 | 	add	local08, objptr
0817c     16 13 02 FB | 	rdlong	arg01, local08
08180     18 15 02 F6 | 	mov	arg02, local10
08184     01 16 06 F6 | 	mov	arg03, #1
08188     53 00 00 FF 
0818c     E0 E5 85 F1 | 	sub	objptr, ##42976
08190     EC 17 B1 FD | 	call	#__system__Mid_S
08194     FD 14 C2 FA | 	rdbyte	arg02, result1
08198     15 13 02 F6 | 	mov	arg01, local07
0819c     01 16 06 F6 | 	mov	arg03, #1
081a0     00 18 06 F6 | 	mov	arg04, #0
081a4     0B 00 00 FF 
081a8     C0 E4 05 F1 | 	add	objptr, ##5824
081ac                 | '     return fill(addr, pattern, count, listPtr, 1)
081ac     01 1A 06 F6 | 	mov	arg05, #1
081b0     EC EC B0 FD | 	call	#_psram_spin2_fill
081b4     0B 00 00 FF 
081b8     C0 E4 85 F1 | 	sub	objptr, ##5824
081bc     01 30 06 F1 | 	add	local10, #1
081c0     80 FF 9F FD | 	jmp	#LR__0681
081c4                 | LR__0682
081c4     7A 00 00 FF 
081c8     4C E4 05 F1 | 	add	objptr, ##62540
081cc     F2 1E 02 FB | 	rdlong	local01, objptr
081d0     2B 22 06 F6 | 	mov	local03, #43
081d4     0F 29 02 F6 | 	mov	local06, local01
081d8     10 2B 02 F6 | 	mov	local07, local02
081dc     11 33 02 F6 | 	mov	local11, local03
081e0     10 00 00 FF 
081e4     FC E5 85 F1 | 	sub	objptr, ##8700
081e8     F2 30 02 FB | 	rdlong	local10, objptr
081ec     18 2D 02 F6 | 	mov	local08, local10
081f0     01 2C 66 F0 | 	shl	local08, #1
081f4     18 2D 02 F1 | 	add	local08, local10
081f8     02 2C 66 F0 | 	shl	local08, #2
081fc     03 00 00 FF 
08200     00 E4 85 F1 | 	sub	objptr, ##1536
08204     F2 2C 02 F1 | 	add	local08, objptr
08208     16 29 62 FC | 	wrlong	local06, local08
0820c     03 00 00 FF 
08210     00 E4 05 F1 | 	add	objptr, ##1536
08214     F2 30 02 FB | 	rdlong	local10, objptr
08218     18 2D 02 F6 | 	mov	local08, local10
0821c     01 2C 66 F0 | 	shl	local08, #1
08220     18 2D 02 F1 | 	add	local08, local10
08224     02 2C 66 F0 | 	shl	local08, #2
08228     03 00 00 FF 
0822c     00 E4 85 F1 | 	sub	objptr, ##1536
08230     F2 2C 02 F1 | 	add	local08, objptr
08234     04 2C 06 F1 | 	add	local08, #4
08238     16 2B 62 FC | 	wrlong	local07, local08
0823c     03 00 00 FF 
08240     00 E4 05 F1 | 	add	objptr, ##1536
08244     F2 30 02 FB | 	rdlong	local10, objptr
08248     18 2D 02 F6 | 	mov	local08, local10
0824c     01 2C 66 F0 | 	shl	local08, #1
08250     18 2D 02 F1 | 	add	local08, local10
08254     02 2C 66 F0 | 	shl	local08, #2
08258     03 00 00 FF 
0825c     00 E4 85 F1 | 	sub	objptr, ##1536
08260     F2 2C 02 F1 | 	add	local08, objptr
08264     08 2C 06 F1 | 	add	local08, #8
08268     16 33 62 FC | 	wrlong	local11, local08
0826c     03 00 00 FF 
08270     00 E4 05 F1 | 	add	objptr, ##1536
08274     F2 28 02 FB | 	rdlong	local06, objptr
08278     01 28 06 F1 | 	add	local06, #1
0827c     F2 28 62 FC | 	wrlong	local06, objptr
08280     13 00 00 FF 
08284     38 E4 85 F1 | 	sub	objptr, ##9784
08288     F2 28 02 FB | 	rdlong	local06, objptr
0828c     01 28 06 F1 | 	add	local06, #1
08290     F2 28 62 FC | 	wrlong	local06, objptr
08294     56 00 00 FF 
08298     18 E4 85 F1 | 	sub	objptr, ##44056
0829c     C0 00 90 FD | 	jmp	#LR__0686
082a0                 | LR__0683
082a0     12 13 02 F6 | 	mov	arg01, local04
082a4     B8 03 B0 FD | 	call	#_getvar
082a8     56 00 00 FF 
082ac     18 E4 05 F1 | 	add	objptr, ##44056
082b0     F2 28 02 FB | 	rdlong	local06, objptr
082b4     01 28 06 F1 | 	add	local06, #1
082b8     F2 28 62 FC | 	wrlong	local06, objptr
082bc     56 00 00 FF 
082c0     18 E4 85 F1 | 	sub	objptr, ##44056
082c4     98 00 90 FD | 	jmp	#LR__0686
082c8                 | LR__0684
082c8     56 00 00 FF 
082cc     18 E4 05 F1 | 	add	objptr, ##44056
082d0     F2 28 02 FB | 	rdlong	local06, objptr
082d4     01 28 06 F1 | 	add	local06, #1
082d8     F2 28 62 FC | 	wrlong	local06, objptr
082dc     56 00 00 FF 
082e0     18 E4 85 F1 | 	sub	objptr, ##44056
082e4     F4 F3 BF FD | 	call	#_expr
082e8                 | '     ct+=1
082e8                 | '     expr() 
082e8                 | '     if lparts(ct).token=token_rpar then ct+=1
082e8     56 00 00 FF 
082ec     18 E4 05 F1 | 	add	objptr, ##44056
082f0     F2 32 02 FB | 	rdlong	local11, objptr
082f4     03 32 66 F0 | 	shl	local11, #3
082f8     02 00 00 FF 
082fc     38 E4 85 F1 | 	sub	objptr, ##1080
08300     F2 32 02 F1 | 	add	local11, objptr
08304     04 32 06 F1 | 	add	local11, #4
08308     19 33 02 FB | 	rdlong	local11, local11
0830c     14 32 0E F2 | 	cmp	local11, #20 wz
08310     53 00 00 FF 
08314     E0 E5 85 F1 | 	sub	objptr, ##42976
08318     44 00 90 5D |  if_ne	jmp	#LR__0686
0831c     56 00 00 FF 
08320     18 E4 05 F1 | 	add	objptr, ##44056
08324     F2 28 02 FB | 	rdlong	local06, objptr
08328     01 28 06 F1 | 	add	local06, #1
0832c     F2 28 62 FC | 	wrlong	local06, objptr
08330     56 00 00 FF 
08334     18 E4 85 F1 | 	sub	objptr, ##44056
08338     24 00 90 FD | 	jmp	#LR__0686
0833c                 | LR__0685
0833c     12 13 02 F6 | 	mov	arg01, local04
08340     28 00 B0 FD | 	call	#_getfun
08344     56 00 00 FF 
08348     18 E4 05 F1 | 	add	objptr, ##44056
0834c     F2 28 02 FB | 	rdlong	local06, objptr
08350     01 28 06 F1 | 	add	local06, #1
08354     F2 28 62 FC | 	wrlong	local06, objptr
08358     56 00 00 FF 
0835c     18 E4 85 F1 | 	sub	objptr, ##44056
08360                 | LR__0686
08360     A7 F0 03 F6 | 	mov	ptra, fp
08364     B2 00 A0 FD | 	call	#popregs_
08368                 | _getvalue_ret
08368     2D 00 64 FD | 	ret
0836c                 | 
0836c                 | ' 
0836c                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
0836c                 | _getfun
0836c     0A 4A 05 F6 | 	mov	COUNT_, #10
08370     A8 00 A0 FD | 	call	#pushregs_
08374                 | _getfun_enter
08374     09 25 02 F6 | 	mov	local04, arg01
08378     56 00 00 FF 
0837c     18 E4 05 F1 | 	add	objptr, ##44056
08380     F2 26 02 FB | 	rdlong	local05, objptr
08384     13 29 02 F6 | 	mov	local06, local05
08388     00 2A 06 F6 | 	mov	local07, #0
0838c                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
0838c                 | ' oldct=ct
0838c                 | ' numpar=0
0838c                 | '   
0838c                 | ' if lparts(ct+1).token=token_lpar then
0838c     01 26 06 F1 | 	add	local05, #1
08390     03 26 66 F0 | 	shl	local05, #3
08394     02 00 00 FF 
08398     38 E4 85 F1 | 	sub	objptr, ##1080
0839c     F2 26 02 F1 | 	add	local05, objptr
083a0     04 26 06 F1 | 	add	local05, #4
083a4     13 27 02 FB | 	rdlong	local05, local05
083a8     15 26 0E F2 | 	cmp	local05, #21 wz
083ac     53 00 00 FF 
083b0     E0 E5 85 F1 | 	sub	objptr, ##42976
083b4     08 01 90 5D |  if_ne	jmp	#LR__0694
083b8     56 00 00 FF 
083bc     18 E4 05 F1 | 	add	objptr, ##44056
083c0     F2 2C 02 FB | 	rdlong	local08, objptr
083c4     01 2C 06 F1 | 	add	local08, #1
083c8     F2 2C 62 FC | 	wrlong	local08, objptr
083cc     56 00 00 FF 
083d0     18 E4 85 F1 | 	sub	objptr, ##44056
083d4                 | '   ct+=1 											' omit this lpar, this is for expr list
083d4                 | '   do
083d4                 | LR__0690
083d4     56 00 00 FF 
083d8     18 E4 05 F1 | 	add	objptr, ##44056
083dc     F2 26 02 FB | 	rdlong	local05, objptr
083e0     01 26 06 F1 | 	add	local05, #1
083e4     F2 26 62 FC | 	wrlong	local05, objptr
083e8                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
083e8                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
083e8     03 26 66 F0 | 	shl	local05, #3
083ec     02 00 00 FF 
083f0     38 E4 85 F1 | 	sub	objptr, ##1080
083f4     F2 26 02 F1 | 	add	local05, objptr
083f8     04 26 06 F1 | 	add	local05, #4
083fc     13 2D 02 FB | 	rdlong	local08, local05
08400     15 2C 0E F2 | 	cmp	local08, #21 wz
08404     53 00 00 FF 
08408     E0 E5 85 F1 | 	sub	objptr, ##42976
0840c     40 00 90 5D |  if_ne	jmp	#LR__0691
08410     56 00 00 FF 
08414     18 E4 05 F1 | 	add	objptr, ##44056
08418     F2 2C 02 FB | 	rdlong	local08, objptr
0841c     01 2C 06 F1 | 	add	local08, #1
08420     F2 2C 62 FC | 	wrlong	local08, objptr
08424     56 00 00 FF 
08428     18 E4 85 F1 | 	sub	objptr, ##44056
0842c     AC F2 BF FD | 	call	#_expr
08430     56 00 00 FF 
08434     18 E4 05 F1 | 	add	objptr, ##44056
08438     F2 2C 02 FB | 	rdlong	local08, objptr
0843c     01 2C 06 F1 | 	add	local08, #1
08440     F2 2C 62 FC | 	wrlong	local08, objptr
08444     56 00 00 FF 
08448     18 E4 85 F1 | 	sub	objptr, ##44056
0844c     04 00 90 FD | 	jmp	#LR__0692
08450                 | LR__0691
08450     88 F2 BF FD | 	call	#_expr
08454                 | LR__0692
08454     01 2A 06 F1 | 	add	local07, #1
08458     56 00 00 FF 
0845c     18 E4 05 F1 | 	add	objptr, ##44056
08460     F2 26 02 FB | 	rdlong	local05, objptr
08464     03 26 66 F0 | 	shl	local05, #3
08468     02 00 00 FF 
0846c     38 E4 85 F1 | 	sub	objptr, ##1080
08470     F2 26 02 F1 | 	add	local05, objptr
08474     04 26 06 F1 | 	add	local05, #4
08478     13 2D 02 FB | 	rdlong	local08, local05
0847c     14 2C 0E F2 | 	cmp	local08, #20 wz
08480     53 00 00 FF 
08484     E0 E5 85 F1 | 	sub	objptr, ##42976
08488     34 00 90 AD |  if_e	jmp	#LR__0693
0848c     56 00 00 FF 
08490     18 E4 05 F1 | 	add	objptr, ##44056
08494     F2 2C 02 FB | 	rdlong	local08, objptr
08498     03 2C 66 F0 | 	shl	local08, #3
0849c     02 00 00 FF 
084a0     38 E4 85 F1 | 	sub	objptr, ##1080
084a4     F2 2C 02 F1 | 	add	local08, objptr
084a8     04 2C 06 F1 | 	add	local08, #4
084ac     16 2D 02 FB | 	rdlong	local08, local08
084b0     FE 2D 0E F2 | 	cmp	local08, #510 wz
084b4     53 00 00 FF 
084b8     E0 E5 85 F1 | 	sub	objptr, ##42976
084bc     14 FF 9F 5D |  if_ne	jmp	#LR__0690
084c0                 | LR__0693
084c0                 | LR__0694
084c0     15 1F 02 F6 | 	mov	local01, local07
084c4     03 28 66 F0 | 	shl	local06, #3
084c8     53 00 00 FF 
084cc     E0 E5 05 F1 | 	add	objptr, ##42976
084d0     F2 28 02 F1 | 	add	local06, objptr
084d4     04 28 06 F1 | 	add	local06, #4
084d8     14 23 02 FB | 	rdlong	local03, local06
084dc     0F 2D 02 F6 | 	mov	local08, local01
084e0     10 2B 02 F6 | 	mov	local07, local02
084e4     11 29 02 F6 | 	mov	local06, local03
084e8     15 00 00 FF 
084ec     70 E4 05 F1 | 	add	objptr, ##10864
084f0     F2 26 02 FB | 	rdlong	local05, objptr
084f4     13 13 02 F6 | 	mov	arg01, local05
084f8     01 12 66 F0 | 	shl	arg01, #1
084fc     13 13 02 F1 | 	add	arg01, local05
08500     02 12 66 F0 | 	shl	arg01, #2
08504     03 00 00 FF 
08508     00 E4 85 F1 | 	sub	objptr, ##1536
0850c     F2 12 02 F1 | 	add	arg01, objptr
08510     09 2D 62 FC | 	wrlong	local08, arg01
08514     03 00 00 FF 
08518     00 E4 05 F1 | 	add	objptr, ##1536
0851c     F2 2C 02 FB | 	rdlong	local08, objptr
08520     16 2F 02 F6 | 	mov	local09, local08
08524     01 2E 66 F0 | 	shl	local09, #1
08528     16 2F 02 F1 | 	add	local09, local08
0852c     02 2E 66 F0 | 	shl	local09, #2
08530     03 00 00 FF 
08534     00 E4 85 F1 | 	sub	objptr, ##1536
08538     F2 2E 02 F1 | 	add	local09, objptr
0853c     04 2E 06 F1 | 	add	local09, #4
08540     17 2B 62 FC | 	wrlong	local07, local09
08544     03 00 00 FF 
08548     00 E4 05 F1 | 	add	objptr, ##1536
0854c     F2 2C 02 FB | 	rdlong	local08, objptr
08550     16 31 02 F6 | 	mov	local10, local08
08554     01 30 66 F0 | 	shl	local10, #1
08558     16 31 02 F1 | 	add	local10, local08
0855c     02 30 66 F0 | 	shl	local10, #2
08560     03 00 00 FF 
08564     00 E4 85 F1 | 	sub	objptr, ##1536
08568     F2 30 02 F1 | 	add	local10, objptr
0856c     08 30 06 F1 | 	add	local10, #8
08570     18 29 62 FC | 	wrlong	local06, local10
08574     03 00 00 FF 
08578     00 E4 05 F1 | 	add	objptr, ##1536
0857c     F2 2C 02 FB | 	rdlong	local08, objptr
08580     01 2C 06 F1 | 	add	local08, #1
08584     F2 2C 62 FC | 	wrlong	local08, objptr
08588     69 00 00 FF 
0858c     50 E4 85 F1 | 	sub	objptr, ##53840
08590                 | ' 
08590                 | ' t2.result.uresult=numpar
08590                 | ' 
08590                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
08590                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
08590                 | ' 
08590                 | '   
08590                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
08590     FF FF 7F FF 
08594     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08598     B8 00 90 5D |  if_ne	jmp	#LR__0695
0859c     15 22 06 F6 | 	mov	local03, #21
085a0     0F 2D 02 F6 | 	mov	local08, local01
085a4     10 2B 02 F6 | 	mov	local07, local02
085a8     11 29 02 F6 | 	mov	local06, local03
085ac     69 00 00 FF 
085b0     50 E4 05 F1 | 	add	objptr, ##53840
085b4     F2 26 02 FB | 	rdlong	local05, objptr
085b8     13 13 02 F6 | 	mov	arg01, local05
085bc     01 12 66 F0 | 	shl	arg01, #1
085c0     13 13 02 F1 | 	add	arg01, local05
085c4     02 12 66 F0 | 	shl	arg01, #2
085c8     03 00 00 FF 
085cc     00 E4 85 F1 | 	sub	objptr, ##1536
085d0     F2 12 02 F1 | 	add	arg01, objptr
085d4     09 2D 62 FC | 	wrlong	local08, arg01
085d8     03 00 00 FF 
085dc     00 E4 05 F1 | 	add	objptr, ##1536
085e0     F2 30 02 FB | 	rdlong	local10, objptr
085e4     18 2F 02 F6 | 	mov	local09, local10
085e8     01 2E 66 F0 | 	shl	local09, #1
085ec     18 2F 02 F1 | 	add	local09, local10
085f0     02 2E 66 F0 | 	shl	local09, #2
085f4     03 00 00 FF 
085f8     00 E4 85 F1 | 	sub	objptr, ##1536
085fc     F2 2E 02 F1 | 	add	local09, objptr
08600     04 2E 06 F1 | 	add	local09, #4
08604     17 2B 62 FC | 	wrlong	local07, local09
08608     03 00 00 FF 
0860c     00 E4 05 F1 | 	add	objptr, ##1536
08610     F2 2E 02 FB | 	rdlong	local09, objptr
08614     17 31 02 F6 | 	mov	local10, local09
08618     01 30 66 F0 | 	shl	local10, #1
0861c     17 31 02 F1 | 	add	local10, local09
08620     02 30 66 F0 | 	shl	local10, #2
08624     03 00 00 FF 
08628     00 E4 85 F1 | 	sub	objptr, ##1536
0862c     F2 30 02 F1 | 	add	local10, objptr
08630     08 30 06 F1 | 	add	local10, #8
08634     18 29 62 FC | 	wrlong	local06, local10
08638     03 00 00 FF 
0863c     00 E4 05 F1 | 	add	objptr, ##1536
08640     F2 2C 02 FB | 	rdlong	local08, objptr
08644     01 2C 06 F1 | 	add	local08, #1
08648     F2 2C 62 FC | 	wrlong	local08, objptr
0864c     69 00 00 FF 
08650     50 E4 85 F1 | 	sub	objptr, ##53840
08654                 | LR__0695
08654     A7 F0 03 F6 | 	mov	ptra, fp
08658     B2 00 A0 FD | 	call	#popregs_
0865c                 | _getfun_ret
0865c     2D 00 64 FD | 	ret
08660                 | 
08660                 | '   
08660                 | '   
08660                 | ' sub getvar(m as integer) 
08660                 | _getvar
08660     0A 4A 05 F6 | 	mov	COUNT_, #10
08664     A8 00 A0 FD | 	call	#pushregs_
08668                 | _getvar_enter
08668     09 25 02 F6 | 	mov	local04, arg01
0866c     56 00 00 FF 
08670     18 E4 05 F1 | 	add	objptr, ##44056
08674     F2 14 02 FB | 	rdlong	arg02, objptr
08678     03 14 66 F0 | 	shl	arg02, #3
0867c     02 00 00 FF 
08680     38 E4 85 F1 | 	sub	objptr, ##1080
08684     F2 14 02 F1 | 	add	arg02, objptr
08688     0A 27 02 FB | 	rdlong	local05, arg02
0868c     13 13 02 F6 | 	mov	arg01, local05
08690     01 14 06 F6 | 	mov	arg02, #1
08694     53 00 00 FF 
08698     E0 E5 85 F1 | 	sub	objptr, ##42976
0869c     50 12 B1 FD | 	call	#__system__Right_S
086a0     FD 28 02 F6 | 	mov	local06, result1
086a4     01 2A 66 F6 | 	neg	local07, #1
086a8                 | ' 
086a8                 | ' varname$=lparts(ct).part$
086a8                 | ' suffix$=right$(varname$,1)
086a8                 | ' j=-1
086a8                 | ' 
086a8                 | ' for i=0 to varnum-1
086a8     00 2C 06 F6 | 	mov	local08, #0
086ac     53 00 00 FF 
086b0     DC E5 05 F1 | 	add	objptr, ##42972
086b4     F2 2E 02 FB | 	rdlong	local09, objptr
086b8     53 00 00 FF 
086bc     DC E5 85 F1 | 	sub	objptr, ##42972
086c0                 | LR__0700
086c0     17 2D 52 F2 | 	cmps	local08, local09 wc
086c4     38 00 90 3D |  if_ae	jmp	#LR__0701
086c8                 | '   if variables(i).name=varname$ then j=i : exit
086c8     16 15 02 F6 | 	mov	arg02, local08
086cc     04 14 66 F0 | 	shl	arg02, #4
086d0     33 00 00 FF 
086d4     DC E5 05 F1 | 	add	objptr, ##26588
086d8     F2 14 02 F1 | 	add	arg02, objptr
086dc     0A 13 02 FB | 	rdlong	arg01, arg02
086e0     13 15 02 F6 | 	mov	arg02, local05
086e4     33 00 00 FF 
086e8     DC E5 85 F1 | 	sub	objptr, ##26588
086ec     90 F1 B0 FD | 	call	#__system___string_cmp
086f0     00 FA 0D F2 | 	cmp	result1, #0 wz
086f4     16 2B 02 A6 |  if_e	mov	local07, local08
086f8     01 2C 06 51 |  if_ne	add	local08, #1
086fc     C0 FF 9F 5D |  if_ne	jmp	#LR__0700
08700                 | LR__0701
08700                 | ' if  j=-1 andalso varnum<maxvars then   
08700     FF FF 7F FF 
08704     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
08708     A8 00 90 5D |  if_ne	jmp	#LR__0702
0870c     53 00 00 FF 
08710     DC E5 05 F1 | 	add	objptr, ##42972
08714     F2 2E 02 FB | 	rdlong	local09, objptr
08718     53 00 00 FF 
0871c     DC E5 85 F1 | 	sub	objptr, ##42972
08720     01 00 00 FF 
08724     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
08728     88 00 90 3D |  if_ae	jmp	#LR__0702
0872c     53 00 00 FF 
08730     DC E5 05 F1 | 	add	objptr, ##42972
08734     F2 2E 02 FB | 	rdlong	local09, objptr
08738     04 2E 66 F0 | 	shl	local09, #4
0873c     20 00 00 FF 
08740     00 E4 85 F1 | 	sub	objptr, ##16384
08744     F2 2E 02 F1 | 	add	local09, objptr
08748     17 27 62 FC | 	wrlong	local05, local09
0874c     20 00 00 FF 
08750     00 E4 05 F1 | 	add	objptr, ##16384
08754     F2 2E 02 FB | 	rdlong	local09, objptr
08758     04 2E 66 F0 | 	shl	local09, #4
0875c     20 00 00 FF 
08760     00 E4 85 F1 | 	sub	objptr, ##16384
08764     F2 2E 02 F1 | 	add	local09, objptr
08768     04 2E 06 F1 | 	add	local09, #4
0876c     17 01 68 FC | 	wrlong	#0, local09
08770     20 00 00 FF 
08774     00 E4 05 F1 | 	add	objptr, ##16384
08778     F2 2E 02 FB | 	rdlong	local09, objptr
0877c     04 2E 66 F0 | 	shl	local09, #4
08780     20 00 00 FF 
08784     00 E4 85 F1 | 	sub	objptr, ##16384
08788     F2 2E 02 F1 | 	add	local09, objptr
0878c     0C 2E 06 F1 | 	add	local09, #12
08790     17 39 68 FC | 	wrlong	#28, local09
08794     20 00 00 FF 
08798     00 E4 05 F1 | 	add	objptr, ##16384
0879c     F2 2E 02 FB | 	rdlong	local09, objptr
087a0     17 2B 02 F6 | 	mov	local07, local09
087a4     01 2E 06 F1 | 	add	local09, #1
087a8     F2 2E 62 FC | 	wrlong	local09, objptr
087ac     53 00 00 FF 
087b0     DC E5 85 F1 | 	sub	objptr, ##42972
087b4                 | LR__0702
087b4     00 2E 06 F6 | 	mov	local09, #0
087b8                 | ' numpar=0
087b8                 | ' ' check if it is an array
087b8                 | ' 
087b8                 | ' if lparts(ct+1).token=token_lpar then
087b8     56 00 00 FF 
087bc     18 E4 05 F1 | 	add	objptr, ##44056
087c0     F2 2C 02 FB | 	rdlong	local08, objptr
087c4     01 2C 06 F1 | 	add	local08, #1
087c8     03 2C 66 F0 | 	shl	local08, #3
087cc     02 00 00 FF 
087d0     38 E4 85 F1 | 	sub	objptr, ##1080
087d4     F2 2C 02 F1 | 	add	local08, objptr
087d8     04 2C 06 F1 | 	add	local08, #4
087dc     16 2D 02 FB | 	rdlong	local08, local08
087e0     15 2C 0E F2 | 	cmp	local08, #21 wz
087e4     53 00 00 FF 
087e8     E0 E5 85 F1 | 	sub	objptr, ##42976
087ec     08 01 90 5D |  if_ne	jmp	#LR__0707
087f0     56 00 00 FF 
087f4     18 E4 05 F1 | 	add	objptr, ##44056
087f8     F2 30 02 FB | 	rdlong	local10, objptr
087fc     01 30 06 F1 | 	add	local10, #1
08800     F2 30 62 FC | 	wrlong	local10, objptr
08804     56 00 00 FF 
08808     18 E4 85 F1 | 	sub	objptr, ##44056
0880c                 | '   ct+=1 											' omit this lpar, this is for expr list
0880c                 | '   do
0880c                 | LR__0703
0880c     56 00 00 FF 
08810     18 E4 05 F1 | 	add	objptr, ##44056
08814     F2 2C 02 FB | 	rdlong	local08, objptr
08818     01 2C 06 F1 | 	add	local08, #1
0881c     F2 2C 62 FC | 	wrlong	local08, objptr
08820                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
08820                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
08820     03 2C 66 F0 | 	shl	local08, #3
08824     02 00 00 FF 
08828     38 E4 85 F1 | 	sub	objptr, ##1080
0882c     F2 2C 02 F1 | 	add	local08, objptr
08830     04 2C 06 F1 | 	add	local08, #4
08834     16 31 02 FB | 	rdlong	local10, local08
08838     15 30 0E F2 | 	cmp	local10, #21 wz
0883c     53 00 00 FF 
08840     E0 E5 85 F1 | 	sub	objptr, ##42976
08844     40 00 90 5D |  if_ne	jmp	#LR__0704
08848     56 00 00 FF 
0884c     18 E4 05 F1 | 	add	objptr, ##44056
08850     F2 30 02 FB | 	rdlong	local10, objptr
08854     01 30 06 F1 | 	add	local10, #1
08858     F2 30 62 FC | 	wrlong	local10, objptr
0885c     56 00 00 FF 
08860     18 E4 85 F1 | 	sub	objptr, ##44056
08864     74 EE BF FD | 	call	#_expr
08868     56 00 00 FF 
0886c     18 E4 05 F1 | 	add	objptr, ##44056
08870     F2 30 02 FB | 	rdlong	local10, objptr
08874     01 30 06 F1 | 	add	local10, #1
08878     F2 30 62 FC | 	wrlong	local10, objptr
0887c     56 00 00 FF 
08880     18 E4 85 F1 | 	sub	objptr, ##44056
08884     04 00 90 FD | 	jmp	#LR__0705
08888                 | LR__0704
08888     50 EE BF FD | 	call	#_expr
0888c                 | LR__0705
0888c     01 2E 06 F1 | 	add	local09, #1
08890     56 00 00 FF 
08894     18 E4 05 F1 | 	add	objptr, ##44056
08898     F2 2C 02 FB | 	rdlong	local08, objptr
0889c     03 2C 66 F0 | 	shl	local08, #3
088a0     02 00 00 FF 
088a4     38 E4 85 F1 | 	sub	objptr, ##1080
088a8     F2 2C 02 F1 | 	add	local08, objptr
088ac     04 2C 06 F1 | 	add	local08, #4
088b0     16 31 02 FB | 	rdlong	local10, local08
088b4     14 30 0E F2 | 	cmp	local10, #20 wz
088b8     53 00 00 FF 
088bc     E0 E5 85 F1 | 	sub	objptr, ##42976
088c0     34 00 90 AD |  if_e	jmp	#LR__0706
088c4     56 00 00 FF 
088c8     18 E4 05 F1 | 	add	objptr, ##44056
088cc     F2 30 02 FB | 	rdlong	local10, objptr
088d0     03 30 66 F0 | 	shl	local10, #3
088d4     02 00 00 FF 
088d8     38 E4 85 F1 | 	sub	objptr, ##1080
088dc     F2 30 02 F1 | 	add	local10, objptr
088e0     04 30 06 F1 | 	add	local10, #4
088e4     18 31 02 FB | 	rdlong	local10, local10
088e8     FE 31 0E F2 | 	cmp	local10, #510 wz
088ec     53 00 00 FF 
088f0     E0 E5 85 F1 | 	sub	objptr, ##42976
088f4     14 FF 9F 5D |  if_ne	jmp	#LR__0703
088f8                 | LR__0706
088f8                 | LR__0707
088f8     17 21 02 F6 | 	mov	local02, local09
088fc     11 22 06 F6 | 	mov	local03, #17
08900     15 1F 02 F6 | 	mov	local01, local07
08904     0F 31 02 F6 | 	mov	local10, local01
08908     10 2F 02 F6 | 	mov	local09, local02
0890c     11 2D 02 F6 | 	mov	local08, local03
08910     69 00 00 FF 
08914     50 E4 05 F1 | 	add	objptr, ##53840
08918     F2 2A 02 FB | 	rdlong	local07, objptr
0891c     15 29 02 F6 | 	mov	local06, local07
08920     01 28 66 F0 | 	shl	local06, #1
08924     15 29 02 F1 | 	add	local06, local07
08928     02 28 66 F0 | 	shl	local06, #2
0892c     03 00 00 FF 
08930     00 E4 85 F1 | 	sub	objptr, ##1536
08934     F2 28 02 F1 | 	add	local06, objptr
08938     14 31 62 FC | 	wrlong	local10, local06
0893c     03 00 00 FF 
08940     00 E4 05 F1 | 	add	objptr, ##1536
08944     F2 30 02 FB | 	rdlong	local10, objptr
08948     18 27 02 F6 | 	mov	local05, local10
0894c     01 26 66 F0 | 	shl	local05, #1
08950     18 27 02 F1 | 	add	local05, local10
08954     02 26 66 F0 | 	shl	local05, #2
08958     03 00 00 FF 
0895c     00 E4 85 F1 | 	sub	objptr, ##1536
08960     F2 26 02 F1 | 	add	local05, objptr
08964     04 26 06 F1 | 	add	local05, #4
08968     13 2F 62 FC | 	wrlong	local09, local05
0896c     03 00 00 FF 
08970     00 E4 05 F1 | 	add	objptr, ##1536
08974     F2 30 02 FB | 	rdlong	local10, objptr
08978     18 FB 01 F6 | 	mov	result1, local10
0897c     01 FA 65 F0 | 	shl	result1, #1
08980     18 FB 01 F1 | 	add	result1, local10
08984     02 FA 65 F0 | 	shl	result1, #2
08988     03 00 00 FF 
0898c     00 E4 85 F1 | 	sub	objptr, ##1536
08990     F2 FA 01 F1 | 	add	result1, objptr
08994     08 FA 05 F1 | 	add	result1, #8
08998     FD 2C 62 FC | 	wrlong	local08, result1
0899c     03 00 00 FF 
089a0     00 E4 05 F1 | 	add	objptr, ##1536
089a4     F2 30 02 FB | 	rdlong	local10, objptr
089a8     01 30 06 F1 | 	add	local10, #1
089ac     F2 30 62 FC | 	wrlong	local10, objptr
089b0     69 00 00 FF 
089b4     50 E4 85 F1 | 	sub	objptr, ##53840
089b8                 | ' 
089b8                 | ' t2.result.twowords(1)=numpar
089b8                 | ' 
089b8                 | ' 
089b8                 | ' 
089b8                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
089b8                 | ' 
089b8                 | ' 
089b8                 | '  
089b8                 | ' 
089b8                 | ' 701 
089b8                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
089b8                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
089b8     FF FF 7F FF 
089bc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
089c0     B8 00 90 5D |  if_ne	jmp	#LR__0708
089c4     15 22 06 F6 | 	mov	local03, #21
089c8     0F 31 02 F6 | 	mov	local10, local01
089cc     10 2F 02 F6 | 	mov	local09, local02
089d0     11 2D 02 F6 | 	mov	local08, local03
089d4     69 00 00 FF 
089d8     50 E4 05 F1 | 	add	objptr, ##53840
089dc     F2 2A 02 FB | 	rdlong	local07, objptr
089e0     15 29 02 F6 | 	mov	local06, local07
089e4     01 28 66 F0 | 	shl	local06, #1
089e8     15 29 02 F1 | 	add	local06, local07
089ec     02 28 66 F0 | 	shl	local06, #2
089f0     03 00 00 FF 
089f4     00 E4 85 F1 | 	sub	objptr, ##1536
089f8     F2 28 02 F1 | 	add	local06, objptr
089fc     14 31 62 FC | 	wrlong	local10, local06
08a00     03 00 00 FF 
08a04     00 E4 05 F1 | 	add	objptr, ##1536
08a08     F2 1E 02 FB | 	rdlong	local01, objptr
08a0c     0F 27 02 F6 | 	mov	local05, local01
08a10     01 26 66 F0 | 	shl	local05, #1
08a14     0F 27 02 F1 | 	add	local05, local01
08a18     02 26 66 F0 | 	shl	local05, #2
08a1c     03 00 00 FF 
08a20     00 E4 85 F1 | 	sub	objptr, ##1536
08a24     F2 26 02 F1 | 	add	local05, objptr
08a28     04 26 06 F1 | 	add	local05, #4
08a2c     13 2F 62 FC | 	wrlong	local09, local05
08a30     03 00 00 FF 
08a34     00 E4 05 F1 | 	add	objptr, ##1536
08a38     F2 1E 02 FB | 	rdlong	local01, objptr
08a3c     0F FB 01 F6 | 	mov	result1, local01
08a40     01 FA 65 F0 | 	shl	result1, #1
08a44     0F FB 01 F1 | 	add	result1, local01
08a48     02 FA 65 F0 | 	shl	result1, #2
08a4c     03 00 00 FF 
08a50     00 E4 85 F1 | 	sub	objptr, ##1536
08a54     F2 FA 01 F1 | 	add	result1, objptr
08a58     08 FA 05 F1 | 	add	result1, #8
08a5c     FD 2C 62 FC | 	wrlong	local08, result1
08a60     03 00 00 FF 
08a64     00 E4 05 F1 | 	add	objptr, ##1536
08a68     F2 30 02 FB | 	rdlong	local10, objptr
08a6c     01 30 06 F1 | 	add	local10, #1
08a70     F2 30 62 FC | 	wrlong	local10, objptr
08a74     69 00 00 FF 
08a78     50 E4 85 F1 | 	sub	objptr, ##53840
08a7c                 | LR__0708
08a7c     A7 F0 03 F6 | 	mov	ptra, fp
08a80     B2 00 A0 FD | 	call	#popregs_
08a84                 | _getvar_ret
08a84     2D 00 64 FD | 	ret
08a88                 | 
08a88                 | ' 
08a88                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08a88                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
08a88                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08a88                 | ' 
08a88                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08a88                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
08a88                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08a88                 | ' 
08a88                 | ' function execute_line (astart=0 as integer) as integer
08a88                 | _execute_line
08a88     04 4A 05 F6 | 	mov	COUNT_, #4
08a8c     A8 00 A0 FD | 	call	#pushregs_
08a90     78 00 00 FF 
08a94     88 E5 05 F1 | 	add	objptr, ##61832
08a98     F2 00 68 FC | 	wrlong	#0, objptr
08a9c                 | ' runptr2=0
08a9c                 | ' for lineptr_e=astart to lineptr-1
08a9c     0F 00 00 FF 
08aa0     34 E5 85 F1 | 	sub	objptr, ##7988
08aa4     F2 12 62 FC | 	wrlong	arg01, objptr
08aa8     04 E4 85 F1 | 	sub	objptr, #4
08aac     F2 1E 02 FB | 	rdlong	local01, objptr
08ab0     69 00 00 FF 
08ab4     50 E4 85 F1 | 	sub	objptr, ##53840
08ab8                 | LR__0710
08ab8     69 00 00 FF 
08abc     54 E4 05 F1 | 	add	objptr, ##53844
08ac0     F2 FA 01 FB | 	rdlong	result1, objptr
08ac4     69 00 00 FF 
08ac8     54 E4 85 F1 | 	sub	objptr, ##53844
08acc     0F FB 51 F2 | 	cmps	result1, local01 wc
08ad0     98 00 90 3D |  if_ae	jmp	#LR__0711
08ad4     69 00 00 FF 
08ad8     54 E4 05 F1 | 	add	objptr, ##53844
08adc     F2 FA 01 FB | 	rdlong	result1, objptr
08ae0     FD 20 02 F6 | 	mov	local02, result1
08ae4     01 20 66 F0 | 	shl	local02, #1
08ae8     FD 20 02 F1 | 	add	local02, result1
08aec     02 20 66 F0 | 	shl	local02, #2
08af0     03 00 00 FF 
08af4     04 E4 85 F1 | 	sub	objptr, ##1540
08af8     F2 20 02 F1 | 	add	local02, objptr
08afc     08 20 06 F1 | 	add	local02, #8
08b00     10 21 02 FB | 	rdlong	local02, local02
08b04     10 21 E2 F8 | 	getbyte	local02, local02, #0
08b08     02 20 66 F0 | 	shl	local02, #2
08b0c     04 00 00 FF 
08b10     1C E4 85 F1 | 	sub	objptr, ##2076
08b14     F2 20 02 F1 | 	add	local02, objptr
08b18     10 21 02 FB | 	rdlong	local02, local02
08b1c     10 23 02 F6 | 	mov	local03, local02
08b20     13 20 46 F7 | 	zerox	local02, #19
08b24     14 22 46 F0 | 	shr	local03, #20
08b28     02 22 66 F0 | 	shl	local03, #2
08b2c     ED 22 02 F1 | 	add	local03, __methods__
08b30     11 23 02 FB | 	rdlong	local03, local03
08b34     62 00 00 FF 
08b38     34 E4 85 F1 | 	sub	objptr, ##50228
08b3c     F2 24 02 F6 | 	mov	local04, objptr
08b40     10 E5 01 F6 | 	mov	objptr, local02
08b44     2D 22 62 FD | 	call	local03
08b48     12 E5 01 F6 | 	mov	objptr, local04
08b4c     69 00 00 FF 
08b50     54 E4 05 F1 | 	add	objptr, ##53844
08b54     F2 24 02 FB | 	rdlong	local04, objptr
08b58     01 24 06 F1 | 	add	local04, #1
08b5c     F2 24 62 FC | 	wrlong	local04, objptr
08b60     69 00 00 FF 
08b64     54 E4 85 F1 | 	sub	objptr, ##53844
08b68     4C FF 9F FD | 	jmp	#LR__0710
08b6c                 | LR__0711
08b6c                 | ' return runptr2
08b6c     78 00 00 FF 
08b70     88 E5 05 F1 | 	add	objptr, ##61832
08b74     F2 FA 01 FB | 	rdlong	result1, objptr
08b78     78 00 00 FF 
08b7c     88 E5 85 F1 | 	sub	objptr, ##61832
08b80     A7 F0 03 F6 | 	mov	ptra, fp
08b84     B2 00 A0 FD | 	call	#popregs_
08b88                 | _execute_line_ret
08b88     2D 00 64 FD | 	ret
08b8c                 | 
08b8c                 | ' 
08b8c                 | ' 
08b8c                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
08b8c                 | ' 
08b8c                 | ' function pop() as expr_result
08b8c                 | _pop
08b8c                 | ' 
08b8c                 | ' if stackpointer=0 then
08b8c     62 00 00 FF 
08b90     2C E4 05 F1 | 	add	objptr, ##50220
08b94     F2 FA 09 FB | 	rdlong	result1, objptr wz
08b98     62 00 00 FF 
08b9c     2C E4 85 F1 | 	sub	objptr, ##50220
08ba0     FF 04 06 A6 |  if_e	mov	_var03, #255
08ba4     18 00 06 A6 |  if_e	mov	_var01, #24
08ba8     68 00 90 AD |  if_e	jmp	#LR__0720
08bac     62 00 00 FF 
08bb0     2C E4 05 F1 | 	add	objptr, ##50220
08bb4     F2 FA 01 FB | 	rdlong	result1, objptr
08bb8     01 FA 85 F1 | 	sub	result1, #1
08bbc     F2 FA 61 FC | 	wrlong	result1, objptr
08bc0     FD FE 01 F6 | 	mov	result3, result1
08bc4     01 FE 65 F0 | 	shl	result3, #1
08bc8     FD FE 01 F1 | 	add	result3, result1
08bcc     02 FE 65 F0 | 	shl	result3, #2
08bd0     0C 00 00 FF 
08bd4     0C E4 85 F1 | 	sub	objptr, ##6156
08bd8     F2 FE 01 F1 | 	add	result3, objptr
08bdc     FF 00 02 FB | 	rdlong	_var01, result3
08be0     04 FE 05 F1 | 	add	result3, #4
08be4     FF FE 01 FB | 	rdlong	result3, result3
08be8     FD FC 01 F6 | 	mov	result2, result1
08bec     01 FC 65 F0 | 	shl	result2, #1
08bf0     FD FC 01 F1 | 	add	result2, result1
08bf4     02 FC 65 F0 | 	shl	result2, #2
08bf8     F2 FC 01 F1 | 	add	result2, objptr
08bfc     08 FC 05 F1 | 	add	result2, #8
08c00     FE FA 01 FB | 	rdlong	result1, result2
08c04     FF 02 02 F6 | 	mov	_var02, result3
08c08     FD 04 02 F6 | 	mov	_var03, result1
08c0c     56 00 00 FF 
08c10     20 E4 85 F1 | 	sub	objptr, ##44064
08c14                 | LR__0720
08c14                 | ' return t1
08c14     01 FD 01 F6 | 	mov	result2, _var02
08c18     02 FF 01 F6 | 	mov	result3, _var03
08c1c     00 FB 01 F6 | 	mov	result1, _var01
08c20                 | _pop_ret
08c20     2D 00 64 FD | 	ret
08c24                 | 
08c24                 | ' 
08c24                 | ' sub push(t1 as expr_result )
08c24                 | _push
08c24                 | ' 
08c24                 | ' 'print "In push: "; t1.result_type
08c24                 | ' 'print "In push: "; t1.result.uresult
08c24                 | ' 
08c24                 | ' if stackpointer<maxstack then 
08c24     62 00 00 FF 
08c28     2C E4 05 F1 | 	add	objptr, ##50220
08c2c     F2 00 02 FB | 	rdlong	_var01, objptr
08c30     62 00 00 FF 
08c34     2C E4 85 F1 | 	sub	objptr, ##50220
08c38     01 00 00 FF 
08c3c     00 00 56 F2 | 	cmps	_var01, ##512 wc
08c40     BC 00 90 3D |  if_ae	jmp	#LR__0730
08c44     09 01 02 FB | 	rdlong	_var01, arg01
08c48     04 12 06 F1 | 	add	arg01, #4
08c4c     09 03 02 FB | 	rdlong	_var02, arg01
08c50     04 12 06 F1 | 	add	arg01, #4
08c54     09 13 02 FB | 	rdlong	arg01, arg01
08c58     62 00 00 FF 
08c5c     2C E4 05 F1 | 	add	objptr, ##50220
08c60     F2 04 02 FB | 	rdlong	_var03, objptr
08c64     02 07 02 F6 | 	mov	_var04, _var03
08c68     01 06 66 F0 | 	shl	_var04, #1
08c6c     02 07 02 F1 | 	add	_var04, _var03
08c70     02 06 66 F0 | 	shl	_var04, #2
08c74     0C 00 00 FF 
08c78     0C E4 85 F1 | 	sub	objptr, ##6156
08c7c     F2 06 02 F1 | 	add	_var04, objptr
08c80     03 01 62 FC | 	wrlong	_var01, _var04
08c84     0C 00 00 FF 
08c88     0C E4 05 F1 | 	add	objptr, ##6156
08c8c     F2 06 02 FB | 	rdlong	_var04, objptr
08c90     03 05 02 F6 | 	mov	_var03, _var04
08c94     01 04 66 F0 | 	shl	_var03, #1
08c98     03 05 02 F1 | 	add	_var03, _var04
08c9c     02 04 66 F0 | 	shl	_var03, #2
08ca0     0C 00 00 FF 
08ca4     0C E4 85 F1 | 	sub	objptr, ##6156
08ca8     F2 04 02 F1 | 	add	_var03, objptr
08cac     04 04 06 F1 | 	add	_var03, #4
08cb0     02 03 62 FC | 	wrlong	_var02, _var03
08cb4     0C 00 00 FF 
08cb8     0C E4 05 F1 | 	add	objptr, ##6156
08cbc     F2 06 02 FB | 	rdlong	_var04, objptr
08cc0     03 05 02 F6 | 	mov	_var03, _var04
08cc4     01 04 66 F0 | 	shl	_var03, #1
08cc8     03 05 02 F1 | 	add	_var03, _var04
08ccc     02 04 66 F0 | 	shl	_var03, #2
08cd0     0C 00 00 FF 
08cd4     0C E4 85 F1 | 	sub	objptr, ##6156
08cd8     F2 04 02 F1 | 	add	_var03, objptr
08cdc     08 04 06 F1 | 	add	_var03, #8
08ce0     02 13 62 FC | 	wrlong	arg01, _var03
08ce4     0C 00 00 FF 
08ce8     0C E4 05 F1 | 	add	objptr, ##6156
08cec     F2 00 02 FB | 	rdlong	_var01, objptr
08cf0     01 00 06 F1 | 	add	_var01, #1
08cf4     F2 00 62 FC | 	wrlong	_var01, objptr
08cf8     62 00 00 FF 
08cfc     2C E4 85 F1 | 	sub	objptr, ##50220
08d00                 | LR__0730
08d00                 | _push_ret
08d00     2D 00 64 FD | 	ret
08d04                 | 
08d04                 | ' 
08d04                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
08d04                 | ' 
08d04                 | ' sub do_push
08d04                 | _do_push
08d04                 | ' if stackpointer<maxstack then 
08d04     62 00 00 FF 
08d08     2C E4 05 F1 | 	add	objptr, ##50220
08d0c     F2 00 02 FB | 	rdlong	_var01, objptr
08d10     62 00 00 FF 
08d14     2C E4 85 F1 | 	sub	objptr, ##50220
08d18     01 00 00 FF 
08d1c     00 00 56 F2 | 	cmps	_var01, ##512 wc
08d20     F8 00 90 3D |  if_ae	jmp	#LR__0740
08d24     69 00 00 FF 
08d28     54 E4 05 F1 | 	add	objptr, ##53844
08d2c     F2 02 02 FB | 	rdlong	_var02, objptr
08d30     01 05 02 F6 | 	mov	_var03, _var02
08d34     01 04 66 F0 | 	shl	_var03, #1
08d38     01 05 02 F1 | 	add	_var03, _var02
08d3c     02 04 66 F0 | 	shl	_var03, #2
08d40     03 00 00 FF 
08d44     04 E4 85 F1 | 	sub	objptr, ##1540
08d48     F2 04 02 F1 | 	add	_var03, objptr
08d4c     02 01 02 FB | 	rdlong	_var01, _var03
08d50     04 04 06 F1 | 	add	_var03, #4
08d54     02 07 02 FB | 	rdlong	_var04, _var03
08d58     01 05 02 F6 | 	mov	_var03, _var02
08d5c     01 04 66 F0 | 	shl	_var03, #1
08d60     01 05 02 F1 | 	add	_var03, _var02
08d64     02 04 66 F0 | 	shl	_var03, #2
08d68     F2 04 02 F1 | 	add	_var03, objptr
08d6c     08 04 06 F1 | 	add	_var03, #8
08d70     02 03 02 FB | 	rdlong	_var02, _var03
08d74     04 00 00 FF 
08d78     24 E4 85 F1 | 	sub	objptr, ##2084
08d7c     F2 04 02 FB | 	rdlong	_var03, objptr
08d80     02 09 02 F6 | 	mov	_var05, _var03
08d84     01 08 66 F0 | 	shl	_var05, #1
08d88     02 09 02 F1 | 	add	_var05, _var03
08d8c     02 08 66 F0 | 	shl	_var05, #2
08d90     0C 00 00 FF 
08d94     0C E4 85 F1 | 	sub	objptr, ##6156
08d98     F2 08 02 F1 | 	add	_var05, objptr
08d9c     04 01 62 FC | 	wrlong	_var01, _var05
08da0     0C 00 00 FF 
08da4     0C E4 05 F1 | 	add	objptr, ##6156
08da8     F2 08 02 FB | 	rdlong	_var05, objptr
08dac     04 05 02 F6 | 	mov	_var03, _var05
08db0     01 04 66 F0 | 	shl	_var03, #1
08db4     04 05 02 F1 | 	add	_var03, _var05
08db8     02 04 66 F0 | 	shl	_var03, #2
08dbc     0C 00 00 FF 
08dc0     0C E4 85 F1 | 	sub	objptr, ##6156
08dc4     F2 04 02 F1 | 	add	_var03, objptr
08dc8     04 04 06 F1 | 	add	_var03, #4
08dcc     02 07 62 FC | 	wrlong	_var04, _var03
08dd0     0C 00 00 FF 
08dd4     0C E4 05 F1 | 	add	objptr, ##6156
08dd8     F2 08 02 FB | 	rdlong	_var05, objptr
08ddc     04 07 02 F6 | 	mov	_var04, _var05
08de0     01 06 66 F0 | 	shl	_var04, #1
08de4     04 07 02 F1 | 	add	_var04, _var05
08de8     02 06 66 F0 | 	shl	_var04, #2
08dec     0C 00 00 FF 
08df0     0C E4 85 F1 | 	sub	objptr, ##6156
08df4     F2 06 02 F1 | 	add	_var04, objptr
08df8     08 06 06 F1 | 	add	_var04, #8
08dfc     03 03 62 FC | 	wrlong	_var02, _var04
08e00     0C 00 00 FF 
08e04     0C E4 05 F1 | 	add	objptr, ##6156
08e08     F2 00 02 FB | 	rdlong	_var01, objptr
08e0c     01 00 06 F1 | 	add	_var01, #1
08e10     F2 00 62 FC | 	wrlong	_var01, objptr
08e14     62 00 00 FF 
08e18     2C E4 85 F1 | 	sub	objptr, ##50220
08e1c                 | LR__0740
08e1c                 | _do_push_ret
08e1c     2D 00 64 FD | 	ret
08e20                 | 
08e20                 | ' 
08e20                 | '   
08e20                 | ' sub csave_block(address as ulong)
08e20                 | _csave_block
08e20     09 01 02 F6 | 	mov	_var01, arg01
08e24                 | ' 
08e24                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
08e24                 | ' ' we enter it at the state of playing 1 kHz header tone
08e24                 | ' 
08e24                 | ' for i=0 to 63 step 2
08e24     00 02 06 F6 | 	mov	_var02, #0
08e28                 | LR__0750
08e28                 | '   do: loop until lpeek(base+32*7)>32768
08e28     55 00 00 FF 
08e2c     E4 E5 05 F1 | 	add	objptr, ##44004
08e30     97 0C 48 FB | 	callpa	#(@LR__0752-@LR__0751)>>2,fcache_load_ptr_
08e34                 | LR__0751
08e34     F2 12 02 FB | 	rdlong	arg01, objptr
08e38     E0 12 06 F1 | 	add	arg01, #224
08e3c     09 FB 01 FB | 	rdlong	result1, arg01
08e40     40 00 00 FF 
08e44     01 FA 55 F2 | 	cmps	result1, ##32769 wc
08e48     E8 FF 9F CD |  if_b	jmp	#LR__0751
08e4c                 | LR__0752
08e4c     00 13 02 F6 | 	mov	arg01, _var01
08e50     01 05 02 F6 | 	mov	_var03, _var02
08e54     02 04 66 F0 | 	shl	_var03, #2
08e58     02 13 02 F1 | 	add	arg01, _var03
08e5c     09 07 02 FB | 	rdlong	_var04, arg01
08e60     24 00 00 FF 
08e64     B8 E4 05 F1 | 	add	objptr, ##18616
08e68     F2 06 62 FC | 	wrlong	_var04, objptr
08e6c     7A 00 00 FF 
08e70     9C E4 85 F1 | 	sub	objptr, ##62620
08e74                 | '   q=lpeek(address+4*i)
08e74                 | '      for bit=0 to 31
08e74     00 08 06 F6 | 	mov	_var05, #0
08e78     97 84 48 FB | 	callpa	#(@LR__0757-@LR__0753)>>2,fcache_load_ptr_
08e7c                 | LR__0753
08e7c                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
08e7c     7A 00 00 FF 
08e80     9C E4 05 F1 | 	add	objptr, ##62620
08e84     F2 06 02 FB | 	rdlong	_var04, objptr
08e88     7A 00 00 FF 
08e8c     9C E4 85 F1 | 	sub	objptr, ##62620
08e90     04 05 C2 F9 | 	decod	_var03, _var05
08e94     02 07 CA F7 | 	test	_var04, _var03 wz
08e98     60 00 90 AD |  if_e	jmp	#LR__0754
08e9c     04 05 02 F6 | 	mov	_var03, _var05
08ea0     02 04 66 F0 | 	shl	_var03, #2
08ea4     76 00 00 FF 
08ea8     80 E4 05 F1 | 	add	objptr, ##60544
08eac     F2 04 02 F1 | 	add	_var03, objptr
08eb0     02 FF 48 FC | 	wrbyte	#127, _var03
08eb4     04 05 02 F6 | 	mov	_var03, _var05
08eb8     02 04 66 F0 | 	shl	_var03, #2
08ebc     01 04 06 F1 | 	add	_var03, #1
08ec0     F2 04 02 F1 | 	add	_var03, objptr
08ec4     02 01 49 FC | 	wrbyte	#128, _var03
08ec8     04 05 02 F6 | 	mov	_var03, _var05
08ecc     02 04 66 F0 | 	shl	_var03, #2
08ed0     02 04 06 F1 | 	add	_var03, #2
08ed4     F2 04 02 F1 | 	add	_var03, objptr
08ed8     02 FF 48 FC | 	wrbyte	#127, _var03
08edc     04 05 02 F6 | 	mov	_var03, _var05
08ee0     02 04 66 F0 | 	shl	_var03, #2
08ee4     03 04 06 F1 | 	add	_var03, #3
08ee8     F2 04 02 F1 | 	add	_var03, objptr
08eec     02 01 49 FC | 	wrbyte	#128, _var03
08ef0     76 00 00 FF 
08ef4     80 E4 85 F1 | 	sub	objptr, ##60544
08ef8     5C 00 90 FD | 	jmp	#LR__0755
08efc                 | LR__0754
08efc     04 05 02 F6 | 	mov	_var03, _var05
08f00     02 04 66 F0 | 	shl	_var03, #2
08f04     76 00 00 FF 
08f08     80 E4 05 F1 | 	add	objptr, ##60544
08f0c     F2 04 02 F1 | 	add	_var03, objptr
08f10     02 01 49 FC | 	wrbyte	#128, _var03
08f14     04 05 02 F6 | 	mov	_var03, _var05
08f18     02 04 66 F0 | 	shl	_var03, #2
08f1c     01 04 06 F1 | 	add	_var03, #1
08f20     F2 04 02 F1 | 	add	_var03, objptr
08f24     02 01 49 FC | 	wrbyte	#128, _var03
08f28     04 05 02 F6 | 	mov	_var03, _var05
08f2c     02 04 66 F0 | 	shl	_var03, #2
08f30     02 04 06 F1 | 	add	_var03, #2
08f34     F2 04 02 F1 | 	add	_var03, objptr
08f38     02 FF 48 FC | 	wrbyte	#127, _var03
08f3c     04 05 02 F6 | 	mov	_var03, _var05
08f40     02 04 66 F0 | 	shl	_var03, #2
08f44     03 04 06 F1 | 	add	_var03, #3
08f48     F2 04 02 F1 | 	add	_var03, objptr
08f4c     02 FF 48 FC | 	wrbyte	#127, _var03
08f50     76 00 00 FF 
08f54     80 E4 85 F1 | 	sub	objptr, ##60544
08f58                 | LR__0755
08f58     01 08 06 F1 | 	add	_var05, #1
08f5c     20 08 56 F2 | 	cmps	_var05, #32 wc
08f60     18 FF 9F CD |  if_b	jmp	#LR__0753
08f64                 | '   do: loop until lpeek(base+32*7)<32768
08f64     55 00 00 FF 
08f68     E4 E5 05 F1 | 	add	objptr, ##44004
08f6c                 | LR__0756
08f6c     F2 12 02 FB | 	rdlong	arg01, objptr
08f70     E0 12 06 F1 | 	add	arg01, #224
08f74     09 FB 01 FB | 	rdlong	result1, arg01
08f78     40 00 00 FF 
08f7c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
08f80     E8 FF 9F 3D |  if_ae	jmp	#LR__0756
08f84                 | LR__0757
08f84     00 13 02 F6 | 	mov	arg01, _var01
08f88     04 12 06 F1 | 	add	arg01, #4
08f8c     01 05 02 F6 | 	mov	_var03, _var02
08f90     02 04 66 F0 | 	shl	_var03, #2
08f94     02 13 02 F1 | 	add	arg01, _var03
08f98     09 07 02 FB | 	rdlong	_var04, arg01
08f9c     24 00 00 FF 
08fa0     B8 E4 05 F1 | 	add	objptr, ##18616
08fa4     F2 06 62 FC | 	wrlong	_var04, objptr
08fa8     7A 00 00 FF 
08fac     9C E4 85 F1 | 	sub	objptr, ##62620
08fb0                 | '   q=lpeek(address+4+4*i)
08fb0                 | '      for bit=0 to 31
08fb0     00 08 06 F6 | 	mov	_var05, #0
08fb4     97 94 48 FB | 	callpa	#(@LR__0761-@LR__0758)>>2,fcache_load_ptr_
08fb8                 | LR__0758
08fb8                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
08fb8     7A 00 00 FF 
08fbc     9C E4 05 F1 | 	add	objptr, ##62620
08fc0     F2 06 02 FB | 	rdlong	_var04, objptr
08fc4     7A 00 00 FF 
08fc8     9C E4 85 F1 | 	sub	objptr, ##62620
08fcc     04 05 C2 F9 | 	decod	_var03, _var05
08fd0     02 07 CA F7 | 	test	_var04, _var03 wz
08fd4     80 00 90 AD |  if_e	jmp	#LR__0759
08fd8     04 0B 02 F6 | 	mov	_var06, _var05
08fdc     02 0A 66 F0 | 	shl	_var06, #2
08fe0     80 04 06 F6 | 	mov	_var03, #128
08fe4     05 05 02 F1 | 	add	_var03, _var06
08fe8     76 00 00 FF 
08fec     80 E4 05 F1 | 	add	objptr, ##60544
08ff0     F2 04 02 F1 | 	add	_var03, objptr
08ff4     02 FF 48 FC | 	wrbyte	#127, _var03
08ff8     04 0B 02 F6 | 	mov	_var06, _var05
08ffc     02 0A 66 F0 | 	shl	_var06, #2
09000     80 04 06 F6 | 	mov	_var03, #128
09004     05 05 02 F1 | 	add	_var03, _var06
09008     01 04 06 F1 | 	add	_var03, #1
0900c     F2 04 02 F1 | 	add	_var03, objptr
09010     02 01 49 FC | 	wrbyte	#128, _var03
09014     04 0B 02 F6 | 	mov	_var06, _var05
09018     02 0A 66 F0 | 	shl	_var06, #2
0901c     80 04 06 F6 | 	mov	_var03, #128
09020     05 05 02 F1 | 	add	_var03, _var06
09024     02 04 06 F1 | 	add	_var03, #2
09028     F2 04 02 F1 | 	add	_var03, objptr
0902c     02 FF 48 FC | 	wrbyte	#127, _var03
09030     04 0B 02 F6 | 	mov	_var06, _var05
09034     02 0A 66 F0 | 	shl	_var06, #2
09038     80 04 06 F6 | 	mov	_var03, #128
0903c     05 05 02 F1 | 	add	_var03, _var06
09040     03 04 06 F1 | 	add	_var03, #3
09044     F2 04 02 F1 | 	add	_var03, objptr
09048     02 01 49 FC | 	wrbyte	#128, _var03
0904c     76 00 00 FF 
09050     80 E4 85 F1 | 	sub	objptr, ##60544
09054     7C 00 90 FD | 	jmp	#LR__0760
09058                 | LR__0759
09058     04 0B 02 F6 | 	mov	_var06, _var05
0905c     02 0A 66 F0 | 	shl	_var06, #2
09060     80 04 06 F6 | 	mov	_var03, #128
09064     05 05 02 F1 | 	add	_var03, _var06
09068     76 00 00 FF 
0906c     80 E4 05 F1 | 	add	objptr, ##60544
09070     F2 04 02 F1 | 	add	_var03, objptr
09074     02 01 49 FC | 	wrbyte	#128, _var03
09078     04 0B 02 F6 | 	mov	_var06, _var05
0907c     02 0A 66 F0 | 	shl	_var06, #2
09080     80 04 06 F6 | 	mov	_var03, #128
09084     05 05 02 F1 | 	add	_var03, _var06
09088     01 04 06 F1 | 	add	_var03, #1
0908c     F2 04 02 F1 | 	add	_var03, objptr
09090     02 01 49 FC | 	wrbyte	#128, _var03
09094     04 0B 02 F6 | 	mov	_var06, _var05
09098     02 0A 66 F0 | 	shl	_var06, #2
0909c     80 04 06 F6 | 	mov	_var03, #128
090a0     05 05 02 F1 | 	add	_var03, _var06
090a4     02 04 06 F1 | 	add	_var03, #2
090a8     F2 04 02 F1 | 	add	_var03, objptr
090ac     02 FF 48 FC | 	wrbyte	#127, _var03
090b0     04 0B 02 F6 | 	mov	_var06, _var05
090b4     02 0A 66 F0 | 	shl	_var06, #2
090b8     80 04 06 F6 | 	mov	_var03, #128
090bc     05 05 02 F1 | 	add	_var03, _var06
090c0     03 04 06 F1 | 	add	_var03, #3
090c4     F2 04 02 F1 | 	add	_var03, objptr
090c8     02 FF 48 FC | 	wrbyte	#127, _var03
090cc     76 00 00 FF 
090d0     80 E4 85 F1 | 	sub	objptr, ##60544
090d4                 | LR__0760
090d4     01 08 06 F1 | 	add	_var05, #1
090d8     20 08 56 F2 | 	cmps	_var05, #32 wc
090dc     D8 FE 9F CD |  if_b	jmp	#LR__0758
090e0                 | LR__0761
090e0     02 02 06 F1 | 	add	_var02, #2
090e4     40 02 56 F2 | 	cmps	_var02, #64 wc
090e8     3C FD 9F CD |  if_b	jmp	#LR__0750
090ec                 | ' do: loop until lpeek(base+32*7)>32768
090ec     55 00 00 FF 
090f0     E4 E5 05 F1 | 	add	objptr, ##44004
090f4     97 84 48 FB | 	callpa	#(@LR__0770-@LR__0762)>>2,fcache_load_ptr_
090f8                 | LR__0762
090f8     F2 12 02 FB | 	rdlong	arg01, objptr
090fc     E0 12 06 F1 | 	add	arg01, #224
09100     09 FB 01 FB | 	rdlong	result1, arg01
09104     40 00 00 FF 
09108     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0910c     E8 FF 9F CD |  if_b	jmp	#LR__0762
09110     55 00 00 FF 
09114     E4 E5 85 F1 | 	sub	objptr, ##44004
09118                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09118     00 02 06 F6 | 	mov	_var02, #0
0911c                 | LR__0763
0911c     01 07 52 F6 | 	abs	_var04, _var02 wc
09120     07 06 06 F5 | 	and	_var04, #7
09124     03 07 82 F6 | 	negc	_var04, _var04
09128     04 06 56 F2 | 	cmps	_var04, #4 wc
0912c     20 00 90 3D |  if_ae	jmp	#LR__0764
09130     01 0B 02 F6 | 	mov	_var06, _var02
09134     76 00 00 FF 
09138     80 E4 05 F1 | 	add	objptr, ##60544
0913c     F2 0A 02 F1 | 	add	_var06, objptr
09140     05 FF 48 FC | 	wrbyte	#127, _var06
09144     76 00 00 FF 
09148     80 E4 85 F1 | 	sub	objptr, ##60544
0914c     1C 00 90 FD | 	jmp	#LR__0765
09150                 | LR__0764
09150     01 0B 02 F6 | 	mov	_var06, _var02
09154     76 00 00 FF 
09158     80 E4 05 F1 | 	add	objptr, ##60544
0915c     F2 0A 02 F1 | 	add	_var06, objptr
09160     05 01 49 FC | 	wrbyte	#128, _var06
09164     76 00 00 FF 
09168     80 E4 85 F1 | 	sub	objptr, ##60544
0916c                 | LR__0765
0916c     01 02 06 F1 | 	add	_var02, #1
09170     80 02 56 F2 | 	cmps	_var02, #128 wc
09174     A4 FF 9F CD |  if_b	jmp	#LR__0763
09178                 | ' 
09178                 | ' do: loop until lpeek(base+32*7)<32768
09178     55 00 00 FF 
0917c     E4 E5 05 F1 | 	add	objptr, ##44004
09180                 | LR__0766
09180     F2 12 02 FB | 	rdlong	arg01, objptr
09184     E0 12 06 F1 | 	add	arg01, #224
09188     09 FB 01 FB | 	rdlong	result1, arg01
0918c     40 00 00 FF 
09190     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09194     E8 FF 9F 3D |  if_ae	jmp	#LR__0766
09198     55 00 00 FF 
0919c     E4 E5 85 F1 | 	sub	objptr, ##44004
091a0                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
091a0     80 02 06 F6 | 	mov	_var02, #128
091a4                 | LR__0767
091a4     01 07 52 F6 | 	abs	_var04, _var02 wc
091a8     07 06 06 F5 | 	and	_var04, #7
091ac     03 07 82 F6 | 	negc	_var04, _var04
091b0     04 06 56 F2 | 	cmps	_var04, #4 wc
091b4     20 00 90 3D |  if_ae	jmp	#LR__0768
091b8     01 0B 02 F6 | 	mov	_var06, _var02
091bc     76 00 00 FF 
091c0     80 E4 05 F1 | 	add	objptr, ##60544
091c4     F2 0A 02 F1 | 	add	_var06, objptr
091c8     05 FF 48 FC | 	wrbyte	#127, _var06
091cc     76 00 00 FF 
091d0     80 E4 85 F1 | 	sub	objptr, ##60544
091d4     1C 00 90 FD | 	jmp	#LR__0769
091d8                 | LR__0768
091d8     01 0B 02 F6 | 	mov	_var06, _var02
091dc     76 00 00 FF 
091e0     80 E4 05 F1 | 	add	objptr, ##60544
091e4     F2 0A 02 F1 | 	add	_var06, objptr
091e8     05 01 49 FC | 	wrbyte	#128, _var06
091ec     76 00 00 FF 
091f0     80 E4 85 F1 | 	sub	objptr, ##60544
091f4                 | LR__0769
091f4     01 02 06 F1 | 	add	_var02, #1
091f8     00 03 16 F2 | 	cmp	_var02, #256 wc
091fc     A4 FF 9F CD |  if_b	jmp	#LR__0767
09200                 | LR__0770
09200                 | _csave_block_ret
09200     2D 00 64 FD | 	ret
09204                 | 
09204                 | ' 
09204                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
09204                 | _csave_addtoblock
09204     04 4A 05 F6 | 	mov	COUNT_, #4
09208     A8 00 A0 FD | 	call	#pushregs_
0920c     09 1F 02 F6 | 	mov	local01, arg01
09210                 | ' 
09210                 | ' 
09210                 | ' if force=0 then
09210     07 14 4E F7 | 	zerox	arg02, #7 wz
09214     78 00 90 5D |  if_ne	jmp	#LR__0780
09218     78 00 00 FF 
0921c     80 E5 05 F1 | 	add	objptr, ##61824
09220     F2 14 02 FB | 	rdlong	arg02, objptr
09224     02 00 00 FF 
09228     00 E4 85 F1 | 	sub	objptr, ##1024
0922c     F2 14 02 F1 | 	add	arg02, objptr
09230     0A 1F 42 FC | 	wrbyte	local01, arg02
09234     02 00 00 FF 
09238     00 E4 05 F1 | 	add	objptr, ##1024
0923c     F2 1E 02 FB | 	rdlong	local01, objptr
09240     01 1E 06 F1 | 	add	local01, #1
09244     F2 1E 62 FC | 	wrlong	local01, objptr
09248                 | '   block(blockptr)=d
09248                 | '   blockptr+=1
09248                 | '   if blockptr>=255 then
09248     78 00 00 FF 
0924c     80 E5 85 F1 | 	sub	objptr, ##61824
09250     FF 1E 16 F2 | 	cmp	local01, #255 wc
09254     E4 00 90 CD |  if_b	jmp	#LR__0784
09258     76 00 00 FF 
0925c     80 E5 05 F1 | 	add	objptr, ##60800
09260     F2 12 02 F6 | 	mov	arg01, objptr
09264     76 00 00 FF 
09268     80 E5 85 F1 | 	sub	objptr, ##60800
0926c     B0 FB BF FD | 	call	#_csave_block
09270     78 00 00 FF 
09274     80 E5 05 F1 | 	add	objptr, ##61824
09278     F2 00 68 FC | 	wrlong	#0, objptr
0927c     78 00 00 FF 
09280     80 E5 85 F1 | 	sub	objptr, ##61824
09284     2C 13 06 F6 | 	mov	arg01, #300
09288     C0 E8 B0 FD | 	call	#__system___waitms
0928c     AC 00 90 FD | 	jmp	#LR__0784
09290                 | LR__0780
09290     78 00 00 FF 
09294     80 E5 05 F1 | 	add	objptr, ##61824
09298     F2 20 02 FB | 	rdlong	local02, objptr
0929c     02 00 00 FF 
092a0     00 E4 85 F1 | 	sub	objptr, ##1024
092a4     F2 20 02 F1 | 	add	local02, objptr
092a8     10 1F 42 FC | 	wrbyte	local01, local02
092ac                 | '   block(blockptr)=d
092ac                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
092ac     02 00 00 FF 
092b0     00 E4 05 F1 | 	add	objptr, ##1024
092b4     F2 22 02 FB | 	rdlong	local03, objptr
092b8     78 00 00 FF 
092bc     80 E5 85 F1 | 	sub	objptr, ##61824
092c0     FF 22 16 F2 | 	cmp	local03, #255 wc
092c4     40 00 90 3D |  if_ae	jmp	#LR__0783
092c8     78 00 00 FF 
092cc     80 E5 05 F1 | 	add	objptr, ##61824
092d0     F2 24 02 FB | 	rdlong	local04, objptr
092d4     78 00 00 FF 
092d8     80 E5 85 F1 | 	sub	objptr, ##61824
092dc                 | LR__0781
092dc     00 25 56 F2 | 	cmps	local04, #256 wc
092e0     24 00 90 3D |  if_ae	jmp	#LR__0782
092e4     12 21 02 F6 | 	mov	local02, local04
092e8     76 00 00 FF 
092ec     80 E5 05 F1 | 	add	objptr, ##60800
092f0     F2 20 02 F1 | 	add	local02, objptr
092f4     10 01 48 FC | 	wrbyte	#0, local02
092f8     01 24 06 F1 | 	add	local04, #1
092fc     76 00 00 FF 
09300     80 E5 85 F1 | 	sub	objptr, ##60800
09304     D4 FF 9F FD | 	jmp	#LR__0781
09308                 | LR__0782
09308                 | LR__0783
09308     76 00 00 FF 
0930c     80 E5 05 F1 | 	add	objptr, ##60800
09310     F2 12 02 F6 | 	mov	arg01, objptr
09314     76 00 00 FF 
09318     80 E5 85 F1 | 	sub	objptr, ##60800
0931c     00 FB BF FD | 	call	#_csave_block
09320     78 00 00 FF 
09324     80 E5 05 F1 | 	add	objptr, ##61824
09328     F2 00 68 FC | 	wrlong	#0, objptr
0932c     78 00 00 FF 
09330     80 E5 85 F1 | 	sub	objptr, ##61824
09334     2C 13 06 F6 | 	mov	arg01, #300
09338     10 E8 B0 FD | 	call	#__system___waitms
0933c                 | LR__0784
0933c     A7 F0 03 F6 | 	mov	ptra, fp
09340     B2 00 A0 FD | 	call	#popregs_
09344                 | _csave_addtoblock_ret
09344     2D 00 64 FD | 	ret
09348                 | 
09348                 | ' 
09348                 | ' sub test_csave
09348                 | _test_csave
09348     04 4A 05 F6 | 	mov	COUNT_, #4
0934c     A8 00 A0 FD | 	call	#pushregs_
09350     C0 F0 07 F1 | 	add	ptra, #192
09354                 | ' 'dim fileheader,savestart, saveptr as ulong
09354                 | ' 
09354                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
09354     69 00 00 FF 
09358     58 E4 05 F1 | 	add	objptr, ##53848
0935c     F2 12 02 FB | 	rdlong	arg01, objptr
09360     69 00 00 FF 
09364     58 E4 85 F1 | 	sub	objptr, ##53848
09368     84 B1 B0 FD | 	call	#_pslpeek
0936c     FF FF 7F FF 
09370     FF FB 0D F2 | 	cmp	result1, ##-1 wz
09374     0C 00 90 5D |  if_ne	jmp	#LR__0790
09378     1B 12 06 F6 | 	mov	arg01, #27
0937c     B4 AF B0 FD | 	call	#_printerror
09380     0C 03 90 FD | 	jmp	#LR__0802
09384                 | LR__0790
09384     04 F8 BF FD | 	call	#_pop
09388     FF 1E 02 F6 | 	mov	local01, result3
0938c     90 4E 05 F1 | 	add	fp, #144
09390     A7 FA 61 FC | 	wrlong	result1, fp
09394     04 4E 05 F1 | 	add	fp, #4
09398     A7 FC 61 FC | 	wrlong	result2, fp
0939c     04 4E 05 F1 | 	add	fp, #4
093a0     A7 1E 62 FC | 	wrlong	local01, fp
093a4                 | ' t1=pop()
093a4                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
093a4     98 4E 85 F1 | 	sub	fp, #152
093a8     1F 1E 0E F2 | 	cmp	local01, #31 wz
093ac     36 01 00 5F 
093b0     9F 1E 06 56 |  if_ne	mov	local01, ##@LR__4392
093b4     8C 4E 05 51 |  if_ne	add	fp, #140
093b8     A7 1E 62 5C |  if_ne	wrlong	local01, fp
093bc     8C 4E 85 51 |  if_ne	sub	fp, #140
093c0     90 4E 05 A1 |  if_e	add	fp, #144
093c4     A7 1E 02 AB |  if_e	rdlong	local01, fp
093c8     04 4E 85 A1 |  if_e	sub	fp, #4
093cc     A7 1E 62 AC |  if_e	wrlong	local01, fp
093d0     8C 4E 85 A1 |  if_e	sub	fp, #140
093d4                 | ' 
093d4                 | ' ' prepare 1 kHz header wave
093d4                 | ' 
093d4                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
093d4     A7 00 68 FC | 	wrlong	#0, fp
093d8     97 34 48 FB | 	callpa	#(@LR__0794-@LR__0791)>>2,fcache_load_ptr_
093dc                 | LR__0791
093dc     A7 1E 02 FB | 	rdlong	local01, fp
093e0     0F 1F 52 F6 | 	abs	local01, local01 wc
093e4     07 1E 06 F5 | 	and	local01, #7
093e8     0F 1F 82 F6 | 	negc	local01, local01
093ec     04 1E 56 F2 | 	cmps	local01, #4 wc
093f0     20 00 90 3D |  if_ae	jmp	#LR__0792
093f4     A7 1E 02 FB | 	rdlong	local01, fp
093f8     76 00 00 FF 
093fc     80 E4 05 F1 | 	add	objptr, ##60544
09400     F2 1E 02 F1 | 	add	local01, objptr
09404     0F FF 48 FC | 	wrbyte	#127, local01
09408     76 00 00 FF 
0940c     80 E4 85 F1 | 	sub	objptr, ##60544
09410     1C 00 90 FD | 	jmp	#LR__0793
09414                 | LR__0792
09414     A7 1E 02 FB | 	rdlong	local01, fp
09418     76 00 00 FF 
0941c     80 E4 05 F1 | 	add	objptr, ##60544
09420     F2 1E 02 F1 | 	add	local01, objptr
09424     0F 01 49 FC | 	wrbyte	#128, local01
09428     76 00 00 FF 
0942c     80 E4 85 F1 | 	sub	objptr, ##60544
09430                 | LR__0793
09430     A7 1E 02 FB | 	rdlong	local01, fp
09434     01 1E 06 F1 | 	add	local01, #1
09438     A7 1E 62 FC | 	wrlong	local01, fp
0943c     00 1F 56 F2 | 	cmps	local01, #256 wc
09440     98 FF 9F CD |  if_b	jmp	#LR__0791
09444                 | LR__0794
09444     76 00 00 FF 
09448     80 E4 05 F1 | 	add	objptr, ##60544
0944c     F2 14 02 F6 | 	mov	arg02, objptr
09450     07 12 06 F6 | 	mov	arg01, #7
09454     0F 00 00 FF 
09458     40 17 06 F6 | 	mov	arg03, ##8000
0945c     0E 18 C6 F9 | 	decod	arg04, #14
09460     00 1B 06 F6 | 	mov	arg05, #256
09464     00 1C 06 F6 | 	mov	arg06, #0
09468     6A 00 00 FF 
0946c     C0 E5 85 F1 | 	sub	objptr, ##54720
09470     48 E0 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
09474     0B 00 00 FF 
09478     C0 E4 85 F1 | 	sub	objptr, ##5824
0947c     05 00 00 FF 
09480     B8 13 06 F6 | 	mov	arg01, ##3000
09484     C4 E6 B0 FD | 	call	#__system___waitms
09488     78 00 00 FF 
0948c     80 E5 05 F1 | 	add	objptr, ##61824
09490     F2 00 68 FC | 	wrlong	#0, objptr
09494     78 00 00 FF 
09498     80 E5 85 F1 | 	sub	objptr, ##61824
0949c     72 12 06 F6 | 	mov	arg01, #114
094a0     00 14 06 F6 | 	mov	arg02, #0
094a4     5C FD BF FD | 	call	#_csave_addtoblock
094a8     62 12 06 F6 | 	mov	arg01, #98
094ac     00 14 06 F6 | 	mov	arg02, #0
094b0     50 FD BF FD | 	call	#_csave_addtoblock
094b4     61 12 06 F6 | 	mov	arg01, #97
094b8     00 14 06 F6 | 	mov	arg02, #0
094bc     44 FD BF FD | 	call	#_csave_addtoblock
094c0     0D 12 06 F6 | 	mov	arg01, #13
094c4     00 14 06 F6 | 	mov	arg02, #0
094c8     38 FD BF FD | 	call	#_csave_addtoblock
094cc                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
094cc                 | ' waitms 3000 
094cc                 | ' 
094cc                 | ' blockptr=0
094cc                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
094cc                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
094cc     A7 02 68 FC | 	wrlong	#1, fp
094d0     8C 4E 05 F1 | 	add	fp, #140
094d4     A7 12 02 FB | 	rdlong	arg01, fp
094d8     8C 4E 85 F1 | 	sub	fp, #140
094dc     09 21 02 F6 | 	mov	local02, arg01
094e0     97 06 48 FB | 	callpa	#(@LR__0796-@LR__0795)>>2,fcache_load_ptr_
094e4                 | LR__0795
094e4     10 FB C9 FA | 	rdbyte	result1, local02 wz
094e8     01 20 06 51 |  if_ne	add	local02, #1
094ec     F4 FF 9F 5D |  if_ne	jmp	#LR__0795
094f0                 | LR__0796
094f0     09 21 82 F1 | 	sub	local02, arg01
094f4     10 23 02 F6 | 	mov	local03, local02
094f8     01 22 06 F1 | 	add	local03, #1
094fc                 | LR__0797
094fc     A7 1E 02 FB | 	rdlong	local01, fp
09500     11 1F 52 F2 | 	cmps	local01, local03 wc
09504     34 00 90 3D |  if_ae	jmp	#LR__0798
09508     8C 4E 05 F1 | 	add	fp, #140
0950c     A7 12 02 FB | 	rdlong	arg01, fp
09510     8C 4E 85 F1 | 	sub	fp, #140
09514     A7 14 02 FB | 	rdlong	arg02, fp
09518     01 16 06 F6 | 	mov	arg03, #1
0951c     60 04 B1 FD | 	call	#__system__Mid_S
09520     FD 12 C2 FA | 	rdbyte	arg01, result1
09524     00 14 06 F6 | 	mov	arg02, #0
09528     D8 FC BF FD | 	call	#_csave_addtoblock
0952c     A7 1E 02 FB | 	rdlong	local01, fp
09530     01 1E 06 F1 | 	add	local01, #1
09534     A7 1E 62 FC | 	wrlong	local01, fp
09538     C0 FF 9F FD | 	jmp	#LR__0797
0953c                 | LR__0798
0953c     00 12 06 F6 | 	mov	arg01, #0
09540     00 14 06 F6 | 	mov	arg02, #0
09544     BC FC BF FD | 	call	#_csave_addtoblock
09548     72 12 06 F6 | 	mov	arg01, #114
0954c     00 14 06 F6 | 	mov	arg02, #0
09550     B0 FC BF FD | 	call	#_csave_addtoblock
09554     62 12 06 F6 | 	mov	arg01, #98
09558     00 14 06 F6 | 	mov	arg02, #0
0955c     A4 FC BF FD | 	call	#_csave_addtoblock
09560     73 12 06 F6 | 	mov	arg01, #115
09564     00 14 06 F6 | 	mov	arg02, #0
09568     98 FC BF FD | 	call	#_csave_addtoblock
0956c     0D 12 06 F6 | 	mov	arg01, #13
09570     00 14 06 F6 | 	mov	arg02, #0
09574     8C FC BF FD | 	call	#_csave_addtoblock
09578     69 00 00 FF 
0957c     58 E4 05 F1 | 	add	objptr, ##53848
09580     F2 1E 02 FB | 	rdlong	local01, objptr
09584     69 00 00 FF 
09588     58 E4 85 F1 | 	sub	objptr, ##53848
0958c     9C 4E 05 F1 | 	add	fp, #156
09590     A7 1E 62 FC | 	wrlong	local01, fp
09594     9C 4E 85 F1 | 	sub	fp, #156
09598                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
09598                 | ' 
09598                 | ' saveptr=programstart
09598                 | ' do
09598                 | LR__0799
09598     A0 4E 05 F1 | 	add	fp, #160
0959c     A7 12 02 F6 | 	mov	arg01, fp
095a0     04 4E 85 F1 | 	sub	fp, #4
095a4     A7 14 02 FB | 	rdlong	arg02, fp
095a8     9C 4E 85 F1 | 	sub	fp, #156
095ac     18 16 06 F6 | 	mov	arg03, #24
095b0     0B 00 00 FF 
095b4     C0 E4 05 F1 | 	add	objptr, ##5824
095b8     AC D7 B0 FD | 	call	#_psram_spin2_read1
095bc     0C 4E 05 F1 | 	add	fp, #12
095c0     A7 12 02 F6 | 	mov	arg01, fp
095c4     9C 4E 05 F1 | 	add	fp, #156
095c8     A7 14 02 FB | 	rdlong	arg02, fp
095cc     04 4E 05 F1 | 	add	fp, #4
095d0     A7 16 02 FB | 	rdlong	arg03, fp
095d4     AC 4E 85 F1 | 	sub	fp, #172
095d8     8C D7 B0 FD | 	call	#_psram_spin2_read1
095dc     0B 00 00 FF 
095e0     C0 E4 85 F1 | 	sub	objptr, ##5824
095e4     AC 4E 05 F1 | 	add	fp, #172
095e8     A7 12 02 FB | 	rdlong	arg01, fp
095ec     AC 4E 85 F1 | 	sub	fp, #172
095f0     00 14 06 F6 | 	mov	arg02, #0
095f4     0C FC BF FD | 	call	#_csave_addtoblock
095f8                 | '   psram.read1(varptr(header(0)),saveptr,24)
095f8                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
095f8                 | '   csave_addtoblock(header(3),0) ' that's always <255
095f8                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
095f8     A7 00 68 FC | 	wrlong	#0, fp
095fc     AC 4E 05 F1 | 	add	fp, #172
09600     A7 24 02 FB | 	rdlong	local04, fp
09604     AC 4E 85 F1 | 	sub	fp, #172
09608                 | LR__0800
09608     A7 1E 02 FB | 	rdlong	local01, fp
0960c     12 1F 52 F2 | 	cmps	local01, local04 wc
09610     2C 00 90 3D |  if_ae	jmp	#LR__0801
09614     A7 22 02 FB | 	rdlong	local03, fp
09618     0C 4E 05 F1 | 	add	fp, #12
0961c     A7 22 02 F1 | 	add	local03, fp
09620     11 13 C2 FA | 	rdbyte	arg01, local03
09624     00 14 06 F6 | 	mov	arg02, #0
09628     0C 4E 85 F1 | 	sub	fp, #12
0962c     D4 FB BF FD | 	call	#_csave_addtoblock
09630     A7 22 02 FB | 	rdlong	local03, fp
09634     01 22 06 F1 | 	add	local03, #1
09638     A7 22 62 FC | 	wrlong	local03, fp
0963c     C8 FF 9F FD | 	jmp	#LR__0800
09640                 | LR__0801
09640     B4 4E 05 F1 | 	add	fp, #180
09644     A7 1E 02 FB | 	rdlong	local01, fp
09648     18 4E 85 F1 | 	sub	fp, #24
0964c     A7 1E 62 FC | 	wrlong	local01, fp
09650     18 4E 05 F1 | 	add	fp, #24
09654     A7 1E 02 FB | 	rdlong	local01, fp
09658     B4 4E 85 F1 | 	sub	fp, #180
0965c     FF FF 3F FF 
09660     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09664     30 FF 9F 5D |  if_ne	jmp	#LR__0799
09668     00 12 06 F6 | 	mov	arg01, #0
0966c     01 14 06 F6 | 	mov	arg02, #1
09670     90 FB BF FD | 	call	#_csave_addtoblock
09674     55 00 00 FF 
09678     E4 E5 05 F1 | 	add	objptr, ##44004
0967c     F2 12 02 FB | 	rdlong	arg01, objptr
09680     55 00 00 FF 
09684     E4 E5 85 F1 | 	sub	objptr, ##44004
09688     F4 12 06 F1 | 	add	arg01, #244
0968c     09 01 58 FC | 	wrword	#0, arg01
09690                 | LR__0802
09690     A7 F0 03 F6 | 	mov	ptra, fp
09694     B2 00 A0 FD | 	call	#popregs_
09698                 | _test_csave_ret
09698     2D 00 64 FD | 	ret
0969c                 | 
0969c                 | ' 
0969c                 | ' ' ----------------- Save the program
0969c                 | ' 
0969c                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0969c                 | _do_save
0969c     02 4A 05 F6 | 	mov	COUNT_, #2
096a0     A8 00 A0 FD | 	call	#pushregs_
096a4     01 00 00 FF 
096a8     BC F0 07 F1 | 	add	ptra, ##700
096ac     01 00 00 FF 
096b0     10 4E 05 F1 | 	add	fp, ##528
096b4     B1 B0 86 FF 
096b8     A7 E4 68 FC | 	wrlong	##224486002, fp
096bc     01 00 00 FF 
096c0     10 4E 85 F1 | 	sub	fp, ##528
096c4     C4 F4 BF FD | 	call	#_pop
096c8     FF 16 02 F6 | 	mov	arg03, result3
096cc     A7 FA 61 FC | 	wrlong	result1, fp
096d0     04 4E 05 F1 | 	add	fp, #4
096d4     A7 FC 61 FC | 	wrlong	result2, fp
096d8     04 4E 05 F1 | 	add	fp, #4
096dc     A7 16 62 FC | 	wrlong	arg03, fp
096e0     08 4E 85 F1 | 	sub	fp, #8
096e4                 | ' 
096e4                 | ' fileheader=$0D616272' rba+ver'
096e4                 | ' 
096e4                 | ' t1=pop() 
096e4                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
096e4     69 00 00 FF 
096e8     58 E4 05 F1 | 	add	objptr, ##53848
096ec     F2 12 02 FB | 	rdlong	arg01, objptr
096f0     69 00 00 FF 
096f4     58 E4 85 F1 | 	sub	objptr, ##53848
096f8     F4 AD B0 FD | 	call	#_pslpeek
096fc     FF FF 7F FF 
09700     FF FB 0D F2 | 	cmp	result1, ##-1 wz
09704     0C 00 90 5D |  if_ne	jmp	#LR__0810
09708     1B 12 06 F6 | 	mov	arg01, #27
0970c     24 AC B0 FD | 	call	#_printerror
09710     68 02 90 FD | 	jmp	#LR__0816
09714                 | LR__0810
09714                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
09714     08 4E 05 F1 | 	add	fp, #8
09718     A7 16 02 FB | 	rdlong	arg03, fp
0971c     08 4E 85 F1 | 	sub	fp, #8
09720     2B 16 0E F2 | 	cmp	arg03, #43 wz
09724     18 00 90 5D |  if_ne	jmp	#LR__0811
09728     A7 12 02 FB | 	rdlong	arg01, fp
0972c     64 25 B0 FD | 	call	#_convertstring
09730     A7 FA 61 FC | 	wrlong	result1, fp
09734     08 4E 05 F1 | 	add	fp, #8
09738     A7 3E 68 FC | 	wrlong	#31, fp
0973c     08 4E 85 F1 | 	sub	fp, #8
09740                 | LR__0811
09740                 | ' if t1.result_type=result_string then
09740     08 4E 05 F1 | 	add	fp, #8
09744     A7 1E 02 FB | 	rdlong	local01, fp
09748     08 4E 85 F1 | 	sub	fp, #8
0974c     1F 1E 0E F2 | 	cmp	local01, #31 wz
09750     28 02 90 5D |  if_ne	jmp	#LR__0815
09754                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
09754     A7 12 02 FB | 	rdlong	arg01, fp
09758     36 01 00 FF 
0975c     AA 14 06 F6 | 	mov	arg02, ##@LR__4393
09760     1C E1 B0 FD | 	call	#__system___string_cmp
09764     00 FA 0D F2 | 	cmp	result1, #0 wz
09768     36 01 00 AF 
0976c     AB 1E 06 A6 |  if_e	mov	local01, ##@LR__4394
09770     A7 1E 62 AC |  if_e	wrlong	local01, fp
09774                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
09774     09 12 06 F6 | 	mov	arg01, #9
09778     24 2C B1 FD | 	call	#__system__close
0977c     09 1E 06 F6 | 	mov	local01, #9
09780     71 00 00 FF 
09784     68 E4 05 F1 | 	add	objptr, ##57960
09788     F2 12 02 FB | 	rdlong	arg01, objptr
0978c     71 00 00 FF 
09790     68 E4 85 F1 | 	sub	objptr, ##57960
09794     36 01 00 FF 
09798     B6 14 06 F6 | 	mov	arg02, ##@LR__4395
0979c     14 E1 B0 FD | 	call	#__system___string_concat
097a0     FD 12 02 F6 | 	mov	arg01, result1
097a4     A7 14 02 FB | 	rdlong	arg02, fp
097a8     08 E1 B0 FD | 	call	#__system___string_concat
097ac     FD 14 02 F6 | 	mov	arg02, result1
097b0     0F 13 02 F6 | 	mov	arg01, local01
097b4     0D 16 06 F6 | 	mov	arg03, #13
097b8     A0 EC B0 FD | 	call	#__system___basic_open_string
097bc     01 00 00 FF 
097c0     0C 4E 05 F1 | 	add	fp, ##524
097c4     A7 0A 68 FC | 	wrlong	#5, fp
097c8     69 00 00 FF 
097cc     58 E4 05 F1 | 	add	objptr, ##53848
097d0     F2 1E 02 FB | 	rdlong	local01, objptr
097d4     69 00 00 FF 
097d8     58 E4 85 F1 | 	sub	objptr, ##53848
097dc     0C 4E 05 F1 | 	add	fp, #12
097e0     A7 1E 62 FC | 	wrlong	local01, fp
097e4     01 00 00 FF 
097e8     18 4E 85 F1 | 	sub	fp, ##536
097ec                 | ' '  put #9,1,fileheader,1
097ec                 | '   i=5
097ec                 | '   saveptr=programstart
097ec                 | '   do
097ec                 | LR__0812
097ec     01 00 00 FF 
097f0     1C 4E 05 F1 | 	add	fp, ##540
097f4     A7 12 02 F6 | 	mov	arg01, fp
097f8     04 4E 85 F1 | 	sub	fp, #4
097fc     A7 14 02 FB | 	rdlong	arg02, fp
09800     01 00 00 FF 
09804     18 4E 85 F1 | 	sub	fp, ##536
09808     18 16 06 F6 | 	mov	arg03, #24
0980c     0B 00 00 FF 
09810     C0 E4 05 F1 | 	add	objptr, ##5824
09814     50 D5 B0 FD | 	call	#_psram_spin2_read1
09818     01 00 00 FF 
0981c     34 4E 05 F1 | 	add	fp, ##564
09820     A7 12 02 F6 | 	mov	arg01, fp
09824     10 4E 85 F1 | 	sub	fp, #16
09828     A7 14 02 FB | 	rdlong	arg02, fp
0982c     04 4E 05 F1 | 	add	fp, #4
09830     A7 16 02 FB | 	rdlong	arg03, fp
09834     01 00 00 FF 
09838     28 4E 85 F1 | 	sub	fp, ##552
0983c     28 D5 B0 FD | 	call	#_psram_spin2_read1
09840     0B 00 00 FF 
09844     C0 E4 85 F1 | 	sub	objptr, ##5824
09848     36 01 00 FF 
0984c     B8 1E 06 F6 | 	mov	local01, ##@LR__4396
09850     01 00 00 FF 
09854     B4 4E 05 F1 | 	add	fp, ##692
09858     A7 1E 62 FC | 	wrlong	local01, fp
0985c                 | '     psram.read1(varptr(header(0)),saveptr,24)
0985c                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0985c                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0985c     A8 4E 85 F1 | 	sub	fp, #168
09860     A7 02 68 FC | 	wrlong	#1, fp
09864     1C 4E 05 F1 | 	add	fp, #28
09868     A7 20 02 FB | 	rdlong	local02, fp
0986c     01 00 00 FF 
09870     28 4E 85 F1 | 	sub	fp, ##552
09874     01 20 06 F1 | 	add	local02, #1
09878                 | LR__0813
09878     01 00 00 FF 
0987c     0C 4E 05 F1 | 	add	fp, ##524
09880     A7 1E 02 FB | 	rdlong	local01, fp
09884     01 00 00 FF 
09888     0C 4E 85 F1 | 	sub	fp, ##524
0988c     10 1F 52 F2 | 	cmps	local01, local02 wc
09890     64 00 90 3D |  if_ae	jmp	#LR__0814
09894     01 00 00 FF 
09898     B4 4E 05 F1 | 	add	fp, ##692
0989c     A7 1E 02 FB | 	rdlong	local01, fp
098a0     A8 4E 85 F1 | 	sub	fp, #168
098a4     A7 16 02 FB | 	rdlong	arg03, fp
098a8     01 16 86 F1 | 	sub	arg03, #1
098ac     28 4E 05 F1 | 	add	fp, #40
098b0     A7 16 02 F1 | 	add	arg03, fp
098b4     0B 13 C2 FA | 	rdbyte	arg01, arg03
098b8     01 00 00 FF 
098bc     34 4E 85 F1 | 	sub	fp, ##564
098c0     68 01 B1 FD | 	call	#__system__Chr_S
098c4     FD 14 02 F6 | 	mov	arg02, result1
098c8     0F 13 02 F6 | 	mov	arg01, local01
098cc     E4 DF B0 FD | 	call	#__system___string_concat
098d0     01 00 00 FF 
098d4     B4 4E 05 F1 | 	add	fp, ##692
098d8     A7 FA 61 FC | 	wrlong	result1, fp
098dc     A8 4E 85 F1 | 	sub	fp, #168
098e0     A7 1E 02 FB | 	rdlong	local01, fp
098e4     01 1E 06 F1 | 	add	local01, #1
098e8     A7 1E 62 FC | 	wrlong	local01, fp
098ec     01 00 00 FF 
098f0     0C 4E 85 F1 | 	sub	fp, ##524
098f4     80 FF 9F FD | 	jmp	#LR__0813
098f8                 | LR__0814
098f8                 | '  '   put #9,i,header(3),1 : i+=4
098f8                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
098f8                 | '      print #9, saveline$
098f8     09 12 06 F6 | 	mov	arg01, #9
098fc     70 34 B1 FD | 	call	#__system___getiolock_0383
09900     FD 12 02 F6 | 	mov	arg01, result1
09904     50 DF B0 FD | 	call	#__system___lockmem
09908     01 00 00 FF 
0990c     B4 4E 05 F1 | 	add	fp, ##692
09910     A7 14 02 FB | 	rdlong	arg02, fp
09914     01 00 00 FF 
09918     B4 4E 85 F1 | 	sub	fp, ##692
0991c     09 12 06 F6 | 	mov	arg01, #9
09920     00 16 06 F6 | 	mov	arg03, #0
09924     24 EC B0 FD | 	call	#__system___basic_print_string
09928     09 12 06 F6 | 	mov	arg01, #9
0992c     0A 14 06 F6 | 	mov	arg02, #10
09930     00 16 06 F6 | 	mov	arg03, #0
09934     BC EB B0 FD | 	call	#__system___basic_print_char
09938     09 12 06 F6 | 	mov	arg01, #9
0993c     30 34 B1 FD | 	call	#__system___getiolock_0383
09940     FD 00 68 FC | 	wrlong	#0, result1
09944     01 00 00 FF 
09948     30 4E 05 F1 | 	add	fp, ##560
0994c     A7 1E 02 FB | 	rdlong	local01, fp
09950     18 4E 85 F1 | 	sub	fp, #24
09954     A7 1E 62 FC | 	wrlong	local01, fp
09958     18 4E 05 F1 | 	add	fp, #24
0995c     A7 1E 02 FB | 	rdlong	local01, fp
09960     01 00 00 FF 
09964     30 4E 85 F1 | 	sub	fp, ##560
09968     FF FF 3F FF 
0996c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09970     78 FE 9F 5D |  if_ne	jmp	#LR__0812
09974                 | '   close #9  
09974     09 12 06 F6 | 	mov	arg01, #9
09978     24 2A B1 FD | 	call	#__system__close
0997c                 | LR__0815
0997c                 | LR__0816
0997c     A7 F0 03 F6 | 	mov	ptra, fp
09980     B2 00 A0 FD | 	call	#popregs_
09984                 | _do_save_ret
09984     2D 00 64 FD | 	ret
09988                 | 
09988                 | ' 
09988                 | ' '----------------- Load the program
09988                 | ' 'lo todo: errors while loading
09988                 | ' sub do_load
09988                 | _do_load
09988     01 4A 05 F6 | 	mov	COUNT_, #1
0998c     A8 00 A0 FD | 	call	#pushregs_
09990     A4 F0 07 F1 | 	add	ptra, #164
09994     A0 4E 05 F1 | 	add	fp, #160
09998     A7 12 02 F6 | 	mov	arg01, fp
0999c     80 4E 85 F1 | 	sub	fp, #128
099a0     A7 14 02 F6 | 	mov	arg02, fp
099a4     20 4E 85 F1 | 	sub	fp, #32
099a8     09 15 62 FC | 	wrlong	arg02, arg01
099ac     DC F1 BF FD | 	call	#_pop
099b0     FF 1A 02 F6 | 	mov	arg05, result3
099b4     A7 FA 61 FC | 	wrlong	result1, fp
099b8     04 4E 05 F1 | 	add	fp, #4
099bc     A7 FC 61 FC | 	wrlong	result2, fp
099c0     04 4E 05 F1 | 	add	fp, #4
099c4     A7 1A 62 FC | 	wrlong	arg05, fp
099c8                 | ' 
099c8                 | ' lpoke varptr(line2$),varptr(line2)
099c8                 | ' t1=pop() 
099c8                 | ' 'print "popped "; t1.result.uresult, t1.result_type
099c8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
099c8     08 4E 85 F1 | 	sub	fp, #8
099cc     2B 1A 0E F2 | 	cmp	arg05, #43 wz
099d0     18 00 90 5D |  if_ne	jmp	#LR__0820
099d4     A7 12 02 FB | 	rdlong	arg01, fp
099d8     B8 22 B0 FD | 	call	#_convertstring
099dc     A7 FA 61 FC | 	wrlong	result1, fp
099e0     08 4E 05 F1 | 	add	fp, #8
099e4     A7 3E 68 FC | 	wrlong	#31, fp
099e8     08 4E 85 F1 | 	sub	fp, #8
099ec                 | LR__0820
099ec                 | ' if t1.result_type=result_string then
099ec     08 4E 05 F1 | 	add	fp, #8
099f0     A7 1E 02 FB | 	rdlong	local01, fp
099f4     08 4E 85 F1 | 	sub	fp, #8
099f8     1F 1E 0E F2 | 	cmp	local01, #31 wz
099fc     40 03 90 5D |  if_ne	jmp	#LR__0827
09a00     2C 1D B0 FD | 	call	#_do_new
09a04                 | '   do_new
09a04                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
09a04     A7 12 02 FB | 	rdlong	arg01, fp
09a08     36 01 00 FF 
09a0c     B9 14 06 F6 | 	mov	arg02, ##@LR__4397
09a10     6C DE B0 FD | 	call	#__system___string_cmp
09a14     00 FA 0D F2 | 	cmp	result1, #0 wz
09a18     36 01 00 AF 
09a1c     BA 1E 06 A6 |  if_e	mov	local01, ##@LR__4398
09a20     A7 1E 62 AC |  if_e	wrlong	local01, fp
09a24                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
09a24     09 12 06 F6 | 	mov	arg01, #9
09a28     74 29 B1 FD | 	call	#__system__close
09a2c     09 1E 06 F6 | 	mov	local01, #9
09a30     71 00 00 FF 
09a34     68 E4 05 F1 | 	add	objptr, ##57960
09a38     F2 12 02 FB | 	rdlong	arg01, objptr
09a3c     71 00 00 FF 
09a40     68 E4 85 F1 | 	sub	objptr, ##57960
09a44     36 01 00 FF 
09a48     C5 14 06 F6 | 	mov	arg02, ##@LR__4399
09a4c     64 DE B0 FD | 	call	#__system___string_concat
09a50     FD 12 02 F6 | 	mov	arg01, result1
09a54     A7 14 02 FB | 	rdlong	arg02, fp
09a58     58 DE B0 FD | 	call	#__system___string_concat
09a5c     FD 14 02 F6 | 	mov	arg02, result1
09a60     0F 13 02 F6 | 	mov	arg01, local01
09a64     00 16 06 F6 | 	mov	arg03, #0
09a68     F0 E9 B0 FD | 	call	#__system___basic_open_string
09a6c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
09a70     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
09a74     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
09a78     10 4E 05 F1 | 	add	fp, #16
09a7c     A7 FA 61 FC | 	wrlong	result1, fp
09a80                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
09a80     10 4E 85 F1 | 	sub	fp, #16
09a84     9C 00 90 AD |  if_e	jmp	#LR__0821
09a88     00 12 06 F6 | 	mov	arg01, #0
09a8c     E0 32 B1 FD | 	call	#__system___getiolock_0383
09a90     FD 12 02 F6 | 	mov	arg01, result1
09a94     C0 DD B0 FD | 	call	#__system___lockmem
09a98     36 01 00 FF 
09a9c     C7 14 06 F6 | 	mov	arg02, ##@LR__4400
09aa0     00 12 06 F6 | 	mov	arg01, #0
09aa4     00 16 06 F6 | 	mov	arg03, #0
09aa8     A0 EA B0 FD | 	call	#__system___basic_print_string
09aac     10 4E 05 F1 | 	add	fp, #16
09ab0     A7 14 02 FB | 	rdlong	arg02, fp
09ab4     10 4E 85 F1 | 	sub	fp, #16
09ab8     00 12 06 F6 | 	mov	arg01, #0
09abc     00 16 06 F6 | 	mov	arg03, #0
09ac0     0A 18 06 F6 | 	mov	arg04, #10
09ac4     C8 EA B0 FD | 	call	#__system___basic_print_integer
09ac8     36 01 00 FF 
09acc     D5 14 06 F6 | 	mov	arg02, ##@LR__4401
09ad0     00 12 06 F6 | 	mov	arg01, #0
09ad4     00 16 06 F6 | 	mov	arg03, #0
09ad8     70 EA B0 FD | 	call	#__system___basic_print_string
09adc     10 4E 05 F1 | 	add	fp, #16
09ae0     A7 12 02 FB | 	rdlong	arg01, fp
09ae4     10 4E 85 F1 | 	sub	fp, #16
09ae8     68 02 B1 FD | 	call	#__system___strerror
09aec     FD 14 02 F6 | 	mov	arg02, result1
09af0     00 12 06 F6 | 	mov	arg01, #0
09af4     00 16 06 F6 | 	mov	arg03, #0
09af8     50 EA B0 FD | 	call	#__system___basic_print_string
09afc     00 12 06 F6 | 	mov	arg01, #0
09b00     0A 14 06 F6 | 	mov	arg02, #10
09b04     00 16 06 F6 | 	mov	arg03, #0
09b08     E8 E9 B0 FD | 	call	#__system___basic_print_char
09b0c     00 12 06 F6 | 	mov	arg01, #0
09b10     5C 32 B1 FD | 	call	#__system___getiolock_0383
09b14     FD 00 68 FC | 	wrlong	#0, result1
09b18     09 12 06 F6 | 	mov	arg01, #9
09b1c     80 28 B1 FD | 	call	#__system__close
09b20     24 02 90 FD | 	jmp	#LR__0829
09b24                 | LR__0821
09b24     0C 4E 05 F1 | 	add	fp, #12
09b28     A7 0A 68 FC | 	wrlong	#5, fp
09b2c                 | '   i=5
09b2c                 | '   get #9,1,header,1
09b2c     0C 4E 05 F1 | 	add	fp, #12
09b30     A7 16 02 F6 | 	mov	arg03, fp
09b34     18 4E 85 F1 | 	sub	fp, #24
09b38     09 12 06 F6 | 	mov	arg01, #9
09b3c     01 14 06 F6 | 	mov	arg02, #1
09b40     01 18 06 F6 | 	mov	arg04, #1
09b44     04 1A 06 F6 | 	mov	arg05, #4
09b48     10 EB B0 FD | 	call	#__system___basic_get
09b4c                 | '   
09b4c                 | '   if header<>$0D616272 then 
09b4c     18 4E 05 F1 | 	add	fp, #24
09b50     A7 1E 02 FB | 	rdlong	local01, fp
09b54     18 4E 85 F1 | 	sub	fp, #24
09b58     B1 B0 06 FF 
09b5c     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
09b60     F0 00 90 AD |  if_e	jmp	#LR__0824
09b64                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
09b64     09 12 06 F6 | 	mov	arg01, #9
09b68     34 28 B1 FD | 	call	#__system__close
09b6c     09 1E 06 F6 | 	mov	local01, #9
09b70     71 00 00 FF 
09b74     68 E4 05 F1 | 	add	objptr, ##57960
09b78     F2 12 02 FB | 	rdlong	arg01, objptr
09b7c     71 00 00 FF 
09b80     68 E4 85 F1 | 	sub	objptr, ##57960
09b84     36 01 00 FF 
09b88     D8 14 06 F6 | 	mov	arg02, ##@LR__4402
09b8c     24 DD B0 FD | 	call	#__system___string_concat
09b90     FD 12 02 F6 | 	mov	arg01, result1
09b94     A7 14 02 FB | 	rdlong	arg02, fp
09b98     18 DD B0 FD | 	call	#__system___string_concat
09b9c     FD 14 02 F6 | 	mov	arg02, result1
09ba0     0F 13 02 F6 | 	mov	arg01, local01
09ba4     00 16 06 F6 | 	mov	arg03, #0
09ba8     B0 E8 B0 FD | 	call	#__system___basic_open_string
09bac                 | '     do
09bac                 | LR__0822
09bac     09 12 06 F6 | 	mov	arg01, #9
09bb0     B0 DE B0 FD | 	call	#__system___basic_read_line
09bb4     55 00 00 FF 
09bb8     F0 E5 05 F1 | 	add	objptr, ##44016
09bbc     F2 FA 61 FC | 	wrlong	result1, objptr
09bc0                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
09bc0     55 00 00 FF 
09bc4     F0 E5 85 F1 | 	sub	objptr, ##44016
09bc8     FD 12 02 F6 | 	mov	arg01, result1
09bcc     01 14 06 F6 | 	mov	arg02, #1
09bd0     94 FC B0 FD | 	call	#__system__Left_S
09bd4     FD 12 02 F6 | 	mov	arg01, result1
09bd8     36 01 00 FF 
09bdc     DA 14 06 F6 | 	mov	arg02, ##@LR__4403
09be0     9C DC B0 FD | 	call	#__system___string_cmp
09be4     00 FA 55 F2 | 	cmps	result1, #0 wc
09be8     34 00 90 CD |  if_b	jmp	#LR__0823
09bec     55 00 00 FF 
09bf0     F0 E5 05 F1 | 	add	objptr, ##44016
09bf4     F2 12 02 FB | 	rdlong	arg01, objptr
09bf8     55 00 00 FF 
09bfc     F0 E5 85 F1 | 	sub	objptr, ##44016
09c00     01 14 06 F6 | 	mov	arg02, #1
09c04     60 FC B0 FD | 	call	#__system__Left_S
09c08     FD 12 02 F6 | 	mov	arg01, result1
09c0c     36 01 00 FF 
09c10     DC 14 06 F6 | 	mov	arg02, ##@LR__4404
09c14     68 DC B0 FD | 	call	#__system___string_cmp
09c18     01 FA 55 F2 | 	cmps	result1, #1 wc
09c1c     FC 6D BF CD |  if_b	call	#_interpret
09c20                 | LR__0823
09c20     55 00 00 FF 
09c24     F0 E5 05 F1 | 	add	objptr, ##44016
09c28     F2 12 02 FB | 	rdlong	arg01, objptr
09c2c     55 00 00 FF 
09c30     F0 E5 85 F1 | 	sub	objptr, ##44016
09c34     36 01 00 FF 
09c38     DE 14 06 F6 | 	mov	arg02, ##@LR__4405
09c3c     40 DC B0 FD | 	call	#__system___string_cmp
09c40     00 FA 0D F2 | 	cmp	result1, #0 wz
09c44     64 FF 9F 5D |  if_ne	jmp	#LR__0822
09c48                 | '     close #9
09c48     09 12 06 F6 | 	mov	arg01, #9
09c4c     50 27 B1 FD | 	call	#__system__close
09c50     F4 00 90 FD | 	jmp	#LR__0828
09c54                 | LR__0824
09c54                 | '   'printerror(26) : close #9 : return
09c54                 | '     do
09c54                 | LR__0825
09c54                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
09c54     0C 4E 05 F1 | 	add	fp, #12
09c58     A7 14 02 FB | 	rdlong	arg02, fp
09c5c     10 4E 05 F1 | 	add	fp, #16
09c60     A7 16 02 F6 | 	mov	arg03, fp
09c64     1C 4E 85 F1 | 	sub	fp, #28
09c68     09 12 06 F6 | 	mov	arg01, #9
09c6c     01 18 06 F6 | 	mov	arg04, #1
09c70     04 1A 06 F6 | 	mov	arg05, #4
09c74     E4 E9 B0 FD | 	call	#__system___basic_get
09c78     14 4E 05 F1 | 	add	fp, #20
09c7c     A7 FA 61 FC | 	wrlong	result1, fp
09c80     08 4E 85 F1 | 	sub	fp, #8
09c84     A7 1E 02 FB | 	rdlong	local01, fp
09c88     04 1E 06 F1 | 	add	local01, #4
09c8c     A7 1E 62 FC | 	wrlong	local01, fp
09c90     10 4E 05 F1 | 	add	fp, #16
09c94     A7 1E 02 FB | 	rdlong	local01, fp
09c98     04 4E 05 F1 | 	add	fp, #4
09c9c     A7 1E 02 F1 | 	add	local01, fp
09ca0     0F 01 48 FC | 	wrbyte	#0, local01
09ca4                 | '       if amount=1 then  
09ca4     0C 4E 85 F1 | 	sub	fp, #12
09ca8     A7 1E 02 FB | 	rdlong	local01, fp
09cac     14 4E 85 F1 | 	sub	fp, #20
09cb0     01 1E 0E F2 | 	cmp	local01, #1 wz
09cb4     68 00 90 5D |  if_ne	jmp	#LR__0826
09cb8                 | '         get #9,i,line2(0),linelength : i+=linelength
09cb8     0C 4E 05 F1 | 	add	fp, #12
09cbc     A7 14 02 FB | 	rdlong	arg02, fp
09cc0     14 4E 05 F1 | 	add	fp, #20
09cc4     A7 16 02 F6 | 	mov	arg03, fp
09cc8     04 4E 85 F1 | 	sub	fp, #4
09ccc     A7 18 02 FB | 	rdlong	arg04, fp
09cd0     1C 4E 85 F1 | 	sub	fp, #28
09cd4     09 12 06 F6 | 	mov	arg01, #9
09cd8     01 1A 06 F6 | 	mov	arg05, #1
09cdc     7C E9 B0 FD | 	call	#__system___basic_get
09ce0     0C 4E 05 F1 | 	add	fp, #12
09ce4     A7 1E 02 FB | 	rdlong	local01, fp
09ce8     10 4E 05 F1 | 	add	fp, #16
09cec     A7 1A 02 FB | 	rdlong	arg05, fp
09cf0     0D 1F 02 F1 | 	add	local01, arg05
09cf4     10 4E 85 F1 | 	sub	fp, #16
09cf8     A7 1E 62 FC | 	wrlong	local01, fp
09cfc     94 4E 05 F1 | 	add	fp, #148
09d00     A7 1E 02 FB | 	rdlong	local01, fp
09d04     A0 4E 85 F1 | 	sub	fp, #160
09d08     55 00 00 FF 
09d0c     F0 E5 05 F1 | 	add	objptr, ##44016
09d10     F2 1E 62 FC | 	wrlong	local01, objptr
09d14     55 00 00 FF 
09d18     F0 E5 85 F1 | 	sub	objptr, ##44016
09d1c     FC 6C BF FD | 	call	#_interpret
09d20                 | LR__0826
09d20     14 4E 05 F1 | 	add	fp, #20
09d24     A7 1E 02 FB | 	rdlong	local01, fp
09d28     14 4E 85 F1 | 	sub	fp, #20
09d2c     01 1E 56 F2 | 	cmps	local01, #1 wc
09d30     20 FF 9F 3D |  if_ae	jmp	#LR__0825
09d34                 | '     close #9 
09d34     09 12 06 F6 | 	mov	arg01, #9
09d38     64 26 B1 FD | 	call	#__system__close
09d3c     08 00 90 FD | 	jmp	#LR__0828
09d40                 | LR__0827
09d40     1E 12 06 F6 | 	mov	arg01, #30
09d44     EC A5 B0 FD | 	call	#_printerror
09d48                 | LR__0828
09d48                 | LR__0829
09d48     A7 F0 03 F6 | 	mov	ptra, fp
09d4c     B2 00 A0 FD | 	call	#popregs_
09d50                 | _do_load_ret
09d50     2D 00 64 FD | 	ret
09d54                 | 
09d54                 | ' 
09d54                 | ' '----------------- Run the program 
09d54                 | ' 
09d54                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
09d54                 | ' 
09d54                 | ' sub do_run
09d54                 | _do_run
09d54     01 4A 05 F6 | 	mov	COUNT_, #1
09d58     A8 00 A0 FD | 	call	#pushregs_
09d5c     69 00 00 FF 
09d60     58 E4 05 F1 | 	add	objptr, ##53848
09d64     F2 1C 02 FB | 	rdlong	arg06, objptr
09d68     0F 00 00 FF 
09d6c     2C E5 05 F1 | 	add	objptr, ##7980
09d70     F2 1C 62 FC | 	wrlong	arg06, objptr
09d74     04 E4 05 F1 | 	add	objptr, #4
09d78     F2 00 68 FC | 	wrlong	#0, objptr
09d7c     04 E4 05 F1 | 	add	objptr, #4
09d80     FF FF FF FF 
09d84     F2 FE 6B FC | 	wrlong	##-1, objptr
09d88                 | ' if inrun>0 then 
09d88     04 E4 05 F1 | 	add	objptr, #4
09d8c     F2 1C 02 FB | 	rdlong	arg06, objptr
09d90     78 00 00 FF 
09d94     90 E5 85 F1 | 	sub	objptr, ##61840
09d98     01 1C 16 F2 | 	cmp	arg06, #1 wc
09d9c     30 00 90 CD |  if_b	jmp	#LR__0830
09da0     78 00 00 FF 
09da4     94 E5 05 F1 | 	add	objptr, ##61844
09da8     F2 12 02 F6 | 	mov	arg01, objptr
09dac     10 E4 85 F1 | 	sub	objptr, #16
09db0     F2 14 02 FB | 	rdlong	arg02, objptr
09db4     18 16 06 F6 | 	mov	arg03, #24
09db8     6D 00 00 FF 
09dbc     C4 E4 85 F1 | 	sub	objptr, ##56004
09dc0     A4 CF B0 FD | 	call	#_psram_spin2_read1
09dc4     0B 00 00 FF 
09dc8     C0 E4 85 F1 | 	sub	objptr, ##5824
09dcc                 | '   psram.read1(varptr(runheader),runptr,24)  
09dcc                 | '   return
09dcc     9C 02 90 FD | 	jmp	#LR__0836
09dd0                 | LR__0830
09dd0     78 00 00 FF 
09dd4     90 E5 05 F1 | 	add	objptr, ##61840
09dd8     F2 02 68 FC | 	wrlong	#1, objptr
09ddc     04 E4 05 F1 | 	add	objptr, #4
09de0     F2 12 02 F6 | 	mov	arg01, objptr
09de4     10 E4 85 F1 | 	sub	objptr, #16
09de8     F2 14 02 FB | 	rdlong	arg02, objptr
09dec     18 16 06 F6 | 	mov	arg03, #24
09df0     6D 00 00 FF 
09df4     C4 E4 85 F1 | 	sub	objptr, ##56004
09df8     6C CF B0 FD | 	call	#_psram_spin2_read1
09dfc                 | ' inrun=1
09dfc                 | ' psram.read1(varptr(runheader),runptr,24) 
09dfc                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
09dfc     6D 00 00 FF 
09e00     D4 E4 05 F1 | 	add	objptr, ##56020
09e04     F2 1E 02 FB | 	rdlong	local01, objptr
09e08     78 00 00 FF 
09e0c     94 E5 85 F1 | 	sub	objptr, ##61844
09e10     FF FF 7F FF 
09e14     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
09e18     78 00 00 AF 
09e1c     90 E5 05 A1 |  if_e	add	objptr, ##61840
09e20     F2 00 68 AC |  if_e	wrlong	#0, objptr
09e24     78 00 00 AF 
09e28     90 E5 85 A1 |  if_e	sub	objptr, ##61840
09e2c     3C 02 90 AD |  if_e	jmp	#LR__0836
09e30                 | ' do 
09e30                 | LR__0831
09e30                 | '   if runptr<>oldrunptr then
09e30     78 00 00 FF 
09e34     84 E5 05 F1 | 	add	objptr, ##61828
09e38     F2 1E 02 FB | 	rdlong	local01, objptr
09e3c     08 E4 05 F1 | 	add	objptr, #8
09e40     F2 1C 02 FB | 	rdlong	arg06, objptr
09e44     78 00 00 FF 
09e48     8C E5 85 F1 | 	sub	objptr, ##61836
09e4c     0E 1F 0A F2 | 	cmp	local01, arg06 wz
09e50     CC 00 90 AD |  if_e	jmp	#LR__0832
09e54     78 00 00 FF 
09e58     94 E5 05 F1 | 	add	objptr, ##61844
09e5c     F2 12 02 F6 | 	mov	arg01, objptr
09e60     10 E4 85 F1 | 	sub	objptr, #16
09e64     F2 14 02 FB | 	rdlong	arg02, objptr
09e68     18 16 06 F6 | 	mov	arg03, #24
09e6c     6D 00 00 FF 
09e70     C4 E4 85 F1 | 	sub	objptr, ##56004
09e74     F0 CE B0 FD | 	call	#_psram_spin2_read1
09e78     5A 00 00 FF 
09e7c     90 E5 05 F1 | 	add	objptr, ##46480
09e80     F2 12 02 F6 | 	mov	arg01, objptr
09e84     12 00 00 FF 
09e88     34 E5 05 F1 | 	add	objptr, ##9524
09e8c     F2 14 02 FB | 	rdlong	arg02, objptr
09e90     14 00 00 FF 
09e94     4C E5 85 F1 | 	sub	objptr, ##10572
09e98     F2 1E 02 FB | 	rdlong	local01, objptr
09e9c     01 1E 66 F0 | 	shl	local01, #1
09ea0     0F 15 02 F1 | 	add	arg02, local01
09ea4     14 00 00 FF 
09ea8     64 E5 05 F1 | 	add	objptr, ##10596
09eac     F2 16 02 FB | 	rdlong	arg03, objptr
09eb0     18 E4 85 F1 | 	sub	objptr, #24
09eb4     F2 1E 02 FB | 	rdlong	local01, objptr
09eb8     0F 17 82 F1 | 	sub	arg03, local01
09ebc     6D 00 00 FF 
09ec0     C4 E4 85 F1 | 	sub	objptr, ##56004
09ec4     A0 CE B0 FD | 	call	#_psram_spin2_read1
09ec8     6D 00 00 FF 
09ecc     DC E4 05 F1 | 	add	objptr, ##56028
09ed0     F2 1E 02 FB | 	rdlong	local01, objptr
09ed4     18 E4 85 F1 | 	sub	objptr, #24
09ed8     F2 1C 02 FB | 	rdlong	arg06, objptr
09edc     0E 1F 82 F1 | 	sub	local01, arg06
09ee0     14 00 00 FF 
09ee4     4C E5 85 F1 | 	sub	objptr, ##10572
09ee8     F2 1C 02 FB | 	rdlong	arg06, objptr
09eec     0E 1F 12 FD | 	qdiv	local01, arg06
09ef0     05 00 00 FF 
09ef4     18 E4 05 F1 | 	add	objptr, ##2584
09ef8     18 1E 62 FD | 	getqx	local01
09efc     03 1E 86 F1 | 	sub	local01, #3
09f00     F2 1E 62 FC | 	wrlong	local01, objptr
09f04     0F 00 00 FF 
09f08     34 E5 05 F1 | 	add	objptr, ##7988
09f0c     F2 1E 02 FB | 	rdlong	local01, objptr
09f10     08 E4 05 F1 | 	add	objptr, #8
09f14     F2 1E 62 FC | 	wrlong	local01, objptr
09f18     78 00 00 FF 
09f1c     8C E5 85 F1 | 	sub	objptr, ##61836
09f20                 | LR__0832
09f20     78 00 00 FF 
09f24     A8 E5 05 F1 | 	add	objptr, ##61864
09f28     F2 1E 02 FB | 	rdlong	local01, objptr
09f2c     24 E4 85 F1 | 	sub	objptr, #36
09f30     F2 1E 62 FC | 	wrlong	local01, objptr
09f34     04 E4 05 F1 | 	add	objptr, #4
09f38     F2 12 02 FB | 	rdlong	arg01, objptr
09f3c     78 00 00 FF 
09f40     88 E5 85 F1 | 	sub	objptr, ##61832
09f44     40 EB BF FD | 	call	#_execute_line
09f48     78 00 00 FF 
09f4c     88 E5 05 F1 | 	add	objptr, ##61832
09f50     F2 FA 61 FC | 	wrlong	result1, objptr
09f54     04 E4 85 F1 | 	sub	objptr, #4
09f58     F2 1E 02 FB | 	rdlong	local01, objptr
09f5c     78 00 00 FF 
09f60     84 E5 85 F1 | 	sub	objptr, ##61828
09f64     FF FF 3F FF 
09f68     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09f6c     0C 00 90 AD |  if_e	jmp	#LR__0833
09f70     84 D1 B0 FD | 	call	#_usbnew_spin2_get_key
09f74     06 FB 0D F2 | 	cmp	result1, #262 wz
09f78     B4 FE 9F 5D |  if_ne	jmp	#LR__0831
09f7c                 | LR__0833
09f7c                 | ' if runheader(5)<>$7FFF_FFFF then 
09f7c     78 00 00 FF 
09f80     A8 E5 05 F1 | 	add	objptr, ##61864
09f84     F2 1E 02 FB | 	rdlong	local01, objptr
09f88     78 00 00 FF 
09f8c     A8 E5 85 F1 | 	sub	objptr, ##61864
09f90     FF FF 3F FF 
09f94     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09f98     BC 00 90 AD |  if_e	jmp	#LR__0835
09f9c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len)  
09f9c     78 00 00 FF 
09fa0     B4 E5 05 F1 | 	add	objptr, ##61876
09fa4     F2 1E 02 FB | 	rdlong	local01, objptr
09fa8     78 00 00 FF 
09fac     B4 E5 85 F1 | 	sub	objptr, ##61876
09fb0     01 1E 0E F2 | 	cmp	local01, #1 wz
09fb4     3C 00 90 5D |  if_ne	jmp	#LR__0834
09fb8     7A 00 00 FF 
09fbc     58 E4 05 F1 | 	add	objptr, ##62552
09fc0     F2 14 02 FB | 	rdlong	arg02, objptr
09fc4     04 E4 85 F1 | 	sub	objptr, #4
09fc8     F2 1A 02 FB | 	rdlong	arg05, objptr
09fcc     07 12 06 F6 | 	mov	arg01, #7
09fd0     56 00 00 FF 
09fd4     44 16 06 F6 | 	mov	arg03, ##44100
09fd8     0E 18 C6 F9 | 	decod	arg04, #14
09fdc     01 1C 66 F6 | 	neg	arg06, #1
09fe0     6E 00 00 FF 
09fe4     94 E5 85 F1 | 	sub	objptr, ##56724
09fe8     34 D4 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
09fec     0B 00 00 FF 
09ff0     C0 E4 85 F1 | 	sub	objptr, ##5824
09ff4                 | LR__0834
09ff4                 | '   print "Stopped at line ";runheader(0)
09ff4     00 12 06 F6 | 	mov	arg01, #0
09ff8     74 2D B1 FD | 	call	#__system___getiolock_0383
09ffc     FD 12 02 F6 | 	mov	arg01, result1
0a000     54 D8 B0 FD | 	call	#__system___lockmem
0a004     36 01 00 FF 
0a008     DF 14 06 F6 | 	mov	arg02, ##@LR__4406
0a00c     00 12 06 F6 | 	mov	arg01, #0
0a010     00 16 06 F6 | 	mov	arg03, #0
0a014     34 E5 B0 FD | 	call	#__system___basic_print_string
0a018     78 00 00 FF 
0a01c     94 E5 05 F1 | 	add	objptr, ##61844
0a020     F2 14 02 FB | 	rdlong	arg02, objptr
0a024     78 00 00 FF 
0a028     94 E5 85 F1 | 	sub	objptr, ##61844
0a02c     00 12 06 F6 | 	mov	arg01, #0
0a030     00 16 06 F6 | 	mov	arg03, #0
0a034     0A 18 06 F6 | 	mov	arg04, #10
0a038     94 E5 B0 FD | 	call	#__system___basic_print_unsigned
0a03c     00 12 06 F6 | 	mov	arg01, #0
0a040     0A 14 06 F6 | 	mov	arg02, #10
0a044     00 16 06 F6 | 	mov	arg03, #0
0a048     A8 E4 B0 FD | 	call	#__system___basic_print_char
0a04c     00 12 06 F6 | 	mov	arg01, #0
0a050     1C 2D B1 FD | 	call	#__system___getiolock_0383
0a054     FD 00 68 FC | 	wrlong	#0, result1
0a058                 | LR__0835
0a058     78 00 00 FF 
0a05c     90 E5 05 F1 | 	add	objptr, ##61840
0a060     F2 00 68 FC | 	wrlong	#0, objptr
0a064     78 00 00 FF 
0a068     90 E5 85 F1 | 	sub	objptr, ##61840
0a06c                 | LR__0836
0a06c     A7 F0 03 F6 | 	mov	ptra, fp
0a070     B2 00 A0 FD | 	call	#popregs_
0a074                 | _do_run_ret
0a074     2D 00 64 FD | 	ret
0a078                 | 
0a078                 | ' 
0a078                 | ' sub do_defenv
0a078                 | _do_defenv
0a078     05 4A 05 F6 | 	mov	COUNT_, #5
0a07c     A8 00 A0 FD | 	call	#pushregs_
0a080     84 F0 07 F1 | 	add	ptra, #132
0a084     69 00 00 FF 
0a088     54 E4 05 F1 | 	add	objptr, ##53844
0a08c     F2 1A 02 FB | 	rdlong	arg05, objptr
0a090     0D 19 02 F6 | 	mov	arg04, arg05
0a094     01 18 66 F0 | 	shl	arg04, #1
0a098     0D 19 02 F1 | 	add	arg04, arg05
0a09c     02 18 66 F0 | 	shl	arg04, #2
0a0a0     03 00 00 FF 
0a0a4     04 E4 85 F1 | 	sub	objptr, ##1540
0a0a8     F2 18 02 F1 | 	add	arg04, objptr
0a0ac     0C 1B 02 FB | 	rdlong	arg05, arg04
0a0b0     A7 1A 62 FC | 	wrlong	arg05, fp
0a0b4                 | ' 
0a0b4                 | ' numpar=compiledline(lineptr_e).result.uresult
0a0b4                 | ' 
0a0b4                 | ' 
0a0b4                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0a0b4                 | ' ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR as in Yamaha DX7
0a0b4                 | ' ' defsnd channel, a,d,s,r - defines ADSR as in SID 
0a0b4                 | ' 
0a0b4                 | ' 
0a0b4                 | ' if numpar<2 then return
0a0b4     02 1A 56 F2 | 	cmps	arg05, #2 wc
0a0b8     66 00 00 FF 
0a0bc     50 E4 85 F1 | 	sub	objptr, ##52304
0a0c0     40 0A 90 CD |  if_b	jmp	#LR__0867
0a0c4                 | ' 
0a0c4                 | '  
0a0c4                 | ' if numpar=2 then
0a0c4     A7 1A 02 FB | 	rdlong	arg05, fp
0a0c8     02 1A 0E F2 | 	cmp	arg05, #2 wz
0a0cc     AC 04 90 5D |  if_ne	jmp	#LR__0850
0a0d0     B8 EA BF FD | 	call	#_pop
0a0d4     FF 1A 02 F6 | 	mov	arg05, result3
0a0d8     28 4E 05 F1 | 	add	fp, #40
0a0dc     A7 FA 61 FC | 	wrlong	result1, fp
0a0e0     04 4E 05 F1 | 	add	fp, #4
0a0e4     A7 FC 61 FC | 	wrlong	result2, fp
0a0e8     04 4E 05 F1 | 	add	fp, #4
0a0ec     A7 1A 62 FC | 	wrlong	arg05, fp
0a0f0                 | '   t1=pop()
0a0f0                 | '   if t1.result_type=result_string2 then 
0a0f0     30 4E 85 F1 | 	sub	fp, #48
0a0f4     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0a0f8     20 00 90 5D |  if_ne	jmp	#LR__0840
0a0fc     28 4E 05 F1 | 	add	fp, #40
0a100     A7 12 02 FB | 	rdlong	arg01, fp
0a104     28 4E 85 F1 | 	sub	fp, #40
0a108     88 1B B0 FD | 	call	#_convertstring
0a10c     34 4E 05 F1 | 	add	fp, #52
0a110     A7 FA 61 FC | 	wrlong	result1, fp
0a114     34 4E 85 F1 | 	sub	fp, #52
0a118     40 00 90 FD | 	jmp	#LR__0843
0a11c                 | LR__0840
0a11c     30 4E 05 F1 | 	add	fp, #48
0a120     A7 1A 02 FB | 	rdlong	arg05, fp
0a124     30 4E 85 F1 | 	sub	fp, #48
0a128     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0a12c     18 00 90 5D |  if_ne	jmp	#LR__0841
0a130     28 4E 05 F1 | 	add	fp, #40
0a134     A7 1A 02 FB | 	rdlong	arg05, fp
0a138     0C 4E 05 F1 | 	add	fp, #12
0a13c     A7 1A 62 FC | 	wrlong	arg05, fp
0a140     34 4E 85 F1 | 	sub	fp, #52
0a144     14 00 90 FD | 	jmp	#LR__0842
0a148                 | LR__0841
0a148     36 01 00 FF 
0a14c     F0 1A 06 F6 | 	mov	arg05, ##@LR__4407
0a150     34 4E 05 F1 | 	add	fp, #52
0a154     A7 1A 62 FC | 	wrlong	arg05, fp
0a158     34 4E 85 F1 | 	sub	fp, #52
0a15c                 | LR__0842
0a15c                 | LR__0843
0a15c                 | ' 
0a15c                 | '     
0a15c                 | '   if s<>"" then 
0a15c     34 4E 05 F1 | 	add	fp, #52
0a160     A7 12 02 FB | 	rdlong	arg01, fp
0a164     34 4E 85 F1 | 	sub	fp, #52
0a168     36 01 00 FF 
0a16c     F1 14 06 F6 | 	mov	arg02, ##@LR__4408
0a170     0C D7 B0 FD | 	call	#__system___string_cmp
0a174     00 FA 0D F2 | 	cmp	result1, #0 wz
0a178     9C 02 90 AD |  if_e	jmp	#LR__0848
0a17c     0C EA BF FD | 	call	#_pop
0a180     FF 1A 02 F6 | 	mov	arg05, result3
0a184     28 4E 05 F1 | 	add	fp, #40
0a188     A7 FA 61 FC | 	wrlong	result1, fp
0a18c     04 4E 05 F1 | 	add	fp, #4
0a190     A7 FC 61 FC | 	wrlong	result2, fp
0a194     04 4E 05 F1 | 	add	fp, #4
0a198     A7 1A 62 FC | 	wrlong	arg05, fp
0a19c     08 4E 85 F1 | 	sub	fp, #8
0a1a0     A7 12 02 F6 | 	mov	arg01, fp
0a1a4     28 4E 85 F1 | 	sub	fp, #40
0a1a8     34 5E B0 FD | 	call	#_converttoint
0a1ac     10 4E 05 F1 | 	add	fp, #16
0a1b0     A7 FA 61 FC | 	wrlong	result1, fp
0a1b4     10 4E 85 F1 | 	sub	fp, #16
0a1b8                 | '     t1=pop()
0a1b8                 | '     channel=converttoint(t1) 
0a1b8                 | '     close #9 : open "/sd/media/h/"+s for input as #9
0a1b8     09 12 06 F6 | 	mov	arg01, #9
0a1bc     E0 21 B1 FD | 	call	#__system__close
0a1c0     09 1E 06 F6 | 	mov	local01, #9
0a1c4     36 01 00 FF 
0a1c8     F2 12 06 F6 | 	mov	arg01, ##@LR__4409
0a1cc     34 4E 05 F1 | 	add	fp, #52
0a1d0     A7 14 02 FB | 	rdlong	arg02, fp
0a1d4     34 4E 85 F1 | 	sub	fp, #52
0a1d8     D8 D6 B0 FD | 	call	#__system___string_concat
0a1dc     FD 14 02 F6 | 	mov	arg02, result1
0a1e0     0F 13 02 F6 | 	mov	arg01, local01
0a1e4     00 16 06 F6 | 	mov	arg03, #0
0a1e8     70 E2 B0 FD | 	call	#__system___basic_open_string
0a1ec     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0a1f0     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0a1f4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0a1f8     7A 00 00 FF 
0a1fc     C0 E4 05 F1 | 	add	objptr, ##62656
0a200     F2 FA 61 FC | 	wrlong	result1, objptr
0a204                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0a204     7A 00 00 FF 
0a208     C0 E4 85 F1 | 	sub	objptr, ##62656
0a20c     B0 00 90 AD |  if_e	jmp	#LR__0844
0a210     00 12 06 F6 | 	mov	arg01, #0
0a214     58 2B B1 FD | 	call	#__system___getiolock_0383
0a218     FD 12 02 F6 | 	mov	arg01, result1
0a21c     38 D6 B0 FD | 	call	#__system___lockmem
0a220     36 01 00 FF 
0a224     FF 14 06 F6 | 	mov	arg02, ##@LR__4410
0a228     00 12 06 F6 | 	mov	arg01, #0
0a22c     00 16 06 F6 | 	mov	arg03, #0
0a230     18 E3 B0 FD | 	call	#__system___basic_print_string
0a234     7A 00 00 FF 
0a238     C0 E4 05 F1 | 	add	objptr, ##62656
0a23c     F2 14 02 FB | 	rdlong	arg02, objptr
0a240     7A 00 00 FF 
0a244     C0 E4 85 F1 | 	sub	objptr, ##62656
0a248     00 12 06 F6 | 	mov	arg01, #0
0a24c     00 16 06 F6 | 	mov	arg03, #0
0a250     0A 18 06 F6 | 	mov	arg04, #10
0a254     38 E3 B0 FD | 	call	#__system___basic_print_integer
0a258     36 01 00 FF 
0a25c     0D 15 06 F6 | 	mov	arg02, ##@LR__4411
0a260     00 12 06 F6 | 	mov	arg01, #0
0a264     00 16 06 F6 | 	mov	arg03, #0
0a268     E0 E2 B0 FD | 	call	#__system___basic_print_string
0a26c     00 1E 06 F6 | 	mov	local01, #0
0a270     7A 00 00 FF 
0a274     C0 E4 05 F1 | 	add	objptr, ##62656
0a278     F2 12 02 FB | 	rdlong	arg01, objptr
0a27c     7A 00 00 FF 
0a280     C0 E4 85 F1 | 	sub	objptr, ##62656
0a284     CC FA B0 FD | 	call	#__system___strerror
0a288     FD 14 02 F6 | 	mov	arg02, result1
0a28c     0F 13 02 F6 | 	mov	arg01, local01
0a290     00 16 06 F6 | 	mov	arg03, #0
0a294     B4 E2 B0 FD | 	call	#__system___basic_print_string
0a298     00 12 06 F6 | 	mov	arg01, #0
0a29c     0A 14 06 F6 | 	mov	arg02, #10
0a2a0     00 16 06 F6 | 	mov	arg03, #0
0a2a4     4C E2 B0 FD | 	call	#__system___basic_print_char
0a2a8     00 12 06 F6 | 	mov	arg01, #0
0a2ac     C0 2A B1 FD | 	call	#__system___getiolock_0383
0a2b0     FD 00 68 FC | 	wrlong	#0, result1
0a2b4     09 12 06 F6 | 	mov	arg01, #9
0a2b8     E4 20 B1 FD | 	call	#__system__close
0a2bc     44 08 90 FD | 	jmp	#LR__0867
0a2c0                 | LR__0844
0a2c0                 | '     get #9,17,envbuf8(channel,0),256
0a2c0     10 4E 05 F1 | 	add	fp, #16
0a2c4     A7 1A 02 FB | 	rdlong	arg05, fp
0a2c8     10 4E 85 F1 | 	sub	fp, #16
0a2cc     0D 17 02 F6 | 	mov	arg03, arg05
0a2d0     09 16 66 F0 | 	shl	arg03, #9
0a2d4     0D 17 02 F1 | 	add	arg03, arg05
0a2d8     2B 00 00 FF 
0a2dc     CC E5 05 F1 | 	add	objptr, ##22476
0a2e0     F2 16 02 F1 | 	add	arg03, objptr
0a2e4     09 12 06 F6 | 	mov	arg01, #9
0a2e8     11 14 06 F6 | 	mov	arg02, #17
0a2ec     00 19 06 F6 | 	mov	arg04, #256
0a2f0     01 1A 06 F6 | 	mov	arg05, #1
0a2f4     2B 00 00 FF 
0a2f8     CC E5 85 F1 | 	sub	objptr, ##22476
0a2fc     5C E3 B0 FD | 	call	#__system___basic_get
0a300                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0a300     04 4E 05 F1 | 	add	fp, #4
0a304     A7 FE 69 FC | 	wrlong	#255, fp
0a308     04 4E 85 F1 | 	sub	fp, #4
0a30c     2B 00 00 FF 
0a310     CC E5 05 F1 | 	add	objptr, ##22476
0a314     97 34 48 FB | 	callpa	#(@LR__0846-@LR__0845)>>2,fcache_load_ptr_
0a318                 | LR__0845
0a318     10 4E 05 F1 | 	add	fp, #16
0a31c     A7 1A 02 FB | 	rdlong	arg05, fp
0a320     0D 19 02 F6 | 	mov	arg04, arg05
0a324     08 18 66 F0 | 	shl	arg04, #8
0a328     0D 19 02 F1 | 	add	arg04, arg05
0a32c     01 18 66 F0 | 	shl	arg04, #1
0a330     F2 18 02 F1 | 	add	arg04, objptr
0a334     0C 4E 85 F1 | 	sub	fp, #12
0a338     A7 16 02 FB | 	rdlong	arg03, fp
0a33c     0B 15 02 F6 | 	mov	arg02, arg03
0a340     01 14 66 F0 | 	shl	arg02, #1
0a344     0C 15 02 F1 | 	add	arg02, arg04
0a348     0D 19 02 F6 | 	mov	arg04, arg05
0a34c     09 18 66 F0 | 	shl	arg04, #9
0a350     0D 19 02 F1 | 	add	arg04, arg05
0a354     F2 18 02 F1 | 	add	arg04, objptr
0a358     0C 17 02 F1 | 	add	arg03, arg04
0a35c     0B 1B C2 FA | 	rdbyte	arg05, arg03
0a360     00 1B 06 FA | 	mul	arg05, #256
0a364     0A 1B 52 FC | 	wrword	arg05, arg02
0a368     A7 1A 02 FB | 	rdlong	arg05, fp
0a36c     01 1A 86 F1 | 	sub	arg05, #1
0a370     A7 1A 62 FC | 	wrlong	arg05, fp
0a374     04 4E 85 F1 | 	sub	fp, #4
0a378     00 1A 56 F2 | 	cmps	arg05, #0 wc
0a37c     98 FF 9F 3D |  if_ae	jmp	#LR__0845
0a380                 | LR__0846
0a380     2B 00 00 FF 
0a384     CC E5 85 F1 | 	sub	objptr, ##22476
0a388                 | '     close #9
0a388     09 12 06 F6 | 	mov	arg01, #9
0a38c     10 20 B1 FD | 	call	#__system__close
0a390                 | '                                                                       for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0a390     04 4E 05 F1 | 	add	fp, #4
0a394     A7 00 68 FC | 	wrlong	#0, fp
0a398                 | LR__0847
0a398     A7 1E 02 FB | 	rdlong	local01, fp
0a39c     0F 13 02 F6 | 	mov	arg01, local01
0a3a0     0C 4E 05 F1 | 	add	fp, #12
0a3a4     A7 1A 02 FB | 	rdlong	arg05, fp
0a3a8     0D 19 02 F6 | 	mov	arg04, arg05
0a3ac     08 18 66 F0 | 	shl	arg04, #8
0a3b0     0D 19 02 F1 | 	add	arg04, arg05
0a3b4     01 18 66 F0 | 	shl	arg04, #1
0a3b8     2B 00 00 FF 
0a3bc     CC E5 05 F1 | 	add	objptr, ##22476
0a3c0     F2 18 02 F1 | 	add	arg04, objptr
0a3c4     01 1E 66 F0 | 	shl	local01, #1
0a3c8     0C 1F 02 F1 | 	add	local01, arg04
0a3cc     0F 1F E2 FA | 	rdword	local01, local01
0a3d0     0F 1F 52 F6 | 	abs	local01, local01 wc
0a3d4     90 1F 16 FD | 	qdiv	local01, #400
0a3d8     10 4E 85 F1 | 	sub	fp, #16
0a3dc     2B 00 00 FF 
0a3e0     CC E5 85 F1 | 	sub	objptr, ##22476
0a3e4     20 15 06 F6 | 	mov	arg02, #288
0a3e8     28 16 06 F6 | 	mov	arg03, #40
0a3ec     18 1E 62 FD | 	getqx	local01
0a3f0     0F 15 A2 F3 | 	sumnc	arg02, local01
0a3f4     10 B5 B0 FD | 	call	#_hg010b_spin2_putpixel
0a3f8     04 4E 05 F1 | 	add	fp, #4
0a3fc     A7 1E 02 FB | 	rdlong	local01, fp
0a400     01 1E 06 F1 | 	add	local01, #1
0a404     A7 1E 62 FC | 	wrlong	local01, fp
0a408     00 1F 56 F2 | 	cmps	local01, #256 wc
0a40c     88 FF 9F CD |  if_b	jmp	#LR__0847
0a410     04 4E 85 F1 | 	sub	fp, #4
0a414                 | '     return
0a414     EC 06 90 FD | 	jmp	#LR__0867
0a418                 | LR__0848
0a418     28 4E 05 F1 | 	add	fp, #40
0a41c     A7 12 02 F6 | 	mov	arg01, fp
0a420     28 4E 85 F1 | 	sub	fp, #40
0a424     B8 5B B0 FD | 	call	#_converttoint
0a428     FD 1E 02 F6 | 	mov	local01, result1
0a42c     0C 4E 05 F1 | 	add	fp, #12
0a430     A7 1E 62 FC | 	wrlong	local01, fp
0a434     0C 4E 85 F1 | 	sub	fp, #12
0a438                 | '   
0a438                 | '   par=converttoint(t1)  : print par
0a438     00 12 06 F6 | 	mov	arg01, #0
0a43c     30 29 B1 FD | 	call	#__system___getiolock_0383
0a440     FD 12 02 F6 | 	mov	arg01, result1
0a444     10 D4 B0 FD | 	call	#__system___lockmem
0a448     0C 4E 05 F1 | 	add	fp, #12
0a44c     A7 14 02 FB | 	rdlong	arg02, fp
0a450     0C 4E 85 F1 | 	sub	fp, #12
0a454     00 12 06 F6 | 	mov	arg01, #0
0a458     00 16 06 F6 | 	mov	arg03, #0
0a45c     0A 18 06 F6 | 	mov	arg04, #10
0a460     2C E1 B0 FD | 	call	#__system___basic_print_integer
0a464     00 12 06 F6 | 	mov	arg01, #0
0a468     0A 14 06 F6 | 	mov	arg02, #10
0a46c     00 16 06 F6 | 	mov	arg03, #0
0a470     80 E0 B0 FD | 	call	#__system___basic_print_char
0a474     00 12 06 F6 | 	mov	arg01, #0
0a478     F4 28 B1 FD | 	call	#__system___getiolock_0383
0a47c     FD 00 68 FC | 	wrlong	#0, result1
0a480     08 E7 BF FD | 	call	#_pop
0a484     FF 1E 02 F6 | 	mov	local01, result3
0a488     28 4E 05 F1 | 	add	fp, #40
0a48c     A7 FA 61 FC | 	wrlong	result1, fp
0a490     04 4E 05 F1 | 	add	fp, #4
0a494     A7 FC 61 FC | 	wrlong	result2, fp
0a498     04 4E 05 F1 | 	add	fp, #4
0a49c     A7 1E 62 FC | 	wrlong	local01, fp
0a4a0     08 4E 85 F1 | 	sub	fp, #8
0a4a4     A7 12 02 F6 | 	mov	arg01, fp
0a4a8     28 4E 85 F1 | 	sub	fp, #40
0a4ac     30 5B B0 FD | 	call	#_converttoint
0a4b0     10 4E 05 F1 | 	add	fp, #16
0a4b4     A7 FA 61 FC | 	wrlong	result1, fp
0a4b8                 | '   t1=pop()
0a4b8                 | '   channel=converttoint(t1)  
0a4b8                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0a4b8     04 4E 85 F1 | 	sub	fp, #4
0a4bc     A7 1E 0A FB | 	rdlong	local01, fp wz
0a4c0     0C 4E 85 F1 | 	sub	fp, #12
0a4c4     3C 06 90 5D |  if_ne	jmp	#LR__0867
0a4c8     04 4E 05 F1 | 	add	fp, #4
0a4cc     A7 00 68 FC | 	wrlong	#0, fp
0a4d0     04 4E 85 F1 | 	sub	fp, #4
0a4d4                 | LR__0849
0a4d4     10 4E 05 F1 | 	add	fp, #16
0a4d8     A7 1E 02 FB | 	rdlong	local01, fp
0a4dc     0B 1E 66 F0 | 	shl	local01, #11
0a4e0     0B 00 00 FF 
0a4e4     CC E5 05 F1 | 	add	objptr, ##6092
0a4e8     F2 1E 02 F1 | 	add	local01, objptr
0a4ec     0C 4E 85 F1 | 	sub	fp, #12
0a4f0     A7 12 02 FB | 	rdlong	arg01, fp
0a4f4     09 21 02 F6 | 	mov	local02, arg01
0a4f8     01 20 66 F0 | 	shl	local02, #1
0a4fc     0F 21 02 F1 | 	add	local02, local01
0a500     04 4E 85 F1 | 	sub	fp, #4
0a504     0B 00 00 FF 
0a508     CC E5 85 F1 | 	sub	objptr, ##6092
0a50c     09 13 52 F6 | 	abs	arg01, arg01 wc
0a510     1F 22 C6 C9 |  if_b	decod	local03, #31
0a514     00 22 06 36 |  if_ae	mov	local03, #0
0a518     20 F9 B0 FD | 	call	#__system___float_fromuns
0a51c     11 FB 61 F5 | 	xor	result1, local03
0a520     FD 14 02 F6 | 	mov	arg02, result1
0a524     87 E4 1D FF 
0a528     DB 13 06 F6 | 	mov	arg01, ##1003032539
0a52c     38 FC B0 FD | 	call	#__system___float_mul
0a530     FD 12 02 F6 | 	mov	arg01, result1
0a534     6C 05 B1 FD | 	call	#__system____builtin_sinf
0a538     FD 14 02 F6 | 	mov	arg02, result1
0a53c     58 7F 23 FF 
0a540     00 12 06 F6 | 	mov	arg01, ##1191096320
0a544     20 FC B0 FD | 	call	#__system___float_mul
0a548     FD 12 02 F6 | 	mov	arg01, result1
0a54c     01 14 06 F6 | 	mov	arg02, #1
0a550     DC 00 B1 FD | 	call	#__system___float_tointeger
0a554     10 FB 51 FC | 	wrword	result1, local02
0a558     04 4E 05 F1 | 	add	fp, #4
0a55c     A7 20 02 FB | 	rdlong	local02, fp
0a560     01 20 06 F1 | 	add	local02, #1
0a564     A7 20 62 FC | 	wrlong	local02, fp
0a568     04 4E 85 F1 | 	sub	fp, #4
0a56c     02 00 00 FF 
0a570     00 20 56 F2 | 	cmps	local02, ##1024 wc
0a574     5C FF 9F CD |  if_b	jmp	#LR__0849
0a578                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0a578                 | '   return
0a578     88 05 90 FD | 	jmp	#LR__0867
0a57c                 | LR__0850
0a57c                 | ' for i=0 to 15 : harm(i)=0: next i  
0a57c     04 4E 05 F1 | 	add	fp, #4
0a580     A7 00 68 FC | 	wrlong	#0, fp
0a584     97 16 48 FB | 	callpa	#(@LR__0852-@LR__0851)>>2,fcache_load_ptr_
0a588                 | LR__0851
0a588     A7 1E 02 FB | 	rdlong	local01, fp
0a58c     02 1E 66 F0 | 	shl	local01, #2
0a590     34 4E 05 F1 | 	add	fp, #52
0a594     A7 1E 02 F1 | 	add	local01, fp
0a598     0F 01 68 FC | 	wrlong	#0, local01
0a59c     34 4E 85 F1 | 	sub	fp, #52
0a5a0     A7 1E 02 FB | 	rdlong	local01, fp
0a5a4     01 1E 06 F1 | 	add	local01, #1
0a5a8     A7 1E 62 FC | 	wrlong	local01, fp
0a5ac     10 1E 56 F2 | 	cmps	local01, #16 wc
0a5b0     D4 FF 9F CD |  if_b	jmp	#LR__0851
0a5b4                 | LR__0852
0a5b4     04 4E 85 F1 | 	sub	fp, #4
0a5b8                 | ' for i=numpar to 2 step -1 
0a5b8     A7 1E 02 FB | 	rdlong	local01, fp
0a5bc     04 4E 05 F1 | 	add	fp, #4
0a5c0     A7 1E 62 FC | 	wrlong	local01, fp
0a5c4     04 4E 85 F1 | 	sub	fp, #4
0a5c8                 | LR__0853
0a5c8     C0 E5 BF FD | 	call	#_pop
0a5cc     28 4E 05 F1 | 	add	fp, #40
0a5d0     A7 FA 61 FC | 	wrlong	result1, fp
0a5d4     04 4E 05 F1 | 	add	fp, #4
0a5d8     A7 FC 61 FC | 	wrlong	result2, fp
0a5dc     04 4E 05 F1 | 	add	fp, #4
0a5e0     A7 FE 61 FC | 	wrlong	result3, fp
0a5e4     2C 4E 85 F1 | 	sub	fp, #44
0a5e8     A7 1E 02 FB | 	rdlong	local01, fp
0a5ec     02 1E 86 F1 | 	sub	local01, #2
0a5f0     02 1E 66 F0 | 	shl	local01, #2
0a5f4     34 4E 05 F1 | 	add	fp, #52
0a5f8     A7 1E 02 F1 | 	add	local01, fp
0a5fc     10 4E 85 F1 | 	sub	fp, #16
0a600     A7 12 02 F6 | 	mov	arg01, fp
0a604     28 4E 85 F1 | 	sub	fp, #40
0a608     54 5A B0 FD | 	call	#_converttofloat
0a60c     0F FB 61 FC | 	wrlong	result1, local01
0a610     04 4E 05 F1 | 	add	fp, #4
0a614     A7 1E 02 FB | 	rdlong	local01, fp
0a618     01 1E 86 F1 | 	sub	local01, #1
0a61c     A7 1E 62 FC | 	wrlong	local01, fp
0a620     04 4E 85 F1 | 	sub	fp, #4
0a624     02 1E 56 F2 | 	cmps	local01, #2 wc
0a628     9C FF 9F 3D |  if_ae	jmp	#LR__0853
0a62c     5C E5 BF FD | 	call	#_pop
0a630     FF 1E 02 F6 | 	mov	local01, result3
0a634     28 4E 05 F1 | 	add	fp, #40
0a638     A7 FA 61 FC | 	wrlong	result1, fp
0a63c     04 4E 05 F1 | 	add	fp, #4
0a640     A7 FC 61 FC | 	wrlong	result2, fp
0a644     04 4E 05 F1 | 	add	fp, #4
0a648     A7 1E 62 FC | 	wrlong	local01, fp
0a64c     08 4E 85 F1 | 	sub	fp, #8
0a650     A7 12 02 F6 | 	mov	arg01, fp
0a654     28 4E 85 F1 | 	sub	fp, #40
0a658     84 59 B0 FD | 	call	#_converttoint
0a65c     FD 1E 02 F6 | 	mov	local01, result1
0a660     10 4E 05 F1 | 	add	fp, #16
0a664     A7 1E 62 FC | 	wrlong	local01, fp
0a668     10 4E 85 F1 | 	sub	fp, #16
0a66c                 | ' t1=pop()
0a66c                 | ' channel=converttoint(t1) : print channel
0a66c     00 12 06 F6 | 	mov	arg01, #0
0a670     FC 26 B1 FD | 	call	#__system___getiolock_0383
0a674     FD 12 02 F6 | 	mov	arg01, result1
0a678     DC D1 B0 FD | 	call	#__system___lockmem
0a67c     10 4E 05 F1 | 	add	fp, #16
0a680     A7 14 02 FB | 	rdlong	arg02, fp
0a684     10 4E 85 F1 | 	sub	fp, #16
0a688     00 12 06 F6 | 	mov	arg01, #0
0a68c     00 16 06 F6 | 	mov	arg03, #0
0a690     0A 18 06 F6 | 	mov	arg04, #10
0a694     F8 DE B0 FD | 	call	#__system___basic_print_integer
0a698     00 12 06 F6 | 	mov	arg01, #0
0a69c     0A 14 06 F6 | 	mov	arg02, #10
0a6a0     00 16 06 F6 | 	mov	arg03, #0
0a6a4     4C DE B0 FD | 	call	#__system___basic_print_char
0a6a8     00 12 06 F6 | 	mov	arg01, #0
0a6ac     C0 26 B1 FD | 	call	#__system___getiolock_0383
0a6b0     FD 00 68 FC | 	wrlong	#0, result1
0a6b4                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0a6b4     08 4E 05 F1 | 	add	fp, #8
0a6b8     02 00 80 FF 
0a6bc     A7 00 68 FC | 	wrlong	##1024, fp
0a6c0     08 4E 85 F1 | 	sub	fp, #8
0a6c4     0B 00 00 FF 
0a6c8     CC E5 05 F1 | 	add	objptr, ##6092
0a6cc     97 18 48 FB | 	callpa	#(@LR__0856-@LR__0854)>>2,fcache_load_ptr_
0a6d0                 | LR__0854
0a6d0     02 00 00 FF 
0a6d4     00 14 DC FC | 	rep	@LR__0857, ##1024
0a6d8                 | LR__0855
0a6d8     10 4E 05 F1 | 	add	fp, #16
0a6dc     A7 20 02 FB | 	rdlong	local02, fp
0a6e0     0B 20 66 F0 | 	shl	local02, #11
0a6e4     F2 20 02 F1 | 	add	local02, objptr
0a6e8     0C 4E 85 F1 | 	sub	fp, #12
0a6ec     A7 1E 02 FB | 	rdlong	local01, fp
0a6f0     04 4E 85 F1 | 	sub	fp, #4
0a6f4     01 1E 66 F0 | 	shl	local01, #1
0a6f8     10 1F 02 F1 | 	add	local01, local02
0a6fc     0F 01 58 FC | 	wrword	#0, local01
0a700                 | LR__0856
0a700                 | LR__0857
0a700     0B 00 00 FF 
0a704     CC E5 85 F1 | 	sub	objptr, ##6092
0a708     1C 4E 05 F1 | 	add	fp, #28
0a70c     A7 00 68 FC | 	wrlong	#0, fp
0a710                 | ' max=0
0a710                 | ' if harm(0)<0 then
0a710     1C 4E 05 F1 | 	add	fp, #28
0a714     A7 12 02 FB | 	rdlong	arg01, fp
0a718     38 4E 85 F1 | 	sub	fp, #56
0a71c     00 14 06 F6 | 	mov	arg02, #0
0a720     01 16 06 F6 | 	mov	arg03, #1
0a724     74 FE B0 FD | 	call	#__system___float_cmp
0a728     00 FA 55 F2 | 	cmps	result1, #0 wc
0a72c     04 01 90 3D |  if_ae	jmp	#LR__0860
0a730     38 4E 05 F1 | 	add	fp, #56
0a734     A7 FA 01 FB | 	rdlong	result1, fp
0a738     1F FA 05 F4 | 	bitl	result1, #31
0a73c     24 4E 85 F1 | 	sub	fp, #36
0a740     A7 FA 61 FC | 	wrlong	result1, fp
0a744     28 4E 05 F1 | 	add	fp, #40
0a748     A7 FA 01 FB | 	rdlong	result1, fp
0a74c     1F FA 05 F4 | 	bitl	result1, #31
0a750     24 4E 85 F1 | 	sub	fp, #36
0a754     A7 FA 61 FC | 	wrlong	result1, fp
0a758     20 4E 05 F1 | 	add	fp, #32
0a75c     00 C0 9F FF 
0a760     A7 00 68 FC | 	wrlong	##1065353216, fp
0a764     24 4E 85 F1 | 	sub	fp, #36
0a768     A7 1E 02 FB | 	rdlong	local01, fp
0a76c     28 4E 05 F1 | 	add	fp, #40
0a770     A7 1E 62 FC | 	wrlong	local01, fp
0a774     24 4E 85 F1 | 	sub	fp, #36
0a778     A7 1E 02 FB | 	rdlong	local01, fp
0a77c     28 4E 05 F1 | 	add	fp, #40
0a780     A7 1E 62 FC | 	wrlong	local01, fp
0a784                 | '   harm(0)=1
0a784                 | '   harm(1)=even
0a784                 | '   harm(2)=odd
0a784                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0a784     3C 4E 85 F1 | 	sub	fp, #60
0a788     A7 06 68 FC | 	wrlong	#3, fp
0a78c                 | LR__0858
0a78c     A7 1A 02 FB | 	rdlong	arg05, fp
0a790     0D 25 02 F6 | 	mov	local04, arg05
0a794     02 24 66 F0 | 	shl	local04, #2
0a798     34 4E 05 F1 | 	add	fp, #52
0a79c     A7 24 02 F1 | 	add	local04, fp
0a7a0     02 1A 86 F1 | 	sub	arg05, #2
0a7a4     02 1A 66 F0 | 	shl	arg05, #2
0a7a8     A7 1A 02 F1 | 	add	arg05, fp
0a7ac     0D 13 02 FB | 	rdlong	arg01, arg05
0a7b0     24 4E 85 F1 | 	sub	fp, #36
0a7b4     A7 14 02 FB | 	rdlong	arg02, fp
0a7b8     14 4E 85 F1 | 	sub	fp, #20
0a7bc     A8 F9 B0 FD | 	call	#__system___float_mul
0a7c0     12 FB 61 FC | 	wrlong	result1, local04
0a7c4     04 4E 05 F1 | 	add	fp, #4
0a7c8     A7 26 02 FB | 	rdlong	local05, fp
0a7cc     02 26 06 F1 | 	add	local05, #2
0a7d0     A7 26 62 FC | 	wrlong	local05, fp
0a7d4     10 26 56 F2 | 	cmps	local05, #16 wc
0a7d8     B0 FF 9F CD |  if_b	jmp	#LR__0858
0a7dc                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0a7dc     A7 08 68 FC | 	wrlong	#4, fp
0a7e0                 | LR__0859
0a7e0     A7 26 02 FB | 	rdlong	local05, fp
0a7e4     13 25 02 F6 | 	mov	local04, local05
0a7e8     02 24 66 F0 | 	shl	local04, #2
0a7ec     34 4E 05 F1 | 	add	fp, #52
0a7f0     A7 24 02 F1 | 	add	local04, fp
0a7f4     02 26 86 F1 | 	sub	local05, #2
0a7f8     02 26 66 F0 | 	shl	local05, #2
0a7fc     A7 26 02 F1 | 	add	local05, fp
0a800     13 13 02 FB | 	rdlong	arg01, local05
0a804     20 4E 85 F1 | 	sub	fp, #32
0a808     A7 14 02 FB | 	rdlong	arg02, fp
0a80c     18 4E 85 F1 | 	sub	fp, #24
0a810     54 F9 B0 FD | 	call	#__system___float_mul
0a814     12 FB 61 FC | 	wrlong	result1, local04
0a818     04 4E 05 F1 | 	add	fp, #4
0a81c     A7 26 02 FB | 	rdlong	local05, fp
0a820     02 26 06 F1 | 	add	local05, #2
0a824     A7 26 62 FC | 	wrlong	local05, fp
0a828     0F 26 56 F2 | 	cmps	local05, #15 wc
0a82c     B0 FF 9F CD |  if_b	jmp	#LR__0859
0a830     04 4E 85 F1 | 	sub	fp, #4
0a834                 | LR__0860
0a834                 | ' if harm(0)>=0 then ' synthesize with harmonics
0a834     38 4E 05 F1 | 	add	fp, #56
0a838     A7 12 02 FB | 	rdlong	arg01, fp
0a83c     38 4E 85 F1 | 	sub	fp, #56
0a840     00 14 06 F6 | 	mov	arg02, #0
0a844     01 16 66 F6 | 	neg	arg03, #1
0a848     50 FD B0 FD | 	call	#__system___float_cmp
0a84c     00 FA 55 F2 | 	cmps	result1, #0 wc
0a850     B0 02 90 CD |  if_b	jmp	#LR__0866
0a854                 | '   for i=0 to 1023
0a854     04 4E 05 F1 | 	add	fp, #4
0a858     A7 00 68 FC | 	wrlong	#0, fp
0a85c     04 4E 85 F1 | 	sub	fp, #4
0a860                 | LR__0861
0a860     20 4E 05 F1 | 	add	fp, #32
0a864     A7 00 68 FC | 	wrlong	#0, fp
0a868                 | '     spl=0
0a868                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0a868     18 4E 85 F1 | 	sub	fp, #24
0a86c     A7 00 68 FC | 	wrlong	#0, fp
0a870                 | LR__0862
0a870     A7 24 02 FB | 	rdlong	local04, fp
0a874     02 24 66 F0 | 	shl	local04, #2
0a878     30 4E 05 F1 | 	add	fp, #48
0a87c     A7 24 02 F1 | 	add	local04, fp
0a880     12 27 02 FB | 	rdlong	local05, local04
0a884     87 E4 1D FF 
0a888     DB 25 06 F6 | 	mov	local04, ##1003032539
0a88c     34 4E 85 F1 | 	sub	fp, #52
0a890     A7 12 02 FB | 	rdlong	arg01, fp
0a894     04 4E 85 F1 | 	sub	fp, #4
0a898     09 13 52 F6 | 	abs	arg01, arg01 wc
0a89c     1F 22 C6 C9 |  if_b	decod	local03, #31
0a8a0     00 22 06 36 |  if_ae	mov	local03, #0
0a8a4     94 F5 B0 FD | 	call	#__system___float_fromuns
0a8a8     11 FB 61 F5 | 	xor	result1, local03
0a8ac     FD 14 02 F6 | 	mov	arg02, result1
0a8b0     12 13 02 F6 | 	mov	arg01, local04
0a8b4     B0 F8 B0 FD | 	call	#__system___float_mul
0a8b8     FD 24 02 F6 | 	mov	local04, result1
0a8bc     08 4E 05 F1 | 	add	fp, #8
0a8c0     A7 12 02 FB | 	rdlong	arg01, fp
0a8c4     08 4E 85 F1 | 	sub	fp, #8
0a8c8     01 12 06 F1 | 	add	arg01, #1
0a8cc     09 13 52 F6 | 	abs	arg01, arg01 wc
0a8d0     1F 22 C6 C9 |  if_b	decod	local03, #31
0a8d4     00 22 06 36 |  if_ae	mov	local03, #0
0a8d8     60 F5 B0 FD | 	call	#__system___float_fromuns
0a8dc     11 FB 61 F5 | 	xor	result1, local03
0a8e0     FD 14 02 F6 | 	mov	arg02, result1
0a8e4     12 13 02 F6 | 	mov	arg01, local04
0a8e8     7C F8 B0 FD | 	call	#__system___float_mul
0a8ec     FD 12 02 F6 | 	mov	arg01, result1
0a8f0     B0 01 B1 FD | 	call	#__system____builtin_sinf
0a8f4     FD 14 02 F6 | 	mov	arg02, result1
0a8f8     13 13 02 F6 | 	mov	arg01, local05
0a8fc     68 F8 B0 FD | 	call	#__system___float_mul
0a900     FD 14 02 F6 | 	mov	arg02, result1
0a904     20 4E 05 F1 | 	add	fp, #32
0a908     A7 12 02 FB | 	rdlong	arg01, fp
0a90c     20 4E 85 F1 | 	sub	fp, #32
0a910     5C F5 B0 FD | 	call	#__system___float_add
0a914     20 4E 05 F1 | 	add	fp, #32
0a918     A7 FA 61 FC | 	wrlong	result1, fp
0a91c     18 4E 85 F1 | 	sub	fp, #24
0a920     A7 16 02 FB | 	rdlong	arg03, fp
0a924     01 16 06 F1 | 	add	arg03, #1
0a928     A7 16 62 FC | 	wrlong	arg03, fp
0a92c     10 16 56 F2 | 	cmps	arg03, #16 wc
0a930     3C FF 9F CD |  if_b	jmp	#LR__0862
0a934                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0a934     18 4E 05 F1 | 	add	fp, #24
0a938     A7 12 02 FB | 	rdlong	arg01, fp
0a93c     1F 12 06 F4 | 	bitl	arg01, #31
0a940     04 4E 85 F1 | 	sub	fp, #4
0a944     A7 14 02 FB | 	rdlong	arg02, fp
0a948     1C 4E 85 F1 | 	sub	fp, #28
0a94c     01 16 66 F6 | 	neg	arg03, #1
0a950     48 FC B0 FD | 	call	#__system___float_cmp
0a954     01 FA 55 F2 | 	cmps	result1, #1 wc
0a958     18 00 90 CD |  if_b	jmp	#LR__0863
0a95c     20 4E 05 F1 | 	add	fp, #32
0a960     A7 FA 01 FB | 	rdlong	result1, fp
0a964     1F FA 05 F4 | 	bitl	result1, #31
0a968     04 4E 85 F1 | 	sub	fp, #4
0a96c     A7 FA 61 FC | 	wrlong	result1, fp
0a970     1C 4E 85 F1 | 	sub	fp, #28
0a974                 | LR__0863
0a974     04 4E 05 F1 | 	add	fp, #4
0a978     A7 26 02 FB | 	rdlong	local05, fp
0a97c     01 26 06 F1 | 	add	local05, #1
0a980     A7 26 62 FC | 	wrlong	local05, fp
0a984     04 4E 85 F1 | 	sub	fp, #4
0a988     02 00 00 FF 
0a98c     00 26 56 F2 | 	cmps	local05, ##1024 wc
0a990     CC FE 9F CD |  if_b	jmp	#LR__0861
0a994                 | '   for i=0 to 1023
0a994     04 4E 05 F1 | 	add	fp, #4
0a998     A7 00 68 FC | 	wrlong	#0, fp
0a99c     04 4E 85 F1 | 	sub	fp, #4
0a9a0                 | LR__0864
0a9a0     20 4E 05 F1 | 	add	fp, #32
0a9a4     A7 00 68 FC | 	wrlong	#0, fp
0a9a8                 | '     spl=0
0a9a8                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0a9a8     18 4E 85 F1 | 	sub	fp, #24
0a9ac     A7 00 68 FC | 	wrlong	#0, fp
0a9b0                 | LR__0865
0a9b0     A7 26 02 FB | 	rdlong	local05, fp
0a9b4     02 26 66 F0 | 	shl	local05, #2
0a9b8     30 4E 05 F1 | 	add	fp, #48
0a9bc     A7 26 02 F1 | 	add	local05, fp
0a9c0     13 27 02 FB | 	rdlong	local05, local05
0a9c4     1C 4E 85 F1 | 	sub	fp, #28
0a9c8     A7 14 02 FB | 	rdlong	arg02, fp
0a9cc     1C 4E 85 F1 | 	sub	fp, #28
0a9d0     58 7F 23 FF 
0a9d4     00 12 06 F6 | 	mov	arg01, ##1191096320
0a9d8     90 F9 B0 FD | 	call	#__system___float_div
0a9dc     FD 14 02 F6 | 	mov	arg02, result1
0a9e0     13 13 02 F6 | 	mov	arg01, local05
0a9e4     80 F7 B0 FD | 	call	#__system___float_mul
0a9e8     FD 26 02 F6 | 	mov	local05, result1
0a9ec     87 E4 1D FF 
0a9f0     DB 25 06 F6 | 	mov	local04, ##1003032539
0a9f4     04 4E 05 F1 | 	add	fp, #4
0a9f8     A7 12 02 FB | 	rdlong	arg01, fp
0a9fc     04 4E 85 F1 | 	sub	fp, #4
0aa00     09 13 52 F6 | 	abs	arg01, arg01 wc
0aa04     1F 22 C6 C9 |  if_b	decod	local03, #31
0aa08     00 22 06 36 |  if_ae	mov	local03, #0
0aa0c     2C F4 B0 FD | 	call	#__system___float_fromuns
0aa10     11 FB 61 F5 | 	xor	result1, local03
0aa14     FD 14 02 F6 | 	mov	arg02, result1
0aa18     12 13 02 F6 | 	mov	arg01, local04
0aa1c     48 F7 B0 FD | 	call	#__system___float_mul
0aa20     FD 24 02 F6 | 	mov	local04, result1
0aa24     08 4E 05 F1 | 	add	fp, #8
0aa28     A7 12 02 FB | 	rdlong	arg01, fp
0aa2c     08 4E 85 F1 | 	sub	fp, #8
0aa30     01 12 06 F1 | 	add	arg01, #1
0aa34     09 13 52 F6 | 	abs	arg01, arg01 wc
0aa38     1F 22 C6 C9 |  if_b	decod	local03, #31
0aa3c     00 22 06 36 |  if_ae	mov	local03, #0
0aa40     F8 F3 B0 FD | 	call	#__system___float_fromuns
0aa44     11 FB 61 F5 | 	xor	result1, local03
0aa48     FD 14 02 F6 | 	mov	arg02, result1
0aa4c     12 13 02 F6 | 	mov	arg01, local04
0aa50     14 F7 B0 FD | 	call	#__system___float_mul
0aa54     FD 12 02 F6 | 	mov	arg01, result1
0aa58     48 00 B1 FD | 	call	#__system____builtin_sinf
0aa5c     FD 14 02 F6 | 	mov	arg02, result1
0aa60     13 13 02 F6 | 	mov	arg01, local05
0aa64     00 F7 B0 FD | 	call	#__system___float_mul
0aa68     FD 14 02 F6 | 	mov	arg02, result1
0aa6c     20 4E 05 F1 | 	add	fp, #32
0aa70     A7 12 02 FB | 	rdlong	arg01, fp
0aa74     20 4E 85 F1 | 	sub	fp, #32
0aa78     F4 F3 B0 FD | 	call	#__system___float_add
0aa7c     20 4E 05 F1 | 	add	fp, #32
0aa80     A7 FA 61 FC | 	wrlong	result1, fp
0aa84     18 4E 85 F1 | 	sub	fp, #24
0aa88     A7 26 02 FB | 	rdlong	local05, fp
0aa8c     01 26 06 F1 | 	add	local05, #1
0aa90     A7 26 62 FC | 	wrlong	local05, fp
0aa94     10 26 56 F2 | 	cmps	local05, #16 wc
0aa98     14 FF 9F CD |  if_b	jmp	#LR__0865
0aa9c     08 4E 05 F1 | 	add	fp, #8
0aaa0     A7 26 02 FB | 	rdlong	local05, fp
0aaa4     0B 26 66 F0 | 	shl	local05, #11
0aaa8     0B 00 00 FF 
0aaac     CC E5 05 F1 | 	add	objptr, ##6092
0aab0     F2 26 02 F1 | 	add	local05, objptr
0aab4     0C 4E 85 F1 | 	sub	fp, #12
0aab8     A7 20 02 FB | 	rdlong	local02, fp
0aabc     01 20 66 F0 | 	shl	local02, #1
0aac0     13 21 02 F1 | 	add	local02, local05
0aac4     1C 4E 05 F1 | 	add	fp, #28
0aac8     A7 12 02 FB | 	rdlong	arg01, fp
0aacc     20 4E 85 F1 | 	sub	fp, #32
0aad0     0B 00 00 FF 
0aad4     CC E5 85 F1 | 	sub	objptr, ##6092
0aad8     01 14 06 F6 | 	mov	arg02, #1
0aadc     50 FB B0 FD | 	call	#__system___float_tointeger
0aae0     10 FB 51 FC | 	wrword	result1, local02
0aae4     04 4E 05 F1 | 	add	fp, #4
0aae8     A7 26 02 FB | 	rdlong	local05, fp
0aaec     01 26 06 F1 | 	add	local05, #1
0aaf0     A7 26 62 FC | 	wrlong	local05, fp
0aaf4     04 4E 85 F1 | 	sub	fp, #4
0aaf8     02 00 00 FF 
0aafc     00 26 56 F2 | 	cmps	local05, ##1024 wc
0ab00     9C FE 9F CD |  if_b	jmp	#LR__0864
0ab04                 | LR__0866
0ab04                 | LR__0867
0ab04     A7 F0 03 F6 | 	mov	ptra, fp
0ab08     B2 00 A0 FD | 	call	#popregs_
0ab0c                 | _do_defenv_ret
0ab0c     2D 00 64 FD | 	ret
0ab10                 | 
0ab10                 | ' 
0ab10                 | ' sub do_defsnd
0ab10                 | _do_defsnd
0ab10     05 4A 05 F6 | 	mov	COUNT_, #5
0ab14     A8 00 A0 FD | 	call	#pushregs_
0ab18     84 F0 07 F1 | 	add	ptra, #132
0ab1c     69 00 00 FF 
0ab20     54 E4 05 F1 | 	add	objptr, ##53844
0ab24     F2 1A 02 FB | 	rdlong	arg05, objptr
0ab28     0D 19 02 F6 | 	mov	arg04, arg05
0ab2c     01 18 66 F0 | 	shl	arg04, #1
0ab30     0D 19 02 F1 | 	add	arg04, arg05
0ab34     02 18 66 F0 | 	shl	arg04, #2
0ab38     03 00 00 FF 
0ab3c     04 E4 85 F1 | 	sub	objptr, ##1540
0ab40     F2 18 02 F1 | 	add	arg04, objptr
0ab44     0C 1B 02 FB | 	rdlong	arg05, arg04
0ab48     A7 1A 62 FC | 	wrlong	arg05, fp
0ab4c                 | ' 
0ab4c                 | ' numpar=compiledline(lineptr_e).result.uresult
0ab4c                 | ' 
0ab4c                 | ' 
0ab4c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0ab4c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0ab4c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0ab4c                 | ' ' defsnd channel, oneint - defines waveshape as in SID and 0=sinewave
0ab4c                 | ' 
0ab4c                 | ' if numpar<2 then return
0ab4c     02 1A 56 F2 | 	cmps	arg05, #2 wc
0ab50     66 00 00 FF 
0ab54     50 E4 85 F1 | 	sub	objptr, ##52304
0ab58     2C 09 90 CD |  if_b	jmp	#LR__0894
0ab5c                 | ' 
0ab5c                 | '  
0ab5c                 | ' if numpar=2 then
0ab5c     A7 1A 02 FB | 	rdlong	arg05, fp
0ab60     02 1A 0E F2 | 	cmp	arg05, #2 wz
0ab64     98 03 90 5D |  if_ne	jmp	#LR__0877
0ab68     20 E0 BF FD | 	call	#_pop
0ab6c     FF 1A 02 F6 | 	mov	arg05, result3
0ab70     28 4E 05 F1 | 	add	fp, #40
0ab74     A7 FA 61 FC | 	wrlong	result1, fp
0ab78     04 4E 05 F1 | 	add	fp, #4
0ab7c     A7 FC 61 FC | 	wrlong	result2, fp
0ab80     04 4E 05 F1 | 	add	fp, #4
0ab84     A7 1A 62 FC | 	wrlong	arg05, fp
0ab88                 | '   t1=pop()
0ab88                 | '   if t1.result_type=result_string2 then 
0ab88     30 4E 85 F1 | 	sub	fp, #48
0ab8c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0ab90     20 00 90 5D |  if_ne	jmp	#LR__0870
0ab94     28 4E 05 F1 | 	add	fp, #40
0ab98     A7 12 02 FB | 	rdlong	arg01, fp
0ab9c     28 4E 85 F1 | 	sub	fp, #40
0aba0     F0 10 B0 FD | 	call	#_convertstring
0aba4     34 4E 05 F1 | 	add	fp, #52
0aba8     A7 FA 61 FC | 	wrlong	result1, fp
0abac     34 4E 85 F1 | 	sub	fp, #52
0abb0     40 00 90 FD | 	jmp	#LR__0873
0abb4                 | LR__0870
0abb4     30 4E 05 F1 | 	add	fp, #48
0abb8     A7 1A 02 FB | 	rdlong	arg05, fp
0abbc     30 4E 85 F1 | 	sub	fp, #48
0abc0     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0abc4     18 00 90 5D |  if_ne	jmp	#LR__0871
0abc8     28 4E 05 F1 | 	add	fp, #40
0abcc     A7 1A 02 FB | 	rdlong	arg05, fp
0abd0     0C 4E 05 F1 | 	add	fp, #12
0abd4     A7 1A 62 FC | 	wrlong	arg05, fp
0abd8     34 4E 85 F1 | 	sub	fp, #52
0abdc     14 00 90 FD | 	jmp	#LR__0872
0abe0                 | LR__0871
0abe0     36 01 00 FF 
0abe4     10 1B 06 F6 | 	mov	arg05, ##@LR__4412
0abe8     34 4E 05 F1 | 	add	fp, #52
0abec     A7 1A 62 FC | 	wrlong	arg05, fp
0abf0     34 4E 85 F1 | 	sub	fp, #52
0abf4                 | LR__0872
0abf4                 | LR__0873
0abf4                 | ' 
0abf4                 | '     
0abf4                 | '   if s<>"" then 
0abf4     34 4E 05 F1 | 	add	fp, #52
0abf8     A7 12 02 FB | 	rdlong	arg01, fp
0abfc     34 4E 85 F1 | 	sub	fp, #52
0ac00     36 01 00 FF 
0ac04     11 15 06 F6 | 	mov	arg02, ##@LR__4413
0ac08     74 CC B0 FD | 	call	#__system___string_cmp
0ac0c     00 FA 0D F2 | 	cmp	result1, #0 wz
0ac10     88 01 90 AD |  if_e	jmp	#LR__0875
0ac14     74 DF BF FD | 	call	#_pop
0ac18     FF 1A 02 F6 | 	mov	arg05, result3
0ac1c     28 4E 05 F1 | 	add	fp, #40
0ac20     A7 FA 61 FC | 	wrlong	result1, fp
0ac24     04 4E 05 F1 | 	add	fp, #4
0ac28     A7 FC 61 FC | 	wrlong	result2, fp
0ac2c     04 4E 05 F1 | 	add	fp, #4
0ac30     A7 1A 62 FC | 	wrlong	arg05, fp
0ac34     08 4E 85 F1 | 	sub	fp, #8
0ac38     A7 12 02 F6 | 	mov	arg01, fp
0ac3c     28 4E 85 F1 | 	sub	fp, #40
0ac40     9C 53 B0 FD | 	call	#_converttoint
0ac44     10 4E 05 F1 | 	add	fp, #16
0ac48     A7 FA 61 FC | 	wrlong	result1, fp
0ac4c     10 4E 85 F1 | 	sub	fp, #16
0ac50                 | '     t1=pop()
0ac50                 | '     channel=converttoint(t1) 
0ac50                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0ac50     09 12 06 F6 | 	mov	arg01, #9
0ac54     48 17 B1 FD | 	call	#__system__close
0ac58     09 1E 06 F6 | 	mov	local01, #9
0ac5c     36 01 00 FF 
0ac60     12 13 06 F6 | 	mov	arg01, ##@LR__4414
0ac64     34 4E 05 F1 | 	add	fp, #52
0ac68     A7 14 02 FB | 	rdlong	arg02, fp
0ac6c     34 4E 85 F1 | 	sub	fp, #52
0ac70     40 CC B0 FD | 	call	#__system___string_concat
0ac74     FD 14 02 F6 | 	mov	arg02, result1
0ac78     0F 13 02 F6 | 	mov	arg01, local01
0ac7c     00 16 06 F6 | 	mov	arg03, #0
0ac80     D8 D7 B0 FD | 	call	#__system___basic_open_string
0ac84     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0ac88     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0ac8c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0ac90     7A 00 00 FF 
0ac94     C0 E4 05 F1 | 	add	objptr, ##62656
0ac98     F2 FA 61 FC | 	wrlong	result1, objptr
0ac9c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0ac9c     7A 00 00 FF 
0aca0     C0 E4 85 F1 | 	sub	objptr, ##62656
0aca4     B0 00 90 AD |  if_e	jmp	#LR__0874
0aca8     00 12 06 F6 | 	mov	arg01, #0
0acac     C0 20 B1 FD | 	call	#__system___getiolock_0383
0acb0     FD 12 02 F6 | 	mov	arg01, result1
0acb4     A0 CB B0 FD | 	call	#__system___lockmem
0acb8     36 01 00 FF 
0acbc     1F 15 06 F6 | 	mov	arg02, ##@LR__4415
0acc0     00 12 06 F6 | 	mov	arg01, #0
0acc4     00 16 06 F6 | 	mov	arg03, #0
0acc8     80 D8 B0 FD | 	call	#__system___basic_print_string
0accc     7A 00 00 FF 
0acd0     C0 E4 05 F1 | 	add	objptr, ##62656
0acd4     F2 14 02 FB | 	rdlong	arg02, objptr
0acd8     7A 00 00 FF 
0acdc     C0 E4 85 F1 | 	sub	objptr, ##62656
0ace0     00 12 06 F6 | 	mov	arg01, #0
0ace4     00 16 06 F6 | 	mov	arg03, #0
0ace8     0A 18 06 F6 | 	mov	arg04, #10
0acec     A0 D8 B0 FD | 	call	#__system___basic_print_integer
0acf0     36 01 00 FF 
0acf4     2D 15 06 F6 | 	mov	arg02, ##@LR__4416
0acf8     00 12 06 F6 | 	mov	arg01, #0
0acfc     00 16 06 F6 | 	mov	arg03, #0
0ad00     48 D8 B0 FD | 	call	#__system___basic_print_string
0ad04     00 1E 06 F6 | 	mov	local01, #0
0ad08     7A 00 00 FF 
0ad0c     C0 E4 05 F1 | 	add	objptr, ##62656
0ad10     F2 12 02 FB | 	rdlong	arg01, objptr
0ad14     7A 00 00 FF 
0ad18     C0 E4 85 F1 | 	sub	objptr, ##62656
0ad1c     34 F0 B0 FD | 	call	#__system___strerror
0ad20     FD 14 02 F6 | 	mov	arg02, result1
0ad24     0F 13 02 F6 | 	mov	arg01, local01
0ad28     00 16 06 F6 | 	mov	arg03, #0
0ad2c     1C D8 B0 FD | 	call	#__system___basic_print_string
0ad30     00 12 06 F6 | 	mov	arg01, #0
0ad34     0A 14 06 F6 | 	mov	arg02, #10
0ad38     00 16 06 F6 | 	mov	arg03, #0
0ad3c     B4 D7 B0 FD | 	call	#__system___basic_print_char
0ad40     00 12 06 F6 | 	mov	arg01, #0
0ad44     28 20 B1 FD | 	call	#__system___getiolock_0383
0ad48     FD 00 68 FC | 	wrlong	#0, result1
0ad4c     09 12 06 F6 | 	mov	arg01, #9
0ad50     4C 16 B1 FD | 	call	#__system__close
0ad54     30 07 90 FD | 	jmp	#LR__0894
0ad58                 | LR__0874
0ad58                 | '     get #9,17,samplebuf(channel,0),1024
0ad58     10 4E 05 F1 | 	add	fp, #16
0ad5c     A7 16 02 FB | 	rdlong	arg03, fp
0ad60     10 4E 85 F1 | 	sub	fp, #16
0ad64     0B 16 66 F0 | 	shl	arg03, #11
0ad68     0B 00 00 FF 
0ad6c     CC E5 05 F1 | 	add	objptr, ##6092
0ad70     F2 16 02 F1 | 	add	arg03, objptr
0ad74     09 12 06 F6 | 	mov	arg01, #9
0ad78     11 14 06 F6 | 	mov	arg02, #17
0ad7c     0A 18 C6 F9 | 	decod	arg04, #10
0ad80     02 1A 06 F6 | 	mov	arg05, #2
0ad84     0B 00 00 FF 
0ad88     CC E5 85 F1 | 	sub	objptr, ##6092
0ad8c     CC D8 B0 FD | 	call	#__system___basic_get
0ad90                 | '     close #9
0ad90     09 12 06 F6 | 	mov	arg01, #9
0ad94     08 16 B1 FD | 	call	#__system__close
0ad98                 | '                                                                       '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0ad98                 | '     return
0ad98     EC 06 90 FD | 	jmp	#LR__0894
0ad9c                 | LR__0875
0ad9c     28 4E 05 F1 | 	add	fp, #40
0ada0     A7 12 02 F6 | 	mov	arg01, fp
0ada4     28 4E 85 F1 | 	sub	fp, #40
0ada8     34 52 B0 FD | 	call	#_converttoint
0adac     FD 1E 02 F6 | 	mov	local01, result1
0adb0     0C 4E 05 F1 | 	add	fp, #12
0adb4     A7 1E 62 FC | 	wrlong	local01, fp
0adb8     0C 4E 85 F1 | 	sub	fp, #12
0adbc                 | '   
0adbc                 | '   par=converttoint(t1)  : print par
0adbc     00 12 06 F6 | 	mov	arg01, #0
0adc0     AC 1F B1 FD | 	call	#__system___getiolock_0383
0adc4     FD 12 02 F6 | 	mov	arg01, result1
0adc8     8C CA B0 FD | 	call	#__system___lockmem
0adcc     0C 4E 05 F1 | 	add	fp, #12
0add0     A7 14 02 FB | 	rdlong	arg02, fp
0add4     0C 4E 85 F1 | 	sub	fp, #12
0add8     00 12 06 F6 | 	mov	arg01, #0
0addc     00 16 06 F6 | 	mov	arg03, #0
0ade0     0A 18 06 F6 | 	mov	arg04, #10
0ade4     A8 D7 B0 FD | 	call	#__system___basic_print_integer
0ade8     00 12 06 F6 | 	mov	arg01, #0
0adec     0A 14 06 F6 | 	mov	arg02, #10
0adf0     00 16 06 F6 | 	mov	arg03, #0
0adf4     FC D6 B0 FD | 	call	#__system___basic_print_char
0adf8     00 12 06 F6 | 	mov	arg01, #0
0adfc     70 1F B1 FD | 	call	#__system___getiolock_0383
0ae00     FD 00 68 FC | 	wrlong	#0, result1
0ae04     84 DD BF FD | 	call	#_pop
0ae08     FF 1E 02 F6 | 	mov	local01, result3
0ae0c     28 4E 05 F1 | 	add	fp, #40
0ae10     A7 FA 61 FC | 	wrlong	result1, fp
0ae14     04 4E 05 F1 | 	add	fp, #4
0ae18     A7 FC 61 FC | 	wrlong	result2, fp
0ae1c     04 4E 05 F1 | 	add	fp, #4
0ae20     A7 1E 62 FC | 	wrlong	local01, fp
0ae24     08 4E 85 F1 | 	sub	fp, #8
0ae28     A7 12 02 F6 | 	mov	arg01, fp
0ae2c     28 4E 85 F1 | 	sub	fp, #40
0ae30     AC 51 B0 FD | 	call	#_converttoint
0ae34     10 4E 05 F1 | 	add	fp, #16
0ae38     A7 FA 61 FC | 	wrlong	result1, fp
0ae3c                 | '   t1=pop()
0ae3c                 | '   channel=converttoint(t1)  
0ae3c                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0ae3c     04 4E 85 F1 | 	sub	fp, #4
0ae40     A7 1E 0A FB | 	rdlong	local01, fp wz
0ae44     0C 4E 85 F1 | 	sub	fp, #12
0ae48     3C 06 90 5D |  if_ne	jmp	#LR__0894
0ae4c     04 4E 05 F1 | 	add	fp, #4
0ae50     A7 00 68 FC | 	wrlong	#0, fp
0ae54     04 4E 85 F1 | 	sub	fp, #4
0ae58                 | LR__0876
0ae58     10 4E 05 F1 | 	add	fp, #16
0ae5c     A7 1E 02 FB | 	rdlong	local01, fp
0ae60     0B 1E 66 F0 | 	shl	local01, #11
0ae64     0B 00 00 FF 
0ae68     CC E5 05 F1 | 	add	objptr, ##6092
0ae6c     F2 1E 02 F1 | 	add	local01, objptr
0ae70     0C 4E 85 F1 | 	sub	fp, #12
0ae74     A7 12 02 FB | 	rdlong	arg01, fp
0ae78     09 21 02 F6 | 	mov	local02, arg01
0ae7c     01 20 66 F0 | 	shl	local02, #1
0ae80     0F 21 02 F1 | 	add	local02, local01
0ae84     04 4E 85 F1 | 	sub	fp, #4
0ae88     0B 00 00 FF 
0ae8c     CC E5 85 F1 | 	sub	objptr, ##6092
0ae90     09 13 52 F6 | 	abs	arg01, arg01 wc
0ae94     1F 22 C6 C9 |  if_b	decod	local03, #31
0ae98     00 22 06 36 |  if_ae	mov	local03, #0
0ae9c     9C EF B0 FD | 	call	#__system___float_fromuns
0aea0     11 FB 61 F5 | 	xor	result1, local03
0aea4     FD 14 02 F6 | 	mov	arg02, result1
0aea8     87 E4 1D FF 
0aeac     DB 13 06 F6 | 	mov	arg01, ##1003032539
0aeb0     B4 F2 B0 FD | 	call	#__system___float_mul
0aeb4     FD 12 02 F6 | 	mov	arg01, result1
0aeb8     E8 FB B0 FD | 	call	#__system____builtin_sinf
0aebc     FD 14 02 F6 | 	mov	arg02, result1
0aec0     58 7F 23 FF 
0aec4     00 12 06 F6 | 	mov	arg01, ##1191096320
0aec8     9C F2 B0 FD | 	call	#__system___float_mul
0aecc     FD 12 02 F6 | 	mov	arg01, result1
0aed0     01 14 06 F6 | 	mov	arg02, #1
0aed4     58 F7 B0 FD | 	call	#__system___float_tointeger
0aed8     10 FB 51 FC | 	wrword	result1, local02
0aedc     04 4E 05 F1 | 	add	fp, #4
0aee0     A7 20 02 FB | 	rdlong	local02, fp
0aee4     01 20 06 F1 | 	add	local02, #1
0aee8     A7 20 62 FC | 	wrlong	local02, fp
0aeec     04 4E 85 F1 | 	sub	fp, #4
0aef0     02 00 00 FF 
0aef4     00 20 56 F2 | 	cmps	local02, ##1024 wc
0aef8     5C FF 9F CD |  if_b	jmp	#LR__0876
0aefc                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0aefc                 | '   return
0aefc     88 05 90 FD | 	jmp	#LR__0894
0af00                 | LR__0877
0af00                 | ' for i=0 to 15 : harm(i)=0: next i  
0af00     04 4E 05 F1 | 	add	fp, #4
0af04     A7 00 68 FC | 	wrlong	#0, fp
0af08     97 16 48 FB | 	callpa	#(@LR__0879-@LR__0878)>>2,fcache_load_ptr_
0af0c                 | LR__0878
0af0c     A7 1E 02 FB | 	rdlong	local01, fp
0af10     02 1E 66 F0 | 	shl	local01, #2
0af14     34 4E 05 F1 | 	add	fp, #52
0af18     A7 1E 02 F1 | 	add	local01, fp
0af1c     0F 01 68 FC | 	wrlong	#0, local01
0af20     34 4E 85 F1 | 	sub	fp, #52
0af24     A7 1E 02 FB | 	rdlong	local01, fp
0af28     01 1E 06 F1 | 	add	local01, #1
0af2c     A7 1E 62 FC | 	wrlong	local01, fp
0af30     10 1E 56 F2 | 	cmps	local01, #16 wc
0af34     D4 FF 9F CD |  if_b	jmp	#LR__0878
0af38                 | LR__0879
0af38     04 4E 85 F1 | 	sub	fp, #4
0af3c                 | ' for i=numpar to 2 step -1 
0af3c     A7 1E 02 FB | 	rdlong	local01, fp
0af40     04 4E 05 F1 | 	add	fp, #4
0af44     A7 1E 62 FC | 	wrlong	local01, fp
0af48     04 4E 85 F1 | 	sub	fp, #4
0af4c                 | LR__0880
0af4c     3C DC BF FD | 	call	#_pop
0af50     28 4E 05 F1 | 	add	fp, #40
0af54     A7 FA 61 FC | 	wrlong	result1, fp
0af58     04 4E 05 F1 | 	add	fp, #4
0af5c     A7 FC 61 FC | 	wrlong	result2, fp
0af60     04 4E 05 F1 | 	add	fp, #4
0af64     A7 FE 61 FC | 	wrlong	result3, fp
0af68     2C 4E 85 F1 | 	sub	fp, #44
0af6c     A7 1E 02 FB | 	rdlong	local01, fp
0af70     02 1E 86 F1 | 	sub	local01, #2
0af74     02 1E 66 F0 | 	shl	local01, #2
0af78     34 4E 05 F1 | 	add	fp, #52
0af7c     A7 1E 02 F1 | 	add	local01, fp
0af80     10 4E 85 F1 | 	sub	fp, #16
0af84     A7 12 02 F6 | 	mov	arg01, fp
0af88     28 4E 85 F1 | 	sub	fp, #40
0af8c     D0 50 B0 FD | 	call	#_converttofloat
0af90     0F FB 61 FC | 	wrlong	result1, local01
0af94     04 4E 05 F1 | 	add	fp, #4
0af98     A7 1E 02 FB | 	rdlong	local01, fp
0af9c     01 1E 86 F1 | 	sub	local01, #1
0afa0     A7 1E 62 FC | 	wrlong	local01, fp
0afa4     04 4E 85 F1 | 	sub	fp, #4
0afa8     02 1E 56 F2 | 	cmps	local01, #2 wc
0afac     9C FF 9F 3D |  if_ae	jmp	#LR__0880
0afb0     D8 DB BF FD | 	call	#_pop
0afb4     FF 1E 02 F6 | 	mov	local01, result3
0afb8     28 4E 05 F1 | 	add	fp, #40
0afbc     A7 FA 61 FC | 	wrlong	result1, fp
0afc0     04 4E 05 F1 | 	add	fp, #4
0afc4     A7 FC 61 FC | 	wrlong	result2, fp
0afc8     04 4E 05 F1 | 	add	fp, #4
0afcc     A7 1E 62 FC | 	wrlong	local01, fp
0afd0     08 4E 85 F1 | 	sub	fp, #8
0afd4     A7 12 02 F6 | 	mov	arg01, fp
0afd8     28 4E 85 F1 | 	sub	fp, #40
0afdc     00 50 B0 FD | 	call	#_converttoint
0afe0     FD 1E 02 F6 | 	mov	local01, result1
0afe4     10 4E 05 F1 | 	add	fp, #16
0afe8     A7 1E 62 FC | 	wrlong	local01, fp
0afec     10 4E 85 F1 | 	sub	fp, #16
0aff0                 | ' t1=pop()
0aff0                 | ' channel=converttoint(t1) : print channel
0aff0     00 12 06 F6 | 	mov	arg01, #0
0aff4     78 1D B1 FD | 	call	#__system___getiolock_0383
0aff8     FD 12 02 F6 | 	mov	arg01, result1
0affc     58 C8 B0 FD | 	call	#__system___lockmem
0b000     10 4E 05 F1 | 	add	fp, #16
0b004     A7 14 02 FB | 	rdlong	arg02, fp
0b008     10 4E 85 F1 | 	sub	fp, #16
0b00c     00 12 06 F6 | 	mov	arg01, #0
0b010     00 16 06 F6 | 	mov	arg03, #0
0b014     0A 18 06 F6 | 	mov	arg04, #10
0b018     74 D5 B0 FD | 	call	#__system___basic_print_integer
0b01c     00 12 06 F6 | 	mov	arg01, #0
0b020     0A 14 06 F6 | 	mov	arg02, #10
0b024     00 16 06 F6 | 	mov	arg03, #0
0b028     C8 D4 B0 FD | 	call	#__system___basic_print_char
0b02c     00 12 06 F6 | 	mov	arg01, #0
0b030     3C 1D B1 FD | 	call	#__system___getiolock_0383
0b034     FD 00 68 FC | 	wrlong	#0, result1
0b038                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0b038     08 4E 05 F1 | 	add	fp, #8
0b03c     02 00 80 FF 
0b040     A7 00 68 FC | 	wrlong	##1024, fp
0b044     08 4E 85 F1 | 	sub	fp, #8
0b048     0B 00 00 FF 
0b04c     CC E5 05 F1 | 	add	objptr, ##6092
0b050     97 18 48 FB | 	callpa	#(@LR__0883-@LR__0881)>>2,fcache_load_ptr_
0b054                 | LR__0881
0b054     02 00 00 FF 
0b058     00 14 DC FC | 	rep	@LR__0884, ##1024
0b05c                 | LR__0882
0b05c     10 4E 05 F1 | 	add	fp, #16
0b060     A7 20 02 FB | 	rdlong	local02, fp
0b064     0B 20 66 F0 | 	shl	local02, #11
0b068     F2 20 02 F1 | 	add	local02, objptr
0b06c     0C 4E 85 F1 | 	sub	fp, #12
0b070     A7 1E 02 FB | 	rdlong	local01, fp
0b074     04 4E 85 F1 | 	sub	fp, #4
0b078     01 1E 66 F0 | 	shl	local01, #1
0b07c     10 1F 02 F1 | 	add	local01, local02
0b080     0F 01 58 FC | 	wrword	#0, local01
0b084                 | LR__0883
0b084                 | LR__0884
0b084     0B 00 00 FF 
0b088     CC E5 85 F1 | 	sub	objptr, ##6092
0b08c     1C 4E 05 F1 | 	add	fp, #28
0b090     A7 00 68 FC | 	wrlong	#0, fp
0b094                 | ' max=0
0b094                 | ' if harm(0)<0 then
0b094     1C 4E 05 F1 | 	add	fp, #28
0b098     A7 12 02 FB | 	rdlong	arg01, fp
0b09c     38 4E 85 F1 | 	sub	fp, #56
0b0a0     00 14 06 F6 | 	mov	arg02, #0
0b0a4     01 16 06 F6 | 	mov	arg03, #1
0b0a8     F0 F4 B0 FD | 	call	#__system___float_cmp
0b0ac     00 FA 55 F2 | 	cmps	result1, #0 wc
0b0b0     04 01 90 3D |  if_ae	jmp	#LR__0887
0b0b4     38 4E 05 F1 | 	add	fp, #56
0b0b8     A7 FA 01 FB | 	rdlong	result1, fp
0b0bc     1F FA 05 F4 | 	bitl	result1, #31
0b0c0     24 4E 85 F1 | 	sub	fp, #36
0b0c4     A7 FA 61 FC | 	wrlong	result1, fp
0b0c8     28 4E 05 F1 | 	add	fp, #40
0b0cc     A7 FA 01 FB | 	rdlong	result1, fp
0b0d0     1F FA 05 F4 | 	bitl	result1, #31
0b0d4     24 4E 85 F1 | 	sub	fp, #36
0b0d8     A7 FA 61 FC | 	wrlong	result1, fp
0b0dc     20 4E 05 F1 | 	add	fp, #32
0b0e0     00 C0 9F FF 
0b0e4     A7 00 68 FC | 	wrlong	##1065353216, fp
0b0e8     24 4E 85 F1 | 	sub	fp, #36
0b0ec     A7 1E 02 FB | 	rdlong	local01, fp
0b0f0     28 4E 05 F1 | 	add	fp, #40
0b0f4     A7 1E 62 FC | 	wrlong	local01, fp
0b0f8     24 4E 85 F1 | 	sub	fp, #36
0b0fc     A7 1E 02 FB | 	rdlong	local01, fp
0b100     28 4E 05 F1 | 	add	fp, #40
0b104     A7 1E 62 FC | 	wrlong	local01, fp
0b108                 | '   harm(0)=1
0b108                 | '   harm(1)=even
0b108                 | '   harm(2)=odd
0b108                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0b108     3C 4E 85 F1 | 	sub	fp, #60
0b10c     A7 06 68 FC | 	wrlong	#3, fp
0b110                 | LR__0885
0b110     A7 1A 02 FB | 	rdlong	arg05, fp
0b114     0D 25 02 F6 | 	mov	local04, arg05
0b118     02 24 66 F0 | 	shl	local04, #2
0b11c     34 4E 05 F1 | 	add	fp, #52
0b120     A7 24 02 F1 | 	add	local04, fp
0b124     02 1A 86 F1 | 	sub	arg05, #2
0b128     02 1A 66 F0 | 	shl	arg05, #2
0b12c     A7 1A 02 F1 | 	add	arg05, fp
0b130     0D 13 02 FB | 	rdlong	arg01, arg05
0b134     24 4E 85 F1 | 	sub	fp, #36
0b138     A7 14 02 FB | 	rdlong	arg02, fp
0b13c     14 4E 85 F1 | 	sub	fp, #20
0b140     24 F0 B0 FD | 	call	#__system___float_mul
0b144     12 FB 61 FC | 	wrlong	result1, local04
0b148     04 4E 05 F1 | 	add	fp, #4
0b14c     A7 26 02 FB | 	rdlong	local05, fp
0b150     02 26 06 F1 | 	add	local05, #2
0b154     A7 26 62 FC | 	wrlong	local05, fp
0b158     10 26 56 F2 | 	cmps	local05, #16 wc
0b15c     B0 FF 9F CD |  if_b	jmp	#LR__0885
0b160                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0b160     A7 08 68 FC | 	wrlong	#4, fp
0b164                 | LR__0886
0b164     A7 26 02 FB | 	rdlong	local05, fp
0b168     13 25 02 F6 | 	mov	local04, local05
0b16c     02 24 66 F0 | 	shl	local04, #2
0b170     34 4E 05 F1 | 	add	fp, #52
0b174     A7 24 02 F1 | 	add	local04, fp
0b178     02 26 86 F1 | 	sub	local05, #2
0b17c     02 26 66 F0 | 	shl	local05, #2
0b180     A7 26 02 F1 | 	add	local05, fp
0b184     13 13 02 FB | 	rdlong	arg01, local05
0b188     20 4E 85 F1 | 	sub	fp, #32
0b18c     A7 14 02 FB | 	rdlong	arg02, fp
0b190     18 4E 85 F1 | 	sub	fp, #24
0b194     D0 EF B0 FD | 	call	#__system___float_mul
0b198     12 FB 61 FC | 	wrlong	result1, local04
0b19c     04 4E 05 F1 | 	add	fp, #4
0b1a0     A7 26 02 FB | 	rdlong	local05, fp
0b1a4     02 26 06 F1 | 	add	local05, #2
0b1a8     A7 26 62 FC | 	wrlong	local05, fp
0b1ac     0F 26 56 F2 | 	cmps	local05, #15 wc
0b1b0     B0 FF 9F CD |  if_b	jmp	#LR__0886
0b1b4     04 4E 85 F1 | 	sub	fp, #4
0b1b8                 | LR__0887
0b1b8                 | ' if harm(0)>=0 then ' synthesize with harmonics
0b1b8     38 4E 05 F1 | 	add	fp, #56
0b1bc     A7 12 02 FB | 	rdlong	arg01, fp
0b1c0     38 4E 85 F1 | 	sub	fp, #56
0b1c4     00 14 06 F6 | 	mov	arg02, #0
0b1c8     01 16 66 F6 | 	neg	arg03, #1
0b1cc     CC F3 B0 FD | 	call	#__system___float_cmp
0b1d0     00 FA 55 F2 | 	cmps	result1, #0 wc
0b1d4     B0 02 90 CD |  if_b	jmp	#LR__0893
0b1d8                 | '   for i=0 to 1023
0b1d8     04 4E 05 F1 | 	add	fp, #4
0b1dc     A7 00 68 FC | 	wrlong	#0, fp
0b1e0     04 4E 85 F1 | 	sub	fp, #4
0b1e4                 | LR__0888
0b1e4     20 4E 05 F1 | 	add	fp, #32
0b1e8     A7 00 68 FC | 	wrlong	#0, fp
0b1ec                 | '     spl=0
0b1ec                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0b1ec     18 4E 85 F1 | 	sub	fp, #24
0b1f0     A7 00 68 FC | 	wrlong	#0, fp
0b1f4                 | LR__0889
0b1f4     A7 24 02 FB | 	rdlong	local04, fp
0b1f8     02 24 66 F0 | 	shl	local04, #2
0b1fc     30 4E 05 F1 | 	add	fp, #48
0b200     A7 24 02 F1 | 	add	local04, fp
0b204     12 27 02 FB | 	rdlong	local05, local04
0b208     87 E4 1D FF 
0b20c     DB 25 06 F6 | 	mov	local04, ##1003032539
0b210     34 4E 85 F1 | 	sub	fp, #52
0b214     A7 12 02 FB | 	rdlong	arg01, fp
0b218     04 4E 85 F1 | 	sub	fp, #4
0b21c     09 13 52 F6 | 	abs	arg01, arg01 wc
0b220     1F 22 C6 C9 |  if_b	decod	local03, #31
0b224     00 22 06 36 |  if_ae	mov	local03, #0
0b228     10 EC B0 FD | 	call	#__system___float_fromuns
0b22c     11 FB 61 F5 | 	xor	result1, local03
0b230     FD 14 02 F6 | 	mov	arg02, result1
0b234     12 13 02 F6 | 	mov	arg01, local04
0b238     2C EF B0 FD | 	call	#__system___float_mul
0b23c     FD 24 02 F6 | 	mov	local04, result1
0b240     08 4E 05 F1 | 	add	fp, #8
0b244     A7 12 02 FB | 	rdlong	arg01, fp
0b248     08 4E 85 F1 | 	sub	fp, #8
0b24c     01 12 06 F1 | 	add	arg01, #1
0b250     09 13 52 F6 | 	abs	arg01, arg01 wc
0b254     1F 22 C6 C9 |  if_b	decod	local03, #31
0b258     00 22 06 36 |  if_ae	mov	local03, #0
0b25c     DC EB B0 FD | 	call	#__system___float_fromuns
0b260     11 FB 61 F5 | 	xor	result1, local03
0b264     FD 14 02 F6 | 	mov	arg02, result1
0b268     12 13 02 F6 | 	mov	arg01, local04
0b26c     F8 EE B0 FD | 	call	#__system___float_mul
0b270     FD 12 02 F6 | 	mov	arg01, result1
0b274     2C F8 B0 FD | 	call	#__system____builtin_sinf
0b278     FD 14 02 F6 | 	mov	arg02, result1
0b27c     13 13 02 F6 | 	mov	arg01, local05
0b280     E4 EE B0 FD | 	call	#__system___float_mul
0b284     FD 14 02 F6 | 	mov	arg02, result1
0b288     20 4E 05 F1 | 	add	fp, #32
0b28c     A7 12 02 FB | 	rdlong	arg01, fp
0b290     20 4E 85 F1 | 	sub	fp, #32
0b294     D8 EB B0 FD | 	call	#__system___float_add
0b298     20 4E 05 F1 | 	add	fp, #32
0b29c     A7 FA 61 FC | 	wrlong	result1, fp
0b2a0     18 4E 85 F1 | 	sub	fp, #24
0b2a4     A7 16 02 FB | 	rdlong	arg03, fp
0b2a8     01 16 06 F1 | 	add	arg03, #1
0b2ac     A7 16 62 FC | 	wrlong	arg03, fp
0b2b0     10 16 56 F2 | 	cmps	arg03, #16 wc
0b2b4     3C FF 9F CD |  if_b	jmp	#LR__0889
0b2b8                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0b2b8     18 4E 05 F1 | 	add	fp, #24
0b2bc     A7 12 02 FB | 	rdlong	arg01, fp
0b2c0     1F 12 06 F4 | 	bitl	arg01, #31
0b2c4     04 4E 85 F1 | 	sub	fp, #4
0b2c8     A7 14 02 FB | 	rdlong	arg02, fp
0b2cc     1C 4E 85 F1 | 	sub	fp, #28
0b2d0     01 16 66 F6 | 	neg	arg03, #1
0b2d4     C4 F2 B0 FD | 	call	#__system___float_cmp
0b2d8     01 FA 55 F2 | 	cmps	result1, #1 wc
0b2dc     18 00 90 CD |  if_b	jmp	#LR__0890
0b2e0     20 4E 05 F1 | 	add	fp, #32
0b2e4     A7 FA 01 FB | 	rdlong	result1, fp
0b2e8     1F FA 05 F4 | 	bitl	result1, #31
0b2ec     04 4E 85 F1 | 	sub	fp, #4
0b2f0     A7 FA 61 FC | 	wrlong	result1, fp
0b2f4     1C 4E 85 F1 | 	sub	fp, #28
0b2f8                 | LR__0890
0b2f8     04 4E 05 F1 | 	add	fp, #4
0b2fc     A7 26 02 FB | 	rdlong	local05, fp
0b300     01 26 06 F1 | 	add	local05, #1
0b304     A7 26 62 FC | 	wrlong	local05, fp
0b308     04 4E 85 F1 | 	sub	fp, #4
0b30c     02 00 00 FF 
0b310     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b314     CC FE 9F CD |  if_b	jmp	#LR__0888
0b318                 | '   for i=0 to 1023
0b318     04 4E 05 F1 | 	add	fp, #4
0b31c     A7 00 68 FC | 	wrlong	#0, fp
0b320     04 4E 85 F1 | 	sub	fp, #4
0b324                 | LR__0891
0b324     20 4E 05 F1 | 	add	fp, #32
0b328     A7 00 68 FC | 	wrlong	#0, fp
0b32c                 | '     spl=0
0b32c                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0b32c     18 4E 85 F1 | 	sub	fp, #24
0b330     A7 00 68 FC | 	wrlong	#0, fp
0b334                 | LR__0892
0b334     A7 26 02 FB | 	rdlong	local05, fp
0b338     02 26 66 F0 | 	shl	local05, #2
0b33c     30 4E 05 F1 | 	add	fp, #48
0b340     A7 26 02 F1 | 	add	local05, fp
0b344     13 27 02 FB | 	rdlong	local05, local05
0b348     1C 4E 85 F1 | 	sub	fp, #28
0b34c     A7 14 02 FB | 	rdlong	arg02, fp
0b350     1C 4E 85 F1 | 	sub	fp, #28
0b354     58 7F 23 FF 
0b358     00 12 06 F6 | 	mov	arg01, ##1191096320
0b35c     0C F0 B0 FD | 	call	#__system___float_div
0b360     FD 14 02 F6 | 	mov	arg02, result1
0b364     13 13 02 F6 | 	mov	arg01, local05
0b368     FC ED B0 FD | 	call	#__system___float_mul
0b36c     FD 26 02 F6 | 	mov	local05, result1
0b370     87 E4 1D FF 
0b374     DB 25 06 F6 | 	mov	local04, ##1003032539
0b378     04 4E 05 F1 | 	add	fp, #4
0b37c     A7 12 02 FB | 	rdlong	arg01, fp
0b380     04 4E 85 F1 | 	sub	fp, #4
0b384     09 13 52 F6 | 	abs	arg01, arg01 wc
0b388     1F 22 C6 C9 |  if_b	decod	local03, #31
0b38c     00 22 06 36 |  if_ae	mov	local03, #0
0b390     A8 EA B0 FD | 	call	#__system___float_fromuns
0b394     11 FB 61 F5 | 	xor	result1, local03
0b398     FD 14 02 F6 | 	mov	arg02, result1
0b39c     12 13 02 F6 | 	mov	arg01, local04
0b3a0     C4 ED B0 FD | 	call	#__system___float_mul
0b3a4     FD 24 02 F6 | 	mov	local04, result1
0b3a8     08 4E 05 F1 | 	add	fp, #8
0b3ac     A7 12 02 FB | 	rdlong	arg01, fp
0b3b0     08 4E 85 F1 | 	sub	fp, #8
0b3b4     01 12 06 F1 | 	add	arg01, #1
0b3b8     09 13 52 F6 | 	abs	arg01, arg01 wc
0b3bc     1F 22 C6 C9 |  if_b	decod	local03, #31
0b3c0     00 22 06 36 |  if_ae	mov	local03, #0
0b3c4     74 EA B0 FD | 	call	#__system___float_fromuns
0b3c8     11 FB 61 F5 | 	xor	result1, local03
0b3cc     FD 14 02 F6 | 	mov	arg02, result1
0b3d0     12 13 02 F6 | 	mov	arg01, local04
0b3d4     90 ED B0 FD | 	call	#__system___float_mul
0b3d8     FD 12 02 F6 | 	mov	arg01, result1
0b3dc     C4 F6 B0 FD | 	call	#__system____builtin_sinf
0b3e0     FD 14 02 F6 | 	mov	arg02, result1
0b3e4     13 13 02 F6 | 	mov	arg01, local05
0b3e8     7C ED B0 FD | 	call	#__system___float_mul
0b3ec     FD 14 02 F6 | 	mov	arg02, result1
0b3f0     20 4E 05 F1 | 	add	fp, #32
0b3f4     A7 12 02 FB | 	rdlong	arg01, fp
0b3f8     20 4E 85 F1 | 	sub	fp, #32
0b3fc     70 EA B0 FD | 	call	#__system___float_add
0b400     20 4E 05 F1 | 	add	fp, #32
0b404     A7 FA 61 FC | 	wrlong	result1, fp
0b408     18 4E 85 F1 | 	sub	fp, #24
0b40c     A7 26 02 FB | 	rdlong	local05, fp
0b410     01 26 06 F1 | 	add	local05, #1
0b414     A7 26 62 FC | 	wrlong	local05, fp
0b418     10 26 56 F2 | 	cmps	local05, #16 wc
0b41c     14 FF 9F CD |  if_b	jmp	#LR__0892
0b420     08 4E 05 F1 | 	add	fp, #8
0b424     A7 26 02 FB | 	rdlong	local05, fp
0b428     0B 26 66 F0 | 	shl	local05, #11
0b42c     0B 00 00 FF 
0b430     CC E5 05 F1 | 	add	objptr, ##6092
0b434     F2 26 02 F1 | 	add	local05, objptr
0b438     0C 4E 85 F1 | 	sub	fp, #12
0b43c     A7 20 02 FB | 	rdlong	local02, fp
0b440     01 20 66 F0 | 	shl	local02, #1
0b444     13 21 02 F1 | 	add	local02, local05
0b448     1C 4E 05 F1 | 	add	fp, #28
0b44c     A7 12 02 FB | 	rdlong	arg01, fp
0b450     20 4E 85 F1 | 	sub	fp, #32
0b454     0B 00 00 FF 
0b458     CC E5 85 F1 | 	sub	objptr, ##6092
0b45c     01 14 06 F6 | 	mov	arg02, #1
0b460     CC F1 B0 FD | 	call	#__system___float_tointeger
0b464     10 FB 51 FC | 	wrword	result1, local02
0b468     04 4E 05 F1 | 	add	fp, #4
0b46c     A7 26 02 FB | 	rdlong	local05, fp
0b470     01 26 06 F1 | 	add	local05, #1
0b474     A7 26 62 FC | 	wrlong	local05, fp
0b478     04 4E 85 F1 | 	sub	fp, #4
0b47c     02 00 00 FF 
0b480     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b484     9C FE 9F CD |  if_b	jmp	#LR__0891
0b488                 | LR__0893
0b488                 | LR__0894
0b488     A7 F0 03 F6 | 	mov	ptra, fp
0b48c     B2 00 A0 FD | 	call	#popregs_
0b490                 | _do_defsnd_ret
0b490     2D 00 64 FD | 	ret
0b494                 | 
0b494                 | ' 
0b494                 | ' ' ---------------  List the program. 
0b494                 | ' 
0b494                 | ' sub do_list
0b494                 | _do_list
0b494     02 4A 05 F6 | 	mov	COUNT_, #2
0b498     A8 00 A0 FD | 	call	#pushregs_
0b49c     B8 F0 07 F1 | 	add	ptra, #184
0b4a0     04 4E 05 F1 | 	add	fp, #4
0b4a4     A7 00 68 FC | 	wrlong	#0, fp
0b4a8     04 4E 05 F1 | 	add	fp, #4
0b4ac     FF FF BF FF 
0b4b0     A7 FE 6B FC | 	wrlong	##2147483647, fp
0b4b4     08 4E 85 F1 | 	sub	fp, #8
0b4b8     69 00 00 FF 
0b4bc     54 E4 05 F1 | 	add	objptr, ##53844
0b4c0     F2 1E 02 FB | 	rdlong	local01, objptr
0b4c4     0F 17 02 F6 | 	mov	arg03, local01
0b4c8     01 16 66 F0 | 	shl	arg03, #1
0b4cc     0F 17 02 F1 | 	add	arg03, local01
0b4d0     02 16 66 F0 | 	shl	arg03, #2
0b4d4     03 00 00 FF 
0b4d8     04 E4 85 F1 | 	sub	objptr, ##1540
0b4dc     F2 16 02 F1 | 	add	arg03, objptr
0b4e0     0B 17 02 FB | 	rdlong	arg03, arg03
0b4e4     A7 16 62 FC | 	wrlong	arg03, fp
0b4e8                 | ' 
0b4e8                 | ' startline=0 : endline=$7FFFFFFF
0b4e8                 | ' numpar=compiledline(lineptr_e).result.uresult
0b4e8                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0b4e8     01 16 0E F2 | 	cmp	arg03, #1 wz
0b4ec     66 00 00 FF 
0b4f0     50 E4 85 F1 | 	sub	objptr, ##52304
0b4f4     3C 00 90 5D |  if_ne	jmp	#LR__0900
0b4f8     90 D6 BF FD | 	call	#_pop
0b4fc     FF 1E 02 F6 | 	mov	local01, result3
0b500     0C 4E 05 F1 | 	add	fp, #12
0b504     A7 FA 61 FC | 	wrlong	result1, fp
0b508     04 4E 05 F1 | 	add	fp, #4
0b50c     A7 FC 61 FC | 	wrlong	result2, fp
0b510     04 4E 05 F1 | 	add	fp, #4
0b514     A7 1E 62 FC | 	wrlong	local01, fp
0b518     08 4E 85 F1 | 	sub	fp, #8
0b51c     A7 12 02 F6 | 	mov	arg01, fp
0b520     0C 4E 85 F1 | 	sub	fp, #12
0b524     B8 4A B0 FD | 	call	#_converttoint
0b528     04 4E 05 F1 | 	add	fp, #4
0b52c     A7 FA 61 FC | 	wrlong	result1, fp
0b530     04 4E 85 F1 | 	sub	fp, #4
0b534                 | LR__0900
0b534                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0b534     A7 16 02 FB | 	rdlong	arg03, fp
0b538     02 16 0E F2 | 	cmp	arg03, #2 wz
0b53c     7C 00 90 5D |  if_ne	jmp	#LR__0901
0b540     48 D6 BF FD | 	call	#_pop
0b544     FF 1E 02 F6 | 	mov	local01, result3
0b548     0C 4E 05 F1 | 	add	fp, #12
0b54c     A7 FA 61 FC | 	wrlong	result1, fp
0b550     04 4E 05 F1 | 	add	fp, #4
0b554     A7 FC 61 FC | 	wrlong	result2, fp
0b558     04 4E 05 F1 | 	add	fp, #4
0b55c     A7 1E 62 FC | 	wrlong	local01, fp
0b560     08 4E 85 F1 | 	sub	fp, #8
0b564     A7 12 02 F6 | 	mov	arg01, fp
0b568     0C 4E 85 F1 | 	sub	fp, #12
0b56c     70 4A B0 FD | 	call	#_converttoint
0b570     FD 1E 02 F6 | 	mov	local01, result1
0b574     08 4E 05 F1 | 	add	fp, #8
0b578     A7 1E 62 FC | 	wrlong	local01, fp
0b57c     08 4E 85 F1 | 	sub	fp, #8
0b580     08 D6 BF FD | 	call	#_pop
0b584     FF 1E 02 F6 | 	mov	local01, result3
0b588     0C 4E 05 F1 | 	add	fp, #12
0b58c     A7 FA 61 FC | 	wrlong	result1, fp
0b590     04 4E 05 F1 | 	add	fp, #4
0b594     A7 FC 61 FC | 	wrlong	result2, fp
0b598     04 4E 05 F1 | 	add	fp, #4
0b59c     A7 1E 62 FC | 	wrlong	local01, fp
0b5a0     08 4E 85 F1 | 	sub	fp, #8
0b5a4     A7 12 02 F6 | 	mov	arg01, fp
0b5a8     0C 4E 85 F1 | 	sub	fp, #12
0b5ac     30 4A B0 FD | 	call	#_converttoint
0b5b0     04 4E 05 F1 | 	add	fp, #4
0b5b4     A7 FA 61 FC | 	wrlong	result1, fp
0b5b8     04 4E 85 F1 | 	sub	fp, #4
0b5bc                 | LR__0901
0b5bc                 | ' 
0b5bc                 | ' 
0b5bc                 | ' print
0b5bc     00 12 06 F6 | 	mov	arg01, #0
0b5c0     AC 17 B1 FD | 	call	#__system___getiolock_0383
0b5c4     FD 12 02 F6 | 	mov	arg01, result1
0b5c8     8C C2 B0 FD | 	call	#__system___lockmem
0b5cc     00 12 06 F6 | 	mov	arg01, #0
0b5d0     0A 14 06 F6 | 	mov	arg02, #10
0b5d4     00 16 06 F6 | 	mov	arg03, #0
0b5d8     18 CF B0 FD | 	call	#__system___basic_print_char
0b5dc     00 12 06 F6 | 	mov	arg01, #0
0b5e0     8C 17 B1 FD | 	call	#__system___getiolock_0383
0b5e4     FD 00 68 FC | 	wrlong	#0, result1
0b5e8     69 00 00 FF 
0b5ec     58 E4 05 F1 | 	add	objptr, ##53848
0b5f0     F2 20 02 FB | 	rdlong	local02, objptr
0b5f4     11 00 00 FF 
0b5f8     60 E4 05 F1 | 	add	objptr, ##8800
0b5fc     F2 20 62 FC | 	wrlong	local02, objptr
0b600     7A 00 00 FF 
0b604     B8 E4 85 F1 | 	sub	objptr, ##62648
0b608                 | ' do 
0b608                 | LR__0902
0b608     20 4E 05 F1 | 	add	fp, #32
0b60c     A7 12 02 F6 | 	mov	arg01, fp
0b610     20 4E 85 F1 | 	sub	fp, #32
0b614     7A 00 00 FF 
0b618     B8 E4 05 F1 | 	add	objptr, ##62648
0b61c     F2 14 02 FB | 	rdlong	arg02, objptr
0b620     18 16 06 F6 | 	mov	arg03, #24
0b624     6E 00 00 FF 
0b628     F8 E5 85 F1 | 	sub	objptr, ##56824
0b62c     38 B7 B0 FD | 	call	#_psram_spin2_read1
0b630     0B 00 00 FF 
0b634     C0 E4 85 F1 | 	sub	objptr, ##5824
0b638                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart
0b638                 | '   if header(0)<> $FFFFFFFF then
0b638     20 4E 05 F1 | 	add	fp, #32
0b63c     A7 20 02 FB | 	rdlong	local02, fp
0b640     20 4E 85 F1 | 	sub	fp, #32
0b644     FF FF 7F FF 
0b648     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0b64c     A8 00 90 AD |  if_e	jmp	#LR__0904
0b650     38 4E 05 F1 | 	add	fp, #56
0b654     3F 16 06 F6 | 	mov	arg03, #63
0b658     28 16 62 FD | 	setq	arg03
0b65c     A7 00 68 FC | 	wrlong	#0, fp
0b660     A7 12 02 F6 | 	mov	arg01, fp
0b664     10 4E 85 F1 | 	sub	fp, #16
0b668     A7 14 02 FB | 	rdlong	arg02, fp
0b66c     04 4E 05 F1 | 	add	fp, #4
0b670     A7 16 02 FB | 	rdlong	arg03, fp
0b674     2C 4E 85 F1 | 	sub	fp, #44
0b678     0B 00 00 FF 
0b67c     C0 E4 05 F1 | 	add	objptr, ##5824
0b680     E4 B6 B0 FD | 	call	#_psram_spin2_read1
0b684     0B 00 00 FF 
0b688     C0 E4 85 F1 | 	sub	objptr, ##5824
0b68c                 | '     longfill(linebuf,0,64)
0b68c                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0b68c                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0b68c     20 4E 05 F1 | 	add	fp, #32
0b690     A7 20 02 FB | 	rdlong	local02, fp
0b694     1C 4E 85 F1 | 	sub	fp, #28
0b698     A7 1E 02 FB | 	rdlong	local01, fp
0b69c     04 4E 85 F1 | 	sub	fp, #4
0b6a0     0F 21 52 F2 | 	cmps	local02, local01 wc
0b6a4     30 00 90 CD |  if_b	jmp	#LR__0903
0b6a8     20 4E 05 F1 | 	add	fp, #32
0b6ac     A7 20 02 FB | 	rdlong	local02, fp
0b6b0     18 4E 85 F1 | 	sub	fp, #24
0b6b4     A7 16 02 FB | 	rdlong	arg03, fp
0b6b8     08 4E 85 F1 | 	sub	fp, #8
0b6bc     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0b6c0     14 00 90 1D |  if_a	jmp	#LR__0903
0b6c4     38 4E 05 F1 | 	add	fp, #56
0b6c8     A7 12 02 F6 | 	mov	arg01, fp
0b6cc     38 4E 85 F1 | 	sub	fp, #56
0b6d0                 | ' 
0b6d0                 | ' write(text)
0b6d0     5C B1 B0 FD | 	call	#_hg010b_spin2_write
0b6d4                 | ' crlf
0b6d4     B8 B2 B0 FD | 	call	#_hg010b_spin2_crlf
0b6d8                 | LR__0903
0b6d8     34 4E 05 F1 | 	add	fp, #52
0b6dc     A7 20 02 FB | 	rdlong	local02, fp
0b6e0     34 4E 85 F1 | 	sub	fp, #52
0b6e4     7A 00 00 FF 
0b6e8     B8 E4 05 F1 | 	add	objptr, ##62648
0b6ec     F2 20 62 FC | 	wrlong	local02, objptr
0b6f0     7A 00 00 FF 
0b6f4     B8 E4 85 F1 | 	sub	objptr, ##62648
0b6f8                 | LR__0904
0b6f8     34 4E 05 F1 | 	add	fp, #52
0b6fc     A7 20 02 FB | 	rdlong	local02, fp
0b700     34 4E 85 F1 | 	sub	fp, #52
0b704     FF FF 3F FF 
0b708     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0b70c     20 4E 05 51 |  if_ne	add	fp, #32
0b710     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0b714     20 4E 85 51 |  if_ne	sub	fp, #32
0b718     FF FF 7F 5F 
0b71c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0b720     E4 FE 9F 5D |  if_ne	jmp	#LR__0902
0b724     A7 F0 03 F6 | 	mov	ptra, fp
0b728     B2 00 A0 FD | 	call	#popregs_
0b72c                 | _do_list_ret
0b72c     2D 00 64 FD | 	ret
0b730                 | 
0b730                 | ' 
0b730                 | ' '---------------- Clear the program
0b730                 | ' 
0b730                 | ' sub do_new
0b730                 | _do_new
0b730     03 4A 05 F6 | 	mov	COUNT_, #3
0b734     A8 00 A0 FD | 	call	#pushregs_
0b738     00 12 06 F6 | 	mov	arg01, #0
0b73c     01 14 66 F6 | 	neg	arg02, #1
0b740     01 16 06 F6 | 	mov	arg03, #1
0b744     00 18 06 F6 | 	mov	arg04, #0
0b748     0B 00 00 FF 
0b74c     C0 E4 05 F1 | 	add	objptr, ##5824
0b750                 | '     return fill(addr, pattern, count, listPtr, 4)
0b750     04 1A 06 F6 | 	mov	arg05, #4
0b754     48 B7 B0 FD | 	call	#_psram_spin2_fill
0b758     48 00 00 FF 
0b75c     1C E5 05 F1 | 	add	objptr, ##37148
0b760     F2 00 68 FC | 	wrlong	#0, objptr
0b764     15 00 00 FF 
0b768     7C E4 05 F1 | 	add	objptr, ##10876
0b76c     F2 00 68 FC | 	wrlong	#0, objptr
0b770     0F 00 00 FF 
0b774     2C E5 05 F1 | 	add	objptr, ##7980
0b778     F2 00 68 FC | 	wrlong	#0, objptr
0b77c     04 E4 05 F1 | 	add	objptr, #4
0b780     F2 00 68 FC | 	wrlong	#0, objptr
0b784     16 00 00 FF 
0b788     5C E5 85 F1 | 	sub	objptr, ##11612
0b78c     F2 00 68 FC | 	wrlong	#0, objptr
0b790     07 00 00 FF 
0b794     24 E4 05 F1 | 	add	objptr, ##3620
0b798     F2 00 68 FC | 	wrlong	#0, objptr
0b79c     07 00 00 FF 
0b7a0     20 E4 85 F1 | 	sub	objptr, ##3616
0b7a4     F2 00 68 FC | 	wrlong	#0, objptr
0b7a8     0F 00 00 FF 
0b7ac     34 E4 05 F1 | 	add	objptr, ##7732
0b7b0     F2 00 68 FC | 	wrlong	#0, objptr
0b7b4     08 00 00 FF 
0b7b8     08 E4 85 F1 | 	sub	objptr, ##4104
0b7bc     F2 00 68 FC | 	wrlong	#0, objptr
0b7c0     04 E4 05 F1 | 	add	objptr, #4
0b7c4     FF FF FF FF 
0b7c8     F2 FE 6B FC | 	wrlong	##-1, objptr
0b7cc     0F 00 00 FF 
0b7d0     4C E5 05 F1 | 	add	objptr, ##8012
0b7d4     F2 00 68 FC | 	wrlong	#0, objptr
0b7d8                 | ' 
0b7d8                 | ' pslpoke(0,$FFFFFFFF)
0b7d8                 | ' varnum=0
0b7d8                 | ' programstart=0 :runptr=0 : runptr2=0
0b7d8                 | ' stackpointer=0
0b7d8                 | ' lineptr=0 
0b7d8                 | ' programptr=0 : stringptr=0
0b7d8                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0b7d8                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0b7d8     00 1E 06 F6 | 	mov	local01, #0
0b7dc     07 00 00 FF 
0b7e0     40 E5 85 F1 | 	sub	objptr, ##3904
0b7e4     97 16 48 FB | 	callpa	#(@LR__0911-@LR__0910)>>2,fcache_load_ptr_
0b7e8                 | LR__0910
0b7e8     0F 21 02 F6 | 	mov	local02, local01
0b7ec     02 20 66 F0 | 	shl	local02, #2
0b7f0     0F 21 02 F1 | 	add	local02, local01
0b7f4     02 20 66 F0 | 	shl	local02, #2
0b7f8     F2 20 02 F1 | 	add	local02, objptr
0b7fc     08 20 06 F1 | 	add	local02, #8
0b800     FF FF FF FF 
0b804     10 FF 6B FC | 	wrlong	##-1, local02
0b808     01 1E 06 F1 | 	add	local01, #1
0b80c     81 1E 56 F2 | 	cmps	local01, #129 wc
0b810     D4 FF 9F CD |  if_b	jmp	#LR__0910
0b814                 | LR__0911
0b814     71 00 00 FF 
0b818     6C E4 85 F1 | 	sub	objptr, ##57964
0b81c                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0b81c     00 1E 06 F6 | 	mov	local01, #0
0b820                 | LR__0912
0b820     0F 21 02 F6 | 	mov	local02, local01
0b824     02 20 66 F0 | 	shl	local02, #2
0b828     7A 00 00 FF 
0b82c     08 E4 05 F1 | 	add	objptr, ##62472
0b830     F2 20 02 F1 | 	add	local02, objptr
0b834     10 21 0A FB | 	rdlong	local02, local02 wz
0b838     7A 00 00 FF 
0b83c     08 E4 85 F1 | 	sub	objptr, ##62472
0b840     34 00 90 AD |  if_e	jmp	#LR__0913
0b844     0F 13 02 F6 | 	mov	arg01, local01
0b848     00 14 06 F6 | 	mov	arg02, #0
0b84c     00 16 06 F6 | 	mov	arg03, #0
0b850     68 A0 B0 FD | 	call	#_hg010b_spin2_setspritesize
0b854     0F 21 02 F6 | 	mov	local02, local01
0b858     02 20 66 F0 | 	shl	local02, #2
0b85c     7A 00 00 FF 
0b860     08 E4 05 F1 | 	add	objptr, ##62472
0b864     F2 20 02 F1 | 	add	local02, objptr
0b868     10 13 02 FB | 	rdlong	arg01, local02
0b86c     7A 00 00 FF 
0b870     08 E4 85 F1 | 	sub	objptr, ##62472
0b874     E8 FA B0 FD | 	call	#__system___gc_free
0b878                 | LR__0913
0b878     F2 22 02 FB | 	rdlong	local03, objptr
0b87c     7A 00 00 FF 
0b880     4C E4 05 F1 | 	add	objptr, ##62540
0b884     F2 22 62 FC | 	wrlong	local03, objptr
0b888     7A 00 00 FF 
0b88c     4C E4 85 F1 | 	sub	objptr, ##62540
0b890     11 12 06 F6 | 	mov	arg01, #17
0b894     08 14 06 F6 | 	mov	arg02, #8
0b898     10 16 06 F6 | 	mov	arg03, #16
0b89c     1C A0 B0 FD | 	call	#_hg010b_spin2_setspritesize
0b8a0     01 1E 06 F1 | 	add	local01, #1
0b8a4     10 1E 56 F2 | 	cmps	local01, #16 wc
0b8a8     74 FF 9F CD |  if_b	jmp	#LR__0912
0b8ac     A7 F0 03 F6 | 	mov	ptra, fp
0b8b0     B2 00 A0 FD | 	call	#popregs_
0b8b4                 | _do_new_ret
0b8b4     2D 00 64 FD | 	ret
0b8b8                 | 
0b8b8                 | ' 
0b8b8                 | ' '----------------------- goto
0b8b8                 | ' sub do_fast_goto
0b8b8                 | _do_fast_goto
0b8b8     02 4A 05 F6 | 	mov	COUNT_, #2
0b8bc     A8 00 A0 FD | 	call	#pushregs_
0b8c0                 | _do_fast_goto_enter
0b8c0     69 00 00 FF 
0b8c4     54 E4 05 F1 | 	add	objptr, ##53844
0b8c8     F2 12 02 FB | 	rdlong	arg01, objptr
0b8cc     09 1F 02 F6 | 	mov	local01, arg01
0b8d0     01 1E 66 F0 | 	shl	local01, #1
0b8d4     09 1F 02 F1 | 	add	local01, arg01
0b8d8     02 1E 66 F0 | 	shl	local01, #2
0b8dc     03 00 00 FF 
0b8e0     04 E4 85 F1 | 	sub	objptr, ##1540
0b8e4     F2 1E 02 F1 | 	add	local01, objptr
0b8e8     0F 21 02 FB | 	rdlong	local02, local01
0b8ec     10 13 02 F6 | 	mov	arg01, local02
0b8f0     66 00 00 FF 
0b8f4     50 E4 85 F1 | 	sub	objptr, ##52304
0b8f8     F4 8B B0 FD | 	call	#_pslpeek
0b8fc     FD 12 02 F6 | 	mov	arg01, result1
0b900                 | ' 
0b900                 | ' testptr=compiledline(lineptr_e).result.uresult
0b900                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0b900                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0b900     69 00 00 FF 
0b904     54 E4 05 F1 | 	add	objptr, ##53844
0b908     F2 FA 01 FB | 	rdlong	result1, objptr
0b90c     FD 1E 02 F6 | 	mov	local01, result1
0b910     01 1E 66 F0 | 	shl	local01, #1
0b914     FD 1E 02 F1 | 	add	local01, result1
0b918     02 1E 66 F0 | 	shl	local01, #2
0b91c     03 00 00 FF 
0b920     04 E4 85 F1 | 	sub	objptr, ##1540
0b924     F2 1E 02 F1 | 	add	local01, objptr
0b928     04 1E 06 F1 | 	add	local01, #4
0b92c     0F 1F 02 FB | 	rdlong	local01, local01
0b930     0F 13 0A F2 | 	cmp	arg01, local01 wz
0b934     66 00 00 FF 
0b938     50 E4 85 F1 | 	sub	objptr, ##52304
0b93c     58 00 90 5D |  if_ne	jmp	#LR__0920
0b940     78 00 00 FF 
0b944     84 E5 05 F1 | 	add	objptr, ##61828
0b948     F2 20 62 FC | 	wrlong	local02, objptr
0b94c     0F 00 00 FF 
0b950     34 E5 85 F1 | 	sub	objptr, ##7988
0b954     F2 20 02 FB | 	rdlong	local02, objptr
0b958     01 20 86 F1 | 	sub	local02, #1
0b95c     04 E4 05 F1 | 	add	objptr, #4
0b960     F2 20 62 FC | 	wrlong	local02, objptr
0b964                 | '   runptr=testptr
0b964                 | '   lineptr_e=lineptr-1
0b964                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0b964     0F 00 00 FF 
0b968     54 E5 05 F1 | 	add	objptr, ##8020
0b96c     F2 20 02 FB | 	rdlong	local02, objptr
0b970     78 00 00 FF 
0b974     A8 E5 85 F1 | 	sub	objptr, ##61864
0b978     FF FF 3F FF 
0b97c     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0b980     78 00 00 AF 
0b984     A8 E5 05 A1 |  if_e	add	objptr, ##61864
0b988     F2 00 68 AC |  if_e	wrlong	#0, objptr
0b98c     78 00 00 AF 
0b990     A8 E5 85 A1 |  if_e	sub	objptr, ##61864
0b994     04 00 90 FD | 	jmp	#LR__0921
0b998                 | LR__0920
0b998     0C 00 B0 FD | 	call	#_do_find_goto
0b99c                 | LR__0921
0b99c     A7 F0 03 F6 | 	mov	ptra, fp
0b9a0     B2 00 A0 FD | 	call	#popregs_
0b9a4                 | _do_fast_goto_ret
0b9a4     2D 00 64 FD | 	ret
0b9a8                 | 
0b9a8                 | ' 
0b9a8                 | ' 
0b9a8                 | ' 
0b9a8                 | ' 
0b9a8                 | ' sub do_find_goto
0b9a8                 | _do_find_goto
0b9a8     03 4A 05 F6 | 	mov	COUNT_, #3
0b9ac     A8 00 A0 FD | 	call	#pushregs_
0b9b0     24 F0 07 F1 | 	add	ptra, #36
0b9b4                 | _do_find_goto_enter
0b9b4     69 00 00 FF 
0b9b8     54 E4 05 F1 | 	add	objptr, ##53844
0b9bc     F2 1E 02 FB | 	rdlong	local01, objptr
0b9c0     0F 21 02 F6 | 	mov	local02, local01
0b9c4     01 20 66 F0 | 	shl	local02, #1
0b9c8     0F 21 02 F1 | 	add	local02, local01
0b9cc     02 20 66 F0 | 	shl	local02, #2
0b9d0     03 00 00 FF 
0b9d4     04 E4 85 F1 | 	sub	objptr, ##1540
0b9d8     F2 20 02 F1 | 	add	local02, objptr
0b9dc     04 20 06 F1 | 	add	local02, #4
0b9e0     10 21 02 FB | 	rdlong	local02, local02
0b9e4     A7 20 62 FC | 	wrlong	local02, fp
0b9e8     03 00 00 FF 
0b9ec     08 E4 05 F1 | 	add	objptr, ##1544
0b9f0     F2 22 02 FB | 	rdlong	local03, objptr
0b9f4     69 00 00 FF 
0b9f8     58 E4 85 F1 | 	sub	objptr, ##53848
0b9fc     04 4E 05 F1 | 	add	fp, #4
0ba00     A7 22 62 FC | 	wrlong	local03, fp
0ba04     04 4E 85 F1 | 	sub	fp, #4
0ba08                 | ' 
0ba08                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0ba08                 | '  ' print "find goto"                                                                     'print gotoline 
0ba08                 | ' gotoptr=programstart
0ba08                 | ' do
0ba08                 | LR__0930
0ba08     0C 4E 05 F1 | 	add	fp, #12
0ba0c     A7 12 02 F6 | 	mov	arg01, fp
0ba10     08 4E 85 F1 | 	sub	fp, #8
0ba14     A7 14 02 FB | 	rdlong	arg02, fp
0ba18     04 4E 85 F1 | 	sub	fp, #4
0ba1c     18 16 06 F6 | 	mov	arg03, #24
0ba20     0B 00 00 FF 
0ba24     C0 E4 05 F1 | 	add	objptr, ##5824
0ba28     3C B3 B0 FD | 	call	#_psram_spin2_read1
0ba2c     0B 00 00 FF 
0ba30     C0 E4 85 F1 | 	sub	objptr, ##5824
0ba34                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0ba34                 | '   if gotoheader(0)<>$FFFFFFFF then
0ba34     0C 4E 05 F1 | 	add	fp, #12
0ba38     A7 22 02 FB | 	rdlong	local03, fp
0ba3c     0C 4E 85 F1 | 	sub	fp, #12
0ba40     FF FF 7F FF 
0ba44     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0ba48     24 00 90 AD |  if_e	jmp	#LR__0931
0ba4c     04 4E 05 F1 | 	add	fp, #4
0ba50     A7 22 02 FB | 	rdlong	local03, fp
0ba54     04 4E 05 F1 | 	add	fp, #4
0ba58     A7 22 62 FC | 	wrlong	local03, fp
0ba5c     18 4E 05 F1 | 	add	fp, #24
0ba60     A7 22 02 FB | 	rdlong	local03, fp
0ba64     1C 4E 85 F1 | 	sub	fp, #28
0ba68     A7 22 62 FC | 	wrlong	local03, fp
0ba6c     04 4E 85 F1 | 	sub	fp, #4
0ba70                 | LR__0931
0ba70     20 4E 05 F1 | 	add	fp, #32
0ba74     A7 22 02 FB | 	rdlong	local03, fp
0ba78     20 4E 85 F1 | 	sub	fp, #32
0ba7c     FF FF 3F FF 
0ba80     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0ba84     0C 4E 05 51 |  if_ne	add	fp, #12
0ba88     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ba8c     0C 4E 85 51 |  if_ne	sub	fp, #12
0ba90     FF FF 7F 5F 
0ba94     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0ba98     18 00 90 AD |  if_e	jmp	#LR__0932
0ba9c     0C 4E 05 F1 | 	add	fp, #12
0baa0     A7 22 02 FB | 	rdlong	local03, fp
0baa4     0C 4E 85 F1 | 	sub	fp, #12
0baa8     A7 20 02 FB | 	rdlong	local02, fp
0baac     10 23 0A F2 | 	cmp	local03, local02 wz
0bab0     54 FF 9F 5D |  if_ne	jmp	#LR__0930
0bab4                 | LR__0932
0bab4                 | ' 
0bab4                 | ' if gotoheader(0)=gotoline then
0bab4     0C 4E 05 F1 | 	add	fp, #12
0bab8     A7 22 02 FB | 	rdlong	local03, fp
0babc     0C 4E 85 F1 | 	sub	fp, #12
0bac0     A7 1E 02 FB | 	rdlong	local01, fp
0bac4     0F 23 0A F2 | 	cmp	local03, local01 wz
0bac8     D8 00 90 5D |  if_ne	jmp	#LR__0933
0bacc     69 00 00 FF 
0bad0     54 E4 05 F1 | 	add	objptr, ##53844
0bad4     F2 1E 02 FB | 	rdlong	local01, objptr
0bad8     0F 21 02 F6 | 	mov	local02, local01
0badc     01 20 66 F0 | 	shl	local02, #1
0bae0     0F 21 02 F1 | 	add	local02, local01
0bae4     02 20 66 F0 | 	shl	local02, #2
0bae8     03 00 00 FF 
0baec     04 E4 85 F1 | 	sub	objptr, ##1540
0baf0     F2 20 02 F1 | 	add	local02, objptr
0baf4     08 4E 05 F1 | 	add	fp, #8
0baf8     A7 22 02 FB | 	rdlong	local03, fp
0bafc     10 23 62 FC | 	wrlong	local03, local02
0bb00     03 00 00 FF 
0bb04     04 E4 05 F1 | 	add	objptr, ##1540
0bb08     F2 1E 02 FB | 	rdlong	local01, objptr
0bb0c     0F 21 02 F6 | 	mov	local02, local01
0bb10     01 20 66 F0 | 	shl	local02, #1
0bb14     0F 21 02 F1 | 	add	local02, local01
0bb18     02 20 66 F0 | 	shl	local02, #2
0bb1c     03 00 00 FF 
0bb20     04 E4 85 F1 | 	sub	objptr, ##1540
0bb24     F2 20 02 F1 | 	add	local02, objptr
0bb28     08 20 06 F1 | 	add	local02, #8
0bb2c     10 9D 68 FC | 	wrlong	#78, local02
0bb30     03 00 00 FF 
0bb34     04 E4 05 F1 | 	add	objptr, ##1540
0bb38     F2 20 02 FB | 	rdlong	local02, objptr
0bb3c     10 13 02 F6 | 	mov	arg01, local02
0bb40     01 12 66 F0 | 	shl	arg01, #1
0bb44     10 13 02 F1 | 	add	arg01, local02
0bb48     02 12 66 F0 | 	shl	arg01, #2
0bb4c     03 00 00 FF 
0bb50     04 E4 85 F1 | 	sub	objptr, ##1540
0bb54     F2 12 02 F1 | 	add	arg01, objptr
0bb58     12 00 00 FF 
0bb5c     3C E5 05 F1 | 	add	objptr, ##9532
0bb60     F2 14 02 FB | 	rdlong	arg02, objptr
0bb64     02 22 06 F6 | 	mov	local03, #2
0bb68     10 23 02 F1 | 	add	local03, local02
0bb6c     14 00 00 FF 
0bb70     54 E5 85 F1 | 	sub	objptr, ##10580
0bb74     F2 16 02 FB | 	rdlong	arg03, objptr
0bb78     0B 23 02 FD | 	qmul	local03, arg03
0bb7c     08 4E 85 F1 | 	sub	fp, #8
0bb80     58 00 00 FF 
0bb84     78 E5 85 F1 | 	sub	objptr, ##45432
0bb88     18 22 62 FD | 	getqx	local03
0bb8c     11 15 02 F1 | 	add	arg02, local03
0bb90     70 B2 B0 FD | 	call	#_psram_spin2_write
0bb94     0B 00 00 FF 
0bb98     C0 E4 85 F1 | 	sub	objptr, ##5824
0bb9c     18 FD BF FD | 	call	#_do_fast_goto
0bba0     08 00 90 FD | 	jmp	#LR__0934
0bba4                 | LR__0933
0bba4     26 12 06 F6 | 	mov	arg01, #38
0bba8     88 87 B0 FD | 	call	#_printerror
0bbac                 | LR__0934
0bbac     A7 F0 03 F6 | 	mov	ptra, fp
0bbb0     B2 00 A0 FD | 	call	#popregs_
0bbb4                 | _do_find_goto_ret
0bbb4     2D 00 64 FD | 	ret
0bbb8                 | 
0bbb8                 | ' 
0bbb8                 | ' sub do_slow_goto
0bbb8                 | _do_slow_goto
0bbb8                 | _do_slow_goto_ret
0bbb8     2D 00 64 FD | 	ret
0bbbc                 | 
0bbbc                 | ' 
0bbbc                 | ' '----------------------- Error processing
0bbbc                 | ' 
0bbbc                 | ' sub do_error
0bbbc                 | _do_error
0bbbc     01 4A 05 F6 | 	mov	COUNT_, #1
0bbc0     A8 00 A0 FD | 	call	#pushregs_
0bbc4     69 00 00 FF 
0bbc8     54 E4 05 F1 | 	add	objptr, ##53844
0bbcc     F2 18 02 FB | 	rdlong	arg04, objptr
0bbd0     0C 17 02 F6 | 	mov	arg03, arg04
0bbd4     01 16 66 F0 | 	shl	arg03, #1
0bbd8     0C 17 02 F1 | 	add	arg03, arg04
0bbdc     02 16 66 F0 | 	shl	arg03, #2
0bbe0     03 00 00 FF 
0bbe4     04 E4 85 F1 | 	sub	objptr, ##1540
0bbe8     F2 16 02 F1 | 	add	arg03, objptr
0bbec     0B 1F 02 FB | 	rdlong	local01, arg03
0bbf0                 | ' r=compiledline(lineptr_e).result.uresult
0bbf0                 | ' print "Error ";r;": ";errors$(r)
0bbf0     00 12 06 F6 | 	mov	arg01, #0
0bbf4     66 00 00 FF 
0bbf8     50 E4 85 F1 | 	sub	objptr, ##52304
0bbfc     70 11 B1 FD | 	call	#__system___getiolock_0383
0bc00     FD 12 02 F6 | 	mov	arg01, result1
0bc04     50 BC B0 FD | 	call	#__system___lockmem
0bc08     36 01 00 FF 
0bc0c     30 15 06 F6 | 	mov	arg02, ##@LR__4417
0bc10     00 12 06 F6 | 	mov	arg01, #0
0bc14     00 16 06 F6 | 	mov	arg03, #0
0bc18     30 C9 B0 FD | 	call	#__system___basic_print_string
0bc1c     00 12 06 F6 | 	mov	arg01, #0
0bc20     0F 15 02 F6 | 	mov	arg02, local01
0bc24     00 16 06 F6 | 	mov	arg03, #0
0bc28     0A 18 06 F6 | 	mov	arg04, #10
0bc2c     A0 C9 B0 FD | 	call	#__system___basic_print_unsigned
0bc30     36 01 00 FF 
0bc34     37 15 06 F6 | 	mov	arg02, ##@LR__4418
0bc38     00 12 06 F6 | 	mov	arg01, #0
0bc3c     00 16 06 F6 | 	mov	arg03, #0
0bc40     08 C9 B0 FD | 	call	#__system___basic_print_string
0bc44     02 1E 66 F0 | 	shl	local01, #2
0bc48     64 00 00 FF 
0bc4c     50 E4 05 F1 | 	add	objptr, ##51280
0bc50     F2 1E 02 F1 | 	add	local01, objptr
0bc54     0F 15 02 FB | 	rdlong	arg02, local01
0bc58     00 12 06 F6 | 	mov	arg01, #0
0bc5c     00 16 06 F6 | 	mov	arg03, #0
0bc60     64 00 00 FF 
0bc64     50 E4 85 F1 | 	sub	objptr, ##51280
0bc68     E0 C8 B0 FD | 	call	#__system___basic_print_string
0bc6c     00 12 06 F6 | 	mov	arg01, #0
0bc70     0A 14 06 F6 | 	mov	arg02, #10
0bc74     00 16 06 F6 | 	mov	arg03, #0
0bc78     78 C8 B0 FD | 	call	#__system___basic_print_char
0bc7c     00 12 06 F6 | 	mov	arg01, #0
0bc80     EC 10 B1 FD | 	call	#__system___getiolock_0383
0bc84     FD 00 68 FC | 	wrlong	#0, result1
0bc88     A7 F0 03 F6 | 	mov	ptra, fp
0bc8c     B2 00 A0 FD | 	call	#popregs_
0bc90                 | _do_error_ret
0bc90     2D 00 64 FD | 	ret
0bc94                 | 
0bc94                 | ' 
0bc94                 | ' 
0bc94                 | ' '------------------ Assigning to a variable  
0bc94                 | ' 
0bc94                 | ' function  convertstring(psaddr as ulong) as string
0bc94                 | _convertstring
0bc94     04 4A 05 F6 | 	mov	COUNT_, #4
0bc98     A8 00 A0 FD | 	call	#pushregs_
0bc9c     09 1F 02 F6 | 	mov	local01, arg01
0bca0     4C 88 B0 FD | 	call	#_pslpeek
0bca4     FD 20 02 F6 | 	mov	local02, result1
0bca8     36 01 00 FF 
0bcac     3A 23 06 F6 | 	mov	local03, ##@LR__4419
0bcb0                 | ' 'print "in convertstring: psaddr=";psaddr
0bcb0                 | ' l=pslpeek(psaddr)
0bcb0                 | ' 'print "in convertstring: len=";l
0bcb0                 | ' s="" 
0bcb0                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0bcb0     01 24 06 F6 | 	mov	local04, #1
0bcb4     01 20 06 F1 | 	add	local02, #1
0bcb8                 | LR__0940
0bcb8     10 25 52 F2 | 	cmps	local04, local02 wc
0bcbc     30 00 90 3D |  if_ae	jmp	#LR__0941
0bcc0     0F 13 02 F6 | 	mov	arg01, local01
0bcc4     03 12 06 F1 | 	add	arg01, #3
0bcc8     12 13 02 F1 | 	add	arg01, local04
0bccc     C8 87 B0 FD | 	call	#_pspeek
0bcd0     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0bcd4     54 DD B0 FD | 	call	#__system__Chr_S
0bcd8     FD 14 02 F6 | 	mov	arg02, result1
0bcdc     11 13 02 F6 | 	mov	arg01, local03
0bce0     D0 BB B0 FD | 	call	#__system___string_concat
0bce4     FD 22 02 F6 | 	mov	local03, result1
0bce8     01 24 06 F1 | 	add	local04, #1
0bcec     C8 FF 9F FD | 	jmp	#LR__0940
0bcf0                 | LR__0941
0bcf0                 | ' 'print "in convertstring: str=";s
0bcf0                 | ' return s
0bcf0     11 FB 01 F6 | 	mov	result1, local03
0bcf4     A7 F0 03 F6 | 	mov	ptra, fp
0bcf8     B2 00 A0 FD | 	call	#popregs_
0bcfc                 | _convertstring_ret
0bcfc     2D 00 64 FD | 	ret
0bd00                 | 
0bd00                 | ' 
0bd00                 | ' sub do_assign
0bd00                 | _do_assign
0bd00     05 4A 05 F6 | 	mov	COUNT_, #5
0bd04     A8 00 A0 FD | 	call	#pushregs_
0bd08     44 F0 07 F1 | 	add	ptra, #68
0bd0c     69 00 00 FF 
0bd10     54 E4 05 F1 | 	add	objptr, ##53844
0bd14     F2 16 02 FB | 	rdlong	arg03, objptr
0bd18     0B 15 02 F6 | 	mov	arg02, arg03
0bd1c     01 14 66 F0 | 	shl	arg02, #1
0bd20     0B 15 02 F1 | 	add	arg02, arg03
0bd24     02 14 66 F0 | 	shl	arg02, #2
0bd28     03 00 00 FF 
0bd2c     04 E4 85 F1 | 	sub	objptr, ##1540
0bd30     F2 14 02 F1 | 	add	arg02, objptr
0bd34     0A 15 02 FB | 	rdlong	arg02, arg02
0bd38     18 4E 05 F1 | 	add	fp, #24
0bd3c     A7 14 62 FC | 	wrlong	arg02, fp
0bd40                 | ' 
0bd40                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0bd40                 | ' 
0bd40                 | ' if variables(varnum).vartype<array_no_type then 
0bd40     18 4E 85 F1 | 	sub	fp, #24
0bd44     04 14 66 F0 | 	shl	arg02, #4
0bd48     32 00 00 FF 
0bd4c     74 E4 85 F1 | 	sub	objptr, ##25716
0bd50     F2 14 02 F1 | 	add	arg02, objptr
0bd54     0C 14 06 F1 | 	add	arg02, #12
0bd58     0A 17 02 FB | 	rdlong	arg03, arg02
0bd5c     00 17 16 F2 | 	cmp	arg03, #256 wc
0bd60     33 00 00 FF 
0bd64     DC E5 85 F1 | 	sub	objptr, ##26588
0bd68     18 01 90 3D |  if_ae	jmp	#LR__0950
0bd6c     1C CE BF FD | 	call	#_pop
0bd70     A7 FA 61 FC | 	wrlong	result1, fp
0bd74     04 4E 05 F1 | 	add	fp, #4
0bd78     A7 FC 61 FC | 	wrlong	result2, fp
0bd7c     04 4E 05 F1 | 	add	fp, #4
0bd80     A7 FE 61 FC | 	wrlong	result3, fp
0bd84     08 4E 85 F1 | 	sub	fp, #8
0bd88     A7 16 02 FB | 	rdlong	arg03, fp
0bd8c     04 4E 05 F1 | 	add	fp, #4
0bd90     A7 14 02 FB | 	rdlong	arg02, fp
0bd94     14 4E 05 F1 | 	add	fp, #20
0bd98     A7 12 02 FB | 	rdlong	arg01, fp
0bd9c     04 12 66 F0 | 	shl	arg01, #4
0bda0     33 00 00 FF 
0bda4     DC E5 05 F1 | 	add	objptr, ##26588
0bda8     F2 12 02 F1 | 	add	arg01, objptr
0bdac     04 12 06 F1 | 	add	arg01, #4
0bdb0     09 17 62 FC | 	wrlong	arg03, arg01
0bdb4     A7 16 02 FB | 	rdlong	arg03, fp
0bdb8     04 16 66 F0 | 	shl	arg03, #4
0bdbc     F2 16 02 F1 | 	add	arg03, objptr
0bdc0     08 16 06 F1 | 	add	arg03, #8
0bdc4     0B 15 62 FC | 	wrlong	arg02, arg03
0bdc8     A7 16 02 FB | 	rdlong	arg03, fp
0bdcc     04 16 66 F0 | 	shl	arg03, #4
0bdd0     F2 16 02 F1 | 	add	arg03, objptr
0bdd4     10 4E 85 F1 | 	sub	fp, #16
0bdd8     A7 14 02 FB | 	rdlong	arg02, fp
0bddc     0C 16 06 F1 | 	add	arg03, #12
0bde0     0B 15 62 FC | 	wrlong	arg02, arg03
0bde4                 | '   t1=pop() 
0bde4                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0bde4                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0bde4                 | '   if variables(varnum).vartype<>result_string2 then return
0bde4     10 4E 05 F1 | 	add	fp, #16
0bde8     A7 16 02 FB | 	rdlong	arg03, fp
0bdec     18 4E 85 F1 | 	sub	fp, #24
0bdf0     04 16 66 F0 | 	shl	arg03, #4
0bdf4     F2 16 02 F1 | 	add	arg03, objptr
0bdf8     0C 16 06 F1 | 	add	arg03, #12
0bdfc     0B 17 02 FB | 	rdlong	arg03, arg03
0be00     2B 16 0E F2 | 	cmp	arg03, #43 wz
0be04     33 00 00 FF 
0be08     DC E5 85 F1 | 	sub	objptr, ##26588
0be0c     9C 05 90 5D |  if_ne	jmp	#LR__0971
0be10     18 4E 05 F1 | 	add	fp, #24
0be14     A7 16 02 FB | 	rdlong	arg03, fp
0be18     0B 1F 02 F6 | 	mov	local01, arg03
0be1c     04 1E 66 F0 | 	shl	local01, #4
0be20     33 00 00 FF 
0be24     DC E5 05 F1 | 	add	objptr, ##26588
0be28     F2 1E 02 F1 | 	add	local01, objptr
0be2c     18 4E 85 F1 | 	sub	fp, #24
0be30     04 16 66 F0 | 	shl	arg03, #4
0be34     F2 16 02 F1 | 	add	arg03, objptr
0be38     04 16 06 F1 | 	add	arg03, #4
0be3c     0B 13 02 FB | 	rdlong	arg01, arg03
0be40     33 00 00 FF 
0be44     DC E5 85 F1 | 	sub	objptr, ##26588
0be48     48 FE BF FD | 	call	#_convertstring
0be4c     04 1E 06 F1 | 	add	local01, #4
0be50     0F FB 61 FC | 	wrlong	result1, local01
0be54     18 4E 05 F1 | 	add	fp, #24
0be58     A7 1E 02 FB | 	rdlong	local01, fp
0be5c     18 4E 85 F1 | 	sub	fp, #24
0be60     04 1E 66 F0 | 	shl	local01, #4
0be64     33 00 00 FF 
0be68     DC E5 05 F1 | 	add	objptr, ##26588
0be6c     F2 1E 02 F1 | 	add	local01, objptr
0be70     0C 1E 06 F1 | 	add	local01, #12
0be74     0F 3F 68 FC | 	wrlong	#31, local01
0be78                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0be78                 | '   variables(varnum).vartype=result_string
0be78                 | '   return
0be78     33 00 00 FF 
0be7c     DC E5 85 F1 | 	sub	objptr, ##26588
0be80     28 05 90 FD | 	jmp	#LR__0971
0be84                 | LR__0950
0be84                 | ' for i=0 to 2 : arrid(i)=0 : next i
0be84     1C 4E 05 F1 | 	add	fp, #28
0be88     A7 00 68 FC | 	wrlong	#0, fp
0be8c     97 16 48 FB | 	callpa	#(@LR__0952-@LR__0951)>>2,fcache_load_ptr_
0be90                 | LR__0951
0be90     A7 1E 02 FB | 	rdlong	local01, fp
0be94     02 1E 66 F0 | 	shl	local01, #2
0be98     18 4E 05 F1 | 	add	fp, #24
0be9c     A7 1E 02 F1 | 	add	local01, fp
0bea0     0F 01 68 FC | 	wrlong	#0, local01
0bea4     18 4E 85 F1 | 	sub	fp, #24
0bea8     A7 1E 02 FB | 	rdlong	local01, fp
0beac     01 1E 06 F1 | 	add	local01, #1
0beb0     A7 1E 62 FC | 	wrlong	local01, fp
0beb4     03 1E 16 F2 | 	cmp	local01, #3 wc
0beb8     D4 FF 9F CD |  if_b	jmp	#LR__0951
0bebc                 | LR__0952
0bebc     69 00 00 FF 
0bec0     54 E4 05 F1 | 	add	objptr, ##53844
0bec4     F2 16 02 FB | 	rdlong	arg03, objptr
0bec8     0B 1F 02 F6 | 	mov	local01, arg03
0becc     01 1E 66 F0 | 	shl	local01, #1
0bed0     0B 1F 02 F1 | 	add	local01, arg03
0bed4     02 1E 66 F0 | 	shl	local01, #2
0bed8     03 00 00 FF 
0bedc     04 E4 85 F1 | 	sub	objptr, ##1540
0bee0     F2 1E 02 F1 | 	add	local01, objptr
0bee4     04 1E 06 F1 | 	add	local01, #4
0bee8     0F 21 02 FB | 	rdlong	local02, local01
0beec     04 4E 05 F1 | 	add	fp, #4
0bef0     A7 20 62 FC | 	wrlong	local02, fp
0bef4     20 4E 85 F1 | 	sub	fp, #32
0bef8     66 00 00 FF 
0befc     50 E4 85 F1 | 	sub	objptr, ##52304
0bf00     88 CC BF FD | 	call	#_pop
0bf04     A7 FA 61 FC | 	wrlong	result1, fp
0bf08     04 4E 05 F1 | 	add	fp, #4
0bf0c     A7 FC 61 FC | 	wrlong	result2, fp
0bf10     04 4E 05 F1 | 	add	fp, #4
0bf14     A7 FE 61 FC | 	wrlong	result3, fp
0bf18                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0bf18                 | ' t1=pop() ' var value
0bf18                 | ' if numpar>0 then
0bf18     18 4E 05 F1 | 	add	fp, #24
0bf1c     A7 22 02 FB | 	rdlong	local03, fp
0bf20     20 4E 85 F1 | 	sub	fp, #32
0bf24     01 22 16 F2 | 	cmp	local03, #1 wc
0bf28     70 00 90 CD |  if_b	jmp	#LR__0955
0bf2c                 | '   for i=numpar to 1 step -1
0bf2c     20 4E 05 F1 | 	add	fp, #32
0bf30     A7 24 0A FB | 	rdlong	local04, fp wz
0bf34     04 4E 85 F1 | 	sub	fp, #4
0bf38     A7 24 62 FC | 	wrlong	local04, fp
0bf3c     1C 4E 85 F1 | 	sub	fp, #28
0bf40     58 00 90 AD |  if_e	jmp	#LR__0954
0bf44                 | LR__0953
0bf44     44 CC BF FD | 	call	#_pop
0bf48     0C 4E 05 F1 | 	add	fp, #12
0bf4c     A7 FA 61 FC | 	wrlong	result1, fp
0bf50     04 4E 05 F1 | 	add	fp, #4
0bf54     A7 FC 61 FC | 	wrlong	result2, fp
0bf58     04 4E 05 F1 | 	add	fp, #4
0bf5c     A7 FE 61 FC | 	wrlong	result3, fp
0bf60     08 4E 05 F1 | 	add	fp, #8
0bf64     A7 22 02 FB | 	rdlong	local03, fp
0bf68     01 22 86 F1 | 	sub	local03, #1
0bf6c     02 22 66 F0 | 	shl	local03, #2
0bf70     18 4E 05 F1 | 	add	fp, #24
0bf74     A7 22 02 F1 | 	add	local03, fp
0bf78     28 4E 85 F1 | 	sub	fp, #40
0bf7c     A7 24 02 FB | 	rdlong	local04, fp
0bf80     11 25 62 FC | 	wrlong	local04, local03
0bf84     10 4E 05 F1 | 	add	fp, #16
0bf88     A7 24 02 FB | 	rdlong	local04, fp
0bf8c     01 24 8E F1 | 	sub	local04, #1 wz
0bf90     A7 24 62 FC | 	wrlong	local04, fp
0bf94     1C 4E 85 F1 | 	sub	fp, #28
0bf98     A8 FF 9F 5D |  if_ne	jmp	#LR__0953
0bf9c                 | LR__0954
0bf9c                 | LR__0955
0bf9c     18 4E 05 F1 | 	add	fp, #24
0bfa0     A7 1E 02 FB | 	rdlong	local01, fp
0bfa4     04 1E 66 F0 | 	shl	local01, #4
0bfa8     33 00 00 FF 
0bfac     DC E5 05 F1 | 	add	objptr, ##26588
0bfb0     F2 1E 02 F1 | 	add	local01, objptr
0bfb4     04 1E 06 F1 | 	add	local01, #4
0bfb8     0F 13 02 FB | 	rdlong	arg01, local01
0bfbc     0C 4E 05 F1 | 	add	fp, #12
0bfc0     A7 12 62 FC | 	wrlong	arg01, fp
0bfc4     24 4E 85 F1 | 	sub	fp, #36
0bfc8     33 00 00 FF 
0bfcc     DC E5 85 F1 | 	sub	objptr, ##26588
0bfd0     1C 85 B0 FD | 	call	#_pslpeek
0bfd4     FD 24 32 F9 | 	getword	local04, result1, #0
0bfd8     28 4E 05 F1 | 	add	fp, #40
0bfdc     A7 24 62 FC | 	wrlong	local04, fp
0bfe0     04 4E 85 F1 | 	sub	fp, #4
0bfe4     A7 12 02 FB | 	rdlong	arg01, fp
0bfe8     24 4E 85 F1 | 	sub	fp, #36
0bfec     02 12 06 F1 | 	add	arg01, #2
0bff0     A4 84 B0 FD | 	call	#_pspeek
0bff4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0bff8     2C 4E 05 F1 | 	add	fp, #44
0bffc     A7 FA 61 FC | 	wrlong	result1, fp
0c000     08 4E 85 F1 | 	sub	fp, #8
0c004     A7 12 02 FB | 	rdlong	arg01, fp
0c008     09 25 02 F6 | 	mov	local04, arg01
0c00c     10 24 06 F1 | 	add	local04, #16
0c010     24 4E 85 F1 | 	sub	fp, #36
0c014     04 12 06 F1 | 	add	arg01, #4
0c018     D4 84 B0 FD | 	call	#_pslpeek
0c01c     FD 1E 02 F6 | 	mov	local01, result1
0c020     38 4E 05 F1 | 	add	fp, #56
0c024     A7 20 02 FB | 	rdlong	local02, fp
0c028     10 1F 02 FD | 	qmul	local01, local02
0c02c     04 4E 85 F1 | 	sub	fp, #4
0c030     A7 22 02 FB | 	rdlong	local03, fp
0c034     10 4E 85 F1 | 	sub	fp, #16
0c038     A7 12 02 FB | 	rdlong	arg01, fp
0c03c     24 4E 85 F1 | 	sub	fp, #36
0c040     08 12 06 F1 | 	add	arg01, #8
0c044     18 20 62 FD | 	getqx	local02
0c048     10 23 02 F1 | 	add	local03, local02
0c04c     A0 84 B0 FD | 	call	#_pslpeek
0c050     FD 20 02 F6 | 	mov	local02, result1
0c054     24 4E 05 F1 | 	add	fp, #36
0c058     A7 12 02 FB | 	rdlong	arg01, fp
0c05c     24 4E 85 F1 | 	sub	fp, #36
0c060     04 12 06 F1 | 	add	arg01, #4
0c064     88 84 B0 FD | 	call	#_pslpeek
0c068     FD 20 02 FD | 	qmul	local02, result1
0c06c     3C 4E 05 F1 | 	add	fp, #60
0c070     A7 20 02 FB | 	rdlong	local02, fp
0c074     18 1E 62 FD | 	getqx	local01
0c078     10 1F 02 FD | 	qmul	local01, local02
0c07c     10 4E 85 F1 | 	sub	fp, #16
0c080     A7 20 02 FB | 	rdlong	local02, fp
0c084     18 1E 62 FD | 	getqx	local01
0c088     0F 23 02 F1 | 	add	local03, local01
0c08c     11 21 02 FD | 	qmul	local02, local03
0c090     04 4E 05 F1 | 	add	fp, #4
0c094                 | ' esize=pspeek(arrptr+2)
0c094                 | ' 'print " in do_assign, pslpeek(arrptr+4)="; pslpeek(arrptr+4)
0c094                 | ' 'print " in do_assign, pslpeek(arrptr+8)="; pslpeek(arrptr+8)
0c094                 | ' 'print " in do_assign, pslpeek(arrptr+12)="; pslpeek(arrptr+12)
0c094                 | ' 
0c094                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0c094                 | ' select case arrtype
0c094     18 22 62 FD | 	getqx	local03
0c098     11 25 02 F1 | 	add	local04, local03
0c09c     A7 24 62 FC | 	wrlong	local04, fp
0c0a0     08 4E 85 F1 | 	sub	fp, #8
0c0a4     A7 26 02 FB | 	rdlong	local05, fp
0c0a8     28 4E 85 F1 | 	sub	fp, #40
0c0ac     00 27 86 F1 | 	sub	local05, #256
0c0b0     0C 26 26 F3 | 	fle	local05, #12
0c0b4     30 26 62 FD | 	jmprel	local05
0c0b8                 | LR__0956
0c0b8     30 00 90 FD | 	jmp	#LR__0957
0c0bc     58 00 90 FD | 	jmp	#LR__0958
0c0c0     88 00 90 FD | 	jmp	#LR__0959
0c0c4     B8 00 90 FD | 	jmp	#LR__0960
0c0c8     10 01 90 FD | 	jmp	#LR__0961
0c0cc     68 01 90 FD | 	jmp	#LR__0962
0c0d0     98 01 90 FD | 	jmp	#LR__0963
0c0d4     C8 01 90 FD | 	jmp	#LR__0964
0c0d8     F8 01 90 FD | 	jmp	#LR__0965
0c0dc     28 02 90 FD | 	jmp	#LR__0966
0c0e0     58 02 90 FD | 	jmp	#LR__0967
0c0e4     88 02 90 FD | 	jmp	#LR__0968
0c0e8     B8 02 90 FD | 	jmp	#LR__0969
0c0ec                 | LR__0957
0c0ec     A7 12 02 F6 | 	mov	arg01, fp
0c0f0     30 4E 05 F1 | 	add	fp, #48
0c0f4     A7 14 02 FB | 	rdlong	arg02, fp
0c0f8     30 4E 85 F1 | 	sub	fp, #48
0c0fc     0C 16 06 F6 | 	mov	arg03, #12
0c100     0B 00 00 FF 
0c104     C0 E4 05 F1 | 	add	objptr, ##5824
0c108     F8 AC B0 FD | 	call	#_psram_spin2_write
0c10c     0B 00 00 FF 
0c110     C0 E4 85 F1 | 	sub	objptr, ##5824
0c114     94 02 90 FD | 	jmp	#LR__0970
0c118                 | LR__0958
0c118     30 4E 05 F1 | 	add	fp, #48
0c11c     A7 12 02 FB | 	rdlong	arg01, fp
0c120     30 4E 85 F1 | 	sub	fp, #48
0c124     A7 14 02 FB | 	rdlong	arg02, fp
0c128     01 16 06 F6 | 	mov	arg03, #1
0c12c     00 18 06 F6 | 	mov	arg04, #0
0c130     0B 00 00 FF 
0c134     C0 E4 05 F1 | 	add	objptr, ##5824
0c138                 | '     return fill(addr, pattern, count, listPtr, 1)
0c138     01 1A 06 F6 | 	mov	arg05, #1
0c13c     60 AD B0 FD | 	call	#_psram_spin2_fill
0c140     0B 00 00 FF 
0c144     C0 E4 85 F1 | 	sub	objptr, ##5824
0c148     60 02 90 FD | 	jmp	#LR__0970
0c14c                 | LR__0959
0c14c     30 4E 05 F1 | 	add	fp, #48
0c150     A7 12 02 FB | 	rdlong	arg01, fp
0c154     30 4E 85 F1 | 	sub	fp, #48
0c158     A7 14 02 FB | 	rdlong	arg02, fp
0c15c     01 16 06 F6 | 	mov	arg03, #1
0c160     00 18 06 F6 | 	mov	arg04, #0
0c164     0B 00 00 FF 
0c168     C0 E4 05 F1 | 	add	objptr, ##5824
0c16c                 | '     return fill(addr, pattern, count, listPtr, 1)
0c16c     01 1A 06 F6 | 	mov	arg05, #1
0c170     2C AD B0 FD | 	call	#_psram_spin2_fill
0c174     0B 00 00 FF 
0c178     C0 E4 85 F1 | 	sub	objptr, ##5824
0c17c     2C 02 90 FD | 	jmp	#LR__0970
0c180                 | LR__0960
0c180     30 4E 05 F1 | 	add	fp, #48
0c184     A7 12 02 FB | 	rdlong	arg01, fp
0c188     30 4E 85 F1 | 	sub	fp, #48
0c18c     A7 14 02 FB | 	rdlong	arg02, fp
0c190     01 16 06 F6 | 	mov	arg03, #1
0c194     00 18 06 F6 | 	mov	arg04, #0
0c198     0B 00 00 FF 
0c19c     C0 E4 05 F1 | 	add	objptr, ##5824
0c1a0                 | '     return fill(addr, pattern, count, listPtr, 1)
0c1a0     01 1A 06 F6 | 	mov	arg05, #1
0c1a4     F8 AC B0 FD | 	call	#_psram_spin2_fill
0c1a8     30 4E 05 F1 | 	add	fp, #48
0c1ac     A7 12 02 FB | 	rdlong	arg01, fp
0c1b0     30 4E 85 F1 | 	sub	fp, #48
0c1b4     01 12 06 F1 | 	add	arg01, #1
0c1b8     A7 14 02 FB | 	rdlong	arg02, fp
0c1bc     08 14 46 F0 | 	shr	arg02, #8
0c1c0     01 16 06 F6 | 	mov	arg03, #1
0c1c4     00 18 06 F6 | 	mov	arg04, #0
0c1c8                 | '     return fill(addr, pattern, count, listPtr, 1)
0c1c8     01 1A 06 F6 | 	mov	arg05, #1
0c1cc     D0 AC B0 FD | 	call	#_psram_spin2_fill
0c1d0     0B 00 00 FF 
0c1d4     C0 E4 85 F1 | 	sub	objptr, ##5824
0c1d8     D0 01 90 FD | 	jmp	#LR__0970
0c1dc                 | LR__0961
0c1dc     30 4E 05 F1 | 	add	fp, #48
0c1e0     A7 12 02 FB | 	rdlong	arg01, fp
0c1e4     30 4E 85 F1 | 	sub	fp, #48
0c1e8     A7 14 02 FB | 	rdlong	arg02, fp
0c1ec     01 16 06 F6 | 	mov	arg03, #1
0c1f0     00 18 06 F6 | 	mov	arg04, #0
0c1f4     0B 00 00 FF 
0c1f8     C0 E4 05 F1 | 	add	objptr, ##5824
0c1fc                 | '     return fill(addr, pattern, count, listPtr, 1)
0c1fc     01 1A 06 F6 | 	mov	arg05, #1
0c200     9C AC B0 FD | 	call	#_psram_spin2_fill
0c204     30 4E 05 F1 | 	add	fp, #48
0c208     A7 12 02 FB | 	rdlong	arg01, fp
0c20c     30 4E 85 F1 | 	sub	fp, #48
0c210     01 12 06 F1 | 	add	arg01, #1
0c214     A7 14 02 FB | 	rdlong	arg02, fp
0c218     08 14 46 F0 | 	shr	arg02, #8
0c21c     01 16 06 F6 | 	mov	arg03, #1
0c220     00 18 06 F6 | 	mov	arg04, #0
0c224                 | '     return fill(addr, pattern, count, listPtr, 1)
0c224     01 1A 06 F6 | 	mov	arg05, #1
0c228     74 AC B0 FD | 	call	#_psram_spin2_fill
0c22c     0B 00 00 FF 
0c230     C0 E4 85 F1 | 	sub	objptr, ##5824
0c234     74 01 90 FD | 	jmp	#LR__0970
0c238                 | LR__0962
0c238     30 4E 05 F1 | 	add	fp, #48
0c23c     A7 12 02 FB | 	rdlong	arg01, fp
0c240     30 4E 85 F1 | 	sub	fp, #48
0c244     A7 14 02 FB | 	rdlong	arg02, fp
0c248     01 16 06 F6 | 	mov	arg03, #1
0c24c     00 18 06 F6 | 	mov	arg04, #0
0c250     0B 00 00 FF 
0c254     C0 E4 05 F1 | 	add	objptr, ##5824
0c258                 | '     return fill(addr, pattern, count, listPtr, 4)
0c258     04 1A 06 F6 | 	mov	arg05, #4
0c25c     40 AC B0 FD | 	call	#_psram_spin2_fill
0c260     0B 00 00 FF 
0c264     C0 E4 85 F1 | 	sub	objptr, ##5824
0c268     40 01 90 FD | 	jmp	#LR__0970
0c26c                 | LR__0963
0c26c     30 4E 05 F1 | 	add	fp, #48
0c270     A7 12 02 FB | 	rdlong	arg01, fp
0c274     30 4E 85 F1 | 	sub	fp, #48
0c278     A7 14 02 FB | 	rdlong	arg02, fp
0c27c     01 16 06 F6 | 	mov	arg03, #1
0c280     00 18 06 F6 | 	mov	arg04, #0
0c284     0B 00 00 FF 
0c288     C0 E4 05 F1 | 	add	objptr, ##5824
0c28c                 | '     return fill(addr, pattern, count, listPtr, 4)
0c28c     04 1A 06 F6 | 	mov	arg05, #4
0c290     0C AC B0 FD | 	call	#_psram_spin2_fill
0c294     0B 00 00 FF 
0c298     C0 E4 85 F1 | 	sub	objptr, ##5824
0c29c     0C 01 90 FD | 	jmp	#LR__0970
0c2a0                 | LR__0964
0c2a0     30 4E 05 F1 | 	add	fp, #48
0c2a4     A7 12 02 FB | 	rdlong	arg01, fp
0c2a8     30 4E 85 F1 | 	sub	fp, #48
0c2ac     A7 14 02 FB | 	rdlong	arg02, fp
0c2b0     01 16 06 F6 | 	mov	arg03, #1
0c2b4     00 18 06 F6 | 	mov	arg04, #0
0c2b8     0B 00 00 FF 
0c2bc     C0 E4 05 F1 | 	add	objptr, ##5824
0c2c0                 | '     return fill(addr, pattern, count, listPtr, 4)
0c2c0     04 1A 06 F6 | 	mov	arg05, #4
0c2c4     D8 AB B0 FD | 	call	#_psram_spin2_fill
0c2c8     0B 00 00 FF 
0c2cc     C0 E4 85 F1 | 	sub	objptr, ##5824
0c2d0     D8 00 90 FD | 	jmp	#LR__0970
0c2d4                 | LR__0965
0c2d4     30 4E 05 F1 | 	add	fp, #48
0c2d8     A7 12 02 FB | 	rdlong	arg01, fp
0c2dc     30 4E 85 F1 | 	sub	fp, #48
0c2e0     A7 14 02 FB | 	rdlong	arg02, fp
0c2e4     01 16 06 F6 | 	mov	arg03, #1
0c2e8     00 18 06 F6 | 	mov	arg04, #0
0c2ec     0B 00 00 FF 
0c2f0     C0 E4 05 F1 | 	add	objptr, ##5824
0c2f4                 | '     return fill(addr, pattern, count, listPtr, 4)
0c2f4     04 1A 06 F6 | 	mov	arg05, #4
0c2f8     A4 AB B0 FD | 	call	#_psram_spin2_fill
0c2fc     0B 00 00 FF 
0c300     C0 E4 85 F1 | 	sub	objptr, ##5824
0c304     A4 00 90 FD | 	jmp	#LR__0970
0c308                 | LR__0966
0c308     30 4E 05 F1 | 	add	fp, #48
0c30c     A7 12 02 FB | 	rdlong	arg01, fp
0c310     30 4E 85 F1 | 	sub	fp, #48
0c314     A7 14 02 FB | 	rdlong	arg02, fp
0c318     01 16 06 F6 | 	mov	arg03, #1
0c31c     00 18 06 F6 | 	mov	arg04, #0
0c320     0B 00 00 FF 
0c324     C0 E4 05 F1 | 	add	objptr, ##5824
0c328                 | '     return fill(addr, pattern, count, listPtr, 4)
0c328     04 1A 06 F6 | 	mov	arg05, #4
0c32c     70 AB B0 FD | 	call	#_psram_spin2_fill
0c330     0B 00 00 FF 
0c334     C0 E4 85 F1 | 	sub	objptr, ##5824
0c338     70 00 90 FD | 	jmp	#LR__0970
0c33c                 | LR__0967
0c33c     30 4E 05 F1 | 	add	fp, #48
0c340     A7 12 02 FB | 	rdlong	arg01, fp
0c344     30 4E 85 F1 | 	sub	fp, #48
0c348     A7 14 02 FB | 	rdlong	arg02, fp
0c34c     01 16 06 F6 | 	mov	arg03, #1
0c350     00 18 06 F6 | 	mov	arg04, #0
0c354     0B 00 00 FF 
0c358     C0 E4 05 F1 | 	add	objptr, ##5824
0c35c                 | '     return fill(addr, pattern, count, listPtr, 4)
0c35c     04 1A 06 F6 | 	mov	arg05, #4
0c360     3C AB B0 FD | 	call	#_psram_spin2_fill
0c364     0B 00 00 FF 
0c368     C0 E4 85 F1 | 	sub	objptr, ##5824
0c36c     3C 00 90 FD | 	jmp	#LR__0970
0c370                 | LR__0968
0c370     30 4E 05 F1 | 	add	fp, #48
0c374     A7 12 02 FB | 	rdlong	arg01, fp
0c378     30 4E 85 F1 | 	sub	fp, #48
0c37c     A7 14 02 FB | 	rdlong	arg02, fp
0c380     01 16 06 F6 | 	mov	arg03, #1
0c384     00 18 06 F6 | 	mov	arg04, #0
0c388     0B 00 00 FF 
0c38c     C0 E4 05 F1 | 	add	objptr, ##5824
0c390                 | '     return fill(addr, pattern, count, listPtr, 4)
0c390     04 1A 06 F6 | 	mov	arg05, #4
0c394     08 AB B0 FD | 	call	#_psram_spin2_fill
0c398     0B 00 00 FF 
0c39c     C0 E4 85 F1 | 	sub	objptr, ##5824
0c3a0     08 00 90 FD | 	jmp	#LR__0970
0c3a4                 | LR__0969
0c3a4     2F 12 06 F6 | 	mov	arg01, #47
0c3a8     88 7F B0 FD | 	call	#_printerror
0c3ac                 | LR__0970
0c3ac                 | LR__0971
0c3ac     A7 F0 03 F6 | 	mov	ptra, fp
0c3b0     B2 00 A0 FD | 	call	#popregs_
0c3b4                 | _do_assign_ret
0c3b4     2D 00 64 FD | 	ret
0c3b8                 | 
0c3b8                 | ' 
0c3b8                 | ' 
0c3b8                 | ' ' --------------------- Read a variable and push to the stack
0c3b8                 | ' 
0c3b8                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0c3b8                 | ' 
0c3b8                 | ' sub do_getvar
0c3b8                 | _do_getvar
0c3b8     04 4A 05 F6 | 	mov	COUNT_, #4
0c3bc     A8 00 A0 FD | 	call	#pushregs_
0c3c0     3C F0 07 F1 | 	add	ptra, #60
0c3c4                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0c3c4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0c3c4     69 00 00 FF 
0c3c8     54 E4 05 F1 | 	add	objptr, ##53844
0c3cc     F2 1E 02 FB | 	rdlong	local01, objptr
0c3d0     0F 17 02 F6 | 	mov	arg03, local01
0c3d4     01 16 66 F0 | 	shl	arg03, #1
0c3d8     0F 17 02 F1 | 	add	arg03, local01
0c3dc     02 16 66 F0 | 	shl	arg03, #2
0c3e0     03 00 00 FF 
0c3e4     04 E4 85 F1 | 	sub	objptr, ##1540
0c3e8     F2 16 02 F1 | 	add	arg03, objptr
0c3ec     04 16 06 F1 | 	add	arg03, #4
0c3f0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0c3f4     66 00 00 FF 
0c3f8     50 E4 85 F1 | 	sub	objptr, ##52304
0c3fc     C4 00 90 5D |  if_ne	jmp	#LR__0981
0c400     69 00 00 FF 
0c404     54 E4 05 F1 | 	add	objptr, ##53844
0c408     F2 1E 02 FB | 	rdlong	local01, objptr
0c40c     0F 13 02 F6 | 	mov	arg01, local01
0c410     01 12 66 F0 | 	shl	arg01, #1
0c414     0F 13 02 F1 | 	add	arg01, local01
0c418     02 12 66 F0 | 	shl	arg01, #2
0c41c     03 00 00 FF 
0c420     04 E4 85 F1 | 	sub	objptr, ##1540
0c424     F2 12 02 F1 | 	add	arg01, objptr
0c428     09 1F 02 FB | 	rdlong	local01, arg01
0c42c     04 1E 66 F0 | 	shl	local01, #4
0c430     32 00 00 FF 
0c434     74 E4 85 F1 | 	sub	objptr, ##25716
0c438     F2 1E 02 F1 | 	add	local01, objptr
0c43c     04 1E 06 F1 | 	add	local01, #4
0c440     0F 13 02 FB | 	rdlong	arg01, local01
0c444     04 1E 06 F1 | 	add	local01, #4
0c448     0F 1F 02 FB | 	rdlong	local01, local01
0c44c     A7 12 62 FC | 	wrlong	arg01, fp
0c450     04 4E 05 F1 | 	add	fp, #4
0c454     A7 1E 62 FC | 	wrlong	local01, fp
0c458     35 00 00 FF 
0c45c     78 E4 05 F1 | 	add	objptr, ##27256
0c460     F2 1E 02 FB | 	rdlong	local01, objptr
0c464     0F 13 02 F6 | 	mov	arg01, local01
0c468     01 12 66 F0 | 	shl	arg01, #1
0c46c     0F 13 02 F1 | 	add	arg01, local01
0c470     02 12 66 F0 | 	shl	arg01, #2
0c474     03 00 00 FF 
0c478     04 E4 85 F1 | 	sub	objptr, ##1540
0c47c     F2 12 02 F1 | 	add	arg01, objptr
0c480     09 1F 02 FB | 	rdlong	local01, arg01
0c484     04 1E 66 F0 | 	shl	local01, #4
0c488     32 00 00 FF 
0c48c     74 E4 85 F1 | 	sub	objptr, ##25716
0c490     F2 1E 02 F1 | 	add	local01, objptr
0c494     0C 1E 06 F1 | 	add	local01, #12
0c498     0F 1F 02 FB | 	rdlong	local01, local01
0c49c     04 4E 05 F1 | 	add	fp, #4
0c4a0     A7 1E 62 FC | 	wrlong	local01, fp
0c4a4                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0c4a4                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0c4a4                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0c4a4     08 4E 85 F1 | 	sub	fp, #8
0c4a8     00 1F 16 F2 | 	cmp	local01, #256 wc
0c4ac     33 00 00 FF 
0c4b0     DC E5 85 F1 | 	sub	objptr, ##26588
0c4b4     0C 00 90 3D |  if_ae	jmp	#LR__0980
0c4b8     A7 12 02 F6 | 	mov	arg01, fp
0c4bc     64 C7 BF FD | 	call	#_push
0c4c0     88 04 90 FD | 	jmp	#LR__1002
0c4c4                 | LR__0980
0c4c4                 | LR__0981
0c4c4     69 00 00 FF 
0c4c8     54 E4 05 F1 | 	add	objptr, ##53844
0c4cc     F2 16 02 FB | 	rdlong	arg03, objptr
0c4d0     0B 15 02 F6 | 	mov	arg02, arg03
0c4d4     01 14 66 F0 | 	shl	arg02, #1
0c4d8     0B 15 02 F1 | 	add	arg02, arg03
0c4dc     02 14 66 F0 | 	shl	arg02, #2
0c4e0     03 00 00 FF 
0c4e4     04 E4 85 F1 | 	sub	objptr, ##1540
0c4e8     F2 14 02 F1 | 	add	arg02, objptr
0c4ec     0A 17 02 FB | 	rdlong	arg03, arg02
0c4f0     04 16 66 F0 | 	shl	arg03, #4
0c4f4     32 00 00 FF 
0c4f8     74 E4 85 F1 | 	sub	objptr, ##25716
0c4fc     F2 16 02 F1 | 	add	arg03, objptr
0c500     04 16 06 F1 | 	add	arg03, #4
0c504     0B 13 02 FB | 	rdlong	arg01, arg03
0c508     0C 4E 05 F1 | 	add	fp, #12
0c50c     A7 12 62 FC | 	wrlong	arg01, fp
0c510     0C 4E 85 F1 | 	sub	fp, #12
0c514     33 00 00 FF 
0c518     DC E5 85 F1 | 	sub	objptr, ##26588
0c51c     D0 7F B0 FD | 	call	#_pslpeek
0c520     FD FA 31 F9 | 	getword	result1, result1, #0
0c524     10 4E 05 F1 | 	add	fp, #16
0c528     A7 FA 61 FC | 	wrlong	result1, fp
0c52c     69 00 00 FF 
0c530     54 E4 05 F1 | 	add	objptr, ##53844
0c534     F2 16 02 FB | 	rdlong	arg03, objptr
0c538     0B 15 02 F6 | 	mov	arg02, arg03
0c53c     01 14 66 F0 | 	shl	arg02, #1
0c540     0B 15 02 F1 | 	add	arg02, arg03
0c544     02 14 66 F0 | 	shl	arg02, #2
0c548     03 00 00 FF 
0c54c     04 E4 85 F1 | 	sub	objptr, ##1540
0c550     F2 14 02 F1 | 	add	arg02, objptr
0c554     04 14 06 F1 | 	add	arg02, #4
0c558     0A 17 02 FB | 	rdlong	arg03, arg02
0c55c     04 4E 05 F1 | 	add	fp, #4
0c560     A7 16 62 FC | 	wrlong	arg03, fp
0c564     08 4E 85 F1 | 	sub	fp, #8
0c568     A7 12 02 FB | 	rdlong	arg01, fp
0c56c     0C 4E 85 F1 | 	sub	fp, #12
0c570     02 12 06 F1 | 	add	arg01, #2
0c574     66 00 00 FF 
0c578     50 E4 85 F1 | 	sub	objptr, ##52304
0c57c     18 7F B0 FD | 	call	#_pspeek
0c580     FD FA E1 F8 | 	getbyte	result1, result1, #0
0c584     18 4E 05 F1 | 	add	fp, #24
0c588     A7 FA 61 FC | 	wrlong	result1, fp
0c58c     0C 4E 85 F1 | 	sub	fp, #12
0c590     A7 12 02 FB | 	rdlong	arg01, fp
0c594     0C 4E 85 F1 | 	sub	fp, #12
0c598     04 12 06 F1 | 	add	arg01, #4
0c59c     50 7F B0 FD | 	call	#_pslpeek
0c5a0     1C 4E 05 F1 | 	add	fp, #28
0c5a4     A7 FA 61 FC | 	wrlong	result1, fp
0c5a8     10 4E 85 F1 | 	sub	fp, #16
0c5ac     A7 12 02 FB | 	rdlong	arg01, fp
0c5b0     0C 4E 85 F1 | 	sub	fp, #12
0c5b4     08 12 06 F1 | 	add	arg01, #8
0c5b8     34 7F B0 FD | 	call	#_pslpeek
0c5bc     20 4E 05 F1 | 	add	fp, #32
0c5c0     A7 FA 61 FC | 	wrlong	result1, fp
0c5c4     14 4E 85 F1 | 	sub	fp, #20
0c5c8     A7 12 02 FB | 	rdlong	arg01, fp
0c5cc     0C 4E 85 F1 | 	sub	fp, #12
0c5d0     0C 12 06 F1 | 	add	arg01, #12
0c5d4     18 7F B0 FD | 	call	#_pslpeek
0c5d8     24 4E 05 F1 | 	add	fp, #36
0c5dc     A7 FA 61 FC | 	wrlong	result1, fp
0c5e0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0c5e0                 | ' esize=pspeek(arrptr+2)
0c5e0                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0c5e0                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0c5e0                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0c5e0                 | ' if numpar>2 then t1=pop() : i3=t1.result.uresult   else i3=0 
0c5e0     10 4E 85 F1 | 	sub	fp, #16
0c5e4     A7 16 02 FB | 	rdlong	arg03, fp
0c5e8     14 4E 85 F1 | 	sub	fp, #20
0c5ec     03 16 16 F2 | 	cmp	arg03, #3 wc
0c5f0     30 00 90 CD |  if_b	jmp	#LR__0982
0c5f4     94 C5 BF FD | 	call	#_pop
0c5f8     A7 FA 61 FC | 	wrlong	result1, fp
0c5fc     04 4E 05 F1 | 	add	fp, #4
0c600     A7 FC 61 FC | 	wrlong	result2, fp
0c604     04 4E 05 F1 | 	add	fp, #4
0c608     A7 FE 61 FC | 	wrlong	result3, fp
0c60c     08 4E 85 F1 | 	sub	fp, #8
0c610     A7 16 02 FB | 	rdlong	arg03, fp
0c614     30 4E 05 F1 | 	add	fp, #48
0c618     A7 16 62 FC | 	wrlong	arg03, fp
0c61c     30 4E 85 F1 | 	sub	fp, #48
0c620     0C 00 90 FD | 	jmp	#LR__0983
0c624                 | LR__0982
0c624     30 4E 05 F1 | 	add	fp, #48
0c628     A7 00 68 FC | 	wrlong	#0, fp
0c62c     30 4E 85 F1 | 	sub	fp, #48
0c630                 | LR__0983
0c630                 | ' if numpar>1 then t1=pop() : i2=t1.result.uresult   else i2=0 
0c630     14 4E 05 F1 | 	add	fp, #20
0c634     A7 16 02 FB | 	rdlong	arg03, fp
0c638     14 4E 85 F1 | 	sub	fp, #20
0c63c     02 16 16 F2 | 	cmp	arg03, #2 wc
0c640     30 00 90 CD |  if_b	jmp	#LR__0984
0c644     44 C5 BF FD | 	call	#_pop
0c648     A7 FA 61 FC | 	wrlong	result1, fp
0c64c     04 4E 05 F1 | 	add	fp, #4
0c650     A7 FC 61 FC | 	wrlong	result2, fp
0c654     04 4E 05 F1 | 	add	fp, #4
0c658     A7 FE 61 FC | 	wrlong	result3, fp
0c65c     08 4E 85 F1 | 	sub	fp, #8
0c660     A7 16 02 FB | 	rdlong	arg03, fp
0c664     2C 4E 05 F1 | 	add	fp, #44
0c668     A7 16 62 FC | 	wrlong	arg03, fp
0c66c     2C 4E 85 F1 | 	sub	fp, #44
0c670     0C 00 90 FD | 	jmp	#LR__0985
0c674                 | LR__0984
0c674     2C 4E 05 F1 | 	add	fp, #44
0c678     A7 00 68 FC | 	wrlong	#0, fp
0c67c     2C 4E 85 F1 | 	sub	fp, #44
0c680                 | LR__0985
0c680                 | ' if numpar>0 then t1=pop() : i1=t1.result.uresult   else i1=0 
0c680     14 4E 05 F1 | 	add	fp, #20
0c684     A7 16 02 FB | 	rdlong	arg03, fp
0c688     14 4E 85 F1 | 	sub	fp, #20
0c68c     01 16 16 F2 | 	cmp	arg03, #1 wc
0c690     30 00 90 CD |  if_b	jmp	#LR__0986
0c694     F4 C4 BF FD | 	call	#_pop
0c698     A7 FA 61 FC | 	wrlong	result1, fp
0c69c     04 4E 05 F1 | 	add	fp, #4
0c6a0     A7 FC 61 FC | 	wrlong	result2, fp
0c6a4     04 4E 05 F1 | 	add	fp, #4
0c6a8     A7 FE 61 FC | 	wrlong	result3, fp
0c6ac     08 4E 85 F1 | 	sub	fp, #8
0c6b0     A7 16 02 FB | 	rdlong	arg03, fp
0c6b4     28 4E 05 F1 | 	add	fp, #40
0c6b8     A7 16 62 FC | 	wrlong	arg03, fp
0c6bc     28 4E 85 F1 | 	sub	fp, #40
0c6c0     0C 00 90 FD | 	jmp	#LR__0987
0c6c4                 | LR__0986
0c6c4     28 4E 05 F1 | 	add	fp, #40
0c6c8     A7 00 68 FC | 	wrlong	#0, fp
0c6cc     28 4E 85 F1 | 	sub	fp, #40
0c6d0                 | LR__0987
0c6d0     0C 4E 05 F1 | 	add	fp, #12
0c6d4     A7 20 02 FB | 	rdlong	local02, fp
0c6d8     1C 4E 05 F1 | 	add	fp, #28
0c6dc     A7 22 02 FB | 	rdlong	local03, fp
0c6e0     04 4E 05 F1 | 	add	fp, #4
0c6e4     A7 FE 01 FB | 	rdlong	result3, fp
0c6e8     10 4E 85 F1 | 	sub	fp, #16
0c6ec     A7 FC 01 FB | 	rdlong	result2, fp
0c6f0     FE FE 01 FD | 	qmul	result3, result2
0c6f4     10 20 06 F1 | 	add	local02, #16
0c6f8     14 4E 05 F1 | 	add	fp, #20
0c6fc     A7 FE 01 FB | 	rdlong	result3, fp
0c700     18 FA 61 FD | 	getqx	result1
0c704     FE FE 01 FD | 	qmul	result3, result2
0c708     FD 22 02 F1 | 	add	local03, result1
0c70c     10 4E 85 F1 | 	sub	fp, #16
0c710     A7 FC 01 FB | 	rdlong	result2, fp
0c714     18 FE 61 FD | 	getqx	result3
0c718     FE FE 01 FD | 	qmul	result3, result2
0c71c     08 4E 85 F1 | 	sub	fp, #8
0c720     A7 FC 01 FB | 	rdlong	result2, fp
0c724     18 FE 61 FD | 	getqx	result3
0c728     FF 22 02 F1 | 	add	local03, result3
0c72c     FE 22 02 FD | 	qmul	local03, result2
0c730     1C 4E 05 F1 | 	add	fp, #28
0c734                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0c734                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0c734                 | ' 
0c734                 | ' select case vartype
0c734     18 FE 61 FD | 	getqx	result3
0c738     FF 20 02 F1 | 	add	local02, result3
0c73c     A7 20 62 FC | 	wrlong	local02, fp
0c740     24 4E 85 F1 | 	sub	fp, #36
0c744     A7 24 02 FB | 	rdlong	local04, fp
0c748     10 4E 85 F1 | 	sub	fp, #16
0c74c     00 25 86 F1 | 	sub	local04, #256
0c750     0C 24 26 F3 | 	fle	local04, #12
0c754     30 24 62 FD | 	jmprel	local04
0c758                 | LR__0988
0c758     30 00 90 FD | 	jmp	#LR__0989
0c75c     58 00 90 FD | 	jmp	#LR__0990
0c760     8C 00 90 FD | 	jmp	#LR__0991
0c764     AC 00 90 FD | 	jmp	#LR__0992
0c768     E8 00 90 FD | 	jmp	#LR__0993
0c76c     08 01 90 FD | 	jmp	#LR__0994
0c770     24 01 90 FD | 	jmp	#LR__0995
0c774     40 01 90 FD | 	jmp	#LR__0996
0c778     50 01 90 FD | 	jmp	#LR__0997
0c77c     60 01 90 FD | 	jmp	#LR__0998
0c780     7C 01 90 FD | 	jmp	#LR__0999
0c784     8C 01 90 FD | 	jmp	#LR__1000
0c788     B8 01 90 FD | 	jmp	#LR__1001
0c78c                 | LR__0989
0c78c     A7 12 02 F6 | 	mov	arg01, fp
0c790     34 4E 05 F1 | 	add	fp, #52
0c794     A7 14 02 FB | 	rdlong	arg02, fp
0c798     34 4E 85 F1 | 	sub	fp, #52
0c79c     0C 16 06 F6 | 	mov	arg03, #12
0c7a0     0B 00 00 FF 
0c7a4     C0 E4 05 F1 | 	add	objptr, ##5824
0c7a8     BC A5 B0 FD | 	call	#_psram_spin2_read1
0c7ac     0B 00 00 FF 
0c7b0     C0 E4 85 F1 | 	sub	objptr, ##5824
0c7b4     8C 01 90 FD | 	jmp	#LR__1001
0c7b8                 | LR__0990
0c7b8     08 4E 05 F1 | 	add	fp, #8
0c7bc     A7 38 68 FC | 	wrlong	#28, fp
0c7c0     2C 4E 05 F1 | 	add	fp, #44
0c7c4     A7 12 02 FB | 	rdlong	arg01, fp
0c7c8     34 4E 85 F1 | 	sub	fp, #52
0c7cc     C8 7C B0 FD | 	call	#_pspeek
0c7d0     FD FA E1 F8 | 	getbyte	result1, result1, #0
0c7d4     A7 FA 61 FC | 	wrlong	result1, fp
0c7d8     80 FA 15 F2 | 	cmp	result1, #128 wc
0c7dc     00 1F 66 36 |  if_ae	neg	local01, #256
0c7e0     A7 22 02 3B |  if_ae	rdlong	local03, fp
0c7e4     11 1F 42 35 |  if_ae	or	local01, local03
0c7e8     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0c7ec     54 01 90 FD | 	jmp	#LR__1001
0c7f0                 | LR__0991
0c7f0     08 4E 05 F1 | 	add	fp, #8
0c7f4     A7 3A 68 FC | 	wrlong	#29, fp
0c7f8     2C 4E 05 F1 | 	add	fp, #44
0c7fc     A7 12 02 FB | 	rdlong	arg01, fp
0c800     34 4E 85 F1 | 	sub	fp, #52
0c804     90 7C B0 FD | 	call	#_pspeek
0c808     FD FA E1 F8 | 	getbyte	result1, result1, #0
0c80c     A7 FA 61 FC | 	wrlong	result1, fp
0c810     30 01 90 FD | 	jmp	#LR__1001
0c814                 | LR__0992
0c814     08 4E 05 F1 | 	add	fp, #8
0c818     A7 38 68 FC | 	wrlong	#28, fp
0c81c     2C 4E 05 F1 | 	add	fp, #44
0c820     A7 12 02 FB | 	rdlong	arg01, fp
0c824     34 4E 85 F1 | 	sub	fp, #52
0c828     C4 7C B0 FD | 	call	#_pslpeek
0c82c     FD FA 31 F9 | 	getword	result1, result1, #0
0c830     A7 FA 61 FC | 	wrlong	result1, fp
0c834     40 00 00 FF 
0c838     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0c83c     FF 7F 00 3F 
0c840     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0c844     A7 22 02 3B |  if_ae	rdlong	local03, fp
0c848     11 1F 42 35 |  if_ae	or	local01, local03
0c84c     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0c850     F0 00 90 FD | 	jmp	#LR__1001
0c854                 | LR__0993
0c854     08 4E 05 F1 | 	add	fp, #8
0c858     A7 3A 68 FC | 	wrlong	#29, fp
0c85c     2C 4E 05 F1 | 	add	fp, #44
0c860     A7 12 02 FB | 	rdlong	arg01, fp
0c864     34 4E 85 F1 | 	sub	fp, #52
0c868     84 7C B0 FD | 	call	#_pslpeek
0c86c     FD FA 31 F9 | 	getword	result1, result1, #0
0c870     A7 FA 61 FC | 	wrlong	result1, fp
0c874     CC 00 90 FD | 	jmp	#LR__1001
0c878                 | LR__0994
0c878     08 4E 05 F1 | 	add	fp, #8
0c87c     A7 38 68 FC | 	wrlong	#28, fp
0c880     2C 4E 05 F1 | 	add	fp, #44
0c884     A7 12 02 FB | 	rdlong	arg01, fp
0c888     34 4E 85 F1 | 	sub	fp, #52
0c88c     60 7C B0 FD | 	call	#_pslpeek
0c890     A7 FA 61 FC | 	wrlong	result1, fp
0c894     AC 00 90 FD | 	jmp	#LR__1001
0c898                 | LR__0995
0c898     08 4E 05 F1 | 	add	fp, #8
0c89c     A7 3A 68 FC | 	wrlong	#29, fp
0c8a0     2C 4E 05 F1 | 	add	fp, #44
0c8a4     A7 12 02 FB | 	rdlong	arg01, fp
0c8a8     34 4E 85 F1 | 	sub	fp, #52
0c8ac     40 7C B0 FD | 	call	#_pslpeek
0c8b0     A7 FA 61 FC | 	wrlong	result1, fp
0c8b4     8C 00 90 FD | 	jmp	#LR__1001
0c8b8                 | LR__0996
0c8b8     08 4E 05 F1 | 	add	fp, #8
0c8bc     A7 FE 69 FC | 	wrlong	#255, fp
0c8c0     08 4E 85 F1 | 	sub	fp, #8
0c8c4     A7 60 68 FC | 	wrlong	#48, fp
0c8c8     78 00 90 FD | 	jmp	#LR__1001
0c8cc                 | LR__0997
0c8cc     08 4E 05 F1 | 	add	fp, #8
0c8d0     A7 FE 69 FC | 	wrlong	#255, fp
0c8d4     08 4E 85 F1 | 	sub	fp, #8
0c8d8     A7 60 68 FC | 	wrlong	#48, fp
0c8dc     64 00 90 FD | 	jmp	#LR__1001
0c8e0                 | LR__0998
0c8e0     08 4E 05 F1 | 	add	fp, #8
0c8e4     A7 3C 68 FC | 	wrlong	#30, fp
0c8e8     2C 4E 05 F1 | 	add	fp, #44
0c8ec     A7 12 02 FB | 	rdlong	arg01, fp
0c8f0     34 4E 85 F1 | 	sub	fp, #52
0c8f4     F8 7B B0 FD | 	call	#_pslpeek
0c8f8     A7 FA 61 FC | 	wrlong	result1, fp
0c8fc     44 00 90 FD | 	jmp	#LR__1001
0c900                 | LR__0999
0c900     08 4E 05 F1 | 	add	fp, #8
0c904     A7 FE 69 FC | 	wrlong	#255, fp
0c908     08 4E 85 F1 | 	sub	fp, #8
0c90c     A7 60 68 FC | 	wrlong	#48, fp
0c910     30 00 90 FD | 	jmp	#LR__1001
0c914                 | LR__1000
0c914     08 4E 05 F1 | 	add	fp, #8
0c918     A7 3E 68 FC | 	wrlong	#31, fp
0c91c     2C 4E 05 F1 | 	add	fp, #44
0c920     A7 12 02 FB | 	rdlong	arg01, fp
0c924     34 4E 85 F1 | 	sub	fp, #52
0c928     C4 7B B0 FD | 	call	#_pslpeek
0c92c     A7 FA 61 FC | 	wrlong	result1, fp
0c930     00 04 00 FF 
0c934     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0c938     08 4E 05 31 |  if_ae	add	fp, #8
0c93c     A7 56 68 3C |  if_ae	wrlong	#43, fp
0c940     08 4E 85 31 |  if_ae	sub	fp, #8
0c944                 | LR__1001
0c944     A7 12 02 F6 | 	mov	arg01, fp
0c948     D8 C2 BF FD | 	call	#_push
0c94c                 | LR__1002
0c94c     A7 F0 03 F6 | 	mov	ptra, fp
0c950     B2 00 A0 FD | 	call	#popregs_
0c954                 | _do_getvar_ret
0c954     2D 00 64 FD | 	ret
0c958                 | 
0c958                 | ' 
0c958                 | ' '------------------------ Operators 
0c958                 | ' 
0c958                 | ' sub do_plus 
0c958                 | _do_plus
0c958     05 4A 05 F6 | 	mov	COUNT_, #5
0c95c     A8 00 A0 FD | 	call	#pushregs_
0c960     18 F0 07 F1 | 	add	ptra, #24
0c964     24 C2 BF FD | 	call	#_pop
0c968     FD 1E 02 F6 | 	mov	local01, result1
0c96c     FE 20 02 F6 | 	mov	local02, result2
0c970     FF 22 02 F6 | 	mov	local03, result3
0c974     0C 4E 05 F1 | 	add	fp, #12
0c978     A7 1E 62 FC | 	wrlong	local01, fp
0c97c     04 4E 05 F1 | 	add	fp, #4
0c980     A7 20 62 FC | 	wrlong	local02, fp
0c984     04 4E 05 F1 | 	add	fp, #4
0c988     A7 22 62 FC | 	wrlong	local03, fp
0c98c     14 4E 85 F1 | 	sub	fp, #20
0c990     F8 C1 BF FD | 	call	#_pop
0c994     FF 22 02 F6 | 	mov	local03, result3
0c998     A7 FA 61 FC | 	wrlong	result1, fp
0c99c     04 4E 05 F1 | 	add	fp, #4
0c9a0     A7 FC 61 FC | 	wrlong	result2, fp
0c9a4     04 4E 05 F1 | 	add	fp, #4
0c9a8     A7 22 62 FC | 	wrlong	local03, fp
0c9ac                 | ' 
0c9ac                 | ' t2=pop()
0c9ac                 | ' t1=pop()
0c9ac                 | ' 
0c9ac                 | ' 
0c9ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0c9ac     08 4E 85 F1 | 	sub	fp, #8
0c9b0     1D 22 0E F2 | 	cmp	local03, #29 wz
0c9b4     14 4E 05 A1 |  if_e	add	fp, #20
0c9b8     A7 24 02 AB |  if_e	rdlong	local04, fp
0c9bc     14 4E 85 A1 |  if_e	sub	fp, #20
0c9c0     12 23 02 A6 |  if_e	mov	local03, local04
0c9c4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c9c8     1C 00 90 5D |  if_ne	jmp	#LR__1010
0c9cc     A7 1E 02 FB | 	rdlong	local01, fp
0c9d0     0C 4E 05 F1 | 	add	fp, #12
0c9d4     A7 20 02 FB | 	rdlong	local02, fp
0c9d8     0C 4E 85 F1 | 	sub	fp, #12
0c9dc     10 1F 02 F1 | 	add	local01, local02
0c9e0     A7 1E 62 FC | 	wrlong	local01, fp
0c9e4     48 04 90 FD | 	jmp	#LR__1025
0c9e8                 | LR__1010
0c9e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0c9e8     08 4E 05 F1 | 	add	fp, #8
0c9ec     A7 1E 02 FB | 	rdlong	local01, fp
0c9f0     08 4E 85 F1 | 	sub	fp, #8
0c9f4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c9f8     14 4E 05 A1 |  if_e	add	fp, #20
0c9fc     A7 24 02 AB |  if_e	rdlong	local04, fp
0ca00     14 4E 85 A1 |  if_e	sub	fp, #20
0ca04     12 23 02 A6 |  if_e	mov	local03, local04
0ca08     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ca0c     28 00 90 5D |  if_ne	jmp	#LR__1011
0ca10     A7 1E 02 FB | 	rdlong	local01, fp
0ca14     0C 4E 05 F1 | 	add	fp, #12
0ca18     A7 20 02 FB | 	rdlong	local02, fp
0ca1c     0C 4E 85 F1 | 	sub	fp, #12
0ca20     10 1F 02 F1 | 	add	local01, local02
0ca24     A7 1E 62 FC | 	wrlong	local01, fp
0ca28     08 4E 05 F1 | 	add	fp, #8
0ca2c     A7 38 68 FC | 	wrlong	#28, fp
0ca30     08 4E 85 F1 | 	sub	fp, #8
0ca34     F8 03 90 FD | 	jmp	#LR__1025
0ca38                 | LR__1011
0ca38                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0ca38     08 4E 05 F1 | 	add	fp, #8
0ca3c     A7 1E 02 FB | 	rdlong	local01, fp
0ca40     08 4E 85 F1 | 	sub	fp, #8
0ca44     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ca48     14 4E 05 A1 |  if_e	add	fp, #20
0ca4c     A7 24 02 AB |  if_e	rdlong	local04, fp
0ca50     14 4E 85 A1 |  if_e	sub	fp, #20
0ca54     12 23 02 A6 |  if_e	mov	local03, local04
0ca58     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ca5c     30 00 90 5D |  if_ne	jmp	#LR__1012
0ca60     A7 12 02 FB | 	rdlong	arg01, fp
0ca64     D4 D3 B0 FD | 	call	#__system___float_fromuns
0ca68     FD 12 02 F6 | 	mov	arg01, result1
0ca6c     0C 4E 05 F1 | 	add	fp, #12
0ca70     A7 14 02 FB | 	rdlong	arg02, fp
0ca74     0C 4E 85 F1 | 	sub	fp, #12
0ca78     F4 D3 B0 FD | 	call	#__system___float_add
0ca7c     A7 FA 61 FC | 	wrlong	result1, fp
0ca80     08 4E 05 F1 | 	add	fp, #8
0ca84     A7 3C 68 FC | 	wrlong	#30, fp
0ca88     08 4E 85 F1 | 	sub	fp, #8
0ca8c     A0 03 90 FD | 	jmp	#LR__1025
0ca90                 | LR__1012
0ca90                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0ca90     08 4E 05 F1 | 	add	fp, #8
0ca94     A7 1E 02 FB | 	rdlong	local01, fp
0ca98     08 4E 85 F1 | 	sub	fp, #8
0ca9c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0caa0     14 4E 05 A1 |  if_e	add	fp, #20
0caa4     A7 24 02 AB |  if_e	rdlong	local04, fp
0caa8     14 4E 85 A1 |  if_e	sub	fp, #20
0caac     12 23 02 A6 |  if_e	mov	local03, local04
0cab0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0cab4     1C 00 90 5D |  if_ne	jmp	#LR__1013
0cab8     A7 1E 02 FB | 	rdlong	local01, fp
0cabc     0C 4E 05 F1 | 	add	fp, #12
0cac0     A7 20 02 FB | 	rdlong	local02, fp
0cac4     0C 4E 85 F1 | 	sub	fp, #12
0cac8     10 1F 02 F1 | 	add	local01, local02
0cacc     A7 1E 62 FC | 	wrlong	local01, fp
0cad0     5C 03 90 FD | 	jmp	#LR__1025
0cad4                 | LR__1013
0cad4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0cad4     08 4E 05 F1 | 	add	fp, #8
0cad8     A7 1E 02 FB | 	rdlong	local01, fp
0cadc     08 4E 85 F1 | 	sub	fp, #8
0cae0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cae4     14 4E 05 A1 |  if_e	add	fp, #20
0cae8     A7 24 02 AB |  if_e	rdlong	local04, fp
0caec     14 4E 85 A1 |  if_e	sub	fp, #20
0caf0     12 23 02 A6 |  if_e	mov	local03, local04
0caf4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0caf8     1C 00 90 5D |  if_ne	jmp	#LR__1014
0cafc     A7 1E 02 FB | 	rdlong	local01, fp
0cb00     0C 4E 05 F1 | 	add	fp, #12
0cb04     A7 20 02 FB | 	rdlong	local02, fp
0cb08     0C 4E 85 F1 | 	sub	fp, #12
0cb0c     10 1F 02 F1 | 	add	local01, local02
0cb10     A7 1E 62 FC | 	wrlong	local01, fp
0cb14     18 03 90 FD | 	jmp	#LR__1025
0cb18                 | LR__1014
0cb18                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0cb18     08 4E 05 F1 | 	add	fp, #8
0cb1c     A7 1E 02 FB | 	rdlong	local01, fp
0cb20     08 4E 85 F1 | 	sub	fp, #8
0cb24     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cb28     14 4E 05 A1 |  if_e	add	fp, #20
0cb2c     A7 24 02 AB |  if_e	rdlong	local04, fp
0cb30     14 4E 85 A1 |  if_e	sub	fp, #20
0cb34     12 23 02 A6 |  if_e	mov	local03, local04
0cb38     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cb3c     40 00 90 5D |  if_ne	jmp	#LR__1015
0cb40     A7 12 02 FB | 	rdlong	arg01, fp
0cb44     09 13 52 F6 | 	abs	arg01, arg01 wc
0cb48     1F 26 C6 C9 |  if_b	decod	local05, #31
0cb4c     00 26 06 36 |  if_ae	mov	local05, #0
0cb50     E8 D2 B0 FD | 	call	#__system___float_fromuns
0cb54     13 FB 61 F5 | 	xor	result1, local05
0cb58     FD 12 02 F6 | 	mov	arg01, result1
0cb5c     0C 4E 05 F1 | 	add	fp, #12
0cb60     A7 14 02 FB | 	rdlong	arg02, fp
0cb64     0C 4E 85 F1 | 	sub	fp, #12
0cb68     04 D3 B0 FD | 	call	#__system___float_add
0cb6c     A7 FA 61 FC | 	wrlong	result1, fp
0cb70     08 4E 05 F1 | 	add	fp, #8
0cb74     A7 3C 68 FC | 	wrlong	#30, fp
0cb78     08 4E 85 F1 | 	sub	fp, #8
0cb7c     B0 02 90 FD | 	jmp	#LR__1025
0cb80                 | LR__1015
0cb80                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0cb80     08 4E 05 F1 | 	add	fp, #8
0cb84     A7 1E 02 FB | 	rdlong	local01, fp
0cb88     08 4E 85 F1 | 	sub	fp, #8
0cb8c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cb90     14 4E 05 A1 |  if_e	add	fp, #20
0cb94     A7 24 02 AB |  if_e	rdlong	local04, fp
0cb98     14 4E 85 A1 |  if_e	sub	fp, #20
0cb9c     12 23 02 A6 |  if_e	mov	local03, local04
0cba0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0cba4     28 00 90 5D |  if_ne	jmp	#LR__1016
0cba8     A7 1E 02 FB | 	rdlong	local01, fp
0cbac     0C 4E 05 F1 | 	add	fp, #12
0cbb0     A7 12 02 FB | 	rdlong	arg01, fp
0cbb4     0C 4E 85 F1 | 	sub	fp, #12
0cbb8     80 D2 B0 FD | 	call	#__system___float_fromuns
0cbbc     FD 14 02 F6 | 	mov	arg02, result1
0cbc0     0F 13 02 F6 | 	mov	arg01, local01
0cbc4     A8 D2 B0 FD | 	call	#__system___float_add
0cbc8     A7 FA 61 FC | 	wrlong	result1, fp
0cbcc     60 02 90 FD | 	jmp	#LR__1025
0cbd0                 | LR__1016
0cbd0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0cbd0     08 4E 05 F1 | 	add	fp, #8
0cbd4     A7 1E 02 FB | 	rdlong	local01, fp
0cbd8     08 4E 85 F1 | 	sub	fp, #8
0cbdc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cbe0     14 4E 05 A1 |  if_e	add	fp, #20
0cbe4     A7 24 02 AB |  if_e	rdlong	local04, fp
0cbe8     14 4E 85 A1 |  if_e	sub	fp, #20
0cbec     12 23 02 A6 |  if_e	mov	local03, local04
0cbf0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0cbf4     38 00 90 5D |  if_ne	jmp	#LR__1017
0cbf8     A7 1E 02 FB | 	rdlong	local01, fp
0cbfc     0C 4E 05 F1 | 	add	fp, #12
0cc00     A7 12 02 FB | 	rdlong	arg01, fp
0cc04     0C 4E 85 F1 | 	sub	fp, #12
0cc08     09 13 52 F6 | 	abs	arg01, arg01 wc
0cc0c     1F 26 C6 C9 |  if_b	decod	local05, #31
0cc10     00 26 06 36 |  if_ae	mov	local05, #0
0cc14     24 D2 B0 FD | 	call	#__system___float_fromuns
0cc18     13 FB 61 F5 | 	xor	result1, local05
0cc1c     FD 14 02 F6 | 	mov	arg02, result1
0cc20     0F 13 02 F6 | 	mov	arg01, local01
0cc24     48 D2 B0 FD | 	call	#__system___float_add
0cc28     A7 FA 61 FC | 	wrlong	result1, fp
0cc2c     00 02 90 FD | 	jmp	#LR__1025
0cc30                 | LR__1017
0cc30                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0cc30     08 4E 05 F1 | 	add	fp, #8
0cc34     A7 1E 02 FB | 	rdlong	local01, fp
0cc38     08 4E 85 F1 | 	sub	fp, #8
0cc3c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cc40     14 4E 05 A1 |  if_e	add	fp, #20
0cc44     A7 24 02 AB |  if_e	rdlong	local04, fp
0cc48     14 4E 85 A1 |  if_e	sub	fp, #20
0cc4c     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0cc50     1C 00 90 5D |  if_ne	jmp	#LR__1018
0cc54     A7 12 02 FB | 	rdlong	arg01, fp
0cc58     0C 4E 05 F1 | 	add	fp, #12
0cc5c     A7 14 02 FB | 	rdlong	arg02, fp
0cc60     0C 4E 85 F1 | 	sub	fp, #12
0cc64     08 D2 B0 FD | 	call	#__system___float_add
0cc68     A7 FA 61 FC | 	wrlong	result1, fp
0cc6c     C0 01 90 FD | 	jmp	#LR__1025
0cc70                 | LR__1018
0cc70                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0cc70     08 4E 05 F1 | 	add	fp, #8
0cc74     A7 1E 02 FB | 	rdlong	local01, fp
0cc78     08 4E 85 F1 | 	sub	fp, #8
0cc7c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0cc80     24 00 90 5D |  if_ne	jmp	#LR__1019
0cc84     14 4E 05 F1 | 	add	fp, #20
0cc88     A7 22 02 FB | 	rdlong	local03, fp
0cc8c     14 4E 85 F1 | 	sub	fp, #20
0cc90     1F 22 0E F2 | 	cmp	local03, #31 wz
0cc94     A7 04 68 5C |  if_ne	wrlong	#2, fp
0cc98     08 4E 05 51 |  if_ne	add	fp, #8
0cc9c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0cca0     08 4E 85 51 |  if_ne	sub	fp, #8
0cca4     88 01 90 5D |  if_ne	jmp	#LR__1025
0cca8                 | LR__1019
0cca8                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0cca8     14 4E 05 F1 | 	add	fp, #20
0ccac     A7 1E 02 FB | 	rdlong	local01, fp
0ccb0     14 4E 85 F1 | 	sub	fp, #20
0ccb4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ccb8     24 00 90 5D |  if_ne	jmp	#LR__1020
0ccbc     08 4E 05 F1 | 	add	fp, #8
0ccc0     A7 22 02 FB | 	rdlong	local03, fp
0ccc4     08 4E 85 F1 | 	sub	fp, #8
0ccc8     1F 22 0E F2 | 	cmp	local03, #31 wz
0cccc     A7 04 68 5C |  if_ne	wrlong	#2, fp
0ccd0     08 4E 05 51 |  if_ne	add	fp, #8
0ccd4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0ccd8     08 4E 85 51 |  if_ne	sub	fp, #8
0ccdc     50 01 90 5D |  if_ne	jmp	#LR__1025
0cce0                 | LR__1020
0cce0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0cce0     08 4E 05 F1 | 	add	fp, #8
0cce4     A7 1E 02 FB | 	rdlong	local01, fp
0cce8     08 4E 85 F1 | 	sub	fp, #8
0ccec     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ccf0     14 4E 05 A1 |  if_e	add	fp, #20
0ccf4     A7 22 02 AB |  if_e	rdlong	local03, fp
0ccf8     14 4E 85 A1 |  if_e	sub	fp, #20
0ccfc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0cd00     1C 00 90 5D |  if_ne	jmp	#LR__1021
0cd04     A7 12 02 FB | 	rdlong	arg01, fp
0cd08     0C 4E 05 F1 | 	add	fp, #12
0cd0c     A7 14 02 FB | 	rdlong	arg02, fp
0cd10     0C 4E 85 F1 | 	sub	fp, #12
0cd14     9C AB B0 FD | 	call	#__system___string_concat
0cd18     A7 FA 61 FC | 	wrlong	result1, fp
0cd1c     10 01 90 FD | 	jmp	#LR__1025
0cd20                 | LR__1021
0cd20                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0cd20     08 4E 05 F1 | 	add	fp, #8
0cd24     A7 1E 02 FB | 	rdlong	local01, fp
0cd28     08 4E 85 F1 | 	sub	fp, #8
0cd2c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0cd30     14 4E 05 A1 |  if_e	add	fp, #20
0cd34     A7 22 02 AB |  if_e	rdlong	local03, fp
0cd38     14 4E 85 A1 |  if_e	sub	fp, #20
0cd3c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0cd40     30 00 90 5D |  if_ne	jmp	#LR__1022
0cd44     A7 12 02 FB | 	rdlong	arg01, fp
0cd48     48 EF BF FD | 	call	#_convertstring
0cd4c     FD 12 02 F6 | 	mov	arg01, result1
0cd50     0C 4E 05 F1 | 	add	fp, #12
0cd54     A7 14 02 FB | 	rdlong	arg02, fp
0cd58     0C 4E 85 F1 | 	sub	fp, #12
0cd5c     54 AB B0 FD | 	call	#__system___string_concat
0cd60     A7 FA 61 FC | 	wrlong	result1, fp
0cd64     08 4E 05 F1 | 	add	fp, #8
0cd68     A7 3E 68 FC | 	wrlong	#31, fp
0cd6c     08 4E 85 F1 | 	sub	fp, #8
0cd70     BC 00 90 FD | 	jmp	#LR__1025
0cd74                 | LR__1022
0cd74                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0cd74     08 4E 05 F1 | 	add	fp, #8
0cd78     A7 1E 02 FB | 	rdlong	local01, fp
0cd7c     08 4E 85 F1 | 	sub	fp, #8
0cd80     1F 1E 0E F2 | 	cmp	local01, #31 wz
0cd84     14 4E 05 A1 |  if_e	add	fp, #20
0cd88     A7 22 02 AB |  if_e	rdlong	local03, fp
0cd8c     14 4E 85 A1 |  if_e	sub	fp, #20
0cd90     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0cd94     28 00 90 5D |  if_ne	jmp	#LR__1023
0cd98     A7 1E 02 FB | 	rdlong	local01, fp
0cd9c     0C 4E 05 F1 | 	add	fp, #12
0cda0     A7 12 02 FB | 	rdlong	arg01, fp
0cda4     0C 4E 85 F1 | 	sub	fp, #12
0cda8     E8 EE BF FD | 	call	#_convertstring
0cdac     FD 14 02 F6 | 	mov	arg02, result1
0cdb0     0F 13 02 F6 | 	mov	arg01, local01
0cdb4     FC AA B0 FD | 	call	#__system___string_concat
0cdb8     A7 FA 61 FC | 	wrlong	result1, fp
0cdbc     70 00 90 FD | 	jmp	#LR__1025
0cdc0                 | LR__1023
0cdc0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0cdc0     08 4E 05 F1 | 	add	fp, #8
0cdc4     A7 1E 02 FB | 	rdlong	local01, fp
0cdc8     08 4E 85 F1 | 	sub	fp, #8
0cdcc     2B 1E 0E F2 | 	cmp	local01, #43 wz
0cdd0     14 4E 05 A1 |  if_e	add	fp, #20
0cdd4     A7 22 02 AB |  if_e	rdlong	local03, fp
0cdd8     14 4E 85 A1 |  if_e	sub	fp, #20
0cddc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0cde0     3C 00 90 5D |  if_ne	jmp	#LR__1024
0cde4     A7 12 02 FB | 	rdlong	arg01, fp
0cde8     A8 EE BF FD | 	call	#_convertstring
0cdec     FD 1E 02 F6 | 	mov	local01, result1
0cdf0     0C 4E 05 F1 | 	add	fp, #12
0cdf4     A7 12 02 FB | 	rdlong	arg01, fp
0cdf8     0C 4E 85 F1 | 	sub	fp, #12
0cdfc     94 EE BF FD | 	call	#_convertstring
0ce00     FD 14 02 F6 | 	mov	arg02, result1
0ce04     0F 13 02 F6 | 	mov	arg01, local01
0ce08     A8 AA B0 FD | 	call	#__system___string_concat
0ce0c     A7 FA 61 FC | 	wrlong	result1, fp
0ce10     08 4E 05 F1 | 	add	fp, #8
0ce14     A7 3E 68 FC | 	wrlong	#31, fp
0ce18     08 4E 85 F1 | 	sub	fp, #8
0ce1c     10 00 90 FD | 	jmp	#LR__1025
0ce20                 | LR__1024
0ce20     A7 08 68 FC | 	wrlong	#4, fp
0ce24     08 4E 05 F1 | 	add	fp, #8
0ce28     A7 FE 69 FC | 	wrlong	#255, fp
0ce2c     08 4E 85 F1 | 	sub	fp, #8
0ce30                 | LR__1025
0ce30     A7 12 02 F6 | 	mov	arg01, fp
0ce34     EC BD BF FD | 	call	#_push
0ce38     A7 F0 03 F6 | 	mov	ptra, fp
0ce3c     B2 00 A0 FD | 	call	#popregs_
0ce40                 | _do_plus_ret
0ce40     2D 00 64 FD | 	ret
0ce44                 | 
0ce44                 | ' 
0ce44                 | ' sub do_minus
0ce44                 | _do_minus
0ce44     05 4A 05 F6 | 	mov	COUNT_, #5
0ce48     A8 00 A0 FD | 	call	#pushregs_
0ce4c     18 F0 07 F1 | 	add	ptra, #24
0ce50     38 BD BF FD | 	call	#_pop
0ce54     FD 1E 02 F6 | 	mov	local01, result1
0ce58     FE 20 02 F6 | 	mov	local02, result2
0ce5c     FF 22 02 F6 | 	mov	local03, result3
0ce60     0C 4E 05 F1 | 	add	fp, #12
0ce64     A7 1E 62 FC | 	wrlong	local01, fp
0ce68     04 4E 05 F1 | 	add	fp, #4
0ce6c     A7 20 62 FC | 	wrlong	local02, fp
0ce70     04 4E 05 F1 | 	add	fp, #4
0ce74     A7 22 62 FC | 	wrlong	local03, fp
0ce78     14 4E 85 F1 | 	sub	fp, #20
0ce7c     0C BD BF FD | 	call	#_pop
0ce80     FF 22 02 F6 | 	mov	local03, result3
0ce84     A7 FA 61 FC | 	wrlong	result1, fp
0ce88     04 4E 05 F1 | 	add	fp, #4
0ce8c     A7 FC 61 FC | 	wrlong	result2, fp
0ce90     04 4E 05 F1 | 	add	fp, #4
0ce94     A7 22 62 FC | 	wrlong	local03, fp
0ce98                 | ' 
0ce98                 | ' t2=pop()
0ce98                 | ' t1=pop()
0ce98                 | ' 
0ce98                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0ce98     08 4E 85 F1 | 	sub	fp, #8
0ce9c     1D 22 0E F2 | 	cmp	local03, #29 wz
0cea0     14 4E 05 A1 |  if_e	add	fp, #20
0cea4     A7 24 02 AB |  if_e	rdlong	local04, fp
0cea8     14 4E 85 A1 |  if_e	sub	fp, #20
0ceac     12 23 02 A6 |  if_e	mov	local03, local04
0ceb0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ceb4     5C 00 90 5D |  if_ne	jmp	#LR__1031
0ceb8                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0ceb8     0C 4E 05 F1 | 	add	fp, #12
0cebc     A7 1E 02 FB | 	rdlong	local01, fp
0cec0     0C 4E 85 F1 | 	sub	fp, #12
0cec4     A7 22 02 FB | 	rdlong	local03, fp
0cec8     11 1F 12 F2 | 	cmp	local01, local03 wc
0cecc     1C 00 90 3D |  if_ae	jmp	#LR__1030
0ced0     A7 1E 02 FB | 	rdlong	local01, fp
0ced4     0C 4E 05 F1 | 	add	fp, #12
0ced8     A7 20 02 FB | 	rdlong	local02, fp
0cedc     0C 4E 85 F1 | 	sub	fp, #12
0cee0     10 1F 82 F1 | 	sub	local01, local02
0cee4     A7 1E 62 FC | 	wrlong	local01, fp
0cee8     F4 02 90 FD | 	jmp	#LR__1040
0ceec                 | LR__1030
0ceec     A7 1E 02 FB | 	rdlong	local01, fp
0cef0     0C 4E 05 F1 | 	add	fp, #12
0cef4     A7 20 02 FB | 	rdlong	local02, fp
0cef8     0C 4E 85 F1 | 	sub	fp, #12
0cefc     10 1F 82 F1 | 	sub	local01, local02
0cf00     A7 1E 62 FC | 	wrlong	local01, fp
0cf04     08 4E 05 F1 | 	add	fp, #8
0cf08     A7 38 68 FC | 	wrlong	#28, fp
0cf0c     08 4E 85 F1 | 	sub	fp, #8
0cf10     CC 02 90 FD | 	jmp	#LR__1040
0cf14                 | LR__1031
0cf14                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0cf14     08 4E 05 F1 | 	add	fp, #8
0cf18     A7 1E 02 FB | 	rdlong	local01, fp
0cf1c     08 4E 85 F1 | 	sub	fp, #8
0cf20     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cf24     14 4E 05 A1 |  if_e	add	fp, #20
0cf28     A7 24 02 AB |  if_e	rdlong	local04, fp
0cf2c     14 4E 85 A1 |  if_e	sub	fp, #20
0cf30     12 23 02 A6 |  if_e	mov	local03, local04
0cf34     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0cf38     28 00 90 5D |  if_ne	jmp	#LR__1032
0cf3c     A7 1E 02 FB | 	rdlong	local01, fp
0cf40     0C 4E 05 F1 | 	add	fp, #12
0cf44     A7 20 02 FB | 	rdlong	local02, fp
0cf48     0C 4E 85 F1 | 	sub	fp, #12
0cf4c     10 1F 82 F1 | 	sub	local01, local02
0cf50     A7 1E 62 FC | 	wrlong	local01, fp
0cf54     08 4E 05 F1 | 	add	fp, #8
0cf58     A7 38 68 FC | 	wrlong	#28, fp
0cf5c     08 4E 85 F1 | 	sub	fp, #8
0cf60     7C 02 90 FD | 	jmp	#LR__1040
0cf64                 | LR__1032
0cf64                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0cf64     08 4E 05 F1 | 	add	fp, #8
0cf68     A7 1E 02 FB | 	rdlong	local01, fp
0cf6c     08 4E 85 F1 | 	sub	fp, #8
0cf70     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cf74     14 4E 05 A1 |  if_e	add	fp, #20
0cf78     A7 24 02 AB |  if_e	rdlong	local04, fp
0cf7c     14 4E 85 A1 |  if_e	sub	fp, #20
0cf80     12 23 02 A6 |  if_e	mov	local03, local04
0cf84     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cf88     34 00 90 5D |  if_ne	jmp	#LR__1033
0cf8c     A7 12 02 FB | 	rdlong	arg01, fp
0cf90     A8 CE B0 FD | 	call	#__system___float_fromuns
0cf94     FD 12 02 F6 | 	mov	arg01, result1
0cf98     0C 4E 05 F1 | 	add	fp, #12
0cf9c     A7 14 02 FB | 	rdlong	arg02, fp
0cfa0     0C 4E 85 F1 | 	sub	fp, #12
0cfa4     1F 14 E6 F4 | 	bitnot	arg02, #31
0cfa8     C4 CE B0 FD | 	call	#__system___float_add
0cfac     A7 FA 61 FC | 	wrlong	result1, fp
0cfb0     08 4E 05 F1 | 	add	fp, #8
0cfb4     A7 3C 68 FC | 	wrlong	#30, fp
0cfb8     08 4E 85 F1 | 	sub	fp, #8
0cfbc     20 02 90 FD | 	jmp	#LR__1040
0cfc0                 | LR__1033
0cfc0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0cfc0     08 4E 05 F1 | 	add	fp, #8
0cfc4     A7 1E 02 FB | 	rdlong	local01, fp
0cfc8     08 4E 85 F1 | 	sub	fp, #8
0cfcc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cfd0     14 4E 05 A1 |  if_e	add	fp, #20
0cfd4     A7 24 02 AB |  if_e	rdlong	local04, fp
0cfd8     14 4E 85 A1 |  if_e	sub	fp, #20
0cfdc     12 23 02 A6 |  if_e	mov	local03, local04
0cfe0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0cfe4     1C 00 90 5D |  if_ne	jmp	#LR__1034
0cfe8     A7 1E 02 FB | 	rdlong	local01, fp
0cfec     0C 4E 05 F1 | 	add	fp, #12
0cff0     A7 20 02 FB | 	rdlong	local02, fp
0cff4     0C 4E 85 F1 | 	sub	fp, #12
0cff8     10 1F 82 F1 | 	sub	local01, local02
0cffc     A7 1E 62 FC | 	wrlong	local01, fp
0d000     DC 01 90 FD | 	jmp	#LR__1040
0d004                 | LR__1034
0d004                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0d004     08 4E 05 F1 | 	add	fp, #8
0d008     A7 1E 02 FB | 	rdlong	local01, fp
0d00c     08 4E 85 F1 | 	sub	fp, #8
0d010     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d014     14 4E 05 A1 |  if_e	add	fp, #20
0d018     A7 24 02 AB |  if_e	rdlong	local04, fp
0d01c     14 4E 85 A1 |  if_e	sub	fp, #20
0d020     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0d024     1C 00 90 5D |  if_ne	jmp	#LR__1035
0d028     A7 1E 02 FB | 	rdlong	local01, fp
0d02c     0C 4E 05 F1 | 	add	fp, #12
0d030     A7 20 02 FB | 	rdlong	local02, fp
0d034     0C 4E 85 F1 | 	sub	fp, #12
0d038     10 1F 82 F1 | 	sub	local01, local02
0d03c     A7 1E 62 FC | 	wrlong	local01, fp
0d040     9C 01 90 FD | 	jmp	#LR__1040
0d044                 | LR__1035
0d044                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0d044     08 4E 05 F1 | 	add	fp, #8
0d048     A7 1E 02 FB | 	rdlong	local01, fp
0d04c     08 4E 85 F1 | 	sub	fp, #8
0d050     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d054     14 4E 05 A1 |  if_e	add	fp, #20
0d058     A7 22 02 AB |  if_e	rdlong	local03, fp
0d05c     14 4E 85 A1 |  if_e	sub	fp, #20
0d060     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d064     44 00 90 5D |  if_ne	jmp	#LR__1036
0d068     A7 12 02 FB | 	rdlong	arg01, fp
0d06c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d070     1F 26 C6 C9 |  if_b	decod	local05, #31
0d074     00 26 06 36 |  if_ae	mov	local05, #0
0d078     C0 CD B0 FD | 	call	#__system___float_fromuns
0d07c     13 FB 61 F5 | 	xor	result1, local05
0d080     FD 12 02 F6 | 	mov	arg01, result1
0d084     0C 4E 05 F1 | 	add	fp, #12
0d088     A7 14 02 FB | 	rdlong	arg02, fp
0d08c     0C 4E 85 F1 | 	sub	fp, #12
0d090     1F 14 E6 F4 | 	bitnot	arg02, #31
0d094     D8 CD B0 FD | 	call	#__system___float_add
0d098     A7 FA 61 FC | 	wrlong	result1, fp
0d09c     08 4E 05 F1 | 	add	fp, #8
0d0a0     A7 3C 68 FC | 	wrlong	#30, fp
0d0a4     08 4E 85 F1 | 	sub	fp, #8
0d0a8     34 01 90 FD | 	jmp	#LR__1040
0d0ac                 | LR__1036
0d0ac                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0d0ac     08 4E 05 F1 | 	add	fp, #8
0d0b0     A7 1E 02 FB | 	rdlong	local01, fp
0d0b4     08 4E 85 F1 | 	sub	fp, #8
0d0b8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d0bc     14 4E 05 A1 |  if_e	add	fp, #20
0d0c0     A7 22 02 AB |  if_e	rdlong	local03, fp
0d0c4     14 4E 85 A1 |  if_e	sub	fp, #20
0d0c8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d0cc     2C 00 90 5D |  if_ne	jmp	#LR__1037
0d0d0     A7 1E 02 FB | 	rdlong	local01, fp
0d0d4     0C 4E 05 F1 | 	add	fp, #12
0d0d8     A7 12 02 FB | 	rdlong	arg01, fp
0d0dc     0C 4E 85 F1 | 	sub	fp, #12
0d0e0     58 CD B0 FD | 	call	#__system___float_fromuns
0d0e4     FD 14 02 F6 | 	mov	arg02, result1
0d0e8     0F 13 02 F6 | 	mov	arg01, local01
0d0ec     1F 14 E6 F4 | 	bitnot	arg02, #31
0d0f0     7C CD B0 FD | 	call	#__system___float_add
0d0f4     A7 FA 61 FC | 	wrlong	result1, fp
0d0f8     E4 00 90 FD | 	jmp	#LR__1040
0d0fc                 | LR__1037
0d0fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0d0fc     08 4E 05 F1 | 	add	fp, #8
0d100     A7 1E 02 FB | 	rdlong	local01, fp
0d104     08 4E 85 F1 | 	sub	fp, #8
0d108     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d10c     14 4E 05 A1 |  if_e	add	fp, #20
0d110     A7 22 02 AB |  if_e	rdlong	local03, fp
0d114     14 4E 85 A1 |  if_e	sub	fp, #20
0d118     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d11c     3C 00 90 5D |  if_ne	jmp	#LR__1038
0d120     A7 1E 02 FB | 	rdlong	local01, fp
0d124     0C 4E 05 F1 | 	add	fp, #12
0d128     A7 12 02 FB | 	rdlong	arg01, fp
0d12c     0C 4E 85 F1 | 	sub	fp, #12
0d130     09 13 52 F6 | 	abs	arg01, arg01 wc
0d134     1F 26 C6 C9 |  if_b	decod	local05, #31
0d138     00 26 06 36 |  if_ae	mov	local05, #0
0d13c     FC CC B0 FD | 	call	#__system___float_fromuns
0d140     13 FB 61 F5 | 	xor	result1, local05
0d144     FD 14 02 F6 | 	mov	arg02, result1
0d148     0F 13 02 F6 | 	mov	arg01, local01
0d14c     1F 14 E6 F4 | 	bitnot	arg02, #31
0d150     1C CD B0 FD | 	call	#__system___float_add
0d154     A7 FA 61 FC | 	wrlong	result1, fp
0d158     84 00 90 FD | 	jmp	#LR__1040
0d15c                 | LR__1038
0d15c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0d15c     08 4E 05 F1 | 	add	fp, #8
0d160     A7 1E 02 FB | 	rdlong	local01, fp
0d164     08 4E 85 F1 | 	sub	fp, #8
0d168     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d16c     14 4E 05 A1 |  if_e	add	fp, #20
0d170     A7 22 02 AB |  if_e	rdlong	local03, fp
0d174     14 4E 85 A1 |  if_e	sub	fp, #20
0d178     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d17c     20 00 90 5D |  if_ne	jmp	#LR__1039
0d180     A7 12 02 FB | 	rdlong	arg01, fp
0d184     0C 4E 05 F1 | 	add	fp, #12
0d188     A7 14 02 FB | 	rdlong	arg02, fp
0d18c     0C 4E 85 F1 | 	sub	fp, #12
0d190     1F 14 E6 F4 | 	bitnot	arg02, #31
0d194     D8 CC B0 FD | 	call	#__system___float_add
0d198     A7 FA 61 FC | 	wrlong	result1, fp
0d19c     40 00 90 FD | 	jmp	#LR__1040
0d1a0                 | LR__1039
0d1a0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0d1a0     08 4E 05 F1 | 	add	fp, #8
0d1a4     A7 1E 02 FB | 	rdlong	local01, fp
0d1a8     08 4E 85 F1 | 	sub	fp, #8
0d1ac     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d1b0     14 4E 05 51 |  if_ne	add	fp, #20
0d1b4     A7 22 02 5B |  if_ne	rdlong	local03, fp
0d1b8     14 4E 85 51 |  if_ne	sub	fp, #20
0d1bc     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0d1c0     A7 06 68 AC |  if_e	wrlong	#3, fp
0d1c4     08 4E 05 A1 |  if_e	add	fp, #8
0d1c8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0d1cc     08 4E 85 A1 |  if_e	sub	fp, #8
0d1d0     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0d1d4     08 4E 05 51 |  if_ne	add	fp, #8
0d1d8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d1dc     08 4E 85 51 |  if_ne	sub	fp, #8
0d1e0                 | LR__1040
0d1e0     A7 12 02 F6 | 	mov	arg01, fp
0d1e4     3C BA BF FD | 	call	#_push
0d1e8     A7 F0 03 F6 | 	mov	ptra, fp
0d1ec     B2 00 A0 FD | 	call	#popregs_
0d1f0                 | _do_minus_ret
0d1f0     2D 00 64 FD | 	ret
0d1f4                 | 
0d1f4                 | ' 
0d1f4                 | ' sub do_and 
0d1f4                 | _do_and
0d1f4     03 4A 05 F6 | 	mov	COUNT_, #3
0d1f8     A8 00 A0 FD | 	call	#pushregs_
0d1fc     18 F0 07 F1 | 	add	ptra, #24
0d200     88 B9 BF FD | 	call	#_pop
0d204     FD 12 02 F6 | 	mov	arg01, result1
0d208     FE 1E 02 F6 | 	mov	local01, result2
0d20c     FF 20 02 F6 | 	mov	local02, result3
0d210     0C 4E 05 F1 | 	add	fp, #12
0d214     A7 12 62 FC | 	wrlong	arg01, fp
0d218     04 4E 05 F1 | 	add	fp, #4
0d21c     A7 1E 62 FC | 	wrlong	local01, fp
0d220     04 4E 05 F1 | 	add	fp, #4
0d224     A7 20 62 FC | 	wrlong	local02, fp
0d228     14 4E 85 F1 | 	sub	fp, #20
0d22c     5C B9 BF FD | 	call	#_pop
0d230     FF 22 02 F6 | 	mov	local03, result3
0d234     A7 FA 61 FC | 	wrlong	result1, fp
0d238     04 4E 05 F1 | 	add	fp, #4
0d23c     A7 FC 61 FC | 	wrlong	result2, fp
0d240     04 4E 05 F1 | 	add	fp, #4
0d244     A7 22 62 FC | 	wrlong	local03, fp
0d248                 | ' 
0d248                 | ' t2=pop()
0d248                 | ' t1=pop()
0d248                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0d248     08 4E 85 F1 | 	sub	fp, #8
0d24c     1C 22 0E F2 | 	cmp	local03, #28 wz
0d250     A7 22 02 AB |  if_e	rdlong	local03, fp
0d254     A7 22 62 AC |  if_e	wrlong	local03, fp
0d258     08 4E 05 A1 |  if_e	add	fp, #8
0d25c     A7 3A 68 AC |  if_e	wrlong	#29, fp
0d260     08 4E 85 A1 |  if_e	sub	fp, #8
0d264                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0d264     14 4E 05 F1 | 	add	fp, #20
0d268     A7 22 02 FB | 	rdlong	local03, fp
0d26c     14 4E 85 F1 | 	sub	fp, #20
0d270     1C 22 0E F2 | 	cmp	local03, #28 wz
0d274     18 00 90 5D |  if_ne	jmp	#LR__1050
0d278     0C 4E 05 F1 | 	add	fp, #12
0d27c     A7 22 02 FB | 	rdlong	local03, fp
0d280     A7 22 62 FC | 	wrlong	local03, fp
0d284     08 4E 05 F1 | 	add	fp, #8
0d288     A7 3A 68 FC | 	wrlong	#29, fp
0d28c     14 4E 85 F1 | 	sub	fp, #20
0d290                 | LR__1050
0d290                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0d290     08 4E 05 F1 | 	add	fp, #8
0d294     A7 22 02 FB | 	rdlong	local03, fp
0d298     08 4E 85 F1 | 	sub	fp, #8
0d29c     1F 22 0E F2 | 	cmp	local03, #31 wz
0d2a0     14 4E 05 51 |  if_ne	add	fp, #20
0d2a4     A7 20 02 5B |  if_ne	rdlong	local02, fp
0d2a8     14 4E 85 51 |  if_ne	sub	fp, #20
0d2ac     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0d2b0     08 4E 05 51 |  if_ne	add	fp, #8
0d2b4     A7 22 02 5B |  if_ne	rdlong	local03, fp
0d2b8     08 4E 85 51 |  if_ne	sub	fp, #8
0d2bc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0d2c0     14 4E 05 51 |  if_ne	add	fp, #20
0d2c4     14 4E 85 51 |  if_ne	sub	fp, #20
0d2c8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0d2cc     A7 0C 68 AC |  if_e	wrlong	#6, fp
0d2d0     08 4E 05 A1 |  if_e	add	fp, #8
0d2d4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0d2d8     08 4E 85 A1 |  if_e	sub	fp, #8
0d2dc     18 00 90 AD |  if_e	jmp	#LR__1051
0d2e0     A7 22 02 FB | 	rdlong	local03, fp
0d2e4     0C 4E 05 F1 | 	add	fp, #12
0d2e8     A7 1E 02 FB | 	rdlong	local01, fp
0d2ec     0C 4E 85 F1 | 	sub	fp, #12
0d2f0     0F 23 02 F5 | 	and	local03, local01
0d2f4     A7 22 62 FC | 	wrlong	local03, fp
0d2f8                 | LR__1051
0d2f8     A7 12 02 F6 | 	mov	arg01, fp
0d2fc     24 B9 BF FD | 	call	#_push
0d300     A7 F0 03 F6 | 	mov	ptra, fp
0d304     B2 00 A0 FD | 	call	#popregs_
0d308                 | _do_and_ret
0d308     2D 00 64 FD | 	ret
0d30c                 | 
0d30c                 | ' 
0d30c                 | ' sub do_or 
0d30c                 | _do_or
0d30c     03 4A 05 F6 | 	mov	COUNT_, #3
0d310     A8 00 A0 FD | 	call	#pushregs_
0d314     18 F0 07 F1 | 	add	ptra, #24
0d318     70 B8 BF FD | 	call	#_pop
0d31c     FD 12 02 F6 | 	mov	arg01, result1
0d320     FE 1E 02 F6 | 	mov	local01, result2
0d324     FF 20 02 F6 | 	mov	local02, result3
0d328     0C 4E 05 F1 | 	add	fp, #12
0d32c     A7 12 62 FC | 	wrlong	arg01, fp
0d330     04 4E 05 F1 | 	add	fp, #4
0d334     A7 1E 62 FC | 	wrlong	local01, fp
0d338     04 4E 05 F1 | 	add	fp, #4
0d33c     A7 20 62 FC | 	wrlong	local02, fp
0d340     14 4E 85 F1 | 	sub	fp, #20
0d344     44 B8 BF FD | 	call	#_pop
0d348     FF 22 02 F6 | 	mov	local03, result3
0d34c     A7 FA 61 FC | 	wrlong	result1, fp
0d350     04 4E 05 F1 | 	add	fp, #4
0d354     A7 FC 61 FC | 	wrlong	result2, fp
0d358     04 4E 05 F1 | 	add	fp, #4
0d35c     A7 22 62 FC | 	wrlong	local03, fp
0d360                 | ' 
0d360                 | ' t2=pop()
0d360                 | ' t1=pop()
0d360                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0d360     08 4E 85 F1 | 	sub	fp, #8
0d364     1C 22 0E F2 | 	cmp	local03, #28 wz
0d368     A7 22 02 AB |  if_e	rdlong	local03, fp
0d36c     A7 22 62 AC |  if_e	wrlong	local03, fp
0d370     08 4E 05 A1 |  if_e	add	fp, #8
0d374     A7 3A 68 AC |  if_e	wrlong	#29, fp
0d378     08 4E 85 A1 |  if_e	sub	fp, #8
0d37c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0d37c     14 4E 05 F1 | 	add	fp, #20
0d380     A7 22 02 FB | 	rdlong	local03, fp
0d384     14 4E 85 F1 | 	sub	fp, #20
0d388     1C 22 0E F2 | 	cmp	local03, #28 wz
0d38c     18 00 90 5D |  if_ne	jmp	#LR__1060
0d390     0C 4E 05 F1 | 	add	fp, #12
0d394     A7 22 02 FB | 	rdlong	local03, fp
0d398     A7 22 62 FC | 	wrlong	local03, fp
0d39c     08 4E 05 F1 | 	add	fp, #8
0d3a0     A7 3A 68 FC | 	wrlong	#29, fp
0d3a4     14 4E 85 F1 | 	sub	fp, #20
0d3a8                 | LR__1060
0d3a8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0d3a8     08 4E 05 F1 | 	add	fp, #8
0d3ac     A7 22 02 FB | 	rdlong	local03, fp
0d3b0     08 4E 85 F1 | 	sub	fp, #8
0d3b4     1F 22 0E F2 | 	cmp	local03, #31 wz
0d3b8     14 4E 05 51 |  if_ne	add	fp, #20
0d3bc     A7 20 02 5B |  if_ne	rdlong	local02, fp
0d3c0     14 4E 85 51 |  if_ne	sub	fp, #20
0d3c4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0d3c8     08 4E 05 51 |  if_ne	add	fp, #8
0d3cc     A7 22 02 5B |  if_ne	rdlong	local03, fp
0d3d0     08 4E 85 51 |  if_ne	sub	fp, #8
0d3d4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0d3d8     14 4E 05 51 |  if_ne	add	fp, #20
0d3dc     14 4E 85 51 |  if_ne	sub	fp, #20
0d3e0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0d3e4     A7 0C 68 AC |  if_e	wrlong	#6, fp
0d3e8     08 4E 05 A1 |  if_e	add	fp, #8
0d3ec     A7 FE 69 AC |  if_e	wrlong	#255, fp
0d3f0     08 4E 85 A1 |  if_e	sub	fp, #8
0d3f4     18 00 90 AD |  if_e	jmp	#LR__1061
0d3f8     A7 22 02 FB | 	rdlong	local03, fp
0d3fc     0C 4E 05 F1 | 	add	fp, #12
0d400     A7 1E 02 FB | 	rdlong	local01, fp
0d404     0C 4E 85 F1 | 	sub	fp, #12
0d408     0F 23 42 F5 | 	or	local03, local01
0d40c     A7 22 62 FC | 	wrlong	local03, fp
0d410                 | LR__1061
0d410     A7 12 02 F6 | 	mov	arg01, fp
0d414     0C B8 BF FD | 	call	#_push
0d418     A7 F0 03 F6 | 	mov	ptra, fp
0d41c     B2 00 A0 FD | 	call	#popregs_
0d420                 | _do_or_ret
0d420     2D 00 64 FD | 	ret
0d424                 | 
0d424                 | ' 
0d424                 | ' sub do_mul
0d424                 | _do_mul
0d424     05 4A 05 F6 | 	mov	COUNT_, #5
0d428     A8 00 A0 FD | 	call	#pushregs_
0d42c     18 F0 07 F1 | 	add	ptra, #24
0d430     58 B7 BF FD | 	call	#_pop
0d434     FD 1E 02 F6 | 	mov	local01, result1
0d438     FE 20 02 F6 | 	mov	local02, result2
0d43c     FF 22 02 F6 | 	mov	local03, result3
0d440     0C 4E 05 F1 | 	add	fp, #12
0d444     A7 1E 62 FC | 	wrlong	local01, fp
0d448     04 4E 05 F1 | 	add	fp, #4
0d44c     A7 20 62 FC | 	wrlong	local02, fp
0d450     04 4E 05 F1 | 	add	fp, #4
0d454     A7 22 62 FC | 	wrlong	local03, fp
0d458     14 4E 85 F1 | 	sub	fp, #20
0d45c     2C B7 BF FD | 	call	#_pop
0d460     FF 22 02 F6 | 	mov	local03, result3
0d464     A7 FA 61 FC | 	wrlong	result1, fp
0d468     04 4E 05 F1 | 	add	fp, #4
0d46c     A7 FC 61 FC | 	wrlong	result2, fp
0d470     04 4E 05 F1 | 	add	fp, #4
0d474     A7 22 62 FC | 	wrlong	local03, fp
0d478                 | ' 
0d478                 | ' t2=pop()
0d478                 | ' t1=pop()
0d478                 | ' 
0d478                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0d478     08 4E 85 F1 | 	sub	fp, #8
0d47c     1D 22 0E F2 | 	cmp	local03, #29 wz
0d480     14 4E 05 A1 |  if_e	add	fp, #20
0d484     A7 24 02 AB |  if_e	rdlong	local04, fp
0d488     14 4E 85 A1 |  if_e	sub	fp, #20
0d48c     12 23 02 A6 |  if_e	mov	local03, local04
0d490     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d494     20 00 90 5D |  if_ne	jmp	#LR__1070
0d498     A7 20 02 FB | 	rdlong	local02, fp
0d49c     0C 4E 05 F1 | 	add	fp, #12
0d4a0     A7 22 02 FB | 	rdlong	local03, fp
0d4a4     11 21 02 FD | 	qmul	local02, local03
0d4a8     0C 4E 85 F1 | 	sub	fp, #12
0d4ac     18 1E 62 FD | 	getqx	local01
0d4b0     A7 1E 62 FC | 	wrlong	local01, fp
0d4b4     C4 02 90 FD | 	jmp	#LR__1079
0d4b8                 | LR__1070
0d4b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0d4b8     08 4E 05 F1 | 	add	fp, #8
0d4bc     A7 1E 02 FB | 	rdlong	local01, fp
0d4c0     08 4E 85 F1 | 	sub	fp, #8
0d4c4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d4c8     14 4E 05 A1 |  if_e	add	fp, #20
0d4cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0d4d0     14 4E 85 A1 |  if_e	sub	fp, #20
0d4d4     12 23 02 A6 |  if_e	mov	local03, local04
0d4d8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d4dc     2C 00 90 5D |  if_ne	jmp	#LR__1071
0d4e0     A7 20 02 FB | 	rdlong	local02, fp
0d4e4     0C 4E 05 F1 | 	add	fp, #12
0d4e8     A7 22 02 FB | 	rdlong	local03, fp
0d4ec     11 21 02 FD | 	qmul	local02, local03
0d4f0     0C 4E 85 F1 | 	sub	fp, #12
0d4f4     18 1E 62 FD | 	getqx	local01
0d4f8     A7 1E 62 FC | 	wrlong	local01, fp
0d4fc     08 4E 05 F1 | 	add	fp, #8
0d500     A7 38 68 FC | 	wrlong	#28, fp
0d504     08 4E 85 F1 | 	sub	fp, #8
0d508     70 02 90 FD | 	jmp	#LR__1079
0d50c                 | LR__1071
0d50c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0d50c     08 4E 05 F1 | 	add	fp, #8
0d510     A7 1E 02 FB | 	rdlong	local01, fp
0d514     08 4E 85 F1 | 	sub	fp, #8
0d518     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d51c     14 4E 05 A1 |  if_e	add	fp, #20
0d520     A7 24 02 AB |  if_e	rdlong	local04, fp
0d524     14 4E 85 A1 |  if_e	sub	fp, #20
0d528     12 23 02 A6 |  if_e	mov	local03, local04
0d52c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d530     30 00 90 5D |  if_ne	jmp	#LR__1072
0d534     A7 12 02 FB | 	rdlong	arg01, fp
0d538     00 C9 B0 FD | 	call	#__system___float_fromuns
0d53c     FD 12 02 F6 | 	mov	arg01, result1
0d540     0C 4E 05 F1 | 	add	fp, #12
0d544     A7 14 02 FB | 	rdlong	arg02, fp
0d548     0C 4E 85 F1 | 	sub	fp, #12
0d54c     18 CC B0 FD | 	call	#__system___float_mul
0d550     A7 FA 61 FC | 	wrlong	result1, fp
0d554     08 4E 05 F1 | 	add	fp, #8
0d558     A7 3C 68 FC | 	wrlong	#30, fp
0d55c     08 4E 85 F1 | 	sub	fp, #8
0d560     18 02 90 FD | 	jmp	#LR__1079
0d564                 | LR__1072
0d564                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0d564     08 4E 05 F1 | 	add	fp, #8
0d568     A7 1E 02 FB | 	rdlong	local01, fp
0d56c     08 4E 85 F1 | 	sub	fp, #8
0d570     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d574     14 4E 05 A1 |  if_e	add	fp, #20
0d578     A7 24 02 AB |  if_e	rdlong	local04, fp
0d57c     14 4E 85 A1 |  if_e	sub	fp, #20
0d580     12 23 02 A6 |  if_e	mov	local03, local04
0d584     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d588     20 00 90 5D |  if_ne	jmp	#LR__1073
0d58c     A7 20 02 FB | 	rdlong	local02, fp
0d590     0C 4E 05 F1 | 	add	fp, #12
0d594     A7 22 02 FB | 	rdlong	local03, fp
0d598     11 21 02 FD | 	qmul	local02, local03
0d59c     0C 4E 85 F1 | 	sub	fp, #12
0d5a0     18 1E 62 FD | 	getqx	local01
0d5a4     A7 1E 62 FC | 	wrlong	local01, fp
0d5a8     D0 01 90 FD | 	jmp	#LR__1079
0d5ac                 | LR__1073
0d5ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0d5ac     08 4E 05 F1 | 	add	fp, #8
0d5b0     A7 1E 02 FB | 	rdlong	local01, fp
0d5b4     08 4E 85 F1 | 	sub	fp, #8
0d5b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d5bc     14 4E 05 A1 |  if_e	add	fp, #20
0d5c0     A7 24 02 AB |  if_e	rdlong	local04, fp
0d5c4     14 4E 85 A1 |  if_e	sub	fp, #20
0d5c8     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0d5cc     20 00 90 5D |  if_ne	jmp	#LR__1074
0d5d0     A7 20 02 FB | 	rdlong	local02, fp
0d5d4     0C 4E 05 F1 | 	add	fp, #12
0d5d8     A7 22 02 FB | 	rdlong	local03, fp
0d5dc     11 21 02 FD | 	qmul	local02, local03
0d5e0     0C 4E 85 F1 | 	sub	fp, #12
0d5e4     18 1E 62 FD | 	getqx	local01
0d5e8     A7 1E 62 FC | 	wrlong	local01, fp
0d5ec     8C 01 90 FD | 	jmp	#LR__1079
0d5f0                 | LR__1074
0d5f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0d5f0     08 4E 05 F1 | 	add	fp, #8
0d5f4     A7 1E 02 FB | 	rdlong	local01, fp
0d5f8     08 4E 85 F1 | 	sub	fp, #8
0d5fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d600     14 4E 05 A1 |  if_e	add	fp, #20
0d604     A7 22 02 AB |  if_e	rdlong	local03, fp
0d608     14 4E 85 A1 |  if_e	sub	fp, #20
0d60c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d610     40 00 90 5D |  if_ne	jmp	#LR__1075
0d614     A7 12 02 FB | 	rdlong	arg01, fp
0d618     09 13 52 F6 | 	abs	arg01, arg01 wc
0d61c     1F 26 C6 C9 |  if_b	decod	local05, #31
0d620     00 26 06 36 |  if_ae	mov	local05, #0
0d624     14 C8 B0 FD | 	call	#__system___float_fromuns
0d628     13 FB 61 F5 | 	xor	result1, local05
0d62c     FD 12 02 F6 | 	mov	arg01, result1
0d630     0C 4E 05 F1 | 	add	fp, #12
0d634     A7 14 02 FB | 	rdlong	arg02, fp
0d638     0C 4E 85 F1 | 	sub	fp, #12
0d63c     28 CB B0 FD | 	call	#__system___float_mul
0d640     A7 FA 61 FC | 	wrlong	result1, fp
0d644     08 4E 05 F1 | 	add	fp, #8
0d648     A7 3C 68 FC | 	wrlong	#30, fp
0d64c     08 4E 85 F1 | 	sub	fp, #8
0d650     28 01 90 FD | 	jmp	#LR__1079
0d654                 | LR__1075
0d654                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0d654     08 4E 05 F1 | 	add	fp, #8
0d658     A7 1E 02 FB | 	rdlong	local01, fp
0d65c     08 4E 85 F1 | 	sub	fp, #8
0d660     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d664     14 4E 05 A1 |  if_e	add	fp, #20
0d668     A7 22 02 AB |  if_e	rdlong	local03, fp
0d66c     14 4E 85 A1 |  if_e	sub	fp, #20
0d670     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d674     28 00 90 5D |  if_ne	jmp	#LR__1076
0d678     A7 1E 02 FB | 	rdlong	local01, fp
0d67c     0C 4E 05 F1 | 	add	fp, #12
0d680     A7 12 02 FB | 	rdlong	arg01, fp
0d684     0C 4E 85 F1 | 	sub	fp, #12
0d688     B0 C7 B0 FD | 	call	#__system___float_fromuns
0d68c     FD 14 02 F6 | 	mov	arg02, result1
0d690     0F 13 02 F6 | 	mov	arg01, local01
0d694     D0 CA B0 FD | 	call	#__system___float_mul
0d698     A7 FA 61 FC | 	wrlong	result1, fp
0d69c     DC 00 90 FD | 	jmp	#LR__1079
0d6a0                 | LR__1076
0d6a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0d6a0     08 4E 05 F1 | 	add	fp, #8
0d6a4     A7 1E 02 FB | 	rdlong	local01, fp
0d6a8     08 4E 85 F1 | 	sub	fp, #8
0d6ac     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d6b0     14 4E 05 A1 |  if_e	add	fp, #20
0d6b4     A7 22 02 AB |  if_e	rdlong	local03, fp
0d6b8     14 4E 85 A1 |  if_e	sub	fp, #20
0d6bc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d6c0     38 00 90 5D |  if_ne	jmp	#LR__1077
0d6c4     A7 1E 02 FB | 	rdlong	local01, fp
0d6c8     0C 4E 05 F1 | 	add	fp, #12
0d6cc     A7 12 02 FB | 	rdlong	arg01, fp
0d6d0     0C 4E 85 F1 | 	sub	fp, #12
0d6d4     09 13 52 F6 | 	abs	arg01, arg01 wc
0d6d8     1F 26 C6 C9 |  if_b	decod	local05, #31
0d6dc     00 26 06 36 |  if_ae	mov	local05, #0
0d6e0     58 C7 B0 FD | 	call	#__system___float_fromuns
0d6e4     13 FB 61 F5 | 	xor	result1, local05
0d6e8     FD 14 02 F6 | 	mov	arg02, result1
0d6ec     0F 13 02 F6 | 	mov	arg01, local01
0d6f0     74 CA B0 FD | 	call	#__system___float_mul
0d6f4     A7 FA 61 FC | 	wrlong	result1, fp
0d6f8     80 00 90 FD | 	jmp	#LR__1079
0d6fc                 | LR__1077
0d6fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0d6fc     08 4E 05 F1 | 	add	fp, #8
0d700     A7 1E 02 FB | 	rdlong	local01, fp
0d704     08 4E 85 F1 | 	sub	fp, #8
0d708     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d70c     14 4E 05 A1 |  if_e	add	fp, #20
0d710     A7 22 02 AB |  if_e	rdlong	local03, fp
0d714     14 4E 85 A1 |  if_e	sub	fp, #20
0d718     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d71c     1C 00 90 5D |  if_ne	jmp	#LR__1078
0d720     A7 12 02 FB | 	rdlong	arg01, fp
0d724     0C 4E 05 F1 | 	add	fp, #12
0d728     A7 14 02 FB | 	rdlong	arg02, fp
0d72c     0C 4E 85 F1 | 	sub	fp, #12
0d730     34 CA B0 FD | 	call	#__system___float_mul
0d734     A7 FA 61 FC | 	wrlong	result1, fp
0d738     40 00 90 FD | 	jmp	#LR__1079
0d73c                 | LR__1078
0d73c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0d73c     08 4E 05 F1 | 	add	fp, #8
0d740     A7 1E 02 FB | 	rdlong	local01, fp
0d744     08 4E 85 F1 | 	sub	fp, #8
0d748     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d74c     14 4E 05 51 |  if_ne	add	fp, #20
0d750     A7 22 02 5B |  if_ne	rdlong	local03, fp
0d754     14 4E 85 51 |  if_ne	sub	fp, #20
0d758     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0d75c     A7 10 68 AC |  if_e	wrlong	#8, fp
0d760     08 4E 05 A1 |  if_e	add	fp, #8
0d764     A7 FE 69 AC |  if_e	wrlong	#255, fp
0d768     08 4E 85 A1 |  if_e	sub	fp, #8
0d76c     A7 12 68 5C |  if_ne	wrlong	#9, fp
0d770     08 4E 05 51 |  if_ne	add	fp, #8
0d774     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d778     08 4E 85 51 |  if_ne	sub	fp, #8
0d77c                 | LR__1079
0d77c     A7 12 02 F6 | 	mov	arg01, fp
0d780     A0 B4 BF FD | 	call	#_push
0d784     A7 F0 03 F6 | 	mov	ptra, fp
0d788     B2 00 A0 FD | 	call	#popregs_
0d78c                 | _do_mul_ret
0d78c     2D 00 64 FD | 	ret
0d790                 | 
0d790                 | ' 
0d790                 | ' sub do_div 
0d790                 | _do_div
0d790     01 4A 05 F6 | 	mov	COUNT_, #1
0d794     A8 00 A0 FD | 	call	#pushregs_
0d798     18 F0 07 F1 | 	add	ptra, #24
0d79c     EC B3 BF FD | 	call	#_pop
0d7a0     FD 62 02 F6 | 	mov	muldivb_, result1
0d7a4     FE 60 02 F6 | 	mov	muldiva_, result2
0d7a8     FF 1E 02 F6 | 	mov	local01, result3
0d7ac     0C 4E 05 F1 | 	add	fp, #12
0d7b0     A7 62 62 FC | 	wrlong	muldivb_, fp
0d7b4     04 4E 05 F1 | 	add	fp, #4
0d7b8     A7 60 62 FC | 	wrlong	muldiva_, fp
0d7bc     04 4E 05 F1 | 	add	fp, #4
0d7c0     A7 1E 62 FC | 	wrlong	local01, fp
0d7c4     14 4E 85 F1 | 	sub	fp, #20
0d7c8     C0 B3 BF FD | 	call	#_pop
0d7cc     A7 FA 61 FC | 	wrlong	result1, fp
0d7d0     04 4E 05 F1 | 	add	fp, #4
0d7d4     A7 FC 61 FC | 	wrlong	result2, fp
0d7d8     04 4E 05 F1 | 	add	fp, #4
0d7dc     A7 FE 61 FC | 	wrlong	result3, fp
0d7e0                 | ' 
0d7e0                 | ' t2=pop()
0d7e0                 | ' t1=pop()
0d7e0                 | ' 
0d7e0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0d7e0     08 4E 85 F1 | 	sub	fp, #8
0d7e4     1F FE 0D F2 | 	cmp	result3, #31 wz
0d7e8     14 4E 05 51 |  if_ne	add	fp, #20
0d7ec     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0d7f0     14 4E 85 51 |  if_ne	sub	fp, #20
0d7f4     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0d7f8     A7 14 68 AC |  if_e	wrlong	#10, fp
0d7fc     08 4E 05 A1 |  if_e	add	fp, #8
0d800     A7 FE 69 AC |  if_e	wrlong	#255, fp
0d804     08 4E 85 A1 |  if_e	sub	fp, #8
0d808     90 01 90 AD |  if_e	jmp	#LR__1086
0d80c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0d80c     08 4E 05 F1 | 	add	fp, #8
0d810     A7 62 02 FB | 	rdlong	muldivb_, fp
0d814     08 4E 85 F1 | 	sub	fp, #8
0d818     1E 62 0E F2 | 	cmp	muldivb_, #30 wz
0d81c     1C 00 90 5D |  if_ne	jmp	#LR__1080
0d820     08 4E 05 F1 | 	add	fp, #8
0d824     A7 38 68 FC | 	wrlong	#28, fp
0d828     08 4E 85 F1 | 	sub	fp, #8
0d82c     A7 12 02 FB | 	rdlong	arg01, fp
0d830     00 14 06 F6 | 	mov	arg02, #0
0d834     F8 CD B0 FD | 	call	#__system___float_tointeger
0d838     A7 FA 61 FC | 	wrlong	result1, fp
0d83c                 | LR__1080
0d83c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0d83c     14 4E 05 F1 | 	add	fp, #20
0d840     A7 62 02 FB | 	rdlong	muldivb_, fp
0d844     14 4E 85 F1 | 	sub	fp, #20
0d848     1E 62 0E F2 | 	cmp	muldivb_, #30 wz
0d84c     28 00 90 5D |  if_ne	jmp	#LR__1081
0d850     14 4E 05 F1 | 	add	fp, #20
0d854     A7 38 68 FC | 	wrlong	#28, fp
0d858     08 4E 85 F1 | 	sub	fp, #8
0d85c     A7 12 02 FB | 	rdlong	arg01, fp
0d860     0C 4E 85 F1 | 	sub	fp, #12
0d864     00 14 06 F6 | 	mov	arg02, #0
0d868     C4 CD B0 FD | 	call	#__system___float_tointeger
0d86c     0C 4E 05 F1 | 	add	fp, #12
0d870     A7 FA 61 FC | 	wrlong	result1, fp
0d874     0C 4E 85 F1 | 	sub	fp, #12
0d878                 | LR__1081
0d878                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0d878     08 4E 05 F1 | 	add	fp, #8
0d87c     A7 62 02 FB | 	rdlong	muldivb_, fp
0d880     08 4E 85 F1 | 	sub	fp, #8
0d884     1D 62 0E F2 | 	cmp	muldivb_, #29 wz
0d888     14 4E 05 A1 |  if_e	add	fp, #20
0d88c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0d890     14 4E 85 A1 |  if_e	sub	fp, #20
0d894     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0d898     20 00 90 5D |  if_ne	jmp	#LR__1082
0d89c     0C 4E 05 F1 | 	add	fp, #12
0d8a0     A7 1E 02 FB | 	rdlong	local01, fp
0d8a4     0C 4E 85 F1 | 	sub	fp, #12
0d8a8     A7 62 02 FB | 	rdlong	muldivb_, fp
0d8ac     0F 63 12 FD | 	qdiv	muldivb_, local01
0d8b0     18 1E 62 FD | 	getqx	local01
0d8b4     A7 1E 62 FC | 	wrlong	local01, fp
0d8b8     E0 00 90 FD | 	jmp	#LR__1086
0d8bc                 | LR__1082
0d8bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0d8bc     08 4E 05 F1 | 	add	fp, #8
0d8c0     A7 62 02 FB | 	rdlong	muldivb_, fp
0d8c4     08 4E 85 F1 | 	sub	fp, #8
0d8c8     1D 62 0E F2 | 	cmp	muldivb_, #29 wz
0d8cc     14 4E 05 A1 |  if_e	add	fp, #20
0d8d0     A7 1E 02 AB |  if_e	rdlong	local01, fp
0d8d4     14 4E 85 A1 |  if_e	sub	fp, #20
0d8d8     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0d8dc     2C 00 90 5D |  if_ne	jmp	#LR__1083
0d8e0     0C 4E 05 F1 | 	add	fp, #12
0d8e4     A7 1E 02 FB | 	rdlong	local01, fp
0d8e8     0C 4E 85 F1 | 	sub	fp, #12
0d8ec     A7 62 02 FB | 	rdlong	muldivb_, fp
0d8f0     0F 63 12 FD | 	qdiv	muldivb_, local01
0d8f4     18 1E 62 FD | 	getqx	local01
0d8f8     A7 1E 62 FC | 	wrlong	local01, fp
0d8fc     08 4E 05 F1 | 	add	fp, #8
0d900     A7 38 68 FC | 	wrlong	#28, fp
0d904     08 4E 85 F1 | 	sub	fp, #8
0d908     90 00 90 FD | 	jmp	#LR__1086
0d90c                 | LR__1083
0d90c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0d90c     08 4E 05 F1 | 	add	fp, #8
0d910     A7 62 02 FB | 	rdlong	muldivb_, fp
0d914     08 4E 85 F1 | 	sub	fp, #8
0d918     1C 62 0E F2 | 	cmp	muldivb_, #28 wz
0d91c     14 4E 05 A1 |  if_e	add	fp, #20
0d920     A7 1E 02 AB |  if_e	rdlong	local01, fp
0d924     14 4E 85 A1 |  if_e	sub	fp, #20
0d928     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0d92c     1C 00 90 5D |  if_ne	jmp	#LR__1084
0d930     A7 60 02 FB | 	rdlong	muldiva_, fp
0d934     0C 4E 05 F1 | 	add	fp, #12
0d938     A7 62 02 FB | 	rdlong	muldivb_, fp
0d93c     0C 4E 85 F1 | 	sub	fp, #12
0d940     BA 00 A0 FD | 	call	#divide_
0d944     A7 62 62 FC | 	wrlong	muldivb_, fp
0d948     50 00 90 FD | 	jmp	#LR__1086
0d94c                 | LR__1084
0d94c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0d94c     08 4E 05 F1 | 	add	fp, #8
0d950     A7 62 02 FB | 	rdlong	muldivb_, fp
0d954     08 4E 85 F1 | 	sub	fp, #8
0d958     1C 62 0E F2 | 	cmp	muldivb_, #28 wz
0d95c     14 4E 05 A1 |  if_e	add	fp, #20
0d960     A7 1E 02 AB |  if_e	rdlong	local01, fp
0d964     14 4E 85 A1 |  if_e	sub	fp, #20
0d968     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0d96c     1C 00 90 5D |  if_ne	jmp	#LR__1085
0d970     A7 60 02 FB | 	rdlong	muldiva_, fp
0d974     0C 4E 05 F1 | 	add	fp, #12
0d978     A7 62 02 FB | 	rdlong	muldivb_, fp
0d97c     0C 4E 85 F1 | 	sub	fp, #12
0d980     BA 00 A0 FD | 	call	#divide_
0d984     A7 62 62 FC | 	wrlong	muldivb_, fp
0d988     10 00 90 FD | 	jmp	#LR__1086
0d98c                 | LR__1085
0d98c     A7 16 68 FC | 	wrlong	#11, fp
0d990     08 4E 05 F1 | 	add	fp, #8
0d994     A7 FE 69 FC | 	wrlong	#255, fp
0d998     08 4E 85 F1 | 	sub	fp, #8
0d99c                 | LR__1086
0d99c     A7 12 02 F6 | 	mov	arg01, fp
0d9a0     80 B2 BF FD | 	call	#_push
0d9a4     A7 F0 03 F6 | 	mov	ptra, fp
0d9a8     B2 00 A0 FD | 	call	#popregs_
0d9ac                 | _do_div_ret
0d9ac     2D 00 64 FD | 	ret
0d9b0                 | 
0d9b0                 | ' 
0d9b0                 | ' sub do_fdiv 
0d9b0                 | _do_fdiv
0d9b0     02 4A 05 F6 | 	mov	COUNT_, #2
0d9b4     A8 00 A0 FD | 	call	#pushregs_
0d9b8     18 F0 07 F1 | 	add	ptra, #24
0d9bc     CC B1 BF FD | 	call	#_pop
0d9c0     FD 14 02 F6 | 	mov	arg02, result1
0d9c4     FE 12 02 F6 | 	mov	arg01, result2
0d9c8     FF 1E 02 F6 | 	mov	local01, result3
0d9cc     0C 4E 05 F1 | 	add	fp, #12
0d9d0     A7 14 62 FC | 	wrlong	arg02, fp
0d9d4     04 4E 05 F1 | 	add	fp, #4
0d9d8     A7 12 62 FC | 	wrlong	arg01, fp
0d9dc     04 4E 05 F1 | 	add	fp, #4
0d9e0     A7 1E 62 FC | 	wrlong	local01, fp
0d9e4     14 4E 85 F1 | 	sub	fp, #20
0d9e8     A0 B1 BF FD | 	call	#_pop
0d9ec     A7 FA 61 FC | 	wrlong	result1, fp
0d9f0     04 4E 05 F1 | 	add	fp, #4
0d9f4     A7 FC 61 FC | 	wrlong	result2, fp
0d9f8     04 4E 05 F1 | 	add	fp, #4
0d9fc     A7 FE 61 FC | 	wrlong	result3, fp
0da00                 | ' 
0da00                 | ' t2=pop()
0da00                 | ' t1=pop()
0da00                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0da00     08 4E 85 F1 | 	sub	fp, #8
0da04     1F FE 0D F2 | 	cmp	result3, #31 wz
0da08     14 4E 05 51 |  if_ne	add	fp, #20
0da0c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0da10     14 4E 85 51 |  if_ne	sub	fp, #20
0da14     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0da18     A7 14 68 AC |  if_e	wrlong	#10, fp
0da1c     08 4E 05 A1 |  if_e	add	fp, #8
0da20     A7 FE 69 AC |  if_e	wrlong	#255, fp
0da24     08 4E 85 A1 |  if_e	sub	fp, #8
0da28     38 01 90 AD |  if_e	jmp	#LR__1095
0da2c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0da2c     08 4E 05 F1 | 	add	fp, #8
0da30     A7 14 02 FB | 	rdlong	arg02, fp
0da34     08 4E 85 F1 | 	sub	fp, #8
0da38     1C 14 0E F2 | 	cmp	arg02, #28 wz
0da3c     28 00 90 5D |  if_ne	jmp	#LR__1090
0da40     08 4E 05 F1 | 	add	fp, #8
0da44     A7 3C 68 FC | 	wrlong	#30, fp
0da48     08 4E 85 F1 | 	sub	fp, #8
0da4c     A7 12 02 FB | 	rdlong	arg01, fp
0da50     09 13 52 F6 | 	abs	arg01, arg01 wc
0da54     1F 20 C6 C9 |  if_b	decod	local02, #31
0da58     00 20 06 36 |  if_ae	mov	local02, #0
0da5c     DC C3 B0 FD | 	call	#__system___float_fromuns
0da60     10 FB 61 F5 | 	xor	result1, local02
0da64     A7 FA 61 FC | 	wrlong	result1, fp
0da68                 | LR__1090
0da68                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0da68     08 4E 05 F1 | 	add	fp, #8
0da6c     A7 14 02 FB | 	rdlong	arg02, fp
0da70     08 4E 85 F1 | 	sub	fp, #8
0da74     1D 14 0E F2 | 	cmp	arg02, #29 wz
0da78     18 00 90 5D |  if_ne	jmp	#LR__1091
0da7c     08 4E 05 F1 | 	add	fp, #8
0da80     A7 3C 68 FC | 	wrlong	#30, fp
0da84     08 4E 85 F1 | 	sub	fp, #8
0da88     A7 12 02 FB | 	rdlong	arg01, fp
0da8c     AC C3 B0 FD | 	call	#__system___float_fromuns
0da90     A7 FA 61 FC | 	wrlong	result1, fp
0da94                 | LR__1091
0da94                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0da94     14 4E 05 F1 | 	add	fp, #20
0da98     A7 14 02 FB | 	rdlong	arg02, fp
0da9c     14 4E 85 F1 | 	sub	fp, #20
0daa0     1C 14 0E F2 | 	cmp	arg02, #28 wz
0daa4     34 00 90 5D |  if_ne	jmp	#LR__1092
0daa8     14 4E 05 F1 | 	add	fp, #20
0daac     A7 3C 68 FC | 	wrlong	#30, fp
0dab0     08 4E 85 F1 | 	sub	fp, #8
0dab4     A7 12 02 FB | 	rdlong	arg01, fp
0dab8     0C 4E 85 F1 | 	sub	fp, #12
0dabc     09 13 52 F6 | 	abs	arg01, arg01 wc
0dac0     1F 20 C6 C9 |  if_b	decod	local02, #31
0dac4     00 20 06 36 |  if_ae	mov	local02, #0
0dac8     70 C3 B0 FD | 	call	#__system___float_fromuns
0dacc     10 FB 61 F5 | 	xor	result1, local02
0dad0     0C 4E 05 F1 | 	add	fp, #12
0dad4     A7 FA 61 FC | 	wrlong	result1, fp
0dad8     0C 4E 85 F1 | 	sub	fp, #12
0dadc                 | LR__1092
0dadc                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0dadc     14 4E 05 F1 | 	add	fp, #20
0dae0     A7 14 02 FB | 	rdlong	arg02, fp
0dae4     14 4E 85 F1 | 	sub	fp, #20
0dae8     1D 14 0E F2 | 	cmp	arg02, #29 wz
0daec     24 00 90 5D |  if_ne	jmp	#LR__1093
0daf0     14 4E 05 F1 | 	add	fp, #20
0daf4     A7 3C 68 FC | 	wrlong	#30, fp
0daf8     08 4E 85 F1 | 	sub	fp, #8
0dafc     A7 12 02 FB | 	rdlong	arg01, fp
0db00     0C 4E 85 F1 | 	sub	fp, #12
0db04     34 C3 B0 FD | 	call	#__system___float_fromuns
0db08     0C 4E 05 F1 | 	add	fp, #12
0db0c     A7 FA 61 FC | 	wrlong	result1, fp
0db10     0C 4E 85 F1 | 	sub	fp, #12
0db14                 | LR__1093
0db14                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0db14     08 4E 05 F1 | 	add	fp, #8
0db18     A7 14 02 FB | 	rdlong	arg02, fp
0db1c     08 4E 85 F1 | 	sub	fp, #8
0db20     1E 14 0E F2 | 	cmp	arg02, #30 wz
0db24     14 4E 05 A1 |  if_e	add	fp, #20
0db28     A7 1E 02 AB |  if_e	rdlong	local01, fp
0db2c     14 4E 85 A1 |  if_e	sub	fp, #20
0db30     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0db34     1C 00 90 5D |  if_ne	jmp	#LR__1094
0db38     A7 12 02 FB | 	rdlong	arg01, fp
0db3c     0C 4E 05 F1 | 	add	fp, #12
0db40     A7 14 02 FB | 	rdlong	arg02, fp
0db44     0C 4E 85 F1 | 	sub	fp, #12
0db48     20 C8 B0 FD | 	call	#__system___float_div
0db4c     A7 FA 61 FC | 	wrlong	result1, fp
0db50     10 00 90 FD | 	jmp	#LR__1095
0db54                 | LR__1094
0db54     A7 16 68 FC | 	wrlong	#11, fp
0db58     08 4E 05 F1 | 	add	fp, #8
0db5c     A7 FE 69 FC | 	wrlong	#255, fp
0db60     08 4E 85 F1 | 	sub	fp, #8
0db64                 | LR__1095
0db64     A7 12 02 F6 | 	mov	arg01, fp
0db68     B8 B0 BF FD | 	call	#_push
0db6c     A7 F0 03 F6 | 	mov	ptra, fp
0db70     B2 00 A0 FD | 	call	#popregs_
0db74                 | _do_fdiv_ret
0db74     2D 00 64 FD | 	ret
0db78                 | 
0db78                 | ' 
0db78                 | ' 
0db78                 | ' sub do_mod 
0db78                 | _do_mod
0db78     01 4A 05 F6 | 	mov	COUNT_, #1
0db7c     A8 00 A0 FD | 	call	#pushregs_
0db80     18 F0 07 F1 | 	add	ptra, #24
0db84     04 B0 BF FD | 	call	#_pop
0db88     FD 62 02 F6 | 	mov	muldivb_, result1
0db8c     FE 60 02 F6 | 	mov	muldiva_, result2
0db90     FF 1E 02 F6 | 	mov	local01, result3
0db94     0C 4E 05 F1 | 	add	fp, #12
0db98     A7 62 62 FC | 	wrlong	muldivb_, fp
0db9c     04 4E 05 F1 | 	add	fp, #4
0dba0     A7 60 62 FC | 	wrlong	muldiva_, fp
0dba4     04 4E 05 F1 | 	add	fp, #4
0dba8     A7 1E 62 FC | 	wrlong	local01, fp
0dbac     14 4E 85 F1 | 	sub	fp, #20
0dbb0     D8 AF BF FD | 	call	#_pop
0dbb4     A7 FA 61 FC | 	wrlong	result1, fp
0dbb8     04 4E 05 F1 | 	add	fp, #4
0dbbc     A7 FC 61 FC | 	wrlong	result2, fp
0dbc0     04 4E 05 F1 | 	add	fp, #4
0dbc4     A7 FE 61 FC | 	wrlong	result3, fp
0dbc8                 | ' 
0dbc8                 | ' t2=pop()
0dbc8                 | ' t1=pop()
0dbc8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0dbc8     08 4E 85 F1 | 	sub	fp, #8
0dbcc     1F FE 0D F2 | 	cmp	result3, #31 wz
0dbd0     14 4E 05 51 |  if_ne	add	fp, #20
0dbd4     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0dbd8     14 4E 85 51 |  if_ne	sub	fp, #20
0dbdc     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0dbe0     A7 14 68 AC |  if_e	wrlong	#10, fp
0dbe4     08 4E 05 A1 |  if_e	add	fp, #8
0dbe8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0dbec     08 4E 85 A1 |  if_e	sub	fp, #8
0dbf0     90 01 90 AD |  if_e	jmp	#LR__1106
0dbf4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0dbf4     08 4E 05 F1 | 	add	fp, #8
0dbf8     A7 62 02 FB | 	rdlong	muldivb_, fp
0dbfc     08 4E 85 F1 | 	sub	fp, #8
0dc00     1E 62 0E F2 | 	cmp	muldivb_, #30 wz
0dc04     1C 00 90 5D |  if_ne	jmp	#LR__1100
0dc08     08 4E 05 F1 | 	add	fp, #8
0dc0c     A7 38 68 FC | 	wrlong	#28, fp
0dc10     08 4E 85 F1 | 	sub	fp, #8
0dc14     A7 12 02 FB | 	rdlong	arg01, fp
0dc18     00 14 06 F6 | 	mov	arg02, #0
0dc1c     10 CA B0 FD | 	call	#__system___float_tointeger
0dc20     A7 FA 61 FC | 	wrlong	result1, fp
0dc24                 | LR__1100
0dc24                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0dc24     14 4E 05 F1 | 	add	fp, #20
0dc28     A7 62 02 FB | 	rdlong	muldivb_, fp
0dc2c     14 4E 85 F1 | 	sub	fp, #20
0dc30     1E 62 0E F2 | 	cmp	muldivb_, #30 wz
0dc34     28 00 90 5D |  if_ne	jmp	#LR__1101
0dc38     14 4E 05 F1 | 	add	fp, #20
0dc3c     A7 38 68 FC | 	wrlong	#28, fp
0dc40     08 4E 85 F1 | 	sub	fp, #8
0dc44     A7 12 02 FB | 	rdlong	arg01, fp
0dc48     0C 4E 85 F1 | 	sub	fp, #12
0dc4c     00 14 06 F6 | 	mov	arg02, #0
0dc50     DC C9 B0 FD | 	call	#__system___float_tointeger
0dc54     0C 4E 05 F1 | 	add	fp, #12
0dc58     A7 FA 61 FC | 	wrlong	result1, fp
0dc5c     0C 4E 85 F1 | 	sub	fp, #12
0dc60                 | LR__1101
0dc60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0dc60     08 4E 05 F1 | 	add	fp, #8
0dc64     A7 62 02 FB | 	rdlong	muldivb_, fp
0dc68     08 4E 85 F1 | 	sub	fp, #8
0dc6c     1D 62 0E F2 | 	cmp	muldivb_, #29 wz
0dc70     14 4E 05 A1 |  if_e	add	fp, #20
0dc74     A7 1E 02 AB |  if_e	rdlong	local01, fp
0dc78     14 4E 85 A1 |  if_e	sub	fp, #20
0dc7c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0dc80     20 00 90 5D |  if_ne	jmp	#LR__1102
0dc84     0C 4E 05 F1 | 	add	fp, #12
0dc88     A7 1E 02 FB | 	rdlong	local01, fp
0dc8c     0C 4E 85 F1 | 	sub	fp, #12
0dc90     A7 62 02 FB | 	rdlong	muldivb_, fp
0dc94     0F 63 12 FD | 	qdiv	muldivb_, local01
0dc98     19 1E 62 FD | 	getqy	local01
0dc9c     A7 1E 62 FC | 	wrlong	local01, fp
0dca0     E0 00 90 FD | 	jmp	#LR__1106
0dca4                 | LR__1102
0dca4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0dca4     08 4E 05 F1 | 	add	fp, #8
0dca8     A7 62 02 FB | 	rdlong	muldivb_, fp
0dcac     08 4E 85 F1 | 	sub	fp, #8
0dcb0     1D 62 0E F2 | 	cmp	muldivb_, #29 wz
0dcb4     14 4E 05 A1 |  if_e	add	fp, #20
0dcb8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0dcbc     14 4E 85 A1 |  if_e	sub	fp, #20
0dcc0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0dcc4     2C 00 90 5D |  if_ne	jmp	#LR__1103
0dcc8     0C 4E 05 F1 | 	add	fp, #12
0dccc     A7 1E 02 FB | 	rdlong	local01, fp
0dcd0     0C 4E 85 F1 | 	sub	fp, #12
0dcd4     A7 62 02 FB | 	rdlong	muldivb_, fp
0dcd8     0F 63 12 FD | 	qdiv	muldivb_, local01
0dcdc     19 1E 62 FD | 	getqy	local01
0dce0     A7 1E 62 FC | 	wrlong	local01, fp
0dce4     08 4E 05 F1 | 	add	fp, #8
0dce8     A7 38 68 FC | 	wrlong	#28, fp
0dcec     08 4E 85 F1 | 	sub	fp, #8
0dcf0     90 00 90 FD | 	jmp	#LR__1106
0dcf4                 | LR__1103
0dcf4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0dcf4     08 4E 05 F1 | 	add	fp, #8
0dcf8     A7 62 02 FB | 	rdlong	muldivb_, fp
0dcfc     08 4E 85 F1 | 	sub	fp, #8
0dd00     1C 62 0E F2 | 	cmp	muldivb_, #28 wz
0dd04     14 4E 05 A1 |  if_e	add	fp, #20
0dd08     A7 1E 02 AB |  if_e	rdlong	local01, fp
0dd0c     14 4E 85 A1 |  if_e	sub	fp, #20
0dd10     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0dd14     1C 00 90 5D |  if_ne	jmp	#LR__1104
0dd18     A7 60 02 FB | 	rdlong	muldiva_, fp
0dd1c     0C 4E 05 F1 | 	add	fp, #12
0dd20     A7 62 02 FB | 	rdlong	muldivb_, fp
0dd24     0C 4E 85 F1 | 	sub	fp, #12
0dd28     BA 00 A0 FD | 	call	#divide_
0dd2c     A7 60 62 FC | 	wrlong	muldiva_, fp
0dd30     50 00 90 FD | 	jmp	#LR__1106
0dd34                 | LR__1104
0dd34                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0dd34     08 4E 05 F1 | 	add	fp, #8
0dd38     A7 62 02 FB | 	rdlong	muldivb_, fp
0dd3c     08 4E 85 F1 | 	sub	fp, #8
0dd40     1C 62 0E F2 | 	cmp	muldivb_, #28 wz
0dd44     14 4E 05 A1 |  if_e	add	fp, #20
0dd48     A7 1E 02 AB |  if_e	rdlong	local01, fp
0dd4c     14 4E 85 A1 |  if_e	sub	fp, #20
0dd50     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0dd54     1C 00 90 5D |  if_ne	jmp	#LR__1105
0dd58     A7 60 02 FB | 	rdlong	muldiva_, fp
0dd5c     0C 4E 05 F1 | 	add	fp, #12
0dd60     A7 62 02 FB | 	rdlong	muldivb_, fp
0dd64     0C 4E 85 F1 | 	sub	fp, #12
0dd68     BA 00 A0 FD | 	call	#divide_
0dd6c     A7 60 62 FC | 	wrlong	muldiva_, fp
0dd70     10 00 90 FD | 	jmp	#LR__1106
0dd74                 | LR__1105
0dd74     A7 16 68 FC | 	wrlong	#11, fp
0dd78     08 4E 05 F1 | 	add	fp, #8
0dd7c     A7 FE 69 FC | 	wrlong	#255, fp
0dd80     08 4E 85 F1 | 	sub	fp, #8
0dd84                 | LR__1106
0dd84     A7 12 02 F6 | 	mov	arg01, fp
0dd88     98 AE BF FD | 	call	#_push
0dd8c     A7 F0 03 F6 | 	mov	ptra, fp
0dd90     B2 00 A0 FD | 	call	#popregs_
0dd94                 | _do_mod_ret
0dd94     2D 00 64 FD | 	ret
0dd98                 | 
0dd98                 | ' 
0dd98                 | ' sub do_shl 
0dd98                 | _do_shl
0dd98     03 4A 05 F6 | 	mov	COUNT_, #3
0dd9c     A8 00 A0 FD | 	call	#pushregs_
0dda0     18 F0 07 F1 | 	add	ptra, #24
0dda4     E4 AD BF FD | 	call	#_pop
0dda8     FD 12 02 F6 | 	mov	arg01, result1
0ddac     FE 1E 02 F6 | 	mov	local01, result2
0ddb0     FF 20 02 F6 | 	mov	local02, result3
0ddb4     0C 4E 05 F1 | 	add	fp, #12
0ddb8     A7 12 62 FC | 	wrlong	arg01, fp
0ddbc     04 4E 05 F1 | 	add	fp, #4
0ddc0     A7 1E 62 FC | 	wrlong	local01, fp
0ddc4     04 4E 05 F1 | 	add	fp, #4
0ddc8     A7 20 62 FC | 	wrlong	local02, fp
0ddcc     14 4E 85 F1 | 	sub	fp, #20
0ddd0     B8 AD BF FD | 	call	#_pop
0ddd4     FF 22 02 F6 | 	mov	local03, result3
0ddd8     A7 FA 61 FC | 	wrlong	result1, fp
0dddc     04 4E 05 F1 | 	add	fp, #4
0dde0     A7 FC 61 FC | 	wrlong	result2, fp
0dde4     04 4E 05 F1 | 	add	fp, #4
0dde8     A7 22 62 FC | 	wrlong	local03, fp
0ddec                 | ' 
0ddec                 | ' t2=pop()
0ddec                 | ' t1=pop()
0ddec                 | ' 
0ddec                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0ddec     08 4E 85 F1 | 	sub	fp, #8
0ddf0     1C 22 0E F2 | 	cmp	local03, #28 wz
0ddf4     A7 22 02 AB |  if_e	rdlong	local03, fp
0ddf8     A7 22 62 AC |  if_e	wrlong	local03, fp
0ddfc     08 4E 05 A1 |  if_e	add	fp, #8
0de00     A7 3A 68 AC |  if_e	wrlong	#29, fp
0de04     08 4E 85 A1 |  if_e	sub	fp, #8
0de08                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0de08     14 4E 05 F1 | 	add	fp, #20
0de0c     A7 22 02 FB | 	rdlong	local03, fp
0de10     14 4E 85 F1 | 	sub	fp, #20
0de14     1C 22 0E F2 | 	cmp	local03, #28 wz
0de18     18 00 90 5D |  if_ne	jmp	#LR__1110
0de1c     0C 4E 05 F1 | 	add	fp, #12
0de20     A7 22 02 FB | 	rdlong	local03, fp
0de24     A7 22 62 FC | 	wrlong	local03, fp
0de28     08 4E 05 F1 | 	add	fp, #8
0de2c     A7 3A 68 FC | 	wrlong	#29, fp
0de30     14 4E 85 F1 | 	sub	fp, #20
0de34                 | LR__1110
0de34                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0de34     08 4E 05 F1 | 	add	fp, #8
0de38     A7 22 02 FB | 	rdlong	local03, fp
0de3c     08 4E 85 F1 | 	sub	fp, #8
0de40     1F 22 0E F2 | 	cmp	local03, #31 wz
0de44     14 4E 05 51 |  if_ne	add	fp, #20
0de48     A7 20 02 5B |  if_ne	rdlong	local02, fp
0de4c     14 4E 85 51 |  if_ne	sub	fp, #20
0de50     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0de54     08 4E 05 51 |  if_ne	add	fp, #8
0de58     A7 22 02 5B |  if_ne	rdlong	local03, fp
0de5c     08 4E 85 51 |  if_ne	sub	fp, #8
0de60     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0de64     14 4E 05 51 |  if_ne	add	fp, #20
0de68     14 4E 85 51 |  if_ne	sub	fp, #20
0de6c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0de70     A7 0C 68 AC |  if_e	wrlong	#6, fp
0de74     08 4E 05 A1 |  if_e	add	fp, #8
0de78     A7 FE 69 AC |  if_e	wrlong	#255, fp
0de7c     08 4E 85 A1 |  if_e	sub	fp, #8
0de80     18 00 90 AD |  if_e	jmp	#LR__1111
0de84     A7 22 02 FB | 	rdlong	local03, fp
0de88     0C 4E 05 F1 | 	add	fp, #12
0de8c     A7 1E 02 FB | 	rdlong	local01, fp
0de90     0C 4E 85 F1 | 	sub	fp, #12
0de94     0F 23 62 F0 | 	shl	local03, local01
0de98     A7 22 62 FC | 	wrlong	local03, fp
0de9c                 | LR__1111
0de9c     A7 12 02 F6 | 	mov	arg01, fp
0dea0     80 AD BF FD | 	call	#_push
0dea4     A7 F0 03 F6 | 	mov	ptra, fp
0dea8     B2 00 A0 FD | 	call	#popregs_
0deac                 | _do_shl_ret
0deac     2D 00 64 FD | 	ret
0deb0                 | 
0deb0                 | ' 
0deb0                 | ' sub do_shr 
0deb0                 | _do_shr
0deb0     03 4A 05 F6 | 	mov	COUNT_, #3
0deb4     A8 00 A0 FD | 	call	#pushregs_
0deb8     18 F0 07 F1 | 	add	ptra, #24
0debc     CC AC BF FD | 	call	#_pop
0dec0     FD 12 02 F6 | 	mov	arg01, result1
0dec4     FE 1E 02 F6 | 	mov	local01, result2
0dec8     FF 20 02 F6 | 	mov	local02, result3
0decc     0C 4E 05 F1 | 	add	fp, #12
0ded0     A7 12 62 FC | 	wrlong	arg01, fp
0ded4     04 4E 05 F1 | 	add	fp, #4
0ded8     A7 1E 62 FC | 	wrlong	local01, fp
0dedc     04 4E 05 F1 | 	add	fp, #4
0dee0     A7 20 62 FC | 	wrlong	local02, fp
0dee4     14 4E 85 F1 | 	sub	fp, #20
0dee8     A0 AC BF FD | 	call	#_pop
0deec     FF 22 02 F6 | 	mov	local03, result3
0def0     A7 FA 61 FC | 	wrlong	result1, fp
0def4     04 4E 05 F1 | 	add	fp, #4
0def8     A7 FC 61 FC | 	wrlong	result2, fp
0defc     04 4E 05 F1 | 	add	fp, #4
0df00     A7 22 62 FC | 	wrlong	local03, fp
0df04                 | ' t2=pop()
0df04                 | ' t1=pop()
0df04                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0df04     08 4E 85 F1 | 	sub	fp, #8
0df08     1C 22 0E F2 | 	cmp	local03, #28 wz
0df0c     A7 22 02 AB |  if_e	rdlong	local03, fp
0df10     A7 22 62 AC |  if_e	wrlong	local03, fp
0df14     08 4E 05 A1 |  if_e	add	fp, #8
0df18     A7 3A 68 AC |  if_e	wrlong	#29, fp
0df1c     08 4E 85 A1 |  if_e	sub	fp, #8
0df20                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0df20     14 4E 05 F1 | 	add	fp, #20
0df24     A7 22 02 FB | 	rdlong	local03, fp
0df28     14 4E 85 F1 | 	sub	fp, #20
0df2c     1C 22 0E F2 | 	cmp	local03, #28 wz
0df30     18 00 90 5D |  if_ne	jmp	#LR__1120
0df34     0C 4E 05 F1 | 	add	fp, #12
0df38     A7 22 02 FB | 	rdlong	local03, fp
0df3c     A7 22 62 FC | 	wrlong	local03, fp
0df40     08 4E 05 F1 | 	add	fp, #8
0df44     A7 3A 68 FC | 	wrlong	#29, fp
0df48     14 4E 85 F1 | 	sub	fp, #20
0df4c                 | LR__1120
0df4c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0df4c     08 4E 05 F1 | 	add	fp, #8
0df50     A7 22 02 FB | 	rdlong	local03, fp
0df54     08 4E 85 F1 | 	sub	fp, #8
0df58     1F 22 0E F2 | 	cmp	local03, #31 wz
0df5c     14 4E 05 51 |  if_ne	add	fp, #20
0df60     A7 20 02 5B |  if_ne	rdlong	local02, fp
0df64     14 4E 85 51 |  if_ne	sub	fp, #20
0df68     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0df6c     08 4E 05 51 |  if_ne	add	fp, #8
0df70     A7 22 02 5B |  if_ne	rdlong	local03, fp
0df74     08 4E 85 51 |  if_ne	sub	fp, #8
0df78     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0df7c     14 4E 05 51 |  if_ne	add	fp, #20
0df80     14 4E 85 51 |  if_ne	sub	fp, #20
0df84     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0df88     A7 0C 68 AC |  if_e	wrlong	#6, fp
0df8c     08 4E 05 A1 |  if_e	add	fp, #8
0df90     A7 FE 69 AC |  if_e	wrlong	#255, fp
0df94     08 4E 85 A1 |  if_e	sub	fp, #8
0df98     18 00 90 AD |  if_e	jmp	#LR__1121
0df9c     A7 22 02 FB | 	rdlong	local03, fp
0dfa0     0C 4E 05 F1 | 	add	fp, #12
0dfa4     A7 1E 02 FB | 	rdlong	local01, fp
0dfa8     0C 4E 85 F1 | 	sub	fp, #12
0dfac     0F 23 42 F0 | 	shr	local03, local01
0dfb0     A7 22 62 FC | 	wrlong	local03, fp
0dfb4                 | LR__1121
0dfb4     A7 12 02 F6 | 	mov	arg01, fp
0dfb8     68 AC BF FD | 	call	#_push
0dfbc     A7 F0 03 F6 | 	mov	ptra, fp
0dfc0     B2 00 A0 FD | 	call	#popregs_
0dfc4                 | _do_shr_ret
0dfc4     2D 00 64 FD | 	ret
0dfc8                 | 
0dfc8                 | ' 
0dfc8                 | ' sub do_power 
0dfc8                 | _do_power
0dfc8     02 4A 05 F6 | 	mov	COUNT_, #2
0dfcc     A8 00 A0 FD | 	call	#pushregs_
0dfd0     18 F0 07 F1 | 	add	ptra, #24
0dfd4     B4 AB BF FD | 	call	#_pop
0dfd8     FD 14 02 F6 | 	mov	arg02, result1
0dfdc     FE 12 02 F6 | 	mov	arg01, result2
0dfe0     FF 1E 02 F6 | 	mov	local01, result3
0dfe4     0C 4E 05 F1 | 	add	fp, #12
0dfe8     A7 14 62 FC | 	wrlong	arg02, fp
0dfec     04 4E 05 F1 | 	add	fp, #4
0dff0     A7 12 62 FC | 	wrlong	arg01, fp
0dff4     04 4E 05 F1 | 	add	fp, #4
0dff8     A7 1E 62 FC | 	wrlong	local01, fp
0dffc     14 4E 85 F1 | 	sub	fp, #20
0e000     88 AB BF FD | 	call	#_pop
0e004     A7 FA 61 FC | 	wrlong	result1, fp
0e008     04 4E 05 F1 | 	add	fp, #4
0e00c     A7 FC 61 FC | 	wrlong	result2, fp
0e010     04 4E 05 F1 | 	add	fp, #4
0e014     A7 FE 61 FC | 	wrlong	result3, fp
0e018                 | ' t2=pop()
0e018                 | ' t1=pop()
0e018                 | ' 
0e018                 | ' 
0e018                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0e018     08 4E 85 F1 | 	sub	fp, #8
0e01c     1F FE 0D F2 | 	cmp	result3, #31 wz
0e020     14 4E 05 51 |  if_ne	add	fp, #20
0e024     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e028     14 4E 85 51 |  if_ne	sub	fp, #20
0e02c     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0e030     A7 18 68 AC |  if_e	wrlong	#12, fp
0e034     08 4E 05 A1 |  if_e	add	fp, #8
0e038     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e03c     08 4E 85 A1 |  if_e	sub	fp, #8
0e040     38 01 90 AD |  if_e	jmp	#LR__1135
0e044                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0e044     08 4E 05 F1 | 	add	fp, #8
0e048     A7 14 02 FB | 	rdlong	arg02, fp
0e04c     08 4E 85 F1 | 	sub	fp, #8
0e050     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e054     28 00 90 5D |  if_ne	jmp	#LR__1130
0e058     08 4E 05 F1 | 	add	fp, #8
0e05c     A7 3C 68 FC | 	wrlong	#30, fp
0e060     08 4E 85 F1 | 	sub	fp, #8
0e064     A7 12 02 FB | 	rdlong	arg01, fp
0e068     09 13 52 F6 | 	abs	arg01, arg01 wc
0e06c     1F 20 C6 C9 |  if_b	decod	local02, #31
0e070     00 20 06 36 |  if_ae	mov	local02, #0
0e074     C4 BD B0 FD | 	call	#__system___float_fromuns
0e078     10 FB 61 F5 | 	xor	result1, local02
0e07c     A7 FA 61 FC | 	wrlong	result1, fp
0e080                 | LR__1130
0e080                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0e080     08 4E 05 F1 | 	add	fp, #8
0e084     A7 14 02 FB | 	rdlong	arg02, fp
0e088     08 4E 85 F1 | 	sub	fp, #8
0e08c     1D 14 0E F2 | 	cmp	arg02, #29 wz
0e090     18 00 90 5D |  if_ne	jmp	#LR__1131
0e094     08 4E 05 F1 | 	add	fp, #8
0e098     A7 3C 68 FC | 	wrlong	#30, fp
0e09c     08 4E 85 F1 | 	sub	fp, #8
0e0a0     A7 12 02 FB | 	rdlong	arg01, fp
0e0a4     94 BD B0 FD | 	call	#__system___float_fromuns
0e0a8     A7 FA 61 FC | 	wrlong	result1, fp
0e0ac                 | LR__1131
0e0ac                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0e0ac     14 4E 05 F1 | 	add	fp, #20
0e0b0     A7 14 02 FB | 	rdlong	arg02, fp
0e0b4     14 4E 85 F1 | 	sub	fp, #20
0e0b8     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e0bc     34 00 90 5D |  if_ne	jmp	#LR__1132
0e0c0     14 4E 05 F1 | 	add	fp, #20
0e0c4     A7 3C 68 FC | 	wrlong	#30, fp
0e0c8     08 4E 85 F1 | 	sub	fp, #8
0e0cc     A7 12 02 FB | 	rdlong	arg01, fp
0e0d0     0C 4E 85 F1 | 	sub	fp, #12
0e0d4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e0d8     1F 20 C6 C9 |  if_b	decod	local02, #31
0e0dc     00 20 06 36 |  if_ae	mov	local02, #0
0e0e0     58 BD B0 FD | 	call	#__system___float_fromuns
0e0e4     10 FB 61 F5 | 	xor	result1, local02
0e0e8     0C 4E 05 F1 | 	add	fp, #12
0e0ec     A7 FA 61 FC | 	wrlong	result1, fp
0e0f0     0C 4E 85 F1 | 	sub	fp, #12
0e0f4                 | LR__1132
0e0f4                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0e0f4     14 4E 05 F1 | 	add	fp, #20
0e0f8     A7 14 02 FB | 	rdlong	arg02, fp
0e0fc     14 4E 85 F1 | 	sub	fp, #20
0e100     1D 14 0E F2 | 	cmp	arg02, #29 wz
0e104     24 00 90 5D |  if_ne	jmp	#LR__1133
0e108     14 4E 05 F1 | 	add	fp, #20
0e10c     A7 3C 68 FC | 	wrlong	#30, fp
0e110     08 4E 85 F1 | 	sub	fp, #8
0e114     A7 12 02 FB | 	rdlong	arg01, fp
0e118     0C 4E 85 F1 | 	sub	fp, #12
0e11c     1C BD B0 FD | 	call	#__system___float_fromuns
0e120     0C 4E 05 F1 | 	add	fp, #12
0e124     A7 FA 61 FC | 	wrlong	result1, fp
0e128     0C 4E 85 F1 | 	sub	fp, #12
0e12c                 | LR__1133
0e12c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0e12c     08 4E 05 F1 | 	add	fp, #8
0e130     A7 14 02 FB | 	rdlong	arg02, fp
0e134     08 4E 85 F1 | 	sub	fp, #8
0e138     1E 14 0E F2 | 	cmp	arg02, #30 wz
0e13c     14 4E 05 A1 |  if_e	add	fp, #20
0e140     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e144     14 4E 85 A1 |  if_e	sub	fp, #20
0e148     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0e14c     1C 00 90 5D |  if_ne	jmp	#LR__1134
0e150     A7 12 02 FB | 	rdlong	arg01, fp
0e154     0C 4E 05 F1 | 	add	fp, #12
0e158     A7 14 02 FB | 	rdlong	arg02, fp
0e15c     0C 4E 85 F1 | 	sub	fp, #12
0e160     D8 CC B0 FD | 	call	#__system____builtin_powf
0e164     A7 FA 61 FC | 	wrlong	result1, fp
0e168     10 00 90 FD | 	jmp	#LR__1135
0e16c                 | LR__1134
0e16c     A7 1A 68 FC | 	wrlong	#13, fp
0e170     08 4E 05 F1 | 	add	fp, #8
0e174     A7 FE 69 FC | 	wrlong	#255, fp
0e178     08 4E 85 F1 | 	sub	fp, #8
0e17c                 | LR__1135
0e17c     A7 12 02 F6 | 	mov	arg01, fp
0e180     A0 AA BF FD | 	call	#_push
0e184     A7 F0 03 F6 | 	mov	ptra, fp
0e188     B2 00 A0 FD | 	call	#popregs_
0e18c                 | _do_power_ret
0e18c     2D 00 64 FD | 	ret
0e190                 | 
0e190                 | ' 
0e190                 | ' 
0e190                 | ' sub do_eq
0e190                 | _do_eq
0e190     05 4A 05 F6 | 	mov	COUNT_, #5
0e194     A8 00 A0 FD | 	call	#pushregs_
0e198     18 F0 07 F1 | 	add	ptra, #24
0e19c     EC A9 BF FD | 	call	#_pop
0e1a0     FD 1E 02 F6 | 	mov	local01, result1
0e1a4     FE 20 02 F6 | 	mov	local02, result2
0e1a8     FF 22 02 F6 | 	mov	local03, result3
0e1ac     0C 4E 05 F1 | 	add	fp, #12
0e1b0     A7 1E 62 FC | 	wrlong	local01, fp
0e1b4     04 4E 05 F1 | 	add	fp, #4
0e1b8     A7 20 62 FC | 	wrlong	local02, fp
0e1bc     04 4E 05 F1 | 	add	fp, #4
0e1c0     A7 22 62 FC | 	wrlong	local03, fp
0e1c4     14 4E 85 F1 | 	sub	fp, #20
0e1c8     C0 A9 BF FD | 	call	#_pop
0e1cc     FF 22 02 F6 | 	mov	local03, result3
0e1d0     A7 FA 61 FC | 	wrlong	result1, fp
0e1d4     04 4E 05 F1 | 	add	fp, #4
0e1d8     A7 FC 61 FC | 	wrlong	result2, fp
0e1dc     04 4E 05 F1 | 	add	fp, #4
0e1e0     A7 22 62 FC | 	wrlong	local03, fp
0e1e4                 | ' t2=pop()
0e1e4                 | ' t1=pop()
0e1e4                 | ' 
0e1e4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0e1e4     08 4E 85 F1 | 	sub	fp, #8
0e1e8     1F 22 0E F2 | 	cmp	local03, #31 wz
0e1ec     14 4E 05 A1 |  if_e	add	fp, #20
0e1f0     A7 24 02 AB |  if_e	rdlong	local04, fp
0e1f4     14 4E 85 A1 |  if_e	sub	fp, #20
0e1f8     12 23 02 A6 |  if_e	mov	local03, local04
0e1fc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0e200     28 00 90 5D |  if_ne	jmp	#LR__1140
0e204     00 1E 06 F6 | 	mov	local01, #0
0e208     A7 12 02 FB | 	rdlong	arg01, fp
0e20c     0C 4E 05 F1 | 	add	fp, #12
0e210     A7 14 02 FB | 	rdlong	arg02, fp
0e214     0C 4E 85 F1 | 	sub	fp, #12
0e218     64 96 B0 FD | 	call	#__system___string_cmp
0e21c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e220     00 1E 26 A6 |  if_e	not	local01, #0
0e224     A7 1E 62 FC | 	wrlong	local01, fp
0e228     1C 04 90 FD | 	jmp	#LR__1153
0e22c                 | LR__1140
0e22c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0e22c     08 4E 05 F1 | 	add	fp, #8
0e230     A7 1E 02 FB | 	rdlong	local01, fp
0e234     08 4E 85 F1 | 	sub	fp, #8
0e238     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e23c     14 4E 05 A1 |  if_e	add	fp, #20
0e240     A7 24 02 AB |  if_e	rdlong	local04, fp
0e244     14 4E 85 A1 |  if_e	sub	fp, #20
0e248     12 23 02 A6 |  if_e	mov	local03, local04
0e24c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e250     2C 00 90 5D |  if_ne	jmp	#LR__1141
0e254     00 1E 06 F6 | 	mov	local01, #0
0e258     A7 12 02 FB | 	rdlong	arg01, fp
0e25c     0C 4E 05 F1 | 	add	fp, #12
0e260     A7 14 02 FB | 	rdlong	arg02, fp
0e264     0C 4E 85 F1 | 	sub	fp, #12
0e268     01 16 06 F6 | 	mov	arg03, #1
0e26c     2C C3 B0 FD | 	call	#__system___float_cmp
0e270     00 FA 0D F2 | 	cmp	result1, #0 wz
0e274     00 1E 26 A6 |  if_e	not	local01, #0
0e278     A7 1E 62 FC | 	wrlong	local01, fp
0e27c     C8 03 90 FD | 	jmp	#LR__1153
0e280                 | LR__1141
0e280                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0e280     08 4E 05 F1 | 	add	fp, #8
0e284     A7 1E 02 FB | 	rdlong	local01, fp
0e288     08 4E 85 F1 | 	sub	fp, #8
0e28c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e290     14 4E 05 A1 |  if_e	add	fp, #20
0e294     A7 24 02 AB |  if_e	rdlong	local04, fp
0e298     14 4E 85 A1 |  if_e	sub	fp, #20
0e29c     12 23 02 A6 |  if_e	mov	local03, local04
0e2a0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e2a4     48 00 90 5D |  if_ne	jmp	#LR__1142
0e2a8     00 1E 06 F6 | 	mov	local01, #0
0e2ac     A7 20 02 FB | 	rdlong	local02, fp
0e2b0     0C 4E 05 F1 | 	add	fp, #12
0e2b4     A7 12 02 FB | 	rdlong	arg01, fp
0e2b8     0C 4E 85 F1 | 	sub	fp, #12
0e2bc     09 13 52 F6 | 	abs	arg01, arg01 wc
0e2c0     1F 26 C6 C9 |  if_b	decod	local05, #31
0e2c4     00 26 06 36 |  if_ae	mov	local05, #0
0e2c8     70 BB B0 FD | 	call	#__system___float_fromuns
0e2cc     13 FB 61 F5 | 	xor	result1, local05
0e2d0     FD 14 02 F6 | 	mov	arg02, result1
0e2d4     10 13 02 F6 | 	mov	arg01, local02
0e2d8     01 16 06 F6 | 	mov	arg03, #1
0e2dc     BC C2 B0 FD | 	call	#__system___float_cmp
0e2e0     00 FA 0D F2 | 	cmp	result1, #0 wz
0e2e4     00 1E 26 A6 |  if_e	not	local01, #0
0e2e8     A7 1E 62 FC | 	wrlong	local01, fp
0e2ec     58 03 90 FD | 	jmp	#LR__1153
0e2f0                 | LR__1142
0e2f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0e2f0     08 4E 05 F1 | 	add	fp, #8
0e2f4     A7 1E 02 FB | 	rdlong	local01, fp
0e2f8     08 4E 85 F1 | 	sub	fp, #8
0e2fc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e300     14 4E 05 A1 |  if_e	add	fp, #20
0e304     A7 24 02 AB |  if_e	rdlong	local04, fp
0e308     14 4E 85 A1 |  if_e	sub	fp, #20
0e30c     12 23 02 A6 |  if_e	mov	local03, local04
0e310     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e314     38 00 90 5D |  if_ne	jmp	#LR__1143
0e318     00 1E 06 F6 | 	mov	local01, #0
0e31c     A7 20 02 FB | 	rdlong	local02, fp
0e320     0C 4E 05 F1 | 	add	fp, #12
0e324     A7 12 02 FB | 	rdlong	arg01, fp
0e328     0C 4E 85 F1 | 	sub	fp, #12
0e32c     0C BB B0 FD | 	call	#__system___float_fromuns
0e330     FD 14 02 F6 | 	mov	arg02, result1
0e334     10 13 02 F6 | 	mov	arg01, local02
0e338     01 16 06 F6 | 	mov	arg03, #1
0e33c     5C C2 B0 FD | 	call	#__system___float_cmp
0e340     00 FA 0D F2 | 	cmp	result1, #0 wz
0e344     00 1E 26 A6 |  if_e	not	local01, #0
0e348     A7 1E 62 FC | 	wrlong	local01, fp
0e34c     F8 02 90 FD | 	jmp	#LR__1153
0e350                 | LR__1143
0e350                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0e350     08 4E 05 F1 | 	add	fp, #8
0e354     A7 1E 02 FB | 	rdlong	local01, fp
0e358     08 4E 85 F1 | 	sub	fp, #8
0e35c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e360     14 4E 05 A1 |  if_e	add	fp, #20
0e364     A7 24 02 AB |  if_e	rdlong	local04, fp
0e368     14 4E 85 A1 |  if_e	sub	fp, #20
0e36c     12 23 02 A6 |  if_e	mov	local03, local04
0e370     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e374     44 00 90 5D |  if_ne	jmp	#LR__1144
0e378     00 1E 06 F6 | 	mov	local01, #0
0e37c     A7 12 02 FB | 	rdlong	arg01, fp
0e380     09 13 52 F6 | 	abs	arg01, arg01 wc
0e384     1F 26 C6 C9 |  if_b	decod	local05, #31
0e388     00 26 06 36 |  if_ae	mov	local05, #0
0e38c     AC BA B0 FD | 	call	#__system___float_fromuns
0e390     13 FB 61 F5 | 	xor	result1, local05
0e394     FD 12 02 F6 | 	mov	arg01, result1
0e398     0C 4E 05 F1 | 	add	fp, #12
0e39c     A7 14 02 FB | 	rdlong	arg02, fp
0e3a0     0C 4E 85 F1 | 	sub	fp, #12
0e3a4     01 16 06 F6 | 	mov	arg03, #1
0e3a8     F0 C1 B0 FD | 	call	#__system___float_cmp
0e3ac     00 FA 0D F2 | 	cmp	result1, #0 wz
0e3b0     00 1E 26 A6 |  if_e	not	local01, #0
0e3b4     A7 1E 62 FC | 	wrlong	local01, fp
0e3b8     8C 02 90 FD | 	jmp	#LR__1153
0e3bc                 | LR__1144
0e3bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0e3bc     08 4E 05 F1 | 	add	fp, #8
0e3c0     A7 1E 02 FB | 	rdlong	local01, fp
0e3c4     08 4E 85 F1 | 	sub	fp, #8
0e3c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e3cc     14 4E 05 A1 |  if_e	add	fp, #20
0e3d0     A7 24 02 AB |  if_e	rdlong	local04, fp
0e3d4     14 4E 85 A1 |  if_e	sub	fp, #20
0e3d8     12 23 02 A6 |  if_e	mov	local03, local04
0e3dc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e3e0     24 00 90 5D |  if_ne	jmp	#LR__1145
0e3e4     00 1E 06 F6 | 	mov	local01, #0
0e3e8     A7 20 02 FB | 	rdlong	local02, fp
0e3ec     0C 4E 05 F1 | 	add	fp, #12
0e3f0     A7 22 02 FB | 	rdlong	local03, fp
0e3f4     0C 4E 85 F1 | 	sub	fp, #12
0e3f8     11 21 0A F2 | 	cmp	local02, local03 wz
0e3fc     01 1E 66 A6 |  if_e	neg	local01, #1
0e400     A7 1E 62 FC | 	wrlong	local01, fp
0e404     40 02 90 FD | 	jmp	#LR__1153
0e408                 | LR__1145
0e408                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0e408     08 4E 05 F1 | 	add	fp, #8
0e40c     A7 1E 02 FB | 	rdlong	local01, fp
0e410     08 4E 85 F1 | 	sub	fp, #8
0e414     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e418     14 4E 05 A1 |  if_e	add	fp, #20
0e41c     A7 24 02 AB |  if_e	rdlong	local04, fp
0e420     14 4E 85 A1 |  if_e	sub	fp, #20
0e424     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0e428     24 00 90 5D |  if_ne	jmp	#LR__1146
0e42c     00 1E 06 F6 | 	mov	local01, #0
0e430     A7 20 02 FB | 	rdlong	local02, fp
0e434     0C 4E 05 F1 | 	add	fp, #12
0e438     A7 22 02 FB | 	rdlong	local03, fp
0e43c     0C 4E 85 F1 | 	sub	fp, #12
0e440     11 21 0A F2 | 	cmp	local02, local03 wz
0e444     01 1E 66 A6 |  if_e	neg	local01, #1
0e448     A7 1E 62 FC | 	wrlong	local01, fp
0e44c     F8 01 90 FD | 	jmp	#LR__1153
0e450                 | LR__1146
0e450                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0e450     08 4E 05 F1 | 	add	fp, #8
0e454     A7 1E 02 FB | 	rdlong	local01, fp
0e458     08 4E 85 F1 | 	sub	fp, #8
0e45c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e460     14 4E 05 A1 |  if_e	add	fp, #20
0e464     A7 22 02 AB |  if_e	rdlong	local03, fp
0e468     14 4E 85 A1 |  if_e	sub	fp, #20
0e46c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e470     34 00 90 5D |  if_ne	jmp	#LR__1147
0e474     00 1E 06 F6 | 	mov	local01, #0
0e478     A7 12 02 FB | 	rdlong	arg01, fp
0e47c     BC B9 B0 FD | 	call	#__system___float_fromuns
0e480     FD 12 02 F6 | 	mov	arg01, result1
0e484     0C 4E 05 F1 | 	add	fp, #12
0e488     A7 14 02 FB | 	rdlong	arg02, fp
0e48c     0C 4E 85 F1 | 	sub	fp, #12
0e490     01 16 06 F6 | 	mov	arg03, #1
0e494     04 C1 B0 FD | 	call	#__system___float_cmp
0e498     00 FA 0D F2 | 	cmp	result1, #0 wz
0e49c     00 1E 26 A6 |  if_e	not	local01, #0
0e4a0     A7 1E 62 FC | 	wrlong	local01, fp
0e4a4     A0 01 90 FD | 	jmp	#LR__1153
0e4a8                 | LR__1147
0e4a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0e4a8     08 4E 05 F1 | 	add	fp, #8
0e4ac     A7 1E 02 FB | 	rdlong	local01, fp
0e4b0     08 4E 85 F1 | 	sub	fp, #8
0e4b4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e4b8     14 4E 05 A1 |  if_e	add	fp, #20
0e4bc     A7 22 02 AB |  if_e	rdlong	local03, fp
0e4c0     14 4E 85 A1 |  if_e	sub	fp, #20
0e4c4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e4c8     24 00 90 5D |  if_ne	jmp	#LR__1148
0e4cc     00 1E 06 F6 | 	mov	local01, #0
0e4d0     A7 20 02 FB | 	rdlong	local02, fp
0e4d4     0C 4E 05 F1 | 	add	fp, #12
0e4d8     A7 22 02 FB | 	rdlong	local03, fp
0e4dc     0C 4E 85 F1 | 	sub	fp, #12
0e4e0     11 21 0A F2 | 	cmp	local02, local03 wz
0e4e4     01 1E 66 A6 |  if_e	neg	local01, #1
0e4e8     A7 1E 62 FC | 	wrlong	local01, fp
0e4ec     58 01 90 FD | 	jmp	#LR__1153
0e4f0                 | LR__1148
0e4f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0e4f0     08 4E 05 F1 | 	add	fp, #8
0e4f4     A7 1E 02 FB | 	rdlong	local01, fp
0e4f8     08 4E 85 F1 | 	sub	fp, #8
0e4fc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e500     14 4E 05 A1 |  if_e	add	fp, #20
0e504     A7 22 02 AB |  if_e	rdlong	local03, fp
0e508     14 4E 85 A1 |  if_e	sub	fp, #20
0e50c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e510     24 00 90 5D |  if_ne	jmp	#LR__1149
0e514     00 1E 06 F6 | 	mov	local01, #0
0e518     A7 20 02 FB | 	rdlong	local02, fp
0e51c     0C 4E 05 F1 | 	add	fp, #12
0e520     A7 22 02 FB | 	rdlong	local03, fp
0e524     0C 4E 85 F1 | 	sub	fp, #12
0e528     11 21 0A F2 | 	cmp	local02, local03 wz
0e52c     01 1E 66 A6 |  if_e	neg	local01, #1
0e530     A7 1E 62 FC | 	wrlong	local01, fp
0e534     10 01 90 FD | 	jmp	#LR__1153
0e538                 | LR__1149
0e538                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
0e538     08 4E 05 F1 | 	add	fp, #8
0e53c     A7 1E 02 FB | 	rdlong	local01, fp
0e540     08 4E 85 F1 | 	sub	fp, #8
0e544     2B 1E 0E F2 | 	cmp	local01, #43 wz
0e548     14 4E 05 A1 |  if_e	add	fp, #20
0e54c     A7 22 02 AB |  if_e	rdlong	local03, fp
0e550     14 4E 85 A1 |  if_e	sub	fp, #20
0e554     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0e558     30 00 90 5D |  if_ne	jmp	#LR__1150
0e55c     00 1E 06 F6 | 	mov	local01, #0
0e560     A7 12 02 FB | 	rdlong	arg01, fp
0e564     2C D7 BF FD | 	call	#_convertstring
0e568     FD 12 02 F6 | 	mov	arg01, result1
0e56c     0C 4E 05 F1 | 	add	fp, #12
0e570     A7 14 02 FB | 	rdlong	arg02, fp
0e574     0C 4E 85 F1 | 	sub	fp, #12
0e578     04 93 B0 FD | 	call	#__system___string_cmp
0e57c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e580     00 1E 26 A6 |  if_e	not	local01, #0
0e584     A7 1E 62 FC | 	wrlong	local01, fp
0e588     BC 00 90 FD | 	jmp	#LR__1153
0e58c                 | LR__1150
0e58c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
0e58c     08 4E 05 F1 | 	add	fp, #8
0e590     A7 1E 02 FB | 	rdlong	local01, fp
0e594     08 4E 85 F1 | 	sub	fp, #8
0e598     1F 1E 0E F2 | 	cmp	local01, #31 wz
0e59c     14 4E 05 A1 |  if_e	add	fp, #20
0e5a0     A7 22 02 AB |  if_e	rdlong	local03, fp
0e5a4     14 4E 85 A1 |  if_e	sub	fp, #20
0e5a8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0e5ac     34 00 90 5D |  if_ne	jmp	#LR__1151
0e5b0     00 1E 06 F6 | 	mov	local01, #0
0e5b4     A7 20 02 FB | 	rdlong	local02, fp
0e5b8     0C 4E 05 F1 | 	add	fp, #12
0e5bc     A7 12 02 FB | 	rdlong	arg01, fp
0e5c0     0C 4E 85 F1 | 	sub	fp, #12
0e5c4     CC D6 BF FD | 	call	#_convertstring
0e5c8     FD 14 02 F6 | 	mov	arg02, result1
0e5cc     10 13 02 F6 | 	mov	arg01, local02
0e5d0     AC 92 B0 FD | 	call	#__system___string_cmp
0e5d4     00 FA 0D F2 | 	cmp	result1, #0 wz
0e5d8     00 1E 26 A6 |  if_e	not	local01, #0
0e5dc     A7 1E 62 FC | 	wrlong	local01, fp
0e5e0     64 00 90 FD | 	jmp	#LR__1153
0e5e4                 | LR__1151
0e5e4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
0e5e4     08 4E 05 F1 | 	add	fp, #8
0e5e8     A7 1E 02 FB | 	rdlong	local01, fp
0e5ec     08 4E 85 F1 | 	sub	fp, #8
0e5f0     2B 1E 0E F2 | 	cmp	local01, #43 wz
0e5f4     14 4E 05 A1 |  if_e	add	fp, #20
0e5f8     A7 22 02 AB |  if_e	rdlong	local03, fp
0e5fc     14 4E 85 A1 |  if_e	sub	fp, #20
0e600     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0e604     3C 00 90 5D |  if_ne	jmp	#LR__1152
0e608     00 1E 06 F6 | 	mov	local01, #0
0e60c     A7 12 02 FB | 	rdlong	arg01, fp
0e610     80 D6 BF FD | 	call	#_convertstring
0e614     FD 20 02 F6 | 	mov	local02, result1
0e618     0C 4E 05 F1 | 	add	fp, #12
0e61c     A7 12 02 FB | 	rdlong	arg01, fp
0e620     0C 4E 85 F1 | 	sub	fp, #12
0e624     6C D6 BF FD | 	call	#_convertstring
0e628     FD 14 02 F6 | 	mov	arg02, result1
0e62c     10 13 02 F6 | 	mov	arg01, local02
0e630     4C 92 B0 FD | 	call	#__system___string_cmp
0e634     00 FA 0D F2 | 	cmp	result1, #0 wz
0e638     00 1E 26 A6 |  if_e	not	local01, #0
0e63c     A7 1E 62 FC | 	wrlong	local01, fp
0e640     04 00 90 FD | 	jmp	#LR__1153
0e644                 | LR__1152
0e644     A7 00 68 FC | 	wrlong	#0, fp
0e648                 | LR__1153
0e648     08 4E 05 F1 | 	add	fp, #8
0e64c     A7 38 68 FC | 	wrlong	#28, fp
0e650     08 4E 85 F1 | 	sub	fp, #8
0e654     A7 12 02 F6 | 	mov	arg01, fp
0e658     C8 A5 BF FD | 	call	#_push
0e65c     A7 F0 03 F6 | 	mov	ptra, fp
0e660     B2 00 A0 FD | 	call	#popregs_
0e664                 | _do_eq_ret
0e664     2D 00 64 FD | 	ret
0e668                 | 
0e668                 | ' 
0e668                 | ' sub do_gt
0e668                 | _do_gt
0e668     05 4A 05 F6 | 	mov	COUNT_, #5
0e66c     A8 00 A0 FD | 	call	#pushregs_
0e670     18 F0 07 F1 | 	add	ptra, #24
0e674     14 A5 BF FD | 	call	#_pop
0e678     FD 1E 02 F6 | 	mov	local01, result1
0e67c     FE 20 02 F6 | 	mov	local02, result2
0e680     FF 22 02 F6 | 	mov	local03, result3
0e684     0C 4E 05 F1 | 	add	fp, #12
0e688     A7 1E 62 FC | 	wrlong	local01, fp
0e68c     04 4E 05 F1 | 	add	fp, #4
0e690     A7 20 62 FC | 	wrlong	local02, fp
0e694     04 4E 05 F1 | 	add	fp, #4
0e698     A7 22 62 FC | 	wrlong	local03, fp
0e69c     14 4E 85 F1 | 	sub	fp, #20
0e6a0     E8 A4 BF FD | 	call	#_pop
0e6a4     FF 22 02 F6 | 	mov	local03, result3
0e6a8     A7 FA 61 FC | 	wrlong	result1, fp
0e6ac     04 4E 05 F1 | 	add	fp, #4
0e6b0     A7 FC 61 FC | 	wrlong	result2, fp
0e6b4     04 4E 05 F1 | 	add	fp, #4
0e6b8     A7 22 62 FC | 	wrlong	local03, fp
0e6bc                 | ' t2=pop()
0e6bc                 | ' t1=pop()
0e6bc                 | ' 
0e6bc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0e6bc     08 4E 85 F1 | 	sub	fp, #8
0e6c0     1F 22 0E F2 | 	cmp	local03, #31 wz
0e6c4     14 4E 05 A1 |  if_e	add	fp, #20
0e6c8     A7 24 02 AB |  if_e	rdlong	local04, fp
0e6cc     14 4E 85 A1 |  if_e	sub	fp, #20
0e6d0     12 23 02 A6 |  if_e	mov	local03, local04
0e6d4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0e6d8     28 00 90 5D |  if_ne	jmp	#LR__1160
0e6dc     00 1E 06 F6 | 	mov	local01, #0
0e6e0     A7 12 02 FB | 	rdlong	arg01, fp
0e6e4     0C 4E 05 F1 | 	add	fp, #12
0e6e8     A7 14 02 FB | 	rdlong	arg02, fp
0e6ec     0C 4E 85 F1 | 	sub	fp, #12
0e6f0     8C 91 B0 FD | 	call	#__system___string_cmp
0e6f4     01 FA 55 F2 | 	cmps	result1, #1 wc
0e6f8     00 1E 26 36 |  if_ae	not	local01, #0
0e6fc     A7 1E 62 FC | 	wrlong	local01, fp
0e700     1C 04 90 FD | 	jmp	#LR__1173
0e704                 | LR__1160
0e704                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0e704     08 4E 05 F1 | 	add	fp, #8
0e708     A7 1E 02 FB | 	rdlong	local01, fp
0e70c     08 4E 85 F1 | 	sub	fp, #8
0e710     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e714     14 4E 05 A1 |  if_e	add	fp, #20
0e718     A7 24 02 AB |  if_e	rdlong	local04, fp
0e71c     14 4E 85 A1 |  if_e	sub	fp, #20
0e720     12 23 02 A6 |  if_e	mov	local03, local04
0e724     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e728     2C 00 90 5D |  if_ne	jmp	#LR__1161
0e72c     00 1E 06 F6 | 	mov	local01, #0
0e730     A7 12 02 FB | 	rdlong	arg01, fp
0e734     0C 4E 05 F1 | 	add	fp, #12
0e738     A7 14 02 FB | 	rdlong	arg02, fp
0e73c     0C 4E 85 F1 | 	sub	fp, #12
0e740     01 16 66 F6 | 	neg	arg03, #1
0e744     54 BE B0 FD | 	call	#__system___float_cmp
0e748     01 FA 55 F2 | 	cmps	result1, #1 wc
0e74c     00 1E 26 36 |  if_ae	not	local01, #0
0e750     A7 1E 62 FC | 	wrlong	local01, fp
0e754     C8 03 90 FD | 	jmp	#LR__1173
0e758                 | LR__1161
0e758                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0e758     08 4E 05 F1 | 	add	fp, #8
0e75c     A7 1E 02 FB | 	rdlong	local01, fp
0e760     08 4E 85 F1 | 	sub	fp, #8
0e764     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e768     14 4E 05 A1 |  if_e	add	fp, #20
0e76c     A7 24 02 AB |  if_e	rdlong	local04, fp
0e770     14 4E 85 A1 |  if_e	sub	fp, #20
0e774     12 23 02 A6 |  if_e	mov	local03, local04
0e778     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e77c     48 00 90 5D |  if_ne	jmp	#LR__1162
0e780     00 1E 06 F6 | 	mov	local01, #0
0e784     A7 20 02 FB | 	rdlong	local02, fp
0e788     0C 4E 05 F1 | 	add	fp, #12
0e78c     A7 12 02 FB | 	rdlong	arg01, fp
0e790     0C 4E 85 F1 | 	sub	fp, #12
0e794     09 13 52 F6 | 	abs	arg01, arg01 wc
0e798     1F 26 C6 C9 |  if_b	decod	local05, #31
0e79c     00 26 06 36 |  if_ae	mov	local05, #0
0e7a0     98 B6 B0 FD | 	call	#__system___float_fromuns
0e7a4     13 FB 61 F5 | 	xor	result1, local05
0e7a8     FD 14 02 F6 | 	mov	arg02, result1
0e7ac     10 13 02 F6 | 	mov	arg01, local02
0e7b0     01 16 66 F6 | 	neg	arg03, #1
0e7b4     E4 BD B0 FD | 	call	#__system___float_cmp
0e7b8     01 FA 55 F2 | 	cmps	result1, #1 wc
0e7bc     00 1E 26 36 |  if_ae	not	local01, #0
0e7c0     A7 1E 62 FC | 	wrlong	local01, fp
0e7c4     58 03 90 FD | 	jmp	#LR__1173
0e7c8                 | LR__1162
0e7c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0e7c8     08 4E 05 F1 | 	add	fp, #8
0e7cc     A7 1E 02 FB | 	rdlong	local01, fp
0e7d0     08 4E 85 F1 | 	sub	fp, #8
0e7d4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e7d8     14 4E 05 A1 |  if_e	add	fp, #20
0e7dc     A7 24 02 AB |  if_e	rdlong	local04, fp
0e7e0     14 4E 85 A1 |  if_e	sub	fp, #20
0e7e4     12 23 02 A6 |  if_e	mov	local03, local04
0e7e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e7ec     38 00 90 5D |  if_ne	jmp	#LR__1163
0e7f0     00 1E 06 F6 | 	mov	local01, #0
0e7f4     A7 20 02 FB | 	rdlong	local02, fp
0e7f8     0C 4E 05 F1 | 	add	fp, #12
0e7fc     A7 12 02 FB | 	rdlong	arg01, fp
0e800     0C 4E 85 F1 | 	sub	fp, #12
0e804     34 B6 B0 FD | 	call	#__system___float_fromuns
0e808     FD 14 02 F6 | 	mov	arg02, result1
0e80c     10 13 02 F6 | 	mov	arg01, local02
0e810     01 16 66 F6 | 	neg	arg03, #1
0e814     84 BD B0 FD | 	call	#__system___float_cmp
0e818     01 FA 55 F2 | 	cmps	result1, #1 wc
0e81c     00 1E 26 36 |  if_ae	not	local01, #0
0e820     A7 1E 62 FC | 	wrlong	local01, fp
0e824     F8 02 90 FD | 	jmp	#LR__1173
0e828                 | LR__1163
0e828                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0e828     08 4E 05 F1 | 	add	fp, #8
0e82c     A7 1E 02 FB | 	rdlong	local01, fp
0e830     08 4E 85 F1 | 	sub	fp, #8
0e834     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e838     14 4E 05 A1 |  if_e	add	fp, #20
0e83c     A7 24 02 AB |  if_e	rdlong	local04, fp
0e840     14 4E 85 A1 |  if_e	sub	fp, #20
0e844     12 23 02 A6 |  if_e	mov	local03, local04
0e848     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e84c     44 00 90 5D |  if_ne	jmp	#LR__1164
0e850     00 1E 06 F6 | 	mov	local01, #0
0e854     A7 12 02 FB | 	rdlong	arg01, fp
0e858     09 13 52 F6 | 	abs	arg01, arg01 wc
0e85c     1F 26 C6 C9 |  if_b	decod	local05, #31
0e860     00 26 06 36 |  if_ae	mov	local05, #0
0e864     D4 B5 B0 FD | 	call	#__system___float_fromuns
0e868     13 FB 61 F5 | 	xor	result1, local05
0e86c     FD 12 02 F6 | 	mov	arg01, result1
0e870     0C 4E 05 F1 | 	add	fp, #12
0e874     A7 14 02 FB | 	rdlong	arg02, fp
0e878     0C 4E 85 F1 | 	sub	fp, #12
0e87c     01 16 66 F6 | 	neg	arg03, #1
0e880     18 BD B0 FD | 	call	#__system___float_cmp
0e884     01 FA 55 F2 | 	cmps	result1, #1 wc
0e888     00 1E 26 36 |  if_ae	not	local01, #0
0e88c     A7 1E 62 FC | 	wrlong	local01, fp
0e890     8C 02 90 FD | 	jmp	#LR__1173
0e894                 | LR__1164
0e894                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0e894     08 4E 05 F1 | 	add	fp, #8
0e898     A7 1E 02 FB | 	rdlong	local01, fp
0e89c     08 4E 85 F1 | 	sub	fp, #8
0e8a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e8a4     14 4E 05 A1 |  if_e	add	fp, #20
0e8a8     A7 24 02 AB |  if_e	rdlong	local04, fp
0e8ac     14 4E 85 A1 |  if_e	sub	fp, #20
0e8b0     12 23 02 A6 |  if_e	mov	local03, local04
0e8b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e8b8     24 00 90 5D |  if_ne	jmp	#LR__1165
0e8bc     00 1E 06 F6 | 	mov	local01, #0
0e8c0     A7 20 02 FB | 	rdlong	local02, fp
0e8c4     0C 4E 05 F1 | 	add	fp, #12
0e8c8     A7 22 02 FB | 	rdlong	local03, fp
0e8cc     0C 4E 85 F1 | 	sub	fp, #12
0e8d0     11 21 5A F2 | 	cmps	local02, local03 wcz
0e8d4     01 1E 66 16 |  if_a	neg	local01, #1
0e8d8     A7 1E 62 FC | 	wrlong	local01, fp
0e8dc     40 02 90 FD | 	jmp	#LR__1173
0e8e0                 | LR__1165
0e8e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0e8e0     08 4E 05 F1 | 	add	fp, #8
0e8e4     A7 1E 02 FB | 	rdlong	local01, fp
0e8e8     08 4E 85 F1 | 	sub	fp, #8
0e8ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e8f0     14 4E 05 A1 |  if_e	add	fp, #20
0e8f4     A7 24 02 AB |  if_e	rdlong	local04, fp
0e8f8     14 4E 85 A1 |  if_e	sub	fp, #20
0e8fc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0e900     24 00 90 5D |  if_ne	jmp	#LR__1166
0e904     00 1E 06 F6 | 	mov	local01, #0
0e908     A7 20 02 FB | 	rdlong	local02, fp
0e90c     0C 4E 05 F1 | 	add	fp, #12
0e910     A7 22 02 FB | 	rdlong	local03, fp
0e914     0C 4E 85 F1 | 	sub	fp, #12
0e918     11 21 5A F2 | 	cmps	local02, local03 wcz
0e91c     01 1E 66 16 |  if_a	neg	local01, #1
0e920     A7 1E 62 FC | 	wrlong	local01, fp
0e924     F8 01 90 FD | 	jmp	#LR__1173
0e928                 | LR__1166
0e928                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0e928     08 4E 05 F1 | 	add	fp, #8
0e92c     A7 1E 02 FB | 	rdlong	local01, fp
0e930     08 4E 85 F1 | 	sub	fp, #8
0e934     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e938     14 4E 05 A1 |  if_e	add	fp, #20
0e93c     A7 22 02 AB |  if_e	rdlong	local03, fp
0e940     14 4E 85 A1 |  if_e	sub	fp, #20
0e944     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e948     34 00 90 5D |  if_ne	jmp	#LR__1167
0e94c     00 1E 06 F6 | 	mov	local01, #0
0e950     A7 12 02 FB | 	rdlong	arg01, fp
0e954     E4 B4 B0 FD | 	call	#__system___float_fromuns
0e958     FD 12 02 F6 | 	mov	arg01, result1
0e95c     0C 4E 05 F1 | 	add	fp, #12
0e960     A7 14 02 FB | 	rdlong	arg02, fp
0e964     0C 4E 85 F1 | 	sub	fp, #12
0e968     01 16 66 F6 | 	neg	arg03, #1
0e96c     2C BC B0 FD | 	call	#__system___float_cmp
0e970     01 FA 55 F2 | 	cmps	result1, #1 wc
0e974     00 1E 26 36 |  if_ae	not	local01, #0
0e978     A7 1E 62 FC | 	wrlong	local01, fp
0e97c     A0 01 90 FD | 	jmp	#LR__1173
0e980                 | LR__1167
0e980                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0e980     08 4E 05 F1 | 	add	fp, #8
0e984     A7 1E 02 FB | 	rdlong	local01, fp
0e988     08 4E 85 F1 | 	sub	fp, #8
0e98c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e990     14 4E 05 A1 |  if_e	add	fp, #20
0e994     A7 22 02 AB |  if_e	rdlong	local03, fp
0e998     14 4E 85 A1 |  if_e	sub	fp, #20
0e99c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e9a0     24 00 90 5D |  if_ne	jmp	#LR__1168
0e9a4     00 1E 06 F6 | 	mov	local01, #0
0e9a8     A7 20 02 FB | 	rdlong	local02, fp
0e9ac     0C 4E 05 F1 | 	add	fp, #12
0e9b0     A7 22 02 FB | 	rdlong	local03, fp
0e9b4     0C 4E 85 F1 | 	sub	fp, #12
0e9b8     11 21 5A F2 | 	cmps	local02, local03 wcz
0e9bc     01 1E 66 16 |  if_a	neg	local01, #1
0e9c0     A7 1E 62 FC | 	wrlong	local01, fp
0e9c4     58 01 90 FD | 	jmp	#LR__1173
0e9c8                 | LR__1168
0e9c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0e9c8     08 4E 05 F1 | 	add	fp, #8
0e9cc     A7 1E 02 FB | 	rdlong	local01, fp
0e9d0     08 4E 85 F1 | 	sub	fp, #8
0e9d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e9d8     14 4E 05 A1 |  if_e	add	fp, #20
0e9dc     A7 22 02 AB |  if_e	rdlong	local03, fp
0e9e0     14 4E 85 A1 |  if_e	sub	fp, #20
0e9e4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e9e8     24 00 90 5D |  if_ne	jmp	#LR__1169
0e9ec     00 1E 06 F6 | 	mov	local01, #0
0e9f0     A7 20 02 FB | 	rdlong	local02, fp
0e9f4     0C 4E 05 F1 | 	add	fp, #12
0e9f8     A7 22 02 FB | 	rdlong	local03, fp
0e9fc     0C 4E 85 F1 | 	sub	fp, #12
0ea00     11 21 1A F2 | 	cmp	local02, local03 wcz
0ea04     01 1E 66 16 |  if_a	neg	local01, #1
0ea08     A7 1E 62 FC | 	wrlong	local01, fp
0ea0c     10 01 90 FD | 	jmp	#LR__1173
0ea10                 | LR__1169
0ea10                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
0ea10     08 4E 05 F1 | 	add	fp, #8
0ea14     A7 1E 02 FB | 	rdlong	local01, fp
0ea18     08 4E 85 F1 | 	sub	fp, #8
0ea1c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0ea20     14 4E 05 A1 |  if_e	add	fp, #20
0ea24     A7 22 02 AB |  if_e	rdlong	local03, fp
0ea28     14 4E 85 A1 |  if_e	sub	fp, #20
0ea2c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0ea30     30 00 90 5D |  if_ne	jmp	#LR__1170
0ea34     00 1E 06 F6 | 	mov	local01, #0
0ea38     A7 12 02 FB | 	rdlong	arg01, fp
0ea3c     54 D2 BF FD | 	call	#_convertstring
0ea40     FD 12 02 F6 | 	mov	arg01, result1
0ea44     0C 4E 05 F1 | 	add	fp, #12
0ea48     A7 14 02 FB | 	rdlong	arg02, fp
0ea4c     0C 4E 85 F1 | 	sub	fp, #12
0ea50     2C 8E B0 FD | 	call	#__system___string_cmp
0ea54     01 FA 55 F2 | 	cmps	result1, #1 wc
0ea58     00 1E 26 36 |  if_ae	not	local01, #0
0ea5c     A7 1E 62 FC | 	wrlong	local01, fp
0ea60     BC 00 90 FD | 	jmp	#LR__1173
0ea64                 | LR__1170
0ea64                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
0ea64     08 4E 05 F1 | 	add	fp, #8
0ea68     A7 1E 02 FB | 	rdlong	local01, fp
0ea6c     08 4E 85 F1 | 	sub	fp, #8
0ea70     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ea74     14 4E 05 A1 |  if_e	add	fp, #20
0ea78     A7 22 02 AB |  if_e	rdlong	local03, fp
0ea7c     14 4E 85 A1 |  if_e	sub	fp, #20
0ea80     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0ea84     34 00 90 5D |  if_ne	jmp	#LR__1171
0ea88     00 1E 06 F6 | 	mov	local01, #0
0ea8c     A7 20 02 FB | 	rdlong	local02, fp
0ea90     0C 4E 05 F1 | 	add	fp, #12
0ea94     A7 12 02 FB | 	rdlong	arg01, fp
0ea98     0C 4E 85 F1 | 	sub	fp, #12
0ea9c     F4 D1 BF FD | 	call	#_convertstring
0eaa0     FD 14 02 F6 | 	mov	arg02, result1
0eaa4     10 13 02 F6 | 	mov	arg01, local02
0eaa8     D4 8D B0 FD | 	call	#__system___string_cmp
0eaac     01 FA 55 F2 | 	cmps	result1, #1 wc
0eab0     00 1E 26 36 |  if_ae	not	local01, #0
0eab4     A7 1E 62 FC | 	wrlong	local01, fp
0eab8     64 00 90 FD | 	jmp	#LR__1173
0eabc                 | LR__1171
0eabc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
0eabc     08 4E 05 F1 | 	add	fp, #8
0eac0     A7 1E 02 FB | 	rdlong	local01, fp
0eac4     08 4E 85 F1 | 	sub	fp, #8
0eac8     2B 1E 0E F2 | 	cmp	local01, #43 wz
0eacc     14 4E 05 A1 |  if_e	add	fp, #20
0ead0     A7 22 02 AB |  if_e	rdlong	local03, fp
0ead4     14 4E 85 A1 |  if_e	sub	fp, #20
0ead8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0eadc     3C 00 90 5D |  if_ne	jmp	#LR__1172
0eae0     00 1E 06 F6 | 	mov	local01, #0
0eae4     A7 12 02 FB | 	rdlong	arg01, fp
0eae8     A8 D1 BF FD | 	call	#_convertstring
0eaec     FD 20 02 F6 | 	mov	local02, result1
0eaf0     0C 4E 05 F1 | 	add	fp, #12
0eaf4     A7 12 02 FB | 	rdlong	arg01, fp
0eaf8     0C 4E 85 F1 | 	sub	fp, #12
0eafc     94 D1 BF FD | 	call	#_convertstring
0eb00     FD 14 02 F6 | 	mov	arg02, result1
0eb04     10 13 02 F6 | 	mov	arg01, local02
0eb08     74 8D B0 FD | 	call	#__system___string_cmp
0eb0c     01 FA 55 F2 | 	cmps	result1, #1 wc
0eb10     00 1E 26 36 |  if_ae	not	local01, #0
0eb14     A7 1E 62 FC | 	wrlong	local01, fp
0eb18     04 00 90 FD | 	jmp	#LR__1173
0eb1c                 | LR__1172
0eb1c     A7 00 68 FC | 	wrlong	#0, fp
0eb20                 | LR__1173
0eb20     08 4E 05 F1 | 	add	fp, #8
0eb24     A7 38 68 FC | 	wrlong	#28, fp
0eb28     08 4E 85 F1 | 	sub	fp, #8
0eb2c     A7 12 02 F6 | 	mov	arg01, fp
0eb30     F0 A0 BF FD | 	call	#_push
0eb34     A7 F0 03 F6 | 	mov	ptra, fp
0eb38     B2 00 A0 FD | 	call	#popregs_
0eb3c                 | _do_gt_ret
0eb3c     2D 00 64 FD | 	ret
0eb40                 | 
0eb40                 | ' 
0eb40                 | ' sub do_lt
0eb40                 | _do_lt
0eb40     05 4A 05 F6 | 	mov	COUNT_, #5
0eb44     A8 00 A0 FD | 	call	#pushregs_
0eb48     18 F0 07 F1 | 	add	ptra, #24
0eb4c     3C A0 BF FD | 	call	#_pop
0eb50     FD 1E 02 F6 | 	mov	local01, result1
0eb54     FE 20 02 F6 | 	mov	local02, result2
0eb58     FF 22 02 F6 | 	mov	local03, result3
0eb5c     0C 4E 05 F1 | 	add	fp, #12
0eb60     A7 1E 62 FC | 	wrlong	local01, fp
0eb64     04 4E 05 F1 | 	add	fp, #4
0eb68     A7 20 62 FC | 	wrlong	local02, fp
0eb6c     04 4E 05 F1 | 	add	fp, #4
0eb70     A7 22 62 FC | 	wrlong	local03, fp
0eb74     14 4E 85 F1 | 	sub	fp, #20
0eb78     10 A0 BF FD | 	call	#_pop
0eb7c     FF 22 02 F6 | 	mov	local03, result3
0eb80     A7 FA 61 FC | 	wrlong	result1, fp
0eb84     04 4E 05 F1 | 	add	fp, #4
0eb88     A7 FC 61 FC | 	wrlong	result2, fp
0eb8c     04 4E 05 F1 | 	add	fp, #4
0eb90     A7 22 62 FC | 	wrlong	local03, fp
0eb94                 | ' t2=pop()
0eb94                 | ' t1=pop()
0eb94                 | ' 
0eb94                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0eb94     08 4E 85 F1 | 	sub	fp, #8
0eb98     1F 22 0E F2 | 	cmp	local03, #31 wz
0eb9c     14 4E 05 A1 |  if_e	add	fp, #20
0eba0     A7 24 02 AB |  if_e	rdlong	local04, fp
0eba4     14 4E 85 A1 |  if_e	sub	fp, #20
0eba8     12 23 02 A6 |  if_e	mov	local03, local04
0ebac     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0ebb0     28 00 90 5D |  if_ne	jmp	#LR__1180
0ebb4     00 1E 06 F6 | 	mov	local01, #0
0ebb8     A7 12 02 FB | 	rdlong	arg01, fp
0ebbc     0C 4E 05 F1 | 	add	fp, #12
0ebc0     A7 14 02 FB | 	rdlong	arg02, fp
0ebc4     0C 4E 85 F1 | 	sub	fp, #12
0ebc8     B4 8C B0 FD | 	call	#__system___string_cmp
0ebcc     00 FA 55 F2 | 	cmps	result1, #0 wc
0ebd0     00 1E 26 C6 |  if_b	not	local01, #0
0ebd4     A7 1E 62 FC | 	wrlong	local01, fp
0ebd8     0C 04 90 FD | 	jmp	#LR__1193
0ebdc                 | LR__1180
0ebdc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0ebdc     08 4E 05 F1 | 	add	fp, #8
0ebe0     A7 1E 02 FB | 	rdlong	local01, fp
0ebe4     08 4E 85 F1 | 	sub	fp, #8
0ebe8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ebec     14 4E 05 A1 |  if_e	add	fp, #20
0ebf0     A7 24 02 AB |  if_e	rdlong	local04, fp
0ebf4     14 4E 85 A1 |  if_e	sub	fp, #20
0ebf8     12 23 02 A6 |  if_e	mov	local03, local04
0ebfc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ec00     2C 00 90 5D |  if_ne	jmp	#LR__1181
0ec04     00 1E 06 F6 | 	mov	local01, #0
0ec08     A7 12 02 FB | 	rdlong	arg01, fp
0ec0c     0C 4E 05 F1 | 	add	fp, #12
0ec10     A7 14 02 FB | 	rdlong	arg02, fp
0ec14     0C 4E 85 F1 | 	sub	fp, #12
0ec18     01 16 06 F6 | 	mov	arg03, #1
0ec1c     7C B9 B0 FD | 	call	#__system___float_cmp
0ec20     00 FA 55 F2 | 	cmps	result1, #0 wc
0ec24     00 1E 26 C6 |  if_b	not	local01, #0
0ec28     A7 1E 62 FC | 	wrlong	local01, fp
0ec2c     B8 03 90 FD | 	jmp	#LR__1193
0ec30                 | LR__1181
0ec30                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0ec30     08 4E 05 F1 | 	add	fp, #8
0ec34     A7 1E 02 FB | 	rdlong	local01, fp
0ec38     08 4E 85 F1 | 	sub	fp, #8
0ec3c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ec40     14 4E 05 A1 |  if_e	add	fp, #20
0ec44     A7 24 02 AB |  if_e	rdlong	local04, fp
0ec48     14 4E 85 A1 |  if_e	sub	fp, #20
0ec4c     12 23 02 A6 |  if_e	mov	local03, local04
0ec50     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ec54     48 00 90 5D |  if_ne	jmp	#LR__1182
0ec58     00 1E 06 F6 | 	mov	local01, #0
0ec5c     A7 20 02 FB | 	rdlong	local02, fp
0ec60     0C 4E 05 F1 | 	add	fp, #12
0ec64     A7 12 02 FB | 	rdlong	arg01, fp
0ec68     0C 4E 85 F1 | 	sub	fp, #12
0ec6c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ec70     1F 26 C6 C9 |  if_b	decod	local05, #31
0ec74     00 26 06 36 |  if_ae	mov	local05, #0
0ec78     C0 B1 B0 FD | 	call	#__system___float_fromuns
0ec7c     13 FB 61 F5 | 	xor	result1, local05
0ec80     FD 14 02 F6 | 	mov	arg02, result1
0ec84     10 13 02 F6 | 	mov	arg01, local02
0ec88     01 16 06 F6 | 	mov	arg03, #1
0ec8c     0C B9 B0 FD | 	call	#__system___float_cmp
0ec90     00 FA 55 F2 | 	cmps	result1, #0 wc
0ec94     00 1E 26 C6 |  if_b	not	local01, #0
0ec98     A7 1E 62 FC | 	wrlong	local01, fp
0ec9c     48 03 90 FD | 	jmp	#LR__1193
0eca0                 | LR__1182
0eca0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0eca0     08 4E 05 F1 | 	add	fp, #8
0eca4     A7 1E 02 FB | 	rdlong	local01, fp
0eca8     08 4E 85 F1 | 	sub	fp, #8
0ecac     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ecb0     14 4E 05 A1 |  if_e	add	fp, #20
0ecb4     A7 24 02 AB |  if_e	rdlong	local04, fp
0ecb8     14 4E 85 A1 |  if_e	sub	fp, #20
0ecbc     12 23 02 A6 |  if_e	mov	local03, local04
0ecc0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ecc4     38 00 90 5D |  if_ne	jmp	#LR__1183
0ecc8     00 1E 06 F6 | 	mov	local01, #0
0eccc     A7 20 02 FB | 	rdlong	local02, fp
0ecd0     0C 4E 05 F1 | 	add	fp, #12
0ecd4     A7 12 02 FB | 	rdlong	arg01, fp
0ecd8     0C 4E 85 F1 | 	sub	fp, #12
0ecdc     5C B1 B0 FD | 	call	#__system___float_fromuns
0ece0     FD 14 02 F6 | 	mov	arg02, result1
0ece4     10 13 02 F6 | 	mov	arg01, local02
0ece8     01 16 06 F6 | 	mov	arg03, #1
0ecec     AC B8 B0 FD | 	call	#__system___float_cmp
0ecf0     00 FA 55 F2 | 	cmps	result1, #0 wc
0ecf4     00 1E 26 C6 |  if_b	not	local01, #0
0ecf8     A7 1E 62 FC | 	wrlong	local01, fp
0ecfc     E8 02 90 FD | 	jmp	#LR__1193
0ed00                 | LR__1183
0ed00                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0ed00     08 4E 05 F1 | 	add	fp, #8
0ed04     A7 1E 02 FB | 	rdlong	local01, fp
0ed08     08 4E 85 F1 | 	sub	fp, #8
0ed0c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ed10     14 4E 05 A1 |  if_e	add	fp, #20
0ed14     A7 24 02 AB |  if_e	rdlong	local04, fp
0ed18     14 4E 85 A1 |  if_e	sub	fp, #20
0ed1c     12 23 02 A6 |  if_e	mov	local03, local04
0ed20     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ed24     44 00 90 5D |  if_ne	jmp	#LR__1184
0ed28     00 1E 06 F6 | 	mov	local01, #0
0ed2c     A7 12 02 FB | 	rdlong	arg01, fp
0ed30     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed34     1F 26 C6 C9 |  if_b	decod	local05, #31
0ed38     00 26 06 36 |  if_ae	mov	local05, #0
0ed3c     FC B0 B0 FD | 	call	#__system___float_fromuns
0ed40     13 FB 61 F5 | 	xor	result1, local05
0ed44     FD 12 02 F6 | 	mov	arg01, result1
0ed48     0C 4E 05 F1 | 	add	fp, #12
0ed4c     A7 14 02 FB | 	rdlong	arg02, fp
0ed50     0C 4E 85 F1 | 	sub	fp, #12
0ed54     01 16 06 F6 | 	mov	arg03, #1
0ed58     40 B8 B0 FD | 	call	#__system___float_cmp
0ed5c     00 FA 55 F2 | 	cmps	result1, #0 wc
0ed60     00 1E 26 C6 |  if_b	not	local01, #0
0ed64     A7 1E 62 FC | 	wrlong	local01, fp
0ed68     7C 02 90 FD | 	jmp	#LR__1193
0ed6c                 | LR__1184
0ed6c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0ed6c     08 4E 05 F1 | 	add	fp, #8
0ed70     A7 1E 02 FB | 	rdlong	local01, fp
0ed74     08 4E 85 F1 | 	sub	fp, #8
0ed78     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ed7c     14 4E 05 A1 |  if_e	add	fp, #20
0ed80     A7 24 02 AB |  if_e	rdlong	local04, fp
0ed84     14 4E 85 A1 |  if_e	sub	fp, #20
0ed88     12 23 02 A6 |  if_e	mov	local03, local04
0ed8c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ed90     20 00 90 5D |  if_ne	jmp	#LR__1185
0ed94     A7 20 02 FB | 	rdlong	local02, fp
0ed98     0C 4E 05 F1 | 	add	fp, #12
0ed9c     A7 22 02 FB | 	rdlong	local03, fp
0eda0     0C 4E 85 F1 | 	sub	fp, #12
0eda4     11 21 52 F2 | 	cmps	local02, local03 wc
0eda8     0F 1F A2 F1 | 	subx	local01, local01
0edac     A7 1E 62 FC | 	wrlong	local01, fp
0edb0     34 02 90 FD | 	jmp	#LR__1193
0edb4                 | LR__1185
0edb4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0edb4     08 4E 05 F1 | 	add	fp, #8
0edb8     A7 1E 02 FB | 	rdlong	local01, fp
0edbc     08 4E 85 F1 | 	sub	fp, #8
0edc0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0edc4     14 4E 05 A1 |  if_e	add	fp, #20
0edc8     A7 24 02 AB |  if_e	rdlong	local04, fp
0edcc     14 4E 85 A1 |  if_e	sub	fp, #20
0edd0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0edd4     20 00 90 5D |  if_ne	jmp	#LR__1186
0edd8     A7 20 02 FB | 	rdlong	local02, fp
0eddc     0C 4E 05 F1 | 	add	fp, #12
0ede0     A7 22 02 FB | 	rdlong	local03, fp
0ede4     0C 4E 85 F1 | 	sub	fp, #12
0ede8     11 21 52 F2 | 	cmps	local02, local03 wc
0edec     0F 1F A2 F1 | 	subx	local01, local01
0edf0     A7 1E 62 FC | 	wrlong	local01, fp
0edf4     F0 01 90 FD | 	jmp	#LR__1193
0edf8                 | LR__1186
0edf8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0edf8     08 4E 05 F1 | 	add	fp, #8
0edfc     A7 1E 02 FB | 	rdlong	local01, fp
0ee00     08 4E 85 F1 | 	sub	fp, #8
0ee04     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ee08     14 4E 05 A1 |  if_e	add	fp, #20
0ee0c     A7 22 02 AB |  if_e	rdlong	local03, fp
0ee10     14 4E 85 A1 |  if_e	sub	fp, #20
0ee14     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ee18     34 00 90 5D |  if_ne	jmp	#LR__1187
0ee1c     00 1E 06 F6 | 	mov	local01, #0
0ee20     A7 12 02 FB | 	rdlong	arg01, fp
0ee24     14 B0 B0 FD | 	call	#__system___float_fromuns
0ee28     FD 12 02 F6 | 	mov	arg01, result1
0ee2c     0C 4E 05 F1 | 	add	fp, #12
0ee30     A7 14 02 FB | 	rdlong	arg02, fp
0ee34     0C 4E 85 F1 | 	sub	fp, #12
0ee38     01 16 06 F6 | 	mov	arg03, #1
0ee3c     5C B7 B0 FD | 	call	#__system___float_cmp
0ee40     00 FA 55 F2 | 	cmps	result1, #0 wc
0ee44     00 1E 26 C6 |  if_b	not	local01, #0
0ee48     A7 1E 62 FC | 	wrlong	local01, fp
0ee4c     98 01 90 FD | 	jmp	#LR__1193
0ee50                 | LR__1187
0ee50                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0ee50     08 4E 05 F1 | 	add	fp, #8
0ee54     A7 1E 02 FB | 	rdlong	local01, fp
0ee58     08 4E 85 F1 | 	sub	fp, #8
0ee5c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ee60     14 4E 05 A1 |  if_e	add	fp, #20
0ee64     A7 22 02 AB |  if_e	rdlong	local03, fp
0ee68     14 4E 85 A1 |  if_e	sub	fp, #20
0ee6c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ee70     20 00 90 5D |  if_ne	jmp	#LR__1188
0ee74     A7 20 02 FB | 	rdlong	local02, fp
0ee78     0C 4E 05 F1 | 	add	fp, #12
0ee7c     A7 22 02 FB | 	rdlong	local03, fp
0ee80     0C 4E 85 F1 | 	sub	fp, #12
0ee84     11 21 52 F2 | 	cmps	local02, local03 wc
0ee88     0F 1F A2 F1 | 	subx	local01, local01
0ee8c     A7 1E 62 FC | 	wrlong	local01, fp
0ee90     54 01 90 FD | 	jmp	#LR__1193
0ee94                 | LR__1188
0ee94                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0ee94     08 4E 05 F1 | 	add	fp, #8
0ee98     A7 1E 02 FB | 	rdlong	local01, fp
0ee9c     08 4E 85 F1 | 	sub	fp, #8
0eea0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0eea4     14 4E 05 A1 |  if_e	add	fp, #20
0eea8     A7 22 02 AB |  if_e	rdlong	local03, fp
0eeac     14 4E 85 A1 |  if_e	sub	fp, #20
0eeb0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0eeb4     20 00 90 5D |  if_ne	jmp	#LR__1189
0eeb8     A7 20 02 FB | 	rdlong	local02, fp
0eebc     0C 4E 05 F1 | 	add	fp, #12
0eec0     A7 22 02 FB | 	rdlong	local03, fp
0eec4     0C 4E 85 F1 | 	sub	fp, #12
0eec8     11 21 12 F2 | 	cmp	local02, local03 wc
0eecc     0F 1F A2 F1 | 	subx	local01, local01
0eed0     A7 1E 62 FC | 	wrlong	local01, fp
0eed4     10 01 90 FD | 	jmp	#LR__1193
0eed8                 | LR__1189
0eed8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
0eed8     08 4E 05 F1 | 	add	fp, #8
0eedc     A7 1E 02 FB | 	rdlong	local01, fp
0eee0     08 4E 85 F1 | 	sub	fp, #8
0eee4     2B 1E 0E F2 | 	cmp	local01, #43 wz
0eee8     14 4E 05 A1 |  if_e	add	fp, #20
0eeec     A7 22 02 AB |  if_e	rdlong	local03, fp
0eef0     14 4E 85 A1 |  if_e	sub	fp, #20
0eef4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0eef8     30 00 90 5D |  if_ne	jmp	#LR__1190
0eefc     00 1E 06 F6 | 	mov	local01, #0
0ef00     A7 12 02 FB | 	rdlong	arg01, fp
0ef04     8C CD BF FD | 	call	#_convertstring
0ef08     FD 12 02 F6 | 	mov	arg01, result1
0ef0c     0C 4E 05 F1 | 	add	fp, #12
0ef10     A7 14 02 FB | 	rdlong	arg02, fp
0ef14     0C 4E 85 F1 | 	sub	fp, #12
0ef18     64 89 B0 FD | 	call	#__system___string_cmp
0ef1c     00 FA 55 F2 | 	cmps	result1, #0 wc
0ef20     00 1E 26 C6 |  if_b	not	local01, #0
0ef24     A7 1E 62 FC | 	wrlong	local01, fp
0ef28     BC 00 90 FD | 	jmp	#LR__1193
0ef2c                 | LR__1190
0ef2c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
0ef2c     08 4E 05 F1 | 	add	fp, #8
0ef30     A7 1E 02 FB | 	rdlong	local01, fp
0ef34     08 4E 85 F1 | 	sub	fp, #8
0ef38     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ef3c     14 4E 05 A1 |  if_e	add	fp, #20
0ef40     A7 22 02 AB |  if_e	rdlong	local03, fp
0ef44     14 4E 85 A1 |  if_e	sub	fp, #20
0ef48     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0ef4c     34 00 90 5D |  if_ne	jmp	#LR__1191
0ef50     00 1E 06 F6 | 	mov	local01, #0
0ef54     A7 20 02 FB | 	rdlong	local02, fp
0ef58     0C 4E 05 F1 | 	add	fp, #12
0ef5c     A7 12 02 FB | 	rdlong	arg01, fp
0ef60     0C 4E 85 F1 | 	sub	fp, #12
0ef64     2C CD BF FD | 	call	#_convertstring
0ef68     FD 14 02 F6 | 	mov	arg02, result1
0ef6c     10 13 02 F6 | 	mov	arg01, local02
0ef70     0C 89 B0 FD | 	call	#__system___string_cmp
0ef74     00 FA 55 F2 | 	cmps	result1, #0 wc
0ef78     00 1E 26 C6 |  if_b	not	local01, #0
0ef7c     A7 1E 62 FC | 	wrlong	local01, fp
0ef80     64 00 90 FD | 	jmp	#LR__1193
0ef84                 | LR__1191
0ef84                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
0ef84     08 4E 05 F1 | 	add	fp, #8
0ef88     A7 1E 02 FB | 	rdlong	local01, fp
0ef8c     08 4E 85 F1 | 	sub	fp, #8
0ef90     2B 1E 0E F2 | 	cmp	local01, #43 wz
0ef94     14 4E 05 A1 |  if_e	add	fp, #20
0ef98     A7 22 02 AB |  if_e	rdlong	local03, fp
0ef9c     14 4E 85 A1 |  if_e	sub	fp, #20
0efa0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0efa4     3C 00 90 5D |  if_ne	jmp	#LR__1192
0efa8     00 1E 06 F6 | 	mov	local01, #0
0efac     A7 12 02 FB | 	rdlong	arg01, fp
0efb0     E0 CC BF FD | 	call	#_convertstring
0efb4     FD 20 02 F6 | 	mov	local02, result1
0efb8     0C 4E 05 F1 | 	add	fp, #12
0efbc     A7 12 02 FB | 	rdlong	arg01, fp
0efc0     0C 4E 85 F1 | 	sub	fp, #12
0efc4     CC CC BF FD | 	call	#_convertstring
0efc8     FD 14 02 F6 | 	mov	arg02, result1
0efcc     10 13 02 F6 | 	mov	arg01, local02
0efd0     AC 88 B0 FD | 	call	#__system___string_cmp
0efd4     00 FA 55 F2 | 	cmps	result1, #0 wc
0efd8     00 1E 26 C6 |  if_b	not	local01, #0
0efdc     A7 1E 62 FC | 	wrlong	local01, fp
0efe0     04 00 90 FD | 	jmp	#LR__1193
0efe4                 | LR__1192
0efe4     A7 00 68 FC | 	wrlong	#0, fp
0efe8                 | LR__1193
0efe8     08 4E 05 F1 | 	add	fp, #8
0efec     A7 38 68 FC | 	wrlong	#28, fp
0eff0     08 4E 85 F1 | 	sub	fp, #8
0eff4     A7 12 02 F6 | 	mov	arg01, fp
0eff8     28 9C BF FD | 	call	#_push
0effc     A7 F0 03 F6 | 	mov	ptra, fp
0f000     B2 00 A0 FD | 	call	#popregs_
0f004                 | _do_lt_ret
0f004     2D 00 64 FD | 	ret
0f008                 | 
0f008                 | ' 
0f008                 | ' sub do_ge
0f008                 | _do_ge
0f008     05 4A 05 F6 | 	mov	COUNT_, #5
0f00c     A8 00 A0 FD | 	call	#pushregs_
0f010     18 F0 07 F1 | 	add	ptra, #24
0f014     74 9B BF FD | 	call	#_pop
0f018     FD 1E 02 F6 | 	mov	local01, result1
0f01c     FE 20 02 F6 | 	mov	local02, result2
0f020     FF 22 02 F6 | 	mov	local03, result3
0f024     0C 4E 05 F1 | 	add	fp, #12
0f028     A7 1E 62 FC | 	wrlong	local01, fp
0f02c     04 4E 05 F1 | 	add	fp, #4
0f030     A7 20 62 FC | 	wrlong	local02, fp
0f034     04 4E 05 F1 | 	add	fp, #4
0f038     A7 22 62 FC | 	wrlong	local03, fp
0f03c     14 4E 85 F1 | 	sub	fp, #20
0f040     48 9B BF FD | 	call	#_pop
0f044     FF 22 02 F6 | 	mov	local03, result3
0f048     A7 FA 61 FC | 	wrlong	result1, fp
0f04c     04 4E 05 F1 | 	add	fp, #4
0f050     A7 FC 61 FC | 	wrlong	result2, fp
0f054     04 4E 05 F1 | 	add	fp, #4
0f058     A7 22 62 FC | 	wrlong	local03, fp
0f05c                 | ' t2=pop()
0f05c                 | ' t1=pop()
0f05c                 | ' 
0f05c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
0f05c     08 4E 85 F1 | 	sub	fp, #8
0f060     1F 22 0E F2 | 	cmp	local03, #31 wz
0f064     14 4E 05 A1 |  if_e	add	fp, #20
0f068     A7 24 02 AB |  if_e	rdlong	local04, fp
0f06c     14 4E 85 A1 |  if_e	sub	fp, #20
0f070     12 23 02 A6 |  if_e	mov	local03, local04
0f074     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f078     28 00 90 5D |  if_ne	jmp	#LR__1200
0f07c     00 1E 06 F6 | 	mov	local01, #0
0f080     A7 12 02 FB | 	rdlong	arg01, fp
0f084     0C 4E 05 F1 | 	add	fp, #12
0f088     A7 14 02 FB | 	rdlong	arg02, fp
0f08c     0C 4E 85 F1 | 	sub	fp, #12
0f090     EC 87 B0 FD | 	call	#__system___string_cmp
0f094     00 FA 55 F2 | 	cmps	result1, #0 wc
0f098     00 1E 26 36 |  if_ae	not	local01, #0
0f09c     A7 1E 62 FC | 	wrlong	local01, fp
0f0a0     1C 04 90 FD | 	jmp	#LR__1213
0f0a4                 | LR__1200
0f0a4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
0f0a4     08 4E 05 F1 | 	add	fp, #8
0f0a8     A7 1E 02 FB | 	rdlong	local01, fp
0f0ac     08 4E 85 F1 | 	sub	fp, #8
0f0b0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f0b4     14 4E 05 A1 |  if_e	add	fp, #20
0f0b8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f0bc     14 4E 85 A1 |  if_e	sub	fp, #20
0f0c0     12 23 02 A6 |  if_e	mov	local03, local04
0f0c4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f0c8     2C 00 90 5D |  if_ne	jmp	#LR__1201
0f0cc     00 1E 06 F6 | 	mov	local01, #0
0f0d0     A7 12 02 FB | 	rdlong	arg01, fp
0f0d4     0C 4E 05 F1 | 	add	fp, #12
0f0d8     A7 14 02 FB | 	rdlong	arg02, fp
0f0dc     0C 4E 85 F1 | 	sub	fp, #12
0f0e0     01 16 66 F6 | 	neg	arg03, #1
0f0e4     B4 B4 B0 FD | 	call	#__system___float_cmp
0f0e8     00 FA 55 F2 | 	cmps	result1, #0 wc
0f0ec     00 1E 26 36 |  if_ae	not	local01, #0
0f0f0     A7 1E 62 FC | 	wrlong	local01, fp
0f0f4     C8 03 90 FD | 	jmp	#LR__1213
0f0f8                 | LR__1201
0f0f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
0f0f8     08 4E 05 F1 | 	add	fp, #8
0f0fc     A7 1E 02 FB | 	rdlong	local01, fp
0f100     08 4E 85 F1 | 	sub	fp, #8
0f104     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f108     14 4E 05 A1 |  if_e	add	fp, #20
0f10c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f110     14 4E 85 A1 |  if_e	sub	fp, #20
0f114     12 23 02 A6 |  if_e	mov	local03, local04
0f118     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f11c     48 00 90 5D |  if_ne	jmp	#LR__1202
0f120     00 1E 06 F6 | 	mov	local01, #0
0f124     A7 20 02 FB | 	rdlong	local02, fp
0f128     0C 4E 05 F1 | 	add	fp, #12
0f12c     A7 12 02 FB | 	rdlong	arg01, fp
0f130     0C 4E 85 F1 | 	sub	fp, #12
0f134     09 13 52 F6 | 	abs	arg01, arg01 wc
0f138     1F 26 C6 C9 |  if_b	decod	local05, #31
0f13c     00 26 06 36 |  if_ae	mov	local05, #0
0f140     F8 AC B0 FD | 	call	#__system___float_fromuns
0f144     13 FB 61 F5 | 	xor	result1, local05
0f148     FD 14 02 F6 | 	mov	arg02, result1
0f14c     10 13 02 F6 | 	mov	arg01, local02
0f150     01 16 66 F6 | 	neg	arg03, #1
0f154     44 B4 B0 FD | 	call	#__system___float_cmp
0f158     00 FA 55 F2 | 	cmps	result1, #0 wc
0f15c     00 1E 26 36 |  if_ae	not	local01, #0
0f160     A7 1E 62 FC | 	wrlong	local01, fp
0f164     58 03 90 FD | 	jmp	#LR__1213
0f168                 | LR__1202
0f168                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
0f168     08 4E 05 F1 | 	add	fp, #8
0f16c     A7 1E 02 FB | 	rdlong	local01, fp
0f170     08 4E 85 F1 | 	sub	fp, #8
0f174     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f178     14 4E 05 A1 |  if_e	add	fp, #20
0f17c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f180     14 4E 85 A1 |  if_e	sub	fp, #20
0f184     12 23 02 A6 |  if_e	mov	local03, local04
0f188     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f18c     38 00 90 5D |  if_ne	jmp	#LR__1203
0f190     00 1E 06 F6 | 	mov	local01, #0
0f194     A7 20 02 FB | 	rdlong	local02, fp
0f198     0C 4E 05 F1 | 	add	fp, #12
0f19c     A7 12 02 FB | 	rdlong	arg01, fp
0f1a0     0C 4E 85 F1 | 	sub	fp, #12
0f1a4     94 AC B0 FD | 	call	#__system___float_fromuns
0f1a8     FD 14 02 F6 | 	mov	arg02, result1
0f1ac     10 13 02 F6 | 	mov	arg01, local02
0f1b0     01 16 66 F6 | 	neg	arg03, #1
0f1b4     E4 B3 B0 FD | 	call	#__system___float_cmp
0f1b8     00 FA 55 F2 | 	cmps	result1, #0 wc
0f1bc     00 1E 26 36 |  if_ae	not	local01, #0
0f1c0     A7 1E 62 FC | 	wrlong	local01, fp
0f1c4     F8 02 90 FD | 	jmp	#LR__1213
0f1c8                 | LR__1203
0f1c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
0f1c8     08 4E 05 F1 | 	add	fp, #8
0f1cc     A7 1E 02 FB | 	rdlong	local01, fp
0f1d0     08 4E 85 F1 | 	sub	fp, #8
0f1d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f1d8     14 4E 05 A1 |  if_e	add	fp, #20
0f1dc     A7 24 02 AB |  if_e	rdlong	local04, fp
0f1e0     14 4E 85 A1 |  if_e	sub	fp, #20
0f1e4     12 23 02 A6 |  if_e	mov	local03, local04
0f1e8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f1ec     44 00 90 5D |  if_ne	jmp	#LR__1204
0f1f0     00 1E 06 F6 | 	mov	local01, #0
0f1f4     A7 12 02 FB | 	rdlong	arg01, fp
0f1f8     09 13 52 F6 | 	abs	arg01, arg01 wc
0f1fc     1F 26 C6 C9 |  if_b	decod	local05, #31
0f200     00 26 06 36 |  if_ae	mov	local05, #0
0f204     34 AC B0 FD | 	call	#__system___float_fromuns
0f208     13 FB 61 F5 | 	xor	result1, local05
0f20c     FD 12 02 F6 | 	mov	arg01, result1
0f210     0C 4E 05 F1 | 	add	fp, #12
0f214     A7 14 02 FB | 	rdlong	arg02, fp
0f218     0C 4E 85 F1 | 	sub	fp, #12
0f21c     01 16 66 F6 | 	neg	arg03, #1
0f220     78 B3 B0 FD | 	call	#__system___float_cmp
0f224     00 FA 55 F2 | 	cmps	result1, #0 wc
0f228     00 1E 26 36 |  if_ae	not	local01, #0
0f22c     A7 1E 62 FC | 	wrlong	local01, fp
0f230     8C 02 90 FD | 	jmp	#LR__1213
0f234                 | LR__1204
0f234                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
0f234     08 4E 05 F1 | 	add	fp, #8
0f238     A7 1E 02 FB | 	rdlong	local01, fp
0f23c     08 4E 85 F1 | 	sub	fp, #8
0f240     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f244     14 4E 05 A1 |  if_e	add	fp, #20
0f248     A7 24 02 AB |  if_e	rdlong	local04, fp
0f24c     14 4E 85 A1 |  if_e	sub	fp, #20
0f250     12 23 02 A6 |  if_e	mov	local03, local04
0f254     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f258     24 00 90 5D |  if_ne	jmp	#LR__1205
0f25c     00 1E 06 F6 | 	mov	local01, #0
0f260     A7 20 02 FB | 	rdlong	local02, fp
0f264     0C 4E 05 F1 | 	add	fp, #12
0f268     A7 22 02 FB | 	rdlong	local03, fp
0f26c     0C 4E 85 F1 | 	sub	fp, #12
0f270     11 21 52 F2 | 	cmps	local02, local03 wc
0f274     01 1E 66 36 |  if_ae	neg	local01, #1
0f278     A7 1E 62 FC | 	wrlong	local01, fp
0f27c     40 02 90 FD | 	jmp	#LR__1213
0f280                 | LR__1205
0f280                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
0f280     08 4E 05 F1 | 	add	fp, #8
0f284     A7 1E 02 FB | 	rdlong	local01, fp
0f288     08 4E 85 F1 | 	sub	fp, #8
0f28c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f290     14 4E 05 A1 |  if_e	add	fp, #20
0f294     A7 24 02 AB |  if_e	rdlong	local04, fp
0f298     14 4E 85 A1 |  if_e	sub	fp, #20
0f29c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f2a0     24 00 90 5D |  if_ne	jmp	#LR__1206
0f2a4     00 1E 06 F6 | 	mov	local01, #0
0f2a8     A7 20 02 FB | 	rdlong	local02, fp
0f2ac     0C 4E 05 F1 | 	add	fp, #12
0f2b0     A7 22 02 FB | 	rdlong	local03, fp
0f2b4     0C 4E 85 F1 | 	sub	fp, #12
0f2b8     11 21 52 F2 | 	cmps	local02, local03 wc
0f2bc     01 1E 66 36 |  if_ae	neg	local01, #1
0f2c0     A7 1E 62 FC | 	wrlong	local01, fp
0f2c4     F8 01 90 FD | 	jmp	#LR__1213
0f2c8                 | LR__1206
0f2c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
0f2c8     08 4E 05 F1 | 	add	fp, #8
0f2cc     A7 1E 02 FB | 	rdlong	local01, fp
0f2d0     08 4E 85 F1 | 	sub	fp, #8
0f2d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f2d8     14 4E 05 A1 |  if_e	add	fp, #20
0f2dc     A7 22 02 AB |  if_e	rdlong	local03, fp
0f2e0     14 4E 85 A1 |  if_e	sub	fp, #20
0f2e4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f2e8     34 00 90 5D |  if_ne	jmp	#LR__1207
0f2ec     00 1E 06 F6 | 	mov	local01, #0
0f2f0     A7 12 02 FB | 	rdlong	arg01, fp
0f2f4     44 AB B0 FD | 	call	#__system___float_fromuns
0f2f8     FD 12 02 F6 | 	mov	arg01, result1
0f2fc     0C 4E 05 F1 | 	add	fp, #12
0f300     A7 14 02 FB | 	rdlong	arg02, fp
0f304     0C 4E 85 F1 | 	sub	fp, #12
0f308     01 16 66 F6 | 	neg	arg03, #1
0f30c     8C B2 B0 FD | 	call	#__system___float_cmp
0f310     00 FA 55 F2 | 	cmps	result1, #0 wc
0f314     00 1E 26 36 |  if_ae	not	local01, #0
0f318     A7 1E 62 FC | 	wrlong	local01, fp
0f31c     A0 01 90 FD | 	jmp	#LR__1213
0f320                 | LR__1207
0f320                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
0f320     08 4E 05 F1 | 	add	fp, #8
0f324     A7 1E 02 FB | 	rdlong	local01, fp
0f328     08 4E 85 F1 | 	sub	fp, #8
0f32c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f330     14 4E 05 A1 |  if_e	add	fp, #20
0f334     A7 22 02 AB |  if_e	rdlong	local03, fp
0f338     14 4E 85 A1 |  if_e	sub	fp, #20
0f33c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f340     24 00 90 5D |  if_ne	jmp	#LR__1208
0f344     00 1E 06 F6 | 	mov	local01, #0
0f348     A7 20 02 FB | 	rdlong	local02, fp
0f34c     0C 4E 05 F1 | 	add	fp, #12
0f350     A7 22 02 FB | 	rdlong	local03, fp
0f354     0C 4E 85 F1 | 	sub	fp, #12
0f358     11 21 52 F2 | 	cmps	local02, local03 wc
0f35c     01 1E 66 36 |  if_ae	neg	local01, #1
0f360     A7 1E 62 FC | 	wrlong	local01, fp
0f364     58 01 90 FD | 	jmp	#LR__1213
0f368                 | LR__1208
0f368                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
0f368     08 4E 05 F1 | 	add	fp, #8
0f36c     A7 1E 02 FB | 	rdlong	local01, fp
0f370     08 4E 85 F1 | 	sub	fp, #8
0f374     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f378     14 4E 05 A1 |  if_e	add	fp, #20
0f37c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f380     14 4E 85 A1 |  if_e	sub	fp, #20
0f384     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f388     24 00 90 5D |  if_ne	jmp	#LR__1209
0f38c     00 1E 06 F6 | 	mov	local01, #0
0f390     A7 20 02 FB | 	rdlong	local02, fp
0f394     0C 4E 05 F1 | 	add	fp, #12
0f398     A7 22 02 FB | 	rdlong	local03, fp
0f39c     0C 4E 85 F1 | 	sub	fp, #12
0f3a0     11 21 12 F2 | 	cmp	local02, local03 wc
0f3a4     01 1E 66 36 |  if_ae	neg	local01, #1
0f3a8     A7 1E 62 FC | 	wrlong	local01, fp
0f3ac     10 01 90 FD | 	jmp	#LR__1213
0f3b0                 | LR__1209
0f3b0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
0f3b0     08 4E 05 F1 | 	add	fp, #8
0f3b4     A7 1E 02 FB | 	rdlong	local01, fp
0f3b8     08 4E 85 F1 | 	sub	fp, #8
0f3bc     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f3c0     14 4E 05 A1 |  if_e	add	fp, #20
0f3c4     A7 22 02 AB |  if_e	rdlong	local03, fp
0f3c8     14 4E 85 A1 |  if_e	sub	fp, #20
0f3cc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f3d0     30 00 90 5D |  if_ne	jmp	#LR__1210
0f3d4     00 1E 06 F6 | 	mov	local01, #0
0f3d8     A7 12 02 FB | 	rdlong	arg01, fp
0f3dc     B4 C8 BF FD | 	call	#_convertstring
0f3e0     FD 12 02 F6 | 	mov	arg01, result1
0f3e4     0C 4E 05 F1 | 	add	fp, #12
0f3e8     A7 14 02 FB | 	rdlong	arg02, fp
0f3ec     0C 4E 85 F1 | 	sub	fp, #12
0f3f0     8C 84 B0 FD | 	call	#__system___string_cmp
0f3f4     00 FA 55 F2 | 	cmps	result1, #0 wc
0f3f8     00 1E 26 36 |  if_ae	not	local01, #0
0f3fc     A7 1E 62 FC | 	wrlong	local01, fp
0f400     BC 00 90 FD | 	jmp	#LR__1213
0f404                 | LR__1210
0f404                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
0f404     08 4E 05 F1 | 	add	fp, #8
0f408     A7 1E 02 FB | 	rdlong	local01, fp
0f40c     08 4E 85 F1 | 	sub	fp, #8
0f410     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f414     14 4E 05 A1 |  if_e	add	fp, #20
0f418     A7 22 02 AB |  if_e	rdlong	local03, fp
0f41c     14 4E 85 A1 |  if_e	sub	fp, #20
0f420     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f424     34 00 90 5D |  if_ne	jmp	#LR__1211
0f428     00 1E 06 F6 | 	mov	local01, #0
0f42c     A7 20 02 FB | 	rdlong	local02, fp
0f430     0C 4E 05 F1 | 	add	fp, #12
0f434     A7 12 02 FB | 	rdlong	arg01, fp
0f438     0C 4E 85 F1 | 	sub	fp, #12
0f43c     54 C8 BF FD | 	call	#_convertstring
0f440     FD 14 02 F6 | 	mov	arg02, result1
0f444     10 13 02 F6 | 	mov	arg01, local02
0f448     34 84 B0 FD | 	call	#__system___string_cmp
0f44c     00 FA 55 F2 | 	cmps	result1, #0 wc
0f450     00 1E 26 36 |  if_ae	not	local01, #0
0f454     A7 1E 62 FC | 	wrlong	local01, fp
0f458     64 00 90 FD | 	jmp	#LR__1213
0f45c                 | LR__1211
0f45c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
0f45c     08 4E 05 F1 | 	add	fp, #8
0f460     A7 1E 02 FB | 	rdlong	local01, fp
0f464     08 4E 85 F1 | 	sub	fp, #8
0f468     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f46c     14 4E 05 A1 |  if_e	add	fp, #20
0f470     A7 22 02 AB |  if_e	rdlong	local03, fp
0f474     14 4E 85 A1 |  if_e	sub	fp, #20
0f478     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f47c     3C 00 90 5D |  if_ne	jmp	#LR__1212
0f480     00 1E 06 F6 | 	mov	local01, #0
0f484     A7 12 02 FB | 	rdlong	arg01, fp
0f488     08 C8 BF FD | 	call	#_convertstring
0f48c     FD 20 02 F6 | 	mov	local02, result1
0f490     0C 4E 05 F1 | 	add	fp, #12
0f494     A7 12 02 FB | 	rdlong	arg01, fp
0f498     0C 4E 85 F1 | 	sub	fp, #12
0f49c     F4 C7 BF FD | 	call	#_convertstring
0f4a0     FD 14 02 F6 | 	mov	arg02, result1
0f4a4     10 13 02 F6 | 	mov	arg01, local02
0f4a8     D4 83 B0 FD | 	call	#__system___string_cmp
0f4ac     00 FA 55 F2 | 	cmps	result1, #0 wc
0f4b0     00 1E 26 36 |  if_ae	not	local01, #0
0f4b4     A7 1E 62 FC | 	wrlong	local01, fp
0f4b8     04 00 90 FD | 	jmp	#LR__1213
0f4bc                 | LR__1212
0f4bc     A7 00 68 FC | 	wrlong	#0, fp
0f4c0                 | LR__1213
0f4c0     08 4E 05 F1 | 	add	fp, #8
0f4c4     A7 38 68 FC | 	wrlong	#28, fp
0f4c8     08 4E 85 F1 | 	sub	fp, #8
0f4cc     A7 12 02 F6 | 	mov	arg01, fp
0f4d0     50 97 BF FD | 	call	#_push
0f4d4     A7 F0 03 F6 | 	mov	ptra, fp
0f4d8     B2 00 A0 FD | 	call	#popregs_
0f4dc                 | _do_ge_ret
0f4dc     2D 00 64 FD | 	ret
0f4e0                 | 
0f4e0                 | ' 
0f4e0                 | ' sub do_le
0f4e0                 | _do_le
0f4e0     05 4A 05 F6 | 	mov	COUNT_, #5
0f4e4     A8 00 A0 FD | 	call	#pushregs_
0f4e8     18 F0 07 F1 | 	add	ptra, #24
0f4ec     9C 96 BF FD | 	call	#_pop
0f4f0     FD 1E 02 F6 | 	mov	local01, result1
0f4f4     FE 20 02 F6 | 	mov	local02, result2
0f4f8     FF 22 02 F6 | 	mov	local03, result3
0f4fc     0C 4E 05 F1 | 	add	fp, #12
0f500     A7 1E 62 FC | 	wrlong	local01, fp
0f504     04 4E 05 F1 | 	add	fp, #4
0f508     A7 20 62 FC | 	wrlong	local02, fp
0f50c     04 4E 05 F1 | 	add	fp, #4
0f510     A7 22 62 FC | 	wrlong	local03, fp
0f514     14 4E 85 F1 | 	sub	fp, #20
0f518     70 96 BF FD | 	call	#_pop
0f51c     FF 22 02 F6 | 	mov	local03, result3
0f520     A7 FA 61 FC | 	wrlong	result1, fp
0f524     04 4E 05 F1 | 	add	fp, #4
0f528     A7 FC 61 FC | 	wrlong	result2, fp
0f52c     04 4E 05 F1 | 	add	fp, #4
0f530     A7 22 62 FC | 	wrlong	local03, fp
0f534                 | ' t2=pop()
0f534                 | ' t1=pop()
0f534                 | ' 
0f534                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
0f534     08 4E 85 F1 | 	sub	fp, #8
0f538     1F 22 0E F2 | 	cmp	local03, #31 wz
0f53c     14 4E 05 A1 |  if_e	add	fp, #20
0f540     A7 24 02 AB |  if_e	rdlong	local04, fp
0f544     14 4E 85 A1 |  if_e	sub	fp, #20
0f548     12 23 02 A6 |  if_e	mov	local03, local04
0f54c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f550     28 00 90 5D |  if_ne	jmp	#LR__1220
0f554     00 1E 06 F6 | 	mov	local01, #0
0f558     A7 12 02 FB | 	rdlong	arg01, fp
0f55c     0C 4E 05 F1 | 	add	fp, #12
0f560     A7 14 02 FB | 	rdlong	arg02, fp
0f564     0C 4E 85 F1 | 	sub	fp, #12
0f568     14 83 B0 FD | 	call	#__system___string_cmp
0f56c     01 FA 55 F2 | 	cmps	result1, #1 wc
0f570     00 1E 26 C6 |  if_b	not	local01, #0
0f574     A7 1E 62 FC | 	wrlong	local01, fp
0f578     1C 04 90 FD | 	jmp	#LR__1233
0f57c                 | LR__1220
0f57c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
0f57c     08 4E 05 F1 | 	add	fp, #8
0f580     A7 1E 02 FB | 	rdlong	local01, fp
0f584     08 4E 85 F1 | 	sub	fp, #8
0f588     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f58c     14 4E 05 A1 |  if_e	add	fp, #20
0f590     A7 24 02 AB |  if_e	rdlong	local04, fp
0f594     14 4E 85 A1 |  if_e	sub	fp, #20
0f598     12 23 02 A6 |  if_e	mov	local03, local04
0f59c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f5a0     2C 00 90 5D |  if_ne	jmp	#LR__1221
0f5a4     00 1E 06 F6 | 	mov	local01, #0
0f5a8     A7 12 02 FB | 	rdlong	arg01, fp
0f5ac     0C 4E 05 F1 | 	add	fp, #12
0f5b0     A7 14 02 FB | 	rdlong	arg02, fp
0f5b4     0C 4E 85 F1 | 	sub	fp, #12
0f5b8     01 16 06 F6 | 	mov	arg03, #1
0f5bc     DC AF B0 FD | 	call	#__system___float_cmp
0f5c0     01 FA 55 F2 | 	cmps	result1, #1 wc
0f5c4     00 1E 26 C6 |  if_b	not	local01, #0
0f5c8     A7 1E 62 FC | 	wrlong	local01, fp
0f5cc     C8 03 90 FD | 	jmp	#LR__1233
0f5d0                 | LR__1221
0f5d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
0f5d0     08 4E 05 F1 | 	add	fp, #8
0f5d4     A7 1E 02 FB | 	rdlong	local01, fp
0f5d8     08 4E 85 F1 | 	sub	fp, #8
0f5dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f5e0     14 4E 05 A1 |  if_e	add	fp, #20
0f5e4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f5e8     14 4E 85 A1 |  if_e	sub	fp, #20
0f5ec     12 23 02 A6 |  if_e	mov	local03, local04
0f5f0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f5f4     48 00 90 5D |  if_ne	jmp	#LR__1222
0f5f8     00 1E 06 F6 | 	mov	local01, #0
0f5fc     A7 20 02 FB | 	rdlong	local02, fp
0f600     0C 4E 05 F1 | 	add	fp, #12
0f604     A7 12 02 FB | 	rdlong	arg01, fp
0f608     0C 4E 85 F1 | 	sub	fp, #12
0f60c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f610     1F 26 C6 C9 |  if_b	decod	local05, #31
0f614     00 26 06 36 |  if_ae	mov	local05, #0
0f618     20 A8 B0 FD | 	call	#__system___float_fromuns
0f61c     13 FB 61 F5 | 	xor	result1, local05
0f620     FD 14 02 F6 | 	mov	arg02, result1
0f624     10 13 02 F6 | 	mov	arg01, local02
0f628     01 16 06 F6 | 	mov	arg03, #1
0f62c     6C AF B0 FD | 	call	#__system___float_cmp
0f630     01 FA 55 F2 | 	cmps	result1, #1 wc
0f634     00 1E 26 C6 |  if_b	not	local01, #0
0f638     A7 1E 62 FC | 	wrlong	local01, fp
0f63c     58 03 90 FD | 	jmp	#LR__1233
0f640                 | LR__1222
0f640                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
0f640     08 4E 05 F1 | 	add	fp, #8
0f644     A7 1E 02 FB | 	rdlong	local01, fp
0f648     08 4E 85 F1 | 	sub	fp, #8
0f64c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f650     14 4E 05 A1 |  if_e	add	fp, #20
0f654     A7 24 02 AB |  if_e	rdlong	local04, fp
0f658     14 4E 85 A1 |  if_e	sub	fp, #20
0f65c     12 23 02 A6 |  if_e	mov	local03, local04
0f660     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f664     38 00 90 5D |  if_ne	jmp	#LR__1223
0f668     00 1E 06 F6 | 	mov	local01, #0
0f66c     A7 20 02 FB | 	rdlong	local02, fp
0f670     0C 4E 05 F1 | 	add	fp, #12
0f674     A7 12 02 FB | 	rdlong	arg01, fp
0f678     0C 4E 85 F1 | 	sub	fp, #12
0f67c     BC A7 B0 FD | 	call	#__system___float_fromuns
0f680     FD 14 02 F6 | 	mov	arg02, result1
0f684     10 13 02 F6 | 	mov	arg01, local02
0f688     01 16 06 F6 | 	mov	arg03, #1
0f68c     0C AF B0 FD | 	call	#__system___float_cmp
0f690     01 FA 55 F2 | 	cmps	result1, #1 wc
0f694     00 1E 26 C6 |  if_b	not	local01, #0
0f698     A7 1E 62 FC | 	wrlong	local01, fp
0f69c     F8 02 90 FD | 	jmp	#LR__1233
0f6a0                 | LR__1223
0f6a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
0f6a0     08 4E 05 F1 | 	add	fp, #8
0f6a4     A7 1E 02 FB | 	rdlong	local01, fp
0f6a8     08 4E 85 F1 | 	sub	fp, #8
0f6ac     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f6b0     14 4E 05 A1 |  if_e	add	fp, #20
0f6b4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f6b8     14 4E 85 A1 |  if_e	sub	fp, #20
0f6bc     12 23 02 A6 |  if_e	mov	local03, local04
0f6c0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f6c4     44 00 90 5D |  if_ne	jmp	#LR__1224
0f6c8     00 1E 06 F6 | 	mov	local01, #0
0f6cc     A7 12 02 FB | 	rdlong	arg01, fp
0f6d0     09 13 52 F6 | 	abs	arg01, arg01 wc
0f6d4     1F 26 C6 C9 |  if_b	decod	local05, #31
0f6d8     00 26 06 36 |  if_ae	mov	local05, #0
0f6dc     5C A7 B0 FD | 	call	#__system___float_fromuns
0f6e0     13 FB 61 F5 | 	xor	result1, local05
0f6e4     FD 12 02 F6 | 	mov	arg01, result1
0f6e8     0C 4E 05 F1 | 	add	fp, #12
0f6ec     A7 14 02 FB | 	rdlong	arg02, fp
0f6f0     0C 4E 85 F1 | 	sub	fp, #12
0f6f4     01 16 06 F6 | 	mov	arg03, #1
0f6f8     A0 AE B0 FD | 	call	#__system___float_cmp
0f6fc     01 FA 55 F2 | 	cmps	result1, #1 wc
0f700     00 1E 26 C6 |  if_b	not	local01, #0
0f704     A7 1E 62 FC | 	wrlong	local01, fp
0f708     8C 02 90 FD | 	jmp	#LR__1233
0f70c                 | LR__1224
0f70c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
0f70c     08 4E 05 F1 | 	add	fp, #8
0f710     A7 1E 02 FB | 	rdlong	local01, fp
0f714     08 4E 85 F1 | 	sub	fp, #8
0f718     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f71c     14 4E 05 A1 |  if_e	add	fp, #20
0f720     A7 24 02 AB |  if_e	rdlong	local04, fp
0f724     14 4E 85 A1 |  if_e	sub	fp, #20
0f728     12 23 02 A6 |  if_e	mov	local03, local04
0f72c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f730     24 00 90 5D |  if_ne	jmp	#LR__1225
0f734     00 1E 06 F6 | 	mov	local01, #0
0f738     A7 20 02 FB | 	rdlong	local02, fp
0f73c     0C 4E 05 F1 | 	add	fp, #12
0f740     A7 22 02 FB | 	rdlong	local03, fp
0f744     0C 4E 85 F1 | 	sub	fp, #12
0f748     11 21 5A F2 | 	cmps	local02, local03 wcz
0f74c     01 1E 66 E6 |  if_be	neg	local01, #1
0f750     A7 1E 62 FC | 	wrlong	local01, fp
0f754     40 02 90 FD | 	jmp	#LR__1233
0f758                 | LR__1225
0f758                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
0f758     08 4E 05 F1 | 	add	fp, #8
0f75c     A7 1E 02 FB | 	rdlong	local01, fp
0f760     08 4E 85 F1 | 	sub	fp, #8
0f764     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f768     14 4E 05 A1 |  if_e	add	fp, #20
0f76c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f770     14 4E 85 A1 |  if_e	sub	fp, #20
0f774     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f778     24 00 90 5D |  if_ne	jmp	#LR__1226
0f77c     00 1E 06 F6 | 	mov	local01, #0
0f780     A7 20 02 FB | 	rdlong	local02, fp
0f784     0C 4E 05 F1 | 	add	fp, #12
0f788     A7 22 02 FB | 	rdlong	local03, fp
0f78c     0C 4E 85 F1 | 	sub	fp, #12
0f790     11 21 5A F2 | 	cmps	local02, local03 wcz
0f794     01 1E 66 E6 |  if_be	neg	local01, #1
0f798     A7 1E 62 FC | 	wrlong	local01, fp
0f79c     F8 01 90 FD | 	jmp	#LR__1233
0f7a0                 | LR__1226
0f7a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
0f7a0     08 4E 05 F1 | 	add	fp, #8
0f7a4     A7 1E 02 FB | 	rdlong	local01, fp
0f7a8     08 4E 85 F1 | 	sub	fp, #8
0f7ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f7b0     14 4E 05 A1 |  if_e	add	fp, #20
0f7b4     A7 22 02 AB |  if_e	rdlong	local03, fp
0f7b8     14 4E 85 A1 |  if_e	sub	fp, #20
0f7bc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f7c0     34 00 90 5D |  if_ne	jmp	#LR__1227
0f7c4     00 1E 06 F6 | 	mov	local01, #0
0f7c8     A7 12 02 FB | 	rdlong	arg01, fp
0f7cc     6C A6 B0 FD | 	call	#__system___float_fromuns
0f7d0     FD 12 02 F6 | 	mov	arg01, result1
0f7d4     0C 4E 05 F1 | 	add	fp, #12
0f7d8     A7 14 02 FB | 	rdlong	arg02, fp
0f7dc     0C 4E 85 F1 | 	sub	fp, #12
0f7e0     01 16 06 F6 | 	mov	arg03, #1
0f7e4     B4 AD B0 FD | 	call	#__system___float_cmp
0f7e8     01 FA 55 F2 | 	cmps	result1, #1 wc
0f7ec     00 1E 26 C6 |  if_b	not	local01, #0
0f7f0     A7 1E 62 FC | 	wrlong	local01, fp
0f7f4     A0 01 90 FD | 	jmp	#LR__1233
0f7f8                 | LR__1227
0f7f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
0f7f8     08 4E 05 F1 | 	add	fp, #8
0f7fc     A7 1E 02 FB | 	rdlong	local01, fp
0f800     08 4E 85 F1 | 	sub	fp, #8
0f804     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f808     14 4E 05 A1 |  if_e	add	fp, #20
0f80c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f810     14 4E 85 A1 |  if_e	sub	fp, #20
0f814     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f818     24 00 90 5D |  if_ne	jmp	#LR__1228
0f81c     00 1E 06 F6 | 	mov	local01, #0
0f820     A7 20 02 FB | 	rdlong	local02, fp
0f824     0C 4E 05 F1 | 	add	fp, #12
0f828     A7 22 02 FB | 	rdlong	local03, fp
0f82c     0C 4E 85 F1 | 	sub	fp, #12
0f830     11 21 5A F2 | 	cmps	local02, local03 wcz
0f834     01 1E 66 E6 |  if_be	neg	local01, #1
0f838     A7 1E 62 FC | 	wrlong	local01, fp
0f83c     58 01 90 FD | 	jmp	#LR__1233
0f840                 | LR__1228
0f840                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
0f840     08 4E 05 F1 | 	add	fp, #8
0f844     A7 1E 02 FB | 	rdlong	local01, fp
0f848     08 4E 85 F1 | 	sub	fp, #8
0f84c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f850     14 4E 05 A1 |  if_e	add	fp, #20
0f854     A7 22 02 AB |  if_e	rdlong	local03, fp
0f858     14 4E 85 A1 |  if_e	sub	fp, #20
0f85c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f860     24 00 90 5D |  if_ne	jmp	#LR__1229
0f864     00 1E 06 F6 | 	mov	local01, #0
0f868     A7 20 02 FB | 	rdlong	local02, fp
0f86c     0C 4E 05 F1 | 	add	fp, #12
0f870     A7 22 02 FB | 	rdlong	local03, fp
0f874     0C 4E 85 F1 | 	sub	fp, #12
0f878     11 21 1A F2 | 	cmp	local02, local03 wcz
0f87c     01 1E 66 E6 |  if_be	neg	local01, #1
0f880     A7 1E 62 FC | 	wrlong	local01, fp
0f884     10 01 90 FD | 	jmp	#LR__1233
0f888                 | LR__1229
0f888                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
0f888     08 4E 05 F1 | 	add	fp, #8
0f88c     A7 1E 02 FB | 	rdlong	local01, fp
0f890     08 4E 85 F1 | 	sub	fp, #8
0f894     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f898     14 4E 05 A1 |  if_e	add	fp, #20
0f89c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f8a0     14 4E 85 A1 |  if_e	sub	fp, #20
0f8a4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f8a8     30 00 90 5D |  if_ne	jmp	#LR__1230
0f8ac     00 1E 06 F6 | 	mov	local01, #0
0f8b0     A7 12 02 FB | 	rdlong	arg01, fp
0f8b4     DC C3 BF FD | 	call	#_convertstring
0f8b8     FD 12 02 F6 | 	mov	arg01, result1
0f8bc     0C 4E 05 F1 | 	add	fp, #12
0f8c0     A7 14 02 FB | 	rdlong	arg02, fp
0f8c4     0C 4E 85 F1 | 	sub	fp, #12
0f8c8     B4 7F B0 FD | 	call	#__system___string_cmp
0f8cc     01 FA 55 F2 | 	cmps	result1, #1 wc
0f8d0     00 1E 26 C6 |  if_b	not	local01, #0
0f8d4     A7 1E 62 FC | 	wrlong	local01, fp
0f8d8     BC 00 90 FD | 	jmp	#LR__1233
0f8dc                 | LR__1230
0f8dc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
0f8dc     08 4E 05 F1 | 	add	fp, #8
0f8e0     A7 1E 02 FB | 	rdlong	local01, fp
0f8e4     08 4E 85 F1 | 	sub	fp, #8
0f8e8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f8ec     14 4E 05 A1 |  if_e	add	fp, #20
0f8f0     A7 22 02 AB |  if_e	rdlong	local03, fp
0f8f4     14 4E 85 A1 |  if_e	sub	fp, #20
0f8f8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f8fc     34 00 90 5D |  if_ne	jmp	#LR__1231
0f900     00 1E 06 F6 | 	mov	local01, #0
0f904     A7 20 02 FB | 	rdlong	local02, fp
0f908     0C 4E 05 F1 | 	add	fp, #12
0f90c     A7 12 02 FB | 	rdlong	arg01, fp
0f910     0C 4E 85 F1 | 	sub	fp, #12
0f914     7C C3 BF FD | 	call	#_convertstring
0f918     FD 14 02 F6 | 	mov	arg02, result1
0f91c     10 13 02 F6 | 	mov	arg01, local02
0f920     5C 7F B0 FD | 	call	#__system___string_cmp
0f924     01 FA 55 F2 | 	cmps	result1, #1 wc
0f928     00 1E 26 C6 |  if_b	not	local01, #0
0f92c     A7 1E 62 FC | 	wrlong	local01, fp
0f930     64 00 90 FD | 	jmp	#LR__1233
0f934                 | LR__1231
0f934                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
0f934     08 4E 05 F1 | 	add	fp, #8
0f938     A7 1E 02 FB | 	rdlong	local01, fp
0f93c     08 4E 85 F1 | 	sub	fp, #8
0f940     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f944     14 4E 05 A1 |  if_e	add	fp, #20
0f948     A7 22 02 AB |  if_e	rdlong	local03, fp
0f94c     14 4E 85 A1 |  if_e	sub	fp, #20
0f950     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f954     3C 00 90 5D |  if_ne	jmp	#LR__1232
0f958     00 1E 06 F6 | 	mov	local01, #0
0f95c     A7 12 02 FB | 	rdlong	arg01, fp
0f960     30 C3 BF FD | 	call	#_convertstring
0f964     FD 20 02 F6 | 	mov	local02, result1
0f968     0C 4E 05 F1 | 	add	fp, #12
0f96c     A7 12 02 FB | 	rdlong	arg01, fp
0f970     0C 4E 85 F1 | 	sub	fp, #12
0f974     1C C3 BF FD | 	call	#_convertstring
0f978     FD 14 02 F6 | 	mov	arg02, result1
0f97c     10 13 02 F6 | 	mov	arg01, local02
0f980     FC 7E B0 FD | 	call	#__system___string_cmp
0f984     01 FA 55 F2 | 	cmps	result1, #1 wc
0f988     00 1E 26 C6 |  if_b	not	local01, #0
0f98c     A7 1E 62 FC | 	wrlong	local01, fp
0f990     04 00 90 FD | 	jmp	#LR__1233
0f994                 | LR__1232
0f994     A7 00 68 FC | 	wrlong	#0, fp
0f998                 | LR__1233
0f998     08 4E 05 F1 | 	add	fp, #8
0f99c     A7 38 68 FC | 	wrlong	#28, fp
0f9a0     08 4E 85 F1 | 	sub	fp, #8
0f9a4     A7 12 02 F6 | 	mov	arg01, fp
0f9a8     78 92 BF FD | 	call	#_push
0f9ac     A7 F0 03 F6 | 	mov	ptra, fp
0f9b0     B2 00 A0 FD | 	call	#popregs_
0f9b4                 | _do_le_ret
0f9b4     2D 00 64 FD | 	ret
0f9b8                 | 
0f9b8                 | ' 
0f9b8                 | ' 
0f9b8                 | ' sub do_ne
0f9b8                 | _do_ne
0f9b8     05 4A 05 F6 | 	mov	COUNT_, #5
0f9bc     A8 00 A0 FD | 	call	#pushregs_
0f9c0     18 F0 07 F1 | 	add	ptra, #24
0f9c4     C4 91 BF FD | 	call	#_pop
0f9c8     FD 1E 02 F6 | 	mov	local01, result1
0f9cc     FE 20 02 F6 | 	mov	local02, result2
0f9d0     FF 22 02 F6 | 	mov	local03, result3
0f9d4     0C 4E 05 F1 | 	add	fp, #12
0f9d8     A7 1E 62 FC | 	wrlong	local01, fp
0f9dc     04 4E 05 F1 | 	add	fp, #4
0f9e0     A7 20 62 FC | 	wrlong	local02, fp
0f9e4     04 4E 05 F1 | 	add	fp, #4
0f9e8     A7 22 62 FC | 	wrlong	local03, fp
0f9ec     14 4E 85 F1 | 	sub	fp, #20
0f9f0     98 91 BF FD | 	call	#_pop
0f9f4     FF 22 02 F6 | 	mov	local03, result3
0f9f8     A7 FA 61 FC | 	wrlong	result1, fp
0f9fc     04 4E 05 F1 | 	add	fp, #4
0fa00     A7 FC 61 FC | 	wrlong	result2, fp
0fa04     04 4E 05 F1 | 	add	fp, #4
0fa08     A7 22 62 FC | 	wrlong	local03, fp
0fa0c                 | ' t2=pop()
0fa0c                 | ' t1=pop()
0fa0c                 | ' 
0fa0c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
0fa0c     08 4E 85 F1 | 	sub	fp, #8
0fa10     1F 22 0E F2 | 	cmp	local03, #31 wz
0fa14     14 4E 05 A1 |  if_e	add	fp, #20
0fa18     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa1c     14 4E 85 A1 |  if_e	sub	fp, #20
0fa20     12 23 02 A6 |  if_e	mov	local03, local04
0fa24     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fa28     28 00 90 5D |  if_ne	jmp	#LR__1240
0fa2c     00 1E 06 F6 | 	mov	local01, #0
0fa30     A7 12 02 FB | 	rdlong	arg01, fp
0fa34     0C 4E 05 F1 | 	add	fp, #12
0fa38     A7 14 02 FB | 	rdlong	arg02, fp
0fa3c     0C 4E 85 F1 | 	sub	fp, #12
0fa40     3C 7E B0 FD | 	call	#__system___string_cmp
0fa44     00 FA 0D F2 | 	cmp	result1, #0 wz
0fa48     00 1E 26 56 |  if_ne	not	local01, #0
0fa4c     A7 1E 62 FC | 	wrlong	local01, fp
0fa50     1C 04 90 FD | 	jmp	#LR__1253
0fa54                 | LR__1240
0fa54                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
0fa54     08 4E 05 F1 | 	add	fp, #8
0fa58     A7 1E 02 FB | 	rdlong	local01, fp
0fa5c     08 4E 85 F1 | 	sub	fp, #8
0fa60     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fa64     14 4E 05 A1 |  if_e	add	fp, #20
0fa68     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa6c     14 4E 85 A1 |  if_e	sub	fp, #20
0fa70     12 23 02 A6 |  if_e	mov	local03, local04
0fa74     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fa78     2C 00 90 5D |  if_ne	jmp	#LR__1241
0fa7c     00 1E 06 F6 | 	mov	local01, #0
0fa80     A7 12 02 FB | 	rdlong	arg01, fp
0fa84     0C 4E 05 F1 | 	add	fp, #12
0fa88     A7 14 02 FB | 	rdlong	arg02, fp
0fa8c     0C 4E 85 F1 | 	sub	fp, #12
0fa90     01 16 06 F6 | 	mov	arg03, #1
0fa94     04 AB B0 FD | 	call	#__system___float_cmp
0fa98     00 FA 0D F2 | 	cmp	result1, #0 wz
0fa9c     00 1E 26 56 |  if_ne	not	local01, #0
0faa0     A7 1E 62 FC | 	wrlong	local01, fp
0faa4     C8 03 90 FD | 	jmp	#LR__1253
0faa8                 | LR__1241
0faa8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
0faa8     08 4E 05 F1 | 	add	fp, #8
0faac     A7 1E 02 FB | 	rdlong	local01, fp
0fab0     08 4E 85 F1 | 	sub	fp, #8
0fab4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fab8     14 4E 05 A1 |  if_e	add	fp, #20
0fabc     A7 24 02 AB |  if_e	rdlong	local04, fp
0fac0     14 4E 85 A1 |  if_e	sub	fp, #20
0fac4     12 23 02 A6 |  if_e	mov	local03, local04
0fac8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0facc     48 00 90 5D |  if_ne	jmp	#LR__1242
0fad0     00 1E 06 F6 | 	mov	local01, #0
0fad4     A7 20 02 FB | 	rdlong	local02, fp
0fad8     0C 4E 05 F1 | 	add	fp, #12
0fadc     A7 12 02 FB | 	rdlong	arg01, fp
0fae0     0C 4E 85 F1 | 	sub	fp, #12
0fae4     09 13 52 F6 | 	abs	arg01, arg01 wc
0fae8     1F 26 C6 C9 |  if_b	decod	local05, #31
0faec     00 26 06 36 |  if_ae	mov	local05, #0
0faf0     48 A3 B0 FD | 	call	#__system___float_fromuns
0faf4     13 FB 61 F5 | 	xor	result1, local05
0faf8     FD 14 02 F6 | 	mov	arg02, result1
0fafc     10 13 02 F6 | 	mov	arg01, local02
0fb00     01 16 06 F6 | 	mov	arg03, #1
0fb04     94 AA B0 FD | 	call	#__system___float_cmp
0fb08     00 FA 0D F2 | 	cmp	result1, #0 wz
0fb0c     00 1E 26 56 |  if_ne	not	local01, #0
0fb10     A7 1E 62 FC | 	wrlong	local01, fp
0fb14     58 03 90 FD | 	jmp	#LR__1253
0fb18                 | LR__1242
0fb18                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
0fb18     08 4E 05 F1 | 	add	fp, #8
0fb1c     A7 1E 02 FB | 	rdlong	local01, fp
0fb20     08 4E 85 F1 | 	sub	fp, #8
0fb24     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fb28     14 4E 05 A1 |  if_e	add	fp, #20
0fb2c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fb30     14 4E 85 A1 |  if_e	sub	fp, #20
0fb34     12 23 02 A6 |  if_e	mov	local03, local04
0fb38     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fb3c     38 00 90 5D |  if_ne	jmp	#LR__1243
0fb40     00 1E 06 F6 | 	mov	local01, #0
0fb44     A7 20 02 FB | 	rdlong	local02, fp
0fb48     0C 4E 05 F1 | 	add	fp, #12
0fb4c     A7 12 02 FB | 	rdlong	arg01, fp
0fb50     0C 4E 85 F1 | 	sub	fp, #12
0fb54     E4 A2 B0 FD | 	call	#__system___float_fromuns
0fb58     FD 14 02 F6 | 	mov	arg02, result1
0fb5c     10 13 02 F6 | 	mov	arg01, local02
0fb60     01 16 06 F6 | 	mov	arg03, #1
0fb64     34 AA B0 FD | 	call	#__system___float_cmp
0fb68     00 FA 0D F2 | 	cmp	result1, #0 wz
0fb6c     00 1E 26 56 |  if_ne	not	local01, #0
0fb70     A7 1E 62 FC | 	wrlong	local01, fp
0fb74     F8 02 90 FD | 	jmp	#LR__1253
0fb78                 | LR__1243
0fb78                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
0fb78     08 4E 05 F1 | 	add	fp, #8
0fb7c     A7 1E 02 FB | 	rdlong	local01, fp
0fb80     08 4E 85 F1 | 	sub	fp, #8
0fb84     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fb88     14 4E 05 A1 |  if_e	add	fp, #20
0fb8c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fb90     14 4E 85 A1 |  if_e	sub	fp, #20
0fb94     12 23 02 A6 |  if_e	mov	local03, local04
0fb98     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fb9c     44 00 90 5D |  if_ne	jmp	#LR__1244
0fba0     00 1E 06 F6 | 	mov	local01, #0
0fba4     A7 12 02 FB | 	rdlong	arg01, fp
0fba8     09 13 52 F6 | 	abs	arg01, arg01 wc
0fbac     1F 26 C6 C9 |  if_b	decod	local05, #31
0fbb0     00 26 06 36 |  if_ae	mov	local05, #0
0fbb4     84 A2 B0 FD | 	call	#__system___float_fromuns
0fbb8     13 FB 61 F5 | 	xor	result1, local05
0fbbc     FD 12 02 F6 | 	mov	arg01, result1
0fbc0     0C 4E 05 F1 | 	add	fp, #12
0fbc4     A7 14 02 FB | 	rdlong	arg02, fp
0fbc8     0C 4E 85 F1 | 	sub	fp, #12
0fbcc     01 16 06 F6 | 	mov	arg03, #1
0fbd0     C8 A9 B0 FD | 	call	#__system___float_cmp
0fbd4     00 FA 0D F2 | 	cmp	result1, #0 wz
0fbd8     00 1E 26 56 |  if_ne	not	local01, #0
0fbdc     A7 1E 62 FC | 	wrlong	local01, fp
0fbe0     8C 02 90 FD | 	jmp	#LR__1253
0fbe4                 | LR__1244
0fbe4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
0fbe4     08 4E 05 F1 | 	add	fp, #8
0fbe8     A7 1E 02 FB | 	rdlong	local01, fp
0fbec     08 4E 85 F1 | 	sub	fp, #8
0fbf0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fbf4     14 4E 05 A1 |  if_e	add	fp, #20
0fbf8     A7 24 02 AB |  if_e	rdlong	local04, fp
0fbfc     14 4E 85 A1 |  if_e	sub	fp, #20
0fc00     12 23 02 A6 |  if_e	mov	local03, local04
0fc04     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fc08     24 00 90 5D |  if_ne	jmp	#LR__1245
0fc0c     00 1E 06 F6 | 	mov	local01, #0
0fc10     A7 20 02 FB | 	rdlong	local02, fp
0fc14     0C 4E 05 F1 | 	add	fp, #12
0fc18     A7 22 02 FB | 	rdlong	local03, fp
0fc1c     0C 4E 85 F1 | 	sub	fp, #12
0fc20     11 21 0A F2 | 	cmp	local02, local03 wz
0fc24     01 1E 66 56 |  if_ne	neg	local01, #1
0fc28     A7 1E 62 FC | 	wrlong	local01, fp
0fc2c     40 02 90 FD | 	jmp	#LR__1253
0fc30                 | LR__1245
0fc30                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
0fc30     08 4E 05 F1 | 	add	fp, #8
0fc34     A7 1E 02 FB | 	rdlong	local01, fp
0fc38     08 4E 85 F1 | 	sub	fp, #8
0fc3c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fc40     14 4E 05 A1 |  if_e	add	fp, #20
0fc44     A7 24 02 AB |  if_e	rdlong	local04, fp
0fc48     14 4E 85 A1 |  if_e	sub	fp, #20
0fc4c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0fc50     24 00 90 5D |  if_ne	jmp	#LR__1246
0fc54     00 1E 06 F6 | 	mov	local01, #0
0fc58     A7 20 02 FB | 	rdlong	local02, fp
0fc5c     0C 4E 05 F1 | 	add	fp, #12
0fc60     A7 22 02 FB | 	rdlong	local03, fp
0fc64     0C 4E 85 F1 | 	sub	fp, #12
0fc68     11 21 0A F2 | 	cmp	local02, local03 wz
0fc6c     01 1E 66 56 |  if_ne	neg	local01, #1
0fc70     A7 1E 62 FC | 	wrlong	local01, fp
0fc74     F8 01 90 FD | 	jmp	#LR__1253
0fc78                 | LR__1246
0fc78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
0fc78     08 4E 05 F1 | 	add	fp, #8
0fc7c     A7 1E 02 FB | 	rdlong	local01, fp
0fc80     08 4E 85 F1 | 	sub	fp, #8
0fc84     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fc88     14 4E 05 A1 |  if_e	add	fp, #20
0fc8c     A7 22 02 AB |  if_e	rdlong	local03, fp
0fc90     14 4E 85 A1 |  if_e	sub	fp, #20
0fc94     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fc98     34 00 90 5D |  if_ne	jmp	#LR__1247
0fc9c     00 1E 06 F6 | 	mov	local01, #0
0fca0     A7 12 02 FB | 	rdlong	arg01, fp
0fca4     94 A1 B0 FD | 	call	#__system___float_fromuns
0fca8     FD 12 02 F6 | 	mov	arg01, result1
0fcac     0C 4E 05 F1 | 	add	fp, #12
0fcb0     A7 14 02 FB | 	rdlong	arg02, fp
0fcb4     0C 4E 85 F1 | 	sub	fp, #12
0fcb8     01 16 06 F6 | 	mov	arg03, #1
0fcbc     DC A8 B0 FD | 	call	#__system___float_cmp
0fcc0     00 FA 0D F2 | 	cmp	result1, #0 wz
0fcc4     00 1E 26 56 |  if_ne	not	local01, #0
0fcc8     A7 1E 62 FC | 	wrlong	local01, fp
0fccc     A0 01 90 FD | 	jmp	#LR__1253
0fcd0                 | LR__1247
0fcd0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
0fcd0     08 4E 05 F1 | 	add	fp, #8
0fcd4     A7 1E 02 FB | 	rdlong	local01, fp
0fcd8     08 4E 85 F1 | 	sub	fp, #8
0fcdc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fce0     14 4E 05 A1 |  if_e	add	fp, #20
0fce4     A7 22 02 AB |  if_e	rdlong	local03, fp
0fce8     14 4E 85 A1 |  if_e	sub	fp, #20
0fcec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fcf0     24 00 90 5D |  if_ne	jmp	#LR__1248
0fcf4     00 1E 06 F6 | 	mov	local01, #0
0fcf8     A7 20 02 FB | 	rdlong	local02, fp
0fcfc     0C 4E 05 F1 | 	add	fp, #12
0fd00     A7 22 02 FB | 	rdlong	local03, fp
0fd04     0C 4E 85 F1 | 	sub	fp, #12
0fd08     11 21 0A F2 | 	cmp	local02, local03 wz
0fd0c     01 1E 66 56 |  if_ne	neg	local01, #1
0fd10     A7 1E 62 FC | 	wrlong	local01, fp
0fd14     58 01 90 FD | 	jmp	#LR__1253
0fd18                 | LR__1248
0fd18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
0fd18     08 4E 05 F1 | 	add	fp, #8
0fd1c     A7 1E 02 FB | 	rdlong	local01, fp
0fd20     08 4E 85 F1 | 	sub	fp, #8
0fd24     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fd28     14 4E 05 A1 |  if_e	add	fp, #20
0fd2c     A7 22 02 AB |  if_e	rdlong	local03, fp
0fd30     14 4E 85 A1 |  if_e	sub	fp, #20
0fd34     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fd38     24 00 90 5D |  if_ne	jmp	#LR__1249
0fd3c     00 1E 06 F6 | 	mov	local01, #0
0fd40     A7 20 02 FB | 	rdlong	local02, fp
0fd44     0C 4E 05 F1 | 	add	fp, #12
0fd48     A7 22 02 FB | 	rdlong	local03, fp
0fd4c     0C 4E 85 F1 | 	sub	fp, #12
0fd50     11 21 0A F2 | 	cmp	local02, local03 wz
0fd54     01 1E 66 56 |  if_ne	neg	local01, #1
0fd58     A7 1E 62 FC | 	wrlong	local01, fp
0fd5c     10 01 90 FD | 	jmp	#LR__1253
0fd60                 | LR__1249
0fd60                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
0fd60     08 4E 05 F1 | 	add	fp, #8
0fd64     A7 1E 02 FB | 	rdlong	local01, fp
0fd68     08 4E 85 F1 | 	sub	fp, #8
0fd6c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fd70     14 4E 05 A1 |  if_e	add	fp, #20
0fd74     A7 22 02 AB |  if_e	rdlong	local03, fp
0fd78     14 4E 85 A1 |  if_e	sub	fp, #20
0fd7c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fd80     30 00 90 5D |  if_ne	jmp	#LR__1250
0fd84     00 1E 06 F6 | 	mov	local01, #0
0fd88     A7 12 02 FB | 	rdlong	arg01, fp
0fd8c     04 BF BF FD | 	call	#_convertstring
0fd90     FD 12 02 F6 | 	mov	arg01, result1
0fd94     0C 4E 05 F1 | 	add	fp, #12
0fd98     A7 14 02 FB | 	rdlong	arg02, fp
0fd9c     0C 4E 85 F1 | 	sub	fp, #12
0fda0     DC 7A B0 FD | 	call	#__system___string_cmp
0fda4     00 FA 0D F2 | 	cmp	result1, #0 wz
0fda8     00 1E 26 56 |  if_ne	not	local01, #0
0fdac     A7 1E 62 FC | 	wrlong	local01, fp
0fdb0     BC 00 90 FD | 	jmp	#LR__1253
0fdb4                 | LR__1250
0fdb4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
0fdb4     08 4E 05 F1 | 	add	fp, #8
0fdb8     A7 1E 02 FB | 	rdlong	local01, fp
0fdbc     08 4E 85 F1 | 	sub	fp, #8
0fdc0     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fdc4     14 4E 05 A1 |  if_e	add	fp, #20
0fdc8     A7 22 02 AB |  if_e	rdlong	local03, fp
0fdcc     14 4E 85 A1 |  if_e	sub	fp, #20
0fdd0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fdd4     34 00 90 5D |  if_ne	jmp	#LR__1251
0fdd8     00 1E 06 F6 | 	mov	local01, #0
0fddc     A7 20 02 FB | 	rdlong	local02, fp
0fde0     0C 4E 05 F1 | 	add	fp, #12
0fde4     A7 12 02 FB | 	rdlong	arg01, fp
0fde8     0C 4E 85 F1 | 	sub	fp, #12
0fdec     A4 BE BF FD | 	call	#_convertstring
0fdf0     FD 14 02 F6 | 	mov	arg02, result1
0fdf4     10 13 02 F6 | 	mov	arg01, local02
0fdf8     84 7A B0 FD | 	call	#__system___string_cmp
0fdfc     00 FA 0D F2 | 	cmp	result1, #0 wz
0fe00     00 1E 26 56 |  if_ne	not	local01, #0
0fe04     A7 1E 62 FC | 	wrlong	local01, fp
0fe08     64 00 90 FD | 	jmp	#LR__1253
0fe0c                 | LR__1251
0fe0c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
0fe0c     08 4E 05 F1 | 	add	fp, #8
0fe10     A7 1E 02 FB | 	rdlong	local01, fp
0fe14     08 4E 85 F1 | 	sub	fp, #8
0fe18     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fe1c     14 4E 05 A1 |  if_e	add	fp, #20
0fe20     A7 22 02 AB |  if_e	rdlong	local03, fp
0fe24     14 4E 85 A1 |  if_e	sub	fp, #20
0fe28     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fe2c     3C 00 90 5D |  if_ne	jmp	#LR__1252
0fe30     00 1E 06 F6 | 	mov	local01, #0
0fe34     A7 12 02 FB | 	rdlong	arg01, fp
0fe38     58 BE BF FD | 	call	#_convertstring
0fe3c     FD 20 02 F6 | 	mov	local02, result1
0fe40     0C 4E 05 F1 | 	add	fp, #12
0fe44     A7 12 02 FB | 	rdlong	arg01, fp
0fe48     0C 4E 85 F1 | 	sub	fp, #12
0fe4c     44 BE BF FD | 	call	#_convertstring
0fe50     FD 14 02 F6 | 	mov	arg02, result1
0fe54     10 13 02 F6 | 	mov	arg01, local02
0fe58     24 7A B0 FD | 	call	#__system___string_cmp
0fe5c     00 FA 0D F2 | 	cmp	result1, #0 wz
0fe60     00 1E 26 56 |  if_ne	not	local01, #0
0fe64     A7 1E 62 FC | 	wrlong	local01, fp
0fe68     04 00 90 FD | 	jmp	#LR__1253
0fe6c                 | LR__1252
0fe6c     A7 00 68 FC | 	wrlong	#0, fp
0fe70                 | LR__1253
0fe70     08 4E 05 F1 | 	add	fp, #8
0fe74     A7 38 68 FC | 	wrlong	#28, fp
0fe78     08 4E 85 F1 | 	sub	fp, #8
0fe7c     A7 12 02 F6 | 	mov	arg01, fp
0fe80     A0 8D BF FD | 	call	#_push
0fe84     A7 F0 03 F6 | 	mov	ptra, fp
0fe88     B2 00 A0 FD | 	call	#popregs_
0fe8c                 | _do_ne_ret
0fe8c     2D 00 64 FD | 	ret
0fe90                 | 
0fe90                 | ' 
0fe90                 | ' 
0fe90                 | ' 
0fe90                 | ' ' -------------------   convert a variable on the top of stack to integer
0fe90                 | ' 
0fe90                 | ' sub do_converttoint
0fe90                 | _do_converttoint
0fe90     02 4A 05 F6 | 	mov	COUNT_, #2
0fe94     A8 00 A0 FD | 	call	#pushregs_
0fe98     18 F0 07 F1 | 	add	ptra, #24
0fe9c     EC 8C BF FD | 	call	#_pop
0fea0     FE 1E 02 F6 | 	mov	local01, result2
0fea4     FF 20 02 F6 | 	mov	local02, result3
0fea8     A7 FA 61 FC | 	wrlong	result1, fp
0feac     04 4E 05 F1 | 	add	fp, #4
0feb0     A7 1E 62 FC | 	wrlong	local01, fp
0feb4     04 4E 05 F1 | 	add	fp, #4
0feb8     A7 20 62 FC | 	wrlong	local02, fp
0febc                 | ' t1=pop() 
0febc                 | ' select case t1.result_type
0febc     08 4E 85 F1 | 	sub	fp, #8
0fec0     1C 20 0E F2 | 	cmp	local02, #28 wz
0fec4     24 00 90 AD |  if_e	jmp	#LR__1260
0fec8     1D 20 0E F2 | 	cmp	local02, #29 wz
0fecc     38 00 90 AD |  if_e	jmp	#LR__1261
0fed0     1E 20 0E F2 | 	cmp	local02, #30 wz
0fed4     4C 00 90 AD |  if_e	jmp	#LR__1262
0fed8     1F 20 0E F2 | 	cmp	local02, #31 wz
0fedc     68 00 90 AD |  if_e	jmp	#LR__1263
0fee0     FF 20 0E F2 | 	cmp	local02, #255 wz
0fee4     8C 00 90 AD |  if_e	jmp	#LR__1264
0fee8     A8 00 90 FD | 	jmp	#LR__1265
0feec                 | LR__1260
0feec     A7 20 02 FB | 	rdlong	local02, fp
0fef0     0C 4E 05 F1 | 	add	fp, #12
0fef4     A7 20 62 FC | 	wrlong	local02, fp
0fef8     04 4E 05 F1 | 	add	fp, #4
0fefc     A7 38 68 FC | 	wrlong	#28, fp
0ff00     10 4E 85 F1 | 	sub	fp, #16
0ff04     A0 00 90 FD | 	jmp	#LR__1266
0ff08                 | LR__1261
0ff08     A7 20 02 FB | 	rdlong	local02, fp
0ff0c     0C 4E 05 F1 | 	add	fp, #12
0ff10     A7 20 62 FC | 	wrlong	local02, fp
0ff14     04 4E 05 F1 | 	add	fp, #4
0ff18     A7 38 68 FC | 	wrlong	#28, fp
0ff1c     10 4E 85 F1 | 	sub	fp, #16
0ff20     84 00 90 FD | 	jmp	#LR__1266
0ff24                 | LR__1262
0ff24     A7 12 02 FB | 	rdlong	arg01, fp
0ff28     01 14 06 F6 | 	mov	arg02, #1
0ff2c     00 A7 B0 FD | 	call	#__system___float_tointeger
0ff30     0C 4E 05 F1 | 	add	fp, #12
0ff34     A7 FA 61 FC | 	wrlong	result1, fp
0ff38     04 4E 05 F1 | 	add	fp, #4
0ff3c     A7 38 68 FC | 	wrlong	#28, fp
0ff40     10 4E 85 F1 | 	sub	fp, #16
0ff44     60 00 90 FD | 	jmp	#LR__1266
0ff48                 | LR__1263
0ff48     A7 12 02 FB | 	rdlong	arg01, fp
0ff4c     00 AA B0 FD | 	call	#__system____builtin_atof
0ff50     FD 12 02 F6 | 	mov	arg01, result1
0ff54     00 14 06 F6 | 	mov	arg02, #0
0ff58     D4 A6 B0 FD | 	call	#__system___float_tointeger
0ff5c     0C 4E 05 F1 | 	add	fp, #12
0ff60     A7 FA 61 FC | 	wrlong	result1, fp
0ff64     04 4E 05 F1 | 	add	fp, #4
0ff68     A7 38 68 FC | 	wrlong	#28, fp
0ff6c     10 4E 85 F1 | 	sub	fp, #16
0ff70     34 00 90 FD | 	jmp	#LR__1266
0ff74                 | LR__1264
0ff74     0C 4E 05 F1 | 	add	fp, #12
0ff78     A7 00 68 FC | 	wrlong	#0, fp
0ff7c     0C 4E 85 F1 | 	sub	fp, #12
0ff80     A7 20 02 FB | 	rdlong	local02, fp
0ff84     10 4E 05 F1 | 	add	fp, #16
0ff88     A7 20 62 FC | 	wrlong	local02, fp
0ff8c     10 4E 85 F1 | 	sub	fp, #16
0ff90     14 00 90 FD | 	jmp	#LR__1266
0ff94                 | LR__1265
0ff94     0C 4E 05 F1 | 	add	fp, #12
0ff98     A7 00 68 FC | 	wrlong	#0, fp
0ff9c     04 4E 05 F1 | 	add	fp, #4
0ffa0     A7 02 68 FC | 	wrlong	#1, fp
0ffa4     10 4E 85 F1 | 	sub	fp, #16
0ffa8                 | LR__1266
0ffa8     0C 4E 05 F1 | 	add	fp, #12
0ffac     A7 20 02 FB | 	rdlong	local02, fp
0ffb0     0C 4E 85 F1 | 	sub	fp, #12
0ffb4     A7 20 62 FC | 	wrlong	local02, fp
0ffb8     10 4E 05 F1 | 	add	fp, #16
0ffbc     A7 20 02 FB | 	rdlong	local02, fp
0ffc0     08 4E 85 F1 | 	sub	fp, #8
0ffc4     A7 20 62 FC | 	wrlong	local02, fp
0ffc8     08 4E 85 F1 | 	sub	fp, #8
0ffcc     A7 12 02 F6 | 	mov	arg01, fp
0ffd0     50 8C BF FD | 	call	#_push
0ffd4     A7 F0 03 F6 | 	mov	ptra, fp
0ffd8     B2 00 A0 FD | 	call	#popregs_
0ffdc                 | _do_converttoint_ret
0ffdc     2D 00 64 FD | 	ret
0ffe0                 | 
0ffe0                 | ' 
0ffe0                 | ' function converttoint (t1 as expr_result) as integer
0ffe0                 | _converttoint
0ffe0     02 4A 05 F6 | 	mov	COUNT_, #2
0ffe4     A8 00 A0 FD | 	call	#pushregs_
0ffe8     09 1F 02 F6 | 	mov	local01, arg01
0ffec                 | ' 
0ffec                 | ' select case t1.result_type
0ffec     08 1E 06 F1 | 	add	local01, #8
0fff0     0F 21 02 FB | 	rdlong	local02, local01
0fff4     08 1E 86 F1 | 	sub	local01, #8
0fff8     1C 20 86 F1 | 	sub	local02, #28
0fffc     04 20 26 F3 | 	fle	local02, #4
10000     30 20 62 FD | 	jmprel	local02
10004                 | LR__1270
10004     10 00 90 FD | 	jmp	#LR__1271
10008     14 00 90 FD | 	jmp	#LR__1272
1000c     18 00 90 FD | 	jmp	#LR__1273
10010     24 00 90 FD | 	jmp	#LR__1274
10014     38 00 90 FD | 	jmp	#LR__1275
10018                 | LR__1271
10018     0F FB 01 FB | 	rdlong	result1, local01
1001c     34 00 90 FD | 	jmp	#LR__1276
10020                 | LR__1272
10020     0F FB 01 FB | 	rdlong	result1, local01
10024     2C 00 90 FD | 	jmp	#LR__1276
10028                 | LR__1273
10028     0F 13 02 FB | 	rdlong	arg01, local01
1002c     01 14 06 F6 | 	mov	arg02, #1
10030     FC A5 B0 FD | 	call	#__system___float_tointeger
10034     1C 00 90 FD | 	jmp	#LR__1276
10038                 | LR__1274
10038     0F 13 02 FB | 	rdlong	arg01, local01
1003c     10 A9 B0 FD | 	call	#__system____builtin_atof
10040     FD 12 02 F6 | 	mov	arg01, result1
10044     00 14 06 F6 | 	mov	arg02, #0
10048     E4 A5 B0 FD | 	call	#__system___float_tointeger
1004c     04 00 90 FD | 	jmp	#LR__1276
10050                 | LR__1275
10050     00 FA 05 F6 | 	mov	result1, #0
10054                 | LR__1276
10054     A7 F0 03 F6 | 	mov	ptra, fp
10058     B2 00 A0 FD | 	call	#popregs_
1005c                 | _converttoint_ret
1005c     2D 00 64 FD | 	ret
10060                 | 
10060                 | ' 
10060                 | ' function converttofloat (t1 as expr_result) as single
10060                 | _converttofloat
10060     03 4A 05 F6 | 	mov	COUNT_, #3
10064     A8 00 A0 FD | 	call	#pushregs_
10068     09 1F 02 F6 | 	mov	local01, arg01
1006c                 | ' 
1006c                 | ' select case t1.result_type
1006c     08 1E 06 F1 | 	add	local01, #8
10070     0F 21 02 FB | 	rdlong	local02, local01
10074     08 1E 86 F1 | 	sub	local01, #8
10078     1C 20 86 F1 | 	sub	local02, #28
1007c     04 20 26 F3 | 	fle	local02, #4
10080     30 20 62 FD | 	jmprel	local02
10084                 | LR__1280
10084     10 00 90 FD | 	jmp	#LR__1281
10088     28 00 90 FD | 	jmp	#LR__1282
1008c     30 00 90 FD | 	jmp	#LR__1283
10090     34 00 90 FD | 	jmp	#LR__1284
10094     3C 00 90 FD | 	jmp	#LR__1285
10098                 | LR__1281
10098     0F 13 02 FB | 	rdlong	arg01, local01
1009c     09 13 52 F6 | 	abs	arg01, arg01 wc
100a0     1F 22 C6 C9 |  if_b	decod	local03, #31
100a4     00 22 06 36 |  if_ae	mov	local03, #0
100a8     90 9D B0 FD | 	call	#__system___float_fromuns
100ac     11 FB 61 F5 | 	xor	result1, local03
100b0     24 00 90 FD | 	jmp	#LR__1286
100b4                 | LR__1282
100b4     0F 13 02 FB | 	rdlong	arg01, local01
100b8     80 9D B0 FD | 	call	#__system___float_fromuns
100bc     18 00 90 FD | 	jmp	#LR__1286
100c0                 | LR__1283
100c0     0F FB 01 FB | 	rdlong	result1, local01
100c4     10 00 90 FD | 	jmp	#LR__1286
100c8                 | LR__1284
100c8     0F 13 02 FB | 	rdlong	arg01, local01
100cc     80 A8 B0 FD | 	call	#__system____builtin_atof
100d0     04 00 90 FD | 	jmp	#LR__1286
100d4                 | LR__1285
100d4     00 FA 05 F6 | 	mov	result1, #0
100d8                 | LR__1286
100d8     A7 F0 03 F6 | 	mov	ptra, fp
100dc     B2 00 A0 FD | 	call	#popregs_
100e0                 | _converttofloat_ret
100e0     2D 00 64 FD | 	ret
100e4                 | 
100e4                 | ' 
100e4                 | ' sub do_rnd
100e4                 | _do_rnd
100e4     01 4A 05 F6 | 	mov	COUNT_, #1
100e8     A8 00 A0 FD | 	call	#pushregs_
100ec     10 F0 07 F1 | 	add	ptra, #16
100f0     69 00 00 FF 
100f4     54 E4 05 F1 | 	add	objptr, ##53844
100f8     F2 1E 02 FB | 	rdlong	local01, objptr
100fc     0F 17 02 F6 | 	mov	arg03, local01
10100     01 16 66 F0 | 	shl	arg03, #1
10104     0F 17 02 F1 | 	add	arg03, local01
10108     02 16 66 F0 | 	shl	arg03, #2
1010c     03 00 00 FF 
10110     04 E4 85 F1 | 	sub	objptr, ##1540
10114     F2 16 02 F1 | 	add	arg03, objptr
10118     0B 17 02 FB | 	rdlong	arg03, arg03
1011c     0C 4E 05 F1 | 	add	fp, #12
10120     A7 16 62 FC | 	wrlong	arg03, fp
10124                 | ' 
10124                 | ' numpar=compiledline(lineptr_e).result.uresult
10124                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
10124     0C 4E 85 F1 | 	sub	fp, #12
10128     02 16 16 F2 | 	cmp	arg03, #2 wc
1012c     66 00 00 FF 
10130     50 E4 85 F1 | 	sub	objptr, ##52304
10134     3C 00 90 CD |  if_b	jmp	#LR__1290
10138     00 12 06 F6 | 	mov	arg01, #0
1013c     30 CC B0 FD | 	call	#__system___getiolock_0383
10140     FD 12 02 F6 | 	mov	arg01, result1
10144     10 77 B0 FD | 	call	#__system___lockmem
10148     36 01 00 FF 
1014c     3B 15 06 F6 | 	mov	arg02, ##@LR__4420
10150     00 12 06 F6 | 	mov	arg01, #0
10154     00 16 06 F6 | 	mov	arg03, #0
10158     F0 83 B0 FD | 	call	#__system___basic_print_string
1015c     00 12 06 F6 | 	mov	arg01, #0
10160     0C CC B0 FD | 	call	#__system___getiolock_0383
10164     FD 00 68 FC | 	wrlong	#0, result1
10168     27 12 06 F6 | 	mov	arg01, #39
1016c     C4 41 B0 FD | 	call	#_printerror
10170     2C 01 90 FD | 	jmp	#LR__1297
10174                 | LR__1290
10174                 | ' if numpar=0 then
10174     0C 4E 05 F1 | 	add	fp, #12
10178     A7 FE 09 FB | 	rdlong	result3, fp wz
1017c     0C 4E 85 F1 | 	sub	fp, #12
10180     20 00 90 5D |  if_ne	jmp	#LR__1291
10184     08 4E 05 F1 | 	add	fp, #8
10188     A7 3A 68 FC | 	wrlong	#29, fp
1018c     08 4E 85 F1 | 	sub	fp, #8
10190     1B FA 61 FD | 	getrnd	result1
10194     A7 FA 61 FC | 	wrlong	result1, fp
10198     A7 12 02 F6 | 	mov	arg01, fp
1019c     84 8A BF FD | 	call	#_push
101a0     FC 00 90 FD | 	jmp	#LR__1296
101a4                 | LR__1291
101a4     E4 89 BF FD | 	call	#_pop
101a8     A7 FA 61 FC | 	wrlong	result1, fp
101ac     04 4E 05 F1 | 	add	fp, #4
101b0     A7 FC 61 FC | 	wrlong	result2, fp
101b4     04 4E 05 F1 | 	add	fp, #4
101b8     A7 FE 61 FC | 	wrlong	result3, fp
101bc                 | '   t1=pop()
101bc                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
101bc     08 4E 85 F1 | 	sub	fp, #8
101c0     1C FE 0D F2 | 	cmp	result3, #28 wz
101c4     08 4E 05 51 |  if_ne	add	fp, #8
101c8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
101cc     08 4E 85 51 |  if_ne	sub	fp, #8
101d0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
101d4     2C 00 90 5D |  if_ne	jmp	#LR__1292
101d8     1B FA 61 FD | 	getrnd	result1
101dc     A7 1E 02 FB | 	rdlong	local01, fp
101e0     0F FB 11 FD | 	qdiv	result1, local01
101e4     A7 12 02 F6 | 	mov	arg01, fp
101e8     19 1E 62 FD | 	getqy	local01
101ec     A7 1E 62 FC | 	wrlong	local01, fp
101f0     08 4E 05 F1 | 	add	fp, #8
101f4     A7 3A 68 FC | 	wrlong	#29, fp
101f8     08 4E 85 F1 | 	sub	fp, #8
101fc     24 8A BF FD | 	call	#_push
10200     9C 00 90 FD | 	jmp	#LR__1295
10204                 | LR__1292
10204     08 4E 05 F1 | 	add	fp, #8
10208     A7 1E 02 FB | 	rdlong	local01, fp
1020c     08 4E 85 F1 | 	sub	fp, #8
10210     1E 1E 0E F2 | 	cmp	local01, #30 wz
10214     48 00 90 5D |  if_ne	jmp	#LR__1293
10218     A7 12 02 FB | 	rdlong	arg01, fp
1021c     00 C0 24 FF 
10220     00 14 06 F6 | 	mov	arg02, ##1233125376
10224     44 A1 B0 FD | 	call	#__system___float_div
10228     FD 1E 02 F6 | 	mov	local01, result1
1022c     1B 12 62 FD | 	getrnd	arg01
10230     74 13 06 F4 | 	bitl	arg01, #372
10234     04 9C B0 FD | 	call	#__system___float_fromuns
10238     FD 14 02 F6 | 	mov	arg02, result1
1023c     0F 13 02 F6 | 	mov	arg01, local01
10240     24 9F B0 FD | 	call	#__system___float_mul
10244     A7 FA 61 FC | 	wrlong	result1, fp
10248     08 4E 05 F1 | 	add	fp, #8
1024c     A7 3C 68 FC | 	wrlong	#30, fp
10250     08 4E 85 F1 | 	sub	fp, #8
10254     A7 12 02 F6 | 	mov	arg01, fp
10258     C8 89 BF FD | 	call	#_push
1025c     40 00 90 FD | 	jmp	#LR__1294
10260                 | LR__1293
10260                 | '     print "rnd: "; : printerror(40) 
10260     00 12 06 F6 | 	mov	arg01, #0
10264     08 CB B0 FD | 	call	#__system___getiolock_0383
10268     FD 12 02 F6 | 	mov	arg01, result1
1026c     E8 75 B0 FD | 	call	#__system___lockmem
10270     36 01 00 FF 
10274     41 15 06 F6 | 	mov	arg02, ##@LR__4421
10278     00 12 06 F6 | 	mov	arg01, #0
1027c     00 16 06 F6 | 	mov	arg03, #0
10280     C8 82 B0 FD | 	call	#__system___basic_print_string
10284     00 12 06 F6 | 	mov	arg01, #0
10288     E4 CA B0 FD | 	call	#__system___getiolock_0383
1028c     FD 00 68 FC | 	wrlong	#0, result1
10290     28 12 06 F6 | 	mov	arg01, #40
10294     9C 40 B0 FD | 	call	#_printerror
10298     A7 12 02 F6 | 	mov	arg01, fp
1029c     84 89 BF FD | 	call	#_push
102a0                 | LR__1294
102a0                 | LR__1295
102a0                 | LR__1296
102a0                 | LR__1297
102a0     A7 F0 03 F6 | 	mov	ptra, fp
102a4     B2 00 A0 FD | 	call	#popregs_
102a8                 | _do_rnd_ret
102a8     2D 00 64 FD | 	ret
102ac                 | 
102ac                 | ' 
102ac                 | ' sub do_sin
102ac                 | _do_sin
102ac     03 4A 05 F6 | 	mov	COUNT_, #3
102b0     A8 00 A0 FD | 	call	#pushregs_
102b4     10 F0 07 F1 | 	add	ptra, #16
102b8     69 00 00 FF 
102bc     54 E4 05 F1 | 	add	objptr, ##53844
102c0     F2 1E 02 FB | 	rdlong	local01, objptr
102c4     0F 17 02 F6 | 	mov	arg03, local01
102c8     01 16 66 F0 | 	shl	arg03, #1
102cc     0F 17 02 F1 | 	add	arg03, local01
102d0     02 16 66 F0 | 	shl	arg03, #2
102d4     03 00 00 FF 
102d8     04 E4 85 F1 | 	sub	objptr, ##1540
102dc     F2 16 02 F1 | 	add	arg03, objptr
102e0     0B 17 02 FB | 	rdlong	arg03, arg03
102e4     0C 4E 05 F1 | 	add	fp, #12
102e8     A7 16 62 FC | 	wrlong	arg03, fp
102ec                 | ' 
102ec                 | ' numpar=compiledline(lineptr_e).result.uresult
102ec                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
102ec     0C 4E 85 F1 | 	sub	fp, #12
102f0     02 16 16 F2 | 	cmp	arg03, #2 wc
102f4     66 00 00 FF 
102f8     50 E4 85 F1 | 	sub	objptr, ##52304
102fc     0C 4E 05 C1 |  if_b	add	fp, #12
10300     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
10304     0C 4E 85 C1 |  if_b	sub	fp, #12
10308     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1300
1030c     00 12 06 F6 | 	mov	arg01, #0
10310     5C CA B0 FD | 	call	#__system___getiolock_0383
10314     FD 12 02 F6 | 	mov	arg01, result1
10318     3C 75 B0 FD | 	call	#__system___lockmem
1031c     36 01 00 FF 
10320     47 15 06 F6 | 	mov	arg02, ##@LR__4422
10324     00 12 06 F6 | 	mov	arg01, #0
10328     00 16 06 F6 | 	mov	arg03, #0
1032c     1C 82 B0 FD | 	call	#__system___basic_print_string
10330     00 12 06 F6 | 	mov	arg01, #0
10334     38 CA B0 FD | 	call	#__system___getiolock_0383
10338     FD 00 68 FC | 	wrlong	#0, result1
1033c     27 12 06 F6 | 	mov	arg01, #39
10340     F0 3F B0 FD | 	call	#_printerror
10344     40 01 90 FD | 	jmp	#LR__1305
10348                 | LR__1300
10348     40 88 BF FD | 	call	#_pop
1034c     A7 FA 61 FC | 	wrlong	result1, fp
10350     04 4E 05 F1 | 	add	fp, #4
10354     A7 FC 61 FC | 	wrlong	result2, fp
10358     04 4E 05 F1 | 	add	fp, #4
1035c     A7 FE 61 FC | 	wrlong	result3, fp
10360                 | ' t1=pop()
10360                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then
10360     08 4E 85 F1 | 	sub	fp, #8
10364     1C FE 0D F2 | 	cmp	result3, #28 wz
10368     08 4E 05 51 |  if_ne	add	fp, #8
1036c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10370     08 4E 85 51 |  if_ne	sub	fp, #8
10374     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
10378     70 00 90 5D |  if_ne	jmp	#LR__1301
1037c     A7 1E 02 FB | 	rdlong	local01, fp
10380     0F 1F 52 F6 | 	abs	local01, local01 wc
10384     68 1F 16 FD | 	qdiv	local01, #360
10388     87 24 20 FF 
1038c     DB 21 06 F6 | 	mov	local02, ##1078530011
10390     19 1E 62 FD | 	getqy	local01
10394     0F 13 82 F6 | 	negc	arg01, local01
10398     09 13 52 F6 | 	abs	arg01, arg01 wc
1039c     1F 22 C6 C9 |  if_b	decod	local03, #31
103a0     00 22 06 36 |  if_ae	mov	local03, #0
103a4     94 9A B0 FD | 	call	#__system___float_fromuns
103a8     11 FB 61 F5 | 	xor	result1, local03
103ac     FD 12 02 F6 | 	mov	arg01, result1
103b0     00 9A 21 FF 
103b4     00 14 06 F6 | 	mov	arg02, ##1127481344
103b8     B0 9F B0 FD | 	call	#__system___float_div
103bc     FD 14 02 F6 | 	mov	arg02, result1
103c0     10 13 02 F6 | 	mov	arg01, local02
103c4     A0 9D B0 FD | 	call	#__system___float_mul
103c8     FD 12 02 F6 | 	mov	arg01, result1
103cc     D4 A6 B0 FD | 	call	#__system____builtin_sinf
103d0     A7 FA 61 FC | 	wrlong	result1, fp
103d4     08 4E 05 F1 | 	add	fp, #8
103d8     A7 3C 68 FC | 	wrlong	#30, fp
103dc     08 4E 85 F1 | 	sub	fp, #8
103e0     A7 12 02 F6 | 	mov	arg01, fp
103e4     3C 88 BF FD | 	call	#_push
103e8     9C 00 90 FD | 	jmp	#LR__1304
103ec                 | LR__1301
103ec     08 4E 05 F1 | 	add	fp, #8
103f0     A7 20 02 FB | 	rdlong	local02, fp
103f4     08 4E 85 F1 | 	sub	fp, #8
103f8     1E 20 0E F2 | 	cmp	local02, #30 wz
103fc     48 00 90 5D |  if_ne	jmp	#LR__1302
10400     87 24 20 FF 
10404     DB 21 06 F6 | 	mov	local02, ##1078530011
10408     A7 12 02 FB | 	rdlong	arg01, fp
1040c     00 9A 21 FF 
10410     00 14 06 F6 | 	mov	arg02, ##1127481344
10414     54 9F B0 FD | 	call	#__system___float_div
10418     FD 14 02 F6 | 	mov	arg02, result1
1041c     10 13 02 F6 | 	mov	arg01, local02
10420     44 9D B0 FD | 	call	#__system___float_mul
10424     FD 12 02 F6 | 	mov	arg01, result1
10428     78 A6 B0 FD | 	call	#__system____builtin_sinf
1042c     A7 FA 61 FC | 	wrlong	result1, fp
10430     08 4E 05 F1 | 	add	fp, #8
10434     A7 3C 68 FC | 	wrlong	#30, fp
10438     08 4E 85 F1 | 	sub	fp, #8
1043c     A7 12 02 F6 | 	mov	arg01, fp
10440     E0 87 BF FD | 	call	#_push
10444     40 00 90 FD | 	jmp	#LR__1303
10448                 | LR__1302
10448                 | '   print "sin: "; : printerror(40) 
10448     00 12 06 F6 | 	mov	arg01, #0
1044c     20 C9 B0 FD | 	call	#__system___getiolock_0383
10450     FD 12 02 F6 | 	mov	arg01, result1
10454     00 74 B0 FD | 	call	#__system___lockmem
10458     36 01 00 FF 
1045c     4D 15 06 F6 | 	mov	arg02, ##@LR__4423
10460     00 12 06 F6 | 	mov	arg01, #0
10464     00 16 06 F6 | 	mov	arg03, #0
10468     E0 80 B0 FD | 	call	#__system___basic_print_string
1046c     00 12 06 F6 | 	mov	arg01, #0
10470     FC C8 B0 FD | 	call	#__system___getiolock_0383
10474     FD 00 68 FC | 	wrlong	#0, result1
10478     28 12 06 F6 | 	mov	arg01, #40
1047c     B4 3E B0 FD | 	call	#_printerror
10480     A7 12 02 F6 | 	mov	arg01, fp
10484     9C 87 BF FD | 	call	#_push
10488                 | LR__1303
10488                 | LR__1304
10488                 | LR__1305
10488     A7 F0 03 F6 | 	mov	ptra, fp
1048c     B2 00 A0 FD | 	call	#popregs_
10490                 | _do_sin_ret
10490     2D 00 64 FD | 	ret
10494                 | 
10494                 | ' 
10494                 | ' sub do_stick
10494                 | _do_stick
10494     01 4A 05 F6 | 	mov	COUNT_, #1
10498     A8 00 A0 FD | 	call	#pushregs_
1049c     10 F0 07 F1 | 	add	ptra, #16
104a0     69 00 00 FF 
104a4     54 E4 05 F1 | 	add	objptr, ##53844
104a8     F2 1E 02 FB | 	rdlong	local01, objptr
104ac     0F 17 02 F6 | 	mov	arg03, local01
104b0     01 16 66 F0 | 	shl	arg03, #1
104b4     0F 17 02 F1 | 	add	arg03, local01
104b8     02 16 66 F0 | 	shl	arg03, #2
104bc     03 00 00 FF 
104c0     04 E4 85 F1 | 	sub	objptr, ##1540
104c4     F2 16 02 F1 | 	add	arg03, objptr
104c8     0B 17 02 FB | 	rdlong	arg03, arg03
104cc     0C 4E 05 F1 | 	add	fp, #12
104d0     A7 16 62 FC | 	wrlong	arg03, fp
104d4                 | ' 
104d4                 | ' numpar=compiledline(lineptr_e).result.uresult
104d4                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
104d4     0C 4E 85 F1 | 	sub	fp, #12
104d8     02 16 16 F2 | 	cmp	arg03, #2 wc
104dc     66 00 00 FF 
104e0     50 E4 85 F1 | 	sub	objptr, ##52304
104e4     3C 00 90 CD |  if_b	jmp	#LR__1310
104e8     00 12 06 F6 | 	mov	arg01, #0
104ec     80 C8 B0 FD | 	call	#__system___getiolock_0383
104f0     FD 12 02 F6 | 	mov	arg01, result1
104f4     60 73 B0 FD | 	call	#__system___lockmem
104f8     36 01 00 FF 
104fc     53 15 06 F6 | 	mov	arg02, ##@LR__4424
10500     00 12 06 F6 | 	mov	arg01, #0
10504     00 16 06 F6 | 	mov	arg03, #0
10508     40 80 B0 FD | 	call	#__system___basic_print_string
1050c     00 12 06 F6 | 	mov	arg01, #0
10510     5C C8 B0 FD | 	call	#__system___getiolock_0383
10514     FD 00 68 FC | 	wrlong	#0, result1
10518     27 12 06 F6 | 	mov	arg01, #39
1051c     14 3E B0 FD | 	call	#_printerror
10520     E8 00 90 FD | 	jmp	#LR__1314
10524                 | LR__1310
10524                 | ' 
10524                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
10524     0C 4E 05 F1 | 	add	fp, #12
10528     A7 FE 09 FB | 	rdlong	result3, fp wz
1052c     0C 4E 85 F1 | 	sub	fp, #12
10530     30 00 90 5D |  if_ne	jmp	#LR__1311
10534     79 00 00 FF 
10538     D0 E5 05 F1 | 	add	objptr, ##62416
1053c     F2 1E 02 FB | 	rdlong	local01, objptr
10540     79 00 00 FF 
10544     D0 E5 85 F1 | 	sub	objptr, ##62416
10548     A7 1E 62 FC | 	wrlong	local01, fp
1054c     08 4E 05 F1 | 	add	fp, #8
10550     A7 3A 68 FC | 	wrlong	#29, fp
10554     08 4E 85 F1 | 	sub	fp, #8
10558     A7 12 02 F6 | 	mov	arg01, fp
1055c     C4 86 BF FD | 	call	#_push
10560     A8 00 90 FD | 	jmp	#LR__1314
10564                 | LR__1311
10564     24 86 BF FD | 	call	#_pop
10568     A7 FA 61 FC | 	wrlong	result1, fp
1056c     04 4E 05 F1 | 	add	fp, #4
10570     A7 FC 61 FC | 	wrlong	result2, fp
10574     04 4E 05 F1 | 	add	fp, #4
10578     A7 FE 61 FC | 	wrlong	result3, fp
1057c                 | ' 
1057c                 | ' t1=pop()
1057c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1057c     08 4E 85 F1 | 	sub	fp, #8
10580     1C FE 0D F2 | 	cmp	result3, #28 wz
10584     08 4E 05 51 |  if_ne	add	fp, #8
10588     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1058c     08 4E 85 51 |  if_ne	sub	fp, #8
10590     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
10594     6C 00 90 5D |  if_ne	jmp	#LR__1313
10598     A7 1E 02 FB | 	rdlong	local01, fp
1059c     7A 00 00 FF 
105a0     9C E4 05 F1 | 	add	objptr, ##62620
105a4     F2 1E 62 FC | 	wrlong	local01, objptr
105a8                 | '   q=t1.result.uresult
105a8                 | '   if q<7 then 
105a8     7A 00 00 FF 
105ac     9C E4 85 F1 | 	sub	objptr, ##62620
105b0     07 1E 56 F2 | 	cmps	local01, #7 wc
105b4     40 00 90 3D |  if_ae	jmp	#LR__1312
105b8     7A 00 00 FF 
105bc     9C E4 05 F1 | 	add	objptr, ##62620
105c0     F2 1E 02 FB | 	rdlong	local01, objptr
105c4     02 1E 66 F0 | 	shl	local01, #2
105c8     CC E4 85 F1 | 	sub	objptr, #204
105cc     F2 1E 02 F1 | 	add	local01, objptr
105d0     0F 1F 02 FB | 	rdlong	local01, local01
105d4     A7 1E 62 FC | 	wrlong	local01, fp
105d8     08 4E 05 F1 | 	add	fp, #8
105dc     A7 3A 68 FC | 	wrlong	#29, fp
105e0     08 4E 85 F1 | 	sub	fp, #8
105e4     A7 12 02 F6 | 	mov	arg01, fp
105e8     79 00 00 FF 
105ec     D0 E5 85 F1 | 	sub	objptr, ##62416
105f0     30 86 BF FD | 	call	#_push
105f4                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
105f4     14 00 90 FD | 	jmp	#LR__1314
105f8                 | LR__1312
105f8     29 12 06 F6 | 	mov	arg01, #41
105fc     34 3D B0 FD | 	call	#_printerror
10600                 | '      printerror(41) : return
10600     08 00 90 FD | 	jmp	#LR__1314
10604                 | LR__1313
10604     29 12 06 F6 | 	mov	arg01, #41
10608     28 3D B0 FD | 	call	#_printerror
1060c                 | LR__1314
1060c     A7 F0 03 F6 | 	mov	ptra, fp
10610     B2 00 A0 FD | 	call	#popregs_
10614                 | _do_stick_ret
10614     2D 00 64 FD | 	ret
10618                 | 
10618                 | ' 
10618                 | ' sub do_strig
10618                 | _do_strig
10618     01 4A 05 F6 | 	mov	COUNT_, #1
1061c     A8 00 A0 FD | 	call	#pushregs_
10620     10 F0 07 F1 | 	add	ptra, #16
10624     69 00 00 FF 
10628     54 E4 05 F1 | 	add	objptr, ##53844
1062c     F2 1E 02 FB | 	rdlong	local01, objptr
10630     0F 17 02 F6 | 	mov	arg03, local01
10634     01 16 66 F0 | 	shl	arg03, #1
10638     0F 17 02 F1 | 	add	arg03, local01
1063c     02 16 66 F0 | 	shl	arg03, #2
10640     03 00 00 FF 
10644     04 E4 85 F1 | 	sub	objptr, ##1540
10648     F2 16 02 F1 | 	add	arg03, objptr
1064c     0B 17 02 FB | 	rdlong	arg03, arg03
10650     0C 4E 05 F1 | 	add	fp, #12
10654     A7 16 62 FC | 	wrlong	arg03, fp
10658                 | ' 
10658                 | ' numpar=compiledline(lineptr_e).result.uresult
10658                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
10658     0C 4E 85 F1 | 	sub	fp, #12
1065c     02 16 16 F2 | 	cmp	arg03, #2 wc
10660     66 00 00 FF 
10664     50 E4 85 F1 | 	sub	objptr, ##52304
10668     3C 00 90 CD |  if_b	jmp	#LR__1320
1066c     00 12 06 F6 | 	mov	arg01, #0
10670     FC C6 B0 FD | 	call	#__system___getiolock_0383
10674     FD 12 02 F6 | 	mov	arg01, result1
10678     DC 71 B0 FD | 	call	#__system___lockmem
1067c     36 01 00 FF 
10680     5B 15 06 F6 | 	mov	arg02, ##@LR__4425
10684     00 12 06 F6 | 	mov	arg01, #0
10688     00 16 06 F6 | 	mov	arg03, #0
1068c     BC 7E B0 FD | 	call	#__system___basic_print_string
10690     00 12 06 F6 | 	mov	arg01, #0
10694     D8 C6 B0 FD | 	call	#__system___getiolock_0383
10698     FD 00 68 FC | 	wrlong	#0, result1
1069c     27 12 06 F6 | 	mov	arg01, #39
106a0     90 3C B0 FD | 	call	#_printerror
106a4     E8 00 90 FD | 	jmp	#LR__1324
106a8                 | LR__1320
106a8                 | ' 
106a8                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
106a8     0C 4E 05 F1 | 	add	fp, #12
106ac     A7 FE 09 FB | 	rdlong	result3, fp wz
106b0     0C 4E 85 F1 | 	sub	fp, #12
106b4     30 00 90 5D |  if_ne	jmp	#LR__1321
106b8     79 00 00 FF 
106bc     EC E5 05 F1 | 	add	objptr, ##62444
106c0     F2 1E 02 FB | 	rdlong	local01, objptr
106c4     79 00 00 FF 
106c8     EC E5 85 F1 | 	sub	objptr, ##62444
106cc     A7 1E 62 FC | 	wrlong	local01, fp
106d0     08 4E 05 F1 | 	add	fp, #8
106d4     A7 3A 68 FC | 	wrlong	#29, fp
106d8     08 4E 85 F1 | 	sub	fp, #8
106dc     A7 12 02 F6 | 	mov	arg01, fp
106e0     40 85 BF FD | 	call	#_push
106e4     A8 00 90 FD | 	jmp	#LR__1324
106e8                 | LR__1321
106e8     A0 84 BF FD | 	call	#_pop
106ec     A7 FA 61 FC | 	wrlong	result1, fp
106f0     04 4E 05 F1 | 	add	fp, #4
106f4     A7 FC 61 FC | 	wrlong	result2, fp
106f8     04 4E 05 F1 | 	add	fp, #4
106fc     A7 FE 61 FC | 	wrlong	result3, fp
10700                 | ' 
10700                 | ' t1=pop()
10700                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
10700     08 4E 85 F1 | 	sub	fp, #8
10704     1C FE 0D F2 | 	cmp	result3, #28 wz
10708     08 4E 05 51 |  if_ne	add	fp, #8
1070c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10710     08 4E 85 51 |  if_ne	sub	fp, #8
10714     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
10718     6C 00 90 5D |  if_ne	jmp	#LR__1323
1071c     A7 1E 02 FB | 	rdlong	local01, fp
10720     7A 00 00 FF 
10724     9C E4 05 F1 | 	add	objptr, ##62620
10728     F2 1E 62 FC | 	wrlong	local01, objptr
1072c                 | '   q=t1.result.uresult
1072c                 | '   if q<7 then 
1072c     7A 00 00 FF 
10730     9C E4 85 F1 | 	sub	objptr, ##62620
10734     07 1E 56 F2 | 	cmps	local01, #7 wc
10738     40 00 90 3D |  if_ae	jmp	#LR__1322
1073c     7A 00 00 FF 
10740     9C E4 05 F1 | 	add	objptr, ##62620
10744     F2 1E 02 FB | 	rdlong	local01, objptr
10748     02 1E 66 F0 | 	shl	local01, #2
1074c     B0 E4 85 F1 | 	sub	objptr, #176
10750     F2 1E 02 F1 | 	add	local01, objptr
10754     0F 1F 02 FB | 	rdlong	local01, local01
10758     A7 1E 62 FC | 	wrlong	local01, fp
1075c     08 4E 05 F1 | 	add	fp, #8
10760     A7 3A 68 FC | 	wrlong	#29, fp
10764     08 4E 85 F1 | 	sub	fp, #8
10768     A7 12 02 F6 | 	mov	arg01, fp
1076c     79 00 00 FF 
10770     EC E5 85 F1 | 	sub	objptr, ##62444
10774     AC 84 BF FD | 	call	#_push
10778                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
10778     14 00 90 FD | 	jmp	#LR__1324
1077c                 | LR__1322
1077c     29 12 06 F6 | 	mov	arg01, #41
10780     B0 3B B0 FD | 	call	#_printerror
10784                 | '      printerror(41) : return
10784     08 00 90 FD | 	jmp	#LR__1324
10788                 | LR__1323
10788     29 12 06 F6 | 	mov	arg01, #41
1078c     A4 3B B0 FD | 	call	#_printerror
10790                 | LR__1324
10790     A7 F0 03 F6 | 	mov	ptra, fp
10794     B2 00 A0 FD | 	call	#popregs_
10798                 | _do_strig_ret
10798     2D 00 64 FD | 	ret
1079c                 | 
1079c                 | ' 
1079c                 | ' sub do_getpixel
1079c                 | _do_getpixel
1079c     00 4A 05 F6 | 	mov	COUNT_, #0
107a0     A8 00 A0 FD | 	call	#pushregs_
107a4     24 F0 07 F1 | 	add	ptra, #36
107a8     69 00 00 FF 
107ac     54 E4 05 F1 | 	add	objptr, ##53844
107b0     F2 16 02 FB | 	rdlong	arg03, objptr
107b4     0B 15 02 F6 | 	mov	arg02, arg03
107b8     01 14 66 F0 | 	shl	arg02, #1
107bc     0B 15 02 F1 | 	add	arg02, arg03
107c0     02 14 66 F0 | 	shl	arg02, #2
107c4     03 00 00 FF 
107c8     04 E4 85 F1 | 	sub	objptr, ##1540
107cc     F2 14 02 F1 | 	add	arg02, objptr
107d0     0A 17 02 FB | 	rdlong	arg03, arg02
107d4     18 4E 05 F1 | 	add	fp, #24
107d8     A7 16 62 FC | 	wrlong	arg03, fp
107dc                 | ' 
107dc                 | ' numpar=compiledline(lineptr_e).result.uresult
107dc                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
107dc     18 4E 85 F1 | 	sub	fp, #24
107e0     02 16 0E F2 | 	cmp	arg03, #2 wz
107e4     66 00 00 FF 
107e8     50 E4 85 F1 | 	sub	objptr, ##52304
107ec     3C 00 90 AD |  if_e	jmp	#LR__1330
107f0     00 12 06 F6 | 	mov	arg01, #0
107f4     78 C5 B0 FD | 	call	#__system___getiolock_0383
107f8     FD 12 02 F6 | 	mov	arg01, result1
107fc     58 70 B0 FD | 	call	#__system___lockmem
10800     36 01 00 FF 
10804     63 15 06 F6 | 	mov	arg02, ##@LR__4426
10808     00 12 06 F6 | 	mov	arg01, #0
1080c     00 16 06 F6 | 	mov	arg03, #0
10810     38 7D B0 FD | 	call	#__system___basic_print_string
10814     00 12 06 F6 | 	mov	arg01, #0
10818     54 C5 B0 FD | 	call	#__system___getiolock_0383
1081c     FD 00 68 FC | 	wrlong	#0, result1
10820     27 12 06 F6 | 	mov	arg01, #39
10824     0C 3B B0 FD | 	call	#_printerror
10828     B4 00 90 FD | 	jmp	#LR__1331
1082c                 | LR__1330
1082c     5C 83 BF FD | 	call	#_pop
10830     FD 16 02 F6 | 	mov	arg03, result1
10834     FE 14 02 F6 | 	mov	arg02, result2
10838     FF 12 02 F6 | 	mov	arg01, result3
1083c     0C 4E 05 F1 | 	add	fp, #12
10840     A7 16 62 FC | 	wrlong	arg03, fp
10844     04 4E 05 F1 | 	add	fp, #4
10848     A7 14 62 FC | 	wrlong	arg02, fp
1084c     04 4E 05 F1 | 	add	fp, #4
10850     A7 12 62 FC | 	wrlong	arg01, fp
10854     14 4E 85 F1 | 	sub	fp, #20
10858     30 83 BF FD | 	call	#_pop
1085c     FF 16 02 F6 | 	mov	arg03, result3
10860     A7 FA 61 FC | 	wrlong	result1, fp
10864     04 4E 05 F1 | 	add	fp, #4
10868     A7 FC 61 FC | 	wrlong	result2, fp
1086c     04 4E 05 F1 | 	add	fp, #4
10870     A7 16 62 FC | 	wrlong	arg03, fp
10874     08 4E 85 F1 | 	sub	fp, #8
10878     A7 12 02 F6 | 	mov	arg01, fp
1087c     60 F7 BF FD | 	call	#_converttoint
10880     1C 4E 05 F1 | 	add	fp, #28
10884     A7 FA 61 FC | 	wrlong	result1, fp
10888     10 4E 85 F1 | 	sub	fp, #16
1088c     A7 12 02 F6 | 	mov	arg01, fp
10890     0C 4E 85 F1 | 	sub	fp, #12
10894     48 F7 BF FD | 	call	#_converttoint
10898     FD 16 02 F6 | 	mov	arg03, result1
1089c     20 4E 05 F1 | 	add	fp, #32
108a0     A7 16 62 FC | 	wrlong	arg03, fp
108a4     F2 12 02 FB | 	rdlong	arg01, objptr
108a8     04 4E 85 F1 | 	sub	fp, #4
108ac     A7 FE 01 FB | 	rdlong	result3, fp
108b0     FF 12 02 F1 | 	add	arg01, result3
108b4     1C 4E 85 F1 | 	sub	fp, #28
108b8     0A 16 66 F0 | 	shl	arg03, #10
108bc     0B 13 02 F1 | 	add	arg01, arg03
108c0     D4 3B B0 FD | 	call	#_pspeek
108c4     FD FA E1 F8 | 	getbyte	result1, result1, #0
108c8     A7 FA 61 FC | 	wrlong	result1, fp
108cc     08 4E 05 F1 | 	add	fp, #8
108d0     A7 3A 68 FC | 	wrlong	#29, fp
108d4     08 4E 85 F1 | 	sub	fp, #8
108d8     A7 12 02 F6 | 	mov	arg01, fp
108dc     44 83 BF FD | 	call	#_push
108e0                 | LR__1331
108e0     A7 F0 03 F6 | 	mov	ptra, fp
108e4     B2 00 A0 FD | 	call	#popregs_
108e8                 | _do_getpixel_ret
108e8     2D 00 64 FD | 	ret
108ec                 | 
108ec                 | ' 
108ec                 | ' 
108ec                 | ' 
108ec                 | ' sub do_defsprite
108ec                 | _do_defsprite
108ec     07 4A 05 F6 | 	mov	COUNT_, #7
108f0     A8 00 A0 FD | 	call	#pushregs_
108f4     5C F0 07 F1 | 	add	ptra, #92
108f8     90 82 BF FD | 	call	#_pop
108fc     FD 16 02 F6 | 	mov	arg03, result1
10900     FE 14 02 F6 | 	mov	arg02, result2
10904     FF 12 02 F6 | 	mov	arg01, result3
10908     30 4E 05 F1 | 	add	fp, #48
1090c     A7 16 62 FC | 	wrlong	arg03, fp
10910     04 4E 05 F1 | 	add	fp, #4
10914     A7 14 62 FC | 	wrlong	arg02, fp
10918     04 4E 05 F1 | 	add	fp, #4
1091c     A7 12 62 FC | 	wrlong	arg01, fp
10920     38 4E 85 F1 | 	sub	fp, #56
10924     64 82 BF FD | 	call	#_pop
10928     FD 16 02 F6 | 	mov	arg03, result1
1092c     FE 14 02 F6 | 	mov	arg02, result2
10930     FF 12 02 F6 | 	mov	arg01, result3
10934     24 4E 05 F1 | 	add	fp, #36
10938     A7 16 62 FC | 	wrlong	arg03, fp
1093c     04 4E 05 F1 | 	add	fp, #4
10940     A7 14 62 FC | 	wrlong	arg02, fp
10944     04 4E 05 F1 | 	add	fp, #4
10948     A7 12 62 FC | 	wrlong	arg01, fp
1094c     2C 4E 85 F1 | 	sub	fp, #44
10950     38 82 BF FD | 	call	#_pop
10954     FD 16 02 F6 | 	mov	arg03, result1
10958     FE 14 02 F6 | 	mov	arg02, result2
1095c     FF 12 02 F6 | 	mov	arg01, result3
10960     18 4E 05 F1 | 	add	fp, #24
10964     A7 16 62 FC | 	wrlong	arg03, fp
10968     04 4E 05 F1 | 	add	fp, #4
1096c     A7 14 62 FC | 	wrlong	arg02, fp
10970     04 4E 05 F1 | 	add	fp, #4
10974     A7 12 62 FC | 	wrlong	arg01, fp
10978     20 4E 85 F1 | 	sub	fp, #32
1097c     0C 82 BF FD | 	call	#_pop
10980     FD 16 02 F6 | 	mov	arg03, result1
10984     FE 14 02 F6 | 	mov	arg02, result2
10988     FF 12 02 F6 | 	mov	arg01, result3
1098c     0C 4E 05 F1 | 	add	fp, #12
10990     A7 16 62 FC | 	wrlong	arg03, fp
10994     04 4E 05 F1 | 	add	fp, #4
10998     A7 14 62 FC | 	wrlong	arg02, fp
1099c     04 4E 05 F1 | 	add	fp, #4
109a0     A7 12 62 FC | 	wrlong	arg01, fp
109a4     14 4E 85 F1 | 	sub	fp, #20
109a8     E0 81 BF FD | 	call	#_pop
109ac     FF 16 02 F6 | 	mov	arg03, result3
109b0     A7 FA 61 FC | 	wrlong	result1, fp
109b4     04 4E 05 F1 | 	add	fp, #4
109b8     A7 FC 61 FC | 	wrlong	result2, fp
109bc     04 4E 05 F1 | 	add	fp, #4
109c0     A7 16 62 FC | 	wrlong	arg03, fp
109c4     08 4E 85 F1 | 	sub	fp, #8
109c8     A7 12 02 F6 | 	mov	arg01, fp
109cc     10 F6 BF FD | 	call	#_converttoint
109d0     3C 4E 05 F1 | 	add	fp, #60
109d4     A7 FA 61 FC | 	wrlong	result1, fp
109d8     30 4E 85 F1 | 	sub	fp, #48
109dc     A7 12 02 F6 | 	mov	arg01, fp
109e0     0C 4E 85 F1 | 	sub	fp, #12
109e4     F8 F5 BF FD | 	call	#_converttoint
109e8     40 4E 05 F1 | 	add	fp, #64
109ec     A7 FA 61 FC | 	wrlong	result1, fp
109f0     28 4E 85 F1 | 	sub	fp, #40
109f4     A7 12 02 F6 | 	mov	arg01, fp
109f8     18 4E 85 F1 | 	sub	fp, #24
109fc     E0 F5 BF FD | 	call	#_converttoint
10a00     44 4E 05 F1 | 	add	fp, #68
10a04     A7 FA 61 FC | 	wrlong	result1, fp
10a08     20 4E 85 F1 | 	sub	fp, #32
10a0c     A7 12 02 F6 | 	mov	arg01, fp
10a10     24 4E 85 F1 | 	sub	fp, #36
10a14     C8 F5 BF FD | 	call	#_converttoint
10a18     48 4E 05 F1 | 	add	fp, #72
10a1c     A7 FA 61 FC | 	wrlong	result1, fp
10a20     18 4E 85 F1 | 	sub	fp, #24
10a24     A7 12 02 F6 | 	mov	arg01, fp
10a28     30 4E 85 F1 | 	sub	fp, #48
10a2c     B0 F5 BF FD | 	call	#_converttoint
10a30     4C 4E 05 F1 | 	add	fp, #76
10a34     A7 FA 61 FC | 	wrlong	result1, fp
10a38                 | ' 
10a38                 | ' t5=pop()
10a38                 | ' t4=pop()
10a38                 | ' t3=pop()
10a38                 | ' t2=pop()
10a38                 | ' t1=pop()
10a38                 | ' 
10a38                 | ' ' do convert, defsprite is not a racing command
10a38                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
10a38                 | '  
10a38                 | ' ' todo: check parameters for linits
10a38                 | ' if sprite(a1)<> nil then delete(sprite(a1))
10a38     10 4E 85 F1 | 	sub	fp, #16
10a3c     A7 16 02 FB | 	rdlong	arg03, fp
10a40     3C 4E 85 F1 | 	sub	fp, #60
10a44     02 16 66 F0 | 	shl	arg03, #2
10a48     7A 00 00 FF 
10a4c     08 E4 05 F1 | 	add	objptr, ##62472
10a50     F2 16 02 F1 | 	add	arg03, objptr
10a54     0B 17 0A FB | 	rdlong	arg03, arg03 wz
10a58     7A 00 00 FF 
10a5c     08 E4 85 F1 | 	sub	objptr, ##62472
10a60     2C 00 90 AD |  if_e	jmp	#LR__1340
10a64     3C 4E 05 F1 | 	add	fp, #60
10a68     A7 16 02 FB | 	rdlong	arg03, fp
10a6c     3C 4E 85 F1 | 	sub	fp, #60
10a70     02 16 66 F0 | 	shl	arg03, #2
10a74     7A 00 00 FF 
10a78     08 E4 05 F1 | 	add	objptr, ##62472
10a7c     F2 16 02 F1 | 	add	arg03, objptr
10a80     0B 13 02 FB | 	rdlong	arg01, arg03
10a84     7A 00 00 FF 
10a88     08 E4 85 F1 | 	sub	objptr, ##62472
10a8c     D0 A8 B0 FD | 	call	#__system___gc_free
10a90                 | LR__1340
10a90     3C 4E 05 F1 | 	add	fp, #60
10a94     A7 1E 02 FB | 	rdlong	local01, fp
10a98     0C 4E 05 F1 | 	add	fp, #12
10a9c     A7 16 02 FB | 	rdlong	arg03, fp
10aa0     04 4E 05 F1 | 	add	fp, #4
10aa4     A7 14 02 FB | 	rdlong	arg02, fp
10aa8     0A 17 02 FD | 	qmul	arg03, arg02
10aac     02 1E 66 F0 | 	shl	local01, #2
10ab0     7A 00 00 FF 
10ab4     08 E4 05 F1 | 	add	objptr, ##62472
10ab8     F2 1E 02 F1 | 	add	local01, objptr
10abc     4C 4E 85 F1 | 	sub	fp, #76
10ac0     7A 00 00 FF 
10ac4     08 E4 85 F1 | 	sub	objptr, ##62472
10ac8     18 12 62 FD | 	getqx	arg01
10acc     54 A7 B0 FD | 	call	#__system___gc_alloc_managed
10ad0     0F FB 61 FC | 	wrlong	result1, local01
10ad4                 | ' for y=a3 to a3+a5-1
10ad4     44 4E 05 F1 | 	add	fp, #68
10ad8     A7 20 02 FB | 	rdlong	local02, fp
10adc     0C 4E 05 F1 | 	add	fp, #12
10ae0     A7 20 62 FC | 	wrlong	local02, fp
10ae4     0C 4E 85 F1 | 	sub	fp, #12
10ae8     A7 22 02 FB | 	rdlong	local03, fp
10aec     08 4E 05 F1 | 	add	fp, #8
10af0     A7 24 02 FB | 	rdlong	local04, fp
10af4     4C 4E 85 F1 | 	sub	fp, #76
10af8     12 23 02 F1 | 	add	local03, local04
10afc                 | LR__1341
10afc     50 4E 05 F1 | 	add	fp, #80
10b00     A7 20 02 FB | 	rdlong	local02, fp
10b04     50 4E 85 F1 | 	sub	fp, #80
10b08     11 21 52 F2 | 	cmps	local02, local03 wc
10b0c     10 01 90 3D |  if_ae	jmp	#LR__1344
10b10                 | '   for x=a2 to a4+a2-1
10b10     40 4E 05 F1 | 	add	fp, #64
10b14     A7 1E 02 FB | 	rdlong	local01, fp
10b18     7A 00 00 FF 
10b1c     70 E4 05 F1 | 	add	objptr, ##62576
10b20     F2 1E 62 FC | 	wrlong	local01, objptr
10b24     7A 00 00 FF 
10b28     70 E4 85 F1 | 	sub	objptr, ##62576
10b2c     08 4E 05 F1 | 	add	fp, #8
10b30     A7 26 02 FB | 	rdlong	local05, fp
10b34     08 4E 85 F1 | 	sub	fp, #8
10b38     A7 28 02 FB | 	rdlong	local06, fp
10b3c     40 4E 85 F1 | 	sub	fp, #64
10b40     14 27 02 F1 | 	add	local05, local06
10b44                 | LR__1342
10b44     7A 00 00 FF 
10b48     70 E4 05 F1 | 	add	objptr, ##62576
10b4c     F2 1E 02 FB | 	rdlong	local01, objptr
10b50     7A 00 00 FF 
10b54     70 E4 85 F1 | 	sub	objptr, ##62576
10b58     13 1F 52 F2 | 	cmps	local01, local05 wc
10b5c     A8 00 90 3D |  if_ae	jmp	#LR__1343
10b60     3C 4E 05 F1 | 	add	fp, #60
10b64     A7 28 02 FB | 	rdlong	local06, fp
10b68     04 4E 05 F1 | 	add	fp, #4
10b6c     A7 24 02 FB | 	rdlong	local04, fp
10b70     10 4E 05 F1 | 	add	fp, #16
10b74     A7 20 02 FB | 	rdlong	local02, fp
10b78     10 1F 02 F6 | 	mov	local01, local02
10b7c     0C 4E 85 F1 | 	sub	fp, #12
10b80     A7 16 02 FB | 	rdlong	arg03, fp
10b84     0B 1F 82 F1 | 	sub	local01, arg03
10b88     04 4E 05 F1 | 	add	fp, #4
10b8c     A7 16 02 FB | 	rdlong	arg03, fp
10b90     0B 1F 02 FD | 	qmul	local01, arg03
10b94     02 28 66 F0 | 	shl	local06, #2
10b98     7A 00 00 FF 
10b9c     08 E4 05 F1 | 	add	objptr, ##62472
10ba0     F2 28 02 F1 | 	add	local06, objptr
10ba4     14 29 02 FB | 	rdlong	local06, local06
10ba8     68 E4 05 F1 | 	add	objptr, #104
10bac     F2 1E 02 FB | 	rdlong	local01, objptr
10bb0     7A 00 00 FF 
10bb4     70 E4 85 F1 | 	sub	objptr, ##62576
10bb8     0F 2B 02 F6 | 	mov	local07, local01
10bbc     12 2B 82 F1 | 	sub	local07, local04
10bc0     F2 12 02 FB | 	rdlong	arg01, objptr
10bc4     0F 13 02 F1 | 	add	arg01, local01
10bc8     48 4E 85 F1 | 	sub	fp, #72
10bcc     0A 20 66 F0 | 	shl	local02, #10
10bd0     10 13 02 F1 | 	add	arg01, local02
10bd4     18 24 62 FD | 	getqx	local04
10bd8     12 2B 02 F1 | 	add	local07, local04
10bdc     14 2B 02 F1 | 	add	local07, local06
10be0     B4 38 B0 FD | 	call	#_pspeek
10be4     15 FB 41 FC | 	wrbyte	result1, local07
10be8     7A 00 00 FF 
10bec     70 E4 05 F1 | 	add	objptr, ##62576
10bf0     F2 2A 02 FB | 	rdlong	local07, objptr
10bf4     01 2A 06 F1 | 	add	local07, #1
10bf8     F2 2A 62 FC | 	wrlong	local07, objptr
10bfc     7A 00 00 FF 
10c00     70 E4 85 F1 | 	sub	objptr, ##62576
10c04     3C FF 9F FD | 	jmp	#LR__1342
10c08                 | LR__1343
10c08     50 4E 05 F1 | 	add	fp, #80
10c0c     A7 2A 02 FB | 	rdlong	local07, fp
10c10     01 2A 06 F1 | 	add	local07, #1
10c14     A7 2A 62 FC | 	wrlong	local07, fp
10c18     50 4E 85 F1 | 	sub	fp, #80
10c1c     DC FE 9F FD | 	jmp	#LR__1341
10c20                 | LR__1344
10c20     3C 4E 05 F1 | 	add	fp, #60
10c24     A7 2A 02 FB | 	rdlong	local07, fp
10c28     15 13 02 F6 | 	mov	arg01, local07
10c2c     3C 4E 85 F1 | 	sub	fp, #60
10c30     02 2A 66 F0 | 	shl	local07, #2
10c34     7A 00 00 FF 
10c38     08 E4 05 F1 | 	add	objptr, ##62472
10c3c     F2 2A 02 F1 | 	add	local07, objptr
10c40     15 15 02 FB | 	rdlong	arg02, local07
10c44     7A 00 00 FF 
10c48     08 E4 85 F1 | 	sub	objptr, ##62472
10c4c     F8 4B B0 FD | 	call	#_hg010b_spin2_setspriteptr
10c50     3C 4E 05 F1 | 	add	fp, #60
10c54     A7 12 02 FB | 	rdlong	arg01, fp
10c58     0C 4E 05 F1 | 	add	fp, #12
10c5c     A7 14 02 FB | 	rdlong	arg02, fp
10c60     04 4E 05 F1 | 	add	fp, #4
10c64     A7 16 02 FB | 	rdlong	arg03, fp
10c68     4C 4E 85 F1 | 	sub	fp, #76
10c6c     4C 4C B0 FD | 	call	#_hg010b_spin2_setspritesize
10c70     A7 F0 03 F6 | 	mov	ptra, fp
10c74     B2 00 A0 FD | 	call	#popregs_
10c78                 | _do_defsprite_ret
10c78     2D 00 64 FD | 	ret
10c7c                 | 
10c7c                 | ' 
10c7c                 | ' sub do_sprite
10c7c                 | _do_sprite
10c7c     00 4A 05 F6 | 	mov	COUNT_, #0
10c80     A8 00 A0 FD | 	call	#pushregs_
10c84     30 F0 07 F1 | 	add	ptra, #48
10c88     00 7F BF FD | 	call	#_pop
10c8c     FD 16 02 F6 | 	mov	arg03, result1
10c90     FE 14 02 F6 | 	mov	arg02, result2
10c94     FF 12 02 F6 | 	mov	arg01, result3
10c98     18 4E 05 F1 | 	add	fp, #24
10c9c     A7 16 62 FC | 	wrlong	arg03, fp
10ca0     04 4E 05 F1 | 	add	fp, #4
10ca4     A7 14 62 FC | 	wrlong	arg02, fp
10ca8     04 4E 05 F1 | 	add	fp, #4
10cac     A7 12 62 FC | 	wrlong	arg01, fp
10cb0     20 4E 85 F1 | 	sub	fp, #32
10cb4     D4 7E BF FD | 	call	#_pop
10cb8     FD 16 02 F6 | 	mov	arg03, result1
10cbc     FE 14 02 F6 | 	mov	arg02, result2
10cc0     FF 12 02 F6 | 	mov	arg01, result3
10cc4     0C 4E 05 F1 | 	add	fp, #12
10cc8     A7 16 62 FC | 	wrlong	arg03, fp
10ccc     04 4E 05 F1 | 	add	fp, #4
10cd0     A7 14 62 FC | 	wrlong	arg02, fp
10cd4     04 4E 05 F1 | 	add	fp, #4
10cd8     A7 12 62 FC | 	wrlong	arg01, fp
10cdc     14 4E 85 F1 | 	sub	fp, #20
10ce0     A8 7E BF FD | 	call	#_pop
10ce4     FF 16 02 F6 | 	mov	arg03, result3
10ce8     A7 FA 61 FC | 	wrlong	result1, fp
10cec     04 4E 05 F1 | 	add	fp, #4
10cf0     A7 FC 61 FC | 	wrlong	result2, fp
10cf4     04 4E 05 F1 | 	add	fp, #4
10cf8     A7 16 62 FC | 	wrlong	arg03, fp
10cfc     08 4E 85 F1 | 	sub	fp, #8
10d00     A7 12 02 F6 | 	mov	arg01, fp
10d04     D8 F2 BF FD | 	call	#_converttoint
10d08     24 4E 05 F1 | 	add	fp, #36
10d0c     A7 FA 61 FC | 	wrlong	result1, fp
10d10     18 4E 85 F1 | 	sub	fp, #24
10d14     A7 12 02 F6 | 	mov	arg01, fp
10d18     0C 4E 85 F1 | 	sub	fp, #12
10d1c     C0 F2 BF FD | 	call	#_converttoint
10d20     28 4E 05 F1 | 	add	fp, #40
10d24     A7 FA 61 FC | 	wrlong	result1, fp
10d28     10 4E 85 F1 | 	sub	fp, #16
10d2c     A7 12 02 F6 | 	mov	arg01, fp
10d30     18 4E 85 F1 | 	sub	fp, #24
10d34     A8 F2 BF FD | 	call	#_converttoint
10d38     2C 4E 05 F1 | 	add	fp, #44
10d3c     A7 FA 61 FC | 	wrlong	result1, fp
10d40     08 4E 85 F1 | 	sub	fp, #8
10d44     A7 12 02 FB | 	rdlong	arg01, fp
10d48     04 4E 05 F1 | 	add	fp, #4
10d4c     A7 14 02 FB | 	rdlong	arg02, fp
10d50     FD 16 02 F6 | 	mov	arg03, result1
10d54     28 4E 85 F1 | 	sub	fp, #40
10d58     14 4B B0 FD | 	call	#_hg010b_spin2_setspritepos
10d5c     A7 F0 03 F6 | 	mov	ptra, fp
10d60     B2 00 A0 FD | 	call	#popregs_
10d64                 | _do_sprite_ret
10d64     2D 00 64 FD | 	ret
10d68                 | 
10d68                 | ' 
10d68                 | ' sub do_mousex
10d68                 | _do_mousex
10d68     00 4A 05 F6 | 	mov	COUNT_, #0
10d6c     A8 00 A0 FD | 	call	#pushregs_
10d70     0C F0 07 F1 | 	add	ptra, #12
10d74     08 4E 05 F1 | 	add	fp, #8
10d78     A7 3A 68 FC | 	wrlong	#29, fp
10d7c     08 4E 85 F1 | 	sub	fp, #8
10d80     79 00 00 FF 
10d84     C0 E5 05 F1 | 	add	objptr, ##62400
10d88     F2 12 02 FB | 	rdlong	arg01, objptr
10d8c     79 00 00 FF 
10d90     C0 E5 85 F1 | 	sub	objptr, ##62400
10d94     A7 12 62 FC | 	wrlong	arg01, fp
10d98     A7 12 02 F6 | 	mov	arg01, fp
10d9c     84 7E BF FD | 	call	#_push
10da0     A7 F0 03 F6 | 	mov	ptra, fp
10da4     B2 00 A0 FD | 	call	#popregs_
10da8                 | _do_mousex_ret
10da8     2D 00 64 FD | 	ret
10dac                 | 
10dac                 | ' 
10dac                 | ' sub do_mousey
10dac                 | _do_mousey
10dac     00 4A 05 F6 | 	mov	COUNT_, #0
10db0     A8 00 A0 FD | 	call	#pushregs_
10db4     0C F0 07 F1 | 	add	ptra, #12
10db8     08 4E 05 F1 | 	add	fp, #8
10dbc     A7 3A 68 FC | 	wrlong	#29, fp
10dc0     08 4E 85 F1 | 	sub	fp, #8
10dc4     79 00 00 FF 
10dc8     C4 E5 05 F1 | 	add	objptr, ##62404
10dcc     F2 12 02 FB | 	rdlong	arg01, objptr
10dd0     79 00 00 FF 
10dd4     C4 E5 85 F1 | 	sub	objptr, ##62404
10dd8     A7 12 62 FC | 	wrlong	arg01, fp
10ddc     A7 12 02 F6 | 	mov	arg01, fp
10de0     40 7E BF FD | 	call	#_push
10de4     A7 F0 03 F6 | 	mov	ptra, fp
10de8     B2 00 A0 FD | 	call	#popregs_
10dec                 | _do_mousey_ret
10dec     2D 00 64 FD | 	ret
10df0                 | 
10df0                 | ' 
10df0                 | ' sub do_mousew
10df0                 | _do_mousew
10df0     00 4A 05 F6 | 	mov	COUNT_, #0
10df4     A8 00 A0 FD | 	call	#pushregs_
10df8     0C F0 07 F1 | 	add	ptra, #12
10dfc     08 4E 05 F1 | 	add	fp, #8
10e00     A7 38 68 FC | 	wrlong	#28, fp
10e04     08 4E 85 F1 | 	sub	fp, #8
10e08     79 00 00 FF 
10e0c     CC E5 05 F1 | 	add	objptr, ##62412
10e10     F2 12 02 FB | 	rdlong	arg01, objptr
10e14     79 00 00 FF 
10e18     CC E5 85 F1 | 	sub	objptr, ##62412
10e1c     A7 12 62 FC | 	wrlong	arg01, fp
10e20     A7 12 02 F6 | 	mov	arg01, fp
10e24     FC 7D BF FD | 	call	#_push
10e28     A7 F0 03 F6 | 	mov	ptra, fp
10e2c     B2 00 A0 FD | 	call	#popregs_
10e30                 | _do_mousew_ret
10e30     2D 00 64 FD | 	ret
10e34                 | 
10e34                 | ' 
10e34                 | ' sub do_mousek
10e34                 | _do_mousek
10e34     00 4A 05 F6 | 	mov	COUNT_, #0
10e38     A8 00 A0 FD | 	call	#pushregs_
10e3c     0C F0 07 F1 | 	add	ptra, #12
10e40     08 4E 05 F1 | 	add	fp, #8
10e44     A7 3A 68 FC | 	wrlong	#29, fp
10e48     08 4E 85 F1 | 	sub	fp, #8
10e4c     79 00 00 FF 
10e50     C8 E5 05 F1 | 	add	objptr, ##62408
10e54     F2 12 02 FB | 	rdlong	arg01, objptr
10e58     79 00 00 FF 
10e5c     C8 E5 85 F1 | 	sub	objptr, ##62408
10e60     A7 12 62 FC | 	wrlong	arg01, fp
10e64     A7 12 02 F6 | 	mov	arg01, fp
10e68     B8 7D BF FD | 	call	#_push
10e6c     A7 F0 03 F6 | 	mov	ptra, fp
10e70     B2 00 A0 FD | 	call	#popregs_
10e74                 | _do_mousek_ret
10e74     2D 00 64 FD | 	ret
10e78                 | 
10e78                 | ' 
10e78                 | ' 
10e78                 | ' sub do_rdpin
10e78                 | _do_rdpin
10e78     00 4A 05 F6 | 	mov	COUNT_, #0
10e7c     A8 00 A0 FD | 	call	#pushregs_
10e80     0C F0 07 F1 | 	add	ptra, #12
10e84     04 7D BF FD | 	call	#_pop
10e88     A7 FA 61 FC | 	wrlong	result1, fp
10e8c     04 4E 05 F1 | 	add	fp, #4
10e90     A7 FC 61 FC | 	wrlong	result2, fp
10e94     04 4E 05 F1 | 	add	fp, #4
10e98     A7 FE 61 FC | 	wrlong	result3, fp
10e9c     08 4E 85 F1 | 	sub	fp, #8
10ea0     A7 12 02 F6 | 	mov	arg01, fp
10ea4     38 F1 BF FD | 	call	#_converttoint
10ea8     FD FA 89 FA | 	rdpin	result1, result1
10eac     7A 00 00 FF 
10eb0     C0 E4 05 F1 | 	add	objptr, ##62656
10eb4     F2 FA 61 FC | 	wrlong	result1, objptr
10eb8     7A 00 00 FF 
10ebc     C0 E4 85 F1 | 	sub	objptr, ##62656
10ec0     08 4E 05 F1 | 	add	fp, #8
10ec4     A7 3A 68 FC | 	wrlong	#29, fp
10ec8     08 4E 85 F1 | 	sub	fp, #8
10ecc     A7 08 68 FC | 	wrlong	#4, fp
10ed0     A7 12 02 F6 | 	mov	arg01, fp
10ed4     4C 7D BF FD | 	call	#_push
10ed8     A7 F0 03 F6 | 	mov	ptra, fp
10edc     B2 00 A0 FD | 	call	#popregs_
10ee0                 | _do_rdpin_ret
10ee0     2D 00 64 FD | 	ret
10ee4                 | 
10ee4                 | ' 
10ee4                 | ' sub do_rqpin
10ee4                 | _do_rqpin
10ee4     00 4A 05 F6 | 	mov	COUNT_, #0
10ee8     A8 00 A0 FD | 	call	#pushregs_
10eec     0C F0 07 F1 | 	add	ptra, #12
10ef0     98 7C BF FD | 	call	#_pop
10ef4     A7 FA 61 FC | 	wrlong	result1, fp
10ef8     04 4E 05 F1 | 	add	fp, #4
10efc     A7 FC 61 FC | 	wrlong	result2, fp
10f00     04 4E 05 F1 | 	add	fp, #4
10f04     A7 FE 61 FC | 	wrlong	result3, fp
10f08     08 4E 85 F1 | 	sub	fp, #8
10f0c     A7 12 02 F6 | 	mov	arg01, fp
10f10     CC F0 BF FD | 	call	#_converttoint
10f14     FD 12 02 F6 | 	mov	arg01, result1
10f18     00 FA 05 F6 | 	mov	result1, #0
10f1c     09 FB 81 FA | 	rqpin	result1, arg01
10f20     7A 00 00 FF 
10f24     C0 E4 05 F1 | 	add	objptr, ##62656
10f28     F2 FA 61 FC | 	wrlong	result1, objptr
10f2c     7A 00 00 FF 
10f30     C0 E4 85 F1 | 	sub	objptr, ##62656
10f34     08 4E 05 F1 | 	add	fp, #8
10f38     A7 3A 68 FC | 	wrlong	#29, fp
10f3c     08 4E 85 F1 | 	sub	fp, #8
10f40     A7 08 68 FC | 	wrlong	#4, fp
10f44     A7 12 02 F6 | 	mov	arg01, fp
10f48     D8 7C BF FD | 	call	#_push
10f4c     A7 F0 03 F6 | 	mov	ptra, fp
10f50     B2 00 A0 FD | 	call	#popregs_
10f54                 | _do_rqpin_ret
10f54     2D 00 64 FD | 	ret
10f58                 | 
10f58                 | ' 
10f58                 | ' sub do_pinread
10f58                 | _do_pinread
10f58     00 4A 05 F6 | 	mov	COUNT_, #0
10f5c     A8 00 A0 FD | 	call	#pushregs_
10f60     0C F0 07 F1 | 	add	ptra, #12
10f64     24 7C BF FD | 	call	#_pop
10f68     A7 FA 61 FC | 	wrlong	result1, fp
10f6c     04 4E 05 F1 | 	add	fp, #4
10f70     A7 FC 61 FC | 	wrlong	result2, fp
10f74     04 4E 05 F1 | 	add	fp, #4
10f78     A7 FE 61 FC | 	wrlong	result3, fp
10f7c     08 4E 85 F1 | 	sub	fp, #8
10f80     A7 12 02 F6 | 	mov	arg01, fp
10f84     58 F0 BF FD | 	call	#_converttoint
10f88     FD 12 02 F6 | 	mov	arg01, result1
10f8c     20 12 CE F7 | 	test	arg01, #32 wz
10f90     FF FB 01 56 |  if_ne	mov	result1, inb
10f94     FE FB 01 A6 |  if_e	mov	result1, ina
10f98     09 FB 41 F0 | 	shr	result1, arg01
10f9c     06 12 46 F0 | 	shr	arg01, #6
10fa0     09 FB 41 F7 | 	zerox	result1, arg01
10fa4     7A 00 00 FF 
10fa8     C0 E4 05 F1 | 	add	objptr, ##62656
10fac     F2 FA 61 FC | 	wrlong	result1, objptr
10fb0     7A 00 00 FF 
10fb4     C0 E4 85 F1 | 	sub	objptr, ##62656
10fb8     08 4E 05 F1 | 	add	fp, #8
10fbc     A7 3A 68 FC | 	wrlong	#29, fp
10fc0     08 4E 85 F1 | 	sub	fp, #8
10fc4     A7 08 68 FC | 	wrlong	#4, fp
10fc8     A7 12 02 F6 | 	mov	arg01, fp
10fcc     54 7C BF FD | 	call	#_push
10fd0     A7 F0 03 F6 | 	mov	ptra, fp
10fd4     B2 00 A0 FD | 	call	#popregs_
10fd8                 | _do_pinread_ret
10fd8     2D 00 64 FD | 	ret
10fdc                 | 
10fdc                 | ' 
10fdc                 | ' sub do_gettime
10fdc                 | _do_gettime
10fdc     02 4A 05 F6 | 	mov	COUNT_, #2
10fe0     A8 00 A0 FD | 	call	#pushregs_
10fe4     14 F0 07 F1 | 	add	ptra, #20
10fe8                 | ' 
10fe8                 | ' const asm 
10fe8     1A 1E 72 FD | 	getct	local01 wc
10fec     1A 20 62 FD | 	getct	local02
10ff0                 | ' 
10ff0                 | ' return hi1, lo1
10ff0     10 FD 01 F6 | 	mov	result2, local02
10ff4     A7 1E 62 FC | 	wrlong	local01, fp
10ff8     04 4E 05 F1 | 	add	fp, #4
10ffc     A7 FC 61 FC | 	wrlong	result2, fp
11000     0C 4E 05 F1 | 	add	fp, #12
11004     A7 3A 68 FC | 	wrlong	#29, fp
11008     0C 4E 85 F1 | 	sub	fp, #12
1100c     A7 12 02 FB | 	rdlong	arg01, fp
11010     04 4E 05 F1 | 	add	fp, #4
11014     A7 12 62 FC | 	wrlong	arg01, fp
11018     08 4E 85 F1 | 	sub	fp, #8
1101c     A7 12 02 FB | 	rdlong	arg01, fp
11020     0C 4E 05 F1 | 	add	fp, #12
11024     A7 12 62 FC | 	wrlong	arg01, fp
11028     04 4E 85 F1 | 	sub	fp, #4
1102c     A7 12 02 F6 | 	mov	arg01, fp
11030     08 4E 85 F1 | 	sub	fp, #8
11034     EC 7B BF FD | 	call	#_push
11038     A7 F0 03 F6 | 	mov	ptra, fp
1103c     B2 00 A0 FD | 	call	#popregs_
11040                 | _do_gettime_ret
11040     2D 00 64 FD | 	ret
11044                 | 
11044                 | '    
11044                 | ' 
11044                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
11044                 | ' 
11044                 | ' '' ----------------------------- Clear the screen
11044                 | ' 
11044                 | ' sub do_cls
11044                 | _do_cls
11044     56 00 00 FF 
11048     10 E4 05 F1 | 	add	objptr, ##44048
1104c     F2 12 02 FB | 	rdlong	arg01, objptr
11050     04 E4 85 F1 | 	sub	objptr, #4
11054     F2 14 02 FB | 	rdlong	arg02, objptr
11058     56 00 00 FF 
1105c     0C E4 85 F1 | 	sub	objptr, ##44044
11060     10 55 B0 FD | 	call	#_hg010b_spin2_cls
11064     56 00 00 FF 
11068     10 E4 05 F1 | 	add	objptr, ##44048
1106c     F2 14 02 FB | 	rdlong	arg02, objptr
11070     14 E4 85 F1 | 	sub	objptr, #20
11074     F2 14 62 FC | 	wrlong	arg02, objptr
11078     55 00 00 FF 
1107c     FC E5 85 F1 | 	sub	objptr, ##44028
11080                 | ' cls(ink,paper): plot_color=ink: print
11080     00 12 06 F6 | 	mov	arg01, #0
11084     E8 BC B0 FD | 	call	#__system___getiolock_0383
11088     FD 12 02 F6 | 	mov	arg01, result1
1108c     C8 67 B0 FD | 	call	#__system___lockmem
11090     00 12 06 F6 | 	mov	arg01, #0
11094     0A 14 06 F6 | 	mov	arg02, #10
11098     00 16 06 F6 | 	mov	arg03, #0
1109c     54 74 B0 FD | 	call	#__system___basic_print_char
110a0     00 12 06 F6 | 	mov	arg01, #0
110a4     C8 BC B0 FD | 	call	#__system___getiolock_0383
110a8     FD 00 68 FC | 	wrlong	#0, result1
110ac                 | _do_cls_ret
110ac     2D 00 64 FD | 	ret
110b0                 | 
110b0                 | ' 
110b0                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
110b0                 | ' 
110b0                 | ' sub do_color
110b0                 | _do_color
110b0     03 4A 05 F6 | 	mov	COUNT_, #3
110b4     A8 00 A0 FD | 	call	#pushregs_
110b8     D0 7A BF FD | 	call	#_pop
110bc     FD 1E 02 F6 | 	mov	local01, result1
110c0     FE 20 02 F6 | 	mov	local02, result2
110c4     FF 22 02 F6 | 	mov	local03, result3
110c8     55 00 00 FF 
110cc     FC E5 05 F1 | 	add	objptr, ##44028
110d0     F2 1E 62 FC | 	wrlong	local01, objptr
110d4     55 00 00 FF 
110d8     FC E5 85 F1 | 	sub	objptr, ##44028
110dc     A7 F0 03 F6 | 	mov	ptra, fp
110e0     B2 00 A0 FD | 	call	#popregs_
110e4                 | _do_color_ret
110e4     2D 00 64 FD | 	ret
110e8                 | 
110e8                 | ' 
110e8                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
110e8                 | ' 
110e8                 | ' sub do_plot
110e8                 | _do_plot
110e8     08 4A 05 F6 | 	mov	COUNT_, #8
110ec     A8 00 A0 FD | 	call	#pushregs_
110f0     98 7A BF FD | 	call	#_pop
110f4     FD 1E 02 F6 | 	mov	local01, result1
110f8     FE 14 02 F6 | 	mov	arg02, result2
110fc     FF 16 02 F6 | 	mov	arg03, result3
11100     0A 21 02 F6 | 	mov	local02, arg02
11104     0B 23 02 F6 | 	mov	local03, arg03
11108     80 7A BF FD | 	call	#_pop
1110c     FD 24 02 F6 | 	mov	local04, result1
11110     FE 26 02 F6 | 	mov	local05, result2
11114     FF 28 02 F6 | 	mov	local06, result3
11118     12 2B 02 F6 | 	mov	local07, local04
1111c     0F 2D 02 F6 | 	mov	local08, local01
11120                 | ' t2=pop() 					 
11120                 | ' t1=pop()
11120                 | ' 
11120                 | ' x=t1.result.iresult
11120                 | ' y=t2.result.iresult	
11120                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
11120     1C 28 0E F2 | 	cmp	local06, #28 wz
11124     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
11128     44 00 90 5D |  if_ne	jmp	#LR__1350
1112c     1C 22 0E F2 | 	cmp	local03, #28 wz
11130     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
11134     38 00 90 5D |  if_ne	jmp	#LR__1350
11138     56 00 00 FF 
1113c     00 E4 05 F1 | 	add	objptr, ##44032
11140     F2 2A 62 FC | 	wrlong	local07, objptr
11144     04 E4 05 F1 | 	add	objptr, #4
11148     F2 2C 62 FC | 	wrlong	local08, objptr
1114c     04 E4 85 F1 | 	sub	objptr, #4
11150     F2 12 02 FB | 	rdlong	arg01, objptr
11154     04 E4 85 F1 | 	sub	objptr, #4
11158     F2 16 02 FB | 	rdlong	arg03, objptr
1115c     55 00 00 FF 
11160     FC E5 85 F1 | 	sub	objptr, ##44028
11164     16 15 02 F6 | 	mov	arg02, local08
11168     9C 47 B0 FD | 	call	#_hg010b_spin2_putpixel
1116c     A4 00 90 FD | 	jmp	#LR__1355
11170                 | LR__1350
11170                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
11170     1E 28 0E F2 | 	cmp	local06, #30 wz
11174     10 00 90 5D |  if_ne	jmp	#LR__1351
11178     12 13 02 F6 | 	mov	arg01, local04
1117c     01 14 06 F6 | 	mov	arg02, #1
11180     AC 94 B0 FD | 	call	#__system___float_tointeger
11184     FD 2A 02 F6 | 	mov	local07, result1
11188                 | LR__1351
11188                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
11188     1E 22 0E F2 | 	cmp	local03, #30 wz
1118c     10 00 90 5D |  if_ne	jmp	#LR__1352
11190     0F 13 02 F6 | 	mov	arg01, local01
11194     01 14 06 F6 | 	mov	arg02, #1
11198     94 94 B0 FD | 	call	#__system___float_tointeger
1119c     FD 2C 02 F6 | 	mov	local08, result1
111a0                 | LR__1352
111a0                 | '   if t1.result_type=result_string then x=val(t1.result.sresult)
111a0     1F 28 0E F2 | 	cmp	local06, #31 wz
111a4     18 00 90 5D |  if_ne	jmp	#LR__1353
111a8     12 13 02 F6 | 	mov	arg01, local04
111ac     A0 97 B0 FD | 	call	#__system____builtin_atof
111b0     FD 12 02 F6 | 	mov	arg01, result1
111b4     00 14 06 F6 | 	mov	arg02, #0
111b8     74 94 B0 FD | 	call	#__system___float_tointeger
111bc     FD 2A 02 F6 | 	mov	local07, result1
111c0                 | LR__1353
111c0                 | '   if t2.result_type=result_string then y=val(t2.result.sresult)
111c0     1F 22 0E F2 | 	cmp	local03, #31 wz
111c4     18 00 90 5D |  if_ne	jmp	#LR__1354
111c8     0F 13 02 F6 | 	mov	arg01, local01
111cc     80 97 B0 FD | 	call	#__system____builtin_atof
111d0     FD 12 02 F6 | 	mov	arg01, result1
111d4     00 14 06 F6 | 	mov	arg02, #0
111d8     54 94 B0 FD | 	call	#__system___float_tointeger
111dc     FD 2C 02 F6 | 	mov	local08, result1
111e0                 | LR__1354
111e0     56 00 00 FF 
111e4     00 E4 05 F1 | 	add	objptr, ##44032
111e8     F2 2A 62 FC | 	wrlong	local07, objptr
111ec     04 E4 05 F1 | 	add	objptr, #4
111f0     F2 2C 62 FC | 	wrlong	local08, objptr
111f4     04 E4 85 F1 | 	sub	objptr, #4
111f8     F2 12 02 FB | 	rdlong	arg01, objptr
111fc     04 E4 85 F1 | 	sub	objptr, #4
11200     F2 16 02 FB | 	rdlong	arg03, objptr
11204     55 00 00 FF 
11208     FC E5 85 F1 | 	sub	objptr, ##44028
1120c     16 15 02 F6 | 	mov	arg02, local08
11210     F4 46 B0 FD | 	call	#_hg010b_spin2_putpixel
11214                 | LR__1355
11214     A7 F0 03 F6 | 	mov	ptra, fp
11218     B2 00 A0 FD | 	call	#popregs_
1121c                 | _do_plot_ret
1121c     2D 00 64 FD | 	ret
11220                 | 
11220                 | ' 
11220                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
11220                 | ' 
11220                 | ' sub do_draw
11220                 | _do_draw
11220     08 4A 05 F6 | 	mov	COUNT_, #8
11224     A8 00 A0 FD | 	call	#pushregs_
11228     60 79 BF FD | 	call	#_pop
1122c     FD 1E 02 F6 | 	mov	local01, result1
11230     FE 18 02 F6 | 	mov	arg04, result2
11234     FF 16 02 F6 | 	mov	arg03, result3
11238     0C 21 02 F6 | 	mov	local02, arg04
1123c     0B 23 02 F6 | 	mov	local03, arg03
11240     48 79 BF FD | 	call	#_pop
11244     FD 24 02 F6 | 	mov	local04, result1
11248     FE 26 02 F6 | 	mov	local05, result2
1124c     FF 28 02 F6 | 	mov	local06, result3
11250     12 2B 02 F6 | 	mov	local07, local04
11254     0F 2D 02 F6 | 	mov	local08, local01
11258                 | ' 
11258                 | ' t2=pop()
11258                 | ' t1=pop()
11258                 | ' x=t1.result.iresult
11258                 | ' y=t2.result.iresult
11258                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
11258     1C 28 0E F2 | 	cmp	local06, #28 wz
1125c     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
11260     5C 00 90 5D |  if_ne	jmp	#LR__1360
11264     1C 22 0E F2 | 	cmp	local03, #28 wz
11268     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
1126c     50 00 90 5D |  if_ne	jmp	#LR__1360
11270     56 00 00 FF 
11274     00 E4 05 F1 | 	add	objptr, ##44032
11278     F2 12 02 FB | 	rdlong	arg01, objptr
1127c     04 E4 05 F1 | 	add	objptr, #4
11280     F2 14 02 FB | 	rdlong	arg02, objptr
11284     08 E4 85 F1 | 	sub	objptr, #8
11288     F2 1A 02 FB | 	rdlong	arg05, objptr
1128c     55 00 00 FF 
11290     FC E5 85 F1 | 	sub	objptr, ##44028
11294     15 17 02 F6 | 	mov	arg03, local07
11298     16 19 02 F6 | 	mov	arg04, local08
1129c     18 49 B0 FD | 	call	#_hg010b_spin2_draw
112a0     56 00 00 FF 
112a4     00 E4 05 F1 | 	add	objptr, ##44032
112a8     F2 2A 62 FC | 	wrlong	local07, objptr
112ac     04 E4 05 F1 | 	add	objptr, #4
112b0     F2 2C 62 FC | 	wrlong	local08, objptr
112b4     56 00 00 FF 
112b8     04 E4 85 F1 | 	sub	objptr, ##44036
112bc     BC 00 90 FD | 	jmp	#LR__1365
112c0                 | LR__1360
112c0                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
112c0     1E 28 0E F2 | 	cmp	local06, #30 wz
112c4     10 00 90 5D |  if_ne	jmp	#LR__1361
112c8     12 13 02 F6 | 	mov	arg01, local04
112cc     01 14 06 F6 | 	mov	arg02, #1
112d0     5C 93 B0 FD | 	call	#__system___float_tointeger
112d4     FD 2A 02 F6 | 	mov	local07, result1
112d8                 | LR__1361
112d8                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
112d8     1E 22 0E F2 | 	cmp	local03, #30 wz
112dc     10 00 90 5D |  if_ne	jmp	#LR__1362
112e0     0F 13 02 F6 | 	mov	arg01, local01
112e4     01 14 06 F6 | 	mov	arg02, #1
112e8     44 93 B0 FD | 	call	#__system___float_tointeger
112ec     FD 2C 02 F6 | 	mov	local08, result1
112f0                 | LR__1362
112f0                 | '   if t1.result_type=result_string then x=val(t1.result.fresult)
112f0     1F 28 0E F2 | 	cmp	local06, #31 wz
112f4     18 00 90 5D |  if_ne	jmp	#LR__1363
112f8     12 13 02 F6 | 	mov	arg01, local04
112fc     50 96 B0 FD | 	call	#__system____builtin_atof
11300     FD 12 02 F6 | 	mov	arg01, result1
11304     00 14 06 F6 | 	mov	arg02, #0
11308     24 93 B0 FD | 	call	#__system___float_tointeger
1130c     FD 2A 02 F6 | 	mov	local07, result1
11310                 | LR__1363
11310                 | '   if t2.result_type=result_string then y=val(t2.result.fresult)    
11310     1F 22 0E F2 | 	cmp	local03, #31 wz
11314     18 00 90 5D |  if_ne	jmp	#LR__1364
11318     0F 13 02 F6 | 	mov	arg01, local01
1131c     30 96 B0 FD | 	call	#__system____builtin_atof
11320     FD 12 02 F6 | 	mov	arg01, result1
11324     00 14 06 F6 | 	mov	arg02, #0
11328     04 93 B0 FD | 	call	#__system___float_tointeger
1132c     FD 2C 02 F6 | 	mov	local08, result1
11330                 | LR__1364
11330     56 00 00 FF 
11334     00 E4 05 F1 | 	add	objptr, ##44032
11338     F2 12 02 FB | 	rdlong	arg01, objptr
1133c     04 E4 05 F1 | 	add	objptr, #4
11340     F2 14 02 FB | 	rdlong	arg02, objptr
11344     08 E4 85 F1 | 	sub	objptr, #8
11348     F2 1A 02 FB | 	rdlong	arg05, objptr
1134c     55 00 00 FF 
11350     FC E5 85 F1 | 	sub	objptr, ##44028
11354     15 17 02 F6 | 	mov	arg03, local07
11358     16 19 02 F6 | 	mov	arg04, local08
1135c     58 48 B0 FD | 	call	#_hg010b_spin2_draw
11360     56 00 00 FF 
11364     00 E4 05 F1 | 	add	objptr, ##44032
11368     F2 2A 62 FC | 	wrlong	local07, objptr
1136c     04 E4 05 F1 | 	add	objptr, #4
11370     F2 2C 62 FC | 	wrlong	local08, objptr
11374     56 00 00 FF 
11378     04 E4 85 F1 | 	sub	objptr, ##44036
1137c                 | LR__1365
1137c     A7 F0 03 F6 | 	mov	ptra, fp
11380     B2 00 A0 FD | 	call	#popregs_
11384                 | _do_draw_ret
11384     2D 00 64 FD | 	ret
11388                 | 
11388                 | ' 
11388                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
11388                 | ' 
11388                 | ' sub do_fcircle
11388                 | _do_fcircle
11388     02 4A 05 F6 | 	mov	COUNT_, #2
1138c     A8 00 A0 FD | 	call	#pushregs_
11390     24 F0 07 F1 | 	add	ptra, #36
11394     F4 77 BF FD | 	call	#_pop
11398     FD 18 02 F6 | 	mov	arg04, result1
1139c     FE 16 02 F6 | 	mov	arg03, result2
113a0     FF 14 02 F6 | 	mov	arg02, result3
113a4     18 4E 05 F1 | 	add	fp, #24
113a8     A7 18 62 FC | 	wrlong	arg04, fp
113ac     04 4E 05 F1 | 	add	fp, #4
113b0     A7 16 62 FC | 	wrlong	arg03, fp
113b4     04 4E 05 F1 | 	add	fp, #4
113b8     A7 14 62 FC | 	wrlong	arg02, fp
113bc     20 4E 85 F1 | 	sub	fp, #32
113c0     C8 77 BF FD | 	call	#_pop
113c4     FD 18 02 F6 | 	mov	arg04, result1
113c8     FE 16 02 F6 | 	mov	arg03, result2
113cc     FF 1E 02 F6 | 	mov	local01, result3
113d0     0C 4E 05 F1 | 	add	fp, #12
113d4     A7 18 62 FC | 	wrlong	arg04, fp
113d8     04 4E 05 F1 | 	add	fp, #4
113dc     A7 16 62 FC | 	wrlong	arg03, fp
113e0     04 4E 05 F1 | 	add	fp, #4
113e4     A7 1E 62 FC | 	wrlong	local01, fp
113e8     14 4E 85 F1 | 	sub	fp, #20
113ec     9C 77 BF FD | 	call	#_pop
113f0     A7 FA 61 FC | 	wrlong	result1, fp
113f4     04 4E 05 F1 | 	add	fp, #4
113f8     A7 FC 61 FC | 	wrlong	result2, fp
113fc     04 4E 05 F1 | 	add	fp, #4
11400     A7 FE 61 FC | 	wrlong	result3, fp
11404                 | ' 
11404                 | ' t3=pop()
11404                 | ' t2=pop()
11404                 | ' t1=pop()
11404                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
11404     FF 18 02 F6 | 	mov	arg04, result3
11408     08 4E 85 F1 | 	sub	fp, #8
1140c     1C 18 0E F2 | 	cmp	arg04, #28 wz
11410     08 4E 05 51 |  if_ne	add	fp, #8
11414     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11418     08 4E 85 51 |  if_ne	sub	fp, #8
1141c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
11420     7C 00 90 5D |  if_ne	jmp	#LR__1370
11424     14 4E 05 F1 | 	add	fp, #20
11428     A7 1E 02 FB | 	rdlong	local01, fp
1142c     14 4E 85 F1 | 	sub	fp, #20
11430     1C 1E 0E F2 | 	cmp	local01, #28 wz
11434     14 4E 05 51 |  if_ne	add	fp, #20
11438     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1143c     14 4E 85 51 |  if_ne	sub	fp, #20
11440     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
11444     58 00 90 5D |  if_ne	jmp	#LR__1370
11448     20 4E 05 F1 | 	add	fp, #32
1144c     A7 1E 02 FB | 	rdlong	local01, fp
11450     20 4E 85 F1 | 	sub	fp, #32
11454     1C 1E 0E F2 | 	cmp	local01, #28 wz
11458     20 4E 05 51 |  if_ne	add	fp, #32
1145c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
11460     20 4E 85 51 |  if_ne	sub	fp, #32
11464     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
11468     34 00 90 5D |  if_ne	jmp	#LR__1370
1146c     A7 12 02 FB | 	rdlong	arg01, fp
11470     0C 4E 05 F1 | 	add	fp, #12
11474     A7 14 02 FB | 	rdlong	arg02, fp
11478     0C 4E 05 F1 | 	add	fp, #12
1147c     A7 16 02 FB | 	rdlong	arg03, fp
11480     18 4E 85 F1 | 	sub	fp, #24
11484     55 00 00 FF 
11488     FC E5 05 F1 | 	add	objptr, ##44028
1148c     F2 18 02 FB | 	rdlong	arg04, objptr
11490     55 00 00 FF 
11494     FC E5 85 F1 | 	sub	objptr, ##44028
11498     A0 4B B0 FD | 	call	#_hg010b_spin2_fcircle
1149c                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
1149c     54 00 90 FD | 	jmp	#LR__1371
114a0                 | LR__1370
114a0     A7 12 02 F6 | 	mov	arg01, fp
114a4     38 EB BF FD | 	call	#_converttoint
114a8     FD 1E 02 F6 | 	mov	local01, result1
114ac     0C 4E 05 F1 | 	add	fp, #12
114b0     A7 12 02 F6 | 	mov	arg01, fp
114b4     0C 4E 85 F1 | 	sub	fp, #12
114b8     24 EB BF FD | 	call	#_converttoint
114bc     FD 20 02 F6 | 	mov	local02, result1
114c0     18 4E 05 F1 | 	add	fp, #24
114c4     A7 12 02 F6 | 	mov	arg01, fp
114c8     18 4E 85 F1 | 	sub	fp, #24
114cc     10 EB BF FD | 	call	#_converttoint
114d0     FD 16 02 F6 | 	mov	arg03, result1
114d4     55 00 00 FF 
114d8     FC E5 05 F1 | 	add	objptr, ##44028
114dc     F2 18 02 FB | 	rdlong	arg04, objptr
114e0     55 00 00 FF 
114e4     FC E5 85 F1 | 	sub	objptr, ##44028
114e8     0F 13 02 F6 | 	mov	arg01, local01
114ec     10 15 02 F6 | 	mov	arg02, local02
114f0     48 4B B0 FD | 	call	#_hg010b_spin2_fcircle
114f4                 | LR__1371
114f4     A7 F0 03 F6 | 	mov	ptra, fp
114f8     B2 00 A0 FD | 	call	#popregs_
114fc                 | _do_fcircle_ret
114fc     2D 00 64 FD | 	ret
11500                 | 
11500                 | ' 
11500                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
11500                 | ' 
11500                 | ' sub do_circle
11500                 | _do_circle
11500     02 4A 05 F6 | 	mov	COUNT_, #2
11504     A8 00 A0 FD | 	call	#pushregs_
11508     24 F0 07 F1 | 	add	ptra, #36
1150c     7C 76 BF FD | 	call	#_pop
11510     FD 18 02 F6 | 	mov	arg04, result1
11514     FE 16 02 F6 | 	mov	arg03, result2
11518     FF 14 02 F6 | 	mov	arg02, result3
1151c     18 4E 05 F1 | 	add	fp, #24
11520     A7 18 62 FC | 	wrlong	arg04, fp
11524     04 4E 05 F1 | 	add	fp, #4
11528     A7 16 62 FC | 	wrlong	arg03, fp
1152c     04 4E 05 F1 | 	add	fp, #4
11530     A7 14 62 FC | 	wrlong	arg02, fp
11534     20 4E 85 F1 | 	sub	fp, #32
11538     50 76 BF FD | 	call	#_pop
1153c     FD 18 02 F6 | 	mov	arg04, result1
11540     FE 16 02 F6 | 	mov	arg03, result2
11544     FF 1E 02 F6 | 	mov	local01, result3
11548     0C 4E 05 F1 | 	add	fp, #12
1154c     A7 18 62 FC | 	wrlong	arg04, fp
11550     04 4E 05 F1 | 	add	fp, #4
11554     A7 16 62 FC | 	wrlong	arg03, fp
11558     04 4E 05 F1 | 	add	fp, #4
1155c     A7 1E 62 FC | 	wrlong	local01, fp
11560     14 4E 85 F1 | 	sub	fp, #20
11564     24 76 BF FD | 	call	#_pop
11568     A7 FA 61 FC | 	wrlong	result1, fp
1156c     04 4E 05 F1 | 	add	fp, #4
11570     A7 FC 61 FC | 	wrlong	result2, fp
11574     04 4E 05 F1 | 	add	fp, #4
11578     A7 FE 61 FC | 	wrlong	result3, fp
1157c                 | ' 
1157c                 | ' t3=pop()
1157c                 | ' t2=pop()
1157c                 | ' t1=pop()
1157c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
1157c     FF 18 02 F6 | 	mov	arg04, result3
11580     08 4E 85 F1 | 	sub	fp, #8
11584     1C 18 0E F2 | 	cmp	arg04, #28 wz
11588     08 4E 05 51 |  if_ne	add	fp, #8
1158c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11590     08 4E 85 51 |  if_ne	sub	fp, #8
11594     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
11598     7C 00 90 5D |  if_ne	jmp	#LR__1380
1159c     14 4E 05 F1 | 	add	fp, #20
115a0     A7 1E 02 FB | 	rdlong	local01, fp
115a4     14 4E 85 F1 | 	sub	fp, #20
115a8     1C 1E 0E F2 | 	cmp	local01, #28 wz
115ac     14 4E 05 51 |  if_ne	add	fp, #20
115b0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
115b4     14 4E 85 51 |  if_ne	sub	fp, #20
115b8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
115bc     58 00 90 5D |  if_ne	jmp	#LR__1380
115c0     20 4E 05 F1 | 	add	fp, #32
115c4     A7 1E 02 FB | 	rdlong	local01, fp
115c8     20 4E 85 F1 | 	sub	fp, #32
115cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
115d0     20 4E 05 51 |  if_ne	add	fp, #32
115d4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
115d8     20 4E 85 51 |  if_ne	sub	fp, #32
115dc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
115e0     34 00 90 5D |  if_ne	jmp	#LR__1380
115e4     A7 12 02 FB | 	rdlong	arg01, fp
115e8     0C 4E 05 F1 | 	add	fp, #12
115ec     A7 14 02 FB | 	rdlong	arg02, fp
115f0     0C 4E 05 F1 | 	add	fp, #12
115f4     A7 16 02 FB | 	rdlong	arg03, fp
115f8     18 4E 85 F1 | 	sub	fp, #24
115fc     55 00 00 FF 
11600     FC E5 05 F1 | 	add	objptr, ##44028
11604     F2 18 02 FB | 	rdlong	arg04, objptr
11608     55 00 00 FF 
1160c     FC E5 85 F1 | 	sub	objptr, ##44028
11610     34 4B B0 FD | 	call	#_hg010b_spin2_circle
11614                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
11614     54 00 90 FD | 	jmp	#LR__1381
11618                 | LR__1380
11618     A7 12 02 F6 | 	mov	arg01, fp
1161c     C0 E9 BF FD | 	call	#_converttoint
11620     FD 1E 02 F6 | 	mov	local01, result1
11624     0C 4E 05 F1 | 	add	fp, #12
11628     A7 12 02 F6 | 	mov	arg01, fp
1162c     0C 4E 85 F1 | 	sub	fp, #12
11630     AC E9 BF FD | 	call	#_converttoint
11634     FD 20 02 F6 | 	mov	local02, result1
11638     18 4E 05 F1 | 	add	fp, #24
1163c     A7 12 02 F6 | 	mov	arg01, fp
11640     18 4E 85 F1 | 	sub	fp, #24
11644     98 E9 BF FD | 	call	#_converttoint
11648     FD 16 02 F6 | 	mov	arg03, result1
1164c     55 00 00 FF 
11650     FC E5 05 F1 | 	add	objptr, ##44028
11654     F2 18 02 FB | 	rdlong	arg04, objptr
11658     55 00 00 FF 
1165c     FC E5 85 F1 | 	sub	objptr, ##44028
11660     0F 13 02 F6 | 	mov	arg01, local01
11664     10 15 02 F6 | 	mov	arg02, local02
11668     DC 4A B0 FD | 	call	#_hg010b_spin2_circle
1166c                 | LR__1381
1166c     A7 F0 03 F6 | 	mov	ptra, fp
11670     B2 00 A0 FD | 	call	#popregs_
11674                 | _do_circle_ret
11674     2D 00 64 FD | 	ret
11678                 | 
11678                 | ' 
11678                 | ' ' -------------------------- Draw a rectangle
11678                 | ' 
11678                 | ' sub do_box
11678                 | _do_box
11678     03 4A 05 F6 | 	mov	COUNT_, #3
1167c     A8 00 A0 FD | 	call	#pushregs_
11680     30 F0 07 F1 | 	add	ptra, #48
11684     04 75 BF FD | 	call	#_pop
11688     FD 1A 02 F6 | 	mov	arg05, result1
1168c     FE 18 02 F6 | 	mov	arg04, result2
11690     FF 16 02 F6 | 	mov	arg03, result3
11694     24 4E 05 F1 | 	add	fp, #36
11698     A7 1A 62 FC | 	wrlong	arg05, fp
1169c     04 4E 05 F1 | 	add	fp, #4
116a0     A7 18 62 FC | 	wrlong	arg04, fp
116a4     04 4E 05 F1 | 	add	fp, #4
116a8     A7 16 62 FC | 	wrlong	arg03, fp
116ac     2C 4E 85 F1 | 	sub	fp, #44
116b0     D8 74 BF FD | 	call	#_pop
116b4     FD 1A 02 F6 | 	mov	arg05, result1
116b8     FE 18 02 F6 | 	mov	arg04, result2
116bc     FF 16 02 F6 | 	mov	arg03, result3
116c0     18 4E 05 F1 | 	add	fp, #24
116c4     A7 1A 62 FC | 	wrlong	arg05, fp
116c8     04 4E 05 F1 | 	add	fp, #4
116cc     A7 18 62 FC | 	wrlong	arg04, fp
116d0     04 4E 05 F1 | 	add	fp, #4
116d4     A7 16 62 FC | 	wrlong	arg03, fp
116d8     20 4E 85 F1 | 	sub	fp, #32
116dc     AC 74 BF FD | 	call	#_pop
116e0     FD 1A 02 F6 | 	mov	arg05, result1
116e4     FE 18 02 F6 | 	mov	arg04, result2
116e8     FF 1E 02 F6 | 	mov	local01, result3
116ec     0C 4E 05 F1 | 	add	fp, #12
116f0     A7 1A 62 FC | 	wrlong	arg05, fp
116f4     04 4E 05 F1 | 	add	fp, #4
116f8     A7 18 62 FC | 	wrlong	arg04, fp
116fc     04 4E 05 F1 | 	add	fp, #4
11700     A7 1E 62 FC | 	wrlong	local01, fp
11704     14 4E 85 F1 | 	sub	fp, #20
11708     80 74 BF FD | 	call	#_pop
1170c     A7 FA 61 FC | 	wrlong	result1, fp
11710     04 4E 05 F1 | 	add	fp, #4
11714     A7 FC 61 FC | 	wrlong	result2, fp
11718     04 4E 05 F1 | 	add	fp, #4
1171c     A7 FE 61 FC | 	wrlong	result3, fp
11720                 | ' 
11720                 | ' t4=pop()
11720                 | ' t3=pop()
11720                 | ' t2=pop()
11720                 | ' t1=pop()
11720                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
11720     FF 1A 02 F6 | 	mov	arg05, result3
11724     08 4E 85 F1 | 	sub	fp, #8
11728     1C 1A 0E F2 | 	cmp	arg05, #28 wz
1172c     08 4E 05 51 |  if_ne	add	fp, #8
11730     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11734     08 4E 85 51 |  if_ne	sub	fp, #8
11738     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1173c     A8 00 90 5D |  if_ne	jmp	#LR__1390
11740     14 4E 05 F1 | 	add	fp, #20
11744     A7 1E 02 FB | 	rdlong	local01, fp
11748     14 4E 85 F1 | 	sub	fp, #20
1174c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11750     14 4E 05 51 |  if_ne	add	fp, #20
11754     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
11758     14 4E 85 51 |  if_ne	sub	fp, #20
1175c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
11760     84 00 90 5D |  if_ne	jmp	#LR__1390
11764     20 4E 05 F1 | 	add	fp, #32
11768     A7 1E 02 FB | 	rdlong	local01, fp
1176c     20 4E 85 F1 | 	sub	fp, #32
11770     1C 1E 0E F2 | 	cmp	local01, #28 wz
11774     20 4E 05 51 |  if_ne	add	fp, #32
11778     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1177c     20 4E 85 51 |  if_ne	sub	fp, #32
11780     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
11784     60 00 90 5D |  if_ne	jmp	#LR__1390
11788     2C 4E 05 F1 | 	add	fp, #44
1178c     A7 1E 02 FB | 	rdlong	local01, fp
11790     2C 4E 85 F1 | 	sub	fp, #44
11794     1C 1E 0E F2 | 	cmp	local01, #28 wz
11798     2C 4E 05 51 |  if_ne	add	fp, #44
1179c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
117a0     2C 4E 85 51 |  if_ne	sub	fp, #44
117a4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
117a8     3C 00 90 5D |  if_ne	jmp	#LR__1390
117ac     A7 12 02 FB | 	rdlong	arg01, fp
117b0     0C 4E 05 F1 | 	add	fp, #12
117b4     A7 14 02 FB | 	rdlong	arg02, fp
117b8     0C 4E 05 F1 | 	add	fp, #12
117bc     A7 16 02 FB | 	rdlong	arg03, fp
117c0     0C 4E 05 F1 | 	add	fp, #12
117c4     A7 18 02 FB | 	rdlong	arg04, fp
117c8     24 4E 85 F1 | 	sub	fp, #36
117cc     55 00 00 FF 
117d0     FC E5 05 F1 | 	add	objptr, ##44028
117d4     F2 1A 02 FB | 	rdlong	arg05, objptr
117d8     55 00 00 FF 
117dc     FC E5 85 F1 | 	sub	objptr, ##44028
117e0     30 4B B0 FD | 	call	#_hg010b_spin2_box
117e4                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
117e4     6C 00 90 FD | 	jmp	#LR__1391
117e8                 | LR__1390
117e8     A7 12 02 F6 | 	mov	arg01, fp
117ec     F0 E7 BF FD | 	call	#_converttoint
117f0     FD 20 02 F6 | 	mov	local02, result1
117f4     0C 4E 05 F1 | 	add	fp, #12
117f8     A7 12 02 F6 | 	mov	arg01, fp
117fc     0C 4E 85 F1 | 	sub	fp, #12
11800     DC E7 BF FD | 	call	#_converttoint
11804     FD 22 02 F6 | 	mov	local03, result1
11808     18 4E 05 F1 | 	add	fp, #24
1180c     A7 12 02 F6 | 	mov	arg01, fp
11810     18 4E 85 F1 | 	sub	fp, #24
11814     C8 E7 BF FD | 	call	#_converttoint
11818     FD 1E 02 F6 | 	mov	local01, result1
1181c     24 4E 05 F1 | 	add	fp, #36
11820     A7 12 02 F6 | 	mov	arg01, fp
11824     24 4E 85 F1 | 	sub	fp, #36
11828     B4 E7 BF FD | 	call	#_converttoint
1182c     FD 18 02 F6 | 	mov	arg04, result1
11830     55 00 00 FF 
11834     FC E5 05 F1 | 	add	objptr, ##44028
11838     F2 1A 02 FB | 	rdlong	arg05, objptr
1183c     55 00 00 FF 
11840     FC E5 85 F1 | 	sub	objptr, ##44028
11844     10 13 02 F6 | 	mov	arg01, local02
11848     11 15 02 F6 | 	mov	arg02, local03
1184c     0F 17 02 F6 | 	mov	arg03, local01
11850     C0 4A B0 FD | 	call	#_hg010b_spin2_box
11854                 | LR__1391
11854     A7 F0 03 F6 | 	mov	ptra, fp
11858     B2 00 A0 FD | 	call	#popregs_
1185c                 | _do_box_ret
1185c     2D 00 64 FD | 	ret
11860                 | 
11860                 | ' 
11860                 | ' sub do_fill
11860                 | _do_fill
11860     03 4A 05 F6 | 	mov	COUNT_, #3
11864     A8 00 A0 FD | 	call	#pushregs_
11868     30 F0 07 F1 | 	add	ptra, #48
1186c     1C 73 BF FD | 	call	#_pop
11870     FD 18 02 F6 | 	mov	arg04, result1
11874     FE 16 02 F6 | 	mov	arg03, result2
11878     FF 14 02 F6 | 	mov	arg02, result3
1187c     24 4E 05 F1 | 	add	fp, #36
11880     A7 18 62 FC | 	wrlong	arg04, fp
11884     04 4E 05 F1 | 	add	fp, #4
11888     A7 16 62 FC | 	wrlong	arg03, fp
1188c     04 4E 05 F1 | 	add	fp, #4
11890     A7 14 62 FC | 	wrlong	arg02, fp
11894     2C 4E 85 F1 | 	sub	fp, #44
11898     F0 72 BF FD | 	call	#_pop
1189c     FD 18 02 F6 | 	mov	arg04, result1
118a0     FE 16 02 F6 | 	mov	arg03, result2
118a4     FF 14 02 F6 | 	mov	arg02, result3
118a8     18 4E 05 F1 | 	add	fp, #24
118ac     A7 18 62 FC | 	wrlong	arg04, fp
118b0     04 4E 05 F1 | 	add	fp, #4
118b4     A7 16 62 FC | 	wrlong	arg03, fp
118b8     04 4E 05 F1 | 	add	fp, #4
118bc     A7 14 62 FC | 	wrlong	arg02, fp
118c0     20 4E 85 F1 | 	sub	fp, #32
118c4     C4 72 BF FD | 	call	#_pop
118c8     FD 18 02 F6 | 	mov	arg04, result1
118cc     FE 16 02 F6 | 	mov	arg03, result2
118d0     FF 1E 02 F6 | 	mov	local01, result3
118d4     0C 4E 05 F1 | 	add	fp, #12
118d8     A7 18 62 FC | 	wrlong	arg04, fp
118dc     04 4E 05 F1 | 	add	fp, #4
118e0     A7 16 62 FC | 	wrlong	arg03, fp
118e4     04 4E 05 F1 | 	add	fp, #4
118e8     A7 1E 62 FC | 	wrlong	local01, fp
118ec     14 4E 85 F1 | 	sub	fp, #20
118f0     98 72 BF FD | 	call	#_pop
118f4     A7 FA 61 FC | 	wrlong	result1, fp
118f8     04 4E 05 F1 | 	add	fp, #4
118fc     A7 FC 61 FC | 	wrlong	result2, fp
11900     04 4E 05 F1 | 	add	fp, #4
11904     A7 FE 61 FC | 	wrlong	result3, fp
11908                 | ' 
11908                 | ' t4=pop()
11908                 | ' t3=pop()
11908                 | ' t2=pop()
11908                 | ' t1=pop()
11908                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
11908     FF 18 02 F6 | 	mov	arg04, result3
1190c     08 4E 85 F1 | 	sub	fp, #8
11910     1C 18 0E F2 | 	cmp	arg04, #28 wz
11914     08 4E 05 51 |  if_ne	add	fp, #8
11918     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1191c     08 4E 85 51 |  if_ne	sub	fp, #8
11920     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
11924     94 00 90 5D |  if_ne	jmp	#LR__1400
11928     14 4E 05 F1 | 	add	fp, #20
1192c     A7 1E 02 FB | 	rdlong	local01, fp
11930     14 4E 85 F1 | 	sub	fp, #20
11934     1C 1E 0E F2 | 	cmp	local01, #28 wz
11938     14 4E 05 51 |  if_ne	add	fp, #20
1193c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
11940     14 4E 85 51 |  if_ne	sub	fp, #20
11944     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
11948     70 00 90 5D |  if_ne	jmp	#LR__1400
1194c     20 4E 05 F1 | 	add	fp, #32
11950     A7 1E 02 FB | 	rdlong	local01, fp
11954     20 4E 85 F1 | 	sub	fp, #32
11958     1C 1E 0E F2 | 	cmp	local01, #28 wz
1195c     20 4E 05 51 |  if_ne	add	fp, #32
11960     A7 18 02 5B |  if_ne	rdlong	arg04, fp
11964     20 4E 85 51 |  if_ne	sub	fp, #32
11968     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1196c     4C 00 90 5D |  if_ne	jmp	#LR__1400
11970     2C 4E 05 F1 | 	add	fp, #44
11974     A7 1E 02 FB | 	rdlong	local01, fp
11978     2C 4E 85 F1 | 	sub	fp, #44
1197c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11980     2C 4E 05 51 |  if_ne	add	fp, #44
11984     A7 18 02 5B |  if_ne	rdlong	arg04, fp
11988     2C 4E 85 51 |  if_ne	sub	fp, #44
1198c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
11990     28 00 90 5D |  if_ne	jmp	#LR__1400
11994     A7 12 02 FB | 	rdlong	arg01, fp
11998     0C 4E 05 F1 | 	add	fp, #12
1199c     A7 14 02 FB | 	rdlong	arg02, fp
119a0     0C 4E 05 F1 | 	add	fp, #12
119a4     A7 16 02 FB | 	rdlong	arg03, fp
119a8     0C 4E 05 F1 | 	add	fp, #12
119ac     A7 18 02 FB | 	rdlong	arg04, fp
119b0     24 4E 85 F1 | 	sub	fp, #36
119b4     F0 43 B0 FD | 	call	#_hg010b_spin2_fill
119b8                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
119b8     58 00 90 FD | 	jmp	#LR__1401
119bc                 | LR__1400
119bc     A7 12 02 F6 | 	mov	arg01, fp
119c0     1C E6 BF FD | 	call	#_converttoint
119c4     FD 20 02 F6 | 	mov	local02, result1
119c8     0C 4E 05 F1 | 	add	fp, #12
119cc     A7 12 02 F6 | 	mov	arg01, fp
119d0     0C 4E 85 F1 | 	sub	fp, #12
119d4     08 E6 BF FD | 	call	#_converttoint
119d8     FD 22 02 F6 | 	mov	local03, result1
119dc     18 4E 05 F1 | 	add	fp, #24
119e0     A7 12 02 F6 | 	mov	arg01, fp
119e4     18 4E 85 F1 | 	sub	fp, #24
119e8     F4 E5 BF FD | 	call	#_converttoint
119ec     FD 1E 02 F6 | 	mov	local01, result1
119f0     24 4E 05 F1 | 	add	fp, #36
119f4     A7 12 02 F6 | 	mov	arg01, fp
119f8     24 4E 85 F1 | 	sub	fp, #36
119fc     E0 E5 BF FD | 	call	#_converttoint
11a00     FD 18 02 F6 | 	mov	arg04, result1
11a04     10 13 02 F6 | 	mov	arg01, local02
11a08     11 15 02 F6 | 	mov	arg02, local03
11a0c     0F 17 02 F6 | 	mov	arg03, local01
11a10     94 43 B0 FD | 	call	#_hg010b_spin2_fill
11a14                 | LR__1401
11a14     A7 F0 03 F6 | 	mov	ptra, fp
11a18     B2 00 A0 FD | 	call	#popregs_
11a1c                 | _do_fill_ret
11a1c     2D 00 64 FD | 	ret
11a20                 | 
11a20                 | ' 
11a20                 | ' ' -------------------------- Draw a frane
11a20                 | ' 
11a20                 | ' sub do_frame
11a20                 | _do_frame
11a20     03 4A 05 F6 | 	mov	COUNT_, #3
11a24     A8 00 A0 FD | 	call	#pushregs_
11a28     30 F0 07 F1 | 	add	ptra, #48
11a2c     5C 71 BF FD | 	call	#_pop
11a30     FD 1A 02 F6 | 	mov	arg05, result1
11a34     FE 18 02 F6 | 	mov	arg04, result2
11a38     FF 16 02 F6 | 	mov	arg03, result3
11a3c     24 4E 05 F1 | 	add	fp, #36
11a40     A7 1A 62 FC | 	wrlong	arg05, fp
11a44     04 4E 05 F1 | 	add	fp, #4
11a48     A7 18 62 FC | 	wrlong	arg04, fp
11a4c     04 4E 05 F1 | 	add	fp, #4
11a50     A7 16 62 FC | 	wrlong	arg03, fp
11a54     2C 4E 85 F1 | 	sub	fp, #44
11a58     30 71 BF FD | 	call	#_pop
11a5c     FD 1A 02 F6 | 	mov	arg05, result1
11a60     FE 18 02 F6 | 	mov	arg04, result2
11a64     FF 16 02 F6 | 	mov	arg03, result3
11a68     18 4E 05 F1 | 	add	fp, #24
11a6c     A7 1A 62 FC | 	wrlong	arg05, fp
11a70     04 4E 05 F1 | 	add	fp, #4
11a74     A7 18 62 FC | 	wrlong	arg04, fp
11a78     04 4E 05 F1 | 	add	fp, #4
11a7c     A7 16 62 FC | 	wrlong	arg03, fp
11a80     20 4E 85 F1 | 	sub	fp, #32
11a84     04 71 BF FD | 	call	#_pop
11a88     FD 1A 02 F6 | 	mov	arg05, result1
11a8c     FE 18 02 F6 | 	mov	arg04, result2
11a90     FF 1E 02 F6 | 	mov	local01, result3
11a94     0C 4E 05 F1 | 	add	fp, #12
11a98     A7 1A 62 FC | 	wrlong	arg05, fp
11a9c     04 4E 05 F1 | 	add	fp, #4
11aa0     A7 18 62 FC | 	wrlong	arg04, fp
11aa4     04 4E 05 F1 | 	add	fp, #4
11aa8     A7 1E 62 FC | 	wrlong	local01, fp
11aac     14 4E 85 F1 | 	sub	fp, #20
11ab0     D8 70 BF FD | 	call	#_pop
11ab4     A7 FA 61 FC | 	wrlong	result1, fp
11ab8     04 4E 05 F1 | 	add	fp, #4
11abc     A7 FC 61 FC | 	wrlong	result2, fp
11ac0     04 4E 05 F1 | 	add	fp, #4
11ac4     A7 FE 61 FC | 	wrlong	result3, fp
11ac8                 | ' 
11ac8                 | ' t4=pop()
11ac8                 | ' t3=pop()
11ac8                 | ' t2=pop()
11ac8                 | ' t1=pop()
11ac8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
11ac8     FF 1A 02 F6 | 	mov	arg05, result3
11acc     08 4E 85 F1 | 	sub	fp, #8
11ad0     1C 1A 0E F2 | 	cmp	arg05, #28 wz
11ad4     08 4E 05 51 |  if_ne	add	fp, #8
11ad8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11adc     08 4E 85 51 |  if_ne	sub	fp, #8
11ae0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
11ae4     A8 00 90 5D |  if_ne	jmp	#LR__1410
11ae8     14 4E 05 F1 | 	add	fp, #20
11aec     A7 1E 02 FB | 	rdlong	local01, fp
11af0     14 4E 85 F1 | 	sub	fp, #20
11af4     1C 1E 0E F2 | 	cmp	local01, #28 wz
11af8     14 4E 05 51 |  if_ne	add	fp, #20
11afc     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
11b00     14 4E 85 51 |  if_ne	sub	fp, #20
11b04     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
11b08     84 00 90 5D |  if_ne	jmp	#LR__1410
11b0c     20 4E 05 F1 | 	add	fp, #32
11b10     A7 1E 02 FB | 	rdlong	local01, fp
11b14     20 4E 85 F1 | 	sub	fp, #32
11b18     1C 1E 0E F2 | 	cmp	local01, #28 wz
11b1c     20 4E 05 51 |  if_ne	add	fp, #32
11b20     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
11b24     20 4E 85 51 |  if_ne	sub	fp, #32
11b28     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
11b2c     60 00 90 5D |  if_ne	jmp	#LR__1410
11b30     2C 4E 05 F1 | 	add	fp, #44
11b34     A7 1E 02 FB | 	rdlong	local01, fp
11b38     2C 4E 85 F1 | 	sub	fp, #44
11b3c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11b40     2C 4E 05 51 |  if_ne	add	fp, #44
11b44     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
11b48     2C 4E 85 51 |  if_ne	sub	fp, #44
11b4c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
11b50     3C 00 90 5D |  if_ne	jmp	#LR__1410
11b54     A7 12 02 FB | 	rdlong	arg01, fp
11b58     0C 4E 05 F1 | 	add	fp, #12
11b5c     A7 14 02 FB | 	rdlong	arg02, fp
11b60     0C 4E 05 F1 | 	add	fp, #12
11b64     A7 16 02 FB | 	rdlong	arg03, fp
11b68     0C 4E 05 F1 | 	add	fp, #12
11b6c     A7 18 02 FB | 	rdlong	arg04, fp
11b70     24 4E 85 F1 | 	sub	fp, #36
11b74     55 00 00 FF 
11b78     FC E5 05 F1 | 	add	objptr, ##44028
11b7c     F2 1A 02 FB | 	rdlong	arg05, objptr
11b80     55 00 00 FF 
11b84     FC E5 85 F1 | 	sub	objptr, ##44028
11b88     08 47 B0 FD | 	call	#_hg010b_spin2_frame
11b8c                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
11b8c     6C 00 90 FD | 	jmp	#LR__1411
11b90                 | LR__1410
11b90     A7 12 02 F6 | 	mov	arg01, fp
11b94     48 E4 BF FD | 	call	#_converttoint
11b98     FD 20 02 F6 | 	mov	local02, result1
11b9c     0C 4E 05 F1 | 	add	fp, #12
11ba0     A7 12 02 F6 | 	mov	arg01, fp
11ba4     0C 4E 85 F1 | 	sub	fp, #12
11ba8     34 E4 BF FD | 	call	#_converttoint
11bac     FD 22 02 F6 | 	mov	local03, result1
11bb0     18 4E 05 F1 | 	add	fp, #24
11bb4     A7 12 02 F6 | 	mov	arg01, fp
11bb8     18 4E 85 F1 | 	sub	fp, #24
11bbc     20 E4 BF FD | 	call	#_converttoint
11bc0     FD 1E 02 F6 | 	mov	local01, result1
11bc4     24 4E 05 F1 | 	add	fp, #36
11bc8     A7 12 02 F6 | 	mov	arg01, fp
11bcc     24 4E 85 F1 | 	sub	fp, #36
11bd0     0C E4 BF FD | 	call	#_converttoint
11bd4     FD 18 02 F6 | 	mov	arg04, result1
11bd8     55 00 00 FF 
11bdc     FC E5 05 F1 | 	add	objptr, ##44028
11be0     F2 1A 02 FB | 	rdlong	arg05, objptr
11be4     55 00 00 FF 
11be8     FC E5 85 F1 | 	sub	objptr, ##44028
11bec     10 13 02 F6 | 	mov	arg01, local02
11bf0     11 15 02 F6 | 	mov	arg02, local03
11bf4     0F 17 02 F6 | 	mov	arg03, local01
11bf8     98 46 B0 FD | 	call	#_hg010b_spin2_frame
11bfc                 | LR__1411
11bfc     A7 F0 03 F6 | 	mov	ptra, fp
11c00     B2 00 A0 FD | 	call	#popregs_
11c04                 | _do_frame_ret
11c04     2D 00 64 FD | 	ret
11c08                 | 
11c08                 | ' 
11c08                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
11c08                 | ' 
11c08                 | ' ' ------------------------- Print to the screem
11c08                 | ' 
11c08                 | ' sub do_print  
11c08                 | _do_print
11c08     0A 4A 05 F6 | 	mov	COUNT_, #10
11c0c     A8 00 A0 FD | 	call	#pushregs_
11c10     00 24 06 F6 | 	mov	local04, #0
11c14     74 6F BF FD | 	call	#_pop
11c18     FD 26 02 F6 | 	mov	local05, result1
11c1c     FE 28 02 F6 | 	mov	local06, result2
11c20     FF 2A 02 F6 | 	mov	local07, result3
11c24     13 1F 02 F6 | 	mov	local01, local05
11c28     14 21 02 F6 | 	mov	local02, local06
11c2c     15 23 02 F6 | 	mov	local03, local07
11c30                 | '  
11c30                 | ' r=0
11c30                 | ' t1=pop() 
11c30                 | ' 'print t1.result_type,t1.result.uresult
11c30                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
11c30     2B 22 0E F2 | 	cmp	local03, #43 wz
11c34     14 00 90 5D |  if_ne	jmp	#LR__1420
11c38     0F 13 02 F6 | 	mov	arg01, local01
11c3c     54 A0 BF FD | 	call	#_convertstring
11c40     FD 26 02 F6 | 	mov	local05, result1
11c44     13 1F 02 F6 | 	mov	local01, local05
11c48     1F 22 06 F6 | 	mov	local03, #31
11c4c                 | LR__1420
11c4c                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
11c4c     21 22 0E F2 | 	cmp	local03, #33 wz
11c50     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
11c54     20 00 90 5D |  if_ne	jmp	#LR__1421
11c58     11 25 02 F6 | 	mov	local04, local03
11c5c     2C 6F BF FD | 	call	#_pop
11c60     FD 26 02 F6 | 	mov	local05, result1
11c64     FE 28 02 F6 | 	mov	local06, result2
11c68     FF 2A 02 F6 | 	mov	local07, result3
11c6c     13 1F 02 F6 | 	mov	local01, local05
11c70     14 21 02 F6 | 	mov	local02, local06
11c74     15 23 02 F6 | 	mov	local03, local07
11c78                 | LR__1421
11c78                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
11c78     20 22 0E F2 | 	cmp	local03, #32 wz
11c7c     11 25 02 A6 |  if_e	mov	local04, local03
11c80                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
11c80     FF 22 0E F2 | 	cmp	local03, #255 wz
11c84     0C 00 90 5D |  if_ne	jmp	#LR__1422
11c88     0F 13 02 F6 | 	mov	arg01, local01
11c8c     A4 26 B0 FD | 	call	#_printerror
11c90     30 04 90 FD | 	jmp	#LR__1439
11c94                 | LR__1422
11c94                 | ' 
11c94                 | ' if r=print_mod_comma  then
11c94     21 24 0E F2 | 	cmp	local04, #33 wz
11c98     AC 01 90 5D |  if_ne	jmp	#LR__1427
11c9c                 | '   if t1.result_type=result_int then print t1.result.iresult,
11c9c     1C 22 0E F2 | 	cmp	local03, #28 wz
11ca0     64 00 90 5D |  if_ne	jmp	#LR__1423
11ca4     00 12 06 F6 | 	mov	arg01, #0
11ca8     C4 B0 B0 FD | 	call	#__system___getiolock_0383
11cac     FD 12 02 F6 | 	mov	arg01, result1
11cb0     A4 5B B0 FD | 	call	#__system___lockmem
11cb4     00 28 06 F6 | 	mov	local06, #0
11cb8     00 12 06 F6 | 	mov	arg01, #0
11cbc     0F 15 02 F6 | 	mov	arg02, local01
11cc0     00 16 06 F6 | 	mov	arg03, #0
11cc4     0A 18 06 F6 | 	mov	arg04, #10
11cc8     C4 68 B0 FD | 	call	#__system___basic_print_integer
11ccc     FD 2A 02 F6 | 	mov	local07, result1
11cd0     14 27 02 F6 | 	mov	local05, local06
11cd4     15 27 02 F1 | 	add	local05, local07
11cd8     00 2C 06 F6 | 	mov	local08, #0
11cdc     00 12 06 F6 | 	mov	arg01, #0
11ce0     09 14 06 F6 | 	mov	arg02, #9
11ce4     00 16 06 F6 | 	mov	arg03, #0
11ce8     08 68 B0 FD | 	call	#__system___basic_print_char
11cec     FD 2E 02 F6 | 	mov	local09, result1
11cf0     FD 26 02 F1 | 	add	local05, result1
11cf4     00 12 06 F6 | 	mov	arg01, #0
11cf8     74 B0 B0 FD | 	call	#__system___getiolock_0383
11cfc     FD 00 68 FC | 	wrlong	#0, result1
11d00     00 FA 05 F6 | 	mov	result1, #0
11d04     00 30 06 F6 | 	mov	local10, #0
11d08                 | LR__1423
11d08                 | '   if t1.result_type=result_uint then print t1.result.uresult,
11d08     1D 22 0E F2 | 	cmp	local03, #29 wz
11d0c     64 00 90 5D |  if_ne	jmp	#LR__1424
11d10     00 12 06 F6 | 	mov	arg01, #0
11d14     58 B0 B0 FD | 	call	#__system___getiolock_0383
11d18     FD 12 02 F6 | 	mov	arg01, result1
11d1c     38 5B B0 FD | 	call	#__system___lockmem
11d20     00 28 06 F6 | 	mov	local06, #0
11d24     00 12 06 F6 | 	mov	arg01, #0
11d28     0F 15 02 F6 | 	mov	arg02, local01
11d2c     00 16 06 F6 | 	mov	arg03, #0
11d30     0A 18 06 F6 | 	mov	arg04, #10
11d34     98 68 B0 FD | 	call	#__system___basic_print_unsigned
11d38     FD 2A 02 F6 | 	mov	local07, result1
11d3c     14 27 02 F6 | 	mov	local05, local06
11d40     15 27 02 F1 | 	add	local05, local07
11d44     00 2C 06 F6 | 	mov	local08, #0
11d48     00 12 06 F6 | 	mov	arg01, #0
11d4c     09 14 06 F6 | 	mov	arg02, #9
11d50     00 16 06 F6 | 	mov	arg03, #0
11d54     9C 67 B0 FD | 	call	#__system___basic_print_char
11d58     FD 2E 02 F6 | 	mov	local09, result1
11d5c     FD 26 02 F1 | 	add	local05, result1
11d60     00 12 06 F6 | 	mov	arg01, #0
11d64     08 B0 B0 FD | 	call	#__system___getiolock_0383
11d68     FD 00 68 FC | 	wrlong	#0, result1
11d6c     00 FA 05 F6 | 	mov	result1, #0
11d70     00 30 06 F6 | 	mov	local10, #0
11d74                 | LR__1424
11d74                 | '   if t1.result_type=result_float then print t1.result.fresult,
11d74     1E 22 0E F2 | 	cmp	local03, #30 wz
11d78     64 00 90 5D |  if_ne	jmp	#LR__1425
11d7c     00 12 06 F6 | 	mov	arg01, #0
11d80     EC AF B0 FD | 	call	#__system___getiolock_0383
11d84     FD 12 02 F6 | 	mov	arg01, result1
11d88     CC 5A B0 FD | 	call	#__system___lockmem
11d8c     00 28 06 F6 | 	mov	local06, #0
11d90     00 12 06 F6 | 	mov	arg01, #0
11d94     0F 15 02 F6 | 	mov	arg02, local01
11d98     00 16 06 F6 | 	mov	arg03, #0
11d9c     23 18 06 F6 | 	mov	arg04, #35
11da0     DC 89 B0 FD | 	call	#__system___basic_print_float
11da4     FD 2A 02 F6 | 	mov	local07, result1
11da8     14 27 02 F6 | 	mov	local05, local06
11dac     15 27 02 F1 | 	add	local05, local07
11db0     00 2C 06 F6 | 	mov	local08, #0
11db4     00 12 06 F6 | 	mov	arg01, #0
11db8     09 14 06 F6 | 	mov	arg02, #9
11dbc     00 16 06 F6 | 	mov	arg03, #0
11dc0     30 67 B0 FD | 	call	#__system___basic_print_char
11dc4     FD 2E 02 F6 | 	mov	local09, result1
11dc8     FD 26 02 F1 | 	add	local05, result1
11dcc     00 12 06 F6 | 	mov	arg01, #0
11dd0     9C AF B0 FD | 	call	#__system___getiolock_0383
11dd4     FD 00 68 FC | 	wrlong	#0, result1
11dd8     00 FA 05 F6 | 	mov	result1, #0
11ddc     00 30 06 F6 | 	mov	local10, #0
11de0                 | LR__1425
11de0                 | '   if t1.result_type=result_string then print t1.result.sresult,
11de0     1F 22 0E F2 | 	cmp	local03, #31 wz
11de4     60 00 90 5D |  if_ne	jmp	#LR__1426
11de8     00 12 06 F6 | 	mov	arg01, #0
11dec     80 AF B0 FD | 	call	#__system___getiolock_0383
11df0     FD 12 02 F6 | 	mov	arg01, result1
11df4     60 5A B0 FD | 	call	#__system___lockmem
11df8     00 28 06 F6 | 	mov	local06, #0
11dfc     00 12 06 F6 | 	mov	arg01, #0
11e00     0F 15 02 F6 | 	mov	arg02, local01
11e04     00 16 06 F6 | 	mov	arg03, #0
11e08     40 67 B0 FD | 	call	#__system___basic_print_string
11e0c     FD 2A 02 F6 | 	mov	local07, result1
11e10     14 27 02 F6 | 	mov	local05, local06
11e14     15 27 02 F1 | 	add	local05, local07
11e18     00 2C 06 F6 | 	mov	local08, #0
11e1c     00 12 06 F6 | 	mov	arg01, #0
11e20     09 14 06 F6 | 	mov	arg02, #9
11e24     00 16 06 F6 | 	mov	arg03, #0
11e28     C8 66 B0 FD | 	call	#__system___basic_print_char
11e2c     FD 2E 02 F6 | 	mov	local09, result1
11e30     FD 26 02 F1 | 	add	local05, result1
11e34     00 12 06 F6 | 	mov	arg01, #0
11e38     34 AF B0 FD | 	call	#__system___getiolock_0383
11e3c     FD 00 68 FC | 	wrlong	#0, result1
11e40     00 FA 05 F6 | 	mov	result1, #0
11e44     00 30 06 F6 | 	mov	local10, #0
11e48                 | LR__1426
11e48                 | LR__1427
11e48                 | ' if r=print_mod_semicolon then 
11e48     22 24 0E F2 | 	cmp	local04, #34 wz
11e4c     1C 01 90 5D |  if_ne	jmp	#LR__1432
11e50                 | '   if t1.result_type=result_int then print t1.result.iresult;
11e50     1C 22 0E F2 | 	cmp	local03, #28 wz
11e54     50 00 90 5D |  if_ne	jmp	#LR__1428
11e58     00 12 06 F6 | 	mov	arg01, #0
11e5c     10 AF B0 FD | 	call	#__system___getiolock_0383
11e60     FD 12 02 F6 | 	mov	arg01, result1
11e64     F0 59 B0 FD | 	call	#__system___lockmem
11e68     00 28 06 F6 | 	mov	local06, #0
11e6c     00 30 06 F6 | 	mov	local10, #0
11e70     0A 2C 06 F6 | 	mov	local08, #10
11e74     00 12 06 F6 | 	mov	arg01, #0
11e78     0F 15 02 F6 | 	mov	arg02, local01
11e7c     00 16 06 F6 | 	mov	arg03, #0
11e80     0A 18 06 F6 | 	mov	arg04, #10
11e84     08 67 B0 FD | 	call	#__system___basic_print_integer
11e88     FD 2A 02 F6 | 	mov	local07, result1
11e8c     14 27 02 F6 | 	mov	local05, local06
11e90     15 27 02 F1 | 	add	local05, local07
11e94     00 12 06 F6 | 	mov	arg01, #0
11e98     D4 AE B0 FD | 	call	#__system___getiolock_0383
11e9c     FD 00 68 FC | 	wrlong	#0, result1
11ea0     00 FA 05 F6 | 	mov	result1, #0
11ea4     00 2E 06 F6 | 	mov	local09, #0
11ea8                 | LR__1428
11ea8                 | '   if t1.result_type=result_uint then print t1.result.uresult;
11ea8     1D 22 0E F2 | 	cmp	local03, #29 wz
11eac     50 00 90 5D |  if_ne	jmp	#LR__1429
11eb0     00 12 06 F6 | 	mov	arg01, #0
11eb4     B8 AE B0 FD | 	call	#__system___getiolock_0383
11eb8     FD 12 02 F6 | 	mov	arg01, result1
11ebc     98 59 B0 FD | 	call	#__system___lockmem
11ec0     00 28 06 F6 | 	mov	local06, #0
11ec4     00 30 06 F6 | 	mov	local10, #0
11ec8     0A 2C 06 F6 | 	mov	local08, #10
11ecc     00 12 06 F6 | 	mov	arg01, #0
11ed0     0F 15 02 F6 | 	mov	arg02, local01
11ed4     00 16 06 F6 | 	mov	arg03, #0
11ed8     0A 18 06 F6 | 	mov	arg04, #10
11edc     F0 66 B0 FD | 	call	#__system___basic_print_unsigned
11ee0     FD 2A 02 F6 | 	mov	local07, result1
11ee4     14 27 02 F6 | 	mov	local05, local06
11ee8     15 27 02 F1 | 	add	local05, local07
11eec     00 12 06 F6 | 	mov	arg01, #0
11ef0     7C AE B0 FD | 	call	#__system___getiolock_0383
11ef4     FD 00 68 FC | 	wrlong	#0, result1
11ef8     00 FA 05 F6 | 	mov	result1, #0
11efc     00 2E 06 F6 | 	mov	local09, #0
11f00                 | LR__1429
11f00                 | '   if t1.result_type=result_float then print t1.result.fresult;
11f00     1E 22 0E F2 | 	cmp	local03, #30 wz
11f04     30 00 90 5D |  if_ne	jmp	#LR__1430
11f08     00 12 06 F6 | 	mov	arg01, #0
11f0c     60 AE B0 FD | 	call	#__system___getiolock_0383
11f10     FD 12 02 F6 | 	mov	arg01, result1
11f14     40 59 B0 FD | 	call	#__system___lockmem
11f18     00 12 06 F6 | 	mov	arg01, #0
11f1c     0F 15 02 F6 | 	mov	arg02, local01
11f20     00 16 06 F6 | 	mov	arg03, #0
11f24     23 18 06 F6 | 	mov	arg04, #35
11f28     54 88 B0 FD | 	call	#__system___basic_print_float
11f2c     00 12 06 F6 | 	mov	arg01, #0
11f30     3C AE B0 FD | 	call	#__system___getiolock_0383
11f34     FD 00 68 FC | 	wrlong	#0, result1
11f38                 | LR__1430
11f38                 | '   if t1.result_type=result_string then print t1.result.sresult;
11f38     1F 22 0E F2 | 	cmp	local03, #31 wz
11f3c     2C 00 90 5D |  if_ne	jmp	#LR__1431
11f40     00 12 06 F6 | 	mov	arg01, #0
11f44     28 AE B0 FD | 	call	#__system___getiolock_0383
11f48     FD 12 02 F6 | 	mov	arg01, result1
11f4c     08 59 B0 FD | 	call	#__system___lockmem
11f50     00 12 06 F6 | 	mov	arg01, #0
11f54     0F 15 02 F6 | 	mov	arg02, local01
11f58     00 16 06 F6 | 	mov	arg03, #0
11f5c     EC 65 B0 FD | 	call	#__system___basic_print_string
11f60     00 12 06 F6 | 	mov	arg01, #0
11f64     08 AE B0 FD | 	call	#__system___getiolock_0383
11f68     FD 00 68 FC | 	wrlong	#0, result1
11f6c                 | LR__1431
11f6c                 | LR__1432
11f6c                 | ' if r=0 then 
11f6c     00 24 0E F2 | 	cmp	local04, #0 wz
11f70     1C 01 90 5D |  if_ne	jmp	#LR__1437
11f74                 | '   if t1.result_type=result_int then print t1.result.iresult
11f74     1C 22 0E F2 | 	cmp	local03, #28 wz
11f78     40 00 90 5D |  if_ne	jmp	#LR__1433
11f7c     00 12 06 F6 | 	mov	arg01, #0
11f80     EC AD B0 FD | 	call	#__system___getiolock_0383
11f84     FD 12 02 F6 | 	mov	arg01, result1
11f88     CC 58 B0 FD | 	call	#__system___lockmem
11f8c     00 12 06 F6 | 	mov	arg01, #0
11f90     0F 15 02 F6 | 	mov	arg02, local01
11f94     00 16 06 F6 | 	mov	arg03, #0
11f98     0A 18 06 F6 | 	mov	arg04, #10
11f9c     F0 65 B0 FD | 	call	#__system___basic_print_integer
11fa0     00 12 06 F6 | 	mov	arg01, #0
11fa4     0A 14 06 F6 | 	mov	arg02, #10
11fa8     00 16 06 F6 | 	mov	arg03, #0
11fac     44 65 B0 FD | 	call	#__system___basic_print_char
11fb0     00 12 06 F6 | 	mov	arg01, #0
11fb4     B8 AD B0 FD | 	call	#__system___getiolock_0383
11fb8     FD 00 68 FC | 	wrlong	#0, result1
11fbc                 | LR__1433
11fbc                 | '   if t1.result_type=result_uint then print t1.result.uresult
11fbc     1D 22 0E F2 | 	cmp	local03, #29 wz
11fc0     40 00 90 5D |  if_ne	jmp	#LR__1434
11fc4     00 12 06 F6 | 	mov	arg01, #0
11fc8     A4 AD B0 FD | 	call	#__system___getiolock_0383
11fcc     FD 12 02 F6 | 	mov	arg01, result1
11fd0     84 58 B0 FD | 	call	#__system___lockmem
11fd4     00 12 06 F6 | 	mov	arg01, #0
11fd8     0F 15 02 F6 | 	mov	arg02, local01
11fdc     00 16 06 F6 | 	mov	arg03, #0
11fe0     0A 18 06 F6 | 	mov	arg04, #10
11fe4     E8 65 B0 FD | 	call	#__system___basic_print_unsigned
11fe8     00 12 06 F6 | 	mov	arg01, #0
11fec     0A 14 06 F6 | 	mov	arg02, #10
11ff0     00 16 06 F6 | 	mov	arg03, #0
11ff4     FC 64 B0 FD | 	call	#__system___basic_print_char
11ff8     00 12 06 F6 | 	mov	arg01, #0
11ffc     70 AD B0 FD | 	call	#__system___getiolock_0383
12000     FD 00 68 FC | 	wrlong	#0, result1
12004                 | LR__1434
12004                 | '   if t1.result_type=result_float then print t1.result.fresult
12004     1E 22 0E F2 | 	cmp	local03, #30 wz
12008     40 00 90 5D |  if_ne	jmp	#LR__1435
1200c     00 12 06 F6 | 	mov	arg01, #0
12010     5C AD B0 FD | 	call	#__system___getiolock_0383
12014     FD 12 02 F6 | 	mov	arg01, result1
12018     3C 58 B0 FD | 	call	#__system___lockmem
1201c     00 12 06 F6 | 	mov	arg01, #0
12020     0F 15 02 F6 | 	mov	arg02, local01
12024     00 16 06 F6 | 	mov	arg03, #0
12028     23 18 06 F6 | 	mov	arg04, #35
1202c     50 87 B0 FD | 	call	#__system___basic_print_float
12030     00 12 06 F6 | 	mov	arg01, #0
12034     0A 14 06 F6 | 	mov	arg02, #10
12038     00 16 06 F6 | 	mov	arg03, #0
1203c     B4 64 B0 FD | 	call	#__system___basic_print_char
12040     00 12 06 F6 | 	mov	arg01, #0
12044     28 AD B0 FD | 	call	#__system___getiolock_0383
12048     FD 00 68 FC | 	wrlong	#0, result1
1204c                 | LR__1435
1204c                 | '   if t1.result_type=result_string then print t1.result.sresult
1204c     1F 22 0E F2 | 	cmp	local03, #31 wz
12050     3C 00 90 5D |  if_ne	jmp	#LR__1436
12054     00 12 06 F6 | 	mov	arg01, #0
12058     14 AD B0 FD | 	call	#__system___getiolock_0383
1205c     FD 12 02 F6 | 	mov	arg01, result1
12060     F4 57 B0 FD | 	call	#__system___lockmem
12064     00 12 06 F6 | 	mov	arg01, #0
12068     0F 15 02 F6 | 	mov	arg02, local01
1206c     00 16 06 F6 | 	mov	arg03, #0
12070     D8 64 B0 FD | 	call	#__system___basic_print_string
12074     00 12 06 F6 | 	mov	arg01, #0
12078     0A 14 06 F6 | 	mov	arg02, #10
1207c     00 16 06 F6 | 	mov	arg03, #0
12080     70 64 B0 FD | 	call	#__system___basic_print_char
12084     00 12 06 F6 | 	mov	arg01, #0
12088     E4 AC B0 FD | 	call	#__system___getiolock_0383
1208c     FD 00 68 FC | 	wrlong	#0, result1
12090                 | LR__1436
12090                 | LR__1437
12090                 | ' if r=print_mod_empty then print
12090     20 24 0E F2 | 	cmp	local04, #32 wz
12094     2C 00 90 5D |  if_ne	jmp	#LR__1438
12098     00 12 06 F6 | 	mov	arg01, #0
1209c     D0 AC B0 FD | 	call	#__system___getiolock_0383
120a0     FD 12 02 F6 | 	mov	arg01, result1
120a4     B0 57 B0 FD | 	call	#__system___lockmem
120a8     00 12 06 F6 | 	mov	arg01, #0
120ac     0A 14 06 F6 | 	mov	arg02, #10
120b0     00 16 06 F6 | 	mov	arg03, #0
120b4     3C 64 B0 FD | 	call	#__system___basic_print_char
120b8     00 12 06 F6 | 	mov	arg01, #0
120bc     B0 AC B0 FD | 	call	#__system___getiolock_0383
120c0     FD 00 68 FC | 	wrlong	#0, result1
120c4                 | LR__1438
120c4                 | LR__1439
120c4     A7 F0 03 F6 | 	mov	ptra, fp
120c8     B2 00 A0 FD | 	call	#popregs_
120cc                 | _do_print_ret
120cc     2D 00 64 FD | 	ret
120d0                 | 
120d0                 | ' 
120d0                 | ' 
120d0                 | ' sub do_paper
120d0                 | _do_paper
120d0     03 4A 05 F6 | 	mov	COUNT_, #3
120d4     A8 00 A0 FD | 	call	#pushregs_
120d8     B0 6A BF FD | 	call	#_pop
120dc     FD 1E 02 F6 | 	mov	local01, result1
120e0     FE 20 02 F6 | 	mov	local02, result2
120e4     FF 22 02 F6 | 	mov	local03, result3
120e8                 | ' t1=pop() 
120e8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
120e8     1E 22 0E F2 | 	cmp	local03, #30 wz
120ec     10 00 90 5D |  if_ne	jmp	#LR__1440
120f0     0F 13 02 F6 | 	mov	arg01, local01
120f4     00 14 06 F6 | 	mov	arg02, #0
120f8     34 85 B0 FD | 	call	#__system___float_tointeger
120fc     FD 1E 02 F6 | 	mov	local01, result1
12100                 | LR__1440
12100                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
12100     1F 22 0E F2 | 	cmp	local03, #31 wz
12104     18 00 90 5D |  if_ne	jmp	#LR__1441
12108     0F 13 02 F6 | 	mov	arg01, local01
1210c     40 88 B0 FD | 	call	#__system____builtin_atof
12110     FD 12 02 F6 | 	mov	arg01, result1
12114     00 14 06 F6 | 	mov	arg02, #0
12118     14 85 B0 FD | 	call	#__system___float_tointeger
1211c     FD 1E 02 F6 | 	mov	local01, result1
12120                 | LR__1441
12120     56 00 00 FF 
12124     0C E4 05 F1 | 	add	objptr, ##44044
12128     F2 1E 62 FC | 	wrlong	local01, objptr
1212c     04 E4 05 F1 | 	add	objptr, #4
12130     F2 12 02 FB | 	rdlong	arg01, objptr
12134                 | ' 
12134                 | ' write_color:=ff
12134     55 00 00 FF 
12138     D3 E5 85 F1 | 	sub	objptr, ##43987
1213c     F2 12 62 FC | 	wrlong	arg01, objptr
12140                 | ' write_background:=bb
12140     04 E4 05 F1 | 	add	objptr, #4
12144     F2 1E 62 FC | 	wrlong	local01, objptr
12148     41 E4 85 F1 | 	sub	objptr, #65
1214c     A7 F0 03 F6 | 	mov	ptra, fp
12150     B2 00 A0 FD | 	call	#popregs_
12154                 | _do_paper_ret
12154     2D 00 64 FD | 	ret
12158                 | 
12158                 | ' 
12158                 | ' sub do_ink
12158                 | _do_ink
12158     03 4A 05 F6 | 	mov	COUNT_, #3
1215c     A8 00 A0 FD | 	call	#pushregs_
12160     28 6A BF FD | 	call	#_pop
12164     FD 1E 02 F6 | 	mov	local01, result1
12168     FE 20 02 F6 | 	mov	local02, result2
1216c     FF 22 02 F6 | 	mov	local03, result3
12170                 | ' t1=pop() 
12170                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12170     1E 22 0E F2 | 	cmp	local03, #30 wz
12174     10 00 90 5D |  if_ne	jmp	#LR__1450
12178     0F 13 02 F6 | 	mov	arg01, local01
1217c     00 14 06 F6 | 	mov	arg02, #0
12180     AC 84 B0 FD | 	call	#__system___float_tointeger
12184     FD 1E 02 F6 | 	mov	local01, result1
12188                 | LR__1450
12188                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
12188     1F 22 0E F2 | 	cmp	local03, #31 wz
1218c     18 00 90 5D |  if_ne	jmp	#LR__1451
12190     0F 13 02 F6 | 	mov	arg01, local01
12194     B8 87 B0 FD | 	call	#__system____builtin_atof
12198     FD 12 02 F6 | 	mov	arg01, result1
1219c     00 14 06 F6 | 	mov	arg02, #0
121a0     8C 84 B0 FD | 	call	#__system___float_tointeger
121a4     FD 1E 02 F6 | 	mov	local01, result1
121a8                 | LR__1451
121a8     56 00 00 FF 
121ac     10 E4 05 F1 | 	add	objptr, ##44048
121b0     F2 1E 62 FC | 	wrlong	local01, objptr
121b4     04 E4 85 F1 | 	sub	objptr, #4
121b8     F2 14 02 FB | 	rdlong	arg02, objptr
121bc                 | ' 
121bc                 | ' write_color:=ff
121bc     55 00 00 FF 
121c0     CF E5 85 F1 | 	sub	objptr, ##43983
121c4     F2 1E 62 FC | 	wrlong	local01, objptr
121c8                 | ' write_background:=bb
121c8     04 E4 05 F1 | 	add	objptr, #4
121cc     F2 14 62 FC | 	wrlong	arg02, objptr
121d0     55 00 00 FF 
121d4     CF E5 05 F1 | 	add	objptr, ##43983
121d8     F2 12 02 FB | 	rdlong	arg01, objptr
121dc     56 00 00 FF 
121e0     10 E4 85 F1 | 	sub	objptr, ##44048
121e4     44 33 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
121e8     A7 F0 03 F6 | 	mov	ptra, fp
121ec     B2 00 A0 FD | 	call	#popregs_
121f0                 | _do_ink_ret
121f0     2D 00 64 FD | 	ret
121f4                 | 
121f4                 | ' 
121f4                 | ' 
121f4                 | ' sub do_font
121f4                 | _do_font
121f4     03 4A 05 F6 | 	mov	COUNT_, #3
121f8     A8 00 A0 FD | 	call	#pushregs_
121fc     8C 69 BF FD | 	call	#_pop
12200     FD 1E 02 F6 | 	mov	local01, result1
12204     FE 20 02 F6 | 	mov	local02, result2
12208     FF 22 02 F6 | 	mov	local03, result3
1220c                 | ' t1=pop() 
1220c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1220c     1E 22 0E F2 | 	cmp	local03, #30 wz
12210     10 00 90 5D |  if_ne	jmp	#LR__1460
12214     0F 13 02 F6 | 	mov	arg01, local01
12218     00 14 06 F6 | 	mov	arg02, #0
1221c     10 84 B0 FD | 	call	#__system___float_tointeger
12220     FD 1E 02 F6 | 	mov	local01, result1
12224                 | LR__1460
12224                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
12224     1F 22 0E F2 | 	cmp	local03, #31 wz
12228     18 00 90 5D |  if_ne	jmp	#LR__1461
1222c     0F 13 02 F6 | 	mov	arg01, local01
12230     1C 87 B0 FD | 	call	#__system____builtin_atof
12234     FD 12 02 F6 | 	mov	arg01, result1
12238     00 14 06 F6 | 	mov	arg02, #0
1223c     F0 83 B0 FD | 	call	#__system___float_tointeger
12240     FD 1E 02 F6 | 	mov	local01, result1
12244                 | LR__1461
12244     56 00 00 FF 
12248     14 E4 05 F1 | 	add	objptr, ##44052
1224c     F2 1E 62 FC | 	wrlong	local01, objptr
12250     56 00 00 FF 
12254     14 E4 85 F1 | 	sub	objptr, ##44052
12258     02 1E 66 F0 | 	shl	local01, #2
1225c     0F 13 02 F6 | 	mov	arg01, local01
12260     28 42 B0 FD | 	call	#_hg010b_spin2_setfontfamily
12264     A7 F0 03 F6 | 	mov	ptra, fp
12268     B2 00 A0 FD | 	call	#popregs_
1226c                 | _do_font_ret
1226c     2D 00 64 FD | 	ret
12270                 | 
12270                 | ' 
12270                 | ' sub do_mode
12270                 | _do_mode
12270     04 4A 05 F6 | 	mov	COUNT_, #4
12274     A8 00 A0 FD | 	call	#pushregs_
12278     10 69 BF FD | 	call	#_pop
1227c     FD 1E 02 F6 | 	mov	local01, result1
12280     FE 20 02 F6 | 	mov	local02, result2
12284     FF 22 02 F6 | 	mov	local03, result3
12288                 | ' t1=pop() 
12288                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12288     1E 22 0E F2 | 	cmp	local03, #30 wz
1228c     10 00 90 5D |  if_ne	jmp	#LR__1470
12290     0F 13 02 F6 | 	mov	arg01, local01
12294     00 14 06 F6 | 	mov	arg02, #0
12298     94 83 B0 FD | 	call	#__system___float_tointeger
1229c     FD 1E 02 F6 | 	mov	local01, result1
122a0                 | LR__1470
122a0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
122a0     1F 22 0E F2 | 	cmp	local03, #31 wz
122a4     18 00 90 5D |  if_ne	jmp	#LR__1471
122a8     0F 13 02 F6 | 	mov	arg01, local01
122ac     A0 86 B0 FD | 	call	#__system____builtin_atof
122b0     FD 12 02 F6 | 	mov	arg01, result1
122b4     00 14 06 F6 | 	mov	arg02, #0
122b8     74 83 B0 FD | 	call	#__system___float_tointeger
122bc     FD 1E 02 F6 | 	mov	local01, result1
122c0                 | LR__1471
122c0                 | ' select case t1.result.iresult
122c0     0F 25 02 F6 | 	mov	local04, local01
122c4     05 24 26 F3 | 	fle	local04, #5
122c8     30 24 62 FD | 	jmprel	local04
122cc                 | LR__1472
122cc     14 00 90 FD | 	jmp	#LR__1473
122d0     A8 00 90 FD | 	jmp	#LR__1474
122d4     10 01 90 FD | 	jmp	#LR__1475
122d8     78 01 90 FD | 	jmp	#LR__1476
122dc     E0 01 90 FD | 	jmp	#LR__1477
122e0     70 02 90 FD | 	jmp	#LR__1478
122e4                 | LR__1473
122e4     56 00 00 FF 
122e8     14 E4 05 F1 | 	add	objptr, ##44052
122ec     F2 02 68 FC | 	wrlong	#1, objptr
122f0     04 E4 85 F1 | 	sub	objptr, #4
122f4     F2 34 69 FC | 	wrlong	#154, objptr
122f8     22 00 00 FF 
122fc     A4 E5 05 F1 | 	add	objptr, ##17828
12300     F2 02 68 FC | 	wrlong	#1, objptr
12304     22 00 00 FF 
12308     A8 E5 85 F1 | 	sub	objptr, ##17832
1230c     F2 26 69 FC | 	wrlong	#147, objptr
12310     56 00 00 FF 
12314     0C E4 85 F1 | 	sub	objptr, ##44044
12318     04 12 06 F6 | 	mov	arg01, #4
1231c     6C 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
12320     56 00 00 FF 
12324     10 E4 05 F1 | 	add	objptr, ##44048
12328     F2 12 02 FB | 	rdlong	arg01, objptr
1232c     04 E4 85 F1 | 	sub	objptr, #4
12330     F2 14 02 FB | 	rdlong	arg02, objptr
12334                 | ' 
12334                 | ' write_color:=ff
12334     55 00 00 FF 
12338     CF E5 85 F1 | 	sub	objptr, ##43983
1233c     F2 12 62 FC | 	wrlong	arg01, objptr
12340                 | ' write_background:=bb
12340     04 E4 05 F1 | 	add	objptr, #4
12344     F2 14 62 FC | 	wrlong	arg02, objptr
12348     01 00 00 FF 
1234c     00 EA 05 F1 | 	add	ptr__dat__, ##512
12350     7A 00 00 FF 
12354     17 E4 05 F1 | 	add	objptr, ##62487
12358     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1235c     04 E4 85 F1 | 	sub	objptr, #4
12360     03 00 80 FF 
12364     F2 28 69 FC | 	wrlong	##1684, objptr
12368     7A 00 00 FF 
1236c     54 E4 85 F1 | 	sub	objptr, ##62548
12370     01 00 00 FF 
12374     00 EA 85 F1 | 	sub	ptr__dat__, ##512
12378     D8 01 90 FD | 	jmp	#LR__1478
1237c                 | LR__1474
1237c     56 00 00 FF 
12380     14 E4 05 F1 | 	add	objptr, ##44052
12384     F2 00 68 FC | 	wrlong	#0, objptr
12388     04 E4 85 F1 | 	sub	objptr, #4
1238c     F2 2E 68 FC | 	wrlong	#23, objptr
12390     22 00 00 FF 
12394     A4 E5 05 F1 | 	add	objptr, ##17828
12398     F2 00 68 FC | 	wrlong	#0, objptr
1239c     22 00 00 FF 
123a0     A8 E5 85 F1 | 	sub	objptr, ##17832
123a4     F2 00 68 FC | 	wrlong	#0, objptr
123a8     56 00 00 FF 
123ac     0C E4 85 F1 | 	sub	objptr, ##44044
123b0     00 12 06 F6 | 	mov	arg01, #0
123b4     D4 40 B0 FD | 	call	#_hg010b_spin2_setfontfamily
123b8     56 00 00 FF 
123bc     10 E4 05 F1 | 	add	objptr, ##44048
123c0     F2 12 02 FB | 	rdlong	arg01, objptr
123c4     04 E4 85 F1 | 	sub	objptr, #4
123c8     F2 14 02 FB | 	rdlong	arg02, objptr
123cc                 | ' 
123cc                 | ' write_color:=ff
123cc     55 00 00 FF 
123d0     CF E5 85 F1 | 	sub	objptr, ##43983
123d4     F2 12 62 FC | 	wrlong	arg01, objptr
123d8                 | ' write_background:=bb
123d8     04 E4 05 F1 | 	add	objptr, #4
123dc     F2 14 62 FC | 	wrlong	arg02, objptr
123e0     41 E4 85 F1 | 	sub	objptr, #65
123e4     6C 01 90 FD | 	jmp	#LR__1478
123e8                 | LR__1475
123e8     56 00 00 FF 
123ec     14 E4 05 F1 | 	add	objptr, ##44052
123f0     F2 00 68 FC | 	wrlong	#0, objptr
123f4     04 E4 85 F1 | 	sub	objptr, #4
123f8     F2 6A 69 FC | 	wrlong	#181, objptr
123fc     22 00 00 FF 
12400     A4 E5 05 F1 | 	add	objptr, ##17828
12404     F2 00 68 FC | 	wrlong	#0, objptr
12408     22 00 00 FF 
1240c     A8 E5 85 F1 | 	sub	objptr, ##17832
12410     F2 00 68 FC | 	wrlong	#0, objptr
12414     56 00 00 FF 
12418     0C E4 85 F1 | 	sub	objptr, ##44044
1241c     00 12 06 F6 | 	mov	arg01, #0
12420     68 40 B0 FD | 	call	#_hg010b_spin2_setfontfamily
12424     56 00 00 FF 
12428     10 E4 05 F1 | 	add	objptr, ##44048
1242c     F2 12 02 FB | 	rdlong	arg01, objptr
12430     04 E4 85 F1 | 	sub	objptr, #4
12434     F2 14 02 FB | 	rdlong	arg02, objptr
12438                 | ' 
12438                 | ' write_color:=ff
12438     55 00 00 FF 
1243c     CF E5 85 F1 | 	sub	objptr, ##43983
12440     F2 12 62 FC | 	wrlong	arg01, objptr
12444                 | ' write_background:=bb
12444     04 E4 05 F1 | 	add	objptr, #4
12448     F2 14 62 FC | 	wrlong	arg02, objptr
1244c     41 E4 85 F1 | 	sub	objptr, #65
12450     00 01 90 FD | 	jmp	#LR__1478
12454                 | LR__1476
12454     56 00 00 FF 
12458     14 E4 05 F1 | 	add	objptr, ##44052
1245c     F2 00 68 FC | 	wrlong	#0, objptr
12460     04 E4 85 F1 | 	sub	objptr, #4
12464     F2 1E 68 FC | 	wrlong	#15, objptr
12468     22 00 00 FF 
1246c     A4 E5 05 F1 | 	add	objptr, ##17828
12470     F2 00 68 FC | 	wrlong	#0, objptr
12474     22 00 00 FF 
12478     A8 E5 85 F1 | 	sub	objptr, ##17832
1247c     F2 00 68 FC | 	wrlong	#0, objptr
12480     56 00 00 FF 
12484     0C E4 85 F1 | 	sub	objptr, ##44044
12488     00 12 06 F6 | 	mov	arg01, #0
1248c     FC 3F B0 FD | 	call	#_hg010b_spin2_setfontfamily
12490     56 00 00 FF 
12494     10 E4 05 F1 | 	add	objptr, ##44048
12498     F2 12 02 FB | 	rdlong	arg01, objptr
1249c     04 E4 85 F1 | 	sub	objptr, #4
124a0     F2 14 02 FB | 	rdlong	arg02, objptr
124a4                 | ' 
124a4                 | ' write_color:=ff
124a4     55 00 00 FF 
124a8     CF E5 85 F1 | 	sub	objptr, ##43983
124ac     F2 12 62 FC | 	wrlong	arg01, objptr
124b0                 | ' write_background:=bb
124b0     04 E4 05 F1 | 	add	objptr, #4
124b4     F2 14 62 FC | 	wrlong	arg02, objptr
124b8     41 E4 85 F1 | 	sub	objptr, #65
124bc     94 00 90 FD | 	jmp	#LR__1478
124c0                 | LR__1477
124c0     56 00 00 FF 
124c4     14 E4 05 F1 | 	add	objptr, ##44052
124c8     F2 02 68 FC | 	wrlong	#1, objptr
124cc     04 E4 85 F1 | 	sub	objptr, #4
124d0     F2 02 68 FC | 	wrlong	#1, objptr
124d4     22 00 00 FF 
124d8     A4 E5 05 F1 | 	add	objptr, ##17828
124dc     F2 02 68 FC | 	wrlong	#1, objptr
124e0     22 00 00 FF 
124e4     A8 E5 85 F1 | 	sub	objptr, ##17832
124e8     F2 1C 68 FC | 	wrlong	#14, objptr
124ec     56 00 00 FF 
124f0     0C E4 85 F1 | 	sub	objptr, ##44044
124f4     04 12 06 F6 | 	mov	arg01, #4
124f8     90 3F B0 FD | 	call	#_hg010b_spin2_setfontfamily
124fc     56 00 00 FF 
12500     10 E4 05 F1 | 	add	objptr, ##44048
12504     F2 12 02 FB | 	rdlong	arg01, objptr
12508     04 E4 85 F1 | 	sub	objptr, #4
1250c     F2 14 02 FB | 	rdlong	arg02, objptr
12510                 | ' 
12510                 | ' write_color:=ff
12510     55 00 00 FF 
12514     CF E5 85 F1 | 	sub	objptr, ##43983
12518     F2 12 62 FC | 	wrlong	arg01, objptr
1251c                 | ' write_background:=bb
1251c     04 E4 05 F1 | 	add	objptr, #4
12520     F2 14 62 FC | 	wrlong	arg02, objptr
12524     07 00 00 FF 
12528     72 EB 05 F1 | 	add	ptr__dat__, ##3954
1252c     7A 00 00 FF 
12530     17 E4 05 F1 | 	add	objptr, ##62487
12534     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
12538     04 E4 85 F1 | 	sub	objptr, #4
1253c     03 00 80 FF 
12540     F2 28 69 FC | 	wrlong	##1684, objptr
12544     7A 00 00 FF 
12548     54 E4 85 F1 | 	sub	objptr, ##62548
1254c     07 00 00 FF 
12550     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
12554                 | LR__1478
12554     7A 00 00 FF 
12558     50 E4 05 F1 | 	add	objptr, ##62544
1255c     F2 1E 62 FC | 	wrlong	local01, objptr
12560     24 00 00 FF 
12564     40 E4 85 F1 | 	sub	objptr, ##18496
12568     F2 12 02 FB | 	rdlong	arg01, objptr
1256c     04 E4 85 F1 | 	sub	objptr, #4
12570     F2 14 02 FB | 	rdlong	arg02, objptr
12574     56 00 00 FF 
12578     0C E4 85 F1 | 	sub	objptr, ##44044
1257c     F4 3F B0 FD | 	call	#_hg010b_spin2_cls
12580     36 01 00 FF 
12584     6E 13 06 F6 | 	mov	arg01, ##@LR__4427
12588                 | ' 
12588                 | ' write(text)
12588     A4 42 B0 FD | 	call	#_hg010b_spin2_write
1258c                 | ' crlf
1258c     00 44 B0 FD | 	call	#_hg010b_spin2_crlf
12590     10 00 00 FF 
12594     10 EB 05 F1 | 	add	ptr__dat__, ##8464
12598     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
1259c     10 00 00 FF 
125a0     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
125a4                 | ' 
125a4                 | ' write(text)
125a4     88 42 B0 FD | 	call	#_hg010b_spin2_write
125a8                 | ' crlf
125a8     E4 43 B0 FD | 	call	#_hg010b_spin2_crlf
125ac     78 00 00 FF 
125b0     B0 E5 05 F1 | 	add	objptr, ##61872
125b4     F2 12 02 FB | 	rdlong	arg01, objptr
125b8     78 00 00 FF 
125bc     B0 E5 85 F1 | 	sub	objptr, ##61872
125c0                 | ' 
125c0                 | ' write(text)
125c0     6C 42 B0 FD | 	call	#_hg010b_spin2_write
125c4                 | ' crlf
125c4     C8 43 B0 FD | 	call	#_hg010b_spin2_crlf
125c8     A7 F0 03 F6 | 	mov	ptra, fp
125cc     B2 00 A0 FD | 	call	#popregs_
125d0                 | _do_mode_ret
125d0     2D 00 64 FD | 	ret
125d4                 | 
125d4                 | ' 
125d4                 | ' 
125d4                 | ' 
125d4                 | ' sub do_pinwrite
125d4                 | _do_pinwrite
125d4     01 4A 05 F6 | 	mov	COUNT_, #1
125d8     A8 00 A0 FD | 	call	#pushregs_
125dc     18 F0 07 F1 | 	add	ptra, #24
125e0     A8 65 BF FD | 	call	#_pop
125e4     FD 14 02 F6 | 	mov	arg02, result1
125e8     FE 12 02 F6 | 	mov	arg01, result2
125ec     FF 1E 02 F6 | 	mov	local01, result3
125f0     A7 14 62 FC | 	wrlong	arg02, fp
125f4     04 4E 05 F1 | 	add	fp, #4
125f8     A7 12 62 FC | 	wrlong	arg01, fp
125fc     04 4E 05 F1 | 	add	fp, #4
12600     A7 1E 62 FC | 	wrlong	local01, fp
12604     08 4E 85 F1 | 	sub	fp, #8
12608     80 65 BF FD | 	call	#_pop
1260c     FF 1E 02 F6 | 	mov	local01, result3
12610     0C 4E 05 F1 | 	add	fp, #12
12614     A7 FA 61 FC | 	wrlong	result1, fp
12618     04 4E 05 F1 | 	add	fp, #4
1261c     A7 FC 61 FC | 	wrlong	result2, fp
12620     04 4E 05 F1 | 	add	fp, #4
12624     A7 1E 62 FC | 	wrlong	local01, fp
12628     08 4E 85 F1 | 	sub	fp, #8
1262c     A7 12 02 F6 | 	mov	arg01, fp
12630     0C 4E 85 F1 | 	sub	fp, #12
12634     A8 D9 BF FD | 	call	#_converttoint
12638     FD 1E 02 F6 | 	mov	local01, result1
1263c     A7 12 02 F6 | 	mov	arg01, fp
12640     9C D9 BF FD | 	call	#_converttoint
12644     FD 14 02 F6 | 	mov	arg02, result1
12648     0F 13 02 F6 | 	mov	arg01, local01
1264c     BC 53 B0 FD | 	call	#__system___pinwrite
12650     A7 F0 03 F6 | 	mov	ptra, fp
12654     B2 00 A0 FD | 	call	#popregs_
12658                 | _do_pinwrite_ret
12658     2D 00 64 FD | 	ret
1265c                 | 
1265c                 | ' 
1265c                 | ' sub do_pinfloat
1265c                 | _do_pinfloat
1265c     00 4A 05 F6 | 	mov	COUNT_, #0
12660     A8 00 A0 FD | 	call	#pushregs_
12664     0C F0 07 F1 | 	add	ptra, #12
12668     20 65 BF FD | 	call	#_pop
1266c     A7 FA 61 FC | 	wrlong	result1, fp
12670     04 4E 05 F1 | 	add	fp, #4
12674     A7 FC 61 FC | 	wrlong	result2, fp
12678     04 4E 05 F1 | 	add	fp, #4
1267c     A7 FE 61 FC | 	wrlong	result3, fp
12680     08 4E 85 F1 | 	sub	fp, #8
12684     A7 12 02 F6 | 	mov	arg01, fp
12688     54 D9 BF FD | 	call	#_converttoint
1268c     50 FA 61 FD | 	fltl	result1
12690     A7 F0 03 F6 | 	mov	ptra, fp
12694     B2 00 A0 FD | 	call	#popregs_
12698                 | _do_pinfloat_ret
12698     2D 00 64 FD | 	ret
1269c                 | 
1269c                 | ' 
1269c                 | ' sub do_pinlo
1269c                 | _do_pinlo
1269c     00 4A 05 F6 | 	mov	COUNT_, #0
126a0     A8 00 A0 FD | 	call	#pushregs_
126a4     0C F0 07 F1 | 	add	ptra, #12
126a8     E0 64 BF FD | 	call	#_pop
126ac     A7 FA 61 FC | 	wrlong	result1, fp
126b0     04 4E 05 F1 | 	add	fp, #4
126b4     A7 FC 61 FC | 	wrlong	result2, fp
126b8     04 4E 05 F1 | 	add	fp, #4
126bc     A7 FE 61 FC | 	wrlong	result3, fp
126c0     08 4E 85 F1 | 	sub	fp, #8
126c4     A7 12 02 F6 | 	mov	arg01, fp
126c8     14 D9 BF FD | 	call	#_converttoint
126cc     58 FA 61 FD | 	drvl	result1
126d0     A7 F0 03 F6 | 	mov	ptra, fp
126d4     B2 00 A0 FD | 	call	#popregs_
126d8                 | _do_pinlo_ret
126d8     2D 00 64 FD | 	ret
126dc                 | 
126dc                 | ' 
126dc                 | ' sub do_pinhi
126dc                 | _do_pinhi
126dc     00 4A 05 F6 | 	mov	COUNT_, #0
126e0     A8 00 A0 FD | 	call	#pushregs_
126e4     0C F0 07 F1 | 	add	ptra, #12
126e8     A0 64 BF FD | 	call	#_pop
126ec     A7 FA 61 FC | 	wrlong	result1, fp
126f0     04 4E 05 F1 | 	add	fp, #4
126f4     A7 FC 61 FC | 	wrlong	result2, fp
126f8     04 4E 05 F1 | 	add	fp, #4
126fc     A7 FE 61 FC | 	wrlong	result3, fp
12700     08 4E 85 F1 | 	sub	fp, #8
12704     A7 12 02 F6 | 	mov	arg01, fp
12708     D4 D8 BF FD | 	call	#_converttoint
1270c     59 FA 61 FD | 	drvh	result1
12710     A7 F0 03 F6 | 	mov	ptra, fp
12714     B2 00 A0 FD | 	call	#popregs_
12718                 | _do_pinhi_ret
12718     2D 00 64 FD | 	ret
1271c                 | 
1271c                 | ' 
1271c                 | ' sub do_pintoggle
1271c                 | _do_pintoggle
1271c     00 4A 05 F6 | 	mov	COUNT_, #0
12720     A8 00 A0 FD | 	call	#pushregs_
12724     0C F0 07 F1 | 	add	ptra, #12
12728     60 64 BF FD | 	call	#_pop
1272c     A7 FA 61 FC | 	wrlong	result1, fp
12730     04 4E 05 F1 | 	add	fp, #4
12734     A7 FC 61 FC | 	wrlong	result2, fp
12738     04 4E 05 F1 | 	add	fp, #4
1273c     A7 FE 61 FC | 	wrlong	result3, fp
12740     08 4E 85 F1 | 	sub	fp, #8
12744     A7 12 02 F6 | 	mov	arg01, fp
12748     94 D8 BF FD | 	call	#_converttoint
1274c     5F FA 61 FD | 	drvnot	result1
12750     A7 F0 03 F6 | 	mov	ptra, fp
12754     B2 00 A0 FD | 	call	#popregs_
12758                 | _do_pintoggle_ret
12758     2D 00 64 FD | 	ret
1275c                 | 
1275c                 | ' 
1275c                 | ' 
1275c                 | ' sub do_pinstart
1275c                 | _do_pinstart
1275c     03 4A 05 F6 | 	mov	COUNT_, #3
12760     A8 00 A0 FD | 	call	#pushregs_
12764     30 F0 07 F1 | 	add	ptra, #48
12768     20 64 BF FD | 	call	#_pop
1276c     FD 16 02 F6 | 	mov	arg03, result1
12770     FE 14 02 F6 | 	mov	arg02, result2
12774     FF 18 02 F6 | 	mov	arg04, result3
12778     A7 16 62 FC | 	wrlong	arg03, fp
1277c     04 4E 05 F1 | 	add	fp, #4
12780     A7 14 62 FC | 	wrlong	arg02, fp
12784     04 4E 05 F1 | 	add	fp, #4
12788     A7 18 62 FC | 	wrlong	arg04, fp
1278c     08 4E 85 F1 | 	sub	fp, #8
12790     F8 63 BF FD | 	call	#_pop
12794     FD 16 02 F6 | 	mov	arg03, result1
12798     FE 14 02 F6 | 	mov	arg02, result2
1279c     FF 18 02 F6 | 	mov	arg04, result3
127a0     0C 4E 05 F1 | 	add	fp, #12
127a4     A7 16 62 FC | 	wrlong	arg03, fp
127a8     04 4E 05 F1 | 	add	fp, #4
127ac     A7 14 62 FC | 	wrlong	arg02, fp
127b0     04 4E 05 F1 | 	add	fp, #4
127b4     A7 18 62 FC | 	wrlong	arg04, fp
127b8     14 4E 85 F1 | 	sub	fp, #20
127bc     CC 63 BF FD | 	call	#_pop
127c0     FD 16 02 F6 | 	mov	arg03, result1
127c4     FE 14 02 F6 | 	mov	arg02, result2
127c8     FF 18 02 F6 | 	mov	arg04, result3
127cc     18 4E 05 F1 | 	add	fp, #24
127d0     A7 16 62 FC | 	wrlong	arg03, fp
127d4     04 4E 05 F1 | 	add	fp, #4
127d8     A7 14 62 FC | 	wrlong	arg02, fp
127dc     04 4E 05 F1 | 	add	fp, #4
127e0     A7 18 62 FC | 	wrlong	arg04, fp
127e4     20 4E 85 F1 | 	sub	fp, #32
127e8     A0 63 BF FD | 	call	#_pop
127ec     FF 16 02 F6 | 	mov	arg03, result3
127f0     24 4E 05 F1 | 	add	fp, #36
127f4     A7 FA 61 FC | 	wrlong	result1, fp
127f8     04 4E 05 F1 | 	add	fp, #4
127fc     A7 FC 61 FC | 	wrlong	result2, fp
12800     04 4E 05 F1 | 	add	fp, #4
12804     A7 16 62 FC | 	wrlong	arg03, fp
12808     08 4E 85 F1 | 	sub	fp, #8
1280c     A7 12 02 F6 | 	mov	arg01, fp
12810     24 4E 85 F1 | 	sub	fp, #36
12814     C8 D7 BF FD | 	call	#_converttoint
12818     FD 1E 02 F6 | 	mov	local01, result1
1281c     18 4E 05 F1 | 	add	fp, #24
12820     A7 12 02 F6 | 	mov	arg01, fp
12824     18 4E 85 F1 | 	sub	fp, #24
12828     B4 D7 BF FD | 	call	#_converttoint
1282c     FD 20 02 F6 | 	mov	local02, result1
12830     0C 4E 05 F1 | 	add	fp, #12
12834     A7 12 02 F6 | 	mov	arg01, fp
12838     0C 4E 85 F1 | 	sub	fp, #12
1283c     A0 D7 BF FD | 	call	#_converttoint
12840     FD 22 02 F6 | 	mov	local03, result1
12844     A7 12 02 F6 | 	mov	arg01, fp
12848     94 D7 BF FD | 	call	#_converttoint
1284c     40 1E 62 FD | 	dirl	local01
12850     0F 21 02 FC | 	wrpin	local02, local01
12854     0F 23 12 FC | 	wxpin	local03, local01
12858     0F FB 21 FC | 	wypin	result1, local01
1285c     41 1E 62 FD | 	dirh	local01
12860     A7 F0 03 F6 | 	mov	ptra, fp
12864     B2 00 A0 FD | 	call	#popregs_
12868                 | _do_pinstart_ret
12868     2D 00 64 FD | 	ret
1286c                 | 
1286c                 | ' 
1286c                 | ' 
1286c                 | ' sub do_wrpin
1286c                 | _do_wrpin
1286c     01 4A 05 F6 | 	mov	COUNT_, #1
12870     A8 00 A0 FD | 	call	#pushregs_
12874     18 F0 07 F1 | 	add	ptra, #24
12878     10 63 BF FD | 	call	#_pop
1287c     FD 14 02 F6 | 	mov	arg02, result1
12880     FE 12 02 F6 | 	mov	arg01, result2
12884     FF 1E 02 F6 | 	mov	local01, result3
12888     A7 14 62 FC | 	wrlong	arg02, fp
1288c     04 4E 05 F1 | 	add	fp, #4
12890     A7 12 62 FC | 	wrlong	arg01, fp
12894     04 4E 05 F1 | 	add	fp, #4
12898     A7 1E 62 FC | 	wrlong	local01, fp
1289c     08 4E 85 F1 | 	sub	fp, #8
128a0     E8 62 BF FD | 	call	#_pop
128a4     FF 1E 02 F6 | 	mov	local01, result3
128a8     0C 4E 05 F1 | 	add	fp, #12
128ac     A7 FA 61 FC | 	wrlong	result1, fp
128b0     04 4E 05 F1 | 	add	fp, #4
128b4     A7 FC 61 FC | 	wrlong	result2, fp
128b8     04 4E 05 F1 | 	add	fp, #4
128bc     A7 1E 62 FC | 	wrlong	local01, fp
128c0     08 4E 85 F1 | 	sub	fp, #8
128c4     A7 12 02 F6 | 	mov	arg01, fp
128c8     0C 4E 85 F1 | 	sub	fp, #12
128cc     10 D7 BF FD | 	call	#_converttoint
128d0     FD 1E 02 F6 | 	mov	local01, result1
128d4     A7 12 02 F6 | 	mov	arg01, fp
128d8     04 D7 BF FD | 	call	#_converttoint
128dc     0F FB 01 FC | 	wrpin	result1, local01
128e0     A7 F0 03 F6 | 	mov	ptra, fp
128e4     B2 00 A0 FD | 	call	#popregs_
128e8                 | _do_wrpin_ret
128e8     2D 00 64 FD | 	ret
128ec                 | 
128ec                 | ' 
128ec                 | ' sub do_wxpin
128ec                 | _do_wxpin
128ec     01 4A 05 F6 | 	mov	COUNT_, #1
128f0     A8 00 A0 FD | 	call	#pushregs_
128f4     18 F0 07 F1 | 	add	ptra, #24
128f8     90 62 BF FD | 	call	#_pop
128fc     FD 14 02 F6 | 	mov	arg02, result1
12900     FE 12 02 F6 | 	mov	arg01, result2
12904     FF 1E 02 F6 | 	mov	local01, result3
12908     A7 14 62 FC | 	wrlong	arg02, fp
1290c     04 4E 05 F1 | 	add	fp, #4
12910     A7 12 62 FC | 	wrlong	arg01, fp
12914     04 4E 05 F1 | 	add	fp, #4
12918     A7 1E 62 FC | 	wrlong	local01, fp
1291c     08 4E 85 F1 | 	sub	fp, #8
12920     68 62 BF FD | 	call	#_pop
12924     FF 1E 02 F6 | 	mov	local01, result3
12928     0C 4E 05 F1 | 	add	fp, #12
1292c     A7 FA 61 FC | 	wrlong	result1, fp
12930     04 4E 05 F1 | 	add	fp, #4
12934     A7 FC 61 FC | 	wrlong	result2, fp
12938     04 4E 05 F1 | 	add	fp, #4
1293c     A7 1E 62 FC | 	wrlong	local01, fp
12940     08 4E 85 F1 | 	sub	fp, #8
12944     A7 12 02 F6 | 	mov	arg01, fp
12948     0C 4E 85 F1 | 	sub	fp, #12
1294c     90 D6 BF FD | 	call	#_converttoint
12950     FD 1E 02 F6 | 	mov	local01, result1
12954     A7 12 02 F6 | 	mov	arg01, fp
12958     84 D6 BF FD | 	call	#_converttoint
1295c     0F FB 11 FC | 	wxpin	result1, local01
12960     A7 F0 03 F6 | 	mov	ptra, fp
12964     B2 00 A0 FD | 	call	#popregs_
12968                 | _do_wxpin_ret
12968     2D 00 64 FD | 	ret
1296c                 | 
1296c                 | ' 
1296c                 | ' sub do_wypin
1296c                 | _do_wypin
1296c     01 4A 05 F6 | 	mov	COUNT_, #1
12970     A8 00 A0 FD | 	call	#pushregs_
12974     18 F0 07 F1 | 	add	ptra, #24
12978     10 62 BF FD | 	call	#_pop
1297c     FD 14 02 F6 | 	mov	arg02, result1
12980     FE 12 02 F6 | 	mov	arg01, result2
12984     FF 1E 02 F6 | 	mov	local01, result3
12988     A7 14 62 FC | 	wrlong	arg02, fp
1298c     04 4E 05 F1 | 	add	fp, #4
12990     A7 12 62 FC | 	wrlong	arg01, fp
12994     04 4E 05 F1 | 	add	fp, #4
12998     A7 1E 62 FC | 	wrlong	local01, fp
1299c     08 4E 85 F1 | 	sub	fp, #8
129a0     E8 61 BF FD | 	call	#_pop
129a4     FF 1E 02 F6 | 	mov	local01, result3
129a8     0C 4E 05 F1 | 	add	fp, #12
129ac     A7 FA 61 FC | 	wrlong	result1, fp
129b0     04 4E 05 F1 | 	add	fp, #4
129b4     A7 FC 61 FC | 	wrlong	result2, fp
129b8     04 4E 05 F1 | 	add	fp, #4
129bc     A7 1E 62 FC | 	wrlong	local01, fp
129c0     08 4E 85 F1 | 	sub	fp, #8
129c4     A7 12 02 F6 | 	mov	arg01, fp
129c8     0C 4E 85 F1 | 	sub	fp, #12
129cc     10 D6 BF FD | 	call	#_converttoint
129d0     FD 1E 02 F6 | 	mov	local01, result1
129d4     A7 12 02 F6 | 	mov	arg01, fp
129d8     04 D6 BF FD | 	call	#_converttoint
129dc     0F FB 21 FC | 	wypin	result1, local01
129e0     A7 F0 03 F6 | 	mov	ptra, fp
129e4     B2 00 A0 FD | 	call	#popregs_
129e8                 | _do_wypin_ret
129e8     2D 00 64 FD | 	ret
129ec                 | 
129ec                 | ' 
129ec                 | ' sub do_position
129ec                 | _do_position
129ec     01 4A 05 F6 | 	mov	COUNT_, #1
129f0     A8 00 A0 FD | 	call	#pushregs_
129f4     18 F0 07 F1 | 	add	ptra, #24
129f8     90 61 BF FD | 	call	#_pop
129fc     FD 14 02 F6 | 	mov	arg02, result1
12a00     FE 12 02 F6 | 	mov	arg01, result2
12a04     FF 1E 02 F6 | 	mov	local01, result3
12a08     A7 14 62 FC | 	wrlong	arg02, fp
12a0c     04 4E 05 F1 | 	add	fp, #4
12a10     A7 12 62 FC | 	wrlong	arg01, fp
12a14     04 4E 05 F1 | 	add	fp, #4
12a18     A7 1E 62 FC | 	wrlong	local01, fp
12a1c     08 4E 85 F1 | 	sub	fp, #8
12a20     68 61 BF FD | 	call	#_pop
12a24     FF 1E 02 F6 | 	mov	local01, result3
12a28     0C 4E 05 F1 | 	add	fp, #12
12a2c     A7 FA 61 FC | 	wrlong	result1, fp
12a30     04 4E 05 F1 | 	add	fp, #4
12a34     A7 FC 61 FC | 	wrlong	result2, fp
12a38     04 4E 05 F1 | 	add	fp, #4
12a3c     A7 1E 62 FC | 	wrlong	local01, fp
12a40     08 4E 85 F1 | 	sub	fp, #8
12a44     A7 12 02 F6 | 	mov	arg01, fp
12a48     0C 4E 85 F1 | 	sub	fp, #12
12a4c     90 D5 BF FD | 	call	#_converttoint
12a50     FD 1E 02 F6 | 	mov	local01, result1
12a54     A7 12 02 F6 | 	mov	arg01, fp
12a58     84 D5 BF FD | 	call	#_converttoint
12a5c     FD 14 02 F6 | 	mov	arg02, result1
12a60     0F 13 02 F6 | 	mov	arg01, local01
12a64     64 3A B0 FD | 	call	#_hg010b_spin2_setcursorpos
12a68     A7 F0 03 F6 | 	mov	ptra, fp
12a6c     B2 00 A0 FD | 	call	#popregs_
12a70                 | _do_position_ret
12a70     2D 00 64 FD | 	ret
12a74                 | 
12a74                 | ' 
12a74                 | ' sub do_waitms
12a74                 | _do_waitms
12a74     01 4A 05 F6 | 	mov	COUNT_, #1
12a78     A8 00 A0 FD | 	call	#pushregs_
12a7c     18 F0 07 F1 | 	add	ptra, #24
12a80     08 61 BF FD | 	call	#_pop
12a84     A7 FA 61 FC | 	wrlong	result1, fp
12a88     04 4E 05 F1 | 	add	fp, #4
12a8c     A7 FC 61 FC | 	wrlong	result2, fp
12a90     04 4E 05 F1 | 	add	fp, #4
12a94     A7 FE 61 FC | 	wrlong	result3, fp
12a98                 | ' 
12a98                 | ' t1=pop() 'value
12a98                 | ' 
12a98                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
12a98     08 4E 85 F1 | 	sub	fp, #8
12a9c     1C FE 0D F2 | 	cmp	result3, #28 wz
12aa0     08 4E 05 51 |  if_ne	add	fp, #8
12aa4     A7 12 02 5B |  if_ne	rdlong	arg01, fp
12aa8     08 4E 85 51 |  if_ne	sub	fp, #8
12aac     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
12ab0     A7 12 02 AB |  if_e	rdlong	arg01, fp
12ab4     0C 4E 05 A1 |  if_e	add	fp, #12
12ab8     A7 12 62 AC |  if_e	wrlong	arg01, fp
12abc     0C 4E 85 A1 |  if_e	sub	fp, #12
12ac0     14 00 90 AD |  if_e	jmp	#LR__1480
12ac4     A7 12 02 F6 | 	mov	arg01, fp
12ac8     14 D5 BF FD | 	call	#_converttoint
12acc     0C 4E 05 F1 | 	add	fp, #12
12ad0     A7 FA 61 FC | 	wrlong	result1, fp
12ad4     0C 4E 85 F1 | 	sub	fp, #12
12ad8                 | LR__1480
12ad8                 | ' if t<0 then return
12ad8     0C 4E 05 F1 | 	add	fp, #12
12adc     A7 12 02 FB | 	rdlong	arg01, fp
12ae0     0C 4E 85 F1 | 	sub	fp, #12
12ae4     00 12 56 F2 | 	cmps	arg01, #0 wc
12ae8     B8 00 90 CD |  if_b	jmp	#LR__1485
12aec                 | ' if t < 5000 then 
12aec     0C 4E 05 F1 | 	add	fp, #12
12af0     A7 12 02 FB | 	rdlong	arg01, fp
12af4     0C 4E 85 F1 | 	sub	fp, #12
12af8     09 00 00 FF 
12afc     88 13 56 F2 | 	cmps	arg01, ##5000 wc
12b00     14 00 90 3D |  if_ae	jmp	#LR__1481
12b04     0C 4E 05 F1 | 	add	fp, #12
12b08     A7 12 02 FB | 	rdlong	arg01, fp
12b0c     0C 4E 85 F1 | 	sub	fp, #12
12b10     38 50 B0 FD | 	call	#__system___waitms
12b14     8C 00 90 FD | 	jmp	#LR__1484
12b18                 | LR__1481
12b18     10 4E 05 F1 | 	add	fp, #16
12b1c     A7 02 68 FC | 	wrlong	#1, fp
12b20     04 4E 85 F1 | 	sub	fp, #4
12b24     A7 12 02 FB | 	rdlong	arg01, fp
12b28     09 13 52 F6 | 	abs	arg01, arg01 wc
12b2c     09 00 00 FF 
12b30     88 13 16 FD | 	qdiv	arg01, ##5000
12b34                 | '   for i=1 to t/5000
12b34     0C 4E 85 F1 | 	sub	fp, #12
12b38     18 1E 62 FD | 	getqx	local01
12b3c     0F 1F 82 F6 | 	negc	local01, local01
12b40     01 1E 06 F1 | 	add	local01, #1
12b44                 | LR__1482
12b44     10 4E 05 F1 | 	add	fp, #16
12b48     A7 12 02 FB | 	rdlong	arg01, fp
12b4c     10 4E 85 F1 | 	sub	fp, #16
12b50     0F 13 52 F2 | 	cmps	arg01, local01 wc
12b54     28 00 90 3D |  if_ae	jmp	#LR__1483
12b58     0C 4E 05 F1 | 	add	fp, #12
12b5c     A7 12 02 FB | 	rdlong	arg01, fp
12b60     0C 4E 85 F1 | 	sub	fp, #12
12b64     E4 4F B0 FD | 	call	#__system___waitms
12b68     10 4E 05 F1 | 	add	fp, #16
12b6c     A7 12 02 FB | 	rdlong	arg01, fp
12b70     01 12 06 F1 | 	add	arg01, #1
12b74     A7 12 62 FC | 	wrlong	arg01, fp
12b78     10 4E 85 F1 | 	sub	fp, #16
12b7c     C4 FF 9F FD | 	jmp	#LR__1482
12b80                 | LR__1483
12b80     0C 4E 05 F1 | 	add	fp, #12
12b84     A7 1E 02 FB | 	rdlong	local01, fp
12b88     0F 1F 52 F6 | 	abs	local01, local01 wc
12b8c     09 00 00 FF 
12b90     88 1F 16 FD | 	qdiv	local01, ##5000
12b94     0C 4E 85 F1 | 	sub	fp, #12
12b98     19 1E 62 FD | 	getqy	local01
12b9c     0F 13 82 F6 | 	negc	arg01, local01
12ba0     A8 4F B0 FD | 	call	#__system___waitms
12ba4                 | LR__1484
12ba4                 | LR__1485
12ba4     A7 F0 03 F6 | 	mov	ptra, fp
12ba8     B2 00 A0 FD | 	call	#popregs_
12bac                 | _do_waitms_ret
12bac     2D 00 64 FD | 	ret
12bb0                 | 
12bb0                 | ' 
12bb0                 | ' sub do_waitvbl
12bb0                 | _do_waitvbl
12bb0     01 12 06 F6 | 	mov	arg01, #1
12bb4     4C 39 B0 FD | 	call	#_hg010b_spin2_waitvbl
12bb8                 | _do_waitvbl_ret
12bb8     2D 00 64 FD | 	ret
12bbc                 | 
12bbc                 | ' 
12bbc                 | ' sub do_waitclock
12bbc                 | _do_waitclock
12bbc     7A 00 00 FF 
12bc0     48 E4 05 F1 | 	add	objptr, ##62536
12bc4     F2 00 02 FB | 	rdlong	_var01, objptr
12bc8                 | ' c=hkcnt
12bc8                 | ' do: loop until hkcnt<>c
12bc8                 | LR__1490
12bc8     F2 02 02 FB | 	rdlong	_var02, objptr
12bcc     00 03 0A F2 | 	cmp	_var02, _var01 wz
12bd0     F4 FF 9F AD |  if_e	jmp	#LR__1490
12bd4     7A 00 00 FF 
12bd8     48 E4 85 F1 | 	sub	objptr, ##62536
12bdc                 | _do_waitclock_ret
12bdc     2D 00 64 FD | 	ret
12be0                 | 
12be0                 | ' 
12be0                 | ' sub do_dir
12be0                 | _do_dir
12be0     03 4A 05 F6 | 	mov	COUNT_, #3
12be4     A8 00 A0 FD | 	call	#pushregs_
12be8     36 01 00 FF 
12bec     6F 13 06 F6 | 	mov	arg01, ##@LR__4428
12bf0     F0 52 B0 FD | 	call	#__system___chdir
12bf4                 | ' chdir("/sd/bas")       ' set working directory
12bf4                 | ' print "Working directory: "; currentdir$ 
12bf4     00 12 06 F6 | 	mov	arg01, #0
12bf8     74 A1 B0 FD | 	call	#__system___getiolock_0383
12bfc     FD 12 02 F6 | 	mov	arg01, result1
12c00     54 4C B0 FD | 	call	#__system___lockmem
12c04     36 01 00 FF 
12c08     77 15 06 F6 | 	mov	arg02, ##@LR__4429
12c0c     00 12 06 F6 | 	mov	arg01, #0
12c10     00 16 06 F6 | 	mov	arg03, #0
12c14     34 59 B0 FD | 	call	#__system___basic_print_string
12c18     71 00 00 FF 
12c1c     68 E4 05 F1 | 	add	objptr, ##57960
12c20     F2 14 02 FB | 	rdlong	arg02, objptr
12c24     71 00 00 FF 
12c28     68 E4 85 F1 | 	sub	objptr, ##57960
12c2c     00 12 06 F6 | 	mov	arg01, #0
12c30     00 16 06 F6 | 	mov	arg03, #0
12c34     14 59 B0 FD | 	call	#__system___basic_print_string
12c38     00 12 06 F6 | 	mov	arg01, #0
12c3c     0A 14 06 F6 | 	mov	arg02, #10
12c40     00 16 06 F6 | 	mov	arg03, #0
12c44     AC 58 B0 FD | 	call	#__system___basic_print_char
12c48     00 12 06 F6 | 	mov	arg01, #0
12c4c     20 A1 B0 FD | 	call	#__system___getiolock_0383
12c50     FD 00 68 FC | 	wrlong	#0, result1
12c54     36 01 00 FF 
12c58     8B 13 06 F6 | 	mov	arg01, ##@LR__4430
12c5c     10 14 06 F6 | 	mov	arg02, #16
12c60     5C A1 B0 FD | 	call	#__system___basic_dir
12c64     FD 1E 02 F6 | 	mov	local01, result1
12c68                 | ' 
12c68                 | ' filename=dir$("*", fbDirectory)
12c68                 | ' while filename <> "" and filename <> nil
12c68                 | LR__1500
12c68     00 20 06 F6 | 	mov	local02, #0
12c6c     36 01 00 FF 
12c70     8D 15 06 F6 | 	mov	arg02, ##@LR__4431
12c74     0F 13 02 F6 | 	mov	arg01, local01
12c78     04 4C B0 FD | 	call	#__system___string_cmp
12c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
12c80     00 20 26 56 |  if_ne	not	local02, #0
12c84     00 22 06 F6 | 	mov	local03, #0
12c88     0F 13 02 F6 | 	mov	arg01, local01
12c8c     00 14 06 F6 | 	mov	arg02, #0
12c90     EC 4B B0 FD | 	call	#__system___string_cmp
12c94     00 FA 0D F2 | 	cmp	result1, #0 wz
12c98     00 22 26 56 |  if_ne	not	local03, #0
12c9c     11 21 CA F7 | 	test	local02, local03 wz
12ca0     64 00 90 AD |  if_e	jmp	#LR__1501
12ca4                 | '   print "[dir] ";filename
12ca4     00 12 06 F6 | 	mov	arg01, #0
12ca8     C4 A0 B0 FD | 	call	#__system___getiolock_0383
12cac     FD 12 02 F6 | 	mov	arg01, result1
12cb0     A4 4B B0 FD | 	call	#__system___lockmem
12cb4     36 01 00 FF 
12cb8     8E 15 06 F6 | 	mov	arg02, ##@LR__4432
12cbc     00 12 06 F6 | 	mov	arg01, #0
12cc0     00 16 06 F6 | 	mov	arg03, #0
12cc4     84 58 B0 FD | 	call	#__system___basic_print_string
12cc8     00 12 06 F6 | 	mov	arg01, #0
12ccc     0F 15 02 F6 | 	mov	arg02, local01
12cd0     00 16 06 F6 | 	mov	arg03, #0
12cd4     74 58 B0 FD | 	call	#__system___basic_print_string
12cd8     00 12 06 F6 | 	mov	arg01, #0
12cdc     0A 14 06 F6 | 	mov	arg02, #10
12ce0     00 16 06 F6 | 	mov	arg03, #0
12ce4     0C 58 B0 FD | 	call	#__system___basic_print_char
12ce8     00 12 06 F6 | 	mov	arg01, #0
12cec     80 A0 B0 FD | 	call	#__system___getiolock_0383
12cf0     FD 00 68 FC | 	wrlong	#0, result1
12cf4     00 12 06 F6 | 	mov	arg01, #0
12cf8     00 14 06 F6 | 	mov	arg02, #0
12cfc     C0 A0 B0 FD | 	call	#__system___basic_dir
12d00     FD 1E 02 F6 | 	mov	local01, result1
12d04     60 FF 9F FD | 	jmp	#LR__1500
12d08                 | LR__1501
12d08     36 01 00 FF 
12d0c     95 13 06 F6 | 	mov	arg01, ##@LR__4433
12d10     21 14 06 F6 | 	mov	arg02, #33
12d14     A8 A0 B0 FD | 	call	#__system___basic_dir
12d18     FD 1E 02 F6 | 	mov	local01, result1
12d1c                 | ' 
12d1c                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
12d1c                 | ' do while filename <> "" and filename <> nil
12d1c                 | LR__1502
12d1c     00 20 06 F6 | 	mov	local02, #0
12d20     36 01 00 FF 
12d24     97 15 06 F6 | 	mov	arg02, ##@LR__4434
12d28     0F 13 02 F6 | 	mov	arg01, local01
12d2c     50 4B B0 FD | 	call	#__system___string_cmp
12d30     00 FA 0D F2 | 	cmp	result1, #0 wz
12d34     00 20 26 56 |  if_ne	not	local02, #0
12d38     00 22 06 F6 | 	mov	local03, #0
12d3c     0F 13 02 F6 | 	mov	arg01, local01
12d40     00 14 06 F6 | 	mov	arg02, #0
12d44     38 4B B0 FD | 	call	#__system___string_cmp
12d48     00 FA 0D F2 | 	cmp	result1, #0 wz
12d4c     00 22 26 56 |  if_ne	not	local03, #0
12d50     11 21 CA F7 | 	test	local02, local03 wz
12d54     4C 01 90 AD |  if_e	jmp	#LR__1506
12d58                 | '   print filename
12d58     00 12 06 F6 | 	mov	arg01, #0
12d5c     10 A0 B0 FD | 	call	#__system___getiolock_0383
12d60     FD 12 02 F6 | 	mov	arg01, result1
12d64     F0 4A B0 FD | 	call	#__system___lockmem
12d68     00 12 06 F6 | 	mov	arg01, #0
12d6c     0F 15 02 F6 | 	mov	arg02, local01
12d70     00 16 06 F6 | 	mov	arg03, #0
12d74     D4 57 B0 FD | 	call	#__system___basic_print_string
12d78     00 12 06 F6 | 	mov	arg01, #0
12d7c     0A 14 06 F6 | 	mov	arg02, #10
12d80     00 16 06 F6 | 	mov	arg03, #0
12d84     6C 57 B0 FD | 	call	#__system___basic_print_char
12d88     00 12 06 F6 | 	mov	arg01, #0
12d8c     E0 9F B0 FD | 	call	#__system___getiolock_0383
12d90     FD 00 68 FC | 	wrlong	#0, result1
12d94     00 12 06 F6 | 	mov	arg01, #0
12d98     00 14 06 F6 | 	mov	arg02, #0
12d9c     20 A0 B0 FD | 	call	#__system___basic_dir
12da0     FD 1E 02 F6 | 	mov	local01, result1
12da4                 | '   filename = dir$()      ' continue scan
12da4                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
12da4                 | ' return cursor_y
12da4     3A E4 05 F1 | 	add	objptr, #58
12da8     F2 FA C1 FA | 	rdbyte	result1, objptr
12dac     3A E4 85 F1 | 	sub	objptr, #58
12db0     22 FA 0D F2 | 	cmp	result1, #34 wz
12db4     64 FF 9F 5D |  if_ne	jmp	#LR__1502
12db8                 | '     print "-----more, press any key";
12db8     00 12 06 F6 | 	mov	arg01, #0
12dbc     B0 9F B0 FD | 	call	#__system___getiolock_0383
12dc0     FD 12 02 F6 | 	mov	arg01, result1
12dc4     90 4A B0 FD | 	call	#__system___lockmem
12dc8     36 01 00 FF 
12dcc     98 15 06 F6 | 	mov	arg02, ##@LR__4435
12dd0     00 12 06 F6 | 	mov	arg01, #0
12dd4     00 16 06 F6 | 	mov	arg03, #0
12dd8     70 57 B0 FD | 	call	#__system___basic_print_string
12ddc     00 12 06 F6 | 	mov	arg01, #0
12de0     8C 9F B0 FD | 	call	#__system___getiolock_0383
12de4     FD 00 68 FC | 	wrlong	#0, result1
12de8                 | '     do 
12de8                 | LR__1503
12de8     0C 43 B0 FD | 	call	#_usbnew_spin2_get_key
12dec     00 FA 0D F2 | 	cmp	result1, #0 wz
12df0     F4 FF 9F 5D |  if_ne	jmp	#LR__1503
12df4                 | '     do
12df4                 | LR__1504
12df4     00 43 B0 FD | 	call	#_usbnew_spin2_get_key
12df8     00 FA 0D F2 | 	cmp	result1, #0 wz
12dfc     F4 FF 9F AD |  if_e	jmp	#LR__1504
12e00                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
12e00     78 00 00 FF 
12e04     B4 E5 05 F1 | 	add	objptr, ##61876
12e08     F2 20 02 FB | 	rdlong	local02, objptr
12e0c     78 00 00 FF 
12e10     B4 E5 85 F1 | 	sub	objptr, ##61876
12e14     01 20 0E F2 | 	cmp	local02, #1 wz
12e18     3C 00 90 5D |  if_ne	jmp	#LR__1505
12e1c     7A 00 00 FF 
12e20     58 E4 05 F1 | 	add	objptr, ##62552
12e24     F2 14 02 FB | 	rdlong	arg02, objptr
12e28     04 E4 85 F1 | 	sub	objptr, #4
12e2c     F2 1A 02 FB | 	rdlong	arg05, objptr
12e30     07 12 06 F6 | 	mov	arg01, #7
12e34     56 00 00 FF 
12e38     44 16 06 F6 | 	mov	arg03, ##44100
12e3c     0E 18 C6 F9 | 	decod	arg04, #14
12e40     01 1C 66 F6 | 	neg	arg06, #1
12e44     6E 00 00 FF 
12e48     94 E5 85 F1 | 	sub	objptr, ##56724
12e4c     D0 45 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
12e50     0B 00 00 FF 
12e54     C0 E4 85 F1 | 	sub	objptr, ##5824
12e58                 | LR__1505
12e58     00 12 06 F6 | 	mov	arg01, #0
12e5c     23 14 06 F6 | 	mov	arg02, #35
12e60     68 36 B0 FD | 	call	#_hg010b_spin2_setcursorpos
12e64                 | '     position 0,35: print "                             ";: position 4,35  
12e64     00 12 06 F6 | 	mov	arg01, #0
12e68     04 9F B0 FD | 	call	#__system___getiolock_0383
12e6c     FD 12 02 F6 | 	mov	arg01, result1
12e70     E4 49 B0 FD | 	call	#__system___lockmem
12e74     36 01 00 FF 
12e78     B1 15 06 F6 | 	mov	arg02, ##@LR__4436
12e7c     00 12 06 F6 | 	mov	arg01, #0
12e80     00 16 06 F6 | 	mov	arg03, #0
12e84     C4 56 B0 FD | 	call	#__system___basic_print_string
12e88     00 12 06 F6 | 	mov	arg01, #0
12e8c     E0 9E B0 FD | 	call	#__system___getiolock_0383
12e90     FD 00 68 FC | 	wrlong	#0, result1
12e94     04 12 06 F6 | 	mov	arg01, #4
12e98     23 14 06 F6 | 	mov	arg02, #35
12e9c     2C 36 B0 FD | 	call	#_hg010b_spin2_setcursorpos
12ea0     78 FE 9F FD | 	jmp	#LR__1502
12ea4                 | LR__1506
12ea4     A7 F0 03 F6 | 	mov	ptra, fp
12ea8     B2 00 A0 FD | 	call	#popregs_
12eac                 | _do_dir_ret
12eac     2D 00 64 FD | 	ret
12eb0                 | 
12eb0                 | ' 
12eb0                 | ' sub do_if
12eb0                 | _do_if
12eb0     05 4A 05 F6 | 	mov	COUNT_, #5
12eb4     A8 00 A0 FD | 	call	#pushregs_
12eb8     D0 5C BF FD | 	call	#_pop
12ebc     FD 1E 0A F6 | 	mov	local01, result1 wz
12ec0     FE 20 02 F6 | 	mov	local02, result2
12ec4     FF 22 02 F6 | 	mov	local03, result3
12ec8                 | ' t1=pop()
12ec8                 | ' ' if uresult=0, jump over else
12ec8                 | ' if t1.result.uresult = 0 then 
12ec8     BC 00 90 5D |  if_ne	jmp	#LR__1512
12ecc                 | '   for i=lineptr_e to lineptr-1
12ecc     69 00 00 FF 
12ed0     54 E4 05 F1 | 	add	objptr, ##53844
12ed4     F2 24 02 FB | 	rdlong	local04, objptr
12ed8     04 E4 85 F1 | 	sub	objptr, #4
12edc     F2 26 02 FB | 	rdlong	local05, objptr
12ee0     69 00 00 FF 
12ee4     50 E4 85 F1 | 	sub	objptr, ##53840
12ee8                 | LR__1510
12ee8     13 25 52 F2 | 	cmps	local04, local05 wc
12eec     78 00 90 3D |  if_ae	jmp	#LR__1511
12ef0     12 FF 01 F6 | 	mov	result3, local04
12ef4     01 FE 65 F0 | 	shl	result3, #1
12ef8     12 FF 01 F1 | 	add	result3, local04
12efc     02 FE 65 F0 | 	shl	result3, #2
12f00     66 00 00 FF 
12f04     50 E4 05 F1 | 	add	objptr, ##52304
12f08     F2 FE 01 F1 | 	add	result3, objptr
12f0c     FF 1E 02 FB | 	rdlong	local01, result3
12f10     04 FE 05 F1 | 	add	result3, #4
12f14     FF FC 01 FB | 	rdlong	result2, result3
12f18     12 FF 01 F6 | 	mov	result3, local04
12f1c     01 FE 65 F0 | 	shl	result3, #1
12f20     12 FF 01 F1 | 	add	result3, local04
12f24     02 FE 65 F0 | 	shl	result3, #2
12f28     F2 FE 01 F1 | 	add	result3, objptr
12f2c     08 FE 05 F1 | 	add	result3, #8
12f30     FF FE 01 FB | 	rdlong	result3, result3
12f34     FE 20 02 F6 | 	mov	local02, result2
12f38     FF 22 02 F6 | 	mov	local03, result3
12f3c                 | '     t1=compiledline(i)
12f3c                 | '     if t1.result_type=token_else then lineptr_e=i : return
12f3c     5A 22 0E F2 | 	cmp	local03, #90 wz
12f40     66 00 00 FF 
12f44     50 E4 85 F1 | 	sub	objptr, ##52304
12f48     69 00 00 AF 
12f4c     54 E4 05 A1 |  if_e	add	objptr, ##53844
12f50     F2 24 62 AC |  if_e	wrlong	local04, objptr
12f54     69 00 00 AF 
12f58     54 E4 85 A1 |  if_e	sub	objptr, ##53844
12f5c     28 00 90 AD |  if_e	jmp	#LR__1513
12f60     01 24 06 F1 | 	add	local04, #1
12f64     80 FF 9F FD | 	jmp	#LR__1510
12f68                 | LR__1511
12f68     69 00 00 FF 
12f6c     50 E4 05 F1 | 	add	objptr, ##53840
12f70     F2 26 02 FB | 	rdlong	local05, objptr
12f74     01 26 86 F1 | 	sub	local05, #1
12f78     04 E4 05 F1 | 	add	objptr, #4
12f7c     F2 26 62 FC | 	wrlong	local05, objptr
12f80     69 00 00 FF 
12f84     54 E4 85 F1 | 	sub	objptr, ##53844
12f88                 | LR__1512
12f88                 | LR__1513
12f88     A7 F0 03 F6 | 	mov	ptra, fp
12f8c     B2 00 A0 FD | 	call	#popregs_
12f90                 | _do_if_ret
12f90     2D 00 64 FD | 	ret
12f94                 | 
12f94                 | ' 
12f94                 | ' sub do_else
12f94                 | _do_else
12f94     69 00 00 FF 
12f98     50 E4 05 F1 | 	add	objptr, ##53840
12f9c     F2 00 02 FB | 	rdlong	_var01, objptr
12fa0     01 00 86 F1 | 	sub	_var01, #1
12fa4     04 E4 05 F1 | 	add	objptr, #4
12fa8     F2 00 62 FC | 	wrlong	_var01, objptr
12fac     69 00 00 FF 
12fb0     54 E4 85 F1 | 	sub	objptr, ##53844
12fb4                 | _do_else_ret
12fb4     2D 00 64 FD | 	ret
12fb8                 | 
12fb8                 | ' 
12fb8                 | ' 
12fb8                 | ' 
12fb8                 | ' sub do_nothing
12fb8                 | _do_nothing
12fb8                 | _do_nothing_ret
12fb8     2D 00 64 FD | 	ret
12fbc                 | 
12fbc                 | ' 
12fbc                 | ' sub do_brun
12fbc                 | _do_brun
12fbc     08 4A 05 F6 | 	mov	COUNT_, #8
12fc0     A8 00 A0 FD | 	call	#pushregs_
12fc4     C4 5B BF FD | 	call	#_pop
12fc8     FE 1A 02 F6 | 	mov	arg05, result2
12fcc     FF 18 02 F6 | 	mov	arg04, result3
12fd0     FD 1E 02 F6 | 	mov	local01, result1
12fd4     0D 21 02 F6 | 	mov	local02, arg05
12fd8     0C 23 02 F6 | 	mov	local03, arg04
12fdc                 | ' 
12fdc                 | ' t1=pop() 
12fdc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
12fdc     2B 22 0E F2 | 	cmp	local03, #43 wz
12fe0     10 00 90 5D |  if_ne	jmp	#LR__1520
12fe4     0F 13 02 F6 | 	mov	arg01, local01
12fe8     A8 8C BF FD | 	call	#_convertstring
12fec     FD 1E 02 F6 | 	mov	local01, result1
12ff0     1F 22 06 F6 | 	mov	local03, #31
12ff4                 | LR__1520
12ff4                 | ' if t1.result_type=result_string then
12ff4     1F 22 0E F2 | 	cmp	local03, #31 wz
12ff8     EC 01 90 5D |  if_ne	jmp	#LR__1524
12ffc     0F 25 02 F6 | 	mov	local04, local01
13000                 | '   filename=t1.result.sresult
13000                 | '   if left$(filename,1)="/" then 
13000     12 13 02 F6 | 	mov	arg01, local04
13004     01 14 06 F6 | 	mov	arg02, #1
13008     5C 68 B0 FD | 	call	#__system__Left_S
1300c     FD 12 02 F6 | 	mov	arg01, result1
13010     36 01 00 FF 
13014     CF 15 06 F6 | 	mov	arg02, ##@LR__4437
13018     64 48 B0 FD | 	call	#__system___string_cmp
1301c     00 FA 0D F2 | 	cmp	result1, #0 wz
13020     12 27 02 A6 |  if_e	mov	local05, local04
13024     14 00 90 AD |  if_e	jmp	#LR__1521
13028     36 01 00 FF 
1302c     D1 13 06 F6 | 	mov	arg01, ##@LR__4438
13030     12 15 02 F6 | 	mov	arg02, local04
13034     7C 48 B0 FD | 	call	#__system___string_concat
13038     FD 26 02 F6 | 	mov	local05, result1
1303c                 | LR__1521
1303c                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
1303c                 | '   open fullfilename for input as #9
1303c     09 12 06 F6 | 	mov	arg01, #9
13040     13 15 02 F6 | 	mov	arg02, local05
13044     00 16 06 F6 | 	mov	arg03, #0
13048     10 54 B0 FD | 	call	#__system___basic_open_string
1304c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
13050     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
13054     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
13058     FD 28 0A F6 | 	mov	local06, result1 wz
1305c                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
1305c     8C 00 90 AD |  if_e	jmp	#LR__1522
13060     00 12 06 F6 | 	mov	arg01, #0
13064     08 9D B0 FD | 	call	#__system___getiolock_0383
13068     FD 12 02 F6 | 	mov	arg01, result1
1306c     E8 47 B0 FD | 	call	#__system___lockmem
13070     36 01 00 FF 
13074     DA 15 06 F6 | 	mov	arg02, ##@LR__4439
13078     00 12 06 F6 | 	mov	arg01, #0
1307c     00 16 06 F6 | 	mov	arg03, #0
13080     C8 54 B0 FD | 	call	#__system___basic_print_string
13084     00 12 06 F6 | 	mov	arg01, #0
13088     14 15 02 F6 | 	mov	arg02, local06
1308c     00 16 06 F6 | 	mov	arg03, #0
13090     0A 18 06 F6 | 	mov	arg04, #10
13094     F8 54 B0 FD | 	call	#__system___basic_print_integer
13098     36 01 00 FF 
1309c     E8 15 06 F6 | 	mov	arg02, ##@LR__4440
130a0     00 12 06 F6 | 	mov	arg01, #0
130a4     00 16 06 F6 | 	mov	arg03, #0
130a8     A0 54 B0 FD | 	call	#__system___basic_print_string
130ac     14 13 02 F6 | 	mov	arg01, local06
130b0     A0 6C B0 FD | 	call	#__system___strerror
130b4     FD 14 02 F6 | 	mov	arg02, result1
130b8     00 12 06 F6 | 	mov	arg01, #0
130bc     00 16 06 F6 | 	mov	arg03, #0
130c0     88 54 B0 FD | 	call	#__system___basic_print_string
130c4     00 12 06 F6 | 	mov	arg01, #0
130c8     0A 14 06 F6 | 	mov	arg02, #10
130cc     00 16 06 F6 | 	mov	arg03, #0
130d0     20 54 B0 FD | 	call	#__system___basic_print_char
130d4     00 12 06 F6 | 	mov	arg01, #0
130d8     94 9C B0 FD | 	call	#__system___getiolock_0383
130dc     FD 00 68 FC | 	wrlong	#0, result1
130e0     09 12 06 F6 | 	mov	arg01, #9
130e4     B8 92 B0 FD | 	call	#__system__close
130e8     FC 00 90 FD | 	jmp	#LR__1525
130ec                 | LR__1522
130ec     01 2A 06 F6 | 	mov	local07, #1
130f0     00 2C 06 F6 | 	mov	local08, #0
130f4                 | '   do
130f4                 | LR__1523
130f4                 | '     get #9,pos,block(0),1024,r : pos+=r	
130f4     76 00 00 FF 
130f8     80 E5 05 F1 | 	add	objptr, ##60800
130fc     F2 16 02 F6 | 	mov	arg03, objptr
13100     76 00 00 FF 
13104     80 E5 85 F1 | 	sub	objptr, ##60800
13108     09 12 06 F6 | 	mov	arg01, #9
1310c     15 15 02 F6 | 	mov	arg02, local07
13110     0A 18 C6 F9 | 	decod	arg04, #10
13114     01 1A 06 F6 | 	mov	arg05, #1
13118     40 55 B0 FD | 	call	#__system___basic_get
1311c     FD 28 02 F6 | 	mov	local06, result1
13120     FD 2A 02 F1 | 	add	local07, result1
13124     76 00 00 FF 
13128     80 E5 05 F1 | 	add	objptr, ##60800
1312c     F2 12 02 F6 | 	mov	arg01, objptr
13130     16 15 02 F6 | 	mov	arg02, local08
13134     0A 16 C6 F9 | 	decod	arg03, #10
13138     6B 00 00 FF 
1313c     C0 E4 85 F1 | 	sub	objptr, ##54976
13140     C0 3C B0 FD | 	call	#_psram_spin2_write
13144     0B 00 00 FF 
13148     C0 E4 85 F1 | 	sub	objptr, ##5824
1314c     14 2D 02 F1 | 	add	local08, local06
13150     02 00 00 FF 
13154     00 28 0E F2 | 	cmp	local06, ##1024 wz
13158     E0 03 00 AF 
1315c     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
13160     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1523
13164     55 00 00 FF 
13168     D0 E5 05 F1 | 	add	objptr, ##43984
1316c     F2 12 02 FB | 	rdlong	arg01, objptr
13170     03 12 62 FD | 	cogstop	arg01
13174     04 E4 05 F1 | 	add	objptr, #4
13178     F2 12 02 FB | 	rdlong	arg01, objptr
1317c     03 12 62 FD | 	cogstop	arg01
13180     04 E4 05 F1 | 	add	objptr, #4
13184     F2 12 02 FB | 	rdlong	arg01, objptr
13188     03 12 62 FD | 	cogstop	arg01
1318c     22 00 00 FF 
13190     E0 E5 05 F1 | 	add	objptr, ##17888
13194     F2 12 02 FB | 	rdlong	arg01, objptr
13198     03 12 62 FD | 	cogstop	arg01
1319c     10 00 00 FF 
131a0     9C EA 05 F1 | 	add	ptr__dat__, ##8348
131a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
131a8     10 00 00 FF 
131ac     9C EA 85 F1 | 	sub	ptr__dat__, ##8348
131b0     22 00 00 FF 
131b4     D8 E5 85 F1 | 	sub	objptr, ##17880
131b8     1E 2C 06 F6 | 	mov	local08, #30
131bc     28 E4 61 FD | 	setq	objptr
131c0     0A 2D F2 FC | 	coginit	local08, arg02 wc
131c4     01 2C 66 C6 |  if_b	neg	local08, #1
131c8     24 00 00 FF 
131cc     E8 E4 05 F1 | 	add	objptr, ##18664
131d0     F2 2C 62 FC | 	wrlong	local08, objptr
131d4     7A 00 00 FF 
131d8     C8 E4 85 F1 | 	sub	objptr, ##62664
131dc     00 12 06 F6 | 	mov	arg01, #0
131e0     01 12 62 FD | 	cogid	arg01
131e4     03 12 62 FD | 	cogstop	arg01
131e8                 | LR__1524
131e8                 | LR__1525
131e8     A7 F0 03 F6 | 	mov	ptra, fp
131ec     B2 00 A0 FD | 	call	#popregs_
131f0                 | _do_brun_ret
131f0     2D 00 64 FD | 	ret
131f4                 | 
131f4                 | ' 
131f4                 | ' 
131f4                 | ' sub do_mouse
131f4                 | _do_mouse
131f4     94 59 BF FD | 	call	#_pop
131f8     00 FA 4D F2 | 	cmps	result1, #0 wz
131fc                 | ' 
131fc                 | ' t1=pop()
131fc                 | ' 
131fc                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
131fc     14 00 90 5D |  if_ne	jmp	#LR__1530
13200     10 12 06 F6 | 	mov	arg01, #16
13204     00 14 06 F6 | 	mov	arg02, #0
13208     00 16 06 F6 | 	mov	arg03, #0
1320c     AC 26 B0 FD | 	call	#_hg010b_spin2_setspritesize
13210     10 00 90 FD | 	jmp	#LR__1531
13214                 | LR__1530
13214     10 12 06 F6 | 	mov	arg01, #16
13218     20 14 06 F6 | 	mov	arg02, #32
1321c     20 16 06 F6 | 	mov	arg03, #32
13220     98 26 B0 FD | 	call	#_hg010b_spin2_setspritesize
13224                 | LR__1531
13224                 | _do_mouse_ret
13224     2D 00 64 FD | 	ret
13228                 | 
13228                 | ' 
13228                 | ' sub do_cursor
13228                 | _do_cursor
13228     60 59 BF FD | 	call	#_pop
1322c     00 FA 4D F2 | 	cmps	result1, #0 wz
13230                 | ' 
13230                 | ' t1=pop()
13230                 | ' 
13230                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
13230     14 00 90 5D |  if_ne	jmp	#LR__1540
13234     11 12 06 F6 | 	mov	arg01, #17
13238     00 14 06 F6 | 	mov	arg02, #0
1323c     00 16 06 F6 | 	mov	arg03, #0
13240     78 26 B0 FD | 	call	#_hg010b_spin2_setspritesize
13244     10 00 90 FD | 	jmp	#LR__1541
13248                 | LR__1540
13248     11 12 06 F6 | 	mov	arg01, #17
1324c     08 14 06 F6 | 	mov	arg02, #8
13250     10 16 06 F6 | 	mov	arg03, #16
13254     64 26 B0 FD | 	call	#_hg010b_spin2_setspritesize
13258                 | LR__1541
13258                 | _do_cursor_ret
13258     2D 00 64 FD | 	ret
1325c                 | 
1325c                 | ' 
1325c                 | ' 
1325c                 | ' sub do_click
1325c                 | _do_click
1325c     2C 59 BF FD | 	call	#_pop
13260     00 FA 4D F2 | 	cmps	result1, #0 wz
13264                 | ' 
13264                 | ' t1=pop()
13264                 | ' 
13264                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
13264     78 00 00 AF 
13268     B4 E5 05 A1 |  if_e	add	objptr, ##61876
1326c     F2 00 68 AC |  if_e	wrlong	#0, objptr
13270     78 00 00 FF 
13274     B4 E5 C5 F3 | 	sumz	objptr, ##61876
13278     F2 02 68 5C |  if_ne	wrlong	#1, objptr
1327c     78 00 00 5F 
13280     B4 E5 85 51 |  if_ne	sub	objptr, ##61876
13284                 | _do_click_ret
13284     2D 00 64 FD | 	ret
13288                 | 
13288                 | ' 
13288                 | ' 
13288                 | ' sub do_beep
13288                 | _do_beep
13288     02 4A 05 F6 | 	mov	COUNT_, #2
1328c     A8 00 A0 FD | 	call	#pushregs_
13290     20 F0 07 F1 | 	add	ptra, #32
13294     F4 58 BF FD | 	call	#_pop
13298     FD 1E 02 F6 | 	mov	local01, result1
1329c     FE 1C 02 F6 | 	mov	arg06, result2
132a0     FF 20 02 F6 | 	mov	local02, result3
132a4     0C 4E 05 F1 | 	add	fp, #12
132a8     A7 1E 62 FC | 	wrlong	local01, fp
132ac     04 4E 05 F1 | 	add	fp, #4
132b0     A7 1C 62 FC | 	wrlong	arg06, fp
132b4     04 4E 05 F1 | 	add	fp, #4
132b8     A7 20 62 FC | 	wrlong	local02, fp
132bc     14 4E 85 F1 | 	sub	fp, #20
132c0     C8 58 BF FD | 	call	#_pop
132c4     A7 FA 61 FC | 	wrlong	result1, fp
132c8     04 4E 05 F1 | 	add	fp, #4
132cc     A7 FC 61 FC | 	wrlong	result2, fp
132d0     04 4E 05 F1 | 	add	fp, #4
132d4     A7 FE 61 FC | 	wrlong	result3, fp
132d8                 | ' 
132d8                 | ' 
132d8                 | ' 
132d8                 | ' t2=pop()
132d8                 | ' t1=pop()
132d8                 | ' 
132d8                 | ' 
132d8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
132d8     08 4E 85 F1 | 	sub	fp, #8
132dc     1C FE 0D F2 | 	cmp	result3, #28 wz
132e0     08 4E 05 51 |  if_ne	add	fp, #8
132e4     A7 20 02 5B |  if_ne	rdlong	local02, fp
132e8     08 4E 85 51 |  if_ne	sub	fp, #8
132ec     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
132f0     A7 1E 02 AB |  if_e	rdlong	local01, fp
132f4     18 4E 05 A1 |  if_e	add	fp, #24
132f8     A7 1E 62 AC |  if_e	wrlong	local01, fp
132fc     18 4E 85 A1 |  if_e	sub	fp, #24
13300     14 00 90 AD |  if_e	jmp	#LR__1550
13304     A7 12 02 F6 | 	mov	arg01, fp
13308     D4 CC BF FD | 	call	#_converttoint
1330c     18 4E 05 F1 | 	add	fp, #24
13310     A7 FA 61 FC | 	wrlong	result1, fp
13314     18 4E 85 F1 | 	sub	fp, #24
13318                 | LR__1550
13318     1C 4E 05 F1 | 	add	fp, #28
1331c     A7 FE 48 FC | 	wrbyte	#127, fp
13320     01 4E 05 F1 | 	add	fp, #1
13324     A7 00 49 FC | 	wrbyte	#128, fp
13328     01 4E 85 F1 | 	sub	fp, #1
1332c     A7 14 02 F6 | 	mov	arg02, fp
13330     04 4E 85 F1 | 	sub	fp, #4
13334     A7 16 02 FB | 	rdlong	arg03, fp
13338     18 4E 85 F1 | 	sub	fp, #24
1333c     01 16 66 F0 | 	shl	arg03, #1
13340     07 12 06 F6 | 	mov	arg01, #7
13344     0E 18 C6 F9 | 	decod	arg04, #14
13348     02 1A 06 F6 | 	mov	arg05, #2
1334c     00 1C 06 F6 | 	mov	arg06, #0
13350     0B 00 00 FF 
13354     C0 E4 05 F1 | 	add	objptr, ##5824
13358     60 41 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
1335c     0B 00 00 FF 
13360     C0 E4 85 F1 | 	sub	objptr, ##5824
13364     0C 4E 05 F1 | 	add	fp, #12
13368     A7 12 02 F6 | 	mov	arg01, fp
1336c     0C 4E 85 F1 | 	sub	fp, #12
13370     B0 58 BF FD | 	call	#_push
13374     FC F6 BF FD | 	call	#_do_waitms
13378     07 12 06 F6 | 	mov	arg01, #7
1337c     0B 00 00 FF 
13380     C0 E4 05 F1 | 	add	objptr, ##5824
13384     E8 41 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
13388     0B 00 00 FF 
1338c     C0 E4 85 F1 | 	sub	objptr, ##5824
13390     A7 F0 03 F6 | 	mov	ptra, fp
13394     B2 00 A0 FD | 	call	#popregs_
13398                 | _do_beep_ret
13398     2D 00 64 FD | 	ret
1339c                 | 
1339c                 | ' 
1339c                 | ' sub do_no_command
1339c                 | _do_no_command
1339c     17 12 06 F6 | 	mov	arg01, #23
133a0     90 0F B0 FD | 	call	#_printerror
133a4                 | _do_no_command_ret
133a4     2D 00 64 FD | 	ret
133a8                 | 
133a8                 | ' 
133a8                 | ' sub do_negative
133a8                 | _do_negative
133a8     02 4A 05 F6 | 	mov	COUNT_, #2
133ac     A8 00 A0 FD | 	call	#pushregs_
133b0     0C F0 07 F1 | 	add	ptra, #12
133b4     D4 57 BF FD | 	call	#_pop
133b8     FF 1E 02 F6 | 	mov	local01, result3
133bc     A7 FA 61 FC | 	wrlong	result1, fp
133c0     04 4E 05 F1 | 	add	fp, #4
133c4     A7 FC 61 FC | 	wrlong	result2, fp
133c8     04 4E 05 F1 | 	add	fp, #4
133cc     A7 1E 62 FC | 	wrlong	local01, fp
133d0                 | ' t1=pop()
133d0                 | ' if t1.result_type=result_int then 
133d0     08 4E 85 F1 | 	sub	fp, #8
133d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
133d8     A7 20 02 AB |  if_e	rdlong	local02, fp
133dc     10 1F 62 A6 |  if_e	neg	local01, local02
133e0     A7 1E 62 AC |  if_e	wrlong	local01, fp
133e4     5C 00 90 AD |  if_e	jmp	#LR__1562
133e8     08 4E 05 F1 | 	add	fp, #8
133ec     A7 1E 02 FB | 	rdlong	local01, fp
133f0     08 4E 85 F1 | 	sub	fp, #8
133f4     1D 1E 0E F2 | 	cmp	local01, #29 wz
133f8     1C 00 90 5D |  if_ne	jmp	#LR__1560
133fc     A7 20 02 FB | 	rdlong	local02, fp
13400     10 1F 62 F6 | 	neg	local01, local02
13404     A7 1E 62 FC | 	wrlong	local01, fp
13408     08 4E 05 F1 | 	add	fp, #8
1340c     A7 38 68 FC | 	wrlong	#28, fp
13410     08 4E 85 F1 | 	sub	fp, #8
13414     2C 00 90 FD | 	jmp	#LR__1561
13418                 | LR__1560
13418     08 4E 05 F1 | 	add	fp, #8
1341c     A7 1E 02 FB | 	rdlong	local01, fp
13420     08 4E 85 F1 | 	sub	fp, #8
13424     1E 1E 0E F2 | 	cmp	local01, #30 wz
13428     A7 FA 01 AB |  if_e	rdlong	result1, fp
1342c     1F FA E5 A4 |  if_e	bitnot	result1, #31
13430     A7 FA 61 AC |  if_e	wrlong	result1, fp
13434     08 4E 05 51 |  if_ne	add	fp, #8
13438     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1343c     08 4E 85 51 |  if_ne	sub	fp, #8
13440     A7 50 68 5C |  if_ne	wrlong	#40, fp
13444                 | LR__1561
13444                 | LR__1562
13444     A7 12 02 F6 | 	mov	arg01, fp
13448     D8 57 BF FD | 	call	#_push
1344c     A7 F0 03 F6 | 	mov	ptra, fp
13450     B2 00 A0 FD | 	call	#popregs_
13454                 | _do_negative_ret
13454     2D 00 64 FD | 	ret
13458                 | 
13458                 | ' 
13458                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
13458                 | ' 
13458                 | ' ''----------------------------------------------------------------------------------------------------
13458                 | ' ''------------------ Initialization procedures -------------------------------------------------------
13458                 | ' ''----------------------------------------------------------------------------------------------------
13458                 | ' 
13458                 | ' ''--------------------------- Command function pointers
13458                 | ' 
13458                 | ' sub init_commands
13458                 | _init_commands
13458                 | ' 
13458                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
13458     00 00 06 F6 | 	mov	_var01, #0
1345c     97 16 48 FB | 	callpa	#(@LR__1571-@LR__1570)>>2,fcache_load_ptr_
13460                 | LR__1570
13460     00 FB 01 F6 | 	mov	result1, _var01
13464     02 FA 65 F0 | 	shl	result1, #2
13468     62 00 00 FF 
1346c     34 E4 05 F1 | 	add	objptr, ##50228
13470     F2 FA 01 F1 | 	add	result1, objptr
13474     62 00 00 FF 
13478     34 E4 85 F1 | 	sub	objptr, ##50228
1347c     FD E4 61 FC | 	wrlong	objptr, result1
13480     01 00 06 F1 | 	add	_var01, #1
13484     00 01 56 F2 | 	cmps	_var01, #256 wc
13488     D4 FF 9F CD |  if_b	jmp	#LR__1570
1348c                 | LR__1571
1348c     F2 FA 01 F6 | 	mov	result1, objptr
13490     14 FA 25 F4 | 	bith	result1, #20
13494     62 00 00 FF 
13498     38 E4 05 F1 | 	add	objptr, ##50232
1349c     F2 FA 61 FC | 	wrlong	result1, objptr
134a0     62 00 00 FF 
134a4     38 E4 85 F1 | 	sub	objptr, ##50232
134a8     F2 FA 01 F6 | 	mov	result1, objptr
134ac     15 FA 25 F4 | 	bith	result1, #21
134b0     62 00 00 FF 
134b4     3C E4 05 F1 | 	add	objptr, ##50236
134b8     F2 FA 61 FC | 	wrlong	result1, objptr
134bc     62 00 00 FF 
134c0     3C E4 85 F1 | 	sub	objptr, ##50236
134c4     F2 FA 01 F6 | 	mov	result1, objptr
134c8     34 FA 25 F4 | 	bith	result1, #52
134cc     62 00 00 FF 
134d0     40 E4 05 F1 | 	add	objptr, ##50240
134d4     F2 FA 61 FC | 	wrlong	result1, objptr
134d8     62 00 00 FF 
134dc     40 E4 85 F1 | 	sub	objptr, ##50240
134e0     F2 FA 01 F6 | 	mov	result1, objptr
134e4     16 FA 25 F4 | 	bith	result1, #22
134e8     62 00 00 FF 
134ec     48 E4 05 F1 | 	add	objptr, ##50248
134f0     F2 FA 61 FC | 	wrlong	result1, objptr
134f4     62 00 00 FF 
134f8     48 E4 85 F1 | 	sub	objptr, ##50248
134fc     F2 FA 01 F6 | 	mov	result1, objptr
13500     00 28 00 FF 
13504     00 FA 45 F5 | 	or	result1, ##5242880
13508     62 00 00 FF 
1350c     4C E4 05 F1 | 	add	objptr, ##50252
13510     F2 FA 61 FC | 	wrlong	result1, objptr
13514     62 00 00 FF 
13518     4C E4 85 F1 | 	sub	objptr, ##50252
1351c     F2 FA 01 F6 | 	mov	result1, objptr
13520     35 FA 25 F4 | 	bith	result1, #53
13524     62 00 00 FF 
13528     50 E4 05 F1 | 	add	objptr, ##50256
1352c     F2 FA 61 FC | 	wrlong	result1, objptr
13530     62 00 00 FF 
13534     50 E4 85 F1 | 	sub	objptr, ##50256
13538     F2 FA 01 F6 | 	mov	result1, objptr
1353c     54 FA 25 F4 | 	bith	result1, #84
13540     62 00 00 FF 
13544     54 E4 05 F1 | 	add	objptr, ##50260
13548     F2 FA 61 FC | 	wrlong	result1, objptr
1354c     62 00 00 FF 
13550     54 E4 85 F1 | 	sub	objptr, ##50260
13554     F2 FA 01 F6 | 	mov	result1, objptr
13558     17 FA 25 F4 | 	bith	result1, #23
1355c     62 00 00 FF 
13560     58 E4 05 F1 | 	add	objptr, ##50264
13564     F2 FA 61 FC | 	wrlong	result1, objptr
13568     62 00 00 FF 
1356c     58 E4 85 F1 | 	sub	objptr, ##50264
13570     F2 FA 01 F6 | 	mov	result1, objptr
13574     00 48 00 FF 
13578     00 FA 45 F5 | 	or	result1, ##9437184
1357c     62 00 00 FF 
13580     5C E4 05 F1 | 	add	objptr, ##50268
13584     F2 FA 61 FC | 	wrlong	result1, objptr
13588     62 00 00 FF 
1358c     5C E4 85 F1 | 	sub	objptr, ##50268
13590     F2 FA 01 F6 | 	mov	result1, objptr
13594     00 50 00 FF 
13598     00 FA 45 F5 | 	or	result1, ##10485760
1359c     62 00 00 FF 
135a0     60 E4 05 F1 | 	add	objptr, ##50272
135a4     F2 FA 61 FC | 	wrlong	result1, objptr
135a8     62 00 00 FF 
135ac     60 E4 85 F1 | 	sub	objptr, ##50272
135b0     F2 FA 01 F6 | 	mov	result1, objptr
135b4     00 58 00 FF 
135b8     00 FA 45 F5 | 	or	result1, ##11534336
135bc     62 00 00 FF 
135c0     64 E4 05 F1 | 	add	objptr, ##50276
135c4     F2 FA 61 FC | 	wrlong	result1, objptr
135c8     62 00 00 FF 
135cc     64 E4 85 F1 | 	sub	objptr, ##50276
135d0     F2 FA 01 F6 | 	mov	result1, objptr
135d4     36 FA 25 F4 | 	bith	result1, #54
135d8     62 00 00 FF 
135dc     78 E4 05 F1 | 	add	objptr, ##50296
135e0     F2 FA 61 FC | 	wrlong	result1, objptr
135e4     62 00 00 FF 
135e8     78 E4 85 F1 | 	sub	objptr, ##50296
135ec     F2 FA 01 F6 | 	mov	result1, objptr
135f0     00 68 00 FF 
135f4     00 FA 45 F5 | 	or	result1, ##13631488
135f8     62 00 00 FF 
135fc     A8 E4 05 F1 | 	add	objptr, ##50344
13600     F2 FA 61 FC | 	wrlong	result1, objptr
13604     62 00 00 FF 
13608     A8 E4 85 F1 | 	sub	objptr, ##50344
1360c     F2 FA 01 F6 | 	mov	result1, objptr
13610     00 68 00 FF 
13614     00 FA 45 F5 | 	or	result1, ##13631488
13618     62 00 00 FF 
1361c     A4 E4 05 F1 | 	add	objptr, ##50340
13620     F2 FA 61 FC | 	wrlong	result1, objptr
13624     62 00 00 FF 
13628     A4 E4 85 F1 | 	sub	objptr, ##50340
1362c     F2 FA 01 F6 | 	mov	result1, objptr
13630     00 68 00 FF 
13634     00 FA 45 F5 | 	or	result1, ##13631488
13638     62 00 00 FF 
1363c     AC E4 05 F1 | 	add	objptr, ##50348
13640     F2 FA 61 FC | 	wrlong	result1, objptr
13644     62 00 00 FF 
13648     AC E4 85 F1 | 	sub	objptr, ##50348
1364c     F2 FA 01 F6 | 	mov	result1, objptr
13650     00 68 00 FF 
13654     00 FA 45 F5 | 	or	result1, ##13631488
13658     62 00 00 FF 
1365c     B0 E4 05 F1 | 	add	objptr, ##50352
13660     F2 FA 61 FC | 	wrlong	result1, objptr
13664     62 00 00 FF 
13668     B0 E4 85 F1 | 	sub	objptr, ##50352
1366c     F2 FA 01 F6 | 	mov	result1, objptr
13670     00 68 00 FF 
13674     00 FA 45 F5 | 	or	result1, ##13631488
13678     62 00 00 FF 
1367c     E0 E4 05 F1 | 	add	objptr, ##50400
13680     F2 FA 61 FC | 	wrlong	result1, objptr
13684     62 00 00 FF 
13688     E0 E4 85 F1 | 	sub	objptr, ##50400
1368c     F2 FA 01 F6 | 	mov	result1, objptr
13690     55 FA 25 F4 | 	bith	result1, #85
13694     62 00 00 FF 
13698     90 E4 05 F1 | 	add	objptr, ##50320
1369c     F2 FA 61 FC | 	wrlong	result1, objptr
136a0     62 00 00 FF 
136a4     90 E4 85 F1 | 	sub	objptr, ##50320
136a8     F2 FA 01 F6 | 	mov	result1, objptr
136ac     00 68 00 FF 
136b0     00 FA 45 F5 | 	or	result1, ##13631488
136b4     62 00 00 FF 
136b8     B4 E4 05 F1 | 	add	objptr, ##50356
136bc     F2 FA 61 FC | 	wrlong	result1, objptr
136c0     62 00 00 FF 
136c4     B4 E4 85 F1 | 	sub	objptr, ##50356
136c8     F2 FA 01 F6 | 	mov	result1, objptr
136cc     00 68 00 FF 
136d0     00 FA 45 F5 | 	or	result1, ##13631488
136d4     62 00 00 FF 
136d8     B8 E4 05 F1 | 	add	objptr, ##50360
136dc     F2 FA 61 FC | 	wrlong	result1, objptr
136e0     62 00 00 FF 
136e4     B8 E4 85 F1 | 	sub	objptr, ##50360
136e8     F2 FA 01 F6 | 	mov	result1, objptr
136ec     00 68 00 FF 
136f0     00 FA 45 F5 | 	or	result1, ##13631488
136f4     62 00 00 FF 
136f8     BC E4 05 F1 | 	add	objptr, ##50364
136fc     F2 FA 61 FC | 	wrlong	result1, objptr
13700     62 00 00 FF 
13704     BC E4 85 F1 | 	sub	objptr, ##50364
13708     F2 FA 01 F6 | 	mov	result1, objptr
1370c     74 FA 25 F4 | 	bith	result1, #116
13710     62 00 00 FF 
13714     34 E5 05 F1 | 	add	objptr, ##50484
13718     F2 FA 61 FC | 	wrlong	result1, objptr
1371c     62 00 00 FF 
13720     34 E5 85 F1 | 	sub	objptr, ##50484
13724     F2 FA 01 F6 | 	mov	result1, objptr
13728     18 FA 25 F4 | 	bith	result1, #24
1372c     62 00 00 FF 
13730     38 E5 05 F1 | 	add	objptr, ##50488
13734     F2 FA 61 FC | 	wrlong	result1, objptr
13738     62 00 00 FF 
1373c     38 E5 85 F1 | 	sub	objptr, ##50488
13740     F2 FA 01 F6 | 	mov	result1, objptr
13744     00 88 00 FF 
13748     00 FA 45 F5 | 	or	result1, ##17825792
1374c     62 00 00 FF 
13750     3C E5 05 F1 | 	add	objptr, ##50492
13754     F2 FA 61 FC | 	wrlong	result1, objptr
13758     62 00 00 FF 
1375c     3C E5 85 F1 | 	sub	objptr, ##50492
13760     F2 FA 01 F6 | 	mov	result1, objptr
13764     00 90 00 FF 
13768     00 FA 45 F5 | 	or	result1, ##18874368
1376c     62 00 00 FF 
13770     40 E5 05 F1 | 	add	objptr, ##50496
13774     F2 FA 61 FC | 	wrlong	result1, objptr
13778     62 00 00 FF 
1377c     40 E5 85 F1 | 	sub	objptr, ##50496
13780     F2 FA 01 F6 | 	mov	result1, objptr
13784     00 98 00 FF 
13788     00 FA 45 F5 | 	or	result1, ##19922944
1378c     62 00 00 FF 
13790     44 E5 05 F1 | 	add	objptr, ##50500
13794     F2 FA 61 FC | 	wrlong	result1, objptr
13798     62 00 00 FF 
1379c     44 E5 85 F1 | 	sub	objptr, ##50500
137a0     F2 FA 01 F6 | 	mov	result1, objptr
137a4     00 A0 00 FF 
137a8     00 FA 45 F5 | 	or	result1, ##20971520
137ac     62 00 00 FF 
137b0     48 E5 05 F1 | 	add	objptr, ##50504
137b4     F2 FA 61 FC | 	wrlong	result1, objptr
137b8     62 00 00 FF 
137bc     48 E5 85 F1 | 	sub	objptr, ##50504
137c0     F2 FA 01 F6 | 	mov	result1, objptr
137c4     00 A8 00 FF 
137c8     00 FA 45 F5 | 	or	result1, ##22020096
137cc     62 00 00 FF 
137d0     4C E5 05 F1 | 	add	objptr, ##50508
137d4     F2 FA 61 FC | 	wrlong	result1, objptr
137d8     62 00 00 FF 
137dc     4C E5 85 F1 | 	sub	objptr, ##50508
137e0     F2 FA 01 F6 | 	mov	result1, objptr
137e4     00 B0 00 FF 
137e8     00 FA 45 F5 | 	or	result1, ##23068672
137ec     62 00 00 FF 
137f0     50 E5 05 F1 | 	add	objptr, ##50512
137f4     F2 FA 61 FC | 	wrlong	result1, objptr
137f8     62 00 00 FF 
137fc     50 E5 85 F1 | 	sub	objptr, ##50512
13800     F2 FA 01 F6 | 	mov	result1, objptr
13804     00 B8 00 FF 
13808     00 FA 45 F5 | 	or	result1, ##24117248
1380c     62 00 00 FF 
13810     54 E5 05 F1 | 	add	objptr, ##50516
13814     F2 FA 61 FC | 	wrlong	result1, objptr
13818     62 00 00 FF 
1381c     54 E5 85 F1 | 	sub	objptr, ##50516
13820     F2 FA 01 F6 | 	mov	result1, objptr
13824     37 FA 25 F4 | 	bith	result1, #55
13828     62 00 00 FF 
1382c     58 E5 05 F1 | 	add	objptr, ##50520
13830     F2 FA 61 FC | 	wrlong	result1, objptr
13834     62 00 00 FF 
13838     58 E5 85 F1 | 	sub	objptr, ##50520
1383c     F2 FA 01 F6 | 	mov	result1, objptr
13840     00 C8 00 FF 
13844     00 FA 45 F5 | 	or	result1, ##26214400
13848     62 00 00 FF 
1384c     5C E5 05 F1 | 	add	objptr, ##50524
13850     F2 FA 61 FC | 	wrlong	result1, objptr
13854     62 00 00 FF 
13858     5C E5 85 F1 | 	sub	objptr, ##50524
1385c     F2 FA 01 F6 | 	mov	result1, objptr
13860     00 D0 00 FF 
13864     00 FA 45 F5 | 	or	result1, ##27262976
13868     62 00 00 FF 
1386c     60 E5 05 F1 | 	add	objptr, ##50528
13870     F2 FA 61 FC | 	wrlong	result1, objptr
13874     62 00 00 FF 
13878     60 E5 85 F1 | 	sub	objptr, ##50528
1387c     F2 FA 01 F6 | 	mov	result1, objptr
13880     00 D8 00 FF 
13884     00 FA 45 F5 | 	or	result1, ##28311552
13888     62 00 00 FF 
1388c     64 E5 05 F1 | 	add	objptr, ##50532
13890     F2 FA 61 FC | 	wrlong	result1, objptr
13894     62 00 00 FF 
13898     64 E5 85 F1 | 	sub	objptr, ##50532
1389c     F2 FA 01 F6 | 	mov	result1, objptr
138a0     56 FA 25 F4 | 	bith	result1, #86
138a4     62 00 00 FF 
138a8     68 E5 05 F1 | 	add	objptr, ##50536
138ac     F2 FA 61 FC | 	wrlong	result1, objptr
138b0     62 00 00 FF 
138b4     68 E5 85 F1 | 	sub	objptr, ##50536
138b8     F2 FA 01 F6 | 	mov	result1, objptr
138bc     00 E8 00 FF 
138c0     00 FA 45 F5 | 	or	result1, ##30408704
138c4     64 00 00 FF 
138c8     30 E4 05 F1 | 	add	objptr, ##51248
138cc     F2 FA 61 FC | 	wrlong	result1, objptr
138d0     64 00 00 FF 
138d4     30 E4 85 F1 | 	sub	objptr, ##51248
138d8     F2 FA 01 F6 | 	mov	result1, objptr
138dc     75 FA 25 F4 | 	bith	result1, #117
138e0     62 00 00 FF 
138e4     6C E5 05 F1 | 	add	objptr, ##50540
138e8     F2 FA 61 FC | 	wrlong	result1, objptr
138ec     62 00 00 FF 
138f0     6C E5 85 F1 | 	sub	objptr, ##50540
138f4     F2 FA 01 F6 | 	mov	result1, objptr
138f8     94 FA 25 F4 | 	bith	result1, #148
138fc     62 00 00 FF 
13900     80 E5 05 F1 | 	add	objptr, ##50560
13904     F2 FA 61 FC | 	wrlong	result1, objptr
13908     62 00 00 FF 
1390c     80 E5 85 F1 | 	sub	objptr, ##50560
13910     F2 FA 01 F6 | 	mov	result1, objptr
13914     19 FA 25 F4 | 	bith	result1, #25
13918     62 00 00 FF 
1391c     70 E5 05 F1 | 	add	objptr, ##50544
13920     F2 FA 61 FC | 	wrlong	result1, objptr
13924     62 00 00 FF 
13928     70 E5 85 F1 | 	sub	objptr, ##50544
1392c     F2 FA 01 F6 | 	mov	result1, objptr
13930     00 08 01 FF 
13934     00 FA 45 F5 | 	or	result1, ##34603008
13938     62 00 00 FF 
1393c     8C E4 05 F1 | 	add	objptr, ##50316
13940     F2 FA 61 FC | 	wrlong	result1, objptr
13944     62 00 00 FF 
13948     8C E4 85 F1 | 	sub	objptr, ##50316
1394c     F2 FA 01 F6 | 	mov	result1, objptr
13950     00 10 01 FF 
13954     00 FA 45 F5 | 	or	result1, ##35651584
13958     62 00 00 FF 
1395c     74 E5 05 F1 | 	add	objptr, ##50548
13960     F2 FA 61 FC | 	wrlong	result1, objptr
13964     62 00 00 FF 
13968     74 E5 85 F1 | 	sub	objptr, ##50548
1396c     F2 FA 01 F6 | 	mov	result1, objptr
13970     00 18 01 FF 
13974     00 FA 45 F5 | 	or	result1, ##36700160
13978     62 00 00 FF 
1397c     78 E5 05 F1 | 	add	objptr, ##50552
13980     F2 FA 61 FC | 	wrlong	result1, objptr
13984     62 00 00 FF 
13988     78 E5 85 F1 | 	sub	objptr, ##50552
1398c     F2 FA 01 F6 | 	mov	result1, objptr
13990     00 20 01 FF 
13994     00 FA 45 F5 | 	or	result1, ##37748736
13998     62 00 00 FF 
1399c     7C E5 05 F1 | 	add	objptr, ##50556
139a0     F2 FA 61 FC | 	wrlong	result1, objptr
139a4     62 00 00 FF 
139a8     7C E5 85 F1 | 	sub	objptr, ##50556
139ac     F2 FA 01 F6 | 	mov	result1, objptr
139b0     00 28 01 FF 
139b4     00 FA 45 F5 | 	or	result1, ##38797312
139b8     62 00 00 FF 
139bc     88 E5 05 F1 | 	add	objptr, ##50568
139c0     F2 FA 61 FC | 	wrlong	result1, objptr
139c4     62 00 00 FF 
139c8     88 E5 85 F1 | 	sub	objptr, ##50568
139cc     F2 FA 01 F6 | 	mov	result1, objptr
139d0     00 30 01 FF 
139d4     00 FA 45 F5 | 	or	result1, ##39845888
139d8     62 00 00 FF 
139dc     8C E5 05 F1 | 	add	objptr, ##50572
139e0     F2 FA 61 FC | 	wrlong	result1, objptr
139e4     62 00 00 FF 
139e8     8C E5 85 F1 | 	sub	objptr, ##50572
139ec     F2 FA 01 F6 | 	mov	result1, objptr
139f0     00 38 01 FF 
139f4     00 FA 45 F5 | 	or	result1, ##40894464
139f8     62 00 00 FF 
139fc     90 E5 05 F1 | 	add	objptr, ##50576
13a00     F2 FA 61 FC | 	wrlong	result1, objptr
13a04     62 00 00 FF 
13a08     90 E5 85 F1 | 	sub	objptr, ##50576
13a0c     F2 FA 01 F6 | 	mov	result1, objptr
13a10     00 40 01 FF 
13a14     00 FA 45 F5 | 	or	result1, ##41943040
13a18     62 00 00 FF 
13a1c     94 E5 05 F1 | 	add	objptr, ##50580
13a20     F2 FA 61 FC | 	wrlong	result1, objptr
13a24     62 00 00 FF 
13a28     94 E5 85 F1 | 	sub	objptr, ##50580
13a2c     F2 FA 01 F6 | 	mov	result1, objptr
13a30     00 48 01 FF 
13a34     00 FA 45 F5 | 	or	result1, ##42991616
13a38     62 00 00 FF 
13a3c     9C E5 05 F1 | 	add	objptr, ##50588
13a40     F2 FA 61 FC | 	wrlong	result1, objptr
13a44     62 00 00 FF 
13a48     9C E5 85 F1 | 	sub	objptr, ##50588
13a4c     F2 FA 01 F6 | 	mov	result1, objptr
13a50     00 50 01 FF 
13a54     00 FA 45 F5 | 	or	result1, ##44040192
13a58     62 00 00 FF 
13a5c     A0 E5 05 F1 | 	add	objptr, ##50592
13a60     F2 FA 61 FC | 	wrlong	result1, objptr
13a64     62 00 00 FF 
13a68     A0 E5 85 F1 | 	sub	objptr, ##50592
13a6c     F2 FA 01 F6 | 	mov	result1, objptr
13a70     00 58 01 FF 
13a74     00 FA 45 F5 | 	or	result1, ##45088768
13a78     62 00 00 FF 
13a7c     A0 E4 05 F1 | 	add	objptr, ##50336
13a80     F2 FA 61 FC | 	wrlong	result1, objptr
13a84     62 00 00 FF 
13a88     A0 E4 85 F1 | 	sub	objptr, ##50336
13a8c     F2 FA 01 F6 | 	mov	result1, objptr
13a90     00 60 01 FF 
13a94     00 FA 45 F5 | 	or	result1, ##46137344
13a98     62 00 00 FF 
13a9c     D0 E4 05 F1 | 	add	objptr, ##50384
13aa0     F2 FA 61 FC | 	wrlong	result1, objptr
13aa4     62 00 00 FF 
13aa8     D0 E4 85 F1 | 	sub	objptr, ##50384
13aac     F2 FA 01 F6 | 	mov	result1, objptr
13ab0     00 68 01 FF 
13ab4     00 FA 45 F5 | 	or	result1, ##47185920
13ab8     62 00 00 FF 
13abc     CC E4 05 F1 | 	add	objptr, ##50380
13ac0     F2 FA 61 FC | 	wrlong	result1, objptr
13ac4     62 00 00 FF 
13ac8     CC E4 85 F1 | 	sub	objptr, ##50380
13acc     F2 FA 01 F6 | 	mov	result1, objptr
13ad0     00 70 01 FF 
13ad4     00 FA 45 F5 | 	or	result1, ##48234496
13ad8     62 00 00 FF 
13adc     70 E4 05 F1 | 	add	objptr, ##50288
13ae0     F2 FA 61 FC | 	wrlong	result1, objptr
13ae4     62 00 00 FF 
13ae8     70 E4 85 F1 | 	sub	objptr, ##50288
13aec     F2 FA 01 F6 | 	mov	result1, objptr
13af0     00 78 01 FF 
13af4     00 FA 45 F5 | 	or	result1, ##49283072
13af8     62 00 00 FF 
13afc     74 E4 05 F1 | 	add	objptr, ##50292
13b00     F2 FA 61 FC | 	wrlong	result1, objptr
13b04     62 00 00 FF 
13b08     74 E4 85 F1 | 	sub	objptr, ##50292
13b0c     F2 FA 01 F6 | 	mov	result1, objptr
13b10     38 FA 25 F4 | 	bith	result1, #56
13b14     62 00 00 FF 
13b18     DC E4 05 F1 | 	add	objptr, ##50396
13b1c     F2 FA 61 FC | 	wrlong	result1, objptr
13b20     62 00 00 FF 
13b24     DC E4 85 F1 | 	sub	objptr, ##50396
13b28     F2 FA 01 F6 | 	mov	result1, objptr
13b2c     00 88 01 FF 
13b30     00 FA 45 F5 | 	or	result1, ##51380224
13b34     62 00 00 FF 
13b38     84 E5 05 F1 | 	add	objptr, ##50564
13b3c     F2 FA 61 FC | 	wrlong	result1, objptr
13b40     62 00 00 FF 
13b44     84 E5 85 F1 | 	sub	objptr, ##50564
13b48     F2 FA 01 F6 | 	mov	result1, objptr
13b4c     00 90 01 FF 
13b50     00 FA 45 F5 | 	or	result1, ##52428800
13b54     62 00 00 FF 
13b58     98 E5 05 F1 | 	add	objptr, ##50584
13b5c     F2 FA 61 FC | 	wrlong	result1, objptr
13b60     62 00 00 FF 
13b64     98 E5 85 F1 | 	sub	objptr, ##50584
13b68     F2 FA 01 F6 | 	mov	result1, objptr
13b6c     00 98 01 FF 
13b70     00 FA 45 F5 | 	or	result1, ##53477376
13b74     62 00 00 FF 
13b78     A4 E5 05 F1 | 	add	objptr, ##50596
13b7c     F2 FA 61 FC | 	wrlong	result1, objptr
13b80     62 00 00 FF 
13b84     A4 E5 85 F1 | 	sub	objptr, ##50596
13b88     F2 FA 01 F6 | 	mov	result1, objptr
13b8c     00 A0 01 FF 
13b90     00 FA 45 F5 | 	or	result1, ##54525952
13b94     62 00 00 FF 
13b98     A8 E5 05 F1 | 	add	objptr, ##50600
13b9c     F2 FA 61 FC | 	wrlong	result1, objptr
13ba0     62 00 00 FF 
13ba4     A8 E5 85 F1 | 	sub	objptr, ##50600
13ba8     F2 FA 01 F6 | 	mov	result1, objptr
13bac     00 A8 01 FF 
13bb0     00 FA 45 F5 | 	or	result1, ##55574528
13bb4     62 00 00 FF 
13bb8     AC E5 05 F1 | 	add	objptr, ##50604
13bbc     F2 FA 61 FC | 	wrlong	result1, objptr
13bc0     62 00 00 FF 
13bc4     AC E5 85 F1 | 	sub	objptr, ##50604
13bc8     F2 FA 01 F6 | 	mov	result1, objptr
13bcc     00 B0 01 FF 
13bd0     00 FA 45 F5 | 	or	result1, ##56623104
13bd4     62 00 00 FF 
13bd8     B0 E5 05 F1 | 	add	objptr, ##50608
13bdc     F2 FA 61 FC | 	wrlong	result1, objptr
13be0     62 00 00 FF 
13be4     B0 E5 85 F1 | 	sub	objptr, ##50608
13be8     F2 FA 01 F6 | 	mov	result1, objptr
13bec     00 B8 01 FF 
13bf0     00 FA 45 F5 | 	or	result1, ##57671680
13bf4     62 00 00 FF 
13bf8     B4 E5 05 F1 | 	add	objptr, ##50612
13bfc     F2 FA 61 FC | 	wrlong	result1, objptr
13c00     62 00 00 FF 
13c04     B4 E5 85 F1 | 	sub	objptr, ##50612
13c08     F2 FA 01 F6 | 	mov	result1, objptr
13c0c     57 FA 25 F4 | 	bith	result1, #87
13c10     62 00 00 FF 
13c14     B8 E5 05 F1 | 	add	objptr, ##50616
13c18     F2 FA 61 FC | 	wrlong	result1, objptr
13c1c     62 00 00 FF 
13c20     B8 E5 85 F1 | 	sub	objptr, ##50616
13c24     F2 FA 01 F6 | 	mov	result1, objptr
13c28     94 FA 25 F4 | 	bith	result1, #148
13c2c     62 00 00 FF 
13c30     80 E5 05 F1 | 	add	objptr, ##50560
13c34     F2 FA 61 FC | 	wrlong	result1, objptr
13c38     62 00 00 FF 
13c3c     80 E5 85 F1 | 	sub	objptr, ##50560
13c40     F2 FA 01 F6 | 	mov	result1, objptr
13c44     00 C8 01 FF 
13c48     00 FA 45 F5 | 	or	result1, ##59768832
13c4c     62 00 00 FF 
13c50     C0 E5 05 F1 | 	add	objptr, ##50624
13c54     F2 FA 61 FC | 	wrlong	result1, objptr
13c58     62 00 00 FF 
13c5c     C0 E5 85 F1 | 	sub	objptr, ##50624
13c60     F2 FA 01 F6 | 	mov	result1, objptr
13c64     00 D0 01 FF 
13c68     00 FA 45 F5 | 	or	result1, ##60817408
13c6c     62 00 00 FF 
13c70     BC E5 05 F1 | 	add	objptr, ##50620
13c74     F2 FA 61 FC | 	wrlong	result1, objptr
13c78     62 00 00 FF 
13c7c     BC E5 85 F1 | 	sub	objptr, ##50620
13c80     F2 FA 01 F6 | 	mov	result1, objptr
13c84     00 D8 01 FF 
13c88     00 FA 45 F5 | 	or	result1, ##61865984
13c8c     62 00 00 FF 
13c90     D4 E5 05 F1 | 	add	objptr, ##50644
13c94     F2 FA 61 FC | 	wrlong	result1, objptr
13c98     62 00 00 FF 
13c9c     D4 E5 85 F1 | 	sub	objptr, ##50644
13ca0     F2 FA 01 F6 | 	mov	result1, objptr
13ca4     76 FA 25 F4 | 	bith	result1, #118
13ca8     62 00 00 FF 
13cac     D8 E5 05 F1 | 	add	objptr, ##50648
13cb0     F2 FA 61 FC | 	wrlong	result1, objptr
13cb4     62 00 00 FF 
13cb8     D8 E5 85 F1 | 	sub	objptr, ##50648
13cbc     F2 FA 01 F6 | 	mov	result1, objptr
13cc0     00 E8 01 FF 
13cc4     00 FA 45 F5 | 	or	result1, ##63963136
13cc8     62 00 00 FF 
13ccc     C4 E5 05 F1 | 	add	objptr, ##50628
13cd0     F2 FA 61 FC | 	wrlong	result1, objptr
13cd4     62 00 00 FF 
13cd8     C4 E5 85 F1 | 	sub	objptr, ##50628
13cdc     F2 FA 01 F6 | 	mov	result1, objptr
13ce0     95 FA 25 F4 | 	bith	result1, #149
13ce4     62 00 00 FF 
13ce8     C8 E5 05 F1 | 	add	objptr, ##50632
13cec     F2 FA 61 FC | 	wrlong	result1, objptr
13cf0     62 00 00 FF 
13cf4     C8 E5 85 F1 | 	sub	objptr, ##50632
13cf8     F2 FA 01 F6 | 	mov	result1, objptr
13cfc     B4 FA 25 F4 | 	bith	result1, #180
13d00     62 00 00 FF 
13d04     CC E5 05 F1 | 	add	objptr, ##50636
13d08     F2 FA 61 FC | 	wrlong	result1, objptr
13d0c     62 00 00 FF 
13d10     CC E5 85 F1 | 	sub	objptr, ##50636
13d14     F2 FA 01 F6 | 	mov	result1, objptr
13d18     1A FA 25 F4 | 	bith	result1, #26
13d1c     62 00 00 FF 
13d20     D0 E5 05 F1 | 	add	objptr, ##50640
13d24     F2 FA 61 FC | 	wrlong	result1, objptr
13d28     62 00 00 FF 
13d2c     D0 E5 85 F1 | 	sub	objptr, ##50640
13d30     F2 FA 01 F6 | 	mov	result1, objptr
13d34     00 08 02 FF 
13d38     00 FA 45 F5 | 	or	result1, ##68157440
13d3c     62 00 00 FF 
13d40     E0 E5 05 F1 | 	add	objptr, ##50656
13d44     F2 FA 61 FC | 	wrlong	result1, objptr
13d48     62 00 00 FF 
13d4c     E0 E5 85 F1 | 	sub	objptr, ##50656
13d50     F2 FA 01 F6 | 	mov	result1, objptr
13d54     00 10 02 FF 
13d58     00 FA 45 F5 | 	or	result1, ##69206016
13d5c     62 00 00 FF 
13d60     DC E5 05 F1 | 	add	objptr, ##50652
13d64     F2 FA 61 FC | 	wrlong	result1, objptr
13d68     62 00 00 FF 
13d6c     DC E5 85 F1 | 	sub	objptr, ##50652
13d70     F2 FA 01 F6 | 	mov	result1, objptr
13d74     00 18 02 FF 
13d78     00 FA 45 F5 | 	or	result1, ##70254592
13d7c     62 00 00 FF 
13d80     EC E5 05 F1 | 	add	objptr, ##50668
13d84     F2 FA 61 FC | 	wrlong	result1, objptr
13d88     62 00 00 FF 
13d8c     EC E5 85 F1 | 	sub	objptr, ##50668
13d90     F2 FA 01 F6 | 	mov	result1, objptr
13d94     00 20 02 FF 
13d98     00 FA 45 F5 | 	or	result1, ##71303168
13d9c     62 00 00 FF 
13da0     E8 E5 05 F1 | 	add	objptr, ##50664
13da4     F2 FA 61 FC | 	wrlong	result1, objptr
13da8     62 00 00 FF 
13dac     E8 E5 85 F1 | 	sub	objptr, ##50664
13db0     F2 FA 01 F6 | 	mov	result1, objptr
13db4     00 28 02 FF 
13db8     00 FA 45 F5 | 	or	result1, ##72351744
13dbc     62 00 00 FF 
13dc0     E4 E5 05 F1 | 	add	objptr, ##50660
13dc4     F2 FA 61 FC | 	wrlong	result1, objptr
13dc8     62 00 00 FF 
13dcc     E4 E5 85 F1 | 	sub	objptr, ##50660
13dd0     F2 FA 01 F6 | 	mov	result1, objptr
13dd4     00 30 02 FF 
13dd8     00 FA 45 F5 | 	or	result1, ##73400320
13ddc     62 00 00 FF 
13de0     F0 E5 05 F1 | 	add	objptr, ##50672
13de4     F2 FA 61 FC | 	wrlong	result1, objptr
13de8     62 00 00 FF 
13dec     F0 E5 85 F1 | 	sub	objptr, ##50672
13df0     F2 FA 01 F6 | 	mov	result1, objptr
13df4     00 38 02 FF 
13df8     00 FA 45 F5 | 	or	result1, ##74448896
13dfc     62 00 00 FF 
13e00     F4 E5 05 F1 | 	add	objptr, ##50676
13e04     F2 FA 61 FC | 	wrlong	result1, objptr
13e08     62 00 00 FF 
13e0c     F4 E5 85 F1 | 	sub	objptr, ##50676
13e10     F2 FA 01 F6 | 	mov	result1, objptr
13e14     00 40 02 FF 
13e18     00 FA 45 F5 | 	or	result1, ##75497472
13e1c     62 00 00 FF 
13e20     88 E4 05 F1 | 	add	objptr, ##50312
13e24     F2 FA 61 FC | 	wrlong	result1, objptr
13e28     62 00 00 FF 
13e2c     88 E4 85 F1 | 	sub	objptr, ##50312
13e30     F2 FA 01 F6 | 	mov	result1, objptr
13e34     00 48 02 FF 
13e38     00 FA 45 F5 | 	or	result1, ##76546048
13e3c     63 00 00 FF 
13e40     0C E4 05 F1 | 	add	objptr, ##50700
13e44     F2 FA 61 FC | 	wrlong	result1, objptr
13e48     63 00 00 FF 
13e4c     0C E4 85 F1 | 	sub	objptr, ##50700
13e50     F2 FA 01 F6 | 	mov	result1, objptr
13e54     00 50 02 FF 
13e58     00 FA 45 F5 | 	or	result1, ##77594624
13e5c     63 00 00 FF 
13e60     1C E4 05 F1 | 	add	objptr, ##50716
13e64     F2 FA 61 FC | 	wrlong	result1, objptr
13e68     63 00 00 FF 
13e6c     1C E4 85 F1 | 	sub	objptr, ##50716
13e70     F2 FA 01 F6 | 	mov	result1, objptr
13e74     00 58 02 FF 
13e78     00 FA 45 F5 | 	or	result1, ##78643200
13e7c     63 00 00 FF 
13e80     20 E4 05 F1 | 	add	objptr, ##50720
13e84     F2 FA 61 FC | 	wrlong	result1, objptr
13e88     63 00 00 FF 
13e8c     20 E4 85 F1 | 	sub	objptr, ##50720
13e90     F2 FA 01 F6 | 	mov	result1, objptr
13e94     00 60 02 FF 
13e98     00 FA 45 F5 | 	or	result1, ##79691776
13e9c     63 00 00 FF 
13ea0     18 E4 05 F1 | 	add	objptr, ##50712
13ea4     F2 FA 61 FC | 	wrlong	result1, objptr
13ea8     63 00 00 FF 
13eac     18 E4 85 F1 | 	sub	objptr, ##50712
13eb0     F2 FA 01 F6 | 	mov	result1, objptr
13eb4     00 68 02 FF 
13eb8     00 FA 45 F5 | 	or	result1, ##80740352
13ebc     63 00 00 FF 
13ec0     10 E4 05 F1 | 	add	objptr, ##50704
13ec4     F2 FA 61 FC | 	wrlong	result1, objptr
13ec8     63 00 00 FF 
13ecc     10 E4 85 F1 | 	sub	objptr, ##50704
13ed0     F2 FA 01 F6 | 	mov	result1, objptr
13ed4     00 70 02 FF 
13ed8     00 FA 45 F5 | 	or	result1, ##81788928
13edc     63 00 00 FF 
13ee0     14 E4 05 F1 | 	add	objptr, ##50708
13ee4     F2 FA 61 FC | 	wrlong	result1, objptr
13ee8     63 00 00 FF 
13eec     14 E4 85 F1 | 	sub	objptr, ##50708
13ef0     F2 FA 01 F6 | 	mov	result1, objptr
13ef4     00 78 02 FF 
13ef8     00 FA 45 F5 | 	or	result1, ##82837504
13efc     63 00 00 FF 
13f00     24 E4 05 F1 | 	add	objptr, ##50724
13f04     F2 FA 61 FC | 	wrlong	result1, objptr
13f08     63 00 00 FF 
13f0c     24 E4 85 F1 | 	sub	objptr, ##50724
13f10     F2 FA 01 F6 | 	mov	result1, objptr
13f14     00 80 02 FF 
13f18     00 FA 45 F5 | 	or	result1, ##83886080
13f1c     63 00 00 FF 
13f20     28 E4 05 F1 | 	add	objptr, ##50728
13f24     F2 FA 61 FC | 	wrlong	result1, objptr
13f28     63 00 00 FF 
13f2c     28 E4 85 F1 | 	sub	objptr, ##50728
13f30     F2 FA 01 F6 | 	mov	result1, objptr
13f34     00 88 02 FF 
13f38     00 FA 45 F5 | 	or	result1, ##84934656
13f3c     63 00 00 FF 
13f40     2C E4 05 F1 | 	add	objptr, ##50732
13f44     F2 FA 61 FC | 	wrlong	result1, objptr
13f48     63 00 00 FF 
13f4c     2C E4 85 F1 | 	sub	objptr, ##50732
13f50     F2 FA 01 F6 | 	mov	result1, objptr
13f54     00 90 02 FF 
13f58     00 FA 45 F5 | 	or	result1, ##85983232
13f5c     63 00 00 FF 
13f60     30 E4 05 F1 | 	add	objptr, ##50736
13f64     F2 FA 61 FC | 	wrlong	result1, objptr
13f68     63 00 00 FF 
13f6c     30 E4 85 F1 | 	sub	objptr, ##50736
13f70     F2 FA 01 F6 | 	mov	result1, objptr
13f74     00 98 02 FF 
13f78     00 FA 45 F5 | 	or	result1, ##87031808
13f7c     63 00 00 FF 
13f80     34 E4 05 F1 | 	add	objptr, ##50740
13f84     F2 FA 61 FC | 	wrlong	result1, objptr
13f88     63 00 00 FF 
13f8c     34 E4 85 F1 | 	sub	objptr, ##50740
13f90     F2 FA 01 F6 | 	mov	result1, objptr
13f94     00 A0 02 FF 
13f98     00 FA 45 F5 | 	or	result1, ##88080384
13f9c     63 00 00 FF 
13fa0     38 E4 05 F1 | 	add	objptr, ##50744
13fa4     F2 FA 61 FC | 	wrlong	result1, objptr
13fa8     63 00 00 FF 
13fac     38 E4 85 F1 | 	sub	objptr, ##50744
13fb0     F2 FA 01 F6 | 	mov	result1, objptr
13fb4     00 A8 02 FF 
13fb8     00 FA 45 F5 | 	or	result1, ##89128960
13fbc     62 00 00 FF 
13fc0     F8 E5 05 F1 | 	add	objptr, ##50680
13fc4     F2 FA 61 FC | 	wrlong	result1, objptr
13fc8     62 00 00 FF 
13fcc     F8 E5 85 F1 | 	sub	objptr, ##50680
13fd0     F2 FA 01 F6 | 	mov	result1, objptr
13fd4     00 B0 02 FF 
13fd8     00 FA 45 F5 | 	or	result1, ##90177536
13fdc     63 00 00 FF 
13fe0     00 E4 05 F1 | 	add	objptr, ##50688
13fe4     F2 FA 61 FC | 	wrlong	result1, objptr
13fe8     63 00 00 FF 
13fec     00 E4 85 F1 | 	sub	objptr, ##50688
13ff0     F2 FA 01 F6 | 	mov	result1, objptr
13ff4     00 B8 02 FF 
13ff8     00 FA 45 F5 | 	or	result1, ##91226112
13ffc     63 00 00 FF 
14000     04 E4 05 F1 | 	add	objptr, ##50692
14004     F2 FA 61 FC | 	wrlong	result1, objptr
14008     63 00 00 FF 
1400c     04 E4 85 F1 | 	sub	objptr, ##50692
14010                 | _init_commands_ret
14010     2D 00 64 FD | 	ret
14014                 | 
14014                 | ' 
14014                 | ' ''--------------------------------Error strings -------------------------------------
14014                 | ' 
14014                 | ' sub init_error_strings
14014                 | _init_error_strings
14014     36 01 00 FF 
14018     EB 01 06 F6 | 	mov	_var01, ##@LR__4441
1401c     64 00 00 FF 
14020     50 E4 05 F1 | 	add	objptr, ##51280
14024     F2 00 62 FC | 	wrlong	_var01, objptr
14028     36 01 00 FF 
1402c     EC 01 06 F6 | 	mov	_var01, ##@LR__4442
14030     04 E4 05 F1 | 	add	objptr, #4
14034     F2 00 62 FC | 	wrlong	_var01, objptr
14038     37 01 00 FF 
1403c     11 00 06 F6 | 	mov	_var01, ##@LR__4443
14040     04 E4 05 F1 | 	add	objptr, #4
14044     F2 00 62 FC | 	wrlong	_var01, objptr
14048     37 01 00 FF 
1404c     32 00 06 F6 | 	mov	_var01, ##@LR__4444
14050     04 E4 05 F1 | 	add	objptr, #4
14054     F2 00 62 FC | 	wrlong	_var01, objptr
14058     37 01 00 FF 
1405c     4C 00 06 F6 | 	mov	_var01, ##@LR__4445
14060     04 E4 05 F1 | 	add	objptr, #4
14064     F2 00 62 FC | 	wrlong	_var01, objptr
14068     37 01 00 FF 
1406c     68 00 06 F6 | 	mov	_var01, ##@LR__4446
14070     04 E4 05 F1 | 	add	objptr, #4
14074     F2 00 62 FC | 	wrlong	_var01, objptr
14078     37 01 00 FF 
1407c     8A 00 06 F6 | 	mov	_var01, ##@LR__4447
14080     04 E4 05 F1 | 	add	objptr, #4
14084     F2 00 62 FC | 	wrlong	_var01, objptr
14088     37 01 00 FF 
1408c     B8 00 06 F6 | 	mov	_var01, ##@LR__4448
14090     04 E4 05 F1 | 	add	objptr, #4
14094     F2 00 62 FC | 	wrlong	_var01, objptr
14098     37 01 00 FF 
1409c     E3 00 06 F6 | 	mov	_var01, ##@LR__4449
140a0     04 E4 05 F1 | 	add	objptr, #4
140a4     F2 00 62 FC | 	wrlong	_var01, objptr
140a8     37 01 00 FF 
140ac     FC 00 06 F6 | 	mov	_var01, ##@LR__4450
140b0     04 E4 05 F1 | 	add	objptr, #4
140b4     F2 00 62 FC | 	wrlong	_var01, objptr
140b8     37 01 00 FF 
140bc     1D 01 06 F6 | 	mov	_var01, ##@LR__4451
140c0     04 E4 05 F1 | 	add	objptr, #4
140c4     F2 00 62 FC | 	wrlong	_var01, objptr
140c8     37 01 00 FF 
140cc     34 01 06 F6 | 	mov	_var01, ##@LR__4452
140d0     04 E4 05 F1 | 	add	objptr, #4
140d4     F2 00 62 FC | 	wrlong	_var01, objptr
140d8     37 01 00 FF 
140dc     52 01 06 F6 | 	mov	_var01, ##@LR__4453
140e0     04 E4 05 F1 | 	add	objptr, #4
140e4     F2 00 62 FC | 	wrlong	_var01, objptr
140e8     37 01 00 FF 
140ec     76 01 06 F6 | 	mov	_var01, ##@LR__4454
140f0     04 E4 05 F1 | 	add	objptr, #4
140f4     F2 00 62 FC | 	wrlong	_var01, objptr
140f8     37 01 00 FF 
140fc     9D 01 06 F6 | 	mov	_var01, ##@LR__4455
14100     04 E4 05 F1 | 	add	objptr, #4
14104     F2 00 62 FC | 	wrlong	_var01, objptr
14108     37 01 00 FF 
1410c     B9 01 06 F6 | 	mov	_var01, ##@LR__4456
14110     04 E4 05 F1 | 	add	objptr, #4
14114     F2 00 62 FC | 	wrlong	_var01, objptr
14118     37 01 00 FF 
1411c     CA 01 06 F6 | 	mov	_var01, ##@LR__4457
14120     04 E4 05 F1 | 	add	objptr, #4
14124     F2 00 62 FC | 	wrlong	_var01, objptr
14128     37 01 00 FF 
1412c     DA 01 06 F6 | 	mov	_var01, ##@LR__4458
14130     04 E4 05 F1 | 	add	objptr, #4
14134     F2 00 62 FC | 	wrlong	_var01, objptr
14138     37 01 00 FF 
1413c     F5 01 06 F6 | 	mov	_var01, ##@LR__4459
14140     04 E4 05 F1 | 	add	objptr, #4
14144     F2 00 62 FC | 	wrlong	_var01, objptr
14148     38 01 00 FF 
1414c     07 00 06 F6 | 	mov	_var01, ##@LR__4460
14150     04 E4 05 F1 | 	add	objptr, #4
14154     F2 00 62 FC | 	wrlong	_var01, objptr
14158     38 01 00 FF 
1415c     1F 00 06 F6 | 	mov	_var01, ##@LR__4461
14160     04 E4 05 F1 | 	add	objptr, #4
14164     F2 00 62 FC | 	wrlong	_var01, objptr
14168     38 01 00 FF 
1416c     33 00 06 F6 | 	mov	_var01, ##@LR__4462
14170     04 E4 05 F1 | 	add	objptr, #4
14174     F2 00 62 FC | 	wrlong	_var01, objptr
14178     38 01 00 FF 
1417c     43 00 06 F6 | 	mov	_var01, ##@LR__4463
14180     04 E4 05 F1 | 	add	objptr, #4
14184     F2 00 62 FC | 	wrlong	_var01, objptr
14188     38 01 00 FF 
1418c     60 00 06 F6 | 	mov	_var01, ##@LR__4464
14190     04 E4 05 F1 | 	add	objptr, #4
14194     F2 00 62 FC | 	wrlong	_var01, objptr
14198     38 01 00 FF 
1419c     71 00 06 F6 | 	mov	_var01, ##@LR__4465
141a0     04 E4 05 F1 | 	add	objptr, #4
141a4     F2 00 62 FC | 	wrlong	_var01, objptr
141a8     38 01 00 FF 
141ac     82 00 06 F6 | 	mov	_var01, ##@LR__4466
141b0     04 E4 05 F1 | 	add	objptr, #4
141b4     F2 00 62 FC | 	wrlong	_var01, objptr
141b8     38 01 00 FF 
141bc     AD 00 06 F6 | 	mov	_var01, ##@LR__4467
141c0     04 E4 05 F1 | 	add	objptr, #4
141c4     F2 00 62 FC | 	wrlong	_var01, objptr
141c8     38 01 00 FF 
141cc     C9 00 06 F6 | 	mov	_var01, ##@LR__4468
141d0     04 E4 05 F1 | 	add	objptr, #4
141d4     F2 00 62 FC | 	wrlong	_var01, objptr
141d8     38 01 00 FF 
141dc     DF 00 06 F6 | 	mov	_var01, ##@LR__4469
141e0     04 E4 05 F1 | 	add	objptr, #4
141e4     F2 00 62 FC | 	wrlong	_var01, objptr
141e8     38 01 00 FF 
141ec     EC 00 06 F6 | 	mov	_var01, ##@LR__4470
141f0     04 E4 05 F1 | 	add	objptr, #4
141f4     F2 00 62 FC | 	wrlong	_var01, objptr
141f8     38 01 00 FF 
141fc     FE 00 06 F6 | 	mov	_var01, ##@LR__4471
14200     04 E4 05 F1 | 	add	objptr, #4
14204     F2 00 62 FC | 	wrlong	_var01, objptr
14208     38 01 00 FF 
1420c     0F 01 06 F6 | 	mov	_var01, ##@LR__4472
14210     04 E4 05 F1 | 	add	objptr, #4
14214     F2 00 62 FC | 	wrlong	_var01, objptr
14218     38 01 00 FF 
1421c     2B 01 06 F6 | 	mov	_var01, ##@LR__4473
14220     04 E4 05 F1 | 	add	objptr, #4
14224     F2 00 62 FC | 	wrlong	_var01, objptr
14228     38 01 00 FF 
1422c     3C 01 06 F6 | 	mov	_var01, ##@LR__4474
14230     04 E4 05 F1 | 	add	objptr, #4
14234     F2 00 62 FC | 	wrlong	_var01, objptr
14238     38 01 00 FF 
1423c     4B 01 06 F6 | 	mov	_var01, ##@LR__4475
14240     04 E4 05 F1 | 	add	objptr, #4
14244     F2 00 62 FC | 	wrlong	_var01, objptr
14248     38 01 00 FF 
1424c     66 01 06 F6 | 	mov	_var01, ##@LR__4476
14250     04 E4 05 F1 | 	add	objptr, #4
14254     F2 00 62 FC | 	wrlong	_var01, objptr
14258     38 01 00 FF 
1425c     9A 01 06 F6 | 	mov	_var01, ##@LR__4477
14260     04 E4 05 F1 | 	add	objptr, #4
14264     F2 00 62 FC | 	wrlong	_var01, objptr
14268     38 01 00 FF 
1426c     B3 01 06 F6 | 	mov	_var01, ##@LR__4478
14270     04 E4 05 F1 | 	add	objptr, #4
14274     F2 00 62 FC | 	wrlong	_var01, objptr
14278     38 01 00 FF 
1427c     CF 01 06 F6 | 	mov	_var01, ##@LR__4479
14280     04 E4 05 F1 | 	add	objptr, #4
14284     F2 00 62 FC | 	wrlong	_var01, objptr
14288     38 01 00 FF 
1428c     ED 01 06 F6 | 	mov	_var01, ##@LR__4480
14290     04 E4 05 F1 | 	add	objptr, #4
14294     F2 00 62 FC | 	wrlong	_var01, objptr
14298     39 01 00 FF 
1429c     06 00 06 F6 | 	mov	_var01, ##@LR__4481
142a0     04 E4 05 F1 | 	add	objptr, #4
142a4     F2 00 62 FC | 	wrlong	_var01, objptr
142a8     39 01 00 FF 
142ac     25 00 06 F6 | 	mov	_var01, ##@LR__4482
142b0     04 E4 05 F1 | 	add	objptr, #4
142b4     F2 00 62 FC | 	wrlong	_var01, objptr
142b8     39 01 00 FF 
142bc     34 00 06 F6 | 	mov	_var01, ##@LR__4483
142c0     04 E4 05 F1 | 	add	objptr, #4
142c4     F2 00 62 FC | 	wrlong	_var01, objptr
142c8     39 01 00 FF 
142cc     62 00 06 F6 | 	mov	_var01, ##@LR__4484
142d0     04 E4 05 F1 | 	add	objptr, #4
142d4     F2 00 62 FC | 	wrlong	_var01, objptr
142d8     39 01 00 FF 
142dc     70 00 06 F6 | 	mov	_var01, ##@LR__4485
142e0     04 E4 05 F1 | 	add	objptr, #4
142e4     F2 00 62 FC | 	wrlong	_var01, objptr
142e8     39 01 00 FF 
142ec     85 00 06 F6 | 	mov	_var01, ##@LR__4486
142f0     04 E4 05 F1 | 	add	objptr, #4
142f4     F2 00 62 FC | 	wrlong	_var01, objptr
142f8     39 01 00 FF 
142fc     A9 00 06 F6 | 	mov	_var01, ##@LR__4487
14300     04 E4 05 F1 | 	add	objptr, #4
14304     F2 00 62 FC | 	wrlong	_var01, objptr
14308     39 01 00 FF 
1430c     C0 00 06 F6 | 	mov	_var01, ##@LR__4488
14310     04 E4 05 F1 | 	add	objptr, #4
14314     F2 00 62 FC | 	wrlong	_var01, objptr
14318     39 01 00 FF 
1431c     D3 00 06 F6 | 	mov	_var01, ##@LR__4489
14320     04 E4 05 F1 | 	add	objptr, #4
14324     F2 00 62 FC | 	wrlong	_var01, objptr
14328     64 00 00 FF 
1432c     10 E5 85 F1 | 	sub	objptr, ##51472
14330                 | _init_error_strings_ret
14330     2D 00 64 FD | 	ret
14334                 | 
14334                 | '         
14334                 | ' sub printerror(err as integer)
14334                 | _printerror
14334     01 4A 05 F6 | 	mov	COUNT_, #1
14338     A8 00 A0 FD | 	call	#pushregs_
1433c     09 1F 02 F6 | 	mov	local01, arg01
14340     39 01 00 FF 
14344     EA 12 06 F6 | 	mov	arg01, ##@LR__4490
14348     E4 24 B0 FD | 	call	#_hg010b_spin2_write
1434c     0F 13 02 F6 | 	mov	arg01, local01
14350     DC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
14354     FD 12 02 F6 | 	mov	arg01, result1
14358     D4 24 B0 FD | 	call	#_hg010b_spin2_write
1435c     39 01 00 FF 
14360     F1 12 06 F6 | 	mov	arg01, ##@LR__4491
14364     C8 24 B0 FD | 	call	#_hg010b_spin2_write
14368     02 1E 66 F0 | 	shl	local01, #2
1436c     64 00 00 FF 
14370     50 E4 05 F1 | 	add	objptr, ##51280
14374     F2 1E 02 F1 | 	add	local01, objptr
14378     0F 13 02 FB | 	rdlong	arg01, local01
1437c     64 00 00 FF 
14380     50 E4 85 F1 | 	sub	objptr, ##51280
14384                 | ' 
14384                 | ' write(text)
14384     A8 24 B0 FD | 	call	#_hg010b_spin2_write
14388                 | ' crlf
14388     04 26 B0 FD | 	call	#_hg010b_spin2_crlf
1438c     A7 F0 03 F6 | 	mov	ptra, fp
14390     B2 00 A0 FD | 	call	#popregs_
14394                 | _printerror_ret
14394     2D 00 64 FD | 	ret
14398                 | 
14398                 | ' 
14398                 | ' '' ------------------------------- Hardware start/stop/initialization 
14398                 | ' 
14398                 | ' sub startpsram
14398                 | _startpsram
14398     00 12 06 F6 | 	mov	arg01, #0
1439c     0A 14 C6 F9 | 	decod	arg02, #10
143a0     0B 16 06 F6 | 	mov	arg03, #11
143a4     07 18 06 F6 | 	mov	arg04, #7
143a8     0B 00 00 FF 
143ac     C0 E4 05 F1 | 	add	objptr, ##5824
143b0     88 27 B0 FD | 	call	#_psram_spin2_startx
143b4     4A 00 00 FF 
143b8     1C E5 05 F1 | 	add	objptr, ##38172
143bc     F2 FA 61 FC | 	wrlong	result1, objptr
143c0                 | '     return $7FF00 + cog*12
143c0     0C E4 05 F1 | 	add	objptr, #12
143c4     FF 03 80 FF 
143c8     F2 00 6A FC | 	wrlong	##524032, objptr
143cc     55 00 00 FF 
143d0     E8 E5 85 F1 | 	sub	objptr, ##44008
143d4                 | _startpsram_ret
143d4     2D 00 64 FD | 	ret
143d8                 | 
143d8                 | ' 
143d8                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
143d8                 | _startvideo
143d8     01 4A 05 F6 | 	mov	COUNT_, #1
143dc     A8 00 A0 FD | 	call	#pushregs_
143e0     55 00 00 FF 
143e4     E8 E5 05 F1 | 	add	objptr, ##44008
143e8     F2 18 02 FB | 	rdlong	arg04, objptr
143ec     55 00 00 FF 
143f0     E8 E5 85 F1 | 	sub	objptr, ##44008
143f4     0A 13 02 F6 | 	mov	arg01, arg02
143f8     0C 15 02 F6 | 	mov	arg02, arg04
143fc     50 0F B0 FD | 	call	#_hg010b_spin2_start
14400     55 00 00 FF 
14404     D4 E5 05 F1 | 	add	objptr, ##43988
14408     F2 FA 61 FC | 	wrlong	result1, objptr
1440c                 | ' 
1440c                 | ' videocog=v.start(pin,mbox)
1440c                 | ' 
1440c                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1440c     00 1E 06 F6 | 	mov	local01, #0
14410     4A 00 00 FF 
14414     14 E5 85 F1 | 	sub	objptr, ##38164
14418                 | LR__1580
14418     0F 13 02 F6 | 	mov	arg01, local01
1441c     00 28 00 FF 
14420     00 14 06 F6 | 	mov	arg02, ##5242880
14424     6C 2B B0 FD | 	call	#_psram_spin2_setQos
14428     01 1E 06 F1 | 	add	local01, #1
1442c     08 1E 56 F2 | 	cmps	local01, #8 wc
14430     E4 FF 9F CD |  if_b	jmp	#LR__1580
14434     4A 00 00 FF 
14438     14 E5 05 F1 | 	add	objptr, ##38164
1443c     F2 12 02 FB | 	rdlong	arg01, objptr
14440     7A 00 02 FF 
14444     00 14 06 F6 | 	mov	arg02, ##67171328
14448     4A 00 00 FF 
1444c     14 E5 85 F1 | 	sub	objptr, ##38164
14450     40 2B B0 FD | 	call	#_psram_spin2_setQos
14454     0B 00 00 FF 
14458     C0 E4 85 F1 | 	sub	objptr, ##5824
1445c                 | ' psram.setQoS(videocog, $0400f400) 
1445c                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1445c     F2 14 02 F6 | 	mov	arg02, objptr
14460     00 C0 02 FF 
14464     00 14 46 F5 | 	or	arg02, ##92274688
14468     00 16 06 F6 | 	mov	arg03, #0
1446c     00 18 06 F6 | 	mov	arg04, #0
14470     00 12 06 F6 | 	mov	arg01, #0
14474     88 3E B0 FD | 	call	#__system___basic_open
14478                 | ' return videocog
14478     55 00 00 FF 
1447c     D4 E5 05 F1 | 	add	objptr, ##43988
14480     F2 FA 01 FB | 	rdlong	result1, objptr
14484     55 00 00 FF 
14488     D4 E5 85 F1 | 	sub	objptr, ##43988
1448c     A7 F0 03 F6 | 	mov	ptra, fp
14490     B2 00 A0 FD | 	call	#popregs_
14494                 | _startvideo_ret
14494     2D 00 64 FD | 	ret
14498                 | 
14498                 | ' 
14498                 | ' function pspeek(adr as ulong) as ubyte
14498                 | _pspeek
14498     00 4A 05 F6 | 	mov	COUNT_, #0
1449c     A8 00 A0 FD | 	call	#pushregs_
144a0     0C F0 07 F1 | 	add	ptra, #12
144a4     04 4E 05 F1 | 	add	fp, #4
144a8     A7 12 62 FC | 	wrlong	arg01, fp
144ac     04 4E 05 F1 | 	add	fp, #4
144b0     A7 12 02 F6 | 	mov	arg01, fp
144b4     04 4E 85 F1 | 	sub	fp, #4
144b8     A7 14 02 FB | 	rdlong	arg02, fp
144bc     04 4E 85 F1 | 	sub	fp, #4
144c0     01 16 06 F6 | 	mov	arg03, #1
144c4     0B 00 00 FF 
144c8     C0 E4 05 F1 | 	add	objptr, ##5824
144cc     98 28 B0 FD | 	call	#_psram_spin2_read1
144d0     0B 00 00 FF 
144d4     C0 E4 85 F1 | 	sub	objptr, ##5824
144d8                 | ' psram.read1(varptr(res),adr,1)
144d8                 | ' return res
144d8     08 4E 05 F1 | 	add	fp, #8
144dc     A7 FA C1 FA | 	rdbyte	result1, fp
144e0     08 4E 85 F1 | 	sub	fp, #8
144e4     A7 F0 03 F6 | 	mov	ptra, fp
144e8     B2 00 A0 FD | 	call	#popregs_
144ec                 | _pspeek_ret
144ec     2D 00 64 FD | 	ret
144f0                 | 
144f0                 | ' 
144f0                 | ' function pslpeek(adr as ulong) as ulong
144f0                 | _pslpeek
144f0     00 4A 05 F6 | 	mov	COUNT_, #0
144f4     A8 00 A0 FD | 	call	#pushregs_
144f8     0C F0 07 F1 | 	add	ptra, #12
144fc     04 4E 05 F1 | 	add	fp, #4
14500     A7 12 62 FC | 	wrlong	arg01, fp
14504     04 4E 05 F1 | 	add	fp, #4
14508     A7 12 02 F6 | 	mov	arg01, fp
1450c     04 4E 85 F1 | 	sub	fp, #4
14510     A7 14 02 FB | 	rdlong	arg02, fp
14514     04 4E 85 F1 | 	sub	fp, #4
14518     04 16 06 F6 | 	mov	arg03, #4
1451c     0B 00 00 FF 
14520     C0 E4 05 F1 | 	add	objptr, ##5824
14524     40 28 B0 FD | 	call	#_psram_spin2_read1
14528     0B 00 00 FF 
1452c     C0 E4 85 F1 | 	sub	objptr, ##5824
14530                 | ' psram.read1(varptr(res),adr,4)
14530                 | ' return res
14530     08 4E 05 F1 | 	add	fp, #8
14534     A7 FA 01 FB | 	rdlong	result1, fp
14538     08 4E 85 F1 | 	sub	fp, #8
1453c     A7 F0 03 F6 | 	mov	ptra, fp
14540     B2 00 A0 FD | 	call	#popregs_
14544                 | _pslpeek_ret
14544     2D 00 64 FD | 	ret
14548                 | 
14548                 | ' 
14548                 | ' '' ------------------------------- USB keyboard scan to char translator
14548                 | ' 
14548                 | ' function scantochar(key)
14548                 | _scantochar
14548                 | ' 
14548                 | ' select case (key shr 8) and 255
14548     09 01 02 F6 | 	mov	_var01, arg01
1454c     08 00 C6 F0 | 	sar	_var01, #8
14550     FF 00 0E F5 | 	and	_var01, #255 wz
14554     24 00 90 AD |  if_e	jmp	#LR__1590
14558     02 00 0E F2 | 	cmp	_var01, #2 wz
1455c     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
14560     30 00 90 AD |  if_e	jmp	#LR__1591
14564     40 00 0E F2 | 	cmp	_var01, #64 wz
14568     44 00 90 AD |  if_e	jmp	#LR__1592
1456c     42 00 0E F2 | 	cmp	_var01, #66 wz
14570     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
14574     70 00 90 5D |  if_ne	jmp	#LR__1594
14578     50 00 90 FD | 	jmp	#LR__1593
1457c                 | LR__1590
1457c     09 FB 01 F6 | 	mov	result1, arg01
14580     7F FA 05 F5 | 	and	result1, #127
14584     02 FA 65 F0 | 	shl	result1, #2
14588     F5 FA 01 F1 | 	add	result1, ptr__dat__
1458c     FD FA C1 FA | 	rdbyte	result1, result1
14590     54 00 90 FD | 	jmp	#_scantochar_ret
14594                 | LR__1591
14594     09 FB 01 F6 | 	mov	result1, arg01
14598     7F FA 05 F5 | 	and	result1, #127
1459c     02 FA 65 F0 | 	shl	result1, #2
145a0     01 FA 05 F1 | 	add	result1, #1
145a4     F5 FA 01 F1 | 	add	result1, ptr__dat__
145a8     FD FA C1 FA | 	rdbyte	result1, result1
145ac     38 00 90 FD | 	jmp	#_scantochar_ret
145b0                 | LR__1592
145b0     09 FB 01 F6 | 	mov	result1, arg01
145b4     7F FA 05 F5 | 	and	result1, #127
145b8     02 FA 65 F0 | 	shl	result1, #2
145bc     02 FA 05 F1 | 	add	result1, #2
145c0     F5 FA 01 F1 | 	add	result1, ptr__dat__
145c4     FD FA C1 FA | 	rdbyte	result1, result1
145c8     1C 00 90 FD | 	jmp	#_scantochar_ret
145cc                 | LR__1593
145cc     09 FB 01 F6 | 	mov	result1, arg01
145d0     7F FA 05 F5 | 	and	result1, #127
145d4     02 FA 65 F0 | 	shl	result1, #2
145d8     03 FA 05 F1 | 	add	result1, #3
145dc     F5 FA 01 F1 | 	add	result1, ptr__dat__
145e0     FD FA C1 FA | 	rdbyte	result1, result1
145e4     00 00 90 FD | 	jmp	#_scantochar_ret
145e8                 | LR__1594
145e8                 | _scantochar_ret
145e8     2D 00 64 FD | 	ret
145ec                 | 
145ec                 | _program
145ec     0B 4A 05 F6 | 	mov	COUNT_, #11
145f0     A8 00 A0 FD | 	call	#pushregs_
145f4     A0 FD BF FD | 	call	#_startpsram
145f8     40 12 06 F6 | 	mov	arg01, #64
145fc     00 14 06 F6 | 	mov	arg02, #0
14600     00 16 06 F6 | 	mov	arg03, #0
14604     D0 FD BF FD | 	call	#_startvideo
14608     00 12 06 F6 | 	mov	arg01, #0
1460c     00 14 06 F6 | 	mov	arg02, #0
14610     00 16 06 F6 | 	mov	arg03, #0
14614     0B 00 00 FF 
14618     C0 E4 05 F1 | 	add	objptr, ##5824
1461c     88 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
14620     FE 1C 02 F6 | 	mov	arg06, result2
14624     4A 00 00 FF 
14628     10 E5 05 F1 | 	add	objptr, ##38160
1462c     F2 FA 61 FC | 	wrlong	result1, objptr
14630     14 E4 05 F1 | 	add	objptr, #20
14634     F2 1C 62 FC | 	wrlong	arg06, objptr
14638     55 00 00 FF 
1463c     E4 E5 85 F1 | 	sub	objptr, ##44004
14640     32 12 06 F6 | 	mov	arg01, #50
14644     04 35 B0 FD | 	call	#__system___waitms
14648     55 00 00 FF 
1464c     E4 E5 05 F1 | 	add	objptr, ##44004
14650     F2 12 02 FB | 	rdlong	arg01, objptr
14654     55 00 00 FF 
14658     E4 E5 85 F1 | 	sub	objptr, ##44004
1465c     14 12 06 F1 | 	add	arg01, #20
14660     20 00 80 FF 
14664     09 01 58 FC | 	wrword	##16384, arg01
14668     30 2A B0 FD | 	call	#_usbnew_spin2_start
1466c     55 00 00 FF 
14670     D8 E5 05 F1 | 	add	objptr, ##43992
14674     F2 FA 61 FC | 	wrlong	result1, objptr
14678                 | '   mouse_limits[0] := xlim
14678     0F 00 00 FF 
1467c     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
14680     01 00 80 FF 
14684     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
14688                 | '   mouse_limits[1] := ylim
14688     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1468c     01 00 80 FF 
14690     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
14694     55 00 00 FF 
14698     CB E4 85 F1 | 	sub	objptr, ##43723
1469c     F2 12 02 F6 | 	mov	arg01, objptr
146a0     0D E5 85 F1 | 	sub	objptr, #269
146a4     C4 12 06 F1 | 	add	arg01, #196
146a8                 | '   mouse_outptr := ptr
146a8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
146ac     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
146b0     0F 00 00 FF 
146b4     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
146b8     0E 00 00 FF 
146bc     9A EA 05 F1 | 	add	ptr__dat__, ##7322
146c0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
146c4     0E 00 00 FF 
146c8     9A EA 85 F1 | 	sub	ptr__dat__, ##7322
146cc     10 12 06 F6 | 	mov	arg01, #16
146d0     74 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
146d4     10 12 06 F6 | 	mov	arg01, #16
146d8     20 14 06 F6 | 	mov	arg02, #32
146dc     20 16 06 F6 | 	mov	arg03, #32
146e0     D8 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
146e4     09 12 C6 F9 | 	decod	arg01, #9
146e8     20 15 06 F6 | 	mov	arg02, #288
146ec     68 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
146f0     F2 1C 02 F6 | 	mov	arg06, objptr
146f4     78 00 00 FF 
146f8     BC E5 05 F1 | 	add	objptr, ##61884
146fc     F2 1A 02 F6 | 	mov	arg05, objptr
14700     0D 1D 62 FC | 	wrlong	arg06, arg05
14704     04 1A 06 F1 | 	add	arg05, #4
14708     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
1470c     EF 14 02 F6 | 	mov	arg02, entryptr__
14710     F2 1E 02 F6 | 	mov	local01, objptr
14714     1E FA 05 F6 | 	mov	result1, #30
14718     28 1E 62 FD | 	setq	local01
1471c     0A FB F1 FC | 	coginit	result1, arg02 wc
14720     01 FA 65 C6 |  if_b	neg	result1, #1
14724     04 E4 85 F1 | 	sub	objptr, #4
14728     F2 FA 61 FC | 	wrlong	result1, objptr
1472c     01 00 00 FF 
14730     90 E4 05 F1 | 	add	objptr, ##656
14734     F2 00 68 FC | 	wrlong	#0, objptr
14738     24 00 00 FF 
1473c     40 E4 85 F1 | 	sub	objptr, ##18496
14740     F2 04 68 FC | 	wrlong	#2, objptr
14744     04 E4 05 F1 | 	add	objptr, #4
14748     F2 26 69 FC | 	wrlong	#147, objptr
1474c     04 E4 05 F1 | 	add	objptr, #4
14750     F2 34 69 FC | 	wrlong	#154, objptr
14754     04 E4 05 F1 | 	add	objptr, #4
14758     F2 08 68 FC | 	wrlong	#4, objptr
1475c     04 E4 85 F1 | 	sub	objptr, #4
14760     F2 1C 02 FB | 	rdlong	arg06, objptr
14764     14 E4 85 F1 | 	sub	objptr, #20
14768     F2 1C 62 FC | 	wrlong	arg06, objptr
1476c     04 E4 05 F1 | 	add	objptr, #4
14770     F2 00 68 FC | 	wrlong	#0, objptr
14774     04 E4 05 F1 | 	add	objptr, #4
14778     F2 00 68 FC | 	wrlong	#0, objptr
1477c     22 00 00 FF 
14780     B0 E5 05 F1 | 	add	objptr, ##17840
14784     F2 02 68 FC | 	wrlong	#1, objptr
14788     01 00 00 FF 
1478c     9C E4 05 F1 | 	add	objptr, ##668
14790     F2 00 68 FC | 	wrlong	#0, objptr
14794     01 00 00 FF 
14798     00 EA 05 F1 | 	add	ptr__dat__, ##512
1479c     08 E4 05 F1 | 	add	objptr, #8
147a0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
147a4     04 E4 85 F1 | 	sub	objptr, #4
147a8     03 00 80 FF 
147ac     F2 28 69 FC | 	wrlong	##1684, objptr
147b0     16 00 00 FF 
147b4     1C E4 85 F1 | 	sub	objptr, ##11292
147b8     F2 18 68 FC | 	wrlong	#12, objptr
147bc     64 00 00 FF 
147c0     38 E4 85 F1 | 	sub	objptr, ##51256
147c4     01 00 00 FF 
147c8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
147cc     88 EC BF FD | 	call	#_init_commands
147d0     40 F8 BF FD | 	call	#_init_error_strings
147d4     58 6F BF FD | 	call	#_do_new
147d8     56 00 00 FF 
147dc     10 E4 05 F1 | 	add	objptr, ##44048
147e0     F2 12 02 FB | 	rdlong	arg01, objptr
147e4     04 E4 85 F1 | 	sub	objptr, #4
147e8     F2 14 02 FB | 	rdlong	arg02, objptr
147ec     56 00 00 FF 
147f0     0C E4 85 F1 | 	sub	objptr, ##44044
147f4     7C 1D B0 FD | 	call	#_hg010b_spin2_cls
147f8     56 00 00 FF 
147fc     14 E4 05 F1 | 	add	objptr, ##44052
14800     F2 12 02 FB | 	rdlong	arg01, objptr
14804     56 00 00 FF 
14808     14 E4 85 F1 | 	sub	objptr, ##44052
1480c     7C 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
14810                 | ' 
14810                 | ' leading_spaces:=amount
14810     01 00 00 FF 
14814     B2 E4 05 F1 | 	add	objptr, ##690
14818     F2 04 68 FC | 	wrlong	#2, objptr
1481c     01 00 00 FF 
14820     B2 E4 85 F1 | 	sub	objptr, ##690
14824     39 01 00 FF 
14828     F4 20 06 F6 | 	mov	local02, ##@LR__4492
1482c     3D 12 06 F6 | 	mov	arg01, #61
14830     3C 14 06 F6 | 	mov	arg02, #60
14834     3B 16 06 F6 | 	mov	arg03, #59
14838     3A 18 06 F6 | 	mov	arg04, #58
1483c     C8 75 B0 FD | 	call	#__system___vfs_open_sdcardx
14840     FD 14 02 F6 | 	mov	arg02, result1
14844     10 13 02 F6 | 	mov	arg01, local02
14848     D8 33 B0 FD | 	call	#__system___mount
1484c     39 01 00 FF 
14850     F8 12 06 F6 | 	mov	arg01, ##@LR__4493
14854     8C 36 B0 FD | 	call	#__system___chdir
14858     39 01 00 FF 
1485c     00 21 06 F6 | 	mov	local02, ##@LR__4494
14860     71 00 00 FF 
14864     68 E4 05 F1 | 	add	objptr, ##57960
14868     F2 20 62 FC | 	wrlong	local02, objptr
1486c     1B 00 00 FF 
14870     60 E4 85 F1 | 	sub	objptr, ##13920
14874     F2 12 02 FB | 	rdlong	arg01, objptr
14878     56 00 00 FF 
1487c     08 E4 85 F1 | 	sub	objptr, ##44040
14880     01 12 66 F0 | 	shl	arg01, #1
14884     01 14 06 F6 | 	mov	arg02, #1
14888     40 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
1488c                 | ' 
1488c                 | ' init_commands
1488c                 | ' init_error_strings
1488c                 | ' do_new
1488c                 | ' 
1488c                 | ' 
1488c                 | ' cls(ink, paper)
1488c                 | ' 'v.setfontfamily(4) 				' use ST Mono font
1488c                 | ' v.setfontfamily(font) 				' use ST Mono font
1488c                 | ' v.setleadingspaces(2)
1488c                 | ' mount "/sd", _vfs_open_sdcard()
1488c                 | ' chdir "/sd/bas"
1488c                 | ' 
1488c                 | ' currentdir$="/sd/bas"
1488c                 | ' 
1488c                 | ' position 2*editor_spaces,1 : print ver$
1488c     00 12 06 F6 | 	mov	arg01, #0
14890     DC 84 B0 FD | 	call	#__system___getiolock_0383
14894     FD 12 02 F6 | 	mov	arg01, result1
14898     BC 2F B0 FD | 	call	#__system___lockmem
1489c     10 00 00 FF 
148a0     10 EB 05 F1 | 	add	ptr__dat__, ##8464
148a4     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
148a8     10 00 00 FF 
148ac     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
148b0     00 12 06 F6 | 	mov	arg01, #0
148b4     00 16 06 F6 | 	mov	arg03, #0
148b8     90 3C B0 FD | 	call	#__system___basic_print_string
148bc     00 12 06 F6 | 	mov	arg01, #0
148c0     0A 14 06 F6 | 	mov	arg02, #10
148c4     00 16 06 F6 | 	mov	arg03, #0
148c8     28 3C B0 FD | 	call	#__system___basic_print_char
148cc     00 12 06 F6 | 	mov	arg01, #0
148d0     9C 84 B0 FD | 	call	#__system___getiolock_0383
148d4     FD 00 68 FC | 	wrlong	#0, result1
148d8     F2 12 02 FB | 	rdlong	arg01, objptr
148dc     00 14 06 F6 | 	mov	arg02, #0
148e0     0A 16 06 F6 | 	mov	arg03, #10
148e4     78 51 B0 FD | 	call	#__system__Number_S
148e8     FD 12 02 F6 | 	mov	arg01, result1
148ec     39 01 00 FF 
148f0     08 15 06 F6 | 	mov	arg02, ##@LR__4495
148f4     BC 2F B0 FD | 	call	#__system___string_concat
148f8     FD 20 02 F6 | 	mov	local02, result1
148fc     78 00 00 FF 
14900     B0 E5 05 F1 | 	add	objptr, ##61872
14904     F2 20 62 FC | 	wrlong	local02, objptr
14908     78 00 00 FF 
1490c     B0 E5 85 F1 | 	sub	objptr, ##61872
14910                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
14910     00 12 06 F6 | 	mov	arg01, #0
14914     58 84 B0 FD | 	call	#__system___getiolock_0383
14918     FD 12 02 F6 | 	mov	arg01, result1
1491c     38 2F B0 FD | 	call	#__system___lockmem
14920     78 00 00 FF 
14924     B0 E5 05 F1 | 	add	objptr, ##61872
14928     F2 14 02 FB | 	rdlong	arg02, objptr
1492c     78 00 00 FF 
14930     B0 E5 85 F1 | 	sub	objptr, ##61872
14934     00 12 06 F6 | 	mov	arg01, #0
14938     00 16 06 F6 | 	mov	arg03, #0
1493c     0C 3C B0 FD | 	call	#__system___basic_print_string
14940     00 12 06 F6 | 	mov	arg01, #0
14944     0A 14 06 F6 | 	mov	arg02, #10
14948     00 16 06 F6 | 	mov	arg03, #0
1494c     A4 3B B0 FD | 	call	#__system___basic_print_char
14950     00 12 06 F6 | 	mov	arg01, #0
14954     18 84 B0 FD | 	call	#__system___getiolock_0383
14958     FD 00 68 FC | 	wrlong	#0, result1
1495c     56 00 00 FF 
14960     08 E4 05 F1 | 	add	objptr, ##44040
14964     F2 12 02 FB | 	rdlong	arg01, objptr
14968     56 00 00 FF 
1496c     08 E4 85 F1 | 	sub	objptr, ##44040
14970     01 12 66 F0 | 	shl	arg01, #1
14974     04 14 06 F6 | 	mov	arg02, #4
14978     50 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
1497c                 | ' position 2*editor_spaces,4 : print "Ready"
1497c     00 12 06 F6 | 	mov	arg01, #0
14980     EC 83 B0 FD | 	call	#__system___getiolock_0383
14984     FD 12 02 F6 | 	mov	arg01, result1
14988     CC 2E B0 FD | 	call	#__system___lockmem
1498c     39 01 00 FF 
14990     1A 15 06 F6 | 	mov	arg02, ##@LR__4496
14994     00 12 06 F6 | 	mov	arg01, #0
14998     00 16 06 F6 | 	mov	arg03, #0
1499c     AC 3B B0 FD | 	call	#__system___basic_print_string
149a0     FD 22 02 F6 | 	mov	local03, result1
149a4     00 12 06 F6 | 	mov	arg01, #0
149a8     0A 14 06 F6 | 	mov	arg02, #10
149ac     00 16 06 F6 | 	mov	arg03, #0
149b0     40 3B B0 FD | 	call	#__system___basic_print_char
149b4     01 24 06 F6 | 	mov	local04, #1
149b8     00 12 06 F6 | 	mov	arg01, #0
149bc     B0 83 B0 FD | 	call	#__system___getiolock_0383
149c0     FD 00 68 FC | 	wrlong	#0, result1
149c4     00 26 06 F6 | 	mov	local05, #0
149c8     00 14 06 F6 | 	mov	arg02, #0
149cc     01 14 D6 F7 | 	test	arg02, #1 wc
149d0     5A 4C 64 FD | 	drvc	#38
149d4     01 14 D6 F7 | 	test	arg02, #1 wc
149d8     5A 4E 64 FD | 	drvc	#39
149dc                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
149dc                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
149dc                 | ' 
149dc                 | ' '-------------------------------------------------------------------------------------------------------- 
149dc                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
149dc                 | ' '--------------------------------------------------------------------------------------------------------
149dc                 | ' 
149dc                 | ' do
149dc                 | LR__1600
149dc     01 12 06 F6 | 	mov	arg01, #1
149e0     20 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
149e4     10 27 B0 FD | 	call	#_usbnew_spin2_get_key
149e8     64 00 00 FF 
149ec     48 E4 05 F1 | 	add	objptr, ##51272
149f0     F2 FA 61 FC | 	wrlong	result1, objptr
149f4                 | '   return hkbd_led_rep
149f4     13 00 00 FF 
149f8     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
149fc     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
14a00     13 00 00 FF 
14a04     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
14a08     16 00 00 FF 
14a0c     14 E4 05 F1 | 	add	objptr, ##11284
14a10     F2 FA 61 FC | 	wrlong	result1, objptr
14a14                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
14a14     16 00 00 FF 
14a18     14 E4 85 F1 | 	sub	objptr, ##11284
14a1c     F2 20 02 FB | 	rdlong	local02, objptr
14a20     64 00 00 FF 
14a24     48 E4 85 F1 | 	sub	objptr, ##51272
14a28     01 20 16 F2 | 	cmp	local02, #1 wc
14a2c     BC 00 90 CD |  if_b	jmp	#LR__1601
14a30     64 00 00 FF 
14a34     48 E4 05 F1 | 	add	objptr, ##51272
14a38     F2 24 02 FB | 	rdlong	local04, objptr
14a3c     64 00 00 FF 
14a40     48 E4 85 F1 | 	sub	objptr, ##51272
14a44     12 23 02 F6 | 	mov	local03, local04
14a48     04 22 16 F2 | 	cmp	local03, #4 wc
14a4c     9C 00 90 3D |  if_ae	jmp	#LR__1601
14a50     78 00 00 FF 
14a54     B4 E5 05 F1 | 	add	objptr, ##61876
14a58     F2 1E 02 FB | 	rdlong	local01, objptr
14a5c     78 00 00 FF 
14a60     B4 E5 85 F1 | 	sub	objptr, ##61876
14a64     0F 27 02 F6 | 	mov	local05, local01
14a68     01 26 0E F2 | 	cmp	local05, #1 wz
14a6c     7C 00 90 5D |  if_ne	jmp	#LR__1601
14a70     04 00 00 FF 
14a74     94 EA 05 F1 | 	add	ptr__dat__, ##2196
14a78     F5 14 02 F6 | 	mov	arg02, ptr__dat__
14a7c     04 00 00 FF 
14a80     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
14a84     56 00 00 FF 
14a88     44 22 06 F6 | 	mov	local03, ##44100
14a8c     0E 24 C6 F9 | 	decod	local04, #14
14a90     00 26 06 F6 | 	mov	local05, #0
14a94     03 00 00 FF 
14a98     DE 1E 06 F6 | 	mov	local01, ##1758
14a9c     07 12 06 F6 | 	mov	arg01, #7
14aa0     56 00 00 FF 
14aa4     44 16 06 F6 | 	mov	arg03, ##44100
14aa8     0E 18 C6 F9 | 	decod	arg04, #14
14aac     00 1A 06 F6 | 	mov	arg05, #0
14ab0     03 00 00 FF 
14ab4     DE 1C 06 F6 | 	mov	arg06, ##1758
14ab8     0B 00 00 FF 
14abc     C0 E4 05 F1 | 	add	objptr, ##5824
14ac0     5C 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
14ac4     0B 00 00 FF 
14ac8     C0 E4 85 F1 | 	sub	objptr, ##5824
14acc     0A 12 06 F6 | 	mov	arg01, #10
14ad0     78 30 B0 FD | 	call	#__system___waitms
14ad4     07 12 06 F6 | 	mov	arg01, #7
14ad8     0B 00 00 FF 
14adc     C0 E4 05 F1 | 	add	objptr, ##5824
14ae0     8C 2A B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
14ae4     0B 00 00 FF 
14ae8     C0 E4 85 F1 | 	sub	objptr, ##5824
14aec                 | LR__1601
14aec                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
14aec     64 00 00 FF 
14af0     48 E4 05 F1 | 	add	objptr, ##51272
14af4     F2 20 02 FB | 	rdlong	local02, objptr
14af8     64 00 00 FF 
14afc     48 E4 85 F1 | 	sub	objptr, ##51272
14b00     04 20 16 F2 | 	cmp	local02, #4 wc
14b04     80 00 90 CD |  if_b	jmp	#LR__1602
14b08     64 00 00 FF 
14b0c     48 E4 05 F1 | 	add	objptr, ##51272
14b10     F2 24 02 FB | 	rdlong	local04, objptr
14b14     64 00 00 FF 
14b18     48 E4 85 F1 | 	sub	objptr, ##51272
14b1c     12 23 02 F6 | 	mov	local03, local04
14b20     00 00 40 FF 
14b24     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
14b28     64 00 00 CF 
14b2c     48 E4 05 C1 |  if_b	add	objptr, ##51272
14b30     F2 1E 02 CB |  if_b	rdlong	local01, objptr
14b34     64 00 00 CF 
14b38     48 E4 85 C1 |  if_b	sub	objptr, ##51272
14b3c     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
14b40     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
14b44     40 00 90 3D |  if_ae	jmp	#LR__1602
14b48     64 00 00 FF 
14b4c     48 E4 05 F1 | 	add	objptr, ##51272
14b50     F2 20 02 FB | 	rdlong	local02, objptr
14b54     04 E4 05 F1 | 	add	objptr, #4
14b58     F2 20 62 FC | 	wrlong	local02, objptr
14b5c     16 00 00 FF 
14b60     14 E4 05 F1 | 	add	objptr, ##11284
14b64     F2 02 68 FC | 	wrlong	#1, objptr
14b68     16 00 00 FF 
14b6c     14 E4 85 F1 | 	sub	objptr, ##11284
14b70     F2 20 02 FB | 	rdlong	local02, objptr
14b74     16 00 00 FF 
14b78     18 E4 05 F1 | 	add	objptr, ##11288
14b7c     F2 20 62 FC | 	wrlong	local02, objptr
14b80     7A 00 00 FF 
14b84     64 E4 85 F1 | 	sub	objptr, ##62564
14b88                 | LR__1602
14b88                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
14b88     64 00 00 FF 
14b8c     48 E4 05 F1 | 	add	objptr, ##51272
14b90     F2 20 02 FB | 	rdlong	local02, objptr
14b94     64 00 00 FF 
14b98     48 E4 85 F1 | 	sub	objptr, ##51272
14b9c     00 00 40 FF 
14ba0     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
14ba4     7A 00 00 3F 
14ba8     68 E4 05 31 |  if_ae	add	objptr, ##62568
14bac     F2 00 68 3C |  if_ae	wrlong	#0, objptr
14bb0     08 E4 85 31 |  if_ae	sub	objptr, #8
14bb4     F2 00 68 3C |  if_ae	wrlong	#0, objptr
14bb8     7A 00 00 3F 
14bbc     60 E4 85 31 |  if_ae	sub	objptr, ##62560
14bc0                 | ' if key=0 andalso rpt=1 then rptcnt+=1
14bc0     64 00 00 FF 
14bc4     48 E4 05 F1 | 	add	objptr, ##51272
14bc8     F2 20 0A FB | 	rdlong	local02, objptr wz
14bcc     64 00 00 FF 
14bd0     48 E4 85 F1 | 	sub	objptr, ##51272
14bd4     7A 00 00 AF 
14bd8     60 E4 05 A1 |  if_e	add	objptr, ##62560
14bdc     F2 24 02 AB |  if_e	rdlong	local04, objptr
14be0     7A 00 00 AF 
14be4     60 E4 85 A1 |  if_e	sub	objptr, ##62560
14be8     12 23 02 A6 |  if_e	mov	local03, local04
14bec     01 22 0E A2 |  if_e	cmp	local03, #1 wz
14bf0     7A 00 00 AF 
14bf4     68 E4 05 A1 |  if_e	add	objptr, ##62568
14bf8     F2 20 02 AB |  if_e	rdlong	local02, objptr
14bfc     01 20 06 A1 |  if_e	add	local02, #1
14c00     F2 20 62 AC |  if_e	wrlong	local02, objptr
14c04     7A 00 00 AF 
14c08     68 E4 85 A1 |  if_e	sub	objptr, ##62568
14c0c                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
14c0c     64 00 00 FF 
14c10     48 E4 05 F1 | 	add	objptr, ##51272
14c14     F2 20 02 FB | 	rdlong	local02, objptr
14c18     64 00 00 FF 
14c1c     48 E4 85 F1 | 	sub	objptr, ##51272
14c20     00 00 40 FF 
14c24     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
14c28     44 00 90 3D |  if_ae	jmp	#LR__1604
14c2c     7A 00 00 FF 
14c30     68 E4 05 F1 | 	add	objptr, ##62568
14c34     F2 20 02 FB | 	rdlong	local02, objptr
14c38     7A 00 00 FF 
14c3c     68 E4 85 F1 | 	sub	objptr, ##62568
14c40     19 20 0E F2 | 	cmp	local02, #25 wz
14c44     28 00 90 5D |  if_ne	jmp	#LR__1603
14c48     64 00 00 FF 
14c4c     4C E4 05 F1 | 	add	objptr, ##51276
14c50     F2 20 02 FB | 	rdlong	local02, objptr
14c54     16 00 00 FF 
14c58     18 E4 05 F1 | 	add	objptr, ##11288
14c5c     F2 20 62 FC | 	wrlong	local02, objptr
14c60     04 E4 05 F1 | 	add	objptr, #4
14c64     F2 2A 68 FC | 	wrlong	#21, objptr
14c68     7A 00 00 FF 
14c6c     68 E4 85 F1 | 	sub	objptr, ##62568
14c70                 | LR__1603
14c70                 | LR__1604
14c70                 | ' 
14c70                 | ' 
14c70                 | ' if key3<>0 then
14c70     7A 00 00 FF 
14c74     64 E4 05 F1 | 	add	objptr, ##62564
14c78     F2 28 0A FB | 	rdlong	local06, objptr wz
14c7c     7A 00 00 FF 
14c80     64 E4 85 F1 | 	sub	objptr, ##62564
14c84     54 FD 9F AD |  if_e	jmp	#LR__1600
14c88                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
14c88     78 00 00 FF 
14c8c     B4 E5 05 F1 | 	add	objptr, ##61876
14c90     F2 20 02 FB | 	rdlong	local02, objptr
14c94     78 00 00 FF 
14c98     B4 E5 85 F1 | 	sub	objptr, ##61876
14c9c     01 20 0E F2 | 	cmp	local02, #1 wz
14ca0     50 00 90 5D |  if_ne	jmp	#LR__1605
14ca4     7A 00 00 FF 
14ca8     58 E4 05 F1 | 	add	objptr, ##62552
14cac     F2 14 02 FB | 	rdlong	arg02, objptr
14cb0     56 00 00 FF 
14cb4     44 22 06 F6 | 	mov	local03, ##44100
14cb8     0E 24 C6 F9 | 	decod	local04, #14
14cbc     04 E4 85 F1 | 	sub	objptr, #4
14cc0     F2 26 02 FB | 	rdlong	local05, objptr
14cc4     01 1E 66 F6 | 	neg	local01, #1
14cc8     07 12 06 F6 | 	mov	arg01, #7
14ccc     56 00 00 FF 
14cd0     44 16 06 F6 | 	mov	arg03, ##44100
14cd4     0E 18 C6 F9 | 	decod	arg04, #14
14cd8     13 1B 02 F6 | 	mov	arg05, local05
14cdc     01 1C 66 F6 | 	neg	arg06, #1
14ce0     6E 00 00 FF 
14ce4     94 E5 85 F1 | 	sub	objptr, ##56724
14ce8     34 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
14cec     0B 00 00 FF 
14cf0     C0 E4 85 F1 | 	sub	objptr, ##5824
14cf4                 | LR__1605
14cf4     7A 00 00 FF 
14cf8     64 E4 05 F1 | 	add	objptr, ##62564
14cfc     F2 12 02 FB | 	rdlong	arg01, objptr
14d00     7A 00 00 FF 
14d04     64 E4 85 F1 | 	sub	objptr, ##62564
14d08     3C F8 BF FD | 	call	#_scantochar
14d0c     7A 00 00 FF 
14d10     6C E4 05 F1 | 	add	objptr, ##62572
14d14     F2 FA 61 FC | 	wrlong	result1, objptr
14d18                 | '   if leds and 2 = 2 then 
14d18     10 E4 85 F1 | 	sub	objptr, #16
14d1c     F2 20 0A FB | 	rdlong	local02, objptr wz
14d20     7A 00 00 FF 
14d24     5C E4 85 F1 | 	sub	objptr, ##62556
14d28     68 01 90 AD |  if_e	jmp	#LR__1613
14d2c                 | '     if key4>96 andalso key4<123 then
14d2c     7A 00 00 FF 
14d30     6C E4 05 F1 | 	add	objptr, ##62572
14d34     F2 20 02 FB | 	rdlong	local02, objptr
14d38     7A 00 00 FF 
14d3c     6C E4 85 F1 | 	sub	objptr, ##62572
14d40     61 20 56 F2 | 	cmps	local02, #97 wc
14d44     40 00 90 CD |  if_b	jmp	#LR__1606
14d48     7A 00 00 FF 
14d4c     6C E4 05 F1 | 	add	objptr, ##62572
14d50     F2 24 02 FB | 	rdlong	local04, objptr
14d54     7A 00 00 FF 
14d58     6C E4 85 F1 | 	sub	objptr, ##62572
14d5c     12 23 02 F6 | 	mov	local03, local04
14d60     7B 22 56 F2 | 	cmps	local03, #123 wc
14d64     20 00 90 3D |  if_ae	jmp	#LR__1606
14d68     7A 00 00 FF 
14d6c     6C E4 05 F1 | 	add	objptr, ##62572
14d70     F2 20 02 FB | 	rdlong	local02, objptr
14d74     20 20 86 F1 | 	sub	local02, #32
14d78     F2 20 62 FC | 	wrlong	local02, objptr
14d7c     7A 00 00 FF 
14d80     6C E4 85 F1 | 	sub	objptr, ##62572
14d84     0C 01 90 FD | 	jmp	#LR__1612
14d88                 | LR__1606
14d88     7A 00 00 FF 
14d8c     6C E4 05 F1 | 	add	objptr, ##62572
14d90     F2 20 02 FB | 	rdlong	local02, objptr
14d94     7A 00 00 FF 
14d98     6C E4 85 F1 | 	sub	objptr, ##62572
14d9c     41 20 56 F2 | 	cmps	local02, #65 wc
14da0     40 00 90 CD |  if_b	jmp	#LR__1607
14da4     7A 00 00 FF 
14da8     6C E4 05 F1 | 	add	objptr, ##62572
14dac     F2 24 02 FB | 	rdlong	local04, objptr
14db0     7A 00 00 FF 
14db4     6C E4 85 F1 | 	sub	objptr, ##62572
14db8     12 23 02 F6 | 	mov	local03, local04
14dbc     5B 22 56 F2 | 	cmps	local03, #91 wc
14dc0     20 00 90 3D |  if_ae	jmp	#LR__1607
14dc4     7A 00 00 FF 
14dc8     6C E4 05 F1 | 	add	objptr, ##62572
14dcc     F2 20 02 FB | 	rdlong	local02, objptr
14dd0     20 20 06 F1 | 	add	local02, #32
14dd4     F2 20 62 FC | 	wrlong	local02, objptr
14dd8     7A 00 00 FF 
14ddc     6C E4 85 F1 | 	sub	objptr, ##62572
14de0     B0 00 90 FD | 	jmp	#LR__1611
14de4                 | LR__1607
14de4     7A 00 00 FF 
14de8     6C E4 05 F1 | 	add	objptr, ##62572
14dec     F2 20 02 FB | 	rdlong	local02, objptr
14df0     7A 00 00 FF 
14df4     6C E4 85 F1 | 	sub	objptr, ##62572
14df8     17 20 56 F2 | 	cmps	local02, #23 wc
14dfc     40 00 90 CD |  if_b	jmp	#LR__1608
14e00     7A 00 00 FF 
14e04     6C E4 05 F1 | 	add	objptr, ##62572
14e08     F2 24 02 FB | 	rdlong	local04, objptr
14e0c     7A 00 00 FF 
14e10     6C E4 85 F1 | 	sub	objptr, ##62572
14e14     12 23 02 F6 | 	mov	local03, local04
14e18     20 22 56 F2 | 	cmps	local03, #32 wc
14e1c     20 00 90 3D |  if_ae	jmp	#LR__1608
14e20     7A 00 00 FF 
14e24     6C E4 05 F1 | 	add	objptr, ##62572
14e28     F2 20 02 FB | 	rdlong	local02, objptr
14e2c     09 20 86 F1 | 	sub	local02, #9
14e30     F2 20 62 FC | 	wrlong	local02, objptr
14e34     7A 00 00 FF 
14e38     6C E4 85 F1 | 	sub	objptr, ##62572
14e3c     54 00 90 FD | 	jmp	#LR__1610
14e40                 | LR__1608
14e40     7A 00 00 FF 
14e44     6C E4 05 F1 | 	add	objptr, ##62572
14e48     F2 20 02 FB | 	rdlong	local02, objptr
14e4c     7A 00 00 FF 
14e50     6C E4 85 F1 | 	sub	objptr, ##62572
14e54     0E 20 56 F2 | 	cmps	local02, #14 wc
14e58     38 00 90 CD |  if_b	jmp	#LR__1609
14e5c     7A 00 00 FF 
14e60     6C E4 05 F1 | 	add	objptr, ##62572
14e64     F2 24 02 FB | 	rdlong	local04, objptr
14e68     7A 00 00 FF 
14e6c     6C E4 85 F1 | 	sub	objptr, ##62572
14e70     12 23 02 F6 | 	mov	local03, local04
14e74     17 22 56 F2 | 	cmps	local03, #23 wc
14e78     7A 00 00 CF 
14e7c     6C E4 05 C1 |  if_b	add	objptr, ##62572
14e80     F2 20 02 CB |  if_b	rdlong	local02, objptr
14e84     27 20 06 C1 |  if_b	add	local02, #39
14e88     F2 20 62 CC |  if_b	wrlong	local02, objptr
14e8c     7A 00 00 CF 
14e90     6C E4 85 C1 |  if_b	sub	objptr, ##62572
14e94                 | LR__1609
14e94                 | LR__1610
14e94                 | LR__1611
14e94                 | LR__1612
14e94                 | LR__1613
14e94                 | '  
14e94                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
14e94     7A 00 00 FF 
14e98     6C E4 05 F1 | 	add	objptr, ##62572
14e9c     F2 20 02 FB | 	rdlong	local02, objptr
14ea0     7A 00 00 FF 
14ea4     6C E4 85 F1 | 	sub	objptr, ##62572
14ea8     01 20 56 F2 | 	cmps	local02, #1 wc
14eac     90 00 90 CD |  if_b	jmp	#LR__1614
14eb0     7A 00 00 FF 
14eb4     6C E4 05 F1 | 	add	objptr, ##62572
14eb8     F2 24 02 FB | 	rdlong	local04, objptr
14ebc     7A 00 00 FF 
14ec0     6C E4 85 F1 | 	sub	objptr, ##62572
14ec4     12 23 02 F6 | 	mov	local03, local04
14ec8     7F 22 56 F2 | 	cmps	local03, #127 wc
14ecc     38 E4 05 C1 |  if_b	add	objptr, #56
14ed0     F2 1E E2 CA |  if_b	rdword	local01, objptr
14ed4     38 E4 85 C1 |  if_b	sub	objptr, #56
14ed8     0F 27 32 C9 |  if_b	getword	local05, local01, #0
14edc     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
14ee0     5C 00 90 3D |  if_ae	jmp	#LR__1614
14ee4     7A 00 00 FF 
14ee8     6C E4 05 F1 | 	add	objptr, ##62572
14eec     F2 12 02 FB | 	rdlong	arg01, objptr
14ef0     7A 00 00 FF 
14ef4     6C E4 85 F1 | 	sub	objptr, ##62572
14ef8     30 4B B0 FD | 	call	#__system__Chr_S
14efc     FD 2A 02 F6 | 	mov	local07, result1
14f00     55 00 00 FF 
14f04     F0 E5 05 F1 | 	add	objptr, ##44016
14f08     F2 12 02 FB | 	rdlong	arg01, objptr
14f0c     55 00 00 FF 
14f10     F0 E5 85 F1 | 	sub	objptr, ##44016
14f14     15 15 02 F6 | 	mov	arg02, local07
14f18     98 29 B0 FD | 	call	#__system___string_concat
14f1c     55 00 00 FF 
14f20     F0 E5 05 F1 | 	add	objptr, ##44016
14f24     F2 FA 61 FC | 	wrlong	result1, objptr
14f28     24 00 00 FF 
14f2c     7C E4 05 F1 | 	add	objptr, ##18556
14f30     F2 12 02 FB | 	rdlong	arg01, objptr
14f34     7A 00 00 FF 
14f38     6C E4 85 F1 | 	sub	objptr, ##62572
14f3c     D4 16 B0 FD | 	call	#_hg010b_spin2_putchar
14f40                 | LR__1614
14f40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(7) 'end of line reached
14f40     7A 00 00 FF 
14f44     6C E4 05 F1 | 	add	objptr, ##62572
14f48     F2 20 02 FB | 	rdlong	local02, objptr
14f4c     7A 00 00 FF 
14f50     6C E4 85 F1 | 	sub	objptr, ##62572
14f54     01 20 56 F2 | 	cmps	local02, #1 wc
14f58     D0 00 90 CD |  if_b	jmp	#LR__1615
14f5c     7A 00 00 FF 
14f60     6C E4 05 F1 | 	add	objptr, ##62572
14f64     F2 24 02 FB | 	rdlong	local04, objptr
14f68     7A 00 00 FF 
14f6c     6C E4 85 F1 | 	sub	objptr, ##62572
14f70     12 23 02 F6 | 	mov	local03, local04
14f74     7F 22 56 F2 | 	cmps	local03, #127 wc
14f78     B0 00 90 3D |  if_ae	jmp	#LR__1615
14f7c     38 E4 05 F1 | 	add	objptr, #56
14f80     F2 1E E2 FA | 	rdword	local01, objptr
14f84     38 E4 85 F1 | 	sub	objptr, #56
14f88     0F 27 32 F9 | 	getword	local05, local01, #0
14f8c     FE 26 0E F2 | 	cmp	local05, #254 wz
14f90     78 00 00 AF 
14f94     B4 E5 05 A1 |  if_e	add	objptr, ##61876
14f98     F2 2C 02 AB |  if_e	rdlong	local08, objptr
14f9c     78 00 00 AF 
14fa0     B4 E5 85 A1 |  if_e	sub	objptr, ##61876
14fa4     16 2F 02 A6 |  if_e	mov	local09, local08
14fa8     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
14fac     7C 00 90 5D |  if_ne	jmp	#LR__1615
14fb0     04 00 00 FF 
14fb4     94 EA 05 F1 | 	add	ptr__dat__, ##2196
14fb8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
14fbc     04 00 00 FF 
14fc0     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
14fc4     56 00 00 FF 
14fc8     44 22 06 F6 | 	mov	local03, ##44100
14fcc     0E 24 C6 F9 | 	decod	local04, #14
14fd0     00 26 06 F6 | 	mov	local05, #0
14fd4     03 00 00 FF 
14fd8     DE 1E 06 F6 | 	mov	local01, ##1758
14fdc     07 12 06 F6 | 	mov	arg01, #7
14fe0     56 00 00 FF 
14fe4     44 16 06 F6 | 	mov	arg03, ##44100
14fe8     0E 18 C6 F9 | 	decod	arg04, #14
14fec     00 1A 06 F6 | 	mov	arg05, #0
14ff0     03 00 00 FF 
14ff4     DE 1C 06 F6 | 	mov	arg06, ##1758
14ff8     0B 00 00 FF 
14ffc     C0 E4 05 F1 | 	add	objptr, ##5824
15000     1C 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
15004     0B 00 00 FF 
15008     C0 E4 85 F1 | 	sub	objptr, ##5824
1500c     2C 13 06 F6 | 	mov	arg01, #300
15010     38 2B B0 FD | 	call	#__system___waitms
15014     07 12 06 F6 | 	mov	arg01, #7
15018     0B 00 00 FF 
1501c     C0 E4 05 F1 | 	add	objptr, ##5824
15020     4C 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
15024     0B 00 00 FF 
15028     C0 E4 85 F1 | 	sub	objptr, ##5824
1502c                 | LR__1615
1502c                 | '  
1502c                 | '   'tab
1502c                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
1502c     7A 00 00 FF 
15030     64 E4 05 F1 | 	add	objptr, ##62564
15034     F2 20 02 FB | 	rdlong	local02, objptr
15038     7A 00 00 FF 
1503c     64 E4 85 F1 | 	sub	objptr, ##62564
15040     10 21 E2 F8 | 	getbyte	local02, local02, #0
15044     2B 20 0E F2 | 	cmp	local02, #43 wz
15048     B4 00 90 5D |  if_ne	jmp	#LR__1616
1504c     38 E4 05 F1 | 	add	objptr, #56
15050     F2 24 E2 FA | 	rdword	local04, objptr
15054     38 E4 85 F1 | 	sub	objptr, #56
15058     12 23 32 F9 | 	getword	local03, local04, #0
1505c     F0 22 16 F2 | 	cmp	local03, #240 wc
15060     9C 00 90 CD |  if_b	jmp	#LR__1616
15064     78 00 00 FF 
15068     B4 E5 05 F1 | 	add	objptr, ##61876
1506c     F2 1E 02 FB | 	rdlong	local01, objptr
15070     78 00 00 FF 
15074     B4 E5 85 F1 | 	sub	objptr, ##61876
15078     0F 27 02 F6 | 	mov	local05, local01
1507c     01 26 0E F2 | 	cmp	local05, #1 wz
15080     7C 00 90 5D |  if_ne	jmp	#LR__1616
15084     04 00 00 FF 
15088     94 EA 05 F1 | 	add	ptr__dat__, ##2196
1508c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15090     04 00 00 FF 
15094     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
15098     56 00 00 FF 
1509c     44 22 06 F6 | 	mov	local03, ##44100
150a0     0E 24 C6 F9 | 	decod	local04, #14
150a4     00 26 06 F6 | 	mov	local05, #0
150a8     03 00 00 FF 
150ac     DE 1E 06 F6 | 	mov	local01, ##1758
150b0     00 12 06 F6 | 	mov	arg01, #0
150b4     56 00 00 FF 
150b8     44 16 06 F6 | 	mov	arg03, ##44100
150bc     0E 18 C6 F9 | 	decod	arg04, #14
150c0     00 1A 06 F6 | 	mov	arg05, #0
150c4     03 00 00 FF 
150c8     DE 1C 06 F6 | 	mov	arg06, ##1758
150cc     0B 00 00 FF 
150d0     C0 E4 05 F1 | 	add	objptr, ##5824
150d4     48 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
150d8     0B 00 00 FF 
150dc     C0 E4 85 F1 | 	sub	objptr, ##5824
150e0     2C 13 06 F6 | 	mov	arg01, #300
150e4     64 2A B0 FD | 	call	#__system___waitms
150e8     00 12 06 F6 | 	mov	arg01, #0
150ec     0B 00 00 FF 
150f0     C0 E4 05 F1 | 	add	objptr, ##5824
150f4     78 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
150f8     0B 00 00 FF 
150fc     C0 E4 85 F1 | 	sub	objptr, ##5824
15100                 | LR__1616
15100                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
15100     7A 00 00 FF 
15104     64 E4 05 F1 | 	add	objptr, ##62564
15108     F2 20 02 FB | 	rdlong	local02, objptr
1510c     7A 00 00 FF 
15110     64 E4 85 F1 | 	sub	objptr, ##62564
15114     10 21 E2 F8 | 	getbyte	local02, local02, #0
15118     2B 20 0E F2 | 	cmp	local02, #43 wz
1511c     AC 00 90 5D |  if_ne	jmp	#LR__1619
15120     38 E4 05 F1 | 	add	objptr, #56
15124     F2 24 E2 FA | 	rdword	local04, objptr
15128     38 E4 85 F1 | 	sub	objptr, #56
1512c     12 23 32 F9 | 	getword	local03, local04, #0
15130     F0 22 16 F2 | 	cmp	local03, #240 wc
15134     94 00 90 3D |  if_ae	jmp	#LR__1619
15138     38 E4 05 F1 | 	add	objptr, #56
1513c     F2 20 E2 FA | 	rdword	local02, objptr
15140     10 23 52 F6 | 	abs	local03, local02 wc
15144     11 23 42 F8 | 	getnib	local03, local03, #0
15148     11 23 82 F6 | 	negc	local03, local03
1514c     11 25 52 F6 | 	abs	local04, local03 wc
15150     01 24 46 F0 | 	shr	local04, #1
15154     12 25 82 F6 | 	negc	local04, local04
15158     7A 00 00 FF 
1515c     38 E4 05 F1 | 	add	objptr, ##62520
15160     F2 24 62 FC | 	wrlong	local04, objptr
15164     12 31 02 F6 | 	mov	local10, local04
15168     7A 00 00 FF 
1516c     70 E4 85 F1 | 	sub	objptr, ##62576
15170                 | LR__1617
15170     08 30 56 F2 | 	cmps	local10, #8 wc
15174     54 00 90 3D |  if_ae	jmp	#LR__1618
15178     55 00 00 FF 
1517c     F0 E5 05 F1 | 	add	objptr, ##44016
15180     F2 12 02 FB | 	rdlong	arg01, objptr
15184     55 00 00 FF 
15188     F0 E5 85 F1 | 	sub	objptr, ##44016
1518c     39 01 00 FF 
15190     20 25 06 F6 | 	mov	local04, ##@LR__4497
15194     12 15 02 F6 | 	mov	arg02, local04
15198     18 27 B0 FD | 	call	#__system___string_concat
1519c     55 00 00 FF 
151a0     F0 E5 05 F1 | 	add	objptr, ##44016
151a4     F2 FA 61 FC | 	wrlong	result1, objptr
151a8     55 00 00 FF 
151ac     F0 E5 85 F1 | 	sub	objptr, ##44016
151b0     39 01 00 FF 
151b4     22 13 06 F6 | 	mov	arg01, ##@LR__4498
151b8     74 16 B0 FD | 	call	#_hg010b_spin2_write
151bc     18 23 02 F6 | 	mov	local03, local10
151c0     01 22 06 F1 | 	add	local03, #1
151c4     11 31 02 F6 | 	mov	local10, local03
151c8     A4 FF 9F FD | 	jmp	#LR__1617
151cc                 | LR__1618
151cc                 | LR__1619
151cc                 | '  
151cc                 | '   'backspace
151cc                 | '   if (key3 and 255) = 42 then 
151cc     7A 00 00 FF 
151d0     64 E4 05 F1 | 	add	objptr, ##62564
151d4     F2 20 02 FB | 	rdlong	local02, objptr
151d8     7A 00 00 FF 
151dc     64 E4 85 F1 | 	sub	objptr, ##62564
151e0     10 21 E2 F8 | 	getbyte	local02, local02, #0
151e4     2A 20 0E F2 | 	cmp	local02, #42 wz
151e8     D4 00 90 5D |  if_ne	jmp	#LR__1624
151ec                 | '       if v.cursor_x>4 then 
151ec     38 E4 05 F1 | 	add	objptr, #56
151f0     F2 20 E2 FA | 	rdword	local02, objptr
151f4     38 E4 85 F1 | 	sub	objptr, #56
151f8     05 20 16 F2 | 	cmp	local02, #5 wc
151fc     9C 00 90 CD |  if_b	jmp	#LR__1622
15200     55 00 00 FF 
15204     F0 E5 05 F1 | 	add	objptr, ##44016
15208     F2 26 02 FB | 	rdlong	local05, objptr
1520c     55 00 00 FF 
15210     F0 E5 85 F1 | 	sub	objptr, ##44016
15214     13 13 02 F6 | 	mov	arg01, local05
15218     09 33 02 F6 | 	mov	local11, arg01
1521c     97 06 48 FB | 	callpa	#(@LR__1621-@LR__1620)>>2,fcache_load_ptr_
15220                 | LR__1620
15220     19 FB C9 FA | 	rdbyte	result1, local11 wz
15224     01 32 06 51 |  if_ne	add	local11, #1
15228     F4 FF 9F 5D |  if_ne	jmp	#LR__1620
1522c                 | LR__1621
1522c     09 33 82 F1 | 	sub	local11, arg01
15230     19 15 02 F6 | 	mov	arg02, local11
15234     01 14 86 F1 | 	sub	arg02, #1
15238     13 13 02 F6 | 	mov	arg01, local05
1523c     28 46 B0 FD | 	call	#__system__Left_S
15240     55 00 00 FF 
15244     F0 E5 05 F1 | 	add	objptr, ##44016
15248     F2 FA 61 FC | 	wrlong	result1, objptr
1524c     55 00 00 FF 
15250     B8 E5 85 F1 | 	sub	objptr, ##43960
15254     F2 12 E2 FA | 	rdword	arg01, objptr
15258     02 12 86 F1 | 	sub	arg01, #2
1525c     02 E4 05 F1 | 	add	objptr, #2
15260     F2 14 C2 FA | 	rdbyte	arg02, objptr
15264     3A E4 85 F1 | 	sub	objptr, #58
15268     60 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1526c     20 12 06 F6 | 	mov	arg01, #32
15270     A0 13 B0 FD | 	call	#_hg010b_spin2_putchar
15274     38 E4 05 F1 | 	add	objptr, #56
15278     F2 12 E2 FA | 	rdword	arg01, objptr
1527c     02 12 86 F1 | 	sub	arg01, #2
15280     02 E4 05 F1 | 	add	objptr, #2
15284     F2 24 C2 FA | 	rdbyte	local04, objptr
15288     3A E4 85 F1 | 	sub	objptr, #58
1528c     12 23 E2 F8 | 	getbyte	local03, local04, #0
15290     11 15 02 F6 | 	mov	arg02, local03
15294     34 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
15298     24 00 90 FD | 	jmp	#LR__1623
1529c                 | LR__1622
1529c     39 01 00 FF 
152a0     24 21 06 F6 | 	mov	local02, ##@LR__4499
152a4     55 00 00 FF 
152a8     F0 E5 05 F1 | 	add	objptr, ##44016
152ac     F2 20 62 FC | 	wrlong	local02, objptr
152b0     55 00 00 FF 
152b4     B8 E5 85 F1 | 	sub	objptr, ##43960
152b8     F2 08 58 FC | 	wrword	#4, objptr
152bc     38 E4 85 F1 | 	sub	objptr, #56
152c0                 | LR__1623
152c0                 | LR__1624
152c0                 | '    
152c0                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
152c0                 | '  
152c0                 | '   if key4=key_enter then 
152c0     7A 00 00 FF 
152c4     6C E4 05 F1 | 	add	objptr, ##62572
152c8     F2 28 02 FB | 	rdlong	local06, objptr
152cc     7A 00 00 FF 
152d0     6C E4 85 F1 | 	sub	objptr, ##62572
152d4     8D 28 0E F2 | 	cmp	local06, #141 wz
152d8     50 00 90 5D |  if_ne	jmp	#LR__1625
152dc     B0 16 B0 FD | 	call	#_hg010b_spin2_crlf
152e0     38 B7 BE FD | 	call	#_interpret
152e4     39 01 00 FF 
152e8     25 21 06 F6 | 	mov	local02, ##@LR__4500
152ec     55 00 00 FF 
152f0     F0 E5 05 F1 | 	add	objptr, ##44016
152f4     F2 20 62 FC | 	wrlong	local02, objptr
152f8     1A FA 61 FD | 	getct	result1
152fc     24 00 00 FF 
15300     84 E4 05 F1 | 	add	objptr, ##18564
15304     F2 24 02 FB | 	rdlong	local04, objptr
15308     12 23 02 F6 | 	mov	local03, local04
1530c     11 FB 81 F1 | 	sub	result1, local03
15310     F2 FA 61 FC | 	wrlong	result1, objptr
15314     14 E4 85 F1 | 	sub	objptr, #20
15318     F2 00 68 FC | 	wrlong	#0, objptr
1531c     08 E4 05 F1 | 	add	objptr, #8
15320     F2 00 68 FC | 	wrlong	#0, objptr
15324     7A 00 00 FF 
15328     68 E4 85 F1 | 	sub	objptr, ##62568
1532c                 | LR__1625
1532c     7A 00 00 FF 
15330     64 E4 05 F1 | 	add	objptr, ##62564
15334     F2 00 68 FC | 	wrlong	#0, objptr
15338     7A 00 00 FF 
1533c     64 E4 85 F1 | 	sub	objptr, ##62564
15340     98 F6 9F FD | 	jmp	#LR__1600
15344     A7 F0 03 F6 | 	mov	ptra, fp
15348     B2 00 A0 FD | 	call	#popregs_
1534c                 | _program_ret
1534c     2D 00 64 FD | 	ret
15350                 | 
15350                 | ' '' this is not a main program.
15350                 | ' 
15350                 | ' '****************************************************************************************************************
15350                 | ' '                                                                                                             	*
15350                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
15350                 | ' '                                                                                                            	*
15350                 | ' ' mode - mode #, see below											*
15350                 | ' ' base - HDMI base pin												*
15350                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
15350                 | ' '														*
15350                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
15350                 | ' '' set bit #15 for custom timings														*
15350                 | ' '' p - 1 - psram, 0 - hub											*
15350                 | ' '' t - 1 - graphics, 0 - text											*
15350                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
15350                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
15350                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
15350                 | ' '														*
15350                 | ' '****************************************************************************************************************
15350                 | ' 
15350                 | ' pub start(base,mb):result |i
15350                 | _hg010b_spin2_start
15350                 | ' 
15350                 | ' '--------------------------- initialize pointers and variables
15350                 | ' 
15350                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
15350     30 E4 05 F1 | 	add	objptr, #48
15354     F2 FA 01 F6 | 	mov	result1, objptr
15358     28 E4 85 F1 | 	sub	objptr, #40
1535c     F2 FA 61 FC | 	wrlong	result1, objptr
15360                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
15360                 | ' hdmibase:=base							' HDMI base pin, 8*n
15360     18 E4 05 F1 | 	add	objptr, #24
15364     F2 12 62 FC | 	wrlong	arg01, objptr
15368                 | ' mailbox_ptr:=mb		
15368     04 E4 05 F1 | 	add	objptr, #4
1536c     F2 14 62 FC | 	wrlong	arg02, objptr
15370                 | ' mailbox0:=mb				' PSRAM mailbox pointer
15370     C1 E5 05 F1 | 	add	objptr, #449
15374     F2 14 62 FC | 	wrlong	arg02, objptr
15378                 | ' sprite_ptr:=@spr1ptr
15378     D8 E4 85 F1 | 	sub	objptr, #216
1537c     F2 FA 01 F6 | 	mov	result1, objptr
15380     E5 E4 85 F1 | 	sub	objptr, #229
15384     F2 FA 61 FC | 	wrlong	result1, objptr
15388                 | ' 
15388                 | ' 		'
15388                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
15388     E5 E4 05 F1 | 	add	objptr, #229
1538c     F2 FA 01 FB | 	rdlong	result1, objptr
15390     D0 FA 05 F1 | 	add	result1, #208
15394     FD 10 58 FC | 	wrword	#8, result1
15398                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
15398     F2 16 02 FB | 	rdlong	arg03, objptr
1539c     D2 16 06 F1 | 	add	arg03, #210
153a0     0B 21 58 FC | 	wrword	#16, arg03
153a4                 | ' leading_spaces:=0				'
153a4     A5 E5 05 F1 | 	add	objptr, #421
153a8     F2 00 68 FC | 	wrlong	#0, objptr
153ac                 | ' 
153ac                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
153ac     99 E4 85 F1 | 	sub	objptr, #153
153b0     00 00 A0 FF 
153b4     F2 0E 68 FC | 	wrlong	##1073741831, objptr
153b8                 | ' emptydl[1]:=0
153b8     04 E4 05 F1 | 	add	objptr, #4
153bc     F2 00 68 FC | 	wrlong	#0, objptr
153c0                 | ' 
153c0                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
153c0                 | ' 
153c0                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
153c0     28 E5 85 F1 | 	sub	objptr, #296
153c4     F2 02 68 FC | 	wrlong	#1, objptr
153c8                 | ' if s_debug<>0
153c8                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
153c8     20 00 80 FF 
153cc     F2 00 68 FC | 	wrlong	##16384, objptr
153d0     F5 E4 85 F1 | 	sub	objptr, #245
153d4                 | ' setmode()							' set the mode, see below
153d4     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
153d8                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
153d8     45 E4 05 F1 | 	add	objptr, #69
153dc     F2 FA 01 F6 | 	mov	result1, objptr
153e0     35 E4 85 F1 | 	sub	objptr, #53
153e4     F2 FA 61 FC | 	wrlong	result1, objptr
153e8                 | ' cursor_ptr:=@cursor_x						
153e8     28 E4 05 F1 | 	add	objptr, #40
153ec     F2 16 02 F6 | 	mov	arg03, objptr
153f0     2C E4 85 F1 | 	sub	objptr, #44
153f4     F2 16 62 FC | 	wrlong	arg03, objptr
153f8                 | ' fontnum:=0  							' start with a PC type font 
153f8     55 E4 05 F1 | 	add	objptr, #85
153fc     F2 00 68 FC | 	wrlong	#0, objptr
15400                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
15400     1C E4 05 F1 | 	add	objptr, #28
15404     F2 12 02 F6 | 	mov	arg01, objptr
15408     7D E4 85 F1 | 	sub	objptr, #125
1540c     10 00 00 FF 
15410     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
15414     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
15418     10 00 00 FF 
1541c     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
15420     10 16 06 F6 | 	mov	arg03, #16
15424     50 23 B0 FD | 	call	#__system____builtin_memmove
15428                 | ' leading_spaces:=0
15428     01 00 00 FF 
1542c     B2 E4 05 F1 | 	add	objptr, ##690
15430     F2 00 68 FC | 	wrlong	#0, objptr
15434     01 00 00 FF 
15438     B2 E4 85 F1 | 	sub	objptr, ##690
1543c                 | ' '---------------------------- initialize a cursor (MSDOS type)
1543c                 | ' 
1543c                 | ' initcursor(154)
1543c     9A 12 06 F6 | 	mov	arg01, #154
15440     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
15444                 | ' 
15444                 | ' '---------------------------- start the cog
15444                 | ' 
15444                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
15444     10 00 00 FF 
15448     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1544c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
15450     10 00 00 FF 
15454     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
15458     10 E4 05 F1 | 	add	objptr, #16
1545c     10 FA 05 F6 | 	mov	result1, #16
15460     28 E4 61 FD | 	setq	objptr
15464     0A FB F1 FC | 	coginit	result1, arg02 wc
15468     01 FA 65 C6 |  if_b	neg	result1, #1
1546c     1C E4 05 F1 | 	add	objptr, #28
15470     F2 FA 61 FC | 	wrlong	result1, objptr
15474     2C E4 85 F1 | 	sub	objptr, #44
15478                 | ' waitms(40)							' wait for stabilize
15478     28 12 06 F6 | 	mov	arg01, #40
1547c     CC 26 B0 FD | 	call	#__system___waitms
15480                 | ' return cog							' return the driver's cog #
15480     2C E4 05 F1 | 	add	objptr, #44
15484     F2 FA 01 FB | 	rdlong	result1, objptr
15488     2C E4 85 F1 | 	sub	objptr, #44
1548c                 | _hg010b_spin2_start_ret
1548c     2D 00 64 FD | 	ret
15490                 | 
15490                 | ' 
15490                 | ' 
15490                 | ' '**************************************************************************************************************** 
15490                 | ' '                                                                                                             	*
15490                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
15490                 | ' '  Mode number - see start() above or bits below								*
15490                 | ' '                                                                                                             	*
15490                 | ' '****************************************************************************************************************
15490                 | ' 
15490                 | ' '---------------------------- initialize a cursor (MSDOS type)
15490                 | ' pub initcursor(color) |i
15490                 | _hg010b_spin2_initcursor
15490     03 4A 05 F6 | 	mov	COUNT_, #3
15494     A8 00 A0 FD | 	call	#pushregs_
15498     09 1F 02 F6 | 	mov	local01, arg01
1549c                 | ' 
1549c                 | ' cursor_x:=0							' place the cursor at 0:0
1549c     38 E4 05 F1 | 	add	objptr, #56
154a0     F2 00 58 FC | 	wrword	#0, objptr
154a4                 | ' cursor_y:=0
154a4     02 E4 05 F1 | 	add	objptr, #2
154a8     F2 00 48 FC | 	wrbyte	#0, objptr
154ac                 | ' repeat i from 0 to 111
154ac     00 20 06 F6 | 	mov	local02, #0
154b0     F8 E5 05 F1 | 	add	objptr, #504
154b4     97 1A 48 FB | 	callpa	#(@LR__1632-@LR__1630)>>2,fcache_load_ptr_
154b8                 | LR__1630
154b8                 | '   cursor[i]:=0
154b8     10 23 02 F6 | 	mov	local03, local02
154bc     F2 22 02 F1 | 	add	local03, objptr
154c0     11 01 48 FC | 	wrbyte	#0, local03
154c4     01 20 06 F1 | 	add	local02, #1
154c8     70 20 56 F2 | 	cmps	local02, #112 wc
154cc     E8 FF 9F CD |  if_b	jmp	#LR__1630
154d0                 | ' repeat i from 112 to 127
154d0     70 20 06 F6 | 	mov	local02, #112
154d4                 | LR__1631
154d4                 | '   cursor[i]:=color  
154d4     10 23 02 F6 | 	mov	local03, local02
154d8     F2 22 02 F1 | 	add	local03, objptr
154dc     11 1F 42 FC | 	wrbyte	local01, local03
154e0     01 20 06 F1 | 	add	local02, #1
154e4     80 20 16 F2 | 	cmp	local02, #128 wc
154e8     E8 FF 9F CD |  if_b	jmp	#LR__1631
154ec                 | LR__1632
154ec                 | ' 'repeat i from 0 to 127
154ec                 | ' '  if ((i/8)//2)
154ec                 | ' '    cursor[i]:=15
154ec                 | ' '  else
154ec                 | ' '    cursor[i]:=0
154ec                 | ' '  if i>=120    
154ec                 | ' '    cursor[i]:=40
154ec                 | ' setspriteptr(17,@cursor)
154ec     F2 14 02 F6 | 	mov	arg02, objptr
154f0     01 00 00 FF 
154f4     32 E4 85 F1 | 	sub	objptr, ##562
154f8     11 12 06 F6 | 	mov	arg01, #17
154fc     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
15500                 | ' setspritesize(17,8,16)
15500     11 12 06 F6 | 	mov	arg01, #17
15504     08 14 06 F6 | 	mov	arg02, #8
15508     10 16 06 F6 | 	mov	arg03, #16
1550c     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
15510                 | ' setspritepos(17,0,0)
15510     11 12 06 F6 | 	mov	arg01, #17
15514     00 14 06 F6 | 	mov	arg02, #0
15518     00 16 06 F6 | 	mov	arg03, #0
1551c     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
15520     A7 F0 03 F6 | 	mov	ptra, fp
15524     B2 00 A0 FD | 	call	#popregs_
15528                 | _hg010b_spin2_initcursor_ret
15528     2D 00 64 FD | 	ret
1552c                 | 
1552c                 | ' 
1552c                 | '  
1552c                 | ' pub setcursorcolor(color) |i
1552c                 | _hg010b_spin2_setcursorcolor
1552c                 | ' 
1552c                 | ' 
1552c                 | ' repeat i from 0 to 111
1552c     00 00 06 F6 | 	mov	_var01, #0
15530     01 00 00 FF 
15534     32 E4 05 F1 | 	add	objptr, ##562
15538     97 1A 48 FB | 	callpa	#(@LR__1642-@LR__1640)>>2,fcache_load_ptr_
1553c                 | LR__1640
1553c                 | '   cursor[i]:=0
1553c     00 03 02 F6 | 	mov	_var02, _var01
15540     F2 02 02 F1 | 	add	_var02, objptr
15544     01 01 48 FC | 	wrbyte	#0, _var02
15548     01 00 06 F1 | 	add	_var01, #1
1554c     70 00 56 F2 | 	cmps	_var01, #112 wc
15550     E8 FF 9F CD |  if_b	jmp	#LR__1640
15554                 | ' repeat i from 112 to 127
15554     70 00 06 F6 | 	mov	_var01, #112
15558                 | LR__1641
15558                 | '   cursor[i]:=color  
15558     00 03 02 F6 | 	mov	_var02, _var01
1555c     F2 02 02 F1 | 	add	_var02, objptr
15560     01 13 42 FC | 	wrbyte	arg01, _var02
15564     01 00 06 F1 | 	add	_var01, #1
15568     80 00 16 F2 | 	cmp	_var01, #128 wc
1556c     E8 FF 9F CD |  if_b	jmp	#LR__1641
15570                 | LR__1642
15570     01 00 00 FF 
15574     32 E4 85 F1 | 	sub	objptr, ##562
15578                 | _hg010b_spin2_setcursorcolor_ret
15578     2D 00 64 FD | 	ret
1557c                 | 
1557c                 | '  
1557c                 | ' 
1557c                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1557c                 | _hg010b_spin2_setmode
1557c     02 4A 05 F6 | 	mov	COUNT_, #2
15580     A8 00 A0 FD | 	call	#pushregs_
15584                 | ' 
15584                 | ' 
15584                 | ' dl_ptr:=@emptydl[0]
15584     01 00 00 FF 
15588     19 E4 05 F1 | 	add	objptr, ##537
1558c     F2 62 02 F6 | 	mov	muldivb_, objptr
15590     FD E5 85 F1 | 	sub	objptr, #509
15594     F2 62 62 FC | 	wrlong	muldivb_, objptr
15598                 | ' 
15598                 | ' if cog>0 
15598     10 E4 05 F1 | 	add	objptr, #16
1559c     F2 62 02 FB | 	rdlong	muldivb_, objptr
155a0     2C E4 85 F1 | 	sub	objptr, #44
155a4     01 62 56 F2 | 	cmps	muldivb_, #1 wc
155a8                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
155a8     01 12 06 36 |  if_ae	mov	arg01, #1
155ac     54 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
155b0                 | ' xres:=1024
155b0     01 00 00 FF 
155b4     22 E4 05 F1 | 	add	objptr, ##546
155b8     02 00 80 FF 
155bc     F2 00 68 FC | 	wrlong	##1024, objptr
155c0                 | ' yres:=576  
155c0     04 E4 05 F1 | 	add	objptr, #4
155c4     01 00 80 FF 
155c8     F2 80 68 FC | 	wrlong	##576, objptr
155cc                 | ' ppl:=(timings[3])
155cc     10 00 00 FF 
155d0     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
155d4     F7 62 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
155d8     51 E5 85 F1 | 	sub	objptr, #337
155dc     F2 62 62 FC | 	wrlong	muldivb_, objptr
155e0                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
155e0     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
155e4     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
155e8     01 1E 66 F0 | 	shl	local01, #1
155ec     80 E4 85 F1 | 	sub	objptr, #128
155f0     F2 1E 62 FC | 	wrlong	local01, objptr
155f4                 | ' cpl1:=cpl '' todo remove
155f4     04 E4 05 F1 | 	add	objptr, #4
155f8     F2 1E 62 FC | 	wrlong	local01, objptr
155fc                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
155fc     02 00 00 FF 
15600     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
15604     41 E4 85 F1 | 	sub	objptr, #65
15608     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1560c                 | ' repeat i from 0 to 3
1560c     00 20 06 F6 | 	mov	local02, #0
15610     02 00 00 FF 
15614     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
15618     08 E4 05 F1 | 	add	objptr, #8
1561c     97 20 48 FB | 	callpa	#(@LR__1651-@LR__1650)>>2,fcache_load_ptr_
15620                 | LR__1650
15620                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
15620     10 1F 02 F6 | 	mov	local01, local02
15624     02 1E 66 F0 | 	shl	local01, #2
15628     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1562c     F2 62 02 FB | 	rdlong	muldivb_, objptr
15630     11 62 66 F0 | 	shl	muldivb_, #17
15634     0F 1F 02 FB | 	rdlong	local01, local01
15638     31 1F 02 F1 | 	add	local01, muldivb_
1563c     80 40 38 FF 
15640     00 1E 06 F1 | 	add	local01, ##1887502336
15644     10 63 02 F6 | 	mov	muldivb_, local02
15648     02 62 66 F0 | 	shl	muldivb_, #2
1564c     F7 62 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
15650     31 1F 62 FC | 	wrlong	local01, muldivb_
15654     01 20 06 F1 | 	add	local02, #1
15658     04 20 56 F2 | 	cmps	local02, #4 wc
1565c     C0 FF 9F CD |  if_b	jmp	#LR__1650
15660                 | LR__1651
15660     20 E4 85 F1 | 	sub	objptr, #32
15664                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
15664     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
15668     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1566c     14 1E 66 FC | 	wrlong	local01, #20
15670                 | ' hubset(timings[10])
15670     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
15674     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
15678     10 00 00 FF 
1567c     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
15680     00 12 62 FD | 	hubset	arg01
15684                 | ' waitms(1)                                                   	' wait for stabilization
15684     01 12 06 F6 | 	mov	arg01, #1
15688     C0 24 B0 FD | 	call	#__system___waitms
1568c     10 00 00 FF 
15690     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
15694     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
15698     5D E4 05 F1 | 	add	objptr, #93
1569c     F2 20 62 FC | 	wrlong	local02, objptr
156a0     10 1F 52 F6 | 	abs	local01, local02 wc
156a4     04 1E 46 F0 | 	shr	local01, #4
156a8     0F 1F 82 F6 | 	negc	local01, local01
156ac     9C E4 05 F1 | 	add	objptr, #156
156b0     F2 1E 62 FC | 	wrlong	local01, objptr
156b4     A4 E4 85 F1 | 	sub	objptr, #164
156b8     F2 20 02 FB | 	rdlong	local02, objptr
156bc     08 E4 05 F1 | 	add	objptr, #8
156c0     F2 1E 02 FB | 	rdlong	local01, objptr
156c4     0F 21 02 FD | 	qmul	local02, local01
156c8                 | ' lines:=timings[11]
156c8                 | ' t_lines:=lines/16
156c8                 | ' buflen:=cpl*lines						' framebuffer length in longs
156c8     29 E4 85 F1 | 	sub	objptr, #41
156cc                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
156cc     19 1E C6 F9 | 	decod	local01, #25
156d0                 | ' mode_ptr:=@timings						' set pointers to timings
156d0     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
156d4                 | ' graphmode:=1024+512+192+48							' det global variable
156d4                 | ' makedl(graphmode)							' make a DL for the mode
156d4     03 00 00 FF 
156d8     F0 12 06 F6 | 	mov	arg01, ##1776
156dc     18 20 62 FD | 	getqx	local02
156e0     F2 20 62 FC | 	wrlong	local02, objptr
156e4     34 E4 85 F1 | 	sub	objptr, #52
156e8     02 20 66 F0 | 	shl	local02, #2
156ec     10 1F 82 F1 | 	sub	local01, local02
156f0     F2 1E 62 FC | 	wrlong	local01, objptr
156f4     14 E4 05 F1 | 	add	objptr, #20
156f8     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
156fc     79 E4 05 F1 | 	add	objptr, #121
15700     03 00 80 FF 
15704     F2 E0 69 FC | 	wrlong	##1776, objptr
15708     8D E4 85 F1 | 	sub	objptr, #141
1570c     10 00 00 FF 
15710     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
15714     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
15718                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
15718     F2 1E 02 FB | 	rdlong	local01, objptr
1571c     D9 E4 05 F1 | 	add	objptr, #217
15720     F2 1E 62 FC | 	wrlong	local01, objptr
15724                 | ' s_font_ptr:=font_ptr
15724     D5 E4 85 F1 | 	sub	objptr, #213
15728     F2 1E 02 FB | 	rdlong	local01, objptr
1572c     D9 E4 05 F1 | 	add	objptr, #217
15730     F2 1E 62 FC | 	wrlong	local01, objptr
15734                 | ' s_lines:=lines
15734     80 E4 85 F1 | 	sub	objptr, #128
15738     F2 1E 02 FB | 	rdlong	local01, objptr
1573c     84 E4 05 F1 | 	add	objptr, #132
15740     F2 1E 62 FC | 	wrlong	local01, objptr
15744                 | ' s_buflen:=buflen
15744     AD E4 85 F1 | 	sub	objptr, #173
15748     F2 1E 02 FB | 	rdlong	local01, objptr
1574c     B5 E4 05 F1 | 	add	objptr, #181
15750     F2 1E 62 FC | 	wrlong	local01, objptr
15754                 | ' s_cpl:=cpl
15754     94 E4 85 F1 | 	sub	objptr, #148
15758     F2 1E 02 FB | 	rdlong	local01, objptr
1575c     90 E4 05 F1 | 	add	objptr, #144
15760     F2 1E 62 FC | 	wrlong	local01, objptr
15764                 | ' s_cpl1:=cpl
15764     90 E4 85 F1 | 	sub	objptr, #144
15768     F2 1E 02 FB | 	rdlong	local01, objptr
1576c     98 E4 05 F1 | 	add	objptr, #152
15770     F2 1E 62 FC | 	wrlong	local01, objptr
15774                 | ' st_lines:=t_lines
15774     0C E4 05 F1 | 	add	objptr, #12
15778     F2 1E 02 FB | 	rdlong	local01, objptr
1577c     04 E4 05 F1 | 	add	objptr, #4
15780     F2 1E 62 FC | 	wrlong	local01, objptr
15784                 | ' ppl:=ppl/xzoom  
15784     28 E4 85 F1 | 	sub	objptr, #40
15788     F2 60 02 FB | 	rdlong	muldiva_, objptr
1578c     2C E4 05 F1 | 	add	objptr, #44
15790     F2 62 02 FB | 	rdlong	muldivb_, objptr
15794     01 E5 85 F1 | 	sub	objptr, #257
15798     BA 00 A0 FD | 	call	#divide_
1579c     D5 E4 05 F1 | 	add	objptr, #213
157a0     F2 62 62 FC | 	wrlong	muldivb_, objptr
157a4                 | ' s_ppl:=ppl
157a4     1C E4 05 F1 | 	add	objptr, #28
157a8     F2 62 62 FC | 	wrlong	muldivb_, objptr
157ac     F1 E4 85 F1 | 	sub	objptr, #241
157b0                 | ' waitms(20)							' wait 
157b0     14 12 06 F6 | 	mov	arg01, #20
157b4     94 23 B0 FD | 	call	#__system___waitms
157b8     A7 F0 03 F6 | 	mov	ptra, fp
157bc     B2 00 A0 FD | 	call	#popregs_
157c0                 | _hg010b_spin2_setmode_ret
157c0     2D 00 64 FD | 	ret
157c4                 | 
157c4                 | ' 
157c4                 | ' 
157c4                 | ' '****************************************************************************************************************
157c4                 | ' '                                                                                                             	*
157c4                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
157c4                 | ' '                                                                                                             	*
157c4                 | ' '****************************************************************************************************************
157c4                 | ' 
157c4                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
157c4                 | _hg010b_spin2_makedl
157c4                 | ' 
157c4                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
157c4                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
157c4                 | ' repeat i from 0 to 11                                                           ' clear DL
157c4     00 00 06 F6 | 	mov	_var01, #0
157c8     E9 E5 05 F1 | 	add	objptr, #489
157cc     97 0E 48 FB | 	callpa	#(@LR__1661-@LR__1660)>>2,fcache_load_ptr_
157d0                 | LR__1660
157d0                 | '   displaylist[i]:=0 
157d0     00 03 02 F6 | 	mov	_var02, _var01
157d4     02 02 66 F0 | 	shl	_var02, #2
157d8     F2 02 02 F1 | 	add	_var02, objptr
157dc     01 01 68 FC | 	wrlong	#0, _var02
157e0     01 00 06 F1 | 	add	_var01, #1
157e4     0C 00 56 F2 | 	cmps	_var01, #12 wc
157e8     E4 FF 9F CD |  if_b	jmp	#LR__1660
157ec                 | LR__1661
157ec                 | '                         ' 
157ec                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
157ec     8C E5 85 F1 | 	sub	objptr, #396
157f0     F2 02 02 FB | 	rdlong	_var02, objptr
157f4     14 02 66 F0 | 	shl	_var02, #20
157f8     01 02 06 F1 | 	add	_var02, #1
157fc     04 E4 85 F1 | 	sub	objptr, #4
15800     F2 00 02 FB | 	rdlong	_var01, objptr
15804     02 00 66 F0 | 	shl	_var01, #2
15808     04 00 66 F0 | 	shl	_var01, #4
1580c     00 03 02 F1 | 	add	_var02, _var01
15810     90 E5 05 F1 | 	add	objptr, #400
15814     F2 02 62 FC | 	wrlong	_var02, objptr
15818     E9 E5 85 F1 | 	sub	objptr, #489
1581c                 | ' displaylist[1]:=buf_ptr<<4+%10  
1581c     F2 02 02 FB | 	rdlong	_var02, objptr
15820     04 02 66 F0 | 	shl	_var02, #4
15824     02 02 06 F1 | 	add	_var02, #2
15828     ED E5 05 F1 | 	add	objptr, #493
1582c     F2 02 62 FC | 	wrlong	_var02, objptr
15830                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
15830     04 E4 85 F1 | 	sub	objptr, #4
15834     F2 02 02 F6 | 	mov	_var02, objptr
15838     CD E5 85 F1 | 	sub	objptr, #461
1583c     F2 02 62 FC | 	wrlong	_var02, objptr
15840     1C E4 85 F1 | 	sub	objptr, #28
15844                 | _hg010b_spin2_makedl_ret
15844     2D 00 64 FD | 	ret
15848                 | 
15848                 | ' 
15848                 | ' 
15848                 | ' '****************************************************************************************************************
15848                 | ' '                                                                        					*
15848                 | ' '  Graphic primitives                                                    					*
15848                 | ' '                                                                        					*
15848                 | ' '****************************************************************************************************************
15848                 | ' 
15848                 | ' pub setspriteptr(num,ptr)
15848                 | _hg010b_spin2_setspriteptr
15848                 | ' long[@spr1ptr+12*num]:=ptr
15848     0D E5 05 F1 | 	add	objptr, #269
1584c     F2 00 02 F6 | 	mov	_var01, objptr
15850     09 03 02 F6 | 	mov	_var02, arg01
15854     01 02 66 F0 | 	shl	_var02, #1
15858     09 03 02 F1 | 	add	_var02, arg01
1585c     02 02 66 F0 | 	shl	_var02, #2
15860     01 01 02 F1 | 	add	_var01, _var02
15864     00 15 62 FC | 	wrlong	arg02, _var01
15868     0D E5 85 F1 | 	sub	objptr, #269
1586c                 | _hg010b_spin2_setspriteptr_ret
1586c     2D 00 64 FD | 	ret
15870                 | 
15870                 | ' 
15870                 | ' pub setspritepos(num,x,y)
15870                 | _hg010b_spin2_setspritepos
15870                 | ' word[@spr1ptr+12*num+4]:=x
15870     0D E5 05 F1 | 	add	objptr, #269
15874     F2 00 02 F6 | 	mov	_var01, objptr
15878     09 03 02 F6 | 	mov	_var02, arg01
1587c     01 02 66 F0 | 	shl	_var02, #1
15880     09 03 02 F1 | 	add	_var02, arg01
15884     02 02 66 F0 | 	shl	_var02, #2
15888     01 01 02 F1 | 	add	_var01, _var02
1588c     04 00 06 F1 | 	add	_var01, #4
15890     00 15 52 FC | 	wrword	arg02, _var01
15894                 | ' word[@spr1ptr+12*num+6]:=y
15894     F2 00 02 F6 | 	mov	_var01, objptr
15898     09 03 02 F6 | 	mov	_var02, arg01
1589c     01 02 66 F0 | 	shl	_var02, #1
158a0     09 03 02 F1 | 	add	_var02, arg01
158a4     02 02 66 F0 | 	shl	_var02, #2
158a8     01 01 02 F1 | 	add	_var01, _var02
158ac     06 00 06 F1 | 	add	_var01, #6
158b0     00 17 52 FC | 	wrword	arg03, _var01
158b4     0D E5 85 F1 | 	sub	objptr, #269
158b8                 | _hg010b_spin2_setspritepos_ret
158b8     2D 00 64 FD | 	ret
158bc                 | 
158bc                 | ' 
158bc                 | ' pub setspritesize(num,w,h)
158bc                 | _hg010b_spin2_setspritesize
158bc                 | ' word[@spr1ptr+12*num+8]:=w
158bc     0D E5 05 F1 | 	add	objptr, #269
158c0     F2 00 02 F6 | 	mov	_var01, objptr
158c4     09 03 02 F6 | 	mov	_var02, arg01
158c8     01 02 66 F0 | 	shl	_var02, #1
158cc     09 03 02 F1 | 	add	_var02, arg01
158d0     02 02 66 F0 | 	shl	_var02, #2
158d4     01 01 02 F1 | 	add	_var01, _var02
158d8     08 00 06 F1 | 	add	_var01, #8
158dc     00 15 52 FC | 	wrword	arg02, _var01
158e0                 | ' word[@spr1ptr+12*num+10]:=h
158e0     F2 00 02 F6 | 	mov	_var01, objptr
158e4     09 03 02 F6 | 	mov	_var02, arg01
158e8     01 02 66 F0 | 	shl	_var02, #1
158ec     09 03 02 F1 | 	add	_var02, arg01
158f0     02 02 66 F0 | 	shl	_var02, #2
158f4     01 01 02 F1 | 	add	_var01, _var02
158f8     0A 00 06 F1 | 	add	_var01, #10
158fc     00 17 52 FC | 	wrword	arg03, _var01
15900     0D E5 85 F1 | 	sub	objptr, #269
15904                 | _hg010b_spin2_setspritesize_ret
15904     2D 00 64 FD | 	ret
15908                 | 
15908                 | ' 
15908                 | ' 
15908                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
15908                 | ' 
15908                 | ' 
15908                 | ' pub putpixel(x,y,c)
15908                 | _hg010b_spin2_putpixel
15908     04 4A 05 F6 | 	mov	COUNT_, #4
1590c     A8 00 A0 FD | 	call	#pushregs_
15910     09 1F 02 F6 | 	mov	local01, arg01
15914                 | ' 
15914                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
15914     00 20 06 F6 | 	mov	local02, #0
15918     00 1E 56 F2 | 	cmps	local01, #0 wc
1591c     01 20 66 36 |  if_ae	neg	local02, #1
15920     E5 E4 05 F1 | 	add	objptr, #229
15924     F2 1A 02 FB | 	rdlong	arg05, objptr
15928     02 1A 66 F0 | 	shl	arg05, #2
1592c     0D 1F 52 F2 | 	cmps	local01, arg05 wc
15930     11 23 A2 F1 | 	subx	local03, local03
15934     11 21 02 F5 | 	and	local02, local03
15938     00 22 06 F6 | 	mov	local03, #0
1593c     00 14 56 F2 | 	cmps	arg02, #0 wc
15940     01 22 66 36 |  if_ae	neg	local03, #1
15944     11 21 02 F5 | 	and	local02, local03
15948     04 E4 85 F1 | 	sub	objptr, #4
1594c     F2 22 02 FB | 	rdlong	local03, objptr
15950     E1 E4 85 F1 | 	sub	objptr, #225
15954     11 15 52 F2 | 	cmps	arg02, local03 wc
15958     12 25 A2 F1 | 	subx	local04, local04
1595c     12 21 CA F7 | 	test	local02, local04 wz
15960     48 00 90 AD |  if_e	jmp	#LR__1670
15964     D9 E4 05 F1 | 	add	objptr, #217
15968     F2 12 02 FB | 	rdlong	arg01, objptr
1596c     14 E4 05 F1 | 	add	objptr, #20
15970     F2 24 02 FB | 	rdlong	local04, objptr
15974     02 24 66 F0 | 	shl	local04, #2
15978     0A 25 02 FD | 	qmul	local04, arg02
1597c                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1597c     0B 15 02 F6 | 	mov	arg02, arg03
15980     01 16 06 F6 | 	mov	arg03, #1
15984     00 18 06 F6 | 	mov	arg04, #0
15988     01 1A 06 F6 | 	mov	arg05, #1
1598c     0A 00 00 FF 
15990     D3 E5 05 F1 | 	add	objptr, ##5587
15994     18 24 62 FD | 	getqx	local04
15998     0F 25 02 F1 | 	add	local04, local01
1599c     12 13 02 F1 | 	add	arg01, local04
159a0     FC 14 B0 FD | 	call	#_psram_spin2_fill
159a4     0B 00 00 FF 
159a8     C0 E4 85 F1 | 	sub	objptr, ##5824
159ac                 | LR__1670
159ac     A7 F0 03 F6 | 	mov	ptra, fp
159b0     B2 00 A0 FD | 	call	#popregs_
159b4                 | _hg010b_spin2_putpixel_ret
159b4     2D 00 64 FD | 	ret
159b8                 | 
159b8                 | ' 
159b8                 | ' pub putpixel2(x,y,c)
159b8                 | _hg010b_spin2_putpixel2
159b8     02 4A 05 F6 | 	mov	COUNT_, #2
159bc     A8 00 A0 FD | 	call	#pushregs_
159c0     D9 E4 05 F1 | 	add	objptr, #217
159c4     F2 1E 02 FB | 	rdlong	local01, objptr
159c8     14 E4 05 F1 | 	add	objptr, #20
159cc     F2 1A 02 FB | 	rdlong	arg05, objptr
159d0     02 1A 66 F0 | 	shl	arg05, #2
159d4     0A 1B 02 FD | 	qmul	arg05, arg02
159d8                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
159d8     0B 15 02 F6 | 	mov	arg02, arg03
159dc     01 16 06 F6 | 	mov	arg03, #1
159e0     00 18 06 F6 | 	mov	arg04, #0
159e4     01 1A 06 F6 | 	mov	arg05, #1
159e8     0A 00 00 FF 
159ec     D3 E5 05 F1 | 	add	objptr, ##5587
159f0     18 20 62 FD | 	getqx	local02
159f4     09 21 02 F1 | 	add	local02, arg01
159f8     10 1F 02 F1 | 	add	local01, local02
159fc     0F 13 02 F6 | 	mov	arg01, local01
15a00     9C 14 B0 FD | 	call	#_psram_spin2_fill
15a04     0B 00 00 FF 
15a08     C0 E4 85 F1 | 	sub	objptr, ##5824
15a0c     A7 F0 03 F6 | 	mov	ptra, fp
15a10     B2 00 A0 FD | 	call	#popregs_
15a14                 | _hg010b_spin2_putpixel2_ret
15a14     2D 00 64 FD | 	ret
15a18                 | 
15a18                 | ' 
15a18                 | ' pub getpixel2(x,y): c 
15a18                 | _hg010b_spin2_getpixel2
15a18     02 4A 05 F6 | 	mov	COUNT_, #2
15a1c     A8 00 A0 FD | 	call	#pushregs_
15a20     0C F0 07 F1 | 	add	ptra, #12
15a24     04 4E 05 F1 | 	add	fp, #4
15a28     A7 12 62 FC | 	wrlong	arg01, fp
15a2c     04 4E 05 F1 | 	add	fp, #4
15a30     A7 14 62 FC | 	wrlong	arg02, fp
15a34     08 4E 85 F1 | 	sub	fp, #8
15a38     A7 00 68 FC | 	wrlong	#0, fp
15a3c     A7 12 02 F6 | 	mov	arg01, fp
15a40     D9 E4 05 F1 | 	add	objptr, #217
15a44     F2 14 02 FB | 	rdlong	arg02, objptr
15a48     14 E4 05 F1 | 	add	objptr, #20
15a4c     F2 16 02 FB | 	rdlong	arg03, objptr
15a50     02 16 66 F0 | 	shl	arg03, #2
15a54     08 4E 05 F1 | 	add	fp, #8
15a58     A7 FA 01 FB | 	rdlong	result1, fp
15a5c     FD 16 02 FD | 	qmul	arg03, result1
15a60                 | ' 
15a60                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
15a60     04 4E 85 F1 | 	sub	fp, #4
15a64     A7 1E 02 FB | 	rdlong	local01, fp
15a68     04 4E 85 F1 | 	sub	fp, #4
15a6c     01 16 06 F6 | 	mov	arg03, #1
15a70     0A 00 00 FF 
15a74     D3 E5 05 F1 | 	add	objptr, ##5587
15a78     18 20 62 FD | 	getqx	local02
15a7c     0F 21 02 F1 | 	add	local02, local01
15a80     10 15 02 F1 | 	add	arg02, local02
15a84     E0 12 B0 FD | 	call	#_psram_spin2_read1
15a88     0B 00 00 FF 
15a8c     C0 E4 85 F1 | 	sub	objptr, ##5824
15a90                 | ' return c
15a90     A7 FA 01 FB | 	rdlong	result1, fp
15a94     A7 F0 03 F6 | 	mov	ptra, fp
15a98     B2 00 A0 FD | 	call	#popregs_
15a9c                 | _hg010b_spin2_getpixel2_ret
15a9c     2D 00 64 FD | 	ret
15aa0                 | 
15aa0                 | '   
15aa0                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
15aa0                 | ' 
15aa0                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
15aa0                 | _hg010b_spin2_fastline
15aa0     02 4A 05 F6 | 	mov	COUNT_, #2
15aa4     A8 00 A0 FD | 	call	#pushregs_
15aa8     09 1F 02 F6 | 	mov	local01, arg01
15aac     0A 21 02 F6 | 	mov	local02, arg02
15ab0                 | ' 
15ab0                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
15ab0     00 16 56 F2 | 	cmps	arg03, #0 wc
15ab4     F4 00 90 CD |  if_b	jmp	#LR__1680
15ab8     01 00 00 FF 
15abc     26 E4 05 F1 | 	add	objptr, ##550
15ac0     F2 1A 02 FB | 	rdlong	arg05, objptr
15ac4     01 00 00 FF 
15ac8     26 E4 85 F1 | 	sub	objptr, ##550
15acc     0D 17 52 F2 | 	cmps	arg03, arg05 wc
15ad0     D8 00 90 3D |  if_ae	jmp	#LR__1680
15ad4     00 1E 56 F2 | 	cmps	local01, #0 wc
15ad8     00 20 56 C2 |  if_b	cmps	local02, #0 wc
15adc     CC 00 90 CD |  if_b	jmp	#LR__1680
15ae0     01 00 00 FF 
15ae4     22 E4 05 F1 | 	add	objptr, ##546
15ae8     F2 1A 02 FB | 	rdlong	arg05, objptr
15aec     01 00 00 FF 
15af0     22 E4 85 F1 | 	sub	objptr, ##546
15af4     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
15af8     01 00 00 1F 
15afc     22 E4 05 11 |  if_a	add	objptr, ##546
15b00     F2 12 02 1B |  if_a	rdlong	arg01, objptr
15b04     01 00 00 1F 
15b08     22 E4 85 11 |  if_a	sub	objptr, ##546
15b0c     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
15b10                 | '   return
15b10     98 00 90 1D |  if_a	jmp	#LR__1680
15b14     10 1F 5A F2 | 	cmps	local01, local02 wcz
15b18     0F 1B 02 16 |  if_a	mov	arg05, local01
15b1c     10 1F 02 16 |  if_a	mov	local01, local02
15b20     0D 21 02 16 |  if_a	mov	local02, arg05
15b24     00 1E 56 F2 | 	cmps	local01, #0 wc
15b28     00 1E 06 C6 |  if_b	mov	local01, #0
15b2c     01 00 00 FF 
15b30     22 E4 05 F1 | 	add	objptr, ##546
15b34     F2 1A 02 FB | 	rdlong	arg05, objptr
15b38     01 00 00 FF 
15b3c     22 E4 85 F1 | 	sub	objptr, ##546
15b40     0D 21 52 F2 | 	cmps	local02, arg05 wc
15b44     01 00 00 3F 
15b48     22 E4 05 31 |  if_ae	add	objptr, ##546
15b4c     F2 20 02 3B |  if_ae	rdlong	local02, objptr
15b50     01 00 00 3F 
15b54     22 E4 85 31 |  if_ae	sub	objptr, ##546
15b58     D9 E4 05 F1 | 	add	objptr, #217
15b5c     F2 12 02 FB | 	rdlong	arg01, objptr
15b60     14 E4 05 F1 | 	add	objptr, #20
15b64     F2 1A 02 FB | 	rdlong	arg05, objptr
15b68     02 1A 66 F0 | 	shl	arg05, #2
15b6c     0B 1B 02 FD | 	qmul	arg05, arg03
15b70                 | ' if x1>x2
15b70                 | '   x1,x2:=x2,x1
15b70                 | ' if x1<0 
15b70                 | '   x1:=0
15b70                 | ' if x2>=xres
15b70                 | '   x2:=xres-1  
15b70     01 20 86 31 |  if_ae	sub	local02, #1
15b74                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
15b74     01 16 06 F6 | 	mov	arg03, #1
15b78     10 17 02 F1 | 	add	arg03, local02
15b7c     0F 17 82 F1 | 	sub	arg03, local01
15b80     0C 15 02 F6 | 	mov	arg02, arg04
15b84     00 18 06 F6 | 	mov	arg04, #0
15b88     01 1A 06 F6 | 	mov	arg05, #1
15b8c     0A 00 00 FF 
15b90     D3 E5 05 F1 | 	add	objptr, ##5587
15b94     18 20 62 FD | 	getqx	local02
15b98     0F 21 02 F1 | 	add	local02, local01
15b9c     10 13 02 F1 | 	add	arg01, local02
15ba0     FC 12 B0 FD | 	call	#_psram_spin2_fill
15ba4     0B 00 00 FF 
15ba8     C0 E4 85 F1 | 	sub	objptr, ##5824
15bac                 | LR__1680
15bac     A7 F0 03 F6 | 	mov	ptra, fp
15bb0     B2 00 A0 FD | 	call	#popregs_
15bb4                 | _hg010b_spin2_fastline_ret
15bb4     2D 00 64 FD | 	ret
15bb8                 | 
15bb8                 | ' 
15bb8                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
15bb8                 | _hg010b_spin2_draw
15bb8     0E 4A 05 F6 | 	mov	COUNT_, #14
15bbc     A8 00 A0 FD | 	call	#pushregs_
15bc0     09 1F 02 F6 | 	mov	local01, arg01
15bc4     0A 21 02 F6 | 	mov	local02, arg02
15bc8     0B 23 02 F6 | 	mov	local03, arg03
15bcc     0C 25 02 F6 | 	mov	local04, arg04
15bd0     0D 27 02 F6 | 	mov	local05, arg05
15bd4                 | ' 
15bd4                 | ' if (y1==y2)
15bd4     12 21 0A F2 | 	cmp	local02, local04 wz
15bd8     18 00 90 5D |  if_ne	jmp	#LR__1690
15bdc                 | '   fastline(x1,x2,y1,c)
15bdc     0F 13 02 F6 | 	mov	arg01, local01
15be0     11 15 02 F6 | 	mov	arg02, local03
15be4     10 17 02 F6 | 	mov	arg03, local02
15be8     13 19 02 F6 | 	mov	arg04, local05
15bec     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
15bf0     F8 00 90 FD | 	jmp	#LR__1696
15bf4                 | LR__1690
15bf4                 | ' else  
15bf4                 | '   x:=x1
15bf4     0F 29 02 F6 | 	mov	local06, local01
15bf8                 | '   y:=y1
15bf8     10 2B 02 F6 | 	mov	local07, local02
15bfc                 | ' 
15bfc                 | '   if (x1<x2) 
15bfc     11 1F 52 F2 | 	cmps	local01, local03 wc
15c00                 | '     xi:=1
15c00     01 2C 06 C6 |  if_b	mov	local08, #1
15c04                 | '     dx:=x2-x1
15c04     11 2F 02 C6 |  if_b	mov	local09, local03
15c08     0F 2F 82 C1 |  if_b	sub	local09, local01
15c0c                 | '   else
15c0c                 | '     xi:=-1
15c0c     01 2C 66 36 |  if_ae	neg	local08, #1
15c10                 | '     dx:=x1-x2
15c10     11 1F 82 31 |  if_ae	sub	local01, local03
15c14     0F 2F 02 36 |  if_ae	mov	local09, local01
15c18                 | '   
15c18                 | '   if (y1<y2) 
15c18     12 21 52 F2 | 	cmps	local02, local04 wc
15c1c                 | '     yi:=1
15c1c     01 30 06 C6 |  if_b	mov	local10, #1
15c20                 | '     dy:=y2-y1
15c20     12 33 02 C6 |  if_b	mov	local11, local04
15c24     10 33 82 C1 |  if_b	sub	local11, local02
15c28                 | '   else
15c28                 | '     yi:=-1
15c28     01 30 66 36 |  if_ae	neg	local10, #1
15c2c                 | '     dy:=y1-y2
15c2c     12 21 82 31 |  if_ae	sub	local02, local04
15c30     10 33 02 36 |  if_ae	mov	local11, local02
15c34                 | ' 
15c34                 | '   putpixel(x,y,c)
15c34     13 17 02 F6 | 	mov	arg03, local05
15c38     14 13 02 F6 | 	mov	arg01, local06
15c3c     15 15 02 F6 | 	mov	arg02, local07
15c40     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
15c44                 | ' 
15c44                 | '   if (dx>dy)
15c44     19 2F 5A F2 | 	cmps	local09, local11 wcz
15c48     50 00 90 ED |  if_be	jmp	#LR__1692
15c4c                 | '     ai:=(dy-dx)*2
15c4c     19 35 02 F6 | 	mov	local12, local11
15c50     17 35 82 F1 | 	sub	local12, local09
15c54     01 34 66 F0 | 	shl	local12, #1
15c58                 | '     bi:=dy*2
15c58     01 32 66 F0 | 	shl	local11, #1
15c5c     19 37 02 F6 | 	mov	local13, local11
15c60                 | '     d:= bi-dx
15c60     1B 39 02 F6 | 	mov	local14, local13
15c64     17 39 82 F1 | 	sub	local14, local09
15c68                 | '     repeat while (x<>x2) 
15c68                 | LR__1691
15c68     11 29 0A F2 | 	cmp	local06, local03 wz
15c6c     7C 00 90 AD |  if_e	jmp	#LR__1695
15c70                 | '       if (d>=0) 
15c70     00 38 56 F2 | 	cmps	local14, #0 wc
15c74                 | '         x+=xi
15c74     16 29 02 31 |  if_ae	add	local06, local08
15c78                 | '         y+=yi
15c78     18 2B 02 31 |  if_ae	add	local07, local10
15c7c                 | '         d+=ai
15c7c     1A 39 02 31 |  if_ae	add	local14, local12
15c80                 | '       else
15c80                 | '         d+=bi
15c80     1B 39 02 C1 |  if_b	add	local14, local13
15c84                 | '         x+=xi
15c84     16 29 02 C1 |  if_b	add	local06, local08
15c88                 | '       putpixel(x,y,c)
15c88     14 13 02 F6 | 	mov	arg01, local06
15c8c     15 15 02 F6 | 	mov	arg02, local07
15c90     13 17 02 F6 | 	mov	arg03, local05
15c94     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
15c98     CC FF 9F FD | 	jmp	#LR__1691
15c9c                 | LR__1692
15c9c                 | '   else
15c9c                 | '     ai:=(dx-dy)*2
15c9c     17 35 02 F6 | 	mov	local12, local09
15ca0     19 35 82 F1 | 	sub	local12, local11
15ca4     01 34 66 F0 | 	shl	local12, #1
15ca8                 | '     bi:=dx*2
15ca8     01 2E 66 F0 | 	shl	local09, #1
15cac     17 37 02 F6 | 	mov	local13, local09
15cb0                 | '     d:=bi-dy
15cb0     1B 39 02 F6 | 	mov	local14, local13
15cb4     19 39 82 F1 | 	sub	local14, local11
15cb8                 | '     repeat while (y<>y2)
15cb8                 | LR__1693
15cb8     12 2B 0A F2 | 	cmp	local07, local04 wz
15cbc     2C 00 90 AD |  if_e	jmp	#LR__1694
15cc0                 | '       if (d>=0)
15cc0     00 38 56 F2 | 	cmps	local14, #0 wc
15cc4                 | '         x+=xi
15cc4     16 29 02 31 |  if_ae	add	local06, local08
15cc8                 | '         y+=yi
15cc8     18 2B 02 31 |  if_ae	add	local07, local10
15ccc                 | '         d+=ai
15ccc     1A 39 02 31 |  if_ae	add	local14, local12
15cd0                 | '       else
15cd0                 | '         d+=bi
15cd0     1B 39 02 C1 |  if_b	add	local14, local13
15cd4                 | '         y+=yi
15cd4     18 2B 02 C1 |  if_b	add	local07, local10
15cd8                 | '       putpixel(x, y,c)
15cd8     14 13 02 F6 | 	mov	arg01, local06
15cdc     15 15 02 F6 | 	mov	arg02, local07
15ce0     13 17 02 F6 | 	mov	arg03, local05
15ce4     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
15ce8     CC FF 9F FD | 	jmp	#LR__1693
15cec                 | LR__1694
15cec                 | LR__1695
15cec                 | LR__1696
15cec     A7 F0 03 F6 | 	mov	ptra, fp
15cf0     B2 00 A0 FD | 	call	#popregs_
15cf4                 | _hg010b_spin2_draw_ret
15cf4     2D 00 64 FD | 	ret
15cf8                 | 
15cf8                 | '  
15cf8                 | ' pub fillpush(val) 
15cf8                 | _hg010b_spin2_fillpush
15cf8                 | ' fillstack[fillptr]:=val
15cf8     0B 00 00 FF 
15cfc     B6 E4 05 F1 | 	add	objptr, ##5814
15d00     F2 00 02 FB | 	rdlong	_var01, objptr
15d04     02 00 66 F0 | 	shl	_var01, #2
15d08     0A 00 00 FF 
15d0c     00 E4 85 F1 | 	sub	objptr, ##5120
15d10     F2 00 02 F1 | 	add	_var01, objptr
15d14     00 13 62 FC | 	wrlong	arg01, _var01
15d18                 | ' fillptr+=1   
15d18     0A 00 00 FF 
15d1c     00 E4 05 F1 | 	add	objptr, ##5120
15d20     F2 00 02 FB | 	rdlong	_var01, objptr
15d24     01 00 06 F1 | 	add	_var01, #1
15d28     F2 00 62 FC | 	wrlong	_var01, objptr
15d2c     0B 00 00 FF 
15d30     B6 E4 85 F1 | 	sub	objptr, ##5814
15d34                 | _hg010b_spin2_fillpush_ret
15d34     2D 00 64 FD | 	ret
15d38                 | 
15d38                 | ' 
15d38                 | '     
15d38                 | ' pub fillpop() : val
15d38                 | _hg010b_spin2_fillpop
15d38                 | ' 
15d38                 | ' fillptr-=1
15d38     0B 00 00 FF 
15d3c     B6 E4 05 F1 | 	add	objptr, ##5814
15d40     F2 FA 01 FB | 	rdlong	result1, objptr
15d44     01 FA 85 F1 | 	sub	result1, #1
15d48     F2 FA 61 FC | 	wrlong	result1, objptr
15d4c                 | ' if fillptr<0
15d4c     0B 00 00 FF 
15d50     B6 E4 85 F1 | 	sub	objptr, ##5814
15d54     00 FA 55 F2 | 	cmps	result1, #0 wc
15d58                 | '   fillptr:=0
15d58     0B 00 00 CF 
15d5c     B6 E4 05 C1 |  if_b	add	objptr, ##5814
15d60     F2 00 68 CC |  if_b	wrlong	#0, objptr
15d64     0B 00 00 CF 
15d68     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
15d6c                 | '   val:=-12345
15d6c     E7 FF 7F CF 
15d70     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
15d74     28 00 90 CD |  if_b	jmp	#LR__1700
15d78                 | ' else 
15d78                 | '   val:=fillstack[fillptr]
15d78     0B 00 00 FF 
15d7c     B6 E4 05 F1 | 	add	objptr, ##5814
15d80     F2 00 02 FB | 	rdlong	_var01, objptr
15d84     02 00 66 F0 | 	shl	_var01, #2
15d88     0A 00 00 FF 
15d8c     00 E4 85 F1 | 	sub	objptr, ##5120
15d90     F2 00 02 F1 | 	add	_var01, objptr
15d94     00 01 02 FB | 	rdlong	_var01, _var01
15d98     01 00 00 FF 
15d9c     B6 E4 85 F1 | 	sub	objptr, ##694
15da0                 | LR__1700
15da0                 | ' return val
15da0     00 FB 01 F6 | 	mov	result1, _var01
15da4                 | _hg010b_spin2_fillpop_ret
15da4     2D 00 64 FD | 	ret
15da8                 | 
15da8                 | ' 
15da8                 | '       
15da8                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
15da8                 | _hg010b_spin2_fill
15da8     0B 4A 05 F6 | 	mov	COUNT_, #11
15dac     A8 00 A0 FD | 	call	#pushregs_
15db0                 | ' 
15db0                 | ' newcolor:=newcolor & 255
15db0     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
15db4                 | ' oldcolor:=oldcolor & 255
15db4     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
15db8                 | ' 
15db8                 | ' if (oldcolor == newcolor) 
15db8     0F 21 0A F2 | 	cmp	local02, local01 wz
15dbc                 | '   return
15dbc     70 02 90 AD |  if_e	jmp	#LR__1719
15dc0                 | ' 
15dc0                 | ' fillptr:=0
15dc0     0B 00 00 FF 
15dc4     B6 E4 05 F1 | 	add	objptr, ##5814
15dc8     F2 00 68 FC | 	wrlong	#0, objptr
15dcc                 | ' fillmax:=0
15dcc     04 E4 05 F1 | 	add	objptr, #4
15dd0     F2 00 68 FC | 	wrlong	#0, objptr
15dd4     0B 00 00 FF 
15dd8     BA E4 85 F1 | 	sub	objptr, ##5818
15ddc                 | ' fillpush(x)
15ddc     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
15de0                 | ' fillpush(y)
15de0     0A 13 02 F6 | 	mov	arg01, arg02
15de4     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
15de8                 | ' y:=fillpop()
15de8     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
15dec     FD 22 02 F6 | 	mov	local03, result1
15df0                 | ' x:=fillpop()
15df0     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
15df4     FD 24 02 F6 | 	mov	local04, result1
15df8                 | ' 'pinhigh(38)
15df8                 | ' repeat while (x>-1)       
15df8                 | LR__1710
15df8     00 24 56 F2 | 	cmps	local04, #0 wc
15dfc     30 02 90 CD |  if_b	jmp	#LR__1718
15e00                 | '  ' pintoggle(39)
15e00                 | '   x1 := x
15e00     12 27 02 F6 | 	mov	local05, local04
15e04                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
15e04                 | LR__1711
15e04     00 28 06 F6 | 	mov	local06, #0
15e08     00 2A 06 F6 | 	mov	local07, #0
15e0c     00 26 56 F2 | 	cmps	local05, #0 wc
15e10     01 2A 66 36 |  if_ae	neg	local07, #1
15e14     00 2A 0E F2 | 	cmp	local07, #0 wz
15e18     00 28 26 56 |  if_ne	not	local06, #0
15e1c     00 2C 06 F6 | 	mov	local08, #0
15e20     00 2E 06 F6 | 	mov	local09, #0
15e24     11 15 02 F6 | 	mov	arg02, local03
15e28     13 13 02 F6 | 	mov	arg01, local05
15e2c     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
15e30     10 FB 09 F2 | 	cmp	result1, local02 wz
15e34     00 2E 26 A6 |  if_e	not	local09, #0
15e38     00 2E 0E F2 | 	cmp	local09, #0 wz
15e3c     00 2C 26 56 |  if_ne	not	local08, #0
15e40     16 29 CA F7 | 	test	local06, local08 wz
15e44                 | '     x1--
15e44     01 26 86 51 |  if_ne	sub	local05, #1
15e48     B8 FF 9F 5D |  if_ne	jmp	#LR__1711
15e4c                 | '   x1++
15e4c     01 26 06 F1 | 	add	local05, #1
15e50                 | '   spanabove := 0
15e50     00 30 06 F6 | 	mov	local10, #0
15e54                 | '   spanbelow := 0
15e54     00 32 06 F6 | 	mov	local11, #0
15e58                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
15e58                 | LR__1712
15e58     00 28 06 F6 | 	mov	local06, #0
15e5c     02 00 00 FF 
15e60     00 26 56 F2 | 	cmps	local05, ##1024 wc
15e64     00 28 26 C6 |  if_b	not	local06, #0
15e68     00 2C 06 F6 | 	mov	local08, #0
15e6c     00 2E 06 F6 | 	mov	local09, #0
15e70     11 15 02 F6 | 	mov	arg02, local03
15e74     13 13 02 F6 | 	mov	arg01, local05
15e78     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
15e7c     10 FB 09 F2 | 	cmp	result1, local02 wz
15e80     00 2E 26 A6 |  if_e	not	local09, #0
15e84     00 2E 0E F2 | 	cmp	local09, #0 wz
15e88     00 2C 26 56 |  if_ne	not	local08, #0
15e8c     16 29 CA F7 | 	test	local06, local08 wz
15e90     88 01 90 AD |  if_e	jmp	#LR__1717
15e94                 | '     putpixel2 (x1,y, newcolor & 255)
15e94     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
15e98     13 13 02 F6 | 	mov	arg01, local05
15e9c     11 15 02 F6 | 	mov	arg02, local03
15ea0     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
15ea4                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
15ea4     00 28 06 F6 | 	mov	local06, #0
15ea8     00 2A 06 F6 | 	mov	local07, #0
15eac     00 30 0E F2 | 	cmp	local10, #0 wz
15eb0     01 22 56 A2 |  if_e	cmps	local03, #1 wc
15eb4     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
15eb8     00 2A 0E F2 | 	cmp	local07, #0 wz
15ebc     00 28 26 56 |  if_ne	not	local06, #0
15ec0     00 2C 06 F6 | 	mov	local08, #0
15ec4     00 2E 06 F6 | 	mov	local09, #0
15ec8     11 15 02 F6 | 	mov	arg02, local03
15ecc     01 14 86 F1 | 	sub	arg02, #1
15ed0     13 13 02 F6 | 	mov	arg01, local05
15ed4     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
15ed8     10 FB 09 F2 | 	cmp	result1, local02 wz
15edc     00 2E 26 A6 |  if_e	not	local09, #0
15ee0     00 2E 0E F2 | 	cmp	local09, #0 wz
15ee4     00 2C 26 56 |  if_ne	not	local08, #0
15ee8     16 29 CA F7 | 	test	local06, local08 wz
15eec     1C 00 90 AD |  if_e	jmp	#LR__1713
15ef0                 | '       fillpush(x1)
15ef0     13 13 02 F6 | 	mov	arg01, local05
15ef4     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
15ef8                 | '       fillpush(y-1)
15ef8     11 13 02 F6 | 	mov	arg01, local03
15efc     01 12 86 F1 | 	sub	arg01, #1
15f00     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
15f04                 | '       spanabove := 1 
15f04     01 30 06 F6 | 	mov	local10, #1
15f08     4C 00 90 FD | 	jmp	#LR__1714
15f0c                 | LR__1713
15f0c                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
15f0c     00 28 06 F6 | 	mov	local06, #0
15f10     00 2A 06 F6 | 	mov	local07, #0
15f14     00 30 0E F2 | 	cmp	local10, #0 wz
15f18     01 22 56 52 |  if_ne	cmps	local03, #1 wc
15f1c     01 2A 66 16 |  if_a	neg	local07, #1
15f20     00 2A 0E F2 | 	cmp	local07, #0 wz
15f24     00 28 26 56 |  if_ne	not	local06, #0
15f28     00 2C 06 F6 | 	mov	local08, #0
15f2c     00 2E 06 F6 | 	mov	local09, #0
15f30     11 15 02 F6 | 	mov	arg02, local03
15f34     01 14 86 F1 | 	sub	arg02, #1
15f38     13 13 02 F6 | 	mov	arg01, local05
15f3c     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
15f40     10 FB 09 F2 | 	cmp	result1, local02 wz
15f44     00 2E 26 56 |  if_ne	not	local09, #0
15f48     00 2E 0E F2 | 	cmp	local09, #0 wz
15f4c     00 2C 26 56 |  if_ne	not	local08, #0
15f50     16 29 CA F7 | 	test	local06, local08 wz
15f54                 | '       spanabove := 0 
15f54     00 30 06 56 |  if_ne	mov	local10, #0
15f58                 | LR__1714
15f58                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
15f58     00 28 06 F6 | 	mov	local06, #0
15f5c     00 2A 06 F6 | 	mov	local07, #0
15f60     00 32 0E F2 | 	cmp	local11, #0 wz
15f64     01 00 00 AF 
15f68     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
15f6c     01 2A 66 86 |  if_c_and_z	neg	local07, #1
15f70     00 2A 0E F2 | 	cmp	local07, #0 wz
15f74     00 28 26 56 |  if_ne	not	local06, #0
15f78     00 2C 06 F6 | 	mov	local08, #0
15f7c     00 2E 06 F6 | 	mov	local09, #0
15f80     11 15 02 F6 | 	mov	arg02, local03
15f84     01 14 06 F1 | 	add	arg02, #1
15f88     13 13 02 F6 | 	mov	arg01, local05
15f8c     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
15f90     10 FB 09 F2 | 	cmp	result1, local02 wz
15f94     00 2E 26 A6 |  if_e	not	local09, #0
15f98     00 2E 0E F2 | 	cmp	local09, #0 wz
15f9c     00 2C 26 56 |  if_ne	not	local08, #0
15fa0     16 29 CA F7 | 	test	local06, local08 wz
15fa4     1C 00 90 AD |  if_e	jmp	#LR__1715
15fa8                 | '       fillpush(x1)
15fa8     13 13 02 F6 | 	mov	arg01, local05
15fac     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
15fb0                 | '       fillpush(y + 1)
15fb0     11 13 02 F6 | 	mov	arg01, local03
15fb4     01 12 06 F1 | 	add	arg01, #1
15fb8     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
15fbc                 | '       spanBelow := 1
15fbc     01 32 06 F6 | 	mov	local11, #1
15fc0     50 00 90 FD | 	jmp	#LR__1716
15fc4                 | LR__1715
15fc4                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
15fc4     00 28 06 F6 | 	mov	local06, #0
15fc8     00 2A 06 F6 | 	mov	local07, #0
15fcc     00 32 0E F2 | 	cmp	local11, #0 wz
15fd0     01 00 00 5F 
15fd4     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
15fd8     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
15fdc     00 2A 0E F2 | 	cmp	local07, #0 wz
15fe0     00 28 26 56 |  if_ne	not	local06, #0
15fe4     00 2C 06 F6 | 	mov	local08, #0
15fe8     00 2E 06 F6 | 	mov	local09, #0
15fec     11 15 02 F6 | 	mov	arg02, local03
15ff0     01 14 06 F1 | 	add	arg02, #1
15ff4     13 13 02 F6 | 	mov	arg01, local05
15ff8     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
15ffc     10 FB 09 F2 | 	cmp	result1, local02 wz
16000     00 2E 26 56 |  if_ne	not	local09, #0
16004     00 2E 0E F2 | 	cmp	local09, #0 wz
16008     00 2C 26 56 |  if_ne	not	local08, #0
1600c     16 29 CA F7 | 	test	local06, local08 wz
16010                 | '       spanbelow := 0
16010     00 32 06 56 |  if_ne	mov	local11, #0
16014                 | LR__1716
16014                 | '     x1++
16014     01 26 06 F1 | 	add	local05, #1
16018     3C FE 9F FD | 	jmp	#LR__1712
1601c                 | LR__1717
1601c                 | '   y:=fillpop()
1601c     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
16020     FD 22 02 F6 | 	mov	local03, result1
16024                 | '   x:=fillpop()
16024     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
16028     FD 24 02 F6 | 	mov	local04, result1
1602c     C8 FD 9F FD | 	jmp	#LR__1710
16030                 | LR__1718
16030                 | LR__1719
16030     A7 F0 03 F6 | 	mov	ptra, fp
16034     B2 00 A0 FD | 	call	#popregs_
16038                 | _hg010b_spin2_fill_ret
16038     2D 00 64 FD | 	ret
1603c                 | 
1603c                 | ' 'pinlow(38)    
1603c                 | ' 
1603c                 | ' '-- A filled circle -----------------------------------------------------
1603c                 | ' 
1603c                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1603c                 | _hg010b_spin2_fcircle
1603c     08 4A 05 F6 | 	mov	COUNT_, #8
16040     A8 00 A0 FD | 	call	#pushregs_
16044     0B 1F 02 F6 | 	mov	local01, arg03
16048     FF FF 7F FF 
1604c     FE 1F 06 FD | 	qmul	local01, ##-2
16050     09 21 02 F6 | 	mov	local02, arg01
16054     0A 23 02 F6 | 	mov	local03, arg02
16058     0C 25 02 F6 | 	mov	local04, arg04
1605c                 | ' 
1605c                 | ' d:=5-4*r
1605c     0F 19 02 F6 | 	mov	arg04, local01
16060     02 18 66 F0 | 	shl	arg04, #2
16064     05 26 06 F6 | 	mov	local05, #5
16068     0C 27 82 F1 | 	sub	local05, arg04
1606c                 | ' x:=0
1606c     00 28 06 F6 | 	mov	local06, #0
16070                 | ' y:=r
16070                 | ' da:=(-2*r+5)*4
16070                 | ' db:=3*4
16070     0C 2A 06 F6 | 	mov	local07, #12
16074                 | ' repeat while (x<=y) 
16074     18 2C 62 FD | 	getqx	local08
16078     05 2C 06 F1 | 	add	local08, #5
1607c     02 2C 66 F0 | 	shl	local08, #2
16080                 | LR__1720
16080     0F 29 5A F2 | 	cmps	local06, local01 wcz
16084     B4 00 90 1D |  if_a	jmp	#LR__1722
16088                 | '   fastline(x0-x,x0+x,y0-y,c)
16088     10 13 02 F6 | 	mov	arg01, local02
1608c     14 13 82 F1 | 	sub	arg01, local06
16090     10 15 02 F6 | 	mov	arg02, local02
16094     14 15 02 F1 | 	add	arg02, local06
16098     11 17 02 F6 | 	mov	arg03, local03
1609c     0F 17 82 F1 | 	sub	arg03, local01
160a0     12 19 02 F6 | 	mov	arg04, local04
160a4     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
160a8                 | '   fastline(x0-x,x0+x,y0+y,c)
160a8     10 13 02 F6 | 	mov	arg01, local02
160ac     14 13 82 F1 | 	sub	arg01, local06
160b0     10 15 02 F6 | 	mov	arg02, local02
160b4     14 15 02 F1 | 	add	arg02, local06
160b8     11 17 02 F6 | 	mov	arg03, local03
160bc     0F 17 02 F1 | 	add	arg03, local01
160c0     12 19 02 F6 | 	mov	arg04, local04
160c4     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
160c8                 | '   fastline(x0-y,x0+y,y0-x,c)
160c8     10 13 02 F6 | 	mov	arg01, local02
160cc     0F 13 82 F1 | 	sub	arg01, local01
160d0     10 15 02 F6 | 	mov	arg02, local02
160d4     0F 15 02 F1 | 	add	arg02, local01
160d8     11 17 02 F6 | 	mov	arg03, local03
160dc     14 17 82 F1 | 	sub	arg03, local06
160e0     12 19 02 F6 | 	mov	arg04, local04
160e4     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
160e8                 | '   fastline(x0-y,x0+y,y0+x,c)
160e8     10 13 02 F6 | 	mov	arg01, local02
160ec     0F 13 82 F1 | 	sub	arg01, local01
160f0     10 15 02 F6 | 	mov	arg02, local02
160f4     0F 15 02 F1 | 	add	arg02, local01
160f8     11 17 02 F6 | 	mov	arg03, local03
160fc     14 17 02 F1 | 	add	arg03, local06
16100     12 19 02 F6 | 	mov	arg04, local04
16104     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
16108                 | '   if d>0 
16108     01 26 56 F2 | 	cmps	local05, #1 wc
1610c     18 00 90 CD |  if_b	jmp	#LR__1721
16110                 | '     d+=da
16110     16 27 02 F1 | 	add	local05, local08
16114                 | '     y-=1
16114     01 1E 86 F1 | 	sub	local01, #1
16118                 | '     x+=1
16118     01 28 06 F1 | 	add	local06, #1
1611c                 | '     da+=4*4
1611c     10 2C 06 F1 | 	add	local08, #16
16120                 | '     db+=2*4
16120     08 2A 06 F1 | 	add	local07, #8
16124     58 FF 9F FD | 	jmp	#LR__1720
16128                 | LR__1721
16128                 | '   else
16128                 | '     d+=db
16128     15 27 02 F1 | 	add	local05, local07
1612c                 | '     x+=1
1612c     01 28 06 F1 | 	add	local06, #1
16130                 | '     da+=2*4
16130     08 2C 06 F1 | 	add	local08, #8
16134                 | '     db+=2*4
16134     08 2A 06 F1 | 	add	local07, #8
16138     44 FF 9F FD | 	jmp	#LR__1720
1613c                 | LR__1722
1613c     A7 F0 03 F6 | 	mov	ptra, fp
16140     B2 00 A0 FD | 	call	#popregs_
16144                 | _hg010b_spin2_fcircle_ret
16144     2D 00 64 FD | 	ret
16148                 | 
16148                 | '  
16148                 | ' '-- A circle ------------------------------------------------------------ 
16148                 | '  
16148                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
16148                 | _hg010b_spin2_circle
16148     08 4A 05 F6 | 	mov	COUNT_, #8
1614c     A8 00 A0 FD | 	call	#pushregs_
16150     0B 1F 02 F6 | 	mov	local01, arg03
16154     FF FF 7F FF 
16158     FE 1F 06 FD | 	qmul	local01, ##-2
1615c     09 21 02 F6 | 	mov	local02, arg01
16160     0A 23 02 F6 | 	mov	local03, arg02
16164     0C 25 02 F6 | 	mov	local04, arg04
16168                 | ' 
16168                 | '  
16168                 | ' d:=5-4*r
16168     0F 19 02 F6 | 	mov	arg04, local01
1616c     02 18 66 F0 | 	shl	arg04, #2
16170     05 26 06 F6 | 	mov	local05, #5
16174     0C 27 82 F1 | 	sub	local05, arg04
16178                 | ' x:=0
16178     00 28 06 F6 | 	mov	local06, #0
1617c                 | ' y:=r
1617c                 | ' da:=(-2*r+5)*4
1617c                 | ' db:=3*4
1617c     0C 2A 06 F6 | 	mov	local07, #12
16180                 | ' repeat while (x<=y) 
16180     18 2C 62 FD | 	getqx	local08
16184     05 2C 06 F1 | 	add	local08, #5
16188     02 2C 66 F0 | 	shl	local08, #2
1618c                 | LR__1730
1618c     0F 29 5A F2 | 	cmps	local06, local01 wcz
16190     F4 00 90 1D |  if_a	jmp	#LR__1732
16194                 | '   putpixel(x0-x,y0-y,c)
16194     10 13 02 F6 | 	mov	arg01, local02
16198     14 13 82 F1 | 	sub	arg01, local06
1619c     11 15 02 F6 | 	mov	arg02, local03
161a0     0F 15 82 F1 | 	sub	arg02, local01
161a4     12 17 02 F6 | 	mov	arg03, local04
161a8     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
161ac                 | '   putpixel(x0-x,y0+y,c)
161ac     10 13 02 F6 | 	mov	arg01, local02
161b0     14 13 82 F1 | 	sub	arg01, local06
161b4     11 15 02 F6 | 	mov	arg02, local03
161b8     0F 15 02 F1 | 	add	arg02, local01
161bc     12 17 02 F6 | 	mov	arg03, local04
161c0     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
161c4                 | '   putpixel(x0+x,y0-y,c)
161c4     10 13 02 F6 | 	mov	arg01, local02
161c8     14 13 02 F1 | 	add	arg01, local06
161cc     11 15 02 F6 | 	mov	arg02, local03
161d0     0F 15 82 F1 | 	sub	arg02, local01
161d4     12 17 02 F6 | 	mov	arg03, local04
161d8     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
161dc                 | '   putpixel(x0+x,y0+y,c)
161dc     10 13 02 F6 | 	mov	arg01, local02
161e0     14 13 02 F1 | 	add	arg01, local06
161e4     11 15 02 F6 | 	mov	arg02, local03
161e8     0F 15 02 F1 | 	add	arg02, local01
161ec     12 17 02 F6 | 	mov	arg03, local04
161f0     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
161f4                 | '   putpixel(x0-y,y0-x,c)
161f4     10 13 02 F6 | 	mov	arg01, local02
161f8     0F 13 82 F1 | 	sub	arg01, local01
161fc     11 15 02 F6 | 	mov	arg02, local03
16200     14 15 82 F1 | 	sub	arg02, local06
16204     12 17 02 F6 | 	mov	arg03, local04
16208     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1620c                 | '   putpixel(x0-y,y0+x,c)
1620c     10 13 02 F6 | 	mov	arg01, local02
16210     0F 13 82 F1 | 	sub	arg01, local01
16214     11 15 02 F6 | 	mov	arg02, local03
16218     14 15 02 F1 | 	add	arg02, local06
1621c     12 17 02 F6 | 	mov	arg03, local04
16220     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
16224                 | '   putpixel(x0+y,y0-x,c)
16224     10 13 02 F6 | 	mov	arg01, local02
16228     0F 13 02 F1 | 	add	arg01, local01
1622c     11 15 02 F6 | 	mov	arg02, local03
16230     14 15 82 F1 | 	sub	arg02, local06
16234     12 17 02 F6 | 	mov	arg03, local04
16238     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1623c                 | '   putpixel(x0+y,y0+x,c)
1623c     10 13 02 F6 | 	mov	arg01, local02
16240     0F 13 02 F1 | 	add	arg01, local01
16244     11 15 02 F6 | 	mov	arg02, local03
16248     14 15 02 F1 | 	add	arg02, local06
1624c     12 17 02 F6 | 	mov	arg03, local04
16250     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
16254                 | '   if d>0 
16254     01 26 56 F2 | 	cmps	local05, #1 wc
16258     18 00 90 CD |  if_b	jmp	#LR__1731
1625c                 | '     d+=da
1625c     16 27 02 F1 | 	add	local05, local08
16260                 | '     y-=1
16260     01 1E 86 F1 | 	sub	local01, #1
16264                 | '     x+=1
16264     01 28 06 F1 | 	add	local06, #1
16268                 | '     da+=4*4
16268     10 2C 06 F1 | 	add	local08, #16
1626c                 | '     db+=2*4
1626c     08 2A 06 F1 | 	add	local07, #8
16270     18 FF 9F FD | 	jmp	#LR__1730
16274                 | LR__1731
16274                 | '   else
16274                 | '     d+=db
16274     15 27 02 F1 | 	add	local05, local07
16278                 | '     x+=1
16278     01 28 06 F1 | 	add	local06, #1
1627c                 | '     da+=2*4
1627c     08 2C 06 F1 | 	add	local08, #8
16280                 | '     db+=2*4
16280     08 2A 06 F1 | 	add	local07, #8
16284     04 FF 9F FD | 	jmp	#LR__1730
16288                 | LR__1732
16288     A7 F0 03 F6 | 	mov	ptra, fp
1628c     B2 00 A0 FD | 	call	#popregs_
16290                 | _hg010b_spin2_circle_ret
16290     2D 00 64 FD | 	ret
16294                 | 
16294                 | '     
16294                 | ' '-- A frame (an empty rectangle) ---------------------------------------
16294                 | ' 
16294                 | ' pub frame(x1,y1,x2,y2,c)
16294                 | _hg010b_spin2_frame
16294     05 4A 05 F6 | 	mov	COUNT_, #5
16298     A8 00 A0 FD | 	call	#pushregs_
1629c     09 1F 02 F6 | 	mov	local01, arg01
162a0     0A 21 02 F6 | 	mov	local02, arg02
162a4     0B 23 02 F6 | 	mov	local03, arg03
162a8     0C 25 02 F6 | 	mov	local04, arg04
162ac     0D 27 02 F6 | 	mov	local05, arg05
162b0                 | ' 
162b0                 | ' fastline(x1,x2,y1,c)
162b0     0F 13 02 F6 | 	mov	arg01, local01
162b4     11 15 02 F6 | 	mov	arg02, local03
162b8     10 17 02 F6 | 	mov	arg03, local02
162bc     13 19 02 F6 | 	mov	arg04, local05
162c0     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
162c4                 | ' fastline(x1,x2,y2,c)
162c4     0F 13 02 F6 | 	mov	arg01, local01
162c8     11 15 02 F6 | 	mov	arg02, local03
162cc     12 17 02 F6 | 	mov	arg03, local04
162d0     13 19 02 F6 | 	mov	arg04, local05
162d4     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
162d8                 | ' line(x1,y1,x1,y2,c)
162d8     0F 13 02 F6 | 	mov	arg01, local01
162dc     10 15 02 F6 | 	mov	arg02, local02
162e0     0F 17 02 F6 | 	mov	arg03, local01
162e4     12 19 02 F6 | 	mov	arg04, local04
162e8     13 1B 02 F6 | 	mov	arg05, local05
162ec                 | ' draw(x1,y1,x2,y2,c)
162ec     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
162f0                 | ' line(x2,y1,x2,y2,c)
162f0     11 13 02 F6 | 	mov	arg01, local03
162f4     10 15 02 F6 | 	mov	arg02, local02
162f8     11 17 02 F6 | 	mov	arg03, local03
162fc     12 19 02 F6 | 	mov	arg04, local04
16300     13 1B 02 F6 | 	mov	arg05, local05
16304                 | ' draw(x1,y1,x2,y2,c)
16304     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
16308     A7 F0 03 F6 | 	mov	ptra, fp
1630c     B2 00 A0 FD | 	call	#popregs_
16310                 | _hg010b_spin2_frame_ret
16310     2D 00 64 FD | 	ret
16314                 | 
16314                 | ' 
16314                 | ' '-- A box (a filled rectangle) ----------------------------------------
16314                 | ' 
16314                 | ' pub box(x1,y1,x2,y2,c) |yy
16314                 | _hg010b_spin2_box
16314     06 4A 05 F6 | 	mov	COUNT_, #6
16318     A8 00 A0 FD | 	call	#pushregs_
1631c     09 1F 02 F6 | 	mov	local01, arg01
16320     0A 21 02 F6 | 	mov	local02, arg02
16324     0B 23 02 F6 | 	mov	local03, arg03
16328     0C 25 02 F6 | 	mov	local04, arg04
1632c     0D 27 02 F6 | 	mov	local05, arg05
16330                 | ' 
16330                 | ' repeat yy from y1 to y2
16330     10 25 52 F2 | 	cmps	local04, local02 wc
16334     01 28 86 F6 | 	negc	local06, #1
16338     14 25 02 F1 | 	add	local04, local06
1633c                 | LR__1740
1633c                 | '   fastline(x1,x2,yy,c)
1633c     0F 13 02 F6 | 	mov	arg01, local01
16340     11 15 02 F6 | 	mov	arg02, local03
16344     13 19 02 F6 | 	mov	arg04, local05
16348     10 17 02 F6 | 	mov	arg03, local02
1634c     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
16350     14 21 02 F1 | 	add	local02, local06
16354     12 21 0A F2 | 	cmp	local02, local04 wz
16358     E0 FF 9F 5D |  if_ne	jmp	#LR__1740
1635c     A7 F0 03 F6 | 	mov	ptra, fp
16360     B2 00 A0 FD | 	call	#popregs_
16364                 | _hg010b_spin2_box_ret
16364     2D 00 64 FD | 	ret
16368                 | 
16368                 | '       
16368                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
16368                 | _hg010b_spin2_putcharxycgf
16368                 | ' 
16368                 | '  
16368                 | ' repeat yy from 0 to 15
16368     00 00 06 F6 | 	mov	_var01, #0
1636c     97 8C 48 FB | 	callpa	#(@LR__1752-@LR__1750)>>2,fcache_load_ptr_
16370                 | LR__1750
16370                 | ' 
16370                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
16370     91 E4 05 F1 | 	add	objptr, #145
16374     F2 02 02 FB | 	rdlong	_var02, objptr
16378     0A 02 66 F0 | 	shl	_var02, #10
1637c     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
16380     01 05 02 F1 | 	add	_var03, _var02
16384     0B 03 02 F6 | 	mov	_var02, arg03
16388     04 02 66 F0 | 	shl	_var02, #4
1638c     01 05 02 F1 | 	add	_var03, _var02
16390     00 05 02 F1 | 	add	_var03, _var01
16394     02 05 C2 FA | 	rdbyte	_var03, _var03
16398                 | '   asm
16398     00 04 0E F4 | 	testb	_var03, #0 wz
1639c     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
163a0     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
163a4     01 04 0E F4 | 	testb	_var03, #1 wz
163a8     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
163ac     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
163b0     02 04 0E F4 | 	testb	_var03, #2 wz
163b4     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
163b8     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
163bc     03 04 0E F4 | 	testb	_var03, #3 wz
163c0     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
163c4     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
163c8     04 04 0E F4 | 	testb	_var03, #4 wz
163cc     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
163d0     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
163d4     05 04 0E F4 | 	testb	_var03, #5 wz
163d8     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
163dc     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
163e0     06 04 0E F4 | 	testb	_var03, #6 wz
163e4     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
163e8     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
163ec     07 04 0E F4 | 	testb	_var03, #7 wz
163f0     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
163f4     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
163f8                 | '   
163f8                 | '   ccc[0]:=c1
163f8     99 E5 05 F1 | 	add	objptr, #409
163fc     F2 06 62 FC | 	wrlong	_var04, objptr
16400                 | '   ccc[1]:=c2 
16400     04 E4 05 F1 | 	add	objptr, #4
16404     F2 08 62 FC | 	wrlong	_var05, objptr
16408                 | '   long[mailbox0][2]:=8
16408     49 E4 85 F1 | 	sub	objptr, #73
1640c     F2 04 02 FB | 	rdlong	_var03, objptr
16410     08 04 06 F1 | 	add	_var03, #8
16414     02 11 68 FC | 	wrlong	#8, _var03
16418                 | '   long[mailbox0][1]:=@ccc
16418     45 E4 05 F1 | 	add	objptr, #69
1641c     F2 04 02 F6 | 	mov	_var03, objptr
16420     45 E4 85 F1 | 	sub	objptr, #69
16424     F2 02 02 FB | 	rdlong	_var02, objptr
16428     04 02 06 F1 | 	add	_var02, #4
1642c     01 05 62 FC | 	wrlong	_var03, _var02
16430                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
16430     0C E5 85 F1 | 	sub	objptr, #268
16434     F2 04 02 FB | 	rdlong	_var03, objptr
16438     0A 03 02 F6 | 	mov	_var02, arg02
1643c     00 03 02 F1 | 	add	_var02, _var01
16440     0A 02 66 F0 | 	shl	_var02, #10
16444     09 0B 02 F6 | 	mov	_var06, arg01
16448     02 0A 66 F0 | 	shl	_var06, #2
1644c     05 03 02 F1 | 	add	_var02, _var06
16450     01 05 02 F1 | 	add	_var03, _var02
16454     00 00 78 FF 
16458     00 04 06 F1 | 	add	_var03, ##-268435456
1645c     0C E5 05 F1 | 	add	objptr, #268
16460     F2 0A 02 FB | 	rdlong	_var06, objptr
16464     05 05 62 FC | 	wrlong	_var03, _var06
16468                 | '   repeat
16468                 | LR__1751
16468     F2 04 02 FB | 	rdlong	_var03, objptr
1646c     02 03 02 FB | 	rdlong	_var02, _var03
16470     00 02 56 F2 | 	cmps	_var02, #0 wc
16474     F0 FF 9F CD |  if_b	jmp	#LR__1751
16478     E5 E5 85 F1 | 	sub	objptr, #485
1647c     01 00 06 F1 | 	add	_var01, #1
16480     10 00 56 F2 | 	cmps	_var01, #16 wc
16484     E8 FE 9F CD |  if_b	jmp	#LR__1750
16488                 | LR__1752
16488                 | _hg010b_spin2_putcharxycgf_ret
16488     2D 00 64 FD | 	ret
1648c                 | 
1648c                 | ' 
1648c                 | ' 
1648c                 | ' '**********************************************************************r***
1648c                 | ' '                                                                        *
1648c                 | ' ' Font related functions                                                 *
1648c                 | ' '                                                                        *
1648c                 | ' '*************************************************************************
1648c                 | ' 
1648c                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1648c                 | ' 
1648c                 | ' pub setfontfamily(afontnum)
1648c                 | _hg010b_spin2_setfontfamily
1648c                 | ' 
1648c                 | ' font_family:=afontnum
1648c     91 E4 05 F1 | 	add	objptr, #145
16490     F2 12 62 FC | 	wrlong	arg01, objptr
16494     91 E4 85 F1 | 	sub	objptr, #145
16498                 | ' 'if afontnum==8
16498                 | ' '  font_ptr:=@amiga_font
16498                 | ' 
16498                 | ' if afontnum==4
16498     04 12 0E F2 | 	cmp	arg01, #4 wz
1649c                 | '   font_ptr:=@st_font
1649c     08 00 00 AF 
164a0     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
164a4     04 E4 05 A1 |  if_e	add	objptr, #4
164a8     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
164ac     04 E4 85 A1 |  if_e	sub	objptr, #4
164b0     08 00 00 AF 
164b4     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
164b8                 | ' if afontnum==0
164b8     00 12 0E F2 | 	cmp	arg01, #0 wz
164bc                 | '   font_ptr:=@vga_font
164bc     04 E4 05 A1 |  if_e	add	objptr, #4
164c0     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
164c4     04 E4 85 A1 |  if_e	sub	objptr, #4
164c8                 | _hg010b_spin2_setfontfamily_ret
164c8     2D 00 64 FD | 	ret
164cc                 | 
164cc                 | ' 
164cc                 | ' '*************************************************************************
164cc                 | ' '                                                                        *
164cc                 | ' '  Cursor functions                                                      *
164cc                 | ' '                                                                        *
164cc                 | ' '*************************************************************************
164cc                 | ' 
164cc                 | ' 
164cc                 | ' pub setcursorpos(x,y)
164cc                 | _hg010b_spin2_setcursorpos
164cc                 | ' 
164cc                 | ' ''---------- Set the (x,y) position of cursor
164cc                 | ' 
164cc                 | ' cursor_x:=x
164cc     38 E4 05 F1 | 	add	objptr, #56
164d0     F2 12 52 FC | 	wrword	arg01, objptr
164d4                 | ' cursor_y:=y
164d4     02 E4 05 F1 | 	add	objptr, #2
164d8     F2 14 42 FC | 	wrbyte	arg02, objptr
164dc                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
164dc     02 E4 85 F1 | 	sub	objptr, #2
164e0     F2 14 E2 FA | 	rdword	arg02, objptr
164e4     02 14 66 F0 | 	shl	arg02, #2
164e8     02 E4 05 F1 | 	add	objptr, #2
164ec     F2 16 C2 FA | 	rdbyte	arg03, objptr
164f0     3A E4 85 F1 | 	sub	objptr, #58
164f4     04 16 66 F0 | 	shl	arg03, #4
164f8     11 12 06 F6 | 	mov	arg01, #17
164fc     70 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
16500                 | _hg010b_spin2_setcursorpos_ret
16500     2D 00 64 FD | 	ret
16504                 | 
16504                 | ' 
16504                 | ' '*************************************************************************
16504                 | ' '                                                                        *
16504                 | ' '  VBlank functions                                                      *
16504                 | ' '                                                                        *
16504                 | ' '*************************************************************************
16504                 | ' 
16504                 | ' pub waitvbl(amount) | i
16504                 | _hg010b_spin2_waitvbl
16504     03 4A 05 F6 | 	mov	COUNT_, #3
16508     A8 00 A0 FD | 	call	#pushregs_
1650c     09 1F 02 F6 | 	mov	local01, arg01
16510                 | ' 
16510                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
16510                 | ' 
16510                 | ' repeat i from 1 to amount
16510     01 20 06 F6 | 	mov	local02, #1
16514     01 1E 56 F2 | 	cmps	local01, #1 wc
16518     01 22 86 F6 | 	negc	local03, #1
1651c     11 1F 02 F1 | 	add	local01, local03
16520                 | LR__1760
16520                 | '   repeat until vblank==0
16520                 | LR__1761
16520     45 E4 05 F1 | 	add	objptr, #69
16524     F2 12 0A FB | 	rdlong	arg01, objptr wz
16528     45 E4 85 F1 | 	sub	objptr, #69
1652c     0C 00 90 AD |  if_e	jmp	#LR__1762
16530                 | '     waitus(100)
16530     64 12 06 F6 | 	mov	arg01, #100
16534     80 16 B0 FD | 	call	#__system___waitus
16538     E4 FF 9F FD | 	jmp	#LR__1761
1653c                 | LR__1762
1653c                 | '   repeat until vblank==1
1653c                 | LR__1763
1653c     45 E4 05 F1 | 	add	objptr, #69
16540     F2 12 02 FB | 	rdlong	arg01, objptr
16544     45 E4 85 F1 | 	sub	objptr, #69
16548     01 12 0E F2 | 	cmp	arg01, #1 wz
1654c     0C 00 90 AD |  if_e	jmp	#LR__1764
16550                 | '     waitus(100)
16550     64 12 06 F6 | 	mov	arg01, #100
16554     60 16 B0 FD | 	call	#__system___waitus
16558     E0 FF 9F FD | 	jmp	#LR__1763
1655c                 | LR__1764
1655c     11 21 02 F1 | 	add	local02, local03
16560     0F 21 0A F2 | 	cmp	local02, local01 wz
16564     B8 FF 9F 5D |  if_ne	jmp	#LR__1760
16568     A7 F0 03 F6 | 	mov	ptra, fp
1656c     B2 00 A0 FD | 	call	#popregs_
16570                 | _hg010b_spin2_waitvbl_ret
16570     2D 00 64 FD | 	ret
16574                 | 
16574                 | ' 
16574                 | ' 
16574                 | ' pub cls(fc,bc)   :c,i
16574                 | _hg010b_spin2_cls
16574     02 4A 05 F6 | 	mov	COUNT_, #2
16578     A8 00 A0 FD | 	call	#pushregs_
1657c     09 1F 02 F6 | 	mov	local01, arg01
16580     0A 21 02 F6 | 	mov	local02, arg02
16584                 | ' 
16584                 | ' c:=bc
16584                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
16584     D9 E4 05 F1 | 	add	objptr, #217
16588     F2 12 02 FB | 	rdlong	arg01, objptr
1658c     A5 E4 85 F1 | 	sub	objptr, #165
16590     F2 16 02 FB | 	rdlong	arg03, objptr
16594     02 16 66 F0 | 	shl	arg03, #2
16598     10 15 02 F6 | 	mov	arg02, local02
1659c     00 18 06 F6 | 	mov	arg04, #0
165a0     01 1A 06 F6 | 	mov	arg05, #1
165a4     0B 00 00 FF 
165a8     8C E4 05 F1 | 	add	objptr, ##5772
165ac     F0 08 B0 FD | 	call	#_psram_spin2_fill
165b0                 | ' setwritecolors(fc,bc)
165b0                 | ' 
165b0                 | ' write_color:=ff
165b0     0B 00 00 FF 
165b4     83 E4 85 F1 | 	sub	objptr, ##5763
165b8     F2 1E 62 FC | 	wrlong	local01, objptr
165bc                 | ' write_background:=bb
165bc     04 E4 05 F1 | 	add	objptr, #4
165c0     F2 20 62 FC | 	wrlong	local02, objptr
165c4                 | ' cursor_x:=0
165c4     09 E4 85 F1 | 	sub	objptr, #9
165c8     F2 00 58 FC | 	wrword	#0, objptr
165cc                 | ' cursor_y:=0
165cc     02 E4 05 F1 | 	add	objptr, #2
165d0     F2 00 48 FC | 	wrbyte	#0, objptr
165d4                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
165d4     02 E4 85 F1 | 	sub	objptr, #2
165d8     F2 14 E2 FA | 	rdword	arg02, objptr
165dc     02 14 66 F0 | 	shl	arg02, #2
165e0     02 E4 05 F1 | 	add	objptr, #2
165e4     F2 16 C2 FA | 	rdbyte	arg03, objptr
165e8     3A E4 85 F1 | 	sub	objptr, #58
165ec     04 16 66 F0 | 	shl	arg03, #4
165f0     11 12 06 F6 | 	mov	arg01, #17
165f4     78 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
165f8                 | ' setcursorcolor(fc)
165f8     0F 13 02 F6 | 	mov	arg01, local01
165fc     2C EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
16600     10 FB 01 F6 | 	mov	result1, local02
16604     00 FC 05 F6 | 	mov	result2, #0
16608     A7 F0 03 F6 | 	mov	ptra, fp
1660c     B2 00 A0 FD | 	call	#popregs_
16610                 | _hg010b_spin2_cls_ret
16610     2D 00 64 FD | 	ret
16614                 | 
16614                 | ' 
16614                 | ' ''---------- Output a char at the cursor position, move the cursor 
16614                 | ' 
16614                 | ' pub putchar(achar) | c,x,y,l,newcpl
16614                 | _hg010b_spin2_putchar
16614     01 4A 05 F6 | 	mov	COUNT_, #1
16618     A8 00 A0 FD | 	call	#pushregs_
1661c     09 1F 02 F6 | 	mov	local01, arg01
16620                 | ' 
16620                 | ' if achar==10
16620     0A 1E 0E F2 | 	cmp	local01, #10 wz
16624                 | '   crlf()
16624     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
16628                 | ' if achar==9
16628     09 1E 0E F2 | 	cmp	local01, #9 wz
1662c     18 00 90 5D |  if_ne	jmp	#LR__1770
16630                 | '   cursor_x:=(cursor_x& %11110000)+16
16630     38 E4 05 F1 | 	add	objptr, #56
16634     F2 16 E2 FA | 	rdword	arg03, objptr
16638     F0 16 06 F5 | 	and	arg03, #240
1663c     10 16 06 F1 | 	add	arg03, #16
16640     F2 16 52 FC | 	wrword	arg03, objptr
16644     38 E4 85 F1 | 	sub	objptr, #56
16648                 | LR__1770
16648                 | '   
16648                 | ' if (achar<>9) && (achar<>10) 
16648     09 1E 0E F2 | 	cmp	local01, #9 wz
1664c     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
16650     44 00 90 AD |  if_e	jmp	#LR__1771
16654                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
16654     38 E4 05 F1 | 	add	objptr, #56
16658     F2 12 E2 FA | 	rdword	arg01, objptr
1665c     02 E4 05 F1 | 	add	objptr, #2
16660     F2 14 C2 FA | 	rdbyte	arg02, objptr
16664     04 14 66 F0 | 	shl	arg02, #4
16668     03 E4 05 F1 | 	add	objptr, #3
1666c     F2 18 02 FB | 	rdlong	arg04, objptr
16670     04 E4 05 F1 | 	add	objptr, #4
16674     F2 1A 02 FB | 	rdlong	arg05, objptr
16678     41 E4 85 F1 | 	sub	objptr, #65
1667c     0F 17 02 F6 | 	mov	arg03, local01
16680     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
16684                 | '   cursor_x+=2
16684     38 E4 05 F1 | 	add	objptr, #56
16688     F2 1E E2 FA | 	rdword	local01, objptr
1668c     02 1E 06 F1 | 	add	local01, #2
16690     F2 1E 52 FC | 	wrword	local01, objptr
16694     38 E4 85 F1 | 	sub	objptr, #56
16698                 | LR__1771
16698                 | ' 
16698                 | ' if cursor_x>=256
16698     38 E4 05 F1 | 	add	objptr, #56
1669c     F2 1E E2 FA | 	rdword	local01, objptr
166a0     38 E4 85 F1 | 	sub	objptr, #56
166a4     00 1F 56 F2 | 	cmps	local01, #256 wc
166a8     64 00 90 CD |  if_b	jmp	#LR__1773
166ac                 | '   cursor_x:=0
166ac     38 E4 05 F1 | 	add	objptr, #56
166b0     F2 00 58 FC | 	wrword	#0, objptr
166b4                 | '   cursor_y+=1
166b4     02 E4 05 F1 | 	add	objptr, #2
166b8     F2 1E C2 FA | 	rdbyte	local01, objptr
166bc     01 1E 06 F1 | 	add	local01, #1
166c0     F2 1E 42 FC | 	wrbyte	local01, objptr
166c4                 | '   if cursor_y>st_lines-1
166c4     C3 E4 05 F1 | 	add	objptr, #195
166c8     F2 1E 02 FB | 	rdlong	local01, objptr
166cc     01 1E 86 F1 | 	sub	local01, #1
166d0     C3 E4 85 F1 | 	sub	objptr, #195
166d4     F2 16 C2 FA | 	rdbyte	arg03, objptr
166d8     3A E4 85 F1 | 	sub	objptr, #58
166dc     0F 17 5A F2 | 	cmps	arg03, local01 wcz
166e0     2C 00 90 ED |  if_be	jmp	#LR__1772
166e4                 | '     scrollup()
166e4     00 12 06 F6 | 	mov	arg01, #0
166e8     01 00 00 FF 
166ec     40 14 06 F6 | 	mov	arg02, ##576
166f0     10 16 06 F6 | 	mov	arg03, #16
166f4     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
166f8                 | '     cursor_y:=st_lines-1
166f8     FD E4 05 F1 | 	add	objptr, #253
166fc     F2 1E 02 FB | 	rdlong	local01, objptr
16700     01 1E 86 F1 | 	sub	local01, #1
16704     C3 E4 85 F1 | 	sub	objptr, #195
16708     F2 1E 42 FC | 	wrbyte	local01, objptr
1670c     3A E4 85 F1 | 	sub	objptr, #58
16710                 | LR__1772
16710                 | LR__1773
16710                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
16710     38 E4 05 F1 | 	add	objptr, #56
16714     F2 14 E2 FA | 	rdword	arg02, objptr
16718     02 14 66 F0 | 	shl	arg02, #2
1671c     02 E4 05 F1 | 	add	objptr, #2
16720     F2 16 C2 FA | 	rdbyte	arg03, objptr
16724     3A E4 85 F1 | 	sub	objptr, #58
16728     04 16 66 F0 | 	shl	arg03, #4
1672c     11 12 06 F6 | 	mov	arg01, #17
16730     3C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
16734     A7 F0 03 F6 | 	mov	ptra, fp
16738     B2 00 A0 FD | 	call	#popregs_
1673c                 | _hg010b_spin2_putchar_ret
1673c     2D 00 64 FD | 	ret
16740                 | 
16740                 | '     
16740                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
16740                 | ' 
16740                 | ' pub putchar2(achar) | c,x,y,l,newcpl
16740                 | _hg010b_spin2_putchar2
16740     01 4A 05 F6 | 	mov	COUNT_, #1
16744     A8 00 A0 FD | 	call	#pushregs_
16748                 | ' 
16748                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
16748     38 E4 05 F1 | 	add	objptr, #56
1674c     F2 1E E2 FA | 	rdword	local01, objptr
16750     02 E4 05 F1 | 	add	objptr, #2
16754     F2 14 C2 FA | 	rdbyte	arg02, objptr
16758     04 14 66 F0 | 	shl	arg02, #4
1675c     09 17 02 F6 | 	mov	arg03, arg01
16760     03 E4 05 F1 | 	add	objptr, #3
16764     F2 18 02 FB | 	rdlong	arg04, objptr
16768     04 E4 05 F1 | 	add	objptr, #4
1676c     F2 1A 02 FB | 	rdlong	arg05, objptr
16770     41 E4 85 F1 | 	sub	objptr, #65
16774     0F 13 02 F6 | 	mov	arg01, local01
16778     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
1677c                 | ' cursor_x+=2
1677c     38 E4 05 F1 | 	add	objptr, #56
16780     F2 1E E2 FA | 	rdword	local01, objptr
16784     02 1E 06 F1 | 	add	local01, #2
16788     F2 1E 52 FC | 	wrword	local01, objptr
1678c                 | ' if cursor_x>=256
1678c     F2 1E E2 FA | 	rdword	local01, objptr
16790     38 E4 85 F1 | 	sub	objptr, #56
16794     00 1F 56 F2 | 	cmps	local01, #256 wc
16798     64 00 90 CD |  if_b	jmp	#LR__1781
1679c                 | '   cursor_x:=0
1679c     38 E4 05 F1 | 	add	objptr, #56
167a0     F2 00 58 FC | 	wrword	#0, objptr
167a4                 | '   cursor_y+=1
167a4     02 E4 05 F1 | 	add	objptr, #2
167a8     F2 1E C2 FA | 	rdbyte	local01, objptr
167ac     01 1E 06 F1 | 	add	local01, #1
167b0     F2 1E 42 FC | 	wrbyte	local01, objptr
167b4                 | '   if cursor_y>st_lines-1
167b4     C3 E4 05 F1 | 	add	objptr, #195
167b8     F2 1E 02 FB | 	rdlong	local01, objptr
167bc     01 1E 86 F1 | 	sub	local01, #1
167c0     C3 E4 85 F1 | 	sub	objptr, #195
167c4     F2 1A C2 FA | 	rdbyte	arg05, objptr
167c8     3A E4 85 F1 | 	sub	objptr, #58
167cc     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
167d0     2C 00 90 ED |  if_be	jmp	#LR__1780
167d4                 | '     scrollup()
167d4     00 12 06 F6 | 	mov	arg01, #0
167d8     01 00 00 FF 
167dc     40 14 06 F6 | 	mov	arg02, ##576
167e0     10 16 06 F6 | 	mov	arg03, #16
167e4     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
167e8                 | '     cursor_y:=st_lines-1
167e8     FD E4 05 F1 | 	add	objptr, #253
167ec     F2 1E 02 FB | 	rdlong	local01, objptr
167f0     01 1E 86 F1 | 	sub	local01, #1
167f4     C3 E4 85 F1 | 	sub	objptr, #195
167f8     F2 1E 42 FC | 	wrbyte	local01, objptr
167fc     3A E4 85 F1 | 	sub	objptr, #58
16800                 | LR__1780
16800                 | LR__1781
16800                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
16800     38 E4 05 F1 | 	add	objptr, #56
16804     F2 14 E2 FA | 	rdword	arg02, objptr
16808     02 14 66 F0 | 	shl	arg02, #2
1680c     02 E4 05 F1 | 	add	objptr, #2
16810     F2 16 C2 FA | 	rdbyte	arg03, objptr
16814     3A E4 85 F1 | 	sub	objptr, #58
16818     04 16 66 F0 | 	shl	arg03, #4
1681c     11 12 06 F6 | 	mov	arg01, #17
16820     4C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
16824     A7 F0 03 F6 | 	mov	ptra, fp
16828     B2 00 A0 FD | 	call	#popregs_
1682c                 | _hg010b_spin2_putchar2_ret
1682c     2D 00 64 FD | 	ret
16830                 | 
16830                 | ' ''--------- Output a string at the cursor position, move the cursor  
16830                 | ' 
16830                 | ' pub write(text) | iii,c,ncx,ncy
16830                 | _hg010b_spin2_write
16830     04 4A 05 F6 | 	mov	COUNT_, #4
16834     A8 00 A0 FD | 	call	#pushregs_
16838     09 1F 02 F6 | 	mov	local01, arg01
1683c                 | ' 
1683c                 | ' repeat iii from 0 to strsize(text)-1
1683c     00 20 06 F6 | 	mov	local02, #0
16840     0F 13 02 F6 | 	mov	arg01, local01
16844     09 23 02 F6 | 	mov	local03, arg01
16848     97 06 48 FB | 	callpa	#(@LR__1791-@LR__1790)>>2,fcache_load_ptr_
1684c                 | LR__1790
1684c     11 FB C9 FA | 	rdbyte	result1, local03 wz
16850     01 22 06 51 |  if_ne	add	local03, #1
16854     F4 FF 9F 5D |  if_ne	jmp	#LR__1790
16858                 | LR__1791
16858     09 23 82 F1 | 	sub	local03, arg01
1685c     01 22 86 F1 | 	sub	local03, #1
16860     00 22 56 F2 | 	cmps	local03, #0 wc
16864     01 24 86 F6 | 	negc	local04, #1
16868     12 23 02 F1 | 	add	local03, local04
1686c                 | LR__1792
1686c                 | '   putchar2(byte[text+iii])
1686c     0F 13 02 F6 | 	mov	arg01, local01
16870     10 13 02 F1 | 	add	arg01, local02
16874     09 13 C2 FA | 	rdbyte	arg01, arg01
16878     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
1687c     12 21 02 F1 | 	add	local02, local04
16880     11 21 0A F2 | 	cmp	local02, local03 wz
16884     E4 FF 9F 5D |  if_ne	jmp	#LR__1792
16888     A7 F0 03 F6 | 	mov	ptra, fp
1688c     B2 00 A0 FD | 	call	#popregs_
16890                 | _hg010b_spin2_write_ret
16890     2D 00 64 FD | 	ret
16894                 | 
16894                 | ' 
16894                 | ' ''-----------  Scroll the screen one line up
16894                 | ' 
16894                 | ' pub scrollup(start=0, end=576 , amount=16) | i
16894                 | _hg010b_spin2_scrollup
16894     01 4A 05 F6 | 	mov	COUNT_, #1
16898     A8 00 A0 FD | 	call	#pushregs_
1689c                 | ' 	
1689c                 | ' repeat i from 0 to 559 
1689c     00 1E 06 F6 | 	mov	local01, #0
168a0                 | LR__1800
168a0     F5 E4 05 F1 | 	add	objptr, #245
168a4     F2 18 02 FB | 	rdlong	arg04, objptr
168a8     1C E4 85 F1 | 	sub	objptr, #28
168ac     F2 14 02 FB | 	rdlong	arg02, objptr
168b0     0F 13 02 F6 | 	mov	arg01, local01
168b4     10 12 06 F1 | 	add	arg01, #16
168b8     02 12 66 F0 | 	shl	arg01, #2
168bc     14 E4 05 F1 | 	add	objptr, #20
168c0     F2 16 02 FB | 	rdlong	arg03, objptr
168c4     0B 13 02 FD | 	qmul	arg01, arg03
168c8                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
168c8     F6 03 00 FF 
168cc     00 12 06 F6 | 	mov	arg01, ##519168
168d0     0C 13 82 F1 | 	sub	arg01, arg04
168d4     02 16 66 F0 | 	shl	arg03, #2
168d8     0A 00 00 FF 
168dc     D3 E5 05 F1 | 	add	objptr, ##5587
168e0     18 18 62 FD | 	getqx	arg04
168e4     0C 15 02 F1 | 	add	arg02, arg04
168e8     7C 04 B0 FD | 	call	#_psram_spin2_read1
168ec     0A 00 00 FF 
168f0     CB E5 85 F1 | 	sub	objptr, ##5579
168f4     F2 18 02 FB | 	rdlong	arg04, objptr
168f8     1C E4 85 F1 | 	sub	objptr, #28
168fc     F2 14 02 FB | 	rdlong	arg02, objptr
16900     0F 13 02 F6 | 	mov	arg01, local01
16904     02 12 66 F0 | 	shl	arg01, #2
16908     14 E4 05 F1 | 	add	objptr, #20
1690c     F2 16 02 FB | 	rdlong	arg03, objptr
16910     0B 13 02 FD | 	qmul	arg01, arg03
16914                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
16914     F6 03 00 FF 
16918     00 12 06 F6 | 	mov	arg01, ##519168
1691c     0C 13 82 F1 | 	sub	arg01, arg04
16920     02 16 66 F0 | 	shl	arg03, #2
16924     0A 00 00 FF 
16928     D3 E5 05 F1 | 	add	objptr, ##5587
1692c     18 18 62 FD | 	getqx	arg04
16930     0C 15 02 F1 | 	add	arg02, arg04
16934     CC 04 B0 FD | 	call	#_psram_spin2_write
16938     0B 00 00 FF 
1693c     C0 E4 85 F1 | 	sub	objptr, ##5824
16940     01 1E 06 F1 | 	add	local01, #1
16944     01 00 00 FF 
16948     30 1E 56 F2 | 	cmps	local01, ##560 wc
1694c     50 FF 9F CD |  if_b	jmp	#LR__1800
16950                 | ' 
16950                 | ' repeat i from 560 to 575
16950     01 00 00 FF 
16954     30 1E 06 F6 | 	mov	local01, ##560
16958                 | LR__1801
16958                 | '    fastline(0,1023,i,write_background)   
16958     41 E4 05 F1 | 	add	objptr, #65
1695c     F2 18 02 FB | 	rdlong	arg04, objptr
16960     41 E4 85 F1 | 	sub	objptr, #65
16964     00 12 06 F6 | 	mov	arg01, #0
16968     09 14 CE F9 | 	bmask	arg02, #9
1696c     0F 17 02 F6 | 	mov	arg03, local01
16970     2C F1 BF FD | 	call	#_hg010b_spin2_fastline
16974     01 1E 06 F1 | 	add	local01, #1
16978     01 00 00 FF 
1697c     40 1E 16 F2 | 	cmp	local01, ##576 wc
16980     D4 FF 9F CD |  if_b	jmp	#LR__1801
16984     A7 F0 03 F6 | 	mov	ptra, fp
16988     B2 00 A0 FD | 	call	#popregs_
1698c                 | _hg010b_spin2_scrollup_ret
1698c     2D 00 64 FD | 	ret
16990                 | 
16990                 | ' 
16990                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
16990                 | ' 
16990                 | ' pub crlf()
16990                 | _hg010b_spin2_crlf
16990                 | ' 
16990                 | ' cursor_x:=leading_spaces*2
16990     01 00 00 FF 
16994     B2 E4 05 F1 | 	add	objptr, ##690
16998     F2 16 02 FB | 	rdlong	arg03, objptr
1699c     01 16 66 F0 | 	shl	arg03, #1
169a0     01 00 00 FF 
169a4     7A E4 85 F1 | 	sub	objptr, ##634
169a8     F2 16 52 FC | 	wrword	arg03, objptr
169ac                 | ' cursor_y+=1
169ac     02 E4 05 F1 | 	add	objptr, #2
169b0     F2 16 C2 FA | 	rdbyte	arg03, objptr
169b4     01 16 06 F1 | 	add	arg03, #1
169b8     F2 16 42 FC | 	wrbyte	arg03, objptr
169bc                 | ' if cursor_y>st_lines-1
169bc     C3 E4 05 F1 | 	add	objptr, #195
169c0     F2 16 02 FB | 	rdlong	arg03, objptr
169c4     01 16 86 F1 | 	sub	arg03, #1
169c8     C3 E4 85 F1 | 	sub	objptr, #195
169cc     F2 14 C2 FA | 	rdbyte	arg02, objptr
169d0     3A E4 85 F1 | 	sub	objptr, #58
169d4     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
169d8     2C 00 90 ED |  if_be	jmp	#LR__1810
169dc                 | '   scrollup()
169dc     00 12 06 F6 | 	mov	arg01, #0
169e0     01 00 00 FF 
169e4     40 14 06 F6 | 	mov	arg02, ##576
169e8     10 16 06 F6 | 	mov	arg03, #16
169ec     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
169f0                 | '   cursor_y:=st_lines-1
169f0     FD E4 05 F1 | 	add	objptr, #253
169f4     F2 16 02 FB | 	rdlong	arg03, objptr
169f8     01 16 86 F1 | 	sub	arg03, #1
169fc     C3 E4 85 F1 | 	sub	objptr, #195
16a00     F2 16 42 FC | 	wrbyte	arg03, objptr
16a04     3A E4 85 F1 | 	sub	objptr, #58
16a08                 | LR__1810
16a08                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
16a08     38 E4 05 F1 | 	add	objptr, #56
16a0c     F2 14 E2 FA | 	rdword	arg02, objptr
16a10     02 14 66 F0 | 	shl	arg02, #2
16a14     02 E4 05 F1 | 	add	objptr, #2
16a18     F2 16 C2 FA | 	rdbyte	arg03, objptr
16a1c     3A E4 85 F1 | 	sub	objptr, #58
16a20     04 16 66 F0 | 	shl	arg03, #4
16a24     11 12 06 F6 | 	mov	arg01, #17
16a28     44 EE BF FD | 	call	#_hg010b_spin2_setspritepos
16a2c                 | _hg010b_spin2_crlf_ret
16a2c     2D 00 64 FD | 	ret
16a30                 | 
16a30                 | ' 
16a30                 | ' 
16a30                 | ' '*************************************************************************
16a30                 | ' '                                                                        *
16a30                 | ' '  Conversions                                                           *
16a30                 | ' '                                                                        *
16a30                 | ' '*************************************************************************
16a30                 | ' 
16a30                 | ' ''---------- Convert a integer to dec string, return a pointer
16a30                 | ' 
16a30                 | ' pub inttostr(i):result |q,pos,k,j
16a30                 | _hg010b_spin2_inttostr
16a30     03 4A 05 F6 | 	mov	COUNT_, #3
16a34     A8 00 A0 FD | 	call	#pushregs_
16a38     09 1F 0A F6 | 	mov	local01, arg01 wz
16a3c                 | ' 
16a3c                 | ' j:=i
16a3c                 | ' pos:=10
16a3c     0A 20 06 F6 | 	mov	local02, #10
16a40                 | ' k:=0
16a40     00 22 06 F6 | 	mov	local03, #0
16a44                 | ' 
16a44                 | ' if (j==0)
16a44     18 00 90 5D |  if_ne	jmp	#LR__1820
16a48                 | '   n_string[0]:=48
16a48     49 E4 05 F1 | 	add	objptr, #73
16a4c     F2 60 48 FC | 	wrbyte	#48, objptr
16a50                 | '   n_string[1]:=0
16a50     01 E4 05 F1 | 	add	objptr, #1
16a54     F2 00 48 FC | 	wrbyte	#0, objptr
16a58     4A E4 85 F1 | 	sub	objptr, #74
16a5c     C4 00 90 FD | 	jmp	#LR__1827
16a60                 | LR__1820
16a60                 | ' 
16a60                 | ' else
16a60                 | '   if (j<0)
16a60     0F 1F 52 F6 | 	abs	local01, local01 wc
16a64                 | '     j:=0-j
16a64                 | '     k:=45
16a64     2D 22 06 C6 |  if_b	mov	local03, #45
16a68                 | ' 
16a68                 | '   n_string[11]:=0
16a68     54 E4 05 F1 | 	add	objptr, #84
16a6c     F2 00 48 FC | 	wrbyte	#0, objptr
16a70     54 E4 85 F1 | 	sub	objptr, #84
16a74     97 24 48 FB | 	callpa	#(@LR__1822-@LR__1821)>>2,fcache_load_ptr_
16a78                 | '   repeat while (pos>-1)
16a78                 | LR__1821
16a78     00 20 56 F2 | 	cmps	local02, #0 wc
16a7c     40 00 90 CD |  if_b	jmp	#LR__1823
16a80     0F FB 51 F6 | 	abs	result1, local01 wc
16a84     0A FA 15 FD | 	qdiv	result1, #10
16a88                 | '     q:=j//10
16a88     19 FA 61 FD | 	getqy	result1
16a8c     FD FA 81 F6 | 	negc	result1, result1
16a90     0F 1F 52 F6 | 	abs	local01, local01 wc
16a94     0A 1E 16 FD | 	qdiv	local01, #10
16a98                 | '     q:=48+q
16a98     30 FA 05 F1 | 	add	result1, #48
16a9c                 | '     n_string[pos]:=q
16a9c     10 1F 02 F6 | 	mov	local01, local02
16aa0     49 E4 05 F1 | 	add	objptr, #73
16aa4     F2 1E 02 F1 | 	add	local01, objptr
16aa8     0F FB 41 FC | 	wrbyte	result1, local01
16aac                 | '     j:=j/10
16aac     49 E4 85 F1 | 	sub	objptr, #73
16ab0                 | '     pos-=1
16ab0     01 20 86 F1 | 	sub	local02, #1
16ab4     18 1E 62 FD | 	getqx	local01
16ab8     0F 1F 82 F6 | 	negc	local01, local01
16abc     B8 FF 9F FD | 	jmp	#LR__1821
16ac0                 | LR__1822
16ac0                 | LR__1823
16ac0                 | '   repeat while n_string[0]==48
16ac0                 | LR__1824
16ac0     49 E4 05 F1 | 	add	objptr, #73
16ac4     F2 16 C2 FA | 	rdbyte	arg03, objptr
16ac8     49 E4 85 F1 | 	sub	objptr, #73
16acc     30 16 0E F2 | 	cmp	arg03, #48 wz
16ad0     20 00 90 5D |  if_ne	jmp	#LR__1825
16ad4                 | '     bytemove(@n_string,@n_string+1,12)
16ad4     49 E4 05 F1 | 	add	objptr, #73
16ad8     F2 12 02 F6 | 	mov	arg01, objptr
16adc     F2 14 02 F6 | 	mov	arg02, objptr
16ae0     49 E4 85 F1 | 	sub	objptr, #73
16ae4     01 14 06 F1 | 	add	arg02, #1
16ae8     0C 16 06 F6 | 	mov	arg03, #12
16aec     88 0C B0 FD | 	call	#__system____builtin_memmove
16af0     CC FF 9F FD | 	jmp	#LR__1824
16af4                 | LR__1825
16af4                 | ' 
16af4                 | '   if k==45
16af4     2D 22 0E F2 | 	cmp	local03, #45 wz
16af8     28 00 90 5D |  if_ne	jmp	#LR__1826
16afc                 | '      bytemove(@n_string+1,@n_string,12)
16afc     49 E4 05 F1 | 	add	objptr, #73
16b00     F2 12 02 F6 | 	mov	arg01, objptr
16b04     01 12 06 F1 | 	add	arg01, #1
16b08     F2 14 02 F6 | 	mov	arg02, objptr
16b0c     49 E4 85 F1 | 	sub	objptr, #73
16b10     0C 16 06 F6 | 	mov	arg03, #12
16b14     60 0C B0 FD | 	call	#__system____builtin_memmove
16b18                 | '      n_string[0]:=k
16b18     49 E4 05 F1 | 	add	objptr, #73
16b1c     F2 22 42 FC | 	wrbyte	local03, objptr
16b20     49 E4 85 F1 | 	sub	objptr, #73
16b24                 | LR__1826
16b24                 | LR__1827
16b24                 | ' 
16b24                 | ' q:=@n_string
16b24     49 E4 05 F1 | 	add	objptr, #73
16b28     F2 FA 01 F6 | 	mov	result1, objptr
16b2c     49 E4 85 F1 | 	sub	objptr, #73
16b30                 | ' return q
16b30     A7 F0 03 F6 | 	mov	ptra, fp
16b34     B2 00 A0 FD | 	call	#popregs_
16b38                 | _hg010b_spin2_inttostr_ret
16b38     2D 00 64 FD | 	ret
16b3c                 | 
16b3c                 | ' 
16b3c                 | ' '..............................................................................
16b3c                 | ' 
16b3c                 | ' {{
16b3c                 | ' }}
16b3c                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
16b3c                 | _psram_spin2_startx
16b3c     04 4A 05 F6 | 	mov	COUNT_, #4
16b40     A8 00 A0 FD | 	call	#pushregs_
16b44     09 1F 02 F6 | 	mov	local01, arg01
16b48     0B 21 02 F6 | 	mov	local02, arg03
16b4c     0C 23 02 F6 | 	mov	local03, arg04
16b50                 | '     stop() ' restart driver if required
16b50     54 01 B0 FD | 	call	#_psram_spin2_stop
16b54     00 1E 0E F2 | 	cmp	local01, #0 wz
16b58     14 1E 06 AB |  if_e	rdlong	local01, #20
16b5c     0F 15 52 F6 | 	abs	arg02, local01 wc
16b60     A1 07 00 FF 
16b64     40 14 16 FD | 	qdiv	arg02, ##1000000
16b68                 | ' 
16b68                 | '     ' use current frequency if none specified
16b68                 | ' 
16b68                 | '     if freq == 0 
16b68                 | '         freq := clkfreq 
16b68                 | ' 
16b68                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
16b68                 | ' 
16b68                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
16b68                 | '     if burst < 0
16b68                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
16b68     18 14 62 FD | 	getqx	arg02
16b6c     0A 19 82 F6 | 	negc	arg04, arg02
16b70     03 18 66 F0 | 	shl	arg04, #3
16b74     84 18 86 F1 | 	sub	arg04, #132
16b78     04 18 46 F0 | 	shr	arg04, #4
16b7c     04 18 66 F0 | 	shl	arg04, #4
16b80     00 18 56 F2 | 	cmps	arg04, #0 wc
16b84     0E FA 65 C6 |  if_b	neg	result1, #14
16b88     10 01 90 CD |  if_b	jmp	#LR__1833
16b8c                 | ' 
16b8c                 | '     ' compute the input delay
16b8c                 | ' 
16b8c                 | '     if delay <= 0
16b8c     01 20 56 F2 | 	cmps	local02, #1 wc
16b90     10 00 90 3D |  if_ae	jmp	#LR__1830
16b94                 | '         delay := lookupDelay(freq)
16b94     0F 13 02 F6 | 	mov	arg01, local01
16b98     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
16b9c     FD 20 02 F6 | 	mov	local02, result1
16ba0     04 00 90 FD | 	jmp	#LR__1831
16ba4                 | LR__1830
16ba4                 | '     else
16ba4                 | '         delay <#= $f ' limit to 15
16ba4     0F 20 66 F3 | 	fles	local02, #15
16ba8                 | LR__1831
16ba8                 | ' 
16ba8                 | '     ' create our lock
16ba8                 | ' 
16ba8                 | '     driverlock := LOCKNEW()  
16ba8     00 FA 05 F6 | 	mov	result1, #0
16bac     04 FA 61 FD | 	locknew	result1
16bb0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
16bb4     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
16bb8                 | '     if driverlock == -1
16bb8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
16bbc     FF FF 7F FF 
16bc0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
16bc4                 | '         return ERR_NO_LOCK
16bc4     1A FA 65 A6 |  if_e	neg	result1, #26
16bc8     D0 00 90 AD |  if_e	jmp	#LR__1833
16bcc                 | ' 
16bcc                 | '     ' patch in the proper data and HUB addresses to the startup structure
16bcc                 | ' 
16bcc                 | '     long[@startupData][0]:=clkfreq
16bcc     14 1E 06 FB | 	rdlong	local01, #20
16bd0     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
16bd4     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
16bd8                 | ' '    long[@startupData][1]:=$1000_0000
16bd8                 | '     long[@startupData][5]:=@deviceData
16bd8     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
16bdc     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
16be0     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
16be4     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
16be8     14 14 06 F1 | 	add	arg02, #20
16bec     0A 1F 62 FC | 	wrlong	local01, arg02
16bf0                 | '     long[@startupData][6]:=@qosData
16bf0     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
16bf4     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
16bf8     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
16bfc     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
16c00     18 14 06 F1 | 	add	arg02, #24
16c04     0A 1F 62 FC | 	wrlong	local01, arg02
16c08                 | '     long[@startupData][7]:=$7FF00
16c08     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
16c0c     1C 1E 06 F1 | 	add	local01, #28
16c10     FF 03 80 FF 
16c14     0F 01 6A FC | 	wrlong	##524032, local01
16c18                 | ' 
16c18                 | '     ' setup some default bank and QoS parameter values
16c18                 | ' 
16c18                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
16c18     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
16c1c     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
16c20     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
16c24     10 18 66 F0 | 	shl	arg04, #16
16c28     0C 20 66 F0 | 	shl	local02, #12
16c2c     10 19 42 F5 | 	or	arg04, local02
16c30     18 18 46 F5 | 	or	arg04, #24
16c34     0C 15 02 F6 | 	mov	arg02, arg04
16c38     02 16 06 F6 | 	mov	arg03, #2
16c3c     A0 00 A0 FD | 	call	#\builtin_longfill_
16c40                 | '     longfill(@qosData, $FFFF0000, 8)
16c40     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
16c44     07 16 06 F6 | 	mov	arg03, #7
16c48     28 16 62 FD | 	setq	arg03
16c4c     80 FF FF FF 
16c50     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
16c54                 | ' 
16c54                 | '     ' get the address of the PSRAM memory driver so we can start it
16c54                 | ' 
16c54                 | '     driverAddr:= driver.getDriverAddr()
16c54                 | '     return @driver_start
16c54     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
16c58     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
16c5c     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
16c60                 | ' 
16c60                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
16c60                 | ' 
16c60                 | '     if desiredcog < 0
16c60     00 22 56 F2 | 	cmps	local03, #0 wc
16c64                 | '         desiredcog := NEWCOG
16c64     10 22 06 C6 |  if_b	mov	local03, #16
16c68                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
16c68     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
16c6c     11 25 02 F6 | 	mov	local04, local03
16c70     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
16c74     0A 25 F2 FC | 	coginit	local04, arg02 wc
16c78     01 24 66 C6 |  if_b	neg	local04, #1
16c7c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
16c80     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
16c84                 | '     repeat until long[@startupData] == 0 
16c84     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
16c88                 | LR__1832
16c88     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
16c8c     F8 FF 9F 5D |  if_ne	jmp	#LR__1832
16c90                 | ' 
16c90                 | '     return drivercog
16c90     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
16c94     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
16c98     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
16c9c                 | LR__1833
16c9c     A7 F0 03 F6 | 	mov	ptra, fp
16ca0     B2 00 A0 FD | 	call	#popregs_
16ca4                 | _psram_spin2_startx_ret
16ca4     2D 00 64 FD | 	ret
16ca8                 | 
16ca8                 | ' 
16ca8                 | ' '..............................................................................
16ca8                 | ' 
16ca8                 | ' {{
16ca8                 | ' }}
16ca8                 | ' PUB stop() : i
16ca8                 | _psram_spin2_stop
16ca8     00 00 06 F6 | 	mov	_var01, #0
16cac                 | '     if drivercog <> -1
16cac     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
16cb0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
16cb4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
16cb8     FF FF 7F FF 
16cbc     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
16cc0     70 00 90 AD |  if_e	jmp	#LR__1843
16cc4                 | '         cogstop(drivercog) ' a rather brutal stop
16cc4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
16cc8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
16ccc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
16cd0     03 12 62 FD | 	cogstop	arg01
16cd4     97 26 48 FB | 	callpa	#(@LR__1842-@LR__1840)>>2,fcache_load_ptr_
16cd8                 | '         repeat i from 0 to 7
16cd8                 | LR__1840
16cd8                 | '             if long[$7FF00][i*3] < 0
16cd8     00 FB 01 F6 | 	mov	result1, _var01
16cdc     01 FA 65 F0 | 	shl	result1, #1
16ce0     00 FB 01 F1 | 	add	result1, _var01
16ce4     02 FA 65 F0 | 	shl	result1, #2
16ce8     FF 03 00 FF 
16cec     00 FB 05 F1 | 	add	result1, ##524032
16cf0     FD FA 01 FB | 	rdlong	result1, result1
16cf4     00 FA 55 F2 | 	cmps	result1, #0 wc
16cf8     1C 00 90 3D |  if_ae	jmp	#LR__1841
16cfc                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
16cfc     00 FB 01 F6 | 	mov	result1, _var01
16d00     01 FA 65 F0 | 	shl	result1, #1
16d04     00 FB 01 F1 | 	add	result1, _var01
16d08     02 FA 65 F0 | 	shl	result1, #2
16d0c     FF 03 00 FF 
16d10     00 FB 05 F1 | 	add	result1, ##524032
16d14     FD 20 68 FC | 	wrlong	#16, result1
16d18                 | LR__1841
16d18     01 00 06 F1 | 	add	_var01, #1
16d1c     08 00 56 F2 | 	cmps	_var01, #8 wc
16d20     B4 FF 9F CD |  if_b	jmp	#LR__1840
16d24                 | LR__1842
16d24                 | '         drivercog := -1
16d24     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
16d28     FF FF FF FF 
16d2c     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
16d30     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
16d34                 | LR__1843
16d34                 | '     if driverlock <> -1
16d34     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
16d38     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
16d3c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
16d40     FF FF 7F FF 
16d44     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
16d48                 | '         LOCKRET(driverlock)
16d48     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
16d4c     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
16d50     05 12 62 5D |  if_ne	lockret	arg01
16d54                 | '         driverlock := -1
16d54     FF FF FF 5F 
16d58     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
16d5c     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
16d60     00 FB 01 F6 | 	mov	result1, _var01
16d64                 | _psram_spin2_stop_ret
16d64     2D 00 64 FD | 	ret
16d68                 | 
16d68                 | ' 
16d68                 | ' '..............................................................................
16d68                 | ' 
16d68                 | ' {{
16d68                 | ' }}
16d68                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
16d68                 | _psram_spin2_read1
16d68                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
16d68                 | '     if drivercog == -1 ' driver must be running
16d68     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
16d6c     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
16d70     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
16d74     FF FF 7F FF 
16d78     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
16d7c                 | '         return ERR_INACTIVE
16d7c     0F FA 65 A6 |  if_e	neg	result1, #15
16d80     7C 00 90 AD |  if_e	jmp	#LR__1851
16d84                 | '     if count == 0 ' don't even bother reading
16d84     00 16 0E F2 | 	cmp	arg03, #0 wz
16d88                 | '         return 0
16d88     00 FA 05 A6 |  if_e	mov	result1, #0
16d8c     70 00 90 AD |  if_e	jmp	#LR__1851
16d90                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
16d90     00 FA 05 F6 | 	mov	result1, #0
16d94     01 FA 61 FD | 	cogid	result1
16d98     FD 00 02 F6 | 	mov	_var01, result1
16d9c     01 00 66 F0 | 	shl	_var01, #1
16da0     FD 00 02 F1 | 	add	_var01, result1
16da4     02 00 66 F0 | 	shl	_var01, #2
16da8     FF 03 00 FF 
16dac     00 03 06 F6 | 	mov	_var02, ##524032
16db0     00 03 02 F1 | 	add	_var02, _var01
16db4                 | '     if long[mailbox] < 0
16db4     01 01 02 FB | 	rdlong	_var01, _var02
16db8     00 00 56 F2 | 	cmps	_var01, #0 wc
16dbc                 | '         return ERR_MAILBOX_BUSY
16dbc     1C FA 65 C6 |  if_b	neg	result1, #28
16dc0     3C 00 90 CD |  if_b	jmp	#LR__1851
16dc4                 | '     long[mailbox][2] := count
16dc4     08 02 06 F1 | 	add	_var02, #8
16dc8     01 17 62 FC | 	wrlong	arg03, _var02
16dcc                 | '     long[mailbox][1] := dstHubAddr
16dcc     04 02 86 F1 | 	sub	_var02, #4
16dd0     01 13 62 FC | 	wrlong	arg01, _var02
16dd4     04 02 86 F1 | 	sub	_var02, #4
16dd8                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
16dd8     0A 05 02 F6 | 	mov	_var03, arg02
16ddc     D9 04 06 F4 | 	bitl	_var03, #217
16de0     00 00 58 FF 
16de4     00 00 06 F6 | 	mov	_var01, ##-1342177280
16de8     02 01 02 F1 | 	add	_var01, _var03
16dec     01 01 62 FC | 	wrlong	_var01, _var02
16df0                 | '     repeat
16df0                 | LR__1850
16df0                 | '         result := long[mailbox]    
16df0     01 05 02 FB | 	rdlong	_var03, _var02
16df4     00 04 56 F2 | 	cmps	_var03, #0 wc
16df8     F4 FF 9F CD |  if_b	jmp	#LR__1850
16dfc                 | '     while result < 0   
16dfc                 | '     return -result                       'return success or error
16dfc     02 FB 61 F6 | 	neg	result1, _var03
16e00                 | LR__1851
16e00                 | _psram_spin2_read1_ret
16e00     2D 00 64 FD | 	ret
16e04                 | 
16e04                 | ' 
16e04                 | ' '..............................................................................
16e04                 | ' 
16e04                 | ' {{
16e04                 | ' }}
16e04                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
16e04                 | _psram_spin2_write
16e04                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
16e04                 | '     if drivercog == -1 ' driver must be running
16e04     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
16e08     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
16e0c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
16e10     FF FF 7F FF 
16e14     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
16e18                 | '         return ERR_INACTIVE
16e18     0F FA 65 A6 |  if_e	neg	result1, #15
16e1c     7C 00 90 AD |  if_e	jmp	#LR__1861
16e20                 | '     if count == 0 ' don't even bother writing
16e20     00 16 0E F2 | 	cmp	arg03, #0 wz
16e24                 | '         return 0
16e24     00 FA 05 A6 |  if_e	mov	result1, #0
16e28     70 00 90 AD |  if_e	jmp	#LR__1861
16e2c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
16e2c     00 FA 05 F6 | 	mov	result1, #0
16e30     01 FA 61 FD | 	cogid	result1
16e34     FD 00 02 F6 | 	mov	_var01, result1
16e38     01 00 66 F0 | 	shl	_var01, #1
16e3c     FD 00 02 F1 | 	add	_var01, result1
16e40     02 00 66 F0 | 	shl	_var01, #2
16e44     FF 03 00 FF 
16e48     00 03 06 F6 | 	mov	_var02, ##524032
16e4c     00 03 02 F1 | 	add	_var02, _var01
16e50                 | '     if long[mailbox] < 0
16e50     01 01 02 FB | 	rdlong	_var01, _var02
16e54     00 00 56 F2 | 	cmps	_var01, #0 wc
16e58                 | '         return ERR_MAILBOX_BUSY
16e58     1C FA 65 C6 |  if_b	neg	result1, #28
16e5c     3C 00 90 CD |  if_b	jmp	#LR__1861
16e60                 | '     long[mailbox][2] := count
16e60     08 02 06 F1 | 	add	_var02, #8
16e64     01 17 62 FC | 	wrlong	arg03, _var02
16e68                 | '     long[mailbox][1] := srcHubAddr
16e68     04 02 86 F1 | 	sub	_var02, #4
16e6c     01 13 62 FC | 	wrlong	arg01, _var02
16e70     04 02 86 F1 | 	sub	_var02, #4
16e74                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
16e74     0A 05 02 F6 | 	mov	_var03, arg02
16e78     D9 04 06 F4 | 	bitl	_var03, #217
16e7c     00 00 78 FF 
16e80     00 00 06 F6 | 	mov	_var01, ##-268435456
16e84     02 01 02 F1 | 	add	_var01, _var03
16e88     01 01 62 FC | 	wrlong	_var01, _var02
16e8c                 | '     repeat
16e8c                 | LR__1860
16e8c                 | '         result := long[mailbox]    
16e8c     01 05 02 FB | 	rdlong	_var03, _var02
16e90     00 04 56 F2 | 	cmps	_var03, #0 wc
16e94     F4 FF 9F CD |  if_b	jmp	#LR__1860
16e98                 | '     while result < 0   
16e98                 | '     return -result                       'return success or error
16e98     02 FB 61 F6 | 	neg	result1, _var03
16e9c                 | LR__1861
16e9c                 | _psram_spin2_write_ret
16e9c     2D 00 64 FD | 	ret
16ea0                 | 
16ea0                 | ' 
16ea0                 | ' ' generalized fill
16ea0                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
16ea0                 | _psram_spin2_fill
16ea0     09 01 02 F6 | 	mov	_var01, arg01
16ea4     0A 03 02 F6 | 	mov	_var02, arg02
16ea8     0B 05 02 F6 | 	mov	_var03, arg03
16eac     0D 07 02 F6 | 	mov	_var04, arg05
16eb0                 | '     case datasize 
16eb0     01 06 86 F1 | 	sub	_var04, #1
16eb4     04 06 26 F3 | 	fle	_var04, #4
16eb8     30 06 62 FD | 	jmprel	_var04
16ebc                 | LR__1870
16ebc     10 00 90 FD | 	jmp	#LR__1871
16ec0     18 00 90 FD | 	jmp	#LR__1872
16ec4     2C 00 90 FD | 	jmp	#LR__1874
16ec8     1C 00 90 FD | 	jmp	#LR__1873
16ecc     24 00 90 FD | 	jmp	#LR__1874
16ed0                 | LR__1871
16ed0                 | '         1: req := driver.R_WRITEBYTE
16ed0     00 00 60 FF 
16ed4     00 08 06 F6 | 	mov	_var05, ##-1073741824
16ed8     20 00 90 FD | 	jmp	#LR__1875
16edc                 | LR__1872
16edc                 | '         2: req := driver.R_WRITEWORD
16edc     00 00 68 FF 
16ee0     00 08 06 F6 | 	mov	_var05, ##-805306368
16ee4     14 00 90 FD | 	jmp	#LR__1875
16ee8                 | LR__1873
16ee8                 | '         4: req := driver.R_WRITELONG
16ee8     00 00 70 FF 
16eec     00 08 06 F6 | 	mov	_var05, ##-536870912
16ef0     08 00 90 FD | 	jmp	#LR__1875
16ef4                 | LR__1874
16ef4                 | '         other : return ERR_INVALID
16ef4     06 FA 65 F6 | 	neg	result1, #6
16ef8     94 00 90 FD | 	jmp	#LR__1877
16efc                 | LR__1875
16efc                 | '     if count == 0   ' nothing to do
16efc     00 04 0E F2 | 	cmp	_var03, #0 wz
16f00                 | '         return 0
16f00     00 FA 05 A6 |  if_e	mov	result1, #0
16f04     88 00 90 AD |  if_e	jmp	#LR__1877
16f08                 | '     if drivercog == -1
16f08     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
16f0c     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
16f10     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
16f14     FF FF 7F FF 
16f18     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
16f1c                 | '         return ERR_INACTIVE
16f1c     0F FA 65 A6 |  if_e	neg	result1, #15
16f20     6C 00 90 AD |  if_e	jmp	#LR__1877
16f24                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
16f24     00 FA 05 F6 | 	mov	result1, #0
16f28     01 FA 61 FD | 	cogid	result1
16f2c     FD 06 02 F6 | 	mov	_var04, result1
16f30     01 06 66 F0 | 	shl	_var04, #1
16f34     FD 06 02 F1 | 	add	_var04, result1
16f38     02 06 66 F0 | 	shl	_var04, #2
16f3c     FF 03 00 FF 
16f40     00 0B 06 F6 | 	mov	_var06, ##524032
16f44     03 0B 02 F1 | 	add	_var06, _var04
16f48                 | '     if long[mailbox] < 0
16f48     05 07 02 FB | 	rdlong	_var04, _var06
16f4c     00 06 56 F2 | 	cmps	_var04, #0 wc
16f50                 | '         return ERR_MAILBOX_BUSY
16f50     1C FA 65 C6 |  if_b	neg	result1, #28
16f54     38 00 90 CD |  if_b	jmp	#LR__1877
16f58                 | '     long[mailbox][2] := count
16f58     08 0A 06 F1 | 	add	_var06, #8
16f5c     05 05 62 FC | 	wrlong	_var03, _var06
16f60                 | '     long[mailbox][1] := pattern
16f60     04 0A 86 F1 | 	sub	_var06, #4
16f64     05 03 62 FC | 	wrlong	_var02, _var06
16f68     04 0A 86 F1 | 	sub	_var06, #4
16f6c                 | '     long[mailbox] := req + (addr & $fffffff)
16f6c     04 0D 02 F6 | 	mov	_var07, _var05
16f70     00 0F 02 F6 | 	mov	_var08, _var01
16f74     7C 0E 06 F4 | 	bitl	_var08, #124
16f78     07 0D 02 F1 | 	add	_var07, _var08
16f7c     05 0D 62 FC | 	wrlong	_var07, _var06
16f80                 | '     repeat
16f80                 | LR__1876
16f80                 | '         r := long[mailbox]
16f80     05 0F 02 FB | 	rdlong	_var08, _var06
16f84     00 0E 56 F2 | 	cmps	_var08, #0 wc
16f88     F4 FF 9F CD |  if_b	jmp	#LR__1876
16f8c                 | '     while r < 0
16f8c                 | '     return -r                  ' return 0 for success or negated error code
16f8c     07 FB 61 F6 | 	neg	result1, _var08
16f90                 | LR__1877
16f90                 | _psram_spin2_fill_ret
16f90     2D 00 64 FD | 	ret
16f94                 | 
16f94                 | ' 
16f94                 | ' '..............................................................................
16f94                 | ' 
16f94                 | ' {{
16f94                 | ' }}
16f94                 | ' PUB setQos(cog, qos) : result | mailbox
16f94                 | _psram_spin2_setQos
16f94     09 01 02 F6 | 	mov	_var01, arg01
16f98                 | '     if drivercog == -1 ' driver must be running
16f98     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
16f9c     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
16fa0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
16fa4     FF FF 7F FF 
16fa8     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
16fac                 | '         return ERR_INACTIVE
16fac     0F FA 65 A6 |  if_e	neg	result1, #15
16fb0     9C 00 90 AD |  if_e	jmp	#LR__1884
16fb4                 | '     if cog < 0 or cog > 7 ' enforce cog id range
16fb4     00 00 56 F2 | 	cmps	_var01, #0 wc
16fb8     08 00 90 CD |  if_b	jmp	#LR__1880
16fbc     08 00 56 F2 | 	cmps	_var01, #8 wc
16fc0     08 00 90 CD |  if_b	jmp	#LR__1881
16fc4                 | LR__1880
16fc4                 | '         return ERR_INVALID
16fc4     06 FA 65 F6 | 	neg	result1, #6
16fc8     84 00 90 FD | 	jmp	#LR__1884
16fcc                 | LR__1881
16fcc                 | '     long[@qosData][cog] := qos & !$1ff
16fcc     FF 15 26 F5 | 	andn	arg02, #511
16fd0     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
16fd4     02 00 66 F0 | 	shl	_var01, #2
16fd8     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
16fdc     00 15 62 FC | 	wrlong	arg02, _var01
16fe0                 | '     mailbox := $7FF00 + drivercog*12
16fe0     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
16fe4     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
16fe8     02 07 02 F6 | 	mov	_var04, _var03
16fec     01 06 66 F0 | 	shl	_var04, #1
16ff0     02 07 02 F1 | 	add	_var04, _var03
16ff4     02 06 66 F0 | 	shl	_var04, #2
16ff8     FF 03 00 FF 
16ffc     00 09 06 F6 | 	mov	_var05, ##524032
17000     03 09 02 F1 | 	add	_var05, _var04
17004                 | '     repeat until LOCKTRY(driverlock)
17004     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
17008                 | LR__1882
17008     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1700c     06 12 72 FD | 	locktry	arg01 wc
17010     F4 FF 9F 3D |  if_ae	jmp	#LR__1882
17014     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
17018                 | '     long[mailbox] := driver.R_CONFIG + cogid()
17018     00 06 06 F6 | 	mov	_var04, #0
1701c     01 06 62 FD | 	cogid	_var04
17020     00 00 78 FF 
17024     00 02 06 F6 | 	mov	_var02, ##-268435456
17028     03 03 02 F1 | 	add	_var02, _var04
1702c     04 03 62 FC | 	wrlong	_var02, _var05
17030                 | '     repeat while long[mailbox] < 0
17030                 | LR__1883
17030     04 03 02 FB | 	rdlong	_var02, _var05
17034     00 02 56 F2 | 	cmps	_var02, #0 wc
17038     F4 FF 9F CD |  if_b	jmp	#LR__1883
1703c                 | '     LOCKREL(driverlock)
1703c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
17040     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
17044     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
17048     07 12 72 FD | 	lockrel	arg01 wc
1704c     00 FA 05 F6 | 	mov	result1, #0
17050                 | LR__1884
17050                 | _psram_spin2_setQos_ret
17050     2D 00 64 FD | 	ret
17054                 | 
17054                 | ' 
17054                 | ' '..............................................................................
17054                 | ' 
17054                 | ' {{
17054                 | ' }}
17054                 | ' PRI lookupDelay(freq) : delay | profile
17054                 | _psram_spin2_lookupDelay
17054                 | '     profile := @delayTable
17054     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
17058     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1705c                 | '     delay := long[profile][0]
1705c     00 03 02 FB | 	rdlong	_var02, _var01
17060                 | '     repeat while long[profile][1] 
17060     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
17064     97 16 48 FB | 	callpa	#(@LR__1891-@LR__1890)>>2,fcache_load_ptr_
17068                 | LR__1890
17068     04 00 06 F1 | 	add	_var01, #4
1706c     00 FB 09 FB | 	rdlong	result1, _var01 wz
17070     04 00 86 F1 | 	sub	_var01, #4
17074     1C 00 90 AD |  if_e	jmp	#LR__1892
17078                 | '         if freq +< long[profile][1] 
17078     04 00 06 F1 | 	add	_var01, #4
1707c     00 FB 01 FB | 	rdlong	result1, _var01
17080     04 00 86 F1 | 	sub	_var01, #4
17084     FD 12 12 F2 | 	cmp	arg01, result1 wc
17088                 | '             quit
17088                 | '         profile += 4
17088     04 00 06 31 |  if_ae	add	_var01, #4
1708c                 | '         delay++
1708c     01 02 06 31 |  if_ae	add	_var02, #1
17090     D4 FF 9F 3D |  if_ae	jmp	#LR__1890
17094                 | LR__1891
17094                 | LR__1892
17094     01 FB 01 F6 | 	mov	result1, _var02
17098                 | _psram_spin2_lookupDelay_ret
17098     2D 00 64 FD | 	ret
1709c                 | 
1709c                 | ' 
1709c                 | ' PUB start() : r
1709c                 | _usbnew_spin2_start
1709c     00 00 06 F6 | 	mov	_var01, #0
170a0                 | '   ifnot driver_cog
170a0     15 00 00 FF 
170a4     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
170a8     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
170ac     15 00 00 FF 
170b0     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
170b4     38 00 90 5D |  if_ne	jmp	#LR__1900
170b8                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
170b8     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
170bc     10 00 06 F6 | 	mov	_var01, #16
170c0     00 16 06 F6 | 	mov	arg03, #0
170c4     28 16 62 FD | 	setq	arg03
170c8     0A 01 F2 FC | 	coginit	_var01, arg02 wc
170cc     01 00 66 C6 |  if_b	neg	_var01, #1
170d0                 | '     if r >= 0
170d0     00 00 56 F2 | 	cmps	_var01, #0 wc
170d4                 | '       driver_cog := r+1
170d4     00 03 02 36 |  if_ae	mov	_var02, _var01
170d8     01 02 06 31 |  if_ae	add	_var02, #1
170dc     15 00 00 3F 
170e0     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
170e4     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
170e8     15 00 00 3F 
170ec     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
170f0                 | LR__1900
170f0     00 FB 01 F6 | 	mov	result1, _var01
170f4                 | _usbnew_spin2_start_ret
170f4     2D 00 64 FD | 	ret
170f8                 | 
170f8                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
170f8                 | ' 
170f8                 | ' '' Return key event from buffer if there is one
170f8                 | ' PUB get_key() : r | tail
170f8                 | _usbnew_spin2_get_key
170f8                 | '   tail := keyq_tail
170f8     0F 00 00 FF 
170fc     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
17100     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
17104                 | '   if keyq_head == tail
17104     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
17108     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1710c     0F 00 00 FF 
17110     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
17114     00 03 0A F2 | 	cmp	_var02, _var01 wz
17118                 | '     return 0 ' No event
17118     00 FA 05 A6 |  if_e	mov	result1, #0
1711c     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
17120                 | '   r := keyq_data[tail]
17120     00 03 02 F6 | 	mov	_var02, _var01
17124     02 02 66 F0 | 	shl	_var02, #2
17128     0F 00 00 FF 
1712c     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
17130     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
17134     01 FB 01 FB | 	rdlong	result1, _var02
17138                 | '   if ++tail == KEYQUEUE_SIZE
17138     01 00 06 F1 | 	add	_var01, #1
1713c     80 00 0E F2 | 	cmp	_var01, #128 wz
17140                 | '     tail := 0
17140     00 00 06 A6 |  if_e	mov	_var01, #0
17144                 | '   keyq_tail := tail
17144     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
17148     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1714c     0F 00 00 FF 
17150     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
17154                 | _usbnew_spin2_get_key_ret
17154     2D 00 64 FD | 	ret
17158                 | 
17158                 | ' 
17158                 | ' '' Emulate mouse movement
17158                 | ' PUB mouse_move(x,y)
17158                 | _usbnew_spin2_mouse_move
17158     02 4A 05 F6 | 	mov	COUNT_, #2
1715c     A8 00 A0 FD | 	call	#pushregs_
17160     09 1F 02 F6 | 	mov	local01, arg01
17164     0A 21 02 F6 | 	mov	local02, arg02
17168                 | '   mouse_lock := 1
17168     14 00 00 FF 
1716c     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
17170     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
17174     14 00 00 FF 
17178     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1717c                 | '   waitus(2) ' hope driver is now done
1717c     02 12 06 F6 | 	mov	arg01, #2
17180     34 0A B0 FD | 	call	#__system___waitus
17184                 | '   mouse_xacc := x
17184     14 00 00 FF 
17188     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
1718c     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
17190                 | '   mouse_yacc := y
17190     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
17194     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
17198                 | '   if mouse_outptr
17198     04 00 00 FF 
1719c     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
171a0     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
171a4     0F 00 00 FF 
171a8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
171ac     24 00 90 AD |  if_e	jmp	#LR__1910
171b0                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
171b0     10 20 66 F0 | 	shl	local02, #16
171b4     0F 1F 32 F9 | 	getword	local01, local01, #0
171b8     0F 21 42 F5 | 	or	local02, local01
171bc     0F 00 00 FF 
171c0     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
171c4     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
171c8     0F 00 00 FF 
171cc     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
171d0     0F 21 62 FC | 	wrlong	local02, local01
171d4                 | LR__1910
171d4                 | '   mouse_lock := 0
171d4     14 00 00 FF 
171d8     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
171dc     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
171e0     14 00 00 FF 
171e4     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
171e8     A7 F0 03 F6 | 	mov	ptra, fp
171ec     B2 00 A0 FD | 	call	#popregs_
171f0                 | _usbnew_spin2_mouse_move_ret
171f0     2D 00 64 FD | 	ret
171f4                 | 
171f4                 | '     '' Set HAVE_HIDPAD to enable.
171f4                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
171f4                 | ' 
171f4                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
171f4                 | ' PUB hidpad_id(dev) : r
171f4                 | _usbnew_spin2_hidpad_id
171f4                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
171f4     13 00 00 FF 
171f8     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
171fc     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
17200     09 01 02 F6 | 	mov	_var01, arg01
17204     03 00 66 F0 | 	shl	_var01, #3
17208     09 01 82 F1 | 	sub	_var01, arg01
1720c     02 00 66 F0 | 	shl	_var01, #2
17210     00 FB 01 F1 | 	add	result1, _var01
17214     FD FA 01 FB | 	rdlong	result1, result1
17218     13 00 00 FF 
1721c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
17220                 | _usbnew_spin2_hidpad_id_ret
17220     2D 00 64 FD | 	ret
17224                 | 
17224                 | ' 
17224                 | ' '' Get all button states for a device
17224                 | ' PUB hidpad_buttons(dev) : r 
17224                 | _usbnew_spin2_hidpad_buttons
17224                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
17224     13 00 00 FF 
17228     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1722c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
17230     09 01 02 F6 | 	mov	_var01, arg01
17234     03 00 66 F0 | 	shl	_var01, #3
17238     09 01 82 F1 | 	sub	_var01, arg01
1723c     02 00 66 F0 | 	shl	_var01, #2
17240     00 FB 01 F1 | 	add	result1, _var01
17244     14 FA 05 F1 | 	add	result1, #20
17248     FD FA 01 FB | 	rdlong	result1, result1
1724c     13 00 00 FF 
17250     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
17254                 | _usbnew_spin2_hidpad_buttons_ret
17254     2D 00 64 FD | 	ret
17258                 | 
17258                 | ' 
17258                 | ' '' Get state of an axis (normalized between -32768 and 32767)
17258                 | ' PUB hidpad_axis(dev,axnum) : r
17258                 | _usbnew_spin2_hidpad_axis
17258                 | '   if axnum +>= 6
17258     06 14 16 F2 | 	cmp	arg02, #6 wc
1725c                 | '     return 0
1725c     00 FA 05 36 |  if_ae	mov	result1, #0
17260     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
17264                 | '   else 
17264                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
17264     13 00 00 FF 
17268     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1726c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
17270     09 01 02 F6 | 	mov	_var01, arg01
17274     03 00 66 F0 | 	shl	_var01, #3
17278     09 01 82 F1 | 	sub	_var01, arg01
1727c     02 00 66 F0 | 	shl	_var01, #2
17280     00 FB 01 F1 | 	add	result1, _var01
17284     04 00 06 F6 | 	mov	_var01, #4
17288     0A 01 02 F1 | 	add	_var01, arg02
1728c     01 00 66 F0 | 	shl	_var01, #1
17290     FD 00 02 F1 | 	add	_var01, result1
17294     00 FB E1 FA | 	rdword	result1, _var01
17298     0F FA 65 F7 | 	signx	result1, #15
1729c     13 00 00 FF 
172a0     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
172a4                 | _usbnew_spin2_hidpad_axis_ret
172a4     2D 00 64 FD | 	ret
172a8                 | 
172a8                 | ' 
172a8                 | ' 
172a8                 | ' '--------------------------------------------------------------
172a8                 | ' '---------- Init the variables, start the cog. ----------------
172a8                 | ' '--------------------------------------------------------------
172a8                 | ' 
172a8                 | ' pub start(mbox,scope,cache) :cog,base | iii
172a8                 | _Audio093b_8_sc_spin2_start
172a8     04 4A 05 F6 | 	mov	COUNT_, #4
172ac     A8 00 A0 FD | 	call	#pushregs_
172b0     09 1F 02 F6 | 	mov	local01, arg01
172b4                 | ' 
172b4                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
172b4                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
172b4                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
172b4                 | ' 
172b4                 | ' mailboxaddr:=mbox 
172b4     F2 1E 62 FC | 	wrlong	local01, objptr
172b8                 | ' scope_ptr:=scope
172b8     04 E4 05 F1 | 	add	objptr, #4
172bc     F2 14 62 FC | 	wrlong	arg02, objptr
172c0                 | ' cache_ptr:=cache
172c0     04 E4 05 F1 | 	add	objptr, #4
172c4     F2 16 62 FC | 	wrlong	arg03, objptr
172c8                 | ' base:=@channel1[0]
172c8     04 E4 05 F1 | 	add	objptr, #4
172cc     F2 20 02 F6 | 	mov	local02, objptr
172d0                 | ' 
172d0                 | ' repeat iii from 0 to 7
172d0     00 22 06 F6 | 	mov	local03, #0
172d4     01 00 00 FF 
172d8     D8 E7 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##984
172dc     0C E4 85 F1 | 	sub	objptr, #12
172e0     97 80 48 FB | 	callpa	#(@LR__1921-@LR__1920)>>2,fcache_load_ptr_
172e4                 | LR__1920
172e4                 | '   long[base+32*iii]:=0
172e4     10 1F 02 F6 | 	mov	local01, local02
172e8     11 FD 01 F6 | 	mov	result2, local03
172ec     05 FC 65 F0 | 	shl	result2, #5
172f0     FE 1E 02 F1 | 	add	local01, result2
172f4     0F 01 68 FC | 	wrlong	#0, local01
172f8                 | '   long[base+32*iii+4]:=0
172f8     10 1F 02 F6 | 	mov	local01, local02
172fc     11 FD 01 F6 | 	mov	result2, local03
17300     05 FC 65 F0 | 	shl	result2, #5
17304     FE 1E 02 F1 | 	add	local01, result2
17308     04 1E 06 F1 | 	add	local01, #4
1730c     0F 01 68 FC | 	wrlong	#0, local01
17310                 | '   long[base+32*iii+12]:=0
17310     10 25 02 F6 | 	mov	local04, local02
17314     11 1F 02 F6 | 	mov	local01, local03
17318     05 1E 66 F0 | 	shl	local01, #5
1731c     0F 25 02 F1 | 	add	local04, local01
17320     0C 24 06 F1 | 	add	local04, #12
17324     12 01 68 FC | 	wrlong	#0, local04
17328                 | '   long[base+32*iii+16]:=2 
17328     10 25 02 F6 | 	mov	local04, local02
1732c     11 1F 02 F6 | 	mov	local01, local03
17330     05 1E 66 F0 | 	shl	local01, #5
17334     0F 25 02 F1 | 	add	local04, local01
17338     10 24 06 F1 | 	add	local04, #16
1733c     12 05 68 FC | 	wrlong	#2, local04
17340                 | '   word[base+32*iii+20]:=0
17340     10 25 02 F6 | 	mov	local04, local02
17344     11 1F 02 F6 | 	mov	local01, local03
17348     05 1E 66 F0 | 	shl	local01, #5
1734c     0F 25 02 F1 | 	add	local04, local01
17350     14 24 06 F1 | 	add	local04, #20
17354     12 01 58 FC | 	wrword	#0, local04
17358                 | '   word[base+32*iii+22]:=8192
17358     10 25 02 F6 | 	mov	local04, local02
1735c     11 1F 02 F6 | 	mov	local01, local03
17360     05 1E 66 F0 | 	shl	local01, #5
17364     0F 25 02 F1 | 	add	local04, local01
17368     16 24 06 F1 | 	add	local04, #22
1736c     10 00 80 FF 
17370     12 01 58 FC | 	wrword	##8192, local04
17374                 | '   word[base+32*iii+24]:=4000+2*iii
17374     11 25 02 F6 | 	mov	local04, local03
17378     01 24 66 F0 | 	shl	local04, #1
1737c     07 00 00 FF 
17380     A0 1F 06 F6 | 	mov	local01, ##4000
17384     12 1F 02 F1 | 	add	local01, local04
17388     10 25 02 F6 | 	mov	local04, local02
1738c     11 FD 01 F6 | 	mov	result2, local03
17390     05 FC 65 F0 | 	shl	result2, #5
17394     FE 24 02 F1 | 	add	local04, result2
17398     18 24 06 F1 | 	add	local04, #24
1739c     12 1F 52 FC | 	wrword	local01, local04
173a0                 | '   word[base+32*iii+26]:=2
173a0     10 25 02 F6 | 	mov	local04, local02
173a4     11 1F 02 F6 | 	mov	local01, local03
173a8     05 1E 66 F0 | 	shl	local01, #5
173ac     0F 25 02 F1 | 	add	local04, local01
173b0     1A 24 06 F1 | 	add	local04, #26
173b4     12 05 58 FC | 	wrword	#2, local04
173b8                 | '   long [base+32*iii+8]:=@null | $C0000000
173b8     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
173bc     3E 1E 26 F4 | 	bith	local01, #62
173c0     10 25 02 F6 | 	mov	local04, local02
173c4     11 17 02 F6 | 	mov	arg03, local03
173c8     05 16 66 F0 | 	shl	arg03, #5
173cc     0B 25 02 F1 | 	add	local04, arg03
173d0     08 24 06 F1 | 	add	local04, #8
173d4     12 1F 62 FC | 	wrlong	local01, local04
173d8     01 22 06 F1 | 	add	local03, #1
173dc     08 22 56 F2 | 	cmps	local03, #8 wc
173e0     00 FF 9F CD |  if_b	jmp	#LR__1920
173e4                 | LR__1921
173e4     01 00 00 FF 
173e8     D8 E7 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##984
173ec                 | '   
173ec                 | ' cog:=coginit(16,@audio,@mailboxaddr)
173ec     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
173f0     F2 16 02 F6 | 	mov	arg03, objptr
173f4     10 24 06 F6 | 	mov	local04, #16
173f8     28 16 62 FD | 	setq	arg03
173fc     0A 25 F2 FC | 	coginit	local04, arg02 wc
17400     01 24 66 C6 |  if_b	neg	local04, #1
17404                 | ' waitms(100)
17404     64 12 06 F6 | 	mov	arg01, #100
17408     40 07 B0 FD | 	call	#__system___waitms
1740c                 | ' return cog,base
1740c     10 FD 01 F6 | 	mov	result2, local02
17410     12 FB 01 F6 | 	mov	result1, local04
17414     A7 F0 03 F6 | 	mov	ptra, fp
17418     B2 00 A0 FD | 	call	#popregs_
1741c                 | _Audio093b_8_sc_spin2_start_ret
1741c     2D 00 64 FD | 	ret
17420                 | 
17420                 | ' 
17420                 | ' ' a simple play procedure to not poke everything. 
17420                 | ' 
17420                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
17420                 | _Audio093b_8_sc_spin2_play
17420     0C E4 05 F1 | 	add	objptr, #12
17424     F2 00 02 F6 | 	mov	_var01, objptr
17428     05 12 66 F0 | 	shl	arg01, #5
1742c     09 01 02 F1 | 	add	_var01, arg01
17430     00 00 60 FF 
17434     00 14 06 F1 | 	add	arg02, ##-1073741824
17438     00 13 02 F6 | 	mov	arg01, _var01
1743c     08 12 06 F1 | 	add	arg01, #8
17440     09 15 62 FC | 	wrlong	arg02, arg01
17444     00 15 02 F6 | 	mov	arg02, _var01
17448     0C 14 06 F1 | 	add	arg02, #12
1744c     0A 1B 62 FC | 	wrlong	arg05, arg02
17450     00 1C 56 F2 | 	cmps	arg06, #0 wc
17454     00 15 02 36 |  if_ae	mov	arg02, _var01
17458     10 14 06 31 |  if_ae	add	arg02, #16
1745c     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
17460     02 1A 06 C1 |  if_b	add	arg05, #2
17464     00 13 02 C6 |  if_b	mov	arg01, _var01
17468     10 12 06 C1 |  if_b	add	arg01, #16
1746c     09 1B 62 CC |  if_b	wrlong	arg05, arg01
17470     0B 15 52 F6 | 	abs	arg02, arg03 wc
17474     0F 1B 80 FF 
17478     0A 3F 1A FD | 	qdiv	##3546911, arg02
1747c                 | ' 
1747c                 | ' base2:=@channel1[0]+32*channel
1747c                 | ' long[base2+8]:=sample+$C0000000 
1747c                 | ' long[base2+12]:= len
1747c                 | ' if loop >=0 
1747c                 | '   long[base2+16]:= loop
1747c     0C E4 85 F1 | 	sub	objptr, #12
17480                 | ' else
17480                 | '   long[base2+16]:= len+2
17480                 | ' word[base2+20]:=vol
17480     00 15 02 F6 | 	mov	arg02, _var01
17484     14 14 06 F1 | 	add	arg02, #20
17488     0A 19 52 FC | 	wrword	arg04, arg02
1748c                 | ' word[base2+24]:= 3546911/splfreq 
1748c     00 13 02 F6 | 	mov	arg01, _var01
17490     18 12 06 F1 | 	add	arg01, #24
17494                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
17494                 | ' long[base2+28]:=$40000000
17494     18 14 62 FD | 	getqx	arg02
17498     0A 15 82 F6 | 	negc	arg02, arg02
1749c     09 15 52 FC | 	wrword	arg02, arg01
174a0     00 15 02 F6 | 	mov	arg02, _var01
174a4     1A 14 06 F1 | 	add	arg02, #26
174a8     0A 01 5A FC | 	wrword	#256, arg02
174ac     1C 00 06 F1 | 	add	_var01, #28
174b0     00 00 A0 FF 
174b4     00 01 68 FC | 	wrlong	##1073741824, _var01
174b8                 | _Audio093b_8_sc_spin2_play_ret
174b8     2D 00 64 FD | 	ret
174bc                 | 
174bc                 | ' until (i >>8) >=len
174bc                 | ' 
174bc                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
174bc                 | _Audio093b_8_sc_spin2_play8
174bc                 | ' 
174bc                 | ' base2:=@channel1[0]+32*channel
174bc     0C E4 05 F1 | 	add	objptr, #12
174c0     F2 00 02 F6 | 	mov	_var01, objptr
174c4     05 12 66 F0 | 	shl	arg01, #5
174c8     09 01 02 F1 | 	add	_var01, arg01
174cc                 | ' long[base2]:=0
174cc     00 01 68 FC | 	wrlong	#0, _var01
174d0                 | ' long[base2+8]:=sample+$40000000 
174d0     00 00 20 FF 
174d4     00 14 06 F1 | 	add	arg02, ##1073741824
174d8     00 13 02 F6 | 	mov	arg01, _var01
174dc     08 12 06 F1 | 	add	arg01, #8
174e0     09 15 62 FC | 	wrlong	arg02, arg01
174e4                 | ' if loop>=0
174e4     00 1C 56 F2 | 	cmps	arg06, #0 wc
174e8     0C E4 85 F1 | 	sub	objptr, #12
174ec     1C 00 90 CD |  if_b	jmp	#LR__1930
174f0                 | '   long[base2+12]:=loop
174f0     00 15 02 F6 | 	mov	arg02, _var01
174f4     0C 14 06 F1 | 	add	arg02, #12
174f8     0A 1D 62 FC | 	wrlong	arg06, arg02
174fc                 | '   long[base2+16]:= len
174fc     00 1D 02 F6 | 	mov	arg06, _var01
17500     10 1C 06 F1 | 	add	arg06, #16
17504     0E 1B 62 FC | 	wrlong	arg05, arg06
17508     1C 00 90 FD | 	jmp	#LR__1931
1750c                 | LR__1930
1750c                 | ' else
1750c                 | '   long[base2+12]:= len
1750c     00 1D 02 F6 | 	mov	arg06, _var01
17510     0C 1C 06 F1 | 	add	arg06, #12
17514     0E 1B 62 FC | 	wrlong	arg05, arg06
17518                 | '   long[base2+16]:= len+1
17518     01 1A 06 F1 | 	add	arg05, #1
1751c     00 13 02 F6 | 	mov	arg01, _var01
17520     10 12 06 F1 | 	add	arg01, #16
17524     09 1B 62 FC | 	wrlong	arg05, arg01
17528                 | LR__1931
17528     0B 17 52 F6 | 	abs	arg03, arg03 wc
1752c     0F 1B 80 FF 
17530     0B 3F 1A FD | 	qdiv	##3546911, arg03
17534                 | ' word[base2+20]:=vol
17534     00 17 02 F6 | 	mov	arg03, _var01
17538     14 16 06 F1 | 	add	arg03, #20
1753c     0B 19 52 FC | 	wrword	arg04, arg03
17540                 | ' word[base2+24]:= 3546911/splfreq 
17540     00 13 02 F6 | 	mov	arg01, _var01
17544     18 12 06 F1 | 	add	arg01, #24
17548                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
17548                 | ' long[base2+28]:=$40000000
17548     18 18 62 FD | 	getqx	arg04
1754c     0C 19 82 F6 | 	negc	arg04, arg04
17550     09 19 52 FC | 	wrword	arg04, arg01
17554     00 19 02 F6 | 	mov	arg04, _var01
17558     1A 18 06 F1 | 	add	arg04, #26
1755c     0C 01 5A FC | 	wrword	#256, arg04
17560     1C 00 06 F1 | 	add	_var01, #28
17564     00 00 A0 FF 
17568     00 01 68 FC | 	wrlong	##1073741824, _var01
1756c                 | _Audio093b_8_sc_spin2_play8_ret
1756c     2D 00 64 FD | 	ret
17570                 | 
17570                 | ' 
17570                 | '     
17570                 | ' pub stop(channel) 'silence it
17570                 | _Audio093b_8_sc_spin2_stop
17570                 | ' 
17570                 | ' word[@channel1[0]+32*channel+20]:=0
17570     0C E4 05 F1 | 	add	objptr, #12
17574     F2 00 02 F6 | 	mov	_var01, objptr
17578     05 12 66 F0 | 	shl	arg01, #5
1757c     09 01 02 F1 | 	add	_var01, arg01
17580     14 00 06 F1 | 	add	_var01, #20
17584     00 01 58 FC | 	wrword	#0, _var01
17588     0C E4 85 F1 | 	sub	objptr, #12
1758c                 | _Audio093b_8_sc_spin2_stop_ret
1758c     2D 00 64 FD | 	ret
17590                 | hubexit
17590     81 00 80 FD | 	jmp	#cogexit
17594                 | 
17594                 | __system___setbaud
17594     14 60 06 FB | 	rdlong	muldiva_, #20
17598     09 63 02 F6 | 	mov	muldivb_, arg01
1759c     BA 00 A0 FD | 	call	#divide_
175a0     97 06 48 FB | 	callpa	#(@LR__1941-@LR__1940)>>2,fcache_load_ptr_
175a4                 | LR__1940
175a4     3E FA 9D FA | 	rdpin	result1, #62 wc
175a8     FE FC A1 F1 | 	subx	result2, result2
175ac     F4 FF 9F CD |  if_b	jmp	#LR__1940
175b0                 | LR__1941
175b0     40 7C 64 FD | 	dirl	#62
175b4     40 7E 64 FD | 	dirl	#63
175b8     F4 62 62 FC | 	wrlong	muldivb_, ptr___system__dat__
175bc     10 62 66 F0 | 	shl	muldivb_, #16
175c0     07 14 06 F6 | 	mov	arg02, #7
175c4     31 15 02 F1 | 	add	arg02, muldivb_
175c8     3E F8 0C FC | 	wrpin	#124, #62
175cc     3E 14 16 FC | 	wxpin	arg02, #62
175d0     3F 7C 0C FC | 	wrpin	#62, #63
175d4     14 14 06 F1 | 	add	arg02, #20
175d8     3F 14 16 FC | 	wxpin	arg02, #63
175dc     41 7C 64 FD | 	dirh	#62
175e0     41 7E 64 FD | 	dirh	#63
175e4                 | __system___setbaud_ret
175e4     2D 00 64 FD | 	ret
175e8                 | 
175e8                 | __system___txraw
175e8     01 4A 05 F6 | 	mov	COUNT_, #1
175ec     A8 00 A0 FD | 	call	#pushregs_
175f0     09 1F 02 F6 | 	mov	local01, arg01
175f4     97 06 48 FB | 	callpa	#(@LR__1951-@LR__1950)>>2,fcache_load_ptr_
175f8                 | LR__1950
175f8     3E FA 9D FA | 	rdpin	result1, #62 wc
175fc     FE FC A1 F1 | 	subx	result2, result2
17600     F4 FF 9F CD |  if_b	jmp	#LR__1950
17604                 | LR__1951
17604     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
17608     C2 01 00 AF 
1760c     00 12 06 A6 |  if_e	mov	arg01, ##230400
17610     80 FF BF AD |  if_e	call	#__system___setbaud
17614     58 7C 64 FD | 	drvl	#62
17618     3E 1E 26 FC | 	wypin	local01, #62
1761c     01 FA 05 F6 | 	mov	result1, #1
17620     A7 F0 03 F6 | 	mov	ptra, fp
17624     B2 00 A0 FD | 	call	#popregs_
17628                 | __system___txraw_ret
17628     2D 00 64 FD | 	ret
1762c                 | 
1762c                 | __system___rxraw
1762c     0D 4A 05 F6 | 	mov	COUNT_, #13
17630     A8 00 A0 FD | 	call	#pushregs_
17634     09 1F 02 F6 | 	mov	local01, arg01
17638     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1763c     C2 01 00 AF 
17640     00 12 06 A6 |  if_e	mov	arg01, ##230400
17644     4C FF BF AD |  if_e	call	#__system___setbaud
17648     00 1E 0E F2 | 	cmp	local01, #0 wz
1764c     20 00 90 AD |  if_e	jmp	#LR__1960
17650     14 22 06 FB | 	rdlong	local03, #20
17654     0A 22 46 F0 | 	shr	local03, #10
17658     11 1F 02 FD | 	qmul	local01, local03
1765c     1A FA 61 FD | 	getct	result1
17660     18 24 62 FD | 	getqx	local04
17664     12 FB 01 F1 | 	add	result1, local04
17668     FD 26 02 F6 | 	mov	local05, result1
1766c     04 00 90 FD | 	jmp	#LR__1961
17670                 | LR__1960
17670     00 26 06 F6 | 	mov	local05, #0
17674                 | LR__1961
17674     01 28 66 F6 | 	neg	local06, #1
17678     3F 2A 06 F6 | 	mov	local07, #63
1767c     00 2C 06 F6 | 	mov	local08, #0
17680     04 E8 05 F1 | 	add	ptr___system__dat__, #4
17684     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
17688     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
1768c                 | LR__1962
1768c     08 2E 16 F4 | 	testb	local09, #8 wc
17690     09 2E 76 F4 | 	testbn	local09, #9 andc
17694     0A 2E 46 F0 | 	shr	local09, #10
17698     01 2C 06 C6 |  if_b	mov	local08, #1
1769c     40 7E 6C 3D |  if_ae	testp	#63 wz
176a0     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
176a4     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
176a8     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
176ac                 | LR__1963
176ac     00 20 06 F6 | 	mov	local02, #0
176b0     00 2C 0E F2 | 	cmp	local08, #0 wz
176b4     01 20 66 56 |  if_ne	neg	local02, #1
176b8     00 30 06 F6 | 	mov	local10, #0
176bc     00 22 06 F6 | 	mov	local03, #0
176c0     00 1E 0E F2 | 	cmp	local01, #0 wz
176c4     01 22 66 56 |  if_ne	neg	local03, #1
176c8     00 24 06 F6 | 	mov	local04, #0
176cc     00 32 06 F6 | 	mov	local11, #0
176d0     1A FA 61 FD | 	getct	result1
176d4     FD 34 02 F6 | 	mov	local12, result1
176d8     1A 37 02 F6 | 	mov	local13, local12
176dc     13 37 82 F1 | 	sub	local13, local05
176e0     00 36 56 F2 | 	cmps	local13, #0 wc
176e4     00 32 26 C6 |  if_b	not	local11, #0
176e8     00 32 0E F2 | 	cmp	local11, #0 wz
176ec     00 24 26 56 |  if_ne	not	local04, #0
176f0     12 23 CA F7 | 	test	local03, local04 wz
176f4     00 30 26 56 |  if_ne	not	local10, #0
176f8     18 21 4A F5 | 	or	local02, local10 wz
176fc     8C FF 9F AD |  if_e	jmp	#LR__1962
17700     00 2C 0E F2 | 	cmp	local08, #0 wz
17704     17 29 02 56 |  if_ne	mov	local06, local09
17708     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
1770c     04 E8 05 F1 | 	add	ptr___system__dat__, #4
17710     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
17714     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
17718     14 FB 01 F6 | 	mov	result1, local06
1771c     A7 F0 03 F6 | 	mov	ptra, fp
17720     B2 00 A0 FD | 	call	#popregs_
17724                 | __system___rxraw_ret
17724     2D 00 64 FD | 	ret
17728                 | 
17728                 | __system___getus
17728     1A FC 71 FD | 	getct	result2 wc
1772c     1A 00 62 FD | 	getct	_var01
17730     10 E8 05 F1 | 	add	ptr___system__dat__, #16
17734     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
17738     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
1773c     20 00 90 5D |  if_ne	jmp	#LR__1970
17740     14 02 06 FB | 	rdlong	_var02, #20
17744     A1 07 00 FF 
17748     40 02 16 FD | 	qdiv	_var02, ##1000000
1774c     10 E8 05 F1 | 	add	ptr___system__dat__, #16
17750     18 FA 61 FD | 	getqx	result1
17754     FD 02 02 F6 | 	mov	_var02, result1
17758     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1775c     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
17760                 | LR__1970
17760     01 FD 11 FD | 	qdiv	result2, _var02
17764     19 FC 61 FD | 	getqy	result2
17768     28 FC 61 FD | 	setq	result2
1776c     01 01 12 FD | 	qdiv	_var01, _var02
17770     18 FA 61 FD | 	getqx	result1
17774                 | __system___getus_ret
17774     2D 00 64 FD | 	ret
17778                 | 
17778                 | __system____builtin_memmove
17778     09 01 02 F6 | 	mov	_var01, arg01
1777c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
17780     10 00 90 CD |  if_b	jmp	#LR__1980
17784     0A 03 02 F6 | 	mov	_var02, arg02
17788     0B 03 02 F1 | 	add	_var02, arg03
1778c     01 13 52 F2 | 	cmps	arg01, _var02 wc
17790     48 00 90 CD |  if_b	jmp	#LR__1986
17794                 | LR__1980
17794     0B 05 02 F6 | 	mov	_var03, arg03
17798     02 04 4E F0 | 	shr	_var03, #2 wz
1779c     18 00 90 AD |  if_e	jmp	#LR__1985
177a0     97 0A 48 FB | 	callpa	#(@LR__1983-@LR__1981)>>2,fcache_load_ptr_
177a4                 | LR__1981
177a4     02 09 D8 FC | 	rep	@LR__1984, _var03
177a8                 | LR__1982
177a8     0A 05 02 FB | 	rdlong	_var03, arg02
177ac     09 05 62 FC | 	wrlong	_var03, arg01
177b0     04 12 06 F1 | 	add	arg01, #4
177b4     04 14 06 F1 | 	add	arg02, #4
177b8                 | LR__1983
177b8                 | LR__1984
177b8                 | LR__1985
177b8     02 16 CE F7 | 	test	arg03, #2 wz
177bc     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
177c0     09 03 52 5C |  if_ne	wrword	_var02, arg01
177c4     02 12 06 51 |  if_ne	add	arg01, #2
177c8     02 14 06 51 |  if_ne	add	arg02, #2
177cc     01 16 CE F7 | 	test	arg03, #1 wz
177d0     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
177d4     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
177d8     28 00 90 FD | 	jmp	#LR__1992
177dc                 | LR__1986
177dc     0B 13 02 F1 | 	add	arg01, arg03
177e0     0B 15 02 F1 | 	add	arg02, arg03
177e4     0B 07 0A F6 | 	mov	_var04, arg03 wz
177e8     18 00 90 AD |  if_e	jmp	#LR__1991
177ec     97 0A 48 FB | 	callpa	#(@LR__1989-@LR__1987)>>2,fcache_load_ptr_
177f0                 | LR__1987
177f0     03 09 D8 FC | 	rep	@LR__1990, _var04
177f4                 | LR__1988
177f4     01 12 86 F1 | 	sub	arg01, #1
177f8     01 14 86 F1 | 	sub	arg02, #1
177fc     0A 03 C2 FA | 	rdbyte	_var02, arg02
17800     09 03 42 FC | 	wrbyte	_var02, arg01
17804                 | LR__1989
17804                 | LR__1990
17804                 | LR__1991
17804                 | LR__1992
17804     00 FB 01 F6 | 	mov	result1, _var01
17808                 | __system____builtin_memmove_ret
17808     2D 00 64 FD | 	ret
1780c                 | 
1780c                 | __system____builtin_strcpy
1780c     09 01 02 F6 | 	mov	_var01, arg01
17810     97 0A 48 FB | 	callpa	#(@LR__2001-@LR__2000)>>2,fcache_load_ptr_
17814                 | LR__2000
17814     0A FB C9 FA | 	rdbyte	result1, arg02 wz
17818     09 FB 41 FC | 	wrbyte	result1, arg01
1781c     01 14 06 F1 | 	add	arg02, #1
17820     01 12 06 F1 | 	add	arg01, #1
17824     EC FF 9F 5D |  if_ne	jmp	#LR__2000
17828                 | LR__2001
17828     00 FB 01 F6 | 	mov	result1, _var01
1782c                 | __system____builtin_strcpy_ret
1782c     2D 00 64 FD | 	ret
17830                 | 
17830                 | __system____topofstack
17830     00 4A 05 F6 | 	mov	COUNT_, #0
17834     A8 00 A0 FD | 	call	#pushregs_
17838     08 F0 07 F1 | 	add	ptra, #8
1783c     04 4E 05 F1 | 	add	fp, #4
17840     A7 12 62 FC | 	wrlong	arg01, fp
17844     A7 FA 01 F6 | 	mov	result1, fp
17848     04 4E 85 F1 | 	sub	fp, #4
1784c     A7 F0 03 F6 | 	mov	ptra, fp
17850     B2 00 A0 FD | 	call	#popregs_
17854                 | __system____topofstack_ret
17854     2D 00 64 FD | 	ret
17858                 | 
17858                 | __system___lockmem
17858     00 FA 05 F6 | 	mov	result1, #0
1785c     01 FA 61 FD | 	cogid	result1
17860     00 FB 05 F1 | 	add	result1, #256
17864                 | LR__2010
17864     09 01 0A FB | 	rdlong	_var01, arg01 wz
17868     09 FB 61 AC |  if_e	wrlong	result1, arg01
1786c     09 01 02 AB |  if_e	rdlong	_var01, arg01
17870     09 01 02 AB |  if_e	rdlong	_var01, arg01
17874     FD 00 0A F2 | 	cmp	_var01, result1 wz
17878     E8 FF 9F 5D |  if_ne	jmp	#LR__2010
1787c                 | __system___lockmem_ret
1787c     2D 00 64 FD | 	ret
17880                 | 
17880                 | __system___string_cmp
17880     97 14 48 FB | 	callpa	#(@LR__2021-@LR__2020)>>2,fcache_load_ptr_
17884                 | LR__2020
17884     09 01 C2 FA | 	rdbyte	_var01, arg01
17888     0A 03 C2 FA | 	rdbyte	_var02, arg02
1788c     00 05 02 F6 | 	mov	_var03, _var01
17890     01 05 8A F1 | 	sub	_var03, _var02 wz
17894     01 12 06 F1 | 	add	arg01, #1
17898     01 14 06 F1 | 	add	arg02, #1
1789c     0C 00 90 5D |  if_ne	jmp	#LR__2022
178a0     00 00 0E F2 | 	cmp	_var01, #0 wz
178a4     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
178a8     D8 FF 9F 5D |  if_ne	jmp	#LR__2020
178ac                 | LR__2021
178ac                 | LR__2022
178ac     02 FB 01 F6 | 	mov	result1, _var03
178b0                 | __system___string_cmp_ret
178b0     2D 00 64 FD | 	ret
178b4                 | 
178b4                 | __system___string_concat
178b4     05 4A 05 F6 | 	mov	COUNT_, #5
178b8     A8 00 A0 FD | 	call	#pushregs_
178bc     09 1F 02 F6 | 	mov	local01, arg01
178c0     0A 21 02 F6 | 	mov	local02, arg02
178c4     0F 13 02 F6 | 	mov	arg01, local01
178c8     09 23 02 F6 | 	mov	local03, arg01
178cc     97 06 48 FB | 	callpa	#(@LR__2031-@LR__2030)>>2,fcache_load_ptr_
178d0                 | LR__2030
178d0     11 FB C9 FA | 	rdbyte	result1, local03 wz
178d4     01 22 06 51 |  if_ne	add	local03, #1
178d8     F4 FF 9F 5D |  if_ne	jmp	#LR__2030
178dc                 | LR__2031
178dc     09 23 82 F1 | 	sub	local03, arg01
178e0     11 25 02 F6 | 	mov	local04, local03
178e4     10 13 02 F6 | 	mov	arg01, local02
178e8     09 23 02 F6 | 	mov	local03, arg01
178ec     97 06 48 FB | 	callpa	#(@LR__2033-@LR__2032)>>2,fcache_load_ptr_
178f0                 | LR__2032
178f0     11 FB C9 FA | 	rdbyte	result1, local03 wz
178f4     01 22 06 51 |  if_ne	add	local03, #1
178f8     F4 FF 9F 5D |  if_ne	jmp	#LR__2032
178fc                 | LR__2033
178fc     09 23 82 F1 | 	sub	local03, arg01
17900     12 13 02 F6 | 	mov	arg01, local04
17904     11 13 02 F1 | 	add	arg01, local03
17908     01 12 06 F1 | 	add	arg01, #1
1790c     14 39 B0 FD | 	call	#__system___gc_alloc_managed
17910     FD 26 0A F6 | 	mov	local05, result1 wz
17914     28 00 90 AD |  if_e	jmp	#LR__2034
17918     13 13 02 F6 | 	mov	arg01, local05
1791c     0F 15 02 F6 | 	mov	arg02, local01
17920     12 17 02 F6 | 	mov	arg03, local04
17924     50 FE BF FD | 	call	#__system____builtin_memmove
17928     13 13 02 F6 | 	mov	arg01, local05
1792c     12 13 02 F1 | 	add	arg01, local04
17930     01 22 06 F1 | 	add	local03, #1
17934     10 15 02 F6 | 	mov	arg02, local02
17938     11 17 02 F6 | 	mov	arg03, local03
1793c     38 FE BF FD | 	call	#__system____builtin_memmove
17940                 | LR__2034
17940     13 FB 01 F6 | 	mov	result1, local05
17944     A7 F0 03 F6 | 	mov	ptra, fp
17948     B2 00 A0 FD | 	call	#popregs_
1794c                 | __system___string_concat_ret
1794c     2D 00 64 FD | 	ret
17950                 | 
17950                 | __system___tx
17950     02 4A 05 F6 | 	mov	COUNT_, #2
17954     A8 00 A0 FD | 	call	#pushregs_
17958     09 1F 02 F6 | 	mov	local01, arg01
1795c     0A 1E 0E F2 | 	cmp	local01, #10 wz
17960     18 00 90 5D |  if_ne	jmp	#LR__2040
17964     08 E8 05 F1 | 	add	ptr___system__dat__, #8
17968     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
1796c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
17970     02 20 CE F7 | 	test	local02, #2 wz
17974     0D 12 06 56 |  if_ne	mov	arg01, #13
17978     6C FC BF 5D |  if_ne	call	#__system___txraw
1797c                 | LR__2040
1797c     0F 13 02 F6 | 	mov	arg01, local01
17980     64 FC BF FD | 	call	#__system___txraw
17984     A7 F0 03 F6 | 	mov	ptra, fp
17988     B2 00 A0 FD | 	call	#popregs_
1798c                 | __system___tx_ret
1798c     2D 00 64 FD | 	ret
17990                 | 
17990                 | __system___rx
17990     01 4A 05 F6 | 	mov	COUNT_, #1
17994     A8 00 A0 FD | 	call	#pushregs_
17998                 | LR__2050
17998     00 12 06 F6 | 	mov	arg01, #0
1799c     8C FC BF FD | 	call	#__system___rxraw
179a0     FD 1E 02 F6 | 	mov	local01, result1
179a4     FF FF 7F FF 
179a8     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
179ac     E8 FF 9F AD |  if_e	jmp	#LR__2050
179b0     0D 1E 0E F2 | 	cmp	local01, #13 wz
179b4     14 00 90 5D |  if_ne	jmp	#LR__2051
179b8     08 E8 05 F1 | 	add	ptr___system__dat__, #8
179bc     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
179c0     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
179c4     02 FA CD F7 | 	test	result1, #2 wz
179c8     0A 1E 06 56 |  if_ne	mov	local01, #10
179cc                 | LR__2051
179cc     08 E8 05 F1 | 	add	ptr___system__dat__, #8
179d0     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
179d4     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
179d8     01 12 CE F7 | 	test	arg01, #1 wz
179dc     1C 00 90 AD |  if_e	jmp	#LR__2054
179e0     7F 1E 0E F2 | 	cmp	local01, #127 wz
179e4     0C 00 90 5D |  if_ne	jmp	#LR__2052
179e8     08 12 06 F6 | 	mov	arg01, #8
179ec     60 FF BF FD | 	call	#__system___tx
179f0     08 00 90 FD | 	jmp	#LR__2053
179f4                 | LR__2052
179f4     0F 13 02 F6 | 	mov	arg01, local01
179f8     54 FF BF FD | 	call	#__system___tx
179fc                 | LR__2053
179fc                 | LR__2054
179fc     0F FB 01 F6 | 	mov	result1, local01
17a00     A7 F0 03 F6 | 	mov	ptra, fp
17a04     B2 00 A0 FD | 	call	#popregs_
17a08                 | __system___rx_ret
17a08     2D 00 64 FD | 	ret
17a0c                 | 
17a0c                 | __system___pinwrite
17a0c     09 01 02 F6 | 	mov	_var01, arg01
17a10     1F 00 06 F5 | 	and	_var01, #31
17a14     20 12 CE F7 | 	test	arg01, #32 wz
17a18     06 12 46 F0 | 	shr	arg01, #6
17a1c     09 13 CA F9 | 	bmask	arg01, arg01
17a20     00 13 62 F0 | 	shl	arg01, _var01
17a24     00 15 62 F0 | 	shl	arg02, _var01
17a28     1C 00 90 AD |  if_e	jmp	#LR__2060
17a2c     09 F7 43 F5 | 	or	dirb, arg01
17a30     FD 01 02 F6 | 	mov	_var01, outb
17a34     09 01 22 F5 | 	andn	_var01, arg01
17a38     09 15 02 F5 | 	and	arg02, arg01
17a3c     0A 01 42 F5 | 	or	_var01, arg02
17a40     00 FB 03 F6 | 	mov	outb, _var01
17a44     18 00 90 FD | 	jmp	#LR__2061
17a48                 | LR__2060
17a48     09 F5 43 F5 | 	or	dira, arg01
17a4c     FC 01 02 F6 | 	mov	_var01, outa
17a50     09 01 22 F5 | 	andn	_var01, arg01
17a54     09 15 02 F5 | 	and	arg02, arg01
17a58     0A 01 42 F5 | 	or	_var01, arg02
17a5c     00 F9 03 F6 | 	mov	outa, _var01
17a60                 | LR__2061
17a60                 | __system___pinwrite_ret
17a60     2D 00 64 FD | 	ret
17a64                 | 
17a64                 | __system___basic_read_line
17a64     06 4A 05 F6 | 	mov	COUNT_, #6
17a68     A8 00 A0 FD | 	call	#pushregs_
17a6c     09 1F 02 F6 | 	mov	local01, arg01
17a70     00 20 06 F6 | 	mov	local02, #0
17a74     18 22 06 F6 | 	mov	local03, #24
17a78     00 24 06 F6 | 	mov	local04, #0
17a7c     18 12 06 F6 | 	mov	arg01, #24
17a80     A0 37 B0 FD | 	call	#__system___gc_alloc_managed
17a84     FD 26 0A F6 | 	mov	local05, result1 wz
17a88     13 FB 01 A6 |  if_e	mov	result1, local05
17a8c     B0 00 90 AD |  if_e	jmp	#LR__2073
17a90                 | LR__2070
17a90     0F 13 02 F6 | 	mov	arg01, local01
17a94     78 0B B0 FD | 	call	#__system___basic_get_char
17a98     FD 28 02 F6 | 	mov	local06, result1
17a9c     01 28 56 F2 | 	cmps	local06, #1 wc
17aa0     8C 00 90 CD |  if_b	jmp	#LR__2072
17aa4     0A 28 0E F2 | 	cmp	local06, #10 wz
17aa8     10 00 90 5D |  if_ne	jmp	#LR__2071
17aac     00 24 0E F2 | 	cmp	local04, #0 wz
17ab0     01 20 56 52 |  if_ne	cmps	local02, #1 wc
17ab4     01 20 86 11 |  if_a	sub	local02, #1
17ab8     74 00 90 FD | 	jmp	#LR__2072
17abc                 | LR__2071
17abc     0D 28 0E F2 | 	cmp	local06, #13 wz
17ac0     01 24 06 A6 |  if_e	mov	local04, #1
17ac4     00 24 06 56 |  if_ne	mov	local04, #0
17ac8     08 28 0E F2 | 	cmp	local06, #8 wz
17acc     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
17ad0     01 20 56 A2 |  if_e	cmps	local02, #1 wc
17ad4     01 20 86 21 |  if_nc_and_z	sub	local02, #1
17ad8     B4 FF 9F AD |  if_e	jmp	#LR__2070
17adc     13 17 02 F6 | 	mov	arg03, local05
17ae0     10 17 02 F1 | 	add	arg03, local02
17ae4     0B 29 42 FC | 	wrbyte	local06, arg03
17ae8     01 20 06 F1 | 	add	local02, #1
17aec     11 21 0A F2 | 	cmp	local02, local03 wz
17af0     9C FF 9F 5D |  if_ne	jmp	#LR__2070
17af4     11 13 02 F6 | 	mov	arg01, local03
17af8     20 12 06 F1 | 	add	arg01, #32
17afc     24 37 B0 FD | 	call	#__system___gc_alloc_managed
17b00     FD 28 0A F6 | 	mov	local06, result1 wz
17b04     14 FB 01 A6 |  if_e	mov	result1, local06
17b08     34 00 90 AD |  if_e	jmp	#LR__2073
17b0c     14 13 02 F6 | 	mov	arg01, local06
17b10     13 15 02 F6 | 	mov	arg02, local05
17b14     11 17 02 F6 | 	mov	arg03, local03
17b18     5C FC BF FD | 	call	#__system____builtin_memmove
17b1c     20 22 06 F1 | 	add	local03, #32
17b20     13 13 02 F6 | 	mov	arg01, local05
17b24     38 38 B0 FD | 	call	#__system___gc_free
17b28     14 27 02 F6 | 	mov	local05, local06
17b2c     60 FF 9F FD | 	jmp	#LR__2070
17b30                 | LR__2072
17b30     13 29 02 F6 | 	mov	local06, local05
17b34     10 29 02 F1 | 	add	local06, local02
17b38     14 01 48 FC | 	wrbyte	#0, local06
17b3c     13 FB 01 F6 | 	mov	result1, local05
17b40                 | LR__2073
17b40     A7 F0 03 F6 | 	mov	ptra, fp
17b44     B2 00 A0 FD | 	call	#popregs_
17b48                 | __system___basic_read_line_ret
17b48     2D 00 64 FD | 	ret
17b4c                 | 
17b4c                 | __system___waitms
17b4c     09 01 02 F6 | 	mov	_var01, arg01
17b50     1A 02 62 FD | 	getct	_var02
17b54     14 04 06 FB | 	rdlong	_var03, #20
17b58     97 14 48 FB | 	callpa	#(@LR__2081-@LR__2080)>>2,fcache_load_ptr_
17b5c                 | LR__2080
17b5c     01 00 00 FF 
17b60     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
17b64     1C 00 90 CD |  if_b	jmp	#LR__2082
17b68     02 03 02 F1 | 	add	_var02, _var03
17b6c     01 13 02 F6 | 	mov	arg01, _var02
17b70     00 12 66 FA | 	addct1	arg01, #0
17b74     24 22 60 FD | 	waitct1
17b78     01 00 00 FF 
17b7c     E8 01 86 F1 | 	sub	_var01, ##1000
17b80     D8 FF 9F FD | 	jmp	#LR__2080
17b84                 | LR__2081
17b84                 | LR__2082
17b84     01 00 56 F2 | 	cmps	_var01, #1 wc
17b88     28 00 90 CD |  if_b	jmp	#LR__2083
17b8c     02 01 02 FD | 	qmul	_var01, _var03
17b90     01 00 00 FF 
17b94     E8 17 06 F6 | 	mov	arg03, ##1000
17b98     19 FA 61 FD | 	getqy	result1
17b9c     18 12 62 FD | 	getqx	arg01
17ba0     28 FA 61 FD | 	setq	result1
17ba4     0B 13 12 FD | 	qdiv	arg01, arg03
17ba8     18 12 62 FD | 	getqx	arg01
17bac     01 13 62 FA | 	addct1	arg01, _var02
17bb0     24 22 60 FD | 	waitct1
17bb4                 | LR__2083
17bb4                 | __system___waitms_ret
17bb4     2D 00 64 FD | 	ret
17bb8                 | 
17bb8                 | __system___waitus
17bb8     09 01 02 F6 | 	mov	_var01, arg01
17bbc     1A 02 62 FD | 	getct	_var02
17bc0     14 04 06 FB | 	rdlong	_var03, #20
17bc4     97 14 48 FB | 	callpa	#(@LR__2091-@LR__2090)>>2,fcache_load_ptr_
17bc8                 | LR__2090
17bc8     A1 07 00 FF 
17bcc     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
17bd0     1C 00 90 CD |  if_b	jmp	#LR__2092
17bd4     02 03 02 F1 | 	add	_var02, _var03
17bd8     01 13 02 F6 | 	mov	arg01, _var02
17bdc     00 12 66 FA | 	addct1	arg01, #0
17be0     24 22 60 FD | 	waitct1
17be4     A1 07 00 FF 
17be8     40 00 86 F1 | 	sub	_var01, ##1000000
17bec     D8 FF 9F FD | 	jmp	#LR__2090
17bf0                 | LR__2091
17bf0                 | LR__2092
17bf0     01 00 56 F2 | 	cmps	_var01, #1 wc
17bf4     28 00 90 CD |  if_b	jmp	#LR__2093
17bf8     02 01 02 FD | 	qmul	_var01, _var03
17bfc     A1 07 00 FF 
17c00     40 16 06 F6 | 	mov	arg03, ##1000000
17c04     19 FA 61 FD | 	getqy	result1
17c08     18 12 62 FD | 	getqx	arg01
17c0c     28 FA 61 FD | 	setq	result1
17c10     0B 13 12 FD | 	qdiv	arg01, arg03
17c14     18 FA 61 FD | 	getqx	result1
17c18     FD 02 62 FA | 	addct1	_var02, result1
17c1c     24 22 60 FD | 	waitct1
17c20                 | LR__2093
17c20                 | __system___waitus_ret
17c20     2D 00 64 FD | 	ret
17c24                 | 
17c24                 | __system___mount
17c24     0B 4A 05 F6 | 	mov	COUNT_, #11
17c28     A8 00 A0 FD | 	call	#pushregs_
17c2c     09 1F 02 F6 | 	mov	local01, arg01
17c30     0A 21 0A F6 | 	mov	local02, arg02 wz
17c34     01 22 66 F6 | 	neg	local03, #1
17c38     01 FA 65 A6 |  if_e	neg	result1, #1
17c3c     98 02 90 AD |  if_e	jmp	#LR__2115
17c40     0F FB C1 FA | 	rdbyte	result1, local01
17c44     2F FA 0D F2 | 	cmp	result1, #47 wz
17c48     28 00 90 5D |  if_ne	jmp	#LR__2102
17c4c     0F 13 02 F6 | 	mov	arg01, local01
17c50     09 25 02 F6 | 	mov	local04, arg01
17c54     97 06 48 FB | 	callpa	#(@LR__2101-@LR__2100)>>2,fcache_load_ptr_
17c58                 | LR__2100
17c58     12 FB C9 FA | 	rdbyte	result1, local04 wz
17c5c     01 24 06 51 |  if_ne	add	local04, #1
17c60     F4 FF 9F 5D |  if_ne	jmp	#LR__2100
17c64                 | LR__2101
17c64     09 25 82 F1 | 	sub	local04, arg01
17c68     12 FB 01 F6 | 	mov	result1, local04
17c6c     10 FA 55 F2 | 	cmps	result1, #16 wc
17c70     14 00 90 CD |  if_b	jmp	#LR__2103
17c74                 | LR__2102
17c74     20 E8 05 F1 | 	add	ptr___system__dat__, #32
17c78     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
17c7c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
17c80     01 FA 65 F6 | 	neg	result1, #1
17c84     50 02 90 FD | 	jmp	#LR__2115
17c88                 | LR__2103
17c88     00 26 06 F6 | 	mov	local05, #0
17c8c                 | LR__2104
17c8c     04 26 56 F2 | 	cmps	local05, #4 wc
17c90     B0 00 90 3D |  if_ae	jmp	#LR__2109
17c94     13 13 02 F6 | 	mov	arg01, local05
17c98     02 12 66 F0 | 	shl	arg01, #2
17c9c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
17ca0     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
17ca4     09 FB 09 FB | 	rdlong	result1, arg01 wz
17ca8     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
17cac     00 22 56 A2 |  if_e	cmps	local03, #0 wc
17cb0     13 23 02 86 |  if_c_and_z	mov	local03, local05
17cb4     84 00 90 8D |  if_c_and_z	jmp	#LR__2108
17cb8     13 13 02 F6 | 	mov	arg01, local05
17cbc     02 12 66 F0 | 	shl	arg01, #2
17cc0     64 E8 05 F1 | 	add	ptr___system__dat__, #100
17cc4     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
17cc8     09 13 02 FB | 	rdlong	arg01, arg01
17ccc     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
17cd0     09 25 02 F6 | 	mov	local04, arg01
17cd4     97 06 48 FB | 	callpa	#(@LR__2106-@LR__2105)>>2,fcache_load_ptr_
17cd8                 | LR__2105
17cd8     12 FB C9 FA | 	rdbyte	result1, local04 wz
17cdc     01 24 06 51 |  if_ne	add	local04, #1
17ce0     F4 FF 9F 5D |  if_ne	jmp	#LR__2105
17ce4                 | LR__2106
17ce4     09 25 82 F1 | 	sub	local04, arg01
17ce8     12 29 02 F6 | 	mov	local06, local04
17cec     14 13 02 F6 | 	mov	arg01, local06
17cf0     0F 13 02 F1 | 	add	arg01, local01
17cf4     09 FB C1 FA | 	rdbyte	result1, arg01
17cf8     2F FA 0D F2 | 	cmp	result1, #47 wz
17cfc     14 2B 02 56 |  if_ne	mov	local07, local06
17d00     0F 2B 02 51 |  if_ne	add	local07, local01
17d04     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
17d08     30 00 90 5D |  if_ne	jmp	#LR__2107
17d0c     13 17 02 F6 | 	mov	arg03, local05
17d10     02 16 66 F0 | 	shl	arg03, #2
17d14     64 E8 05 F1 | 	add	ptr___system__dat__, #100
17d18     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
17d1c     0B 15 02 FB | 	rdlong	arg02, arg03
17d20     0F 13 02 F6 | 	mov	arg01, local01
17d24     14 17 02 F6 | 	mov	arg03, local06
17d28     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
17d2c     38 49 B0 FD | 	call	#__system__strncmp
17d30     00 FA 0D F2 | 	cmp	result1, #0 wz
17d34     13 23 02 A6 |  if_e	mov	local03, local05
17d38     08 00 90 AD |  if_e	jmp	#LR__2109
17d3c                 | LR__2107
17d3c                 | LR__2108
17d3c     01 26 06 F1 | 	add	local05, #1
17d40     48 FF 9F FD | 	jmp	#LR__2104
17d44                 | LR__2109
17d44     FF FF 7F FF 
17d48     FF 23 0E F2 | 	cmp	local03, ##-1 wz
17d4c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
17d50     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
17d54     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
17d58     01 FA 65 A6 |  if_e	neg	result1, #1
17d5c     78 01 90 AD |  if_e	jmp	#LR__2115
17d60     11 27 02 F6 | 	mov	local05, local03
17d64     13 2B 02 F6 | 	mov	local07, local05
17d68     02 2A 66 F0 | 	shl	local07, #2
17d6c     74 E8 05 F1 | 	add	ptr___system__dat__, #116
17d70     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
17d74     15 29 0A FB | 	rdlong	local06, local07 wz
17d78     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
17d7c     58 00 90 AD |  if_e	jmp	#LR__2110
17d80     4C 28 06 F1 | 	add	local06, #76
17d84     14 2B 0A FB | 	rdlong	local07, local06 wz
17d88     4C 28 86 F1 | 	sub	local06, #76
17d8c     48 00 90 AD |  if_e	jmp	#LR__2110
17d90     4C 28 06 F1 | 	add	local06, #76
17d94     14 2B 02 FB | 	rdlong	local07, local06
17d98     15 23 02 F6 | 	mov	local03, local07
17d9c     13 2A 46 F7 | 	zerox	local07, #19
17da0     14 22 46 F0 | 	shr	local03, #20
17da4     02 22 66 F0 | 	shl	local03, #2
17da8     ED 22 02 F1 | 	add	local03, __methods__
17dac     11 23 02 FB | 	rdlong	local03, local03
17db0     13 29 02 F6 | 	mov	local06, local05
17db4     02 28 66 F0 | 	shl	local06, #2
17db8     64 E8 05 F1 | 	add	ptr___system__dat__, #100
17dbc     F4 28 02 F1 | 	add	local06, ptr___system__dat__
17dc0     14 13 02 FB | 	rdlong	arg01, local06
17dc4     F2 28 02 F6 | 	mov	local06, objptr
17dc8     15 E5 01 F6 | 	mov	objptr, local07
17dcc     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
17dd0     2D 22 62 FD | 	call	local03
17dd4     14 E5 01 F6 | 	mov	objptr, local06
17dd8                 | LR__2110
17dd8     13 2D 02 F6 | 	mov	local08, local05
17ddc     02 2C 66 F0 | 	shl	local08, #2
17de0     74 E8 05 F1 | 	add	ptr___system__dat__, #116
17de4     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
17de8     16 21 62 FC | 	wrlong	local02, local08
17dec     00 20 0E F2 | 	cmp	local02, #0 wz
17df0     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
17df4     18 00 90 5D |  if_ne	jmp	#LR__2111
17df8     02 26 66 F0 | 	shl	local05, #2
17dfc     64 E8 05 F1 | 	add	ptr___system__dat__, #100
17e00     F4 26 02 F1 | 	add	local05, ptr___system__dat__
17e04     13 01 68 FC | 	wrlong	#0, local05
17e08     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
17e0c     C4 00 90 FD | 	jmp	#LR__2114
17e10                 | LR__2111
17e10     13 2F 02 F6 | 	mov	local09, local05
17e14     04 2E 66 F0 | 	shl	local09, #4
17e18     24 E8 05 F1 | 	add	ptr___system__dat__, #36
17e1c     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
17e20     17 13 02 F6 | 	mov	arg01, local09
17e24     0F 15 02 F6 | 	mov	arg02, local01
17e28     10 16 06 F6 | 	mov	arg03, #16
17e2c     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
17e30     88 47 B0 FD | 	call	#__system__strncpy
17e34     48 20 06 F1 | 	add	local02, #72
17e38     10 2D 0A FB | 	rdlong	local08, local02 wz
17e3c     48 20 86 F1 | 	sub	local02, #72
17e40     7C 00 90 AD |  if_e	jmp	#LR__2113
17e44     48 20 06 F1 | 	add	local02, #72
17e48     10 2D 02 FB | 	rdlong	local08, local02
17e4c     16 31 02 F6 | 	mov	local10, local08
17e50     13 2C 46 F7 | 	zerox	local08, #19
17e54     14 30 46 F0 | 	shr	local10, #20
17e58     02 30 66 F0 | 	shl	local10, #2
17e5c     ED 30 02 F1 | 	add	local10, __methods__
17e60     18 31 02 FB | 	rdlong	local10, local10
17e64     17 13 02 F6 | 	mov	arg01, local09
17e68     F2 32 02 F6 | 	mov	local11, objptr
17e6c     16 E5 01 F6 | 	mov	objptr, local08
17e70     2D 30 62 FD | 	call	local10
17e74     19 E5 01 F6 | 	mov	objptr, local11
17e78     FD 12 0A F6 | 	mov	arg01, result1 wz
17e7c     40 00 90 AD |  if_e	jmp	#LR__2112
17e80     13 2D 02 F6 | 	mov	local08, local05
17e84     02 2C 66 F0 | 	shl	local08, #2
17e88     74 E8 05 F1 | 	add	ptr___system__dat__, #116
17e8c     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
17e90     16 01 68 FC | 	wrlong	#0, local08
17e94     02 26 66 F0 | 	shl	local05, #2
17e98     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
17e9c     F4 26 02 F1 | 	add	local05, ptr___system__dat__
17ea0     13 01 68 FC | 	wrlong	#0, local05
17ea4     09 13 6A F6 | 	neg	arg01, arg01 wz
17ea8     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
17eac     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
17eb0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
17eb4     01 FA 65 56 |  if_ne	neg	result1, #1
17eb8     00 FA 05 A6 |  if_e	mov	result1, #0
17ebc     18 00 90 FD | 	jmp	#LR__2115
17ec0                 | LR__2112
17ec0                 | LR__2113
17ec0     02 26 66 F0 | 	shl	local05, #2
17ec4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
17ec8     F4 26 02 F1 | 	add	local05, ptr___system__dat__
17ecc     13 2F 62 FC | 	wrlong	local09, local05
17ed0     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
17ed4                 | LR__2114
17ed4     00 FA 05 F6 | 	mov	result1, #0
17ed8                 | LR__2115
17ed8     A7 F0 03 F6 | 	mov	ptra, fp
17edc     B2 00 A0 FD | 	call	#popregs_
17ee0                 | __system___mount_ret
17ee0     2D 00 64 FD | 	ret
17ee4                 | 
17ee4                 | __system___chdir
17ee4     00 4A 05 F6 | 	mov	COUNT_, #0
17ee8     A8 00 A0 FD | 	call	#pushregs_
17eec     40 F0 07 F1 | 	add	ptra, #64
17ef0     04 4E 05 F1 | 	add	fp, #4
17ef4     A7 12 62 FC | 	wrlong	arg01, fp
17ef8     04 4E 05 F1 | 	add	fp, #4
17efc     A7 14 02 F6 | 	mov	arg02, fp
17f00     08 4E 85 F1 | 	sub	fp, #8
17f04     94 43 B0 FD | 	call	#__system__stat
17f08     3C 4E 05 F1 | 	add	fp, #60
17f0c     A7 FA 61 FC | 	wrlong	result1, fp
17f10     3C 4E 85 F1 | 	sub	fp, #60
17f14     00 FA 0D F2 | 	cmp	result1, #0 wz
17f18     3C 4E 05 51 |  if_ne	add	fp, #60
17f1c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
17f20     3C 4E 85 51 |  if_ne	sub	fp, #60
17f24     BC 00 90 5D |  if_ne	jmp	#LR__2122
17f28     10 4E 05 F1 | 	add	fp, #16
17f2c     A7 12 02 FB | 	rdlong	arg01, fp
17f30     10 4E 85 F1 | 	sub	fp, #16
17f34     78 00 00 FF 
17f38     00 12 06 F5 | 	and	arg01, ##61440
17f3c     08 00 00 FF 
17f40     00 12 0E F2 | 	cmp	arg01, ##4096 wz
17f44     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
17f48     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
17f4c     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
17f50     01 FA 65 56 |  if_ne	neg	result1, #1
17f54     8C 00 90 5D |  if_ne	jmp	#LR__2122
17f58     04 4E 05 F1 | 	add	fp, #4
17f5c     A7 16 02 FB | 	rdlong	arg03, fp
17f60     04 4E 85 F1 | 	sub	fp, #4
17f64     0B 17 C2 FA | 	rdbyte	arg03, arg03
17f68     2F 16 0E F2 | 	cmp	arg03, #47 wz
17f6c     24 00 90 5D |  if_ne	jmp	#LR__2120
17f70     84 E8 05 F1 | 	add	ptr___system__dat__, #132
17f74     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
17f78     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
17f7c     04 4E 05 F1 | 	add	fp, #4
17f80     A7 14 02 FB | 	rdlong	arg02, fp
17f84     04 4E 85 F1 | 	sub	fp, #4
17f88     00 17 06 F6 | 	mov	arg03, #256
17f8c     2C 46 B0 FD | 	call	#__system__strncpy
17f90     4C 00 90 FD | 	jmp	#LR__2121
17f94                 | LR__2120
17f94     84 E9 05 F1 | 	add	ptr___system__dat__, #388
17f98     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
17f9c     38 4E 05 F1 | 	add	fp, #56
17fa0     A7 12 62 FC | 	wrlong	arg01, fp
17fa4     38 4E 85 F1 | 	sub	fp, #56
17fa8     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
17fac     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
17fb0     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
17fb4     00 17 06 F6 | 	mov	arg03, #256
17fb8     00 46 B0 FD | 	call	#__system__strncpy
17fbc     38 4E 05 F1 | 	add	fp, #56
17fc0     A7 12 02 FB | 	rdlong	arg01, fp
17fc4     34 4E 85 F1 | 	sub	fp, #52
17fc8     A7 14 02 FB | 	rdlong	arg02, fp
17fcc     04 4E 85 F1 | 	sub	fp, #4
17fd0     84 E8 05 F1 | 	add	ptr___system__dat__, #132
17fd4     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
17fd8     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
17fdc     10 00 B0 FD | 	call	#__system____getvfsforfile
17fe0                 | LR__2121
17fe0     00 FA 05 F6 | 	mov	result1, #0
17fe4                 | LR__2122
17fe4     A7 F0 03 F6 | 	mov	ptra, fp
17fe8     B2 00 A0 FD | 	call	#popregs_
17fec                 | __system___chdir_ret
17fec     2D 00 64 FD | 	ret
17ff0                 | 
17ff0                 | __system____getvfsforfile
17ff0     0E 4A 05 F6 | 	mov	COUNT_, #14
17ff4     A8 00 A0 FD | 	call	#pushregs_
17ff8     09 1F 02 F6 | 	mov	local01, arg01
17ffc     0A 21 02 F6 | 	mov	local02, arg02
18000     0B 23 02 F6 | 	mov	local03, arg03
18004     97 10 48 FB | 	callpa	#(@LR__2131-@LR__2130)>>2,fcache_load_ptr_
18008                 | LR__2130
18008     10 FB C1 FA | 	rdbyte	result1, local02
1800c     2F FA 0D F2 | 	cmp	result1, #47 wz
18010     01 20 06 A1 |  if_e	add	local02, #1
18014     10 25 C2 AA |  if_e	rdbyte	local04, local02
18018     01 20 86 A1 |  if_e	sub	local02, #1
1801c     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
18020     01 20 06 A1 |  if_e	add	local02, #1
18024     E0 FF 9F AD |  if_e	jmp	#LR__2130
18028                 | LR__2131
18028     10 25 C2 FA | 	rdbyte	local04, local02
1802c     2F 24 0E F2 | 	cmp	local04, #47 wz
18030     14 00 90 5D |  if_ne	jmp	#LR__2132
18034     0F 13 02 F6 | 	mov	arg01, local01
18038     10 15 02 F6 | 	mov	arg02, local02
1803c     00 17 06 F6 | 	mov	arg03, #256
18040     78 45 B0 FD | 	call	#__system__strncpy
18044     7C 00 90 FD | 	jmp	#LR__2134
18048                 | LR__2132
18048     84 E8 05 F1 | 	add	ptr___system__dat__, #132
1804c     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
18050     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
18054     0F 13 02 F6 | 	mov	arg01, local01
18058     00 17 06 F6 | 	mov	arg03, #256
1805c     5C 45 B0 FD | 	call	#__system__strncpy
18060     10 25 CA FA | 	rdbyte	local04, local02 wz
18064     5C 00 90 AD |  if_e	jmp	#LR__2133
18068     10 25 C2 FA | 	rdbyte	local04, local02
1806c     2E 24 0E F2 | 	cmp	local04, #46 wz
18070     01 20 06 A1 |  if_e	add	local02, #1
18074     10 27 C2 AA |  if_e	rdbyte	local05, local02
18078     01 20 86 A1 |  if_e	sub	local02, #1
1807c     13 29 02 A6 |  if_e	mov	local06, local05
18080     07 28 4E A7 |  if_e	zerox	local06, #7 wz
18084     3C 00 90 AD |  if_e	jmp	#LR__2133
18088     0F 27 C2 FA | 	rdbyte	local05, local01
1808c     2F 26 0E F2 | 	cmp	local05, #47 wz
18090     01 1E 06 A1 |  if_e	add	local01, #1
18094     0F 25 C2 AA |  if_e	rdbyte	local04, local01
18098     01 1E 86 A1 |  if_e	sub	local01, #1
1809c     00 24 4E A2 |  if_e	cmps	local04, #0 wz
180a0     34 01 00 5F 
180a4     A0 14 06 56 |  if_ne	mov	arg02, ##@LR__4140
180a8     0F 13 02 56 |  if_ne	mov	arg01, local01
180ac     00 17 06 56 |  if_ne	mov	arg03, #256
180b0     54 45 B0 5D |  if_ne	call	#__system__strncat
180b4     0F 13 02 F6 | 	mov	arg01, local01
180b8     10 15 02 F6 | 	mov	arg02, local02
180bc     00 17 06 F6 | 	mov	arg03, #256
180c0     44 45 B0 FD | 	call	#__system__strncat
180c4                 | LR__2133
180c4                 | LR__2134
180c4     0F 13 02 F6 | 	mov	arg01, local01
180c8     FC 46 B0 FD | 	call	#__system___normalizeName
180cc     0F 25 CA FA | 	rdbyte	local04, local01 wz
180d0     1C 00 90 AD |  if_e	jmp	#LR__2135
180d4     0F 25 C2 FA | 	rdbyte	local04, local01
180d8     2F 24 0E F2 | 	cmp	local04, #47 wz
180dc     01 1E 06 A1 |  if_e	add	local01, #1
180e0     0F 29 C2 AA |  if_e	rdbyte	local06, local01
180e4     01 1E 86 A1 |  if_e	sub	local01, #1
180e8     00 28 4E A2 |  if_e	cmps	local06, #0 wz
180ec     18 00 90 5D |  if_ne	jmp	#LR__2136
180f0                 | LR__2135
180f0     01 00 00 FF 
180f4     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
180f8     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
180fc     01 00 00 FF 
18100     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
18104     EC 01 90 FD | 	jmp	#LR__2150
18108                 | LR__2136
18108     00 2A 06 F6 | 	mov	local07, #0
1810c                 | LR__2137
1810c     04 2A 56 F2 | 	cmps	local07, #4 wc
18110     CC 01 90 3D |  if_ae	jmp	#LR__2149
18114     15 29 02 F6 | 	mov	local06, local07
18118     02 28 66 F0 | 	shl	local06, #2
1811c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
18120     F4 28 02 F1 | 	add	local06, ptr___system__dat__
18124     14 29 0A FB | 	rdlong	local06, local06 wz
18128     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1812c     A8 01 90 AD |  if_e	jmp	#LR__2148
18130     15 25 02 F6 | 	mov	local04, local07
18134     02 24 66 F0 | 	shl	local04, #2
18138     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1813c     F4 24 02 F1 | 	add	local04, ptr___system__dat__
18140     12 13 02 FB | 	rdlong	arg01, local04
18144     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
18148     09 2D 02 F6 | 	mov	local08, arg01
1814c     97 06 48 FB | 	callpa	#(@LR__2139-@LR__2138)>>2,fcache_load_ptr_
18150                 | LR__2138
18150     16 FB C9 FA | 	rdbyte	result1, local08 wz
18154     01 2C 06 51 |  if_ne	add	local08, #1
18158     F4 FF 9F 5D |  if_ne	jmp	#LR__2138
1815c                 | LR__2139
1815c     09 2D 82 F1 | 	sub	local08, arg01
18160     16 2F 02 F6 | 	mov	local09, local08
18164     17 25 02 F6 | 	mov	local04, local09
18168     0F 25 02 F1 | 	add	local04, local01
1816c     12 29 C2 FA | 	rdbyte	local06, local04
18170     2F 28 0E F2 | 	cmp	local06, #47 wz
18174     17 31 02 56 |  if_ne	mov	local10, local09
18178     0F 31 02 51 |  if_ne	add	local10, local01
1817c     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
18180     54 01 90 5D |  if_ne	jmp	#LR__2147
18184     15 17 02 F6 | 	mov	arg03, local07
18188     02 16 66 F0 | 	shl	arg03, #2
1818c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
18190     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
18194     0B 15 02 FB | 	rdlong	arg02, arg03
18198     17 17 02 F6 | 	mov	arg03, local09
1819c     0F 13 02 F6 | 	mov	arg01, local01
181a0     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
181a4     C0 44 B0 FD | 	call	#__system__strncmp
181a8     00 FA 4D F2 | 	cmps	result1, #0 wz
181ac     28 01 90 5D |  if_ne	jmp	#LR__2147
181b0     15 33 02 F6 | 	mov	local11, local07
181b4     02 32 66 F0 | 	shl	local11, #2
181b8     74 E8 05 F1 | 	add	ptr___system__dat__, #116
181bc     F4 32 02 F1 | 	add	local11, ptr___system__dat__
181c0     19 35 02 FB | 	rdlong	local12, local11
181c4     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
181c8     97 22 48 FB | 	callpa	#(@LR__2141-@LR__2140)>>2,fcache_load_ptr_
181cc                 | LR__2140
181cc     17 29 02 F6 | 	mov	local06, local09
181d0     01 28 06 F1 | 	add	local06, #1
181d4     0F 29 02 F1 | 	add	local06, local01
181d8     14 33 C2 FA | 	rdbyte	local11, local06
181dc     2E 32 0E F2 | 	cmp	local11, #46 wz
181e0     2C 00 90 5D |  if_ne	jmp	#LR__2142
181e4     17 33 02 F6 | 	mov	local11, local09
181e8     02 32 06 F1 | 	add	local11, #2
181ec     0F 33 02 F1 | 	add	local11, local01
181f0     19 31 C2 FA | 	rdbyte	local10, local11
181f4     2F 30 0E F2 | 	cmp	local10, #47 wz
181f8     17 37 02 56 |  if_ne	mov	local13, local09
181fc     02 36 06 51 |  if_ne	add	local13, #2
18200     0F 37 02 51 |  if_ne	add	local13, local01
18204     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
18208     01 2E 06 A1 |  if_e	add	local09, #1
1820c     BC FF 9F AD |  if_e	jmp	#LR__2140
18210                 | LR__2141
18210                 | LR__2142
18210     00 22 0E F2 | 	cmp	local03, #0 wz
18214     11 13 02 56 |  if_ne	mov	arg01, local03
18218     0F 15 02 56 |  if_ne	mov	arg02, local01
1821c     00 17 06 56 |  if_ne	mov	arg03, #256
18220     98 43 B0 5D |  if_ne	call	#__system__strncpy
18224     0F 15 02 F6 | 	mov	arg02, local01
18228     17 15 02 F1 | 	add	arg02, local09
1822c     01 14 06 F1 | 	add	arg02, #1
18230     0F 13 02 F6 | 	mov	arg01, local01
18234     D4 F5 BF FD | 	call	#__system____builtin_strcpy
18238     0F 13 02 F6 | 	mov	arg01, local01
1823c     09 2D 02 F6 | 	mov	local08, arg01
18240     97 06 48 FB | 	callpa	#(@LR__2144-@LR__2143)>>2,fcache_load_ptr_
18244                 | LR__2143
18244     16 FB C9 FA | 	rdbyte	result1, local08 wz
18248     01 2C 06 51 |  if_ne	add	local08, #1
1824c     F4 FF 9F 5D |  if_ne	jmp	#LR__2143
18250                 | LR__2144
18250     09 2D 82 F1 | 	sub	local08, arg01
18254     16 2F 02 F6 | 	mov	local09, local08
18258                 | LR__2145
18258     01 2E 56 F2 | 	cmps	local09, #1 wc
1825c     70 00 90 CD |  if_b	jmp	#LR__2146
18260     17 25 02 F6 | 	mov	local04, local09
18264     0F 25 02 F1 | 	add	local04, local01
18268     12 33 C2 FA | 	rdbyte	local11, local04
1826c     2F 32 0E F2 | 	cmp	local11, #47 wz
18270     17 33 02 A6 |  if_e	mov	local11, local09
18274     0F 33 02 A1 |  if_e	add	local11, local01
18278     19 01 48 AC |  if_e	wrbyte	#0, local11
1827c     01 2E 86 A1 |  if_e	sub	local09, #1
18280     D4 FF 9F AD |  if_e	jmp	#LR__2145
18284     17 25 02 F6 | 	mov	local04, local09
18288     0F 25 02 F1 | 	add	local04, local01
1828c     12 33 C2 FA | 	rdbyte	local11, local04
18290     2E 32 0E F2 | 	cmp	local11, #46 wz
18294     38 00 90 5D |  if_ne	jmp	#LR__2146
18298     02 2E 56 F2 | 	cmps	local09, #2 wc
1829c     30 00 90 CD |  if_b	jmp	#LR__2146
182a0     17 39 02 F6 | 	mov	local14, local09
182a4     01 38 86 F1 | 	sub	local14, #1
182a8     0F 39 02 F1 | 	add	local14, local01
182ac     1C 27 C2 FA | 	rdbyte	local05, local14
182b0     2F 26 0E F2 | 	cmp	local05, #47 wz
182b4     18 00 90 5D |  if_ne	jmp	#LR__2146
182b8     17 25 02 F6 | 	mov	local04, local09
182bc     01 24 86 F1 | 	sub	local04, #1
182c0     0F 25 02 F1 | 	add	local04, local01
182c4     12 01 48 FC | 	wrbyte	#0, local04
182c8     02 2E 86 F1 | 	sub	local09, #2
182cc     88 FF 9F FD | 	jmp	#LR__2145
182d0                 | LR__2146
182d0     1A FB 01 F6 | 	mov	result1, local12
182d4     1C 00 90 FD | 	jmp	#LR__2150
182d8                 | LR__2147
182d8                 | LR__2148
182d8     01 2A 06 F1 | 	add	local07, #1
182dc     2C FE 9F FD | 	jmp	#LR__2137
182e0                 | LR__2149
182e0     03 00 00 FF 
182e4     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
182e8     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
182ec     03 00 00 FF 
182f0     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
182f4                 | LR__2150
182f4     A7 F0 03 F6 | 	mov	ptra, fp
182f8     B2 00 A0 FD | 	call	#popregs_
182fc                 | __system____getvfsforfile_ret
182fc     2D 00 64 FD | 	ret
18300                 | 
18300                 | __system___basic_open
18300     05 4A 05 F6 | 	mov	COUNT_, #5
18304     A8 00 A0 FD | 	call	#pushregs_
18308     0A 1F 02 F6 | 	mov	local01, arg02
1830c     0B 21 02 F6 | 	mov	local02, arg03
18310     0C 23 02 F6 | 	mov	local03, arg04
18314     00 24 06 F6 | 	mov	local04, #0
18318     78 42 B0 FD | 	call	#__system____getftab
1831c     FD 26 0A F6 | 	mov	local05, result1 wz
18320     18 00 90 5D |  if_ne	jmp	#LR__2160
18324     EE 12 02 F6 | 	mov	arg01, abortchain
18328     0C 14 06 F6 | 	mov	arg02, #12
1832c     01 16 06 F6 | 	mov	arg03, #1
18330     DA 00 A0 FD | 	call	#__longjmp
18334     01 FA 65 F6 | 	neg	result1, #1
18338     14 01 90 FD | 	jmp	#LR__2169
1833c                 | LR__2160
1833c     08 26 06 F1 | 	add	local05, #8
18340     13 FB 09 FB | 	rdlong	result1, local05 wz
18344     08 26 86 F1 | 	sub	local05, #8
18348     13 13 02 56 |  if_ne	mov	arg01, local05
1834c     D4 39 B0 5D |  if_ne	call	#__system___closeraw
18350     00 1E 0E F2 | 	cmp	local01, #0 wz
18354     00 20 0E A2 |  if_e	cmp	local02, #0 wz
18358     00 22 0E A2 |  if_e	cmp	local03, #0 wz
1835c     3C 00 90 AD |  if_e	jmp	#LR__2162
18360     0C 12 06 F6 | 	mov	arg01, #12
18364     BC 2E B0 FD | 	call	#__system___gc_alloc_managed
18368     FD 24 0A F6 | 	mov	local04, result1 wz
1836c     18 00 90 5D |  if_ne	jmp	#LR__2161
18370     EE 12 02 F6 | 	mov	arg01, abortchain
18374     07 14 06 F6 | 	mov	arg02, #7
18378     01 16 06 F6 | 	mov	arg03, #1
1837c     DA 00 A0 FD | 	call	#__longjmp
18380     01 FA 65 F6 | 	neg	result1, #1
18384     C8 00 90 FD | 	jmp	#LR__2169
18388                 | LR__2161
18388     12 01 68 FC | 	wrlong	#0, local04
1838c     04 24 06 F1 | 	add	local04, #4
18390     12 01 68 FC | 	wrlong	#0, local04
18394     04 24 86 F1 | 	sub	local04, #4
18398     13 25 62 FC | 	wrlong	local04, local05
1839c                 | LR__2162
1839c     00 1E 0E F2 | 	cmp	local01, #0 wz
183a0     20 00 90 AD |  if_e	jmp	#LR__2163
183a4     12 1F 62 FC | 	wrlong	local01, local04
183a8     12 FB 01 F6 | 	mov	result1, local04
183ac     00 C8 02 FF 
183b0     00 FA 45 F5 | 	or	result1, ##93323264
183b4     1C 26 06 F1 | 	add	local05, #28
183b8     13 FB 61 FC | 	wrlong	result1, local05
183bc     1C 26 86 F1 | 	sub	local05, #28
183c0     0C 00 90 FD | 	jmp	#LR__2164
183c4                 | LR__2163
183c4     1C 26 06 F1 | 	add	local05, #28
183c8     13 01 68 FC | 	wrlong	#0, local05
183cc     1C 26 86 F1 | 	sub	local05, #28
183d0                 | LR__2164
183d0     00 20 0E F2 | 	cmp	local02, #0 wz
183d4     28 00 90 AD |  if_e	jmp	#LR__2165
183d8     04 24 06 F1 | 	add	local04, #4
183dc     12 21 62 FC | 	wrlong	local02, local04
183e0     04 24 86 F1 | 	sub	local04, #4
183e4     12 FB 01 F6 | 	mov	result1, local04
183e8     00 D0 02 FF 
183ec     00 FA 45 F5 | 	or	result1, ##94371840
183f0     20 26 06 F1 | 	add	local05, #32
183f4     13 FB 61 FC | 	wrlong	result1, local05
183f8     20 26 86 F1 | 	sub	local05, #32
183fc     0C 00 90 FD | 	jmp	#LR__2166
18400                 | LR__2165
18400     20 26 06 F1 | 	add	local05, #32
18404     13 01 68 FC | 	wrlong	#0, local05
18408     20 26 86 F1 | 	sub	local05, #32
1840c                 | LR__2166
1840c     00 22 0E F2 | 	cmp	local03, #0 wz
18410     24 00 90 AD |  if_e	jmp	#LR__2167
18414     08 24 06 F1 | 	add	local04, #8
18418     12 23 62 FC | 	wrlong	local03, local04
1841c     08 24 86 F1 | 	sub	local04, #8
18420     00 D8 02 FF 
18424     00 24 46 F5 | 	or	local04, ##95420416
18428     24 26 06 F1 | 	add	local05, #36
1842c     13 25 62 FC | 	wrlong	local04, local05
18430     24 26 86 F1 | 	sub	local05, #36
18434     0C 00 90 FD | 	jmp	#LR__2168
18438                 | LR__2167
18438     24 26 06 F1 | 	add	local05, #36
1843c     13 01 68 FC | 	wrlong	#0, local05
18440     24 26 86 F1 | 	sub	local05, #36
18444                 | LR__2168
18444     08 26 06 F1 | 	add	local05, #8
18448     13 0F 68 FC | 	wrlong	#7, local05
1844c     00 FA 05 F6 | 	mov	result1, #0
18450                 | LR__2169
18450     A7 F0 03 F6 | 	mov	ptra, fp
18454     B2 00 A0 FD | 	call	#popregs_
18458                 | __system___basic_open_ret
18458     2D 00 64 FD | 	ret
1845c                 | 
1845c                 | __system___basic_open_string
1845c     04 4A 05 F6 | 	mov	COUNT_, #4
18460     A8 00 A0 FD | 	call	#pushregs_
18464     0A 1F 02 F6 | 	mov	local01, arg02
18468     0B 21 02 F6 | 	mov	local02, arg03
1846c     24 41 B0 FD | 	call	#__system____getftab
18470     FD 22 0A F6 | 	mov	local03, result1 wz
18474     18 00 90 5D |  if_ne	jmp	#LR__2170
18478     EE 12 02 F6 | 	mov	arg01, abortchain
1847c     0C 14 06 F6 | 	mov	arg02, #12
18480     01 16 06 F6 | 	mov	arg03, #1
18484     DA 00 A0 FD | 	call	#__longjmp
18488     01 FA 65 F6 | 	neg	result1, #1
1848c     58 00 90 FD | 	jmp	#LR__2172
18490                 | LR__2170
18490     08 22 06 F1 | 	add	local03, #8
18494     11 19 0A FB | 	rdlong	arg04, local03 wz
18498     08 22 86 F1 | 	sub	local03, #8
1849c     11 13 02 56 |  if_ne	mov	arg01, local03
184a0     80 38 B0 5D |  if_ne	call	#__system___closeraw
184a4     0F 15 02 F6 | 	mov	arg02, local01
184a8     10 17 02 F6 | 	mov	arg03, local02
184ac     11 13 02 F6 | 	mov	arg01, local03
184b0     B6 19 06 F6 | 	mov	arg04, #438
184b4     68 35 B0 FD | 	call	#__system___openraw
184b8     FD 24 02 F6 | 	mov	local04, result1
184bc     00 24 56 F2 | 	cmps	local04, #0 wc
184c0     20 00 90 3D |  if_ae	jmp	#LR__2171
184c4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
184c8     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
184cc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
184d0     EE 12 02 F6 | 	mov	arg01, abortchain
184d4     01 16 06 F6 | 	mov	arg03, #1
184d8     DA 00 A0 FD | 	call	#__longjmp
184dc     01 FA 65 F6 | 	neg	result1, #1
184e0     04 00 90 FD | 	jmp	#LR__2172
184e4                 | LR__2171
184e4     12 FB 01 F6 | 	mov	result1, local04
184e8                 | LR__2172
184e8     A7 F0 03 F6 | 	mov	ptra, fp
184ec     B2 00 A0 FD | 	call	#popregs_
184f0                 | __system___basic_open_string_ret
184f0     2D 00 64 FD | 	ret
184f4                 | 
184f4                 | __system___basic_print_char
184f4     03 4A 05 F6 | 	mov	COUNT_, #3
184f8     A8 00 A0 FD | 	call	#pushregs_
184fc     0A 1F 02 F6 | 	mov	local01, arg02
18500     E4 47 B0 FD | 	call	#__system___gettxfunc
18504     FD 20 0A F6 | 	mov	local02, result1 wz
18508     00 FA 05 A6 |  if_e	mov	result1, #0
1850c     30 00 90 AD |  if_e	jmp	#LR__2180
18510     10 23 02 F6 | 	mov	local03, local02
18514     13 20 46 F7 | 	zerox	local02, #19
18518     14 22 46 F0 | 	shr	local03, #20
1851c     02 22 66 F0 | 	shl	local03, #2
18520     ED 22 02 F1 | 	add	local03, __methods__
18524     11 23 02 FB | 	rdlong	local03, local03
18528     0F 13 02 F6 | 	mov	arg01, local01
1852c     F2 1E 02 F6 | 	mov	local01, objptr
18530     10 E5 01 F6 | 	mov	objptr, local02
18534     2D 22 62 FD | 	call	local03
18538     0F E5 01 F6 | 	mov	objptr, local01
1853c     01 FA 05 F6 | 	mov	result1, #1
18540                 | LR__2180
18540     A7 F0 03 F6 | 	mov	ptra, fp
18544     B2 00 A0 FD | 	call	#popregs_
18548                 | __system___basic_print_char_ret
18548     2D 00 64 FD | 	ret
1854c                 | 
1854c                 | __system___basic_print_string
1854c     03 4A 05 F6 | 	mov	COUNT_, #3
18550     A8 00 A0 FD | 	call	#pushregs_
18554     0A 1F 02 F6 | 	mov	local01, arg02
18558     0B 21 02 F6 | 	mov	local02, arg03
1855c     88 47 B0 FD | 	call	#__system___gettxfunc
18560     FD 22 0A F6 | 	mov	local03, result1 wz
18564     00 FA 05 A6 |  if_e	mov	result1, #0
18568     18 00 90 AD |  if_e	jmp	#LR__2190
1856c     00 1E 0E F2 | 	cmp	local01, #0 wz
18570     00 FA 05 A6 |  if_e	mov	result1, #0
18574     11 13 02 56 |  if_ne	mov	arg01, local03
18578     10 15 02 56 |  if_ne	mov	arg02, local02
1857c     0F 17 02 56 |  if_ne	mov	arg03, local01
18580     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
18584                 | LR__2190
18584     A7 F0 03 F6 | 	mov	ptra, fp
18588     B2 00 A0 FD | 	call	#popregs_
1858c                 | __system___basic_print_string_ret
1858c     2D 00 64 FD | 	ret
18590                 | 
18590                 | __system___basic_print_integer
18590     04 4A 05 F6 | 	mov	COUNT_, #4
18594     A8 00 A0 FD | 	call	#pushregs_
18598     0A 1F 02 F6 | 	mov	local01, arg02
1859c     0B 21 02 F6 | 	mov	local02, arg03
185a0     0C 23 02 F6 | 	mov	local03, arg04
185a4     40 47 B0 FD | 	call	#__system___gettxfunc
185a8     FD 24 0A F6 | 	mov	local04, result1 wz
185ac     00 FA 05 A6 |  if_e	mov	result1, #0
185b0     12 13 02 56 |  if_ne	mov	arg01, local04
185b4     10 15 02 56 |  if_ne	mov	arg02, local02
185b8     0F 17 02 56 |  if_ne	mov	arg03, local01
185bc     11 19 02 56 |  if_ne	mov	arg04, local03
185c0     48 02 B0 5D |  if_ne	call	#__system___fmtnum
185c4     A7 F0 03 F6 | 	mov	ptra, fp
185c8     B2 00 A0 FD | 	call	#popregs_
185cc                 | __system___basic_print_integer_ret
185cc     2D 00 64 FD | 	ret
185d0                 | 
185d0                 | __system___basic_print_unsigned
185d0     03 4A 05 F6 | 	mov	COUNT_, #3
185d4     A8 00 A0 FD | 	call	#pushregs_
185d8     0A 1F 02 F6 | 	mov	local01, arg02
185dc     0B 21 02 F6 | 	mov	local02, arg03
185e0     0C 23 02 F6 | 	mov	local03, arg04
185e4     00 47 B0 FD | 	call	#__system___gettxfunc
185e8     FD 12 0A F6 | 	mov	arg01, result1 wz
185ec     00 FA 05 A6 |  if_e	mov	result1, #0
185f0     3A 20 26 54 |  if_ne	bith	local02, #58
185f4     10 15 02 56 |  if_ne	mov	arg02, local02
185f8     0F 17 02 56 |  if_ne	mov	arg03, local01
185fc     11 19 02 56 |  if_ne	mov	arg04, local03
18600     08 02 B0 5D |  if_ne	call	#__system___fmtnum
18604     A7 F0 03 F6 | 	mov	ptra, fp
18608     B2 00 A0 FD | 	call	#popregs_
1860c                 | __system___basic_print_unsigned_ret
1860c     2D 00 64 FD | 	ret
18610                 | 
18610                 | __system___basic_get_char
18610     03 4A 05 F6 | 	mov	COUNT_, #3
18614     A8 00 A0 FD | 	call	#pushregs_
18618     10 47 B0 FD | 	call	#__system___getrxfunc
1861c     FD 1E 0A F6 | 	mov	local01, result1 wz
18620     01 FA 65 A6 |  if_e	neg	result1, #1
18624     28 00 90 AD |  if_e	jmp	#LR__2200
18628     0F 21 02 F6 | 	mov	local02, local01
1862c     13 1E 46 F7 | 	zerox	local01, #19
18630     14 20 46 F0 | 	shr	local02, #20
18634     02 20 66 F0 | 	shl	local02, #2
18638     ED 20 02 F1 | 	add	local02, __methods__
1863c     10 21 02 FB | 	rdlong	local02, local02
18640     F2 22 02 F6 | 	mov	local03, objptr
18644     0F E5 01 F6 | 	mov	objptr, local01
18648     2D 20 62 FD | 	call	local02
1864c     11 E5 01 F6 | 	mov	objptr, local03
18650                 | LR__2200
18650     A7 F0 03 F6 | 	mov	ptra, fp
18654     B2 00 A0 FD | 	call	#popregs_
18658                 | __system___basic_get_char_ret
18658     2D 00 64 FD | 	ret
1865c                 | 
1865c                 | __system___basic_get
1865c     04 4A 05 F6 | 	mov	COUNT_, #4
18660     A8 00 A0 FD | 	call	#pushregs_
18664     0D 1F 02 F6 | 	mov	local01, arg05
18668     0F 19 02 FD | 	qmul	arg04, local01
1866c     09 21 02 F6 | 	mov	local02, arg01
18670     0B 23 02 F6 | 	mov	local03, arg03
18674     00 14 0E F2 | 	cmp	arg02, #0 wz
18678     01 14 86 51 |  if_ne	sub	arg02, #1
1867c     10 13 02 56 |  if_ne	mov	arg01, local02
18680     00 16 06 56 |  if_ne	mov	arg03, #0
18684     18 24 62 FD | 	getqx	local04
18688     50 3D B0 5D |  if_ne	call	#__system__lseek
1868c     11 15 02 F6 | 	mov	arg02, local03
18690     12 17 02 F6 | 	mov	arg03, local04
18694     10 13 02 F6 | 	mov	arg01, local02
18698     C8 3C B0 FD | 	call	#__system__read
1869c     FD 24 02 F6 | 	mov	local04, result1
186a0     01 24 56 F2 | 	cmps	local04, #1 wc
186a4     10 00 90 CD |  if_b	jmp	#LR__2210
186a8     12 61 02 F6 | 	mov	muldiva_, local04
186ac     0F 63 02 F6 | 	mov	muldivb_, local01
186b0     BA 00 A0 FD | 	call	#divide_
186b4     31 25 02 F6 | 	mov	local04, muldivb_
186b8                 | LR__2210
186b8     12 FB 01 F6 | 	mov	result1, local04
186bc     A7 F0 03 F6 | 	mov	ptra, fp
186c0     B2 00 A0 FD | 	call	#popregs_
186c4                 | __system___basic_get_ret
186c4     2D 00 64 FD | 	ret
186c8                 | 
186c8                 | __system___fmtchar
186c8     00 4A 05 F6 | 	mov	COUNT_, #0
186cc     A8 00 A0 FD | 	call	#pushregs_
186d0     10 F0 07 F1 | 	add	ptra, #16
186d4     04 4E 05 F1 | 	add	fp, #4
186d8     A7 12 62 FC | 	wrlong	arg01, fp
186dc     04 4E 05 F1 | 	add	fp, #4
186e0     A7 14 62 FC | 	wrlong	arg02, fp
186e4     04 4E 05 F1 | 	add	fp, #4
186e8     A7 16 62 FC | 	wrlong	arg03, fp
186ec     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
186f0     A7 16 62 FC | 	wrlong	arg03, fp
186f4     08 4E 85 F1 | 	sub	fp, #8
186f8     A7 12 02 FB | 	rdlong	arg01, fp
186fc     04 4E 05 F1 | 	add	fp, #4
18700     A7 14 02 FB | 	rdlong	arg02, fp
18704     04 4E 05 F1 | 	add	fp, #4
18708     A7 16 02 F6 | 	mov	arg03, fp
1870c     0C 4E 85 F1 | 	sub	fp, #12
18710     0C 00 B0 FD | 	call	#__system___fmtstr
18714     A7 F0 03 F6 | 	mov	ptra, fp
18718     B2 00 A0 FD | 	call	#popregs_
1871c                 | __system___fmtchar_ret
1871c     2D 00 64 FD | 	ret
18720                 | 
18720                 | __system___fmtstr
18720     09 4A 05 F6 | 	mov	COUNT_, #9
18724     A8 00 A0 FD | 	call	#pushregs_
18728     09 1F 02 F6 | 	mov	local01, arg01
1872c     0A 21 02 F6 | 	mov	local02, arg02
18730     0B 23 02 F6 | 	mov	local03, arg03
18734     10 19 E2 F8 | 	getbyte	arg04, local02, #0
18738     11 13 02 F6 | 	mov	arg01, local03
1873c     09 25 02 F6 | 	mov	local04, arg01
18740     97 06 48 FB | 	callpa	#(@LR__2221-@LR__2220)>>2,fcache_load_ptr_
18744                 | LR__2220
18744     12 FB C9 FA | 	rdbyte	result1, local04 wz
18748     01 24 06 51 |  if_ne	add	local04, #1
1874c     F4 FF 9F 5D |  if_ne	jmp	#LR__2220
18750                 | LR__2221
18750     09 25 82 F1 | 	sub	local04, arg01
18754     00 18 0E F2 | 	cmp	arg04, #0 wz
18758     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
1875c     10 15 02 F6 | 	mov	arg02, local02
18760     12 17 02 F6 | 	mov	arg03, local04
18764     0F 13 02 F6 | 	mov	arg01, local01
18768     02 18 06 F6 | 	mov	arg04, #2
1876c     18 42 B0 FD | 	call	#__system___fmtpad
18770     FD 26 02 F6 | 	mov	local05, result1
18774     00 26 56 F2 | 	cmps	local05, #0 wc
18778     13 FB 01 C6 |  if_b	mov	result1, local05
1877c     80 00 90 CD |  if_b	jmp	#LR__2224
18780     01 24 56 F2 | 	cmps	local04, #1 wc
18784     50 00 90 CD |  if_b	jmp	#LR__2223
18788     12 29 02 F6 | 	mov	local06, local04
1878c                 | LR__2222
1878c     0F 2B 02 F6 | 	mov	local07, local01
18790     0F 2D 02 F6 | 	mov	local08, local01
18794     13 2A 46 F7 | 	zerox	local07, #19
18798     14 2C 46 F0 | 	shr	local08, #20
1879c     02 2C 66 F0 | 	shl	local08, #2
187a0     ED 2C 02 F1 | 	add	local08, __methods__
187a4     16 2D 02 FB | 	rdlong	local08, local08
187a8     11 13 C2 FA | 	rdbyte	arg01, local03
187ac     F2 2E 02 F6 | 	mov	local09, objptr
187b0     15 E5 01 F6 | 	mov	objptr, local07
187b4     01 22 06 F1 | 	add	local03, #1
187b8     2D 2C 62 FD | 	call	local08
187bc     17 E5 01 F6 | 	mov	objptr, local09
187c0     FD 2E 02 F6 | 	mov	local09, result1
187c4     00 2E 56 F2 | 	cmps	local09, #0 wc
187c8     17 FB 01 C6 |  if_b	mov	result1, local09
187cc     30 00 90 CD |  if_b	jmp	#LR__2224
187d0     17 27 02 F1 | 	add	local05, local09
187d4     ED 29 6E FB | 	djnz	local06, #LR__2222
187d8                 | LR__2223
187d8     10 15 02 F6 | 	mov	arg02, local02
187dc     12 17 02 F6 | 	mov	arg03, local04
187e0     0F 13 02 F6 | 	mov	arg01, local01
187e4     01 18 06 F6 | 	mov	arg04, #1
187e8     9C 41 B0 FD | 	call	#__system___fmtpad
187ec     FD 2E 02 F6 | 	mov	local09, result1
187f0     00 2E 56 F2 | 	cmps	local09, #0 wc
187f4     17 FB 01 C6 |  if_b	mov	result1, local09
187f8     17 27 02 31 |  if_ae	add	local05, local09
187fc     13 FB 01 36 |  if_ae	mov	result1, local05
18800                 | LR__2224
18800     A7 F0 03 F6 | 	mov	ptra, fp
18804     B2 00 A0 FD | 	call	#popregs_
18808                 | __system___fmtstr_ret
18808     2D 00 64 FD | 	ret
1880c                 | 
1880c                 | __system___fmtnum
1880c     0B 4A 05 F6 | 	mov	COUNT_, #11
18810     A8 00 A0 FD | 	call	#pushregs_
18814     09 1F 02 F6 | 	mov	local01, arg01
18818     0A 21 02 F6 | 	mov	local02, arg02
1881c     0B 23 02 F6 | 	mov	local03, arg03
18820     0C 25 02 F6 | 	mov	local04, arg04
18824     F8 27 02 F6 | 	mov	local05, ptra
18828     13 29 02 F6 | 	mov	local06, local05
1882c     00 2A 06 F6 | 	mov	local07, #0
18830     10 2D 02 F6 | 	mov	local08, local02
18834     10 2C 46 F0 | 	shr	local08, #16
18838     3F 2C 06 F5 | 	and	local08, #63
1883c     10 2F E2 F8 | 	getbyte	local09, local02, #0
18840     10 31 02 F6 | 	mov	local10, local02
18844     1A 30 46 F0 | 	shr	local10, #26
18848     03 30 06 F5 | 	and	local10, #3
1884c     18 33 02 F6 | 	mov	local11, local10
18850     01 2C 56 F2 | 	cmps	local08, #1 wc
18854     44 F0 07 F1 | 	add	ptra, #68
18858     01 2C 86 31 |  if_ae	sub	local08, #1
1885c     41 2E 56 F2 | 	cmps	local09, #65 wc
18860     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
18864     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
18868     03 32 0E F2 | 	cmp	local11, #3 wz
1886c     00 32 06 A6 |  if_e	mov	local11, #0
18870     00 22 56 52 |  if_ne	cmps	local03, #0 wc
18874     04 32 06 46 |  if_c_and_nz	mov	local11, #4
18878     11 23 62 46 |  if_c_and_nz	neg	local03, local03
1887c     00 32 0E F2 | 	cmp	local11, #0 wz
18880     4C 00 90 AD |  if_e	jmp	#LR__2233
18884     01 2A 06 F6 | 	mov	local07, #1
18888     17 2D 0A F2 | 	cmp	local08, local09 wz
1888c     18 00 90 5D |  if_ne	jmp	#LR__2231
18890     05 2C 6E FB | 	djnz	local08, #LR__2230
18894     0F 13 02 F6 | 	mov	arg01, local01
18898     10 15 02 F6 | 	mov	arg02, local02
1889c     23 16 06 F6 | 	mov	arg03, #35
188a0     24 FE BF FD | 	call	#__system___fmtchar
188a4     88 00 90 FD | 	jmp	#LR__2237
188a8                 | LR__2230
188a8                 | LR__2231
188a8     02 32 0E F2 | 	cmp	local11, #2 wz
188ac     14 31 02 A6 |  if_e	mov	local10, local06
188b0     01 28 06 A1 |  if_e	add	local06, #1
188b4     18 41 48 AC |  if_e	wrbyte	#32, local10
188b8     14 00 90 AD |  if_e	jmp	#LR__2232
188bc     04 32 0E F2 | 	cmp	local11, #4 wz
188c0     14 5B 48 AC |  if_e	wrbyte	#45, local06
188c4     01 28 06 A1 |  if_e	add	local06, #1
188c8     14 57 48 5C |  if_ne	wrbyte	#43, local06
188cc     01 28 06 51 |  if_ne	add	local06, #1
188d0                 | LR__2232
188d0                 | LR__2233
188d0     14 13 02 F6 | 	mov	arg01, local06
188d4     11 15 02 F6 | 	mov	arg02, local03
188d8     12 17 02 F6 | 	mov	arg03, local04
188dc     16 19 02 F6 | 	mov	arg04, local08
188e0     00 1A 06 F6 | 	mov	arg05, #0
188e4     1D 20 2E F4 | 	testbn	local02, #29 wz
188e8     01 1A 06 56 |  if_ne	mov	arg05, #1
188ec     60 41 B0 FD | 	call	#__system___uitoa
188f0     FD 2A 02 F1 | 	add	local07, result1
188f4     17 2B 5A F2 | 	cmps	local07, local09 wcz
188f8     24 00 90 ED |  if_be	jmp	#LR__2236
188fc     97 0E 48 FB | 	callpa	#(@LR__2235-@LR__2234)>>2,fcache_load_ptr_
18900                 | LR__2234
18900     17 31 02 F6 | 	mov	local10, local09
18904     01 30 56 F2 | 	cmps	local10, #1 wc
18908     01 2E 86 F1 | 	sub	local09, #1
1890c     14 31 02 36 |  if_ae	mov	local10, local06
18910     01 28 06 31 |  if_ae	add	local06, #1
18914     18 47 48 3C |  if_ae	wrbyte	#35, local10
18918     E4 FF 9F 3D |  if_ae	jmp	#LR__2234
1891c                 | LR__2235
1891c     14 01 48 FC | 	wrbyte	#0, local06
18920                 | LR__2236
18920     0F 13 02 F6 | 	mov	arg01, local01
18924     10 15 02 F6 | 	mov	arg02, local02
18928     13 17 02 F6 | 	mov	arg03, local05
1892c     F0 FD BF FD | 	call	#__system___fmtstr
18930                 | LR__2237
18930     A7 F0 03 F6 | 	mov	ptra, fp
18934     B2 00 A0 FD | 	call	#popregs_
18938                 | __system___fmtnum_ret
18938     2D 00 64 FD | 	ret
1893c                 | 
1893c                 | __system___fmtfloat
1893c     10 4A 05 F6 | 	mov	COUNT_, #16
18940     A8 00 A0 FD | 	call	#pushregs_
18944     24 F1 07 F1 | 	add	ptra, #292
18948     04 4E 05 F1 | 	add	fp, #4
1894c     A7 12 62 FC | 	wrlong	arg01, fp
18950     04 4E 05 F1 | 	add	fp, #4
18954     A7 14 62 FC | 	wrlong	arg02, fp
18958     04 4E 05 F1 | 	add	fp, #4
1895c     A7 16 62 FC | 	wrlong	arg03, fp
18960     04 4E 05 F1 | 	add	fp, #4
18964     A7 18 62 FC | 	wrlong	arg04, fp
18968     0C 4E 05 F1 | 	add	fp, #12
1896c     A7 14 68 FC | 	wrlong	#10, fp
18970     08 4E 05 F1 | 	add	fp, #8
18974     A7 00 68 FC | 	wrlong	#0, fp
18978     08 4E 05 F1 | 	add	fp, #8
1897c     A7 00 68 FC | 	wrlong	#0, fp
18980     08 4E 05 F1 | 	add	fp, #8
18984     A7 00 68 FC | 	wrlong	#0, fp
18988     04 4E 05 F1 | 	add	fp, #4
1898c     A7 04 68 FC | 	wrlong	#2, fp
18990     04 4E 05 F1 | 	add	fp, #4
18994     A7 00 68 FC | 	wrlong	#0, fp
18998     04 4E 05 F1 | 	add	fp, #4
1899c     A7 00 68 FC | 	wrlong	#0, fp
189a0     04 4E 05 F1 | 	add	fp, #4
189a4     A7 00 68 FC | 	wrlong	#0, fp
189a8     04 4E 05 F1 | 	add	fp, #4
189ac     A7 00 68 FC | 	wrlong	#0, fp
189b0     18 4E 05 F1 | 	add	fp, #24
189b4     A7 00 68 FC | 	wrlong	#0, fp
189b8     68 4E 05 F1 | 	add	fp, #104
189bc     A7 1E 02 F6 | 	mov	local01, fp
189c0     08 4E 85 F1 | 	sub	fp, #8
189c4     A7 1E 62 FC | 	wrlong	local01, fp
189c8     04 4E 05 F1 | 	add	fp, #4
189cc     A7 1E 62 FC | 	wrlong	local01, fp
189d0     BC 4E 85 F1 | 	sub	fp, #188
189d4     A7 1E 02 FB | 	rdlong	local01, fp
189d8     10 1E 46 F0 | 	shr	local01, #16
189dc     3F 1E 06 F5 | 	and	local01, #63
189e0     B0 4E 05 F1 | 	add	fp, #176
189e4     A7 1E 62 FC | 	wrlong	local01, fp
189e8     B0 4E 85 F1 | 	sub	fp, #176
189ec     A7 1E 02 FB | 	rdlong	local01, fp
189f0     1C 1E 46 F0 | 	shr	local01, #28
189f4     01 1E 06 F5 | 	and	local01, #1
189f8     08 4F 05 F1 | 	add	fp, #264
189fc     A7 1E 62 FC | 	wrlong	local01, fp
18a00     58 4E 85 F1 | 	sub	fp, #88
18a04     A7 1E 0A FB | 	rdlong	local01, fp wz
18a08     B8 4E 85 F1 | 	sub	fp, #184
18a0c     3C 00 90 5D |  if_ne	jmp	#LR__2241
18a10     10 4E 05 F1 | 	add	fp, #16
18a14     A7 1E 02 FB | 	rdlong	local01, fp
18a18     10 4E 85 F1 | 	sub	fp, #16
18a1c     61 1E 0E F2 | 	cmp	local01, #97 wz
18a20     18 00 90 5D |  if_ne	jmp	#LR__2240
18a24     B8 4E 05 F1 | 	add	fp, #184
18a28     A7 1A 68 FC | 	wrlong	#13, fp
18a2c     84 4E 85 F1 | 	sub	fp, #132
18a30     A7 02 68 FC | 	wrlong	#1, fp
18a34     34 4E 85 F1 | 	sub	fp, #52
18a38     24 00 90 FD | 	jmp	#LR__2242
18a3c                 | LR__2240
18a3c     B8 4E 05 F1 | 	add	fp, #184
18a40     A7 0C 68 FC | 	wrlong	#6, fp
18a44     B8 4E 85 F1 | 	sub	fp, #184
18a48     14 00 90 FD | 	jmp	#LR__2242
18a4c                 | LR__2241
18a4c     B8 4E 05 F1 | 	add	fp, #184
18a50     A7 1E 02 FB | 	rdlong	local01, fp
18a54     01 1E 86 F1 | 	sub	local01, #1
18a58     A7 1E 62 FC | 	wrlong	local01, fp
18a5c     B8 4E 85 F1 | 	sub	fp, #184
18a60                 | LR__2242
18a60     08 4E 05 F1 | 	add	fp, #8
18a64     A7 1E 02 FB | 	rdlong	local01, fp
18a68     16 1E 46 F0 | 	shr	local01, #22
18a6c     03 1E 06 F5 | 	and	local01, #3
18a70     04 4F 05 F1 | 	add	fp, #260
18a74     A7 1E 62 FC | 	wrlong	local01, fp
18a78     04 4F 85 F1 | 	sub	fp, #260
18a7c     A7 1E 02 FB | 	rdlong	local01, fp
18a80     1D 1E 46 F0 | 	shr	local01, #29
18a84     01 1E 06 F5 | 	and	local01, #1
18a88     B4 4E 05 F1 | 	add	fp, #180
18a8c     A7 1E 62 FC | 	wrlong	local01, fp
18a90     B4 4E 85 F1 | 	sub	fp, #180
18a94     A7 1E 02 FB | 	rdlong	local01, fp
18a98     0F 1F EA F8 | 	getbyte	local01, local01, #1
18a9c     60 4E 05 F1 | 	add	fp, #96
18aa0     A7 1E 62 FC | 	wrlong	local01, fp
18aa4     60 4E 85 F1 | 	sub	fp, #96
18aa8     A7 1E 02 FB | 	rdlong	local01, fp
18aac     0F 1F E2 F8 | 	getbyte	local01, local01, #0
18ab0     64 4E 05 F1 | 	add	fp, #100
18ab4     A7 1E 62 FC | 	wrlong	local01, fp
18ab8     00 1E 06 F6 | 	mov	local01, #0
18abc     5C 4E 85 F1 | 	sub	fp, #92
18ac0     A7 1A 02 FB | 	rdlong	arg05, fp
18ac4     65 1A 0E F2 | 	cmp	arg05, #101 wz
18ac8     01 1E 06 A6 |  if_e	mov	local01, #1
18acc     14 4E 05 F1 | 	add	fp, #20
18ad0     A7 1E 62 FC | 	wrlong	local01, fp
18ad4     98 4E 05 F1 | 	add	fp, #152
18ad8     A7 20 0A FB | 	rdlong	local02, fp wz
18adc     45 1E 06 56 |  if_ne	mov	local01, #69
18ae0     65 1E 06 A6 |  if_e	mov	local01, #101
18ae4     8C 4E 85 F1 | 	sub	fp, #140
18ae8     A7 1E 62 FC | 	wrlong	local01, fp
18aec     20 4E 85 F1 | 	sub	fp, #32
18af0     A7 1E 02 FB | 	rdlong	local01, fp
18af4     10 4E 85 F1 | 	sub	fp, #16
18af8     61 1E 0E F2 | 	cmp	local01, #97 wz
18afc     4C 00 90 5D |  if_ne	jmp	#LR__2243
18b00     24 4E 05 F1 | 	add	fp, #36
18b04     A7 02 68 FC | 	wrlong	#1, fp
18b08     98 4E 05 F1 | 	add	fp, #152
18b0c     A7 20 0A FB | 	rdlong	local02, fp wz
18b10     50 1E 06 56 |  if_ne	mov	local01, #80
18b14     70 1E 06 A6 |  if_e	mov	local01, #112
18b18     8C 4E 85 F1 | 	sub	fp, #140
18b1c     A7 1E 62 FC | 	wrlong	local01, fp
18b20     14 4E 85 F1 | 	sub	fp, #20
18b24     A7 04 68 FC | 	wrlong	#2, fp
18b28     1C 4E 05 F1 | 	add	fp, #28
18b2c     A7 02 68 FC | 	wrlong	#1, fp
18b30     84 4E 05 F1 | 	add	fp, #132
18b34     A7 20 0A FB | 	rdlong	local02, fp wz
18b38     58 1E 06 56 |  if_ne	mov	local01, #88
18b3c     78 1E 06 A6 |  if_e	mov	local01, #120
18b40     7C 4E 85 F1 | 	sub	fp, #124
18b44     A7 1E 62 FC | 	wrlong	local01, fp
18b48     40 4E 85 F1 | 	sub	fp, #64
18b4c                 | LR__2243
18b4c     10 4E 05 F1 | 	add	fp, #16
18b50     A7 1E 02 FB | 	rdlong	local01, fp
18b54     10 4E 85 F1 | 	sub	fp, #16
18b58     23 1E 0E F2 | 	cmp	local01, #35 wz
18b5c     3C 00 90 5D |  if_ne	jmp	#LR__2246
18b60     48 4E 05 F1 | 	add	fp, #72
18b64     A7 02 68 FC | 	wrlong	#1, fp
18b68     C8 4E 05 F1 | 	add	fp, #200
18b6c     A7 1E 0A FB | 	rdlong	local01, fp wz
18b70     10 4F 85 F1 | 	sub	fp, #272
18b74     18 00 90 AD |  if_e	jmp	#LR__2244
18b78     10 4E 05 F1 | 	add	fp, #16
18b7c     A7 CC 68 FC | 	wrlong	#102, fp
18b80     00 4F 05 F1 | 	add	fp, #256
18b84     A7 00 68 FC | 	wrlong	#0, fp
18b88     10 4F 85 F1 | 	sub	fp, #272
18b8c     0C 00 90 FD | 	jmp	#LR__2245
18b90                 | LR__2244
18b90     10 4F 05 F1 | 	add	fp, #272
18b94     A7 02 68 FC | 	wrlong	#1, fp
18b98     10 4F 85 F1 | 	sub	fp, #272
18b9c                 | LR__2245
18b9c                 | LR__2246
18b9c     08 4E 05 F1 | 	add	fp, #8
18ba0     A7 1E 02 FB | 	rdlong	local01, fp
18ba4     1A 1E 46 F0 | 	shr	local01, #26
18ba8     03 1E 06 F5 | 	and	local01, #3
18bac     5C 4E 05 F1 | 	add	fp, #92
18bb0     A7 1E 62 FC | 	wrlong	local01, fp
18bb4     58 4E 85 F1 | 	sub	fp, #88
18bb8     A7 FA 01 FB | 	rdlong	result1, fp
18bbc     0C 4E 85 F1 | 	sub	fp, #12
18bc0     1F FA 4D F0 | 	shr	result1, #31 wz
18bc4     20 00 90 AD |  if_e	jmp	#LR__2247
18bc8     2C 4E 05 F1 | 	add	fp, #44
18bcc     A7 5A 68 FC | 	wrlong	#45, fp
18bd0     20 4E 85 F1 | 	sub	fp, #32
18bd4     A7 FA 01 FB | 	rdlong	result1, fp
18bd8     1F FA E5 F4 | 	bitnot	result1, #31
18bdc     A7 FA 61 FC | 	wrlong	result1, fp
18be0     0C 4E 85 F1 | 	sub	fp, #12
18be4     3C 00 90 FD | 	jmp	#LR__2249
18be8                 | LR__2247
18be8     64 4E 05 F1 | 	add	fp, #100
18bec     A7 1E 02 FB | 	rdlong	local01, fp
18bf0     64 4E 85 F1 | 	sub	fp, #100
18bf4     01 1E 0E F2 | 	cmp	local01, #1 wz
18bf8     2C 4E 05 A1 |  if_e	add	fp, #44
18bfc     A7 56 68 AC |  if_e	wrlong	#43, fp
18c00     2C 4E 85 A1 |  if_e	sub	fp, #44
18c04     1C 00 90 AD |  if_e	jmp	#LR__2248
18c08     64 4E 05 F1 | 	add	fp, #100
18c0c     A7 1E 02 FB | 	rdlong	local01, fp
18c10     64 4E 85 F1 | 	sub	fp, #100
18c14     02 1E 0E F2 | 	cmp	local01, #2 wz
18c18     2C 4E 05 A1 |  if_e	add	fp, #44
18c1c     A7 40 68 AC |  if_e	wrlong	#32, fp
18c20     2C 4E 85 A1 |  if_e	sub	fp, #44
18c24                 | LR__2248
18c24                 | LR__2249
18c24     08 4E 05 F1 | 	add	fp, #8
18c28     A7 1E 02 FB | 	rdlong	local01, fp
18c2c     18 1E 46 F0 | 	shr	local01, #24
18c30     03 1E 06 F5 | 	and	local01, #3
18c34     3C 4E 05 F1 | 	add	fp, #60
18c38     A7 1E 62 FC | 	wrlong	local01, fp
18c3c     00 1E 06 F6 | 	mov	local01, #0
18c40     18 4E 85 F1 | 	sub	fp, #24
18c44     A7 22 0A FB | 	rdlong	local03, fp wz
18c48     2C 4E 85 F1 | 	sub	fp, #44
18c4c     18 00 90 5D |  if_ne	jmp	#LR__2250
18c50     1C 4E 05 F1 | 	add	fp, #28
18c54     A7 24 02 FB | 	rdlong	local04, fp
18c58     1C 4E 85 F1 | 	sub	fp, #28
18c5c     12 27 02 F6 | 	mov	local05, local04
18c60     0A 26 0E F2 | 	cmp	local05, #10 wz
18c64     04 00 90 AD |  if_e	jmp	#LR__2251
18c68                 | LR__2250
18c68     01 1E 66 F5 | 	xor	local01, #1
18c6c                 | LR__2251
18c6c     3C 4E 05 F1 | 	add	fp, #60
18c70     A7 1E 62 FC | 	wrlong	local01, fp
18c74     3C 4E 85 F1 | 	sub	fp, #60
18c78     00 1E 0E F2 | 	cmp	local01, #0 wz
18c7c     0C 01 90 AD |  if_e	jmp	#LR__2253
18c80     44 4E 05 F1 | 	add	fp, #68
18c84     A7 26 02 FB | 	rdlong	local05, fp
18c88     44 4E 85 F1 | 	sub	fp, #68
18c8c     13 23 02 F6 | 	mov	local03, local05
18c90     02 22 0E F2 | 	cmp	local03, #2 wz
18c94     F4 00 90 5D |  if_ne	jmp	#LR__2253
18c98     0C 4F 05 F1 | 	add	fp, #268
18c9c     A7 28 02 FB | 	rdlong	local06, fp
18ca0     0C 4F 85 F1 | 	sub	fp, #268
18ca4     14 25 02 F6 | 	mov	local04, local06
18ca8     02 24 0E F2 | 	cmp	local04, #2 wz
18cac     DC 00 90 AD |  if_e	jmp	#LR__2253
18cb0     C0 4E 05 F1 | 	add	fp, #192
18cb4     A7 12 02 FB | 	rdlong	arg01, fp
18cb8     94 4E 85 F1 | 	sub	fp, #148
18cbc     A7 14 02 FB | 	rdlong	arg02, fp
18cc0     14 4E 05 F1 | 	add	fp, #20
18cc4     A7 16 02 FB | 	rdlong	arg03, fp
18cc8     40 4E 85 F1 | 	sub	fp, #64
18ccc     E8 3F B0 FD | 	call	#__system__emitsign_0343
18cd0     14 4F 05 F1 | 	add	fp, #276
18cd4     A7 FA 61 FC | 	wrlong	result1, fp
18cd8     14 4F 85 F1 | 	sub	fp, #276
18cdc     00 FA 55 F2 | 	cmps	result1, #0 wc
18ce0     14 4F 05 C1 |  if_b	add	fp, #276
18ce4     A7 FA 01 CB |  if_b	rdlong	result1, fp
18ce8     14 4F 85 C1 |  if_b	sub	fp, #276
18cec     6C 0B 90 CD |  if_b	jmp	#LR__2303
18cf0     C0 4E 05 F1 | 	add	fp, #192
18cf4     A7 1E 02 FB | 	rdlong	local01, fp
18cf8     54 4E 05 F1 | 	add	fp, #84
18cfc     A7 26 02 FB | 	rdlong	local05, fp
18d00     13 23 02 F6 | 	mov	local03, local05
18d04     13 1F 02 F1 | 	add	local01, local05
18d08     54 4E 85 F1 | 	sub	fp, #84
18d0c     A7 1E 62 FC | 	wrlong	local01, fp
18d10     58 4E 85 F1 | 	sub	fp, #88
18d14     A7 1E 0A FB | 	rdlong	local01, fp wz
18d18     68 4E 85 F1 | 	sub	fp, #104
18d1c     60 00 90 AD |  if_e	jmp	#LR__2252
18d20     68 4E 05 F1 | 	add	fp, #104
18d24     A7 1E 02 FB | 	rdlong	local01, fp
18d28     AC 4E 05 F1 | 	add	fp, #172
18d2c     A7 22 02 FB | 	rdlong	local03, fp
18d30     11 1F 82 F1 | 	sub	local01, local03
18d34     AC 4E 85 F1 | 	sub	fp, #172
18d38     A7 1E 62 FC | 	wrlong	local01, fp
18d3c     68 4E 85 F1 | 	sub	fp, #104
18d40     00 1E 56 F2 | 	cmps	local01, #0 wc
18d44     68 4E 05 C1 |  if_b	add	fp, #104
18d48     A7 00 68 CC |  if_b	wrlong	#0, fp
18d4c     68 4E 85 C1 |  if_b	sub	fp, #104
18d50     08 4E 05 F1 | 	add	fp, #8
18d54     A7 1E 02 FB | 	rdlong	local01, fp
18d58     E8 1E 06 F4 | 	bitl	local01, #232
18d5c     A7 1E 62 FC | 	wrlong	local01, fp
18d60     60 4E 05 F1 | 	add	fp, #96
18d64     A7 26 02 FB | 	rdlong	local05, fp
18d68     13 23 02 F6 | 	mov	local03, local05
18d6c     08 22 66 F0 | 	shl	local03, #8
18d70     11 1F 42 F5 | 	or	local01, local03
18d74     60 4E 85 F1 | 	sub	fp, #96
18d78     A7 1E 62 FC | 	wrlong	local01, fp
18d7c     08 4E 85 F1 | 	sub	fp, #8
18d80                 | LR__2252
18d80     3C 4E 05 F1 | 	add	fp, #60
18d84     A7 00 68 FC | 	wrlong	#0, fp
18d88     3C 4E 85 F1 | 	sub	fp, #60
18d8c                 | LR__2253
18d8c     0C 4E 05 F1 | 	add	fp, #12
18d90     A7 12 02 FB | 	rdlong	arg01, fp
18d94     0C 4E 85 F1 | 	sub	fp, #12
18d98     CC 1C B0 FD | 	call	#__system____builtin_ilogb
18d9c     FF FF 3F FF 
18da0     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
18da4     50 00 90 5D |  if_ne	jmp	#LR__2255
18da8     2C 4E 05 F1 | 	add	fp, #44
18dac     A7 1E 0A FB | 	rdlong	local01, fp wz
18db0     2C 4E 85 F1 | 	sub	fp, #44
18db4     24 00 90 AD |  if_e	jmp	#LR__2254
18db8     C0 4E 05 F1 | 	add	fp, #192
18dbc     A7 20 02 FB | 	rdlong	local02, fp
18dc0     10 23 02 F6 | 	mov	local03, local02
18dc4     01 22 06 F1 | 	add	local03, #1
18dc8     A7 22 62 FC | 	wrlong	local03, fp
18dcc     94 4E 85 F1 | 	sub	fp, #148
18dd0     A7 24 02 FB | 	rdlong	local04, fp
18dd4     2C 4E 85 F1 | 	sub	fp, #44
18dd8     10 25 42 FC | 	wrbyte	local04, local02
18ddc                 | LR__2254
18ddc     C0 4E 05 F1 | 	add	fp, #192
18de0     A7 12 02 FB | 	rdlong	arg01, fp
18de4     C0 4E 85 F1 | 	sub	fp, #192
18de8     34 01 00 FF 
18dec     A2 14 06 F6 | 	mov	arg02, ##@LR__4141
18df0     18 EA BF FD | 	call	#__system____builtin_strcpy
18df4     A4 08 90 FD | 	jmp	#LR__2291
18df8                 | LR__2255
18df8     0C 4E 05 F1 | 	add	fp, #12
18dfc     A7 20 02 FB | 	rdlong	local02, fp
18e00     0C 4E 85 F1 | 	sub	fp, #12
18e04     10 13 02 F6 | 	mov	arg01, local02
18e08     5C 1C B0 FD | 	call	#__system____builtin_ilogb
18e0c     00 00 40 FF 
18e10     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
18e14     50 00 90 5D |  if_ne	jmp	#LR__2257
18e18     2C 4E 05 F1 | 	add	fp, #44
18e1c     A7 1E 0A FB | 	rdlong	local01, fp wz
18e20     2C 4E 85 F1 | 	sub	fp, #44
18e24     24 00 90 AD |  if_e	jmp	#LR__2256
18e28     C0 4E 05 F1 | 	add	fp, #192
18e2c     A7 20 02 FB | 	rdlong	local02, fp
18e30     10 23 02 F6 | 	mov	local03, local02
18e34     01 22 06 F1 | 	add	local03, #1
18e38     A7 22 62 FC | 	wrlong	local03, fp
18e3c     94 4E 85 F1 | 	sub	fp, #148
18e40     A7 24 02 FB | 	rdlong	local04, fp
18e44     2C 4E 85 F1 | 	sub	fp, #44
18e48     10 25 42 FC | 	wrbyte	local04, local02
18e4c                 | LR__2256
18e4c     C0 4E 05 F1 | 	add	fp, #192
18e50     A7 12 02 FB | 	rdlong	arg01, fp
18e54     C0 4E 85 F1 | 	sub	fp, #192
18e58     34 01 00 FF 
18e5c     A6 14 06 F6 | 	mov	arg02, ##@LR__4142
18e60     A8 E9 BF FD | 	call	#__system____builtin_strcpy
18e64     34 08 90 FD | 	jmp	#LR__2291
18e68                 | LR__2257
18e68     10 4E 05 F1 | 	add	fp, #16
18e6c     A7 1E 02 FB | 	rdlong	local01, fp
18e70     10 4E 85 F1 | 	sub	fp, #16
18e74     67 1E 0E F2 | 	cmp	local01, #103 wz
18e78     10 4E 05 51 |  if_ne	add	fp, #16
18e7c     A7 22 02 5B |  if_ne	rdlong	local03, fp
18e80     10 4E 85 51 |  if_ne	sub	fp, #16
18e84     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
18e88     94 01 90 5D |  if_ne	jmp	#LR__2262
18e8c     0C 4E 05 F1 | 	add	fp, #12
18e90     A7 12 02 FB | 	rdlong	arg01, fp
18e94     08 4E 05 F1 | 	add	fp, #8
18e98     A7 14 02 F6 | 	mov	arg02, fp
18e9c     0C 4E 05 F1 | 	add	fp, #12
18ea0     A7 16 02 F6 | 	mov	arg03, fp
18ea4     98 4E 05 F1 | 	add	fp, #152
18ea8     A7 18 02 FB | 	rdlong	arg04, fp
18eac     9C 4E 85 F1 | 	sub	fp, #156
18eb0     A7 1A 02 FB | 	rdlong	arg05, fp
18eb4     1C 4E 85 F1 | 	sub	fp, #28
18eb8     08 3C B0 FD | 	call	#__system__disassemble_0341
18ebc     10 4E 05 F1 | 	add	fp, #16
18ec0     A7 1E 02 FB | 	rdlong	local01, fp
18ec4     10 4E 85 F1 | 	sub	fp, #16
18ec8     23 1E 0E F2 | 	cmp	local01, #35 wz
18ecc     A0 00 90 5D |  if_ne	jmp	#LR__2259
18ed0     20 4E 05 F1 | 	add	fp, #32
18ed4     A7 1E 02 FB | 	rdlong	local01, fp
18ed8     98 4E 05 F1 | 	add	fp, #152
18edc     A7 22 02 FB | 	rdlong	local03, fp
18ee0     B8 4E 85 F1 | 	sub	fp, #184
18ee4     11 1F 5A F2 | 	cmps	local01, local03 wcz
18ee8     24 4E 05 11 |  if_a	add	fp, #36
18eec     A7 02 68 1C |  if_a	wrlong	#1, fp
18ef0     24 4E 85 11 |  if_a	sub	fp, #36
18ef4     A4 01 90 1D |  if_a	jmp	#LR__2265
18ef8     20 4E 05 F1 | 	add	fp, #32
18efc     A7 1E 02 FB | 	rdlong	local01, fp
18f00     20 4E 85 F1 | 	sub	fp, #32
18f04     00 1E 56 F2 | 	cmps	local01, #0 wc
18f08     2C 00 90 3D |  if_ae	jmp	#LR__2258
18f0c     B8 4E 05 F1 | 	add	fp, #184
18f10     A7 1E 02 FB | 	rdlong	local01, fp
18f14     0F 1F 62 F6 | 	neg	local01, local01
18f18     98 4E 85 F1 | 	sub	fp, #152
18f1c     A7 22 02 FB | 	rdlong	local03, fp
18f20     20 4E 85 F1 | 	sub	fp, #32
18f24     0F 23 5A F2 | 	cmps	local03, local01 wcz
18f28     24 4E 05 E1 |  if_be	add	fp, #36
18f2c     A7 02 68 EC |  if_be	wrlong	#1, fp
18f30     24 4E 85 E1 |  if_be	sub	fp, #36
18f34     64 01 90 FD | 	jmp	#LR__2265
18f38                 | LR__2258
18f38     20 4E 05 F1 | 	add	fp, #32
18f3c     A7 1E 02 FB | 	rdlong	local01, fp
18f40     20 4E 85 F1 | 	sub	fp, #32
18f44     01 1E 56 F2 | 	cmps	local01, #1 wc
18f48     50 01 90 CD |  if_b	jmp	#LR__2265
18f4c     B8 4E 05 F1 | 	add	fp, #184
18f50     A7 1E 02 FB | 	rdlong	local01, fp
18f54     98 4E 85 F1 | 	sub	fp, #152
18f58     A7 22 02 FB | 	rdlong	local03, fp
18f5c     11 1F 82 F1 | 	sub	local01, local03
18f60     98 4E 05 F1 | 	add	fp, #152
18f64     A7 1E 62 FC | 	wrlong	local01, fp
18f68     B8 4E 85 F1 | 	sub	fp, #184
18f6c     2C 01 90 FD | 	jmp	#LR__2265
18f70                 | LR__2259
18f70     00 1E 06 F6 | 	mov	local01, #0
18f74     08 4E 05 F1 | 	add	fp, #8
18f78     A7 20 02 FB | 	rdlong	local02, fp
18f7c     1C 20 46 F0 | 	shr	local02, #28
18f80     01 20 0E F5 | 	and	local02, #1 wz
18f84     01 1E 06 A6 |  if_e	mov	local01, #1
18f88     2C 4E 05 F1 | 	add	fp, #44
18f8c     A7 1E 62 FC | 	wrlong	local01, fp
18f90     14 4E 85 F1 | 	sub	fp, #20
18f94     A7 1E 02 FB | 	rdlong	local01, fp
18f98     98 4E 05 F1 | 	add	fp, #152
18f9c     A7 22 02 FB | 	rdlong	local03, fp
18fa0     B8 4E 85 F1 | 	sub	fp, #184
18fa4     11 1F 52 F2 | 	cmps	local01, local03 wc
18fa8     18 00 90 3D |  if_ae	jmp	#LR__2260
18fac     20 4E 05 F1 | 	add	fp, #32
18fb0     A7 24 02 FB | 	rdlong	local04, fp
18fb4     20 4E 85 F1 | 	sub	fp, #32
18fb8     FF FF 7F FF 
18fbc     FC 25 56 F2 | 	cmps	local04, ##-4 wc
18fc0     10 00 90 3D |  if_ae	jmp	#LR__2261
18fc4                 | LR__2260
18fc4     24 4E 05 F1 | 	add	fp, #36
18fc8     A7 02 68 FC | 	wrlong	#1, fp
18fcc     24 4E 85 F1 | 	sub	fp, #36
18fd0     C8 00 90 FD | 	jmp	#LR__2265
18fd4                 | LR__2261
18fd4     B8 4E 05 F1 | 	add	fp, #184
18fd8     A7 24 02 FB | 	rdlong	local04, fp
18fdc     98 4E 85 F1 | 	sub	fp, #152
18fe0     A7 22 02 FB | 	rdlong	local03, fp
18fe4     11 25 82 F1 | 	sub	local04, local03
18fe8     98 4E 05 F1 | 	add	fp, #152
18fec     A7 24 62 FC | 	wrlong	local04, fp
18ff0     AC 4E 85 F1 | 	sub	fp, #172
18ff4     A7 12 02 FB | 	rdlong	arg01, fp
18ff8     08 4E 05 F1 | 	add	fp, #8
18ffc     A7 14 02 F6 | 	mov	arg02, fp
19000     0C 4E 05 F1 | 	add	fp, #12
19004     A7 16 02 F6 | 	mov	arg03, fp
19008     12 19 62 F6 | 	neg	arg04, local04
1900c     04 4E 85 F1 | 	sub	fp, #4
19010     A7 1A 02 FB | 	rdlong	arg05, fp
19014     1C 4E 85 F1 | 	sub	fp, #28
19018     A8 3A B0 FD | 	call	#__system__disassemble_0341
1901c     7C 00 90 FD | 	jmp	#LR__2265
19020                 | LR__2262
19020     24 4E 05 F1 | 	add	fp, #36
19024     A7 1E 0A FB | 	rdlong	local01, fp wz
19028     24 4E 85 F1 | 	sub	fp, #36
1902c     34 00 90 AD |  if_e	jmp	#LR__2263
19030     0C 4E 05 F1 | 	add	fp, #12
19034     A7 12 02 FB | 	rdlong	arg01, fp
19038     08 4E 05 F1 | 	add	fp, #8
1903c     A7 14 02 F6 | 	mov	arg02, fp
19040     0C 4E 05 F1 | 	add	fp, #12
19044     A7 16 02 F6 | 	mov	arg03, fp
19048     98 4E 05 F1 | 	add	fp, #152
1904c     A7 18 02 FB | 	rdlong	arg04, fp
19050     9C 4E 85 F1 | 	sub	fp, #156
19054     A7 1A 02 FB | 	rdlong	arg05, fp
19058     1C 4E 85 F1 | 	sub	fp, #28
1905c     64 3A B0 FD | 	call	#__system__disassemble_0341
19060     38 00 90 FD | 	jmp	#LR__2264
19064                 | LR__2263
19064     0C 4E 05 F1 | 	add	fp, #12
19068     A7 12 02 FB | 	rdlong	arg01, fp
1906c     08 4E 05 F1 | 	add	fp, #8
19070     A7 14 02 F6 | 	mov	arg02, fp
19074     0C 4E 05 F1 | 	add	fp, #12
19078     A7 16 02 F6 | 	mov	arg03, fp
1907c     98 4E 05 F1 | 	add	fp, #152
19080     A7 24 02 FB | 	rdlong	local04, fp
19084     01 24 06 F1 | 	add	local04, #1
19088     12 19 62 F6 | 	neg	arg04, local04
1908c     9C 4E 85 F1 | 	sub	fp, #156
19090     A7 1A 02 FB | 	rdlong	arg05, fp
19094     1C 4E 85 F1 | 	sub	fp, #28
19098     28 3A B0 FD | 	call	#__system__disassemble_0341
1909c                 | LR__2264
1909c                 | LR__2265
1909c     1C 4E 05 F1 | 	add	fp, #28
190a0     A7 1E 02 FB | 	rdlong	local01, fp
190a4     1C 4E 85 F1 | 	sub	fp, #28
190a8     02 1E 0E F2 | 	cmp	local01, #2 wz
190ac     4C 00 90 5D |  if_ne	jmp	#LR__2268
190b0     1C 4E 05 F1 | 	add	fp, #28
190b4     A7 20 68 FC | 	wrlong	#16, fp
190b8     1C 4E 85 F1 | 	sub	fp, #28
190bc                 | LR__2266
190bc     14 4E 05 F1 | 	add	fp, #20
190c0     A7 1E 0A FB | 	rdlong	local01, fp wz
190c4     14 4E 85 F1 | 	sub	fp, #20
190c8     30 00 90 AD |  if_e	jmp	#LR__2267
190cc     14 4E 05 F1 | 	add	fp, #20
190d0     A7 22 02 FB | 	rdlong	local03, fp
190d4     14 4E 85 F1 | 	sub	fp, #20
190d8     00 80 00 FF 
190dc     00 22 16 F2 | 	cmp	local03, ##16777216 wc
190e0     18 00 90 3D |  if_ae	jmp	#LR__2267
190e4     14 4E 05 F1 | 	add	fp, #20
190e8     A7 1E 02 FB | 	rdlong	local01, fp
190ec     01 1E 66 F0 | 	shl	local01, #1
190f0     A7 1E 62 FC | 	wrlong	local01, fp
190f4     14 4E 85 F1 | 	sub	fp, #20
190f8     C0 FF 9F FD | 	jmp	#LR__2266
190fc                 | LR__2267
190fc                 | LR__2268
190fc     70 4E 05 F1 | 	add	fp, #112
19100     A7 12 02 F6 | 	mov	arg01, fp
19104     5C 4E 85 F1 | 	sub	fp, #92
19108     A7 14 02 FB | 	rdlong	arg02, fp
1910c     08 4E 05 F1 | 	add	fp, #8
19110     A7 16 02 FB | 	rdlong	arg03, fp
19114     A0 4E 05 F1 | 	add	fp, #160
19118     A7 1A 02 FB | 	rdlong	arg05, fp
1911c     BC 4E 85 F1 | 	sub	fp, #188
19120     01 18 06 F6 | 	mov	arg04, #1
19124     28 39 B0 FD | 	call	#__system___uitoa
19128     58 4E 05 F1 | 	add	fp, #88
1912c     A7 FA 61 FC | 	wrlong	result1, fp
19130     38 4E 85 F1 | 	sub	fp, #56
19134     A7 1E 02 FB | 	rdlong	local01, fp
19138     20 4E 85 F1 | 	sub	fp, #32
1913c     00 1E 56 F2 | 	cmps	local01, #0 wc
19140     50 00 90 3D |  if_ae	jmp	#LR__2269
19144     60 4E 05 F1 | 	add	fp, #96
19148     A7 5A 68 FC | 	wrlong	#45, fp
1914c     50 4E 05 F1 | 	add	fp, #80
19150     A7 12 02 F6 | 	mov	arg01, fp
19154     90 4E 85 F1 | 	sub	fp, #144
19158     A7 22 02 FB | 	rdlong	local03, fp
1915c     11 15 62 F6 | 	neg	arg02, local03
19160     18 4E 05 F1 | 	add	fp, #24
19164     A7 18 02 FB | 	rdlong	arg04, fp
19168     84 4E 05 F1 | 	add	fp, #132
1916c     A7 28 02 FB | 	rdlong	local06, fp
19170     BC 4E 85 F1 | 	sub	fp, #188
19174     14 25 02 F6 | 	mov	local04, local06
19178     0A 16 06 F6 | 	mov	arg03, #10
1917c     12 1B 02 F6 | 	mov	arg05, local04
19180     CC 38 B0 FD | 	call	#__system___uitoa
19184     5C 4E 05 F1 | 	add	fp, #92
19188     A7 FA 61 FC | 	wrlong	result1, fp
1918c     5C 4E 85 F1 | 	sub	fp, #92
19190     48 00 90 FD | 	jmp	#LR__2270
19194                 | LR__2269
19194     60 4E 05 F1 | 	add	fp, #96
19198     A7 56 68 FC | 	wrlong	#43, fp
1919c     50 4E 05 F1 | 	add	fp, #80
191a0     A7 12 02 F6 | 	mov	arg01, fp
191a4     90 4E 85 F1 | 	sub	fp, #144
191a8     A7 14 02 FB | 	rdlong	arg02, fp
191ac     18 4E 05 F1 | 	add	fp, #24
191b0     A7 18 02 FB | 	rdlong	arg04, fp
191b4     84 4E 05 F1 | 	add	fp, #132
191b8     A7 28 02 FB | 	rdlong	local06, fp
191bc     BC 4E 85 F1 | 	sub	fp, #188
191c0     14 25 02 F6 | 	mov	local04, local06
191c4     0A 16 06 F6 | 	mov	arg03, #10
191c8     12 1B 02 F6 | 	mov	arg05, local04
191cc     80 38 B0 FD | 	call	#__system___uitoa
191d0     5C 4E 05 F1 | 	add	fp, #92
191d4     A7 FA 61 FC | 	wrlong	result1, fp
191d8     5C 4E 85 F1 | 	sub	fp, #92
191dc                 | LR__2270
191dc     24 4E 05 F1 | 	add	fp, #36
191e0     A7 1E 0A FB | 	rdlong	local01, fp wz
191e4     24 4E 85 F1 | 	sub	fp, #36
191e8     2C 00 90 AD |  if_e	jmp	#LR__2271
191ec     50 4E 05 F1 | 	add	fp, #80
191f0     A7 00 68 FC | 	wrlong	#0, fp
191f4     04 4E 85 F1 | 	sub	fp, #4
191f8     A7 00 68 FC | 	wrlong	#0, fp
191fc     6C 4E 05 F1 | 	add	fp, #108
19200     A7 1E 02 FB | 	rdlong	local01, fp
19204     01 1E 06 F1 | 	add	local01, #1
19208     64 4E 85 F1 | 	sub	fp, #100
1920c     A7 1E 62 FC | 	wrlong	local01, fp
19210     54 4E 85 F1 | 	sub	fp, #84
19214     88 00 90 FD | 	jmp	#LR__2274
19218                 | LR__2271
19218     20 4E 05 F1 | 	add	fp, #32
1921c     A7 1E 02 FB | 	rdlong	local01, fp
19220     20 4E 85 F1 | 	sub	fp, #32
19224     00 1E 56 F2 | 	cmps	local01, #0 wc
19228     40 00 90 3D |  if_ae	jmp	#LR__2272
1922c     20 4E 05 F1 | 	add	fp, #32
19230     A7 20 02 FB | 	rdlong	local02, fp
19234     30 4E 05 F1 | 	add	fp, #48
19238     A7 20 62 FC | 	wrlong	local02, fp
1923c     04 4E 85 F1 | 	sub	fp, #4
19240     A7 20 62 FC | 	wrlong	local02, fp
19244     2C 4E 85 F1 | 	sub	fp, #44
19248     A7 1E 02 FB | 	rdlong	local01, fp
1924c     98 4E 05 F1 | 	add	fp, #152
19250     A7 22 02 FB | 	rdlong	local03, fp
19254     11 1F 02 F1 | 	add	local01, local03
19258     01 1E 06 F1 | 	add	local01, #1
1925c     64 4E 85 F1 | 	sub	fp, #100
19260     A7 1E 62 FC | 	wrlong	local01, fp
19264     54 4E 85 F1 | 	sub	fp, #84
19268     34 00 90 FD | 	jmp	#LR__2273
1926c                 | LR__2272
1926c     4C 4E 05 F1 | 	add	fp, #76
19270     A7 00 68 FC | 	wrlong	#0, fp
19274     2C 4E 85 F1 | 	sub	fp, #44
19278     A7 1E 02 FB | 	rdlong	local01, fp
1927c     30 4E 05 F1 | 	add	fp, #48
19280     A7 1E 62 FC | 	wrlong	local01, fp
19284     68 4E 05 F1 | 	add	fp, #104
19288     A7 22 02 FB | 	rdlong	local03, fp
1928c     11 1F 02 F1 | 	add	local01, local03
19290     01 1E 06 F1 | 	add	local01, #1
19294     64 4E 85 F1 | 	sub	fp, #100
19298     A7 1E 62 FC | 	wrlong	local01, fp
1929c     54 4E 85 F1 | 	sub	fp, #84
192a0                 | LR__2273
192a0                 | LR__2274
192a0     54 4E 05 F1 | 	add	fp, #84
192a4     A7 1E 02 FB | 	rdlong	local01, fp
192a8     08 4E 85 F1 | 	sub	fp, #8
192ac     A7 22 02 FB | 	rdlong	local03, fp
192b0     11 1F 82 F1 | 	sub	local01, local03
192b4     01 1E 06 F1 | 	add	local01, #1
192b8     24 4E 85 F1 | 	sub	fp, #36
192bc     A7 1E 62 FC | 	wrlong	local01, fp
192c0     04 4E 05 F1 | 	add	fp, #4
192c4     A7 1E 0A FB | 	rdlong	local01, fp wz
192c8     2C 4E 85 F1 | 	sub	fp, #44
192cc     28 4E 05 51 |  if_ne	add	fp, #40
192d0     A7 22 02 5B |  if_ne	rdlong	local03, fp
192d4     01 22 06 51 |  if_ne	add	local03, #1
192d8     A7 22 62 5C |  if_ne	wrlong	local03, fp
192dc     28 4E 85 51 |  if_ne	sub	fp, #40
192e0     1C 4E 05 F1 | 	add	fp, #28
192e4     A7 1E 02 FB | 	rdlong	local01, fp
192e8     1C 4E 85 F1 | 	sub	fp, #28
192ec     10 1E 0E F2 | 	cmp	local01, #16 wz
192f0     28 4E 05 A1 |  if_e	add	fp, #40
192f4     A7 1E 02 AB |  if_e	rdlong	local01, fp
192f8     02 1E 06 A1 |  if_e	add	local01, #2
192fc     A7 1E 62 AC |  if_e	wrlong	local01, fp
19300     28 4E 85 A1 |  if_e	sub	fp, #40
19304     24 4E 05 F1 | 	add	fp, #36
19308     A7 1E 0A FB | 	rdlong	local01, fp wz
1930c     24 4E 85 F1 | 	sub	fp, #36
19310     28 00 90 AD |  if_e	jmp	#LR__2275
19314     28 4E 05 F1 | 	add	fp, #40
19318     A7 1E 02 FB | 	rdlong	local01, fp
1931c     02 22 06 F6 | 	mov	local03, #2
19320     34 4E 05 F1 | 	add	fp, #52
19324     A7 26 02 FB | 	rdlong	local05, fp
19328     13 23 02 F1 | 	add	local03, local05
1932c     11 1F 02 F1 | 	add	local01, local03
19330     34 4E 85 F1 | 	sub	fp, #52
19334     A7 1E 62 FC | 	wrlong	local01, fp
19338     28 4E 85 F1 | 	sub	fp, #40
1933c                 | LR__2275
1933c     28 4E 05 F1 | 	add	fp, #40
19340     A7 1E 02 FB | 	rdlong	local01, fp
19344     28 4E 85 F1 | 	sub	fp, #40
19348     41 1E 56 F2 | 	cmps	local01, #65 wc
1934c     01 FA 65 36 |  if_ae	neg	result1, #1
19350     08 05 90 3D |  if_ae	jmp	#LR__2303
19354     3C 4E 05 F1 | 	add	fp, #60
19358     A7 1E 0A FB | 	rdlong	local01, fp wz
1935c     3C 4E 85 F1 | 	sub	fp, #60
19360     60 00 90 AD |  if_e	jmp	#LR__2276
19364     C0 4E 05 F1 | 	add	fp, #192
19368     A7 12 02 FB | 	rdlong	arg01, fp
1936c     94 4E 85 F1 | 	sub	fp, #148
19370     A7 14 02 FB | 	rdlong	arg02, fp
19374     14 4E 05 F1 | 	add	fp, #20
19378     A7 16 02 FB | 	rdlong	arg03, fp
1937c     40 4E 85 F1 | 	sub	fp, #64
19380     34 39 B0 FD | 	call	#__system__emitsign_0343
19384     18 4F 05 F1 | 	add	fp, #280
19388     A7 FA 61 FC | 	wrlong	result1, fp
1938c     18 4F 85 F1 | 	sub	fp, #280
19390     00 FA 55 F2 | 	cmps	result1, #0 wc
19394     18 4F 05 C1 |  if_b	add	fp, #280
19398     A7 FA 01 CB |  if_b	rdlong	result1, fp
1939c     18 4F 85 C1 |  if_b	sub	fp, #280
193a0     B8 04 90 CD |  if_b	jmp	#LR__2303
193a4     C0 4E 05 F1 | 	add	fp, #192
193a8     A7 1E 02 FB | 	rdlong	local01, fp
193ac     58 4E 05 F1 | 	add	fp, #88
193b0     A7 22 02 FB | 	rdlong	local03, fp
193b4     11 1F 02 F1 | 	add	local01, local03
193b8     58 4E 85 F1 | 	sub	fp, #88
193bc     A7 1E 62 FC | 	wrlong	local01, fp
193c0     C0 4E 85 F1 | 	sub	fp, #192
193c4                 | LR__2276
193c4     4C 4E 05 F1 | 	add	fp, #76
193c8     A7 1E 02 FB | 	rdlong	local01, fp
193cc     34 4E 85 F1 | 	sub	fp, #52
193d0     A7 1E 62 FC | 	wrlong	local01, fp
193d4     18 4E 85 F1 | 	sub	fp, #24
193d8     97 9E 48 FB | 	callpa	#(@LR__2282-@LR__2277)>>2,fcache_load_ptr_
193dc                 | LR__2277
193dc     18 4E 05 F1 | 	add	fp, #24
193e0     A7 20 02 FB | 	rdlong	local02, fp
193e4     3C 4E 05 F1 | 	add	fp, #60
193e8     A7 26 02 FB | 	rdlong	local05, fp
193ec     54 4E 85 F1 | 	sub	fp, #84
193f0     13 21 52 F2 | 	cmps	local02, local05 wc
193f4     20 01 90 3D |  if_ae	jmp	#LR__2283
193f8     18 4E 05 F1 | 	add	fp, #24
193fc     A7 28 02 FB | 	rdlong	local06, fp
19400     18 4E 85 F1 | 	sub	fp, #24
19404     00 28 56 F2 | 	cmps	local06, #0 wc
19408     58 00 90 CD |  if_b	jmp	#LR__2278
1940c     18 4E 05 F1 | 	add	fp, #24
19410     A7 28 02 FB | 	rdlong	local06, fp
19414     40 4E 05 F1 | 	add	fp, #64
19418     A7 2A 02 FB | 	rdlong	local07, fp
1941c     58 4E 85 F1 | 	sub	fp, #88
19420     15 29 52 F2 | 	cmps	local06, local07 wc
19424     3C 00 90 3D |  if_ae	jmp	#LR__2278
19428     C0 4E 05 F1 | 	add	fp, #192
1942c     A7 2C 02 FB | 	rdlong	local08, fp
19430     16 2B 02 F6 | 	mov	local07, local08
19434     01 2A 06 F1 | 	add	local07, #1
19438     A7 2A 62 FC | 	wrlong	local07, fp
1943c     A8 4E 85 F1 | 	sub	fp, #168
19440     A7 2A 02 FB | 	rdlong	local07, fp
19444     15 2F 02 F6 | 	mov	local09, local07
19448     58 4E 05 F1 | 	add	fp, #88
1944c     A7 30 02 F6 | 	mov	local10, fp
19450     A7 2E 02 F1 | 	add	local09, fp
19454     17 33 C2 FA | 	rdbyte	local11, local09
19458     16 33 42 FC | 	wrbyte	local11, local08
1945c     70 4E 85 F1 | 	sub	fp, #112
19460     20 00 90 FD | 	jmp	#LR__2279
19464                 | LR__2278
19464     C0 4E 05 F1 | 	add	fp, #192
19468     A7 2C 02 FB | 	rdlong	local08, fp
1946c     16 2F 02 F6 | 	mov	local09, local08
19470     01 2E 06 F1 | 	add	local09, #1
19474     A7 2E 62 FC | 	wrlong	local09, fp
19478     C0 4E 85 F1 | 	sub	fp, #192
1947c     30 2E 06 F6 | 	mov	local09, #48
19480     16 61 48 FC | 	wrbyte	#48, local08
19484                 | LR__2279
19484     18 4E 05 F1 | 	add	fp, #24
19488     A7 28 02 FB | 	rdlong	local06, fp
1948c     38 4E 05 F1 | 	add	fp, #56
19490     A7 34 02 FB | 	rdlong	local12, fp
19494     50 4E 85 F1 | 	sub	fp, #80
19498     1A 29 0A F2 | 	cmp	local06, local12 wz
1949c     5C 00 90 5D |  if_ne	jmp	#LR__2281
194a0     10 4F 05 F1 | 	add	fp, #272
194a4     A7 2A 02 FB | 	rdlong	local07, fp
194a8     10 4F 85 F1 | 	sub	fp, #272
194ac     15 2F 0A F6 | 	mov	local09, local07 wz
194b0     28 00 90 5D |  if_ne	jmp	#LR__2280
194b4     54 4E 05 F1 | 	add	fp, #84
194b8     A7 32 02 FB | 	rdlong	local11, fp
194bc     19 31 02 F6 | 	mov	local10, local11
194c0     01 30 86 F1 | 	sub	local10, #1
194c4     3C 4E 85 F1 | 	sub	fp, #60
194c8     A7 36 02 FB | 	rdlong	local13, fp
194cc     18 4E 85 F1 | 	sub	fp, #24
194d0     1B 39 02 F6 | 	mov	local14, local13
194d4     18 39 52 F2 | 	cmps	local14, local10 wc
194d8     20 00 90 3D |  if_ae	jmp	#LR__2281
194dc                 | LR__2280
194dc     C0 4E 05 F1 | 	add	fp, #192
194e0     A7 2C 02 FB | 	rdlong	local08, fp
194e4     16 35 02 F6 | 	mov	local12, local08
194e8     01 34 06 F1 | 	add	local12, #1
194ec     A7 34 62 FC | 	wrlong	local12, fp
194f0     C0 4E 85 F1 | 	sub	fp, #192
194f4     2E 2E 06 F6 | 	mov	local09, #46
194f8     16 5D 48 FC | 	wrbyte	#46, local08
194fc                 | LR__2281
194fc     18 4E 05 F1 | 	add	fp, #24
19500     A7 3A 02 FB | 	rdlong	local15, fp
19504     1D 35 02 F6 | 	mov	local12, local15
19508     01 34 06 F1 | 	add	local12, #1
1950c     A7 34 62 FC | 	wrlong	local12, fp
19510     18 4E 85 F1 | 	sub	fp, #24
19514     C4 FE 9F FD | 	jmp	#LR__2277
19518                 | LR__2282
19518                 | LR__2283
19518     34 4E 05 F1 | 	add	fp, #52
1951c     A7 1E 0A FB | 	rdlong	local01, fp wz
19520     34 4E 85 F1 | 	sub	fp, #52
19524     A0 00 90 AD |  if_e	jmp	#LR__2287
19528     C0 4E 05 F1 | 	add	fp, #192
1952c     A7 1E 02 FB | 	rdlong	local01, fp
19530     01 1E 86 F1 | 	sub	local01, #1
19534     A7 1E 62 FC | 	wrlong	local01, fp
19538     C0 4E 85 F1 | 	sub	fp, #192
1953c     97 26 48 FB | 	callpa	#(@LR__2285-@LR__2284)>>2,fcache_load_ptr_
19540                 | LR__2284
19540     C0 4E 05 F1 | 	add	fp, #192
19544     A7 1E 02 FB | 	rdlong	local01, fp
19548     04 4E 05 F1 | 	add	fp, #4
1954c     A7 22 02 FB | 	rdlong	local03, fp
19550     C4 4E 85 F1 | 	sub	fp, #196
19554     11 1F 5A F2 | 	cmps	local01, local03 wcz
19558     30 00 90 ED |  if_be	jmp	#LR__2286
1955c     C0 4E 05 F1 | 	add	fp, #192
19560     A7 28 02 FB | 	rdlong	local06, fp
19564     C0 4E 85 F1 | 	sub	fp, #192
19568     14 25 C2 FA | 	rdbyte	local04, local06
1956c     30 24 0E F2 | 	cmp	local04, #48 wz
19570     18 00 90 5D |  if_ne	jmp	#LR__2286
19574     C0 4E 05 F1 | 	add	fp, #192
19578     A7 1E 02 FB | 	rdlong	local01, fp
1957c     01 1E 86 F1 | 	sub	local01, #1
19580     A7 1E 62 FC | 	wrlong	local01, fp
19584     C0 4E 85 F1 | 	sub	fp, #192
19588     B4 FF 9F FD | 	jmp	#LR__2284
1958c                 | LR__2285
1958c                 | LR__2286
1958c     C0 4E 05 F1 | 	add	fp, #192
19590     A7 20 02 FB | 	rdlong	local02, fp
19594     C0 4E 85 F1 | 	sub	fp, #192
19598     10 1F C2 FA | 	rdbyte	local01, local02
1959c     2E 1E 0E F2 | 	cmp	local01, #46 wz
195a0     C0 4E 05 A1 |  if_e	add	fp, #192
195a4     A7 1E 02 AB |  if_e	rdlong	local01, fp
195a8     01 1E 86 A1 |  if_e	sub	local01, #1
195ac     A7 1E 62 AC |  if_e	wrlong	local01, fp
195b0     C0 4E 85 A1 |  if_e	sub	fp, #192
195b4     C0 4E 05 F1 | 	add	fp, #192
195b8     A7 22 02 FB | 	rdlong	local03, fp
195bc     01 22 06 F1 | 	add	local03, #1
195c0     A7 22 62 FC | 	wrlong	local03, fp
195c4     C0 4E 85 F1 | 	sub	fp, #192
195c8                 | LR__2287
195c8     24 4E 05 F1 | 	add	fp, #36
195cc     A7 1E 0A FB | 	rdlong	local01, fp wz
195d0     24 4E 85 F1 | 	sub	fp, #36
195d4     B4 00 90 AD |  if_e	jmp	#LR__2290
195d8     C0 4E 05 F1 | 	add	fp, #192
195dc     A7 20 02 FB | 	rdlong	local02, fp
195e0     10 23 02 F6 | 	mov	local03, local02
195e4     01 22 06 F1 | 	add	local03, #1
195e8     A7 22 62 FC | 	wrlong	local03, fp
195ec     90 4E 85 F1 | 	sub	fp, #144
195f0     A7 24 02 FB | 	rdlong	local04, fp
195f4     10 25 42 FC | 	wrbyte	local04, local02
195f8     90 4E 05 F1 | 	add	fp, #144
195fc     A7 20 02 FB | 	rdlong	local02, fp
19600     10 23 02 F6 | 	mov	local03, local02
19604     01 22 06 F1 | 	add	local03, #1
19608     A7 22 62 FC | 	wrlong	local03, fp
1960c     60 4E 85 F1 | 	sub	fp, #96
19610     A7 24 02 FB | 	rdlong	local04, fp
19614     10 25 42 FC | 	wrbyte	local04, local02
19618     48 4E 85 F1 | 	sub	fp, #72
1961c     A7 00 68 FC | 	wrlong	#0, fp
19620     18 4E 85 F1 | 	sub	fp, #24
19624                 | LR__2288
19624     18 4E 05 F1 | 	add	fp, #24
19628     A7 20 02 FB | 	rdlong	local02, fp
1962c     44 4E 05 F1 | 	add	fp, #68
19630     A7 26 02 FB | 	rdlong	local05, fp
19634     5C 4E 85 F1 | 	sub	fp, #92
19638     13 21 52 F2 | 	cmps	local02, local05 wc
1963c     4C 00 90 3D |  if_ae	jmp	#LR__2289
19640     C0 4E 05 F1 | 	add	fp, #192
19644     A7 2C 02 FB | 	rdlong	local08, fp
19648     16 35 02 F6 | 	mov	local12, local08
1964c     01 34 06 F1 | 	add	local12, #1
19650     A7 34 62 FC | 	wrlong	local12, fp
19654     A8 4E 85 F1 | 	sub	fp, #168
19658     A7 2A 02 FB | 	rdlong	local07, fp
1965c     15 2F 02 F6 | 	mov	local09, local07
19660     98 4E 05 F1 | 	add	fp, #152
19664     A7 30 02 F6 | 	mov	local10, fp
19668     A7 2E 02 F1 | 	add	local09, fp
1966c     17 33 C2 FA | 	rdbyte	local11, local09
19670     16 33 42 FC | 	wrbyte	local11, local08
19674     98 4E 85 F1 | 	sub	fp, #152
19678     A7 34 02 FB | 	rdlong	local12, fp
1967c     01 34 06 F1 | 	add	local12, #1
19680     A7 34 62 FC | 	wrlong	local12, fp
19684     18 4E 85 F1 | 	sub	fp, #24
19688     98 FF 9F FD | 	jmp	#LR__2288
1968c                 | LR__2289
1968c                 | LR__2290
1968c     C0 4E 05 F1 | 	add	fp, #192
19690     A7 1E 02 FB | 	rdlong	local01, fp
19694     C0 4E 85 F1 | 	sub	fp, #192
19698     0F 01 48 FC | 	wrbyte	#0, local01
1969c                 | LR__2291
1969c     6C 4E 05 F1 | 	add	fp, #108
196a0     A7 1E 0A FB | 	rdlong	local01, fp wz
196a4     6C 4E 85 F1 | 	sub	fp, #108
196a8     90 01 90 AD |  if_e	jmp	#LR__2302
196ac     48 4E 05 F1 | 	add	fp, #72
196b0     A7 22 0A FB | 	rdlong	local03, fp wz
196b4     48 4E 85 F1 | 	sub	fp, #72
196b8     80 01 90 AD |  if_e	jmp	#LR__2302
196bc     C4 4E 05 F1 | 	add	fp, #196
196c0     A7 12 02 FB | 	rdlong	arg01, fp
196c4     C4 4E 85 F1 | 	sub	fp, #196
196c8     09 3D 02 F6 | 	mov	local16, arg01
196cc     97 06 48 FB | 	callpa	#(@LR__2293-@LR__2292)>>2,fcache_load_ptr_
196d0                 | LR__2292
196d0     1E FB C9 FA | 	rdbyte	result1, local16 wz
196d4     01 3C 06 51 |  if_ne	add	local16, #1
196d8     F4 FF 9F 5D |  if_ne	jmp	#LR__2292
196dc                 | LR__2293
196dc     09 3D 82 F1 | 	sub	local16, arg01
196e0     1E 25 02 F6 | 	mov	local04, local16
196e4     6C 4E 05 F1 | 	add	fp, #108
196e8     A7 28 02 FB | 	rdlong	local06, fp
196ec     6C 4E 85 F1 | 	sub	fp, #108
196f0     14 25 5A F2 | 	cmps	local04, local06 wcz
196f4     44 01 90 ED |  if_be	jmp	#LR__2302
196f8     C4 4E 05 F1 | 	add	fp, #196
196fc     A7 1E 02 FB | 	rdlong	local01, fp
19700     5C 4E 05 F1 | 	add	fp, #92
19704     A7 1E 62 FC | 	wrlong	local01, fp
19708     FC 4E 85 F1 | 	sub	fp, #252
1970c     A7 1E 0A FB | 	rdlong	local01, fp wz
19710     24 4E 85 F1 | 	sub	fp, #36
19714     20 00 90 AD |  if_e	jmp	#LR__2294
19718     B8 4E 05 F1 | 	add	fp, #184
1971c     A7 00 68 FC | 	wrlong	#0, fp
19720     4C 4E 85 F1 | 	sub	fp, #76
19724     A7 1E 02 FB | 	rdlong	local01, fp
19728     B0 4E 05 F1 | 	add	fp, #176
1972c     A7 1E 62 FC | 	wrlong	local01, fp
19730     1C 4F 85 F1 | 	sub	fp, #284
19734     24 00 90 FD | 	jmp	#LR__2295
19738                 | LR__2294
19738     6C 4E 05 F1 | 	add	fp, #108
1973c     A7 1E 02 FB | 	rdlong	local01, fp
19740     01 1E 86 F1 | 	sub	local01, #1
19744     4C 4E 05 F1 | 	add	fp, #76
19748     A7 22 02 FB | 	rdlong	local03, fp
1974c     11 1F 82 F1 | 	sub	local01, local03
19750     64 4E 05 F1 | 	add	fp, #100
19754     A7 1E 62 FC | 	wrlong	local01, fp
19758     1C 4F 85 F1 | 	sub	fp, #284
1975c                 | LR__2295
1975c     97 20 48 FB | 	callpa	#(@LR__2297-@LR__2296)>>2,fcache_load_ptr_
19760                 | LR__2296
19760     1C 4F 05 F1 | 	add	fp, #284
19764     A7 1E 0A FB | 	rdlong	local01, fp wz
19768     1C 4F 85 F1 | 	sub	fp, #284
1976c     30 00 90 AD |  if_e	jmp	#LR__2298
19770     20 4F 05 F1 | 	add	fp, #288
19774     A7 20 02 FB | 	rdlong	local02, fp
19778     10 23 02 F6 | 	mov	local03, local02
1977c     01 22 06 F1 | 	add	local03, #1
19780     A7 22 62 FC | 	wrlong	local03, fp
19784     10 55 48 FC | 	wrbyte	#42, local02
19788     04 4E 85 F1 | 	sub	fp, #4
1978c     A7 1E 02 FB | 	rdlong	local01, fp
19790     01 1E 86 F1 | 	sub	local01, #1
19794     A7 1E 62 FC | 	wrlong	local01, fp
19798     1C 4F 85 F1 | 	sub	fp, #284
1979c     C0 FF 9F FD | 	jmp	#LR__2296
197a0                 | LR__2297
197a0                 | LR__2298
197a0     B8 4E 05 F1 | 	add	fp, #184
197a4     A7 1E 0A FB | 	rdlong	local01, fp wz
197a8     B8 4E 85 F1 | 	sub	fp, #184
197ac     70 00 90 AD |  if_e	jmp	#LR__2301
197b0     20 4F 05 F1 | 	add	fp, #288
197b4     A7 20 02 FB | 	rdlong	local02, fp
197b8     10 23 02 F6 | 	mov	local03, local02
197bc     01 22 06 F1 | 	add	local03, #1
197c0     A7 22 62 FC | 	wrlong	local03, fp
197c4     10 5D 48 FC | 	wrbyte	#46, local02
197c8     04 4E 85 F1 | 	sub	fp, #4
197cc     A7 00 68 FC | 	wrlong	#0, fp
197d0     1C 4F 85 F1 | 	sub	fp, #284
197d4                 | LR__2299
197d4     1C 4F 05 F1 | 	add	fp, #284
197d8     A7 20 02 FB | 	rdlong	local02, fp
197dc     64 4E 85 F1 | 	sub	fp, #100
197e0     A7 26 02 FB | 	rdlong	local05, fp
197e4     B8 4E 85 F1 | 	sub	fp, #184
197e8     13 21 52 F2 | 	cmps	local02, local05 wc
197ec     30 00 90 3D |  if_ae	jmp	#LR__2300
197f0     20 4F 05 F1 | 	add	fp, #288
197f4     A7 2C 02 FB | 	rdlong	local08, fp
197f8     16 35 02 F6 | 	mov	local12, local08
197fc     01 34 06 F1 | 	add	local12, #1
19800     A7 34 62 FC | 	wrlong	local12, fp
19804     16 55 48 FC | 	wrbyte	#42, local08
19808     04 4E 85 F1 | 	sub	fp, #4
1980c     A7 34 02 FB | 	rdlong	local12, fp
19810     01 34 06 F1 | 	add	local12, #1
19814     A7 34 62 FC | 	wrlong	local12, fp
19818     1C 4F 85 F1 | 	sub	fp, #284
1981c     B4 FF 9F FD | 	jmp	#LR__2299
19820                 | LR__2300
19820                 | LR__2301
19820     20 4F 05 F1 | 	add	fp, #288
19824     A7 20 02 FB | 	rdlong	local02, fp
19828     10 23 02 F6 | 	mov	local03, local02
1982c     01 22 06 F1 | 	add	local03, #1
19830     A7 22 62 FC | 	wrlong	local03, fp
19834     20 4F 85 F1 | 	sub	fp, #288
19838     10 01 48 FC | 	wrbyte	#0, local02
1983c                 | LR__2302
1983c     04 4E 05 F1 | 	add	fp, #4
19840     A7 12 02 FB | 	rdlong	arg01, fp
19844     04 4E 05 F1 | 	add	fp, #4
19848     A7 14 02 FB | 	rdlong	arg02, fp
1984c     BC 4E 05 F1 | 	add	fp, #188
19850     A7 16 02 FB | 	rdlong	arg03, fp
19854     C4 4E 85 F1 | 	sub	fp, #196
19858     C4 EE BF FD | 	call	#__system___fmtstr
1985c                 | LR__2303
1985c     A7 F0 03 F6 | 	mov	ptra, fp
19860     B2 00 A0 FD | 	call	#popregs_
19864                 | __system___fmtfloat_ret
19864     2D 00 64 FD | 	ret
19868                 | 
19868                 | __system__Left_S
19868     04 4A 05 F6 | 	mov	COUNT_, #4
1986c     A8 00 A0 FD | 	call	#pushregs_
19870     09 1F 02 F6 | 	mov	local01, arg01
19874     0A 21 02 F6 | 	mov	local02, arg02
19878     01 20 56 F2 | 	cmps	local02, #1 wc
1987c     34 01 00 CF 
19880     AA FA 05 C6 |  if_b	mov	result1, ##@LR__4143
19884     5C 00 90 CD |  if_b	jmp	#LR__2313
19888     0F 13 02 F6 | 	mov	arg01, local01
1988c     09 23 02 F6 | 	mov	local03, arg01
19890     97 06 48 FB | 	callpa	#(@LR__2311-@LR__2310)>>2,fcache_load_ptr_
19894                 | LR__2310
19894     11 FB C9 FA | 	rdbyte	result1, local03 wz
19898     01 22 06 51 |  if_ne	add	local03, #1
1989c     F4 FF 9F 5D |  if_ne	jmp	#LR__2310
198a0                 | LR__2311
198a0     09 23 82 F1 | 	sub	local03, arg01
198a4     11 FB 01 F6 | 	mov	result1, local03
198a8     10 FB 59 F2 | 	cmps	result1, local02 wcz
198ac     0F FB 01 E6 |  if_be	mov	result1, local01
198b0     30 00 90 ED |  if_be	jmp	#LR__2313
198b4     10 13 02 F6 | 	mov	arg01, local02
198b8     02 12 06 F1 | 	add	arg01, #2
198bc     64 19 B0 FD | 	call	#__system___gc_alloc_managed
198c0     FD 24 0A F6 | 	mov	local04, result1 wz
198c4     18 00 90 AD |  if_e	jmp	#LR__2312
198c8     12 13 02 F6 | 	mov	arg01, local04
198cc     0F 15 02 F6 | 	mov	arg02, local01
198d0     10 17 02 F6 | 	mov	arg03, local02
198d4     A0 DE BF FD | 	call	#__system____builtin_memmove
198d8     12 21 02 F1 | 	add	local02, local04
198dc     10 01 48 FC | 	wrbyte	#0, local02
198e0                 | LR__2312
198e0     12 FB 01 F6 | 	mov	result1, local04
198e4                 | LR__2313
198e4     A7 F0 03 F6 | 	mov	ptra, fp
198e8     B2 00 A0 FD | 	call	#popregs_
198ec                 | __system__Left_S_ret
198ec     2D 00 64 FD | 	ret
198f0                 | 
198f0                 | __system__Right_S
198f0     05 4A 05 F6 | 	mov	COUNT_, #5
198f4     A8 00 A0 FD | 	call	#pushregs_
198f8     09 1F 02 F6 | 	mov	local01, arg01
198fc     0A 21 02 F6 | 	mov	local02, arg02
19900     01 20 56 F2 | 	cmps	local02, #1 wc
19904     34 01 00 CF 
19908     AB FA 05 C6 |  if_b	mov	result1, ##@LR__4144
1990c     64 00 90 CD |  if_b	jmp	#LR__2323
19910     0F 13 02 F6 | 	mov	arg01, local01
19914     09 23 02 F6 | 	mov	local03, arg01
19918     97 06 48 FB | 	callpa	#(@LR__2321-@LR__2320)>>2,fcache_load_ptr_
1991c                 | LR__2320
1991c     11 FB C9 FA | 	rdbyte	result1, local03 wz
19920     01 22 06 51 |  if_ne	add	local03, #1
19924     F4 FF 9F 5D |  if_ne	jmp	#LR__2320
19928                 | LR__2321
19928     09 23 82 F1 | 	sub	local03, arg01
1992c     11 FB 01 F6 | 	mov	result1, local03
19930     FD 24 02 F6 | 	mov	local04, result1
19934     10 25 5A F2 | 	cmps	local04, local02 wcz
19938     0F FB 01 E6 |  if_be	mov	result1, local01
1993c     34 00 90 ED |  if_be	jmp	#LR__2323
19940     10 13 02 F6 | 	mov	arg01, local02
19944     02 12 06 F1 | 	add	arg01, #2
19948     D8 18 B0 FD | 	call	#__system___gc_alloc_managed
1994c     FD 26 0A F6 | 	mov	local05, result1 wz
19950     1C 00 90 AD |  if_e	jmp	#LR__2322
19954     10 25 82 F1 | 	sub	local04, local02
19958     0F 25 02 F1 | 	add	local04, local01
1995c     01 20 06 F1 | 	add	local02, #1
19960     13 13 02 F6 | 	mov	arg01, local05
19964     12 15 02 F6 | 	mov	arg02, local04
19968     10 17 02 F6 | 	mov	arg03, local02
1996c     08 DE BF FD | 	call	#__system____builtin_memmove
19970                 | LR__2322
19970     13 FB 01 F6 | 	mov	result1, local05
19974                 | LR__2323
19974     A7 F0 03 F6 | 	mov	ptra, fp
19978     B2 00 A0 FD | 	call	#popregs_
1997c                 | __system__Right_S_ret
1997c     2D 00 64 FD | 	ret
19980                 | 
19980                 | __system__Mid_S
19980     05 4A 05 F6 | 	mov	COUNT_, #5
19984     A8 00 A0 FD | 	call	#pushregs_
19988     09 1F 02 F6 | 	mov	local01, arg01
1998c     0A 21 02 F6 | 	mov	local02, arg02
19990     01 16 56 F2 | 	cmps	arg03, #1 wc
19994     34 01 00 CF 
19998     AC FA 05 C6 |  if_b	mov	result1, ##@LR__4145
1999c     80 00 90 CD |  if_b	jmp	#LR__2333
199a0     01 20 86 F1 | 	sub	local02, #1
199a4     00 20 56 F3 | 	fges	local02, #0 wc
199a8     0F 13 02 F6 | 	mov	arg01, local01
199ac     09 23 02 F6 | 	mov	local03, arg01
199b0     97 06 48 FB | 	callpa	#(@LR__2331-@LR__2330)>>2,fcache_load_ptr_
199b4                 | LR__2330
199b4     11 FB C9 FA | 	rdbyte	result1, local03 wz
199b8     01 22 06 51 |  if_ne	add	local03, #1
199bc     F4 FF 9F 5D |  if_ne	jmp	#LR__2330
199c0                 | LR__2331
199c0     09 23 82 F1 | 	sub	local03, arg01
199c4     11 FB 01 F6 | 	mov	result1, local03
199c8     FD 14 02 F6 | 	mov	arg02, result1
199cc     10 15 52 F2 | 	cmps	arg02, local02 wc
199d0     34 01 00 CF 
199d4     AD FA 05 C6 |  if_b	mov	result1, ##@LR__4146
199d8     44 00 90 CD |  if_b	jmp	#LR__2333
199dc     0A 25 02 F6 | 	mov	local04, arg02
199e0     10 25 82 F1 | 	sub	local04, local02
199e4     0B 25 5A F2 | 	cmps	local04, arg03 wcz
199e8     0B 25 02 16 |  if_a	mov	local04, arg03
199ec     12 13 02 F6 | 	mov	arg01, local04
199f0     02 12 06 F1 | 	add	arg01, #2
199f4     2C 18 B0 FD | 	call	#__system___gc_alloc_managed
199f8     FD 26 0A F6 | 	mov	local05, result1 wz
199fc     1C 00 90 AD |  if_e	jmp	#LR__2332
19a00     0F 21 02 F1 | 	add	local02, local01
19a04     13 13 02 F6 | 	mov	arg01, local05
19a08     10 15 02 F6 | 	mov	arg02, local02
19a0c     12 17 02 F6 | 	mov	arg03, local04
19a10     64 DD BF FD | 	call	#__system____builtin_memmove
19a14     13 25 02 F1 | 	add	local04, local05
19a18     12 01 48 FC | 	wrbyte	#0, local04
19a1c                 | LR__2332
19a1c     13 FB 01 F6 | 	mov	result1, local05
19a20                 | LR__2333
19a20     A7 F0 03 F6 | 	mov	ptra, fp
19a24     B2 00 A0 FD | 	call	#popregs_
19a28                 | __system__Mid_S_ret
19a28     2D 00 64 FD | 	ret
19a2c                 | 
19a2c                 | __system__Chr_S
19a2c     01 4A 05 F6 | 	mov	COUNT_, #1
19a30     A8 00 A0 FD | 	call	#pushregs_
19a34     09 1F 02 F6 | 	mov	local01, arg01
19a38     03 12 06 F6 | 	mov	arg01, #3
19a3c     E4 17 B0 FD | 	call	#__system___gc_alloc_managed
19a40     00 FA 4D F2 | 	cmps	result1, #0 wz
19a44     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
19a48     01 FA 05 51 |  if_ne	add	result1, #1
19a4c     FD 00 48 5C |  if_ne	wrbyte	#0, result1
19a50     01 FA 85 51 |  if_ne	sub	result1, #1
19a54     A7 F0 03 F6 | 	mov	ptra, fp
19a58     B2 00 A0 FD | 	call	#popregs_
19a5c                 | __system__Chr_S_ret
19a5c     2D 00 64 FD | 	ret
19a60                 | 
19a60                 | __system__Number_S
19a60     08 4A 05 F6 | 	mov	COUNT_, #8
19a64     A8 00 A0 FD | 	call	#pushregs_
19a68     09 1F 02 F6 | 	mov	local01, arg01
19a6c     0A 21 0A F6 | 	mov	local02, arg02 wz
19a70     0B 23 02 F6 | 	mov	local03, arg03
19a74     3C 00 90 5D |  if_ne	jmp	#LR__2342
19a78     01 20 06 F6 | 	mov	local02, #1
19a7c     11 25 02 F6 | 	mov	local04, local03
19a80     01 26 06 F6 | 	mov	local05, #1
19a84     97 16 48 FB | 	callpa	#(@LR__2341-@LR__2340)>>2,fcache_load_ptr_
19a88                 | LR__2340
19a88     00 28 06 F6 | 	mov	local06, #0
19a8c     0F 25 1A F2 | 	cmp	local04, local01 wcz
19a90     01 28 66 E6 |  if_be	neg	local06, #1
19a94     12 27 12 F2 | 	cmp	local05, local04 wc
19a98     15 2B A2 F1 | 	subx	local07, local07
19a9c     15 29 CA F7 | 	test	local06, local07 wz
19aa0     11 25 02 5D |  if_ne	qmul	local04, local03
19aa4     12 27 02 56 |  if_ne	mov	local05, local04
19aa8     01 20 06 51 |  if_ne	add	local02, #1
19aac     18 24 62 5D |  if_ne	getqx	local04
19ab0     D4 FF 9F 5D |  if_ne	jmp	#LR__2340
19ab4                 | LR__2341
19ab4                 | LR__2342
19ab4     20 20 36 F3 | 	fle	local02, #32 wc
19ab8     10 13 02 F6 | 	mov	arg01, local02
19abc     02 12 06 F1 | 	add	arg01, #2
19ac0     60 17 B0 FD | 	call	#__system___gc_alloc_managed
19ac4     FD 28 02 F6 | 	mov	local06, result1
19ac8     10 2B 02 F6 | 	mov	local07, local02
19acc     14 2B 02 F1 | 	add	local07, local06
19ad0     15 01 48 FC | 	wrbyte	#0, local07
19ad4     97 1A 48 FB | 	callpa	#(@LR__2344-@LR__2343)>>2,fcache_load_ptr_
19ad8                 | LR__2343
19ad8     01 20 16 F2 | 	cmp	local02, #1 wc
19adc     2C 00 90 CD |  if_b	jmp	#LR__2345
19ae0     11 1F 12 FD | 	qdiv	local01, local03
19ae4     01 20 86 F1 | 	sub	local02, #1
19ae8     10 2B 02 F6 | 	mov	local07, local02
19aec     14 2B 02 F1 | 	add	local07, local06
19af0     19 2C 62 FD | 	getqy	local08
19af4     0A 2C 16 F2 | 	cmp	local08, #10 wc
19af8     30 2C 06 C1 |  if_b	add	local08, #48
19afc     37 2C 06 31 |  if_ae	add	local08, #55
19b00     15 2D 42 FC | 	wrbyte	local08, local07
19b04     18 1E 62 FD | 	getqx	local01
19b08     CC FF 9F FD | 	jmp	#LR__2343
19b0c                 | LR__2344
19b0c                 | LR__2345
19b0c     14 FB 01 F6 | 	mov	result1, local06
19b10     A7 F0 03 F6 | 	mov	ptra, fp
19b14     B2 00 A0 FD | 	call	#popregs_
19b18                 | __system__Number_S_ret
19b18     2D 00 64 FD | 	ret
19b1c                 | 
19b1c                 | __system__LCase_S
19b1c     07 4A 05 F6 | 	mov	COUNT_, #7
19b20     A8 00 A0 FD | 	call	#pushregs_
19b24     09 1F 02 F6 | 	mov	local01, arg01
19b28     09 21 02 F6 | 	mov	local02, arg01
19b2c     97 06 48 FB | 	callpa	#(@LR__2351-@LR__2350)>>2,fcache_load_ptr_
19b30                 | LR__2350
19b30     10 FB C9 FA | 	rdbyte	result1, local02 wz
19b34     01 20 06 51 |  if_ne	add	local02, #1
19b38     F4 FF 9F 5D |  if_ne	jmp	#LR__2350
19b3c                 | LR__2351
19b3c     09 21 82 F1 | 	sub	local02, arg01
19b40     10 FB 01 F6 | 	mov	result1, local02
19b44     FD 20 0A F6 | 	mov	local02, result1 wz
19b48     34 01 00 AF 
19b4c     AE FA 05 A6 |  if_e	mov	result1, ##@LR__4147
19b50     7C 00 90 AD |  if_e	jmp	#LR__2357
19b54     10 13 02 F6 | 	mov	arg01, local02
19b58     02 12 06 F1 | 	add	arg01, #2
19b5c     C4 16 B0 FD | 	call	#__system___gc_alloc_managed
19b60     FD 22 0A F6 | 	mov	local03, result1 wz
19b64     64 00 90 AD |  if_e	jmp	#LR__2356
19b68     01 24 66 F6 | 	neg	local04, #1
19b6c     97 26 48 FB | 	callpa	#(@LR__2355-@LR__2352)>>2,fcache_load_ptr_
19b70                 | LR__2352
19b70     01 24 06 F1 | 	add	local04, #1
19b74     12 27 02 F6 | 	mov	local05, local04
19b78     0F 27 02 F1 | 	add	local05, local01
19b7c     13 29 C2 FA | 	rdbyte	local06, local05
19b80     41 28 56 F2 | 	cmps	local06, #65 wc
19b84     18 00 90 CD |  if_b	jmp	#LR__2353
19b88     5B 28 56 F2 | 	cmps	local06, #91 wc
19b8c     12 2B 02 C6 |  if_b	mov	local07, local04
19b90     11 2B 02 C1 |  if_b	add	local07, local03
19b94     20 28 06 C1 |  if_b	add	local06, #32
19b98     15 29 42 CC |  if_b	wrbyte	local06, local07
19b9c     0C 00 90 CD |  if_b	jmp	#LR__2354
19ba0                 | LR__2353
19ba0     12 2B 02 F6 | 	mov	local07, local04
19ba4     11 2B 02 F1 | 	add	local07, local03
19ba8     15 29 42 FC | 	wrbyte	local06, local07
19bac                 | LR__2354
19bac     10 29 02 F6 | 	mov	local06, local02
19bb0     01 28 86 F1 | 	sub	local06, #1
19bb4     14 25 0A F2 | 	cmp	local04, local06 wz
19bb8     B4 FF 9F 5D |  if_ne	jmp	#LR__2352
19bbc                 | LR__2355
19bbc     11 21 02 F1 | 	add	local02, local03
19bc0     10 01 48 FC | 	wrbyte	#0, local02
19bc4     11 FB 01 F6 | 	mov	result1, local03
19bc8     04 00 90 FD | 	jmp	#LR__2357
19bcc                 | LR__2356
19bcc     11 FB 01 F6 | 	mov	result1, local03
19bd0                 | LR__2357
19bd0     A7 F0 03 F6 | 	mov	ptra, fp
19bd4     B2 00 A0 FD | 	call	#popregs_
19bd8                 | __system__LCase_S_ret
19bd8     2D 00 64 FD | 	ret
19bdc                 | 
19bdc                 | __system__LTrim_S
19bdc     05 4A 05 F6 | 	mov	COUNT_, #5
19be0     A8 00 A0 FD | 	call	#pushregs_
19be4     09 1F 02 F6 | 	mov	local01, arg01
19be8     09 21 02 F6 | 	mov	local02, arg01
19bec     97 06 48 FB | 	callpa	#(@LR__2361-@LR__2360)>>2,fcache_load_ptr_
19bf0                 | LR__2360
19bf0     10 FB C9 FA | 	rdbyte	result1, local02 wz
19bf4     01 20 06 51 |  if_ne	add	local02, #1
19bf8     F4 FF 9F 5D |  if_ne	jmp	#LR__2360
19bfc                 | LR__2361
19bfc     09 21 82 F1 | 	sub	local02, arg01
19c00     10 FB 01 F6 | 	mov	result1, local02
19c04     FD 20 0A F6 | 	mov	local02, result1 wz
19c08     34 01 00 AF 
19c0c     AF FA 05 A6 |  if_e	mov	result1, ##@LR__4148
19c10     7C 00 90 AD |  if_e	jmp	#LR__2366
19c14     00 22 06 F6 | 	mov	local03, #0
19c18     10 25 02 F6 | 	mov	local04, local02
19c1c                 | LR__2362
19c1c     12 23 52 F2 | 	cmps	local03, local04 wc
19c20     68 00 90 3D |  if_ae	jmp	#LR__2365
19c24     11 17 02 F6 | 	mov	arg03, local03
19c28     0F 17 02 F1 | 	add	arg03, local01
19c2c     0B 17 C2 FA | 	rdbyte	arg03, arg03
19c30     20 16 0E F2 | 	cmp	arg03, #32 wz
19c34     4C 00 90 AD |  if_e	jmp	#LR__2364
19c38     10 13 02 F6 | 	mov	arg01, local02
19c3c     11 13 82 F1 | 	sub	arg01, local03
19c40     02 12 06 F1 | 	add	arg01, #2
19c44     DC 15 B0 FD | 	call	#__system___gc_alloc_managed
19c48     FD 26 0A F6 | 	mov	local05, result1 wz
19c4c     2C 00 90 AD |  if_e	jmp	#LR__2363
19c50     11 15 02 F6 | 	mov	arg02, local03
19c54     0F 15 02 F1 | 	add	arg02, local01
19c58     10 17 02 F6 | 	mov	arg03, local02
19c5c     11 17 82 F1 | 	sub	arg03, local03
19c60     13 13 02 F6 | 	mov	arg01, local05
19c64     10 DB BF FD | 	call	#__system____builtin_memmove
19c68     11 21 82 F1 | 	sub	local02, local03
19c6c     13 21 02 F1 | 	add	local02, local05
19c70     10 01 48 FC | 	wrbyte	#0, local02
19c74     13 FB 01 F6 | 	mov	result1, local05
19c78     14 00 90 FD | 	jmp	#LR__2366
19c7c                 | LR__2363
19c7c     13 FB 01 F6 | 	mov	result1, local05
19c80     0C 00 90 FD | 	jmp	#LR__2366
19c84                 | LR__2364
19c84     01 22 06 F1 | 	add	local03, #1
19c88     90 FF 9F FD | 	jmp	#LR__2362
19c8c                 | LR__2365
19c8c     0F FB 01 F6 | 	mov	result1, local01
19c90                 | LR__2366
19c90     A7 F0 03 F6 | 	mov	ptra, fp
19c94     B2 00 A0 FD | 	call	#popregs_
19c98                 | __system__LTrim_S_ret
19c98     2D 00 64 FD | 	ret
19c9c                 | 
19c9c                 | __system__RTrim_S
19c9c     04 4A 05 F6 | 	mov	COUNT_, #4
19ca0     A8 00 A0 FD | 	call	#pushregs_
19ca4     09 1F 02 F6 | 	mov	local01, arg01
19ca8     09 21 02 F6 | 	mov	local02, arg01
19cac     97 06 48 FB | 	callpa	#(@LR__2371-@LR__2370)>>2,fcache_load_ptr_
19cb0                 | LR__2370
19cb0     10 FB C9 FA | 	rdbyte	result1, local02 wz
19cb4     01 20 06 51 |  if_ne	add	local02, #1
19cb8     F4 FF 9F 5D |  if_ne	jmp	#LR__2370
19cbc                 | LR__2371
19cbc     09 21 82 F1 | 	sub	local02, arg01
19cc0     10 FB 01 F6 | 	mov	result1, local02
19cc4     FD 20 0A F6 | 	mov	local02, result1 wz
19cc8     34 01 00 AF 
19ccc     B0 FA 05 A6 |  if_e	mov	result1, ##@LR__4149
19cd0     74 00 90 AD |  if_e	jmp	#LR__2375
19cd4     10 23 02 F6 | 	mov	local03, local02
19cd8     01 22 86 F1 | 	sub	local03, #1
19cdc                 | LR__2372
19cdc     11 15 02 F6 | 	mov	arg02, local03
19ce0     0F 15 02 F1 | 	add	arg02, local01
19ce4     0A 21 C2 FA | 	rdbyte	local02, arg02
19ce8     20 20 0E F2 | 	cmp	local02, #32 wz
19cec     44 00 90 AD |  if_e	jmp	#LR__2374
19cf0     11 13 02 F6 | 	mov	arg01, local03
19cf4     02 12 06 F1 | 	add	arg01, #2
19cf8     28 15 B0 FD | 	call	#__system___gc_alloc_managed
19cfc     FD 24 0A F6 | 	mov	local04, result1 wz
19d00     28 00 90 AD |  if_e	jmp	#LR__2373
19d04     11 17 02 F6 | 	mov	arg03, local03
19d08     01 16 06 F1 | 	add	arg03, #1
19d0c     12 13 02 F6 | 	mov	arg01, local04
19d10     0F 15 02 F6 | 	mov	arg02, local01
19d14     60 DA BF FD | 	call	#__system____builtin_memmove
19d18     01 22 06 F1 | 	add	local03, #1
19d1c     12 23 02 F1 | 	add	local03, local04
19d20     11 01 48 FC | 	wrbyte	#0, local03
19d24     12 FB 01 F6 | 	mov	result1, local04
19d28     1C 00 90 FD | 	jmp	#LR__2375
19d2c                 | LR__2373
19d2c     12 FB 01 F6 | 	mov	result1, local04
19d30     14 00 90 FD | 	jmp	#LR__2375
19d34                 | LR__2374
19d34     01 22 86 F1 | 	sub	local03, #1
19d38     00 22 56 F2 | 	cmps	local03, #0 wc
19d3c     9C FF 9F 3D |  if_ae	jmp	#LR__2372
19d40     34 01 00 FF 
19d44     B1 FA 05 F6 | 	mov	result1, ##@LR__4150
19d48                 | LR__2375
19d48     A7 F0 03 F6 | 	mov	ptra, fp
19d4c     B2 00 A0 FD | 	call	#popregs_
19d50                 | __system__RTrim_S_ret
19d50     2D 00 64 FD | 	ret
19d54                 | 
19d54                 | __system___strerror
19d54     00 12 56 F2 | 	cmps	arg01, #0 wc
19d58     08 00 90 CD |  if_b	jmp	#LR__2380
19d5c     1A 12 56 F2 | 	cmps	arg01, #26 wc
19d60     04 00 90 CD |  if_b	jmp	#LR__2381
19d64                 | LR__2380
19d64     19 12 06 F6 | 	mov	arg01, #25
19d68                 | LR__2381
19d68     02 12 66 F0 | 	shl	arg01, #2
19d6c     01 00 00 FF 
19d70     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
19d74     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
19d78     09 FB 01 FB | 	rdlong	result1, arg01
19d7c     01 00 00 FF 
19d80     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
19d84                 | __system___strerror_ret
19d84     2D 00 64 FD | 	ret
19d88                 | 
19d88                 | __system___int64_shl
19d88     20 16 CE F7 | 	test	arg03, #32 wz
19d8c     09 15 02 56 |  if_ne	mov	arg02, arg01
19d90     00 12 06 56 |  if_ne	mov	arg01, #0
19d94     1F 16 CE F7 | 	test	arg03, #31 wz
19d98     18 00 90 AD |  if_e	jmp	#LR__2390
19d9c     0B 15 62 F0 | 	shl	arg02, arg03
19da0     09 FB 01 F6 | 	mov	result1, arg01
19da4     0B FD 61 F6 | 	neg	result2, arg03
19da8     FE FA 41 F0 | 	shr	result1, result2
19dac     FD 14 42 F5 | 	or	arg02, result1
19db0     0B 13 62 F0 | 	shl	arg01, arg03
19db4                 | LR__2390
19db4     0A FD 01 F6 | 	mov	result2, arg02
19db8     09 FB 01 F6 | 	mov	result1, arg01
19dbc                 | __system___int64_shl_ret
19dbc     2D 00 64 FD | 	ret
19dc0                 | 
19dc0                 | __system___usepins
19dc0     14 E8 05 F1 | 	add	ptr___system__dat__, #20
19dc4     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
19dc8     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
19dcc     00 13 CA F7 | 	test	arg01, _var01 wz
19dd0     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
19dd4     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
19dd8     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
19ddc     01 15 CA A7 |  if_e	test	arg02, _var02 wz
19de0     00 FA 05 56 |  if_ne	mov	result1, #0
19de4     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
19de8     14 E8 05 F1 | 	add	ptr___system__dat__, #20
19dec     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
19df0     09 03 42 F5 | 	or	_var02, arg01
19df4     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
19df8     04 E8 05 F1 | 	add	ptr___system__dat__, #4
19dfc     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
19e00     0A 03 42 F5 | 	or	_var02, arg02
19e04     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
19e08     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
19e0c     01 FA 65 F6 | 	neg	result1, #1
19e10                 | __system___usepins_ret
19e10     2D 00 64 FD | 	ret
19e14                 | 
19e14                 | __system___freepins
19e14     14 E8 05 F1 | 	add	ptr___system__dat__, #20
19e18     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
19e1c     09 01 22 F5 | 	andn	_var01, arg01
19e20     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
19e24     04 E8 05 F1 | 	add	ptr___system__dat__, #4
19e28     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
19e2c     0A 01 22 F5 | 	andn	_var01, arg02
19e30     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
19e34     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
19e38                 | __system___freepins_ret
19e38     2D 00 64 FD | 	ret
19e3c                 | 
19e3c                 | __system___float_fromuns
19e3c     09 17 0A F6 | 	mov	arg03, arg01 wz
19e40     0B FB 01 A6 |  if_e	mov	result1, arg03
19e44     24 00 90 AD |  if_e	jmp	#LR__2400
19e48     0B 15 92 F7 | 	encod	arg02, arg03 wc
19e4c     01 14 06 C1 |  if_b	add	arg02, #1
19e50     01 14 86 F1 | 	sub	arg02, #1
19e54     1F 12 06 F6 | 	mov	arg01, #31
19e58     0A 13 82 F1 | 	sub	arg01, arg02
19e5c     09 17 62 F0 | 	shl	arg03, arg01
19e60     02 16 46 F0 | 	shr	arg03, #2
19e64     00 12 06 F6 | 	mov	arg01, #0
19e68     74 08 B0 FD | 	call	#__system___float_Pack
19e6c                 | LR__2400
19e6c                 | __system___float_fromuns_ret
19e6c     2D 00 64 FD | 	ret
19e70                 | 
19e70                 | __system___float_add
19e70     0F 4A 05 F6 | 	mov	COUNT_, #15
19e74     A8 00 A0 FD | 	call	#pushregs_
19e78     09 1F 02 F6 | 	mov	local01, arg01
19e7c     0A 21 02 F6 | 	mov	local02, arg02
19e80     00 22 06 F6 | 	mov	local03, #0
19e84     0F 25 02 F6 | 	mov	local04, local01
19e88     12 27 02 F6 | 	mov	local05, local04
19e8c     16 26 46 F7 | 	zerox	local05, #22
19e90     12 29 02 F6 | 	mov	local06, local04
19e94     01 28 66 F0 | 	shl	local06, #1
19e98     18 28 46 F0 | 	shr	local06, #24
19e9c     1F 24 46 F0 | 	shr	local04, #31
19ea0     10 13 02 F6 | 	mov	arg01, local02
19ea4     09 FB 01 F6 | 	mov	result1, arg01
19ea8     FD 2A 02 F6 | 	mov	local07, result1
19eac     15 2D 02 F6 | 	mov	local08, local07
19eb0     16 2C 46 F7 | 	zerox	local08, #22
19eb4     15 2F 02 F6 | 	mov	local09, local07
19eb8     01 2E 66 F0 | 	shl	local09, #1
19ebc     18 2E 46 F0 | 	shr	local09, #24
19ec0     17 31 02 F6 | 	mov	local10, local09
19ec4     1F 2A 46 F0 | 	shr	local07, #31
19ec8     00 32 06 F6 | 	mov	local11, #0
19ecc     00 34 06 F6 | 	mov	local12, #0
19ed0     18 29 12 F2 | 	cmp	local06, local10 wc
19ed4     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
19ed8     2C 00 90 1D |  if_a	jmp	#LR__2410
19edc     16 27 12 32 |  if_ae	cmp	local05, local08 wc
19ee0     24 00 90 3D |  if_ae	jmp	#LR__2410
19ee4     13 37 02 F6 | 	mov	local13, local05
19ee8     16 27 02 F6 | 	mov	local05, local08
19eec     1B 2D 02 F6 | 	mov	local08, local13
19ef0     14 37 02 F6 | 	mov	local13, local06
19ef4     18 29 02 F6 | 	mov	local06, local10
19ef8     1B 31 02 F6 | 	mov	local10, local13
19efc     12 37 02 F6 | 	mov	local13, local04
19f00     15 25 02 F6 | 	mov	local04, local07
19f04     1B 2B 02 F6 | 	mov	local07, local13
19f08                 | LR__2410
19f08     FF 28 0E F2 | 	cmp	local06, #255 wz
19f0c     70 01 90 AD |  if_e	jmp	#LR__2425
19f10     00 28 0E F2 | 	cmp	local06, #0 wz
19f14     AC 01 90 AD |  if_e	jmp	#LR__2427
19f18     17 26 26 F4 | 	bith	local05, #23
19f1c                 | LR__2411
19f1c     00 30 0E F2 | 	cmp	local10, #0 wz
19f20     F0 01 90 AD |  if_e	jmp	#LR__2431
19f24     17 2C 26 F4 | 	bith	local08, #23
19f28                 | LR__2412
19f28     7F 28 86 F1 | 	sub	local06, #127
19f2c     7F 30 86 F1 | 	sub	local10, #127
19f30     14 39 02 F6 | 	mov	local14, local06
19f34     18 39 82 F1 | 	sub	local14, local10
19f38     97 14 48 FB | 	callpa	#(@LR__2414-@LR__2413)>>2,fcache_load_ptr_
19f3c                 | LR__2413
19f3c     20 38 56 F2 | 	cmps	local14, #32 wc
19f40     20 00 90 CD |  if_b	jmp	#LR__2415
19f44     16 2F 02 F6 | 	mov	local09, local08
19f48     00 32 0E F2 | 	cmp	local11, #0 wz
19f4c     6F 32 62 FD | 	wrnz	local11
19f50     19 2F 42 F5 | 	or	local09, local11
19f54     17 33 02 F6 | 	mov	local11, local09
19f58     00 2C 06 F6 | 	mov	local08, #0
19f5c     20 38 86 F1 | 	sub	local14, #32
19f60     D8 FF 9F FD | 	jmp	#LR__2413
19f64                 | LR__2414
19f64                 | LR__2415
19f64     00 38 0E F2 | 	cmp	local14, #0 wz
19f68     38 00 90 AD |  if_e	jmp	#LR__2416
19f6c     16 37 02 F6 | 	mov	local13, local08
19f70     20 30 06 F6 | 	mov	local10, #32
19f74     1C 31 82 F1 | 	sub	local10, local14
19f78     18 37 62 F0 | 	shl	local13, local10
19f7c     19 31 02 F6 | 	mov	local10, local11
19f80     20 2E 06 F6 | 	mov	local09, #32
19f84     1C 2F 82 F1 | 	sub	local09, local14
19f88     17 31 6A F0 | 	shl	local10, local09 wz
19f8c     1C 33 42 F0 | 	shr	local11, local14
19f90     1C 2D 42 F0 | 	shr	local08, local14
19f94     1B 33 42 F5 | 	or	local11, local13
19f98     00 3A 06 F6 | 	mov	local15, #0
19f9c     01 3A 06 56 |  if_ne	mov	local15, #1
19fa0     1D 33 42 F5 | 	or	local11, local15
19fa4                 | LR__2416
19fa4     12 3B 02 F6 | 	mov	local15, local04
19fa8     15 3B 62 F5 | 	xor	local15, local07
19fac     01 3A CE F7 | 	test	local15, #1 wz
19fb0     18 00 90 AD |  if_e	jmp	#LR__2417
19fb4     16 2D 22 F6 | 	not	local08, local08
19fb8     19 33 22 F6 | 	not	local11, local11
19fbc     01 32 0E F1 | 	add	local11, #1 wz
19fc0     00 3A 06 F6 | 	mov	local15, #0
19fc4     01 3A 06 A6 |  if_e	mov	local15, #1
19fc8     1D 2D 02 F1 | 	add	local08, local15
19fcc                 | LR__2417
19fcc     19 35 12 F1 | 	add	local12, local11 wc
19fd0     16 27 22 F1 | 	addx	local05, local08
19fd4     00 26 56 F2 | 	cmps	local05, #0 wc
19fd8     1C 00 90 3D |  if_ae	jmp	#LR__2418
19fdc     01 24 66 F5 | 	xor	local04, #1
19fe0     13 27 22 F6 | 	not	local05, local05
19fe4     1A 35 22 F6 | 	not	local12, local12
19fe8     01 34 0E F1 | 	add	local12, #1 wz
19fec     00 3A 06 F6 | 	mov	local15, #0
19ff0     01 3A 06 A6 |  if_e	mov	local15, #1
19ff4     1D 27 02 F1 | 	add	local05, local15
19ff8                 | LR__2418
19ff8     00 80 00 FF 
19ffc     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1a000     28 00 90 CD |  if_b	jmp	#LR__2419
1a004     01 28 06 F1 | 	add	local06, #1
1a008     1A 39 02 F6 | 	mov	local14, local12
1a00c     01 38 06 F5 | 	and	local14, #1
1a010     01 34 46 F0 | 	shr	local12, #1
1a014     13 3B 02 F6 | 	mov	local15, local05
1a018     1F 3A 66 F0 | 	shl	local15, #31
1a01c     1D 35 42 F5 | 	or	local12, local15
1a020     1C 35 42 F5 | 	or	local12, local14
1a024     01 26 46 F0 | 	shr	local05, #1
1a028     3C 00 90 FD | 	jmp	#LR__2424
1a02c                 | LR__2419
1a02c     00 40 00 FF 
1a030     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1a034     30 00 90 3D |  if_ae	jmp	#LR__2423
1a038     00 26 0E F2 | 	cmp	local05, #0 wz
1a03c     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1a040     08 24 46 A5 |  if_e	or	local04, #8
1a044     01 24 26 A5 |  if_e	andn	local04, #1
1a048     1C 00 90 AD |  if_e	jmp	#LR__2422
1a04c                 | LR__2420
1a04c     00 40 00 FF 
1a050     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1a054     10 00 90 3D |  if_ae	jmp	#LR__2421
1a058     1A 35 12 F1 | 	add	local12, local12 wc
1a05c     13 27 22 F1 | 	addx	local05, local05
1a060     01 28 86 F1 | 	sub	local06, #1
1a064     E4 FF 9F FD | 	jmp	#LR__2420
1a068                 | LR__2421
1a068                 | LR__2422
1a068                 | LR__2423
1a068                 | LR__2424
1a068     13 13 02 F6 | 	mov	arg01, local05
1a06c     1A 15 02 F6 | 	mov	arg02, local12
1a070     14 17 02 F6 | 	mov	arg03, local06
1a074     12 19 02 F6 | 	mov	arg04, local04
1a078     A0 30 B0 FD | 	call	#__system__pack_0449
1a07c     DC 00 90 FD | 	jmp	#LR__2435
1a080                 | LR__2425
1a080     FF 30 0E F2 | 	cmp	local10, #255 wz
1a084     10 00 90 5D |  if_ne	jmp	#LR__2426
1a088     12 2B 0A F2 | 	cmp	local07, local04 wz
1a08c     00 F8 3F 5F 
1a090     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1a094     C4 00 90 5D |  if_ne	jmp	#LR__2435
1a098                 | LR__2426
1a098     00 26 0E F2 | 	cmp	local05, #0 wz
1a09c     00 F8 3F 5F 
1a0a0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1a0a4     B4 00 90 5D |  if_ne	jmp	#LR__2435
1a0a8     1A 15 02 F6 | 	mov	arg02, local12
1a0ac     14 17 02 F6 | 	mov	arg03, local06
1a0b0     12 19 02 F6 | 	mov	arg04, local04
1a0b4     02 18 46 F5 | 	or	arg04, #2
1a0b8     13 13 02 F6 | 	mov	arg01, local05
1a0bc     5C 30 B0 FD | 	call	#__system__pack_0449
1a0c0     98 00 90 FD | 	jmp	#LR__2435
1a0c4                 | LR__2427
1a0c4     00 26 0E F2 | 	cmp	local05, #0 wz
1a0c8     28 00 90 AD |  if_e	jmp	#LR__2430
1a0cc     01 26 66 F0 | 	shl	local05, #1
1a0d0     97 0E 48 FB | 	callpa	#(@LR__2429-@LR__2428)>>2,fcache_load_ptr_
1a0d4                 | LR__2428
1a0d4     00 40 00 FF 
1a0d8     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1a0dc     14 3B 02 C6 |  if_b	mov	local15, local06
1a0e0     01 3A 86 C1 |  if_b	sub	local15, #1
1a0e4     1D 29 02 C6 |  if_b	mov	local06, local15
1a0e8     01 26 66 C0 |  if_b	shl	local05, #1
1a0ec     E4 FF 9F CD |  if_b	jmp	#LR__2428
1a0f0                 | LR__2429
1a0f0     28 FE 9F FD | 	jmp	#LR__2411
1a0f4                 | LR__2430
1a0f4     15 25 02 F5 | 	and	local04, local07
1a0f8     12 19 02 F6 | 	mov	arg04, local04
1a0fc     08 18 46 F5 | 	or	arg04, #8
1a100     00 12 06 F6 | 	mov	arg01, #0
1a104     00 14 06 F6 | 	mov	arg02, #0
1a108     00 16 06 F6 | 	mov	arg03, #0
1a10c     0C 30 B0 FD | 	call	#__system__pack_0449
1a110     48 00 90 FD | 	jmp	#LR__2435
1a114                 | LR__2431
1a114     00 2C 0E F2 | 	cmp	local08, #0 wz
1a118     28 00 90 AD |  if_e	jmp	#LR__2434
1a11c     01 2C 66 F0 | 	shl	local08, #1
1a120     97 0E 48 FB | 	callpa	#(@LR__2433-@LR__2432)>>2,fcache_load_ptr_
1a124                 | LR__2432
1a124     00 40 00 FF 
1a128     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1a12c     18 3B 02 C6 |  if_b	mov	local15, local10
1a130     01 3A 86 C1 |  if_b	sub	local15, #1
1a134     1D 31 02 C6 |  if_b	mov	local10, local15
1a138     01 2C 66 C0 |  if_b	shl	local08, #1
1a13c     E4 FF 9F CD |  if_b	jmp	#LR__2432
1a140                 | LR__2433
1a140     E4 FD 9F FD | 	jmp	#LR__2412
1a144                 | LR__2434
1a144     7F 28 86 F1 | 	sub	local06, #127
1a148     13 13 02 F6 | 	mov	arg01, local05
1a14c     1A 15 02 F6 | 	mov	arg02, local12
1a150     14 17 02 F6 | 	mov	arg03, local06
1a154     12 19 02 F6 | 	mov	arg04, local04
1a158     C0 2F B0 FD | 	call	#__system__pack_0449
1a15c                 | LR__2435
1a15c     A7 F0 03 F6 | 	mov	ptra, fp
1a160     B2 00 A0 FD | 	call	#popregs_
1a164                 | __system___float_add_ret
1a164     2D 00 64 FD | 	ret
1a168                 | 
1a168                 | __system___float_mul
1a168     0B 4A 05 F6 | 	mov	COUNT_, #11
1a16c     A8 00 A0 FD | 	call	#pushregs_
1a170     09 1F 02 F6 | 	mov	local01, arg01
1a174     0A 21 02 F6 | 	mov	local02, arg02
1a178     0F 23 02 F6 | 	mov	local03, local01
1a17c     11 25 02 F6 | 	mov	local04, local03
1a180     16 24 46 F7 | 	zerox	local04, #22
1a184     11 27 02 F6 | 	mov	local05, local03
1a188     01 26 66 F0 | 	shl	local05, #1
1a18c     18 26 46 F0 | 	shr	local05, #24
1a190     1F 22 46 F0 | 	shr	local03, #31
1a194     10 FB 01 F6 | 	mov	result1, local02
1a198     FD 28 02 F6 | 	mov	local06, result1
1a19c     14 2B 02 F6 | 	mov	local07, local06
1a1a0     16 2A 46 F7 | 	zerox	local07, #22
1a1a4     14 2D 02 F6 | 	mov	local08, local06
1a1a8     01 2C 66 F0 | 	shl	local08, #1
1a1ac     18 2C 46 F0 | 	shr	local08, #24
1a1b0     1F 28 46 F0 | 	shr	local06, #31
1a1b4     14 23 62 F5 | 	xor	local03, local06
1a1b8     FF 26 0E F2 | 	cmp	local05, #255 wz
1a1bc     90 00 90 AD |  if_e	jmp	#LR__2443
1a1c0     FF 2C 0E F2 | 	cmp	local08, #255 wz
1a1c4     D8 00 90 AD |  if_e	jmp	#LR__2445
1a1c8     00 26 0E F2 | 	cmp	local05, #0 wz
1a1cc     0C 01 90 AD |  if_e	jmp	#LR__2446
1a1d0     17 24 26 F4 | 	bith	local04, #23
1a1d4                 | LR__2440
1a1d4     00 2C 0E F2 | 	cmp	local08, #0 wz
1a1d8     44 01 90 AD |  if_e	jmp	#LR__2450
1a1dc     17 2A 26 F4 | 	bith	local07, #23
1a1e0                 | LR__2441
1a1e0     12 21 02 F6 | 	mov	local02, local04
1a1e4     04 20 66 F0 | 	shl	local02, #4
1a1e8     15 29 02 F6 | 	mov	local06, local07
1a1ec     05 28 66 F0 | 	shl	local06, #5
1a1f0     14 21 02 FD | 	qmul	local02, local06
1a1f4     16 27 02 F1 | 	add	local05, local08
1a1f8     FE 26 86 F1 | 	sub	local05, #254
1a1fc     13 2F 02 F6 | 	mov	local09, local05
1a200     04 24 66 F0 | 	shl	local04, #4
1a204     05 2A 66 F0 | 	shl	local07, #5
1a208     18 30 62 FD | 	getqx	local10
1a20c     15 25 02 FD | 	qmul	local04, local07
1a210     19 32 62 FD | 	getqy	local11
1a214     00 80 00 FF 
1a218     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1a21c     18 00 90 CD |  if_b	jmp	#LR__2442
1a220     01 2E 06 F1 | 	add	local09, #1
1a224     01 30 46 F0 | 	shr	local10, #1
1a228     19 2D 02 F6 | 	mov	local08, local11
1a22c     1F 2C 66 F0 | 	shl	local08, #31
1a230     16 31 42 F5 | 	or	local10, local08
1a234     01 32 46 F0 | 	shr	local11, #1
1a238                 | LR__2442
1a238     19 13 02 F6 | 	mov	arg01, local11
1a23c     18 15 02 F6 | 	mov	arg02, local10
1a240     17 17 02 F6 | 	mov	arg03, local09
1a244     11 19 02 F6 | 	mov	arg04, local03
1a248     D0 2E B0 FD | 	call	#__system__pack_0449
1a24c     10 01 90 FD | 	jmp	#LR__2454
1a250                 | LR__2443
1a250     00 24 0E F2 | 	cmp	local04, #0 wz
1a254     0F FB 01 56 |  if_ne	mov	result1, local01
1a258     04 01 90 5D |  if_ne	jmp	#LR__2454
1a25c     FF 2C 56 F2 | 	cmps	local08, #255 wc
1a260     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
1a264     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
1a268     18 00 90 4D |  if_c_and_nz	jmp	#LR__2444
1a26c     00 F8 3F CF 
1a270     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
1a274     E8 00 90 CD |  if_b	jmp	#LR__2454
1a278     00 2A 0E F2 | 	cmp	local07, #0 wz
1a27c     10 FB 01 56 |  if_ne	mov	result1, local02
1a280     DC 00 90 5D |  if_ne	jmp	#LR__2454
1a284                 | LR__2444
1a284     02 22 46 F5 | 	or	local03, #2
1a288     00 12 06 F6 | 	mov	arg01, #0
1a28c     00 14 06 F6 | 	mov	arg02, #0
1a290     13 17 02 F6 | 	mov	arg03, local05
1a294     11 19 02 F6 | 	mov	arg04, local03
1a298     80 2E B0 FD | 	call	#__system__pack_0449
1a29c     C0 00 90 FD | 	jmp	#LR__2454
1a2a0                 | LR__2445
1a2a0     00 26 0E F2 | 	cmp	local05, #0 wz
1a2a4     00 24 0E A2 |  if_e	cmp	local04, #0 wz
1a2a8     00 F8 3F AF 
1a2ac     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1a2b0     AC 00 90 AD |  if_e	jmp	#LR__2454
1a2b4     00 2A 0E F2 | 	cmp	local07, #0 wz
1a2b8     10 FB 01 56 |  if_ne	mov	result1, local02
1a2bc     A0 00 90 5D |  if_ne	jmp	#LR__2454
1a2c0     16 17 02 F6 | 	mov	arg03, local08
1a2c4     11 19 02 F6 | 	mov	arg04, local03
1a2c8     02 18 46 F5 | 	or	arg04, #2
1a2cc     00 12 06 F6 | 	mov	arg01, #0
1a2d0     00 14 06 F6 | 	mov	arg02, #0
1a2d4     44 2E B0 FD | 	call	#__system__pack_0449
1a2d8     84 00 90 FD | 	jmp	#LR__2454
1a2dc                 | LR__2446
1a2dc     00 24 0E F2 | 	cmp	local04, #0 wz
1a2e0     20 00 90 AD |  if_e	jmp	#LR__2449
1a2e4     01 24 66 F0 | 	shl	local04, #1
1a2e8     97 0A 48 FB | 	callpa	#(@LR__2448-@LR__2447)>>2,fcache_load_ptr_
1a2ec                 | LR__2447
1a2ec     00 40 00 FF 
1a2f0     00 24 16 F2 | 	cmp	local04, ##8388608 wc
1a2f4     01 26 86 C1 |  if_b	sub	local05, #1
1a2f8     01 24 66 C0 |  if_b	shl	local04, #1
1a2fc     EC FF 9F CD |  if_b	jmp	#LR__2447
1a300                 | LR__2448
1a300     D0 FE 9F FD | 	jmp	#LR__2440
1a304                 | LR__2449
1a304     08 22 46 F5 | 	or	local03, #8
1a308     00 12 06 F6 | 	mov	arg01, #0
1a30c     00 14 06 F6 | 	mov	arg02, #0
1a310     00 16 06 F6 | 	mov	arg03, #0
1a314     11 19 02 F6 | 	mov	arg04, local03
1a318     00 2E B0 FD | 	call	#__system__pack_0449
1a31c     40 00 90 FD | 	jmp	#LR__2454
1a320                 | LR__2450
1a320     00 2A 0E F2 | 	cmp	local07, #0 wz
1a324     20 00 90 AD |  if_e	jmp	#LR__2453
1a328     01 2A 66 F0 | 	shl	local07, #1
1a32c     97 0A 48 FB | 	callpa	#(@LR__2452-@LR__2451)>>2,fcache_load_ptr_
1a330                 | LR__2451
1a330     00 40 00 FF 
1a334     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
1a338     01 2C 86 C1 |  if_b	sub	local08, #1
1a33c     01 2A 66 C0 |  if_b	shl	local07, #1
1a340     EC FF 9F CD |  if_b	jmp	#LR__2451
1a344                 | LR__2452
1a344     98 FE 9F FD | 	jmp	#LR__2441
1a348                 | LR__2453
1a348     08 22 46 F5 | 	or	local03, #8
1a34c     00 12 06 F6 | 	mov	arg01, #0
1a350     00 14 06 F6 | 	mov	arg02, #0
1a354     00 16 06 F6 | 	mov	arg03, #0
1a358     11 19 02 F6 | 	mov	arg04, local03
1a35c     BC 2D B0 FD | 	call	#__system__pack_0449
1a360                 | LR__2454
1a360     A7 F0 03 F6 | 	mov	ptra, fp
1a364     B2 00 A0 FD | 	call	#popregs_
1a368                 | __system___float_mul_ret
1a368     2D 00 64 FD | 	ret
1a36c                 | 
1a36c                 | __system___float_div
1a36c     0E 4A 05 F6 | 	mov	COUNT_, #14
1a370     A8 00 A0 FD | 	call	#pushregs_
1a374     09 23 02 F6 | 	mov	local03, arg01
1a378     0A 25 02 F6 | 	mov	local04, arg02
1a37c     11 27 02 F6 | 	mov	local05, local03
1a380     13 29 02 F6 | 	mov	local06, local05
1a384     16 28 46 F7 | 	zerox	local06, #22
1a388     13 2B 02 F6 | 	mov	local07, local05
1a38c     01 2A 66 F0 | 	shl	local07, #1
1a390     18 2A 46 F0 | 	shr	local07, #24
1a394     1F 26 46 F0 | 	shr	local05, #31
1a398     12 FB 01 F6 | 	mov	result1, local04
1a39c     FD 2C 02 F6 | 	mov	local08, result1
1a3a0     16 2F 02 F6 | 	mov	local09, local08
1a3a4     16 2E 46 F7 | 	zerox	local09, #22
1a3a8     16 31 02 F6 | 	mov	local10, local08
1a3ac     01 30 66 F0 | 	shl	local10, #1
1a3b0     18 30 46 F0 | 	shr	local10, #24
1a3b4     1F 2C 46 F0 | 	shr	local08, #31
1a3b8     16 27 62 F5 | 	xor	local05, local08
1a3bc     FF 2A 0E F2 | 	cmp	local07, #255 wz
1a3c0     D4 00 90 AD |  if_e	jmp	#LR__2465
1a3c4     FF 30 0E F2 | 	cmp	local10, #255 wz
1a3c8     04 01 90 AD |  if_e	jmp	#LR__2466
1a3cc     00 2A 0E F2 | 	cmp	local07, #0 wz
1a3d0     24 01 90 AD |  if_e	jmp	#LR__2467
1a3d4     17 28 26 F4 | 	bith	local06, #23
1a3d8                 | LR__2460
1a3d8     00 30 0E F2 | 	cmp	local10, #0 wz
1a3dc     70 01 90 AD |  if_e	jmp	#LR__2471
1a3e0     17 2E 26 F4 | 	bith	local09, #23
1a3e4                 | LR__2461
1a3e4     18 2B 82 F1 | 	sub	local07, local10
1a3e8     15 33 02 F6 | 	mov	local11, local07
1a3ec     14 13 02 F6 | 	mov	arg01, local06
1a3f0     02 12 46 F0 | 	shr	arg01, #2
1a3f4     1E 28 66 F0 | 	shl	local06, #30
1a3f8     14 15 02 F6 | 	mov	arg02, local06
1a3fc     17 17 02 F6 | 	mov	arg03, local09
1a400     28 12 62 FD | 	setq	arg01
1a404     0B 15 12 FD | 	qdiv	arg02, arg03
1a408     00 34 06 F6 | 	mov	local12, #0
1a40c     18 1E 62 FD | 	getqx	local01
1a410     19 FC 61 FD | 	getqy	result2
1a414     FE 20 02 F6 | 	mov	local02, result2
1a418     0F 37 02 F6 | 	mov	local13, local01
1a41c     00 20 4E F2 | 	cmps	local02, #0 wz
1a420     1B 39 02 F6 | 	mov	local14, local13
1a424     19 38 66 F0 | 	shl	local14, #25
1a428     01 34 06 56 |  if_ne	mov	local12, #1
1a42c     1A 39 42 F5 | 	or	local14, local12
1a430     07 36 46 F0 | 	shr	local13, #7
1a434     00 80 00 FF 
1a438     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1a43c     1C 00 90 CD |  if_b	jmp	#LR__2462
1a440     01 32 06 F1 | 	add	local11, #1
1a444     01 38 46 F0 | 	shr	local14, #1
1a448     1B 35 02 F6 | 	mov	local12, local13
1a44c     1F 34 66 F0 | 	shl	local12, #31
1a450     1A 39 42 F5 | 	or	local14, local12
1a454     01 36 46 F0 | 	shr	local13, #1
1a458     24 00 90 FD | 	jmp	#LR__2464
1a45c                 | LR__2462
1a45c     00 40 00 FF 
1a460     00 36 16 F2 | 	cmp	local13, ##8388608 wc
1a464     18 00 90 3D |  if_ae	jmp	#LR__2463
1a468     01 32 86 F1 | 	sub	local11, #1
1a46c     01 36 66 F0 | 	shl	local13, #1
1a470     1C 35 02 F6 | 	mov	local12, local14
1a474     1F 34 46 F0 | 	shr	local12, #31
1a478     1A 37 42 F5 | 	or	local13, local12
1a47c     01 38 66 F0 | 	shl	local14, #1
1a480                 | LR__2463
1a480                 | LR__2464
1a480     1B 13 02 F6 | 	mov	arg01, local13
1a484     1C 15 02 F6 | 	mov	arg02, local14
1a488     19 17 02 F6 | 	mov	arg03, local11
1a48c     13 19 02 F6 | 	mov	arg04, local05
1a490     88 2C B0 FD | 	call	#__system__pack_0449
1a494     F8 00 90 FD | 	jmp	#LR__2475
1a498                 | LR__2465
1a498     00 28 0E F2 | 	cmp	local06, #0 wz
1a49c     11 FB 01 56 |  if_ne	mov	result1, local03
1a4a0     EC 00 90 5D |  if_ne	jmp	#LR__2475
1a4a4     FF 30 0E F2 | 	cmp	local10, #255 wz
1a4a8     00 F8 3F AF 
1a4ac     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1a4b0     DC 00 90 AD |  if_e	jmp	#LR__2475
1a4b4     02 26 46 F5 | 	or	local05, #2
1a4b8     00 12 06 F6 | 	mov	arg01, #0
1a4bc     00 14 06 F6 | 	mov	arg02, #0
1a4c0     15 17 02 F6 | 	mov	arg03, local07
1a4c4     13 19 02 F6 | 	mov	arg04, local05
1a4c8     50 2C B0 FD | 	call	#__system__pack_0449
1a4cc     C0 00 90 FD | 	jmp	#LR__2475
1a4d0                 | LR__2466
1a4d0     00 2E 0E F2 | 	cmp	local09, #0 wz
1a4d4     12 FB 01 56 |  if_ne	mov	result1, local04
1a4d8     B4 00 90 5D |  if_ne	jmp	#LR__2475
1a4dc     13 19 02 F6 | 	mov	arg04, local05
1a4e0     08 18 46 F5 | 	or	arg04, #8
1a4e4     00 12 06 F6 | 	mov	arg01, #0
1a4e8     00 14 06 F6 | 	mov	arg02, #0
1a4ec     00 16 06 F6 | 	mov	arg03, #0
1a4f0     28 2C B0 FD | 	call	#__system__pack_0449
1a4f4     98 00 90 FD | 	jmp	#LR__2475
1a4f8                 | LR__2467
1a4f8     00 28 0E F2 | 	cmp	local06, #0 wz
1a4fc     20 00 90 AD |  if_e	jmp	#LR__2470
1a500     01 28 66 F0 | 	shl	local06, #1
1a504     97 0A 48 FB | 	callpa	#(@LR__2469-@LR__2468)>>2,fcache_load_ptr_
1a508                 | LR__2468
1a508     00 40 00 FF 
1a50c     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1a510     01 2A 86 C1 |  if_b	sub	local07, #1
1a514     01 28 66 C0 |  if_b	shl	local06, #1
1a518     EC FF 9F CD |  if_b	jmp	#LR__2468
1a51c                 | LR__2469
1a51c     B8 FE 9F FD | 	jmp	#LR__2460
1a520                 | LR__2470
1a520     00 30 0E F2 | 	cmp	local10, #0 wz
1a524     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
1a528     00 F8 3F AF 
1a52c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1a530     5C 00 90 AD |  if_e	jmp	#LR__2475
1a534     13 19 02 F6 | 	mov	arg04, local05
1a538     08 18 46 F5 | 	or	arg04, #8
1a53c     00 12 06 F6 | 	mov	arg01, #0
1a540     00 14 06 F6 | 	mov	arg02, #0
1a544     00 16 06 F6 | 	mov	arg03, #0
1a548     D0 2B B0 FD | 	call	#__system__pack_0449
1a54c     40 00 90 FD | 	jmp	#LR__2475
1a550                 | LR__2471
1a550     00 2E 0E F2 | 	cmp	local09, #0 wz
1a554     20 00 90 AD |  if_e	jmp	#LR__2474
1a558     01 2E 66 F0 | 	shl	local09, #1
1a55c     97 0A 48 FB | 	callpa	#(@LR__2473-@LR__2472)>>2,fcache_load_ptr_
1a560                 | LR__2472
1a560     00 40 00 FF 
1a564     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
1a568     01 30 86 C1 |  if_b	sub	local10, #1
1a56c     01 2E 66 C0 |  if_b	shl	local09, #1
1a570     EC FF 9F CD |  if_b	jmp	#LR__2472
1a574                 | LR__2473
1a574     6C FE 9F FD | 	jmp	#LR__2461
1a578                 | LR__2474
1a578     02 26 46 F5 | 	or	local05, #2
1a57c     00 12 06 F6 | 	mov	arg01, #0
1a580     00 14 06 F6 | 	mov	arg02, #0
1a584     00 16 06 F6 | 	mov	arg03, #0
1a588     13 19 02 F6 | 	mov	arg04, local05
1a58c     8C 2B B0 FD | 	call	#__system__pack_0449
1a590                 | LR__2475
1a590     A7 F0 03 F6 | 	mov	ptra, fp
1a594     B2 00 A0 FD | 	call	#popregs_
1a598                 | __system___float_div_ret
1a598     2D 00 64 FD | 	ret
1a59c                 | 
1a59c                 | __system___float_cmp
1a59c     00 C0 3F FF 
1a5a0     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
1a5a4     00 C0 3F CF 
1a5a8     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
1a5ac     0B FB 01 36 |  if_ae	mov	result1, arg03
1a5b0     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1a5b4     00 C0 7F FF 
1a5b8     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
1a5bc     00 C0 7F CF 
1a5c0     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
1a5c4     0B FB 01 36 |  if_ae	mov	result1, arg03
1a5c8     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1a5cc     00 12 56 F2 | 	cmps	arg01, #0 wc
1a5d0     2C 00 90 3D |  if_ae	jmp	#LR__2480
1a5d4     00 14 56 F2 | 	cmps	arg02, #0 wc
1a5d8     0A FB 01 C6 |  if_b	mov	result1, arg02
1a5dc     09 FB 81 C1 |  if_b	sub	result1, arg01
1a5e0     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
1a5e4     00 14 0E F2 | 	cmp	arg02, #0 wz
1a5e8     00 00 40 AF 
1a5ec     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1a5f0     00 FA 05 A6 |  if_e	mov	result1, #0
1a5f4     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1a5f8     01 FA 65 F6 | 	neg	result1, #1
1a5fc     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1a600                 | LR__2480
1a600     00 14 56 F2 | 	cmps	arg02, #0 wc
1a604     1C 00 90 3D |  if_ae	jmp	#LR__2481
1a608     00 12 0E F2 | 	cmp	arg01, #0 wz
1a60c     00 00 40 AF 
1a610     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
1a614     00 FA 05 A6 |  if_e	mov	result1, #0
1a618     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1a61c     01 FA 05 F6 | 	mov	result1, #1
1a620     08 00 90 FD | 	jmp	#__system___float_cmp_ret
1a624                 | LR__2481
1a624     0A 13 82 F1 | 	sub	arg01, arg02
1a628     09 FB 01 F6 | 	mov	result1, arg01
1a62c                 | __system___float_cmp_ret
1a62c     2D 00 64 FD | 	ret
1a630                 | 
1a630                 | __system___float_tointeger
1a630     02 4A 05 F6 | 	mov	COUNT_, #2
1a634     A8 00 A0 FD | 	call	#pushregs_
1a638     50 00 B0 FD | 	call	#__system___float_Unpack
1a63c     FF FF 7F FF 
1a640     FF FD 55 F2 | 	cmps	result2, ##-1 wc
1a644     34 00 90 CD |  if_b	jmp	#LR__2490
1a648     1F FC 55 F2 | 	cmps	result2, #31 wc
1a64c     2C 00 90 3D |  if_ae	jmp	#LR__2490
1a650     02 FE 65 F0 | 	shl	result3, #2
1a654     1E 1E 06 F6 | 	mov	local01, #30
1a658     FE 1E 82 F1 | 	sub	local01, result2
1a65c     0F FF 41 F0 | 	shr	result3, local01
1a660     FF 20 02 F6 | 	mov	local02, result3
1a664     0A 21 02 F1 | 	add	local02, arg02
1a668     01 20 46 F0 | 	shr	local02, #1
1a66c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a670     10 21 62 56 |  if_ne	neg	local02, local02
1a674     10 FB 01 F6 | 	mov	result1, local02
1a678     04 00 90 FD | 	jmp	#LR__2491
1a67c                 | LR__2490
1a67c     00 FA 05 F6 | 	mov	result1, #0
1a680                 | LR__2491
1a680     A7 F0 03 F6 | 	mov	ptra, fp
1a684     B2 00 A0 FD | 	call	#popregs_
1a688                 | __system___float_tointeger_ret
1a688     2D 00 64 FD | 	ret
1a68c                 | 
1a68c                 | __system___float_Unpack
1a68c     09 01 02 F6 | 	mov	_var01, arg01
1a690     1F 00 46 F0 | 	shr	_var01, #31
1a694     09 03 02 F6 | 	mov	_var02, arg01
1a698     01 02 66 F0 | 	shl	_var02, #1
1a69c     18 02 4E F0 | 	shr	_var02, #24 wz
1a6a0     17 13 06 F4 | 	bitl	arg01, #279
1a6a4     06 12 66 50 |  if_ne	shl	arg01, #6
1a6a8     1D 12 26 54 |  if_ne	bith	arg01, #29
1a6ac     1C 00 90 5D |  if_ne	jmp	#LR__2500
1a6b0     09 05 92 F7 | 	encod	_var03, arg01 wc
1a6b4     01 04 06 C1 |  if_b	add	_var03, #1
1a6b8     17 04 86 F1 | 	sub	_var03, #23
1a6bc     02 03 02 F6 | 	mov	_var02, _var03
1a6c0     07 FC 05 F6 | 	mov	result2, #7
1a6c4     02 FD 81 F1 | 	sub	result2, _var03
1a6c8     FE 12 62 F0 | 	shl	arg01, result2
1a6cc                 | LR__2500
1a6cc     7F 02 86 F1 | 	sub	_var02, #127
1a6d0     09 FF 01 F6 | 	mov	result3, arg01
1a6d4     00 FB 01 F6 | 	mov	result1, _var01
1a6d8     01 FD 01 F6 | 	mov	result2, _var02
1a6dc                 | __system___float_Unpack_ret
1a6dc     2D 00 64 FD | 	ret
1a6e0                 | 
1a6e0                 | __system___float_Pack
1a6e0     00 00 06 F6 | 	mov	_var01, #0
1a6e4     00 16 0E F2 | 	cmp	arg03, #0 wz
1a6e8     8C 00 90 AD |  if_e	jmp	#LR__2511
1a6ec     0B 03 92 F7 | 	encod	_var02, arg03 wc
1a6f0     01 02 06 C1 |  if_b	add	_var02, #1
1a6f4     21 00 06 F6 | 	mov	_var01, #33
1a6f8     01 01 82 F1 | 	sub	_var01, _var02
1a6fc     00 17 62 F0 | 	shl	arg03, _var01
1a700     03 02 06 F6 | 	mov	_var02, #3
1a704     00 03 82 F1 | 	sub	_var02, _var01
1a708     01 15 02 F1 | 	add	arg02, _var02
1a70c     0A 05 02 F6 | 	mov	_var03, arg02
1a710     00 17 06 F1 | 	add	arg03, #256
1a714     0B 03 02 F6 | 	mov	_var02, arg03
1a718     FF 02 2E F5 | 	andn	_var02, #255 wz
1a71c     01 04 06 A1 |  if_e	add	_var03, #1
1a720     7F 04 06 F1 | 	add	_var03, #127
1a724     FF FF 7F FF 
1a728     E9 05 46 F3 | 	fges	_var03, ##-23
1a72c     FF 04 66 F3 | 	fles	_var03, #255
1a730     01 04 56 F2 | 	cmps	_var03, #1 wc
1a734     1C 00 90 3D |  if_ae	jmp	#LR__2510
1a738     01 16 46 F0 | 	shr	arg03, #1
1a73c     1F 02 C6 F9 | 	decod	_var02, #31
1a740     0B 03 02 F1 | 	add	_var02, arg03
1a744     02 05 62 F6 | 	neg	_var03, _var03
1a748     02 03 42 F0 | 	shr	_var02, _var03
1a74c     01 17 02 F6 | 	mov	arg03, _var02
1a750     00 04 06 F6 | 	mov	_var03, #0
1a754                 | LR__2510
1a754     09 FB 01 F6 | 	mov	result1, arg01
1a758     1F FA 65 F0 | 	shl	result1, #31
1a75c     02 03 02 F6 | 	mov	_var02, _var03
1a760     17 02 66 F0 | 	shl	_var02, #23
1a764     01 FB 41 F5 | 	or	result1, _var02
1a768     0B 07 02 F6 | 	mov	_var04, arg03
1a76c     09 06 46 F0 | 	shr	_var04, #9
1a770     03 FB 41 F5 | 	or	result1, _var04
1a774     04 00 90 FD | 	jmp	#__system___float_Pack_ret
1a778                 | LR__2511
1a778     00 FB 01 F6 | 	mov	result1, _var01
1a77c                 | __system___float_Pack_ret
1a77c     2D 00 64 FD | 	ret
1a780                 | 
1a780                 | __system___basic_print_float
1a780     05 4A 05 F6 | 	mov	COUNT_, #5
1a784     A8 00 A0 FD | 	call	#pushregs_
1a788     09 1F 02 F6 | 	mov	local01, arg01
1a78c     0A 21 02 F6 | 	mov	local02, arg02
1a790     0B 23 0A F6 | 	mov	local03, arg03 wz
1a794     0C 25 02 F6 | 	mov	local04, arg04
1a798     14 00 90 5D |  if_ne	jmp	#LR__2520
1a79c     23 24 0E F2 | 	cmp	local04, #35 wz
1a7a0     80 02 10 AF 
1a7a4     00 26 06 A6 |  if_e	mov	local05, ##537198592
1a7a8     1D 26 C6 59 |  if_ne	decod	local05, #29
1a7ac     13 23 02 F6 | 	mov	local03, local05
1a7b0                 | LR__2520
1a7b0     0F 13 02 F6 | 	mov	arg01, local01
1a7b4     30 25 B0 FD | 	call	#__system___gettxfunc
1a7b8     FD 26 0A F6 | 	mov	local05, result1 wz
1a7bc     00 FA 05 A6 |  if_e	mov	result1, #0
1a7c0     13 13 02 56 |  if_ne	mov	arg01, local05
1a7c4     11 15 02 56 |  if_ne	mov	arg02, local03
1a7c8     10 17 02 56 |  if_ne	mov	arg03, local02
1a7cc     12 19 02 56 |  if_ne	mov	arg04, local04
1a7d0     68 E1 BF 5D |  if_ne	call	#__system___fmtfloat
1a7d4     A7 F0 03 F6 | 	mov	ptra, fp
1a7d8     B2 00 A0 FD | 	call	#popregs_
1a7dc                 | __system___basic_print_float_ret
1a7dc     2D 00 64 FD | 	ret
1a7e0                 | 
1a7e0                 | __system____builtin_atoi
1a7e0     07 4A 05 F6 | 	mov	COUNT_, #7
1a7e4     A8 00 A0 FD | 	call	#pushregs_
1a7e8                 | __system____builtin_atoi_enter
1a7e8     09 1F 02 F6 | 	mov	local01, arg01
1a7ec     0A 21 02 F6 | 	mov	local02, arg02
1a7f0     00 22 06 F6 | 	mov	local03, #0
1a7f4     00 24 06 F6 | 	mov	local04, #0
1a7f8     00 26 06 F6 | 	mov	local05, #0
1a7fc     97 08 48 FB | 	callpa	#(@LR__2531-@LR__2530)>>2,fcache_load_ptr_
1a800                 | LR__2530
1a800     0F 29 C2 FA | 	rdbyte	local06, local01
1a804     20 28 0E F2 | 	cmp	local06, #32 wz
1a808     01 1E 06 A1 |  if_e	add	local01, #1
1a80c     F0 FF 9F AD |  if_e	jmp	#LR__2530
1a810                 | LR__2531
1a810     0F 2B C2 FA | 	rdbyte	local07, local01
1a814                 | LR__2532
1a814     2D 2A 0E F2 | 	cmp	local07, #45 wz
1a818     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
1a81c     18 00 90 5D |  if_ne	jmp	#LR__2533
1a820     01 1E 06 F1 | 	add	local01, #1
1a824     2D 2A 0E F2 | 	cmp	local07, #45 wz
1a828     01 28 06 A6 |  if_e	mov	local06, #1
1a82c     14 27 C2 A2 |  if_e	subr	local05, local06
1a830     0F 2B C2 FA | 	rdbyte	local07, local01
1a834     DC FF 9F FD | 	jmp	#LR__2532
1a838                 | LR__2533
1a838     97 48 48 FB | 	callpa	#(@LR__2541-@LR__2534)>>2,fcache_load_ptr_
1a83c                 | LR__2534
1a83c                 | LR__2535
1a83c     0F 2B C2 FA | 	rdbyte	local07, local01
1a840     5F 2A 0E F2 | 	cmp	local07, #95 wz
1a844     01 1E 06 F1 | 	add	local01, #1
1a848     F0 FF 9F AD |  if_e	jmp	#LR__2535
1a84c     30 2A 0E F2 | 	cmp	local07, #48 wz
1a850     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
1a854     00 24 06 A6 |  if_e	mov	local04, #0
1a858     60 00 90 AD |  if_e	jmp	#LR__2540
1a85c     31 2A 56 F2 | 	cmps	local07, #49 wc
1a860     18 00 90 CD |  if_b	jmp	#LR__2536
1a864     3A 2A 56 F2 | 	cmps	local07, #58 wc
1a868     15 25 02 C6 |  if_b	mov	local04, local07
1a86c     30 24 86 C1 |  if_b	sub	local04, #48
1a870     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1a874     0A 20 06 86 |  if_c_and_z	mov	local02, #10
1a878     40 00 90 CD |  if_b	jmp	#LR__2539
1a87c                 | LR__2536
1a87c     0B 20 56 F2 | 	cmps	local02, #11 wc
1a880     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
1a884     14 00 90 CD |  if_b	jmp	#LR__2537
1a888     67 2A 56 F2 | 	cmps	local07, #103 wc
1a88c     61 2A 86 C1 |  if_b	sub	local07, #97
1a890     0A 24 06 C6 |  if_b	mov	local04, #10
1a894     15 25 02 C1 |  if_b	add	local04, local07
1a898     20 00 90 CD |  if_b	jmp	#LR__2538
1a89c                 | LR__2537
1a89c     0B 20 56 F2 | 	cmps	local02, #11 wc
1a8a0     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
1a8a4     24 00 90 CD |  if_b	jmp	#LR__2542
1a8a8     47 2A 56 F2 | 	cmps	local07, #71 wc
1a8ac     41 2A 86 C1 |  if_b	sub	local07, #65
1a8b0     0A 24 06 C6 |  if_b	mov	local04, #10
1a8b4     15 25 02 C1 |  if_b	add	local04, local07
1a8b8     10 00 90 3D |  if_ae	jmp	#LR__2542
1a8bc                 | LR__2538
1a8bc                 | LR__2539
1a8bc                 | LR__2540
1a8bc     11 21 02 FD | 	qmul	local02, local03
1a8c0     18 22 62 FD | 	getqx	local03
1a8c4     12 23 02 F1 | 	add	local03, local04
1a8c8     70 FF 9F FD | 	jmp	#LR__2534
1a8cc                 | LR__2541
1a8cc                 | LR__2542
1a8cc     00 20 0E F2 | 	cmp	local02, #0 wz
1a8d0     64 00 90 5D |  if_ne	jmp	#LR__2548
1a8d4     78 2A 0E F2 | 	cmp	local07, #120 wz
1a8d8     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
1a8dc     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
1a8e0     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
1a8e4     14 00 90 5D |  if_ne	jmp	#LR__2543
1a8e8     0F 13 02 F6 | 	mov	arg01, local01
1a8ec     10 14 06 F6 | 	mov	arg02, #16
1a8f0     EC FE BF FD | 	call	#__system____builtin_atoi
1a8f4     FD 22 02 F6 | 	mov	local03, result1
1a8f8     3C 00 90 FD | 	jmp	#LR__2547
1a8fc                 | LR__2543
1a8fc     62 2A 0E F2 | 	cmp	local07, #98 wz
1a900     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
1a904     14 00 90 5D |  if_ne	jmp	#LR__2544
1a908     0F 13 02 F6 | 	mov	arg01, local01
1a90c     02 14 06 F6 | 	mov	arg02, #2
1a910     CC FE BF FD | 	call	#__system____builtin_atoi
1a914     FD 22 02 F6 | 	mov	local03, result1
1a918     1C 00 90 FD | 	jmp	#LR__2546
1a91c                 | LR__2544
1a91c     6F 2A 0E F2 | 	cmp	local07, #111 wz
1a920     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
1a924     10 00 90 5D |  if_ne	jmp	#LR__2545
1a928     0F 13 02 F6 | 	mov	arg01, local01
1a92c     08 14 06 F6 | 	mov	arg02, #8
1a930     AC FE BF FD | 	call	#__system____builtin_atoi
1a934     FD 22 02 F6 | 	mov	local03, result1
1a938                 | LR__2545
1a938                 | LR__2546
1a938                 | LR__2547
1a938                 | LR__2548
1a938     00 26 0E F2 | 	cmp	local05, #0 wz
1a93c     11 23 62 56 |  if_ne	neg	local03, local03
1a940     11 FB 01 F6 | 	mov	result1, local03
1a944     A7 F0 03 F6 | 	mov	ptra, fp
1a948     B2 00 A0 FD | 	call	#popregs_
1a94c                 | __system____builtin_atoi_ret
1a94c     2D 00 64 FD | 	ret
1a950                 | 
1a950                 | __system____builtin_atof
1a950     07 4A 05 F6 | 	mov	COUNT_, #7
1a954     A8 00 A0 FD | 	call	#pushregs_
1a958     09 1F 02 F6 | 	mov	local01, arg01
1a95c     00 20 06 F6 | 	mov	local02, #0
1a960     00 22 06 F6 | 	mov	local03, #0
1a964     00 24 06 F6 | 	mov	local04, #0
1a968     00 26 06 F6 | 	mov	local05, #0
1a96c     97 08 48 FB | 	callpa	#(@LR__2551-@LR__2550)>>2,fcache_load_ptr_
1a970                 | LR__2550
1a970     0F 17 C2 FA | 	rdbyte	arg03, local01
1a974     20 16 0E F2 | 	cmp	arg03, #32 wz
1a978     01 1E 06 A1 |  if_e	add	local01, #1
1a97c     F0 FF 9F AD |  if_e	jmp	#LR__2550
1a980                 | LR__2551
1a980     0F 29 C2 FA | 	rdbyte	local06, local01
1a984                 | LR__2552
1a984     2B 28 0E F2 | 	cmp	local06, #43 wz
1a988     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1a98c     14 00 90 5D |  if_ne	jmp	#LR__2553
1a990     2D 28 0E F2 | 	cmp	local06, #45 wz
1a994     1F 24 E6 A4 |  if_e	bitnot	local04, #31
1a998     01 1E 06 F1 | 	add	local01, #1
1a99c     0F 29 C2 FA | 	rdbyte	local06, local01
1a9a0     E0 FF 9F FD | 	jmp	#LR__2552
1a9a4                 | LR__2553
1a9a4                 | LR__2554
1a9a4     97 08 48 FB | 	callpa	#(@LR__2556-@LR__2555)>>2,fcache_load_ptr_
1a9a8                 | LR__2555
1a9a8     0F 29 C2 FA | 	rdbyte	local06, local01
1a9ac     5F 28 0E F2 | 	cmp	local06, #95 wz
1a9b0     01 1E 06 F1 | 	add	local01, #1
1a9b4     F0 FF 9F AD |  if_e	jmp	#LR__2555
1a9b8                 | LR__2556
1a9b8     00 28 0E F2 | 	cmp	local06, #0 wz
1a9bc     5C 00 90 AD |  if_e	jmp	#LR__2558
1a9c0     30 28 56 F2 | 	cmps	local06, #48 wc
1a9c4     44 00 90 CD |  if_b	jmp	#LR__2557
1a9c8     3A 28 56 F2 | 	cmps	local06, #58 wc
1a9cc     3C 00 90 3D |  if_ae	jmp	#LR__2557
1a9d0     10 13 02 F6 | 	mov	arg01, local02
1a9d4     00 90 20 FF 
1a9d8     00 14 06 F6 | 	mov	arg02, ##1092616192
1a9dc     88 F7 BF FD | 	call	#__system___float_mul
1a9e0     FD 20 02 F6 | 	mov	local02, result1
1a9e4     30 28 86 F1 | 	sub	local06, #48
1a9e8     14 13 02 F6 | 	mov	arg01, local06
1a9ec     4C F4 BF FD | 	call	#__system___float_fromuns
1a9f0     FD 14 02 F6 | 	mov	arg02, result1
1a9f4     10 13 02 F6 | 	mov	arg01, local02
1a9f8     74 F4 BF FD | 	call	#__system___float_add
1a9fc     FD 20 02 F6 | 	mov	local02, result1
1aa00     00 26 0E F2 | 	cmp	local05, #0 wz
1aa04     01 22 86 51 |  if_ne	sub	local03, #1
1aa08     98 FF 9F FD | 	jmp	#LR__2554
1aa0c                 | LR__2557
1aa0c     2E 28 0E F2 | 	cmp	local06, #46 wz
1aa10     00 26 0E A2 |  if_e	cmp	local05, #0 wz
1aa14     01 26 06 A6 |  if_e	mov	local05, #1
1aa18     88 FF 9F AD |  if_e	jmp	#LR__2554
1aa1c                 | LR__2558
1aa1c     45 28 0E F2 | 	cmp	local06, #69 wz
1aa20     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
1aa24     18 00 90 5D |  if_ne	jmp	#LR__2559
1aa28     0F 13 02 F6 | 	mov	arg01, local01
1aa2c     00 14 06 F6 | 	mov	arg02, #0
1aa30     AC FD BF FD | 	call	#__system____builtin_atoi
1aa34     11 FB 01 F1 | 	add	result1, local03
1aa38     FD 2A 02 F6 | 	mov	local07, result1
1aa3c     04 00 90 FD | 	jmp	#LR__2560
1aa40                 | LR__2559
1aa40     11 2B 02 F6 | 	mov	local07, local03
1aa44                 | LR__2560
1aa44     15 17 02 F6 | 	mov	arg03, local07
1aa48     10 13 02 F6 | 	mov	arg01, local02
1aa4c     00 90 20 FF 
1aa50     00 14 06 F6 | 	mov	arg02, ##1092616192
1aa54     AC 04 B0 FD | 	call	#__system___float_pow_n
1aa58     12 FB 61 F5 | 	xor	result1, local04
1aa5c     A7 F0 03 F6 | 	mov	ptra, fp
1aa60     B2 00 A0 FD | 	call	#popregs_
1aa64                 | __system____builtin_atof_ret
1aa64     2D 00 64 FD | 	ret
1aa68                 | 
1aa68                 | __system____builtin_ilogb
1aa68     20 FC BF FD | 	call	#__system___float_Unpack
1aa6c     00 FE 0D F2 | 	cmp	result3, #0 wz
1aa70     00 00 40 AF 
1aa74     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
1aa78     24 00 90 AD |  if_e	jmp	#LR__2571
1aa7c     80 FC 0D F2 | 	cmp	result2, #128 wz
1aa80     18 00 90 5D |  if_ne	jmp	#LR__2570
1aa84     00 00 10 FF 
1aa88     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1aa8c     1E FA CD A9 |  if_e	bmask	result1, #30
1aa90     0C 00 90 AD |  if_e	jmp	#LR__2571
1aa94     1F FA C5 F9 | 	decod	result1, #31
1aa98     04 00 90 FD | 	jmp	#LR__2571
1aa9c                 | LR__2570
1aa9c     FE FA 01 F6 | 	mov	result1, result2
1aaa0                 | LR__2571
1aaa0                 | __system____builtin_ilogb_ret
1aaa0     2D 00 64 FD | 	ret
1aaa4                 | 
1aaa4                 | __system____builtin_sinf
1aaa4     03 4A 05 F6 | 	mov	COUNT_, #3
1aaa8     A8 00 A0 FD | 	call	#pushregs_
1aaac     09 1F 02 F6 | 	mov	local01, arg01
1aab0     87 64 20 FF 
1aab4     DB 15 06 F6 | 	mov	arg02, ##1086918619
1aab8     B0 F8 BF FD | 	call	#__system___float_div
1aabc     FD 12 02 F6 | 	mov	arg01, result1
1aac0     00 14 06 F6 | 	mov	arg02, #0
1aac4     68 FB BF FD | 	call	#__system___float_tointeger
1aac8     FD 16 0A F6 | 	mov	arg03, result1 wz
1aacc     44 00 90 AD |  if_e	jmp	#LR__2580
1aad0     0B 13 52 F6 | 	abs	arg01, arg03 wc
1aad4     1F 20 C6 C9 |  if_b	decod	local02, #31
1aad8     00 20 06 36 |  if_ae	mov	local02, #0
1aadc     5C F3 BF FD | 	call	#__system___float_fromuns
1aae0     10 FB 61 F5 | 	xor	result1, local02
1aae4     FD 12 02 F6 | 	mov	arg01, result1
1aae8     1E 14 C6 F9 | 	decod	arg02, #30
1aaec     78 F6 BF FD | 	call	#__system___float_mul
1aaf0     FD 12 02 F6 | 	mov	arg01, result1
1aaf4     87 24 20 FF 
1aaf8     DB 15 06 F6 | 	mov	arg02, ##1078530011
1aafc     68 F6 BF FD | 	call	#__system___float_mul
1ab00     FD 14 02 F6 | 	mov	arg02, result1
1ab04     0F 13 02 F6 | 	mov	arg01, local01
1ab08     1F 14 E6 F4 | 	bitnot	arg02, #31
1ab0c     60 F3 BF FD | 	call	#__system___float_add
1ab10     FD 1E 02 F6 | 	mov	local01, result1
1ab14                 | LR__2580
1ab14     0F 13 02 F6 | 	mov	arg01, local01
1ab18     66 E6 1E FF 
1ab1c     CD 14 06 F6 | 	mov	arg02, ##1036831949
1ab20     01 16 06 F6 | 	mov	arg03, #1
1ab24     74 FA BF FD | 	call	#__system___float_cmp
1ab28     00 FA 55 F2 | 	cmps	result1, #0 wc
1ab2c     5C 00 90 3D |  if_ae	jmp	#LR__2581
1ab30     0F 13 02 F6 | 	mov	arg01, local01
1ab34     66 E6 5E FF 
1ab38     CD 14 06 F6 | 	mov	arg02, ##-1110651699
1ab3c     01 16 66 F6 | 	neg	arg03, #1
1ab40     58 FA BF FD | 	call	#__system___float_cmp
1ab44     01 FA 55 F2 | 	cmps	result1, #1 wc
1ab48     40 00 90 CD |  if_b	jmp	#LR__2581
1ab4c     0F 13 02 F6 | 	mov	arg01, local01
1ab50     0F 15 02 F6 | 	mov	arg02, local01
1ab54     10 F6 BF FD | 	call	#__system___float_mul
1ab58     FD 12 02 F6 | 	mov	arg01, result1
1ab5c     0F 15 02 F6 | 	mov	arg02, local01
1ab60     04 F6 BF FD | 	call	#__system___float_mul
1ab64     FD 12 02 F6 | 	mov	arg01, result1
1ab68     00 60 20 FF 
1ab6c     00 14 06 F6 | 	mov	arg02, ##1086324736
1ab70     F8 F7 BF FD | 	call	#__system___float_div
1ab74     FD 14 02 F6 | 	mov	arg02, result1
1ab78     0F 13 02 F6 | 	mov	arg01, local01
1ab7c     1F 14 E6 F4 | 	bitnot	arg02, #31
1ab80     EC F2 BF FD | 	call	#__system___float_add
1ab84     FD 22 02 F6 | 	mov	local03, result1
1ab88     54 00 90 FD | 	jmp	#LR__2582
1ab8c                 | LR__2581
1ab8c     0F 13 02 F6 | 	mov	arg01, local01
1ab90     7C 91 26 FF 
1ab94     83 15 06 F6 | 	mov	arg02, ##1294137731
1ab98     CC F5 BF FD | 	call	#__system___float_mul
1ab9c     FD 12 02 F6 | 	mov	arg01, result1
1aba0     00 14 06 F6 | 	mov	arg02, #0
1aba4     88 FA BF FD | 	call	#__system___float_tointeger
1aba8     02 FA 65 F0 | 	shl	result1, #2
1abac     00 00 A0 FF 
1abb0     FD 00 48 FD | 	qrotate	##1073741824, result1
1abb4     19 12 62 FD | 	getqy	arg01
1abb8     09 13 52 F6 | 	abs	arg01, arg01 wc
1abbc     1F 20 C6 C9 |  if_b	decod	local02, #31
1abc0     00 20 06 36 |  if_ae	mov	local02, #0
1abc4     74 F2 BF FD | 	call	#__system___float_fromuns
1abc8     10 FB 61 F5 | 	xor	result1, local02
1abcc     FD 12 02 F6 | 	mov	arg01, result1
1abd0     00 40 27 FF 
1abd4     00 14 06 F6 | 	mov	arg02, ##1317011456
1abd8     90 F7 BF FD | 	call	#__system___float_div
1abdc     FD 22 02 F6 | 	mov	local03, result1
1abe0                 | LR__2582
1abe0     11 FB 01 F6 | 	mov	result1, local03
1abe4     A7 F0 03 F6 | 	mov	ptra, fp
1abe8     B2 00 A0 FD | 	call	#popregs_
1abec                 | __system____builtin_sinf_ret
1abec     2D 00 64 FD | 	ret
1abf0                 | 
1abf0                 | __system____builtin_exp2f
1abf0     04 4A 05 F6 | 	mov	COUNT_, #4
1abf4     A8 00 A0 FD | 	call	#pushregs_
1abf8     09 1F 02 F6 | 	mov	local01, arg01
1abfc     00 7F 21 FF 
1ac00     00 14 06 F6 | 	mov	arg02, ##1123942400
1ac04     01 16 66 F6 | 	neg	arg03, #1
1ac08     90 F9 BF FD | 	call	#__system___float_cmp
1ac0c     00 FA 55 F2 | 	cmps	result1, #0 wc
1ac10     00 C0 3F 3F 
1ac14     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
1ac18     DC 00 90 3D |  if_ae	jmp	#LR__2591
1ac1c     0F 13 02 F6 | 	mov	arg01, local01
1ac20     00 7F 61 FF 
1ac24     00 14 06 F6 | 	mov	arg02, ##-1023541248
1ac28     01 16 06 F6 | 	mov	arg03, #1
1ac2c     6C F9 BF FD | 	call	#__system___float_cmp
1ac30     00 FA 55 F2 | 	cmps	result1, #0 wc
1ac34     00 FA 05 C6 |  if_b	mov	result1, #0
1ac38     BC 00 90 CD |  if_b	jmp	#LR__2591
1ac3c     0F 13 02 F6 | 	mov	arg01, local01
1ac40     00 14 06 F6 | 	mov	arg02, #0
1ac44     E8 F9 BF FD | 	call	#__system___float_tointeger
1ac48     FD 20 02 F6 | 	mov	local02, result1
1ac4c     10 13 52 F6 | 	abs	arg01, local02 wc
1ac50     1F 22 C6 C9 |  if_b	decod	local03, #31
1ac54     00 22 06 36 |  if_ae	mov	local03, #0
1ac58     E0 F1 BF FD | 	call	#__system___float_fromuns
1ac5c     11 FB 61 F5 | 	xor	result1, local03
1ac60     FD 14 02 F6 | 	mov	arg02, result1
1ac64     0F 13 02 F6 | 	mov	arg01, local01
1ac68     1F 14 E6 F4 | 	bitnot	arg02, #31
1ac6c     00 F2 BF FD | 	call	#__system___float_add
1ac70     FD 24 02 F6 | 	mov	local04, result1
1ac74     12 13 02 F6 | 	mov	arg01, local04
1ac78     00 14 06 F6 | 	mov	arg02, #0
1ac7c     01 16 06 F6 | 	mov	arg03, #1
1ac80     18 F9 BF FD | 	call	#__system___float_cmp
1ac84     00 FA 55 F2 | 	cmps	result1, #0 wc
1ac88     18 00 90 3D |  if_ae	jmp	#LR__2590
1ac8c     12 13 02 F6 | 	mov	arg01, local04
1ac90     00 C0 1F FF 
1ac94     00 14 06 F6 | 	mov	arg02, ##1065353216
1ac98     D4 F1 BF FD | 	call	#__system___float_add
1ac9c     FD 24 02 F6 | 	mov	local04, result1
1aca0     01 20 86 F1 | 	sub	local02, #1
1aca4                 | LR__2590
1aca4     7F 20 06 F1 | 	add	local02, #127
1aca8     17 20 66 F0 | 	shl	local02, #23
1acac     12 13 02 F6 | 	mov	arg01, local04
1acb0     00 80 26 FF 
1acb4     00 14 06 F6 | 	mov	arg02, ##1291845632
1acb8     AC F4 BF FD | 	call	#__system___float_mul
1acbc     FD 12 02 F6 | 	mov	arg01, result1
1acc0     00 14 06 F6 | 	mov	arg02, #0
1acc4     68 F9 BF FD | 	call	#__system___float_tointeger
1acc8     FD 24 0A F6 | 	mov	local04, result1 wz
1accc     10 FB 01 A6 |  if_e	mov	result1, local02
1acd0     24 00 90 AD |  if_e	jmp	#LR__2591
1acd4     3E 24 26 F4 | 	bith	local04, #62
1acd8     0F 24 62 FD | 	qexp	local04
1acdc     10 13 02 F6 | 	mov	arg01, local02
1ace0     18 14 62 FD | 	getqx	arg02
1ace4     01 14 06 F1 | 	add	arg02, #1
1ace8     01 14 46 F0 | 	shr	arg02, #1
1acec     00 80 1F FF 
1acf0     00 14 06 F1 | 	add	arg02, ##1056964608
1acf4     70 F4 BF FD | 	call	#__system___float_mul
1acf8                 | LR__2591
1acf8     A7 F0 03 F6 | 	mov	ptra, fp
1acfc     B2 00 A0 FD | 	call	#popregs_
1ad00                 | __system____builtin_exp2f_ret
1ad00     2D 00 64 FD | 	ret
1ad04                 | 
1ad04                 | __system____builtin_log2f
1ad04     06 4A 05 F6 | 	mov	COUNT_, #6
1ad08     A8 00 A0 FD | 	call	#pushregs_
1ad0c     09 1F 02 F6 | 	mov	local01, arg01
1ad10     09 21 0A F6 | 	mov	local02, arg01 wz
1ad14     00 00 40 5F 
1ad18     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
1ad1c     00 40 00 AF 
1ad20     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1ad24     08 01 90 AD |  if_e	jmp	#LR__2604
1ad28     00 20 56 F2 | 	cmps	local02, #0 wc
1ad2c     00 E0 3F CF 
1ad30     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1ad34     F8 00 90 CD |  if_b	jmp	#LR__2604
1ad38     0F 13 02 F6 | 	mov	arg01, local01
1ad3c     00 90 20 FF 
1ad40     00 14 06 F6 | 	mov	arg02, ##1092616192
1ad44     01 16 06 F6 | 	mov	arg03, #1
1ad48     50 F8 BF FD | 	call	#__system___float_cmp
1ad4c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ad50     4D 2A 20 AF 
1ad54     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
1ad58     D4 00 90 AD |  if_e	jmp	#LR__2604
1ad5c     0F 13 02 F6 | 	mov	arg01, local01
1ad60     FC 16 20 FF 
1ad64     54 14 06 F6 | 	mov	arg02, ##1076754516
1ad68     01 16 06 F6 | 	mov	arg03, #1
1ad6c     2C F8 BF FD | 	call	#__system___float_cmp
1ad70     00 FA 0D F2 | 	cmp	result1, #0 wz
1ad74     55 DC 1F AF 
1ad78     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
1ad7c     B0 00 90 AD |  if_e	jmp	#LR__2604
1ad80     10 23 02 F6 | 	mov	local03, local02
1ad84     17 22 46 F0 | 	shr	local03, #23
1ad88     11 23 E2 F8 | 	getbyte	local03, local03, #0
1ad8c     17 21 06 F4 | 	bitl	local02, #279
1ad90     10 25 02 F6 | 	mov	local04, local02
1ad94     FF 22 0E F2 | 	cmp	local03, #255 wz
1ad98     1C 00 90 5D |  if_ne	jmp	#LR__2600
1ad9c     00 24 0E F2 | 	cmp	local04, #0 wz
1ada0     00 C0 3F 5F 
1ada4     00 26 06 56 |  if_ne	mov	local05, ##2139095040
1ada8     00 E0 3F AF 
1adac     00 26 06 A6 |  if_e	mov	local05, ##2143289344
1adb0     13 FB 01 F6 | 	mov	result1, local05
1adb4     78 00 90 FD | 	jmp	#LR__2604
1adb8                 | LR__2600
1adb8     00 22 0E F2 | 	cmp	local03, #0 wz
1adbc     17 24 26 54 |  if_ne	bith	local04, #23
1adc0     7F 22 86 51 |  if_ne	sub	local03, #127
1adc4     28 00 90 5D |  if_ne	jmp	#LR__2603
1adc8     00 24 0E F2 | 	cmp	local04, #0 wz
1adcc     00 40 00 AF 
1add0     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1add4     58 00 90 AD |  if_e	jmp	#LR__2604
1add8     7E 22 66 F6 | 	neg	local03, #126
1addc     97 08 48 FB | 	callpa	#(@LR__2602-@LR__2601)>>2,fcache_load_ptr_
1ade0                 | LR__2601
1ade0     17 24 2E F4 | 	testbn	local04, #23 wz
1ade4     01 24 66 A0 |  if_e	shl	local04, #1
1ade8     01 22 06 A1 |  if_e	add	local03, #1
1adec     F0 FF 9F AD |  if_e	jmp	#LR__2601
1adf0                 | LR__2602
1adf0                 | LR__2603
1adf0     0E 24 62 FD | 	qlog	local04
1adf4     01 22 86 F1 | 	sub	local03, #1
1adf8     11 13 52 F6 | 	abs	arg01, local03 wc
1adfc     1F 28 C6 C9 |  if_b	decod	local06, #31
1ae00     00 28 06 36 |  if_ae	mov	local06, #0
1ae04     18 26 62 FD | 	getqx	local05
1ae08     9B 26 06 F4 | 	bitl	local05, #155
1ae0c     08 26 06 F1 | 	add	local05, #8
1ae10     04 26 46 F0 | 	shr	local05, #4
1ae14     00 C0 1F FF 
1ae18     00 26 06 F1 | 	add	local05, ##1065353216
1ae1c     1C F0 BF FD | 	call	#__system___float_fromuns
1ae20     14 FB 61 F5 | 	xor	result1, local06
1ae24     FD 14 02 F6 | 	mov	arg02, result1
1ae28     13 13 02 F6 | 	mov	arg01, local05
1ae2c     40 F0 BF FD | 	call	#__system___float_add
1ae30                 | LR__2604
1ae30     A7 F0 03 F6 | 	mov	ptra, fp
1ae34     B2 00 A0 FD | 	call	#popregs_
1ae38                 | __system____builtin_log2f_ret
1ae38     2D 00 64 FD | 	ret
1ae3c                 | 
1ae3c                 | __system____builtin_powf
1ae3c     04 4A 05 F6 | 	mov	COUNT_, #4
1ae40     A8 00 A0 FD | 	call	#pushregs_
1ae44     09 1F 02 F6 | 	mov	local01, arg01
1ae48     0A 21 02 F6 | 	mov	local02, arg02
1ae4c     10 13 02 F6 | 	mov	arg01, local02
1ae50     00 14 06 F6 | 	mov	arg02, #0
1ae54     D8 F7 BF FD | 	call	#__system___float_tointeger
1ae58     FD 22 02 F6 | 	mov	local03, result1
1ae5c     11 13 52 F6 | 	abs	arg01, local03 wc
1ae60     1F 24 C6 C9 |  if_b	decod	local04, #31
1ae64     00 24 06 36 |  if_ae	mov	local04, #0
1ae68     D0 EF BF FD | 	call	#__system___float_fromuns
1ae6c     12 FB 61 F5 | 	xor	result1, local04
1ae70     FD 12 02 F6 | 	mov	arg01, result1
1ae74     10 15 02 F6 | 	mov	arg02, local02
1ae78     01 16 06 F6 | 	mov	arg03, #1
1ae7c     1C F7 BF FD | 	call	#__system___float_cmp
1ae80     00 FA 0D F2 | 	cmp	result1, #0 wz
1ae84     18 00 90 5D |  if_ne	jmp	#LR__2610
1ae88     00 C0 1F FF 
1ae8c     00 12 06 F6 | 	mov	arg01, ##1065353216
1ae90     0F 15 02 F6 | 	mov	arg02, local01
1ae94     11 17 02 F6 | 	mov	arg03, local03
1ae98     68 00 B0 FD | 	call	#__system___float_pow_n
1ae9c     58 00 90 FD | 	jmp	#LR__2611
1aea0                 | LR__2610
1aea0     0F 13 02 F6 | 	mov	arg01, local01
1aea4     00 14 06 F6 | 	mov	arg02, #0
1aea8     01 16 06 F6 | 	mov	arg03, #1
1aeac     EC F6 BF FD | 	call	#__system___float_cmp
1aeb0     00 FA 55 F2 | 	cmps	result1, #0 wc
1aeb4     00 E0 3F CF 
1aeb8     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1aebc     38 00 90 CD |  if_b	jmp	#LR__2611
1aec0     0F 13 02 F6 | 	mov	arg01, local01
1aec4     00 14 06 F6 | 	mov	arg02, #0
1aec8     01 16 06 F6 | 	mov	arg03, #1
1aecc     CC F6 BF FD | 	call	#__system___float_cmp
1aed0     00 FA 0D F2 | 	cmp	result1, #0 wz
1aed4     00 FA 05 A6 |  if_e	mov	result1, #0
1aed8     1C 00 90 AD |  if_e	jmp	#LR__2611
1aedc     0F 13 02 F6 | 	mov	arg01, local01
1aee0     20 FE BF FD | 	call	#__system____builtin_log2f
1aee4     FD 12 02 F6 | 	mov	arg01, result1
1aee8     10 15 02 F6 | 	mov	arg02, local02
1aeec     78 F2 BF FD | 	call	#__system___float_mul
1aef0     FD 12 02 F6 | 	mov	arg01, result1
1aef4     F8 FC BF FD | 	call	#__system____builtin_exp2f
1aef8                 | LR__2611
1aef8     A7 F0 03 F6 | 	mov	ptra, fp
1aefc     B2 00 A0 FD | 	call	#popregs_
1af00                 | __system____builtin_powf_ret
1af00     2D 00 64 FD | 	ret
1af04                 | 
1af04                 | __system___float_pow_n
1af04     05 4A 05 F6 | 	mov	COUNT_, #5
1af08     A8 00 A0 FD | 	call	#pushregs_
1af0c     09 1F 02 F6 | 	mov	local01, arg01
1af10     0A 21 02 F6 | 	mov	local02, arg02
1af14     0B 23 02 F6 | 	mov	local03, arg03
1af18     00 22 56 F2 | 	cmps	local03, #0 wc
1af1c     18 00 90 3D |  if_ae	jmp	#LR__2620
1af20     01 24 06 F6 | 	mov	local04, #1
1af24     11 23 62 F6 | 	neg	local03, local03
1af28     00 22 56 F2 | 	cmps	local03, #0 wc
1af2c     00 FA 05 C6 |  if_b	mov	result1, #0
1af30     94 00 90 CD |  if_b	jmp	#LR__2628
1af34     04 00 90 FD | 	jmp	#LR__2621
1af38                 | LR__2620
1af38     00 24 06 F6 | 	mov	local04, #0
1af3c                 | LR__2621
1af3c     00 C0 1F FF 
1af40     00 26 06 F6 | 	mov	local05, ##1065353216
1af44                 | LR__2622
1af44     01 22 56 F2 | 	cmps	local03, #1 wc
1af48     30 00 90 CD |  if_b	jmp	#LR__2624
1af4c     01 22 CE F7 | 	test	local03, #1 wz
1af50     10 00 90 AD |  if_e	jmp	#LR__2623
1af54     13 13 02 F6 | 	mov	arg01, local05
1af58     10 15 02 F6 | 	mov	arg02, local02
1af5c     08 F2 BF FD | 	call	#__system___float_mul
1af60     FD 26 02 F6 | 	mov	local05, result1
1af64                 | LR__2623
1af64     01 22 C6 F0 | 	sar	local03, #1
1af68     10 13 02 F6 | 	mov	arg01, local02
1af6c     10 15 02 F6 | 	mov	arg02, local02
1af70     F4 F1 BF FD | 	call	#__system___float_mul
1af74     FD 20 02 F6 | 	mov	local02, result1
1af78     C8 FF 9F FD | 	jmp	#LR__2622
1af7c                 | LR__2624
1af7c     00 24 0E F2 | 	cmp	local04, #0 wz
1af80     14 00 90 AD |  if_e	jmp	#LR__2625
1af84     0F 13 02 F6 | 	mov	arg01, local01
1af88     13 15 02 F6 | 	mov	arg02, local05
1af8c     DC F3 BF FD | 	call	#__system___float_div
1af90     FD 26 02 F6 | 	mov	local05, result1
1af94     2C 00 90 FD | 	jmp	#LR__2627
1af98                 | LR__2625
1af98     0F 13 02 F6 | 	mov	arg01, local01
1af9c     00 C0 1F FF 
1afa0     00 14 06 F6 | 	mov	arg02, ##1065353216
1afa4     01 16 06 F6 | 	mov	arg03, #1
1afa8     F0 F5 BF FD | 	call	#__system___float_cmp
1afac     00 FA 0D F2 | 	cmp	result1, #0 wz
1afb0     10 00 90 AD |  if_e	jmp	#LR__2626
1afb4     0F 13 02 F6 | 	mov	arg01, local01
1afb8     13 15 02 F6 | 	mov	arg02, local05
1afbc     A8 F1 BF FD | 	call	#__system___float_mul
1afc0     FD 26 02 F6 | 	mov	local05, result1
1afc4                 | LR__2626
1afc4                 | LR__2627
1afc4     13 FB 01 F6 | 	mov	result1, local05
1afc8                 | LR__2628
1afc8     A7 F0 03 F6 | 	mov	ptra, fp
1afcc     B2 00 A0 FD | 	call	#popregs_
1afd0                 | __system___float_pow_n_ret
1afd0     2D 00 64 FD | 	ret
1afd4                 | 
1afd4                 | __system___gc_ptrs
1afd4     EC 00 02 F6 | 	mov	_var01, __heap_ptr
1afd8     00 03 02 F6 | 	mov	_var02, _var01
1afdc     76 01 00 FF 
1afe0     F8 03 06 F1 | 	add	_var02, ##191992
1afe4     00 FD 09 FB | 	rdlong	result2, _var01 wz
1afe8     74 00 90 5D |  if_ne	jmp	#LR__2630
1afec     01 FD 01 F6 | 	mov	result2, _var02
1aff0     00 FD 81 F1 | 	sub	result2, _var01
1aff4     00 03 58 FC | 	wrword	#1, _var01
1aff8     00 FB 01 F6 | 	mov	result1, _var01
1affc     02 FA 05 F1 | 	add	result1, #2
1b000     36 00 80 FF 
1b004     FD 20 59 FC | 	wrword	##27792, result1
1b008     00 FB 01 F6 | 	mov	result1, _var01
1b00c     04 FA 05 F1 | 	add	result1, #4
1b010     FD 00 58 FC | 	wrword	#0, result1
1b014     00 FB 01 F6 | 	mov	result1, _var01
1b018     06 FA 05 F1 | 	add	result1, #6
1b01c     FD 02 58 FC | 	wrword	#1, result1
1b020     10 00 06 F1 | 	add	_var01, #16
1b024     FE FC 51 F6 | 	abs	result2, result2 wc
1b028     04 FC 45 F0 | 	shr	result2, #4
1b02c     FE FC 81 F6 | 	negc	result2, result2
1b030     00 FD 51 FC | 	wrword	result2, _var01
1b034     00 FD 01 F6 | 	mov	result2, _var01
1b038     02 FC 05 F1 | 	add	result2, #2
1b03c     36 00 80 FF 
1b040     FE 1E 59 FC | 	wrword	##27791, result2
1b044     00 FD 01 F6 | 	mov	result2, _var01
1b048     04 FC 05 F1 | 	add	result2, #4
1b04c     FE 00 58 FC | 	wrword	#0, result2
1b050     00 FD 01 F6 | 	mov	result2, _var01
1b054     06 FC 05 F1 | 	add	result2, #6
1b058     FE 00 58 FC | 	wrword	#0, result2
1b05c     10 00 86 F1 | 	sub	_var01, #16
1b060                 | LR__2630
1b060     00 FB 01 F6 | 	mov	result1, _var01
1b064     01 FD 01 F6 | 	mov	result2, _var02
1b068                 | __system___gc_ptrs_ret
1b068     2D 00 64 FD | 	ret
1b06c                 | 
1b06c                 | __system___gc_tryalloc
1b06c     0B 4A 05 F6 | 	mov	COUNT_, #11
1b070     A8 00 A0 FD | 	call	#pushregs_
1b074     09 1F 02 F6 | 	mov	local01, arg01
1b078     0A 21 02 F6 | 	mov	local02, arg02
1b07c     54 FF BF FD | 	call	#__system___gc_ptrs
1b080     FD 22 02 F6 | 	mov	local03, result1
1b084     FE 24 02 F6 | 	mov	local04, result2
1b088     11 27 02 F6 | 	mov	local05, local03
1b08c     00 28 06 F6 | 	mov	local06, #0
1b090     97 1E 48 FB | 	callpa	#(@LR__2641-@LR__2640)>>2,fcache_load_ptr_
1b094                 | LR__2640
1b094     13 2B 02 F6 | 	mov	local07, local05
1b098     06 26 06 F1 | 	add	local05, #6
1b09c     13 15 EA FA | 	rdword	arg02, local05 wz
1b0a0     11 13 02 F6 | 	mov	arg01, local03
1b0a4     00 FA 05 A6 |  if_e	mov	result1, #0
1b0a8     04 14 66 50 |  if_ne	shl	arg02, #4
1b0ac     0A 13 02 51 |  if_ne	add	arg01, arg02
1b0b0     09 FB 01 56 |  if_ne	mov	result1, arg01
1b0b4     FD 26 0A F6 | 	mov	local05, result1 wz
1b0b8     13 29 E2 5A |  if_ne	rdword	local06, local05
1b0bc     00 26 0E F2 | 	cmp	local05, #0 wz
1b0c0     12 27 52 52 |  if_ne	cmps	local05, local04 wc
1b0c4     08 00 90 1D |  if_a	jmp	#LR__2642
1b0c8     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
1b0cc     C4 FF 9F 1D |  if_a	jmp	#LR__2640
1b0d0                 | LR__2641
1b0d0                 | LR__2642
1b0d0     00 26 0E F2 | 	cmp	local05, #0 wz
1b0d4     13 FB 01 A6 |  if_e	mov	result1, local05
1b0d8     3C 01 90 AD |  if_e	jmp	#LR__2645
1b0dc     13 FD 01 F6 | 	mov	result2, local05
1b0e0     06 FC 05 F1 | 	add	result2, #6
1b0e4     FE 2C E2 FA | 	rdword	local08, result2
1b0e8     14 1F 52 F2 | 	cmps	local01, local06 wc
1b0ec     C0 00 90 3D |  if_ae	jmp	#LR__2644
1b0f0     13 1F 52 FC | 	wrword	local01, local05
1b0f4     13 13 02 F6 | 	mov	arg01, local05
1b0f8     0F 2D 02 F6 | 	mov	local08, local01
1b0fc     04 2C 66 F0 | 	shl	local08, #4
1b100     16 13 02 F1 | 	add	arg01, local08
1b104     0F 29 82 F1 | 	sub	local06, local01
1b108     09 29 52 FC | 	wrword	local06, arg01
1b10c     09 2D 02 F6 | 	mov	local08, arg01
1b110     02 2C 06 F1 | 	add	local08, #2
1b114     36 00 80 FF 
1b118     16 1F 59 FC | 	wrword	##27791, local08
1b11c     13 15 0A F6 | 	mov	arg02, local05 wz
1b120     00 FA 05 A6 |  if_e	mov	result1, #0
1b124     11 15 82 51 |  if_ne	sub	arg02, local03
1b128     04 14 46 50 |  if_ne	shr	arg02, #4
1b12c     0A FB 01 56 |  if_ne	mov	result1, arg02
1b130     09 2D 02 F6 | 	mov	local08, arg01
1b134     04 2C 06 F1 | 	add	local08, #4
1b138     16 FB 51 FC | 	wrword	result1, local08
1b13c     13 2D 02 F6 | 	mov	local08, local05
1b140     06 2C 06 F1 | 	add	local08, #6
1b144     09 15 02 F6 | 	mov	arg02, arg01
1b148     16 2D E2 FA | 	rdword	local08, local08
1b14c     06 14 06 F1 | 	add	arg02, #6
1b150     0A 2D 52 FC | 	wrword	local08, arg02
1b154     09 2F 02 F6 | 	mov	local09, arg01
1b158     17 15 0A F6 | 	mov	arg02, local09 wz
1b15c     00 FA 05 A6 |  if_e	mov	result1, #0
1b160     11 15 82 51 |  if_ne	sub	arg02, local03
1b164     04 14 46 50 |  if_ne	shr	arg02, #4
1b168     0A FB 01 56 |  if_ne	mov	result1, arg02
1b16c     FD 2C 02 F6 | 	mov	local08, result1
1b170     09 31 EA FA | 	rdword	local10, arg01 wz
1b174     00 FA 05 A6 |  if_e	mov	result1, #0
1b178     04 30 66 50 |  if_ne	shl	local10, #4
1b17c     18 13 02 51 |  if_ne	add	arg01, local10
1b180     09 FB 01 56 |  if_ne	mov	result1, arg01
1b184     FD 32 0A F6 | 	mov	local11, result1 wz
1b188     24 00 90 AD |  if_e	jmp	#LR__2643
1b18c     12 33 52 F2 | 	cmps	local11, local04 wc
1b190     1C 00 90 3D |  if_ae	jmp	#LR__2643
1b194     17 15 0A F6 | 	mov	arg02, local09 wz
1b198     00 FA 05 A6 |  if_e	mov	result1, #0
1b19c     11 15 82 51 |  if_ne	sub	arg02, local03
1b1a0     04 14 46 50 |  if_ne	shr	arg02, #4
1b1a4     0A FB 01 56 |  if_ne	mov	result1, arg02
1b1a8     04 32 06 F1 | 	add	local11, #4
1b1ac     19 FB 51 FC | 	wrword	result1, local11
1b1b0                 | LR__2643
1b1b0                 | LR__2644
1b1b0     06 2A 06 F1 | 	add	local07, #6
1b1b4     15 2D 52 FC | 	wrword	local08, local07
1b1b8     36 00 00 FF 
1b1bc     80 2E 06 F6 | 	mov	local09, ##27776
1b1c0     10 2F 42 F5 | 	or	local09, local02
1b1c4     00 FA 05 F6 | 	mov	result1, #0
1b1c8     01 FA 61 FD | 	cogid	result1
1b1cc     FD 2E 42 F5 | 	or	local09, result1
1b1d0     13 33 02 F6 | 	mov	local11, local05
1b1d4     02 32 06 F1 | 	add	local11, #2
1b1d8     19 2F 52 FC | 	wrword	local09, local11
1b1dc     11 2F 02 F6 | 	mov	local09, local03
1b1e0     08 2E 06 F1 | 	add	local09, #8
1b1e4     13 33 02 F6 | 	mov	local11, local05
1b1e8     17 2F E2 FA | 	rdword	local09, local09
1b1ec     06 32 06 F1 | 	add	local11, #6
1b1f0     19 2F 52 FC | 	wrword	local09, local11
1b1f4     13 15 0A F6 | 	mov	arg02, local05 wz
1b1f8     00 FA 05 A6 |  if_e	mov	result1, #0
1b1fc     11 15 82 51 |  if_ne	sub	arg02, local03
1b200     04 14 46 50 |  if_ne	shr	arg02, #4
1b204     0A FB 01 56 |  if_ne	mov	result1, arg02
1b208     08 22 06 F1 | 	add	local03, #8
1b20c     11 FB 51 FC | 	wrword	result1, local03
1b210     08 26 06 F1 | 	add	local05, #8
1b214     13 FB 01 F6 | 	mov	result1, local05
1b218                 | LR__2645
1b218     A7 F0 03 F6 | 	mov	ptra, fp
1b21c     B2 00 A0 FD | 	call	#popregs_
1b220                 | __system___gc_tryalloc_ret
1b220     2D 00 64 FD | 	ret
1b224                 | 
1b224                 | __system___gc_alloc_managed
1b224     01 4A 05 F6 | 	mov	COUNT_, #1
1b228     A8 00 A0 FD | 	call	#pushregs_
1b22c     09 1F 02 F6 | 	mov	local01, arg01
1b230     00 14 06 F6 | 	mov	arg02, #0
1b234     1C 00 B0 FD | 	call	#__system___gc_doalloc
1b238     FD 14 0A F6 | 	mov	arg02, result1 wz
1b23c     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
1b240     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
1b244     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
1b248     A7 F0 03 F6 | 	mov	ptra, fp
1b24c     B2 00 A0 FD | 	call	#popregs_
1b250                 | __system___gc_alloc_managed_ret
1b250     2D 00 64 FD | 	ret
1b254                 | 
1b254                 | __system___gc_doalloc
1b254     06 4A 05 F6 | 	mov	COUNT_, #6
1b258     A8 00 A0 FD | 	call	#pushregs_
1b25c     09 1F 0A F6 | 	mov	local01, arg01 wz
1b260     0A 21 02 F6 | 	mov	local02, arg02
1b264     00 FA 05 A6 |  if_e	mov	result1, #0
1b268     8C 00 90 AD |  if_e	jmp	#LR__2657
1b26c     17 1E 06 F1 | 	add	local01, #23
1b270     0F 1E 26 F5 | 	andn	local01, #15
1b274     04 1E 46 F0 | 	shr	local01, #4
1b278     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1b27c     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1b280     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1b284     D0 C5 BF FD | 	call	#__system___lockmem
1b288     0F 13 02 F6 | 	mov	arg01, local01
1b28c     10 15 02 F6 | 	mov	arg02, local02
1b290     D8 FD BF FD | 	call	#__system___gc_tryalloc
1b294     FD 22 0A F6 | 	mov	local03, result1 wz
1b298     14 00 90 5D |  if_ne	jmp	#LR__2650
1b29c     70 03 B0 FD | 	call	#__system___gc_docollect
1b2a0     0F 13 02 F6 | 	mov	arg01, local01
1b2a4     10 15 02 F6 | 	mov	arg02, local02
1b2a8     C0 FD BF FD | 	call	#__system___gc_tryalloc
1b2ac     FD 22 02 F6 | 	mov	local03, result1
1b2b0                 | LR__2650
1b2b0     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1b2b4     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1b2b8     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1b2bc     09 01 68 FC | 	wrlong	#0, arg01
1b2c0     00 22 0E F2 | 	cmp	local03, #0 wz
1b2c4     2C 00 90 AD |  if_e	jmp	#LR__2656
1b2c8     04 1E 66 F0 | 	shl	local01, #4
1b2cc     08 1E 86 F1 | 	sub	local01, #8
1b2d0     0F 25 52 F6 | 	abs	local04, local01 wc
1b2d4     02 24 46 F0 | 	shr	local04, #2
1b2d8     12 27 8A F6 | 	negc	local05, local04 wz
1b2dc     11 29 02 F6 | 	mov	local06, local03
1b2e0     10 00 90 AD |  if_e	jmp	#LR__2655
1b2e4     97 06 48 FB | 	callpa	#(@LR__2653-@LR__2651)>>2,fcache_load_ptr_
1b2e8                 | LR__2651
1b2e8     13 05 D8 FC | 	rep	@LR__2654, local05
1b2ec                 | LR__2652
1b2ec     14 01 68 FC | 	wrlong	#0, local06
1b2f0     04 28 06 F1 | 	add	local06, #4
1b2f4                 | LR__2653
1b2f4                 | LR__2654
1b2f4                 | LR__2655
1b2f4                 | LR__2656
1b2f4     11 FB 01 F6 | 	mov	result1, local03
1b2f8                 | LR__2657
1b2f8     A7 F0 03 F6 | 	mov	ptra, fp
1b2fc     B2 00 A0 FD | 	call	#popregs_
1b300                 | __system___gc_doalloc_ret
1b300     2D 00 64 FD | 	ret
1b304                 | 
1b304                 | __system___gc_isvalidptr
1b304     F8 16 06 F4 | 	bitl	arg03, #248
1b308     08 16 86 F1 | 	sub	arg03, #8
1b30c     09 17 52 F2 | 	cmps	arg03, arg01 wc
1b310     08 00 90 CD |  if_b	jmp	#LR__2660
1b314     0A 17 52 F2 | 	cmps	arg03, arg02 wc
1b318     08 00 90 CD |  if_b	jmp	#LR__2661
1b31c                 | LR__2660
1b31c     00 FA 05 F6 | 	mov	result1, #0
1b320     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
1b324                 | LR__2661
1b324     0B 01 02 F6 | 	mov	_var01, arg03
1b328     09 01 62 F5 | 	xor	_var01, arg01
1b32c     0F 00 CE F7 | 	test	_var01, #15 wz
1b330     00 FA 05 56 |  if_ne	mov	result1, #0
1b334     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
1b338     0B 01 02 F6 | 	mov	_var01, arg03
1b33c     02 00 06 F1 | 	add	_var01, #2
1b340     00 01 E2 FA | 	rdword	_var01, _var01
1b344     7F 00 00 FF 
1b348     C0 01 06 F5 | 	and	_var01, ##65472
1b34c     36 00 00 FF 
1b350     80 00 0E F2 | 	cmp	_var01, ##27776 wz
1b354     00 FA 05 56 |  if_ne	mov	result1, #0
1b358     0B FB 01 A6 |  if_e	mov	result1, arg03
1b35c                 | __system___gc_isvalidptr_ret
1b35c     2D 00 64 FD | 	ret
1b360                 | 
1b360                 | __system___gc_free
1b360     09 17 02 F6 | 	mov	arg03, arg01
1b364     6C FC BF FD | 	call	#__system___gc_ptrs
1b368     FD 12 02 F6 | 	mov	arg01, result1
1b36c     FE 14 02 F6 | 	mov	arg02, result2
1b370     90 FF BF FD | 	call	#__system___gc_isvalidptr
1b374     FD 14 0A F6 | 	mov	arg02, result1 wz
1b378     28 00 90 AD |  if_e	jmp	#LR__2670
1b37c     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1b380     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1b384     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1b388     CC C4 BF FD | 	call	#__system___lockmem
1b38c     0A 13 02 F6 | 	mov	arg01, arg02
1b390     14 00 B0 FD | 	call	#__system___gc_dofree
1b394     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1b398     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1b39c     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1b3a0     09 01 68 FC | 	wrlong	#0, arg01
1b3a4                 | LR__2670
1b3a4                 | __system___gc_free_ret
1b3a4     2D 00 64 FD | 	ret
1b3a8                 | 
1b3a8                 | __system___gc_dofree
1b3a8     06 4A 05 F6 | 	mov	COUNT_, #6
1b3ac     A8 00 A0 FD | 	call	#pushregs_
1b3b0     09 1F 02 F6 | 	mov	local01, arg01
1b3b4     1C FC BF FD | 	call	#__system___gc_ptrs
1b3b8     FD 20 02 F6 | 	mov	local02, result1
1b3bc     FE 22 02 F6 | 	mov	local03, result2
1b3c0     0F 15 02 F6 | 	mov	arg02, local01
1b3c4     02 14 06 F1 | 	add	arg02, #2
1b3c8     36 00 80 FF 
1b3cc     0A 1F 59 FC | 	wrword	##27791, arg02
1b3d0     0F 25 02 F6 | 	mov	local04, local01
1b3d4     0F 13 02 F6 | 	mov	arg01, local01
1b3d8     09 27 EA FA | 	rdword	local05, arg01 wz
1b3dc     00 FA 05 A6 |  if_e	mov	result1, #0
1b3e0     04 26 66 50 |  if_ne	shl	local05, #4
1b3e4     13 13 02 51 |  if_ne	add	arg01, local05
1b3e8     09 FB 01 56 |  if_ne	mov	result1, arg01
1b3ec     FD 28 02 F6 | 	mov	local06, result1
1b3f0     97 24 48 FB | 	callpa	#(@LR__2681-@LR__2680)>>2,fcache_load_ptr_
1b3f4                 | LR__2680
1b3f4     04 24 06 F1 | 	add	local04, #4
1b3f8     12 15 EA FA | 	rdword	arg02, local04 wz
1b3fc     10 13 02 F6 | 	mov	arg01, local02
1b400     00 FA 05 A6 |  if_e	mov	result1, #0
1b404     04 14 66 50 |  if_ne	shl	arg02, #4
1b408     0A 13 02 51 |  if_ne	add	arg01, arg02
1b40c     09 FB 01 56 |  if_ne	mov	result1, arg01
1b410     FD 24 0A F6 | 	mov	local04, result1 wz
1b414     24 00 90 AD |  if_e	jmp	#LR__2682
1b418     12 13 02 F6 | 	mov	arg01, local04
1b41c     00 FA 05 F6 | 	mov	result1, #0
1b420     02 12 06 F1 | 	add	arg01, #2
1b424     09 13 E2 FA | 	rdword	arg01, arg01
1b428     36 00 00 FF 
1b42c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1b430     01 FA 65 A6 |  if_e	neg	result1, #1
1b434     00 FA 0D F2 | 	cmp	result1, #0 wz
1b438     B8 FF 9F AD |  if_e	jmp	#LR__2680
1b43c                 | LR__2681
1b43c                 | LR__2682
1b43c     00 24 0E F2 | 	cmp	local04, #0 wz
1b440     10 25 02 A6 |  if_e	mov	local04, local02
1b444     12 15 02 F6 | 	mov	arg02, local04
1b448     06 14 06 F1 | 	add	arg02, #6
1b44c     0F 13 02 F6 | 	mov	arg01, local01
1b450     0A 15 E2 FA | 	rdword	arg02, arg02
1b454     06 12 06 F1 | 	add	arg01, #6
1b458     09 15 52 FC | 	wrword	arg02, arg01
1b45c     0F 15 0A F6 | 	mov	arg02, local01 wz
1b460     00 FA 05 A6 |  if_e	mov	result1, #0
1b464     10 15 82 51 |  if_ne	sub	arg02, local02
1b468     04 14 46 50 |  if_ne	shr	arg02, #4
1b46c     0A FB 01 56 |  if_ne	mov	result1, arg02
1b470     12 15 02 F6 | 	mov	arg02, local04
1b474     06 14 06 F1 | 	add	arg02, #6
1b478     0A FB 51 FC | 	wrword	result1, arg02
1b47c     10 25 0A F2 | 	cmp	local04, local02 wz
1b480     A4 00 90 AD |  if_e	jmp	#LR__2685
1b484     12 13 02 F6 | 	mov	arg01, local04
1b488     09 27 EA FA | 	rdword	local05, arg01 wz
1b48c     00 FA 05 A6 |  if_e	mov	result1, #0
1b490     04 26 66 50 |  if_ne	shl	local05, #4
1b494     13 13 02 51 |  if_ne	add	arg01, local05
1b498     09 FB 01 56 |  if_ne	mov	result1, arg01
1b49c     0F FB 09 F2 | 	cmp	result1, local01 wz
1b4a0     84 00 90 5D |  if_ne	jmp	#LR__2684
1b4a4     12 29 E2 FA | 	rdword	local06, local04
1b4a8     0F 15 E2 FA | 	rdword	arg02, local01
1b4ac     0A 29 02 F1 | 	add	local06, arg02
1b4b0     12 29 52 FC | 	wrword	local06, local04
1b4b4     0F 29 02 F6 | 	mov	local06, local01
1b4b8     02 28 06 F1 | 	add	local06, #2
1b4bc     14 01 58 FC | 	wrword	#0, local06
1b4c0     0F 13 02 F6 | 	mov	arg01, local01
1b4c4     09 27 EA FA | 	rdword	local05, arg01 wz
1b4c8     00 FA 05 A6 |  if_e	mov	result1, #0
1b4cc     04 26 66 50 |  if_ne	shl	local05, #4
1b4d0     13 13 02 51 |  if_ne	add	arg01, local05
1b4d4     09 FB 01 56 |  if_ne	mov	result1, arg01
1b4d8     FD 28 02 F6 | 	mov	local06, result1
1b4dc     11 29 52 F2 | 	cmps	local06, local03 wc
1b4e0     20 00 90 3D |  if_ae	jmp	#LR__2683
1b4e4     12 15 0A F6 | 	mov	arg02, local04 wz
1b4e8     00 FA 05 A6 |  if_e	mov	result1, #0
1b4ec     10 15 82 51 |  if_ne	sub	arg02, local02
1b4f0     04 14 46 50 |  if_ne	shr	arg02, #4
1b4f4     0A FB 01 56 |  if_ne	mov	result1, arg02
1b4f8     14 15 02 F6 | 	mov	arg02, local06
1b4fc     04 14 06 F1 | 	add	arg02, #4
1b500     0A FB 51 FC | 	wrword	result1, arg02
1b504                 | LR__2683
1b504     0F 15 02 F6 | 	mov	arg02, local01
1b508     06 14 06 F1 | 	add	arg02, #6
1b50c     12 FD 01 F6 | 	mov	result2, local04
1b510     0A 15 E2 FA | 	rdword	arg02, arg02
1b514     06 FC 05 F1 | 	add	result2, #6
1b518     FE 14 52 FC | 	wrword	arg02, result2
1b51c     06 1E 06 F1 | 	add	local01, #6
1b520     0F 01 58 FC | 	wrword	#0, local01
1b524     12 1F 02 F6 | 	mov	local01, local04
1b528                 | LR__2684
1b528                 | LR__2685
1b528     0F 13 02 F6 | 	mov	arg01, local01
1b52c     09 27 EA FA | 	rdword	local05, arg01 wz
1b530     00 FA 05 A6 |  if_e	mov	result1, #0
1b534     04 26 66 50 |  if_ne	shl	local05, #4
1b538     13 13 02 51 |  if_ne	add	arg01, local05
1b53c     09 FB 01 56 |  if_ne	mov	result1, arg01
1b540     FD 14 0A F6 | 	mov	arg02, result1 wz
1b544     B8 00 90 AD |  if_e	jmp	#LR__2687
1b548     11 15 52 F2 | 	cmps	arg02, local03 wc
1b54c     B0 00 90 3D |  if_ae	jmp	#LR__2687
1b550     0A 13 02 F6 | 	mov	arg01, arg02
1b554     00 FA 05 F6 | 	mov	result1, #0
1b558     02 12 06 F1 | 	add	arg01, #2
1b55c     09 13 E2 FA | 	rdword	arg01, arg01
1b560     36 00 00 FF 
1b564     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1b568     01 FA 65 A6 |  if_e	neg	result1, #1
1b56c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b570     8C 00 90 AD |  if_e	jmp	#LR__2687
1b574     0F 25 02 F6 | 	mov	local04, local01
1b578     12 29 E2 FA | 	rdword	local06, local04
1b57c     0A 13 02 F6 | 	mov	arg01, arg02
1b580     09 1F E2 FA | 	rdword	local01, arg01
1b584     0F 29 02 F1 | 	add	local06, local01
1b588     12 29 52 FC | 	wrword	local06, local04
1b58c     09 29 02 F6 | 	mov	local06, arg01
1b590     06 28 06 F1 | 	add	local06, #6
1b594     12 1F 02 F6 | 	mov	local01, local04
1b598     14 29 E2 FA | 	rdword	local06, local06
1b59c     06 1E 06 F1 | 	add	local01, #6
1b5a0     0F 29 52 FC | 	wrword	local06, local01
1b5a4     09 29 02 F6 | 	mov	local06, arg01
1b5a8     02 28 06 F1 | 	add	local06, #2
1b5ac     14 55 59 FC | 	wrword	#170, local06
1b5b0     09 29 02 F6 | 	mov	local06, arg01
1b5b4     06 28 06 F1 | 	add	local06, #6
1b5b8     14 01 58 FC | 	wrword	#0, local06
1b5bc     09 27 EA FA | 	rdword	local05, arg01 wz
1b5c0     00 FA 05 A6 |  if_e	mov	result1, #0
1b5c4     04 26 66 50 |  if_ne	shl	local05, #4
1b5c8     13 13 02 51 |  if_ne	add	arg01, local05
1b5cc     09 FB 01 56 |  if_ne	mov	result1, arg01
1b5d0     FD 28 0A F6 | 	mov	local06, result1 wz
1b5d4     28 00 90 AD |  if_e	jmp	#LR__2686
1b5d8     11 29 52 F2 | 	cmps	local06, local03 wc
1b5dc     20 00 90 3D |  if_ae	jmp	#LR__2686
1b5e0     12 15 0A F6 | 	mov	arg02, local04 wz
1b5e4     00 FA 05 A6 |  if_e	mov	result1, #0
1b5e8     10 15 82 51 |  if_ne	sub	arg02, local02
1b5ec     04 14 46 50 |  if_ne	shr	arg02, #4
1b5f0     0A FB 01 56 |  if_ne	mov	result1, arg02
1b5f4     14 25 02 F6 | 	mov	local04, local06
1b5f8     04 24 06 F1 | 	add	local04, #4
1b5fc     12 FB 51 FC | 	wrword	result1, local04
1b600                 | LR__2686
1b600                 | LR__2687
1b600     14 FB 01 F6 | 	mov	result1, local06
1b604     A7 F0 03 F6 | 	mov	ptra, fp
1b608     B2 00 A0 FD | 	call	#popregs_
1b60c                 | __system___gc_dofree_ret
1b60c     2D 00 64 FD | 	ret
1b610                 | 
1b610                 | __system___gc_docollect
1b610     05 4A 05 F6 | 	mov	COUNT_, #5
1b614     A8 00 A0 FD | 	call	#pushregs_
1b618     B8 F9 BF FD | 	call	#__system___gc_ptrs
1b61c     FE 1E 02 F6 | 	mov	local01, result2
1b620     FD 20 02 F6 | 	mov	local02, result1
1b624     10 13 02 F6 | 	mov	arg01, local02
1b628     09 23 EA FA | 	rdword	local03, arg01 wz
1b62c     00 FA 05 A6 |  if_e	mov	result1, #0
1b630     04 22 66 50 |  if_ne	shl	local03, #4
1b634     11 13 02 51 |  if_ne	add	arg01, local03
1b638     09 FB 01 56 |  if_ne	mov	result1, arg01
1b63c     FD 24 0A F6 | 	mov	local04, result1 wz
1b640     00 FA 05 F6 | 	mov	result1, #0
1b644     01 FA 61 FD | 	cogid	result1
1b648     FD 26 02 F6 | 	mov	local05, result1
1b64c     48 00 90 AD |  if_e	jmp	#LR__2692
1b650     97 22 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
1b654                 | LR__2690
1b654     0F 25 52 F2 | 	cmps	local04, local01 wc
1b658     3C 00 90 3D |  if_ae	jmp	#LR__2692
1b65c     12 15 02 F6 | 	mov	arg02, local04
1b660     02 14 06 F1 | 	add	arg02, #2
1b664     0A 15 E2 FA | 	rdword	arg02, arg02
1b668     20 14 26 F5 | 	andn	arg02, #32
1b66c     12 13 02 F6 | 	mov	arg01, local04
1b670     02 12 06 F1 | 	add	arg01, #2
1b674     09 15 52 FC | 	wrword	arg02, arg01
1b678     12 13 02 F6 | 	mov	arg01, local04
1b67c     09 23 EA FA | 	rdword	local03, arg01 wz
1b680     00 FA 05 A6 |  if_e	mov	result1, #0
1b684     04 22 66 50 |  if_ne	shl	local03, #4
1b688     11 13 02 51 |  if_ne	add	arg01, local03
1b68c     09 FB 01 56 |  if_ne	mov	result1, arg01
1b690     FD 24 0A F6 | 	mov	local04, result1 wz
1b694     BC FF 9F 5D |  if_ne	jmp	#LR__2690
1b698                 | LR__2691
1b698                 | LR__2692
1b698     00 22 06 F6 | 	mov	local03, #0
1b69c     00 12 06 F6 | 	mov	arg01, #0
1b6a0     8C C1 BF FD | 	call	#__system____topofstack
1b6a4     FD 14 02 F6 | 	mov	arg02, result1
1b6a8     11 13 02 F6 | 	mov	arg01, local03
1b6ac     90 00 B0 FD | 	call	#__system___gc_markhub
1b6b0     1C 01 B0 FD | 	call	#__system___gc_markcog
1b6b4     10 13 02 F6 | 	mov	arg01, local02
1b6b8     09 23 EA FA | 	rdword	local03, arg01 wz
1b6bc     00 FA 05 A6 |  if_e	mov	result1, #0
1b6c0     04 22 66 50 |  if_ne	shl	local03, #4
1b6c4     11 13 02 51 |  if_ne	add	arg01, local03
1b6c8     09 FB 01 56 |  if_ne	mov	result1, arg01
1b6cc     FD 20 0A F6 | 	mov	local02, result1 wz
1b6d0     60 00 90 AD |  if_e	jmp	#LR__2696
1b6d4                 | LR__2693
1b6d4     10 25 02 F6 | 	mov	local04, local02
1b6d8     12 13 02 F6 | 	mov	arg01, local04
1b6dc     09 23 EA FA | 	rdword	local03, arg01 wz
1b6e0     00 FA 05 A6 |  if_e	mov	result1, #0
1b6e4     04 22 66 50 |  if_ne	shl	local03, #4
1b6e8     11 13 02 51 |  if_ne	add	arg01, local03
1b6ec     09 FB 01 56 |  if_ne	mov	result1, arg01
1b6f0     FD 20 02 F6 | 	mov	local02, result1
1b6f4     12 15 02 F6 | 	mov	arg02, local04
1b6f8     02 14 06 F1 | 	add	arg02, #2
1b6fc     0A 15 E2 FA | 	rdword	arg02, arg02
1b700     20 14 CE F7 | 	test	arg02, #32 wz
1b704     10 14 CE A7 |  if_e	test	arg02, #16 wz
1b708     1C 00 90 5D |  if_ne	jmp	#LR__2695
1b70c     0A 15 42 F8 | 	getnib	arg02, arg02, #0
1b710     13 15 0A F2 | 	cmp	arg02, local05 wz
1b714     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
1b718     0C 00 90 5D |  if_ne	jmp	#LR__2694
1b71c     12 13 02 F6 | 	mov	arg01, local04
1b720     84 FC BF FD | 	call	#__system___gc_dofree
1b724     FD 20 02 F6 | 	mov	local02, result1
1b728                 | LR__2694
1b728                 | LR__2695
1b728     00 20 0E F2 | 	cmp	local02, #0 wz
1b72c     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
1b730     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2693
1b734                 | LR__2696
1b734     A7 F0 03 F6 | 	mov	ptra, fp
1b738     B2 00 A0 FD | 	call	#popregs_
1b73c                 | __system___gc_docollect_ret
1b73c     2D 00 64 FD | 	ret
1b740                 | 
1b740                 | __system___gc_markhub
1b740     04 4A 05 F6 | 	mov	COUNT_, #4
1b744     A8 00 A0 FD | 	call	#pushregs_
1b748     09 1F 02 F6 | 	mov	local01, arg01
1b74c     0A 21 02 F6 | 	mov	local02, arg02
1b750     80 F8 BF FD | 	call	#__system___gc_ptrs
1b754     FD 22 02 F6 | 	mov	local03, result1
1b758     FE 24 02 F6 | 	mov	local04, result2
1b75c                 | LR__2700
1b75c     10 1F 52 F2 | 	cmps	local01, local02 wc
1b760     60 00 90 3D |  if_ae	jmp	#LR__2701
1b764     0F 17 02 FB | 	rdlong	arg03, local01
1b768     04 1E 06 F1 | 	add	local01, #4
1b76c     12 15 02 F6 | 	mov	arg02, local04
1b770     11 13 02 F6 | 	mov	arg01, local03
1b774     8C FB BF FD | 	call	#__system___gc_isvalidptr
1b778     FD 16 0A F6 | 	mov	arg03, result1 wz
1b77c     DC FF 9F AD |  if_e	jmp	#LR__2700
1b780     0B 13 02 F6 | 	mov	arg01, arg03
1b784     00 FA 05 F6 | 	mov	result1, #0
1b788     02 12 06 F1 | 	add	arg01, #2
1b78c     09 13 E2 FA | 	rdword	arg01, arg01
1b790     36 00 00 FF 
1b794     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1b798     01 FA 65 A6 |  if_e	neg	result1, #1
1b79c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b7a0     B8 FF 9F 5D |  if_ne	jmp	#LR__2700
1b7a4     0B FD 01 F6 | 	mov	result2, arg03
1b7a8     02 FC 05 F1 | 	add	result2, #2
1b7ac     FE FC E1 FA | 	rdword	result2, result2
1b7b0     0F FC 25 F5 | 	andn	result2, #15
1b7b4     2E FC 45 F5 | 	or	result2, #46
1b7b8     02 16 06 F1 | 	add	arg03, #2
1b7bc     0B FD 51 FC | 	wrword	result2, arg03
1b7c0     98 FF 9F FD | 	jmp	#LR__2700
1b7c4                 | LR__2701
1b7c4     A7 F0 03 F6 | 	mov	ptra, fp
1b7c8     B2 00 A0 FD | 	call	#popregs_
1b7cc                 | __system___gc_markhub_ret
1b7cc     2D 00 64 FD | 	ret
1b7d0                 | 
1b7d0                 | __system___gc_markcog
1b7d0     04 4A 05 F6 | 	mov	COUNT_, #4
1b7d4     A8 00 A0 FD | 	call	#pushregs_
1b7d8     F8 F7 BF FD | 	call	#__system___gc_ptrs
1b7dc     FD 1E 02 F6 | 	mov	local01, result1
1b7e0     FE 20 02 F6 | 	mov	local02, result2
1b7e4     EF 23 06 F6 | 	mov	local03, #495
1b7e8                 | LR__2710
1b7e8                 | 	'.live	local03
1b7e8     00 22 96 F9 | 	alts	local03, #0
1b7ec     11 25 02 F6 | 	mov	local04, local03
1b7f0     0F 13 02 F6 | 	mov	arg01, local01
1b7f4     10 15 02 F6 | 	mov	arg02, local02
1b7f8     12 17 02 F6 | 	mov	arg03, local04
1b7fc     04 FB BF FD | 	call	#__system___gc_isvalidptr
1b800     00 FA 0D F2 | 	cmp	result1, #0 wz
1b804     18 00 90 AD |  if_e	jmp	#LR__2711
1b808     FD 24 02 F6 | 	mov	local04, result1
1b80c     02 24 06 F1 | 	add	local04, #2
1b810     12 25 E2 FA | 	rdword	local04, local04
1b814     20 24 46 F5 | 	or	local04, #32
1b818     02 FA 05 F1 | 	add	result1, #2
1b81c     FD 24 52 FC | 	wrword	local04, result1
1b820                 | LR__2711
1b820     01 22 86 F1 | 	sub	local03, #1
1b824     00 22 56 F2 | 	cmps	local03, #0 wc
1b828     BC FF 9F 3D |  if_ae	jmp	#LR__2710
1b82c     A7 F0 03 F6 | 	mov	ptra, fp
1b830     B2 00 A0 FD | 	call	#popregs_
1b834                 | __system___gc_markcog_ret
1b834     2D 00 64 FD | 	ret
1b838                 | 
1b838                 | __system__opendir
1b838     06 4A 05 F6 | 	mov	COUNT_, #6
1b83c     A8 00 A0 FD | 	call	#pushregs_
1b840     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1b844     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
1b848     09 15 02 F6 | 	mov	arg02, arg01
1b84c     0F 13 02 F6 | 	mov	arg01, local01
1b850     00 16 06 F6 | 	mov	arg03, #0
1b854     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1b858     94 C7 BF FD | 	call	#__system____getvfsforfile
1b85c     FD 20 0A F6 | 	mov	local02, result1 wz
1b860     10 00 90 AD |  if_e	jmp	#LR__2720
1b864     28 20 06 F1 | 	add	local02, #40
1b868     10 17 0A FB | 	rdlong	arg03, local02 wz
1b86c     28 20 86 F1 | 	sub	local02, #40
1b870     14 00 90 5D |  if_ne	jmp	#LR__2721
1b874                 | LR__2720
1b874     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1b878     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1b87c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1b880     00 FA 05 F6 | 	mov	result1, #0
1b884     90 00 90 FD | 	jmp	#LR__2723
1b888                 | LR__2721
1b888     5C 12 06 F6 | 	mov	arg01, #92
1b88c     10 14 06 F6 | 	mov	arg02, #16
1b890     C0 F9 BF FD | 	call	#__system___gc_doalloc
1b894     FD 22 0A F6 | 	mov	local03, result1 wz
1b898     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1b89c     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
1b8a0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1b8a4     00 FA 05 A6 |  if_e	mov	result1, #0
1b8a8     6C 00 90 AD |  if_e	jmp	#LR__2723
1b8ac     28 20 06 F1 | 	add	local02, #40
1b8b0     10 25 02 FB | 	rdlong	local04, local02
1b8b4     12 27 02 F6 | 	mov	local05, local04
1b8b8     28 20 86 F1 | 	sub	local02, #40
1b8bc     13 26 46 F7 | 	zerox	local05, #19
1b8c0     14 24 46 F0 | 	shr	local04, #20
1b8c4     02 24 66 F0 | 	shl	local04, #2
1b8c8     ED 24 02 F1 | 	add	local04, __methods__
1b8cc     12 25 02 FB | 	rdlong	local04, local04
1b8d0     11 13 02 F6 | 	mov	arg01, local03
1b8d4     0F 15 02 F6 | 	mov	arg02, local01
1b8d8     F2 28 02 F6 | 	mov	local06, objptr
1b8dc     13 E5 01 F6 | 	mov	objptr, local05
1b8e0     2D 24 62 FD | 	call	local04
1b8e4     14 E5 01 F6 | 	mov	objptr, local06
1b8e8     FD 16 0A F6 | 	mov	arg03, result1 wz
1b8ec     20 00 90 AD |  if_e	jmp	#LR__2722
1b8f0     00 16 4E F2 | 	cmps	arg03, #0 wz
1b8f4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1b8f8     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
1b8fc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1b900     11 13 02 F6 | 	mov	arg01, local03
1b904     58 FA BF FD | 	call	#__system___gc_free
1b908     00 FA 05 F6 | 	mov	result1, #0
1b90c     08 00 90 FD | 	jmp	#LR__2723
1b910                 | LR__2722
1b910     11 21 62 FC | 	wrlong	local02, local03
1b914     11 FB 01 F6 | 	mov	result1, local03
1b918                 | LR__2723
1b918     A7 F0 03 F6 | 	mov	ptra, fp
1b91c     B2 00 A0 FD | 	call	#popregs_
1b920                 | __system__opendir_ret
1b920     2D 00 64 FD | 	ret
1b924                 | 
1b924                 | __system__closedir
1b924     04 4A 05 F6 | 	mov	COUNT_, #4
1b928     A8 00 A0 FD | 	call	#pushregs_
1b92c     09 1F 02 F6 | 	mov	local01, arg01
1b930     0F 13 02 FB | 	rdlong	arg01, local01
1b934     2C 12 06 F1 | 	add	arg01, #44
1b938     09 21 02 FB | 	rdlong	local02, arg01
1b93c     10 23 02 F6 | 	mov	local03, local02
1b940     13 22 46 F7 | 	zerox	local03, #19
1b944     14 20 46 F0 | 	shr	local02, #20
1b948     02 20 66 F0 | 	shl	local02, #2
1b94c     ED 20 02 F1 | 	add	local02, __methods__
1b950     10 21 02 FB | 	rdlong	local02, local02
1b954     0F 13 02 F6 | 	mov	arg01, local01
1b958     F2 24 02 F6 | 	mov	local04, objptr
1b95c     11 E5 01 F6 | 	mov	objptr, local03
1b960     2D 20 62 FD | 	call	local02
1b964     12 E5 01 F6 | 	mov	objptr, local04
1b968     FD 24 02 F6 | 	mov	local04, result1
1b96c     0F 13 02 F6 | 	mov	arg01, local01
1b970     EC F9 BF FD | 	call	#__system___gc_free
1b974     00 24 4E F2 | 	cmps	local04, #0 wz
1b978     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1b97c     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
1b980     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1b984     01 FA 65 56 |  if_ne	neg	result1, #1
1b988     00 FA 05 A6 |  if_e	mov	result1, #0
1b98c     A7 F0 03 F6 | 	mov	ptra, fp
1b990     B2 00 A0 FD | 	call	#popregs_
1b994                 | __system__closedir_ret
1b994     2D 00 64 FD | 	ret
1b998                 | 
1b998                 | __system__readdir
1b998     04 4A 05 F6 | 	mov	COUNT_, #4
1b99c     A8 00 A0 FD | 	call	#pushregs_
1b9a0     09 15 0A FB | 	rdlong	arg02, arg01 wz
1b9a4     08 12 06 F1 | 	add	arg01, #8
1b9a8     09 1F 02 F6 | 	mov	local01, arg01
1b9ac     08 12 86 F1 | 	sub	arg01, #8
1b9b0     00 FA 05 A6 |  if_e	mov	result1, #0
1b9b4     5C 00 90 AD |  if_e	jmp	#LR__2731
1b9b8     30 14 06 F1 | 	add	arg02, #48
1b9bc     0A 21 02 FB | 	rdlong	local02, arg02
1b9c0     10 23 02 F6 | 	mov	local03, local02
1b9c4     13 22 46 F7 | 	zerox	local03, #19
1b9c8     14 20 46 F0 | 	shr	local02, #20
1b9cc     02 20 66 F0 | 	shl	local02, #2
1b9d0     ED 20 02 F1 | 	add	local02, __methods__
1b9d4     10 21 02 FB | 	rdlong	local02, local02
1b9d8     0F 15 02 F6 | 	mov	arg02, local01
1b9dc     F2 24 02 F6 | 	mov	local04, objptr
1b9e0     11 E5 01 F6 | 	mov	objptr, local03
1b9e4     2D 20 62 FD | 	call	local02
1b9e8     12 E5 01 F6 | 	mov	objptr, local04
1b9ec     00 FA 4D F2 | 	cmps	result1, #0 wz
1b9f0     1C 00 90 AD |  if_e	jmp	#LR__2730
1b9f4     01 FA 55 F2 | 	cmps	result1, #1 wc
1b9f8     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
1b9fc     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1ba00     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
1ba04     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1ba08     00 FA 05 F6 | 	mov	result1, #0
1ba0c     04 00 90 FD | 	jmp	#LR__2731
1ba10                 | LR__2730
1ba10     0F FB 01 F6 | 	mov	result1, local01
1ba14                 | LR__2731
1ba14     A7 F0 03 F6 | 	mov	ptra, fp
1ba18     B2 00 A0 FD | 	call	#popregs_
1ba1c                 | __system__readdir_ret
1ba1c     2D 00 64 FD | 	ret
1ba20                 | 
1ba20                 | __system___openraw
1ba20     15 4A 05 F6 | 	mov	COUNT_, #21
1ba24     A8 00 A0 FD | 	call	#pushregs_
1ba28     09 1F 02 F6 | 	mov	local01, arg01
1ba2c     0A 21 02 F6 | 	mov	local02, arg02
1ba30     0B 23 02 F6 | 	mov	local03, arg03
1ba34     0C 25 02 F6 | 	mov	local04, arg04
1ba38     04 26 06 F6 | 	mov	local05, #4
1ba3c     0F 29 02 F6 | 	mov	local06, local01
1ba40     00 2A 06 F6 | 	mov	local07, #0
1ba44     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1ba48     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
1ba4c     16 13 02 F6 | 	mov	arg01, local08
1ba50     10 15 02 F6 | 	mov	arg02, local02
1ba54     00 16 06 F6 | 	mov	arg03, #0
1ba58     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1ba5c     90 C5 BF FD | 	call	#__system____getvfsforfile
1ba60     FD 2E 0A F6 | 	mov	local09, result1 wz
1ba64     10 00 90 AD |  if_e	jmp	#LR__2740
1ba68     20 2E 06 F1 | 	add	local09, #32
1ba6c     17 FB 09 FB | 	rdlong	result1, local09 wz
1ba70     20 2E 86 F1 | 	sub	local09, #32
1ba74     14 00 90 5D |  if_ne	jmp	#LR__2741
1ba78                 | LR__2740
1ba78     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1ba7c     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1ba80     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1ba84     01 FA 65 F6 | 	neg	result1, #1
1ba88     8C 02 90 FD | 	jmp	#LR__2754
1ba8c                 | LR__2741
1ba8c     14 13 02 F6 | 	mov	arg01, local06
1ba90     00 14 06 F6 | 	mov	arg02, #0
1ba94     34 16 06 F6 | 	mov	arg03, #52
1ba98     09 31 02 F6 | 	mov	local10, arg01
1ba9c     98 00 A0 FD | 	call	#\builtin_bytefill_
1baa0     20 2E 06 F1 | 	add	local09, #32
1baa4     17 33 02 FB | 	rdlong	local11, local09
1baa8     19 35 02 F6 | 	mov	local12, local11
1baac     19 37 02 F6 | 	mov	local13, local11
1bab0     20 2E 86 F1 | 	sub	local09, #32
1bab4     1B 39 02 F6 | 	mov	local14, local13
1bab8     13 34 46 F7 | 	zerox	local12, #19
1babc     14 38 46 F0 | 	shr	local14, #20
1bac0     02 38 66 F0 | 	shl	local14, #2
1bac4     ED 38 02 F1 | 	add	local14, __methods__
1bac8     1C 39 02 FB | 	rdlong	local14, local14
1bacc     14 3B 02 F6 | 	mov	local15, local06
1bad0     16 3D 02 F6 | 	mov	local16, local08
1bad4     11 3F 02 F6 | 	mov	local17, local03
1bad8     1D 13 02 F6 | 	mov	arg01, local15
1badc     1E 15 02 F6 | 	mov	arg02, local16
1bae0     1F 17 02 F6 | 	mov	arg03, local17
1bae4     F2 40 02 F6 | 	mov	local18, objptr
1bae8     1A E5 01 F6 | 	mov	objptr, local12
1baec     2D 38 62 FD | 	call	local14
1baf0     20 E5 01 F6 | 	mov	objptr, local18
1baf4     FD 42 0A F6 | 	mov	local19, result1 wz
1baf8     04 22 CE 57 |  if_ne	test	local03, #4 wz
1bafc     58 00 90 AD |  if_e	jmp	#LR__2742
1bb00     24 2E 06 F1 | 	add	local09, #36
1bb04     17 33 02 FB | 	rdlong	local11, local09
1bb08     19 35 02 F6 | 	mov	local12, local11
1bb0c     19 37 02 F6 | 	mov	local13, local11
1bb10     24 2E 86 F1 | 	sub	local09, #36
1bb14     1B 39 02 F6 | 	mov	local14, local13
1bb18     13 34 46 F7 | 	zerox	local12, #19
1bb1c     14 38 46 F0 | 	shr	local14, #20
1bb20     02 38 66 F0 | 	shl	local14, #2
1bb24     ED 38 02 F1 | 	add	local14, __methods__
1bb28     1C 39 02 FB | 	rdlong	local14, local14
1bb2c     14 3B 02 F6 | 	mov	local15, local06
1bb30     16 3D 02 F6 | 	mov	local16, local08
1bb34     12 3F 02 F6 | 	mov	local17, local04
1bb38     1D 13 02 F6 | 	mov	arg01, local15
1bb3c     1E 15 02 F6 | 	mov	arg02, local16
1bb40     1F 17 02 F6 | 	mov	arg03, local17
1bb44     F2 40 02 F6 | 	mov	local18, objptr
1bb48     1A E5 01 F6 | 	mov	objptr, local12
1bb4c     2D 38 62 FD | 	call	local14
1bb50     20 E5 01 F6 | 	mov	objptr, local18
1bb54     FD 42 02 F6 | 	mov	local19, result1
1bb58                 | LR__2742
1bb58     00 42 0E F2 | 	cmp	local19, #0 wz
1bb5c     8C 01 90 5D |  if_ne	jmp	#LR__2752
1bb60     11 45 02 F6 | 	mov	local20, local03
1bb64     03 44 0E F5 | 	and	local20, #3 wz
1bb68     02 26 46 55 |  if_ne	or	local05, #2
1bb6c     01 44 0E F2 | 	cmp	local20, #1 wz
1bb70     01 26 46 55 |  if_ne	or	local05, #1
1bb74     20 22 CE F7 | 	test	local03, #32 wz
1bb78     C0 26 46 55 |  if_ne	or	local05, #192
1bb7c     08 28 06 F1 | 	add	local06, #8
1bb80     14 27 62 FC | 	wrlong	local05, local06
1bb84     0C 28 06 F1 | 	add	local06, #12
1bb88     14 47 0A FB | 	rdlong	local21, local06 wz
1bb8c     14 28 86 F1 | 	sub	local06, #20
1bb90     18 00 90 5D |  if_ne	jmp	#LR__2743
1bb94     04 2E 06 F1 | 	add	local09, #4
1bb98     17 47 02 FB | 	rdlong	local21, local09
1bb9c     04 2E 86 F1 | 	sub	local09, #4
1bba0     14 28 06 F1 | 	add	local06, #20
1bba4     14 47 62 FC | 	wrlong	local21, local06
1bba8     14 28 86 F1 | 	sub	local06, #20
1bbac                 | LR__2743
1bbac     18 28 06 F1 | 	add	local06, #24
1bbb0     14 47 0A FB | 	rdlong	local21, local06 wz
1bbb4     18 28 86 F1 | 	sub	local06, #24
1bbb8     18 00 90 5D |  if_ne	jmp	#LR__2744
1bbbc     08 2E 06 F1 | 	add	local09, #8
1bbc0     17 47 02 FB | 	rdlong	local21, local09
1bbc4     08 2E 86 F1 | 	sub	local09, #8
1bbc8     18 28 06 F1 | 	add	local06, #24
1bbcc     14 47 62 FC | 	wrlong	local21, local06
1bbd0     18 28 86 F1 | 	sub	local06, #24
1bbd4                 | LR__2744
1bbd4     24 28 06 F1 | 	add	local06, #36
1bbd8     14 47 0A FB | 	rdlong	local21, local06 wz
1bbdc     24 28 86 F1 | 	sub	local06, #36
1bbe0     17 47 02 AB |  if_e	rdlong	local21, local09
1bbe4     24 28 06 A1 |  if_e	add	local06, #36
1bbe8     14 47 62 AC |  if_e	wrlong	local21, local06
1bbec     24 28 86 A1 |  if_e	sub	local06, #36
1bbf0     28 28 06 F1 | 	add	local06, #40
1bbf4     14 47 0A FB | 	rdlong	local21, local06 wz
1bbf8     28 28 86 F1 | 	sub	local06, #40
1bbfc     18 00 90 5D |  if_ne	jmp	#LR__2745
1bc00     10 2E 06 F1 | 	add	local09, #16
1bc04     17 47 02 FB | 	rdlong	local21, local09
1bc08     10 2E 86 F1 | 	sub	local09, #16
1bc0c     28 28 06 F1 | 	add	local06, #40
1bc10     14 47 62 FC | 	wrlong	local21, local06
1bc14     28 28 86 F1 | 	sub	local06, #40
1bc18                 | LR__2745
1bc18     30 28 06 F1 | 	add	local06, #48
1bc1c     14 47 0A FB | 	rdlong	local21, local06 wz
1bc20     30 28 86 F1 | 	sub	local06, #48
1bc24     18 00 90 5D |  if_ne	jmp	#LR__2746
1bc28     0C 2E 06 F1 | 	add	local09, #12
1bc2c     17 47 02 FB | 	rdlong	local21, local09
1bc30     0C 2E 86 F1 | 	sub	local09, #12
1bc34     30 28 06 F1 | 	add	local06, #48
1bc38     14 47 62 FC | 	wrlong	local21, local06
1bc3c     30 28 86 F1 | 	sub	local06, #48
1bc40                 | LR__2746
1bc40     1C 28 06 F1 | 	add	local06, #28
1bc44     14 47 0A FB | 	rdlong	local21, local06 wz
1bc48     1C 28 86 F1 | 	sub	local06, #28
1bc4c     1C 00 90 5D |  if_ne	jmp	#LR__2747
1bc50     01 2A 06 F6 | 	mov	local07, #1
1bc54     F2 12 02 F6 | 	mov	arg01, objptr
1bc58     00 18 03 FF 
1bc5c     00 12 46 F5 | 	or	arg01, ##103809024
1bc60     1C 28 06 F1 | 	add	local06, #28
1bc64     14 13 62 FC | 	wrlong	arg01, local06
1bc68     1C 28 86 F1 | 	sub	local06, #28
1bc6c                 | LR__2747
1bc6c     20 28 06 F1 | 	add	local06, #32
1bc70     14 47 0A FB | 	rdlong	local21, local06 wz
1bc74     20 28 86 F1 | 	sub	local06, #32
1bc78     1C 00 90 5D |  if_ne	jmp	#LR__2748
1bc7c     01 2A 06 F6 | 	mov	local07, #1
1bc80     F2 12 02 F6 | 	mov	arg01, objptr
1bc84     00 20 03 FF 
1bc88     00 12 46 F5 | 	or	arg01, ##104857600
1bc8c     20 28 06 F1 | 	add	local06, #32
1bc90     14 13 62 FC | 	wrlong	arg01, local06
1bc94     20 28 86 F1 | 	sub	local06, #32
1bc98                 | LR__2748
1bc98     2C 28 06 F1 | 	add	local06, #44
1bc9c     14 47 0A FB | 	rdlong	local21, local06 wz
1bca0     2C 28 86 F1 | 	sub	local06, #44
1bca4     44 00 90 5D |  if_ne	jmp	#LR__2751
1bca8     14 2E 06 F1 | 	add	local09, #20
1bcac     17 47 0A FB | 	rdlong	local21, local09 wz
1bcb0     14 2E 86 F1 | 	sub	local09, #20
1bcb4     18 00 90 AD |  if_e	jmp	#LR__2749
1bcb8     14 2E 06 F1 | 	add	local09, #20
1bcbc     17 47 02 FB | 	rdlong	local21, local09
1bcc0     2C 28 06 F1 | 	add	local06, #44
1bcc4     14 47 62 FC | 	wrlong	local21, local06
1bcc8     2C 28 86 F1 | 	sub	local06, #44
1bccc     1C 00 90 FD | 	jmp	#LR__2750
1bcd0                 | LR__2749
1bcd0     01 2A 06 F6 | 	mov	local07, #1
1bcd4     F2 12 02 F6 | 	mov	arg01, objptr
1bcd8     00 28 03 FF 
1bcdc     00 12 46 F5 | 	or	arg01, ##105906176
1bce0     2C 28 06 F1 | 	add	local06, #44
1bce4     14 13 62 FC | 	wrlong	arg01, local06
1bce8     2C 28 86 F1 | 	sub	local06, #44
1bcec                 | LR__2750
1bcec                 | LR__2751
1bcec                 | LR__2752
1bcec     00 2A 0E F2 | 	cmp	local07, #0 wz
1bcf0     14 13 02 56 |  if_ne	mov	arg01, local06
1bcf4     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
1bcf8     00 42 0E F2 | 	cmp	local19, #0 wz
1bcfc     00 12 06 A6 |  if_e	mov	arg01, #0
1bd00     10 00 90 5D |  if_ne	jmp	#LR__2753
1bd04     00 12 4E F2 | 	cmps	arg01, #0 wz
1bd08     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1bd0c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1bd10     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1bd14                 | LR__2753
1bd14     21 FB 01 F6 | 	mov	result1, local19
1bd18                 | LR__2754
1bd18     A7 F0 03 F6 | 	mov	ptra, fp
1bd1c     B2 00 A0 FD | 	call	#popregs_
1bd20                 | __system___openraw_ret
1bd20     2D 00 64 FD | 	ret
1bd24                 | 
1bd24                 | __system___closeraw
1bd24     05 4A 05 F6 | 	mov	COUNT_, #5
1bd28     A8 00 A0 FD | 	call	#pushregs_
1bd2c     09 1F 02 F6 | 	mov	local01, arg01
1bd30     00 20 06 F6 | 	mov	local02, #0
1bd34     08 1E 06 F1 | 	add	local01, #8
1bd38     0F FB 09 FB | 	rdlong	result1, local01 wz
1bd3c     08 1E 86 F1 | 	sub	local01, #8
1bd40     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1bd44     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1bd48     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1bd4c     01 FA 65 A6 |  if_e	neg	result1, #1
1bd50     A8 00 90 AD |  if_e	jmp	#LR__2762
1bd54     2C 1E 06 F1 | 	add	local01, #44
1bd58     0F FB 09 FB | 	rdlong	result1, local01 wz
1bd5c     2C 1E 86 F1 | 	sub	local01, #44
1bd60     38 00 90 AD |  if_e	jmp	#LR__2760
1bd64     2C 1E 06 F1 | 	add	local01, #44
1bd68     0F 23 02 FB | 	rdlong	local03, local01
1bd6c     11 25 02 F6 | 	mov	local04, local03
1bd70     2C 1E 86 F1 | 	sub	local01, #44
1bd74     13 24 46 F7 | 	zerox	local04, #19
1bd78     14 22 46 F0 | 	shr	local03, #20
1bd7c     02 22 66 F0 | 	shl	local03, #2
1bd80     ED 22 02 F1 | 	add	local03, __methods__
1bd84     11 23 02 FB | 	rdlong	local03, local03
1bd88     0F 13 02 F6 | 	mov	arg01, local01
1bd8c     F2 26 02 F6 | 	mov	local05, objptr
1bd90     12 E5 01 F6 | 	mov	objptr, local04
1bd94     2D 22 62 FD | 	call	local03
1bd98     13 E5 01 F6 | 	mov	objptr, local05
1bd9c                 | LR__2760
1bd9c     24 1E 06 F1 | 	add	local01, #36
1bda0     0F 27 0A FB | 	rdlong	local05, local01 wz
1bda4     24 1E 86 F1 | 	sub	local01, #36
1bda8     3C 00 90 AD |  if_e	jmp	#LR__2761
1bdac     24 1E 06 F1 | 	add	local01, #36
1bdb0     0F 23 02 FB | 	rdlong	local03, local01
1bdb4     11 25 02 F6 | 	mov	local04, local03
1bdb8     24 1E 86 F1 | 	sub	local01, #36
1bdbc     13 24 46 F7 | 	zerox	local04, #19
1bdc0     14 22 46 F0 | 	shr	local03, #20
1bdc4     02 22 66 F0 | 	shl	local03, #2
1bdc8     ED 22 02 F1 | 	add	local03, __methods__
1bdcc     11 23 02 FB | 	rdlong	local03, local03
1bdd0     0F 13 02 F6 | 	mov	arg01, local01
1bdd4     F2 26 02 F6 | 	mov	local05, objptr
1bdd8     12 E5 01 F6 | 	mov	objptr, local04
1bddc     2D 22 62 FD | 	call	local03
1bde0     13 E5 01 F6 | 	mov	objptr, local05
1bde4     FD 20 02 F6 | 	mov	local02, result1
1bde8                 | LR__2761
1bde8     0F 13 02 F6 | 	mov	arg01, local01
1bdec     00 14 06 F6 | 	mov	arg02, #0
1bdf0     34 16 06 F6 | 	mov	arg03, #52
1bdf4     98 00 A0 FD | 	call	#\builtin_bytefill_
1bdf8     10 FB 01 F6 | 	mov	result1, local02
1bdfc                 | LR__2762
1bdfc     A7 F0 03 F6 | 	mov	ptra, fp
1be00     B2 00 A0 FD | 	call	#popregs_
1be04                 | __system___closeraw_ret
1be04     2D 00 64 FD | 	ret
1be08                 | 
1be08                 | __system___vfs_open_sdcardx
1be08     0B 4A 05 F6 | 	mov	COUNT_, #11
1be0c     A8 00 A0 FD | 	call	#pushregs_
1be10     09 23 02 F6 | 	mov	local03, arg01
1be14     0A 25 02 F6 | 	mov	local04, arg02
1be18     0B 27 02 F6 | 	mov	local05, arg03
1be1c     0C 29 02 F6 | 	mov	local06, arg04
1be20     01 00 00 FF 
1be24     24 12 06 F6 | 	mov	arg01, ##548
1be28     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
1be2c     FD 2A 02 F6 | 	mov	local07, result1
1be30     01 00 00 FF 
1be34     34 12 06 F6 | 	mov	arg01, ##564
1be38     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
1be3c     FD 2C 02 F6 | 	mov	local08, result1
1be40     11 19 02 F6 | 	mov	arg04, local03
1be44     1F 18 C6 F0 | 	sar	arg04, #31
1be48     11 17 02 F6 | 	mov	arg03, local03
1be4c     01 12 06 F6 | 	mov	arg01, #1
1be50     00 14 06 F6 | 	mov	arg02, #0
1be54     30 DF BF FD | 	call	#__system___int64_shl
1be58     FD 1E 02 F6 | 	mov	local01, result1
1be5c     FE 2E 02 F6 | 	mov	local09, result2
1be60     12 19 02 F6 | 	mov	arg04, local04
1be64     1F 18 C6 F0 | 	sar	arg04, #31
1be68     12 17 02 F6 | 	mov	arg03, local04
1be6c     01 12 06 F6 | 	mov	arg01, #1
1be70     00 14 06 F6 | 	mov	arg02, #0
1be74     10 DF BF FD | 	call	#__system___int64_shl
1be78     FD 1E 42 F5 | 	or	local01, result1
1be7c     FE 2E 42 F5 | 	or	local09, result2
1be80     13 19 02 F6 | 	mov	arg04, local05
1be84     1F 18 C6 F0 | 	sar	arg04, #31
1be88     13 17 02 F6 | 	mov	arg03, local05
1be8c     01 12 06 F6 | 	mov	arg01, #1
1be90     00 14 06 F6 | 	mov	arg02, #0
1be94     F0 DE BF FD | 	call	#__system___int64_shl
1be98     FD 1E 42 F5 | 	or	local01, result1
1be9c     FE 2E 42 F5 | 	or	local09, result2
1bea0     14 19 02 F6 | 	mov	arg04, local06
1bea4     1F 18 C6 F0 | 	sar	arg04, #31
1bea8     14 17 02 F6 | 	mov	arg03, local06
1beac     01 12 06 F6 | 	mov	arg01, #1
1beb0     00 14 06 F6 | 	mov	arg02, #0
1beb4     D0 DE BF FD | 	call	#__system___int64_shl
1beb8     17 15 02 F6 | 	mov	arg02, local09
1bebc     FD 1E 42 F5 | 	or	local01, result1
1bec0     0A FD 41 F5 | 	or	result2, arg02
1bec4     FE 20 02 F6 | 	mov	local02, result2
1bec8     0F 13 02 F6 | 	mov	arg01, local01
1becc     10 15 02 F6 | 	mov	arg02, local02
1bed0     EC DE BF FD | 	call	#__system___usepins
1bed4     00 FA 0D F2 | 	cmp	result1, #0 wz
1bed8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1bedc     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
1bee0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1bee4     00 FA 05 A6 |  if_e	mov	result1, #0
1bee8     B4 00 90 AD |  if_e	jmp	#LR__2772
1beec     0F 31 02 F6 | 	mov	local10, local01
1bef0     10 2F 02 F6 | 	mov	local09, local02
1bef4     01 00 00 FF 
1bef8     08 2A 06 F1 | 	add	local07, ##520
1befc     15 31 62 FC | 	wrlong	local10, local07
1bf00     04 2A 06 F1 | 	add	local07, #4
1bf04     15 2F 62 FC | 	wrlong	local09, local07
1bf08     01 00 00 FF 
1bf0c     0C 2A 86 F1 | 	sub	local07, ##524
1bf10     14 1B 02 F6 | 	mov	arg05, local06
1bf14     00 12 06 F6 | 	mov	arg01, #0
1bf18     11 15 02 F6 | 	mov	arg02, local03
1bf1c     12 17 02 F6 | 	mov	arg03, local04
1bf20     13 19 02 F6 | 	mov	arg04, local05
1bf24     F2 30 02 F6 | 	mov	local10, objptr
1bf28     15 E5 01 F6 | 	mov	objptr, local07
1bf2c     94 26 B0 FD | 	call	#_fatfs_cc_disk_setpins
1bf30     18 E5 01 F6 | 	mov	objptr, local10
1bf34     FD 32 0A F6 | 	mov	local11, result1 wz
1bf38     24 00 90 5D |  if_ne	jmp	#LR__2770
1bf3c     34 01 00 FF 
1bf40     0A 15 06 F6 | 	mov	arg02, ##@LR__4157
1bf44     16 13 02 F6 | 	mov	arg01, local08
1bf48     00 16 06 F6 | 	mov	arg03, #0
1bf4c     F2 32 02 F6 | 	mov	local11, objptr
1bf50     15 E5 01 F6 | 	mov	objptr, local07
1bf54     C4 5D B0 FD | 	call	#_fatfs_cc_f_mount
1bf58     19 E5 01 F6 | 	mov	objptr, local11
1bf5c     FD 32 02 F6 | 	mov	local11, result1
1bf60                 | LR__2770
1bf60     00 32 0E F2 | 	cmp	local11, #0 wz
1bf64     24 00 90 AD |  if_e	jmp	#LR__2771
1bf68     0F 13 02 F6 | 	mov	arg01, local01
1bf6c     10 15 02 F6 | 	mov	arg02, local02
1bf70     A0 DE BF FD | 	call	#__system___freepins
1bf74     19 13 6A F6 | 	neg	arg01, local11 wz
1bf78     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1bf7c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1bf80     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1bf84     00 FA 05 F6 | 	mov	result1, #0
1bf88     14 00 90 FD | 	jmp	#LR__2772
1bf8c                 | LR__2771
1bf8c     15 13 02 F6 | 	mov	arg01, local07
1bf90     F2 32 02 F6 | 	mov	local11, objptr
1bf94     15 E5 01 F6 | 	mov	objptr, local07
1bf98     60 9A B0 FD | 	call	#_fatfs_cc_get_vfs
1bf9c     19 E5 01 F6 | 	mov	objptr, local11
1bfa0                 | LR__2772
1bfa0     A7 F0 03 F6 | 	mov	ptra, fp
1bfa4     B2 00 A0 FD | 	call	#popregs_
1bfa8                 | __system___vfs_open_sdcardx_ret
1bfa8     2D 00 64 FD | 	ret
1bfac                 | 
1bfac                 | __system____default_getc
1bfac     03 4A 05 F6 | 	mov	COUNT_, #3
1bfb0     A8 00 A0 FD | 	call	#pushregs_
1bfb4     09 1F 02 F6 | 	mov	local01, arg01
1bfb8     0F 21 02 FB | 	rdlong	local02, local01
1bfbc     08 20 06 F1 | 	add	local02, #8
1bfc0     10 23 02 FB | 	rdlong	local03, local02
1bfc4     02 22 CE F7 | 	test	local03, #2 wz
1bfc8     0F 13 02 56 |  if_ne	mov	arg01, local01
1bfcc     00 01 B0 5D |  if_ne	call	#__system____default_flush
1bfd0     10 23 02 FB | 	rdlong	local03, local02
1bfd4     01 22 46 F5 | 	or	local03, #1
1bfd8     10 23 62 FC | 	wrlong	local03, local02
1bfdc     08 20 86 F1 | 	sub	local02, #8
1bfe0     10 23 0A FB | 	rdlong	local03, local02 wz
1bfe4     0C 00 90 5D |  if_ne	jmp	#LR__2780
1bfe8     0F 13 02 F6 | 	mov	arg01, local01
1bfec     7C 15 B0 FD | 	call	#__system____default_filbuf
1bff0     FD 22 02 F6 | 	mov	local03, result1
1bff4                 | LR__2780
1bff4     01 22 56 F2 | 	cmps	local03, #1 wc
1bff8     01 FA 65 C6 |  if_b	neg	result1, #1
1bffc     1C 00 90 CD |  if_b	jmp	#LR__2781
1c000     01 22 86 F1 | 	sub	local03, #1
1c004     10 23 62 FC | 	wrlong	local03, local02
1c008     04 20 06 F1 | 	add	local02, #4
1c00c     10 23 02 FB | 	rdlong	local03, local02
1c010     11 FB C1 FA | 	rdbyte	result1, local03
1c014     01 22 06 F1 | 	add	local03, #1
1c018     10 23 62 FC | 	wrlong	local03, local02
1c01c                 | LR__2781
1c01c     A7 F0 03 F6 | 	mov	ptra, fp
1c020     B2 00 A0 FD | 	call	#popregs_
1c024                 | __system____default_getc_ret
1c024     2D 00 64 FD | 	ret
1c028                 | 
1c028                 | __system____default_putc
1c028     06 4A 05 F6 | 	mov	COUNT_, #6
1c02c     A8 00 A0 FD | 	call	#pushregs_
1c030     09 1F 02 F6 | 	mov	local01, arg01
1c034     0A 21 02 F6 | 	mov	local02, arg02
1c038     10 23 02 FB | 	rdlong	local03, local02
1c03c     08 22 06 F1 | 	add	local03, #8
1c040     11 FB 01 FB | 	rdlong	result1, local03
1c044     01 FA CD F7 | 	test	result1, #1 wz
1c048     10 13 02 56 |  if_ne	mov	arg01, local02
1c04c     80 00 B0 5D |  if_ne	call	#__system____default_flush
1c050     11 25 02 FB | 	rdlong	local04, local03
1c054     02 24 46 F5 | 	or	local04, #2
1c058     11 25 62 FC | 	wrlong	local04, local03
1c05c     08 22 86 F1 | 	sub	local03, #8
1c060     11 27 02 FB | 	rdlong	local05, local03
1c064     10 22 06 F1 | 	add	local03, #16
1c068     11 15 02 FB | 	rdlong	arg02, local03
1c06c     10 22 86 F1 | 	sub	local03, #16
1c070     13 FB 01 F6 | 	mov	result1, local05
1c074     0A FB 01 F1 | 	add	result1, arg02
1c078     FD 1E 42 FC | 	wrbyte	local01, result1
1c07c     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1c080     01 26 06 F1 | 	add	local05, #1
1c084     11 27 62 FC | 	wrlong	local05, local03
1c088     06 20 06 F1 | 	add	local02, #6
1c08c     10 29 EA FA | 	rdword	local06, local02 wz
1c090     06 20 86 F1 | 	sub	local02, #6
1c094     0C 22 06 51 |  if_ne	add	local03, #12
1c098     11 25 02 5B |  if_ne	rdlong	local04, local03
1c09c     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
1c0a0     0C 00 90 AD |  if_e	jmp	#LR__2790
1c0a4     0A 1E 0E F2 | 	cmp	local01, #10 wz
1c0a8     01 28 0E A2 |  if_e	cmp	local06, #1 wz
1c0ac     10 00 90 5D |  if_ne	jmp	#LR__2791
1c0b0                 | LR__2790
1c0b0     10 13 02 F6 | 	mov	arg01, local02
1c0b4     18 00 B0 FD | 	call	#__system____default_flush
1c0b8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c0bc     01 1E 66 56 |  if_ne	neg	local01, #1
1c0c0                 | LR__2791
1c0c0     0F FB 01 F6 | 	mov	result1, local01
1c0c4     A7 F0 03 F6 | 	mov	ptra, fp
1c0c8     B2 00 A0 FD | 	call	#popregs_
1c0cc                 | __system____default_putc_ret
1c0cc     2D 00 64 FD | 	ret
1c0d0                 | 
1c0d0                 | __system____default_flush
1c0d0     06 4A 05 F6 | 	mov	COUNT_, #6
1c0d4     A8 00 A0 FD | 	call	#pushregs_
1c0d8     09 1F 02 F6 | 	mov	local01, arg01
1c0dc     0F 21 02 FB | 	rdlong	local02, local01
1c0e0     10 23 02 FB | 	rdlong	local03, local02
1c0e4     08 20 06 F1 | 	add	local02, #8
1c0e8     10 FB 01 FB | 	rdlong	result1, local02
1c0ec     08 20 86 F1 | 	sub	local02, #8
1c0f0     02 FA CD F7 | 	test	result1, #2 wz
1c0f4     D0 00 90 AD |  if_e	jmp	#LR__2802
1c0f8     01 22 56 F2 | 	cmps	local03, #1 wc
1c0fc     20 01 90 CD |  if_b	jmp	#LR__2804
1c100     08 1E 06 F1 | 	add	local01, #8
1c104     0F FB 01 FB | 	rdlong	result1, local01
1c108     08 1E 86 F1 | 	sub	local01, #8
1c10c     40 FA CD F7 | 	test	result1, #64 wz
1c110     68 00 90 AD |  if_e	jmp	#LR__2801
1c114     08 1E 06 F1 | 	add	local01, #8
1c118     0F 17 02 FB | 	rdlong	arg03, local01
1c11c     08 1E 86 F1 | 	sub	local01, #8
1c120     80 16 CE F7 | 	test	arg03, #128 wz
1c124     54 00 90 AD |  if_e	jmp	#LR__2800
1c128     30 1E 06 F1 | 	add	local01, #48
1c12c     0F 25 02 FB | 	rdlong	local04, local01
1c130     12 27 02 F6 | 	mov	local05, local04
1c134     30 1E 86 F1 | 	sub	local01, #48
1c138     13 26 46 F7 | 	zerox	local05, #19
1c13c     14 24 46 F0 | 	shr	local04, #20
1c140     02 24 66 F0 | 	shl	local04, #2
1c144     ED 24 02 F1 | 	add	local04, __methods__
1c148     12 25 02 FB | 	rdlong	local04, local04
1c14c     0F 13 02 F6 | 	mov	arg01, local01
1c150     00 14 06 F6 | 	mov	arg02, #0
1c154     02 16 06 F6 | 	mov	arg03, #2
1c158     F2 28 02 F6 | 	mov	local06, objptr
1c15c     13 E5 01 F6 | 	mov	objptr, local05
1c160     2D 24 62 FD | 	call	local04
1c164     14 E5 01 F6 | 	mov	objptr, local06
1c168     08 1E 06 F1 | 	add	local01, #8
1c16c     0F 29 02 FB | 	rdlong	local06, local01
1c170     80 28 26 F5 | 	andn	local06, #128
1c174     0F 29 62 FC | 	wrlong	local06, local01
1c178     08 1E 86 F1 | 	sub	local01, #8
1c17c                 | LR__2800
1c17c                 | LR__2801
1c17c     18 1E 06 F1 | 	add	local01, #24
1c180     0F 25 02 FB | 	rdlong	local04, local01
1c184     12 27 02 F6 | 	mov	local05, local04
1c188     18 1E 86 F1 | 	sub	local01, #24
1c18c     13 26 46 F7 | 	zerox	local05, #19
1c190     14 24 46 F0 | 	shr	local04, #20
1c194     02 24 66 F0 | 	shl	local04, #2
1c198     ED 24 02 F1 | 	add	local04, __methods__
1c19c     12 25 02 FB | 	rdlong	local04, local04
1c1a0     10 20 06 F1 | 	add	local02, #16
1c1a4     10 15 02 FB | 	rdlong	arg02, local02
1c1a8     10 20 86 F1 | 	sub	local02, #16
1c1ac     0F 13 02 F6 | 	mov	arg01, local01
1c1b0     11 17 02 F6 | 	mov	arg03, local03
1c1b4     F2 28 02 F6 | 	mov	local06, objptr
1c1b8     13 E5 01 F6 | 	mov	objptr, local05
1c1bc     2D 24 62 FD | 	call	local04
1c1c0     14 E5 01 F6 | 	mov	objptr, local06
1c1c4     58 00 90 FD | 	jmp	#LR__2804
1c1c8                 | LR__2802
1c1c8     08 20 06 F1 | 	add	local02, #8
1c1cc     10 29 02 FB | 	rdlong	local06, local02
1c1d0     08 20 86 F1 | 	sub	local02, #8
1c1d4     01 28 CE F7 | 	test	local06, #1 wz
1c1d8     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1c1dc     40 00 90 AD |  if_e	jmp	#LR__2803
1c1e0     30 1E 06 F1 | 	add	local01, #48
1c1e4     0F 25 02 FB | 	rdlong	local04, local01
1c1e8     12 27 02 F6 | 	mov	local05, local04
1c1ec     30 1E 86 F1 | 	sub	local01, #48
1c1f0     13 26 46 F7 | 	zerox	local05, #19
1c1f4     14 24 46 F0 | 	shr	local04, #20
1c1f8     02 24 66 F0 | 	shl	local04, #2
1c1fc     ED 24 02 F1 | 	add	local04, __methods__
1c200     12 25 02 FB | 	rdlong	local04, local04
1c204     0F 13 02 F6 | 	mov	arg01, local01
1c208     11 15 62 F6 | 	neg	arg02, local03
1c20c     01 16 06 F6 | 	mov	arg03, #1
1c210     F2 28 02 F6 | 	mov	local06, objptr
1c214     13 E5 01 F6 | 	mov	objptr, local05
1c218     2D 24 62 FD | 	call	local04
1c21c     14 E5 01 F6 | 	mov	objptr, local06
1c220                 | LR__2803
1c220                 | LR__2804
1c220     10 01 68 FC | 	wrlong	#0, local02
1c224     04 20 06 F1 | 	add	local02, #4
1c228     10 01 68 FC | 	wrlong	#0, local02
1c22c     04 20 06 F1 | 	add	local02, #4
1c230     10 01 68 FC | 	wrlong	#0, local02
1c234     00 FA 05 F6 | 	mov	result1, #0
1c238     A7 F0 03 F6 | 	mov	ptra, fp
1c23c     B2 00 A0 FD | 	call	#popregs_
1c240                 | __system____default_flush_ret
1c240     2D 00 64 FD | 	ret
1c244                 | 
1c244                 | __system____default_buffer_init
1c244     02 4A 05 F6 | 	mov	COUNT_, #2
1c248     A8 00 A0 FD | 	call	#pushregs_
1c24c     09 1F 02 F6 | 	mov	local01, arg01
1c250     0F 21 02 FB | 	rdlong	local02, local01
1c254     0F 13 02 F6 | 	mov	arg01, local01
1c258     F8 02 B0 FD | 	call	#__system___isatty
1c25c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c260     06 1E 06 51 |  if_ne	add	local01, #6
1c264     0F 0B 58 5C |  if_ne	wrword	#5, local01
1c268     06 1E 06 A1 |  if_e	add	local01, #6
1c26c     0F 0D 58 AC |  if_e	wrword	#6, local01
1c270     14 20 06 F1 | 	add	local02, #20
1c274     10 1F 02 F6 | 	mov	local01, local02
1c278     04 20 86 F1 | 	sub	local02, #4
1c27c     10 1F 62 FC | 	wrlong	local01, local02
1c280     04 20 86 F1 | 	sub	local02, #4
1c284     02 00 80 FF 
1c288     10 01 68 FC | 	wrlong	##1024, local02
1c28c     00 FA 05 F6 | 	mov	result1, #0
1c290     A7 F0 03 F6 | 	mov	ptra, fp
1c294     B2 00 A0 FD | 	call	#popregs_
1c298                 | __system____default_buffer_init_ret
1c298     2D 00 64 FD | 	ret
1c29c                 | 
1c29c                 | __system__stat
1c29c     04 4A 05 F6 | 	mov	COUNT_, #4
1c2a0     A8 00 A0 FD | 	call	#pushregs_
1c2a4     0A 1F 02 F6 | 	mov	local01, arg02
1c2a8     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1c2ac     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
1c2b0     09 15 02 F6 | 	mov	arg02, arg01
1c2b4     10 13 02 F6 | 	mov	arg01, local02
1c2b8     00 16 06 F6 | 	mov	arg03, #0
1c2bc     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1c2c0     2C BD BF FD | 	call	#__system____getvfsforfile
1c2c4     FD 22 0A F6 | 	mov	local03, result1 wz
1c2c8     10 00 90 AD |  if_e	jmp	#LR__2810
1c2cc     34 22 06 F1 | 	add	local03, #52
1c2d0     11 17 0A FB | 	rdlong	arg03, local03 wz
1c2d4     34 22 86 F1 | 	sub	local03, #52
1c2d8     14 00 90 5D |  if_ne	jmp	#LR__2811
1c2dc                 | LR__2810
1c2dc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1c2e0     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1c2e4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1c2e8     01 FA 65 F6 | 	neg	result1, #1
1c2ec     68 00 90 FD | 	jmp	#LR__2812
1c2f0                 | LR__2811
1c2f0     0F 13 02 F6 | 	mov	arg01, local01
1c2f4     00 14 06 F6 | 	mov	arg02, #0
1c2f8     30 16 06 F6 | 	mov	arg03, #48
1c2fc     09 25 02 F6 | 	mov	local04, arg01
1c300     98 00 A0 FD | 	call	#\builtin_bytefill_
1c304     12 FB 01 F6 | 	mov	result1, local04
1c308     10 13 CA FA | 	rdbyte	arg01, local02 wz
1c30c     08 1E 06 A1 |  if_e	add	local01, #8
1c310     08 00 80 AF 
1c314     0F FF 6B AC |  if_e	wrlong	##4607, local01
1c318     00 FA 05 A6 |  if_e	mov	result1, #0
1c31c     38 00 90 AD |  if_e	jmp	#LR__2812
1c320     34 22 06 F1 | 	add	local03, #52
1c324     11 23 02 FB | 	rdlong	local03, local03
1c328     11 25 02 F6 | 	mov	local04, local03
1c32c     13 22 46 F7 | 	zerox	local03, #19
1c330     14 24 46 F0 | 	shr	local04, #20
1c334     02 24 66 F0 | 	shl	local04, #2
1c338     ED 24 02 F1 | 	add	local04, __methods__
1c33c     12 25 02 FB | 	rdlong	local04, local04
1c340     10 13 02 F6 | 	mov	arg01, local02
1c344     0F 15 02 F6 | 	mov	arg02, local01
1c348     F2 20 02 F6 | 	mov	local02, objptr
1c34c     11 E5 01 F6 | 	mov	objptr, local03
1c350     2D 24 62 FD | 	call	local04
1c354     10 E5 01 F6 | 	mov	objptr, local02
1c358                 | LR__2812
1c358     A7 F0 03 F6 | 	mov	ptra, fp
1c35c     B2 00 A0 FD | 	call	#popregs_
1c360                 | __system__stat_ret
1c360     2D 00 64 FD | 	ret
1c364                 | 
1c364                 | __system__read
1c364     0A 12 16 F2 | 	cmp	arg01, #10 wc
1c368     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1c36c     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1c370     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1c374     01 FA 65 36 |  if_ae	neg	result1, #1
1c378     20 00 90 3D |  if_ae	jmp	#LR__2820
1c37c     34 12 06 FD | 	qmul	arg01, #52
1c380     02 00 00 FF 
1c384     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1c388     18 12 62 FD | 	getqx	arg01
1c38c     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1c390     02 00 00 FF 
1c394     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1c398     E8 0E B0 FD | 	call	#__system___vfsread
1c39c                 | LR__2820
1c39c                 | __system__read_ret
1c39c     2D 00 64 FD | 	ret
1c3a0                 | 
1c3a0                 | __system__close
1c3a0     0A 12 16 F2 | 	cmp	arg01, #10 wc
1c3a4     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1c3a8     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1c3ac     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1c3b0     01 FA 65 36 |  if_ae	neg	result1, #1
1c3b4     20 00 90 3D |  if_ae	jmp	#LR__2830
1c3b8     34 12 06 FD | 	qmul	arg01, #52
1c3bc     02 00 00 FF 
1c3c0     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1c3c4     18 12 62 FD | 	getqx	arg01
1c3c8     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1c3cc     02 00 00 FF 
1c3d0     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1c3d4     4C F9 BF FD | 	call	#__system___closeraw
1c3d8                 | LR__2830
1c3d8                 | __system__close_ret
1c3d8     2D 00 64 FD | 	ret
1c3dc                 | 
1c3dc                 | __system__lseek
1c3dc     06 4A 05 F6 | 	mov	COUNT_, #6
1c3e0     A8 00 A0 FD | 	call	#pushregs_
1c3e4     0A 12 16 F2 | 	cmp	arg01, #10 wc
1c3e8     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1c3ec     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1c3f0     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1c3f4     01 FA 65 36 |  if_ae	neg	result1, #1
1c3f8     C4 00 90 3D |  if_ae	jmp	#LR__2841
1c3fc     34 12 06 FD | 	qmul	arg01, #52
1c400     02 00 00 FF 
1c404     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1c408     18 1E 62 FD | 	getqx	local01
1c40c     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
1c410     30 1E 06 F1 | 	add	local01, #48
1c414     0F 13 0A FB | 	rdlong	arg01, local01 wz
1c418     30 1E 86 F1 | 	sub	local01, #48
1c41c     02 00 00 FF 
1c420     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1c424     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1c428     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
1c42c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1c430     01 FA 65 A6 |  if_e	neg	result1, #1
1c434     88 00 90 AD |  if_e	jmp	#LR__2841
1c438     08 1E 06 F1 | 	add	local01, #8
1c43c     0F 21 02 FB | 	rdlong	local02, local01
1c440     08 1E 86 F1 | 	sub	local01, #8
1c444     40 20 CE F7 | 	test	local02, #64 wz
1c448     08 1E 06 51 |  if_ne	add	local01, #8
1c44c     0F 21 02 5B |  if_ne	rdlong	local02, local01
1c450     80 20 46 55 |  if_ne	or	local02, #128
1c454     0F 21 62 5C |  if_ne	wrlong	local02, local01
1c458     08 1E 86 51 |  if_ne	sub	local01, #8
1c45c     30 1E 06 F1 | 	add	local01, #48
1c460     0F 23 02 FB | 	rdlong	local03, local01
1c464     11 25 02 F6 | 	mov	local04, local03
1c468     30 1E 86 F1 | 	sub	local01, #48
1c46c     13 24 46 F7 | 	zerox	local04, #19
1c470     14 22 46 F0 | 	shr	local03, #20
1c474     02 22 66 F0 | 	shl	local03, #2
1c478     ED 22 02 F1 | 	add	local03, __methods__
1c47c     11 23 02 FB | 	rdlong	local03, local03
1c480     0F 13 02 F6 | 	mov	arg01, local01
1c484     F2 26 02 F6 | 	mov	local05, objptr
1c488     12 E5 01 F6 | 	mov	objptr, local04
1c48c     2D 22 62 FD | 	call	local03
1c490     13 E5 01 F6 | 	mov	objptr, local05
1c494     FD 28 02 F6 | 	mov	local06, result1
1c498     00 28 56 F2 | 	cmps	local06, #0 wc
1c49c     1C 00 90 3D |  if_ae	jmp	#LR__2840
1c4a0     14 13 6A F6 | 	neg	arg01, local06 wz
1c4a4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1c4a8     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1c4ac     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1c4b0     01 FA 65 56 |  if_ne	neg	result1, #1
1c4b4     00 FA 05 A6 |  if_e	mov	result1, #0
1c4b8     04 00 90 FD | 	jmp	#LR__2841
1c4bc                 | LR__2840
1c4bc     14 FB 01 F6 | 	mov	result1, local06
1c4c0                 | LR__2841
1c4c0     A7 F0 03 F6 | 	mov	ptra, fp
1c4c4     B2 00 A0 FD | 	call	#popregs_
1c4c8                 | __system__lseek_ret
1c4c8     2D 00 64 FD | 	ret
1c4cc                 | 
1c4cc                 | __system___ioctl
1c4cc     03 4A 05 F6 | 	mov	COUNT_, #3
1c4d0     A8 00 A0 FD | 	call	#pushregs_
1c4d4     00 12 4E F2 | 	cmps	arg01, #0 wz
1c4d8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1c4dc     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1c4e0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1c4e4     01 FA 65 A6 |  if_e	neg	result1, #1
1c4e8     5C 00 90 AD |  if_e	jmp	#LR__2851
1c4ec     28 12 06 F1 | 	add	arg01, #40
1c4f0     09 1F 02 FB | 	rdlong	local01, arg01
1c4f4     0F 21 02 F6 | 	mov	local02, local01
1c4f8     28 12 86 F1 | 	sub	arg01, #40
1c4fc     13 20 46 F7 | 	zerox	local02, #19
1c500     14 1E 46 F0 | 	shr	local01, #20
1c504     02 1E 66 F0 | 	shl	local01, #2
1c508     ED 1E 02 F1 | 	add	local01, __methods__
1c50c     0F 1F 02 FB | 	rdlong	local01, local01
1c510     F2 22 02 F6 | 	mov	local03, objptr
1c514     10 E5 01 F6 | 	mov	objptr, local02
1c518     2D 1E 62 FD | 	call	local01
1c51c     11 E5 01 F6 | 	mov	objptr, local03
1c520     FD 12 0A F6 | 	mov	arg01, result1 wz
1c524     1C 00 90 AD |  if_e	jmp	#LR__2850
1c528     00 12 4E F2 | 	cmps	arg01, #0 wz
1c52c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1c530     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1c534     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1c538     01 FA 65 56 |  if_ne	neg	result1, #1
1c53c     00 FA 05 A6 |  if_e	mov	result1, #0
1c540     04 00 90 FD | 	jmp	#LR__2851
1c544                 | LR__2850
1c544     00 FA 05 F6 | 	mov	result1, #0
1c548                 | LR__2851
1c548     A7 F0 03 F6 | 	mov	ptra, fp
1c54c     B2 00 A0 FD | 	call	#popregs_
1c550                 | __system___ioctl_ret
1c550     2D 00 64 FD | 	ret
1c554                 | 
1c554                 | __system___isatty
1c554     00 4A 05 F6 | 	mov	COUNT_, #0
1c558     A8 00 A0 FD | 	call	#pushregs_
1c55c     0C F0 07 F1 | 	add	ptra, #12
1c560     04 4E 05 F1 | 	add	fp, #4
1c564     A7 12 62 FC | 	wrlong	arg01, fp
1c568     04 4E 05 F1 | 	add	fp, #4
1c56c     A7 16 02 F6 | 	mov	arg03, fp
1c570     08 4E 85 F1 | 	sub	fp, #8
1c574     00 15 06 F6 | 	mov	arg02, #256
1c578     50 FF BF FD | 	call	#__system___ioctl
1c57c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c580     01 FA 05 A6 |  if_e	mov	result1, #1
1c584     00 FA 05 56 |  if_ne	mov	result1, #0
1c588     A7 F0 03 F6 | 	mov	ptra, fp
1c58c     B2 00 A0 FD | 	call	#popregs_
1c590                 | __system___isatty_ret
1c590     2D 00 64 FD | 	ret
1c594                 | 
1c594                 | __system____getftab
1c594     0A 12 16 F2 | 	cmp	arg01, #10 wc
1c598     34 12 06 CD |  if_b	qmul	arg01, #52
1c59c     00 FA 05 36 |  if_ae	mov	result1, #0
1c5a0     02 00 00 CF 
1c5a4     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
1c5a8     18 FA 61 CD |  if_b	getqx	result1
1c5ac     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
1c5b0     02 00 00 CF 
1c5b4     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
1c5b8                 | __system____getftab_ret
1c5b8     2D 00 64 FD | 	ret
1c5bc                 | 
1c5bc                 | __system__strncpy
1c5bc     09 01 02 F6 | 	mov	_var01, arg01
1c5c0                 | LR__2860
1c5c0     01 16 86 F1 | 	sub	arg03, #1
1c5c4     00 16 56 F2 | 	cmps	arg03, #0 wc
1c5c8     18 00 90 CD |  if_b	jmp	#LR__2861
1c5cc     0A FB C1 FA | 	rdbyte	result1, arg02
1c5d0     00 FB 41 FC | 	wrbyte	result1, _var01
1c5d4     01 14 06 F1 | 	add	arg02, #1
1c5d8     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1c5dc     01 00 06 F1 | 	add	_var01, #1
1c5e0     DC FF 9F 5D |  if_ne	jmp	#LR__2860
1c5e4                 | LR__2861
1c5e4     97 0C 48 FB | 	callpa	#(@LR__2863-@LR__2862)>>2,fcache_load_ptr_
1c5e8                 | LR__2862
1c5e8     01 16 86 F1 | 	sub	arg03, #1
1c5ec     00 16 56 F2 | 	cmps	arg03, #0 wc
1c5f0     00 03 02 36 |  if_ae	mov	_var02, _var01
1c5f4     01 00 06 31 |  if_ae	add	_var01, #1
1c5f8     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1c5fc     E8 FF 9F 3D |  if_ae	jmp	#LR__2862
1c600                 | LR__2863
1c600     09 FB 01 F6 | 	mov	result1, arg01
1c604                 | __system__strncpy_ret
1c604     2D 00 64 FD | 	ret
1c608                 | 
1c608                 | __system__strncat
1c608     00 14 4E F2 | 	cmps	arg02, #0 wz
1c60c     50 00 90 AD |  if_e	jmp	#LR__2874
1c610     01 16 16 F2 | 	cmp	arg03, #1 wc
1c614     48 00 90 CD |  if_b	jmp	#LR__2874
1c618     09 01 02 F6 | 	mov	_var01, arg01
1c61c     97 1E 48 FB | 	callpa	#(@LR__2872-@LR__2870)>>2,fcache_load_ptr_
1c620                 | LR__2870
1c620     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1c624     01 00 06 51 |  if_ne	add	_var01, #1
1c628     F4 FF 9F 5D |  if_ne	jmp	#LR__2870
1c62c     0B 03 02 F6 | 	mov	_var02, arg03
1c630                 | LR__2871
1c630     0A 05 C2 FA | 	rdbyte	_var03, arg02
1c634     02 07 02 F6 | 	mov	_var04, _var03
1c638     07 06 4E F7 | 	zerox	_var04, #7 wz
1c63c     01 14 06 F1 | 	add	arg02, #1
1c640     18 00 90 AD |  if_e	jmp	#LR__2873
1c644     01 02 86 F1 | 	sub	_var02, #1
1c648     00 02 56 F2 | 	cmps	_var02, #0 wc
1c64c     00 07 02 36 |  if_ae	mov	_var04, _var01
1c650     01 00 06 31 |  if_ae	add	_var01, #1
1c654     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
1c658     D4 FF 9F 3D |  if_ae	jmp	#LR__2871
1c65c                 | LR__2872
1c65c                 | LR__2873
1c65c     00 01 48 FC | 	wrbyte	#0, _var01
1c660                 | LR__2874
1c660     09 FB 01 F6 | 	mov	result1, arg01
1c664                 | __system__strncat_ret
1c664     2D 00 64 FD | 	ret
1c668                 | 
1c668                 | __system__strncmp
1c668     09 01 0A F6 | 	mov	_var01, arg01 wz
1c66c     14 00 90 5D |  if_ne	jmp	#LR__2880
1c670     00 14 0E F2 | 	cmp	arg02, #0 wz
1c674     01 02 66 56 |  if_ne	neg	_var02, #1
1c678     00 02 06 A6 |  if_e	mov	_var02, #0
1c67c     01 FB 01 F6 | 	mov	result1, _var02
1c680     74 00 90 FD | 	jmp	#__system__strncmp_ret
1c684                 | LR__2880
1c684     00 14 0E F2 | 	cmp	arg02, #0 wz
1c688     01 FA 05 A6 |  if_e	mov	result1, #1
1c68c     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1c690     0B 05 02 F6 | 	mov	_var03, arg03
1c694     97 16 48 FB | 	callpa	#(@LR__2882-@LR__2881)>>2,fcache_load_ptr_
1c698                 | LR__2881
1c698     00 07 C2 FA | 	rdbyte	_var04, _var01
1c69c     0A 09 02 F6 | 	mov	_var05, arg02
1c6a0     04 0B C2 FA | 	rdbyte	_var06, _var05
1c6a4     01 04 86 F1 | 	sub	_var03, #1
1c6a8     00 04 56 F2 | 	cmps	_var03, #0 wc
1c6ac     01 00 06 F1 | 	add	_var01, #1
1c6b0     01 14 06 F1 | 	add	arg02, #1
1c6b4     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1c6b8     08 00 90 2D |  if_nc_and_z	jmp	#LR__2883
1c6bc     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1c6c0     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__2881
1c6c4                 | LR__2882
1c6c4                 | LR__2883
1c6c4     00 04 56 F2 | 	cmps	_var03, #0 wc
1c6c8     00 FA 05 C6 |  if_b	mov	result1, #0
1c6cc     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
1c6d0     05 07 0A F2 | 	cmp	_var04, _var06 wz
1c6d4     00 FA 05 A6 |  if_e	mov	result1, #0
1c6d8     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1c6dc     00 06 0E F2 | 	cmp	_var04, #0 wz
1c6e0     01 FA 65 A6 |  if_e	neg	result1, #1
1c6e4     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1c6e8     00 0A 0E F2 | 	cmp	_var06, #0 wz
1c6ec     01 FA 05 A6 |  if_e	mov	result1, #1
1c6f0     03 FB 01 56 |  if_ne	mov	result1, _var04
1c6f4     05 FB 81 51 |  if_ne	sub	result1, _var06
1c6f8                 | __system__strncmp_ret
1c6f8     2D 00 64 FD | 	ret
1c6fc                 | 
1c6fc                 | __system____root_opendir
1c6fc     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1c700     04 12 06 F1 | 	add	arg01, #4
1c704     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
1c708     00 FA 05 F6 | 	mov	result1, #0
1c70c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1c710                 | __system____root_opendir_ret
1c710     2D 00 64 FD | 	ret
1c714                 | 
1c714                 | __system____root_readdir
1c714     03 4A 05 F6 | 	mov	COUNT_, #3
1c718     A8 00 A0 FD | 	call	#pushregs_
1c71c     09 1F 02 F6 | 	mov	local01, arg01
1c720     0A 21 02 F6 | 	mov	local02, arg02
1c724     04 1E 06 F1 | 	add	local01, #4
1c728     0F 23 02 FB | 	rdlong	local03, local01
1c72c     04 1E 86 F1 | 	sub	local01, #4
1c730                 | LR__2890
1c730     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1c734     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
1c738     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1c73c     01 FA 65 A6 |  if_e	neg	result1, #1
1c740     48 00 90 AD |  if_e	jmp	#LR__2891
1c744     11 17 0A FB | 	rdlong	arg03, local03 wz
1c748     04 22 06 A1 |  if_e	add	local03, #4
1c74c     E0 FF 9F AD |  if_e	jmp	#LR__2890
1c750     11 15 02 FB | 	rdlong	arg02, local03
1c754     01 14 06 F1 | 	add	arg02, #1
1c758     10 13 02 F6 | 	mov	arg01, local02
1c75c     40 16 06 F6 | 	mov	arg03, #64
1c760     58 FE BF FD | 	call	#__system__strncpy
1c764     50 20 06 F1 | 	add	local02, #80
1c768     10 03 48 FC | 	wrbyte	#1, local02
1c76c     08 20 86 F1 | 	sub	local02, #8
1c770     10 01 68 FC | 	wrlong	#0, local02
1c774     04 20 06 F1 | 	add	local02, #4
1c778     10 01 68 FC | 	wrlong	#0, local02
1c77c     04 22 06 F1 | 	add	local03, #4
1c780     04 1E 06 F1 | 	add	local01, #4
1c784     0F 23 62 FC | 	wrlong	local03, local01
1c788     00 FA 05 F6 | 	mov	result1, #0
1c78c                 | LR__2891
1c78c     A7 F0 03 F6 | 	mov	ptra, fp
1c790     B2 00 A0 FD | 	call	#popregs_
1c794                 | __system____root_readdir_ret
1c794     2D 00 64 FD | 	ret
1c798                 | 
1c798                 | __system____root_closedir
1c798     00 FA 05 F6 | 	mov	result1, #0
1c79c                 | __system____root_closedir_ret
1c79c     2D 00 64 FD | 	ret
1c7a0                 | 
1c7a0                 | __system____root_stat
1c7a0     0A 01 02 F6 | 	mov	_var01, arg02
1c7a4     00 13 02 F6 | 	mov	arg01, _var01
1c7a8     00 14 06 F6 | 	mov	arg02, #0
1c7ac     30 16 06 F6 | 	mov	arg03, #48
1c7b0     98 00 A0 FD | 	call	#\builtin_bytefill_
1c7b4     08 00 06 F1 | 	add	_var01, #8
1c7b8     08 00 80 FF 
1c7bc     00 FF 6B FC | 	wrlong	##4607, _var01
1c7c0     00 FA 05 F6 | 	mov	result1, #0
1c7c4                 | __system____root_stat_ret
1c7c4     2D 00 64 FD | 	ret
1c7c8                 | 
1c7c8                 | __system___normalizeName
1c7c8     00 00 06 F6 | 	mov	_var01, #0
1c7cc     09 03 02 F6 | 	mov	_var02, arg01
1c7d0     01 05 02 F6 | 	mov	_var03, _var02
1c7d4                 | LR__2900
1c7d4     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1c7d8     5C 01 90 AD |  if_e	jmp	#LR__2919
1c7dc     00 00 0E F2 | 	cmp	_var01, #0 wz
1c7e0     02 07 02 56 |  if_ne	mov	_var04, _var03
1c7e4     01 04 06 51 |  if_ne	add	_var03, #1
1c7e8     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
1c7ec     00 00 06 56 |  if_ne	mov	_var01, #0
1c7f0     01 07 C2 FA | 	rdbyte	_var04, _var02
1c7f4     2E 06 0E F2 | 	cmp	_var04, #46 wz
1c7f8     D8 00 90 5D |  if_ne	jmp	#LR__2912
1c7fc     01 02 06 F1 | 	add	_var02, #1
1c800     01 07 C2 FA | 	rdbyte	_var04, _var02
1c804     01 02 86 F1 | 	sub	_var02, #1
1c808     2F 06 0E F2 | 	cmp	_var04, #47 wz
1c80c     18 00 90 AD |  if_e	jmp	#LR__2901
1c810     01 02 06 F1 | 	add	_var02, #1
1c814     01 09 C2 FA | 	rdbyte	_var05, _var02
1c818     01 02 86 F1 | 	sub	_var02, #1
1c81c     04 0B 02 F6 | 	mov	_var06, _var05
1c820     07 0A 4E F7 | 	zerox	_var06, #7 wz
1c824     10 00 90 5D |  if_ne	jmp	#LR__2902
1c828                 | LR__2901
1c828     01 0D 02 F6 | 	mov	_var07, _var02
1c82c     01 0C 06 F1 | 	add	_var07, #1
1c830     06 03 02 F6 | 	mov	_var02, _var07
1c834     E0 00 90 FD | 	jmp	#LR__2916
1c838                 | LR__2902
1c838     01 02 06 F1 | 	add	_var02, #1
1c83c     01 0D C2 FA | 	rdbyte	_var07, _var02
1c840     01 02 86 F1 | 	sub	_var02, #1
1c844     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1c848     2E 06 0E F2 | 	cmp	_var04, #46 wz
1c84c     84 00 90 5D |  if_ne	jmp	#LR__2911
1c850     02 02 06 F1 | 	add	_var02, #2
1c854     01 0D C2 FA | 	rdbyte	_var07, _var02
1c858     02 02 86 F1 | 	sub	_var02, #2
1c85c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1c860     2F 06 0E F2 | 	cmp	_var04, #47 wz
1c864     18 00 90 AD |  if_e	jmp	#LR__2903
1c868     02 02 06 F1 | 	add	_var02, #2
1c86c     01 09 C2 FA | 	rdbyte	_var05, _var02
1c870     02 02 86 F1 | 	sub	_var02, #2
1c874     04 0B 02 F6 | 	mov	_var06, _var05
1c878     07 0A 4E F7 | 	zerox	_var06, #7 wz
1c87c     54 00 90 5D |  if_ne	jmp	#LR__2910
1c880                 | LR__2903
1c880     02 02 06 F1 | 	add	_var02, #2
1c884     09 05 5A F2 | 	cmps	_var03, arg01 wcz
1c888     40 00 90 ED |  if_be	jmp	#LR__2909
1c88c     02 0F 02 F6 | 	mov	_var08, _var03
1c890     01 0E 86 F1 | 	sub	_var08, #1
1c894                 | LR__2904
1c894     07 07 C2 FA | 	rdbyte	_var04, _var08
1c898     2F 06 0E F2 | 	cmp	_var04, #47 wz
1c89c     0C 00 90 5D |  if_ne	jmp	#LR__2905
1c8a0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1c8a4     01 0E 86 11 |  if_a	sub	_var08, #1
1c8a8     E8 FF 9F 1D |  if_a	jmp	#LR__2904
1c8ac                 | LR__2905
1c8ac     97 0C 48 FB | 	callpa	#(@LR__2907-@LR__2906)>>2,fcache_load_ptr_
1c8b0                 | LR__2906
1c8b0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1c8b4     10 00 90 ED |  if_be	jmp	#LR__2908
1c8b8     07 07 C2 FA | 	rdbyte	_var04, _var08
1c8bc     2F 06 0E F2 | 	cmp	_var04, #47 wz
1c8c0     01 0E 86 51 |  if_ne	sub	_var08, #1
1c8c4     E8 FF 9F 5D |  if_ne	jmp	#LR__2906
1c8c8                 | LR__2907
1c8c8                 | LR__2908
1c8c8     07 05 02 F6 | 	mov	_var03, _var08
1c8cc                 | LR__2909
1c8cc     01 00 06 F6 | 	mov	_var01, #1
1c8d0     44 00 90 FD | 	jmp	#LR__2916
1c8d4                 | LR__2910
1c8d4                 | LR__2911
1c8d4                 | LR__2912
1c8d4     97 18 48 FB | 	callpa	#(@LR__2914-@LR__2913)>>2,fcache_load_ptr_
1c8d8                 | LR__2913
1c8d8     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1c8dc     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
1c8e0     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
1c8e4     20 00 90 AD |  if_e	jmp	#LR__2915
1c8e8     01 0B 02 F6 | 	mov	_var06, _var02
1c8ec     01 09 02 F6 | 	mov	_var05, _var02
1c8f0     01 08 06 F1 | 	add	_var05, #1
1c8f4     05 11 C2 FA | 	rdbyte	_var09, _var06
1c8f8     04 03 02 F6 | 	mov	_var02, _var05
1c8fc     02 11 42 FC | 	wrbyte	_var09, _var03
1c900     01 04 06 F1 | 	add	_var03, #1
1c904     D0 FF 9F FD | 	jmp	#LR__2913
1c908                 | LR__2914
1c908                 | LR__2915
1c908     01 07 C2 FA | 	rdbyte	_var04, _var02
1c90c     2F 06 0E F2 | 	cmp	_var04, #47 wz
1c910     C0 FE 9F 5D |  if_ne	jmp	#LR__2900
1c914     01 00 06 F6 | 	mov	_var01, #1
1c918                 | LR__2916
1c918     97 0C 48 FB | 	callpa	#(@LR__2918-@LR__2917)>>2,fcache_load_ptr_
1c91c                 | LR__2917
1c91c     01 07 C2 FA | 	rdbyte	_var04, _var02
1c920     2F 06 0E F2 | 	cmp	_var04, #47 wz
1c924     01 0D 02 A6 |  if_e	mov	_var07, _var02
1c928     01 0C 06 A1 |  if_e	add	_var07, #1
1c92c     06 03 02 A6 |  if_e	mov	_var02, _var07
1c930     E8 FF 9F AD |  if_e	jmp	#LR__2917
1c934                 | LR__2918
1c934     9C FE 9F FD | 	jmp	#LR__2900
1c938                 | LR__2919
1c938     02 01 48 FC | 	wrbyte	#0, _var03
1c93c                 | __system___normalizeName_ret
1c93c     2D 00 64 FD | 	ret
1c940                 | 
1c940                 | __system___strrev
1c940     09 01 CA FA | 	rdbyte	_var01, arg01 wz
1c944     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
1c948     09 03 02 F6 | 	mov	_var02, arg01
1c94c     97 1A 48 FB | 	callpa	#(@LR__2922-@LR__2920)>>2,fcache_load_ptr_
1c950                 | LR__2920
1c950     01 01 CA FA | 	rdbyte	_var01, _var02 wz
1c954     01 02 06 51 |  if_ne	add	_var02, #1
1c958     F4 FF 9F 5D |  if_ne	jmp	#LR__2920
1c95c     01 02 86 F1 | 	sub	_var02, #1
1c960                 | LR__2921
1c960     09 03 5A F2 | 	cmps	_var02, arg01 wcz
1c964     1C 00 90 ED |  if_be	jmp	#LR__2923
1c968     09 01 C2 FA | 	rdbyte	_var01, arg01
1c96c     01 05 C2 FA | 	rdbyte	_var03, _var02
1c970     09 05 42 FC | 	wrbyte	_var03, arg01
1c974     01 01 42 FC | 	wrbyte	_var01, _var02
1c978     01 12 06 F1 | 	add	arg01, #1
1c97c     01 02 86 F1 | 	sub	_var02, #1
1c980     DC FF 9F FD | 	jmp	#LR__2921
1c984                 | LR__2922
1c984                 | LR__2923
1c984                 | __system___strrev_ret
1c984     2D 00 64 FD | 	ret
1c988                 | 
1c988                 | __system___fmtpad
1c988     06 4A 05 F6 | 	mov	COUNT_, #6
1c98c     A8 00 A0 FD | 	call	#pushregs_
1c990     09 1F 02 F6 | 	mov	local01, arg01
1c994     0A 21 02 F6 | 	mov	local02, arg02
1c998     0B 23 02 F6 | 	mov	local03, arg03
1c99c     10 13 EA F8 | 	getbyte	arg01, local02, #1
1c9a0     16 20 46 F0 | 	shr	local02, #22
1c9a4     03 20 0E F5 | 	and	local02, #3 wz
1c9a8     00 24 06 F6 | 	mov	local04, #0
1c9ac     01 20 06 A6 |  if_e	mov	local02, #1
1c9b0     0C 21 CA F7 | 	test	local02, arg04 wz
1c9b4     00 FA 05 A6 |  if_e	mov	result1, #0
1c9b8     88 00 90 AD |  if_e	jmp	#LR__2933
1c9bc     09 23 C2 F2 | 	subr	local03, arg01
1c9c0     01 22 56 F2 | 	cmps	local03, #1 wc
1c9c4     00 FA 05 C6 |  if_b	mov	result1, #0
1c9c8     78 00 90 CD |  if_b	jmp	#LR__2933
1c9cc     03 20 0E F2 | 	cmp	local02, #3 wz
1c9d0     18 00 90 5D |  if_ne	jmp	#LR__2930
1c9d4     01 18 0E F2 | 	cmp	arg04, #1 wz
1c9d8     6E 20 62 FD | 	wrz	local02
1c9dc     10 23 02 F1 | 	add	local03, local02
1c9e0     11 23 52 F6 | 	abs	local03, local03 wc
1c9e4     01 22 46 F0 | 	shr	local03, #1
1c9e8     11 23 82 F6 | 	negc	local03, local03
1c9ec                 | LR__2930
1c9ec     01 22 56 F2 | 	cmps	local03, #1 wc
1c9f0     4C 00 90 CD |  if_b	jmp	#LR__2932
1c9f4     11 27 02 F6 | 	mov	local05, local03
1c9f8                 | LR__2931
1c9f8     0F 21 02 F6 | 	mov	local02, local01
1c9fc     0F 29 02 F6 | 	mov	local06, local01
1ca00     13 20 46 F7 | 	zerox	local02, #19
1ca04     14 28 46 F0 | 	shr	local06, #20
1ca08     02 28 66 F0 | 	shl	local06, #2
1ca0c     ED 28 02 F1 | 	add	local06, __methods__
1ca10     14 29 02 FB | 	rdlong	local06, local06
1ca14     20 12 06 F6 | 	mov	arg01, #32
1ca18     F2 22 02 F6 | 	mov	local03, objptr
1ca1c     10 E5 01 F6 | 	mov	objptr, local02
1ca20     2D 28 62 FD | 	call	local06
1ca24     11 E5 01 F6 | 	mov	objptr, local03
1ca28     FD 28 02 F6 | 	mov	local06, result1
1ca2c     00 28 56 F2 | 	cmps	local06, #0 wc
1ca30     14 FB 01 C6 |  if_b	mov	result1, local06
1ca34     0C 00 90 CD |  if_b	jmp	#LR__2933
1ca38     14 25 02 F1 | 	add	local04, local06
1ca3c     EE 27 6E FB | 	djnz	local05, #LR__2931
1ca40                 | LR__2932
1ca40     12 FB 01 F6 | 	mov	result1, local04
1ca44                 | LR__2933
1ca44     A7 F0 03 F6 | 	mov	ptra, fp
1ca48     B2 00 A0 FD | 	call	#popregs_
1ca4c                 | __system___fmtpad_ret
1ca4c     2D 00 64 FD | 	ret
1ca50                 | 
1ca50                 | __system___uitoa
1ca50     04 4A 05 F6 | 	mov	COUNT_, #4
1ca54     A8 00 A0 FD | 	call	#pushregs_
1ca58     09 1F 02 F6 | 	mov	local01, arg01
1ca5c     00 1A 4E F2 | 	cmps	arg05, #0 wz
1ca60     0F 1B 02 F6 | 	mov	arg05, local01
1ca64     00 20 06 F6 | 	mov	local02, #0
1ca68     37 22 06 56 |  if_ne	mov	local03, #55
1ca6c     57 22 06 A6 |  if_e	mov	local03, #87
1ca70                 | LR__2940
1ca70     0B 15 12 FD | 	qdiv	arg02, arg03
1ca74     19 24 62 FD | 	getqy	local04
1ca78     0B 15 12 FD | 	qdiv	arg02, arg03
1ca7c     0A 24 16 F2 | 	cmp	local04, #10 wc
1ca80     30 24 06 C1 |  if_b	add	local04, #48
1ca84     11 25 02 31 |  if_ae	add	local04, local03
1ca88     0D 25 42 FC | 	wrbyte	local04, arg05
1ca8c     01 1A 06 F1 | 	add	arg05, #1
1ca90     01 20 06 F1 | 	add	local02, #1
1ca94     18 14 62 FD | 	getqx	arg02
1ca98     00 14 0E F2 | 	cmp	arg02, #0 wz
1ca9c     D0 FF 9F 5D |  if_ne	jmp	#LR__2940
1caa0     0C 21 12 F2 | 	cmp	local02, arg04 wc
1caa4     C8 FF 9F CD |  if_b	jmp	#LR__2940
1caa8     0D 01 48 FC | 	wrbyte	#0, arg05
1caac     0F 13 02 F6 | 	mov	arg01, local01
1cab0     8C FE BF FD | 	call	#__system___strrev
1cab4     10 FB 01 F6 | 	mov	result1, local02
1cab8     A7 F0 03 F6 | 	mov	ptra, fp
1cabc     B2 00 A0 FD | 	call	#popregs_
1cac0                 | __system___uitoa_ret
1cac0     2D 00 64 FD | 	ret
1cac4                 | 
1cac4                 | __system__disassemble_0341
1cac4     10 4A 05 F6 | 	mov	COUNT_, #16
1cac8     A8 00 A0 FD | 	call	#pushregs_
1cacc     09 1F 02 F6 | 	mov	local01, arg01
1cad0     0A 21 02 F6 | 	mov	local02, arg02
1cad4     0B 23 02 F6 | 	mov	local03, arg03
1cad8     0C 25 02 F6 | 	mov	local04, arg04
1cadc     0D 27 02 F6 | 	mov	local05, arg05
1cae0     13 13 52 F6 | 	abs	arg01, local05 wc
1cae4     1F 28 C6 C9 |  if_b	decod	local06, #31
1cae8     00 28 06 36 |  if_ae	mov	local06, #0
1caec     4C D3 BF FD | 	call	#__system___float_fromuns
1caf0     14 FB 61 F5 | 	xor	result1, local06
1caf4     FD 2A 02 F6 | 	mov	local07, result1
1caf8     00 2C 06 F6 | 	mov	local08, #0
1cafc     0F 13 02 F6 | 	mov	arg01, local01
1cb00     00 14 06 F6 | 	mov	arg02, #0
1cb04     01 16 06 F6 | 	mov	arg03, #1
1cb08     90 DA BF FD | 	call	#__system___float_cmp
1cb0c     00 FA 0D F2 | 	cmp	result1, #0 wz
1cb10     00 2E 06 A6 |  if_e	mov	local09, #0
1cb14     10 01 68 AC |  if_e	wrlong	#0, local02
1cb18     11 2F 62 AC |  if_e	wrlong	local09, local03
1cb1c     8C 01 90 AD |  if_e	jmp	#LR__2962
1cb20     0F 13 02 F6 | 	mov	arg01, local01
1cb24     40 DF BF FD | 	call	#__system____builtin_ilogb
1cb28     FD 30 02 F6 | 	mov	local10, result1
1cb2c     0A 26 0E F2 | 	cmp	local05, #10 wz
1cb30     24 00 90 5D |  if_ne	jmp	#LR__2950
1cb34     18 2F 02 F6 | 	mov	local09, local10
1cb38     01 2E 66 F0 | 	shl	local09, #1
1cb3c     18 2F 02 F1 | 	add	local09, local10
1cb40     17 31 52 F6 | 	abs	local10, local09 wc
1cb44     0A 30 16 FD | 	qdiv	local10, #10
1cb48     09 32 06 F6 | 	mov	local11, #9
1cb4c     18 30 62 FD | 	getqx	local10
1cb50     18 31 82 F6 | 	negc	local10, local10
1cb54     04 00 90 FD | 	jmp	#LR__2951
1cb58                 | LR__2950
1cb58     18 32 06 F6 | 	mov	local11, #24
1cb5c                 | LR__2951
1cb5c                 | LR__2952
1cb5c     08 2C 56 F2 | 	cmps	local08, #8 wc
1cb60     01 2C 06 F1 | 	add	local08, #1
1cb64     60 00 90 3D |  if_ae	jmp	#LR__2953
1cb68     00 C0 1F FF 
1cb6c     00 12 06 F6 | 	mov	arg01, ##1065353216
1cb70     15 15 02 F6 | 	mov	arg02, local07
1cb74     18 17 02 F6 | 	mov	arg03, local10
1cb78     88 E3 BF FD | 	call	#__system___float_pow_n
1cb7c     FD 14 02 F6 | 	mov	arg02, result1
1cb80     0F 13 02 F6 | 	mov	arg01, local01
1cb84     E4 D7 BF FD | 	call	#__system___float_div
1cb88     FD 34 02 F6 | 	mov	local12, result1
1cb8c     1A 13 02 F6 | 	mov	arg01, local12
1cb90     00 C0 1F FF 
1cb94     00 14 06 F6 | 	mov	arg02, ##1065353216
1cb98     01 16 06 F6 | 	mov	arg03, #1
1cb9c     FC D9 BF FD | 	call	#__system___float_cmp
1cba0     00 FA 55 F2 | 	cmps	result1, #0 wc
1cba4     01 30 86 C1 |  if_b	sub	local10, #1
1cba8     B0 FF 9F CD |  if_b	jmp	#LR__2952
1cbac     15 15 02 F6 | 	mov	arg02, local07
1cbb0     1A 13 02 F6 | 	mov	arg01, local12
1cbb4     01 16 66 F6 | 	neg	arg03, #1
1cbb8     E0 D9 BF FD | 	call	#__system___float_cmp
1cbbc     00 FA 55 F2 | 	cmps	result1, #0 wc
1cbc0     01 30 06 31 |  if_ae	add	local10, #1
1cbc4     94 FF 9F 3D |  if_ae	jmp	#LR__2952
1cbc8                 | LR__2953
1cbc8     1A 13 02 F6 | 	mov	arg01, local12
1cbcc     98 DE BF FD | 	call	#__system____builtin_ilogb
1cbd0     FD 36 02 F6 | 	mov	local13, result1
1cbd4     1A 39 02 F6 | 	mov	local14, local12
1cbd8     17 39 06 F4 | 	bitl	local14, #279
1cbdc     17 38 26 F4 | 	bith	local14, #23
1cbe0     1B 39 62 F0 | 	shl	local14, local13
1cbe4     02 26 0E F2 | 	cmp	local05, #2 wz
1cbe8     02 24 66 A0 |  if_e	shl	local04, #2
1cbec     00 3A 06 F6 | 	mov	local15, #0
1cbf0     00 24 56 F2 | 	cmps	local04, #0 wc
1cbf4     10 00 90 3D |  if_ae	jmp	#LR__2954
1cbf8     18 25 C2 F2 | 	subr	local04, local10
1cbfc     00 24 56 F2 | 	cmps	local04, #0 wc
1cc00     A0 00 90 CD |  if_b	jmp	#LR__2961
1cc04     04 00 90 FD | 	jmp	#LR__2955
1cc08                 | LR__2954
1cc08     01 24 06 F1 | 	add	local04, #1
1cc0c                 | LR__2955
1cc0c     19 25 7A F3 | 	fles	local04, local11 wcz
1cc10     01 3C 06 F6 | 	mov	local16, #1
1cc14     97 22 48 FB | 	callpa	#(@LR__2957-@LR__2956)>>2,fcache_load_ptr_
1cc18                 | LR__2956
1cc18     00 40 00 FF 
1cc1c     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
1cc20     38 00 90 3D |  if_ae	jmp	#LR__2958
1cc24     01 24 56 F2 | 	cmps	local04, #1 wc
1cc28     01 24 86 F1 | 	sub	local04, #1
1cc2c     2C 00 90 CD |  if_b	jmp	#LR__2958
1cc30     13 3B 02 FD | 	qmul	local15, local05
1cc34     1C 37 02 F6 | 	mov	local13, local14
1cc38     17 36 46 F0 | 	shr	local13, #23
1cc3c     17 39 06 F4 | 	bitl	local14, #279
1cc40     18 3A 62 FD | 	getqx	local15
1cc44     13 3D 02 FD | 	qmul	local16, local05
1cc48     18 3C 62 FD | 	getqx	local16
1cc4c     13 39 02 FD | 	qmul	local14, local05
1cc50     1B 3B 02 F1 | 	add	local15, local13
1cc54     18 38 62 FD | 	getqx	local14
1cc58     BC FF 9F FD | 	jmp	#LR__2956
1cc5c                 | LR__2957
1cc5c                 | LR__2958
1cc5c     13 2F 02 F6 | 	mov	local09, local05
1cc60     17 2E 66 F0 | 	shl	local09, #23
1cc64     17 37 52 F6 | 	abs	local13, local09 wc
1cc68     01 36 46 F0 | 	shr	local13, #1
1cc6c     1B 37 82 F6 | 	negc	local13, local13
1cc70     1B 39 1A F2 | 	cmp	local14, local13 wcz
1cc74     20 00 90 1D |  if_a	jmp	#LR__2959
1cc78     17 26 66 F0 | 	shl	local05, #23
1cc7c     13 37 52 F6 | 	abs	local13, local05 wc
1cc80     01 36 46 F0 | 	shr	local13, #1
1cc84     1B 37 82 F6 | 	negc	local13, local13
1cc88     1B 39 0A F2 | 	cmp	local14, local13 wz
1cc8c     14 00 90 5D |  if_ne	jmp	#LR__2960
1cc90     01 3A CE F7 | 	test	local15, #1 wz
1cc94     0C 00 90 AD |  if_e	jmp	#LR__2960
1cc98                 | LR__2959
1cc98     01 3A 06 F1 | 	add	local15, #1
1cc9c     1E 3B 0A F2 | 	cmp	local15, local16 wz
1cca0     01 30 06 A1 |  if_e	add	local10, #1
1cca4                 | LR__2960
1cca4                 | LR__2961
1cca4     10 3B 62 FC | 	wrlong	local15, local02
1cca8     11 31 62 FC | 	wrlong	local10, local03
1ccac                 | LR__2962
1ccac     A7 F0 03 F6 | 	mov	ptra, fp
1ccb0     B2 00 A0 FD | 	call	#popregs_
1ccb4                 | __system__disassemble_0341_ret
1ccb4     2D 00 64 FD | 	ret
1ccb8                 | 
1ccb8                 | __system__emitsign_0343
1ccb8     00 FA 05 F6 | 	mov	result1, #0
1ccbc     00 14 0E F2 | 	cmp	arg02, #0 wz
1ccc0     09 01 02 56 |  if_ne	mov	_var01, arg01
1ccc4     01 12 06 51 |  if_ne	add	arg01, #1
1ccc8     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
1cccc     01 FA 05 56 |  if_ne	mov	result1, #1
1ccd0     00 16 0E F2 | 	cmp	arg03, #0 wz
1ccd4     09 61 48 5C |  if_ne	wrbyte	#48, arg01
1ccd8     01 12 06 51 |  if_ne	add	arg01, #1
1ccdc     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
1cce0     02 FA 05 51 |  if_ne	add	result1, #2
1cce4                 | __system__emitsign_0343_ret
1cce4     2D 00 64 FD | 	ret
1cce8                 | 
1cce8                 | __system___gettxfunc
1cce8     01 4A 05 F6 | 	mov	COUNT_, #1
1ccec     A8 00 A0 FD | 	call	#pushregs_
1ccf0     A0 F8 BF FD | 	call	#__system____getftab
1ccf4     FD 1E 0A F6 | 	mov	local01, result1 wz
1ccf8     10 00 90 AD |  if_e	jmp	#LR__2970
1ccfc     08 1E 06 F1 | 	add	local01, #8
1cd00     0F 15 0A FB | 	rdlong	arg02, local01 wz
1cd04     08 1E 86 F1 | 	sub	local01, #8
1cd08     08 00 90 5D |  if_ne	jmp	#LR__2971
1cd0c                 | LR__2970
1cd0c     00 FA 05 F6 | 	mov	result1, #0
1cd10     0C 00 90 FD | 	jmp	#LR__2972
1cd14                 | LR__2971
1cd14     00 E0 02 FF 
1cd18     00 1E 46 F5 | 	or	local01, ##96468992
1cd1c     0F FB 01 F6 | 	mov	result1, local01
1cd20                 | LR__2972
1cd20     A7 F0 03 F6 | 	mov	ptra, fp
1cd24     B2 00 A0 FD | 	call	#popregs_
1cd28                 | __system___gettxfunc_ret
1cd28     2D 00 64 FD | 	ret
1cd2c                 | 
1cd2c                 | __system___getrxfunc
1cd2c     01 4A 05 F6 | 	mov	COUNT_, #1
1cd30     A8 00 A0 FD | 	call	#pushregs_
1cd34     5C F8 BF FD | 	call	#__system____getftab
1cd38     FD 1E 0A F6 | 	mov	local01, result1 wz
1cd3c     10 00 90 AD |  if_e	jmp	#LR__2980
1cd40     08 1E 06 F1 | 	add	local01, #8
1cd44     0F 15 0A FB | 	rdlong	arg02, local01 wz
1cd48     08 1E 86 F1 | 	sub	local01, #8
1cd4c     08 00 90 5D |  if_ne	jmp	#LR__2981
1cd50                 | LR__2980
1cd50     00 FA 05 F6 | 	mov	result1, #0
1cd54     0C 00 90 FD | 	jmp	#LR__2982
1cd58                 | LR__2981
1cd58     00 E8 02 FF 
1cd5c     00 1E 46 F5 | 	or	local01, ##97517568
1cd60     0F FB 01 F6 | 	mov	result1, local01
1cd64                 | LR__2982
1cd64     A7 F0 03 F6 | 	mov	ptra, fp
1cd68     B2 00 A0 FD | 	call	#popregs_
1cd6c                 | __system___getrxfunc_ret
1cd6c     2D 00 64 FD | 	ret
1cd70                 | 
1cd70                 | __system___getiolock_0383
1cd70     01 4A 05 F6 | 	mov	COUNT_, #1
1cd74     A8 00 A0 FD | 	call	#pushregs_
1cd78     18 F8 BF FD | 	call	#__system____getftab
1cd7c     FD 1E 0A F6 | 	mov	local01, result1 wz
1cd80     10 00 90 AD |  if_e	jmp	#LR__2990
1cd84     08 1E 06 F1 | 	add	local01, #8
1cd88     0F FB 09 FB | 	rdlong	result1, local01 wz
1cd8c     08 1E 86 F1 | 	sub	local01, #8
1cd90     18 00 90 5D |  if_ne	jmp	#LR__2991
1cd94                 | LR__2990
1cd94     01 00 00 FF 
1cd98     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
1cd9c     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1cda0     01 00 00 FF 
1cda4     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
1cda8     08 00 90 FD | 	jmp	#LR__2992
1cdac                 | LR__2991
1cdac     0C 1E 06 F1 | 	add	local01, #12
1cdb0     0F FB 01 F6 | 	mov	result1, local01
1cdb4                 | LR__2992
1cdb4     A7 F0 03 F6 | 	mov	ptra, fp
1cdb8     B2 00 A0 FD | 	call	#popregs_
1cdbc                 | __system___getiolock_0383_ret
1cdbc     2D 00 64 FD | 	ret
1cdc0                 | 
1cdc0                 | __system___basic_dir
1cdc0     05 4A 05 F6 | 	mov	COUNT_, #5
1cdc4     A8 00 A0 FD | 	call	#pushregs_
1cdc8     4C F0 07 F1 | 	add	ptra, #76
1cdcc     04 4E 05 F1 | 	add	fp, #4
1cdd0     A7 12 62 FC | 	wrlong	arg01, fp
1cdd4     04 4E 05 F1 | 	add	fp, #4
1cdd8     A7 14 62 FC | 	wrlong	arg02, fp
1cddc     04 4E 85 F1 | 	sub	fp, #4
1cde0     A7 14 0A FB | 	rdlong	arg02, fp wz
1cde4     04 4E 85 F1 | 	sub	fp, #4
1cde8     04 4E 05 51 |  if_ne	add	fp, #4
1cdec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1cdf0     04 4E 85 51 |  if_ne	sub	fp, #4
1cdf4     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1cdf8     70 00 90 AD |  if_e	jmp	#LR__3000
1cdfc     03 00 00 FF 
1ce00     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1ce04     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1ce08     03 00 00 FF 
1ce0c     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1ce10     03 00 00 5F 
1ce14     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1ce18     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
1ce1c     03 00 00 5F 
1ce20     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
1ce24     FC EA BF 5D |  if_ne	call	#__system__closedir
1ce28     34 01 00 FF 
1ce2c     0C 13 06 F6 | 	mov	arg01, ##@LR__4158
1ce30     04 EA BF FD | 	call	#__system__opendir
1ce34     03 00 00 FF 
1ce38     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1ce3c     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1ce40     08 4E 05 F1 | 	add	fp, #8
1ce44     A7 20 02 FB | 	rdlong	local02, fp
1ce48     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1ce4c     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1ce50     04 4E 85 F1 | 	sub	fp, #4
1ce54     A7 20 02 FB | 	rdlong	local02, fp
1ce58     04 4E 85 F1 | 	sub	fp, #4
1ce5c     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1ce60     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1ce64     03 00 00 FF 
1ce68     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1ce6c                 | LR__3000
1ce6c     03 00 00 FF 
1ce70     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1ce74     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1ce78     03 00 00 FF 
1ce7c     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1ce80     34 01 00 AF 
1ce84     0E FB 05 A6 |  if_e	mov	result1, ##@LR__4159
1ce88     84 02 90 AD |  if_e	jmp	#LR__3013
1ce8c                 | LR__3001
1ce8c     03 00 00 FF 
1ce90     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1ce94     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1ce98     03 00 00 FF 
1ce9c     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1cea0     F4 EA BF FD | 	call	#__system__readdir
1cea4     0C 4E 05 F1 | 	add	fp, #12
1cea8     A7 FA 61 FC | 	wrlong	result1, fp
1ceac     0C 4E 85 F1 | 	sub	fp, #12
1ceb0     00 FA 0D F2 | 	cmp	result1, #0 wz
1ceb4     38 00 90 5D |  if_ne	jmp	#LR__3002
1ceb8     03 00 00 FF 
1cebc     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1cec0     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1cec4     03 00 00 FF 
1cec8     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1cecc     54 EA BF FD | 	call	#__system__closedir
1ced0     03 00 00 FF 
1ced4     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1ced8     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
1cedc     03 00 00 FF 
1cee0     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1cee4     34 01 00 FF 
1cee8     10 FB 05 F6 | 	mov	result1, ##@LR__4160
1ceec     20 02 90 FD | 	jmp	#LR__3013
1cef0                 | LR__3002
1cef0     0C 4E 05 F1 | 	add	fp, #12
1cef4     A7 12 02 FB | 	rdlong	arg01, fp
1cef8     0C 4E 85 F1 | 	sub	fp, #12
1cefc     03 00 00 FF 
1cf00     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
1cf04     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1cf08     03 00 00 FF 
1cf0c     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1cf10     48 07 B0 FD | 	call	#__system___pat_match
1cf14     00 FA 0D F2 | 	cmp	result1, #0 wz
1cf18     70 FF 9F AD |  if_e	jmp	#LR__3001
1cf1c     03 00 00 FF 
1cf20     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1cf24     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1cf28     03 00 00 FF 
1cf2c     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1cf30     78 01 90 AD |  if_e	jmp	#LR__3009
1cf34     0C 4E 05 F1 | 	add	fp, #12
1cf38     A7 12 02 FB | 	rdlong	arg01, fp
1cf3c     04 4E 05 F1 | 	add	fp, #4
1cf40     A7 14 02 F6 | 	mov	arg02, fp
1cf44     10 4E 85 F1 | 	sub	fp, #16
1cf48     50 F3 BF FD | 	call	#__system__stat
1cf4c     40 4E 05 F1 | 	add	fp, #64
1cf50     A7 FA 61 FC | 	wrlong	result1, fp
1cf54     40 4E 85 F1 | 	sub	fp, #64
1cf58     00 FA 0D F2 | 	cmp	result1, #0 wz
1cf5c     34 01 00 5F 
1cf60     12 FB 05 56 |  if_ne	mov	result1, ##@LR__4161
1cf64     A8 01 90 5D |  if_ne	jmp	#LR__3013
1cf68     18 4E 05 F1 | 	add	fp, #24
1cf6c     A7 20 02 FB | 	rdlong	local02, fp
1cf70     78 00 00 FF 
1cf74     00 20 06 F5 | 	and	local02, ##61440
1cf78     2C 4E 05 F1 | 	add	fp, #44
1cf7c     A7 20 62 FC | 	wrlong	local02, fp
1cf80     38 4E 85 F1 | 	sub	fp, #56
1cf84     A7 20 02 FB | 	rdlong	local02, fp
1cf88     0C 4E 85 F1 | 	sub	fp, #12
1cf8c     10 21 C2 FA | 	rdbyte	local02, local02
1cf90     2E 20 0E F2 | 	cmp	local02, #46 wz
1cf94     08 4E 05 A1 |  if_e	add	fp, #8
1cf98     A7 04 68 AC |  if_e	wrlong	#2, fp
1cf9c     08 4E C5 F3 | 	sumz	fp, #8
1cfa0     A7 00 68 5C |  if_ne	wrlong	#0, fp
1cfa4     08 4E 85 51 |  if_ne	sub	fp, #8
1cfa8     44 4E 05 F1 | 	add	fp, #68
1cfac     A7 20 02 FB | 	rdlong	local02, fp
1cfb0     44 4E 85 F1 | 	sub	fp, #68
1cfb4     08 00 00 FF 
1cfb8     00 20 0E F2 | 	cmp	local02, ##4096 wz
1cfbc     18 00 90 5D |  if_ne	jmp	#LR__3003
1cfc0     08 4E 05 F1 | 	add	fp, #8
1cfc4     A7 20 02 FB | 	rdlong	local02, fp
1cfc8     10 20 46 F5 | 	or	local02, #16
1cfcc     A7 20 62 FC | 	wrlong	local02, fp
1cfd0     08 4E 85 F1 | 	sub	fp, #8
1cfd4     AC 00 90 FD | 	jmp	#LR__3008
1cfd8                 | LR__3003
1cfd8     44 4E 05 F1 | 	add	fp, #68
1cfdc     A7 20 02 FB | 	rdlong	local02, fp
1cfe0     44 4E 85 F1 | 	sub	fp, #68
1cfe4     10 00 00 FF 
1cfe8     00 20 0E F2 | 	cmp	local02, ##8192 wz
1cfec     44 4E 05 51 |  if_ne	add	fp, #68
1cff0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1cff4     44 4E 85 51 |  if_ne	sub	fp, #68
1cff8     18 00 00 5F 
1cffc     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
1d000     44 4E 05 51 |  if_ne	add	fp, #68
1d004     0F 23 02 56 |  if_ne	mov	local03, local01
1d008     44 4E 85 51 |  if_ne	sub	fp, #68
1d00c     20 00 00 5F 
1d010     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
1d014     18 00 90 5D |  if_ne	jmp	#LR__3004
1d018     08 4E 05 F1 | 	add	fp, #8
1d01c     A7 20 02 FB | 	rdlong	local02, fp
1d020     04 20 46 F5 | 	or	local02, #4
1d024     A7 20 62 FC | 	wrlong	local02, fp
1d028     08 4E 85 F1 | 	sub	fp, #8
1d02c     54 00 90 FD | 	jmp	#LR__3007
1d030                 | LR__3004
1d030     18 4E 05 F1 | 	add	fp, #24
1d034     A7 20 02 FB | 	rdlong	local02, fp
1d038     18 4E 85 F1 | 	sub	fp, #24
1d03c     92 20 CE F7 | 	test	local02, #146 wz
1d040     18 00 90 5D |  if_ne	jmp	#LR__3005
1d044     08 4E 05 F1 | 	add	fp, #8
1d048     A7 20 02 FB | 	rdlong	local02, fp
1d04c     01 20 46 F5 | 	or	local02, #1
1d050     A7 20 62 FC | 	wrlong	local02, fp
1d054     08 4E 85 F1 | 	sub	fp, #8
1d058     28 00 90 FD | 	jmp	#LR__3006
1d05c                 | LR__3005
1d05c     44 4E 05 F1 | 	add	fp, #68
1d060     A7 24 02 FB | 	rdlong	local04, fp
1d064     44 4E 85 F1 | 	sub	fp, #68
1d068     08 00 00 FF 
1d06c     00 24 0E F2 | 	cmp	local04, ##4096 wz
1d070     08 4E 05 51 |  if_ne	add	fp, #8
1d074     A7 24 02 5B |  if_ne	rdlong	local04, fp
1d078     20 24 46 55 |  if_ne	or	local04, #32
1d07c     A7 24 62 5C |  if_ne	wrlong	local04, fp
1d080     08 4E 85 51 |  if_ne	sub	fp, #8
1d084                 | LR__3006
1d084                 | LR__3007
1d084                 | LR__3008
1d084     08 4E 05 F1 | 	add	fp, #8
1d088     A7 24 02 FB | 	rdlong	local04, fp
1d08c     08 4E 85 F1 | 	sub	fp, #8
1d090     03 00 00 FF 
1d094     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1d098     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
1d09c     03 00 00 FF 
1d0a0     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1d0a4     0F 25 CA F7 | 	test	local04, local01 wz
1d0a8     E0 FD 9F AD |  if_e	jmp	#LR__3001
1d0ac                 | LR__3009
1d0ac     0C 4E 05 F1 | 	add	fp, #12
1d0b0     A7 12 02 FB | 	rdlong	arg01, fp
1d0b4     0C 4E 85 F1 | 	sub	fp, #12
1d0b8     09 27 02 F6 | 	mov	local05, arg01
1d0bc     97 06 48 FB | 	callpa	#(@LR__3011-@LR__3010)>>2,fcache_load_ptr_
1d0c0                 | LR__3010
1d0c0     13 FB C9 FA | 	rdbyte	result1, local05 wz
1d0c4     01 26 06 51 |  if_ne	add	local05, #1
1d0c8     F4 FF 9F 5D |  if_ne	jmp	#LR__3010
1d0cc                 | LR__3011
1d0cc     13 13 C2 F2 | 	subr	arg01, local05
1d0d0     01 12 06 F1 | 	add	arg01, #1
1d0d4     4C E1 BF FD | 	call	#__system___gc_alloc_managed
1d0d8     48 4E 05 F1 | 	add	fp, #72
1d0dc     A7 FA 61 FC | 	wrlong	result1, fp
1d0e0     48 4E 85 F1 | 	sub	fp, #72
1d0e4     00 FA 0D F2 | 	cmp	result1, #0 wz
1d0e8     18 00 90 AD |  if_e	jmp	#LR__3012
1d0ec     48 4E 05 F1 | 	add	fp, #72
1d0f0     A7 12 02 FB | 	rdlong	arg01, fp
1d0f4     3C 4E 85 F1 | 	sub	fp, #60
1d0f8     A7 14 02 FB | 	rdlong	arg02, fp
1d0fc     0C 4E 85 F1 | 	sub	fp, #12
1d100     08 A7 BF FD | 	call	#__system____builtin_strcpy
1d104                 | LR__3012
1d104     48 4E 05 F1 | 	add	fp, #72
1d108     A7 FA 01 FB | 	rdlong	result1, fp
1d10c     48 4E 85 F1 | 	sub	fp, #72
1d110                 | LR__3013
1d110     A7 F0 03 F6 | 	mov	ptra, fp
1d114     B2 00 A0 FD | 	call	#popregs_
1d118                 | __system___basic_dir_ret
1d118     2D 00 64 FD | 	ret
1d11c                 | 
1d11c                 | __system__pack_0449
1d11c     09 01 02 F6 | 	mov	_var01, arg01
1d120     7F 16 06 F1 | 	add	arg03, #127
1d124     04 18 CE F7 | 	test	arg04, #4 wz
1d128     10 00 90 AD |  if_e	jmp	#LR__3020
1d12c     00 00 0E F2 | 	cmp	_var01, #0 wz
1d130     16 00 C6 A9 |  if_e	decod	_var01, #22
1d134     F7 00 26 F4 | 	bith	_var01, #247
1d138     B4 00 90 FD | 	jmp	#LR__3029
1d13c                 | LR__3020
1d13c     02 18 CE F7 | 	test	arg04, #2 wz
1d140     00 C0 3F 5F 
1d144     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1d148     00 14 06 56 |  if_ne	mov	arg02, #0
1d14c     A0 00 90 5D |  if_ne	jmp	#LR__3028
1d150     08 18 CE F7 | 	test	arg04, #8 wz
1d154     00 00 06 56 |  if_ne	mov	_var01, #0
1d158     94 00 90 5D |  if_ne	jmp	#LR__3027
1d15c     FF 16 56 F2 | 	cmps	arg03, #255 wc
1d160     00 C0 3F 3F 
1d164     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
1d168     00 14 06 36 |  if_ae	mov	arg02, #0
1d16c     80 00 90 3D |  if_ae	jmp	#LR__3026
1d170     01 16 56 F2 | 	cmps	arg03, #1 wc
1d174     6C 00 90 3D |  if_ae	jmp	#LR__3024
1d178     01 14 46 F0 | 	shr	arg02, #1
1d17c     00 03 02 F6 | 	mov	_var02, _var01
1d180     01 02 06 F5 | 	and	_var02, #1
1d184     1F 02 66 F0 | 	shl	_var02, #31
1d188     01 15 42 F5 | 	or	arg02, _var02
1d18c     01 00 46 F0 | 	shr	_var01, #1
1d190     97 1E 48 FB | 	callpa	#(@LR__3022-@LR__3021)>>2,fcache_load_ptr_
1d194                 | LR__3021
1d194     00 16 56 F2 | 	cmps	arg03, #0 wc
1d198     34 00 90 3D |  if_ae	jmp	#LR__3023
1d19c     00 00 0E F2 | 	cmp	_var01, #0 wz
1d1a0     2C 00 90 AD |  if_e	jmp	#LR__3023
1d1a4     0A 13 02 F6 | 	mov	arg01, arg02
1d1a8     01 12 06 F5 | 	and	arg01, #1
1d1ac     01 16 06 F1 | 	add	arg03, #1
1d1b0     01 14 46 F0 | 	shr	arg02, #1
1d1b4     00 03 02 F6 | 	mov	_var02, _var01
1d1b8     01 02 06 F5 | 	and	_var02, #1
1d1bc     1F 02 66 F0 | 	shl	_var02, #31
1d1c0     01 15 42 F5 | 	or	arg02, _var02
1d1c4     09 15 42 F5 | 	or	arg02, arg01
1d1c8     01 00 46 F0 | 	shr	_var01, #1
1d1cc     C4 FF 9F FD | 	jmp	#LR__3021
1d1d0                 | LR__3022
1d1d0                 | LR__3023
1d1d0     00 16 56 F2 | 	cmps	arg03, #0 wc
1d1d4     18 00 90 3D |  if_ae	jmp	#LR__3025
1d1d8     00 14 0E F2 | 	cmp	arg02, #0 wz
1d1dc     6F 14 62 FD | 	wrnz	arg02
1d1e0     0C 00 90 FD | 	jmp	#LR__3025
1d1e4                 | LR__3024
1d1e4     17 01 06 F4 | 	bitl	_var01, #279
1d1e8     17 16 66 F0 | 	shl	arg03, #23
1d1ec     0B 01 42 F5 | 	or	_var01, arg03
1d1f0                 | LR__3025
1d1f0                 | LR__3026
1d1f0                 | LR__3027
1d1f0                 | LR__3028
1d1f0                 | LR__3029
1d1f0     01 00 CE F7 | 	test	_var01, #1 wz
1d1f4     01 14 46 55 |  if_ne	or	arg02, #1
1d1f8     0A 17 02 F6 | 	mov	arg03, arg02
1d1fc     00 02 06 F6 | 	mov	_var02, #0
1d200     FF FF 3F FF 
1d204     FF 15 06 F1 | 	add	arg02, ##2147483647
1d208     0B 15 12 F2 | 	cmp	arg02, arg03 wc
1d20c     01 02 06 C6 |  if_b	mov	_var02, #1
1d210     01 01 02 F1 | 	add	_var01, _var02
1d214     01 18 CE F7 | 	test	arg04, #1 wz
1d218     1F 00 26 54 |  if_ne	bith	_var01, #31
1d21c     00 FB 01 F6 | 	mov	result1, _var01
1d220                 | __system__pack_0449_ret
1d220     2D 00 64 FD | 	ret
1d224                 | 
1d224                 | __system___rxtxioctl_0539
1d224     00 15 0E F2 | 	cmp	arg02, #256 wz
1d228     0C 00 90 AD |  if_e	jmp	#LR__3030
1d22c     01 15 0E F2 | 	cmp	arg02, #257 wz
1d230     1C 00 90 AD |  if_e	jmp	#LR__3031
1d234     30 00 90 FD | 	jmp	#LR__3032
1d238                 | LR__3030
1d238     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1d23c     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1d240     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1d244     0B FB 61 FC | 	wrlong	result1, arg03
1d248     00 FA 05 F6 | 	mov	result1, #0
1d24c     28 00 90 FD | 	jmp	#LR__3033
1d250                 | LR__3031
1d250     0B 13 02 FB | 	rdlong	arg01, arg03
1d254     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1d258     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d25c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1d260     00 FA 05 F6 | 	mov	result1, #0
1d264     10 00 90 FD | 	jmp	#LR__3033
1d268                 | LR__3032
1d268     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d26c     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1d270     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d274     01 FA 65 F6 | 	neg	result1, #1
1d278                 | LR__3033
1d278                 | __system___rxtxioctl_0539_ret
1d278     2D 00 64 FD | 	ret
1d27c                 | 
1d27c                 | __system____dummy_flush_0540
1d27c     00 FA 05 F6 | 	mov	result1, #0
1d280                 | __system____dummy_flush_0540_ret
1d280     2D 00 64 FD | 	ret
1d284                 | 
1d284                 | __system___vfsread
1d284     03 4A 05 F6 | 	mov	COUNT_, #3
1d288     A8 00 A0 FD | 	call	#pushregs_
1d28c     28 F0 07 F1 | 	add	ptra, #40
1d290     04 4E 05 F1 | 	add	fp, #4
1d294     A7 12 62 FC | 	wrlong	arg01, fp
1d298     04 4E 05 F1 | 	add	fp, #4
1d29c     A7 14 62 FC | 	wrlong	arg02, fp
1d2a0     04 4E 05 F1 | 	add	fp, #4
1d2a4     A7 16 62 FC | 	wrlong	arg03, fp
1d2a8     04 4E 85 F1 | 	sub	fp, #4
1d2ac     A7 FA 01 FB | 	rdlong	result1, fp
1d2b0     14 4E 05 F1 | 	add	fp, #20
1d2b4     A7 FA 61 FC | 	wrlong	result1, fp
1d2b8     04 4E 05 F1 | 	add	fp, #4
1d2bc     A7 00 68 FC | 	wrlong	#0, fp
1d2c0     1C 4E 85 F1 | 	sub	fp, #28
1d2c4     A7 12 02 FB | 	rdlong	arg01, fp
1d2c8     04 4E 85 F1 | 	sub	fp, #4
1d2cc     08 12 06 F1 | 	add	arg01, #8
1d2d0     09 FB 01 FB | 	rdlong	result1, arg01
1d2d4     01 FA CD F7 | 	test	result1, #1 wz
1d2d8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d2dc     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1d2e0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d2e4     01 FA 65 A6 |  if_e	neg	result1, #1
1d2e8     74 02 90 AD |  if_e	jmp	#LR__3046
1d2ec     04 4E 05 F1 | 	add	fp, #4
1d2f0     A7 12 02 FB | 	rdlong	arg01, fp
1d2f4     04 4E 85 F1 | 	sub	fp, #4
1d2f8     14 12 06 F1 | 	add	arg01, #20
1d2fc     09 FB 09 FB | 	rdlong	result1, arg01 wz
1d300     B8 00 90 AD |  if_e	jmp	#LR__3041
1d304     04 4E 05 F1 | 	add	fp, #4
1d308     A7 12 02 FB | 	rdlong	arg01, fp
1d30c     09 17 02 F6 | 	mov	arg03, arg01
1d310     14 16 06 F1 | 	add	arg03, #20
1d314     0B 1F 02 FB | 	rdlong	local01, arg03
1d318     0F 21 02 F6 | 	mov	local02, local01
1d31c     13 1E 46 F7 | 	zerox	local01, #19
1d320     14 20 46 F0 | 	shr	local02, #20
1d324     02 20 66 F0 | 	shl	local02, #2
1d328     ED 20 02 F1 | 	add	local02, __methods__
1d32c     10 21 02 FB | 	rdlong	local02, local02
1d330     04 4E 05 F1 | 	add	fp, #4
1d334     A7 14 02 FB | 	rdlong	arg02, fp
1d338     04 4E 05 F1 | 	add	fp, #4
1d33c     A7 16 02 FB | 	rdlong	arg03, fp
1d340     0C 4E 85 F1 | 	sub	fp, #12
1d344     F2 22 02 F6 | 	mov	local03, objptr
1d348     0F E5 01 F6 | 	mov	objptr, local01
1d34c     2D 20 62 FD | 	call	local02
1d350     11 E5 01 F6 | 	mov	objptr, local03
1d354     10 4E 05 F1 | 	add	fp, #16
1d358     A7 FA 61 FC | 	wrlong	result1, fp
1d35c     10 4E 85 F1 | 	sub	fp, #16
1d360     00 FA 55 F2 | 	cmps	result1, #0 wc
1d364     44 00 90 3D |  if_ae	jmp	#LR__3040
1d368     04 4E 05 F1 | 	add	fp, #4
1d36c     A7 22 02 FB | 	rdlong	local03, fp
1d370     11 1F 02 F6 | 	mov	local01, local03
1d374     08 22 06 F1 | 	add	local03, #8
1d378     11 21 02 FB | 	rdlong	local02, local03
1d37c     20 20 46 F5 | 	or	local02, #32
1d380     08 1E 06 F1 | 	add	local01, #8
1d384     0F 21 62 FC | 	wrlong	local02, local01
1d388     0C 4E 05 F1 | 	add	fp, #12
1d38c     A7 12 0A FB | 	rdlong	arg01, fp wz
1d390     10 4E 85 F1 | 	sub	fp, #16
1d394     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d398     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d39c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d3a0     01 FA 65 56 |  if_ne	neg	result1, #1
1d3a4     00 FA 05 A6 |  if_e	mov	result1, #0
1d3a8     B4 01 90 FD | 	jmp	#LR__3046
1d3ac                 | LR__3040
1d3ac     10 4E 05 F1 | 	add	fp, #16
1d3b0     A7 FA 01 FB | 	rdlong	result1, fp
1d3b4     10 4E 85 F1 | 	sub	fp, #16
1d3b8     A4 01 90 FD | 	jmp	#LR__3046
1d3bc                 | LR__3041
1d3bc     04 4E 05 F1 | 	add	fp, #4
1d3c0     A7 12 02 FB | 	rdlong	arg01, fp
1d3c4     20 12 06 F1 | 	add	arg01, #32
1d3c8     09 13 0A FB | 	rdlong	arg01, arg01 wz
1d3cc     14 4E 05 F1 | 	add	fp, #20
1d3d0     A7 12 62 FC | 	wrlong	arg01, fp
1d3d4     18 4E 85 F1 | 	sub	fp, #24
1d3d8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d3dc     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1d3e0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d3e4     01 FA 65 A6 |  if_e	neg	result1, #1
1d3e8     74 01 90 AD |  if_e	jmp	#LR__3046
1d3ec     04 4E 05 F1 | 	add	fp, #4
1d3f0     A7 22 02 FB | 	rdlong	local03, fp
1d3f4     04 4E 85 F1 | 	sub	fp, #4
1d3f8     28 22 06 F1 | 	add	local03, #40
1d3fc     11 21 0A FB | 	rdlong	local02, local03 wz
1d400     7C 00 90 AD |  if_e	jmp	#LR__3043
1d404     04 4E 05 F1 | 	add	fp, #4
1d408     A7 12 02 FB | 	rdlong	arg01, fp
1d40c     09 23 02 F6 | 	mov	local03, arg01
1d410     28 22 06 F1 | 	add	local03, #40
1d414     11 1F 02 FB | 	rdlong	local01, local03
1d418     0F 21 02 F6 | 	mov	local02, local01
1d41c     13 1E 46 F7 | 	zerox	local01, #19
1d420     14 20 46 F0 | 	shr	local02, #20
1d424     02 20 66 F0 | 	shl	local02, #2
1d428     ED 20 02 F1 | 	add	local02, __methods__
1d42c     10 21 02 FB | 	rdlong	local02, local02
1d430     20 4E 05 F1 | 	add	fp, #32
1d434     A7 16 02 F6 | 	mov	arg03, fp
1d438     24 4E 85 F1 | 	sub	fp, #36
1d43c     00 15 06 F6 | 	mov	arg02, #256
1d440     F2 22 02 F6 | 	mov	local03, objptr
1d444     0F E5 01 F6 | 	mov	objptr, local01
1d448     2D 20 62 FD | 	call	local02
1d44c     11 E5 01 F6 | 	mov	objptr, local03
1d450     10 4E 05 F1 | 	add	fp, #16
1d454     A7 FA 61 FC | 	wrlong	result1, fp
1d458     00 FA 4D F2 | 	cmps	result1, #0 wz
1d45c     10 4E 85 F1 | 	sub	fp, #16
1d460     1C 00 90 5D |  if_ne	jmp	#LR__3042
1d464     24 4E 05 F1 | 	add	fp, #36
1d468     A7 20 02 FB | 	rdlong	local02, fp
1d46c     24 4E 85 F1 | 	sub	fp, #36
1d470     02 20 CE F7 | 	test	local02, #2 wz
1d474     20 4E 05 51 |  if_ne	add	fp, #32
1d478     A7 02 68 5C |  if_ne	wrlong	#1, fp
1d47c     20 4E 85 51 |  if_ne	sub	fp, #32
1d480                 | LR__3042
1d480                 | LR__3043
1d480     10 4E 05 F1 | 	add	fp, #16
1d484     A7 00 68 FC | 	wrlong	#0, fp
1d488     10 4E 85 F1 | 	sub	fp, #16
1d48c                 | LR__3044
1d48c     0C 4E 05 F1 | 	add	fp, #12
1d490     A7 22 02 FB | 	rdlong	local03, fp
1d494     0C 4E 85 F1 | 	sub	fp, #12
1d498     01 22 16 F2 | 	cmp	local03, #1 wc
1d49c     B4 00 90 CD |  if_b	jmp	#LR__3045
1d4a0     18 4E 05 F1 | 	add	fp, #24
1d4a4     A7 20 02 FB | 	rdlong	local02, fp
1d4a8     10 23 02 F6 | 	mov	local03, local02
1d4ac     13 22 46 F7 | 	zerox	local03, #19
1d4b0     14 20 46 F0 | 	shr	local02, #20
1d4b4     02 20 66 F0 | 	shl	local02, #2
1d4b8     ED 20 02 F1 | 	add	local02, __methods__
1d4bc     10 21 02 FB | 	rdlong	local02, local02
1d4c0     14 4E 85 F1 | 	sub	fp, #20
1d4c4     A7 12 02 FB | 	rdlong	arg01, fp
1d4c8     04 4E 85 F1 | 	sub	fp, #4
1d4cc     F2 1E 02 F6 | 	mov	local01, objptr
1d4d0     11 E5 01 F6 | 	mov	objptr, local03
1d4d4     2D 20 62 FD | 	call	local02
1d4d8     0F E5 01 F6 | 	mov	objptr, local01
1d4dc     14 4E 05 F1 | 	add	fp, #20
1d4e0     A7 FA 61 FC | 	wrlong	result1, fp
1d4e4     14 4E 85 F1 | 	sub	fp, #20
1d4e8     00 FA 55 F2 | 	cmps	result1, #0 wc
1d4ec     64 00 90 CD |  if_b	jmp	#LR__3045
1d4f0     1C 4E 05 F1 | 	add	fp, #28
1d4f4     A7 22 02 FB | 	rdlong	local03, fp
1d4f8     11 21 02 F6 | 	mov	local02, local03
1d4fc     01 20 06 F1 | 	add	local02, #1
1d500     A7 20 62 FC | 	wrlong	local02, fp
1d504     08 4E 85 F1 | 	sub	fp, #8
1d508     A7 20 02 FB | 	rdlong	local02, fp
1d50c     11 21 42 FC | 	wrbyte	local02, local03
1d510     04 4E 85 F1 | 	sub	fp, #4
1d514     A7 22 02 FB | 	rdlong	local03, fp
1d518     01 22 06 F1 | 	add	local03, #1
1d51c     A7 22 62 FC | 	wrlong	local03, fp
1d520     04 4E 85 F1 | 	sub	fp, #4
1d524     A7 22 02 FB | 	rdlong	local03, fp
1d528     01 22 86 F1 | 	sub	local03, #1
1d52c     A7 22 62 FC | 	wrlong	local03, fp
1d530     14 4E 05 F1 | 	add	fp, #20
1d534     A7 22 0A FB | 	rdlong	local03, fp wz
1d538     20 4E 85 F1 | 	sub	fp, #32
1d53c     4C FF 9F AD |  if_e	jmp	#LR__3044
1d540     14 4E 05 F1 | 	add	fp, #20
1d544     A7 20 02 FB | 	rdlong	local02, fp
1d548     14 4E 85 F1 | 	sub	fp, #20
1d54c     0A 20 0E F2 | 	cmp	local02, #10 wz
1d550     38 FF 9F 5D |  if_ne	jmp	#LR__3044
1d554                 | LR__3045
1d554     10 4E 05 F1 | 	add	fp, #16
1d558     A7 FA 01 FB | 	rdlong	result1, fp
1d55c     10 4E 85 F1 | 	sub	fp, #16
1d560                 | LR__3046
1d560     A7 F0 03 F6 | 	mov	ptra, fp
1d564     B2 00 A0 FD | 	call	#popregs_
1d568                 | __system___vfsread_ret
1d568     2D 00 64 FD | 	ret
1d56c                 | 
1d56c                 | __system____default_filbuf
1d56c     04 4A 05 F6 | 	mov	COUNT_, #4
1d570     A8 00 A0 FD | 	call	#pushregs_
1d574     09 1F 02 F6 | 	mov	local01, arg01
1d578     0F 21 02 FB | 	rdlong	local02, local01
1d57c     0C 20 06 F1 | 	add	local02, #12
1d580     10 FB 09 FB | 	rdlong	result1, local02 wz
1d584     0C 20 86 F1 | 	sub	local02, #12
1d588     20 00 90 5D |  if_ne	jmp	#LR__3050
1d58c     14 20 06 F1 | 	add	local02, #20
1d590     10 FB 01 F6 | 	mov	result1, local02
1d594     04 20 86 F1 | 	sub	local02, #4
1d598     10 FB 61 FC | 	wrlong	result1, local02
1d59c     04 20 86 F1 | 	sub	local02, #4
1d5a0     02 00 80 FF 
1d5a4     10 01 68 FC | 	wrlong	##1024, local02
1d5a8     0C 20 86 F1 | 	sub	local02, #12
1d5ac                 | LR__3050
1d5ac     14 1E 06 F1 | 	add	local01, #20
1d5b0     0F 23 02 FB | 	rdlong	local03, local01
1d5b4     11 25 02 F6 | 	mov	local04, local03
1d5b8     14 1E 86 F1 | 	sub	local01, #20
1d5bc     13 24 46 F7 | 	zerox	local04, #19
1d5c0     14 22 46 F0 | 	shr	local03, #20
1d5c4     02 22 66 F0 | 	shl	local03, #2
1d5c8     ED 22 02 F1 | 	add	local03, __methods__
1d5cc     11 23 02 FB | 	rdlong	local03, local03
1d5d0     10 20 06 F1 | 	add	local02, #16
1d5d4     10 15 02 FB | 	rdlong	arg02, local02
1d5d8     04 20 86 F1 | 	sub	local02, #4
1d5dc     10 17 02 FB | 	rdlong	arg03, local02
1d5e0     0C 20 86 F1 | 	sub	local02, #12
1d5e4     0F 13 02 F6 | 	mov	arg01, local01
1d5e8     F2 1E 02 F6 | 	mov	local01, objptr
1d5ec     12 E5 01 F6 | 	mov	objptr, local04
1d5f0     2D 22 62 FD | 	call	local03
1d5f4     0F E5 01 F6 | 	mov	objptr, local01
1d5f8     FD 24 02 F6 | 	mov	local04, result1
1d5fc     00 24 56 F2 | 	cmps	local04, #0 wc
1d600     01 FA 65 C6 |  if_b	neg	result1, #1
1d604     28 00 90 CD |  if_b	jmp	#LR__3051
1d608     10 25 62 FC | 	wrlong	local04, local02
1d60c     10 20 06 F1 | 	add	local02, #16
1d610     10 23 02 FB | 	rdlong	local03, local02
1d614     0C 20 86 F1 | 	sub	local02, #12
1d618     10 23 62 FC | 	wrlong	local03, local02
1d61c     04 20 06 F1 | 	add	local02, #4
1d620     10 23 02 FB | 	rdlong	local03, local02
1d624     01 22 46 F5 | 	or	local03, #1
1d628     10 23 62 FC | 	wrlong	local03, local02
1d62c     12 FB 01 F6 | 	mov	result1, local04
1d630                 | LR__3051
1d630     A7 F0 03 F6 | 	mov	ptra, fp
1d634     B2 00 A0 FD | 	call	#popregs_
1d638                 | __system____default_filbuf_ret
1d638     2D 00 64 FD | 	ret
1d63c                 | 
1d63c                 | __system__getlower_0925
1d63c     41 12 56 F2 | 	cmps	arg01, #65 wc
1d640     10 00 90 CD |  if_b	jmp	#LR__3060
1d644     5B 12 56 F2 | 	cmps	arg01, #91 wc
1d648     09 FB 01 C6 |  if_b	mov	result1, arg01
1d64c     20 FA 05 C1 |  if_b	add	result1, #32
1d650     04 00 90 CD |  if_b	jmp	#__system__getlower_0925_ret
1d654                 | LR__3060
1d654     09 FB 01 F6 | 	mov	result1, arg01
1d658                 | __system__getlower_0925_ret
1d658     2D 00 64 FD | 	ret
1d65c                 | 
1d65c                 | __system___pat_match
1d65c     08 4A 05 F6 | 	mov	COUNT_, #8
1d660     A8 00 A0 FD | 	call	#pushregs_
1d664     09 1F 02 F6 | 	mov	local01, arg01
1d668                 | LR__3070
1d668     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
1d66c     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
1d670     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
1d674     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
1d678     2C 00 90 AD |  if_e	jmp	#LR__3071
1d67c     0A 13 C2 FA | 	rdbyte	arg01, arg02
1d680     B8 FF BF FD | 	call	#__system__getlower_0925
1d684     FD 22 02 F6 | 	mov	local03, result1
1d688     0F 13 C2 FA | 	rdbyte	arg01, local01
1d68c     AC FF BF FD | 	call	#__system__getlower_0925
1d690     11 FB 09 F2 | 	cmp	result1, local03 wz
1d694     00 FA 05 56 |  if_ne	mov	result1, #0
1d698     FC 00 90 5D |  if_ne	jmp	#LR__3079
1d69c     01 1E 06 F1 | 	add	local01, #1
1d6a0     01 14 06 F1 | 	add	arg02, #1
1d6a4     C0 FF 9F FD | 	jmp	#LR__3070
1d6a8                 | LR__3071
1d6a8     0A 23 C2 FA | 	rdbyte	local03, arg02
1d6ac     2A 22 0E F2 | 	cmp	local03, #42 wz
1d6b0     D4 00 90 5D |  if_ne	jmp	#LR__3078
1d6b4     01 14 06 F1 | 	add	arg02, #1
1d6b8     0A 21 C2 FA | 	rdbyte	local02, arg02
1d6bc     01 14 86 F1 | 	sub	arg02, #1
1d6c0     2E 20 0E F2 | 	cmp	local02, #46 wz
1d6c4     28 00 90 5D |  if_ne	jmp	#LR__3072
1d6c8     02 14 06 F1 | 	add	arg02, #2
1d6cc     0A 21 C2 FA | 	rdbyte	local02, arg02
1d6d0     02 14 86 F1 | 	sub	arg02, #2
1d6d4     2A 20 0E F2 | 	cmp	local02, #42 wz
1d6d8     03 14 06 A1 |  if_e	add	arg02, #3
1d6dc     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
1d6e0     03 14 86 A1 |  if_e	sub	arg02, #3
1d6e4     12 27 0A A6 |  if_e	mov	local05, local04 wz
1d6e8     01 FA 05 A6 |  if_e	mov	result1, #1
1d6ec     A8 00 90 AD |  if_e	jmp	#LR__3079
1d6f0                 | LR__3072
1d6f0     01 14 06 F1 | 	add	arg02, #1
1d6f4     00 28 06 F6 | 	mov	local06, #0
1d6f8     97 1E 48 FB | 	callpa	#(@LR__3075-@LR__3073)>>2,fcache_load_ptr_
1d6fc                 | LR__3073
1d6fc     14 2B 02 F6 | 	mov	local07, local06
1d700     0A 2B 02 F1 | 	add	local07, arg02
1d704     15 2B CA FA | 	rdbyte	local07, local07 wz
1d708     14 27 02 56 |  if_ne	mov	local05, local06
1d70c     01 26 06 51 |  if_ne	add	local05, #1
1d710     13 29 02 56 |  if_ne	mov	local06, local05
1d714     E4 FF 9F 5D |  if_ne	jmp	#LR__3073
1d718     00 2C 06 F6 | 	mov	local08, #0
1d71c                 | LR__3074
1d71c     16 2B 02 F6 | 	mov	local07, local08
1d720     0F 2B 02 F1 | 	add	local07, local01
1d724     15 2B CA FA | 	rdbyte	local07, local07 wz
1d728     16 27 02 56 |  if_ne	mov	local05, local08
1d72c     01 26 06 51 |  if_ne	add	local05, #1
1d730     13 2D 02 56 |  if_ne	mov	local08, local05
1d734     E4 FF 9F 5D |  if_ne	jmp	#LR__3074
1d738                 | LR__3075
1d738     14 2D 52 F2 | 	cmps	local08, local06 wc
1d73c     00 FA 05 C6 |  if_b	mov	result1, #0
1d740     54 00 90 CD |  if_b	jmp	#LR__3079
1d744     16 21 02 F6 | 	mov	local02, local08
1d748     14 21 82 F1 | 	sub	local02, local06
1d74c     10 1F 02 F1 | 	add	local01, local02
1d750                 | LR__3076
1d750     01 28 56 F2 | 	cmps	local06, #1 wc
1d754     30 00 90 CD |  if_b	jmp	#LR__3077
1d758     0F 13 C2 FA | 	rdbyte	arg01, local01
1d75c     DC FE BF FD | 	call	#__system__getlower_0925
1d760     FD 2C 02 F6 | 	mov	local08, result1
1d764     0A 13 C2 FA | 	rdbyte	arg01, arg02
1d768     D0 FE BF FD | 	call	#__system__getlower_0925
1d76c     FD 2C 0A F2 | 	cmp	local08, result1 wz
1d770     00 FA 05 56 |  if_ne	mov	result1, #0
1d774     20 00 90 5D |  if_ne	jmp	#LR__3079
1d778     01 1E 06 F1 | 	add	local01, #1
1d77c     01 14 06 F1 | 	add	arg02, #1
1d780     01 28 86 F1 | 	sub	local06, #1
1d784     C8 FF 9F FD | 	jmp	#LR__3076
1d788                 | LR__3077
1d788                 | LR__3078
1d788     0A 2D CA FA | 	rdbyte	local08, arg02 wz
1d78c     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
1d790     01 FA 05 A6 |  if_e	mov	result1, #1
1d794     00 FA 05 56 |  if_ne	mov	result1, #0
1d798                 | LR__3079
1d798     A7 F0 03 F6 | 	mov	ptra, fp
1d79c     B2 00 A0 FD | 	call	#popregs_
1d7a0                 | __system___pat_match_ret
1d7a0     2D 00 64 FD | 	ret
1d7a4                 | 
1d7a4                 | _fatfs_cc_ff_uni2oem
1d7a4     00 00 06 F6 | 	mov	_var01, #0
1d7a8     80 12 16 F2 | 	cmp	arg01, #128 wc
1d7ac     09 01 02 C6 |  if_b	mov	_var01, arg01
1d7b0     58 00 90 CD |  if_b	jmp	#LR__3084
1d7b4     80 00 00 FF 
1d7b8     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1d7bc     4C 00 90 3D |  if_ae	jmp	#LR__3083
1d7c0     0A FB 31 F9 | 	getword	result1, arg02, #0
1d7c4     01 00 00 FF 
1d7c8     52 FB 0D F2 | 	cmp	result1, ##850 wz
1d7cc     3C 00 90 5D |  if_ne	jmp	#LR__3083
1d7d0                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1d7d0     00 00 06 F6 | 	mov	_var01, #0
1d7d4     97 14 48 FB | 	callpa	#(@LR__3081-@LR__3080)>>2,fcache_load_ptr_
1d7d8                 | LR__3080
1d7d8     00 FB 31 F9 | 	getword	result1, _var01, #0
1d7dc     80 FA 15 F2 | 	cmp	result1, #128 wc
1d7e0     1C 00 90 3D |  if_ae	jmp	#LR__3082
1d7e4     00 FB 31 F9 | 	getword	result1, _var01, #0
1d7e8     01 FA 65 F0 | 	shl	result1, #1
1d7ec     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
1d7f0     FD FA E1 FA | 	rdword	result1, result1
1d7f4     FD 12 0A F2 | 	cmp	arg01, result1 wz
1d7f8     01 00 06 51 |  if_ne	add	_var01, #1
1d7fc     D8 FF 9F 5D |  if_ne	jmp	#LR__3080
1d800                 | LR__3081
1d800                 | LR__3082
1d800     00 01 32 F9 | 	getword	_var01, _var01, #0
1d804     80 00 06 F1 | 	add	_var01, #128
1d808     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1d80c                 | LR__3083
1d80c                 | LR__3084
1d80c                 | ' 			c = (c + 0x80) & 0xFF;
1d80c                 | ' 		}
1d80c                 | ' 	}
1d80c                 | ' 
1d80c                 | ' 	return c;
1d80c     00 FB 01 F6 | 	mov	result1, _var01
1d810                 | _fatfs_cc_ff_uni2oem_ret
1d810     2D 00 64 FD | 	ret
1d814                 | 
1d814                 | _fatfs_cc_ff_oem2uni
1d814     00 00 06 F6 | 	mov	_var01, #0
1d818     09 FB 31 F9 | 	getword	result1, arg01, #0
1d81c     80 FA 15 F2 | 	cmp	result1, #128 wc
1d820     09 01 02 C6 |  if_b	mov	_var01, arg01
1d824     2C 00 90 CD |  if_b	jmp	#LR__3091
1d828     0A 15 32 F9 | 	getword	arg02, arg02, #0
1d82c     01 00 00 FF 
1d830     52 15 0E F2 | 	cmp	arg02, ##850 wz
1d834     1C 00 90 5D |  if_ne	jmp	#LR__3090
1d838     09 FB 31 F9 | 	getword	result1, arg01, #0
1d83c     00 FB 15 F2 | 	cmp	result1, #256 wc
1d840     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
1d844     80 12 86 C1 |  if_b	sub	arg01, #128
1d848     01 12 66 C0 |  if_b	shl	arg01, #1
1d84c     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
1d850     09 01 E2 CA |  if_b	rdword	_var01, arg01
1d854                 | LR__3090
1d854                 | LR__3091
1d854                 | ' 		}
1d854                 | ' 	}
1d854                 | ' 
1d854                 | ' 	return c;
1d854     00 FB 01 F6 | 	mov	result1, _var01
1d858                 | _fatfs_cc_ff_oem2uni_ret
1d858     2D 00 64 FD | 	ret
1d85c                 | 
1d85c                 | _fatfs_cc_ff_wtoupper
1d85c     09 01 02 F6 | 	mov	_var01, arg01
1d860     80 00 00 FF 
1d864     00 00 16 F2 | 	cmp	_var01, ##65536 wc
1d868     60 01 90 3D |  if_ae	jmp	#LR__3113
1d86c     00 03 02 F6 | 	mov	_var02, _var01
1d870     01 01 32 F9 | 	getword	_var01, _var02, #0
1d874     08 00 00 FF 
1d878     00 00 16 F2 | 	cmp	_var01, ##4096 wc
1d87c     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
1d880     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
1d884     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
1d888     01 00 00 3F 
1d88c     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
1d890     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
1d894     01 00 00 3F 
1d898     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
1d89c     02 07 02 F6 | 	mov	_var04, _var03
1d8a0                 | ' 		uc = (WORD)uni;
1d8a0                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
1d8a0                 | ' 		for (;;) {
1d8a0                 | LR__3100
1d8a0     03 09 E2 FA | 	rdword	_var05, _var04
1d8a4     04 05 02 F6 | 	mov	_var03, _var05
1d8a8     0F 04 4E F7 | 	zerox	_var03, #15 wz
1d8ac     02 06 06 F1 | 	add	_var04, #2
1d8b0     14 01 90 AD |  if_e	jmp	#LR__3112
1d8b4     01 05 32 F9 | 	getword	_var03, _var02, #0
1d8b8     04 01 32 F9 | 	getword	_var01, _var05, #0
1d8bc     00 05 12 F2 | 	cmp	_var03, _var01 wc
1d8c0     04 01 90 CD |  if_b	jmp	#LR__3112
1d8c4     03 0B E2 FA | 	rdword	_var06, _var04
1d8c8     05 0D 32 F9 | 	getword	_var07, _var06, #0
1d8cc     08 0C 46 F0 | 	shr	_var07, #8
1d8d0     05 0B 32 F9 | 	getword	_var06, _var06, #0
1d8d4     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
1d8d8     01 05 32 F9 | 	getword	_var03, _var02, #0
1d8dc     04 0F 32 F9 | 	getword	_var08, _var05, #0
1d8e0     05 01 32 F9 | 	getword	_var01, _var06, #0
1d8e4     00 0F 02 F1 | 	add	_var08, _var01
1d8e8     07 05 52 F2 | 	cmps	_var03, _var08 wc
1d8ec     02 06 06 F1 | 	add	_var04, #2
1d8f0     C4 00 90 3D |  if_ae	jmp	#LR__3111
1d8f4                 | ' 				switch (cmd) {
1d8f4     06 11 32 F9 | 	getword	_var09, _var07, #0
1d8f8     09 10 26 F3 | 	fle	_var09, #9
1d8fc     30 10 62 FD | 	jmprel	_var09
1d900                 | LR__3101
1d900     24 00 90 FD | 	jmp	#LR__3102
1d904     3C 00 90 FD | 	jmp	#LR__3103
1d908     54 00 90 FD | 	jmp	#LR__3104
1d90c     5C 00 90 FD | 	jmp	#LR__3105
1d910     64 00 90 FD | 	jmp	#LR__3106
1d914     6C 00 90 FD | 	jmp	#LR__3107
1d918     74 00 90 FD | 	jmp	#LR__3108
1d91c     7C 00 90 FD | 	jmp	#LR__3109
1d920     84 00 90 FD | 	jmp	#LR__3110
1d924     A0 00 90 FD | 	jmp	#LR__3112
1d928                 | LR__3102
1d928     01 03 32 F9 | 	getword	_var02, _var02, #0
1d92c     04 09 32 F9 | 	getword	_var05, _var05, #0
1d930     04 03 82 F1 | 	sub	_var02, _var05
1d934     01 02 66 F0 | 	shl	_var02, #1
1d938     03 03 02 F1 | 	add	_var02, _var04
1d93c     01 03 E2 FA | 	rdword	_var02, _var02
1d940     84 00 90 FD | 	jmp	#LR__3112
1d944                 | LR__3103
1d944     01 05 32 F9 | 	getword	_var03, _var02, #0
1d948     01 03 32 F9 | 	getword	_var02, _var02, #0
1d94c     04 09 32 F9 | 	getword	_var05, _var05, #0
1d950     04 03 82 F1 | 	sub	_var02, _var05
1d954     01 02 06 F5 | 	and	_var02, #1
1d958     02 03 C2 F2 | 	subr	_var02, _var03
1d95c     68 00 90 FD | 	jmp	#LR__3112
1d960                 | LR__3104
1d960     01 03 32 F9 | 	getword	_var02, _var02, #0
1d964     10 02 86 F1 | 	sub	_var02, #16
1d968     5C 00 90 FD | 	jmp	#LR__3112
1d96c                 | LR__3105
1d96c     01 03 32 F9 | 	getword	_var02, _var02, #0
1d970     20 02 86 F1 | 	sub	_var02, #32
1d974     50 00 90 FD | 	jmp	#LR__3112
1d978                 | LR__3106
1d978     01 03 32 F9 | 	getword	_var02, _var02, #0
1d97c     30 02 86 F1 | 	sub	_var02, #48
1d980     44 00 90 FD | 	jmp	#LR__3112
1d984                 | LR__3107
1d984     01 03 32 F9 | 	getword	_var02, _var02, #0
1d988     1A 02 86 F1 | 	sub	_var02, #26
1d98c     38 00 90 FD | 	jmp	#LR__3112
1d990                 | LR__3108
1d990     01 03 32 F9 | 	getword	_var02, _var02, #0
1d994     08 02 06 F1 | 	add	_var02, #8
1d998     2C 00 90 FD | 	jmp	#LR__3112
1d99c                 | LR__3109
1d99c     01 03 32 F9 | 	getword	_var02, _var02, #0
1d9a0     50 02 86 F1 | 	sub	_var02, #80
1d9a4     20 00 90 FD | 	jmp	#LR__3112
1d9a8                 | LR__3110
1d9a8     01 03 32 F9 | 	getword	_var02, _var02, #0
1d9ac     0E 00 00 FF 
1d9b0     60 02 86 F1 | 	sub	_var02, ##7264
1d9b4                 | ' 				}
1d9b4                 | ' 				break;
1d9b4     10 00 90 FD | 	jmp	#LR__3112
1d9b8                 | LR__3111
1d9b8     0F 0C 4E F7 | 	zerox	_var07, #15 wz
1d9bc     02 0A 06 AA |  if_e	mul	_var06, #2
1d9c0     05 07 02 A1 |  if_e	add	_var04, _var06
1d9c4     D8 FE 9F FD | 	jmp	#LR__3100
1d9c8                 | LR__3112
1d9c8     01 01 32 F9 | 	getword	_var01, _var02, #0
1d9cc                 | LR__3113
1d9cc                 | ' 		}
1d9cc                 | ' 		uni = uc;
1d9cc                 | ' 	}
1d9cc                 | ' 
1d9cc                 | ' 	return uni;
1d9cc     00 FB 01 F6 | 	mov	result1, _var01
1d9d0                 | _fatfs_cc_ff_wtoupper_ret
1d9d0     2D 00 64 FD | 	ret
1d9d4                 | 
1d9d4                 | _fatfs_cc_strncpy
1d9d4     09 01 02 F6 | 	mov	_var01, arg01
1d9d8     97 12 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
1d9dc                 | ' 
1d9dc                 | ' 	dscan = dst;
1d9dc                 | ' 	sscan = src;
1d9dc                 | ' 	count = n;
1d9dc                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
1d9dc                 | LR__3120
1d9dc     01 16 86 F1 | 	sub	arg03, #1
1d9e0     00 16 56 F2 | 	cmps	arg03, #0 wc
1d9e4     18 00 90 CD |  if_b	jmp	#LR__3122
1d9e8     0A FB C1 FA | 	rdbyte	result1, arg02
1d9ec     00 FB 41 FC | 	wrbyte	result1, _var01
1d9f0     01 14 06 F1 | 	add	arg02, #1
1d9f4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1d9f8                 | ' 		continue;
1d9f8     01 00 06 F1 | 	add	_var01, #1
1d9fc     DC FF 9F 5D |  if_ne	jmp	#LR__3120
1da00                 | LR__3121
1da00                 | LR__3122
1da00     97 0C 48 FB | 	callpa	#(@LR__3124-@LR__3123)>>2,fcache_load_ptr_
1da04                 | ' 	while (--count >= 0)
1da04                 | LR__3123
1da04     01 16 86 F1 | 	sub	arg03, #1
1da08     00 16 56 F2 | 	cmps	arg03, #0 wc
1da0c     00 03 02 36 |  if_ae	mov	_var02, _var01
1da10     01 00 06 31 |  if_ae	add	_var01, #1
1da14     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1da18     E8 FF 9F 3D |  if_ae	jmp	#LR__3123
1da1c                 | LR__3124
1da1c                 | ' 		*dscan++ = '\0';
1da1c                 | ' 	return(dst);
1da1c     09 FB 01 F6 | 	mov	result1, arg01
1da20                 | _fatfs_cc_strncpy_ret
1da20     2D 00 64 FD | 	ret
1da24                 | 
1da24                 | _fatfs_cc_memcmp
1da24                 | ' 	for (n = size; n > 0; n--)
1da24     00 16 0E F2 | 	cmp	arg03, #0 wz
1da28     28 00 90 AD |  if_e	jmp	#LR__3131
1da2c                 | LR__3130
1da2c     09 01 C2 FA | 	rdbyte	_var01, arg01
1da30     0A 03 C2 FA | 	rdbyte	_var02, arg02
1da34     01 01 0A F2 | 	cmp	_var01, _var02 wz
1da38     01 12 06 A1 |  if_e	add	arg01, #1
1da3c     01 14 06 A1 |  if_e	add	arg02, #1
1da40                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1da40     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
1da44     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1da48     01 FB 81 51 |  if_ne	sub	result1, _var02
1da4c     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1da50     F6 17 6E FB | 	djnz	arg03, #LR__3130
1da54                 | LR__3131
1da54                 | ' 
1da54                 | ' 	return(0);
1da54     00 FA 05 F6 | 	mov	result1, #0
1da58                 | _fatfs_cc_memcmp_ret
1da58     2D 00 64 FD | 	ret
1da5c                 | 
1da5c                 | _fatfs_cc_strncmp
1da5c     09 01 0A F6 | 	mov	_var01, arg01 wz
1da60     14 00 90 5D |  if_ne	jmp	#LR__3140
1da64                 | ' 		return scan2 ? -1 : 0;
1da64     00 14 0E F2 | 	cmp	arg02, #0 wz
1da68     01 02 66 56 |  if_ne	neg	_var02, #1
1da6c     00 02 06 A6 |  if_e	mov	_var02, #0
1da70     01 FB 01 F6 | 	mov	result1, _var02
1da74     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1da78                 | LR__3140
1da78     00 14 0E F2 | 	cmp	arg02, #0 wz
1da7c     01 FA 05 A6 |  if_e	mov	result1, #1
1da80     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1da84     0B 05 02 F6 | 	mov	_var03, arg03
1da88     97 16 48 FB | 	callpa	#(@LR__3142-@LR__3141)>>2,fcache_load_ptr_
1da8c                 | ' 	count = n;
1da8c                 | ' 	do {
1da8c                 | LR__3141
1da8c     00 07 C2 FA | 	rdbyte	_var04, _var01
1da90     0A 09 02 F6 | 	mov	_var05, arg02
1da94     04 0B C2 FA | 	rdbyte	_var06, _var05
1da98     01 04 86 F1 | 	sub	_var03, #1
1da9c     00 04 56 F2 | 	cmps	_var03, #0 wc
1daa0     01 00 06 F1 | 	add	_var01, #1
1daa4     01 14 06 F1 | 	add	arg02, #1
1daa8     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1daac     08 00 90 2D |  if_nc_and_z	jmp	#LR__3143
1dab0     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1dab4     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3141
1dab8                 | LR__3142
1dab8                 | LR__3143
1dab8     00 04 56 F2 | 	cmps	_var03, #0 wc
1dabc                 | ' 		return(0);
1dabc     00 FA 05 C6 |  if_b	mov	result1, #0
1dac0     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1dac4     05 07 0A F2 | 	cmp	_var04, _var06 wz
1dac8                 | ' 		return(0);
1dac8     00 FA 05 A6 |  if_e	mov	result1, #0
1dacc     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1dad0     00 06 0E F2 | 	cmp	_var04, #0 wz
1dad4                 | ' 		return(-1);
1dad4     01 FA 65 A6 |  if_e	neg	result1, #1
1dad8     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1dadc     00 0A 0E F2 | 	cmp	_var06, #0 wz
1dae0                 | ' 		return(1);
1dae0     01 FA 05 A6 |  if_e	mov	result1, #1
1dae4                 | ' 		return(c1 - c2);
1dae4     03 FB 01 56 |  if_ne	mov	result1, _var04
1dae8     05 FB 81 51 |  if_ne	sub	result1, _var06
1daec                 | _fatfs_cc_strncmp_ret
1daec     2D 00 64 FD | 	ret
1daf0                 | 
1daf0                 | _fatfs_cc_strchr
1daf0                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
1daf0                 | ' 	while ((c = *s++) != (char) charwanted)
1daf0                 | LR__3150
1daf0     09 01 02 F6 | 	mov	_var01, arg01
1daf4     00 03 C2 FA | 	rdbyte	_var02, _var01
1daf8     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1dafc     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1db00     03 05 0A F2 | 	cmp	_var03, _var04 wz
1db04     01 12 06 F1 | 	add	arg01, #1
1db08     14 00 90 AD |  if_e	jmp	#LR__3151
1db0c     01 05 02 F6 | 	mov	_var03, _var02
1db10     07 04 4E F7 | 	zerox	_var03, #7 wz
1db14     00 FA 05 A6 |  if_e	mov	result1, #0
1db18     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1db1c     D0 FF 9F FD | 	jmp	#LR__3150
1db20                 | LR__3151
1db20                 | ' 	return((char *)--s);
1db20     01 12 86 F1 | 	sub	arg01, #1
1db24     09 FB 01 F6 | 	mov	result1, arg01
1db28                 | _fatfs_cc_strchr_ret
1db28     2D 00 64 FD | 	ret
1db2c                 | 
1db2c                 | _fatfs_cc_disk_initialize
1db2c     04 4A 05 F6 | 	mov	COUNT_, #4
1db30     A8 00 A0 FD | 	call	#pushregs_
1db34     40 F0 07 F1 | 	add	ptra, #64
1db38     04 4E 05 F1 | 	add	fp, #4
1db3c     A7 12 42 FC | 	wrbyte	arg01, fp
1db40     01 00 00 FF 
1db44     14 E4 05 F1 | 	add	objptr, ##532
1db48     F2 18 02 FB | 	rdlong	arg04, objptr
1db4c     2C 4E 05 F1 | 	add	fp, #44
1db50     A7 18 62 FC | 	wrlong	arg04, fp
1db54     04 E4 85 F1 | 	sub	objptr, #4
1db58     F2 18 02 FB | 	rdlong	arg04, objptr
1db5c     04 4E 05 F1 | 	add	fp, #4
1db60     A7 18 62 FC | 	wrlong	arg04, fp
1db64     08 E4 05 F1 | 	add	objptr, #8
1db68     F2 18 02 FB | 	rdlong	arg04, objptr
1db6c     04 4E 05 F1 | 	add	fp, #4
1db70     A7 18 62 FC | 	wrlong	arg04, fp
1db74     04 E4 05 F1 | 	add	objptr, #4
1db78     F2 18 02 FB | 	rdlong	arg04, objptr
1db7c     04 4E 05 F1 | 	add	fp, #4
1db80     A7 18 62 FC | 	wrlong	arg04, fp
1db84     04 E4 05 F1 | 	add	objptr, #4
1db88     F2 02 48 FC | 	wrbyte	#1, objptr
1db8c     01 00 00 FF 
1db90     20 E4 85 F1 | 	sub	objptr, ##544
1db94     38 4E 85 F1 | 	sub	fp, #56
1db98     A7 18 CA FA | 	rdbyte	arg04, fp wz
1db9c     04 4E 85 F1 | 	sub	fp, #4
1dba0                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1dba0                 | '             return RES_NOTRDY;
1dba0     03 FA 05 56 |  if_ne	mov	result1, #3
1dba4     D8 05 90 5D |  if_ne	jmp	#LR__3178
1dba8     13 00 00 FF 
1dbac     10 13 06 F6 | 	mov	arg01, ##10000
1dbb0     04 A0 BF FD | 	call	#__system___waitus
1dbb4     30 4E 05 F1 | 	add	fp, #48
1dbb8     A7 12 02 FB | 	rdlong	arg01, fp
1dbbc     09 01 08 FC | 	wrpin	#0, arg01
1dbc0     04 4E 05 F1 | 	add	fp, #4
1dbc4     A7 12 02 FB | 	rdlong	arg01, fp
1dbc8     09 01 08 FC | 	wrpin	#0, arg01
1dbcc     04 4E 05 F1 | 	add	fp, #4
1dbd0     A7 12 02 FB | 	rdlong	arg01, fp
1dbd4     09 01 08 FC | 	wrpin	#0, arg01
1dbd8     04 4E 05 F1 | 	add	fp, #4
1dbdc     A7 12 02 FB | 	rdlong	arg01, fp
1dbe0     09 00 80 FF 
1dbe4     09 01 08 FC | 	wrpin	##4608, arg01
1dbe8     0C 4E 85 F1 | 	sub	fp, #12
1dbec     A7 12 02 FB | 	rdlong	arg01, fp
1dbf0     59 12 62 FD | 	drvh	arg01
1dbf4     04 4E 05 F1 | 	add	fp, #4
1dbf8     A7 12 02 FB | 	rdlong	arg01, fp
1dbfc     59 12 62 FD | 	drvh	arg01
1dc00     04 4E 05 F1 | 	add	fp, #4
1dc04     A7 12 02 FB | 	rdlong	arg01, fp
1dc08     59 12 62 FD | 	drvh	arg01
1dc0c     04 4E 05 F1 | 	add	fp, #4
1dc10     A7 12 02 FB | 	rdlong	arg01, fp
1dc14     59 12 62 FD | 	drvh	arg01
1dc18     20 4E 85 F1 | 	sub	fp, #32
1dc1c     00 04 80 FF 
1dc20     A7 20 68 FC | 	wrlong	##524304, fp
1dc24     04 4E 05 F1 | 	add	fp, #4
1dc28     20 03 80 FF 
1dc2c     A7 90 68 FC | 	wrlong	##409672, fp
1dc30     14 4E 05 F1 | 	add	fp, #20
1dc34     A7 1E 02 FB | 	rdlong	local01, fp
1dc38     18 4E 85 F1 | 	sub	fp, #24
1dc3c     A7 16 02 FB | 	rdlong	arg03, fp
1dc40     40 1E 62 FD | 	dirl	local01
1dc44     A0 03 80 FF 
1dc48     0F 91 08 FC | 	wrpin	##475208, local01
1dc4c     0F 17 12 FC | 	wxpin	arg03, local01
1dc50     0F 01 28 FC | 	wypin	#0, local01
1dc54     41 1E 62 FD | 	dirh	local01
1dc58     1C 4E 05 F1 | 	add	fp, #28
1dc5c     A7 20 02 FB | 	rdlong	local02, fp
1dc60     10 1F 82 F1 | 	sub	local01, local02
1dc64     07 1E 06 F5 | 	and	local01, #7
1dc68     18 1E 66 F0 | 	shl	local01, #24
1dc6c     78 14 06 F6 | 	mov	arg02, #120
1dc70     0F 15 42 F5 | 	or	arg02, local01
1dc74     14 4E 85 F1 | 	sub	fp, #20
1dc78     A7 14 62 FC | 	wrlong	arg02, fp
1dc7c     14 4E 05 F1 | 	add	fp, #20
1dc80     A7 12 02 FB | 	rdlong	arg01, fp
1dc84     10 14 26 F4 | 	bith	arg02, #16
1dc88     40 12 62 FD | 	dirl	arg01
1dc8c     09 15 02 FC | 	wrpin	arg02, arg01
1dc90     09 3F 18 FC | 	wxpin	#31, arg01
1dc94     FF FF FF FF 
1dc98     09 FF 2B FC | 	wypin	##-1, arg01
1dc9c     41 12 62 FD | 	dirh	arg01
1dca0     04 4E 85 F1 | 	sub	fp, #4
1dca4     A7 14 02 FB | 	rdlong	arg02, fp
1dca8     08 4E 05 F1 | 	add	fp, #8
1dcac     A7 22 02 FB | 	rdlong	local03, fp
1dcb0     11 15 82 F1 | 	sub	arg02, local03
1dcb4     07 14 06 F5 | 	and	arg02, #7
1dcb8     18 14 66 F0 | 	shl	arg02, #24
1dcbc     14 4E 85 F1 | 	sub	fp, #20
1dcc0     A7 14 62 FC | 	wrlong	arg02, fp
1dcc4     29 00 00 FF 
1dcc8     7A 14 46 F5 | 	or	arg02, ##21114
1dccc     A7 14 62 FC | 	wrlong	arg02, fp
1dcd0     14 4E 05 F1 | 	add	fp, #20
1dcd4     A7 12 02 FB | 	rdlong	arg01, fp
1dcd8     40 12 62 FD | 	dirl	arg01
1dcdc     09 15 02 FC | 	wrpin	arg02, arg01
1dce0     09 4F 18 FC | 	wxpin	#39, arg01
1dce4     09 01 28 FC | 	wypin	#0, arg01
1dce8     41 12 62 FD | 	dirh	arg01
1dcec     28 4E 85 F1 | 	sub	fp, #40
1dcf0     A7 12 02 F6 | 	mov	arg01, fp
1dcf4     14 4E 85 F1 | 	sub	fp, #20
1dcf8     0A 14 06 F6 | 	mov	arg02, #10
1dcfc     1C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0959
1dd00     00 12 06 F6 | 	mov	arg01, #0
1dd04     00 14 06 F6 | 	mov	arg02, #0
1dd08     E8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0983
1dd0c     24 80 B0 FD | 	call	#_fatfs_cc_deselect_0969
1dd10     64 12 06 F6 | 	mov	arg01, #100
1dd14     A0 9E BF FD | 	call	#__system___waitus
1dd18     14 4E 05 F1 | 	add	fp, #20
1dd1c     A7 12 02 F6 | 	mov	arg01, fp
1dd20     14 4E 85 F1 | 	sub	fp, #20
1dd24     0A 14 06 F6 | 	mov	arg02, #10
1dd28     F0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0959
1dd2c     0C 4E 05 F1 | 	add	fp, #12
1dd30     A7 00 48 FC | 	wrbyte	#0, fp
1dd34     0C 4E 85 F1 | 	sub	fp, #12
1dd38     00 12 06 F6 | 	mov	arg01, #0
1dd3c     00 14 06 F6 | 	mov	arg02, #0
1dd40     B0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0983
1dd44     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1dd48     01 18 0E F2 | 	cmp	arg04, #1 wz
1dd4c     B8 03 90 5D |  if_ne	jmp	#LR__3177
1dd50     08 12 06 F6 | 	mov	arg01, #8
1dd54     AA 15 06 F6 | 	mov	arg02, #426
1dd58     98 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0983
1dd5c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1dd60     01 FA 0D F2 | 	cmp	result1, #1 wz
1dd64     98 01 90 5D |  if_ne	jmp	#LR__3163
1dd68     14 4E 05 F1 | 	add	fp, #20
1dd6c     A7 12 02 F6 | 	mov	arg01, fp
1dd70     14 4E 85 F1 | 	sub	fp, #20
1dd74     04 14 06 F6 | 	mov	arg02, #4
1dd78     A0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0959
1dd7c     16 4E 05 F1 | 	add	fp, #22
1dd80     A7 24 C2 FA | 	rdbyte	local04, fp
1dd84     16 4E 85 F1 | 	sub	fp, #22
1dd88     01 24 0E F2 | 	cmp	local04, #1 wz
1dd8c     17 4E 05 A1 |  if_e	add	fp, #23
1dd90     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1dd94     17 4E 85 A1 |  if_e	sub	fp, #23
1dd98     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1dd9c     68 03 90 5D |  if_ne	jmp	#LR__3176
1dda0                 | ' 				for (tmr = 1000; tmr; tmr--) {
1dda0     18 4E 05 F1 | 	add	fp, #24
1dda4     01 00 80 FF 
1dda8     A7 D0 6B FC | 	wrlong	##1000, fp
1ddac     18 4E 85 F1 | 	sub	fp, #24
1ddb0                 | LR__3160
1ddb0     18 4E 05 F1 | 	add	fp, #24
1ddb4     A7 1E 0A FB | 	rdlong	local01, fp wz
1ddb8     18 4E 85 F1 | 	sub	fp, #24
1ddbc     3C 00 90 AD |  if_e	jmp	#LR__3161
1ddc0     A9 12 06 F6 | 	mov	arg01, #169
1ddc4     1E 14 C6 F9 | 	decod	arg02, #30
1ddc8     28 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0983
1ddcc     FD 24 02 F6 | 	mov	local04, result1
1ddd0     07 24 4E F7 | 	zerox	local04, #7 wz
1ddd4     24 00 90 AD |  if_e	jmp	#LR__3161
1ddd8     01 00 00 FF 
1dddc     E8 13 06 F6 | 	mov	arg01, ##1000
1dde0     D4 9D BF FD | 	call	#__system___waitus
1dde4     18 4E 05 F1 | 	add	fp, #24
1dde8     A7 24 02 FB | 	rdlong	local04, fp
1ddec     01 24 86 F1 | 	sub	local04, #1
1ddf0     A7 24 62 FC | 	wrlong	local04, fp
1ddf4     18 4E 85 F1 | 	sub	fp, #24
1ddf8     B4 FF 9F FD | 	jmp	#LR__3160
1ddfc                 | LR__3161
1ddfc     18 4E 05 F1 | 	add	fp, #24
1de00     A7 24 0A FB | 	rdlong	local04, fp wz
1de04     18 4E 85 F1 | 	sub	fp, #24
1de08     4C 00 90 AD |  if_e	jmp	#LR__3162
1de0c     3A 12 06 F6 | 	mov	arg01, #58
1de10     00 14 06 F6 | 	mov	arg02, #0
1de14     DC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_0983
1de18     FD 22 02 F6 | 	mov	local03, result1
1de1c     07 22 4E F7 | 	zerox	local03, #7 wz
1de20     34 00 90 5D |  if_ne	jmp	#LR__3162
1de24     14 4E 05 F1 | 	add	fp, #20
1de28     A7 12 02 F6 | 	mov	arg01, fp
1de2c     14 4E 85 F1 | 	sub	fp, #20
1de30     04 14 06 F6 | 	mov	arg02, #4
1de34     E4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0959
1de38     14 4E 05 F1 | 	add	fp, #20
1de3c     A7 1E C2 FA | 	rdbyte	local01, fp
1de40     40 1E CE F7 | 	test	local01, #64 wz
1de44     0C 24 06 56 |  if_ne	mov	local04, #12
1de48     04 24 06 A6 |  if_e	mov	local04, #4
1de4c     08 4E 85 F1 | 	sub	fp, #8
1de50     A7 24 42 FC | 	wrbyte	local04, fp
1de54     0C 4E 85 F1 | 	sub	fp, #12
1de58                 | LR__3162
1de58     14 24 06 FB | 	rdlong	local04, #20
1de5c     18 4E 05 F1 | 	add	fp, #24
1de60     A7 24 62 FC | 	wrlong	local04, fp
1de64     0C 4E 05 F1 | 	add	fp, #12
1de68     A7 24 02 FB | 	rdlong	local04, fp
1de6c     1B 24 26 F4 | 	bith	local04, #27
1de70     A7 24 62 FC | 	wrlong	local04, fp
1de74     0C 4E 85 F1 | 	sub	fp, #12
1de78     A7 24 02 FB | 	rdlong	local04, fp
1de7c     18 4E 85 F1 | 	sub	fp, #24
1de80     68 78 04 FF 
1de84     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1de88     1C 4E 05 C1 |  if_b	add	fp, #28
1de8c     00 01 80 CF 
1de90     A7 08 68 CC |  if_b	wrlong	##131076, fp
1de94     1C 4E 85 C1 |  if_b	sub	fp, #28
1de98     6C 02 90 CD |  if_b	jmp	#LR__3176
1de9c     18 4E 05 F1 | 	add	fp, #24
1dea0     A7 24 02 FB | 	rdlong	local04, fp
1dea4     18 4E 85 F1 | 	sub	fp, #24
1dea8     E1 F5 05 FF 
1deac     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1deb0     1C 4E 05 C1 |  if_b	add	fp, #28
1deb4     00 01 80 CF 
1deb8     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1debc     1C 4E 85 C1 |  if_b	sub	fp, #28
1dec0     44 02 90 CD |  if_b	jmp	#LR__3176
1dec4     18 4E 05 F1 | 	add	fp, #24
1dec8     A7 24 02 FB | 	rdlong	local04, fp
1decc     18 4E 85 F1 | 	sub	fp, #24
1ded0     3B 58 08 FF 
1ded4     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1ded8     1C 4E 05 C1 |  if_b	add	fp, #28
1dedc     00 01 80 CF 
1dee0     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1dee4     1C 4E 85 C1 |  if_b	sub	fp, #28
1dee8     1C 02 90 CD |  if_b	jmp	#LR__3176
1deec     1C 4E 05 F1 | 	add	fp, #28
1def0     80 01 80 FF 
1def4     A7 10 68 FC | 	wrlong	##196616, fp
1def8     1C 4E 85 F1 | 	sub	fp, #28
1defc     08 02 90 FD | 	jmp	#LR__3176
1df00                 | LR__3163
1df00     A9 12 06 F6 | 	mov	arg01, #169
1df04     00 14 06 F6 | 	mov	arg02, #0
1df08     E8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0983
1df0c     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1df10     02 24 16 F2 | 	cmp	local04, #2 wc
1df14     18 00 90 3D |  if_ae	jmp	#LR__3164
1df18     0C 4E 05 F1 | 	add	fp, #12
1df1c     A7 04 48 FC | 	wrbyte	#2, fp
1df20     04 4E 05 F1 | 	add	fp, #4
1df24     A7 52 49 FC | 	wrbyte	#169, fp
1df28     10 4E 85 F1 | 	sub	fp, #16
1df2c     14 00 90 FD | 	jmp	#LR__3165
1df30                 | LR__3164
1df30     0C 4E 05 F1 | 	add	fp, #12
1df34     A7 02 48 FC | 	wrbyte	#1, fp
1df38     04 4E 05 F1 | 	add	fp, #4
1df3c     A7 02 48 FC | 	wrbyte	#1, fp
1df40     10 4E 85 F1 | 	sub	fp, #16
1df44                 | LR__3165
1df44                 | ' 				ty =  0x01 ; cmd =  (1) ;
1df44                 | ' 			}
1df44                 | ' 			for (tmr = 1000; tmr; tmr--) {
1df44     18 4E 05 F1 | 	add	fp, #24
1df48     01 00 80 FF 
1df4c     A7 D0 6B FC | 	wrlong	##1000, fp
1df50     18 4E 85 F1 | 	sub	fp, #24
1df54                 | LR__3166
1df54     18 4E 05 F1 | 	add	fp, #24
1df58     A7 22 0A FB | 	rdlong	local03, fp wz
1df5c     18 4E 85 F1 | 	sub	fp, #24
1df60     44 00 90 AD |  if_e	jmp	#LR__3167
1df64     10 4E 05 F1 | 	add	fp, #16
1df68     A7 12 C2 FA | 	rdbyte	arg01, fp
1df6c     10 4E 85 F1 | 	sub	fp, #16
1df70     00 14 06 F6 | 	mov	arg02, #0
1df74     7C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0983
1df78     FD 24 02 F6 | 	mov	local04, result1
1df7c     07 24 4E F7 | 	zerox	local04, #7 wz
1df80     24 00 90 AD |  if_e	jmp	#LR__3167
1df84     01 00 00 FF 
1df88     E8 13 06 F6 | 	mov	arg01, ##1000
1df8c     28 9C BF FD | 	call	#__system___waitus
1df90     18 4E 05 F1 | 	add	fp, #24
1df94     A7 24 02 FB | 	rdlong	local04, fp
1df98     01 24 86 F1 | 	sub	local04, #1
1df9c     A7 24 62 FC | 	wrlong	local04, fp
1dfa0     18 4E 85 F1 | 	sub	fp, #24
1dfa4     AC FF 9F FD | 	jmp	#LR__3166
1dfa8                 | LR__3167
1dfa8     18 4E 05 F1 | 	add	fp, #24
1dfac     A7 24 0A FB | 	rdlong	local04, fp wz
1dfb0     18 4E 85 F1 | 	sub	fp, #24
1dfb4     14 00 90 AD |  if_e	jmp	#LR__3168
1dfb8     10 12 06 F6 | 	mov	arg01, #16
1dfbc     09 14 C6 F9 | 	decod	arg02, #9
1dfc0     30 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0983
1dfc4     07 FA 4D F7 | 	zerox	result1, #7 wz
1dfc8     0C 00 90 AD |  if_e	jmp	#LR__3169
1dfcc                 | LR__3168
1dfcc     0C 4E 05 F1 | 	add	fp, #12
1dfd0     A7 00 48 FC | 	wrbyte	#0, fp
1dfd4     0C 4E 85 F1 | 	sub	fp, #12
1dfd8                 | LR__3169
1dfd8     14 24 06 FB | 	rdlong	local04, #20
1dfdc     18 4E 05 F1 | 	add	fp, #24
1dfe0     A7 24 62 FC | 	wrlong	local04, fp
1dfe4     18 4E 85 F1 | 	sub	fp, #24
1dfe8     F0 FA 02 FF 
1dfec     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1dff0     18 00 90 3D |  if_ae	jmp	#LR__3170
1dff4     24 4E 05 F1 | 	add	fp, #36
1dff8     A7 24 02 FB | 	rdlong	local04, fp
1dffc     1B 24 26 F4 | 	bith	local04, #27
1e000     A7 24 62 FC | 	wrlong	local04, fp
1e004     24 4E 85 F1 | 	sub	fp, #36
1e008     2C 00 90 FD | 	jmp	#LR__3171
1e00c                 | LR__3170
1e00c     18 4E 05 F1 | 	add	fp, #24
1e010     A7 24 02 FB | 	rdlong	local04, fp
1e014     18 4E 85 F1 | 	sub	fp, #24
1e018     E1 F5 05 FF 
1e01c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1e020     24 4E 05 C1 |  if_b	add	fp, #36
1e024     A7 24 02 CB |  if_b	rdlong	local04, fp
1e028     80 00 04 CF 
1e02c     00 24 46 C5 |  if_b	or	local04, ##134283264
1e030     A7 24 62 CC |  if_b	wrlong	local04, fp
1e034     24 4E 85 C1 |  if_b	sub	fp, #36
1e038                 | LR__3171
1e038     18 4E 05 F1 | 	add	fp, #24
1e03c     A7 24 02 FB | 	rdlong	local04, fp
1e040     18 4E 85 F1 | 	sub	fp, #24
1e044     F0 FA 02 FF 
1e048     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1e04c     1C 4E 05 C1 |  if_b	add	fp, #28
1e050     00 01 80 CF 
1e054     A7 08 68 CC |  if_b	wrlong	##131076, fp
1e058     1C 4E 85 C1 |  if_b	sub	fp, #28
1e05c     A8 00 90 CD |  if_b	jmp	#LR__3175
1e060     18 4E 05 F1 | 	add	fp, #24
1e064     A7 24 02 FB | 	rdlong	local04, fp
1e068     18 4E 85 F1 | 	sub	fp, #24
1e06c     68 78 04 FF 
1e070     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1e074     1C 4E 05 C1 |  if_b	add	fp, #28
1e078     80 01 80 CF 
1e07c     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1e080     1C 4E 85 C1 |  if_b	sub	fp, #28
1e084     80 00 90 CD |  if_b	jmp	#LR__3174
1e088     18 4E 05 F1 | 	add	fp, #24
1e08c     A7 24 02 FB | 	rdlong	local04, fp
1e090     18 4E 85 F1 | 	sub	fp, #24
1e094     E1 F5 05 FF 
1e098     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1e09c     1C 4E 05 C1 |  if_b	add	fp, #28
1e0a0     00 02 80 CF 
1e0a4     A7 10 68 CC |  if_b	wrlong	##262152, fp
1e0a8     1C 4E 85 C1 |  if_b	sub	fp, #28
1e0ac     58 00 90 CD |  if_b	jmp	#LR__3173
1e0b0     18 4E 05 F1 | 	add	fp, #24
1e0b4     A7 24 02 FB | 	rdlong	local04, fp
1e0b8     18 4E 85 F1 | 	sub	fp, #24
1e0bc     59 73 07 FF 
1e0c0     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1e0c4     1C 4E 05 C1 |  if_b	add	fp, #28
1e0c8     80 02 80 CF 
1e0cc     A7 14 68 CC |  if_b	wrlong	##327690, fp
1e0d0     1C 4E 85 C1 |  if_b	sub	fp, #28
1e0d4     30 00 90 CD |  if_b	jmp	#LR__3172
1e0d8     18 4E 05 F1 | 	add	fp, #24
1e0dc     A7 24 02 FB | 	rdlong	local04, fp
1e0e0     18 4E 85 F1 | 	sub	fp, #24
1e0e4     D1 F0 08 FF 
1e0e8     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1e0ec     1C 4E 05 C1 |  if_b	add	fp, #28
1e0f0     00 03 80 CF 
1e0f4     A7 18 68 CC |  if_b	wrlong	##393228, fp
1e0f8     1C 4E 85 F3 | 	sumc	fp, #28
1e0fc     80 03 80 3F 
1e100     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1e104     1C 4E 85 31 |  if_ae	sub	fp, #28
1e108                 | LR__3172
1e108                 | LR__3173
1e108                 | LR__3174
1e108                 | LR__3175
1e108                 | LR__3176
1e108                 | LR__3177
1e108     0C 4E 05 F1 | 	add	fp, #12
1e10c     A7 24 C2 FA | 	rdbyte	local04, fp
1e110     01 00 00 FF 
1e114     21 E4 05 F1 | 	add	objptr, ##545
1e118     F2 24 42 FC | 	wrbyte	local04, objptr
1e11c     A7 1E CA FA | 	rdbyte	local01, fp wz
1e120     00 24 06 56 |  if_ne	mov	local04, #0
1e124     01 24 06 A6 |  if_e	mov	local04, #1
1e128     20 4E 05 F1 | 	add	fp, #32
1e12c     A7 24 42 FC | 	wrbyte	local04, fp
1e130     A7 24 C2 FA | 	rdbyte	local04, fp
1e134     2C 4E 85 F1 | 	sub	fp, #44
1e138     01 E4 85 F1 | 	sub	objptr, #1
1e13c     F2 24 42 FC | 	wrbyte	local04, objptr
1e140     01 00 00 FF 
1e144     20 E4 85 F1 | 	sub	objptr, ##544
1e148     E8 7B B0 FD | 	call	#_fatfs_cc_deselect_0969
1e14c     34 4E 05 F1 | 	add	fp, #52
1e150     A7 12 02 FB | 	rdlong	arg01, fp
1e154     18 4E 85 F1 | 	sub	fp, #24
1e158     A7 14 02 FB | 	rdlong	arg02, fp
1e15c     09 15 12 FC | 	wxpin	arg02, arg01
1e160     1C 4E 05 F1 | 	add	fp, #28
1e164     A7 12 02 FB | 	rdlong	arg01, fp
1e168     14 4E 85 F1 | 	sub	fp, #20
1e16c     A7 14 02 FB | 	rdlong	arg02, fp
1e170     09 15 02 FC | 	wrpin	arg02, arg01
1e174                 | ' 
1e174                 | ' 		}
1e174                 | ' 	}
1e174                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1e174                 | ' 	CardType = ty;
1e174                 | ' 	s = ty ? 0 :  0x01 ;
1e174                 | ' 	Stat = s;
1e174                 | ' 
1e174                 | ' 	deselect();
1e174                 | ' 
1e174                 | ' 
1e174                 | ' 	_wxpin( PIN_CLK, ck_div );
1e174                 | ' 	_wrpin( PIN_DI, spm_tx );
1e174                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1e174                 | ' 	return s;
1e174     08 4E 05 F1 | 	add	fp, #8
1e178     A7 FA C1 FA | 	rdbyte	result1, fp
1e17c     2C 4E 85 F1 | 	sub	fp, #44
1e180                 | LR__3178
1e180     A7 F0 03 F6 | 	mov	ptra, fp
1e184     B2 00 A0 FD | 	call	#popregs_
1e188                 | _fatfs_cc_disk_initialize_ret
1e188     2D 00 64 FD | 	ret
1e18c                 | 
1e18c                 | _fatfs_cc_disk_read
1e18c     05 4A 05 F6 | 	mov	COUNT_, #5
1e190     A8 00 A0 FD | 	call	#pushregs_
1e194     0A 1F 02 F6 | 	mov	local01, arg02
1e198     0B 21 02 F6 | 	mov	local02, arg03
1e19c     0C 23 02 F6 | 	mov	local03, arg04
1e1a0     00 12 0E F2 | 	cmp	arg01, #0 wz
1e1a4     01 FA 05 56 |  if_ne	mov	result1, #1
1e1a8                 | ' 
1e1a8                 | ' 	return Stat;
1e1a8     01 00 00 AF 
1e1ac     20 E4 05 A1 |  if_e	add	objptr, ##544
1e1b0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1e1b4     01 00 00 AF 
1e1b8     20 E4 85 A1 |  if_e	sub	objptr, ##544
1e1bc     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e1c0     01 FA CD F7 | 	test	result1, #1 wz
1e1c4     03 FA 05 56 |  if_ne	mov	result1, #3
1e1c8     84 00 90 5D |  if_ne	jmp	#LR__3182
1e1cc     01 00 00 FF 
1e1d0     21 E4 05 F1 | 	add	objptr, ##545
1e1d4     F2 24 C2 FA | 	rdbyte	local04, objptr
1e1d8     01 00 00 FF 
1e1dc     21 E4 85 F1 | 	sub	objptr, ##545
1e1e0     08 24 CE F7 | 	test	local04, #8 wz
1e1e4     09 20 66 A0 |  if_e	shl	local02, #9
1e1e8     02 22 16 F2 | 	cmp	local03, #2 wc
1e1ec     12 24 06 36 |  if_ae	mov	local04, #18
1e1f0     11 24 06 C6 |  if_b	mov	local04, #17
1e1f4     10 15 02 F6 | 	mov	arg02, local02
1e1f8     12 13 02 F6 | 	mov	arg01, local04
1e1fc     F4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0983
1e200     FD 26 02 F6 | 	mov	local05, result1
1e204     07 26 4E F7 | 	zerox	local05, #7 wz
1e208     30 00 90 5D |  if_ne	jmp	#LR__3181
1e20c                 | ' 		do {
1e20c                 | LR__3180
1e20c     0F 13 02 F6 | 	mov	arg01, local01
1e210     09 14 C6 F9 | 	decod	arg02, #9
1e214     30 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0977
1e218     00 FA 0D F2 | 	cmp	result1, #0 wz
1e21c     01 00 00 5F 
1e220     00 1E 06 51 |  if_ne	add	local01, ##512
1e224     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3180
1e228     12 25 E2 F8 | 	getbyte	local04, local04, #0
1e22c     12 24 0E F2 | 	cmp	local04, #18 wz
1e230     0C 12 06 A6 |  if_e	mov	arg01, #12
1e234     00 14 06 A6 |  if_e	mov	arg02, #0
1e238     B8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_0983
1e23c                 | LR__3181
1e23c     F4 7A B0 FD | 	call	#_fatfs_cc_deselect_0969
1e240                 | ' 	}
1e240                 | ' 	deselect();
1e240                 | ' 
1e240                 | ' 	return count ? RES_ERROR : RES_OK;
1e240     00 22 0E F2 | 	cmp	local03, #0 wz
1e244     01 26 06 56 |  if_ne	mov	local05, #1
1e248     00 26 06 A6 |  if_e	mov	local05, #0
1e24c     13 FB 01 F6 | 	mov	result1, local05
1e250                 | LR__3182
1e250     A7 F0 03 F6 | 	mov	ptra, fp
1e254     B2 00 A0 FD | 	call	#popregs_
1e258                 | _fatfs_cc_disk_read_ret
1e258     2D 00 64 FD | 	ret
1e25c                 | 
1e25c                 | _fatfs_cc_disk_write
1e25c     04 4A 05 F6 | 	mov	COUNT_, #4
1e260     A8 00 A0 FD | 	call	#pushregs_
1e264     0A 1F 02 F6 | 	mov	local01, arg02
1e268     0C 21 02 F6 | 	mov	local02, arg04
1e26c     0B 23 02 F6 | 	mov	local03, arg03
1e270     00 12 0E F2 | 	cmp	arg01, #0 wz
1e274     01 FA 05 56 |  if_ne	mov	result1, #1
1e278                 | ' 
1e278                 | ' 	return Stat;
1e278     01 00 00 AF 
1e27c     20 E4 05 A1 |  if_e	add	objptr, ##544
1e280     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1e284     01 00 00 AF 
1e288     20 E4 85 A1 |  if_e	sub	objptr, ##544
1e28c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e290     01 FA CD F7 | 	test	result1, #1 wz
1e294     03 FA 05 56 |  if_ne	mov	result1, #3
1e298     D4 00 90 5D |  if_ne	jmp	#LR__3194
1e29c     01 00 00 FF 
1e2a0     21 E4 05 F1 | 	add	objptr, ##545
1e2a4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1e2a8     01 00 00 FF 
1e2ac     21 E4 85 F1 | 	sub	objptr, ##545
1e2b0     08 16 CE F7 | 	test	arg03, #8 wz
1e2b4     09 22 66 A0 |  if_e	shl	local03, #9
1e2b8     01 20 0E F2 | 	cmp	local02, #1 wz
1e2bc     30 00 90 5D |  if_ne	jmp	#LR__3190
1e2c0     18 12 06 F6 | 	mov	arg01, #24
1e2c4     11 15 02 F6 | 	mov	arg02, local03
1e2c8     28 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0983
1e2cc     FD 24 02 F6 | 	mov	local04, result1
1e2d0     07 24 4E F7 | 	zerox	local04, #7 wz
1e2d4     84 00 90 5D |  if_ne	jmp	#LR__3193
1e2d8     0F 13 02 F6 | 	mov	arg01, local01
1e2dc     FE 14 06 F6 | 	mov	arg02, #254
1e2e0     44 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_0979
1e2e4     00 FA 0D F2 | 	cmp	result1, #0 wz
1e2e8     00 20 06 56 |  if_ne	mov	local02, #0
1e2ec     6C 00 90 FD | 	jmp	#LR__3193
1e2f0                 | LR__3190
1e2f0     01 00 00 FF 
1e2f4     21 E4 05 F1 | 	add	objptr, ##545
1e2f8     F2 24 C2 FA | 	rdbyte	local04, objptr
1e2fc     01 00 00 FF 
1e300     21 E4 85 F1 | 	sub	objptr, ##545
1e304     06 24 CE F7 | 	test	local04, #6 wz
1e308     97 12 06 56 |  if_ne	mov	arg01, #151
1e30c     10 15 02 56 |  if_ne	mov	arg02, local02
1e310     E0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_0983
1e314     11 15 02 F6 | 	mov	arg02, local03
1e318     19 12 06 F6 | 	mov	arg01, #25
1e31c     D4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_0983
1e320     FD 24 02 F6 | 	mov	local04, result1
1e324     07 24 4E F7 | 	zerox	local04, #7 wz
1e328     30 00 90 5D |  if_ne	jmp	#LR__3192
1e32c                 | ' 			do {
1e32c                 | LR__3191
1e32c     0F 13 02 F6 | 	mov	arg01, local01
1e330     FC 14 06 F6 | 	mov	arg02, #252
1e334     F0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0979
1e338     00 FA 0D F2 | 	cmp	result1, #0 wz
1e33c     01 00 00 5F 
1e340     00 1E 06 51 |  if_ne	add	local01, ##512
1e344     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3191
1e348     00 12 06 F6 | 	mov	arg01, #0
1e34c     FD 14 06 F6 | 	mov	arg02, #253
1e350     D4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0979
1e354     00 FA 0D F2 | 	cmp	result1, #0 wz
1e358     01 20 06 A6 |  if_e	mov	local02, #1
1e35c                 | LR__3192
1e35c                 | LR__3193
1e35c     D4 79 B0 FD | 	call	#_fatfs_cc_deselect_0969
1e360                 | ' 				count = 1;
1e360                 | ' 		}
1e360                 | ' 	}
1e360                 | ' 	deselect();
1e360                 | ' 
1e360                 | ' 	return count ? RES_ERROR : RES_OK;
1e360     00 20 0E F2 | 	cmp	local02, #0 wz
1e364     01 24 06 56 |  if_ne	mov	local04, #1
1e368     00 24 06 A6 |  if_e	mov	local04, #0
1e36c     12 FB 01 F6 | 	mov	result1, local04
1e370                 | LR__3194
1e370     A7 F0 03 F6 | 	mov	ptra, fp
1e374     B2 00 A0 FD | 	call	#popregs_
1e378                 | _fatfs_cc_disk_write_ret
1e378     2D 00 64 FD | 	ret
1e37c                 | 
1e37c                 | _fatfs_cc_disk_ioctl
1e37c     01 4A 05 F6 | 	mov	COUNT_, #1
1e380     A8 00 A0 FD | 	call	#pushregs_
1e384     30 F0 07 F1 | 	add	ptra, #48
1e388     04 4E 05 F1 | 	add	fp, #4
1e38c     A7 12 42 FC | 	wrbyte	arg01, fp
1e390     04 4E 05 F1 | 	add	fp, #4
1e394     A7 14 42 FC | 	wrbyte	arg02, fp
1e398     04 4E 05 F1 | 	add	fp, #4
1e39c     A7 16 62 FC | 	wrlong	arg03, fp
1e3a0     08 4E 85 F1 | 	sub	fp, #8
1e3a4     A7 12 CA FA | 	rdbyte	arg01, fp wz
1e3a8     04 4E 85 F1 | 	sub	fp, #4
1e3ac     01 FA 05 56 |  if_ne	mov	result1, #1
1e3b0                 | ' 
1e3b0                 | ' 	return Stat;
1e3b0     01 00 00 AF 
1e3b4     20 E4 05 A1 |  if_e	add	objptr, ##544
1e3b8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1e3bc     01 00 00 AF 
1e3c0     20 E4 85 A1 |  if_e	sub	objptr, ##544
1e3c4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e3c8     01 FA CD F7 | 	test	result1, #1 wz
1e3cc     03 FA 05 56 |  if_ne	mov	result1, #3
1e3d0     E4 01 90 5D |  if_ne	jmp	#LR__3208
1e3d4     10 4E 05 F1 | 	add	fp, #16
1e3d8     A7 02 68 FC | 	wrlong	#1, fp
1e3dc                 | ' 
1e3dc                 | ' 	res = RES_ERROR;
1e3dc                 | ' 	switch (ctrl) {
1e3dc     08 4E 85 F1 | 	sub	fp, #8
1e3e0     A7 1E C2 FA | 	rdbyte	local01, fp
1e3e4     08 4E 85 F1 | 	sub	fp, #8
1e3e8     04 1E 26 F3 | 	fle	local01, #4
1e3ec     30 1E 62 FD | 	jmprel	local01
1e3f0                 | LR__3200
1e3f0     10 00 90 FD | 	jmp	#LR__3201
1e3f4     24 00 90 FD | 	jmp	#LR__3202
1e3f8     A0 01 90 FD | 	jmp	#LR__3206
1e3fc     80 01 90 FD | 	jmp	#LR__3205
1e400     98 01 90 FD | 	jmp	#LR__3206
1e404                 | LR__3201
1e404     B0 79 B0 FD | 	call	#_fatfs_cc_select_0973
1e408     00 FA 0D F2 | 	cmp	result1, #0 wz
1e40c     10 4E 05 51 |  if_ne	add	fp, #16
1e410     A7 00 68 5C |  if_ne	wrlong	#0, fp
1e414     10 4E 85 51 |  if_ne	sub	fp, #16
1e418                 | ' 			break;
1e418     8C 01 90 FD | 	jmp	#LR__3207
1e41c                 | LR__3202
1e41c     09 12 06 F6 | 	mov	arg01, #9
1e420     00 14 06 F6 | 	mov	arg02, #0
1e424     CC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_0983
1e428     FD 1E 02 F6 | 	mov	local01, result1
1e42c     07 1E 4E F7 | 	zerox	local01, #7 wz
1e430     74 01 90 5D |  if_ne	jmp	#LR__3207
1e434     18 4E 05 F1 | 	add	fp, #24
1e438     A7 12 02 F6 | 	mov	arg01, fp
1e43c     18 4E 85 F1 | 	sub	fp, #24
1e440     10 14 06 F6 | 	mov	arg02, #16
1e444     00 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0977
1e448     00 FA 0D F2 | 	cmp	result1, #0 wz
1e44c     58 01 90 AD |  if_e	jmp	#LR__3207
1e450     18 4E 05 F1 | 	add	fp, #24
1e454     A7 1E C2 FA | 	rdbyte	local01, fp
1e458     18 4E 85 F1 | 	sub	fp, #24
1e45c     06 1E 46 F0 | 	shr	local01, #6
1e460     01 1E 0E F2 | 	cmp	local01, #1 wz
1e464     5C 00 90 5D |  if_ne	jmp	#LR__3203
1e468     21 4E 05 F1 | 	add	fp, #33
1e46c     A7 1E C2 FA | 	rdbyte	local01, fp
1e470     01 4E 85 F1 | 	sub	fp, #1
1e474     A7 FA C1 FA | 	rdbyte	result1, fp
1e478     FD FA 31 F9 | 	getword	result1, result1, #0
1e47c     08 FA 65 F0 | 	shl	result1, #8
1e480     FD 1E 02 F1 | 	add	local01, result1
1e484     01 4E 85 F1 | 	sub	fp, #1
1e488     A7 FA C1 FA | 	rdbyte	result1, fp
1e48c     3F FA 05 F5 | 	and	result1, #63
1e490     10 FA 65 F0 | 	shl	result1, #16
1e494     FD 1E 02 F1 | 	add	local01, result1
1e498     01 1E 06 F1 | 	add	local01, #1
1e49c     09 4E 05 F1 | 	add	fp, #9
1e4a0     A7 1E 62 FC | 	wrlong	local01, fp
1e4a4     1C 4E 85 F1 | 	sub	fp, #28
1e4a8     A7 1E 02 FB | 	rdlong	local01, fp
1e4ac     1C 4E 05 F1 | 	add	fp, #28
1e4b0     A7 FA 01 FB | 	rdlong	result1, fp
1e4b4     28 4E 85 F1 | 	sub	fp, #40
1e4b8     0A FA 65 F0 | 	shl	result1, #10
1e4bc     0F FB 61 FC | 	wrlong	result1, local01
1e4c0     AC 00 90 FD | 	jmp	#LR__3204
1e4c4                 | LR__3203
1e4c4     1D 4E 05 F1 | 	add	fp, #29
1e4c8     A7 1E C2 FA | 	rdbyte	local01, fp
1e4cc     0F 1F 42 F8 | 	getnib	local01, local01, #0
1e4d0     05 4E 05 F1 | 	add	fp, #5
1e4d4     A7 FA C1 FA | 	rdbyte	result1, fp
1e4d8     80 FA 05 F5 | 	and	result1, #128
1e4dc     07 FA C5 F0 | 	sar	result1, #7
1e4e0     FD 1E 02 F1 | 	add	local01, result1
1e4e4     01 4E 85 F1 | 	sub	fp, #1
1e4e8     A7 FA C1 FA | 	rdbyte	result1, fp
1e4ec     03 FA 05 F5 | 	and	result1, #3
1e4f0     01 FA 65 F0 | 	shl	result1, #1
1e4f4     FD 1E 02 F1 | 	add	local01, result1
1e4f8     02 1E 06 F1 | 	add	local01, #2
1e4fc     0D 4E 85 F1 | 	sub	fp, #13
1e500     A7 1E 42 FC | 	wrbyte	local01, fp
1e504     0C 4E 05 F1 | 	add	fp, #12
1e508     A7 1E C2 FA | 	rdbyte	local01, fp
1e50c     06 1E 46 F0 | 	shr	local01, #6
1e510     01 4E 85 F1 | 	sub	fp, #1
1e514     A7 FA C1 FA | 	rdbyte	result1, fp
1e518     FD FA 31 F9 | 	getword	result1, result1, #0
1e51c     02 FA 65 F0 | 	shl	result1, #2
1e520     FD 1E 02 F1 | 	add	local01, result1
1e524     01 4E 85 F1 | 	sub	fp, #1
1e528     A7 FA C1 FA | 	rdbyte	result1, fp
1e52c     03 FA 05 F5 | 	and	result1, #3
1e530     FD FA 31 F9 | 	getword	result1, result1, #0
1e534     0A FA 65 F0 | 	shl	result1, #10
1e538     FD 1E 02 F1 | 	add	local01, result1
1e53c     01 1E 06 F1 | 	add	local01, #1
1e540     0A 4E 05 F1 | 	add	fp, #10
1e544     A7 1E 62 FC | 	wrlong	local01, fp
1e548     1C 4E 85 F1 | 	sub	fp, #28
1e54c     A7 1E 02 FB | 	rdlong	local01, fp
1e550     1C 4E 05 F1 | 	add	fp, #28
1e554     A7 FA 01 FB | 	rdlong	result1, fp
1e558     14 4E 85 F1 | 	sub	fp, #20
1e55c     A7 16 C2 FA | 	rdbyte	arg03, fp
1e560     14 4E 85 F1 | 	sub	fp, #20
1e564     09 16 86 F1 | 	sub	arg03, #9
1e568     0B FB 61 F0 | 	shl	result1, arg03
1e56c     0F FB 61 FC | 	wrlong	result1, local01
1e570                 | LR__3204
1e570     10 4E 05 F1 | 	add	fp, #16
1e574     A7 00 68 FC | 	wrlong	#0, fp
1e578     10 4E 85 F1 | 	sub	fp, #16
1e57c                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1e57c                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1e57c                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1e57c                 | ' 				}
1e57c                 | ' 				res = RES_OK;
1e57c                 | ' 			}
1e57c                 | ' 			break;
1e57c     28 00 90 FD | 	jmp	#LR__3207
1e580                 | LR__3205
1e580     0C 4E 05 F1 | 	add	fp, #12
1e584     A7 1E 02 FB | 	rdlong	local01, fp
1e588     0F 01 69 FC | 	wrlong	#128, local01
1e58c     04 4E 05 F1 | 	add	fp, #4
1e590     A7 00 68 FC | 	wrlong	#0, fp
1e594     10 4E 85 F1 | 	sub	fp, #16
1e598                 | ' 			*(DWORD*)buff = 128;
1e598                 | ' 			res = RES_OK;
1e598                 | ' 			break;
1e598     0C 00 90 FD | 	jmp	#LR__3207
1e59c                 | LR__3206
1e59c     10 4E 05 F1 | 	add	fp, #16
1e5a0     A7 08 68 FC | 	wrlong	#4, fp
1e5a4     10 4E 85 F1 | 	sub	fp, #16
1e5a8                 | LR__3207
1e5a8     88 77 B0 FD | 	call	#_fatfs_cc_deselect_0969
1e5ac                 | ' 			res = RES_PARERR;
1e5ac                 | ' 	}
1e5ac                 | ' 
1e5ac                 | ' 	deselect();
1e5ac                 | ' 
1e5ac                 | ' 	return res;
1e5ac     10 4E 05 F1 | 	add	fp, #16
1e5b0     A7 FA 01 FB | 	rdlong	result1, fp
1e5b4     10 4E 85 F1 | 	sub	fp, #16
1e5b8                 | LR__3208
1e5b8     A7 F0 03 F6 | 	mov	ptra, fp
1e5bc     B2 00 A0 FD | 	call	#popregs_
1e5c0                 | _fatfs_cc_disk_ioctl_ret
1e5c0     2D 00 64 FD | 	ret
1e5c4                 | 
1e5c4                 | _fatfs_cc_disk_setpins
1e5c4     00 12 0E F2 | 	cmp	arg01, #0 wz
1e5c8     01 FA 65 56 |  if_ne	neg	result1, #1
1e5cc     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
1e5d0     01 00 00 FF 
1e5d4     10 E4 05 F1 | 	add	objptr, ##528
1e5d8     F2 14 62 FC | 	wrlong	arg02, objptr
1e5dc     04 E4 05 F1 | 	add	objptr, #4
1e5e0     F2 16 62 FC | 	wrlong	arg03, objptr
1e5e4     04 E4 05 F1 | 	add	objptr, #4
1e5e8     F2 18 62 FC | 	wrlong	arg04, objptr
1e5ec     04 E4 05 F1 | 	add	objptr, #4
1e5f0     F2 1A 62 FC | 	wrlong	arg05, objptr
1e5f4     01 00 00 FF 
1e5f8     1C E4 85 F1 | 	sub	objptr, ##540
1e5fc     00 FA 05 F6 | 	mov	result1, #0
1e600                 | _fatfs_cc_disk_setpins_ret
1e600     2D 00 64 FD | 	ret
1e604                 | 
1e604                 | _fatfs_cc_tchar2uni
1e604     09 01 02 FB | 	rdlong	_var01, arg01
1e608     00 03 02 F6 | 	mov	_var02, _var01
1e60c     01 00 06 F1 | 	add	_var01, #1
1e610     00 05 02 F6 | 	mov	_var03, _var01
1e614     01 07 C2 FA | 	rdbyte	_var04, _var02
1e618     80 06 CE F7 | 	test	_var04, #128 wz
1e61c     E8 00 90 AD |  if_e	jmp	#LR__3217
1e620     03 09 02 F6 | 	mov	_var05, _var04
1e624     E0 08 06 F5 | 	and	_var05, #224
1e628     C0 08 0E F2 | 	cmp	_var05, #192 wz
1e62c     1F 06 06 A5 |  if_e	and	_var04, #31
1e630     01 0A 06 A6 |  if_e	mov	_var06, #1
1e634     34 00 90 AD |  if_e	jmp	#LR__3211
1e638     03 09 02 F6 | 	mov	_var05, _var04
1e63c     F0 08 06 F5 | 	and	_var05, #240
1e640     E0 08 0E F2 | 	cmp	_var05, #224 wz
1e644     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
1e648     02 0A 06 A6 |  if_e	mov	_var06, #2
1e64c     1C 00 90 AD |  if_e	jmp	#LR__3210
1e650     03 09 02 F6 | 	mov	_var05, _var04
1e654     F8 08 06 F5 | 	and	_var05, #248
1e658     F0 08 0E F2 | 	cmp	_var05, #240 wz
1e65c     07 06 06 A5 |  if_e	and	_var04, #7
1e660     03 0A 06 A6 |  if_e	mov	_var06, #3
1e664                 | ' 			return 0xFFFFFFFF;
1e664     01 FA 65 56 |  if_ne	neg	result1, #1
1e668     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1e66c                 | LR__3210
1e66c                 | LR__3211
1e66c                 | ' 		}
1e66c                 | ' 		do {
1e66c                 | LR__3212
1e66c     02 0D C2 FA | 	rdbyte	_var07, _var03
1e670     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
1e674     C0 08 06 F5 | 	and	_var05, #192
1e678     80 08 0E F2 | 	cmp	_var05, #128 wz
1e67c     01 04 06 F1 | 	add	_var03, #1
1e680     01 FA 65 56 |  if_ne	neg	result1, #1
1e684     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1e688     06 06 66 F0 | 	shl	_var04, #6
1e68c     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
1e690     3F 02 06 F5 | 	and	_var02, #63
1e694     01 07 42 F5 | 	or	_var04, _var02
1e698     F4 0B 6E FB | 	djnz	_var06, #LR__3212
1e69c     80 06 16 F2 | 	cmp	_var04, #128 wc
1e6a0     24 00 90 CD |  if_b	jmp	#LR__3214
1e6a4     6C 00 00 FF 
1e6a8     00 06 16 F2 | 	cmp	_var04, ##55296 wc
1e6ac     0C 00 90 CD |  if_b	jmp	#LR__3213
1e6b0     70 00 00 FF 
1e6b4     00 06 16 F2 | 	cmp	_var04, ##57344 wc
1e6b8     0C 00 90 CD |  if_b	jmp	#LR__3214
1e6bc                 | LR__3213
1e6bc     80 08 00 FF 
1e6c0     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
1e6c4     08 00 90 CD |  if_b	jmp	#LR__3215
1e6c8                 | LR__3214
1e6c8     01 FA 65 F6 | 	neg	result1, #1
1e6cc     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
1e6d0                 | LR__3215
1e6d0     80 00 00 FF 
1e6d4     00 06 16 F2 | 	cmp	_var04, ##65536 wc
1e6d8     2C 00 90 CD |  if_b	jmp	#LR__3216
1e6dc     03 03 02 F6 | 	mov	_var02, _var04
1e6e0     80 00 00 FF 
1e6e4     00 02 86 F1 | 	sub	_var02, ##65536
1e6e8     06 02 66 F0 | 	shl	_var02, #6
1e6ec     80 FF 01 FF 
1e6f0     00 02 06 F5 | 	and	_var02, ##67043328
1e6f4     6E 00 6C FF 
1e6f8     00 08 06 F6 | 	mov	_var05, ##-671032320
1e6fc     01 09 42 F5 | 	or	_var05, _var02
1e700     09 06 46 F7 | 	zerox	_var04, #9
1e704     04 07 42 F5 | 	or	_var04, _var05
1e708                 | LR__3216
1e708                 | LR__3217
1e708     09 05 62 FC | 	wrlong	_var03, arg01
1e70c                 | ' 	}
1e70c                 | ' #line 811 "ff.c"
1e70c                 | ' 	*str = p;
1e70c                 | ' 	return uc;
1e70c     03 FB 01 F6 | 	mov	result1, _var04
1e710                 | _fatfs_cc_tchar2uni_ret
1e710     2D 00 64 FD | 	ret
1e714                 | 
1e714                 | _fatfs_cc_put_utf
1e714     80 12 16 F2 | 	cmp	arg01, #128 wc
1e718     18 00 90 3D |  if_ae	jmp	#LR__3220
1e71c     01 16 16 F2 | 	cmp	arg03, #1 wc
1e720     00 FA 05 C6 |  if_b	mov	result1, #0
1e724     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1e728     0A 13 42 FC | 	wrbyte	arg01, arg02
1e72c                 | ' 		*buf = (TCHAR)chr;
1e72c                 | ' 		return 1;
1e72c     01 FA 05 F6 | 	mov	result1, #1
1e730     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1e734                 | LR__3220
1e734     04 00 00 FF 
1e738     00 12 16 F2 | 	cmp	arg01, ##2048 wc
1e73c     40 00 90 3D |  if_ae	jmp	#LR__3221
1e740     02 16 16 F2 | 	cmp	arg03, #2 wc
1e744     00 FA 05 C6 |  if_b	mov	result1, #0
1e748     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1e74c     09 FB 01 F6 | 	mov	result1, arg01
1e750     06 FA 45 F0 | 	shr	result1, #6
1e754     1F FA 05 F5 | 	and	result1, #31
1e758     C0 16 06 F6 | 	mov	arg03, #192
1e75c     FD 16 42 F5 | 	or	arg03, result1
1e760     0A 17 42 FC | 	wrbyte	arg03, arg02
1e764     01 14 06 F1 | 	add	arg02, #1
1e768     3F 12 06 F5 | 	and	arg01, #63
1e76c     80 FA 05 F6 | 	mov	result1, #128
1e770     09 FB 41 F5 | 	or	result1, arg01
1e774     0A FB 41 FC | 	wrbyte	result1, arg02
1e778                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
1e778                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1e778                 | ' 		return 2;
1e778     02 FA 05 F6 | 	mov	result1, #2
1e77c     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1e780                 | LR__3221
1e780     80 00 00 FF 
1e784     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1e788     70 00 90 3D |  if_ae	jmp	#LR__3224
1e78c     03 16 16 F2 | 	cmp	arg03, #3 wc
1e790     18 00 90 CD |  if_b	jmp	#LR__3222
1e794     6C 00 00 FF 
1e798     00 12 16 F2 | 	cmp	arg01, ##55296 wc
1e79c     14 00 90 CD |  if_b	jmp	#LR__3223
1e7a0     70 00 00 FF 
1e7a4     00 12 16 F2 | 	cmp	arg01, ##57344 wc
1e7a8     08 00 90 3D |  if_ae	jmp	#LR__3223
1e7ac                 | LR__3222
1e7ac     00 FA 05 F6 | 	mov	result1, #0
1e7b0     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1e7b4                 | LR__3223
1e7b4     09 FB 59 F8 | 	getnib	result1, arg01, #3
1e7b8     E0 16 06 F6 | 	mov	arg03, #224
1e7bc     FD 16 42 F5 | 	or	arg03, result1
1e7c0     0A 17 42 FC | 	wrbyte	arg03, arg02
1e7c4     01 14 06 F1 | 	add	arg02, #1
1e7c8     09 FB 01 F6 | 	mov	result1, arg01
1e7cc     06 FA 45 F0 | 	shr	result1, #6
1e7d0     3F FA 05 F5 | 	and	result1, #63
1e7d4     80 16 06 F6 | 	mov	arg03, #128
1e7d8     FD 16 42 F5 | 	or	arg03, result1
1e7dc     0A 17 42 FC | 	wrbyte	arg03, arg02
1e7e0     01 14 06 F1 | 	add	arg02, #1
1e7e4     3F 12 06 F5 | 	and	arg01, #63
1e7e8     80 FA 05 F6 | 	mov	result1, #128
1e7ec     09 FB 41 F5 | 	or	result1, arg01
1e7f0     0A FB 41 FC | 	wrbyte	result1, arg02
1e7f4                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
1e7f4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1e7f4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1e7f4                 | ' 		return 3;
1e7f4     03 FA 05 F6 | 	mov	result1, #3
1e7f8     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1e7fc                 | LR__3224
1e7fc     04 16 16 F2 | 	cmp	arg03, #4 wc
1e800     00 FA 05 C6 |  if_b	mov	result1, #0
1e804     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1e808     09 01 02 F6 | 	mov	_var01, arg01
1e80c     E0 01 06 F4 | 	bitl	_var01, #480
1e810     00 00 6C FF 
1e814     00 00 86 F1 | 	sub	_var01, ##-671088640
1e818     06 00 46 F0 | 	shr	_var01, #6
1e81c     09 13 32 F9 | 	getword	arg01, arg01, #0
1e820     6E 00 00 FF 
1e824     00 12 86 F1 | 	sub	arg01, ##56320
1e828     00 08 00 FF 
1e82c     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
1e830     02 00 00 CF 
1e834     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
1e838     00 FA 05 36 |  if_ae	mov	result1, #0
1e83c     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
1e840     09 01 42 F5 | 	or	_var01, arg01
1e844     80 00 00 FF 
1e848     00 00 06 F1 | 	add	_var01, ##65536
1e84c     00 FB 01 F6 | 	mov	result1, _var01
1e850     12 FA 45 F0 | 	shr	result1, #18
1e854     07 FA 05 F5 | 	and	result1, #7
1e858     F0 16 06 F6 | 	mov	arg03, #240
1e85c     FD 16 42 F5 | 	or	arg03, result1
1e860     0A 17 42 FC | 	wrbyte	arg03, arg02
1e864     01 14 06 F1 | 	add	arg02, #1
1e868     00 FB 01 F6 | 	mov	result1, _var01
1e86c     0C FA 45 F0 | 	shr	result1, #12
1e870     3F FA 05 F5 | 	and	result1, #63
1e874     80 16 06 F6 | 	mov	arg03, #128
1e878     FD 16 42 F5 | 	or	arg03, result1
1e87c     0A 17 42 FC | 	wrbyte	arg03, arg02
1e880     01 14 06 F1 | 	add	arg02, #1
1e884     00 FB 01 F6 | 	mov	result1, _var01
1e888     06 FA 45 F0 | 	shr	result1, #6
1e88c     3F FA 05 F5 | 	and	result1, #63
1e890     80 16 06 F6 | 	mov	arg03, #128
1e894     FD 16 42 F5 | 	or	arg03, result1
1e898     0A 17 42 FC | 	wrbyte	arg03, arg02
1e89c     01 14 06 F1 | 	add	arg02, #1
1e8a0     3F 00 06 F5 | 	and	_var01, #63
1e8a4     80 FA 05 F6 | 	mov	result1, #128
1e8a8     00 FB 41 F5 | 	or	result1, _var01
1e8ac     0A FB 41 FC | 	wrbyte	result1, arg02
1e8b0                 | ' 	chr = (hc | chr) + 0x10000;
1e8b0                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
1e8b0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
1e8b0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1e8b0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1e8b0                 | ' 	return 4;
1e8b0     04 FA 05 F6 | 	mov	result1, #4
1e8b4                 | _fatfs_cc_put_utf_ret
1e8b4     2D 00 64 FD | 	ret
1e8b8                 | 
1e8b8                 | _fatfs_cc_sync_window
1e8b8     02 4A 05 F6 | 	mov	COUNT_, #2
1e8bc     A8 00 A0 FD | 	call	#pushregs_
1e8c0     09 1F 02 F6 | 	mov	local01, arg01
1e8c4     00 20 06 F6 | 	mov	local02, #0
1e8c8     03 1E 06 F1 | 	add	local01, #3
1e8cc     0F FB C9 FA | 	rdbyte	result1, local01 wz
1e8d0     03 1E 86 F1 | 	sub	local01, #3
1e8d4     A4 00 90 AD |  if_e	jmp	#LR__3232
1e8d8     01 1E 06 F1 | 	add	local01, #1
1e8dc     0F 13 C2 FA | 	rdbyte	arg01, local01
1e8e0     33 1E 06 F1 | 	add	local01, #51
1e8e4     0F 15 02 F6 | 	mov	arg02, local01
1e8e8     04 1E 86 F1 | 	sub	local01, #4
1e8ec     0F 17 02 FB | 	rdlong	arg03, local01
1e8f0     30 1E 86 F1 | 	sub	local01, #48
1e8f4     01 18 06 F6 | 	mov	arg04, #1
1e8f8     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
1e8fc     00 FA 0D F2 | 	cmp	result1, #0 wz
1e900     74 00 90 5D |  if_ne	jmp	#LR__3230
1e904     03 1E 06 F1 | 	add	local01, #3
1e908     0F 01 48 FC | 	wrbyte	#0, local01
1e90c     2D 1E 06 F1 | 	add	local01, #45
1e910     0F FB 01 FB | 	rdlong	result1, local01
1e914     0C 1E 86 F1 | 	sub	local01, #12
1e918     0F 19 02 FB | 	rdlong	arg04, local01
1e91c     0C FB 81 F1 | 	sub	result1, arg04
1e920     08 1E 86 F1 | 	sub	local01, #8
1e924     0F 19 02 FB | 	rdlong	arg04, local01
1e928     1C 1E 86 F1 | 	sub	local01, #28
1e92c     0C FB 11 F2 | 	cmp	result1, arg04 wc
1e930     48 00 90 3D |  if_ae	jmp	#LR__3231
1e934     02 1E 06 F1 | 	add	local01, #2
1e938     0F 19 C2 FA | 	rdbyte	arg04, local01
1e93c     02 1E 86 F1 | 	sub	local01, #2
1e940     02 18 0E F2 | 	cmp	arg04, #2 wz
1e944     34 00 90 5D |  if_ne	jmp	#LR__3231
1e948     01 1E 06 F1 | 	add	local01, #1
1e94c     0F 13 C2 FA | 	rdbyte	arg01, local01
1e950     33 1E 06 F1 | 	add	local01, #51
1e954     0F 15 02 F6 | 	mov	arg02, local01
1e958     04 1E 86 F1 | 	sub	local01, #4
1e95c     0F 17 02 FB | 	rdlong	arg03, local01
1e960     14 1E 86 F1 | 	sub	local01, #20
1e964     0F 1F 02 FB | 	rdlong	local01, local01
1e968     0F 17 02 F1 | 	add	arg03, local01
1e96c     01 18 06 F6 | 	mov	arg04, #1
1e970     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
1e974     04 00 90 FD | 	jmp	#LR__3231
1e978                 | LR__3230
1e978     01 20 06 F6 | 	mov	local02, #1
1e97c                 | LR__3231
1e97c                 | LR__3232
1e97c                 | ' 			res = FR_DISK_ERR;
1e97c                 | ' 		}
1e97c                 | ' 	}
1e97c                 | ' 	return res;
1e97c     10 FB 01 F6 | 	mov	result1, local02
1e980     A7 F0 03 F6 | 	mov	ptra, fp
1e984     B2 00 A0 FD | 	call	#popregs_
1e988                 | _fatfs_cc_sync_window_ret
1e988     2D 00 64 FD | 	ret
1e98c                 | 
1e98c                 | _fatfs_cc_move_window
1e98c     03 4A 05 F6 | 	mov	COUNT_, #3
1e990     A8 00 A0 FD | 	call	#pushregs_
1e994     09 1F 02 F6 | 	mov	local01, arg01
1e998     0A 21 02 F6 | 	mov	local02, arg02
1e99c     00 22 06 F6 | 	mov	local03, #0
1e9a0     30 1E 06 F1 | 	add	local01, #48
1e9a4     0F 19 02 FB | 	rdlong	arg04, local01
1e9a8     30 1E 86 F1 | 	sub	local01, #48
1e9ac     0C 21 0A F2 | 	cmp	local02, arg04 wz
1e9b0     40 00 90 AD |  if_e	jmp	#LR__3241
1e9b4     0F 13 02 F6 | 	mov	arg01, local01
1e9b8     FC FE BF FD | 	call	#_fatfs_cc_sync_window
1e9bc     FD 22 0A F6 | 	mov	local03, result1 wz
1e9c0     30 00 90 5D |  if_ne	jmp	#LR__3240
1e9c4     01 1E 06 F1 | 	add	local01, #1
1e9c8     0F 13 C2 FA | 	rdbyte	arg01, local01
1e9cc     33 1E 06 F1 | 	add	local01, #51
1e9d0     0F 15 02 F6 | 	mov	arg02, local01
1e9d4     10 17 02 F6 | 	mov	arg03, local02
1e9d8     01 18 06 F6 | 	mov	arg04, #1
1e9dc     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
1e9e0     00 FA 0D F2 | 	cmp	result1, #0 wz
1e9e4     01 20 66 56 |  if_ne	neg	local02, #1
1e9e8     01 22 06 56 |  if_ne	mov	local03, #1
1e9ec     04 1E 86 F1 | 	sub	local01, #4
1e9f0     0F 21 62 FC | 	wrlong	local02, local01
1e9f4                 | LR__3240
1e9f4                 | LR__3241
1e9f4                 | ' 				sect = (LBA_t)0 - 1;
1e9f4                 | ' 				res = FR_DISK_ERR;
1e9f4                 | ' 			}
1e9f4                 | ' 			fs->winsect = sect;
1e9f4                 | ' 		}
1e9f4                 | ' 	}
1e9f4                 | ' 	return res;
1e9f4     11 FB 01 F6 | 	mov	result1, local03
1e9f8     A7 F0 03 F6 | 	mov	ptra, fp
1e9fc     B2 00 A0 FD | 	call	#popregs_
1ea00                 | _fatfs_cc_move_window_ret
1ea00     2D 00 64 FD | 	ret
1ea04                 | 
1ea04                 | _fatfs_cc_sync_fs
1ea04     02 4A 05 F6 | 	mov	COUNT_, #2
1ea08     A8 00 A0 FD | 	call	#pushregs_
1ea0c     09 1F 02 F6 | 	mov	local01, arg01
1ea10     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
1ea14     FD 20 0A F6 | 	mov	local02, result1 wz
1ea18     D8 00 90 5D |  if_ne	jmp	#LR__3251
1ea1c     0F 19 C2 FA | 	rdbyte	arg04, local01
1ea20     03 18 0E F2 | 	cmp	arg04, #3 wz
1ea24     04 1E 06 A1 |  if_e	add	local01, #4
1ea28     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
1ea2c     04 1E 86 A1 |  if_e	sub	local01, #4
1ea30     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
1ea34     A0 00 90 5D |  if_ne	jmp	#LR__3250
1ea38     34 1E 06 F1 | 	add	local01, #52
1ea3c     0F 13 02 F6 | 	mov	arg01, local01
1ea40     00 14 06 F6 | 	mov	arg02, #0
1ea44     09 16 C6 F9 | 	decod	arg03, #9
1ea48     98 00 A0 FD | 	call	#\builtin_bytefill_
1ea4c     0F 13 02 F6 | 	mov	arg01, local01
1ea50     FE 13 06 F1 | 	add	arg01, #510
1ea54     55 00 80 FF 
1ea58     09 AB 58 FC | 	wrword	##43605, arg01
1ea5c     A9 B0 A0 FF 
1ea60     0F A5 68 FC | 	wrlong	##1096897106, local01
1ea64     0F 13 02 F6 | 	mov	arg01, local01
1ea68     E4 13 06 F1 | 	add	arg01, #484
1ea6c     B9 A0 B0 FF 
1ea70     09 E5 68 FC | 	wrlong	##1631679090, arg01
1ea74     0F 13 02 F6 | 	mov	arg01, local01
1ea78     E8 13 06 F1 | 	add	arg01, #488
1ea7c     20 1E 86 F1 | 	sub	local01, #32
1ea80     0F 15 02 FB | 	rdlong	arg02, local01
1ea84     09 15 62 FC | 	wrlong	arg02, arg01
1ea88     20 1E 06 F1 | 	add	local01, #32
1ea8c     0F 13 02 F6 | 	mov	arg01, local01
1ea90     EC 13 06 F1 | 	add	arg01, #492
1ea94     24 1E 86 F1 | 	sub	local01, #36
1ea98     0F 15 02 FB | 	rdlong	arg02, local01
1ea9c     09 15 62 FC | 	wrlong	arg02, arg01
1eaa0     10 1E 06 F1 | 	add	local01, #16
1eaa4     0F 17 02 FB | 	rdlong	arg03, local01
1eaa8     01 16 06 F1 | 	add	arg03, #1
1eaac     10 1E 06 F1 | 	add	local01, #16
1eab0     0F 17 62 FC | 	wrlong	arg03, local01
1eab4     2F 1E 86 F1 | 	sub	local01, #47
1eab8     0F 13 C2 FA | 	rdbyte	arg01, local01
1eabc     33 1E 06 F1 | 	add	local01, #51
1eac0     0F 15 02 F6 | 	mov	arg02, local01
1eac4     01 18 06 F6 | 	mov	arg04, #1
1eac8     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
1eacc     30 1E 86 F1 | 	sub	local01, #48
1ead0     0F 01 48 FC | 	wrbyte	#0, local01
1ead4     04 1E 86 F1 | 	sub	local01, #4
1ead8                 | LR__3250
1ead8     01 1E 06 F1 | 	add	local01, #1
1eadc     0F 13 C2 FA | 	rdbyte	arg01, local01
1eae0     00 14 06 F6 | 	mov	arg02, #0
1eae4     00 16 06 F6 | 	mov	arg03, #0
1eae8     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
1eaec     00 FA 0D F2 | 	cmp	result1, #0 wz
1eaf0     01 20 06 56 |  if_ne	mov	local02, #1
1eaf4                 | LR__3251
1eaf4                 | ' 	}
1eaf4                 | ' 
1eaf4                 | ' 	return res;
1eaf4     10 FB 01 F6 | 	mov	result1, local02
1eaf8     A7 F0 03 F6 | 	mov	ptra, fp
1eafc     B2 00 A0 FD | 	call	#popregs_
1eb00                 | _fatfs_cc_sync_fs_ret
1eb00     2D 00 64 FD | 	ret
1eb04                 | 
1eb04                 | _fatfs_cc_clst2sect
1eb04     02 14 86 F1 | 	sub	arg02, #2
1eb08     18 12 06 F1 | 	add	arg01, #24
1eb0c     09 01 02 FB | 	rdlong	_var01, arg01
1eb10     18 12 86 F1 | 	sub	arg01, #24
1eb14     02 00 86 F1 | 	sub	_var01, #2
1eb18     00 15 12 F2 | 	cmp	arg02, _var01 wc
1eb1c     00 FA 05 36 |  if_ae	mov	result1, #0
1eb20     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
1eb24     0A 12 06 F1 | 	add	arg01, #10
1eb28     09 01 E2 FA | 	rdword	_var01, arg01
1eb2c     0A 01 02 FD | 	qmul	_var01, arg02
1eb30                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
1eb30     22 12 06 F1 | 	add	arg01, #34
1eb34     09 FB 01 FB | 	rdlong	result1, arg01
1eb38     18 00 62 FD | 	getqx	_var01
1eb3c     00 FB 01 F1 | 	add	result1, _var01
1eb40                 | _fatfs_cc_clst2sect_ret
1eb40     2D 00 64 FD | 	ret
1eb44                 | 
1eb44                 | _fatfs_cc_get_fat
1eb44     07 4A 05 F6 | 	mov	COUNT_, #7
1eb48     A8 00 A0 FD | 	call	#pushregs_
1eb4c     0A 1F 02 F6 | 	mov	local01, arg02
1eb50     09 21 02 FB | 	rdlong	local02, arg01
1eb54     02 1E 16 F2 | 	cmp	local01, #2 wc
1eb58     14 00 90 CD |  if_b	jmp	#LR__3260
1eb5c     18 20 06 F1 | 	add	local02, #24
1eb60     10 23 02 FB | 	rdlong	local03, local02
1eb64     18 20 86 F1 | 	sub	local02, #24
1eb68     11 1F 12 F2 | 	cmp	local01, local03 wc
1eb6c     08 00 90 CD |  if_b	jmp	#LR__3261
1eb70                 | LR__3260
1eb70     01 24 06 F6 | 	mov	local04, #1
1eb74     60 01 90 FD | 	jmp	#LR__3268
1eb78                 | LR__3261
1eb78     01 24 66 F6 | 	neg	local04, #1
1eb7c                 | ' 		val = 0xFFFFFFFF;
1eb7c                 | ' 
1eb7c                 | ' 		switch (fs->fs_type) {
1eb7c     10 27 C2 FA | 	rdbyte	local05, local02
1eb80     01 26 86 F1 | 	sub	local05, #1
1eb84     03 26 26 F3 | 	fle	local05, #3
1eb88     30 26 62 FD | 	jmprel	local05
1eb8c                 | LR__3262
1eb8c     0C 00 90 FD | 	jmp	#LR__3263
1eb90     B8 00 90 FD | 	jmp	#LR__3264
1eb94     F8 00 90 FD | 	jmp	#LR__3265
1eb98     38 01 90 FD | 	jmp	#LR__3266
1eb9c                 | LR__3263
1eb9c     0F 27 02 F6 | 	mov	local05, local01
1eba0     0F 13 02 F6 | 	mov	arg01, local01
1eba4     01 12 46 F0 | 	shr	arg01, #1
1eba8     09 27 02 F1 | 	add	local05, arg01
1ebac     10 13 02 F6 | 	mov	arg01, local02
1ebb0     13 29 02 F6 | 	mov	local06, local05
1ebb4     09 28 46 F0 | 	shr	local06, #9
1ebb8     24 20 06 F1 | 	add	local02, #36
1ebbc     10 15 02 FB | 	rdlong	arg02, local02
1ebc0     24 20 86 F1 | 	sub	local02, #36
1ebc4     14 15 02 F1 | 	add	arg02, local06
1ebc8     C0 FD BF FD | 	call	#_fatfs_cc_move_window
1ebcc     00 FA 0D F2 | 	cmp	result1, #0 wz
1ebd0     04 01 90 5D |  if_ne	jmp	#LR__3267
1ebd4     13 29 02 F6 | 	mov	local06, local05
1ebd8     FF 29 06 F5 | 	and	local06, #511
1ebdc     34 20 06 F1 | 	add	local02, #52
1ebe0     10 29 02 F1 | 	add	local06, local02
1ebe4     14 2B C2 FA | 	rdbyte	local07, local06
1ebe8     34 20 86 F1 | 	sub	local02, #52
1ebec     10 13 02 F6 | 	mov	arg01, local02
1ebf0     01 26 06 F1 | 	add	local05, #1
1ebf4     13 29 02 F6 | 	mov	local06, local05
1ebf8     09 28 46 F0 | 	shr	local06, #9
1ebfc     24 20 06 F1 | 	add	local02, #36
1ec00     10 15 02 FB | 	rdlong	arg02, local02
1ec04     24 20 86 F1 | 	sub	local02, #36
1ec08     14 15 02 F1 | 	add	arg02, local06
1ec0c     7C FD BF FD | 	call	#_fatfs_cc_move_window
1ec10     00 FA 0D F2 | 	cmp	result1, #0 wz
1ec14     C0 00 90 5D |  if_ne	jmp	#LR__3267
1ec18     FF 27 06 F5 | 	and	local05, #511
1ec1c     34 20 06 F1 | 	add	local02, #52
1ec20     10 27 02 F1 | 	add	local05, local02
1ec24     13 29 C2 FA | 	rdbyte	local06, local05
1ec28     08 28 66 F0 | 	shl	local06, #8
1ec2c     14 2B 42 F5 | 	or	local07, local06
1ec30     01 1E CE F7 | 	test	local01, #1 wz
1ec34     04 2A 46 50 |  if_ne	shr	local07, #4
1ec38     15 23 02 56 |  if_ne	mov	local03, local07
1ec3c     0B 2A 46 A7 |  if_e	zerox	local07, #11
1ec40     15 23 02 A6 |  if_e	mov	local03, local07
1ec44     11 25 02 F6 | 	mov	local04, local03
1ec48                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
1ec48                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1ec48                 | ' 			break;
1ec48     8C 00 90 FD | 	jmp	#LR__3267
1ec4c                 | LR__3264
1ec4c     10 13 02 F6 | 	mov	arg01, local02
1ec50     0F 29 02 F6 | 	mov	local06, local01
1ec54     08 28 46 F0 | 	shr	local06, #8
1ec58     24 20 06 F1 | 	add	local02, #36
1ec5c     10 15 02 FB | 	rdlong	arg02, local02
1ec60     24 20 86 F1 | 	sub	local02, #36
1ec64     14 15 02 F1 | 	add	arg02, local06
1ec68     20 FD BF FD | 	call	#_fatfs_cc_move_window
1ec6c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ec70     64 00 90 5D |  if_ne	jmp	#LR__3267
1ec74     34 20 06 F1 | 	add	local02, #52
1ec78     01 1E 66 F0 | 	shl	local01, #1
1ec7c     FF 1F 06 F5 | 	and	local01, #511
1ec80     0F 21 02 F1 | 	add	local02, local01
1ec84                 | ' {
1ec84                 | ' 
1ec84                 | ' 	return *((WORD*)ptr);
1ec84     10 FB E1 FA | 	rdword	result1, local02
1ec88     FD 24 32 F9 | 	getword	local04, result1, #0
1ec8c                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
1ec8c                 | ' 			break;
1ec8c     48 00 90 FD | 	jmp	#LR__3267
1ec90                 | LR__3265
1ec90     10 13 02 F6 | 	mov	arg01, local02
1ec94     0F 29 02 F6 | 	mov	local06, local01
1ec98     07 28 46 F0 | 	shr	local06, #7
1ec9c     24 20 06 F1 | 	add	local02, #36
1eca0     10 15 02 FB | 	rdlong	arg02, local02
1eca4     24 20 86 F1 | 	sub	local02, #36
1eca8     14 15 02 F1 | 	add	arg02, local06
1ecac     DC FC BF FD | 	call	#_fatfs_cc_move_window
1ecb0     00 FA 0D F2 | 	cmp	result1, #0 wz
1ecb4     20 00 90 5D |  if_ne	jmp	#LR__3267
1ecb8     34 20 06 F1 | 	add	local02, #52
1ecbc     02 1E 66 F0 | 	shl	local01, #2
1ecc0     FF 1F 06 F5 | 	and	local01, #511
1ecc4     0F 21 02 F1 | 	add	local02, local01
1ecc8                 | ' {
1ecc8                 | ' 
1ecc8                 | ' 	return *((DWORD*)ptr);
1ecc8     10 25 02 FB | 	rdlong	local04, local02
1eccc     7C 24 06 F4 | 	bitl	local04, #124
1ecd0                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
1ecd0                 | ' 			break;
1ecd0     04 00 90 FD | 	jmp	#LR__3267
1ecd4                 | LR__3266
1ecd4     01 24 06 F6 | 	mov	local04, #1
1ecd8                 | LR__3267
1ecd8                 | LR__3268
1ecd8                 | ' 			val = 1;
1ecd8                 | ' 		}
1ecd8                 | ' 	}
1ecd8                 | ' 
1ecd8                 | ' 	return val;
1ecd8     12 FB 01 F6 | 	mov	result1, local04
1ecdc     A7 F0 03 F6 | 	mov	ptra, fp
1ece0     B2 00 A0 FD | 	call	#popregs_
1ece4                 | _fatfs_cc_get_fat_ret
1ece4     2D 00 64 FD | 	ret
1ece8                 | 
1ece8                 | _fatfs_cc_put_fat
1ece8     08 4A 05 F6 | 	mov	COUNT_, #8
1ecec     A8 00 A0 FD | 	call	#pushregs_
1ecf0     09 1F 02 F6 | 	mov	local01, arg01
1ecf4     0A 21 02 F6 | 	mov	local02, arg02
1ecf8     0B 23 02 F6 | 	mov	local03, arg03
1ecfc     02 24 06 F6 | 	mov	local04, #2
1ed00     02 20 16 F2 | 	cmp	local02, #2 wc
1ed04     E0 01 90 CD |  if_b	jmp	#LR__3277
1ed08     18 1E 06 F1 | 	add	local01, #24
1ed0c     0F 27 02 FB | 	rdlong	local05, local01
1ed10     18 1E 86 F1 | 	sub	local01, #24
1ed14     13 21 12 F2 | 	cmp	local02, local05 wc
1ed18     CC 01 90 3D |  if_ae	jmp	#LR__3277
1ed1c                 | ' 		switch (fs->fs_type) {
1ed1c     0F 29 C2 FA | 	rdbyte	local06, local01
1ed20     01 28 86 F1 | 	sub	local06, #1
1ed24     03 28 26 F3 | 	fle	local06, #3
1ed28     30 28 62 FD | 	jmprel	local06
1ed2c                 | LR__3270
1ed2c     0C 00 90 FD | 	jmp	#LR__3271
1ed30     F8 00 90 FD | 	jmp	#LR__3274
1ed34     40 01 90 FD | 	jmp	#LR__3275
1ed38     AC 01 90 FD | 	jmp	#LR__3276
1ed3c                 | LR__3271
1ed3c     10 2B 02 F6 | 	mov	local07, local02
1ed40     10 27 02 F6 | 	mov	local05, local02
1ed44     01 26 46 F0 | 	shr	local05, #1
1ed48     13 2B 02 F1 | 	add	local07, local05
1ed4c     0F 13 02 F6 | 	mov	arg01, local01
1ed50     15 29 02 F6 | 	mov	local06, local07
1ed54     09 28 46 F0 | 	shr	local06, #9
1ed58     24 1E 06 F1 | 	add	local01, #36
1ed5c     0F 15 02 FB | 	rdlong	arg02, local01
1ed60     24 1E 86 F1 | 	sub	local01, #36
1ed64     14 15 02 F1 | 	add	arg02, local06
1ed68     20 FC BF FD | 	call	#_fatfs_cc_move_window
1ed6c     FD 24 0A F6 | 	mov	local04, result1 wz
1ed70     74 01 90 5D |  if_ne	jmp	#LR__3276
1ed74     34 1E 06 F1 | 	add	local01, #52
1ed78     0F 2D 02 F6 | 	mov	local08, local01
1ed7c     15 27 02 F6 | 	mov	local05, local07
1ed80     FF 27 06 F5 | 	and	local05, #511
1ed84     13 2D 02 F1 | 	add	local08, local05
1ed88     01 20 CE F7 | 	test	local02, #1 wz
1ed8c     34 1E 86 F1 | 	sub	local01, #52
1ed90     01 2A 06 F1 | 	add	local07, #1
1ed94     18 00 90 AD |  if_e	jmp	#LR__3272
1ed98     16 27 C2 FA | 	rdbyte	local05, local08
1ed9c     13 27 42 F8 | 	getnib	local05, local05, #0
1eda0     11 29 E2 F8 | 	getbyte	local06, local03, #0
1eda4     04 28 66 F0 | 	shl	local06, #4
1eda8     14 27 42 F5 | 	or	local05, local06
1edac     04 00 90 FD | 	jmp	#LR__3273
1edb0                 | LR__3272
1edb0     11 27 02 F6 | 	mov	local05, local03
1edb4                 | LR__3273
1edb4     16 27 42 FC | 	wrbyte	local05, local08
1edb8     03 1E 06 F1 | 	add	local01, #3
1edbc     0F 03 48 FC | 	wrbyte	#1, local01
1edc0     03 1E 86 F1 | 	sub	local01, #3
1edc4     0F 13 02 F6 | 	mov	arg01, local01
1edc8     15 2D 02 F6 | 	mov	local08, local07
1edcc     09 2C 46 F0 | 	shr	local08, #9
1edd0     24 1E 06 F1 | 	add	local01, #36
1edd4     0F 15 02 FB | 	rdlong	arg02, local01
1edd8     24 1E 86 F1 | 	sub	local01, #36
1eddc     16 15 02 F1 | 	add	arg02, local08
1ede0     A8 FB BF FD | 	call	#_fatfs_cc_move_window
1ede4     FD 24 0A F6 | 	mov	local04, result1 wz
1ede8     FC 00 90 5D |  if_ne	jmp	#LR__3276
1edec     34 1E 06 F1 | 	add	local01, #52
1edf0     0F 2D 02 F6 | 	mov	local08, local01
1edf4     FF 2B 06 F5 | 	and	local07, #511
1edf8     15 2D 02 F1 | 	add	local08, local07
1edfc     01 20 CE F7 | 	test	local02, #1 wz
1ee00     04 22 46 50 |  if_ne	shr	local03, #4
1ee04     11 27 02 56 |  if_ne	mov	local05, local03
1ee08     16 27 C2 AA |  if_e	rdbyte	local05, local08
1ee0c     F0 26 06 A5 |  if_e	and	local05, #240
1ee10     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
1ee14     11 23 42 A8 |  if_e	getnib	local03, local03, #0
1ee18     11 27 42 A5 |  if_e	or	local05, local03
1ee1c     16 27 42 FC | 	wrbyte	local05, local08
1ee20     31 1E 86 F1 | 	sub	local01, #49
1ee24     0F 03 48 FC | 	wrbyte	#1, local01
1ee28                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
1ee28                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1ee28                 | ' 			fs->wflag = 1;
1ee28                 | ' 			break;
1ee28     BC 00 90 FD | 	jmp	#LR__3276
1ee2c                 | LR__3274
1ee2c     0F 13 02 F6 | 	mov	arg01, local01
1ee30     10 2D 02 F6 | 	mov	local08, local02
1ee34     08 2C 46 F0 | 	shr	local08, #8
1ee38     24 1E 06 F1 | 	add	local01, #36
1ee3c     0F 15 02 FB | 	rdlong	arg02, local01
1ee40     24 1E 86 F1 | 	sub	local01, #36
1ee44     16 15 02 F1 | 	add	arg02, local08
1ee48     40 FB BF FD | 	call	#_fatfs_cc_move_window
1ee4c     FD 24 0A F6 | 	mov	local04, result1 wz
1ee50     94 00 90 5D |  if_ne	jmp	#LR__3276
1ee54     34 1E 06 F1 | 	add	local01, #52
1ee58     0F 13 02 F6 | 	mov	arg01, local01
1ee5c     01 20 66 F0 | 	shl	local02, #1
1ee60     FF 21 06 F5 | 	and	local02, #511
1ee64     10 13 02 F1 | 	add	arg01, local02
1ee68     09 23 52 FC | 	wrword	local03, arg01
1ee6c     31 1E 86 F1 | 	sub	local01, #49
1ee70     0F 03 48 FC | 	wrbyte	#1, local01
1ee74                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
1ee74                 | ' 			fs->wflag = 1;
1ee74                 | ' 			break;
1ee74     70 00 90 FD | 	jmp	#LR__3276
1ee78                 | LR__3275
1ee78     0F 13 02 F6 | 	mov	arg01, local01
1ee7c     10 2D 02 F6 | 	mov	local08, local02
1ee80     07 2C 46 F0 | 	shr	local08, #7
1ee84     24 1E 06 F1 | 	add	local01, #36
1ee88     0F 15 02 FB | 	rdlong	arg02, local01
1ee8c     24 1E 86 F1 | 	sub	local01, #36
1ee90     16 15 02 F1 | 	add	arg02, local08
1ee94     F4 FA BF FD | 	call	#_fatfs_cc_move_window
1ee98     FD 24 0A F6 | 	mov	local04, result1 wz
1ee9c     48 00 90 5D |  if_ne	jmp	#LR__3276
1eea0     7C 22 06 F4 | 	bitl	local03, #124
1eea4     34 1E 06 F1 | 	add	local01, #52
1eea8     10 2D 02 F6 | 	mov	local08, local02
1eeac     02 2C 66 F0 | 	shl	local08, #2
1eeb0     FF 2D 06 F5 | 	and	local08, #511
1eeb4     0F 13 02 F6 | 	mov	arg01, local01
1eeb8     16 13 02 F1 | 	add	arg01, local08
1eebc                 | ' {
1eebc                 | ' 
1eebc                 | ' 	return *((DWORD*)ptr);
1eebc     09 2D 02 FB | 	rdlong	local08, arg01
1eec0     00 00 78 FF 
1eec4     00 2C 06 F5 | 	and	local08, ##-268435456
1eec8     16 23 42 F5 | 	or	local03, local08
1eecc     0F 13 02 F6 | 	mov	arg01, local01
1eed0     02 20 66 F0 | 	shl	local02, #2
1eed4     FF 21 06 F5 | 	and	local02, #511
1eed8     10 13 02 F1 | 	add	arg01, local02
1eedc     09 23 62 FC | 	wrlong	local03, arg01
1eee0     31 1E 86 F1 | 	sub	local01, #49
1eee4     0F 03 48 FC | 	wrbyte	#1, local01
1eee8                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
1eee8                 | ' 			}
1eee8                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
1eee8                 | ' 			fs->wflag = 1;
1eee8                 | ' 			break;
1eee8                 | LR__3276
1eee8                 | LR__3277
1eee8                 | ' 		}
1eee8                 | ' 	}
1eee8                 | ' 	return res;
1eee8     12 FB 01 F6 | 	mov	result1, local04
1eeec     A7 F0 03 F6 | 	mov	ptra, fp
1eef0     B2 00 A0 FD | 	call	#popregs_
1eef4                 | _fatfs_cc_put_fat_ret
1eef4     2D 00 64 FD | 	ret
1eef8                 | 
1eef8                 | _fatfs_cc_remove_chain
1eef8     05 4A 05 F6 | 	mov	COUNT_, #5
1eefc     A8 00 A0 FD | 	call	#pushregs_
1ef00     09 1F 02 F6 | 	mov	local01, arg01
1ef04     0A 21 02 F6 | 	mov	local02, arg02
1ef08     0B 23 02 F6 | 	mov	local03, arg03
1ef0c     0F 25 02 FB | 	rdlong	local04, local01
1ef10     02 20 16 F2 | 	cmp	local02, #2 wc
1ef14     14 00 90 CD |  if_b	jmp	#LR__3280
1ef18     18 24 06 F1 | 	add	local04, #24
1ef1c     12 FB 01 FB | 	rdlong	result1, local04
1ef20     18 24 86 F1 | 	sub	local04, #24
1ef24     FD 20 12 F2 | 	cmp	local02, result1 wc
1ef28     08 00 90 CD |  if_b	jmp	#LR__3281
1ef2c                 | LR__3280
1ef2c     02 FA 05 F6 | 	mov	result1, #2
1ef30     CC 00 90 FD | 	jmp	#LR__3286
1ef34                 | LR__3281
1ef34     00 22 0E F2 | 	cmp	local03, #0 wz
1ef38     18 00 90 AD |  if_e	jmp	#LR__3282
1ef3c     11 15 02 F6 | 	mov	arg02, local03
1ef40     12 13 02 F6 | 	mov	arg01, local04
1ef44     01 16 66 F6 | 	neg	arg03, #1
1ef48     9C FD BF FD | 	call	#_fatfs_cc_put_fat
1ef4c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ef50     AC 00 90 5D |  if_ne	jmp	#LR__3286
1ef54                 | LR__3282
1ef54                 | ' 	}
1ef54                 | ' 
1ef54                 | ' 
1ef54                 | ' 	do {
1ef54                 | LR__3283
1ef54     10 15 02 F6 | 	mov	arg02, local02
1ef58     0F 13 02 F6 | 	mov	arg01, local01
1ef5c     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
1ef60     FD 26 0A F6 | 	mov	local05, result1 wz
1ef64     94 00 90 AD |  if_e	jmp	#LR__3285
1ef68     01 26 0E F2 | 	cmp	local05, #1 wz
1ef6c     02 FA 05 A6 |  if_e	mov	result1, #2
1ef70     8C 00 90 AD |  if_e	jmp	#LR__3286
1ef74     FF FF 7F FF 
1ef78     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1ef7c     01 FA 05 A6 |  if_e	mov	result1, #1
1ef80     7C 00 90 AD |  if_e	jmp	#LR__3286
1ef84     10 15 02 F6 | 	mov	arg02, local02
1ef88     12 13 02 F6 | 	mov	arg01, local04
1ef8c     00 16 06 F6 | 	mov	arg03, #0
1ef90     54 FD BF FD | 	call	#_fatfs_cc_put_fat
1ef94     FD 22 0A F6 | 	mov	local03, result1 wz
1ef98     11 FB 01 56 |  if_ne	mov	result1, local03
1ef9c     60 00 90 5D |  if_ne	jmp	#LR__3286
1efa0     18 24 06 F1 | 	add	local04, #24
1efa4     12 23 02 FB | 	rdlong	local03, local04
1efa8     02 22 86 F1 | 	sub	local03, #2
1efac     04 24 86 F1 | 	sub	local04, #4
1efb0     12 21 02 FB | 	rdlong	local02, local04
1efb4     14 24 86 F1 | 	sub	local04, #20
1efb8     11 21 12 F2 | 	cmp	local02, local03 wc
1efbc     24 00 90 3D |  if_ae	jmp	#LR__3284
1efc0     14 24 06 F1 | 	add	local04, #20
1efc4     12 23 02 FB | 	rdlong	local03, local04
1efc8     01 22 06 F1 | 	add	local03, #1
1efcc     12 23 62 FC | 	wrlong	local03, local04
1efd0     10 24 86 F1 | 	sub	local04, #16
1efd4     12 23 C2 FA | 	rdbyte	local03, local04
1efd8     01 22 46 F5 | 	or	local03, #1
1efdc     12 23 42 FC | 	wrbyte	local03, local04
1efe0     04 24 86 F1 | 	sub	local04, #4
1efe4                 | LR__3284
1efe4     13 21 02 F6 | 	mov	local02, local05
1efe8     18 24 06 F1 | 	add	local04, #24
1efec     12 27 02 FB | 	rdlong	local05, local04
1eff0     18 24 86 F1 | 	sub	local04, #24
1eff4     13 21 12 F2 | 	cmp	local02, local05 wc
1eff8     58 FF 9F CD |  if_b	jmp	#LR__3283
1effc                 | LR__3285
1effc                 | ' #line 1500 "ff.c"
1effc                 | ' 	return FR_OK;
1effc     00 FA 05 F6 | 	mov	result1, #0
1f000                 | LR__3286
1f000     A7 F0 03 F6 | 	mov	ptra, fp
1f004     B2 00 A0 FD | 	call	#popregs_
1f008                 | _fatfs_cc_remove_chain_ret
1f008     2D 00 64 FD | 	ret
1f00c                 | 
1f00c                 | _fatfs_cc_create_chain
1f00c     09 4A 05 F6 | 	mov	COUNT_, #9
1f010     A8 00 A0 FD | 	call	#pushregs_
1f014     09 1F 02 F6 | 	mov	local01, arg01
1f018     0A 21 0A F6 | 	mov	local02, arg02 wz
1f01c     0F 23 02 FB | 	rdlong	local03, local01
1f020     28 00 90 5D |  if_ne	jmp	#LR__3290
1f024     10 22 06 F1 | 	add	local03, #16
1f028     11 25 0A FB | 	rdlong	local04, local03 wz
1f02c     10 22 86 F1 | 	sub	local03, #16
1f030     18 22 06 51 |  if_ne	add	local03, #24
1f034     11 27 02 5B |  if_ne	rdlong	local05, local03
1f038     18 22 86 51 |  if_ne	sub	local03, #24
1f03c     13 25 12 52 |  if_ne	cmp	local04, local05 wc
1f040     50 00 90 4D |  if_c_and_nz	jmp	#LR__3291
1f044     01 24 06 F6 | 	mov	local04, #1
1f048     48 00 90 FD | 	jmp	#LR__3291
1f04c                 | LR__3290
1f04c     10 15 02 F6 | 	mov	arg02, local02
1f050     0F 13 02 F6 | 	mov	arg01, local01
1f054     EC FA BF FD | 	call	#_fatfs_cc_get_fat
1f058     FD 24 02 F6 | 	mov	local04, result1
1f05c     02 24 16 F2 | 	cmp	local04, #2 wc
1f060     01 FA 05 C6 |  if_b	mov	result1, #1
1f064     BC 01 90 CD |  if_b	jmp	#LR__3301
1f068     FF FF 7F FF 
1f06c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1f070     12 FB 01 A6 |  if_e	mov	result1, local04
1f074     AC 01 90 AD |  if_e	jmp	#LR__3301
1f078     18 22 06 F1 | 	add	local03, #24
1f07c     11 27 02 FB | 	rdlong	local05, local03
1f080     18 22 86 F1 | 	sub	local03, #24
1f084     13 25 12 F2 | 	cmp	local04, local05 wc
1f088     12 FB 01 C6 |  if_b	mov	result1, local04
1f08c     94 01 90 CD |  if_b	jmp	#LR__3301
1f090     10 25 02 F6 | 	mov	local04, local02
1f094                 | LR__3291
1f094     14 22 06 F1 | 	add	local03, #20
1f098     11 27 0A FB | 	rdlong	local05, local03 wz
1f09c     14 22 86 F1 | 	sub	local03, #20
1f0a0     00 FA 05 A6 |  if_e	mov	result1, #0
1f0a4     7C 01 90 AD |  if_e	jmp	#LR__3301
1f0a8     00 28 06 F6 | 	mov	local06, #0
1f0ac     10 25 0A F2 | 	cmp	local04, local02 wz
1f0b0     74 00 90 5D |  if_ne	jmp	#LR__3294
1f0b4     12 29 02 F6 | 	mov	local06, local04
1f0b8     01 28 06 F1 | 	add	local06, #1
1f0bc     18 22 06 F1 | 	add	local03, #24
1f0c0     11 27 02 FB | 	rdlong	local05, local03
1f0c4     18 22 86 F1 | 	sub	local03, #24
1f0c8     13 29 12 F2 | 	cmp	local06, local05 wc
1f0cc     02 28 06 36 |  if_ae	mov	local06, #2
1f0d0     14 15 02 F6 | 	mov	arg02, local06
1f0d4     0F 13 02 F6 | 	mov	arg01, local01
1f0d8     68 FA BF FD | 	call	#_fatfs_cc_get_fat
1f0dc     FD 26 02 F6 | 	mov	local05, result1
1f0e0     01 26 0E F2 | 	cmp	local05, #1 wz
1f0e4     FF FF 7F 5F 
1f0e8     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
1f0ec     13 FB 01 A6 |  if_e	mov	result1, local05
1f0f0     30 01 90 AD |  if_e	jmp	#LR__3301
1f0f4     00 26 0E F2 | 	cmp	local05, #0 wz
1f0f8     2C 00 90 AD |  if_e	jmp	#LR__3293
1f0fc     10 22 06 F1 | 	add	local03, #16
1f100     11 2B 02 FB | 	rdlong	local07, local03
1f104     10 22 86 F1 | 	sub	local03, #16
1f108     02 2A 16 F2 | 	cmp	local07, #2 wc
1f10c     14 00 90 CD |  if_b	jmp	#LR__3292
1f110     18 22 06 F1 | 	add	local03, #24
1f114     11 27 02 FB | 	rdlong	local05, local03
1f118     18 22 86 F1 | 	sub	local03, #24
1f11c     13 2B 12 F2 | 	cmp	local07, local05 wc
1f120     15 25 02 C6 |  if_b	mov	local04, local07
1f124                 | LR__3292
1f124     00 28 06 F6 | 	mov	local06, #0
1f128                 | LR__3293
1f128                 | LR__3294
1f128     00 28 0E F2 | 	cmp	local06, #0 wz
1f12c     60 00 90 5D |  if_ne	jmp	#LR__3297
1f130     12 29 02 F6 | 	mov	local06, local04
1f134                 | ' 			ncl = scl;
1f134                 | ' 			for (;;) {
1f134                 | LR__3295
1f134     01 28 06 F1 | 	add	local06, #1
1f138     18 22 06 F1 | 	add	local03, #24
1f13c     11 27 02 FB | 	rdlong	local05, local03
1f140     18 22 86 F1 | 	sub	local03, #24
1f144     13 29 12 F2 | 	cmp	local06, local05 wc
1f148     02 28 06 36 |  if_ae	mov	local06, #2
1f14c     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
1f150     00 FA 05 16 |  if_a	mov	result1, #0
1f154     CC 00 90 1D |  if_a	jmp	#LR__3301
1f158     14 15 02 F6 | 	mov	arg02, local06
1f15c     0F 13 02 F6 | 	mov	arg01, local01
1f160     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
1f164     FD 2A 0A F6 | 	mov	local07, result1 wz
1f168     24 00 90 AD |  if_e	jmp	#LR__3296
1f16c     01 2A 0E F2 | 	cmp	local07, #1 wz
1f170     FF FF 7F 5F 
1f174     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
1f178     15 FB 01 A6 |  if_e	mov	result1, local07
1f17c     A4 00 90 AD |  if_e	jmp	#LR__3301
1f180     12 29 0A F2 | 	cmp	local06, local04 wz
1f184     00 FA 05 A6 |  if_e	mov	result1, #0
1f188     98 00 90 AD |  if_e	jmp	#LR__3301
1f18c     A4 FF 9F FD | 	jmp	#LR__3295
1f190                 | LR__3296
1f190                 | LR__3297
1f190     11 13 02 F6 | 	mov	arg01, local03
1f194     14 15 02 F6 | 	mov	arg02, local06
1f198     01 16 66 F6 | 	neg	arg03, #1
1f19c     48 FB BF FD | 	call	#_fatfs_cc_put_fat
1f1a0     FD 2C 0A F6 | 	mov	local08, result1 wz
1f1a4     1C 00 90 5D |  if_ne	jmp	#LR__3298
1f1a8     00 20 0E F2 | 	cmp	local02, #0 wz
1f1ac     14 00 90 AD |  if_e	jmp	#LR__3298
1f1b0     11 13 02 F6 | 	mov	arg01, local03
1f1b4     10 15 02 F6 | 	mov	arg02, local02
1f1b8     14 17 02 F6 | 	mov	arg03, local06
1f1bc     28 FB BF FD | 	call	#_fatfs_cc_put_fat
1f1c0     FD 2C 02 F6 | 	mov	local08, result1
1f1c4                 | LR__3298
1f1c4     00 2C 0E F2 | 	cmp	local08, #0 wz
1f1c8     4C 00 90 5D |  if_ne	jmp	#LR__3299
1f1cc     10 22 06 F1 | 	add	local03, #16
1f1d0     11 29 62 FC | 	wrlong	local06, local03
1f1d4     08 22 06 F1 | 	add	local03, #8
1f1d8     11 27 02 FB | 	rdlong	local05, local03
1f1dc     02 26 86 F1 | 	sub	local05, #2
1f1e0     04 22 86 F1 | 	sub	local03, #4
1f1e4     11 2F 02 FB | 	rdlong	local09, local03
1f1e8     14 22 86 F1 | 	sub	local03, #20
1f1ec     13 2F 1A F2 | 	cmp	local09, local05 wcz
1f1f0     14 22 06 E1 |  if_be	add	local03, #20
1f1f4     11 2F 02 EB |  if_be	rdlong	local09, local03
1f1f8     01 2E 86 E1 |  if_be	sub	local09, #1
1f1fc     11 2F 62 EC |  if_be	wrlong	local09, local03
1f200     14 22 86 E1 |  if_be	sub	local03, #20
1f204     04 22 06 F1 | 	add	local03, #4
1f208     11 27 C2 FA | 	rdbyte	local05, local03
1f20c     01 26 46 F5 | 	or	local05, #1
1f210     11 27 42 FC | 	wrbyte	local05, local03
1f214     08 00 90 FD | 	jmp	#LR__3300
1f218                 | LR__3299
1f218     01 2C 0E F2 | 	cmp	local08, #1 wz
1f21c     01 28 C6 F6 | 	negz	local06, #1
1f220                 | LR__3300
1f220                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1f220                 | ' 	}
1f220                 | ' 
1f220                 | ' 	return ncl;
1f220     14 FB 01 F6 | 	mov	result1, local06
1f224                 | LR__3301
1f224     A7 F0 03 F6 | 	mov	ptra, fp
1f228     B2 00 A0 FD | 	call	#popregs_
1f22c                 | _fatfs_cc_create_chain_ret
1f22c     2D 00 64 FD | 	ret
1f230                 | 
1f230                 | _fatfs_cc_dir_clear
1f230     06 4A 05 F6 | 	mov	COUNT_, #6
1f234     A8 00 A0 FD | 	call	#pushregs_
1f238     09 1F 02 F6 | 	mov	local01, arg01
1f23c     0A 21 02 F6 | 	mov	local02, arg02
1f240     0F 13 02 F6 | 	mov	arg01, local01
1f244     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
1f248     00 FA 0D F2 | 	cmp	result1, #0 wz
1f24c     01 FA 05 56 |  if_ne	mov	result1, #1
1f250     90 00 90 5D |  if_ne	jmp	#LR__3312
1f254     0F 13 02 F6 | 	mov	arg01, local01
1f258     10 15 02 F6 | 	mov	arg02, local02
1f25c     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
1f260     FD 22 02 F6 | 	mov	local03, result1
1f264     30 1E 06 F1 | 	add	local01, #48
1f268     0F 23 62 FC | 	wrlong	local03, local01
1f26c     04 1E 06 F1 | 	add	local01, #4
1f270     0F 13 02 F6 | 	mov	arg01, local01
1f274     00 14 06 F6 | 	mov	arg02, #0
1f278     09 16 C6 F9 | 	decod	arg03, #9
1f27c     98 00 A0 FD | 	call	#\builtin_bytefill_
1f280     0F 25 02 F6 | 	mov	local04, local01
1f284                 | ' #line 1667 "ff.c"
1f284                 | ' 	{
1f284                 | ' 		ibuf = fs->win; szb = 1;
1f284                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
1f284     00 26 06 F6 | 	mov	local05, #0
1f288     34 1E 86 F1 | 	sub	local01, #52
1f28c                 | LR__3310
1f28c     0A 1E 06 F1 | 	add	local01, #10
1f290     0F 29 E2 FA | 	rdword	local06, local01
1f294     0A 1E 86 F1 | 	sub	local01, #10
1f298     14 27 12 F2 | 	cmp	local05, local06 wc
1f29c     2C 00 90 3D |  if_ae	jmp	#LR__3311
1f2a0     01 1E 06 F1 | 	add	local01, #1
1f2a4     0F 13 C2 FA | 	rdbyte	arg01, local01
1f2a8     01 1E 86 F1 | 	sub	local01, #1
1f2ac     12 15 02 F6 | 	mov	arg02, local04
1f2b0     11 17 02 F6 | 	mov	arg03, local03
1f2b4     13 17 02 F1 | 	add	arg03, local05
1f2b8     01 18 06 F6 | 	mov	arg04, #1
1f2bc     9C EF BF FD | 	call	#_fatfs_cc_disk_write
1f2c0     00 FA 0D F2 | 	cmp	result1, #0 wz
1f2c4     01 26 06 A1 |  if_e	add	local05, #1
1f2c8     C0 FF 9F AD |  if_e	jmp	#LR__3310
1f2cc                 | LR__3311
1f2cc                 | ' 	}
1f2cc                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1f2cc     0A 1E 06 F1 | 	add	local01, #10
1f2d0     0F 25 E2 FA | 	rdword	local04, local01
1f2d4     12 27 0A F2 | 	cmp	local05, local04 wz
1f2d8     00 28 06 A6 |  if_e	mov	local06, #0
1f2dc     01 28 06 56 |  if_ne	mov	local06, #1
1f2e0     14 FB 01 F6 | 	mov	result1, local06
1f2e4                 | LR__3312
1f2e4     A7 F0 03 F6 | 	mov	ptra, fp
1f2e8     B2 00 A0 FD | 	call	#popregs_
1f2ec                 | _fatfs_cc_dir_clear_ret
1f2ec     2D 00 64 FD | 	ret
1f2f0                 | 
1f2f0                 | _fatfs_cc_dir_sdi
1f2f0     06 4A 05 F6 | 	mov	COUNT_, #6
1f2f4     A8 00 A0 FD | 	call	#pushregs_
1f2f8     09 1F 02 F6 | 	mov	local01, arg01
1f2fc     0A 21 02 F6 | 	mov	local02, arg02
1f300     0F 23 02 FB | 	rdlong	local03, local01
1f304     00 10 00 FF 
1f308     00 20 16 F2 | 	cmp	local02, ##2097152 wc
1f30c     1F 20 CE C7 |  if_b	test	local02, #31 wz
1f310                 | ' 		return FR_INT_ERR;
1f310     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
1f314     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3326
1f318     10 1E 06 F1 | 	add	local01, #16
1f31c     0F 21 62 FC | 	wrlong	local02, local01
1f320     08 1E 86 F1 | 	sub	local01, #8
1f324     0F 25 0A FB | 	rdlong	local04, local01 wz
1f328     08 1E 86 F1 | 	sub	local01, #8
1f32c     11 27 C2 AA |  if_e	rdbyte	local05, local03
1f330     03 26 16 A2 |  if_e	cmp	local05, #3 wc
1f334     28 22 06 21 |  if_nc_and_z	add	local03, #40
1f338     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
1f33c     28 22 86 21 |  if_nc_and_z	sub	local03, #40
1f340     00 24 0E F2 | 	cmp	local04, #0 wz
1f344     3C 00 90 5D |  if_ne	jmp	#LR__3320
1f348     10 27 02 F6 | 	mov	local05, local02
1f34c     05 26 46 F0 | 	shr	local05, #5
1f350     08 22 06 F1 | 	add	local03, #8
1f354     11 15 E2 FA | 	rdword	arg02, local03
1f358     08 22 86 F1 | 	sub	local03, #8
1f35c     0A 27 12 F2 | 	cmp	local05, arg02 wc
1f360     02 FA 05 36 |  if_ae	mov	result1, #2
1f364     E4 00 90 3D |  if_ae	jmp	#LR__3326
1f368     28 22 06 F1 | 	add	local03, #40
1f36c     11 27 02 FB | 	rdlong	local05, local03
1f370     28 22 86 F1 | 	sub	local03, #40
1f374     18 1E 06 F1 | 	add	local01, #24
1f378     0F 27 62 FC | 	wrlong	local05, local01
1f37c     18 1E 86 F1 | 	sub	local01, #24
1f380     7C 00 90 FD | 	jmp	#LR__3325
1f384                 | LR__3320
1f384     0A 22 06 F1 | 	add	local03, #10
1f388     11 29 E2 FA | 	rdword	local06, local03
1f38c     0A 22 86 F1 | 	sub	local03, #10
1f390     09 28 66 F0 | 	shl	local06, #9
1f394                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
1f394                 | ' 		while (ofs >= csz) {
1f394                 | LR__3321
1f394     14 21 12 F2 | 	cmp	local02, local06 wc
1f398     4C 00 90 CD |  if_b	jmp	#LR__3324
1f39c     0F 13 02 F6 | 	mov	arg01, local01
1f3a0     12 15 02 F6 | 	mov	arg02, local04
1f3a4     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
1f3a8     FD 24 02 F6 | 	mov	local04, result1
1f3ac     FF FF 7F FF 
1f3b0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1f3b4     01 FA 05 A6 |  if_e	mov	result1, #1
1f3b8     90 00 90 AD |  if_e	jmp	#LR__3326
1f3bc     02 24 16 F2 | 	cmp	local04, #2 wc
1f3c0     14 00 90 CD |  if_b	jmp	#LR__3322
1f3c4     18 22 06 F1 | 	add	local03, #24
1f3c8     11 27 02 FB | 	rdlong	local05, local03
1f3cc     18 22 86 F1 | 	sub	local03, #24
1f3d0     13 25 12 F2 | 	cmp	local04, local05 wc
1f3d4     08 00 90 CD |  if_b	jmp	#LR__3323
1f3d8                 | LR__3322
1f3d8     02 FA 05 F6 | 	mov	result1, #2
1f3dc     6C 00 90 FD | 	jmp	#LR__3326
1f3e0                 | LR__3323
1f3e0     14 21 82 F1 | 	sub	local02, local06
1f3e4     AC FF 9F FD | 	jmp	#LR__3321
1f3e8                 | LR__3324
1f3e8     11 13 02 F6 | 	mov	arg01, local03
1f3ec     12 15 02 F6 | 	mov	arg02, local04
1f3f0     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
1f3f4     18 1E 06 F1 | 	add	local01, #24
1f3f8     0F FB 61 FC | 	wrlong	result1, local01
1f3fc     18 1E 86 F1 | 	sub	local01, #24
1f400                 | LR__3325
1f400     14 1E 06 F1 | 	add	local01, #20
1f404     0F 25 62 FC | 	wrlong	local04, local01
1f408     04 1E 06 F1 | 	add	local01, #4
1f40c     0F 27 0A FB | 	rdlong	local05, local01 wz
1f410     18 1E 86 F1 | 	sub	local01, #24
1f414     02 FA 05 A6 |  if_e	mov	result1, #2
1f418     30 00 90 AD |  if_e	jmp	#LR__3326
1f41c     10 29 02 F6 | 	mov	local06, local02
1f420     09 28 46 F0 | 	shr	local06, #9
1f424     18 1E 06 F1 | 	add	local01, #24
1f428     0F 27 02 FB | 	rdlong	local05, local01
1f42c     14 27 02 F1 | 	add	local05, local06
1f430     0F 27 62 FC | 	wrlong	local05, local01
1f434     34 22 06 F1 | 	add	local03, #52
1f438     FF 21 06 F5 | 	and	local02, #511
1f43c     10 23 02 F1 | 	add	local03, local02
1f440     04 1E 06 F1 | 	add	local01, #4
1f444     0F 23 62 FC | 	wrlong	local03, local01
1f448                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
1f448                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
1f448                 | ' 
1f448                 | ' 	return FR_OK;
1f448     00 FA 05 F6 | 	mov	result1, #0
1f44c                 | LR__3326
1f44c     A7 F0 03 F6 | 	mov	ptra, fp
1f450     B2 00 A0 FD | 	call	#popregs_
1f454                 | _fatfs_cc_dir_sdi_ret
1f454     2D 00 64 FD | 	ret
1f458                 | 
1f458                 | _fatfs_cc_dir_next
1f458     05 4A 05 F6 | 	mov	COUNT_, #5
1f45c     A8 00 A0 FD | 	call	#pushregs_
1f460     09 1F 02 F6 | 	mov	local01, arg01
1f464     0A 21 02 F6 | 	mov	local02, arg02
1f468     0F 23 02 FB | 	rdlong	local03, local01
1f46c     10 1E 06 F1 | 	add	local01, #16
1f470     0F 25 02 FB | 	rdlong	local04, local01
1f474     10 1E 86 F1 | 	sub	local01, #16
1f478     20 24 06 F1 | 	add	local04, #32
1f47c     00 10 00 FF 
1f480     00 24 16 F2 | 	cmp	local04, ##2097152 wc
1f484     18 1E 06 31 |  if_ae	add	local01, #24
1f488     0F 01 68 3C |  if_ae	wrlong	#0, local01
1f48c     18 1E 86 31 |  if_ae	sub	local01, #24
1f490     18 1E 06 F1 | 	add	local01, #24
1f494     0F 15 0A FB | 	rdlong	arg02, local01 wz
1f498     18 1E 86 F1 | 	sub	local01, #24
1f49c     04 FA 05 A6 |  if_e	mov	result1, #4
1f4a0     64 01 90 AD |  if_e	jmp	#LR__3335
1f4a4     FF 25 CE F7 | 	test	local04, #511 wz
1f4a8     3C 01 90 5D |  if_ne	jmp	#LR__3334
1f4ac     18 1E 06 F1 | 	add	local01, #24
1f4b0     0F 15 02 FB | 	rdlong	arg02, local01
1f4b4     01 14 06 F1 | 	add	arg02, #1
1f4b8     0F 15 62 FC | 	wrlong	arg02, local01
1f4bc     04 1E 86 F1 | 	sub	local01, #4
1f4c0     0F 15 0A FB | 	rdlong	arg02, local01 wz
1f4c4     14 1E 86 F1 | 	sub	local01, #20
1f4c8     2C 00 90 5D |  if_ne	jmp	#LR__3330
1f4cc     12 15 02 F6 | 	mov	arg02, local04
1f4d0     05 14 46 F0 | 	shr	arg02, #5
1f4d4     08 22 06 F1 | 	add	local03, #8
1f4d8     11 21 E2 FA | 	rdword	local02, local03
1f4dc     08 22 86 F1 | 	sub	local03, #8
1f4e0     10 15 12 F2 | 	cmp	arg02, local02 wc
1f4e4     18 1E 06 31 |  if_ae	add	local01, #24
1f4e8     0F 01 68 3C |  if_ae	wrlong	#0, local01
1f4ec                 | ' 				dp->sect = 0; return FR_NO_FILE;
1f4ec     04 FA 05 36 |  if_ae	mov	result1, #4
1f4f0     14 01 90 3D |  if_ae	jmp	#LR__3335
1f4f4     F0 00 90 FD | 	jmp	#LR__3333
1f4f8                 | LR__3330
1f4f8     12 13 02 F6 | 	mov	arg01, local04
1f4fc     09 12 46 F0 | 	shr	arg01, #9
1f500     0A 22 06 F1 | 	add	local03, #10
1f504     11 15 E2 FA | 	rdword	arg02, local03
1f508     0A 22 86 F1 | 	sub	local03, #10
1f50c     01 14 86 F1 | 	sub	arg02, #1
1f510     0A 13 CA F7 | 	test	arg01, arg02 wz
1f514     D0 00 90 5D |  if_ne	jmp	#LR__3332
1f518     0F 13 02 F6 | 	mov	arg01, local01
1f51c     14 1E 06 F1 | 	add	local01, #20
1f520     0F 15 02 FB | 	rdlong	arg02, local01
1f524     14 1E 86 F1 | 	sub	local01, #20
1f528     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
1f52c     FD 26 02 F6 | 	mov	local05, result1
1f530     02 26 16 F2 | 	cmp	local05, #2 wc
1f534     02 FA 05 C6 |  if_b	mov	result1, #2
1f538     CC 00 90 CD |  if_b	jmp	#LR__3335
1f53c     FF FF 7F FF 
1f540     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1f544     01 FA 05 A6 |  if_e	mov	result1, #1
1f548     BC 00 90 AD |  if_e	jmp	#LR__3335
1f54c     18 22 06 F1 | 	add	local03, #24
1f550     11 15 02 FB | 	rdlong	arg02, local03
1f554     18 22 86 F1 | 	sub	local03, #24
1f558     0A 27 12 F2 | 	cmp	local05, arg02 wc
1f55c     68 00 90 CD |  if_b	jmp	#LR__3331
1f560     00 20 0E F2 | 	cmp	local02, #0 wz
1f564     18 1E 06 A1 |  if_e	add	local01, #24
1f568     0F 01 68 AC |  if_e	wrlong	#0, local01
1f56c                 | ' 						dp->sect = 0; return FR_NO_FILE;
1f56c     04 FA 05 A6 |  if_e	mov	result1, #4
1f570     94 00 90 AD |  if_e	jmp	#LR__3335
1f574     0F 13 02 F6 | 	mov	arg01, local01
1f578     14 1E 06 F1 | 	add	local01, #20
1f57c     0F 15 02 FB | 	rdlong	arg02, local01
1f580     14 1E 86 F1 | 	sub	local01, #20
1f584     84 FA BF FD | 	call	#_fatfs_cc_create_chain
1f588     FD 26 0A F6 | 	mov	local05, result1 wz
1f58c     07 FA 05 A6 |  if_e	mov	result1, #7
1f590     74 00 90 AD |  if_e	jmp	#LR__3335
1f594     01 26 0E F2 | 	cmp	local05, #1 wz
1f598     02 FA 05 A6 |  if_e	mov	result1, #2
1f59c     68 00 90 AD |  if_e	jmp	#LR__3335
1f5a0     FF FF 7F FF 
1f5a4     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1f5a8     01 FA 05 A6 |  if_e	mov	result1, #1
1f5ac     58 00 90 AD |  if_e	jmp	#LR__3335
1f5b0     13 15 02 F6 | 	mov	arg02, local05
1f5b4     11 13 02 F6 | 	mov	arg01, local03
1f5b8     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
1f5bc     00 FA 0D F2 | 	cmp	result1, #0 wz
1f5c0     01 FA 05 56 |  if_ne	mov	result1, #1
1f5c4     40 00 90 5D |  if_ne	jmp	#LR__3335
1f5c8                 | LR__3331
1f5c8     14 1E 06 F1 | 	add	local01, #20
1f5cc     0F 27 62 FC | 	wrlong	local05, local01
1f5d0     11 13 02 F6 | 	mov	arg01, local03
1f5d4     13 15 02 F6 | 	mov	arg02, local05
1f5d8     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
1f5dc     04 1E 06 F1 | 	add	local01, #4
1f5e0     0F FB 61 FC | 	wrlong	result1, local01
1f5e4     18 1E 86 F1 | 	sub	local01, #24
1f5e8                 | LR__3332
1f5e8                 | LR__3333
1f5e8                 | LR__3334
1f5e8     10 1E 06 F1 | 	add	local01, #16
1f5ec     0F 25 62 FC | 	wrlong	local04, local01
1f5f0     34 22 06 F1 | 	add	local03, #52
1f5f4     FF 25 06 F5 | 	and	local04, #511
1f5f8     12 23 02 F1 | 	add	local03, local04
1f5fc     0C 1E 06 F1 | 	add	local01, #12
1f600     0F 23 62 FC | 	wrlong	local03, local01
1f604                 | ' #line 1771 "ff.c"
1f604                 | ' 				}
1f604                 | ' 				dp->clust = clst;
1f604                 | ' 				dp->sect = clst2sect(fs, clst);
1f604                 | ' 			}
1f604                 | ' 		}
1f604                 | ' 	}
1f604                 | ' 	dp->dptr = ofs;
1f604                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
1f604                 | ' 
1f604                 | ' 	return FR_OK;
1f604     00 FA 05 F6 | 	mov	result1, #0
1f608                 | LR__3335
1f608     A7 F0 03 F6 | 	mov	ptra, fp
1f60c     B2 00 A0 FD | 	call	#popregs_
1f610                 | _fatfs_cc_dir_next_ret
1f610     2D 00 64 FD | 	ret
1f614                 | 
1f614                 | _fatfs_cc_dir_alloc
1f614     08 4A 05 F6 | 	mov	COUNT_, #8
1f618     A8 00 A0 FD | 	call	#pushregs_
1f61c     09 1F 02 F6 | 	mov	local01, arg01
1f620     0A 21 02 F6 | 	mov	local02, arg02
1f624     0F 23 02 FB | 	rdlong	local03, local01
1f628     0F 13 02 F6 | 	mov	arg01, local01
1f62c     00 14 06 F6 | 	mov	arg02, #0
1f630     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
1f634     FD 24 0A F6 | 	mov	local04, result1 wz
1f638     70 00 90 5D |  if_ne	jmp	#LR__3344
1f63c     00 26 06 F6 | 	mov	local05, #0
1f640                 | ' 		n = 0;
1f640                 | ' 		do {
1f640                 | LR__3340
1f640     18 1E 06 F1 | 	add	local01, #24
1f644     0F 15 02 FB | 	rdlong	arg02, local01
1f648     18 1E 86 F1 | 	sub	local01, #24
1f64c     11 13 02 F6 | 	mov	arg01, local03
1f650     38 F3 BF FD | 	call	#_fatfs_cc_move_window
1f654     FD 24 0A F6 | 	mov	local04, result1 wz
1f658     50 00 90 5D |  if_ne	jmp	#LR__3343
1f65c     1C 1E 06 F1 | 	add	local01, #28
1f660     0F 29 02 FB | 	rdlong	local06, local01
1f664     1C 1E 86 F1 | 	sub	local01, #28
1f668     14 29 C2 FA | 	rdbyte	local06, local06
1f66c     E5 28 0E F2 | 	cmp	local06, #229 wz
1f670     1C 1E 06 51 |  if_ne	add	local01, #28
1f674     0F 2B 02 5B |  if_ne	rdlong	local07, local01
1f678     1C 1E 86 51 |  if_ne	sub	local01, #28
1f67c     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
1f680     10 00 90 5D |  if_ne	jmp	#LR__3341
1f684     01 26 06 F1 | 	add	local05, #1
1f688     10 27 0A F2 | 	cmp	local05, local02 wz
1f68c     1C 00 90 AD |  if_e	jmp	#LR__3343
1f690     04 00 90 FD | 	jmp	#LR__3342
1f694                 | LR__3341
1f694     00 26 06 F6 | 	mov	local05, #0
1f698                 | LR__3342
1f698     0F 13 02 F6 | 	mov	arg01, local01
1f69c     01 14 06 F6 | 	mov	arg02, #1
1f6a0     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
1f6a4     FD 24 0A F6 | 	mov	local04, result1 wz
1f6a8     94 FF 9F AD |  if_e	jmp	#LR__3340
1f6ac                 | LR__3343
1f6ac                 | LR__3344
1f6ac     04 24 0E F2 | 	cmp	local04, #4 wz
1f6b0     07 24 06 A6 |  if_e	mov	local04, #7
1f6b4                 | ' 	return res;
1f6b4     12 FB 01 F6 | 	mov	result1, local04
1f6b8     A7 F0 03 F6 | 	mov	ptra, fp
1f6bc     B2 00 A0 FD | 	call	#popregs_
1f6c0                 | _fatfs_cc_dir_alloc_ret
1f6c0     2D 00 64 FD | 	ret
1f6c4                 | 
1f6c4                 | _fatfs_cc_ld_clust
1f6c4     09 01 02 F6 | 	mov	_var01, arg01
1f6c8     0A 13 02 F6 | 	mov	arg01, arg02
1f6cc     1A 12 06 F1 | 	add	arg01, #26
1f6d0                 | ' {
1f6d0                 | ' 
1f6d0                 | ' 	return *((WORD*)ptr);
1f6d0     09 FB E1 FA | 	rdword	result1, arg01
1f6d4     FD 12 32 F9 | 	getword	arg01, result1, #0
1f6d8     00 01 C2 FA | 	rdbyte	_var01, _var01
1f6dc     03 00 0E F2 | 	cmp	_var01, #3 wz
1f6e0     14 14 06 A1 |  if_e	add	arg02, #20
1f6e4                 | ' {
1f6e4                 | ' 
1f6e4                 | ' 	return *((WORD*)ptr);
1f6e4     0A FB E1 AA |  if_e	rdword	result1, arg02
1f6e8     10 FA 65 A0 |  if_e	shl	result1, #16
1f6ec     FD 12 42 A5 |  if_e	or	arg01, result1
1f6f0                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
1f6f0                 | ' 	}
1f6f0                 | ' 
1f6f0                 | ' 	return cl;
1f6f0     09 FB 01 F6 | 	mov	result1, arg01
1f6f4                 | _fatfs_cc_ld_clust_ret
1f6f4     2D 00 64 FD | 	ret
1f6f8                 | 
1f6f8                 | _fatfs_cc_st_clust
1f6f8     09 01 02 F6 | 	mov	_var01, arg01
1f6fc     0A 13 02 F6 | 	mov	arg01, arg02
1f700     1A 12 06 F1 | 	add	arg01, #26
1f704     09 17 52 FC | 	wrword	arg03, arg01
1f708     00 01 C2 FA | 	rdbyte	_var01, _var01
1f70c     03 00 0E F2 | 	cmp	_var01, #3 wz
1f710     14 14 06 A1 |  if_e	add	arg02, #20
1f714     10 16 46 A0 |  if_e	shr	arg03, #16
1f718     0A 17 52 AC |  if_e	wrword	arg03, arg02
1f71c                 | _fatfs_cc_st_clust_ret
1f71c     2D 00 64 FD | 	ret
1f720                 | 
1f720                 | _fatfs_cc_cmp_lfn
1f720     07 4A 05 F6 | 	mov	COUNT_, #7
1f724     A8 00 A0 FD | 	call	#pushregs_
1f728     09 1F 02 F6 | 	mov	local01, arg01
1f72c     0A 13 02 F6 | 	mov	arg01, arg02
1f730     1A 12 06 F1 | 	add	arg01, #26
1f734                 | ' {
1f734                 | ' 
1f734                 | ' 	return *((WORD*)ptr);
1f734     09 FB E9 FA | 	rdword	result1, arg01 wz
1f738     00 FA 05 56 |  if_ne	mov	result1, #0
1f73c     E0 00 90 5D |  if_ne	jmp	#LR__3356
1f740     0A 21 C2 FA | 	rdbyte	local02, arg02
1f744     3F 20 06 F5 | 	and	local02, #63
1f748     01 20 86 F1 | 	sub	local02, #1
1f74c     0D 20 06 FD | 	qmul	local02, #13
1f750                 | ' 
1f750                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
1f750                 | ' 
1f750                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1f750     01 22 06 F6 | 	mov	local03, #1
1f754     00 24 06 F6 | 	mov	local04, #0
1f758     18 26 62 FD | 	getqx	local05
1f75c                 | LR__3350
1f75c     0D 24 16 F2 | 	cmp	local04, #13 wc
1f760     9C 00 90 3D |  if_ae	jmp	#LR__3355
1f764     0A 13 02 F6 | 	mov	arg01, arg02
1f768     12 21 02 F6 | 	mov	local02, local04
1f76c     01 00 00 FF 
1f770     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1f774     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1f778     10 21 C2 FA | 	rdbyte	local02, local02
1f77c     01 20 06 FA | 	mul	local02, #1
1f780     10 13 02 F1 | 	add	arg01, local02
1f784     01 00 00 FF 
1f788     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1f78c                 | ' {
1f78c                 | ' 
1f78c                 | ' 	return *((WORD*)ptr);
1f78c     09 FB E1 FA | 	rdword	result1, arg01
1f790     FD 28 02 F6 | 	mov	local06, result1
1f794     11 21 02 F6 | 	mov	local02, local03
1f798     0F 20 4E F7 | 	zerox	local02, #15 wz
1f79c     44 00 90 AD |  if_e	jmp	#LR__3353
1f7a0     00 27 16 F2 | 	cmp	local05, #256 wc
1f7a4     2C 00 90 3D |  if_ae	jmp	#LR__3351
1f7a8     14 13 32 F9 | 	getword	arg01, local06, #0
1f7ac     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1f7b0     FD 20 02 F6 | 	mov	local02, result1
1f7b4     13 23 02 F6 | 	mov	local03, local05
1f7b8     01 22 66 F0 | 	shl	local03, #1
1f7bc     0F 23 02 F1 | 	add	local03, local01
1f7c0     11 13 E2 FA | 	rdword	arg01, local03
1f7c4     01 26 06 F1 | 	add	local05, #1
1f7c8     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1f7cc     FD 20 0A F2 | 	cmp	local02, result1 wz
1f7d0     08 00 90 AD |  if_e	jmp	#LR__3352
1f7d4                 | LR__3351
1f7d4                 | ' 				return 0;
1f7d4     00 FA 05 F6 | 	mov	result1, #0
1f7d8     44 00 90 FD | 	jmp	#LR__3356
1f7dc                 | LR__3352
1f7dc     14 23 02 F6 | 	mov	local03, local06
1f7e0     14 00 90 FD | 	jmp	#LR__3354
1f7e4                 | LR__3353
1f7e4     14 29 32 F9 | 	getword	local06, local06, #0
1f7e8     7F 00 00 FF 
1f7ec     FF 29 0E F2 | 	cmp	local06, ##65535 wz
1f7f0     00 FA 05 56 |  if_ne	mov	result1, #0
1f7f4     28 00 90 5D |  if_ne	jmp	#LR__3356
1f7f8                 | LR__3354
1f7f8     01 24 06 F1 | 	add	local04, #1
1f7fc     5C FF 9F FD | 	jmp	#LR__3350
1f800                 | LR__3355
1f800     0A 21 C2 FA | 	rdbyte	local02, arg02
1f804     40 20 CE F7 | 	test	local02, #64 wz
1f808     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1f80c     01 26 66 50 |  if_ne	shl	local05, #1
1f810     0F 27 02 51 |  if_ne	add	local05, local01
1f814     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
1f818     00 FA 05 56 |  if_ne	mov	result1, #0
1f81c                 | ' 
1f81c                 | ' 	return 1;
1f81c     01 FA 05 A6 |  if_e	mov	result1, #1
1f820                 | LR__3356
1f820     A7 F0 03 F6 | 	mov	ptra, fp
1f824     B2 00 A0 FD | 	call	#popregs_
1f828                 | _fatfs_cc_cmp_lfn_ret
1f828     2D 00 64 FD | 	ret
1f82c                 | 
1f82c                 | _fatfs_cc_pick_lfn
1f82c     09 01 02 F6 | 	mov	_var01, arg01
1f830     0A 13 02 F6 | 	mov	arg01, arg02
1f834     1A 12 06 F1 | 	add	arg01, #26
1f838                 | ' {
1f838                 | ' 
1f838                 | ' 	return *((WORD*)ptr);
1f838     09 FB E9 FA | 	rdword	result1, arg01 wz
1f83c     00 FA 05 56 |  if_ne	mov	result1, #0
1f840     D4 00 90 5D |  if_ne	jmp	#LR__3365
1f844     0A 03 C2 FA | 	rdbyte	_var02, arg02
1f848     40 02 26 F5 | 	andn	_var02, #64
1f84c     01 02 86 F1 | 	sub	_var02, #1
1f850     0D 02 06 FD | 	qmul	_var02, #13
1f854                 | ' 
1f854                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
1f854                 | ' 
1f854                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1f854     01 04 06 F6 | 	mov	_var03, #1
1f858     00 06 06 F6 | 	mov	_var04, #0
1f85c     18 08 62 FD | 	getqx	_var05
1f860                 | LR__3360
1f860     0D 06 16 F2 | 	cmp	_var04, #13 wc
1f864     80 00 90 3D |  if_ae	jmp	#LR__3363
1f868     0A 13 02 F6 | 	mov	arg01, arg02
1f86c     03 03 02 F6 | 	mov	_var02, _var04
1f870     01 00 00 FF 
1f874     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1f878     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
1f87c     01 03 C2 FA | 	rdbyte	_var02, _var02
1f880     01 02 06 FA | 	mul	_var02, #1
1f884     01 13 02 F1 | 	add	arg01, _var02
1f888     01 00 00 FF 
1f88c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1f890                 | ' {
1f890                 | ' 
1f890                 | ' 	return *((WORD*)ptr);
1f890     09 FB E1 FA | 	rdword	result1, arg01
1f894     FD 0A 02 F6 | 	mov	_var06, result1
1f898     02 03 02 F6 | 	mov	_var02, _var03
1f89c     0F 02 4E F7 | 	zerox	_var02, #15 wz
1f8a0     28 00 90 AD |  if_e	jmp	#LR__3361
1f8a4     00 09 16 F2 | 	cmp	_var05, #256 wc
1f8a8     00 FA 05 36 |  if_ae	mov	result1, #0
1f8ac     68 00 90 3D |  if_ae	jmp	#LR__3365
1f8b0     04 03 02 F6 | 	mov	_var02, _var05
1f8b4     01 02 66 F0 | 	shl	_var02, #1
1f8b8     00 03 02 F1 | 	add	_var02, _var01
1f8bc     05 05 02 F6 | 	mov	_var03, _var06
1f8c0     01 05 52 FC | 	wrword	_var03, _var02
1f8c4     01 08 06 F1 | 	add	_var05, #1
1f8c8     14 00 90 FD | 	jmp	#LR__3362
1f8cc                 | LR__3361
1f8cc     05 0B 32 F9 | 	getword	_var06, _var06, #0
1f8d0     7F 00 00 FF 
1f8d4     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
1f8d8     00 FA 05 56 |  if_ne	mov	result1, #0
1f8dc     38 00 90 5D |  if_ne	jmp	#LR__3365
1f8e0                 | LR__3362
1f8e0     01 06 06 F1 | 	add	_var04, #1
1f8e4     78 FF 9F FD | 	jmp	#LR__3360
1f8e8                 | LR__3363
1f8e8     0A 03 C2 FA | 	rdbyte	_var02, arg02
1f8ec     40 02 CE F7 | 	test	_var02, #64 wz
1f8f0     02 0D 02 56 |  if_ne	mov	_var07, _var03
1f8f4     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
1f8f8     18 00 90 AD |  if_e	jmp	#LR__3364
1f8fc     00 09 16 F2 | 	cmp	_var05, #256 wc
1f900     00 FA 05 36 |  if_ae	mov	result1, #0
1f904     10 00 90 3D |  if_ae	jmp	#LR__3365
1f908     01 08 66 F0 | 	shl	_var05, #1
1f90c     00 09 02 F1 | 	add	_var05, _var01
1f910     04 01 58 FC | 	wrword	#0, _var05
1f914                 | LR__3364
1f914                 | ' 		lfnbuf[i] = 0;
1f914                 | ' 	}
1f914                 | ' 
1f914                 | ' 	return 1;
1f914     01 FA 05 F6 | 	mov	result1, #1
1f918                 | LR__3365
1f918                 | _fatfs_cc_pick_lfn_ret
1f918     2D 00 64 FD | 	ret
1f91c                 | 
1f91c                 | _fatfs_cc_put_lfn
1f91c     0D 14 06 F1 | 	add	arg02, #13
1f920     0A 19 42 FC | 	wrbyte	arg04, arg02
1f924     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
1f928     01 18 86 F1 | 	sub	arg04, #1
1f92c     0D 18 06 FD | 	qmul	arg04, #13
1f930     09 01 02 F6 | 	mov	_var01, arg01
1f934     02 14 86 F1 | 	sub	arg02, #2
1f938     0A 1F 48 FC | 	wrbyte	#15, arg02
1f93c     01 14 06 F1 | 	add	arg02, #1
1f940     0A 01 48 FC | 	wrbyte	#0, arg02
1f944     0C 14 86 F1 | 	sub	arg02, #12
1f948     0A 13 02 F6 | 	mov	arg01, arg02
1f94c     1A 12 06 F1 | 	add	arg01, #26
1f950     09 01 58 FC | 	wrword	#0, arg01
1f954     00 02 06 F6 | 	mov	_var02, #0
1f958     00 04 06 F6 | 	mov	_var03, #0
1f95c                 | ' 	BYTE* dir,
1f95c                 | ' 	BYTE ord,
1f95c                 | ' 	BYTE sum
1f95c                 | ' )
1f95c                 | ' {
1f95c                 | ' 	UINT i, s;
1f95c                 | ' 	WCHAR wc;
1f95c                 | ' 
1f95c                 | ' 
1f95c                 | ' 	dir[ 13 ] = sum;
1f95c                 | ' 	dir[ 11 ] =  0x0F ;
1f95c                 | ' 	dir[ 12 ] = 0;
1f95c                 | ' 	st_word(dir +  26 , 0);
1f95c                 | ' 
1f95c                 | ' 	i = (ord - 1) * 13;
1f95c                 | ' 	s = wc = 0;
1f95c                 | ' 	do {
1f95c     01 00 00 FF 
1f960     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1f964     18 06 62 FD | 	getqx	_var04
1f968     97 2A 48 FB | 	callpa	#(@LR__3371-@LR__3370)>>2,fcache_load_ptr_
1f96c                 | LR__3370
1f96c     01 19 32 F9 | 	getword	arg04, _var02, #0
1f970     7F 00 00 FF 
1f974     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
1f978     03 13 02 56 |  if_ne	mov	arg01, _var04
1f97c     01 06 06 51 |  if_ne	add	_var04, #1
1f980     01 12 66 50 |  if_ne	shl	arg01, #1
1f984     00 13 02 51 |  if_ne	add	arg01, _var01
1f988     09 03 E2 5A |  if_ne	rdword	_var02, arg01
1f98c     0A 13 02 F6 | 	mov	arg01, arg02
1f990     02 19 02 F6 | 	mov	arg04, _var03
1f994     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
1f998     0C 19 C2 FA | 	rdbyte	arg04, arg04
1f99c     01 18 06 FA | 	mul	arg04, #1
1f9a0     0C 13 02 F1 | 	add	arg01, arg04
1f9a4     09 03 52 FC | 	wrword	_var02, arg01
1f9a8     01 19 02 F6 | 	mov	arg04, _var02
1f9ac     0F 18 4E F7 | 	zerox	arg04, #15 wz
1f9b0     0F 02 CE A9 |  if_e	bmask	_var02, #15
1f9b4     01 04 06 F1 | 	add	_var03, #1
1f9b8     0D 04 16 F2 | 	cmp	_var03, #13 wc
1f9bc     AC FF 9F CD |  if_b	jmp	#LR__3370
1f9c0                 | LR__3371
1f9c0     01 00 00 FF 
1f9c4     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1f9c8     01 03 32 F9 | 	getword	_var02, _var02, #0
1f9cc     7F 00 00 FF 
1f9d0     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
1f9d4     01 06 66 50 |  if_ne	shl	_var04, #1
1f9d8     00 07 02 51 |  if_ne	add	_var04, _var01
1f9dc     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
1f9e0     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
1f9e4     40 16 46 A5 |  if_e	or	arg03, #64
1f9e8     0A 17 42 FC | 	wrbyte	arg03, arg02
1f9ec                 | _fatfs_cc_put_lfn_ret
1f9ec     2D 00 64 FD | 	ret
1f9f0                 | 
1f9f0                 | _fatfs_cc_gen_numname
1f9f0     08 4A 05 F6 | 	mov	COUNT_, #8
1f9f4     A8 00 A0 FD | 	call	#pushregs_
1f9f8     2C F0 07 F1 | 	add	ptra, #44
1f9fc     09 1F 02 F6 | 	mov	local01, arg01
1fa00     0A 21 02 F6 | 	mov	local02, arg02
1fa04     0B 23 02 F6 | 	mov	local03, arg03
1fa08     0C 25 02 F6 | 	mov	local04, arg04
1fa0c     0F 13 02 F6 | 	mov	arg01, local01
1fa10     10 15 02 F6 | 	mov	arg02, local02
1fa14     0B 16 06 F6 | 	mov	arg03, #11
1fa18     5C 7D BF FD | 	call	#__system____builtin_memmove
1fa1c     06 24 16 F2 | 	cmp	local04, #6 wc
1fa20     48 00 90 CD |  if_b	jmp	#LR__3385
1fa24     12 27 02 F6 | 	mov	local05, local04
1fa28     97 1E 48 FB | 	callpa	#(@LR__3383-@LR__3380)>>2,fcache_load_ptr_
1fa2c                 | ' 		sreg = seq;
1fa2c                 | ' 		while (*lfn) {
1fa2c                 | LR__3380
1fa2c     11 29 EA FA | 	rdword	local06, local03 wz
1fa30     34 00 90 AD |  if_e	jmp	#LR__3384
1fa34     11 2B E2 FA | 	rdword	local07, local03
1fa38                 | ' 			wc = *lfn++;
1fa38                 | ' 			for (i = 0; i < 16; i++) {
1fa38     02 22 06 F1 | 	add	local03, #2
1fa3c     10 12 DC FC | 	rep	@LR__3382, #16
1fa40                 | LR__3381
1fa40     01 26 66 F0 | 	shl	local05, #1
1fa44     15 29 32 F9 | 	getword	local06, local07, #0
1fa48     01 28 06 F5 | 	and	local06, #1
1fa4c     14 27 02 F1 | 	add	local05, local06
1fa50     15 2B 32 F9 | 	getword	local07, local07, #0
1fa54     01 2A 46 F0 | 	shr	local07, #1
1fa58     10 26 2E F4 | 	testbn	local05, #16 wz
1fa5c     88 00 00 5F 
1fa60     21 26 66 55 |  if_ne	xor	local05, ##69665
1fa64                 | LR__3382
1fa64     C4 FF 9F FD | 	jmp	#LR__3380
1fa68                 | LR__3383
1fa68                 | LR__3384
1fa68     13 25 02 F6 | 	mov	local04, local05
1fa6c                 | LR__3385
1fa6c     07 2A 06 F6 | 	mov	local07, #7
1fa70                 | ' 			}
1fa70                 | ' 		}
1fa70                 | ' 		seq = (UINT)sreg;
1fa70                 | ' 	}
1fa70                 | ' 
1fa70                 | ' 
1fa70                 | ' 	i = 7;
1fa70                 | ' 	do {
1fa70     10 4E 05 F1 | 	add	fp, #16
1fa74     97 1A 48 FB | 	callpa	#(@LR__3387-@LR__3386)>>2,fcache_load_ptr_
1fa78                 | LR__3386
1fa78     12 27 42 F8 | 	getnib	local05, local04, #0
1fa7c     30 26 06 F1 | 	add	local05, #48
1fa80     04 24 46 F0 | 	shr	local04, #4
1fa84     13 29 E2 F8 | 	getbyte	local06, local05, #0
1fa88     3A 28 16 F2 | 	cmp	local06, #58 wc
1fa8c     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
1fa90     07 26 06 31 |  if_ae	add	local05, #7
1fa94     15 29 02 F6 | 	mov	local06, local07
1fa98     01 2A 8E F1 | 	sub	local07, #1 wz
1fa9c     A7 28 02 F1 | 	add	local06, fp
1faa0     14 27 42 FC | 	wrbyte	local05, local06
1faa4     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
1faa8     CC FF 9F 5D |  if_ne	jmp	#LR__3386
1faac                 | LR__3387
1faac     15 29 02 F6 | 	mov	local06, local07
1fab0     A7 28 02 F1 | 	add	local06, fp
1fab4     14 FD 48 FC | 	wrbyte	#126, local06
1fab8                 | ' 	ns[i] = '~';
1fab8                 | ' 
1fab8                 | ' 
1fab8                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
1fab8     00 26 06 F6 | 	mov	local05, #0
1fabc     10 4E 85 F1 | 	sub	fp, #16
1fac0     97 2A 48 FB | 	callpa	#(@LR__3390-@LR__3388)>>2,fcache_load_ptr_
1fac4                 | LR__3388
1fac4     15 27 12 F2 | 	cmp	local05, local07 wc
1fac8     4C 00 90 3D |  if_ae	jmp	#LR__3391
1facc     13 29 02 F6 | 	mov	local06, local05
1fad0     0F 29 02 F1 | 	add	local06, local01
1fad4     14 29 C2 FA | 	rdbyte	local06, local06
1fad8     20 28 0E F2 | 	cmp	local06, #32 wz
1fadc     38 00 90 AD |  if_e	jmp	#LR__3391
1fae0     13 13 02 F6 | 	mov	arg01, local05
1fae4     0F 13 02 F1 | 	add	arg01, local01
1fae8     09 13 CA FA | 	rdbyte	arg01, arg01 wz
1faec     00 FA 05 56 |  if_ne	mov	result1, #0
1faf0                 | ' 
1faf0                 | ' 	return 0;
1faf0     00 FA 05 A6 |  if_e	mov	result1, #0
1faf4     00 FA 0D F2 | 	cmp	result1, #0 wz
1faf8     14 00 90 AD |  if_e	jmp	#LR__3389
1fafc     15 29 02 F6 | 	mov	local06, local07
1fb00     01 28 86 F1 | 	sub	local06, #1
1fb04     14 27 0A F2 | 	cmp	local05, local06 wz
1fb08     0C 00 90 AD |  if_e	jmp	#LR__3391
1fb0c     01 26 06 F1 | 	add	local05, #1
1fb10                 | LR__3389
1fb10     01 26 06 F1 | 	add	local05, #1
1fb14     AC FF 9F FD | 	jmp	#LR__3388
1fb18                 | LR__3390
1fb18                 | LR__3391
1fb18     97 20 48 FB | 	callpa	#(@LR__3395-@LR__3392)>>2,fcache_load_ptr_
1fb1c                 | ' 			j++;
1fb1c                 | ' 		}
1fb1c                 | ' 	}
1fb1c                 | ' 	do {
1fb1c                 | LR__3392
1fb1c     13 29 02 F6 | 	mov	local06, local05
1fb20     0F 29 02 F1 | 	add	local06, local01
1fb24     08 2A 16 F2 | 	cmp	local07, #8 wc
1fb28     01 26 06 F1 | 	add	local05, #1
1fb2c     1C 00 90 3D |  if_ae	jmp	#LR__3393
1fb30     15 25 02 F6 | 	mov	local04, local07
1fb34     10 4E 05 F1 | 	add	fp, #16
1fb38     A7 24 02 F1 | 	add	local04, fp
1fb3c     12 2D C2 FA | 	rdbyte	local08, local04
1fb40     01 2A 06 F1 | 	add	local07, #1
1fb44     10 4E 85 F1 | 	sub	fp, #16
1fb48     04 00 90 FD | 	jmp	#LR__3394
1fb4c                 | LR__3393
1fb4c     20 2C 06 F6 | 	mov	local08, #32
1fb50                 | LR__3394
1fb50     14 2D 42 FC | 	wrbyte	local08, local06
1fb54     08 26 16 F2 | 	cmp	local05, #8 wc
1fb58     C0 FF 9F CD |  if_b	jmp	#LR__3392
1fb5c                 | LR__3395
1fb5c     A7 F0 03 F6 | 	mov	ptra, fp
1fb60     B2 00 A0 FD | 	call	#popregs_
1fb64                 | _fatfs_cc_gen_numname_ret
1fb64     2D 00 64 FD | 	ret
1fb68                 | 
1fb68                 | _fatfs_cc_sum_sfn
1fb68     00 00 06 F6 | 	mov	_var01, #0
1fb6c                 | ' )
1fb6c                 | ' {
1fb6c                 | ' 	BYTE sum = 0;
1fb6c                 | ' 	UINT n = 11;
1fb6c                 | ' 
1fb6c                 | ' 	do {
1fb6c     97 12 48 FB | 	callpa	#(@LR__3402-@LR__3400)>>2,fcache_load_ptr_
1fb70                 | LR__3400
1fb70     0B 10 DC FC | 	rep	@LR__3403, #11
1fb74                 | LR__3401
1fb74     00 FB E1 F8 | 	getbyte	result1, _var01, #0
1fb78     01 FA 45 F0 | 	shr	result1, #1
1fb7c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1fb80     07 00 66 F0 | 	shl	_var01, #7
1fb84     00 FB 01 F1 | 	add	result1, _var01
1fb88     09 01 C2 FA | 	rdbyte	_var01, arg01
1fb8c     FD 00 02 F1 | 	add	_var01, result1
1fb90     01 12 06 F1 | 	add	arg01, #1
1fb94                 | LR__3402
1fb94                 | LR__3403
1fb94                 | ' 	return sum;
1fb94     00 FB 01 F6 | 	mov	result1, _var01
1fb98                 | _fatfs_cc_sum_sfn_ret
1fb98     2D 00 64 FD | 	ret
1fb9c                 | 
1fb9c                 | _fatfs_cc_dir_read
1fb9c     0C 4A 05 F6 | 	mov	COUNT_, #12
1fba0     A8 00 A0 FD | 	call	#pushregs_
1fba4     09 1F 02 F6 | 	mov	local01, arg01
1fba8     0A 21 02 F6 | 	mov	local02, arg02
1fbac     04 22 06 F6 | 	mov	local03, #4
1fbb0     0F 25 02 FB | 	rdlong	local04, local01
1fbb4     FF 26 06 F6 | 	mov	local05, #255
1fbb8     FF 28 06 F6 | 	mov	local06, #255
1fbbc                 | ' )
1fbbc                 | ' {
1fbbc                 | ' 	FRESULT res = FR_NO_FILE;
1fbbc                 | ' 	FATFS *fs = dp->obj.fs;
1fbbc                 | ' 	BYTE attr, b;
1fbbc                 | ' 
1fbbc                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
1fbbc                 | ' 
1fbbc                 | ' 
1fbbc                 | ' 	while (dp->sect) {
1fbbc                 | LR__3410
1fbbc     18 1E 06 F1 | 	add	local01, #24
1fbc0     0F FB 09 FB | 	rdlong	result1, local01 wz
1fbc4     18 1E 86 F1 | 	sub	local01, #24
1fbc8     AC 01 90 AD |  if_e	jmp	#LR__3420
1fbcc     18 1E 06 F1 | 	add	local01, #24
1fbd0     0F 15 02 FB | 	rdlong	arg02, local01
1fbd4     18 1E 86 F1 | 	sub	local01, #24
1fbd8     12 13 02 F6 | 	mov	arg01, local04
1fbdc     AC ED BF FD | 	call	#_fatfs_cc_move_window
1fbe0     FD 22 0A F6 | 	mov	local03, result1 wz
1fbe4     90 01 90 5D |  if_ne	jmp	#LR__3420
1fbe8     1C 1E 06 F1 | 	add	local01, #28
1fbec     0F FB 01 FB | 	rdlong	result1, local01
1fbf0     1C 1E 86 F1 | 	sub	local01, #28
1fbf4     FD 2A C2 FA | 	rdbyte	local07, result1
1fbf8     15 FB 01 F6 | 	mov	result1, local07
1fbfc     07 FA 4D F7 | 	zerox	result1, #7 wz
1fc00     04 22 06 A6 |  if_e	mov	local03, #4
1fc04                 | ' 			res = FR_NO_FILE; break;
1fc04     70 01 90 AD |  if_e	jmp	#LR__3420
1fc08     1C 1E 06 F1 | 	add	local01, #28
1fc0c     0F 2D 02 FB | 	rdlong	local08, local01
1fc10     0B 2C 06 F1 | 	add	local08, #11
1fc14     16 2F C2 FA | 	rdbyte	local09, local08
1fc18     3F 2E 06 F5 | 	and	local09, #63
1fc1c     16 1E 86 F1 | 	sub	local01, #22
1fc20     0F 2F 42 FC | 	wrbyte	local09, local01
1fc24     06 1E 86 F1 | 	sub	local01, #6
1fc28     15 FB E1 F8 | 	getbyte	result1, local07, #0
1fc2c     E5 FA 0D F2 | 	cmp	result1, #229 wz
1fc30     15 2D 02 56 |  if_ne	mov	local08, local07
1fc34     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
1fc38     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
1fc3c     1C 00 90 AD |  if_e	jmp	#LR__3411
1fc40     00 30 06 F6 | 	mov	local10, #0
1fc44     17 2D E2 F8 | 	getbyte	local08, local09, #0
1fc48     20 2C 26 F5 | 	andn	local08, #32
1fc4c     08 2C 0E F2 | 	cmp	local08, #8 wz
1fc50     01 30 06 A6 |  if_e	mov	local10, #1
1fc54     10 31 0A F2 | 	cmp	local10, local02 wz
1fc58     08 00 90 AD |  if_e	jmp	#LR__3412
1fc5c                 | LR__3411
1fc5c     FF 26 06 F6 | 	mov	local05, #255
1fc60     00 01 90 FD | 	jmp	#LR__3419
1fc64                 | LR__3412
1fc64     17 2F E2 F8 | 	getbyte	local09, local09, #0
1fc68     0F 2E 0E F2 | 	cmp	local09, #15 wz
1fc6c     B4 00 90 5D |  if_ne	jmp	#LR__3416
1fc70     15 33 E2 F8 | 	getbyte	local11, local07, #0
1fc74     40 32 CE F7 | 	test	local11, #64 wz
1fc78     30 00 90 AD |  if_e	jmp	#LR__3413
1fc7c     1C 1E 06 F1 | 	add	local01, #28
1fc80     0F 33 02 FB | 	rdlong	local11, local01
1fc84     0D 32 06 F1 | 	add	local11, #13
1fc88     19 29 C2 FA | 	rdbyte	local06, local11
1fc8c     15 2B E2 F8 | 	getbyte	local07, local07, #0
1fc90     BF 2A 06 F5 | 	and	local07, #191
1fc94     15 27 02 F6 | 	mov	local05, local07
1fc98     0C 1E 86 F1 | 	sub	local01, #12
1fc9c     0F 33 02 FB | 	rdlong	local11, local01
1fca0     1C 1E 06 F1 | 	add	local01, #28
1fca4     0F 33 62 FC | 	wrlong	local11, local01
1fca8     2C 1E 86 F1 | 	sub	local01, #44
1fcac                 | LR__3413
1fcac     15 2D E2 F8 | 	getbyte	local08, local07, #0
1fcb0     13 31 E2 F8 | 	getbyte	local10, local05, #0
1fcb4     18 2D 0A F2 | 	cmp	local08, local10 wz
1fcb8     5C 00 90 5D |  if_ne	jmp	#LR__3414
1fcbc     14 31 E2 F8 | 	getbyte	local10, local06, #0
1fcc0     1C 1E 06 F1 | 	add	local01, #28
1fcc4     0F 2F 02 FB | 	rdlong	local09, local01
1fcc8     1C 1E 86 F1 | 	sub	local01, #28
1fccc     0D 2E 06 F1 | 	add	local09, #13
1fcd0     17 2D C2 FA | 	rdbyte	local08, local09
1fcd4     16 2F E2 F8 | 	getbyte	local09, local08, #0
1fcd8     17 31 0A F2 | 	cmp	local10, local09 wz
1fcdc     38 00 90 5D |  if_ne	jmp	#LR__3414
1fce0     0C 24 06 F1 | 	add	local04, #12
1fce4     12 13 02 FB | 	rdlong	arg01, local04
1fce8     0C 24 86 F1 | 	sub	local04, #12
1fcec     1C 1E 06 F1 | 	add	local01, #28
1fcf0     0F 35 02 FB | 	rdlong	local12, local01
1fcf4     1C 1E 86 F1 | 	sub	local01, #28
1fcf8     1A 15 02 F6 | 	mov	arg02, local12
1fcfc     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
1fd00     00 FA 4D F2 | 	cmps	result1, #0 wz
1fd04     13 35 02 56 |  if_ne	mov	local12, local05
1fd08     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
1fd0c     01 34 86 51 |  if_ne	sub	local12, #1
1fd10     1A 33 02 56 |  if_ne	mov	local11, local12
1fd14     04 00 90 5D |  if_ne	jmp	#LR__3415
1fd18                 | LR__3414
1fd18     FF 32 06 F6 | 	mov	local11, #255
1fd1c                 | LR__3415
1fd1c     19 27 02 F6 | 	mov	local05, local11
1fd20     40 00 90 FD | 	jmp	#LR__3418
1fd24                 | LR__3416
1fd24     13 33 02 F6 | 	mov	local11, local05
1fd28     07 32 4E F7 | 	zerox	local11, #7 wz
1fd2c     20 00 90 5D |  if_ne	jmp	#LR__3417
1fd30     14 29 E2 F8 | 	getbyte	local06, local06, #0
1fd34     1C 1E 06 F1 | 	add	local01, #28
1fd38     0F 13 02 FB | 	rdlong	arg01, local01
1fd3c     1C 1E 86 F1 | 	sub	local01, #28
1fd40     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
1fd44     FD FA E1 F8 | 	getbyte	result1, result1, #0
1fd48     FD 28 0A F2 | 	cmp	local06, result1 wz
1fd4c     28 00 90 AD |  if_e	jmp	#LR__3420
1fd50                 | LR__3417
1fd50     2C 1E 06 F1 | 	add	local01, #44
1fd54     FF FF FF FF 
1fd58     0F FF 6B FC | 	wrlong	##-1, local01
1fd5c     2C 1E 86 F1 | 	sub	local01, #44
1fd60                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
1fd60                 | ' 					}
1fd60                 | ' 					break;
1fd60     14 00 90 FD | 	jmp	#LR__3420
1fd64                 | LR__3418
1fd64                 | LR__3419
1fd64     0F 13 02 F6 | 	mov	arg01, local01
1fd68     00 14 06 F6 | 	mov	arg02, #0
1fd6c     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
1fd70     FD 22 0A F6 | 	mov	local03, result1 wz
1fd74     44 FE 9F AD |  if_e	jmp	#LR__3410
1fd78                 | LR__3420
1fd78     00 22 0E F2 | 	cmp	local03, #0 wz
1fd7c     18 1E 06 51 |  if_ne	add	local01, #24
1fd80     0F 01 68 5C |  if_ne	wrlong	#0, local01
1fd84                 | ' 	return res;
1fd84     11 FB 01 F6 | 	mov	result1, local03
1fd88     A7 F0 03 F6 | 	mov	ptra, fp
1fd8c     B2 00 A0 FD | 	call	#popregs_
1fd90                 | _fatfs_cc_dir_read_ret
1fd90     2D 00 64 FD | 	ret
1fd94                 | 
1fd94                 | _fatfs_cc_dir_find
1fd94     0B 4A 05 F6 | 	mov	COUNT_, #11
1fd98     A8 00 A0 FD | 	call	#pushregs_
1fd9c     09 1F 02 F6 | 	mov	local01, arg01
1fda0     0F 21 02 FB | 	rdlong	local02, local01
1fda4     0F 13 02 F6 | 	mov	arg01, local01
1fda8     00 14 06 F6 | 	mov	arg02, #0
1fdac     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
1fdb0     00 FA 0D F2 | 	cmp	result1, #0 wz
1fdb4     18 02 90 5D |  if_ne	jmp	#LR__3442
1fdb8     FF 22 06 F6 | 	mov	local03, #255
1fdbc     FF 24 06 F6 | 	mov	local04, #255
1fdc0     2C 1E 06 F1 | 	add	local01, #44
1fdc4     FF FF FF FF 
1fdc8     0F FF 6B FC | 	wrlong	##-1, local01
1fdcc     2C 1E 86 F1 | 	sub	local01, #44
1fdd0                 | ' #line 2404 "ff.c"
1fdd0                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
1fdd0                 | ' 
1fdd0                 | ' 	do {
1fdd0                 | LR__3430
1fdd0     18 1E 06 F1 | 	add	local01, #24
1fdd4     0F 15 02 FB | 	rdlong	arg02, local01
1fdd8     18 1E 86 F1 | 	sub	local01, #24
1fddc     10 13 02 F6 | 	mov	arg01, local02
1fde0     A8 EB BF FD | 	call	#_fatfs_cc_move_window
1fde4     FD 26 0A F6 | 	mov	local05, result1 wz
1fde8     E0 01 90 5D |  if_ne	jmp	#LR__3441
1fdec     1C 1E 06 F1 | 	add	local01, #28
1fdf0     0F 17 02 FB | 	rdlong	arg03, local01
1fdf4     1C 1E 86 F1 | 	sub	local01, #28
1fdf8     0B 29 C2 FA | 	rdbyte	local06, arg03
1fdfc     14 17 02 F6 | 	mov	arg03, local06
1fe00     07 16 4E F7 | 	zerox	arg03, #7 wz
1fe04     04 26 06 A6 |  if_e	mov	local05, #4
1fe08     C0 01 90 AD |  if_e	jmp	#LR__3441
1fe0c     1C 1E 06 F1 | 	add	local01, #28
1fe10     0F 2B 02 FB | 	rdlong	local07, local01
1fe14     15 17 02 F6 | 	mov	arg03, local07
1fe18     0B 16 06 F1 | 	add	arg03, #11
1fe1c     0B 2D C2 FA | 	rdbyte	local08, arg03
1fe20     3F 2C 06 F5 | 	and	local08, #63
1fe24     16 1E 86 F1 | 	sub	local01, #22
1fe28     0F 2D 42 FC | 	wrbyte	local08, local01
1fe2c     06 1E 86 F1 | 	sub	local01, #6
1fe30     14 17 E2 F8 | 	getbyte	arg03, local06, #0
1fe34     E5 16 0E F2 | 	cmp	arg03, #229 wz
1fe38     18 00 90 AD |  if_e	jmp	#LR__3431
1fe3c     16 17 E2 F8 | 	getbyte	arg03, local08, #0
1fe40     08 16 CE F7 | 	test	arg03, #8 wz
1fe44     16 2B 02 56 |  if_ne	mov	local07, local08
1fe48     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
1fe4c     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
1fe50     18 00 90 AD |  if_e	jmp	#LR__3432
1fe54                 | LR__3431
1fe54     FF 24 06 F6 | 	mov	local04, #255
1fe58     2C 1E 06 F1 | 	add	local01, #44
1fe5c     FF FF FF FF 
1fe60     0F FF 6B FC | 	wrlong	##-1, local01
1fe64     2C 1E 86 F1 | 	sub	local01, #44
1fe68     4C 01 90 FD | 	jmp	#LR__3440
1fe6c                 | LR__3432
1fe6c     16 2D E2 F8 | 	getbyte	local08, local08, #0
1fe70     0F 2C 0E F2 | 	cmp	local08, #15 wz
1fe74     C8 00 90 5D |  if_ne	jmp	#LR__3436
1fe78     2B 1E 06 F1 | 	add	local01, #43
1fe7c     0F 2D C2 FA | 	rdbyte	local08, local01
1fe80     2B 1E 86 F1 | 	sub	local01, #43
1fe84     40 2C CE F7 | 	test	local08, #64 wz
1fe88     2C 01 90 5D |  if_ne	jmp	#LR__3439
1fe8c     14 2F E2 F8 | 	getbyte	local09, local06, #0
1fe90     40 2E CE F7 | 	test	local09, #64 wz
1fe94     30 00 90 AD |  if_e	jmp	#LR__3433
1fe98     1C 1E 06 F1 | 	add	local01, #28
1fe9c     0F 2F 02 FB | 	rdlong	local09, local01
1fea0     0D 2E 06 F1 | 	add	local09, #13
1fea4     17 23 C2 FA | 	rdbyte	local03, local09
1fea8     14 29 E2 F8 | 	getbyte	local06, local06, #0
1feac     BF 28 06 F5 | 	and	local06, #191
1feb0     14 25 02 F6 | 	mov	local04, local06
1feb4     0C 1E 86 F1 | 	sub	local01, #12
1feb8     0F 2F 02 FB | 	rdlong	local09, local01
1febc     1C 1E 06 F1 | 	add	local01, #28
1fec0     0F 2F 62 FC | 	wrlong	local09, local01
1fec4     2C 1E 86 F1 | 	sub	local01, #44
1fec8                 | LR__3433
1fec8     14 31 E2 F8 | 	getbyte	local10, local06, #0
1fecc     12 2B E2 F8 | 	getbyte	local07, local04, #0
1fed0     15 31 0A F2 | 	cmp	local10, local07 wz
1fed4     5C 00 90 5D |  if_ne	jmp	#LR__3434
1fed8     11 2D E2 F8 | 	getbyte	local08, local03, #0
1fedc     1C 1E 06 F1 | 	add	local01, #28
1fee0     0F 2B 02 FB | 	rdlong	local07, local01
1fee4     1C 1E 86 F1 | 	sub	local01, #28
1fee8     0D 2A 06 F1 | 	add	local07, #13
1feec     15 29 C2 FA | 	rdbyte	local06, local07
1fef0     14 2B E2 F8 | 	getbyte	local07, local06, #0
1fef4     15 2D 0A F2 | 	cmp	local08, local07 wz
1fef8     38 00 90 5D |  if_ne	jmp	#LR__3434
1fefc     0C 20 06 F1 | 	add	local02, #12
1ff00     10 13 02 FB | 	rdlong	arg01, local02
1ff04     0C 20 86 F1 | 	sub	local02, #12
1ff08     1C 1E 06 F1 | 	add	local01, #28
1ff0c     0F 33 02 FB | 	rdlong	local11, local01
1ff10     1C 1E 86 F1 | 	sub	local01, #28
1ff14     19 15 02 F6 | 	mov	arg02, local11
1ff18     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
1ff1c     00 FA 4D F2 | 	cmps	result1, #0 wz
1ff20     12 33 02 56 |  if_ne	mov	local11, local04
1ff24     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
1ff28     01 32 86 51 |  if_ne	sub	local11, #1
1ff2c     19 2F 02 56 |  if_ne	mov	local09, local11
1ff30     04 00 90 5D |  if_ne	jmp	#LR__3435
1ff34                 | LR__3434
1ff34     FF 2E 06 F6 | 	mov	local09, #255
1ff38                 | LR__3435
1ff38     17 25 02 F6 | 	mov	local04, local09
1ff3c     78 00 90 FD | 	jmp	#LR__3439
1ff40                 | LR__3436
1ff40     12 2F 02 F6 | 	mov	local09, local04
1ff44     07 2E 4E F7 | 	zerox	local09, #7 wz
1ff48     20 00 90 5D |  if_ne	jmp	#LR__3437
1ff4c     11 31 E2 F8 | 	getbyte	local10, local03, #0
1ff50     1C 1E 06 F1 | 	add	local01, #28
1ff54     0F 13 02 FB | 	rdlong	arg01, local01
1ff58     1C 1E 86 F1 | 	sub	local01, #28
1ff5c     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
1ff60     FD FA E1 F8 | 	getbyte	result1, result1, #0
1ff64     FD 30 0A F2 | 	cmp	local10, result1 wz
1ff68     60 00 90 AD |  if_e	jmp	#LR__3441
1ff6c                 | LR__3437
1ff6c     2B 1E 06 F1 | 	add	local01, #43
1ff70     0F 2F C2 FA | 	rdbyte	local09, local01
1ff74     2B 1E 86 F1 | 	sub	local01, #43
1ff78     01 2E CE F7 | 	test	local09, #1 wz
1ff7c     24 00 90 5D |  if_ne	jmp	#LR__3438
1ff80     1C 1E 06 F1 | 	add	local01, #28
1ff84     0F 13 02 FB | 	rdlong	arg01, local01
1ff88     04 1E 06 F1 | 	add	local01, #4
1ff8c     0F 15 02 F6 | 	mov	arg02, local01
1ff90     20 1E 86 F1 | 	sub	local01, #32
1ff94     0B 16 06 F6 | 	mov	arg03, #11
1ff98     88 DA BF FD | 	call	#_fatfs_cc_memcmp
1ff9c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ffa0     28 00 90 AD |  if_e	jmp	#LR__3441
1ffa4                 | LR__3438
1ffa4     FF 24 06 F6 | 	mov	local04, #255
1ffa8     2C 1E 06 F1 | 	add	local01, #44
1ffac     FF FF FF FF 
1ffb0     0F FF 6B FC | 	wrlong	##-1, local01
1ffb4     2C 1E 86 F1 | 	sub	local01, #44
1ffb8                 | LR__3439
1ffb8                 | LR__3440
1ffb8     0F 13 02 F6 | 	mov	arg01, local01
1ffbc     00 14 06 F6 | 	mov	arg02, #0
1ffc0     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
1ffc4     FD 26 0A F6 | 	mov	local05, result1 wz
1ffc8     04 FE 9F AD |  if_e	jmp	#LR__3430
1ffcc                 | LR__3441
1ffcc                 | ' 
1ffcc                 | ' 	return res;
1ffcc     13 FB 01 F6 | 	mov	result1, local05
1ffd0                 | LR__3442
1ffd0     A7 F0 03 F6 | 	mov	ptra, fp
1ffd4     B2 00 A0 FD | 	call	#popregs_
1ffd8                 | _fatfs_cc_dir_find_ret
1ffd8     2D 00 64 FD | 	ret
1ffdc                 | 
1ffdc                 | _fatfs_cc_dir_register
1ffdc     0A 4A 05 F6 | 	mov	COUNT_, #10
1ffe0     A8 00 A0 FD | 	call	#pushregs_
1ffe4     2C F0 07 F1 | 	add	ptra, #44
1ffe8     04 4E 05 F1 | 	add	fp, #4
1ffec     A7 12 62 FC | 	wrlong	arg01, fp
1fff0     09 1F 02 FB | 	rdlong	local01, arg01
1fff4     08 4E 05 F1 | 	add	fp, #8
1fff8     A7 1E 62 FC | 	wrlong	local01, fp
1fffc     08 4E 85 F1 | 	sub	fp, #8
20000     A7 20 02 FB | 	rdlong	local02, fp
20004     04 4E 85 F1 | 	sub	fp, #4
20008     2B 20 06 F1 | 	add	local02, #43
2000c     10 21 C2 FA | 	rdbyte	local02, local02
20010     A0 20 CE F7 | 	test	local02, #160 wz
20014     06 FA 05 56 |  if_ne	mov	result1, #6
20018     F8 03 90 5D |  if_ne	jmp	#LR__3465
2001c                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2001c     14 4E 05 F1 | 	add	fp, #20
20020     A7 00 68 FC | 	wrlong	#0, fp
20024     14 4E 85 F1 | 	sub	fp, #20
20028     97 28 48 FB | 	callpa	#(@LR__3451-@LR__3450)>>2,fcache_load_ptr_
2002c                 | LR__3450
2002c     0C 4E 05 F1 | 	add	fp, #12
20030     A7 20 02 FB | 	rdlong	local02, fp
20034     0C 20 06 F1 | 	add	local02, #12
20038     10 23 02 FB | 	rdlong	local03, local02
2003c     08 4E 05 F1 | 	add	fp, #8
20040     A7 24 02 FB | 	rdlong	local04, fp
20044     14 4E 85 F1 | 	sub	fp, #20
20048     01 24 66 F0 | 	shl	local04, #1
2004c     11 25 02 F1 | 	add	local04, local03
20050     12 21 EA FA | 	rdword	local02, local04 wz
20054     24 00 90 AD |  if_e	jmp	#LR__3452
20058     14 4E 05 F1 | 	add	fp, #20
2005c     A7 26 02 FB | 	rdlong	local05, fp
20060     13 29 02 F6 | 	mov	local06, local05
20064     13 2B 02 F6 | 	mov	local07, local05
20068     15 2D 02 F6 | 	mov	local08, local07
2006c     01 2C 06 F1 | 	add	local08, #1
20070     A7 2C 62 FC | 	wrlong	local08, fp
20074     14 4E 85 F1 | 	sub	fp, #20
20078     B0 FF 9F FD | 	jmp	#LR__3450
2007c                 | LR__3451
2007c                 | LR__3452
2007c     1C 4E 05 F1 | 	add	fp, #28
20080     A7 12 02 F6 | 	mov	arg01, fp
20084     18 4E 85 F1 | 	sub	fp, #24
20088     A7 14 02 FB | 	rdlong	arg02, fp
2008c     04 4E 85 F1 | 	sub	fp, #4
20090     20 14 06 F1 | 	add	arg02, #32
20094     0C 16 06 F6 | 	mov	arg03, #12
20098     DC 76 BF FD | 	call	#__system____builtin_memmove
2009c     27 4E 05 F1 | 	add	fp, #39
200a0     A7 2E C2 FA | 	rdbyte	local09, fp
200a4     27 4E 85 F1 | 	sub	fp, #39
200a8     01 2E CE F7 | 	test	local09, #1 wz
200ac     F4 00 90 AD |  if_e	jmp	#LR__3455
200b0     04 4E 05 F1 | 	add	fp, #4
200b4     A7 30 02 FB | 	rdlong	local10, fp
200b8     2B 30 06 F1 | 	add	local10, #43
200bc     18 81 48 FC | 	wrbyte	#64, local10
200c0                 | ' 		dp->fn[ 11 ] =  0x40 ;
200c0                 | ' 		for (n = 1; n < 100; n++) {
200c0     0C 4E 05 F1 | 	add	fp, #12
200c4     A7 02 68 FC | 	wrlong	#1, fp
200c8     10 4E 85 F1 | 	sub	fp, #16
200cc                 | LR__3453
200cc     10 4E 05 F1 | 	add	fp, #16
200d0     A7 20 02 FB | 	rdlong	local02, fp
200d4     10 4E 85 F1 | 	sub	fp, #16
200d8     64 20 16 F2 | 	cmp	local02, #100 wc
200dc     70 00 90 3D |  if_ae	jmp	#LR__3454
200e0     04 4E 05 F1 | 	add	fp, #4
200e4     A7 12 02 FB | 	rdlong	arg01, fp
200e8     20 12 06 F1 | 	add	arg01, #32
200ec     18 4E 05 F1 | 	add	fp, #24
200f0     A7 14 02 F6 | 	mov	arg02, fp
200f4     10 4E 85 F1 | 	sub	fp, #16
200f8     A7 30 02 FB | 	rdlong	local10, fp
200fc     0C 30 06 F1 | 	add	local10, #12
20100     18 17 02 FB | 	rdlong	arg03, local10
20104     04 4E 05 F1 | 	add	fp, #4
20108     A7 18 02 FB | 	rdlong	arg04, fp
2010c     10 4E 85 F1 | 	sub	fp, #16
20110     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
20114     04 4E 05 F1 | 	add	fp, #4
20118     A7 12 02 FB | 	rdlong	arg01, fp
2011c     04 4E 85 F1 | 	sub	fp, #4
20120     70 FC BF FD | 	call	#_fatfs_cc_dir_find
20124     08 4E 05 F1 | 	add	fp, #8
20128     A7 FA 61 FC | 	wrlong	result1, fp
2012c     00 FA 4D F2 | 	cmps	result1, #0 wz
20130     08 4E 85 F1 | 	sub	fp, #8
20134     18 00 90 5D |  if_ne	jmp	#LR__3454
20138     10 4E 05 F1 | 	add	fp, #16
2013c     A7 30 02 FB | 	rdlong	local10, fp
20140     01 30 06 F1 | 	add	local10, #1
20144     A7 30 62 FC | 	wrlong	local10, fp
20148     10 4E 85 F1 | 	sub	fp, #16
2014c     7C FF 9F FD | 	jmp	#LR__3453
20150                 | LR__3454
20150     10 4E 05 F1 | 	add	fp, #16
20154     A7 30 02 FB | 	rdlong	local10, fp
20158     10 4E 85 F1 | 	sub	fp, #16
2015c     64 30 0E F2 | 	cmp	local10, #100 wz
20160     07 FA 05 A6 |  if_e	mov	result1, #7
20164     AC 02 90 AD |  if_e	jmp	#LR__3465
20168     08 4E 05 F1 | 	add	fp, #8
2016c     A7 30 02 FB | 	rdlong	local10, fp
20170     08 4E 85 F1 | 	sub	fp, #8
20174     04 30 0E F2 | 	cmp	local10, #4 wz
20178     08 4E 05 51 |  if_ne	add	fp, #8
2017c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
20180     08 4E 85 51 |  if_ne	sub	fp, #8
20184     8C 02 90 5D |  if_ne	jmp	#LR__3465
20188     04 4E 05 F1 | 	add	fp, #4
2018c     A7 30 02 FB | 	rdlong	local10, fp
20190     23 4E 05 F1 | 	add	fp, #35
20194     A7 1E C2 FA | 	rdbyte	local01, fp
20198     27 4E 85 F1 | 	sub	fp, #39
2019c     2B 30 06 F1 | 	add	local10, #43
201a0     18 1F 42 FC | 	wrbyte	local01, local10
201a4                 | LR__3455
201a4     27 4E 05 F1 | 	add	fp, #39
201a8     A7 20 C2 FA | 	rdbyte	local02, fp
201ac     27 4E 85 F1 | 	sub	fp, #39
201b0     02 20 CE F7 | 	test	local02, #2 wz
201b4     20 00 90 AD |  if_e	jmp	#LR__3456
201b8     14 4E 05 F1 | 	add	fp, #20
201bc     A7 30 02 FB | 	rdlong	local10, fp
201c0     0C 30 06 F1 | 	add	local10, #12
201c4     0D 30 16 FD | 	qdiv	local10, #13
201c8     14 4E 85 F1 | 	sub	fp, #20
201cc     18 30 62 FD | 	getqx	local10
201d0     01 30 06 F1 | 	add	local10, #1
201d4     04 00 90 FD | 	jmp	#LR__3457
201d8                 | LR__3456
201d8     01 30 06 F6 | 	mov	local10, #1
201dc                 | LR__3457
201dc     18 4E 05 F1 | 	add	fp, #24
201e0     A7 30 62 FC | 	wrlong	local10, fp
201e4     14 4E 85 F1 | 	sub	fp, #20
201e8     A7 12 02 FB | 	rdlong	arg01, fp
201ec     18 15 02 F6 | 	mov	arg02, local10
201f0     04 4E 85 F1 | 	sub	fp, #4
201f4     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
201f8     08 4E 05 F1 | 	add	fp, #8
201fc     A7 FA 61 FC | 	wrlong	result1, fp
20200     08 4E 85 F1 | 	sub	fp, #8
20204     00 FA 0D F2 | 	cmp	result1, #0 wz
20208     38 01 90 5D |  if_ne	jmp	#LR__3462
2020c     18 4E 05 F1 | 	add	fp, #24
20210     A7 30 02 FB | 	rdlong	local10, fp
20214     01 30 8E F1 | 	sub	local10, #1 wz
20218     A7 30 62 FC | 	wrlong	local10, fp
2021c     18 4E 85 F1 | 	sub	fp, #24
20220     20 01 90 AD |  if_e	jmp	#LR__3462
20224     04 4E 05 F1 | 	add	fp, #4
20228     A7 30 02 FB | 	rdlong	local10, fp
2022c     18 13 02 F6 | 	mov	arg01, local10
20230     14 4E 05 F1 | 	add	fp, #20
20234     A7 18 02 FB | 	rdlong	arg04, fp
20238     18 4E 85 F1 | 	sub	fp, #24
2023c     05 18 66 F0 | 	shl	arg04, #5
20240     10 30 06 F1 | 	add	local10, #16
20244     18 15 02 FB | 	rdlong	arg02, local10
20248     0C 15 82 F1 | 	sub	arg02, arg04
2024c     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
20250     08 4E 05 F1 | 	add	fp, #8
20254     A7 FA 61 FC | 	wrlong	result1, fp
20258     08 4E 85 F1 | 	sub	fp, #8
2025c     00 FA 0D F2 | 	cmp	result1, #0 wz
20260     E0 00 90 5D |  if_ne	jmp	#LR__3461
20264     04 4E 05 F1 | 	add	fp, #4
20268     A7 12 02 FB | 	rdlong	arg01, fp
2026c     04 4E 85 F1 | 	sub	fp, #4
20270     20 12 06 F1 | 	add	arg01, #32
20274     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
20278     FD 30 02 F6 | 	mov	local10, result1
2027c     28 4E 05 F1 | 	add	fp, #40
20280     A7 30 42 FC | 	wrbyte	local10, fp
20284     28 4E 85 F1 | 	sub	fp, #40
20288                 | ' 			sum = sum_sfn(dp->fn);
20288                 | ' 			do {
20288                 | LR__3458
20288     0C 4E 05 F1 | 	add	fp, #12
2028c     A7 12 02 FB | 	rdlong	arg01, fp
20290     08 4E 85 F1 | 	sub	fp, #8
20294     A7 1E 02 FB | 	rdlong	local01, fp
20298     04 4E 85 F1 | 	sub	fp, #4
2029c     18 1E 06 F1 | 	add	local01, #24
202a0     0F 15 02 FB | 	rdlong	arg02, local01
202a4     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
202a8     08 4E 05 F1 | 	add	fp, #8
202ac     A7 FA 61 FC | 	wrlong	result1, fp
202b0     00 FA 4D F2 | 	cmps	result1, #0 wz
202b4     08 4E 85 F1 | 	sub	fp, #8
202b8     88 00 90 5D |  if_ne	jmp	#LR__3460
202bc     0C 4E 05 F1 | 	add	fp, #12
202c0     A7 20 02 FB | 	rdlong	local02, fp
202c4     0C 20 06 F1 | 	add	local02, #12
202c8     10 13 02 FB | 	rdlong	arg01, local02
202cc     08 4E 85 F1 | 	sub	fp, #8
202d0     A7 1E 02 FB | 	rdlong	local01, fp
202d4     1C 1E 06 F1 | 	add	local01, #28
202d8     0F 15 02 FB | 	rdlong	arg02, local01
202dc     14 4E 05 F1 | 	add	fp, #20
202e0     A7 16 02 FB | 	rdlong	arg03, fp
202e4     10 4E 05 F1 | 	add	fp, #16
202e8     A7 18 C2 FA | 	rdbyte	arg04, fp
202ec     28 4E 85 F1 | 	sub	fp, #40
202f0     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
202f4     0C 4E 05 F1 | 	add	fp, #12
202f8     A7 30 02 FB | 	rdlong	local10, fp
202fc     03 30 06 F1 | 	add	local10, #3
20300     18 03 48 FC | 	wrbyte	#1, local10
20304     08 4E 85 F1 | 	sub	fp, #8
20308     A7 12 02 FB | 	rdlong	arg01, fp
2030c     04 4E 85 F1 | 	sub	fp, #4
20310     00 14 06 F6 | 	mov	arg02, #0
20314     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
20318     08 4E 05 F1 | 	add	fp, #8
2031c     A7 FA 61 FC | 	wrlong	result1, fp
20320     00 FA 4D F2 | 	cmps	result1, #0 wz
20324     08 4E 85 F1 | 	sub	fp, #8
20328     18 00 90 5D |  if_ne	jmp	#LR__3459
2032c     18 4E 05 F1 | 	add	fp, #24
20330     A7 30 02 FB | 	rdlong	local10, fp
20334     01 30 8E F1 | 	sub	local10, #1 wz
20338     A7 30 62 FC | 	wrlong	local10, fp
2033c     18 4E 85 F1 | 	sub	fp, #24
20340     44 FF 9F 5D |  if_ne	jmp	#LR__3458
20344                 | LR__3459
20344                 | LR__3460
20344                 | LR__3461
20344                 | LR__3462
20344     08 4E 05 F1 | 	add	fp, #8
20348     A7 30 0A FB | 	rdlong	local10, fp wz
2034c     08 4E 85 F1 | 	sub	fp, #8
20350     B4 00 90 5D |  if_ne	jmp	#LR__3464
20354     0C 4E 05 F1 | 	add	fp, #12
20358     A7 12 02 FB | 	rdlong	arg01, fp
2035c     08 4E 85 F1 | 	sub	fp, #8
20360     A7 1E 02 FB | 	rdlong	local01, fp
20364     04 4E 85 F1 | 	sub	fp, #4
20368     18 1E 06 F1 | 	add	local01, #24
2036c     0F 15 02 FB | 	rdlong	arg02, local01
20370     18 E6 BF FD | 	call	#_fatfs_cc_move_window
20374     08 4E 05 F1 | 	add	fp, #8
20378     A7 FA 61 FC | 	wrlong	result1, fp
2037c     08 4E 85 F1 | 	sub	fp, #8
20380     00 FA 0D F2 | 	cmp	result1, #0 wz
20384     80 00 90 5D |  if_ne	jmp	#LR__3463
20388     04 4E 05 F1 | 	add	fp, #4
2038c     A7 20 02 FB | 	rdlong	local02, fp
20390     04 4E 85 F1 | 	sub	fp, #4
20394     1C 20 06 F1 | 	add	local02, #28
20398     10 13 02 FB | 	rdlong	arg01, local02
2039c     00 14 06 F6 | 	mov	arg02, #0
203a0     20 16 06 F6 | 	mov	arg03, #32
203a4     98 00 A0 FD | 	call	#\builtin_bytefill_
203a8     04 4E 05 F1 | 	add	fp, #4
203ac     A7 14 02 FB | 	rdlong	arg02, fp
203b0     0A 1F 02 F6 | 	mov	local01, arg02
203b4     1C 1E 06 F1 | 	add	local01, #28
203b8     0F 13 02 FB | 	rdlong	arg01, local01
203bc     04 4E 85 F1 | 	sub	fp, #4
203c0     20 14 06 F1 | 	add	arg02, #32
203c4     0B 16 06 F6 | 	mov	arg03, #11
203c8     AC 73 BF FD | 	call	#__system____builtin_memmove
203cc     04 4E 05 F1 | 	add	fp, #4
203d0     A7 2E 02 FB | 	rdlong	local09, fp
203d4     17 31 02 F6 | 	mov	local10, local09
203d8     1C 30 06 F1 | 	add	local10, #28
203dc     18 1F 02 FB | 	rdlong	local01, local10
203e0     2B 2E 06 F1 | 	add	local09, #43
203e4     17 31 C2 FA | 	rdbyte	local10, local09
203e8     18 30 06 F5 | 	and	local10, #24
203ec     0C 1E 06 F1 | 	add	local01, #12
203f0     0F 31 42 FC | 	wrbyte	local10, local01
203f4     08 4E 05 F1 | 	add	fp, #8
203f8     A7 30 02 FB | 	rdlong	local10, fp
203fc     0C 4E 85 F1 | 	sub	fp, #12
20400     03 30 06 F1 | 	add	local10, #3
20404     18 03 48 FC | 	wrbyte	#1, local10
20408                 | LR__3463
20408                 | LR__3464
20408                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
20408                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
20408                 | ' 
20408                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
20408                 | ' 
20408                 | ' 			fs->wflag = 1;
20408                 | ' 		}
20408                 | ' 	}
20408                 | ' 
20408                 | ' 	return res;
20408     08 4E 05 F1 | 	add	fp, #8
2040c     A7 FA 01 FB | 	rdlong	result1, fp
20410     08 4E 85 F1 | 	sub	fp, #8
20414                 | LR__3465
20414     A7 F0 03 F6 | 	mov	ptra, fp
20418     B2 00 A0 FD | 	call	#popregs_
2041c                 | _fatfs_cc_dir_register_ret
2041c     2D 00 64 FD | 	ret
20420                 | 
20420                 | _fatfs_cc_dir_remove
20420     05 4A 05 F6 | 	mov	COUNT_, #5
20424     A8 00 A0 FD | 	call	#pushregs_
20428     09 1F 02 F6 | 	mov	local01, arg01
2042c     0F 21 02 FB | 	rdlong	local02, local01
20430     10 1E 06 F1 | 	add	local01, #16
20434     0F 23 02 FB | 	rdlong	local03, local01
20438     1C 1E 06 F1 | 	add	local01, #28
2043c     0F 15 02 FB | 	rdlong	arg02, local01
20440     2C 1E 86 F1 | 	sub	local01, #44
20444     FF FF 7F FF 
20448     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2044c     00 24 06 A6 |  if_e	mov	local04, #0
20450     18 00 90 AD |  if_e	jmp	#LR__3470
20454     0F 13 02 F6 | 	mov	arg01, local01
20458     2C 1E 06 F1 | 	add	local01, #44
2045c     0F 15 02 FB | 	rdlong	arg02, local01
20460     2C 1E 86 F1 | 	sub	local01, #44
20464     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
20468     FD 24 02 F6 | 	mov	local04, result1
2046c                 | LR__3470
2046c     12 27 0A F6 | 	mov	local05, local04 wz
20470     64 00 90 5D |  if_ne	jmp	#LR__3473
20474                 | ' 		do {
20474                 | LR__3471
20474     18 1E 06 F1 | 	add	local01, #24
20478     0F 15 02 FB | 	rdlong	arg02, local01
2047c     18 1E 86 F1 | 	sub	local01, #24
20480     10 13 02 F6 | 	mov	arg01, local02
20484     04 E5 BF FD | 	call	#_fatfs_cc_move_window
20488     FD 26 0A F6 | 	mov	local05, result1 wz
2048c     40 00 90 5D |  if_ne	jmp	#LR__3472
20490     1C 1E 06 F1 | 	add	local01, #28
20494     0F 25 02 FB | 	rdlong	local04, local01
20498     12 CB 49 FC | 	wrbyte	#229, local04
2049c     03 20 06 F1 | 	add	local02, #3
204a0     10 03 48 FC | 	wrbyte	#1, local02
204a4     03 20 86 F1 | 	sub	local02, #3
204a8     0C 1E 86 F1 | 	sub	local01, #12
204ac     0F 25 02 FB | 	rdlong	local04, local01
204b0     10 1E 86 F1 | 	sub	local01, #16
204b4     11 25 12 F2 | 	cmp	local04, local03 wc
204b8     14 00 90 3D |  if_ae	jmp	#LR__3472
204bc     0F 13 02 F6 | 	mov	arg01, local01
204c0     00 14 06 F6 | 	mov	arg02, #0
204c4     90 EF BF FD | 	call	#_fatfs_cc_dir_next
204c8     FD 26 0A F6 | 	mov	local05, result1 wz
204cc     A4 FF 9F AD |  if_e	jmp	#LR__3471
204d0                 | LR__3472
204d0     04 26 0E F2 | 	cmp	local05, #4 wz
204d4     02 26 06 A6 |  if_e	mov	local05, #2
204d8                 | LR__3473
204d8                 | ' 	}
204d8                 | ' #line 2590 "ff.c"
204d8                 | ' 	return res;
204d8     13 FB 01 F6 | 	mov	result1, local05
204dc     A7 F0 03 F6 | 	mov	ptra, fp
204e0     B2 00 A0 FD | 	call	#popregs_
204e4                 | _fatfs_cc_dir_remove_ret
204e4     2D 00 64 FD | 	ret
204e8                 | 
204e8                 | _fatfs_cc_get_fileinfo
204e8     0F 4A 05 F6 | 	mov	COUNT_, #15
204ec     A8 00 A0 FD | 	call	#pushregs_
204f0     09 1F 02 F6 | 	mov	local01, arg01
204f4     0A 21 02 F6 | 	mov	local02, arg02
204f8     0F 23 02 FB | 	rdlong	local03, local01
204fc     1C 20 06 F1 | 	add	local02, #28
20500     10 01 48 FC | 	wrbyte	#0, local02
20504     1C 20 86 F1 | 	sub	local02, #28
20508     18 1E 06 F1 | 	add	local01, #24
2050c     0F 25 0A FB | 	rdlong	local04, local01 wz
20510     18 1E 86 F1 | 	sub	local01, #24
20514     90 03 90 AD |  if_e	jmp	#LR__3494
20518     2C 1E 06 F1 | 	add	local01, #44
2051c     0F 25 02 FB | 	rdlong	local04, local01
20520     2C 1E 86 F1 | 	sub	local01, #44
20524     FF FF 7F FF 
20528     FF 25 0E F2 | 	cmp	local04, ##-1 wz
2052c     D8 00 90 AD |  if_e	jmp	#LR__3483
20530     00 26 06 F6 | 	mov	local05, #0
20534     00 28 06 F6 | 	mov	local06, #0
20538     00 2A 06 F6 | 	mov	local07, #0
2053c                 | ' 			si = di = 0;
2053c                 | ' 			hs = 0;
2053c                 | ' 			while (fs->lfnbuf[si] != 0) {
2053c                 | LR__3480
2053c     0C 22 06 F1 | 	add	local03, #12
20540     11 25 02 FB | 	rdlong	local04, local03
20544     0C 22 86 F1 | 	sub	local03, #12
20548     14 2D 02 F6 | 	mov	local08, local06
2054c     01 2C 66 F0 | 	shl	local08, #1
20550     12 2D 02 F1 | 	add	local08, local04
20554     16 25 EA FA | 	rdword	local04, local08 wz
20558     90 00 90 AD |  if_e	jmp	#LR__3482
2055c     0C 22 06 F1 | 	add	local03, #12
20560     11 2F 02 FB | 	rdlong	local09, local03
20564     0C 22 86 F1 | 	sub	local03, #12
20568     14 31 02 F6 | 	mov	local10, local06
2056c     01 30 66 F0 | 	shl	local10, #1
20570     17 31 02 F1 | 	add	local10, local09
20574     18 33 E2 FA | 	rdword	local11, local10
20578     15 25 02 F6 | 	mov	local04, local07
2057c     0F 24 4E F7 | 	zerox	local04, #15 wz
20580     01 28 06 F1 | 	add	local06, #1
20584     24 00 90 5D |  if_ne	jmp	#LR__3481
20588     19 35 32 F9 | 	getword	local12, local11, #0
2058c     6C 00 00 FF 
20590     00 34 16 F2 | 	cmp	local12, ##55296 wc
20594     14 00 90 CD |  if_b	jmp	#LR__3481
20598     19 37 32 F9 | 	getword	local13, local11, #0
2059c     70 00 00 FF 
205a0     00 36 16 F2 | 	cmp	local13, ##57344 wc
205a4     19 2B 02 C6 |  if_b	mov	local07, local11
205a8                 | ' 					hs = wc; continue;
205a8     90 FF 9F CD |  if_b	jmp	#LR__3480
205ac                 | LR__3481
205ac     15 13 32 F9 | 	getword	arg01, local07, #0
205b0     10 12 66 F0 | 	shl	arg01, #16
205b4     19 33 32 F9 | 	getword	local11, local11, #0
205b8     19 13 42 F5 | 	or	arg01, local11
205bc     13 15 02 F6 | 	mov	arg02, local05
205c0     1C 20 06 F1 | 	add	local02, #28
205c4     10 15 02 F1 | 	add	arg02, local02
205c8     FF 16 06 F6 | 	mov	arg03, #255
205cc     13 17 82 F1 | 	sub	arg03, local05
205d0     1C 20 86 F1 | 	sub	local02, #28
205d4     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
205d8     FD 38 0A F6 | 	mov	local14, result1 wz
205dc     00 26 06 A6 |  if_e	mov	local05, #0
205e0     1C 27 02 51 |  if_ne	add	local05, local14
205e4     00 2A 06 56 |  if_ne	mov	local07, #0
205e8     50 FF 9F 5D |  if_ne	jmp	#LR__3480
205ec                 | LR__3482
205ec     15 25 02 F6 | 	mov	local04, local07
205f0     0F 24 4E F7 | 	zerox	local04, #15 wz
205f4     00 26 06 56 |  if_ne	mov	local05, #0
205f8     1C 20 06 F1 | 	add	local02, #28
205fc     10 27 02 F1 | 	add	local05, local02
20600     13 01 48 FC | 	wrbyte	#0, local05
20604     1C 20 86 F1 | 	sub	local02, #28
20608                 | LR__3483
20608     00 26 06 F6 | 	mov	local05, #0
2060c     00 28 06 F6 | 	mov	local06, #0
20610                 | ' 			fno->fname[di] = 0;
20610                 | ' 		}
20610                 | ' 	}
20610                 | ' 
20610                 | ' 	si = di = 0;
20610                 | ' 	while (si < 11) {
20610                 | LR__3484
20610     0B 28 16 F2 | 	cmp	local06, #11 wc
20614     20 01 90 3D |  if_ae	jmp	#LR__3487
20618     1C 1E 06 F1 | 	add	local01, #28
2061c     0F 2F 02 FB | 	rdlong	local09, local01
20620     1C 1E 86 F1 | 	sub	local01, #28
20624     14 31 02 F6 | 	mov	local10, local06
20628     17 31 02 F1 | 	add	local10, local09
2062c     18 33 C2 FA | 	rdbyte	local11, local10
20630     19 25 32 F9 | 	getword	local04, local11, #0
20634     20 24 0E F2 | 	cmp	local04, #32 wz
20638     01 28 06 F1 | 	add	local06, #1
2063c     D0 FF 9F AD |  if_e	jmp	#LR__3484
20640     19 25 32 F9 | 	getword	local04, local11, #0
20644     05 24 0E F2 | 	cmp	local04, #5 wz
20648     E5 32 06 A6 |  if_e	mov	local11, #229
2064c     09 28 0E F2 | 	cmp	local06, #9 wz
20650     20 00 90 5D |  if_ne	jmp	#LR__3485
20654     0C 26 16 F2 | 	cmp	local05, #12 wc
20658     18 00 90 3D |  if_ae	jmp	#LR__3485
2065c     13 37 02 F6 | 	mov	local13, local05
20660     0C 20 06 F1 | 	add	local02, #12
20664     10 37 02 F1 | 	add	local13, local02
20668     1B 5D 48 FC | 	wrbyte	#46, local13
2066c     01 26 06 F1 | 	add	local05, #1
20670     0C 20 86 F1 | 	sub	local02, #12
20674                 | LR__3485
20674     19 13 32 F9 | 	getword	arg01, local11, #0
20678     07 12 4E F7 | 	zerox	arg01, #7 wz
2067c     00 FA 05 56 |  if_ne	mov	result1, #0
20680                 | ' 
20680                 | ' 	return 0;
20680     00 FA 05 A6 |  if_e	mov	result1, #0
20684     00 FA 0D F2 | 	cmp	result1, #0 wz
20688     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
2068c     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
20690     50 00 90 AD |  if_e	jmp	#LR__3486
20694     1C 1E 06 F1 | 	add	local01, #28
20698     0F 31 02 FB | 	rdlong	local10, local01
2069c     1C 1E 86 F1 | 	sub	local01, #28
206a0     14 2D 02 F6 | 	mov	local08, local06
206a4     18 2D 02 F1 | 	add	local08, local10
206a8     16 13 CA FA | 	rdbyte	arg01, local08 wz
206ac     00 FA 05 56 |  if_ne	mov	result1, #0
206b0                 | ' 
206b0                 | ' 	return 0;
206b0     00 FA 05 A6 |  if_e	mov	result1, #0
206b4     00 FA 0D F2 | 	cmp	result1, #0 wz
206b8     28 00 90 AD |  if_e	jmp	#LR__3486
206bc     19 33 32 F9 | 	getword	local11, local11, #0
206c0     08 32 66 F0 | 	shl	local11, #8
206c4     1C 1E 06 F1 | 	add	local01, #28
206c8     0F 39 02 FB | 	rdlong	local14, local01
206cc     1C 1E 86 F1 | 	sub	local01, #28
206d0     14 2F 02 F6 | 	mov	local09, local06
206d4     1C 2F 02 F1 | 	add	local09, local14
206d8     17 35 C2 FA | 	rdbyte	local12, local09
206dc     1A 33 42 F5 | 	or	local11, local12
206e0     01 28 06 F1 | 	add	local06, #1
206e4                 | LR__3486
206e4     19 13 02 F6 | 	mov	arg01, local11
206e8     01 00 00 FF 
206ec     52 15 06 F6 | 	mov	arg02, ##850
206f0     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
206f4     FD 32 02 F6 | 	mov	local11, result1
206f8     19 25 02 F6 | 	mov	local04, local11
206fc     0F 24 4E F7 | 	zerox	local04, #15 wz
20700     00 26 06 A6 |  if_e	mov	local05, #0
20704     30 00 90 AD |  if_e	jmp	#LR__3487
20708     19 13 32 F9 | 	getword	arg01, local11, #0
2070c     13 15 02 F6 | 	mov	arg02, local05
20710     0C 20 06 F1 | 	add	local02, #12
20714     10 15 02 F1 | 	add	arg02, local02
20718     0C 16 06 F6 | 	mov	arg03, #12
2071c     13 17 82 F1 | 	sub	arg03, local05
20720     0C 20 86 F1 | 	sub	local02, #12
20724     EC DF BF FD | 	call	#_fatfs_cc_put_utf
20728     FD 38 0A F6 | 	mov	local14, result1 wz
2072c     00 26 06 A6 |  if_e	mov	local05, #0
20730     1C 27 02 51 |  if_ne	add	local05, local14
20734     D8 FE 9F 5D |  if_ne	jmp	#LR__3484
20738                 | LR__3487
20738     13 25 02 F6 | 	mov	local04, local05
2073c     0C 20 06 F1 | 	add	local02, #12
20740     10 25 02 F1 | 	add	local04, local02
20744     12 01 48 FC | 	wrbyte	#0, local04
20748     10 20 06 F1 | 	add	local02, #16
2074c     10 25 CA FA | 	rdbyte	local04, local02 wz
20750     1C 20 86 F1 | 	sub	local02, #28
20754     F8 00 90 5D |  if_ne	jmp	#LR__3493
20758     00 26 0E F2 | 	cmp	local05, #0 wz
2075c     1C 00 90 5D |  if_ne	jmp	#LR__3488
20760     13 37 02 F6 | 	mov	local13, local05
20764     1C 20 06 F1 | 	add	local02, #28
20768     10 37 02 F1 | 	add	local13, local02
2076c     1B 7F 48 FC | 	wrbyte	#63, local13
20770     01 26 06 F1 | 	add	local05, #1
20774     1C 20 86 F1 | 	sub	local02, #28
20778     A4 00 90 FD | 	jmp	#LR__3492
2077c                 | LR__3488
2077c                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2077c     00 26 06 F6 | 	mov	local05, #0
20780     00 28 06 F6 | 	mov	local06, #0
20784     08 3A 06 F6 | 	mov	local15, #8
20788                 | LR__3489
20788     14 25 02 F6 | 	mov	local04, local06
2078c     0C 20 06 F1 | 	add	local02, #12
20790     10 25 02 F1 | 	add	local04, local02
20794     12 37 CA FA | 	rdbyte	local13, local04 wz
20798     0C 20 86 F1 | 	sub	local02, #12
2079c     80 00 90 AD |  if_e	jmp	#LR__3491
207a0     14 2D 02 F6 | 	mov	local08, local06
207a4     0C 20 06 F1 | 	add	local02, #12
207a8     10 2D 02 F1 | 	add	local08, local02
207ac     16 33 C2 FA | 	rdbyte	local11, local08
207b0     19 39 32 F9 | 	getword	local14, local11, #0
207b4     2E 38 0E F2 | 	cmp	local14, #46 wz
207b8     0C 20 86 F1 | 	sub	local02, #12
207bc     10 3A 06 A6 |  if_e	mov	local15, #16
207c0     19 39 32 F9 | 	getword	local14, local11, #0
207c4     41 38 16 F2 | 	cmp	local14, #65 wc
207c8     30 00 90 CD |  if_b	jmp	#LR__3490
207cc     19 2D 32 F9 | 	getword	local08, local11, #0
207d0     5B 2C 16 F2 | 	cmp	local08, #91 wc
207d4     24 00 90 3D |  if_ae	jmp	#LR__3490
207d8     1C 1E 06 F1 | 	add	local01, #28
207dc     0F 2F 02 FB | 	rdlong	local09, local01
207e0     1C 1E 86 F1 | 	sub	local01, #28
207e4     0C 2E 06 F1 | 	add	local09, #12
207e8     17 31 C2 FA | 	rdbyte	local10, local09
207ec     1D 39 E2 F8 | 	getbyte	local14, local15, #0
207f0     1C 31 CA F7 | 	test	local10, local14 wz
207f4     19 33 32 59 |  if_ne	getword	local11, local11, #0
207f8     20 32 06 51 |  if_ne	add	local11, #32
207fc                 | LR__3490
207fc     13 39 02 F6 | 	mov	local14, local05
20800     1C 20 06 F1 | 	add	local02, #28
20804     10 39 02 F1 | 	add	local14, local02
20808     19 33 32 F9 | 	getword	local11, local11, #0
2080c     1C 33 42 FC | 	wrbyte	local11, local14
20810     01 28 06 F1 | 	add	local06, #1
20814     01 26 06 F1 | 	add	local05, #1
20818     1C 20 86 F1 | 	sub	local02, #28
2081c     68 FF 9F FD | 	jmp	#LR__3489
20820                 | LR__3491
20820                 | LR__3492
20820     1C 20 06 F1 | 	add	local02, #28
20824     10 27 02 F1 | 	add	local05, local02
20828     13 01 48 FC | 	wrbyte	#0, local05
2082c     1C 1E 06 F1 | 	add	local01, #28
20830     0F 25 02 FB | 	rdlong	local04, local01
20834     1C 1E 86 F1 | 	sub	local01, #28
20838     0C 24 06 F1 | 	add	local04, #12
2083c     12 37 CA FA | 	rdbyte	local13, local04 wz
20840     1C 20 86 F1 | 	sub	local02, #28
20844     0C 20 06 A1 |  if_e	add	local02, #12
20848     10 01 48 AC |  if_e	wrbyte	#0, local02
2084c     0C 20 86 A1 |  if_e	sub	local02, #12
20850                 | LR__3493
20850     1C 1E 06 F1 | 	add	local01, #28
20854     0F 35 02 FB | 	rdlong	local12, local01
20858     0B 34 06 F1 | 	add	local12, #11
2085c     1A 25 C2 FA | 	rdbyte	local04, local12
20860     3F 24 06 F5 | 	and	local04, #63
20864     08 20 06 F1 | 	add	local02, #8
20868     10 25 42 FC | 	wrbyte	local04, local02
2086c     08 20 86 F1 | 	sub	local02, #8
20870     0F 13 02 FB | 	rdlong	arg01, local01
20874     1C 12 06 F1 | 	add	arg01, #28
20878                 | ' {
20878                 | ' 
20878                 | ' 	return *((DWORD*)ptr);
20878     09 FB 01 FB | 	rdlong	result1, arg01
2087c     10 FB 61 FC | 	wrlong	result1, local02
20880     0F 13 02 FB | 	rdlong	arg01, local01
20884     16 12 06 F1 | 	add	arg01, #22
20888                 | ' {
20888                 | ' 
20888                 | ' 	return *((WORD*)ptr);
20888     09 FB E1 FA | 	rdword	result1, arg01
2088c     06 20 06 F1 | 	add	local02, #6
20890     10 FB 51 FC | 	wrword	result1, local02
20894     0F 13 02 FB | 	rdlong	arg01, local01
20898     18 12 06 F1 | 	add	arg01, #24
2089c                 | ' {
2089c                 | ' 
2089c                 | ' 	return *((WORD*)ptr);
2089c     09 FB E1 FA | 	rdword	result1, arg01
208a0     02 20 86 F1 | 	sub	local02, #2
208a4     10 FB 51 FC | 	wrword	result1, local02
208a8                 | LR__3494
208a8     A7 F0 03 F6 | 	mov	ptra, fp
208ac     B2 00 A0 FD | 	call	#popregs_
208b0                 | _fatfs_cc_get_fileinfo_ret
208b0     2D 00 64 FD | 	ret
208b4                 | 
208b4                 | _fatfs_cc_create_name
208b4     0D 4A 05 F6 | 	mov	COUNT_, #13
208b8     A8 00 A0 FD | 	call	#pushregs_
208bc     34 F0 07 F1 | 	add	ptra, #52
208c0     04 4E 05 F1 | 	add	fp, #4
208c4     A7 12 62 FC | 	wrlong	arg01, fp
208c8     04 4E 05 F1 | 	add	fp, #4
208cc     A7 14 62 FC | 	wrlong	arg02, fp
208d0     0A FB 01 FB | 	rdlong	result1, arg02
208d4     28 4E 05 F1 | 	add	fp, #40
208d8     A7 FA 61 FC | 	wrlong	result1, fp
208dc     2C 4E 85 F1 | 	sub	fp, #44
208e0     A7 FA 01 FB | 	rdlong	result1, fp
208e4     FD 1E 02 FB | 	rdlong	local01, result1
208e8     0C 1E 06 F1 | 	add	local01, #12
208ec     0F 21 02 FB | 	rdlong	local02, local01
208f0     14 4E 05 F1 | 	add	fp, #20
208f4     A7 20 62 FC | 	wrlong	local02, fp
208f8     14 4E 05 F1 | 	add	fp, #20
208fc     A7 00 68 FC | 	wrlong	#0, fp
20900     2C 4E 85 F1 | 	sub	fp, #44
20904                 | ' 
20904                 | ' 
20904                 | ' 
20904                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
20904                 | ' 	for (;;) {
20904                 | LR__3500
20904     30 4E 05 F1 | 	add	fp, #48
20908     A7 12 02 F6 | 	mov	arg01, fp
2090c     30 4E 85 F1 | 	sub	fp, #48
20910     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
20914     1C 4E 05 F1 | 	add	fp, #28
20918     A7 FA 61 FC | 	wrlong	result1, fp
2091c     1C 4E 85 F1 | 	sub	fp, #28
20920     FF FF 7F FF 
20924     FF FB 0D F2 | 	cmp	result1, ##-1 wz
20928     06 FA 05 A6 |  if_e	mov	result1, #6
2092c     74 08 90 AD |  if_e	jmp	#LR__3540
20930     1C 4E 05 F1 | 	add	fp, #28
20934     A7 1E 02 FB | 	rdlong	local01, fp
20938     1C 4E 85 F1 | 	sub	fp, #28
2093c     80 00 00 FF 
20940     00 1E 16 F2 | 	cmp	local01, ##65536 wc
20944     3C 00 90 CD |  if_b	jmp	#LR__3501
20948     18 4E 05 F1 | 	add	fp, #24
2094c     A7 22 02 FB | 	rdlong	local03, fp
20950     14 4E 05 F1 | 	add	fp, #20
20954     A7 1E 02 FB | 	rdlong	local01, fp
20958     0F 25 02 F6 | 	mov	local04, local01
2095c     01 24 06 F1 | 	add	local04, #1
20960     A7 24 62 FC | 	wrlong	local04, fp
20964     01 1E 66 F0 | 	shl	local01, #1
20968     11 1F 02 F1 | 	add	local01, local03
2096c     10 4E 85 F1 | 	sub	fp, #16
20970     A7 26 02 FB | 	rdlong	local05, fp
20974     1C 4E 85 F1 | 	sub	fp, #28
20978     13 29 02 F6 | 	mov	local06, local05
2097c     10 28 46 F0 | 	shr	local06, #16
20980     0F 29 52 FC | 	wrword	local06, local01
20984                 | LR__3501
20984     1C 4E 05 F1 | 	add	fp, #28
20988     A7 1E 02 FB | 	rdlong	local01, fp
2098c     08 4E 85 F1 | 	sub	fp, #8
20990     A7 1E 52 FC | 	wrword	local01, fp
20994     A7 1E E2 FA | 	rdword	local01, fp
20998     14 4E 85 F1 | 	sub	fp, #20
2099c     20 1E 16 F2 | 	cmp	local01, #32 wc
209a0     B0 00 90 CD |  if_b	jmp	#LR__3503
209a4     14 4E 05 F1 | 	add	fp, #20
209a8     A7 1E E2 FA | 	rdword	local01, fp
209ac     14 4E 85 F1 | 	sub	fp, #20
209b0     2F 1E 0E F2 | 	cmp	local01, #47 wz
209b4     14 4E 05 51 |  if_ne	add	fp, #20
209b8     A7 24 E2 5A |  if_ne	rdword	local04, fp
209bc     14 4E 85 51 |  if_ne	sub	fp, #20
209c0     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
209c4     8C 00 90 AD |  if_e	jmp	#LR__3503
209c8     14 4E 05 F1 | 	add	fp, #20
209cc     A7 12 E2 FA | 	rdword	arg01, fp
209d0     14 4E 85 F1 | 	sub	fp, #20
209d4     80 12 16 F2 | 	cmp	arg01, #128 wc
209d8     24 00 90 3D |  if_ae	jmp	#LR__3502
209dc     34 01 00 FF 
209e0     14 13 06 F6 | 	mov	arg01, ##@LR__4162
209e4     14 4E 05 F1 | 	add	fp, #20
209e8     A7 14 E2 FA | 	rdword	arg02, fp
209ec     14 4E 85 F1 | 	sub	fp, #20
209f0     FC D0 BF FD | 	call	#_fatfs_cc_strchr
209f4     00 FA 0D F2 | 	cmp	result1, #0 wz
209f8     06 FA 05 56 |  if_ne	mov	result1, #6
209fc     A4 07 90 5D |  if_ne	jmp	#LR__3540
20a00                 | LR__3502
20a00     2C 4E 05 F1 | 	add	fp, #44
20a04     A7 28 02 FB | 	rdlong	local06, fp
20a08     2C 4E 85 F1 | 	sub	fp, #44
20a0c     FF 28 16 F2 | 	cmp	local06, #255 wc
20a10     06 FA 05 36 |  if_ae	mov	result1, #6
20a14     8C 07 90 3D |  if_ae	jmp	#LR__3540
20a18     18 4E 05 F1 | 	add	fp, #24
20a1c     A7 22 02 FB | 	rdlong	local03, fp
20a20     14 4E 05 F1 | 	add	fp, #20
20a24     A7 20 02 FB | 	rdlong	local02, fp
20a28     10 25 02 F6 | 	mov	local04, local02
20a2c     01 24 06 F1 | 	add	local04, #1
20a30     A7 24 62 FC | 	wrlong	local04, fp
20a34     10 1F 02 F6 | 	mov	local01, local02
20a38     01 1E 66 F0 | 	shl	local01, #1
20a3c     11 1F 02 F1 | 	add	local01, local03
20a40     18 4E 85 F1 | 	sub	fp, #24
20a44     A7 28 E2 FA | 	rdword	local06, fp
20a48     14 4E 85 F1 | 	sub	fp, #20
20a4c     0F 29 52 FC | 	wrword	local06, local01
20a50     B0 FE 9F FD | 	jmp	#LR__3500
20a54                 | LR__3503
20a54     14 4E 05 F1 | 	add	fp, #20
20a58     A7 2A E2 FA | 	rdword	local07, fp
20a5c     14 4E 85 F1 | 	sub	fp, #20
20a60     20 2A 16 F2 | 	cmp	local07, #32 wc
20a64     10 4E 05 C1 |  if_b	add	fp, #16
20a68     A7 08 48 CC |  if_b	wrbyte	#4, fp
20a6c     10 4E 85 C1 |  if_b	sub	fp, #16
20a70     74 00 90 CD |  if_b	jmp	#LR__3508
20a74     97 24 48 FB | 	callpa	#(@LR__3506-@LR__3504)>>2,fcache_load_ptr_
20a78                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
20a78                 | LR__3504
20a78     30 4E 05 F1 | 	add	fp, #48
20a7c     A7 24 02 FB | 	rdlong	local04, fp
20a80     30 4E 85 F1 | 	sub	fp, #48
20a84     12 2B C2 FA | 	rdbyte	local07, local04
20a88     2F 2A 0E F2 | 	cmp	local07, #47 wz
20a8c     18 00 90 AD |  if_e	jmp	#LR__3505
20a90     30 4E 05 F1 | 	add	fp, #48
20a94     A7 24 02 FB | 	rdlong	local04, fp
20a98     30 4E 85 F1 | 	sub	fp, #48
20a9c     12 21 C2 FA | 	rdbyte	local02, local04
20aa0     5C 20 0E F2 | 	cmp	local02, #92 wz
20aa4     18 00 90 5D |  if_ne	jmp	#LR__3507
20aa8                 | LR__3505
20aa8     30 4E 05 F1 | 	add	fp, #48
20aac     A7 1E 02 FB | 	rdlong	local01, fp
20ab0     01 1E 06 F1 | 	add	local01, #1
20ab4     A7 1E 62 FC | 	wrlong	local01, fp
20ab8     30 4E 85 F1 | 	sub	fp, #48
20abc     B8 FF 9F FD | 	jmp	#LR__3504
20ac0                 | LR__3506
20ac0                 | LR__3507
20ac0     10 4E 05 F1 | 	add	fp, #16
20ac4     A7 00 48 FC | 	wrbyte	#0, fp
20ac8     20 4E 05 F1 | 	add	fp, #32
20acc     A7 28 02 FB | 	rdlong	local06, fp
20ad0     30 4E 85 F1 | 	sub	fp, #48
20ad4     14 2B C2 FA | 	rdbyte	local07, local06
20ad8     20 2A 16 F2 | 	cmp	local07, #32 wc
20adc     10 4E 05 C1 |  if_b	add	fp, #16
20ae0     A7 08 48 CC |  if_b	wrbyte	#4, fp
20ae4     10 4E 85 C1 |  if_b	sub	fp, #16
20ae8                 | LR__3508
20ae8     08 4E 05 F1 | 	add	fp, #8
20aec     A7 2A 02 FB | 	rdlong	local07, fp
20af0     28 4E 05 F1 | 	add	fp, #40
20af4     A7 1E 02 FB | 	rdlong	local01, fp
20af8     30 4E 85 F1 | 	sub	fp, #48
20afc     15 1F 62 FC | 	wrlong	local01, local07
20b00     97 38 48 FB | 	callpa	#(@LR__3510-@LR__3509)>>2,fcache_load_ptr_
20b04                 | ' 	}
20b04                 | ' 	*path = p;
20b04                 | ' #line 2862 "ff.c"
20b04                 | ' 	while (di) {
20b04                 | LR__3509
20b04     2C 4E 05 F1 | 	add	fp, #44
20b08     A7 2A 0A FB | 	rdlong	local07, fp wz
20b0c     2C 4E 85 F1 | 	sub	fp, #44
20b10     60 00 90 AD |  if_e	jmp	#LR__3511
20b14     18 4E 05 F1 | 	add	fp, #24
20b18     A7 28 02 FB | 	rdlong	local06, fp
20b1c     14 4E 05 F1 | 	add	fp, #20
20b20     A7 24 02 FB | 	rdlong	local04, fp
20b24     01 24 86 F1 | 	sub	local04, #1
20b28     01 24 66 F0 | 	shl	local04, #1
20b2c     14 25 02 F1 | 	add	local04, local06
20b30     12 29 E2 FA | 	rdword	local06, local04
20b34     18 4E 85 F1 | 	sub	fp, #24
20b38     A7 28 52 FC | 	wrword	local06, fp
20b3c     A7 2A E2 FA | 	rdword	local07, fp
20b40     14 4E 85 F1 | 	sub	fp, #20
20b44     20 2A 0E F2 | 	cmp	local07, #32 wz
20b48     14 4E 05 51 |  if_ne	add	fp, #20
20b4c     A7 1E E2 5A |  if_ne	rdword	local01, fp
20b50     14 4E 85 51 |  if_ne	sub	fp, #20
20b54     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
20b58     18 00 90 5D |  if_ne	jmp	#LR__3511
20b5c     2C 4E 05 F1 | 	add	fp, #44
20b60     A7 1E 02 FB | 	rdlong	local01, fp
20b64     01 1E 86 F1 | 	sub	local01, #1
20b68     A7 1E 62 FC | 	wrlong	local01, fp
20b6c     2C 4E 85 F1 | 	sub	fp, #44
20b70     90 FF 9F FD | 	jmp	#LR__3509
20b74                 | LR__3510
20b74                 | LR__3511
20b74     18 4E 05 F1 | 	add	fp, #24
20b78     A7 2C 02 FB | 	rdlong	local08, fp
20b7c     14 4E 05 F1 | 	add	fp, #20
20b80     A7 24 02 FB | 	rdlong	local04, fp
20b84     01 24 66 F0 | 	shl	local04, #1
20b88     16 25 02 F1 | 	add	local04, local08
20b8c     12 01 58 FC | 	wrword	#0, local04
20b90     A7 2A 0A FB | 	rdlong	local07, fp wz
20b94     2C 4E 85 F1 | 	sub	fp, #44
20b98     06 FA 05 A6 |  if_e	mov	result1, #6
20b9c     04 06 90 AD |  if_e	jmp	#LR__3540
20ba0                 | ' 
20ba0                 | ' 
20ba0                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
20ba0     28 4E 05 F1 | 	add	fp, #40
20ba4     A7 00 68 FC | 	wrlong	#0, fp
20ba8     28 4E 85 F1 | 	sub	fp, #40
20bac     97 22 48 FB | 	callpa	#(@LR__3513-@LR__3512)>>2,fcache_load_ptr_
20bb0                 | LR__3512
20bb0     18 4E 05 F1 | 	add	fp, #24
20bb4     A7 2E 02 FB | 	rdlong	local09, fp
20bb8     10 4E 05 F1 | 	add	fp, #16
20bbc     A7 30 02 FB | 	rdlong	local10, fp
20bc0     28 4E 85 F1 | 	sub	fp, #40
20bc4     01 30 66 F0 | 	shl	local10, #1
20bc8     17 31 02 F1 | 	add	local10, local09
20bcc     18 33 E2 FA | 	rdword	local11, local10
20bd0     20 32 0E F2 | 	cmp	local11, #32 wz
20bd4     1C 00 90 5D |  if_ne	jmp	#LR__3514
20bd8     28 4E 05 F1 | 	add	fp, #40
20bdc     A7 34 02 FB | 	rdlong	local12, fp
20be0     1A 27 02 F6 | 	mov	local05, local12
20be4     01 26 06 F1 | 	add	local05, #1
20be8     A7 26 62 FC | 	wrlong	local05, fp
20bec     28 4E 85 F1 | 	sub	fp, #40
20bf0     BC FF 9F FD | 	jmp	#LR__3512
20bf4                 | LR__3513
20bf4                 | LR__3514
20bf4     28 4E 05 F1 | 	add	fp, #40
20bf8     A7 2A 02 FB | 	rdlong	local07, fp
20bfc     28 4E 85 F1 | 	sub	fp, #40
20c00     01 2A 16 F2 | 	cmp	local07, #1 wc
20c04     28 00 90 3D |  if_ae	jmp	#LR__3515
20c08     18 4E 05 F1 | 	add	fp, #24
20c0c     A7 22 02 FB | 	rdlong	local03, fp
20c10     10 4E 05 F1 | 	add	fp, #16
20c14     A7 2E 02 FB | 	rdlong	local09, fp
20c18     28 4E 85 F1 | 	sub	fp, #40
20c1c     01 2E 66 F0 | 	shl	local09, #1
20c20     11 2F 02 F1 | 	add	local09, local03
20c24     17 1F E2 FA | 	rdword	local01, local09
20c28     2E 1E 0E F2 | 	cmp	local01, #46 wz
20c2c     14 00 90 5D |  if_ne	jmp	#LR__3516
20c30                 | LR__3515
20c30     10 4E 05 F1 | 	add	fp, #16
20c34     A7 2A C2 FA | 	rdbyte	local07, fp
20c38     03 2A 46 F5 | 	or	local07, #3
20c3c     A7 2A 42 FC | 	wrbyte	local07, fp
20c40     10 4E 85 F1 | 	sub	fp, #16
20c44                 | LR__3516
20c44     97 2C 48 FB | 	callpa	#(@LR__3518-@LR__3517)>>2,fcache_load_ptr_
20c48                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
20c48                 | LR__3517
20c48     2C 4E 05 F1 | 	add	fp, #44
20c4c     A7 2A 02 FB | 	rdlong	local07, fp
20c50     2C 4E 85 F1 | 	sub	fp, #44
20c54     01 2A 16 F2 | 	cmp	local07, #1 wc
20c58     44 00 90 CD |  if_b	jmp	#LR__3519
20c5c     18 4E 05 F1 | 	add	fp, #24
20c60     A7 28 02 FB | 	rdlong	local06, fp
20c64     14 4E 05 F1 | 	add	fp, #20
20c68     A7 22 02 FB | 	rdlong	local03, fp
20c6c     2C 4E 85 F1 | 	sub	fp, #44
20c70     01 22 86 F1 | 	sub	local03, #1
20c74     01 22 66 F0 | 	shl	local03, #1
20c78     14 23 02 F1 | 	add	local03, local06
20c7c     11 1F E2 FA | 	rdword	local01, local03
20c80     2E 1E 0E F2 | 	cmp	local01, #46 wz
20c84     18 00 90 AD |  if_e	jmp	#LR__3519
20c88     2C 4E 05 F1 | 	add	fp, #44
20c8c     A7 1E 02 FB | 	rdlong	local01, fp
20c90     01 1E 86 F1 | 	sub	local01, #1
20c94     A7 1E 62 FC | 	wrlong	local01, fp
20c98     2C 4E 85 F1 | 	sub	fp, #44
20c9c     A8 FF 9F FD | 	jmp	#LR__3517
20ca0                 | LR__3518
20ca0                 | LR__3519
20ca0     04 4E 05 F1 | 	add	fp, #4
20ca4     A7 12 02 FB | 	rdlong	arg01, fp
20ca8     04 4E 85 F1 | 	sub	fp, #4
20cac     20 12 06 F1 | 	add	arg01, #32
20cb0     20 14 06 F6 | 	mov	arg02, #32
20cb4     0B 16 06 F6 | 	mov	arg03, #11
20cb8     09 37 02 F6 | 	mov	local13, arg01
20cbc     98 00 A0 FD | 	call	#\builtin_bytefill_
20cc0     1B FB 01 F6 | 	mov	result1, local13
20cc4     0C 4E 05 F1 | 	add	fp, #12
20cc8     A7 00 48 FC | 	wrbyte	#0, fp
20ccc     A7 2A C2 FA | 	rdbyte	local07, fp
20cd0     14 4E 05 F1 | 	add	fp, #20
20cd4     A7 2A 62 FC | 	wrlong	local07, fp
20cd8     04 4E 05 F1 | 	add	fp, #4
20cdc     A7 10 68 FC | 	wrlong	#8, fp
20ce0     24 4E 85 F1 | 	sub	fp, #36
20ce4                 | ' 
20ce4                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
20ce4                 | ' 	i = b = 0; ni = 8;
20ce4                 | ' 	for (;;) {
20ce4                 | LR__3520
20ce4     18 4E 05 F1 | 	add	fp, #24
20ce8     A7 22 02 FB | 	rdlong	local03, fp
20cec     10 4E 05 F1 | 	add	fp, #16
20cf0     A7 2E 02 FB | 	rdlong	local09, fp
20cf4     17 25 02 F6 | 	mov	local04, local09
20cf8     01 24 06 F1 | 	add	local04, #1
20cfc     A7 24 62 FC | 	wrlong	local04, fp
20d00     01 2E 66 F0 | 	shl	local09, #1
20d04     11 2F 02 F1 | 	add	local09, local03
20d08     17 29 E2 FA | 	rdword	local06, local09
20d0c     14 4E 85 F1 | 	sub	fp, #20
20d10     A7 28 52 FC | 	wrword	local06, fp
20d14     A7 2A EA FA | 	rdword	local07, fp wz
20d18     14 4E 85 F1 | 	sub	fp, #20
20d1c     74 03 90 AD |  if_e	jmp	#LR__3536
20d20     14 4E 05 F1 | 	add	fp, #20
20d24     A7 2A E2 FA | 	rdword	local07, fp
20d28     14 4E 85 F1 | 	sub	fp, #20
20d2c     20 2A 0E F2 | 	cmp	local07, #32 wz
20d30     30 00 90 AD |  if_e	jmp	#LR__3521
20d34     14 4E 05 F1 | 	add	fp, #20
20d38     A7 1E E2 FA | 	rdword	local01, fp
20d3c     14 4E 85 F1 | 	sub	fp, #20
20d40     2E 1E 0E F2 | 	cmp	local01, #46 wz
20d44     34 00 90 5D |  if_ne	jmp	#LR__3522
20d48     28 4E 05 F1 | 	add	fp, #40
20d4c     A7 24 02 FB | 	rdlong	local04, fp
20d50     04 4E 05 F1 | 	add	fp, #4
20d54     A7 30 02 FB | 	rdlong	local10, fp
20d58     2C 4E 85 F1 | 	sub	fp, #44
20d5c     18 25 0A F2 | 	cmp	local04, local10 wz
20d60     18 00 90 AD |  if_e	jmp	#LR__3522
20d64                 | LR__3521
20d64     10 4E 05 F1 | 	add	fp, #16
20d68     A7 2A C2 FA | 	rdbyte	local07, fp
20d6c     03 2A 46 F5 | 	or	local07, #3
20d70     A7 2A 42 FC | 	wrbyte	local07, fp
20d74     10 4E 85 F1 | 	sub	fp, #16
20d78                 | ' 			cf |=  0x01  |  0x02 ;
20d78                 | ' 			continue;
20d78     68 FF 9F FD | 	jmp	#LR__3520
20d7c                 | LR__3522
20d7c     20 4E 05 F1 | 	add	fp, #32
20d80     A7 2A 02 FB | 	rdlong	local07, fp
20d84     04 4E 05 F1 | 	add	fp, #4
20d88     A7 1E 02 FB | 	rdlong	local01, fp
20d8c     24 4E 85 F1 | 	sub	fp, #36
20d90     0F 2B 12 F2 | 	cmp	local07, local01 wc
20d94     1C 00 90 3D |  if_ae	jmp	#LR__3523
20d98     28 4E 05 F1 | 	add	fp, #40
20d9c     A7 2C 02 FB | 	rdlong	local08, fp
20da0     04 4E 05 F1 | 	add	fp, #4
20da4     A7 30 02 FB | 	rdlong	local10, fp
20da8     2C 4E 85 F1 | 	sub	fp, #44
20dac     18 2D 0A F2 | 	cmp	local08, local10 wz
20db0     B0 00 90 5D |  if_ne	jmp	#LR__3525
20db4                 | LR__3523
20db4     24 4E 05 F1 | 	add	fp, #36
20db8     A7 2A 02 FB | 	rdlong	local07, fp
20dbc     24 4E 85 F1 | 	sub	fp, #36
20dc0     0B 2A 0E F2 | 	cmp	local07, #11 wz
20dc4     18 00 90 5D |  if_ne	jmp	#LR__3524
20dc8     10 4E 05 F1 | 	add	fp, #16
20dcc     A7 2A C2 FA | 	rdbyte	local07, fp
20dd0     03 2A 46 F5 | 	or	local07, #3
20dd4     A7 2A 42 FC | 	wrbyte	local07, fp
20dd8     10 4E 85 F1 | 	sub	fp, #16
20ddc                 | ' 				cf |=  0x01  |  0x02 ;
20ddc                 | ' 				break;
20ddc     B4 02 90 FD | 	jmp	#LR__3536
20de0                 | LR__3524
20de0     28 4E 05 F1 | 	add	fp, #40
20de4     A7 2A 02 FB | 	rdlong	local07, fp
20de8     04 4E 05 F1 | 	add	fp, #4
20dec     A7 1E 02 FB | 	rdlong	local01, fp
20df0     2C 4E 85 F1 | 	sub	fp, #44
20df4     0F 2B 0A F2 | 	cmp	local07, local01 wz
20df8     10 4E 05 51 |  if_ne	add	fp, #16
20dfc     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
20e00     03 2A 46 55 |  if_ne	or	local07, #3
20e04     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
20e08     10 4E 85 51 |  if_ne	sub	fp, #16
20e0c     28 4E 05 F1 | 	add	fp, #40
20e10     A7 2A 02 FB | 	rdlong	local07, fp
20e14     04 4E 05 F1 | 	add	fp, #4
20e18     A7 20 02 FB | 	rdlong	local02, fp
20e1c     2C 4E 85 F1 | 	sub	fp, #44
20e20     10 2B 1A F2 | 	cmp	local07, local02 wcz
20e24     6C 02 90 1D |  if_a	jmp	#LR__3536
20e28     2C 4E 05 F1 | 	add	fp, #44
20e2c     A7 2A 02 FB | 	rdlong	local07, fp
20e30     04 4E 85 F1 | 	sub	fp, #4
20e34     A7 2A 62 FC | 	wrlong	local07, fp
20e38     08 4E 85 F1 | 	sub	fp, #8
20e3c     A7 10 68 FC | 	wrlong	#8, fp
20e40     04 4E 05 F1 | 	add	fp, #4
20e44     A7 16 68 FC | 	wrlong	#11, fp
20e48     18 4E 85 F1 | 	sub	fp, #24
20e4c     A7 32 C2 FA | 	rdbyte	local11, fp
20e50     19 2B E2 F8 | 	getbyte	local07, local11, #0
20e54     02 2A 66 F0 | 	shl	local07, #2
20e58     A7 2A 42 FC | 	wrbyte	local07, fp
20e5c     0C 4E 85 F1 | 	sub	fp, #12
20e60                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
20e60                 | ' 			continue;
20e60     80 FE 9F FD | 	jmp	#LR__3520
20e64                 | LR__3525
20e64     14 4E 05 F1 | 	add	fp, #20
20e68     A7 2A E2 FA | 	rdword	local07, fp
20e6c     14 4E 85 F1 | 	sub	fp, #20
20e70     80 2A 16 F2 | 	cmp	local07, #128 wc
20e74     6C 00 90 CD |  if_b	jmp	#LR__3527
20e78     10 4E 05 F1 | 	add	fp, #16
20e7c     A7 2A C2 FA | 	rdbyte	local07, fp
20e80     02 2A 46 F5 | 	or	local07, #2
20e84     A7 2A 42 FC | 	wrbyte	local07, fp
20e88     04 4E 05 F1 | 	add	fp, #4
20e8c     A7 12 E2 FA | 	rdword	arg01, fp
20e90     14 4E 85 F1 | 	sub	fp, #20
20e94     01 00 00 FF 
20e98     52 15 06 F6 | 	mov	arg02, ##850
20e9c     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
20ea0     14 4E 05 F1 | 	add	fp, #20
20ea4     A7 FA 51 FC | 	wrword	result1, fp
20ea8     A7 2A E2 FA | 	rdword	local07, fp
20eac     14 4E 85 F1 | 	sub	fp, #20
20eb0     80 2A CE F7 | 	test	local07, #128 wz
20eb4     2C 00 90 AD |  if_e	jmp	#LR__3526
20eb8     14 4E 05 F1 | 	add	fp, #20
20ebc     A7 20 E2 FA | 	rdword	local02, fp
20ec0     7F 20 06 F5 | 	and	local02, #127
20ec4     01 00 00 FF 
20ec8     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
20ecc     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
20ed0     10 2B C2 FA | 	rdbyte	local07, local02
20ed4     A7 2A 52 FC | 	wrword	local07, fp
20ed8     14 4E 85 F1 | 	sub	fp, #20
20edc     01 00 00 FF 
20ee0     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
20ee4                 | LR__3526
20ee4                 | LR__3527
20ee4     14 4E 05 F1 | 	add	fp, #20
20ee8     A7 2A E2 FA | 	rdword	local07, fp
20eec     14 4E 85 F1 | 	sub	fp, #20
20ef0     00 2B 16 F2 | 	cmp	local07, #256 wc
20ef4     88 00 90 CD |  if_b	jmp	#LR__3529
20ef8     24 4E 05 F1 | 	add	fp, #36
20efc     A7 2A 02 FB | 	rdlong	local07, fp
20f00     01 2A 86 F1 | 	sub	local07, #1
20f04     04 4E 85 F1 | 	sub	fp, #4
20f08     A7 20 02 FB | 	rdlong	local02, fp
20f0c     20 4E 85 F1 | 	sub	fp, #32
20f10     15 21 12 F2 | 	cmp	local02, local07 wc
20f14     2C 00 90 CD |  if_b	jmp	#LR__3528
20f18     10 4E 05 F1 | 	add	fp, #16
20f1c     A7 32 C2 FA | 	rdbyte	local11, fp
20f20     19 2B E2 F8 | 	getbyte	local07, local11, #0
20f24     03 2A 46 F5 | 	or	local07, #3
20f28     A7 2A 42 FC | 	wrbyte	local07, fp
20f2c     14 4E 05 F1 | 	add	fp, #20
20f30     A7 2A 02 FB | 	rdlong	local07, fp
20f34     04 4E 85 F1 | 	sub	fp, #4
20f38     A7 2A 62 FC | 	wrlong	local07, fp
20f3c     20 4E 85 F1 | 	sub	fp, #32
20f40                 | ' 				cf |=  0x01  |  0x02 ;
20f40                 | ' 				i = ni; continue;
20f40     A0 FD 9F FD | 	jmp	#LR__3520
20f44                 | LR__3528
20f44     04 4E 05 F1 | 	add	fp, #4
20f48     A7 2E 02 FB | 	rdlong	local09, fp
20f4c     1C 4E 05 F1 | 	add	fp, #28
20f50     A7 30 02 FB | 	rdlong	local10, fp
20f54     18 25 02 F6 | 	mov	local04, local10
20f58     01 24 06 F1 | 	add	local04, #1
20f5c     A7 24 62 FC | 	wrlong	local04, fp
20f60     20 2E 06 F1 | 	add	local09, #32
20f64     17 31 02 F1 | 	add	local10, local09
20f68     0C 4E 85 F1 | 	sub	fp, #12
20f6c     A7 22 E2 FA | 	rdword	local03, fp
20f70     14 4E 85 F1 | 	sub	fp, #20
20f74     08 22 46 F0 | 	shr	local03, #8
20f78     18 23 42 FC | 	wrbyte	local03, local10
20f7c     D4 00 90 FD | 	jmp	#LR__3535
20f80                 | LR__3529
20f80     14 4E 05 F1 | 	add	fp, #20
20f84     A7 2A EA FA | 	rdword	local07, fp wz
20f88     14 4E 85 F1 | 	sub	fp, #20
20f8c     20 00 90 AD |  if_e	jmp	#LR__3530
20f90     34 01 00 FF 
20f94     1D 13 06 F6 | 	mov	arg01, ##@LR__4163
20f98     14 4E 05 F1 | 	add	fp, #20
20f9c     A7 14 E2 FA | 	rdword	arg02, fp
20fa0     14 4E 85 F1 | 	sub	fp, #20
20fa4     48 CB BF FD | 	call	#_fatfs_cc_strchr
20fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
20fac     20 00 90 AD |  if_e	jmp	#LR__3531
20fb0                 | LR__3530
20fb0     14 4E 05 F1 | 	add	fp, #20
20fb4     A7 BE 58 FC | 	wrword	#95, fp
20fb8     04 4E 85 F1 | 	sub	fp, #4
20fbc     A7 2A C2 FA | 	rdbyte	local07, fp
20fc0     03 2A 46 F5 | 	or	local07, #3
20fc4     A7 2A 42 FC | 	wrbyte	local07, fp
20fc8     10 4E 85 F1 | 	sub	fp, #16
20fcc     84 00 90 FD | 	jmp	#LR__3534
20fd0                 | LR__3531
20fd0     14 4E 05 F1 | 	add	fp, #20
20fd4     A7 2A E2 FA | 	rdword	local07, fp
20fd8     14 4E 85 F1 | 	sub	fp, #20
20fdc     41 2A 16 F2 | 	cmp	local07, #65 wc
20fe0     24 00 90 CD |  if_b	jmp	#LR__3532
20fe4     14 4E 05 F1 | 	add	fp, #20
20fe8     A7 1E E2 FA | 	rdword	local01, fp
20fec     14 4E 85 F1 | 	sub	fp, #20
20ff0     5B 1E 16 F2 | 	cmp	local01, #91 wc
20ff4     0C 4E 05 C1 |  if_b	add	fp, #12
20ff8     A7 2A C2 CA |  if_b	rdbyte	local07, fp
20ffc     02 2A 46 C5 |  if_b	or	local07, #2
21000     A7 2A 42 CC |  if_b	wrbyte	local07, fp
21004     0C 4E 85 C1 |  if_b	sub	fp, #12
21008                 | LR__3532
21008     14 4E 05 F1 | 	add	fp, #20
2100c     A7 2A E2 FA | 	rdword	local07, fp
21010     14 4E 85 F1 | 	sub	fp, #20
21014     61 2A 16 F2 | 	cmp	local07, #97 wc
21018     38 00 90 CD |  if_b	jmp	#LR__3533
2101c     14 4E 05 F1 | 	add	fp, #20
21020     A7 1E E2 FA | 	rdword	local01, fp
21024     14 4E 85 F1 | 	sub	fp, #20
21028     7B 1E 16 F2 | 	cmp	local01, #123 wc
2102c     24 00 90 3D |  if_ae	jmp	#LR__3533
21030     0C 4E 05 F1 | 	add	fp, #12
21034     A7 2A C2 FA | 	rdbyte	local07, fp
21038     01 2A 46 F5 | 	or	local07, #1
2103c     A7 2A 42 FC | 	wrbyte	local07, fp
21040     08 4E 05 F1 | 	add	fp, #8
21044     A7 2A E2 FA | 	rdword	local07, fp
21048     20 2A 86 F1 | 	sub	local07, #32
2104c     A7 2A 52 FC | 	wrword	local07, fp
21050     14 4E 85 F1 | 	sub	fp, #20
21054                 | LR__3533
21054                 | LR__3534
21054                 | LR__3535
21054     04 4E 05 F1 | 	add	fp, #4
21058     A7 32 02 FB | 	rdlong	local11, fp
2105c     19 2F 02 F6 | 	mov	local09, local11
21060     1C 4E 05 F1 | 	add	fp, #28
21064     A7 20 02 FB | 	rdlong	local02, fp
21068     10 25 02 F6 | 	mov	local04, local02
2106c     01 24 06 F1 | 	add	local04, #1
21070     A7 24 62 FC | 	wrlong	local04, fp
21074     10 31 02 F6 | 	mov	local10, local02
21078     20 2E 06 F1 | 	add	local09, #32
2107c     17 31 02 F1 | 	add	local10, local09
21080     0C 4E 85 F1 | 	sub	fp, #12
21084     A7 22 E2 FA | 	rdword	local03, fp
21088     14 4E 85 F1 | 	sub	fp, #20
2108c     18 23 42 FC | 	wrbyte	local03, local10
21090     50 FC 9F FD | 	jmp	#LR__3520
21094                 | LR__3536
21094     04 4E 05 F1 | 	add	fp, #4
21098     A7 32 02 FB | 	rdlong	local11, fp
2109c     04 4E 85 F1 | 	sub	fp, #4
210a0     20 32 06 F1 | 	add	local11, #32
210a4     19 2B C2 FA | 	rdbyte	local07, local11
210a8     E5 2A 0E F2 | 	cmp	local07, #229 wz
210ac     04 4E 05 A1 |  if_e	add	fp, #4
210b0     A7 2A 02 AB |  if_e	rdlong	local07, fp
210b4     04 4E 85 A1 |  if_e	sub	fp, #4
210b8     20 2A 06 A1 |  if_e	add	local07, #32
210bc     15 0B 48 AC |  if_e	wrbyte	#5, local07
210c0     24 4E 05 F1 | 	add	fp, #36
210c4     A7 2A 02 FB | 	rdlong	local07, fp
210c8     24 4E 85 F1 | 	sub	fp, #36
210cc     08 2A 0E F2 | 	cmp	local07, #8 wz
210d0     0C 4E 05 A1 |  if_e	add	fp, #12
210d4     A7 2A C2 AA |  if_e	rdbyte	local07, fp
210d8     02 2A 66 A0 |  if_e	shl	local07, #2
210dc     A7 2A 42 AC |  if_e	wrbyte	local07, fp
210e0     0C 4E 85 A1 |  if_e	sub	fp, #12
210e4     0C 4E 05 F1 | 	add	fp, #12
210e8     A7 2A C2 FA | 	rdbyte	local07, fp
210ec     0C 4E 85 F1 | 	sub	fp, #12
210f0     0C 2A 06 F5 | 	and	local07, #12
210f4     0C 2A 0E F2 | 	cmp	local07, #12 wz
210f8     18 00 90 AD |  if_e	jmp	#LR__3537
210fc     0C 4E 05 F1 | 	add	fp, #12
21100     A7 1E C2 FA | 	rdbyte	local01, fp
21104     0C 4E 85 F1 | 	sub	fp, #12
21108     03 1E 06 F5 | 	and	local01, #3
2110c     03 1E 0E F2 | 	cmp	local01, #3 wz
21110     14 00 90 5D |  if_ne	jmp	#LR__3538
21114                 | LR__3537
21114     10 4E 05 F1 | 	add	fp, #16
21118     A7 2A C2 FA | 	rdbyte	local07, fp
2111c     02 2A 46 F5 | 	or	local07, #2
21120     A7 2A 42 FC | 	wrbyte	local07, fp
21124     10 4E 85 F1 | 	sub	fp, #16
21128                 | LR__3538
21128     10 4E 05 F1 | 	add	fp, #16
2112c     A7 2A C2 FA | 	rdbyte	local07, fp
21130     10 4E 85 F1 | 	sub	fp, #16
21134     02 2A CE F7 | 	test	local07, #2 wz
21138     48 00 90 5D |  if_ne	jmp	#LR__3539
2113c     0C 4E 05 F1 | 	add	fp, #12
21140     A7 2A C2 FA | 	rdbyte	local07, fp
21144     0C 4E 85 F1 | 	sub	fp, #12
21148     01 2A CE F7 | 	test	local07, #1 wz
2114c     10 4E 05 51 |  if_ne	add	fp, #16
21150     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
21154     10 2A 46 55 |  if_ne	or	local07, #16
21158     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2115c     10 4E 85 51 |  if_ne	sub	fp, #16
21160     0C 4E 05 F1 | 	add	fp, #12
21164     A7 2A C2 FA | 	rdbyte	local07, fp
21168     0C 4E 85 F1 | 	sub	fp, #12
2116c     04 2A CE F7 | 	test	local07, #4 wz
21170     10 4E 05 51 |  if_ne	add	fp, #16
21174     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
21178     08 2A 46 55 |  if_ne	or	local07, #8
2117c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
21180     10 4E 85 51 |  if_ne	sub	fp, #16
21184                 | LR__3539
21184     04 4E 05 F1 | 	add	fp, #4
21188     A7 2A 02 FB | 	rdlong	local07, fp
2118c     0C 4E 05 F1 | 	add	fp, #12
21190     A7 1E C2 FA | 	rdbyte	local01, fp
21194     10 4E 85 F1 | 	sub	fp, #16
21198     2B 2A 06 F1 | 	add	local07, #43
2119c     15 1F 42 FC | 	wrbyte	local01, local07
211a0                 | ' 	}
211a0                 | ' 
211a0                 | ' 	dp->fn[ 11 ] = cf;
211a0                 | ' 
211a0                 | ' 	return FR_OK;
211a0     00 FA 05 F6 | 	mov	result1, #0
211a4                 | LR__3540
211a4     A7 F0 03 F6 | 	mov	ptra, fp
211a8     B2 00 A0 FD | 	call	#popregs_
211ac                 | _fatfs_cc_create_name_ret
211ac     2D 00 64 FD | 	ret
211b0                 | 
211b0                 | _fatfs_cc_follow_path
211b0     02 4A 05 F6 | 	mov	COUNT_, #2
211b4     A8 00 A0 FD | 	call	#pushregs_
211b8     18 F0 07 F1 | 	add	ptra, #24
211bc     04 4E 05 F1 | 	add	fp, #4
211c0     A7 12 62 FC | 	wrlong	arg01, fp
211c4     04 4E 05 F1 | 	add	fp, #4
211c8     A7 14 62 FC | 	wrlong	arg02, fp
211cc     04 4E 85 F1 | 	sub	fp, #4
211d0     A7 FA 01 FB | 	rdlong	result1, fp
211d4     FD 1E 02 FB | 	rdlong	local01, result1
211d8     10 4E 05 F1 | 	add	fp, #16
211dc     A7 1E 62 FC | 	wrlong	local01, fp
211e0     14 4E 85 F1 | 	sub	fp, #20
211e4     97 24 48 FB | 	callpa	#(@LR__3552-@LR__3550)>>2,fcache_load_ptr_
211e8                 | ' )
211e8                 | ' {
211e8                 | ' 	FRESULT res;
211e8                 | ' 	BYTE ns;
211e8                 | ' 	FATFS *fs = dp->obj.fs;
211e8                 | ' #line 3034 "ff.c"
211e8                 | ' 	{
211e8                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
211e8                 | LR__3550
211e8     08 4E 05 F1 | 	add	fp, #8
211ec     A7 1E 02 FB | 	rdlong	local01, fp
211f0     08 4E 85 F1 | 	sub	fp, #8
211f4     0F 1F C2 FA | 	rdbyte	local01, local01
211f8     2F 1E 0E F2 | 	cmp	local01, #47 wz
211fc     18 00 90 AD |  if_e	jmp	#LR__3551
21200     08 4E 05 F1 | 	add	fp, #8
21204     A7 1E 02 FB | 	rdlong	local01, fp
21208     08 4E 85 F1 | 	sub	fp, #8
2120c     0F 1F C2 FA | 	rdbyte	local01, local01
21210     5C 1E 0E F2 | 	cmp	local01, #92 wz
21214     18 00 90 5D |  if_ne	jmp	#LR__3553
21218                 | LR__3551
21218     08 4E 05 F1 | 	add	fp, #8
2121c     A7 1E 02 FB | 	rdlong	local01, fp
21220     01 1E 06 F1 | 	add	local01, #1
21224     A7 1E 62 FC | 	wrlong	local01, fp
21228     08 4E 85 F1 | 	sub	fp, #8
2122c     B8 FF 9F FD | 	jmp	#LR__3550
21230                 | LR__3552
21230                 | LR__3553
21230     04 4E 05 F1 | 	add	fp, #4
21234     A7 1E 02 FB | 	rdlong	local01, fp
21238     08 1E 06 F1 | 	add	local01, #8
2123c     0F 01 68 FC | 	wrlong	#0, local01
21240     04 4E 05 F1 | 	add	fp, #4
21244     A7 1E 02 FB | 	rdlong	local01, fp
21248     08 4E 85 F1 | 	sub	fp, #8
2124c     0F 1F C2 FA | 	rdbyte	local01, local01
21250     20 1E 16 F2 | 	cmp	local01, #32 wc
21254     30 00 90 3D |  if_ae	jmp	#LR__3554
21258     04 4E 05 F1 | 	add	fp, #4
2125c     A7 1E 02 FB | 	rdlong	local01, fp
21260     2B 1E 06 F1 | 	add	local01, #43
21264     0F 01 49 FC | 	wrbyte	#128, local01
21268     A7 12 02 FB | 	rdlong	arg01, fp
2126c     04 4E 85 F1 | 	sub	fp, #4
21270     00 14 06 F6 | 	mov	arg02, #0
21274     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
21278     0C 4E 05 F1 | 	add	fp, #12
2127c     A7 FA 61 FC | 	wrlong	result1, fp
21280     0C 4E 85 F1 | 	sub	fp, #12
21284     1C 01 90 FD | 	jmp	#LR__3558
21288                 | LR__3554
21288                 | ' 		for (;;) {
21288                 | LR__3555
21288     04 4E 05 F1 | 	add	fp, #4
2128c     A7 12 02 FB | 	rdlong	arg01, fp
21290     04 4E 05 F1 | 	add	fp, #4
21294     A7 14 02 F6 | 	mov	arg02, fp
21298     08 4E 85 F1 | 	sub	fp, #8
2129c     14 F6 BF FD | 	call	#_fatfs_cc_create_name
212a0     0C 4E 05 F1 | 	add	fp, #12
212a4     A7 FA 61 FC | 	wrlong	result1, fp
212a8     00 FA 4D F2 | 	cmps	result1, #0 wz
212ac     0C 4E 85 F1 | 	sub	fp, #12
212b0     F0 00 90 5D |  if_ne	jmp	#LR__3557
212b4     04 4E 05 F1 | 	add	fp, #4
212b8     A7 12 02 FB | 	rdlong	arg01, fp
212bc     04 4E 85 F1 | 	sub	fp, #4
212c0     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
212c4     0C 4E 05 F1 | 	add	fp, #12
212c8     A7 FA 61 FC | 	wrlong	result1, fp
212cc     08 4E 85 F1 | 	sub	fp, #8
212d0     A7 1E 02 FB | 	rdlong	local01, fp
212d4     2B 1E 06 F1 | 	add	local01, #43
212d8     0F 1F C2 FA | 	rdbyte	local01, local01
212dc     0C 4E 05 F1 | 	add	fp, #12
212e0     A7 1E 42 FC | 	wrbyte	local01, fp
212e4     04 4E 85 F1 | 	sub	fp, #4
212e8     A7 1E 0A FB | 	rdlong	local01, fp wz
212ec     0C 4E 85 F1 | 	sub	fp, #12
212f0     34 00 90 AD |  if_e	jmp	#LR__3556
212f4     0C 4E 05 F1 | 	add	fp, #12
212f8     A7 1E 02 FB | 	rdlong	local01, fp
212fc     0C 4E 85 F1 | 	sub	fp, #12
21300     04 1E 0E F2 | 	cmp	local01, #4 wz
21304     9C 00 90 5D |  if_ne	jmp	#LR__3557
21308     10 4E 05 F1 | 	add	fp, #16
2130c     A7 1E C2 FA | 	rdbyte	local01, fp
21310     10 4E 85 F1 | 	sub	fp, #16
21314     04 1E CE F7 | 	test	local01, #4 wz
21318     0C 4E 05 A1 |  if_e	add	fp, #12
2131c     A7 0A 68 AC |  if_e	wrlong	#5, fp
21320     0C 4E 85 A1 |  if_e	sub	fp, #12
21324                 | ' 					}
21324                 | ' 				}
21324                 | ' 				break;
21324     7C 00 90 FD | 	jmp	#LR__3557
21328                 | LR__3556
21328     10 4E 05 F1 | 	add	fp, #16
2132c     A7 1E C2 FA | 	rdbyte	local01, fp
21330     10 4E 85 F1 | 	sub	fp, #16
21334     04 1E CE F7 | 	test	local01, #4 wz
21338     68 00 90 5D |  if_ne	jmp	#LR__3557
2133c     04 4E 05 F1 | 	add	fp, #4
21340     A7 1E 02 FB | 	rdlong	local01, fp
21344     04 4E 85 F1 | 	sub	fp, #4
21348     06 1E 06 F1 | 	add	local01, #6
2134c     0F 1F C2 FA | 	rdbyte	local01, local01
21350     10 1E CE F7 | 	test	local01, #16 wz
21354     0C 4E 05 A1 |  if_e	add	fp, #12
21358     A7 0A 68 AC |  if_e	wrlong	#5, fp
2135c     0C 4E 85 A1 |  if_e	sub	fp, #12
21360                 | ' 				res = FR_NO_PATH; break;
21360     40 00 90 AD |  if_e	jmp	#LR__3557
21364     04 4E 05 F1 | 	add	fp, #4
21368     A7 20 02 FB | 	rdlong	local02, fp
2136c     10 1F 02 F6 | 	mov	local01, local02
21370     10 4E 05 F1 | 	add	fp, #16
21374     A7 14 02 FB | 	rdlong	arg02, fp
21378     0A 13 02 F6 | 	mov	arg01, arg02
2137c     34 14 06 F1 | 	add	arg02, #52
21380     14 4E 85 F1 | 	sub	fp, #20
21384     10 20 06 F1 | 	add	local02, #16
21388     10 21 02 FB | 	rdlong	local02, local02
2138c     FF 21 06 F5 | 	and	local02, #511
21390     10 15 02 F1 | 	add	arg02, local02
21394     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
21398     08 1E 06 F1 | 	add	local01, #8
2139c     0F FB 61 FC | 	wrlong	result1, local01
213a0     E4 FE 9F FD | 	jmp	#LR__3555
213a4                 | LR__3557
213a4                 | LR__3558
213a4                 | ' 			}
213a4                 | ' #line 3090 "ff.c"
213a4                 | ' 			{
213a4                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
213a4                 | ' 			}
213a4                 | ' 		}
213a4                 | ' 	}
213a4                 | ' 
213a4                 | ' 	return res;
213a4     0C 4E 05 F1 | 	add	fp, #12
213a8     A7 FA 01 FB | 	rdlong	result1, fp
213ac     0C 4E 85 F1 | 	sub	fp, #12
213b0     A7 F0 03 F6 | 	mov	ptra, fp
213b4     B2 00 A0 FD | 	call	#popregs_
213b8                 | _fatfs_cc_follow_path_ret
213b8     2D 00 64 FD | 	ret
213bc                 | 
213bc                 | _fatfs_cc_get_ldnumber
213bc     01 00 66 F6 | 	neg	_var01, #1
213c0     09 03 0A FB | 	rdlong	_var02, arg01 wz
213c4     01 05 02 F6 | 	mov	_var03, _var02
213c8     01 FA 65 A6 |  if_e	neg	result1, #1
213cc     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
213d0     97 10 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
213d4                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
213d4                 | LR__3560
213d4     02 07 C2 FA | 	rdbyte	_var04, _var03
213d8     03 FB E1 F8 | 	getbyte	result1, _var04, #0
213dc     20 FA 15 F2 | 	cmp	result1, #32 wc
213e0     01 04 06 F1 | 	add	_var03, #1
213e4     03 09 02 36 |  if_ae	mov	_var05, _var04
213e8     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
213ec     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
213f0     E0 FF 9F 1D |  if_a	jmp	#LR__3560
213f4                 | LR__3561
213f4     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
213f8     3A 06 0E F2 | 	cmp	_var04, #58 wz
213fc     40 00 90 5D |  if_ne	jmp	#LR__3563
21400     01 0A 06 F6 | 	mov	_var06, #1
21404     01 09 C2 FA | 	rdbyte	_var05, _var02
21408     30 08 16 F2 | 	cmp	_var05, #48 wc
2140c     1C 00 90 CD |  if_b	jmp	#LR__3562
21410     01 09 C2 FA | 	rdbyte	_var05, _var02
21414     3A 08 16 F2 | 	cmp	_var05, #58 wc
21418     01 0D 02 C6 |  if_b	mov	_var07, _var02
2141c     02 0C 06 C1 |  if_b	add	_var07, #2
21420     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
21424     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
21428     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2142c                 | LR__3562
2142c     01 0A 56 F2 | 	cmps	_var06, #1 wc
21430     05 01 02 C6 |  if_b	mov	_var01, _var06
21434     09 05 62 CC |  if_b	wrlong	_var03, arg01
21438                 | ' 			vol = i;
21438                 | ' 			*path = tt;
21438                 | ' 		}
21438                 | ' 		return vol;
21438     00 FB 01 F6 | 	mov	result1, _var01
2143c     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
21440                 | LR__3563
21440                 | ' 	}
21440                 | ' #line 3170 "ff.c"
21440                 | ' 	vol = 0;
21440                 | ' 
21440                 | ' 	return vol;
21440     00 FA 05 F6 | 	mov	result1, #0
21444                 | _fatfs_cc_get_ldnumber_ret
21444     2D 00 64 FD | 	ret
21448                 | 
21448                 | _fatfs_cc_check_fs
21448     04 4A 05 F6 | 	mov	COUNT_, #4
2144c     A8 00 A0 FD | 	call	#pushregs_
21450     09 1F 02 F6 | 	mov	local01, arg01
21454     03 1E 06 F1 | 	add	local01, #3
21458     0F 01 48 FC | 	wrbyte	#0, local01
2145c     2D 1E 06 F1 | 	add	local01, #45
21460     FF FF FF FF 
21464     0F FF 6B FC | 	wrlong	##-1, local01
21468     30 1E 86 F1 | 	sub	local01, #48
2146c     0F 13 02 F6 | 	mov	arg01, local01
21470     18 D5 BF FD | 	call	#_fatfs_cc_move_window
21474     00 FA 0D F2 | 	cmp	result1, #0 wz
21478     04 FA 05 56 |  if_ne	mov	result1, #4
2147c     94 01 90 5D |  if_ne	jmp	#LR__3574
21480     34 1E 06 F1 | 	add	local01, #52
21484     0F 13 02 F6 | 	mov	arg01, local01
21488     FE 13 06 F1 | 	add	arg01, #510
2148c                 | ' {
2148c                 | ' 
2148c                 | ' 	return *((WORD*)ptr);
2148c     09 21 E2 FA | 	rdword	local02, arg01
21490     0F 23 C2 FA | 	rdbyte	local03, local01
21494     34 1E 86 F1 | 	sub	local01, #52
21498     11 25 E2 F8 | 	getbyte	local04, local03, #0
2149c     EB 24 0E F2 | 	cmp	local04, #235 wz
214a0     11 17 02 56 |  if_ne	mov	arg03, local03
214a4     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
214a8     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
214ac     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
214b0     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
214b4     44 01 90 5D |  if_ne	jmp	#LR__3573
214b8     10 25 32 F9 | 	getword	local04, local02, #0
214bc     55 00 00 FF 
214c0     55 24 0E F2 | 	cmp	local04, ##43605 wz
214c4     2C 00 90 5D |  if_ne	jmp	#LR__3570
214c8     34 1E 06 F1 | 	add	local01, #52
214cc     0F 13 02 F6 | 	mov	arg01, local01
214d0     34 1E 86 F1 | 	sub	local01, #52
214d4     52 12 06 F1 | 	add	arg01, #82
214d8     34 01 00 FF 
214dc     24 15 06 F6 | 	mov	arg02, ##@LR__4164
214e0     08 16 06 F6 | 	mov	arg03, #8
214e4     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
214e8     00 FA 0D F2 | 	cmp	result1, #0 wz
214ec                 | ' 			return 0;
214ec     00 FA 05 A6 |  if_e	mov	result1, #0
214f0     20 01 90 AD |  if_e	jmp	#LR__3574
214f4                 | LR__3570
214f4     34 1E 06 F1 | 	add	local01, #52
214f8     0F 13 02 F6 | 	mov	arg01, local01
214fc     0B 12 06 F1 | 	add	arg01, #11
21500                 | ' {
21500                 | ' 
21500                 | ' 	return *((WORD*)ptr);
21500     09 FB E1 FA | 	rdword	result1, arg01
21504     0D 1E 06 F1 | 	add	local01, #13
21508     0F 23 C2 FA | 	rdbyte	local03, local01
2150c     41 1E 86 F1 | 	sub	local01, #65
21510     FD 24 32 F9 | 	getword	local04, result1, #0
21514     FD 14 32 F9 | 	getword	arg02, result1, #0
21518     01 14 86 F1 | 	sub	arg02, #1
2151c     0A 25 CA F7 | 	test	local04, arg02 wz
21520     D8 00 90 5D |  if_ne	jmp	#LR__3572
21524     FD 14 32 F9 | 	getword	arg02, result1, #0
21528     01 00 00 FF 
2152c     00 14 16 F2 | 	cmp	arg02, ##512 wc
21530     C8 00 90 CD |  if_b	jmp	#LR__3572
21534     FD 14 32 F9 | 	getword	arg02, result1, #0
21538     01 00 00 FF 
2153c     01 14 16 F2 | 	cmp	arg02, ##513 wc
21540     B8 00 90 3D |  if_ae	jmp	#LR__3572
21544     11 13 02 F6 | 	mov	arg01, local03
21548     07 12 4E F7 | 	zerox	arg01, #7 wz
2154c     AC 00 90 AD |  if_e	jmp	#LR__3572
21550     11 13 E2 F8 | 	getbyte	arg01, local03, #0
21554     11 23 E2 F8 | 	getbyte	local03, local03, #0
21558     01 22 86 F1 | 	sub	local03, #1
2155c     11 13 CA F7 | 	test	arg01, local03 wz
21560     98 00 90 5D |  if_ne	jmp	#LR__3572
21564     34 1E 06 F1 | 	add	local01, #52
21568     0F 13 02 F6 | 	mov	arg01, local01
2156c     34 1E 86 F1 | 	sub	local01, #52
21570     0E 12 06 F1 | 	add	arg01, #14
21574                 | ' {
21574                 | ' 
21574                 | ' 	return *((WORD*)ptr);
21574     09 FB E9 FA | 	rdword	result1, arg01 wz
21578     80 00 90 AD |  if_e	jmp	#LR__3572
2157c     44 1E 06 F1 | 	add	local01, #68
21580     0F 13 C2 FA | 	rdbyte	arg01, local01
21584     44 1E 86 F1 | 	sub	local01, #68
21588     01 12 86 F1 | 	sub	arg01, #1
2158c     02 12 16 F2 | 	cmp	arg01, #2 wc
21590     68 00 90 3D |  if_ae	jmp	#LR__3572
21594     34 1E 06 F1 | 	add	local01, #52
21598     0F 13 02 F6 | 	mov	arg01, local01
2159c     34 1E 86 F1 | 	sub	local01, #52
215a0     11 12 06 F1 | 	add	arg01, #17
215a4                 | ' {
215a4                 | ' 
215a4                 | ' 	return *((WORD*)ptr);
215a4     09 FB E9 FA | 	rdword	result1, arg01 wz
215a8     50 00 90 AD |  if_e	jmp	#LR__3572
215ac     34 1E 06 F1 | 	add	local01, #52
215b0     0F 13 02 F6 | 	mov	arg01, local01
215b4     34 1E 86 F1 | 	sub	local01, #52
215b8     13 12 06 F1 | 	add	arg01, #19
215bc                 | ' {
215bc                 | ' 
215bc                 | ' 	return *((WORD*)ptr);
215bc     09 FB E1 FA | 	rdword	result1, arg01
215c0     FD 22 32 F9 | 	getword	local03, result1, #0
215c4     80 22 16 F2 | 	cmp	local03, #128 wc
215c8     20 00 90 3D |  if_ae	jmp	#LR__3571
215cc     34 1E 06 F1 | 	add	local01, #52
215d0     0F 13 02 F6 | 	mov	arg01, local01
215d4     34 1E 86 F1 | 	sub	local01, #52
215d8     20 12 06 F1 | 	add	arg01, #32
215dc                 | ' {
215dc                 | ' 
215dc                 | ' 	return *((DWORD*)ptr);
215dc     09 FB 01 FB | 	rdlong	result1, arg01
215e0     80 00 00 FF 
215e4     00 FA 15 F2 | 	cmp	result1, ##65536 wc
215e8     10 00 90 CD |  if_b	jmp	#LR__3572
215ec                 | LR__3571
215ec     4A 1E 06 F1 | 	add	local01, #74
215f0                 | ' {
215f0                 | ' 
215f0                 | ' 	return *((WORD*)ptr);
215f0     0F FB E9 FA | 	rdword	result1, local01 wz
215f4                 | ' 			&& b != 0 && (b & (b - 1)) == 0
215f4                 | ' 			&& ld_word(fs->win +  14 ) != 0
215f4                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
215f4                 | ' 			&& ld_word(fs->win +  17 ) != 0
215f4                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
215f4                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
215f4                 | ' 				return 0;
215f4     00 FA 05 56 |  if_ne	mov	result1, #0
215f8     18 00 90 5D |  if_ne	jmp	#LR__3574
215fc                 | LR__3572
215fc                 | LR__3573
215fc                 | ' 		}
215fc                 | ' 	}
215fc                 | ' 	return sign == 0xAA55 ? 2 : 3;
215fc     10 23 32 F9 | 	getword	local03, local02, #0
21600     55 00 00 FF 
21604     55 22 0E F2 | 	cmp	local03, ##43605 wz
21608     02 24 06 A6 |  if_e	mov	local04, #2
2160c     03 24 06 56 |  if_ne	mov	local04, #3
21610     12 FB 01 F6 | 	mov	result1, local04
21614                 | LR__3574
21614     A7 F0 03 F6 | 	mov	ptra, fp
21618     B2 00 A0 FD | 	call	#popregs_
2161c                 | _fatfs_cc_check_fs_ret
2161c     2D 00 64 FD | 	ret
21620                 | 
21620                 | _fatfs_cc_find_volume
21620     05 4A 05 F6 | 	mov	COUNT_, #5
21624     A8 00 A0 FD | 	call	#pushregs_
21628     24 F0 07 F1 | 	add	ptra, #36
2162c     09 1F 02 F6 | 	mov	local01, arg01
21630     0A 21 02 F6 | 	mov	local02, arg02
21634     0F 13 02 F6 | 	mov	arg01, local01
21638     00 14 06 F6 | 	mov	arg02, #0
2163c     08 FE BF FD | 	call	#_fatfs_cc_check_fs
21640     02 FA 0D F2 | 	cmp	result1, #2 wz
21644     0C 00 90 AD |  if_e	jmp	#LR__3580
21648     03 FA 15 F2 | 	cmp	result1, #3 wc
2164c     00 20 0E C2 |  if_b	cmp	local02, #0 wz
21650     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3588
21654                 | LR__3580
21654                 | ' 	for (i = 0; i < 4; i++) {
21654     00 22 06 F6 | 	mov	local03, #0
21658     97 26 48 FB | 	callpa	#(@LR__3582-@LR__3581)>>2,fcache_load_ptr_
2165c                 | LR__3581
2165c     04 22 16 F2 | 	cmp	local03, #4 wc
21660     44 00 90 3D |  if_ae	jmp	#LR__3583
21664     11 25 02 F6 | 	mov	local04, local03
21668     02 24 66 F0 | 	shl	local04, #2
2166c     14 4E 05 F1 | 	add	fp, #20
21670     A7 24 02 F1 | 	add	local04, fp
21674     34 1E 06 F1 | 	add	local01, #52
21678     0F 13 02 F6 | 	mov	arg01, local01
2167c     34 1E 86 F1 | 	sub	local01, #52
21680     BE 13 06 F1 | 	add	arg01, #446
21684     11 15 02 F6 | 	mov	arg02, local03
21688     04 14 66 F0 | 	shl	arg02, #4
2168c     0A 13 02 F1 | 	add	arg01, arg02
21690     08 12 06 F1 | 	add	arg01, #8
21694                 | ' {
21694                 | ' 
21694                 | ' 	return *((DWORD*)ptr);
21694     09 FB 01 FB | 	rdlong	result1, arg01
21698     14 4E 85 F1 | 	sub	fp, #20
2169c     12 FB 61 FC | 	wrlong	result1, local04
216a0     01 22 06 F1 | 	add	local03, #1
216a4     B4 FF 9F FD | 	jmp	#LR__3581
216a8                 | LR__3582
216a8                 | LR__3583
216a8     00 20 0E F2 | 	cmp	local02, #0 wz
216ac     10 25 02 56 |  if_ne	mov	local04, local02
216b0     01 24 86 51 |  if_ne	sub	local04, #1
216b4     00 24 06 A6 |  if_e	mov	local04, #0
216b8     12 23 02 F6 | 	mov	local03, local04
216bc                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
216bc                 | ' 	}
216bc                 | ' 	i = part ? part - 1 : 0;
216bc                 | ' 	do {
216bc                 | LR__3584
216bc     11 25 02 F6 | 	mov	local04, local03
216c0     02 24 66 F0 | 	shl	local04, #2
216c4     14 4E 05 F1 | 	add	fp, #20
216c8     A7 24 02 F1 | 	add	local04, fp
216cc     12 25 0A FB | 	rdlong	local04, local04 wz
216d0     14 4E 85 F1 | 	sub	fp, #20
216d4     28 00 90 AD |  if_e	jmp	#LR__3585
216d8     11 25 02 F6 | 	mov	local04, local03
216dc     02 24 66 F0 | 	shl	local04, #2
216e0     14 4E 05 F1 | 	add	fp, #20
216e4     A7 24 02 F1 | 	add	local04, fp
216e8     12 15 02 FB | 	rdlong	arg02, local04
216ec     0F 13 02 F6 | 	mov	arg01, local01
216f0     14 4E 85 F1 | 	sub	fp, #20
216f4     50 FD BF FD | 	call	#_fatfs_cc_check_fs
216f8     FD 24 02 F6 | 	mov	local04, result1
216fc     04 00 90 FD | 	jmp	#LR__3586
21700                 | LR__3585
21700     03 24 06 F6 | 	mov	local04, #3
21704                 | LR__3586
21704     12 27 02 F6 | 	mov	local05, local04
21708     00 20 0E F2 | 	cmp	local02, #0 wz
2170c     02 26 16 A2 |  if_e	cmp	local05, #2 wc
21710     0C 00 90 8D |  if_c_and_z	jmp	#LR__3587
21714     01 22 06 A1 |  if_e	add	local03, #1
21718     04 22 16 A2 |  if_e	cmp	local03, #4 wc
2171c     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3584
21720                 | LR__3587
21720                 | ' 	return fmt;
21720     13 FB 01 F6 | 	mov	result1, local05
21724                 | LR__3588
21724     A7 F0 03 F6 | 	mov	ptra, fp
21728     B2 00 A0 FD | 	call	#popregs_
2172c                 | _fatfs_cc_find_volume_ret
2172c     2D 00 64 FD | 	ret
21730                 | 
21730                 | _fatfs_cc_mount_volume
21730     0B 4A 05 F6 | 	mov	COUNT_, #11
21734     A8 00 A0 FD | 	call	#pushregs_
21738     0A 1F 02 F6 | 	mov	local01, arg02
2173c     0B 21 02 F6 | 	mov	local02, arg03
21740     0F 01 68 FC | 	wrlong	#0, local01
21744     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
21748     FD 22 02 F6 | 	mov	local03, result1
2174c     00 22 56 F2 | 	cmps	local03, #0 wc
21750     0B FA 05 C6 |  if_b	mov	result1, #11
21754     3C 05 90 CD |  if_b	jmp	#LR__3600
21758     11 17 02 F6 | 	mov	arg03, local03
2175c     02 16 66 F0 | 	shl	arg03, #2
21760     F2 16 02 F1 | 	add	arg03, objptr
21764     0B 25 0A FB | 	rdlong	local04, arg03 wz
21768     0C FA 05 A6 |  if_e	mov	result1, #12
2176c     24 05 90 AD |  if_e	jmp	#LR__3600
21770     0F 25 62 FC | 	wrlong	local04, local01
21774     10 21 E2 F8 | 	getbyte	local02, local02, #0
21778     FE 20 06 F5 | 	and	local02, #254
2177c     12 17 CA FA | 	rdbyte	arg03, local04 wz
21780     4C 00 90 AD |  if_e	jmp	#LR__3591
21784     01 24 06 F1 | 	add	local04, #1
21788     12 13 CA FA | 	rdbyte	arg01, local04 wz
2178c     01 24 86 F1 | 	sub	local04, #1
21790     01 FA 05 56 |  if_ne	mov	result1, #1
21794                 | ' 
21794                 | ' 	return Stat;
21794     01 00 00 AF 
21798     20 E4 05 A1 |  if_e	add	objptr, ##544
2179c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
217a0     01 00 00 AF 
217a4     20 E4 85 A1 |  if_e	sub	objptr, ##544
217a8     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
217ac     01 16 CE F7 | 	test	arg03, #1 wz
217b0     1C 00 90 5D |  if_ne	jmp	#LR__3590
217b4     00 20 0E F2 | 	cmp	local02, #0 wz
217b8     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
217bc     04 FA CD 57 |  if_ne	test	result1, #4 wz
217c0                 | ' 				return FR_WRITE_PROTECTED;
217c0     0A FA 05 56 |  if_ne	mov	result1, #10
217c4     CC 04 90 5D |  if_ne	jmp	#LR__3600
217c8                 | ' 			}
217c8                 | ' 			return FR_OK;
217c8     00 FA 05 F6 | 	mov	result1, #0
217cc     C4 04 90 FD | 	jmp	#LR__3600
217d0                 | LR__3590
217d0                 | LR__3591
217d0     12 01 48 FC | 	wrbyte	#0, local04
217d4     01 24 06 F1 | 	add	local04, #1
217d8     12 23 42 FC | 	wrbyte	local03, local04
217dc     12 13 C2 FA | 	rdbyte	arg01, local04
217e0     01 24 86 F1 | 	sub	local04, #1
217e4     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
217e8     FD 16 02 F6 | 	mov	arg03, result1
217ec     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
217f0     01 26 CE F7 | 	test	local05, #1 wz
217f4                 | ' 		return FR_NOT_READY;
217f4     03 FA 05 56 |  if_ne	mov	result1, #3
217f8     98 04 90 5D |  if_ne	jmp	#LR__3600
217fc     00 20 0E F2 | 	cmp	local02, #0 wz
21800     0B 27 02 56 |  if_ne	mov	local05, arg03
21804     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
21808     04 26 CE 57 |  if_ne	test	local05, #4 wz
2180c                 | ' 		return FR_WRITE_PROTECTED;
2180c     0A FA 05 56 |  if_ne	mov	result1, #10
21810     80 04 90 5D |  if_ne	jmp	#LR__3600
21814     12 13 02 F6 | 	mov	arg01, local04
21818     00 14 06 F6 | 	mov	arg02, #0
2181c     00 FE BF FD | 	call	#_fatfs_cc_find_volume
21820     FD 12 02 F6 | 	mov	arg01, result1
21824     04 12 0E F2 | 	cmp	arg01, #4 wz
21828     01 FA 05 A6 |  if_e	mov	result1, #1
2182c     64 04 90 AD |  if_e	jmp	#LR__3600
21830     02 12 16 F2 | 	cmp	arg01, #2 wc
21834     0D FA 05 36 |  if_ae	mov	result1, #13
21838     58 04 90 3D |  if_ae	jmp	#LR__3600
2183c     30 24 06 F1 | 	add	local04, #48
21840     12 29 02 FB | 	rdlong	local06, local04
21844     04 24 06 F1 | 	add	local04, #4
21848     12 13 02 F6 | 	mov	arg01, local04
2184c     34 24 86 F1 | 	sub	local04, #52
21850     0B 12 06 F1 | 	add	arg01, #11
21854                 | ' {
21854                 | ' 
21854                 | ' 	return *((WORD*)ptr);
21854     09 FB E1 FA | 	rdword	result1, arg01
21858     01 00 00 FF 
2185c     00 FA 0D F2 | 	cmp	result1, ##512 wz
21860     0D FA 05 56 |  if_ne	mov	result1, #13
21864     2C 04 90 5D |  if_ne	jmp	#LR__3600
21868     34 24 06 F1 | 	add	local04, #52
2186c     12 13 02 F6 | 	mov	arg01, local04
21870     34 24 86 F1 | 	sub	local04, #52
21874     16 12 06 F1 | 	add	arg01, #22
21878                 | ' {
21878                 | ' 
21878                 | ' 	return *((WORD*)ptr);
21878     09 FB E1 FA | 	rdword	result1, arg01
2187c     FD 2A 0A F6 | 	mov	local07, result1 wz
21880     18 00 90 5D |  if_ne	jmp	#LR__3592
21884     34 24 06 F1 | 	add	local04, #52
21888     12 13 02 F6 | 	mov	arg01, local04
2188c     34 24 86 F1 | 	sub	local04, #52
21890     24 12 06 F1 | 	add	arg01, #36
21894                 | ' {
21894                 | ' 
21894                 | ' 	return *((DWORD*)ptr);
21894     09 FB 01 FB | 	rdlong	result1, arg01
21898     FD 2A 02 F6 | 	mov	local07, result1
2189c                 | LR__3592
2189c     1C 24 06 F1 | 	add	local04, #28
218a0     12 2B 62 FC | 	wrlong	local07, local04
218a4     28 24 06 F1 | 	add	local04, #40
218a8     12 27 C2 FA | 	rdbyte	local05, local04
218ac     42 24 86 F1 | 	sub	local04, #66
218b0     12 27 42 FC | 	wrbyte	local05, local04
218b4     12 27 C2 FA | 	rdbyte	local05, local04
218b8     02 24 86 F1 | 	sub	local04, #2
218bc     01 26 0E F2 | 	cmp	local05, #1 wz
218c0     02 24 06 51 |  if_ne	add	local04, #2
218c4     12 27 C2 5A |  if_ne	rdbyte	local05, local04
218c8     02 24 86 51 |  if_ne	sub	local04, #2
218cc     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
218d0     0D FA 05 56 |  if_ne	mov	result1, #13
218d4     BC 03 90 5D |  if_ne	jmp	#LR__3600
218d8     02 24 06 F1 | 	add	local04, #2
218dc     12 27 C2 FA | 	rdbyte	local05, local04
218e0     13 2B 02 FD | 	qmul	local07, local05
218e4     3F 24 06 F1 | 	add	local04, #63
218e8     12 27 C2 FA | 	rdbyte	local05, local04
218ec     37 24 86 F1 | 	sub	local04, #55
218f0     12 27 52 FC | 	wrword	local05, local04
218f4     12 27 EA FA | 	rdword	local05, local04 wz
218f8     0A 24 86 F1 | 	sub	local04, #10
218fc     18 2A 62 FD | 	getqx	local07
21900     20 00 90 AD |  if_e	jmp	#LR__3593
21904     0A 24 06 F1 | 	add	local04, #10
21908     12 27 E2 FA | 	rdword	local05, local04
2190c     13 23 32 F9 | 	getword	local03, local05, #0
21910     0A 24 86 F1 | 	sub	local04, #10
21914     13 27 32 F9 | 	getword	local05, local05, #0
21918     01 26 86 F1 | 	sub	local05, #1
2191c     13 23 CA F7 | 	test	local03, local05 wz
21920     08 00 90 AD |  if_e	jmp	#LR__3594
21924                 | LR__3593
21924     0D FA 05 F6 | 	mov	result1, #13
21928     68 03 90 FD | 	jmp	#LR__3600
2192c                 | LR__3594
2192c     34 24 06 F1 | 	add	local04, #52
21930     12 13 02 F6 | 	mov	arg01, local04
21934     11 12 06 F1 | 	add	arg01, #17
21938                 | ' {
21938                 | ' 
21938                 | ' 	return *((WORD*)ptr);
21938     09 FB E1 FA | 	rdword	result1, arg01
2193c     2C 24 86 F1 | 	sub	local04, #44
21940     12 FB 51 FC | 	wrword	result1, local04
21944     12 27 E2 FA | 	rdword	local05, local04
21948     08 24 86 F1 | 	sub	local04, #8
2194c     13 13 52 F6 | 	abs	arg01, local05 wc
21950     09 13 42 F8 | 	getnib	arg01, arg01, #0
21954     09 13 8A F6 | 	negc	arg01, arg01 wz
21958     0D FA 05 56 |  if_ne	mov	result1, #13
2195c     34 03 90 5D |  if_ne	jmp	#LR__3600
21960     34 24 06 F1 | 	add	local04, #52
21964     12 13 02 F6 | 	mov	arg01, local04
21968     34 24 86 F1 | 	sub	local04, #52
2196c     13 12 06 F1 | 	add	arg01, #19
21970                 | ' {
21970                 | ' 
21970                 | ' 	return *((WORD*)ptr);
21970     09 FB E1 FA | 	rdword	result1, arg01
21974     FD 2C 0A F6 | 	mov	local08, result1 wz
21978     34 24 06 A1 |  if_e	add	local04, #52
2197c     12 13 02 A6 |  if_e	mov	arg01, local04
21980     34 24 86 A1 |  if_e	sub	local04, #52
21984     20 12 06 A1 |  if_e	add	arg01, #32
21988                 | ' {
21988                 | ' 
21988                 | ' 	return *((DWORD*)ptr);
21988     09 2D 02 AB |  if_e	rdlong	local08, arg01
2198c     34 24 06 F1 | 	add	local04, #52
21990     12 13 02 F6 | 	mov	arg01, local04
21994     34 24 86 F1 | 	sub	local04, #52
21998     0E 12 06 F1 | 	add	arg01, #14
2199c                 | ' {
2199c                 | ' 
2199c                 | ' 	return *((WORD*)ptr);
2199c     09 FB E1 FA | 	rdword	result1, arg01
219a0     FD 12 02 F6 | 	mov	arg01, result1
219a4     09 27 02 F6 | 	mov	local05, arg01
219a8     0F 26 4E F7 | 	zerox	local05, #15 wz
219ac     0D FA 05 A6 |  if_e	mov	result1, #13
219b0     E0 02 90 AD |  if_e	jmp	#LR__3600
219b4     09 2F 32 F9 | 	getword	local09, arg01, #0
219b8     15 2F 02 F1 | 	add	local09, local07
219bc     08 24 06 F1 | 	add	local04, #8
219c0     12 27 E2 FA | 	rdword	local05, local04
219c4     08 24 86 F1 | 	sub	local04, #8
219c8     13 27 52 F6 | 	abs	local05, local05 wc
219cc     04 26 46 F0 | 	shr	local05, #4
219d0     13 2F 82 F3 | 	sumc	local09, local05
219d4     17 2D 12 F2 | 	cmp	local08, local09 wc
219d8     0D FA 05 C6 |  if_b	mov	result1, #13
219dc     B4 02 90 CD |  if_b	jmp	#LR__3600
219e0     17 2D 82 F1 | 	sub	local08, local09
219e4     0A 24 06 F1 | 	add	local04, #10
219e8     12 27 E2 FA | 	rdword	local05, local04
219ec     13 2D 12 FD | 	qdiv	local08, local05
219f0     0A 24 86 F1 | 	sub	local04, #10
219f4     18 26 62 FD | 	getqx	local05
219f8     00 26 0E F2 | 	cmp	local05, #0 wz
219fc     0D FA 05 A6 |  if_e	mov	result1, #13
21a00     90 02 90 AD |  if_e	jmp	#LR__3600
21a04     00 30 06 F6 | 	mov	local10, #0
21a08     FF FF 07 FF 
21a0c     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
21a10     03 30 06 C6 |  if_b	mov	local10, #3
21a14     7F 00 00 FF 
21a18     F6 27 16 F2 | 	cmp	local05, ##65526 wc
21a1c     02 30 06 C6 |  if_b	mov	local10, #2
21a20     07 00 00 FF 
21a24     F6 27 16 F2 | 	cmp	local05, ##4086 wc
21a28     01 30 06 C6 |  if_b	mov	local10, #1
21a2c     00 30 0E F2 | 	cmp	local10, #0 wz
21a30     0D FA 05 A6 |  if_e	mov	result1, #13
21a34     5C 02 90 AD |  if_e	jmp	#LR__3600
21a38     02 26 06 F1 | 	add	local05, #2
21a3c     18 24 06 F1 | 	add	local04, #24
21a40     12 27 62 FC | 	wrlong	local05, local04
21a44     08 24 06 F1 | 	add	local04, #8
21a48     12 29 62 FC | 	wrlong	local06, local04
21a4c     14 27 02 F6 | 	mov	local05, local06
21a50     09 13 32 F9 | 	getword	arg01, arg01, #0
21a54     09 27 02 F1 | 	add	local05, arg01
21a58     04 24 06 F1 | 	add	local04, #4
21a5c     12 27 62 FC | 	wrlong	local05, local04
21a60     14 27 02 F6 | 	mov	local05, local06
21a64     17 27 02 F1 | 	add	local05, local09
21a68     08 24 06 F1 | 	add	local04, #8
21a6c     12 27 62 FC | 	wrlong	local05, local04
21a70     2C 24 86 F1 | 	sub	local04, #44
21a74     03 30 0E F2 | 	cmp	local10, #3 wz
21a78     5C 00 90 5D |  if_ne	jmp	#LR__3595
21a7c     34 24 06 F1 | 	add	local04, #52
21a80     12 13 02 F6 | 	mov	arg01, local04
21a84     34 24 86 F1 | 	sub	local04, #52
21a88     2A 12 06 F1 | 	add	arg01, #42
21a8c                 | ' {
21a8c                 | ' 
21a8c                 | ' 	return *((WORD*)ptr);
21a8c     09 FB E9 FA | 	rdword	result1, arg01 wz
21a90     0D FA 05 56 |  if_ne	mov	result1, #13
21a94     FC 01 90 5D |  if_ne	jmp	#LR__3600
21a98     08 24 06 F1 | 	add	local04, #8
21a9c     12 27 EA FA | 	rdword	local05, local04 wz
21aa0     08 24 86 F1 | 	sub	local04, #8
21aa4     0D FA 05 56 |  if_ne	mov	result1, #13
21aa8     E8 01 90 5D |  if_ne	jmp	#LR__3600
21aac     34 24 06 F1 | 	add	local04, #52
21ab0     12 13 02 F6 | 	mov	arg01, local04
21ab4     2C 12 06 F1 | 	add	arg01, #44
21ab8                 | ' {
21ab8                 | ' 
21ab8                 | ' 	return *((DWORD*)ptr);
21ab8     09 FB 01 FB | 	rdlong	result1, arg01
21abc     0C 24 86 F1 | 	sub	local04, #12
21ac0     12 FB 61 FC | 	wrlong	result1, local04
21ac4     10 24 86 F1 | 	sub	local04, #16
21ac8     12 33 02 FB | 	rdlong	local11, local04
21acc     18 24 86 F1 | 	sub	local04, #24
21ad0     02 32 66 F0 | 	shl	local11, #2
21ad4     6C 00 90 FD | 	jmp	#LR__3597
21ad8                 | LR__3595
21ad8     08 24 06 F1 | 	add	local04, #8
21adc     12 27 EA FA | 	rdword	local05, local04 wz
21ae0     08 24 86 F1 | 	sub	local04, #8
21ae4     0D FA 05 A6 |  if_e	mov	result1, #13
21ae8     A8 01 90 AD |  if_e	jmp	#LR__3600
21aec     24 24 06 F1 | 	add	local04, #36
21af0     12 27 02 FB | 	rdlong	local05, local04
21af4     15 27 02 F1 | 	add	local05, local07
21af8     04 24 06 F1 | 	add	local04, #4
21afc     12 27 62 FC | 	wrlong	local05, local04
21b00     28 24 86 F1 | 	sub	local04, #40
21b04     02 30 0E F2 | 	cmp	local10, #2 wz
21b08     18 24 06 A1 |  if_e	add	local04, #24
21b0c     12 27 02 AB |  if_e	rdlong	local05, local04
21b10     18 24 86 A1 |  if_e	sub	local04, #24
21b14     01 26 66 A0 |  if_e	shl	local05, #1
21b18     24 00 90 AD |  if_e	jmp	#LR__3596
21b1c     18 24 06 F1 | 	add	local04, #24
21b20     12 33 02 FB | 	rdlong	local11, local04
21b24     19 27 02 F6 | 	mov	local05, local11
21b28     01 26 66 F0 | 	shl	local05, #1
21b2c     19 27 02 F1 | 	add	local05, local11
21b30     01 26 46 F0 | 	shr	local05, #1
21b34     18 24 86 F1 | 	sub	local04, #24
21b38     01 32 06 F5 | 	and	local11, #1
21b3c     19 27 02 F1 | 	add	local05, local11
21b40                 | LR__3596
21b40     13 33 02 F6 | 	mov	local11, local05
21b44                 | LR__3597
21b44     FF 33 06 F1 | 	add	local11, #511
21b48     09 32 46 F0 | 	shr	local11, #9
21b4c     1C 24 06 F1 | 	add	local04, #28
21b50     12 17 02 FB | 	rdlong	arg03, local04
21b54     1C 24 86 F1 | 	sub	local04, #28
21b58     19 17 12 F2 | 	cmp	arg03, local11 wc
21b5c     0D FA 05 C6 |  if_b	mov	result1, #13
21b60     30 01 90 CD |  if_b	jmp	#LR__3600
21b64     14 24 06 F1 | 	add	local04, #20
21b68     FF FF FF FF 
21b6c     12 FF 6B FC | 	wrlong	##-1, local04
21b70     04 24 86 F1 | 	sub	local04, #4
21b74     FF FF FF FF 
21b78     12 FF 6B FC | 	wrlong	##-1, local04
21b7c     0C 24 86 F1 | 	sub	local04, #12
21b80     12 01 49 FC | 	wrbyte	#128, local04
21b84     04 24 86 F1 | 	sub	local04, #4
21b88     03 30 0E F2 | 	cmp	local10, #3 wz
21b8c     D0 00 90 5D |  if_ne	jmp	#LR__3599
21b90     34 24 06 F1 | 	add	local04, #52
21b94     12 13 02 F6 | 	mov	arg01, local04
21b98     34 24 86 F1 | 	sub	local04, #52
21b9c     30 12 06 F1 | 	add	arg01, #48
21ba0                 | ' {
21ba0                 | ' 
21ba0                 | ' 	return *((WORD*)ptr);
21ba0     09 FB E1 FA | 	rdword	result1, arg01
21ba4     FD 26 32 F9 | 	getword	local05, result1, #0
21ba8     01 26 0E F2 | 	cmp	local05, #1 wz
21bac     B0 00 90 5D |  if_ne	jmp	#LR__3599
21bb0     01 28 06 F1 | 	add	local06, #1
21bb4     12 13 02 F6 | 	mov	arg01, local04
21bb8     14 15 02 F6 | 	mov	arg02, local06
21bbc     CC CD BF FD | 	call	#_fatfs_cc_move_window
21bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
21bc4     98 00 90 5D |  if_ne	jmp	#LR__3599
21bc8     04 24 06 F1 | 	add	local04, #4
21bcc     12 01 48 FC | 	wrbyte	#0, local04
21bd0     30 24 06 F1 | 	add	local04, #48
21bd4     12 13 02 F6 | 	mov	arg01, local04
21bd8     34 24 86 F1 | 	sub	local04, #52
21bdc     FE 13 06 F1 | 	add	arg01, #510
21be0                 | ' {
21be0                 | ' 
21be0                 | ' 	return *((WORD*)ptr);
21be0     09 FB E1 FA | 	rdword	result1, arg01
21be4     FD 26 32 F9 | 	getword	local05, result1, #0
21be8     55 00 00 FF 
21bec     55 26 0E F2 | 	cmp	local05, ##43605 wz
21bf0     34 24 06 A1 |  if_e	add	local04, #52
21bf4     12 13 02 A6 |  if_e	mov	arg01, local04
21bf8     34 24 86 A1 |  if_e	sub	local04, #52
21bfc                 | ' {
21bfc                 | ' 
21bfc                 | ' 	return *((DWORD*)ptr);
21bfc     09 FB 01 AB |  if_e	rdlong	result1, arg01
21c00     A9 B0 20 AF 
21c04     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
21c08     54 00 90 5D |  if_ne	jmp	#LR__3598
21c0c     34 24 06 F1 | 	add	local04, #52
21c10     12 13 02 F6 | 	mov	arg01, local04
21c14     34 24 86 F1 | 	sub	local04, #52
21c18     E4 13 06 F1 | 	add	arg01, #484
21c1c                 | ' {
21c1c                 | ' 
21c1c                 | ' 	return *((DWORD*)ptr);
21c1c     09 FB 01 FB | 	rdlong	result1, arg01
21c20     B9 A0 30 FF 
21c24     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
21c28     34 00 90 5D |  if_ne	jmp	#LR__3598
21c2c     34 24 06 F1 | 	add	local04, #52
21c30     12 13 02 F6 | 	mov	arg01, local04
21c34     E8 13 06 F1 | 	add	arg01, #488
21c38                 | ' {
21c38                 | ' 
21c38                 | ' 	return *((DWORD*)ptr);
21c38     09 FB 01 FB | 	rdlong	result1, arg01
21c3c     20 24 86 F1 | 	sub	local04, #32
21c40     12 FB 61 FC | 	wrlong	result1, local04
21c44     20 24 06 F1 | 	add	local04, #32
21c48     12 13 02 F6 | 	mov	arg01, local04
21c4c     EC 13 06 F1 | 	add	arg01, #492
21c50                 | ' {
21c50                 | ' 
21c50                 | ' 	return *((DWORD*)ptr);
21c50     09 FB 01 FB | 	rdlong	result1, arg01
21c54     24 24 86 F1 | 	sub	local04, #36
21c58     12 FB 61 FC | 	wrlong	result1, local04
21c5c     10 24 86 F1 | 	sub	local04, #16
21c60                 | LR__3598
21c60                 | LR__3599
21c60     12 31 42 FC | 	wrbyte	local10, local04
21c64     04 E4 05 F1 | 	add	objptr, #4
21c68     F2 26 E2 FA | 	rdword	local05, objptr
21c6c     01 26 06 F1 | 	add	local05, #1
21c70     F2 26 52 FC | 	wrword	local05, objptr
21c74     F2 32 E2 FA | 	rdword	local11, objptr
21c78     06 24 06 F1 | 	add	local04, #6
21c7c     12 33 52 FC | 	wrword	local11, local04
21c80     04 E4 05 F1 | 	add	objptr, #4
21c84     06 24 06 F1 | 	add	local04, #6
21c88     12 E5 61 FC | 	wrlong	objptr, local04
21c8c                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
21c8c                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
21c8c                 | ' 			{
21c8c                 | ' 
21c8c                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
21c8c                 | ' 
21c8c                 | ' 
21c8c                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
21c8c                 | ' 
21c8c                 | ' 			}
21c8c                 | ' 		}
21c8c                 | ' 
21c8c                 | ' 
21c8c                 | ' 	}
21c8c                 | ' 
21c8c                 | ' 	fs->fs_type = (BYTE)fmt;
21c8c                 | ' 	fs->id = ++Fsid;
21c8c                 | ' 
21c8c                 | ' 	fs->lfnbuf = LfnBuf;
21c8c                 | ' #line 3567 "ff.c"
21c8c                 | ' 	return FR_OK;
21c8c     00 FA 05 F6 | 	mov	result1, #0
21c90     08 E4 85 F1 | 	sub	objptr, #8
21c94                 | LR__3600
21c94     A7 F0 03 F6 | 	mov	ptra, fp
21c98     B2 00 A0 FD | 	call	#popregs_
21c9c                 | _fatfs_cc_mount_volume_ret
21c9c     2D 00 64 FD | 	ret
21ca0                 | 
21ca0                 | _fatfs_cc_validate
21ca0     09 01 0A F6 | 	mov	_var01, arg01 wz
21ca4     09 02 06 F6 | 	mov	_var02, #9
21ca8     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
21cac     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
21cb0     50 00 90 AD |  if_e	jmp	#LR__3610
21cb4     04 00 06 F1 | 	add	_var01, #4
21cb8     00 07 E2 FA | 	rdword	_var04, _var01
21cbc     04 00 86 F1 | 	sub	_var01, #4
21cc0     00 13 02 FB | 	rdlong	arg01, _var01
21cc4     06 12 06 F1 | 	add	arg01, #6
21cc8     09 FB E1 FA | 	rdword	result1, arg01
21ccc     FD 06 0A F2 | 	cmp	_var04, result1 wz
21cd0     30 00 90 5D |  if_ne	jmp	#LR__3610
21cd4     00 07 02 FB | 	rdlong	_var04, _var01
21cd8     01 06 06 F1 | 	add	_var04, #1
21cdc     03 13 CA FA | 	rdbyte	arg01, _var04 wz
21ce0     01 FA 05 56 |  if_ne	mov	result1, #1
21ce4                 | ' 
21ce4                 | ' 	return Stat;
21ce4     01 00 00 AF 
21ce8     20 E4 05 A1 |  if_e	add	objptr, ##544
21cec     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
21cf0     01 00 00 AF 
21cf4     20 E4 85 A1 |  if_e	sub	objptr, ##544
21cf8     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
21cfc     01 04 CE F7 | 	test	_var03, #1 wz
21d00     00 02 06 A6 |  if_e	mov	_var02, #0
21d04                 | LR__3610
21d04     00 02 0E F2 | 	cmp	_var02, #0 wz
21d08     00 05 02 AB |  if_e	rdlong	_var03, _var01
21d0c     00 04 06 56 |  if_ne	mov	_var03, #0
21d10     0A 05 62 FC | 	wrlong	_var03, arg02
21d14                 | ' 			res = FR_OK;
21d14                 | ' 		}
21d14                 | ' 
21d14                 | ' 	}
21d14                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
21d14                 | ' 	return res;
21d14     01 FB 01 F6 | 	mov	result1, _var02
21d18                 | _fatfs_cc_validate_ret
21d18     2D 00 64 FD | 	ret
21d1c                 | 
21d1c                 | _fatfs_cc_f_mount
21d1c     01 4A 05 F6 | 	mov	COUNT_, #1
21d20     A8 00 A0 FD | 	call	#pushregs_
21d24     20 F0 07 F1 | 	add	ptra, #32
21d28     04 4E 05 F1 | 	add	fp, #4
21d2c     A7 12 62 FC | 	wrlong	arg01, fp
21d30     04 4E 05 F1 | 	add	fp, #4
21d34     A7 14 62 FC | 	wrlong	arg02, fp
21d38     04 4E 05 F1 | 	add	fp, #4
21d3c     A7 16 42 FC | 	wrbyte	arg03, fp
21d40     04 4E 85 F1 | 	sub	fp, #4
21d44     A7 16 02 FB | 	rdlong	arg03, fp
21d48     14 4E 05 F1 | 	add	fp, #20
21d4c     A7 16 62 FC | 	wrlong	arg03, fp
21d50     A7 12 02 F6 | 	mov	arg01, fp
21d54     1C 4E 85 F1 | 	sub	fp, #28
21d58     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
21d5c     14 4E 05 F1 | 	add	fp, #20
21d60     A7 FA 61 FC | 	wrlong	result1, fp
21d64     14 4E 85 F1 | 	sub	fp, #20
21d68     00 FA 55 F2 | 	cmps	result1, #0 wc
21d6c     0B FA 05 C6 |  if_b	mov	result1, #11
21d70     C0 00 90 CD |  if_b	jmp	#LR__3621
21d74     14 4E 05 F1 | 	add	fp, #20
21d78     A7 16 02 FB | 	rdlong	arg03, fp
21d7c     02 16 66 F0 | 	shl	arg03, #2
21d80     F2 16 02 F1 | 	add	arg03, objptr
21d84     0B 17 0A FB | 	rdlong	arg03, arg03 wz
21d88     04 4E 85 F1 | 	sub	fp, #4
21d8c     A7 16 62 FC | 	wrlong	arg03, fp
21d90     10 4E 85 F1 | 	sub	fp, #16
21d94     28 00 90 AD |  if_e	jmp	#LR__3620
21d98     10 4E 05 F1 | 	add	fp, #16
21d9c     A7 16 02 FB | 	rdlong	arg03, fp
21da0     10 4E 85 F1 | 	sub	fp, #16
21da4     01 16 06 F1 | 	add	arg03, #1
21da8     0B 13 C2 FA | 	rdbyte	arg01, arg03
21dac     30 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
21db0     10 4E 05 F1 | 	add	fp, #16
21db4     A7 16 02 FB | 	rdlong	arg03, fp
21db8     10 4E 85 F1 | 	sub	fp, #16
21dbc     0B 01 48 FC | 	wrbyte	#0, arg03
21dc0                 | LR__3620
21dc0     04 4E 05 F1 | 	add	fp, #4
21dc4     A7 1E 0A FB | 	rdlong	local01, fp wz
21dc8     04 4E 85 F1 | 	sub	fp, #4
21dcc     04 4E 05 51 |  if_ne	add	fp, #4
21dd0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
21dd4     04 4E 85 51 |  if_ne	sub	fp, #4
21dd8     0F 01 48 5C |  if_ne	wrbyte	#0, local01
21ddc     14 4E 05 F1 | 	add	fp, #20
21de0     A7 1E 02 FB | 	rdlong	local01, fp
21de4     02 1E 66 F0 | 	shl	local01, #2
21de8     F2 1E 02 F1 | 	add	local01, objptr
21dec     10 4E 85 F1 | 	sub	fp, #16
21df0     A7 16 02 FB | 	rdlong	arg03, fp
21df4     0F 17 62 FC | 	wrlong	arg03, local01
21df8     08 4E 05 F1 | 	add	fp, #8
21dfc     A7 1E CA FA | 	rdbyte	local01, fp wz
21e00     0C 4E 85 F1 | 	sub	fp, #12
21e04     00 FA 05 A6 |  if_e	mov	result1, #0
21e08     28 00 90 AD |  if_e	jmp	#LR__3621
21e0c     08 4E 05 F1 | 	add	fp, #8
21e10     A7 12 02 F6 | 	mov	arg01, fp
21e14     04 4E 85 F1 | 	sub	fp, #4
21e18     A7 14 02 F6 | 	mov	arg02, fp
21e1c     04 4E 85 F1 | 	sub	fp, #4
21e20     00 16 06 F6 | 	mov	arg03, #0
21e24     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
21e28     18 4E 05 F1 | 	add	fp, #24
21e2c     A7 FA 61 FC | 	wrlong	result1, fp
21e30                 | ' 
21e30                 | ' 	res = mount_volume(&path, &fs, 0);
21e30                 | ' 	return res ;
21e30     18 4E 85 F1 | 	sub	fp, #24
21e34                 | LR__3621
21e34     A7 F0 03 F6 | 	mov	ptra, fp
21e38     B2 00 A0 FD | 	call	#popregs_
21e3c                 | _fatfs_cc_f_mount_ret
21e3c     2D 00 64 FD | 	ret
21e40                 | 
21e40                 | _fatfs_cc_f_open
21e40     02 4A 05 F6 | 	mov	COUNT_, #2
21e44     A8 00 A0 FD | 	call	#pushregs_
21e48     60 F0 07 F1 | 	add	ptra, #96
21e4c     04 4E 05 F1 | 	add	fp, #4
21e50     A7 12 62 FC | 	wrlong	arg01, fp
21e54     04 4E 05 F1 | 	add	fp, #4
21e58     A7 14 62 FC | 	wrlong	arg02, fp
21e5c     04 4E 05 F1 | 	add	fp, #4
21e60     A7 16 42 FC | 	wrbyte	arg03, fp
21e64     08 4E 85 F1 | 	sub	fp, #8
21e68     A7 18 0A FB | 	rdlong	arg04, fp wz
21e6c     04 4E 85 F1 | 	sub	fp, #4
21e70     09 FA 05 A6 |  if_e	mov	result1, #9
21e74     98 06 90 AD |  if_e	jmp	#LR__3647
21e78     0C 4E 05 F1 | 	add	fp, #12
21e7c     A7 18 C2 FA | 	rdbyte	arg04, fp
21e80     3F 18 06 F5 | 	and	arg04, #63
21e84     A7 18 42 FC | 	wrbyte	arg04, fp
21e88     04 4E 85 F1 | 	sub	fp, #4
21e8c     A7 12 02 F6 | 	mov	arg01, fp
21e90     3C 4E 05 F1 | 	add	fp, #60
21e94     A7 14 02 F6 | 	mov	arg02, fp
21e98     38 4E 85 F1 | 	sub	fp, #56
21e9c     A7 16 C2 FA | 	rdbyte	arg03, fp
21ea0     0C 4E 85 F1 | 	sub	fp, #12
21ea4     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
21ea8     10 4E 05 F1 | 	add	fp, #16
21eac     A7 FA 61 FC | 	wrlong	result1, fp
21eb0     10 4E 85 F1 | 	sub	fp, #16
21eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
21eb8     2C 06 90 5D |  if_ne	jmp	#LR__3646
21ebc     44 4E 05 F1 | 	add	fp, #68
21ec0     A7 18 02 FB | 	rdlong	arg04, fp
21ec4     30 4E 85 F1 | 	sub	fp, #48
21ec8     A7 18 62 FC | 	wrlong	arg04, fp
21ecc     A7 12 02 F6 | 	mov	arg01, fp
21ed0     0C 4E 85 F1 | 	sub	fp, #12
21ed4     A7 1E 02 FB | 	rdlong	local01, fp
21ed8     08 4E 85 F1 | 	sub	fp, #8
21edc     0F 15 02 F6 | 	mov	arg02, local01
21ee0     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
21ee4     10 4E 05 F1 | 	add	fp, #16
21ee8     A7 FA 61 FC | 	wrlong	result1, fp
21eec     10 4E 85 F1 | 	sub	fp, #16
21ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
21ef4     1C 00 90 5D |  if_ne	jmp	#LR__3630
21ef8     3F 4E 05 F1 | 	add	fp, #63
21efc     A7 18 C2 FA | 	rdbyte	arg04, fp
21f00     3F 4E 85 F1 | 	sub	fp, #63
21f04     80 18 CE F7 | 	test	arg04, #128 wz
21f08     10 4E 05 51 |  if_ne	add	fp, #16
21f0c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
21f10     10 4E 85 51 |  if_ne	sub	fp, #16
21f14                 | LR__3630
21f14     0C 4E 05 F1 | 	add	fp, #12
21f18     A7 18 C2 FA | 	rdbyte	arg04, fp
21f1c     0C 4E 85 F1 | 	sub	fp, #12
21f20     1C 18 CE F7 | 	test	arg04, #28 wz
21f24     F0 01 90 AD |  if_e	jmp	#LR__3635
21f28     10 4E 05 F1 | 	add	fp, #16
21f2c     A7 1E 0A FB | 	rdlong	local01, fp wz
21f30     10 4E 85 F1 | 	sub	fp, #16
21f34     48 00 90 AD |  if_e	jmp	#LR__3632
21f38     10 4E 05 F1 | 	add	fp, #16
21f3c     A7 18 02 FB | 	rdlong	arg04, fp
21f40     10 4E 85 F1 | 	sub	fp, #16
21f44     04 18 0E F2 | 	cmp	arg04, #4 wz
21f48     1C 00 90 5D |  if_ne	jmp	#LR__3631
21f4c     14 4E 05 F1 | 	add	fp, #20
21f50     A7 12 02 F6 | 	mov	arg01, fp
21f54     14 4E 85 F1 | 	sub	fp, #20
21f58     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
21f5c     10 4E 05 F1 | 	add	fp, #16
21f60     A7 FA 61 FC | 	wrlong	result1, fp
21f64     10 4E 85 F1 | 	sub	fp, #16
21f68                 | LR__3631
21f68     0C 4E 05 F1 | 	add	fp, #12
21f6c     A7 1E C2 FA | 	rdbyte	local01, fp
21f70     08 1E 46 F5 | 	or	local01, #8
21f74     A7 1E 42 FC | 	wrbyte	local01, fp
21f78     0C 4E 85 F1 | 	sub	fp, #12
21f7c     3C 00 90 FD | 	jmp	#LR__3634
21f80                 | LR__3632
21f80     1A 4E 05 F1 | 	add	fp, #26
21f84     A7 1E C2 FA | 	rdbyte	local01, fp
21f88     1A 4E 85 F1 | 	sub	fp, #26
21f8c     11 1E CE F7 | 	test	local01, #17 wz
21f90     10 4E 05 51 |  if_ne	add	fp, #16
21f94     A7 0E 68 5C |  if_ne	wrlong	#7, fp
21f98     10 4E 85 51 |  if_ne	sub	fp, #16
21f9c     1C 00 90 5D |  if_ne	jmp	#LR__3633
21fa0     0C 4E 05 F1 | 	add	fp, #12
21fa4     A7 1E C2 FA | 	rdbyte	local01, fp
21fa8     0C 4E 85 F1 | 	sub	fp, #12
21fac     04 1E CE F7 | 	test	local01, #4 wz
21fb0     10 4E 05 51 |  if_ne	add	fp, #16
21fb4     A7 10 68 5C |  if_ne	wrlong	#8, fp
21fb8     10 4E 85 51 |  if_ne	sub	fp, #16
21fbc                 | LR__3633
21fbc                 | LR__3634
21fbc     10 4E 05 F1 | 	add	fp, #16
21fc0     A7 1E 0A FB | 	rdlong	local01, fp wz
21fc4     10 4E 85 F1 | 	sub	fp, #16
21fc8     A8 01 90 5D |  if_ne	jmp	#LR__3638
21fcc     0C 4E 05 F1 | 	add	fp, #12
21fd0     A7 1E C2 FA | 	rdbyte	local01, fp
21fd4     0C 4E 85 F1 | 	sub	fp, #12
21fd8     08 1E CE F7 | 	test	local01, #8 wz
21fdc     94 01 90 AD |  if_e	jmp	#LR__3638
21fe0     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
21fe4     54 4E 05 F1 | 	add	fp, #84
21fe8     A7 FA 61 FC | 	wrlong	result1, fp
21fec     24 4E 85 F1 | 	sub	fp, #36
21ff0     A7 12 02 FB | 	rdlong	arg01, fp
21ff4     0E 12 06 F1 | 	add	arg01, #14
21ff8     09 FB 61 FC | 	wrlong	result1, arg01
21ffc     A7 12 02 FB | 	rdlong	arg01, fp
22000     16 12 06 F1 | 	add	arg01, #22
22004     24 4E 05 F1 | 	add	fp, #36
22008     A7 14 02 FB | 	rdlong	arg02, fp
2200c     09 15 62 FC | 	wrlong	arg02, arg01
22010     10 4E 85 F1 | 	sub	fp, #16
22014     A7 12 02 FB | 	rdlong	arg01, fp
22018     14 4E 85 F1 | 	sub	fp, #20
2201c     A7 14 02 FB | 	rdlong	arg02, fp
22020     30 4E 85 F1 | 	sub	fp, #48
22024     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
22028     48 4E 05 F1 | 	add	fp, #72
2202c     A7 FA 61 FC | 	wrlong	result1, fp
22030     18 4E 85 F1 | 	sub	fp, #24
22034     A7 1E 02 FB | 	rdlong	local01, fp
22038     0B 1E 06 F1 | 	add	local01, #11
2203c     0F 41 48 FC | 	wrbyte	#32, local01
22040     14 4E 05 F1 | 	add	fp, #20
22044     A7 12 02 FB | 	rdlong	arg01, fp
22048     14 4E 85 F1 | 	sub	fp, #20
2204c     A7 14 02 FB | 	rdlong	arg02, fp
22050     30 4E 85 F1 | 	sub	fp, #48
22054     00 16 06 F6 | 	mov	arg03, #0
22058     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2205c     30 4E 05 F1 | 	add	fp, #48
22060     A7 12 02 FB | 	rdlong	arg01, fp
22064     1C 12 06 F1 | 	add	arg01, #28
22068     09 01 68 FC | 	wrlong	#0, arg01
2206c     14 4E 05 F1 | 	add	fp, #20
22070     A7 1E 02 FB | 	rdlong	local01, fp
22074     03 1E 06 F1 | 	add	local01, #3
22078     0F 03 48 FC | 	wrbyte	#1, local01
2207c     04 4E 05 F1 | 	add	fp, #4
22080     A7 1E 0A FB | 	rdlong	local01, fp wz
22084     48 4E 85 F1 | 	sub	fp, #72
22088     E8 00 90 AD |  if_e	jmp	#LR__3638
2208c     44 4E 05 F1 | 	add	fp, #68
22090     A7 1E 02 FB | 	rdlong	local01, fp
22094     30 1E 06 F1 | 	add	local01, #48
22098     0F 1F 02 FB | 	rdlong	local01, local01
2209c     14 4E 05 F1 | 	add	fp, #20
220a0     A7 1E 62 FC | 	wrlong	local01, fp
220a4     44 4E 85 F1 | 	sub	fp, #68
220a8     A7 12 02 F6 | 	mov	arg01, fp
220ac     34 4E 05 F1 | 	add	fp, #52
220b0     A7 14 02 FB | 	rdlong	arg02, fp
220b4     48 4E 85 F1 | 	sub	fp, #72
220b8     00 16 06 F6 | 	mov	arg03, #0
220bc     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
220c0     10 4E 05 F1 | 	add	fp, #16
220c4     A7 FA 61 FC | 	wrlong	result1, fp
220c8     10 4E 85 F1 | 	sub	fp, #16
220cc     00 FA 0D F2 | 	cmp	result1, #0 wz
220d0     A0 00 90 5D |  if_ne	jmp	#LR__3638
220d4     44 4E 05 F1 | 	add	fp, #68
220d8     A7 12 02 FB | 	rdlong	arg01, fp
220dc     14 4E 05 F1 | 	add	fp, #20
220e0     A7 14 02 FB | 	rdlong	arg02, fp
220e4     58 4E 85 F1 | 	sub	fp, #88
220e8     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
220ec     10 4E 05 F1 | 	add	fp, #16
220f0     A7 FA 61 FC | 	wrlong	result1, fp
220f4     34 4E 05 F1 | 	add	fp, #52
220f8     A7 18 02 FB | 	rdlong	arg04, fp
220fc     04 4E 05 F1 | 	add	fp, #4
22100     A7 1E 02 FB | 	rdlong	local01, fp
22104     48 4E 85 F1 | 	sub	fp, #72
22108     01 1E 86 F1 | 	sub	local01, #1
2210c     10 18 06 F1 | 	add	arg04, #16
22110     0C 1F 62 FC | 	wrlong	local01, arg04
22114     5C 00 90 FD | 	jmp	#LR__3638
22118                 | LR__3635
22118     10 4E 05 F1 | 	add	fp, #16
2211c     A7 18 0A FB | 	rdlong	arg04, fp wz
22120     10 4E 85 F1 | 	sub	fp, #16
22124     4C 00 90 5D |  if_ne	jmp	#LR__3637
22128     1A 4E 05 F1 | 	add	fp, #26
2212c     A7 18 C2 FA | 	rdbyte	arg04, fp
22130     1A 4E 85 F1 | 	sub	fp, #26
22134     10 18 CE F7 | 	test	arg04, #16 wz
22138     10 4E 05 51 |  if_ne	add	fp, #16
2213c     A7 08 68 5C |  if_ne	wrlong	#4, fp
22140     10 4E 85 51 |  if_ne	sub	fp, #16
22144     2C 00 90 5D |  if_ne	jmp	#LR__3636
22148     0C 4E 05 F1 | 	add	fp, #12
2214c     A7 18 C2 FA | 	rdbyte	arg04, fp
22150     0C 4E 85 F1 | 	sub	fp, #12
22154     02 18 CE F7 | 	test	arg04, #2 wz
22158     1A 4E 05 51 |  if_ne	add	fp, #26
2215c     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
22160     1A 4E 85 51 |  if_ne	sub	fp, #26
22164     01 1E CE 57 |  if_ne	test	local01, #1 wz
22168     10 4E 05 51 |  if_ne	add	fp, #16
2216c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
22170     10 4E 85 51 |  if_ne	sub	fp, #16
22174                 | LR__3636
22174                 | LR__3637
22174                 | LR__3638
22174     10 4E 05 F1 | 	add	fp, #16
22178     A7 1E 0A FB | 	rdlong	local01, fp wz
2217c     10 4E 85 F1 | 	sub	fp, #16
22180     60 00 90 5D |  if_ne	jmp	#LR__3639
22184     0C 4E 05 F1 | 	add	fp, #12
22188     A7 20 C2 FA | 	rdbyte	local02, fp
2218c     0C 4E 85 F1 | 	sub	fp, #12
22190     08 20 CE F7 | 	test	local02, #8 wz
22194     0C 4E 05 51 |  if_ne	add	fp, #12
22198     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
2219c     40 20 46 55 |  if_ne	or	local02, #64
221a0     A7 20 42 5C |  if_ne	wrbyte	local02, fp
221a4     0C 4E 85 51 |  if_ne	sub	fp, #12
221a8     04 4E 05 F1 | 	add	fp, #4
221ac     A7 20 02 FB | 	rdlong	local02, fp
221b0     40 4E 05 F1 | 	add	fp, #64
221b4     A7 1E 02 FB | 	rdlong	local01, fp
221b8     30 1E 06 F1 | 	add	local01, #48
221bc     0F 1F 02 FB | 	rdlong	local01, local01
221c0     20 20 06 F1 | 	add	local02, #32
221c4     10 1F 62 FC | 	wrlong	local01, local02
221c8     40 4E 85 F1 | 	sub	fp, #64
221cc     A7 20 02 FB | 	rdlong	local02, fp
221d0     2C 4E 05 F1 | 	add	fp, #44
221d4     A7 1E 02 FB | 	rdlong	local01, fp
221d8     30 4E 85 F1 | 	sub	fp, #48
221dc     24 20 06 F1 | 	add	local02, #36
221e0     10 1F 62 FC | 	wrlong	local01, local02
221e4                 | LR__3639
221e4     10 4E 05 F1 | 	add	fp, #16
221e8     A7 20 0A FB | 	rdlong	local02, fp wz
221ec     10 4E 85 F1 | 	sub	fp, #16
221f0     F4 02 90 5D |  if_ne	jmp	#LR__3645
221f4     04 4E 05 F1 | 	add	fp, #4
221f8     A7 20 02 FB | 	rdlong	local02, fp
221fc     40 4E 05 F1 | 	add	fp, #64
22200     A7 12 02 FB | 	rdlong	arg01, fp
22204     14 4E 85 F1 | 	sub	fp, #20
22208     A7 14 02 FB | 	rdlong	arg02, fp
2220c     30 4E 85 F1 | 	sub	fp, #48
22210     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
22214     08 20 06 F1 | 	add	local02, #8
22218     10 FB 61 FC | 	wrlong	result1, local02
2221c     04 4E 05 F1 | 	add	fp, #4
22220     A7 20 02 FB | 	rdlong	local02, fp
22224     2C 4E 05 F1 | 	add	fp, #44
22228     A7 12 02 FB | 	rdlong	arg01, fp
2222c     1C 12 06 F1 | 	add	arg01, #28
22230                 | ' {
22230                 | ' 
22230                 | ' 	return *((DWORD*)ptr);
22230     09 FB 01 FB | 	rdlong	result1, arg01
22234     0C 20 06 F1 | 	add	local02, #12
22238     10 FB 61 FC | 	wrlong	result1, local02
2223c     2C 4E 85 F1 | 	sub	fp, #44
22240     A7 20 02 FB | 	rdlong	local02, fp
22244     40 4E 05 F1 | 	add	fp, #64
22248     A7 1E 02 FB | 	rdlong	local01, fp
2224c     10 1F 62 FC | 	wrlong	local01, local02
22250     40 4E 85 F1 | 	sub	fp, #64
22254     A7 20 02 FB | 	rdlong	local02, fp
22258     40 4E 05 F1 | 	add	fp, #64
2225c     A7 1E 02 FB | 	rdlong	local01, fp
22260     06 1E 06 F1 | 	add	local01, #6
22264     0F 1F E2 FA | 	rdword	local01, local01
22268     04 20 06 F1 | 	add	local02, #4
2226c     10 1F 52 FC | 	wrword	local01, local02
22270     40 4E 85 F1 | 	sub	fp, #64
22274     A7 20 02 FB | 	rdlong	local02, fp
22278     08 4E 05 F1 | 	add	fp, #8
2227c     A7 1E C2 FA | 	rdbyte	local01, fp
22280     10 20 06 F1 | 	add	local02, #16
22284     10 1F 42 FC | 	wrbyte	local01, local02
22288     08 4E 85 F1 | 	sub	fp, #8
2228c     A7 20 02 FB | 	rdlong	local02, fp
22290     11 20 06 F1 | 	add	local02, #17
22294     10 01 48 FC | 	wrbyte	#0, local02
22298     A7 20 02 FB | 	rdlong	local02, fp
2229c     1C 20 06 F1 | 	add	local02, #28
222a0     10 01 68 FC | 	wrlong	#0, local02
222a4     A7 20 02 FB | 	rdlong	local02, fp
222a8     14 20 06 F1 | 	add	local02, #20
222ac     10 01 68 FC | 	wrlong	#0, local02
222b0     A7 12 02 FB | 	rdlong	arg01, fp
222b4     04 4E 85 F1 | 	sub	fp, #4
222b8     28 12 06 F1 | 	add	arg01, #40
222bc     00 14 06 F6 | 	mov	arg02, #0
222c0     09 16 C6 F9 | 	decod	arg03, #9
222c4     98 00 A0 FD | 	call	#\builtin_bytefill_
222c8     0C 4E 05 F1 | 	add	fp, #12
222cc     A7 20 C2 FA | 	rdbyte	local02, fp
222d0     0C 4E 85 F1 | 	sub	fp, #12
222d4     20 20 CE F7 | 	test	local02, #32 wz
222d8     0C 02 90 AD |  if_e	jmp	#LR__3644
222dc     04 4E 05 F1 | 	add	fp, #4
222e0     A7 1E 02 FB | 	rdlong	local01, fp
222e4     04 4E 85 F1 | 	sub	fp, #4
222e8     0C 1E 06 F1 | 	add	local01, #12
222ec     0F 21 02 FB | 	rdlong	local02, local01
222f0     01 20 16 F2 | 	cmp	local02, #1 wc
222f4     F0 01 90 CD |  if_b	jmp	#LR__3644
222f8     04 4E 05 F1 | 	add	fp, #4
222fc     A7 1E 02 FB | 	rdlong	local01, fp
22300     0F 21 02 F6 | 	mov	local02, local01
22304     0C 1E 06 F1 | 	add	local01, #12
22308     0F 1F 02 FB | 	rdlong	local01, local01
2230c     14 20 06 F1 | 	add	local02, #20
22310     10 1F 62 FC | 	wrlong	local01, local02
22314     40 4E 05 F1 | 	add	fp, #64
22318     A7 20 02 FB | 	rdlong	local02, fp
2231c     0A 20 06 F1 | 	add	local02, #10
22320     10 21 E2 FA | 	rdword	local02, local02
22324     09 20 66 F0 | 	shl	local02, #9
22328     08 4E 05 F1 | 	add	fp, #8
2232c     A7 20 62 FC | 	wrlong	local02, fp
22330     48 4E 85 F1 | 	sub	fp, #72
22334     A7 20 02 FB | 	rdlong	local02, fp
22338     08 20 06 F1 | 	add	local02, #8
2233c     10 1F 02 FB | 	rdlong	local01, local02
22340     4C 4E 05 F1 | 	add	fp, #76
22344     A7 1E 62 FC | 	wrlong	local01, fp
22348                 | ' 				fp->fptr = fp->obj.objsize;
22348                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
22348                 | ' 				clst = fp->obj.sclust;
22348                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
22348     4C 4E 85 F1 | 	sub	fp, #76
2234c     A7 20 02 FB | 	rdlong	local02, fp
22350     0C 20 06 F1 | 	add	local02, #12
22354     10 1F 02 FB | 	rdlong	local01, local02
22358     58 4E 05 F1 | 	add	fp, #88
2235c     A7 1E 62 FC | 	wrlong	local01, fp
22360     5C 4E 85 F1 | 	sub	fp, #92
22364                 | LR__3640
22364     10 4E 05 F1 | 	add	fp, #16
22368     A7 20 0A FB | 	rdlong	local02, fp wz
2236c     10 4E 85 F1 | 	sub	fp, #16
22370     94 00 90 5D |  if_ne	jmp	#LR__3641
22374     5C 4E 05 F1 | 	add	fp, #92
22378     A7 20 02 FB | 	rdlong	local02, fp
2237c     10 4E 85 F1 | 	sub	fp, #16
22380     A7 1E 02 FB | 	rdlong	local01, fp
22384     4C 4E 85 F1 | 	sub	fp, #76
22388     0F 21 1A F2 | 	cmp	local02, local01 wcz
2238c     78 00 90 ED |  if_be	jmp	#LR__3641
22390     04 4E 05 F1 | 	add	fp, #4
22394     A7 12 02 FB | 	rdlong	arg01, fp
22398     4C 4E 05 F1 | 	add	fp, #76
2239c     A7 14 02 FB | 	rdlong	arg02, fp
223a0     50 4E 85 F1 | 	sub	fp, #80
223a4     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
223a8     50 4E 05 F1 | 	add	fp, #80
223ac     A7 FA 61 FC | 	wrlong	result1, fp
223b0     50 4E 85 F1 | 	sub	fp, #80
223b4     02 FA 15 F2 | 	cmp	result1, #2 wc
223b8     10 4E 05 C1 |  if_b	add	fp, #16
223bc     A7 04 68 CC |  if_b	wrlong	#2, fp
223c0     10 4E 85 C1 |  if_b	sub	fp, #16
223c4     50 4E 05 F1 | 	add	fp, #80
223c8     A7 20 02 FB | 	rdlong	local02, fp
223cc     50 4E 85 F1 | 	sub	fp, #80
223d0     FF FF 7F FF 
223d4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
223d8     10 4E 05 A1 |  if_e	add	fp, #16
223dc     A7 02 68 AC |  if_e	wrlong	#1, fp
223e0     10 4E 85 A1 |  if_e	sub	fp, #16
223e4     5C 4E 05 F1 | 	add	fp, #92
223e8     A7 20 02 FB | 	rdlong	local02, fp
223ec     10 4E 85 F1 | 	sub	fp, #16
223f0     A7 1E 02 FB | 	rdlong	local01, fp
223f4     0F 21 82 F1 | 	sub	local02, local01
223f8     10 4E 05 F1 | 	add	fp, #16
223fc     A7 20 62 FC | 	wrlong	local02, fp
22400     5C 4E 85 F1 | 	sub	fp, #92
22404     5C FF 9F FD | 	jmp	#LR__3640
22408                 | LR__3641
22408     04 4E 05 F1 | 	add	fp, #4
2240c     A7 20 02 FB | 	rdlong	local02, fp
22410     4C 4E 05 F1 | 	add	fp, #76
22414     A7 1E 02 FB | 	rdlong	local01, fp
22418     18 20 06 F1 | 	add	local02, #24
2241c     10 1F 62 FC | 	wrlong	local01, local02
22420     40 4E 85 F1 | 	sub	fp, #64
22424     A7 20 0A FB | 	rdlong	local02, fp wz
22428     10 4E 85 F1 | 	sub	fp, #16
2242c     B8 00 90 5D |  if_ne	jmp	#LR__3643
22430     5C 4E 05 F1 | 	add	fp, #92
22434     A7 1E 02 FB | 	rdlong	local01, fp
22438     5C 4E 85 F1 | 	sub	fp, #92
2243c     FF 1F CE F7 | 	test	local01, #511 wz
22440     A4 00 90 AD |  if_e	jmp	#LR__3643
22444     44 4E 05 F1 | 	add	fp, #68
22448     A7 12 02 FB | 	rdlong	arg01, fp
2244c     0C 4E 05 F1 | 	add	fp, #12
22450     A7 14 02 FB | 	rdlong	arg02, fp
22454     50 4E 85 F1 | 	sub	fp, #80
22458     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2245c     58 4E 05 F1 | 	add	fp, #88
22460     A7 FA 61 FC | 	wrlong	result1, fp
22464     00 FA 4D F2 | 	cmps	result1, #0 wz
22468     58 4E 85 F1 | 	sub	fp, #88
2246c     10 4E 05 A1 |  if_e	add	fp, #16
22470     A7 04 68 AC |  if_e	wrlong	#2, fp
22474     10 4E 85 A1 |  if_e	sub	fp, #16
22478     6C 00 90 AD |  if_e	jmp	#LR__3642
2247c     04 4E 05 F1 | 	add	fp, #4
22480     A7 20 02 FB | 	rdlong	local02, fp
22484     54 4E 05 F1 | 	add	fp, #84
22488     A7 1E 02 FB | 	rdlong	local01, fp
2248c     04 4E 05 F1 | 	add	fp, #4
22490     A7 18 02 FB | 	rdlong	arg04, fp
22494     09 18 46 F0 | 	shr	arg04, #9
22498     0C 1F 02 F1 | 	add	local01, arg04
2249c     1C 20 06 F1 | 	add	local02, #28
224a0     10 1F 62 FC | 	wrlong	local01, local02
224a4     18 4E 85 F1 | 	sub	fp, #24
224a8     A7 20 02 FB | 	rdlong	local02, fp
224ac     01 20 06 F1 | 	add	local02, #1
224b0     10 13 C2 FA | 	rdbyte	arg01, local02
224b4     40 4E 85 F1 | 	sub	fp, #64
224b8     A7 20 02 FB | 	rdlong	local02, fp
224bc     10 15 02 F6 | 	mov	arg02, local02
224c0     28 14 06 F1 | 	add	arg02, #40
224c4     04 4E 85 F1 | 	sub	fp, #4
224c8     1C 20 06 F1 | 	add	local02, #28
224cc     10 17 02 FB | 	rdlong	arg03, local02
224d0     01 18 06 F6 | 	mov	arg04, #1
224d4     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
224d8     00 FA 0D F2 | 	cmp	result1, #0 wz
224dc     10 4E 05 51 |  if_ne	add	fp, #16
224e0     A7 02 68 5C |  if_ne	wrlong	#1, fp
224e4     10 4E 85 51 |  if_ne	sub	fp, #16
224e8                 | LR__3642
224e8                 | LR__3643
224e8                 | LR__3644
224e8                 | LR__3645
224e8                 | LR__3646
224e8     10 4E 05 F1 | 	add	fp, #16
224ec     A7 20 0A FB | 	rdlong	local02, fp wz
224f0     10 4E 85 F1 | 	sub	fp, #16
224f4     04 4E 05 51 |  if_ne	add	fp, #4
224f8     A7 20 02 5B |  if_ne	rdlong	local02, fp
224fc     04 4E 85 51 |  if_ne	sub	fp, #4
22500     10 01 68 5C |  if_ne	wrlong	#0, local02
22504                 | ' 
22504                 | ' 	return res ;
22504     10 4E 05 F1 | 	add	fp, #16
22508     A7 FA 01 FB | 	rdlong	result1, fp
2250c     10 4E 85 F1 | 	sub	fp, #16
22510                 | LR__3647
22510     A7 F0 03 F6 | 	mov	ptra, fp
22514     B2 00 A0 FD | 	call	#popregs_
22518                 | _fatfs_cc_f_open_ret
22518     2D 00 64 FD | 	ret
2251c                 | 
2251c                 | _fatfs_cc_f_read
2251c     0E 4A 05 F6 | 	mov	COUNT_, #14
22520     A8 00 A0 FD | 	call	#pushregs_
22524     38 F0 07 F1 | 	add	ptra, #56
22528     04 4E 05 F1 | 	add	fp, #4
2252c     A7 12 62 FC | 	wrlong	arg01, fp
22530     04 4E 05 F1 | 	add	fp, #4
22534     A7 14 62 FC | 	wrlong	arg02, fp
22538     04 4E 05 F1 | 	add	fp, #4
2253c     A7 16 62 FC | 	wrlong	arg03, fp
22540     04 4E 05 F1 | 	add	fp, #4
22544     A7 18 62 FC | 	wrlong	arg04, fp
22548     08 4E 85 F1 | 	sub	fp, #8
2254c     A7 FA 01 FB | 	rdlong	result1, fp
22550     2C 4E 05 F1 | 	add	fp, #44
22554     A7 FA 61 FC | 	wrlong	result1, fp
22558     24 4E 85 F1 | 	sub	fp, #36
2255c     A7 FA 01 FB | 	rdlong	result1, fp
22560     FD 00 68 FC | 	wrlong	#0, result1
22564     0C 4E 85 F1 | 	sub	fp, #12
22568     A7 12 02 FB | 	rdlong	arg01, fp
2256c     14 4E 05 F1 | 	add	fp, #20
22570     A7 14 02 F6 | 	mov	arg02, fp
22574     18 4E 85 F1 | 	sub	fp, #24
22578     24 F7 BF FD | 	call	#_fatfs_cc_validate
2257c     14 4E 05 F1 | 	add	fp, #20
22580     A7 FA 61 FC | 	wrlong	result1, fp
22584     00 FA 4D F2 | 	cmps	result1, #0 wz
22588     14 4E 85 F1 | 	sub	fp, #20
2258c     20 00 90 5D |  if_ne	jmp	#LR__3650
22590     04 4E 05 F1 | 	add	fp, #4
22594     A7 14 02 FB | 	rdlong	arg02, fp
22598     11 14 06 F1 | 	add	arg02, #17
2259c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
225a0     10 4E 05 F1 | 	add	fp, #16
225a4     A7 14 62 FC | 	wrlong	arg02, fp
225a8     14 4E 85 F1 | 	sub	fp, #20
225ac     10 00 90 AD |  if_e	jmp	#LR__3651
225b0                 | LR__3650
225b0     14 4E 05 F1 | 	add	fp, #20
225b4     A7 FA 01 FB | 	rdlong	result1, fp
225b8     14 4E 85 F1 | 	sub	fp, #20
225bc     EC 05 90 FD | 	jmp	#LR__3670
225c0                 | LR__3651
225c0     04 4E 05 F1 | 	add	fp, #4
225c4     A7 18 02 FB | 	rdlong	arg04, fp
225c8     04 4E 85 F1 | 	sub	fp, #4
225cc     10 18 06 F1 | 	add	arg04, #16
225d0     0C 19 C2 FA | 	rdbyte	arg04, arg04
225d4     01 18 CE F7 | 	test	arg04, #1 wz
225d8     07 FA 05 A6 |  if_e	mov	result1, #7
225dc     CC 05 90 AD |  if_e	jmp	#LR__3670
225e0     04 4E 05 F1 | 	add	fp, #4
225e4     A7 1E 02 FB | 	rdlong	local01, fp
225e8     0F 21 02 F6 | 	mov	local02, local01
225ec     0C 20 06 F1 | 	add	local02, #12
225f0     10 23 02 FB | 	rdlong	local03, local02
225f4     14 1E 06 F1 | 	add	local01, #20
225f8     0F 1F 02 FB | 	rdlong	local01, local01
225fc     0F 23 82 F1 | 	sub	local03, local01
22600     20 4E 05 F1 | 	add	fp, #32
22604     A7 22 62 FC | 	wrlong	local03, fp
22608     18 4E 85 F1 | 	sub	fp, #24
2260c     A7 24 02 FB | 	rdlong	local04, fp
22610     0C 4E 85 F1 | 	sub	fp, #12
22614     11 25 1A F2 | 	cmp	local04, local03 wcz
22618     24 4E 05 11 |  if_a	add	fp, #36
2261c     A7 24 02 1B |  if_a	rdlong	local04, fp
22620     18 4E 85 11 |  if_a	sub	fp, #24
22624     A7 24 62 1C |  if_a	wrlong	local04, fp
22628     0C 4E 85 11 |  if_a	sub	fp, #12
2262c                 | ' 
2262c                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2262c                 | LR__3652
2262c     0C 4E 05 F1 | 	add	fp, #12
22630     A7 20 02 FB | 	rdlong	local02, fp
22634     0C 4E 85 F1 | 	sub	fp, #12
22638     10 25 02 F6 | 	mov	local04, local02
2263c     01 24 16 F2 | 	cmp	local04, #1 wc
22640     64 05 90 CD |  if_b	jmp	#LR__3669
22644     04 4E 05 F1 | 	add	fp, #4
22648     A7 22 02 FB | 	rdlong	local03, fp
2264c     04 4E 85 F1 | 	sub	fp, #4
22650     14 22 06 F1 | 	add	local03, #20
22654     11 23 02 FB | 	rdlong	local03, local03
22658     FF 23 CE F7 | 	test	local03, #511 wz
2265c     3C 04 90 5D |  if_ne	jmp	#LR__3667
22660     04 4E 05 F1 | 	add	fp, #4
22664     A7 1E 02 FB | 	rdlong	local01, fp
22668     14 1E 06 F1 | 	add	local01, #20
2266c     0F 23 02 FB | 	rdlong	local03, local01
22670     09 22 46 F0 | 	shr	local03, #9
22674     14 4E 05 F1 | 	add	fp, #20
22678     A7 26 02 FB | 	rdlong	local05, fp
2267c     13 29 02 F6 | 	mov	local06, local05
22680     0A 28 06 F1 | 	add	local06, #10
22684     14 2B E2 FA | 	rdword	local07, local06
22688     0A 28 86 F1 | 	sub	local06, #10
2268c     15 2D 32 F9 | 	getword	local08, local07, #0
22690     01 2C 86 F1 | 	sub	local08, #1
22694     16 23 0A F5 | 	and	local03, local08 wz
22698     18 4E 05 F1 | 	add	fp, #24
2269c     A7 22 62 FC | 	wrlong	local03, fp
226a0     30 4E 85 F1 | 	sub	fp, #48
226a4     E0 00 90 5D |  if_ne	jmp	#LR__3657
226a8     04 4E 05 F1 | 	add	fp, #4
226ac     A7 22 02 FB | 	rdlong	local03, fp
226b0     04 4E 85 F1 | 	sub	fp, #4
226b4     14 22 06 F1 | 	add	local03, #20
226b8     11 23 0A FB | 	rdlong	local03, local03 wz
226bc     20 00 90 5D |  if_ne	jmp	#LR__3653
226c0     04 4E 05 F1 | 	add	fp, #4
226c4     A7 22 02 FB | 	rdlong	local03, fp
226c8     08 22 06 F1 | 	add	local03, #8
226cc     11 23 02 FB | 	rdlong	local03, local03
226d0     18 4E 05 F1 | 	add	fp, #24
226d4     A7 22 62 FC | 	wrlong	local03, fp
226d8     1C 4E 85 F1 | 	sub	fp, #28
226dc     28 00 90 FD | 	jmp	#LR__3654
226e0                 | LR__3653
226e0     04 4E 05 F1 | 	add	fp, #4
226e4     A7 2C 02 FB | 	rdlong	local08, fp
226e8     16 13 02 F6 | 	mov	arg01, local08
226ec     04 4E 85 F1 | 	sub	fp, #4
226f0     18 2C 06 F1 | 	add	local08, #24
226f4     16 15 02 FB | 	rdlong	arg02, local08
226f8     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
226fc     1C 4E 05 F1 | 	add	fp, #28
22700     A7 FA 61 FC | 	wrlong	result1, fp
22704     1C 4E 85 F1 | 	sub	fp, #28
22708                 | LR__3654
22708     1C 4E 05 F1 | 	add	fp, #28
2270c     A7 22 02 FB | 	rdlong	local03, fp
22710     1C 4E 85 F1 | 	sub	fp, #28
22714     02 22 16 F2 | 	cmp	local03, #2 wc
22718     1C 00 90 3D |  if_ae	jmp	#LR__3655
2271c     04 4E 05 F1 | 	add	fp, #4
22720     A7 22 02 FB | 	rdlong	local03, fp
22724     04 4E 85 F1 | 	sub	fp, #4
22728     11 22 06 F1 | 	add	local03, #17
2272c     11 05 48 FC | 	wrbyte	#2, local03
22730     02 FA 05 F6 | 	mov	result1, #2
22734     74 04 90 FD | 	jmp	#LR__3670
22738                 | LR__3655
22738     1C 4E 05 F1 | 	add	fp, #28
2273c     A7 22 02 FB | 	rdlong	local03, fp
22740     1C 4E 85 F1 | 	sub	fp, #28
22744     FF FF 7F FF 
22748     FF 23 0E F2 | 	cmp	local03, ##-1 wz
2274c     1C 00 90 5D |  if_ne	jmp	#LR__3656
22750     04 4E 05 F1 | 	add	fp, #4
22754     A7 22 02 FB | 	rdlong	local03, fp
22758     04 4E 85 F1 | 	sub	fp, #4
2275c     11 22 06 F1 | 	add	local03, #17
22760     11 03 48 FC | 	wrbyte	#1, local03
22764     01 FA 05 F6 | 	mov	result1, #1
22768     40 04 90 FD | 	jmp	#LR__3670
2276c                 | LR__3656
2276c     04 4E 05 F1 | 	add	fp, #4
22770     A7 22 02 FB | 	rdlong	local03, fp
22774     18 4E 05 F1 | 	add	fp, #24
22778     A7 2C 02 FB | 	rdlong	local08, fp
2277c     1C 4E 85 F1 | 	sub	fp, #28
22780     18 22 06 F1 | 	add	local03, #24
22784     11 2D 62 FC | 	wrlong	local08, local03
22788                 | LR__3657
22788     18 4E 05 F1 | 	add	fp, #24
2278c     A7 12 02 FB | 	rdlong	arg01, fp
22790     14 4E 85 F1 | 	sub	fp, #20
22794     A7 22 02 FB | 	rdlong	local03, fp
22798     04 4E 85 F1 | 	sub	fp, #4
2279c     18 22 06 F1 | 	add	local03, #24
227a0     11 15 02 FB | 	rdlong	arg02, local03
227a4     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
227a8     20 4E 05 F1 | 	add	fp, #32
227ac     A7 FA 61 FC | 	wrlong	result1, fp
227b0     20 4E 85 F1 | 	sub	fp, #32
227b4     00 FA 0D F2 | 	cmp	result1, #0 wz
227b8     1C 00 90 5D |  if_ne	jmp	#LR__3658
227bc     04 4E 05 F1 | 	add	fp, #4
227c0     A7 22 02 FB | 	rdlong	local03, fp
227c4     04 4E 85 F1 | 	sub	fp, #4
227c8     11 22 06 F1 | 	add	local03, #17
227cc     11 05 48 FC | 	wrbyte	#2, local03
227d0     02 FA 05 F6 | 	mov	result1, #2
227d4     D4 03 90 FD | 	jmp	#LR__3670
227d8                 | LR__3658
227d8     20 4E 05 F1 | 	add	fp, #32
227dc     A7 22 02 FB | 	rdlong	local03, fp
227e0     10 4E 05 F1 | 	add	fp, #16
227e4     A7 2C 02 FB | 	rdlong	local08, fp
227e8     16 23 02 F1 | 	add	local03, local08
227ec     10 4E 85 F1 | 	sub	fp, #16
227f0     A7 22 62 FC | 	wrlong	local03, fp
227f4     14 4E 85 F1 | 	sub	fp, #20
227f8     A7 22 02 FB | 	rdlong	local03, fp
227fc     09 22 46 F0 | 	shr	local03, #9
22800     20 4E 05 F1 | 	add	fp, #32
22804     A7 22 62 FC | 	wrlong	local03, fp
22808     2C 4E 85 F1 | 	sub	fp, #44
2280c     01 22 16 F2 | 	cmp	local03, #1 wc
22810     5C 01 90 CD |  if_b	jmp	#LR__3662
22814     30 4E 05 F1 | 	add	fp, #48
22818     A7 22 02 FB | 	rdlong	local03, fp
2281c     04 4E 85 F1 | 	sub	fp, #4
22820     A7 2C 02 FB | 	rdlong	local08, fp
22824     16 23 02 F1 | 	add	local03, local08
22828     14 4E 85 F1 | 	sub	fp, #20
2282c     A7 2C 02 FB | 	rdlong	local08, fp
22830     18 4E 85 F1 | 	sub	fp, #24
22834     0A 2C 06 F1 | 	add	local08, #10
22838     16 2D E2 FA | 	rdword	local08, local08
2283c     16 23 1A F2 | 	cmp	local03, local08 wcz
22840     28 00 90 ED |  if_be	jmp	#LR__3659
22844     18 4E 05 F1 | 	add	fp, #24
22848     A7 1E 02 FB | 	rdlong	local01, fp
2284c     0A 1E 06 F1 | 	add	local01, #10
22850     0F 23 E2 FA | 	rdword	local03, local01
22854     18 4E 05 F1 | 	add	fp, #24
22858     A7 2C 02 FB | 	rdlong	local08, fp
2285c     16 23 82 F1 | 	sub	local03, local08
22860     04 4E 85 F1 | 	sub	fp, #4
22864     A7 22 62 FC | 	wrlong	local03, fp
22868     2C 4E 85 F1 | 	sub	fp, #44
2286c                 | LR__3659
2286c     18 4E 05 F1 | 	add	fp, #24
22870     A7 1E 02 FB | 	rdlong	local01, fp
22874     01 1E 06 F1 | 	add	local01, #1
22878     0F 13 C2 FA | 	rdbyte	arg01, local01
2287c     1C 4E 05 F1 | 	add	fp, #28
22880     A7 14 02 FB | 	rdlong	arg02, fp
22884     14 4E 85 F1 | 	sub	fp, #20
22888     A7 16 02 FB | 	rdlong	arg03, fp
2288c     0C 4E 05 F1 | 	add	fp, #12
22890     A7 18 02 FB | 	rdlong	arg04, fp
22894     2C 4E 85 F1 | 	sub	fp, #44
22898     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2289c     00 FA 0D F2 | 	cmp	result1, #0 wz
228a0     1C 00 90 AD |  if_e	jmp	#LR__3660
228a4     04 4E 05 F1 | 	add	fp, #4
228a8     A7 22 02 FB | 	rdlong	local03, fp
228ac     04 4E 85 F1 | 	sub	fp, #4
228b0     11 22 06 F1 | 	add	local03, #17
228b4     11 03 48 FC | 	wrbyte	#1, local03
228b8     01 FA 05 F6 | 	mov	result1, #1
228bc     EC 02 90 FD | 	jmp	#LR__3670
228c0                 | LR__3660
228c0     04 4E 05 F1 | 	add	fp, #4
228c4     A7 1E 02 FB | 	rdlong	local01, fp
228c8     04 4E 85 F1 | 	sub	fp, #4
228cc     10 1E 06 F1 | 	add	local01, #16
228d0     0F 23 C2 FA | 	rdbyte	local03, local01
228d4     80 22 CE F7 | 	test	local03, #128 wz
228d8     78 00 90 AD |  if_e	jmp	#LR__3661
228dc     04 4E 05 F1 | 	add	fp, #4
228e0     A7 2C 02 FB | 	rdlong	local08, fp
228e4     1C 2C 06 F1 | 	add	local08, #28
228e8     16 2D 02 FB | 	rdlong	local08, local08
228ec     1C 4E 05 F1 | 	add	fp, #28
228f0     A7 2E 02 FB | 	rdlong	local09, fp
228f4     17 2D 82 F1 | 	sub	local08, local09
228f8     0C 4E 05 F1 | 	add	fp, #12
228fc     A7 30 02 FB | 	rdlong	local10, fp
22900     2C 4E 85 F1 | 	sub	fp, #44
22904     18 33 02 F6 | 	mov	local11, local10
22908     19 2D 12 F2 | 	cmp	local08, local11 wc
2290c     44 00 90 3D |  if_ae	jmp	#LR__3661
22910     34 4E 05 F1 | 	add	fp, #52
22914     A7 12 02 FB | 	rdlong	arg01, fp
22918     30 4E 85 F1 | 	sub	fp, #48
2291c     A7 14 02 FB | 	rdlong	arg02, fp
22920     0A 33 02 F6 | 	mov	local11, arg02
22924     1C 32 06 F1 | 	add	local11, #28
22928     19 2F 02 FB | 	rdlong	local09, local11
2292c     1C 4E 05 F1 | 	add	fp, #28
22930     A7 26 02 FB | 	rdlong	local05, fp
22934     13 2F 82 F1 | 	sub	local09, local05
22938     09 2E 66 F0 | 	shl	local09, #9
2293c     17 33 02 F6 | 	mov	local11, local09
22940     17 13 02 F1 | 	add	arg01, local09
22944     20 4E 85 F1 | 	sub	fp, #32
22948     28 14 06 F1 | 	add	arg02, #40
2294c     09 16 C6 F9 | 	decod	arg03, #9
22950     24 4E BF FD | 	call	#__system____builtin_memmove
22954                 | LR__3661
22954     2C 4E 05 F1 | 	add	fp, #44
22958     A7 22 02 FB | 	rdlong	local03, fp
2295c     09 22 66 F0 | 	shl	local03, #9
22960     04 4E 85 F1 | 	sub	fp, #4
22964     A7 22 62 FC | 	wrlong	local03, fp
22968     28 4E 85 F1 | 	sub	fp, #40
2296c                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2296c                 | ' 				}
2296c                 | ' 
2296c                 | ' 
2296c                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2296c                 | ' 				continue;
2296c     B4 01 90 FD | 	jmp	#LR__3668
22970                 | LR__3662
22970     04 4E 05 F1 | 	add	fp, #4
22974     A7 22 02 FB | 	rdlong	local03, fp
22978     1C 22 06 F1 | 	add	local03, #28
2297c     11 23 02 FB | 	rdlong	local03, local03
22980     1C 4E 05 F1 | 	add	fp, #28
22984     A7 1E 02 FB | 	rdlong	local01, fp
22988     20 4E 85 F1 | 	sub	fp, #32
2298c     0F 23 0A F2 | 	cmp	local03, local01 wz
22990     EC 00 90 AD |  if_e	jmp	#LR__3666
22994     04 4E 05 F1 | 	add	fp, #4
22998     A7 1E 02 FB | 	rdlong	local01, fp
2299c     04 4E 85 F1 | 	sub	fp, #4
229a0     10 1E 06 F1 | 	add	local01, #16
229a4     0F 23 C2 FA | 	rdbyte	local03, local01
229a8     80 22 CE F7 | 	test	local03, #128 wz
229ac     7C 00 90 AD |  if_e	jmp	#LR__3664
229b0     18 4E 05 F1 | 	add	fp, #24
229b4     A7 1E 02 FB | 	rdlong	local01, fp
229b8     01 1E 06 F1 | 	add	local01, #1
229bc     0F 13 C2 FA | 	rdbyte	arg01, local01
229c0     14 4E 85 F1 | 	sub	fp, #20
229c4     A7 22 02 FB | 	rdlong	local03, fp
229c8     11 15 02 F6 | 	mov	arg02, local03
229cc     28 14 06 F1 | 	add	arg02, #40
229d0     04 4E 85 F1 | 	sub	fp, #4
229d4     1C 22 06 F1 | 	add	local03, #28
229d8     11 17 02 FB | 	rdlong	arg03, local03
229dc     01 18 06 F6 | 	mov	arg04, #1
229e0     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
229e4     00 FA 0D F2 | 	cmp	result1, #0 wz
229e8     1C 00 90 AD |  if_e	jmp	#LR__3663
229ec     04 4E 05 F1 | 	add	fp, #4
229f0     A7 22 02 FB | 	rdlong	local03, fp
229f4     04 4E 85 F1 | 	sub	fp, #4
229f8     11 22 06 F1 | 	add	local03, #17
229fc     11 03 48 FC | 	wrbyte	#1, local03
22a00     01 FA 05 F6 | 	mov	result1, #1
22a04     A4 01 90 FD | 	jmp	#LR__3670
22a08                 | LR__3663
22a08     04 4E 05 F1 | 	add	fp, #4
22a0c     A7 32 02 FB | 	rdlong	local11, fp
22a10     19 23 02 F6 | 	mov	local03, local11
22a14     04 4E 85 F1 | 	sub	fp, #4
22a18     10 32 06 F1 | 	add	local11, #16
22a1c     19 33 C2 FA | 	rdbyte	local11, local11
22a20     7F 32 06 F5 | 	and	local11, #127
22a24     10 22 06 F1 | 	add	local03, #16
22a28     11 33 42 FC | 	wrbyte	local11, local03
22a2c                 | LR__3664
22a2c     18 4E 05 F1 | 	add	fp, #24
22a30     A7 1E 02 FB | 	rdlong	local01, fp
22a34     01 1E 06 F1 | 	add	local01, #1
22a38     0F 13 C2 FA | 	rdbyte	arg01, local01
22a3c     14 4E 85 F1 | 	sub	fp, #20
22a40     A7 14 02 FB | 	rdlong	arg02, fp
22a44     28 14 06 F1 | 	add	arg02, #40
22a48     1C 4E 05 F1 | 	add	fp, #28
22a4c     A7 16 02 FB | 	rdlong	arg03, fp
22a50     20 4E 85 F1 | 	sub	fp, #32
22a54     01 18 06 F6 | 	mov	arg04, #1
22a58     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
22a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
22a60     1C 00 90 AD |  if_e	jmp	#LR__3665
22a64     04 4E 05 F1 | 	add	fp, #4
22a68     A7 22 02 FB | 	rdlong	local03, fp
22a6c     04 4E 85 F1 | 	sub	fp, #4
22a70     11 22 06 F1 | 	add	local03, #17
22a74     11 03 48 FC | 	wrbyte	#1, local03
22a78     01 FA 05 F6 | 	mov	result1, #1
22a7c     2C 01 90 FD | 	jmp	#LR__3670
22a80                 | LR__3665
22a80                 | LR__3666
22a80     04 4E 05 F1 | 	add	fp, #4
22a84     A7 22 02 FB | 	rdlong	local03, fp
22a88     1C 4E 05 F1 | 	add	fp, #28
22a8c     A7 32 02 FB | 	rdlong	local11, fp
22a90     20 4E 85 F1 | 	sub	fp, #32
22a94     1C 22 06 F1 | 	add	local03, #28
22a98     11 33 62 FC | 	wrlong	local11, local03
22a9c                 | LR__3667
22a9c     04 4E 05 F1 | 	add	fp, #4
22aa0     A7 1E 02 FB | 	rdlong	local01, fp
22aa4     14 1E 06 F1 | 	add	local01, #20
22aa8     0F 33 02 FB | 	rdlong	local11, local01
22aac     FF 33 06 F5 | 	and	local11, #511
22ab0     09 22 C6 F9 | 	decod	local03, #9
22ab4     19 23 82 F1 | 	sub	local03, local11
22ab8     24 4E 05 F1 | 	add	fp, #36
22abc     A7 22 62 FC | 	wrlong	local03, fp
22ac0     1C 4E 85 F1 | 	sub	fp, #28
22ac4     A7 32 02 FB | 	rdlong	local11, fp
22ac8     0C 4E 85 F1 | 	sub	fp, #12
22acc     19 23 1A F2 | 	cmp	local03, local11 wcz
22ad0     0C 4E 05 11 |  if_a	add	fp, #12
22ad4     A7 22 02 1B |  if_a	rdlong	local03, fp
22ad8     1C 4E 05 11 |  if_a	add	fp, #28
22adc     A7 22 62 1C |  if_a	wrlong	local03, fp
22ae0     28 4E 85 11 |  if_a	sub	fp, #40
22ae4     34 4E 05 F1 | 	add	fp, #52
22ae8     A7 12 02 FB | 	rdlong	arg01, fp
22aec     30 4E 85 F1 | 	sub	fp, #48
22af0     A7 28 02 FB | 	rdlong	local06, fp
22af4     14 15 02 F6 | 	mov	arg02, local06
22af8     28 14 06 F1 | 	add	arg02, #40
22afc     14 28 06 F1 | 	add	local06, #20
22b00     14 33 02 FB | 	rdlong	local11, local06
22b04     19 2F 02 F6 | 	mov	local09, local11
22b08     17 31 02 F6 | 	mov	local10, local09
22b0c     FF 31 06 F5 | 	and	local10, #511
22b10     18 15 02 F1 | 	add	arg02, local10
22b14     24 4E 05 F1 | 	add	fp, #36
22b18     A7 16 02 FB | 	rdlong	arg03, fp
22b1c     28 4E 85 F1 | 	sub	fp, #40
22b20     54 4C BF FD | 	call	#__system____builtin_memmove
22b24                 | LR__3668
22b24     0C 4E 05 F1 | 	add	fp, #12
22b28     A7 22 02 FB | 	rdlong	local03, fp
22b2c     1C 4E 05 F1 | 	add	fp, #28
22b30     A7 2C 02 FB | 	rdlong	local08, fp
22b34     16 23 82 F1 | 	sub	local03, local08
22b38     1C 4E 85 F1 | 	sub	fp, #28
22b3c     A7 22 62 FC | 	wrlong	local03, fp
22b40     04 4E 05 F1 | 	add	fp, #4
22b44     A7 1E 02 FB | 	rdlong	local01, fp
22b48     0F 2B 02 FB | 	rdlong	local07, local01
22b4c     18 4E 05 F1 | 	add	fp, #24
22b50     A7 2C 02 FB | 	rdlong	local08, fp
22b54     16 2B 02 F1 | 	add	local07, local08
22b58     0F 2B 62 FC | 	wrlong	local07, local01
22b5c     0C 4E 05 F1 | 	add	fp, #12
22b60     A7 22 02 FB | 	rdlong	local03, fp
22b64     0C 4E 85 F1 | 	sub	fp, #12
22b68     A7 34 02 FB | 	rdlong	local12, fp
22b6c     1A 23 02 F1 | 	add	local03, local12
22b70     0C 4E 05 F1 | 	add	fp, #12
22b74     A7 22 62 FC | 	wrlong	local03, fp
22b78     30 4E 85 F1 | 	sub	fp, #48
22b7c     A7 36 02 FB | 	rdlong	local13, fp
22b80     1B 23 02 F6 | 	mov	local03, local13
22b84     14 36 06 F1 | 	add	local13, #20
22b88     1B 39 02 FB | 	rdlong	local14, local13
22b8c     24 4E 05 F1 | 	add	fp, #36
22b90     A7 28 02 FB | 	rdlong	local06, fp
22b94     28 4E 85 F1 | 	sub	fp, #40
22b98     14 39 02 F1 | 	add	local14, local06
22b9c     14 22 06 F1 | 	add	local03, #20
22ba0     11 39 62 FC | 	wrlong	local14, local03
22ba4     84 FA 9F FD | 	jmp	#LR__3652
22ba8                 | LR__3669
22ba8                 | ' 
22ba8                 | ' 
22ba8                 | ' 
22ba8                 | ' 
22ba8                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
22ba8                 | ' 
22ba8                 | ' 	}
22ba8                 | ' 
22ba8                 | ' 	return FR_OK ;
22ba8     00 FA 05 F6 | 	mov	result1, #0
22bac                 | LR__3670
22bac     A7 F0 03 F6 | 	mov	ptra, fp
22bb0     B2 00 A0 FD | 	call	#popregs_
22bb4                 | _fatfs_cc_f_read_ret
22bb4     2D 00 64 FD | 	ret
22bb8                 | 
22bb8                 | _fatfs_cc_f_write
22bb8     15 4A 05 F6 | 	mov	COUNT_, #21
22bbc     A8 00 A0 FD | 	call	#pushregs_
22bc0     34 F0 07 F1 | 	add	ptra, #52
22bc4     04 4E 05 F1 | 	add	fp, #4
22bc8     A7 12 62 FC | 	wrlong	arg01, fp
22bcc     04 4E 05 F1 | 	add	fp, #4
22bd0     A7 14 62 FC | 	wrlong	arg02, fp
22bd4     04 4E 05 F1 | 	add	fp, #4
22bd8     A7 16 62 FC | 	wrlong	arg03, fp
22bdc     04 4E 05 F1 | 	add	fp, #4
22be0     A7 18 62 FC | 	wrlong	arg04, fp
22be4     08 4E 85 F1 | 	sub	fp, #8
22be8     A7 FA 01 FB | 	rdlong	result1, fp
22bec     28 4E 05 F1 | 	add	fp, #40
22bf0     A7 FA 61 FC | 	wrlong	result1, fp
22bf4     20 4E 85 F1 | 	sub	fp, #32
22bf8     A7 FA 01 FB | 	rdlong	result1, fp
22bfc     FD 00 68 FC | 	wrlong	#0, result1
22c00     0C 4E 85 F1 | 	sub	fp, #12
22c04     A7 12 02 FB | 	rdlong	arg01, fp
22c08     14 4E 05 F1 | 	add	fp, #20
22c0c     A7 14 02 F6 | 	mov	arg02, fp
22c10     18 4E 85 F1 | 	sub	fp, #24
22c14     88 F0 BF FD | 	call	#_fatfs_cc_validate
22c18     14 4E 05 F1 | 	add	fp, #20
22c1c     A7 FA 61 FC | 	wrlong	result1, fp
22c20     00 FA 4D F2 | 	cmps	result1, #0 wz
22c24     14 4E 85 F1 | 	sub	fp, #20
22c28     20 00 90 5D |  if_ne	jmp	#LR__3680
22c2c     04 4E 05 F1 | 	add	fp, #4
22c30     A7 14 02 FB | 	rdlong	arg02, fp
22c34     11 14 06 F1 | 	add	arg02, #17
22c38     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
22c3c     10 4E 05 F1 | 	add	fp, #16
22c40     A7 14 62 FC | 	wrlong	arg02, fp
22c44     14 4E 85 F1 | 	sub	fp, #20
22c48     10 00 90 AD |  if_e	jmp	#LR__3681
22c4c                 | LR__3680
22c4c     14 4E 05 F1 | 	add	fp, #20
22c50     A7 FA 01 FB | 	rdlong	result1, fp
22c54     14 4E 85 F1 | 	sub	fp, #20
22c58     44 07 90 FD | 	jmp	#LR__3703
22c5c                 | LR__3681
22c5c     04 4E 05 F1 | 	add	fp, #4
22c60     A7 14 02 FB | 	rdlong	arg02, fp
22c64     04 4E 85 F1 | 	sub	fp, #4
22c68     10 14 06 F1 | 	add	arg02, #16
22c6c     0A 15 C2 FA | 	rdbyte	arg02, arg02
22c70     02 14 CE F7 | 	test	arg02, #2 wz
22c74     07 FA 05 A6 |  if_e	mov	result1, #7
22c78     24 07 90 AD |  if_e	jmp	#LR__3703
22c7c     04 4E 05 F1 | 	add	fp, #4
22c80     A7 14 02 FB | 	rdlong	arg02, fp
22c84     0A 13 02 F6 | 	mov	arg01, arg02
22c88     14 12 06 F1 | 	add	arg01, #20
22c8c     09 13 02 FB | 	rdlong	arg01, arg01
22c90     08 4E 05 F1 | 	add	fp, #8
22c94     A7 FA 01 FB | 	rdlong	result1, fp
22c98     FD 12 02 F1 | 	add	arg01, result1
22c9c     0C 4E 85 F1 | 	sub	fp, #12
22ca0     14 14 06 F1 | 	add	arg02, #20
22ca4     0A FB 01 FB | 	rdlong	result1, arg02
22ca8     FD 12 12 F2 | 	cmp	arg01, result1 wc
22cac     24 00 90 3D |  if_ae	jmp	#LR__3682
22cb0     04 4E 05 F1 | 	add	fp, #4
22cb4     A7 14 02 FB | 	rdlong	arg02, fp
22cb8     01 FA 65 F6 | 	neg	result1, #1
22cbc     14 14 06 F1 | 	add	arg02, #20
22cc0     0A 15 02 FB | 	rdlong	arg02, arg02
22cc4     0A FB 81 F1 | 	sub	result1, arg02
22cc8     08 4E 05 F1 | 	add	fp, #8
22ccc     A7 FA 61 FC | 	wrlong	result1, fp
22cd0     0C 4E 85 F1 | 	sub	fp, #12
22cd4                 | LR__3682
22cd4                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
22cd4                 | ' 	}
22cd4                 | ' 
22cd4                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
22cd4                 | LR__3683
22cd4     0C 4E 05 F1 | 	add	fp, #12
22cd8     A7 FA 01 FB | 	rdlong	result1, fp
22cdc     0C 4E 85 F1 | 	sub	fp, #12
22ce0     01 FA 15 F2 | 	cmp	result1, #1 wc
22ce4     90 06 90 CD |  if_b	jmp	#LR__3702
22ce8     04 4E 05 F1 | 	add	fp, #4
22cec     A7 FA 01 FB | 	rdlong	result1, fp
22cf0     04 4E 85 F1 | 	sub	fp, #4
22cf4     14 FA 05 F1 | 	add	result1, #20
22cf8     FD FA 01 FB | 	rdlong	result1, result1
22cfc     FF FB CD F7 | 	test	result1, #511 wz
22d00     D8 04 90 5D |  if_ne	jmp	#LR__3698
22d04     04 4E 05 F1 | 	add	fp, #4
22d08     A7 FA 01 FB | 	rdlong	result1, fp
22d0c     14 FA 05 F1 | 	add	result1, #20
22d10     FD FA 01 FB | 	rdlong	result1, result1
22d14     09 FA 45 F0 | 	shr	result1, #9
22d18     14 4E 05 F1 | 	add	fp, #20
22d1c     A7 14 02 FB | 	rdlong	arg02, fp
22d20     0A 14 06 F1 | 	add	arg02, #10
22d24     0A 19 E2 FA | 	rdword	arg04, arg02
22d28     0C 15 32 F9 | 	getword	arg02, arg04, #0
22d2c     01 14 86 F1 | 	sub	arg02, #1
22d30     0A FB 09 F5 | 	and	result1, arg02 wz
22d34     14 4E 05 F1 | 	add	fp, #20
22d38     A7 FA 61 FC | 	wrlong	result1, fp
22d3c     2C 4E 85 F1 | 	sub	fp, #44
22d40     44 01 90 5D |  if_ne	jmp	#LR__3689
22d44     04 4E 05 F1 | 	add	fp, #4
22d48     A7 FA 01 FB | 	rdlong	result1, fp
22d4c     04 4E 85 F1 | 	sub	fp, #4
22d50     14 FA 05 F1 | 	add	result1, #20
22d54     FD 14 0A FB | 	rdlong	arg02, result1 wz
22d58     44 00 90 5D |  if_ne	jmp	#LR__3684
22d5c     04 4E 05 F1 | 	add	fp, #4
22d60     A7 14 02 FB | 	rdlong	arg02, fp
22d64     08 14 06 F1 | 	add	arg02, #8
22d68     0A 15 0A FB | 	rdlong	arg02, arg02 wz
22d6c     18 4E 05 F1 | 	add	fp, #24
22d70     A7 14 62 FC | 	wrlong	arg02, fp
22d74     1C 4E 85 F1 | 	sub	fp, #28
22d78     4C 00 90 5D |  if_ne	jmp	#LR__3685
22d7c     04 4E 05 F1 | 	add	fp, #4
22d80     A7 12 02 FB | 	rdlong	arg01, fp
22d84     04 4E 85 F1 | 	sub	fp, #4
22d88     00 14 06 F6 | 	mov	arg02, #0
22d8c     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
22d90     1C 4E 05 F1 | 	add	fp, #28
22d94     A7 FA 61 FC | 	wrlong	result1, fp
22d98     1C 4E 85 F1 | 	sub	fp, #28
22d9c     28 00 90 FD | 	jmp	#LR__3685
22da0                 | LR__3684
22da0     04 4E 05 F1 | 	add	fp, #4
22da4     A7 18 02 FB | 	rdlong	arg04, fp
22da8     0C 13 02 F6 | 	mov	arg01, arg04
22dac     04 4E 85 F1 | 	sub	fp, #4
22db0     18 18 06 F1 | 	add	arg04, #24
22db4     0C 15 02 FB | 	rdlong	arg02, arg04
22db8     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
22dbc     1C 4E 05 F1 | 	add	fp, #28
22dc0     A7 FA 61 FC | 	wrlong	result1, fp
22dc4     1C 4E 85 F1 | 	sub	fp, #28
22dc8                 | LR__3685
22dc8     1C 4E 05 F1 | 	add	fp, #28
22dcc     A7 FA 09 FB | 	rdlong	result1, fp wz
22dd0     1C 4E 85 F1 | 	sub	fp, #28
22dd4     A0 05 90 AD |  if_e	jmp	#LR__3702
22dd8     1C 4E 05 F1 | 	add	fp, #28
22ddc     A7 FA 01 FB | 	rdlong	result1, fp
22de0     1C 4E 85 F1 | 	sub	fp, #28
22de4     01 FA 0D F2 | 	cmp	result1, #1 wz
22de8     1C 00 90 5D |  if_ne	jmp	#LR__3686
22dec     04 4E 05 F1 | 	add	fp, #4
22df0     A7 FA 01 FB | 	rdlong	result1, fp
22df4     04 4E 85 F1 | 	sub	fp, #4
22df8     11 FA 05 F1 | 	add	result1, #17
22dfc     FD 04 48 FC | 	wrbyte	#2, result1
22e00     02 FA 05 F6 | 	mov	result1, #2
22e04     98 05 90 FD | 	jmp	#LR__3703
22e08                 | LR__3686
22e08     1C 4E 05 F1 | 	add	fp, #28
22e0c     A7 FA 01 FB | 	rdlong	result1, fp
22e10     1C 4E 85 F1 | 	sub	fp, #28
22e14     FF FF 7F FF 
22e18     FF FB 0D F2 | 	cmp	result1, ##-1 wz
22e1c     1C 00 90 5D |  if_ne	jmp	#LR__3687
22e20     04 4E 05 F1 | 	add	fp, #4
22e24     A7 FA 01 FB | 	rdlong	result1, fp
22e28     04 4E 85 F1 | 	sub	fp, #4
22e2c     11 FA 05 F1 | 	add	result1, #17
22e30     FD 02 48 FC | 	wrbyte	#1, result1
22e34     01 FA 05 F6 | 	mov	result1, #1
22e38     64 05 90 FD | 	jmp	#LR__3703
22e3c                 | LR__3687
22e3c     04 4E 05 F1 | 	add	fp, #4
22e40     A7 FA 01 FB | 	rdlong	result1, fp
22e44     18 4E 05 F1 | 	add	fp, #24
22e48     A7 18 02 FB | 	rdlong	arg04, fp
22e4c     18 FA 05 F1 | 	add	result1, #24
22e50     FD 18 62 FC | 	wrlong	arg04, result1
22e54     18 4E 85 F1 | 	sub	fp, #24
22e58     A7 FA 01 FB | 	rdlong	result1, fp
22e5c     04 4E 85 F1 | 	sub	fp, #4
22e60     08 FA 05 F1 | 	add	result1, #8
22e64     FD FA 09 FB | 	rdlong	result1, result1 wz
22e68     1C 00 90 5D |  if_ne	jmp	#LR__3688
22e6c     04 4E 05 F1 | 	add	fp, #4
22e70     A7 18 02 FB | 	rdlong	arg04, fp
22e74     18 4E 05 F1 | 	add	fp, #24
22e78     A7 FA 01 FB | 	rdlong	result1, fp
22e7c     1C 4E 85 F1 | 	sub	fp, #28
22e80     08 18 06 F1 | 	add	arg04, #8
22e84     0C FB 61 FC | 	wrlong	result1, arg04
22e88                 | LR__3688
22e88                 | LR__3689
22e88     04 4E 05 F1 | 	add	fp, #4
22e8c     A7 18 02 FB | 	rdlong	arg04, fp
22e90     04 4E 85 F1 | 	sub	fp, #4
22e94     10 18 06 F1 | 	add	arg04, #16
22e98     0C 19 C2 FA | 	rdbyte	arg04, arg04
22e9c     80 18 CE F7 | 	test	arg04, #128 wz
22ea0     7C 00 90 AD |  if_e	jmp	#LR__3691
22ea4     18 4E 05 F1 | 	add	fp, #24
22ea8     A7 18 02 FB | 	rdlong	arg04, fp
22eac     01 18 06 F1 | 	add	arg04, #1
22eb0     0C 13 C2 FA | 	rdbyte	arg01, arg04
22eb4     14 4E 85 F1 | 	sub	fp, #20
22eb8     A7 18 02 FB | 	rdlong	arg04, fp
22ebc     0C 15 02 F6 | 	mov	arg02, arg04
22ec0     28 14 06 F1 | 	add	arg02, #40
22ec4     04 4E 85 F1 | 	sub	fp, #4
22ec8     1C 18 06 F1 | 	add	arg04, #28
22ecc     0C 17 02 FB | 	rdlong	arg03, arg04
22ed0     01 18 06 F6 | 	mov	arg04, #1
22ed4     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
22ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
22edc     1C 00 90 AD |  if_e	jmp	#LR__3690
22ee0     04 4E 05 F1 | 	add	fp, #4
22ee4     A7 FA 01 FB | 	rdlong	result1, fp
22ee8     04 4E 85 F1 | 	sub	fp, #4
22eec     11 FA 05 F1 | 	add	result1, #17
22ef0     FD 02 48 FC | 	wrbyte	#1, result1
22ef4     01 FA 05 F6 | 	mov	result1, #1
22ef8     A4 04 90 FD | 	jmp	#LR__3703
22efc                 | LR__3690
22efc     04 4E 05 F1 | 	add	fp, #4
22f00     A7 18 02 FB | 	rdlong	arg04, fp
22f04     0C FB 01 F6 | 	mov	result1, arg04
22f08     04 4E 85 F1 | 	sub	fp, #4
22f0c     10 18 06 F1 | 	add	arg04, #16
22f10     0C 19 C2 FA | 	rdbyte	arg04, arg04
22f14     7F 18 06 F5 | 	and	arg04, #127
22f18     10 FA 05 F1 | 	add	result1, #16
22f1c     FD 18 42 FC | 	wrbyte	arg04, result1
22f20                 | LR__3691
22f20     18 4E 05 F1 | 	add	fp, #24
22f24     A7 12 02 FB | 	rdlong	arg01, fp
22f28     14 4E 85 F1 | 	sub	fp, #20
22f2c     A7 14 02 FB | 	rdlong	arg02, fp
22f30     04 4E 85 F1 | 	sub	fp, #4
22f34     18 14 06 F1 | 	add	arg02, #24
22f38     0A 15 02 FB | 	rdlong	arg02, arg02
22f3c     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
22f40     20 4E 05 F1 | 	add	fp, #32
22f44     A7 FA 61 FC | 	wrlong	result1, fp
22f48     20 4E 85 F1 | 	sub	fp, #32
22f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
22f50     1C 00 90 5D |  if_ne	jmp	#LR__3692
22f54     04 4E 05 F1 | 	add	fp, #4
22f58     A7 FA 01 FB | 	rdlong	result1, fp
22f5c     04 4E 85 F1 | 	sub	fp, #4
22f60     11 FA 05 F1 | 	add	result1, #17
22f64     FD 04 48 FC | 	wrbyte	#2, result1
22f68     02 FA 05 F6 | 	mov	result1, #2
22f6c     30 04 90 FD | 	jmp	#LR__3703
22f70                 | LR__3692
22f70     20 4E 05 F1 | 	add	fp, #32
22f74     A7 FA 01 FB | 	rdlong	result1, fp
22f78     0C 4E 05 F1 | 	add	fp, #12
22f7c     A7 1E 02 FB | 	rdlong	local01, fp
22f80     0F FB 01 F1 | 	add	result1, local01
22f84     0C 4E 85 F1 | 	sub	fp, #12
22f88     A7 FA 61 FC | 	wrlong	result1, fp
22f8c     14 4E 85 F1 | 	sub	fp, #20
22f90     A7 FA 01 FB | 	rdlong	result1, fp
22f94     09 FA 45 F0 | 	shr	result1, #9
22f98     1C 4E 05 F1 | 	add	fp, #28
22f9c     A7 FA 61 FC | 	wrlong	result1, fp
22fa0     28 4E 85 F1 | 	sub	fp, #40
22fa4     01 FA 15 F2 | 	cmp	result1, #1 wc
22fa8     60 01 90 CD |  if_b	jmp	#LR__3696
22fac     2C 4E 05 F1 | 	add	fp, #44
22fb0     A7 FA 01 FB | 	rdlong	result1, fp
22fb4     04 4E 85 F1 | 	sub	fp, #4
22fb8     A7 18 02 FB | 	rdlong	arg04, fp
22fbc     0C FB 01 F1 | 	add	result1, arg04
22fc0     10 4E 85 F1 | 	sub	fp, #16
22fc4     A7 18 02 FB | 	rdlong	arg04, fp
22fc8     18 4E 85 F1 | 	sub	fp, #24
22fcc     0A 18 06 F1 | 	add	arg04, #10
22fd0     0C 19 E2 FA | 	rdword	arg04, arg04
22fd4     0C FB 19 F2 | 	cmp	result1, arg04 wcz
22fd8     28 00 90 ED |  if_be	jmp	#LR__3693
22fdc     18 4E 05 F1 | 	add	fp, #24
22fe0     A7 FA 01 FB | 	rdlong	result1, fp
22fe4     0A FA 05 F1 | 	add	result1, #10
22fe8     FD FA E1 FA | 	rdword	result1, result1
22fec     14 4E 05 F1 | 	add	fp, #20
22ff0     A7 18 02 FB | 	rdlong	arg04, fp
22ff4     0C FB 81 F1 | 	sub	result1, arg04
22ff8     04 4E 85 F1 | 	sub	fp, #4
22ffc     A7 FA 61 FC | 	wrlong	result1, fp
23000     28 4E 85 F1 | 	sub	fp, #40
23004                 | LR__3693
23004     18 4E 05 F1 | 	add	fp, #24
23008     A7 18 02 FB | 	rdlong	arg04, fp
2300c     01 18 06 F1 | 	add	arg04, #1
23010     0C 13 C2 FA | 	rdbyte	arg01, arg04
23014     18 4E 05 F1 | 	add	fp, #24
23018     A7 14 02 FB | 	rdlong	arg02, fp
2301c     10 4E 85 F1 | 	sub	fp, #16
23020     A7 16 02 FB | 	rdlong	arg03, fp
23024     08 4E 05 F1 | 	add	fp, #8
23028     A7 18 02 FB | 	rdlong	arg04, fp
2302c     28 4E 85 F1 | 	sub	fp, #40
23030     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
23034     00 FA 0D F2 | 	cmp	result1, #0 wz
23038     1C 00 90 AD |  if_e	jmp	#LR__3694
2303c     04 4E 05 F1 | 	add	fp, #4
23040     A7 1E 02 FB | 	rdlong	local01, fp
23044     04 4E 85 F1 | 	sub	fp, #4
23048     11 1E 06 F1 | 	add	local01, #17
2304c     0F 03 48 FC | 	wrbyte	#1, local01
23050     01 FA 05 F6 | 	mov	result1, #1
23054     48 03 90 FD | 	jmp	#LR__3703
23058                 | LR__3694
23058     04 4E 05 F1 | 	add	fp, #4
2305c     A7 FA 01 FB | 	rdlong	result1, fp
23060     1C FA 05 F1 | 	add	result1, #28
23064     FD FA 01 FB | 	rdlong	result1, result1
23068     1C 4E 05 F1 | 	add	fp, #28
2306c     A7 20 02 FB | 	rdlong	local02, fp
23070     10 FB 81 F1 | 	sub	result1, local02
23074     08 4E 05 F1 | 	add	fp, #8
23078     A7 18 02 FB | 	rdlong	arg04, fp
2307c     28 4E 85 F1 | 	sub	fp, #40
23080     0C FB 11 F2 | 	cmp	result1, arg04 wc
23084     68 00 90 3D |  if_ae	jmp	#LR__3695
23088     04 4E 05 F1 | 	add	fp, #4
2308c     A7 12 02 FB | 	rdlong	arg01, fp
23090     28 12 06 F1 | 	add	arg01, #40
23094     2C 4E 05 F1 | 	add	fp, #44
23098     A7 14 02 FB | 	rdlong	arg02, fp
2309c     2C 4E 85 F1 | 	sub	fp, #44
230a0     A7 FA 01 FB | 	rdlong	result1, fp
230a4     1C FA 05 F1 | 	add	result1, #28
230a8     FD 22 02 FB | 	rdlong	local03, result1
230ac     1C 4E 05 F1 | 	add	fp, #28
230b0     A7 18 02 FB | 	rdlong	arg04, fp
230b4     20 4E 85 F1 | 	sub	fp, #32
230b8     0C 23 82 F1 | 	sub	local03, arg04
230bc     09 22 66 F0 | 	shl	local03, #9
230c0     11 15 02 F1 | 	add	arg02, local03
230c4     09 16 C6 F9 | 	decod	arg03, #9
230c8     AC 46 BF FD | 	call	#__system____builtin_memmove
230cc     04 4E 05 F1 | 	add	fp, #4
230d0     A7 18 02 FB | 	rdlong	arg04, fp
230d4     0C FB 01 F6 | 	mov	result1, arg04
230d8     04 4E 85 F1 | 	sub	fp, #4
230dc     10 18 06 F1 | 	add	arg04, #16
230e0     0C 19 C2 FA | 	rdbyte	arg04, arg04
230e4     7F 18 06 F5 | 	and	arg04, #127
230e8     10 FA 05 F1 | 	add	result1, #16
230ec     FD 18 42 FC | 	wrbyte	arg04, result1
230f0                 | LR__3695
230f0     28 4E 05 F1 | 	add	fp, #40
230f4     A7 FA 01 FB | 	rdlong	result1, fp
230f8     09 FA 65 F0 | 	shl	result1, #9
230fc     04 4E 85 F1 | 	sub	fp, #4
23100     A7 FA 61 FC | 	wrlong	result1, fp
23104     24 4E 85 F1 | 	sub	fp, #36
23108                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
23108                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
23108                 | ' 				}
23108                 | ' 
23108                 | ' 
23108                 | ' 				wcnt =  ((UINT) 512 )  * cc;
23108                 | ' 				continue;
23108     74 01 90 FD | 	jmp	#LR__3699
2310c                 | LR__3696
2310c     04 4E 05 F1 | 	add	fp, #4
23110     A7 20 02 FB | 	rdlong	local02, fp
23114     1C 20 06 F1 | 	add	local02, #28
23118     10 FB 01 FB | 	rdlong	result1, local02
2311c     1C 4E 05 F1 | 	add	fp, #28
23120     A7 20 02 FB | 	rdlong	local02, fp
23124     20 4E 85 F1 | 	sub	fp, #32
23128     10 FB 09 F2 | 	cmp	result1, local02 wz
2312c     90 00 90 AD |  if_e	jmp	#LR__3697
23130     04 4E 05 F1 | 	add	fp, #4
23134     A7 FA 01 FB | 	rdlong	result1, fp
23138     FD 22 02 F6 | 	mov	local03, result1
2313c     04 4E 85 F1 | 	sub	fp, #4
23140     14 22 06 F1 | 	add	local03, #20
23144     11 23 02 FB | 	rdlong	local03, local03
23148     0C FA 05 F1 | 	add	result1, #12
2314c     FD 24 02 FB | 	rdlong	local04, result1
23150     12 27 02 F6 | 	mov	local05, local04
23154     13 23 12 F2 | 	cmp	local03, local05 wc
23158     64 00 90 3D |  if_ae	jmp	#LR__3697
2315c     18 4E 05 F1 | 	add	fp, #24
23160     A7 18 02 FB | 	rdlong	arg04, fp
23164     01 18 06 F1 | 	add	arg04, #1
23168     0C 13 C2 FA | 	rdbyte	arg01, arg04
2316c     14 4E 85 F1 | 	sub	fp, #20
23170     A7 28 02 FB | 	rdlong	local06, fp
23174     28 28 06 F1 | 	add	local06, #40
23178     14 2B 02 F6 | 	mov	local07, local06
2317c     1C 4E 05 F1 | 	add	fp, #28
23180     A7 2C 02 FB | 	rdlong	local08, fp
23184     20 4E 85 F1 | 	sub	fp, #32
23188     01 2E 06 F6 | 	mov	local09, #1
2318c     15 15 02 F6 | 	mov	arg02, local07
23190     16 17 02 F6 | 	mov	arg03, local08
23194     01 18 06 F6 | 	mov	arg04, #1
23198     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2319c     FD 30 0A F6 | 	mov	local10, result1 wz
231a0     1C 00 90 AD |  if_e	jmp	#LR__3697
231a4     04 4E 05 F1 | 	add	fp, #4
231a8     A7 30 02 FB | 	rdlong	local10, fp
231ac     04 4E 85 F1 | 	sub	fp, #4
231b0     11 30 06 F1 | 	add	local10, #17
231b4     18 03 48 FC | 	wrbyte	#1, local10
231b8                 | ' 				fp->fptr < fp->obj.objsize &&
231b8                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
231b8                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
231b8     01 FA 05 F6 | 	mov	result1, #1
231bc     E0 01 90 FD | 	jmp	#LR__3703
231c0                 | LR__3697
231c0     04 4E 05 F1 | 	add	fp, #4
231c4     A7 18 02 FB | 	rdlong	arg04, fp
231c8     1C 4E 05 F1 | 	add	fp, #28
231cc     A7 FA 01 FB | 	rdlong	result1, fp
231d0     20 4E 85 F1 | 	sub	fp, #32
231d4     1C 18 06 F1 | 	add	arg04, #28
231d8     0C FB 61 FC | 	wrlong	result1, arg04
231dc                 | LR__3698
231dc     04 4E 05 F1 | 	add	fp, #4
231e0     A7 FA 01 FB | 	rdlong	result1, fp
231e4     14 FA 05 F1 | 	add	result1, #20
231e8     FD FA 01 FB | 	rdlong	result1, result1
231ec     FF FB 05 F5 | 	and	result1, #511
231f0     09 32 C6 F9 | 	decod	local11, #9
231f4     FD 32 82 F1 | 	sub	local11, result1
231f8     20 4E 05 F1 | 	add	fp, #32
231fc     A7 32 62 FC | 	wrlong	local11, fp
23200     18 4E 85 F1 | 	sub	fp, #24
23204     A7 FA 01 FB | 	rdlong	result1, fp
23208     0C 4E 85 F1 | 	sub	fp, #12
2320c     FD 32 1A F2 | 	cmp	local11, result1 wcz
23210     0C 4E 05 11 |  if_a	add	fp, #12
23214     A7 32 02 1B |  if_a	rdlong	local11, fp
23218     18 4E 05 11 |  if_a	add	fp, #24
2321c     A7 32 62 1C |  if_a	wrlong	local11, fp
23220     24 4E 85 11 |  if_a	sub	fp, #36
23224     04 4E 05 F1 | 	add	fp, #4
23228     A7 32 02 FB | 	rdlong	local11, fp
2322c     19 13 02 F6 | 	mov	arg01, local11
23230     28 12 06 F1 | 	add	arg01, #40
23234     14 32 06 F1 | 	add	local11, #20
23238     19 33 02 FB | 	rdlong	local11, local11
2323c     FF 33 06 F5 | 	and	local11, #511
23240     19 13 02 F1 | 	add	arg01, local11
23244     2C 4E 05 F1 | 	add	fp, #44
23248     A7 14 02 FB | 	rdlong	arg02, fp
2324c     0C 4E 85 F1 | 	sub	fp, #12
23250     A7 16 02 FB | 	rdlong	arg03, fp
23254     24 4E 85 F1 | 	sub	fp, #36
23258     1C 45 BF FD | 	call	#__system____builtin_memmove
2325c     04 4E 05 F1 | 	add	fp, #4
23260     A7 FA 01 FB | 	rdlong	result1, fp
23264     FD 32 02 F6 | 	mov	local11, result1
23268     04 4E 85 F1 | 	sub	fp, #4
2326c     10 FA 05 F1 | 	add	result1, #16
23270     FD FA C1 FA | 	rdbyte	result1, result1
23274     80 FA 45 F5 | 	or	result1, #128
23278     10 32 06 F1 | 	add	local11, #16
2327c     19 FB 41 FC | 	wrbyte	result1, local11
23280                 | LR__3699
23280     0C 4E 05 F1 | 	add	fp, #12
23284     A7 32 02 FB | 	rdlong	local11, fp
23288     18 4E 05 F1 | 	add	fp, #24
2328c     A7 FA 01 FB | 	rdlong	result1, fp
23290     FD 32 82 F1 | 	sub	local11, result1
23294     18 4E 85 F1 | 	sub	fp, #24
23298     A7 32 62 FC | 	wrlong	local11, fp
2329c     04 4E 05 F1 | 	add	fp, #4
232a0     A7 34 02 FB | 	rdlong	local12, fp
232a4     1A 33 02 FB | 	rdlong	local11, local12
232a8     14 4E 05 F1 | 	add	fp, #20
232ac     A7 36 02 FB | 	rdlong	local13, fp
232b0     1B 33 02 F1 | 	add	local11, local13
232b4     1A 33 62 FC | 	wrlong	local11, local12
232b8     0C 4E 05 F1 | 	add	fp, #12
232bc     A7 32 02 FB | 	rdlong	local11, fp
232c0     0C 4E 85 F1 | 	sub	fp, #12
232c4     A7 38 02 FB | 	rdlong	local14, fp
232c8     1C 33 02 F1 | 	add	local11, local14
232cc     0C 4E 05 F1 | 	add	fp, #12
232d0     A7 32 62 FC | 	wrlong	local11, fp
232d4     2C 4E 85 F1 | 	sub	fp, #44
232d8     A7 3A 02 FB | 	rdlong	local15, fp
232dc     1D 33 02 F6 | 	mov	local11, local15
232e0     14 3A 06 F1 | 	add	local15, #20
232e4     1D 3B 02 FB | 	rdlong	local15, local15
232e8     20 4E 05 F1 | 	add	fp, #32
232ec     A7 3C 02 FB | 	rdlong	local16, fp
232f0     1E 3B 02 F1 | 	add	local15, local16
232f4     14 32 06 F1 | 	add	local11, #20
232f8     19 3B 62 FC | 	wrlong	local15, local11
232fc     20 4E 85 F1 | 	sub	fp, #32
23300     A7 3E 02 FB | 	rdlong	local17, fp
23304     1F 33 02 F6 | 	mov	local11, local17
23308     1F 41 02 F6 | 	mov	local18, local17
2330c     04 4E 85 F1 | 	sub	fp, #4
23310     14 3E 06 F1 | 	add	local17, #20
23314     1F 43 02 FB | 	rdlong	local19, local17
23318     0C 40 06 F1 | 	add	local18, #12
2331c     20 45 02 FB | 	rdlong	local20, local18
23320     22 43 1A F2 | 	cmp	local19, local20 wcz
23324     24 00 90 ED |  if_be	jmp	#LR__3700
23328     04 4E 05 F1 | 	add	fp, #4
2332c     A7 26 02 FB | 	rdlong	local05, fp
23330     04 4E 85 F1 | 	sub	fp, #4
23334     13 23 02 F6 | 	mov	local03, local05
23338     14 22 06 F1 | 	add	local03, #20
2333c     11 25 02 FB | 	rdlong	local04, local03
23340     14 22 86 F1 | 	sub	local03, #20
23344     12 47 02 F6 | 	mov	local21, local04
23348     20 00 90 FD | 	jmp	#LR__3701
2334c                 | LR__3700
2334c     04 4E 05 F1 | 	add	fp, #4
23350     A7 2A 02 FB | 	rdlong	local07, fp
23354     04 4E 85 F1 | 	sub	fp, #4
23358     15 31 02 F6 | 	mov	local10, local07
2335c     0C 30 06 F1 | 	add	local10, #12
23360     18 2D 02 FB | 	rdlong	local08, local10
23364     0C 30 86 F1 | 	sub	local10, #12
23368     16 47 02 F6 | 	mov	local21, local08
2336c                 | LR__3701
2336c     0C 32 06 F1 | 	add	local11, #12
23370     19 47 62 FC | 	wrlong	local21, local11
23374     5C F9 9F FD | 	jmp	#LR__3683
23378                 | LR__3702
23378     04 4E 05 F1 | 	add	fp, #4
2337c     A7 34 02 FB | 	rdlong	local12, fp
23380     1A 1F 02 F6 | 	mov	local01, local12
23384     04 4E 85 F1 | 	sub	fp, #4
23388     10 34 06 F1 | 	add	local12, #16
2338c     1A 33 C2 FA | 	rdbyte	local11, local12
23390     40 32 46 F5 | 	or	local11, #64
23394     10 1E 06 F1 | 	add	local01, #16
23398     0F 33 42 FC | 	wrbyte	local11, local01
2339c                 | ' 
2339c                 | ' 
2339c                 | ' 
2339c                 | ' 
2339c                 | ' 
2339c                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2339c                 | ' 		fp->flag |=  0x80 ;
2339c                 | ' 
2339c                 | ' 	}
2339c                 | ' 
2339c                 | ' 	fp->flag |=  0x40 ;
2339c                 | ' 
2339c                 | ' 	return FR_OK ;
2339c     00 FA 05 F6 | 	mov	result1, #0
233a0                 | LR__3703
233a0     A7 F0 03 F6 | 	mov	ptra, fp
233a4     B2 00 A0 FD | 	call	#popregs_
233a8                 | _fatfs_cc_f_write_ret
233a8     2D 00 64 FD | 	ret
233ac                 | 
233ac                 | _fatfs_cc_f_sync
233ac     00 4A 05 F6 | 	mov	COUNT_, #0
233b0     A8 00 A0 FD | 	call	#pushregs_
233b4     18 F0 07 F1 | 	add	ptra, #24
233b8     04 4E 05 F1 | 	add	fp, #4
233bc     A7 12 62 FC | 	wrlong	arg01, fp
233c0     08 4E 05 F1 | 	add	fp, #8
233c4     A7 14 02 F6 | 	mov	arg02, fp
233c8     0C 4E 85 F1 | 	sub	fp, #12
233cc     D0 E8 BF FD | 	call	#_fatfs_cc_validate
233d0     08 4E 05 F1 | 	add	fp, #8
233d4     A7 FA 61 FC | 	wrlong	result1, fp
233d8     08 4E 85 F1 | 	sub	fp, #8
233dc     00 FA 0D F2 | 	cmp	result1, #0 wz
233e0     C0 01 90 5D |  if_ne	jmp	#LR__3713
233e4     04 4E 05 F1 | 	add	fp, #4
233e8     A7 18 02 FB | 	rdlong	arg04, fp
233ec     04 4E 85 F1 | 	sub	fp, #4
233f0     10 18 06 F1 | 	add	arg04, #16
233f4     0C 19 C2 FA | 	rdbyte	arg04, arg04
233f8     40 18 CE F7 | 	test	arg04, #64 wz
233fc     A4 01 90 AD |  if_e	jmp	#LR__3712
23400     04 4E 05 F1 | 	add	fp, #4
23404     A7 18 02 FB | 	rdlong	arg04, fp
23408     04 4E 85 F1 | 	sub	fp, #4
2340c     10 18 06 F1 | 	add	arg04, #16
23410     0C 19 C2 FA | 	rdbyte	arg04, arg04
23414     80 18 CE F7 | 	test	arg04, #128 wz
23418     64 00 90 AD |  if_e	jmp	#LR__3710
2341c     0C 4E 05 F1 | 	add	fp, #12
23420     A7 18 02 FB | 	rdlong	arg04, fp
23424     01 18 06 F1 | 	add	arg04, #1
23428     0C 13 C2 FA | 	rdbyte	arg01, arg04
2342c     08 4E 85 F1 | 	sub	fp, #8
23430     A7 18 02 FB | 	rdlong	arg04, fp
23434     0C 15 02 F6 | 	mov	arg02, arg04
23438     28 14 06 F1 | 	add	arg02, #40
2343c     04 4E 85 F1 | 	sub	fp, #4
23440     1C 18 06 F1 | 	add	arg04, #28
23444     0C 17 02 FB | 	rdlong	arg03, arg04
23448     01 18 06 F6 | 	mov	arg04, #1
2344c     0C AE BF FD | 	call	#_fatfs_cc_disk_write
23450     00 FA 0D F2 | 	cmp	result1, #0 wz
23454     01 FA 05 56 |  if_ne	mov	result1, #1
23458     54 01 90 5D |  if_ne	jmp	#LR__3714
2345c     04 4E 05 F1 | 	add	fp, #4
23460     A7 18 02 FB | 	rdlong	arg04, fp
23464     0C 17 02 F6 | 	mov	arg03, arg04
23468     04 4E 85 F1 | 	sub	fp, #4
2346c     10 18 06 F1 | 	add	arg04, #16
23470     0C 19 C2 FA | 	rdbyte	arg04, arg04
23474     7F 18 06 F5 | 	and	arg04, #127
23478     10 16 06 F1 | 	add	arg03, #16
2347c     0B 19 42 FC | 	wrbyte	arg04, arg03
23480                 | LR__3710
23480     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
23484     10 4E 05 F1 | 	add	fp, #16
23488     A7 FA 61 FC | 	wrlong	result1, fp
2348c     04 4E 85 F1 | 	sub	fp, #4
23490     A7 12 02 FB | 	rdlong	arg01, fp
23494     08 4E 85 F1 | 	sub	fp, #8
23498     A7 18 02 FB | 	rdlong	arg04, fp
2349c     04 4E 85 F1 | 	sub	fp, #4
234a0     20 18 06 F1 | 	add	arg04, #32
234a4     0C 15 02 FB | 	rdlong	arg02, arg04
234a8     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
234ac     08 4E 05 F1 | 	add	fp, #8
234b0     A7 FA 61 FC | 	wrlong	result1, fp
234b4     08 4E 85 F1 | 	sub	fp, #8
234b8     00 FA 0D F2 | 	cmp	result1, #0 wz
234bc     E4 00 90 5D |  if_ne	jmp	#LR__3711
234c0     04 4E 05 F1 | 	add	fp, #4
234c4     A7 18 02 FB | 	rdlong	arg04, fp
234c8     24 18 06 F1 | 	add	arg04, #36
234cc     0C 19 02 FB | 	rdlong	arg04, arg04
234d0     10 4E 05 F1 | 	add	fp, #16
234d4     A7 18 62 FC | 	wrlong	arg04, fp
234d8     0C 17 02 F6 | 	mov	arg03, arg04
234dc     0B 16 06 F1 | 	add	arg03, #11
234e0     0B 17 C2 FA | 	rdbyte	arg03, arg03
234e4     20 16 46 F5 | 	or	arg03, #32
234e8     0B 18 06 F1 | 	add	arg04, #11
234ec     0C 17 42 FC | 	wrbyte	arg03, arg04
234f0     10 4E 85 F1 | 	sub	fp, #16
234f4     A7 18 02 FB | 	rdlong	arg04, fp
234f8     0C 13 02 FB | 	rdlong	arg01, arg04
234fc     10 4E 05 F1 | 	add	fp, #16
23500     A7 14 02 FB | 	rdlong	arg02, fp
23504     14 4E 85 F1 | 	sub	fp, #20
23508     08 18 06 F1 | 	add	arg04, #8
2350c     0C 17 02 FB | 	rdlong	arg03, arg04
23510     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
23514     14 4E 05 F1 | 	add	fp, #20
23518     A7 12 02 FB | 	rdlong	arg01, fp
2351c     1C 12 06 F1 | 	add	arg01, #28
23520     10 4E 85 F1 | 	sub	fp, #16
23524     A7 18 02 FB | 	rdlong	arg04, fp
23528     0C 18 06 F1 | 	add	arg04, #12
2352c     0C 15 02 FB | 	rdlong	arg02, arg04
23530     09 15 62 FC | 	wrlong	arg02, arg01
23534     10 4E 05 F1 | 	add	fp, #16
23538     A7 12 02 FB | 	rdlong	arg01, fp
2353c     16 12 06 F1 | 	add	arg01, #22
23540     04 4E 85 F1 | 	sub	fp, #4
23544     A7 14 02 FB | 	rdlong	arg02, fp
23548     09 15 62 FC | 	wrlong	arg02, arg01
2354c     04 4E 05 F1 | 	add	fp, #4
23550     A7 12 02 FB | 	rdlong	arg01, fp
23554     12 12 06 F1 | 	add	arg01, #18
23558     09 01 58 FC | 	wrword	#0, arg01
2355c     08 4E 85 F1 | 	sub	fp, #8
23560     A7 18 02 FB | 	rdlong	arg04, fp
23564     03 18 06 F1 | 	add	arg04, #3
23568     0C 03 48 FC | 	wrbyte	#1, arg04
2356c     A7 12 02 FB | 	rdlong	arg01, fp
23570     0C 4E 85 F1 | 	sub	fp, #12
23574     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
23578     08 4E 05 F1 | 	add	fp, #8
2357c     A7 FA 61 FC | 	wrlong	result1, fp
23580     04 4E 85 F1 | 	sub	fp, #4
23584     A7 18 02 FB | 	rdlong	arg04, fp
23588     0C 17 02 F6 | 	mov	arg03, arg04
2358c     04 4E 85 F1 | 	sub	fp, #4
23590     10 18 06 F1 | 	add	arg04, #16
23594     0C 19 C2 FA | 	rdbyte	arg04, arg04
23598     BF 18 06 F5 | 	and	arg04, #191
2359c     10 16 06 F1 | 	add	arg03, #16
235a0     0B 19 42 FC | 	wrbyte	arg04, arg03
235a4                 | LR__3711
235a4                 | LR__3712
235a4                 | LR__3713
235a4                 | ' 					dir = fp->dir_ptr;
235a4                 | ' 					dir[ 11 ] |=  0x20 ;
235a4                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
235a4                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
235a4                 | ' 					st_dword(dir +  22 , tm);
235a4                 | ' 					st_word(dir +  18 , 0);
235a4                 | ' 					fs->wflag = 1;
235a4                 | ' 					res = sync_fs(fs);
235a4                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
235a4                 | ' 				}
235a4                 | ' 			}
235a4                 | ' 		}
235a4                 | ' 	}
235a4                 | ' 
235a4                 | ' 	return res ;
235a4     08 4E 05 F1 | 	add	fp, #8
235a8     A7 FA 01 FB | 	rdlong	result1, fp
235ac     08 4E 85 F1 | 	sub	fp, #8
235b0                 | LR__3714
235b0     A7 F0 03 F6 | 	mov	ptra, fp
235b4     B2 00 A0 FD | 	call	#popregs_
235b8                 | _fatfs_cc_f_sync_ret
235b8     2D 00 64 FD | 	ret
235bc                 | 
235bc                 | _fatfs_cc_f_close
235bc     01 4A 05 F6 | 	mov	COUNT_, #1
235c0     A8 00 A0 FD | 	call	#pushregs_
235c4     10 F0 07 F1 | 	add	ptra, #16
235c8     04 4E 05 F1 | 	add	fp, #4
235cc     A7 12 62 FC | 	wrlong	arg01, fp
235d0     04 4E 85 F1 | 	sub	fp, #4
235d4     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
235d8     08 4E 05 F1 | 	add	fp, #8
235dc     A7 FA 61 FC | 	wrlong	result1, fp
235e0     08 4E 85 F1 | 	sub	fp, #8
235e4     00 FA 0D F2 | 	cmp	result1, #0 wz
235e8     38 00 90 5D |  if_ne	jmp	#LR__3720
235ec     04 4E 05 F1 | 	add	fp, #4
235f0     A7 12 02 FB | 	rdlong	arg01, fp
235f4     08 4E 05 F1 | 	add	fp, #8
235f8     A7 14 02 F6 | 	mov	arg02, fp
235fc     0C 4E 85 F1 | 	sub	fp, #12
23600     9C E6 BF FD | 	call	#_fatfs_cc_validate
23604     08 4E 05 F1 | 	add	fp, #8
23608     A7 FA 61 FC | 	wrlong	result1, fp
2360c     08 4E 85 F1 | 	sub	fp, #8
23610     00 FA 0D F2 | 	cmp	result1, #0 wz
23614     04 4E 05 A1 |  if_e	add	fp, #4
23618     A7 1E 02 AB |  if_e	rdlong	local01, fp
2361c     04 4E 85 A1 |  if_e	sub	fp, #4
23620     0F 01 68 AC |  if_e	wrlong	#0, local01
23624                 | LR__3720
23624                 | ' 
23624                 | ' 
23624                 | ' 
23624                 | ' 
23624                 | ' 			fp->obj.fs = 0;
23624                 | ' #line 4192 "ff.c"
23624                 | ' 		}
23624                 | ' 	}
23624                 | ' 	return res;
23624     08 4E 05 F1 | 	add	fp, #8
23628     A7 FA 01 FB | 	rdlong	result1, fp
2362c     08 4E 85 F1 | 	sub	fp, #8
23630     A7 F0 03 F6 | 	mov	ptra, fp
23634     B2 00 A0 FD | 	call	#popregs_
23638                 | _fatfs_cc_f_close_ret
23638     2D 00 64 FD | 	ret
2363c                 | 
2363c                 | _fatfs_cc_f_lseek
2363c     00 4A 05 F6 | 	mov	COUNT_, #0
23640     A8 00 A0 FD | 	call	#pushregs_
23644     24 F0 07 F1 | 	add	ptra, #36
23648     04 4E 05 F1 | 	add	fp, #4
2364c     A7 12 62 FC | 	wrlong	arg01, fp
23650     04 4E 05 F1 | 	add	fp, #4
23654     A7 14 62 FC | 	wrlong	arg02, fp
23658     04 4E 85 F1 | 	sub	fp, #4
2365c     A7 12 02 FB | 	rdlong	arg01, fp
23660     0C 4E 05 F1 | 	add	fp, #12
23664     A7 14 02 F6 | 	mov	arg02, fp
23668     10 4E 85 F1 | 	sub	fp, #16
2366c     30 E6 BF FD | 	call	#_fatfs_cc_validate
23670     0C 4E 05 F1 | 	add	fp, #12
23674     A7 FA 61 FC | 	wrlong	result1, fp
23678     0C 4E 85 F1 | 	sub	fp, #12
2367c     00 FA 0D F2 | 	cmp	result1, #0 wz
23680     1C 00 90 5D |  if_ne	jmp	#LR__3730
23684     04 4E 05 F1 | 	add	fp, #4
23688     A7 18 02 FB | 	rdlong	arg04, fp
2368c     11 18 06 F1 | 	add	arg04, #17
23690     0C 19 C2 FA | 	rdbyte	arg04, arg04
23694     08 4E 05 F1 | 	add	fp, #8
23698     A7 18 62 FC | 	wrlong	arg04, fp
2369c     0C 4E 85 F1 | 	sub	fp, #12
236a0                 | LR__3730
236a0     0C 4E 05 F1 | 	add	fp, #12
236a4     A7 18 0A FB | 	rdlong	arg04, fp wz
236a8     0C 4E 85 F1 | 	sub	fp, #12
236ac     0C 4E 05 51 |  if_ne	add	fp, #12
236b0     A7 FA 01 5B |  if_ne	rdlong	result1, fp
236b4     0C 4E 85 51 |  if_ne	sub	fp, #12
236b8     40 06 90 5D |  if_ne	jmp	#LR__3753
236bc     04 4E 05 F1 | 	add	fp, #4
236c0     A7 18 02 FB | 	rdlong	arg04, fp
236c4     04 4E 05 F1 | 	add	fp, #4
236c8     A7 16 02 FB | 	rdlong	arg03, fp
236cc     08 4E 85 F1 | 	sub	fp, #8
236d0     0C 18 06 F1 | 	add	arg04, #12
236d4     0C 19 02 FB | 	rdlong	arg04, arg04
236d8     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
236dc     3C 00 90 ED |  if_be	jmp	#LR__3731
236e0     04 4E 05 F1 | 	add	fp, #4
236e4     A7 16 02 FB | 	rdlong	arg03, fp
236e8     04 4E 85 F1 | 	sub	fp, #4
236ec     10 16 06 F1 | 	add	arg03, #16
236f0     0B 17 C2 FA | 	rdbyte	arg03, arg03
236f4     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
236f8     02 16 CE F7 | 	test	arg03, #2 wz
236fc     1C 00 90 5D |  if_ne	jmp	#LR__3731
23700     04 4E 05 F1 | 	add	fp, #4
23704     A7 16 02 FB | 	rdlong	arg03, fp
23708     0C 16 06 F1 | 	add	arg03, #12
2370c     0B 17 02 FB | 	rdlong	arg03, arg03
23710     04 4E 05 F1 | 	add	fp, #4
23714     A7 16 62 FC | 	wrlong	arg03, fp
23718     08 4E 85 F1 | 	sub	fp, #8
2371c                 | LR__3731
2371c     04 4E 05 F1 | 	add	fp, #4
23720     A7 16 02 FB | 	rdlong	arg03, fp
23724     14 16 06 F1 | 	add	arg03, #20
23728     0B 17 02 FB | 	rdlong	arg03, arg03
2372c     1C 4E 05 F1 | 	add	fp, #28
23730     A7 16 62 FC | 	wrlong	arg03, fp
23734     1C 4E 85 F1 | 	sub	fp, #28
23738     A7 16 02 FB | 	rdlong	arg03, fp
2373c     18 4E 05 F1 | 	add	fp, #24
23740     A7 00 68 FC | 	wrlong	#0, fp
23744     14 16 06 F1 | 	add	arg03, #20
23748     0B 01 68 FC | 	wrlong	#0, arg03
2374c     14 4E 85 F1 | 	sub	fp, #20
23750     A7 16 02 FB | 	rdlong	arg03, fp
23754     08 4E 85 F1 | 	sub	fp, #8
23758     01 16 16 F2 | 	cmp	arg03, #1 wc
2375c     E4 03 90 CD |  if_b	jmp	#LR__3747
23760     10 4E 05 F1 | 	add	fp, #16
23764     A7 16 02 FB | 	rdlong	arg03, fp
23768     0A 16 06 F1 | 	add	arg03, #10
2376c     0B 19 E2 FA | 	rdword	arg04, arg03
23770     09 18 66 F0 | 	shl	arg04, #9
23774     08 4E 05 F1 | 	add	fp, #8
23778     A7 18 62 FC | 	wrlong	arg04, fp
2377c     08 4E 05 F1 | 	add	fp, #8
23780     A7 18 02 FB | 	rdlong	arg04, fp
23784     20 4E 85 F1 | 	sub	fp, #32
23788     01 18 16 F2 | 	cmp	arg04, #1 wc
2378c     AC 00 90 CD |  if_b	jmp	#LR__3732
23790     08 4E 05 F1 | 	add	fp, #8
23794     A7 18 02 FB | 	rdlong	arg04, fp
23798     01 18 86 F1 | 	sub	arg04, #1
2379c     10 4E 05 F1 | 	add	fp, #16
237a0     A7 16 02 FB | 	rdlong	arg03, fp
237a4     0B 19 12 FD | 	qdiv	arg04, arg03
237a8     08 4E 05 F1 | 	add	fp, #8
237ac     A7 FA 01 FB | 	rdlong	result1, fp
237b0     01 FA 85 F1 | 	sub	result1, #1
237b4     18 18 62 FD | 	getqx	arg04
237b8     0B FB 11 FD | 	qdiv	result1, arg03
237bc     20 4E 85 F1 | 	sub	fp, #32
237c0     18 16 62 FD | 	getqx	arg03
237c4     0B 19 12 F2 | 	cmp	arg04, arg03 wc
237c8     70 00 90 CD |  if_b	jmp	#LR__3732
237cc     04 4E 05 F1 | 	add	fp, #4
237d0     A7 16 02 FB | 	rdlong	arg03, fp
237d4     1C 4E 05 F1 | 	add	fp, #28
237d8     A7 FA 01 FB | 	rdlong	result1, fp
237dc     01 FA 85 F1 | 	sub	result1, #1
237e0     08 4E 85 F1 | 	sub	fp, #8
237e4     A7 18 02 FB | 	rdlong	arg04, fp
237e8     01 18 86 F1 | 	sub	arg04, #1
237ec     0C FB 21 F5 | 	andn	result1, arg04
237f0     14 16 06 F1 | 	add	arg03, #20
237f4     0B FB 61 FC | 	wrlong	result1, arg03
237f8     10 4E 85 F1 | 	sub	fp, #16
237fc     A7 16 02 FB | 	rdlong	arg03, fp
23800     04 4E 85 F1 | 	sub	fp, #4
23804     A7 18 02 FB | 	rdlong	arg04, fp
23808     14 18 06 F1 | 	add	arg04, #20
2380c     0C 19 02 FB | 	rdlong	arg04, arg04
23810     0C 17 82 F1 | 	sub	arg03, arg04
23814     04 4E 05 F1 | 	add	fp, #4
23818     A7 16 62 FC | 	wrlong	arg03, fp
2381c     04 4E 85 F1 | 	sub	fp, #4
23820     A7 16 02 FB | 	rdlong	arg03, fp
23824     18 16 06 F1 | 	add	arg03, #24
23828     0B 17 02 FB | 	rdlong	arg03, arg03
2382c     10 4E 05 F1 | 	add	fp, #16
23830     A7 16 62 FC | 	wrlong	arg03, fp
23834     14 4E 85 F1 | 	sub	fp, #20
23838     D0 00 90 FD | 	jmp	#LR__3736
2383c                 | LR__3732
2383c     04 4E 05 F1 | 	add	fp, #4
23840     A7 16 02 FB | 	rdlong	arg03, fp
23844     08 16 06 F1 | 	add	arg03, #8
23848     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2384c     10 4E 05 F1 | 	add	fp, #16
23850     A7 16 62 FC | 	wrlong	arg03, fp
23854     14 4E 85 F1 | 	sub	fp, #20
23858     94 00 90 5D |  if_ne	jmp	#LR__3735
2385c     04 4E 05 F1 | 	add	fp, #4
23860     A7 12 02 FB | 	rdlong	arg01, fp
23864     04 4E 85 F1 | 	sub	fp, #4
23868     00 14 06 F6 | 	mov	arg02, #0
2386c     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
23870     14 4E 05 F1 | 	add	fp, #20
23874     A7 FA 61 FC | 	wrlong	result1, fp
23878     14 4E 85 F1 | 	sub	fp, #20
2387c     01 FA 0D F2 | 	cmp	result1, #1 wz
23880     1C 00 90 5D |  if_ne	jmp	#LR__3733
23884     04 4E 05 F1 | 	add	fp, #4
23888     A7 16 02 FB | 	rdlong	arg03, fp
2388c     04 4E 85 F1 | 	sub	fp, #4
23890     11 16 06 F1 | 	add	arg03, #17
23894     0B 05 48 FC | 	wrbyte	#2, arg03
23898     02 FA 05 F6 | 	mov	result1, #2
2389c     5C 04 90 FD | 	jmp	#LR__3753
238a0                 | LR__3733
238a0     14 4E 05 F1 | 	add	fp, #20
238a4     A7 FA 01 FB | 	rdlong	result1, fp
238a8     14 4E 85 F1 | 	sub	fp, #20
238ac     FF FF 7F FF 
238b0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
238b4     1C 00 90 5D |  if_ne	jmp	#LR__3734
238b8     04 4E 05 F1 | 	add	fp, #4
238bc     A7 16 02 FB | 	rdlong	arg03, fp
238c0     04 4E 85 F1 | 	sub	fp, #4
238c4     11 16 06 F1 | 	add	arg03, #17
238c8     0B 03 48 FC | 	wrbyte	#1, arg03
238cc     01 FA 05 F6 | 	mov	result1, #1
238d0     28 04 90 FD | 	jmp	#LR__3753
238d4                 | LR__3734
238d4     04 4E 05 F1 | 	add	fp, #4
238d8     A7 16 02 FB | 	rdlong	arg03, fp
238dc     10 4E 05 F1 | 	add	fp, #16
238e0     A7 18 02 FB | 	rdlong	arg04, fp
238e4     14 4E 85 F1 | 	sub	fp, #20
238e8     08 16 06 F1 | 	add	arg03, #8
238ec     0B 19 62 FC | 	wrlong	arg04, arg03
238f0                 | LR__3735
238f0     04 4E 05 F1 | 	add	fp, #4
238f4     A7 16 02 FB | 	rdlong	arg03, fp
238f8     10 4E 05 F1 | 	add	fp, #16
238fc     A7 18 02 FB | 	rdlong	arg04, fp
23900     14 4E 85 F1 | 	sub	fp, #20
23904     18 16 06 F1 | 	add	arg03, #24
23908     0B 19 62 FC | 	wrlong	arg04, arg03
2390c                 | LR__3736
2390c     14 4E 05 F1 | 	add	fp, #20
23910     A7 16 0A FB | 	rdlong	arg03, fp wz
23914     14 4E 85 F1 | 	sub	fp, #20
23918     28 02 90 AD |  if_e	jmp	#LR__3746
2391c                 | ' 				while (ofs > bcs) {
2391c                 | LR__3737
2391c     08 4E 05 F1 | 	add	fp, #8
23920     A7 18 02 FB | 	rdlong	arg04, fp
23924     10 4E 05 F1 | 	add	fp, #16
23928     A7 16 02 FB | 	rdlong	arg03, fp
2392c     18 4E 85 F1 | 	sub	fp, #24
23930     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
23934     68 01 90 ED |  if_be	jmp	#LR__3743
23938     08 4E 05 F1 | 	add	fp, #8
2393c     A7 18 02 FB | 	rdlong	arg04, fp
23940     10 4E 05 F1 | 	add	fp, #16
23944     A7 16 02 FB | 	rdlong	arg03, fp
23948     0B 19 82 F1 | 	sub	arg04, arg03
2394c     10 4E 85 F1 | 	sub	fp, #16
23950     A7 18 62 FC | 	wrlong	arg04, fp
23954     04 4E 85 F1 | 	sub	fp, #4
23958     A7 18 02 FB | 	rdlong	arg04, fp
2395c     0C FB 01 F6 | 	mov	result1, arg04
23960     14 18 06 F1 | 	add	arg04, #20
23964     0C 19 02 FB | 	rdlong	arg04, arg04
23968     14 4E 05 F1 | 	add	fp, #20
2396c     A7 16 02 FB | 	rdlong	arg03, fp
23970     0B 19 02 F1 | 	add	arg04, arg03
23974     14 FA 05 F1 | 	add	result1, #20
23978     FD 18 62 FC | 	wrlong	arg04, result1
2397c     14 4E 85 F1 | 	sub	fp, #20
23980     A7 16 02 FB | 	rdlong	arg03, fp
23984     04 4E 85 F1 | 	sub	fp, #4
23988     10 16 06 F1 | 	add	arg03, #16
2398c     0B 17 C2 FA | 	rdbyte	arg03, arg03
23990     02 16 CE F7 | 	test	arg03, #2 wz
23994     3C 00 90 AD |  if_e	jmp	#LR__3738
23998     04 4E 05 F1 | 	add	fp, #4
2399c     A7 12 02 FB | 	rdlong	arg01, fp
239a0     10 4E 05 F1 | 	add	fp, #16
239a4     A7 14 02 FB | 	rdlong	arg02, fp
239a8     14 4E 85 F1 | 	sub	fp, #20
239ac     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
239b0     14 4E 05 F1 | 	add	fp, #20
239b4     A7 FA 61 FC | 	wrlong	result1, fp
239b8     00 FA 4D F2 | 	cmps	result1, #0 wz
239bc     14 4E 85 F1 | 	sub	fp, #20
239c0     08 4E 05 A1 |  if_e	add	fp, #8
239c4     A7 00 68 AC |  if_e	wrlong	#0, fp
239c8     08 4E 85 A1 |  if_e	sub	fp, #8
239cc                 | ' 							ofs = 0; break;
239cc     D0 00 90 AD |  if_e	jmp	#LR__3743
239d0     24 00 90 FD | 	jmp	#LR__3739
239d4                 | LR__3738
239d4     04 4E 05 F1 | 	add	fp, #4
239d8     A7 12 02 FB | 	rdlong	arg01, fp
239dc     10 4E 05 F1 | 	add	fp, #16
239e0     A7 14 02 FB | 	rdlong	arg02, fp
239e4     14 4E 85 F1 | 	sub	fp, #20
239e8     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
239ec     14 4E 05 F1 | 	add	fp, #20
239f0     A7 FA 61 FC | 	wrlong	result1, fp
239f4     14 4E 85 F1 | 	sub	fp, #20
239f8                 | LR__3739
239f8     14 4E 05 F1 | 	add	fp, #20
239fc     A7 16 02 FB | 	rdlong	arg03, fp
23a00     14 4E 85 F1 | 	sub	fp, #20
23a04     FF FF 7F FF 
23a08     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
23a0c     1C 00 90 5D |  if_ne	jmp	#LR__3740
23a10     04 4E 05 F1 | 	add	fp, #4
23a14     A7 16 02 FB | 	rdlong	arg03, fp
23a18     04 4E 85 F1 | 	sub	fp, #4
23a1c     11 16 06 F1 | 	add	arg03, #17
23a20     0B 03 48 FC | 	wrbyte	#1, arg03
23a24     01 FA 05 F6 | 	mov	result1, #1
23a28     D0 02 90 FD | 	jmp	#LR__3753
23a2c                 | LR__3740
23a2c     14 4E 05 F1 | 	add	fp, #20
23a30     A7 16 02 FB | 	rdlong	arg03, fp
23a34     14 4E 85 F1 | 	sub	fp, #20
23a38     02 16 16 F2 | 	cmp	arg03, #2 wc
23a3c     24 00 90 CD |  if_b	jmp	#LR__3741
23a40     10 4E 05 F1 | 	add	fp, #16
23a44     A7 18 02 FB | 	rdlong	arg04, fp
23a48     04 4E 05 F1 | 	add	fp, #4
23a4c     A7 16 02 FB | 	rdlong	arg03, fp
23a50     14 4E 85 F1 | 	sub	fp, #20
23a54     18 18 06 F1 | 	add	arg04, #24
23a58     0C 19 02 FB | 	rdlong	arg04, arg04
23a5c     0C 17 12 F2 | 	cmp	arg03, arg04 wc
23a60     1C 00 90 CD |  if_b	jmp	#LR__3742
23a64                 | LR__3741
23a64     04 4E 05 F1 | 	add	fp, #4
23a68     A7 16 02 FB | 	rdlong	arg03, fp
23a6c     04 4E 85 F1 | 	sub	fp, #4
23a70     11 16 06 F1 | 	add	arg03, #17
23a74     0B 05 48 FC | 	wrbyte	#2, arg03
23a78     02 FA 05 F6 | 	mov	result1, #2
23a7c     7C 02 90 FD | 	jmp	#LR__3753
23a80                 | LR__3742
23a80     04 4E 05 F1 | 	add	fp, #4
23a84     A7 18 02 FB | 	rdlong	arg04, fp
23a88     10 4E 05 F1 | 	add	fp, #16
23a8c     A7 16 02 FB | 	rdlong	arg03, fp
23a90     14 4E 85 F1 | 	sub	fp, #20
23a94     18 18 06 F1 | 	add	arg04, #24
23a98     0C 17 62 FC | 	wrlong	arg03, arg04
23a9c     7C FE 9F FD | 	jmp	#LR__3737
23aa0                 | LR__3743
23aa0     04 4E 05 F1 | 	add	fp, #4
23aa4     A7 16 02 FB | 	rdlong	arg03, fp
23aa8     0B 13 02 F6 | 	mov	arg01, arg03
23aac     14 16 06 F1 | 	add	arg03, #20
23ab0     0B 15 02 FB | 	rdlong	arg02, arg03
23ab4     04 4E 05 F1 | 	add	fp, #4
23ab8     A7 16 02 FB | 	rdlong	arg03, fp
23abc     0B 15 02 F1 | 	add	arg02, arg03
23ac0     14 12 06 F1 | 	add	arg01, #20
23ac4     09 15 62 FC | 	wrlong	arg02, arg01
23ac8     A7 16 02 FB | 	rdlong	arg03, fp
23acc     08 4E 85 F1 | 	sub	fp, #8
23ad0     FF 17 CE F7 | 	test	arg03, #511 wz
23ad4     6C 00 90 AD |  if_e	jmp	#LR__3745
23ad8     10 4E 05 F1 | 	add	fp, #16
23adc     A7 12 02 FB | 	rdlong	arg01, fp
23ae0     04 4E 05 F1 | 	add	fp, #4
23ae4     A7 14 02 FB | 	rdlong	arg02, fp
23ae8     14 4E 85 F1 | 	sub	fp, #20
23aec     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
23af0     1C 4E 05 F1 | 	add	fp, #28
23af4     A7 FA 61 FC | 	wrlong	result1, fp
23af8     1C 4E 85 F1 | 	sub	fp, #28
23afc     00 FA 0D F2 | 	cmp	result1, #0 wz
23b00     1C 00 90 5D |  if_ne	jmp	#LR__3744
23b04     04 4E 05 F1 | 	add	fp, #4
23b08     A7 16 02 FB | 	rdlong	arg03, fp
23b0c     04 4E 85 F1 | 	sub	fp, #4
23b10     11 16 06 F1 | 	add	arg03, #17
23b14     0B 05 48 FC | 	wrbyte	#2, arg03
23b18     02 FA 05 F6 | 	mov	result1, #2
23b1c     DC 01 90 FD | 	jmp	#LR__3753
23b20                 | LR__3744
23b20     1C 4E 05 F1 | 	add	fp, #28
23b24     A7 18 02 FB | 	rdlong	arg04, fp
23b28     14 4E 85 F1 | 	sub	fp, #20
23b2c     A7 16 02 FB | 	rdlong	arg03, fp
23b30     09 16 46 F0 | 	shr	arg03, #9
23b34     0B 19 02 F1 | 	add	arg04, arg03
23b38     14 4E 05 F1 | 	add	fp, #20
23b3c     A7 18 62 FC | 	wrlong	arg04, fp
23b40     1C 4E 85 F1 | 	sub	fp, #28
23b44                 | LR__3745
23b44                 | LR__3746
23b44                 | LR__3747
23b44     04 4E 05 F1 | 	add	fp, #4
23b48     A7 18 02 FB | 	rdlong	arg04, fp
23b4c     0C 17 02 F6 | 	mov	arg03, arg04
23b50     04 4E 85 F1 | 	sub	fp, #4
23b54     14 16 06 F1 | 	add	arg03, #20
23b58     0B 17 02 FB | 	rdlong	arg03, arg03
23b5c     0C 18 06 F1 | 	add	arg04, #12
23b60     0C 19 02 FB | 	rdlong	arg04, arg04
23b64     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
23b68     3C 00 90 ED |  if_be	jmp	#LR__3748
23b6c     04 4E 05 F1 | 	add	fp, #4
23b70     A7 18 02 FB | 	rdlong	arg04, fp
23b74     0C 17 02 F6 | 	mov	arg03, arg04
23b78     14 18 06 F1 | 	add	arg04, #20
23b7c     0C 19 02 FB | 	rdlong	arg04, arg04
23b80     0C 16 06 F1 | 	add	arg03, #12
23b84     0B 19 62 FC | 	wrlong	arg04, arg03
23b88     A7 18 02 FB | 	rdlong	arg04, fp
23b8c     0C 17 02 F6 | 	mov	arg03, arg04
23b90     04 4E 85 F1 | 	sub	fp, #4
23b94     10 18 06 F1 | 	add	arg04, #16
23b98     0C 19 C2 FA | 	rdbyte	arg04, arg04
23b9c     40 18 46 F5 | 	or	arg04, #64
23ba0     10 16 06 F1 | 	add	arg03, #16
23ba4     0B 19 42 FC | 	wrbyte	arg04, arg03
23ba8                 | LR__3748
23ba8     04 4E 05 F1 | 	add	fp, #4
23bac     A7 16 02 FB | 	rdlong	arg03, fp
23bb0     04 4E 85 F1 | 	sub	fp, #4
23bb4     14 16 06 F1 | 	add	arg03, #20
23bb8     0B 17 02 FB | 	rdlong	arg03, arg03
23bbc     FF 17 CE F7 | 	test	arg03, #511 wz
23bc0     2C 01 90 AD |  if_e	jmp	#LR__3752
23bc4     04 4E 05 F1 | 	add	fp, #4
23bc8     A7 18 02 FB | 	rdlong	arg04, fp
23bcc     18 4E 05 F1 | 	add	fp, #24
23bd0     A7 16 02 FB | 	rdlong	arg03, fp
23bd4     1C 4E 85 F1 | 	sub	fp, #28
23bd8     1C 18 06 F1 | 	add	arg04, #28
23bdc     0C 19 02 FB | 	rdlong	arg04, arg04
23be0     0C 17 0A F2 | 	cmp	arg03, arg04 wz
23be4     08 01 90 AD |  if_e	jmp	#LR__3752
23be8     04 4E 05 F1 | 	add	fp, #4
23bec     A7 16 02 FB | 	rdlong	arg03, fp
23bf0     04 4E 85 F1 | 	sub	fp, #4
23bf4     10 16 06 F1 | 	add	arg03, #16
23bf8     0B 17 C2 FA | 	rdbyte	arg03, arg03
23bfc     80 16 CE F7 | 	test	arg03, #128 wz
23c00     7C 00 90 AD |  if_e	jmp	#LR__3750
23c04     10 4E 05 F1 | 	add	fp, #16
23c08     A7 16 02 FB | 	rdlong	arg03, fp
23c0c     01 16 06 F1 | 	add	arg03, #1
23c10     0B 13 C2 FA | 	rdbyte	arg01, arg03
23c14     0C 4E 85 F1 | 	sub	fp, #12
23c18     A7 16 02 FB | 	rdlong	arg03, fp
23c1c     0B 15 02 F6 | 	mov	arg02, arg03
23c20     28 14 06 F1 | 	add	arg02, #40
23c24     04 4E 85 F1 | 	sub	fp, #4
23c28     1C 16 06 F1 | 	add	arg03, #28
23c2c     0B 17 02 FB | 	rdlong	arg03, arg03
23c30     01 18 06 F6 | 	mov	arg04, #1
23c34     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
23c38     00 FA 0D F2 | 	cmp	result1, #0 wz
23c3c     1C 00 90 AD |  if_e	jmp	#LR__3749
23c40     04 4E 05 F1 | 	add	fp, #4
23c44     A7 16 02 FB | 	rdlong	arg03, fp
23c48     04 4E 85 F1 | 	sub	fp, #4
23c4c     11 16 06 F1 | 	add	arg03, #17
23c50     0B 03 48 FC | 	wrbyte	#1, arg03
23c54     01 FA 05 F6 | 	mov	result1, #1
23c58     A0 00 90 FD | 	jmp	#LR__3753
23c5c                 | LR__3749
23c5c     04 4E 05 F1 | 	add	fp, #4
23c60     A7 18 02 FB | 	rdlong	arg04, fp
23c64     0C 17 02 F6 | 	mov	arg03, arg04
23c68     04 4E 85 F1 | 	sub	fp, #4
23c6c     10 18 06 F1 | 	add	arg04, #16
23c70     0C 19 C2 FA | 	rdbyte	arg04, arg04
23c74     7F 18 06 F5 | 	and	arg04, #127
23c78     10 16 06 F1 | 	add	arg03, #16
23c7c     0B 19 42 FC | 	wrbyte	arg04, arg03
23c80                 | LR__3750
23c80     10 4E 05 F1 | 	add	fp, #16
23c84     A7 16 02 FB | 	rdlong	arg03, fp
23c88     01 16 06 F1 | 	add	arg03, #1
23c8c     0B 13 C2 FA | 	rdbyte	arg01, arg03
23c90     0C 4E 85 F1 | 	sub	fp, #12
23c94     A7 14 02 FB | 	rdlong	arg02, fp
23c98     28 14 06 F1 | 	add	arg02, #40
23c9c     18 4E 05 F1 | 	add	fp, #24
23ca0     A7 16 02 FB | 	rdlong	arg03, fp
23ca4     1C 4E 85 F1 | 	sub	fp, #28
23ca8     01 18 06 F6 | 	mov	arg04, #1
23cac     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
23cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
23cb4     1C 00 90 AD |  if_e	jmp	#LR__3751
23cb8     04 4E 05 F1 | 	add	fp, #4
23cbc     A7 16 02 FB | 	rdlong	arg03, fp
23cc0     04 4E 85 F1 | 	sub	fp, #4
23cc4     11 16 06 F1 | 	add	arg03, #17
23cc8     0B 03 48 FC | 	wrbyte	#1, arg03
23ccc     01 FA 05 F6 | 	mov	result1, #1
23cd0     28 00 90 FD | 	jmp	#LR__3753
23cd4                 | LR__3751
23cd4     04 4E 05 F1 | 	add	fp, #4
23cd8     A7 18 02 FB | 	rdlong	arg04, fp
23cdc     18 4E 05 F1 | 	add	fp, #24
23ce0     A7 16 02 FB | 	rdlong	arg03, fp
23ce4     1C 4E 85 F1 | 	sub	fp, #28
23ce8     1C 18 06 F1 | 	add	arg04, #28
23cec     0C 17 62 FC | 	wrlong	arg03, arg04
23cf0                 | LR__3752
23cf0                 | ' 
23cf0                 | ' 			fp->sect = nsect;
23cf0                 | ' 		}
23cf0                 | ' 	}
23cf0                 | ' 
23cf0                 | ' 	return res ;
23cf0     0C 4E 05 F1 | 	add	fp, #12
23cf4     A7 FA 01 FB | 	rdlong	result1, fp
23cf8     0C 4E 85 F1 | 	sub	fp, #12
23cfc                 | LR__3753
23cfc     A7 F0 03 F6 | 	mov	ptra, fp
23d00     B2 00 A0 FD | 	call	#popregs_
23d04                 | _fatfs_cc_f_lseek_ret
23d04     2D 00 64 FD | 	ret
23d08                 | 
23d08                 | _fatfs_cc_f_opendir
23d08     01 4A 05 F6 | 	mov	COUNT_, #1
23d0c     A8 00 A0 FD | 	call	#pushregs_
23d10     14 F0 07 F1 | 	add	ptra, #20
23d14     04 4E 05 F1 | 	add	fp, #4
23d18     A7 12 62 FC | 	wrlong	arg01, fp
23d1c     04 4E 05 F1 | 	add	fp, #4
23d20     A7 14 62 FC | 	wrlong	arg02, fp
23d24     04 4E 85 F1 | 	sub	fp, #4
23d28     A7 16 0A FB | 	rdlong	arg03, fp wz
23d2c     04 4E 85 F1 | 	sub	fp, #4
23d30     09 FA 05 A6 |  if_e	mov	result1, #9
23d34     78 01 90 AD |  if_e	jmp	#LR__3766
23d38     08 4E 05 F1 | 	add	fp, #8
23d3c     A7 12 02 F6 | 	mov	arg01, fp
23d40     08 4E 05 F1 | 	add	fp, #8
23d44     A7 14 02 F6 | 	mov	arg02, fp
23d48     10 4E 85 F1 | 	sub	fp, #16
23d4c     00 16 06 F6 | 	mov	arg03, #0
23d50     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
23d54     0C 4E 05 F1 | 	add	fp, #12
23d58     A7 FA 61 FC | 	wrlong	result1, fp
23d5c     0C 4E 85 F1 | 	sub	fp, #12
23d60     00 FA 0D F2 | 	cmp	result1, #0 wz
23d64     20 01 90 5D |  if_ne	jmp	#LR__3765
23d68     04 4E 05 F1 | 	add	fp, #4
23d6c     A7 16 02 FB | 	rdlong	arg03, fp
23d70     0C 4E 05 F1 | 	add	fp, #12
23d74     A7 FA 01 FB | 	rdlong	result1, fp
23d78     0B FB 61 FC | 	wrlong	result1, arg03
23d7c     0C 4E 85 F1 | 	sub	fp, #12
23d80     A7 12 02 FB | 	rdlong	arg01, fp
23d84     04 4E 05 F1 | 	add	fp, #4
23d88     A7 14 02 FB | 	rdlong	arg02, fp
23d8c     08 4E 85 F1 | 	sub	fp, #8
23d90     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
23d94     0C 4E 05 F1 | 	add	fp, #12
23d98     A7 FA 61 FC | 	wrlong	result1, fp
23d9c     0C 4E 85 F1 | 	sub	fp, #12
23da0     00 FA 0D F2 | 	cmp	result1, #0 wz
23da4     C4 00 90 5D |  if_ne	jmp	#LR__3764
23da8     04 4E 05 F1 | 	add	fp, #4
23dac     A7 16 02 FB | 	rdlong	arg03, fp
23db0     04 4E 85 F1 | 	sub	fp, #4
23db4     2B 16 06 F1 | 	add	arg03, #43
23db8     0B 17 C2 FA | 	rdbyte	arg03, arg03
23dbc     80 16 CE F7 | 	test	arg03, #128 wz
23dc0     58 00 90 5D |  if_ne	jmp	#LR__3762
23dc4     04 4E 05 F1 | 	add	fp, #4
23dc8     A7 16 02 FB | 	rdlong	arg03, fp
23dcc     04 4E 85 F1 | 	sub	fp, #4
23dd0     06 16 06 F1 | 	add	arg03, #6
23dd4     0B 17 C2 FA | 	rdbyte	arg03, arg03
23dd8     10 16 CE F7 | 	test	arg03, #16 wz
23ddc     30 00 90 AD |  if_e	jmp	#LR__3760
23de0     04 4E 05 F1 | 	add	fp, #4
23de4     A7 16 02 FB | 	rdlong	arg03, fp
23de8     0B 1F 02 F6 | 	mov	local01, arg03
23dec     0C 4E 05 F1 | 	add	fp, #12
23df0     A7 12 02 FB | 	rdlong	arg01, fp
23df4     10 4E 85 F1 | 	sub	fp, #16
23df8     1C 16 06 F1 | 	add	arg03, #28
23dfc     0B 15 02 FB | 	rdlong	arg02, arg03
23e00     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
23e04     08 1E 06 F1 | 	add	local01, #8
23e08     0F FB 61 FC | 	wrlong	result1, local01
23e0c     0C 00 90 FD | 	jmp	#LR__3761
23e10                 | LR__3760
23e10     0C 4E 05 F1 | 	add	fp, #12
23e14     A7 0A 68 FC | 	wrlong	#5, fp
23e18     0C 4E 85 F1 | 	sub	fp, #12
23e1c                 | LR__3761
23e1c                 | LR__3762
23e1c     0C 4E 05 F1 | 	add	fp, #12
23e20     A7 1E 0A FB | 	rdlong	local01, fp wz
23e24     0C 4E 85 F1 | 	sub	fp, #12
23e28     40 00 90 5D |  if_ne	jmp	#LR__3763
23e2c     04 4E 05 F1 | 	add	fp, #4
23e30     A7 1E 02 FB | 	rdlong	local01, fp
23e34     0C 4E 05 F1 | 	add	fp, #12
23e38     A7 16 02 FB | 	rdlong	arg03, fp
23e3c     06 16 06 F1 | 	add	arg03, #6
23e40     0B 17 E2 FA | 	rdword	arg03, arg03
23e44     04 1E 06 F1 | 	add	local01, #4
23e48     0F 17 52 FC | 	wrword	arg03, local01
23e4c     0C 4E 85 F1 | 	sub	fp, #12
23e50     A7 12 02 FB | 	rdlong	arg01, fp
23e54     04 4E 85 F1 | 	sub	fp, #4
23e58     00 14 06 F6 | 	mov	arg02, #0
23e5c     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
23e60     0C 4E 05 F1 | 	add	fp, #12
23e64     A7 FA 61 FC | 	wrlong	result1, fp
23e68     0C 4E 85 F1 | 	sub	fp, #12
23e6c                 | LR__3763
23e6c                 | LR__3764
23e6c     0C 4E 05 F1 | 	add	fp, #12
23e70     A7 1E 02 FB | 	rdlong	local01, fp
23e74     0C 4E 85 F1 | 	sub	fp, #12
23e78     04 1E 0E F2 | 	cmp	local01, #4 wz
23e7c     0C 4E 05 A1 |  if_e	add	fp, #12
23e80     A7 0A 68 AC |  if_e	wrlong	#5, fp
23e84     0C 4E 85 A1 |  if_e	sub	fp, #12
23e88                 | LR__3765
23e88     0C 4E 05 F1 | 	add	fp, #12
23e8c     A7 1E 0A FB | 	rdlong	local01, fp wz
23e90     0C 4E 85 F1 | 	sub	fp, #12
23e94     04 4E 05 51 |  if_ne	add	fp, #4
23e98     A7 1E 02 5B |  if_ne	rdlong	local01, fp
23e9c     04 4E 85 51 |  if_ne	sub	fp, #4
23ea0     0F 01 68 5C |  if_ne	wrlong	#0, local01
23ea4                 | ' 
23ea4                 | ' 	return res ;
23ea4     0C 4E 05 F1 | 	add	fp, #12
23ea8     A7 FA 01 FB | 	rdlong	result1, fp
23eac     0C 4E 85 F1 | 	sub	fp, #12
23eb0                 | LR__3766
23eb0     A7 F0 03 F6 | 	mov	ptra, fp
23eb4     B2 00 A0 FD | 	call	#popregs_
23eb8                 | _fatfs_cc_f_opendir_ret
23eb8     2D 00 64 FD | 	ret
23ebc                 | 
23ebc                 | _fatfs_cc_f_closedir
23ebc     00 4A 05 F6 | 	mov	COUNT_, #0
23ec0     A8 00 A0 FD | 	call	#pushregs_
23ec4     10 F0 07 F1 | 	add	ptra, #16
23ec8     04 4E 05 F1 | 	add	fp, #4
23ecc     A7 12 62 FC | 	wrlong	arg01, fp
23ed0     08 4E 05 F1 | 	add	fp, #8
23ed4     A7 14 02 F6 | 	mov	arg02, fp
23ed8     0C 4E 85 F1 | 	sub	fp, #12
23edc     C0 DD BF FD | 	call	#_fatfs_cc_validate
23ee0     08 4E 05 F1 | 	add	fp, #8
23ee4     A7 FA 61 FC | 	wrlong	result1, fp
23ee8     08 4E 85 F1 | 	sub	fp, #8
23eec     00 FA 0D F2 | 	cmp	result1, #0 wz
23ef0     04 4E 05 A1 |  if_e	add	fp, #4
23ef4     A7 FA 01 AB |  if_e	rdlong	result1, fp
23ef8     04 4E 85 A1 |  if_e	sub	fp, #4
23efc     FD 00 68 AC |  if_e	wrlong	#0, result1
23f00                 | ' 
23f00                 | ' 
23f00                 | ' 
23f00                 | ' 
23f00                 | ' 		dp->obj.fs = 0;
23f00                 | ' #line 4633 "ff.c"
23f00                 | ' 	}
23f00                 | ' 	return res;
23f00     08 4E 05 F1 | 	add	fp, #8
23f04     A7 FA 01 FB | 	rdlong	result1, fp
23f08     08 4E 85 F1 | 	sub	fp, #8
23f0c     A7 F0 03 F6 | 	mov	ptra, fp
23f10     B2 00 A0 FD | 	call	#popregs_
23f14                 | _fatfs_cc_f_closedir_ret
23f14     2D 00 64 FD | 	ret
23f18                 | 
23f18                 | _fatfs_cc_f_readdir
23f18     00 4A 05 F6 | 	mov	COUNT_, #0
23f1c     A8 00 A0 FD | 	call	#pushregs_
23f20     14 F0 07 F1 | 	add	ptra, #20
23f24     04 4E 05 F1 | 	add	fp, #4
23f28     A7 12 62 FC | 	wrlong	arg01, fp
23f2c     04 4E 05 F1 | 	add	fp, #4
23f30     A7 14 62 FC | 	wrlong	arg02, fp
23f34     04 4E 85 F1 | 	sub	fp, #4
23f38     A7 12 02 FB | 	rdlong	arg01, fp
23f3c     0C 4E 05 F1 | 	add	fp, #12
23f40     A7 14 02 F6 | 	mov	arg02, fp
23f44     10 4E 85 F1 | 	sub	fp, #16
23f48     54 DD BF FD | 	call	#_fatfs_cc_validate
23f4c     0C 4E 05 F1 | 	add	fp, #12
23f50     A7 FA 61 FC | 	wrlong	result1, fp
23f54     0C 4E 85 F1 | 	sub	fp, #12
23f58     00 FA 0D F2 | 	cmp	result1, #0 wz
23f5c     BC 00 90 5D |  if_ne	jmp	#LR__3773
23f60     08 4E 05 F1 | 	add	fp, #8
23f64     A7 FA 09 FB | 	rdlong	result1, fp wz
23f68     08 4E 85 F1 | 	sub	fp, #8
23f6c     24 00 90 5D |  if_ne	jmp	#LR__3770
23f70     04 4E 05 F1 | 	add	fp, #4
23f74     A7 12 02 FB | 	rdlong	arg01, fp
23f78     04 4E 85 F1 | 	sub	fp, #4
23f7c     00 14 06 F6 | 	mov	arg02, #0
23f80     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
23f84     0C 4E 05 F1 | 	add	fp, #12
23f88     A7 FA 61 FC | 	wrlong	result1, fp
23f8c     0C 4E 85 F1 | 	sub	fp, #12
23f90     88 00 90 FD | 	jmp	#LR__3772
23f94                 | LR__3770
23f94     04 4E 05 F1 | 	add	fp, #4
23f98     A7 12 02 FB | 	rdlong	arg01, fp
23f9c     04 4E 85 F1 | 	sub	fp, #4
23fa0     00 14 06 F6 | 	mov	arg02, #0
23fa4     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
23fa8     0C 4E 05 F1 | 	add	fp, #12
23fac     A7 FA 61 FC | 	wrlong	result1, fp
23fb0     0C 4E 85 F1 | 	sub	fp, #12
23fb4     04 FA 0D F2 | 	cmp	result1, #4 wz
23fb8     0C 4E 05 A1 |  if_e	add	fp, #12
23fbc     A7 00 68 AC |  if_e	wrlong	#0, fp
23fc0     0C 4E 85 A1 |  if_e	sub	fp, #12
23fc4     0C 4E 05 F1 | 	add	fp, #12
23fc8     A7 FA 09 FB | 	rdlong	result1, fp wz
23fcc     0C 4E 85 F1 | 	sub	fp, #12
23fd0     48 00 90 5D |  if_ne	jmp	#LR__3771
23fd4     04 4E 05 F1 | 	add	fp, #4
23fd8     A7 12 02 FB | 	rdlong	arg01, fp
23fdc     04 4E 05 F1 | 	add	fp, #4
23fe0     A7 14 02 FB | 	rdlong	arg02, fp
23fe4     08 4E 85 F1 | 	sub	fp, #8
23fe8     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
23fec     04 4E 05 F1 | 	add	fp, #4
23ff0     A7 12 02 FB | 	rdlong	arg01, fp
23ff4     04 4E 85 F1 | 	sub	fp, #4
23ff8     00 14 06 F6 | 	mov	arg02, #0
23ffc     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
24000     0C 4E 05 F1 | 	add	fp, #12
24004     A7 FA 61 FC | 	wrlong	result1, fp
24008     0C 4E 85 F1 | 	sub	fp, #12
2400c     04 FA 0D F2 | 	cmp	result1, #4 wz
24010     0C 4E 05 A1 |  if_e	add	fp, #12
24014     A7 00 68 AC |  if_e	wrlong	#0, fp
24018     0C 4E 85 A1 |  if_e	sub	fp, #12
2401c                 | LR__3771
2401c                 | LR__3772
2401c                 | LR__3773
2401c                 | ' 			}
2401c                 | ' 			;
2401c                 | ' 		}
2401c                 | ' 	}
2401c                 | ' 	return res ;
2401c     0C 4E 05 F1 | 	add	fp, #12
24020     A7 FA 01 FB | 	rdlong	result1, fp
24024     0C 4E 85 F1 | 	sub	fp, #12
24028     A7 F0 03 F6 | 	mov	ptra, fp
2402c     B2 00 A0 FD | 	call	#popregs_
24030                 | _fatfs_cc_f_readdir_ret
24030     2D 00 64 FD | 	ret
24034                 | 
24034                 | _fatfs_cc_f_stat
24034     00 4A 05 F6 | 	mov	COUNT_, #0
24038     A8 00 A0 FD | 	call	#pushregs_
2403c     40 F0 07 F1 | 	add	ptra, #64
24040     04 4E 05 F1 | 	add	fp, #4
24044     A7 12 62 FC | 	wrlong	arg01, fp
24048     04 4E 05 F1 | 	add	fp, #4
2404c     A7 14 62 FC | 	wrlong	arg02, fp
24050     04 4E 85 F1 | 	sub	fp, #4
24054     A7 12 02 F6 | 	mov	arg01, fp
24058     0C 4E 05 F1 | 	add	fp, #12
2405c     A7 14 02 F6 | 	mov	arg02, fp
24060     10 4E 85 F1 | 	sub	fp, #16
24064     00 16 06 F6 | 	mov	arg03, #0
24068     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2406c     0C 4E 05 F1 | 	add	fp, #12
24070     A7 FA 61 FC | 	wrlong	result1, fp
24074     0C 4E 85 F1 | 	sub	fp, #12
24078     00 FA 0D F2 | 	cmp	result1, #0 wz
2407c     74 00 90 5D |  if_ne	jmp	#LR__3783
24080     10 4E 05 F1 | 	add	fp, #16
24084     A7 12 02 F6 | 	mov	arg01, fp
24088     0C 4E 85 F1 | 	sub	fp, #12
2408c     A7 14 02 FB | 	rdlong	arg02, fp
24090     04 4E 85 F1 | 	sub	fp, #4
24094     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
24098     0C 4E 05 F1 | 	add	fp, #12
2409c     A7 FA 61 FC | 	wrlong	result1, fp
240a0     0C 4E 85 F1 | 	sub	fp, #12
240a4     00 FA 0D F2 | 	cmp	result1, #0 wz
240a8     48 00 90 5D |  if_ne	jmp	#LR__3782
240ac     3B 4E 05 F1 | 	add	fp, #59
240b0     A7 FA C1 FA | 	rdbyte	result1, fp
240b4     3B 4E 85 F1 | 	sub	fp, #59
240b8     80 FA CD F7 | 	test	result1, #128 wz
240bc     0C 4E 05 51 |  if_ne	add	fp, #12
240c0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
240c4     0C 4E 85 51 |  if_ne	sub	fp, #12
240c8     28 00 90 5D |  if_ne	jmp	#LR__3781
240cc     08 4E 05 F1 | 	add	fp, #8
240d0     A7 FA 09 FB | 	rdlong	result1, fp wz
240d4     08 4E 85 F1 | 	sub	fp, #8
240d8     18 00 90 AD |  if_e	jmp	#LR__3780
240dc     10 4E 05 F1 | 	add	fp, #16
240e0     A7 12 02 F6 | 	mov	arg01, fp
240e4     08 4E 85 F1 | 	sub	fp, #8
240e8     A7 14 02 FB | 	rdlong	arg02, fp
240ec     08 4E 85 F1 | 	sub	fp, #8
240f0     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
240f4                 | LR__3780
240f4                 | LR__3781
240f4                 | LR__3782
240f4                 | LR__3783
240f4                 | ' 			}
240f4                 | ' 		}
240f4                 | ' 		;
240f4                 | ' 	}
240f4                 | ' 
240f4                 | ' 	return res ;
240f4     0C 4E 05 F1 | 	add	fp, #12
240f8     A7 FA 01 FB | 	rdlong	result1, fp
240fc     0C 4E 85 F1 | 	sub	fp, #12
24100     A7 F0 03 F6 | 	mov	ptra, fp
24104     B2 00 A0 FD | 	call	#popregs_
24108                 | _fatfs_cc_f_stat_ret
24108     2D 00 64 FD | 	ret
2410c                 | 
2410c                 | _fatfs_cc_f_unlink
2410c     00 4A 05 F6 | 	mov	COUNT_, #0
24110     A8 00 A0 FD | 	call	#pushregs_
24114     74 F0 07 F1 | 	add	ptra, #116
24118     04 4E 05 F1 | 	add	fp, #4
2411c     A7 12 62 FC | 	wrlong	arg01, fp
24120     68 4E 05 F1 | 	add	fp, #104
24124     A7 00 68 FC | 	wrlong	#0, fp
24128     68 4E 85 F1 | 	sub	fp, #104
2412c     A7 12 02 F6 | 	mov	arg01, fp
24130     6C 4E 05 F1 | 	add	fp, #108
24134     A7 14 02 F6 | 	mov	arg02, fp
24138     70 4E 85 F1 | 	sub	fp, #112
2413c     02 16 06 F6 | 	mov	arg03, #2
24140     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
24144     08 4E 05 F1 | 	add	fp, #8
24148     A7 FA 61 FC | 	wrlong	result1, fp
2414c     08 4E 85 F1 | 	sub	fp, #8
24150     00 FA 0D F2 | 	cmp	result1, #0 wz
24154     E4 01 90 5D |  if_ne	jmp	#LR__3798
24158     70 4E 05 F1 | 	add	fp, #112
2415c     A7 16 02 FB | 	rdlong	arg03, fp
24160     64 4E 85 F1 | 	sub	fp, #100
24164     A7 16 62 FC | 	wrlong	arg03, fp
24168     A7 12 02 F6 | 	mov	arg01, fp
2416c     08 4E 85 F1 | 	sub	fp, #8
24170     A7 14 02 FB | 	rdlong	arg02, fp
24174     04 4E 85 F1 | 	sub	fp, #4
24178     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2417c     08 4E 05 F1 | 	add	fp, #8
24180     A7 FA 61 FC | 	wrlong	result1, fp
24184     00 FA 4D F2 | 	cmps	result1, #0 wz
24188     08 4E 85 F1 | 	sub	fp, #8
2418c     AC 01 90 5D |  if_ne	jmp	#LR__3797
24190     37 4E 05 F1 | 	add	fp, #55
24194     A7 FA C1 FA | 	rdbyte	result1, fp
24198     37 4E 85 F1 | 	sub	fp, #55
2419c     80 FA CD F7 | 	test	result1, #128 wz
241a0     08 4E 05 51 |  if_ne	add	fp, #8
241a4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
241a8     08 4E 85 51 |  if_ne	sub	fp, #8
241ac     1C 00 90 5D |  if_ne	jmp	#LR__3790
241b0     12 4E 05 F1 | 	add	fp, #18
241b4     A7 FA C1 FA | 	rdbyte	result1, fp
241b8     12 4E 85 F1 | 	sub	fp, #18
241bc     01 FA CD F7 | 	test	result1, #1 wz
241c0     08 4E 05 51 |  if_ne	add	fp, #8
241c4     A7 0E 68 5C |  if_ne	wrlong	#7, fp
241c8     08 4E 85 51 |  if_ne	sub	fp, #8
241cc                 | LR__3790
241cc     08 4E 05 F1 | 	add	fp, #8
241d0     A7 FA 09 FB | 	rdlong	result1, fp wz
241d4     08 4E 85 F1 | 	sub	fp, #8
241d8     C8 00 90 5D |  if_ne	jmp	#LR__3793
241dc     70 4E 05 F1 | 	add	fp, #112
241e0     A7 12 02 FB | 	rdlong	arg01, fp
241e4     48 4E 85 F1 | 	sub	fp, #72
241e8     A7 14 02 FB | 	rdlong	arg02, fp
241ec     28 4E 85 F1 | 	sub	fp, #40
241f0     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
241f4     6C 4E 05 F1 | 	add	fp, #108
241f8     A7 FA 61 FC | 	wrlong	result1, fp
241fc     5A 4E 85 F1 | 	sub	fp, #90
24200     A7 FA C1 FA | 	rdbyte	result1, fp
24204     12 4E 85 F1 | 	sub	fp, #18
24208     10 FA CD F7 | 	test	result1, #16 wz
2420c     94 00 90 AD |  if_e	jmp	#LR__3792
24210     70 4E 05 F1 | 	add	fp, #112
24214     A7 FA 01 FB | 	rdlong	result1, fp
24218     34 4E 85 F1 | 	sub	fp, #52
2421c     A7 FA 61 FC | 	wrlong	result1, fp
24220     30 4E 05 F1 | 	add	fp, #48
24224     A7 16 02 FB | 	rdlong	arg03, fp
24228     28 4E 85 F1 | 	sub	fp, #40
2422c     A7 16 62 FC | 	wrlong	arg03, fp
24230     08 4E 85 F1 | 	sub	fp, #8
24234     A7 12 02 F6 | 	mov	arg01, fp
24238     3C 4E 85 F1 | 	sub	fp, #60
2423c     00 14 06 F6 | 	mov	arg02, #0
24240     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
24244     08 4E 05 F1 | 	add	fp, #8
24248     A7 FA 61 FC | 	wrlong	result1, fp
2424c     08 4E 85 F1 | 	sub	fp, #8
24250     00 FA 0D F2 | 	cmp	result1, #0 wz
24254     4C 00 90 5D |  if_ne	jmp	#LR__3791
24258     3C 4E 05 F1 | 	add	fp, #60
2425c     A7 12 02 F6 | 	mov	arg01, fp
24260     3C 4E 85 F1 | 	sub	fp, #60
24264     00 14 06 F6 | 	mov	arg02, #0
24268     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2426c     08 4E 05 F1 | 	add	fp, #8
24270     A7 FA 61 FC | 	wrlong	result1, fp
24274     00 FA 4D F2 | 	cmps	result1, #0 wz
24278     08 4E 85 F1 | 	sub	fp, #8
2427c     08 4E 05 A1 |  if_e	add	fp, #8
24280     A7 0E 68 AC |  if_e	wrlong	#7, fp
24284     08 4E 85 A1 |  if_e	sub	fp, #8
24288     08 4E 05 F1 | 	add	fp, #8
2428c     A7 FA 01 FB | 	rdlong	result1, fp
24290     08 4E 85 F1 | 	sub	fp, #8
24294     04 FA 0D F2 | 	cmp	result1, #4 wz
24298     08 4E 05 A1 |  if_e	add	fp, #8
2429c     A7 00 68 AC |  if_e	wrlong	#0, fp
242a0     08 4E 85 A1 |  if_e	sub	fp, #8
242a4                 | LR__3791
242a4                 | LR__3792
242a4                 | LR__3793
242a4     08 4E 05 F1 | 	add	fp, #8
242a8     A7 FA 09 FB | 	rdlong	result1, fp wz
242ac     08 4E 85 F1 | 	sub	fp, #8
242b0     88 00 90 5D |  if_ne	jmp	#LR__3796
242b4     0C 4E 05 F1 | 	add	fp, #12
242b8     A7 12 02 F6 | 	mov	arg01, fp
242bc     0C 4E 85 F1 | 	sub	fp, #12
242c0     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
242c4     08 4E 05 F1 | 	add	fp, #8
242c8     A7 FA 61 FC | 	wrlong	result1, fp
242cc     08 4E 85 F1 | 	sub	fp, #8
242d0     00 FA 0D F2 | 	cmp	result1, #0 wz
242d4     38 00 90 5D |  if_ne	jmp	#LR__3794
242d8     6C 4E 05 F1 | 	add	fp, #108
242dc     A7 FA 09 FB | 	rdlong	result1, fp wz
242e0     6C 4E 85 F1 | 	sub	fp, #108
242e4     28 00 90 AD |  if_e	jmp	#LR__3794
242e8     0C 4E 05 F1 | 	add	fp, #12
242ec     A7 12 02 F6 | 	mov	arg01, fp
242f0     60 4E 05 F1 | 	add	fp, #96
242f4     A7 14 02 FB | 	rdlong	arg02, fp
242f8     6C 4E 85 F1 | 	sub	fp, #108
242fc     00 16 06 F6 | 	mov	arg03, #0
24300     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
24304     08 4E 05 F1 | 	add	fp, #8
24308     A7 FA 61 FC | 	wrlong	result1, fp
2430c     08 4E 85 F1 | 	sub	fp, #8
24310                 | LR__3794
24310     08 4E 05 F1 | 	add	fp, #8
24314     A7 FA 09 FB | 	rdlong	result1, fp wz
24318     08 4E 85 F1 | 	sub	fp, #8
2431c     1C 00 90 5D |  if_ne	jmp	#LR__3795
24320     70 4E 05 F1 | 	add	fp, #112
24324     A7 12 02 FB | 	rdlong	arg01, fp
24328     70 4E 85 F1 | 	sub	fp, #112
2432c     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
24330     08 4E 05 F1 | 	add	fp, #8
24334     A7 FA 61 FC | 	wrlong	result1, fp
24338     08 4E 85 F1 | 	sub	fp, #8
2433c                 | LR__3795
2433c                 | LR__3796
2433c                 | LR__3797
2433c                 | LR__3798
2433c                 | ' 			}
2433c                 | ' 		}
2433c                 | ' 		;
2433c                 | ' 	}
2433c                 | ' 
2433c                 | ' 	return res ;
2433c     08 4E 05 F1 | 	add	fp, #8
24340     A7 FA 01 FB | 	rdlong	result1, fp
24344     08 4E 85 F1 | 	sub	fp, #8
24348     A7 F0 03 F6 | 	mov	ptra, fp
2434c     B2 00 A0 FD | 	call	#popregs_
24350                 | _fatfs_cc_f_unlink_ret
24350     2D 00 64 FD | 	ret
24354                 | 
24354                 | _fatfs_cc_f_mkdir
24354     00 4A 05 F6 | 	mov	COUNT_, #0
24358     A8 00 A0 FD | 	call	#pushregs_
2435c     5C F0 07 F1 | 	add	ptra, #92
24360     04 4E 05 F1 | 	add	fp, #4
24364     A7 12 62 FC | 	wrlong	arg01, fp
24368     A7 12 02 F6 | 	mov	arg01, fp
2436c     48 4E 05 F1 | 	add	fp, #72
24370     A7 14 02 F6 | 	mov	arg02, fp
24374     4C 4E 85 F1 | 	sub	fp, #76
24378     02 16 06 F6 | 	mov	arg03, #2
2437c     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
24380     08 4E 05 F1 | 	add	fp, #8
24384     A7 FA 61 FC | 	wrlong	result1, fp
24388     08 4E 85 F1 | 	sub	fp, #8
2438c     00 FA 0D F2 | 	cmp	result1, #0 wz
24390     C4 02 90 5D |  if_ne	jmp	#LR__3805
24394     4C 4E 05 F1 | 	add	fp, #76
24398     A7 16 02 FB | 	rdlong	arg03, fp
2439c     40 4E 85 F1 | 	sub	fp, #64
243a0     A7 16 62 FC | 	wrlong	arg03, fp
243a4     A7 12 02 F6 | 	mov	arg01, fp
243a8     08 4E 85 F1 | 	sub	fp, #8
243ac     A7 14 02 FB | 	rdlong	arg02, fp
243b0     04 4E 85 F1 | 	sub	fp, #4
243b4     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
243b8     08 4E 05 F1 | 	add	fp, #8
243bc     A7 FA 61 FC | 	wrlong	result1, fp
243c0     00 FA 4D F2 | 	cmps	result1, #0 wz
243c4     08 4E 85 F1 | 	sub	fp, #8
243c8     08 4E 05 A1 |  if_e	add	fp, #8
243cc     A7 10 68 AC |  if_e	wrlong	#8, fp
243d0     08 4E 85 A1 |  if_e	sub	fp, #8
243d4     08 4E 05 F1 | 	add	fp, #8
243d8     A7 FA 01 FB | 	rdlong	result1, fp
243dc     08 4E 85 F1 | 	sub	fp, #8
243e0     04 FA 0D F2 | 	cmp	result1, #4 wz
243e4     70 02 90 5D |  if_ne	jmp	#LR__3804
243e8     4C 4E 05 F1 | 	add	fp, #76
243ec     A7 16 02 FB | 	rdlong	arg03, fp
243f0     10 4E 85 F1 | 	sub	fp, #16
243f4     A7 16 62 FC | 	wrlong	arg03, fp
243f8     A7 12 02 F6 | 	mov	arg01, fp
243fc     3C 4E 85 F1 | 	sub	fp, #60
24400     00 14 06 F6 | 	mov	arg02, #0
24404     04 AC BF FD | 	call	#_fatfs_cc_create_chain
24408     50 4E 05 F1 | 	add	fp, #80
2440c     A7 FA 61 FC | 	wrlong	result1, fp
24410     48 4E 85 F1 | 	sub	fp, #72
24414     A7 00 68 FC | 	wrlong	#0, fp
24418     48 4E 05 F1 | 	add	fp, #72
2441c     A7 FA 09 FB | 	rdlong	result1, fp wz
24420     50 4E 85 F1 | 	sub	fp, #80
24424     08 4E 05 A1 |  if_e	add	fp, #8
24428     A7 0E 68 AC |  if_e	wrlong	#7, fp
2442c     08 4E 85 A1 |  if_e	sub	fp, #8
24430     50 4E 05 F1 | 	add	fp, #80
24434     A7 FA 01 FB | 	rdlong	result1, fp
24438     50 4E 85 F1 | 	sub	fp, #80
2443c     01 FA 0D F2 | 	cmp	result1, #1 wz
24440     08 4E 05 A1 |  if_e	add	fp, #8
24444     A7 04 68 AC |  if_e	wrlong	#2, fp
24448     08 4E 85 A1 |  if_e	sub	fp, #8
2444c     50 4E 05 F1 | 	add	fp, #80
24450     A7 16 02 FB | 	rdlong	arg03, fp
24454     50 4E 85 F1 | 	sub	fp, #80
24458     FF FF 7F FF 
2445c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
24460     08 4E 05 A1 |  if_e	add	fp, #8
24464     A7 02 68 AC |  if_e	wrlong	#1, fp
24468     08 4E 85 A1 |  if_e	sub	fp, #8
2446c     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
24470     58 4E 05 F1 | 	add	fp, #88
24474     A7 FA 61 FC | 	wrlong	result1, fp
24478     50 4E 85 F1 | 	sub	fp, #80
2447c     A7 FA 09 FB | 	rdlong	result1, fp wz
24480     08 4E 85 F1 | 	sub	fp, #8
24484     1C 01 90 5D |  if_ne	jmp	#LR__3801
24488     4C 4E 05 F1 | 	add	fp, #76
2448c     A7 12 02 FB | 	rdlong	arg01, fp
24490     04 4E 05 F1 | 	add	fp, #4
24494     A7 14 02 FB | 	rdlong	arg02, fp
24498     50 4E 85 F1 | 	sub	fp, #80
2449c     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
244a0     08 4E 05 F1 | 	add	fp, #8
244a4     A7 FA 61 FC | 	wrlong	result1, fp
244a8     00 FA 4D F2 | 	cmps	result1, #0 wz
244ac     08 4E 85 F1 | 	sub	fp, #8
244b0     F0 00 90 5D |  if_ne	jmp	#LR__3800
244b4     4C 4E 05 F1 | 	add	fp, #76
244b8     A7 12 02 FB | 	rdlong	arg01, fp
244bc     4C 4E 85 F1 | 	sub	fp, #76
244c0     34 12 06 F1 | 	add	arg01, #52
244c4     20 14 06 F6 | 	mov	arg02, #32
244c8     0B 16 06 F6 | 	mov	arg03, #11
244cc     98 00 A0 FD | 	call	#\builtin_bytefill_
244d0     4C 4E 05 F1 | 	add	fp, #76
244d4     A7 FA 01 FB | 	rdlong	result1, fp
244d8     34 FA 05 F1 | 	add	result1, #52
244dc     FD 5C 48 FC | 	wrbyte	#46, result1
244e0     A7 16 02 FB | 	rdlong	arg03, fp
244e4     3F 16 06 F1 | 	add	arg03, #63
244e8     0B 21 48 FC | 	wrbyte	#16, arg03
244ec     A7 12 02 FB | 	rdlong	arg01, fp
244f0     4A 12 06 F1 | 	add	arg01, #74
244f4     0C 4E 05 F1 | 	add	fp, #12
244f8     A7 14 02 FB | 	rdlong	arg02, fp
244fc     09 15 62 FC | 	wrlong	arg02, arg01
24500     0C 4E 85 F1 | 	sub	fp, #12
24504     A7 14 02 FB | 	rdlong	arg02, fp
24508     0A 13 02 F6 | 	mov	arg01, arg02
2450c     34 14 06 F1 | 	add	arg02, #52
24510     04 4E 05 F1 | 	add	fp, #4
24514     A7 16 02 FB | 	rdlong	arg03, fp
24518     50 4E 85 F1 | 	sub	fp, #80
2451c     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
24520     4C 4E 05 F1 | 	add	fp, #76
24524     A7 14 02 FB | 	rdlong	arg02, fp
24528     0A 13 02 F6 | 	mov	arg01, arg02
2452c     54 12 06 F1 | 	add	arg01, #84
24530     4C 4E 85 F1 | 	sub	fp, #76
24534     34 14 06 F1 | 	add	arg02, #52
24538     20 16 06 F6 | 	mov	arg03, #32
2453c     38 32 BF FD | 	call	#__system____builtin_memmove
24540     4C 4E 05 F1 | 	add	fp, #76
24544     A7 16 02 FB | 	rdlong	arg03, fp
24548     55 16 06 F1 | 	add	arg03, #85
2454c     0B 5D 48 FC | 	wrbyte	#46, arg03
24550     38 4E 85 F1 | 	sub	fp, #56
24554     A7 16 02 FB | 	rdlong	arg03, fp
24558     40 4E 05 F1 | 	add	fp, #64
2455c     A7 16 62 FC | 	wrlong	arg03, fp
24560     08 4E 85 F1 | 	sub	fp, #8
24564     A7 14 02 FB | 	rdlong	arg02, fp
24568     0A 13 02 F6 | 	mov	arg01, arg02
2456c     54 14 06 F1 | 	add	arg02, #84
24570     4C 4E 85 F1 | 	sub	fp, #76
24574     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
24578     4C 4E 05 F1 | 	add	fp, #76
2457c     A7 16 02 FB | 	rdlong	arg03, fp
24580     03 16 06 F1 | 	add	arg03, #3
24584     0B 03 48 FC | 	wrbyte	#1, arg03
24588     40 4E 85 F1 | 	sub	fp, #64
2458c     A7 12 02 F6 | 	mov	arg01, fp
24590     0C 4E 85 F1 | 	sub	fp, #12
24594     44 BA BF FD | 	call	#_fatfs_cc_dir_register
24598     08 4E 05 F1 | 	add	fp, #8
2459c     A7 FA 61 FC | 	wrlong	result1, fp
245a0     08 4E 85 F1 | 	sub	fp, #8
245a4                 | LR__3800
245a4                 | LR__3801
245a4     08 4E 05 F1 | 	add	fp, #8
245a8     A7 FA 09 FB | 	rdlong	result1, fp wz
245ac     08 4E 85 F1 | 	sub	fp, #8
245b0     88 00 90 5D |  if_ne	jmp	#LR__3802
245b4     28 4E 05 F1 | 	add	fp, #40
245b8     A7 12 02 FB | 	rdlong	arg01, fp
245bc     16 12 06 F1 | 	add	arg01, #22
245c0     30 4E 05 F1 | 	add	fp, #48
245c4     A7 14 02 FB | 	rdlong	arg02, fp
245c8     09 15 62 FC | 	wrlong	arg02, arg01
245cc     0C 4E 85 F1 | 	sub	fp, #12
245d0     A7 12 02 FB | 	rdlong	arg01, fp
245d4     24 4E 85 F1 | 	sub	fp, #36
245d8     A7 14 02 FB | 	rdlong	arg02, fp
245dc     28 4E 05 F1 | 	add	fp, #40
245e0     A7 16 02 FB | 	rdlong	arg03, fp
245e4     50 4E 85 F1 | 	sub	fp, #80
245e8     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
245ec     28 4E 05 F1 | 	add	fp, #40
245f0     A7 FA 01 FB | 	rdlong	result1, fp
245f4     0B FA 05 F1 | 	add	result1, #11
245f8     FD 20 48 FC | 	wrbyte	#16, result1
245fc     24 4E 05 F1 | 	add	fp, #36
24600     A7 FA 01 FB | 	rdlong	result1, fp
24604     03 FA 05 F1 | 	add	result1, #3
24608     FD 02 48 FC | 	wrbyte	#1, result1
2460c     44 4E 85 F1 | 	sub	fp, #68
24610     A7 FA 09 FB | 	rdlong	result1, fp wz
24614     08 4E 85 F1 | 	sub	fp, #8
24618     3C 00 90 5D |  if_ne	jmp	#LR__3803
2461c     4C 4E 05 F1 | 	add	fp, #76
24620     A7 12 02 FB | 	rdlong	arg01, fp
24624     4C 4E 85 F1 | 	sub	fp, #76
24628     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2462c     08 4E 05 F1 | 	add	fp, #8
24630     A7 FA 61 FC | 	wrlong	result1, fp
24634     08 4E 85 F1 | 	sub	fp, #8
24638     1C 00 90 FD | 	jmp	#LR__3803
2463c                 | LR__3802
2463c     3C 4E 05 F1 | 	add	fp, #60
24640     A7 12 02 F6 | 	mov	arg01, fp
24644     14 4E 05 F1 | 	add	fp, #20
24648     A7 14 02 FB | 	rdlong	arg02, fp
2464c     50 4E 85 F1 | 	sub	fp, #80
24650     00 16 06 F6 | 	mov	arg03, #0
24654     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
24658                 | LR__3803
24658                 | LR__3804
24658                 | LR__3805
24658                 | ' 				remove_chain(&sobj, dcl, 0);
24658                 | ' 			}
24658                 | ' 		}
24658                 | ' 		;
24658                 | ' 	}
24658                 | ' 
24658                 | ' 	return res ;
24658     08 4E 05 F1 | 	add	fp, #8
2465c     A7 FA 01 FB | 	rdlong	result1, fp
24660     08 4E 85 F1 | 	sub	fp, #8
24664     A7 F0 03 F6 | 	mov	ptra, fp
24668     B2 00 A0 FD | 	call	#popregs_
2466c                 | _fatfs_cc_f_mkdir_ret
2466c     2D 00 64 FD | 	ret
24670                 | 
24670                 | _fatfs_cc_f_rename
24670     01 4A 05 F6 | 	mov	COUNT_, #1
24674     A8 00 A0 FD | 	call	#pushregs_
24678     9C F0 07 F1 | 	add	ptra, #156
2467c     04 4E 05 F1 | 	add	fp, #4
24680     A7 12 62 FC | 	wrlong	arg01, fp
24684     04 4E 05 F1 | 	add	fp, #4
24688     A7 14 62 FC | 	wrlong	arg02, fp
2468c     A7 12 02 F6 | 	mov	arg01, fp
24690     08 4E 85 F1 | 	sub	fp, #8
24694     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
24698     04 4E 05 F1 | 	add	fp, #4
2469c     A7 12 02 F6 | 	mov	arg01, fp
246a0     6C 4E 05 F1 | 	add	fp, #108
246a4     A7 14 02 F6 | 	mov	arg02, fp
246a8     70 4E 85 F1 | 	sub	fp, #112
246ac     02 16 06 F6 | 	mov	arg03, #2
246b0     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
246b4     0C 4E 05 F1 | 	add	fp, #12
246b8     A7 FA 61 FC | 	wrlong	result1, fp
246bc     0C 4E 85 F1 | 	sub	fp, #12
246c0     00 FA 0D F2 | 	cmp	result1, #0 wz
246c4     44 03 90 5D |  if_ne	jmp	#LR__3823
246c8     70 4E 05 F1 | 	add	fp, #112
246cc     A7 16 02 FB | 	rdlong	arg03, fp
246d0     60 4E 85 F1 | 	sub	fp, #96
246d4     A7 16 62 FC | 	wrlong	arg03, fp
246d8     A7 12 02 F6 | 	mov	arg01, fp
246dc     0C 4E 85 F1 | 	sub	fp, #12
246e0     A7 14 02 FB | 	rdlong	arg02, fp
246e4     04 4E 85 F1 | 	sub	fp, #4
246e8     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
246ec     0C 4E 05 F1 | 	add	fp, #12
246f0     A7 FA 61 FC | 	wrlong	result1, fp
246f4     00 FA 4D F2 | 	cmps	result1, #0 wz
246f8     0C 4E 85 F1 | 	sub	fp, #12
246fc     1C 00 90 5D |  if_ne	jmp	#LR__3810
24700     3B 4E 05 F1 | 	add	fp, #59
24704     A7 FA C1 FA | 	rdbyte	result1, fp
24708     3B 4E 85 F1 | 	sub	fp, #59
2470c     A0 FA CD F7 | 	test	result1, #160 wz
24710     0C 4E 05 51 |  if_ne	add	fp, #12
24714     A7 0C 68 5C |  if_ne	wrlong	#6, fp
24718     0C 4E 85 51 |  if_ne	sub	fp, #12
2471c                 | LR__3810
2471c     0C 4E 05 F1 | 	add	fp, #12
24720     A7 1E 0A FB | 	rdlong	local01, fp wz
24724     0C 4E 85 F1 | 	sub	fp, #12
24728     E0 02 90 5D |  if_ne	jmp	#LR__3822
2472c     74 4E 05 F1 | 	add	fp, #116
24730     A7 12 02 F6 | 	mov	arg01, fp
24734     48 4E 85 F1 | 	sub	fp, #72
24738     A7 14 02 FB | 	rdlong	arg02, fp
2473c     2C 4E 85 F1 | 	sub	fp, #44
24740     20 16 06 F6 | 	mov	arg03, #32
24744     30 30 BF FD | 	call	#__system____builtin_memmove
24748     40 4E 05 F1 | 	add	fp, #64
2474c     A7 12 02 F6 | 	mov	arg01, fp
24750     30 4E 85 F1 | 	sub	fp, #48
24754     A7 14 02 F6 | 	mov	arg02, fp
24758     10 4E 85 F1 | 	sub	fp, #16
2475c     30 16 06 F6 | 	mov	arg03, #48
24760     14 30 BF FD | 	call	#__system____builtin_memmove
24764     40 4E 05 F1 | 	add	fp, #64
24768     A7 12 02 F6 | 	mov	arg01, fp
2476c     38 4E 85 F1 | 	sub	fp, #56
24770     A7 14 02 FB | 	rdlong	arg02, fp
24774     08 4E 85 F1 | 	sub	fp, #8
24778     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2477c     0C 4E 05 F1 | 	add	fp, #12
24780     A7 FA 61 FC | 	wrlong	result1, fp
24784     0C 4E 85 F1 | 	sub	fp, #12
24788     00 FA 0D F2 | 	cmp	result1, #0 wz
2478c     4C 00 90 5D |  if_ne	jmp	#LR__3813
24790     48 4E 05 F1 | 	add	fp, #72
24794     A7 FA 01 FB | 	rdlong	result1, fp
24798     30 4E 85 F1 | 	sub	fp, #48
2479c     A7 16 02 FB | 	rdlong	arg03, fp
247a0     18 4E 85 F1 | 	sub	fp, #24
247a4     0B FB 09 F2 | 	cmp	result1, arg03 wz
247a8     20 00 90 5D |  if_ne	jmp	#LR__3811
247ac     50 4E 05 F1 | 	add	fp, #80
247b0     A7 FA 01 FB | 	rdlong	result1, fp
247b4     30 4E 85 F1 | 	sub	fp, #48
247b8     A7 16 02 FB | 	rdlong	arg03, fp
247bc     20 4E 85 F1 | 	sub	fp, #32
247c0     0B FB 09 F2 | 	cmp	result1, arg03 wz
247c4     04 1E 06 A6 |  if_e	mov	local01, #4
247c8     04 00 90 AD |  if_e	jmp	#LR__3812
247cc                 | LR__3811
247cc     08 1E 06 F6 | 	mov	local01, #8
247d0                 | LR__3812
247d0     0C 4E 05 F1 | 	add	fp, #12
247d4     A7 1E 62 FC | 	wrlong	local01, fp
247d8     0C 4E 85 F1 | 	sub	fp, #12
247dc                 | LR__3813
247dc     0C 4E 05 F1 | 	add	fp, #12
247e0     A7 1E 02 FB | 	rdlong	local01, fp
247e4     0C 4E 85 F1 | 	sub	fp, #12
247e8     04 1E 0E F2 | 	cmp	local01, #4 wz
247ec     CC 01 90 5D |  if_ne	jmp	#LR__3819
247f0     40 4E 05 F1 | 	add	fp, #64
247f4     A7 12 02 F6 | 	mov	arg01, fp
247f8     40 4E 85 F1 | 	sub	fp, #64
247fc     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
24800     0C 4E 05 F1 | 	add	fp, #12
24804     A7 FA 61 FC | 	wrlong	result1, fp
24808     0C 4E 85 F1 | 	sub	fp, #12
2480c     00 FA 0D F2 | 	cmp	result1, #0 wz
24810     A8 01 90 5D |  if_ne	jmp	#LR__3818
24814     5C 4E 05 F1 | 	add	fp, #92
24818     A7 12 02 FB | 	rdlong	arg01, fp
2481c     38 4E 05 F1 | 	add	fp, #56
24820     A7 12 62 FC | 	wrlong	arg01, fp
24824     0D 12 06 F1 | 	add	arg01, #13
24828     20 4E 85 F1 | 	sub	fp, #32
2482c     A7 14 02 F6 | 	mov	arg02, fp
24830     74 4E 85 F1 | 	sub	fp, #116
24834     0D 14 06 F1 | 	add	arg02, #13
24838     13 16 06 F6 | 	mov	arg03, #19
2483c     38 2F BF FD | 	call	#__system____builtin_memmove
24840     94 4E 05 F1 | 	add	fp, #148
24844     A7 1E 02 FB | 	rdlong	local01, fp
24848     15 4E 85 F1 | 	sub	fp, #21
2484c     A7 FA C1 FA | 	rdbyte	result1, fp
24850     0B 1E 06 F1 | 	add	local01, #11
24854     0F FB 41 FC | 	wrbyte	result1, local01
24858     15 4E 05 F1 | 	add	fp, #21
2485c     A7 1E 02 FB | 	rdlong	local01, fp
24860     94 4E 85 F1 | 	sub	fp, #148
24864     0B 1E 06 F1 | 	add	local01, #11
24868     0F 1F C2 FA | 	rdbyte	local01, local01
2486c     10 1E CE F7 | 	test	local01, #16 wz
24870     24 00 90 5D |  if_ne	jmp	#LR__3814
24874     94 4E 05 F1 | 	add	fp, #148
24878     A7 FA 01 FB | 	rdlong	result1, fp
2487c     FD 1E 02 F6 | 	mov	local01, result1
24880     94 4E 85 F1 | 	sub	fp, #148
24884     0B FA 05 F1 | 	add	result1, #11
24888     FD FA C1 FA | 	rdbyte	result1, result1
2488c     20 FA 45 F5 | 	or	result1, #32
24890     0B 1E 06 F1 | 	add	local01, #11
24894     0F FB 41 FC | 	wrbyte	result1, local01
24898                 | LR__3814
24898     70 4E 05 F1 | 	add	fp, #112
2489c     A7 1E 02 FB | 	rdlong	local01, fp
248a0     03 1E 06 F1 | 	add	local01, #3
248a4     0F 03 48 FC | 	wrbyte	#1, local01
248a8     24 4E 05 F1 | 	add	fp, #36
248ac     A7 1E 02 FB | 	rdlong	local01, fp
248b0     94 4E 85 F1 | 	sub	fp, #148
248b4     0B 1E 06 F1 | 	add	local01, #11
248b8     0F 1F C2 FA | 	rdbyte	local01, local01
248bc     10 1E CE F7 | 	test	local01, #16 wz
248c0     F8 00 90 AD |  if_e	jmp	#LR__3817
248c4     18 4E 05 F1 | 	add	fp, #24
248c8     A7 16 02 FB | 	rdlong	arg03, fp
248cc     30 4E 05 F1 | 	add	fp, #48
248d0     A7 1E 02 FB | 	rdlong	local01, fp
248d4     48 4E 85 F1 | 	sub	fp, #72
248d8     0F 17 0A F2 | 	cmp	arg03, local01 wz
248dc     DC 00 90 AD |  if_e	jmp	#LR__3817
248e0     70 4E 05 F1 | 	add	fp, #112
248e4     A7 12 02 FB | 	rdlong	arg01, fp
248e8     09 1F 02 F6 | 	mov	local01, arg01
248ec     24 4E 05 F1 | 	add	fp, #36
248f0     A7 14 02 FB | 	rdlong	arg02, fp
248f4     94 4E 85 F1 | 	sub	fp, #148
248f8     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
248fc     FD 14 02 F6 | 	mov	arg02, result1
24900     0F 13 02 F6 | 	mov	arg01, local01
24904     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
24908     98 4E 05 F1 | 	add	fp, #152
2490c     A7 FA 61 FC | 	wrlong	result1, fp
24910     00 FA 4D F2 | 	cmps	result1, #0 wz
24914     98 4E 85 F1 | 	sub	fp, #152
24918     0C 4E 05 A1 |  if_e	add	fp, #12
2491c     A7 04 68 AC |  if_e	wrlong	#2, fp
24920     0C 4E 85 A1 |  if_e	sub	fp, #12
24924     94 00 90 AD |  if_e	jmp	#LR__3816
24928     70 4E 05 F1 | 	add	fp, #112
2492c     A7 12 02 FB | 	rdlong	arg01, fp
24930     28 4E 05 F1 | 	add	fp, #40
24934     A7 14 02 FB | 	rdlong	arg02, fp
24938     98 4E 85 F1 | 	sub	fp, #152
2493c     4C A0 BF FD | 	call	#_fatfs_cc_move_window
24940     0C 4E 05 F1 | 	add	fp, #12
24944     A7 FA 61 FC | 	wrlong	result1, fp
24948     64 4E 05 F1 | 	add	fp, #100
2494c     A7 1E 02 FB | 	rdlong	local01, fp
24950     54 1E 06 F1 | 	add	local01, #84
24954     24 4E 05 F1 | 	add	fp, #36
24958     A7 1E 62 FC | 	wrlong	local01, fp
2495c     88 4E 85 F1 | 	sub	fp, #136
24960     A7 1E 0A FB | 	rdlong	local01, fp wz
24964     0C 4E 85 F1 | 	sub	fp, #12
24968     50 00 90 5D |  if_ne	jmp	#LR__3815
2496c     94 4E 05 F1 | 	add	fp, #148
24970     A7 1E 02 FB | 	rdlong	local01, fp
24974     94 4E 85 F1 | 	sub	fp, #148
24978     01 1E 06 F1 | 	add	local01, #1
2497c     0F 1F C2 FA | 	rdbyte	local01, local01
24980     2E 1E 0E F2 | 	cmp	local01, #46 wz
24984     34 00 90 5D |  if_ne	jmp	#LR__3815
24988     70 4E 05 F1 | 	add	fp, #112
2498c     A7 12 02 FB | 	rdlong	arg01, fp
24990     24 4E 05 F1 | 	add	fp, #36
24994     A7 14 02 FB | 	rdlong	arg02, fp
24998     4C 4E 85 F1 | 	sub	fp, #76
2499c     A7 16 02 FB | 	rdlong	arg03, fp
249a0     48 4E 85 F1 | 	sub	fp, #72
249a4     50 AD BF FD | 	call	#_fatfs_cc_st_clust
249a8     70 4E 05 F1 | 	add	fp, #112
249ac     A7 1E 02 FB | 	rdlong	local01, fp
249b0     70 4E 85 F1 | 	sub	fp, #112
249b4     03 1E 06 F1 | 	add	local01, #3
249b8     0F 03 48 FC | 	wrbyte	#1, local01
249bc                 | LR__3815
249bc                 | LR__3816
249bc                 | LR__3817
249bc                 | LR__3818
249bc                 | LR__3819
249bc     0C 4E 05 F1 | 	add	fp, #12
249c0     A7 1E 0A FB | 	rdlong	local01, fp wz
249c4     0C 4E 85 F1 | 	sub	fp, #12
249c8     40 00 90 5D |  if_ne	jmp	#LR__3821
249cc     10 4E 05 F1 | 	add	fp, #16
249d0     A7 12 02 F6 | 	mov	arg01, fp
249d4     10 4E 85 F1 | 	sub	fp, #16
249d8     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
249dc     0C 4E 05 F1 | 	add	fp, #12
249e0     A7 FA 61 FC | 	wrlong	result1, fp
249e4     0C 4E 85 F1 | 	sub	fp, #12
249e8     00 FA 0D F2 | 	cmp	result1, #0 wz
249ec     1C 00 90 5D |  if_ne	jmp	#LR__3820
249f0     70 4E 05 F1 | 	add	fp, #112
249f4     A7 12 02 FB | 	rdlong	arg01, fp
249f8     70 4E 85 F1 | 	sub	fp, #112
249fc     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
24a00     0C 4E 05 F1 | 	add	fp, #12
24a04     A7 FA 61 FC | 	wrlong	result1, fp
24a08     0C 4E 85 F1 | 	sub	fp, #12
24a0c                 | LR__3820
24a0c                 | LR__3821
24a0c                 | LR__3822
24a0c                 | LR__3823
24a0c                 | ' 					res = sync_fs(fs);
24a0c                 | ' 				}
24a0c                 | ' 			}
24a0c                 | ' 
24a0c                 | ' 		}
24a0c                 | ' 		;
24a0c                 | ' 	}
24a0c                 | ' 
24a0c                 | ' 	return res ;
24a0c     0C 4E 05 F1 | 	add	fp, #12
24a10     A7 FA 01 FB | 	rdlong	result1, fp
24a14     0C 4E 85 F1 | 	sub	fp, #12
24a18     A7 F0 03 F6 | 	mov	ptra, fp
24a1c     B2 00 A0 FD | 	call	#popregs_
24a20                 | _fatfs_cc_f_rename_ret
24a20     2D 00 64 FD | 	ret
24a24                 | 
24a24                 | _fatfs_cc_time
24a24     00 4A 05 F6 | 	mov	COUNT_, #0
24a28     A8 00 A0 FD | 	call	#pushregs_
24a2c     14 F0 07 F1 | 	add	ptra, #20
24a30     04 4E 05 F1 | 	add	fp, #4
24a34     A7 12 62 FC | 	wrlong	arg01, fp
24a38     04 4E 05 F1 | 	add	fp, #4
24a3c     A7 12 02 F6 | 	mov	arg01, fp
24a40     08 4E 85 F1 | 	sub	fp, #8
24a44     00 14 06 F6 | 	mov	arg02, #0
24a48     0C 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
24a4c     08 4E 05 F1 | 	add	fp, #8
24a50     A7 FA 01 FB | 	rdlong	result1, fp
24a54     08 4E 05 F1 | 	add	fp, #8
24a58     A7 FA 61 FC | 	wrlong	result1, fp
24a5c     0C 4E 85 F1 | 	sub	fp, #12
24a60     A7 FA 09 FB | 	rdlong	result1, fp wz
24a64     04 4E 85 F1 | 	sub	fp, #4
24a68     18 00 90 AD |  if_e	jmp	#LR__3830
24a6c     04 4E 05 F1 | 	add	fp, #4
24a70     A7 FA 01 FB | 	rdlong	result1, fp
24a74     0C 4E 05 F1 | 	add	fp, #12
24a78     A7 14 02 FB | 	rdlong	arg02, fp
24a7c     10 4E 85 F1 | 	sub	fp, #16
24a80     FD 14 62 FC | 	wrlong	arg02, result1
24a84                 | LR__3830
24a84                 | '         *tp = now;
24a84                 | '     return now;
24a84     10 4E 05 F1 | 	add	fp, #16
24a88     A7 FA 01 FB | 	rdlong	result1, fp
24a8c     10 4E 85 F1 | 	sub	fp, #16
24a90     A7 F0 03 F6 | 	mov	ptra, fp
24a94     B2 00 A0 FD | 	call	#popregs_
24a98                 | _fatfs_cc_time_ret
24a98     2D 00 64 FD | 	ret
24a9c                 | 
24a9c                 | _fatfs_cc_mktime
24a9c     06 4A 05 F6 | 	mov	COUNT_, #6
24aa0     A8 00 A0 FD | 	call	#pushregs_
24aa4     09 1F 02 F6 | 	mov	local01, arg01
24aa8     14 1E 06 F1 | 	add	local01, #20
24aac     0F 13 02 FB | 	rdlong	arg01, local01
24ab0     14 1E 86 F1 | 	sub	local01, #20
24ab4     46 12 56 F2 | 	cmps	arg01, #70 wc
24ab8                 | '                 return (time_t) -1;
24ab8     01 FA 65 C6 |  if_b	neg	result1, #1
24abc     7C 01 90 CD |  if_b	jmp	#LR__3844
24ac0     03 00 00 FF 
24ac4     6C 21 06 F6 | 	mov	local02, ##1900
24ac8     14 1E 06 F1 | 	add	local01, #20
24acc     0F FB 01 FB | 	rdlong	result1, local01
24ad0     FD 20 02 F1 | 	add	local02, result1
24ad4     08 1E 86 F1 | 	sub	local01, #8
24ad8     0F 23 02 FB | 	rdlong	local03, local01
24adc     01 22 86 F1 | 	sub	local03, #1
24ae0     04 1E 06 F1 | 	add	local01, #4
24ae4     0F 13 02 FB | 	rdlong	arg01, local01
24ae8     10 1E 86 F1 | 	sub	local01, #16
24aec     02 12 66 F0 | 	shl	arg01, #2
24af0     02 00 00 FF 
24af4     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
24af8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24afc     09 FB 01 FB | 	rdlong	result1, arg01
24b00     FD 22 02 F1 | 	add	local03, result1
24b04     10 13 02 F6 | 	mov	arg01, local02
24b08     02 00 00 FF 
24b0c     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
24b10     EC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
24b14     00 FA 0D F2 | 	cmp	result1, #0 wz
24b18     1C 00 90 AD |  if_e	jmp	#LR__3840
24b1c     00 24 06 F6 | 	mov	local04, #0
24b20     10 1E 06 F1 | 	add	local01, #16
24b24     0F FB 01 FB | 	rdlong	result1, local01
24b28     10 1E 86 F1 | 	sub	local01, #16
24b2c     02 FA 55 F2 | 	cmps	result1, #2 wc
24b30     01 24 06 36 |  if_ae	mov	local04, #1
24b34     04 00 90 FD | 	jmp	#LR__3841
24b38                 | LR__3840
24b38     00 24 06 F6 | 	mov	local04, #0
24b3c                 | LR__3841
24b3c     04 1E 06 F1 | 	add	local01, #4
24b40     0F FB 01 FB | 	rdlong	result1, local01
24b44     04 1E 86 F1 | 	sub	local01, #4
24b48     0F 27 02 FB | 	rdlong	local05, local01
24b4c     08 1E 06 F1 | 	add	local01, #8
24b50     0F 13 02 FB | 	rdlong	arg01, local01
24b54     07 00 00 FF 
24b58     10 12 06 FD | 	qmul	arg01, ##3600
24b5c     12 23 02 F1 | 	add	local03, local04
24b60     FD 24 02 F6 | 	mov	local04, result1
24b64     04 24 66 F0 | 	shl	local04, #4
24b68     FD 24 82 F1 | 	sub	local04, result1
24b6c     02 24 66 F0 | 	shl	local04, #2
24b70     12 27 02 F1 | 	add	local05, local04
24b74     08 1E 86 F1 | 	sub	local01, #8
24b78     18 24 62 FD | 	getqx	local04
24b7c     A8 00 00 FF 
24b80     80 23 06 FD | 	qmul	local03, ##86400
24b84     12 27 02 F1 | 	add	local05, local04
24b88     10 23 02 F6 | 	mov	local03, local02
24b8c     03 00 00 FF 
24b90     B2 23 86 F1 | 	sub	local03, ##1970
24b94     18 24 62 FD | 	getqx	local04
24b98     99 F0 00 FF 
24b9c     80 23 06 FD | 	qmul	local03, ##31536000
24ba0     12 27 02 F1 | 	add	local05, local04
24ba4     10 23 02 F6 | 	mov	local03, local02
24ba8     03 00 00 FF 
24bac     B1 23 86 F1 | 	sub	local03, ##1969
24bb0     11 29 52 F6 | 	abs	local06, local03 wc
24bb4     02 28 46 F0 | 	shr	local06, #2
24bb8     14 29 82 F6 | 	negc	local06, local06
24bbc     03 00 00 FF 
24bc0     D1 21 56 F2 | 	cmps	local02, ##2001 wc
24bc4     18 24 62 FD | 	getqx	local04
24bc8     12 27 02 F1 | 	add	local05, local04
24bcc     18 00 90 CD |  if_b	jmp	#LR__3842
24bd0     03 00 00 FF 
24bd4     D0 21 86 F1 | 	sub	local02, ##2000
24bd8     10 25 52 F6 | 	abs	local04, local02 wc
24bdc     64 24 16 FD | 	qdiv	local04, #100
24be0     18 24 62 FD | 	getqx	local04
24be4     12 29 A2 F3 | 	sumnc	local06, local04
24be8                 | LR__3842
24be8     A8 00 00 FF 
24bec     80 29 06 FD | 	qmul	local06, ##86400
24bf0     18 28 62 FD | 	getqx	local06
24bf4     14 27 02 F1 | 	add	local05, local06
24bf8     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
24bfc     02 00 00 FF 
24c00     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
24c04     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
24c08     14 27 02 F1 | 	add	local05, local06
24c0c     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
24c10     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
24c14     02 00 00 FF 
24c18     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
24c1c     01 22 0E F2 | 	cmp	local03, #1 wz
24c20     14 00 90 5D |  if_ne	jmp	#LR__3843
24c24     0F 13 02 F6 | 	mov	arg01, local01
24c28     D8 19 B0 FD | 	call	#_fatfs_cc___indst
24c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
24c30     07 00 00 5F 
24c34     10 26 86 51 |  if_ne	sub	local05, ##3600
24c38                 | LR__3843
24c38                 | '                 s -=  (3600L) ;
24c38                 | ' 
24c38                 | '         return s;
24c38     13 FB 01 F6 | 	mov	result1, local05
24c3c                 | LR__3844
24c3c     A7 F0 03 F6 | 	mov	ptra, fp
24c40     B2 00 A0 FD | 	call	#popregs_
24c44                 | _fatfs_cc_mktime_ret
24c44     2D 00 64 FD | 	ret
24c48                 | 
24c48                 | _fatfs_cc__gmtime_r
24c48     03 4A 05 F6 | 	mov	COUNT_, #3
24c4c     A8 00 A0 FD | 	call	#pushregs_
24c50     09 1F 02 FB | 	rdlong	local01, arg01
24c54     A8 00 00 FF 
24c58     80 1F 16 FD | 	qdiv	local01, ##86400
24c5c     18 FA 61 FD | 	getqx	result1
24c60     04 FA 05 F1 | 	add	result1, #4
24c64     07 FA 15 FD | 	qdiv	result1, #7
24c68     18 14 06 F1 | 	add	arg02, #24
24c6c     D1 7F 27 FF 
24c70     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
24c74     D1 7F 27 3F 
24c78     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
24c7c     03 00 00 3F 
24c80     DC 21 06 36 |  if_ae	mov	local02, ##2012
24c84     03 00 00 CF 
24c88     B2 21 06 C6 |  if_b	mov	local02, ##1970
24c8c                 | ' 	  year = 1970;
24c8c                 | ' 	}
24c8c                 | ' 
24c8c                 | ' 	for(;;) {
24c8c     19 FA 61 FD | 	getqy	result1
24c90     0A FB 61 FC | 	wrlong	result1, arg02
24c94     18 14 86 F1 | 	sub	arg02, #24
24c98                 | LR__3850
24c98     10 13 02 F6 | 	mov	arg01, local02
24c9c     60 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
24ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
24ca4     42 F1 00 5F 
24ca8     00 23 06 56 |  if_ne	mov	local03, ##31622400
24cac     99 F0 00 AF 
24cb0     80 23 06 A6 |  if_e	mov	local03, ##31536000
24cb4     11 1F 12 F2 | 	cmp	local01, local03 wc
24cb8                 | ' 	    break;
24cb8     01 20 06 31 |  if_ae	add	local02, #1
24cbc     11 1F 82 31 |  if_ae	sub	local01, local03
24cc0     D4 FF 9F 3D |  if_ae	jmp	#LR__3850
24cc4     A8 00 00 FF 
24cc8     80 1F 16 FD | 	qdiv	local01, ##86400
24ccc     10 23 02 F6 | 	mov	local03, local02
24cd0     03 00 00 FF 
24cd4     6C 23 86 F1 | 	sub	local03, ##1900
24cd8     14 14 06 F1 | 	add	arg02, #20
24cdc     0A 23 62 FC | 	wrlong	local03, arg02
24ce0     08 14 06 F1 | 	add	arg02, #8
24ce4     10 13 02 F6 | 	mov	arg01, local02
24ce8     18 20 62 FD | 	getqx	local02
24cec     0A 21 62 FC | 	wrlong	local02, arg02
24cf0     1C 14 86 F1 | 	sub	arg02, #28
24cf4     08 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
24cf8     00 FA 0D F2 | 	cmp	result1, #0 wz
24cfc     1D 22 06 56 |  if_ne	mov	local03, #29
24d00     1C 22 06 A6 |  if_e	mov	local03, #28
24d04     02 00 00 FF 
24d08     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
24d0c     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
24d10     02 00 00 FF 
24d14     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
24d18                 | ' 
24d18                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
24d18                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
24d18     00 12 06 F6 | 	mov	arg01, #0
24d1c     97 2A 48 FB | 	callpa	#(@LR__3852-@LR__3851)>>2,fcache_load_ptr_
24d20                 | LR__3851
24d20     09 23 02 F6 | 	mov	local03, arg01
24d24     02 22 66 F0 | 	shl	local03, #2
24d28     02 00 00 FF 
24d2c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
24d30     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
24d34     11 23 02 FB | 	rdlong	local03, local03
24d38     11 21 52 F2 | 	cmps	local02, local03 wc
24d3c     02 00 00 FF 
24d40     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
24d44     2C 00 90 CD |  if_b	jmp	#LR__3853
24d48     09 23 02 F6 | 	mov	local03, arg01
24d4c     02 22 66 F0 | 	shl	local03, #2
24d50     02 00 00 FF 
24d54     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
24d58     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
24d5c     11 23 02 FB | 	rdlong	local03, local03
24d60     11 21 82 F1 | 	sub	local02, local03
24d64     01 12 06 F1 | 	add	arg01, #1
24d68     02 00 00 FF 
24d6c     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
24d70     AC FF 9F FD | 	jmp	#LR__3851
24d74                 | LR__3852
24d74                 | LR__3853
24d74     A8 00 00 FF 
24d78     80 1F 16 FD | 	qdiv	local01, ##86400
24d7c     10 14 06 F1 | 	add	arg02, #16
24d80     0A 13 62 FC | 	wrlong	arg01, arg02
24d84     01 20 06 F1 | 	add	local02, #1
24d88     04 14 86 F1 | 	sub	arg02, #4
24d8c     0A 21 62 FC | 	wrlong	local02, arg02
24d90     19 1E 62 FD | 	getqy	local01
24d94     07 00 00 FF 
24d98     10 1E 16 FD | 	qdiv	local01, ##3600
24d9c     18 22 62 FD | 	getqx	local03
24da0     07 00 00 FF 
24da4     10 1E 16 FD | 	qdiv	local01, ##3600
24da8     04 14 86 F1 | 	sub	arg02, #4
24dac     0A 23 62 FC | 	wrlong	local03, arg02
24db0     19 1E 62 FD | 	getqy	local01
24db4     3C 1E 16 FD | 	qdiv	local01, #60
24db8     18 22 62 FD | 	getqx	local03
24dbc     3C 1E 16 FD | 	qdiv	local01, #60
24dc0     04 14 86 F1 | 	sub	arg02, #4
24dc4     0A 23 62 FC | 	wrlong	local03, arg02
24dc8     04 14 86 F1 | 	sub	arg02, #4
24dcc                 | '         stm->tm_isdst = 0;
24dcc                 | ' 
24dcc                 | ' ;
24dcc                 | '         return stm;
24dcc     0A FB 01 F6 | 	mov	result1, arg02
24dd0     19 22 62 FD | 	getqy	local03
24dd4     0A 23 62 FC | 	wrlong	local03, arg02
24dd8     20 14 06 F1 | 	add	arg02, #32
24ddc     0A 01 68 FC | 	wrlong	#0, arg02
24de0     A7 F0 03 F6 | 	mov	ptra, fp
24de4     B2 00 A0 FD | 	call	#popregs_
24de8                 | _fatfs_cc__gmtime_r_ret
24de8     2D 00 64 FD | 	ret
24dec                 | 
24dec                 | _fatfs_cc__tzset
24dec     34 01 00 FF 
24df0     2D 13 06 F6 | 	mov	arg01, ##@LR__4165
24df4     34 00 B0 FD | 	call	#_fatfs_cc_getenv
24df8     FD 12 02 F6 | 	mov	arg01, result1
24dfc     02 00 00 FF 
24e00     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
24e04     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
24e08     02 00 00 FF 
24e0c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
24e10     3C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
24e14     02 00 00 FF 
24e18     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
24e1c     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
24e20     02 00 00 FF 
24e24     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
24e28                 | _fatfs_cc__tzset_ret
24e28     2D 00 64 FD | 	ret
24e2c                 | 
24e2c                 | _fatfs_cc_getenv
24e2c     06 4A 05 F6 | 	mov	COUNT_, #6
24e30     A8 00 A0 FD | 	call	#pushregs_
24e34     09 1F 02 F6 | 	mov	local01, arg01
24e38     09 21 02 F6 | 	mov	local02, arg01
24e3c     97 06 48 FB | 	callpa	#(@LR__3861-@LR__3860)>>2,fcache_load_ptr_
24e40                 | LR__3860
24e40     10 FB C9 FA | 	rdbyte	result1, local02 wz
24e44     01 20 06 51 |  if_ne	add	local02, #1
24e48     F4 FF 9F 5D |  if_ne	jmp	#LR__3860
24e4c                 | LR__3861
24e4c     09 21 82 F1 | 	sub	local02, arg01
24e50     10 FB 01 F6 | 	mov	result1, local02
24e54     02 00 00 FF 
24e58     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
24e5c     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
24e60     02 00 00 FF 
24e64     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
24e68                 | '             return 0;
24e68     00 FA 05 A6 |  if_e	mov	result1, #0
24e6c     5C 00 90 AD |  if_e	jmp	#LR__3864
24e70                 | ' 
24e70                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
24e70     02 00 00 FF 
24e74     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
24e78     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
24e7c     02 00 00 FF 
24e80     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
24e84                 | LR__3862
24e84     11 25 0A FB | 	rdlong	local04, local03 wz
24e88     3C 00 90 AD |  if_e	jmp	#LR__3863
24e8c     12 13 02 F6 | 	mov	arg01, local04
24e90     0F 15 02 F6 | 	mov	arg02, local01
24e94     10 17 02 F6 | 	mov	arg03, local02
24e98     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
24e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
24ea0     10 27 02 A6 |  if_e	mov	local05, local02
24ea4     12 27 02 A1 |  if_e	add	local05, local04
24ea8     13 29 C2 AA |  if_e	rdbyte	local06, local05
24eac     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
24eb0                 | ' 			return name+len+1;
24eb0     10 25 02 A1 |  if_e	add	local04, local02
24eb4     01 24 06 A1 |  if_e	add	local04, #1
24eb8     12 FB 01 A6 |  if_e	mov	result1, local04
24ebc     0C 00 90 AD |  if_e	jmp	#LR__3864
24ec0     04 22 06 F1 | 	add	local03, #4
24ec4     BC FF 9F FD | 	jmp	#LR__3862
24ec8                 | LR__3863
24ec8                 | ' 	}
24ec8                 | ' 	return 0;
24ec8     00 FA 05 F6 | 	mov	result1, #0
24ecc                 | LR__3864
24ecc     A7 F0 03 F6 | 	mov	ptra, fp
24ed0     B2 00 A0 FD | 	call	#popregs_
24ed4                 | _fatfs_cc_getenv_ret
24ed4     2D 00 64 FD | 	ret
24ed8                 | 
24ed8                 | _fatfs_cc__get_fattime
24ed8     00 4A 05 F6 | 	mov	COUNT_, #0
24edc     A8 00 A0 FD | 	call	#pushregs_
24ee0     34 F0 07 F1 | 	add	ptra, #52
24ee4     00 12 06 F6 | 	mov	arg01, #0
24ee8     38 FB BF FD | 	call	#_fatfs_cc_time
24eec     04 4E 05 F1 | 	add	fp, #4
24ef0     A7 FA 61 FC | 	wrlong	result1, fp
24ef4     A7 12 02 F6 | 	mov	arg01, fp
24ef8     0C 4E 05 F1 | 	add	fp, #12
24efc     A7 14 02 F6 | 	mov	arg02, fp
24f00     10 4E 85 F1 | 	sub	fp, #16
24f04     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
24f08     24 4E 05 F1 | 	add	fp, #36
24f0c     A7 14 02 FB | 	rdlong	arg02, fp
24f10     50 14 86 F1 | 	sub	arg02, #80
24f14     09 14 66 F0 | 	shl	arg02, #9
24f18     04 4E 85 F1 | 	sub	fp, #4
24f1c     A7 FA 01 FB | 	rdlong	result1, fp
24f20     01 FA 05 F1 | 	add	result1, #1
24f24     05 FA 65 F0 | 	shl	result1, #5
24f28     FD 14 42 F5 | 	or	arg02, result1
24f2c     04 4E 85 F1 | 	sub	fp, #4
24f30     A7 FA 01 FB | 	rdlong	result1, fp
24f34     FD 14 42 F5 | 	or	arg02, result1
24f38     14 4E 85 F1 | 	sub	fp, #20
24f3c     A7 14 62 FC | 	wrlong	arg02, fp
24f40     10 4E 05 F1 | 	add	fp, #16
24f44     A7 14 02 FB | 	rdlong	arg02, fp
24f48     0B 14 66 F0 | 	shl	arg02, #11
24f4c     04 4E 85 F1 | 	sub	fp, #4
24f50     A7 FA 01 FB | 	rdlong	result1, fp
24f54     05 FA 65 F0 | 	shl	result1, #5
24f58     FD 14 42 F5 | 	or	arg02, result1
24f5c     04 4E 85 F1 | 	sub	fp, #4
24f60     A7 FA 01 FB | 	rdlong	result1, fp
24f64     FD 14 42 F5 | 	or	arg02, result1
24f68     04 4E 85 F1 | 	sub	fp, #4
24f6c     A7 14 62 FC | 	wrlong	arg02, fp
24f70                 | ' 
24f70                 | '     now = time(0);
24f70                 | '     _gmtime_r (&now, &date);
24f70                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
24f70                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
24f70                 | '     return (ffdate << 16) | fftime;
24f70     04 4E 85 F1 | 	sub	fp, #4
24f74     A7 FA 01 FB | 	rdlong	result1, fp
24f78     10 FA 65 F0 | 	shl	result1, #16
24f7c     08 4E 85 F1 | 	sub	fp, #8
24f80     0A FB 41 F5 | 	or	result1, arg02
24f84     A7 F0 03 F6 | 	mov	ptra, fp
24f88     B2 00 A0 FD | 	call	#popregs_
24f8c                 | _fatfs_cc__get_fattime_ret
24f8c     2D 00 64 FD | 	ret
24f90                 | 
24f90                 | _fatfs_cc_unixtime_0803
24f90     00 4A 05 F6 | 	mov	COUNT_, #0
24f94     A8 00 A0 FD | 	call	#pushregs_
24f98     34 F0 07 F1 | 	add	ptra, #52
24f9c     04 4E 05 F1 | 	add	fp, #4
24fa0     A7 12 62 FC | 	wrlong	arg01, fp
24fa4     04 4E 05 F1 | 	add	fp, #4
24fa8     A7 14 62 FC | 	wrlong	arg02, fp
24fac     04 4E 85 F1 | 	sub	fp, #4
24fb0     A7 14 02 FB | 	rdlong	arg02, fp
24fb4     09 14 46 F0 | 	shr	arg02, #9
24fb8     7F 14 06 F5 | 	and	arg02, #127
24fbc     50 FA 05 F6 | 	mov	result1, #80
24fc0     0A FB 01 F1 | 	add	result1, arg02
24fc4     20 4E 05 F1 | 	add	fp, #32
24fc8     A7 FA 61 FC | 	wrlong	result1, fp
24fcc     20 4E 85 F1 | 	sub	fp, #32
24fd0     A7 FA 01 FB | 	rdlong	result1, fp
24fd4     05 FA 45 F0 | 	shr	result1, #5
24fd8     FD FA 41 F8 | 	getnib	result1, result1, #0
24fdc     01 FA 85 F1 | 	sub	result1, #1
24fe0     1C 4E 05 F1 | 	add	fp, #28
24fe4     A7 FA 61 FC | 	wrlong	result1, fp
24fe8     1C 4E 85 F1 | 	sub	fp, #28
24fec     A7 FA 01 FB | 	rdlong	result1, fp
24ff0     1F FA 05 F5 | 	and	result1, #31
24ff4     18 4E 05 F1 | 	add	fp, #24
24ff8     A7 FA 61 FC | 	wrlong	result1, fp
24ffc     14 4E 85 F1 | 	sub	fp, #20
25000     A7 FA 01 FB | 	rdlong	result1, fp
25004     0B FA 45 F0 | 	shr	result1, #11
25008     1F FA 05 F5 | 	and	result1, #31
2500c     10 4E 05 F1 | 	add	fp, #16
25010     A7 FA 61 FC | 	wrlong	result1, fp
25014     10 4E 85 F1 | 	sub	fp, #16
25018     A7 FA 01 FB | 	rdlong	result1, fp
2501c     05 FA 45 F0 | 	shr	result1, #5
25020     3F FA 05 F5 | 	and	result1, #63
25024     0C 4E 05 F1 | 	add	fp, #12
25028     A7 FA 61 FC | 	wrlong	result1, fp
2502c     0C 4E 85 F1 | 	sub	fp, #12
25030     A7 14 02 FB | 	rdlong	arg02, fp
25034     1F 14 06 F5 | 	and	arg02, #31
25038     01 14 66 F0 | 	shl	arg02, #1
2503c     08 4E 05 F1 | 	add	fp, #8
25040     A7 14 62 FC | 	wrlong	arg02, fp
25044     A7 12 02 F6 | 	mov	arg01, fp
25048     10 4E 85 F1 | 	sub	fp, #16
2504c     4C FA BF FD | 	call	#_fatfs_cc_mktime
25050     0C 4E 05 F1 | 	add	fp, #12
25054     A7 FA 61 FC | 	wrlong	result1, fp
25058                 | ' 
25058                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
25058                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
25058                 | '     date.tm_mday = (dosdate & 0x1f);
25058                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
25058                 | '     date.tm_min = (dostime >> 5) & 0x3f;
25058                 | '     date.tm_sec = (dostime & 0x1f) << 1;
25058                 | ' 
25058                 | '     t = mktime(&date);
25058                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
25058                 | '     return t;
25058     0C 4E 85 F1 | 	sub	fp, #12
2505c     A7 F0 03 F6 | 	mov	ptra, fp
25060     B2 00 A0 FD | 	call	#popregs_
25064                 | _fatfs_cc_unixtime_0803_ret
25064     2D 00 64 FD | 	ret
25068                 | 
25068                 | _fatfs_cc__set_dos_error_0805
25068     09 01 02 F6 | 	mov	_var01, arg01
2506c                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2506c                 | '     switch (derr) {
2506c     14 00 26 F3 | 	fle	_var01, #20
25070     30 00 62 FD | 	jmprel	_var01
25074                 | LR__3870
25074     50 00 90 FD | 	jmp	#LR__3871
25078     84 00 90 FD | 	jmp	#LR__3885
2507c     80 00 90 FD | 	jmp	#LR__3886
25080     7C 00 90 FD | 	jmp	#LR__3887
25084     48 00 90 FD | 	jmp	#LR__3872
25088     44 00 90 FD | 	jmp	#LR__3873
2508c     40 00 90 FD | 	jmp	#LR__3874
25090     44 00 90 FD | 	jmp	#LR__3875
25094     48 00 90 FD | 	jmp	#LR__3877
25098     54 00 90 FD | 	jmp	#LR__3880
2509c     38 00 90 FD | 	jmp	#LR__3876
250a0     4C 00 90 FD | 	jmp	#LR__3881
250a4     48 00 90 FD | 	jmp	#LR__3882
250a8     44 00 90 FD | 	jmp	#LR__3883
250ac     50 00 90 FD | 	jmp	#LR__3888
250b0     4C 00 90 FD | 	jmp	#LR__3888
250b4     48 00 90 FD | 	jmp	#LR__3888
250b8     2C 00 90 FD | 	jmp	#LR__3878
250bc     38 00 90 FD | 	jmp	#LR__3884
250c0     2C 00 90 FD | 	jmp	#LR__3879
250c4     38 00 90 FD | 	jmp	#LR__3888
250c8                 | LR__3871
250c8     00 02 06 F6 | 	mov	_var02, #0
250cc                 | '         r = 0;
250cc                 | '         break;
250cc     34 00 90 FD | 	jmp	#LR__3889
250d0                 | LR__3872
250d0                 | LR__3873
250d0                 | LR__3874
250d0     04 02 06 F6 | 	mov	_var02, #4
250d4                 | '         r =  4 ;
250d4                 | '         break;
250d4     2C 00 90 FD | 	jmp	#LR__3889
250d8                 | LR__3875
250d8                 | LR__3876
250d8     06 02 06 F6 | 	mov	_var02, #6
250dc                 | '         r =  6 ;
250dc                 | '         break;
250dc     24 00 90 FD | 	jmp	#LR__3889
250e0                 | LR__3877
250e0     09 02 06 F6 | 	mov	_var02, #9
250e4                 | '         r =  9 ;
250e4                 | '         break;
250e4     1C 00 90 FD | 	jmp	#LR__3889
250e8                 | LR__3878
250e8     07 02 06 F6 | 	mov	_var02, #7
250ec                 | '         r =  7 ;
250ec                 | '         break;
250ec     14 00 90 FD | 	jmp	#LR__3889
250f0                 | LR__3879
250f0                 | LR__3880
250f0                 | LR__3881
250f0                 | LR__3882
250f0                 | LR__3883
250f0     0A 02 06 F6 | 	mov	_var02, #10
250f4                 | '         r =  10 ;
250f4                 | '         break;
250f4     0C 00 90 FD | 	jmp	#LR__3889
250f8                 | LR__3884
250f8     0B 02 06 F6 | 	mov	_var02, #11
250fc                 | '         r =  11 ;
250fc                 | '         break;
250fc     04 00 90 FD | 	jmp	#LR__3889
25100                 | LR__3885
25100                 | LR__3886
25100                 | LR__3887
25100                 | LR__3888
25100     0C 02 06 F6 | 	mov	_var02, #12
25104                 | '         r =  12 ;
25104                 | '         break;
25104                 | LR__3889
25104                 | '     }
25104                 | '     return _seterror(r);
25104     00 02 4E F2 | 	cmps	_var02, #0 wz
25108     20 E8 05 F1 | 	add	ptr___system__dat__, #32
2510c     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
25110     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
25114     01 FA 65 56 |  if_ne	neg	result1, #1
25118     00 FA 05 A6 |  if_e	mov	result1, #0
2511c                 | _fatfs_cc__set_dos_error_0805_ret
2511c     2D 00 64 FD | 	ret
25120                 | 
25120                 | _fatfs_cc_v_creat
25120     04 4A 05 F6 | 	mov	COUNT_, #4
25124     A8 00 A0 FD | 	call	#pushregs_
25128     09 1F 02 F6 | 	mov	local01, arg01
2512c     0A 21 02 F6 | 	mov	local02, arg02
25130     03 00 00 FF 
25134     3C 12 06 F6 | 	mov	arg01, ##1596
25138                 | '     return _gc_alloc(size);
25138     10 14 06 F6 | 	mov	arg02, #16
2513c     14 61 BF FD | 	call	#__system___gc_doalloc
25140     FD 22 0A F6 | 	mov	local03, result1 wz
25144                 | '       return _seterror( 7 );
25144     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
25148     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2514c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
25150     01 FA 65 A6 |  if_e	neg	result1, #1
25154     58 00 90 AD |  if_e	jmp	#LR__3891
25158     11 13 02 F6 | 	mov	arg01, local03
2515c     00 14 06 F6 | 	mov	arg02, #0
25160     03 00 00 FF 
25164     3C 16 06 F6 | 	mov	arg03, ##1596
25168     98 00 A0 FD | 	call	#\builtin_bytefill_
2516c     02 00 00 FF 
25170     14 22 06 F1 | 	add	local03, ##1044
25174     11 13 02 F6 | 	mov	arg01, local03
25178     02 00 00 FF 
2517c     14 22 86 F1 | 	sub	local03, ##1044
25180     10 15 02 F6 | 	mov	arg02, local02
25184     07 16 06 F6 | 	mov	arg03, #7
25188     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2518c     FD 24 0A F6 | 	mov	local04, result1 wz
25190     14 00 90 AD |  if_e	jmp	#LR__3890
25194     11 13 02 F6 | 	mov	arg01, local03
25198                 | '     return _gc_free(ptr);
25198     C4 61 BF FD | 	call	#__system___gc_free
2519c                 | '     free(f);
2519c                 | '     return _set_dos_error(r);
2519c     12 13 02 F6 | 	mov	arg01, local04
251a0     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0805
251a4     08 00 90 FD | 	jmp	#LR__3891
251a8                 | LR__3890
251a8     0F 23 62 FC | 	wrlong	local03, local01
251ac                 | '   }
251ac                 | '   fil->vfsdata = f;
251ac                 | '   return 0;
251ac     00 FA 05 F6 | 	mov	result1, #0
251b0                 | LR__3891
251b0     A7 F0 03 F6 | 	mov	ptra, fp
251b4     B2 00 A0 FD | 	call	#popregs_
251b8                 | _fatfs_cc_v_creat_ret
251b8     2D 00 64 FD | 	ret
251bc                 | 
251bc                 | _fatfs_cc_v_close
251bc     02 4A 05 F6 | 	mov	COUNT_, #2
251c0     A8 00 A0 FD | 	call	#pushregs_
251c4     09 1F 02 FB | 	rdlong	local01, arg01
251c8     02 00 00 FF 
251cc     14 1E 06 F1 | 	add	local01, ##1044
251d0     0F 13 02 F6 | 	mov	arg01, local01
251d4     02 00 00 FF 
251d8     14 1E 86 F1 | 	sub	local01, ##1044
251dc     DC E3 BF FD | 	call	#_fatfs_cc_f_close
251e0     FD 20 02 F6 | 	mov	local02, result1
251e4     0F 13 02 F6 | 	mov	arg01, local01
251e8                 | '     return _gc_free(ptr);
251e8     74 61 BF FD | 	call	#__system___gc_free
251ec                 | '     FAT_FIL *f = fil->vfsdata;
251ec                 | '     r=f_close(&f->fil);
251ec                 | '     free(f);
251ec                 | '     return _set_dos_error(r);
251ec     10 13 02 F6 | 	mov	arg01, local02
251f0     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0805
251f4     A7 F0 03 F6 | 	mov	ptra, fp
251f8     B2 00 A0 FD | 	call	#popregs_
251fc                 | _fatfs_cc_v_close_ret
251fc     2D 00 64 FD | 	ret
25200                 | 
25200                 | _fatfs_cc_v_opendir
25200     04 4A 05 F6 | 	mov	COUNT_, #4
25204     A8 00 A0 FD | 	call	#pushregs_
25208     09 1F 02 F6 | 	mov	local01, arg01
2520c     0A 21 02 F6 | 	mov	local02, arg02
25210     30 12 06 F6 | 	mov	arg01, #48
25214                 | '     return _gc_alloc(size);
25214     10 14 06 F6 | 	mov	arg02, #16
25218     38 60 BF FD | 	call	#__system___gc_doalloc
2521c     FD 22 0A F6 | 	mov	local03, result1 wz
25220                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
25220                 | '       return _seterror( 7 );
25220     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
25224     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
25228     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
2522c     01 FA 65 A6 |  if_e	neg	result1, #1
25230     34 00 90 AD |  if_e	jmp	#LR__3901
25234     10 15 02 F6 | 	mov	arg02, local02
25238     11 13 02 F6 | 	mov	arg01, local03
2523c     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
25240     FD 24 0A F6 | 	mov	local04, result1 wz
25244     14 00 90 AD |  if_e	jmp	#LR__3900
25248     11 13 02 F6 | 	mov	arg01, local03
2524c                 | '     return _gc_free(ptr);
2524c     10 61 BF FD | 	call	#__system___gc_free
25250                 | '         free(f);
25250                 | '         return _set_dos_error(r);
25250     12 13 02 F6 | 	mov	arg01, local04
25254     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0805
25258     0C 00 90 FD | 	jmp	#LR__3901
2525c                 | LR__3900
2525c     04 1E 06 F1 | 	add	local01, #4
25260     0F 23 62 FC | 	wrlong	local03, local01
25264                 | '     }
25264                 | '     dir->vfsdata = f;
25264                 | '     return 0;
25264     00 FA 05 F6 | 	mov	result1, #0
25268                 | LR__3901
25268     A7 F0 03 F6 | 	mov	ptra, fp
2526c     B2 00 A0 FD | 	call	#popregs_
25270                 | _fatfs_cc_v_opendir_ret
25270     2D 00 64 FD | 	ret
25274                 | 
25274                 | _fatfs_cc_v_closedir
25274     02 4A 05 F6 | 	mov	COUNT_, #2
25278     A8 00 A0 FD | 	call	#pushregs_
2527c     04 12 06 F1 | 	add	arg01, #4
25280     09 1F 02 FB | 	rdlong	local01, arg01
25284     0F 13 02 F6 | 	mov	arg01, local01
25288     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2528c     FD 20 02 F6 | 	mov	local02, result1
25290     0F 13 02 F6 | 	mov	arg01, local01
25294                 | '     return _gc_free(ptr);
25294     C8 60 BF FD | 	call	#__system___gc_free
25298     00 20 0E F2 | 	cmp	local02, #0 wz
2529c     10 13 02 56 |  if_ne	mov	arg01, local02
252a0     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0805
252a4                 | '     return r;
252a4     10 FB 01 F6 | 	mov	result1, local02
252a8     A7 F0 03 F6 | 	mov	ptra, fp
252ac     B2 00 A0 FD | 	call	#popregs_
252b0                 | _fatfs_cc_v_closedir_ret
252b0     2D 00 64 FD | 	ret
252b4                 | 
252b4                 | _fatfs_cc_v_readdir
252b4     01 4A 05 F6 | 	mov	COUNT_, #1
252b8     A8 00 A0 FD | 	call	#pushregs_
252bc     2C F1 07 F1 | 	add	ptra, #300
252c0     04 4E 05 F1 | 	add	fp, #4
252c4     A7 12 62 FC | 	wrlong	arg01, fp
252c8     04 4E 05 F1 | 	add	fp, #4
252cc     A7 14 62 FC | 	wrlong	arg02, fp
252d0     04 4E 85 F1 | 	sub	fp, #4
252d4     A7 16 02 FB | 	rdlong	arg03, fp
252d8     04 16 06 F1 | 	add	arg03, #4
252dc     0B 13 02 FB | 	rdlong	arg01, arg03
252e0     08 4E 05 F1 | 	add	fp, #8
252e4     A7 14 02 F6 | 	mov	arg02, fp
252e8     0C 4E 85 F1 | 	sub	fp, #12
252ec     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
252f0     28 4F 05 F1 | 	add	fp, #296
252f4     A7 FA 61 FC | 	wrlong	result1, fp
252f8     28 4F 85 F1 | 	sub	fp, #296
252fc     00 FA 0D F2 | 	cmp	result1, #0 wz
25300     14 00 90 AD |  if_e	jmp	#LR__3910
25304                 | '         return _set_dos_error(r);
25304     28 4F 05 F1 | 	add	fp, #296
25308     A7 12 02 FB | 	rdlong	arg01, fp
2530c     28 4F 85 F1 | 	sub	fp, #296
25310     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0805
25314     C4 00 90 FD | 	jmp	#LR__3913
25318                 | LR__3910
25318     28 4E 05 F1 | 	add	fp, #40
2531c     A7 16 CA FA | 	rdbyte	arg03, fp wz
25320     28 4E 85 F1 | 	sub	fp, #40
25324                 | '         return -1;
25324     01 FA 65 A6 |  if_e	neg	result1, #1
25328     B0 00 90 AD |  if_e	jmp	#LR__3913
2532c     08 4E 05 F1 | 	add	fp, #8
25330     A7 12 02 FB | 	rdlong	arg01, fp
25334     20 4E 05 F1 | 	add	fp, #32
25338     A7 14 02 F6 | 	mov	arg02, fp
2533c     28 4E 85 F1 | 	sub	fp, #40
25340     3F 16 06 F6 | 	mov	arg03, #63
25344     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
25348     08 4E 05 F1 | 	add	fp, #8
2534c     A7 16 02 FB | 	rdlong	arg03, fp
25350     3F 16 06 F1 | 	add	arg03, #63
25354     0B 01 48 FC | 	wrbyte	#0, arg03
25358     0C 4E 05 F1 | 	add	fp, #12
2535c     A7 16 C2 FA | 	rdbyte	arg03, fp
25360     14 4E 85 F1 | 	sub	fp, #20
25364     10 16 CE F7 | 	test	arg03, #16 wz
25368     18 00 90 AD |  if_e	jmp	#LR__3911
2536c     08 4E 05 F1 | 	add	fp, #8
25370     A7 16 02 FB | 	rdlong	arg03, fp
25374     08 4E 85 F1 | 	sub	fp, #8
25378     50 16 06 F1 | 	add	arg03, #80
2537c     0B 03 48 FC | 	wrbyte	#1, arg03
25380     14 00 90 FD | 	jmp	#LR__3912
25384                 | LR__3911
25384     08 4E 05 F1 | 	add	fp, #8
25388     A7 16 02 FB | 	rdlong	arg03, fp
2538c     08 4E 85 F1 | 	sub	fp, #8
25390     50 16 06 F1 | 	add	arg03, #80
25394     0B 01 48 FC | 	wrbyte	#0, arg03
25398                 | LR__3912
25398     08 4E 05 F1 | 	add	fp, #8
2539c     A7 16 02 FB | 	rdlong	arg03, fp
253a0     04 4E 05 F1 | 	add	fp, #4
253a4     A7 14 02 FB | 	rdlong	arg02, fp
253a8     48 16 06 F1 | 	add	arg03, #72
253ac     0B 15 62 FC | 	wrlong	arg02, arg03
253b0     04 4E 85 F1 | 	sub	fp, #4
253b4     A7 1E 02 FB | 	rdlong	local01, fp
253b8     08 4E 05 F1 | 	add	fp, #8
253bc     A7 12 E2 FA | 	rdword	arg01, fp
253c0     02 4E 05 F1 | 	add	fp, #2
253c4     A7 14 E2 FA | 	rdword	arg02, fp
253c8     12 4E 85 F1 | 	sub	fp, #18
253cc     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0803
253d0     4C 1E 06 F1 | 	add	local01, #76
253d4     0F FB 61 FC | 	wrlong	result1, local01
253d8                 | '         ent->d_type =  (0) ;
253d8                 | '     }
253d8                 | '     ent->d_size = finfo.fsize;
253d8                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
253d8                 | '     return 0;
253d8     00 FA 05 F6 | 	mov	result1, #0
253dc                 | LR__3913
253dc     A7 F0 03 F6 | 	mov	ptra, fp
253e0     B2 00 A0 FD | 	call	#popregs_
253e4                 | _fatfs_cc_v_readdir_ret
253e4     2D 00 64 FD | 	ret
253e8                 | 
253e8                 | _fatfs_cc_v_stat
253e8     03 4A 05 F6 | 	mov	COUNT_, #3
253ec     A8 00 A0 FD | 	call	#pushregs_
253f0     30 F1 07 F1 | 	add	ptra, #304
253f4     04 4E 05 F1 | 	add	fp, #4
253f8     A7 12 62 FC | 	wrlong	arg01, fp
253fc     04 4E 05 F1 | 	add	fp, #4
25400     A7 14 62 FC | 	wrlong	arg02, fp
25404     08 4E 85 F1 | 	sub	fp, #8
25408     0A 13 02 F6 | 	mov	arg01, arg02
2540c     00 14 06 F6 | 	mov	arg02, #0
25410     30 16 06 F6 | 	mov	arg03, #48
25414     98 00 A0 FD | 	call	#\builtin_bytefill_
25418     04 4E 05 F1 | 	add	fp, #4
2541c     A7 FA 01 FB | 	rdlong	result1, fp
25420     04 4E 85 F1 | 	sub	fp, #4
25424     FD FA C9 FA | 	rdbyte	result1, result1 wz
25428     2C 00 90 AD |  if_e	jmp	#LR__3920
2542c     04 4E 05 F1 | 	add	fp, #4
25430     A7 FA 01 FB | 	rdlong	result1, fp
25434     04 4E 85 F1 | 	sub	fp, #4
25438     FD FA C1 FA | 	rdbyte	result1, result1
2543c     2E FA 0D F2 | 	cmp	result1, #46 wz
25440     04 4E 05 A1 |  if_e	add	fp, #4
25444     A7 1E 02 AB |  if_e	rdlong	local01, fp
25448     04 4E 85 A1 |  if_e	sub	fp, #4
2544c     01 1E 06 A1 |  if_e	add	local01, #1
25450     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
25454     18 00 90 5D |  if_ne	jmp	#LR__3921
25458                 | LR__3920
25458     18 4E 05 F1 | 	add	fp, #24
2545c     A7 20 48 FC | 	wrbyte	#16, fp
25460     0C 4E 85 F1 | 	sub	fp, #12
25464     A7 00 68 FC | 	wrlong	#0, fp
25468     0C 4E 85 F1 | 	sub	fp, #12
2546c     24 00 90 FD | 	jmp	#LR__3922
25470                 | LR__3921
25470     04 4E 05 F1 | 	add	fp, #4
25474     A7 12 02 FB | 	rdlong	arg01, fp
25478     0C 4E 05 F1 | 	add	fp, #12
2547c     A7 14 02 F6 | 	mov	arg02, fp
25480     10 4E 85 F1 | 	sub	fp, #16
25484     AC EB BF FD | 	call	#_fatfs_cc_f_stat
25488     0C 4E 05 F1 | 	add	fp, #12
2548c     A7 FA 61 FC | 	wrlong	result1, fp
25490     0C 4E 85 F1 | 	sub	fp, #12
25494                 | LR__3922
25494     0C 4E 05 F1 | 	add	fp, #12
25498     A7 20 0A FB | 	rdlong	local02, fp wz
2549c     0C 4E 85 F1 | 	sub	fp, #12
254a0     14 00 90 AD |  if_e	jmp	#LR__3923
254a4                 | '         return _set_dos_error(r);
254a4     0C 4E 05 F1 | 	add	fp, #12
254a8     A7 12 02 FB | 	rdlong	arg01, fp
254ac     0C 4E 85 F1 | 	sub	fp, #12
254b0     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0805
254b4     14 01 90 FD | 	jmp	#LR__3924
254b8                 | LR__3923
254b8     2C 4F 05 F1 | 	add	fp, #300
254bc     A7 48 6A FC | 	wrlong	#292, fp
254c0     14 4F 85 F1 | 	sub	fp, #276
254c4     A7 22 C2 FA | 	rdbyte	local03, fp
254c8     18 4E 85 F1 | 	sub	fp, #24
254cc     01 22 CE F7 | 	test	local03, #1 wz
254d0     2C 4F 05 A1 |  if_e	add	fp, #300
254d4     A7 22 02 AB |  if_e	rdlong	local03, fp
254d8     92 22 46 A5 |  if_e	or	local03, #146
254dc     A7 22 62 AC |  if_e	wrlong	local03, fp
254e0     2C 4F 85 A1 |  if_e	sub	fp, #300
254e4     18 4E 05 F1 | 	add	fp, #24
254e8     A7 22 C2 FA | 	rdbyte	local03, fp
254ec     18 4E 85 F1 | 	sub	fp, #24
254f0     10 22 CE F7 | 	test	local03, #16 wz
254f4     2C 4F 05 51 |  if_ne	add	fp, #300
254f8     A7 22 02 5B |  if_ne	rdlong	local03, fp
254fc     08 00 00 5F 
25500     49 22 46 55 |  if_ne	or	local03, ##4169
25504     A7 22 62 5C |  if_ne	wrlong	local03, fp
25508     2C 4F 85 51 |  if_ne	sub	fp, #300
2550c     08 4E 05 F1 | 	add	fp, #8
25510     A7 22 02 FB | 	rdlong	local03, fp
25514     24 4F 05 F1 | 	add	fp, #292
25518     A7 20 02 FB | 	rdlong	local02, fp
2551c     08 22 06 F1 | 	add	local03, #8
25520     11 21 62 FC | 	wrlong	local02, local03
25524     24 4F 85 F1 | 	sub	fp, #292
25528     A7 22 02 FB | 	rdlong	local03, fp
2552c     0C 22 06 F1 | 	add	local03, #12
25530     11 03 68 FC | 	wrlong	#1, local03
25534     A7 22 02 FB | 	rdlong	local03, fp
25538     08 4E 05 F1 | 	add	fp, #8
2553c     A7 20 02 FB | 	rdlong	local02, fp
25540     18 22 06 F1 | 	add	local03, #24
25544     11 21 62 FC | 	wrlong	local02, local03
25548     08 4E 85 F1 | 	sub	fp, #8
2554c     A7 22 02 FB | 	rdlong	local03, fp
25550     1C 22 06 F1 | 	add	local03, #28
25554     01 00 80 FF 
25558     11 01 68 FC | 	wrlong	##512, local03
2555c     A7 20 02 FB | 	rdlong	local02, fp
25560     10 23 02 F6 | 	mov	local03, local02
25564     18 20 06 F1 | 	add	local02, #24
25568     10 21 02 FB | 	rdlong	local02, local02
2556c     FF 21 06 F1 | 	add	local02, #511
25570     10 21 52 F6 | 	abs	local02, local02 wc
25574     09 20 46 F0 | 	shr	local02, #9
25578     10 21 82 F6 | 	negc	local02, local02
2557c     20 22 06 F1 | 	add	local03, #32
25580     11 21 62 FC | 	wrlong	local02, local03
25584     A7 20 02 FB | 	rdlong	local02, fp
25588     10 23 02 F6 | 	mov	local03, local02
2558c     10 1F 02 F6 | 	mov	local01, local02
25590     0C 4E 05 F1 | 	add	fp, #12
25594     A7 12 E2 FA | 	rdword	arg01, fp
25598     02 4E 05 F1 | 	add	fp, #2
2559c     A7 14 E2 FA | 	rdword	arg02, fp
255a0     16 4E 85 F1 | 	sub	fp, #22
255a4     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0803
255a8     2C 1E 06 F1 | 	add	local01, #44
255ac     0F FB 61 FC | 	wrlong	result1, local01
255b0     28 20 06 F1 | 	add	local02, #40
255b4     10 FB 61 FC | 	wrlong	result1, local02
255b8     24 22 06 F1 | 	add	local03, #36
255bc     11 FB 61 FC | 	wrlong	result1, local03
255c0                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
255c0                 | '     }
255c0                 | '     buf->st_mode = mode;
255c0                 | '     buf->st_nlink = 1;
255c0                 | '     buf->st_size = finfo.fsize;
255c0                 | '     buf->st_blksize = 512;
255c0                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
255c0                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
255c0                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
255c0                 | '     return r;
255c0     0C 4E 05 F1 | 	add	fp, #12
255c4     A7 FA 01 FB | 	rdlong	result1, fp
255c8     0C 4E 85 F1 | 	sub	fp, #12
255cc                 | LR__3924
255cc     A7 F0 03 F6 | 	mov	ptra, fp
255d0     B2 00 A0 FD | 	call	#popregs_
255d4                 | _fatfs_cc_v_stat_ret
255d4     2D 00 64 FD | 	ret
255d8                 | 
255d8                 | _fatfs_cc_v_read
255d8     00 4A 05 F6 | 	mov	COUNT_, #0
255dc     A8 00 A0 FD | 	call	#pushregs_
255e0     1C F0 07 F1 | 	add	ptra, #28
255e4     04 4E 05 F1 | 	add	fp, #4
255e8     A7 12 62 FC | 	wrlong	arg01, fp
255ec     04 4E 05 F1 | 	add	fp, #4
255f0     A7 14 62 FC | 	wrlong	arg02, fp
255f4     04 4E 05 F1 | 	add	fp, #4
255f8     A7 16 62 FC | 	wrlong	arg03, fp
255fc     08 4E 85 F1 | 	sub	fp, #8
25600     A7 12 02 FB | 	rdlong	arg01, fp
25604     09 13 0A FB | 	rdlong	arg01, arg01 wz
25608     0C 4E 05 F1 | 	add	fp, #12
2560c     A7 12 62 FC | 	wrlong	arg01, fp
25610     10 4E 85 F1 | 	sub	fp, #16
25614                 | '         return _seterror( 5 );
25614     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
25618     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2561c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
25620     01 FA 65 A6 |  if_e	neg	result1, #1
25624     B8 00 90 AD |  if_e	jmp	#LR__3932
25628     10 4E 05 F1 | 	add	fp, #16
2562c     A7 12 02 FB | 	rdlong	arg01, fp
25630     02 00 00 FF 
25634     14 12 06 F1 | 	add	arg01, ##1044
25638     08 4E 85 F1 | 	sub	fp, #8
2563c     A7 14 02 FB | 	rdlong	arg02, fp
25640     04 4E 05 F1 | 	add	fp, #4
25644     A7 16 02 FB | 	rdlong	arg03, fp
25648     0C 4E 05 F1 | 	add	fp, #12
2564c     A7 18 02 F6 | 	mov	arg04, fp
25650     18 4E 85 F1 | 	sub	fp, #24
25654     C4 CE BF FD | 	call	#_fatfs_cc_f_read
25658     14 4E 05 F1 | 	add	fp, #20
2565c     A7 FA 61 FC | 	wrlong	result1, fp
25660     14 4E 85 F1 | 	sub	fp, #20
25664     00 FA 0D F2 | 	cmp	result1, #0 wz
25668     34 00 90 AD |  if_e	jmp	#LR__3930
2566c     04 4E 05 F1 | 	add	fp, #4
25670     A7 18 02 FB | 	rdlong	arg04, fp
25674     0C 17 02 F6 | 	mov	arg03, arg04
25678     08 18 06 F1 | 	add	arg04, #8
2567c     0C 19 02 FB | 	rdlong	arg04, arg04
25680     20 18 46 F5 | 	or	arg04, #32
25684     08 16 06 F1 | 	add	arg03, #8
25688     0B 19 62 FC | 	wrlong	arg04, arg03
2568c                 | '         fil->state |=  (0x20) ;
2568c                 | '         return _set_dos_error(r);
2568c     10 4E 05 F1 | 	add	fp, #16
25690     A7 12 02 FB | 	rdlong	arg01, fp
25694     14 4E 85 F1 | 	sub	fp, #20
25698     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0805
2569c     40 00 90 FD | 	jmp	#LR__3932
256a0                 | LR__3930
256a0     18 4E 05 F1 | 	add	fp, #24
256a4     A7 FA 09 FB | 	rdlong	result1, fp wz
256a8     18 4E 85 F1 | 	sub	fp, #24
256ac     24 00 90 5D |  if_ne	jmp	#LR__3931
256b0     04 4E 05 F1 | 	add	fp, #4
256b4     A7 FA 01 FB | 	rdlong	result1, fp
256b8     FD 18 02 F6 | 	mov	arg04, result1
256bc     04 4E 85 F1 | 	sub	fp, #4
256c0     08 FA 05 F1 | 	add	result1, #8
256c4     FD FA 01 FB | 	rdlong	result1, result1
256c8     10 FA 45 F5 | 	or	result1, #16
256cc     08 18 06 F1 | 	add	arg04, #8
256d0     0C FB 61 FC | 	wrlong	result1, arg04
256d4                 | LR__3931
256d4                 | '         fil->state |=  (0x10) ;
256d4                 | '     }
256d4                 | '     return x;
256d4     18 4E 05 F1 | 	add	fp, #24
256d8     A7 FA 01 FB | 	rdlong	result1, fp
256dc     18 4E 85 F1 | 	sub	fp, #24
256e0                 | LR__3932
256e0     A7 F0 03 F6 | 	mov	ptra, fp
256e4     B2 00 A0 FD | 	call	#popregs_
256e8                 | _fatfs_cc_v_read_ret
256e8     2D 00 64 FD | 	ret
256ec                 | 
256ec                 | _fatfs_cc_v_write
256ec     00 4A 05 F6 | 	mov	COUNT_, #0
256f0     A8 00 A0 FD | 	call	#pushregs_
256f4     1C F0 07 F1 | 	add	ptra, #28
256f8     04 4E 05 F1 | 	add	fp, #4
256fc     A7 12 62 FC | 	wrlong	arg01, fp
25700     04 4E 05 F1 | 	add	fp, #4
25704     A7 14 62 FC | 	wrlong	arg02, fp
25708     04 4E 05 F1 | 	add	fp, #4
2570c     A7 16 62 FC | 	wrlong	arg03, fp
25710     08 4E 85 F1 | 	sub	fp, #8
25714     A7 12 02 FB | 	rdlong	arg01, fp
25718     09 13 0A FB | 	rdlong	arg01, arg01 wz
2571c     0C 4E 05 F1 | 	add	fp, #12
25720     A7 12 62 FC | 	wrlong	arg01, fp
25724     10 4E 85 F1 | 	sub	fp, #16
25728                 | '         return _seterror( 5 );
25728     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
2572c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
25730     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
25734     01 FA 65 A6 |  if_e	neg	result1, #1
25738     84 00 90 AD |  if_e	jmp	#LR__3941
2573c     10 4E 05 F1 | 	add	fp, #16
25740     A7 12 02 FB | 	rdlong	arg01, fp
25744     02 00 00 FF 
25748     14 12 06 F1 | 	add	arg01, ##1044
2574c     08 4E 85 F1 | 	sub	fp, #8
25750     A7 14 02 FB | 	rdlong	arg02, fp
25754     04 4E 05 F1 | 	add	fp, #4
25758     A7 16 02 FB | 	rdlong	arg03, fp
2575c     0C 4E 05 F1 | 	add	fp, #12
25760     A7 18 02 F6 | 	mov	arg04, fp
25764     18 4E 85 F1 | 	sub	fp, #24
25768     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2576c     14 4E 05 F1 | 	add	fp, #20
25770     A7 FA 61 FC | 	wrlong	result1, fp
25774     14 4E 85 F1 | 	sub	fp, #20
25778     00 FA 0D F2 | 	cmp	result1, #0 wz
2577c     34 00 90 AD |  if_e	jmp	#LR__3940
25780     04 4E 05 F1 | 	add	fp, #4
25784     A7 18 02 FB | 	rdlong	arg04, fp
25788     0C 17 02 F6 | 	mov	arg03, arg04
2578c     08 18 06 F1 | 	add	arg04, #8
25790     0C 19 02 FB | 	rdlong	arg04, arg04
25794     20 18 46 F5 | 	or	arg04, #32
25798     08 16 06 F1 | 	add	arg03, #8
2579c     0B 19 62 FC | 	wrlong	arg04, arg03
257a0                 | '         fil->state |=  (0x20) ;
257a0                 | '         return _set_dos_error(r);
257a0     10 4E 05 F1 | 	add	fp, #16
257a4     A7 12 02 FB | 	rdlong	arg01, fp
257a8     14 4E 85 F1 | 	sub	fp, #20
257ac     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0805
257b0     0C 00 90 FD | 	jmp	#LR__3941
257b4                 | LR__3940
257b4                 | '     }
257b4                 | '     return x;
257b4     18 4E 05 F1 | 	add	fp, #24
257b8     A7 FA 01 FB | 	rdlong	result1, fp
257bc     18 4E 85 F1 | 	sub	fp, #24
257c0                 | LR__3941
257c0     A7 F0 03 F6 | 	mov	ptra, fp
257c4     B2 00 A0 FD | 	call	#popregs_
257c8                 | _fatfs_cc_v_write_ret
257c8     2D 00 64 FD | 	ret
257cc                 | 
257cc                 | _fatfs_cc_v_lseek
257cc     04 4A 05 F6 | 	mov	COUNT_, #4
257d0     A8 00 A0 FD | 	call	#pushregs_
257d4     0A 1F 02 F6 | 	mov	local01, arg02
257d8     0B 21 02 F6 | 	mov	local02, arg03
257dc     09 23 02 FB | 	rdlong	local03, arg01
257e0     02 00 00 FF 
257e4     14 22 0E F1 | 	add	local03, ##1044 wz
257e8                 | '         return _seterror( 5 );
257e8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
257ec     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
257f0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
257f4     01 FA 65 A6 |  if_e	neg	result1, #1
257f8     4C 00 90 AD |  if_e	jmp	#LR__3952
257fc     00 20 0E F2 | 	cmp	local02, #0 wz
25800     24 00 90 AD |  if_e	jmp	#LR__3950
25804     01 20 0E F2 | 	cmp	local02, #1 wz
25808     14 22 06 A1 |  if_e	add	local03, #20
2580c     11 25 02 AB |  if_e	rdlong	local04, local03
25810     14 22 86 A1 |  if_e	sub	local03, #20
25814     12 1F 02 A1 |  if_e	add	local01, local04
25818     0C 22 06 51 |  if_ne	add	local03, #12
2581c     11 25 02 5B |  if_ne	rdlong	local04, local03
25820     0C 22 86 51 |  if_ne	sub	local03, #12
25824     12 1F 02 51 |  if_ne	add	local01, local04
25828                 | LR__3950
25828     0F 15 02 F6 | 	mov	arg02, local01
2582c     11 13 02 F6 | 	mov	arg01, local03
25830     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
25834     FD 12 0A F6 | 	mov	arg01, result1 wz
25838     08 00 90 AD |  if_e	jmp	#LR__3951
2583c                 | '         return _set_dos_error(result);
2583c     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0805
25840     04 00 90 FD | 	jmp	#LR__3952
25844                 | LR__3951
25844                 | '     }
25844                 | '     return offset;
25844     0F FB 01 F6 | 	mov	result1, local01
25848                 | LR__3952
25848     A7 F0 03 F6 | 	mov	ptra, fp
2584c     B2 00 A0 FD | 	call	#popregs_
25850                 | _fatfs_cc_v_lseek_ret
25850     2D 00 64 FD | 	ret
25854                 | 
25854                 | _fatfs_cc_v_ioctl
25854                 | ' {
25854                 | '     return _seterror( 10 );
25854     20 E8 05 F1 | 	add	ptr___system__dat__, #32
25858     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
2585c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
25860     01 FA 65 F6 | 	neg	result1, #1
25864                 | _fatfs_cc_v_ioctl_ret
25864     2D 00 64 FD | 	ret
25868                 | 
25868                 | _fatfs_cc_v_mkdir
25868     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2586c     FD 12 02 F6 | 	mov	arg01, result1
25870                 | ' 
25870                 | '     r = f_mkdir(name);
25870                 | '     return _set_dos_error(r);
25870     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0805
25874                 | _fatfs_cc_v_mkdir_ret
25874     2D 00 64 FD | 	ret
25878                 | 
25878                 | _fatfs_cc_v_remove
25878     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2587c     FD 12 02 F6 | 	mov	arg01, result1
25880                 | ' 
25880                 | '     r = f_unlink(name);
25880                 | '     return _set_dos_error(r);
25880     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0805
25884                 | _fatfs_cc_v_remove_ret
25884     2D 00 64 FD | 	ret
25888                 | 
25888                 | _fatfs_cc_v_rmdir
25888     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2588c     FD 12 02 F6 | 	mov	arg01, result1
25890                 | ' 
25890                 | '     r = f_unlink(name);
25890                 | '     return _set_dos_error(r);
25890     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0805
25894                 | _fatfs_cc_v_rmdir_ret
25894     2D 00 64 FD | 	ret
25898                 | 
25898                 | _fatfs_cc_v_rename
25898     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2589c     FD 12 02 F6 | 	mov	arg01, result1
258a0                 | '     return _set_dos_error(r);
258a0     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0805
258a4                 | _fatfs_cc_v_rename_ret
258a4     2D 00 64 FD | 	ret
258a8                 | 
258a8                 | _fatfs_cc_v_open
258a8     07 4A 05 F6 | 	mov	COUNT_, #7
258ac     A8 00 A0 FD | 	call	#pushregs_
258b0     09 1F 02 F6 | 	mov	local01, arg01
258b4     0A 21 02 F6 | 	mov	local02, arg02
258b8     0B 23 02 F6 | 	mov	local03, arg03
258bc     03 00 00 FF 
258c0     3C 12 06 F6 | 	mov	arg01, ##1596
258c4                 | '     return _gc_alloc(size);
258c4     10 14 06 F6 | 	mov	arg02, #16
258c8     88 59 BF FD | 	call	#__system___gc_doalloc
258cc     FD 24 0A F6 | 	mov	local04, result1 wz
258d0                 | '       return _seterror( 7 );
258d0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
258d4     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
258d8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
258dc     01 FA 65 A6 |  if_e	neg	result1, #1
258e0     98 00 90 AD |  if_e	jmp	#LR__3966
258e4     12 13 02 F6 | 	mov	arg01, local04
258e8     00 14 06 F6 | 	mov	arg02, #0
258ec     03 00 00 FF 
258f0     3C 16 06 F6 | 	mov	arg03, ##1596
258f4     98 00 A0 FD | 	call	#\builtin_bytefill_
258f8                 | '   switch (flags & 3) {
258f8     11 27 02 F6 | 	mov	local05, local03
258fc     03 26 0E F5 | 	and	local05, #3 wz
25900     0C 00 90 AD |  if_e	jmp	#LR__3960
25904     01 26 0E F2 | 	cmp	local05, #1 wz
25908     0C 00 90 AD |  if_e	jmp	#LR__3961
2590c     10 00 90 FD | 	jmp	#LR__3962
25910                 | LR__3960
25910     01 28 06 F6 | 	mov	local06, #1
25914                 | '       fs_flags =  0x01 ;
25914                 | '       break;
25914     0C 00 90 FD | 	jmp	#LR__3963
25918                 | LR__3961
25918     02 28 06 F6 | 	mov	local06, #2
2591c                 | '       fs_flags =  0x02 ;
2591c                 | '       break;
2591c     04 00 90 FD | 	jmp	#LR__3963
25920                 | LR__3962
25920     03 28 06 F6 | 	mov	local06, #3
25924                 | '       fs_flags =  0x01  |  0x02 ;
25924                 | '       break;
25924                 | LR__3963
25924     08 22 CE F7 | 	test	local03, #8 wz
25928     18 28 46 55 |  if_ne	or	local06, #24
2592c     08 00 90 5D |  if_ne	jmp	#LR__3964
25930     20 22 CE F7 | 	test	local03, #32 wz
25934     30 28 46 55 |  if_ne	or	local06, #48
25938                 | LR__3964
25938     02 00 00 FF 
2593c     14 24 06 F1 | 	add	local04, ##1044
25940     12 13 02 F6 | 	mov	arg01, local04
25944     02 00 00 FF 
25948     14 24 86 F1 | 	sub	local04, ##1044
2594c     10 15 02 F6 | 	mov	arg02, local02
25950     14 17 02 F6 | 	mov	arg03, local06
25954     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
25958     FD 2A 0A F6 | 	mov	local07, result1 wz
2595c     14 00 90 AD |  if_e	jmp	#LR__3965
25960     12 13 02 F6 | 	mov	arg01, local04
25964                 | '     return _gc_free(ptr);
25964     F8 59 BF FD | 	call	#__system___gc_free
25968                 | '     free(f);
25968                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
25968                 | '     return _set_dos_error(r);
25968     15 13 02 F6 | 	mov	arg01, local07
2596c     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0805
25970     08 00 90 FD | 	jmp	#LR__3966
25974                 | LR__3965
25974     0F 25 62 FC | 	wrlong	local04, local01
25978                 | '   }
25978                 | '   fil->vfsdata = f;
25978                 | '   return 0;
25978     00 FA 05 F6 | 	mov	result1, #0
2597c                 | LR__3966
2597c     A7 F0 03 F6 | 	mov	ptra, fp
25980     B2 00 A0 FD | 	call	#popregs_
25984                 | _fatfs_cc_v_open_ret
25984     2D 00 64 FD | 	ret
25988                 | 
25988                 | _fatfs_cc_v_flush
25988     09 13 02 FB | 	rdlong	arg01, arg01
2598c     02 00 00 FF 
25990     14 12 0E F1 | 	add	arg01, ##1044 wz
25994                 | '         return _seterror( 5 );
25994     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
25998     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2599c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
259a0     01 FA 65 A6 |  if_e	neg	result1, #1
259a4     0C 00 90 AD |  if_e	jmp	#LR__3970
259a8     00 DA BF FD | 	call	#_fatfs_cc_f_sync
259ac     FD 12 02 F6 | 	mov	arg01, result1
259b0                 | '     }
259b0                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
259b0                 | '     result = f_sync(f);
259b0                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
259b0                 | '     return _set_dos_error(result);
259b0     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0805
259b4                 | LR__3970
259b4                 | _fatfs_cc_v_flush_ret
259b4     2D 00 64 FD | 	ret
259b8                 | 
259b8                 | _fatfs_cc_v_init
259b8                 | ' {
259b8                 | '     return 0;
259b8     00 FA 05 F6 | 	mov	result1, #0
259bc                 | _fatfs_cc_v_init_ret
259bc     2D 00 64 FD | 	ret
259c0                 | 
259c0                 | _fatfs_cc_v_deinit
259c0     34 01 00 FF 
259c4     30 15 06 F6 | 	mov	arg02, ##@LR__4166
259c8     00 12 06 F6 | 	mov	arg01, #0
259cc     00 16 06 F6 | 	mov	arg03, #0
259d0     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
259d4     01 00 00 FF 
259d8     08 E4 05 F1 | 	add	objptr, ##520
259dc     F2 12 02 FB | 	rdlong	arg01, objptr
259e0     04 E4 05 F1 | 	add	objptr, #4
259e4     F2 14 02 FB | 	rdlong	arg02, objptr
259e8     01 00 00 FF 
259ec     0C E4 85 F1 | 	sub	objptr, ##524
259f0     20 44 BF FD | 	call	#__system___freepins
259f4                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
259f4                 | '     _freepins(f_pinmask);
259f4                 | '     return 0;
259f4     00 FA 05 F6 | 	mov	result1, #0
259f8                 | _fatfs_cc_v_deinit_ret
259f8     2D 00 64 FD | 	ret
259fc                 | 
259fc                 | _fatfs_cc_get_vfs
259fc     01 4A 05 F6 | 	mov	COUNT_, #1
25a00     A8 00 A0 FD | 	call	#pushregs_
25a04     09 1F 02 F6 | 	mov	local01, arg01
25a08     50 12 06 F6 | 	mov	arg01, #80
25a0c     14 58 BF FD | 	call	#__system___gc_alloc_managed
25a10     FD 12 02 F6 | 	mov	arg01, result1
25a14     F2 FA 01 F6 | 	mov	result1, objptr
25a18     00 30 03 FF 
25a1c     00 FA 45 F5 | 	or	result1, ##106954752
25a20     09 FB 61 FC | 	wrlong	result1, arg01
25a24     F2 FA 01 F6 | 	mov	result1, objptr
25a28     00 38 03 FF 
25a2c     00 FA 45 F5 | 	or	result1, ##108003328
25a30     04 12 06 F1 | 	add	arg01, #4
25a34     09 FB 61 FC | 	wrlong	result1, arg01
25a38     F2 FA 01 F6 | 	mov	result1, objptr
25a3c     00 40 03 FF 
25a40     00 FA 45 F5 | 	or	result1, ##109051904
25a44     04 12 06 F1 | 	add	arg01, #4
25a48     09 FB 61 FC | 	wrlong	result1, arg01
25a4c     F2 FA 01 F6 | 	mov	result1, objptr
25a50     00 48 03 FF 
25a54     00 FA 45 F5 | 	or	result1, ##110100480
25a58     04 12 06 F1 | 	add	arg01, #4
25a5c     09 FB 61 FC | 	wrlong	result1, arg01
25a60     F2 FA 01 F6 | 	mov	result1, objptr
25a64     00 50 03 FF 
25a68     00 FA 45 F5 | 	or	result1, ##111149056
25a6c     04 12 06 F1 | 	add	arg01, #4
25a70     09 FB 61 FC | 	wrlong	result1, arg01
25a74     04 12 06 F1 | 	add	arg01, #4
25a78     09 01 68 FC | 	wrlong	#0, arg01
25a7c     04 12 06 F1 | 	add	arg01, #4
25a80     09 1F 62 FC | 	wrlong	local01, arg01
25a84     04 12 06 F1 | 	add	arg01, #4
25a88     09 01 68 FC | 	wrlong	#0, arg01
25a8c     F2 FA 01 F6 | 	mov	result1, objptr
25a90     00 58 03 FF 
25a94     00 FA 45 F5 | 	or	result1, ##112197632
25a98     04 12 06 F1 | 	add	arg01, #4
25a9c     09 FB 61 FC | 	wrlong	result1, arg01
25aa0     F2 FA 01 F6 | 	mov	result1, objptr
25aa4     00 60 03 FF 
25aa8     00 FA 45 F5 | 	or	result1, ##113246208
25aac     04 12 06 F1 | 	add	arg01, #4
25ab0     09 FB 61 FC | 	wrlong	result1, arg01
25ab4     F2 FA 01 F6 | 	mov	result1, objptr
25ab8     00 68 03 FF 
25abc     00 FA 45 F5 | 	or	result1, ##114294784
25ac0     04 12 06 F1 | 	add	arg01, #4
25ac4     09 FB 61 FC | 	wrlong	result1, arg01
25ac8     F2 FA 01 F6 | 	mov	result1, objptr
25acc     00 70 03 FF 
25ad0     00 FA 45 F5 | 	or	result1, ##115343360
25ad4     04 12 06 F1 | 	add	arg01, #4
25ad8     09 FB 61 FC | 	wrlong	result1, arg01
25adc     F2 FA 01 F6 | 	mov	result1, objptr
25ae0     00 78 03 FF 
25ae4     00 FA 45 F5 | 	or	result1, ##116391936
25ae8     04 12 06 F1 | 	add	arg01, #4
25aec     09 FB 61 FC | 	wrlong	result1, arg01
25af0     F2 FA 01 F6 | 	mov	result1, objptr
25af4     58 FA 25 F4 | 	bith	result1, #88
25af8     04 12 06 F1 | 	add	arg01, #4
25afc     09 FB 61 FC | 	wrlong	result1, arg01
25b00     F2 FA 01 F6 | 	mov	result1, objptr
25b04     00 88 03 FF 
25b08     00 FA 45 F5 | 	or	result1, ##118489088
25b0c     04 12 06 F1 | 	add	arg01, #4
25b10     09 FB 61 FC | 	wrlong	result1, arg01
25b14     F2 FA 01 F6 | 	mov	result1, objptr
25b18     00 90 03 FF 
25b1c     00 FA 45 F5 | 	or	result1, ##119537664
25b20     04 12 06 F1 | 	add	arg01, #4
25b24     09 FB 61 FC | 	wrlong	result1, arg01
25b28     F2 FA 01 F6 | 	mov	result1, objptr
25b2c     00 98 03 FF 
25b30     00 FA 45 F5 | 	or	result1, ##120586240
25b34     04 12 06 F1 | 	add	arg01, #4
25b38     09 FB 61 FC | 	wrlong	result1, arg01
25b3c     F2 FA 01 F6 | 	mov	result1, objptr
25b40     00 A0 03 FF 
25b44     00 FA 45 F5 | 	or	result1, ##121634816
25b48     04 12 06 F1 | 	add	arg01, #4
25b4c     09 FB 61 FC | 	wrlong	result1, arg01
25b50     F2 FA 01 F6 | 	mov	result1, objptr
25b54     00 A8 03 FF 
25b58     00 FA 45 F5 | 	or	result1, ##122683392
25b5c     04 12 06 F1 | 	add	arg01, #4
25b60     09 FB 61 FC | 	wrlong	result1, arg01
25b64     F2 FA 01 F6 | 	mov	result1, objptr
25b68     00 B0 03 FF 
25b6c     00 FA 45 F5 | 	or	result1, ##123731968
25b70     04 12 06 F1 | 	add	arg01, #4
25b74     09 FB 61 FC | 	wrlong	result1, arg01
25b78     4C 12 86 F1 | 	sub	arg01, #76
25b7c                 | ' 
25b7c                 | '     v->close = &v_close;
25b7c                 | '     v->read = &v_read;
25b7c                 | '     v->write = &v_write;
25b7c                 | '     v->lseek = &v_lseek;
25b7c                 | '     v->ioctl = &v_ioctl;
25b7c                 | '     v->flush = 0;
25b7c                 | '     v->vfs_data = ptr;
25b7c                 | '     v->reserved = 0;
25b7c                 | ' 
25b7c                 | '     v->open = &v_open;
25b7c                 | '     v->creat = &v_creat;
25b7c                 | '     v->opendir = &v_opendir;
25b7c                 | '     v->closedir = &v_closedir;
25b7c                 | '     v->readdir = &v_readdir;
25b7c                 | '     v->stat = &v_stat;
25b7c                 | ' 
25b7c                 | '     v->mkdir = &v_mkdir;
25b7c                 | '     v->rmdir = &v_rmdir;
25b7c                 | ' 
25b7c                 | '     v->remove = &v_remove;
25b7c                 | '     v->rename = &v_rename;
25b7c                 | ' 
25b7c                 | '     v->init = &v_init;
25b7c                 | '     v->deinit = &v_deinit;
25b7c                 | ' 
25b7c                 | '     return v;
25b7c     09 FB 01 F6 | 	mov	result1, arg01
25b80     A7 F0 03 F6 | 	mov	ptra, fp
25b84     B2 00 A0 FD | 	call	#popregs_
25b88                 | _fatfs_cc_get_vfs_ret
25b88     2D 00 64 FD | 	ret
25b8c                 | 
25b8c                 | _fatfs_cc_xmit_mmc_0952
25b8c     01 00 00 FF 
25b90     10 E4 05 F1 | 	add	objptr, ##528
25b94     F2 00 02 FB | 	rdlong	_var01, objptr
25b98     08 E4 05 F1 | 	add	objptr, #8
25b9c     F2 02 02 FB | 	rdlong	_var02, objptr
25ba0     01 00 00 FF 
25ba4     18 E4 85 F1 | 	sub	objptr, ##536
25ba8     40 02 62 FD | 	dirl	_var02
25bac     28 02 64 FD | 	setq	#1
25bb0     09 05 02 FB | 	rdlong	_var03, arg01
25bb4     69 04 62 FD | 	rev	_var03
25bb8     1B 04 FE F9 | 	movbyts	_var03, #27
25bbc     01 05 22 FC | 	wypin	_var03, _var02
25bc0     0A 05 02 F6 | 	mov	_var03, arg02
25bc4     02 14 4E F0 | 	shr	arg02, #2 wz
25bc8     03 04 66 F0 | 	shl	_var03, #3
25bcc     00 05 22 FC | 	wypin	_var03, _var01
25bd0     41 02 62 FD | 	dirh	_var02
25bd4     08 12 06 F1 | 	add	arg01, #8
25bd8     69 06 62 FD | 	rev	_var04
25bdc     1B 06 FE F9 | 	movbyts	_var04, #27
25be0                 | LR__3980
25be0     01 07 22 5C |  if_ne	wypin	_var04, _var02
25be4     09 07 02 5B |  if_ne	rdlong	_var04, arg01
25be8     04 12 06 51 |  if_ne	add	arg01, #4
25bec     69 06 62 5D |  if_ne	rev	_var04
25bf0     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
25bf4                 | LR__3981
25bf4     40 02 72 5D |  if_ne	testp	_var02 wc
25bf8     F8 FF 9F 1D |  if_a	jmp	#LR__3981
25bfc     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__3980
25c00                 | LR__3982
25c00     40 00 72 FD | 	testp	_var01 wc
25c04     F8 FF 9F 3D |  if_ae	jmp	#LR__3982
25c08     40 02 62 FD | 	dirl	_var02
25c0c     FF FF FF FF 
25c10     01 FF 2B FC | 	wypin	##-1, _var02
25c14     41 02 62 FD | 	dirh	_var02
25c18                 | _fatfs_cc_xmit_mmc_0952_ret
25c18     2D 00 64 FD | 	ret
25c1c                 | 
25c1c                 | _fatfs_cc_rcvr_mmc_0959
25c1c     01 00 00 FF 
25c20     10 E4 05 F1 | 	add	objptr, ##528
25c24     F2 00 02 FB | 	rdlong	_var01, objptr
25c28     0C E4 05 F1 | 	add	objptr, #12
25c2c     F2 02 02 FB | 	rdlong	_var02, objptr
25c30     01 00 00 FF 
25c34     1C E4 85 F1 | 	sub	objptr, ##540
25c38     01 03 08 FC | 	akpin	_var02
25c3c     0A 05 0A F6 | 	mov	_var03, arg02 wz
25c40     02 04 4E F0 | 	shr	_var03, #2 wz
25c44     30 00 90 AD |  if_e	jmp	#LR__3992
25c48     02 07 02 F6 | 	mov	_var04, _var03
25c4c     05 06 66 F0 | 	shl	_var04, #5
25c50     00 07 22 FC | 	wypin	_var04, _var01
25c54     01 7F 18 FC | 	wxpin	#63, _var02
25c58                 | LR__3990
25c58                 | LR__3991
25c58     40 02 72 FD | 	testp	_var02 wc
25c5c     F8 FF 9F 3D |  if_ae	jmp	#LR__3991
25c60     01 07 8A FA | 	rdpin	_var04, _var02
25c64     69 06 62 FD | 	rev	_var04
25c68     1B 06 FE F9 | 	movbyts	_var04, #27
25c6c     09 07 62 FC | 	wrlong	_var04, arg01
25c70     04 12 06 F1 | 	add	arg01, #4
25c74     F8 05 6E FB | 	djnz	_var03, #LR__3990
25c78                 | LR__3992
25c78     03 14 0E F5 | 	and	arg02, #3 wz
25c7c     24 00 90 AD |  if_e	jmp	#LR__3995
25c80     01 4F 18 FC | 	wxpin	#39, _var02
25c84                 | LR__3993
25c84     00 11 28 FC | 	wypin	#8, _var01
25c88                 | LR__3994
25c88     40 02 72 FD | 	testp	_var02 wc
25c8c     F8 FF 9F 3D |  if_ae	jmp	#LR__3994
25c90     01 07 8A FA | 	rdpin	_var04, _var02
25c94     69 06 62 FD | 	rev	_var04
25c98     09 07 42 FC | 	wrbyte	_var04, arg01
25c9c     01 12 06 F1 | 	add	arg01, #1
25ca0     F8 15 6E FB | 	djnz	arg02, #LR__3993
25ca4                 | LR__3995
25ca4                 | _fatfs_cc_rcvr_mmc_0959_ret
25ca4     2D 00 64 FD | 	ret
25ca8                 | 
25ca8                 | _fatfs_cc_wait_ready_0963
25ca8     01 4A 05 F6 | 	mov	COUNT_, #1
25cac     A8 00 A0 FD | 	call	#pushregs_
25cb0     10 F0 07 F1 | 	add	ptra, #16
25cb4     1A FA 61 FD | 	getct	result1
25cb8     08 4E 05 F1 | 	add	fp, #8
25cbc     A7 FA 61 FC | 	wrlong	result1, fp
25cc0     14 1E 06 FB | 	rdlong	local01, #20
25cc4     01 1E 46 F0 | 	shr	local01, #1
25cc8     04 4E 05 F1 | 	add	fp, #4
25ccc     A7 1E 62 FC | 	wrlong	local01, fp
25cd0     0C 4E 85 F1 | 	sub	fp, #12
25cd4                 | ' {
25cd4                 | ' 	BYTE d;
25cd4                 | ' 	UINT tmr, tmout;
25cd4                 | ' 
25cd4                 | ' 	tmr = _cnt();
25cd4                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
25cd4                 | ' 	for(;;) {
25cd4                 | LR__4000
25cd4     04 4E 05 F1 | 	add	fp, #4
25cd8     A7 12 02 F6 | 	mov	arg01, fp
25cdc     04 4E 85 F1 | 	sub	fp, #4
25ce0     01 14 06 F6 | 	mov	arg02, #1
25ce4     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0959
25ce8     04 4E 05 F1 | 	add	fp, #4
25cec     A7 1E C2 FA | 	rdbyte	local01, fp
25cf0     04 4E 85 F1 | 	sub	fp, #4
25cf4     FF 1E 0E F2 | 	cmp	local01, #255 wz
25cf8     01 FA 05 A6 |  if_e	mov	result1, #1
25cfc     28 00 90 AD |  if_e	jmp	#LR__4001
25d00     1A FA 61 FD | 	getct	result1
25d04     08 4E 05 F1 | 	add	fp, #8
25d08     A7 1E 02 FB | 	rdlong	local01, fp
25d0c     0F FB 81 F1 | 	sub	result1, local01
25d10     04 4E 05 F1 | 	add	fp, #4
25d14     A7 1E 02 FB | 	rdlong	local01, fp
25d18     0C 4E 85 F1 | 	sub	fp, #12
25d1c     0F FB 11 F2 | 	cmp	result1, local01 wc
25d20     00 FA 05 36 |  if_ae	mov	result1, #0
25d24     AC FF 9F CD |  if_b	jmp	#LR__4000
25d28                 | LR__4001
25d28     A7 F0 03 F6 | 	mov	ptra, fp
25d2c     B2 00 A0 FD | 	call	#popregs_
25d30                 | _fatfs_cc_wait_ready_0963_ret
25d30     2D 00 64 FD | 	ret
25d34                 | 
25d34                 | _fatfs_cc_deselect_0969
25d34     00 4A 05 F6 | 	mov	COUNT_, #0
25d38     A8 00 A0 FD | 	call	#pushregs_
25d3c     14 F0 07 F1 | 	add	ptra, #20
25d40     01 00 00 FF 
25d44     14 E4 05 F1 | 	add	objptr, ##532
25d48     F2 14 02 FB | 	rdlong	arg02, objptr
25d4c     04 4E 05 F1 | 	add	fp, #4
25d50     A7 14 62 FC | 	wrlong	arg02, fp
25d54     04 E4 85 F1 | 	sub	objptr, #4
25d58     F2 14 02 FB | 	rdlong	arg02, objptr
25d5c     04 4E 05 F1 | 	add	fp, #4
25d60     A7 14 62 FC | 	wrlong	arg02, fp
25d64     08 E4 05 F1 | 	add	objptr, #8
25d68     F2 14 02 FB | 	rdlong	arg02, objptr
25d6c     04 4E 05 F1 | 	add	fp, #4
25d70     A7 14 62 FC | 	wrlong	arg02, fp
25d74     04 E4 05 F1 | 	add	objptr, #4
25d78     F2 14 02 FB | 	rdlong	arg02, objptr
25d7c     01 00 00 FF 
25d80     1C E4 85 F1 | 	sub	objptr, ##540
25d84     04 4E 05 F1 | 	add	fp, #4
25d88     A7 14 62 FC | 	wrlong	arg02, fp
25d8c     0C 4E 85 F1 | 	sub	fp, #12
25d90     A7 12 02 FB | 	rdlong	arg01, fp
25d94     04 4E 85 F1 | 	sub	fp, #4
25d98     59 12 62 FD | 	drvh	arg01
25d9c     1F 20 64 FD | 	waitx	#16
25da0     A7 12 02 F6 | 	mov	arg01, fp
25da4     01 14 06 F6 | 	mov	arg02, #1
25da8     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0959
25dac     A7 F0 03 F6 | 	mov	ptra, fp
25db0     B2 00 A0 FD | 	call	#popregs_
25db4                 | _fatfs_cc_deselect_0969_ret
25db4     2D 00 64 FD | 	ret
25db8                 | 
25db8                 | _fatfs_cc_select_0973
25db8     00 4A 05 F6 | 	mov	COUNT_, #0
25dbc     A8 00 A0 FD | 	call	#pushregs_
25dc0     10 F0 07 F1 | 	add	ptra, #16
25dc4     01 00 00 FF 
25dc8     14 E4 05 F1 | 	add	objptr, ##532
25dcc     F2 14 02 FB | 	rdlong	arg02, objptr
25dd0     08 4E 05 F1 | 	add	fp, #8
25dd4     A7 14 62 FC | 	wrlong	arg02, fp
25dd8     08 E4 05 F1 | 	add	objptr, #8
25ddc     F2 12 02 FB | 	rdlong	arg01, objptr
25de0     01 00 00 FF 
25de4     1C E4 85 F1 | 	sub	objptr, ##540
25de8     04 4E 05 F1 | 	add	fp, #4
25dec     A7 12 62 FC | 	wrlong	arg01, fp
25df0     50 12 62 FD | 	fltl	arg01
25df4     04 4E 85 F1 | 	sub	fp, #4
25df8     A7 12 02 FB | 	rdlong	arg01, fp
25dfc     58 12 62 FD | 	drvl	arg01
25e00     1F 20 64 FD | 	waitx	#16
25e04     04 4E 05 F1 | 	add	fp, #4
25e08     A7 12 02 FB | 	rdlong	arg01, fp
25e0c     41 12 62 FD | 	dirh	arg01
25e10     08 4E 85 F1 | 	sub	fp, #8
25e14     A7 12 02 F6 | 	mov	arg01, fp
25e18     04 4E 85 F1 | 	sub	fp, #4
25e1c     01 14 06 F6 | 	mov	arg02, #1
25e20     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0959
25e24     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_0963
25e28     00 FA 0D F2 | 	cmp	result1, #0 wz
25e2c     01 FA 05 56 |  if_ne	mov	result1, #1
25e30     08 00 90 5D |  if_ne	jmp	#LR__4010
25e34     FC FE BF FD | 	call	#_fatfs_cc_deselect_0969
25e38                 | ' 
25e38                 | ' 	deselect();
25e38                 | ' 	return 0;
25e38     00 FA 05 F6 | 	mov	result1, #0
25e3c                 | LR__4010
25e3c     A7 F0 03 F6 | 	mov	ptra, fp
25e40     B2 00 A0 FD | 	call	#popregs_
25e44                 | _fatfs_cc_select_0973_ret
25e44     2D 00 64 FD | 	ret
25e48                 | 
25e48                 | _fatfs_cc_rcvr_datablock_0977
25e48     01 4A 05 F6 | 	mov	COUNT_, #1
25e4c     A8 00 A0 FD | 	call	#pushregs_
25e50     18 F0 07 F1 | 	add	ptra, #24
25e54     04 4E 05 F1 | 	add	fp, #4
25e58     A7 12 62 FC | 	wrlong	arg01, fp
25e5c     04 4E 05 F1 | 	add	fp, #4
25e60     A7 14 62 FC | 	wrlong	arg02, fp
25e64     1A FA 61 FD | 	getct	result1
25e68     08 4E 05 F1 | 	add	fp, #8
25e6c     A7 FA 61 FC | 	wrlong	result1, fp
25e70     14 1E 06 FB | 	rdlong	local01, #20
25e74     03 1E 46 F0 | 	shr	local01, #3
25e78     04 4E 05 F1 | 	add	fp, #4
25e7c     A7 1E 62 FC | 	wrlong	local01, fp
25e80     14 4E 85 F1 | 	sub	fp, #20
25e84                 | ' 	BYTE *buff,
25e84                 | ' 	UINT btr
25e84                 | ' )
25e84                 | ' {
25e84                 | ' 	BYTE d[2];
25e84                 | ' 	UINT tmr, tmout;
25e84                 | ' 
25e84                 | ' 	tmr = _cnt();
25e84                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
25e84                 | ' 	for(;;) {
25e84                 | LR__4020
25e84     0C 4E 05 F1 | 	add	fp, #12
25e88     A7 12 02 F6 | 	mov	arg01, fp
25e8c     0C 4E 85 F1 | 	sub	fp, #12
25e90     01 14 06 F6 | 	mov	arg02, #1
25e94     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0959
25e98     0C 4E 05 F1 | 	add	fp, #12
25e9c     A7 1E C2 FA | 	rdbyte	local01, fp
25ea0     0C 4E 85 F1 | 	sub	fp, #12
25ea4     FF 1E 0E F2 | 	cmp	local01, #255 wz
25ea8     28 00 90 5D |  if_ne	jmp	#LR__4021
25eac     1A FA 61 FD | 	getct	result1
25eb0     FD 1E 02 F6 | 	mov	local01, result1
25eb4     10 4E 05 F1 | 	add	fp, #16
25eb8     A7 14 02 FB | 	rdlong	arg02, fp
25ebc     0A 1F 82 F1 | 	sub	local01, arg02
25ec0     04 4E 05 F1 | 	add	fp, #4
25ec4     A7 14 02 FB | 	rdlong	arg02, fp
25ec8     14 4E 85 F1 | 	sub	fp, #20
25ecc     0A 1F 12 F2 | 	cmp	local01, arg02 wc
25ed0     B0 FF 9F CD |  if_b	jmp	#LR__4020
25ed4                 | LR__4021
25ed4     0C 4E 05 F1 | 	add	fp, #12
25ed8     A7 1E C2 FA | 	rdbyte	local01, fp
25edc     0C 4E 85 F1 | 	sub	fp, #12
25ee0     FE 1E 0E F2 | 	cmp	local01, #254 wz
25ee4     00 FA 05 56 |  if_ne	mov	result1, #0
25ee8     30 00 90 5D |  if_ne	jmp	#LR__4022
25eec     04 4E 05 F1 | 	add	fp, #4
25ef0     A7 12 02 FB | 	rdlong	arg01, fp
25ef4     04 4E 05 F1 | 	add	fp, #4
25ef8     A7 14 02 FB | 	rdlong	arg02, fp
25efc     08 4E 85 F1 | 	sub	fp, #8
25f00     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0959
25f04     0C 4E 05 F1 | 	add	fp, #12
25f08     A7 12 02 F6 | 	mov	arg01, fp
25f0c     0C 4E 85 F1 | 	sub	fp, #12
25f10     02 14 06 F6 | 	mov	arg02, #2
25f14     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0959
25f18                 | ' 
25f18                 | ' 	rcvr_mmc(buff, btr);
25f18                 | ' 	rcvr_mmc(d, 2);
25f18                 | ' 
25f18                 | ' 	return 1;
25f18     01 FA 05 F6 | 	mov	result1, #1
25f1c                 | LR__4022
25f1c     A7 F0 03 F6 | 	mov	ptra, fp
25f20     B2 00 A0 FD | 	call	#popregs_
25f24                 | _fatfs_cc_rcvr_datablock_0977_ret
25f24     2D 00 64 FD | 	ret
25f28                 | 
25f28                 | _fatfs_cc_xmit_datablock_0979
25f28     00 4A 05 F6 | 	mov	COUNT_, #0
25f2c     A8 00 A0 FD | 	call	#pushregs_
25f30     10 F0 07 F1 | 	add	ptra, #16
25f34     04 4E 05 F1 | 	add	fp, #4
25f38     A7 12 62 FC | 	wrlong	arg01, fp
25f3c     04 4E 05 F1 | 	add	fp, #4
25f40     A7 14 42 FC | 	wrbyte	arg02, fp
25f44     08 4E 85 F1 | 	sub	fp, #8
25f48     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_0963
25f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
25f50     00 FA 05 A6 |  if_e	mov	result1, #0
25f54     90 00 90 AD |  if_e	jmp	#LR__4031
25f58     08 4E 05 F1 | 	add	fp, #8
25f5c     A7 14 C2 FA | 	rdbyte	arg02, fp
25f60     04 4E 05 F1 | 	add	fp, #4
25f64     A7 14 42 FC | 	wrbyte	arg02, fp
25f68     A7 12 02 F6 | 	mov	arg01, fp
25f6c     0C 4E 85 F1 | 	sub	fp, #12
25f70     01 14 06 F6 | 	mov	arg02, #1
25f74     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0952
25f78     08 4E 05 F1 | 	add	fp, #8
25f7c     A7 14 C2 FA | 	rdbyte	arg02, fp
25f80     08 4E 85 F1 | 	sub	fp, #8
25f84     FD 14 0E F2 | 	cmp	arg02, #253 wz
25f88     58 00 90 AD |  if_e	jmp	#LR__4030
25f8c     04 4E 05 F1 | 	add	fp, #4
25f90     A7 12 02 FB | 	rdlong	arg01, fp
25f94     04 4E 85 F1 | 	sub	fp, #4
25f98     09 14 C6 F9 | 	decod	arg02, #9
25f9c     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0952
25fa0     0C 4E 05 F1 | 	add	fp, #12
25fa4     A7 12 02 F6 | 	mov	arg01, fp
25fa8     0C 4E 85 F1 | 	sub	fp, #12
25fac     02 14 06 F6 | 	mov	arg02, #2
25fb0     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0959
25fb4     0C 4E 05 F1 | 	add	fp, #12
25fb8     A7 12 02 F6 | 	mov	arg01, fp
25fbc     0C 4E 85 F1 | 	sub	fp, #12
25fc0     01 14 06 F6 | 	mov	arg02, #1
25fc4     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0959
25fc8     0C 4E 05 F1 | 	add	fp, #12
25fcc     A7 14 C2 FA | 	rdbyte	arg02, fp
25fd0     0C 4E 85 F1 | 	sub	fp, #12
25fd4     1F 14 06 F5 | 	and	arg02, #31
25fd8     05 14 0E F2 | 	cmp	arg02, #5 wz
25fdc                 | ' 			return 0;
25fdc     00 FA 05 56 |  if_ne	mov	result1, #0
25fe0     04 00 90 5D |  if_ne	jmp	#LR__4031
25fe4                 | LR__4030
25fe4                 | ' 	}
25fe4                 | ' 
25fe4                 | ' 	return 1;
25fe4     01 FA 05 F6 | 	mov	result1, #1
25fe8                 | LR__4031
25fe8     A7 F0 03 F6 | 	mov	ptra, fp
25fec     B2 00 A0 FD | 	call	#popregs_
25ff0                 | _fatfs_cc_xmit_datablock_0979_ret
25ff0     2D 00 64 FD | 	ret
25ff4                 | 
25ff4                 | _fatfs_cc_send_cmd_0983
25ff4     01 4A 05 F6 | 	mov	COUNT_, #1
25ff8     A8 00 A0 FD | 	call	#pushregs_
25ffc     1C F0 07 F1 | 	add	ptra, #28
26000                 | _fatfs_cc_send_cmd_0983_enter
26000     04 4E 05 F1 | 	add	fp, #4
26004     A7 12 42 FC | 	wrbyte	arg01, fp
26008     04 4E 05 F1 | 	add	fp, #4
2600c     A7 14 62 FC | 	wrlong	arg02, fp
26010     04 4E 85 F1 | 	sub	fp, #4
26014     A7 FA C1 FA | 	rdbyte	result1, fp
26018     04 4E 85 F1 | 	sub	fp, #4
2601c     80 FA CD F7 | 	test	result1, #128 wz
26020     44 00 90 AD |  if_e	jmp	#LR__4040
26024     04 4E 05 F1 | 	add	fp, #4
26028     A7 14 C2 FA | 	rdbyte	arg02, fp
2602c     7F 14 06 F5 | 	and	arg02, #127
26030     A7 14 42 FC | 	wrbyte	arg02, fp
26034     04 4E 85 F1 | 	sub	fp, #4
26038     37 12 06 F6 | 	mov	arg01, #55
2603c     00 14 06 F6 | 	mov	arg02, #0
26040     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_0983
26044     0C 4E 05 F1 | 	add	fp, #12
26048     A7 FA 41 FC | 	wrbyte	result1, fp
2604c     A7 14 C2 FA | 	rdbyte	arg02, fp
26050     0C 4E 85 F1 | 	sub	fp, #12
26054     02 14 16 F2 | 	cmp	arg02, #2 wc
26058     0C 4E 05 31 |  if_ae	add	fp, #12
2605c     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
26060     0C 4E 85 31 |  if_ae	sub	fp, #12
26064     6C 01 90 3D |  if_ae	jmp	#LR__4044
26068                 | LR__4040
26068     04 4E 05 F1 | 	add	fp, #4
2606c     A7 14 C2 FA | 	rdbyte	arg02, fp
26070     04 4E 85 F1 | 	sub	fp, #4
26074     0C 14 0E F2 | 	cmp	arg02, #12 wz
26078     14 00 90 AD |  if_e	jmp	#LR__4041
2607c     B4 FC BF FD | 	call	#_fatfs_cc_deselect_0969
26080     34 FD BF FD | 	call	#_fatfs_cc_select_0973
26084     00 FA 0D F2 | 	cmp	result1, #0 wz
26088     FF FA 05 A6 |  if_e	mov	result1, #255
2608c     44 01 90 AD |  if_e	jmp	#LR__4044
26090                 | LR__4041
26090     04 4E 05 F1 | 	add	fp, #4
26094     A7 14 C2 FA | 	rdbyte	arg02, fp
26098     40 FA 05 F6 | 	mov	result1, #64
2609c     0A FB 41 F5 | 	or	result1, arg02
260a0     10 4E 05 F1 | 	add	fp, #16
260a4     A7 FA 41 FC | 	wrbyte	result1, fp
260a8     0C 4E 85 F1 | 	sub	fp, #12
260ac     A7 FA 01 FB | 	rdlong	result1, fp
260b0     18 FA 45 F0 | 	shr	result1, #24
260b4     0D 4E 05 F1 | 	add	fp, #13
260b8     A7 FA 41 FC | 	wrbyte	result1, fp
260bc     0D 4E 85 F1 | 	sub	fp, #13
260c0     A7 FA 01 FB | 	rdlong	result1, fp
260c4     10 FA 45 F0 | 	shr	result1, #16
260c8     0E 4E 05 F1 | 	add	fp, #14
260cc     A7 FA 41 FC | 	wrbyte	result1, fp
260d0     0E 4E 85 F1 | 	sub	fp, #14
260d4     A7 FA 01 FB | 	rdlong	result1, fp
260d8     08 FA 45 F0 | 	shr	result1, #8
260dc     0F 4E 05 F1 | 	add	fp, #15
260e0     A7 FA 41 FC | 	wrbyte	result1, fp
260e4     0F 4E 85 F1 | 	sub	fp, #15
260e8     A7 FA 01 FB | 	rdlong	result1, fp
260ec     10 4E 05 F1 | 	add	fp, #16
260f0     A7 FA 41 FC | 	wrbyte	result1, fp
260f4     0C 4E 85 F1 | 	sub	fp, #12
260f8     A7 02 48 FC | 	wrbyte	#1, fp
260fc     08 4E 85 F1 | 	sub	fp, #8
26100     A7 FA C9 FA | 	rdbyte	result1, fp wz
26104     04 4E 85 F1 | 	sub	fp, #4
26108     0C 4E 05 A1 |  if_e	add	fp, #12
2610c     A7 2A 49 AC |  if_e	wrbyte	#149, fp
26110     0C 4E 85 A1 |  if_e	sub	fp, #12
26114     04 4E 05 F1 | 	add	fp, #4
26118     A7 FA C1 FA | 	rdbyte	result1, fp
2611c     04 4E 85 F1 | 	sub	fp, #4
26120     08 FA 0D F2 | 	cmp	result1, #8 wz
26124     0C 4E 05 A1 |  if_e	add	fp, #12
26128     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2612c     0C 4E 85 A1 |  if_e	sub	fp, #12
26130     0C 4E 05 F1 | 	add	fp, #12
26134     A7 14 C2 FA | 	rdbyte	arg02, fp
26138     0D 4E 05 F1 | 	add	fp, #13
2613c     A7 14 42 FC | 	wrbyte	arg02, fp
26140     05 4E 85 F1 | 	sub	fp, #5
26144     A7 12 02 F6 | 	mov	arg01, fp
26148     14 4E 85 F1 | 	sub	fp, #20
2614c     06 14 06 F6 | 	mov	arg02, #6
26150     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0952
26154     04 4E 05 F1 | 	add	fp, #4
26158     A7 1E C2 FA | 	rdbyte	local01, fp
2615c     04 4E 85 F1 | 	sub	fp, #4
26160     0C 1E 0E F2 | 	cmp	local01, #12 wz
26164     10 4E 05 A1 |  if_e	add	fp, #16
26168     A7 12 02 A6 |  if_e	mov	arg01, fp
2616c     10 4E 85 A1 |  if_e	sub	fp, #16
26170     01 14 06 A6 |  if_e	mov	arg02, #1
26174     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0959
26178     0C 4E 05 F1 | 	add	fp, #12
2617c     A7 14 48 FC | 	wrbyte	#10, fp
26180     0C 4E 85 F1 | 	sub	fp, #12
26184                 | ' 	n = 10;
26184                 | ' 	do
26184                 | LR__4042
26184     10 4E 05 F1 | 	add	fp, #16
26188     A7 12 02 F6 | 	mov	arg01, fp
2618c     10 4E 85 F1 | 	sub	fp, #16
26190     01 14 06 F6 | 	mov	arg02, #1
26194     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0959
26198     10 4E 05 F1 | 	add	fp, #16
2619c     A7 1E C2 FA | 	rdbyte	local01, fp
261a0     10 4E 85 F1 | 	sub	fp, #16
261a4     80 1E CE F7 | 	test	local01, #128 wz
261a8     1C 00 90 AD |  if_e	jmp	#LR__4043
261ac     0C 4E 05 F1 | 	add	fp, #12
261b0     A7 1E C2 FA | 	rdbyte	local01, fp
261b4     01 1E 86 F1 | 	sub	local01, #1
261b8     A7 1E 42 FC | 	wrbyte	local01, fp
261bc     A7 1E CA FA | 	rdbyte	local01, fp wz
261c0     0C 4E 85 F1 | 	sub	fp, #12
261c4     BC FF 9F 5D |  if_ne	jmp	#LR__4042
261c8                 | LR__4043
261c8                 | ' 
261c8                 | ' 	return d;
261c8     10 4E 05 F1 | 	add	fp, #16
261cc     A7 FA C1 FA | 	rdbyte	result1, fp
261d0     10 4E 85 F1 | 	sub	fp, #16
261d4                 | LR__4044
261d4     A7 F0 03 F6 | 	mov	ptra, fp
261d8     B2 00 A0 FD | 	call	#popregs_
261dc                 | _fatfs_cc_send_cmd_0983_ret
261dc     2D 00 64 FD | 	ret
261e0                 | 
261e0                 | _fatfs_cc_disk_deinitialize
261e0     03 4A 05 F6 | 	mov	COUNT_, #3
261e4     A8 00 A0 FD | 	call	#pushregs_
261e8     00 12 4E F2 | 	cmps	arg01, #0 wz
261ec     01 00 00 FF 
261f0     14 E4 05 F1 | 	add	objptr, ##532
261f4     F2 12 02 FB | 	rdlong	arg01, objptr
261f8     04 E4 85 F1 | 	sub	objptr, #4
261fc     F2 1E 02 FB | 	rdlong	local01, objptr
26200     08 E4 05 F1 | 	add	objptr, #8
26204     F2 20 02 FB | 	rdlong	local02, objptr
26208     04 E4 05 F1 | 	add	objptr, #4
2620c     F2 22 02 FB | 	rdlong	local03, objptr
26210     01 00 00 FF 
26214     1C E4 85 F1 | 	sub	objptr, ##540
26218                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
26218                 | '         return RES_NOTRDY;
26218     03 FA 05 56 |  if_ne	mov	result1, #3
2621c     2C 00 90 5D |  if_ne	jmp	#LR__4050
26220     50 12 62 FD | 	fltl	arg01
26224     09 01 08 FC | 	wrpin	#0, arg01
26228     50 1E 62 FD | 	fltl	local01
2622c     0F 01 08 FC | 	wrpin	#0, local01
26230     50 20 62 FD | 	fltl	local02
26234     10 01 08 FC | 	wrpin	#0, local02
26238     50 22 62 FD | 	fltl	local03
2623c     11 01 08 FC | 	wrpin	#0, local03
26240     0A 12 06 F6 | 	mov	arg01, #10
26244     04 19 BF FD | 	call	#__system___waitms
26248                 | '     }
26248                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
26248                 | '     _pinclear(PIN_SS);
26248                 | '     _pinclear(PIN_CLK);
26248                 | '     _pinclear(PIN_DI);
26248                 | '     _pinclear(PIN_DO);
26248                 | ' 
26248                 | '     _waitms(10);
26248                 | ' 
26248                 | '     return 0;
26248     00 FA 05 F6 | 	mov	result1, #0
2624c                 | LR__4050
2624c     A7 F0 03 F6 | 	mov	ptra, fp
26250     B2 00 A0 FD | 	call	#popregs_
26254                 | _fatfs_cc_disk_deinitialize_ret
26254     2D 00 64 FD | 	ret
26258                 | 
26258                 | _fatfs_cc_gettimeofday
26258     04 4A 05 F6 | 	mov	COUNT_, #4
2625c     A8 00 A0 FD | 	call	#pushregs_
26260     09 1F 02 F6 | 	mov	local01, arg01
26264     C0 14 BF FD | 	call	#__system___getus
26268     FD 12 02 F6 | 	mov	arg01, result1
2626c     02 00 00 FF 
26270     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
26274     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
26278     09 FB 01 F6 | 	mov	result1, arg01
2627c     10 FB 81 F1 | 	sub	result1, local02
26280     A1 07 00 FF 
26284     40 FA 15 FD | 	qdiv	result1, ##1000000
26288     02 00 00 FF 
2628c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
26290     18 20 62 FD | 	getqx	local02
26294     A1 07 00 FF 
26298     40 FA 15 FD | 	qdiv	result1, ##1000000
2629c     00 20 0E F2 | 	cmp	local02, #0 wz
262a0     19 22 62 FD | 	getqy	local03
262a4     28 00 90 AD |  if_e	jmp	#LR__4060
262a8     02 00 00 FF 
262ac     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
262b0     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
262b4     10 25 02 F1 | 	add	local04, local02
262b8     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
262bc     11 13 82 F1 | 	sub	arg01, local03
262c0     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
262c4     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
262c8     02 00 00 FF 
262cc     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
262d0                 | LR__4060
262d0     02 00 00 FF 
262d4     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
262d8     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
262dc     02 00 00 FF 
262e0     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
262e4     0F 25 62 FC | 	wrlong	local04, local01
262e8     04 1E 06 F1 | 	add	local01, #4
262ec     0F 23 62 FC | 	wrlong	local03, local01
262f0                 | '         lastsec += secs;
262f0                 | '         lastus = now - leftover;
262f0                 | '     }
262f0                 | '     tv->tv_sec = lastsec;
262f0                 | '     tv->tv_usec = leftover;
262f0                 | '     return 0;
262f0     00 FA 05 F6 | 	mov	result1, #0
262f4     A7 F0 03 F6 | 	mov	ptra, fp
262f8     B2 00 A0 FD | 	call	#popregs_
262fc                 | _fatfs_cc_gettimeofday_ret
262fc     2D 00 64 FD | 	ret
26300                 | 
26300                 | _fatfs_cc__is_leap_year
26300     09 FB 51 F6 | 	abs	result1, arg01 wc
26304     03 FA 05 F5 | 	and	result1, #3
26308     FD FA 89 F6 | 	negc	result1, result1 wz
2630c     38 00 90 5D |  if_ne	jmp	#LR__4071
26310     09 FB 51 F6 | 	abs	result1, arg01 wc
26314     64 FA 15 FD | 	qdiv	result1, #100
26318     19 FA 61 FD | 	getqy	result1
2631c     FD FA 89 F6 | 	negc	result1, result1 wz
26320     1C 00 90 5D |  if_ne	jmp	#LR__4070
26324     09 FB 51 F6 | 	abs	result1, arg01 wc
26328     90 FB 15 FD | 	qdiv	result1, #400
2632c                 | '       return (0 == y % 400);
2632c     00 FA 05 F6 | 	mov	result1, #0
26330     19 00 62 FD | 	getqy	_var01
26334     00 01 8A F6 | 	negc	_var01, _var01 wz
26338     01 FA 05 A6 |  if_e	mov	result1, #1
2633c     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
26340                 | LR__4070
26340                 | '     return 1;
26340     01 FA 05 F6 | 	mov	result1, #1
26344     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
26348                 | LR__4071
26348                 | '   }
26348                 | '   return 0;
26348     00 FA 05 F6 | 	mov	result1, #0
2634c                 | _fatfs_cc__is_leap_year_ret
2634c     2D 00 64 FD | 	ret
26350                 | 
26350                 | _fatfs_cc___tzoffset
26350     09 01 0A F6 | 	mov	_var01, arg01 wz
26354     FF FF FF FF 
26358     0A FF 6B FC | 	wrlong	##-1, arg02
2635c     01 02 06 F6 | 	mov	_var02, #1
26360     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
26364                 | '                 return 0;
26364     00 FA 05 A6 |  if_e	mov	result1, #0
26368     94 02 90 AD |  if_e	jmp	#LR__4097
2636c     0A 01 68 FC | 	wrlong	#0, arg02
26370     02 00 00 FF 
26374     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
26378     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2637c                 | ' 
2637c                 | '        *hasdst = 0;
2637c                 | ' 
2637c                 | ' 	n = stdname;
2637c                 | '         while (*s && isalpha(*s)) {
2637c     02 00 00 FF 
26380     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
26384     97 28 48 FB | 	callpa	#(@LR__4081-@LR__4080)>>2,fcache_load_ptr_
26388                 | LR__4080
26388     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2638c     48 00 90 AD |  if_e	jmp	#LR__4082
26390     00 13 C2 FA | 	rdbyte	arg01, _var01
26394                 | ' {
26394                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
26394     80 12 36 F3 | 	fle	arg01, #128 wc
26398                 | '     return __ctype[c];
26398     02 00 00 FF 
2639c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
263a0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
263a4     09 FB C1 FA | 	rdbyte	result1, arg01
263a8     02 00 00 FF 
263ac     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
263b0     0C FA CD F7 | 	test	result1, #12 wz
263b4     20 00 90 AD |  if_e	jmp	#LR__4082
263b8     00 09 02 F6 | 	mov	_var05, _var01
263bc     00 0B 02 F6 | 	mov	_var06, _var01
263c0     01 0A 06 F1 | 	add	_var06, #1
263c4     04 0D C2 FA | 	rdbyte	_var07, _var05
263c8     05 01 02 F6 | 	mov	_var01, _var06
263cc     03 0D 42 FC | 	wrbyte	_var07, _var04
263d0     01 06 06 F1 | 	add	_var04, #1
263d4     B0 FF 9F FD | 	jmp	#LR__4080
263d8                 | LR__4081
263d8                 | LR__4082
263d8     03 01 48 FC | 	wrbyte	#0, _var04
263dc     00 0E 06 F6 | 	mov	_var08, #0
263e0     00 05 C2 FA | 	rdbyte	_var03, _var01
263e4     2D 04 0E F2 | 	cmp	_var03, #45 wz
263e8     01 02 66 A6 |  if_e	neg	_var02, #1
263ec     01 00 06 A1 |  if_e	add	_var01, #1
263f0     97 28 48 FB | 	callpa	#(@LR__4084-@LR__4083)>>2,fcache_load_ptr_
263f4                 | '                 sgn = -1;
263f4                 | '                 s++;
263f4                 | '         }
263f4                 | '         while (isdigit(*s)) {
263f4                 | LR__4083
263f4     00 13 C2 FA | 	rdbyte	arg01, _var01
263f8                 | ' {
263f8                 | '   return  (__ctype_get(c) & 0x02 ) ;
263f8     80 12 36 F3 | 	fle	arg01, #128 wc
263fc                 | '     return __ctype[c];
263fc     02 00 00 FF 
26400     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
26404     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
26408     09 FB C1 FA | 	rdbyte	result1, arg01
2640c     02 00 00 FF 
26410     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
26414     02 FA CD F7 | 	test	result1, #2 wz
26418     28 00 90 AD |  if_e	jmp	#LR__4085
2641c     07 05 02 F6 | 	mov	_var03, _var08
26420     02 04 66 F0 | 	shl	_var03, #2
26424     07 05 02 F1 | 	add	_var03, _var08
26428     01 04 66 F0 | 	shl	_var03, #1
2642c     00 09 C2 FA | 	rdbyte	_var05, _var01
26430     30 08 86 F1 | 	sub	_var05, #48
26434     04 05 02 F1 | 	add	_var03, _var05
26438     02 0F 02 F6 | 	mov	_var08, _var03
2643c     01 00 06 F1 | 	add	_var01, #1
26440     B0 FF 9F FD | 	jmp	#LR__4083
26444                 | LR__4084
26444                 | LR__4085
26444     07 00 00 FF 
26448     10 0E 06 FD | 	qmul	_var08, ##3600
2644c     00 05 C2 FA | 	rdbyte	_var03, _var01
26450     3A 04 0E F2 | 	cmp	_var03, #58 wz
26454     18 10 62 FD | 	getqx	_var09
26458     70 00 90 5D |  if_ne	jmp	#LR__4089
2645c     00 0E 06 F6 | 	mov	_var08, #0
26460     01 00 06 F1 | 	add	_var01, #1
26464     97 28 48 FB | 	callpa	#(@LR__4087-@LR__4086)>>2,fcache_load_ptr_
26468                 | '                 x = 0;
26468                 | '                 s++;
26468                 | '                 while (isdigit(*s)) {
26468                 | LR__4086
26468     00 13 C2 FA | 	rdbyte	arg01, _var01
2646c                 | ' {
2646c                 | '   return  (__ctype_get(c) & 0x02 ) ;
2646c     80 12 36 F3 | 	fle	arg01, #128 wc
26470                 | '     return __ctype[c];
26470     02 00 00 FF 
26474     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
26478     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2647c     09 FB C1 FA | 	rdbyte	result1, arg01
26480     02 00 00 FF 
26484     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
26488     02 FA CD F7 | 	test	result1, #2 wz
2648c     28 00 90 AD |  if_e	jmp	#LR__4088
26490     07 05 02 F6 | 	mov	_var03, _var08
26494     02 04 66 F0 | 	shl	_var03, #2
26498     07 05 02 F1 | 	add	_var03, _var08
2649c     01 04 66 F0 | 	shl	_var03, #1
264a0     00 09 C2 FA | 	rdbyte	_var05, _var01
264a4     30 08 86 F1 | 	sub	_var05, #48
264a8     04 05 02 F1 | 	add	_var03, _var05
264ac     02 0F 02 F6 | 	mov	_var08, _var03
264b0     01 00 06 F1 | 	add	_var01, #1
264b4     B0 FF 9F FD | 	jmp	#LR__4086
264b8                 | LR__4087
264b8                 | LR__4088
264b8     07 0D 02 F6 | 	mov	_var07, _var08
264bc     04 0C 66 F0 | 	shl	_var07, #4
264c0     07 0D 82 F1 | 	sub	_var07, _var08
264c4     02 0C 66 F0 | 	shl	_var07, #2
264c8     06 11 02 F1 | 	add	_var09, _var07
264cc                 | LR__4089
264cc     02 00 00 FF 
264d0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
264d4     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
264d8     00 13 C2 FA | 	rdbyte	arg01, _var01
264dc                 | ' {
264dc                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
264dc     80 12 36 F3 | 	fle	arg01, #128 wc
264e0                 | '     return __ctype[c];
264e0     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
264e4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
264e8     09 FB C1 FA | 	rdbyte	result1, arg01
264ec     02 00 00 FF 
264f0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
264f4     0C FA CD F7 | 	test	result1, #12 wz
264f8     50 00 90 AD |  if_e	jmp	#LR__4092
264fc     0A 03 68 FC | 	wrlong	#1, arg02
26500                 | '                 *hasdst = 1;
26500                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
26500                 | LR__4090
26500     00 05 CA FA | 	rdbyte	_var03, _var01 wz
26504     44 00 90 AD |  if_e	jmp	#LR__4091
26508     00 13 C2 FA | 	rdbyte	arg01, _var01
2650c                 | ' {
2650c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2650c     80 12 36 F3 | 	fle	arg01, #128 wc
26510                 | '     return __ctype[c];
26510     02 00 00 FF 
26514     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
26518     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2651c     09 FB C1 FA | 	rdbyte	result1, arg01
26520     02 00 00 FF 
26524     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
26528     0C FA CD F7 | 	test	result1, #12 wz
2652c     1C 00 90 AD |  if_e	jmp	#LR__4091
26530     00 0B 02 F6 | 	mov	_var06, _var01
26534     01 0A 06 F1 | 	add	_var06, #1
26538     00 0D C2 FA | 	rdbyte	_var07, _var01
2653c     05 01 02 F6 | 	mov	_var01, _var06
26540     03 0D 42 FC | 	wrbyte	_var07, _var04
26544     01 06 06 F1 | 	add	_var04, #1
26548     B4 FF 9F FD | 	jmp	#LR__4090
2654c                 | LR__4091
2654c                 | LR__4092
2654c     03 01 48 FC | 	wrbyte	#0, _var04
26550     02 00 00 FF 
26554     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
26558     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2655c     02 00 00 FF 
26560     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
26564     20 00 90 AD |  if_e	jmp	#LR__4093
26568     02 00 00 FF 
2656c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
26570     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
26574     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
26578     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2657c     02 00 00 FF 
26580     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
26584     1C 00 90 FD | 	jmp	#LR__4094
26588                 | LR__4093
26588     02 00 00 FF 
2658c     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
26590     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
26594     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
26598     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2659c     02 00 00 FF 
265a0     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
265a4                 | LR__4094
265a4     02 00 00 FF 
265a8     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
265ac     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
265b0     02 00 00 FF 
265b4     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
265b8     20 00 90 AD |  if_e	jmp	#LR__4095
265bc     02 00 00 FF 
265c0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
265c4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
265c8     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
265cc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
265d0     02 00 00 FF 
265d4     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
265d8     1C 00 90 FD | 	jmp	#LR__4096
265dc                 | LR__4095
265dc     02 00 00 FF 
265e0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
265e4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
265e8     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
265ec     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
265f0     02 00 00 FF 
265f4     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
265f8                 | LR__4096
265f8     08 03 02 FD | 	qmul	_var02, _var09
265fc                 | ' 		_tzname[1] = stdname;
265fc                 | ' 
265fc                 | '         return sgn * off;
265fc     18 FA 61 FD | 	getqx	result1
26600                 | LR__4097
26600                 | _fatfs_cc___tzoffset_ret
26600     2D 00 64 FD | 	ret
26604                 | 
26604                 | _fatfs_cc___indst
26604     10 12 06 F1 | 	add	arg01, #16
26608     09 01 02 FB | 	rdlong	_var01, arg01
2660c     10 12 86 F1 | 	sub	arg01, #16
26610     02 00 0E F2 | 	cmp	_var01, #2 wz
26614     30 00 90 5D |  if_ne	jmp	#LR__4100
26618     07 00 06 F6 | 	mov	_var01, #7
2661c     18 12 06 F1 | 	add	arg01, #24
26620     09 03 02 FB | 	rdlong	_var02, arg01
26624     01 01 02 F1 | 	add	_var01, _var02
26628     0C 12 86 F1 | 	sub	arg01, #12
2662c     09 05 02 FB | 	rdlong	_var03, arg01
26630     02 01 82 F1 | 	sub	_var01, _var03
26634     00 00 56 F2 | 	cmps	_var01, #0 wc
26638                 | '                         return 1;
26638     01 FA 05 C6 |  if_b	mov	result1, #1
2663c     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
26640                 | '                 return 0;
26640     00 FA 05 F6 | 	mov	result1, #0
26644     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
26648                 | LR__4100
26648     10 12 06 F1 | 	add	arg01, #16
2664c     09 01 02 FB | 	rdlong	_var01, arg01
26650     10 12 86 F1 | 	sub	arg01, #16
26654     0A 00 0E F2 | 	cmp	_var01, #10 wz
26658     28 00 90 5D |  if_ne	jmp	#LR__4101
2665c     18 12 06 F1 | 	add	arg01, #24
26660     09 01 02 FB | 	rdlong	_var01, arg01
26664     0C 12 86 F1 | 	sub	arg01, #12
26668     09 07 02 FB | 	rdlong	_var04, arg01
2666c     03 01 82 F1 | 	sub	_var01, _var04
26670     00 00 56 F2 | 	cmps	_var01, #0 wc
26674                 | '                         return 0;
26674     00 FA 05 C6 |  if_b	mov	result1, #0
26678     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2667c                 | '                 return 1;
2667c     01 FA 05 F6 | 	mov	result1, #1
26680     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
26684                 | LR__4101
26684                 | '         }
26684                 | ' 
26684                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
26684     00 00 06 F6 | 	mov	_var01, #0
26688     10 12 06 F1 | 	add	arg01, #16
2668c     09 03 02 FB | 	rdlong	_var02, arg01
26690     10 12 86 F1 | 	sub	arg01, #16
26694     03 02 56 F2 | 	cmps	_var02, #3 wc
26698     10 00 90 CD |  if_b	jmp	#LR__4102
2669c     10 12 06 F1 | 	add	arg01, #16
266a0     09 05 02 FB | 	rdlong	_var03, arg01
266a4     0A 04 56 F2 | 	cmps	_var03, #10 wc
266a8     01 00 06 C6 |  if_b	mov	_var01, #1
266ac                 | LR__4102
266ac     00 FB 01 F6 | 	mov	result1, _var01
266b0                 | _fatfs_cc___indst_ret
266b0     2D 00 64 FD | 	ret
266b4                 | 
266b4                 | ' 	
266b4                 | ' 	FUNCTION pfunc(c as integer) as integer
266b4                 | ___strs_cl_pfunc
266b4                 | ' 		if (i < 16) then
266b4     04 E4 05 F1 | 	add	objptr, #4
266b8     F2 FA 01 FB | 	rdlong	result1, objptr
266bc     04 E4 85 F1 | 	sub	objptr, #4
266c0     10 FA 55 F2 | 	cmps	result1, #16 wc
266c4     2C 00 90 3D |  if_ae	jmp	#LR__4110
266c8     F2 FA 01 FB | 	rdlong	result1, objptr
266cc     04 E4 05 F1 | 	add	objptr, #4
266d0     F2 00 02 FB | 	rdlong	_var01, objptr
266d4     FD 00 02 F1 | 	add	_var01, result1
266d8     00 13 42 FC | 	wrbyte	arg01, _var01
266dc     F2 FA 01 FB | 	rdlong	result1, objptr
266e0     01 FA 05 F1 | 	add	result1, #1
266e4     F2 FA 61 FC | 	wrlong	result1, objptr
266e8     04 E4 85 F1 | 	sub	objptr, #4
266ec                 | ' 			p(i) = c
266ec                 | ' 			i = i+1
266ec                 | ' 			return 1
266ec     01 FA 05 F6 | 	mov	result1, #1
266f0     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
266f4                 | LR__4110
266f4                 | ' 			return -1
266f4     01 FA 65 F6 | 	neg	result1, #1
266f8                 | ___strs_cl_pfunc_ret
266f8     2D 00 64 FD | 	ret
266fc                 | 
266fc                 | __struct__s_vfs_file_t_putchar
266fc     04 4A 05 F6 | 	mov	COUNT_, #4
26700     A8 00 A0 FD | 	call	#pushregs_
26704     1C E4 05 F1 | 	add	objptr, #28
26708     F2 1E 0A FB | 	rdlong	local01, objptr wz
2670c     1C E4 85 F1 | 	sub	objptr, #28
26710     00 FA 05 A6 |  if_e	mov	result1, #0
26714     48 00 90 AD |  if_e	jmp	#LR__4120
26718     1C E4 05 F1 | 	add	objptr, #28
2671c     F2 20 02 FB | 	rdlong	local02, objptr
26720     10 23 02 F6 | 	mov	local03, local02
26724     1C E4 85 F1 | 	sub	objptr, #28
26728     13 22 46 F7 | 	zerox	local03, #19
2672c     14 20 46 F0 | 	shr	local02, #20
26730     02 20 66 F0 | 	shl	local02, #2
26734     ED 20 02 F1 | 	add	local02, __methods__
26738     10 21 02 FB | 	rdlong	local02, local02
2673c     F2 14 02 F6 | 	mov	arg02, objptr
26740     F2 24 02 F6 | 	mov	local04, objptr
26744     11 E5 01 F6 | 	mov	objptr, local03
26748     2D 20 62 FD | 	call	local02
2674c     12 E5 01 F6 | 	mov	objptr, local04
26750                 | '     return (i < 0) ? 0 : 1;
26750     00 FA 55 F2 | 	cmps	result1, #0 wc
26754     00 1E 06 C6 |  if_b	mov	local01, #0
26758     01 1E 06 36 |  if_ae	mov	local01, #1
2675c     0F FB 01 F6 | 	mov	result1, local01
26760                 | LR__4120
26760     A7 F0 03 F6 | 	mov	ptra, fp
26764     B2 00 A0 FD | 	call	#popregs_
26768                 | __struct__s_vfs_file_t_putchar_ret
26768     2D 00 64 FD | 	ret
2676c                 | 
2676c                 | __struct__s_vfs_file_t_getchar
2676c     03 4A 05 F6 | 	mov	COUNT_, #3
26770     A8 00 A0 FD | 	call	#pushregs_
26774     20 E4 05 F1 | 	add	objptr, #32
26778     F2 12 0A FB | 	rdlong	arg01, objptr wz
2677c     20 E4 85 F1 | 	sub	objptr, #32
26780     01 FA 65 A6 |  if_e	neg	result1, #1
26784     38 00 90 AD |  if_e	jmp	#LR__4130
26788                 | '     return getcf(__this);
26788     20 E4 05 F1 | 	add	objptr, #32
2678c     F2 1E 02 FB | 	rdlong	local01, objptr
26790     0F 21 02 F6 | 	mov	local02, local01
26794     20 E4 85 F1 | 	sub	objptr, #32
26798     13 20 46 F7 | 	zerox	local02, #19
2679c     14 1E 46 F0 | 	shr	local01, #20
267a0     02 1E 66 F0 | 	shl	local01, #2
267a4     ED 1E 02 F1 | 	add	local01, __methods__
267a8     0F 1F 02 FB | 	rdlong	local01, local01
267ac     F2 12 02 F6 | 	mov	arg01, objptr
267b0     F2 22 02 F6 | 	mov	local03, objptr
267b4     10 E5 01 F6 | 	mov	objptr, local02
267b8     2D 1E 62 FD | 	call	local01
267bc     11 E5 01 F6 | 	mov	objptr, local03
267c0                 | LR__4130
267c0     A7 F0 03 F6 | 	mov	ptra, fp
267c4     B2 00 A0 FD | 	call	#popregs_
267c8                 | __struct__s_vfs_file_t_getchar_ret
267c8     2D 00 64 FD | 	ret
267cc                 | 
267cc                 | __struct___bas_wrap_sender_tx
267cc     03 4A 05 F6 | 	mov	COUNT_, #3
267d0     A8 00 A0 FD | 	call	#pushregs_
267d4     F2 1E 02 FB | 	rdlong	local01, objptr
267d8     0F 21 02 F6 | 	mov	local02, local01
267dc     13 1E 46 F7 | 	zerox	local01, #19
267e0     14 20 46 F0 | 	shr	local02, #20
267e4     02 20 66 F0 | 	shl	local02, #2
267e8     ED 20 02 F1 | 	add	local02, __methods__
267ec     10 21 02 FB | 	rdlong	local02, local02
267f0     F2 22 02 F6 | 	mov	local03, objptr
267f4     0F E5 01 F6 | 	mov	objptr, local01
267f8     2D 20 62 FD | 	call	local02
267fc     11 E5 01 F6 | 	mov	objptr, local03
26800     01 FA 05 F6 | 	mov	result1, #1
26804     A7 F0 03 F6 | 	mov	ptra, fp
26808     B2 00 A0 FD | 	call	#popregs_
2680c                 | __struct___bas_wrap_sender_tx_ret
2680c     2D 00 64 FD | 	ret
26810                 | 
26810                 | __struct___bas_wrap_sender_rx
26810     03 4A 05 F6 | 	mov	COUNT_, #3
26814     A8 00 A0 FD | 	call	#pushregs_
26818     04 E4 05 F1 | 	add	objptr, #4
2681c     F2 1E 02 FB | 	rdlong	local01, objptr
26820     0F 21 02 F6 | 	mov	local02, local01
26824     04 E4 85 F1 | 	sub	objptr, #4
26828     13 20 46 F7 | 	zerox	local02, #19
2682c     14 1E 46 F0 | 	shr	local01, #20
26830     02 1E 66 F0 | 	shl	local01, #2
26834     ED 1E 02 F1 | 	add	local01, __methods__
26838     0F 1F 02 FB | 	rdlong	local01, local01
2683c     F2 22 02 F6 | 	mov	local03, objptr
26840     10 E5 01 F6 | 	mov	objptr, local02
26844     2D 1E 62 FD | 	call	local01
26848     11 E5 01 F6 | 	mov	objptr, local03
2684c     A7 F0 03 F6 | 	mov	ptra, fp
26850     B2 00 A0 FD | 	call	#popregs_
26854                 | __struct___bas_wrap_sender_rx_ret
26854     2D 00 64 FD | 	ret
26858                 | 
26858                 | __struct___bas_wrap_sender_close
26858     03 4A 05 F6 | 	mov	COUNT_, #3
2685c     A8 00 A0 FD | 	call	#pushregs_
26860     08 E4 05 F1 | 	add	objptr, #8
26864     F2 1E 02 FB | 	rdlong	local01, objptr
26868     0F 21 02 F6 | 	mov	local02, local01
2686c     08 E4 85 F1 | 	sub	objptr, #8
26870     13 20 46 F7 | 	zerox	local02, #19
26874     14 1E 46 F0 | 	shr	local01, #20
26878     02 1E 66 F0 | 	shl	local01, #2
2687c     ED 1E 02 F1 | 	add	local01, __methods__
26880     0F 1F 02 FB | 	rdlong	local01, local01
26884     F2 22 02 F6 | 	mov	local03, objptr
26888     10 E5 01 F6 | 	mov	objptr, local02
2688c     2D 1E 62 FD | 	call	local01
26890     11 E5 01 F6 | 	mov	objptr, local03
26894     A7 F0 03 F6 | 	mov	ptra, fp
26898     B2 00 A0 FD | 	call	#popregs_
2689c                 | __struct___bas_wrap_sender_close_ret
2689c     2D 00 64 FD | 	ret
268a0                 | 
268a0                 | LR__4140
268a0     2F          | 	byte	"/"
268a1     00          | 	byte	0
268a2                 | LR__4141
268a2     69 6E 66    | 	byte	"inf"
268a5     00          | 	byte	0
268a6                 | LR__4142
268a6     6E 61 6E    | 	byte	"nan"
268a9     00          | 	byte	0
268aa                 | LR__4143
268aa                 | 	byte	
268aa     00          | 	byte	0
268ab                 | LR__4144
268ab                 | 	byte	
268ab     00          | 	byte	0
268ac                 | LR__4145
268ac                 | 	byte	
268ac     00          | 	byte	0
268ad                 | LR__4146
268ad                 | 	byte	
268ad     00          | 	byte	0
268ae                 | LR__4147
268ae                 | 	byte	
268ae     00          | 	byte	0
268af                 | LR__4148
268af                 | 	byte	
268af     00          | 	byte	0
268b0                 | LR__4149
268b0                 | 	byte	
268b0     00          | 	byte	0
268b1                 | LR__4150
268b1                 | 	byte	
268b1     00          | 	byte	0
268b2                 | LR__4151
268b2     00          | 	byte	0
268b3     00          | 	byte	0
268b4                 | LR__4152
268b4     00          | 	byte	0
268b5     00          | 	byte	0
268b6                 | LR__4153
268b6     00          | 	byte	0
268b7     00          | 	byte	0
268b8                 | LR__4154
268b8     20 21 21 21 
268bc     20 63 6F 72 
268c0     72 75 70 74 
268c4     65 64 20 68 
268c8     65 61 70 3F 
268cc     3F 3F 20 21 
268d0     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
268d3     00          | 	byte	0
268d4                 | LR__4155
268d4     20 21 21 21 
268d8     20 6F 75 74 
268dc     20 6F 66 20 
268e0     68 65 61 70 
268e4     20 6D 65 6D 
268e8     6F 72 79 20 
268ec     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
268f0     00          | 	byte	0
268f1                 | LR__4156
268f1     20 21 21 21 
268f5     20 63 6F 72 
268f9     72 75 70 74 
268fd     65 64 20 68 
26901     65 61 70 20 
26905     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
26909     00          | 	byte	0
2690a                 | LR__4157
2690a     00          | 	byte	0
2690b     00          | 	byte	0
2690c                 | LR__4158
2690c     2E          | 	byte	"."
2690d     00          | 	byte	0
2690e                 | LR__4159
2690e     00          | 	byte	0
2690f     00          | 	byte	0
26910                 | LR__4160
26910     00          | 	byte	0
26911     00          | 	byte	0
26912                 | LR__4161
26912     00          | 	byte	0
26913     00          | 	byte	0
26914                 | LR__4162
26914     2A 3A 3C 3E 
26918     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2691c     00          | 	byte	0
2691d                 | LR__4163
2691d     2B 2C 3B 3D 
26921     5B 5D       | 	byte	"+,;=[]"
26923     00          | 	byte	0
26924                 | LR__4164
26924     46 41 54 33 
26928     32 20 20 20 | 	byte	"FAT32   "
2692c     00          | 	byte	0
2692d                 | LR__4165
2692d     54 5A       | 	byte	"TZ"
2692f     00          | 	byte	0
26930                 | LR__4166
26930     00          | 	byte	0
26931     00          | 	byte	0
26932                 | LR__4167
26932                 | 	byte	
26932     00          | 	byte	0
26933                 | LR__4168
26933                 | 	byte	
26933     00          | 	byte	0
26934                 | LR__4169
26934     22          | 	byte	34
26935     00          | 	byte	0
26936                 | LR__4170
26936     22          | 	byte	34
26937     00          | 	byte	0
26938                 | LR__4171
26938     3A          | 	byte	":"
26939     00          | 	byte	0
2693a                 | LR__4172
2693a                 | 	byte	
2693a     00          | 	byte	0
2693b                 | LR__4173
2693b                 | 	byte	
2693b     00          | 	byte	0
2693c                 | LR__4174
2693c                 | 	byte	
2693c     00          | 	byte	0
2693d                 | LR__4175
2693d                 | 	byte	
2693d     00          | 	byte	0
2693e                 | LR__4176
2693e                 | 	byte	
2693e     00          | 	byte	0
2693f                 | LR__4177
2693f                 | 	byte	
2693f     00          | 	byte	0
26940                 | LR__4178
26940                 | 	byte	
26940     00          | 	byte	0
26941                 | LR__4179
26941     22          | 	byte	34
26942     00          | 	byte	0
26943                 | LR__4180
26943     22          | 	byte	34
26944     00          | 	byte	0
26945                 | LR__4181
26945     22          | 	byte	34
26946     00          | 	byte	0
26947                 | LR__4182
26947     22          | 	byte	34
26948     00          | 	byte	0
26949                 | LR__4183
26949     22          | 	byte	34
2694a     00          | 	byte	0
2694b                 | LR__4184
2694b     3E          | 	byte	">"
2694c     00          | 	byte	0
2694d                 | LR__4185
2694d     3E          | 	byte	">"
2694e     00          | 	byte	0
2694f                 | LR__4186
2694f     2B          | 	byte	"+"
26950     00          | 	byte	0
26951                 | LR__4187
26951     2D          | 	byte	"-"
26952     00          | 	byte	0
26953                 | LR__4188
26953     2A          | 	byte	"*"
26954     00          | 	byte	0
26955                 | LR__4189
26955     2F          | 	byte	"/"
26956     00          | 	byte	0
26957                 | LR__4190
26957     5E          | 	byte	"^"
26958     00          | 	byte	0
26959                 | LR__4191
26959     3D          | 	byte	"="
2695a     00          | 	byte	0
2695b                 | LR__4192
2695b     2B          | 	byte	"+"
2695c     00          | 	byte	0
2695d                 | LR__4193
2695d     2B          | 	byte	"+"
2695e     00          | 	byte	0
2695f                 | LR__4194
2695f     2D          | 	byte	"-"
26960     00          | 	byte	0
26961                 | LR__4195
26961     2D          | 	byte	"-"
26962     00          | 	byte	0
26963                 | LR__4196
26963     3C          | 	byte	"<"
26964     00          | 	byte	0
26965                 | LR__4197
26965     3E          | 	byte	">"
26966     00          | 	byte	0
26967                 | LR__4198
26967     22          | 	byte	34
26968     00          | 	byte	0
26969                 | LR__4199
26969     22          | 	byte	34
2696a     00          | 	byte	0
2696b                 | LR__4200
2696b                 | 	byte	
2696b     00          | 	byte	0
2696c                 | LR__4201
2696c     6C 6F 61 64 | 	byte	"load"
26970     00          | 	byte	0
26971                 | LR__4202
26971     73 61 76 65 | 	byte	"save"
26975     00          | 	byte	0
26976                 | LR__4203
26976     62 72 75 6E | 	byte	"brun"
2697a     00          | 	byte	0
2697b                 | LR__4204
2697b     6D 6F 75 73 
2697f     65          | 	byte	"mouse"
26980     00          | 	byte	0
26981                 | LR__4205
26981     63 75 72 73 
26985     6F 72       | 	byte	"cursor"
26987     00          | 	byte	0
26988                 | LR__4206
26988     63 6C 69 63 
2698c     6B          | 	byte	"click"
2698d     00          | 	byte	0
2698e                 | LR__4207
2698e     6F 6E       | 	byte	"on"
26990     00          | 	byte	0
26991                 | LR__4208
26991     31          | 	byte	"1"
26992     00          | 	byte	0
26993                 | LR__4209
26993     6F 66 66    | 	byte	"off"
26996     00          | 	byte	0
26997                 | LR__4210
26997     30          | 	byte	"0"
26998     00          | 	byte	0
26999                 | LR__4211
26999                 | 	byte	
26999     00          | 	byte	0
2699a                 | LR__4212
2699a                 | 	byte	
2699a     00          | 	byte	0
2699b                 | LR__4213
2699b                 | 	byte	
2699b     00          | 	byte	0
2699c                 | LR__4214
2699c                 | 	byte	
2699c     00          | 	byte	0
2699d                 | LR__4215
2699d     20 55 73 65 
269a1     72 20 66 75 
269a5     6E 63 74 69 
269a9     6F 6E 73 20 
269ad     61 6E 64 20 
269b1     61 72 72 61 
269b5     79 73 20 6E 
269b9     6F 74 20 79 
269bd     65 74 20 69 
269c1     6D 70 6C 65 
269c5     6D 65 6E 74 
269c9     65 64       | 	byte	" User functions and arrays not yet implemented"
269cb     00          | 	byte	0
269cc                 | LR__4216
269cc                 | 	byte	
269cc     00          | 	byte	0
269cd                 | LR__4217
269cd                 | 	byte	
269cd     00          | 	byte	0
269ce                 | LR__4218
269ce     52 65 61 64 
269d2     79          | 	byte	"Ready"
269d3     00          | 	byte	0
269d4                 | LR__4219
269d4     2B          | 	byte	"+"
269d5     00          | 	byte	0
269d6                 | LR__4220
269d6     2D          | 	byte	"-"
269d7     00          | 	byte	0
269d8                 | LR__4221
269d8     6F 72       | 	byte	"or"
269da     00          | 	byte	0
269db                 | LR__4222
269db     78 6F 72    | 	byte	"xor"
269de     00          | 	byte	0
269df                 | LR__4223
269df     2A          | 	byte	"*"
269e0     00          | 	byte	0
269e1                 | LR__4224
269e1     2F          | 	byte	"/"
269e2     00          | 	byte	0
269e3                 | LR__4225
269e3     61 6E 64    | 	byte	"and"
269e6     00          | 	byte	0
269e7                 | LR__4226
269e7     64 69 76    | 	byte	"div"
269ea     00          | 	byte	0
269eb                 | LR__4227
269eb     6D 6F 64    | 	byte	"mod"
269ee     00          | 	byte	0
269ef                 | LR__4228
269ef     73 68 6C    | 	byte	"shl"
269f2     00          | 	byte	0
269f3                 | LR__4229
269f3     73 68 72    | 	byte	"shr"
269f6     00          | 	byte	0
269f7                 | LR__4230
269f7     5E          | 	byte	"^"
269f8     00          | 	byte	0
269f9                 | LR__4231
269f9     6E 6F 74    | 	byte	"not"
269fc     00          | 	byte	0
269fd                 | LR__4232
269fd     40          | 	byte	"@"
269fe     00          | 	byte	0
269ff                 | LR__4233
269ff     3D          | 	byte	"="
26a00     00          | 	byte	0
26a01                 | LR__4234
26a01     3E 3D       | 	byte	">="
26a03     00          | 	byte	0
26a04                 | LR__4235
26a04     3C 3D       | 	byte	"<="
26a06     00          | 	byte	0
26a07                 | LR__4236
26a07     3C          | 	byte	"<"
26a08     00          | 	byte	0
26a09                 | LR__4237
26a09     3E          | 	byte	">"
26a0a     00          | 	byte	0
26a0b                 | LR__4238
26a0b     3C 3E       | 	byte	"<>"
26a0d     00          | 	byte	0
26a0e                 | LR__4239
26a0e     2B 2B       | 	byte	"++"
26a10     00          | 	byte	0
26a11                 | LR__4240
26a11     2D 2D       | 	byte	"--"
26a13     00          | 	byte	0
26a14                 | LR__4241
26a14     2B          | 	byte	"+"
26a15     00          | 	byte	0
26a16                 | LR__4242
26a16     2D          | 	byte	"-"
26a17     00          | 	byte	0
26a18                 | LR__4243
26a18     3D          | 	byte	"="
26a19     00          | 	byte	0
26a1a                 | LR__4244
26a1a     2C          | 	byte	","
26a1b     00          | 	byte	0
26a1c                 | LR__4245
26a1c     2A          | 	byte	"*"
26a1d     00          | 	byte	0
26a1e                 | LR__4246
26a1e     2F          | 	byte	"/"
26a1f     00          | 	byte	0
26a20                 | LR__4247
26a20     3B          | 	byte	";"
26a21     00          | 	byte	0
26a22                 | LR__4248
26a22     22          | 	byte	34
26a23     00          | 	byte	0
26a24                 | LR__4249
26a24     5E          | 	byte	"^"
26a25     00          | 	byte	0
26a26                 | LR__4250
26a26     29          | 	byte	")"
26a27     00          | 	byte	0
26a28                 | LR__4251
26a28     28          | 	byte	"("
26a29     00          | 	byte	0
26a2a                 | LR__4252
26a2a     3A          | 	byte	":"
26a2b     00          | 	byte	0
26a2c                 | LR__4253
26a2c     20          | 	byte	" "
26a2d     00          | 	byte	0
26a2e                 | LR__4254
26a2e     3E          | 	byte	">"
26a2f     00          | 	byte	0
26a30                 | LR__4255
26a30     3C          | 	byte	"<"
26a31     00          | 	byte	0
26a32                 | LR__4256
26a32     3D          | 	byte	"="
26a33     00          | 	byte	0
26a34                 | LR__4257
26a34     63 6C 73    | 	byte	"cls"
26a37     00          | 	byte	0
26a38                 | LR__4258
26a38     6E 65 77    | 	byte	"new"
26a3b     00          | 	byte	0
26a3c                 | LR__4259
26a3c     70 6C 6F 74 | 	byte	"plot"
26a40     00          | 	byte	0
26a41                 | LR__4260
26a41     64 72 61 77 | 	byte	"draw"
26a45     00          | 	byte	0
26a46                 | LR__4261
26a46     70 72 69 6E 
26a4a     74          | 	byte	"print"
26a4b     00          | 	byte	0
26a4c                 | LR__4262
26a4c     63 69 72 63 
26a50     6C 65       | 	byte	"circle"
26a52     00          | 	byte	0
26a53                 | LR__4263
26a53     66 63 69 72 
26a57     63 6C 65    | 	byte	"fcircle"
26a5a     00          | 	byte	0
26a5b                 | LR__4264
26a5b     62 6F 78    | 	byte	"box"
26a5e     00          | 	byte	0
26a5f                 | LR__4265
26a5f     66 72 61 6D 
26a63     65          | 	byte	"frame"
26a64     00          | 	byte	0
26a65                 | LR__4266
26a65     63 6F 6C 6F 
26a69     72          | 	byte	"color"
26a6a     00          | 	byte	0
26a6b                 | LR__4267
26a6b     70 72 69 6E 
26a6f     74          | 	byte	"print"
26a70     00          | 	byte	0
26a71                 | LR__4268
26a71     6C 69 73 74 | 	byte	"list"
26a75     00          | 	byte	0
26a76                 | LR__4269
26a76     72 75 6E    | 	byte	"run"
26a79     00          | 	byte	0
26a7a                 | LR__4270
26a7a     67 6F 74 6F | 	byte	"goto"
26a7e     00          | 	byte	0
26a7f                 | LR__4271
26a7f     63 73 61 76 
26a83     65          | 	byte	"csave"
26a84     00          | 	byte	0
26a85                 | LR__4272
26a85     73 61 76 65 | 	byte	"save"
26a89     00          | 	byte	0
26a8a                 | LR__4273
26a8a     6C 6F 61 64 | 	byte	"load"
26a8e     00          | 	byte	0
26a8f                 | LR__4274
26a8f     62 72 75 6E | 	byte	"brun"
26a93     00          | 	byte	0
26a94                 | LR__4275
26a94     70 69 6E 77 
26a98     72 69 74 65 | 	byte	"pinwrite"
26a9c     00          | 	byte	0
26a9d                 | LR__4276
26a9d     77 61 69 74 
26aa1     6D 73       | 	byte	"waitms"
26aa3     00          | 	byte	0
26aa4                 | LR__4277
26aa4     77 61 69 74 
26aa8     76 62 6C    | 	byte	"waitvbl"
26aab     00          | 	byte	0
26aac                 | LR__4278
26aac     69 66       | 	byte	"if"
26aae     00          | 	byte	0
26aaf                 | LR__4279
26aaf     65 6C 73 65 | 	byte	"else"
26ab3     00          | 	byte	0
26ab4                 | LR__4280
26ab4     74 68 65 6E | 	byte	"then"
26ab8     00          | 	byte	0
26ab9                 | LR__4281
26ab9     62 65 65 70 | 	byte	"beep"
26abd     00          | 	byte	0
26abe                 | LR__4282
26abe     64 69 72    | 	byte	"dir"
26ac1     00          | 	byte	0
26ac2                 | LR__4283
26ac2     66 6F 72    | 	byte	"for"
26ac5     00          | 	byte	0
26ac6                 | LR__4284
26ac6     6E 65 78 74 | 	byte	"next"
26aca     00          | 	byte	0
26acb                 | LR__4285
26acb     70 61 70 65 
26acf     72          | 	byte	"paper"
26ad0     00          | 	byte	0
26ad1                 | LR__4286
26ad1     69 6E 6B    | 	byte	"ink"
26ad4     00          | 	byte	0
26ad5                 | LR__4287
26ad5     66 6F 6E 74 | 	byte	"font"
26ad9     00          | 	byte	0
26ada                 | LR__4288
26ada     6D 6F 64 65 | 	byte	"mode"
26ade     00          | 	byte	0
26adf                 | LR__4289
26adf     6D 6F 75 73 
26ae3     65          | 	byte	"mouse"
26ae4     00          | 	byte	0
26ae5                 | LR__4290
26ae5     63 75 72 73 
26ae9     6F 72       | 	byte	"cursor"
26aeb     00          | 	byte	0
26aec                 | LR__4291
26aec     63 6C 69 63 
26af0     6B          | 	byte	"click"
26af1     00          | 	byte	0
26af2                 | LR__4292
26af2     64 65 66 73 
26af6     70 72 69 74 
26afa     65          | 	byte	"defsprite"
26afb     00          | 	byte	0
26afc                 | LR__4293
26afc     73 70 72 69 
26b00     74 65       | 	byte	"sprite"
26b02     00          | 	byte	0
26b03                 | LR__4294
26b03     77 61 69 74 
26b07     63 6C 6F 63 
26b0b     6B          | 	byte	"waitclock"
26b0c     00          | 	byte	0
26b0d                 | LR__4295
26b0d     66 69 6C 6C | 	byte	"fill"
26b11     00          | 	byte	0
26b12                 | LR__4296
26b12     64 69 6D    | 	byte	"dim"
26b15     00          | 	byte	0
26b16                 | LR__4297
26b16     64 65 66 73 
26b1a     6E 64       | 	byte	"defsnd"
26b1c     00          | 	byte	0
26b1d                 | LR__4298
26b1d     64 65 66 65 
26b21     6E 76       | 	byte	"defenv"
26b23     00          | 	byte	0
26b24                 | LR__4299
26b24     70 6C 61 79 | 	byte	"play"
26b28     00          | 	byte	0
26b29                 | LR__4300
26b29     77 78 70 69 
26b2d     6E          | 	byte	"wxpin"
26b2e     00          | 	byte	0
26b2f                 | LR__4301
26b2f     77 79 70 69 
26b33     6E          | 	byte	"wypin"
26b34     00          | 	byte	0
26b35                 | LR__4302
26b35     70 69 6E 66 
26b39     6C 6F 61 74 | 	byte	"pinfloat"
26b3d     00          | 	byte	0
26b3e                 | LR__4303
26b3e     70 69 6E 6C 
26b42     6F          | 	byte	"pinlo"
26b43     00          | 	byte	0
26b44                 | LR__4304
26b44     70 69 6E 68 
26b48     69          | 	byte	"pinhi"
26b49     00          | 	byte	0
26b4a                 | LR__4305
26b4a     70 69 6E 73 
26b4e     74 61 72 74 | 	byte	"pinstart"
26b52     00          | 	byte	0
26b53                 | LR__4306
26b53     70 69 6E 74 
26b57     6F 67 67 6C 
26b5b     65          | 	byte	"pintoggle"
26b5c     00          | 	byte	0
26b5d                 | LR__4307
26b5d     70 6F 73 69 
26b61     74 69 6F 6E | 	byte	"position"
26b65     00          | 	byte	0
26b66                 | LR__4308
26b66     72 6E 64    | 	byte	"rnd"
26b69     00          | 	byte	0
26b6a                 | LR__4309
26b6a     6D 6F 75 73 
26b6e     65 78       | 	byte	"mousex"
26b70     00          | 	byte	0
26b71                 | LR__4310
26b71     6D 6F 75 73 
26b75     65 79       | 	byte	"mousey"
26b77     00          | 	byte	0
26b78                 | LR__4311
26b78     6D 6F 75 73 
26b7c     65 6B       | 	byte	"mousek"
26b7e     00          | 	byte	0
26b7f                 | LR__4312
26b7f     6D 6F 75 73 
26b83     65 77       | 	byte	"mousew"
26b85     00          | 	byte	0
26b86                 | LR__4313
26b86     67 65 74 74 
26b8a     69 6D 65    | 	byte	"gettime"
26b8d     00          | 	byte	0
26b8e                 | LR__4314
26b8e     73 69 6E    | 	byte	"sin"
26b91     00          | 	byte	0
26b92                 | LR__4315
26b92     73 74 69 63 
26b96     6B          | 	byte	"stick"
26b97     00          | 	byte	0
26b98                 | LR__4316
26b98     73 74 72 69 
26b9c     67          | 	byte	"strig"
26b9d     00          | 	byte	0
26b9e                 | LR__4317
26b9e     67 65 74 70 
26ba2     69 78 65 6C | 	byte	"getpixel"
26ba6     00          | 	byte	0
26ba7                 | LR__4318
26ba7     72 64 70 69 
26bab     6E          | 	byte	"rdpin"
26bac     00          | 	byte	0
26bad                 | LR__4319
26bad     70 69 6E 72 
26bb1     65 61 64    | 	byte	"pinread"
26bb4     00          | 	byte	0
26bb5                 | LR__4320
26bb5     72 71 70 69 
26bb9     6E          | 	byte	"rqpin"
26bba     00          | 	byte	0
26bbb                 | LR__4321
26bbb     61          | 	byte	"a"
26bbc     00          | 	byte	0
26bbd                 | LR__4322
26bbd     7A          | 	byte	"z"
26bbe     00          | 	byte	0
26bbf                 | LR__4323
26bbf     5F          | 	byte	"_"
26bc0     00          | 	byte	0
26bc1                 | LR__4324
26bc1     61          | 	byte	"a"
26bc2     00          | 	byte	0
26bc3                 | LR__4325
26bc3     7A          | 	byte	"z"
26bc4     00          | 	byte	0
26bc5                 | LR__4326
26bc5     30          | 	byte	"0"
26bc6     00          | 	byte	0
26bc7                 | LR__4327
26bc7     39          | 	byte	"9"
26bc8     00          | 	byte	0
26bc9                 | LR__4328
26bc9     5F          | 	byte	"_"
26bca     00          | 	byte	0
26bcb                 | LR__4329
26bcb     2E          | 	byte	"."
26bcc     00          | 	byte	0
26bcd                 | LR__4330
26bcd     61          | 	byte	"a"
26bce     00          | 	byte	0
26bcf                 | LR__4331
26bcf     7A          | 	byte	"z"
26bd0     00          | 	byte	0
26bd1                 | LR__4332
26bd1     30          | 	byte	"0"
26bd2     00          | 	byte	0
26bd3                 | LR__4333
26bd3     39          | 	byte	"9"
26bd4     00          | 	byte	0
26bd5                 | LR__4334
26bd5     5F          | 	byte	"_"
26bd6     00          | 	byte	0
26bd7                 | LR__4335
26bd7     24          | 	byte	"$"
26bd8     00          | 	byte	0
26bd9                 | LR__4336
26bd9     25          | 	byte	"%"
26bda     00          | 	byte	0
26bdb                 | LR__4337
26bdb     21          | 	byte	"!"
26bdc     00          | 	byte	0
26bdd                 | LR__4338
26bdd     30          | 	byte	"0"
26bde     00          | 	byte	0
26bdf                 | LR__4339
26bdf     39          | 	byte	"9"
26be0     00          | 	byte	0
26be1                 | LR__4340
26be1     2E          | 	byte	"."
26be2     00          | 	byte	0
26be3                 | LR__4341
26be3     24          | 	byte	"$"
26be4     00          | 	byte	0
26be5                 | LR__4342
26be5     25          | 	byte	"%"
26be6     00          | 	byte	0
26be7                 | LR__4343
26be7     2D          | 	byte	"-"
26be8     00          | 	byte	0
26be9                 | LR__4344
26be9     2E          | 	byte	"."
26bea     00          | 	byte	0
26beb                 | LR__4345
26beb     30          | 	byte	"0"
26bec     00          | 	byte	0
26bed                 | LR__4346
26bed     39          | 	byte	"9"
26bee     00          | 	byte	0
26bef                 | LR__4347
26bef     5F          | 	byte	"_"
26bf0     00          | 	byte	0
26bf1                 | LR__4348
26bf1     2E          | 	byte	"."
26bf2     00          | 	byte	0
26bf3                 | LR__4349
26bf3     45          | 	byte	"E"
26bf4     00          | 	byte	0
26bf5                 | LR__4350
26bf5     65          | 	byte	"e"
26bf6     00          | 	byte	0
26bf7                 | LR__4351
26bf7     2D          | 	byte	"-"
26bf8     00          | 	byte	0
26bf9                 | LR__4352
26bf9     2D          | 	byte	"-"
26bfa     00          | 	byte	0
26bfb                 | LR__4353
26bfb     65          | 	byte	"e"
26bfc     00          | 	byte	0
26bfd                 | LR__4354
26bfd     2E          | 	byte	"."
26bfe     00          | 	byte	0
26bff                 | LR__4355
26bff     45          | 	byte	"E"
26c00     00          | 	byte	0
26c01                 | LR__4356
26c01     65          | 	byte	"e"
26c02     00          | 	byte	0
26c03                 | LR__4357
26c03     30          | 	byte	"0"
26c04     00          | 	byte	0
26c05                 | LR__4358
26c05     39          | 	byte	"9"
26c06     00          | 	byte	0
26c07                 | LR__4359
26c07     24          | 	byte	"$"
26c08     00          | 	byte	0
26c09                 | LR__4360
26c09     25          | 	byte	"%"
26c0a     00          | 	byte	0
26c0b                 | LR__4361
26c0b     2D          | 	byte	"-"
26c0c     00          | 	byte	0
26c0d                 | LR__4362
26c0d     30          | 	byte	"0"
26c0e     00          | 	byte	0
26c0f                 | LR__4363
26c0f     39          | 	byte	"9"
26c10     00          | 	byte	0
26c11                 | LR__4364
26c11     5F          | 	byte	"_"
26c12     00          | 	byte	0
26c13                 | LR__4365
26c13     30          | 	byte	"0"
26c14     00          | 	byte	0
26c15                 | LR__4366
26c15     39          | 	byte	"9"
26c16     00          | 	byte	0
26c17                 | LR__4367
26c17     5F          | 	byte	"_"
26c18     00          | 	byte	0
26c19                 | LR__4368
26c19     22          | 	byte	34
26c1a     00          | 	byte	0
26c1b                 | LR__4369
26c1b     22          | 	byte	34
26c1c     00          | 	byte	0
26c1d                 | LR__4370
26c1d     28          | 	byte	"("
26c1e     00          | 	byte	0
26c1f                 | LR__4371
26c1f     61 73       | 	byte	"as"
26c21     00          | 	byte	0
26c22                 | LR__4372
26c22     61 73       | 	byte	"as"
26c24     00          | 	byte	0
26c25                 | LR__4373
26c25     2C          | 	byte	","
26c26     00          | 	byte	0
26c27                 | LR__4374
26c27     29          | 	byte	")"
26c28     00          | 	byte	0
26c29                 | LR__4375
26c29     29          | 	byte	")"
26c2a     00          | 	byte	0
26c2b                 | LR__4376
26c2b     61 73       | 	byte	"as"
26c2d     00          | 	byte	0
26c2e                 | LR__4377
26c2e     62 79 74 65 | 	byte	"byte"
26c32     00          | 	byte	0
26c33                 | LR__4378
26c33     75 62 79 74 
26c37     65          | 	byte	"ubyte"
26c38     00          | 	byte	0
26c39                 | LR__4379
26c39     73 68 6F 72 
26c3d     74          | 	byte	"short"
26c3e     00          | 	byte	0
26c3f                 | LR__4380
26c3f     75 73 68 6F 
26c43     72 74       | 	byte	"ushort"
26c45     00          | 	byte	0
26c46                 | LR__4381
26c46     6C 6F 6E 67 | 	byte	"long"
26c4a     00          | 	byte	0
26c4b                 | LR__4382
26c4b     69 6E 74 65 
26c4f     67 65 72    | 	byte	"integer"
26c52     00          | 	byte	0
26c53                 | LR__4383
26c53     75 6C 6F 6E 
26c57     67          | 	byte	"ulong"
26c58     00          | 	byte	0
26c59                 | LR__4384
26c59     69 6E 74 36 
26c5d     34          | 	byte	"int64"
26c5e     00          | 	byte	0
26c5f                 | LR__4385
26c5f     75 69 6E 74 
26c63     36 34       | 	byte	"uint64"
26c65     00          | 	byte	0
26c66                 | LR__4386
26c66     73 69 6E 67 
26c6a     6C 65       | 	byte	"single"
26c6c     00          | 	byte	0
26c6d                 | LR__4387
26c6d     64 6F 75 62 
26c71     6C 65       | 	byte	"double"
26c73     00          | 	byte	0
26c74                 | LR__4388
26c74     73 74 72 69 
26c78     6E 67       | 	byte	"string"
26c7a     00          | 	byte	0
26c7b                 | LR__4389
26c7b     74 6F       | 	byte	"to"
26c7d     00          | 	byte	0
26c7e                 | LR__4390
26c7e     73 74 65 70 | 	byte	"step"
26c82     00          | 	byte	0
26c83                 | LR__4391
26c83     57 65 20 68 
26c87     61 76 65 20 
26c8b     61 20 73 6C 
26c8f     6F 77 20 67 
26c93     6F 74 6F 2C 
26c97     20 74 6F 64 
26c9b     6F 20 20    | 	byte	"We have a slow goto, todo  "
26c9e     00          | 	byte	0
26c9f                 | LR__4392
26c9f     6E 6F 6E 61 
26ca3     6D 65 2E 62 
26ca7     61 73       | 	byte	"noname.bas"
26ca9     00          | 	byte	0
26caa                 | LR__4393
26caa                 | 	byte	
26caa     00          | 	byte	0
26cab                 | LR__4394
26cab     6E 6F 6E 61 
26caf     6D 65 2E 62 
26cb3     61 73       | 	byte	"noname.bas"
26cb5     00          | 	byte	0
26cb6                 | LR__4395
26cb6     2F          | 	byte	"/"
26cb7     00          | 	byte	0
26cb8                 | LR__4396
26cb8                 | 	byte	
26cb8     00          | 	byte	0
26cb9                 | LR__4397
26cb9                 | 	byte	
26cb9     00          | 	byte	0
26cba                 | LR__4398
26cba     6E 6F 6E 61 
26cbe     6D 65 2E 62 
26cc2     61 73       | 	byte	"noname.bas"
26cc4     00          | 	byte	0
26cc5                 | LR__4399
26cc5     2F          | 	byte	"/"
26cc6     00          | 	byte	0
26cc7                 | LR__4400
26cc7     53 79 73 74 
26ccb     65 6D 20 65 
26ccf     72 72 6F 72 
26cd3     20          | 	byte	"System error "
26cd4     00          | 	byte	0
26cd5                 | LR__4401
26cd5     3A 20       | 	byte	": "
26cd7     00          | 	byte	0
26cd8                 | LR__4402
26cd8     2F          | 	byte	"/"
26cd9     00          | 	byte	0
26cda                 | LR__4403
26cda     30          | 	byte	"0"
26cdb     00          | 	byte	0
26cdc                 | LR__4404
26cdc     39          | 	byte	"9"
26cdd     00          | 	byte	0
26cde                 | LR__4405
26cde                 | 	byte	
26cde     00          | 	byte	0
26cdf                 | LR__4406
26cdf     53 74 6F 70 
26ce3     70 65 64 20 
26ce7     61 74 20 6C 
26ceb     69 6E 65 20 | 	byte	"Stopped at line "
26cef     00          | 	byte	0
26cf0                 | LR__4407
26cf0                 | 	byte	
26cf0     00          | 	byte	0
26cf1                 | LR__4408
26cf1                 | 	byte	
26cf1     00          | 	byte	0
26cf2                 | LR__4409
26cf2     2F 73 64 2F 
26cf6     6D 65 64 69 
26cfa     61 2F 68 2F | 	byte	"/sd/media/h/"
26cfe     00          | 	byte	0
26cff                 | LR__4410
26cff     53 79 73 74 
26d03     65 6D 20 65 
26d07     72 72 6F 72 
26d0b     20          | 	byte	"System error "
26d0c     00          | 	byte	0
26d0d                 | LR__4411
26d0d     3A 20       | 	byte	": "
26d0f     00          | 	byte	0
26d10                 | LR__4412
26d10                 | 	byte	
26d10     00          | 	byte	0
26d11                 | LR__4413
26d11                 | 	byte	
26d11     00          | 	byte	0
26d12                 | LR__4414
26d12     2F 73 64 2F 
26d16     6D 65 64 69 
26d1a     61 2F 73 2F | 	byte	"/sd/media/s/"
26d1e     00          | 	byte	0
26d1f                 | LR__4415
26d1f     53 79 73 74 
26d23     65 6D 20 65 
26d27     72 72 6F 72 
26d2b     20          | 	byte	"System error "
26d2c     00          | 	byte	0
26d2d                 | LR__4416
26d2d     3A 20       | 	byte	": "
26d2f     00          | 	byte	0
26d30                 | LR__4417
26d30     45 72 72 6F 
26d34     72 20       | 	byte	"Error "
26d36     00          | 	byte	0
26d37                 | LR__4418
26d37     3A 20       | 	byte	": "
26d39     00          | 	byte	0
26d3a                 | LR__4419
26d3a                 | 	byte	
26d3a     00          | 	byte	0
26d3b                 | LR__4420
26d3b     72 6E 64 3A 
26d3f     20          | 	byte	"rnd: "
26d40     00          | 	byte	0
26d41                 | LR__4421
26d41     72 6E 64 3A 
26d45     20          | 	byte	"rnd: "
26d46     00          | 	byte	0
26d47                 | LR__4422
26d47     73 69 6E 3A 
26d4b     20          | 	byte	"sin: "
26d4c     00          | 	byte	0
26d4d                 | LR__4423
26d4d     73 69 6E 3A 
26d51     20          | 	byte	"sin: "
26d52     00          | 	byte	0
26d53                 | LR__4424
26d53     73 74 69 63 
26d57     6B 3A 20    | 	byte	"stick: "
26d5a     00          | 	byte	0
26d5b                 | LR__4425
26d5b     73 74 72 69 
26d5f     67 3A 20    | 	byte	"strig: "
26d62     00          | 	byte	0
26d63                 | LR__4426
26d63     67 65 74 70 
26d67     69 78 65 6C 
26d6b     3A 20       | 	byte	"getpixel: "
26d6d     00          | 	byte	0
26d6e                 | LR__4427
26d6e                 | 	byte	
26d6e     00          | 	byte	0
26d6f                 | LR__4428
26d6f     2F 73 64 2F 
26d73     62 61 73    | 	byte	"/sd/bas"
26d76     00          | 	byte	0
26d77                 | LR__4429
26d77     57 6F 72 6B 
26d7b     69 6E 67 20 
26d7f     64 69 72 65 
26d83     63 74 6F 72 
26d87     79 3A 20    | 	byte	"Working directory: "
26d8a     00          | 	byte	0
26d8b                 | LR__4430
26d8b     2A          | 	byte	"*"
26d8c     00          | 	byte	0
26d8d                 | LR__4431
26d8d                 | 	byte	
26d8d     00          | 	byte	0
26d8e                 | LR__4432
26d8e     5B 64 69 72 
26d92     5D 20       | 	byte	"[dir] "
26d94     00          | 	byte	0
26d95                 | LR__4433
26d95     2A          | 	byte	"*"
26d96     00          | 	byte	0
26d97                 | LR__4434
26d97                 | 	byte	
26d97     00          | 	byte	0
26d98                 | LR__4435
26d98     2D 2D 2D 2D 
26d9c     2D 6D 6F 72 
26da0     65 2C 20 70 
26da4     72 65 73 73 
26da8     20 61 6E 79 
26dac     20 6B 65 79 | 	byte	"-----more, press any key"
26db0     00          | 	byte	0
26db1                 | LR__4436
26db1     20 20 20 20 
      ...             
26dc9     20 20 20 20 
26dcd     20          | 	byte	"                             "
26dce     00          | 	byte	0
26dcf                 | LR__4437
26dcf     2F          | 	byte	"/"
26dd0     00          | 	byte	0
26dd1                 | LR__4438
26dd1     2F 73 64 2F 
26dd5     62 69 6E 2F | 	byte	"/sd/bin/"
26dd9     00          | 	byte	0
26dda                 | LR__4439
26dda     53 79 73 74 
26dde     65 6D 20 65 
26de2     72 72 6F 72 
26de6     20          | 	byte	"System error "
26de7     00          | 	byte	0
26de8                 | LR__4440
26de8     3A 20       | 	byte	": "
26dea     00          | 	byte	0
26deb                 | LR__4441
26deb                 | 	byte	
26deb     00          | 	byte	0
26dec                 | LR__4442
26dec     45 78 70 65 
26df0     63 74 65 64 
26df4     20 6E 75 6D 
26df8     62 65 72 2C 
26dfc     20 67 6F 74 
26e00     20 73 6F 6D 
26e04     65 74 68 69 
26e08     6E 67 20 65 
26e0c     6C 73 65 2E | 	byte	"Expected number, got something else."
26e10     00          | 	byte	0
26e11                 | LR__4443
26e11     43 61 6E 6E 
26e15     6F 74 20 61 
26e19     64 64 20 61 
26e1d     20 6E 75 6D 
26e21     62 65 72 20 
26e25     74 6F 20 61 
26e29     20 73 74 72 
26e2d     69 6E 67 2E | 	byte	"Cannot add a number to a string."
26e31     00          | 	byte	0
26e32                 | LR__4444
26e32     43 61 6E 6E 
26e36     6F 74 20 73 
26e3a     75 62 73 74 
26e3e     72 61 63 74 
26e42     20 73 74 72 
26e46     69 6E 67 73 
26e4a     2E          | 	byte	"Cannot substract strings."
26e4b     00          | 	byte	0
26e4c                 | LR__4445
26e4c     55 6E 6B 6E 
26e50     6F 77 6E 20 
26e54     65 72 72 6F 
26e58     72 20 77 68 
26e5c     69 6C 65 20 
26e60     61 64 64 69 
26e64     6E 67 2E    | 	byte	"Unknown error while adding."
26e67     00          | 	byte	0
26e68                 | LR__4446
26e68     55 6E 6B 6E 
26e6c     6F 77 6E 20 
26e70     65 72 72 6F 
26e74     72 20 77 68 
26e78     69 6C 65 20 
26e7c     73 75 62 73 
26e80     74 72 61 63 
26e84     74 69 6E 67 
26e88     2E          | 	byte	"Unknown error while substracting."
26e89     00          | 	byte	0
26e8a                 | LR__4447
26e8a     43 61 6E 6E 
26e8e     6F 74 20 64 
26e92     6F 20 6C 6F 
26e96     67 69 63 20 
26e9a     6F 70 65 72 
26e9e     61 74 69 6F 
26ea2     6E 20 6F 6E 
26ea6     20 73 74 72 
26eaa     69 6E 67 20 
26eae     6F 72 20 66 
26eb2     6C 6F 61 74 
26eb6     2E          | 	byte	"Cannot do logic operation on string or float."
26eb7     00          | 	byte	0
26eb8                 | LR__4448
26eb8     55 6E 6B 6E 
26ebc     6F 77 6E 20 
26ec0     65 72 72 6F 
26ec4     72 20 77 68 
26ec8     69 6C 65 20 
26ecc     64 6F 69 6E 
26ed0     67 20 6C 6F 
26ed4     67 69 63 20 
26ed8     6F 70 65 72 
26edc     61 74 69 6F 
26ee0     6E 2E       | 	byte	"Unknown error while doing logic operation."
26ee2     00          | 	byte	0
26ee3                 | LR__4449
26ee3     43 61 6E 6E 
26ee7     6F 74 20 6D 
26eeb     75 6C 74 69 
26eef     70 6C 79 20 
26ef3     73 74 72 69 
26ef7     6E 67 73 2E | 	byte	"Cannot multiply strings."
26efb     00          | 	byte	0
26efc                 | LR__4450
26efc     55 6E 6B 6E 
26f00     6F 77 6E 20 
26f04     65 72 72 6F 
26f08     72 20 77 68 
26f0c     69 6C 65 20 
26f10     6D 75 6C 74 
26f14     69 70 6C 79 
26f18     69 6E 67 2E | 	byte	"Unknown error while multiplying."
26f1c     00          | 	byte	0
26f1d                 | LR__4451
26f1d     43 61 6E 6E 
26f21     6F 74 20 64 
26f25     69 76 69 64 
26f29     65 20 73 74 
26f2d     72 69 6E 67 
26f31     73 2E       | 	byte	"Cannot divide strings."
26f33     00          | 	byte	0
26f34                 | LR__4452
26f34     55 6E 6B 6E 
26f38     6F 77 6E 20 
26f3c     65 72 72 6F 
26f40     72 20 77 68 
26f44     69 6C 65 20 
26f48     64 69 76 69 
26f4c     64 69 6E 67 
26f50     2E          | 	byte	"Unknown error while dividing."
26f51     00          | 	byte	0
26f52                 | LR__4453
26f52     43 61 6E 6E 
26f56     6F 74 20 63 
26f5a     6F 6D 70 75 
26f5e     74 65 20 61 
26f62     20 70 6F 77 
26f66     65 72 20 6F 
26f6a     66 20 61 20 
26f6e     73 74 72 69 
26f72     6E 67 2E    | 	byte	"Cannot compute a power of a string."
26f75     00          | 	byte	0
26f76                 | LR__4454
26f76     55 6E 6B 6E 
26f7a     6F 77 6E 20 
26f7e     65 72 72 6F 
26f82     72 20 77 68 
26f86     69 6C 65 20 
26f8a     63 6F 6D 70 
26f8e     75 74 69 6E 
26f92     67 20 61 20 
26f96     70 6F 77 65 
26f9a     72 2E       | 	byte	"Unknown error while computing a power."
26f9c     00          | 	byte	0
26f9d                 | LR__4455
26f9d     52 69 67 68 
26fa1     74 20 70 61 
26fa5     72 65 6E 74 
26fa9     68 65 73 69 
26fad     73 20 65 78 
26fb1     70 65 63 74 
26fb5     65 64 2E    | 	byte	"Right parenthesis expected."
26fb8     00          | 	byte	0
26fb9                 | LR__4456
26fb9     45 78 70 65 
26fbd     63 74 65 64 
26fc1     20 73 74 72 
26fc5     69 6E 67 2E | 	byte	"Expected string."
26fc9     00          | 	byte	0
26fca                 | LR__4457
26fca     45 78 70 65 
26fce     63 74 65 64 
26fd2     20 66 6C 6F 
26fd6     61 74 2E    | 	byte	"Expected float."
26fd9     00          | 	byte	0
26fda                 | LR__4458
26fda     45 78 70 65 
26fde     63 74 65 64 
26fe2     20 75 6E 73 
26fe6     69 67 6E 65 
26fea     64 20 69 6E 
26fee     74 65 67 65 
26ff2     72 2E       | 	byte	"Expected unsigned integer."
26ff4     00          | 	byte	0
26ff5                 | LR__4459
26ff5     45 78 70 65 
26ff9     63 74 65 64 
26ffd     20 69 6E 74 
27001     65 67 65 72 
27005     2E          | 	byte	"Expected integer."
27006     00          | 	byte	0
27007                 | LR__4460
27007     4E 6F 20 6D 
2700b     6F 72 65 20 
2700f     76 61 72 69 
27013     61 62 6C 65 
27017     20 73 6C 6F 
2701b     74 73 2E    | 	byte	"No more variable slots."
2701e     00          | 	byte	0
2701f                 | LR__4461
2701f     56 61 72 69 
27023     61 62 6C 65 
27027     20 6E 6F 74 
2702b     20 66 6F 75 
2702f     6E 64 2E    | 	byte	"Variable not found."
27032     00          | 	byte	0
27033                 | LR__4462
27033     43 6F 6D 6D 
27037     61 20 65 78 
2703b     70 65 63 74 
2703f     65 64 2E    | 	byte	"Comma expected."
27042     00          | 	byte	0
27043                 | LR__4463
27043     43 6F 6D 6D 
27047     61 20 6F 72 
2704b     20 73 65 6D 
2704f     69 63 6F 6C 
27053     6F 6E 20 65 
27057     78 70 65 63 
2705b     74 65 64 2E | 	byte	"Comma or semicolon expected."
2705f     00          | 	byte	0
27060                 | LR__4464
27060     55 6E 6B 6E 
27064     6F 77 6E 20 
27068     63 6F 6D 6D 
2706c     61 6E 64 2E | 	byte	"Unknown command."
27070     00          | 	byte	0
27071                 | LR__4465
27071     53 74 61 63 
27075     6B 20 75 6E 
27079     64 65 72 66 
2707d     6C 6F 77 2E | 	byte	"Stack underflow."
27081     00          | 	byte	0
27082                 | LR__4466
27082     43 61 6E 6E 
27086     6F 74 20 65 
2708a     78 65 63 75 
2708e     74 65 20 67 
27092     6F 74 6F 20 
27096     69 6E 20 74 
2709a     68 65 20 69 
2709e     6D 6D 65 64 
270a2     69 61 74 65 
270a6     20 6D 6F 64 
270aa     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
270ac     00          | 	byte	0
270ad                 | LR__4467
270ad     43 61 6E 6E 
270b1     6F 74 20 6C 
270b5     6F 61 64 20 
270b9     66 72 6F 6D 
270bd     20 74 68 69 
270c1     73 20 66 69 
270c5     6C 65 2E    | 	byte	"Cannot load from this file."
270c8     00          | 	byte	0
270c9                 | LR__4468
270c9     54 68 65 20 
270cd     70 72 6F 67 
270d1     72 61 6D 20 
270d5     69 73 20 65 
270d9     6D 70 74 79 
270dd     2E          | 	byte	"The program is empty."
270de     00          | 	byte	0
270df                 | LR__4469
270df     49 66 20 61 
270e3     66 74 65 72 
270e7     20 69 66 2E | 	byte	"If after if."
270eb     00          | 	byte	0
270ec                 | LR__4470
270ec     45 6D 70 74 
270f0     79 20 65 78 
270f4     70 72 65 73 
270f8     73 69 6F 6E 
270fc     2E          | 	byte	"Empty expression."
270fd     00          | 	byte	0
270fe                 | LR__4471
270fe     53 74 72 69 
27102     6E 67 20 65 
27106     78 70 65 63 
2710a     74 65 64 2E | 	byte	"String expected."
2710e     00          | 	byte	0
2710f                 | LR__4472
2710f     49 6E 74 65 
27113     72 70 72 65 
27117     74 65 72 20 
2711b     69 6E 74 65 
2711f     72 6E 61 6C 
27123     20 65 72 72 
27127     6F 72 2E    | 	byte	"Interpreter internal error."
2712a     00          | 	byte	0
2712b                 | LR__4473
2712b     45 78 70 65 
2712f     63 74 65 64 
27133     20 61 73 73 
27137     69 67 6E 2E | 	byte	"Expected assign."
2713b     00          | 	byte	0
2713c                 | LR__4474
2713c     45 78 70 65 
27140     63 74 65 64 
27144     20 27 74 6F 
27148     27 2E       | 	byte	"Expected 'to'."
2714a     00          | 	byte	0
2714b                 | LR__4475
2714b     45 78 70 65 
2714f     63 74 65 64 
27153     20 69 6E 74 
27157     65 67 65 72 
2715b     20 76 61 72 
2715f     69 61 62 6C 
27163     65 2E       | 	byte	"Expected integer variable."
27165     00          | 	byte	0
27166                 | LR__4476
27166     55 6E 69 6E 
2716a     69 74 69 61 
2716e     6C 69 7A 65 
27172     64 20 76 61 
27176     72 69 61 62 
2717a     6C 65 20 69 
2717e     6E 20 27 6E 
27182     65 78 74 27 
27186     2C 20 75 73 
2718a     65 20 27 66 
2718e     6F 72 27 20 
27192     62 65 66 6F 
27196     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
27199     00          | 	byte	0
2719a                 | LR__4477
2719a     4E 6F 20 6D 
2719e     6F 72 65 20 
271a2     73 6C 6F 74 
271a6     73 20 66 6F 
271aa     72 20 27 66 
271ae     6F 72 27 2E | 	byte	"No more slots for 'for'."
271b2     00          | 	byte	0
271b3                 | LR__4478
271b3     27 4E 65 78 
271b7     74 27 20 64 
271bb     6F 65 73 6E 
271bf     27 74 20 6D 
271c3     61 74 63 68 
271c7     20 27 66 6F 
271cb     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
271ce     00          | 	byte	0
271cf                 | LR__4479
271cf     27 47 6F 74 
271d3     6F 27 20 74 
271d7     61 72 67 65 
271db     74 20 6C 69 
271df     6E 65 20 6E 
271e3     6F 74 20 66 
271e7     6F 75 6E 64 
271eb     2E          | 	byte	"'Goto' target line not found."
271ec     00          | 	byte	0
271ed                 | LR__4480
271ed     42 61 64 20 
271f1     6E 75 6D 62 
271f5     65 72 20 6F 
271f9     66 20 70 61 
271fd     72 61 6D 65 
27201     74 65 72 73 | 	byte	"Bad number of parameters"
27205     00          | 	byte	0
27206                 | LR__4481
27206     46 75 6E 63 
2720a     74 69 6F 6E 
2720e     20 75 6E 64 
27212     65 66 69 6E 
27216     65 64 20 66 
2721a     6F 72 20 73 
2721e     74 72 69 6E 
27222     67 73       | 	byte	"Function undefined for strings"
27224     00          | 	byte	0
27225                 | LR__4482
27225     42 61 64 20 
27229     70 61 72 61 
2722d     6D 65 74 65 
27231     72 2E       | 	byte	"Bad parameter."
27233     00          | 	byte	0
27234                 | LR__4483
27234     43 61 6E 6E 
27238     6F 74 20 64 
2723c     65 63 6C 61 
27240     72 65 20 61 
27244     6E 20 61 72 
27248     72 61 79 3A 
2724c     20 74 68 65 
27250     20 76 61 72 
27254     69 61 62 6C 
27258     65 20 65 78 
2725c     69 73 74 73 
27260     2E          | 	byte	"Cannot declare an array: the variable exists."
27261     00          | 	byte	0
27262                 | LR__4484
27262     45 78 70 65 
27266     63 74 65 64 
2726a     20 27 28 27 
2726e     2E          | 	byte	"Expected '('."
2726f     00          | 	byte	0
27270                 | LR__4485
27270     45 78 70 65 
27274     63 74 65 64 
27278     20 27 29 27 
2727c     20 6F 72 20 
27280     27 2C 27 2E | 	byte	"Expected ')' or ','."
27284     00          | 	byte	0
27285                 | LR__4486
27285     4E 6F 20 6D 
27289     6F 72 65 20 
2728d     74 68 61 6E 
27291     20 33 20 64 
27295     69 6D 65 6E 
27299     73 69 6F 6E 
2729d     73 20 73 75 
272a1     70 70 6F 72 
272a5     74 65 64    | 	byte	"No more than 3 dimensions supported"
272a8     00          | 	byte	0
272a9                 | LR__4487
272a9     56 61 72 69 
272ad     61 62 6C 65 
272b1     20 6E 61 6D 
272b5     65 20 65 78 
272b9     70 65 63 74 
272bd     65 64       | 	byte	"Variable name expected"
272bf     00          | 	byte	0
272c0                 | LR__4488
272c0     54 79 70 65 
272c4     20 6E 61 6D 
272c8     65 20 65 78 
272cc     70 65 63 74 
272d0     65 64       | 	byte	"Type name expected"
272d2     00          | 	byte	0
272d3                 | LR__4489
272d3     54 79 70 65 
272d7     20 6E 6F 74 
272db     20 73 75 70 
272df     70 6F 72 74 
272e3     65 64 20 79 
272e7     65 74       | 	byte	"Type not supported yet"
272e9     00          | 	byte	0
272ea                 | LR__4490
272ea     45 72 72 6F 
272ee     72 20       | 	byte	"Error "
272f0     00          | 	byte	0
272f1                 | LR__4491
272f1     3A 20       | 	byte	": "
272f3     00          | 	byte	0
272f4                 | LR__4492
272f4     2F 73 64    | 	byte	"/sd"
272f7     00          | 	byte	0
272f8                 | LR__4493
272f8     2F 73 64 2F 
272fc     62 61 73    | 	byte	"/sd/bas"
272ff     00          | 	byte	0
27300                 | LR__4494
27300     2F 73 64 2F 
27304     62 61 73    | 	byte	"/sd/bas"
27307     00          | 	byte	0
27308                 | LR__4495
27308     20 42 41 53 
2730c     49 43 20 62 
27310     79 74 65 73 
27314     20 66 72 65 
27318     65          | 	byte	" BASIC bytes free"
27319     00          | 	byte	0
2731a                 | LR__4496
2731a     52 65 61 64 
2731e     79          | 	byte	"Ready"
2731f     00          | 	byte	0
27320                 | LR__4497
27320     20          | 	byte	" "
27321     00          | 	byte	0
27322                 | LR__4498
27322     20          | 	byte	" "
27323     00          | 	byte	0
27324                 | LR__4499
27324                 | 	byte	
27324     00          | 	byte	0
27325                 | LR__4500
27325                 | 	byte	
27325     00          | 	byte	0
27326     00 00       | 	alignl
27328                 | _dat_
27328     00 00 00 00 
2732c     00 00 00 00 
27330     00 00 00 00 
27334     00 00 00 00 | 	byte	$00[16]
27338     61 41 17 0E 
2733c     62 42 00 00 
27340     63 43 19 10 
27344     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
27348     65 45 18 0F 
2734c     66 46 00 00 
27350     67 47 00 00 
27354     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
27358     69 49 00 00 
2735c     6A 4A 00 00 
27360     6B 4B 00 00 
27364     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
27368     6D 4D 00 00 
2736c     6E 4E 1A 11 
27370     6F 4F 1E 15 
27374     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
27378     71 51 00 00 
2737c     72 52 00 00 
27380     73 53 1B 12 
27384     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
27388     75 55 00 00 
2738c     76 56 00 00 
27390     77 57 00 00 
27394     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
27398     79 59 00 00 
2739c     7A 5A 1D 14 
273a0     31 21 04 00 
273a4     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
273a8     33 23 06 00 
273ac     34 24 07 00 
273b0     35 25 08 00 
273b4     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
273b8     37 26 0A 00 
273bc     38 2A 0B 00 
273c0     39 28 0C 00 
273c4     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
273c8     8D 8D 00 00 
273cc     9B 9B 00 00 
273d0     88 88 00 00 
273d4     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
273d8     20 20 00 00 
273dc     2D 5F 00 00 
273e0     3D 2B 00 00 
273e4     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
273e8     5D 7D 00 00 
273ec     5C 7C 00 00 
273f0     23 7E 00 00 
273f4     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
273f8     27 22 00 00 
273fc     60 7E 03 00 
27400     2C 3C 00 00 
27404     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
27408     2F 3F 00 00 
2740c     B9 B9 00 00 
27410     BA 00 00 00 
27414     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
27418     BC 00 00 00 
2741c     BD 00 00 00 
27420     BE 00 00 00 
27424     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
27428     C0 00 00 00 
2742c     C1 00 00 00 
27430     C2 00 00 00 
27434     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
27438     C4 00 00 00 
2743c     C5 00 00 00 
27440     C6 00 00 00 
27444     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
27448     C8 00 00 00 
2744c     C9 00 00 00 
27450     CA 00 00 00 
27454     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
27458     7F 7F 00 00 
2745c     CC 00 00 00 
27460     CD 00 00 00 
27464     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
27468     CF 00 00 00 
2746c     D0 00 00 00 
27470     D1 00 00 00 
27474     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
27478     2F 2F 00 00 
2747c     2A 2A 00 00 
27480     2D 2D 00 00 
27484     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
27488     8D 8D 00 00 
2748c     31 31 00 00 
27490     32 32 00 00 
27494     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
27498     34 34 00 00 
2749c     35 35 00 00 
274a0     36 36 00 00 
274a4     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
274a8     38 38 00 00 
274ac     39 39 00 00 
274b0     30 30 00 00 
274b4     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
274b8     5C 7C 00 00 
274bc     00 00 00 00 
274c0     00 00 00 00 
274c4     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
274c8     00 00 00 00 
      ...             
27520     00 00 00 00 
27524     00 00 00 00 | 	byte	$00[96]
27528     2B 00 A6 F2 
2752c     24 A7 09 80 
27530     5B 88 4D 89 
27534     80 88 A5 88 | atari_spl file "atari.spl"
27538     6D 88 B8 88 
2753c     80 88 CB 88 
27540     92 88 A5 88 
27544     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
27548     A5 88 CA 88 
2754c     A6 88 DD 88 
27550     B8 88 AB 89 
27554     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
27558     C8 AD C6 F1 
2755c     91 06 B6 FF 
27560     13 00 4A 00 
27564     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
27568     5D 00 5E 00 
2756c     5D 00 5E 00 
27570     5E 00 5D 00 
27574     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
27578     38 00 83 00 
2757c     25 00 83 00 
27580     C3 FE D1 04 
27584     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
27588     48 88 38 85 
2758c     41 8A CB 88 
27590     28 89 B8 88 
27594     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
27598     15 89 03 89 
2759c     02 89 15 89 
275a0     16 89 15 89 
275a4     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
275a8     15 89 3A 89 
275ac     72 89 E3 89 
275b0     52 83 AD 97 
275b4     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
275b8     0C 02 B6 FF 
275bc     E1 00 A8 00 
275c0     F3 00 A8 00 
275c4     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
275c8     CE 00 CD 00 
275cc     CD 00 BA 00 
275d0     E1 00 BB 00 
275d4     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
275d8     DF 00 C9 FF 
275dc     E6 01 B6 06 
275e0     EE DD 8D 98 
275e4     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
275e8     97 89 73 89 
275ec     3B 89 60 89 
275f0     60 89 60 89 
275f4     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
275f8     73 89 72 89 
275fc     85 89 73 89 
27600     AA 89 60 89 
27604     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
27608     E8 8A 18 86 
2760c     92 88 A5 C2 
27610     E0 00 C3 05 
27614     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
27618     F2 00 64 01 
2761c     06 01 3E 01 
27620     2B 01 2B 01 
27624     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
27628     2B 01 2A 01 
2762c     2B 01 2B 01 
27630     2B 01 18 01 
27634     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
27638     39 07 61 F3 
2763c     C0 AF 37 85 
27640     0F 88 8B 8A 
27644     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
27648     AB 89 D0 89 
2764c     AB 89 D0 89 
27650     D0 89 CF 89 
27654     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
27658     D0 89 F5 89 
2765c     BD 89 08 8A 
27660     CF 89 E8 8A 
27664     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
27668     53 B3 0D F8 
2766c     F4 07 38 00 
27670     63 01 63 01 
27674     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
27678     88 01 88 01 
2767c     76 01 88 01 
27680     88 01 89 01 
27684     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
27688     75 01 AE 01 
2768c     76 01 88 01 
27690     4A 00 46 06 
27694     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
27698     08 8A 9A 86 
2769c     33 8B 08 8A 
276a0     2D 8A F5 89 
276a4     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
276a8     2D 8A 2D 8A 
276ac     2E 8A 1B 8A 
276b0     40 8A 2D 8A 
276b4     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
276b8     2E 8A 79 8A 
276bc     66 8A C8 8B 
276c0     72 82 2B 97 
276c4     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
276c8     1D 02 05 01 
276cc     F8 01 C0 01 
276d0     0B 02 C0 01 
276d4     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
276d8     F9 01 D3 01 
276dc     F8 01 D3 01 
276e0     F8 01 D2 01 
276e4     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
276e8     E6 01 2B 01 
276ec     8E 02 5F 07 
276f0     F7 E2 ED 9C 
276f4     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
276f8     E8 8A 78 8A 
276fc     78 8A 65 8A 
27700     8B 8A 78 8A 
27704     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
27708     8B 8A 9D 8A 
2770c     9D 8A 8B 8A 
27710     C2 8A 78 8A 
27714     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
27718     70 8C 18 86 
2771c     8B 8A 23 C9 
27720     CB 03 C4 05 
27724     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
27728     0B 02 7B 02 
2772c     1E 02 55 02 
27730     30 02 43 02 
27734     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
27738     43 02 44 02 
2773c     43 02 30 02 
27740     68 02 31 02 
27744     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
27748     07 08 3F F7 
2774c     73 B2 13 85 
27750     15 89 ED 8B 
27754     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
27758     B0 8A FB 8A 
2775c     D5 8A FA 8A 
27760     E8 8A FB 8A 
27764     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
27768     E8 8A 21 8B 
2776c     E7 8A 33 8B 
27770     E8 8A 26 8C 
27774     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
27778     8D B0 27 F6 
2777c     9C 08 AD 01 
27780     7B 02 8D 02 
27784     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
27788     A1 02 A0 02 
2778c     A1 02 A0 02 
27790     A0 02 A0 02 
27794     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
27798     7B 02 D8 02 
2779c     7B 02 C6 02 
277a0     3E 01 C3 05 
277a4     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
277a8     00 8C 2A 86 
277ac     E0 8C FA 8A 
277b0     6A 8B FB 8A 
277b4     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
277b8     45 8B 45 8B 
277bc     45 8B 6B 8B 
277c0     46 8B 59 8B 
277c4     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
277c8     6B 8B 6B 8B 
277cc     6B 8B 6B 8B 
277d0     7D 8B 7D 8B 
277d4     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
277d8     90 8B 91 8B 
277dc     90 8B 90 8B 
277e0     A3 8B A3 8B 
277e4     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
277e8     B5 8B B6 8B 
277ec     B5 8B B5 8B 
277f0     B6 8B C8 8B 
277f4     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
277f8     C8 8B DA 8B 
277fc     DB 8B DB 8B 
27800     DB 8B DC 8B 
27804     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
27808     EE 8B EE 8B 
2780c     00 8C 01 8C 
27810     00 8C 01 8C 
27814     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
27818     12 8C 13 8C 
2781c     13 8C 26 8C 
27820     26 8C 26 8C 
27824     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
27828     38 8C 38 8C 
2782c     38 8C 38 8C 
27830     4B 8C 4B 8C 
27834     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
27838     5E 8C 5E 8C 
2783c     5E 8C 5E 8C 
27840     70 8C 70 8C 
27844     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
27848     70 8C 83 8C 
2784c     83 8C 83 8C 
27850     83 8C 96 8C 
27854     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
27858     95 8C A9 8C 
2785c     A9 8C A8 8C 
27860     A8 8C A8 8C 
27864     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
27868     BB 8C BB 8C 
2786c     BB 8C CE 8C 
27870     CE 8C CE 8C 
27874     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
27878     E0 8C E1 8C 
2787c     E1 8C E0 8C 
27880     F4 8C F2 8C 
27884     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
27888     05 8D 05 8D 
2788c     06 8D 06 8D 
27890     19 8D 19 8D 
27894     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
27898     18 8D 2B 8D 
2789c     2B 8D 2B 8D 
278a0     2A 8D 3E 8D 
278a4     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
278a8     3E 8D 51 8D 
278ac     50 8D 50 8D 
278b0     50 8D 51 8D 
278b4     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
278b8     63 8D 64 8D 
278bc     76 8D 75 8D 
278c0     75 8D 76 8D 
278c4     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
278c8     88 8D 88 8D 
278cc     89 8D 9B 8D 
278d0     9A 8D 9B 8D 
278d4     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
278d8     AD 8D AE 8D 
278dc     AD 8D AE 8D 
278e0     C1 8D C1 8D 
278e4     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
278e8     D3 8D D3 8D 
278ec     D3 8D D3 8D 
278f0     D3 8D E6 8D 
278f4     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
278f8     E6 8D E6 8D 
278fc     F9 8D F9 8D 
27900     F9 8D F8 8D 
27904     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
27908     0B 8E 0B 8E 
2790c     1D 8E 1D 8E 
27910     1E 8E 1E 8E 
27914     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
27918     31 8E 31 8E 
2791c     31 8E 42 8E 
27920     43 8E 43 8E 
27924     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
27928     56 8E 56 8E 
2792c     55 8E 56 8E 
27930     68 8E 69 8E 
27934     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
27938     69 8E 7B 8E 
2793c     7C 8E 7B 8E 
27940     7B 8E 8D 8E 
27944     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
27948     8D 8E A1 8E 
2794c     A0 8E A1 8E 
27950     A1 8E A0 8E 
27954     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
27958     B3 8E B3 8E 
2795c     C6 8E C5 8E 
27960     C6 8E C6 8E 
27964     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
27968     D8 8E D9 8E 
2796c     D8 8E EC 8E 
27970     EB 8E EC 8E 
27974     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
27978     FE 8E FE 8E 
2797c     FE 8E FE 8E 
27980     10 8F 10 8F 
27984     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
27988     11 8F 23 8F 
2798c     24 8F 23 8F 
27990     24 8F 37 8F 
27994     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
27998     36 8F 36 8F 
2799c     48 8F 49 8F 
279a0     49 8F 49 8F 
279a4     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
279a8     5B 8F 5C 8F 
279ac     5B 8F 6E 8F 
279b0     6E 8F 6E 8F 
279b4     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
279b8     81 8F 81 8F 
279bc     81 8F 81 8F 
279c0     93 8F 93 8F 
279c4     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
279c8     93 8F A6 8F 
279cc     A6 8F A6 8F 
279d0     A6 8F B9 8F 
279d4     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
279d8     B9 8F B9 8F 
279dc     CC 8F CB 8F 
279e0     CB 8F CC 8F 
279e4     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
279e8     DF 8F DE 8F 
279ec     DE 8F F1 8F 
279f0     F1 8F F1 8F 
279f4     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
279f8     03 90 04 90 
279fc     04 90 04 90 
27a00     16 90 17 90 
27a04     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
27a08     29 90 28 90 
27a0c     29 90 28 90 
27a10     29 90 3C 90 
27a14     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
27a18     3C 90 4F 90 
27a1c     4E 90 4E 90 
27a20     4E 90 4E 90 
27a24     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
27a28     61 90 61 90 
27a2c     73 90 74 90 
27a30     74 90 74 90 
27a34     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
27a38     87 90 86 90 
27a3c     87 90 86 90 
27a40     99 90 99 90 
27a44     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
27a48     AB 90 AB 90 
27a4c     AC 90 AB 90 
27a50     AB 90 BF 90 
27a54     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
27a58     BE 90 D1 90 
27a5c     D0 90 D1 90 
27a60     D1 90 D1 90 
27a64     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
27a68     E3 90 E4 90 
27a6c     F6 90 F6 90 
27a70     F6 90 F6 90 
27a74     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
27a78     09 91 0A 91 
27a7c     0A 91 1C 91 
27a80     1C 91 1C 91 
27a84     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
27a88     2F 91 2E 91 
27a8c     2F 91 2F 91 
27a90     2E 91 41 91 
27a94     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
27a98     41 91 53 91 
27a9c     54 91 54 91 
27aa0     53 91 54 91 
27aa4     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
27aa8     67 91 67 91 
27aac     79 91 7A 91 
27ab0     79 91 78 91 
27ab4     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
27ab8     8C 91 8B 91 
27abc     8C 91 8C 91 
27ac0     9E 91 9E 91 
27ac4     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
27ac8     B1 91 B1 91 
27acc     B2 91 B1 91 
27ad0     B1 91 C4 91 
27ad4     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
27ad8     C4 91 D6 91 
27adc     D7 91 D7 91 
27ae0     D7 91 D6 91 
27ae4     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
27ae8     EA 91 EA 91 
27aec     EA 91 FC 91 
27af0     FC 91 FB 91 
27af4     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
27af8     0E 92 0F 92 
27afc     0F 92 0E 92 
27b00     21 92 21 92 
27b04     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
27b08     21 92 34 92 
27b0c     33 92 34 92 
27b10     34 92 47 92 
27b14     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
27b18     46 92 47 92 
27b1c     59 92 59 92 
27b20     59 92 59 92 
27b24     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
27b28     6C 92 6C 92 
27b2c     6B 92 7E 92 
27b30     7E 92 7E 92 
27b34     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
27b38     92 92 91 92 
27b3c     91 92 90 92 
27b40     91 92 A4 92 
27b44     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
27b48     A3 92 B6 92 
27b4c     B6 92 B7 92 
27b50     B7 92 B6 92 
27b54     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
27b58     CA 92 C9 92 
27b5c     CA 92 DC 92 
27b60     DC 92 DC 92 
27b64     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
27b68     EF 92 EF 92 
27b6c     EF 92 EF 92 
27b70     01 93 01 93 
27b74     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
27b78     15 93 14 93 
27b7c     14 93 14 93 
27b80     14 93 27 93 
27b84     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
27b88     27 93 39 93 
27b8c     3A 93 39 93 
27b90     39 93 39 93 
27b94     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
27b98     4B 93 4C 93 
27b9c     5F 93 5F 93 
27ba0     5F 93 5E 93 
27ba4     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
27ba8     5F 93 84 93 
27bac     4C 93 96 93 
27bb0     5F 93 AE 94 
27bb4     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
27bb8     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
27bbc     7A D7 00 80 
27bc0     87 8A 48 8F 
27bc4     EC 8C 76 8D 
27bc8     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
27bcc     3C 8D 82 8D 
27bd0     42 8D 88 8D 
27bd4     8C 8D 8E 8D 
27bd8     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
27bdc     97 8D DE 8D 
27be0     E1 8D F1 8E 
27be4     D8 8C A3 83 
27be8     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
27bec     65 71 C9 65 
27bf0     FC 64 C4 65 
27bf4     C1 65 BF 65 
27bf8     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
27bfc     B6 65 B4 65 
27c00     B2 65 AE 65 
27c04     AC 65 ED 65 
27c08     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
27c0c     5E 65 25 66 
27c10     FA 62 23 6B 
27c14     B5 6C 61 0A 
27c18     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
27c1c     5D 90 BE 8D 
27c20     47 8E C3 8D 
27c24     09 8E C9 8D 
27c28     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
27c2c     15 8E 19 8E 
27c30     1B 8E 62 8E 
27c34     64 8E 68 8E 
27c38     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
27c3c     B5 8E 4C 90 
27c40     FA 84 3C 9D 
27c44     98 13 79 6D 
27c48     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
27c4c     D9 66 50 66 
27c50     D4 66 4B 66 
27c54     8C 66 46 66 
27c58     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
27c5c     81 66 3A 66 
27c60     7C 66 36 66 
27c64     76 66 30 66 
27c68     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
27c6c     6B 66 88 72 
27c70     BF 37 E7 B7 
27c74     75 83 8B 8E 
27c78     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
27c7c     94 8E 96 8E 
27c80     DD 8E 9C 8E 
27c84     E2 8E A2 8E 
27c88     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
27c8c     EE 8E AE 8E 
27c90     38 8F B5 8E 
27c94     3F 8F FD 8E 
27c98     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
27c9c     A5 87 1E E3 
27ca0     6D 5D FA 71 
27ca4     41 64 25 67 
27ca8     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
27cac     D9 66 1A 67 
27cb0     18 67 15 67 
27cb4     12 67 0F 67 
27cb8     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
27cbc     07 67 C0 66 
27cc0     01 67 BC 66 
27cc4     B8 66 DE 64 
27cc8     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
27ccc     43 E5 1F 8B 
27cd0     14 8A F1 90 
27cd4     1C 8F 63 8F 
27cd8     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
27cdc     29 8F 6E 8F 
27ce0     72 8F 75 8F 
27ce4     34 8F BE 8F 
27ce8     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
27cec     84 8F 87 8F 
27cf0     CC 8F 56 90 
27cf4     67 91 49 80 
27cf8     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
27cfc     46 77 A6 66 
27d00     E8 66 B0 67 
27d04     AD 67 ED 67 
27d08     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
27d0c     A2 67 E3 67 
27d10     9D 67 9A 67 
27d14     98 67 94 67 
27d18     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
27d1c     49 67 CD 67 
27d20     28 65 5F 6E 
27d24     82 67 3A 01 
27d28     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
27d2c     C2 91 A9 8F 
27d30     EF 8F AE 8F 
27d34     F4 8F B5 8F 
27d38     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
27d3c     01 90 03 90 
27d40     07 90 09 90 
27d44     0C 90 53 90 
27d48     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
27d4c     18 90 44 93 
27d50     85 84 D6 9D 
27d54     87 1F 2F 75 
27d58     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
27d5c     C4 68 F6 67 
27d60     BE 68 F1 67 
27d64     76 68 2E 68 
27d68     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
27d6c     27 68 24 68 
27d70     64 68 1E 68 
27d74     5F 68 19 68 
27d78     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
27d7c     DC 68 56 72 
27d80     7E 36 C2 B8 
27d84     D7 84 73 90 
27d88     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
27d8c     7B 90 7F 90 
27d90     82 90 84 90 
27d94     CB 90 8B 90 
27d98     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
27d9c     D7 90 96 90 
27da0     20 91 59 90 
27da4     25 91 A2 90 
27da8     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
27dac     D0 89 40 EE 
27db0     12 64 C4 71 
27db4     29 66 0C 69 
27db8     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
27dbc     C0 68 02 69 
27dc0     FE 68 FB 68 
27dc4     F9 68 F6 68 
27dc8     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
27dcc     EE 68 A8 68 
27dd0     2C 69 5F 68 
27dd4     E2 68 81 66 
27dd8     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
27ddc     1E EB A6 8A 
27de0     73 8B 5E 93 
27de4     7B 90 48 91 
27de8     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
27dec     0D 91 11 91 
27df0     14 91 16 91 
27df4     5C 91 1C 91 
27df8     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
27dfc     68 91 AF 91 
27e00     2A 91 B5 91 
27e04     75 91 1A 94 
27e08     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
27e0c     70 0E CB 6C 
27e10     5D 6E C4 67 
27e14     99 69 54 69 
27e18     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
27e1c     D2 69 49 69 
27e20     89 69 86 69 
27e24     40 69 C4 69 
27e28     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
27e2c     35 69 76 69 
27e30     58 67 EB 6D 
27e34     E9 6D 89 0F 
27e38     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
27e3c     33 94 94 91 
27e40     D9 91 56 91 
27e44     E0 91 9F 91 
27e48     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
27e4c     EC 91 EE 91 
27e50     F1 91 F4 91 
27e54     F7 91 3D 92 
27e58     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
27e5c     46 92 21 94 
27e60     11 89 A4 9D 
27e64     FD 0E 8F 6C 
27e68     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
27e6c     28 6A E1 69 
27e70     65 6A 1F 6A 
27e74     5F 6A 1A 6A 
27e78     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
27e7c     54 6A 0F 6A 
27e80     4F 6A 09 6A 
27e84     06 6A 03 6A 
27e88     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
27e8c     23 68 69 77 
27e90     3A 4D 38 CA 
27e94     38 86 4E 91 
27e98     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
27e9c     64 92 24 92 
27ea0     6A 92 2A 92 
27ea4     70 92 30 92 
27ea8     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
27eac     7B 92 7E 92 
27eb0     C5 92 84 92 
27eb4     CB 92 8A 92 
27eb8     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
27ebc     4D 8D F9 E2 
27ec0     97 59 FE 74 
27ec4     DB 68 6D 6A 
27ec8     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
27ecc     A8 6A A5 6A 
27ed0     A3 6A 9F 6A 
27ed4     9D 6A 9B 6A 
27ed8     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
27edc     D6 6A 8F 6A 
27ee0     CF 6A 46 6A 
27ee4     CA 6A E1 67 
27ee8     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
27eec     D3 F7 15 92 
27ef0     90 8C BF 94 
27ef4     A6 92 EB 92 
27ef8     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
27efc     B1 92 F7 92 
27f00     FA 92 FD 92 
27f04     00 93 02 93 
27f08     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
27f0c     4F 93 52 93 
27f10     54 93 22 94 
27f14     5A 93 8F 88 
27f18     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
27f1c     1C 77 07 6C 
27f20     E8 69 7A 6B 
27f24     34 6B 75 6B 
27f28     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
27f2c     29 6B 26 6B 
27f30     24 6B 21 6B 
27f34     1D 6B 5E 6B 
27f38     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
27f3c     12 6B 52 6B 
27f40     34 69 34 6E 
27f44     BA 73 A4 24 
27f48     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
27f4c     7A 94 B3 93 
27f50     72 93 31 93 
27f54     78 93 7A 93 
27f58     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
27f5c     83 93 86 93 
27f60     89 93 D0 93 
27f64     D2 93 D5 93 
27f68     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
27f6c     DD 93 40 96 
27f70     30 8B 99 9C 
27f74     52 10 94 71 
27f78     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
27f7c     46 6C 79 6B 
27f80     40 6C B7 6B 
27f84     F7 6B B1 6B 
27f88     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
27f8c     EC 6B A5 6B 
27f90     A2 6B 9F 6B 
27f94     9D 6B 9A 6B 
27f98     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
27f9c     C8 6A E4 76 
27fa0     20 4B F9 CE 
27fa4     2E 8A 1A 92 
27fa8     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
27fac     FB 93 BA 93 
27fb0     01 94 03 94 
27fb4     4A 94 09 94 
27fb8     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
27fbc     55 94 14 94 
27fc0     9E 94 1A 94 
27fc4     61 94 20 94 
27fc8     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
27fcc     3E 87 E5 CD 
27fd0     5F 50 6C 78 
27fd4     B5 6A 04 6C 
27fd8     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
27fdc     83 6C 7F 6C 
27fe0     7C 6C 36 6C 
27fe4     76 6C 74 6C 
27fe8     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
27fec     6B 6C 25 6C 
27ff0     66 6C 1F 6C 
27ff4     1D 6C 41 6A 
27ff8     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
27ffc     BA FA FC 94 
28000     5B 8D 97 96 
28004     3B 94 C5 94 
28008     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
2800c     89 94 8C 94 
28010     8F 94 92 94 
28014     94 94 DB 94 
28018     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
2801c     E4 94 E7 94 
28020     2D 95 74 95 
28024     C8 96 15 89 
28028     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
2802c     CB 75 31 6F 
28030     7E 6B 10 6D 
28034     C9 6C 0A 6D 
28038     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
2803c     BD 6C FF 6C 
28040     FB 6C F9 6C 
28044     B2 6C F3 6C 
28048     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
2804c     A7 6C E8 6C 
28050     0D 6B 85 6F 
28054     C7 74 10 28 
28058     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
2805c     96 96 47 95 
28060     06 95 0A 95 
28064     0C 95 0F 95 
28068     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
2806c     17 95 5E 95 
28070     61 95 63 95 
28074     22 95 AC 95 
28078     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
2807c     72 95 17 98 
28080     59 8E 01 96 
28084     CF FC 5A 68 
28088     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
2808c     96 6D 50 6D 
28090     D5 6D 4A 6D 
28094     8C 6D 89 6D 
28098     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
2809c     80 6D 3A 6D 
280a0     7A 6D 77 6D 
280a4     75 6D 71 6D 
280a8     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
280ac     18 6C BC 78 
280b0     9A 4F 7E CF 
280b4     1F 89 F1 93 
280b8     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
280bc     D2 95 4E 95 
280c0     D7 95 53 95 
280c4     DD 95 E0 95 
280c8     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
280cc     A5 95 EB 95 
280d0     EE 95 F0 95 
280d4     37 96 B3 95 
280d8     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
280dc     1A 98 D5 8D 
280e0     C5 9F CD 0F 
280e4     0F 71 F3 73 
280e8     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
280ec     D9 6D 5E 6E 
280f0     D3 6D 58 6E 
280f4     12 6E 0F 6E 
280f8     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
280fc     49 6E BF 6D 
28100     87 6E 76 6D 
28104     81 6E 11 6B 
28108     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
2810c     3F 09 44 95 
28110     E5 8D 3F 99 
28114     D4 95 A2 96 
28118     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
2811c     23 96 69 96 
28120     6B 96 6E 96 
28124     71 96 74 96 
28128     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
2812c     BF 96 3C 96 
28130     C6 96 C8 96 
28134     A3 98 51 8D 
28138     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
2813c     CF 75 29 73 
28140     90 6C EC 6E 
28144     62 6E E7 6E 
28148     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
2814c     9A 6E 98 6E 
28150     95 6E 91 6E 
28154     8E 6E CF 6E 
28158     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
2815c     40 6E C3 6E 
28160     E8 6C 45 6F 
28164     A5 7B C9 35 
28168     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
2816c     2D 98 23 97 
28170     E1 96 A0 96 
28174     A4 96 EA 96 
28178     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
2817c     AF 96 F4 96 
28180     F8 96 3E 97 
28184     FD 96 43 97 
28188     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
2818c     08 97 6B 99 
28190     D6 92 88 91 
28194     D8 EE 84 66 
28198     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
2819c     2E 6F E7 6E 
281a0     6C 6F 24 6F 
281a4     21 6F 1F 6F 
281a8     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
281ac     17 6F 13 6F 
281b0     54 6F 0E 6F 
281b4     0B 6F 4B 6F 
281b8     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
281bc     27 6D 1C 7B 
281c0     19 59 9F DB 
281c4     66 8E BC 94 
281c8     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
281cc     67 97 26 97 
281d0     6D 97 2B 97 
281d4     72 97 32 97 
281d8     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
281dc     C1 97 7F 97 
281e0     C6 97 85 97 
281e4     CB 97 CE 97 
281e8     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
281ec     EC 8A C4 C6 
281f0     68 4C F4 7D 
281f4     63 6E E8 6E 
281f8     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
281fc     ED 6F A7 6F 
28200     E7 6F A0 6F 
28204     E1 6F 9B 6F 
28208     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
2820c     D5 6F 8F 6F 
28210     CE 6F 45 6F 
28214     86 6F 68 6D 
28218     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
2821c     C0 13 AD A2 
28220     A7 8E 79 99 
28224     E6 97 E8 97 
28228     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
2822c     F1 97 F3 97 
28230     F6 97 F9 97 
28234     FB 97 FE 97 
28238     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
2823c     4A 98 0A 98 
28240     93 98 0F 98 
28244     7F 9B BF 8C 
28248     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
2824c     91 7B 62 73 
28250     1A 6E B9 70 
28254     EB 6F B3 70 
28258     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
2825c     25 70 20 70 
28260     1E 70 1B 70 
28264     18 70 15 70 
28268     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
2826c     0D 70 09 70 
28270     07 70 03 70 
28274     01 70 FD 6F 
28278     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
2827c     F6 6F F2 6F 
28280     EF 6F EC 6F 
28284     2C 70 E6 6F 
28288     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
2828c     DD 6F 97 6F 
28290     D7 6F 84 6E 
28294     8F 6F 3F 7D 
28298     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
2829a     FF FF FF FF 
2829e     FF FF       | atarist_spl file "atarist.spl" '512
282a0     00 00 00 00 
282a4     00 00 00 00 
282a8     00 00       | 	byte	$00[10]
282aa     17 7F F2 7F 
282ae     B2 7F 72 7F 
282b2     33 7F F4 7E 
282b6     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
282ba     36 7E F5 7D 
282be     E9 51 F2 0D 
282c2     8E 00 F3 FD 
282c6     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
282ca     57 FD 58 FD 
282ce     5B FD 5C FD 
282d2     5C FD 60 7D 
282d6     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
282da     D6 7C 98 7C 
282de     59 7C 1A 7C 
282e2     DC 7B 9E 7B 
282e6     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
282ea     F3 05 00 FD 
282ee     41 FB EA FA 
282f2     D9 FA DB FA 
282f6     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
282fa     E4 FA 9B 36 
282fe     F8 7A C0 7A 
28302     84 7A 45 7A 
28306     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
2830a     8E 79 51 79 
2830e     15 79 D7 78 
28312     3C 1F EB FF 
28316     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
2831a     6D F8 65 F8 
2831e     68 F8 6D F8 
28322     70 F8 74 F8 
28326     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
2832a     AB 60 79 60 
2832e     4B 60 1A 60 
28332     E9 5F B9 5F 
28336     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
2833a     FB 59 B2 0B 
2833e     92 FA 3A F7 
28342     96 F6 79 F6 
28346     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
2834a     82 F6 86 F6 
2834e     8C F6 DB 5D 
28352     F1 5E C1 5E 
28356     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
2835a     34 5E 04 5E 
2835e     D6 5D A6 5D 
28362     78 5D D4 3E 
28366     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
2836a     27 F5 BA F4 
2836e     AB F4 AD F4 
28372     B2 F4 B8 F4 
28376     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
2837a     26 5D 2B 5D 
2837e     FC 5C CD 5C 
28382     9F 5C 70 5C 
28386     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
2838a     E5 5B B8 5B 
2838e     DB 24 A7 FC 
28392     D1 F4 4D F3 
28396     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
2839a     04 F3 0B F3 
2839e     11 F3 16 F3 
283a2     DE 18 98 5B 
283a6     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
283aa     4E 4A 29 48 
283ae     A0 47 6A 47 
283b2     43 47 20 47 
283b6     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
283ba     E2 F6 98 F2 
283be     C5 F1 A3 F1 
283c2     A3 F1 A8 F1 
283c6     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
283ca     BF F1 00 3D 
283ce     EF 46 CD 46 
283d2     AA 46 86 46 
283d6     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
283da     1C 46 F9 45 
283de     D7 45 EE 43 
283e2     DE 02 E8 F3 
283e6     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
283ea     61 F0 65 F0 
283ee     6D F0 74 F0 
283f2     7C F0 84 F0 
283f6     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
283fa     8E 45 6D 45 
283fe     49 45 27 45 
28402     05 45 E1 44 
28406     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
2840a     F1 2F A9 FB 
2840e     8B F1 9B EF 
28412     40 EF 36 EF 
28416     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
2841a     4D EF 56 EF 
2841e     5E EF 7B 44 
28422     8C 44 69 44 
28426     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
2842a     03 44 E1 43 
2842e     C0 43 F5 37 
28432     69 33 0F 11 
28436     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
2843a     66 EE 37 EE 
2843e     38 EE 40 EE 
28442     48 EE 51 EE 
28446     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
2844a     7D 32 6A 32 
2844e     51 32 37 32 
28452     1F 32 05 32 
28456     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
2845a     B9 31 A1 31 
2845e     F1 04 F4 F1 
28462     50 EE A0 ED 
28466     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
2846a     93 ED 9A ED 
2846e     A4 ED AD ED 
28472     F4 27 C1 31 
28476     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
2847a     78 31 5F 31 
2847e     46 31 2E 31 
28482     15 31 FC 30 
28486     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
2848a     C4 EF 4A ED 
2848e     DC EC CB EC 
28492     D2 EC DA EC 
28496     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
2849a     F9 EC 64 2F 
2849e     0A 31 F1 30 
284a2     D9 30 C0 30 
284a6     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
284aa     78 30 5F 30 
284ae     46 30 38 23 
284b2     A6 F6 19 EE 
284b6     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
284ba     20 EC 28 EC 
284be     32 EC 3C EC 
284c2     47 EC 51 EC 
284c6     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
284ca     A3 22 93 22 
284ce     7F 22 6E 22 
284d2     5D 22 4C 22 
284d6     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
284da     77 09 76 F1 
284de     CC EC F0 EB 
284e2     CD EB CE EB 
284e6     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
284ea     ED EB F5 EB 
284ee     3E F6 6B 22 
284f2     5F 22 4E 22 
284f6     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
284fa     1B 22 0B 22 
284fe     FA 21 E9 21 
28502     D8 21 4D FF 
28506     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
2850a     92 EB 7B EB 
2850e     82 EB 8C EB 
28512     97 EB A1 EB 
28516     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
2851a     15 22 04 22 
2851e     F3 21 E3 21 
28522     D2 21 C0 21 
28526     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
2852a     8E 21 7D 21 
2852e     9A F8 A4 ED 
28532     8E EB 2F EB 
28536     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
2853a     37 EB 42 EB 
2853e     4C EB 57 EB 
28542     B2 17 22 19 
28546     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
2854a     FD 18 EF 18 
2854e     E3 18 D6 18 
28552     CA 18 BD 18 
28556     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
2855a     60 EC 35 EB 
2855e     01 EB 01 EB 
28562     0C EB 16 EB 
28566     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
2856a     34 EB D0 18 
2856e     00 19 F4 18 
28572     E8 18 DA 18 
28576     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
2857a     B6 18 A9 18 
2857e     9D 18 91 05 
28582     F0 EF CA EB 
28586     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
2858a     E8 EA F2 EA 
2858e     FE EA 07 EB 
28592     12 EB C2 EF 
28596     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
2859a     D9 18 CD 18 
2859e     C0 18 B3 18 
285a2     A7 18 9B 18 
285a6     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
285aa     B8 FC 30 EE 
285ae     61 EB DC EA 
285b2     CD EA D2 EA 
285b6     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
285ba     F3 EA FE EA 
285be     D2 09 D1 18 
285c2     C3 18 17 18 
285c6     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
285ca     66 11 52 11 
285ce     49 11 41 11 
285d2     38 11 E0 F4 
285d6     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
285da     C9 EA C5 EA 
285de     CF EA DB EA 
285e2     E6 EA EF EA 
285e6     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
285ea     89 11 80 11 
285ee     78 11 6E 11 
285f2     67 11 5D 11 
285f6     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
285fa     43 11 32 0D 
285fe     9C F1 07 EC 
28602     F8 EA CD EA 
28606     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
2860a     E4 EA ED EA 
2860e     F8 EA 02 EB 
28612     55 11 91 11 
28616     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
2861a     75 11 6E 11 
2861e     64 11 5E 11 
28622     54 11 4A 11 
28626     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
2862a     A8 EB F1 EA 
2862e     D9 EA DC EA 
28632     E8 EA F1 EA 
28636     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
2863a     A6 EB 9E 11 
2863e     A0 11 96 11 
28642     8D 11 85 11 
28646     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
2864a     6A 11 CA 0D 
2864e     36 0B 57 F8 
28652     6C ED 57 EB 
28656     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
2865a     F4 EA FF EA 
2865e     09 EB 15 EB 
28662     1E EB 1A FD 
28666     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
2866a     ED 0A E8 0A 
2866e     E2 0A DC 0A 
28672     D6 0A D1 0A 
28676     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
2867a     F8 F3 BC EC 
2867e     57 EB 1E EB 
28682     18 EB 24 EB 
28686     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
2868a     42 EB 4D EB 
2868e     08 09 20 0B 
28692     1A 0B 14 0B 
28696     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
2869a     04 0B FE 0A 
2869e     F9 0A F2 0A 
286a2     84 08 3A F1 
286a6     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
286aa     42 EB 42 EB 
286ae     4E EB 57 EB 
286b2     62 EB 6B EB 
286b6     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
286ba     48 0B 43 0B 
286be     3C 0B 36 0B 
286c2     31 0B 2C 0B 
286c6     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
286ca     1B 0B 5C 00 
286ce     6A EF 1B EC 
286d2     81 EB 6A EB 
286d6     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
286da     85 EB 8E EB 
286de     99 EB A3 EB 
286e2     DD 05 E5 05 
286e6     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
286ea     DB 05 D8 05 
286ee     D5 05 D1 05 
286f2     D0 05 CB 05 
286f6     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
286fa     0C EC BB EB 
286fe     B3 EB BB EB 
28702     C5 EB D0 EB 
28706     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
2870a     E4 F7 2C 06 
2870e     28 06 24 06 
28712     22 06 1F 06 
28716     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
2871a     16 06 14 06 
2871e     0F 06 D0 F3 
28722     65 ED 2D EC 
28726     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
2872a     01 EC 0A EC 
2872e     14 EC 1E EC 
28732     29 EC FB 03 
28736     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
2873a     63 06 60 06 
2873e     5E 06 59 06 
28742     58 06 54 06 
28746     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
2874a     69 F1 21 ED 
2874e     55 EC 33 EC 
28752     36 EC 40 EC 
28756     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
2875a     5C EC 68 EC 
2875e     92 02 D9 02 
28762     D7 02 D7 02 
28766     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
2876a     D1 02 D1 02 
2876e     CE 02 CD 02 
28772     5D FC 80 EF 
28776     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
2877a     83 EC 8A EC 
2877e     93 EC 9C EC 
28782     A5 EC B1 EC 
28786     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
2878a     2B 03 2A 03 
2878e     29 03 26 03 
28792     25 03 24 03 
28796     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
2879a     1F 03 70 F7 
2879e     D0 EE 27 ED 
287a2     DB EC D4 EC 
287a6     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
287aa     F0 EC FA EC 
287ae     02 ED F9 F4 
287b2     7B 03 7C 03 
287b6     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
287ba     75 03 73 03 
287be     72 03 70 03 
287c2     6D 03 6C 03 
287c6     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
287ca     54 ED 22 ED 
287ce     22 ED 2C ED 
287d2     35 ED 3F ED 
287d6     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
287da     14 01 C3 03 
287de     C1 03 C0 03 
287e2     5F 01 A5 00 
287e6     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
287ea     7B 00 7C 00 
287ee     20 00 85 F1 
287f2     2A EE 89 ED 
287f6     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
287fa     80 ED 87 ED 
287fe     90 ED 9A ED 
28802     A3 ED 73 00 
28806     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
2880a     D0 00 D0 00 
2880e     D0 00 D0 00 
28812     D0 00 CF 00 
28816     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
2881a     80 F0 3D EE 
2881e     D5 ED C7 ED 
28822     CD ED D6 ED 
28826     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
2882a     F2 ED FA ED 
2882e     1D 01 29 01 
28832     27 01 27 01 
28836     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
2883a     25 01 26 01 
2883e     26 01 23 01 
28842     D0 F7 EC EF 
28846     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
2884a     1C EE 24 EE 
2884e     2D EE 37 EE 
28852     40 EE 47 EE 
28856     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
2885a     7D 01 7B 01 
2885e     7A 01 7A 01 
28862     79 01 78 01 
28866     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
2886a     84 FE DE F3 
2886e     6C EF 93 EE 
28872     72 EE 72 EE 
28876     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
2887a     8B EE 95 EE 
2887e     9E EE 15 FC 
28882     67 FE 67 FE 
28886     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
2888a     6B FE 6B FE 
2888e     6D FE 6D FE 
28892     6D FE 6F FE 
28896     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
2889a     DF EE CC EE 
2889e     CF EE D9 EE 
288a2     E1 EE EA EE 
288a6     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
288aa     5A FE C4 FE 
288ae     C3 FE C5 FE 
288b2     C6 FE C6 FE 
288b6     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
288ba     C8 FE C7 FE 
288be     DA FB 85 F1 
288c2     8D EF 31 EF 
288c6     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
288ca     34 EF 3E EF 
288ce     46 EF 4F EF 
288d2     57 EF 0D FF 
288d6     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
288da     1F FF 1F FF 
288de     21 FF 21 FF 
288e2     21 FF 21 FF 
288e6     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
288ea     15 F1 BE EF 
288ee     84 EF 7E EF 
288f2     88 EF 8F EF 
288f6     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
288fa     A9 EF 06 F2 
288fe     A6 FC AB FC 
28902     AD FC AE FC 
28906     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
2890a     B2 FC B4 FC 
2890e     B6 FC B7 FC 
28912     8B F4 BD F0 
28916     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
2891a     E4 EF EE EF 
2891e     F6 EF FD EF 
28922     04 F0 0E F0 
28926     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
2892a     0B FD 0D FD 
2892e     0F FD 11 FD 
28932     11 FD 13 FD 
28936     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
2893a     17 FD 64 F3 
2893e     CD F0 52 F0 
28942     41 F0 45 F0 
28946     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
2894a     5B F0 64 F0 
2894e     6D F0 FB FC 
28952     65 FD 68 FD 
28956     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
2895a     6C FD 6D FD 
2895e     6F FD 70 FD 
28962     72 FD B3 FB 
28966     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
2896a     A4 F0 99 F0 
2896e     A0 F0 A8 F0 
28972     AE F0 B9 F0 
28976     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
2897a     CB FB DD FB 
2897e     DE FB E0 FB 
28982     E3 FB E3 FB 
28986     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
2898a     E9 FB EC FB 
2898e     62 F7 27 F2 
28992     2A F1 FF F0 
28996     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
2899a     0C F1 13 F1 
2899e     1B F1 23 F1 
289a2     33 F2 3C FC 
289a6     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
289aa     42 FC 45 FC 
289ae     47 FC 48 FC 
289b2     4A FC 4C FC 
289b6     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
289ba     20 F2 77 F1 
289be     5C F1 5F F1 
289c2     64 F1 6C F1 
289c6     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
289ca     83 F1 DC F8 
289ce     9A FC 9A FC 
289d2     9B FC 9E FC 
289d6     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
289da     A3 FC A4 FC 
289de     A6 FC A9 FC 
289e2     90 F4 33 F2 
289e6     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
289ea     BA F1 BF F1 
289ee     C7 F1 CE F1 
289f2     D6 F1 DC F1 
289f6     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
289fa     F3 FC F5 FC 
289fe     FE FB 79 FB 
28a02     62 FB 5F FB 
28a06     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
28a0a     6F FA AF F3 
28a0e     53 F2 12 F2 
28a12     0F F2 15 F2 
28a16     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
28a1a     2A F2 32 F2 
28a1e     38 F2 9A FB 
28a22     AF FB B1 FB 
28a26     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
28a2a     B7 FB B8 FB 
28a2e     BA FB BC FB 
28a32     C1 FB 3B F8 
28a36     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
28a3a     6E F2 6C F2 
28a3e     74 F2 7A F2 
28a42     81 F2 87 F2 
28a46     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
28a4a     06 FC 09 FC 
28a4e     0C FC 0E FC 
28a52     0F FC 12 FC 
28a56     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
28a5a     17 FC 1A FC 
28a5e     B2 F6 7B F3 
28a62     DD F2 C5 F2 
28a66     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
28a6a     D4 F2 DB F2 
28a6e     E0 F2 E8 F2 
28a72     28 F8 60 FC 
28a76     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
28a7a     64 FC 66 FC 
28a7e     68 FC 6A FC 
28a82     6D FC 52 FC 
28a86     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
28a8a     78 F3 24 F3 
28a8e     1A F3 1E F3 
28a92     24 F3 2A F3 
28a96     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
28a9a     3D F3 80 FA 
28a9e     0C FB 0F FB 
28aa2     10 FB 14 FB 
28aa6     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
28aaa     1B FB 1D FB 
28aae     1F FB 92 FA 
28ab2     DE F4 AE F3 
28ab6     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
28aba     79 F3 7E F3 
28abe     84 F3 8C F3 
28ac2     92 F3 97 F3 
28ac6     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
28aca     67 FB 69 FB 
28ace     6B FB 6F FB 
28ad2     71 FB 72 FB 
28ad6     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
28ada     E3 F8 BA F4 
28ade     EE F3 CC F3 
28ae2     CA F3 CF F3 
28ae6     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
28aea     E2 F3 E8 F3 
28aee     ED F3 B7 FB 
28af2     BC FB BE FB 
28af6     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
28afa     C4 FB C6 FB 
28afe     C8 FB C9 FB 
28b02     CC FB 8F F7 
28b06     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
28b0a     1E F4 1E F4 
28b0e     24 F4 2A F4 
28b12     30 F4 38 F4 
28b16     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
28b1a     AD FA B1 FA 
28b1e     B4 FA B6 FA 
28b22     BA FA BB FA 
28b26     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
28b2a     C2 FA C6 FA 
28b2e     55 F6 C6 F4 
28b32     7D F4 72 F4 
28b36     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
28b3a     83 F4 89 F4 
28b3e     8F F4 94 F4 
28b42     66 FA 03 FB 
28b46     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
28b4a     0A FB 0E FB 
28b4e     10 FB 11 FB 
28b52     16 FB 18 FB 
28b56     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
28b5a     F9 F4 CA F4 
28b5e     C5 F4 CB F4 
28b62     D1 F4 D7 F4 
28b66     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
28b6a     E8 F4 3F FB 
28b6e     56 FB 58 FB 
28b72     5A FB 5E FB 
28b76     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
28b7a     64 FB 64 FB 
28b7e     69 FB 99 F9 
28b82     E9 F5 33 F5 
28b86     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
28b8a     1D F5 22 F5 
28b8e     27 F5 2E F5 
28b92     32 F5 37 F5 
28b96     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
28b9a     BC FA BC FA 
28b9e     C1 FA C2 FA 
28ba2     C4 FA C8 FA 
28ba6     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
28baa     F9 F7 DB F5 
28bae     78 F5 69 F5 
28bb2     6A F5 70 F5 
28bb6     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
28bba     7F F5 85 F5 
28bbe     6E F7 06 FB 
28bc2     0A FB 0B FB 
28bc6     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
28bca     14 FB 15 FB 
28bce     18 FB 1B FB 
28bd2     1D FB 70 F7 
28bd6     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
28bda     B6 F5 BB F5 
28bde     C0 F5 C6 F5 
28be2     CA F5 CF F5 
28be6     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
28bea     54 FB 56 FB 
28bee     5A FB 5B FB 
28bf2     5E FB 5F FB 
28bf6     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
28bfa     67 FB 52 FB 
28bfe     29 F7 33 F6 
28c02     06 F6 02 F6 
28c06     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
28c0a     10 F6 16 F6 
28c0e     1A F6 1F F6 
28c12     81 FB 9F FB 
28c16     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
28c1a     51 FB F2 FA 
28c1e     E3 FA E3 FA 
28c22     E5 FA E9 FA 
28c26     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
28c2a     64 F6 4D F6 
28c2e     4D F6 53 F6 
28c32     57 F6 5C F6 
28c36     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
28c3a     6A F6 19 FB 
28c3e     1E FB 22 FB 
28c42     23 FB 24 FB 
28c46     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
28c4a     2C FB 2E FB 
28c4e     32 FB F0 F8 
28c52     01 F7 A5 F6 
28c56     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
28c5a     9F F6 A3 F6 
28c5e     A6 F6 AC F6 
28c62     B0 F6 EB F7 
28c66     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
28c6a     68 FB 6C FB 
28c6e     6E FB 71 FB 
28c72     72 FB 74 FB 
28c76     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
28c7a     71 F8 21 F7 
28c7e     E5 F6 DD F6 
28c82     E1 F6 E6 F6 
28c86     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
28c8a     F5 F6 F7 F6 
28c8e     F7 FA AB FB 
28c92     AD FB AF FB 
28c96     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
28c9a     B6 FB B9 FB 
28c9e     BB FB BC FB 
28ca2     21 FB 07 F8 
28ca6     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
28caa     22 F7 26 F7 
28cae     2B F7 2E F7 
28cb2     34 F7 38 F7 
28cb6     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
28cba     13 FB 16 FB 
28cbe     17 FB 1B FB 
28cc2     1E FB 20 FB 
28cc6     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
28cca     26 FB 77 FA 
28cce     F3 F7 7C F7 
28cd2     67 F7 6A F7 
28cd6     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
28cda     74 F7 7A F7 
28cde     7E F7 82 F7 
28ce2     53 FB 5A FB 
28ce6     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
28cea     5F FB 63 FB 
28cee     65 FB 67 FB 
28cf2     69 FB 6A FB 
28cf6     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
28cfa     B5 F7 A9 F7 
28cfe     AD F7 B0 F7 
28d02     B5 F7 B8 F7 
28d06     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
28d0a     6E F8 99 FB 
28d0e     9C FB 9D FB 
28d12     9F FB A4 FB 
28d16     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
28d1a     A9 FB AB FB 
28d1e     AD FB 46 F9 
28d22     26 F8 F0 F7 
28d26     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
28d2a     F4 F7 F8 F7 
28d2e     FB F7 FF F7 
28d32     03 F8 65 FA 
28d36     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
28d3a     2B FB 2F FB 
28d3e     30 FB 32 FB 
28d42     34 FB 38 FB 
28d46     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
28d4a     E9 F8 4A F8 
28d4e     2E F8 2C F8 
28d52     2F F8 36 F8 
28d56     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
28d5a     41 F8 44 F8 
28d5e     4A FB 67 FB 
28d62     68 FB 6B FB 
28d66     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
28d6a     73 FB 74 FB 
28d6e     78 FB 7A FB 
28d72     14 FB E7 F8 
28d76     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
28d7a     6D F8 70 F8 
28d7e     73 F8 78 F8 
28d82     7C F8 80 F8 
28d86     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
28d8a     A6 FB A7 FB 
28d8e     A9 FB AC FB 
28d92     AF FB B1 FB 
28d96     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
28d9a     B7 FB 73 FA 
28d9e     F8 F8 B4 F8 
28da2     A9 F8 AB F8 
28da6     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
28daa     B4 F8 B8 F8 
28dae     BB F8 FA F8 
28db2     64 FB 65 FB 
28db6     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
28dba     6D FB 6F FB 
28dbe     70 FB 74 FB 
28dc2     77 FB 77 FB 
28dc6     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
28dca     E9 F8 E4 F8 
28dce     E8 F8 EB F8 
28dd2     EE F8 F2 F8 
28dd6     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
28dda     B5 FA 9F FB 
28dde     A1 FB A4 FB 
28de2     A5 FB A9 FB 
28de6     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
28dea     AE FB B1 FB 
28dee     B2 FB C7 F9 
28df2     39 F9 22 F9 
28df6     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
28dfa     26 F9 2A F9 
28dfe     2E F9 32 F9 
28e02     33 F9 BA FB 
28e06     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
28e0a     DE FB E1 FB 
28e0e     E2 FB E4 FB 
28e12     E5 FB E7 FB 
28e16     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
28e1a     C5 F9 67 F9 
28e1e     57 F9 56 F9 
28e22     5B F9 5F F9 
28e26     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
28e2a     68 F9 6C F9 
28e2e     0B FC 11 FC 
28e32     14 FC 15 FC 
28e36     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
28e3a     B5 FB B5 FB 
28e3e     B6 FB B8 FB 
28e42     E9 FA C8 F9 
28e46     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
28e4a     90 F9 94 F9 
28e4e     95 F9 99 F9 
28e52     9D F9 9F F9 
28e56     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
28e5a     DE FB DF FB 
28e5e     E2 FB E4 FB 
28e62     E6 FB E8 FB 
28e66     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
28e6a     EF FB AC FA 
28e6e     E9 F9 C7 F9 
28e72     C3 F9 C8 F9 
28e76     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
28e7a     D0 F9 D4 F9 
28e7e     D6 F9 0E FB 
28e82     11 FC 13 FC 
28e86     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
28e8a     19 FC 1B FC 
28e8e     1D FC 1E FC 
28e92     21 FC 22 FC 
28e96     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
28e9a     F7 F9 F7 F9 
28e9e     FB F9 FE F9 
28ea2     00 FA 03 FA 
28ea6     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
28eaa     1B FC 45 FC 
28eae     46 FC 48 FC 
28eb2     4A FC 4B FC 
28eb6     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
28eba     52 FC 54 FC 
28ebe     F3 FB 82 FA 
28ec2     35 FA 28 FA 
28ec6     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
28eca     31 FA 32 FA 
28ece     37 FA 37 FA 
28ed2     3C FA 00 FC 
28ed6     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
28eda     09 FC 0B FC 
28ede     0F FC 12 FC 
28ee2     12 FC 15 FC 
28ee6     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
28eea     8D FA 60 FA 
28eee     5B FA 5C FA 
28ef2     60 FA 61 FA 
28ef6     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
28efa     6C FA 6D FA 
28efe     37 FC 3A FC 
28f02     3B FC 3D FC 
28f06     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
28f0a     43 FC 44 FC 
28f0e     45 FC 47 FC 
28f12     51 FB AB FA 
28f16     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
28f1a     8E FA 91 FA 
28f1e     93 FA 95 FA 
28f22     98 FA 9B FA 
28f26     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
28f2a     68 FC 6A FC 
28f2e     6C FC 6E FC 
28f32     70 FC 72 FC 
28f36     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
28f3a     76 FC 3B FB 
28f3e     D0 FA BB FA 
28f42     B9 FA BD FA 
28f46     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
28f4a     C4 FA C6 FA 
28f4e     CA FA 13 FC 
28f52     3A FC 3A FC 
28f56     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
28f5a     41 FC 43 FC 
28f5e     44 FC 47 FC 
28f62     48 FC 3C FC 
28f66     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
28f6a     E6 FA E8 FA 
28f6e     EB FA EE FA 
28f72     F0 FA F2 FA 
28f76     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
28f7a     61 FC 66 FC 
28f7e     68 FC 6B FC 
28f82     6C FC 6E FC 
28f86     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
28f8a     73 FC 75 FC 
28f8e     13 FC 3F FB 
28f92     17 FB 12 FB 
28f96     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
28f9a     1A FB 1D FB 
28f9e     1F FB 20 FB 
28fa2     23 FB 92 FC 
28fa6     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
28faa     96 FC 97 FC 
28fae     9A FC 9C FC 
28fb2     9E FC 9F FC 
28fb6     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
28fba     5A FB 41 FB 
28fbe     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
28fc2     01 00 00 00 
28fc6     00 00 00 00 
28fca     00 00 00 00 
28fce     00 00 00 00 | mouse  file "mouse2.def"
28fd2     00 00 00 00 
28fd6     00 00 00 00 
28fda     00 00 00 00 
28fde     00 00 00 00 | 	byte	$00[16]
28fe2     01 01 00 00 
28fe6     00 00 00 00 
28fea     00 00 00 00 
28fee     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28ff2     00 00 00 00 
28ff6     00 00 00 00 
28ffa     00 00 00 00 
28ffe     00 00 00 00 | 	byte	$00[16]
29002     01 0D 01 00 
29006     00 00 00 00 
2900a     00 00 00 00 
2900e     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
29012     00 00 00 00 
29016     00 00 00 00 
2901a     00 00 00 00 
2901e     00 00 00 00 | 	byte	$00[16]
29022     01 0D 0D 01 
29026     00 00 00 00 
2902a     00 00 00 00 
2902e     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
29032     00 00 00 00 
29036     00 00 00 00 
2903a     00 00 00 00 
2903e     00 00 00 00 | 	byte	$00[16]
29042     01 0D 0D 0D 
29046     01 00 00 00 
2904a     00 00 00 00 
2904e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
29052     00 00 00 00 
29056     00 00 00 00 
2905a     00 00 00 00 
2905e     00 00 00 00 | 	byte	$00[16]
29062     01 0D 0D 0D 
29066     0D 01 00 00 
2906a     00 00 00 00 
2906e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
29072     00 00 00 00 
29076     00 00 00 00 
2907a     00 00 00 00 
2907e     00 00 00 00 | 	byte	$00[16]
29082     01 0D 0D 0D 
29086     0D 0D 01 00 
2908a     00 00 00 00 
2908e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
29092     00 00 00 00 
29096     00 00 00 00 
2909a     00 00 00 00 
2909e     00 00 00 00 | 	byte	$00[16]
290a2     01 0D 0D 0D 
290a6     0D 0D 0D 01 
290aa     00 00 00 00 
290ae     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
290b2     00 00 00 00 
290b6     00 00 00 00 
290ba     00 00 00 00 
290be     00 00 00 00 | 	byte	$00[16]
290c2     01 0D 0D 0D 
290c6     0D 0D 0D 0C 
290ca     01 00 00 00 
290ce     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
290d2     00 00 00 00 
290d6     00 00 00 00 
290da     00 00 00 00 
290de     00 00 00 00 | 	byte	$00[16]
290e2     01 0D 0D 0D 
290e6     0D 0D 0D 0D 
290ea     0C 01 00 00 
290ee     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
290f2     00 00 00 00 
290f6     00 00 00 00 
290fa     00 00 00 00 
290fe     00 00 00 00 | 	byte	$00[16]
29102     01 0D 0D 0D 
29106     0D 0D 0D 0D 
2910a     0D 0C 01 00 
2910e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
29112     00 00 00 00 
29116     00 00 00 00 
2911a     00 00 00 00 
2911e     00 00 00 00 | 	byte	$00[16]
29122     01 0D 0D 0D 
29126     0D 0D 0D 0D 
2912a     0D 0D 0B 01 
2912e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
29132     00 00 00 00 
29136     00 00 00 00 
2913a     00 00 00 00 
2913e     00 00 00 00 | 	byte	$00[16]
29142     01 0D 0D 0D 
29146     0C 0D 0D 03 
2914a     01 01 01 01 
2914e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
29152     00 00 00 00 
29156     00 00 00 00 
2915a     00 00 00 00 
2915e     00 00 00 00 | 	byte	$00[16]
29162     01 0D 0D 0C 
29166     01 09 0D 03 
2916a     00 00 00 00 
2916e     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
29172     00 00 00 00 
29176     00 00 00 00 
2917a     00 00 00 00 
2917e     00 00 00 00 | 	byte	$00[16]
29182     01 0D 0C 01 
29186     00 01 0D 0B 
2918a     01 00 00 00 
2918e     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
29192     00 00 00 00 
29196     00 00 00 00 
2919a     00 00 00 00 
2919e     00 00 00 00 | 	byte	$00[16]
291a2     01 0C 01 00 
291a6     00 01 0A 0D 
291aa     01 00 00 00 
291ae     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
291b2     00 00 00 00 
291b6     00 00 00 00 
291ba     00 00 00 00 
291be     00 00 00 00 | 	byte	$00[16]
291c2     01 01 00 00 
291c6     00 00 01 0D 
291ca     0B 01 00 00 
291ce     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
291d2     00 00 00 00 
291d6     00 00 00 00 
291da     00 00 00 00 
291de     00 00 00 00 
291e2     00 00 00 00 
291e6     00 00       | 	byte	$00[22]
291e8     01 0B 0D 01 
291ec     00 00 00 00 
291f0     00 00 00 00 
291f4     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
291f8     00 00 00 00 
291fc     00 00 00 00 
29200     00 00 00 00 
29204     00 00 00 00 
29208     00          | 	byte	$00[17]
29209     01 01 00 00 
2920d     00 00 00 00 
29211     00 00 00 00 
29215     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
29219     00 00 00 00 
      ...             
293bd     00 00 00 00 
293c1     00          | 	byte	$00[425]
293c2                 | 
293c2     00 00       |              	org
293c4 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
293c8 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
293cc 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
293d0 003             | 
293d0 003 00 30 04 F6 |                 mov     psramaddr,#0
293d4 004             | 
293d4 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
293d8 005 20 00 00 FF 
293dc 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
293e0 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
293e4 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
293e8 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
293ec 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
293f0 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
293f4 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
293f8 00d             | 
293f8 00d 20 00 00 FF 
293fc 00e 00 30 04 F1 |                 add 	psramaddr,##16384
29400 00f E0 03 00 FF 
29404 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
29408 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
2940c 012             | 
2940c 012             |                 
2940c 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
29410 013             |     
29410 013 01 2C 60 FD |                 cogid 	t11				' get id
29414 014 00 00 EC FC |                 coginit #0,#0				' start the new program
29418 015 03 2C 60 FD |                 cogstop t11				' stop the loader
2941c 016             | 
2941c 016 00 00 00 00 | t11 		long 	0
29420 017 00 FF 07 00 | mailbox 	long 	$7FF00
29424 018 00 00 00 00 | psramaddr 	long 	0
29428 019 00 00 00 00 | pslockval	long 	0
2942c 01a 00 00 00 00 | cmd             long    0
29430 01b 00 00 00 00 | buf1            long    0
29434 01c 00 40 00 00 | buf2            long    16384
29438 01d 3C 94 02 00 | 	long	@@@_dat_ + 8468
2943c 01e 50 32 20 52 
29440 01f 65 74 72 6F 
29444 020 6D 61 63 68 
29448 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
2944c 022 42 41 53 49 
29450 023 43 20 76 65 
29454 024 72 73 69 6F 
29458 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
2945c 026 32 33 62 00 | 	byte	$32, $33, $62, $00
29460 027             | 	alignl
29460 027             | _hg010b_spin2_dat_
29460 027             | 
29460 027 00 00 00 00 
29464 028 00 00 00 00 
29468 029 00 00 00 00 
2946c 02a 00 00 00 00 
29470 02b 00 00 00    | vga_font       file "vgafont.def"
29473 02b 7E 81 A5 81 
29477 02c 81 BD 99 81 
2947b 02d 81 7E 00 00 
2947f 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
29483 02f 7E FF DB FF 
29487 030 FF C3 E7 FF 
2948b 031 FF 7E 00 00 
2948f 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
29493 033 00 36 7F 7F 
29497 034 7F 7F 3E 1C 
2949b 035 08 00 00 00 
2949f 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
294a3 037 00 08 1C 3E 
294a7 038 7F 3E 1C 08 
294ab 039 00 00 00 00 
294af 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
294b3 03b 18 3C 3C E7 
294b7 03c E7 E7 18 18 
294bb 03d 3C 00 00 00 
294bf 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
294c3 03f 18 3C 7E FF 
294c7 040 FF 7E 18 18 
294cb 041 3C 00 00 00 
294cf 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
294d3 043 00 00 00 18 
294d7 044 3C 3C 18 00 
294db 045 00 00 00 00 
294df 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
294e3 047 FF FF FF E7 
294e7 048 C3 C3 E7 FF 
294eb 049 FF FF FF FF 
294ef 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
294f3 04b 00 00 3C 66 
294f7 04c 42 42 66 3C 
294fb 04d 00 00 00 00 
294ff 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
29503 04f FF FF C3 99 
29507 050 BD BD 99 C3 
2950b 051 FF FF FF FF 
2950f 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
29513 053 78 70 58 4C 
29517 054 1E 33 33 33 
2951b 055 33 1E 00 00 
2951f 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
29523 057 3C 66 66 66 
29527 058 66 3C 18 7E 
2952b 059 18 18 00 00 
2952f 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
29533 05b FC CC FC 0C 
29537 05c 0C 0C 0C 0E 
2953b 05d 0F 07 00 00 
2953f 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
29543 05f FE C6 FE C6 
29547 060 C6 C6 C6 E6 
2954b 061 E7 67 03 00 
2954f 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
29553 063 18 18 DB 3C 
29557 064 E7 3C DB 18 
2955b 065 18 00 00 00 
2955f 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
29563 067 03 07 0F 1F 
29567 068 7F 1F 0F 07 
2956b 069 03 01 00 00 
2956f 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
29573 06b 60 70 78 7C 
29577 06c 7F 7C 78 70 
2957b 06d 60 40 00 00 
2957f 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
29583 06f 18 3C 7E 18 
29587 070 18 18 7E 3C 
2958b 071 18 00 00 00 
2958f 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
29593 073 66 66 66 66 
29597 074 66 66 66    | 	byte	$66[7]
2959a 075 00 66 66 00 
2959e 076 00 00 00 00 
295a2 077 00 FE DB DB 
295a6 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
295aa 079 D8 D8 D8 00 
295ae 07a 00 00 00 3E 
295b2 07b 63 06 1C 36 
295b6 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
295ba 07d 30 63 3E 00 
295be 07e 00 00 00 00 
295c2 07f 00 00 00 00 
295c6 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
295ca 081 7F 7F 7F 00 
295ce 082 00 00 00 00 
295d2 083 00 18 3C 7E 
295d6 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
295da 085 3C 18 7E 00 
295de 086 00 00 00 00 
295e2 087 00 18 3C 7E 
295e6 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
295ea 089 18 18 18 00 
295ee 08a 00 00 00 00 
295f2 08b 00 18 18 18 
295f6 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
295fa 08d 7E 3C 18 00 
295fe 08e 00 00 00 00 
29602 08f 00 00 00 18 
29606 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2960a 091 00 00 00 00 
2960e 092 00 00 00 00 
29612 093 00 00 00    | 	byte	$00[11]
29615 094 0C 06 7F 06 
29619 095 0C 00 00 00 
2961d 096 00 00 00 00 
29621 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
29625 098 00 03 03 03 
29629 099 7F 00 00 00 
2962d 09a 00 00 00 00 
29631 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
29635 09c 14 36 7F 36 
29639 09d 14 00 00 00 
2963d 09e 00 00 00 00 
29641 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
29645 0a0 1C 1C 3E 3E 
29649 0a1 7F 7F 00 00 
2964d 0a2 00 00 00 00 
29651 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
29655 0a4 7F 3E 3E 1C 
29659 0a5 1C 08 00 00 
2965d 0a6 00 00 00 00 
29661 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
29665 0a8 00 00 00 00 
29669 0a9 00 00 00 00 
2966d 0aa 00 00 00 00 
29671 0ab 00 00       | 	byte	$00[14]
29673 0ab 18 3C 3C 3C 
29677 0ac 18 18 18 00 
2967b 0ad 18 18 00 00 
2967f 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
29683 0af 66 24 00 00 
29687 0b0 00 00 00 00 
2968b 0b1 00 00 00 00 
2968f 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
29693 0b3 00 36 36 7F 
29697 0b4 36 36 36 7F 
2969b 0b5 36 36 00 00 
2969f 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
296a3 0b7 3E 63 43 03 
296a7 0b8 3E 60 60 61 
296ab 0b9 63 3E 18 18 
296af 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
296b3 0bb 00 00 43 63 
296b7 0bc 30 18 0C 06 
296bb 0bd 63 61 00 00 
296bf 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
296c3 0bf 1C 36 36 1C 
296c7 0c0 6E 3B 33 33 
296cb 0c1 33 6E 00 00 
296cf 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
296d3 0c3 0C 0C 0C 06 
296d7 0c4 00 00 00 00 
296db 0c5 00 00 00 00 
296df 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
296e3 0c7 30 18 0C 0C 
296e7 0c8 0C 0C 0C 0C 
296eb 0c9 18 30 00 00 
296ef 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
296f3 0cb 0C 18 30 30 
296f7 0cc 30 30 30 30 
296fb 0cd 18 0C 00 00 
296ff 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
29703 0cf 00 00 00 66 
29707 0d0 3C FF 3C 66 
2970b 0d1 00 00 00 00 
2970f 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
29713 0d3 00 00 00 18 
29717 0d4 18 7E 18 18 
2971b 0d5 00 00 00 00 
2971f 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
29723 0d7 00 00 00 00 
29727 0d8 00 00 00 00 | 	byte	$00[8]
2972b 0d9 18 18 18 0C 
2972f 0da 00 00 00 00 
29733 0db 00 00 00 00 
29737 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
2973b 0dd 00 00 00 00 
2973f 0de 00 00 00 00 
29743 0df 00 00 00 00 
29747 0e0 00 00 00 00 | 	byte	$00[16]
2974b 0e1 18 18 00 00 
2974f 0e2 00 00 00 00 
29753 0e3 00 00 40 60 
29757 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
2975b 0e5 03 01 00 00 
2975f 0e6 00 00 00 00 
29763 0e7 1C 36 63 63 
29767 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
2976b 0e9 36 1C 00 00 
2976f 0ea 00 00 00 00 
29773 0eb 18 1C 1E 18 
29777 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
2977b 0ed 18 7E 00 00 
2977f 0ee 00 00 00 00 
29783 0ef 3E 63 60 30 
29787 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
2978b 0f1 63 7F 00 00 
2978f 0f2 00 00 00 00 
29793 0f3 3E 63 60 60 
29797 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
2979b 0f5 63 3E 00 00 
2979f 0f6 00 00 00 00 
297a3 0f7 30 38 3C 36 
297a7 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
297ab 0f9 30 78 00 00 
297af 0fa 00 00 00 00 
297b3 0fb 7F 03 03 03 
297b7 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
297bb 0fd 63 3E 00 00 
297bf 0fe 00 00 00 00 
297c3 0ff 1C 06 03 03 
297c7 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
297cb 101 63 3E 00 00 
297cf 102 00 00 00 00 
297d3 103 7F 63 60 60 
297d7 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
297db 105 0C 0C 00 00 
297df 106 00 00 00 00 
297e3 107 3E 63 63 63 
297e7 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
297eb 109 63 3E 00 00 
297ef 10a 00 00 00 00 
297f3 10b 3E 63 63 63 
297f7 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
297fb 10d 30 1E 00 00 
297ff 10e 00 00 00 00 
29803 10f 00 00 00 18 
29807 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2980b 111 18 18 00 00 
2980f 112 00 00 00 00 
29813 113 00 00 00 18 
29817 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2981b 115 18 18 0C 00 
2981f 116 00 00 00 00 
29823 117 00 60 30 18 
29827 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
2982b 119 30 60 00 00 
2982f 11a 00 00 00 00 
29833 11b 00 00 00 7E 
29837 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
2983b 11d 00 00 00 00 
2983f 11e 00 00 00 00 
29843 11f 00          | 	byte	$00[9]
29844 120 06 0C 18 30 
29848 121 60 30 18 0C 
2984c 122 06 00 00 00 
29850 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
29854 124 63 63 30 18 
29858 125 18 18 00 18 
2985c 126 18 00 00 00 
29860 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
29864 128 3E 63 63 7B 
29868 129 7B 7B 3B 03 
2986c 12a 3E 00 00 00 
29870 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
29874 12c 1C 36 63 63 
29878 12d 7F 63 63 63 
2987c 12e 63 00 00 00 
29880 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
29884 130 66 66 66 3E 
29888 131 66 66 66 66 
2988c 132 3F 00 00 00 
29890 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
29894 134 66 43 03 03 
29898 135 03 03 43 66 
2989c 136 3C 00 00 00 
298a0 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
298a4 138 36 66 66 66 
298a8 139 66 66 66 36 
298ac 13a 1F 00 00 00 
298b0 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
298b4 13c 66 46 16 1E 
298b8 13d 16 06 46 66 
298bc 13e 7F 00 00 00 
298c0 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
298c4 140 66 46 16 1E 
298c8 141 16 06 06 06 
298cc 142 0F 00 00 00 
298d0 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
298d4 144 66 43 03 03 
298d8 145 7B 63 63 66 
298dc 146 5C 00 00 00 
298e0 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
298e4 148 63 63 63 7F 
298e8 149 63 63 63 63 
298ec 14a 63 00 00 00 
298f0 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
298f4 14c 18 18 18 18 
298f8 14d 18 18 18 18 | 	byte	$18[8]
298fc 14e 3C 00 00 00 
29900 14f 00 00 00 78 
29904 150 30 30 30 30 
29908 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
2990c 152 1E 00 00 00 
29910 153 00 00 00 67 
29914 154 66 66 36 1E 
29918 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
2991c 156 67 00 00 00 
29920 157 00 00 00 0F 
29924 158 06 06 06 06 
29928 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2992c 15a 7F 00 00 00 
29930 15b 00 00 00 63 
29934 15c 77 7F 7F 6B 
29938 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
2993c 15e 63 00 00 00 
29940 15f 00 00 00 63 
29944 160 67 6F 7F 7B 
29948 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
2994c 162 63 00 00 00 
29950 163 00 00 00 3E 
29954 164 63 63 63 63 
29958 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2995c 166 3E 00 00 00 
29960 167 00 00 00 3F 
29964 168 66 66 66 3E 
29968 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
2996c 16a 0F 00 00 00 
29970 16b 00 00 00 3E 
29974 16c 63 63 63 63 
29978 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
2997c 16e 3E 30 70 00 
29980 16f 00 00 00 3F 
29984 170 66 66 66 3E 
29988 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
2998c 172 67 00 00 00 
29990 173 00 00 00 3E 
29994 174 63 63 06 1C 
29998 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2999c 176 3E 00 00 00 
299a0 177 00 00 00 7E 
299a4 178 7E 5A 18 18 
299a8 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
299ac 17a 3C 00 00 00 
299b0 17b 00 00 00 63 
299b4 17c 63 63 63 63 
299b8 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
299bc 17e 3E 00 00 00 
299c0 17f 00 00 00 63 
299c4 180 63 63 63 63 
299c8 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
299cc 182 08 00 00 00 
299d0 183 00 00 00 63 
299d4 184 63 63 63 6B 
299d8 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
299dc 186 36 00 00 00 
299e0 187 00 00 00 63 
299e4 188 63 36 3E 1C 
299e8 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
299ec 18a 63 00 00 00 
299f0 18b 00 00 00 66 
299f4 18c 66 66 66 3C 
299f8 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
299fc 18e 3C 00 00 00 
29a00 18f 00 00 00 7F 
29a04 190 63 61 30 18 
29a08 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
29a0c 192 7F 00 00 00 
29a10 193 00 00 00 3C 
29a14 194 0C 0C 0C 0C 
29a18 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
29a1c 196 3C 00 00 00 
29a20 197 00 00 00 00 
29a24 198 01 03 07 0E 
29a28 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
29a2c 19a 40 00 00 00 
29a30 19b 00 00 00 3C 
29a34 19c 30 30 30 30 
29a38 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
29a3c 19e 3C 00 00 00 
29a40 19f 1C 36 00 00 
29a44 1a0 00 00 00 00 
29a48 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
29a4c 1a2 00 00 00 00 
29a50 1a3 00 00 00 00 
29a54 1a4 00 00 00 00 
29a58 1a5 00 00 00 00 
29a5c 1a6 00          | 	byte	$00[17]
29a5d 1a6 FF 00 00 0C 
29a61 1a7 18 00 00 00 
29a65 1a8 00 00 00 00 
29a69 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
29a6d 1aa 00 00 00 00 
29a71 1ab 00 00 00 00 
29a75 1ac 00          | 	byte	$00[9]
29a76 1ac 1E 30 3E 33 
29a7a 1ad 33 33 6E 00 
29a7e 1ae 00 00 00 00 
29a82 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
29a86 1b0 1E 36 66 66 
29a8a 1b1 66 66 3E 00 
29a8e 1b2 00 00 00 00 
29a92 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
29a96 1b4 3E 63 03 03 
29a9a 1b5 03 63 3E 00 
29a9e 1b6 00 00 00 00 
29aa2 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
29aa6 1b8 3C 36 33 33 
29aaa 1b9 33 33 6E 00 
29aae 1ba 00 00 00 00 
29ab2 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
29ab6 1bc 3E 63 7F 03 
29aba 1bd 03 63 3E 00 
29abe 1be 00 00 00 00 
29ac2 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
29ac6 1c0 0C 1E 0C 0C 
29aca 1c1 0C 0C 1E 00 
29ace 1c2 00 00 00 00 
29ad2 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
29ad6 1c4 6E 33 33 33 
29ada 1c5 33 33 3E 30 
29ade 1c6 33 1E 00 00 
29ae2 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
29ae6 1c8 36 6E 66 66 
29aea 1c9 66 66 67 00 
29aee 1ca 00 00 00 00 
29af2 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
29af6 1cc 1C 18 18 18 
29afa 1cd 18 18 3C 00 
29afe 1ce 00 00 00 00 
29b02 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
29b06 1d0 70 60 60 60 
29b0a 1d1 60 60 60 66 
29b0e 1d2 66 3C 00 00 
29b12 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
29b16 1d4 66 36 1E 1E 
29b1a 1d5 36 66 67 00 
29b1e 1d6 00 00 00 00 
29b22 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
29b26 1d8 18 18 18 18 
29b2a 1d9 18 18       | 	byte	$18[6]
29b2c 1da 3C 00 00 00 
29b30 1db 00 00 00 00 
29b34 1dc 00 00 37 7F 
29b38 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
29b3c 1de 63 00 00 00 
29b40 1df 00 00 00 00 
29b44 1e0 00 00 3B 66 
29b48 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
29b4c 1e2 66 00 00 00 
29b50 1e3 00 00 00 00 
29b54 1e4 00 00 3E 63 
29b58 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
29b5c 1e6 3E 00 00 00 
29b60 1e7 00 00 00 00 
29b64 1e8 00 00 3B 66 
29b68 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
29b6c 1ea 3E 06 06 0F 
29b70 1eb 00 00 00 00 
29b74 1ec 00 00 6E 33 
29b78 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
29b7c 1ee 3E 30 30 78 
29b80 1ef 00 00 00 00 
29b84 1f0 00 00 3B 6E 
29b88 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
29b8c 1f2 0F 00 00 00 
29b90 1f3 00 00 00 00 
29b94 1f4 00 00 3E 63 
29b98 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
29b9c 1f6 3E 00 00 00 
29ba0 1f7 00 00 00 08 
29ba4 1f8 0C 0C 3F 0C 
29ba8 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
29bac 1fa 38 00 00 00 
29bb0 1fb 00 00 00 00 
29bb4 1fc 00 00 33 33 
29bb8 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
29bbc 1fe 6E 00 00 00 
29bc0 1ff 00 00 00 00 
29bc4 200 00 00 63 63 
29bc8 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
29bcc 202 1C 00 00 00 
29bd0 203 00 00 00 00 
29bd4 204 00 00 63 63 
29bd8 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
29bdc 206 36 00 00 00 
29be0 207 00 00 00 00 
29be4 208 00 00 63 36 
29be8 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
29bec 20a 63 00 00 00 
29bf0 20b 00 00 00 00 
29bf4 20c 00 00 63 63 
29bf8 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
29bfc 20e 7E 60 30 1F 
29c00 20f 00 00 00 00 
29c04 210 00 00 7F 33 
29c08 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
29c0c 212 7F 00 00 00 
29c10 213 00 00 00 70 
29c14 214 18 18 18 0E 
29c18 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
29c1c 216 70 00 00 00 
29c20 217 00 00 00 18 
29c24 218 18 18 18 18 
29c28 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
29c2c 21a 18 00 00 00 
29c30 21b 00 00 00 0E 
29c34 21c 18 18 18 70 
29c38 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
29c3c 21e 0E 00 00 00 
29c40 21f 6E 3B 00 00 
29c44 220 00 00 00 00 
29c48 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
29c4c 222 00 00 00 00 
29c50 223 00 00 00 00 
29c54 224 00 00       | 	byte	$00[10]
29c56 224 08 1C 36 63 
29c5a 225 63 63 7F 00 
29c5e 226 00 00 00 00 
29c62 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
29c66 228 03 03 03 03 
29c6a 229 43 66 3C 18 
29c6e 22a 30 1E 00 00 
29c72 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
29c76 22c 33 33 33 33 
29c7a 22d 33 33       | 	byte	$33[6]
29c7c 22e 6E 00 00 00 
29c80 22f 00 00 60 30 
29c84 230 18 00 3E 63 
29c88 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
29c8c 232 3E 00 00 00 
29c90 233 00 00 08 1C 
29c94 234 36 00 1E 30 
29c98 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
29c9c 236 6E 00 00 00 
29ca0 237 00 00 00 00 
29ca4 238 33 00 1E 30 
29ca8 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
29cac 23a 6E 00 00 00 
29cb0 23b 00 00 1C 36 
29cb4 23c 1C 00 33 33 
29cb8 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
29cbc 23e 6E 00 00 00 
29cc0 23f 00 00 60 30 
29cc4 240 18 00 3E 63 
29cc8 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
29ccc 242 3E 00 00 00 
29cd0 243 00 00 00 00 
29cd4 244 00 00 3E 63 
29cd8 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
29cdc 246 3E 18 30 1E 
29ce0 247 00 00 00 1C 
29ce4 248 58 78 38 18 
29ce8 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
29cec 24a 3C 00 00 00 
29cf0 24b 00 00 00 00 
29cf4 24c 63 00 3E 63 
29cf8 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
29cfc 24e 3E 00 00 00 
29d00 24f 66 33 00 3E 
29d04 250 63 63 63 63 
29d08 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
29d0c 252 3E 00 00 00 
29d10 253 00 00 CC 66 
29d14 254 33 00 3E 63 
29d18 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
29d1c 256 3E 00 00 00 
29d20 257 00 00 18 3C 
29d24 258 66 00 1C 18 
29d28 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
29d2c 25a 3C 00 00 00 
29d30 25b 30 18 00 7F 
29d34 25c 63 61 30 18 
29d38 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
29d3c 25e 7F 00 00 00 
29d40 25f 00 63 00 08 
29d44 260 1C 36 63 63 
29d48 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
29d4c 262 63 00 00 00 
29d50 263 30 18 00 3C 
29d54 264 66 43 03 03 
29d58 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
29d5c 266 3C 00 00 00 
29d60 267 30 18 00 7F 
29d64 268 66 46 16 1E 
29d68 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
29d6c 26a 7F 00 00 00 
29d70 26b 0C 06 00 0F 
29d74 26c 06 06 06 06 
29d78 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
29d7c 26e 7F 00 00 00 
29d80 26f 30 18 00 1C 
29d84 270 18 18 18 18 
29d88 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
29d8c 272 3C 00 00 00 
29d90 273 00 00 08 1C 
29d94 274 36 00 3E 63 
29d98 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
29d9c 276 3E 00 00 00 
29da0 277 00 00 00 00 
29da4 278 63 00 3E 63 
29da8 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
29dac 27a 3E 00 00 00 
29db0 27b 00 00 00 6F 
29db4 27c 46 26 06 06 
29db8 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
29dbc 27e 7F 00 00 00 
29dc0 27f 00 00 00 6E 
29dc4 280 4C 2C 0C 0C 
29dc8 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
29dcc 282 1E 00 00 00 
29dd0 283 30 18 00 3E 
29dd4 284 63 63 06 1C 
29dd8 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
29ddc 286 3E 00 00 00 
29de0 287 00 00 60 30 
29de4 288 18 00 3E 63 
29de8 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
29dec 28a 3E 00 00 00 
29df0 28b 00 63 00 3E 
29df4 28c 63 63 63 63 
29df8 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
29dfc 28e 3E 00 00 00 
29e00 28f 00 63 00 63 
29e04 290 63 63 63 63 
29e08 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
29e0c 292 3E 00 00 00 
29e10 293 6C 38 00 7E 
29e14 294 7E 5A 18 18 
29e18 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
29e1c 296 3C 00 00 00 
29e20 297 00 00 60 48 
29e24 298 2C 0C 3F 0C 
29e28 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
29e2c 29a 38 00 00 00 
29e30 29b 00 00 00 0F 
29e34 29c 26 36 1E 0E 
29e38 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
29e3c 29e 7F 00 00 00 
29e40 29f 00 00 00 00 
29e44 2a0 00 63 36 1C 
29e48 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
29e4c 2a2 00 00 00 00 
29e50 2a3 00 00       | 	byte	$00[6]
29e52 2a3 36 1C 08 00 
29e56 2a4 3E 63 03 03 
29e5a 2a5 03 63 3E 00 
29e5e 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
29e62 2a7 30 18 0C 00 
29e66 2a8 1E 30 3E 33 
29e6a 2a9 33 33 6E 00 
29e6e 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
29e72 2ab 60 30 18 00 
29e76 2ac 1C 18 18 18 
29e7a 2ad 18 18 3C 00 
29e7e 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
29e82 2af 60 30 18 00 
29e86 2b0 3E 63 63 63 
29e8a 2b1 63 63 3E 00 
29e8e 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
29e92 2b3 30 18 0C 00 
29e96 2b4 33 33 33 33 
29e9a 2b5 33 33 6E 00 
29e9e 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
29ea2 2b7 00 08 1C 36 
29ea6 2b8 63 63 7F 63 
29eaa 2b9 63 63 63 18 
29eae 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
29eb2 2bb 00 00 00 00 
29eb6 2bc 1E 30 3E 33 
29eba 2bd 33 33 6E 18 
29ebe 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
29ec2 2bf 00 7F 63 61 
29ec6 2c0 30 18 0C 06 
29eca 2c1 43 63 7F 00 
29ece 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
29ed2 2c3 36 1C 08 00 
29ed6 2c4 7F 33 18 0C 
29eda 2c5 06 63 7F 00 
29ede 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
29ee2 2c7 00 7F 66 46 
29ee6 2c8 16 1E 16 06 
29eea 2c9 46 66 7F 18 
29eee 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
29ef2 2cb 00 00 00 00 
29ef6 2cc 3E 63 7F 03 
29efa 2cd 03 63 3E 18 
29efe 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
29f02 2cf 00 3C 66 03 
29f06 2d0 1F 03 0F 03 
29f0a 2d1 03 66 3C 00 
29f0e 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
29f12 2d3 60 30 18 00 
29f16 2d4 7F 33 18 0C 
29f1a 2d5 06 63 7F 00 
29f1e 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
29f22 2d7 00 3C 66 43 
29f26 2d8 03 03 03 03 
29f2a 2d9 43 66 3C 00 
29f2e 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
29f32 2db 00 00 00 00 
29f36 2dc 3E 63 06 1C 
29f3a 2dd 30 63 3E 18 
29f3e 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
29f42 2df 00 00 00 00 
29f46 2e0 00 00       | 	byte	$00[6]
29f48 2e1 6C 36 1B 36 
29f4c 2e2 6C 00 00 00 
29f50 2e3 00 00 00 00 
29f54 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
29f58 2e5 1B 36 6C 36 
29f5c 2e6 1B 00 00 00 
29f60 2e7 88 22 88 22 
29f64 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
29f68 2e9 88 22 88 22 
29f6c 2ea 88 22 88 22 
29f70 2eb AA 55 AA 55 
29f74 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
29f78 2ed AA 55 AA 55 
29f7c 2ee AA 55 AA 55 
29f80 2ef BB EE BB EE 
29f84 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
29f88 2f1 BB EE BB EE 
29f8c 2f2 BB EE BB EE 
29f90 2f3 18 18 18 18 
29f94 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
29f98 2f5 18 18 18 18 
29f9c 2f6 18 18 18 18 
29fa0 2f7 18 18 18 18 
29fa4 2f8 18 18 18    | 	byte	$18[15]
29fa7 2f8 1F 18 18 18 
29fab 2f9 18 18 18 18 
29faf 2fa 18 30 18 00 
29fb3 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
29fb7 2fc 63 7F 63 63 
29fbb 2fd 63 63 00 00 
29fbf 2fe 00 1C 36 00 
29fc3 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
29fc7 300 63 7F 63 63 
29fcb 301 63 63 00 00 
29fcf 302 00 36 1C 00 
29fd3 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
29fd7 304 1E 16 06 46 
29fdb 305 66 7F 00 00 
29fdf 306 00 00 00 00 
29fe3 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
29fe7 308 1C 30 60 63 
29feb 309 63 3E 18 30 
29fef 30a 1E 6C 6C 6C 
29ff3 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
29ff7 30c 6F 6C 6C 6C 
29ffb 30d 6C 6C 6C 6C 
29fff 30e 6C 6C 6C 6C 
2a003 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2a007 310 6C 6C 6C 6C 
2a00b 311 6C 6C 6C 6C 
2a00f 312 6C          | 	byte	$6c[9]
2a010 313 00 00 00 00 
2a014 314 00          | 	byte	$00[5]
2a015 314 7F 60 6F 6C 
2a019 315 6C 6C 6C 6C 
2a01d 316 6C 6C 6C 6C 
2a021 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2a025 318 6F 60 7F 00 
2a029 319 00 00 00 00 
2a02d 31a 00 00 00 18 
2a031 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
2a035 31c 61 30 18 0C 
2a039 31d 06 43 63 7F 
2a03d 31e 00 00 00 00 
2a041 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
2a045 320 00 7F 33 18 
2a049 321 0C 06 63 7F 
2a04d 322 00 00 00 00 
2a051 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
2a055 324 00 00 1F 18 
2a059 325 18 18 18 18 
2a05d 326 18 18 18 18 
2a061 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2a065 328 18 18 F8 00 
2a069 329 00 00 00 00 
2a06d 32a 00 00 00 18 
2a071 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2a075 32c 18 18 FF 00 
2a079 32d 00 00 00 00 
2a07d 32e 00 00 00 00 
2a081 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a085 330 00 00 FF 18 
2a089 331 18 18 18 18 
2a08d 332 18 18 18 18 
2a091 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2a095 334 18 18 F8 18 
2a099 335 18 18 18 18 
2a09d 336 18 18 18 00 
2a0a1 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2a0a5 338 00 00 FF 00 
2a0a9 339 00 00 00 00 
2a0ad 33a 00 00 00 18 
2a0b1 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2a0b5 33c 18 18 FF 18 
2a0b9 33d 18 18 18 18 
2a0bd 33e 18 18 18 63 
2a0c1 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
2a0c5 340 36 63 63 7F 
2a0c9 341 63 63 63 63 
2a0cd 342 00 00 00 00 
2a0d1 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
2a0d5 344 00 1E 30 3E 
2a0d9 345 33 33 33 6E 
2a0dd 346 00 00 00 6C 
2a0e1 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2a0e5 348 EC 0C FC 00 
2a0e9 349 00 00 00 00 
2a0ed 34a 00 00 00 00 
2a0f1 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a0f5 34c FC 0C EC 6C 
2a0f9 34d 6C 6C 6C 6C 
2a0fd 34e 6C 6C 6C 6C 
2a101 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2a105 350 EF 00 FF 00 
2a109 351 00 00 00 00 
2a10d 352 00 00 00 00 
2a111 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a115 354 FF 00 EF 6C 
2a119 355 6C 6C 6C 6C 
2a11d 356 6C 6C 6C 6C 
2a121 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2a125 358 EC 0C EC 6C 
2a129 359 6C 6C 6C 6C 
2a12d 35a 6C 6C 6C 00 
2a131 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2a135 35c FF 00 FF 00 
2a139 35d 00 00 00 00 
2a13d 35e 00 00 00 6C 
2a141 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2a145 360 EF 00 EF 6C 
2a149 361 6C 6C 6C 6C 
2a14d 362 6C 6C 6C 00 
2a151 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2a155 364 63 3E 63 63 
2a159 365 63 63 3E 63 
2a15d 366 00 00 00 00 
2a161 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
2a165 368 30 3C 36 33 
2a169 369 33 33 33 6E 
2a16d 36a 00 00 00 00 
2a171 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
2a175 36c 66 66 6F 66 
2a179 36d 66 66 36 1F 
2a17d 36e 00 00 00 36 
2a181 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
2a185 370 66 66 66 66 
2a189 371 66 66       | 	byte	$66[6]
2a18b 371 36 1F 00 00 
2a18f 372 00 00 63 00 
2a193 373 7F 66 46 16 
2a197 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
2a19b 375 66 7F 00 00 
2a19f 376 00 6C 38 00 
2a1a3 377 38 30 30 3C 
2a1a7 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
2a1ab 379 33 6E 00 00 
2a1af 37a 00 36 1C 00 
2a1b3 37b 63 67 6F 7F 
2a1b7 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
2a1bb 37d 63 63 00 00 
2a1bf 37e 00 30 18 00 
2a1c3 37f 3C 18 18 18 
2a1c7 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2a1cb 381 18 3C 00 00 
2a1cf 382 00 3C 66 00 
2a1d3 383 3C 18 18 18 
2a1d7 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2a1db 385 18 3C 00 00 
2a1df 386 00 00 00 36 
2a1e3 387 1C 08 00 3E 
2a1e7 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
2a1eb 389 63 3E 00 00 
2a1ef 38a 00 18 18 18 
2a1f3 38b 18 18 18 18 
2a1f7 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
2a1fb 38d 00 00 00 00 
2a1ff 38e 00 00 00 00 
2a203 38f 00 00 00 00 | 	byte	$00[12]
2a207 390 F8 18 18 18 
2a20b 391 18 18 18 18 
2a20f 392 18 FF FF FF 
2a213 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
2a217 394 FF FF FF FF 
2a21b 395 FF FF FF FF 
2a21f 396 FF          | 	byte	$ff[9]
2a220 397 00 00 00 00 
2a224 398 00 00 00    | 	byte	$00[7]
2a227 398 FF FF FF FF 
2a22b 399 FF FF FF FF 
2a22f 39a FF          | 	byte	$ff[9]
2a230 39b 00 00 00 7E 
2a234 39c 7E 5A 18 18 
2a238 39d 18 18 18 18 
2a23c 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
2a240 39f 1C 36 1C 63 
2a244 3a0 63 63 63 63 
2a248 3a1 63 63 63 63 
2a24c 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2a250 3a3 FF FF FF FF 
2a254 3a4 FF FF FF    | 	byte	$ff[7]
2a257 3a4 00 00 00 00 
2a25b 3a5 00 00 00 00 
2a25f 3a6 00          | 	byte	$00[9]
2a260 3a7 30 18 00 3E 
2a264 3a8 63 63 63 63 
2a268 3a9 63 63 63 63 
2a26c 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2a270 3ab 00 00 00 1E 
2a274 3ac 33 33 33 1B 
2a278 3ad 33 63 63 63 
2a27c 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
2a280 3af 1C 36 00 3E 
2a284 3b0 63 63 63 63 
2a288 3b1 63 63 63 63 
2a28c 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2a290 3b3 30 18 00 63 
2a294 3b4 67 6F 7F 7B 
2a298 3b5 73 63 63 63 
2a29c 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
2a2a0 3b7 00 00 60 30 
2a2a4 3b8 18 00 3B 66 
2a2a8 3b9 66 66 66 66 
2a2ac 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2a2b0 3bb 00 00 36 1C 
2a2b4 3bc 08 00 3B 66 
2a2b8 3bd 66 66 66 66 
2a2bc 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2a2c0 3bf 36 1C 00 3E 
2a2c4 3c0 63 63 06 1C 
2a2c8 3c1 30 60 63 63 
2a2cc 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
2a2d0 3c3 00 00 36 1C 
2a2d4 3c4 08 00 3E 63 
2a2d8 3c5 06 1C 30 63 
2a2dc 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
2a2e0 3c7 30 18 00 3F 
2a2e4 3c8 66 66 66 3E 
2a2e8 3c9 36 66 66 66 
2a2ec 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
2a2f0 3cb 30 18 00 63 
2a2f4 3cc 63 63 63 63 
2a2f8 3cd 63 63 63 63 
2a2fc 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2a300 3cf 00 00 60 30 
2a304 3d0 18 00 3B 6E 
2a308 3d1 66 06 06 06 
2a30c 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
2a310 3d3 66 33 00 63 
2a314 3d4 63 63 63 63 
2a318 3d5 63 63 63 63 
2a31c 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2a320 3d7 00 00 60 30 
2a324 3d8 18 00 63 63 
2a328 3d9 63 63 63 63 
2a32c 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
2a330 3db 30 18 00 66 
2a334 3dc 66 66 66 3C 
2a338 3dd 18 18 18 18 
2a33c 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
2a340 3df 00 00 00 08 
2a344 3e0 0C 0C 3F 0C 
2a348 3e1 0C 0C 0C 6C 
2a34c 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
2a350 3e3 30 18 00 00 
2a354 3e4 00 00 00 00 
2a358 3e5 00 00 00 00 
2a35c 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a360 3e7 00 00 00 00 
2a364 3e8 00 00 00 00 | 	byte	$00[8]
2a368 3e9 7F 00 00 00 
2a36c 3ea 00 00 00 00 
2a370 3eb 66 33 00 00 
2a374 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
2a378 3ed 00 00 00 00 
2a37c 3ee 00 00 00 00 
2a380 3ef 00 00 00 00 
2a384 3f0 00 00 00 00 
2a388 3f1 00 00 00 00 
2a38c 3f2 00          | 	byte	$00[21]
2a38d 3f2 0C 06 3C 36 
2a391 3f3 1C 00 00 00 
2a395 3f4 00 00 00 00 
2a399 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a39d 3f6 00 00 00 63 
2a3a1 3f7 3E 00 00 00 
2a3a5 3f8 00 00 00 00 
2a3a9 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a3ad 3fa 00 00 00 00 
2a3b1 3fb 3E 63 06 1C 
2a3b5 3fc 36 63 63 36 
2a3b9 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
2a3bd 3fe 00 00 00 00 
2a3c1 3ff 00 00 00 00 | 	byte	$00[8]
2a3c5 400 18 00 7E 00 
2a3c9 401 18 00 00 00 
2a3cd 402 00 00 00 00 
2a3d1 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a3d5 404 00 00 00 00 
2a3d9 405 00 00 00 00 | 	byte	$00[8]
2a3dd 406 18 30 1E 00 
2a3e1 407 00 00 1C 36 
2a3e5 408 36 1C 00 00 
2a3e9 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
2a3ed 40a 00 00 00 00 
2a3f1 40b 63 00 00 00 
2a3f5 40c 00 00 00 00 
2a3f9 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a3fd 40e 00 00 00 18 
2a401 40f 18 00 00 00 
2a405 410 00 00 00 00 
2a409 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a40d 412 00 00 00 00 
2a411 413 00          | 	byte	$00[5]
2a412 413 CC 66 33 00 
2a416 414 33 33 33 33 
2a41a 415 33 33 6E 00 
2a41e 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
2a422 417 00 3F 66 66 
2a426 418 66 3E 36 66 
2a42a 419 66 66 6F 00 
2a42e 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
2a432 41b 36 1C 08 00 
2a436 41c 3B 6E 66 06 
2a43a 41d 06 06 0F 00 
2a43e 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
2a442 41f 00 00 00 7E 
2a446 420 7E 7E 7E 7E 
2a44a 421 7E 7E 00 00 
2a44e 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
2a452 423 00 00 00 00 
2a456 424 00 00 00 00 
2a45a 425 00 00 00 00 
2a45e 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a460 427             | 'vga_font       file "vgafont.def"
2a460 427 00 00 00 00 
      ...             
2a490 433 00 00 00 00 
2a494 434 00 00 00    | st_font        file "st4font.def"
2a497 434 FF FF 00 00 
2a49b 435 00 00 00 00 
2a49f 436 00 18 18 18 
2a4a3 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2a4a7 438 18 18 18 18 
2a4ab 439 18 18 18 18 
2a4af 43a 18          | 	byte	$18[9]
2a4b0 43b 00 00 00 00 
2a4b4 43c 00 00 00    | 	byte	$00[7]
2a4b7 43c FF FF 18 18 
2a4bb 43d 18 18 18 18 
2a4bf 43e 18 18 18 18 
2a4c3 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2a4c7 440 FF FF 00 00 
2a4cb 441 00 00 00 00 
2a4cf 442 00 18 18 18 
2a4d3 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2a4d7 444 1F 1F 18 18 
2a4db 445 18 18 18 18 
2a4df 446 18 18 18 18 
2a4e3 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2a4e7 448 F8 F8 18 18 
2a4eb 449 18 18 18 18 
2a4ef 44a 18 00 00 00 
2a4f3 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2a4f7 44c 1F 1F 18 18 
2a4fb 44d 18 18 18 18 
2a4ff 44e 18 00 00 00 
2a503 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2a507 450 F8 F8 18 18 
2a50b 451 18 18 18 18 
2a50f 452 18 18 18 18 
2a513 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2a517 454 1F 1F 00 00 
2a51b 455 00 00 00 00 
2a51f 456 00 18 18 18 
2a523 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2a527 458 F8 F8 00 00 
2a52b 459 00 00 00 00 
2a52f 45a 00 18 18 18 
2a533 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2a537 45c FF FF 18 18 
2a53b 45d 18 18 18 18 
2a53f 45e 18 00 00 18 
2a543 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
2a547 460 66 7E 7E 66 
2a54b 461 66 66 66 30 
2a54f 462 18 00 00 7E 
2a553 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
2a557 464 3E 06 06 06 
2a55b 465 06 7E 7E 18 
2a55f 466 0C 30 18 3C 
2a563 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
2a567 468 06 06 06 66 
2a56b 469 66 7E 3C 00 
2a56f 46a 00 30 18 66 
2a573 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
2a577 46c 7E 7E 76 76 
2a57b 46d 66 66 66 00 
2a57f 46e 00 30 18 7C 
2a583 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
2a587 470 1C 38 70 60 
2a58b 471 60 7E 3E 00 
2a58f 472 00 30 18 7E 
2a593 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
2a597 474 18 0C 0C 06 
2a59b 475 06 7E 7E 00 
2a59f 476 00 18 18 00 
2a5a3 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
2a5a7 478 18 18 0C 0C 
2a5ab 479 06 7E 7E 00 
2a5af 47a 00 30 18 3C 
2a5b3 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
2a5b7 47c 66 66 66 66 
2a5bb 47d 66          | 	byte	$66[5]
2a5bc 47e 7E 3C 00 00 
2a5c0 47f 00 00 06 06 
2a5c4 480 06 06 16 1E 
2a5c8 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
2a5cc 482 7E 7E 00 00 
2a5d0 483 00 00 00 00 
2a5d4 484 00 3C 7C 60 
2a5d8 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
2a5dc 486 7E 7C 30 18 
2a5e0 487 00 00 00 00 
2a5e4 488 00 3C 7E 66 
2a5e8 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
2a5ec 48a 7E 7C 18 0C 
2a5f0 48b 00 00 30 18 
2a5f4 48c 00 3C 3E 06 
2a5f8 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
2a5fc 48e 7E 7C 00 00 
2a600 48f 00 00 30 18 
2a604 490 00 3E 7E 66 
2a608 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
2a60c 492 66 66 00 00 
2a610 493 00 00 30 18 
2a614 494 00 7C 7E 06 
2a618 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
2a61c 496 7E 3E 00 00 
2a620 497 00 00 30 18 
2a624 498 00 7E 7E 30 
2a628 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2a62c 49a 7E 7E 00 00 
2a630 49b 00 00 18 18 
2a634 49c 00 7E 7E 30 
2a638 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2a63c 49e 7E 7E 00 00 
2a640 49f 00 00 30 18 
2a644 4a0 00 3C 7E 66 
2a648 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
2a64c 4a2 7E 3C 00 00 
2a650 4a3 00 00 1C 1C 
2a654 4a4 18 18 38 3C 
2a658 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
2a65c 4a6 3C 3C 00 00 
2a660 4a7 00 00 00 00 
2a664 4a8 00 00 00 00 
2a668 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a66c 4aa 00 00 00 00 
2a670 4ab 00 00       | 	byte	$00[6]
2a672 4ab 18 18 18 18 
2a676 4ac 18 18 18 18 | 	byte	$18[8]
2a67a 4ad 00 00 18 18 
2a67e 4ae 00 00 00 00 
2a682 4af 66 66 66 66 
2a686 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
2a68a 4b1 00 00 00 00 
2a68e 4b2 00 00 00 00 
2a692 4b3 00          | 	byte	$00[9]
2a693 4b3 66 66 FF FF 
2a697 4b4 66 66 FF FF 
2a69b 4b5 66 66 00 00 
2a69f 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
2a6a3 4b7 7C 7E 06 06 
2a6a7 4b8 3E 7C 60 60 
2a6ab 4b9 7E 3E 18 18 
2a6af 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
2a6b3 4bb 66 30 30 18 
2a6b7 4bc 18 0C 0C 66 
2a6bb 4bd 66 00 00 00 
2a6bf 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
2a6c3 4bf 66 66 3C 1C 
2a6c7 4c0 1C FC FE 66 
2a6cb 4c1 66 FE FC 00 
2a6cf 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
2a6d3 4c3 18 18 18 18 
2a6d7 4c4 00 00 00 00 
2a6db 4c5 00 00 00 00 
2a6df 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
2a6e3 4c7 18 1C 0C 0C 
2a6e7 4c8 0C 0C 0C 0C 
2a6eb 4c9 1C 18 30 00 
2a6ef 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
2a6f3 4cb 18 38 30 30 
2a6f7 4cc 30 30 30 30 
2a6fb 4cd 38 18 0C 00 
2a6ff 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
2a703 4cf 66 66 3C 3C 
2a707 4d0 FF FF 3C 3C 
2a70b 4d1 66 66 00 00 
2a70f 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
2a713 4d3 00 18 18 18 
2a717 4d4 7E 7E 18 18 
2a71b 4d5 18 00 00 00 
2a71f 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2a723 4d7 00 00 00 00 
2a727 4d8 00 00       | 	byte	$00[6]
2a729 4d9 18 18 18 18 
2a72d 4da 18          | 	byte	$18[5]
2a72e 4da 0C 04 00 00 
2a732 4db 00 00 00 00 
2a736 4dc 7E 7E 00 00 
2a73a 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
2a73e 4de 00 00 00 00 
2a742 4df 00 00 00 00 
2a746 4e0 00 00 00 00 
2a74a 4e1 00          | 	byte	$00[13]
2a74b 4e1 18 18 18 00 
2a74f 4e2 00 00 00 60 
2a753 4e3 60 60 30 30 
2a757 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
2a75b 4e5 06 06 06 00 
2a75f 4e6 00 00 00 3C 
2a763 4e7 7E 66 66 66 
2a767 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
2a76b 4e9 66 7E 3C 00 
2a76f 4ea 00 00 00 18 
2a773 4eb 18 1C 1C 18 
2a777 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
2a77b 4ed 18 7E 7E 00 
2a77f 4ee 00 00 00 3C 
2a783 4ef 7E 66 66 30 
2a787 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
2a78b 4f1 0C 7E 7E 00 
2a78f 4f2 00 00 00 7E 
2a793 4f3 7E 30 30 18 
2a797 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
2a79b 4f5 66 7E 3C 00 
2a79f 4f6 00 00 00 30 
2a7a3 4f7 30 38 38 3C 
2a7a7 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
2a7ab 4f9 7E 30 30 00 
2a7af 4fa 00 00 00 7E 
2a7b3 4fb 7E 06 06 3E 
2a7b7 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
2a7bb 4fd 66 7E 3C 00 
2a7bf 4fe 00 00 00 38 
2a7c3 4ff 3C 0E 06 06 
2a7c7 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
2a7cb 501 66 7E 3C 00 
2a7cf 502 00 00 00 7E 
2a7d3 503 7E 60 60 30 
2a7d7 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
2a7db 505 0C 0C 0C 00 
2a7df 506 00 00 00 3C 
2a7e3 507 7E 66 66 3C 
2a7e7 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
2a7eb 509 66 7E 3C 00 
2a7ef 50a 00 00 00 3C 
2a7f3 50b 7E 66 66 7E 
2a7f7 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
2a7fb 50d 70 3C 1C 00 
2a7ff 50e 00 00 00 00 
2a803 50f 00 00 18 18 
2a807 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
2a80b 511 18 18 18 00 
2a80f 512 00 00 00 00 
2a813 513 00 00 18 18 
2a817 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
2a81b 515 18 18 18 0C 
2a81f 516 04 00 00 00 
2a823 517 70 38 1C 0E 
2a827 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
2a82b 519 70 00 00 00 
2a82f 51a 00 00 00 00 
2a833 51b 00 00 7E 7E 
2a837 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
2a83b 51d 00 00 00 00 
2a83f 51e 00 00 00 00 | 	byte	$00[8]
2a843 51f 0E 1C 38 70 
2a847 520 E0 70 38 1C 
2a84b 521 0E 00 00 00 
2a84f 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
2a853 523 7E 66 66 30 
2a857 524 30 18 18 18 
2a85b 525 00 18 18 00 
2a85f 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
2a863 527 7E 66 66 66 
2a867 528 66 36 06 66 
2a86b 529 66 7E 3C 00 
2a86f 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
2a873 52b 3C 7E 66 66 
2a877 52c 66 7E 7E 66 
2a87b 52d 66 66 66 00 
2a87f 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
2a883 52f 7E 66 66 7E 
2a887 530 3E 66 66 66 
2a88b 531 66 7E 3E 00 
2a88f 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
2a893 533 7E 66 66 06 
2a897 534 06 06 06 66 
2a89b 535 66 7E 3C 00 
2a89f 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
2a8a3 537 7E 66 66 66 
2a8a7 538 66 66 66 66 
2a8ab 539 66 7E 3E 00 
2a8af 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
2a8b3 53b 7E 06 06 3E 
2a8b7 53c 3E 06 06 06 
2a8bb 53d 06 7E 7E 00 
2a8bf 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
2a8c3 53f 7E 06 06 3E 
2a8c7 540 3E 06 06 06 
2a8cb 541 06 06 06 00 
2a8cf 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
2a8d3 543 7E 06 06 76 
2a8d7 544 76 66 66 66 
2a8db 545 66 7E 3C 00 
2a8df 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
2a8e3 547 66 66 66 7E 
2a8e7 548 7E 66 66 66 
2a8eb 549 66 66 66 00 
2a8ef 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
2a8f3 54b 7E 18 18 18 
2a8f7 54c 18 18 18 18 
2a8fb 54d 18 7E 7E 00 
2a8ff 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
2a903 54f 60 60 60 60 
2a907 550 60 60 60    | 	byte	$60[7]
2a90a 551 66 66 7E 3C 
2a90e 552 00 00 00 00 
2a912 553 66 66 36 36 
2a916 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
2a91a 555 66 66 C6 C6 
2a91e 556 00 00 00 00 
2a922 557 06 06 06 06 
2a926 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
2a92a 559 06 06 7E 7E 
2a92e 55a 00 00 00 00 
2a932 55b C6 C6 EE EE 
2a936 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
2a93a 55d C6 C6 C6 C6 
2a93e 55e 00 00 00 00 
2a942 55f 66 66 66 6E 
2a946 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
2a94a 561 76 66 66 66 
2a94e 562 00 00 00 00 
2a952 563 3C 7E 66 66 
2a956 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2a95a 565 66 66 7E 3C 
2a95e 566 00 00 00 00 
2a962 567 3E 7E 66 66 
2a966 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
2a96a 569 06 06 06 06 
2a96e 56a 00 00 00 00 
2a972 56b 3C 7E 66 66 
2a976 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2a97a 56d 66 56 3E 6C 
2a97e 56e 00 00 00 00 
2a982 56f 3E 7E 66 66 
2a986 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
2a98a 571 66 66 C6 C6 
2a98e 572 00 00 00 00 
2a992 573 7C 7E 06 06 
2a996 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
2a99a 575 60 60 7E 3E 
2a99e 576 00 00 00 00 
2a9a2 577 7E 7E 18 18 
2a9a6 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
2a9aa 579 18 18 18 18 
2a9ae 57a 00 00 00 00 
2a9b2 57b 66 66 66 66 
2a9b6 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2a9ba 57d 66 66 7E 3C 
2a9be 57e 00 00 00 00 
2a9c2 57f 66 66 66 66 
2a9c6 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2a9ca 581 3C 3C 18 18 
2a9ce 582 00 00 00 00 
2a9d2 583 C6 C6 C6 C6 
2a9d6 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
2a9da 585 FE EE C6 82 
2a9de 586 00 00 00 00 
2a9e2 587 66 66 66 3C 
2a9e6 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
2a9ea 589 3C 66 66 66 
2a9ee 58a 00 00 00 00 
2a9f2 58b 66 66 66 66 
2a9f6 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
2a9fa 58d 18 18 18 18 
2a9fe 58e 00 00 00 00 
2aa02 58f 7E 7E 30 30 
2aa06 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
2aa0a 591 06 06 7E 7E 
2aa0e 592 00 00 00 00 
2aa12 593 3C 3C 0C 0C 
2aa16 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
2aa1a 595 0C 0C 3C 3C 
2aa1e 596 00 00 00 00 
2aa22 597 06 06 0C 0C 
2aa26 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
2aa2a 599 60 60 C0 C0 
2aa2e 59a 00 00 00 00 
2aa32 59b 3C 3C 30 30 
2aa36 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
2aa3a 59d 30 30 3C 3C 
2aa3e 59e 00 00 00 00 
2aa42 59f 18 18 3C 3C 
2aa46 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
2aa4a 5a1 00 00 00 00 
2aa4e 5a2 00 00 00 00 
2aa52 5a3 00 00 00 00 
2aa56 5a4 00 00 00 00 
2aa5a 5a5 00 00       | 	byte	$00[18]
2aa5c 5a6 FE FE 00 00 
2aa60 5a7 00 00 0C 0C 
2aa64 5a8 18 18 00 00 
2aa68 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
2aa6c 5aa 00 00 00 00 
2aa70 5ab 00 00 00 00 
2aa74 5ac 00          | 	byte	$00[9]
2aa75 5ac 3C 7C 60 7C 
2aa79 5ad 7E 66 66 7E 
2aa7d 5ae 7C 00 00 00 
2aa81 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
2aa85 5b0 3E 7E 66 66 
2aa89 5b1 66 66 66 7E 
2aa8d 5b2 3E 00 00 00 
2aa91 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
2aa95 5b4 3C 3E 06 06 
2aa99 5b5 06 06 06 7E 
2aa9d 5b6 7C 00 00 00 
2aaa1 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
2aaa5 5b8 7C 7E 66 66 
2aaa9 5b9 66 66 66 7E 
2aaad 5ba 7C 00 00 00 
2aab1 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
2aab5 5bc 3C 7E 66 66 
2aab9 5bd 7E 06 06 7E 
2aabd 5be 7C 00 00 00 
2aac1 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
2aac5 5c0 18 7E 7E 18 
2aac9 5c1 18 18 18 18 
2aacd 5c2 18 00 00 00 
2aad1 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2aad5 5c4 7C 7E 66 66 
2aad9 5c5 66 66 7E 7C 
2aadd 5c6 60 7E 3E 00 
2aae1 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
2aae5 5c8 3E 7E 66 66 
2aae9 5c9 66 66 66 66 
2aaed 5ca 66 00 00 00 
2aaf1 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
2aaf5 5cc 1C 1C 18 18 
2aaf9 5cd 18 18 18 3C 
2aafd 5ce 3C 00 00 00 
2ab01 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
2ab05 5d0 30 30 30 30 
2ab09 5d1 30 30 30 30 
2ab0d 5d2 30          | 	byte	$30[9]
2ab0e 5d2 3E 1E 00 00 
2ab12 5d3 06 06 06 36 
2ab16 5d4 36 1E 1E 1E 
2ab1a 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
2ab1e 5d6 00 00 00 00 
2ab22 5d7 1C 1C 18 18 
2ab26 5d8 18 18 18 18 
2ab2a 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
2ab2e 5da 00 00 00 00 
2ab32 5db 00 00 00    | 	byte	$00[7]
2ab35 5dc 6C FE FE D6 
2ab39 5dd D6 C6 C6 C6 
2ab3d 5de C6 00 00 00 
2ab41 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
2ab45 5e0 3E 7E 66 66 
2ab49 5e1 66 66 66 66 
2ab4d 5e2 66 00 00 00 
2ab51 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
2ab55 5e4 3C 7E 66 66 
2ab59 5e5 66 66 66 7E 
2ab5d 5e6 3C 00 00 00 
2ab61 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
2ab65 5e8 3E 7E 66 66 
2ab69 5e9 66 66 66 7E 
2ab6d 5ea 3E 06 06 00 
2ab71 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
2ab75 5ec 7C 7E 66 66 
2ab79 5ed 66 66 66 7E 
2ab7d 5ee 7C 60 60 00 
2ab81 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
2ab85 5f0 3E 7E 66 06 
2ab89 5f1 06 06 06 06 
2ab8d 5f2 06 00 00 00 
2ab91 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
2ab95 5f4 7C 7E 06 0E 
2ab99 5f5 3C 70 60 7E 
2ab9d 5f6 3E 00 00 00 
2aba1 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
2aba5 5f8 7E 7E 18 18 
2aba9 5f9 18 18 18 78 
2abad 5fa 70 00 00 00 
2abb1 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
2abb5 5fc 66 66 66 66 
2abb9 5fd 66 66 66    | 	byte	$66[7]
2abbc 5fe 7E 7C 00 00 
2abc0 5ff 00 00 00 00 
2abc4 600 00 66 66 66 
2abc8 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
2abcc 602 18 18 00 00 
2abd0 603 00 00 00 00 
2abd4 604 00 C6 C6 D6 
2abd8 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
2abdc 606 C6 82 00 00 
2abe0 607 00 00 00 00 
2abe4 608 00 66 66 3C 
2abe8 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
2abec 60a 66 66 00 00 
2abf0 60b 00 00 00 00 
2abf4 60c 00 66 66 66 
2abf8 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
2abfc 60e 7C 60 7E 3E 
2ac00 60f 00 00 00 00 
2ac04 610 00 7E 7E 30 
2ac08 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2ac0c 612 7E 7E 00 00 
2ac10 613 00 00 30 18 
2ac14 614 18 18 18 0C 
2ac18 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
2ac1c 616 18 30 00 00 
2ac20 617 00 00 18 18 
2ac24 618 18 18 18 18 
2ac28 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2ac2c 61a 18 18 00 00 
2ac30 61b 00 00 0C 18 
2ac34 61c 18 18 18 30 
2ac38 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
2ac3c 61e 18 0C 00 00 
2ac40 61f 00 00 6C 7E 
2ac44 620 36 00 00 00 
2ac48 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
2ac4c 622 00 00 00 00 
2ac50 623 00 00 00 00 
2ac54 624 00          | 	byte	$00[9]
2ac55 624 18 18 18 18 
2ac59 625 18 18 00 00 
2ac5d 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2ac60 627             | 'amiga_font     file "amigafont.def"
2ac60 627 00 6C FE FE 
2ac64 628 7C 38 10 00 
2ac68 629 18 18 18 F8 
2ac6c 62a F8 18 18 18 | a8_font        file "atari8.fnt"
2ac70 62b C0 C0 C0 C0 
2ac74 62c C0 C0 C0 C0 | 	byte	$c0[8]
2ac78 62d 18 18 18 1F 
2ac7c 62e 1F 00 00 00 
2ac80 62f 18 18 18 1F 
2ac84 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
2ac88 631 00 00 00 1F 
2ac8c 632 1F 18 18 18 
2ac90 633 C0 E0 70 38 
2ac94 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
2ac98 635 03 07 0E 1C 
2ac9c 636 38 70 E0 C0 
2aca0 637 80 C0 E0 F0 
2aca4 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
2aca8 639 00 00 00 00 
2acac 63a F0 F0 F0 F0 
2acb0 63b 01 03 07 0F 
2acb4 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
2acb8 63d F0 F0 F0 F0 
2acbc 63e 00 00 00 00 
2acc0 63f 0F 0F 0F 0F 
2acc4 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
2acc8 641 FF FF 00 00 
2accc 642 00 00 00 00 
2acd0 643 00 00 00 00 
2acd4 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
2acd8 645 00 00 00 00 
2acdc 646 0F 0F 0F 0F 
2ace0 647 00 38 38 EE 
2ace4 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
2ace8 649 00 00 00 F8 
2acec 64a F8 18 18 18 
2acf0 64b 00 00 00 FF 
2acf4 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
2acf8 64d 18 18 18 FF 
2acfc 64e FF 18 18 18 
2ad00 64f 00 00 3C 7E 
2ad04 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
2ad08 651 00 00 00 00 
2ad0c 652 FF FF FF FF 
2ad10 653 03 03 03 03 
2ad14 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
2ad18 655 00 00 00 FF 
2ad1c 656 FF 18 18 18 
2ad20 657 18 18 18 FF 
2ad24 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
2ad28 659 0F 0F 0F 0F 
2ad2c 65a 0F 0F 0F 0F | 	byte	$0f[8]
2ad30 65b 18 18 18 F8 
2ad34 65c F8 00 00 00 
2ad38 65d 1E 06 1E 06 
2ad3c 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
2ad40 65f 00 18 3C 7E 
2ad44 660 18 18 18 00 
2ad48 661 00 18 18 18 
2ad4c 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
2ad50 663 00 18 0C 7E 
2ad54 664 0C 18 00 00 
2ad58 665 00 18 30 7E 
2ad5c 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
2ad60 667 00 00 00 00 
2ad64 668 00 00 00 00 
2ad68 669 00          | 	byte	$00[9]
2ad69 669 18 18 18 18 
2ad6d 66a 00 18 00 00 
2ad71 66b 66 66 66 00 
2ad75 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
2ad79 66d 66 FF 66 66 
2ad7d 66e FF 66 00 18 
2ad81 66f 7C 06 3C 60 
2ad85 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
2ad89 671 66 36 18 0C 
2ad8d 672 66 62 00 38 
2ad91 673 6C 38 1C F6 
2ad95 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
2ad99 675 18 18 18 00 
2ad9d 676 00 00 00 00 
2ada1 677 70 38 18 18 
2ada5 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
2ada9 679 0E 1C 18 18 
2adad 67a 1C 0E 00 00 
2adb1 67b 66 3C FF 3C 
2adb5 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
2adb9 67d 18 18 7E 18 
2adbd 67e 18 00 00 00 
2adc1 67f 00 00 00 00 
2adc5 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
2adc9 681 00 00 7E 00 
2adcd 682 00 00 00 00 
2add1 683 00 00 00 00 
2add5 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
2add9 685 60 30 18 0C 
2addd 686 06 02 00 00 
2ade1 687 3C 66 76 6E 
2ade5 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
2ade9 689 18 1C 18 18 
2aded 68a 18 7E 00 00 
2adf1 68b 3C 66 30 18 
2adf5 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
2adf9 68d 7E 30 18 30 
2adfd 68e 66 3C 00 00 
2ae01 68f 30 38 3C 36 
2ae05 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
2ae09 691 7E 06 3E 60 
2ae0d 692 66 3C 00 00 
2ae11 693 3C 06 3E 66 
2ae15 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
2ae19 695 7E 60 30 18 
2ae1d 696 0C 0C 00 00 
2ae21 697 3C 66 3C 66 
2ae25 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
2ae29 699 3C 66 7C 60 
2ae2d 69a 30 1C 00 00 
2ae31 69b 00 18 18 00 
2ae35 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
2ae39 69d 00 18 18 00 
2ae3d 69e 18 18 0C 60 
2ae41 69f 30 18 0C 18 
2ae45 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
2ae49 6a1 00 7E 00 00 
2ae4d 6a2 7E 00 00 06 
2ae51 6a3 0C 18 30 18 
2ae55 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
2ae59 6a5 3C 66 30 18 
2ae5d 6a6 00 18 00 00 
2ae61 6a7 3C 66 76 76 
2ae65 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
2ae69 6a9 18 3C 66 66 
2ae6d 6aa 7E 66 00 00 
2ae71 6ab 3E 66 3E 66 
2ae75 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
2ae79 6ad 3C 66 06 06 
2ae7d 6ae 66 3C 00 00 
2ae81 6af 1E 36 66 66 
2ae85 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
2ae89 6b1 7E 06 3E 06 
2ae8d 6b2 06 7E 00 00 
2ae91 6b3 7E 06 3E 06 
2ae95 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
2ae99 6b5 7C 06 06 76 
2ae9d 6b6 66 7C 00 00 
2aea1 6b7 66 66 7E 66 
2aea5 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
2aea9 6b9 7E 18 18 18 
2aead 6ba 18 7E 00 00 
2aeb1 6bb 60 60 60 60 
2aeb5 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
2aeb9 6bd 66 36 1E 1E 
2aebd 6be 36 66 00 00 
2aec1 6bf 06 06 06 06 
2aec5 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
2aec9 6c1 C6 EE FE D6 
2aecd 6c2 C6 C6 00 00 
2aed1 6c3 66 6E 7E 7E 
2aed5 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
2aed9 6c5 3C 66 66 66 
2aedd 6c6 66 3C 00 00 
2aee1 6c7 3E 66 66 3E 
2aee5 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
2aee9 6c9 3C 66 66 66 
2aeed 6ca 36 6C 00 00 
2aef1 6cb 3E 66 66 3E 
2aef5 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
2aef9 6cd 3C 06 3C 60 
2aefd 6ce 60 3C 00 00 
2af01 6cf 7E 18 18 18 
2af05 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
2af09 6d1 66 66 66 66 
2af0d 6d2 66          | 	byte	$66[5]
2af0e 6d2 7E 00 00 66 
2af12 6d3 66 66 66 3C 
2af16 6d4 18 00 00 C6 
2af1a 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
2af1e 6d6 C6 00 00 66 
2af22 6d7 66 3C 3C 66 
2af26 6d8 66 00 00 66 
2af2a 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
2af2e 6da 18 00 00 7E 
2af32 6db 30 18 0C 06 
2af36 6dc 7E 00 00 78 
2af3a 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
2af3e 6de 78 00 00 02 
2af42 6df 06 0C 18 30 
2af46 6e0 60 00 00 1E 
2af4a 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
2af4e 6e2 1E 00 00 10 
2af52 6e3 38 6C C6 00 
2af56 6e4 00 00 00 00 
2af5a 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
2af5e 6e6 FF 00 00 18 
2af62 6e7 3C 7E 7E 3C 
2af66 6e8 18 00 00 00 
2af6a 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
2af6e 6ea 7C 00 00 06 
2af72 6eb 06 3E 66 66 
2af76 6ec 3E 00 00 00 
2af7a 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
2af7e 6ee 3C 00 00 60 
2af82 6ef 60 7C 66 66 
2af86 6f0 7C 00 00 00 
2af8a 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
2af8e 6f2 3C 00 00 70 
2af92 6f3 18 7C 18 18 
2af96 6f4 18 00 00 00 
2af9a 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
2af9e 6f6 60 3E 00 06 
2afa2 6f7 06 3E 66 66 
2afa6 6f8 66 00 00 18 
2afaa 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
2afae 6fa 3C 00 00 60 
2afb2 6fb 00 60 60 60 
2afb6 6fc 60 3C 00 06 
2afba 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
2afbe 6fe 66 00 00 1C 
2afc2 6ff 18 18 18 18 
2afc6 700 3C 00 00 00 
2afca 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
2afce 702 C6 00 00 00 
2afd2 703 3E 66 66 66 
2afd6 704 66 00 00 00 
2afda 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
2afde 706 3C 00 00 00 
2afe2 707 3E 66 66 3E 
2afe6 708 06 06 00 00 
2afea 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
2afee 70a 60 60 00 00 
2aff2 70b 3E 66 06 06 
2aff6 70c 06 00 00 00 
2affa 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
2affe 70e 3E 00 00 18 
2b002 70f 7E 18 18 18 
2b006 710 70 00 00 00 
2b00a 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
2b00e 712 7C 00 00 00 
2b012 713 66 66 66 3C 
2b016 714 18 00 00 00 
2b01a 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
2b01e 716 6C 00 00 00 
2b022 717 66 3C 18 3C 
2b026 718 66 00 00 00 
2b02a 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
2b02e 71a 30 1E 00 00 
2b032 71b 7E 30 18 0C 
2b036 71c 7E 00 00 18 
2b03a 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
2b03e 71e 3C 00 18 18 
2b042 71f 18 18 18 18 
2b046 720 18 18 00 7E 
2b04a 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
2b04e 722 60 00 10 18 
2b052 723 1C 1E 1C 18 
2b056 724 10 00 08 18 
2b05a 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
2b05e 726 08 00       | 	byte	$08, $00
2b060 727 00 00 00 00 
2b064 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
2b065 728 80 00 00 00 
2b069 729 00 80 00 00 
2b06d 72a 80 80 00 00 
2b071 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
2b075 72c 80 00 80 00 
2b079 72d 00 40 80 00 
2b07d 72e AA AA AA 00 
2b081 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
2b085 730 FF 00 00 00 
2b089 731 00 FF 00 00 
2b08d 732 FF FF 00 00 
2b091 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
2b095 734 FF 00 FF 00 
2b099 735 00 FF FF 00 
2b09d 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
2b0a0 737 00 00 00 00 
2b0a4 738 00          | ataripalette   file "ataripalettep2.def"
2b0a5 738 11 11 11 00 
2b0a9 739 22 22 22 00 
2b0ad 73a 33 33 33 00 
2b0b1 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
2b0b5 73c 55 55 55 00 
2b0b9 73d 66 66 66 00 
2b0bd 73e 77 77 77 00 
2b0c1 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
2b0c5 740 99 99 99 00 
2b0c9 741 AA AA AA 00 
2b0cd 742 BB BB BB 00 
2b0d1 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
2b0d5 744 DD DD DD 00 
2b0d9 745 EE EE EE 00 
2b0dd 746 FF FF FF 00 
2b0e1 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
2b0e5 748 00 14 40 00 
2b0e9 749 00 1E 60 00 
2b0ed 74a 00 28 80 00 
2b0f1 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
2b0f5 74c 00 3C BF 00 
2b0f9 74d 00 46 DF 00 
2b0fd 74e 00 50 FF 00 
2b101 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
2b105 750 39 77 FF 00 
2b109 751 55 8A FF 00 
2b10d 752 71 9E FF 00 
2b111 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
2b115 754 AA C5 FF 00 
2b119 755 C6 D8 FF 00 
2b11d 756 E3 EC FF 00 
2b121 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
2b125 758 00 00 40 00 
2b129 759 00 00 60 00 
2b12d 75a 00 00 80 00 
2b131 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
2b135 75c 00 00 BF 00 
2b139 75d 00 00 DF 00 
2b13d 75e 00 00 FF 00 
2b141 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
2b145 760 39 39 FF 00 
2b149 761 55 55 FF 00 
2b14d 762 71 71 FF 00 
2b151 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
2b155 764 AA AA FF 00 
2b159 765 C6 C6 FF 00 
2b15d 766 E3 E3 FF 00 
2b161 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
2b165 768 20 00 40 00 
2b169 769 30 00 60 00 
2b16d 76a 40 00 80 00 
2b171 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
2b175 76c 60 00 BF 00 
2b179 76d 70 00 DF 00 
2b17d 76e 80 00 FF 00 
2b181 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
2b185 770 9C 39 FF 00 
2b189 771 AA 55 FF 00 
2b18d 772 B8 71 FF 00 
2b191 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
2b195 774 D5 AA FF 00 
2b199 775 E3 C6 FF 00 
2b19d 776 F1 E3 FF 00 
2b1a1 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
2b1a5 778 40 00 40 00 
2b1a9 779 60 00 60 00 
2b1ad 77a 80 00 80 00 
2b1b1 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
2b1b5 77c BF 00 BF 00 
2b1b9 77d DF 00 DF 00 
2b1bd 77e FF 00 FF 00 
2b1c1 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
2b1c5 780 FF 39 FF 00 
2b1c9 781 FF 55 FF 00 
2b1cd 782 FF 71 FF 00 
2b1d1 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
2b1d5 784 FF AA FF 00 
2b1d9 785 FF C6 FF 00 
2b1dd 786 FF E3 FF 00 
2b1e1 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
2b1e5 788 40 00 20 00 
2b1e9 789 60 00 30 00 
2b1ed 78a 80 00 40 00 
2b1f1 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
2b1f5 78c BF 00 60 00 
2b1f9 78d DF 00 70 00 
2b1fd 78e FF 00 80 00 
2b201 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
2b205 790 FF 39 9C 00 
2b209 791 FF 55 AA 00 
2b20d 792 FF 71 B8 00 
2b211 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
2b215 794 FF AA D5 00 
2b219 795 FF C6 E3 00 
2b21d 796 FF E3 F1 00 
2b221 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
2b225 798 40 00 00 00 
2b229 799 60 00 00 00 
2b22d 79a 80 00 00 00 
2b231 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
2b235 79c BF 00 00 00 
2b239 79d DF 00 00 00 
2b23d 79e FF 00 00 00 
2b241 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
2b245 7a0 FF 39 39 00 
2b249 7a1 FF 55 55 00 
2b24d 7a2 FF 71 71 00 
2b251 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
2b255 7a4 FF AA AA 00 
2b259 7a5 FF C6 C6 00 
2b25d 7a6 FF E3 E3 00 
2b261 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
2b265 7a8 40 10 00 00 
2b269 7a9 60 18 00 00 
2b26d 7aa 80 20 00 00 
2b271 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
2b275 7ac BF 30 00 00 
2b279 7ad DF 38 00 00 
2b27d 7ae FF 40 00 00 
2b281 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
2b285 7b0 FF 6A 39 00 
2b289 7b1 FF 80 55 00 
2b28d 7b2 FF 95 71 00 
2b291 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
2b295 7b4 FF BF AA 00 
2b299 7b5 FF D5 C6 00 
2b29d 7b6 FF EA E3 00 
2b2a1 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
2b2a5 7b8 40 20 00 00 
2b2a9 7b9 60 30 00 00 
2b2ad 7ba 80 40 00 00 
2b2b1 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
2b2b5 7bc BF 60 00 00 
2b2b9 7bd DF 70 00 00 
2b2bd 7be FF 80 00 00 
2b2c1 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
2b2c5 7c0 FF 9C 39 00 
2b2c9 7c1 FF AA 55 00 
2b2cd 7c2 FF B8 71 00 
2b2d1 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
2b2d5 7c4 FF D5 AA 00 
2b2d9 7c5 FF E3 C6 00 
2b2dd 7c6 FF F1 E3 00 
2b2e1 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
2b2e5 7c8 40 30 00 00 
2b2e9 7c9 60 48 00 00 
2b2ed 7ca 80 60 00 00 
2b2f1 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
2b2f5 7cc BF 90 00 00 
2b2f9 7cd DF A8 00 00 
2b2fd 7ce FF C0 00 00 
2b301 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
2b305 7d0 FF CE 39 00 
2b309 7d1 FF D5 55 00 
2b30d 7d2 FF DC 71 00 
2b311 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
2b315 7d4 FF EA AA 00 
2b319 7d5 FF F1 C6 00 
2b31d 7d6 FF F8 E3 00 
2b321 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
2b325 7d8 30 40 00 00 
2b329 7d9 48 60 00 00 
2b32d 7da 60 80 00 00 
2b331 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
2b335 7dc 90 BF 00 00 
2b339 7dd A8 DF 00 00 
2b33d 7de C0 FF 00 00 
2b341 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
2b345 7e0 CE FF 39 00 
2b349 7e1 D5 FF 55 00 
2b34d 7e2 DC FF 71 00 
2b351 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
2b355 7e4 EA FF AA 00 
2b359 7e5 F1 FF C6 00 
2b35d 7e6 F8 FF E3 00 
2b361 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
2b365 7e8 00 40 00 00 
2b369 7e9 00 60 00 00 
2b36d 7ea 00 80 00 00 
2b371 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
2b375 7ec 00 BF 00 00 
2b379 7ed 00 DF 00 00 
2b37d 7ee 00 FF 00 00 
2b381 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
2b385 7f0 39 FF 39 00 
2b389 7f1 55 FF 55 00 
2b38d 7f2 71 FF 71 00 
2b391 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
2b395 7f4 AA FF AA 00 
2b399 7f5 C6 FF C6 00 
2b39d 7f6 E3 FF E3 00 
2b3a1 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
2b3a5 7f8 00 40 14 00 
2b3a9 7f9 00 60 1E 00 
2b3ad 7fa 00 80 28 00 
2b3b1 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
2b3b5 7fc 00 BF 3C 00 
2b3b9 7fd 00 DF 46 00 
2b3bd 7fe 00 FF 50 00 
2b3c1 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
2b3c5 800 39 FF 77 00 
2b3c9 801 55 FF 8A 00 
2b3cd 802 71 FF 9E 00 
2b3d1 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
2b3d5 804 AA FF C5 00 
2b3d9 805 C6 FF D8 00 
2b3dd 806 E3 FF EC 00 
2b3e1 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
2b3e5 808 00 40 28 00 
2b3e9 809 00 60 3C 00 
2b3ed 80a 00 80 50 00 
2b3f1 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
2b3f5 80c 00 BF 78 00 
2b3f9 80d 00 DF 8C 00 
2b3fd 80e 00 FF A0 00 
2b401 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
2b405 810 39 FF B5 00 
2b409 811 55 FF C0 00 
2b40d 812 71 FF CA 00 
2b411 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
2b415 814 AA FF DF 00 
2b419 815 C6 FF EA 00 
2b41d 816 E3 FF F4 00 
2b421 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
2b425 818 00 40 40 00 
2b429 819 00 60 60 00 
2b42d 81a 00 80 80 00 
2b431 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
2b435 81c 00 BF BF 00 
2b439 81d 00 DF DF 00 
2b43d 81e 00 FF FF 00 
2b441 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
2b445 820 39 FF FF 00 
2b449 821 55 FF FF 00 
2b44d 822 71 FF FF 00 
2b451 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
2b455 824 AA FF FF 00 
2b459 825 C6 FF FF 00 
2b45d 826 E3 FF FF 00 
2b461 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
2b465 828 00 28 40 00 
2b469 829 00 3C 60 00 
2b46d 82a 00 50 80 00 
2b471 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
2b475 82c 00 78 BF 00 
2b479 82d 00 8C DF 00 
2b47d 82e 00 A0 FF 00 
2b481 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
2b485 830 39 B5 FF 00 
2b489 831 55 C0 FF 00 
2b48d 832 71 CA FF 00 
2b491 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
2b495 834 AA DF FF 00 
2b499 835 C6 EA FF 00 
2b49d 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
2b4a0 837             | 
2b4a0 837             | '**********************************************************************************
2b4a0 837             | '
2b4a0 837             | '        Timings and colors definitions
2b4a0 837             | '
2b4a0 837             | '**********************************************************************************
2b4a0 837             | 
2b4a0 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
2b4a0 837 10 00 00 00 
2b4a4 838 50 00 00 00 
2b4a8 839 0C 00 00 00 
2b4ac 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
2b4b0 83b 08 00 00 00 
2b4b4 83c 04 00 00 00 
2b4b8 83d 08 00 00 00 
2b4bc 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
2b4c0 83f 40 02 00 00 
2b4c4 840 6A 8C 15 14 
2b4c8 841 FB 06 B7 01 
2b4cc 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
2b4d0 843 00 00 00 00 
2b4d4 844 C0 00 00 00 
2b4d8 845 00 00 00 00 
2b4dc 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b4e0 847 00 75 C7 97 
2b4e4 848 27 47 F6 0A 
2b4e8 849 05 79 CB 9B 
2b4ec 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
2b4f0 84b             | 
2b4f0 84b             | ''--------  Initialization  ----------------------------------------------------------------
2b4f0 84b             | 
2b4f0 84b 28 0C 64 FD | hdmi            setq    #6
2b4f4 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
2b4f8 84d 28 10 64 FD |                 setq    #8
2b4fc 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
2b500 84f             | 
2b500 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
2b504 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
2b508 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
2b50c 852 D6 C6 01 F1 |                 add     t1,hbase
2b510 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
2b514 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
2b518 855 7B 0B 80 5F 
2b51c 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
2b520 857 66 66 86 FF 
2b524 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
2b528 859             | '
2b528 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
2b52c 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
2b530 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
2b534 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
2b538 85d             | 
2b538 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
2b53c 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
2b540 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
2b544 860             | 
2b544 860             | ''--------  frame rendering main loop  ---------------------------------------------------
2b544 860             | 
2b544 860 28 06 64 FD | p101            setq 	#3
2b548 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
2b54c 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
2b550 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
2b554 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
2b558 865 00 A0 05 F6 |                 mov     dlinum, #0
2b55c 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
2b560 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
2b564 868             | 
2b564 868             | 
2b564 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
2b568 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
2b56c 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
2b570 86b             |                 
2b570 86b             | 
2b570 86b             | 
2b570 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
2b570 86b             |   
2b570 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
2b574 86c 29 FE 65 3D |          if_nc  setq2   #255
2b578 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
2b57c 86e             | 
2b57c 86e             | '' -----   up porch (before the picture)
2b57c 86e             | 
2b57c 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
2b580 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
2b584 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
2b588 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
2b58c 872             |  
2b58c 872             |    
2b58c 872             |  
2b58c 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2b590 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
2b594 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
2b598 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2b59c 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
2b5a0 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
2b5a4 878             | 
2b5a4 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2b5a8 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
2b5ac 87a 48 00 B0 FD | 		call    #dli
2b5b0 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
2b5b4 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
2b5b8 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
2b5bc 87e             |                 	
2b5bc 87e             |                 
2b5bc 87e             | 
2b5bc 87e             |  
2b5bc 87e             | '' ------- the main screen drawing starts here
2b5bc 87e             | 
2b5bc 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
2b5c0 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
2b5c4 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
2b5c8 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
2b5cc 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
2b5d0 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
2b5d4 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
2b5d8 885             |               
2b5d8 885             | 
2b5d8 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
2b5dc 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
2b5e0 887             | 
2b5e0 887             | ' ---------------- All visible lines displayed now, start vblank  
2b5e0 887             | 
2b5e0 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
2b5e4 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
2b5e8 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
2b5ec 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
2b5f0 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
2b5f4 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
2b5f8 88d             | 
2b5f8 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
2b5f8 88d             | 
2b5f8 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
2b5f8 88d             | 
2b5f8 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
2b5fc 88e             | 
2b5fc 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
2b600 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
2b604 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
2b608 891             | 
2b608 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
2b60c 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
2b610 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
2b614 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
2b618 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
2b61c 896             | 
2b61c 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
2b620 897 DD C6 41 F8 |                 getnib  t1,dl,#0
2b624 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
2b628 899 70 00 90 AD |     if_z        jmp     #preload
2b62c 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
2b630 89b 94 00 90 AD |     if_z        jmp     #preload2
2b634 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
2b638 89d 0C 00 90 AD |     if_z        jmp     #p390
2b63c 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
2b640 89f 28 00 90 AD |     if_z        jmp     #p391  
2b644 8a0             | 
2b644 8a0 2D 00 64 FD | p308            ret
2b648 8a1             |    
2b648 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
2b64c 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
2b650 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
2b654 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
2b658 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
2b65c 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
2b660 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
2b664 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
2b668 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
2b66c 8aa             |  
2b66c 8aa             | '' --------  Reload palette. To do 
2b66c 8aa             | 
2b66c 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
2b670 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
2b674 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
2b678 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
2b67c 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
2b680 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
2b684 8b0 70 FF 9F FD |         	jmp     #dli                
2b688 8b1             |       
2b688 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
2b688 8b1             | 
2b688 8b1             | 
2b688 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
2b688 8b1             | 
2b688 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
2b68c 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
2b690 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2b694 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
2b698 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
2b69c 8b6             |         
2b69c 8b6             | '' -------------- Preload a line from PSRAM        
2b69c 8b6             |         
2b69c 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
2b6a0 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
2b6a4 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
2b6a8 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
2b6ac 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
2b6b0 8bb             | 
2b6b0 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
2b6b4 8bc 32 B7 01 F6 |                 mov     buf2,a1024
2b6b8 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
2b6bc 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
2b6c0 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
2b6c4 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
2b6c8 8c1             |  
2b6c8 8c1             |  
2b6c8 8c1             | preload2      '  incmod  dlinum,#3
2b6c8 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
2b6cc 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
2b6d0 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
2b6d4 8c4 28 02 64 FD |                 setq	#1
2b6d8 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
2b6dc 8c6             |                 
2b6dc 8c6             | 
2b6dc 8c6             | '' -------------- Draw sprites
2b6dc 8c6             | 
2b6dc 8c6 CF 5C 02 F6 | sprite          mov t8,frames
2b6e0 8c7 10 5C 0E F5 | 		and t8,#16 wz
2b6e4 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
2b6e8 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
2b6ec 8ca             | 		
2b6ec 8ca             | 
2b6ec 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
2b6f0 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
2b6f4 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
2b6f8 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
2b6fc 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
2b700 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
2b704 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
2b708 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
2b70c 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
2b710 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
2b714 8d4 01 52 86 F1 |                 sub     sprite_h,#1
2b718 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
2b71c 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
2b720 8d7             | 
2b720 8d7             | 
2b720 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
2b724 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
2b728 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
2b72c 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
2b730 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
2b734 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
2b738 8dd 00 5E 06 F6 |                 mov 	t9,#0
2b73c 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
2b740 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
2b744 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
2b748 8e1             |      
2b748 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
2b74c 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
2b750 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
2b754 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
2b758 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
2b75c 8e6             |                 
2b75c 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
2b760 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
2b764 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
2b768 8e9             |   		
2b768 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
2b76c 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
2b770 8eb             | 
2b770 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
2b774 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
2b778 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
2b77c 8ee             |  
2b77c 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
2b780 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
2b784 8f0 10 00 90 CD |      if_c 	jmp     #p899		
2b788 8f1             | 	
2b788 8f1             | 	
2b788 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
2b78c 8f2 28 CD 01 F1 | 		add	t4,sprite_w
2b790 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
2b794 8f4             | 
2b794 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
2b798 8f5             | 
2b798 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
2b79c 8f6 01 58 86 F1 | 	 	sub     t6,#1
2b7a0 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
2b7a4 8f8             | 
2b7a4 8f8 28 58 62 FD |                 setq   	t6
2b7a8 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
2b7ac 8fa 28 5D 02 F6 |                 mov t8,sprite_w
2b7b0 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
2b7b4 8fc 24 00 90 AD |         if_z    jmp #p898
2b7b8 8fd             |          
2b7b8 8fd             |         
2b7b8 8fd 70 5F 06 F6 |                 mov  t9,#368
2b7bc 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
2b7c0 8ff             | 
2b7c0 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
2b7c4 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
2b7c8 901 FF FF 7F FF 
2b7cc 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
2b7d0 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
2b7d4 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
2b7d8 905 2D 01 00 F5 |                 and 0-0, t7
2b7dc 906             |                
2b7dc 906             | 
2b7dc 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
2b7e0 907 E5 E0 7A FA |                 wmlong 368,t3				
2b7e4 908             |                 
2b7e4 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
2b7e8 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
2b7ec 90a 2D 00 64 FD |                 ret
2b7f0 90b             | 	
2b7f0 90b             | 	
2b7f0 90b             |                
2b7f0 90b             |  
2b7f0 90b             | '' -------------- Graphics line ------------------------------------------------------------
2b7f0 90b             |  
2b7f0 90b             | 
2b7f0 90b             | '' consts and vars
2b7f0 90b             | 
2b7f0 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
2b7f4 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
2b7f8 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
2b7fc 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
2b800 90f             | 
2b800 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
2b804 910             | 
2b804 910             | '------ these longs will be set by setmode function
2b804 910             | 
2b804 910 00 00 00 00 | m_bs            long    0        'blanks before sync
2b808 911 00 00 00 00 | m_sn            long    0        'sync
2b80c 912 00 00 00 00 | m_bv            long    0        'blanks before visible
2b810 913 00 00 00 00 | m_vi            long    0        'visible pixels #
2b814 914             | 'm_border        long    0        'left/right borders
2b814 914 00 00 00 00 | i_upporch       long    0        'up porch lines
2b818 915 00 00 00 00 | i_vsync         long    0        'vsync lines
2b81c 916 00 00 00 00 | i_downporch     long    0        'down porch lines
2b820 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
2b824 918 00 00 00 00 | i_totalvis      long    0
2b828 919             | 
2b828 919             | '-------------------------------------
2b828 919             |  
2b828 919 00 00 00 00 | linenum         long    0
2b82c 91a 00 00 00 00 | frames          long    0
2b830 91b 00 00 00 00 | dlinum long 0
2b834 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
2b838 91d             | 
2b838 91d 00 00 00 00 | vblankptr       long    0
2b83c 91e 00 00 00 00 | modeptr         long    0
2b840 91f 00 00 00 00 | paletteptr      long    0
2b844 920 00 00 00 00 | dlptr           long    0
2b848 921 01 00 00 00 | hbase           long    1
2b84c 922 00 00 00 00 | mailbox         long    0
2b850 923 00 00 00 00 | spriteptr          long 0
2b854 924             | 
2b854 924 00 00 00 00 | cmd             long    0
2b858 925 00 B0 07 00 | buf1            long    $80000-16384-4096
2b85c 926 00 04 00 00 | buf2            long    1024
2b860 927 01 00 00 00 | dlptr2          long    1
2b864 928 01 00 00 00 | dl              long    1
2b868 929             | 
2b868 929 00 00 00 00 | buf1c long 0
2b86c 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
2b870 92b 01 00 00 00 | framebuf2       long    1
2b874 92c 01 00 00 00 | hsync0          long    1
2b878 92d 01 00 00 00 | hsync1          long    1
2b87c 92e             | 
2b87c 92e 01 00 00 00 | t1              long    1
2b880 92f 00 00 00 00 | t2 long 0
2b884 930 00 00 00 00 | t3 long 0
2b888 931 00 00 00 00 | t4 long 0
2b88c 932             | 
2b88c 932 00 00 00 00 | rcnt            long    0  'dl repeat count
2b890 933 00 00 00 00 | rcnt2           long    0
2b894 934 00 00 00 00 | rcnt2a          long    0
2b898 935 00 00 00 00 | roffset         long    0
2b89c 936 00 00 00 00 | rdl             long    0  'dl repeat line
2b8a0 937 00 00 00 00 | dlc             long    0  'dl command
2b8a4 938             | 
2b8a4 938 FF FF FF FF | affffffff       long    $ffffffff
2b8a8 939 00 00 00 00 | sprite1pointer long 0
2b8ac 93a 00 00 00 00 | sprite1xy      long 0
2b8b0 93b 00 00 00 00 | sprite1wh      long 0
2b8b4 93c 00 00 00 00 | sprite2pointer long 0
2b8b8 93d 00 00 00 00 | sprite2xy      long 0
2b8bc 93e 00 00 00 00 | sprite2wh      long 0
2b8c0 93f 00 00 00 00 | sprite3pointer long 0
2b8c4 940 00 00 00 00 | sprite3xy      long 0
2b8c8 941 00 00 00 00 | sprite3wh      long 0
2b8cc 942 00 00 00 00 | sprite4pointer long 0
2b8d0 943 00 00 00 00 | sprite4xy      long 0
2b8d4 944 00 00 00 00 | sprite4wh      long 0
2b8d8 945 00 00 00 00 | sprite5pointer long 0
2b8dc 946 00 00 00 00 | sprite5xy      long 0
2b8e0 947 00 00 00 00 | sprite5wh      long 0
2b8e4 948 00 00 00 00 | sprite6pointer long 0
2b8e8 949 00 00 00 00 | sprite6xy      long 0
2b8ec 94a 00 00 00 00 | sprite6wh      long 0
2b8f0 94b 00 00 00 00 | sprite7pointer long 0
2b8f4 94c 00 00 00 00 | sprite7xy      long 0
2b8f8 94d 00 00 00 00 | sprite7wh      long 0
2b8fc 94e 00 00 00 00 | sprite8pointer long 0
2b900 94f 00 00 00 00 | sprite8xy      long 0
2b904 950 00 00 00 00 | sprite8wh      long 0
2b908 951 00 00 00 00 | sprite9pointer long 0
2b90c 952 00 00 00 00 | sprite9xy      long 0
2b910 953 00 00 00 00 | sprite9wh      long 0
2b914 954 00 00 00 00 | sprite10pointer long 0
2b918 955 00 00 00 00 | sprite10xy      long 0
2b91c 956 00 00 00 00 | sprite10wh      long 0
2b920 957 00 00 00 00 | sprite11pointer long 0
2b924 958 00 00 00 00 | sprite11xy      long 0
2b928 959 00 00 00 00 | sprite11wh      long 0
2b92c 95a 00 00 00 00 | sprite12pointer long 0
2b930 95b 00 00 00 00 | sprite12xy      long 0
2b934 95c 00 00 00 00 | sprite12wh      long 0
2b938 95d 00 00 00 00 | sprite13pointer long 0
2b93c 95e 00 00 00 00 | sprite13xy      long 0
2b940 95f 00 00 00 00 | sprite13wh      long 0
2b944 960 00 00 00 00 | sprite14pointer long 0
2b948 961 00 00 00 00 | sprite14xy      long 0
2b94c 962 00 00 00 00 | sprite14wh      long 0
2b950 963 00 00 00 00 | sprite15pointer long 0
2b954 964 00 00 00 00 | sprite15xy      long 0
2b958 965 00 00 00 00 | sprite15wh      long 0
2b95c 966 00 00 00 00 | sprite16pointer long 0
2b960 967 00 00 00 00 | sprite16xy      long 0
2b964 968 00 00 00 00 | sprite16wh      long 0
2b968 969 00 00 00 00 | sprite17pointer long 0
2b96c 96a 00 00 00 00 | sprite17xy      long 0
2b970 96b 00 00 00 00 | sprite17wh      long 0
2b974 96c 00 00 00 00 | sprite18pointer long 0
2b978 96d 00 00 00 00 | sprite18xy      long 0
2b97c 96e 00 00 00 00 | sprite18wh      long 0
2b980 96f 00 00 00 00 | spritenum long 0
2b984 970             | 
2b984 970 00 00 00 00 | spriteline long 0
2b988 971 84 03 00 00 | sprite_x long 900
2b98c 972 00 00 00 00 | sprite_y long 0
2b990 973 10 00 00 00 | sprite_w long 16
2b994 974 40 00 00 00 | sprite_h long 64
2b998 975 00 00 00 00 | l2 long 0
2b99c 976 00 00 00 00 | t5 long 0
2b9a0 977 00 00 00 00 | t6 long 0
2b9a4 978 00 00 00 00 | t7 long 0
2b9a8 979 00 00 00 00 | t8 long 0
2b9ac 97a 00 00 00 00 | t9 long 0
2b9b0 97b 00 00 00 00 | preloadaddr long 0
2b9b4 97c 00 00 00 00 | preloadlineaddr long 0
2b9b8 97d 00 04 00 00 | a1024 long 1024
2b9bc 97e             | 
2b9bc 97e E0 03 00 00 | aa long 992
2b9c0 97f FF 03 00 00 | a1023 long 1023
2b9c4 980 00 10 00 00 | a4096 long 4096
2b9c8 981             |  fit 368
2b9c8 981             | _psram_spin2_dat_
2b9c8 981 00 00 00 00 
      ...             
2bac0 9bf 00 00 00 00 
2bac4 9c0 00 00 00 00 |     listdata long 0[8*8]
2bac8 9c1             |             orgh
2bac8                 | 
2bac8                 | ' driver state
2bac8     FF FF FF FF | drivercog   long    -1  ' COG id of driver
2bacc     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
2bad0                 | 
2bad0                 | ' delay profile
2bad0     07 00 00 00 
2bad4     00 CF 7B 05 
2bad8     80 D1 F0 08 
2badc     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
2bae0     80 C4 60 0F 
2bae4     80 39 7A 12 
2bae8     40 2D D9 13 
2baec     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
2baf0                 | 
2baf0                 | ' data to be passed to driver when starting it
2baf0                 | startupData
2baf0     00 00 00 00 |     long    0           ' current frequency
2baf4     00 00 00 00 |     long    FLAGS       ' optional flags for driver
2baf8     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
2bafc     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
2bb00     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
2bb04     10 BB 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
2bb08     90 BB 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
2bb0c     B0 BB 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
2bb10                 | 
2bb10                 | ' data for memory
2bb10                 | deviceData
2bb10                 |     ' 16 bank parameters follow (16MB per bank)
2bb10     00 00 00 00 
      ...             
2bb48     00 00 00 00 
2bb4c     00 00 00 00 |     long    0[16]                               ' banks 0-15
2bb50                 |     ' 16 banks of pin parameters follow
2bb50     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
2bb54     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
2bb58     FF FF FF FF 
      ...             
2bb88     FF FF FF FF 
2bb8c     FF FF FF FF |     long    -1[14]                              ' banks 2-15
2bb90                 | 
2bb90                 | ' data for COG polling
2bb90                 | qosData 
2bb90     00 00 FF FF 
2bb94     00 00 FF FF 
2bb98     00 00 FF FF 
2bb9c     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
2bba0     00 00 FF FF 
2bba4     00 00 FF FF 
2bba8     00 00 FF FF 
2bbac     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
2bbb0                 |     
2bbb0                 | ' mailbox storage
2bbb0                 | 
2bbb0                 | mailboxes
2bbb0     00 00 00 00 
      ...             
2bc08     00 00 00 00 
2bc0c     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
2bc10                 | 	alignl
2bc10                 | _psram16drv_spin2_dat_
2bc10                 |                             orgh
2bc10     00 00 00 00 
      ...             
2bc28     00 00 00 00 
2bc2c     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
2bc30                 | 
2bc30                 | driver_start
2bc30                 |                             org
2bc30 000             | '..................................................................................................
2bc30 000             | ' Memory layout for COG RAM once operational:
2bc30 000             | '
2bc30 000             | '  COG RAM address      Usage
2bc30 000             | '  ---------------      ----
2bc30 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
2bc30 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
2bc30 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
2bc30 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
2bc30 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
2bc30 000             | '  ~$198-$1F3           State and register variables
2bc30 000             | '
2bc30 000             | ' Also during driver COG startup:
2bc30 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
2bc30 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
2bc30 000             | '..................................................................................................
2bc30 000             |                             
2bc30 000             | ' Mailbox storage after vector initialization
2bc30 000             | 
2bc30 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
2bc34 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
2bc38 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
2bc3c 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
2bc40 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
2bc44 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
2bc48 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
2bc4c 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
2bc50 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
2bc54 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
2bc58 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
2bc5c 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
2bc60 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
2bc64 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
2bc68 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
2bc6c 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
2bc70 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
2bc74 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
2bc78 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
2bc7c 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
2bc80 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
2bc84 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
2bc88 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
2bc8c 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
2bc90 018             | 
2bc90 018             | ' Mailbox parameter addresses per COG once patched
2bc90 018             |                             
2bc90 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
2bc94 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
2bc98 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
2bc9c 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
2bca0 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
2bca4 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
2bca8 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
2bcac 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
2bcb0 020             | 
2bcb0 020             | '..................................................................................................
2bcb0 020             | ' Per COG request and state setup and service branching
2bcb0 020             |         
2bcb0 020             | cog0                 
2bcb0 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
2bcb4 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
2bcb8 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
2bcbc 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
2bcc0 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2bcc4 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2bcc8 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
2bccc 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
2bcd0 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
2bcd4 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2bcd8 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2bcdc 02b 33 CA 63 FD |                             execf   request-0               'jump to service
2bce0 02c             | cog1                        
2bce0 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
2bce4 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
2bce8 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
2bcec 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
2bcf0 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2bcf4 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2bcf8 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
2bcfc 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
2bd00 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
2bd04 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2bd08 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2bd0c 037 33 CA 63 FD |                             execf   request-0               'jump to service
2bd10 038             | cog2                         
2bd10 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
2bd14 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
2bd18 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
2bd1c 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
2bd20 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2bd24 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2bd28 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
2bd2c 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
2bd30 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
2bd34 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2bd38 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2bd3c 043 33 CA 63 FD |                             execf   request-0               'jump to service
2bd40 044             | cog3                        
2bd40 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
2bd44 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
2bd48 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
2bd4c 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
2bd50 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2bd54 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2bd58 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
2bd5c 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
2bd60 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
2bd64 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2bd68 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2bd6c 04f 33 CA 63 FD |                             execf   request-0               'jump to service
2bd70 050             | cog4                        
2bd70 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
2bd74 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
2bd78 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
2bd7c 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
2bd80 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2bd84 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2bd88 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
2bd8c 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
2bd90 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
2bd94 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2bd98 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2bd9c 05b 33 CA 63 FD |                             execf   request-0               'jump to service
2bda0 05c             | cog5                        
2bda0 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
2bda4 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
2bda8 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
2bdac 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
2bdb0 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2bdb4 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2bdb8 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
2bdbc 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
2bdc0 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
2bdc4 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2bdc8 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2bdcc 067 33 CA 63 FD |                             execf   request-0               'jump to service
2bdd0 068             | cog6                        
2bdd0 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
2bdd4 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
2bdd8 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
2bddc 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
2bde0 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2bde4 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2bde8 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
2bdec 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
2bdf0 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
2bdf4 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2bdf8 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2bdfc 073 33 CA 63 FD |                             execf   request-0               'jump to service
2be00 074             | cog7                        
2be00 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
2be04 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
2be08 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
2be0c 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
2be10 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2be14 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2be18 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
2be1c 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
2be20 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
2be24 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2be28 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2be2c 07f 33 CA 63 FD |                             execf   request-0               'jump to service
2be30 080             |                             fit     128
2be30 080             | 
2be30 080             |                             fit     128
2be30 080             | pad                         long    0[128-$]                'align init code to $80
2be30 080             | 
2be30 080             | '..................................................................................................
2be30 080             | 
2be30 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
2be30 080             | 
2be30 080             | init                        
2be30 080             |                             ' get driver scratch long address in hub
2be30 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
2be34 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
2be38 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
2be3c 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
2be40 084             |                     
2be40 084             |                             ' read in the additional LUT RAM code
2be40 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
2be44 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
2be48 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
2be4c 087             | 
2be4c 087             |                             ' read the startup parameters
2be4c 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
2be50 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
2be54 089             | 
2be54 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
2be54 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
2be58 08a             | 
2be58 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
2be5c 08b 01 00 00 5F 
2be60 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
2be64 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
2be68 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
2be6c 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
2be70 090             | 
2be70 090             |                             ' setup data pin modes and data bus pin group in streamer commands
2be70 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
2be74 091 01 00 00 FF 
2be78 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
2be7c 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
2be80 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
2be84 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
2be88 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
2be8c 097 08 DE 47 F5 |                             or      a, #8
2be90 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
2be94 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
2be98 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
2be9c 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
2bea0 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
2bea4 09d 01 DE 07 F1 |                             add     a, #1
2bea8 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
2beac 09f             |  
2beac 09f             |                             ' setup device control pin states
2beac 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
2beb0 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
2beb4 0a1 01 00 00 FF 
2beb8 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
2bebc 0a3             | 
2bebc 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
2bec0 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
2bec4 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
2bec8 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
2becc 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
2bed0 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
2bed4 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
2bed8 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
2bedc 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
2bee0 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
2bee4 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
2bee8 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
2beec 0af             | pinloop
2beec 0af             |                             ' generate minimum CE high time before access
2beec 0af A1 07 00 FF 
2bef0 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
2bef4 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
2bef8 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
2befc 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
2bf00 0b4 1F DE 63 FD |                             waitx   a                       'delay
2bf04 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
2bf08 0b6             | 
2bf08 0b6             |                             ' setup the COG mailboxes and addresses 
2bf08 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
2bf0c 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
2bf10 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
2bf14 0b9             | 
2bf14 0b9 28 2E 64 FD |                             setq    #24-1
2bf18 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
2bf1c 0bb             | 
2bf1c 0bb             |                             ' setup the polling loop for active COGs 
2bf1c 0bb 01 C2 63 FD |                             cogid   id
2bf20 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
2bf24 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
2bf28 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
2bf2c 0bf 0A F0 07 F6 |                             mov     ptra, #10
2bf30 0c0 E1 F1 03 FA |                             mul     ptra, id
2bf34 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
2bf38 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
2bf3c 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
2bf40 0c4 03 C2 07 FA |                             mul     id, #3
2bf44 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
2bf48 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
2bf4c 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
2bf50 0c8 D8 01 B0 FD |                             call    #reloadcogs
2bf54 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
2bf58 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
2bf5c 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
2bf5c 0cb D8 E5 B7 F9 |                             setd    d, #addr1
2bf60 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
2bf64 0cd 08 04 DC FC |                             rep     #2, #8
2bf68 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
2bf6c 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
2bf70 0d0             | 
2bf70 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
2bf70 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
2bf70 0d0 01 C2 63 FD |                             cogid   id
2bf74 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
2bf78 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
2bf7c 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
2bf80 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
2bf84 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
2bf88 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
2bf8c 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
2bf90 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
2bf94 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
2bf98 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2bf9c 0db 3F E4 A7 F9 |                             alti    d, #%111_111
2bfa0 0dc 00 00 00 F6 |                             mov     0-0, 0-0
2bfa4 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
2bfa8 0de A5 E5 03 F1 |                             add     d, const512
2bfac 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2bfb0 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
2bfb4 0e1 00 00 00 F6 |                             mov     0-0, 0-0
2bfb8 0e2             |                             
2bfb8 0e2             |                             ' setup register values for control vector loop setup after we return
2bfb8 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
2bfbc 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
2bfc0 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
2bfc4 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
2bfc8 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
2bfcc 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
2bfd0 0e8 D0 C3 8F F9 |                             altd    id, #id0
2bfd4 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
2bfd8 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
2bfdc 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
2bfe0 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
2bfe4 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
2bfe8 0ee             |  
2bfe8 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
2bfec 0ef 07 CA 07 F5 |                             and     request, #7
2bff0 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
2bff4 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
2bff8 0f2             |                             fit     $100                    'ensure all init code fits this space
2bff8 0f2             | 
2bff8 0f2             |                             fit     $100                    'ensure all init code fits this space
2bff8 0f2             | 
2bff8 0f2 00 00 00 00 
      ...             
2c028 0fe 00 00 00 00 
2c02c 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
2c030 100             | 
2c030 100             | '..................................................................................................
2c030 100             | ' Error result handling and COG notification of request completion
2c030 100             | 
2c030 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
2c034 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
2c038 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
2c03c 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
2c040 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
2c044 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
2c048 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
2c04c 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
2c050 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
2c054 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
2c058 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
2c05c 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
2c060 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
2c064 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
2c068 10e             | ' Poller re-starts here after a COG is serviced
2c068 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
2c06c 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
2c070 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
2c074 111             | ' Main dynamic polling loop repeats until a request arrives
2c074 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
2c078 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
2c07c 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
2c080 114             | 
2c080 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
2c084 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
2c088 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
2c08c 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
2c090 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
2c094 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
2c098 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
2c09c 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
2c0a0 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
2c0a4 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
2c0a8 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
2c0ac 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
2c0b0 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
2c0b4 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
2c0b8 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
2c0bc 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
2c0c0 124             | 
2c0c0 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
2c0c4 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
2c0c8 126             |  
2c0c8 126             | '..................................................................................................
2c0c8 126             | ' List handler                               
2c0c8 126             | 
2c0c8 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
2c0cc 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
2c0d0 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
2c0d4 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
2c0d8 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
2c0dc 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
2c0e0 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
2c0e4 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
2c0e8 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
2c0ec 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
2c0f0 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
2c0f4 131 33 00 60 FD |                             execf   0-0                     'process the request 
2c0f8 132             | 
2c0f8 132             | '..................................................................................................
2c0f8 132             | ' Restoring per COG state and resuming where we left off
2c0f8 132             | 
2c0f8 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
2c0fc 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
2c100 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
2c104 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
2c108 136 D8 CB FB F8 |                             getbyte request, addr1, #3
2c10c 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
2c110 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
2c114 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
2c118 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
2c11c 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
2c120 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
2c124 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
2c128 13e             |                    
2c128 13e             | '..................................................................................................
2c128 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
2c128 13e             | 
2c128 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
2c12c 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
2c130 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
2c134 141 D0 DF B7 F9 |                             setd    a, #id0
2c138 142 D8 DF BF F9 |                             sets    a, #addr1
2c13c 143 FE FF FF FF 
2c140 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
2c144 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
2c148 146 3F DE A7 F9 |                             alti    a, #%111_111 
2c14c 147 00 00 F0 F9 |                             muxq    0-0, 0-0
2c150 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
2c154 149 01 E2 63 FD |                             cogid   c
2c158 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
2c15c 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
2c160 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
2c164 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
2c168 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
2c16c 14f 00 E0 03 F6 |                             mov     b, 0-0
2c170 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
2c174 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
2c178 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
2c17c 153 0C 00 90 AD |             if_z            jmp     #excluded               
2c180 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
2c184 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
2c188 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
2c18c 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
2c190 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
2c194 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
2c198 15a             | 
2c198 15a             | 'determine priority cogs and build instructions for the polling sequence
2c198 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
2c19c 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
2c1a0 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
2c1a4 15d             | 
2c1a4 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
2c1a8 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
2c1ac 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
2c1b0 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
2c1b4 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
2c1b8 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
2c1bc 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
2c1c0 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
2c1c4 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
2c1c8 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
2c1cc 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
2c1d0 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
2c1d4 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
2c1d8 16a             | endprioloop
2c1d8 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
2c1dc 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
2c1e0 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
2c1e4 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
2c1e8 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
2c1ec 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
2c1f0 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
2c1f4 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
2c1f8 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
2c1fc 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
2c200 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
2c204 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
2c208 176             | 
2c208 176             | ' populate the round robin COG polling instructions
2c208 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
2c20c 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
2c210 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
2c214 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
2c218 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
2c21c 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
2c220 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
2c224 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
2c228 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
2c22c 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
2c230 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
2c234 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
2c238 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
2c23c 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
2c240 184             | '..................................................................................................
2c240 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
2c240 184             | 
2c240 184             | set_latency                                                 '            (a) set latency
2c240 184             | get_latency                                                 '            (b) get latency
2c240 184             | set_burst                                                   '            (c) set burst size of bank
2c240 184             | get_burst                                                   '            (d) get burst size of bank
2c240 184             |                                                             '            (e) dump state
2c240 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
2c244 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
2c248 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
2c24c 187             |                                                             ' | | | | e  account for following AUGS
2c24c 187 04 00 00 FF 
2c250 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
2c254 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
2c258 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
2c25c 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
2c260 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
2c264 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
2c268 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
2c26c 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
2c270 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
2c274 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
2c278 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
2c27c 193             | 
2c27c 193             | '..................................................................................................
2c27c 193             | ' Misc EXECF code
2c27c 193             | 
2c27c 193 33 72 63 FD | start_read_exec             execf   newburstr
2c280 194 33 7C 63 FD | start_write_exec            execf   resumewrites
2c284 195 33 78 63 FD | continue_read_exec          execf   lockedreads
2c288 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
2c28c 197             | 
2c28c 197             | '..................................................................................................
2c28c 197             | ' Variables
2c28c 197             | 
2c28c 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
2c290 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
2c294 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
2c298 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
2c29c 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
2c2a0 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
2c2a4 19d             | 
2c2a4 19d 00 00 00 80 | xfreq1          long    $80000000
2c2a8 19e 00 00 00 40 | xfreq2          long    $40000000
2c2ac 19f 03 00 00 00 | delay           long    3
2c2b0 1a0             | 
2c2b0 1a0             | lutcodeaddr                 
2c2b0 1a0             | startupparams
2c2b0 1a0             | excludedcogs                                    'careful: shared register use!
2c2b0 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
2c2b4 1a1 00 00 00 00 | flags           long    0
2c2b8 1a2             | mask                                            'careful: shared register use!
2c2b8 1a2 00 00 00 00 | resetmaskA      long    0
2c2bc 1a3             | limit                                           'careful: shared register use!
2c2bc 1a3 00 00 00 00 | resetmaskB      long    0
2c2c0 1a4 00 00 00 00 | datapins        long    0
2c2c4 1a5             | const512                                        'careful: shared register use!
2c2c4 1a5 00 00 00 00 | devicelist      long    0
2c2c8 1a6 00 00 00 00 | coglist         long    0
2c2cc 1a7 00 00 00 00 | mbox            long    0 
2c2d0 1a8             | 
2c2d0 1a8             | clkpin                                          'shared with code patched during init
2c2d0 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
2c2d4 1a9             | cspin                                           'shared with code patched during init
2c2d4 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
2c2d8 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
2c2dc 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
2c2e0 1ac 01 00 00 00 | clkdelay        long    1
2c2e4 1ad 00 00 00 00 | regdatabus      long    0
2c2e8 1ae             | 
2c2e8 1ae 10 00 00 00 | deviceaddr      long    $10
2c2ec 1af             | rrcounter
2c2ec 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
2c2f0 1b0             | 
2c2f0 1b0             | ' jump addresses for the per COG handlers
2c2f0 1b0 20 00 00 00 | cog0_handler    long    cog0
2c2f4 1b1 2C 00 00 00 | cog1_handler    long    cog1
2c2f8 1b2 38 00 00 00 | cog2_handler    long    cog2
2c2fc 1b3 44 00 00 00 | cog3_handler    long    cog3
2c300 1b4 50 00 00 00 | cog4_handler    long    cog4
2c304 1b5 5C 00 00 00 | cog5_handler    long    cog5
2c308 1b6 68 00 00 00 | cog6_handler    long    cog6
2c30c 1b7 74 00 00 00 | cog7_handler    long    cog7
2c310 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
2c314 1b9             | 
2c314 1b9             | ' EXECF sequences
2c314 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
2c318 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
2c31c 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
2c320 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
2c324 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
2c328 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
2c32c 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
2c330 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
2c330 1c0             | 
2c330 1c0             | 
2c330 1c0             | ' SKIPF sequences
2c330 1c0             | skiptable
2c330 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
2c334 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
2c338 1c2 00 00 00 00 |                 long    0                      ' read modify write long
2c33c 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
2c340 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
2c344 1c5 00 00 00 00 | pattern2        long    0
2c348 1c6 00 00 00 00 | pattern3        long    0
2c34c 1c7 77 02 00 00 | singlelong      long    %1001110111  
2c350 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
2c354 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
2c358 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
2c35c 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
2c360 1cc             | 
2c360 1cc             | ' LUT RAM address values
2c360 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
2c364 1cd DD 02 00 00 | continue_read   long    continue_read_lut
2c368 1ce DB 02 00 00 | continue_write  long    continue_write_lut
2c36c 1cf F6 02 00 00 | noread          long    noread_lut
2c370 1d0             | 
2c370 1d0 00 00 00 00 | id0             long    0
2c374 1d1 01 00 00 00 | id1             long    1
2c378 1d2 02 00 00 00 | id2             long    2
2c37c 1d3 03 00 00 00 | id3             long    3
2c380 1d4 04 00 00 00 | id4             long    4
2c384 1d5 05 00 00 00 | id5             long    5
2c388 1d6 06 00 00 00 | id6             long    6
2c38c 1d7 07 00 00 00 | id7             long    7
2c390 1d8             | 
2c390 1d8             | 'These next 10 request registers below are also temporarily reused during init 
2c390 1d8             | 'and COG updates and need to follow immediately after id0-id7
2c390 1d8 00 00 00 00 | addr1           long    0
2c394 1d9 00 00 00 00 | hubdata         long    0
2c398 1da 00 00 00 00 | count           long    0
2c39c 1db 00 00 00 00 | addr2           long    0
2c3a0 1dc 00 00 00 00 | total           long    0
2c3a4 1dd 00 00 00 00 | offset1         long    0
2c3a8 1de 00 00 00 00 | offset2         long    0
2c3ac 1df 00 00 00 00 | link            long    0
2c3b0 1e0             | 
2c3b0 1e0             | burstwrite                                      'note shared register use during init
2c3b0 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
2c3b4 1e1 00 00 00 00 | id              long    0
2c3b8 1e2             | 
2c3b8 1e2 00 00 00 00 | header          long    0
2c3bc 1e3 00 00 00 00 | trailer         long    0
2c3c0 1e4 00 00 00 00 | cmdaddr         long    0
2c3c4 1e5 00 00 00 00 | request         long    0
2c3c8 1e6 00 00 00 00 | rrlimit         long    0
2c3cc 1e7 00 00 00 00 | pinconfig       long    0
2c3d0 1e8 00 00 00 00 | clks            long    0
2c3d4 1e9 00 00 00 00 | resume          long    0
2c3d8 1ea 00 00 00 00 | orighubsize     long    0
2c3dc 1eb 00 00 00 00 | wrclks          long    0
2c3e0 1ec             | 
2c3e0 1ec 00 00 00 00 | pattern         long    0
2c3e4 1ed 00 00 00 00 | hubscratch      long    0
2c3e8 1ee 00 10 00 00 | val4k           long    4096
2c3ec 1ef             | 
2c3ec 1ef             | ' temporary general purpose regs
2c3ec 1ef 00 00 00 00 | a               long    0
2c3f0 1f0 00 00 00 00 | b               long    0
2c3f4 1f1 00 00 00 00 | c               long    0
2c3f8 1f2 00 00 00 00 | d               long    0
2c3fc 1f3             |                 fit     502
2c3fc 1f3             | 
2c3fc 1f3             |                 fit     502
2c3fc 1f3             | 
2c3fc 1f3             | '..................................................................................................
2c3fc 1f3             | 
2c3fc 1f3             |             orgh
2c3fc                 | 
2c3fc                 | lut_code
2c3fc                 | 'HW init code up to 80 longs
2c3fc                 | 
2c3fc                 | '..................................................................................................
2c3fc                 | ' Memory layout for LUT RAM once operational:
2c3fc                 | '
2c3fc                 | '  LUT RAM address      Usage
2c3fc                 | '  ---------------      ----
2c3fc                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
2c3fc                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
2c3fc                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
2c3fc                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
2c3fc                 | '
2c3fc                 | ' Also during driver COG startup:
2c3fc                 | ' $230-$24F is used for HW init setup
2c3fc                 | ' $250-$26F is used as temporary vector storage 
2c3fc                 | '..................................................................................................
2c3fc                 | 
2c3fc                 |                 org $230    
2c3fc 230             | 
2c3fc 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
2c3fc 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
2c400 231 24 16 60 FD |                             pollxfi
2c404 232 FF AA 2A FF 
2c408 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
2c40c 234 28 00 B0 FD |                             call    #sendqspi
2c410 235 07 F8 07 FF 
2c414 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
2c418 237 28 00 B0 FD |                             call    #sendspi
2c41c 238 F8 07 78 FF 
2c420 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
2c424 23a 1C 00 B0 FD |                             call    #sendspi
2c428 23b 7F 78 78 FF 
2c42c 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
2c430 23d 10 00 B0 FD |                             call    #sendspi 
2c434 23e 2D 00 64 FD |                             ret
2c438 23f             | 
2c438 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
2c43c 240 32 0C 64 FD |                             skipf   #%110
2c440 241 9C EF 03 F6 |                             mov     pb, xsendimm
2c444 242             | 
2c444 242 10 D0 07 F6 | sendspi                     mov     clks, #16
2c448 243 97 EF 03 F6 |                             mov     pb, ximm8lut
2c44c 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
2c450 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2c454 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
2c458 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
2c45c 248 24 36 60 FD |                             waitxfi                         'wait for the completion
2c460 249 50 48 63 FD |                             fltl    datapins                'float data bus
2c464 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
2c468 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
2c46c 24c             | 
2c46c 24c 00 00 00 00 
2c470 24d 00 00 00 00 
2c474 24e 00 00 00 00 
2c478 24f 00 00 00 00 |                 long    0[$270-32-$]
2c47c 250             |                 fit     $270-32  ' keep room for 32 vector longs
2c47c 250             |     
2c47c 250             |                 fit     $270-32  ' keep room for 32 vector longs
2c47c 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
2c47c 250             | rw_vect ' PSRAM jump vectors
2c47c 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2c480 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2c484 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2c488 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2c48c 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
2c490 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
2c494 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
2c498 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
2c49c 258             | ro_vect ' R/O PSRAM jump vectors
2c49c 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2c4a0 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2c4a4 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2c4a8 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2c4ac 25c 00 01 00 00 |                 long    unsupported
2c4b0 25d 00 01 00 00 |                 long    unsupported
2c4b4 25e 00 01 00 00 |                 long    unsupported
2c4b8 25f 00 01 00 00 |                 long    unsupported
2c4bc 260             | ctrl_vect ' Control jump vectors
2c4bc 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
2c4c0 261 00 01 00 00 |                 long    unsupported
2c4c4 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
2c4c8 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
2c4cc 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
2c4d0 265 00 01 00 00 |                 long    unsupported
2c4d4 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
2c4d8 267 3E 01 00 00 |                 long    reconfig 
2c4dc 268             | no_vect ' Invalid bank jump vectors
2c4dc 268 01 01 00 00 |                 long    invalidbank
2c4e0 269 01 01 00 00 |                 long    invalidbank
2c4e4 26a 01 01 00 00 |                 long    invalidbank
2c4e8 26b 01 01 00 00 |                 long    invalidbank
2c4ec 26c 01 01 00 00 |                 long    invalidbank
2c4f0 26d 01 01 00 00 |                 long    invalidbank
2c4f4 26e 01 01 00 00 |                 long    invalidbank
2c4f8 26f 01 01 00 00 |                 long    invalidbank
2c4fc 270             |                 fit     $270
2c4fc 270             | 
2c4fc 270             |                 fit     $270
2c4fc 270             | '..................................................................................................
2c4fc 270             | ' PSRAM READS
2c4fc 270             |                                                             ' a b c d e f
2c4fc 270             |                                                             ' B W L B R L  (a) byte read
2c4fc 270             |                                                             ' Y O O U E O  (b) word read
2c4fc 270             |                                                             ' T R N R S C  (c) long read
2c4fc 270             |                                                             ' E D G S U K  (d) new burst read
2c4fc 270             |                                                             '       T M E  (e) resumed sub-burst
2c4fc 270             |                                                             '         E D  (f) locked sub-burst
2c4fc 270             | 
2c4fc 270             | 
2c4fc 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
2c500 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
2c504 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
2c508 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
2c50c 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
2c510 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
2c514 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
2c518 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
2c51c 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
2c520 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
2c524 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
2c528 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
2c52c 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
2c530 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
2c534 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
2c538 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
2c53c 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
2c540 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
2c544 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
2c548 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
2c54c 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
2c550 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
2c554 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
2c558 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
2c55c 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
2c560 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
2c564 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
2c568 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
2c56c 28c             | 
2c56c 28c             |                             ' fall through to read bursts
2c56c 28c             |                         
2c56c 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
2c56c 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
2c570 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2c574 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2c578 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2c57c 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
2c580 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
2c584 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
2c588 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
2c58c 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
2c590 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
2c594 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
2c598 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
2c59c 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
2c5a0 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
2c5a4 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
2c5a8 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
2c5ac 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
2c5b0 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
2c5b4 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
2c5b8 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
2c5bc 2a0 E8 D1 03 F1 |                             add     clks, clks
2c5c0 2a1             | readcommon
2c5c0 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
2c5c4 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2c5c8 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
2c5cc 2a4             | 
2c5cc 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2c5d0 2a5 69 C8 63 FD |                             rev     cmdaddr
2c5d4 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2c5d8 2a7 61 C8 63 FD |                             mergeb  cmdaddr
2c5dc 2a8             | 
2c5dc 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
2c5e0 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
2c5e4 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
2c5e4 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
2c5e8 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
2c5ec 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
2c5f0 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
2c5f4 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
2c5f4 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
2c5f8 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
2c5fc 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
2c600 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
2c604 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
2c608 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
2c60c 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
2c60c 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
2c610 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
2c614 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
2c618 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
2c61c 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
2c620 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
2c624 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
2c628 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
2c62c 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
2c630 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
2c634 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
2c638 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
2c63c 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
2c640 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
2c644 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
2c644 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
2c648 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
2c64c 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
2c650 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
2c654 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
2c658 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
2c65c 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
2c660 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
2c664 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
2c668 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
2c66c 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
2c670 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
2c674 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
2c678 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
2c67c 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
2c680 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
2c684 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
2c688 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
2c68c 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
2c690 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
2c694 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
2c698 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
2c69c 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
2c6a0 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
2c6a4 2da 10 03 90 FD |                             jmp     #writecommon
2c6a8 2db             | 
2c6a8 2db             | '..................................................................................................
2c6a8 2db             | ' Burst continuation testing
2c6a8 2db             | 
2c6a8 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
2c6ac 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
2c6b0 2dd             | continue_read_lut          
2c6b0 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
2c6b4 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
2c6b8 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
2c6bc 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
2c6c0 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
2c6c4 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
2c6c8 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
2c6cc 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
2c6d0 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
2c6d4 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
2c6d8 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
2c6dc 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
2c6e0 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
2c6e4 2ea             | 
2c6e4 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
2c6e8 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
2c6ec 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
2c6f0 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
2c6f4 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
2c6f8 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
2c6fc 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
2c700 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
2c704 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
2c708 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
2c70c 2f4 2A 1C 66 0D |             _ret_           push    #poller
2c710 2f5             | 
2c710 2f5             | 
2c710 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
2c714 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
2c714 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
2c718 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
2c71c 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
2c720 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
2c724 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
2c728 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
2c72c 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
2c730 2fd 2D 00 64 FD |                             ret                             ' | continue processing
2c734 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
2c738 2ff             | '..................................................................................................
2c738 2ff             | ' Completion of requests
2c738 2ff             | 
2c738 2ff             | complete_rw_lut             
2c738 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
2c73c 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
2c740 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
2c744 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
2c748 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
2c74c 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
2c750 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
2c754 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
2c758 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
2c75c 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
2c760 309 32 62 64 AD |             if_z            skipf   #%110001
2c764 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
2c768 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
2c76c 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
2c770 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
2c774 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
2c778 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
2c77c 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
2c780 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
2c784 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
2c788 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
2c78c 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
2c790 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
2c794 316             |                                                             ' skipcase (a) gfx copy to/from hub
2c794 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
2c794 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
2c794 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
2c798 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
2c79c 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
2c7a0 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
2c7a4 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
2c7a8 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
2c7ac 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
2c7b0 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
2c7b4 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
2c7b8 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
2c7bc 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
2c7c0 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
2c7c4 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
2c7c8 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
2c7cc 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
2c7d0 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
2c7d4 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
2c7d8 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
2c7dc 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
2c7e0 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
2c7e4 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
2c7e8 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
2c7ec 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
2c7f0 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
2c7f4 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
2c7f8 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
2c7fc 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
2c800 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
2c804 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
2c808 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
2c80c 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
2c810 335 DF B7 03 A6 |             if_z            mov     addr2, link
2c814 336 34 FF 9F AD |             if_z            jmp     #checknext
2c818 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
2c81c 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2c820 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
2c824 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
2c828 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
2c82c 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
2c830 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
2c834 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
2c838 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
2c83c 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
2c840 341             | 
2c840 341             | '..................................................................................................
2c840 341             | ' PSRAM WRITES
2c840 341             |                                                             '  a b c d e f g h
2c840 341             | 
2c840 341             |                                                             '  B W L F B R L L (a) byte write(s)
2c840 341             |                                                             '  Y O O I U E O O (b) word write(s)
2c840 341             |                                                             '  T R N L R S C C (c) long write(s)
2c840 341             |                                                             '  E D G L S U K K (d) resumed fill
2c840 341             |                                                             '          T M E E (e) new burst write
2c840 341             |                                                             '            E D D (f) resumed burst
2c840 341             |                                                             '              F B (g) locked fill
2c840 341             |                                                             '              I U (h) locked burst write
2c840 341             |                                                             '              L R 
2c840 341             |                                                             '              L S 
2c840 341             |                                                             '                T 
2c840 341             | 
2c840 341             | w_single                   
2c840 341             | w_fill_cont           
2c840 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
2c844 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
2c848 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
2c84c 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
2c850 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
2c854 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
2c858 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
2c85c 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
2c860 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
2c864 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
2c868 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
2c86c 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
2c870 34d             |                ' disable call to r_resume_burst for single longs when z=0
2c870 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
2c874 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
2c878 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
2c87c 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
2c880 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
2c884 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
2c888 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
2c88c 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
2c890 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
2c894 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
2c898 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
2c89c 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
2c8a0 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
2c8a4 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
2c8a8 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
2c8ac 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
2c8b0 35d             |         
2c8b0 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
2c8b0 35d             |             '
2c8b0 35d             |             '  At least one of these 3 optional components will be sent
2c8b0 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
2c8b0 35d             |             '     body - N x full longs of data
2c8b0 35d             |             '     trailer - last partial long of data
2c8b0 35d             |             '
2c8b0 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
2c8b0 35d             |             '
2c8b0 35d             |             'Case    Type                           Sends
2c8b0 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
2c8b0 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
2c8b0 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
2c8b0 35d             |             ' 4)     Multiple long fill             body only
2c8b0 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
2c8b0 35d             | 
2c8b0 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
2c8b0 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
2c8b4 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2c8b8 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2c8bc 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2c8c0 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
2c8c4 362 13 8C 07 F6 |                             mov     pattern3, #%10011
2c8c8 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
2c8cc 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
2c8d0 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
2c8d4 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
2c8d8 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
2c8dc 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
2c8e0 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
2c8e4 36a             |                             
2c8e4 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2c8e8 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
2c8ec 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
2c8f0 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
2c8f4 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
2c8f8 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
2c8fc 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
2c900 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
2c904 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
2c908 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
2c90c 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
2c910 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
2c914 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
2c918 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
2c91c 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
2c920 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
2c924 37a             | 
2c924 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2c928 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
2c92c 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
2c930 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
2c934 37e             |                  
2c934 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
2c938 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
2c93c 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
2c940 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
2c944 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
2c948 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
2c94c 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
2c950 385             | 
2c950 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
2c954 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
2c958 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
2c95c 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
2c960 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
2c964 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
2c968 38b             | 
2c968 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
2c968 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
2c96c 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
2c970 38d 2A B0 63 FD |                             push    addr1                   'save address
2c974 38e             | 
2c974 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
2c974 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
2c978 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
2c97c 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
2c980 391             |             
2c980 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
2c984 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
2c988 393 2B B0 63 FD |                             pop     addr1                   'restore address
2c98c 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
2c990 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
2c994 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
2c998 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
2c99c 398             | 
2c99c 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
2c9a0 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
2c9a4 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
2c9a8 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
2c9ac 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
2c9b0 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
2c9b4 39e             | 
2c9b4 39e             |                             'trailer is done
2c9b4 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
2c9b8 39f             | 
2c9b8 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
2c9bc 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2c9c0 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
2c9c4 3a2             | 
2c9c4 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2c9c8 3a3 69 C8 63 FD |                             rev     cmdaddr                 
2c9cc 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2c9d0 3a5 61 C8 63 FD |                             mergeb  cmdaddr
2c9d4 3a6             |                             
2c9d4 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
2c9d8 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2c9dc 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
2c9e0 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
2c9e4 3aa             |                                                          
2c9e4 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
2c9e8 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
2c9ec 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
2c9f0 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
2c9f4 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
2c9f8 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
2c9fc 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
2ca00 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
2ca04 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
2ca08 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
2ca0c 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
2ca10 3b5             |  
2ca10 3b5 59 52 63 FD |                             drvh    cspin
2ca14 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
2ca18 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
2ca1c 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
2ca20 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
2ca24 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
2ca28 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
2ca2c 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
2ca30 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
2ca34 3be EA E5 03 F6 |                             mov     d, orighubsize
2ca38 3bf EF E5 63 F0 |                             shl     d, a
2ca3c 3c0 F2 E3 83 F1 |                             sub     c, d
2ca40 3c1 DD E3 03 F1 |                             add     c, offset1
2ca44 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
2ca48 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
2ca4c 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
2ca50 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
2ca54 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
2ca58 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
2ca5c 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
2ca60 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2ca64 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
2ca68 3cb BB D3 03 F6 |                             mov     resume, restorefill
2ca6c 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
2ca70 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
2ca74 3ce 6C FC BF CD |             if_c            call    #yield
2ca78 3cf 2D 00 64 FD |                             ret
2ca7c 3d0             |                            
2ca7c 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
2ca7c 3d0             |                       '     rczl    pa                      'rotate left into address offset
2ca7c 3d0             |                       '     rczl    c wcz                   'restore count and flags
2ca7c 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
2ca80 3d1 02 EC 67 F0 |                             shl     pa, #2
2ca84 3d2 28 06 64 AD |             if_z            setq    #3
2ca88 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
2ca8c 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
2ca90 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
2ca94 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
2ca98 3d7             | 
2ca98 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
2ca9c 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
2caa0 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
2caa4 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
2caa8 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
2caac 3dc             |                 fit 1024-32
2caac 3dc             |         
2caac 3dc             | 
2caac 3dc             | '..................................................................................................
2caac 3dc             | 
2caac 3dc             |                 fit 1024-32
2caac 3dc 00 00 00 00 
2cab0 3dd 00 00 00 00 
2cab4 3de 00 00 00 00 
2cab8 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
2cabc 3e0             |                 org 1024-32
2cabc 000             | 
2cabc 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
2cabc 000 00 00 00 00 |                 long $0000
2cac0 001 11 11 00 00 |                 long $1111
2cac4 002 22 22 00 00 |                 long $2222
2cac8 003 33 33 00 00 |                 long $3333
2cacc 004 44 44 00 00 |                 long $4444
2cad0 005 55 55 00 00 |                 long $5555
2cad4 006 66 66 00 00 |                 long $6666
2cad8 007 77 77 00 00 |                 long $7777
2cadc 008 88 88 00 00 |                 long $8888
2cae0 009 99 99 00 00 |                 long $9999
2cae4 00a AA AA 00 00 |                 long $aaaa
2cae8 00b BB BB 00 00 |                 long $bbbb
2caec 00c CC CC 00 00 |                 long $cccc
2caf0 00d DD DD 00 00 |                 long $dddd
2caf4 00e EE EE 00 00 |                 long $eeee
2caf8 00f FF FF 00 00 |                 long $ffff
2cafc 010             | 
2cafc 010             | 'masks
2cafc 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
2cb00 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
2cb04 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
2cb08 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
2cb0c 014             | 
2cb0c 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
2cb10 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
2cb14 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
2cb18 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
2cb1c 018             | 
2cb1c 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
2cb20 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
2cb24 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
2cb28 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
2cb2c 01c             | 
2cb2c 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
2cb30 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
2cb34 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
2cb38 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
2cb3c 020             |         fit 1024
2cb3c 020             | 
2cb3c 020             |         fit 1024
2cb3c 020             | 
2cb3c 020             | '--------------------------------------------------------------------------------------------------
2cb3c 020             |         orgh
2cb3c                 | 
2cb3c                 | gfxexpansion
2cb3c                 |                             'simple line drawing graphics expansion of memory driver
2cb3c                 |                             'jmp     #donerepeats                'just return for now
2cb3c                 | 
2cb3c     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
2cb40     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
2cb44     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
2cb48     DD E1 03 F6 |                             mov     b, offset1              'get error term
2cb4c     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
2cb50     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
2cb54     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
2cb58     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
2cb5c     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
2cb60     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
2cb64     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
2cb68     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
2cb6c     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
2cb70     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
2cb74     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
2cb78     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
2cb7c     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
2cb80     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
2cb84     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
2cb88     DC E5 33 F9 |                             getword d, total, #0            'get line width
2cb8c     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
2cb90     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
2cb94     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
2cb98     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
2cb9c     C3 03 80 FD |                             jmp     #readmask               'continue filling
2cba0                 | 	alignl
2cba0                 | _usbnew_spin2_dat_
2cba0                 |                 org     $000
2cba0 000             | 
2cba0 000             | usb_host_start
2cba0 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
2cba4 001             | 
2cba4 001 03 00 00 FF 
2cba8 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
2cbac 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
2cbb0 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
2cbb4 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
2cbb8 006 29 70 63 FD |                 setq2   htmp
2cbbc 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
2cbc0 008             | 
2cbc0 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
2cbc4 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
2cbc8 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
2cbcc 00b             | 
2cbcc 00b             | '------------------------------------------------------------------------------
2cbcc 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
2cbcc 00b             | ' special because the receiving function must not respond with either STALL or
2cbcc 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
2cbcc 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
2cbcc 00b             | ' corrupt packet, it must ignore the transaction
2cbcc 00b             | '------------------------------------------------------------------------------
2cbcc 00b             | ' On entry:
2cbcc 00b             | '   PTRA - start address of the SETUP data struct.
2cbcc 00b             | ' On exit:
2cbcc 00b             | '   retval - PID_ACK on success, otherwise error code.
2cbcc 00b             | '------------------------------------------------------------------------------
2cbcc 00b             | txn_setup
2cbcc 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
2cbd0 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
2cbd4 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
2cbd8 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
2cbdc 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
2cbe0 010             | .setup
2cbe0 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
2cbe4 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2cbe8 012 2D 00 64 AD |         if_z    ret
2cbec 013 7C 0B B0 FD |                 call    #retry_wait
2cbf0 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2cbf4 015 2D 00 64 AD |         if_z    ret
2cbf8 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
2cbfc 017 E0 FF 9F FD |                 jmp     #.setup
2cc00 018             | 
2cc00 018             | '------------------------------------------------------------------------------
2cc00 018             | ' IN/INTERRUPT transaction.
2cc00 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
2cc00 018             | '------------------------------------------------------------------------------
2cc00 018             | ' On entry:
2cc00 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
2cc00 018             | '     CRC(b19..23).
2cc00 018             | ' On exit:
2cc00 018             | '------------------------------------------------------------------------------
2cc00 018             | txn_in
2cc00 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2cc04 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
2cc08 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
2cc0c 01b             | 
2cc0c 01b             |                 ' Fall through to urx_packet
2cc0c 01b             | 
2cc0c 01b             | '------------------------------------------------------------------------------
2cc0c 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
2cc0c 01b             | ' received are handshakes and IN DATAx.
2cc0c 01b             | '------------------------------------------------------------------------------
2cc0c 01b             | ' On entry:
2cc0c 01b             | ' On exit:
2cc0c 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
2cc0c 01b             | '     returned.
2cc0c 01b             | '------------------------------------------------------------------------------
2cc0c 01b             | urx_packet
2cc0c 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
2cc10 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2cc14 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
2cc18 01e 1A 92 63 FD |                 getct   hct2
2cc1c 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
2cc20 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
2cc24 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
2cc28 022             | .wait_sop
2cc28 022 22 A7 8A FA |                 rdpin   urx, dm
2cc2c 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2cc30 024 08 00 90 CD |         if_c    jmp     #.get_pid
2cc34 025 FC 25 CC FB |                 jnct2   #.wait_sop
2cc38 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
2cc3c 027             | .get_pid
2cc3c 027 28 02 B0 FD |                 call    #urx_next
2cc40 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
2cc44 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
2cc48 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
2cc4c 02b             | .chk_pid
2cc4c 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2cc50 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
2cc54 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
2cc58 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
2cc5c 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
2cc60 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
2cc64 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
2cc68 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
2cc6c 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
2cc70 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
2cc74 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
2cc78 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
2cc7c 037             | .ack_resend
2cc7c 037 22 A7 82 FA |                 rqpin   urx, dm
2cc80 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2cc84 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
2cc88 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
2cc8c 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
2cc90 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
2cc94 03d             | .chk_eop
2cc94 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2cc98 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
2cc9c 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
2cca0 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
2cca4 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
2cca8 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2ccac 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
2ccb0 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
2ccb4 045 2D 00 64 FD |                 ret
2ccb8 046             | .idle
2ccb8 046 22 A7 82 FA |                 rqpin   urx, dm
2ccbc 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2ccc0 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
2ccc4 049 2D 00 64 FD |                 ret
2ccc8 04a             | 
2ccc8 04a             | '------------------------------------------------------------------------------
2ccc8 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
2ccc8 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
2ccc8 04a             | ' if one is required.
2ccc8 04a             | '------------------------------------------------------------------------------
2ccc8 04a             | ' On entry:
2ccc8 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
2ccc8 04a             | ' On exit:
2ccc8 04a             | '------------------------------------------------------------------------------
2ccc8 04a             | utx_token
2ccc8 04a 22 A7 82 FA |                 rqpin   urx, dm
2cccc 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2ccd0 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
2ccd4 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2ccd8 04e 34 0D B0 CD |         if_c    call    #utx_pre
2ccdc 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2cce0 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
2cce4 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
2cce8 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
2ccec 053             | .next_byte
2ccec 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
2ccf0 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
2ccf4 055             | .wait
2ccf4 055 40 46 72 FD |                 testp   dp                      wc
2ccf8 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
2ccfc 057 23 03 08 FC |                 akpin   dp
2cd00 058 22 A5 22 FC |                 wypin   utx, dm
2cd04 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
2cd08 05a             | 
2cd08 05a             | '------------------------------------------------------------------------------
2cd08 05a             | ' SETUP/OUT/INTERRUPT transaction.
2cd08 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
2cd08 05a             | '------------------------------------------------------------------------------
2cd08 05a             | ' On entry:
2cd08 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
2cd08 05a             | '     CRC(b19..23).
2cd08 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
2cd08 05a             | '   pkt_data - count of DATAx payload bytes to send.
2cd08 05a             | ' On exit:
2cd08 05a             | '------------------------------------------------------------------------------
2cd08 05a             | txn_out
2cd08 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2cd0c 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
2cd10 05c 00 00 C0 FF 
2cd14 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
2cd18 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
2cd1c 05f             | 
2cd1c 05f             |                 ' Fall through to utx_data
2cd1c 05f             | 
2cd1c 05f             | '------------------------------------------------------------------------------
2cd1c 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
2cd1c 05f             | ' calculated while the data byte is being shifted out. Since data stage
2cd1c 05f             | ' success/fail is not determined until the status stage of the transaction,
2cd1c 05f             | ' this routine is only concerned about the current DATAx packet.
2cd1c 05f             | '------------------------------------------------------------------------------
2cd1c 05f             | ' On entry:
2cd1c 05f             | '   PTRA - hub start address of the data to read.
2cd1c 05f             | '   pkt_cnt - data payload size.
2cd1c 05f             | ' On exit:
2cd1c 05f             | '------------------------------------------------------------------------------
2cd1c 05f             | utx_data
2cd1c 05f 22 A7 82 FA |                 rqpin   urx, dm
2cd20 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2cd24 061 F4 FF 9F CD |         if_c    jmp     #utx_data
2cd28 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
2cd2c 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
2cd30 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2cd34 065 D8 0C B0 CD |         if_c    call    #utx_pre
2cd38 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2cd3c 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
2cd40 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2cd44 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
2cd48 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
2cd4c 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
2cd50 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
2cd54 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
2cd58 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
2cd5c 06f             | .read_byte
2cd5c 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
2cd60 070 F0 00 B0 FD |                 call    #utx_byte
2cd64 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
2cd68 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
2cd6c 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2cd70 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2cd74 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
2cd78 076             | .send_crc
2cd78 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
2cd7c 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
2cd80 078 D0 00 B0 FD |                 call    #utx_byte
2cd84 079 5D A5 EA F8 |                 getbyte utx, crc, #1
2cd88 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
2cd8c 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
2cd90 07c             | 
2cd90 07c             | '------------------------------------------------------------------------------
2cd90 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
2cd90 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
2cd90 07c             | ' expects that the packet includes at least the CRC word.
2cd90 07c             | '
2cd90 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
2cd90 07c             | ' was requested, which makes it difficult to determine where the data stops
2cd90 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
2cd90 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
2cd90 07c             | ' USB-16 expected residual value of 0xB001.
2cd90 07c             | '
2cd90 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
2cd90 07c             | ' so the caller can verify IN success before writing the data to its final
2cd90 07c             | ' destination.
2cd90 07c             | '------------------------------------------------------------------------------
2cd90 07c             | ' On entry:
2cd90 07c             | '   pkt_data - max byte count expected to be in the packet.
2cd90 07c             | '   newb_flg - signals new byte ready when toggled.
2cd90 07c             | ' On exit:
2cd90 07c             | '   pkt_cnt - actual number of bytes read.
2cd90 07c             | '------------------------------------------------------------------------------
2cd90 07c             | urx_data
2cd90 07c F7 75 03 F6 |                 mov     htmp2, pb
2cd94 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
2cd98 07e 00 00 C0 FF 
2cd9c 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
2cda0 080 BA EF 03 F6 |                 mov     pb, htmp2
2cda4 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2cda8 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
2cdac 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
2cdb0 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
2cdb4 085             | .wait_byte
2cdb4 085             | ' In-line rx for max speed
2cdb4 085 22 A7 82 FA |                 rqpin   urx, dm
2cdb8 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2cdbc 087 53 A5 02 F5 |                 and     utx, urx
2cdc0 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2cdc4 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2cdc8 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
2cdcc 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2cdd0 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
2cdd4 08d DC FF 9F FD |                 jmp     #.wait_byte
2cdd8 08e             | .get_byte
2cdd8 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
2cddc 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
2cde0 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
2cde4 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
2cde8 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2cdec 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2cdf0 094             | .end_crc
2cdf0 094 01 B8 06 F1 |                 add     pkt_cnt, #1
2cdf4 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
2cdf8 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
2cdfc 097 2D 00 64 1D |         if_a    ret
2ce00 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
2ce00 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
2ce00 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
2ce00 098             | ' to miss it, so cheat a bit and look for SOP clear here.
2ce00 098 22 A7 82 FA |                 rqpin   urx, dm
2ce04 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
2ce08 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
2ce0c 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
2ce0c 09b             | .chk_crc
2ce0c 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
2ce10 09c 58 00 00 FF 
2ce14 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
2ce18 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
2ce1c 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
2ce20 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
2ce24 0a1 34 09 B0 FD |                 call    #poll_waitx
2ce28 0a2             | 
2ce28 0a2             |                 ' Fall through to utx_handshake
2ce28 0a2             | 
2ce28 0a2             | '------------------------------------------------------------------------------
2ce28 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
2ce28 0a2             | ' the appropriate IP delay has been inserted.
2ce28 0a2             | '------------------------------------------------------------------------------
2ce28 0a2             | ' On entry:
2ce28 0a2             | '   retval - handshake PID to send.
2ce28 0a2             | ' On exit:
2ce28 0a2             | '   retval unchanged.
2ce28 0a2             | '------------------------------------------------------------------------------
2ce28 0a2             | utx_handshake
2ce28 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2ce2c 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
2ce30 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2ce34 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
2ce38 0a6 5F A5 02 F6 |                 mov     utx, retval
2ce3c 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
2ce40 0a8             | .idle
2ce40 0a8 22 A7 82 FA |                 rqpin   urx, dm
2ce44 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2ce48 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
2ce4c 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
2ce50 0ac 08 09 90 FD |                 jmp     #poll_waitx
2ce54 0ad             | 
2ce54 0ad             | '------------------------------------------------------------------------------
2ce54 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
2ce54 0ad             | '------------------------------------------------------------------------------
2ce54 0ad             | ' On entry:
2ce54 0ad             | '   utx - byte to transmit.
2ce54 0ad             | ' On exit:
2ce54 0ad             | '------------------------------------------------------------------------------
2ce54 0ad             | utx_byte
2ce54 0ad 40 46 72 FD |                 testp   dp                      wc
2ce58 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
2ce5c 0af 23 03 08 FC |                 akpin   dp
2ce60 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
2ce64 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
2ce68 0b2             | 
2ce68 0b2             | '------------------------------------------------------------------------------
2ce68 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
2ce68 0b2             | '------------------------------------------------------------------------------
2ce68 0b2             | ' On entry:
2ce68 0b2             | ' On exit:
2ce68 0b2             | '   retval - the byte read.
2ce68 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
2ce68 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
2ce68 0b2             | '     received.
2ce68 0b2             | '------------------------------------------------------------------------------
2ce68 0b2             | urx_next
2ce68 0b2 22 A7 8A FA |                 rdpin   urx, dm
2ce6c 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2ce70 0b4 53 A5 02 F5 |                 and     utx, urx
2ce74 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2ce78 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2ce7c 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
2ce80 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
2ce84 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2ce88 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2ce8c 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
2ce90 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
2ce94 0bd 2D 00 64 FD |                 ret
2ce98 0be             | 
2ce98 0be             | '------------------------------------------------------------------------------
2ce98 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
2ce98 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
2ce98 0be             | ' length, and the PID is not included in the CRC calculation:
2ce98 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
2ce98 0be             | '  CRC5  ENDP ADDRESS PID
2ce98 0be             | ' %00000_1111_1111111_xxxxxxxx
2ce98 0be             | '------------------------------------------------------------------------------
2ce98 0be             | ' On entry:
2ce98 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
2ce98 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
2ce98 0be             | ' On exit:
2ce98 0be             | '   ep_addr_pid - CRC value appended to the packet.
2ce98 0be             | '------------------------------------------------------------------------------
2ce98 0be             | calc_crc5
2ce98 0be FF 03 00 FF 
2ce9c 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
2cea0 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
2cea4 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
2cea8 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
2ceac 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
2ceb0 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
2ceb4 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
2ceb8 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
2cebc 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
2cec0 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
2cec4 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
2cec8 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2cecc 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
2ced0 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2ced4 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
2ced8 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
2cedc 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
2cee0 0d0             | 
2cee0 0d0             | '------------------------------------------------------------------------------
2cee0 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
2cee0 0d0             | '------------------------------------------------------------------------------
2cee0 0d0             | isr1_fsframe
2cee0 0d0 1A 92 62 FD |                 getct   iframe_ct_base
2cee4 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2cee8 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2ceec 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2cef0 0d4             | .wait
2cef0 0d4 40 46 72 FD |                 testp   dp                      wc
2cef4 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
2cef8 0d6 23 03 08 FC |                 akpin   dp
2cefc 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
2cf00 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
2cf04 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
2cf08 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
2cf0c 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
2cf10 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
2cf14 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
2cf18 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
2cf1c 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
2cf20 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
2cf24 0e1 2C FF BF FD |                 call    #utx_byte
2cf28 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
2cf2c 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
2cf30 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
2cf34 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
2cf38 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
2cf3c 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
2cf40 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
2cf44 0e9 5B A5 42 F5 |                 or      utx, icrc
2cf48 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
2cf4c 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
2cf50 0ec 20 00 90 FD |                 jmp     #isr1_wait
2cf54 0ed             | isr1_lsframe
2cf54 0ed 1A 92 62 FD |                 getct   iframe_ct_base
2cf58 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2cf5c 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2cf60 0f0             | .wait
2cf60 0f0 40 46 72 FD |                 testp   dp                      wc
2cf64 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
2cf68 0f2 23 03 08 FC |                 akpin   dp
2cf6c 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
2cf70 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
2cf74 0f5             | isr1_wait
2cf74 0f5 22 A5 82 FA |                 rqpin   utx, dm
2cf78 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
2cf7c 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
2cf80 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
2cf84 0f9 03 00 00 FF 
2cf88 0fa FF B3 06 F5 |                 and     frame, ##$7ff
2cf8c 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
2cf90 0fc F5 FF 3B FB |                 reti1
2cf94 0fd             | 
2cf94 0fd             | '------------------------------------------------------------------------------
2cf94 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
2cf94 0fd             | ' transaction will complete before the next frame is triggered.
2cf94 0fd             | '------------------------------------------------------------------------------
2cf94 0fd             | ' On entry:
2cf94 0fd             | ' On exit:
2cf94 0fd             | '------------------------------------------------------------------------------
2cf94 0fd             | wait_txn_ok
2cf94 0fd 1A 74 63 FD |                 getct   htmp2
2cf98 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
2cf9c 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2cfa0 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
2cfa4 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
2cfa8 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
2cfac 103 2D 00 64 FD |                 ret
2cfb0 104             | 
2cfb0 104             | '------------------------------------------------------------------------------
2cfb0 104             | ' A device connection was detected, or a bus reset was requested by the USB
2cfb0 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
2cfb0 104             | ' and perform a reset sequence prior to device enumeration.
2cfb0 104             | '------------------------------------------------------------------------------
2cfb0 104             | dev_reset
2cfb0 104 22 A7 82 FA |                 rqpin   urx, dm
2cfb4 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
2cfb8 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
2cfbc 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
2cfc0 108             | reset
2cfc0 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
2cfc4 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
2cfc8 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
2cfcc 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2cfd0 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
2cfd4 10d 1A 92 62 FD |                 getct   iframe_ct_base
2cfd8 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2cfdc 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2cfe0 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
2cfe4 111 24 70 07 F1 |                 add     htmp, #36
2cfe8 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
2cfec 113             | .framewait
2cfec 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
2cff0 114 F8 FF 9F CD |         if_b    jmp     #.framewait
2cff4 115 2D 00 64 FD |                 ret
2cff8 116             | 
2cff8 116             | '------------------------------------------------------------------------------
2cff8 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
2cff8 116             | '------------------------------------------------------------------------------
2cff8 116             | ' On entry:
2cff8 116             | '   PTRA - source address.
2cff8 116             | '   PB - destination address.
2cff8 116             | '   hr0 - length of copy, in bytes.
2cff8 116             | ' On exit:
2cff8 116             | '------------------------------------------------------------------------------
2cff8 116             | hmemcpy
2cff8 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
2cffc 117 F7 71 43 FC |                 wrbyte  htmp, pb
2d000 118 01 EE 07 F1 |                 add     pb, #1
2d004 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
2d008 11a             | 
2d008 11a             | '------------------------------------------------------------------------------
2d008 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
2d008 11a             | ' loop until the errant device is disconnected.
2d008 11a             | '------------------------------------------------------------------------------
2d008 11a             | ' On entry:
2d008 11a             | ' On exit:
2d008 11a             | '------------------------------------------------------------------------------
2d008 11a             | host_error
2d008 11a             |           if ERROR_LED >= 0
2d008 11a             |           end
2d008 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
2d00c 11b             | 
2d00c 11b             | '------------------------------------------------------------------------------
2d00c 11b             | ' Get HID descriptor buffer for current port
2d00c 11b             | '------------------------------------------------------------------------------
2d00c 11b             | ' On entry:
2d00c 11b             | ' On exit:
2d00c 11b             | '   PB - HID descriptor buffer pointer
2d00c 11b             | '------------------------------------------------------------------------------
2d00c 11b             | get_hid_descr_buffer
2d00c 11b 2D EF 03 F6 |                 mov     pb, hdev_port
2d010 11c 01 EE E7 F2 |                 cmpsub  pb, #1
2d014 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
2d018 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
2d01c 11f             | 
2d01c 11f             | 
2d01c 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
2d020 120             | 
2d020 120             | ' USB commands and error codes
2d020 120 00 00 00 00 | cmd_data        long    0
2d024 121 00 00 00 00 | usb_err_code    long    ERR_NONE
2d028 122             | 
2d028 122             | ' Parameters block assigned at cog startup
2d028 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
2d02c 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
2d030 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
2d034 125             | if ACTIVITY_LED >= 0
2d034 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
2d034 125             | end
2d034 125             | if ERROR_LED >= 0
2d034 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
2d034 125             | end
2d034 125 00 00 00 00 | hid_descr_p     long    0
2d038 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
2d038 126             | 'hkbd_report_p   long    0
2d038 126 00 00 00 00 | hub_descr_p     long    0
2d03c 127 00 00 00 00 | urx_buff_p      long    0
2d040 128 00 00 00 00 | dev_desc_buff_p long    0
2d044 129 00 00 00 00 | con_desc_buff_p long    0
2d048 12a 00 00 00 00 | cache_start_p   long    0
2d04c 12b 00 00 00 00 | cache_end_p     long    0
2d050 12c             | if EMUPAD_MAX_PLAYER > 0
2d050 12c             | emupad_out_ptr  long    0
2d050 12c             | end
2d050 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
2d054 12d             | 
2d054 12d             | hdev_init_start
2d054 12d             | hdev_port       res     1
2d054 12d             | hdev_port       res     1
2d054 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2d054 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2d054 12d             | kbm_next_datax  res     1
2d054 12d             | kbm_next_datax  res     1
2d054 12d             | hub_intf_num    res     1
2d054 12d             | hub_intf_num    res     1
2d054 12d             | hub_next_datax  res     1
2d054 12d             | hub_next_datax  res     1
2d054 12d             | hub_status_chg  res     1
2d054 12d             | hub_status_chg  res     1
2d054 12d             | hub_port_status res     1
2d054 12d             | hub_port_status res     1
2d054 12d             | if HAVE_MOUSE
2d054 12d             | ms_intf_num     res     1
2d054 12d             | ms_intf_num     res     1
2d054 12d             | ms_in_max_pkt   res     1
2d054 12d             | ms_in_max_pkt   res     1
2d054 12d             | end
2d054 12d             | kb_intf_num     res     1
2d054 12d             | kb_intf_num     res     1
2d054 12d             | kb_interval     res     1
2d054 12d             | kb_interval     res     1
2d054 12d             | kb_in_max_pkt   res     1
2d054 12d             | kb_in_max_pkt   res     1
2d054 12d             | kb_max_index    res     1
2d054 12d             | kb_max_index    res     1
2d054 12d             | kb_led_states   res     1
2d054 12d             | kb_led_states   res     1
2d054 12d             | gp_intf_num     res     1
2d054 12d             | gp_intf_num     res     1
2d054 12d             | gp_interval     res     1
2d054 12d             | gp_interval     res     1
2d054 12d             | gp_max_index    res     1
2d054 12d             | gp_max_index    res     1
2d054 12d             | gp_descr_len    res     1+MAX_DEVICES
2d054 12d             | gp_descr_len    res     1+MAX_DEVICES
2d054 12d             | hdev_init_end
2d054 12d             | 
2d054 12d             | ' Initialized at cog startup:
2d054 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2d054 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2d054 12d             | iframe_ct_new   res     1
2d054 12d             | iframe_ct_new   res     1
2d054 12d             | iframe_ct_base  res     1
2d054 12d             | iframe_ct_base  res     1
2d054 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2d054 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2d054 12d             | 
2d054 12d             | ' This register block is reset to zero when a USB device connects
2d054 12d             | hreg_init_start
2d054 12d             | hstatus         res     1         ' Host status flags
2d054 12d             | hstatus         res     1         ' Host status flags
2d054 12d             | hctwait         res     1         ' Poll-based wait clocks
2d054 12d             | hctwait         res     1         ' Poll-based wait clocks
2d054 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2d054 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2d054 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2d054 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2d054 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2d054 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2d054 12d             | xfer_retry      res     1         ' Control transfer retry count
2d054 12d             | xfer_retry      res     1         ' Control transfer retry count
2d054 12d             | retry           res     1         ' Transaction retry count
2d054 12d             | retry           res     1         ' Transaction retry count
2d054 12d             | utx             res     1         ' Byte to transmit on USB
2d054 12d             | utx             res     1         ' Byte to transmit on USB
2d054 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2d054 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2d054 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2d054 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2d054 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2d054 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2d054 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2d054 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2d054 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2d054 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2d054 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2d054 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2d054 12d             | frame           res     1         ' USB 1ms frame counter value
2d054 12d             | frame           res     1         ' USB 1ms frame counter value
2d054 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2d054 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2d054 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2d054 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2d054 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2d054 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2d054 12d             | crc             res     1         ' Used for CRC16 calculation
2d054 12d             | crc             res     1         ' Used for CRC16 calculation
2d054 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2d054 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2d054 12d             | retval          res     1         ' Global success/fail return parameter
2d054 12d             | retval          res     1         ' Global success/fail return parameter
2d054 12d             | context_retval  res     1         ' Operation contextual return parameter
2d054 12d             | context_retval  res     1         ' Operation contextual return parameter
2d054 12d             | ' Device stuff
2d054 12d             | hdev_id         res     1+MAX_DEVICES
2d054 12d             | hdev_id         res     1+MAX_DEVICES
2d054 12d             | hdev_bcd        res     1
2d054 12d             | hdev_bcd        res     1
2d054 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2d054 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2d054 12d             | ' Keyboard/mouse stuff
2d054 12d             | hctrl_ep_addr   res     1
2d054 12d             | hctrl_ep_addr   res     1
2d054 12d             | hctrl_max_pkt   res     1
2d054 12d             | hctrl_max_pkt   res     1
2d054 12d             | hconfig_base    res     1
2d054 12d             | hconfig_base    res     1
2d054 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2d054 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2d054 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2d054 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2d054 12d             | hdev_class      res     1
2d054 12d             | hdev_class      res     1
2d054 12d             | hdev_subclass   res     1
2d054 12d             | hdev_subclass   res     1
2d054 12d             | hdev_protocol   res     1
2d054 12d             | hdev_protocol   res     1
2d054 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2d054 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2d054 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2d054 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2d054 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2d054 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2d054 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2d054 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2d054 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2d054 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2d054 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2d054 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2d054 12d             | if HAVE_MOUSE
2d054 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2d054 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2d054 12d             | end
2d054 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2d054 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2d054 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2d054 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2d054 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2d054 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2d054 12d             | hdev_out_addr   res     1
2d054 12d             | hdev_out_addr   res     1
2d054 12d             | 
2d054 12d             | if EMUPAD_MAX_PLAYER > 0
2d054 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
2d054 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
2d054 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
2d054 12d             | end
2d054 12d             | 
2d054 12d             | hreg_init_end
2d054 12d             | 
2d054 12d             | hidr_start
2d054 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2d054 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2d054 12d             | hidr_flags      res     1
2d054 12d             | hidr_flags      res     1
2d054 12d             | hidr_axis       res     3
2d054 12d             | hidr_axis       res     3
2d054 12d             | hidr_buttons    res     1
2d054 12d             | hidr_buttons    res     1
2d054 12d             | hidr_hats       res     1
2d054 12d             | hidr_hats       res     1
2d054 12d             | '' Above are actually useful values, 6 longs
2d054 12d             | hidr_id         res     1
2d054 12d             | hidr_id         res     1
2d054 12d             | hidr_state      res     1
2d054 12d             | hidr_state      res     1
2d054 12d             | hidr_size       res     1
2d054 12d             | hidr_size       res     1
2d054 12d             | hidr_count      res     1
2d054 12d             | hidr_count      res     1
2d054 12d             | hidr_offset     res     1
2d054 12d             | hidr_offset     res     1
2d054 12d             | hidr_usage_idx  res     1
2d054 12d             | hidr_usage_idx  res     1
2d054 12d             | hidr_lminmax    res     1
2d054 12d             | hidr_lminmax    res     1
2d054 12d             | hidr_pminmax    res     1
2d054 12d             | hidr_pminmax    res     1
2d054 12d             | hidr_type       res     1
2d054 12d             | hidr_type       res     1
2d054 12d             | hidr_end
2d054 12d             | 
2d054 12d             | ' Variables dependent on the system freqency
2d054 12d             | _var_64_lower_  res     1
2d054 12d             | _var_64_lower_  res     1
2d054 12d             | _var_64_upper_  res     1
2d054 12d             | _var_64_upper_  res     1
2d054 12d             | _12Mbps_        res     1
2d054 12d             | _12Mbps_        res     1
2d054 12d             | _1_5Mbps_       res     1
2d054 12d             | _1_5Mbps_       res     1
2d054 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2d054 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2d054 12d             | _1us_           res     1         ' 1us
2d054 12d             | _1us_           res     1         ' 1us
2d054 12d             | _10us_          res     1         ' 10us
2d054 12d             | _10us_          res     1         ' 10us
2d054 12d             | _33us_          res     1         ' 33us
2d054 12d             | _33us_          res     1         ' 33us
2d054 12d             | _txn_err_       res     1         ' 250us
2d054 12d             | _txn_err_       res     1         ' 250us
2d054 12d             | _500us_         res     1         ' 500us
2d054 12d             | _500us_         res     1         ' 500us
2d054 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2d054 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2d054 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2d054 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2d054 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2d054 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2d054 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2d054 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2d054 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2d054 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2d054 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2d054 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2d054 12d             | _preamble_wait_ res     1
2d054 12d             | _preamble_wait_ res     1
2d054 12d             | _1ms_           res     1         ' 1ms
2d054 12d             | _1ms_           res     1         ' 1ms
2d054 12d             | _2ms_           res     1         ' 2ms
2d054 12d             | _2ms_           res     1         ' 2ms
2d054 12d             | _suspend_wait_  res     1         ' 3ms
2d054 12d             | _suspend_wait_  res     1         ' 3ms
2d054 12d             | _4ms_           res     1         ' 4ms
2d054 12d             | _4ms_           res     1         ' 4ms
2d054 12d             | _xfer_wait_     res     1         ' 5ms
2d054 12d             | _xfer_wait_     res     1         ' 5ms
2d054 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2d054 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2d054 12d             | _reset_hold_    res     1         ' 15ms
2d054 12d             | _reset_hold_    res     1         ' 15ms
2d054 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2d054 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2d054 12d             | _21ms_          res     1         ' 21ms
2d054 12d             | _21ms_          res     1         ' 21ms
2d054 12d             | _100ms_         res     1         ' 100ms
2d054 12d             | _100ms_         res     1         ' 100ms
2d054 12d             | _500ms_         res     1         ' 500ms
2d054 12d             | _500ms_         res     1         ' 500ms
2d054 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2d054 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2d054 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2d054 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2d054 12d             | '------------------------------------------------------------------------------
2d054 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2d054 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2d054 12d             | _usb_d_ls_nco_  res     1
2d054 12d             | _usb_d_ls_nco_  res     1
2d054 12d             | _usb_h_fs_nco_  res     1
2d054 12d             | _usb_h_fs_nco_  res     1
2d054 12d             | _usb_d_fs_nco_  res     1
2d054 12d             | _usb_d_fs_nco_  res     1
2d054 12d             | '------------------------------------------------------------------------------
2d054 12d             | ' Scratch registers
2d054 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2d054 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2d054 12d             | htmp1           res     1
2d054 12d             | htmp1           res     1
2d054 12d             | htmp2           res     1
2d054 12d             | htmp2           res     1
2d054 12d             | htmp3           res     1
2d054 12d             | htmp3           res     1
2d054 12d             | hrep            res     1         ' Repeat count
2d054 12d             | hrep            res     1         ' Repeat count
2d054 12d             | hsave0          res     1         ' Subroutine parameter saves
2d054 12d             | hsave0          res     1         ' Subroutine parameter saves
2d054 12d             | hsave1          res     1
2d054 12d             | hsave1          res     1
2d054 12d             | hsave2          res     1
2d054 12d             | hsave2          res     1
2d054 12d             | isrtmp1         res     1
2d054 12d             | isrtmp1         res     1
2d054 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2d054 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2d054 12d             | hr0             res     1         ' Multi-purpose registers
2d054 12d             | hr0             res     1         ' Multi-purpose registers
2d054 12d             | hr1             res     1
2d054 12d             | hr1             res     1
2d054 12d             | hr2             res     1
2d054 12d             | hr2             res     1
2d054 12d             | hr3             res     1
2d054 12d             | hr3             res     1
2d054 12d             | hpar1           res     1         ' Routine entry/exit parameters
2d054 12d             | hpar1           res     1         ' Routine entry/exit parameters
2d054 12d             | hpar2           res     1
2d054 12d             | hpar2           res     1
2d054 12d             | hpar3           res     1
2d054 12d             | hpar3           res     1
2d054 12d             | hct2            res     1         ' Function response bus turn-around timer
2d054 12d             | hct2            res     1         ' Function response bus turn-around timer
2d054 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2d054 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2d054 12d             | mod_cnt         res     1         ' Used in idle loops
2d054 12d             | mod_cnt         res     1         ' Used in idle loops
2d054 12d             |                 fit     $1F0
2d054 12d             |                 org     $200
2d054 200             | hlut_start
2d054 200             | 
2d054 200             | '------------------------------------------------------------------------------
2d054 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
2d054 200             | ' settings to startup defaults.
2d054 200             | '------------------------------------------------------------------------------
2d054 200             | ' On entry:
2d054 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
2d054 200             | '------------------------------------------------------------------------------
2d054 200             | set_speed_full
2d054 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
2d058 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2d05c 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
2d060 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
2d064 204             | '                ret                             wcz     ' Restore caller flags on exit
2d064 204             | 
2d064 204             | '------------------------------------------------------------------------------
2d064 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
2d064 204             | ' is a downstream hub connected (not yet implemented), the baud generator
2d064 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
2d064 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
2d064 204             | ' putting the smart pins into reset.
2d064 204             | '------------------------------------------------------------------------------
2d064 204             | ' On entry:
2d064 204             | ' On exit: CZ flags restored to caller states
2d064 204             | '------------------------------------------------------------------------------
2d064 204             | set_speed_low
2d064 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
2d068 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
2d06c 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
2d070 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2d074 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2d078 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2d07c 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
2d080 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
2d084 20c             | 
2d084 20c             | '------------------------------------------------------------------------------
2d084 20c             | ' Perform configuration stuff required when a device intitially connects.
2d084 20c             | '------------------------------------------------------------------------------
2d084 20c             | ' On entry:
2d084 20c             | ' On exit:
2d084 20c             | '------------------------------------------------------------------------------
2d084 20c             | on_connect
2d084 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
2d088 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
2d08c 20e             | .retry
2d08c 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2d090 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
2d094 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
2d098 211 00 08 00 FF 
2d09c 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2d0a0 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
2d0a4 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2d0a8 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2d0ac 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2d0b0 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2d0b4 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2d0b8 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
2d0bc 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
2d0c0 21b 4C 03 B0 FD |                 call    #poll_waitx
2d0c4 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
2d0c8 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
2d0cc 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
2d0d0 21f B8 FF 9F FD |                 jmp     #.retry
2d0d4 220             | .get_dev_desc
2d0d4 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2d0d8 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2d0dc 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2d0e0 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
2d0e4 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
2d0e8 225 88 FB BF FD |                 call    #reset
2d0ec 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
2d0f0 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2d0f4 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
2d0f8 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
2d0fc 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2d100 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2d104 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
2d108 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2d10c 22e 04 00 00 FF 
2d110 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
2d114 230 34 FA BF FD |                 call    #calc_crc5
2d118 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
2d11c 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2d120 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2d124 234 F7 AD C2 FA |                 rdbyte  total_data, pb
2d128 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2d12c 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2d130 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2d134 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2d138 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2d13c 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2d140 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2d144 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
2d148 23d C4 02 B0 FD |                 call    #poll_waitx
2d14c 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
2d150 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2d154 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2d158 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2d15c 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2d160 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2d164 244 2D 00 64 5D |         if_nz   ret
2d168 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2d16c 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2d170 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2d174 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2d178 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2d17c 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2d180 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2d184 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2d188 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2d18c 24e 2C FB 9F CD |         if_b    jmp     #host_error
2d190 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
2d194 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
2d198 251 2D EC 63 FD |                 call    pa
2d19c 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
2d1a0 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
2d1a4 254 2C EC 63 FD |                 jmp     pa
2d1a8 255             | 
2d1a8 255             | '------------------------------------------------------------------------------
2d1a8 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
2d1a8 255             | ' Status reporting is always in the function-to-host direction.
2d1a8 255             | '------------------------------------------------------------------------------
2d1a8 255             | ' On entry:
2d1a8 255             | '   PTRA - start address of the SETUP data in hub.
2d1a8 255             | '   PB - start address of the buffer/struct to be written to during the IN data
2d1a8 255             | '     stage.
2d1a8 255             | '   ep_addr_pid - device address, endpoint and CRC5.
2d1a8 255             | ' On exit:
2d1a8 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
2d1a8 255             | '     contains the count of data stage bytes actually received, which must
2d1a8 255             | '     always be <= the count requested.
2d1a8 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2d1a8 255             | '     more specific USB operation error code.
2d1a8 255             | '------------------------------------------------------------------------------
2d1a8 255             | control_read
2d1a8 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2d1ac 256 F8 8F 03 F6 |                 mov     hpar2, ptra
2d1b0 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
2d1b4 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2d1b8 259             | .xfer_start
2d1b8 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2d1bc 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2d1c0 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2d1c4 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
2d1c8 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
2d1cc 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2d1d0 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2d1d4 260 61 00 00 FF 
2d1d8 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
2d1dc 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2d1e0 263             | .data
2d1e0 263 56 B1 02 F6 |                 mov     pkt_data, total_data
2d1e4 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
2d1e8 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2d1ec 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
2d1f0 267             | .nak_retry
2d1f0 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
2d1f4 268             | .in_retry
2d1f4 268 BC F6 BF FD |                 call    #txn_in
2d1f8 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
2d1fc 26a 28 00 90 AD |         if_z    jmp     #.commit
2d200 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2d204 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2d208 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2d20c 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2d210 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
2d214 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2d218 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2d21c 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2d220 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
2d224 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
2d228 275             | .commit
2d228 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
2d22c 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
2d230 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
2d234 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
2d238 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
2d23c 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2d240 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
2d244 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
2d248 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
2d24c 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
2d250 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
2d254 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
2d258 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
2d25c 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
2d260 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2d264 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
2d268 285             | .pre_status
2d268 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
2d26c 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
2d270 287 00 B0 06 F6 |                 mov     pkt_data, #0
2d274 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
2d278 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2d27c 28a 61 00 00 FF 
2d280 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
2d284 28c             | .out_retry
2d284 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
2d288 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2d28c 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
2d290 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2d294 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2d298 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2d29c 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2d2a0 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2d2a4 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2d2a8 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
2d2ac 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
2d2b0 297             | ' I've encountered transfer STALL, even though the data looks correct, and
2d2b0 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
2d2b0 297             | ' ControlRead() transfer gets things unstuck most of the time...
2d2b0 297             | .xfer_retry
2d2b0 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
2d2b4 298 58 01 B0 FD |                 call    #poll_waitx
2d2b8 299 8C F9 BF FD |                 call    #wait_txn_ok
2d2bc 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
2d2c0 29b C7 F1 03 F6 |                 mov     ptra, hpar2
2d2c4 29c C8 EF 03 F6 |                 mov     pb, hpar3
2d2c8 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
2d2cc 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
2d2d0 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
2d2d4 2a0             | 
2d2d4 2a0             | '------------------------------------------------------------------------------
2d2d4 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
2d2d4 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
2d2d4 2a0             | ' the SETUP data struct is filled with the required values.
2d2d4 2a0             | '------------------------------------------------------------------------------
2d2d4 2a0             | ' On entry:
2d2d4 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
2d2d4 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
2d2d4 2a0             | '     stage.
2d2d4 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
2d2d4 2a0             | ' On exit:
2d2d4 2a0             | '   retval - used to convey the success/failure of each stage.
2d2d4 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2d2d4 2a0             | '     more specific USB operation error code.
2d2d4 2a0             | '------------------------------------------------------------------------------
2d2d4 2a0             | control_write
2d2d4 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2d2d8 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2d2dc 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2d2e0 2a3             | 
2d2e0 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2d2e4 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
2d2e8 2a5 F7 91 03 F6 |                 mov     hpar3, pb
2d2ec 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2d2f0 2a7             | .xfer_start
2d2f0 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
2d2f4 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2d2f8 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2d2fc 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2d300 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
2d304 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
2d308 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2d30c 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2d310 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
2d314 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2d318 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2d31c 2b2             | .data
2d31c 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
2d320 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
2d324 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2d328 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
2d32c 2b6             | .out_retry
2d32c 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
2d330 2b7 88 F6 BF FD |                 call    #txn_out
2d334 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2d338 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
2d33c 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2d340 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
2d344 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
2d348 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
2d34c 2be             | .commit
2d34c 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
2d350 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
2d354 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
2d358 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2d35c 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
2d360 2c3             | pre_status_in
2d360 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
2d364 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2d368 2c5             | .status_retry
2d368 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
2d36c 2c6 44 F5 BF FD |                 call    #txn_in
2d370 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
2d374 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
2d378 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
2d37c 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
2d380 2cb 2D 00 64 AD |         if_z    ret
2d384 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
2d388 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2d38c 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
2d390 2cf             | '               ret                                     ' Caller must handle transfer retirement
2d390 2cf             | 
2d390 2cf             | '------------------------------------------------------------------------------
2d390 2cf             | ' Execute an IN interrupt transaction.
2d390 2cf             | '------------------------------------------------------------------------------
2d390 2cf             | ' On entry:
2d390 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
2d390 2cf             | '   hpar2 - Address of the IN data buffer
2d390 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
2d390 2cf             | ' On exit:
2d390 2cf             | '   retval - the result of the operation.
2d390 2cf             | '   hpar3 - the count of IN data bytes actually received.
2d390 2cf             | '------------------------------------------------------------------------------
2d390 2cf             | do_int_in
2d390 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2d394 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2d398 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2d39c 2d2             | 
2d39c 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
2d3a0 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
2d3a4 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
2d3a8 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
2d3ac 2d6             | .retry
2d3ac 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
2d3b0 2d7 00 F5 BF FD |                 call    #txn_in
2d3b4 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
2d3b8 2d9 1C 00 90 AD |         if_z    jmp     #.commit
2d3bc 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
2d3c0 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
2d3c4 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
2d3c8 2dd 54 00 B0 FD |                 call    #retry_wait
2d3cc 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2d3d0 2df 18 00 90 AD |         if_z    jmp     #.post_ret
2d3d4 2e0 D4 FF 9F FD |                 jmp     #.retry
2d3d8 2e1             | .commit
2d3d8 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
2d3dc 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
2d3e0 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
2d3e4 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
2d3e8 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2d3ec 2e6             | .post_ret
2d3ec 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
2d3f0 2e7             | 
2d3f0 2e7             | 
2d3f0 2e7             | '------------------------------------------------------------------------------
2d3f0 2e7             | ' Resets the downstream hub port to FS
2d3f0 2e7             | '------------------------------------------------------------------------------
2d3f0 2e7             | dwnstream_reset
2d3f0 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2d3f4 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
2d3f8 2e9             | 
2d3f8 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
2d3fc 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2d400 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2d404 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2d408 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2d40c 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2d410 2ef             | 
2d410 2ef             | '------------------------------------------------------------------------------
2d410 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
2d410 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
2d410 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
2d410 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
2d410 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
2d410 2ef             | '------------------------------------------------------------------------------
2d410 2ef             | ' On entry:
2d410 2ef             | '   hctwait - wait interval in sysclocks.
2d410 2ef             | ' On exit:
2d410 2ef             | '------------------------------------------------------------------------------
2d410 2ef             | poll_waitx
2d410 2ef 1A 92 63 FD |                 getct   hct2
2d414 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
2d418 2f1             | .wait
2d418 2f1 FF 25 CC FB |                 jnct2   #.wait
2d41c 2f2 2D 00 64 FD |                 ret
2d420 2f3             | 
2d420 2f3             | '------------------------------------------------------------------------------
2d420 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
2d420 2f3             | '------------------------------------------------------------------------------
2d420 2f3             | ' On entry:
2d420 2f3             | '   retval - transaction response PID or error code.
2d420 2f3             | ' On exit:
2d420 2f3             | '------------------------------------------------------------------------------
2d420 2f3             | retry_wait
2d420 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2d424 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
2d428 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2d42c 2f6 14 00 90 AD |         if_z    jmp     #.nak
2d430 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
2d434 2f8 D8 FF BF FD |                 call    #poll_waitx
2d438 2f9             | .dec
2d438 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
2d43c 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
2d440 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
2d444 2fc             | .nak
2d444 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
2d448 2fd C4 FF BF FD |                 call    #poll_waitx
2d44c 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
2d450 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
2d454 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
2d458 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
2d45c 302 2D 00 64 FD |                 ret
2d460 303             | 
2d460 303             | host_reset
2d460 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
2d464 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
2d468 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
2d468 305 BD 01 05 FF 
2d46c 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
2d470 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
2d474 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
2d478 309             | ' Check to see if the system clock has been changed.
2d478 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2d47c 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
2d480 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
2d484 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
2d488 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2d48c 30e 40 46 62 FD |                 dirl    dp
2d490 30f             | 
2d490 30f 28 02 64 FD |                 setq    #1
2d494 310 80 00 80 FF 
2d498 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2d49c 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
2d4a0 313             | .enable
2d4a0 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2d4a4 314 41 46 62 FD |                 dirh    dp
2d4a8 315 1F 36 63 FD |                 waitx   _1us_
2d4ac 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2d4b0 317             | 
2d4b0 317             |                 ' Handle Port protection enable and startup delay
2d4b0 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
2d4b4 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
2d4b8 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
2d4bc 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
2d4c0 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
2d4c4 31c             | 
2d4c4 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
2d4c8 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
2d4cc 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
2d4d0 31f 00 00 04 F6 |                 mov     0-0, #0
2d4d4 320             | .regloop
2d4d4 320             | 
2d4d4 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
2d4d4 320             | 
2d4d4 320             | discon_entry
2d4d4 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
2d4d8 321             | 
2d4d8 321             |               
2d4d8 321             |         if HAVE_HIDPAD
2d4d8 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
2d4dc 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
2d4e0 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
2d4e4 324 F7 01 68 FC |                 wrlong  #0,pb
2d4e8 325             |         end
2d4e8 325             |         if EMUPAD_MAX_PLAYER > 0
2d4e8 325             |         end
2d4e8 325             | 
2d4e8 325             |                 ' Fall through to disconnected loop
2d4e8 325             | 
2d4e8 325             | '-----------------------------------------------------------------------------------------------------------------
2d4e8 325             | ' Device connect handling (Section 7.1.7.3).
2d4e8 325             | '-----------------------------------------------------------------------------------------------------------------
2d4e8 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
2d4e8 325             | ' device to connect (Section 7.1.7.3).
2d4e8 325             | '-----------------------------------------------------------------------------------------------------------------
2d4e8 325             | disconnected
2d4e8 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
2d4ec 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
2d4f0 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
2d4f4 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
2d4f8 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
2d4fc 32a             |         if ACTIVITY_LED >= 0
2d4fc 32a             |         end
2d4fc 32a 22 A7 82 FA |                 rqpin   urx, dm
2d500 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
2d504 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
2d508 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
2d50c 32e             | .se1_test
2d50c 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
2d510 32f FC FE BF FD |                 call    #poll_waitx
2d514 330 22 A7 82 FA |                 rqpin   urx, dm
2d518 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2d51c 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
2d520 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
2d524 334             | .se1            'SE1 is a fatal error condition
2d524 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
2d528 335 E4 FE BF FD |                 call    #poll_waitx
2d52c 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
2d530 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
2d534 338             | .connect_test                                           ' Test lines until stable J/K state seen
2d534 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
2d538 339 22 A7 82 FA |                 rqpin   urx, dm
2d53c 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2d540 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
2d544 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
2d548 33d             | connected
2d548 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
2d54c 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
2d550 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
2d554 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
2d558 341             | .set_pulse
2d558 341 1A 64 63 FD |                 getct   _pulse_time_
2d55c 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
2d560 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
2d560 343             | ' of 1ms and make a correction, if necessary.
2d560 343             | '                mov     htmp, _1ms_
2d560 343             | '                subs    htmp, iframe_delta
2d560 343             | '                adds    _frame1ms_clks_, htmp
2d560 343             | '                debug(udec(_frame1ms_clks_))
2d560 343             | 
2d560 343             |                 ' Fall through to idle/processing loop
2d560 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
2d564 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
2d568 345             | 
2d568 345             | hidle
2d568 345 22 A7 82 FA |                 rqpin   urx, dm
2d56c 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2d570 347 98 00 90 CD |         if_c    jmp     #.se0_test
2d574 348 24 06 70 FD |                 pollct3                         wc
2d578 349 68 00 90 3D |         if_nc   jmp     #.nopoll
2d57c 34a 1A 94 63 FD |                 getct   hct3
2d580 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
2d584 34c             | 
2d584 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2d588 34d 00 70 E3 F8 |                 getbyte htmp
2d58c 34e             | 
2d58c 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
2d590 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
2d594 350 40 00 90 AD |         if_z    jmp     #.poll
2d598 351             | 
2d598 351             |         if _HAVE_GAMEPAD
2d598 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
2d59c 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
2d5a0 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
2d5a4 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
2d5a8 355 2C 00 90 AD |         if_z    jmp     #.poll
2d5ac 356             |         end
2d5ac 356             | 
2d5ac 356             |         if HAVE_MOUSE
2d5ac 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2d5b0 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
2d5b4 358 20 00 90 AD |         if_z    jmp     #.poll
2d5b8 359             |         end
2d5b8 359             | 
2d5b8 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
2d5bc 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
2d5c0 35b 14 00 90 AD |         if_z    jmp     #.poll
2d5c4 35c             | 
2d5c4 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
2d5c8 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
2d5cc 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
2d5d0 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
2d5d4 360             |         if HAVE_MOUSE
2d5d4 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
2d5d8 361             |         else
2d5d8 361             |         end
2d5d8 361             | 
2d5d8 361             | .poll
2d5d8 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
2d5dc 362 2D EC 63 FD |                 call    pa
2d5e0 363             | .skip_poll
2d5e0 363             | 
2d5e0 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
2d5e4 364             | 
2d5e4 364             | .nopoll
2d5e4 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
2d5e8 365 44 00 90 AD |         if_z    jmp     #hsuspend
2d5ec 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
2d5f0 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
2d5f4 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
2d5f8 369 1A 84 63 FD |                 getct   hr0
2d5fc 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
2d600 36b             |         if ACTIVITY_LED >= 0
2d600 36b             |         end
2d600 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
2d604 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
2d608 36d 5C FF 9F FD |                 jmp     #hidle
2d60c 36e             | ' Check for extended SE0 state on the bus
2d60c 36e             | .se0_test
2d60c 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
2d610 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
2d614 370 22 A7 82 FA |                 rqpin   urx, dm
2d618 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2d61c 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
2d620 373 24 F6 BF FD |                 call    #wait_txn_ok
2d624 374 00 00 80 FF 
2d628 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
2d62c 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
2d62c 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
2d630 377             | 
2d630 377             | hsuspend
2d630 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
2d634 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
2d638 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
2d63c 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
2d640 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
2d644 37c 00 96 07 F6 |                 mov     mod_cnt, #0
2d648 37d             | 
2d648 37d             |                 ' Fall through to resume wait loop
2d648 37d             | 
2d648 37d             | hwait_resume
2d648 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
2d64c 37e 02 86 47 F0 |                 shr     hr1, #2
2d650 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
2d654 380             |         if ACTIVITY_LED >= 0
2d654 380             |         end
2d654 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
2d658 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
2d65c 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
2d660 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2d664 384 18 00 90 AD |         if_z    jmp     #.resume
2d668 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
2d66c 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
2d670 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
2d674 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2d678 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
2d67c 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
2d680 38b             | .resume
2d680 38b 22 05 28 FC |                 wypin   #OUT_K, dm
2d684 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
2d688 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
2d68c 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
2d690 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
2d694 390 1F 70 63 FD |                 waitx   htmp
2d698 391 22 07 28 FC |                 wypin   #OUT_J, dm
2d69c 392 01 70 47 F0 |                 shr     htmp, #1
2d6a0 393 1F 70 63 FD |                 waitx   htmp
2d6a4 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2d6a8 395 1A 92 62 FD |                 getct   iframe_ct_base
2d6ac 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2d6b0 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2d6b4 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
2d6b8 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
2d6bc 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
2d6c0 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
2d6c4 39c             | 
2d6c4 39c             | '------------------------------------------------------------------------------
2d6c4 39c             | ' Send preamble to enable low-speed HUB ports
2d6c4 39c             | '------------------------------------------------------------------------------
2d6c4 39c             | ' On entry:
2d6c4 39c             | ' On exit:
2d6c4 39c             | '   USB baud rate set to low-speed
2d6c4 39c             | '------------------------------------------------------------------------------
2d6c4 39c             | utx_pre
2d6c4 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2d6c8 39d 40 46 62 FD |                 dirl    dp
2d6cc 39e 28 02 64 FD |                 setq    #1
2d6d0 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
2d6d4 3a0 58 44 62 FD |                 drvl    dm
2d6d8 3a1 59 46 62 FD |                 drvh    dp
2d6dc 3a2             | 
2d6dc 3a2 1E 00 00 FF 
2d6e0 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
2d6e4 3a4             | 
2d6e4 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
2d6e8 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
2d6ec 3a6 28 02 64 3D |         if_nc   setq    #1
2d6f0 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
2d6f4 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
2d6f8 3a9             | .l1
2d6f8 3a9             | 
2d6f8 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2d6fc 3aa 40 46 62 FD |                 dirl    dp
2d700 3ab 28 02 64 FD |                 setq    #1
2d704 3ac 80 00 80 FF 
2d708 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2d70c 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
2d710 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2d714 3b0 41 46 62 FD |                 dirh    dp
2d718 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2d71c 3b2             | 
2d71c 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2d720 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2d724 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2d728 3b5             | 
2d728 3b5             | hlut_end
2d728 3b5             |                 fit     $400
2d728 3b5             |                 orgh
2d728                 | if OVERLAP_MEMORY
2d728                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
2d728                 | end
2d728                 | '------------------------------------------------------------------------------
2d728                 | ' Routines called from cog space.
2d728                 | '------------------------------------------------------------------------------
2d728                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
2d728                 | '------------------------------------------------------------------------------
2d728                 | 
2d728                 | '------------------------------------------------------------------------------
2d728                 | ' USB host cog initialization.
2d728                 | '------------------------------------------------------------------------------
2d728                 | usb_host_init
2d728                 |                 ' Initialize buffer pointers
2d728                 |         if OVERLAP_MEMORY
2d728                 |         else
2d728     40 15 B0 FE |                 loc     pb, #hid_descr
2d72c                 |         end
2d72c     F7 4B 02 F6 |                 mov     hid_descr_p, pb
2d730                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
2d730                 |                 {
2d730                 |                 }
2d730                 |         
2d730                 |                 {
2d730                 |                 }
2d730                 |                 'loc     pb,#hkbd_report
2d730                 |                 'mov     hkbd_report_p,pb
2d730                 | 
2d730     08 1D B0 FE |                 loc     pb, #hub_descr
2d734     F7 4D 02 F6 |                 mov     hub_descr_p, pb
2d738     1D 1D B0 FE |                 loc     pb, #urx_buff
2d73c     F7 4F 02 F6 |                 mov     urx_buff_p, pb
2d740     95 1D B0 FE |                 loc     pb, #dev_desc_buff
2d744     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
2d748     9F 1D B0 FE |                 loc     pb, #con_desc_buff
2d74c     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
2d750     18 15 B0 FE |                 loc     pb, #usb_cache_start
2d754     F7 55 02 F6 |                 mov     cache_start_p, pb
2d758     E9 1C B0 FE |                 loc     pb, #usb_cache_end
2d75c     F7 57 02 F6 |                 mov     cache_end_p, pb
2d760                 | 
2d760                 |         if ERROR_LED >= 0
2d760                 |         end
2d760                 | 
2d760                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
2d760                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
2d760                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
2d760                 | ' Configure and enable the Serial Host USB port.
2d760     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
2d764                 | 
2d764                 | '------------------------------------------------------------------------------
2d764                 | ' Timing calculations happen before any interrupt(s) are enabled.
2d764                 | '------------------------------------------------------------------------------
2d764                 | ' On entry:
2d764                 | '   htmp - current CLKFREQ value.
2d764                 | '------------------------------------------------------------------------------
2d764                 | hinit_usb_timings
2d764                 | '                getct   htmp2
2d764     B8 59 02 F6 |                 mov     save_sysclk, htmp
2d768     8D 5B 80 FF 
2d76c     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
2d770     18 30 63 FD |                 getqx   _12Mbps_
2d774     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
2d778     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
2d77c     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
2d780     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
2d784     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
2d788     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
2d78c     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
2d790     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
2d794     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
2d798     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
2d79c     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
2d7a0     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
2d7a4     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
2d7a8     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
2d7ac     80 00 00 FF 
2d7b0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
2d7b4     18 2C 63 FD |                 getqx   _var_64_lower_
2d7b8     19 2E 63 FD |                 getqy   _var_64_upper_
2d7bc     28 2C 63 FD |                 setq    _var_64_lower_
2d7c0     65 CD 1D FF 
2d7c4     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
2d7c8     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
2d7cc     01 00 00 FF 
2d7d0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
2d7d4     18 2C 63 FD |                 getqx   _var_64_lower_
2d7d8     19 2E 63 FD |                 getqy   _var_64_upper_
2d7dc     28 2C 63 FD |                 setq    _var_64_lower_
2d7e0     A1 07 00 FF 
2d7e4     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
2d7e8     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
2d7ec     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
2d7f0     09 36 57 F0 |                 shr     _1us_, #9               wc
2d7f4     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
2d7f8     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
2d7fc     18 38 63 FD |                 getqx   _10us_
2d800     09 38 57 F0 |                 shr     _10us_, #9              wc
2d804     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
2d808     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
2d80c     18 3A 63 FD |                 getqx   _33us_
2d810     09 3A 57 F0 |                 shr     _33us_, #9              wc
2d814     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
2d818     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
2d81c     18 3C 63 FD |                 getqx   _txn_err_
2d820     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
2d824     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
2d828     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
2d82c     18 3E 63 FD |                 getqx   _500us_
2d830     09 3E 57 F0 |                 shr     _500us_, #9             wc
2d834     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
2d838     01 00 00 FF 
2d83c     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
2d840     18 40 63 FD |                 getqx   _txn_ok_ls_
2d844     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
2d848     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
2d84c     01 00 00 FF 
2d850     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
2d854     18 42 63 FD |                 getqx   _txn_ok_fs_
2d858     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
2d85c     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
2d860     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
2d864     05 00 00 FF 
2d868     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
2d86c     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
2d870     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
2d874     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
2d878     1C 00 00 FF 
2d87c     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
2d880     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
2d884     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
2d888     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
2d88c     00 00 00 FF 
2d890     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
2d894     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
2d898     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
2d89c     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
2d8a0     04 00 00 FF 
2d8a4     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
2d8a8     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
2d8ac     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
2d8b0     8D 5B 00 FF 
2d8b4     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
2d8b8     18 4C 63 FD |                 getqx   _preamble_wait_
2d8bc     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
2d8c0     01 00 00 FF 
2d8c4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
2d8c8     18 2C 63 FD |                 getqx   _var_64_lower_
2d8cc     19 2E 63 FD |                 getqy   _var_64_upper_
2d8d0     28 2C 63 FD |                 setq    _var_64_lower_
2d8d4     01 00 00 FF 
2d8d8     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
2d8dc     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
2d8e0     09 4E 57 F0 |                 shr     _1ms_, #9               wc
2d8e4     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
2d8e8     FF FF 7F FF 
2d8ec     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
2d8f0     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
2d8f4     A7 51 03 F6 |                 mov     _2ms_, _1ms_
2d8f8     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
2d8fc     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
2d900     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
2d904     A7 55 03 F6 |                 mov     _4ms_, _1ms_
2d908     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
2d90c     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
2d910     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
2d914     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
2d918     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
2d91c     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
2d920     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
2d924     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
2d928     A7 59 03 F6 |                 mov     _8ms_, _1ms_
2d92c     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
2d930     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
2d934     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
2d938     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
2d93c     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
2d940     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
2d944     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2d948     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
2d94c     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
2d950     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
2d954     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2d958                 | '        _ret_   mov     _1sec_, save_sysclk
2d958                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2d958                 | '                ret
2d958                 | {
2d958                 | }
2d958                 | 
2d958                 | '------------------------------------------------------------------------------
2d958                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2d958                 | ' one. If it is, start the task progression that will configure the device for
2d958                 | ' use.
2d958                 | '------------------------------------------------------------------------------
2d958                 | ' On entry:
2d958                 | '   hconfig_base - start address of the cached config descriptor chain.
2d958                 | ' On exit:
2d958                 | '------------------------------------------------------------------------------
2d958                 | hparse_con_desc
2d958     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
2d95c     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
2d960     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
2d964     4E 70 FF F9 |                 movbyts htmp,#%%1032
2d968     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
2d96c                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
2d96c                 | 
2d96c     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
2d970     6E ED 03 F1 |                 add     pa, hconfig_base
2d974     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2d978                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2d978                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2d978                 | ' that defines a keyboard and/or mouse.
2d978     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
2d97c                 | .next_intf
2d97c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2d980     BC 01 90 3D |         if_ae   jmp     #hset_config
2d984     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2d988     75 F3 03 F1 |                 add     ptrb, hnext_desc
2d98c     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2d990     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2d994     0C 00 90 AD |         if_z    jmp     #.intf
2d998     80 71 C7 FA |                 rdbyte  htmp, ptrb
2d99c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2d9a0     D8 FF 9F FD |                 jmp     #.next_intf
2d9a4                 | .intf
2d9a4     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2d9a8     00 90 07 F6 |                 mov     hpar3, #0
2d9ac     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
2d9b0     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
2d9b4     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2d9b8     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
2d9bc                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
2d9bc                 | 
2d9bc                 | .endp
2d9bc     80 71 C7 FA |                 rdbyte  htmp, ptrb
2d9c0     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2d9c4     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2d9c8     78 00 90 3D |         if_ae   jmp     #.get_device
2d9cc     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2d9d0     75 F3 03 F1 |                 add     ptrb, hnext_desc
2d9d4     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2d9d8     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2d9dc     64 00 90 AD |         if_z    jmp     #.get_device
2d9e0     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
2d9e4     04 00 90 AD |         if_z    jmp     #.get_ep
2d9e8     D0 FF 9F FD |                 jmp     #.endp
2d9ec                 | .get_ep
2d9ec     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2d9f0     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
2d9f4     0F 86 67 F0 |                 shl     hr1, #8 + 7
2d9f8     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
2d9fc     3F 00 00 FF 
2da00     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
2da04     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
2da08     00 8E 0F F2 |                 cmp     hpar2, #0               wz
2da0c     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2da10     00 90 0F F2 |                 cmp     hpar3, #0               wz
2da14     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
2da18     A0 FF 9F FD |                 jmp     #.endp
2da1c                 | .in_ep
2da1c     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2da20     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
2da24                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2da24     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2da28     C2 89 DB F8 |                 setbyte hr2, hr0, #3
2da2c     8C FF 9F FD |                 jmp     #.endp
2da30                 | .out_ep
2da30     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
2da34     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
2da38                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2da38     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2da3c     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2da40     78 FF 9F FD |                 jmp     #.endp
2da44                 | 
2da44                 | .get_device
2da44     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2da48     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
2da4c     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2da50     68 00 90 AD |         if_z    jmp     #.gamepad
2da54     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2da58     AC 00 90 AD |         if_z    jmp     #.hub
2da5c     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
2da60     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
2da64     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2da68     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2da6c     4C 00 90 AD |         if_z    jmp     #.gamepad
2da70     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
2da74     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2da78                 | .keyboard
2da78     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
2da7c                 |         if HAVE_MOUSE
2da7c     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
2da80                 |         else
2da80                 |         end
2da80     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
2da84     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2da88     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2da8c     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
2da90     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
2da94     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2da98                 |                 'debug(udec(kb_intf_num))
2da98                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2da98     E0 FE 9F FD |                 jmp     #.next_intf
2da9c                 | if HAVE_MOUSE
2da9c                 | .mouse
2da9c     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
2daa0     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
2daa4     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2daa8     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
2daac     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2dab0                 |                 'getbyte ms_interval, hr2, #3
2dab0     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
2dab4     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2dab8                 |                 'debug(udec(kb_intf_num))
2dab8                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2dab8     C0 FE 9F FD |                 jmp     #.next_intf
2dabc                 | end
2dabc                 | .gamepad
2dabc     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2dac0     C7 71 63 F5 |                 xor     htmp, hpar2
2dac4     3F 00 00 FF 
2dac8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2dacc     AC FE 9F AD |         if_z    jmp     #.next_intf
2dad0                 |         if HAVE_MOUSE
2dad0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2dad4     C7 71 63 F5 |                 xor     htmp, hpar2
2dad8     3F 00 00 FF 
2dadc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2dae0     98 FE 9F AD |         if_z    jmp     #.next_intf
2dae4                 |         end
2dae4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
2dae8     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
2daec     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2daf0                 | 
2daf0     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2daf4     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
2daf8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2dafc     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2db00     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
2db04                 |                 'debug(udec(gp_intf_num))
2db04                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
2db04     74 FE 9F FD |                 jmp     #.next_intf
2db08                 | .hub
2db08     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2db0c     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2db10     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2db14     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
2db18     60 FE 9F 5D |         if_nz   jmp     #.next_intf
2db1c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2db20     58 FE 9F 5D |         if_nz   jmp     #.next_intf
2db24     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
2db28     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2db2c     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2db30     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2db34     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
2db38     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
2db3c                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
2db3c     3C FE 9F FD |                 jmp     #.next_intf
2db40                 | 
2db40                 | '------------------------------------------------------------------------------
2db40                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2db40                 | ' it according to its function, or functions. In the case of this boot protocol
2db40                 | ' keyboard/mouse class driver:
2db40                 | ' - SetConfiguration(config_num)
2db40                 | ' - SetProtocol(boot)
2db40                 | ' - SetIdle(indefinite)
2db40                 | ' - Enter the device interrupt IN polling task stage.
2db40                 | '------------------------------------------------------------------------------
2db40                 | ' On entry:
2db40                 | ' On exit:
2db40                 | '------------------------------------------------------------------------------
2db40                 | hset_config
2db40                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2db40                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2db40     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
2db44     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2db48     00 00 0C F2 |                 cmp     0-0, #0                 wz
2db4c     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2db50                 |         if HAVE_MOUSE
2db50     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
2db54                 |         end
2db54     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2db58     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
2db5c                 | .set_config
2db5c     6C 0E D0 FE |                 loc     ptra, #set_config
2db60     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
2db64     6E ED 03 F1 |                 add     pa, hconfig_base
2db68     F6 8D C3 FA |                 rdbyte  hpar1, pa
2db6c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
2db70     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
2db74     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2db78     A0 02 A0 FD |                 call    #control_write
2db7c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2db80     2D 00 64 5D |         if_nz   ret
2db84                 | .kbd_config
2db84     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2db88     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
2db8c                 | 
2db8c     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2db90     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2db94     3F 00 00 FF 
2db98     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2db9c     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
2dba0                 | 
2dba0     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2dba4     34 0E D0 FE |                 loc     ptra, #set_protocol
2dba8     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2dbac     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2dbb0     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2dbb4     A0 02 A0 FD |                 call    #control_write
2dbb8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2dbbc     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2dbc0     E4 02 90 5D |         if_nz   jmp     #.notify_client
2dbc4     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2dbc8     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
2dbcc     30 03 B0 FD |                 call    #hset_idle
2dbd0                 |                 'cmp     retval, #PID_ACK        wz
2dbd0                 |         'if_nz   mov     hkbd_ep_addr, #0
2dbd0                 |         'if_nz   jmp     #.notify_client
2dbd0     A8 99 02 F6 |                 mov     hctwait, _2ms_
2dbd4     EF 02 A0 FD |                 call    #poll_waitx
2dbd8     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
2dbdc     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2dbe0     90 17 90 FE |                 loc     pa, #hkbd_led_rep
2dbe4     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
2dbe8     2C 03 B0 FD |                 call    #hset_kbdled_report
2dbec     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2dbf0     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2dbf4     B0 02 90 5D |         if_nz   jmp     #.notify_client
2dbf8     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2dbfc     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2dc00     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2dc04     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2dc08     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
2dc0c     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2dc10     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
2dc14     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2dc18     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
2dc1c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2dc20     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
2dc24                 |         if !!HAVE_MOUSE
2dc24                 |         end
2dc24                 | 
2dc24                 | .mouse_config
2dc24                 | if HAVE_MOUSE
2dc24     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
2dc28     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2dc2c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2dc30     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2dc34     3F 00 00 FF 
2dc38     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2dc3c     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2dc40                 | 
2dc40                 |                 debug("mouse passed addr check")
2dc40                 | 
2dc40     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2dc44     00 00 80 FF 
2dc48     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
2dc4c     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2dc50     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2dc54     55 02 A0 FD |                 call    #control_read
2dc58     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2dc5c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2dc60     44 02 90 5D |         if_nz   jmp     #.notify_client
2dc64     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2dc68     56 01 00 F6 |                 mov     0-0, total_data
2dc6c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2dc70                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2dc70                 | 
2dc70     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
2dc74     64 0D D0 FE |                 loc     ptra, #set_protocol
2dc78     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2dc7c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2dc80     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2dc84     A0 02 A0 FD |                 call    #control_write
2dc88     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2dc8c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2dc90     14 02 90 5D |         if_nz   jmp     #.notify_client
2dc94                 |                 debug("mouse passed SetProtocol")
2dc94     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2dc98     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
2dc9c     60 02 B0 FD |                 call    #hset_idle
2dca0                 |                 'cmp     retval, #PID_ACK        wz
2dca0                 |         'if_nz   mov     hmouse_ep_addr, #0
2dca0                 |         'if_nz   jmp     #.notify_client
2dca0                 |                 debug("mouse passed SetIdle")
2dca0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2dca4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2dca8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2dcac     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2dcb0     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
2dcb4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2dcb8     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
2dcbc     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2dcc0     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
2dcc4     3F 00 00 FF 
2dcc8     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
2dccc     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2dcd0     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
2dcd4     D0 01 90 FD |                 jmp     #.notify_client
2dcd8                 | end
2dcd8                 | .gamepad_config
2dcd8                 | if _HAVE_GAMEPAD
2dcd8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2dcdc     00 00 0C F2 |                 cmp     0-0, #0                 wz
2dce0     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
2dce4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2dce8     00 70 03 F6 |                 mov     htmp, 0-0
2dcec     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2dcf0     3F 00 00 FF 
2dcf4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2dcf8     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
2dcfc                 | 
2dcfc     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2dd00     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2dd04     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2dd08     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2dd0c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2dd10     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2dd14     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
2dd18     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
2dd1c     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2dd20     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2dd24     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2dd28     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
2dd2c     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2dd30     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2dd34                 | 
2dd34                 |                 if EMUPAD_MAX_PLAYER > 0
2dd34                 |                 
2dd34                 | .rule_loop           
2dd34                 |                 end
2dd34                 | 
2dd34     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
2dd38     5C 00 90 AD |         if_e    jmp     #.xinput
2dd3c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2dd40     00 70 03 F6 |                 mov     htmp,0-0
2dd44     01 A6 02 FF 
2dd48     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
2dd4c     7C 00 90 AD |         if_e    jmp     #.ps3
2dd50                 | 
2dd50     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2dd54     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2dd58     00 00 80 5F 
2dd5c     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
2dd60     03 00 80 AF 
2dd64     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2dd68     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
2dd6c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2dd70     55 02 A0 FD |                 call    #control_read
2dd74     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2dd78     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2dd7c     00 00 04 56 |         if_nz   mov     0-0, #0
2dd80     24 01 90 5D |         if_nz   jmp     #.notify_client
2dd84     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2dd88     56 01 00 F6 |                 mov     0-0, total_data
2dd8c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2dd90                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2dd90                 | 
2dd90     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
2dd94     10 01 90 FD |                 jmp     #.notify_client
2dd98                 | .xinput
2dd98     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
2dd9c     2D EF 03 F6 |                 mov     pb,hdev_port
2dda0     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
2dda4     03 EE 27 F3 |                 fle     pb,#3
2dda8     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
2ddac     02 EF 47 FC |                 wrbyte  pb, ptra[2]
2ddb0                 | 
2ddb0     03 B0 06 F6 |                 mov     pkt_data, #3
2ddb4     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2ddb8     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
2ddbc     5A 00 A0 FD |                 call    #txn_out
2ddc0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
2ddc4                 | 
2ddc4     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2ddc8     DC 00 90 FD |                 jmp     #.notify_client
2ddcc                 | .ps3
2ddcc     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2ddd0     2D EF 03 F6 |                 mov     pb,hdev_port
2ddd4     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2ddd8     04 EE 27 F3 |                 fle     pb,#4
2dddc     F7 EF C3 F9 |                 decod   pb
2dde0     09 EF 47 FC |                 wrbyte  pb, ptra[9]
2dde4                 | 
2dde4     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2dde8     00 0C D0 FE |                 loc     ptra, #set_report
2ddec     01 00 80 FF 
2ddf0     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
2ddf4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2ddf8     03 61 5C FC |                 wrword  #48, ptra[wLength]
2ddfc     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2de00     A0 02 A0 FD |                 call    #control_write
2de04                 | 
2de04     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2de08     E0 0B D0 FE |                 loc     ptra, #set_report
2de0c     01 00 80 FF 
2de10     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
2de14     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2de18     03 09 5C FC |                 wrword  #4, ptra[wLength]
2de1c     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
2de20     A0 02 A0 FD |                 call    #control_write
2de24     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
2de28     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2de2c     00 00 04 56 |         if_nz   mov     0-0, #0
2de30     74 00 90 5D |         if_nz   jmp     #.notify_client
2de34                 | 
2de34     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
2de38     6C 00 90 FD |                 jmp     #.notify_client
2de3c                 | end
2de3c                 | 
2de3c                 | .hub_config
2de3c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2de40     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
2de44     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
2de48     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2de4c     3F 00 00 FF 
2de50     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2de54     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
2de58                 | 
2de58     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
2de5c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
2de60     26 EF 03 F6 |                 mov     pb, hub_descr_p
2de64     55 02 A0 FD |                 call    #control_read
2de68     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2de6c     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
2de70     34 00 90 5D |         if_nz   jmp     #.notify_client
2de74                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
2de74                 | 
2de74     26 F1 03 F6 |                 mov     ptra, hub_descr_p
2de78     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
2de7c     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
2de80                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
2de80                 | .pwr_loop
2de80     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
2de84     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
2de88     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
2de8c     A0 02 A0 FD |                 call    #control_write
2de90     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
2de94                 | 
2de94     B1 99 02 F6 |                 mov     hctwait, _500ms_
2de98     B0 99 02 F1 |                 add     hctwait, _100ms_
2de9c     EF 02 A0 FD |                 call    #poll_waitx
2dea0                 | 
2dea0     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
2dea4     00 00 90 FD |                 jmp     #.notify_client
2dea8                 | 
2dea8                 | .notify_client
2dea8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2deac     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
2deb0                 |                 debug(uhex_long(hdev_type,hdev_type+1))
2deb0                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
2deb0     2D 00 64 FD |                 ret
2deb4                 | 
2deb4                 | '------------------------------------------------------------------------------
2deb4                 | ' Initialize the keyboard/mouse data area to start-up values.
2deb4                 | '------------------------------------------------------------------------------
2deb4                 | ' On entry:
2deb4                 | ' On exit:
2deb4                 | '------------------------------------------------------------------------------
2deb4                 | init_kbdm_data
2deb4     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
2deb8     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
2debc                 | 
2debc     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
2dec0     2B ED 03 F6 |                 mov     pa, cache_end_p
2dec4                 | .loop
2dec4     61 01 4C FC |                 wrbyte  #0, ptra++
2dec8     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
2decc     F4 FF 9F CD |         if_b    jmp     #.loop
2ded0                 |         
2ded0                 |         if EMUPAD_MAX_PLAYER > 0
2ded0                 |         end
2ded0                 | 
2ded0                 | 
2ded0     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
2ded4                 | .regloop
2ded4     00 EC 8F F9 |                 altd    pa
2ded8     00 00 04 F6 |                 mov     0-0, #0
2dedc     01 EC 07 F1 |                 add     pa, #1
2dee0     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
2dee4     EC FF 9F 5D |         if_nz   jmp     #.regloop
2dee8                 | 
2dee8     E1 E1 61 FF 
2deec     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
2def0     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
2def4     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
2def8     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
2defc                 | 
2defc     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
2df00                 | 
2df00                 | '------------------------------------------------------------------------------
2df00                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
2df00                 | ' function.
2df00                 | '------------------------------------------------------------------------------
2df00                 | ' On entry:
2df00                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
2df00                 | '   hpar2 - index number of the target interface.
2df00                 | ' On exit:
2df00                 | '------------------------------------------------------------------------------
2df00                 | hset_idle
2df00     A8 99 02 F6 |                 mov     hctwait, _2ms_
2df04     EF 02 A0 FD |                 call    #poll_waitx
2df08     D8 0A D0 FE |                 loc     ptra, #set_idle
2df0c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
2df10     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
2df14     A0 02 80 FD |                 jmp     #control_write
2df18                 | 
2df18                 | '------------------------------------------------------------------------------
2df18                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
2df18                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
2df18                 | '------------------------------------------------------------------------------
2df18                 | ' On entry:
2df18                 | '   ep_addr_pid - device address and enpoint for the request.
2df18                 | ' On exit:
2df18                 | '   retval - transaction result.
2df18                 | '------------------------------------------------------------------------------
2df18                 | hset_kbdled_report
2df18     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2df1c     CC 0A D0 FE |                 loc     ptra, #set_report
2df20     01 00 80 FF 
2df24     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
2df28     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2df2c     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
2df30     27 EF 03 F6 |                 mov     pb, urx_buff_p
2df34     F7 77 42 FC |                 wrbyte  kb_led_states, pb
2df38     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
2df3c                 | 
2df3c                 | '------------------------------------------------------------------------------
2df3c                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
2df3c                 | '------------------------------------------------------------------------------
2df3c                 | ' On entry:
2df3c                 | ' On exit:
2df3c                 | '------------------------------------------------------------------------------
2df3c                 | hget_kbd_in_report
2df3c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2df40     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2df44     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
2df48     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
2df4c     CF 02 A0 FD |                 call    #do_int_in
2df50     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2df54     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2df58                 | 
2df58     00 90 0F F2 |                 cmp     hpar3, #0               wz
2df5c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2df60                 | 
2df60     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
2df64     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2df68     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
2df6c     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
2df70                 | 
2df70     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
2df74     18 00 B0 FD |                 call    #hkbd_compare
2df78                 |         if EMUPAD_MAX_PLAYER > 0
2df78                 |         end
2df78                 | 
2df78                 | .led_check
2df78     3B 71 03 F6 |                 mov     htmp, kb_led_states
2df7c     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
2df80     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
2df84     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
2df88     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
2df8c     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
2df90                 | 
2df90                 | '------------------------------------------------------------------------------
2df90                 | ' Compare current and previous keyboard data buffers for keypress changes.
2df90                 | '------------------------------------------------------------------------------
2df90                 | hkbd_compare
2df90     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2df94     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
2df98     61 73 07 FB |                 rdlong  htmp1, ptra++
2df9c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2dfa0     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
2dfa4     61 73 07 FB |                 rdlong  htmp1, ptra++
2dfa8     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2dfac     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
2dfb0     2D 00 64 AD |         if_z    ret
2dfb4                 | 
2dfb4     B4 13 D0 FE |                 loc     ptra, #hkbd_report
2dfb8                 | 
2dfb8                 |                 ' Handle modifiers
2dfb8     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
2dfbc     00 87 C7 FA |                 rdbyte  hr1, ptra
2dfc0     C7 87 43 F9 |                 rolword hr1,hpar2,#0
2dfc4     63 86 63 FD |                 mergew  hr1
2dfc8     08 EC 07 F6 |                 mov     pa,#8
2dfcc                 | .modloop
2dfcc     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
2dfd0     E8 8C 07 F6 |                 mov     hpar1,#$E8
2dfd4     F6 8D 83 F1 |                 sub     hpar1,pa
2dfd8     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
2dfdc     FB ED 6F FB |                 djnz    pa,#.modloop
2dfe0                 | 
2dfe0     6F E0 75 FD | .release        modc    _set    wc
2dfe4                 |                 'alts    hdev_port, #hid_report_p
2dfe4                 |                 'mov     ptra, hid_report_p
2dfe4     02 F0 07 F1 |                 add     ptra, #2
2dfe8     06 EC 07 F6 |                 mov     pa, #6
2dfec     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
2dff0     20 00 90 AD |         if_z    jmp     #.rl3
2dff4     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2dff8     02 F2 07 F1 |                 add     ptrb, #2
2dffc     06 EE 07 F6 |                 mov     pb, #6
2e000     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
2e004     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2e008     08 00 90 AD |         if_z    jmp     #.rl3
2e00c     FC EF 6F FB |                 djnz    pb, #.rl2
2e010     68 00 B0 FD |                 call    #hkbd_translate
2e014     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
2e018                 | 
2e018     00 90 07 F6 |                 mov     hpar3, #0
2e01c     1F 90 27 F4 |                 bith    hpar3, #31
2e020                 | 
2e020     6F 00 74 FD | .press          modc    _clr    wc
2e024     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2e028     02 F0 07 F1 |                 add     ptra, #2
2e02c     06 EC 07 F6 |                 mov     pa, #6
2e030     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
2e034     20 00 90 AD |         if_z    jmp     #.pl3
2e038     30 13 F0 FE |                 loc     ptrb, #hkbd_report
2e03c     02 F2 07 F1 |                 add     ptrb, #2
2e040     06 EE 07 F6 |                 mov     pb, #6
2e044     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
2e048     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2e04c     08 00 90 AD |         if_z    jmp     #.pl3
2e050     FC EF 6F FB |                 djnz    pb, #.pl2
2e054     24 00 B0 FD |                 call    #hkbd_translate
2e058     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
2e05c                 | 
2e05c     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
2e060     08 13 F0 FE |                 loc     ptrb, #hkbd_report
2e064     28 02 64 FD |                 setq #1
2e068     61 73 07 FB |                 rdlong  htmp1, ptra++
2e06c     28 02 64 FD |                 setq #1
2e070     E1 73 67 FC |                 wrlong  htmp1, ptrb++
2e074     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
2e078                 | 
2e078     2D 00 64 FD |                 ret
2e07c                 | 
2e07c                 | '------------------------------------------------------------------------------
2e07c                 | ' Translate keyboard scancode to ASCII
2e07c                 | '------------------------------------------------------------------------------
2e07c                 | ' On entry:
2e07c                 | '   hpar1 - scancode
2e07c                 | '   hpar2 - key modifiers state
2e07c                 | '       c - pressed (0) or released (1) flag
2e07c                 | ' On exit:
2e07c                 | '   hpar1 - bit     31 = 0 pressed, 1 released
2e07c                 | '               30..17 = unused
2e07c                 | '                   18 = scroll-lock state 
2e07c                 | '                   17 = caps-lock state
2e07c                 | '                   16 = num-lock state 
2e07c                 | '                15..8 = key modifiers state
2e07c                 | '                 7..0 = scancode
2e07c                 | '------------------------------------------------------------------------------
2e07c                 | hkbd_translate
2e07c     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
2e080     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
2e084     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
2e088     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
2e08c     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
2e090     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
2e094                 | 
2e094                 |         if EMUPAD_MAX_PLAYER > 0
2e094                 | 
2e094                 |         if EMUPAD_BT0_BIT >= 0
2e094                 |         end
2e094                 |         if EMUPAD_BT1_BIT >= 0
2e094                 |         end
2e094                 |         if EMUPAD_BT2_BIT >= 0
2e094                 |         end
2e094                 |         if EMUPAD_BT3_BIT >= 0
2e094                 |         end
2e094                 |         if EMUPAD_BT4_BIT >= 0
2e094                 |         end
2e094                 |         if EMUPAD_BT5_BIT >= 0
2e094                 |         end
2e094                 |         if EMUPAD_BT6_BIT >= 0
2e094                 |         end
2e094                 |         if EMUPAD_BT7_BIT >= 0
2e094                 |         end
2e094                 |         if EMUPAD_BT8_BIT >= 0
2e094                 |         end
2e094                 |         if EMUPAD_BT9_BIT >= 0
2e094                 |         end
2e094                 | 
2e094                 |         end
2e094     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
2e098     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
2e09c     1F 8C 47 F4 |                 bitc    hpar1, #31
2e0a0                 |         if KEYQUEUE_SIZE > 0
2e0a0     C4 09 B0 FE |                 loc pb,#keyq_head
2e0a4     F7 71 E3 FA |                 rdword htmp,pb
2e0a8     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
2e0ac     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
2e0b0     B8 75 03 F6 |                 mov htmp2,htmp
2e0b4     04 74 07 FA |                 mul htmp2,#4
2e0b8     F7 75 03 F1 |                 add htmp2,pb
2e0bc     02 74 07 F1 |                 add htmp2,#2
2e0c0     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
2e0c4     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
2e0c8     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
2e0cc     F7 71 43 5C |         if_nz   wrbyte htmp,pb
2e0d0                 |         end
2e0d0     2D 00 7C FD |                 ret wcz
2e0d4                 | 
2e0d4                 | if HAVE_MOUSE
2e0d4                 | '------------------------------------------------------------------------------
2e0d4                 | ' Execute an IN interrupt transaction to poll for mouse activity.
2e0d4                 | '------------------------------------------------------------------------------
2e0d4                 | ' On entry:
2e0d4                 | ' On exit:
2e0d4                 | '------------------------------------------------------------------------------
2e0d4                 | hget_mouse_in_report
2e0d4     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2e0d8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2e0dc     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
2e0e0     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
2e0e4     CF 02 A0 FD |                 call    #do_int_in
2e0e8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e0ec     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2e0f0                 | 
2e0f0     00 90 0F F2 |                 cmp     hpar3, #0               wz
2e0f4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2e0f8                 | 
2e0f8     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
2e0fc     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2e100     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
2e104     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
2e108                 | 
2e108     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2e10c     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
2e110     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
2e114     01 90 87 31 |         if_ae   sub     hpar3, #1
2e118                 | 
2e118     40 09 90 FE |                 loc     pa, #mouse_limits
2e11c     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
2e120                 | 
2e120                 |                 ' load xacc,yacc,zacc
2e120     28 04 64 FD |                 setq    #3-1
2e124     80 87 07 FB |                 rdlong  hr1,ptrb
2e128                 |                 ' load limits and outptr
2e128     28 04 64 FD |                 setq    #3-1
2e12c     F6 73 03 FB |                 rdlong  htmp1,pa
2e130                 | 
2e130     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
2e134     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
2e138     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
2e13c     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
2e140     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
2e144     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
2e148     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
2e14c     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
2e150                 |               
2e150                 | 
2e150     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
2e154     07 70 67 F7 |                 signx   htmp, #7
2e158     B8 87 03 F1 |                 add     hr1,htmp
2e15c     00 72 0F F2 |                 cmp     htmp1,#0 wz
2e160     B9 87 63 53 |         if_ne   fles    hr1,htmp1
2e164     00 86 47 53 |         if_ne   fges    hr1,#0
2e168                 | 
2e168     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
2e16c     07 70 67 F7 |                 signx   htmp, #7
2e170     B8 89 03 F1 |                 add     hr2,htmp
2e174     00 74 0F F2 |                 cmp     htmp2,#0 wz
2e178     BA 89 63 53 |         if_ne   fles    hr2,htmp2
2e17c     00 88 47 53 |         if_ne   fges    hr2,#0
2e180                 |                 
2e180                 | 
2e180     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
2e184     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
2e188     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
2e18c     B8 8B 03 A1 |         if_z    add     hr3,htmp
2e190                 | 
2e190     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
2e194     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
2e198                 | 
2e198                 |                 ' write back accumulators
2e198     28 04 64 FD |                 setq    #3-1
2e19c     80 87 67 FC |                 wrlong  hr1,ptrb
2e1a0                 |                 ' if outptr set, write X/Y words
2e1a0     00 76 0F F2 |                 cmp htmp3,#0                    wz
2e1a4     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
2e1a8     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
2e1ac     2D 00 64 FD |                 ret
2e1b0                 | end
2e1b0                 | 
2e1b0                 | '------------------------------------------------------------------------------
2e1b0                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2e1b0                 | '------------------------------------------------------------------------------
2e1b0                 | ' On entry:
2e1b0                 | ' On exit:
2e1b0                 | '------------------------------------------------------------------------------
2e1b0                 | if _HAVE_GAMEPAD
2e1b0                 | hget_gp_in_report
2e1b0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2e1b4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2e1b8                 | 
2e1b8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2e1bc     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
2e1c0     00 90 E3 F8 |                 getbyte hpar3
2e1c4     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
2e1c8     CF 02 A0 FD |                 call    #do_int_in
2e1cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e1d0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2e1d4                 | 
2e1d4     00 90 0F F2 |                 cmp     hpar3, #0               wz
2e1d8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2e1dc                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
2e1dc                 | 
2e1dc     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
2e1e0     00 70 E3 F8 |                 getbyte htmp                            ' |
2e1e4     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2e1e8     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
2e1ec     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
2e1f0     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
2e1f4     B8 01 C0 F8 |                 setbyte htmp                            ' |
2e1f8                 | 
2e1f8                 | ' Note: the following code compares the current and previous reports
2e1f8                 | ' and process the data if there are changes to ease the debug output.
2e1f8                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
2e1f8                 | ' gpPreReport buffer.
2e1f8                 | 
2e1f8                 |                 ' ----- start of block to remove
2e1f8                 |                 {
2e1f8                 |                 }
2e1f8                 |                 ' ----- end of block to remove
2e1f8     F4 04 90 FE |                 loc pa,#hpad_translate
2e1fc     2A EC 63 FD |                 push pa
2e200                 | 
2e200                 |                 ' FALL THROUGH !!!!
2e200                 | 
2e200                 | '------------------------------------------------------------------------------
2e200                 | ' Decode controller report
2e200                 | '------------------------------------------------------------------------------
2e200                 | hid_decode
2e200                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
2e200     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
2e204     00 04 00 FF 
2e208     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
2e20c                 | 
2e20c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2e210                 | 
2e210     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2e214     00 2A E3 F8 |                 getbyte hidr_type
2e218     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
2e21c     34 02 90 AD |         if_z    jmp     #hpad_xinput
2e220     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
2e224     1C 03 90 AD |         if_z    jmp     #hpad_ps3
2e228     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
2e22c     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
2e230     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
2e234                 |                 
2e234                 | 
2e234                 | '------------------------------------------------------------------------------
2e234                 | ' Handle HID controller (or mouse now
2e234                 | ' On entry:
2e234                 | '   ptrb - controller report
2e234                 | '------------------------------------------------------------------------------
2e234                 | hpad_hid
2e234     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2e238     F7 F1 03 F6 |                 mov     ptra, pb
2e23c     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
2e240     00 EC 03 F6 |                 mov     pa, 0-0
2e244                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
2e244     19 2A 3B FF 
2e248     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
2e24c                 | 
2e24c                 | .next
2e24c     00 EC 5F F2 |                 cmps    pa, #0      wcz
2e250     2D 00 7C ED |         if_be   ret     wcz
2e254                 | 
2e254     61 8D C7 FA |                 rdbyte  hpar1, ptra++
2e258     01 EC 87 F1 |                 sub     pa, #1
2e25c     00 8E 07 F6 |                 mov     hpar2, #0
2e260                 | 
2e260     C6 71 03 F6 |                 mov     htmp, hpar1
2e264     03 70 07 F5 |                 and     htmp, #$03
2e268     01 70 0F F2 |                 cmp     htmp, #1    wz
2e26c     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
2e270     07 8E 67 A7 |         if_z    signx   hpar2,#7
2e274     01 EC 87 A1 |         if_z    sub     pa, #1
2e278     02 70 0F F2 |                 cmp     htmp, #2    wz
2e27c     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
2e280     0F 8E 67 A7 |         if_z    signx   hpar2,#15
2e284     02 EC 87 A1 |         if_z    sub     pa, #2
2e288     03 70 0F F2 |                 cmp     htmp, #3    wz
2e28c     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
2e290     04 EC 87 A1 |         if_z    sub     pa, #4
2e294                 | 
2e294     FC 8C 07 F5 |                 and     hpar1, #$FC
2e298                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
2e298                 | 
2e298     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
2e29c     0C 01 90 AD |         if_z    jmp     #.report_id
2e2a0     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
2e2a4     24 01 90 AD |         if_z    jmp     #.usage_page
2e2a8     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
2e2ac     2C 01 90 AD |         if_z    jmp     #.usage
2e2b0     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
2e2b4     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
2e2b8     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
2e2bc     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
2e2c0     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
2e2c4     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
2e2c8     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
2e2cc     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
2e2d0     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
2e2d4     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
2e2d8     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
2e2dc     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
2e2e0     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
2e2e4     64 FF 9F 5D |         if_nz   jmp     #.next
2e2e8                 | 
2e2e8     D8 1D A7 FB |                 tjf     hidr_state,#.next
2e2ec                 | 
2e2ec     03 8E 07 F5 |                 and     hpar2, #$03
2e2f0     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
2e2f4     18 00 90 5D |         if_nz   jmp     #.skip
2e2f8                 | 
2e2f8     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
2e2fc     20 00 90 AD |         if_z    jmp     #.axes
2e300     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
2e304     5C 00 90 AD |         if_z    jmp     #.hats
2e308     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
2e30c     70 00 90 AD |         if_z    jmp     #.buttons
2e310                 | .skip
2e310     8F 71 03 F6 |                 mov     htmp, hidr_size
2e314     90 71 03 FA |                 mul     htmp, hidr_count
2e318     B8 23 03 F1 |                 add     hidr_offset, htmp
2e31c     2C FF 9F FD |                 jmp     #.next
2e320                 | .axes
2e320                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
2e320     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
2e324     90 87 03 F6 |                 mov     hr1, hidr_count
2e328                 | .l1
2e328     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2e32c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2e330     04 03 B0 FD |                 call    #hpad_getbits
2e334     64 03 B0 FD |                 call    #hpad_normalize
2e338     06 84 1F F2 |                 cmp     hr0, #6         wcz
2e33c     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
2e340     00 88 43 C8 |         if_b    getnib  hr2
2e344     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
2e348     5F 01 20 C9 |         if_b    setword retval
2e34c     01 84 07 C1 |         if_b    add     hr0, #1
2e350     8F 23 03 F1 |                 add     hidr_offset, hidr_size
2e354     F4 87 6F FB |                 djnz    hr1, #.l1
2e358                 | 
2e358     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
2e35c     01 1C 07 F6 |                 mov     hidr_state, #1
2e360     E8 FE 9F FD |                 jmp     #.next
2e364                 | .hats
2e364                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
2e364     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2e368     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2e36c     C8 02 B0 FD |                 call    #hpad_getbits
2e370     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
2e374     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2e378     01 1C 07 F6 |                 mov     hidr_state, #1
2e37c     90 FF 9F FD |                 jmp     #.skip
2e380                 | .buttons
2e380                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
2e380     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2e384     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2e388     90 8F 03 FA |                 mul     hpar2, hidr_count
2e38c     A8 02 B0 FD |                 call    #hpad_getbits
2e390     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
2e394     B8 BF 62 F0 |                 shl     retval, htmp
2e398     5F 17 43 F5 |                 or      hidr_buttons, retval
2e39c     90 71 03 F1 |                 add     htmp, hidr_count
2e3a0     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
2e3a4     01 1C 07 F6 |                 mov     hidr_state, #1
2e3a8     64 FF 9F FD |                 jmp     #.skip
2e3ac                 | .report_id
2e3ac     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
2e3b0     2D 00 7C 5D |         if_nz   ret     wcz
2e3b4     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2e3b8     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
2e3bc     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
2e3c0     01 1C 67 56 |         if_nz   neg     hidr_state,#1
2e3c4     01 F2 87 51 |         if_nz   sub     ptrb,#1
2e3c8     80 FE 9F FD |                 jmp     #.next
2e3cc                 | .usage_page
2e3cc     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
2e3d0     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
2e3d4     04 1C 07 A6 |         if_z    mov     hidr_state, #4
2e3d8     70 FE 9F FD |                 jmp     #.next
2e3dc                 | .usage
2e3dc     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
2e3e0     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
2e3e4     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
2e3e8     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2e3ec     5C FE 9F AD |         if_z    jmp     #.next
2e3f0     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
2e3f4     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
2e3f8     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2e3fc     4C FE 9F AD |         if_z    jmp     #.next
2e400     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
2e404     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
2e408     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
2e40c     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
2e410     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
2e414     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
2e418     10 00 90 AD |         if_z    jmp     #.usage_axis
2e41c     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
2e420     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
2e424     03 1C 07 A6 |         if_z    mov     hidr_state, #3
2e428     20 FE 9F FD |                 jmp     #.next
2e42c                 | .usage_axis
2e42c     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
2e430     18 FE 9F CD |         if_b    jmp     #.next
2e434     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
2e438     C7 01 00 F8 |                 setnib  hpar2
2e43c                 | 
2e43c     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
2e440     C7 8F C3 F9 |                 decod   hpar2
2e444     C7 0F 43 F5 |                 or      hidr_flags, hpar2
2e448                 | 
2e448     01 24 07 F1 |                 add     hidr_usage_idx, #1
2e44c     02 1C 07 F6 |                 mov     hidr_state, #2
2e450     F8 FD 9F FD |                 jmp     #.next
2e454                 | 
2e454                 | '------------------------------------------------------------------------------
2e454                 | ' Handle XInput controller
2e454                 | ' On entry:
2e454                 | '   ptrb - controller report
2e454                 | '------------------------------------------------------------------------------
2e454                 | '   Default implementation translates the report to a pseudo-defacto hid
2e454                 | '   standard and jumps to hpad_translate for actions.
2e454                 | '   Implementors may take specific actions for this kind of controller.
2e454                 | '------------------------------------------------------------------------------
2e454                 | hpad_xinput
2e454     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
2e458     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
2e45c     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
2e460     14 70 0F F2 |                 cmp     htmp, #$14      wz
2e464     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
2e468                 | 
2e468                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2e468                 | 
2e468     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
2e46c     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
2e470                 | 
2e470     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
2e474     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
2e478     5F BF 22 F6 |                 not     retval
2e47c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2e480     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
2e484     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
2e488     5F BF 22 F6 |                 not     retval
2e48c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2e490                 | 
2e490     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2e494     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
2e498     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2e49c     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
2e4a0     F8 01 B0 FD |                 call    #hpad_normalize
2e4a4     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
2e4a8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
2e4ac     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2e4b0     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
2e4b4     E4 01 B0 FD |                 call    #hpad_normalize
2e4b8     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
2e4bc                 | 
2e4bc     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2e4c0     81 BF E6 FA |                 rdword  retval, ptrb[1]
2e4c4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2e4c8     00 16 47 F4 |                 bitc    hidr_buttons, #0
2e4cc     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2e4d0     01 16 47 F4 |                 bitc    hidr_buttons, #1
2e4d4     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2e4d8     02 16 47 F4 |                 bitc    hidr_buttons, #2
2e4dc     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2e4e0     03 16 47 F4 |                 bitc    hidr_buttons, #3
2e4e4     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
2e4e8     04 16 47 F4 |                 bitc    hidr_buttons, #4
2e4ec     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
2e4f0     05 16 47 F4 |                 bitc    hidr_buttons, #5
2e4f4     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
2e4f8     08 16 47 F4 |                 bitc    hidr_buttons, #8
2e4fc     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
2e500     09 16 47 F4 |                 bitc    hidr_buttons, #9
2e504     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
2e508     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2e50c     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
2e510     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2e514     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
2e518     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2e51c                 | 
2e51c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2e520     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
2e524     7A BB 7A FF 
2e528     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
2e52c     F9 FF 7F FF 
2e530     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
2e534     B9 71 5F F9 |                 altgn   htmp, #htmp1
2e538     00 70 43 F8 |                 getnib  htmp
2e53c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2e540                 | 
2e540     AC 01 90 FD |                 jmp     #hpad_translate
2e544                 | 
2e544                 | '------------------------------------------------------------------------------
2e544                 | ' Handle PS3 controller
2e544                 | ' On entry:
2e544                 | '   ptrb - controller report
2e544                 | '------------------------------------------------------------------------------
2e544                 | '   Default implementation translates the report to a pseudo-defacto hid
2e544                 | '   standard and jumps to hpad_translate for actions.
2e544                 | '   Implementors may take specific actions for this kind of controller.
2e544                 | '------------------------------------------------------------------------------
2e544                 | hpad_ps3
2e544     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2e548     01 70 0F F2 |                 cmp     htmp, #$01      wz
2e54c     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
2e550                 | 
2e550                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2e550                 | 
2e550     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2e554     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
2e558     40 01 B0 FD |                 call    #hpad_normalize
2e55c     5F 11 23 F9 |                 setword hidr_axis, retval, #0
2e560     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
2e564     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
2e568     30 01 B0 FD |                 call    #hpad_normalize
2e56c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2e570     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
2e574     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
2e578     20 01 B0 FD |                 call    #hpad_normalize
2e57c     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
2e580     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
2e584     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
2e588     10 01 B0 FD |                 call    #hpad_normalize
2e58c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2e590     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
2e594     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
2e598                 | 
2e598     08 8C 07 F6 |                 mov     hpar1, #8
2e59c     13 8E 07 F6 |                 mov     hpar2, #19
2e5a0     94 00 B0 FD |                 call    #hpad_getbits
2e5a4                 | 
2e5a4     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2e5a8     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2e5ac     00 16 47 F4 |                 bitc    hidr_buttons, #0
2e5b0     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2e5b4     01 16 47 F4 |                 bitc    hidr_buttons, #1
2e5b8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2e5bc     02 16 47 F4 |                 bitc    hidr_buttons, #2
2e5c0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2e5c4     03 16 47 F4 |                 bitc    hidr_buttons, #3
2e5c8     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
2e5cc     04 16 47 F4 |                 bitc    hidr_buttons, #4
2e5d0     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
2e5d4     05 16 47 F4 |                 bitc    hidr_buttons, #5
2e5d8     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
2e5dc     06 16 47 F4 |                 bitc    hidr_buttons, #6
2e5e0     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
2e5e4     07 16 47 F4 |                 bitc    hidr_buttons, #7
2e5e8     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
2e5ec     08 16 47 F4 |                 bitc    hidr_buttons, #8
2e5f0     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
2e5f4     09 16 47 F4 |                 bitc    hidr_buttons, #9
2e5f8     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
2e5fc     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2e600     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
2e604     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2e608     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
2e60c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2e610                 | 
2e610     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2e614     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
2e618     09 FA 79 FF 
2e61c     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
2e620     FF FA 7F FF 
2e624     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
2e628     B9 71 5F F9 |                 altgn   htmp, #htmp1
2e62c     00 70 43 F8 |                 getnib  htmp
2e630     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2e634                 | 
2e634     B8 00 90 FD |                 jmp     #hpad_translate
2e638                 | 
2e638                 | '------------------------------------------------------------------------------
2e638                 | ' Read bits from report data buffer
2e638                 | '------------------------------------------------------------------------------
2e638                 | ' On entry:
2e638                 | '   PTRB - report buffer
2e638                 | '   hpar1 - start bit
2e638                 | '   hpar2 - number of bits
2e638                 | ' On exit:
2e638                 | '   retval - bits
2e638                 | '------------------------------------------------------------------------------
2e638                 | hpad_getbits
2e638     C6 71 03 F6 |                 mov     htmp, hpar1
2e63c     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
2e640     F9 71 03 F1 |                 add     htmp, ptrb
2e644     B8 BF 02 FB |                 rdlong  retval, htmp
2e648                 | 
2e648     C6 73 03 F6 |                 mov     htmp1, hpar1
2e64c     07 72 07 F5 |                 and     htmp1, #$07     ' shift
2e650     B9 BF 42 F0 |                 shr     retval, htmp1
2e654                 | 
2e654     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
2e658     10 00 90 1D |         if_a    jmp     #.l1
2e65c                 | 
2e65c     C7 8F C3 F9 |                 decod   hpar2
2e660     01 8E 87 F1 |                 sub     hpar2, #1
2e664     C7 BF 02 F5 |                 and     retval, hpar2
2e668     2D 00 64 FD |                 ret
2e66c                 | .l1
2e66c     FF 7F 00 FF 
2e670     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
2e674     03 70 07 F1 |                 add     htmp, #3
2e678     B8 75 03 FB |                 rdlong  htmp2, htmp
2e67c     18 8E 87 F1 |                 sub     hpar2, #24
2e680     C7 8F C3 F9 |                 decod   hpar2
2e684     01 8E 87 F1 |                 sub     hpar2, #1
2e688     B9 75 43 F0 |                 shr     htmp2, htmp1
2e68c     C7 75 03 F5 |                 and     htmp2, hpar2
2e690     18 74 67 F0 |                 shl     htmp2, #24
2e694     BA BF 42 F5 |                 or      retval, htmp2
2e698     2D 00 64 FD |                 ret
2e69c                 | 
2e69c                 | '------------------------------------------------------------------------------
2e69c                 | ' Normalize value to signed word (-32768 / 32767)
2e69c                 | '------------------------------------------------------------------------------
2e69c                 | ' On entry:
2e69c                 | '   retval - value to normalize
2e69c                 | '   hidr_lminmax - min (word 1) max (word 0) value range
2e69c                 | '   - or -
2e69c                 | '   hidr_pminmax - min (word 1) max (word 0) value range
2e69c                 | '   hidr_size - value bits length
2e69c                 | ' On exit:
2e69c                 | '   retval - normalized value
2e69c                 | '------------------------------------------------------------------------------
2e69c                 | hpad_normalize
2e69c     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
2e6a0     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
2e6a4     2D 00 64 AD |         if_z    ret
2e6a8     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
2e6ac     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
2e6b0     0F 72 77 F7 |                 signx   htmp1, #15      wc
2e6b4     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
2e6b8     00 BE 66 C7 |         if_c    signx   retval, #0-0
2e6bc     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
2e6c0     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
2e6c4     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
2e6c8     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
2e6cc     B8 71 53 F6 |                 abs     htmp            wc
2e6d0     1F BE 0E F4 |                 testb   retval, #31     wz
2e6d4     5F BF 42 F6 |                 abs     retval
2e6d8     B8 BF 12 FD |                 qdiv    retval, htmp
2e6dc     18 BE 62 FD |                 getqx   retval
2e6e0     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
2e6e4     C0 FF 7F FF 
2e6e8     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
2e6ec     2D 00 64 FD |                 ret
2e6f0                 | 
2e6f0                 | '------------------------------------------------------------------------------
2e6f0                 | ' Perform controller actions
2e6f0                 | ' On entry:
2e6f0                 | '    hidr_id        report id
2e6f0                 | '    hidr_axis      axis value (signed word, 2 axes per long)
2e6f0                 | '                      X = hidr_axis+0, #0
2e6f0                 | '                      Y = hidr_axis+0, #1
2e6f0                 | '                      Z = hidr_axis+1, #0
2e6f0                 | '                     RX = hidr_axis+1, #1
2e6f0                 | '                     RY = hidr_axis+2, #0
2e6f0                 | '                     RZ = hidr_axis+2, #1
2e6f0                 | '    hidr_buttons   buttons state (bits 0 to 31)
2e6f0                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
2e6f0                 | '
2e6f0                 | '                     -------3 -------2 -------1 -------0 byte
2e6f0                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
2e6f0                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
2e6f0                 | '                                zyx||| |||||||| ++++++++ n. buttons
2e6f0                 | '                                |||||| ||||++++--------- n. axes
2e6f0                 | '                                |||||| ++++------------- n. hats
2e6f0                 | '                                ++++++------------------ valid axes
2e6f0                 | '------------------------------------------------------------------------------
2e6f0                 | hpad_translate
2e6f0                 | 
2e6f0                 | 
2e6f0                 |         if HAVE_HIDPAD
2e6f0     84 0C F0 FE |                 loc     ptrb,#hidpad_report
2e6f4     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
2e6f8     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
2e6fc     01 70 E7 F2 |                 cmpsub  htmp,#1
2e700     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
2e704     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
2e708     2D 00 7C 3D |         if_ae   ret     wcz
2e70c     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
2e710     B8 F3 03 F1 |                 add     ptrb,htmp
2e714     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2e718     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
2e71c     28 0C 64 FD |                 setq    #7-1
2e720     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
2e724                 |         end
2e724                 | 
2e724                 | 
2e724                 |         if EMUPAD_MAX_PLAYER > 0
2e724                 | .emupad_no_hat
2e724                 |         if EMUPAD_BT0_BIT >= 0
2e724                 |         end
2e724                 |         if EMUPAD_BT1_BIT >= 0
2e724                 |         end
2e724                 |         if EMUPAD_BT2_BIT >= 0
2e724                 |         end
2e724                 |         if EMUPAD_BT3_BIT >= 0
2e724                 |         end
2e724                 |         if EMUPAD_BT4_BIT >= 0
2e724                 |         end
2e724                 |         if EMUPAD_BT5_BIT >= 0
2e724                 |         end
2e724                 |         if EMUPAD_BT6_BIT >= 0
2e724                 |         end
2e724                 |         if EMUPAD_BT7_BIT >= 0
2e724                 |         end
2e724                 |         if EMUPAD_BT8_BIT >= 0
2e724                 |         end
2e724                 |         if EMUPAD_BT9_BIT >= 0
2e724                 |         end
2e724                 | .emupad_slot_over
2e724                 |         end
2e724                 | 
2e724                 |         if 0
2e724                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
2e724                 | 
2e724                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
2e724                 | 
2e724                 |         end
2e724     2D 00 64 FD |                 ret
2e728                 | end
2e728                 | 
2e728                 | if EMUPAD_MAX_PLAYER > 0
2e728                 | '------------------------------------------------------------------------------
2e728                 | ' Clear EmuPad state
2e728                 | '------------------------------------------------------------------------------
2e728                 | emupad_reset
2e728                 | 
2e728                 | '------------------------------------------------------------------------------
2e728                 | ' Get EmuPad Player number for current device (into retval)
2e728                 | ' Z flag is also set if current device is valid
2e728                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
2e728                 | '------------------------------------------------------------------------------
2e728                 | emupad_getnum
2e728                 | .loop
2e728                 | '------------------------------------------------------------------------------
2e728                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
2e728                 | '------------------------------------------------------------------------------
2e728                 | emupad_discon
2e728                 | .loop         
2e728                 |         
2e728                 |         ' FALL THROUGH!!!
2e728                 | 
2e728                 | '------------------------------------------------------------------------------
2e728                 | ' Update EmuPad reports (all of them...)
2e728                 | '------------------------------------------------------------------------------
2e728                 | emupad_write_reports
2e728                 | .devloop
2e728                 | 
2e728                 | end
2e728                 | 
2e728                 | 
2e728                 | '------------------------------------------------------------------------------
2e728                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2e728                 | '------------------------------------------------------------------------------
2e728                 | ' On entry:
2e728                 | ' On exit:
2e728                 | '------------------------------------------------------------------------------
2e728                 | hget_hub_status
2e728     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
2e72c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2e730     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
2e734     01 90 2F F9 |                 setword hpar3, #1, #1
2e738     CF 02 A0 FD |                 call    #do_int_in
2e73c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e740     0C 00 90 AD |         if_z    jmp     #.data
2e744     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2e748     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
2e74c     2D 00 64 FD |                 ret
2e750                 | .data
2e750     00 90 0F F2 |                 cmp     hpar3, #0               wz
2e754     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2e758                 | 
2e758     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
2e75c     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
2e760     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
2e764     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
2e768                 |                 debug(ubin_long(hub_status_chg))
2e768                 | 
2e768     01 5A 06 F6 |                 mov     hdev_port, #1
2e76c                 | .loop
2e76c     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
2e770     0C 00 B0 AD |         if_x1   call    #hub_port_handler
2e774     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
2e778     F0 FF 9F 3D |         if_nc   jmp     #.loop
2e77c     2D 00 64 FD |                 ret
2e780                 | 
2e780                 | hub_port_handler
2e780     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
2e784     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2e788     27 EF 03 F6 |                 mov     pb, urx_buff_p
2e78c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2e790     55 02 A0 FD |                 call    #control_read
2e794     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2e798                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2e798                 | 
2e798     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
2e79c     50 01 90 5D |         if_x0   jmp     #.other
2e7a0     68 02 D0 FE |                 loc     ptra, #clr_port_feat
2e7a4     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
2e7a8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2e7ac     A0 02 A0 FD |                 call    #control_write
2e7b0     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
2e7b4     7C 01 90 5D |         if_x0   jmp     #.disconnect
2e7b8     B0 99 02 F6 |                 mov     hctwait, _100ms_
2e7bc     EF 02 A0 FD |                 call    #poll_waitx
2e7c0                 | 
2e7c0     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
2e7c4     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
2e7c8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2e7cc     A0 02 A0 FD |                 call    #control_write
2e7d0                 | 
2e7d0     02 76 07 F6 |                 mov     htmp3, #2
2e7d4                 | .wait_reset
2e7d4     AC 99 02 F6 |                 mov     hctwait, _8ms_
2e7d8     EF 02 A0 FD |                 call    #poll_waitx
2e7dc     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2e7e0     27 EF 03 F6 |                 mov     pb, urx_buff_p
2e7e4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2e7e8     55 02 A0 FD |                 call    #control_read
2e7ec     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2e7f0     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
2e7f4     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
2e7f8                 | 
2e7f8     10 02 D0 FE |                 loc     ptra, #clr_port_feat
2e7fc     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
2e800     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2e804     A0 02 A0 FD |                 call    #control_write
2e808                 | 
2e808     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
2e80c                 | .wait_recover
2e80c     A7 99 02 F6 |                 mov     hctwait, _1ms_
2e810     EF 02 A0 FD |                 call    #poll_waitx
2e814     FD 71 6F FB |                 djnz    htmp,#.wait_recover
2e818                 | 
2e818     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2e81c     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2e820     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2e824                 | 
2e824     00 08 00 FF 
2e828     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2e82c     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
2e830     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2e834     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2e838     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2e83c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e840     48 01 90 5D |         if_nz   jmp     #.done
2e844                 | .get_dev_desc
2e844     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2e848     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2e84c     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2e850     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
2e854     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
2e858     01 71 57 FC |                 wrword  htmp, ptra[wValue]
2e85c     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
2e860     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e864     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2e868     AC 99 02 F6 |                 mov     hctwait, _8ms_
2e86c     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2e870     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
2e874     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
2e878     BE 00 A0 FD |                 call    #calc_crc5
2e87c     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
2e880     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2e884     F7 AD C2 FA |                 rdbyte  total_data, pb
2e888     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2e88c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2e890     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e894     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2e898     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2e89c     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2e8a0                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2e8a0     9F 99 02 F6 |                 mov     hctwait, _500us_
2e8a4     EF 02 A0 FD |                 call    #poll_waitx
2e8a8     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
2e8ac     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2e8b0     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2e8b4     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2e8b8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e8bc     CC 00 90 5D |         if_nz   jmp     #.done
2e8c0     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2e8c4     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2e8c8     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2e8cc     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2e8d0     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2e8d4     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2e8d8     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2e8dc     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2e8e0     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2e8e4     A4 00 90 CD |         if_b    jmp     #.done
2e8e8     6C F0 BF FD |                 call    #hparse_con_desc
2e8ec     9C 00 90 FD |                 jmp     #.done
2e8f0                 | 
2e8f0                 | .other
2e8f0     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
2e8f4     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
2e8f8     28 00 90 AD |         if_x1   jmp     #.reset_feature
2e8fc     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
2e900     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
2e904     1C 00 90 AD |         if_x1   jmp     #.reset_feature
2e908     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
2e90c     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
2e910     10 00 90 AD |         if_x1   jmp     #.reset_feature
2e914     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
2e918     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
2e91c     04 00 90 AD |         if_x1   jmp     #.reset_feature
2e920     68 00 90 FD |                 jmp     #.done
2e924                 | .reset_feature
2e924     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
2e928     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2e92c     A0 02 A0 FD |                 call    #control_write
2e930     58 00 90 FD |                 jmp     #.done
2e934                 | .disconnect
2e934                 | 
2e934     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2e938     00 70 E3 F8 |                 getbyte htmp
2e93c     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
2e940     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
2e944     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
2e948     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
2e94c     00 76 06 A6 |         if_z    mov     kb_led_states, #0
2e950     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
2e954                 |         if EMUPAD_MAX_PLAYER > 0
2e954                 |         end
2e954                 |         if HAVE_MOUSE
2e954     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2e958     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
2e95c     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
2e960                 |         end
2e960                 |         if HAVE_HIDPAD
2e960     14 0A F0 FE |                 loc ptrb,#hidpad_report
2e964     2D 71 03 F6 |                 mov htmp,hdev_port
2e968     01 70 E7 F2 |                 cmpsub htmp,#1
2e96c     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
2e970     B8 F3 03 F1 |                 add ptrb,htmp
2e974     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
2e978     80 01 6C FC |                 wrlong #0,ptrb
2e97c                 |         end
2e97c                 | 
2e97c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2e980     00 00 C4 F8 |                 setbyte #0
2e984     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2e988     00 00 04 F6 |                 mov     0-0, #0
2e98c                 | 
2e98c                 | .done
2e98c     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
2e990     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2e994     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2e998     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
2e99c     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2e9a0     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2e9a4                 | 
2e9a4     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2e9a8     27 EF 03 F6 |                 mov     pb, urx_buff_p
2e9ac     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2e9b0     55 02 A0 FD |                 call    #control_read
2e9b4     00 69 06 FB |                 rdlong  hub_port_status, ptra
2e9b8                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2e9b8     2D 00 64 FD |                 ret
2e9bc                 | 
2e9bc                 | '------------------------------------------------------------------------------
2e9bc                 | ' Partially populated SETUP packets
2e9bc                 | '------------------------------------------------------------------------------
2e9bc     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2e9bd     06          |                 byte    REQ_GET_DESC
2e9be     00 01       |                 word    TYPE_DEVICE << 8
2e9c0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2e9c2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2e9c4     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2e9c5     06          |                 byte    REQ_GET_DESC
2e9c6     00 02       |                 word    TYPE_CONFIG << 8
2e9c8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2e9ca     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2e9cc     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2e9cd     09          |                 byte    REQ_SET_CONFIG
2e9ce     00 00       |                 word    0       ' Configuration value
2e9d0     00 00       |                 word    0       ' Zero
2e9d2     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
2e9d4     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2e9d5     05          |                 byte    REQ_SET_ADDR
2e9d6     00 00       |                 word    0       ' Zero
2e9d8     00 00       |                 word    0       ' Zero
2e9da     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
2e9dc                 | '------------------------------------------------------------------------------
2e9dc                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
2e9dc                 | ' wValue field dictates which protocol should be used.
2e9dc                 | '
2e9dc                 | ' When initialized, all devices default to report protocol. However the host
2e9dc                 | ' should not make any assumptions about the device state and should set the
2e9dc                 | ' desired protocol whenever initializing a device.
2e9dc                 | '------------------------------------------------------------------------------
2e9dc     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2e9dd     0B          |                 byte    HID_SET_PROTO
2e9de     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
2e9e0                 |                                                 ' (HID 1.11 Section 7.2.6).
2e9e0     00 00       |                 word    0               ' Interface index number.
2e9e2     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
2e9e4                 | '------------------------------------------------------------------------------
2e9e4     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2e9e5     0A          |                 byte    HID_SET_IDLE
2e9e6     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
2e9e8                 |                                         ' reporting until a change is detected in the report data
2e9e8                 | 
2e9e8                 |                                         ' (HID 1.11 Section 7.2.4).
2e9e8     00 00       |                 word    0       ' Interface index number.
2e9ea     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
2e9ec     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2e9ed     09          |                 byte    HID_SET_REPORT
2e9ee     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
2e9f0                 |                                         ' (HID 1.11 Section 7.2.2).
2e9f0     00 00       |                 word    0       ' Interface index number.
2e9f2     00 00       |                 word    0       ' Size of the report, in bytes.
2e9f4     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
2e9f5     06          |                 byte    REQ_GET_DESC
2e9f6     00 22       |                 word    TYPE_REPORT << 8
2e9f8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2e9fa     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2e9fc                 | '------------------------------------------------------------------------------
2e9fc     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
2e9fd     06          |                 byte    REQ_GET_DESC
2e9fe     00 29       |                 word    TYPE_HUB << 8
2ea00     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2ea02     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2ea04     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2ea05     03          |                 byte    REQ_SET_FEATURE
2ea06     00 00       |                 word    0       ' port power
2ea08     01 00       |                 word    1       ' Port index number (1+)
2ea0a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2ea0c     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2ea0d     01          |                 byte    REQ_CLEAR_FEATURE
2ea0e     00 00       |                 word    0       ' port power
2ea10     01 00       |                 word    1       ' Port index number (1+)
2ea12     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2ea14     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
2ea15     00          |                 byte    REQ_GET_STATUS
2ea16     00 00       |                 word    0
2ea18     01 00       |                 word    1       ' Port index number (1+)
2ea1a     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
2ea1c                 | '------------------------------------------------------------------------------
2ea1c                 | if _HAVE_GAMEPAD
2ea1c     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
2ea20                 | ps3_command_buff
2ea20     00 00 00 00 
2ea24     00          |                 byte    $00, $00, $00, $00, $00
2ea25     00 00 00 00 
2ea29     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
2ea2a     FF 27 10 00 
2ea2e     32          |                 byte    $FF, $27, $10, $00, $32
2ea2f     FF 27 10 00 
2ea33     32          |                 byte    $FF, $27, $10, $00, $32
2ea34     FF 27 10 00 
2ea38     32          |                 byte    $FF, $27, $10, $00, $32
2ea39     FF 27 10 00 
2ea3d     32          |                 byte    $FF, $27, $10, $00, $32
2ea3e     00 00 00 00 
2ea42     00          |                 byte    $00, $00, $00, $00, $00
2ea43     00 00 00 00 
2ea47     00          |                 byte    $00, $00, $00, $00, $00
2ea48     00 00 00 00 
2ea4c     00          |                 byte    $00, $00, $00, $00, $00
2ea4d     00 00 00    |                 byte    $00, $00, $00
2ea50                 | '------------------------------------------------------------------------------
2ea50     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
2ea53                 |                                         ' 0x01 All blinking
2ea53                 |                                         ' 0x02 1 flashes, then on
2ea53                 |                                         ' 0x03 2 flashes, then on
2ea53                 |                                         ' 0x04 3 flashes, then on
2ea53                 |                                         ' 0x05 4 flashes, then on
2ea53                 |                                         ' 0x06 1 on
2ea53                 |                                         ' 0x07 2 on
2ea53                 |                                         ' 0x08 3 on
2ea53                 |                                         ' 0x09 4 on
2ea53                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
2ea53                 |                                         ' 0x0B Blinking*
2ea53                 |                                         ' 0x0C Slow blinking*
2ea53                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
2ea53     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
2ea56     00          |                 byte    $00             ' Left rumble
2ea57     00          |                 byte    $00             ' Right rumble
2ea58     00 00 00    |                 byte    $00, $00, $00
2ea5b     00          | end
2ea5c                 | alignl
2ea5c                 | 
2ea5c                 | if HAVE_MOUSE
2ea5c     00 00 00 00 
2ea60     00 00 00 00 | mouse_limits long 0[2]
2ea64     00 00 00 00 | mouse_outptr long 0
2ea68                 | end
2ea68                 | 
2ea68                 | if KEYQUEUE_SIZE > 0
2ea68     00          | keyq_head byte 0
2ea69     00          | keyq_tail byte 0
2ea6a     00 00 00 00 
      ...             
2ec66     00 00 00 00 
2ec6a     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
2ec6c                 | alignl
2ec6c                 | end
2ec6c                 | 
2ec6c                 | if EMUPAD_MAX_PLAYER > 0
2ec6c                 | emupad_rule_buffer
2ec6c                 | if EMUPAD_BUILTIN_RULES
2ec6c                 | file "padmap_builtin.dat"
2ec6c                 | end
2ec6c                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
2ec6c                 | '' Default rule directly follows!
2ec6c                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
2ec6c                 | end
2ec6c                 | 
2ec6c                 | '------------------------------------------------------------------------------
2ec6c                 | ' The USB data cache area gets zero-filled at every device disconnect
2ec6c                 | '------------------------------------------------------------------------------
2ec6c                 | usb_cache_start
2ec6c                 | 
2ec6c                 | ' HID descriptor and report buffers
2ec6c                 | if !!OVERLAP_MEMORY
2ec6c     00 00 00 00 
      ...             
2f364     00 00 00 00 
2f368     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
2f36c                 | end
2f36c     00 00 00 00 
2f370     00 00 00 00 | hkbd_report     byte    0[8]
2f374     00 00 00 00 | hkbd_led_rep    byte    0
2f378                 | alignl
2f378                 | 
2f378                 | if HAVE_HIDPAD
2f378     00 00 00 00 
      ...             
2f434     00 00 00 00 
2f438     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
2f43c                 | end
2f43c                 | 
2f43c                 | ' HUB descriptor
2f43c     00          | hub_descr       byte    0   ' bDescLength
2f43d     00          |                 byte    0   ' bDescriptorType
2f43e     00          |                 byte    0   ' bNbrPorts
2f43f     00 00       |                 word    0   ' wHubCharacteristics
2f441     00          |                 byte    0   ' bPwrOn2PwrGood
2f442     00          |                 byte    0   ' bHubContrCurrent
2f443     00          |                 byte    0   ' DeviceRemoveable
2f444     00          |                 byte    0   ' PortPwrCtrlMask
2f445                 | 
2f445                 | usb_cache_end
2f445                 | 
2f445                 | if HAVE_MOUSE
2f445     00 00 00 00 | mouse_xacc      long 0
2f449     00 00 00 00 | mouse_yacc      long 0
2f44d     00 00 00 00 | mouse_zacc      long 0
2f451     00          | mouse_bstate    byte 0
2f452     00          | mouse_lpending  byte 0
2f453     00          | mouse_rpending  byte 0
2f454     00          | mouse_mpending  byte 0
2f455     00          | mouse_lock      byte 0
2f456     00 00 00    |                 byte 0[3] ' padding
2f459                 | end
2f459                 | 
2f459     00 00 00 00 
      ...             
2f4d1     00 00 00 00 
2f4d5     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
2f4d9     00 00 00 00 
2f4dd     00 00 00 00 
2f4e1     00 00 00 00 
2f4e5     00 00 00 00 
2f4e9     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
2f4eb     00 00 00 00 
      ...             
2f5e3     00 00 00 00 
2f5e7     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
2f5eb                 | 
2f5eb     00          | driver_cog      byte    0                       ' Current driver cog + 1
2f5ec                 | 	alignl
2f5ec                 | _Audio093b_8_sc_spin2_dat_
2f5ec                 | 
2f5ec                 | audio       org     0
2f5ec                 | 
2f5ec     61 85 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
2f5f0     61 C3 05 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
2f5f4     61 CF 05 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
2f5f8                 | 
2f5f8     01 EC 63 FD |             cogid   pa                   ' compute cogid
2f5fc     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
2f600     F6 85 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
2f604     C2 82 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
2f608                 | 
2f608     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
2f60c     0E CA 05 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/100
2f610     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
2f614     0F CA 05 FC |             wrpin   dac,#right
2f618     0F BE 1C FC |             wxpin   #95,#right    
2f61c     41 9C 64 FD |             dirh    #left addpins 1
2f620     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
2f624     A9 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
2f628     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
2f62c                 |             
2f62c                 | '---------------------------------------------------------------------------------        
2f62c                 | '----------------- The main loop -------------------------------------------------
2f62c                 | '---------------------------------------------------------------------------------
2f62c                 | 
2f62c     B2 66 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
2f630     10 00 90 CD |       if_c  jmp     #loop1
2f634                 |   
2f634     09 A8 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
2f638     B2 A8 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
2f63c     B1 00 80 F1 |             sub     0-0,a40000000
2f640     FD A9 6D FB |             djnz    cn,#p402
2f644                 |     
2f644     00 A8 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
2f648     B4 AA 01 F6 |             mov     ct,time1            ' with the lowest next sample time
2f64c     B5 AA 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
2f650     01 A8 05 C6 |     if_c    mov     cn,#1
2f654     B6 AA 39 F3 |             fle     ct,time3 wcz
2f658     02 A8 05 C6 |     if_c    mov     cn,#2     
2f65c     B7 AA 39 F3 |             fle     ct,time4 wcz
2f660     03 A8 05 C6 |     if_c    mov     cn,#3
2f664     B8 AA 39 F3 |             fle     ct,time5 wcz
2f668     04 A8 05 C6 |     if_c    mov     cn,#4
2f66c     B9 AA 39 F3 |             fle     ct,time6 wcz
2f670     05 A8 05 C6 |     if_c    mov     cn,#5
2f674     BA AA 39 F3 |             fle     ct,time7 wcz
2f678     06 A8 05 C6 |     if_c    mov     cn,#6
2f67c     BB AA 39 F3 |             fle     ct,time8 wcz
2f680     07 A8 05 C6 |     if_c    mov     cn,#7
2f684                 | 
2f684                 | 
2f684                 | '----------------------------------------------------------------------------------
2f684                 | '------------- Compute channel samples --------------------------------------------
2f684                 | '----------------------------------------------------------------------------------
2f684                 | 
2f684                 | 
2f684     D4 78 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
2f688     05 78 65 F0 |             shl     channeladd,#5
2f68c     BC F0 03 F1 |             add     ptra,channeladd
2f690                 | 
2f690     28 0E 64 FD |             setq    #7                        ' read parameters
2f694     00 8F 05 FB |             rdlong  pointer0,ptra
2f698                 | '            testb   command0,#29 wz
2f698                 | '    if_nz   jmp     #p408
2f698                 | '    	    getword envptr,command0,#0
2f698                 | '    	    getbyte envspeed,command0,#2
2f698                 | '    	    jmp     #p404                     'if envelope then no sample rate
2f698                 |     	    
2f698     1F 9C 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
2f69c     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
2f6a0     CE 7C 31 F9 |             getword qq,command0,#0            ' get the new rate
2f6a4     4E 7C 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
2f6a8     BE 7C E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
2f6ac     00 7C 0D F2 |             cmp     qq,#0 wz                         
2f6b0     4E CC 05 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
2f6b4     4E CA 05 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
2f6b8                 |             
2f6b8     1E 9C 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
2f6bc     C2 82 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
2f6c0     00 82 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
2f6c4                 | 
2f6c4                 | 
2f6c4     C8 AE 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
2f6c8     C8 B0 39 F9 |             getword oldrs,sample0,#1
2f6cc     CC A4 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
2f6d0     CC A2 31 F9 |     	    getword avol0,volpan0,#0
2f6d4     CD A0 39 F9 |             getword askip0,freqskip0,#1    	    
2f6d8     CD 9E 31 F9 |             getword afreq0,freqskip0,#0
2f6dc                 | 
2f6dc     B4 A8 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
2f6e0     00 AC 01 F6 |             mov     dt0,0-0    
2f6e4     B3 AC 81 F1 |             sub     dt0,time0
2f6e8                 |             
2f6e8     B4 A8 8D F9 |             altd    cn, #time1                ' add channel period to channel time
2f6ec     CF 00 00 F1 |             add     0-0,afreq0  	
2f6f0                 | 
2f6f0     D0 8E 01 F1 |             add     pointer0,askip0           ' compute the pointer to the next sample       
2f6f4     C7 EA C1 F8 |             setbyte pointer00,pointer0,#0
2f6f8     08 8E 45 F0 |             shr     pointer0,#8
2f6fc                 |          
2f6fc     1F 92 0D F4 |             testb   sstart0,#31 wz            
2f700     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2f704     1C 92 0D F4 |             testb   sstart0,#28 wz            
2f708     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2f70c                 |             
2f70c     CB 8E 19 F2 |             cmp     pointer0,lend0 wcz
2f710     CB 8E 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
2f714     CA 8E 01 31 |     if_ge   add     pointer0,lstart0       
2f718                 |             
2f718     C7 7C 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
2f71c     C9 7C 01 F1 |             add     qq,sstart0            
2f720                 | 
2f720                 | 
2f720                 | 
2f720     FF 83 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
2f724     BE 7E E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
2f728     04 01 B0 1D |     if_gt   call    #cache_read
2f72c                 |          
2f72c                 |          
2f72c                 |  
2f72c                 |          
2f72c     1F 92 0D F4 |             testb   sstart0,#31 wz 
2f730     08 7E 65 50 |     if_nz   shl     spl,#8
2f734     08 8E 65 50 |     if_nz   shl     pointer0,#8
2f738     07 8E 65 A0 |     if_z    shl     pointer0,#7
2f73c     1C 92 0D F4 |             testb   sstart0,#28 wz            
2f740     01 8E 45 A0 |     if_z    shr     pointer0,#1    
2f744     F5 8E C1 F8 | 	    setbyte pointer0,pointer00,#0       
2f748                 |     
2f748                 | 
2f748     D1 7E 31 FA | p406        scas    spl,avol0                 ' apply volume
2f74c     00 7E 01 F6 |             mov     spl,0-0
2f750                 |  
2f750     D2 7E 31 FA |             scas    spl,apan0                 ' apply pan
2f754     00 B2 01 F6 |             mov     ls0,0-0
2f758     20 00 00 FF 
2f75c     00 7C 05 F6 |             mov     qq,##16384
2f760     D2 7C 81 F1 |             sub     qq,apan0
2f764     BE 7E 31 FA |             scas    spl,qq
2f768     00 B4 01 F6 |             mov     rs0, 0-0
2f76c                 | 
2f76c     D8 B8 81 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
2f770     DA B8 01 F1 |             add     rs,rs0
2f774     D7 B6 81 F1 |             sub     ls,oldls
2f778     D9 B6 01 F1 |             add     ls,ls0
2f77c                 |    
2f77c     DA 90 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
2f780     D9 90 21 F9 |             setword sample0,ls0,#0
2f784                 |             
2f784     1E 92 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointer needs resetting  
2f788     00 8E 05 A6 |     if_z    mov     pointer0, #0  
2f78c     02 93 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
2f790     1D 92 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
2f794     04 00 00 AF 
2f798     00 68 05 A1 |     if_z    add     time1,##2048
2f79c     B4 6A 01 A6 |     if_z    mov     time2,time1
2f7a0     02 93 65 AC |     if_z    wrlong  sstart0,ptra[2]
2f7a4                 |             
2f7a4     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
2f7a8     00 8F 65 FC |             wrlong  pointer0,ptra
2f7ac     BC F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
2f7b0                 |                       
2f7b0     B3 A6 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
2f7b4     FF 7B 25 A7 |     if_z    decmod  front, #511          
2f7b8                 |          
2f7b8     DB AE 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
2f7bc     DC B0 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
2f7c0     0F AE E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
2f7c4     0F B0 E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
2f7c8                 | 	    
2f7c8                 | 		    
2f7c8     D7 B0 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
2f7cc     DE BA 01 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
2f7d0     D8 BC 01 F6 |             mov     newsample, oldrs       
2f7d4                 | 
2f7d4     B3 A6 01 F6 |             mov     oldt0,time0              ' update global time
2f7d8     D6 66 01 F1 |             add     time0,dt0    
2f7dc                 |                                      
2f7dc     00 AC 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
2f7e0     60 FE 9F AD |     if_z    jmp     #loop1
2f7e4     D6 7C 01 F6 |             mov     qq,dt0
2f7e8                 |   
2f7e8     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
2f7ec     00 7A 9D F2 |             cmpr    front, #0-0 wcz
2f7f0     F4 FF 9F AD |     if_e    jmp     #p301    
2f7f4                 | 		
2f7f4     00 C2 0D F2 | 	    cmp     scbase,#0 wz
2f7f8     20 00 90 AD |     if_z    jmp #p302	   
2f7fc                 |  
2f7fc                 |  
2f7fc     3F C8 15 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
2f800     E2 C6 01 C6 |     if_c    mov scptr2,scptr
2f804     02 C6 65 C0 |     if_c    shl scptr2,#2
2f808     E1 C6 01 C1 |     if_c    add scptr2,scbase     
2f80c     60 C6 65 FC |             wrlong scptr2,#$60
2f810     E3 BA 61 CC |     if_c    wrlong oldsample,scptr2
2f814     01 00 00 CF 
2f818     7F C4 05 C7 |     if_c    incmod scptr,##639
2f81c                 | 			    
2f81c     BD BA 31 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
2f820     00 00 00 FF 
2f824     FF 7B 05 F7 |             incmod  front, ##511
2f828     EF 7D 6D FB |             djnz    qq,#p301
2f82c                 |             
2f82c     FC FD 9F FD |             jmp     #loop            'loop
2f830                 | 
2f830                 | '----------------------------------------------------------------------------------
2f830                 | '------------- This is the end of the main loop -----------------------------------
2f830                 | '----------------------------------------------------------------------------------
2f830                 | 
2f830                 | '----------------------------------------------------------------------------------
2f830                 | '------------- PSRAM cache ----------- --------------------------------------------
2f830                 | '----------------------------------------------------------------------------------
2f830                 | 
2f830                 | ' There are 8 cache pointers for 8 channels
2f830                 | ' if 24 higher bits of address=cache, then ger a word from the cache
2f830                 | ' else load the cache from PSRAM, update the pointer, then read a sample
2f830                 | 
2f830                 | 
2f830     BE E6 E1 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
2f834                 |             
2f834     BE E8 01 F6 | 	    mov     addrhi,qq		
2f838     08 E8 45 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
2f83c     E8 A8 95 F9 | 	    alts    cn,#cache1            
2f840     00 E8 09 F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
2f844     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
2f848                 | 	
2f848     E8 A8 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
2f84c     F4 00 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
2f850     F4 E0 01 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
2f854     08 E0 65 F0 | 	    shl     cmd,#8
2f858     0B E0 3D F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
2f85c     D4 E2 01 F6 |             mov     hubaddr,cn                  ' to the channel cache
2f860     08 E2 65 F0 |             shl     hubaddr,#8                  '
2f864     E7 E2 01 F1 |             add     hubaddr,hubptr 
2f868     00 E5 05 F6 |             mov     count,#256                  ' 256 bytes
2f86c     28 04 64 FD |             setq    #2                          ' write 3 longs
2f870     C1 E0 61 FC |             wrlong  cmd, mailbox                ' run it
2f874     C1 E0 01 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
2f878     FE E1 B5 FB |             tjs     cmd, #poll1                 ' retry until valid 
2f87c                 |             
2f87c                 | 	
2f87c     D4 7C 01 F6 | p701	    mov     qq,cn			' cache hit
2f880     08 7C 65 F0 | 	    shl     qq,#8			' compute the cache start
2f884     E7 7C 01 F1 | 	    add     qq,hubptr
2f888     F3 7C 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
2f88c     BE 7E E1 0A |     _ret_   rdword  spl,qq                      ' read a word
2f890                 |           
2f890                 | 
2f890                 | '--------------------------------------------------------------------------
2f890                 | '------ Interrupt service -------------------------------------------------
2f890                 | '------ Output the sample, get the next one if exists ---------------------
2f890                 | '--------------------------------------------------------------------------
2f890                 | 
2f890     0E 86 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
2f894     0F 88 25 FC |             wypin   rsample,#right       '4
2f898     BD F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
2f89c     80 8B A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
2f8a0     FF F3 07 57 |     if_ne   incmod  ptrb,#511
2f8a4     C5 88 39 59 |     if_ne   getword rsample,lsnext,#1    '13
2f8a8     C5 86 31 59 |     if_ne   getword lsample,lsnext,#0    '15
2f8ac                 |     
2f8ac     F5 FF 3B FB |             reti1                        '17/19 
2f8b0                 |           
2f8b0                 | '---------------------------------------------------------------------------
2f8b0                 | '-------- End of interrupt -------------------------------------------------
2f8b0                 | '---------------------------------------------------------------------------    
2f8b0                 | 
2f8b0                 | 
2f8b0                 | '---------------------------------------------------------------------------
2f8b0                 | '------- Variables ---------------------------------------------------------
2f8b0                 | '---------------------------------------------------------------------------
2f8b0                 | 
2f8b0                 | ' constants
2f8b0                 | 
2f8b0     00 00 00 40 | a40000000   long $40000000
2f8b4     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
2f8b8                 | 
2f8b8                 | ' Time variables
2f8b8                 | 
2f8b8     00 00 00 00 | time0       long 0    ' Global sample computing time
2f8bc     01 00 00 00 | time1       long 1    ' Local channels time
2f8c0     02 00 00 00 | time2       long 2
2f8c4     03 00 00 00 | time3       long 3
2f8c8     04 00 00 00 | time4       long 4
2f8cc     05 00 00 00 | time5       long 5
2f8d0     06 00 00 00 | time6       long 6
2f8d4     07 00 00 00 | time7       long 7
2f8d8     08 00 00 00 | time8       long 8
2f8dc                 | 
2f8dc     00 00 00 00 | channeladd long 0
2f8e0                 | 
2f8e0     00 00 00 00 | front       long 0
2f8e4                 | 
2f8e4                 | ' temporary variables 
2f8e4     00 00 00 00 | qq          long 0
2f8e8     00 00 00 00 | spl         long 0
2f8ec     00 00 00 00 | zero        long 0
2f8f0     00 00 00 00 | mailbox     long 0
2f8f4     00 00 00 00 | mailbox2 long 0
2f8f8                 | 
2f8f8                 | ' Interrupt ISR variables
2f8f8                 | 
2f8f8     00 00 00 00 | lsample     long 0
2f8fc     00 00 00 00 | rsample     long 0
2f900     00 00 00 00 | lsnext      long 0
2f904     00 00 00 00 | rsnext      long 0 
2f908                 | 
2f908                 | ' channel parameter block
2f908                 | 
2f908     00 00 00 00 | pointer0    long 0     
2f90c     00 00 00 00 | sample0     long 0
2f910     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
2f914     00 00 00 00 | lstart0     long 0
2f918     00 00 00 00 | lend0       long 0
2f91c     00 00 00 00 | volpan0     long 0
2f920     00 00 00 00 | freqskip0   long 0
2f924     00 00 00 00 | command0    long 0
2f928                 | 
2f928     00 00 00 00 | afreq0      long 0
2f92c     00 00 00 00 | askip0      long 0
2f930     00 00 00 00 | avol0       long 0
2f934     00 00 00 00 | apan0       long 0
2f938                 | 
2f938     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
2f93c     00 00 00 00 | cn          long 0
2f940     00 00 00 00 | ct          long 0
2f944     00 00 00 00 | dt0         long 0
2f948                 | 
2f948                 | ' Samples
2f948     00 00 00 00 | oldls       long 0
2f94c     00 00 00 00 | oldrs       long 0
2f950                 | 
2f950     00 00 00 00 | ls0         long 0
2f954     00 00 00 00 | rs0         long 0
2f958                 | 
2f958     00 00 00 00 | ls          long 0    
2f95c     00 00 00 00 | rs          long 0
2f960                 | 
2f960     00 00 00 00 | oldsample   long 0
2f964     00 00 00 00 | newsample   long 0
2f968                 | 
2f968     00 00 00 00 | nrsample    long 0
2f96c     00 00 00 00 | nlsample    long 0
2f970                 | 
2f970     00 00 00 00 | scbase long 0
2f974     00 00 00 00 | scptr long 0
2f978     00 00 00 00 | scptr2 long 0
2f97c     00 00 00 00 | scope long 0
2f980                 | 
2f980     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
2f984     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
2f988                 | 
2f988     00 18 07 00 | hubptr      long $71800
2f98c     00 00 00 00 | cache1      long 0
2f990     00 00 00 00 | cache2      long 0
2f994     00 00 00 00 | cache3      long 0
2f998     00 00 00 00 | cache4      long 0
2f99c     00 00 00 00 | cache5      long 0
2f9a0     00 00 00 00 | cache6      long 0
2f9a4     00 00 00 00 | cache7      long 0
2f9a8     00 00 00 00 | cache8      long 0
2f9ac                 | 
2f9ac                 | 
2f9ac     00 00 00 00 | cmd         long 0
2f9b0     00 00 00 00 | hubaddr     long 0
2f9b4     00 01 00 00 | count       long 256
2f9b8     00 00 00 00 | addrlo long 0
2f9bc     00 00 00 00 | addrhi long 0
2f9c0     00 00 00 00 | pointer00 long 0
2f9c4     00 00 00 00 
2f9c8     00 00 00 00 | null  			long 	0,0           ' for channel reset
2f9cc                 | 	alignl
2f9cc                 | __system__dat_
2f9cc     00 00 00 00 
2f9d0     00 00 00 00 | 	byte	$00[8]
2f9d4     03 00 00 00 
2f9d8     00 00 00 00 
2f9dc     00 00 00 00 
2f9e0     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f9e4     00 00 00 00 
      ...             
2fc70     00 00 00 00 
2fc74     00 00 00 00 | 	byte	$00[660]
2fc78     00 00 F0 05 | 	long	(95 {__system____root_opendir})<<20
2fc7c     00 00 00 06 | 	long	(96 {__system____root_closedir})<<20
2fc80     00 00 10 06 | 	long	(97 {__system____root_readdir})<<20
2fc84     00 00 20 06 | 	long	(98 {__system____root_stat})<<20
2fc88     00 00 00 00 
2fc8c     00 00 00 00 
2fc90     00 00 00 00 
2fc94     00 00 00 00 
2fc98     00 00 00 00 
2fc9c     00 00 00 00 
2fca0     00 00 00 00 | 	byte	$00[28]
2fca4     0C FD 02 00 | 	long	@@@__system__dat_ + 832
2fca8     0F FD 02 00 | 	long	@@@__system__dat_ + 835
2fcac     30 FD 02 00 | 	long	@@@__system__dat_ + 868
2fcb0     49 FD 02 00 | 	long	@@@__system__dat_ + 893
2fcb4     64 FD 02 00 | 	long	@@@__system__dat_ + 920
2fcb8     7E FD 02 00 | 	long	@@@__system__dat_ + 946
2fcbc     8E FD 02 00 | 	long	@@@__system__dat_ + 962
2fcc0     A0 FD 02 00 | 	long	@@@__system__dat_ + 980
2fcc4     B2 FD 02 00 | 	long	@@@__system__dat_ + 998
2fcc8     C4 FD 02 00 | 	long	@@@__system__dat_ + 1016
2fccc     D0 FD 02 00 | 	long	@@@__system__dat_ + 1028
2fcd0     E1 FD 02 00 | 	long	@@@__system__dat_ + 1045
2fcd4     F5 FD 02 00 | 	long	@@@__system__dat_ + 1065
2fcd8     FF FD 02 00 | 	long	@@@__system__dat_ + 1075
2fcdc     0F FE 02 00 | 	long	@@@__system__dat_ + 1091
2fce0     1E FE 02 00 | 	long	@@@__system__dat_ + 1106
2fce4     34 FE 02 00 | 	long	@@@__system__dat_ + 1128
2fce8     4D FE 02 00 | 	long	@@@__system__dat_ + 1153
2fcec     61 FE 02 00 | 	long	@@@__system__dat_ + 1173
2fcf0     6F FE 02 00 | 	long	@@@__system__dat_ + 1187
2fcf4     83 FE 02 00 | 	long	@@@__system__dat_ + 1207
2fcf8     8F FE 02 00 | 	long	@@@__system__dat_ + 1219
2fcfc     A1 FE 02 00 | 	long	@@@__system__dat_ + 1237
2fd00     B9 FE 02 00 | 	long	@@@__system__dat_ + 1261
2fd04     CB FE 02 00 | 	long	@@@__system__dat_ + 1279
2fd08     DE FE 02 00 | 	long	@@@__system__dat_ + 1298
2fd0c     4F 4B 00 4E 
2fd10     75 6D 65 72 
2fd14     69 63 61 6C 
2fd18     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
2fd1c     75 6D 65 6E 
2fd20     74 20 6F 75 
2fd24     74 20 6F 66 
2fd28     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
2fd2c     61 69 6E 00 
2fd30     52 65 73 75 
2fd34     6C 74 20 6E 
2fd38     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
2fd3c     65 70 72 65 
2fd40     73 65 6E 74 
2fd44     61 62 6C 65 
2fd48     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
2fd4c     65 67 61 6C 
2fd50     20 6D 75 6C 
2fd54     74 69 62 79 
2fd58     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
2fd5c     65 71 75 65 
2fd60     6E 63 65 00 
2fd64     4E 6F 20 73 
2fd68     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
2fd6c     66 69 6C 65 
2fd70     20 6F 72 20 
2fd74     64 69 72 65 
2fd78     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2fd7c     79 00 42 61 
2fd80     64 20 66 69 
2fd84     6C 65 20 6E 
2fd88     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
2fd8c     72 00 50 65 
2fd90     72 6D 69 73 
2fd94     73 69 6F 6E 
2fd98     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
2fd9c     69 65 64 00 
2fda0     4E 6F 74 20 
2fda4     65 6E 6F 75 
2fda8     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
2fdac     65 6D 6F 72 
2fdb0     79 00 54 65 
2fdb4     6D 70 6F 72 
2fdb8     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
2fdbc     66 61 69 6C 
2fdc0     75 72 65 00 
2fdc4     46 69 6C 65 
2fdc8     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
2fdcc     73 74 73 00 
2fdd0     49 6E 76 61 
2fdd4     6C 69 64 20 
2fdd8     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
2fddc     6D 65 6E 74 
2fde0     00 54 6F 6F 
2fde4     20 6D 61 6E 
2fde8     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
2fdec     65 6E 20 66 
2fdf0     69 6C 65 73 
2fdf4     00 49 2F 4F 
2fdf8     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
2fdfc     6F 72 00 4E 
2fe00     6F 74 20 61 
2fe04     20 64 69 72 
2fe08     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
2fe0c     72 79 00 49 
2fe10     73 20 61 20 
2fe14     64 69 72 65 
2fe18     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2fe1c     79 00 52 65 
2fe20     61 64 20 6F 
2fe24     6E 6C 79 20 
2fe28     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
2fe2c     20 73 79 73 
2fe30     74 65 6D 00 
2fe34     46 75 6E 63 
2fe38     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
2fe3c     20 6E 6F 74 
2fe40     20 69 6D 70 
2fe44     6C 65 6D 65 
2fe48     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
2fe4c     00 44 69 72 
2fe50     65 63 74 6F 
2fe54     72 79 20 6E 
2fe58     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
2fe5c     6D 70 74 79 
2fe60     00 4E 61 6D 
2fe64     65 20 74 6F 
2fe68     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
2fe6c     6E 67 00 44 
2fe70     65 76 69 63 
2fe74     65 20 6E 6F 
2fe78     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
2fe7c     65 6B 61 62 
2fe80     6C 65 00 42 
2fe84     61 64 20 61 
2fe88     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
2fe8c     73 73 00 42 
2fe90     72 6F 6B 65 
2fe94     6E 20 63 6F 
2fe98     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
2fe9c     74 69 6F 6E 
2fea0     00 44 65 76 
2fea4     69 63 65 20 
2fea8     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
2feac     65 73 6F 75 
2feb0     72 63 65 20 
2feb4     62 75 73 79 
2feb8     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
2febc     73 73 20 64 
2fec0     65 76 69 63 
2fec4     65 20 6C 69 
2fec8     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
2fecc     6F 20 73 70 
2fed0     61 63 65 20 
2fed4     6F 6E 20 64 
2fed8     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
2fedc     65 00 55 6E 
2fee0     6B 6E 6F 77 
2fee4     6E 20 65 72 
2fee8     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
2feec     00 00 00 00 
2fef0     00 00 00 00 | 	byte	$00[8]
2fef4     05 00 00 00 
2fef8     00 00 00 00 
2fefc     00 00 00 00 
2ff00     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ff04     00 00 00 00 | 	byte	$00, $00, $00, $00
2ff08     00 00 70 07 | 	long	(119 {__system___tx})<<20
2ff0c     00 00 80 07 | 	long	(120 {__system___rx})<<20
2ff10     00 00 00 00 | 	byte	$00, $00, $00, $00
2ff14     00 00 90 07 | 	long	(121 {__system___rxtxioctl_0539})<<20
2ff18     00 00 A0 07 | 	long	(122 {__system____dummy_flush_0540})<<20
2ff1c     00 00 00 00 
2ff20     00 00 00 00 | 	byte	$00[8]
2ff24     01 00 00 00 
2ff28     06 00 00 00 
2ff2c     00 00 00 00 
2ff30     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ff34     00 00 00 00 
2ff38     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2ff3c     00 00 70 07 | 	long	(119 {__system___tx})<<20
2ff40     00 00 80 07 | 	long	(120 {__system___rx})<<20
2ff44     00 00 00 00 | 	byte	$00, $00, $00, $00
2ff48     00 00 90 07 | 	long	(121 {__system___rxtxioctl_0539})<<20
2ff4c     00 00 A0 07 | 	long	(122 {__system____dummy_flush_0540})<<20
2ff50     00 00 00 00 
2ff54     00 00 00 00 | 	byte	$00[8]
2ff58     01 00 00 00 
2ff5c     06 00 00 00 
2ff60     00 00 00 00 
2ff64     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ff68     00 00 00 00 
2ff6c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2ff70     00 00 70 07 | 	long	(119 {__system___tx})<<20
2ff74     00 00 80 07 | 	long	(120 {__system___rx})<<20
2ff78     00 00 00 00 | 	byte	$00, $00, $00, $00
2ff7c     00 00 90 07 | 	long	(121 {__system___rxtxioctl_0539})<<20
2ff80     00 00 A0 07 | 	long	(122 {__system____dummy_flush_0540})<<20
2ff84     00 00 00 00 
      ...             
300f4     00 00 00 00 
300f8     00 00 00 00 | 	byte	$00[376]
300fc     00 01 03 00 | 	long	@@@__system__dat_ + 1844
30100     00 00 00 00 
30104     00 00 00 00 
30108     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3010c                 | 	alignl
3010c                 | _fatfs_cc_dat_
3010c     C7 00 FC 00 
30110     E9 00 E2 00 
30114     E4 00 E0 00 
30118     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3011c     EA 00 EB 00 
30120     E8 00 EF 00 
30124     EE 00 EC 00 
30128     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3012c     C9 00 E6 00 
30130     C6 00 F4 00 
30134     F6 00 F2 00 
30138     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3013c     FF 00 D6 00 
30140     DC 00 F8 00 
30144     A3 00 D8 00 
30148     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3014c     E1 00 ED 00 
30150     F3 00 FA 00 
30154     F1 00 D1 00 
30158     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3015c     BF 00 AE 00 
30160     AC 00 BD 00 
30164     BC 00 A1 00 
30168     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3016c     91 25 92 25 
30170     93 25 02 25 
30174     24 25 C1 00 
30178     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3017c     A9 00 63 25 
30180     51 25 57 25 
30184     5D 25 A2 00 
30188     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3018c     14 25 34 25 
30190     2C 25 1C 25 
30194     00 25 3C 25 
30198     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3019c     5A 25 54 25 
301a0     69 25 66 25 
301a4     60 25 50 25 
301a8     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
301ac     F0 00 D0 00 
301b0     CA 00 CB 00 
301b4     C8 00 31 01 
301b8     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
301bc     CF 00 18 25 
301c0     0C 25 88 25 
301c4     84 25 A6 00 
301c8     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
301cc     D3 00 DF 00 
301d0     D4 00 D2 00 
301d4     F5 00 D5 00 
301d8     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
301dc     DE 00 DA 00 
301e0     DB 00 D9 00 
301e4     FD 00 DD 00 
301e8     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
301ec     AD 00 B1 00 
301f0     17 20 BE 00 
301f4     B6 00 A7 00 
301f8     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
301fc     B0 00 A8 00 
30200     B7 00 B9 00 
30204     B3 00 B2 00 
30208     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3020c     61 00 1A 03 
30210     E0 00 17 03 
30214     F8 00 07 03 
30218     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3021c     78 01 00 01 
30220     30 01 32 01 
30224     06 01 39 01 
30228     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3022c     2E 01 79 01 
30230     06 01 80 01 
30234     4D 00 43 02 
30238     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3023c     82 01 84 01 
30240     84 01 86 01 
30244     87 01 87 01 
30248     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3024c     8B 01 8B 01 
30250     8D 01 8E 01 
30254     8F 01 90 01 
30258     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3025c     93 01 94 01 
30260     F6 01 96 01 
30264     97 01 98 01 
30268     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3026c     9B 01 9C 01 
30270     9D 01 20 02 
30274     9F 01 A0 01 
30278     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3027c     A2 01 A4 01 
30280     A4 01 A6 01 
30284     A7 01 A7 01 
30288     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3028c     AB 01 AC 01 
30290     AC 01 AE 01 
30294     AF 01 AF 01 
30298     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3029c     B3 01 B3 01 
302a0     B5 01 B5 01 
302a4     B7 01 B8 01 
302a8     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
302ac     BB 01 BC 01 
302b0     BC 01 BE 01 
302b4     F7 01 C0 01 
302b8     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
302bc     C3 01 C4 01 
302c0     C5 01 C4 01 
302c4     C7 01 C8 01 
302c8     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
302cc     CB 01 CA 01 
302d0     CD 01 10 01 
302d4     DD 01 01 00 
302d8     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
302dc     12 01 F3 01 
302e0     03 00 F1 01 
302e4     F4 01 F4 01 
302e8     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
302ec     22 02 12 01 
302f0     3A 02 09 00 
302f4     65 2C 3B 02 
302f8     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
302fc     66 2C 3F 02 
30300     40 02 41 02 
30304     41 02 46 02 
30308     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3030c     40 00 81 01 
30310     86 01 55 02 
30314     89 01 8A 01 
30318     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3031c     5A 02 90 01 
30320     5C 02 5D 02 
30324     5E 02 5F 02 
30328     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3032c     62 02 94 01 
30330     64 02 65 02 
30334     66 02 67 02 
30338     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3033c     6A 02 62 2C 
30340     6C 02 6D 02 
30344     6E 02 9C 01 
30348     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3034c     9D 01 73 02 
30350     74 02 9F 01 
30354     76 02 77 02 
30358     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3035c     7A 02 7B 02 
30360     7C 02 64 2C 
30364     7E 02 7F 02 
30368     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3036c     82 02 A9 01 
30370     84 02 85 02 
30374     86 02 87 02 
30378     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3037c     B1 01 B2 01 
30380     45 02 8D 02 
30384     8E 02 8F 02 
30388     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3038c     B7 01 7B 03 
30390     03 00 FD 03 
30394     FE 03 FF 03 
30398     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3039c     86 03 88 03 
303a0     89 03 8A 03 
303a4     B1 03 11 03 
303a8     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
303ac     A3 03 A3 03 
303b0     C4 03 08 03 
303b4     CC 03 03 00 
303b8     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
303bc     8F 03 D8 03 
303c0     18 01 F2 03 
303c4     0A 00 F9 03 
303c8     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
303cc     F5 03 F6 03 
303d0     F7 03 F7 03 
303d4     F9 03 FA 03 
303d8     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
303dc     20 03 50 04 
303e0     10 07 60 04 
303e4     22 01 8A 04 
303e8     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
303ec     0E 01 CF 04 
303f0     01 00 C0 04 
303f4     D0 04 44 01 
303f8     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
303fc     00 00 7D 1D 
30400     01 00 63 2C 
30404     00 1E 96 01 
30408     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3040c     00 1F 08 06 
30410     10 1F 06 06 
30414     20 1F 08 06 
30418     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3041c     40 1F 06 06 
30420     51 1F 07 00 
30424     59 1F 52 1F 
30428     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3042c     5D 1F 56 1F 
30430     5F 1F 60 1F 
30434     08 06 70 1F 
30438     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3043c     BB 1F C8 1F 
30440     C9 1F CA 1F 
30444     CB 1F DA 1F 
30448     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3044c     F9 1F EA 1F 
30450     EB 1F FA 1F 
30454     FB 1F 80 1F 
30458     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3045c     08 06 A0 1F 
30460     08 06 B0 1F 
30464     04 00 B8 1F 
30468     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3046c     BC 1F CC 1F 
30470     01 00 C3 1F 
30474     D0 1F 02 06 
30478     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3047c     E5 1F 01 00 
30480     EC 1F F3 1F 
30484     01 00 FC 1F 
30488     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3048c     32 21 70 21 
30490     10 02 84 21 
30494     01 00 83 21 
30498     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3049c     30 2C 2F 04 
304a0     60 2C 02 01 
304a4     67 2C 06 01 
304a8     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
304ac     80 2C 64 01 
304b0     00 2D 26 08 
304b4     41 FF 1A 03 
304b8     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
304bc     05 07 09 0E 
304c0     10 12 14 16 
304c4     18 1C 1E 43 
304c8     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
304cc     41 41 43 45 
304d0     45 45 49 49 
304d4     49 41 41 45 
304d8     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
304dc     4F 55 55 59 
304e0     4F 55 4F 9C 
304e4     4F 9E 9F 41 
304e8     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
304ec     A5 A6 A7 A8 
304f0     A9 AA AB AC 
304f4     AD AE AF B0 
304f8     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
304fc     41 41 41 B8 
30500     B9 BA BB BC 
30504     BD BE BF C0 
30508     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3050c     C5 41 41 C8 
30510     C9 CA CB CC 
30514     CD CE CF D1 
30518     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3051c     49 49 49 49 
30520     D9 DA DB DC 
30524     DD 49 DF 4F 
30528     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3052c     4F E6 E8 E8 
30530     55 55 55 59 
30534     59 EE EF F0 
30538     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3053c     F5 F6 F7 F8 
30540     F9 FA FB FC 
30544     FD FE FF 00 
30548     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3054c     00 00 00 00 | 	byte	$00, $00, $00, $00
30550     00 00 60 06 | 	long	(102 {_fatfs_cc_v_close})<<20
30554     00 00 70 06 | 	long	(103 {_fatfs_cc_v_read})<<20
30558     00 00 80 06 | 	long	(104 {_fatfs_cc_v_write})<<20
3055c     00 00 90 06 | 	long	(105 {_fatfs_cc_v_lseek})<<20
30560     00 00 A0 06 | 	long	(106 {_fatfs_cc_v_ioctl})<<20
30564     00 00 B0 07 | 	long	(123 {_fatfs_cc_v_flush})<<20
30568     00 00 00 00 
3056c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
30570     00 00 B0 06 | 	long	(107 {_fatfs_cc_v_open})<<20
30574     00 00 C0 06 | 	long	(108 {_fatfs_cc_v_creat})<<20
30578     00 00 D0 06 | 	long	(109 {_fatfs_cc_v_opendir})<<20
3057c     00 00 E0 06 | 	long	(110 {_fatfs_cc_v_closedir})<<20
30580     00 00 F0 06 | 	long	(111 {_fatfs_cc_v_readdir})<<20
30584     00 00 00 07 | 	long	(112 {_fatfs_cc_v_stat})<<20
30588     00 00 10 07 | 	long	(113 {_fatfs_cc_v_mkdir})<<20
3058c     00 00 20 07 | 	long	(114 {_fatfs_cc_v_rmdir})<<20
30590     00 00 30 07 | 	long	(115 {_fatfs_cc_v_remove})<<20
30594     00 00 40 07 | 	long	(116 {_fatfs_cc_v_rename})<<20
30598     00 00 50 07 | 	long	(117 {_fatfs_cc_v_init})<<20
3059c     00 00 60 07 | 	long	(118 {_fatfs_cc_v_deinit})<<20
305a0     FF FF FF FF 
305a4     1F 00 00 00 
305a8     1C 00 00 00 
305ac     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
305b0     1E 00 00 00 
305b4     1F 00 00 00 
305b8     1E 00 00 00 
305bc     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
305c0     1F 00 00 00 
305c4     1E 00 00 00 
305c8     1F 00 00 00 
305cc     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
305d0     1F 00 00 00 
305d4     00 00 00 00 
305d8     1F 00 00 00 
305dc     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
305e0     5A 00 00 00 
305e4     78 00 00 00 
305e8     97 00 00 00 
305ec     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
305f0     D4 00 00 00 
305f4     F3 00 00 00 
305f8     11 01 00 00 
305fc     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
30600     4E 01 00 00 
30604     6D 01 00 00 
30608     FF FF FF FF 
3060c     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
30610     00 00 00 00 
      ...             
30628     00 00 00 00 
3062c     00 00 00 00 | 	byte	$00[32]
30630     4E 06 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
30634     52 06 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
30638     00 00 00 00 
3063c     00 00 00 00 
30640     00 00 00 00 
30644     00 00 00 00 
30648     00 00       | 	byte	$00[18]
3064a     3F 3F 3F 00 
3064e     55 43 54 00 
30652     55 43 54 00 
30656     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3065a     00 00 00 00 
3065e     00 00 00    | 	byte	$00[7]
30661     CA 9A 3B 00 
30665     00 00 00 01 
30669     01 01 01 01 
3066d     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
30671     91 11 11 11 
30675     11 01 01 01 
30679     01 01 01 01 
3067d     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
30681     01 01 01 01 
30685     01 01 01    | 	byte	$01[7]
30688     90 20 20 20 
3068c     20 20 20 20 
30690     20 20 20 20 
30694     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
30698     42 42 42 42 
3069c     42 42 42 42 
306a0     42 42       | 	byte	$42[10]
306a2     20 20 20 20 
306a6     20 20 20    | 	byte	$20[7]
306a9     44 44 44 44 
306ad     44 44       | 	byte	$44[6]
306af     04 04 04 04 
306b3     04 04 04 04 
306b7     04 04 04 04 
306bb     04 04 04 04 
306bf     04 04 04 04 | 	byte	$04[20]
306c3     20 20 20 20 
306c7     20 20       | 	byte	$20[6]
306c9     48 48 48 48 
306cd     48 48       | 	byte	$48[6]
306cf     08 08 08 08 
306d3     08 08 08 08 
306d7     08 08 08 08 
306db     08 08 08 08 
306df     08 08 08 08 | 	byte	$08[20]
306e3     20 20 20 20 
306e7     01 00 00 00 
306eb     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
306ec                 | __methodtable__
306ec     9C 33 01 00 | 	long	@_do_no_command
306f0     58 C9 00 00 | 	long	@_do_plus
306f4     44 CE 00 00 | 	long	@_do_minus
306f8     0C D3 00 00 | 	long	@_do_or
306fc     24 D4 00 00 | 	long	@_do_mul
30700     B0 D9 00 00 | 	long	@_do_fdiv
30704     F4 D1 00 00 | 	long	@_do_and
30708     90 D7 00 00 | 	long	@_do_div
3070c     78 DB 00 00 | 	long	@_do_mod
30710     98 DD 00 00 | 	long	@_do_shl
30714     B0 DE 00 00 | 	long	@_do_shr
30718     C8 DF 00 00 | 	long	@_do_power
3071c     B8 C3 00 00 | 	long	@_do_getvar
30720     04 8D 00 00 | 	long	@_do_push
30724     00 BD 00 00 | 	long	@_do_assign
30728     44 10 01 00 | 	long	@_do_cls
3072c     30 B7 00 00 | 	long	@_do_new
30730     E8 10 01 00 | 	long	@_do_plot
30734     20 12 01 00 | 	long	@_do_draw
30738     08 1C 01 00 | 	long	@_do_print
3073c     00 15 01 00 | 	long	@_do_circle
30740     88 13 01 00 | 	long	@_do_fcircle
30744     78 16 01 00 | 	long	@_do_box
30748     20 1A 01 00 | 	long	@_do_frame
3074c     B0 10 01 00 | 	long	@_do_color
30750     08 6D 00 00 | 	long	@_do_for
30754     34 6F 00 00 | 	long	@_do_next
30758     94 B4 00 00 | 	long	@_do_list
3075c     54 9D 00 00 | 	long	@_do_run
30760     BC BB 00 00 | 	long	@_do_error
30764     B8 B8 00 00 | 	long	@_do_fast_goto
30768     A8 B9 00 00 | 	long	@_do_find_goto
3076c     B8 BB 00 00 | 	long	@_do_slow_goto
30770     90 FE 00 00 | 	long	@_do_converttoint
30774     48 93 00 00 | 	long	@_test_csave
30778     9C 96 00 00 | 	long	@_do_save
3077c     88 99 00 00 | 	long	@_do_load
30780     D4 25 01 00 | 	long	@_do_pinwrite
30784     74 2A 01 00 | 	long	@_do_waitms
30788     B0 2B 01 00 | 	long	@_do_waitvbl
3078c     B0 2E 01 00 | 	long	@_do_if
30790     94 2F 01 00 | 	long	@_do_else
30794     B8 2F 01 00 | 	long	@_do_nothing
30798     90 E1 00 00 | 	long	@_do_eq
3079c     08 F0 00 00 | 	long	@_do_ge
307a0     E0 F4 00 00 | 	long	@_do_le
307a4     68 E6 00 00 | 	long	@_do_gt
307a8     40 EB 00 00 | 	long	@_do_lt
307ac     B8 F9 00 00 | 	long	@_do_ne
307b0     E4 00 01 00 | 	long	@_do_rnd
307b4     BC 2F 01 00 | 	long	@_do_brun
307b8     88 32 01 00 | 	long	@_do_beep
307bc     E0 2B 01 00 | 	long	@_do_dir
307c0     D0 20 01 00 | 	long	@_do_paper
307c4     58 21 01 00 | 	long	@_do_ink
307c8     F4 21 01 00 | 	long	@_do_font
307cc     70 22 01 00 | 	long	@_do_mode
307d0     F4 31 01 00 | 	long	@_do_mouse
307d4     DC 0F 01 00 | 	long	@_do_gettime
307d8     28 32 01 00 | 	long	@_do_cursor
307dc     5C 32 01 00 | 	long	@_do_click
307e0     68 0D 01 00 | 	long	@_do_mousex
307e4     AC 0D 01 00 | 	long	@_do_mousey
307e8     34 0E 01 00 | 	long	@_do_mousek
307ec     F0 0D 01 00 | 	long	@_do_mousew
307f0     AC 02 01 00 | 	long	@_do_sin
307f4     94 04 01 00 | 	long	@_do_stick
307f8     18 06 01 00 | 	long	@_do_strig
307fc     7C 0C 01 00 | 	long	@_do_sprite
30800     EC 08 01 00 | 	long	@_do_defsprite
30804     9C 07 01 00 | 	long	@_do_getpixel
30808     BC 2B 01 00 | 	long	@_do_waitclock
3080c     A8 33 01 00 | 	long	@_do_negative
30810     78 0E 01 00 | 	long	@_do_rdpin
30814     E4 0E 01 00 | 	long	@_do_rqpin
30818     58 0F 01 00 | 	long	@_do_pinread
3081c     6C 28 01 00 | 	long	@_do_wrpin
30820     EC 28 01 00 | 	long	@_do_wxpin
30824     6C 29 01 00 | 	long	@_do_wypin
30828     5C 26 01 00 | 	long	@_do_pinfloat
3082c     9C 26 01 00 | 	long	@_do_pinlo
30830     DC 26 01 00 | 	long	@_do_pinhi
30834     5C 27 01 00 | 	long	@_do_pinstart
30838     1C 27 01 00 | 	long	@_do_pintoggle
3083c     EC 29 01 00 | 	long	@_do_position
30840     60 18 01 00 | 	long	@_do_fill
30844     10 AB 00 00 | 	long	@_do_defsnd
30848     78 A0 00 00 | 	long	@_do_defenv
3084c     14 66 01 00 | 	long	@_hg010b_spin2_putchar
30850     CC 67 02 00 | 	long	@__struct___bas_wrap_sender_tx
30854     10 68 02 00 | 	long	@__struct___bas_wrap_sender_rx
30858     58 68 02 00 | 	long	@__struct___bas_wrap_sender_close
3085c     FC 66 02 00 | 	long	@__struct__s_vfs_file_t_putchar
30860     6C 67 02 00 | 	long	@__struct__s_vfs_file_t_getchar
30864     B4 66 02 00 | 	long	@___strs_cl_pfunc
30868     FC C6 01 00 | 	long	@__system____root_opendir
3086c     98 C7 01 00 | 	long	@__system____root_closedir
30870     14 C7 01 00 | 	long	@__system____root_readdir
30874     A0 C7 01 00 | 	long	@__system____root_stat
30878     28 C0 01 00 | 	long	@__system____default_putc
3087c     AC BF 01 00 | 	long	@__system____default_getc
30880     D0 C0 01 00 | 	long	@__system____default_flush
30884     BC 51 02 00 | 	long	@_fatfs_cc_v_close
30888     D8 55 02 00 | 	long	@_fatfs_cc_v_read
3088c     EC 56 02 00 | 	long	@_fatfs_cc_v_write
30890     CC 57 02 00 | 	long	@_fatfs_cc_v_lseek
30894     54 58 02 00 | 	long	@_fatfs_cc_v_ioctl
30898     A8 58 02 00 | 	long	@_fatfs_cc_v_open
3089c     20 51 02 00 | 	long	@_fatfs_cc_v_creat
308a0     00 52 02 00 | 	long	@_fatfs_cc_v_opendir
308a4     74 52 02 00 | 	long	@_fatfs_cc_v_closedir
308a8     B4 52 02 00 | 	long	@_fatfs_cc_v_readdir
308ac     E8 53 02 00 | 	long	@_fatfs_cc_v_stat
308b0     68 58 02 00 | 	long	@_fatfs_cc_v_mkdir
308b4     88 58 02 00 | 	long	@_fatfs_cc_v_rmdir
308b8     78 58 02 00 | 	long	@_fatfs_cc_v_remove
308bc     98 58 02 00 | 	long	@_fatfs_cc_v_rename
308c0     B8 59 02 00 | 	long	@_fatfs_cc_v_init
308c4     C0 59 02 00 | 	long	@_fatfs_cc_v_deinit
308c8     50 79 01 00 | 	long	@__system___tx
308cc     90 79 01 00 | 	long	@__system___rx
308d0     24 D2 01 00 | 	long	@__system___rxtxioctl_0539
308d4     7C D2 01 00 | 	long	@__system____dummy_flush_0540
308d8     88 59 02 00 | 	long	@_fatfs_cc_v_flush
308dc                 | __heap_base
308dc     00 00 00 00 
      ...             
5f6dc     00 00 00 00 
5f6e0     00 00 00 00 | 	long	0[48002]
5f6e4                 | objmem
5f6e4     00 00 00 00 
      ...             
6eba8     00 00 00 00 
6ebac     00 00 00 00 | 	long	0[15667]
6ebb0                 | stackspace
6ebb0     00 00 00 00 | 	long	0[1]
6ebb4 100             | 	org	COG_BSS_START
6ebb4 100             | _var01
6ebb4 100             | 	res	1
6ebb4 101             | _var02
6ebb4 101             | 	res	1
6ebb4 102             | _var03
6ebb4 102             | 	res	1
6ebb4 103             | _var04
6ebb4 103             | 	res	1
6ebb4 104             | _var05
6ebb4 104             | 	res	1
6ebb4 105             | _var06
6ebb4 105             | 	res	1
6ebb4 106             | _var07
6ebb4 106             | 	res	1
6ebb4 107             | _var08
6ebb4 107             | 	res	1
6ebb4 108             | _var09
6ebb4 108             | 	res	1
6ebb4 109             | arg01
6ebb4 109             | 	res	1
6ebb4 10a             | arg02
6ebb4 10a             | 	res	1
6ebb4 10b             | arg03
6ebb4 10b             | 	res	1
6ebb4 10c             | arg04
6ebb4 10c             | 	res	1
6ebb4 10d             | arg05
6ebb4 10d             | 	res	1
6ebb4 10e             | arg06
6ebb4 10e             | 	res	1
6ebb4 10f             | local01
6ebb4 10f             | 	res	1
6ebb4 110             | local02
6ebb4 110             | 	res	1
6ebb4 111             | local03
6ebb4 111             | 	res	1
6ebb4 112             | local04
6ebb4 112             | 	res	1
6ebb4 113             | local05
6ebb4 113             | 	res	1
6ebb4 114             | local06
6ebb4 114             | 	res	1
6ebb4 115             | local07
6ebb4 115             | 	res	1
6ebb4 116             | local08
6ebb4 116             | 	res	1
6ebb4 117             | local09
6ebb4 117             | 	res	1
6ebb4 118             | local10
6ebb4 118             | 	res	1
6ebb4 119             | local11
6ebb4 119             | 	res	1
6ebb4 11a             | local12
6ebb4 11a             | 	res	1
6ebb4 11b             | local13
6ebb4 11b             | 	res	1
6ebb4 11c             | local14
6ebb4 11c             | 	res	1
6ebb4 11d             | local15
6ebb4 11d             | 	res	1
6ebb4 11e             | local16
6ebb4 11e             | 	res	1
6ebb4 11f             | local17
6ebb4 11f             | 	res	1
6ebb4 120             | local18
6ebb4 120             | 	res	1
6ebb4 121             | local19
6ebb4 121             | 	res	1
6ebb4 122             | local20
6ebb4 122             | 	res	1
6ebb4 123             | local21
6ebb4 123             | 	res	1
6ebb4 124             | local22
6ebb4 124             | 	res	1
6ebb4 125             | local23
6ebb4 125             | 	res	1
6ebb4 126             | local24
6ebb4 126             | 	res	1
6ebb4 127             | local25
6ebb4 127             | 	res	1
6ebb4 128             | local26
6ebb4 128             | 	res	1
6ebb4 129             | local27
6ebb4 129             | 	res	1
6ebb4 12a             | local28
6ebb4 12a             | 	res	1
6ebb4 12b             | local29
6ebb4 12b             | 	res	1
6ebb4 12c             | local30
6ebb4 12c             | 	res	1
6ebb4 12d             | local31
6ebb4 12d             | 	res	1
6ebb4 12e             | local32
6ebb4 12e             | 	res	1
6ebb4 12f             | local33
6ebb4 12f             | 	res	1
6ebb4 130             | muldiva_
6ebb4 130             | 	res	1
6ebb4 131             | muldivb_
6ebb4 131             | 	res	1
6ebb4 132             | 	fit	480
6ebb4 132             | 
